#INCLUDE "MNTA902.ch"
#INCLUDE "Protheus.ch"
#INCLUDE "hbutton.ch"
#INCLUDE "DbTree.ch"

// MDT
#DEFINE _nPosRisco  "7"
#DEFINE _nPosPerigo "8"
#DEFINE _nPosDano   "9"

// SGA
#DEFINE __cTpRes    "A"
#DEFINE __cTpAsp    "B"
#DEFINE __cTpPE     "D"
#DEFINE __cTpOcRes  "E"
#DEFINE __cTpDesem  "F"
#DEFINE __cTpOcPE   "G"
#DEFINE __cTpFMR    "H"

//Variavel que identifica o tamanho do campo Filial
#DEFINE __nSizeFil If(FindFunction("FWSizeFilial"),FwSizeFilial(),Len(SM0->M0_CODFIL))

//Variavel utilizada para verificacao da TPN
#DEFINE __cHora Substr(Time(),1,5)

Static aPswRet := UsrRetGrp(cUsername)

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA902
Programa para manutenção da Árvore Lógica
@type function

@author Rafael Diogo Richter
@since 13/10/2008

@param
@return True
/*/
//---------------------------------------------------------------------
Function MNTA902()

	Local aNGBeginPrm := {}
	Local cFilOld     := cFilAnt
	Local lSigaMdtPs  := .T.
	Local lRestricao  := .T.
	Local cQuery      := ''

	If !FindFunction( 'MNTAmIIn' ) .Or. MNTAmIIn( 19, 35, 95, 56 )

		aNGBeginPrm       := NGBeginPrm( , , , , .T. )
		lSigaMdtPs        := SuperGetMv( 'MV_MDTPS', .F., 'N' ) == 'S'
		lRestricao        := fBscRestr()

		Private lCorret   := .T.
		Private lBemAL 	  := ""
		Private cBemAL
		Private lBem 	  := .F.
		Private TIPOACOM
		Private _cGetDB   := TcGetDb()                                 // Verifica qual o Banco de Dados está sendo usado
		Private aBensTrb  := {}                                        // Array que armazena o BEM 'atual' na importação via C.C.
		Private aBensTot  := {}                                        // Array que armazena o TOTAL de bens na importação via C.C.
		Private cSPName   := 'M902' + cValToChar( ThreadId() )         // Nome da stored procedure de legenda
		Private cSPClr    := 'M902' + cValToChar( ThreadId() ) + 'CLR' // Nome da Stored Procedure das cores de pasta.
		Private oLastLoad := Nil
		Private nMod902   := IIf( nModulo == 95, 19, nModulo) //Indicador de Módulo

		//variavel utilizada para otimização do carregamento da legenda
		Private lbySQL   := (nMod902 == 19) .And. !lRestricao .And. !(Upper(_cGetDB) $ 'ORACLE,POSTGRES,INFORMIX' .Or. Upper(_cGetDB) $ 'DB2')
		Private lByORA   :=  nMod902 == 19  .And. !lRestricao .And.   Upper(_cGetDB) $ 'ORACLE'
		Private lByOpt   := lBySQL .Or. lByORA
		Private cNameChc := 'CACHE'              + cSPName
		Private cNameCOO := 'CACHE_OF_ORDERS'    + cSPName
		Private cNameCOS := 'CACHE_OF_SS'        + cSPName
		Private cColrChc := 'CACHEClr'           + cSPClr
		Private cColrCOO := 'CACHE_OF_ORDClr'    + cSPClr
		Private cColrCOS := 'CACHE_OF_SSClr'     + cSPClr

		Private cFil      := ""
		Private cCodFami  := ""
		Private cBem      := ""
		Private aFilUsr   := {}
		Private bOk       := {||fVerifFil()}
		Private aHeader
		Private aCols
		Private lIntRM := AllTrim(GetNewPar("MV_NGINTER","N")) == "M"

		// array para atualizar os campos TAF_NIVSUP dos registros que tiveram seu pai processado depois deles
		Private aRecFilhos:= {}

		If lByOpt
			// SS: 029341
			// Retirada validação temporariamente para que não ocorra erro.log para usuário sem acesso as tabelas
			// do sistema. Assim que achada solução para tal erro a função será descomentada.
			//f902VerStP()
		EndIf

		/*--------------------------------------------------------------------------------------------------------+
		| Realiza a verificação de existencia da Stored Procedure e realiza sua deleção. Tratativa criada pois no |
		| fluxo normal a exclusão da SP só ocorre ao final do programa, sendo que a cada acesso é criada uma nova.|
		| então em possíveis erro.log ela ficaria em aberta por tempo indeterminado.                              |
		+--------------------------------------------------------------------------------------------------------*/
		If lByOpt .And. TCSPExist( cSPClr )

			cQuery := 'DROP PROCEDURE ' + cSPClr
			TCSqlExec( cQuery )

			If lByORA

				cQuery := 'DROP TABLE ' + cColrChc
				TCSqlExec( cQuery )
				cQuery := 'DROP TABLE ' + cColrCOO
				TCSqlExec( cQuery )
				cQuery := 'DROP TABLE ' + cColrCOS
				TCSqlExec( cQuery )

			EndIf

		EndIf

		If lSigaMdtPs
			MsgStop(STR0241,STR0091) //"Prestador de Serviço não tem acesso a Árvore Lógica."###"Atenção"
		Else

			Define Dialog oDlg902 From 5,5 To 415,690 COLOR CLR_BLACK,CLR_WHITE STYLE nOr(DS_SYSMODAL,WS_MAXIMIZEBOX,WS_POPUP) Pixel

				oBmpArv              := TBitmap():New(0,0,411,647,,"NG_INTRO_ARVORE",.T.,,,,.F.,.F.,,,.F.,,.F.,,.F.)
				oBmpArv:lTransparent := .F.
				oBmpArv:Align        := CONTROL_ALIGN_ALLCLIENT

				nMeter      := 0
				nTotalMeter := 3
				nIncMeter   := 0
				oArvSay     :=   TSay():New(180,130,{|| STR0148},oBmpArv,,,,,,.T.,CLR_RED,CLR_WHITE,200,20) //"Iniciando Programa"
				oArvMeter   := TMeter():New(194,128,{|u|IIf(Pcount()>0,nMeter:=u,nMeter)},100,oBmpArv,100,8,,.T.)

				oArvMeter:SetTotal(nTotalMeter)
				oArvMeter:Set(nIncMeter)

			ACTIVATE DIALOG oDlg902 ON INIT ( Eval( { || MNT902MAIN( aNGBeginPrm ) } ),oDlg902:End()) CENTERED

		EndIf

		NGRETURNPRM( aNGBeginPrm )

		cFilAnt := cFilOld

		//Ao sair da rotina exclui as Stored Procedures criadas.
		If lByOpt .And. TCSPExist( cSPClr )

			cQuery := 'DROP PROCEDURE ' + cSPClr
			TCSqlExec( cQuery )

			If lByORA

				cQuery := 'DROP TABLE ' + cColrChc
				TCSqlExec( cQuery )
				cQuery := 'DROP TABLE ' + cColrCOO
				TCSqlExec( cQuery )
				cQuery := 'DROP TABLE ' + cColrCOS
				TCSqlExec( cQuery )

			EndIf

		EndIf

	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902MAIN
Programa para manutencao da Arvore Logica.
@author Rafael Diogo Richter
@since 13/10/2008
@version undefined
@param aNGBEGINPRM, array
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902MAIN(aNGBEGINPRM)

	Local oDlg
	Local oPnlDlg
	Local oSplitter
	Local oPanel1
	Local oSplitter2
	Local oPanelEsq
	Local i
	Local lAltDes     := .F.
	Local aSize       := MsAdvSize(,.F.,430)
	Local nTamCodTipo := 0
	Local nLinLg      := 0
	Local nColLg      := 0
	Local nX          := 0
	Local nLeft       := 0
	Local aIconArvo   := {}
	Local aRecNiv     := {}
	Local aRegExc     := {}
	Local aTblTemp    := {}
	Local aButton     := {{"SALVAR",{|| Processa({|| MNT902Grava(.F.)},STR0019,STR0144,.F.)},STR0161,STR0161}} //"Salvar"
	Local cFilOld     := cFilAnt
	Local lFacilit    := FindFunction("MNTINTFAC") .And. MNTINTFAC()
	Local oSize       := FwDefSize():New(.T.)
	Local nLinIniTla  := oSize:aWindSize[1] // Linha  inicial da tela
	Local nColIniTla  := oSize:aWindSize[2] // Coluna inicial da tela
	Local nLinFimTla  := oSize:aWindSize[3] // Linha  final   da tela
	Local nColFimTla  := oSize:aWindSize[4] // Coluna final   da tela

	Private oTree

	Private oBtnRel,    oBtnROS,   oBtnIOSPr, oBtnIOSCo, oBtnIncId, oTreeBem
	Private oBtnAltId,  oBtnExcId, oBtnIOSCE, oBtnIOSPE, oMnuTree,  oBtnImpOs
	Private oBtnIncFun, oBtnAltFu, oBtnExcFu, oBtnIncTa, oBtnAltTa, oBtnExcTa
	Private oBtnIncPe,  oBtnAltPe, oBtnExcPe, oBtnVerAn, oBtnIncAn, oBtnAltAn, oBtnExcAn

	Private M->T9_CODBEM := ""
	Private nOPCAO       := 2
	Private aVETINR      := {}
	Private aChoice      := {}
	Private nOpca        := 0
	Private cLocal       := ''
	Private INCLUI       := .F.
	Private ALTERA       := .T.
	Private lAchou       := .F.
	Private cCodEst      := "001"
	Private cCodNiv      := "000"

	Private cCadastro    := OemtoAnsi(STR0001) //"Árvore Lógica"

	Private lRateio      := NGCADICBASE('TAF_RATEIO','D','TAF',.F.)
	Private lFamilia     := .T.
	Private lRetS        := .T.
	Private lCodAmb      := .T.
	Private lSitNiv      := NGCADICBASE("TAF_SITNIV", "A", "TAF", .F. ) .And. nMod902 == 56

	Private oFont        := TFont():New("Courier New",10,20,,.F.,,,,.F.)

	Private oIdent, nIdent := 0
	Private oBens, nBens   := 0
	Private oSSD, nSSD     := 0
	Private oSSA, nSSA     := 0
	Private oSSM, nSSM     := 0
	Private oVerde, nVerde := 0
	Private oVerm, nVerm   := 0
	Private oAmar, nAmar   := 0
	Private oFunc, nFunc   := 0
	Private oTare, nTare   := 0
	Private oPeri, nPeri   := 0
	Private oRisc, nRisc   := 0
	Private oDano, nDano   := 0

	Private oEnc, oPanel2, oPanel21, oPanel22, oPanelPesq, oListTw, aLinhas
	Private oCheck1, oCheck2, oCheck3, oCheck4, oCheck5, oCheck6, oCheck7, oCheck8, oCheckMos

	Private aGets	:= Array(0)
	Private aTela	:= Array(0,0)

	Private lCheck1   := .T.
	Private lCheck2   := .T.
	Private lCheck3   := .T.
	Private lCheck4   := .T.
	Private lCheck5   := .T.
	Private lCheck6   := .T.
	Private lCheck7   := .T.
	Private lCheck8   := .T.
	Private lCheckMos := .T.
	Private lCheckRis

	Private oFldRel
	Private oGetOsIn, oGetOsEt, oGetOsOc, oGetOsMo, oGetBeCa, oGetBePe, oEncTMS
	Private aPages    := {}
	Private aTitles   := {}
	Private nControl  := 0
	Private nFoldTMS  := 0
	Private aHeadOsIn := Array(0), aColsOsIn := Array(0), aHeadOsEt := Array(0), aColsOsOc := Array(0)
	Private aColsOsEt := Array(0), aHeadOsMo := Array(0), aColsOsMo := Array(0), aHeadOsOc := Array(0)
	Private aHeadBeCa := Array(0), aColsBeCa := Array(0), aHeadBePe := Array(0), aColsBePe := Array(0)
	Private aHeadBeMa := Array(0), aColsBeMa := Array(0), aHeadBeHo := Array(0), aColsBeHo := Array(0)
	Private aHeadBeHC1:= Array(0), aColsBeHC1:= Array(0), aHeadBeHC2:= Array(0), aColsBeHC2:= Array(0)
	Private aULTPECASR:= Array(0), aHeadHOSI := Array(0), aColsHOSI := Array(0), aHeadHOSO := Array(0)
	Private aColsHOSO := Array(0), aHeadHOSE := Array(0), aColsHOSE := Array(0)

	Private cAliasTRB, cTRBSGA, cDescBem, cHOS
	Private oArqc902 , cIdx1c902, cIdx2c902, cLoc := "", cRetPar := ""
	Private oPnlEstB, oGetBeMa, oGetBeHo, oGetBeHC2, oGetBeHC1, oGetBeUP, oGetHOSI, oGetHOSO, oGetHOSE, oLoc
	Private oPnlHis, oBtnVOS, oBtnFOS, oBtnHOSI, oBtnHOSO, oBtnHOSE, oBtnHOSF, oPanelHOS, oPanelHOST
	Private bFami
	Private aSVATELA1 := {}
	Private aSVATELA2 := {}
	Private aSVAGETS1 := {}
	// A partir do release 12.1.33, o parâmetro MV_NGMNTFR será descontinuado
	// Haverá modulo específico para a gestão de Frotas no padrão do produto
	Private lFrota    := IIf( FindFunction('MNTFrotas'), MNTFrotas(), GetNewPar('MV_NGMNTFR','N') == 'S' )
	Private lIntTMS   := GetNewPar('MV_NGMNTMS','N') == 'S'
	Private lOHSAS    := AliasInDic("TG9") .And. SuperGetMv( "MV_NG2OHSA", .T. , "2" ) == "1"

	Private nMV1, nMV2, nMV3
	Private aItensCar := {}
	Private nNivel    := 0
	Private nMaxNivel := 0
	Private aGETINSAL := {}  // Utilizado no MNTA420
	Private aNGButton := {}

   	//Variaveis de pesquisa
	Private cVarPesq := Space(60)
	Private cCmbPesq := STR0130 //"Bem"
	Private aCmbPesq := IIf(nMod902 == 19,{STR0130,STR0143,STR0162},;                       //"Bem"###"Local."###"Estrutura"
						IIf(nMod902 == 35,{STR0143,STR0166,STR0167,IIf(lCodAmb,STR0222,)},; //"Localização"###"Função"###"Tarefa"###"Risco"
						IIf(nMod902 == 56,{STR0143,STR0252,STR0251,STR0283},;               //"Localização"###"Resíduo"###"Aspecto"###"Plano Emerg."
							{STR0143}))) //"Localização"

	Private oGetPesq, oCmbPesq

	Private oPanel23
	Private bLinePesq := {|| }, aItensPesq := {{"","",.F.,"","",0,{},""}}

   	//Variaveis de Listagem dos Relacionamentos
	Private oPanel24
	Private oListRel
	Private bLineRel  := { || }, aItensRel := { { "" , "" } }
	Private cTableRel := ""

   	// Variáveis utilizadas pelo clique da direita
	Private lDSS   := .F.
	Private lExcSS := .F.
	Private lAltSS := .F.
	Private lGerOs := .F.
	Private lFinSS := .F.

   	//Variavel com todas as filiais utilizadas pela Arvore Logica
	Private aFilial

   	// Variável do Painel de Indicadores (classe TNGPanel())
	Private oPnlIndic, oTNGPanel, oPnlLgnd, oPnlShowLg

   	// Variável utilizada pelo WHEN do TF_DTULTMA
	Private lWhenOs := .T.

   	//Variavel utilizada para o icone de inclusao de bem na arvore
	Private cNgIcoIncB := "ng_ico_incbem"
	Private cNgIcoExcB := "ng_ico_excbem"
	Private cNgIcoBem  := "ENGRENAGEM"
	Private cNgpstBem  := "ENGRENAGEM"

   	//Varialve utilizada no ponto de entrada para habiltar ou desabilitar o bChange da Arvore NAO DELETAR
	Private lBChange := .T.

   	//Variavel utilizada para receber o valor do ponto de entrada MNTA902B
	Private aUserTAF := {}

	//Verifica se o usuário tem permissão para mostrar os indicadores
	Private lPermInd := fPermInd()

	If FindFunction( 'MNTA904UPD' )

		// Ajuste de base na tabela TUB.
		MNTA904UPD()

	EndIf

   	//Ponto de entrada para trocar os icones da Arvore Logica
	If ExistBlock("MNTA9021")
		aIconArvo := ExecBlock("MNTA9021",.F.,.F.)
		If ValType(aIconArvo) == 'A'

			If Len(aIconArvo) >= 1
				cNgIcoIncB := aIconArvo[1]
				If !Empty(aIconArvo[2])
					cHintIncB := aIconArvo[2]
				EndIf
			EndIf

			If Len(aIconArvo) >= 2
				cNgIcoExcB := aIconArvo[2]
			EndIf

			If Len(aIconArvo) >= 3
				cNgIcoBem := aIconArvo[3]
			EndIf

			If Len(aIconArvo) >= 4
				cNgpstBem := aIconArvo[4]
			EndIf
		EndIf
	EndIf

   	// Controle para Habilitar/Desabilitar contagem na legenda
	Pergunte( 'MNTA902', .F. )
	lCheckMos := ( MV_PAR02 == 1 )
	lCheckRis := IIf( Type( 'MV_PAR03' ) == 'N', MV_PAR03 == 1 .And. nMod902 == 35, .F. )
	nMV2      := MV_PAR02

	If nMod902 == 19 .And. GetRPORelease() >= '12.1.027'

		Pergunte( 'MNTA902MNT', .F. )
		nMV1 := MV_PAR01

	Else

		nMV1 := 2 // Força a 'desabilitação' da legenda por padrão.

	EndIf


	If FWModeAccess("TAF",3) <> FWModeAccess("TCJ",3)
		MsgAlert(STR0102+chr(13) +; //"Existe um problema de compartilhamento entre as tabelas TAF e TCJ."
				 STR0103,STR0091)   //"Favor verificar o X2_MODO dessas tabelas para que sejam iguais."###"Atenção!"

      	//Devolve variaveis armazenadas (NGRIGHTCLICK)
		NGRETURNPRM(aNGBEGINPRM)

		Return .T.
	EndIf

	aCampos := {}

	nTamCodTipo := IIf( nMod902 <> 56, 16, Max(TAMSX3("TAX_CODRES")[1], 16) ) // Ajusta tamanho maximo do campo Codtipo da tabela principal

	aAdd(aCampos,{"FILIAL"  ,"C",__nSizeFil,0})
	aAdd(aCampos,{"CODEST"  ,"C",03,0})
	aAdd(aCampos,{"CODPRO"  ,"C",03,0})
	aAdd(aCampos,{"DESCRI"  ,"C",TAMSX3("TAF_NOMNIV")[1],0})
	aAdd(aCampos,{"NIVSUP"  ,"C",03,0})
	aAdd(aCampos,{"RESPONS" ,"C",TAMSX3("TAF_MAT")[1],0})
	aAdd(aCampos,{"TIPO"    ,"C",01,0})
	aAdd(aCampos,{"CODTIPO" ,"C",nTamCodTipo,0})
	aAdd(aCampos,{"CC"      ,"C",TAMSX3("CTT_CUSTO")[1],0})
	If NGCADICBASE("TAF_DEPTO","A","TAF",.F.)
		aAdd(aCampos,{"DEPTO","C",TAMSX3("QB_DEPTO")[1],0})
	EndIf
	aAdd(aCampos,{"CENTRAB" ,"C",06,0})
	aAdd(aCampos,{"DOCFIL"  ,"C",02,0})
	aAdd(aCampos,{"MODSGA"  ,"C",01,0})
	aAdd(aCampos,{"MODMNT"  ,"C",01,0})
	aAdd(aCampos,{"MODMDT"  ,"C",01,0})
	aAdd(aCampos,{"ORDEM"   ,"C",03,0})
	aAdd(aCampos,{"DELETADO","C",01,0})
	aAdd(aCampos,{"NIVEL"   ,"N",02,0})
	aAdd(aCampos,{"CARGO"   ,"C",03,0})

	If lRateio
		aAdd(aCampos,{"RATEIO","C",01,0})
	EndIf

	If lFamilia
		aAdd(aCampos,{"CODFAM","C",06,0})
	EndIf

	If lRetS
		aAdd(aCampos,{"ETAPA" ,"C",01,0})
	EndIf

	If lCodAmb
		aAdd(aCampos,{"CODAMB","C",TamSX3("TNE_CODAMB")[1],0})
	EndIf

	If lSitNiv
		aAdd(aCampos,{"SITNIV","C",TamSX3("TAF_SITNIV")[1],0})
		aAdd(aCampos,{"ATFIL" ,"C",01,0})
	EndIf

   //Ponto de entrada para inclusão de campos.
	If ExistBlock("MNTA902B")
		aUserTAF := ExecBlock("MNTA902B",.F.,.F.)
		If ValType(aUserTAF) == "A" .And. !Empty(aUserTAF)
			AddUserFld(aUserTAF, @aCampos)
		EndIf
	EndIf

	cTRBSGA   := GetNextAlias()

	vINDA100 := {{"CODEST","NIVSUP" ,"FILIAL"},;
				 {"CODEST","CODPRO" ,"FILIAL"},;
				 {"TIPO"  ,"CODTIPO","FILIAL"},;
				 {"CODEST","NIVSUP" ,"ORDEM" },;
				 {"CODEST","NIVEL"  ,"ORDEM" },;
				 {"DESCRI"},;
				 {"TIPO","CODTIPO","CODEST","NIVSUP","FILIAL"},;
				 If( lCodAmb, {"CC","CODAMB"}, {"CC"}),;
				 { 'CODEST', 'NIVEL', 'FILIAL' };
				 }

	oARQTA100 := fCriaTRB(cTRBSGA,aCampos,vINDA100)

   	//Verifica se ja tem o primeiro nivel da Estrutura
	If !MNT902vEst()
		If !MNT902IdIn()
         	//Deleta o arquivo temporario fisicamente
			oARQTA100:Delete()

         	//Devolve variaveis armazenadas (NGRIGHTCLICK)
			NGRETURNPRM(aNGBEGINPRM)
			Return .F.
		EndIf
	EndIf

	aAdd(aTblTemp,{cTRBSGA,oARQTA100})

   	// Modulo SGA
	If nMod902 == 56
		InitSGA(@aTblTemp)    // Inicializa variaveis pertencentes ao modulo SGA
	EndIf

	dbSelectArea("TAF")
	dbSetOrder(2)
	dbSeek(xFilial("TAF"),.T.)
	RegToMemory("TAF",.F.)

	If nMod902 == 19

		dbSelectArea("ST9")
		dbSetOrder(1)
		dbSeek(xFilial("ST9"),.T.)
		RegToMemory("ST9",.F.)

		dbSelectArea("STJ")
		dbSetOrder(1)
		dbSeek(xFilial("STJ"),.T.)
		RegToMemory("STJ",.F.)

		dbSelectArea("DA3")
		dbSetOrder(1)
		dbSeek(xFilial("DA3"),.T.)
		RegToMemory("DA3",.F.)

		dbSelectArea( 'TQB' )
		dbSetOrder( 1 )
		dbSeek( xFilial( 'TQB' ), .T. )
		RegToMemory( 'TQB', .F. )

	ElseIf nMod902 == 35

		dbSelectArea("SRJ")
		dbSetOrder(1)
		dbSeek(xFilial("SRJ"),.T.)
		RegToMemory("SRJ",.F.)

		dbSelectArea("TN5")
		dbSetOrder(1)
		dbSeek(xFilial("TN5"),.T.)
		RegToMemory("TN5",.F.)

		If lCodAmb
			dbSelectArea("TN0")
			dbSetOrder(1) //TN0_FILIAL+TN0_NUMRIS
			dbSeek(xFilial("TN0"),.T.)
			RegToMemory("TN0",.F.)
		EndIf

		If AliasInDic("TG1")
			dbSelectArea("TG1")
			dbSetOrder(1)
			dbSeek(xFilial("TG1"),.T.)
			RegToMemory("TG1",.F.)

			dbSelectArea("TG8")
			dbSetOrder(1)
			dbSeek(xFilial("TG8"),.T.)
			RegToMemory("TG8",.F.)
		EndIf

	ElseIf nMod902 == 56

		dbSelectArea( "TAX" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TAX" ), .T. )
		RegToMemory("TAX",.F.)

		dbSelectArea("TB0")
		dbSetOrder(1)
		dbSeek(xFilial("TB0"),.T.)
		RegToMemory("TB0",.F.)

		dbSelectArea("TA4")
		dbSetOrder(1)
		dbSeek(xFilial("TA4"),.T.)
		RegToMemory("TA4",.F.)

		dbSelectArea("TAB")
		dbSetOrder(1)
		dbSeek(xFilial("TAB"),.T.)
		RegToMemory("TAB",.F.)

		dbSelectArea("TBB")
		dbSetOrder(1)
		dbSeek(xFilial("TBB"),.T.)
		RegToMemory("TBB",.F.)

		dbSelectArea("TBV")
		dbSetOrder(1)
		dbSeek(xFilial("TBV"),.T.)
		RegToMemory("TBV",.F.)

		dbSelectArea("TDC")
		dbSetOrder(1)
		dbSeek(xFilial("TDC"),.T.)
		RegToMemory("TDC",.F.)

	EndIf

   	// Faz o relacionamento de Risco com Localização
	If lCheckRis
		MNT902RelRis()
	EndIf

	DEFINE MsDialog oDlg FROM nLinIniTla,nColIniTla TO nLinFimTla,nColFimTla TITLE Ccadastro PIXEL STYLE nOR(WS_VISIBLE,WS_POPUP)

		NGPOPUP(aSMenu,@oMnuTree)
		oDlg:lEscClose := .F.

		oArvSay:SetText(STR0149) //"Carregando Imagens"
		oArvMeter:Set(++nIncMeter)

	    // Painel principal do Dailog
		oPnlDlg          := TPanel():New(0,0,,oDlg,,,,,CLR_WHITE,12,12,.F.,.F.)
		oPnlDlg:Align    := CONTROL_ALIGN_ALLCLIENT

		oPnlBtn          := TPanel():New(00,00,,oPnlDlg,,,,,RGB(67,70,87),12,12,.F.,.F.)
		oPnlBtn:Align    := CONTROL_ALIGN_LEFT

		oPnlBtn1         := TPanel():New(00,00,,oPnlBtn,,,,,RGB(67,70,87),12,12,.F.,.F.)
		oPnlBtn1:Align   := CONTROL_ALIGN_TOP
		oPnlBtn1:nHeight := 50

		oPnlBtn2         := TPanel():New(00,00,,oPnlBtn,,,,,RGB(67,70,87),12,12,.F.,.F.)
		oPnlBtn2:Align   := CONTROL_ALIGN_ALLCLIENT

		oBtnVis  := TBtnBmp2():New( 00,00,27,25,"ng_ico_visual",,,,{|| MNT902VRun(),fMntRelac() },oPnlBtn2,STR0007, bOk, .T. ) //"Visualizar Item"
		oBtnVis:Align    := CONTROL_ALIGN_TOP

		If nMod902 == 19
			oBtnRel          := TBtnBmp2():New( 00,00,27,25,"ng_ico_relac",,,,{|| MNT902Rel()},oPnlBtn2,STR0008, bOk,.T. ) //"Visualizar Relacionamentos"
			oBtnRel:Align    := CONTROL_ALIGN_TOP
			oBtnRel:lVisible := .F.

			oBtnROS          := TBtnBmp2():New( 00,00,27,25,"ng_ico_retos",,,,{|| MNT902ROS()},oPnlBtn2,STR0009, bOk,.T. ) //"Retornar Ordem de Serviço"
			oBtnROS:Align    := CONTROL_ALIGN_TOP
			oBtnROS:lVisible := .F.
		EndIf

		oBtnIncId       := TBtnBmp2():New( 00,00,27,25,"ng_ico_incid",,,,{|| MNT902InId(3),fMntRelac(.T.)},oPnlBtn2,STR0010, bOk,.T. ) //"Incluir Identificação"
		oBtnIncId:Align := CONTROL_ALIGN_TOP
		If nMod902 == 19
			oBtnIncId:lVisible := .F.
		EndIf

		oBtnAltId  := TBtnBmp2():New( 00,00,27,25,"ng_ico_altid",,,,{|| MNT902InId(4),fMntRelac()},oPnlBtn2,STR0011, bOk,.T. ) //"Alterar Identificação"
		oBtnAltId:Align := CONTROL_ALIGN_TOP
		If nMod902 == 19
			oBtnAltId:lVisible := .F.
		EndIf

		oBtnExcId       := TBtnBmp2():New( 00,00,27,25,"ng_ico_excid",,,,{|| DeleteIdent("L")},oPnlBtn2,STR0012, bOk,.T. ) //"Excluir Identificação"
		oBtnExcId:Align := CONTROL_ALIGN_TOP
		If nMod902 == 19
			oBtnExcId:lVisible := .F.
		EndIf

		If nMod902 == 19
			oBtnIncBem          := TBtnBmp2():New( 00,00,27,25,cNgIcoIncB,,,,{|| MNT902InB(3)},oPnlBtn2,STR0107, bOk, .T. ) //"Incluir Bem"
			oBtnIncBem:Align    := CONTROL_ALIGN_TOP
			oBtnIncBem:lVisible := .F.

			oBtnImpBem          := TBtnBmp2():New( 00,00,27,25,"ng_ico_impbem",,,,{|| MNT902IMP()},oPnlBtn2,STR0219, bOk,.T. ) //"Importar Bens
			oBtnImpBem:Align    := CONTROL_ALIGN_TOP
			oBtnImpBem:lVisible := .F.

			oBtnExcBem          := TBtnBmp2():New( 00,00,27,25,cNgIcoExcB,,,,{|| DeleteIdent("B")},oPnlBtn2,STR0108, bOk,.T. ) //"Excluir Bem da Estrutura"
			oBtnExcBem:Align    := CONTROL_ALIGN_TOP
			oBtnExcBem:lVisible := .F.

			oBtnIncSS           := TBtnBmp2():New( 00,00,27,25,"ng_ico_incss",,,,{|| MNT902ISS(3)},oPnlBtn2,STR0109, bOk,.T. ) //"Incluir SS"
			oBtnIncSS:Align     := CONTROL_ALIGN_TOP
			oBtnIncSS:lVisible  := .F.

			oBtnAltSS           := TBtnBmp2():New( 00,00,27,25,"ng_ico_altss",,,,{|| MNT902ISS(4)},oPnlBtn2,STR0110, bOk,.T. ) //"Alterar SS"
			oBtnAltSS:Align     := CONTROL_ALIGN_TOP
			oBtnAltSS:lVisible  := .F.

			oBtnExcSS           := TBtnBmp2():New( 00,00,27,25,"ng_ico_excss",,,,{|| MNT902ISS(5)},oPnlBtn2,STR0111, bOk,.T. ) //"Excluir SS"
			oBtnExcSS:Align     := CONTROL_ALIGN_TOP
			oBtnExcSS:lVisible  := .F.

			oBtnDSS             := TBtnBmp2():New( 00,00,27,25,"ng_ico_dss",,,,{|| MNT902DSS(1)},oPnlBtn2,STR0112, bOk,.T. ) //"Distribuir SS"
			oBtnDSS:Align       := CONTROL_ALIGN_TOP
			oBtnDSS:lVisible    := .F.

			oBtnFinSS           := TBtnBmp2():New( 00,00,27,25,"ng_ico_finss",,,,{|| MNT902FSS()},oPnlBtn2,If(lFacilit,STR0192,STR0113), bOk,.T. ) //"Finalizar SS" # "Atender SS"
			oBtnFinSS:Align     := CONTROL_ALIGN_TOP
			oBtnFinSS:lVisible  := .F.

			oBtnGerOs           := TBtnBmp2():New( 00,00,27,25,"ng_ico_iosco",,,,{|| MNT902DSS(2)},oPnlBtn2,STR0114, bOk,.T. ) //"Gerar Ordem de Serviço"
			oBtnGerOs:Align     := CONTROL_ALIGN_TOP
			oBtnGerOs:lVisible  := .F.

			oBtnIOSCo           := TBtnBmp2():New( 00,00,27,25,"ng_ico_iosco",,,,{|| MNT902IOS(1)},oPnlBtn2,STR0013, bOk,.T. ) //"Incluir Ordem de Serviço Corretiva"
			oBtnIOSCo:Align     := CONTROL_ALIGN_TOP
			oBtnIOSCo:lVisible  := .F.

			oBtnIOSPr           := TBtnBmp2():New( 00,00,27,25,"ng_ico_iospr",,,,{|| MNT902IOS(2)},oPnlBtn2,STR0014, bOk,.T. ) //"Incluir Ordem de Serviço Preventiva"
			oBtnIOSPr:Align     := CONTROL_ALIGN_TOP
			oBtnIOSPr:lVisible  := .F.

			oBtnImpOs           := TBtnBmp2():New( 00,00,27,25,"ng_ico_imp",,,,{|| U_IMP675(STJ->TJ_ORDEM,STJ->TJ_PLANO,.F.,,STJ->(RECNO()))},oPnlBtn2,STR0159, bOk,.T. ) //"Imprimir O.S."
			oBtnImpOs:Align     := CONTROL_ALIGN_TOP
			oBtnImpOs:lVisible  := .F.


		ElseIf nMod902 == 35

			oBtnIncFu       := TBtnBmp2():New( 00,00,27,25,"ng_ico_incfun",,,,{|| MNT902OREL(3,"FUN")},oPnlBtn2,STR0194,,.T. )// "Incluir Função"
			oBtnIncFu:Align := CONTROL_ALIGN_TOP

			oBtnAltFu       := TBtnBmp2():New( 00,00,27,25,"ng_ico_altfun",,,,{|| MNT902OREL(4,"FUN")},oPnlBtn2,STR0193,,.T. )//"Alterar Função"
			oBtnAltFu:Align := CONTROL_ALIGN_TOP

			oBtnExcFu       := TBtnBmp2():New( 00,00,27,25,"ng_ico_excfun",,,,{|| If( MNT902VlRe(5,"FUN"),DeleteIdent("F"),) },oPnlBtn2,STR0195,,.T. )//"Excluir Função"
			oBtnExcFu:Align := CONTROL_ALIGN_TOP

			oBtnIncTa       := TBtnBmp2():New( 00,00,27,25,"ng_ico_inctar",,,,{|| MNT902OREL(3,"TAR") },oPnlBtn2,STR0196,,.T. )//"Incluir Tarefa"
			oBtnIncTa:Align := CONTROL_ALIGN_TOP

			oBtnAltTa       := TBtnBmp2():New( 00,00,27,25,"ng_ico_alttar",,,,{|| MNT902OREL(4,"TAR") },oPnlBtn2,STR0197,,.T. )//"Alterar Tarefa"
			oBtnAltTa:Align := CONTROL_ALIGN_TOP

			oBtnExcTa       := TBtnBmp2():New( 00,00,27,25,"ng_ico_exctar",,,,{|| If( MNT902VlRe(5,"TAR"),DeleteIdent("T"),)},oPnlBtn2,STR0198,,.T. )//"Excluir Tarefa"
			oBtnExcTa:Align := CONTROL_ALIGN_TOP

			If lCodAmb
				oBtnIncRi       := TBtnBmp2():New( 00,00,27,25,"ng_ico_incris",,,,{|| MNT902ORIS( 3 ) },oPnlBtn2,STR0223,,.T. )//"Incluir Risco"
				oBtnIncRi:Align := CONTROL_ALIGN_TOP

				oBtnAltRi       := TBtnBmp2():New( 00,00,27,25,"ng_ico_altris",,,,{|| MNT902ORIS( 4 ) },oPnlBtn2,STR0224,,.T. )//"Alterar Risco"
				oBtnAltRi:Align := CONTROL_ALIGN_TOP

				oBtnExcRi       := TBtnBmp2():New( 00,00,27,25,"ng_ico_excris",,,,{|| MNT902ORIS( 5 ) },oPnlBtn2,STR0225,,.T. )//"Excluir Risco"
				oBtnExcRi:Align := CONTROL_ALIGN_TOP

				oBtnRelRi       := TBtnBmp2():New( 00,00,27,25,"ng_ico_relris",,,,{|| fRelacRis( 4 ) },oPnlBtn2,STR0226,,.T. )//"Relac. Risco"
				oBtnRelRi:Align := CONTROL_ALIGN_TOP
			EndIf

			If lOHSAS
				oBtnIncPe       := TBtnBmp2():New( 00,00,27,25,"ng_ico_incper",,,,{|| MNT902PERI(3)},oPnlBtn2,STR0199,,.T. )//"Incluir Perigo"
				oBtnIncPe:Align := CONTROL_ALIGN_TOP

				oBtnAltPe       := TBtnBmp2():New( 00,00,27,25,"ng_ico_altper",,,,{|| MNT902PERI(4)},oPnlBtn2,STR0200,,.T. )//"Alterar Perigo"
				oBtnAltPe:Align := CONTROL_ALIGN_TOP

				oBtnExcPe       := TBtnBmp2():New( 00,00,27,25,"ng_ico_excper",,,,{|| fRemPer()},oPnlBtn2,STR0201,,.T. )//"Remover Perigo"
				oBtnExcPe:Align := CONTROL_ALIGN_TOP

				oBtnVerAn       := TBtnBmp2():New( 00,00,27,25,"ng_ico_visana",,,,{|| fAnalise(2) },oPnlBtn2,STR0203,,.T. )//"Visualizar Análise"
				oBtnVerAn:Align := CONTROL_ALIGN_TOP

				oBtnIncAn       := TBtnBmp2():New( 00,00,27,25,"ng_ico_incana",,,,{|| fAnalise(3) },oPnlBtn2,STR0204,,.T. )//"Incluir Análise"
				oBtnIncAn:Align := CONTROL_ALIGN_TOP

				oBtnAltAn       := TBtnBmp2():New( 00,00,27,25,"ng_ico_altana",,,,{|| fAnalise(4) },oPnlBtn2,STR0205,,.T. )//"Alterar Análise"
				oBtnAltAn:Align := CONTROL_ALIGN_TOP

				oBtnExcAn       := TBtnBmp2():New( 00,00,27,25,"ng_ico_excana",,,,{|| fAnalise(5) },oPnlBtn2,STR0206,,.T. )//"Excluir Análise"
				oBtnExcAn:Align := CONTROL_ALIGN_TOP
			EndIf

		ElseIf nMod902 == 56

			If lSitNiv
				oBtnAtvIna       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ATV_LOC_M",,,,{|| Sg100StAtv(),MNT902MoLg(oTree:GetCargo())},oPnlBtn2,STR0254,,.T. )//"Ativar/Inativar"
				oBtnAtvIna:Align := CONTROL_ALIGN_TOP
			EndIf

         	// Residuos
			oBtnRel          := TBtnBmp2():New( 00,00,27,25,"NG_ICO_RELAC",,,,{|| MNT902Rel()},oPnlBtn2,STR0008,,.T. ) //"Visualizar Relacionamentos"
			oBtnRel:Align    := CONTROL_ALIGN_TOP

			oBtnVisRes       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIS_RES_M",,,,{|| MNT902ORES(2)},oPnlBtn2,STR0261,,.T. )//"Visualizar Resíduo"
			oBtnVisRes:Align := CONTROL_ALIGN_TOP

			oBtnVinRes       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIN_RES_M",,,,{|| SgaVincTp(__cTpRes)},oPnlBtn2,STR0256,,.T. )//"Vincular Resíduo"
			oBtnVinRes:Align := CONTROL_ALIGN_TOP

			oBtnIncRe        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_INC_RES_M",,,,{|| MNT902ORES(3)},oPnlBtn2,STR0255,,.T. )//"Incluir Resíduo"
			oBtnIncRe:Align  := CONTROL_ALIGN_TOP

			oBtnAltRe        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ALT_RES_M",,,,{|| MNT902ORES(4)},oPnlBtn2,STR0262,,.T. )//"Alterar Resíduo"
			oBtnAltRe:Align  := CONTROL_ALIGN_TOP

			oBtnExcRe        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_RET_RES_M",,,,{|| DeleteIdent("1")},oPnlBtn2,STR0263,,.T. )//"Retirar Resíduo"
			oBtnExcRe:Align  := CONTROL_ALIGN_TOP

			oBtnViOco        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIS_ORE_M",,,,{|| SgaOprOcR(2)},oPnlBtn2,STR0265,,.T. )//"Visualizar Ocorrência"
			oBtnViOco:Align  := CONTROL_ALIGN_TOP

			oBtnIncOc        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_INC_ORE_M",,,,{|| SgaOprOcR(3)},oPnlBtn2,STR0264,,.T. )//"Incluir Ocorrência"
			oBtnIncOc:Align  := CONTROL_ALIGN_TOP

			oBtnInFMR        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_INC_FMR_M",,,,{|| SgaOprFMR(3)},oPnlBtn2,STR0310 ,,.T. )//"Incluir FMR"
			oBtnInFMR:Align  := CONTROL_ALIGN_TOP

			oBtnViFMR        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIS_FMR_M",,,,{|| SgaOprFMR(2)},oPnlBtn2,STR0311,,.T. )//"Visualizar FMR"
			oBtnViFMR:Align  := CONTROL_ALIGN_TOP

			oBtnAlFMR        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ALT_FMR_M",,,,{|| SgaOprFMR(4)},oPnlBtn2,STR0312,,.T. )//"Alterar FMR"
			oBtnAlFMR:Align  := CONTROL_ALIGN_TOP

			// Aspectos
			oBtnInAsp        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_INC_ASP_M",,,,{|| MNT902OASP(3)},oPnlBtn2,STR0257,,.T. )//"Incluir Aspecto"
			oBtnInAsp:Align  := CONTROL_ALIGN_TOP

			oBtnVinAsp       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIN_ASP_M",,,,{|| SgaVincTp(__cTpAsp)},oPnlBtn2,STR0258,,.T. )//"Vincular Aspecto"
			oBtnVinAsp:Align := CONTROL_ALIGN_TOP

			oBtnViAsp        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIS_ASP_M",,,,{||  MNT902OASP(2)},oPnlBtn2,STR0266,,.T. )//"Visualizar Aspecto"
			oBtnViAsp:Align  := CONTROL_ALIGN_TOP

			oBtnAlAsp        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ALT_ASP_M",,,,{|| MNT902OASP(4)},oPnlBtn2,STR0267,,.T. )//"Alterar Aspecto"
			oBtnAlAsp:Align  := CONTROL_ALIGN_TOP

			oBtnExAsp        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_RET_ASP_M",,,,{|| DeleteIdent("2")},oPnlBtn2,STR0268,,.T. )//"Retirar Aspecto"
			oBtnExAsp:Align  := CONTROL_ALIGN_TOP

			oBtnIncDes       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_INC_DES_M",,,,{|| SgaOprDes(3)},oPnlBtn2,STR0269,,.T. )//"Incluir Desempenho"
			oBtnIncDes:Align := CONTROL_ALIGN_TOP

			oBtnVisDes       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIS_DES_M",,,,{|| SgaOprDes(2)},oPnlBtn2,STR0272,,.T. )//"Visualizar Desempenho"
			oBtnVisDes:Align := CONTROL_ALIGN_TOP

			oBtnAltDes       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ALT_DES_M",,,,{|| SgaOprDes(4)},oPnlBtn2,STR0273,,.T. )//"Alterar Desempenho"
			oBtnAltDes:Align := CONTROL_ALIGN_TOP

			oBtnExcDes       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_EXC_DES_M",,,,{|| SgaOprDes(5)},oPnlBtn2,STR0274,,.T. )//"Excluir Desempenho"
			oBtnExcDes:Align := CONTROL_ALIGN_TOP

			oBtnApDes        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_APR_DES_M",,,,{|| AprovDes()},oPnlBtn2,STR0270,,.T. )//"Aprovar Desempenho"
			oBtnApDes:Align  := CONTROL_ALIGN_TOP

			oBtnCpAsp        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_COP_DES_M",,,,{|| CopiaDes()},oPnlBtn2,STR0271,,.T. )//"Copiar Desempenho"
			oBtnCpAsp:Align  := CONTROL_ALIGN_TOP

			// Plano Emergencial
			oBtnInPla         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_INC_PLE_M",,,,{|| MNT902OPLA(3)},oPnlBtn2,STR0259,,.T. )//"Incluir Plano Emergencial"
			oBtnInPla:Align   := CONTROL_ALIGN_TOP

			oBtnVinPla        := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIN_PLE_M",,,,{||SgaVincTp(__cTpPE)},oPnlBtn2,STR0260,,.T. )//"Vincular Plano Emergencial"
			oBtnVinPla:Align  := CONTROL_ALIGN_TOP

			oBtnViPla         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIS_PLE_M",,,,{|| MNT902OPLA(2)},oPnlBtn2,STR0275,,.T. )//"Visualizar Plano Emergencial"
			oBtnViPla:Align   := CONTROL_ALIGN_TOP

			oBtnAlPla         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ALT_PLE_M",,,,{|| MNT902OPLA(4)},oPnlBtn2,STR0276,,.T. )//"Alterar Plano Emergencial"
			oBtnAlPla:Align   := CONTROL_ALIGN_TOP

			oBtnExPla         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_RET_PLE_M",,,,{|| DeleteIdent("3")},oPnlBtn2,STR0277,,.T. )//"Retirar Plano Emergencial"
			oBtnExPla:Align   := CONTROL_ALIGN_TOP

			oBtnInOPE         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_INC_OPE_M",,,,{|| SgaOprOPE(3)},oPnlBtn2,STR0264,,.T. )//"Incluir Ocorrência"
			oBtnInOPE:Align   := CONTROL_ALIGN_TOP

			oBtnAlOPE         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ALT_OPE_M",,,,{|| SgaOprOPE(4)},oPnlBtn2,STR0280,,.T. )//"Alterar Ocorrência"
			oBtnAlOPE:Align   := CONTROL_ALIGN_TOP

			oBtnViOPE         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_VIS_OPE_M",,,,{|| SgaOprOPE(2)},oPnlBtn2,STR0265,,.T. )//"Visualizar Ocorrência"
			oBtnViOPE:Align   := CONTROL_ALIGN_TOP

			oBtnExOPE         := TBtnBmp2():New( 00,00,27,25,"NG_ICO_EXC_OPE_M",,,,{|| SgaOprOPE(5)},oPnlBtn2,STR0281,,.T. )//"Excluir Ocorrência"
			oBtnExOPE:Align   := CONTROL_ALIGN_TOP

			oBtnRespOco       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_RSP_OPE_M",,,,{|| RespOcoPla(4)},oPnlBtn2,STR0282,,.T. )//"Responder Ocorrência"
			oBtnRespOco:Align := CONTROL_ALIGN_TOP

			oBtnRetSimu       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_ROS_PLE_M",,,,{|| RetPlaSimu(3)},oPnlBtn2,STR0279,,.T. )//"Retorno das Ordens de Simulação"
			oBtnRetSimu:Align := CONTROL_ALIGN_TOP

			oBtnConSimu       := TBtnBmp2():New( 00,00,27,25,"NG_ICO_CFM_PLS_M",,,,{|| ConfPlaSim()},oPnlBtn2,STR0278,,.T. )//"Confirmação do Plano de Simulação"
			oBtnConSimu:Align := CONTROL_ALIGN_TOP

		EndIf

		oBtnLgdH       := TBtnBmp2():New( 00,00,27,25,"ng_ico_lgdh",,,,{|| MNT902CLgd(1)},oPnlBtn2,STR0115,bOk,.T. ) //"Habilitar Contagem na Legenda"
		oBtnLgdH:Align := CONTROL_ALIGN_TOP

		oBtnLgdd       := TBtnBmp2():New( 00,00,27,25,"ng_ico_lgdd",,,,{|| MNT902CLgd(2)},oPnlBtn2,STR0116,bOk,.T. ) //"Desabilitar Contagem na Legenda"
		oBtnLgdd:Align := CONTROL_ALIGN_TOP

		//Ponto de entrada para adicionar botões à esquerda
		If ExistBlock("MNTA902G")
			ExecBlock("MNTA902G",.F.,.F.,{oPnlBtn2})
		EndIf

		If nMV1 == 1
			oBtnLgdH:lVisible := .F.
			oBtnLgdD:lVisible := .T.
		Else
			oBtnLgdH:lVisible := .T.
			oBtnLgdD:lVisible := .F.
		EndIf

		If GetRemoteType() == 5
			oSplitter       := TPanel():New(0,0,,oPnlDlg,,,,,,1000,1000,.F.,.F.)
			oSplitter:Align := CONTROL_ALIGN_ALLCLIENT
		Else
	         //Usando o método create
			oSplitter       := tSplitter():New( 0,0,oPnlDlg,100,100,0 )
			oSplitter:Align := CONTROL_ALIGN_ALLCLIENT
		EndIf

		//Painel da Esquerda
		oPanelEsq       := TPanel():New(01,01,,oSplitter,,,,,,150,150,.F.,.F.)
		oPanelEsq:Align := CONTROL_ALIGN_LEFT
		//oPanelEsq:nWidth := 8

		//Painel de Pesquisa
		oPanelPesq         := TPanel():New(01,01,,oPanelEsq,,,,,RGB(67,70,87),10,10,.F.,.F.)
		oPanelPesq:Align   := CONTROL_ALIGN_TOP
		oPanelPesq:nHeight := 50

		@003,002 Say OemToAnsi(STR0152) Of oPanelPesq Color RGB(255,255,255) Pixel//"Localizar Por:"

		@012,002 ComboBox oCmbPesq Var cCmbPesq ITEMS aCmbPesq SIZE 45,08 OF oPanelPesq PIXEL

		@012,050 MsGet oGetPesq Var cVarPesq Size 60,09 Of oPanelPesq Pixel

		cCss := "QPushButton{ border-radius: 3px;border: 1px solid #000000; background-color: #F0F0F0;  }"

		oBtnOk := TButton():New(12,112,STR0155,oPanelPesq,{|| MNT902PESQ(,,cCmbPesq) },20,11,,,.F.,.T.,.F.,,.F.,,,.F. )//"OK"
		oBtnOk:SetCss(cCSS)

		//Painel da Arvore
		oPanel1        := TPanel():New(01,01,,oPanelEsq,,,,,,10,10,.F.,.F.)
		oPanel1:Align  := CONTROL_ALIGN_ALLCLIENT
		oPanel1:nWidth := 5

		oTree := dbTree():New(052, 005, 260, 180, oPanel1,,,.T.)
		oTree:SetCss("Q3ListView{ border: 2px solid #DFDFDF; }")

		oTree:Align      := CONTROL_ALIGN_ALLCLIENT
		oTree:nClrPane   := RGB(221,221,221)
		oTree:blDblClick := { || oTree:Hide(), MNT902VRun(), fMntRelac(), oTree:Show()}
		oTree:bChange    := { || oTree:Hide(), If(!IsInCallStack("DeleteIdent"), BloqTree() .And. MNT902VChg(), Nil), oTree:Show()}

		If PtGetTheme() = "MDI"
			//----------------------------------------------------------------------------------------------------------------------------
			// Caso a função MNT902Mnu esteja na pilha, não realiza operação de abrir o menu novamente, isso para que não ocorra de o sistema tentar abrir
			// dois menus popus ao mesmo tempo, enquanto um esta sendo criado, o usuário clica novamente e o sistema tente criar outro, com o tratamento
			// abaixo isso não deve acontecer prevenindo assim, de possível erro.
			//----------------------------------------------------------------------------------------------------------------------------
			oTree:bRClicked  := {|oObject,nX,nY| IIf(BloqTree() .And. fVerifFil(), If(!IsInCallStack("MNT902Mnu"),(MNT902Mnu(), oMnuTree:Activate( nX-oDlg:nLeft-45, nY-oDlg:nTop-oTree:nTop-175, oTree)), ), ) }
		Else
			oTree:bRClicked  := {|oObject,nX,nY| IIf(BloqTree() .And. fVerifFil(), If(!IsInCallStack("MNT902Mnu"),( MNT902Mnu() .And. lOk, oMnuTree:Activate( nX-oDlg:nLeft-30, nY-oDlg:nTop-oTree:nTop-080, oTree)), ), ) }
		EndIf


		oPanel2       := TPanel():New(01,01,,oSplitter,,,,,,1000,1000,.F.,.F.) //CLR_HBLUE
		oPanel2:Align := CONTROL_ALIGN_ALLCLIENT
		If GetRemoteType() == 5
			oSplitter2       := TPanel():New(0,0,,oPanel2,,,,,,1000,1000,.F.,.F.)
			oSplitter2:Align := CONTROL_ALIGN_ALLCLIENT
		Else
			oSplitter2       := tSplitter():New( 0,0,oPanel2,100,100,1 )
			oSplitter2:Align := CONTROL_ALIGN_ALLCLIENT
		EndIf

	      // Painel pai para o Painel de Indicadores (deve ser PRIVATE)
		If FindFunction("NGI8TNGPnl") .And. AliasInDic("TZD") .And. lPermInd
			oPnlIndic       := TPanel():New(01, 01, , oSplitter2, , , , CLR_BLACK, CLR_WHITE, 100, 100, .F., .F.)
			oPnlIndic:Align := CONTROL_ALIGN_ALLCLIENT
		EndIf

		oPanel23       := TPanel():New(01,01,,oSplitter2,,,,,RGB(67,70,87),10,700,.F.,.F.)
		oPanel23:Align := CONTROL_ALIGN_ALLCLIENT
		//oPanel23:nHeight := 700

		oPanel231         := TPanel():New(01,01,,oPanel23,,,,,RGB(67,70,87),10,10,.F.,.F.)
		oPanel231:Align   := CONTROL_ALIGN_TOP
		oPanel231:nHeight := 15

		@ 10,10 BTNBMP oBtnFechar Resource "ng_btnclose" Size 18,09 NoBorder Pixel Of oPanel231 Pixel Action (oPanel23:Hide(),oPanel23:Refresh())

		oBtnFechar:cToolTip := STR0153//"Fecha tela de pesquisa"
		oBtnFechar:Align    := CONTROL_ALIGN_RIGHT
		oPanel23:Hide()

		oListPesq       := TWBrowse():New(01,01,100,100,,{STR0154},{200}, oPanel23,,,,,{||},,,,,,,.F.,,.T.,,.F.,,.T.,.T.)//"Resultado Encontrados:"
		oListPesq:Align := CONTROL_ALIGN_ALLCLIENT
		bLinePesq       := {|| {aItensPesq[oListPesq:nAt,5]} }

		oListPesq:SetArray(aItensPesq)
		oListPesq:bLine      := bLinePesq
		oListPesq:blDblClick := {|| MNT902SEEK(aItensPesq[oListPesq:nAt,1],aItensPesq[oListPesq:nAt,3],aItensPesq[oListPesq:nAt,2],;
									IIf(Len(aItensPesq[oListPesq:nAt])>=7,aItensPesq[oListPesq:nAt,7],NIL ))}

		oPanel21       := TPanel():New(01,01,,oSplitter2,,,,,,10,10,.F.,.F.)
		oPanel21:Align := CONTROL_ALIGN_ALLCLIENT
		oPanel21:Hide()

		oPanel22       := TPanel():New(01,01,,oSplitter2,,,,,,10,10,.F.,.F.)
		oPanel22:Align := CONTROL_ALIGN_ALLCLIENT
		oPanel22:Hide()

		//Monta o Painel de Lista dos Relacionamentos
		oPanel24       := TPanel():New(01,01,,oSplitter2,,,,,RGB(67,70,87),10,700,.F.,.F.)
		oPanel24:Align := CONTROL_ALIGN_ALLCLIENT
		oPanel24:Hide()

		oPnlLat        := TPanel():New( , , , oPanel24 , , , , , RGB(67,70,87) , 12 , , , .F. , .F. )
		oPnlLat:Align  := CONTROL_ALIGN_LEFT

		oBtn2Vis       := TBtnBmp():NewBar("ng_ico_visual","ng_ico_visual",,,,{||fVisRelMDT()},,oPnlLat,,,STR0007,,,,,"") //"Visualizar Item"
		oBtn2Vis:Align := CONTROL_ALIGN_TOP

		oListRel := TWBrowse():New(01,01,100,100,,{STR0171,STR0069},{50,200}, oPanel24,,; //"Código"###"Descrição"
								   ,,,{||},,,,,,,.F.,,.T.,,.F.,,.T.,.T.)                  //"Resultado Encontrados:"

		oListRel:Align := CONTROL_ALIGN_ALLCLIENT

		bLineRel       := {|| {aItensRel[oListRel:nAt,1],aItensRel[oListRel:nAt,2]} }

		oListRel:SetArray(aItensRel)
		oListRel:bLine := bLineRel

		oPnlLgnd         := TPanel():New(00,00,,oPnlDlg,,,,,RGB(214,214,214),12,12,.F.,.F.)
		oPnlLgnd:Align   := CONTROL_ALIGN_BOTTOM
		oPnlLgnd:nHeight := 90

		If nMod902 == 56

			oPnlShowLg := TButton():New(002,002,"Inibir Legenda",oPnlDlg,{|x,y|oPnlShowLg:cTitle := If(!oPnlLgnd:lVisible,"Inibir Legenda"       ,;
										"Exibir Legenda"),If(oPnlLgnd:lVisible,(oPnlLgnd:Hide(),MNT902CLgd(2)),oPnlLgnd:Show()),oTree:SetFocus()},;
										5,7,,,.F.,.T.,.F.,,.F.,,,.F. )

			oPnlShowLg:Align  := CONTROL_ALIGN_BOTTOM
			oPnlShowLg:SetCSS("QPushButton{background-color: #F4F4F4; color: #BEBEBE; font-size: 9px; border: 1px solid #BEBEBE; } " +;
							  "QPushButton:Focus{background-color: #FFFAFA; } " +;
							  "QPushButton:Hover{background-color: #FFFAFA; color: #000000; border: 1px solid #BEBEBE; } ")

		EndIf

		oBmp := TBitmap():New(0,0,5000,60,"fnd_lgnd2",,.T.,oPnlLgnd,,,.F.,.T.,,,,,.T.,,)

		@ 002,010 Bitmap oLgnd1 Resource "Folder10" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.

		@ 005,025 Say OemToAnsi(STR0015)  Of oPnlLgnd Pixel //"Identificação"

		@ 005,060 Say oIdent Var "("+AllTrim(Str(nIdent))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont

		If nMod902 == 19

			@ 002,100 Bitmap oLgnd1 Resource "NGOSVERDE" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 005,115 Say OemToAnsi(STR0016) Of oPnlLgnd Pixel //"OS em Dia"

			@ 002,200 Bitmap oLgnd1 Resource "NGOSVERMELHO" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 005,215 Say OemToAnsi(STR0017)  Of oPnlLgnd Pixel //"OS em Atraso"

			@ 002,300 Bitmap oLgnd1 Resource "NGOSAMARELO" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 005,315 Say OemToAnsi(STR0018)  Of oPnlLgnd Pixel //"OS em Atraso com Motivo"

			@ 016,010 Bitmap oLgnd1 Resource cNgIcoBem Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 019,025 Say OemToAnsi(STR0117)  Of oPnlLgnd Pixel //"Bens"

			@ 016,100 Bitmap oLgnd1 Resource "NGSSVERDE" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 019,115 Say OemToAnsi(STR0118)  Of oPnlLgnd Pixel //"SS Distribuída"

			@ 016,200 Bitmap oLgnd1 Resource "NGSSVERMELHO" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 019,215 Say OemToAnsi(STR0119)  Of oPnlLgnd Pixel //"SS Aguard. Analise"

			@ 016,300 Bitmap oLgnd1 Resource "NGSSAMARELO" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 019,315 Say OemToAnsi(STR0120)  Of oPnlLgnd Pixel //"SS em Atraso com Motivo"

			@ 005,150 Say oVerde Var "("+AllTrim(Str(nVerde))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont
			@ 005,265 Say oVerm  Var "("+AllTrim(Str(nVerm))+")"  Size 30,17 Of oPnlLgnd Pixel Font oFont
			@ 005,383 Say oAmar  Var "("+AllTrim(Str(nAmar))+")"  Size 30,17 Of oPnlLgnd Pixel Font oFont

			@ 019,060 Say oBens Var "("+AllTrim(Str(nBens))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont
			@ 019,150 Say oSSD  Var "("+AllTrim(Str(nSSD))+")"  Size 30,17 Of oPnlLgnd Pixel Font oFont
			@ 019,265 Say oSSA  Var "("+AllTrim(Str(nSSA))+")"  Size 30,17 Of oPnlLgnd Pixel Font oFont
			@ 019,383 Say oSSM  Var "("+AllTrim(Str(nSSM))+")"  Size 30,17 Of oPnlLgnd Pixel Font oFont

			If lByOpt
				@ 035,010 Say oLastLoad Prompt OemToAnsi(STR0335 + DTOC(dDataBase)+" - "+Substr(Time(),1,5))  Of oPnlLgnd Pixel // "Legendas atualizadas em: "
			EndIf

			If nMV1 == 1
				oIdent:lVisible := .T.
				oVerde:lVisible := .T.
				oVerm:lVisible  := .T.
				oAmar:lVisible  := .T.
				oBens:lVisible  := .T.
				oSSD:lVisible   := .T.
				oSSA:lVisible   := .T.
				oSSM:lVisible   := .T.
			Else
				oIdent:lVisible := .F.
				oVerde:lVisible := .F.
				oVerm:lVisible  := .F.
				oAmar:lVisible  := .F.
				oBens:lVisible  := .F.
				oSSD:lVisible   := .F.
				oSSA:lVisible   := .F.
				oSSM:lVisible   := .F.
			EndIf

		ElseIf nMod902 == 35

			@ 002,100 Bitmap oLgnd1 Resource "Folder14" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 005,115 Say OemToAnsi(STR0166) Of oPnlLgnd Pixel //"Função"
			@ 005,150 Say oFunc Var "("+AllTrim(Str(nFunc))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			@ 002,200 Bitmap oLgnd1 Resource "Folder12" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ 005,215 Say OemToAnsi(STR0167)  Of oPnlLgnd Pixel //"Tarefa"
			@ 005,250 Say oTare Var "("+AllTrim(Str(nTare))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			If lCodAmb
				@ 002,300 Bitmap oLgnd1 Resource "ng_ico_risco" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
				@ 005,315 Say OemToAnsi(STR0222)  Of oPnlLgnd Pixel //"Risco"
				@ 005,350 Say oRisc Var "("+AllTrim(Str(nRisc))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont
			EndIf

			If lOHSAS
				@ 016,010 Bitmap oLgnd1 Resource "ng_ico_perigo" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
				@ 019,025 Say OemToAnsi(STR0168)  Of oPnlLgnd Pixel //"Perigo"
				@ 019,060 Say oPeri Var "("+AllTrim(Str(nPeri))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont

				@ 016,100 Bitmap oLgnd1 Resource "ng_ico_dano" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
				@ 019,115 Say OemToAnsi(STR0172)  Of oPnlLgnd Pixel //"Dano"
				@ 019,150 Say oDano Var "("+AllTrim(Str(nDano))+")" Size 30,17 Of oPnlLgnd Pixel Font oFont
			EndIf

			If nMV1 == 1
				oFunc:lVisible := .T.
				oTare:lVisible := .T.

				If lCodAmb
					oRisc:lVisible := .T.
				EndIf

				If lOHSAS
					oPeri:lVisible := .T.
					oDano:lVisible := .T.
				EndIf
			Else
				oFunc:lVisible := .F.
				oTare:lVisible := .F.

				If lCodAmb
					oRisc:lVisible := .F.
				EndIf

				If lOHSAS
					oPeri:lVisible := .F.
					oDano:lVisible := .F.
				EndIf
			EndIf

		ElseIf nMod902 == 56

			nLinLg := 002
			nColLg := 100

	         // Legenda Aspectos
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_ASPECTO" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0295 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgAsp Var "(" + AllTrim( Str( nLgAsp ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 100

	         // Legenda Desempenhos Ambientais
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_DESEMPENHO" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0296 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgDes Var "(" + AllTrim( Str( nLgDes ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 100

	         // Legenda Planos
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_PLANO_EMERG" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0297 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgPla Var "(" + AllTrim( Str( nLgPla ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 100

	         // Legenda Ocorrencias de Planos
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_OCO_PLE" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0298 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgOPE Var "(" + AllTrim( Str( nLgOPE ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nLinLg += 14
			nColLg := 010

	         // Botao Legenda Residuos
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_RESIDUO" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0293 ) Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgRes Var "(" + AllTrim( Str( nLgRes ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 090

	         // Legenda Ocorrencias de Residuos
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_OCO_RES" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0294 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgOcR Var "(" + AllTrim( Str( nLgOcR ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 100

	         // Legenda FMR
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_FMRPC" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0305 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgFMRPC Var "(" + AllTrim( Str( nLgFMRPC ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 100

	         // Legenda FMR
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_FMRAP" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0306 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgFMRAP Var "(" + AllTrim( Str( nLgFMRAP ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 100

	         // Legenda FMR
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_FMRAR" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0307 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgFMRAR Var "(" + AllTrim( Str( nLgFMRAR ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nLinLg += 14
			nColLg := 10

	         // Legenda FMR
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_FMRNC" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0308 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgFMRNC Var "(" + AllTrim( Str( nLgFMRNC ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

			nColLg += 090

	         // Legenda FMR
			@ nLinLg,nColLg Bitmap oLgnd1 Resource "NG_ICO_FMRRB" Size 25,25 Pixel Of oPnlLgnd Noborder When .F.
			@ nLinLg+3,nColLg+15 Say OemToAnsi( STR0309 )  Of oPnlLgnd Pixel
			@ nLinLg+1,nColLg+52 Say oLgFMRRB Var "(" + AllTrim( Str( nLgFMRRB ) ) + ")" Size 30,17 Of oPnlLgnd Pixel Font oFont

	         // Habilita/ Desabilita processamento da legenda
			If nMV1 == 1
				oLgRes:lVisible   := .T.
				oLgOcR:lVisible   := .T.
				oLgAsp:lVisible   := .T.
				oLgDes:lVisible   := .T.
				oLgPla:lVisible   := .T.
				oLgOPE:lVisible   := .T.
				oLgFMRPC:lVisible := .T.
				oLgFMRAP:lVisible := .T.
				oLgFMRAR:lVisible := .T.
				oLgFMRNC:lVisible := .T.
				oLgFMRRB:lVisible := .T.
			Else
				oLgRes:lVisible   := .F.
				oLgOcR:lVisible   := .F.
				oLgAsp:lVisible   := .F.
				oLgDes:lVisible   := .F.
				oLgPla:lVisible   := .F.
				oLgOPE:lVisible   := .F.
				oLgFMRPC:lVisible := .F.
				oLgFMRAP:lVisible := .F.
				oLgFMRAR:lVisible := .F.
				oLgFMRNC:lVisible := .F.
				oLgFMRRB:lVisible := .F.
			EndIf

		EndIf

		If nMV1 == 1
			oIdent:lVisible := .T.
		Else
			oIdent:lVisible := .F.
		EndIf

		oTree:Reset()

		oArvSay:SetText(STR0150) //"Carregando Estrutura"
		oArvMeter:Set(++nIncMeter)

		aFilial := RetFiliais()

		For nX := 1 To Len(aFilial)
			cFilAnt := aFilial[nX]
			MNT902Tree("001",IIf(nMod902 == 35 ,5, IIf( nMod902 == 56 , 3 , 4 ) ) )
		Next nX

		cFilAnt := cFilOld
		oTree:TreeSeek("001LOC"+cFilAnt)
		oTree:SetFocus()

		oArvSay:SetText(STR0151) //"Carregando Legenda"
		oArvMeter:Set(++nIncMeter)
		MNT902MoLg(oTree:GetCargo())

		oBmpArv:Hide()

	Activate MSDIALOG oDlg ON INIT (EnchoiceBar(oDlg,{||nOpca := 1,oDlg:End()},{||oDlg:End()},,aButton), fIndCreate())

	If nOpca == 1
		Processa({|| MNT902Grava()},STR0019,STR0144,.F.) //"Salvando Alterações..."
	EndIf

	For nX := 1 To Len(aTblTemp)
		aTblTemp[nX][2]:Delete()
	Next nX

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902Tree³ Autor ³ Rafael Diogo Richter  ³ Data ³14/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Monta a estrutura a partir do arquivo TAF                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902Tree(cPai,nMod)

	Local cFolderA   := "FOLDER10" // Folder Verde Fechado
	Local cFolderB   := "FOLDER11" // Folder Verde Aberto
	Local cPredio    := "predio"
	Local cDesPro    := ""
	Local nRegistros := 0
	Local nRec       := 0
	Local nArea      := 0
	Local nNivExt    := 0
	Local nCor       := 0
	Local lDepto     := NGCADICBASE("TAF_DEPTO","A","TAF",.F.)
	Local aFolder    := {}
	Local aAreas     := {}
	Local bVrfMod    := {|| .T. }

	Private cCargo   := "LOC"

	dbSelectArea("TAF")
	dbSetOrder(2)
	If dbSeek(xFilial("TAF")+cCodEst+cPai)

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If !dbSeek(cCodEst+cPai+cFilAnt)
			RecLock((cTRBSGA),.T.)
			(cTRBSGA)->FILIAL  := cFilAnt
			(cTRBSGA)->CODEST  := cCodEst
			(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
			(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV     //cDesc
			(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP     //cNivSup
			(cTRBSGA)->RESPONS := TAF->TAF_MAT        //cMat
			(cTRBSGA)->TIPO    := TAF->TAF_INDCON     //cIndCon
			(cTRBSGA)->CODTIPO := TAF->TAF_CODCON     //cCodCon
			(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL     //cFilDoc
			(cTRBSGA)->CC      := TAF->TAF_CCUSTO     //cCC
			If lDepto
				(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO		//cDepto
			EndIf
			(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA     //cCT
			(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA     //cModSga
			(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT     //cModMnt
			(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT     //cModMdt
			(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM      //cOrdem
			(cTRBSGA)->NIVEL   := 1
			(cTRBSGA)->CARGO   := cCargo

			If lRetS
				(cTRBSGA)->ETAPA  := TAF->TAF_ETAPA
			EndIf

			If lRateio
				(cTRBSGA)->RATEIO := If(Empty(TAF->TAF_RATEIO),"2",TAF->TAF_RATEIO)
			EndIf

			If lFamilia
				(cTRBSGA)->CODFAM := TAF->TAF_CODFAM
			EndIf

			If lCodAmb
				(cTRBSGA)->CODAMB := TAF->TAF_CODAMB
			EndIf

			If lSitNiv
				(cTRBSGA)->SITNIV := TAF->TAF_SITNIV
				(cTRBSGA)->ATFIL  := "0"
			EndIf

			(cTRBSGA)->(MsUnlock())
		EndIf
	Else
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek(cCodEst+cPai+cFilAnt)
	EndIf

   	// Adiciona primeiro nivel
	DbAddTree oTree Prompt (cTRBSGA)->DESCRI Opened Resource cPredio,cPredio Cargo cPai+cCargo+cFilAnt

	cPai  := "001"
	cPaiMnt  := "001"
	cPaiMdt  := "001"

	If nMod == 4
		bVrfMod := {|| !Empty(TAF->TAF_MODMNT) }
	ElseIf nMod == 5
		bVrfMod := {|| !Empty(TAF->TAF_MODMDT) }
	ElseIf nMod == 3
		bVrfMod := {|| !Empty(TAF->TAF_MODSGA) }
	EndIf

	dbSelectArea("TAF")
	dbSetOrder(1)
	dbSeek(xFilial("TAF")+cCodEst+cPai)
	While !TAF->(EoF()) .And. TAF->TAF_FILIAL == xFilial("TAF") .And. TAF->TAF_CODEST == cCodEst .And. TAF->TAF_NIVSUP == cPai

		IncProc() // Incrementa regua de processamento

		If !Eval(bVrfMod) // Verifica marcacao do modulo na tabela
			TAF->(dbSkip())
			Loop
		EndIf

		If !NGValidTUA()
			TAF->(dbSkip())
			Loop
		EndIf

		If TAF->TAF_INDCON == '0'
			TAF->(dbSkip())
			Loop
		ElseIf TAF->TAF_INDCON == '2'
			cCargo   := 'LOC'
			If lSitNiv .And. TAF->TAF_SITNIV == '2'
				cFolderA := "CADEADO"
				cFolderB := "CADEADO"
			Else
				cFolderA := "FOLDER10"
				cFolderB := "FOLDER11"
			EndIf

		ElseIf nMod <> 3

			If TAF->TAF_INDCON == '1'
				dbSelectArea("ST9")
				dbSetOrder(1)
				If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
					If ST9->T9_SITBEM <> "A"
						TAF->(dbSkip())
						Loop
					EndIf
				Else
					TAF->(dbSkip())
					Loop
				EndIf
				cCargo   := 'BEM'
				cFolderA := cNgIcoBem
				cFolderB := cNgpstBem
			ElseIf TAF->TAF_INDCON == '3'
				cCargo   := "FUN"
				cFolderA := "FOLDER14"
				cFolderB := "FOLDER15"
			ElseIf TAF->TAF_INDCON == '4'
				cCargo   := "TAR"
				cFolderA := "FOLDER12"
				cFolderB := "FOLDER13"
			ElseIf TAF->TAF_INDCON == _nPosRisco
				cCargo   := "RIS"
				cFolderA := "ng_ico_risco"
				cFolderB := "ng_ico_risco"
			EndIf

		Else
			TAF->(dbSkip())
			Loop
		EndIf

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		RecLock((cTRBSGA),.T.)
		(cTRBSGA)->FILIAL  := cFilAnt
		(cTRBSGA)->CODEST  := cCodEst
		(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
		(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV     //cDesc
		(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP     //cNivSup
		(cTRBSGA)->RESPONS := TAF->TAF_MAT        //cMat
		(cTRBSGA)->TIPO    := TAF->TAF_INDCON     //cIndCon
		(cTRBSGA)->CODTIPO := TAF->TAF_CODCON     //cCodCon
		(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL     //cFilDoc
		(cTRBSGA)->CC      := TAF->TAF_CCUSTO     //cCC
		If lDepto
			(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO  //cDepto
		EndIf
		(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA     //cCT
		(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA     //cModSga
		(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT     //cModMnt
		(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT     //cModMdt
		(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM      //cOrdem
		(cTRBSGA)->NIVEL   := 2
		(cTRBSGA)->CARGO   := cCargo
		If lRetS
			(cTRBSGA)->ETAPA   := TAF->TAF_ETAPA
		EndIf
		If lRateio
			(cTRBSGA)->RATEIO  := IIF(Empty(TAF->TAF_RATEIO),'2',TAF->TAF_RATEIO)
		EndIf
		If lFamilia
			(cTRBSGA)->CODFAM  := TAF->TAF_CODFAM
		EndIf
		If lCodAmb
			(cTRBSGA)->CODAMB  := TAF->TAF_CODAMB
		EndIf
		If lSitNiv
			(cTRBSGA)->SITNIV  := TAF->TAF_SITNIV
			(cTRBSGA)->ATFIL   := "0"
		EndIf
		If !Empty(aUserTAF)
			RecUserFld(aUserTAF, "TAF", "(cTRBSGA)")
		EndIf

		(cTRBSGA)->(MsUnLock())

		TAF->(dbSkip())
	End

	cAliasQry := GetNextAlias()
	cQuery    := " SELECT COUNT(TAF.TAF_FILIAL) AS nCount FROM " + RetSqlName("TAF") + " TAF "
	cQuery    += " WHERE TAF.TAF_FILIAL = '" + xFilial("TAF") + "' AND TAF.TAF_NIVSUP = '001' AND TAF.D_E_L_E_T_ <> '*'"
	cQuery    := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

	dbSelectArea(cAliasQry)
	dbGoTop()
	If !EoF()
		ProcRegua((cAliasQry)->nCount)
	EndIf
	(cAliasQry)->(dbCloseArea())

	aAreaTRB  := ( cTRBSGA )->( GetArea() )
	cTreeSeek := oTree:GetCargo()
	nNivel    := 2
	nMaxNivel := 2

	If nMod == 4
		bVrfMod := {|| !Empty((cTRBSGA)->MODMNT) }
	ElseIf nMod == 5
		bVrfMod := {|| !Empty((cTRBSGA)->MODMDT) }
	ElseIf nMod == 3
		bVrfMod := {|| !Empty((cTRBSGA)->MODSGA) }
	EndIf

	dbSelectArea( cTRBSGA )
	dbSetOrder( 9 )
	While nNivel <= nMaxNivel

		dbSeek( cCodEst + Str( nNivel, 2, 0 ) + cFilAnt )
		While (cTRBSGA)->( !EoF() ) .And. nNivel == (cTRBSGA)->NIVEL .And. cFilAnt == (cTRBSGA)->FILIAL

			IncProc() // Incrementa regua de processamento

			If (cTRBSGA)->FILIAL != cFilAnt
				dbSkip()
				Loop
			EndIf

			cFilho := (cTRBSGA)->CODPRO

			If (cTRBSGA)->TIPO == '2'
				cCargo := 'LOC'
				If lSitNiv .And. (cTRBSGA)->SITNIV == '2'
					cFolderA := "CADEADO"
					cFolderB := "CADEADO"
				Else
					If !lByOpt
						aFolder  := MNTCHKCLR( TAF->TAF_CODNIV, '2' )
						cFolderA := aFolder[1]
						cFolderB := aFolder[2]
					EndIf
				EndIf

			ElseIf nMod <> 3

				If (cTRBSGA)->TIPO == '1'
					cCargo   := 'BEM'
					If !lByOpt
						aFolder  := MNTCHKCLR( TAF->TAF_CODCON, '1',, TAF->TAF_CODNIV )
						cFolderA := aFolder[1]
						cFolderB := aFolder[2]
					EndIf

					If nMod <> 4
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf
				ElseIf (cTRBSGA)->TIPO == '3'
					cCargo := 'FUN'
					cFolderA := 'FOLDER14'
					cFolderB := 'FOLDER15'
					If nMod <> 5
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf
				ElseIf (cTRBSGA)->TIPO == '6'
					cCargo   := 'OS'
					aAreaSTJ := STJ->(GetArea())
					dbSelectArea("STJ")
					dbSetOrder(1)
					dbSeek(xFilial("STJ")+(cTRBSGA)->CODTIPO)
					cFolderA := fRetImgOS()[1]
					cFolderB := cFolderA
					RestArea(aAreaSTJ)
					If nMod <> 4
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf
				ElseIf (cTRBSGA)->TIPO == '4'
					cCargo := 'TAR'
					cFolderA := 'FOLDER12'
					cFolderB := 'FOLDER13'
					If nMod <> 5
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf
				ElseIf (cTRBSGA)->TIPO == _nPosRisco
					cCargo := 'RIS'
					cFolderA := 'ng_ico_risco'//'FOLDER16'
					cFolderB := 'ng_ico_risco'//'FOLDER17'
					If nMod <> 5
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf
				EndIf

			Else

				If (cTRBSGA)->TIPO == __cTpRes
					cCargo := 'RES'
					cFolderA := 'NG_ICO_RESIDUO'
					cFolderB := 'NG_ICO_RESIDUO'
				ElseIf (cTRBSGA)->TIPO == __cTpOcRes
					cCargo := 'OCR'
					cFolderA := "NG_ICO_OCO_RES"
					cFolderB := "NG_ICO_OCO_RES"
				ElseIf (cTRBSGA)->TIPO == __cTpAsp
					cCargo := 'ASP'
					cFolderA := 'NG_ICO_ASPECTO'
					cFolderB := 'NG_ICO_ASPECTO'
				ElseIf (cTRBSGA)->TIPO == __cTpDesem
					cCargo := 'DES'
					cFolderA := "NG_ICO_DESEMPENHO"
					cFolderB := "NG_ICO_DESEMPENHO"
				ElseIf (cTRBSGA)->TIPO == __cTpPE
					cCargo := 'PLE'
					cFolderA := "NG_ICO_PLANO_EMERG"
					cFolderB := "NG_ICO_PLANO_EMERG"
				ElseIf (cTRBSGA)->TIPO == __cTpOcPE
					cCargo := 'OPE'
					cFolderA := "NG_ICO_OCO_PLE"
					cFolderB := "NG_ICO_OCO_PLE"
				Else
					(cTRBSGA)->(dbSkip())
					Loop
				EndIf

			EndIf

			If !Eval(bVrfMod)
				(cTRBSGA)->(dbSkip())
				Loop
			EndIf

			nRecTRBSGA := (cTRBSGA)->(Recno())
			cCodSup    := (cTRBSGA)->NIVSUP
			cCodItem   := (cTRBSGA)->CODPRO
			cCargoP    := ""

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCodSup+cFilAnt)

			If (cTRBSGA)->TIPO == '2'
				cCargoP := 'LOC'

			ElseIf nMod <> 3

				If (cTRBSGA)->TIPO == '1'
					cCargoP := 'BEM'
				ElseIf (cTRBSGA)->TIPO == '3'
					cCargoP := 'FUN'
				ElseIf (cTRBSGA)->TIPO == '6'
					cCargoP := 'OS'
				ElseIf (cTRBSGA)->TIPO == '4'
					cCargoP := 'TAR'
				ElseIf (cTRBSGA)->TIPO == _nPosRisco
					cCargoP := 'RIS'
				EndIf

			Else

				If (cTRBSGA)->TIPO == __cTpRes
					cCargoP := 'RES'
				ElseIf (cTRBSGA)->TIPO == __cTpOcRes
					cCargoP := 'OCR'
				ElseIf (cTRBSGA)->TIPO == __cTpAsp
					cCargoP := 'ASP'
				ElseIf (cTRBSGA)->TIPO == __cTpDesem
					cCargoP := 'DES'
				ElseIf (cTRBSGA)->TIPO == __cTpPE
					cCargoP := 'PLE'
				ElseIf (cTRBSGA)->TIPO == __cTpOcPE
					cCargoP := 'OPE'
				EndIf

			EndIf

			oTree:TreeSeek((cTRBSGA)->CODPRO+cCargoP+cFilAnt)

			nPos := aScan(aItensCar, {|x| x == (cTRBSGA)->CODPRO+cCargoP+cFilAnt})
			If nPos == 0
				aAdd(aItensCar,(cTRBSGA)->CODPRO+cCargoP+cFilAnt)
			EndIf

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCodItem+cFilAnt)


			If lByOpt
				aDados  := fRunSPClr(cCodItem,cCargo,"001")
				nVermB  := aDados[1]
				nAmarB  := aDados[2]
				nSSMB   := aDados[3]

				nCor := 1 //Verde
				If nVermB > 0
					nCor := 3 //Vermelho
				ElseIf nAmarB > 0 .Or. nSSMB > 0
					nCor := 2 //Amarelo
				EndIf

				aFolder  := fChangeClr(nCor,cCargo)
				cFolderA := aFolder[1]
				cFolderB := aFolder[2]
			Else
				If (cTRBSGA)->TIPO == '2'
					If lSitNiv .And. (cTRBSGA)->SITNIV == '2'
						cFolderA := "CADEADO"
						cFolderB := "CADEADO"
					Else
						aFolder  := MNTCHKCLR( (cTRBSGA)->CODPRO, '2' )
						cFolderA := aFolder[1]
						cFolderB := aFolder[2]
					EndIf

				ElseIf nMod <> 3

					If (cTRBSGA)->TIPO == '1'
						aFolder  := MNTCHKCLR( (cTRBSGA)->CODTIPO, '1',, TAF->TAF_CODNIV )
						cFolderA := aFolder[1]
						cFolderB := aFolder[2]
					EndIf
				EndIf
			EndIf

			oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)

			dbSelectArea('TAF')
			dbSetOrder(1)
			If dbSeek(xFilial('TAF')+cCodEst+cCodItem)
				While !TAF->(EoF()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And. TAF->TAF_CODEST == cCodEst .And.;
						TAF->TAF_NIVSUP == cCodItem

					oTree:TreeSeek((cTRBSGA)->CODPRO+cCargo+cFilAnt)

					If TAF->TAF_INDCON == '0'
						TAF->(dbSkip())
						Loop

					ElseIf TAF->TAF_INDCON == '2'
						cCargo   := 'LOC'
						If lSitNiv .And. TAF->TAF_SITNIV == '2'
							cFolderA := "CADEADO"
							cFolderB := "CADEADO"
						Else
							If !lByOpt
								aFolder  := MNTCHKCLR( TAF->TAF_CODNIV, '2' )
								cFolderA := aFolder[1]
								cFolderB := aFolder[2]
							EndIf
						EndIf

					ElseIf nMod <> 3

						If TAF->TAF_INDCON == '1'
							cCargo   := 'BEM'
							If !lByOpt
								aFolder  := MNTCHKCLR( TAF->TAF_CODCON, '1',, TAF->TAF_CODNIV )
								cFolderA := aFolder[1]
								cFolderB := aFolder[2]
							EndIf
							If nMod <> 4
								TAF->(dbSkip())
								Loop
							EndIf
						ElseIf TAF->TAF_INDCON == '3'
							cCargo   := 'FUN'
							cFolderA := 'FOLDER14'
							cFolderB := 'FOLDER15'
							If nMod <> 5
								TAF->(dbSkip())
								Loop
							EndIf
						ElseIf TAF->TAF_INDCON == '4'
							cCargo   := 'TAR'
							cFolderA := 'FOLDER12'
							cFolderB := 'FOLDER13'
							If nMod <> 5
								TAF->(dbSkip())
								Loop
							EndIf
						ElseIf TAF->TAF_INDCON == _nPosRisco
							cCargo   := 'RIS'
							cFolderA := 'ng_ico_risco'
							cFolderB := 'ng_ico_risco'
							If nMod <> 5
								TAF->(dbSkip())
								Loop
							EndIf
						EndIf
					Else
						TAF->(dbSkip())
						Loop
					EndIf

					If TAF->TAF_INDCON == '1'
						dbSelectArea("ST9")
						dbSetOrder(1)
						If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
							If ST9->T9_SITBEM <> "A"
								TAF->(dbSkip())
								Loop
							EndIf
						Else
							TAF->(dbSkip())
							Loop
						EndIf
					EndIf

					If !NGValidTUA()
						TAF->(dbSkip())
						Loop
					EndIf

					nRec := (cTRBSGA)->(RECNO())
					dbSelectArea(cTRBSGA)
					dbSetOrder(2)
					If !dbSeek(cCodEst+TAF->TAF_CODNIV+cFilAnt)
						RecLock((cTRBSGA),.T.)
						(cTRBSGA)->FILIAL  := cFilAnt
						(cTRBSGA)->CODEST  := cCodEst
						(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
						(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV     //cDesc
						(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP     //cNivSup
						(cTRBSGA)->RESPONS := TAF->TAF_MAT        //cMat
						(cTRBSGA)->TIPO    := TAF->TAF_INDCON     //cIndCon
						(cTRBSGA)->CODTIPO := TAF->TAF_CODCON     //cCodCon
						(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL     //cFilDoc
						(cTRBSGA)->CC      := TAF->TAF_CCUSTO     //cCC
						If lDepto
							(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO		//cDepto
						EndIf
						(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA     //cCT
						(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA     //cModSga
						(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT     //cModMnt
						(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT     //cModMdt
						(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM      //cOrdem
						(cTRBSGA)->CARGO   := cCargo
						If lRetS
							(cTRBSGA)->ETAPA   := TAF->TAF_ETAPA
						EndIf
						If lRateio
							(cTRBSGA)->RATEIO  := TAF->TAF_RATEIO
						EndIf
						If lFamilia
							(cTRBSGA)->CODFAM  := TAF->TAF_CODFAM
						EndIf
						If lCodAmb
							(cTRBSGA)->CODAMB  := TAF->TAF_CODAMB
						EndIf
						If lSitNiv
							(cTRBSGA)->SITNIV  := TAF->TAF_SITNIV
							(cTRBSGA)->ATFIL  := "0"
						EndIf
						(cTRBSGA)->NIVEL   := nNivel+1
						If !Empty(aUserTAF)
							RecUserFld(aUserTAF, "TAF", "(cTRBSGA)")
						EndIf
						(cTRBSGA)->(MsUnLock())
						(cTRBSGA)->(dbGoTo(nRec))

						If lByOpt
							aDados  := fRunSPClr(TAF->TAF_CODNIV,cCargo,TAF->TAF_NIVSUP)
							nVermB  := aDados[1]
							nAmarB  := aDados[2]
							nSSMB   := aDados[3]

							nCor := 1 //Verde
							If nVermB > 0
								nCor := 3 //Vermelho
							ElseIf nAmarB > 0 .Or. nSSMB > 0
								nCor := 2 //Amarelo
							EndIf

							aFolder  := fChangeClr(nCor,cCargo)
							cFolderA := aFolder[1]
							cFolderB := aFolder[2]
						EndIf

						oTree:AddItem(TAF->TAF_NOMNIV,TAF->TAF_CODNIV+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)

					EndIf
					Exit
				End
			Else
				If (cTRBSGA)->TIPO == '1'
					MNTA902OS("B")
				ElseIf (cTRBSGA)->TIPO == '2'
					MNTA902OS("L")
				ElseIf (cTRBSGA)->TIPO == '3'
					MNTA902OS("F")
				ElseIf  (cTRBSGA)->TIPO == '4'
					MNTA902OS("T")
				EndIf
			EndIf

			dbSelectArea(cTRBSGA)
			dbSetOrder( 9 )
			(cTRBSGA)->(dbGoTo(nRecTRBSGA))
			(cTRBSGA)->(dbSkip())
		End

		nNivel++

	End

	RestArea( aAreaTRB )
	oTree:TreeSeek(cTreeSeek)

	If lOHSAS .And. nModulo == 35
		cNivSup  := "001"
      //Carrega os perigos, danos e análises
		aAreaTG9 := TG9->(GetArea())
		dbSelectArea("TG9")
		dbSetOrder(2)
		dbSeek(xFilial("TG9")+cCodEst+cNivSup)
		While !EoF() .And. TG9->TG9_FILIAL == xFilial("TG9") .And. TG9->TG9_CODEST == cCodEst .And. TG9->TG9_CODNIV == cNivSup

			nRec := (cTRBSGA)->(Recno())
			dbSelectArea(cTRBSGA)
			dbSetOrder(7)
			If dbSeek(_nPosPerigo+Padr( TG9->TG9_CODPER , Len( (cTRBSGA)->CODTIPO ) )+cCodEst+"000")
				(cTRBSGA)->(dbGoto(nRec))
				dbSelectArea("TG9")
				dbSetOrder(2)
				dbSkip()
				Loop
			EndIf
			(cTRBSGA)->(dbGoto(nRec))

			If !NGValidTUA("TG9",,cNivSup)
				dbSelectArea("TG9")
				dbSetOrder(2)
				dbSkip()
				Loop
			EndIf

			IncProc() // Incrementa regua de processamento

			fIncPer( TG9->TG9_CODPER , "001" , "LOC" , .F. , TAF->TAF_MAT )

			dbSelectArea("TG9")
			dbSetOrder(2)
			dbSkip()
		End
		RestArea(aAreaTG9)

	ElseIf nModulo == 56

		cNivSup := "001"
		nNivExt := nNivel
		nNivel  := 1

      	//Carrega Definições de Resíduo e Ocorrências e Aspectos
		aAreas := {GetArea()            ,;
				   TAV->(GetArea())     ,;
				   TAG->(GetArea())    ,;
				   TBC->(GetArea())     ,;
				   (cTRBSGA)->(GetArea());
				  }

      	// Residuos
		dbSelectArea("TAV")
		dbSetOrder(2)
		dbSeek(xFilial("TAV") + cCodEst + cNivSup)

		While !EoF() .And. TAV->TAV_FILIAL == xFilial("TAV") .And. TAV->TAV_CODEST == cCodEst .And. TAV->TAV_CODNIV == cNivSup

			SgaIncRes( TAV->TAV_CODRES , cNivSup , "LOC" , TAF->TAF_MAT , 2 )

			dbSelectArea("TAV")
			dbSetOrder(2)
			dbSkip()

		End

      	// Aspectos
		nNivel  := 1
		dbSelectArea("TAG")
		dbSetOrder(2)
		dbSeek(xFilial("TAG") + cCodEst + cNivSup)

		While !EoF() .And. TAG->TAG_FILIAL == xFilial("TAG") .And. TAG->TAG_CODEST == cCodEst .And. TAG->TAG_CODNIV == cNivSup

			SgaIncAsp(TAG->TAG_CODASP,cNivSup,"LOC",TAF->TAF_MAT,2)

			dbSelectArea("TAG")
			dbSetOrder(2)
			dbSkip()

		End

      	// Planos Emergenciais
		nNivel  := 1
		dbSelectArea("TBC")
		dbSetOrder(2)
		dbSeek(xFilial("TBC") + cCodEst + cNivSup)

		While !EoF() .And. TBC->TBC_FILIAL == xFilial("TBC") .And. TBC->TBC_CODEST == cCodEst .And. TBC->TBC_CODNIV == cNivSup

			SgaIncPE(TBC->TBC_CODPLA,cNivSup,"LOC",TAF->TAF_MAT,2)

			dbSelectArea("TBC")
			dbSetOrder(2)
			dbSkip()

		End

      	//Restaura a area das tabelas de ocorrência, residuos do processo e ocorrências do processo
		For nArea := Len(aAreas) To 1 Step -1
			RestArea(aAreas[nArea])
		Next nArea

		nNivel := Max(nNivExt, nNivel)

	EndIf

	nMaxNvl := nNivel

	DbEndTree oTree

	dbSelectArea(cTRBSGA)
	dbSetOrder( 9 )
	If (cTRBSGA)->(RecCount()) > 0
		While nMaxNvl >= 2
            dbSeek( '001' + Str( nMaxNvl, 2, 0 ) + cFilAnt )
			While (cTRBSGA)->NIVEL == nMaxNvl .And. (cTRBSGA)->FILIAL == cFilAnt

				If (cTRBSGA)->TIPO == '2'
					cCargo := 'LOC'

				ElseIF nMod902 <> 56

					If (cTRBSGA)->TIPO == '1'
						cCargo   := 'BEM'
					ElseIf (cTRBSGA)->TIPO == '3'
						cCargo := 'FUN'
					ElseIf (cTRBSGA)->TIPO == '4'
						cCargo := 'TAR'
					ElseIf (cTRBSGA)->TIPO == _nPosRisco
						cCargo := 'RIS'
					EndIf

				Else

					If (cTRBSGA)->TIPO == __cTpRes
						cCargo := 'RES'
					ElseIf (cTRBSGA)->TIPO == __cTpOcRes
						cCargo := "ORS"
					ElseIf (cTRBSGA)->TIPO == __cTpAsp
						cCargo := "ASP"
					ElseIf (cTRBSGA)->TIPO == __cTpDesem
						cCargo := "DES"
					ElseIf (cTRBSGA)->TIPO == __cTpPE
						cCargo := "PLE"
					ElseIf (cTRBSGA)->TIPO == __cTpDesem
						cCargo := "OPE"
					Else
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf

				EndIf

				oTree:TreeSeek((cTRBSGA)->CODPRO+cCargo+cFilAnt)
				oTree:PtCollapse()
				(cTRBSGA)->(dbSkip())
			End
			nMaxNvl--
		End
	EndIf

	oTree:TreeSeek("001LOC"+cFilAnt)
	oTree:PtCollapse()

	If ExistBlock("MNTA9022")
		ExecBlock("MNTA9022",.F.,.F.)
	EndIf

Return oTree

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Grava
Grava as alteracoes que houveram na Arvore Logica
@author Rafael Diogo Richter
@since 15/10/2008
@version undefined
@param lConfirm, logical
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Grava(lConfirm)

	Local lIncTAF   := .F. // DEFINE SE ESTÁ REALIZANDO A INCLUSÃO DE UM NOVO REGISTRO NA ÁRVORE(TAF).
	Local lAltTAF   := .F. // DEFINE SE ESTÁ ALTERANDO DE LOCAL UM ITEM JÁ EXISTENTE NA ÁRVORE(TAF).
	Local cCCusto, cCentra
	Local cPergSX1  := PADR( "MNTA902", 10 )
	Local aTrbArea
	Local nX,i
	Local aNewCod   := {}
	Local aNewSup   := {}
	Local aRetTC    := {}
	Local cCargoAtu := ""
	Local lDepto    := NGCADICBASE("TAF_DEPTO","A","TAF",.F.)
	Local nPos		:= 0
	Local cRecFilho	:= ""

	Default lConfirm := .T.

	If !lConfirm

		cCargoAtu   := oTree:GetCargo()
	EndIf

	For nX := 1 To Len(aFilial)
		cFilAnt := aFilial[nX]
		cLocal  := "ZZZ"

		dbSelectArea("TAF")
		dbSetOrder(2)
		If !dbSeek(xFilial("TAF"))
			cLocal := "000"
		Else
			cAliasQry := GetNextAlias()
			cQuery := " SELECT MAX(TAF.TAF_CODNIV) cCodMax FROM "+RetSqlName("TAF")+" TAF "
			cQuery += " WHERE TAF.TAF_FILIAL = '"+xFilial("TAF")+"' AND TAF.D_E_L_E_T_ <> '*'"
			cQuery := ChangeQuery(cQuery)
			dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

			dbSelectArea(cAliasQry)
			dbGoTop()
			If !EoF()
				cLocal := (cAliasQry)->cCodMax
			EndIf
			(cAliasQry)->(dbCloseArea())
		EndIf

		If Empty(cLocal)
			cLocal := "000"
		EndIf

		aRegExc := {}
		aRecNiv := {}
		aNewCod := {}
		aNewSup := {}
		cHora   := Substr(Time(),1,5)

		dbSelectArea(cTRBSGA)
		dbSetOrder( 9 ) // CODEST + NIVEL + FILIAL
		dbGoTop()
		ProcRegua(RecCount())
		While (cTRBSGA)->(!EoF())

			IncProc()

			If ((cTRBSGA)->TIPO <> "2" .And. (cTRBSGA)->TIPO <> "1" .And. (cTRBSGA)->TIPO <> "3" .And. (cTRBSGA)->TIPO <> "4" .And.;
					(cTRBSGA)->TIPO <> _nPosRisco)  .Or. (cTRBSGA)->FILIAL != cFilAnt
				dbSelectArea(cTRBSGA)
				dbSkip()
				Loop
			EndIf

			dbSelectArea('TAF')
			dbSetOrder(2)
			If dbSeek(xFilial('TAF')+ (cTRBSGA)->CODEST+ (cTRBSGA)->CODPRO)

				lIncTAF := .F.
				lAltTAF := IIf( TAF->TAF_INDCON == '1', MntUpdTAF( { TAF->TAF_CODEST, TAF->TAF_NIVSUP, TAF->TAF_FILIAL },;
				 { (cTRBSGA)->CODEST, (cTRBSGA)->NIVSUP, (cTRBSGA)->FILIAL }, cTRBSGA ), .F. )

				If !Empty( (cTRBSGA)->DELETADO )

               		// Exclui Bem/Localizacao na Restricao de Acesso
					NGDeleteTUB()

					RecLock('TAF',.F.)
					dbDelete()
					TAF->( MsUnLock() )

            		// Grava historico de movimentacao da Estrutura
					dbSelectArea("TCJ")
					dbSetOrder(1)
					If !dbSeek(xFilial("TCJ")+(cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+'E'+DTOS(dDataBase)+cHora)
						RecLock("TCJ",.T.)
						TCJ->TCJ_FILIAL := xFilial("TCJ")
						TCJ->TCJ_CODNIV := (cTRBSGA)->CODPRO
						TCJ->TCJ_DESNIV := (cTRBSGA)->DESCRI
						TCJ->TCJ_NIVSUP := (cTRBSGA)->NIVSUP
						TCJ->TCJ_DATA   := dDataBase
						TCJ->TCJ_HORA   := cHora
						TCJ->TCJ_TIPROC := "E" //Exclusao
						TCJ->TCJ_NIVEL := (cTRBSGA)->NIVEL
						TCJ->TCJ_MODSGA:= (cTRBSGA)->MODSGA
						TCJ->TCJ_MODMDT:= (cTRBSGA)->MODMDT
						TCJ->TCJ_MODMNT:= (cTRBSGA)->MODMNT
						TCJ->( MsUnLock() )
					EndIf

					fDeletaRel()
               		// Exclui risco relacionado
					If lCodAmb
						dbSelectArea("TN0")
						dbSetOrder(1) //TN0_FILIAL+TN0_NUMRIS
						If dbSeek(xFilial("TN0")+(cTRBSGA)->CODTIPO )
							// StaticCall( MDTA180 , Mdt180Grava , 5  )
							Mdt180Grava( 5 )
						EndIf
					EndIf

					If nMod902 == 56
						dbSelectArea("TAK")
						dbSetOrder(1)
						dbSeek(xFilial("TAK")+"001"+(cTRBSGA)->CODPRO+(cTRBSGA)->RESPONS)
						While !EOF() .And. xFilial("TAK") == cFilant .And. TAK->TAK_CODEST == cCodEst .And.;
								(cTRBTAK)->CODNIV == (cTRBSGA)->CODPRO .And. (cTRBTAK)->MAT == (cTRBSGA)->RESPONS
							If (cTRBTAK)->OPERAC <> "S"
								RecLock("TAK",.F.)
								dbDelete()
								TAK->( MsUnlock() )
							EndIf

							TAK->(dbSkip())
						End
					EndIf

					dbSelectArea(cTRBSGA)
					dbSkip()
					Loop
				EndIf

				RecLock('TAF',.F.)
				Replace TAF_CODNIV With (cTRBSGA)->CODPRO
				Replace TAF_ORDEM  With (cTRBSGA)->ORDEM
				TAF->( MsUnLock() )
			Else
				If !Empty( (cTRBSGA)->DELETADO )
					aAdd(aRegExc, (cTRBSGA)->CODPRO)
					dbSelectArea(cTRBSGA)
					dbSkip()
					Loop
				EndIf

         		// Grava Inclusao do Item na tabela de Historico de Movimentacao
				dbSelectArea("TCJ")
				dbSetOrder(1)
				If !dbSeek(xFilial("TCJ")+(cTRBSGA)->CODPRO+(cTRBSGA)->NIVSUP+'N'+DTOS(dDataBase)+cHora)
					RecLock("TCJ",.T.)
					TCJ->TCJ_FILIAL := xFilial("TCJ")
					TCJ->TCJ_CODNIV := (cTRBSGA)->CODPRO
					TCJ->TCJ_DESNIV := (cTRBSGA)->DESCRI
					TCJ->TCJ_NIVSUP := (cTRBSGA)->NIVSUP
					TCJ->TCJ_DATA   := dDataBase
					TCJ->TCJ_HORA   := cHora
					TCJ->TCJ_TIPROC := "N" //Inclusao
					TCJ->TCJ_NIVEL := (cTRBSGA)->NIVEL
					TCJ->TCJ_MODSGA:= (cTRBSGA)->MODSGA
					TCJ->TCJ_MODMDT:= (cTRBSGA)->MODMDT
					TCJ->TCJ_MODMNT:= (cTRBSGA)->MODMNT
					TCJ->( MsUnLock() )
				EndIf

				lIncTAF := .T.
				RecLock("TAF",.T.)

				If FindFunction("Soma1Old")
					cLocal := Soma1Old(AllTrim(cLocal))
				Else
					cLocal := Soma1(AllTrim(cLocal))
				EndIf

				aAdd(aNewCod,{(cTRBSGA)->(Recno()), cLocal})
				aAdd(aRecNiv,{(cTRBSGA)->CODPRO, cLocal})

				Replace TAF_CODNIV With cLocal
				Replace TAF_ORDEM  With cLocal
				Replace TAF_CCUSTO With (cTRBSGA)->CC
				Replace TAF_CENTRA With (cTRBSGA)->CENTRAB

				TAF->( MsUnlock() )
			EndIf

			lAltDes := .F.
			If Len(Alltrim(TAF_NOMNIV)) > Len(AllTrim((cTRBSGA)->DESCRI))
				If AllTrim((cTRBSGA)->DESCRI) <> Alltrim(TAF_NOMNIV)
					lAltDes := .T.
				EndIf
			Else
				If Alltrim(TAF_NOMNIV) <> AllTrim((cTRBSGA)->DESCRI)
					lAltDes := .T.
				EndIf
			EndIf
			RecLock("TAF",.F.)
			Replace TAF_FILIAL With xFilial('TAF')
			Replace TAF_CODEST With (cTRBSGA)->CODEST
			Replace TAF_NOMNIV With (cTRBSGA)->DESCRI
			Replace TAF_NIVEL  With (cTRBSGA)->NIVEL
			nPos := aScan(aRecNiv, {|x| x[1] == (cTRBSGA)->NIVSUP})
			If nPos == 0
				Replace TAF_NIVSUP With ( cTRBSGA )->NIVSUP
			Else
				Replace TAF_NIVSUP With aRecNiv[nPos][2]
			EndIf
			Replace TAF_MAT    With (cTRBSGA)->RESPONS
			Replace TAF_INDCON With (cTRBSGA)->TIPO
			Replace TAF_CODCON With (cTRBSGA)->CODTIPO
			Replace TAF_MODSGA With (cTRBSGA)->MODSGA
			Replace TAF_MODMNT With (cTRBSGA)->MODMNT
			Replace TAF_MODMDT With (cTRBSGA)->MODMDT
			If lRetS
				Replace TAF_ETAPA  With (cTRBSGA)->ETAPA
			EndIf
			If lRateio
				Replace TAF_RATEIO  With (cTRBSGA)->RATEIO
			EndIf
			If lFamilia
				Replace TAF_CODFAM With (cTRBSGA)->CODFAM
			EndIf
			If lCodAmb
				Replace TAF_CODAMB With (cTRBSGA)->CODAMB
			EndIf
			If lDepto
				Replace TAF_DEPTO  With (cTRBSGA)->DEPTO
			EndIf
			If lSitNiv
				Replace TAF_SITNIV With (cTRBSGA)->SITNIV
			EndIf
			RecUserFld(aUserTAF, "(cTRBSGA)", "TAF")
			TAF->( MsUnLock() )

			If nMod902 == 56
				dbSelectArea(cTRBTAK)
				dbSetOrder(1)
				dbSeek((cTRBSGA)->CODPRO)
				While !EoF() .And. (cTRBTAK)->CODNIV == (cTRBSGA)->CODPRO
					If !Empty((cTRBSGA)->DELETADO)
						dbSelectArea("TAK")
						dbSetOrder(1)
						If dbSeek(xFilial("TAK")+"001"+(cTRBTAK)->CODNIV+(cTRBTAK)->MAT)
							If (cTRBTAK)->OPERAC <> "S"
								RecLock("TAK",.F.)
								dbDelete()
								TAK->( MsUnlock() )
							EndIf
						EndIf
					Else
						If (cTRBTAK)->OPERAC == "S"
							dbSelectArea("TAK")
							dbSetOrder(1)
							If !dbSeek(xFilial("TAK")+"001"+TAF->TAF_CODNIV+(cTRBTAK)->MAT)
								RecLock("TAK",.T.)
								TAK->TAK_FILIAL := xFilial("TAK")
								TAK->TAK_CODEST := "001"
								TAK->TAK_CODNIV := TAF->TAF_CODNIV
								TAK->TAK_CODFUN := (cTRBTAK)->CODFUN
								TAK->TAK_MAT    := (cTRBTAK)->MAT
								TAK->( MsUnlock() )
							EndIf
						EndIf
					EndIf

					dbSelectArea(cTRBTAK)
					dbSkip()
				End

				dbSelectArea(cTRBTAL)
				dbSetOrder(1)
				dbSeek(xFilial("TAL") + '001' + (cTRBSGA)->CODPRO)
				While !EoF() .And. xFilial("TAL") == (cTRBTAL)->FILIAL .And. cCodEst == (cTRBSGA)->CODEST .And.;
						(cTRBTAL)->CODNIV == (cTRBSGA)->CODPRO
					If !Empty((cTRBSGA)->DELETADO)
						dbSelectArea("TAL")
						dbSetOrder(1) //TAL_FILIAL+TAL_CODEST+TAL_CODNIV+TAL_FILDOC+TAL_DOCTO
						If dbSeek(xFilial("TAL") + '001' + (cTRBTAL)->CODNIV + (cTRBTAL)->FILDOC + (cTRBTAL)->DOCTO )
							RecLock("TAL",.F.)
							dbDelete()
							TAL->( MsUnlock() )
						EndIf
					Else

						If (cTRBTAL)->SITUAC == 'S'
							dbSelectArea("TAL")
							dbSetOrder(1)
							If !dbSeek(xFilial("TAL") + '001' + (cTRBTAL)->CODNIV + (cTRBTAL)->FILDOC + (cTRBTAL)->DOCTO )
								RecLock("TAL",.T.)
								TAL->TAL_FILIAL := xFilial("TAL")
								TAL->TAL_CODEST := '001'
								TAL->TAL_CODNIV := TAF->TAF_CODNIV
								TAL->TAL_FILDOC := (cTRBTAL)->FILDOC
								TAL->TAL_DOCTO := (cTRBTAL)->DOCTO
								TAL->( MsUnLock() )
							EndIf
						EndIf
					EndIf

					(cTRBTAL)->(dbSkip())
				End
			EndIf

			If nPos > 0
				aAdd(aNewSup,{(cTRBSGA)->(Recno()), aRecNiv[nPos][2]})
			EndIf

         	// Inclui Bem/Localizacao na Restricao de Acesso
			If lIncTAF .And. FindFunction("NGInsertTUB")
				NGInsertTUB()
			EndIf

         	// Altera C.C. e C.T. do bem de acordo com a localização do pai.
			cCCusto := (cTRBSGA)->CC
			cCentra := (cTRBSGA)->CENTRAB

			// Somente acionada quando for inclusão de um novo registros ou alteração de local de bem na árvore.
			If ( lIncTAF .Or. lAltTAF ) .And. TAF->TAF_INDCON == '1'

				// Atualiza o C.C. e C.T. do bem pai e seus filhos conforme informações da localização do pai.
				aRetTC := aClone ( MntUpdCC( TAF->TAF_CODCON, TAF->TAF_FILIAL + TAF->TAF_CODEST +;
					TAF->TAF_NIVSUP ) )

				// Altera váriaveis de controle C.C. e C.T. do bem de acordo com a localização do pai.
				cCCusto := IIf( Empty( aRetTC[1] ), cCCusto, aRetTC[1] )
				cCentra := IIf( Empty( aRetTC[2] ), cCentra, aRetTC[2] )

			EndIf

         	// Altera Bem/Localizacao na Restricao de Acesso
			If !lIncTAF

				NGAlterTUB(cCCusto,cCentra)

				If TAF->TAF_INDCON == '2' .And. (cCCusto != TAF->TAF_CCUSTO .Or. cCentra != TAF->TAF_CENTRA)
					RecLock("TAF",.F.)
					TAF->TAF_CCUSTO := cCCusto
					TAF->TAF_CENTRA := cCentra
					TAF->( MsUnLock() )
               		//Atualiza centro de custo
					dbSelectArea(cTRBSGA)
					RecLock((cTRBSGA),.F.)
					(cTRBSGA)->CC := cCCusto
					(cTRBSGA)->CENTRAB := cCentra
					(cTRBSGA)->(MsUnlock())
					dbSelectArea("TAF")
				EndIf
			EndIf

			If lAltDes
				dbSelectArea("TCJ")
				dbSetOrder(1)
				dbSeek(xFilial("TCJ")+TAF->TAF_CODNIV)
				While !EoF() .And. TCJ->TCJ_FILIAL == xFilial("TCJ") .And. TCJ->TCJ_CODNIV == TAF->TAF_CODNIV
					RecLock("TCJ",.F.)
					TCJ->TCJ_DESNIV := TAF->TAF_NOMNIV
					TCJ->( MsUnLock() )

					dbSelectArea("TCJ")
					dbSetOrder(1)
					dbSkip()
				End
			EndIf

			dbSelectArea(cTRBSGA)
			dbSkip()

		EndDo

		// Trecho para atualizar os campos TAF_NIVSUP dos registros que tiveram seu pai processado depois deles, o que
		// faz com que array aRecNiv não esteja atualizado no momento de alteração do TAF_NIVSUP.
		// Isso ocorre quando um bem é incluido na árvore antes de uma localização, depois deletado e inserido
		// nessa localização.
		If !Empty( aRecNiv )

			For i := 1 to Len( aRecFilhos )

				// Se o bem não estiver na TAF, não se tem o código do filho que foi salvo na TAF, logo se busca no aRecNiv
				// o TAF_CODNIV do filho usando o codigo da TRB.
				nPos := aScan( aRecNiv, { |x| x[1] == aRecFilhos[ i ] } )
				If nPos > 0
					cRecFilho := aRecNiv[ nPos, 2 ]
				Else
					// Se o bem estiver na TAF, já se tem o código do filho que foi salvo na TAF.
					cRecFilho := aRecFilhos[ i ]
				EndIf

				// Então se busca na TAF o TAF_NIVSUP usando o código encontrado e verifica se houve alteração nele em relação
				// ao aRecNiv, se houver o atualiza.

				dbSelectarea( "TAF" )
				dbSetOrder( 2 ) // TAF_FILIAL + TAF_CODEST + TAF_CODNIV + TAF_NOMNIV
				If dbSeek( xFilial( "TAF" ) + "001" + cRecFilho )
					nPos := aScan( aRecNiv, { |x| x[1] == TAF->TAF_NIVSUP } )
					If nPos > 0 .And. TAF->TAF_NIVSUP != aRecNiv[ nPos, 2 ]

						RecLock( "TAF", .F. )
						TAF->TAF_NIVSUP := aRecNiv[ nPos, 2 ]
						TAF->( MsUnlock() )

					EndIf
				EndIf

			Next i

		EndIf

		If !lConfirm
			For i:=1 to Len(aNewCod)
				dbSelectArea(cTRBSGA)
				dbGoTo(aNewCod[i][1])
				If !EoF() .And. (cTRBSGA)->CODPRO != aNewCod[i][2]
               		//Coloca novo codigo a OS/SS etc...
					dbSelectArea(cTRBSGA)
					dbSetOrder(2)
					If dbSeek(cCodEst+aNewCod[i][2]+cFilAnt)
						If FindFunction("Soma1Old")
							cLocal := Soma1Old(AllTrim(cLocal))
						Else
							cLocal := Soma1(AllTrim(cLocal))
						EndIf

						dbSelectArea((oTree:cArqTree))
						dbSetOrder(4)
						If dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
							RecLock((oTree:cArqTree),.F.)
							(oTree:cArqTree)->T_CARGO := aNewCod[i][2]+AllTrim((cTRBSGA)->CARGO)+cFilAnt
							(oTree:cArqTree)->( MsUnlock() )
						EndIf

						If nMod902 == 56
							dbSelectArea(cTRBTAK)
							dbSetOrder(1)
							If dbSeek((cTRBSGA)->CODPRO)
								RecLock((cTRBTAK),.F.)
								(cTRBTAK)->CODNIV := cLocal
								(cTRBTAK)->(MsUnlock())
							EndIf
						EndIf

						dbSelectArea(cTRBSGA)
						RecLock((cTRBSGA),.F.)
						(cTRBSGA)->CODPRO := cLocal
						(cTRBSGA)->ORDEM  := cLocal
						(cTRBSGA)->(MsUnlock())

                  		//Atualiza itens filhos
						dbSelectArea(cTRBSGA)
						dbSetOrder(1)
						dbSeek(cCodEst+aNewCod[i][2]+cFilAnt)
						While !EoF() .And. (cTRBSGA)->CODEST+(cTRBSGA)->NIVSUP+(cTRBSGA)->FILIAL == cCodEst+aNewCod[i][2]+cFilAnt
							If nMod902 == 56
								dbSelectArea((oTree:cArqTree))
								dbSetOrder(4)
								If dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
									RecLock((oTree:cArqTree),.F.)
									(oTree:cArqTree)->T_CARGO := aNewCod[i][2]+AllTrim((cTRBSGA)->CARGO)+cFilAnt
									(oTree:cArqTree)->( MsUnlock() )
								EndIf
							EndIf

							RecLock((cTRBSGA),.F.)
							(cTRBSGA)->NIVSUP := cLocal
							(cTRBSGA)->(MsUnlock())
							dbSelectArea(cTRBSGA)
							dbSkip()
						End
					EndIf
               		//Atualiza Item
					dbSelectArea(cTRBSGA)
					dbGoTo(aNewCod[i][1])
					dbSelectArea((oTree:cArqTree))
					dbSetOrder(4)
					If dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
						RecLock((oTree:cArqTree),.F.)
						(oTree:cArqTree)->T_CARGO := aNewCod[i][2]+AllTrim((cTRBSGA)->CARGO)+cFilAnt
						(oTree:cArqTree)->( MsUnlock() )
					EndIf

					dbSelectArea(cTRBSGA)
					RecLock((cTRBSGA),.F.)
					(cTRBSGA)->CODPRO := aNewCod[i][2]
					(cTRBSGA)->ORDEM  := aNewCod[i][2]
					(cTRBSGA)->(MsUnlock())
				EndIf
			Next i
			For i:=1 to Len(aNewSup)
				dbSelectArea(cTRBSGA)
				dbGoTo(aNewSup[i][1])
				If !EoF() .And. (cTRBSGA)->NIVSUP != aNewSup[i][2]
					RecLock((cTRBSGA),.F.)
					(cTRBSGA)->NIVSUP := aNewSup[i][2]
					(cTRBSGA)->(MsUnlock())
				EndIf
			Next i
		EndIf

		If nMod902 == 56
			GravaSga(aRecNiv)

			If !lConfirm
				dbSelectArea(oTree:cArqTree)
				dbSetOrder(4)
				oTree:TreeSeek(cCargoAtu)
				MNT902MoLg(oTree:GetCargo())
			EndIf
		EndIf

	Next nX
	If !lConfirm
		cFilAnt := Substr(cCargoAtu,7)
	EndIf
   	// Ponto de entrada executado ao finalizar gravacao da TAF
	If ExistBlock("SGAA1002")
		ExecBlock("SGAA1002",.F.,.F.)
	EndIf
Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  GravaSga

Função para a gravação das tabelas de Gestão Ambiental

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param nOpc
/*/
//---------------------------------------------------------------------
Static Function GravaSga(aRecNiv)

	Local cCodRes, cCodAsp, cCodPla, cCodOco
	Local cNivSup
	Local nSup
	Local lSgaSequen := NGCADICBASE("TAV_SEQUEN","A","TAV",.F.)
	Local lLocDef	 := .T.

	dbSelectArea(cTRBSGA)
	dbSetOrder(3) // "TIPO+CODTIPO+FILIAL"
	If dbSeek(__cTpRes)
		While (cTRBSGA)->(!EoF()) .And. (cTRBSGA)->TIPO == __cTpRes

			cNivSup := (cTRBSGA)->NIVSUP

			If ( nSup := aScan(aRecNiv, {|x| x[1] == (cTRBSGA)->NIVSUP}) ) > 0
				cNivSup := aRecNiv[nSup][2]
			EndIf

			cCodRes := Padr((cTRBSGA)->CODTIPO, Len(TAX->TAX_CODRES))
			dbSelectArea( "TAX" )
			dbSetOrder(1) //TAX_FILIAL+TAX_CODRES
			lLocDef := dbSeek( xFilial( "TAX" ) + cCodRes )

			dbSelectArea("TAV")
			dbSetOrder(1) //TAV_FILIAL+TAV_CODRES+TAV_CODEST+TAV_CODNIV

			If !Empty( (cTRBSGA)->DELETADO ) .Or. !lLocDef
				dbSeek(xFilial("TAV")+ cCodRes + cCodEst + cNivSup)
				While !EoF() .And. TAV->TAV_FILIAL+TAV->TAV_CODRES+TAV->TAV_CODEST+TAV->TAV_CODNIV == xFilial("TAV")+ cCodRes + cCodEst + cNivSup
					RecLock("TAV",.F.)
					dbDelete()
					TAV->( MsUnLock() )
					TAV->(dbSkip())
				End
			Else
				If !dbSeek( xFilial("TAV") + cCodRes + cCodEst + cNivSup )
					RecLock("TAV",.T.)
					TAV->TAV_FILIAL := xFilial( "TAV" , cFilAnt )
					TAV->TAV_CODRES := cCodRes
					TAV->TAV_CODEST := cCodEst
					TAV->TAV_CODNIV := cNivSup
					If lSgaSequen
						TAV->TAV_SEQUEN := "001"
					EndIf
					TAV->( MsUnLock() )
				EndIf

			EndIf

			dbSelectArea(cTRBSGA)
			(cTRBSGA)->(dbSkip())

		End
	EndIf

	dbSelectArea(cTRBSGA)
	If dbSeek(__cTpAsp)
		While (cTRBSGA)->(!EoF()) .And. (cTRBSGA)->TIPO == __cTpAsp
			If ( nSup := aScan(aRecNiv, {|x| x[1] == (cTRBSGA)->NIVSUP}) ) > 0
				cNivSup := aRecNiv[nSup][2]
			Else
				cNivSup := (cTRBSGA)->NIVSUP
			EndIf

			cCodAsp := Padr((cTRBSGA)->CODTIPO, Len(TA4->TA4_CODASP))

			dbSelectArea("TAG")
			dbSetOrder(1)//TAG_FILIAL+TAG_CODASP+TAG_CODEST+TAG_CODNIV

			If !Empty( (cTRBSGA)->DELETADO )
				dbSeek(xFilial("TAG")+ cCodAsp + cCodEst + cNivSup)
				While !EoF() .And. TAG->TAG_FILIAL+TAG->TAG_CODASP+TAG->TAG_CODEST+TAG->TAG_CODNIV == xFilial("TAG")+ cCodAsp + cCodEst + cNivSup
					RecLock("TAG",.F.)
					dbDelete()
					TAG->( MsUnLock() )
					TAG->(dbSkip())
				End
			Else
				If !dbSeek( xFilial("TAG") + cCodAsp + cCodEst + cNivSup )
					RecLock("TAG",.T.)
					TAG->TAG_FILIAL := xFilial( "TAG" , cFilAnt )
					TAG->TAG_CODASP := cCodAsp
					TAG->TAG_CODEST := cCodEst
					TAG->TAG_CODNIV := cNivSup
					If lSgaSequen
						TAG->TAG_SEQUEN := "001"
					EndIf
					TAG->( MsUnLock() )
				EndIf
			EndIf

			dbSelectArea(cTRBSGA)
			(cTRBSGA)->(dbSkip())
		End
	EndIf

	dbSelectArea(cTRBSGA)
	If dbSeek(__cTpPE)
		While (cTRBSGA)->(!EoF()) .And. (cTRBSGA)->TIPO == __cTpPE
			If ( nSup := aScan(aRecNiv, {|x| x[1] == (cTRBSGA)->NIVSUP}) ) > 0
				cNivSup := aRecNiv[nSup][2]
			Else
				cNivSup := (cTRBSGA)->NIVSUP
			EndIf

			cCodPla := Padr((cTRBSGA)->CODTIPO, Len(TBB->TBB_CODPLA))

			dbSelectArea("TBC")
			dbSetOrder(1)//TAG_FILIAL+TBC_CODPLA+TBC_CODEST+TBC_CODNIV

			If !Empty( (cTRBSGA)->DELETADO )
				If dbSeek(xFilial("TBC")+ cCodPla + cCodEst + cNivSup )
					RecLock("TBC",.F.)
					dbDelete()
					TBC->( MsUnLock() )
					TBC->(dbSkip())
				EndIf
			Else
				If !dbSeek( xFilial("TBC") + cCodPla + cCodEst + cNivSup )
					RecLock("TBC",.T.)
					TBC->TBC_FILIAL := xFilial( "TBC" , cFilAnt )
					TBC->TBC_CODPLA := cCodPla
					TBC->TBC_CODEST := cCodEst
					TBC->TBC_CODNIV := cNivSup
					TBC->( MsUnLock() )
				EndIf
			EndIf

			dbSelectArea(cTRBSGA)
			(cTRBSGA)->(dbSkip())
		End
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902MoLg
Mostra quantidade de itens da legenda no rodape.
@author Rafael Diogo Richter
@since 15/10/2008
@version undefined
@param cCod, characters
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902MoLg(cCod)

	Local k
	Local lFacilit   := FindFunction("MNTINTFAC") .And. MNTINTFAC()
	Local nPer       := 0
	Local nPos       := 0
	Local nRes       := 0
	Local nAsp       := 0
	Local nPla       := 0
	Local cCargoTmp
	Local nPosQuebra
	Local nCor       := 1 //Verde
	Local lPossuiVer := .F.
	Local lPossuiAmr := .F.

	Local nPosPer    := 0
	Local nPosDan    := 0
	Local aPerigos   := {}
	Local aDanos     := {}

	Local bAttTree   := {|| aAdd( aTree, { (cTRBSGA)->CODPRO, (cTRBSGA)->TIPO, (cTRBSGA)->CODTIPO, SUBSTR((cTRBSGA)->CARGO,1,3) } ), aSize( aTree,Len(aTree) ) }
	Local bVrfMod    := {|| .T. }

	Local cTime      := Substr(Time(),1,5)

	Private lSave := .T.
	nIdent := 0
	nBens  := 0
	nVerde := 0
	nVerm  := 0
	nAmar  := 0
	nSSA   := 0
	nSSM   := 0
	nSSD   := 0
	nFunc  := 0
	nTare  := 0
	nRisc  := 0
	nPeri  := 0
	nDano  := 0
	nLgRes := 0
	nLgOcR := 0
	nLgAsp := 0
	nLgDes := 0
	nLgPla := 0
	nLgOPE := 0
	nLgFMRPC := 0
	nLgFMRAP := 0
	nLgFMRAR := 0
	nLgFMRNC := 0
	nLgFMRRB := 0

	oBtnVis:lVisible    := .T.

	If nMod902 == 56
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek("001"+SubStr(cCod,1,3)+cFilAnt)
	EndIf

	If SubStr( cCod, 4, 3 ) == "LOC"

		If nMod902 == 56 .And. (cTRBSGA)->SITNIV == "2"
			oBtnIncId:lVisible  := .F.
			oBtnAltId:lVisible  := .F.
		Else
			oBtnIncId:lVisible  := MNT902REST(Substr(cCod,1,3),"L","I")//Inc. Loc
			oBtnAltId:lVisible  := MNT902REST(Substr(cCod,1,3),"L","A")//Alt. Loc
		EndIf

		oBtnExcId:lVisible  := MNT902REST(Substr(cCod,1,3),"L","E")//Exc. Loc

		If nMod902 == 19
			oBtnIOSCo:lVisible  := IIf(Substr(cCod,1,3) == '001', .F., MNT902REST(Substr(cCod,1,3),"O","C")) //OS Corretiva
			oBtnIncBem:lVisible := MNT902REST(Substr(cCod,1,3),"B","I")//Inc. Bem
			oBtnImpBem:lVisible := MNT902REST(Substr(cCod,1,3),"B","I")//Imp. Bem
			oBtnIncSS:lVisible  := IIf(Substr(cCod,1,3) == '001', .F., MNT902REST(Substr(cCod,1,3),"S","I")) //Inc. SS
			oBtnExcBem:lVisible := .F.
			oBtnFinSS:lVisible  := .F.
			oBtnDSS:lVisible    := .F.
			oBtnExcSS:lVisible  := .F.
			oBtnAltSS:lVisible  := .F.
			oBtnROS:lVisible    := .F.
			oBtnImpOs:lVisible  := .F.
			oBtnIOSPr:lVisible  := .F.
			oBtnGerOs:lVisible  := .F.
		ElseIf nMod902 == 35
			oBtnIncFu:lVisible := .T.
			oBtnIncTa:lVisible := .T.
			oBtnAltFu:lVisible := .F.
			oBtnAltTa:lVisible := .F.
			oBtnExcFu:lVisible := .F.
			oBtnExcTa:lVisible := .F.
			If lCodAmb
				oBtnIncRi:lVisible := .T.
				oBtnAltRi:lVisible := .F.
				oBtnExcRi:lVisible := .F.
				oBtnRelRi:lVisible := .F.
			EndIf
			If lOHSAS
				oBtnIncPe:lVisible := .T.
				oBtnAltPe:lVisible := .F.
				oBtnExcPe:lVisible := .F.
				oBtnVerAn:lVisible := .F.
				oBtnIncAn:lVisible := .F.
				oBtnAltAn:lVisible := .F.
				oBtnExcAn:lVisible := .F.
			EndIf

		ElseIf nMod902 == 56

			If SgaIsTemp(cCod)

				oBtnIncRe:cToolTip := oBtnIncRe:cToolTip + CRLF + STR0253
				oBtnIncRe:Disable()

				oBtnVinRes:cToolTip := oBtnVinRes:cToolTip + CRLF + STR0253
				oBtnVinRes:Disable()

				oBtnInAsp:cToolTip := oBtnInAsp:cToolTip + CRLF + STR0253
				oBtnInAsp:Disable()

				oBtnVinAsp:cToolTip := oBtnVinAsp:cToolTip + CRLF + STR0253
				oBtnVinAsp:Disable()

				oBtnInPla:cToolTip := oBtnInPla:cToolTip + CRLF + STR0253
				oBtnInPla:Disable()

				oBtnVinPla:cToolTip := oBtnVinPla:cToolTip + CRLF + STR0253
				oBtnVinPla:Disable()

				oBtnAtvIna:cToolTip := oBtnAtvIna:cToolTip + CRLF + STR0253
				oBtnAtvIna:Disable()

			Else

				oBtnAtvIna:Enable()
				If (nPosQuebra := At(CRLF, oBtnAtvIna:cToolTip)) > 0
					oBtnAtvIna:cToolTip := SubStr(oBtnAtvIna:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnIncRe:Enable()
				If (nPosQuebra := At(CRLF, oBtnIncRe:cToolTip)) > 0
					oBtnIncRe:cToolTip := SubStr(oBtnIncRe:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnVinRes:Enable()
				If (nPosQuebra := At(CRLF, oBtnVinRes:cToolTip)) > 0
					oBtnVinRes:cToolTip := SubStr(oBtnVinRes:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnInAsp:Enable()
				If (nPosQuebra := At(CRLF, oBtnInAsp:cToolTip)) > 0
					oBtnInAsp:cToolTip := SubStr(oBtnInAsp:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnVinAsp:Enable()
				If (nPosQuebra := At(CRLF, oBtnVinAsp:cToolTip)) > 0
					oBtnVinAsp:cToolTip := SubStr(oBtnVinAsp:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnInPla:Enable()
				If (nPosQuebra := At(CRLF, oBtnInPla:cToolTip)) > 0
					oBtnInPla:cToolTip := SubStr(oBtnInPla:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnVinPla:Enable()
				If (nPosQuebra := At(CRLF, oBtnVinPla:cToolTip)) > 0
					oBtnVinPla:cToolTip := SubStr(oBtnVinPla:cToolTip, 1, nPosQuebra-1)
				EndIf
			EndIf

			If (cTRBSGA)->SITNIV <> '2'
				oBtnIncRe:lVisible   := .T.
				oBtnVinRes:lVisible  := .T.
				oBtnInAsp:lVisible   := .T.
				oBtnVinAsp:lVisible  := .T.
				oBtnInPla:lVisible   := .T.
				oBtnVinPla:lVisible  := .T.

			Else
				oBtnIncRe:lVisible   := .F.
				oBtnVinRes:lVisible  := .F.
				oBtnInAsp:lVisible   := .F.
				oBtnVinAsp:lVisible  := .F.
				oBtnInPla:lVisible   := .F.
				oBtnVinPla:lVisible  := .F.
			EndIf


			oBtnRel:lVisible     := .T.
			oBtnVisRes:lVisible  := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.
			oBtnIncOc:lVisible   := .F.
			oBtnViOco:lVisible   := .F.
			oBtnInFMR:lVisible   := .F.
			oBtnViFMR:lVisible   := .F.
			oBtnAlFMR:lVisible   := .F.

      		//ASPECTO
			oBtnAlAsp:lVisible    := .F.
			oBtnExAsp:lVisible    := .F.
			oBtnApDes:lVisible    := .F.
			oBtnCpAsp:lVisible    := .F.
			oBtnViAsp:lVisible    := .F.
			oBtnIncDes:lVisible   := .F.
			oBtnVisDes:lVisible   := .F.
			oBtnAltDes:lVisible   := .F.
			oBtnExcDes:lVisible   := .F.

      		//PLANO
			oBtnAlPla:lVisible    := .F.
			oBtnViPla:lVisible    := .F.
			oBtnExPla:lVisible    := .F.
			oBtnInOPE:lVisible    := .F.
			oBtnAlOPE:lVisible    := .F.
			oBtnViOPE:lVisible    := .F.
			oBtnExOPE:lVisible    := .F.
			oBtnRespOco:lVisible := .F.
			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

			If lSitNiv
				oBtnAtvIna:lVisible  := .T.
			EndIf

		EndIf

		dbSelectArea("TAF")
		dbSetOrder(2)
		dbSeek(xFilial("TAF")+"001"+SubStr(cCod,1,3))

	ElseIf nMod902 <> 56

		If SubStr( cCod, 4, 2 ) == "OS"
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek("001"+SubStr(cCod,1,3)+cFilAnt)
				dbSelectArea("STJ")
				dbSetOrder(1)
				dbSeek(xFilial("STJ")+AllTrim((cTRBSGA)->CODTIPO))
				If Empty(STJ->TJ_ORDEPAI)
					oBtnROS:lVisible  := MNT902REST((cTRBSGA)->NIVSUP,"O","R")//Retorno O.S.
				Else
					oBtnROS:lVisible  := .F.
				EndIf
			EndIf
			oBtnImpOs:lVisible   := .T.
			oBtnIOSPr:lVisible   := .F.
			oBtnIOSCo:lVisible   := .F.
			oBtnIncId:lVisible   := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncBem:lVisible  := .F.
			oBtnImpBem:lVisible  := .F.
			oBtnExcBem:lVisible  := .F.
			oBtnFinSS:lVisible   := .F.
			oBtnDSS:lVisible  	 := .F.
			oBtnExcSS:lVisible   := .F.
			oBtnAltSS:lVisible   := .F.
			oBtnIncSS:lVisible   := .F.
			oBtnGerOs:lVisible   := .F.

		ElseIf SubStr( cCod, 4, 3 ) == "BEM"

			oBtnIOSCo:lVisible  := IIf(Substr(cCod,1,3) == '001', .F., MNT902REST(Substr(cCod,1,3),"O","C")) //OS Corretiva
			oBtnExcBem:lVisible := MNT902REST(Substr(cCod,1,3),"B","E")//Exc. Bem
			oBtnIncSS:lVisible  := IIf(Substr(cCod,1,3) == '001', .F., MNT902REST(Substr(cCod,1,3),"S","I")) //Inc. SS
			oBtnROS:lVisible    := .F.
			oBtnImpOs:lVisible  := .F.
			oBtnIOSPr:lVisible  := .F.
			oBtnIncId:lVisible  := .F.
			oBtnAltId:lVisible  := .F.
			oBtnExcId:lVisible  := .F.
			oBtnIncBem:lVisible := .F.
			oBtnImpBem:lVisible := .F.
			oBtnFinSS:lVisible  := .F.
			oBtnDSS:lVisible    := .F.
			oBtnExcSS:lVisible  := .F.
			oBtnAltSS:lVisible  := .F.
			oBtnGerOs:lVisible  := .F.

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek("001"+SubStr(cCod,1,3))
				dbSelectArea("STF")
				dbSetOrder(1)
				If dbSeek(xFilial("STF")+AllTrim((cTRBSGA)->CODTIPO))
					oBtnIOSPr:lVisible := MNT902REST(Substr(cCod,1,3),"O","P")//OS Preventiva
				EndIf

				dbSelectArea("ST9")
				dbSetOrder(1)
				dbSeek(xFilial("ST9")+AllTrim((cTRBSGA)->CODTIPO))
				M->T9_CODBEM := ST9->T9_CODBEM
			EndIf
		ElseIf SubStr( cCod, 4, 2 ) == "SS"

			cCod := SubStr(cCod,1,3)
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCod+cFilAnt)

			dbSelectArea("TQB")
			dbSetOrder(1)
			dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO)

			lGerOs   := .T.
			lDSS  := .T.
			lAltSS   := .T.
			lExcSS   := .T.
			lFinSS   := .T.

			If TQB->TQB_SOLUCA <> "D"
				lGerOs   := .F.
				lFinSS   := .F.
			Else
				lDSS  := .F.
			EndIf

			If TQB->TQB_SOLUCA <> "A"
				lExcSS   := .F.
			EndIf

			If AllTrim(GetNewPar("MV_NGMULOS","N")) <> "S"
				If !Empty(tqb->tqb_ordem)
					lGerOs   := .F.
					lDSS  := .F.
					lAltSS   := .F.
					lExcSS   := .F.
					dbSelectArea("STJ")
					dbSetOrder(01)
					If dbSeek(xFilial("STJ")+tqb->tqb_ordem)
						If stj->tj_situaca = "L" .And. stj->tj_termino = "N"
							lFinSS   := .F.
						EndIf
					EndIf
				EndIf
			Else
				dbSelectArea("TT7")
				dbSetOrder(1)
				If dbSeek(xFilial("TT7")+TQB->TQB_SOLICI)
					lDSS  := .F.
					lAltSS   := .F.
					lExcSS   := .F.
					While !EoF() .And. TT7->TT7_FILIAL == xFilial("TT7") .And. TT7->TT7_SOLICI == TQB->TQB_SOLICI
						If TT7->TT7_TERMIN == "N" .And. TT7->TT7_SITUAC == "L"
							lFinSS   := .F.
							Exit
						EndIf
						dbSelectArea("TT7")
						dbSkip()
					End
				EndIf

			EndIf

			oBtnROS:lVisible    := .F.
			oBtnImpOs:lVisible   := .F.
			oBtnIOSPr:lVisible  := .F.
			oBtnIOSCo:lVisible  := .F.
			oBtnIncId:lVisible  := .F.
			oBtnAltId:lVisible  := .F.
			oBtnExcId:lVisible  := .F.
			oBtnIncBem:lVisible := .F.
			oBtnImpBem:lVisible := .F.
			oBtnExcBem:lVisible := .F.
			oBtnIncSS:lVisible   := .F.
			oBtnDSS:lVisible  := (lDSS .And. MNT902REST((cTRBSGA)->NIVSUP,"S","D"))//Dist. SS
			oBtnExcSS:lVisible   := (lExcSS .And. MNT902REST((cTRBSGA)->NIVSUP,"S","E"))//Exc. SS
			oBtnAltSS:lVisible   := (lAltSS .And. MNT902REST((cTRBSGA)->NIVSUP,"S","A"))//Alt. SS
			oBtnGerOs:lVisible   := (!lFacilit .And. lGerOs .And. MNT902REST((cTRBSGA)->NIVSUP,"S","G"))//Gerar OS
			oBtnFinSS:lVisible   := ( ( lFacilit .And. TQB->TQB_SOLUCA == 'D' ) .Or. ( !lFacilit .And. lFinSS ) ) .And. MNT902REST( (cTRBSGA)->NIVSUP, 'S', 'F' ) // Final. SS
		ElseIf SubStr( cCod, 4, 3 ) == "FUN"
			oBtnIncId:lVisible    := .F.
			oBtnAltId:lVisible    := .F.
			oBtnExcId:lVisible    := .F.
			oBtnIncFu:lVisible     := .F.
			oBtnIncTa:lVisible    := .T.
			oBtnAltFu:lVisible    := .T.
			oBtnAltTa:lVisible    := .F.
			oBtnExcFu:lVisible    := .T.
			oBtnExcTa:lVisible    := .F.
			If lCodAmb
				oBtnIncRi:lVisible := .T.
				oBtnAltRi:lVisible := .F.
				oBtnExcRi:lVisible := .F.
				oBtnRelRi:lVisible := .F.
			EndIf
			If lOHSAS
				oBtnIncPe:lVisible    := .T.
				oBtnAltPe:lVisible    := .F.
				oBtnExcPe:lVisible    := .F.
				oBtnVerAn:lVisible    := .F.
				oBtnIncAn:lVisible    := .F.
				oBtnAltAn:lVisible    := .F.
				oBtnExcAn:lVisible    := .F.
			EndIf
		ElseIf SubStr( cCod, 4, 3 ) == "TAR"
			oBtnIncId:lVisible   := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncFu:lVisible   := .F.
			oBtnIncTa:lVisible   := .F.
			oBtnAltFu:lVisible   := .F.
			oBtnAltTa:lVisible   := .T.
			oBtnExcFu:lVisible   := .F.
			oBtnExcTa:lVisible   := .T.
			If lCodAmb
				oBtnIncRi:lVisible := .T.
				oBtnAltRi:lVisible := .F.
				oBtnExcRi:lVisible := .F.
				oBtnRelRi:lVisible := .F.
			EndIf
			If lOHSAS
				oBtnIncPe:lVisible    := .T.
				oBtnAltPe:lVisible    := .F.
				oBtnExcPe:lVisible    := .F.
				oBtnVerAn:lVisible    := .F.
				oBtnIncAn:lVisible    := .F.
				oBtnAltAn:lVisible    := .F.
				oBtnExcAn:lVisible    := .F.
			EndIf
		ElseIf SubStr( cCod, 4, 3 ) == "PER"
			oBtnIncId:lVisible    := .F.
			oBtnAltId:lVisible    := .F.
			oBtnExcId:lVisible    := .F.
			oBtnIncFu:lVisible     := .F.
			oBtnIncTa:lVisible    := .F.
			oBtnAltFu:lVisible    := .F.
			oBtnAltTa:lVisible    := .F.
			oBtnExcFu:lVisible    := .F.
			oBtnExcTa:lVisible    := .F.
			If lCodAmb
				oBtnIncRi:lVisible := .F.
				oBtnAltRi:lVisible := .F.
				oBtnExcRi:lVisible := .F.
				oBtnRelRi:lVisible := .F.
			EndIf
			If lOHSAS
				oBtnIncPe:lVisible    := .F.
				oBtnAltPe:lVisible    := .T.
				oBtnExcPe:lVisible    := .T.
				oBtnVerAn:lVisible    := .F.
				oBtnIncAn:lVisible    := .T.
				oBtnAltAn:lVisible    := .F.
				oBtnExcAn:lVisible    := .F.
			EndIf
		ElseIf SubStr( cCod, 4, 3 ) == "DAN"
			oBtnIncId:lVisible    := .F.
			oBtnAltId:lVisible    := .F.
			oBtnExcId:lVisible    := .F.
			oBtnIncFu:lVisible     := .F.
			oBtnIncTa:lVisible    := .F.
			oBtnAltFu:lVisible    := .F.
			oBtnAltTa:lVisible    := .F.
			oBtnExcFu:lVisible    := .F.
			oBtnExcTa:lVisible    := .F.
			If lCodAmb
				oBtnIncRi:lVisible := .F.
				oBtnAltRi:lVisible := .F.
				oBtnExcRi:lVisible := .F.
				oBtnRelRi:lVisible := .F.
			EndIf
			If lOHSAS
				oBtnIncPe:lVisible    := .F.
				oBtnAltPe:lVisible    := .F.
				oBtnExcPe:lVisible    := .F.
				oBtnVerAn:lVisible    := .T.
				oBtnIncAn:lVisible    := .F.
				oBtnAltAn:lVisible    := .T.
				oBtnExcAn:lVisible    := .T.
			EndIf
		ElseIf SubStr( cCod, 4, 3 ) == "RIS"
			oBtnIncId:lVisible    := .F.
			oBtnAltId:lVisible    := .F.
			oBtnExcId:lVisible    := .F.
			oBtnIncFu:lVisible     := .F.
			oBtnIncTa:lVisible    := .F.
			oBtnAltFu:lVisible    := .F.
			oBtnAltTa:lVisible    := .F.
			oBtnExcFu:lVisible    := .F.
			oBtnExcTa:lVisible    := .F.
			If lCodAmb
				oBtnIncRi:lVisible := .F.
				oBtnAltRi:lVisible := .T.
				oBtnExcRi:lVisible := .T.
				oBtnRelRi:lVisible := .T.
			EndIf
			If lOHSAS
				oBtnIncPe:lVisible    := .F.
				oBtnAltPe:lVisible    := .F.
				oBtnExcPe:lVisible    := .F.
				oBtnVerAn:lVisible    := .F.
				oBtnIncAn:lVisible    := .F.
				oBtnAltAn:lVisible    := .F.
				oBtnExcAn:lVisible    := .F.
			EndIf

		Else

			oBtnVis:lVisible    := .F.
			oBtnIncId:lVisible  := .F.
			oBtnAltId:lVisible  := .F.
			oBtnExcId:lVisible  := .F.
			If nMod902 == 19
				oBtnROS:lVisible    := .F.
				oBtnImpOs:lVisible   := .F.
				oBtnIOSPr:lVisible  := .F.
				oBtnIOSCo:lVisible  := .F.
				oBtnIncBem:lVisible := .F.
				oBtnImpBem:lVisible := .F.
				oBtnExcBem:lVisible := .F.
				oBtnIncSS:lVisible   := .F.
				oBtnDSS:lVisible  := .F.
				oBtnExcSS:lVisible   := .F.
				oBtnAltSS:lVisible   := .F.
				oBtnGerOs:lVisible   := .F.
				oBtnFinSS:lVisible   := .F.
			ElseIf nMod902 == 35
				oBtnIncFu:lVisible := .F.
				oBtnIncTa:lVisible := .F.
				oBtnAltFu:lVisible := .F.
				oBtnAltTa:lVisible := .F.
				oBtnExcFu:lVisible := .F.
				oBtnExcTa:lVisible := .F.
				If lCodAmb
					oBtnIncRi:lVisible := .F.
				EndIf
				If lOHSAS
					oBtnIncPe:lVisible := .F.
					oBtnAltPe:lVisible := .F.
					oBtnExcPe:lVisible := .F.
					oBtnVerAn:lVisible := .F.
					oBtnIncAn:lVisible := .F.
					oBtnAltAn:lVisible := .F.
					oBtnExcAn:lVisible := .F.
				EndIf

			EndIf

		EndIf

	Else

		If SubStr( cCod, 4, 3 ) == "RES"

			If SgaIsTemp(cCod)

				oBtnIncOc:cToolTip := oBtnIncOc:cToolTip + CRLF + STR0253
				oBtnIncOc:Disable()

				oBtnInFMR:cToolTip := oBtnInFMR:cToolTip + CRLF + STR0253
				oBtnInFMR:Disable()

			Else

				oBtnIncOc:Enable()
				If (nPosQuebra := At(CRLF, oBtnIncOc:cToolTip)) > 0
					oBtnIncOc:cToolTip := SubStr(oBtnIncOc:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnInFMR:Enable()
				If (nPosQuebra := At(CRLF, oBtnInFMR:cToolTip)) > 0
					oBtnInFMR:cToolTip := SubStr(oBtnInFMR:cToolTip, 1, nPosQuebra-1)
				EndIf

			EndIf

			oBtnVis:lVisible     := .T.
			oBtnRel:lVisible     := .T.
			oBtnIncOc:lVisible   := .T.
			oBtnInFMR:lVisible   := .T.


			oBtnIncId:lVisible   := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncRe:lVisible   := .F.
			oBtnVinRes:lVisible  := .F.
			oBtnViOco:lVisible   := .F.
			oBtnViFMR:lVisible   := .F.
			oBtnAlFMR:lVisible   := .F.

      		//ASPECTO
			oBtnInAsp:lVisible   := .F.
			oBtnAlAsp:lVisible   := .F.
			oBtnExAsp:lVisible   := .F.
			oBtnApDes:lVisible   := .F.
			oBtnCpAsp:lVisible   := .F.
			oBtnViAsp:lVisible   := .F.
			oBtnVinAsp:lVisible  := .F.
			oBtnIncDes:lVisible   := .F.
			oBtnVisDes:lVisible   := .F.
			oBtnAltDes:lVisible   := .F.
			oBtnExcDes:lVisible   := .F.

         	//PLANO
			oBtnAlPla:lVisible    := .F.
			oBtnViPla:lVisible    := .F.
			oBtnExPla:lVisible    := .F.
			oBtnInOPE:lVisible    := .F.
			oBtnAlOPE:lVisible    := .F.
			oBtnViOPE:lVisible    := .F.
			oBtnExOPE:lVisible    := .F.
			oBtnVinPla:lVisible  := .F.
			oBtnInPla:lVisible   := .F.
			oBtnRespOco:lVisible := .F.
			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

			oBtnVisRes:lVisible  := .T.
			oBtnAltRe:lVisible   := .T.
			oBtnExcRe:lVisible   := .T.

			If lSitNiv
				oBtnAtvIna:lVisible  := .F.
			EndIf

		ElseIf SubStr( cCod, 4, 3 ) == "ORS"

			oBtnIncId:lVisible   := .F.
			oBtnVisRes:lVisible  := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncRe:lVisible   := .F.
			oBtnVinRes:lVisible  := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.
			oBtnIncOc:lVisible   := .F.
			oBtnRel:lVisible     := .T.
			oBtnInFMR:lVisible   := .F.
			oBtnViFMR:lVisible   := .F.
			oBtnAlFMR:lVisible   := .F.

      		//ASPECTO
			oBtnInAsp:lVisible    := .F.
			oBtnAlAsp:lVisible    := .F.
			oBtnExAsp:lVisible    := .F.
			oBtnApDes:lVisible    := .F.
			oBtnCpAsp:lVisible    := .F.
			oBtnViAsp:lVisible    := .F.
			oBtnVinAsp:lVisible   := .F.
			oBtnIncDes:lVisible   := .F.
			oBtnVisDes:lVisible   := .F.
			oBtnAltDes:lVisible   := .F.
			oBtnExcDes:lVisible   := .F.

         	//PLANO
			oBtnInPla:lVisible   := .F.
			oBtnAlPla:lVisible   := .F.
			oBtnViPla:lVisible   := .F.
			oBtnExPla:lVisible   := .F.
			oBtnInOPE:lVisible   := .F.
			oBtnAlOPE:lVisible   := .F.
			oBtnViOPE:lVisible   := .F.
			oBtnExOPE:lVisible   := .F.
			oBtnVinPla:lVisible  := .F.
			oBtnRespOco:lVisible := .F.
			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

			oBtnViOco:lVisible   := .T.

			If lSitNiv
				oBtnAtvIna:lVisible  := .F.
			EndIf

		ElseIf SubStr( cCod, 4, 2 ) == "FM"

			oBtnViFMR:lVisible   := .T.

			If SubStr( cCod, 4, 3 ) == "FM4"
				oBtnAlFMR:cToolTip := "Conformidade FMR"
				oBtnAlFMR:Enable()
			Else
				oBtnAlFMR:Enable()
				If (nPosQuebra := At("C", oBtnAlFMR:cToolTip)) > 0
					oBtnAlFMR:cToolTip := SubStr(oBtnAlFMR:cToolTip, 1, nPosQuebra-1)
					oBtnAlFMR:cToolTip := STR0312
				EndIf

			EndIf
			oBtnAlFMR:lVisible   := .T.

			oBtnIncId:lVisible   := .F.
			oBtnVisRes:lVisible  := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncRe:lVisible   := .F.
			oBtnVinRes:lVisible  := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.
			oBtnIncOc:lVisible   := .F.
			oBtnRel:lVisible     := .T.
			oBtnInFMR:lVisible   := .F.
			oBtnViOco:lVisible   := .F.

      		//ASPECTO
			oBtnInAsp:lVisible    := .F.
			oBtnAlAsp:lVisible    := .F.
			oBtnExAsp:lVisible    := .F.
			oBtnApDes:lVisible    := .F.
			oBtnCpAsp:lVisible    := .F.
			oBtnViAsp:lVisible    := .F.
			oBtnVinAsp:lVisible   := .F.
			oBtnIncDes:lVisible   := .F.
			oBtnVisDes:lVisible   := .F.
			oBtnAltDes:lVisible   := .F.
			oBtnExcDes:lVisible   := .F.

         	//PLANO
			oBtnInPla:lVisible   := .F.
			oBtnAlPla:lVisible   := .F.
			oBtnViPla:lVisible   := .F.
			oBtnExPla:lVisible   := .F.
			oBtnInOPE:lVisible   := .F.
			oBtnAlOPE:lVisible   := .F.
			oBtnViOPE:lVisible   := .F.
			oBtnExOPE:lVisible   := .F.
			oBtnVinPla:lVisible  := .F.
			oBtnRespOco:lVisible := .F.
			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

			If lSitNiv
				oBtnAtvIna:lVisible  := .F.
			EndIf

		ElseIf SubStr( cCod, 4, 3 ) == "ASP"

			oBtnIncId:lVisible   := .F.
			oBtnVisRes:lVisible  := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncRe:lVisible   := .F.
			oBtnVinRes:lVisible  := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.
			oBtnIncOc:lVisible   := .F.
			oBtnInFMR:lVisible   := .F.
			oBtnViFMR:lVisible   := .F.
			oBtnAlFMR:lVisible   := .F.
			oBtnRel:lVisible     := .T.

      		//ASPECTO
			oBtnInAsp:lVisible    := .F.
			oBtnVinAsp:lVisible   := .F.
			oBtnVisDes:lVisible   := .F.
			oBtnAltDes:lVisible   := .F.
			oBtnExcDes:lVisible   := .F.
			oBtnAlAsp:lVisible    := .T.
			oBtnExAsp:lVisible    := .T.
			oBtnApDes:lVisible    := .T.
			oBtnCpAsp:lVisible    := .T.
			oBtnViAsp:lVisible    := .T.
			oBtnIncDes:lVisible   := .T.

			If SgaIsTemp(cCod)

				oBtnIncDes:cToolTip := oBtnIncDes:cToolTip + CRLF + STR0253
				oBtnIncDes:Disable()

				oBtnApDes:cToolTip := oBtnApDes:cToolTip + CRLF + STR0253
				oBtnApDes:Disable()

				oBtnCpAsp:cToolTip := oBtnCpAsp:cToolTip + CRLF + STR0253
				oBtnCpAsp:Disable()

			Else

				oBtnIncDes:Enable()
				If (nPosQuebra := At(CRLF, oBtnIncDes:cToolTip)) > 0
					oBtnIncDes:cToolTip := SubStr(oBtnIncDes:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnApDes:Enable()
				If (nPosQuebra := At(CRLF, oBtnApDes:cToolTip)) > 0
					oBtnApDes:cToolTip := SubStr(oBtnApDes:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnCpAsp:Enable()
				If (nPosQuebra := At(CRLF, oBtnCpAsp:cToolTip)) > 0
					oBtnCpAsp:cToolTip := SubStr(oBtnCpAsp:cToolTip, 1, nPosQuebra-1)
				EndIf

			EndIf

         	//PLANO
			oBtnAlPla:lVisible   := .F.
			oBtnViPla:lVisible   := .F.
			oBtnExPla:lVisible   := .F.
			oBtnInOPE:lVisible   := .F.
			oBtnAlOPE:lVisible   := .F.
			oBtnViOPE:lVisible   := .F.
			oBtnExOPE:lVisible   := .F.
			oBtnVinPla:lVisible  := .F.
			oBtnInPla:lVisible   := .F.
			oBtnRespOco:lVisible := .F.
			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

			oBtnViOco:lVisible   := .F.
			If lSitNiv
				oBtnAtvIna:lVisible  := .F.
			EndIf

		ElseIf SubStr( cCod, 4, 3 ) == "DES"

			oBtnIncId:lVisible   := .F.
			oBtnVisRes:lVisible  := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncRe:lVisible   := .F.
			oBtnVinRes:lVisible  := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.
			oBtnIncOc:lVisible   := .F.
			oBtnInFMR:lVisible   := .F.
			oBtnViFMR:lVisible   := .F.
			oBtnAlFMR:lVisible   := .F.
			oBtnRel:lVisible     := .F.

      		//ASPECTO
			oBtnInAsp:lVisible    := .F.
			oBtnVinAsp:lVisible   := .F.
			oBtnAlAsp:lVisible    := .F.
			oBtnExAsp:lVisible    := .F.
			oBtnApDes:lVisible    := .F.
			oBtnCpAsp:lVisible    := .F.
			oBtnViAsp:lVisible    := .F.
			oBtnIncDes:lVisible   := .F.
			oBtnVisDes:lVisible   := .T.
			oBtnAltDes:lVisible   := .T.
			oBtnExcDes:lVisible   := .T.

         	//PLANO
			oBtnAlPla:lVisible   := .F.
			oBtnViPla:lVisible   := .F.
			oBtnExPla:lVisible   := .F.
			oBtnInOPE:lVisible   := .F.
			oBtnAlOPE:lVisible   := .F.
			oBtnViOPE:lVisible   := .F.
			oBtnExOPE:lVisible   := .F.
			oBtnVinPla:lVisible  := .F.
			oBtnInPla:lVisible   := .F.
			oBtnRespOco:lVisible := .F.
			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

			oBtnViOco:lVisible   := .F.
			If lSitNiv
				oBtnAtvIna:lVisible  := .F.
			EndIf

		ElseIf SubStr( cCod, 4, 3 ) == "PLE"

			oBtnIncId:lVisible   := .F.
			oBtnVisRes:lVisible  := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncRe:lVisible   := .F.
			oBtnVinRes:lVisible  := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.
			oBtnIncOc:lVisible   := .F.
			oBtnInFMR:lVisible   := .F.
			oBtnViFMR:lVisible   := .F.
			oBtnAlFMR:lVisible   := .F.
			oBtnRel:lVisible     := .T.

      		//ASPECTO
			oBtnInAsp:lVisible    := .F.
			oBtnVinAsp:lVisible   := .F.
			oBtnAlAsp:lVisible    := .F.
			oBtnExAsp:lVisible    := .F.
			oBtnApDes:lVisible    := .F.
			oBtnCpAsp:lVisible    := .F.
			oBtnViAsp:lVisible    := .F.
			oBtnIncDes:lVisible   := .F.
			oBtnVisDes:lVisible   := .F.
			oBtnAltDes:lVisible   := .F.
			oBtnExcDes:lVisible   := .F.

         	//PLANO
			oBtnViPla:lVisible    := .T.
			oBtnAlPla:lVisible    := .T.
			oBtnExPla:lVisible    := .T.
			oBtnInOPE:lVisible    := .T.
			oBtnRetSimu:lVisible  := .T.
			oBtnConSimu:lVisible  := .T.

			If SgaIsTemp(cCod)

				oBtnInOPE:cToolTip := oBtnInOPE:cToolTip + CRLF + STR0253
				oBtnInOPE:Disable()

				oBtnRetSimu:cToolTip := oBtnRetSimu:cToolTip + CRLF + STR0253
				oBtnRetSimu:Disable()

				oBtnConSimu:cToolTip := oBtnConSimu:cToolTip + CRLF + STR0253
				oBtnConSimu:Disable()

			Else

				oBtnConSimu:Enable()
				If (nPosQuebra := At(CRLF, oBtnConSimu:cToolTip)) > 0
					oBtnConSimu:cToolTip := SubStr(oBtnConSimu:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnRetSimu:Enable()
				If (nPosQuebra := At(CRLF, oBtnRetSimu:cToolTip)) > 0
					oBtnRetSimu:cToolTip := SubStr(oBtnRetSimu:cToolTip, 1, nPosQuebra-1)
				EndIf

				oBtnInOPE:Enable()
				If (nPosQuebra := At(CRLF, oBtnInOPE:cToolTip)) > 0
					oBtnInOPE:cToolTip := SubStr(oBtnInOPE:cToolTip, 1, nPosQuebra-1)
				EndIf

			EndIf

			oBtnAlOPE:lVisible   := .F.
			oBtnViOPE:lVisible   := .F.
			oBtnExOPE:lVisible   := .F.
			oBtnVinPla:lVisible  := .F.
			oBtnInPla:lVisible   := .F.
			oBtnRespOco:lVisible := .F.

			oBtnViOco:lVisible   := .F.

			If lSitNiv
				oBtnAtvIna:lVisible  := .F.
			EndIf

		ElseIf SubStr( cCod, 4, 3 ) == "OPE"

			oBtnIncId:lVisible   := .F.
			oBtnVisRes:lVisible  := .F.
			oBtnAltId:lVisible   := .F.
			oBtnExcId:lVisible   := .F.
			oBtnIncRe:lVisible   := .F.
			oBtnVinRes:lVisible  := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.
			oBtnIncOc:lVisible   := .F.
			oBtnInFMR:lVisible   := .F.
			oBtnViFMR:lVisible   := .F.
			oBtnAlFMR:lVisible   := .F.
			oBtnRel:lVisible     := .T.

      		//ASPECTO
			oBtnInAsp:lVisible    := .F.
			oBtnVinAsp:lVisible   := .F.
			oBtnAlAsp:lVisible    := .F.
			oBtnExAsp:lVisible    := .F.
			oBtnApDes:lVisible    := .F.
			oBtnCpAsp:lVisible    := .F.
			oBtnViAsp:lVisible    := .F.
			oBtnIncDes:lVisible   := .F.
			oBtnVisDes:lVisible   := .F.
			oBtnAltDes:lVisible   := .F.
			oBtnExcDes:lVisible   := .F.

         	//PLANO
			oBtnRespOco:lVisible := .T.
			oBtnExOPE:lVisible   := .T.

			oBtnAlPla:lVisible   := .F.
			oBtnViPla:lVisible   := .F.
			oBtnExPla:lVisible   := .F.
			oBtnInOPE:lVisible   := .F.
			oBtnViOPE:lVisible   := .T.
			oBtnAlOPE:lVisible   := .T.
			oBtnVinPla:lVisible  := .F.
			oBtnInPla:lVisible   := .F.
			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

			oBtnViOco:lVisible   := .F.
			If lSitNiv
				oBtnAtvIna:lVisible  := .F.
			EndIf

		Else

			oBtnVis:lVisible    := .F.
			oBtnIncId:lVisible  := .F.
			oBtnAltId:lVisible  := .F.
			oBtnExcId:lVisible  := .F.

			oBtnIncRe:lVisible   := .F.
			oBtnAltRe:lVisible   := .F.
			oBtnExcRe:lVisible   := .F.

			oBtnInAsp:lVisible   := .F.
			oBtnAlAsp:lVisible   := .F.
			oBtnExAsp:lVisible   := .F.
			oBtnApDes:lVisible   := .F.
			oBtnCpAsp:lVisible   := .F.
			oBtnViAsp:lVisible   := .F.
			oBtnIncDes:lVisible  := .F.

			oBtnAlPla:lVisible   := .F.
			oBtnViPla:lVisible   := .F.
			oBtnExPla:lVisible   := .F.
			oBtnInOPE:lVisible   := .F.
			oBtnAlOPE:lVisible   := .F.
			oBtnViOPE:lVisible   := .F.
			oBtnExOPE:lVisible   := .F.
			oBtnVinPla:lVisible  := .F.
			oBtnInPla:lVisible   := .F.
			oBtnRespOco:lVisible := .F.

			oBtnConSimu:lVisible := .F.
			oBtnRetSimu:lVisible := .F.

		EndIf
	EndIf

	If nMV1 == 1

		If nMod902 == 19
			bVrfMod := {|| !Empty(TAF->TAF_MODMNT) }
		ElseIf nMod902 == 35
			bVrfMod := {|| !Empty(TAF->TAF_MODMDT) }
		ElseIf nMod902 == 56
			bVrfMod := {|| !Empty(TAF->TAF_MODSGA) }
		EndIf

		aTree 	:= {}
		cCod 	:= SubStr( cCod, 1, 3 )

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+cCod+cFilAnt)
			aAdd(aTree,{(cTRBSGA)->CODPRO,(cTRBSGA)->TIPO,(cTRBSGA)->CODTIPO,AllTrim((cTRBSGA)->CARGO),(cTRBSGA)->NIVSUP})
			aSize(aTree,Len(aTree))
		EndIf

		If lByOpt
			aDados := fRunSP(cCod,aTree[1][4],aTree[1][5],AllTrim(aTree[1][3]))
			nBens  := aDados[1]
			nIdent := aDados[2]
			nVerm  := aDados[3]
			nVerde := aDados[4]
			nAmar  := aDados[5]
			nSSD   := aDados[6]
			nSSA   := aDados[7]
			nSSM   := aDados[8]

			oLastLoad:SetText(STR0335 + DTOC(dDataBase)+" - "+Substr(Time(),1,5)) // // "Legendas atualizadas em: "
			oLastLoad:CtrlRefresh()
		EndIf

		k:= 1
		While k <= Len(aTree) .And. !lByOpt
			nPos := aScan(aItensCar, {|x| x == aTree[k][1]+aTree[k][4]+cFilAnt})

			If nPos > 0
				dbSelectArea(cTRBSGA)
				dbSetOrder(1)
				dbSeek(cCodEst+aTree[k][1]+cFilAnt)
				While !EoF() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == aTree[k][1] .And. (cTRBSGA)->FILIAL == cFilAnt

					If !Empty((cTRBSGA)->DELETADO)
						(cTRBSGA)->(dbSkip())
						Loop
					EndIf

					cCargoTmp := SUBSTR((cTRBSGA)->CARGO,1,3)

					If cCargoTmp == "LOC"
						Eval(bAttTree)
						nIdent += 1

					ElseIf nMod902 <> 56

						If cCargoTmp == "BEM"
							Eval(bAttTree)
							nBens += 1

						ElseIf cCargoTmp == "OSV"
							nVerde += 1

						ElseIf cCargoTmp == "OSM"
							nVerm += 1

						ElseIf cCargoTmp == "OSA"
							nAmar += 1

						ElseIf cCargoTmp == "SSM"
							Eval(bAttTree)
							nSSM += 1

						ElseIf cCargoTmp == "SSA"
							Eval(bAttTree)
							nSSA += 1

						ElseIf cCargoTmp == "SSD"
							Eval(bAttTree)
							nSSD += 1

						ElseIf cCargoTmp == "FUN"
							Eval(bAttTree)
							nFunc += 1

						ElseIf cCargoTmp == "TAR"
							Eval(bAttTree)
							nTare += 1

						ElseIf cCargoTmp == "RIS"
							Eval(bAttTree)
							nRisc += 1

						ElseIf cCargoTmp == "PER" .And. lOHSAS
							Eval(bAttTree)
							nPeri += 1

							If (nPosPer := aScan( aPerigos , { | x |  x[1] == (cTRBSGA)->NIVSUP } ) ) > 0
								aAdd( aPerigos[ nPosPer , 2 ] , (cTRBSGA)->CODTIPO )
							Else
								aAdd( aPerigos , { (cTRBSGA)->NIVSUP , { (cTRBSGA)->CODTIPO } } )
							EndIf

						ElseIf cCargoTmp == "DAN" .And. lOHSAS
							Eval(bAttTree)
							nDano += 1
							If (nPosDan := aScan( aDanos , { | x |  x[1] == (cTRBSGA)->NIVSUP } ) ) > 0
								aAdd( aDanos[ nPosDan , 2 ] , (cTRBSGA)->CODTIPO )
							Else
								aAdd( aDanos , { (cTRBSGA)->NIVSUP , { (cTRBSGA)->CODTIPO } } )
							EndIf

						EndIf

					Else

						If cCargoTmp == "RES"
							Eval(bAttTree)
							nLgRes += 1

						ElseIf cCargoTmp == "ORS"
							Eval(bAttTree)
							nLgOcR += 1

						ElseIf cCargoTmp == "ASP"
							Eval(bAttTree)
							nLgAsp += 1

						ElseIf cCargoTmp == "DES"
							Eval(bAttTree)
							nLgDes += 1

						ElseIf cCargoTmp == "PLE"
							Eval(bAttTree)
							nLgPla += 1

						ElseIf cCargoTmp == "OPE"
							Eval(bAttTree)
							nLgOPE += 1

						ElseIf cCargoTmp == "FM1"
							Eval(bAttTree)
							nLgFMRPC += 1

						ElseIf cCargoTmp == "FM2"
							Eval(bAttTree)
							nLgFMRAP += 1

						ElseIf cCargoTmp == "FM3"
							Eval(bAttTree)
							nLgFMRAR += 1

						ElseIf cCargoTmp == "FM4"
							Eval(bAttTree)
							nLgFMRNC += 1

						ElseIf cCargoTmp == "FM6"
							Eval(bAttTree)
							nLgFMRRB += 1
						EndIf

					EndIf

					(cTRBSGA)->(dbSkip())
				End
			Else
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				If dbSeek(cCodEst+aTree[k][1]+cFilAnt)
					dbSelectArea("TAF")
					dbSetOrder(2)
					If dbSeek(xFilial("TAF")+cCodEst+aTree[k][1])
						If !NGValidTUA()
							k++
							Loop
						EndIf
					EndIf
					If Empty((cTRBSGA)->DELETADO)
						If (cTRBSGA)->TIPO == '2'//Localizacao
							If nMod902 <> 56
                     			//Se pode visualizar O.S.
								If MNT902REST(aTree[k][1],"O","V")

                        			//O.S. Verde
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'L' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI >= '"+DTOS(dDataBase)+"' "
									cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][1]+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nVerde += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//O.S. Vermelha
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'L' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND '" + dToS(dDataBase) + cTime + "' > TJ_DTMPFIM || TJ_HOMPFIM "
									cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][1]+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nVerm += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//O.S. Amarela
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = STJ.TJ_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'L' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI < '"+DTOS(dDataBase)+"' "
									cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][1]+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nAmar += (cAliasQry)->nCount
										nVerm -= (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())
								EndIf

                     			//Se pode visualizar S.S.
								If MNT902REST(aTree[k][1],"S","V")
                        			//S.S. Distribuida
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
									cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'L' AND TQB.TQB_SOLUCA = 'D' "
									cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][1]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nSSD += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//S.S. Aguardando analise
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
									cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'L' AND TQB.TQB_SOLUCA = 'A' "
									cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][1]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nSSA += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//S.S. com Motivo de Atraso
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
									If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
										cQuery += " JOIN "+RetSqlName("TT7")+" TT7 ON (TT7.TT7_FILIAL = '"+xFilial("TT7")+"' AND TT7.TT7_SOLICI = TQB.TQB_SOLICI "
										cQuery += " AND TT7.D_E_L_E_T_ <> '*' ) "
										cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TT7.TT7_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
									Else
										cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TQB.TQB_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
									EndIf
									cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'L' "
									cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][1]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nSSM += (cAliasQry)->nCount
										nSSD -= (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())
								EndIf

								If lOHSAS
									cAliasQry := GetNextAlias()
									cQuery := " SELECT TG9_CODPER AS CODPER, TG9_CODEST AS CODEST, TG9_CODNIV AS CODNIV FROM "+RetSqlName("TG9")+" TG9 "
									cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
									cQuery += " TG9.TG9_CODNIV = " + ValToSql(aTree[k][1])
									cQuery += " AND TG9.D_E_L_E_T_ <> '*'
									If(nPos := aScan( aPerigos , { | x | x[1] == (cTRBSGA)->NIVSUP  } )) > 0
                           				//For nPer := 1 To Len( aPerigos[ nPos , 2 ] )
                              				//cQuery += " AND TG9.TG9_CODPER <> "+ValToSQl( aPerigos[ nPos , 2 , nPer ] )
										cQuery += " AND TG9.TG9_CODNIV <> "+ValToSQl( aPerigos[ nPos , 1 ] )
                           				//Next nPer
									EndIf
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									While (cAliasQry)->(!EoF())
										nPeri++
										dbSelectArea( "TG6" )
										dbSetOrder( 5 )
										If dbSeek( xFilial( "TG6" ) + (cAliasQry)->CODEST + (cAliasQry)->CODNIV + (cAliasQry)->CODPER )
											While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
													TG6->TG6_CODEST == (cAliasQry)->CODEST .And. TG6->TG6_CODNIV == (cAliasQry)->CODNIV .And. ;
													TG6->TG6_CODPER == (cAliasQry)->CODPER
												nDano++
												TG6->( dbSkip() )
											End
										EndIf
										(cAliasQry)->(dbSkip())
									End
									(cAliasQry)->(dbCloseArea())
								EndIf

							Else

                     			// Resíduo
								cAliasQry := GetNextAlias()
								cQuery := " SELECT TAV_CODRES AS CODRES, TAV_CODEST AS CODEST, TAV_CODNIV AS CODNIV, COUNT(DISTINCT TBJ.TBJ_CODOCO) AS QTDOCR"
								cQuery += " FROM "+RetSqlName("TAV")+" TAV "

								cQuery += " LEFT JOIN "+RetSqlName("TB0")+" TB0 ON "
								cQuery += "    TB0.TB0_FILIAL = " + ValToSql(xFilial("TB0")) + " AND TB0.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TB0.TB0_CODRES = TAV.TAV_CODRES AND "
								cQuery += "    TB0.TB0_QTDE > TB0.TB0_QTDRED "

								cQuery += " LEFT JOIN "+RetSqlName("TBJ")+" TBJ ON "
								cQuery += "    TBJ.TBJ_FILIAL = " + ValToSql(xFilial("TBJ")) + " AND TBJ.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TB0.TB0_CODOCO = TBJ.TBJ_CODOCO AND "
								cQuery += "    TBJ.TBJ_CODEST = TAV.TAV_CODEST AND "
								cQuery += "    TBJ.TBJ_CODNIV = TAV.TAV_CODNIV "

								cQuery += " WHERE "
								cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
								cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
								cQuery += "    TAV.TAV_CODNIV = " + ValToSql(aTree[k][1])
								cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"
								cQuery += " GROUP BY TAV.TAV_CODRES,TAV.TAV_CODEST, TAV.TAV_CODNIV"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								While (cAliasQry)->(!EoF())
									nLgRes++
									nLgOcR += (cAliasQry)->QTDOCR
									(cAliasQry)->(dbSkip())
								End
								(cAliasQry)->(dbCloseArea())

                     			//Aspecto
								cAliasQry := GetNextAlias()
								cQuery := " SELECT TAG_CODASP AS CODASP, TAG_CODEST AS CODEST, TAG_CODNIV AS CODNIV, COUNT(DISTINCT TAB.TAB_ORDEM) AS QTDDES"
								cQuery += " FROM "+RetSqlName("TAG")+" TAG "

								cQuery += " INNER JOIN "+RetSqlName("TA4")+" TA4 ON "
								cQuery += "    TA4.TA4_FILIAL = " + ValToSql(xFilial("TA4")) + " AND TA4.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TA4.TA4_CODASP = TAG.TAG_CODASP"

								cQuery += " LEFT JOIN "+RetSqlName("TAB")+" TAB ON "
								cQuery += "    TAB.TAB_FILIAL = " + ValToSql(xFilial("TAB")) + " AND TAB.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TAB.TAB_SITUAC = '1' AND "
								cQuery += "    TA4.TA4_CODASP = TAB.TAB_CODASP AND "
								cQuery += "    TAB.TAB_CODEST = TAG.TAG_CODEST AND "
								cQuery += "    TAB.TAB_CODNIV = TAG.TAG_CODNIV "

								cQuery += " WHERE "
								cQuery += "    TAG.TAG_FILIAL = " + ValToSql(xFilial("TAG")) + " AND "
								cQuery += "    TAG.TAG_CODEST = " + ValToSql(cCodEst) + " AND "
								cQuery += "    TAG.TAG_CODNIV = " + ValToSql(aTree[k][1])
								cQuery += "    AND TAG.D_E_L_E_T_ <> '*'"
								cQuery += " GROUP BY TAG.TAG_CODASP,TAG.TAG_CODEST, TAG.TAG_CODNIV"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								While (cAliasQry)->(!EoF())
									nLgAsp++
									nLgDes += (cAliasQry)->QTDDES
									(cAliasQry)->(dbSkip())
								End
								(cAliasQry)->(dbCloseArea())

                     			//Plano emergencial
								cAliasQry := GetNextAlias()
								cQuery := " SELECT TBC_CODPLA AS CODPLA, TBC_CODEST AS CODEST, TBC_CODNIV AS CODNIV, COUNT(DISTINCT TC1.TC1_CODOCO) AS QTDOPE"
								cQuery += " FROM "+RetSqlName("TBC")+" TBC "

								cQuery += " INNER JOIN "+RetSqlName("TBB")+" TBB ON "
								cQuery += "    TBB.TBB_FILIAL = " + ValToSql(xFilial("TBB")) + " AND TBB.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TBB.TBB_CODPLA = TBC.TBC_CODPLA"

								cQuery += " LEFT JOIN "+RetSqlName("TC1")+" TC1 ON "
								cQuery += "    TC1.TC1_FILIAL = " + ValToSql(xFilial("TC1")) + " AND TC1.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TBB.TBB_CODPLA = TC1.TC1_CODPLA AND "
								cQuery += "    TC1.TC1_CODEST = TBC.TBC_CODEST AND "
								cQuery += "    TC1.TC1_NIVSUP = TBC.TBC_CODNIV AND "
								cQuery += "    ( SELECT COUNT(TC3_CODOCO) FROM "+RetSqlName("TC3")+" TC3 "
								cQuery += "       WHERE "
								cQuery += "       TC3.TC3_FILIAL = " + ValToSql(xFilial("TC3")) + " AND TC3.D_E_L_E_T_ <> '*' AND "
								cQuery += "       TC3.TC3_CODOCO = TC1.TC1_CODOCO AND "
								cQuery += "       TC3.TC3_OK <> '' ) = 0 "

								cQuery += " LEFT JOIN "+RetSqlName("TBV")+" TBV ON "
								cQuery += "    TBV.TBV_FILIAL = " + ValToSql(xFilial("TBV")) + " AND TBV.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TBV.TBV_CODOCO = TC1.TC1_CODOCO"

								cQuery += " WHERE "
								cQuery += "    TBC.TBC_FILIAL = " + ValToSql(xFilial("TBC")) + " AND "
								cQuery += "    TBC.TBC_CODEST = " + ValToSql(cCodEst) + " AND "
								cQuery += "    TBC.TBC_CODNIV = " + ValToSql(aTree[k][1])
								cQuery += "    AND TBC.D_E_L_E_T_ <> '*'"
								cQuery += " GROUP BY TBC.TBC_CODPLA,TBC.TBC_CODEST, TBC.TBC_CODNIV"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								While (cAliasQry)->(!EoF())
									nLgPla++
									nLgOPE += (cAliasQry)->QTDOPE
									(cAliasQry)->(dbSkip())
								End
								(cAliasQry)->(dbCloseArea())

                     			// FMRs
								cAliasQry := GetNextAlias()
								cQuery := " SELECT TAV_CODRES AS CODRES, TAV_CODEST AS CODEST, TAV_CODNIV AS CODNIV, TDC.TDC_STATUS STATUS, COUNT(DISTINCT TDC.TDC_CODFMR) AS QTDFMR"
								cQuery += " FROM "+RetSqlName("TAV")+" TAV "

								cQuery += " INNER JOIN "+RetSqlName("TDC")+" TDC ON "
								cQuery += "    TDC.TDC_FILIAL = " + ValToSql(xFilial("TDC")) + " AND TDC.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TDC.TDC_CODRES = TAV.TAV_CODRES AND "
								cQuery += "    TDC.TDC_DEPTO  = TAV.TAV_CODNIV AND "
								cQuery += "    TDC.TDC_STATUS <> 5 AND "
								cQuery += "    TDC.TDC_STATUS <> 7 "

								cQuery += " WHERE "
								cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
								cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
								cQuery += "    TAV.TAV_CODNIV = " + ValToSql(aTree[k][1])
								cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"
								cQuery += " GROUP BY TAV.TAV_CODRES,TAV.TAV_CODEST, TAV.TAV_CODNIV, TDC.TDC_STATUS"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								While (cAliasQry)->(!EoF())
									If (cAliasQry)->STATUS == "1"
										nLgFMRPC += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "2"
										nLgFMRAP += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "3"
										nLgFMRAR += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "4"
										nLgFMRNC += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "6"
										nLgFMRRB += (cAliasQry)->QTDFMR
									EndIf
									(cAliasQry)->(dbSkip())
								End
								(cAliasQry)->(dbCloseArea())

							EndIf

						ElseIf nMod902 <> 56

							If (cTRBSGA)->TIPO == '1'//Bem

                     			//Se pode visualizar O.S.
								If MNT902REST(aTree[k][1],"O","V")
                        			//O.S. Verde
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'B' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI >= '"+DTOS(dDataBase)+"' "
									cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][3]+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nVerde += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//O.S. Vermelha
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'B' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND '" + dToS(dDataBase) + cTime + "' > TJ_DTMPFIM || TJ_HOMPFIM "
									cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][3]+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nVerm += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//O.S. Amarela
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = STJ.TJ_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'B' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI < '"+DTOS(dDataBase)+"' "
									cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][3]+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nAmar += (cAliasQry)->nCount
										nVerm -= (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())
								EndIf

                     			//Se pode visualizar S.S.
								If MNT902REST(aTree[k][1],"S","V")
                        			//S.S. Distribuida
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
									cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'B' AND TQB.TQB_SOLUCA = 'D' "
									cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][3]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nSSD += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//S.S. Aguardando analise
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
									cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'B' AND TQB.TQB_SOLUCA = 'A' "
									cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][3]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nSSA += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//S.S. com Motivo de Atraso
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
									If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
										cQuery += " JOIN "+RetSqlName("TT7")+" TT7 ON (TT7.TT7_FILIAL = '"+xFilial("TT7")+"' AND TT7.TT7_SOLICI = TQB.TQB_SOLICI "
										cQuery += " AND TT7.D_E_L_E_T_ <> '*' ) "
										cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TT7.TT7_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
									Else
										cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TQB.TQB_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
									EndIf
									cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'B' "
									cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][3]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nSSM += (cAliasQry)->nCount
										nSSD -= (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())
								EndIf

							ElseIf (cTRBSGA)->TIPO == '5'//Solicitacao

                     			//Se pode visualizar O.S.
								If MNT902REST((cTRBSGA)->NIVSUP,"O","V")
                        			//O.S. Verde
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
										cQuery += " JOIN "+RetSqlName("TT7")+" TT7 ON (TT7.TT7_FILIAL = '"+xFilial("TT7")+"' AND TT7.TT7_SOLICI = '"+aTree[k][3] +"' "
										cQuery += " AND TT7.TT7_ORDEM = STJ.TJ_ORDEM AND TT7.D_E_L_E_T_ <> '*' ) "
									Else
										cQuery += " JOIN "+RetSqlName("TQB")+" TQB ON (TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_SOLICI = '"+aTree[k][3] +"' "
										cQuery += " AND TQB.TQB_ORDEM = STJ.TJ_ORDEM AND TQB.D_E_L_E_T_ <> '*' ) "
									EndIf
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI >= '"+DTOS(dDataBase)+"' "
									cQuery += "    AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nVerde += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//O.S. Vermelha
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
										cQuery += " JOIN "+RetSqlName("TT7")+" TT7 ON (TT7.TT7_FILIAL = '"+xFilial("TT7")+"' AND TT7.TT7_SOLICI = '"+aTree[k][3] +"' "
										cQuery += " AND TT7.TT7_ORDEM = STJ.TJ_ORDEM AND TT7.D_E_L_E_T_ <> '*' ) "
									Else
										cQuery += " JOIN "+RetSqlName("TQB")+" TQB ON (TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_SOLICI = '"+aTree[k][3] +"' "
										cQuery += " AND TQB.TQB_ORDEM = STJ.TJ_ORDEM AND TQB.D_E_L_E_T_ <> '*' ) "
									EndIf
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI < '"+DTOS(dDataBase)+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nVerm += (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())

                        			//O.S. Amarela
									cAliasQry := GetNextAlias()
									cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
									If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
										cQuery += " JOIN "+RetSqlName("TT7")+" TT7 ON (TT7.TT7_FILIAL = '"+xFilial("TT7")+"' AND TT7.TT7_SOLICI = '"+aTree[k][3] +"' "
										cQuery += " AND TT7.TT7_ORDEM = STJ.TJ_ORDEM AND TT7.D_E_L_E_T_ <> '*' ) "
									Else
										cQuery += " JOIN "+RetSqlName("TQB")+" TQB ON (TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_SOLICI = '"+aTree[k][3] +"' "
										cQuery += " AND TQB.TQB_ORDEM = STJ.TJ_ORDEM AND TQB.D_E_L_E_T_ <> '*' ) "
									EndIf
									cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = STJ.TJ_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
									cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TERMINO = 'N' "
									cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI < '"+DTOS(dDataBase)+"' AND STJ.D_E_L_E_T_ <> '*' "
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									If !EoF()
										nAmar += (cAliasQry)->nCount
										nVerm -= (cAliasQry)->nCount
									EndIf
									(cAliasQry)->(dbCloseArea())
								EndIf

							ElseIf (cTRBSGA)->TIPO == '3'//Funcao

								If lOHSAS
									cAliasQry := GetNextAlias()
									cQuery := " SELECT TG9_CODPER AS CODPER, TG9_CODEST AS CODEST, TG9_CODNIV AS CODNIV FROM "+RetSqlName("TG9")+" TG9 "
									cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
									cQuery += " TG9.TG9_CODNIV = " + ValToSql(aTree[k][1])
									cQuery += " AND TG9.D_E_L_E_T_ <> '*' "
									If(nPos := aScan( aPerigos , { | x | x[1] == (cTRBSGA)->NIVSUP  } )) > 0
                           				//For nPer := 1 To Len( aPerigos[ nPos , 2 ] )
                              				//cQuery += " AND TG9.TG9_CODPER <> "+ValToSQl( aPerigos[ nPos , 2 , nPer ] )
										cQuery += " AND TG9.TG9_CODNIV <> "+ValToSQl( aPerigos[ nPos , 1 ] )
                           				//Next nPer
									EndIf
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									While (cAliasQry)->(!EoF())
										nPeri++
										dbSelectArea( "TG6" )
										dbSetOrder( 5 )
										If dbSeek( xFilial( "TG6" ) + (cAliasQry)->CODEST + (cAliasQry)->CODNIV + (cAliasQry)->CODPER )
											While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
													TG6->TG6_CODEST == (cAliasQry)->CODEST .And. TG6->TG6_CODNIV == (cAliasQry)->CODNIV .And. ;
													TG6->TG6_CODPER == (cAliasQry)->CODPER
												nDano++
												TG6->( dbSkip() )
											End
										EndIf
										(cAliasQry)->(dbSkip())
									End
									(cAliasQry)->(dbCloseArea())
								EndIf

							ElseIf (cTRBSGA)->TIPO == '4'//Tarefa

								If lOHSAS
									cAliasQry := GetNextAlias()
									cQuery := " SELECT TG9_CODPER AS CODPER, TG9_CODEST AS CODEST, TG9_CODNIV AS CODNIV FROM "+RetSqlName("TG9")+" TG9 "
									cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
									cQuery += " TG9.TG9_CODNIV = " + ValToSql(aTree[k][1])
									cQuery += " AND TG9.D_E_L_E_T_ <> '*' "
									If(nPos := aScan( aPerigos , { | x | x[1] == (cTRBSGA)->NIVSUP  } )) > 0
                           				//For nPer := 1 To Len( aPerigos[ nPos , 2 ] )
                              				//cQuery += " AND TG9.TG9_CODPER <> "+ValToSQl( aPerigos[ nPos , 2 , nPer ] )
										cQuery += " AND TG9.TG9_CODNIV <> "+ValToSQl( aPerigos[ nPos , 1 ] )
                           				//Next nPer
									EndIf
									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									While (cAliasQry)->(!EoF())
										nPeri++
										dbSelectArea( "TG6" )
										dbSetOrder( 5 )
										If dbSeek( xFilial( "TG6" ) + (cAliasQry)->CODEST + (cAliasQry)->CODNIV + (cAliasQry)->CODPER )
											While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
													TG6->TG6_CODEST == (cAliasQry)->CODEST .And. TG6->TG6_CODNIV == (cAliasQry)->CODNIV .And. ;
													TG6->TG6_CODPER == (cAliasQry)->CODPER
												nDano++
												TG6->( dbSkip() )
											End
										EndIf
										(cAliasQry)->(dbSkip())
									End
									(cAliasQry)->(dbCloseArea())
								EndIf

							ElseIf (cTRBSGA)->TIPO == _nPosPerigo //Perigo
								dbSelectArea( "TG6" )
								dbSetOrder( 5 )
								If dbSeek( xFilial( "TG6" ) + cCodEst + (cTRBSGA)->NIVSUP + SubStr( (cTRBSGA)->CODTIPO , 1 , Len( TG6->TG6_CODPER ) ) )
									While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
											TG6->TG6_CODEST == cCodEst .And. TG6->TG6_CODNIV == (cTRBSGA)->NIVSUP .And. ;
											TG6->TG6_CODPER == SubStr( (cTRBSGA)->CODTIPO , 1 , Len( TG6->TG6_CODPER ) )
										If aScan( aDanos , { | x | x[ 1 ] == TG6->TG6_CODNIV  } ) == 0
											nDano++
										EndIf
										TG6->( dbSkip() )
									End
								EndIf
							EndIf

						Else

							If (cTRBSGA)->TIPO == __cTpRes // Resíduo

								cAliasQry := GetNextAlias()
								cQuery := " SELECT COUNT(DISTINCT TBJ.TBJ_CODOCO) AS QTDOCR"
								cQuery += " FROM "+RetSqlName("TAV")+" TAV "

								cQuery += " INNER JOIN "+RetSqlName("TB0")+" TB0 ON "
								cQuery += "    TB0.TB0_FILIAL = " + ValToSql(xFilial("TB0")) + " AND TB0.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TB0.TB0_CODRES = TAV.TAV_CODRES AND "
								cQuery += "    TB0.TB0_QTDE > TB0.TB0_QTDRED "

								cQuery += " LEFT JOIN "+RetSqlName("TBJ")+" TBJ ON "
								cQuery += "    TBJ.TBJ_FILIAL = " + ValToSql(xFilial("TBJ")) + " AND TBJ.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TB0.TB0_CODOCO = TBJ.TBJ_CODOCO AND "
								cQuery += "    TBJ.TBJ_CODEST = TAV.TAV_CODEST AND "
								cQuery += "    TBJ.TBJ_CODNIV = TAV.TAV_CODNIV "

								cQuery += " WHERE "
								cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
								cQuery += "    TAV.TAV_CODRES = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES))) + " AND "
								cQuery += "    TAV.TAV_CODEST = " + ValToSql((cTRBSGA)->CODEST) + " AND "
								cQuery += "    TAV.TAV_CODNIV = " + ValToSql((cTRBSGA)->NIVSUP)
								cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								If (cAliasQry)->(!EoF())
									nLgOcR += (cAliasQry)->QTDOCR
									(cAliasQry)->(dbSkip())
								EndIf
								(cAliasQry)->(dbCloseArea())

                     			// FMRs
								cAliasQry := GetNextAlias()
								cQuery := " SELECT TAV_CODRES AS CODRES, TAV_CODEST AS CODEST, TAV_CODNIV AS CODNIV, TDC.TDC_STATUS STATUS, COUNT(DISTINCT TDC.TDC_CODFMR) AS QTDFMR"
								cQuery += " FROM "+RetSqlName("TAV")+" TAV "

								cQuery += " INNER JOIN "+RetSqlName("TDC")+" TDC ON "
								cQuery += "    TDC.TDC_FILIAL = " + ValToSql(xFilial("TDC")) + " AND TDC.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TDC.TDC_CODRES = TAV.TAV_CODRES AND "
								cQuery += "    TDC.TDC_DEPTO  = TAV.TAV_CODNIV AND "
								cQuery += "    TDC.TDC_STATUS <> 5 AND "
								cQuery += "    TDC.TDC_STATUS <> 7 "

								cQuery += " WHERE "
								cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
								cQuery += "    TAV.TAV_CODRES = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES))) + " AND "
								cQuery += "    TAV.TAV_CODEST = " + ValToSql((cTRBSGA)->CODEST) + " AND "
								cQuery += "    TAV.TAV_CODNIV = " + ValToSql((cTRBSGA)->NIVSUP)
								cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"
								cQuery += " GROUP BY TAV.TAV_CODRES,TAV.TAV_CODEST, TAV.TAV_CODNIV, TDC.TDC_STATUS"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								While (cAliasQry)->(!EoF())
									If (cAliasQry)->STATUS == "1"
										nLgFMRPC += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "2"
										nLgFMRAP += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "3"
										nLgFMRAR += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "4"
										nLgFMRNC += (cAliasQry)->QTDFMR
									ElseIf (cAliasQry)->STATUS == "6"
										nLgFMRRB += (cAliasQry)->QTDFMR
									EndIf
									(cAliasQry)->(dbSkip())
								End
								(cAliasQry)->(dbCloseArea())

							ElseIf (cTRBSGA)->TIPO == __cTpAsp // Aspecto

								cAliasQry := GetNextAlias()
								cQuery := " SELECT COUNT(DISTINCT TAB.TAB_ORDEM) AS QTDDES"
								cQuery += " FROM "+RetSqlName("TAG")+" TAG "

								cQuery += " INNER JOIN "+RetSqlName("TA4")+" TA4 ON "
								cQuery += "    TA4.TA4_FILIAL = " + ValToSql(xFilial("TA4")) + " AND TA4.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TA4.TA4_CODASP = TAG.TAG_CODASP"

								cQuery += " LEFT JOIN "+RetSqlName("TAB")+" TAB ON "
								cQuery += "    TAB.TAB_FILIAL = " + ValToSql(xFilial("TAB")) + " AND TAB.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TAB.TAB_SITUAC = '1' AND "
								cQuery += "    TA4.TA4_CODASP = TAB.TAB_CODASP AND "
								cQuery += "    TAB.TAB_CODEST = TAG.TAG_CODEST AND "
								cQuery += "    TAB.TAB_CODNIV = TAG.TAG_CODNIV "

								cQuery += " WHERE "
								cQuery += "    TAG.TAG_FILIAL = " + ValToSql(xFilial("TAG")) + " AND "
								cQuery += "    TAG.TAG_CODASP = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TAB->TAB_CODASP))) + " AND "
								cQuery += "    TAG.TAG_CODEST = " + ValToSql((cTRBSGA)->CODEST) + " AND "
								cQuery += "    TAG.TAG_CODNIV = " + ValToSql((cTRBSGA)->NIVSUP)
								cQuery += "    AND TAG.D_E_L_E_T_ <> '*'"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								If (cAliasQry)->(!EoF())
									nLgDes += (cAliasQry)->QTDDES
									(cAliasQry)->(dbSkip())
								EndIf
								(cAliasQry)->(dbCloseArea())

							ElseIf (cTRBSGA)->TIPO == __cTpPE // Plano Emergencial

								cAliasQry := GetNextAlias()
								cQuery := " SELECT COUNT(DISTINCT TC1.TC1_CODOCO) AS QTDOPE"
								cQuery += " FROM "+RetSqlName("TBC")+" TBC "

								cQuery += " INNER JOIN "+RetSqlName("TBB")+" TBB ON "
								cQuery += "    TBB.TBB_FILIAL = " + ValToSql(xFilial("TBB")) + " AND TBB.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TBB.TBB_CODPLA = TBC.TBC_CODPLA"

								cQuery += " LEFT JOIN "+RetSqlName("TC1")+" TC1 ON "
								cQuery += "    TC1.TC1_FILIAL = " + ValToSql(xFilial("TC1")) + " AND TC1.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TBB.TBB_CODPLA = TC1.TC1_CODPLA AND "
								cQuery += "    TC1.TC1_CODEST = TBC.TBC_CODEST AND "
								cQuery += "    TC1.TC1_NIVSUP = TBC.TBC_CODNIV AND "
								cQuery += "    ( SELECT COUNT(TC3_CODOCO) FROM "+RetSqlName("TC3")+" TC3 "
								cQuery += "       WHERE "
								cQuery += "       TC3.TC3_FILIAL = " + ValToSql(xFilial("TC3")) + " AND TC3.D_E_L_E_T_ <> '*' AND "
								cQuery += "       TC3.TC3_CODOCO = TC1.TC1_CODOCO AND "
								cQuery += "       TC3.TC3_OK <> '' ) = 0 "

								cQuery += " LEFT JOIN "+RetSqlName("TBV")+" TBV ON "
								cQuery += "    TBV.TBV_FILIAL = " + ValToSql(xFilial("TBV")) + " AND TBV.D_E_L_E_T_ <> '*' AND "
								cQuery += "    TBV.TBV_CODOCO = TC1.TC1_CODOCO"

								cQuery += " WHERE "
								cQuery += "    TBC.TBC_FILIAL = " + ValToSql(xFilial("TBC")) + " AND "
								cQuery += "    TBC.TBC_CODPLA = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA))) + " AND "
								cQuery += "    TBC.TBC_CODEST = " + ValToSql((cTRBSGA)->CODEST ) + " AND "
								cQuery += "    TBC.TBC_CODNIV = " + ValToSql((cTRBSGA)->NIVSUP)
								cQuery += "    AND TBC.D_E_L_E_T_ <> '*'"

								cQuery := ChangeQuery(cQuery)
								dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

								dbSelectArea(cAliasQry)
								dbGoTop()
								If (cAliasQry)->(!EoF())
									nLgOPE += (cAliasQry)->QTDOPE
									(cAliasQry)->(dbSkip())
								EndIf
								(cAliasQry)->(dbCloseArea())

							EndIf

						EndIf

					EndIf
				Else
					dbSelectArea("TAF")
					dbSetOrder(2)
					If dbSeek(xFilial("TAF")+cCodEst+aTree[k][1])
						If ( ( !Empty(TAF->TAF_MODMNT) .And. nMod902 == 19 ) .Or. ;
								( !Empty(TAF->TAF_MODMDT) .And. nMod902 == 35 ) .Or. ;
								( !Empty(TAF->TAF_MODSGA) .And. nMod902 == 56 ) ) .And. NGValidTUA()

							If TAF->TAF_INDCON == '2'//Localizacao

								If nMod902 <> 56
                        			//Se pode visualizar O.S.
									If MNT902REST(aTree[k][1],"O","V")
                           				//O.S. Verde
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
										cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'L' AND STJ.TJ_TERMINO = 'N' "
										cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI >= '"+DTOS(dDataBase)+"' "
										cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][1]+"' AND STJ.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nVerde += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//O.S. Vermelha
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
										cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'L' AND STJ.TJ_TERMINO = 'N' "
										cQuery += "    AND STJ.TJ_SITUACA = 'L' AND '" + dToS(dDataBase) + cTime + "' > TJ_DTMPFIM || TJ_HOMPFIM "
										cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][1]+"' AND STJ.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nVerm += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//O.S. Amarela
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
										cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = STJ.TJ_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
										cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'L' AND STJ.TJ_TERMINO = 'N' "
										cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI < '"+DTOS(dDataBase)+"' "
										cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][1]+"' AND STJ.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nAmar += (cAliasQry)->nCount
											nVerm -= (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())
									EndIf

                        			//Se pode visualizar S.S.
									If MNT902REST(aTree[k][1],"S","V")
                           				//S.S. Distribuida
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
										cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'L' AND TQB.TQB_SOLUCA = 'D' "
										cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][1]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nSSD += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//S.S. Aguardando analise
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
										cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'L' AND TQB.TQB_SOLUCA = 'A' "
										cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][1]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nSSA += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//S.S. com Motivo de Atraso
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
										If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
											cQuery += " JOIN "+RetSqlName("TT7")+" TT7 ON (TT7.TT7_FILIAL = '"+xFilial("TT7")+"' AND TT7.TT7_SOLICI = TQB.TQB_SOLICI "
											cQuery += " AND TT7.D_E_L_E_T_ <> '*' ) "
											cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TT7.TT7_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
										Else
											cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TQB.TQB_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
										EndIf
										cQuery += " WHERE TQB.TQB_FILIAL =  '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'L' "
										cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][1]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nSSM += (cAliasQry)->nCount
											nSSD -= (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())
									EndIf

									If lOHSAS
										cAliasQry := GetNextAlias()
										cQuery := " SELECT TG9_CODPER AS CODPER, TG9_CODEST AS CODEST, TG9_CODNIV AS CODNIV FROM "+RetSqlName("TG9")+" TG9 "
										cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
										cQuery += " TG9.TG9_CODNIV = " + ValToSql(aTree[k][1])
										cQuery += " AND TG9.D_E_L_E_T_ <> '*'
										If(nPos := aScan( aPerigos , { | x | x[1] == (cTRBSGA)->NIVSUP  } )) > 0
                              				//For nPer := 1 To Len( aPerigos[ nPos , 2 ] )
                                 				//cQuery += " AND TG9.TG9_CODPER <> "+ValToSQl( aPerigos[ nPos , 2 , nPer ] )
											cQuery += " AND TG9.TG9_CODNIV <> "+ValToSQl( aPerigos[ nPos , 1 ] )
                              				//Next nPer
										EndIf
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										While (cAliasQry)->(!EoF())
											nPeri++
											dbSelectArea( "TG6" )
											dbSetOrder( 5 )
											If dbSeek( xFilial( "TG6" ) + (cAliasQry)->CODEST + (cAliasQry)->CODNIV + (cAliasQry)->CODPER )
												While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
														TG6->TG6_CODEST == (cAliasQry)->CODEST .And. TG6->TG6_CODNIV == (cAliasQry)->CODNIV .And. ;
														TG6->TG6_CODPER == (cAliasQry)->CODPER
													nDano++
													TG6->( dbSkip() )
												End
											EndIf
											(cAliasQry)->(dbSkip())
										End
										(cAliasQry)->(dbCloseArea())
									EndIf
								Else

									cAliasQry := GetNextAlias()
									cQuery := " SELECT TAV_CODRES AS CODRES, TAV_CODEST AS CODEST, TAV_CODNIV AS CODNIV, COUNT(DISTINCT TBJ.TBJ_CODOCO) AS QTDOCR"
									cQuery += " FROM "+RetSqlName("TAV")+" TAV "

									cQuery += " LEFT JOIN "+RetSqlName("TB0")+" TB0 ON "
									cQuery += "    TB0.TB0_FILIAL = " + ValToSql(xFilial("TB0")) + " AND TB0.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TB0.TB0_CODRES = TAV.TAV_CODRES AND "
									cQuery += "    TB0.TB0_QTDE > TB0.TB0_QTDRED "

									cQuery += " LEFT JOIN "+RetSqlName("TBJ")+" TBJ ON "
									cQuery += "    TBJ.TBJ_FILIAL = " + ValToSql(xFilial("TBJ")) + " AND TBJ.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TB0.TB0_CODOCO = TBJ.TBJ_CODOCO AND "
									cQuery += "    TBJ.TBJ_CODEST = TAV.TAV_CODEST AND "
									cQuery += "    TBJ.TBJ_CODNIV = TAV.TAV_CODNIV "

									cQuery += " WHERE "
									cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
									cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
									cQuery += "    TAV.TAV_CODNIV = " + ValToSql(aTree[k][1])
									cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"
									cQuery += " GROUP BY TAV.TAV_CODRES,TAV.TAV_CODEST, TAV.TAV_CODNIV"

									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									While (cAliasQry)->(!EoF())
										nLgRes++
										nLgOcR += (cAliasQry)->QTDOCR
										(cAliasQry)->(dbSkip())
									End
									(cAliasQry)->(dbCloseArea())


									cAliasQry := GetNextAlias()
									cQuery := " SELECT TAG_CODASP AS CODASP, TAG_CODEST AS CODEST, TAG_CODNIV AS CODNIV, COUNT(DISTINCT TAB.TAB_ORDEM) AS QTDDES"
									cQuery += " FROM "+RetSqlName("TAG")+" TAG "

									cQuery += " INNER JOIN "+RetSqlName("TA4")+" TA4 ON "
									cQuery += "    TA4.TA4_FILIAL = " + ValToSql(xFilial("TA4")) + " AND TA4.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TA4.TA4_CODASP = TAG.TAG_CODASP"

									cQuery += " LEFT JOIN "+RetSqlName("TAB")+" TAB ON "
									cQuery += "    TAB.TAB_FILIAL = " + ValToSql(xFilial("TAB")) + " AND TAB.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TAB.TAB_SITUAC = '1' AND "
									cQuery += "    TA4.TA4_CODASP = TAB.TAB_CODASP AND "
									cQuery += "    TAB.TAB_CODEST = TAG.TAG_CODEST AND "
									cQuery += "    TAB.TAB_CODNIV = TAG.TAG_CODNIV "

									cQuery += " WHERE "
									cQuery += "    TAG.TAG_FILIAL = " + ValToSql(xFilial("TAG")) + " AND "
									cQuery += "    TAG.TAG_CODEST = " + ValToSql(cCodEst) + " AND "
									cQuery += "    TAG.TAG_CODNIV = " + ValToSql(aTree[k][1])
									cQuery += "    AND TAG.D_E_L_E_T_ <> '*'"
									cQuery += " GROUP BY TAG.TAG_CODASP,TAG.TAG_CODEST, TAG.TAG_CODNIV"

									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									While (cAliasQry)->(!EoF())
										nLgAsp++
										nLgDes += (cAliasQry)->QTDDES
										(cAliasQry)->(dbSkip())
									End
									(cAliasQry)->(dbCloseArea())

                        			//Plano Emergencial
									cAliasQry := GetNextAlias()
									cQuery := " SELECT TBC_CODPLA AS CODPLA, TBC_CODEST AS CODEST, TBC_CODNIV AS CODNIV, COUNT(DISTINCT TC1.TC1_CODOCO) AS QTDOPE"
									cQuery += " FROM "+RetSqlName("TBC")+" TBC "

									cQuery += " INNER JOIN "+RetSqlName("TBB")+" TBB ON "
									cQuery += "    TBB.TBB_FILIAL = " + ValToSql(xFilial("TBB")) + " AND TBB.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TBB.TBB_CODPLA = TBC.TBC_CODPLA"

									cQuery += " LEFT JOIN "+RetSqlName("TC1")+" TC1 ON "
									cQuery += "    TC1.TC1_FILIAL = " + ValToSql(xFilial("TC1")) + " AND TC1.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TBB.TBB_CODPLA = TC1.TC1_CODPLA AND "
									cQuery += "    TC1.TC1_CODEST = TBC.TBC_CODEST AND "
									cQuery += "    TC1.TC1_NIVSUP = TBC.TBC_CODNIV AND "
									cQuery += "    ( SELECT COUNT(TC3_CODOCO) FROM "+RetSqlName("TC3")+" TC3 "
									cQuery += "       WHERE "
									cQuery += "       TC3.TC3_FILIAL = " + ValToSql(xFilial("TC3")) + " AND TC3.D_E_L_E_T_ <> '*' AND "
									cQuery += "       TC3.TC3_CODOCO = TC1.TC1_CODOCO AND "
									cQuery += "       TC3.TC3_OK <> '' ) = 0 "

									cQuery += " LEFT JOIN "+RetSqlName("TBV")+" TBV ON "
									cQuery += "    TBV.TBV_FILIAL = " + ValToSql(xFilial("TBV")) + " AND TBV.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TBV.TBV_CODOCO = TC1.TC1_CODOCO"

									cQuery += " WHERE "
									cQuery += "    TBC.TBC_FILIAL = " + ValToSql(xFilial("TBC")) + " AND "
									cQuery += "    TBC.TBC_CODEST = " + ValToSql(cCodEst) + " AND "
									cQuery += "    TBC.TBC_CODNIV = " + ValToSql(aTree[k][1])
									cQuery += "    AND TBC.D_E_L_E_T_ <> '*'"
									cQuery += " GROUP BY TBC.TBC_CODPLA,TBC.TBC_CODEST, TBC.TBC_CODNIV"

									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									While (cAliasQry)->(!EoF())
										nLgPla++
										nLgOPE += (cAliasQry)->QTDOPE
										(cAliasQry)->(dbSkip())
									End
									(cAliasQry)->(dbCloseArea())

									cAliasQry := GetNextAlias()
									cQuery := " SELECT TAV_CODRES AS CODRES, TAV_CODEST AS CODEST, TAV_CODNIV AS CODNIV, TDC.TDC_STATUS STATUS, COUNT(DISTINCT TDC.TDC_CODFMR) AS QTDFMR"
									cQuery += " FROM "+RetSqlName("TAV")+" TAV "

									cQuery += " INNER JOIN "+RetSqlName("TDC")+" TDC ON "
									cQuery += "    TDC.TDC_FILIAL = " + ValToSql(xFilial("TDC")) + " AND TDC.D_E_L_E_T_ <> '*' AND "
									cQuery += "    TDC.TDC_CODRES = TAV.TAV_CODRES AND "
									cQuery += "    TDC.TDC_DEPTO  = TAV.TAV_CODNIV AND "
									cQuery += "    TDC.TDC_STATUS <> 5 AND "
									cQuery += "    TDC.TDC_STATUS <> 7 "

									cQuery += " WHERE "
									cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
									cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
									cQuery += "    TAV.TAV_CODNIV = " + ValToSql(aTree[k][1])
									cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"
									cQuery += " GROUP BY TAV.TAV_CODRES,TAV.TAV_CODEST, TAV.TAV_CODNIV, TDC.TDC_STATUS"

									cQuery := ChangeQuery(cQuery)
									dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

									dbSelectArea(cAliasQry)
									dbGoTop()
									While (cAliasQry)->(!EoF())
										If (cAliasQry)->STATUS == "1"
											nLgFMRPC += (cAliasQry)->QTDFMR
										ElseIf (cAliasQry)->STATUS == "2"
											nLgFMRAP += (cAliasQry)->QTDFMR
										ElseIf (cAliasQry)->STATUS == "3"
											nLgFMRAR += (cAliasQry)->QTDFMR
										ElseIf (cAliasQry)->STATUS == "4"
											nLgFMRNC += (cAliasQry)->QTDFMR
										ElseIf (cAliasQry)->STATUS == "6"
											nLgFMRRB += (cAliasQry)->QTDFMR
										EndIf
										(cAliasQry)->(dbSkip())
									End
									(cAliasQry)->(dbCloseArea())

								EndIf

							ElseIf nMod902 <> 56

								If TAF->TAF_INDCON == '1'//Bem

                        			//Se pode visualizar O.S.
									If MNT902REST(aTree[k][1],"O","V")
                           				//O.S. Verde
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
										cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'B' AND STJ.TJ_TERMINO = 'N' "
										cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI >= '"+DTOS(dDataBase)+"' "
										cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][3]+"' AND STJ.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nVerde += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//O.S. Vermelha
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
										cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'B' AND STJ.TJ_TERMINO = 'N' "
										cQuery += "    AND STJ.TJ_SITUACA = 'L' AND '" + dToS(dDataBase) + cTime + "' > TJ_DTMPFIM || TJ_HOMPFIM "
										cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][3]+"' AND STJ.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nVerm += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//O.S. Amarela
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
										cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = STJ.TJ_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
										cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'B' AND STJ.TJ_TERMINO = 'N' "
										cQuery += "    AND STJ.TJ_SITUACA = 'L' AND STJ.TJ_DTMPINI < '"+DTOS(dDataBase)+"' "
										cQuery += "    AND STJ.TJ_CODBEM = '"+aTree[k][3]+"' AND STJ.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nAmar += (cAliasQry)->nCount
											nVerm -= (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())
									EndIf

                        			//Se pode visualizar S.S.
									If MNT902REST(aTree[k][1],"S","V")
                           				//S.S. Distribuida
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
										cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'B' AND TQB.TQB_SOLUCA = 'D' "
										cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][3]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nSSD += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//S.S. Aguardando analise
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
										cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'B' AND TQB.TQB_SOLUCA = 'A' "
										cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][3]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nSSA += (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())

                           				//S.S. com Motivo de Atraso
										cAliasQry := GetNextAlias()
										cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
										If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
											cQuery += " JOIN "+RetSqlName("TT7")+" TT7 ON (TT7.TT7_FILIAL = '"+xFilial("TT7")+"' AND TT7.TT7_SOLICI = TQB.TQB_SOLICI "
											cQuery += " AND TT7.D_E_L_E_T_ <> '*' ) "
											cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TT7.TT7_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
										Else
											cQuery += " JOIN "+RetSqlName("TPL")+" TPL ON (TPL.TPL_FILIAL = '"+xFilial("TPL")+"' AND TPL.TPL_ORDEM = TQB.TQB_ORDEM AND TPL.D_E_L_E_T_ <> '*') "
										EndIf
										cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'B' "
										cQuery += "    AND TQB.TQB_CODBEM = '"+aTree[k][3]+"' AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*' "
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										If !EoF()
											nSSM += (cAliasQry)->nCount
											nSSD -= (cAliasQry)->nCount
										EndIf
										(cAliasQry)->(dbCloseArea())
									EndIf

								ElseIf TAF->TAF_INDCON == '3'//Funcao

									If lOHSAS
										cAliasQry := GetNextAlias()
										cQuery := " SELECT TG9_CODPER AS CODPER, TG9_CODEST AS CODEST, TG9_CODNIV AS CODNIV FROM "+RetSqlName("TG9")+" TG9 "
										cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
										cQuery += " TG9.TG9_CODNIV = " + ValToSql(aTree[k][1])
										cQuery += " AND TG9.D_E_L_E_T_ <> '*'
										If(nPos := aScan( aPerigos , { | x | x[1] == (cTRBSGA)->NIVSUP  } )) > 0
                              				//For nPer := 1 To Len( aPerigos[ nPos , 2 ] )
                                 				//cQuery += " AND TG9.TG9_CODPER <> "+ValToSQl( aPerigos[ nPos , 2 , nPer ] )
											cQuery += " AND TG9.TG9_CODNIV <> "+ValToSQl( aPerigos[ nPos , 1 ] )
                              				//Next nPer
										EndIf
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										While (cAliasQry)->(!EoF())
											nPeri++
											dbSelectArea( "TG6" )
											dbSetOrder( 5 )
											If dbSeek( xFilial( "TG6" ) + (cAliasQry)->CODEST + (cAliasQry)->CODNIV + (cAliasQry)->CODPER )
												While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
														TG6->TG6_CODEST == (cAliasQry)->CODEST .And. TG6->TG6_CODNIV == (cAliasQry)->CODNIV .And. ;
														TG6->TG6_CODPER == (cAliasQry)->CODPER
													nDano++
													TG6->( dbSkip() )
												End
											EndIf
											(cAliasQry)->(dbSkip())
										End
										(cAliasQry)->(dbCloseArea())
									EndIf

								ElseIf TAF->TAF_INDCON == '4'//Tarefa

									If lOHSAS
										cAliasQry := GetNextAlias()
										cQuery := " SELECT TG9_CODPER AS CODPER, TG9_CODEST AS CODEST, TG9_CODNIV AS CODNIV FROM "+RetSqlName("TG9")+" TG9 "
										cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
										cQuery += " TG9.TG9_CODNIV = " + ValToSql(aTree[k][1])
										cQuery += " AND TG9.D_E_L_E_T_ <> '*'
										If(nPos := aScan( aPerigos , { | x | x[1] == (cTRBSGA)->NIVSUP  } )) > 0
                              //For nPer := 1 To Len( aPerigos[ nPos , 2 ] )
                                 //cQuery += " AND TG9.TG9_CODPER <> "+ValToSQl( aPerigos[ nPos , 2 , nPer ] )
											cQuery += " AND TG9.TG9_CODNIV <> "+ValToSQl( aPerigos[ nPos , 1 ] )
                              //Next nPer
										EndIf
										cQuery := ChangeQuery(cQuery)
										dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

										dbSelectArea(cAliasQry)
										dbGoTop()
										While (cAliasQry)->(!EoF())
											nPeri++
											dbSelectArea( "TG6" )
											dbSetOrder( 5 )
											If dbSeek( xFilial( "TG6" ) + (cAliasQry)->CODEST + (cAliasQry)->CODNIV + (cAliasQry)->CODPER )
												While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
														TG6->TG6_CODEST == (cAliasQry)->CODEST .And. TG6->TG6_CODNIV == (cAliasQry)->CODNIV .And. ;
														TG6->TG6_CODPER == (cAliasQry)->CODPER
													nDano++
													TG6->( dbSkip() )
												End
											EndIf
											(cAliasQry)->(dbSkip())
										End
										(cAliasQry)->(dbCloseArea())
									EndIf

								ElseIf TAF->TAF_INDCON == _nPosPerigo //Perigo
									dbSelectArea( "TG6" )
									dbSetOrder( 5 )
									If dbSeek( xFilial( "TG6" ) + cCodEst + TAF->TAF_NIVSUP + SubStr( TAF->TAF_CODPRO , 1 , Len( TG6->TG6_CODPER ) ) )
										While TG6->( !EoF() ) .And. xFilial( "TG6" ) == TG6->TG6_FILIAL .AND. ;
												TG6->TG6_CODEST == cCodEst .And. TG6->TG6_CODNIV == TAF->TAF_NIVSUP .And. ;
												TG6->TG6_CODPER == SubStr( TAF->TAF_CODPRO , 1 , Len( TG6->TG6_CODPER ) )
											If aScan( aDanos , { | x | x[ 1 ] == TG6->TG6_CODNIV  } ) == 0
												nDano++
											EndIf
											TG6->( dbSkip() )
										End
									EndIf
								EndIf
							EndIf
						Else
							k++
							Loop
						EndIf
					EndIf
				EndIf

				dbSelectArea("TAF")
				dbSetOrder(1)
				dbSeek(xFilial("TAF")+cCodEst+aTree[k][1])
				While !EoF() .And. TAF->TAF_FILIAL == xFilial("TAF") .And. TAF->TAF_CODEST == cCodEst .And.;
						TAF->TAF_NIVSUP == aTree[k][1]

					If !Eval(bVrfMod) // Verifica marcacao do modulo na tabela
						TAF->(dbSkip())
						Loop
					EndIf

					If NGValidTUA()
						If TAF->TAF_INDCON == '2'
							aAdd(aTree,{TAF->TAF_CODNIV,TAF->TAF_INDCON,TAF->TAF_CODCON,"LOC"})
							aSize(aTree,Len(aTree))
							nIdent += 1

						ElseIf nMod902 <> 56

							If TAF->TAF_INDCON == '1'
								aAdd(aTree,{TAF->TAF_CODNIV,TAF->TAF_INDCON,TAF->TAF_CODCON,"BEM"})
								aSize(aTree,Len(aTree))
								nBens += 1
							ElseIf TAF->TAF_INDCON == '3'
								aAdd(aTree,{TAF->TAF_CODNIV,TAF->TAF_INDCON,TAF->TAF_CODCON,"FUN"})
								aSize(aTree,Len(aTree))
								nFunc += 1
							ElseIf TAF->TAF_INDCON == '4'
								aAdd(aTree,{TAF->TAF_CODNIV,TAF->TAF_INDCON,TAF->TAF_CODCON,"TAR"})
								aSize(aTree,Len(aTree))
								nTare += 1
							ElseIf TAF->TAF_INDCON == _nPosRisco
								aAdd(aTree,{TAF->TAF_CODNIV,TAF->TAF_INDCON,TAF->TAF_CODCON,"RIS"})
								aSize(aTree,Len(aTree))
								nRisc += 1
							EndIf

						EndIf
					EndIf

					dbSelectArea("TAF")
					dbSetOrder(1)
					dbSkip()
				End

				If nMod902 == 56
					SgaMLeg( aTree[k][1] , aTree[k][4] )
				EndIf

			EndIf
			k++
			If nVerm > 0
				lPossuiVer := .T.
			ElseIf nAmar > 0 .Or. nSSM > 0
				lPossuiAmr := .T.
			EndIf
		End
	EndIf


	If Type("oEnc") == "O"
		oEnc:hide()
		oPanel21:FreeChildren()
		oEnc:=NIL
		oPanel21:Hide()
		oPanel21:Refresh()
		aGets  := Array(0)
		aTela  := Array(0,0)
		If nMod902 == 19
			oBtnRel:lVisible := .F.
		EndIf
	Else
		oPanel21:FreeChildren()
		oPanel21:Hide()
		oPanel21:Refresh()
		aGets  := Array(0)
		aTela  := Array(0,0)
	EndIf
	oPanel24:Hide()

	If Type("oFldRel") == "O"
		oFldRel:hide()
		oPanel22:FreeChildren()
		oFldRel:=NIL
		aPages  := {}
		aTitles := {}
		nControl := 0

		If nMod902 <> 56
			oGetOsIn  := NIL
			aHeadOSIn := Array(0)
			aColsOSIn := Array(0)
			oGetOsEt  := NIL
			aHeadOSEt := Array(0)
			aColsOSEt := Array(0)
			oGetOsOc  := NIL
			aHeadOSOc := Array(0)
			aColsOSOc := Array(0)
			oGetOsMo  := NIL
			aHeadOSMo := Array(0)
			aColsOSMo := Array(0)

			oGetBeCa  := NIL
			aHeadBeCa := Array(0)
			aColsBeCa := Array(0)
			oGetBePe  := NIL
			aHeadBePe := Array(0)
			aColsBePe := Array(0)

			If Type("oTreeBem") == "O"
				oArqc902:Delete()
				cAliasTRB := ""
				oArqc902  := ""
				cIdx1c902 := ""
				cIdx2c902 := ""
				oTreeBem  := NIL
			EndIf
			oGetBeMa  := NIL
			aHeadBeMa := Array(0)
			aColsBeMa := Array(0)

			oGetBeHo  := NIL
			aHeadBeHo := Array(0)
			aColsBeHo := Array(0)
			cRetPar   := ""
			oGetHOSI  := NIL
			aHeadHOSI := Array(0)
			aColsHOSI := Array(0)
			oGetHOSO  := NIL
			aHeadHOSO := Array(0)
			aColsHOSO := Array(0)
			oGetHOSE  := NIL
			aHeadHOSE := Array(0)
			aColsHOSE := Array(0)

			oGetBeHC1  := NIL
			aHeadBeHC1 := Array(0)
			aColsBeHC1 := Array(0)
			oGetBeHC2  := NIL
			aHeadBeHC2 := Array(0)
			aColsBeHC2 := Array(0)

			oGetBeUP   := NIL
			aULTPECASR := Array(0)

			If nMod902 == 19
				oBtnRel:lVisible := .F.
			EndIf
		Else
      		//Participantes
			oGetPart  := NIL
			aHeadPart := Array(0)
			aColsPart := Array(0)

      		//Funções
			oGetFunc  := NIL
			aHeadFun := Array(0)
			aColsFun := Array(0)

      		//Documentos Relacionados
			oGetDocRe  := NIL
			aHeadDoc := Array(0)
			aColsDoc := Array(0)

      		//Resíduo X Localizações
			oGetResLoc  := NIL
			aHeadResLoc := Array(0)
			aColsResLoc := Array(0)

      		//Critérios de Controle
			oGetCrit  := NIL
			aHeadCrit := Array(0)
			aColsCrit := Array(0)

      		//Tipo de Destinação
			oGetTpDest  := NIL
			aHeadTpDest := Array(0)
			aColsTpDest := Array(0)

      		//Poluentes
			oGetPolu  := NIL
			aHeadPolu := Array(0)
			aColsPolu := Array(0)

      		//Monitoramento
			oGetMoni  := NIL
			aHeadMoni := Array(0)
			aColsMoni := Array(0)

      		//Destinos Internos
			oGetDesIn := NIL
			aHeadDesIn := Array(0)
			aColsDesIn := Array(0)

      		//Aspecto X Localizações
			oGetAspLoc  := NIL
			aHeadAspLoc := Array(0)
			aColsAspLoc := Array(0)

      		//Aspecto X Requisitos
			oGetAspReq := NIL
			aHeadAspReq := Array(0)
			aColsAspReq := Array(0)

      		//Plano Emerg. X Localizações
			oGetPlaLoc  := NIL
			aHeadPlaLoc := Array(0)
			aColsPlaLoc := Array(0)

      		//Ações
			oGetAcoes := NIL
			aHeadAcoes := Array(0)
			aColsAcoes := Array(0)

      		//Participantes
			oGetPartic  := NIL
			aHeadPartic := Array(0)
			aColsPartic := Array(0)

      		//Contatos Externos
			oGetConExt  := NIL
			aHeadConExt := Array(0)
			aColsConExt := Array(0)

      		//Equipamentos e Materiais
			oGetEquMat := NIL
			aHeadEquMat := Array(0)
			aColsEquMat := Array(0)

      		//Destino
			oGetDestOc := NIL
			aHeadDestOc := Array(0)
			aColsDestOc := Array(0)

      		//Acondicionamento
			oGetAcondi := NIL
			aHeadAcondi := Array(0)
			aColsAcondi := Array(0)

      		//Responsáveis
			oGetRespAc := NIL
			aHeadRespAc := Array(0)
			aColsRespAc := Array(0)

      		//Ocorrencia de Plano Emergencial - Envolvidos
			oGetOcoEnv := NIL
			aHeadOcoEnv := Array(0)
			aColsOcoEnv := Array(0)

      		//Resíduos da Ocorrencia do Plano Emergencial
			oGetResOco := NIL
			aHeadResOco := Array(0)
			aColsResOco := Array(0)

			oPanel22:Refresh()
		EndIf

		oPanel22:Hide()

		oPanel22:Refresh()
	EndIf

	lCheck1 := .T.
	lCheck2 := .T.
	lCheck3 := .T.
	lCheck4 := .T.
	lCheck5 := .T.
	lCheck6 := .T.
	lCheck7 := .T.
	lCheck8 := .T.

	If nMV1 == 1
		oIdent:Refresh()
		If nMod902 == 19
			oBens:Refresh()
			oVerde:Refresh()
			oVerm:Refresh()
			oAmar:Refresh()
			oSSD:Refresh()
			oSSA:Refresh()
			oSSM:Refresh()
		ElseIf nMod902 == 35
			oFunc:Refresh()
			oTare:Refresh()
			If lCodAmb
				oRisc:Refresh()
			EndIf
			If lOHSAS
				oPeri:Refresh()
				oDano:Refresh()
			EndIf
		ElseIf nMod902 == 56
			oLgRes:Refresh()
			oLgOcR:Refresh()
			oLgAsp:Refresh()
			oLgDes:Refresh()
			oLgPla:Refresh()
			oLgOPE:Refresh()
			oLgFMRPC:Refresh()
			oLgFMRAP:Refresh()
			oLgFMRAR:Refresh()
			oLgFMRNC:Refresh()
			oLgFMRRB:Refresh()
		EndIf
	EndIf

	If nMod902 == 56
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek(cCodest+SubStr(cCod,1,3)+cFilAnt)
	EndIf

	// Quando a legenda estiver habilitada.
	If nMV1 == 1

		If !lByOpt
			If lPossuiVer
				nCor := 3 //Vermelho
			ElseIf lPossuiAmr
				nCor := 2 //Amarelo
			EndIf
		Else
			nCor := 1 //Verde
			If nVerm > 0
				nCor := 3 //Vermelho
			ElseIf nAmar > 0 .Or. nSSM > 0
				nCor := 2 //Amarelo
			EndIf
		EndIf

		aFolder  := fChangeClr( nCor, SubStr( oTree:GetCargo(), 4, 3 ) )
		cFolderA := aFolder[1]
		cFolderB := aFolder[2]

		If cCod <> '001'
			oTree:ChangeBmp( cFolderA, cFolderB )
		EndIf

	EndIf

Return NIL

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902VRun
Carrega os registros do item selecionado.

@author eduardo.izola
@since 17/02/2017
@version undefined

@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902VRun()

	FWMsgRun( , { | | MNT902Vis() }, STR0031, STR0030 )//"Carregando"###"Carregando Tela do Item Selecionado, aguarde..."

	If (SubStr(oTree:GetCargo(),4,3) <> "LOC" .Or. nMod902 == 56) .And. lCheckMos
		MNT902Rel()
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Vis
Mostra os registros do item selecionado.
@author Rafael Diogo Richter
@since 17/10/2008
@version undefined
@obs  Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Vis()

	Local nRec3
	Local i
	Local nFornece // Variável utilizada para executar o gatilho do nome do fornecedor.
	Local cCod       := SubStr(oTree:GetCargo(),1,3)
	Local aRelac     := {}
	Local lDepto     := NGCADICBASE("TAF_DEPTO","A","TAF",.F.)
	Local lUseMemory := .T. // Define se o MsmGet trabalha com registros em memória ou com os posicionados na tabela.

	cLocal := cCod
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek("001"+cCod+cFilAnt)

	If SubStr(oTree:GetCargo(),4,3) == "LOC"
		dbSelectArea("TAF")
		dbSetOrder(2)
		If dbSeek(xFilial("TAF")+"001"+cCod)
			nRecno := TAF->(Recno())
		Else
			nRecno := 1
		EndIf

		cAlias := "TAF"
		nOpcx  := 2
		bCampo := {|nCPO| Field(nCPO) }
		aNao   := {}

		aAdd(aNao,"TAF_CODEST")
		aAdd(aNao,"TAF_NIVEL" )
		aAdd(aNao,"TAF_INDCON")
		aAdd(aNao,"TAF_CODCON")
		aAdd(aNao,"TAF_NIVSUP")
		aAdd(aNao,"TAF_ORDEM" )

		If cValToChar(nMod902) $ "35/56"
			aAdd(aNao,"TAF_CENTRA")
			aAdd(aNao,"TAF_NOMTRA")
			If lRetS
				aAdd(aNao,"TAF_ETAPA")
			EndIf
		EndIf

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+cLocal+cFilAnt)
			aAdd(aRelac,{"TAF_NOMNIV","(cTRBSGA)->DESCRI" } )
			aAdd(aRelac,{"TAF_CODNIV","cLocal"            } )
			aAdd(aRelac,{"TAF_MAT"   ,"(cTRBSGA)->RESPONS"} )
			If !(cValToChar(nMod902) $ "35/56")
				aAdd( aRelac, {"TAF_CENTRA","(cTRBSGA)->CENTRAB"   } )
				If lRetS
					aAdd( aRelac, {"TAF_ETAPA","(cTRBSGA)->ETAPA"   } )
				EndIf
			EndIf
			aAdd( aRelac, {"TAF_CCUSTO","(cTRBSGA)->CC"        } )
			If lDepto
				aAdd( aRelac, {"TAF_DEPTO" ,"(cTRBSGA)->DEPTO"		} )
			EndIf

			If lRateio
				aAdd(aRelac,{"TAF_RATEIO","(cTRBSGA)->RATEIO"   } )
			EndIf
			If lFamilia
				aAdd(aRelac,{"TAF_CODFAM","(cTRBSGA)->CODFAM"   } )
			EndIf
			If lCodAmb
				aAdd(aRelac,{"TAF_CODAMB","(cTRBSGA)->CODAMB"   } )
			EndIf
			If !Empty(aUserTAF)
				AddUserFld(aUserTAF, @aRelac, .F.)
			EndIf
		EndIf

		aChoice  := NGCAMPNSX3("TAF",aNao)

	ElseIf nMod902 <> 56

		If SubStr(oTree:GetCargo(),4,3) == "BEM" .And. MNT902REST( SubStr( oTree:GetCargo(), 1, 3 ), 'B', 'V' )
			
			oBtnRel:lVisible := .T.
			dbSelectArea("ST9")
			dbSetOrder(1)
			dbSeek(xFilial("ST9")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias     := "ST9"
			nOpcx      := 2
			nRecno     := ST9->(RECNO())
			lUseMemory := .F.
			bCampo     := {|NCPO| FIELD(NCPO) }

			If lFrota
				aNao    := {}
			Else
				aNao := {"T9_CODTMS" ,;
						 "T9_PLACA"  ,;
						 "T9_CAPMAX" ,;
						 "T9_MEDIA"  ,;
						 "T9_TIPVEI" ,;
						 "T9_ANOMOD" ,;
						 "T9_ANOFAB" ,;
						 "T9_CHASSI" ,;
						 "T9_CORVEI" ,;
						 "T9_DESCOR" ,;
						 "T9_CIDEMPL",;
						 "T9_UFEMPLA",;
						 "T9_RENAVAM",;
						 "T9_NRMOTOR",;
						 "T9_CEREVEI"}
			EndIf

			aChoice := NGCAMPNSX3("ST9",aNao)

			For i := 1 To  ST9->( FCount() )
				cCampo := "M->" + FieldName(i)
				cRelac := "ST9->" + FieldName(i)
				&cCampo. := &cRelac

         		//Caso possua, executa gatilho do campo em questão.
				If ExistTrigger( FieldName( i ) )
					RunTrigger( 1,,,FieldName( i ) )
				EndIf

         		//Aramazena posição do campo Fornecedor.
				If FieldName( i ) == "T9_FORNECE"
					nFornece := i
				EndIf
			Next

      		// Casso possua gatilho no campo Fornecedor, executa.
			If ExistTrigger( FieldName( nFornece ) )
				RunTrigger( 1,,,FieldName( nFornece ) )
			EndIf


		ElseIf SubStr(oTree:GetCargo(),4,2) == "OS" .And. MNT902REST( SubStr( oTree:GetCargo(), 1, 3 ), 'O', 'V' )
			oBtnRel:lVisible := .T.
			dbSelectArea("STJ")
			dbSetOrder(1)
			dbSeek(xFilial("STJ")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias     := "STJ"
			nOpcx      := 2
			nRecno     := STJ->(Recno())
			bCampo     := {|nCPO| Field(nCPO) }
			aNao       := {}
			aChoice    := NGCAMPNSX3("STJ",aNao)
			lUseMemory := .F.

			For i := 1 To FCOUNT()
				cCampo := "M->" + FieldName(i)
				cRelac := "STJ->" + FieldName(i)
				&cCampo. := &cRelac

         		//Carrega o Nome do Bem
				If FieldName( i ) == "TJ_CODBEM"
					//Se for uma OS para Localização, carrega-se o Nome da Localização e não do Bem
					If STJ->TJ_TIPOOS == "L"
						M->TJ_NOMBEM := NGSEEK("TAF","X2"+Substr(STJ->TJ_CODBEM,1,3),7,"TAF_NOMNIV")
					Else
						M->TJ_NOMBEM := NGSEEK("ST9",M->TJ_CODBEM,1,"T9_NOME")
					EndIf
				EndIf

         		//Caso possua, executa gatilho do campo em questão.
				If ExistTrigger( FieldName( i ) )
					RunTrigger( 1,,,FieldName( i ) )
				EndIf
			Next
		ElseIf SubStr(oTree:GetCargo(),4,2) == "SS" .And. MNT902REST( SubStr( oTree:GetCargo(), 1, 3 ), 'S', 'V' )

			dbSelectArea("TQB")
			dbSetOrder(1)
			dbSeek(xFilial("TQB")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias     := "TQB"
			nOpcx      := 2
			nRecno     := TQB->(Recno())
			bCampo     := {|nCPO| Field(nCPO) }
			aNao       := {"TQB_OBSATE", "TQB_OBSPRA"}
			aChoice    := NGCAMPNSX3("TQB",aNao)
			lUseMemory := .F.

			For i := 1 To TQB->( FCount() )
				cCampo := "M->" + FieldName(i)
				cRelac := "TQB->" + FieldName(i)
				&cCampo. := &cRelac

         		//Atualiza o campo memo.
				If FieldName( i ) == 'TQB_CODMSS'
					cChave := M->TQB_CODMSS //Atribui a variável o código do campo memo da tabela TQB.
					If !Empty( cChave ) 	//Verifica se o campo tem conteúdo.
						M->TQB_DESCSS := MsMM(cChave,,,,3) //Retorna o conteúdo do campo memo.
					EndIf
				ElseIf FieldName( i ) == 'TQB_CODMSO'
					cChave := M->TQB_CODMSO //Atribui a variável o código do campo memo da tabela TQB.
					M->TQB_DESCSO := MsMM(cChave,,,,3) //Retorna o conteúdo do campo memo.
				EndIf

         		//Carrega o Nome do Centro de Custo;
				If FieldName( i ) == "TQB_CCUSTO"
					M->TQB_NOMCUS := NGSEEK( "CTT",M->TQB_CCUSTO,1,"CTT_DESC01" )
				EndIf

            	//Carrega o Nome do Centro de Trabalho;
				If FieldName( i ) == "TQB_CENTRA"
					TQB_NOMCTR := NGSEEK( "SHB",M->TQB_CENTRA,1,"HB_NOME" )
				EndIf

         		//Caso possua, executa gatilho do campo em questão.
				If ExistTrigger( FieldName( i ) )
					RunTrigger( 1,,,FieldName( i ) )
				EndIf
			Next
		ElseIf SubStr(oTree:GetCargo(),4,3) == "FUN"
			dbSelectArea("SRJ")
			dbSetOrder(1)
			dbSeek(xFilial("SRJ")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias := "SRJ"
			nOpcx := 2
			nRecno := SRJ->(Recno())
			bCampo  := {|nCPO| Field(nCPO) }
			aNao := {}
			aChoice  := NGCAMPNSX3("SRJ",aNao)

			RegToMemory("SRJ", .F.)

		ElseIf SubStr(oTree:GetCargo(),4,3) == "TAR"

			dbSelectArea("TN5")
			dbSetOrder(1)
			dbSeek(xFilial("TN5")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias := "TN5"
			nOpcx := 2
			nRecno := TN5->(Recno())
			bCampo  := {|nCPO| Field(nCPO) }
			aNao := {}
			aChoice  := NGCAMPNSX3("TN5",aNao)

			For i := 1 To FCOUNT()
				cCampo := "M->" + FieldName(i)
				cRelac := "TN5->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,3) == "RIS"

			dbSelectArea("TN0")
			dbSetOrder( 1 )//TN0_FILIAL+TN0_NUMRIS
			dbSeek(xFilial("TN0") + SubStr( (cTRBSGA)->CODTIPO, 1, Len(TN0->TN0_NUMRIS) ) )

			cAlias := "TN0"
			nOpcx := 2
			nRecno := TN0->(Recno())
			bCampo  := {|nCPO| Field(nCPO) }
			aNao := {}
			aChoice  := NGCAMPNSX3("TN0",aNao)

			For i := 1 To FCOUNT()
				cCampo := "M->" + FieldName(i)
				cRelac := "TN0->" + FieldName(i)
				&cCampo. := &cRelac
			Next

			RegToMemory( "TN0", .F. )

		ElseIf SubStr(oTree:GetCargo(),4,3) == "PER"

			dbSelectArea("TG1")
			dbSetOrder(1)
			dbSeek(xFilial("TG1")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias := "TG1"
			nOpcx := 2
			nRecno := TG1->(Recno())
			bCampo  := {|nCPO| Field(nCPO) }
			aNao := {}
			aChoice  := NGCAMPNSX3("TG1",aNao)

			For i := 1 To FCOUNT()
				cCampo := "M->" + FieldName(i)
				cRelac := "TG1->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,3) == "DAN"

			dbSelectArea("TG8")
			dbSetOrder(1)
			dbSeek(xFilial("TG8")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias := "TG8"
			nOpcx := 2
			nRecno := TG8->(Recno())
			bCampo  := {|nCPO| Field(nCPO) }
			aNao := {}
			aChoice  := NGCAMPNSX3("TG8",aNao)

			For i := 1 To FCOUNT()
				cCampo := "M->" + FieldName(i)
				cRelac := "TG8->" + FieldName(i)
				&cCampo. := &cRelac
			Next
		EndIf

	Else

		If SubStr(oTree:GetCargo(),4,3) == "RES" // Resíduo

			dbSelectArea("TAX")
			dbSetOrder(1)
			dbSeek(xFilial("TAX")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias   := "TAX"
			nOpcx    := 2
			nRecno   := TAX->(Recno())
			bCampo   := {|nCPO| Field(nCPO) }
			aChoice  := NGCAMPNSX3("TAX", {})

			For i := 1 To FCount()
				cCampo := "M->"   + FieldName(i)
				cRelac := "TAX->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,3) == "ORS" // Ocorrencia de Residuo

			dbSelectArea("TB0")
			dbSetOrder(1)
			dbSeek(xFilial("TB0")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias   := "TB0"
			nOpcx    := 2
			nRecno   := TB0->(Recno())
			bCampo   := {|nCPO| Field(nCPO) }
			aChoice  := NGCAMPNSX3("TB0", {})

			For i := 1 To FCount()
				cCampo := "M->"   + FieldName(i)
				cRelac := "TB0->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,3) == "ASP" //Aspecto

			dbSelectArea("TA4")
			dbSetOrder(1)
			dbSeek(xFilial("TA4")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias   := "TA4"
			nOpcx    := 2
			nRecno   := TA4->(Recno())
			bCampo   := {|nCPO| Field(nCPO) }
			aChoice  := NGCAMPNSX3("TA4", {})

			For i := 1 To FCount()
				cCampo := "M->"   + FieldName(i)
				cRelac := "TA4->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,3) == "DES" //Desempenho

			dbSelectArea("TAB")
			dbSetOrder(1)
			dbSeek(xFilial("TAB")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias   := "TAB"
			nOpcx    := 2
			nRecno   := TAB->(Recno())
			bCampo   := {|nCPO| Field(nCPO) }
			aChoice  := NGCAMPNSX3("TAB", {})

			For i := 1 To FCount()
				cCampo := "M->"   + FieldName(i)
				cRelac := "TAB->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,3) == "PLE" //Plano Emergencial

			dbSelectArea("TBB")
			dbSetOrder(1)
			dbSeek(xFilial("TBB")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias   := "TBB"
			nOpcx    := 2
			nRecno   := TBB->(Recno())
			bCampo   := {|nCPO| Field(nCPO) }
			aChoice  := NGCAMPNSX3("TBB", {})

			For i := 1 To FCount()
				cCampo := "M->"   + FieldName(i)
				cRelac := "TBB->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,3) == "OPE" //Ocorrencia de plano emergencial

			dbSelectArea("TBV")
			dbSetOrder(1)
			dbSeek(xFilial("TBV")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias   := "TBV"
			nOpcx    := 2
			nRecno   := TBV->(Recno())
			bCampo   := {|nCPO| Field(nCPO) }
			aChoice  := NGCAMPNSX3("TBV", {})

			For i := 1 To FCount()
				cCampo := "M->"   + FieldName(i)
				cRelac := "TBV->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		ElseIf SubStr(oTree:GetCargo(),4,2) == "FM" //Ocorrencia de FMR

			dbSelectArea("TDC")
			dbSetOrder(1)
			dbSeek(xFilial("TDC")+AllTrim((cTRBSGA)->CODTIPO))

			cAlias   := "TDC"
			nOpcx    := 2
			nRecno   := TBV->(Recno())
			bCampo   := {|nCPO| Field(nCPO) }
			aChoice  := NGCAMPNSX3("TDC", {})

			For i := 1 To FCount()
				cCampo := "M->"   + FieldName(i)
				cRelac := "TDC->" + FieldName(i)
				&cCampo. := &cRelac
			Next

		EndIf

	EndIf

	If Type("oEnc") == "O"
		oEnc:hide()
		oPanel21:FreeChildren()
		oEnc:=NIL
		oPanel21:Hide()
		oPanel21:Refresh()
		aGets  := Array(0)
		aTela  := Array(0,0)
		If nMod902 == 19
			oBtnRel:lVisible := .F.
		EndIf
	Else
		oPanel21:FreeChildren()
		oPanel21:Hide()
		oPanel21:Refresh()
		aGets  := Array(0)
		aTela  := Array(0,0)
	EndIf

	//Controle para não ocorrer erro.log
	If Type("cAlias") <> "C"
		Return
	EndIf
	dbSelectArea(cAlias)
	dbSetOrder(1)

	If SubStr(oTree:GetCargo(),4,3) == "LOC"
		For i := 1 to Len(aRELAC)
			cCampo := "M->" + aRELAC[i][1]
			cRelac := aRELAC[i][2]
			&cCampo. := &cRelac
		Next
		dbSelectArea("QAA")
		dbSetOrder(1)
		dbSeek(xFilial("QAA")+(cTRBSGA)->RESPONS)
		M->TAF_NOMRES   := QAA->QAA_NOME

		dbSelectArea("CTT")
		dbSetOrder(1)
		dbSeek(xFilial("CTT")+(cTRBSGA)->CC)
		M->TAF_NOMCC := CTT->CTT_DESC01

		If lDepto
			dbSelectArea("SQB")
			dbSetOrder(1)
			dbSeek(xFilial("SQB")+(cTRBSGA)->DEPTO)
			M->TAF_DESCDP := SQB->QB_DESCRIC
		EndIf

		dbSelectArea("SHB")
		dbSetOrder(1)
		dbSeek(xFilial("SHB")+(cTRBSGA)->CENTRAB)
		M->TAF_NOMTRA := SHB->HB_NOME

		If lCodAmb
			M->TAF_NOMAMB := Posicione( "TNE", 1, xFilial("TNE")+M->TAF_CODAMB, "TNE_NOME" )
		EndIf
	EndIf

	oEnc:= MsMGet():New( cAlias, nRecno, 2, , , , aChoice, { 000, 000, 000, 000 }, , , , , , oPanel21, , lUseMemory, , , .T. )

	oEnc:oBox:Align      := CONTROL_ALIGN_ALLCLIENT
	oEnc:Disable()
	oEnc:EnchRefreshAll()
	oPanel21:Show()
	oPanel21:Refresh()
	oPanel24:Hide()

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Rel
Mostra os registros Relacionados ao item selecionado.
@author Rafael Diogo Richter
@since 17/10/2008
@version undefined
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Rel()

	Local oFontB  := TFont():New("Arial",,14,,.T.)
	Local oFont60 := TFont():New("Arial",12,57,,.F.)
	Local oDlgRel

	If SubStr(oTree:GetCargo(),4,2) == "OS"

		Define MsDialog oDlgRel From 0,0 To 225,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 080, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  STR0033 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Insumos"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  STR0034 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Ocorrências"
			@ 050,008 CHECKBOX oCheck3 VAR lCheck3 Prompt  STR0035 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Etapas"
			@ 065,008 CHECKBOX oCheck4 VAR lCheck4 Prompt  STR0036 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Motivos de Atraso"

			@ 081,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 100,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 100,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,3) == "BEM"

		Define MsDialog oDlgRel From 0,0 To 325,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 135, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  STR0038 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Características"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  STR0039 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Peças de Reposição"
			@ 050,008 CHECKBOX oCheck3 VAR lCheck3 Prompt  STR0040 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Estrutura"
			@ 065,008 CHECKBOX oCheck4 VAR lCheck4 Prompt  STR0041 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Manutenções"
			@ 080,008 CHECKBOX oCheck5 VAR lCheck5 Prompt  STR0042 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Histórico de OS"
			@ 095,008 CHECKBOX oCheck6 VAR lCheck6 Prompt  STR0043 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Histórico de Contador"
			@ 110,008 CHECKBOX oCheck7 VAR lCheck7 Prompt  STR0044 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Util. Peças de Reposição"
	      	// Mostra a opção TMS se for frota e tiver integração com TMS.
			If lFrota .And. lIntTMS
				@ 125,008 CHECKBOX oCheck8 VAR lCheck8 Prompt  STR0163 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"TMS"
			EndIf
			@ 139,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 150,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 150,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,3) == "LOC"

		Define MsDialog oDlgRel From 0,0 To 225,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 080, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  STR0299 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Participantes"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  STR0300 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Função"
			@ 050,008 CHECKBOX oCheck3 VAR lCheck3 Prompt  STR0301 FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Documentos Relacionados"

			@ 081,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 100,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 100,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,3) == "RES"

		Define MsDialog oDlgRel From 0,0 To 300,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 135, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  "Resíduo X Localizações" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Resíduo X Localizações"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  "Critérios de Controle"   FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Critérios de Controle"
			@ 050,008 CHECKBOX oCheck3 VAR lCheck3 Prompt  "Tipo de Destinação"   FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Tipo de Destinação"
			@ 065,008 CHECKBOX oCheck4 VAR lCheck4 Prompt  "Poluentes"            FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Poluentes"
			@ 080,008 CHECKBOX oCheck5 VAR lCheck5 Prompt  "Monitoramento"           FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Monitoramento"
			@ 095,008 CHECKBOX oCheck6 VAR lCheck6 Prompt  "Destinos Internos"       FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Destinos Internos"

			@ 113,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 137,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 137,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,3) == "ASP"

		Define MsDialog oDlgRel From 0,0 To 225,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 080, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  "Aspecto X Localizações" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Aspecto X Localizações"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  "Aspecto X Requisitos" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Função"

			@ 081,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 100,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 100,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,3) == "PLE"

		Define MsDialog oDlgRel From 0,0 To 280,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 0103, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  "Plano Emerg. X Localizações" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Plano Emerg. X Localizações"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  "Ações"                    FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Ações"
			@ 050,008 CHECKBOX oCheck3 VAR lCheck3 Prompt  "Participantes"              FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Participantes"
			@ 065,008 CHECKBOX oCheck4 VAR lCheck4 Prompt  "Contatos Externos"         FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Contatos Externos"
			@ 080,008 CHECKBOX oCheck5 VAR lCheck5 Prompt  "Equipamentos e Materiais" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Equipamentos e Materiais"

			@ 105,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 125,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 125,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,3) == "ORS"

		Define MsDialog oDlgRel From 0,0 To 215,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 067, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  "Destino" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Localização do Resíduo"

			@ 069,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 090,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 090,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,2) == "FM"

		Define MsDialog oDlgRel From 0,0 To 225,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 080, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  "Acondicionamento" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Acondicionamento"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  "Responsáveis" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Responsáveis"

			@ 081,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 100,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 100,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	ElseIf SubStr(oTree:GetCargo(),4,3) == "OPE"

		Define MsDialog oDlgRel From 0,0 To 225,265 Title STR0008 Pixel //"Visualizar Relacionamentos"

			@ 006,003 To 080, 130 LABEL STR0032 OF oDlgRel Pixel //"Visualizar os Seguintes Relacionamentos:"
			@ 020,008 CHECKBOX oCheck1 VAR lCheck1 Prompt  "Envolvidos" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Envolvidos"
			@ 035,008 CHECKBOX oCheck2 VAR lCheck2 Prompt  "Resíduos da Ocorrência" FONT oFontB SIZE 100,009 PIXEL Of oDlgRel //"Resíduos da Ocorrência"

			@ 081,008 CHECKBOX oCheckMos VAR lCheckMos Prompt  STR0037 SIZE 100,009 PIXEL Of oDlgRel //"Mostrar automaticamente essa janela"

			DEFINE SBUTTON oBtn1 FROM 100,074 TYPE 1 ENABLE PIXEL ACTION (MNT902Rel2(),oDlgRel:End()) Of oDlgRel
			DEFINE SBUTTON oBtn2 FROM 100,104 TYPE 2 ENABLE PIXEL ACTION (oDlgRel:End()) Of oDlgRel

		Activate MsDialog oDlgRel Centered

	EndIf

	nMv2 := If(lCheckMos,1,2)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Rel2
Mostra os registros Relacionados ao item selecionado.
@author Rafael Diogo Richter
@since 17/10/2008
@version undefined
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Rel2()

	Local oSplitter3, oHC1, cHC1, oHC2, cHC2
	Local oPnlBUP, oBtnIUP
	Local oBNCon, cBNCon, oBNEst, cBNEst, oPnlBNEst, oPnlBNCon
	Local oBlackPnl
	Local oFontB      := TFont():New("Arial",,-12,,.T.)
	Local oDlg        := GetWndDefault()
	Local j, aAreaST9 := {}

	oDlg := oDlg:oWnd

	// Cria painel preto transparente
	oBlackPnl := TPanel():New(0,0,,oDlg,,,,,SetTransparentColor(CLR_BLACK,70),oDlg:nWidth,oDlg:nHeight,.F.,.F.)

	oPanel22:Show()
	oPanel24:Hide()
	If Type("oFldRel") == "O"
		oFldRel:hide()
		oPanel22:FreeChildren()

		oFldRel  := NIL
		aPages   := {}
		aTitles  := {}
		nControl := 0

		If nMod902 <> 56
			oGetOsIn  := NIL
			aHeadOSIn := Array(0)
			aColsOSIn := Array(0)
			oGetOsEt  := NIL
			aHeadOSEt := Array(0)
			aColsOSEt := Array(0)
			oGetOsOc  := NIL
			aHeadOSOc := Array(0)
			aColsOSOc := Array(0)
			oGetOsMo  := NIL
			aHeadOSMo := Array(0)
			aColsOSMo := Array(0)

			oGetBeCa  := NIL
			aHeadBeCa := Array(0)
			aColsBeCa := Array(0)
			oGetBePe  := NIL
			aHeadBePe := Array(0)
			aColsBePe := Array(0)

			If Type("oTreeBem") == "O"
				oArqc902:Delete()
				cAliasTRB := ""
				oArqc902  := ""
				cIdx1c902 := ""
				cIdx2c902 := ""
				oTreeBem  := NIL
			EndIf

			oGetBeMa  := NIL
			aHeadBeMa := Array(0)
			aColsBeMa := Array(0)

			oGetBeHo  := NIL
			aHeadBeHo := Array(0)
			aColsBeHo := Array(0)
			cRetPar   := ""
			oGetHOSI  := NIL
			aHeadHOSI := Array(0)
			aColsHOSI := Array(0)
			oGetHOSO  := NIL
			aHeadHOSO := Array(0)
			aColsHOSO := Array(0)
			oGetHOSE  := NIL
			aHeadHOSE := Array(0)
			aColsHOSE := Array(0)

			oGetBeHC1  := NIL
			aHeadBeHC1 := Array(0)
			aColsBeHC1 := Array(0)
			oGetBeHC2  := NIL
			aHeadBeHC2 := Array(0)
			aColsBeHC2 := Array(0)

			oGetBeUP := NIL
			aULTPECASR := Array(0)
		Else
      		//Participantes
			oGetPart  := NIL
			aHeadPart := Array(0)
			aColsPart := Array(0)

      		//Funções
			oGetFunc  := NIL
			aHeadFun := Array(0)
			aColsFun := Array(0)

      		//Documentos Relacionados
			oGetDocRe  := NIL
			aHeadDoc := Array(0)
			aColsDoc := Array(0)

      		//Resíduo X Localizações
			oGetResLoc  := NIL
			aHeadResLoc := Array(0)
			aColsResLoc := Array(0)

      		//Critérios de Controle
			oGetCrit  := NIL
			aHeadCrit := Array(0)
			aColsCrit := Array(0)

      		//Tipo de Destinação
			oGetTpDest  := NIL
			aHeadTpDest := Array(0)
			aColsTpDest := Array(0)

      		//Poluentes
			oGetPolu  := NIL
			aHeadPolu := Array(0)
			aColsPolu := Array(0)

      		//Monitoramento
			oGetMoni  := NIL
			aHeadMoni := Array(0)
			aColsMoni := Array(0)

      		//Destinos Internos
			oGetDesIn := NIL
			aHeadDesIn := Array(0)
			aColsDesIn := Array(0)

      		//Aspecto X Localizações
			oGetAspLoc  := NIL
			aHeadAspLoc := Array(0)
			aColsAspLoc := Array(0)

      		//Aspecto X Requisitos
			oGetAspReq := NIL
			aHeadAspReq := Array(0)
			aColsAspReq := Array(0)

      		//Plano Emerg. X Localizações
			oGetPlaLoc  := NIL
			aHeadPlaLoc := Array(0)
			aColsPlaLoc := Array(0)

      		//Ações
			oGetAcoes := NIL
			aHeadAcoes := Array(0)
			aColsAcoes := Array(0)

      		//Participantes
			oGetPartic  := NIL
			aHeadPartic := Array(0)
			aColsPartic := Array(0)

      		//Contatos Externos
			oGetConExt  := NIL
			aHeadConExt := Array(0)
			aColsConExt := Array(0)

      		//Equipamentos e Materiais
			oGetEquMat := NIL
			aHeadEquMat := Array(0)
			aColsEquMat := Array(0)

      		//Destino
			oGetDestOc := NIL
			aHeadDestOc := Array(0)
			aColsDestOc := Array(0)

      		//Acondicionamento
			oGetAcondi := NIL
			aHeadAcondi := Array(0)
			aColsAcondi := Array(0)

      		//Responsáveis
			oGetRespAc := NIL
			aHeadRespAc := Array(0)
			aColsRespAc := Array(0)

      		//Ocorrencia de Plano Emergencial - Envolvidos
			oGetOcoEnv := NIL
			aHeadOcoEnv := Array(0)
			aColsOcoEnv := Array(0)

      		//Resíduos da Ocorrencia do Plano Emergencial
			oGetResOco := NIL
			aHeadResOco := Array(0)
			aColsResOco := Array(0)

			oPanel22:Refresh()
		EndIf

		oPanel22:Refresh()
	EndIf

	If nMod902 <> 56
		If SubStr(oTree:GetCargo(),4,2) == "OS"

			If lCheck1
				aAdd(aTitles,OemToAnsi(STR0033)) //"Insumos"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi(STR0034)) //"Ocorrências"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf
			If lCheck3
				aAdd(aTitles,OemToAnsi(STR0035)) //"Etapas"
				aAdd(aPages,"Header 3")
				nControl++
			EndIf
			If lCheck4
				aAdd(aTitles,OemToAnsi(STR0036)) //"Motivos de Atraso"
				aAdd(aPages,"Header 4")
				nControl++
			EndIf

		ElseIf SubStr(oTree:GetCargo(),4,3) == "BEM"
			If lCheck1
				aAdd(aTitles,OemToAnsi(STR0038)) //"Características"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi(STR0039)) //"Peças de Reposição"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf
			If lCheck3
				aAdd(aTitles,OemToAnsi(STR0040)) //"Estrutura"
				aAdd(aPages,"Header 3")
				nControl++
			EndIf
			If lCheck4
				aAdd(aTitles,OemToAnsi(STR0041)) //"Manutenções"
				aAdd(aPages,"Header 4")
				nControl++
			EndIf
			If lCheck5
				aAdd(aTitles,OemToAnsi(STR0042)) //"Histórico de OS"
				aAdd(aPages,"Header 5")
				nControl++
			EndIf
			If lCheck6
				aAdd(aTitles,OemToAnsi(STR0043)) //"Histórico de Contador"
				aAdd(aPages,"Header 6")
				nControl++
			EndIf
			If lCheck7
				aAdd(aTitles,OemToAnsi(STR0044)) //"Util. Peças de Reposição"
				aAdd(aPages,"Header 7")
				nControl++
			EndIf
			If lCheck8 .And. lFrota .And. lIntTMS
				aAdd(aTitles,OemToAnsi(STR0163)) //"TMS"
				aAdd(aPages,"Header 8")
				nControl++
				nFoldTMS := nControl
			EndIf
		EndIf
	Else
		If SubStr(oTree:GetCargo(),4,3) == "LOC" //Localização

			If lCheck1
				aAdd(aTitles,OemToAnsi( STR0299 )) //"Participantes"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi( STR0300 )) //"Função"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf
			If lCheck3
				aAdd(aTitles,OemToAnsi( STR0301 )) //"Documentos Relacionados"
				aAdd(aPages,"Header 3")
				nControl++
			EndIf

		ElseIf   SubStr(oTree:GetCargo(),4,3) == "RES" // Resíduo

			If lCheck1
				aAdd(aTitles,OemToAnsi("Resíduo X Localizações")) //"Resíduo X Localizações"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi("Critérios de Controle")) //"Critérios de Controle"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf
			If lCheck3
				aAdd(aTitles,OemToAnsi("Tipo de Destinação")) //"Tipo de Destinação"
				aAdd(aPages,"Header 3")
				nControl++
			EndIf
			If lCheck4
				aAdd(aTitles,OemToAnsi("Poluentes")) //"Poluentes"
				aAdd(aPages,"Header 4")
				nControl++
			EndIf
			If lCheck5
				aAdd(aTitles,OemToAnsi("Monitoramento")) //"Monitoramento"
				aAdd(aPages,"Header 5")
				nControl++
			EndIf
			If lCheck6
				aAdd(aTitles,OemToAnsi("Destinos Internos")) //"Destinos Internos"
				aAdd(aPages,"Header 6")
				nControl++
			EndIf

		ElseIf   SubStr(oTree:GetCargo(),4,3) == "ASP"

			If lCheck1
				aAdd(aTitles,OemToAnsi( "Aspecto X Localizações" )) //"Aspecto X Localizações"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi( "Aspecto X Requisitos" )) //"Aspecto X Requisitos"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf

		ElseIf   SubStr(oTree:GetCargo(),4,3) == "PLE"

			If lCheck1
				aAdd(aTitles,OemToAnsi( "Plano Emerg. X Localizações" )) //"Plano Emerg. X Localizações"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi( "Ações" )) //"Ações"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf
			If lCheck3
				aAdd(aTitles,OemToAnsi( "Participantes" )) //Aspecto X Requisitos
				aAdd(aPages,"Header 3")
				nControl++
			EndIf
			If lCheck4
				aAdd(aTitles,OemToAnsi( "Contatos Externos" )) //"Contatos Externos"
				aAdd(aPages,"Header 4")
				nControl++
			EndIf
			If lCheck5
				aAdd(aTitles,OemToAnsi( "Equipamentos e Materiais" )) //"Equipamentos e Materiais"
				aAdd(aPages,"Header 5")
				nControl++
			EndIf

		ElseIf   SubStr(oTree:GetCargo(),4,3) == "ORS"

			If lCheck1
				aAdd(aTitles,OemToAnsi( "Destino" )) //"Destino"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf

		ElseIf   SubStr(oTree:GetCargo(),4,2) == "FM"

			If lCheck1
				aAdd(aTitles,OemToAnsi( "Acondicionamento" )) //"Acondicionamento"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi( "Responsáveis" )) //"Responsáveis"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf

		ElseIf   SubStr(oTree:GetCargo(),4,3) == "OPE"

			If lCheck1
				aAdd(aTitles,OemToAnsi( "Envolvidos" )) //"Envolvidos"
				aAdd(aPages,"Header 1")
				nControl++
			EndIf
			If lCheck2
				aAdd(aTitles,OemToAnsi( "Resíduos da Ocorrência" )) //"Resíduos da Ocorrência"
				aAdd(aPages,"Header 2")
				nControl++
			EndIf

		EndIf
	EndIf


	If nMod902 <> 56
		If SubStr(oTree:GetCargo(),4,2) == "OS"
			If lCheck1 .Or. lCheck2 .Or. lCheck3 .Or. lCheck4
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.F.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun(STR0045,STR0031,{||MNT902Ins(aHeadOSIn,aColsOSIn)}) //"Carregando Insumos, aguarde..."###"Carregando"
						oGetOsIn := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadOSIn,aColsOSIn)
               			//oGetOsIn := MsNewGetDados():New(0,0,200,200,GD_INSERT+GD_UPDATE+GD_DELETE,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadOSIn,aColsOSIn)
						oGetOsIn:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetOsIn:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun(STR0046,STR0031,{||MNT902Oco(aHeadOSOc,aColsOSOc)}) //"Carregando Ocorrências, aguarde..."###"Carregando"
						oGetOsOc := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadOSOc,aColsOSOc)
						oGetOsOc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetOsOc:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 3"
						MsgRun(STR0047,STR0031,{||MNT902Eta(aHeadOSEt,aColsOSEt)}) //"Carregando Etapas, aguarde..."###"Carregando"
						oGetOsEt := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadOSEt,aColsOSEt)
						oGetOsEt:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetOsEt:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 4"
						MsgRun(STR0048,STR0031,{||MNT902Mot(aHeadOSMo,aColsOSMo)}) //"Carregando Motivos de Atraso, aguarde..."###"Carregando"
						oGetOsMo := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadOSMo,aColsOSMo)
						oGetOsMo:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetOsMo:oBrowse:Refresh()
					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf
		ElseIf SubStr(oTree:GetCargo(),4,3) == "BEM"
			If lCheck1 .Or. lCheck2 .Or. lCheck3 .Or. lCheck4 .Or. lCheck5 .Or. lCheck6 .Or. lCheck7 .Or. lCheck8
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun(STR0049,STR0031,{||MNT902Car(aHeadBeCa,aColsBeCa)}) //"Carregando Características, aguarde..."###"Carregando"
						oGetBeCa := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadBeCa,aColsBeCa)
						oGetBeCa:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetBeCa:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun(STR0050,STR0031,{||MNT902Pec(aHeadBePe,aColsBePe)}) //"Carregando Peças de Reposição, aguarde..."###"Carregando"
						oGetBePe := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadBePe,aColsBePe)
						oGetBePe:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetBePe:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 3"
						cAliasTRB := GetNextAlias()
						aAreaST9 := ST9->(GetArea())
						bFami := {|x| ST9->(dbSeek(xFilial('ST9') + x)), ST9->T9_CODFAMI}
						cDescBem := ST9->T9_NOME
						MsgRun(STR0051,STR0031,{||MNT902Est(j)}) //"Carregando Estrutura do Bem, aguarde..."###"Carregando"
						If oTreeBem:nTotal == 0
							oPnlBNEst := TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(67,70,87),200,200,.F.,.F.)
							oPnlBNEst:Align := CONTROL_ALIGN_TOP
							oPnlBNEst:nHeight := 25

							cBNEst := STR0052 //"Este Bem não possui Estrutura de Manutenção."
							@ 002,015 SAY oBNEst VAR cBNEst SIZE 200, 20 Font oFontB Color RGB(255,255,255) OF oPnlBNEst PIXEL
							oPnlBNEst:Hide()
							oPnlBNEst:Show()
						Else
							oPnlOSE:=TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(67,70,87),12,12,.F.,.F.)
							oPnlOSE:Align := CONTROL_ALIGN_LEFT

							oBtnIOSCE  := TBtnBmp():NewBar("ng_ico_iosco","ng_ico_iosco",,,,{|| MNT902IOSE(1)},,oPnlOSE,,,STR0013,,,,,"") //"Incluir Ordem de Serviço Corretiva"
							oBtnIOSCE:Align  := CONTROL_ALIGN_TOP
							oBtnIOSCE:lVisible := .F.

							oBtnIOSPE  := TBtnBmp():NewBar("ng_ico_iospr","ng_ico_iospr",,,,{|| MNT902IOSE(2)},,oPnlOSE,,,STR0014,,,,,"") //"Incluir Ordem de Serviço Preventiva"
							oBtnIOSPE:Align  := CONTROL_ALIGN_TOP
							oBtnIOSPE:lVisible := .F.

							MNT902CE()
						EndIf

						RestArea(aAreaST9)
					ElseIf aPages[j] == "Header 4"
						MsgRun(STR0053,STR0031,{||MNT902Man(@aHeadBeMa,@aColsBeMa)}) //"Carregando Manutenções, aguarde..."###"Carregando"
						oGetBeMa := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadBeMa,aColsBeMa)
						oGetBeMa:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetBeMa:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 5"

						oPanelHOS := TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,,200,200,.F.,.F.)
						oPanelHOS:Align := CONTROL_ALIGN_ALLCLIENT

						MsgRun(STR0054,STR0031,{||MNT902HOs(aHeadBeHo,aColsBeHo)}) //"Carregando Histórico de OS, aguarde..."###"Carregando"
						oGetBeHo := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanelHOS,aHeadBeHo,aColsBeHo)
						oGetBeHo:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

						oPnlHis:=TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(67,70,87),12,12,.F.,.F.)
						oPnlHis:Align := CONTROL_ALIGN_LEFT

						oBtnVOS  := TBtnBmp():NewBar("ng_ico_visual","ng_ico_visual",,,,{|| MNT902VOS()},,oPnlHis,,,STR0055,,,,,"") //"Visualizar OS"
						oBtnVOS:Align  := CONTROL_ALIGN_TOP
						oBtnHOSI  := TBtnBmp():NewBar("ng_ico_ferram","ng_ico_ferram",,,,{|| MNT902HOSI()},,oPnlHis,,,STR0056,,,,,"") //"Visualizar Insumos"
						oBtnHOSI:Align  := CONTROL_ALIGN_TOP
						oBtnHOSO  := TBtnBmp():NewBar("ng_ico_ocor","ng_ico_ocor",,,,{|| MNT902HOSO()},,oPnlHis,,,STR0057,,,,,"") //"Visualizar Ocorrências"
						oBtnHOSO:Align  := CONTROL_ALIGN_TOP
						oBtnHOSE  := TBtnBmp():NewBar("ng_ico_etapa","ng_ico_etapa",,,,{|| MNT902HOSE()},,oPnlHis,,,STR0058,,,,,"") //"Visualizar Etapas"
						oBtnHOSE:Align  := CONTROL_ALIGN_TOP
						oBtnFOS  := TBtnBmp():NewBar("ng_ico_filtro","ng_ico_filtro",,,,{|| MNT902FOS()},,oPnlHis,,,STR0059,,,,,"") //"Filtrar"
						oBtnFOS:Align  := CONTROL_ALIGN_TOP
						oBtnHOSF  := TBtnBmp():NewBar("ng_ico_final","ng_ico_final",,,,{|| MNT902HOSF()},,oPnlHis,,,STR0060,,,,,"") //"Retornar"
						oBtnHOSF:Align  := CONTROL_ALIGN_TOP
						oBtnHOSF:lVisible := .F.

						oPanelHOST := TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(67,70,87),200,200,.F.,.F.)
						oPanelHOST:Align := CONTROL_ALIGN_TOP
						oPanelHOST:nHeight := 25

						cHOS := ""
						@ 002,015 SAY oHOS VAR cHOS SIZE 100, 08 Font oFontB Color RGB(255,255,255) OF oPanelHOST PIXEL

						oPanelHOST:Hide()
						oGetBeHo:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 6"
						If ST9->T9_TEMCONT == "S"
							oSplitter3 := tSplitter():New( 0,0,oFldRel:aDialogs[j],200,200,0 )
							oSplitter3:Align := CONTROL_ALIGN_ALLCLIENT

							oPanelHC1 := TPanel():New(01,01,,oSplitter3,,,,,,200,200,.F.,.F.)

							MsgRun(STR0061,STR0031,{||MNT902HC1(aHeadBeHc1,aColsBeHc1)}) //"Carregando Histórico do 1º Contador, aguarde..."###"Carregando"
							oGetBeHc1 := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanelHC1,aHeadBeHc1,aColsBeHc1)
							oGetBeHc1:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
							dbSelectArea("TPE")
							dbSetOrder(1)
							If dbSeek(xFilial("TPE")+ST9->T9_CODBEM)
								oPanelHC1:Align := CONTROL_ALIGN_LEFT

								oPanelHC2 := TPanel():New(01,01,,oSplitter3,,,,,,200,200,.F.,.F.)
								oPanelHC2:Align := CONTROL_ALIGN_LEFT

								MsgRun(STR0062,STR0031,{||MNT902HC2(aHeadBeHc2,aColsBeHc2)}) //"Carregando Histórico do 2º Contador, aguarde..."###"Carregando"
								oGetBeHc2 := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanelHC2,aHeadBeHc2,aColsBeHc2)
								oGetBeHc2:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

								oPanelHC2T := TPanel():New(900,900,,oPanelHC2,,,,,RGB(67,70,87),200,200,.F.,.F.)
								oPanelHC2T:Align := CONTROL_ALIGN_TOP
								oPanelHC2T:nHeight := 25

								cHC2 := STR0063 //"2º Contador"
								@ 002,010 SAY oHC2 VAR cHC2 SIZE 70, 08 Font oFontB Color RGB(255,255,255) OF oPanelHC2T PIXEL

								oPanelHC2T:Hide()
								oPanelHC2T:Show()
								oGetBeHc2:oBrowse:Refresh()
								oPanelHC2:Refresh()
								oPanelHC2T:Refresh()
							Else
								oPanelHC1:Align := CONTROL_ALIGN_ALLCLIENT
							EndIf

							oPanelHC1T := TPanel():New(900,900,,oPanelHC1,,,,,RGB(67,70,87),10,10,.F.,.F.)
							oPanelHC1T:Align := CONTROL_ALIGN_TOP
							oPanelHC1T:nHeight := 25

							cHC1 := STR0064 //"1º Contador"
							@ 002,010 SAY oHC1 VAR cHC1 SIZE 70, 08 Font oFontB Color RGB(255,255,255) OF oPanelHC1T PIXEL

							oPanelHC1T:Hide()
							oPanelHC1T:Show()
							oGetBeHc1:oBrowse:Refresh()
							oPanelHC1:Refresh()
							oPanelHC1T:Refresh()
						Else
							oPnlBNCon := TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(67,70,87),200,200,.F.,.F.)
							oPnlBNCon:Align := CONTROL_ALIGN_TOP
							oPnlBNCon:nHeight := 25

							cBNCon := STR0065 //"Este Bem não é controlado por contador."
							@ 002,015 SAY oBNCon VAR cBNCon SIZE 200, 20 Font oFontB Color RGB(255,255,255) OF oPnlBNCon PIXEL
							oPnlBNCon:Hide()
							oPnlBNCon:Show()
						EndIf
					ElseIf aPages[j] == "Header 7"

						oPnlBUP:=TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(67,70,87),12,12,.F.,.F.)
						oPnlBUP:Align := CONTROL_ALIGN_LEFT
						oBtnIUP  := TBtnBmp():NewBar("ng_ico_imp","ng_ico_imp",,,,{|| MNT080IMPR()},,oPnlBUP,,,STR0066,,,,,"") //"Imprimir"
						oBtnIUP:Align  := CONTROL_ALIGN_TOP

						MsgRun(STR0067,STR0031,{||aULTPECASR := NGPEUTIL(ST9->T9_CODBEM)}) //"Carregando Util. Peças de Reposição, aguarde..."###"Carregando"

						oGetBeUP := TCBrowse():New( 0,0,200,200,,,,oFldRel:aDialogs[j],,,,,{||},,,,,,,.F.,,.T.,,.F.,,,)
						oGetBeUP:AddColumn(TCColumn():New(STR0068,{|| aULTPECASR[oGetBeUP:nAt,1]},,,,,50,.F.,.F.,,,,,)) //"Codigo"
						oGetBeUP:AddColumn(TCColumn():New(STR0069,{|| NGSEEK("SB1",aULTPECASR[oGetBeUP:nAt,1],1,'SubStr(B1_DESC,1,30)')},,,,,70,.F.,.F.,,,,,)) //"Descrição"
						oGetBeUP:AddColumn(TCColumn():New(STR0070,{|| aULTPECASR[oGetBeUP:nAt,2]},,,,,40,.F.,.F.,,,,,)) //"Dt.U.Util."
						oGetBeUP:AddColumn(TCColumn():New(STR0071,{|| aULTPECASR[oGetBeUP:nAt,3]},,,,,30,.F.,.F.,,,,,)) //"Hr.U.Util."
						oGetBeUP:AddColumn(TCColumn():New(STR0072,{|| aULTPECASR[oGetBeUP:nAt,4]},,,,,50,.F.,.F.,,,,,)) //"Cont1 U.Util."
						oGetBeUP:AddColumn(TCColumn():New(STR0073,{|| aULTPECASR[oGetBeUP:nAt,5]},,,,,50,.F.,.F.,,,,,)) //"Cont2 U.Util."
						oGetBeUP:AddColumn(TCColumn():New(STR0074,{|| aULTPECASR[oGetBeUP:nAt,6]},,,,,50,.F.,.F.,,,,,)) //"Cont1.Prox.Man."
						oGetBeUP:AddColumn(TCColumn():New(STR0075,{|| aULTPECASR[oGetBeUP:nAt,7]},,,,,50,.F.,.F.,,,,,)) //"Cont2.Prox.Man."
						oGetBeUP:AddColumn(TCColumn():New(STR0076,{|| aULTPECASR[oGetBeUP:nAt,8]},,,,,40,.F.,.F.,,,,,)) //"Dt.Prox.Man.C1"
						oGetBeUP:AddColumn(TCColumn():New(STR0077,{|| aULTPECASR[oGetBeUP:nAt,9]},,,,,40,.F.,.F.,,,,,)) //"Dt.Prox.Man.C2"

						oGetBeUP:SetArray(aULTPECASR)
						oGetBeUP:Align := CONTROL_ALIGN_ALLCLIENT
						oGetBeUP:Refresh()
					ElseIf aPages[j] == "Header 8"
						aTELA   := {}
						aGETS   := {}
						nRecDA3 := 0
						lMemDA3 := .T.
						If NGIFdbSeek('DA3',M->T9_CODTMS+M->T9_PLACA,4)
							nRecDA3 := Recno()
							lMemDA3 := .F.
						EndIf
						RegToMemory("DA3",lMemDA3)
						oEncTMS := MsMGet():New("DA3",nRecDA3,nOPCAO,,,,,{0,0,0,0},,,,,,oFldRel:aDialogs[j],,,.F.,"aSVATELA2")
						oEncTMS:oBox:Align := CONTROL_ALIGN_ALLCLIENT
               			//oEncTMS:oBOX:bGOTFOCUS := {|| NGENTRA80("DA3")}
               			//oFldRel:bSETOPTION    := {|x| M80SAIFOLD("ST9",x)}

						aSVATELA2 := aCLONE(aTELA)
						aSVAGETS2 := aCLONE(aGETS)
						aTELA     := aCLONE(aSVATELA1)
						aGETS     := aCLONE(aSVAGETS1)
						If lFrota .And. lIntTMS
							oFldRel:aEnable(nFoldTMS,.T.)
						Else
							oFldRel:aEnable(nFoldTMS,.F.)
						EndIf
					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf
		EndIf
	Else
		If SubStr(oTree:GetCargo(),4,3) == "LOC"
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbSeek(xFilial("TAF")+"001"+SubStr(oTree:GetCargo(),1,3))
			If lCheck1 .Or. lCheck2.Or. lCheck3
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun( STR0302 ,STR0031,{|| SgaRelPart(aHeadPart,aColsPart)}) //"Carregando Participantes, aguarde..."###"Carregando"
						oGetPart := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadPart,aColsPart)
						oGetPart:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetPart:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun( STR0303 ,STR0031,{|| SgaRelFun(aHeadFun,aColsFun)}) //"Carregando Funções, aguarde..."###"Carregando"
						oGetFunc := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadFun,aColsFun)
						oGetFunc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetFunc:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 3"
						MsgRun( STR0304 ,STR0031,{|| SgaRelDoc(aHeadDoc,aColsDoc)}) //"Carregando Documentos, aguarde..."###"Carregando"
						oGetDocRe := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadDoc,aColsDoc)
						oGetDocRe:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetDocRe:oBrowse:Refresh()
					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf
		ElseIf SubStr(oTree:GetCargo(),4,3) == "RES"

			If lCheck1 .Or. lCheck2 .Or. lCheck3 .Or. lCheck4 .Or. lCheck5 .Or. lCheck6
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun( STR0330 ,STR0031,{|| SgaRelLoc(aHeadResLoc,aColsResLoc)}) //"Carregando Resíduo X Localizações, aguarde..."###"Carregando"
						oGetResLoc := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadResLoc,aColsResLoc)
						oGetResLoc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetResLoc:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun( STR0329 ,STR0031,{|| SgaRelCrit(aHeadCrit,aColsCrit)}) //"Carregando Critérios de Controle, aguarde..."###"Carregando"
						oGetCrit := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadCrit,aColsCrit)
						oGetCrit:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetCrit:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 3"
						MsgRun( STR0328 ,STR0031,{|| SgaRelDest(aHeadTpDest,aColsTpDest)}) //"Carregando Tipo de Destinação, aguarde..."###"Carregando"
						oGetTpDest := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadTpDest,aColsTpDest)
						oGetTpDest:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetTpDest:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 4"
						MsgRun( STR0327 ,STR0031,{|| SgaRelPolu(aHeadPolu,aColsPolu)}) //"Carregando Poluentes, aguarde..."###"Carregando"
						oGetPolu := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadPolu,aColsPolu)
						oGetPolu:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetPolu:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 5"
						MsgRun( STR0326 ,STR0031,{|| SgaRelMoni(aHeadMoni,aColsMoni)}) //"Carregando Monitoramento, aguarde..."###"Carregando"
						oGetMoni := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadMoni,aColsMoni)
						oGetMoni:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetMoni:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 6"
						MsgRun( STR0325 ,STR0031,{|| SgaRDesInt(aHeadDesIn,aColsDesIn)}) //"Carregando Destinos Internos, aguarde..."###"Carregando"
						oGetDesIn := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadDesIn,aColsDesIn)
						oGetDesIn:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetDesIn:oBrowse:Refresh()

					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf

		ElseIf SubStr(oTree:GetCargo(),4,3) == "ASP"
			dbSelectArea("TAG")
			dbSetOrder(1)
			dbSeek(xFilial("TAG") + Padr((cTRBSGA)->CODTIPO,Len(TAG->TAG_CODASP)))
			If lCheck1 .Or. lCheck2
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun( STR0324 ,STR0031,{|| SgaAspLoc(aHeadAspLoc,aColsAspLoc)}) //"Carregando Aspecto X Localizações, aguarde..."###"Carregando"
						oGetAspLoc := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadAspLoc,aColsAspLoc)
						oGetAspLoc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetAspLoc:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun( STR0323 ,STR0031,{|| SgaAspReq(aHeadAspReq,aColsAspReq)}) //"Carregando Aspecto X Requisitos, aguarde..."###"Carregando"
						oGetAspReq := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadAspReq,aColsAspReq)
						oGetAspReq:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetAspReq:oBrowse:Refresh()
					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf

		ElseIf SubStr(oTree:GetCargo(),4,3) == "PLE"

			If lCheck1 .Or. lCheck2 .Or. lCheck3 .Or. lCheck4 .Or. lCheck5
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun( STR0322 ,STR0031,{|| SgaPlaLoc(aHeadPlaLoc,aColsPlaLoc)}) //"Carregando Plano Emerg. X Localizações, aguarde..."###"Carregando"
						oGetPlaLoc := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadPlaLoc,aColsPlaLoc)
						oGetPlaLoc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetPlaLoc:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun( STR0321 ,STR0031,{|| SgaRelAcoes(aHeadAcoes,aColsAcoes)}) //"Carregando Ações, aguarde..."###"Carregando"
						oGetAcoes := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadAcoes,aColsAcoes)
						oGetAcoes:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetAcoes:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 3"
						MsgRun( STR0320 ,STR0031,{|| SgaPartic(aHeadPartic,aColsPartic)}) //"Carregando Participantes, aguarde..."###"Carregando"
						oGetPartic := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadPartic,aColsPartic)
						oGetPartic:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetPartic:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 4"
						MsgRun( STR0319 ,STR0031,{|| SgaConExt(aHeadConExt,aColsConExt)}) //"Carregando Contatos Externos, aguarde..."###"Carregando"
						oGetConExt := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadConExt,aColsConExt)
						oGetConExt:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetConExt:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 5"
						MsgRun( STR0318 ,STR0031,{|| SgaEquMat(aHeadEquMat,aColsEquMat)}) //"Carregando Equipamentos e Materiais, aguarde..."###"Carregando"
						oGetEquMat := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadEquMat,aColsEquMat)
						oGetEquMat:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetEquMat:oBrowse:Refresh()

					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf

		ElseIf SubStr(oTree:GetCargo(),4,3) == "ORS"

			If lCheck1
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun( STR0317 ,STR0031,{|| SgaDestOc(aHeadDestOc,aColsDestOc)}) //"Carregando Destinos, aguarde..."###"Carregando"
						oGetDestOc := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadDestOc,aColsDestOc)
						oGetDestOc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetDestOc:oBrowse:Refresh()
					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf


		ElseIf SubStr(oTree:GetCargo(),4,2) == "FM"

			If lCheck1 .Or. lCheck2
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun( STR0316 ,STR0031,{|| SgaFMRAcon(aHeadAcondi,aColsAcondi)}) //"Carregando Acondicionamento, aguarde..."###"Carregando"
						oGetAcondi := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadAcondi,aColsAcondi)
						oGetAcondi:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetAcondi:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun( STR0315 ,STR0031,{|| SgaRespAc(aHeadRespAc,aColsRespAc)}) //"Carregando Responsáveis, aguarde..."###"Carregando"
						oGetRespAc := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadRespAc,aColsRespAc)
						oGetRespAc:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetRespAc:oBrowse:Refresh()
					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf

		ElseIf SubStr(oTree:GetCargo(),4,3) == "OPE" //Ocorrencia de plano emergencial

			If lCheck1 .Or. lCheck2
				oFldRel := TFolder():New(0,0,aTitles,aPages,oPanel22,,,,.T.,.F.,350,350)
				oFldRel:Align := CONTROL_ALIGN_ALLCLIENT
				For j:= 1 to Len(aPages)
					If aPages[j] == "Header 1"
						MsgRun( STR0314 ,STR0031,{|| SgaEnvolOPE(aHeadOcoEnv,aColsOcoEnv)}) //"Carregando Envolvidos, aguarde..."###"Carregando"
						oGetOcoEnv := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadOcoEnv,aColsOcoEnv)
						oGetOcoEnv:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetOcoEnv:oBrowse:Refresh()
					ElseIf aPages[j] == "Header 2"
						MsgRun( STR0313 ,STR0031,{|| SgaResOPE(aHeadResOco,aColsResOco)}) //"Carregando Resíduos da Ocorrência, aguarde..."###"Carregando"
						oGetResOco := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oFldRel:aDialogs[j],aHeadResOco,aColsResOco)
						oGetResOco:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
						oGetResOco:oBrowse:Refresh()
					EndIf
				Next j
			Else
				oPanel22:Hide()
			EndIf

		EndIf

	EndIf

	oBlackPnl:Free()
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Ins
Carrega o aHeader e aCols dos Insumos da OS.
@author Rafael Diogo Richter
@since 17/10/2008
@version undefined
@param aHeadOSIn, array
@param aColsOSIn, array
@obs  Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Ins(aHeadOSIn,aColsOSIn)

	Local nX
	Local nC
	Local aChoice

	aChoice := {"TL_TAREFA" , "TL_NOMTAR" , "TL_TIPOREG","TL_SEQRELA",;
				"TL_CODIGO" , "TL_NOMCODI", "TL_USACALE","TL_QUANTID", ;
				"TL_UNIDADE", "TL_DESTINO", "TL_OBSERVA","TL_DTINICI", ;
				"TL_HOINICI", "TL_DTFIM"  , "TL_HOFIM"  ,"TL_PCTHREX", ;
				"TL_LOCAL"  , "TL_LOTECTL", "TL_NUMLOTE","TL_LOCALIZ","TL_CUSTO","TL_NUMSERI",;
				"TL_ETAPA"  ,"TL_GARANTI" ,"TL_DTVALID"}

	//Monta aHeader
	aHeadOSIn := fConsultSX3("STL", aChoice)

	//Monta aCols
	dbSelectArea("STL")
	dbSetOrder(1)
	dbSeek(xFilial("STL")+STJ->TJ_ORDEM)
	nC := 0
	While !EoF() .And. STL->TL_FILIAL == xFilial("STL") .And. STL->TL_ORDEM == STJ->TJ_ORDEM
		nC++
		aAdd(aColsOSIn, Array(Len(aHeadOSIn)+1))
		For nX := 1 to Len(aHeadOSIn)
			If aHeadOSIn[nX][10] == "V"
				aColsOSIn[nC,nX] := CriaVar(AllTrim(aHeadOSIn[nX,2]))
			ElseIf !Empty(aHeadOSIn[nX][11])
				aColsOSIn[nC,nX] := NGRETSX3BOX(aHeadOSIn[nX,2],FieldGet(FieldPos(aHeadOSIn[nX,2])))
			Else
				aColsOSIn[nC,nX] := FieldGet(FieldPos(aHeadOSIn[nX,2]))
			EndIf
		Next
		aColsOSIn[nC,Len(aHeadOSIn)+1] := .F.

		STL->(dbSkip())
	EndDo

	If Len(aColsOSIn) == 0
		aColsOSIn := BlankGetD(aHeadOSIn)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Eta
Carrega o aHeader e aCols das Etapas da OS.
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param aHeadOSEt, array
@param aColsOSEt, array
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Eta(aHeadOSEt,aColsOSEt)

	Local nX
	Local nC
	Local aChoice

	aChoice := {"TQ_TAREFA"  , "TQ_NOMTARE" , "TQ_ETAPA","TQ_NOMETAP", ;
				"TQ_CODFUNC" , "TQ_SEQETA"}

	//Monta aHeader
	aHeadOSEt := fConsultSX3("STQ", aChoice)

	//Monta aCols
	dbSelectArea("STQ")
	dbSetOrder(1)
	dbSeek(xFilial("STQ")+STJ->TJ_ORDEM)
	nC := 0
	While !EoF() .And. STQ->TQ_FILIAL == xFilial("STQ") .And. STQ->TQ_ORDEM == STJ->TJ_ORDEM
		nC++
		aAdd(aColsOSEt, Array(Len(aHeadOSEt)+1))
		For nX := 1 to Len(aHeadOSEt)
			If aHeadOSEt[nX][10] == "V"
				aColsOSEt[nC,nX] := CriaVar(AllTrim(aHeadOSEt[nX,2]))
			ElseIf !Empty(aHeadOSEt[nX][11])
				aColsOSEt[nC,nX] := NGRETSX3BOX(aHeadOSEt[nX,2],FieldGet(FieldPos(aHeadOSEt[nX,2])))
			Else
				aColsOSEt[nC,nX] := FieldGet(FieldPos(aHeadOSEt[nX,2]))
			EndIf
		Next
		aColsOSEt[nC,Len(aHeadOSEt)+1] := .F.

		STQ->(dbSkip())
	EndDo

	If Len(aColsOSEt) == 0
		aColsOSEt := BlankGetD(aHeadOSEt)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Oco
Carrega o aHeader e aCols das Ocorrencias da OS.
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param aHeadOSOc, array
@param aColsOSOc, array
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Oco(aHeadOSOc,aColsOSOc)

	Local nX
	Local nC
	Local aChoice

	aChoice := {"TN_TAREFA" , "TN_NOMETAR" , "TN_CODOCOR","TN_NOMOCOR", ;
				"TN_CAUSA" , "TN_NOMCAUS" , "TN_SOLUCAO" ,"TN_NOMSOLU", ;
				"TN_DESCRIC"}

	//Monta aHeader
	aHeadOSOc := fConsultSX3("STN", aChoice)

	//Monta aCols
	dbSelectArea("STN")
	dbSetOrder(1)
	dbSeek(xFilial("STN")+STJ->TJ_ORDEM)
	nC := 0
	While !EoF() .And. STN->TN_FILIAL == xFilial("STN") .And. STN->TN_ORDEM == STJ->TJ_ORDEM
		nC++
		aAdd(aColsOSOc, Array(Len(aHeadOSOc)+1))
		For nX := 1 to Len(aHeadOSOc)
			If aHeadOSOc[nX][10] == "V"
				aColsOSOc[nC,nX] := CriaVar(AllTrim(aHeadOSOc[nX,2]))
			ElseIf !Empty(aHeadOSOc[nX][11])
				aColsOSOc[nC,nX] := NGRETSX3BOX(aHeadOSOc[nX,2],FieldGet(FieldPos(aHeadOSOc[nX,2])))
			Else
				aColsOSOc[nC,nX] := FieldGet(FieldPos(aHeadOSOc[nX,2]))
			EndIf
		Next
		aColsOSOc[nC,Len(aHeadOSOc)+1] := .F.

		STN->(dbSkip())
	EndDo

	If Len(aColsOSOc) == 0
		aColsOSOc := BlankGetD(aHeadOSOc)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Mot
Atualizacoes Sofridas Desde a Construcao Inicial.
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param aHeadOSMo, array
@param aColsOSMo, array
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Mot(aHeadOSMo,aColsOSMo)

	Local nX
	Local nC
	Local aChoice

	aChoice := {"TPL_CODMOT" , "TPL_DESMOT" , "TPL_DTINIC","TPL_HOINIC", "TPL_DTFIM" , "TPL_HOFIM"}

	//Monta aHeader
	aHeadOSMo := fConsultSX3("TPL", aChoice)

	//Monta aCols
	dbSelectArea("TPL")
	dbSetOrder(1)
	dbSeek(xFilial("TPL")+STJ->TJ_ORDEM)
	nC := 0
	While !EoF() .And. TPL->TPL_FILIAL == xFilial("TPL") .And. TPL->TPL_ORDEM == STJ->TJ_ORDEM
		nC++
		aAdd(aColsOSMo, Array(Len(aHeadOSMo)+1))
		For nX := 1 to Len(aHeadOSMo)
			If aHeadOSMo[nX][10] == "V"
				aColsOSMo[nC,nX] := CriaVar(AllTrim(aHeadOSMo[nX,2]))
			ElseIf !Empty(aHeadOSMo[nX][11])
				aColsOSMo[nC,nX] := NGRETSX3BOX(aHeadOSMo[nX,2],FieldGet(FieldPos(aHeadOSMo[nX,2])))
			Else
				aColsOSMo[nC,nX] := FieldGet(FieldPos(aHeadOSMo[nX,2]))
			EndIf
		Next
		aColsOSMo[nC,Len(aHeadOSMo)+1] := .F.

		TPL->(dbSkip())
	EndDo

	If Len(aColsOSMo) == 0
		aColsOSMo := BlankGetD(aHeadOSMo)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Car
Carrega o aHeader e aCols das Caracteristicas do Bem.
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param aHeadBeCa, array
@param aColsBeCa, array
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Car(aHeadBeCa,aColsBeCa)

	Local nX
	Local nC
	Local aChoice := {"TB_CARACTE" , "TB_NOME" , "TB_DETALHE" , "TB_UNIDADE", "TB_INFO02", "TB_CONDOP"}

   //Monta aHeader
	aHeadBeCa := fConsultSX3("STB", aChoice)

   //Monta aCols
	dbSelectArea("STB")
	dbSetOrder(1)
	dbSeek(xFilial("STB")+ST9->T9_CODBEM)
	nC := 0
	While !EoF() .And. STB->TB_FILIAL == xFilial("STB") .And. STB->TB_CODBEM == ST9->T9_CODBEM
		nC++
		aAdd(aColsBeCa, Array(Len(aHeadBeCa)+1))
		For nX := 1 to Len(aHeadBeCa)
			If aHeadBeCa[nX][10] == "V"
				aColsBeCa[nC,nX] := CriaVar(AllTrim(aHeadBeCa[nX,2]))
			ElseIf !Empty(aHeadBeCa[nX][11])
				aColsBeCa[nC,nX] := NGRETSX3BOX(aHeadBeCa[nX,2],FieldGet(FieldPos(aHeadBeCa[nX,2])))
			Else
				aColsBeCa[nC,nX] := FieldGet(FieldPos(aHeadBeCa[nX,2]))
			EndIf
		Next
		aColsBeCa[nC,Len(aHeadBeCa)+1] := .F.

		STB->(dbSkip())
	EndDo

	If Len(aColsBeCa) == 0
		aColsBeCa := BlankGetD(aHeadBeCa)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Pec
Carrega o aHeader e aCols das Pecas de Reposicao do Bem.
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param aHeadBePe, array
@param aColsBePe, array
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Pec(aHeadBePe,aColsBePe)

	Local nX
	Local nC
	Local aChoice

	aChoice := {"TPY_CODPRO" , "TPY_NOMPEC" , "TPY_QUANTI" ,"TPY_UNIDAD" ,;
				"TPY_CRITIC" , "TPY_QTDGAR" , "TPY_UNIGAR" ,"TPY_CONGAR" ,;
				"TPY_QTDCON" , "TPY_LOCGAR" , "TPY_SALDIS"}

	//Monta aHeader
	aHeadBePe := fConsultSX3("TPY", aChoice)

	//Monta aCols
	dbSelectArea("TPY")
	dbSetOrder(1)
	dbSeek(xFilial("TPY")+ST9->T9_CODBEM)
	nC := 0
	While !EoF() .And. TPY->TPY_FILIAL == xFilial("TPY") .And. TPY->TPY_CODBEM == ST9->T9_CODBEM
		nC++
		aAdd(aColsBePe, Array(Len(aHeadBePe)+1))
		For nX := 1 to Len(aHeadBePe)
			If aHeadBePe[nX][10] == "V"
				aColsBePe[nC,nX] := CriaVar(AllTrim(aHeadBePe[nX,2]))
			ElseIf !Empty(aHeadBePe[nX][11])
				aColsBePe[nC,nX] := NGRETSX3BOX(aHeadBePe[nX,2],FieldGet(FieldPos(aHeadBePe[nX,2])))
			Else
				aColsBePe[nC,nX] := FieldGet(FieldPos(aHeadBePe[nX,2]))
			EndIf
		Next
		aColsBePe[nC,Len(aHeadBePe)+1] := .F.

		TPY->(dbSkip())
	EndDo

	If Len(aColsBePe) == 0
		aColsBePe := BlankGetD(aHeadBePe)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Est
Carrega a Estrutura do Bem.
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param j
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Est(j)

	Local aDbf, cPai, x, i, nPaiID
	Local oFontB := TFont():New("Arial",,-12,,.T.)

	cPai := ST9->T9_CODBEM
	// Cria Arquivo de Trabalho
	aDbf := STC->(dbStruct())
		aAdd(aDbf, {"TC_SERVICO"   , "C", 06  , 0})
		aAdd(aDbf, {"TC_FAMBEM"    , "C", 16  , 0})
		aAdd(aDbf, {"TC_FAMCOMP "  , "C", 16  , 0})
		aAdd(aDbf, {"TC_INATI"     , "C", 01  , 0})

	cIdx1c902 := {{"TC_CODBEM" ,"TC_COMPONE","TC_SEQRELA"},;
				  {"TC_COMPONE","TC_CODBEM" ,"TC_SEQRELA"}}

	oArqc902 := fCriaTRB(cAliasTRB,aDbf,cIdx1c902)

	aArray := NGESTRU(cPai)
	aAdd(aArray,cPai)
	For x:=1 To Len(aArray)
		dbSelectArea("STF")
		dbSeek(xFilial('STF') + aArray[x])
		cSeq := "0"
		Do While stf->tf_filial == xFilial('STF') .And.;
				stf->tf_codbem == aArray[x]           .And.;
				!EOF()

			(cAliasTRB)->(dbAppend())
			(cAliasTRB)->TC_FILIAL  := xFilial('STF')
			(cAliasTRB)->TC_CODBEM  := aArray[x]
			(cAliasTRB)->TC_SERVICO := stf->tf_servico
			(cAliasTRB)->TC_DATAINI := If(STF->TF_PERIODO <> "E",NGXPROXMAN(stf->tf_codbem),CTOD('  /  /  '))
			(cAliasTRB)->TC_TIPOEST := "S"
			(cAliasTRB)->TC_INATI   := STF->TF_ATIVO
			If FindFunction("Soma1Old")
				(cAliasTRB)->TC_SEQRELA := PADL(SOMA1OLD(cSeq),3)
			Else
				(cAliasTRB)->TC_SEQRELA := PADL(SOMA1(cSeq),3)
			EndIf
			cSeq := (cAliasTRB)->TC_SEQRELA
			dbSelectArea("STF")
			dbSkip()
		EndDo
	Next
	dbSelectArea("STC")
	dbSetOrder(1)
	dbSeek(xFilial("STC")+cPai)

	While !EoF()                      .And.;
			STC->TC_FILIAL == xFilial('STC') .And.;
			STC->TC_CODBEM == cPai

		If STC->TC_TIPOEST <> 'B'
			dbSkip()
			Loop
		EndIf
		nRec   := Recno()
		cComp  := STC->TC_COMPONE
		cNivSTC := STC->TC_SEQRELA

		lTrb   := .T.

		(cAliasTRB)->(dbAppend())
		For i := 1 To 10
			(cAliasTRB)->(FieldPut(i,STC->(FieldGet(i))))
		Next i

		dbSelectArea("STC")
		If dbSeek(xFilial('STC')+cCOMP)
			MNT902PSON(cComp)
		EndIf
		dbGoto(nRec)
		dbSkip()
	End

	oTreeBem := dbTree():New(000, 000, 260, 180, oFldRel:aDialogs[j],{|| MNT902MLoc(oTreeBem:GetCargo()) },, .T.)
	oTreeBem:Align    := CONTROL_ALIGN_ALLCLIENT
	oTreeBem:nClrPane := RGB(221,221,221)
	oTreeBem:bChange:= {|| MNT902CE()}

	oPnlEstB         := TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(67,70,87),12,12,.F.,.F.)
	oPnlEstB:Align   := CONTROL_ALIGN_TOP
	oPnlEstB:nHeight := 25
	oPnlEstB:Hide()

	oPnlEstBL:=TPanel():New(900,900,,oFldRel:aDialogs[j],,,,,RGB(214,214,214),12,12,.F.,.F.)
	oPnlEstBL:Align := CONTROL_ALIGN_BOTTOM
	oPnlEstBL:nHeight := 25

	@ 000,010 Bitmap oLgnd1 Resource "Folder5" Size 25,25 Pixel Of oPnlEstBL Noborder When .F.
	@ 003,025 Say OemToAnsi(STR0122) Of oPnlEstBL Pixel //"Bem / Componente"

	@ 000,100 Bitmap oLgnd1 Resource "Folder7" Size 25,25 Pixel Of oPnlEstBL Noborder When .F.
	@ 003,115 Say OemToAnsi(STR0123) Of oPnlEstBL Pixel //"Manutenção Atrasada"

	@ 000,190 Bitmap oLgnd1 Resource "Folder10" Size 25,25 Pixel Of oPnlEstBL Noborder When .F.
	@ 003,205 Say OemToAnsi(STR0124) Of oPnlEstBL Pixel //"Manutenção em Dia"

	@ 000,280 Bitmap oLgnd1 Resource "Folder14" Size 25,25 Pixel Of oPnlEstBL Noborder When .F.
	@ 003,295 Say OemToAnsi(STR0125) Of oPnlEstBL Pixel //"Manutenção Inativa"

	@ 002,010 SAY oLoc VAR cLoc SIZE 348, 08 Color RGB(255,255,255) OF oPnlEstB PIXEL

	oPnlEstB:Refresh()
	oTreeBem:Refresh()

	dbSelectArea(cAliasTRB)
	dbSetOrder(1)
	If dbSeek(cPai)
		cDescBem2   := cPai+Replicate(" ",25-Len(Rtrim(cPai)))
		cProDesc := cDescBem2+' - '+cDescBem
		DbAddTree oTreeBem Prompt cProDesc Opened Resource "FOLDER5", "FOLDER6" Cargo cPai
		dbSelectArea(cAliasTRB)
		While !EoF() .And. AllTrim((cAliasTRB)->TC_CODBEM) == AllTrim(cPai)

			nRec  := Recno()
			cComp := (cAliasTRB)->TC_COMPONE
			cSeq  := (cAliasTRB)->TC_SEQRELA
			cItem := If(ST9->(dbSeek(xFilial('ST9')+cComp)),ST9->T9_NOME," ")

			If (cAliasTRB)->TC_TIPOEST == "S"
				ST4->(dbSeek(xFilial('ST4') + (cAliasTRB)->TC_SERVICO))
				cITEM  := (cAliasTRB)->TC_SERVICO  + "  " + If(Empty((cAliasTRB)->TC_DATAINI),STR0160,Dtoc((cAliasTRB)->TC_DATAINI))  //"(eventual)"
				dDtMan := (cAliasTRB)->TC_DATAINI
			Else
				If !empty((cAliasTRB)->TC_LOCALIZ)
					If TPS->( dbSeek(xFilial("TPS")+(cAliasTRB)->TC_LOCALIZ))
						cITEM := cITEM
					EndIf
				EndIf
			ENDIF
			dbSelectArea(cAliasTRB)
			If dbSeek(cComp)
				MNT902MTREE(cComp,cItem)
			Else
				cDescBem2   := cComp+Replicate(" ",25-Len(Rtrim(cComp)))
				If Empty(cDescBem2)
					cProDesc := cItem
				Else
					cProDesc := cDescBem2+' - '+cItem
				EndIf
				(cAliasTRB)->(dbSeek(cPai+cComp+cSeq))
				If (cAliasTRB)->TC_TIPOEST == "S"
					If (cAliasTRB)->TC_INATI == "N"
						DbAddItem oTreeBem Prompt cProDesc Resource "FOLDER14" Cargo cComp
					ElseIf !Empty(dDtMan) .And. dDtMan < dDataBase
						DbAddItem oTreeBem Prompt cProDesc Resource "FOLDER7" Cargo cComp
					Else
						DbAddItem oTreeBem Prompt cProDesc Resource "FOLDER10" Cargo cComp
					EndIf
				Else
					DbAddItem oTreeBem Prompt cProDesc Resource "FOLDER5" Cargo cComp
				EndIf
			EndIf
			dbGoTo(nRec)
			dbSkip()
		End

		DbEndTree oTreeBem
	EndIf

	oTreeBem:TREESEEK(cPai)
	oTreeBem:Refresh()
Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902Man
Carrega o aHeader e aCols das Manutencoes do Bem.
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param aHeadMan, array, descricao
@param aColsMan, array, descricao
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902Man(aHeadMan,aColsMan)
	Local nX
	Local nC
	Local aChoice

	aHeadMan := {}
	aColsMan := {}

	Inclui := .F.

	aChoice := {"TF_SERVICO" , "TF_NOMSERV" , "TF_SEQRELA" ,"TF_NOMEMAN" ,;
				"TF_CODAREA" , "TF_NOMAREA" , "TF_TIPO" , "TF_NOMTIPO" ,;
				"TF_CALENDA" , "TF_NOMCALE"}

	//Monta aHeader
	aHeadMan := fConsultSX3("STF", aChoice)

	//Monta aCols
	dbSelectArea("STF")
	dbSetOrder(1)
	dbSeek(xFilial("STF")+ST9->T9_CODBEM)
	nC := 0
	While !EoF() .And. STF->TF_FILIAL == xFilial("STF") .And. STF->TF_CODBEM == ST9->T9_CODBEM

		If STF->TF_ATIVO == "N"
			STF->( dbSkip() )
			Loop
		EndIf

		nC++
		aAdd(aColsMan, Array(Len(aHeadMan)+1))
		For nX := 1 to Len(aHeadMan)
			If aHeadMan[nX][10] == "V"
				aColsMan[nC,nX] := CriaVar(AllTrim(aHeadMan[nX,2]),.T.)
			ElseIf !Empty(aHeadMan[nX][11])
				aColsMan[nC,nX] := NGRETSX3BOX(aHeadMan[nX,2],FieldGet(FieldPos(aHeadMan[nX,2])))
			Else
				aColsMan[nC,nX] := FieldGet(FieldPos(aHeadMan[nX,2]))
			EndIf
		Next
		aColsMan[nC,Len(aHeadMan)+1] := .F.

		STF->(dbSkip())
	EndDo

	If Len(aColsMan) == 0
		aColsMan := BlankGetD(aHeadMan)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902HOs
Carrega o aHeader e aCols dos Historicos de OS do Bem.
@author Rafael Diogo Richter
@since 21/10/2008
@version undefined
@param aHeadBeHo, array
@param aColsBeHo, array
@param cRetPar, characters
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902HOs(aHeadBeHo,aColsBeHo,cRetPar)

	Local nX
	Local nC
	Local nOrdem
	Local nPlano
	Local aChoice

	aChoice := {"TJ_ORDEM"   , "TJ_PLANO"   , "TJ_DTORIGI" ,"TJ_SERVICO" ,;
				"TJ_NOMSERV" , "TJ_SEQRELA" , "TJ_TIPO"    , "TJ_NOMTIPO",;
				"TJ_CODAREA" , "TJ_NOMAREA" , "TJ_NOMAREA" , "TJ_CCUSTO" ,;
				"TJ_NOMCUST" , "TJ_POSCONT" , "TJ_HORACO1" , "TJ_DTMPINI",;
				"TJ_HOMPINI" , "TJ_DTMPFIM" , "TJ_HOMPFIM" , "TJ_DTMRINI",;
				"TJ_HOMRINI" , "TJ_DTMRFIM" , "TJ_HOMRFIM" , "TJ_TERMINO",;
				"TJ_SITUACA" , "TJ_CENTRAB" , "TJ_NOMTRAB" , "TJ_OBSERVA"}

	//Monta aHeader
	aHeadBeHo := fConsultSX3("STJ", aChoice)

	//Monta aCols
	dbSelectArea("STJ")
	dbSetOrder(2)
	dbSeek(xFilial("STJ")+"B"+ST9->T9_CODBEM)
	nC := 0
	While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == "B" .And. STJ->TJ_CODBEM == ST9->T9_CODBEM
		If If(cRetPar <> Nil, &cRetPar, .T.)
			nC++
			aAdd(aColsBeHo, Array(Len(aHeadBeHo)+1))
			For nX := 1 to Len(aHeadBeHo)
				If aHeadBeHo[nX][10] == "V"
					aColsBeHo[nC,nX] := CriaVar(AllTrim(aHeadBeHo[nX,2]))
				ElseIf !Empty(aHeadBeHo[nX][11])
					aColsBeHo[nC,nX] := NGRETSX3BOX(aHeadBeHo[nX,2],FieldGet(FieldPos(aHeadBeHo[nX,2])))
				Else
					aColsBeHo[nC,nX] := FieldGet(FieldPos(aHeadBeHo[nX,2]))
				EndIf
			Next
			aColsBeHo[nC,Len(aHeadBeHo)+1] := .F.
		EndIf

		STJ->(dbSkip())
	EndDo

	If Len(aColsBeHo) == 0
		aColsBeHo := BlankGetD(aHeadBeHo)
	Else
		nOrdem := GDFIELDPOS("TJ_ORDEM"     ,aHeadBeHo)
		nPlano := GDFIELDPOS("TJ_PLANO"     ,aHeadBeHo)
		aSort(aColsBeHo,,,{|x,y| x[nOrdem]+x[nPlano] < y[nOrdem]+y[nPlano] })
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902HC1
Carrega o aHeader e aCols dos Historicos de Contador do Bem.
@author Rafael Diogo Richter
@since 21/10/2008
@version undefined
@param aHeadBeHc1, array
@param aColsBeHc1, array
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902HC1(aHeadBeHc1,aColsBeHc1)

	Local nX
	Local nC
	Local aChoice

	aChoice := {"TP_DTORIGI" , "TP_POSCONT" , "TP_DTLEITU" ,;
				"TP_VARDIA" , "TP_ACUMCON","TP_VIRACON" ,;
				"TP_TIPOLAN" , "TP_HORA"}

	//Monta aHeader
	aHeadBeHc1 := fConsultSX3("STP", aChoice)

	//Monta aCols
	dbSelectArea("STP")
	dbSetOrder(5)
	dbSeek(xFilial("STP")+ST9->T9_CODBEM)
	nC := 0
	While !EoF() .And. STP->TP_FILIAL == xFilial("STP") .And. STP->TP_CODBEM == ST9->T9_CODBEM
		nC++
		aAdd(aColsBeHc1, Array(Len(aHeadBeHc1)+1))
		For nX := 1 to Len(aHeadBeHc1)
			If aHeadBeHc1[nX][10] == "V"
				aColsBeHc1[nC,nX] := CriaVar(AllTrim(aHeadBeHc1[nX,2]))
			ElseIf !Empty(aHeadBeHc1[nX][11])
				aColsBeHc1[nC,nX] := NGRETSX3BOX(aHeadBeHc1[nX,2],FieldGet(FieldPos(aHeadBeHc1[nX,2])))
			Else
				aColsBeHc1[nC,nX] := FieldGet(FieldPos(aHeadBeHc1[nX,2]))
			EndIf
		Next
		aColsBeHc1[nC,Len(aHeadBeHc1)+1] := .F.

		STP->(dbSkip())
	EndDo

	If Len(aColsBeHc1) == 0
		aColsBeHc1 := BlankGetD(aHeadBeHc1)
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902HC2  ³ Autor ³ Rafael Diogo Richter ³ Data ³21/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Carrega o aHeader e aCols dos Historicos de Contador do Bem. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902HC2(aHeadBeHc2,aColsBeHc2)
	Local nX
	Local nC
	Local aChoice

	aChoice := {"TPP_DTORIG" , "TPP_POSCON" , "TPP_DTLEIT" ,;
				"TPP_VARDIA" , "TPP_ACUMCO", "TPP_VIRACO" ,;
				"TPP_TIPOLA" , "TPP_HORA"}

	//Monta aHeader
	aHeadBeHc1 := fConsultSX3("TPP", aChoice)

	//Monta aCols
	dbSelectArea("TPP")
	dbSetOrder(5)
	dbSeek(xFilial("TPP")+ST9->T9_CODBEM)
	nC := 0
	While !EoF() .And. TPP->TPP_FILIAL == xFilial("TPP") .And. TPP->TPP_CODBEM == ST9->T9_CODBEM
		nC++
		aAdd(aColsBeHc2, Array(Len(aHeadBeHc2)+1))
		For nX := 1 to Len(aHeadBeHc2)
			If aHeadBeHc2[nX][10] == "V"
				aColsBeHc2[nC,nX] := CriaVar(AllTrim(aHeadBeHc2[nX,2]))
			ElseIf !Empty(aHeadBeHc2[nX][11])
				aColsBeHc2[nC,nX] := NGRETSX3BOX(aHeadBeHc2[nX,2],FieldGet(FieldPos(aHeadBeHc2[nX,2])))
			Else
				aColsBeHc2[nC,nX] := FieldGet(FieldPos(aHeadBeHc2[nX,2]))
			EndIf
		Next
		aColsBeHc2[nC,Len(aHeadBeHc2)+1] := .F.

		TPP->(dbSkip())
	EndDo

	If Len(aColsBeHc2) == 0
		aColsBeHc2 := BlankGetD(aHeadBeHc2)
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902PSON
Inclui no arquivo de trabalho os itens filhos
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param cPai, characters
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902PSON(cPai)

	Local nRec,i

	Do While STC->TC_CODBEM == cPai .And.;
			STC->TC_FILIAL == xFilial('STC')

		If STC->TC_TIPOEST <> 'B'
			dbSkip()
			Loop
		EndIf
		nRec  := Recno()
		cComp := STC->TC_COMPONE

		(cAliasTRB)->(dbAppend())
		For i := 1 TO 10
			(cAliasTRB)->(FieldPut(i,STC->(FieldGet(i))))
		Next i
		(cAliasTRB)->TC_FAMBEM  := Eval(bFami, STC->TC_CODBEM)
		(cAliasTRB)->TC_FAMCOMP := Eval(bFami, STC->TC_COMPONE)

		MsUnLock()

		dbSelectArea("STC")
		If dbSeek(xFilial('STC')+cComp)
			MNT902PSON(cCOMP)
		EndIf

		dbGoTo(nRec)
		dbSkip()
	EndDo

Return Nil

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902MTREE
Busca Itens filhos na estrutura - Funcao Recursiva
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param cPai, characters
@param cDescPaI, characters
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902MTREE(cPai,cDescPaI)

	Local nRec,cDescBem2

	cDescPai := If(ST9->(dbSeek(xFilial('ST9')+cPai)),ST9->T9_NOME," ")
	cDescBem2:= cPai+Replicate(" ",25-Len(Rtrim(cPai)))
	cProDesc := cDescBem2+' - '+cDescPai

	DbAddTree oTreeBem Prompt cProDesc Opened Resource "FOLDER5", "FOLDER6" Cargo cPai

	While (cAliasTRB)->TC_CODBEM == cPai .And. !(cAliasTRB)->(EoF())
		nRec  := Recno()
		cComp := (cAliasTRB)->TC_COMPONE
		cSeq  := (cAliasTRB)->TC_SEQRELA
		cItem := If(ST9->(dbSeek(xFilial('ST9')+cComp)),ST9->T9_NOME," ")
		dbSelectArea(cAliasTRB)
		If dbSeek(cComp)
			MNT902MTREE(cComp,cItem)
		Else
			If (cAliasTRB)->(dbSeek(cPai+cComp+cSeq))
				If !Empty( (cAliasTRB)->TC_SEQRELA ) .And. AllTrim( (cAliasTRB)->TC_SEQRELA ) <> '0'
					cDescBem2   := cComp+Replicate(" ",25-Len(Rtrim(cComp)))
					cProDesc := cDescBem2+' - '+cItem
					If (cAliasTRB)->TC_INATI == "N"
						DbAddItem oTreeBem Prompt (cAliasTRB)->TC_SERVICO + "  " + DtoC((cAliasTRB)->TC_DATAINI) Resource "FOLDER14" Cargo "-"+(cAliasTRB)->TC_SERVICO
					ElseIf !Empty((cAliasTRB)->TC_DATAINI) .And. (cAliasTRB)->TC_DATAINI < dDataBase
						DbAddItem oTreeBem Prompt (cAliasTRB)->TC_SERVICO + "  " + DtoC((cAliasTRB)->TC_DATAINI) Resource "FOLDER7" Cargo "-"+(cAliasTRB)->TC_SERVICO
					Else
						DbAddItem oTreeBem Prompt (cAliasTRB)->TC_SERVICO + "  " + If(Empty((cAliasTRB)->TC_DATAINI),STR0160,Dtoc((cAliasTRB)->TC_DATAINI)) Resource "FOLDER10" Cargo "-"+(cAliasTRB)->TC_SERVICO  //"(eventual)"
					EndIf
				Else
					cDescBem2   := cComp+Replicate(" ",25-Len(Rtrim(cComp)))
					cProDesc := cDescBem2+' - '+cItem
					DbAddItem oTreeBem Prompt cPRODESC RESOURCE "FOLDER5" CARGO cCOMP
				EndIf
			EndIf
		EndIf

		dbGoTo(nRec)
		dbSkip()
	END
	oTreeBem:TREESEEK(cPai)
	DbEndTree oTreeBem

Return Nil

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902MLoc
 Mostra a localizacao do Bem selecionado na estrutura
@author Rafael Diogo Richter
@since 20/10/2008
@version undefined
@param cCod, characters
@obs  Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Function MNT902MLoc(cCod)

	Local aAreaST9 := {}

	aAreaST9 := ST9->(GetArea())
	oPnlEstB:Hide()
	cLoc := ""

	dbSelectArea(cAliasTRB)
	dbSetOrder(2)
	If dbSeek(cCod)
		ST9->(dbSeek(xFilial('ST9')+(cAliasTRB)->TC_COMPONE))
		If !Empty((cAliasTRB)->TC_LOCALIZ)
			If TPS->(dbSeek(xFilial("TPS")+(cAliasTRB)->TC_LOCALIZ))
				oPnlEstB:Show()
				cLoc := STR0079+AllTrim((cAliasTRB)->TC_LOCALIZ)+" - "+Alltrim(TPS->TPS_NOME) //"Localização:   "
			EndIf
		EndIf
	EndIf

	oLoc:Refresh()
	RestArea(aAreaST9)

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902FOS
Funcao para filtrar as Ordens de Servico.
@author Rafael Diogo Richter
@since 21/10/2008
@version undefined
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902FOS()

	Local aChoice
	Local cRetParOld := cRetPar
	Local aNao := {"TJ_FILIAL" ,"TJ_TIPOOS" ,"TJ_CODBEM"}

	aChoice  := NGCAMPNSX3("STJ",aNao)

	cRetPar := BuildExpr("STJ",,cRetPar,.F.,,,aChoice,STR0080) //"Filtrar OS"
	If AllTrim(cRetParOld) <> AllTrim(cRetPar)
		If !Empty(cRetPar)
			aHeadBeHo := Array(0)
			aColsBeHo := Array(0)
			MsgRun(STR0054,STR0031,{||MNT902HOs(aHeadBeHo,aColsBeHo,cRetPar)}) //"Carregando Histórico de OS, aguarde..."###"Carregando"
		Else
			aHeadBeHo := Array(0)
			aColsBeHo := Array(0)
			MsgRun(STR0054,STR0031,{||MNT902HOs(aHeadBeHo,aColsBeHo)}) //"Carregando Histórico de OS, aguarde..."###"Carregando"
		EndIf
	EndIf

	oGetBeHo:aCols := aColsBeHo
	oGetBeHo:aHeader := aHeadBeHo
	oGetBeHo:oBrowse:Refresh()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902VOS  ³ Autor ³ Rafael Diogo Richter ³ Data ³22/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ funcao para visualizar a Ordem de Servico selecionada.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902VOS()
	Local nOrdem := GDFIELDPOS("TJ_ORDEM"     ,aHeadBeHo)
	Local nPlano := GDFIELDPOS("TJ_PLANO"     ,aHeadBeHo)

	dbSelectArea("STJ")
	dbSetOrder(1)
	dbSeek(xFilial("STJ")+aColsBeHo[oGetBeHo:nAt][nOrdem]+aColsBeHo[oGetBeHo:nAt][nPlano])
	NGCAD01('STJ',STJ->(Recno()),2)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902HOSI ³ Autor ³ Rafael Diogo Richter ³ Data ³24/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ funcao para mostrar os insumos da OS selecionada.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902HOSI()

	Local nX := 0
	Local nC := 0
	Local aChoice
	Local nOrdem := GDFIELDPOS("TJ_ORDEM"     ,aHeadBeHo)
	Local nPlano := GDFIELDPOS("TJ_PLANO"     ,aHeadBeHo)

	cHos := STR0081+AllTrim(aColsBeHo[oGetBeHo:nAt][nOrdem]) //"Insumos da OS:   "
	oBtnVOS:lVisible  := .F.
	oBtnHOSI:lVisible := .F.
	oBtnHOSO:lVisible := .F.
	oBtnHOSE:lVisible := .F.
	oBtnFOS:lVisible  := .F.
	oBtnHOSF:lVisible := .T.

	aChoice := {"TL_TAREFA" , "TL_NOMTAR" , "TL_TIPOREG", "TL_SEQRELA",;
				"TL_CODIGO" , "TL_NOMCODI", "TL_USACALE","TL_QUANTID", ;
				"TL_UNIDADE", "TL_DESTINO", "TL_OBSERVA","TL_DTINICI", ;
				"TL_HOINICI", "TL_DTFIM"  , "TL_HOFIM"  ,"TL_HREXTRA", ;
				"TL_LOCAL"  , "TL_LOTECTL", "TL_NUMLOTE","TL_LOCALIZ","TL_CUSTO","TL_NUMSERI",;
				"TL_ETAPA"  ,"TL_GARANTI" ,"TL_DTVALID"}

	//Monta aHeader
	aHeadHOSI := fConsultSX3("STL", aChoice)

	//Monta aCols
	dbSelectArea("STL")
	dbSetOrder(1)
	dbSeek(xFilial("STL")+aColsBeHo[oGetBeHo:nAt][nOrdem]+aColsBeHo[oGetBeHo:nAt][nPlano])
	nC := 0
	While !EoF() .And. STL->TL_FILIAL == xFilial("STL") .And. STL->TL_ORDEM == aColsBeHo[oGetBeHo:nAt][nOrdem] .And.;
			STL->TL_PLANO == aColsBeHo[oGetBeHo:nAt][nPlano]

		nC++
		aAdd(aColsHOSI, Array(Len(aHeadHOSI)+1))

		dbSelectArea("STJ")
		dbSetOrder(1)
		dbSeek(xFilial("STJ")+aColsBeHo[oGetBeHo:nAt][nOrdem]+aColsBeHo[oGetBeHo:nAt][nPlano])

		dbSelectArea("STL")

		For nX := 1 to Len(aHeadHOSI)
			If aHeadHOSI[nX][10] == "V"
				aColsHOSI[nC,nX] := CriaVar(AllTrim(aHeadHOSI[nX,2]))
			ElseIf !Empty(aHeadHOSI[nX][11])
				aColsHOSI[nC,nX] := NGRETSX3BOX(aHeadHOSI[nX,2],FieldGet(FieldPos(aHeadHOSI[nX,2])))
			Else
				aColsHOSI[nC,nX] := FieldGet(FieldPos(aHeadHOSI[nX,2]))
			EndIf
		Next
		aColsHOSI[nC,Len(aHeadHOSI)+1] := .F.

		STL->(dbSkip())
	EndDo

	If Len(aColsHOSI) == 0
		aColsHOSI := BlankGetD(aHeadHOSI)
	EndIf

	oGetHOSI := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanelHOS,aHeadHOSI,aColsHOSI)
	oGetHOSI:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

	oPanelHOST:Show()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902HOSF ³ Autor ³ Rafael Diogo Richter ³ Data ³24/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ funcao para retornar ao historico de os.                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902HOSF()

	oBtnVOS:lVisible  := .T.
	oBtnHOSI:lVisible := .T.
	oBtnHOSO:lVisible := .T.
	oBtnHOSE:lVisible := .T.
	oBtnFOS:lVisible  := .T.
	oBtnHOSF:lVisible := .F.
	oPanelHOST:Hide()

	If Type("oGetHOSI") == "O"
		oGetHOSI:Hide()
		oGetHOSI := NIL
		aHeadHOSI := Array(0)
		aColsHOSI := Array(0)
	EndIf
	If Type("oGetHOSO") == "O"
		oGetHOSO:Hide()
		oGetHOSO := NIL
		aHeadHOSO := Array(0)
		aColsHOSO := Array(0)
	EndIf
	If Type("oGetHOSE") == "O"
		oGetHOSE:Hide()
		oGetHOSE := NIL
		aHeadHOSE := Array(0)
		aColsHOSE := Array(0)
	EndIf

	oGetBeHo:Hide()
	oGetBeHo:Show()
	oGetBeHo:oBrowse:SetFocus()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902HOSO ³ Autor ³ Rafael Diogo Richter ³ Data ³24/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ funcao para mostrar as ocorrencias da OS selecionada.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902HOSO()

	Local nX := 0
	Local nC := 0
	Local aChoice
	Local nOrdem := GDFIELDPOS("TJ_ORDEM"     ,aHeadBeHo)
	Local nPlano := GDFIELDPOS("TJ_PLANO"     ,aHeadBeHo)

	cHos := STR0082+AllTrim(aColsBeHo[oGetBeHo:nAt][nOrdem]) //"Ocorrências da OS:   "
	oBtnVOS:lVisible  := .F.
	oBtnHOSI:lVisible := .F.
	oBtnHOSO:lVisible := .F.
	oBtnHOSE:lVisible := .F.
	oBtnFOS:lVisible  := .F.
	oBtnHOSF:lVisible := .T.

	aChoice := {"TN_TAREFA" , "TN_NOMETAR" , "TN_CODOCOR","TN_NOMOCOR", ;
				"TN_CAUSA" , "TN_NOMCAUS" , "TN_SOLUCAO" ,"TN_NOMSOLU", ;
				"TN_DESCRIC"}

	//Monta aHeader
	aHeadHOSO := fConsultSX3("STN", aChoice)

	//Monta aCols
	dbSelectArea("STN")
	dbSetOrder(1)
	dbSeek(xFilial("STN")+aColsBeHo[oGetBeHo:nAt][nOrdem]+aColsBeHo[oGetBeHo:nAt][nPlano])
	nC := 0
	While !EoF() .And. STN->TN_FILIAL == xFilial("STN") .And. STN->TN_ORDEM == aColsBeHo[oGetBeHo:nAt][nOrdem] .And.;
			STN->TN_PLANO == aColsBeHo[oGetBeHo:nAt][nPlano]

		nC++
		aAdd(aColsHOSO, Array(Len(aHeadHOSO)+1))

		dbSelectArea("STJ")
		dbSetOrder(1)
		dbSeek(xFilial("STJ")+aColsBeHo[oGetBeHo:nAt][nOrdem]+aColsBeHo[oGetBeHo:nAt][nPlano])

		dbSelectArea("STN")

		For nX := 1 to Len(aHeadHOSO)
			If aHeadHOSO[nX][10] == "V"
				aColsHOSO[nC,nX] := CriaVar(AllTrim(aHeadHOSO[nX,2]))
			ElseIf !Empty(aHeadHOSO[nX][11])
				aColsHOSO[nC,nX] := NGRETSX3BOX(aHeadHOSO[nX,2],FieldGet(FieldPos(aHeadHOSO[nX,2])))
			Else
				aColsHOSO[nC,nX] := FieldGet(FieldPos(aHeadHOSO[nX,2]))
			EndIf
		Next
		aColsHOSO[nC,Len(aHeadHOSO)+1] := .F.

		STN->(dbSkip())
	EndDo

	If Len(aColsHOSO) == 0
		aColsHOSO := BlankGetD(aHeadHOSO)
	EndIf

	oGetHOSO := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanelHOS,aHeadHOSO,aColsHOSO)
	oGetHOSO:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

	oPanelHOST:Show()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902HOSE ³ Autor ³ Rafael Diogo Richter ³ Data ³24/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ funcao para mostrar as etapas da OS selecionada.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902HOSE()

	Local nX := 0
	Local nC := 0
	Local aChoice
	Local nOrdem := GDFIELDPOS("TJ_ORDEM"     ,aHeadBeHo)
	Local nPlano := GDFIELDPOS("TJ_PLANO"     ,aHeadBeHo)

	cHos := STR0083+AllTrim(aColsBeHo[oGetBeHo:nAt][nOrdem]) //"Etapas da OS:   "
	oBtnVOS:lVisible  := .F.
	oBtnHOSI:lVisible := .F.
	oBtnHOSO:lVisible := .F.
	oBtnHOSE:lVisible := .F.
	oBtnFOS:lVisible  := .F.
	oBtnHOSF:lVisible := .T.


	aChoice := {"TQ_TAREFA"  , "TQ_NOMTARE" , "TQ_ETAPA","TQ_NOMETAP", ;
				"TQ_CODFUNC" , "TQ_SEQETA"}

	//Monta aHeader
	aHeadHOSE := fConsultSX3("STQ", aChoice)

	//Monta aCols
	dbSelectArea("STQ")
	dbSetOrder(1)
	dbSeek(xFilial("STQ")+aColsBeHo[oGetBeHo:nAt][nOrdem]+aColsBeHo[oGetBeHo:nAt][nPlano])
	nC := 0
	While !EoF() .And. STQ->TQ_FILIAL == xFilial("STQ") .And. STQ->TQ_ORDEM == aColsBeHo[oGetBeHo:nAt][nOrdem] .And.;
			STQ->TQ_PLANO == aColsBeHo[oGetBeHo:nAt][nPlano]

		nC++
		aAdd(aColsHOSE, Array(Len(aHeadHOSE)+1))

		dbSelectArea("STJ")
		dbSetOrder(1)
		dbSeek(xFilial("STJ")+aColsBeHo[oGetBeHo:nAt][nOrdem]+aColsBeHo[oGetBeHo:nAt][nPlano])

		dbSelectArea("STQ")

		For nX := 1 to Len(aHeadHOSE)
			If aHeadHOSE[nX][10] == "V"
				aColsHOSE[nC,nX] := CriaVar(AllTrim(aHeadHOSE[nX,2]))
			ElseIf !Empty(aHeadHOSE[nX][11])
				aColsHOSE[nC,nX] := NGRETSX3BOX(aHeadHOSE[nX,2],FieldGet(FieldPos(aHeadHOSE[nX,2])))
			Else
				aColsHOSE[nC,nX] := FieldGet(FieldPos(aHeadHOSE[nX,2]))
			EndIf
		Next
		aColsHOSE[nC,Len(aHeadHOSE)+1] := .F.

		STQ->(dbSkip())
	EndDo

	If Len(aColsHOSE) == 0
		aColsHOSE := BlankGetD(aHeadHOSE)
	EndIf

	oGetHOSE := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oPanelHOS,aHeadHOSE,aColsHOSE)
	oGetHOSE:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

	oPanelHOST:Show()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902ROS  ³ Autor ³ Rafael Diogo Richter ³ Data ³27/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Chama o retorno de OS modelo 2.                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902ROS()

	Local cCod		:= ""
	Local lDelItem 	:= .F.
	Local cFolderA	:= ""
	Local cFolderB	:= ""
	Local aRet435 	:= {}
	Local lMot 		:= .F.
	Local aAreaTRB 	:= {}
	Local cNivSup 	:= ''

	//Ponto de entrada para chamar retorno de O.S especifico
	If ExistBlock("MNTA9026")
		ExecBlock("MNTA9026",.F.,.F.)
	Else
		cCod := SubStr(oTree:GetCargo(),1,3)
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek("001"+cCod+cFilAnt)
		cNivSup := (cTRBSGA)->NIVSUP
		MsgRun(STR0084,STR0031,{||aRet435 := MNTA435(AllTrim((cTRBSGA)->CODTIPO),1)}) //"Carregando Retorno de O.S., aguarde..."###"Carregando"
	EndIf

	dbSelectArea("STJ")
	dbSetOrder(1)
	dbSeek(xFilial("STJ")+AllTrim((cTRBSGA)->CODTIPO))
	If STJ->TJ_TERMINO <> "N" .Or. STJ->TJ_SITUACA <> "L"

		cNivSup  := (cTRBSGA)->NIVSUP
		oTree:TreeSeek(AllTrim((cTRBSGA)->CODPRO)+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
		oTree:DelItem()
		RecLock((cTRBSGA),.F.)
		dbDelete()
		(cTRBSGA)->(MsUnlock())
		oTree:TreeSeek(AllTrim(cNivSup))
		oTree:Refresh()

		// Reprocessa cores da legenda quando está estiver habilitada.
		IIf( lByOpt, fReproClr( cNivSup ), Nil )

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+cNivSup+cFilAnt)
			If (cTRBSGA)->TIPO == "5"
				dbSelectArea("TQB")
				dbSetOrder(1)
				If dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO)
					If !Empty(TQB->TQB_DTFECH)
						cNivSup  := (cTRBSGA)->NIVSUP
						oTree:DelItem()
						RecLock((cTRBSGA),.F.)
						dbDelete()
						(cTRBSGA)->(MsUnlock())
						oTree:TreeSeek(cNivSup)
						oTree:Refresh()
					EndIf
				EndIf
			EndIf
			MNT902Chg(cNivSup,oTree:GetCargo())
		EndIf
	Else
		cFolderA := fRetImgOS()[1]
		cFolderB := cFolderA
		cCargo   := fRetImgOS()[2]
		oTree:ChangeBmp(cFolderA, cFolderB)
		oTree:ChangePrompt(STJ->TJ_ORDEM+" - "+(cTRBSGA)->DESCRI,AllTrim((cTRBSGA)->CODPRO)+cCargo+cFilAnt)

		dbSelectArea(oTree:cArqTree)
		dbSetOrder(4)
		dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
		(oTree:cArqTree)->T_CARGO := AllTrim((cTRBSGA)->CODPRO)+cCargo+cFilAnt

		RecLock(cTRBSGA,.F.)
		(cTRBSGA)->CARGO := cCargo
		(cTRBSGA)->(MsUnlock())

		// Reprocessa cores da legenda quando está estiver habilitada.
		IIf( lByOpt, fReproClr( (cTRBSGA)->NIVSUP ), Nil )

   //Altera o icone da solicitacao de servico
		aAreaTRB := (cTRBSGA)->(GetArea())
		cNivSup  := (cTRBSGA)->NIVSUP
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+cNivSup+cFilAnt)
			If (cTRBSGA)->TIPO == "5"
				dbSelectArea("TQB")
				dbSetOrder(1)
				If dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO)
					cFolderA := fRetImgSS()[1]
					cFolderB := cFolderA
					cCargo   := fRetImgSS()[2]

					oTree:TreeSeek(AllTrim((cTRBSGA)->CODPRO)+AllTrim((cTRBSGA)->CARGO)+cFilAnt)

					oTree:ChangeBmp(cFolderA, cFolderB)
					oTree:ChangePrompt((cTRBSGA)->CODTIPO+" - "+(cTRBSGA)->DESCRI,AllTrim((cTRBSGA)->CODPRO)+cCargo+cFilAnt)

					dbSelectArea(oTree:cArqTree)
					dbSetOrder(4)
					dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
					(oTree:cArqTree)->T_CARGO := AllTrim((cTRBSGA)->CODPRO)+cCargo+cFilAnt

					RecLock(cTRBSGA,.F.)
					(cTRBSGA)->CARGO := cCargo
					(cTRBSGA)->(MsUnlock())
				EndIf
			EndIf
		EndIf
		RestArea(aAreaTRB)
		oTree:TreeSeek(AllTrim((cTRBSGA)->CODPRO)+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
		oTree:Refresh()

	EndIf

	//Verificar se houve O.S. inclusa e inclui na arvore
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek("001"+cNivSup+cFilAnt)
	aAreaSTJ := STJ->(GetArea())
	dbSelectArea("STJ")
	dbSetOrder(2)
	dbSeek(xFilial("STJ")+"B"+(cTRBSGA)->CODTIPO)
	While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == "B" .And. STJ->TJ_CODBEM == (cTRBSGA)->CODTIPO
		
		If STJ->TJ_TERMINO == 'S' .Or. STJ->TJ_SITUACA != 'L' .Or.;
			!NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

			dbSelectArea("STJ")
			dbSetOrder(2)
			dbSkip()
			Loop

		EndIf

		nRec := (cTRBSGA)->( Recno() )

		dbSelectArea( cTRBSGA )
		dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
		If dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

			(cTRBSGA)->( dbGoto( nRec ) )
			dbSelectArea( 'STJ' )
			dbSetOrder( 2 ) // TJ_FILIAL + TJ_TIPOOS + TJ_CODBEM + TJ_SERVICO + TJ_SEQRELA + TJ_ORDEM + TJ_PLANO
			dbSkip()
			Loop

		EndIf

		(cTRBSGA)->( dbGoto( nRec ) )

		If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
			dbSelectArea("TT7")
			dbSetOrder(2)
			If dbSeek(xFilial("TT7")+STJ->TJ_ORDEM)
				dbSelectArea("STJ")
				dbSetOrder(2)
				dbSkip()
				Loop
			EndIf
		Else
			dbSelectArea("TQB")
			dbSetOrder(4)
			If dbSeek(xFilial("TQB")+STJ->TJ_ORDEM)
				dbSelectArea("STJ")
				dbSetOrder(2)
				dbSkip()
				Loop
			EndIf
		EndIf
		fIncOS(STJ->TJ_ORDEM, cNivSup, "BEM", .F.)
		dbSelectArea("STJ")
		dbSetOrder(2)
		dbSkip()
	End
	RestArea(aAreaSTJ)
	If Type("oFldRel") == "O"
		oFldRel:hide()
		oPanel22:FreeChildren()

		oFldRel:=NIL
		aPages  := {}
		aTitles := {}
		nControl := 0

		oGetOsIn  := NIL
		aHeadOSIn := Array(0)
		aColsOSIn := Array(0)
		oGetOsEt  := NIL
		aHeadOSEt := Array(0)
		aColsOSEt := Array(0)
		oGetOsOc  := NIL
		aHeadOSOc := Array(0)
		aColsOSOc := Array(0)
		oGetOsMo  := NIL
		aHeadOSMo := Array(0)
		aColsOSMo := Array(0)
		If !lDelItem
			MNT902Rel2()
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902IOS
Função para incluir a ordem de serviço para o Bem/Local.
@type static

@author Rafael Diogo Richter
@since 30/10/2008

@param  nOpc  , Númerico, Define o tipo de operação.
@return Lógico, Define se o processo foi relizado com êxito.
/*/
//---------------------------------------------------------------------
Static Function MNT902IOS( nOpc )

	Local cCod       := ''
	Local cNivSup    := ''
	Local cTipOS 	 := ''
	Local aAreaIOS   := {}
	Local aManOsPr   := {}
	Local lIncluiOS  := .F.
	Local lRet 		 := .T.
	Local nCOPIAOS   := GetMV( 'MV_NGCOPOS' )

	Private aGETS    := {}
	Private aTrocaF3 := {}
	Private aVETINR  := {}
	Private nOpcai   := 0
	Private nOpcae   := 0
	Private nOpcas   := 0
	Private cFILBEM  := xFilial( 'ST9' )
	Private lChkPR   := SuperGetMv( 'MV_NGCOQPR', .F., 'N' ) == 'S' //checa qtd pecas de reposicao
	Private TI_PLANO := '000000'

	cTipOS  := IIf( SubStr( oTree:GetCargo(), 4, 3 ) == 'BEM', 'B', 'L' )
	cNivSup := oTree:GetCargo()
	cCod    := SubStr( oTree:GetCargo(), 1, 3 )
	lCorret := .T. // Variavel de controle para inclusões de OS corretivas e preventivas.

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek("001"+cCod+cFilAnt)

	If nOpc == 1 .And. cTipOS == 'B'
		// Função que alerta a existência de preventiva atrasada
		lRet := NGOSABRVEN( (cTRBSGA)->CODTIPO,,.F.,.T.,.T.,,,,,1 )

	EndIf

	If lRet

		If nOpc == 1

			If SubStr(oTree:GetCargo(),4,3) == "BEM"
				aAreaIOS := ST9->(GetArea())
				lBemAL := .T.
				cBemAL := (cTRBSGA)->CODTIPO
				cCadastro := OemtoAnsi(STR0085) //"O.S. Corretiva"
				TIPOACOM  := NGSEEK( 'ST9', cBemAL, 1, 'T9_TEMCONT' ) == 'S'

				NG420INC('STJ',1,3)

				If STJ->TJ_TERMINO == "N" .And. STJ->TJ_SITUACA == "L" .And. STJ->TJ_CODBEM == cBemAL

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					lIncluiOS := !dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

				EndIf

				RestArea( aAreaIOS )

			Else
				aAreaIOS := TAF->(GetArea())
				lBemAL := .F.
				cBemAL := cCod

				dbSelectArea("TAF")
				dbSetOrder(7)
				If !dbSeek(xFilial("TAF")+"X2"+cBemAL)
					MsgAlert(STR0126+Chr(13)+Chr(10)+STR0127,STR0091) //"Código do nível ainda não cadastrado na tabela TAF. "###"Confirme a tela da Árvore Lógica para salvar a estrutura e tente novamente."###"Atenção!"
					lRet := .F.
				EndIf

				TIPOACOM  := .F.

				If lRet
					cCadastro := OemtoAnsi(STR0085) //"O.S. Corretiva"
					NG420INC('STJ',1,3)

					If STJ->TJ_TERMINO == "N" .And. STJ->TJ_SITUACA == "L" .And. AllTrim(STJ->TJ_CODBEM) == cCod

						dbSelectArea( cTRBSGA )
						dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
						lIncluiOS := !dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

					EndIf

				EndIf

				RestArea( aAreaIOS )

			EndIf

		Else

			lCorret := .F. // Variavel de controle para inclusões de OS corretivas e preventivas.

			dbSelectArea("ST9")
			dbSetOrder(1)
			dbSeek(xFilial("ST9")+AllTrim((cTRBSGA)->CODTIPO))
			aManOsPr := MNT902IOSPR()

			If aManOsPr[1]
				dbSelectArea("STF")
				dbSetOrder(1)
				dbSeek(xFilial("STF")+ST9->T9_CODBEM+aManOsPr[2]+aManOsPr[3])
				aAreaIOS := ST9->(GetArea())
				lBemAL := .T.
				cBemAL := (cTRBSGA)->CODTIPO
				NG410INC("STF",1,3)

				If STJ->TJ_TERMINO == 'N' .And. STJ->TJ_SITUACA == 'L' .And.;
					NGValidTUA( 'STJ', , , , ( STJ->TJ_PLANO == '000000' ) )

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					lIncluiOS := !dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

				EndIf

				RestArea(aAreaIOS)

			EndIf

		EndIf

	EndIf

	If lRet

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek("001"+cCod+cFilAnt)

		If lIncluiOS
			If nOpc == 1 .And. nCOPIAOS == 2
				dbSelectArea("STJ")
				dbSetOrder(2)
				dbSeek(xFilial("STJ")+cTipOS+If(cTipOS=="B",(cTRBSGA)->CODTIPO,cCod+Space(13)))
				While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == cTipOS .And. STJ->TJ_CODBEM == If(cTipOS=="B",(cTRBSGA)->CODTIPO,cCod+Space(13))

					If STJ->TJ_TERMINO == 'S' .Or. STJ->TJ_SITUACA != 'L' .Or.;
						!NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

						dbSelectArea("STJ")
						dbSetOrder(2)
						dbSkip()
						Loop

					EndIf

					nRec := (cTRBSGA)->( Recno() )

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					If dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

						(cTRBSGA)->( dbGoto( nRec ) )
						dbSelectArea( 'STJ' )
						dbSetOrder( 2 ) // TJ_FILIAL + TJ_TIPOOS + TJ_CODBEM + TJ_SERVICO + TJ_SEQRELA + TJ_ORDEM + TJ_PLANO
						dbSkip()
						Loop

					EndIf

					(cTRBSGA)->( dbGoto( nRec ) )

					If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
						dbSelectArea("TT7")
						dbSetOrder(2)
						If dbSeek(xFilial("TT7")+STJ->TJ_ORDEM)
							dbSelectArea("STJ")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
					Else
						dbSelectArea("TQB")
						dbSetOrder(4)
						If dbSeek(xFilial("TQB")+STJ->TJ_ORDEM)
							dbSelectArea("STJ")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
					EndIf

					IncProc() // Incrementa regua de processamento

					fIncOS(STJ->TJ_ORDEM, SubStr(cNivSup,1,3), SubStr(cNivSup,4,3), .F., TAF->TAF_MAT)
					oTree:TreeSeek( cNivSup )
					oTree:Refresh()

					dbSelectArea("STJ")
					dbSetOrder(2)
					dbSkip()
				End
			Else
				fIncOS(STJ->TJ_ORDEM, SubStr(cNivSup,1,3), SubStr(cNivSup,4,3), .F.)
				oTree:TreeSeek( cNivSup )
				oTree:Refresh()
			EndIf
		EndIf
	EndIf

	cCadastro := OemtoAnsi(STR0001) //"Árvore Lógica"

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902IOSPR ³ Autor ³ Rafael Diogo Richter ³ Data ³31/10/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para incluir a Ordem de Servico Preventiva.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT902IOSPR()

	Local oDlgMan, oPanelMan, oGetMaOSPr, oTitMan, cTitMan
	Local nOpca := 0, nServ := 0, nSeq := 0
	Local oFontB := TFont():New("Arial",,-12,,.T.)
	Local aManOsPr := {}

	aHeadBeMa := {}
	aColsBeMa := {}

	Define MsDialog oDlgMan From 0,0 To 250,640 Title STR0086+AllTrim(ST9->T9_CODBEM) Pixel //"Manutenções Disponíveis para o Bem: "

	oPanelMan := TPanel():New(900,900,,oDlgMan,,,,,RGB(67,70,87),200,200,.F.,.F.)
	oPanelMan:Align := CONTROL_ALIGN_TOP
	oPanelMan:nHeight := 25

	cTitMan := STR0087 //"Selecione a Manutenção desejada para a O.S. e confirme a tela:"
	@ 002,006 SAY oTitMan VAR cTitMan SIZE 200, 08 Font oFontB Color RGB(255,255,255) OF oPanelMan PIXEL

	MsgRun(STR0088,STR0031,{||MNT902Man(@aHeadBeMa,@aColsBeMa)}) //"Carregando Manutenções do Bem, aguarde..."###"Carregando"
	oGetMaOSPr := MsNewGetDados():New(0,0,200,200,0,,,,,,9999,,,,oDlgMan,aHeadBeMa,aColsBeMa)
	oGetMaOSPr:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
	oGetMaOSPr:oBrowse:Refresh()

	Activate MsDialog oDlgMan ON INIT EnchoiceBar(oDlgMan,{||nOpca := 1,oDlgMan:End()},{||oDlgMan:End()}) Centered

	nServ := GDFIELDPOS("TF_SERVICO" ,aHeadBeMa)
	nSeq  := GDFIELDPOS("TF_SEQRELA" ,aHeadBeMa)

	If nOpca == 1
		aManOsPr := {.T.,aColsBeMa[oGetMaOSPr:nAt][nServ],aColsBeMa[oGetMaOSPr:nAt][nSeq]}
	Else
		aManOsPr := {.F.,aColsBeMa[oGetMaOSPr:nAt][nServ],aColsBeMa[oGetMaOSPr:nAt][nSeq]}
	EndIf

Return aManOsPr

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902InId ³ Autor ³ Rafael Diogo Richter ³ Data ³18/12/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para incluir/alterar uma identificacao.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902InId(nOpc)

	Local oDlgLoc
	Local cCodLevel
	Local nLevel     := 0
	Local i
	Local nRecno  := 1
	Local aSize      := {}
	Local aInfo      := {}
	Local aObjects   := {}
	Local aPosObj    := {}
	Local aRelac     := {}
	Local aAreaQAA   := {}
	Local aAreaCTT   := {}
	Local aAreaSHB   := {}
	Local aNGButton  := {}
	Local cCodAnt    := cCodNiv
	Local lGrava     := .F.
	Local lDepto     := NGCADICBASE( "TAF_DEPTO" , "A" , "TAF" , .F. )
	Local bMNT902Val := IIf( nOpc <> 2, { || MNT902VlId( nOpc ) }, { || } )
	Local aNgHeader  := {}
	Local nTamTot 	 := 0
	Local nInd		 := 0
	Local cCampo 	 := ""
	Local cRelacaoSX3:= ""

	aAreaQAA := QAA->(GetArea())
	aAreaCTT := CTT->(GetArea())
	aAreaSHB := SHB->(GetArea())
	If nOpc == 3
		PutFileInEof("QAA")
		PutFileInEof("CTT")
		PutFileInEof("SHB")
	EndIf

	If nMod902 == 56
		SgaPvt100()
   		//(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV
		aAdd(aNgButton,{,{|| SgaDoc100(M->TAF_NOMNIV,M->TAF_CODNIV) },STR0301 ,STR0301 }) // Documentos Relacionados
		aAdd(aNgButton,{,{|| Sg100Resp(nOpc) },STR0299 ,STR0299 }) // Participantes
	EndIf

	If nOpc == 3
		cFolderA := 'FOLDER10'
		cFolderB := 'FOLDER11'

		cCodLevel := SubStr( oTree:GetCargo(), 1, 3 )
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek(cCodEst+cCodLevel+cFilAnt)
		nLevel := (cTRBSGA)->NIVEL

		Inclui := .T.
		nRecno := 1

		cCodNiv := fRetCodNiv()

		cLocal := cCodNiv

		aNgHeader := NGHeader("TAF",,.F.)
		nTamTot := Len(aNgHeader)
		For nInd := 1 To nTamTot
			cCampo 		:= aNgHeader[nInd,2]
			cRelacaoSX3	:= Posicione("SX3",2,cCampo,"X3_RELACAO")
			IF !Empty(cRelacaoSX3)
				xx  := "m->" + Trim(cCampo)
				yy  := Trim(cRelacaoSX3)
				&xx.:= &yy.
			EndIf
		Next nInd

	Else
		cLocal := SubStr( oTree:GetCargo(), 1, 3 )

		dbSelectArea('TAF')
		dbSetOrder(2)
		If dbSeek(xFilial('TAF')+cCodEst+cLocal)
			nRecno := Recno()
			nLevel := TAF->TAF_NIVEL
		Else
			nRecno := 1
		EndIf

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+cLocal+cFilAnt)
			aAdd( aRelac, {"TAF_NOMNIV","(cTRBSGA)->DESCRI"    } )
			aAdd( aRelac, {"TAF_CODNIV","cLocal"                  } )
			aAdd( aRelac, {"TAF_MAT"   ,"(cTRBSGA)->RESPONS"   } )
			If !(cValToChar(nMod902) $ "35/56")
				aAdd( aRelac, {"TAF_CENTRA","(cTRBSGA)->CENTRAB"   } )
				If lRetS
					aAdd( aRelac, {"TAF_ETAPA","(cTRBSGA)->ETAPA"   } )
				EndIf
			EndIf
			aAdd( aRelac, {"TAF_CCUSTO","(cTRBSGA)->CC"        } )
			If lDepto
				aAdd( aRelac, {"TAF_DEPTO" ,"(cTRBSGA)->DEPTO"		} )
			EndIf

			If lRateio
				aAdd(aRelac,{"TAF_RATEIO","(cTRBSGA)->RATEIO"   } )
			EndIf
			If lFamilia
				aAdd(aRelac,{"TAF_CODFAM","(cTRBSGA)->CODFAM"   } )
			EndIf
			If lCodAmb
				aAdd(aRelac,{"TAF_CODAMB","(cTRBSGA)->CODAMB"   } )
			EndIf
			If !Empty(aUserTAF)
				AddUserFld(aUserTAF, @aRelac, .F.)
			EndIf
		EndIf
	EndIf

	Define MsDialog oDlgLoc From 400.5,226 To 689,905 Title STR0092 Pixel //"Identificacao"

		oDlgLoc:lEscClose := .F.

		aNao := {}

		aAdd( aNao , "TAF_CODEST" )
		aAdd( aNao , "TAF_NIVEL"   )
		aAdd( aNao , "TAF_INDCON" )
		aAdd( aNao , "TAF_CODCON" )
		aAdd( aNao , "TAF_NIVSUP" )
		aAdd( aNao , "TAF_ORDEM"   )
		If nMod902 == 35 .And. nMod902 == 56
			aAdd( aNao , "TAF_CENTRA" )
			aAdd( aNao , "TAF_NOMTRA" )
			If lRetS
				aAdd( aNao , "TAF_ETAPA" )
			EndIf
		EndIf

		aChoice  := NGCAMPNSX3("TAF",aNao)

		aAdd(aObjects,{285,060,.F.,.F.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y
		aAdd(aObjects,{90,180,.T.,.T.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y e assume que retorno sera em linha final coluna final (.F.)
		aSize:=MsAdvSize()
		aInfo:={aSize[1],aSize[2],aSize[3],aSize[4],3,3}
		aPosObj:=MsObjSize(aInfo,aObjects,.T.)

		dbSelectArea("TAF")
		RegToMemory("TAF",nOpc==3)
		oEnc01 := MsMGet():New("TAF",1,nOpc,,,,aChoice,{0,0,285,315},,3,,,,,,.T.,.F.,,,,,,,.T.)
		oEnc01:oBox:Align := CONTROL_ALIGN_ALLCLIENT

		For i := 1 to Len(aRELAC)
			cCampo := "M->" + aRELAC[i][1]
			cRelac := aRELAC[i][2]
			&cCampo. := &cRelac
		Next
		dbSelectArea("QAA")
		dbSetOrder(1)
		If dbSeek(xFilial("QAA")+(cTRBSGA)->RESPONS)
			M->TAF_NOMRES   := QAA->QAA_NOME
		Else
			M->TAF_NOMRES := Space(Len(QAA->QAA_NOME))
		EndIf

		dbSelectArea("CTT")
		dbSetOrder(1)
		If dbSeek(xFilial("CTT")+(cTRBSGA)->CC) .And. nOpc <> 3
			M->TAF_NOMCC := CTT->CTT_DESC01
		Else
			M->TAF_NOMCC := Space(Len(CTT->CTT_DESC01))
		EndIf

		If lDepto
			dbSelectArea("SQB")
			dbSetOrder(1)
			If dbSeek(xFilial("SQB")+(cTRBSGA)->DEPTO) .And. nOpc <> 3
				M->TAF_DESCDP := SQB->QB_DESCRIC
			Else
				M->TAF_DESCDP := Space(Len(SQB->QB_DESCRIC))
			EndIf
		EndIf

		dbSelectArea("SHB")
		dbSetOrder(1)
		If dbSeek(xFilial("SHB")+(cTRBSGA)->CENTRAB) .And. nOpc <> 3
			M->TAF_NOMTRA := SHB->HB_NOME
		Else
			M->TAF_NOMTRA := Space(Len(SHB->HB_NOME))
		EndIf
		If nOpc == 3
			M->TAF_NOMRES := Space(Len(QAA->QAA_NOME))
			M->TAF_NOMCC  := Space(Len(CTT->CTT_DESC01))
			M->TAF_NOMTRA := Space(Len(SHB->HB_NOME))
		EndIf
		If lFamilia
			dbSelectArea("ST6")
			dbSetOrder(1)
			If dbSeek(xFilial("ST6")+(cTRBSGA)->CODFAM) .And. nOpc <> 3
				M->TAF_DESFAM := ST6->T6_NOME
			Else
				M->TAF_DESFAM := Space(Len(ST6->T6_NOME))
			EndIf
		EndIf
		If lCodAmb
			dbSelectArea("TNE")
			dbSetOrder(1) //TNE_FILIAL+TNE_CODAMB
			If dbSeek(xFilial("TNE")+(cTRBSGA)->CODAMB) .And. nOpc <> 3
				M->TAF_NOMAMB := TNE->TNE_NOME
			Else
				M->TAF_NOMAMB := Space(Len(TNE->TNE_NOME))
			EndIf
		EndIf

	Activate MsDialog oDlgLoc ON INIT EnchoiceBar(oDlgLoc,{|| If( !Eval( bMNT902Val ) .Or. !Obrigatorio(aGets,aTela) ,lGrava := .F.,(lGrava:=.T.,oDlgLoc:End()))},;
		{|| lGrava := .F.,oDlgLoc:End()},,aNGButton) Centered

	If lGrava
		dbSelectArea(oTree:cArqTree)
		If nOpc == 3
			oTree:AddItem(M->TAF_NOMNIV,cLocal+'LOC'+cFilAnt,cFolderA,cFolderB,,, 2)
			dbSelectArea(cTRBSGA)
			RecLock((cTRBSGA),.T.)
			(cTRBSGA)->FILIAL  := cFilAnt
			(cTRBSGA)->CODEST  := cCodEst
			(cTRBSGA)->CODPRO  := cLocal
			(cTRBSGA)->DESCRI  := M->TAF_NOMNIV
			(cTRBSGA)->NIVSUP  := SubStr( oTree:GetCargo(), 1, 3 )
			(cTRBSGA)->RESPONS := M->TAF_MAT
			(cTRBSGA)->CC      := M->TAF_CCUSTO
			If lDepto
				(cTRBSGA)->DEPTO   := M->TAF_DEPTO
			EndIf
			(cTRBSGA)->CENTRAB := If( nMod902 <> 35 .And. nMod902 <> 56, M->TAF_CENTRA, "" )
			(cTRBSGA)->DOCFIL  := ""
			(cTRBSGA)->TIPO    := '2'
			If nMod902 == 19
				(cTRBSGA)->MODMNT  := 'X'
			ElseIf nMod902 == 35
				(cTRBSGA)->MODMDT  := 'X'
			ElseIf nMod902 == 56
				(cTRBSGA)->MODSGA  := 'X'
			EndIF
			(cTRBSGA)->ORDEM  := cLocal
			(cTRBSGA)->NIVEL    := nLevel+1
			(cTRBSGA)->CARGO   := "LOC"
			If lRetS
				(cTRBSGA)->ETAPA  := If( nMod902 <> 35 .And. nMod902 <> 56, M->TAF_ETAPA, "" )
			EndIf
			If lRateio
				(cTRBSGA)->RATEIO  := M->TAF_RATEIO
			EndIf
			If lFamilia
				(cTRBSGA)->CODFAM  := M->TAF_CODFAM
			EndIf
			If lCodAmb
				(cTRBSGA)->CODAMB := M->TAF_CODAMB
			EndIf
			If lSitNiv
				(cTRBSGA)->SITNIV  := M->TAF_SITNIV
				(cTRBSGA)->ATFIL   := "0"
			EndIf
			If !Empty(aUserTAF)
				RecUserFld(aUserTAF, "M", "(cTRBSGA)")
			EndIf
			(cTRBSGA)->(MsUnlock())

		Else
			oTree:ChangePrompt(M->TAF_NOMNIV,cLocal+"LOC"+cFilAnt)
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek(cCodEst+cLocal+cFilAnt)
				RecLock((cTRBSGA),.F.)
				(cTRBSGA)->DESCRI  := M->TAF_NOMNIV
				(cTRBSGA)->RESPONS := M->TAF_MAT
				(cTRBSGA)->CC      := M->TAF_CCUSTO
				If lDepto
					(cTRBSGA)->DEPTO   := M->TAF_DEPTO
				EndIf
				(cTRBSGA)->CENTRAB := IIf( nMod902 <> 35 .And. nMod902 <> 56, M->TAF_CENTRA, "" )
				(cTRBSGA)->DOCFIL  := ""
				If lRetS
					(cTRBSGA)->ETAPA := IIf( nMod902 <> 35 .And. nMod902 <> 56, M->TAF_ETAPA, "" )
				EndIf
				If nMod902 == 19
					(cTRBSGA)->MODMNT  := 'X'
				ElseIf nMod902 == 35
					(cTRBSGA)->MODMDT  := 'X'
				ElseIf nMod902 == 56
					(cTRBSGA)->MODSGA  := 'X'
				EndIF
				If lRateio
					(cTRBSGA)->RATEIO  := M->TAF_RATEIO
				EndIf
				If lFamilia
					(cTRBSGA)->CODFAM  := M->TAF_CODFAM
				EndIf
				If lCodAmb
					(cTRBSGA)->CODAMB := M->TAF_CODAMB
				EndIf
				If lSitNiv
					(cTRBSGA)->SITNIV  := M->TAF_SITNIV
					(cTRBSGA)->ATFIL   := "0"
				EndIf
				If !Empty(aUserTAF)
					RecUserFld(aUserTAF, "M", "(cTRBSGA)")
				EndIf
				(cTRBSGA)->(MsUnlock())

				dbSelectArea(oTree:cArqTree)
				dbSetOrder(4)
				dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
				(oTree:cArqTree)->T_CARGO := cLocal+"LOC"+cFilAnt
			EndIf
		EndIf
		oTree:TreeSeek(cLocal+cFilAnt)
		oTree:Refresh()
		oTree:SetFocus()
		If nMod902 == 56
			dbSelectArea(cTRBTAP)
			dbSetOrder(1)
			dbSeek(cLocal)
			While !eof() .And. (cTRBTAP)->CODNIV == cLocal
				dbSelectArea(cTRBTAK)
				dbSetOrder(1)
				If dbSeek(cLocal+(cTRBTAP)->CODFUN+(cTRBTAP)->MAT)
					RecLock(cTRBTAK,.F.)
				Else
					RecLock(cTRBTAK,.T.)
				EndIf
				(cTRBTAK)->CODNIV := cLocal
				(cTRBTAK)->CODFUN := (cTRBTAP)->CODFUN
				(cTRBTAK)->MAT    := (cTRBTAP)->MAT
				(cTRBTAK)->OPERAC := (cTRBTAP)->OPERAC
				(cTRBTAK)->(MsUnlock())
				dbSelectArea(cTRBTAP)
				dbSkip()
			End

		EndIf
	Else
		cCodNiv := cCodAnt
		cLocal := cCodAnt
	EndIf
   //Atualiza Legenda
	If Type("oIdent") == "O"
		nIdent++
		oIdent:Refresh()
	EndIf

	RestArea(aAreaQAA)
	RestArea(aAreaCTT)
	RestArea(aAreaSHB)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³DeleteIdent³Autor ³ Vitor Emanuel Batista ³ Data ³07/06/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Exclui identificacao pai e filhos selecionado no oTree      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function DeleteIdent(cTipo,lMsg)

	Local cLocal, cPai
	Local nX := 1//,nY, nPos
	Local nLenSon := 1
	Local aDelete := {}
	Local aArea
	Local cNivSup := ""
	Local cItem
	Local cMsg

	Default lMsg := .T.

	cLocal := SubStr( oTree:GetCargo(), 1, 3 )

	If cLocal == "001"
		MsgStop(STR0093,STR0091) //"Não é possível excluir o 1º item da Estrutura."###"Atenção!"
		Return .F.
	EndIf


	If cTipo == "L"
		cItem := oTree:GetPrompt()
		cMsg  := STR0128+STR0129+" "+AllTrim(cItem)+"?"
	ElseIf cTipo == "F"
		cItem := SubStr( oTree:GetPrompt() , Len(SRJ->RJ_FUNCAO) + 1 )
		cMsg  := STR0173 +" "+AllTrim(cItem)+"?" //"Confirma a exclusão da Função"
	ElseIf cTipo == "T"
		cItem := SubStr( oTree:GetPrompt() , Len(TN5->TN5_CODTAR) + 1 )
		cMsg  := STR0213 +" "+AllTrim(cItem)+"?" //"Confirma a exclusão da Tarefa"
	ElseIf cTipo == "P"
		cItem := SubStr( oTree:GetPrompt() , Len(TG1->TG1_CODPER) + 1 )
		cMsg  := STR0174 +" "+AllTrim(cItem)+"?" //"Confirma a exclusão do Perigo"
	ElseIf cTipo == "R"
		cItem := SubStr( oTree:GetPrompt() , Len(TN0->TN0_NUMRIS) + 1 )
		cMsg  := STR0227 +" "+AllTrim(cItem) //"Confirma a exclusão do Risco"
	ElseIf cTipo == "1"
		cItem := SubStr( oTree:GetPrompt() , Len(TAX->TAX_CODRES) + 1 )
		cMsg  := STR0287 +" "+AllTrim(cItem)+"?" //"Confirma a exclusão do Resíduo" //todo
	ElseIf cTipo == "2"
		cItem := SubStr( oTree:GetPrompt() , Len(TA4->TA4_CODASP) + 1 )
		cMsg  := STR0288 +" "+AllTrim(cItem)+"?" //"Confirma a exclusão do Resíduo" //todo
	ElseIf cTipo == "3"
		cItem := SubStr( oTree:GetPrompt() , Len(TA4->TA4_CODASP) + 1 )
		cMsg  := STR0289 +" "+AllTrim(cItem)+"?" //"Confirma a exclusão do Resíduo" //todo
	Else
		cItem := SubStr(oTree:GetPrompt(),1,16)
		cMsg  := STR0128+STR0130+" "+AllTrim(cItem)+"?"
	EndIf
	If lMsg
		If !MsgYesNo(cMsg,STR0101) //"Confirma a exclusão do "###"Item"###"Bem"###"Atenção"
			Return .F.
		EndIf
	EndIf

	oTree:BeginUpdate()
	oTree:SetDisable()
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek("001"+cLocal+cFilAnt)

		cNivSup := (cTRBSGA)->NIVSUP+"LOC"+cFilAnt

		aAdd(aDelete,(cTRBSGA)->CODPRO)

      	// Verifica se existe O.S ou SS para a localizacao
		If !VerifOSIden()
			oTree:EndUpdate()
			oTree:SetEnable()
			Return .F.
		EndIf
		// Verifica se existe Ocorrência para o Resíduo
		If !VerifOcorr()
			oTree:EndUpdate()
			oTree:SetEnable()
			Return .F.
		EndIf

		// Verificar se o risco possui relacionamentos
		If AllTrim((cTRBSGA)->CARGO) == "RIS"
			dbSelectarea("TN0")
			dbSetOrder(1)
			If dbSeek(xFilial("TN0") + AllTrim((cTRBSGA)->CODTIPO)) .And. !Mdt180Vlf(5) //Função para verificar a integridade relacional do risco
				oTree:EndUpdate()
				oTree:SetEnable()
				Return .F.
			EndIf
		EndIf

		aArea := GetArea()
		aAreaTAF := GetArea()
		dbSelectArea( "TAF" )
		dbSetOrder( 2 )
		dbSeek( xFilial( "TAF" ) + (cTRBSGA)->CODEST + (cTRBSGA)->CODPRO )

		If !NGVALSX9( "TAF" , { "TAF" } , .T.)
			oTree:EndUpdate()
			oTree:SetEnable()
			Return .F.
		EndIf

		RestArea(aAreaTAF)
		RestArea(aArea)
		dbSelectArea(cTRBSGA)
		dbSetOrder(1)

		While nX <= nLenSon
			cPai := aDelete[nX]
			dbSeek('001'+cPai+cFilAnt)

			While !EoF() .And. (cTRBSGA)->NIVSUP == cPai .And. (cTRBSGA)->FILIAL == cFilAnt

				If Empty((cTRBSGA)->DELETADO)
               		// Verifica se a identificacao ja foi carregada no TRB
					nPos := aScan(aItensCar, {|x| x == (cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt})

					If nPos == 0 //Carrega dados no TRB
						aArea := (cTRBSGA)->(GetArea())
						oTree:TreeSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
						MNT902VChg(.F.,.F.)
						RestArea(aArea)
					EndIf

               		// Verifica se existe O.S ou SS para a localizacao
					If !VerifOSIden()
						oTree:EndUpdate()
						oTree:SetEnable()
						MNT902MoLg(oTree:GetCargo())
						Return .F.
					EndIf

					// Verificar se o risco possui relacionamentos
					If AllTrim((cTRBSGA)->CARGO) == "RIS"
						dbSelectarea("TN0")
						dbSetOrder(1)

						If dbSeek(xFilial("TN0") + AllTrim((cTRBSGA)->CODTIPO)) .And. !Mdt180Vlf(5) //Função para verificar a integridade referencial do risco
							oTree:EndUpdate()
							oTree:SetEnable()
							MNT902MoLg(oTree:GetCargo())
							Return .F.
						EndIf

					EndIf

					aAdd(aDelete,(cTRBSGA)->CODPRO)
					nLenSon++
				EndIf

				dbSelectArea(cTRBSGA)
				dbSkip()
			EndDo

			nX++
		EndDo

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)//CODEST+CODPRO+FILIAL

		For nX := Len(aDelete) To 1 Step -1
			dbSeek("001"+aDelete[nX]+cFilAnt)
			RecLock(cTRBSGA,.F.)

			IF (cTRBSGA)->TIPO == _nPosPerigo .Or. (cTRBSGA)->TIPO == _nPosDano .And. ;
					(cTRBSGA)->TIPO == __cTpRes .And. (cTRBSGA)->TIPO == __cTpOcRes .And.;
					(cTRBSGA)->TIPO == __cTpAsp .And. (cTRBSGA)->TIPO == __cTpPE .And. (cTRBSGA)->TIPO == __cTpOcPE
				dbDelete()
			Else
				(cTRBSGA)->DELETADO := 'X'
			EndIf

			If oTree:TreeSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
				oTree:DelItem()
			EndIf

			(cTRBSGA)->(MsUnlock())
		Next nX

		oTree:EndUpdate()
		oTree:SetEnable()
	EndIf

	// Reprocessa cores da legenda quando está estiver habilitada.
	IIf( lByOpt, fReproClr( (cTRBSGA)->NIVSUP ), Nil )

	oTree:TreeSeek(cNivSup+cFilAnt)
	MNT902MoLg(cNivSup)

	If ExistBlock("SGAA1004")
		ExecBlock("SGAA1004",.F.,.F.)
	EndIf

	IIf(!lByOpt,oTree:Refresh(),)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³VerifOSIden³Autor ³ Vitor Emanuel Batista ³ Data ³07/06/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verifica se a localizacao tem alguma O.S ou S.S, bloqueando ³±±
±±³          ³a exclusao da Identificacao                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function VerifOSIden()

	Local aArea := GetArea()
	Local lRet	:= .T.

	If AllTrim((cTRBSGA)->CARGO) == "LOC"
		dbSelectArea("STJ")
		dbSetOrder(2)
		If dbSeek(xFilial("STJ")+"L"+(cTRBSGA)->CODPRO) .And. STJ->TJ_SITUACA <> "C"
			MsgStop(STR0094+CHR(13)+CHR(10)+STR0095+STJ->TJ_ORDEM,STR0091) //"Esse Item não pode ser excluído pois existe Ordem de Serviço relacionada ao mesmo."###"Ordem: "###"Atenção!"
			lRet := .F.
		EndIf

		dbSelectArea("STS")
		dbSetOrder(2)
		If dbSeek(xFilial("STS")+"L"+(cTRBSGA)->CODPRO) .And. lRet
			MsgStop(STR0096+CHR(13)+CHR(10)+STR0095+STS->TS_ORDEM,STR0091) //"Esse Item não pode ser excluído pois existe Histórico de Manutenção relacionado ao mesmo."###"Ordem: "###"Atenção!"
			lRet := .F.
		EndIf

		dbSelectArea("TQB")
		dbSetOrder(5)
		If dbSeek(xFilial("TQB")+(cTRBSGA)->CODPRO) .And. TQB->TQB_SOLUCA <> "C" .And. lRet
			If TQB->TQB_TIPOSS == "L"
				MsgStop(STR0097+CHR(13)+CHR(10)+STR0098+TQB->TQB_SOLICI,STR0091) //"Esse Item não pode ser excluído pois existe Solicitação de Serviço relacionado ao mesmo."###"Solicitação: "###"Atenção!"
				lRet := .F.
			EndIf
		EndIf

		dbSelectArea("TAV")
		dbSetOrder(2)
		If dbSeek(xFilial("TAV")+cCodEst+(cTRBSGA)->CODPRO) .And. lRet
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek(cCodEst+(cTRBSGA)->NIVSUP)
			If !Empty((cTRBSGA)->DELETADO)
				MsgStop(STR0091+CHR(13)+CHR(10)+STR0284)
				lRet := .F.
			EndIf
		EndIf

		dbSelectArea("TAG")
		dbSetOrder(2)
		If dbSeek(xFilial("TAG")+cCodEst+(cTRBSGA)->CODPRO) .And. lRet
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek(cCodEst+(cTRBSGA)->CODPRO)
			If !Empty((cTRBSGA)->DELETADO)
				MsgStop(STR0091+CHR(13)+CHR(10)+STR0285)
				lRet := .F.
			EndIf
		EndIf

		dbSelectArea("TBC")
		dbSetOrder(2)
		If dbSeek(xFilial("TBC")+cCodEst+(cTRBSGA)->CODPRO) .And. lRet
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek(cCodEst+(cTRBSGA)->CODPRO)
			If !Empty((cTRBSGA)->DELETADO)
				MsgStop(STR0091+CHR(13)+CHR(10)+STR0286)
				lRet := .F.
			EndIf
		EndIf
	EndIf

	RestArea(aArea)

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} VerifOcorr
Verifica as ocorrências de resíduo

@source MNTA902.prx

@sample VerifOcorr()

@return Lógico, Indica se pode realizar a exclusão

@author Jackson Machado
@since 10/11/2016
/*/
//---------------------------------------------------------------------
Static Function VerifOcorr()

	Local aArea := GetArea()
	Local lRet	:= .T.

	If AllTrim((cTRBSGA)->CARGO) == "RES"
		dbSelectArea("TBJ")
		dbSetOrder( 2 )
		If dbSeek( xFilial( "TBJ" ) + ( cTRBSGA )->CODEST + ( cTRBSGA )->NIVSUP )
			MsgStop( "Esse Item não pode ser excluído pois existe(m) Ocorrência(s) relacionada(s) ao mesmo." ,STR0091) //###"Atenção!"
			lRet := .F.
		EndIf
	EndIf

	RestArea( aArea )

Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902VChg³ Autor ³ Rafael Diogo Richter  ³ Data ³22/04/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Verifica se o item selecionado ja foi carregado             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³lProcess - Indica se a funcao exibira Processamentos        ³±±
±±³          ³lLegenda - Indica se a funcao carregara as legendas         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902VChg(lProcess,lLegenda)

	Local nPos := 0
	Local cCodItem := SubStr(oTree:GetCargo(),1,3)
	Local cCargo := SubStr(oTree:GetCargo(),4,3)
	Local lPai := .F.
	Local nFil := 0
	Local lCarga := .F.

	Default lProcess := .T.
	Default lLegenda := .T.

	//Varialve utilizada no ponto de entrada para habiltar ou desabilitar o bChange da Arvore NAO DELETAR
	If !lBChange
		lBChange := .T.
		Return .T.
	EndIf

	// Trava Árvore para realizar processamento ( para prevenir possíveis erros de processamento )
	oTree:Disable()
	cFilAnt := SubStr(oTree:GetCargo(),7,__nSizeFil)

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek(cCodEst+cCodItem+cFilAnt)
	If (cTRBSGA)->TIPO <> "6"
		lPai := .T.
	EndIf

	nPos := aScan(aItensCar, {|x| x == cCodItem+cCargo+cFilAnt})
	If nPos == 0 .And. lPai
		aAdd(aItensCar,cCodItem+cCargo+cFilAnt)

   		//Variavel utilizada para identificar se houve carga da localização
		lCarga := .T.

		dbSelectArea(cTRBSGA)
		dbSetOrder(1)
		dbSeek(cCodEst+cCodItem+cFilAnt)
		While !EoF() .And. (cTRBSGA)->CODEST == cCodEst .And. (cTRBSGA)->NIVSUP == cCodItem .And. (cTRBSGA)->FILIAL == cFilAnt
			nFil++
			If nFil >= 2
				Exit
			EndIf
			(cTRBSGA)->(dbSkip())
		EndDo

		If lProcess
			Processa({||MNT902Chg(cCodItem,cCargo)},STR0131,STR0132,.T.) //"Aguarde"###"Carregando itens filhos"
		Else
			MNT902Chg(cCodItem,cCargo)
		EndIf

	EndIf

	//Ponto de entrada para adicionar itens na arvore
	If ExistBlock("MNTA9028")
		ExecBlock("MNTA9028",.F.,.F.,{cCodItem, cCargo, lCarga})
	EndIf

	If lLegenda
		If lProcess
			MsgRun(STR0121,STR0031,{||MNT902MoLg(oTree:GetCargo())}) //"Carregando Legenda, aguarde..."###"Carregando"
		Else
			MNT902MoLg(oTree:GetCargo())
		EndIf
	EndIf

	// Carrega os parâmetros para o Painel de Indicadores, o recalcula
	fIndLoadPars()

	// Habilita novamente a Árvore para interação com usuário.
	oTree:Enable()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902Chg ³ Autor ³ Rafael Diogo Richter  ³ Data ³22/04/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Monta os filhos do item selecionado.                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SigaSGA                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRUAO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902Chg(cCodItem,cCarSup)

	Local nPer      := 0
	Local lFirst    := .T.
	Local cAliasQry := ""
	Local aItensPer := {}
	Local bVrfMod   := {|| .T. }
	Local aFolder   := {}
	Local aAreas    := {}
	Local nMod      := IIf(nMod902 == 35,5,IIf(nMod902 == 56,3,4))
	Local lDepto    := NGCADICBASE("TAF_DEPTO","A","TAF",.F.)

	cAliasQry := GetNextAlias()
	cQuery := " SELECT COUNT(TAF.TAF_FILIAL) AS nCount FROM "+RetSqlName("TAF")+" TAF "
	cQuery += " WHERE TAF.TAF_FILIAL = '"+xFilial("TAF")+"' AND TAF.TAF_NIVSUP = '"+cCodItem+"' AND TAF.D_E_L_E_T_ <> '*'"
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

	dbSelectArea(cAliasQry)
	dbGoTop()
	If !EoF()
		ProcRegua((cAliasQry)->nCount)
	EndIf
	(cAliasQry)->(dbCloseArea())

	If nMod902 == 19
		bVrfMod := {|| !Empty(TAF->TAF_MODMNT) }
	ElseIf nMod902 == 35
		bVrfMod := {|| !Empty(TAF->TAF_MODMDT) }
	ElseIf nMod902 == 56
		bVrfMod := {|| !Empty(TAF->TAF_MODSGA) }
	EndIf

	// Verifica itens filhos (TAF)
	aAreaTAF := TAF->(GetArea())
	dbSelectArea('TAF')
	dbSetOrder(1)
	If dbSeek(xFilial('TAF')+cCodEst+cCodItem)
		While !TAF->(EoF()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And. TAF->TAF_CODEST == cCodEst .And.;
				TAF->TAF_NIVSUP == cCodItem

			IncProc() // Incrementa regua de processamento

			If !Eval(bVrfMod)
				TAF->(dbSkip())
				Loop
			EndIf

			If TAF->TAF_INDCON == '0'
				TAF->(dbSkip())
				Loop
			ElseIf TAF->TAF_INDCON == '2'
				cCargo := 'LOC'
				If lSitNiv .And. TAF->TAF_SITNIV == '2'
					cFolderA := "CADEADO"
					cFolderB := "CADEADO"
				Else
					If !lByOpt
						aFolder  := MNTCHKCLR( TAF->TAF_CODNIV, '2' )
						cFolderA := aFolder[1]
						cFolderB := aFolder[2]
					EndIf
				EndIf

			ElseIf nMod902 <> 56

				If TAF->TAF_INDCON == '1'
					cCargo   := 'BEM'

					If !lByOpt
						aFolder  := MNTCHKCLR( TAF->TAF_CODCON, '1',, TAF->TAF_CODNIV )
						cFolderA := aFolder[1]
						cFolderB := aFolder[2]
					EndIf

					If nMod902 <> 19
						TAF->(dbSkip())
						Loop
					EndIf
				ElseIf TAF->TAF_INDCON == '3'
					cCargo := 'FUN'
					cFolderA := 'FOLDER14'
					cFolderB := 'FOLDER15'
					If nMod902 <> 35
						TAF->(dbSkip())
						Loop
					EndIf
				ElseIf TAF->TAF_INDCON == '4'
					cCargo := 'TAR'
					cFolderA := 'FOLDER12'
					cFolderB := 'FOLDER13'
					If nMod902 <> 35
						TAF->(dbSkip())
						Loop
					EndIf
				ElseIf TAF->TAF_INDCON == _nPosRisco
					cCargo := 'RIS'
					cFolderA := 'ng_ico_risco'
					cFolderB := 'ng_ico_risco'
					If nMod902 <> 35
						TAF->(dbSkip())
						Loop
					EndIf
				EndIf
			Else
				TAF->(dbSkip())
				Loop
			EndIf

			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbSeek("001"+cCodItem+cFilAnt)
			nNivel := (cTRBSGA)->NIVEL

			If !lFirst

				If TAF->TAF_INDCON == '1'
					aAreaST9 := ST9->(GetArea())
					dbSelectArea("ST9")
					dbSetOrder(1)
					If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
						If ST9->T9_SITBEM <> "A"
							TAF->(dbSkip())
							Loop
						EndIf
					Else
						TAF->(dbSkip())
						Loop
					EndIf
					RestArea(aAreaST9)
				EndIf

				If !NGValidTUA()
					TAF->(dbSkip())
					Loop
				EndIf

				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				If !dbSeek(cCodEst+TAF->TAF_CODNIV+cFilAnt)
					RecLock((cTRBSGA),.T.)
					(cTRBSGA)->FILIAL  := cFilAnt
					(cTRBSGA)->CODEST  := cCodEst
					(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
					(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV     //cDesc
					(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP     //cNivSup
					(cTRBSGA)->RESPONS := TAF->TAF_MAT        //cMat
					(cTRBSGA)->TIPO    := TAF->TAF_INDCON     //cIndCon
					(cTRBSGA)->CODTIPO := TAF->TAF_CODCON     //cCodCon
					(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL     //cFilDoc
					(cTRBSGA)->CC      := TAF->TAF_CCUSTO     //cCC
					If lDepto
						(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO		//cDepto
					EndIf
					(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA     //cCT
					(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA     //cModSga
					(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT     //cModMnt
					(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT     //cModMdt
					(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM      //cOrdem
					(cTRBSGA)->CARGO   := cCargo
					If lRetS
						(cTRBSGA)->ETAPA   := TAF->TAF_ETAPA
					EndIf
					If lRateio
						(cTRBSGA)->RATEIO  := TAF->TAF_RATEIO
					EndIf
					If lFamilia
						(cTRBSGA)->CODFAM  := TAF->TAF_CODFAM
					EndIf
					If lCodAmb
						(cTRBSGA)->CODAMB  := TAF->TAF_CODAMB
					EndIf
					If lSitNiv
						(cTRBSGA)->SITNIV  := TAF->TAF_SITNIV
						(cTRBSGA)->ATFIL   := "0"
					EndIf
					(cTRBSGA)->NIVEL   := nNivel

					If !Empty(aUserTAF)
						RecUserFld(aUserTAF, "TAF", "(cTRBSGA)")
					EndIf

					(cTRBSGA)->( MsUnlock() )

					If lByOpt
						aDados  := fRunSPClr((cTRBSGA)->CODPRO,cCargo,TAF->TAF_NIVSUP)
						nVermB  := aDados[1]
						nAmarB  := aDados[2]
						nSSMB   := aDados[3]

						nCor := 1 //Verde
						If nVermB > 0
							nCor := 3 //Vermelho
						ElseIf nAmarB > 0 .Or. nSSMB > 0
							nCor := 2 //Amarelo
						EndIf

						aFolder  := fChangeClr(nCor,cCargo)
						cFolderA := aFolder[1]
						cFolderB := aFolder[2]
					EndIf

					oTree:TreeSeek(TAF->TAF_NIVSUP+cCarSup+cFilAnt)
					oTree:AddItem((cTRBSGA)->DESCRI,(cTRBSGA)->CODPRO+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)
				EndIf
			Else
				lFirst := .F.
			EndIf

			aAreaTAF := TAF->(GetArea())

			dbSelectArea('TAF')
			dbSetOrder(1)
			If dbSeek(xFilial('TAF')+cCodEst+(cTRBSGA)->CODPRO)
				While !TAF->(EoF()) .And. TAF->TAF_FILIAL == xFilial('TAF') .And. TAF->TAF_CODEST == cCodEst .And.;
						TAF->TAF_NIVSUP == (cTRBSGA)->CODPRO

					If !Eval(bVrfMod)
						TAF->(dbSkip())
						Loop
					EndIf

					If TAF->TAF_INDCON == '0'
						TAF->(dbSkip())
						Loop
					ElseIf TAF->TAF_INDCON == '2'
						cCarFil := 'LOC'
						If lSitNiv .And. TAF->TAF_SITNIV == '2'
							cFolderA := "CADEADO"
							cFolderB := "CADEADO"
						Else
							If !lByOpt
								aFolder  := MNTCHKCLR( (cTRBSGA)->CODPRO, '2' )
								cFolderA := aFolder[1]
								cFolderB := aFolder[2]
							EndIf
						EndIf

					ElseIf nMod902 <> 56

						If TAF->TAF_INDCON == '1'
							cCarFil   := 'BEM'
							If !lByOpt
								aFolder  := MNTCHKCLR( (cTRBSGA)->CODTIPO, '1',, (cTRBSGA)->CODPRO )
								cFolderA := aFolder[1]
								cFolderB := aFolder[2]
							EndIf
							If nMod902 <> 19
								TAF->(dbSkip())
								Loop
							EndIf
						ElseIf TAF->TAF_INDCON == '3'
							cCarFil := 'FUN'
							cFolderA := 'FOLDER14'
							cFolderB := 'FOLDER15'
							If nMod902 <> 35
								TAF->(dbSkip())
								Loop
							EndIf
						ElseIf TAF->TAF_INDCON == '4'
							cCarFil := 'TAR'
							cFolderA := 'FOLDER12'
							cFolderB := 'FOLDER13'
							If nMod902 <> 35
								TAF->(dbSkip())
								Loop
							EndIf
						ElseIf TAF->TAF_INDCON == _nPosRisco
							cCarFil  := 'RIS'
							cFolderA := 'ng_ico_risco'
							cFolderB := 'ng_ico_risco'
							If nMod902 <> 35
								TAF->(dbSkip())
								Loop
							EndIf
						EndIf
					Else
						TAF->(dbSkip())
						Loop
					EndIf

					If TAF->TAF_INDCON == '1'
						aAreaST9 := ST9->(GetArea())
						dbSelectArea("ST9")
						dbSetOrder(1)
						If dbSeek(xFilial("ST9")+TAF->TAF_CODCON)
							If ST9->T9_SITBEM <> "A"
								TAF->(dbSkip())
								Loop
							EndIf
						Else
							TAF->(dbSkip())
							Loop
						EndIf
						RestArea(aAreaST9)
					EndIf

					If !NGValidTUA()
						TAF->(dbSkip())
						Loop
					EndIf

					nRec:=(cTRBSGA)->(RECNO())
					dbSelectArea(cTRBSGA)
					dbSetOrder(2)
					If !dbSeek(cCodEst+TAF->TAF_CODNIV+cFilAnt)
						RecLock((cTRBSGA),.T.)
						(cTRBSGA)->FILIAL  := cFilAnt
						(cTRBSGA)->CODEST  := cCodEst
						(cTRBSGA)->CODPRO  := TAF->TAF_CODNIV
						(cTRBSGA)->DESCRI  := TAF->TAF_NOMNIV     //cDesc
						(cTRBSGA)->NIVSUP  := TAF->TAF_NIVSUP     //cNivSup
						(cTRBSGA)->RESPONS := TAF->TAF_MAT        //cMat
						(cTRBSGA)->TIPO    := TAF->TAF_INDCON     //cIndCon
						(cTRBSGA)->CODTIPO := TAF->TAF_CODCON     //cCodCon
						(cTRBSGA)->DOCFIL  := TAF->TAF_DOCFIL     //cFilDoc
						(cTRBSGA)->CC      := TAF->TAF_CCUSTO     //cCC
						If lDepto
							(cTRBSGA)->DEPTO   := TAF->TAF_DEPTO		//cDepto
						EndIf
						(cTRBSGA)->CENTRAB := TAF->TAF_CENTRA     //cCT
						(cTRBSGA)->MODSGA  := TAF->TAF_MODSGA     //cModSga
						(cTRBSGA)->MODMNT  := TAF->TAF_MODMNT     //cModMnt
						(cTRBSGA)->MODMDT  := TAF->TAF_MODMDT     //cModMdt
						(cTRBSGA)->ORDEM   := TAF->TAF_ORDEM      //cOrdem
						(cTRBSGA)->CARGO   := cCarFil
						If lRetS
							(cTRBSGA)->ETAPA   := TAF->TAF_ETAPA
						EndIf
						If lRateio
							(cTRBSGA)->RATEIO  := TAF->TAF_RATEIO
						EndIf
						If lFamilia
							(cTRBSGA)->CODFAM  := TAF->TAF_CODFAM
						EndIf
						(cTRBSGA)->NIVEL   := nNivel+1
						If !Empty(aUserTAF)
							RecUserFld(aUserTAF, "TAF", "(cTRBSGA)")
						EndIf

						(cTRBSGA)->( MsUnlock() )

						(cTRBSGA)->(dbGoTo(nRec))

						If lByOpt
							aDados  := fRunSPClr(TAF->TAF_CODNIV,cCarFil,TAF->TAF_NIVSUP)
							nVermB  := aDados[1]
							nAmarB  := aDados[2]
							nSSMB   := aDados[3]

							nCor := 1 //Verde
							If nVermB > 0
								nCor := 3 //Vermelho
							ElseIf nAmarB > 0 .Or. nSSMB > 0
								nCor := 2 //Amarelo
							EndIf

							aFolder  := fChangeClr(nCor,cCarFil)
							cFolderA := aFolder[1]
							cFolderB := aFolder[2]
						Else
							If TAF->TAF_INDCON == '2'
								If lSitNiv .And. TAF->TAF_SITNIV == '2'
									cFolderA := "CADEADO"
									cFolderB := "CADEADO"
								Else
									aFolder  := MNTCHKCLR( TAF->TAF_CODNIV, '2' )
									cFolderA := aFolder[1]
									cFolderB := aFolder[2]
								EndIf

							ElseIf nMod <> 3

								If TAF->TAF_INDCON == '1'
									aFolder  := MNTCHKCLR( TAF->TAF_CODCON, '1',, TAF->TAF_CODNIV )
									cFolderA := aFolder[1]
									cFolderB := aFolder[2]
								EndIf
							EndIf
						EndIf

						oTree:TreeSeek(TAF->TAF_NIVSUP+cCargo+cFilAnt)
						oTree:AddItem(TAF->TAF_NOMNIV,TAF->TAF_CODNIV+cCarFil+cFilAnt,cFolderA,cFolderB,,, 2)

					EndIf
					Exit
				End
			Else
				If (cTRBSGA)->TIPO == '1'
					MNTA902OS( 'B', .T. )
				ElseIf (cTRBSGA)->TIPO == '2'
					MNTA902OS( 'L', .T. )
				ElseIf (cTRBSGA)->TIPO == '3'
					MNTA902OS("F")
				ElseIf (cTRBSGA)->TIPO == '4'
					MNTA902OS("T")
				ElseIf (cTRBSGA)->TIPO == '5'
					dbSelectArea("TQB")
					dbSetOrder(1)
					dbSeek(xFilial("TQB")+AllTrim((cTRBSGA)->CODTIPO))

					fTreeIncOS(TQB->TQB_SOLICI, (cTRBSGA)->CODPRO, (cTRBSGA)->CARGO)

				EndIf
			EndIf

			RestArea(aAreaTAF)
			If Len(aItensCar) > 0
				oTree:TreeSeek(aItensCar[Len(aItensCar)]+cFilAnt)
			EndIf

			dbSelectArea("TAF")
			TAF->(dbSkip())
		End
	Else
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek("001"+cCodItem+cFilAnt)
			If (cTRBSGA)->TIPO == "5"
				dbSelectArea("TQB")
				dbSetOrder(1)
				dbSeek(xFilial("TQB")+AllTrim((cTRBSGA)->CODTIPO))
				fTreeIncOS(TQB->TQB_SOLICI, (cTRBSGA)->CODPRO, (cTRBSGA)->CARGO)
			EndIf
		EndIf
		If Len(aItensCar) > 0
			oTree:TreeSeek(aItensCar[Len(aItensCar)]+cFilAnt)
		EndIf
	EndIf

	// Verifica filhos 'externos'
	dbSelectArea('TAF')
	dbSetOrder(2)
	If dbSeek(xFilial('TAF')+cCodEst+cCodItem)
		If TAF->TAF_INDCON == '2'
			IF  nMod902 == 19
         		//Carrega as SS's
				cAliasQry := GetNextAlias()
				cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
				cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'L' AND TQB.TQB_CODBEM = '"+cCodItem+"' "
				cQuery += " AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*'
				cQuery := ChangeQuery(cQuery)
				dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

				dbSelectArea(cAliasQry)
				dbGoTop()
				If !EoF()
					ProcRegua((cAliasQry)->nCount)
				EndIf
				(cAliasQry)->(dbCloseArea())

				cNivSup := cCodItem+Space(Len(STJ->TJ_CODBEM)-Len(TAF->TAF_CODNIV))

				aAreaTQB := TQB->(GetArea())
				dbSelectArea("TQB")
				dbSetOrder(13)
				dbSeek(xFilial("TQB")+"L"+cNivSup)
				While !EoF() .And. TQB->TQB_FILIAL == xFilial("TQB") .And. TQB->TQB_TIPOSS == "L" .And. TQB->TQB_CODBEM == cNivSup

					If !Empty(TQB->TQB_DTFECH) .Or. TQB->TQB_SOLUCA == "C"
						dbSelectArea("TQB")
						dbSetOrder(13)
						dbSkip()
						Loop
					EndIf

					IncProc() // Incrementa regua de processamento

					If !NGValidTUA("TQB",,cNivSup)
						dbSelectArea("TQB")
						dbSetOrder(13)
						dbSkip()
						Loop
					EndIf

					nRec := (cTRBSGA)->( Recno() )

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					If !dbSeek( '5' + PadR( TQB->TQB_SOLICI, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

						cCarSS := fIncSS( TQB->TQB_SOLICI, AllTrim( cNivSup ), 'LOC' )
						cNivSS := cCodNiv

					Else

						cNivSS := (cTRBSGA)->CODPRO
						cCarSS := (cTRBSGA)->CARGO

					EndIf

					(cTRBSGA)->( dbGoto( nRec ) )

					fTreeIncOS(TQB->TQB_SOLICI, cNivSS, cCarSS, .T.)

					dbSelectArea("TQB")
					dbSetOrder(13)
					dbSkip()
				End
				RestArea(aAreaTQB)

         		//Carrega as OS's
				cAliasQry := GetNextAlias()
				cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
				cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'L' AND STJ.TJ_CODBEM = '"+cCodItem+"' "
				cQuery += " AND STJ.TJ_TERMINO = 'N' AND STJ.TJ_SITUACA = 'L' AND STJ.D_E_L_E_T_ <> '*'
				cQuery := ChangeQuery(cQuery)
				dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

				dbSelectArea(cAliasQry)
				dbGoTop()
				If !EoF()
					ProcRegua((cAliasQry)->nCount)
				EndIf
				(cAliasQry)->(dbCloseArea())

				cNivSup := cCodItem+Space(Len(STJ->TJ_CODBEM)-Len(TAF->TAF_CODNIV))
				aAreaSTJ := STJ->(GetArea())
				dbSelectArea("STJ")
				dbSetOrder(2)
				dbSeek(xFilial("STJ")+"L"+cNivSup)
				While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == "L" .And. STJ->TJ_CODBEM == cNivSup

					nRec := (cTRBSGA)->( Recno() )

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					If dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

						(cTRBSGA)->( dbGoto( nRec ) )
						dbSelectArea( 'STJ' )
						dbSetOrder( 2 ) // TJ_FILIAL + TJ_TIPOOS + TJ_CODBEM + TJ_SERVICO + TJ_SEQRELA + TJ_ORDEM + TJ_PLANO
						dbSkip()
						Loop

					EndIf

					(cTRBSGA)->( dbGoto( nRec ) )

					If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
						dbSelectArea("TT7")
						dbSetOrder(2)
						If dbSeek(xFilial("TT7")+STJ->TJ_ORDEM)
							dbSelectArea("STJ")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
					Else
						dbSelectArea("TQB")
						dbSetOrder(4)
						If dbSeek(xFilial("TQB")+STJ->TJ_ORDEM)
							dbSelectArea("STJ")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
					EndIf

					If STJ->TJ_TERMINO == 'S' .OR. STJ->TJ_SITUACA != 'L' .Or.;
						!NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )
						
						dbSelectArea("STJ")
						dbSetOrder(2)
						dbSkip()
						Loop

					EndIf

					IncProc() // Incrementa regua de processamento

					fIncOS(STJ->TJ_ORDEM, Trim(cNivSup), "LOC", .F., TAF->TAF_MAT, .T. )

					dbSelectArea("STJ")
					dbSetOrder(2)
					dbSkip()
				End
				RestArea(aAreaSTJ)
			ElseIf nMod902 == 35
				cNivSup := cCodItem
         		//Carrega os perigos, danos e análises
				If lOHSAS
            		//Carrega os perigos, danos e análises
					cAliasQry := GetNextAlias()
					cQuery := " SELECT COUNT( TG9.TG9_FILIAL ) AS nCount FROM "+RetSqlName("TG9")+" TG9 "
					cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
					cQuery += " TG9.TG9_CODNIV = " + ValToSql(cNivSup)
					cQuery += " AND TG9.D_E_L_E_T_ <> '*' "
					cQuery := ChangeQuery(cQuery)
					dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

					dbSelectArea(cAliasQry)
					dbGoTop()
					If !EoF()
						ProcRegua((cAliasQry)->nCount)
					EndIf
					(cAliasQry)->(dbCloseArea())

					cNivSup := cCodItem
					aAreaTG9 := TG9->(GetArea())
					dbSelectArea("TG9")
					dbSetOrder(2)
					dbSeek(xFilial("TG9")+cCodEst+cNivSup)
					While !EoF() .And. TG9->TG9_FILIAL == xFilial("TG9") .And. TG9->TG9_CODEST == cCodEst .And. TG9->TG9_CODNIV == cNivSup

						nRec:=(cTRBSGA)->(Recno())
						dbSelectArea(cTRBSGA)
						dbSetOrder(7)
						If dbSeek(_nPosPerigo+Padr( TG9->TG9_CODPER , Len( (cTRBSGA)->CODTIPO ) )+cCodEst+cNivSup)
							(cTRBSGA)->(dbGoto(nRec))
							dbSelectArea("TG9")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
						(cTRBSGA)->(dbGoto(nRec))

						If !NGValidTUA("TG9",,cNivSup)
							dbSelectArea("TG9")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf

						IncProc() // Incrementa regua de processamento

						fIncPer( TG9->TG9_CODPER , Trim(cNivSup) , "LOC" , .F. , TAF->TAF_MAT , @aItensPer )

						dbSelectArea("TG9")
						dbSetOrder(2)
						dbSkip()
					End
					RestArea(aAreaTG9)
				EndIf

			ElseIf nMod902 == 56

				cNivSup := cCodItem

         		//  Residuos
				cAliasQry := GetNextAlias()
				cQuery := " SELECT COUNT( TAV.TAV_FILIAL ) AS nCount FROM "+RetSqlName("TAV")+" TAV "
				cQuery += " WHERE TAV.TAV_FILIAL = '"+xFilial("TAV")+"' AND TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
				cQuery += " TAV.TAV_CODNIV = " + ValToSql(cNivSup)
				cQuery += " AND TAV.D_E_L_E_T_ <> '*' "
				cQuery := ChangeQuery(cQuery)
				dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

				dbSelectArea(cAliasQry)
				dbGoTop()
				If !EoF()
					ProcRegua((cAliasQry)->nCount)
				EndIf
				(cAliasQry)->(dbCloseArea())

				aAreas := TAV->(GetArea())

				dbSelectArea("TAV")
				dbSetOrder(2)
				dbSeek(xFilial("TAV") + cCodEst + cNivSup)
				While !EoF() .And. TAV->TAV_FILIAL == xFilial("TAV") .And. TAV->TAV_CODEST == cCodEst .And. TAV->TAV_CODNIV == cNivSup

					IncProc() // Incrementa regua de processamento

					SgaIncRes( TAV->TAV_CODRES , Trim(cNivSup) , "LOC" , TAF->TAF_MAT , 2 )

					dbSelectArea("TAV")
					dbSetOrder(2)
					dbSkip()
				End

				RestArea(aAreas)

         		//  Aspectos
				cNivSup := cCodItem

				cAliasQry := GetNextAlias()
				cQuery := " SELECT COUNT( TAG.TAG_FILIAL ) AS nCount FROM " + RetSqlName("TAG") + " TAG "
				cQuery += " WHERE TAG.TAG_FILIAL = '" + xFilial("TAG") + "' AND TAG.TAG_CODEST = " + ValToSql(cCodEst) + " AND "
				cQuery += " TAG.TAG_CODNIV = " + ValToSql(cNivSup)
				cQuery += " AND TAG.D_E_L_E_T_ <> '*' "
				cQuery := ChangeQuery(cQuery)
				dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

				dbSelectArea(cAliasQry)
				dbGoTop()
				If !EoF()
					ProcRegua((cAliasQry)->nCount)
				EndIf
				(cAliasQry)->(dbCloseArea())

				aAreas := TAG->(GetArea())

				dbSelectArea("TAG")
				dbSetOrder(2)
				dbSeek(xFilial("TAG") + cCodEst + cNivSup)
				While !EoF() .And. TAG->TAG_FILIAL == xFilial("TAG") .And. TAG->TAG_CODEST == cCodEst .And. TAG->TAG_CODNIV == cNivSup

					IncProc() // Incrementa regua de processamento

					SgaIncAsp( TAG->TAG_CODASP , Trim(cNivSup) , "LOC" , TAF->TAF_MAT, 2 )

					dbSelectArea("TAG")
					dbSetOrder(2)
					dbSkip()
				End

				RestArea(aAreas)

         		//Planos Emergenciais
				cNivSup := cCodItem

				cAliasQry := GetNextAlias()
				cQuery := " SELECT COUNT( TBC.TBC_FILIAL ) AS nCount FROM " + RetSqlName("TBC") + " TBC "
				cQuery += " WHERE TBC.TBC_FILIAL = '" + xFilial("TBC") + "' AND TBC.TBC_CODEST = " + ValToSql(cCodEst) + " AND "
				cQuery += " TBC.TBC_CODNIV = " + ValToSql(cNivSup)
				cQuery += " AND TBC.D_E_L_E_T_ <> '*' "
				cQuery := ChangeQuery(cQuery)
				dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

				dbSelectArea(cAliasQry)
				dbGoTop()
				If !EoF()
					ProcRegua((cAliasQry)->nCount)
				EndIf
				(cAliasQry)->(dbCloseArea())

				aAreas := TBC->(GetArea())

				dbSelectArea("TBC")
				dbSetOrder(2)
				dbSeek(xFilial("TBC") + cCodEst + cNivSup)
				While !EoF() .And. TBC->TBC_FILIAL == xFilial("TBC") .And. TBC->TBC_CODEST == cCodEst .And. TBC->TBC_CODNIV == cNivSup

					IncProc() // Incrementa regua de processamento

					SgaIncPE( TBC->TBC_CODPLA , Trim(cNivSup) , "LOC" , , 2 )

					dbSelectArea("TBC")
					dbSetOrder(2)
					dbSkip()
				End

				RestArea(aAreas)

			EndIf

		ElseIf nMod902 <> 56

			If TAF->TAF_INDCON == '1'
         		//Carrega as SS's
				cAliasQry := GetNextAlias()
				cQuery := " SELECT COUNT(DISTINCT TQB_SOLICI) AS nCount FROM "+RetSqlName("TQB")+" TQB "
				cQuery += " WHERE TQB.TQB_FILIAL = '"+xFilial("TQB")+"' AND TQB.TQB_TIPOSS = 'B' AND TQB.TQB_CODBEM = '"+TAF->TAF_CODCON+"' "
				cQuery += " AND TQB.TQB_DTFECH = '' AND TQB.D_E_L_E_T_ <> '*'
				cQuery := ChangeQuery(cQuery)
				dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

				dbSelectArea(cAliasQry)
				dbGoTop()
				If !EoF()
					ProcRegua((cAliasQry)->nCount)
				EndIf
				(cAliasQry)->(dbCloseArea())

				cNivSup := cCodItem

				aAreaTQB := TQB->(GetArea())
				dbSelectArea("TQB")
				dbSetOrder(13)
				dbSeek(xFilial("TQB")+"B"+TAF->TAF_CODCON)
				While !EoF() .And. TQB->TQB_FILIAL == xFilial("TQB") .And. TQB->TQB_TIPOSS == "B" .And. TQB->TQB_CODBEM == TAF->TAF_CODCON

					If !Empty(TQB->TQB_DTFECH) .Or. TQB->TQB_SOLUCA == "C"
						dbSelectArea("TQB")
						dbSetOrder(13)
						dbSkip()
						Loop
					EndIf

					IncProc() // Incrementa regua de processamento

					If !NGValidTUA("TQB",,cNivSup)
						dbSelectArea("TQB")
						dbSetOrder(13)
						dbSkip()
						Loop
					EndIf

					nRec := (cTRBSGA)->( Recno() )

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					If !dbSeek( '5' + PadR( TQB->TQB_SOLICI, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

						cCarSS := fIncSS( TQB->TQB_SOLICI, cNivSup, 'BEM' )
						cNivSS := cCodNiv

					Else

						cNivSS := (cTRBSGA)->CODPRO
						cCarSS := (cTRBSGA)->CARGO

					EndIf

					(cTRBSGA)->( dbGoto( nRec ) )

					fTreeIncOS(TQB->TQB_SOLICI, cNivSS, cCarSS, .T.)

					dbSelectArea("TQB")
					dbSetOrder(13)
					dbSkip()
				End
				RestArea(aAreaTQB)

         		//Carrega as OS's
				cAliasQry := GetNextAlias()
				cQuery := " SELECT COUNT( STJ.TJ_FILIAL ) AS nCount FROM "+RetSqlName("STJ")+" STJ "
				cQuery += " WHERE STJ.TJ_FILIAL = '"+xFilial("STJ")+"' AND STJ.TJ_TIPOOS = 'B' AND STJ.TJ_CODBEM = '"+TAF->TAF_CODCON+"' "
				cQuery += " AND STJ.TJ_TERMINO = 'N' AND STJ.TJ_SITUACA = 'L' AND STJ.D_E_L_E_T_ <> '*'
				cQuery := ChangeQuery(cQuery)
				dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

				dbSelectArea(cAliasQry)
				dbGoTop()
				If !EoF()
					ProcRegua((cAliasQry)->nCount)
				EndIf
				(cAliasQry)->(dbCloseArea())

				cNivSup := cCodItem
				aAreaSTJ := STJ->(GetArea())
				dbSelectArea("STJ")
				dbSetOrder(2)
				dbSeek(xFilial("STJ")+"B"+TAF->TAF_CODCON)
				While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == "B" .And. STJ->TJ_CODBEM == TAF->TAF_CODCON

					If STJ->TJ_TERMINO == "S" .OR. STJ->TJ_SITUACA <> "L" .Or.;
					 	!NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

						dbSelectArea("STJ")
						dbSetOrder(2)
						dbSkip()
						Loop

					EndIf

					nRec := (cTRBSGA)->( Recno() )

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					If dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO) ) + cFilAnt )

						(cTRBSGA)->( dbGoto( nRec ) )
						dbSelectArea( 'STJ' )
						dbSetOrder( 2 ) // TJ_FILIAL + TJ_TIPOOS + TJ_CODBEM + TJ_SERVICO + TJ_SEQRELA + TJ_ORDEM + TJ_PLANO
						dbSkip()
						Loop

					EndIf

					(cTRBSGA)->( dbGoto( nRec ) )

					If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
						dbSelectArea("TT7")
						dbSetOrder(2)
						If dbSeek(xFilial("TT7")+STJ->TJ_ORDEM)
							dbSelectArea("STJ")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
					Else
						dbSelectArea("TQB")
						dbSetOrder(4)
						If dbSeek(xFilial("TQB")+STJ->TJ_ORDEM)
							dbSelectArea("STJ")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
					EndIf

					IncProc() // Incrementa regua de processamento

					fIncOS(STJ->TJ_ORDEM, cNivSup, "BEM", .F., TAF->TAF_MAT)

					dbSelectArea("STJ")
					dbSetOrder(2)
					dbSkip()
				End
				RestArea(aAreaSTJ)

			ElseIf TAF->TAF_INDCON == '3'
				If lOHSAS
					cNivSup := cCodItem
            		//Carrega os perigos, danos e análises
					cAliasQry := GetNextAlias()
					cQuery := " SELECT COUNT( TG9.TG9_FILIAL ) AS nCount FROM "+RetSqlName("TG9")+" TG9 "
					cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
					cQuery += " TG9.TG9_CODNIV = " + ValToSql(cNivSup)
					cQuery += " AND TG9.D_E_L_E_T_ <> '*'
					cQuery := ChangeQuery(cQuery)
					dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

					dbSelectArea(cAliasQry)
					dbGoTop()
					If !EoF()
						ProcRegua((cAliasQry)->nCount)
					EndIf
					(cAliasQry)->(dbCloseArea())

					aAreaTG9 := TG9->(GetArea())
					dbSelectArea("TG9")
					dbSetOrder(2)
					dbSeek(xFilial("TG9")+cCodEst+cNivSup)
					While !EoF() .And. TG9->TG9_FILIAL == xFilial("TG9") .And. TG9->TG9_CODEST == cCodEst .And. TG9->TG9_CODNIV == cNivSup

						nRec:=(cTRBSGA)->(Recno())
						dbSelectArea(cTRBSGA)
						dbSetOrder(7)
						If dbSeek(_nPosPerigo+Padr( TG9->TG9_CODPER , Len( (cTRBSGA)->CODTIPO ) )+cCodEst+cNivSup)
							(cTRBSGA)->(dbGoto(nRec))
							dbSelectArea("TG9")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
						(cTRBSGA)->(dbGoto(nRec))

						If !NGValidTUA("TG9",,cNivSup)
							dbSelectArea("TG9")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf

						IncProc() // Incrementa regua de processamento

						fIncPer( TG9->TG9_CODPER , Trim(cNivSup) , "FUN" , .F. , TAF->TAF_MAT , @aItensPer )

						dbSelectArea("TG9")
						dbSetOrder(2)
						dbSkip()
					End
					RestArea(aAreaTG9)
				EndIf
			ElseIf TAF->TAF_INDCON == '4'
            	//Carrega os perigos, danos e análises
				If lOHSAS
					cNivSup := cCodItem
            		//Carrega os perigos, danos e análises

					cAliasQry := GetNextAlias()
					cQuery := " SELECT COUNT( TG9.TG9_FILIAL ) AS nCount FROM "+RetSqlName("TG9")+" TG9 "
					cQuery += " WHERE TG9.TG9_FILIAL = '"+xFilial("TG9")+"' AND TG9.TG9_CODEST = " + ValToSql(cCodEst) + " AND "
					cQuery += " TG9.TG9_CODNIV = " + ValToSql(cNivSup)
					cQuery += " AND TG9.D_E_L_E_T_ <> '*'
					cQuery := ChangeQuery(cQuery)
					dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

					dbSelectArea(cAliasQry)
					dbGoTop()
					If !EoF()
						ProcRegua((cAliasQry)->nCount)
					EndIf
					(cAliasQry)->(dbCloseArea())

					aAreaTG9 := TG9->(GetArea())
					dbSelectArea("TG9")
					dbSetOrder(2)
					dbSeek(xFilial("TG9")+cCodEst+cNivSup)
					While !EoF() .And. TG9->TG9_FILIAL == xFilial("TG9") .And. TG9->TG9_CODEST == cCodEst .And. TG9->TG9_CODNIV == cNivSup

						nRec:=(cTRBSGA)->(Recno())
						dbSelectArea(cTRBSGA)
						dbSetOrder(7)
						If dbSeek(_nPosPerigo+Padr( TG9->TG9_CODPER , Len( (cTRBSGA)->CODTIPO ) )+cCodEst+cNivSup)
							(cTRBSGA)->(dbGoto(nRec))
							dbSelectArea("TG9")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf
						(cTRBSGA)->(dbGoto(nRec))

						If !NGValidTUA("TG9",,cNivSup)
							dbSelectArea("TG9")
							dbSetOrder(2)
							dbSkip()
							Loop
						EndIf

						IncProc() // Incrementa regua de processamento

						fIncPer( TG9->TG9_CODPER , Trim(cNivSup) , "TAR" , .F. , TAF->TAF_MAT , @aItensPer )

						dbSelectArea("TG9")
						dbSetOrder(2)
						dbSkip()
					End
					RestArea(aAreaTG9)
				EndIf
			EndIf
		EndIf
	EndIf

	If nMod902 == 56

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek("001"+cCodItem+cFilAnt)

			If (cTRBSGA)->TIPO == __cTpRes

         		//Residuos
				dbSelectArea("TAV")
				dbSetOrder(1)
				If dbSeek(xFilial("TAV") + Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES)) + (cTRBSGA)->CODEST + (cTRBSGA)->NIVSUP )
					OcoResSGA( TAV->TAV_CODRES, (cTRBSGA)->CODPRO, TAV->TAV_CODNIV, .T. )
				EndIf

			ElseIf (cTRBSGA)->TIPO == __cTpAsp

      			//Aspectos
				dbSelectArea("TAG")
				dbSetOrder(1)
				If dbSeek(xFilial("TAG") + Padr((cTRBSGA)->CODTIPO,Len(TAG->TAG_CODASP)) + (cTRBSGA)->CODEST + (cTRBSGA)->NIVSUP )
					DesempSGA( TAG->TAG_CODASP, (cTRBSGA)->CODPRO, TAG->TAG_CODNIV, .T. )
				EndIf

			ElseIf (cTRBSGA)->TIPO == __cTpPE

      			//Planos Emergenciais
				dbSelectArea("TBC")
				dbSetOrder(1)
				If dbSeek(xFilial("TBC") + Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA)) + (cTRBSGA)->CODEST + (cTRBSGA)->NIVSUP )
					OcoPlaSGA( TBC->TBC_CODPLA, (cTRBSGA)->CODPRO, TBC->TBC_CODNIV, .T. )
				EndIf

			EndIf

		EndIf
	EndIf

	If Len(aItensCar) > 0
		oTree:TreeSeek(aItensCar[Len(aItensCar)]+cFilAnt)
	EndIf

	If Len( aItensPer ) > 0
		For nPer := 1 To Len( aItensPer )
			aAdd( aItensCar , aItensPer[ nPer ] )
		Next nPer
	EndIf

	RestArea(aAreaTAF)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902InB  ³ Autor ³ Rafael Diogo Richter ³ Data ³15/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para incluir/alterar um Bem na Estrutura             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902InB( nOpc, lImport )

	Local oDlgBem
	Local cRateio    	:= ' '
	Local cCodLevel		:= ""
	Local nX			:= 0
	Local nLevel		:= 0
	Local t				:= 0
	Local aItensDel 	:= {}
	Local aAreaTRB 		:= {}
	Local lGrava     	:= .F.
	Local lMNTA9023		:= ExistBlock("MNTA9023")
	Local lMNTA9029		:= ExistBlock("MNTA9029")
	Local cNivPai		:= ""

	Private cCodBem  	:= Space( Len( ST9->T9_CODBEM ) ) // Codigo do Bem
	Private oNomeBem, cNomeBem := Space( Len( ST9->T9_NOME ) ) // Nome do Bem
	Private cCodF3   	:= "ST9" //Variavel usada no ponto de entrada MNTA9024

	Default lImport := .F.

	If !lByOpt
		cCodNiv := fRetCodNiv()
	EndIf

	cLocal := cCodNiv

	If nOpc == 4
		cLocal   := SubStr( oTree:GetCargo(), 1, 3 )
		cCodBem  := SubStr( oTree:GetPrompt(), 1, 16 )
		cNomeBem := SubStr( oTree:GetPrompt(), 17, 30 )
	EndIf

	// Se não for incluído via importação de bens por centro de custo.
	If !lImport
		Define MsDialog oDlgBem From 0,0 To 110,580 Title "Bem" Pixel

			oPnlPai := TPanel():New(00,00,,oDlgBem,,,,,,,,.F.,.F.)
			oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

			@ 8,004 Say OemToAnsi(STR0133) Size 37,7 Of oPnlPai Pixel //"Codigo Bem"

			@ 7,043 MsGet cCodBem Size 080,08 Of oPnlPai Pixel Picture "@!";
				Valid ExistCpo("ST9",cCodBem,1) .And.;
				MNT902NBem(cCodBem) F3 cCodF3 HasButton

			@ 7,125 MsGet oNomeBem Var cNomeBem Size 160,08 Of oPnlPai Pixel When .F.

			If ExistBlock("SGAA1003")
				ExecBlock("SGAA1003",.F.,.F.)
			EndIf

			Define sButton From 200,200 Type 1 Enable Of oPnlPai

		Activate MsDialog oDlgBem ON INIT EnchoiceBar(oDlgBem,{|| (lGrava := .T.,oDlgBem:End())},{|| lGrava := .F.,oDlgBem:End()}) Centered

		aBensTrb := {} // limpo o array para add um Bem ao nível organizanional da arv. lóg. sem importação por C.C.
		aAdd( aBensTrb, { cCodBem, cNomeBem }) //Atribui ao array o bem cadastrado.
		aAdd( aBensTot, { cCodBem, cNomeBem }) //Atribui ao array TODOS os bens cadastrado.

	EndIf

	// Se tiver conteúdo no array, vai ser realizado a gravação da importação de bens por centro de custo.
	If Len( aBensTrb ) > 0 .And. lImport
		lGrava := .T.
	EndIf

	If lGrava
		cLocalTop := SubStr( oTree:GetCargo(), 1, 3 ) // Variável utilizada para controlar o nível da localização do Bem.
		For nX := 1 To Len( aBensTrb ) // Percorre o array de bens.
			If nOpc == 3
      			//Validacao para incluir o bem na arvore
				If lMNTA9023
					If !ExecBlock("MNTA9023",.F.,.F.)
						Return .F.
					EndIf
				EndIf
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbSeek(cCodEst+SubStr(oTree:GetCargo(),1,3)+cFilAnt)
				nLevel := (cTRBSGA)->NIVEL

				dbSelectArea(cTRBSGA)
				dbSetOrder(3)
				If dbSeek("1"+aBensTrb[nX][1])
					cLocal := (cTRBSGA)->CODPRO
				Else
					cCodNiv := fRetCodNiv()
					cLocal := cCodNiv
				EndIf

			Else
				dbSelectArea(cTRBSGA)
				dbSetOrder(02)
				dbSeek(cCodEst+cLocal)
				If lRateio
					cRateio  := IIF((cTRBSGA)->RATEIO='1',STR0207,STR0208)//"Sim"###"Não"
				EndIf
				nLevel := (cTRBSGA)->NIVEL
			EndIf

			If nOpc == 3

				cNivPai := SubStr( oTree:GetCargo(), 1, 3 )
				dbSelectArea(cTRBSGA)
				dbSetOrder(3)
				If dbSeek("1"+aBensTrb[nX][1])

					// adiciona no array de bens recuperados para salvar corretamente caso seus pais forem processados
					// posteriormente a eles no momento de gravação
					aAdd( aRecFilhos, ( cTRBSGA )->CODPRO )

					dbSelectArea( cTRBSGA )
					RecLock(cTRBSGA,.F.)

				Else
					RecLock(cTRBSGA,.T.)
					(cTRBSGA)->FILIAL  := cFilAnt
					(cTRBSGA)->CODEST  := cCodEst
					(cTRBSGA)->CODPRO  := cLocal
				EndIf
				If aBensTrb[nX][1] <> (cTRBSGA)->CODTIPO .Or. (cTRBSGA)->DELETADO == "X"
					oTree:AddItem(aBensTrb[nX][1]+Space(4)+aBensTrb[nX][2],cLocal+'BEM'+cFilAnt,cNgIcoBem,cNgpstBem,,,2)
				EndIf
				dbSelectArea(cTRBSGA)
				(cTRBSGA)->DESCRI    := aBensTrb[nX][1]+Space(4)+aBensTrb[nX][2]
				(cTRBSGA)->NIVSUP    := cNivPai
				(cTRBSGA)->TIPO      := '1'
				(cTRBSGA)->CODTIPO      := aBensTrb[nX][1] // Código do Bem.
				If nMod902 == 19
					(cTRBSGA)->MODMNT  := 'X'
				ElseIf nMod902 == 35
					(cTRBSGA)->MODMDT  := 'X'
				ElseIf nMod902 == 56
					(cTRBSGA)->MODSGA  := 'X'
				EndIF
				(cTRBSGA)->ORDEM     := cLocal
				(cTRBSGA)->CARGO     := "BEM"
				(cTRBSGA)->NIVEL     := nLevel+1
				(cTRBSGA)->DESCRI    := aBensTrb[nX][1]+Space(4)+aBensTrb[nX][2] //Código/Nome do Bem.
				(cTRBSGA)->DELETADO  := ''
				(cTRBSGA)->(MsUnlock())

				nPos := aScan(aItensCar, {|x| x == (cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt})
				If nPos == 0
					aAdd(aItensCar,(cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
				EndIf
			Else
				oTree:ChangePrompt(aBensTrb[nX][1]+Space(4)+aBensTrb[nX][2],cLocal+"BEM"+cFilAnt)

				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				If dbSeek(cCodEst+cLocal+cFilAnt)
					RecLock((cTRBSGA),.F.)
					(cTRBSGA)->CODTIPO := aBensTrb[nX][1] //Código do Bem.
					(cTRBSGA)->DESCRI  := aBensTrb[nX][1]+Space(4)+aBensTrb[nX][2] //Código/Nome do Bem.
					(cTRBSGA)->(MsUnlock())

					dbSelectArea(oTree:cArqTree)
					dbSetOrder(4)
					dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)

					(oTree:cArqTree)->T_CARGO := cLocal+"BEM"+cFilAnt
				EndIf

				aItensDel := {}
				dbSelectArea(cTRBSGA)
				dbSetOrder(4)
				dbSeek("001"+cLocal)
				While !EoF() .And. (cTRBSGA)->CODEST == "001" .And. (cTRBSGA)->NIVSUP == cLocal
					If (cTRBSGA)->FILIAL == cFilAnt .And. oTree:TreeSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)

						aAreaTRB := (cTRBSGA)->(GetArea())
						If (cTRBSGA)->TIPO == "5"
							cLocFil := (cTRBSGA)->CODPRO
							dbSelectArea(cTRBSGA)
							dbSetOrder(4)
							dbSeek("001"+cLocFil)
							While !EoF() .And. (cTRBSGA)->CODEST == "001" .And. (cTRBSGA)->NIVSUP == cLocFil
								If oTree:TreeSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
									oTree:DelItem()
									aAdd(aItensDel,(cTRBSGA)->CODPRO)
								EndIf

								dbSelectArea(cTRBSGA)
								dbSetOrder(4)
								dbSkip()
							End
						EndIf
						RestArea(aAreaTRB)

						oTree:TreeSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
						oTree:DelItem()
						aAdd(aItensDel,(cTRBSGA)->CODPRO)

						nPos := aScan(aItensCar, {|x| x == (cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt})
						If nPos > 0
							aDel(aItensCar,nPos)
							aSize(aItensCar,Len(aItensCar)-1)
						EndIf
					EndIf
					dbSelectArea(cTRBSGA)
					dbSetOrder(4)
					dbSkip()
				End

				For t:= 1 To Len(aItensDel)
					dbSelectArea(cTRBSGA)
					dbSetOrder(2)
					If dbSeek("001"+aItensDel[t]+cFilAnt)
						Reclock(cTRBSGA,.F.)
						dbDelete()
						(cTRBSGA)->(MsUnlock())
					EndIf
				Next t
			EndIf
			If lRateio
				RecLock(cTRBSGA,.F.)
				(cTRBSGA)->RATEIO := IIF(cRateio=STR0207,'1','2')//"Sim"
				(cTRBSGA)->(MsUnlock())
			EndIf

      		//Carrega as SS's do Bem incluso
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cLocal+cFilAnt)

			aAreaTQB := TQB->(GetArea())
			dbSelectArea("TQB")
			dbSetOrder(13)
			dbSeek(xFilial("TQB")+"B"+(cTRBSGA)->CODTIPO)
			While !EoF() .And. TQB->TQB_FILIAL == xFilial("TQB") .And. TQB->TQB_TIPOSS == "B" .And. TQB->TQB_CODBEM == (cTRBSGA)->CODTIPO

				If !Empty(TQB->TQB_DTFECH) .Or. TQB->TQB_SOLUCA == "C"
					dbSelectArea("TQB")
					dbSetOrder(13)
					dbSkip()
					Loop
				EndIf

				IncProc() // Incrementa regua de processamento

				If !NGValidTUA("TQB",,cLocal)
					dbSelectArea("TQB")
					dbSetOrder(13)
					dbSkip()
					Loop
				EndIf

				cCarSS := fIncSS(TQB->TQB_SOLICI, cLocal, "BEM")
				cNivSS := cCodNiv

				nRec   := (cTRBSGA)->(Recno())
				fTreeIncOS(TQB->TQB_SOLICI, cNivSS, cCarSS)
				(cTRBSGA)->(dbGoto(nRec))

				// indica que a SS já teve seus itens carregados
				nPos := aScan(aItensCar, {|x| x == cNivSS+cCarSS+cFilAnt})
				If nPos == 0
					aAdd(aItensCar,cNivSS+cCarSS+cFilAnt)
				EndIf

				dbSelectArea("TQB")
				dbSetOrder(13)
				dbSkip()
			EndDo
			RestArea(aAreaTQB)

      		//Carrega as Ordens de Servico do bem alterado/incluido
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cLocal+cFilAnt)

			cNivSup := (cTRBSGA)->CODPRO
			aAreaSTJ := STJ->(GetArea())
			dbSelectArea("STJ")
			dbSetOrder(2)
			dbSeek(xFilial("STJ")+"B"+(cTRBSGA)->CODTIPO)
			While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == "B" .And. STJ->TJ_CODBEM == (cTRBSGA)->CODTIPO

				If STJ->TJ_TERMINO == 'S' .Or. STJ->TJ_SITUACA != 'L' .Or.;
					!NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

					dbSelectArea("STJ")
					dbSetOrder(2)
					dbSkip()
					Loop
					
				EndIf

				nRec := (cTRBSGA)->( Recno() )

				dbSelectArea( cTRBSGA )
				dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
				If dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt ) .And. Empty( (cTRBSGA)->(DELETADO) )

					(cTRBSGA)->( dbGoto( nRec ) )
					dbSelectArea( 'STJ' )
					dbSetOrder(2) // TJ_FILIAL + TJ_TIPOOS + TJ_CODBEM + TJ_SERVICO + TJ_SEQRELA + TJ_ORDEM + TJ_PLANO
					dbSkip()
					Loop

				EndIf

				(cTRBSGA)->( dbGoto( nRec ) )

				If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
					dbSelectArea("TT7")
					dbSetOrder(2)
					If dbSeek(xFilial("TT7")+STJ->TJ_ORDEM)
						dbSelectArea("STJ")
						dbSetOrder(2)
						dbSkip()
						Loop
					EndIf
				Else
					dbSelectArea("TQB")
					dbSetOrder(4)
					If dbSeek(xFilial("TQB")+STJ->TJ_ORDEM)
						dbSelectArea("STJ")
						dbSetOrder(2)
						dbSkip()
						Loop
					EndIf
				EndIf

				fIncOS( STJ->TJ_ORDEM, cNivSup, "BEM", .F., , .T. )
				dbSelectArea("STJ")
				dbSetOrder(2)
				dbSkip()
			End
			RestArea(aAreaSTJ)

			If lImport // Se ao incluir um bem, for via importação de bens por centro de custo.
				oTree:TreeSeek( cLocalTop ) // Mantém os bens do array no mesmo nível.
			Else
				oTree:TreeSeek( cLocal + 'BEM' + cFilAnt )
			EndIf

			oTree:Refresh()
			oTree:PtCollapse() // Força o fechamento da localização que está posicionada.

			If lImport // Se ao incluir um bem, for via importação de bens por centro de custo.
				MsgRun(STR0221,STR0031,{||MNT902MoLg(oTree:GetCargo())}) //"Importando Bens", aguarde..."###"Carregando"
			Else
				MsgRun(STR0121,STR0031,{||MNT902MoLg(oTree:GetCargo())}) //"Carregando Legenda, aguarde..."###"Carregando"
			EndIf

      		// Reprocessa cores da legenda quando está estiver habilitada.
			IIf( lByOpt, fReproClr( cLocal, .T. ), Nil )

			If lMNTA9029
				ExecBlock("MNTA9029",.F.,.F.)
			EndIf

			If lImport // Se ao incluir um bem, for via importação de bens por centro de custo.
				oTree:TreeSeek( cLocalTop ) // Mantém os bens do array no mesmo nível.
			Else
				oTree:TreeSeek( cLocal + 'BEM' + cFilAnt )
			EndIf

			oTree:Refresh()
			oTree:PtCollapse() // Força o fechamento da localização que está posicionada.

		Next nX
	Else
		cLocal := StrZero( Val( cLocal )-1, 3 )
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³SG100NOBEM³ Autor ³ Thiago Olis Machado   ³ Data ³24/09/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Busca o nome do Bem                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Tabelas   ³ST9 - Cadastro de Bens                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902NBem(cCodBem)

	ST9->(dbSeek(xFilial('ST9')+cCodBem))

	If ST9->T9_SITBEM == "I"
		MsgStop(STR0134,STR0091) //"Este bem se encontra Inativo no sistema."###"Atenção!"
		Return .F.
	EndIf

	If ST9->T9_SITBEM == "T"
		MsgStop(STR0135,STR0091) //"Este bem foi Transferido desta filial."###"Atenção!"
		Return .F.
	EndIf

	dbSelectArea(cTRBSGA)
	dbSetOrder(3)
	If dbSeek("1"+cCodBem)
		If Empty((cTRBSGA)->DELETADO)
			Help(" ",1,"JAEXISTINF")
			Return .F.
		EndIf
	Else
		dbSelectArea("TAF")
		dbSetOrder(6)
		If dbSeek(xFilial("TAF")+"X1"+cCodBem)
			Help(" ",1,"JAEXISTINF")
			Return .F.
		EndIf
	EndIf

	//³Valida permissao do usuario para incluir o Bem na Arvore Logica ³
	If !NGValidTUA("ST9")
		MsgStop(STR0175 , STR0091)//"Usuário sem permissão para incluir este Bem"###"Atenção!"
		Return .F.
	EndIf

	cNomeBem := ST9->T9_NOME
	oNomeBem:Refresh()

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc} MNTA902OS
Carrega as Solicitações de Serviço e Ordens de Serviço.
@type static

@author Rafael Diogo Richter
@since 17/07/2009

@sample MNTA902OS( 'B', .T. )

@param  cTipItem, Caracter, Tipo do item que será carregado ( 'B', 'L', 'F' e 'T')
@param  [lClose], Lógico  , Define se a localização deve se manter fechada.
@return .T.
/*/
//---------------------------------------------------------------------------------
Static Function MNTA902OS( cTipItem, lClose )

	Local lIncFil  := .F.
	Local aAreaTRB := (cTRBSGA)->( GetArea() )

	Default lClose := .F.

	If cTipItem == "L"
		cNivSup := (cTRBSGA)->CODPRO+Space(Len(STJ->TJ_CODBEM)-Len((cTRBSGA)->CODPRO))
	Else
		cNivSup := (cTRBSGA)->CODPRO
	EndIf

	lIncSS := .F.

	If nMod902 == 19
   		//Carrega as Solicitacoes de Servico
		aAreaTQB := TQB->(GetArea())
		dbSelectArea("TQB")
		dbSetOrder(13)
		dbSeek(xFilial("TQB")+cTipItem+If(cTipItem=="L",cNivSup,(cTRBSGA)->CODTIPO))
		While !EoF() .And. TQB->TQB_FILIAL == xFilial("TQB") .And. TQB->TQB_TIPOSS == cTipItem .And. TQB->TQB_CODBEM == If(cTipItem=="L",cNivSup,(cTRBSGA)->CODTIPO)

			If !Empty(TQB->TQB_DTFECH) .Or. TQB->TQB_SOLUCA == "C"
				dbSelectArea("TQB")
				dbSetOrder(13)
				dbSkip()
				Loop
			EndIf

			If !NGValidTUA("TQB",,cNivSup)
				dbSelectArea("TQB")
				dbSetOrder(13)
				dbSkip()
				Loop
			EndIf

			fIncSS(TQB->TQB_SOLICI, AllTrim(cNivSup), If(cTipItem=="L",'LOC','BEM'))

			lIncSS := .T.

			Exit
		End

   		//Carrega as Ordens de Servico
		If !lIncSS
			aAreaSTJ := STJ->(GetArea())
			dbSelectArea("STJ")
			dbSetOrder(2)
			dbSeek(xFilial("STJ")+cTipItem+If(cTipItem=="L",cNivSup,(cTRBSGA)->CODTIPO))
			While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == cTipItem .And. STJ->TJ_CODBEM == If(cTipItem=="L",cNivSup,(cTRBSGA)->CODTIPO)

				nRec := (cTRBSGA)->( Recno() )

				dbSelectArea( cTRBSGA )
				dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
				If dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

					(cTRBSGA)->( dbGoto( nRec ) )
					dbSelectArea( 'STJ' )
					dbSetOrder( 2 ) // TJ_FILIAL + TJ_TIPOOS + TJ_CODBEM + TJ_SERVICO + TJ_SEQRELA + TJ_ORDEM + TJ_PLANO
					dbSkip()
					Loop

				EndIf

				(cTRBSGA)->( dbGoto( nRec ) )

				If STJ->TJ_TERMINO == 'S' .OR. STJ->TJ_SITUACA != 'L' .Or.;
					!NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

					dbSelectArea("STJ")
					dbSetOrder(2)
					dbSkip()
					Loop

				EndIf

				fIncOS( STJ->TJ_ORDEM, Trim(cNivSup), If(cTipItem=="L","LOC","BEM"), .F., , lClose )

				Exit
			End
			RestArea(aAreaSTJ)
		EndIf
	ElseIf nMod902 == 35
		If cTipItem == "L" .Or. cTipItem == "F" .Or. cTipItem == "T"
			If lOHSAS
				If cTipItem == "L"
					cNivSup := (cTRBSGA)->CODPRO
				EndIf
         		//Carrega os perigos, danos e análises
				aAreaTG9 := TG9->(GetArea())
				dbSelectArea("TG9")
				dbSetOrder(2)
				dbSeek(xFilial("TG9")+cCodEst+cNivSup)
				While !EoF() .And. TG9->TG9_FILIAL == xFilial("TG9") .And. TG9->TG9_CODEST == cCodEst .And. TG9->TG9_CODNIV == cNivSup

					nRec:=(cTRBSGA)->(Recno())
					dbSelectArea(cTRBSGA)
					dbSetOrder(7)
					If dbSeek(_nPosPerigo+Padr( TG9->TG9_CODPER , Len( (cTRBSGA)->CODTIPO ) )+cCodEst+cNivSup)
						(cTRBSGA)->(dbGoto(nRec))
						dbSelectArea("TG9")
						dbSetOrder(2)
						dbSkip()
						Loop
					EndIf
					(cTRBSGA)->(dbGoto(nRec))

					If !NGValidTUA("TG9",,cNivSup)
						dbSelectArea("TG9")
						dbSetOrder(2)
						dbSkip()
						Loop
					EndIf

					IncProc() // Incrementa regua de processamento

					fIncPer( TG9->TG9_CODPER , Trim(cNivSup) , If(cTipItem == "L","LOC",If(cTipItem=="F","FUN","TAR")) , .F. , TAF->TAF_MAT )

					dbSelectArea("TG9")
					dbSetOrder(2)
					dbSkip()
				End
				RestArea(aAreaTG9)
			EndIf
		EndIf

	ElseIf nMod902 == 56

		If cTipItem == "L"
			cNivSup := (cTRBSGA)->CODPRO

			If !lIncFil
         		//Carrega as definições e ocorrências
				aAreaTAV := TAV->(GetArea())
				dbSelectArea("TAV")
				dbSetOrder(2)
				dbSeek(xFilial("TAV")+cCodEst+cNivSup)
				While !EoF() .And. TAV->TAV_FILIAL == xFilial("TAV") .And. TAV->TAV_CODEST == cCodEst .And. TAV->TAV_CODNIV == cNivSup

					lIncFil := .T.
					SgaIncRes( TAV->TAV_CODRES, Trim(cNivSup), "LOC", TAF->TAF_MAT, 0 )

					Exit
				End
				RestArea(aAreaTAV)
			EndIf

			cNivSup := (cTRBSGA)->CODPRO

			If !lIncFil
         		//Carrega os aspectos
				aAreaTAG := TAG->(GetArea())
				dbSelectArea("TAG")
				dbSetOrder(2)
				dbSeek(xFilial("TAG")+cCodEst+cNivSup)
				While !EoF() .And. TAG->TAG_FILIAL == xFilial("TAG") .And. TAG->TAG_CODEST == cCodEst .And. TAG->TAG_CODNIV == cNivSup

					lIncFil := .T.
					SgaIncAsp( TAG->TAG_CODASP , Trim(cNivSup) , "LOC" , TAF->TAF_MAT, 0 )

					Exit
				End
				RestArea(aAreaTAG)
			EndIf

			cNivSup := (cTRBSGA)->CODPRO

			If !lIncFil
         		//Carrega os planos emergenciais
				aAreaTBC := TBC->(GetArea())
				dbSelectArea("TBC")
				dbSetOrder(2)
				dbSeek(xFilial("TBC")+cCodEst+cNivSup)
				While !EoF() .And. TBC->TBC_FILIAL == xFilial("TBC") .And. TBC->TBC_CODEST == cCodEst .And. TBC->TBC_CODNIV == cNivSup

					lIncFil := .T.
					SgaIncPE( TBC->TBC_CODPLA , Trim(cNivSup) , "LOC" ,  , 0 )

					Exit
				End
				RestArea(aAreaTBC)
			EndIf
		EndIf
	EndIf

	RestArea( aAreaTRB )

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902ISS ³ Autor ³ Rafael Diogo Richter  ³ Data ³21/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Inclusao da Solicitacao de Servico.                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902ISS(nOpc)

	Local cCodSS, cDesPro
	Local lIncluiSS := .F.
	Local aAreaISS  := {}
	Local aAreaTQB  := {}
	Local cNivSup   := oTree:GetCargo()
	Local cCod      := SubStr(oTree:GetCargo(),1,3)
	Local cTipOS    := If(SubStr(oTree:GetCargo(),4,3)=="BEM","B","L")
	Local lRet 		:= .T.

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek("001"+cCod+cFilAnt)

	If nOpc <> 3
		dbSelectArea("TQB")
		dbSetOrder(1)
		dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO)
	EndIf

	If lRet
		aAreaTQB := TQB->(GetArea())
		If SubStr(oTree:GetCargo(),4,3) == "BEM"
			aAreaISS := ST9->(GetArea())
			lBemAL := .T.
			cBemAL := (cTRBSGA)->CODTIPO

			// Alerta caso exista manutenção atrasada
			lRet := NGOSABRVEN( cBemAL,,.F.,.T.,.T.,,,,,2 )

		Else
			aAreaISS := TAF->(GetArea())
			lBemAL := .F.
			cBemAL := cCod

			If nOpc == 3
				dbSelectArea("TAF")
				dbSetOrder(7)
				If !dbSeek(xFilial("TAF")+"X2"+cBemAL)
					MsgAlert(STR0126+Chr(13)+Chr(10)+STR0127,STR0091) //"Código do nível ainda não cadastrado na tabela TAF. "###"Confirme a tela da Árvore Lógica para salvar a estrutura e tente novamente."###"Atenção!"
					lRet := .F.
				EndIf
			EndIf
		EndIf
	EndIf

	If lRet

		cTipoSS280 := If(lBemAL, "B", "L")
		cCodBem280 := cBemAl
		TIPOACOM   := lBemAL .And. NGSEEK( 'ST9', cBemAL, 1, 'T9_TEMCONT' ) == 'S'

		cCodSS := MNTA280IN( nOpc )

		If nOpc == 3 .And. !Empty(cCodSS)
			dbSelectArea("TQB")
			dbSetOrder(1)
			If dbSeek(xFilial("TQB")+cCodSS) .And. Empty(TQB->TQB_DTFECH)
				If (!lBemAL .AND. TQB->TQB_TIPOSS == "L" .And. TQB->TQB_CODBEM == cBemAL+Space(Len(TQB->TQB_CODBEM)-Len(cBemAL))) .Or.;
				(lBemAL  .AND. TQB->TQB_TIPOSS == "B" .And. TQB->TQB_CODBEM == cBemAL)

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					lIncluiSS := !dbSeek( '5' + PadR( TQB->TQB_SOLICI, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt );
							.And. NGValidTUA( 'TQB' )

				EndIf

			EndIf

		ElseIf nOpc <> 3
			dbSelectArea("TQB")
			dbSetOrder(1)
			If !dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO) .Or. !Empty(TQB->TQB_DTFECH)
				oTree:DelItem()
				oTree:Refresh()
				RecLock(cTRBSGA,.F.)
				dbDelete()
				(cTRBSGA)->(MsUnlock())

				oTree:TreeSeek(cNivSup+If(lBemAL, "BEM", "LOC")+cFilAnt)
				oTree:Refresh()
			Else
				lIncluiSS := .T.
			EndIf
		EndIf
		RestArea(aAreaISS)

		If lIncluiSS
			If nOpc <> 3
				cFolderA := fRetImgSS()[1]
				cFolderB := cFolderA
				cCargo   := fRetImgSS()[2]

				cDesPro := AllTrim( Msmm( TQB->TQB_CODMSS , , , , 3 ) )
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbSeek("001"+cCod+cFilAnt)

				oTree:ChangeBmp(cFolderA, cFolderB)
				oTree:ChangePrompt(TQB->TQB_SOLICI+" - "+cDesPro,cCod+cCargo+cFilAnt)

				dbSelectArea(oTree:cArqTree)
				dbSetOrder(4)
				dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
				(oTree:cArqTree)->T_CARGO := cCod+cCargo+cFilAnt

				RecLock((cTRBSGA),.F.)
				(cTRBSGA)->CARGO  := cCargo
				(cTRBSGA)->DESCRI := cDesPro
				(cTRBSGA)->(MsUnlock())

				oTree:Refresh()
			Else
				fIncSS(cCodSS, cNivSup, If(lBemAL, "BEM", "LOC"))

				oTree:Refresh()
			EndIf
		EndIf
	EndIf
	RestArea(aAreaTQB)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902DSS ³ Autor ³ Rafael Diogo Richter  ³ Data ³21/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Distribuicao da Solicitacao de Servico.                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902DSS(nOpc)

	Local cCod     := SubStr(oTree:GetCargo(),1,3)
	Local lFacilit := FindFunction("MNTINTFAC") .And. MNTINTFAC()

	Private lCORRET   := .T.
	Private cARQUISAI := "TQB"
	Private cPrograma := "MNTA902"
	Private TI_PLANO  := "000000"

	Mv_Par01 := ""
	Mv_Par02 := ""
	Mv_Par05 := ""

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek("001"+cCod+cFilAnt)

	dbSelectArea("TQB")
	dbSetOrder(1)
	dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO)

	cCadastro := Oemtoansi(STR0137) //"Distribuição e Geracao O.S. da Solicitacao Servico"

	If nOpc == 1
		If lFacilit
			MNTA296(TQB->TQB_FILIAL, TQB->TQB_SOLICI, TQB->TQB_TIPOSS, TQB->TQB_CODBEM, )
		Else
			MNTA295CLA(4,cCadastro)
		EndIf
	Else
		MNTA295GOS(.T.)
	EndIf

	If !Empty(TQB->TQB_DTFECH) .Or. (TQB->TQB_SOLUCA <> "A" .And. TQB->TQB_SOLUCA <> "D")
		oTree:DelItem()
		oTree:Refresh()
		RecLock(cTRBSGA,.F.)
		dbDelete()
		(cTRBSGA)->(MsUnlock())
	Else
		cFolderA := fRetImgSS()[1]
		cFolderB := cFolderA
		cCargo   := fRetImgSS()[2]

		cDesPro := AllTrim( Msmm( TQB->TQB_CODMSS , , , , 3 ) )

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek("001"+cCod+cFilAnt)
			oTree:ChangeBmp(cFolderA, cFolderB)
			oTree:ChangePrompt(TQB->TQB_SOLICI+" - "+cDesPro,cCod+cCargo+cFilAnt)
			dbSelectArea(oTree:cArqTree)
			dbSetOrder(4)
			dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
			(oTree:cArqTree)->T_CARGO := cCod+cCargo+cFilAnt

			RecLock(cTRBSGA,.F.)
			(cTRBSGA)->CARGO  := cCargo
			(cTRBSGA)->DESCRI := cDesPro
			(cTRBSGA)->(MsUnlock())

			MsgRun(STR0121,STR0031,{||MNT902MoLg(oTree:GetCargo())}) //"Carregando Legenda, aguarde..."###"Carregando"
		EndIf

		If nOpc == 2
			fTreeIncOS(TQB->TQB_SOLICI, cCod, cCargo)

			MsgRun(STR0121,STR0031,{||MNT902MoLg(oTree:GetCargo())}) //"Carregando Legenda, aguarde..."###"Carregando"
		EndIf
	EndIf

	cCadastro := OemtoAnsi(STR0001) //"Árvore Lógica"

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902FSS ³ Autor ³ Rafael Diogo Richter  ³ Data ³21/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Finalizacao da Solicitacao de Servico.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902FSS()

	Local cCod := SubStr(oTree:GetCargo(),1,3)
	Local lFacilit := FindFunction("MNTINTFAC") .And. MNTINTFAC()

	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek("001"+cCod+cFilAnt)

	dbSelectArea("TQB")
	dbSetOrder(1)
	dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO)

	If lFacilit
   		//Variaveis private para relacao do campo de bem na O.S.
		lBemAL := (TQB->TQB_TIPOSS == "B")
		cBemAL := TQB->TQB_CODBEM
		MNTA291(TQB->TQB_FILIAL, TQB->TQB_SOLICI, TQB->TQB_TIPOSS, TQB->TQB_CODBEM)
	Else
		MNTA290FEC(STR0138)//"Fechamento Solicitacao Servico"
	EndIf

	If !Empty(TQB->TQB_DTFECH) .Or. (TQB->TQB_SOLUCA <> "A" .And. TQB->TQB_SOLUCA <> "D")
		oTree:DelItem()
		oTree:Refresh()
		RecLock((cTRBSGA),.F.)
		dbDelete()
		(cTRBSGA)->(MsUnlock())
	Else
		cFolderA := fRetImgSS()[1]
		cFolderB := cFolderA
		cCargo   := fRetImgSS()[2]

		cDesPro := AllTrim( Msmm( TQB->TQB_CODMSS , , , , 3 ) )

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek("001"+cCod+cFilAnt)
			oTree:ChangeBmp(cFolderA, cFolderB)
			oTree:ChangePrompt(TQB->TQB_SOLICI+" - "+cDesPro,cCod+cCargo+cFilAnt)

			dbSelectArea(oTree:cArqTree)
			dbSetOrder(4)
			dbSeek((cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt)
			(oTree:cArqTree)->T_CARGO := cCod+cCargo+cFilAnt

			RecLock(cTRBSGA,.F.)
			(cTRBSGA)->CARGO  := cCargo
			(cTRBSGA)->DESCRI := cDesPro
			(cTRBSGA)->(MsUnlock())
		EndIf

		If lFacilit
      		//Deleta OS
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbSeek("001"+cCod+cFilAnt)
			While !EoF() .And. "001"+cCod+cFilAnt == (cTRBSGA)->CODEST+(cTRBSGA)->NIVSUP+(cTRBSGA)->FILIAL
				oTree:TreeSeek((cTRBSGA)->CODPRO+(cTRBSGA)->CARGO+cFilAnt)
				oTree:DelItem()

				Reclock(cTRBSGA,.F.)
				dbDelete()
				(cTRBSGA)->(MsUnlock())

				dbSelectArea(cTRBSGA)
				dbSkip()
			End
			oTree:Refresh()

      		//Reposiciona na SS
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCod+cFilAnt)
			oTree:TreeSeek((cTRBSGA)->CODPRO+(cTRBSGA)->CARGO+cFilAnt)

			fTreeIncOS(TQB->TQB_SOLICI, cCod, cCargo)

			MsgRun(STR0121,STR0031,{||MNT902MoLg(oTree:GetCargo())}) //"Carregando Legenda, aguarde..."###"Carregando"
		EndIf
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902CLgd³ Autor ³ Rafael Diogo Richter  ³ Data ³21/07/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Altera legenda dos itens da Arvore Logica                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902CLgd( nOpc )

	Local lMenuAtv

	Default nOpc := 0

	If nMod902 == 19 .And. GetRPORelease() >= '12.1.027'

		Pergunte( 'MNTA902MNT', .T. )
		nMv1 := MV_PAR01

	Else

		nMv1 := nOpc

	EndIf

	lMenuAtv := ( nMv1 == 1 )

	If lMenuAtv .And. Type("oPnlLgnd") == "O" .And. !oPnlLgnd:lVisible
		oPnlLgnd:Show()
		oPnlShowLg:cTitle := "Inibir Legenda"
	EndIf

	If lMenuAtv
		MsgRun(STR0121,STR0031,{||MNT902MoLg(oTree:GetCargo())}) //"Carregando Legenda, aguarde..."###"Carregando"
	EndIF

	If lMenuAtv
		oIdent:lVisible   := .T.
		oBtnLgdH:lVisible := .F.
		oBtnLgdD:lVisible := .T.
	Else
		oIdent:lVisible   := .F.
		oBtnLgdH:lVisible := .T.
		oBtnLgdD:lVisible := .F.
	EndIf

	If nMod902 == 19
		If lMenuAtv
			oVerde:lVisible := .T.
			oVerm:lVisible  := .T.
			oAmar:lVisible  := .T.
			oBens:lVisible  := .T.
			oSSD:lVisible   := .T.
			oSSA:lVisible   := .T.
			oSSM:lVisible   := .T.
		Else
			oVerde:lVisible := .F.
			oVerm:lVisible  := .F.
			oAmar:lVisible  := .F.
			oBens:lVisible  := .F.
			oSSD:lVisible   := .F.
			oSSA:lVisible   := .F.
			oSSM:lVisible   := .F.
		EndIf
	ElseIf nMod902 == 35
		If lMenuAtv
			oFunc:lVisible := .T.
			oTare:lVisible := .T.
			If lCodAmb
				oRisc:lVisible := .T.
			EndIf
			If lOHSAS
				oPeri:lVisible := .T.
				oDano:lVisible := .T.
			EndIf
		Else
			oFunc:lVisible := .F.
			oTare:lVisible := .F.
			If lCodAmb
				oRisc:lVisible := .F.
			EndIf
			If lOHSAS
				oPeri:lVisible := .F.
				oDano:lVisible := .F.
			EndIf
		EndIf
	ElseIf nMod902 == 56
		If lMenuAtv
			oLgRes:lVisible := .T.
			oLgOcR:lVisible := .T.
			oLgAsp:lVisible := .T.
			oLgDes:lVisible := .T.
			oLgPla:lVisible := .T.
			oLgOPE:lVisible := .T.
			oLgFMRPC:lVisible := .T.
			oLgFMRAP:lVisible := .T.
			oLgFMRAR:lVisible := .T.
			oLgFMRNC:lVisible := .T.
			oLgFMRRB:lVisible := .T.
		Else
			oLgRes:lVisible := .F.
			oLgOcR:lVisible := .F.
			oLgAsp:lVisible := .F.
			oLgDes:lVisible := .F.
			oLgPla:lVisible := .F.
			oLgOPE:lVisible := .F.
			oLgFMRPC:lVisible := .F.
			oLgFMRAP:lVisible := .F.
			oLgFMRAR:lVisible := .F.
			oLgFMRNC:lVisible := .F.
			oLgFMRRB:lVisible := .F.
		EndIf
	EndIf

	oTree:SetFocus()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MNT902vEst³ Autor ³ Rafael Diogo Richter  ³ Data ³07/08/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Verifica se ja existe o primeiro nivel da Estrutura         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902vEst()

	Local lRet
	Local aOldArea := GetArea()

	dbSelectArea("TAF")
	dbSetOrder(1)
	lRet := dbSeek( xFilial('TAF') )

	RestArea(aOldArea)

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902IdIn
Monta a tela para inclusao do primeiro nivel da estrutura.
@author Rafael Diogo Richter
@since 07/08/2009
@version undefined
@obs Atualizacoes Sofridas Desde a Construcao Inicial.
@type function
/*/
//---------------------------------------------------------------------
Static Function MNT902IdIn()

	LOCAL aSize    := {}
	LOCAL aInfo    := {}
	LOCAL aObjects := {}
	LOCAL aPosObj  := {}
	Local aRelac   := {}
	Local cPredio  := "predio"
	Local nOpc     := 3
	Local cCodAnt  := cCodNiv
	Local lRet     := .T.
	Local i
	Local lGrava   := .T.
	Local lDepto   := NGCADICBASE( "TAF_DEPTO" , "A" , "TAF" , .F. )
	Local aNgHeader 	:= {}
	Local nTamTot 		:= 0
	Local nInd 			:= 0
	Local cCampo 		:= ""
	Local cRelacaoSX3	:= ""

	Inclui  := .T.
	nRecno  := 1
	cCodNiv := fRetCodNiv()
	cLocal  := cCodNiv

	dbSelectArea("TAF")
	RegToMemory("TAF",nOpc==3)

	aNgHeader := NGHeader("TAF",,.F.)
	nTamTot := Len(aNgHeader)
	For nInd := 1 To nTamTot
		cCampo 		:= aNgHeader[nInd,2]
		cRelacaoSX3	:= Posicione("SX3",2,cCampo,"X3_RELACAO")
		IF !Empty(cRelacaoSX3)
			xx  := "m->" + Trim(cCampo)
			yy  := Trim(cRelacaoSX3)
			&xx.:= &yy.
		EndIf
	Next nInd

	Define MsDialog oDlgLoc From 400.5,226 To 700,900 Title STR0139 Pixel //"Identificação do primeiro nível da Estrutura"

		aNao := {"TAF_CODEST" ,"TAF_NIVEL"  ,"TAF_INDCON" ,"TAF_CODCON" ,"TAF_NIVSUP" ,"TAF_ORDEM"}
		If nMod902 == 35 .And. nMod902 == 56
			aAdd( aNao , "TAF_CENTRA" )
			aAdd( aNao , "TAF_NOMTRA" )
			If lRetS
				aAdd( aNao , "TAF_ETAPA" )
			EndIf
		EndIf

		aChoice  := NGCAMPNSX3("TAF",aNao)

		aAdd(aObjects,{285,060,.F.,.F.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y
		aAdd(aObjects,{90,180,.T.,.T.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y e assume que retorno sera em linha final coluna final (.F.)
		aSize   := MsAdvSize()
		aInfo   := {aSize[1],aSize[2],aSize[3],aSize[4],3,3}
		aPosObj := MsObjSize(aInfo,aObjects,.T.)

		oEnc01 := MsMGet():New("TAF",1,nOpc,,,,aChoice,aPosObj[1],,3)
		oEnc01:oBox:Align := CONTROL_ALIGN_ALLCLIENT

		For i := 1 to Len(aRELAC)
			cCampo := "M->" + aRELAC[i][1]
			cRelac := aRELAC[i][2]
			&cCampo. := &cRelac
		Next

		dbSelectArea("QAA")
		dbSetOrder(1)
		dbSeek(xFilial("QAA")+(cTRBSGA)->RESPONS)
		M->TAF_NOMRES := QAA->QAA_NOME

		dbSelectArea("CTT")
		dbSetOrder(1)
		dbSeek(xFilial("CTT")+(cTRBSGA)->CC)
		M->TAF_NOMCC := CTT->CTT_DESC01

		If lDepto
			dbSelectArea("SQB")
			dbSetOrder(1)
			dbSeek(xFilial("SQB")+(cTRBSGA)->DEPTO)
			M->TAF_DESCDP := SQB->QB_DESCRIC
		EndIf

		dbSelectArea("SHB")
		dbSetOrder(1)
		dbSeek(xFilial("SHB")+(cTRBSGA)->CENTRAB)
		M->TAF_NOMTRA := SHB->HB_NOME

		If nOpc == 3
			M->TAF_NOMRES := Space(Len(QAA->QAA_NOME))
			M->TAF_NOMCC  := Space(Len(CTT->CTT_DESC01))
			M->TAF_NOMTRA := Space(Len(SHB->HB_NOME))
		EndIf

	Activate MsDialog oDlgLoc ON INIT EnchoiceBar(oDlgLoc,{|| If(!Obrigatorio(aGets,aTela),lGrava := .F.,(lGrava:=.T.,oDlgLoc:End()))},{|| lGrava := .F.,oDlgLoc:End()}) Centered

	If lGrava
		dbSelectArea(cTRBSGA)
		RecLock((cTRBSGA),.T.)
		(cTRBSGA)->FILIAL    := cFilAnt
		(cTRBSGA)->CODEST    := cCodEst
		(cTRBSGA)->CODPRO    := cLocal
		(cTRBSGA)->DESCRI    := M->TAF_NOMNIV
		(cTRBSGA)->NIVSUP    := "000"
		(cTRBSGA)->RESPONS   := M->TAF_MAT
		(cTRBSGA)->CC        := M->TAF_CCUSTO
		If lDepto
			(cTRBSGA)->DEPTO		:= M->TAF_DEPTO
		EndIf
		(cTRBSGA)->CENTRAB   := If( nMod902 <> 35 .And. nMod902 <> 56, M->TAF_CENTRA, "" )
		(cTRBSGA)->DOCFIL    := ""
		(cTRBSGA)->TIPO      := '2'
		If nMod902 == 19
			(cTRBSGA)->MODMNT  := 'X'
		ElseIf nMod902 == 35
			(cTRBSGA)->MODMDT  := 'X'
		ElseIf nMod902 == 56
			(cTRBSGA)->MODSGA  := 'X'
		EndIF
		(cTRBSGA)->ORDEM     := cLocal
		(cTRBSGA)->NIVEL     := 1
		(cTRBSGA)->CARGO     := "LOC"
		If lRetS
			(cTRBSGA)->ETAPA  := If( nMod902 <> 35 .And. nMod902 <> 56, M->TAF_ETAPA, "" )
		EndIf
		If lRateio
			(cTRBSGA)->RATEIO  := M->TAF_RATEIO
		EndIf
		If lFamilia
			(cTRBSGA)->CODFAM  := M->TAF_CODFAM
		EndIf
		If lCodAmb
			(cTRBSGA)->CODAMB  := M->TAF_CODAMB
		EndIf
		If lSitNiv
			(cTRBSGA)->SITNIV  := M->TAF_SITNIV
			(cTRBSGA)->ATFIL   := "0"
		EndIf
		If !Empty(aUserTAF)
			RecUserFld(aUserTAF, "M", "(cTRBSGA)")
		EndIf
		(cTRBSGA)->(MsUnlock())
	Else
		cLocal := cCodAnt
		cCodNiv := cCodAnt
		lRet := .F.
	EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902CE ³ Autor ³ Rafael Diogo Richter  ³ Data ³10/08/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Define os itens do menu de inclusao de OS para os           ³±±
±±³          ³Bens/Componentes da Estrutura.                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902CE()

	Local cCod := oTreeBem:GetCargo()

	oBtnIOSPE:lVisible := .F.
	oBtnIOSCE:lVisible := .F.
	
	If !Empty(cCod)
		dbSelectArea("ST9")
		dbSetOrder(1)
		If dbSeek(xFilial("ST9")+cCod)

			If fGetAcess( 'O', 'C' )
				oBtnIOSCE:lVisible := .T.
			EndIf

			dbSelectArea("STF")
			dbSetOrder(1)
			If dbSeek( xFilial( 'STF' ) + cCod ) .And. fGetAcess( 'O', 'P' )
				oBtnIOSPE:lVisible := .T.
			EndIf

			M->T9_CODBEM := ST9->T9_CODBEM
		EndIf
		
	EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ MNT902IOSE ³ Autor ³ Rafael Diogo Richter ³ Data ³11/08/2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para incluir a Ordem de Servico para o Bem/Local     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         Atualizacoes Sofridas Desde a Construcao Inicial.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ F.O  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902IOSE(nOpc)

	Local cCod, aAreaIOS := {}, lIncluiOS := .F., cNivSup, cDesPro, cRespons
	Local aManOsPr := {}
	Local nCOPIAOS := GetMV("MV_NGCOPOS")
	Private lCorret := .T.
	Private aGETS :={}, aTrocaF3 := {}, aVETINR := {}
	Private cBemAL, lBem := .F., nOpcai := 0, nOpcae := 0, nOpcas := 0
	Private cFILBEM := xFilial("ST9")
	Private lChkPR  := SuperGetMv("MV_NGCOQPR",.F.,"N") == "S" //checa qtd pecas de reposicao

	cCod := oTreeBem:GetCargo()

	If nOpc == 1
		aAreaIOS := ST9->(GetArea())
		lBemAL := .T.
		cBemAL := cCod
		cCadastro := OemtoAnsi(STR0085) //"O.S. Corretiva"
		NG420INC('STJ',1,3)
		
		If STJ->TJ_TERMINO == 'N' .And. STJ->TJ_SITUACA == 'L' .And. STJ->TJ_CODBEM == cBemAL .And.;
			NGValidTUA( 'STJ', , , , ( STJ->TJ_PLANO == '000000' ) )

			dbSelectArea( cTRBSGA )
			dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
			lIncluiOS := !dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

		EndIf

		RestArea(aAreaIOS)

	Else
		dbSelectArea("ST9")
		dbSetOrder(1)
		dbSeek(xFilial("ST9")+cCod)
		aManOsPr := MNT902IOSPR()
		If aManOsPr[1]
			dbSelectArea("STF")
			dbSetOrder(1)
			dbSeek(xFilial("STF")+ST9->T9_CODBEM+aManOsPr[2]+aManOsPr[3])
			aAreaIOS := ST9->(GetArea())
			lBemAL := .T.
			cBemAL := cCod
			NG410INC("STF",1,3)

			If STJ->TJ_TERMINO == 'N' .And. STJ->TJ_SITUACA == 'L' .And. STJ->TJ_CODBEM == cBemAL .And.;
				NGValidTUA( 'STJ', , , , ( STJ->TJ_PLANO == '000000' ) )

				dbSelectArea( cTRBSGA )
				dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
				lIncluiOS := !dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

			EndIf

			RestArea(aAreaIOS)

		EndIf
	EndIf

	If lIncluiOS
		dbSelectArea(cTRBSGA)
		dbSetOrder(3)
		If dbSeek("1"+cCod)
			nPos := aScan(aItensCar, {|x| x == (cTRBSGA)->CODPRO+AllTrim((cTRBSGA)->CARGO)+cFilAnt})
			If nPos > 0
				cNivSup := (cTRBSGA)->CODPRO
				cRespons := (cTRBSGA)->RESPONS
				If nOpc == 1 .And. nCOPIAOS == 2
					dbSelectArea("STJ")
					dbSetOrder(2)
					dbSeek(xFilial("STJ")+"B"+(cTRBSGA)->CODTIPO)
					While !EoF() .And. STJ->TJ_FILIAL == xFilial("STJ") .And. STJ->TJ_TIPOOS == "B" .And. STJ->TJ_CODBEM == (cTRBSGA)->CODTIPO

						If STJ->TJ_TERMINO == 'S' .Or. STJ->TJ_SITUACA != 'L' .Or.;
							!NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

							dbSelectArea("STJ")
							dbSetOrder(2)
							dbSkip()
							Loop

						EndIf

						nRec := (cTRBSGA)->( Recno() )

						dbSelectArea( cTRBSGA )
						dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
						If dbSeek( '6' + PadR( STJ->TJ_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt )

							(cTRBSGA)->( dbGoto( nRec ) )
							dbSelectArea( 'STJ' )
							dbSetOrder( 2 ) // TJ_FILIAL + TJ_TIPOOS + TJ_CODBEM + TJ_SERVICO + TJ_SEQRELA + TJ_ORDEM + TJ_PLANO
							dbSkip()
							Loop

						EndIf

						(cTRBSGA)->( dbGoto( nRec ) )

						If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
							dbSelectArea("TT7")
							dbSetOrder(2)
							If dbSeek(xFilial("TT7")+STJ->TJ_ORDEM)
								dbSelectArea("STJ")
								dbSetOrder(2)
								dbSkip()
								Loop
							EndIf
						Else
							dbSelectArea("TQB")
							dbSetOrder(4)
							If dbSeek(xFilial("TQB")+STJ->TJ_ORDEM)
								dbSelectArea("STJ")
								dbSetOrder(2)
								dbSkip()
								Loop
							EndIf
						EndIf

						IncProc() // Incrementa regua de processamento

						fIncOS(STJ->TJ_ORDEM, cNivSup, "BEM", .F., TAF->TAF_MAT)

						oTree:Refresh()

						dbSelectArea("STJ")
						dbSetOrder(2)
						dbSkip()
					End
				Else
					fIncOS(STJ->TJ_ORDEM, cNivSup, "BEM", .F., TAF->TAF_MAT)

					oTree:Refresh()
				EndIf
			EndIf
		EndIf
	EndIf

	cCadastro := OemtoAnsi(STR0001) //"Árvore Lógica"

Return .T.
//-----------------------------------------------------------------------
/*/{Protheus.doc} MNT902Mnu
Funcao para carregar o menu de acordo com o item selecionado

@author Rafael Diogo Richter
@since 21/08/2009
@version MP11
@return .T.

@obs Alterações:
1. Foi implementado uma verificação sobre a variável 'oMnuTree',
que identifica o tipo da variável. Se a mesma for do tipo objeto executa
os métodos :Reset() e :Free().

@author Pablo Servin.
@since 24/03/2014.
/*/
//-------------------------------------------------------------------------
Static Function MNT902Mnu()

	Local x
	Local lFacilit := FindFunction("MNTINTFAC") .And. MNTINTFAC()
	Local cCod := oTree:GetCargo()
	Local aItensAdd := {}

	If ExistBlock("MNTA9027")
		aItensAdd := ExecBlock("MNTA9027",.F.,.F.,{SubStr(cCod,4,3),SubStr(cCod,1,3)})
	EndIf
 	// Verifica se oMnuTree é objeto, para não usar métodos em variáveis que não são do tipo objeto.
	If Type( "oMnuTree" ) == "O"
   		// Reseta o objeto do Menu, e destrói o mesmo para se evitar erros
		oMnuTree:Reset()
		oMnuTree:Free()
	EndIf

	If SubStr( cCod, 4, 3 ) == "LOC"
		oMnuTree := NIL

		asMenu := {}

		MENU oMnuTree POPUP
		If !Empty(aItensAdd)
			For x := 1 to Len(aItensAdd)
				aAdd(asMenu, aItensAdd[x])
			Next x
		EndIf
		If Len(aSMENU) > 0
			For x := 1 to Len(aSMENU)
				oItem := TMenuItem():New(oMnuTree:Owner(),aSMenu[x][1],,,,&("{|| oTree:Disable(),"+aSMenu[x][2]+",oTree:Enable()}"),,,,,,,,,.T.)
				oMnuTree:Add(oItem)
			Next x
			MENUITEM Replicate("_", 22) DISABLED
		EndIf
		MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),fMntRelac(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		dbSeek("001"+SubStr(cCod,1,3)+cFilAnt)
		If nMod902 == 56 .And. (cTRBSGA)->SITNIV <> '2'
			If MNT902REST(Substr(cCod,1,3),"L","I")
				MENUITEM STR0010 ACTION oTree:Disable(),MNT902InId(3),fMntRelac(.T.),oTree:Enable() Resource "ng_ico_incidm" //"Incluir Identificação"
			EndIf
			If MNT902REST(Substr(cCod,1,3),"L","A")
				MENUITEM STR0011 ACTION oTree:Disable(),MNT902InId(4),fMntRelac(),oTree:Enable() Resource "ng_ico_altidm" //"Alterar Identificação"
			EndIf
		ElseIf nMod902 <> 56
			If MNT902REST(Substr(cCod,1,3),"L","I")
				MENUITEM STR0010 ACTION oTree:Disable(),MNT902InId(3),fMntRelac(.T.),oTree:Enable() Resource "ng_ico_incidm" //"Incluir Identificação"
			EndIf
			If MNT902REST(Substr(cCod,1,3),"L","A")
				MENUITEM STR0011 ACTION oTree:Disable(),MNT902InId(4),fMntRelac(),oTree:Enable() Resource "ng_ico_altidm" //"Alterar Identificação"
			EndIf
		EndIf
		If MNT902REST(Substr(cCod,1,3),"L","E")
			MENUITEM STR0012 ACTION oTree:Disable(),DeleteIdent("L"),oTree:Enable() Resource "ng_ico_excidm" //"Excluir Identificação"
		EndIf
		If nMod902 == 19
			If MNT902REST(Substr(cCod,1,3),"B","I")
				MENUITEM STR0107 ACTION oTree:Disable(),MNT902InB(3),oTree:Enable() Resource "ng_ico_incbemm" //"Incluir Bem"
			EndIf
			If MNT902REST(Substr(cCod,1,3),"B","I")
				MENUITEM STR0219 ACTION oTree:Disable(),MNT902IMP(),oTree:Enable() Resource "ng_ico_impbem" //"Importar Bens
			EndIf
			If Substr(cCod,1,3) <> "001" .And. MNT902REST(Substr(cCod,1,3),"S","I")
				MENUITEM STR0109 ACTION oTree:Disable(),MNT902ISS(3),oTree:Enable() Resource "ng_ico_incssm" //"Incluir SS"
			EndIf

			If Substr(cCod,1,3) <> '001' .And. MNT902REST( SubStr( cCod, 1, 3 ), 'O', 'C' )
				MENUITEM STR0085 ACTION oTree:Disable(),MNT902IOS(1),oTree:Enable() Resource "ng_ico_ioscom" //"O.S. Corretiva"
			EndIf

		ElseIf nMod902 == 35
			If MNT902REST(Substr(cCod,1,3),"O","C")
				MENUITEM STR0194 ACTION oTree:Disable(),MNT902OREL(3,"FUN"),oTree:Enable() Resource "ng_ico_incfun2" //"Incluir Função"
			EndIf
			If MNT902REST(Substr(cCod,1,3),"O","C")
				MENUITEM STR0196 ACTION oTree:Disable(),MNT902OREL(3,"TAR"),oTree:Enable() Resource "ng_ico_inctar2" //"Incluir Tarefa"
			EndIf
			If lCodAmb
				If MNT902REST(Substr(cCod,1,3),"O","C")
					MENUITEM STR0223 ACTION oTree:Disable(),MNT902ORIS( 3 ),oTree:Enable() Resource "ng_ico_incris2" //"Incluir Risco"
				EndIf
			EndIf
			If lOHSAS
				If MNT902REST(Substr(cCod,1,3),"O","C")
					MENUITEM STR0199 ACTION oTree:Disable(),MNT902PERI(3),oTree:Enable() Resource "ng_ico_incper2"  //"Incluir Perigo"
					MENUITEM Replicate("_", 22) DISABLED
					MENUITEM STR0209 ACTION oTree:Disable(),MNT902RLMDT("TJ2"),oTree:Enable() Resource "NG_ICO_QST_SEG"  //"Questionário de Segurança"
				EndIf
			EndIf
		ElseIf nMod902 == 56
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek("001"+SubStr(cCod,1,3)+cFilAnt)
				If SgaIsTemp(cCod)
					MENUITEM STR0253 DISABLED
				Else
					MENUITEM STR0254 ACTION oTree:Disable(),Sg100StAtv(),MNT902MoLg(oTree:GetCargo()),oTree:Enable() Resource "CADEADO" //"Ativar/Inativar"
					If (cTRBSGA)->SITNIV <> '2'
						MENUITEM STR0255 ACTION oTree:Disable(),MNT902ORES(3)       ,oTree:Enable() Resource "NG_ICO_INC_RES" //"Incluir Resíduo"
						MENUITEM STR0256 ACTION oTree:Disable(),SgaVincTp(__cTpRes) ,oTree:Enable() Resource "NG_ICO_VIN_RES" //"Vincular Resíduo"

						MENUITEM STR0257 ACTION oTree:Disable(),MNT902OASP(3)       ,oTree:Enable() Resource "NG_ICO_INC_ASP"//"Incluir Aspecto"
						MENUITEM STR0258 ACTION oTree:Disable(),SgaVincTp(__cTpAsp) ,oTree:Enable() Resource "NG_ICO_VIN_ASP"//"Vincular Aspecto"

						MENUITEM STR0259 ACTION oTree:Disable(),MNT902OPLA(3)       ,oTree:Enable() Resource "NG_ICO_INC_PLE"//"Incluir Plano Emergencial"
						MENUITEM STR0260 ACTION oTree:Disable(),SgaVincTp(__cTpPE)  ,oTree:Enable() Resource "NG_ICO_VIN_PLE"//"Vincular Plano Emergencial"
					EndIf
				EndIf
			EndIf
		EndIf
		ENDMENU

	ElseIf nMod902 <> 56

		If SubStr( cCod, 4, 2 ) == "OS"
			oMnuTree := NIL

			asMenu := NGRIGHTCLICK("MNTA400")

			MENU oMnuTree POPUP
			If !Empty(aItensAdd)
				For x := 1 to Len(aItensAdd)
					aAdd(asMenu, aItensAdd[x])
				Next x
			EndIf
			If Len(aSMENU) > 0
				For x := 1 to Len(aSMENU)
					oItem := TMenuItem():New(oMnuTree:Owner(),aSMenu[x][1],,,,&("{|| oTree:Disable(),"+aSMenu[x][2]+",oTree:Enable()}"),,,,,,,,,.T.)
					oMnuTree:Add(oItem)
				Next x
				MENUITEM Replicate("_", 22) DISABLED
			EndIf

			If MNT902REST( (cTRBSGA)->NIVSUP, 'O', 'V' )
				MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			EndIf
			
			MENUITEM STR0176 ACTION oTree:Disable(),U_IMP675(STJ->TJ_ORDEM,STJ->TJ_PLANO,.F.,,STJ->(RECNO())),oTree:Enable() Resource "impressao" //"Imprimir O.S."
			
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek("001"+SubStr(cCod,1,3)+cFilAnt)

				If MNT902REST((cTRBSGA)->NIVSUP,"O","R")
					dbSelectArea("STJ")
					dbSetOrder(1)
					dbSeek(xFilial("STJ")+AllTrim((cTRBSGA)->CODTIPO))
					If Empty(STJ->TJ_ORDEPAI)
						MENUITEM STR0009 ACTION oTree:Disable(),MNT902ROS(),oTree:Enable() Resource "ng_ico_retosm" //"Retornar Ordem de Serviço"
					EndIf
				EndIf
			EndIf
			ENDMENU

		ElseIf SubStr( cCod, 4, 3 ) == "BEM"
			oMnuTree := NIL

			aRemoveBtn := MNTRemovBtn('MNTA080')
			asMenu := NGRIGHTCLICK("MNTA080",,aRemoveBtn)

			MENU oMnuTree POPUP
			If Len(aSMENU) > 0
				For x := 1 to Len(aSMENU)
					If "MNTA490('B',M->T9_CODBEM)" $ aSMenu[x][2]
						aSMenu[x][2] += " .And. fAtuOS(cCod)"
					EndIf
					oItem := TMenuItem():New(oMnuTree:Owner(),aSMenu[x][1],,,,&("{|| oTree:Disable(),"+aSMenu[x][2]+",oTree:Enable()}"),,,,,,,,,.T.)
					oMnuTree:Add(oItem)
				Next x
				MENUITEM Replicate("_", 22) DISABLED
			EndIf

			If MNT902REST( SubStr( cCod, 1, 3 ), 'B', 'V' )
				MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			EndIf

			If MNT902REST(Substr(cCod,1,3),"B","E")
				MENUITEM STR0140 ACTION oTree:Disable(),DeleteIdent("B"),oTree:Enable() Resource "ng_ico_excbemm" //"Excluir Bem"
			EndIf

			If nMod902 == 19

				If Substr(cCod,1,3) <> "001" .And. MNT902REST(Substr(cCod,1,3),"S","I")
					MENUITEM STR0109 ACTION oTree:Disable(),MNT902ISS(3),oTree:Enable()Resource "ng_ico_incssm" //"Incluir SS"
				EndIf

				If Substr(cCod,1,3) <> "001" .And. MNT902REST(Substr(cCod,1,3),"O","C")
					MENUITEM STR0085 ACTION oTree:Disable(),MNT902IOS(1),oTree:Enable() Resource "ng_ico_ioscom" //"O.S. Corretiva"
				EndIf

			Else
				If MNT902REST(Substr(cCod,1,3),"S","I")
					MENUITEM STR0109 ACTION oTree:Disable(),MNT902ISS(3),oTree:Enable()Resource "ng_ico_incssm" //"Incluir SS"
				EndIf

				If MNT902REST(Substr(cCod,1,3),"O","C")
					MENUITEM STR0085 ACTION oTree:Disable(),MNT902IOS(1),oTree:Enable() Resource "ng_ico_ioscom" //"O.S. Corretiva"
				EndIf
			EndIf

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			If dbSeek("001"+SubStr(cCod,1,3)+cFilAnt)
				dbSelectArea("STF")
				dbSetOrder(1)
				If dbSeek(xFilial("STF")+AllTrim((cTRBSGA)->CODTIPO))
					If MNT902REST(Substr(cCod,1,3),"O","P")
						MENUITEM STR0141 ACTION oTree:Disable(),MNT902IOS(2),oTree:Enable() Resource "ng_ico_iosprm" //"O.S. Preventiva"
					EndIf
				EndIf

				dbSelectArea("ST9")
				dbSetOrder(1)
				dbSeek(xFilial("ST9")+AllTrim((cTRBSGA)->CODTIPO))
				M->T9_CODBEM := ST9->T9_CODBEM
			EndIf

		      //Ponto de entrada para adicionar um click da direita no bem
			If ExistBlock("MNTA9025")
				ExecBlock("MNTA9025",.F.,.F.)
			EndIf

			ENDMENU

		ElseIf SubStr( cCod, 4, 2 ) == "SS"
			oMnuTree := NIL
			cCod := SubStr(oTree:GetCargo(),1,3)
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek("001"+cCod+cFilAnt)

			dbSelectArea("TQB")
			dbSetOrder(1)
			dbSeek(xFilial("TQB")+(cTRBSGA)->CODTIPO)

			lGerOs   := .T.
			lDSS  := .T.
			lAltSS   := .T.
			lExcSS   := .T.
			lFinSS   := .T.

			If TQB->TQB_SOLUCA <> "D"
				lGerOs   := .F.
				lFinSS   := .F.
			Else
				lDSS  := .F.
			EndIf

			If TQB->TQB_SOLUCA <> "A"
				lExcSS   := .F.
			EndIf

			If AllTrim(GetNewPar("MV_NGMULOS","N")) <> "S"
				If !Empty(tqb->tqb_ordem)
					lGerOs   := .F.
					lDSS  := .F.
					lAltSS   := .F.
					lExcSS   := .F.
					dbSelectArea("STJ")
					dbSetOrder(01)
					If dbSeek(xFilial("STJ")+tqb->tqb_ordem)
						If stj->tj_situaca = "L" .And. stj->tj_termino = "N"
							lFinSS   := .F.
						EndIf
					EndIf
				EndIf
			Else
				dbSelectArea("TT7")
				dbSetOrder(1)
				If dbSeek(xFilial("TT7")+TQB->TQB_SOLICI)
					lDSS  := .F.
					lAltSS   := .F.
					lExcSS   := .F.
					While !EoF() .And. TT7->TT7_FILIAL == xFilial("TT7") .And. TT7->TT7_SOLICI == TQB->TQB_SOLICI
						If TT7->TT7_TERMIN == "N" .And. TT7->TT7_SITUAC == "L"
							lFinSS   := .F.
							Exit
						EndIf
						dbSelectArea("TT7")
						dbSkip()
					End
				EndIf

			EndIf

			asMenu := NGRIGHTCLICK("MNTA280")

			MENU oMnuTree POPUP
			If Len(aSMENU) > 0
				For x := 1 to Len(aSMENU)
					oItem := TMenuItem():New(oMnuTree:Owner(),aSMenu[x][1],,,,&("{|| oTree:Disable(),"+aSMenu[x][2]+",oTree:Enable()}"),,,,,,,,,.T.)
					oMnuTree:Add(oItem)
				Next x
				MENUITEM Replicate("_", 22) DISABLED
			EndIf

			If MNT902REST( (cTRBSGA)->NIVSUP, 'S', 'V' )
				MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			EndIf

			If (lAltSS .And. MNT902REST((cTRBSGA)->NIVSUP,"S","A"))
				MENUITEM STR0110 ACTION oTree:Disable(),MNT902ISS(4),oTree:Enable() Resource "ng_ico_altssm" //"Alterar SS"
			EndIf
			If (lExcSS .And. MNT902REST((cTRBSGA)->NIVSUP,"S","E"))
				MENUITEM STR0111 ACTION oTree:Disable(),MNT902ISS(5),oTree:Enable() Resource "ng_ico_excssm" //"Excluir SS"
			EndIf
			If (lDSS .And. MNT902REST((cTRBSGA)->NIVSUP,"S","D"))
				MENUITEM STR0112 ACTION oTree:Disable(),MNT902DSS(1),oTree:Enable() Resource "ng_ico_dssm" //"Distribuir SS"
			EndIf
			If ( ( lFacilit .And. TQB->TQB_SOLUCA == 'D' ) .Or. ( !lFacilit .And. lFinSS ) ) .And. MNT902REST( (cTRBSGA)->NIVSUP, 'S', 'F' )
				MENUITEM If(lFacilit,STR0192,STR0113) ACTION oTree:Disable(),MNT902FSS(),oTree:Enable() Resource "ng_ico_finssm" //"Atender SS"
			EndIf
			If (!lFacilit .And. lGerOs .And. MNT902REST((cTRBSGA)->NIVSUP,"S","G"))
				MENUITEM STR0142 ACTION oTree:Disable(),MNT902DSS(2),oTree:Enable() Resource "ng_ico_ioscom" //"Gerar O.S."
			EndIf
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "FUN"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			If nMod902 == 35
				MENUITEM STR0193 ACTION oTree:Disable(),MNT902OREL(4,"FUN"),oTree:Enable() Resource "ng_ico_altfun2" //"Alterar Função"
				MENUITEM STR0195 ACTION oTree:Disable(),If( MNT902VlRe(5,"FUN"),DeleteIdent("F"),),oTree:Enable() Resource "ng_ico_excfun2" //"Excluir Função"
				MENUITEM STR0196 ACTION oTree:Disable(),MNT902OREL(3,"TAR"),oTree:Enable() Resource "ng_ico_inctar2" //"Incluir Tarefa"
				If lCodAmb
					MENUITEM STR0223 ACTION oTree:Disable(),MNT902ORIS( 3 ),oTree:Enable() Resource "ng_ico_incris2" //"Incluir Risco"
				EndIf
				If lOHSAS
					MENUITEM STR0199 ACTION oTree:Disable(),MNT902PERI(3),oTree:Enable() Resource "ng_ico_incper2" //"Incluir Perigo"
				EndIf
			EndIf
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "TAR"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			MENUITEM STR0197 ACTION oTree:Disable(),MNT902OREL(4,"TAR"),oTree:Enable() Resource "ng_ico_alttar2" //"Alterar Tarefa"
			MENUITEM STR0198 ACTION oTree:Disable(),If( MNT902VlRe(5,"TAR"),DeleteIdent("T"),),oTree:Enable() Resource "ng_ico_exctar2" //"Excluir Tarefa"
			If lCodAmb
				MENUITEM STR0223 ACTION oTree:Disable(),MNT902ORIS(3),oTree:Enable() Resource "ng_ico_incris2" //"Incluir Risco"
			EndIf
			If lOHSAS
				MENUITEM STR0199 ACTION oTree:Disable(),MNT902PERI(3),oTree:Enable() Resource "ng_ico_incper2" //"Incluir Perigo"
			EndIf
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "PER" .And. lOHSAS
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			MENUITEM STR0200 ACTION oTree:Disable(),MNT902PERI(4),oTree:Enable() Resource "ng_ico_altper2" //"Alterar Perigo"
			MENUITEM STR0202 ACTION oTree:Disable(),fRemPer(),oTree:Enable() Resource "ng_ico_excper2" //"Excluir Perigo"
			MENUITEM STR0204 ACTION oTree:Disable(),fAnalise(3),oTree:Enable() Resource "ng_ico_incana2" //"Incluir Análise"
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "DAN" .And. lOHSAS
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			MENUITEM STR0203 ACTION oTree:Disable(),fAnalise(2),oTree:Enable() Resource "ng_ico_visana2" //"Visualizar Análise"
			MENUITEM STR0205 ACTION oTree:Disable(),fAnalise(4),oTree:Enable() Resource "ng_ico_altana2" //"Altera Análise"
			MENUITEM STR0206 ACTION oTree:Disable(),fAnalise(5),oTree:Enable() Resource "ng_ico_excana2" //"Excluir Análise"
			MENUITEM Replicate("_", 22) DISABLED
			MENUITEM STR0177 ACTION oTree:Disable(),MNT902RLMDT("TGF"),oTree:Enable() Resource "NG_ICO_VIS_PLA"  //"Plano de Ação"
			MENUITEM STR0178 ACTION oTree:Disable(),MNT902RLMDT("TGG"),oTree:Enable() Resource "NG_ICO_VIS_PLE" //"Plano Emergencial"
			MENUITEM STR0179 ACTION oTree:Disable(),MNT902RLMDT("TGH"),oTree:Enable() Resource "NG_ICO_OBJ_MET" //"Objetivos e Metas"
			MENUITEM STR0180 ACTION oTree:Disable(),MNT902RLMDT("TGI"),oTree:Enable() Resource "NG_ICO_VIS_MON" //"Monitoramento"
			MENUITEM STR0181 ACTION oTree:Disable(),MNT902RLMDT("TNC"),oTree:Enable() Resource "NG_ICO_VIS_ACI" //"Acidentes"
			MENUITEM STR0182 ACTION oTree:Disable(),MNT902RLMDT("TN0"),oTree:Enable() Resource "ng_ico_visris2" //"Visualizar Risco"
			MENUITEM STR0183 ACTION oTree:Disable(),MNT902RLMDT( "TRM" ),oTree:Enable() Resource "NG_ICO_GER_TRM" //"Gerar Treinamentos"
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "RIS"  .And. lCodAmb
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			MENUITEM STR0182 ACTION oTree:Disable(),MNT902ORIS(2),oTree:Enable() Resource "ng_ico_visris2" //"Visualizar Risco"
			MENUITEM STR0224 ACTION oTree:Disable(),MNT902ORIS(4),oTree:Enable() Resource "ng_ico_altris2" //"Alterar Risco"
			MENUITEM STR0225 ACTION oTree:Disable(),MNT902ORIS(5),oTree:Enable() Resource "ng_ico_excris2" //"Excluir Risco"
			MENUITEM STR0226 ACTION oTree:Disable(),fRelacRis(4),oTree:Enable() Resource "ng_ico_relris2" //"Relac. Risco"
			ENDMENU
		Else
			MENU oMnuTree POPUP
			ENDMENU
		EndIf

	Else

		If SubStr( cCod, 4, 3 ) == "RES"
			oMnuTree := NIL
			MENU oMnuTree POPUP

			If SgaIsTemp(cCod)
				MENUITEM STR0253 DISABLED
			Else
				MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"

				MENUITEM STR0261 ACTION oTree:Disable(),MNT902ORES(2),oTree:Enable() Resource "NG_ICO_VIS_RES"//"Visualizar Resíduo"
				MENUITEM STR0262 ACTION oTree:Disable(),MNT902ORES(4),oTree:Enable() Resource "NG_ICO_ALT_RES"//"Alterar Resíduo"
				MENUITEM STR0263 ACTION oTree:Disable(),DeleteIdent("1"),oTree:Enable() Resource "NG_ICO_RET_RES"//"Retirar Resíduo"

				MENUITEM STR0264 ACTION oTree:Disable(),SgaOprOcR(3),oTree:Enable() Resource "NG_ICO_INC_ORE"//"Incluir Ocorrência"
				MENUITEM STR0310 ACTION oTree:Disable(),SgaOprFMR(3),oTree:Enable() Resource "NG_ICO_INC_FMR"//"Incluir FMR"

			EndIf
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "ORS"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			MENUITEM STR0265 ACTION oTree:Disable(),SgaOprOcR(2),oTree:Enable() Resource "NG_ICO_VIS_ORE"//"Visualizar Ocorrência"

			ENDMENU
		ElseIf SubStr( cCod, 4, 2 ) == "FM"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			MENUITEM "Visualizar FMR" ACTION oTree:Disable(),SgaOprFMR(2),oTree:Enable() Resource "NG_ICO_VIS_FMR"//"Visualizar FMR"

			If SubStr( cCod, 4, 3 ) == "FM4"
				cNomBtnFMR := STR0331 //"Conformidade FMR"
			Else
				cNomBtnFMR := STR0312 //"Alterar FMR"
			EndIf
			MENUITEM cNomBtnFMR ACTION oTree:Disable(),SgaOprFMR(4),oTree:Enable() Resource "NG_ICO_ALT_FMR"//"Alterar FMR"
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "ASP"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			If SgaIsTemp(cCod)
				MENUITEM STR0253 DISABLED
			Else
				MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
				MENUITEM STR0266 ACTION oTree:Disable(),MNT902OASP(2),oTree:Enable() Resource "NG_ICO_VIS_ASP"//"Visualizar Aspecto"
				MENUITEM STR0267 ACTION oTree:Disable(),MNT902OASP(4),oTree:Enable() Resource "NG_ICO_ALT_ASP"//"Alterar Aspecto"
				MENUITEM STR0268 ACTION oTree:Disable(),DeleteIdent("2"),oTree:Enable() Resource "NG_ICO_RET_ASP"//"Retirar Aspecto"
				MENUITEM STR0269 ACTION oTree:Disable(),SgaOprDes(3),oTree:Enable() Resource "NG_ICO_INC_DES"//"Incluir Desempenho"
				MENUITEM STR0270 ACTION oTree:Disable(),AprovDes(),oTree:Enable() Resource "NG_ICO_APR_DES"//"Aprovar Desempenho"
				MENUITEM STR0271 ACTION oTree:Disable(),CopiaDes(),oTree:Enable() Resource "NG_ICO_COP_DES"//"Copiar Desempenho"

			EndIf
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "DES"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
			MENUITEM STR0272 ACTION oTree:Disable(),SgaOprDes(2),oTree:Enable() Resource "NG_ICO_VIS_DES"//"Visualizar Desempenho"
			MENUITEM STR0273 ACTION oTree:Disable(),SgaOprDes(4),oTree:Enable() Resource "NG_ICO_ALT_DES"//"Alterar Desempenho"
			MENUITEM STR0274 ACTION oTree:Disable(),SgaOprDes(5),oTree:Enable() Resource "NG_ICO_EXC_DES"//"Excluir Desempenho"
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "PLE"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			If SgaIsTemp(cCod)
				MENUITEM STR0253 DISABLED
			Else
				MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
				MENUITEM STR0275 ACTION oTree:Disable(),MNT902OPLA(2),oTree:Enable() Resource "NG_ICO_VIS_PLE"//"Visualizar Plano Emergencial"
				MENUITEM STR0276 ACTION oTree:Disable(),MNT902OPLA(4),oTree:Enable() Resource "NG_ICO_ALT_PLE"//"Alterar Plano Emergencial"
				MENUITEM STR0277 ACTION oTree:Disable(),DeleteIdent("3"),oTree:Enable() Resource "NG_ICO_RET_PLE"//"Retirar Plano Emergencial"
				MENUITEM STR0264 ACTION oTree:Disable(),SgaOprOPE(3),oTree:Enable() Resource "NG_ICO_INC_OPE"//"Incluir Ocorrência"
				MENUITEM STR0278 ACTION oTree:Disable(),ConfPlaSim(),oTree:Enable() Resource "NG_ICO_CFM_PLS"//"Confirmação do Plano de Simulação"
				MENUITEM STR0279 ACTION oTree:Disable(),RetPlaSimu(3),oTree:Enable() Resource "NG_ICO_ROS_PLE"//"Retorno das Ordens de Simulação"

			EndIf
			ENDMENU
		ElseIf SubStr( cCod, 4, 3 ) == "OPE"
			oMnuTree := NIL
			MENU oMnuTree POPUP
			If SgaIsTemp(cCod)
				MENUITEM STR0253 DISABLED
			Else
				MENUITEM STR0007 ACTION oTree:Disable(),MNT902VRun(),oTree:Enable() Resource "bmpvisual" //"Visualizar Item"
				MENUITEM STR0265 ACTION oTree:Disable(),SgaOprOPE(2),oTree:Enable() Resource "NG_ICO_VIS_OPE"//"Visualizar Ocorrência"
				MENUITEM STR0280 ACTION oTree:Disable(),SgaOprOPE(4),oTree:Enable() Resource "NG_ICO_ALT_OPE"//"Alterar Ocorrência"
				MENUITEM STR0281 ACTION oTree:Disable(),SgaOprOPE(5),oTree:Enable() Resource "NG_ICO_EXC_OPE"//"Excluir Ocorrência"
				MENUITEM STR0282 ACTION oTree:Disable(),RespOcoPla(4),oTree:Enable() Resource "NG_ICO_RSP_OPE"//"Responder Ocorrência"
			EndIf
			ENDMENU
		Else
			MENU oMnuTree POPUP
			ENDMENU
		EndIf

	EndIf

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} NGValidTUA
Verifica se ha permissão para visualizar registro de acordo com parâmetros 
Alias ou Bloco de codigo. 
@type function

@author Vitor Emanuel Batista
@since 23/06/2010

@param cAlias , string    , Alias do registro a ser validado.
@param bValid , code block, Procedimento a ser executado, desconsiderando cAlias.
@param cNivSup, string    , Código do nivel superior na hierarquia da árvore.
@param cTipRes, string    , Tipo de restrição a ser validado.
@param lCorret, boolean   , Indica se a O.S. é do tipo corretiva. 

@return boolean, Indica se o usuário possui acesso ao processo.
/*/
//------------------------------------------------------------------------------
Function NGValidTUA( cAlias, bValid, cNivSup, cTipRes, lCorret )

	Local aArea    := GetArea()
	Local aAreaStj := STJ->( GetArea() )
	Local aAreaST9 := ST9->( GetArea() )
	Local nX
	Local aVerTUA := {{"2",RetCodUsr()}}
	Local cGrpUsr
	Local lRet := .T.

	Local cOpcCTT := "1" //CENTRO DE CUSTO
	Local cOpcSHB := "2" //CENTRO DE TRABALHO
	Local cOpcST6 := "3" //FAMILIA DE BENS
	Local cOpcTQR := '4' // Modelo do Bem
   	Local cOpcST4 := "7" //SERVICO
	Local cOpcTAF := "8" //LOCALIZACAO
	Local cOptST9 := '0' // Bem

	Local lRestri := .F.

	Default cAlias := "TAF"
	Default cNivSup:= ""
	Default cTipRes:= "1"

   	//-----------------------------------------
   	// Valida existencia das tabela TUA e TUB
   	//-----------------------------------------
	If AliasInDic( 'TUA' ) .And. AliasInDic( 'TUB' )

		//-----------------------------------------
		// Valida existencia das tabela TUA e TUB
		//-----------------------------------------
		dbSelectArea( 'TUA' )
		dbSetOrder( 1 )
		dbGoTop()
		If !EoF()

			//-----------------------------------------
			// Se nao existir restricao para o usuario,
			// considera a de seus grupos
			//-----------------------------------------
			cGrpUsr := RetCodUsr()
			dbSelectArea("TUA")
			dbSetOrder(1)
			If dbSeek(xFilial("TUA")+"12"+cGrpUsr)
				lRestri := .T.
			Else
				aVerTUA := {}
				//Verifica se possui restrição de acesso pelo grupo
				aPswRet := UsrRetGrp(cUsername)
				If Len(aPswRet) > 0

					For nX := 1 to Len(aPswRet)
						If !Empty(aPswret[nX])
							aAdd(aVerTUA, {"1",aPswret[nX]})
						EndIf
					Next nX
				EndIf

				For nX := 1 to Len(aVerTUA)
					dbSelectarea("TUA")
					dbSetorder(1)
					If dbSeek( xFilial("TUA") + "11" + aVerTUA[nX][2] )
						lRestri := .T.
						Exit
					EndIf
				Next nX

			EndIf

			If lRestri

				For nX := 1 To Len(aVerTUA)
					cGrpUsr := aVerTUA[nX][2]

					dbSelectArea("TUA")
					dbSetOrder(1)
					If dbSeek(xFilial("TUA")+cTipRes+aVerTUA[nX][1]+cGrpUsr)
						lRet := .T.

						If ValType(bValid) == "B"
							//-------------
							// Localizacao
							//-------------
							If !Eval(bValid,aVerTUA[nX][1],cGrpUsr,cTipRes)
								lRet := .F.
							EndIf

						ElseIf cAlias == 'TAF'

							//-------------
							// Localizacao
							//-------------
							If TAF->TAF_INDCON == '2'

								lRet := MNTA902TUB( aVerTUA[nX,1], cGrpUsr, { { cOpcCTT, TAF->TAF_CCUSTO },	{ cOpcSHB, TAF->TAF_CENTRA }, { cOpcTAF, TAF->TAF_CODNIV } },;
									cTipRes )

							Else

								dbSelectArea( 'ST9' )
								dbSetOrder( 1 )
								dbSeek( xFilial( 'ST9' ) + TAF->TAF_CODCON )

								lRet := MNTA902TUB( aVerTUA[nX,1], cGrpUsr, { { cOpcCTT, ST9->T9_CCUSTO },	{ cOpcSHB, ST9->T9_CENTRAB }, { cOptST9, ST9->T9_CODBEM },;
									{ cOpcST6, ST9->T9_CODFAMI }, { cOpcTQR, ST9->T9_TIPMOD } }, cTipRes )

							EndIf

						ElseIf cAlias == "STF"
							//--------------------------------------------
							// Verifica se existe o Servico da Manutencao
							//--------------------------------------------
							If !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcST4,STF->TF_SERVICO,cTipRes)
								lRet := .F.
							EndIf
						ElseIf cAlias == "STJ"

							//-----------------------------------------
							// Verifica se pode visualizar O.S do item
							//-----------------------------------------
							If !Empty(cNivSup)
								lRet := MNT902REST( SubStr( cNivSup, 1, 3 ), 'O', 'V', , , lCorret )
							EndIf

							//--------------------------------------------
							// Verifica se existe Centro de Custo da O.S
							//--------------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcCTT,STJ->TJ_CCUSTO,cTipRes)
								lRet := .F.
							EndIf

							//----------------------------------------------
							// Verifica se existe Centro de Trabalho da O.S
							//----------------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcSHB,STJ->TJ_CENTRAB,cTipRes)
								lRet := .F.
							EndIf

							//--------------------------------------------
							// Verifica se existe o Servico da Manutencao
							//--------------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcST4,STJ->TJ_SERVICO,cTipRes)
								lRet := .F.
							EndIf

						ElseIf cAlias == "TQB"

							//-----------------------------------------
							// Verifica se pode visualizar S.S do item
							//-----------------------------------------
							If !Empty(cNivSup)
								lRet := MNT902REST(Substr(cNivSup,1,3),"S","V")
							EndIf

							//--------------------------------------------
							// Verifica se existe Centro de Custo da S.S
							//--------------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcCTT,TQB->TQB_CCUSTO,cTipRes)
								lRet := .F.
							EndIf

							//---------------------------------------------
							//Verifica se existe Centro de Trabalho da S.S
							//---------------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcSHB,TQB->TQB_CENTRA,cTipRes)
								lRet := .F.
							EndIf

						ElseIf cAlias == "ST9"


							//--------------------------------------------
							// Verifica se existe Centro de Custo do Bem
							//--------------------------------------------
							If !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcCTT,ST9->T9_CCUSTO,cTipRes)
								lRet := .F.
							EndIf

							//----------------------------------------------
							// Verifica se existe Centro de Trabalho do Bem
							//----------------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcSHB,ST9->T9_CENTRAB,cTipRes)
								lRet := .F.
							EndIf

							//--------------------------------------
							// Verifica se existe a Familia de Bens
							//--------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcST6,ST9->T9_CODFAMI,cTipRes)
								lRet := .F.
							EndIf

							//--------------------------------------------
							// Verifica se existe o Tipo de Modelo do Bem
							//--------------------------------------------
							If lRet .And. !NGVerifTUB(aVerTUA[nX][1],cGrpUsr,cOpcTQR,ST9->T9_TIPMOD,cTipRes)
								lRet := .F.
							EndIf

						EndIf

						If lRet
							Exit
						EndIf

					EndIf
				Next nX
			EndIf

		EndIf

	EndIf

	If lRet

		If cAlias == 'STJ'
			// Consiste privilégios de visualização da O.S.
			lRet := fGetAcess( 'O', 'V', lCorret )
		ElseIf cAlias == 'TQB'
			// Consiste privilégios de visualização da S.S.
			lRet := fGetAcess( 'S', 'V' )
		EndIf

	EndIf

	RestArea( aAreaST9 )
	RestArea(aAreaStj)
	RestArea(aArea)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³NGInsertTUB ³ Autor ³Vitor Emanuel Batista ³ Data ³24/08/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verifica restricao de acesso e permite a visualizacao do item³±±
±±³          ³para os Grupos/Usuarios                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function NGInsertTUB()

	Local aAreaTAF:= TAF->(GetARea())
	Local lInclui
	Local cOpcCTT := "1" //CENTRO DE CUSTO
	Local cOpcSHB := "2" //CENTRO DE TRABALHO
	Local cOpcST6 := "3" //FAMILIA DE BENS
	Local cOpcTQR := '4' // TIPO DE MODELO DE BEM

	If !AliasInDic("TUA") .Or. !AliasInDic("TUB")
		Return
	EndIf

	dbSelectArea("TUA")
	dbSetOrder(1)
	dbSeek(xFilial("TUA"))
	While !EoF() .And. xFilial("TUA") == TUA->TUA_FILIAL

		dbSelectArea("TUB")
		dbSetOrder(1)

		If TAF->TAF_INDCON == "1" //BEM

			lInclui := !dbSeek( xFilial( 'TUB' ) + TUA->TUA_TIPRES + TUA->TUA_TIPO + TUA->TUA_GRPUSR + '0' + TAF->TAF_CODCON )

			dbSelectArea("ST9")
			dbSetOrder(1)
			dbSeek(xFilial("ST9")+TAF->TAF_CODCON)

			If NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcCTT,ST9->T9_CCUSTO,TUA->TUA_TIPRES)  .And.;
			   NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcSHB,ST9->T9_CENTRAB,TUA->TUA_TIPRES) .And.;
			   NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcST6,ST9->T9_CODFAMI,TUA->TUA_TIPRES) .And.;
			   NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcTQR,ST9->T9_TIPMOD,TUA->TUA_TIPRES)

				RecLock( 'TUB', lInclui )
				TUB->TUB_FILIAL := xFilial("TUB")
				TUB->TUB_TIPRES := TUA->TUA_TIPRES
				TUB->TUB_TIPO   := TUA->TUA_TIPO
				TUB->TUB_GRPUSR := TUA->TUA_GRPUSR
				TUB->TUB_OPCAO  := '0'
				TUB->TUB_CODIGO := TAF->TAF_CODCON
				TUB->TUB_MARCA  := '1'
				TUB->TUB_FILTRO := '1'
				TUB->( MsUnLock() )

			ElseIf !lInclui

				RecLock("TUB",.F.)
				dbDelete()
				TUB->( MsUnLock() )

			EndIf

		ElseIf TAF->TAF_INDCON == "2" //LOCALIZACAO

			lInclui := !dbSeek( xFilial( 'TUB' ) + TUA->TUA_TIPRES + TUA->TUA_TIPO + TUA->TUA_GRPUSR + '8' + TAF->TAF_CODNIV )

			If NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcCTT,TAF->TAF_CCUSTO,TUA->TUA_TIPRES) .And.;
			   NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcSHB,TAF->TAF_CENTRA,TUA->TUA_TIPRES)

				RecLock( 'TUB', lInclui )
				TUB->TUB_FILIAL := xFilial("TUB")
				TUB->TUB_TIPRES := TUA->TUA_TIPRES
				TUB->TUB_TIPO   := TUA->TUA_TIPO
				TUB->TUB_GRPUSR := TUA->TUA_GRPUSR
				TUB->TUB_OPCAO  := "8"
				TUB->TUB_CODIGO := TAF->TAF_CODNIV
				TUB->TUB_FILTRO := "1"
				TUB->TUB_MARCA  := "1"
				TUB->( MsUnLock() )

			ElseIf !lInclui

				RecLock("TUB",.F.)
				dbDelete()
				TUB->( MsUnLock() )

			EndIf

		EndIf

		dbSelectArea("TUA")
		dbSkip()
	EndDo

	RestArea(aAreaTAF)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ NGAlterTUB ³ Autor ³Vitor Emanuel Batista ³ Data ³24/08/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verifica restricao de acesso e permite a visualizacao do item³±±
±±³          ³para os Grupos/Usuarios                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³cCusto   - Novo Centro de Custo                              ³±±
±±³          ³cCentrab - Novo Centro de Trabalho                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function NGAlterTUB(cCusto,cCentrab)

	Local aArea := TAF->(GetArea())
	Local lVisivel, lExist
	Local nX, nLenSon
	Local cPai
	Local aDelSon   := {}
	Local cOption   := ''
	Local cCode     := ''
	Local cCodNiv   := TAF->TAF_CODNIV
	Local cCustoOld := TAF->TAF_CCUSTO
	Local cCTrabOld := TAF->TAF_CENTRA

	Local cOpcCTT := "1" //CENTRO DE CUSTO
	Local cOpcSHB := "2" //CENTRO DE TRABALHO
	Local cOpcST6 := "3" //FAMILIA DE BENS
	Local cOpcTQR := '4' // TIPO DE MODELO DE BEM

	If !AliasInDic("TUA") .Or. !AliasInDic("TUB")
		Return
	EndIf

	If TAF->TAF_INDCON == '1'

		dbSelectArea("ST9")
		dbSetOrder(1)
		dbSeek(xFilial("ST9")+TAF->TAF_CODCON)

		cCustoOld := ST9->T9_CCUSTO
		cCTrabOld := ST9->T9_CENTRAB
		cOption   := '0'
		cCode     := ST9->T9_CODBEM

	Else

		cOption   := '8'
		cCode     := cCodNiv

	EndIf

	If cCustoOld != cCusto .Or. cCTrabOld != cCentrab

		dbSelectArea("TUA")
		dbSetOrder(1)
		dbSeek(xFilial("TUA"))
		While !EoF() .And. xFilial("TUA") == TUA->TUA_FILIAL

			dbSelectArea("TUB")
			dbSetOrder(1)

			lExist   := dbSeek( xFilial( 'TUB' ) + TUA->TUA_TIPRES + TUA->TUA_TIPO + TUA->TUA_GRPUSR + cOption + cCode )
			lVisivel := NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcCTT,cCusto,TUA->TUA_TIPRES) .And.;
				NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcSHB,cCentrab,TUA->TUA_TIPRES)

         	//Se existir porem registro esta desmarcado
			If lExist
				If TUB->TUB_MARCA == "2" .Or. lVisivel
					dbSelectArea("TUA")
					dbSkip()
				EndIf
			ElseIf !lVisivel
				dbSelectArea("TUA")
				dbSkip()
			EndIf


			If lExist
	            //---------------------------------------------------------
	            // Se localizacao existir na TUB porem nao eh mais visivel
	            //---------------------------------------------------------
				If !lVisivel
					nX := nLenSon := 1
					aDelSon := {}
					aAdd(aDelSon,cCodNiv)

					RecLock("TUB",.F.)
					dbDelete()
					TUB->( MsUnLock() )

	               //---------------------------------------------
	               // Exclui todos os itens abaixo da localizacao
	               //---------------------------------------------
					dbSelectArea("TAF")
					dbSetOrder(1)
					While nX <= nLenSon
						cPai := aDelSon[nX]

						dbSeek(xFilial("TAF")+"001"+cPai)
						While !EoF() .And. xFilial("TAF") == TAF->TAF_FILIAL .And. TAF->TAF_NIVSUP == cPai
							dbSelectArea("TUB")
							dbSetOrder(1)
							If dbSeek(xFilial("TUB")+TUA->TUA_TIPRES+TUA->TUA_TIPO+TUA->TUA_GRPUSR+"8"+TAF->TAF_CODNIV)
								RecLock("TUB",.F.)
								dbDelete()
								TUB->( MsUnLock() )
								aAdd(aDelSon,TAF->TAF_CODNIV)
								nLenSon++
							EndIf

							dbSelectArea("TAF")
							dbSkip()
						EndDo
						nX++
					EndDo
				EndIf
			Else

				dbSelectArea("TUB")
				dbSetOrder(1)
				If dbSeek(xFilial("TUB")+TUA->TUA_TIPRES+TUA->TUA_TIPO+TUA->TUA_GRPUSR+"8"+TAF->TAF_NIVSUP) .And. TUB->TUB_MARCA == "1"

					nX := nLenSon := 1
					aAddSon := {}
					aAdd(aAddSon,cCodNiv)

					dbSelectArea( 'TUB' )
					dbSetOrder( 1 )

					If !dbSeek( xFilial( 'TUB' ) + TUA->TUA_TIPRES + TUA->TUA_TIPO + TUA->TUA_GRPUSR + cOption + cCode )
						RecLock("TUB",.T.)
					Else
						RecLock("TUB",.F.)
					EndIf

					TUB->TUB_FILIAL := xFilial("TUB")
					TUB->TUB_TIPRES := TUA->TUA_TIPRES
					TUB->TUB_TIPO   := TUA->TUA_TIPO
					TUB->TUB_GRPUSR := TUA->TUA_GRPUSR
					TUB->TUB_OPCAO  := cOption
					TUB->TUB_CODIGO := cCode
					TUB->TUB_FILTRO := "1"
					TUB->TUB_MARCA  := "1"

					TUB->( MsUnLock() )

	               //----------------------------------------------
	               // Exclui todos os itens abaixo da localizacao
	               //----------------------------------------------
					dbSelectArea("TAF")
					dbSetOrder(1)
					While nX <= nLenSon
						cPai := aAddSon[nX]

						dbSeek(xFilial("TAF")+"001"+cPai)
						While !EoF() .And. xFilial("TAF") == TAF->TAF_FILIAL .And. TAF->TAF_NIVSUP == cPai

							If TAF->TAF_INDCON == "1" //BEM
								dbSelectArea("ST9")
								dbSetOrder(1)
								dbSeek(xFilial("ST9")+TAF->TAF_CODCON)

								If NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcCTT,ST9->T9_CCUSTO,TUA->TUA_TIPRES)  .And.;
									NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcSHB,ST9->T9_CENTRAB,TUA->TUA_TIPRES) .And.;
									NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcST6,ST9->T9_CODFAMI,TUA->TUA_TIPRES) .And.;
									NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcTQR,ST9->T9_TIPMOD,TUA->TUA_TIPRES)

									RecLock("TUB",.T.)
									TUB->TUB_FILIAL := xFilial("TUB")
									TUB->TUB_TIPRES := TUA->TUA_TIPRES
									TUB->TUB_TIPO   := TUA->TUA_TIPO
									TUB->TUB_GRPUSR := TUA->TUA_GRPUSR
									TUB->TUB_OPCAO  := '0'
									TUB->TUB_CODIGO := TAF->TAF_CODCON
									TUB->TUB_FILTRO := "1"
									TUB->TUB_MARCA  := "1"
									TUB->( MsUnLock() )

								EndIf
							ElseIf TAF->TAF_INDCON == "2" //LOCALIZACAO
								If NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcCTT,TAF->TAF_CCUSTO,TUA->TUA_TIPRES)  .And.;
										NGVerifTUB(TUA->TUA_TIPO,TUA->TUA_GRPUSR,cOpcSHB,TAF->TAF_CENTRA,TUA->TUA_TIPRES)
									RecLock("TUB",.T.)
									TUB->TUB_FILIAL := xFilial("TUB")
									TUB->TUB_TIPRES := TUA->TUA_TIPRES
									TUB->TUB_TIPO   := TUA->TUA_TIPO
									TUB->TUB_GRPUSR := TUA->TUA_GRPUSR
									TUB->TUB_OPCAO  := "8"
									TUB->TUB_CODIGO := TAF->TAF_CODNIV
									TUB->TUB_FILTRO := "1"
									TUB->TUB_MARCA  := "1"
									TUB->( MsUnLock() )

									aAdd(aAddSon,TAF->TAF_CODNIV)
									nLenSon++
								EndIf
							EndIf

							dbSelectArea("TAF")
							dbSkip()
						EndDo
						nX++
					EndDo

				EndIf

			EndIf

			dbSelectArea("TUA")
			dbSkip()
		EndDo
	EndIf

	RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³NGDeleteTUB ³ Autor ³Vitor Emanuel Batista ³ Data ³24/08/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Exclui um registro da TUB de todas as TUA                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function NGDeleteTUB()

	Local aArea := TAF->(GetArea())

	If !AliasInDic("TUA") .Or. !AliasInDic("TUB")
		Return
	EndIf

	dbSelectArea("TUA")
	dbSetOrder(1)
	dbSeek(xFilial("TUA"))
	While !EoF() .And. xFilial("TUA") == TUA->TUA_FILIAL

		dbSelectArea("TUB")
		dbSetOrder(1)
		If dbSeek(xFilial("TUB")+TUA->TUA_TIPRES+TUA->TUA_TIPO+TUA->TUA_GRPUSR+"8"+TAF->TAF_CODNIV)
			RecLock("TUB",.F.)
			dbDelete()
			TUB->( MsUnLock() )
		EndIf

		dbSelectArea("TUA")
		dbSkip()
	EndDo

	RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ NGVTAFTUA  ³ Autor ³Vitor Emanuel Batista ³ Data ³25/08/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Valida campos de memoria de Centro de Custo e Centro de Trab.³±±
±±³          ³de acordo com a restricao de acesso da Arvore Logica         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function NGVTAFTUA(cAlias)

	Local lRet := .T.

	If AliasInDic("TUA") .And. AliasInDic("TUB")
		If cAlias == "CTT"
			lRet := NGValidTUA(Nil,{|cTipo,cGrpUsr| NGVerifTUB(cTipo,cGrpUsr,"1",M->TAF_CCUSTO)})
		ElseIf cAlias == "SHB"
			lRet := NGValidTUA(Nil,{|cTipo,cGrpUsr| NGVerifTUB(cTipo,cGrpUsr,"2",M->TAF_CENTRA)})
		EndIf

		If !lRet
			MsgStop(STR0145,STR0091) //"Usuário sem permissão para informar este registro."
		EndIf
	EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ MNT902VCT  ³ Autor ³Vitor Emanuel Batista ³ Data ³25/08/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Valida campos de memoria de Centro de Custo e Centro de Trab.³±±
±±³          ³de acordo com a restricao de acesso da Arvore Logica         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MNT902VCT(cCusto,cCenTrab)

	dbSelectArea("SHB")
	dbSetOrder(1)
	If dbSeek(xFilial("SHB")+cCenTrab) .And. SHB->HB_CC == cCusto
		Return .T.
	EndIf

Return .F.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MNT902PESQºAutor  ³Roger Rodrigues     º Data ³  20/09/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Realiza pesquisa de Itens na Arvore Logica                  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function MNT902PESQ(cValor, nTipo,cCmbPesq)

	Local i
	Local cMsgHelp := "", cFBtn := ""
	Local aTemp    := {}
	Local cOpcPesq := cCmbPesq

	Default cValor   := cVarPesq
	Default nTipo    := oCmbPesq:nAt

	cValor := Trim(cValor)
	If Empty(cValor)
		Return .T.
	EndIf

	Processa({|| aTemp := (fCarLoc(cValor, nTipo)) } )//Carrega localizacoes

	If Len(aTemp) == 0
		If cOpcPesq == STR0130 //"Bem"
			cMsgHelp := STR0146 //"Não foi encontrado nenhum Bem com Código ou Decrição parecido com o digitado."
		ElseIf cOpcPesq == STR0166 //"Funcao"
			cMsgHelp := STR0242//"Não foi encontrado nenhuma Função com Código ou Decrição parecido com o digitado."
		ElseIf cOpcPesq == STR0167 //"Tarefa"
			cMsgHelp := STR0243//"Não foi encontrado nenhuma Tarefa com Código ou Decrição parecido com o digitado."
		ElseIf cOpcPesq == STR0222 //"Risco"
			cMsgHelp := STR0244//"Não foi encontrado nenhum Risco com Código ou Decrição parecido com o digitado."
		ElseIf cOpcPesq == STR0252 //"Resíduo"
			cMsgHelp := STR0290//"Não foi encontrado nenhum Resíduo com Código ou Decrição parecido com o digitado."
		ElseIf cOpcPesq == STR0251 //"Aspecto"
			cMsgHelp := STR0291//"Não foi encontrado nenhum Aspecto com Código ou Decrição parecido com o digitado."
		ElseIf cOpcPesq == STR0250 //"Planos Emergenciais"
			cMsgHelp := STR0292//"Não foi encontrado nenhum Aspecto com Código ou Decrição parecido com o digitado."
		Else
			cMsgHelp := STR0147 //"Não foi encontrado nenhuma Localização com a Decrição parecida com a digitada."
		EndIf
		ShowHelpDlg(STR0101,{cMsgHelp}) //"Atenção"
		Return .T.
	EndIf
	aItensPesq := aClone(aTemp)
	oListPesq:SetArray(aItensPesq)
	oListPesq:bLine:= bLinePesq

	oListPesq:GoTop()
	oListPesq:Refresh()
	oPanel23:Owner():CommitControls()
	oListPesq:cToolTip := OemToAnsi(STR0156)//"Duplo clique posiciona no Bem/Localização"

	oPanel23:Show()
	oPanel24:Hide()

Return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fCarLoc   ºAutor  ³Roger Rodrigues     º Data ³  18/10/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Carrega localizacoes de acordo com valor digitado           º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fCarLoc(cValor, nTipo)

	Local i				:= 0
	Local nX			:= 0
	Local nTipVer 		:= nTipo
	Local aLocais 		:= {}
	Local aEstrut 		:= {}
	Local aBens 		:= {}
	Local cModoTAF		:= NGSX2MODO("TAF")
	Local cFilST9		:= ""
	Local cCondST9		:= ""
	Local cFilOld 		:= cFilAnt
	Local cQuery		:= ""
	Local cAliasLFor 	:= ""
	Local lMNTA902F		:= ExistBlock("MNTA902F")
	Local cLike         := "%'%" + Trim( cValor ) + "%'%"

	cValor := Upper(cValor)

	If nMod902 == 19
		nTipVer := nTipo
	ElseIf nMod902 == 35
		If nTipo == 1
			nTipVer := 2
		ElseIf nTipo == 2
			nTipVer := 4
		ElseIf nTipo == 3
			nTipVer := 5
		ElseIf nTipo == 4
			nTipVer := 6
		EndIf
	ElseIf nMod902 == 56
		If nTipo == 1
			nTipVer := 2
		ElseIf nTipo == 2
			nTipVer := 7
		ElseIf nTipo == 3
			nTipVer := 8
		ElseIf nTipo == 4
			nTipVer := 9
		EndIf
	Else
		nTipVer := 2
	EndIf

	For nX := 1 To Len(aFilial)

		cFilAnt := aFilial[nX]
		cFilST9 := If(cModoTAF == "C", xFilial("TAF"), xFilial("ST9"))
		cCondST9:= If(cModoTAF == "C",".T.","ST9->T9_FILIAL == '"+cFilST9+"'")

		If lMNTA902F
			aLocais := ExecBlock("MNTA902F", .F., .F., {cValor,nTipVer})
			If Len(aLocais) > 1
				Return aLocais
			EndIf
		EndIf


		If nTipVer == 1 // Pesquisa por Bem

			cAliasLFor := GetNextAlias()

			BeginSQL Alias cAliasLFor

				SELECT T9_CODBEM
				FROM %table:ST9% ST9
				WHERE ST9.%NotDel%
					AND T9_FILIAL = %xFilial:ST9%
					AND ( T9_CODBEM LIKE %exp:cLike%
						OR T9_NOME LIKE %exp:cLike%
						OR T9_PLACA LIKE %exp:cLike% )

			EndSQL

			Do While (cAliasLFor)->( !EoF() )

				aAdd( aBens, (cAliasLFor)->T9_CODBEM )

				(cAliasLFor)->( dbSkip() )

			End Do

			(cAliasLFor)->( dbCloseArea() )

      		//Verifica bens na estrutura organizacional
			ProcRegua(Len(aBens))
			For i:=1 to Len(aBens)
				IncProc()
				dbSelectArea("TAF")
				dbSetOrder(6)
				If dbSeek(xFilial("TAF")+"X"+"1"+aBens[i])
					dbSelectArea(cTRBSGA)
					dbSetOrder(3)
					If !dbSeek("1"+aBens[i]+cFilAnt) .Or. Empty((cTRBSGA)->DELETADO)
						If aScan(aLocais,{|x| x[1] == TAF->TAF_CODNIV+"BEM"+cFilAnt} ) == 0
							aAdd(aLocais, {TAF->TAF_CODNIV+"BEM"+cFilAnt, TAF->TAF_NIVSUP, .F., aBens[i], Upper(AllTrim(NGLocComp(aBens[i],"1"))), 1 })
						EndIf
					EndIf
				Else
					dbSelectArea(cTRBSGA)
					dbSetOrder(3)
					If dbSeek("1"+aBens[i]+cFilAnt) .And. Empty((cTRBSGA)->DELETADO)
						If aScan(aLocais,{|x| x[1] == (cTRBSGA)->CODPRO+"BEM"+cFilAnt} ) == 0
							aAdd(aLocais, {(cTRBSGA)->CODPRO+"BEM"+cFilAnt, (cTRBSGA)->NIVSUP, .T., aBens[i], Upper(AllTrim(fRetComp((cTRBSGA)->CODPRO,"1"))), 1})
						EndIf
					EndIf
				EndIf
			Next i

		ElseIf nTipVer ==2 //Pesquisa por Localizacao
      		//Verifica na TRB todas localizacoes do MNT
			ProcRegua((cTRBSGA)->(RecCount()))
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbGoTop()
			While !eof()
				IncProc()
				If (cTRBSGA)->TIPO == "2" .And. ( ( nMod902 == 19 .And. !Empty((cTRBSGA)->MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty((cTRBSGA)->MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty((cTRBSGA)->MODSGA) ) ) .And. ;
						Empty((cTRBSGA)->DELETADO) .And. (cTRBSGA)->FILIAL == cFilAnt
					If aScan(aLocais,{|x| x[1] == (cTRBSGA)->CODPRO+"LOC"+cFilAnt } ) == 0 .And. cValor $ Upper((cTRBSGA)->DESCRI)
						aAdd(aLocais, {(cTRBSGA)->CODPRO+"LOC"+cFilAnt, (cTRBSGA)->NIVSUP, .T., (cTRBSGA)->CODPRO, Upper(AllTrim(fRetComp((cTRBSGA)->CODPRO,"2"))),2 })
					EndIf
				EndIf

				dbSelectArea(cTRBSGA)
				dbSkip()
			End

      		//Verifica na tabela todas localizacoes do MNT
			ProcRegua(TAF->(RecCount()))
			dbSelectArea("TAF")
			dbSetOrder(1)
			dbSeek(xFilial("TAF"))
			While !eof() .And. xFilial("TAF") == TAF->TAF_FILIAL
				IncProc()
				If TAF->TAF_INDCON == "2" .And. !Empty(TAF->TAF_MODMNT) .Or. !Empty(TAF->TAF_MODSGA) .And. Empty((cTRBSGA)->DELETADO)
					If cValor $ Upper(TAF->TAF_NOMNIV) .And. aScan(aLocais,{|x| x[1] == TAF->TAF_CODNIV+"LOC"+cFilAnt} ) == 0
						aAdd(aLocais, {TAF->TAF_CODNIV+"LOC"+cFilAnt, TAF->TAF_NIVSUP, .F., TAF->TAF_CODNIV, Upper(AllTrim(NGLocComp(TAF->TAF_CODNIV,"2","SGA"))),2 })
					EndIf
				EndIf

				dbSelectArea("TAF")
				dbSkip()
			End
		ElseIf nTipVer == 3 //Pesquisa Componente na Estrutura

			cAliasLFor := GetNextAlias()

			cQuery := " SELECT T9_CODBEM, TC_CODBEM FROM " +RetSqlName("ST9")+ " ST9 "
			cQuery += " INNER JOIN " + RetSqlName("STC") + " STC ON TC_COMPONE = T9_CODBEM AND "
			cQuery += "      STC.D_E_L_E_T_ <> '*' AND TC_FILIAL = " + ValToSql(xFilial("STC"))
			cQuery += " WHERE T9_CODBEM LIKE '%"+cValor+"%' "
			cQuery += " AND ST9.D_E_L_E_T_ <> '*' AND ST9.T9_FILIAL = " + ValToSql(xFilial("ST9"))
			cQuery := ChangeQuery(cQuery)
			dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),(cAliasLFor), .T., .T.)

			Do While (cAliasLFor)->( !EoF() )
				IncProc()
				cBemPai := (cAliasLFor)->TC_CODBEM
				cEstrut := (cAliasLFor)->T9_CODBEM
				While !Empty(cBemPai)
					cEstrut := AllTrim(cBemPai) + " > " + AllTrim(cEstrut)
					cBemPaiOld := cBemPai
					cBemPai := NGBEMIME(cBemPai)
				EndDo

				//Retira o Bem Pai para não duplicar depois
				cEstrut := StrTran(cEstrut,AllTrim(cBemPaiOld),"")

				aAdd(aBens, (cAliasLFor)->T9_CODBEM)
				aAdd(aEstrut, {cBemPaiOld,cEstrut})

				(cAliasLFor)->(dbSkip())

			End Do

			(cAliasLFor)->( dbCloseArea() )

      		//Verifica bens na estrutura organizacional
			ProcRegua(Len(aBens))

			For i:=1 to Len(aEstrut)
				IncProc()
				dbSelectArea("TAF")
				dbSetOrder(6)
				If dbSeek(xFilial("TAF")+"X"+"1"+aEstrut[i][1])
					dbSelectArea(cTRBSGA)
					dbSetOrder(3)
					If !dbSeek("1"+aBens[i]+cFilAnt) .Or. Empty((cTRBSGA)->DELETADO)
						aAdd(aLocais, {TAF->TAF_CODNIV+"BEM"+cFilAnt, TAF->TAF_NIVSUP, .F., aEstrut[i][1], Upper(AllTrim(NGLocComp(aEstrut[i][1],"1"))) + aEstrut[i][2], 1 })
					EndIf
				Else
					dbSelectArea(cTRBSGA)
					dbSetOrder(3)
					If dbSeek("1"+aBens[i]+cFilAnt) .And. Empty((cTRBSGA)->DELETADO)
						If aScan(aLocais,{|x| x[1] == (cTRBSGA)->CODPRO+"BEM"+cFilAnt} ) == 0
							aAdd(aLocais, {(cTRBSGA)->CODPRO+"BEM"+cFilAnt, (cTRBSGA)->NIVSUP, .T., aEstrut[i], Upper(AllTrim(fRetComp((cTRBSGA)->CODPRO,"1")))+ aEstrut[i][2], 1})
						EndIf
					EndIf
				EndIf
			Next i
		ElseIf nTipVer == 4 //Pesquisa por função
      		//Verifica na TRB todas funções do Módulo Correspondente
			ProcRegua((cTRBSGA)->(RecCount()))
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbGoTop()
			While !eof()
				IncProc()
				If (cTRBSGA)->TIPO == "3" .And. ( ( nMod902 == 19 .And. !Empty((cTRBSGA)->MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty((cTRBSGA)->MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty((cTRBSGA)->MODSGA) ) ) .And. ;
						Empty((cTRBSGA)->DELETADO) .And. (cTRBSGA)->FILIAL == cFilAnt
					If aScan(aLocais,{|x| x[1] == (cTRBSGA)->CODPRO+"FUN"+cFilAnt } ) == 0 .And. cValor $ Upper((cTRBSGA)->DESCRI)
						aAdd(aLocais, {(cTRBSGA)->CODPRO+"FUN"+cFilAnt, (cTRBSGA)->NIVSUP, .T., (cTRBSGA)->CODPRO, Upper(AllTrim(fRetComp((cTRBSGA)->CODPRO,"3"))),2 })
					EndIf
				EndIf

				dbSelectArea(cTRBSGA)
				dbSkip()
			End

      		//Verifica na tabela todas funções do Módulo Correspondente
			ProcRegua(TAF->(RecCount()))
			dbSelectArea("TAF")
			dbSetOrder(1)
			dbSeek(xFilial("TAF"))
			While !eof() .And. xFilial("TAF") == TAF->TAF_FILIAL
				IncProc()
				If TAF->TAF_INDCON == "3" .And. ( ( nMod902 == 19 .And. !Empty(TAF->TAF_MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty(TAF->TAF_MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty(TAF->TAF_MODSGA) ) ) .And. Empty((cTRBSGA)->DELETADO)
					If cValor $ Upper(TAF->TAF_NOMNIV) .And. aScan(aLocais,{|x| x[1] == TAF->TAF_CODNIV+"FUN"+cFilAnt} ) == 0
						aAdd(aLocais, {TAF->TAF_CODNIV+"FUN"+cFilAnt, TAF->TAF_NIVSUP, .F., TAF->TAF_CODNIV, Upper(AllTrim(NGLocComp(TAF->TAF_CODNIV,"3","MDT"))),2 })
					EndIf
				EndIf

				dbSelectArea("TAF")
				dbSkip()
			End
		ElseIf nTipVer == 5 //Pesquisa por Tarefa
      		//Verifica na TRB todas tarefas do Módulo Correspondente
			ProcRegua((cTRBSGA)->(RecCount()))
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbGoTop()
			While !eof()
				IncProc()
				If (cTRBSGA)->TIPO == "4" .And. ( ( nMod902 == 19 .And. !Empty((cTRBSGA)->MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty((cTRBSGA)->MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty((cTRBSGA)->MODSGA) ) ) .And. ;
						Empty((cTRBSGA)->DELETADO) .And. (cTRBSGA)->FILIAL == cFilAnt
					If aScan(aLocais,{|x| x[1] == (cTRBSGA)->CODPRO+"TAR"+cFilAnt } ) == 0 .And. cValor $ Upper((cTRBSGA)->DESCRI)
						aAdd(aLocais, {(cTRBSGA)->CODPRO+"TAR"+cFilAnt, (cTRBSGA)->NIVSUP, .T., (cTRBSGA)->CODPRO, Upper(AllTrim(fRetComp((cTRBSGA)->CODPRO,"4"))),2 })
					EndIf
				EndIf

				dbSelectArea(cTRBSGA)
				dbSkip()
			End

      		//Verifica na tabela todas tarefas do Módulo Correspondente
			ProcRegua(TAF->(RecCount()))
			dbSelectArea("TAF")
			dbSetOrder(1)
			dbSeek(xFilial("TAF"))
			While !eof() .And. xFilial("TAF") == TAF->TAF_FILIAL
				IncProc()
				If TAF->TAF_INDCON == "4" .And. ( ( nMod902 == 19 .And. !Empty(TAF->TAF_MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty(TAF->TAF_MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty(TAF->TAF_MODSGA) ) ) .And. Empty((cTRBSGA)->DELETADO)
					If cValor $ Upper(TAF->TAF_NOMNIV) .And. aScan(aLocais,{|x| x[1] == TAF->TAF_CODNIV+"TAR"+cFilAnt} ) == 0
						aAdd(aLocais, {TAF->TAF_CODNIV+"TAR"+cFilAnt, TAF->TAF_NIVSUP, .F., TAF->TAF_CODNIV, Upper(AllTrim(NGLocComp(TAF->TAF_CODNIV,"4","MDT"))),2 })
					EndIf
				EndIf

				dbSelectArea("TAF")
				dbSkip()
			End
		ElseIf nTipVer == 6 //Pesquisa por Risco
      		//Verifica na TRB todas tarefas do Módulo Correspondente
			ProcRegua((cTRBSGA)->(RecCount()))
			dbSelectArea(cTRBSGA)
			dbSetOrder(1)
			dbGoTop()
			While !eof()
				IncProc()
				If (cTRBSGA)->TIPO == _nPosRisco .And. ( ( nMod902 == 19 .And. !Empty((cTRBSGA)->MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty((cTRBSGA)->MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty((cTRBSGA)->MODSGA) ) ) .And. ;
						Empty((cTRBSGA)->DELETADO) .And. (cTRBSGA)->FILIAL == cFilAnt
					If aScan(aLocais,{|x| x[1] == (cTRBSGA)->CODPRO+"RIS"+cFilAnt } ) == 0 .And. cValor $ Upper((cTRBSGA)->DESCRI)
						aAdd(aLocais, {(cTRBSGA)->CODPRO+"RIS"+cFilAnt, (cTRBSGA)->NIVSUP, .T., (cTRBSGA)->CODPRO, Upper(AllTrim(fRetComp((cTRBSGA)->CODPRO,_nPosRisco))),2 })
					EndIf
				EndIf

				dbSelectArea(cTRBSGA)
				dbSkip()
			End

      		//Verifica na tabela todas tarefas do Módulo Correspondente
			ProcRegua(TAF->(RecCount()))
			dbSelectArea("TAF")
			dbSetOrder(1)
			dbSeek(xFilial("TAF"))
			While !eof() .And. xFilial("TAF") == TAF->TAF_FILIAL
				IncProc()
				If TAF->TAF_INDCON == _nPosRisco .And. ( ( nMod902 == 19 .And. !Empty(TAF->TAF_MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty(TAF->TAF_MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty(TAF->TAF_MODSGA) ) ) .And. Empty((cTRBSGA)->DELETADO)
					If cValor $ Upper(TAF->TAF_NOMNIV) .And. aScan(aLocais,{|x| x[1] == TAF->TAF_CODNIV+"RIS"+cFilAnt} ) == 0
						aAdd(aLocais, {TAF->TAF_CODNIV+"RIS"+cFilAnt, TAF->TAF_NIVSUP, .F., TAF->TAF_CODNIV, Upper(AllTrim(NGLocComp(TAF->TAF_CODNIV,_nPosRisco,"MDT"))),2 })
					EndIf
				EndIf

				dbSelectArea("TAF")
				dbSkip()
			End

		ElseIf nTipVer == 7 //Pesquisa por Resíduo
      		//Verifica na TRB todas tarefas do Módulo Correspondente
			ProcRegua( ( cTRBSGA )->( RecCount() ) )
			dbSelectArea( cTRBSGA )
			dbSetOrder( 1 )
			dbGoTop()
			While !eof()
				IncProc()
				If ( cTRBSGA )->TIPO == __cTpRes .And. ( ( nMod902 == 19 .And. !Empty( ( cTRBSGA )->MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty( ( cTRBSGA )->MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty( ( cTRBSGA )->MODSGA ) ) ) .And. ;
						Empty( ( cTRBSGA )->DELETADO ) .And. ( cTRBSGA )->FILIAL == cFilAnt
					If aScan( aLocais,{|x| x[1] == ( cTRBSGA )->CODPRO + "RES" + cFilAnt } ) == 0 .And. cValor $ Upper( ( cTRBSGA )->DESCRI )
						aAdd( aLocais, { ( cTRBSGA )->CODPRO + "RES" + cFilAnt, ( cTRBSGA )->NIVSUP, .T., ( cTRBSGA )->CODPRO, Upper( AllTrim( fRetComp( ( cTRBSGA )->CODPRO, __cTpRes ) ) ),2 } )
					EndIf
				EndIf

				dbSelectArea( cTRBSGA )
				dbSkip()
			End

      		//Verifica na tabela todas tarefas do Módulo Correspondente
			ProcRegua( TAV->( RecCount() ) )
			dbSelectArea( "SB1" )
			dbSetOrder( 1 )

			dbSelectArea( "TAV" )
			dbSetOrder( 1 )
			dbSeek( xFilial( "TAV" ) )
			While !eof() .And. xFilial( "TAV" ) == TAV->TAV_FILIAL
				IncProc()
				dbSelectArea( cTRBSGA )
				dbSetOrder( 7 )
				If !dbSeek( __cTpRes + Padr( TAV->TAV_CODRES,Len( (cTRBSGA)->CODTIPO ) ) + "001" + TAV->TAV_CODNIV + cFilAnt )
					SB1->( dbSeek( xFilial( "SB1" ) + TAV->TAV_CODRES ) )
					If ( cValor $ Upper( Padr( TAV->TAV_CODRES,Len( (cTRBSGA)->CODTIPO ) ) ) .Or. cValor $ Upper( SB1->B1_DESC ) ) .And. aScan( aLocais,{ |x| x[1] == TAV->TAV_CODNIV + "LOC" + cFilAnt } ) == 0
						aAdd( aLocais, { TAV->TAV_CODNIV + "LOC" + cFilAnt, GetSupTAF( TAV->TAV_CODNIV ), .F., TAV->TAV_CODNIV, Upper( AllTrim( SgLocComp( TAV->TAV_CODNIV,__cTpRes,"SGA" ) ) ), 2 ,{ __cTpRes, Padr( TAV->TAV_CODRES, Len( (cTRBSGA)->CODTIPO ) ) } } )
					EndIf
				EndIf
				dbSelectArea( "TAV" )
				dbSkip()
			End

		ElseIf nTipVer == 8 //Pesquisa por Aspecto
      		//Verifica na TRB todas tarefas do Módulo Correspondente
			ProcRegua( ( cTRBSGA )->( RecCount() ) )
			dbSelectArea( cTRBSGA )
			dbSetOrder( 1 )
			dbGoTop()
			While !eof()
				IncProc()
				If ( cTRBSGA )->TIPO == __cTpAsp .And. ( ( nMod902 == 19 .And. !Empty( ( cTRBSGA )->MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty(( cTRBSGA )->MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty( ( cTRBSGA )->MODSGA ) ) ) .And. ;
						Empty( ( cTRBSGA )->DELETADO ) .And. ( cTRBSGA )->FILIAL == cFilAnt
					If aScan( aLocais, { |x| x[1] == ( cTRBSGA )->CODPRO + "ASP" + cFilAnt } ) == 0 .And. cValor $ Upper( ( cTRBSGA )->DESCRI )
						aAdd( aLocais, { ( cTRBSGA )->CODPRO + "ASP" + cFilAnt, ( cTRBSGA )->NIVSUP, .T., ( cTRBSGA )->CODPRO, Upper( AllTrim ( fRetComp( ( cTRBSGA )->CODPRO, __cTpAsp ) ) ) , 2 } )
					EndIf
				EndIf

				dbSelectArea( cTRBSGA )
				dbSkip()
			End

      		//Verifica na tabela todas tarefas do Módulo Correspondente
			ProcRegua( TAG->( RecCount() ) )
			dbSelectArea( "TA4" )
			dbSetOrder( 1 )

			dbSelectArea( "TAG" )
			dbSetOrder( 1 )
			dbSeek( xFilial( "TAG" ) )
			While !eof() .And. xFilial( "TAG" ) == TAG->TAG_FILIAL
				IncProc()
				dbSelectArea( cTRBSGA )
				dbSetOrder( 7 )
				If !dbSeek( __cTpAsp + Padr( TAG->TAG_CODASP, Len( ( cTRBSGA )->CODTIPO ) ) + "001" + TAG->TAG_CODNIV + cFilAnt )
					TA4->( dbSeek( xFilial( "TA4" ) + TAG->TAG_CODASP ) )
					If ( cValor $ Upper( Padr( TAG->TAG_CODASP, Len( ( cTRBSGA )->CODTIPO ) ) ) .Or. cValor $ Upper( TA4->TA4_DESCRI ) ) .And. aScan( aLocais,{ |x| x[1] == TAG->TAG_CODNIV + "LOC" + cFilAnt } ) == 0
						aAdd( aLocais, { TAG->TAG_CODNIV + "LOC" + cFilAnt, GetSupTAF( TAG->TAG_CODNIV ), .F., TAG->TAG_CODNIV,Upper( AllTrim( SgLocComp( TAG->TAG_CODNIV, __cTpAsp, "SGA" ) ) ) ,2 , { __cTpAsp, Padr( TAG->TAG_CODASP, Len( ( cTRBSGA )->CODTIPO ) ) } } )
					EndIf
				EndIf

				dbSelectArea( "TAG" )
				dbSkip()
			End

		ElseIf nTipVer == 9 //Pesquisa por Plano Emergencial
      		//Verifica na TRB todas tarefas do Módulo Correspondente
			ProcRegua( ( cTRBSGA )->( RecCount() ) )
			dbSelectArea( cTRBSGA )
			dbSetOrder( 1 )
			dbGoTop()
			While !eof()
				IncProc()
				If ( cTRBSGA )->TIPO == __cTpPE .And. ( ( nMod902 == 19 .And. !Empty( ( cTRBSGA )->MODMNT ) ) .Or. ;
						( nMod902 == 35 .And. !Empty( ( cTRBSGA )->MODMDT ) ) .Or. ( nMod902 == 56 .And. !Empty( ( cTRBSGA )->MODSGA ) ) ) .And. ;
						Empty( ( cTRBSGA )->DELETADO ) .And. ( cTRBSGA )->FILIAL == cFilAnt
					If aScan( aLocais, { |x| x[1] == ( cTRBSGA )->CODPRO + "PLE" + cFilAnt } ) == 0 .And. cValor $ Upper( ( cTRBSGA )->DESCRI )
						aAdd( aLocais, { ( cTRBSGA )->CODPRO + "PLE" + cFilAnt, ( cTRBSGA )->NIVSUP, .T., ( cTRBSGA )->CODPRO, Upper( AllTrim( fRetComp( ( cTRBSGA )->CODPRO, __cTpPE ) ) ) ,2 } )
					EndIf
				EndIf

				dbSelectArea( cTRBSGA )
				dbSkip()
			End

         //Verifica na tabela todas tarefas do Módulo Correspondente
			ProcRegua( TBC->( RecCount() ) )
			dbSelectArea( "TBB" )
			dbSetOrder( 1 )

			dbSelectArea( "TBC" )
			dbSetOrder( 1 )
			dbSeek( xFilial( "TBC" ) )
			While !eof() .And. xFilial( "TBC" ) == TBC->TBC_FILIAL
				IncProc()
				dbSelectArea( cTRBSGA )
				dbSetOrder( 7 )
				If !dbSeek( __cTpPE + Padr( TBC->TBC_CODPLA, Len( ( cTRBSGA )->CODTIPO ) ) + "001" + TBC->TBC_CODNIV + cFilAnt)
					TBB->( dbSeek( xFilial( "TBB" ) + TBC->TBC_CODPLA ) )
					If ( cValor $ Upper( Padr( TBC->TBC_CODPLA, Len( ( cTRBSGA )->CODTIPO ) ) ) .Or. cValor $ Upper( Padr( TBB->TBB_DESPLA, Len( ( cTRBSGA )->DESCRI ) ) ) ) .And. aScan( aLocais, { |x| x[1] == TBC->TBC_CODNIV + "LOC" + cFilAnt } ) == 0
						aAdd( aLocais, { TBC->TBC_CODNIV + "LOC" + cFilAnt, GetSupTAF( TBC->TBC_CODNIV ), .F., TBC->TBC_CODNIV, Upper( AllTrim( SgLocComp( TBC->TBC_CODNIV, __cTpPE, "SGA" ) ) ), 2, { __cTpPE, Padr( TBC->TBC_CODPLA, Len( ( cTRBSGA )->CODTIPO ) ) } } )
					EndIf
				EndIf

				dbSelectArea( "TBC" )
				dbSkip()
			End

		EndIf

	Next nX

	cFilAnt := cFilOld

Return aLocais

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fRetComp  ºAutor  ³Roger Rodrigues     º Data ³  18/10/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna caminho completo da localizacao na estrutura        º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fRetComp(cCod, cIndCon)
	Local cNomNiv := "", cRet := ""
	Local aArea := GetArea()

	//Encontra descricao e chama recursivamente nivel superior
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	If dbSeek(cCodEst+cCod+cFilAnt)
		cNomNiv := (cTRBSGA)->DESCRI
		If (cTRBSGA)->NIVSUP <> "000"
			cRet := fRetComp((cTRBSGA)->NIVSUP,"2") + " > "
		EndIf
		cRet += AllTrim(If(cIndCon == "1", NGSEEK("ST9",cCod,1,"T9_NOME"), cNomNiv))
	EndIf

	RestArea(aArea)
Return cRet

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902SEEK
Posiciona item na estrutura

@author Roger Rodrigues
@since 18/10/2010
@version MP11
@return .T./.F.
@obs função utilizada - também - em fontes específicos
/*/
//---------------------------------------------------------------------
Function MNT902SEEK(cCodigo, lPesqTRB, cSupNiv, aCodTipo)
	Local i
	Local aLocPais := {}
	Local cTipSeek
	Local aAreaTRB

	Default aCodTipo := {}

	cFilAnt := Substr(cCodigo,7,__nSizeFil)

	//Carrega itens pais
	If !Empty(cCodigo)
		aAdd(aLocPais, cCodigo)
   		//Se nao esta no TRB
		If !lPesqTRB
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbSeek(xFilial("TAF")+cCodEst+SubStr(cCodigo,1,3))
			While !eof() .And. Found() .And. cSupNiv != "000"
				dbSelectArea("TAF")
				dbSetOrder(2)
				If dbSeek(xFilial("TAF")+cCodEst+cSupNiv)
					Do Case
					Case TAF->TAF_INDCON == "1" ; cTipSeek := "BEM"
					Case TAF->TAF_INDCON == "2" ; cTipSeek := "LOC"
					Case TAF->TAF_INDCON == "3" ; cTipSeek := "FUN"
					Case TAF->TAF_INDCON == "4" ; cTipSeek := "TAR"
					Case TAF->TAF_INDCON == _nPosRisco ; cTipSeek := "RIS"
					End Do

					aAdd(aLocPais, TAF->TAF_CODNIV+cTipSeek+cFilAnt)
					cSupNiv := TAF->TAF_NIVSUP

				EndIf
			End
		Else
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek(cCodEst+cCodigo)
			While !eof() .And. Found() .And. cSupNiv != "000"
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				If dbSeek(cCodEst+cSupNiv+cFilAnt)
					Do Case
					Case TAF->TAF_INDCON == "1" ; cTipSeek := "BEM"
					Case TAF->TAF_INDCON == "2" ; cTipSeek := "LOC"
					Case TAF->TAF_INDCON == "3" ; cTipSeek := "FUN"
					Case TAF->TAF_INDCON == "4" ; cTipSeek := "TAR"
					Case TAF->TAF_INDCON == _nPosRisco ; cTipSeek := "RIS"
					End Do
					aAdd(aLocPais, (cTRBSGA)->CODPRO+cTipSeek+cFilAnt)
					cSupNiv := (cTRBSGA)->NIVSUP
				EndIf
			End
		EndIf
	Else
		Return .F.
	EndIf

	//Encontra item na arvore
	For i:=Len(aLocPais) to 1 Step -1
		oTree:TreeSeek(aLocPais[i])
		MNT902VChg((i==1), (i==1))
	Next i

	If ValType(aCodTipo) == "A" .And. !Empty(aCodTipo)
		aAreaTRB := (cTRBSGA)->(GetArea())

		dbSelectArea(cTRBSGA)
		dbSetOrder(7)//"TIPO+CODTIPO+CODEST+NIVSUP+FILIAL"
		If dbSeek(aCodTipo[1] + Padr(aCodTipo[2],Len((cTRBSGA)->CODTIPO)) + cCodest + SubStr(cCodigo,1,3) + cFilAnt)
			oTree:TreeSeek( (cTRBSGA)->CODPRO + (cTRBSGA)->CARGO + cFilAnt )
			MNT902VChg( .T., .T.)
		EndIf

		RestArea(aAreaTRB)

	EndIf

	oTree:SetFocus()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ RetFiliais ³ Autor ³Vitor Emanuel Batista ³ Data ³05/04/2011³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Retorna as filiais que sera montada a Arvore Logica          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function RetFiliais()
	Local aArea := SM0->(GetArea())
	Local aFilial := {cFilAnt}

	If NGSX2MODO("TAF") == "E" .And. GetNewPar("MV_NGALMUL","0") == "1"

		dbSelectArea("SM0")
		dbSetOrder(1)
		dbSeek(cEmpAnt)
		While !EoF() .And. cEmpAnt == SM0->M0_CODIGO

			dbSelectArea("TAF")
			dbSetOrder(1)
			If cFilAnt != SubStr(xFilial("TAF",SM0->M0_CODFIL),1,__nSizeFil) .And. dbSeek(SubStr(xFilial("TAF",SM0->M0_CODFIL),1,__nSizeFil))
				aAdd(aFilial,SubStr(xFilial("TAF",SM0->M0_CODFIL),1,__nSizeFil))
			EndIf

			dbSelectArea("SM0")
			dbSkip()
		EndDo
	EndIf

   //---------------------------------------
   // Ordena de forma crescente pelo codigo
   //---------------------------------------
	aSort(aFilial)

	RestArea(aArea)

Return aFilial
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ fMntRelac  ³ Autor ³Jackson Machado     ³ Data ³12/08/2011³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Carregas os campos de memoria                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MNTA902                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fMntRelac(lInclui)

	Local i
	Local cCod   := SubStr(oTree:GetCargo(),1,3)
	Local aRelac := {}
	Local lDepto := NGCADICBASE("TAF_DEPTO","A","TAF",.F.)

	Default lInclui := .F.

	cLocal := cCod

	If SubStr(oTree:GetCargo(),4,3) == "LOC"
		dbSelectArea("TAF")
		dbSetOrder(2)
		If dbSeek(xFilial("TAF")+"001"+cCod)
			nRecno := TAF->(Recno())
		Else
			nRecno := 1
		EndIf
		nOpcx := 2
		bCampo  := {|nCPO| Field(nCPO) }

		dbSelectArea(cTRBSGA)
		dbSetOrder(2)
		If dbSeek(cCodEst+cLocal+cFilAnt)
			aAdd( aRelac, {"TAF_NOMNIV","(cTRBSGA)->DESCRI"    } )
			aAdd( aRelac, {"TAF_CODNIV","cLocal"                  } )
			aAdd( aRelac, {"TAF_MAT"   ,"(cTRBSGA)->RESPONS"   } )
			If !(cValToChar(nMod902) $ "35/56")
				aAdd( aRelac, {"TAF_CENTRA","(cTRBSGA)->CENTRAB"} )
				If lRetS
					aAdd( aRelac, {"TAF_ETAPA","(cTRBSGA)->ETAPA"} )
				EndIf
			EndIf
			aAdd( aRelac, {"TAF_CCUSTO","(cTRBSGA)->CC"        } )
			If lDepto
				aAdd( aRelac, {"TAF_DEPTO" ,"(cTRBSGA)->DEPTO"		} )
			EndIf

			If lRateio
				aAdd(aRelac,{"TAF_RATEIO","(cTRBSGA)->RATEIO"   } )
			EndIf
			If lFamilia
				aAdd(aRelac,{"TAF_CODFAM","(cTRBSGA)->CODFAM"   } )
			EndIf
			If lCodAmb
				aAdd(aRelac,{"TAF_CODAMB","(cTRBSGA)->CODAMB"   } )
			EndIf
		EndIf

		dbSelectArea("TAF")
		dbSetOrder(1)

		For i := 1 to Len(aRELAC)
			cCampo := "M->" + aRELAC[i][1]
			cRelac := aRELAC[i][2]
			&cCampo. := &cRelac
		Next

		dbSelectArea("QAA")
		dbSetOrder(1)
		dbSeek(xFilial("QAA")+(cTRBSGA)->RESPONS)
		M->TAF_NOMRES   := QAA->QAA_NOME

		dbSelectArea("CTT")
		dbSetOrder(1)
		dbSeek(xFilial("CTT")+(cTRBSGA)->CC)
		M->TAF_NOMCC := CTT->CTT_DESC01

		If lDepto
			dbSelectArea("SQB")
			dbSetOrder(1)
			dbSeek(xFilial("SQB")+(cTRBSGA)->DEPTO)
			M->TAF_DESCDP := SQB->QB_DESCRIC
		EndIf

		dbSelectArea("SHB")
		dbSetOrder(1)
		dbSeek(xFilial("SHB")+(cTRBSGA)->CENTRAB)
		M->TAF_NOMTRA := SHB->HB_NOME

		If lCodAmb
			M->TAF_NOMAMB := POSICIONE( "TNE", 1, xFilial("TNE")+(cTRBSGA)->CODAMB, "TNE_NOME" )
		EndIf

		If Type("oEnc") == "O"
			oEnc:Refresh()
		EndIf
	EndIf
	If lInclui
		M->TAF_NOMRES := Space(Len(QAA->QAA_NOME))
		M->TAF_NOMCC  := Space(Len(CTT->CTT_DESC01))
		M->TAF_NOMTRA := Space(Len(SHB->HB_NOME))
	EndIf
	oTree:TreeSeek(cCod+cFilAnt)
	oTree:Refresh()
	oTree:SetFocus()

Return .T.

//------------------------------------------------------------------------------
/*/{Protheus.doc} fRetPermis
Retorna as regras de restrição para determinado bem/localização.
@type function

@author Alexandre Santos
@since 04/05/2021

@param cCodNiv   , string , Código do Bem/Localização.
@param [lCall902], boolean, Indica se o acionamento se originou na rotina MNTA902.
@param [lIsLoc]  , boolean, Indica se a busca é referente a uma localização.

@return string , Regras de restrição para o item pesquisado.
/*/
//------------------------------------------------------------------------------
Static Function fRetPermis( cCodNiv, lCall902, lIsLoc )

	Local cCode      := ''
	Local aAreaALL   := GetArea()
	Local aAreaTRB   := {}

	Private cPermis  := ""

	Default lCall902 := .T.
	Default lIsLoc   := .T.

	// Acionamento feito pela rotina árvore lógica.
	If lCall902

		aAreaTRB := (cTRBSGA)->( GetArea() )

		dbSelectArea( cTRBSGA )
		dbSetOrder( 2 ) // CODEST + CODPRO + FILIAL

		If dbSeek( cCodEst + cCodNiv + xFilial( 'TAF' ) )

			// Valor de pesquisa para bem.
			If (cTRBSGA)->TIPO == '1'

				cCode := '0' + (cTRBSGA)->CODTIPO

			// Valor de pesquisa para localização.
			Else

				cCode := '8' + SubStr( cCodNiv, 1, 3 )

			EndIf

		EndIf

		RestArea( aAreaTRB )

	// Valor de pesquisa para localização quando não acionado pela árvore lógica.
	ElseIf lIsLoc

		cCode := '8' + SubStr( cCodNiv, 1, 3 )

	// Valor de pesquisa para bem quando não acionado pela árvore lógica.
	Else

		cCode := '0' + cCodNiv

	EndIf

	NGValidTUA( Nil, { |cTipo, cGrpUsr, cTipRes| !Empty( ( cPermis := NGSEEK( 'TUB', cTipRes +;
		cTipo + cGrpUsr + cCode, 1, 'TUB->TUB_RESTRI' ) ) ) } )

	RestArea( aAreaALL )

Return Alltrim(cPermis)

//------------------------------------------------------------------------------
/*/{Protheus.doc} MNT902REST
Verifica restrições de acesso para determinado bem/localização.
@type function

@author Alexandre Santos
@since 04/05/2021

@param cCodNiv   , string , Código do Bem/Localização.
@param cTipo     , string , Tipo de processo pesquisado.
@param cOperac   , string , Operação de pesquisa.
@param [lCall902], boolean, Indica se o acionamento se originou na rotina MNTA902.
@param [lIsLoc]  , boolean, Indica se a busca é referente a uma localização.
@param [lIsCorr] , boolean, Indica se a busca é referente a uma O.S. corretiva.

@return string , Regras de restrição para o item pesquisado.
/*/
//------------------------------------------------------------------------------
Function MNT902REST( cCodNiv, cTipo, cOperac, lCall902, lIsLoc, lIsCorr )

	Local aArea      := GetArea()
	Local cRestri    := ''
	Local lRet       := .T.

	Default lCall902 := .T.
	Default lIsLoc   := .T.
	Default lIsCorr  := .F.

	If lCall902
		
		/*-----------------------------------------------------------------------------------+
		| Valida privilégios do usuário para processo e operação acionados na Árvore Lógica. |
		+-----------------------------------------------------------------------------------*/
		lRet := fGetAcess( cTipo, cOperac, lIsCorr )

	EndIf

	If lRet 
	
		// Recupera regras de restrição referente ao Bem/Localização.
		cRestri := fRetPermis( cCodNiv, lCall902, lIsLoc )

		If !Empty(cRestri)
			lRet := MNT904VOPC(cRestri,cTipo,cOperac)
		EndIf

		If ExistBlock("MNTA902A")
			lRet := ExecBlock("MNTA902A", .F. , .F. , {cCodNiv, cTipo, cOperac, cRestri, lRet })
		EndIf

	EndIf

	RestArea( aArea )

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} fGetAcess
Verifica se o usuário logado possui acesso a determinado processo e operação,
conforme regras definidas no Configurador.
@type function

@author Alexandre Santos
@since 07/01/2022

@param cProcess, string , Identificador do processo.
							B - Bens
							O - Ordens de Serviço
							S - Solicitação de Serviço
@param cOption , string , Identificador da operação.
							I - Inclusão
							A - Alteração
							E - Exclusão
							V - Visualização
							D - Distribuição
							F - Finalização
							G - Gera O.S.
							C - Inclusão O.S. Corretiva
							P - Inclusão O.S. Preventiva
							R - Retorno
@param lCorret , boolean, Indica se a O.S. é do tipo corretiva. 

@return boolean, Indica se o usuário possui acesso ao processo.
/*/
//------------------------------------------------------------------------------
Static Function fGetAcess( cProcess, cOption, lCorret )

	Local cFunc     := ''
	Local nOpt      := 0
	Local lRet      := .T.
	Local lFacilit  := SuperGetMV( 'MV_NG1FAC', .F., '2' ) == '1'

	Default lCorret := .F.

	Do Case

		Case cProcess == 'B' .And. cOption == 'V'// Bens

			cFunc := IIf( ST9->T9_CATBEM == '1', 'MNTA080', IIf( ST9->T9_CATBEM == '3', 'MNTA083', 'MNTA084' ) )
			nOpt  := 2

		Case cProcess == 'O' // Ordem de Serviço

			Do Case
				
				Case cOption == 'R' // Retorno
					
					cFunc := 'MNTA435'
				
				Case cOption == 'C' // Incluir O.S. - Corretiva
					
					cFunc := 'MNTA420'
					nOpt  := 3

				Case cOption == 'V' .And. lCorret // Visualizar O.S. - Corretiva

					cFunc := 'MNTA420'
					nOpt  := 2
				
				Case cOption == 'P' // Incluir O.S. - Preventiva
					
					cFunc := 'MNTA410'
					nOpt  := 3
				
			
			End Case

		Case cProcess == 'S' // Solicitação de Serviço

			Do Case

				Case cOption == 'I' // Inclusão
					
					cFunc := 'MNTA280'
					nOpt  := 3

				Case cOption == 'V' // Visualização
					
					cFunc := 'MNTA280'
					nOpt  := 2

				Case cOption == 'E' // Exclusão
					
					cFunc := 'MNTA280'
					nOpt  := 5

				Case cOption == 'A' // Alteração
					
					cFunc := 'MNTA280'
					nOpt  := 4

				Case cOption == 'D' .Or. ( !lFacilit .And. cOption == 'G' ) // Distribuição ou Gera O.S., quando não facilities.
					
					cFunc := IIf( lFacilit, 'MNTA296', 'MNTA295' )
					nOpt  := 4

				Case cOption == 'F' .Or. ( lFacilit .And. cOption == 'G' ) // Fechamento ou Gera O.S., quando facilities.
					
					cFunc := IIf( lFacilit, 'MNTA291', 'MNTA290' )
					nOpt  := 4
			
			End Case

	End Case

	/*----------------------------------------------------------------------------+
	| Verifica se o usuário logado possui acesso a determinada rotina e operação. |
	+----------------------------------------------------------------------------*/
	lRet := MPUserHasAccess( cFunc, nOpt, , .F. )
	
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fRetImgSS ºAutor  ³Roger Rodrigues     º Data ³  21/10/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna Array com folder e cargo da SS posicionada          º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fRetImgSS()

	Local aRet    := {}
	Local lSSAt   := .F.
	Local cFolder := cCargo := ""

	If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
		dbSelectArea("TT7")
		dbSetOrder(1)
		dbSeek(xFilial("TT7")+TQB->TQB_SOLICI)
		While !EoF() .And. TT7->TT7_FILIAL == xFilial("TT7") .And. TT7->TT7_SOLICI == TQB->TQB_SOLICI
			If TT7->TT7_TERMIN == "N"
				dbSelectArea("TPL")
				dbSetOrder(1)
				If dbSeek(xFilial("TPL")+TT7->TT7_ORDEM)
					If !Empty(TPL->TPL_DTINIC) .And. !Empty(TPL->TPL_HOINIC)
						lSSAt := .T.
						Exit
					EndIf
				EndIf
			EndIf
			dbSelectArea("TT7")
			dbSkip()
		End
	Else
		If !Empty(TQB->TQB_ORDEM)
			dbSelectArea("TPL")
			dbSetOrder(1)
			If dbSeek(xFilial("TPL")+TQB->TQB_ORDEM)
				lSSAt := .T.
			EndIf
		EndIf
	EndIf

	If lSSAt
		cFolder := "NGSSAMARELO"
		cCargo  := "SSM"
	ElseIf TQB->TQB_SOLUCA == "D"
		cFolder := "NGSSVERDE"
		cCargo  := "SSD"
	Else
		cFolder := "NGSSVERMELHO"
		cCargo  := "SSA"
	EndIf

	aRet := {cFolder,cCargo}

Return aRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fRetImgOS ºAutor  ³Roger Rodrigues     º Data ³  21/10/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna Array com folder e cargo da OS posicionada          º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fRetImgOS()

	Local aRet    := {}
	Local cFolder := cCargo := ""
	Local cTime   := Substr(Time(),1,5)

	cTime := Substr(cTime,1,2) + Substr(cTime,4,2)

	If dToS(dDataBase) + cTime < dToS(STJ->TJ_DTMPFIM) + Substr(STJ->TJ_HOMPFIM,1,2) + Substr(STJ->TJ_HOMPFIM,4,2)
		cFolder := "NGOSVERDE"
		cCargo  := "OSV"
	Else
		dbSelectArea("TPL")
		dbSetOrder(1)
		If dbSeek(xFilial("TPL")+STJ->TJ_ORDEM)
			cFolder := "NGOSAMARELO"
			cCargo  := "OSA"
		Else
			cFolder := "NGOSVERMELHO"
			cCargo  := "OSM"
		EndIf
	EndIf

	aRet := {cFolder,cCargo}

Return aRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fTreeIncOSºAutor  ³Roger Rodrigues     º Data ³  21/02/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Verifica as SS do usuario e adiciona OS na Tree             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fTreeIncOS(cCodSS, cNivSup, cCargo, lExit)

	Local i, nRecTQB := TQB->(Recno())
	Local aAreaSTJ 	 := STJ->(GetArea()), aAreaTQB := TQB->(GetArea())
	Local aOS 		 := {}

	Default lExit := .F.//Verifica se carrega somente a primera OS

	If AllTrim(GetNewPar("MV_NGMULOS","N")) == "S"
		dbSelectArea("TT7")
		dbSetOrder(1)
		dbSeek(xFilial("TT7")+cCodSS)
		While !EoF() .And. TT7->TT7_FILIAL == xFilial("TT7") .And. TT7->TT7_SOLICI == cCodSS
			If TT7->TT7_TERMIN == "N"
				dbSelectArea("STJ")
				dbSetOrder(1)
				If dbSeek( xFilial( 'STJ' ) + TT7->TT7_ORDEM ) .And. STJ->TJ_TERMINO != 'S' .And. STJ->TJ_SITUACA == 'L' .And.;
					NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

					dbSelectArea( cTRBSGA )
					dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
					If !dbSeek( '6' + PadR( TT7->TT7_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt ) .Or. !Empty( (cTRBSGA)->DELETADO )

						aAdd( aOS, TT7->TT7_ORDEM )

						If lExit
							Exit
						EndIf

					EndIf

				EndIf

			EndIf

			dbSelectArea("TT7")
			dbSkip()
		End
	Else
		dbSelectArea("TQB")
		dbSetOrder(1)
		If dbSeek(xFilial("TQB")+cCodSS) .And. !Empty(TQB->TQB_ORDEM)
			dbSelectArea("STJ")
			dbSetOrder(1)
			If dbSeek( xFilial( 'STJ' ) + TQB->TQB_ORDEM ) .And. STJ->TJ_TERMINO != 'S' .And. STJ->TJ_SITUACA == 'L' .And.;
				NGValidTUA( 'STJ', , cNivSup, , ( STJ->TJ_PLANO == '000000' ) )

				dbSelectArea( cTRBSGA )
				dbSetOrder( 3 ) // TIPO + CODTIPO + FILIAL
				If !dbSeek( '6' + PadR( TQB->TQB_ORDEM, Len( (cTRBSGA)->CODTIPO ) ) + cFilAnt ) .Or. !Empty( (cTRBSGA)->DELETADO )

					aAdd( aOS, TQB->TQB_ORDEM )

				EndIf

			EndIf

		EndIf

	EndIf

	For i:=1 to Len(aOS)
		fIncOS(aOs[i], cNivSup, cCargo)
	Next i

	//Restaura tabelas
	RestArea(aAreaSTJ)
	RestArea(aAreaTQB)

	dbSelectArea("TQB")
	dbGoto(nRecTQB)

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc} fIncOS
Função de padronização para inclusão de O.S. na estrutura.
@type static

@author Roger Rodrigues
@since 22/02/2012

@sample fIncOS( '000100', '010', '000', , , .T. )

@param  cCodOS    , Caracter, Identificação da O.S.
@param  cNivSup   , Caracter, Nivel superior da localização.
@param  cCarSup   , Caracter, Chave de identificação na Tree.
@param  [lSeek]   , Lógico  , Se deve ser realizado posicionamento na STJ.
@param  [cRespons], Caracter, Código Responsavel.
@param  [lClose]  , Lógico  , Define se a localização deve se manter fechada.
@return .T.
/*/
//---------------------------------------------------------------------------------
Static Function fIncOS(cCodOS, cNivSup, cCarSup, lSeek, cRespons, lClose )

	Local nRecTRB := (cTRBSGA)->(Recno())
	Local aAreaSTJ := STJ->(GetArea())
	Local cDesPro, cFolderA, cFolderB, cCargo

	Default lSeek    := .T.//Verifica se necessita de seek na STJ
	Default cRespons := (cTRBSGA)->RESPONS
	Default lClose   := .F.

	If lSeek
		dbSelectArea("STJ")
		dbSetOrder(1)
	EndIf
	If !lSeek .Or. dbSeek(xFilial("STJ")+cCodOs)

		cFolderA := fRetImgOS()[1]
		cFolderB := cFolderA
		cCargo   := fRetImgOS()[2]

		If STJ->TJ_PLANO == "000000"
			dbSelectArea("ST4")
			dbSetOrder(1)
			dbSeek(xFilial("ST4")+STJ->TJ_SERVICO)
			cDesPro := ST4->T4_NOME
		Else
			dbSelectArea("STF")
			dbSetOrder(1)
			dbSeek(xFilial("STF")+STJ->TJ_CODBEM+STJ->TJ_SERVICO+STJ->TJ_SEQRELA)
			cDesPro := STF->TF_NOMEMAN
		EndIf

		cCodNiv := fRetCodNiv()

		nRecTRB := (cTRBSGA)->(RECNO())
		dbSelectArea(cTRBSGA)
		RecLock((cTRBSGA),.T.)
		(cTRBSGA)->FILIAL  := cFilAnt
		(cTRBSGA)->CODEST  := cCodEst
		(cTRBSGA)->CODPRO  := cCodNiv
		(cTRBSGA)->DESCRI  := cDesPro
		(cTRBSGA)->NIVSUP  := cNivSup
		(cTRBSGA)->RESPONS := cRespons
		(cTRBSGA)->TIPO    := "6"
		(cTRBSGA)->CODTIPO := STJ->TJ_ORDEM    //cCodCon
		If nMod902 == 19
			(cTRBSGA)->MODMNT  := 'X'
		ElseIf nMod902 == 35
			(cTRBSGA)->MODMDT  := 'X'
		ElseIf nMod902 == 56
			(cTRBSGA)->MODSGA  := 'X'
		EndIF
		(cTRBSGA)->ORDEM   := cCodNiv
		(cTRBSGA)->CARGO   := cCargo
		(cTRBSGA)->(MsUnlock())
		(cTRBSGA)->(dbGoTo(nRecTRB))

		oTree:TreeSeek(cNivSup+cCarSup+cFilAnt)
		oTree:AddItem(STJ->TJ_ORDEM+" - "+cDesPro,cCodNiv+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)

		// Reprocessa cores da legenda quando está estiver habilitada.
		IIf( !lByOpt, fReproClr( (cTRBSGA)->CODPRO, lClose ), Nil )

	EndIf

	RestArea(aAreaSTJ)

	dbSelectArea(cTRBSGA)
	dbGoto(nRecTRB)

Return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fIncSS    ºAutor  ³Roger Rodrigues     º Data ³  22/02/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao de padronizacao de inclusao de SS na estrutura       º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fIncSS(cCodSS, cNivSup, cCarSup, lSeek)

	Local nRecTRB := (cTRBSGA)->(Recno())
	Local aAreaTQB := TQB->(GetArea())
	Local cDesPro, cFolderA, cFolderB, cCargo
	Local cRespons  := (cTRBSGA)->RESPONS
	Default lSeek := .F.//Verifica se necessita de seek na TQB

	If lSeek
		dbSelectArea("TQB")
		dbSetOrder(1)
	EndIf
	If !lSeek .Or. dbSeek(xFilial("TQB")+cCodSS)
		cFolderA := fRetImgSS()[1]
		cFolderB := cFolderA
		cCargo   := fRetImgSS()[2]

		cDesPro := AllTrim( Msmm( TQB->TQB_CODMSS , , , , 3 ) )

		cCodNiv := fRetCodNiv()

		dbSelectArea(cTRBSGA)
		RecLock((cTRBSGA),.T.)
		(cTRBSGA)->FILIAL  := cFilAnt
		(cTRBSGA)->CODEST  := cCodEst
		(cTRBSGA)->CODPRO  := cCodNiv
		(cTRBSGA)->DESCRI  := cDesPro
		(cTRBSGA)->NIVSUP  := cNivSup
		(cTRBSGA)->RESPONS := cRespons
		(cTRBSGA)->TIPO    := "5"
		(cTRBSGA)->CODTIPO := TQB->TQB_SOLICI
		If nMod902 == 19
			(cTRBSGA)->MODMNT  := 'X'
		ElseIf nMod902 == 35
			(cTRBSGA)->MODMDT  := 'X'
		ElseIf nMod902 == 56
			(cTRBSGA)->MODSGA  := 'X'
		EndIF
		(cTRBSGA)->ORDEM   := cCodNiv
		(cTRBSGA)->CARGO   := cCargo

		(cTRBSGA)->( MsUnLock() )

		oTree:TreeSeek(cNivSup+cCarSup+cFilAnt)
		oTree:AddItem(TQB->TQB_SOLICI+" - "+cDesPro,cCodNiv+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)
	EndIf

	RestArea(aAreaTQB)

	dbSelectArea(cTRBSGA)
	dbGoto(nRecTRB)

Return cCargo

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fRetCodNivºAutor  ³Roger Rodrigues     º Data ³  23/02/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna proximo codigo de nivel                             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MNTA902                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fRetCodNiv()

	Local cAliasQry := GetNextAlias()
	Local cTblArv   := '%' + oARQTA100:GetRealName() + '%'
	Local cProxCod  := ''

	BeginSQL Alias cAliasQry

		SELECT
			MAX( TBLTEMP.CODTAF ) AS CODE
		FROM (
				SELECT
					MAX( TMP.CODPRO ) AS CODTAF
				FROM
					%exp:cTblArv% TMP
				WHERE
					TMP.FILIAL = %exp:cFilAnt% AND
					TMP.%NotDel%
				UNION
					SELECT
						MAX( TAF.TAF_CODNIV ) AS CODTAF
					FROM
						%table:TAF% TAF
					WHERE
						TAF.TAF_FILIAL = %xFilial:TAF% AND
						TAF.%NotDel%
		) TBLTEMP

	EndSQL

	cProxCod  := Soma1( Trim( IIf( (cAliasQry)->( !EoF() ) .And. !Empty( (cAliasQry)->CODE ), (cAliasQry)->CODE, '000' ) ) )

	(cAliasQry)->( dbCloseArea() )

Return cProxCod

//---------------------------------------------------------------------
/*/{Protheus.doc} fIndCreate
Cria o Painel de Indicadores.

@author Wagner Sobral de Lacerda
@since 09/05/2012

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fIndCreate()

   // Painel de Indicadores
	If FindFunction("NGI8TNGPnl") .And. AliasInDic("TZD")
		//Verifica se possui permissão para ver os indicadores
		If lPermInd
			oTNGPanel := NGI8TNGPnl(oPnlIndic)
			oTNGPanel:Calculate() // Já calcula o Indicador
		EndIf
	EndIf

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fIndLoadPars
Carrega os Parâmetros para o Painel de Indicadores, de acordo com o
nível selecionado na árvore.

@author Wagner Sobral de Lacerda
@since 08/05/2012

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fIndLoadPars()

   // Salva as Áreas atuais
	Local aAreaTAF := TAF->( GetArea() )
	Local aAreaST9 := ST9->( GetArea() )
	Local aAreaSTJ := STJ->( GetArea() )
	Local aAreaTQB := TQB->( GetArea() )
	Local aAreaTRB := (cTRBSGA)->( GetArea() )

   // Variável dos ParÂmetros
	Local aSetParams := {}

   // Variável do item selecionado
	Local cCod := SubStr(oTree:GetCargo(),1,3)

   // Variáveis auxiliares
	Local dDataDe := CTOD("")
	Local nMes := 0, nAno := 0, nDiffMeses := 6

   // Coloca as tabelas em Final de Arquivo - EOF()
	PutFileInEof("TAF")
	PutFileInEof("ST9")
	PutFileInEof("STJ")
	PutFileInEof("TQB")
	PutFileInEof(cTRBSGA)

   // Recebe os dados do item selecionado na Árvore
	dbSelectArea(cTRBSGA)
	dbSetOrder(2)
	dbSeek("001"+cCod+cFilAnt)

	If SubStr(oTree:GetCargo(),4,3) == "LOC"
		dbSelectArea("TAF")
		dbSetOrder(2)
		If dbSeek(xFilial("TAF")+"001"+cCod)
			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbSeek(cCodEst+cCod+cFilAnt)
		EndIf
	ElseIf SubStr(oTree:GetCargo(),4,3) == "BEM"
		dbSelectArea("ST9")
		dbSetOrder(1)
		dbSeek(xFilial("ST9")+AllTrim((cTRBSGA)->CODTIPO))
	ElseIf SubStr(oTree:GetCargo(),4,2) == "OS"
		dbSelectArea("STJ")
		dbSetOrder(1)
		dbSeek(xFilial("STJ")+AllTrim((cTRBSGA)->CODTIPO))
		dbSelectArea("ST9")
		dbSetOrder(1)
		dbSeek(xFilial("ST9")+STJ->TJ_CODBEM)
	ElseIf SubStr(oTree:GetCargo(),4,2) == "SS"
		dbSelectArea("TQB")
		dbSetOrder(1)
		dbSeek(xFilial("TQB")+AllTrim((cTRBSGA)->CODTIPO))
		If TQB->TQB_TIPOSS == "B"
			dbSelectArea("ST9")
			dbSetOrder(1)
			dbSeek(xFilial("ST9")+AllTrim(TQB->TQB_CODBEM))
		ElseIf TQB->TQB_TIPOSS == "L"
			dbSelectArea("TAF")
			dbSetOrder(7) //TAF_FILIAL+TAF_MODMNT+TAF_INDCON+TAF_CODNIV
			dbSeek(xFilial("TAF")+"X"+"2"+AllTrim(TQB->TQB_CODBEM))
		EndIf
	EndIf

   // Verifica se o Painel está criado
	If Type("oTNGPanel") == "O" .And. oTNGPanel:IsCreated()
      //------------------------------
      // Define os Parâmetros
      //------------------------------

      // Área de Manutenção
		aAdd(aSetParams, {"DE_AREA", STJ->TJ_CODAREA})
		aAdd(aSetParams, {"ATE_AREA", IIf( !Empty( STJ->TJ_CODAREA ), STJ->TJ_CODAREA, Replicate("Z", Len(STJ->TJ_CODAREA)) )})

      // Bem
		aAdd(aSetParams, {"DE_BEM", ST9->T9_CODBEM})
		aAdd(aSetParams, {"ATE_BEM", IIf( !Empty( ST9->T9_CODBEM ), ST9->T9_CODBEM, Replicate("Z", Len(ST9->T9_CODBEM)) ) })

      // Centro de Custo
		aAdd(aSetParams, {"DE_CCUSTO", (cTRBSGA)->CC})
		aAdd(aSetParams, {"ATE_CCUSTO", IIf( !Empty( (cTRBSGA)->CC ), (cTRBSGA)->CC, Replicate("Z", Len((cTRBSGA)->CC)) ) })

      // Centro de Trabalho
		aAdd(aSetParams, {"DE_CENTRA", (cTRBSGA)->CENTRAB})
		aAdd(aSetParams, {"ATE_CENTRA", IIf( !Empty( (cTRBSGA)->CENTRAB ), (cTRBSGA)->CENTRAB, Replicate("Z", Len((cTRBSGA)->CENTRAB)) )})

      // Data
		nMes := Month(dDataBase)
		nAno := Year(dDataBase)
		If nMes > nDiffMeses
			dDataDe := NGSomaMes(dDataBase,(nDiffMeses*-1))
		Else
			dDataDe := CTOD("01/01/" + cValToChar(nAno))
		EndIf
		aAdd(aSetParams, {"DE_DATA", MonthSub(dDataBase, 1)})
		aAdd(aSetParams, {"ATE_DATA", dDataBase})

      // Especialidade
		aAdd(aSetParams, {"DE_ESPEC", ""})
		aAdd(aSetParams, {"ATE_ESPEC", ""})

      // Família
		aAdd(aSetParams, {"DE_FAMILIA", ST9->T9_CODFAMI})
		aAdd(aSetParams, {"ATE_FAMILIA", IIf( !Empty( ST9->T9_CODFAMI ), ST9->T9_CODFAMI, Replicate("Z", Posicione("SX3",2,"T9_CODFAMI","X3_TAMANHO")) ) })

      // Ferramenta
		aAdd(aSetParams, {"DE_FERRA", ""})
		aAdd(aSetParams, {"ATE_FERRA", ""})

      // Funcionário
		aAdd(aSetParams, {"DE_FUNCI", (cTRBSGA)->RESPONS})
		aAdd(aSetParams, {"ATE_FUNCI", IIf( !Empty( (cTRBSGA)->RESPONS ), (cTRBSGA)->RESPONS, Replicate("Z", Len( (cTRBSGA)->RESPONS)) ) })

      // Localização
		aAdd(aSetParams, {"DE_LOCALI", TAF->TAF_CODNIV})
		aAdd(aSetParams, {"ATE_LOCALI", Replicate("Z", Posicione("SX3",2,"TAF_CODNIV","X3_TAMANHO")) })

      // Ordem de Serviço
		aAdd(aSetParams, {"DE_OS", STJ->TJ_ORDEM})
		aAdd(aSetParams, {"ATE_OS", IIf( !Empty( STJ->TJ_ORDEM ), STJ->TJ_ORDEM, Replicate("Z", Posicione("SX3",2,"TJ_ORDEM","X3_TAMANHO")) ) })

      // Plano de Manutenção
		aAdd(aSetParams, {"DE_PLANO", STJ->TJ_PLANO})
		aAdd(aSetParams, {"ATE_PLANO", IIf( !Empty( STJ->TJ_PLANO ), STJ->TJ_PLANO, Replicate("Z", Posicione("SX3",2,"TJ_PLANO","X3_TAMANHO")) ) })

      // Serviço
		aAdd(aSetParams, {"DE_SERVICO", STJ->TJ_SERVICO})
		aAdd(aSetParams, {"ATE_SERVICO", IIf( !Empty( STJ->TJ_SERVICO ), STJ->TJ_SERVICO, Replicate("Z", Posicione("SX3",2,"TJ_SERVICO","X3_TAMANHO")) ) })

      // Solicitante
		aAdd(aSetParams, {"DE_SOLICI", (cTRBSGA)->RESPONS})
		aAdd(aSetParams, {"ATE_SOLICI", IIf( !Empty( (cTRBSGA)->RESPONS ), (cTRBSGA)->RESPONS, Replicate("Z", Len((cTRBSGA)->RESPONS)) ) })

      // Terceiro
		aAdd(aSetParams, {"DE_TERCE", ""})
		aAdd(aSetParams, {"ATE_TERCE", ""})

      // Tipo de Manutenção
		aAdd(aSetParams, {"DE_TPMNT", ""})
		aAdd(aSetParams, {"ATE_TPMNT", ""})

      // Considera Tempo Antes/Depois (1=Sim;2=Nao)
		aAdd(aSetParams, {"CON_ANTDPS", "1"})

      // Considera Calendário do Bem (1=Sim;2=Nao)
		aAdd(aSetParams, {"CON_CALEND", "1"})

      // Situação da O.S. (1=Pendentes;2=Liberadas;3=Canceladas;4=Todas)
		aAdd(aSetParams, {"SIT_OS", "2"})

      // Situação da Solicitação (1=Aguardando Analise;2=Distribuida;3=Fechamento por OS;4=Fechamento por SS)
		aAdd(aSetParams, {"SIT_SOLICI", ""})

      // Ordem de Serviço Terminada (1=Sim;2=Nao;3=Todas)
		aAdd(aSetParams, {"TERMINO_OS", "2"})

      // Tipo de Ordem de Serviço (C=Corretiva;P=Preventiva;A=Ambas)
		aAdd(aSetParams, {"TIP_ORDEM", "A"})

      //--------------------------------------------------
      // Define os Parâmetros para o Painel de Indicadores
      //--------------------------------------------------
		oTNGPanel:SetParams(aSetParams)
      //----------
      // Calcula
      //----------
		oTNGPanel:Calculate()
	EndIf

   // Devolve as áreas
	RestArea(aAreaTAF)
	RestArea(aAreaST9)
	RestArea(aAreaSTJ)
	RestArea(aAreaTQB)
	RestArea(aAreaTRB)

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902IMP()
Monta um MarkBrowse com informações referente a importação dos bens
por centro de custo.

@author Elynton Fellipe Bazzo
@since 27/01/2014
@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902IMP()

	Local aArea    := GetArea()
	Local lInverte := .F.
	Local oPanelInf, oMark

	Private oNomCCusto
	Private lPrimTRB  	:= .F. // Variável que controla a TRB.
	Private cMarca      := GetMark()
	Private cCCusto   	:= Space( Len( CTT->CTT_CUSTO ))  // Codigo do Centro de Custo
	Private cNomeCCusto := Space( Len( CTT->CTT_DESC01 )) // Nome do Centro de Custo
	Private cTRBBEM := GetNextAlias()

	aDBF2 := {}
		aAdd(aDBF2,{"OK"         , "C", 02, 0})
		aAdd(aDBF2,{"TRB_BEM"    , "C", 16, 0})
		aAdd(aDBF2,{"TRB_NOMBEM" , "C", 40, 0})
		aAdd(aDBF2,{"TRB_SITBEM" , "C", 01, 0})

   //Cria TRB
	aIndTrab2 := {{"TRB_BEM"}}
	oArqTrab2 := fCriaTRB(cTRBBEM,aDBF2,aIndTrab2)


	aTRB1 := {}
		aAdd(aTRB1,{"OK"        , NIL, " "     ,   })
		aAdd(aTRB1,{"TRB_BEM"   , NIL, STR0214 ,"@!" }) //"Bem"
		aAdd(aTRB1,{"TRB_NOMBEM", NIL, STR0215 ,"@!" }) //"Nome do Bem"

	DEFINE MSDIALOG oDlg FROM 0,0 To 400,680 TITLE STR0216 OF oMainWnd PIXEL //"Importação de Bens"

	   //Painel de Campos
		oPanelInf := TPanel():New(00,00,,oDlg,,,,,,200,080,.F.,.F.)
		oPanelInf:Align := CONTROL_ALIGN_ALLCLIENT
		oPanelInf:nHeight := 100

		oPanelTOP := TPanel():New(00,00,,oPanelInf,,,,,,,,.F.,.F.)
		oPanelTOP:Align := CONTROL_ALIGN_TOP
		oPanelTOP:nHeight := 0

		@ 8,004 Say OemToAnsi( STR0217 ) Size 37,7 Of oPanelInf Pixel //"Centro Custo"

		@ 7,040 MsGet cCCusto Size 120,08 Of oPanelInf Pixel Picture "@!" Valid ExistCpo( "CTT", cCCusto );
			.And. MNT902TRB( cCCusto ) F3 "CTT" HasButton // Campo "C.C"

		@ 8,168 Say OemToAnsi( STR0218 ) Size 37,7 Of oPanelInf Pixel //"Nome"

		@ 7,186 MsGet oNomCCusto Var SubStr(cNomeCCusto,1,28) Size 155,08 Of oPanelInf Pixel When .F. // Campo "Nome"

	   //Monta o objeto gráfico tipo "Grid" contemplando a opção de  marcação.
		oMark902 := MsSelect():NEW((cTRBBEM),"OK",,aTRB1,@lInverte,@cMarca,{055,00,189,343},,,,,)
		oMark902:bMARK := {|| MNT902MAQ(cMarca,lInverte)} //Grava marca em todos os registros validos.
		oMark902:oBrowse:lHASMARK   := .T.
		oMark902:oBrowse:lCANALLMARK := .T.
		oMark902:oBrowse:bALLMARK   := {|| MNT902INV( cMarca ) } // Chamada da função que executa no duplo clique em um elemento no browse.

		dbSelectArea(cTRBBEM)
		dbGoTop()
	Activate MsDialog oDlg ON INIT EnchoiceBar( oDlg, {|| MNTGRVTRB(), oDlg:End() }, {|| oDlg:End() }) Centered

	oArqTrab2:Delete()

	RestArea( aArea ) // Retorna à area de trabalho.

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902TRB( cCCusto )
Função que executa o Gatilho preenchendo o nome do Centro de Custo e
carrega os valores na TRB.

@author Elynton Fellipe Bazzo
@since 28/01/2014
/*/
//---------------------------------------------------------------------
Static Function MNT902TRB( cCCusto )

	Local lBemTAF := .T. //Variável que verifica se o bem está relacionado ao CC ou a uma localização.

	dbSelectArea( "CTT" )
	dbSetOrder( 01 )
	CTT->( dbSeek( xFilial( "CTT" )+cCCusto ))
	cNomeCCusto := CTT->CTT_DESC01 //Atribui o nome do Centro de Custo à variável.
	oNomCCusto:Refresh() //Atualiza o objeto.

	If lPrimTRB // Se foi carregada a TRB no mínimo uma vez.
		oArqTrab2:Delete()

        //Vou recriar a TRB.
		aDBF2 := {}
			aAdd(aDBF2,{"OK"        , "C", 02, 0})
			aAdd(aDBF2,{"TRB_BEM"   , "C", 16, 0})
			aAdd(aDBF2,{"TRB_NOMBEM", "C", 40, 0})
			aAdd(aDBF2,{"TRB_SITBEM", "C", 01, 0})

        //Cria TRB
		oArqTrab2 := fCriaTRB(cTRBBEM,aDBF2,aIndTrab2)

		aTRB1 := {}
			aAdd(aTRB1,{"OK"        , NIL, " "     ,   })
			aAdd(aTRB1,{"TRB_BEM"   , NIL, STR0214 ,"@!" }) //"Bem"
			aAdd(aTRB1,{"TRB_NOMBEM", NIL, STR0215 ,"@!" }) //"Nome do Bem"
	EndIf

	dbSelectArea( "ST9" )
	dbSetOrder( 02 ) //T9_FILIAL+T9_CCUSTO+T9_CENTRAB+T9_CODFAMI+T9_CODBEM
	dbSeek( xFilial( "ST9" ) + cCCusto )
	While !EoF() .And. xFilial( "ST9" ) == ST9->T9_FILIAL .And. ST9->T9_CCUSTO == cCCusto

		dbSelectArea( "TAF" )
		dbSetOrder( 06 ) //TAF_FILIAL+TAF_MODMNT+TAF_INDCON+TAF_CODCON
		If !dbSeek( xFilial( "TAF" ) + "X" + "1" + ST9->T9_CODBEM )
			dbSelectArea(cTRBBEM)
			dbSetOrder( 01 )
            // Se o bem estiver Ativo no sistema e ainda não foi adicionado em uma localização.
			If !dbSeek( ST9->T9_CODBEM ) .And. ST9->T9_SITBEM == "A" .And. aScan( aBensTot,{|x| x[1] == ST9->T9_CODBEM}) == 0
				RecLock( (cTRBBEM), .T. )
				(cTRBBEM)->OK        := cMarca
				(cTRBBEM)->TRB_BEM      := ST9->T9_CODBEM //Código do Bem.
				(cTRBBEM)->TRB_NOMBEM   := ST9->T9_NOME //Nome do Bem.
				(cTRBBEM)->TRB_SITBEM   := ST9->T9_SITBEM //Situação do Bem.
				(cTRBBEM)->(MsUnlock())
				lPrimTRB := .T. //verifica se a TRB foi carregada.
				lBemTAF  := .F. //se existe bem relacionado ao CC ou a uma localização.
			EndIf
		EndIf

		dbSelectArea( "ST9" )
		dbSkip()
	End While // Fim do While

	If lBemTAF //se não existe bem está relacionado ao CC ou a uma localização.
		MsgAlert( STR0220 ) //"Não existe bem relacionado a uma localização ou vincunlado ao centro de custo informado."
		Return .F.
	EndIf

	dbSelectArea(cTRBBEM)
	dbGoTop()
	oMark902:oBrowse:Refresh( .T. ) //Atualiza o objeto.

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902INV( cMarca )
Inverte a marcação do browse, ao clicar em todos os bens do markbrowse.

@author Elynton Fellipe Bazzo
@since 28/01/2014
@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902INV( cMarca )

	Local aArea := GetArea()

	dbSelectArea(cTRBBEM)
	dbGoTop()
	While !EoF()
		(cTRBBEM)->OK := IF( (cTRBBEM)->OK == "  ", cMarca, "  " )
		dbSelectArea(cTRBBEM)
		dbSkip()
	End While

	oMark902:oBrowse:Refresh( .T. ) // Atualiza o objeto.

	RestArea( aArea )

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902MAQ( cMarca, lInverte )
Função chamada no duplo clique em um elemento no browse.

@author Elynton Fellipe Bazzo
@since 28/01/2014
@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902MAQ( cMarca, lInverte )
Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNTGRVTRB()
Função que carrega os valores na TRB.

@author Elynton Fellipe Bazzo
@since 28/01/2014
@return aBensTrb
/*/
//---------------------------------------------------------------------
Static Function MNTGRVTRB()

	dbSelectArea(cTRBBEM)
	dbGoTop()
	While !Empty( (cTRBBEM)->TRB_BEM ) //Percorre a TRB verificando os bens que estão no arq. temporário.

		aBensTrb := {}
		If !Empty( (cTRBBEM)->OK ) // Se o elemento foi marcado.
			aAdd( aBensTrb, { (cTRBBEM)->TRB_BEM, (cTRBBEM)->TRB_NOMBEM } ) // Adiciona no array os elementos que foram selecionados no markbrowse.
			aAdd( aBensTot, { (cTRBBEM)->TRB_BEM, (cTRBBEM)->TRB_NOMBEM } ) // Adiciona no array TODOS os elementos que foram selecionados no markbrowse.
		EndIf

		MNT902InB( 3, .T. ) //Função para incluir/alterar um Bem na Estrutura.

		dbSelectArea(cTRBBEM)
		dbSkip()
	End While

Return aBensTrb
//---------------------------------------------------------------------
/*/{Protheus.doc} fIncPer
Função para Inclusão de Perigos

@author Jackson Machado
@since 01/04/2013

@param cCodPer - Código do Perigo
@param cNivSup - Nível no qual o perigo deve ser incluído
@param cCarSup - Tipo do Nível superior do período
@param lSeek   - Indica se deve possicionar na tabela
@param cRespons - Responsável pelo nível
@param aItens  - Perigos já existentes
@param lDano   - Indica se deve incluir os danos

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fIncPer( cCodPer , cNivSup, cCarSup, lSeek, cRespons , aItens , lDano )

	Local nRecTRB := (cTRBSGA)->(Recno())
	Local aAreaTG9 := TG9->(GetArea())
	Local aAreaTG6 := TG6->(GetArea())
	Local cDesPro  := "", cFolderA, cFolderB, cCargo
	Local cNivPer  := ""

	Default lSeek    := .T.//Verifica se necessita de seek na TG9
	Default cRespons := (cTRBSGA)->RESPONS
	Default aItens   := {}
	Default cCodPer  := ""
	Default lDano    := .T.

	If lSeek
		dbSelectArea("TG9")
		dbSetOrder(1)
	EndIf

	If !lSeek .Or. dbSeek(xFilial("TG9")+cCodPer)

		cFolderA := "ng_ico_perigo"
		cFolderB := "ng_ico_perigo"
		cCargo   := "PER"

		dbSelectArea( "TG1" )
		dbSetOrder(1)
		If dbSeek( xFilial("TG1") + cCodPer )
			cDesPro := TG1->TG1_DESCRI
		EndIf

		If IsInCallStack( "MNT902PERI" )
			If cLocal == "000"
				dbSelectArea("TAF")
				dbSetOrder(2)
				dbGoBottom()
				cLocal := TAF->TAF_CODNIV
				If Empty(cLocal)
					dbSelectArea(cTRBSGA)
					dbSetOrder(2)
					dbGoBottom()
					cLocal := (cTRBSGA)->CODPRO
				EndIf
				If FindFunction("Soma1Old")
					cLocal := Soma1Old(AllTrim(cLocal))
				Else
					cLocal := Soma1(AllTrim(cLocal))
				EndIf
			Else
				dbSelectArea(cTRBSGA)
				dbSetOrder(2)
				dbGoBottom()
				cLocal := (cTRBSGA)->CODPRO
				If FindFunction("Soma1Old")
					cLocal := Soma1Old(AllTrim(cLocal))
				Else
					cLocal := Soma1(AllTrim(cLocal))
				EndIf
			EndIf
		Else
			cLocal := fRetCodNiv()
		EndIf

		cCodNiv := cLocal

		nRecTRB := (cTRBSGA)->(RECNO())
		dbSelectArea(cTRBSGA)
		RecLock((cTRBSGA),.T.)
		(cTRBSGA)->FILIAL  := cFilAnt
		(cTRBSGA)->CODEST  := cCodEst
		(cTRBSGA)->CODPRO  := cCodNiv
		(cTRBSGA)->DESCRI  := cDesPro
		(cTRBSGA)->NIVSUP  := cNivSup
		(cTRBSGA)->RESPONS := cRespons
		(cTRBSGA)->TIPO    := _nPosPerigo
		(cTRBSGA)->CODTIPO := cCodPer    //cCodCon
		If nMod902 == 19
			(cTRBSGA)->MODMNT  := 'X'
		ElseIf nMod902 == 35
			(cTRBSGA)->MODMDT  := 'X'
		ElseIf nMod902 == 56
			(cTRBSGA)->MODSGA  := 'X'
		EndIF
		(cTRBSGA)->ORDEM   := cCodNiv
		(cTRBSGA)->CARGO   := cCargo
		(cTRBSGA)->(MsUnlock())
		(cTRBSGA)->(dbGoTo(nRecTRB))

		oTree:TreeSeek(cNivSup+cCarSup+cFilAnt)
		oTree:AddItem(cCodPer+" - "+cDesPro,cCodNiv+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)

		If lDano
			cNivPer := cCodNiv

			dbSelectArea( "TG6" )
			dbSetOrder( 5 )
			If dbSeek( xFilial( "TG6" ) + cCodEst + cNivSup + cCodPer )
				If ValType( aItens ) == "A"
					nPos := aScan(aItens, {|x| x == cCodNiv+"PER"+cFilAnt})
					If nPos == 0 .And. aScan(aItensCar, {|x| x == cCodNiv+"PER"+cFilAnt}) == 0
						aAdd(aItens,cCodNiv+"PER"+cFilAnt)
					EndIf
				Else
					nPos := aScan(aItensCar, {|x| x == cCodNiv+"PER"+cFilAnt})
					If nPos == 0
						aAdd(aItensCar,cCodNiv+"PER"+cFilAnt)
					EndIf
				EndIf
				While TG6->( !EoF() ) .And. TG6->TG6_FILIAL == xFilial( "TG6" ) .And. TG6->TG6_CODPER == cCodPer
					cFolderA := "ng_ico_dano"
					cFolderB := "ng_ico_dano"
					cCargo   := "DAN"

					dbSelectArea( "TG8" )
					dbSetOrder(1)
					If dbSeek( xFilial("TG8") + TG6->TG6_CODDAN )
						cDesPro := TG8->TG8_DESCRI
					EndIf

					cCodNiv  := fRetCodNiv()
					cLocal   := cCodNiv

					nRecTRB := (cTRBSGA)->(RECNO())
					dbSelectArea(cTRBSGA)
					RecLock((cTRBSGA),.T.)
					(cTRBSGA)->FILIAL  := cFilAnt
					(cTRBSGA)->CODEST  := cCodEst
					(cTRBSGA)->CODPRO  := cCodNiv
					(cTRBSGA)->DESCRI  := cDesPro
					(cTRBSGA)->NIVSUP  := cNivPer
					(cTRBSGA)->RESPONS := cRespons
					(cTRBSGA)->TIPO    := _nPosDano
					(cTRBSGA)->CODTIPO := TG6->TG6_CODDAN     //cCodCon
					If nMod902 == 19
						(cTRBSGA)->MODMNT  := 'X'
					ElseIf nMod902 == 35
						(cTRBSGA)->MODMDT  := 'X'
					ElseIf nMod902 == 56
						(cTRBSGA)->MODSGA  := 'X'
					EndIF
					(cTRBSGA)->ORDEM   := cCodNiv
					(cTRBSGA)->CARGO   := cCargo
					(cTRBSGA)->(MsUnlock())
					(cTRBSGA)->(dbGoTo(nRecTRB))

					oTree:TreeSeek(cNivPer+"PER"+cFilAnt)
					oTree:AddItem(TG6->TG6_CODDAN+" - "+cDesPro,cCodNiv+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)
					TG6->( dbSkip() )
				End
			EndIf
		EndIf
	EndIf

	RestArea(aAreaTG9)
	RestArea(aAreaTG6)

	dbSelectArea(cTRBSGA)
	dbGoto(nRecTRB)

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902OREL
Função para inclusão/alteração/exclusão de funções e tarefas

@author Jackson Machado
@since 01/04/2013

@param nOpc - Indica o tipo de operação
@param cOpe - Indica o que vai ser incluído
@obs Função utilizada na Classe TNGPG - Caso seja feito alguma alteração
considerar a utilização na classe.

@return .T.
/*/
//---------------------------------------------------------------------
Function MNT902OREL( nOpc , cOpe, oObjTree, cAliPar )

	Local oDialog
	Local aAreaTCJ := {}
	Local nLevel
	Local aFolders   := { "FOLDER14" , "FOLDER15" }

	Local cCodRel902  := Space( Len( SRJ->RJ_FUNCAO ) ) // Codigo da Funcao
	Local cNomeRel := Space( Len( SRJ->RJ_DESC   ) ) // Nome da Funcao
	Local oNomeRel
	Local oCodRel902
	Local cTitRel902:= NoAcento( AnsiToOem( STR0212 ) ) //"Código Funcão"
	Local cHelpRel := STR0245//"Informe o código da Função."
	Local lGrava   := .F.
	Local lRateio := NGCADICBASE('TAF_RATEIO','D','TAF',.F.)

	Default cAliPar := cTRBSGA
	Default oObjTree:= oTree

	nMod902 := IIf(Type("nMod902")<>"N", IIf( nModulo == 95, 19, nModulo) , nMod902)
	cLocal  := If(Type("cLocal")<>"C",SubStr( oObjTree:GetCargo(), 1, 3 ),cLocal)

	If cOpe == "TAR"
		cCodRel902 := Space( Len( TN5->TN5_CODTAR ) ) // Codigo da Tarefa
		cNomeRel   := Space( Len( TN5->TN5_NOMTAR ) ) // Nome da Tarefa
		cTitRel902 := NoAcento( AnsiToOem( STR0211 ) )// "Código Tarefa"
		cHelpRel := STR0246 //"Informe o código da Tarefa."
		aFolders   := { "FOLDER12" , "FOLDER13" }
	EndIf

	If nOpc == 3
		nLevel := (cAliPar)->NIVEL
		If SubStr( oObjTree:GetCargo(), 4, 3 ) <> "LOC" .And. IF( cOpe == "TAR" , SubStr( oObjTree:GetCargo(), 4, 3 ) <> "FUN" , .T. )
			Return Nil
		EndIf


		dbSelectArea("TAF")
		dbSetOrder(2)
		dbGoBottom()

		dbSelectArea(cAliPar)
		dbSetOrder(2)
		dbGoBottom()
		cLocal := If( TAF->TAF_CODNIV > (cAliPar)->CODPRO, TAF->TAF_CODNIV, (cAliPar)->CODPRO )

		If FindFunction("Soma1Old")
			cLocal := Soma1Old(AllTrim(cLocal))
		Else
			cLocal := Soma1(AllTrim(cLocal))
		EndIf

	Else
		dbSelectArea("TAF")
		dbSetOrder(2)
		If dbSeek(xFilial("TAF")+"001"+cLocal)
			nLevel := TAF->TAF_NIVEL
		Else
			nLevel := (cAliPar)->NIVEL
		EndIf
		cLocal   := SubStr( oObjTree:GetCargo(), 1, 3 )
		cCodRel902  := SubStr( oObjTree:GetPrompt(), 1, If(cOpe == "TAR",6,5) )
		cNomeRel := SubStr( oObjTree:GetPrompt(), If(cOpe == "TAR",7,6), 30 )
	EndIf

	Define MsDialog oDialog From 03.5,6 To 160,580 Title If(cOpe == "TAR",STR0167,STR0166) Pixel //"Tarafa"###"Funcao"

		@ 20,008 Say OemToAnsi(STR0210) Size 37,7 Of oDialog Pixel //"Cód. Estrutura"
		@ 18,047 MsGet cLocal  Size 038,08 Of oDialog Pixel When .F.

		@ 35,008 Say OemToAnsi(If(cOpe == "TAR",STR0211,STR0212))  Size 37,7 Of oDialog Pixel //"Código Tarefa"###"Código Função"
		@ 33,047 MsGet oCodRel902 Var cCodRel902 Size 038,08 Of oDialog Pixel Picture "@!";
					   Valid ExistCpo(If(cOpe == "TAR","TN5","SRJ"), cCodRel902) .And.;
					   MNT902NREL(If(cOpe == "TAR","TN5","SRJ"),cCodRel902,@cNomeRel,@oNomeRel,If(cOpe == "TAR","TN5_NOMTAR","RJ_DESC")) ;
					   F3 If(cOpe == "TAR","TN5","SRJ") HasButton When (nOpc <> 2)

		oCodRel902:bHelp := { || ShowHelpCpo( cTitRel902 , { cHelpRel } ) }
		@ 33,100 MsGet oNomeRel Var cNomeRel Size 160,08 Of oDialog Pixel When .F.

		Define sButton From 055,200 Type 1 Enable Of oDialog Action If( !MNT902VlRe(nOpc , cOpe, cCodRel902, oObjTree, cAliPar ), cCodRel902,(lGrava := .T.,oDialog:End()))
		Define sButton From 055,230 Type 2 Enable Of oDialog Action (lGrava := .F., oDialog:End())

	Activate MsDialog oDialog Centered

	If lGrava .And. nOpc <> 2
		If nOpc == 3
			oObjTree:AddItem(cCodRel902+" "+cNomeRel,cLocal+cOpe+cFilAnt,aFolders[1],aFolders[2],,, 2)
			dbSelectArea(cAliPar)
			RecLock(cAliPar,.T.)
			(cAliPar)->FILIAL  := cFilAnt
			(cAliPar)->CODEST  := "001"
			(cAliPar)->CODPRO  := cLocal
			(cAliPar)->DESCRI  := cCodRel902+" "+cNomeRel
			(cAliPar)->NIVSUP  := SubStr( oObjTree:GetCargo(), 1, 3 )
			(cAliPar)->TIPO    := If(cOpe == "TAR","4","3")
			(cAliPar)->CODTIPO := cCodRel902
			If nMod902 == 19
				(cAliPar)->MODMNT  := 'X'
			ElseIf nMod902 == 35
				(cAliPar)->MODMDT  := 'X'
			ElseIf nMod902 == 56
				(cAliPar)->MODSGA  := 'X'
			EndIF
			(cAliPar)->ORDEM   := cLocal
			(cAliPar)->NIVEL   := nLevel+1
			(cAliPar)->CARGO   := cOpe
			(cAliPar)->( MsUnLock() )

			aAreaTCJ := GetArea()
			RestArea(aAreaTCJ)
		Else
			oObjTree:ChangePrompt(cCodRel902+" "+cNomeRel,cLocal)
			dbSelectArea(cAliPar)
			dbSetOrder(2)
			If dbSeek("001"+cLocal)
				(cAliPar)->CODTIPO := cCodRel902
				(cAliPar)->DESCRI  := cCodRel902+" "+cNomeRel
			EndIf

      		//Refresh na tela de Visualização
			If IsInCallStack("MNTA902")
				MNT902VRun()
			EndIf
		EndIf
		If lRateio
			(cAliPar)->RATEIO := IIF(cRateio=STR0207,"1","2")//"Sim"
		EndIf

		oObjTree:Refresh()
		oObjTree:SetFocus()
	Else
		cLocal := StrZero( Val( cLocal )-1, 3 )
	EndIf

Return lGrava
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902NREL
Retorno das descrições

@author Jackson Machado
@since 01/04/2013

@param cTabela - Indica a tabela a ser pesquisada
@param cCodigo - Indica o código a ser pesquisado
@param cNome   - Indica o variável a ser atualizada
@param oObj    - Indica o objeto a ser atualizado
@param cCampo  - Indica o campo a ser pesquisado

@return .T.
/*/
//---------------------------------------------------------------------
Function MNT902NREL( cTabela , cCodigo , cNome , oObj , cCampo )

	(cTabela)->(dbSeek(xFilial(cTabela)+cCodigo))
	cNome := (cTabela)->&(cCampo)
	oObj:Refresh()

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fAnalise
Função para visualização/inclusão/alteração/exclusão de análise preliminar

@author Jackson Machado
@since 01/04/2013

@param nOpcx - Indica o tipo de operação

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fAnalise( nOpcx )

	Local nOpc     := 0
	Local cCod     := ""
	Local cNivSup   := ""
	Local cNivPer   := ""
	Local cNivTG6  := ""
	Local cCodPer  := ""
	Local cRespons := ""
	Local aArea    := GetArea()
	Local aAreaTRB    := ( cTRBSGA )->( GetArea() )
	Local aAreaTG1    := TG1->( GetArea() )
	Local aAreaTG6    := TG6->( GetArea() )
	Local aAreaTG8    := TG8->( GetArea() )
	Local lTemDano := .F.

	cCod := SubStr( oTree:GetCargo() , 1 , 3 )

   //Verifica o Perigo
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	dbSeek( cCodEst + cCod + cFilAnt )
	cNivSup := ( cTRBSGA )->NIVSUP
	cCodPer := SubStr( ( cTRBSGA )->CODTIPO , 1 , Len( TG1->TG1_CODPER ) )
	cNivPer := ( cTRBSGA )->CODPRO

   //Verifica a Localizacao do Perigo
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	dbSeek( cCodEst + cNivSup + cFilAnt )
	cNivTG6  := ( cTRBSGA )->NIVSUP
	cRespons := ( cTRBSGA )->RESPONS

	If nOpcx == 3
		nRec := 0
	Else
		dbSelectArea( "TG6" )
		dbSetOrder( 5 )
		dbSeek( xFilial( "TG6" ) + cCodEst + cNivTG6 )
		nRec := TG6->( Recno() )
	EndIf

	aRotSetOpc( "TG6" , nRec , nOpcx )

	nOpc := MDT855PRO( "TG6" , nRec , nOpcx , cNivSup , cCodPer )

	If nOpc == 1
		If nOpcx == 3
			dbSelectArea( "TG8" )
			dbSetOrder(1)
			If dbSeek( xFilial("TG8") + TG6->TG6_CODDAN )
				cDesPro := TG8->TG8_DESCRI
			EndIf

			nRecTRB := ( cTRBSGA )->( Recno() )
			dbSelectArea( cTRBSGA )
			dbSetOrder( 1 )
			dbSeek( cCodEst + cNivPer + cFilAnt )
			While ( cTRBSGA )->( !EoF() ) .And. cCodEst + cNivPer + cFilAnt == ( cTRBSGA )->( CODEST + NIVSUP + FILIAL )
				If AllTrim( (cTRBSGA)->CODTIPO ) == AllTrim( TG6->TG6_CODDAN ) .And. Empty( (cTRBSGA)->DELETADO )
					lTemDano := .T.
				EndIf
				( cTRBSGA )->( dbSkip() )
			End
			If !lTemDano
				cCodNiv  := fRetCodNiv()
				cLocal   := cCodNiv

				nRecTRB  := (cTRBSGA)->(RECNO())
				dbSelectArea(cTRBSGA)
				RecLock(cTRBSGA,.T.)
				(cTRBSGA)->FILIAL  := cFilAnt
				(cTRBSGA)->CODEST  := cCodEst
				(cTRBSGA)->CODPRO  := cCodNiv
				(cTRBSGA)->DESCRI  := cDesPro
				(cTRBSGA)->NIVSUP  := cNivPer
				(cTRBSGA)->RESPONS := cRespons
				(cTRBSGA)->TIPO    := _nPosDano
				(cTRBSGA)->CODTIPO := TG6->TG6_CODDAN     //cCodCon
				If nMod902 == 19
					(cTRBSGA)->MODMNT  := 'X'
				ElseIf nMod902 == 35
					(cTRBSGA)->MODMDT  := 'X'
				ElseIf nMod902 == 56
					(cTRBSGA)->MODSGA  := 'X'
				EndIF
				(cTRBSGA)->ORDEM   := cCodNiv
				(cTRBSGA)->CARGO   := "DAN"
				(cTRBSGA)->(MsUnlock())
				(cTRBSGA)->(dbGoTo(nRecTRB))

				oTree:TreeSeek(cNivPer+"PER"+cFilAnt)
				oTree:AddItem(TG6->TG6_CODDAN+" - "+cDesPro,cCodNiv+"DAN"+cFilAnt,"ng_ico_dano","ng_ico_dano",,, 2)
			EndIf
			dbSelectArea( cTRBSGA )
			dbGoTo( nRecTRB )
		ElseIf nOpcx == 5
			DeleteIdent( "A" , .F. )
		EndIf
	EndIf

	RestArea( aAreaTG8 )
	RestArea( aAreaTG6 )
	RestArea( aAreaTG1 )
	RestArea( aAreaTRB )
	RestArea( aArea )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902PERI
Função para inclusão/alteração de perigo

@author Jackson Machado
@since 01/04/2013

@param nOpcx - Indica o tipo de operação

@return .T.
/*/
//---------------------------------------------------------------------
Function MNT902PERI( nOpcx )

	Local cSeekTr  := oTree:GetCargo()
	Local cLocPer  := SubStr( oTree:GetCargo() , 1 , 3 )
	Local cCarSup  := SubStr( oTree:GetCargo() , 4 , 3 )
	Local aArea    := GetArea()
	Local aAreaTRB    := ( cTRBSGA )->( GetArea() )
	Local aAreaTG1    := TG1->( GetArea() )
	Local aAreaTG6    := TG6->( GetArea() )
	Local aAreaTG8    := TG8->( GetArea() )
	Local aAreaTAF    := TAF->( GetArea() )
	Local aGetTmp  := If( Type("aGets") <> "U" , aGets , Nil )
	Local aTelTmp   := If( Type("aTela") <> "U" , aTela , Nil )

	dbSelectArea( "TAF" )
	dbSetOrder( 2 )
	If nOpcx == 3 .And. !dbSeek( xFilial( "TAF" ) + cCodEst + cLocPer )
		ShowHelpDlg( STR0101 ,  { STR0184 } , 2 , ;//"Atenção"###"Não é possível incluir perigos para localizações não confirmadas."
		{ STR0185 }       , 2 ) //"Salve os registros ou selecione uma localização já salva."
		Return .F.
	EndIf

	If nOpcx <> 3
		dbSelectArea( cTRBSGA )
		dbSetOrder( 2 )//CODEST+CODPRO+FILIAL
		dbSeek( cCodEst + cLocPer + cFilAnt )

		dbSelectArea( "TG1" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TG1" ) + SubStr( ( cTRBSGA )->CODTIPO , 1 , Len( TG1->TG1_CODPER ) ) )
	EndIf

	aRotSetOpc( "TG1" , 0 , nOpcx )

	If MDT853PRO( "TG1" , 0 , nOpcx , If( nOpcx == 3 , cLocPer , Nil ) )
		If nOpcx == 3
			oTree:TreeSeek( cSeekTr )
			fIncPer( TG1->TG1_CODPER , cLocPer , cCarSup , .F. , , , .F. )
		EndIf
	EndIF

	aRotSetOpc( "TG1" , TG1->( Recno() ) , 2 )

	aTela := aTelTmp
	aGets := aGetTmp

	RestArea( aAreaTAF )
	RestArea( aAreaTG8 )
	RestArea( aAreaTG6 )
	RestArea( aAreaTG1 )
	RestArea( aAreaTRB )
	RestArea( aArea )

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} fRemPer
Função para exclusão do perigo

@author Jackson Machado
@since 01/04/2013

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fRemPer()

	Local nAviso   := 0
	Local nDano    := 0
	Local nTab     := 0
	Local cCodPer  := ""
	Local cNivSup  := ""
	Local cSeekTr  := oTree:GetCargo()
	Local cLocPer  := SubStr( oTree:GetCargo() , 1 , 3 )
	Local cCarSup  := SubStr( oTree:GetCargo() , 4 , 3 )
	Local lExcTot  := .T.
	Local lConfirm := .F.
	Local aDanos   := {}
	Local aTab     := {{"TG7","_ORDEM"},;
					   {"TGF","_ANALIS","TGF_CODPLA"},;
					   {"TGG","_ANALIS","TGG_CODPLA"},;
					   {"TGH","_ANALIS","TGH_CODOBJ"},;
					   {"TGI","_ANALIS","TGI_CODMON"}}

	Local aTab2    := {{"TG5","_ORDEM"},;
					   {"TGB","_ANALIS"}}

	Local aArea     := GetArea()
	Local aAreaTRB  := ( cTRBSGA )->( GetArea() )
	Local aAreaTG1  := TG1->( GetArea() )
	Local aAreaTG6  := TG6->( GetArea() )
	Local aAreaTG8  := TG8->( GetArea() )

	Private aColsPla := {}
	Private aColsEme := {}
	Private aColsObj := {}
	Private aColsMon := {}
	Private aColsMas := { aColsPla , aColsEme , aColsObj , aColsMon }
	Private aTabGet  := {{"TGF","TGJ","TGF_CODPLA"},;
					     {"TGG","TGK","TGG_CODPLA"},;
					     {"TGH","TGL","TGH_CODOBJ"},;
					     {"TGI","TGM","TGI_CODMON"}}

	dbSelectArea(cTRBSGA)
	dbSetOrder(1)
	dbSeek(cCodEst+cLocPer)
	While (cTRBSGA)->(!EoF()) .And. cCodEst == (cTRBSGA)->CODEST .And. cLocPer == (cTRBSGA)->NIVSUP
		aAdd(aDanos,(cTRBSGA)->CODTIPO)
		(cTRBSGA)->(dbSkip())
	End

	If Len(aDanos) > 0
		nAviso := Aviso(STR0101 , ;  //Atenção//Titulo
					    STR0186 , ; //"Este perigo possui uma ou mais avaliações, deseja jogá-las para histórico, excluí-las ou cancelar a operação?"//Mensagem
						{STR0187 , STR0023 , STR0006 } ) //"Cancelar"###"Histórico"###"Excluir" //Opcoes
	EndIf

	If nAviso <> 1
		dbSelectArea( cTRBSGA )
		dbSetOrder( 2 )
		dbSeek( cCodEst + cLocPer )
		cCodPer := SubStr( ( cTRBSGA )->CODTIPO , 1 , Len( TG1->TG1_CODPER ) )
		cNivSup := ( cTRBSGA )->NIVSUP

		dbSelectArea( "TG9" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TG9" ) + cCodPer )
		While TG9->( !EoF() ) .And. TG9->TG9_FILIAL == xFilial( "TG9" ) .And. ;
				TG9->TG9_CODPER == cCodPer

			If TG9->TG9_CODNIV <> cNivSup
				lExcTot := .F.
			EndIf
			TG9->( dbSkip() )
		End

		If lExcTot
			lConfirm := MsgYesNo( STR0188 )//"Esta é a última localização do Perigo selecionado, fazendo com que a exclusão retire ele físicamente, deseja continuar?"
		Else
			lConfirm := DeleteIdent( "P" )
		EndIf

		If lConfirm
			For nDano := 1 To Len( aDanos )
				dbSelectArea( "TG6" )
				dbSetOrder( 5 )
				If dbSeek( xFilial( "TG6" ) + "001" + cNivSup + cCodPer + aDanos[ nDano ] )
					If nAviso == 2
						For nTab := 1 To Len( aTab )
							If nTab <> 1
								dbSelectArea( aTab[ nTab , 1 ] )
								dbSetOrder( 1 )
								If dbSeek( xFilial( aTab[ nTab , 1 ] ) + TG6->TG6_ORDEM )
									aAdd( aColsMas[ nTab - 1 ] , { ( aTab[ nTab , 1 ] )->&( aTab[ nTab , 3 ] ) , .F. } )
								Else
									aAdd( aColsMas[ nTab - 1 ] , { "" , .F. } )
								EndIf
							EndIf
						Next nTab

						// StaticCall( MDTA855 , fGravaHist , TG6->TG6_ORDEM  )
						MDT855HIST( TG6->TG6_ORDEM )
					Else
						RecLock( "TG6" , .F. )
						TG6->( dbDelete() )
						TG6->( MsUnLock() )

						For nTab := 1 To Len( aTab )
							dbSelectArea( aTab[ nTab , 1 ] )
							dbSetOrder( 1 )
							dbSeek( xFilial( aTab[ nTab , 1 ] ) + TG6->TG6_ORDEM )
							While !EoF() .And. ( aTab[ nTab , 1 ] )->&( PrefixoCPO( aTab[ nTab , 1 ] ) + "_FILIAL" ) == xFilial( aTab[ nTab , 1 ] ) .And. ;
									( aTab[ nTab , 1 ] )->&( PrefixoCPO( aTab[ nTab , 1 ] ) + aTab[ nTab , 2 ] ) == TG6->TG6_ORDEM
								RecLock( aTab[ nTab , 1 ] , .F. )
								dbDelete()
								( aTab[ nTab , 1 ] )->( MsUnLock() )
								( aTab[ nTab , 1 ] )->( dbSkip() )
							End
						Next nTab
					EndIf
				EndIf
			Next nDano

			dbSelectArea( "TG9" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TG9" ) + cCodPer + "001" + cNivSup )
				RecLock( "TG9" , .F. )
				TG9->( dbDelete() )
				TG9->( MsUnLock() )
			EndIf

			If lExcTot
				dbSelectArea( "TG1" )
				dbSetOrder( 1 )
				If dbSeek( xFilial( "TG1" ) + cCodPer )
					RecLock( "TG1" , .F. )
					TG1->( dbDelete() )
					TG1->( MsUnLock() )
				EndIf
				//Deleta nivel da Arvore
				oTree:DelItem()

				For nTab := 1 To Len( aTab )
					dbSelectArea( aTab[ nTab , 1 ] )
					dbSetOrder( 1 )
					dbSeek( xFilial( aTab[ nTab , 1 ] ) + cCodPer )
					While !EoF() .And. ( aTab[ nTab , 1 ] )->&( PrefixoCPO( aTab[ nTab , 1 ] ) + "_FILIAL" ) == xFilial( aTab[ nTab , 1 ] ) .And. ;
							( aTab[ nTab , 1 ] )->&( PrefixoCPO( aTab[ nTab , 1 ] ) + aTab[ nTab , 2 ] ) == cCodPer
						RecLock( aTab[ nTab , 1 ] , .F. )
						dbDelete()
						( aTab[ nTab , 1 ] )->( MsUnLock() )
						( aTab[ nTab , 1 ] )->( dbSkip() )
					End
				Next nTab
			EndIf
		EndIf
	EndIf

	RestArea( aAreaTG8 )
	RestArea( aAreaTG6 )
	RestArea( aAreaTG1 )
	RestArea( aAreaTRB )
	RestArea( aArea )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902RLMDT
Monta os relacionamentos do Perigo x Dano

@param cTabela - Tabela a ser considerada

@author Jackson Machado
@since 24/06/2013

@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902RLMDT( cTabela )

	Local j        := 0
	Local nIdx     := 1
	Local cTabSec  := ""
	Local cCodigo  := ""
	Local cFldDesc := ""
	Local cSeek    := ""
	Local cCod     := ""
	Local cNivSup   := ""
	Local cNivPer   := ""
	Local cNivTG6  := ""
	Local cCodPer  := ""
	Local cKey     := ""
	Local cWhile   := ""
	Local aHeadList   := { }
	Local aTamanho := { }
	Private cOrdGet   := ""
	Private aLocal2 := { }
	Default cTabela   := ""

	cTableRel      := cTabela

	cCod        := SubStr( oTree:GetCargo() , 1 , 3 )

	aItensRel      := {}

   //Verifica o Perigo
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	dbSeek( cCodEst + cCod + cFilAnt )
	cNivSup := ( cTRBSGA )->NIVSUP
	cCodPer := SubStr( ( cTRBSGA )->CODTIPO , 1 , Len( TG1->TG1_CODPER ) )
	cNivPer := ( cTRBSGA )->CODPRO

   //Verifica a Localizacao do Perigo
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	dbSeek( cCodEst + cNivSup + cFilAnt )
	cNivTG6  := ( cTRBSGA )->NIVSUP
	aLocal2 := { { ( cTRBSGA )->NIVSUP , .T. } }

	dbSelectArea( "TG6" )
	dbSetOrder( 5 )
	dbSeek( xFilial( "TG6" ) + cCodEst + cNivTG6 )
	nRec  := TG6->( Recno() )
	cOrdGet  := TG6->TG6_ORDEM

	If cTabela == "TN0"
		fVisRelMDT()
		Return
	ElseIf cTabela == "TRM"
		M->TG1_CODPER := TG6->TG6_CODPER
		M->TG6_CODDAN := TG6->TG6_CODDAN
		MDT855TRM()
		Return
	ElseIf cTabela == "TJ2"
		If TG6->TG6_SITUAC == "1"
			ShowHelpDlg( STR0101 , ; //"Atenção"
			{ STR0189 } , 2 , ; //"Não é possível gerar treinamento para análises não aprovadas."
			{ STR0190 } , 2 ) //"Favor aprovar primeiramente a análise."
			Return
		EndIf
		fQuestSeg( cCod )
	EndIf

	If cTabela <> "TJ2"
		cKey  := xFilial( cTabela ) + cOrdGet
		cWhile   := "xFilial('" + cTabela + "') + cOrdGet == " + cTabela + "->" + PrefixoCPO( cTabela ) + "_FILIAL+" + cTabela + "->" + PrefixoCPO( cTabela ) + "_ANALIS"

		If cTabela == "TGF"
			cTabSec     := "TAA"
			cCodigo     := "TGF->TGF_CODPLA"
			cFldDesc := "TAA_NOME"
		ElseIf cTabela == "TGG"
			cTabSec     := "TBB"
			cCodigo     := "TGG->TGG_CODPLA"
			cFldDesc := "TBB_DESPLA"
		ElseIf cTabela == "TGH"
			cTabSec     := "TBH"
			cCodigo     := "TGH->TGH_CODOBJ"
			cFldDesc := "TBH_DESCRI"
		ElseIf cTabela == "TGI"
			cTabSec     := "TCD"
			cCodigo     := "TGI->TGI_CODMON"
			cFldDesc := "TCD_DESCRI"
		ElseIf cTabela == "TNC"
			nIdx     	:= 12
			cTabSec     := "TNC"
			cCodigo     := "TNC->TNC_ACIDEN"
			cFldDesc := "TNC_DESACI"
		EndIf


		dbSelectArea( cTabela )
		dbSetOrder( nIdx )
		dbSeek( cKey )
		While ( cTabela )->( !EoF() ) .And. &( cWhile )
			aAdd( aItensRel , { &( cCodigo ) , NGSeek( cTabSec , &( cCodigo ) , 1 , cFldDesc ) } )
			( cTabela )->( dbSkip() )
		End
	EndIf

	If Len( aItensRel ) > 0
		oPanel21:Hide()
		oPanel22:Hide()
		oPanel23:Hide()

		oListRel:SetArray(aItensRel)
		oListRel:bLine:= bLineRel

		oListRel:Hide()
		oListRel:GoTop()
		oListRel:SetFocus()
		oListRel:Refresh()
		oListRel:Show()
		oPanel24:Owner():CommitControls()
		oPanel24:Show()
		oPanel24:Refresh()
	Else
		oPanel24:Hide()
		MsgInfo( STR0191 ) //"Não existem relacionamentos para esta opção."
	EndIf

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fVisRelMDT
Visualizar dos relacionamentos do MDT

@sample fVisRelMDT()

@author Jackson Machado
@since 24/06/2013

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fVisRelMDT()

	Local cOldTrb     := cTRBSGA

	If cTableRel == "TGF"
		dbSelectArea( "TAA" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TAA" ) + aItensRel[ oListRel:nAt , 1 ] )
		Sg090Ca( "TAA" , TAA->( Recno() ) , 2 )
	ElseIf cTableRel == "TGG"
		dbSelectArea( "TBB" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TBB" ) + aItensRel[ oListRel:nAt , 1 ] )
		Sg180Pro( "TBB" , TBB->( Recno() ) , 2 )
	ElseIf cTableRel == "TGH"
		dbSelectArea( "TBH" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TBH" ) + aItensRel[ oListRel:nAt , 1 ] )
		Sg300Cad( "TBH" , TBH->( Recno() ) , 2 )
	ElseIf cTableRel == "TGI"
		dbSelectArea( "TCD" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TCD" ) + aItensRel[ oListRel:nAt , 1 ] )
		Sg390Pro( "TCD" , TCD->( Recno() ) , 2 )
	ElseIf cTableRel == "TNC"
		dbSelectArea( "TNC" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TNC" ) + aItensRel[ oListRel:nAt , 1 ] )
		NGCAD01( "TNC" , TNC->( Recno() ) , 2 )
	ElseIf cTableRel == "TN0"
		dbSelectArea( "TN0" )
		dbSetOrder( 1 )
		If dbSeek( xFilial( "TN0" ) + TG6->TG6_NUMRIS )
			D180INCL( "TN0" , TN0->( Recno() ) , 2 )
		Else
			MsgInfo( STR0191 ) //"Não existem relacionamentos para esta opção."
		EndIf
	ElseIf cTableRel == "TJ2"
		MDTA996( "TJ1->TJ1_FILIAL == '" + xFilial( "TJ1" ) + "' .And. TJ1->TJ1_QUESTI == '" + aItensRel[ oListRel:nAt , 1 ] + "'"  , ;
			aItensRel[ oListRel:nAt , 1 ] )
	EndIf

	cTRBSGA := cOldTrb

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fQuestSeg
Realiza o tratamento para o questionário de segurança

@sample fQuestSeg( '001' )

@author Jackson Machado
@since 24/06/2013

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fQuestSeg( cNivel )

	dbSelectArea( "TJ2" )
	dbSetOrder( 2 )
	dbSeek( xFilial( "TJ2" ) + cNivel )
	While TJ2->( !EoF() ) .And. TJ2->TJ2_FILIAL == xFilial( "TJ2" ) .And. TJ2->TJ2_LOC == cNivel
		aAdd( aItensRel , { TJ2->TJ2_QUESTI , TJ2->TJ2_NOMQUE } )
		TJ2->( dbSkip() )
	End

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fDeletaRel
Deleta todos os relacionamentos que não estão no TRB

@sample fDeletaRel()

@author Jackson Machado
@since 03/10/2013

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fDeletaRel()

	Local k        := 1
	Local aTree    := {}
	Local aArea    := GetArea()
	Local aAreaTRB := ( cTRBSGA )->( GetArea() )
	Local aAreaTAF := TAF->( GetArea() )

	aAdd( aTree , { TAF->TAF_CODEST , TAF->TAF_CODNIV } )

	While k <= Len( aTree )
		dbSelectArea( "TAF" )
		dbSetOrder( 1 )
		dbSeek( xFilial( "TAF" ) + aTree[ k , 1 ] + aTree[ k , 2 ] )
		While !EoF() .And.   TAF->TAF_FILIAL == xFilial( "TAF" )  .And. ;
				TAF->TAF_CODEST == aTree[ k , 1 ] .And. ;
				TAF->TAF_NIVSUP == aTree[ k , 2 ]
			dbSelectArea( cTRBSGA )
			dbSetOrder( 2 )
			If !dbSeek( TAF->TAF_CODEST + TAF->TAF_CODNIV + TAF->TAF_FILIAL )
				RecLock( "TAF" , .F. )
				TAF->( dbDelete() )
				TAF->( MsUnLock() )
				aAdd( aTree , { TAF->TAF_CODEST , TAF->TAF_CODNIV } )
			EndIf
			dbSelectArea( "TAF" )
			dbSkip()
		End
		k++
	End

	RestArea( aAreaTAF )
	RestArea( aAreaTRB )
	RestArea( aArea )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902RelRis
Abri tela para adequação de registro, para fazer o relacionamento dos
riscos existentes na arvore logica.

@sample MNT902RelRis()

@author Guilherme Benkendorf
@since 02/05/2014

@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902RelRis( )

	Local nOpcRis    := 0
	Local aAreaRelRis:= GetArea()
	Local aLocaliz   := {}
	Local aHead912Ri := {}
	Local aCols912Ri := {}
	Local aYesFields := { "TAF_CODNIV", "TAF_NOMNIV","TAF_CCUSTO","TAF_NOMCC","TAF_CODAMB","TAF_NOMAMB" }
	Local aAlterRis  := { "TAF_CCUSTO","TAF_CODAMB" }

   	//Variaveis de tela
	Local oDlgRis
	Local oPnlTopRis
	Local oPnlAllRis
	Local aObjects := {}

	If NGCADICBASE( "TAF_DEPTO" , "A" , "TAF" , .F. )
		aAdd( aYesFields, "TAF_DEPTO" )
		aAdd( aYesFields, "TAF_DESCDP" )
		aAdd( aAlterRis, "TAF_DEPTO" )
	EndIf

	aAdd(aObjects,{285,060,.F.,.F.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y
	aAdd(aObjects,{90,180,.T.,.T.,.F.}) // Indica dimensoes x e y e indica que redimensiona x e y e assume que retorno sera em linha final coluna final (.F.)
	aSize:=MsAdvSize()
	aInfo:={aSize[1],aSize[2],aSize[3],aSize[4],3,3}
	aPosObj:=MsObjSize(aInfo,aObjects,.T.)

   	// Monta GetDados de Localização
	cQryRis:= "SELECT * FROM " + RetSQLName("TAF") + " TAF"
	cQryRis+= " WHERE TAF.TAF_FILIAL = " + ValToSql( xFilial( "TAF" ) )
	cQryRis+= " AND TAF.TAF_CODEST = " + ValToSql( cCodEst )
	cQryRis+= " AND TAF.TAF_CODNIV <> '001' AND TAF.TAF_INDCON = '2'"
	If nMod902 == 19
		cQryRis+= " AND TAF.TAF_MODMNT <> ' '"
	ElseIf nMod902 == 35
		cQryRis+= " AND TAF.TAF_MODMDT <> ' '"
	ElseIf nMod902 == 56
		cQryRis+= " AND TAF.TAF_MODSGA <> ' '"
	EndIf
	cQryRis+= " AND TAF.TAF_CODAMB = ''"
	cQryRis+= " AND D_E_L_E_T_ <> '*'"
	cQryRis:= ChangeQuery( cQryRis )
	FillGetDados( 4, "TAF", , , , , , aYesFields , , cQryRis , , ,@aHead912Ri, @aCols912Ri, , , , , , )

	If !Empty(aCols912Ris[1][1]) .And. !Empty(aCols912Ris[1][2])

		aColsBkpRis := aClone( aCols912Ri )

		Define MsDialog oDlgRis From aSize[7]/1.5,0 to aSize[6]/1.5,aSize[5]/1.5 Title STR0228 Pixel //"Relacionar Ambiente Físico"

			//Panel criado para correta disposicao da tela
			oPnlPai := TPanel():New( , , , oDlgRis , , , , , , , , .F. , .F. )
				oPnlPai:Align := CONTROL_ALIGN_ALLCLIENT

			oPnlTopRis := TPanel():New(0,0,,oPnlPai,,,,,CLR_WHITE,12,30,.F.,.F.)
				oPnlTopRis:Align := CONTROL_ALIGN_TOP

			TGroup():New( 05 , 005 , 20, aSize[3]/1.5-5, , oPnlTopRis, , , .T.)
			TSay():New( 07, 09 , {|| STR0229 },oPnlTopRis,,,,,,.T.,,,aSize[3]/1.5-15 ,20) // "Para que seja relacionado os Riscos, deverá relacionar às localizações a um Centro de Custo e Ambiente Físico."

			PutFileInEof("TAF")
			oPnlAllRis := TPanel():New(0,0,,oPnlPai,,,,,CLR_WHITE,12,12,.F.,.F.)
			oPnlAllRis:Align := CONTROL_ALIGN_ALLCLIENT

			oGetLoc := MsNewGetDados():New( 0, 0, 0, 0, GD_UPDATE,{|| MNTA902VGR( .F. , oGetLoc ) }, {|| MNTA902VGR( .T., @oGetLoc, aColsBkpRis ) },,;
											aAlterRis , , , , , , oPnlAllRis, aHead912Ri, aCols912Ri )
			oGetLoc:oBrowse:Align  := CONTROL_ALIGN_ALLCLIENT

		Activate MsDialog oDlgRis On Init EnchoiceBar( oDlgRis, {|| If( oGetLoc:TudoOk(), oDlgRis:End(), .F. ), nOpcRis := 1 }, {|| oDlgRis:End(), nOpcRis := 0 }) Centered

		If nOpcRis == 1
         // Relaciona os riscos cadastrados na arvore.
			MNTA902EAR( oGetLoc )

		EndIf

	Else
		nOpcRis := 0
	EndIf

	RestArea( aAreaRelRis )

Return nOpcRis
//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA902VGR
Valida Getdados da tela de relacionamento de riscos com TAF.

@sample MNTA902VGR()

@param lTudoOk - Indica se é verificação de bTudoOK
@param oGetVal - Objeto da MsNewGetDados, Obrigatório.

@author Guilherme Benkendorf
@since 05/05/2014

@return lRet
/*/
//---------------------------------------------------------------------
Static Function MNTA902VGR( lTudoOk, oGetVal, aColsBkpRis )

	Local nPosCC, nPosAmb, nPosDpt
	Local nX
	Local cCustoDep
	Local cSeekDep
	Local lRet      := .T.
	Local aColsOk   := aClone( oGetVal:aCols )
	Local aHeaderOk := aClone( oGetVal:aHeader )
	Local nAt       := oGetVal:nAt
	Local lDepto    := NGCADICBASE( "TAF_DEPTO" , "A" , "TAF" , .F. )

	Default lTudoOk     := .F.
	Default aColsBkpRis := {}

	nPosCC  := GDFieldPos( "TAF_CCUSTO", aHeaderOK )
	nPosAmb := GDFieldPos( "TAF_CODAMB", aHeaderOK )
	nPosDpt := GDFieldPos( "TAF_DEPTO" , aHeaderOK )

	For nX := 1 To Len( aColsOk )

		If !Empty(aColsOk[nAt,nPosCC])  .And. !Empty(aColsOk[nX,nPosCC])  .And.;
		   !Empty(aColsOk[nAt,nPosAmb]) .And. !Empty(aColsOk[nX,nPosAmb]) .And.;
		   IIf(lDepto,(!Empty(aColsOk[nAt,nPosDpt]) .And. !Empty(aColsOk[ nX , nPosDpt ] )),.T.)

			If aColsOk[ nAt , nPosCC ] == aColsOk[ nX , nPosCC ] .And. ;
				aColsOk[ nAt , nPosAmb ] == aColsOk[ nX , nPosAmb ] .And. ;
				IIf(lDepto,(aColsOk[ nAt , nPosDpt ] == aColsOk[ nX , nPosDpt ]),.T.) .And. ;
				( nAt <> nX )

				Help(" ",1,"JAEXISTINF")
				lRet := .F.
				Exit
			EndIf
		EndIf

		If lTudoOK
			If !Empty( aColsOk[ nX , nPosCC ] ) .And. Empty( aColsOk[ nX , nPosAmb ] )
				ShowHelpDlg( STR0101 ,  { "'" + AllTrim( NGRETTITULO("TAF_CODAMB") ) + "' " + STR0230 }   , 2 , ;//"Atenção"###TITULO###"não informado."
				{ STR0231 }       , 3 ) //"Toda localização que contém um Centro de Custo vinculado, deverá ter preenchido o Código do Ambiente Físico."
				lRet := .F.
				oGetVal:nAt := nX
				Exit
			EndIf

			If Empty( aColsOk[ nX , nPosCC ] ) .And. !Empty( aColsOk[ nX , nPosAmb ] )
				ShowHelpDlg( STR0101 ,  { "'" + AllTrim( NGRETTITULO("TAF_CCUSTO") ) + "' " + STR0230 }   , 2 , ;//"Atenção"###TITULO###"não informado."
				{ STR0232 }       , 3 ) //"Toda localização que contém um Código do Ambiente Físico vinculado, deverá ter preenchido o Centro de Custo."

				lRet := .F.
				oGetVal:nAt := nX
				Exit
			EndIf

			If lDepto
				If  !Empty( aColsOk[ nX , nPosDpt ] ) .And. ( Empty( aColsOk[ nX , nPosCC ] ) .Or. Empty( aColsOk[ nX , nPosAmb ] ) )
					ShowHelpDlg( STR0101 , 	{ "'" + AllTrim( NGRETTITULO("TAF_DEPTO") ) + "' " + STR0230 }	, 2 , ;//"Atenção"###TITULO###"não informado."
										{ "Quando departamento informado, o Centro de Custo e o Ambiente devem ser informados." } 		, 3 ) //"Toda localização que contém um Código do Ambiente Físico vinculado, deverá ter preenchido o Centro de Custo."
					lRet := .F.
					oGetVal:nAt := nX
					Exit
				EndIf

				cCustoDep := NgSeek( "SQB" , aColsOk[ nX , nPosDpt ] , 1 , "QB_CC" )
				If  !Empty( aColsOk[ nX , nPosDpt ] ) .And. !Empty( aColsOk[ nX , nPosCC ] ) .And. !Empty( cCustoDep ) .And. ;
						cCustoDep <> aColsOk[ nX , nPosCC ]
					ShowHelpDlg( STR0101 , 	{ "'" + AllTrim( NGRETTITULO("TAF_CUSTO") ) + "' " + "diferente ao Centro de Custo do Departamento." }	, 2 , ;//"Atenção"###TITULO###"diferente ao Centro de Custo do Departamento."
										{ "O Centro de Custo deve ser o mesmo ao do departamento." } 		, 3 ) //"O Centro de Custo deve ser o mesmo ao do departamento."
					lRet := .F.
					oGetVal:nAt := nX
					Exit
				EndIf
			EndIf

			If ( !Empty( aColsBkpRis[ nX , nPosCC ] ) .And. aColsBkpRis[ nX , nPosCC ] <> aColsOk[ nX , nPosCC ] ) .Or.;
					( !Empty( aColsBkpRis[ nX , nPosAmb ] ) .And. aColsBkpRis[ nX , nPosAmb ] <> aColsOk[ nX , nPosAmb ] ) .Or. ;
					IIf(lDepto,( !Empty( aColsBkpRis[ nX , nPosDpt ] ) .And. aColsBkpRis[ nX , nPosDpt ] <> aColsOk[ nX , nPosDpt ] ),.F.)

				ShowHelpDlg( STR0101 ,  { STR0233 } , 2 , ;//"Atenção"###"'Centro de Custo' ou 'Código do Ambiente Físico' não podem ser alterados."
				{ "" }      , 3 ) //""
				lRet := .F.
				oGetVal:nAt := nX
				Exit
			EndIf

			If !Empty( aColsOk[ nX , nPosCC ] ) .And. !Empty( aColsOk[ nX , nPosAmb ] ) .And. If(lDepto,(!Empty( aColsOk[ nX , nPosDpt ] )),.T.)
				cSeekDep := If( lDepto,(aColsOk[ nX , nPosDpt ]),"")
				If!EXISTCHAV( "TAF" , cCodEst + aColsOk[ nX , nPosCC ] + aColsOk[ nX , nPosAmb ] + aColsOk[ nX , nPosAmb ] + cSeekDep, 11 )
					lRet :=  .F.
					oGetVal:nAt := nX
					Exit
				EndIf
			ElseIf !Empty( aColsOk[ nX , nPosCC ] ) .And. !Empty( aColsOk[ nX , nPosAmb ] )
				cSeekDep := If( lDepto,Space( Len( aColsOk[ nX , nPosDpt ] ) ),"")
				If!EXISTCHAV( "TAF" , cCodEst + aColsOk[ nX , nPosCC ] + aColsOk[ nX , nPosAmb ] + cSeekDep , 11 )
					lRet :=  .F.
					oGetVal:nAt := nX
					Exit
				EndIf
			EndIf
		EndIf
	Next nX

	If !lRet
		oGetVal:oBrowse:SetFocus()
		oGetVal:Refresh()
	EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA902EAR
 Estrutura Array para relacionamento dos riscos.

@sample MNTA902EAR()

@author Guilherme Benkendorf
@since 05/05/2014

@return .T.
/*/
//--------------------------------------------------------------------
Static Function MNTA902EAR( oGetVal )

	Local nPosLoc, nPosCC, nPosAmb, nPosDpt
	Local nX
	Local aColsOk   := aClone( oGetVal:aCols )
	Local aHeaderOk := aClone( oGetVal:aHeader )
	Local aAreaAux  := {}
	Local aAreaTAF  := TAF->( GetArea() )
	Local nAt       := oGetVal:nAt
	Local lDepto    := NGCADICBASE( "TAF_DEPTO" , "A" , "TAF" , .F. )

	Local cFilTAF   := xFilial( "TAF" )
	Local cCusto    := ""
	Local cFuncao   := ""
	Local cTarefa   := ""
	Local cAmbiente := ""
	Local cDepto    := ""
	Local cCondTAF  := "!Empty( TAF->TAF_CCUSTO ) .And. !Empty( TAF->TAF_CODAMB )"

	//---------------------------------------------------------------------------------------------
	// Atualiza codigos de Centro de Custo e Ambiente para as localização
	//---------------------------------------------------------------------------------------------
	nPosLoc := GDFieldPos( "TAF_CODNIV", aHeaderOK )
	nPosCC  := GDFieldPos( "TAF_CCUSTO", aHeaderOK )
	nPosAmb := GDFieldPos( "TAF_CODAMB", aHeaderOK )
	nPosDpt := GDFieldPos( "TAF_DEPTO" , aHeaderOK )

	For nX := 1 To Len( aColsOk )
		dbSelectArea( "TAF" )
		dbSetOrder( 2 )  //TAF_FILIAL+TAF_CODEST+TAF_CODNIV
		If dbSeek( cFilTAF + cCodEst + aColsOk[ nX , nPosLoc ] ) .And. !Empty( aColsOk[ nX , nPosCC ] ) .And. !Empty( aColsOk[ nX , nPosAmb ] )
			RecLock( "TAF" , .F. )
			TAF->TAF_CCUSTO := aColsOk[ nX , nPosCC ]
			TAF->TAF_CODAMB := aColsOk[ nX , nPosAmb ]
			If nPosDpt > 0
				TAF->TAF_DEPTO  := aColsOk[ nX , nPosDpt ]
			EndIf
			TAF->( MsUnLock() )
		EndIf
	Next nX

   	//---------------------------------------------------------------------------------------------
   	// Busca a composição da arvore logica para cadastrar os riscos.
   	//---------------------------------------------------------------------------------------------
	dbSelectArea( "TAF")
	dbSetOrder( 1 ) //TAF_FILIAL+TAF_CODEST+TAF_NIVSUP+TAF_ORDEM
	dbSeek( xFilial( "TAF" ) )
	While TAF->( !EoF() ) .And. cFilTAF == TAF->TAF_FILIAL .And. cCodEst == TAF->TAF_CODEST

		cCusto  := ""
		cFuncao := ""
		cTarefa := ""
		cAmbiente:= ""
		lGrava	:= .F.

		If &cCondTAF .And. TAF->TAF_INDCON == "2"
			cAmbiente := TAF->TAF_CODAMB
			cNivSup   := TAF->TAF_CODNIV
         	//Caso esteja na primeira localização da estrutura (Prédio) abaixo deverão estar totdos os Riscos
         	// que tenham '*'(Todos) para Centro de Custo, Função e Tarefa.
			If TAF->TAF_CODNIV == "001"
				lGrava := .T.
				cCusto := PadR( "*" , Len( TN0->TN0_CC ) )
				cFuncao := PadR( "*" , Len( TN0->TN0_CODFUN ) )
				cTarefa := PadR( "*" , Len( TN0->TN0_CODTAR ) )
				If lDepto
					cDepto := PadR( "*" , Len( TN0->TN0_DEPTO ) )
				EndIf
			Else
            	//Caso esteja em uma localização, abaixo dela deverão estar todos os Riscos que tenham este Ambiente e Centro de Custo
            	// com função e Tarefa igual a '*' (Todos).
				lGrava := .T.
				cCusto := TAF->TAF_CCUSTO
				cFuncao := PadR( "*" , Len( TN0->TN0_CODFUN ) )
				cTarefa := PadR( "*" , Len( TN0->TN0_CODTAR ) )
				If lDepto
					cDepto := If( Empty( TAF->TAF_CCUSTO ) , PadR( "*" , Len( TN0->TN0_DEPTO ) ) , TAF->TAF_DEPTO )
				EndIf
			EndIf
      	//Caso esteja em uma função
		ElseIf TAF->TAF_INDCON == "3"
			aAreaAux := TAF->( GetArea() )
			cFuncao := SubStr( TAF->TAF_CODCON, 1, Len(TN0->TN0_CODFUN) )
			cNivSup  := TAF->TAF_CODNIV
         //Verificar se esta possui acima uma Localização com Centro de Custo e Ambiente vinculado.
			dbSelectArea("TAF")
			dbSetOrder( 2 )
			dbSeek( cFilTAF + cCodEst + TAF->TAF_NIVSUP )
			cAmbiente := TAF->TAF_CODAMB
			If &cCondTAF .And. TAF->TAF_INDCON == "2"
            // Se acima da função for a primeira localização da estrutura (Prédio), abaixo dela deverão estar todos os Riscos
            // que tenham '*' (Todos) para Centro de Custo e Tarefa, apenas com a Função especificada.
				If TAF->TAF_CODNIV == "001" // Predio
					lGrava := .T.
					cCusto := PadR( "*" , Len( TN0->TN0_CC ) )
					cTarefa := PadR( "*" , Len( TN0->TN0_CODTAR ) )
					If lDepto
						cDepto := PadR( "*" , Len( TN0->TN0_DEPTO ) )
					EndIf
            // Abaixo dela deverão estar todos os Riscos que tenham este Ambiente, Centro de Custo e Tarefa
            // Com Função igual a '*' (Todos)
				Else
					lGrava := .T.
					cCusto := TAF->TAF_CCUSTO
					cFuncao := PadR( "*" , Len( TN0->TN0_CODFUN ) )
					cTarefa := PadR( "*" , Len( TN0->TN0_CODTAR ) )
					If lDepto
						cDepto := If( Empty( TAF->TAF_CCUSTO ) , PadR( "*" , Len( TN0->TN0_DEPTO ) ) , TAF->TAF_DEPTO )
					EndIf
				EndIf
			EndIf
			RestArea( aAreaAux )
      	//Caso esteja em uma tarefa
		ElseIf TAF->TAF_INDCON == "4"
			aAreaAux := TAF->( GetArea() )
			cTarefa := SubStr( TAF->TAF_CODCON, 1, Len( TN0->TN0_CODTAR ) )
			cNivSup  := TAF->TAF_CODNIV
         	//Verifica se esta possui acima dela uma Localização com Centro de Custo e Ambiente vinculados
			dbSelectArea( "TAF" )
			dbSetOrder( 2 )
			dbSeek( cFilTAF + cCodEst + TAF->TAF_NIVSUP )
			If &cCondTAF .And. TAF->TAF_INDCON == "2"
				cAmbiente:= TAF->TAF_CODAMB
            //Se acima da tarefa for a primeira localização da estrutura (Prédio).
            //Abaixo dela deverão estar todos os Riscos que tenham '*'(Todos) para Centro de Custo e Função,
            //apneas com a Tarefa especificada
				If TAF->TAF_CODNIV == "001" // Predio
					lGrava := .T.
					cCusto := PadR( "*" , Len( TN0->TN0_CC ) )
					cFuncao := PadR( "*" , Len( TN0->TN0_CODFUN ) )
					If lDepto
						cDepto := PadR( "*" , Len( TN0->TN0_DEPTO ) )
					EndIf
                     //Abaixo dela deverão estar todos os Riscos que tenham este Ambiente, Centro de Custo e Tarefa,
                     //Com Função igual a '*' (Todas).
				Else
					lGrava := .T.
					cCusto := TAF->TAF_CCUSTO
					cFuncao := PadR( "*" , Len( TN0->TN0_CODFUN ) )
					If lDepto
						cDepto := If( Empty( TAF->TAF_CCUSTO ) , PadR( "*" , Len( TN0->TN0_DEPTO ) ) , TAF->TAF_DEPTO )
					EndIf
				EndIf
                  //Se acima é uma função
			ElseIf TAF->TAF_INDCON == "3"
				cFuncao := SubStr( TAF->TAF_CODCON, 1, Len( TN0->TN0_CODFUN ) )
            //Verifica se acima dela possui uma localização com Centro de Custo e Ambiente vinculado.
				dbSelectArea( "TAF" )
				dbSetOrder( 2 )
				dbSeek( cFilTAF + cCodEst + TAF->TAF_NIVSUP )
				If &cCondTAF .And. TAF->TAF_INDCON == "2"
					cAmbiente := TAF->TAF_CODAMB
                        //Abaixo deverão estar todos os Riscos que tenham este Ambiente, Centro de Custo e Função e Tarefa.
					lGrava := .T.
					cCusto := TAF->TAF_CCUSTO
					If lDepto
						cDepto := If( Empty( TAF->TAF_CCUSTO ) , PadR( "*" , Len( TN0->TN0_DEPTO ) ) , TAF->TAF_DEPTO )
					EndIf
				EndIf
			EndIf
			RestArea( aAreaAux )
		EndIf

		If lGrava
			MNTA902RRE( cCusto, cAmbiente, cFuncao, cTarefa, cNivSup, cDepto )
		EndIf

		TAF->( dbSkip() )
	End

	RestArea( aAreaTAF )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNTA902RRE
Função especifica auxiliar da MNTA902EAR para adicionar no array
 aRiscos os codigos do nivel e o codigo do risco para o vinculo.

@sample MNTA902RRE()

@author Guilherme Benkendorf
@since 05/05/2014

@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNTA902RRE(cCustoPar, cAmbPar, cFuncaoPar, cTarPar, cNivSupPar, cDeptoPar)

	Local nX
	Local nLevel
	Local cFilTN0 := xFilial( "TN0" )
	Local cDesPro
	Local cLocal
	Local cCodNiv
	Local cHora

	Local aRiscos := {}
	Local aAreaTAF:= GetArea()

	Private cCusto   := cCustoPar
	Private cAmbiente:= cAmbPar
	Private cFuncao  := cFuncaoPar
	Private cTarefa  := cTarPar
	Private cDepto   := cDeptoPar

   	//----------------------------------
   	// Busca Risco vinculados a arvore
   	//----------------------------------
	dbSelectArea( "TN0" )
	dbSetOrder( 5 ) //TN0_FILIAL+TN0_CC+TN0_CODFUN+TN0_CODTAR+TN0_DEPTO
	dbSeek( cFilTN0 + cCustoPar + cFuncaoPar + cTarPar + cDeptoPar )
	While TN0->( !EoF() ) .And. cFilTN0 == TN0->TN0_FILIAL .And. TN0->( TN0_CC + TN0_CODFUN + TN0_CODTAR + TN0_DEPTO ) == cCustoPar + cFuncaoPar + cTarPar + cDeptoPar
		If !Empty( TN0->TN0_DTELIM ) .Or. cAmbiente <> TN0->TN0_CODAMB
			TN0->( dbSkip() )
			Loop
		EndIf
		aAdd( aRiscos, { Padr( TN0->TN0_NUMRIS, Len( TAF->TAF_CODCON ) ), TN0->TN0_AGENTE } )
		TN0->( dbSkip() )
	End
   //-----------------------------
   // Vincula risco a arvore
   //-----------------------------
	If Len( aRiscos ) > 0

		For nX:=1 To Len( aRiscos )
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbGoBottom()
			cLocal := TAF->TAF_CODNIV
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf

			cCodNiv := cLocal
			nLevel  := TAF->TAF_NIVEL
			cHora   := Substr(Time(),1,5)

			cDesPro := NGSeek( "TMA", aRiscos[nx][2], 1 , "TMA_NOMAGE" )

         //---------------------------------------------------------------
         // Grava Inclusao do Item na tabela de Historico de Movimentacao
         //---------------------------------------------------------------

			dbSelectArea("TAF")
			dbSetOrder( 10 ) //TAF_FILIAL+TAF_INDCON+TAF_CODCON+TAF_MODMNT+TAF_MODMDT+TAF_MODSGA
			If !dbSeek( xFilial( "TAF" ) + _nPosRisco + aRiscos[nX][1] + " X " )
				RecLock("TAF",.T.)
				TAF->TAF_CODNIV := cLocal
				TAF->TAF_ORDEM  := cLocal
				TAF->TAF_FILIAL := xFilial('TAF')
				TAF->TAF_CODEST := cCodEst
				TAF->TAF_NOMNIV := aRiscos[nx][1]+" - "+cDesPro
				TAF->TAF_NIVEL  := nLevel+1
				TAF->TAF_NIVSUP := cNivSupPar
				TAF->TAF_INDCON := _nPosRisco //Risco
				TAF->TAF_CODCON := aRiscos[nx][1]
				TAF->TAF_MODMDT := "X"
				TAF->( MsUnLock() )

				dbSelectArea( "TCJ" )
				dbSetOrder( 1 ) //TCJ_FILIAL+TCJ_CODNIV+TCJ_NIVSUP+TCJ_TIPROC+DTOS(TCJ_DATA)+TCJ_HORA
				If !dbSeek( xFilial("TCJ") + cCodNiv + cNivSupPar + 'N' + DTOS(dDataBase) + cHora )
					RecLock("TCJ",.T.)
					TCJ->TCJ_FILIAL := xFilial("TCJ")
					TCJ->TCJ_CODNIV := cCodNiv
					TCJ->TCJ_DESNIV := aRiscos[nx][1]+" - "+cDesPro
					TCJ->TCJ_NIVSUP := cNivSupPar
					TCJ->TCJ_DATA   := dDataBase
					TCJ->TCJ_HORA   := cHora
					TCJ->TCJ_TIPROC := "N" //Inclusao
					TCJ->TCJ_NIVEL  := nLevel+1
					TCJ->TCJ_MODMDT := "X"
					TCJ->( MsUnLock() )
				EndIf

			EndIf

		Next nX
	EndIf

	RestArea( aAreaTAF )

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902ORIS
Deleta todos os relacionamentos que não estão no TRB

@sample MNT902ORIS()

@author Guilherme Benkendorf
@since 29/04/2014

@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902ORIS( nOpcx )
	Local aAreaTemp := GetArea()

	Local cSeekTr  := oTree:GetCargo()
	Local cLocRis  := SubStr( cSeekTr , 1 , 3 )
	Local cCarSup  := SubStr( cSeekTr , 4 , 3 )

	Local lRet     := .T.

	Local aAreaTRB := ( cTRBSGA )->( GetArea() )
	Local aAreaTAF := TAF->( GetArea() )

	Local aChoiceOld:= If( Type("aChoice") == "A" , aClone( aChoice ) , Nil )
	Local aGetTmp  := If( Type("aGets") <> "U" , aGets , Nil )
	Local aTelTmp  := If( Type("aTela") <> "U" , aTela , Nil )

	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )//CODEST+CODPRO+FILIAL
	dbSeek( cCodEst + cLocRis + cFilAnt )
	If !ValRisMNT902( nOpcx )
		lRet := .F.
	EndIf

	If lRet
		If nOpcx <> 5
			aRotSetOpc( "TN0" , 0 , nOpcx )
         //Ajustes de variaveis para a execução do D180INCL
			aChoice := NIL
			If nOpcx <> 3
				dbSelectArea( "TN0" )
				dbSetOrder( 1 )//TN0_FILIAL+TN0_NUMRIS
				dbSeek( xFilial( "TN0" ) + SubStr( (cTRBSGA)->CODTIPO, 1 , Len(TN0->TN0_NUMRIS) ) )
			EndIf

			If D180INCL( "TN0" , 0 , nOpcx ) == 1
				If nOpcx == 3
					oTree:TreeSeek( cSeekTr )
					fIncluiRis( TN0->TN0_NUMRIS , cLocRis , cCarSup )
				EndIf
				If nOpcx == 4 .And. !Empty( TN0->TN0_DTELIM )
					dbSelectArea( "TAF" )
					dbSetOrder( 10 ) //TAF_FILIAL+TAF_INDCON+TAF_CODCON+TAF_MODMNT+TAF_MODMDT+TAF_MODSGA
					If dbSeek( xFilial( "TAF" ) + _nPosRisco + PadR( TN0->TN0_NUMRIS, Len( TAF->TAF_CODCON ) ) + " X " )
						RecLock('TAF',.F.)
						dbDelete()
						TAF->( MsUnLock() )
					EndIf
				EndIf
			EndIf
		Else
			dbSelectArea( "TN0" )
			dbSetOrder( 1 )//TN0_FILIAL+TN0_NUMRIS
			dbSeek( xFilial( "TN0" ) + SubStr( (cTRBSGA)->CODTIPO, 1 , Len(TN0->TN0_NUMRIS) ) )
			If Mdt180Vlf( nOpcx )
				lRet := DeleteIdent("R")
			EndIf
		EndIf
	EndIf

	aRotSetOpc( "TN0" , TN0->( Recno() ) , 2 )

	aChoice := If( Type("aChoiceOld") == "A", aClone(aChoiceOld), Nil )
	aTela := aTelTmp
	aGets := aGetTmp

	RestArea( aAreaTAF )
	RestArea( aAreaTRB )

	RestArea( aAreaTemp )

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902ORIS
Deleta todos os relacionamentos que não estão no TRB

@sample MNT902ORIS()

@author Guilherme Benkendorf
@since 29/04/2014

@return .T.
/*/
//---------------------------------------------------------------------
Static Function fRelacRis(nOpcx)

	Local cSeekTr  := oTree:GetCargo()
	Local cLocTr   := SubStr( cSeekTr, 1, 3 )

	Local aAreaTemp := GetArea()
	Local aAreaTRB := ( cTRBSGA )->( GetArea() )
	Local aAreaTAF := TAF->( GetArea() )

	Local aChoiceOld:= If( Type("aChoice") == "A" , aClone( aChoice ) , Nil )
	Local aGetTmp  := If( Type("aGets") <> "U" , aGets , Nil )
	Local aTelTmp  := If( Type("aTela") <> "U" , aTela , Nil )

	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 ) //CODEST+CODPRO+FILIAL
	dbSeek( cCodEst + cLocTr + cFilAnt )

	dbSelectArea( "TN0" )
	dbSetOrder( 1 )//TN0_FILIAL+TN0_NUMRIS
	dbSeek( xFilial( "TN0" ) + (cTRBSGA)->CODTIPO )
	MDT181REL( nOpcx )

	aChoice := If( Type("aChoiceOld") == "A" , aClone(aChoiceOld), Nil )
	aTela := aTelTmp
	aGets := aGetTmp

	RestArea( aAreaTemp )
	RestArea( aAreaTRB  )
	RestArea( aAreaTAF  )

Return
//---------------------------------------------------------------------
/*/{Protheus.doc} fIncluiRis
Função para Inclusão de Risco

@author Guilherme Benkendorf
@since 28/04/2014

@param cCodRis - Código do Risco
@param cNivSup - Nível no qual o risco deve ser incluído
@param cCarSup - Tipo do Nível superior do período
@param cRespons - Responsável pelo nível
@param lSeek   - Indica se deve possicionar na tabela


@return .T.
/*/
//---------------------------------------------------------------------
Static Function fIncluiRis( cCodRis , cNivSup, cCarSup, cRespons, lSeek )

	Local nRecTRB := (cTRBSGA)->(Recno())
	Local aAreaTN0 := TN0->(GetArea())
	Local cDesPro  := "", cFolderA, cFolderB, cCargo
	Local cHora   := Substr(Time(),1,5)

	Default lSeek    := .T.//Verifica se necessita de seek na TN0
	Default cRespons := (cTRBSGA)->RESPONS
	Default cCodRis  := ""

	If lSeek
		dbSelectArea("TN0")
		dbSetOrder(1)
	EndIf
	If !lSeek .Or. dbSeek(xFilial("TN0")+cCodRis)

		cFolderA := "ng_ico_risco"
		cFolderB := "ng_ico_risco"
		cCargo   := "RIS"

		dbSelectArea( "TN0" )
		dbSetOrder( 1 ) //TN0_FILIAL+TN0_NUMRIS
		If dbSeek( xFilial("TN0") + cCodRis )
			cDesPro := NGSeek( "TMA", TN0->TN0_AGENTE, 1, "TMA_NOMAGE" )
		EndIf

		If IsInCallStack( "MNT902ORIS" )
			dbSelectArea("TAF")
			dbSetOrder(2)
			dbGoBottom()

			dbSelectArea(cTRBSGA)
			dbSetOrder(2)
			dbGoBottom()
			cLocal := If( TAF->TAF_CODNIV > (cTRBSGA)->CODPRO, TAF->TAF_CODNIV, (cTRBSGA)->CODPRO )
			If FindFunction("Soma1Old")
				cLocal := Soma1Old(AllTrim(cLocal))
			Else
				cLocal := Soma1(AllTrim(cLocal))
			EndIf
		Else
			cLocal := fRetCodNiv()
		EndIf

	   //------------------------------
	   // Inclusao de Risco na cTRBSGA
	   //------------------------------
		cCodNiv := cLocal

		nRecTRB := (cTRBSGA)->(RECNO())
		dbSelectArea(cTRBSGA)
		RecLock( cTRBSGA, .T. )
		(cTRBSGA)->FILIAL  := cFilAnt
		(cTRBSGA)->CODEST  := cCodEst
		(cTRBSGA)->CODPRO  := cCodNiv
		(cTRBSGA)->DESCRI  := cCodRis+" - "+cDesPro
		(cTRBSGA)->NIVSUP  := cNivSup
		(cTRBSGA)->RESPONS := cRespons
		(cTRBSGA)->TIPO    := _nPosRisco
		(cTRBSGA)->CODTIPO := cCodRis
		(cTRBSGA)->MODMDT  := 'X'
		(cTRBSGA)->ORDEM   := cCodNiv
		(cTRBSGA)->CARGO   := cCargo
		(cTRBSGA)->NIVEL   := nNivel + 1
		(cTRBSGA)->(MsUnlock())
		(cTRBSGA)->(dbGoTo(nRecTRB))

	   //---------------------------------------------------------------
	   // Grava Inclusao do Item na tabela de Historico de Movimentacao
	   //---------------------------------------------------------------
		dbSelectArea( "TCJ" )
		dbSetOrder( 1 ) //TCJ_FILIAL+TCJ_CODNIV+TCJ_NIVSUP+TCJ_TIPROC+DTOS(TCJ_DATA)+TCJ_HORA
		If !dbSeek( xFilial("TCJ") + cCodNiv + cNivSup + 'N' + DTOS(dDataBase) + cHora )
			RecLock("TCJ",.T.)
			TCJ->TCJ_FILIAL := xFilial("TCJ")
			TCJ->TCJ_CODNIV := cCodNiv
			TCJ->TCJ_DESNIV := cCodRis+" - "+cDesPro
			TCJ->TCJ_NIVSUP := cNivSup
			TCJ->TCJ_DATA   := dDataBase
			TCJ->TCJ_HORA   := cHora
			TCJ->TCJ_TIPROC := "N" //Inclusao
			TCJ->TCJ_NIVEL  := nNivel + 1
			TCJ->TCJ_MODMDT := "X"
			TCJ->( MsUnLock() )
		EndIf

		RecLock("TAF",.T.)
		TAF->TAF_CODNIV	:= cLocal
		TAF->TAF_ORDEM	:= cLocal
		TAF->TAF_FILIAL	:= xFilial( "TAF" )
		TAF->TAF_CODEST	:= cCodEst
		TAF->TAF_NOMNIV	:= cCodRis + " - " + cDesPro
		TAF->TAF_NIVEL	:= nNivel + 1
		TAF->TAF_NIVSUP	:= cNivSup
		TAF->TAF_MAT	:= cRespons
		TAF->TAF_INDCON	:= _nPosRisco
		TAF->TAF_CODCON	:= cCodRis
		TAF->TAF_MODMDT	:= "X"
		TAF->( MsUnLock() )

		oTree:TreeSeek(cNivSup+cCarSup+cFilAnt)
		oTree:AddItem(cCodRis+" - "+cDesPro,cCodNiv+cCargo+cFilAnt,cFolderA,cFolderB,,, 2)
	EndIf

	RestArea(aAreaTN0)

	dbSelectArea(cTRBSGA)
	dbGoto(nRecTRB)

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} ValRisMNT902
Validação para inclusão de risco. Não deverá ser incluso um risco
com uma localização sem código de ambiente.

@author Guilherme Benkendorf
@since 29/04/2014

@param nOpcx   - Indica a operação para a validação.
@obs Função utilizada na Classe TNGPG - Caso seja feito alguma alteração
considerar a utilização na classe.

@return .T.
/*/
//---------------------------------------------------------------------
Function ValRisMNT902( nOpcx, oTreeRis, cTRBRIS )

	Local lRet
	Local aTempTRB
	Local cSeekTr
	Local cLocRis
	Local lCodAmb

	Default oTreeRis := oTree
	Default cTRBRIS  := cTRBSGA

	lRet     := .T.
	aTempTRB := (cTRBRIS)->( GetArea() )
	cSeekTr  := oTreeRis:GetCargo()
	cLocRis  := SubStr( cSeekTr , 1 , 3 )
	lCodAmb  := .T.

	If nOpcx == 3 .Or. nOpcx == 4
      // Verificação para que seja incluso ou alterado o risco com a estrutura já salva.
		dbSelectArea( "TAF" )
		dbSetOrder( 2 ) //TAF_FILIAL+TAF_CODEST+TAF_CODNIV+TAF_NOMNIV
		If !dbSeek( xFilial( "TAF" ) + "001" + cLocRis )
			ShowHelpDlg( STR0101 ,  { STR0234 } , 2 , ;//"Atenção"###"Não é possível incluir riscos para itens não confirmadas."
						{ STR0247 } , 2 ) //"Salve os registros ou selecione um item já salva."
			lRet := .F.
		Else
			While TAF->TAF_INDCON <> "2"

				dbSelectArea( "TAF" )
				dbSetOrder( 2 ) //CODEST+CODPRO+FILIAL
				dbSeek( xFilial("TAF") + TAF->TAF_CODEST + TAF->TAF_NIVSUP )
			End

			If Empty( TAF->TAF_CCUSTO ) .Or. Empty( TAF->TAF_CODAMB )
				ShowHelpDlg( STR0101 ,  { STR0235 } , 2 , ;//"Atenção"###"Não é possível incluir riscos para localizações não confirmadas."
				{ STR0236 } , 4 ) //"Poderá ser incluso o 'Risco' em localizações que possuam Centro de Custo e Código do Ambiente. Caso já tenha informado, salve a estrutura."
				lRet := .F.
			EndIf
		EndIf
      //Verifica a localização que o risco será incluso e verifica se há o
      // código do Centro de Custo e do Ambiente preenchidos.
		If lRet .And. nOpcx == 3
			dbSelectArea( cTRBRIS )
			dbSetOrder( 2 ) //CODEST+CODPRO+FILIAL
			dbSeek( "001" + cLocRis )
			While (cTRBRIS)->CARGO <> "LOC"

				dbSelectArea(cTRBRIS)
				dbSetOrder( 2 ) //CODEST+CODPRO+FILIAL
				dbSeek( (cTRBRIS)->CODEST+(cTRBRIS)->NIVSUP )
			End

			If Empty( (cTRBRIS)->CC ) .Or. Empty( (cTRBRIS)->CODAMB )
				ShowHelpDlg( STR0101 ,  { STR0235 } , 2 , ;//"Atenção"###"Não é possível incluir riscos para localizações não confirmadas."
				{ STR0236 } , 4 ) //"Poderá ser incluso o 'Risco' em localizações que possuam Centro de Custo e Código do Ambiente. Caso já tenha informado, salve a estrutura."
				lRet := .F.
			EndIf
		EndIf
	EndIf
	RestArea(aTempTRB)

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902VlId
Validação para inclusão de risco. Não deverá ser incluso um risco
com uma localização sem código de ambiente.

@author Guilherme Benkendorf
@since 02/05/2014

@param nOpcx   - Número da Operação
@param oTreeRis - Objeto da arvore que seja posicionado
@param cTRBRIS - Tabela temporaria que será posicionada para avaliação na
                   TAF.
@obs Função utilizada na Classe TNGPG - Caso seja feito alguma alteração
considerar a utilização na classe.

@return .T.
/*/
//---------------------------------------------------------------------
Function MNT902VlId( nOpcx , oTreeRis, cTRBRIS )

	Local lRet
	Local cLocTr
	Local aAreaTRB
	Local aArea
	Local lCodAmb
	Local lPlanta
	Local nIndRis
	Local lDepto := NGCADICBASE( "TAF_DEPTO" , "A" , "TAF" , .F. )

	Default oTreeRis := oTree
	Default cTRBRIS  := cTRBSGA

	lRet   := .T.
	cLocTr := SubStr( oTreeRis:GetCargo(), 1 , 3 )
	aAreaTRB:= (cTRBRIS)->( GetArea() )
	aArea  := GetArea()
	lCodAmb:= .T.
	lPlanta:= IsInCallStack("MNTA905")
	nIndRis:= If( lPlanta , 7 , 8 )// CC + CODAMB


	If nModulo == 35
		If lCodAmb
			If  nOpcx == 4
            	// Posiciona na TRB a existencia de uma Risco.
				lRisco := fTRBSGARis( 1, ,oTreeRis, cTRBRIS )

				If lRisco
					dbSelectArea( "TAF")
					dbSetOrder( 2 ) //TAF_FILIAL+TAF_CODEST+TAF_CODNIV+TAF_NOMNIV
					dbSeek( xFilial( "TAF" ) + "001" + cLocTr )
               		// Se for para verificar Centro de Custo e Código de Ambiente, verifica se houve alteração.
					If TAF->TAF_CCUSTO <> M->TAF_CCUSTO .Or. TAF->TAF_CODAMB <> M->TAF_CODAMB .Or. If( lDepto , TAF->TAF_DEPTO <> M->TAF_DEPTO , .F. )
						ShowHelpDlg( STR0101 ,  { STR0237 } , 2 , ;//"Atenção"###"Há um código de Risco vínculado. Não poderá ser feito esta operação."
						{ STR0238 }    , 2 ) //"Necessário excluir o risco vínculado."
						lRet := .F.
					EndIf
               		//Verifica se a existencia de itens abaixa da Localização quando trocar a visao para Planta.
					If lRet .And. lPlanta
						lRet := fChkIDPla( cLocTr, cTRBRIS )
					EndIf
				EndIf

			EndIf

			If lRet .And. ( nOpcx == 3 .Or. nOpcx == 4 )
				If !Empty( M->TAF_CODAMB ) .And. !Empty( M->TAF_CCUSTO )
					If lRet
						dbSelectArea( "TAF" )
						dbSetOrder( 11 ) //TAF_FILIAL+TAF_CODEST+TAF_CCUSTO+TAF_CODAMB
						If dbSeek( xFilial( "TAF" ) + "001" + M->TAF_CCUSTO + M->TAF_CODAMB ) .And. ( TAF->TAF_CODNIV <> M->TAF_CODNIV )
							ShowHelpDlg( STR0101 ,  { STR0239 } , 2 , ;//"Atenção"###"Informação já cadastrada."
							{ STR0240 }    , 2 ) //"Centro de Custo e Código do Ambiente já informados, altere os códigos."
							lRet:= .F.
						EndIf
					EndIf

					If lRet
						dbSelectArea( cTRBRIS )
						dbSetOrder( nIndRis )

						If dbSeek( M->TAF_CCUSTO + M->TAF_CODAMB ) .And. AllTrim( (cTRBRIS)->CODPRO ) <> AllTrim( M->TAF_CODNIV )
							ShowHelpDlg( STR0101 ,  { STR0239 } , 2 , ;//"Atenção"###"Informação já cadastrada."
							{ STR0240 }    , 2 ) //"Centro de Custo e Código do Ambiente já informados, altere os códigos."
							lRet:= .F.
						EndIf
					EndIf
				EndIf

				If lRet .And. !Empty( M->TAF_CODAMB ) .And. Empty( M->TAF_CCUSTO )
					ShowHelpDlg( STR0101 ,  { "'" + AllTrim( NGRETTITULO("TAF_CCUSTO") ) + "' " + STR0230 }   , 2 , ;//"Atenção"###TITULO###"não informado."
					{ STR0232 }       , 3 ) //"Toda localização que contém um Código do Ambiente Físico vinculado, deverá ter preenchido o Centro de Custo."
					lRet := .F.
				EndIf
			EndIf
		EndIf

	EndIf

	RestArea( aAreaTRB )
	RestArea( aArea )

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc}  fTRBSGARis( cCondRis )
Posiciona na TRB a existencia de uma Risco.

@author Guilherme Benkendorf
@since 27/05/2014

@param nCheck - Indice de comparação:
         1 - Centro de Custo e Código de Ambiente
         2 - Função
         3 - Tarefa
@param cLocTr - Indica a localização do arvore que será verificada
@param oTreeRis - Indica o objeto da arvore logica a ser verificada
@param cTRBRIS - Indica o Arquivo temporario que será trabalhado

@return lRisco .T./.F.
/*/
//---------------------------------------------------------------------
Static Function fTRBSGARis( nCheck, cLocTr, oTreeRis, cTRBRIS )

	Local lRisco := .F.
	Local cCondRis
	Local nMaxNivel
	Local nNivel

	Default oTreeRis:= oTree
	Default cTRBRIS := cTRBSGA
	Default cLocTr := SubStr( oTreeRis:GetCargo(), 1 , 3 )

	Do Case
	Case nCheck == 1 ; cCondRis := "FUN/TAR"
	Case nCheck == 2 ; cCondRis := "TAR"
	Case nCheck == 3 ; cCondRis := ""
	End Case

   //------------------------------------------------------
   // Verifica se há um risco vinculado na identificação
   //------------------------------------------------------
	aLocaliz  := {cLocTr}
	nMaxNivel := 1
	nNivel    := 1
	While nNivel <= nMaxNivel
		dbSelectArea( cTRBRIS )
		dbSetOrder( 1 ) //CODEST+NIVSUP+FILIAL
		dbSeek( "001" + aLocaliz[nNivel] + cFilAnt )
		While (cTRBRIS)->( !EoF() ) .And. (cTRBRIS)->CODEST == "001" .And. ;
				(cTRBRIS)->NIVSUP == aLocaliz[nNivel] .And.;
				(cTRBRIS)->FILIAL == cFilAnt

			If AllTrim( (cTRBRIS)->CARGO ) == "RIS" .And. Empty( (cTRBRIS)->DELETADO )
				lRisco := .T.
				Exit
			Else
				If Alltrim( (cTRBRIS)->CARGO ) $ cCondRis
					aAdd( aLocaliz , AllTrim( (cTRBRIS)->CODPRO ) )
					nMaxNivel++
				EndIf
			EndIf
			(cTRBRIS)->( dbSkip() )
		End
		If lRisco
			Exit
		EndIf
		nNivel++
	End

Return lRisco
//---------------------------------------------------------------------
/*/{Protheus.doc}  MNT902VlRe( nOpc , cOpe )

Função de condicionamento para a inclusão/alteração/exclusão de
função/tarefa.

@author Guilherme Benkendorf
@since 27/05/2014

@param cCondRis - Condição para localizar

@return lRisco .T./.F.
/*/
//---------------------------------------------------------------------
Static Function MNT902VlRe(nOpc , cOpe, cCodRel, oObjTree, cAliPar )

	Local nCheck := If( cOpe == "FUN", 2 , 3 )
	Local cLocTr
	Local lRet := .T.
	Local lCodAmb:= NGCADICBASE('TAF_CODAMB','D','TAF',.F.)

	Default oObjTree:= oTree
	Default cAliPar := cTRBSGA

	cLocTr := SubStr( oObjTree:GetCargo(), 1 , 3 )

	If ValType(cCodRel) == "U"
		dbSelectArea( cAliPar )
		dbSetOrder( 2 ) //CODEST+CODPRO+FILIAL
		dbSeek( cCodEst + cLocTr + cFilAnt )
		If cOpe == "FUN"
			cCodRel := SubStr( (cAliPar)->CODTIPO, 1, Len( SRJ->RJ_FUNCAO ) )
		ElseIf cOpe == "TAR"
			cCodRel := SubStr( (cAliPar)->CODTIPO, 1, Len( TN5->TN5_CODTAR ) )
		EndIf

	EndIf

	If nOpc <> 2
		If nOpc <> 5
			lRet := ExistCpo(If(cOpe == "TAR","TN5","SRJ"), cCodRel )
		EndIf

		If lRet .And. nOpc <> 3 .And. lCodAmb
			If fTRBSGARis( nCheck,,oObjTree,cAliPar ) .And. (cAliPar)->CODTIPO <> cCodRel
				ShowHelpDlg( STR0101 ,  { STR0237 } , 2 , ;//"Atenção"###"Há um código de Risco vínculado. Não poderá ser feito esta operação."
				{ STR0238 }    , 2 ) //"Necessário excluir o risco vínculado."
				lRet := .F.
			EndIf
		EndIf
	EndIf

Return lRet
//---------------------------------------------------------------------
/*/{Protheus.doc}  MNT902VlRe( nOpc , cOpe )

Função auxiliar de verificação do nivel da localização.
Analisa se há algum item abaixo da localização, se houver será recusado
a alteração.

@author Guilherme Benkendorf
@since 27/05/2014

@param cLocTr - Codigo da localização
@param cTRBRIS - Nome do arquivo temporario da estrutura.

@return lRet .T./.F.
/*/
//---------------------------------------------------------------------
Static Function fChkIDPla( cLocTr, cTRBRIS )

	Local aArea := GetArea()
	Local lRet  := .T.
	dbSelectArea( "TAF")
	dbSetOrder( 2 ) //TAF_FILIAL+TAF_CODEST+TAF_CODNIV+TAF_NOMNIV
	If dbSeek( xFilial( "TAF" ) + "001" + cLocTr ) .And. M->TAF_PLANTA <> TAF->TAF_PLANTA
         // Posiciona na TRB a existencia de um item.
		dbSelectArea(cTRBRIS)
		dbSetOrder( 1 )//CODEST+NIVSUP
		dbSeek( "001" + TAF->TAF_CODNIV )
		While (cTRBRIS)->( !EoF() ) .And. (cTRBRIS)->CODEST == "001" .And. (cTRBRIS)->NIVSUP == TAF->TAF_CODNIV
			If Empty((cTRBRIS)->DELETADO)
				ShowHelpDlg( STR0101 ,  { STR0248 } , 2 , ;//"Atenção"###"Troca da visão da localização inválida."
				{ STR0249 }    , 2 ) //"Para efetuar a troca, deve excluir todos os itens abaixo deste nível"
				lRet := .F.
				Exit
			EndIf
			(cTRBRIS)->( dbSkip() )
		End
	EndIf

	RestArea( aArea )
Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} SgaIncRes

Função para Inclusão do Residuo no TRB.

@type function

@source MNTA902.prx

@author Juliani Schlickmann Damasceno
@since 06/07/2014

@param cCodRes  , Caracter , Código do Resíduo
@param cNivSup  , Caracter , Nível no qual o perigo deve ser incluído
@param cCarSup  , Caracter , Tipo do Nível superior do período
@param cRespons , Caracter , Responsável pelo nível
@param lLoadOco , Lógico   , Indica se deve incluir as ocorrências
@param lIncRe   , Lógico   , Indica se é inclusão de resíduo

@sample SgaIncRes

@return Lógico, Sempre Verdadeiro
/*/
//---------------------------------------------------------------------
Static Function SgaIncRes( cCodRes, cNivSup, cCarSup, cRespons, nLoadOco , lIncRe )

	Local cCodDesc, cDesPro

	Local aArea     := ( cTRBSGA )->( GetArea() )
	Local aAreaTAV  := TAV->( GetArea() ) //Pega a area da tabela de Resíduos por processos
	Local cCargo    := "RES"
	Local lInclui	:= .F.
	Local lDelet    := .T.

	Default cCodRes  := ""
	Default cRespons := ( cTRBSGA )->RESPONS
	Default nLoadOco := 1
	Default lIncRe	 := .F.

	dbSelectArea(cTRBSGA)
	dbSetOrder(7)
	If !dbSeek(__cTpRes + Padr( cCodRes, Len( (cTRBSGA)->CODTIPO ) ) + cCodEst + cNivSup)
		lInclui := .T.
	Else
		While ( cTRBSGA )->( !EoF() ) .And. (cTRBSGA)->FILIAL == xFilial("TAF");
									  .And. Padr( cCodRes, Len( (cTRBSGA)->CODTIPO ) ) == (cTRBSGA)->CODTIPO;
									  .And. cCodEst == (cTRBSGA)->CODEST;
									  .And. cNivSup == (cTRBSGA)->NIVSUP .And. lDelet
		//Caso registro existente, não era feito a verificação da exclusão do registro,
		//assim não permitindo inclui-lo, mesmo tendo o anterior como deletado.
			If !Empty( (cTRBSGA)->DELETADO ) .And. lDelet
				lInclui := .T.
			ElseIf lIncRe
				lDelet := .F.
				lInclui := .F.
				Help(" ",1,"JAEXISTINF")
			Else
				Exit
			EndIf
			( cTRBSGA )->( dbSkip() )
		End

	EndIf

	If lInclui //Verifica inclusão.

		If IsInCallStack( "MNT902ORES" )

			If cLocal == "000"

				dbSelectArea( "TAF" )
				dbSetOrder( 2 )
				dbGoBottom()

				cLocal := TAF->TAF_CODNIV

				If Empty( cLocal )
					dbSelectArea( cTRBSGA )
					dbSetOrder( 2 )
					dbGoBottom()

					cLocal := ( cTRBSGA )->CODPRO
				EndIf

				If FindFunction( "Soma1Old" )
					cLocal := Soma1Old( AllTrim( cLocal ) )
				Else
					cLocal := Soma1( AllTrim( cLocal ) )
				EndIf

			Else

				dbSelectArea( cTRBSGA )
				dbSetOrder( 2 )
				dbGoBottom()
				cLocal := ( cTRBSGA )->CODPRO

				If FindFunction( "Soma1Old" )
					cLocal := Soma1Old( AllTrim( cLocal ) )
				Else
					cLocal := Soma1( AllTrim( cLocal ) )
				EndIf

			EndIf

		Else

			cLocal := fRetCodNiv()

		EndIf

		cCodNiv  := cLocal
		cDesPro  := NGSEEK( "SB1" , cCodRes , 1 , "B1_DESC" )
		cCodDesc := cCodRes + " - " + ( cDesPro )
		nNivel++

		dbSelectArea( cTRBSGA )
		RecLock( (cTRBSGA), .T. )
		( cTRBSGA )->FILIAL  := cFilAnt
		( cTRBSGA )->CODEST  := cCodEst
		( cTRBSGA )->CODPRO  := cCodNiv
		( cTRBSGA )->DESCRI  := cCodDesc
		( cTRBSGA )->NIVSUP  := cNivSup
		( cTRBSGA )->RESPONS := cRespons
		( cTRBSGA )->TIPO    := __cTpRes
		( cTRBSGA )->CODTIPO := cCodRes
		( cTRBSGA )->ORDEM   := cCodNiv
		( cTRBSGA )->CARGO   := cCargo
		( cTRBSGA )->NIVEL   := nNivel

		fTrbModulo() // Efetua marcacao do modulo na tabela temporaria da Tree

		( cTRBSGA )->( MsUnlock() )

		If Type("oLgRes") == "O"
			nLgRes++
			oLgRes:Refresh()
		EndIf

		If oTree:TreeSeek( cNivSup + cCarSup + cFilAnt )
			oTree:AddItem( cCodDesc, cCodNiv + cCargo + cFilAnt, "NG_ICO_RESIDUO", "NG_ICO_RESIDUO", ,  , 2 )
		EndIf

	EndIf

	If nLoadOco > 0
      //Carrega a ocorrência de residuo
		OcoResSGA( cCodRes, ( cTRBSGA )->CODPRO, Trim( cNivSup ), nLoadOco <> 2 )
	EndIf

	nNivel--
	RestArea( aAreaTAV )
	RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc}  fTrbModulo

Função para definição do módulo usado

@author Juliani Schlickmann Damasceno
@since 13/06/2014
/*/
//---------------------------------------------------------------------
Static Function fTrbModulo()

	If nMod902 == 19
		( cTRBSGA )->MODMNT  := "X"
	ElseIf nMod902 == 35
		( cTRBSGA )->MODMDT  := "X"
	ElseIf nMod902 == 56
		( cTRBSGA )->MODSGA  := "X"
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902ORES

Função para Inclusão/ Alteração e visualização da definição de resíduo

@author Juliani Schlickmann Damasceno
@since 11/07/2014

@param nOpcx - Indica o tipo de operação

@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902ORES( nOpcx )

	Local cGetCargo   := oTree:GetCargo()
	Local aAreas      := {}
	Local cLocRes     := ""
	Local nRecnoTAX   := 0
	Local nArea

	Local aVar        := {}

	aAdd( aVar, If( Type( "Inclui" ) == "L", Inclui,.T. ) )
	aAdd( aVar, If( Type( "Altera" ) == "L", Altera,.T. ) )
	aAdd( aVar, If( Type( "aGets" ) == "A" , aClone(aGets) , Nil ) )
	aAdd( aVar, If( Type( "aTela" ) == "A" , aClone(aTela) , Nil ) )

	aAreas := {GetArea(),;
			  (cTRBSGA)->(GetArea()),;
					TAX->(GetArea()),;
					TB0->(GetArea()),;
					TAV->(GetArea()),;
					TAF->(GetArea())}

	//Verifica se o nível não foi retirado da árvore
	dbSelectArea( "TAX" )
	dbSetOrder( 1 )
	If nOpcx == 3 .Or. dbSeek( xFilial( "TAX" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TAX->TAX_CODRES ) ) )
	   //Se for inclusão pega a localização na árvore
		If nOpcx == 3
			SetInclui()
			cLocRes := SubStr( cGetCargo , 1 , 3 )
		Else
			dbSelectArea( cTRBSGA )
			dbSetOrder( 2 )
			If dbSeek( "001" + SubStr( cGetCargo , 1 , 3 ) + cFilAnt )
				dbSelectArea( "TAX" )
				dbSetOrder( 1 )
				If dbSeek( xFilial( "TAX" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TAX->TAX_CODRES ) ) )
					nRecnoTAX   := TAX->( Recno() )
					cLocRes     := ( cTRBSGA )->NIVSUP
					SetAltera()
				EndIf
			EndIf
		EndIf

		If ( nOpcx <> 3 .And. !Empty( nRecnoTAX ) )
			Sg140Pro( "TAX" , nRecnoTAX , nOpcx , { cLocRes }, .T.  )
		Else
	      //Chama a rotina de inclusão de definição de resíduos
			If Sg140Pro( "TAX" , nRecnoTAX , nOpcx , { cLocRes }, .T.  )[1]

				If nOpcx == 3
					oTree:TreeSeek( cGetCargo )
					SgaIncRes( TAX->TAX_CODRES , cLocRes , SubStr( cGetCargo , 4 , 3 ) )
				EndIf

			EndIf

		EndIf

		Inclui := aVar[1]
		Altera := aVar[2]
		aGets  := aVar[3]
		aTela  := aVar[4]
	Else
		MsgInfo( "Definição de Resíduos não localizada, favor atualizar a Árvore Lógica." )
	EndIf

   //Restaura a area das tabelas de ocorrência, residuos do processo e ocorrências do processo
	For nArea := Len(aAreas) To 1 Step -1
		RestArea(aAreas[nArea])
	Next nArea

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SgaVincTp

Função para a vinculação de: - Resíduo
                         - Aspecto
                         - Plano Emergencial
na Árvore Lógica.

@author Juliani Schlickmann Damasceno
@since 24/06/2014

@param cTipo    - Tipo do item a ser vinculado

@return .T.
/*/
//---------------------------------------------------------------------
Static Function SgaVincTp( cTipo )

	Local oDlgRes, oPnlRes
	Local lGrava   := .F.
	Local cCarSup  := SubStr( oTree:GetCargo() , 4 , 3 )
	Local cCodigo  := ""
	Local cNome    := ""
	Local cTitulo  := ""
	Local cF3      := ""

	Private oNome

	If cTipo == __cTpRes
		cCodigo  := Space( TAMSX3( "TAX_CODRES" )[1] )  // Codigo do Residuo
		cNome    := Space( TAMSX3( "B1_DESC"   )[1] )   // Descrição Residuo
		cTitulo  := STR0252
		cF3      := "TAX"
	ElseIf cTipo == __cTpAsp
		cCodigo  := Space( TAMSX3( "TA4_CODASP" )[1] )  // Codigo do Aspecto
		cNome    := Space( TAMSX3( "TA4_DESCRI" )[1] ) // Descrição do Aspecto
		cTitulo  := STR0251
		cF3      := "TA4"
	ElseIf cTipo == __cTpPE
		cCodigo  := Space( TAMSX3( "TBB_CODPLA" )[1] ) // Codigo do Plano Emergencial
		cNome    := Space( TAMSX3( "TBB_DESPLA" )[1] ) // Descrição do Plano Emergencial
		cTitulo  := STR0250
		cF3      := "TBB"
	EndIf

	cLocal := SubStr( oTree:GetCargo(), 1, 3 ) // Recupera codigo que indica a posição do item na árvore

	Define MsDialog oDlgRes From 0,0 To 120,580 Title cTitulo Pixel

		oPnlRes := TPanel():New( 00, 00, , oDlgRes, , , , , , 580, 120, .F., .F. )
		oPnlRes:Align := CONTROL_ALIGN_ALLCLIENT

		@ 8,004 Say OemToAnsi( cTitulo ) Size 37,7 Of oPnlRes Pixel

		@ 7,043 MsGet cCodigo Size 080,08 Of oPnlRes Pixel Picture "@!";
			Valid ( ExistSGA( cTipo, cCodigo ) .And. ;
			VldVinc( cCodigo, @cNome, cLocal, cTipo ) ) F3 cF3 HasButton

		@ 7,125 MsGet oNome Var cNome Size 160,08 Of oPnlRes Pixel When .F.

		Define sButton From 200,200 Type 1 Enable Of oPnlRes

	Activate MsDialog oDlgRes ON INIT EnchoiceBar( oDlgRes, { || ( lGrava := .T., oDlgRes:End() ) },{ || lGrava := .F., oDlgRes:End() } ) Centered

	If lGrava
		If cTipo == __cTpRes // Residuo
			oTree:TreeSeek( oTree:GetCargo() )
			SgaIncRes( cCodigo , cLocal , cCarSup,,,.T. ) // Inclui residuo na tree e na tabela temporaria TRBSGA

		ElseIf cTipo == __cTpAsp // Aspecto
			oTree:TreeSeek( oTree:GetCargo() )
			SgaIncAsp( cCodigo , cLocal , cCarSup )// Inclui aspecto na tree e na tabela temporaria TRBSGA

		ElseIf cTipo == __cTpPE // Plano Emergencial
			oTree:TreeSeek( oTree:GetCargo() )
			SgaIncPE( cCodigo , cLocal , cCarSup )// Inclui plano na tree e na tabela temporaria TRBSGA

		EndIf
	EndIf

Return lGrava

//---------------------------------------------------------------------
/*/{Protheus.doc} ExistSGA
Função para a verificação de existência do:  - Resíduo
                                       - Aspecto
                                       - Plano Emergencial

@author Juliani Schlickmann Damasceno
@since 24/06/2014

@param cTipo    - Tipo do item a ser vinculado
      cCodigo - Código do item a ser vinculado

@return .T.
/*/
//---------------------------------------------------------------------
Static Function ExistSGA( cTipo, cCodigo )

	Local lExistCPO := .T.

	If cTipo == __cTpRes // Resíduo
		lExistCPO   := ExistCpo( "TAX", cCodigo, 1 )
	ElseIf cTipo == __cTpAsp // Aspecto
		lExistCPO   := ExistCpo( "TA4", cCodigo, 1 )
	ElseIf cTipo == __cTpPE // Plano Emergencial
		lExistCPO   := ExistCpo( "TBB", cCodigo, 1 )
	EndIf

Return lExistCPO

//---------------------------------------------------------------------
/*/{Protheus.doc}  VldVinc

Função para a verificação de existência do:  - Resíduo
                                       	     - Aspecto
                                             - Plano Emergencial
no nivel setado da Árvore Lógica.

@author Juliani Schlickmann Damasceno
@since 12/06/2014

@param cCodigo - Resíduo
      cNome    - Nome do Item a cer vinculado
      cLocal   - Nível onde vai ser incluído
      cTipo    - Tipo do item a ser incluido

@return lRet
/*/
//---------------------------------------------------------------------
Static Function VldVinc( cCodigo, cNome, cLocal, cTipo )

	Local aArea := ( cTRBSGA )->( GetArea() )
	Local lRet  := .T.

	dbSelectArea( cTRBSGA )
	dbSetOrder( 7 ) // "TIPO+CODTIPO+CODEST+NIVSUP+FILIAL"

	If cTipo == __cTpRes //Se for resíduo

		If dbSeek( __cTpRes + Padr( cCodigo, Len( ( cTRBSGA )->CODTIPO ) ) + "001" + cLocal )
			If Empty( ( cTRBSGA )->DELETADO ) //Verifica se o resíduo encontrado não está deletado
				Help( " ", 1, "JAEXISTINF" )
				lRet := .F.
			EndIf
		EndIf

	ElseIf cTipo == __cTpAsp //Se for aspecto

		If dbSeek( __cTpAsp + Padr( cCodigo, Len( ( cTRBSGA )->CODTIPO ) ) + "001" + cLocal )
			If Empty( ( cTRBSGA )->DELETADO ) //Verifica se o aspecto encontrado não está deletado
				Help( " ", 1, "JAEXISTINF" )
				lRet := .F.
			EndIf
		EndIf

	ElseIf cTipo == __cTpPE //Se for Plano Emergencial

		If dbSeek( __cTpPE + Padr( cCodigo, Len( ( cTRBSGA )->CODTIPO ) ) + "001" + cLocal )
			If Empty( ( cTRBSGA )->DELETADO ) //Verifica se o plano encontrado não está deletado
				Help( " ", 1, "JAEXISTINF" )
				lRet := .F.
			EndIf
		EndIf

	EndIf

	If lRet
		If cTipo == __cTpRes
			cNome := NGSEEK( "SB1", cCodigo, 1, "SB1->B1_DESC" )
		ElseIf cTipo == __cTpAsp
			cNome := NGSEEK( "TA4", cCodigo, 1, "TA4->TA4_DESCRI" )
		ElseIf cTipo == __cTpPE
			cNome := NGSEEK( "TBB", cCodigo, 1, "TBB->TBB_DESPLA" )
		EndIf
		oNome:Refresh()
	EndIf

	RestArea( aArea )

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc}  InitSGA

Criação dos botões e tabelas temporárias exclusivas do módulo de
Gestão Ambiental.

@author Juliani Schlickmann Damasceno
@since 24/06/2014

/*/
//---------------------------------------------------------------------
Static Function InitSGA(aTblTemp)

	Local aCampos := {}
	Local aIndTAK := {} //Array de Indice - cTRBTAK
	Local aIndTAP := {} //Array de Indice - cTRBTAP
	Local aIndTAL := {} //Array de Indice - cTRBTAL

	Local oTmpTal
	Local oTmpTap
	Local oTmpTak

   // Variaveis
	_SetOwnerPrvt( "oGetPart")
	_SetOwnerPrvt( "oGetFunc" )           ;   _SetOwnerPrvt( "oGetDocRe" )
	_SetOwnerPrvt( "aHeadPart", Array(0) ) ;  _SetOwnerPrvt( "aColsPart", Array(0) )
	_SetOwnerPrvt( "aHeadFun" , Array(0) ) ;  _SetOwnerPrvt( "aColsFun" , Array(0) )
	_SetOwnerPrvt( "aHeadDoc" , Array(0) ) ;  _SetOwnerPrvt( "aColsDoc" , Array(0) )
	_SetOwnerPrvt( "oGetResLoc")
	_SetOwnerPrvt( "oGetCrit" )
	_SetOwnerPrvt( "oGetTpDest" )
	_SetOwnerPrvt( "oGetPolu")
	_SetOwnerPrvt( "oGetMoni" )
	_SetOwnerPrvt( "oGetDesIn" )
	_SetOwnerPrvt( "aHeadResLoc", Array(0) )  ;  _SetOwnerPrvt( "aColsResLoc", Array(0) )
	_SetOwnerPrvt( "aHeadCrit" , Array(0) )   ;  _SetOwnerPrvt( "aColsCrit" , Array(0) )
	_SetOwnerPrvt( "aHeadTpDest" , Array(0) ) ;  _SetOwnerPrvt( "aColsTpDest" , Array(0) )
	_SetOwnerPrvt( "aHeadPolu", Array(0) )    ;  _SetOwnerPrvt( "aColsPolu", Array(0) )
	_SetOwnerPrvt( "aHeadMoni" , Array(0) )   ;  _SetOwnerPrvt( "aColsMoni" , Array(0) )
	_SetOwnerPrvt( "aHeadDesIn" , Array(0) )  ;  _SetOwnerPrvt( "aColsDesIn" , Array(0) )
	_SetOwnerPrvt( "oGetAspLoc")
	_SetOwnerPrvt( "oGetAspReq" )
	_SetOwnerPrvt( "aHeadAspLoc", Array(0) )  ;  _SetOwnerPrvt( "aColsAspLoc", Array(0) )
	_SetOwnerPrvt( "aHeadAspReq" , Array(0) ) ;  _SetOwnerPrvt( "aColsAspReq" , Array(0) )
	_SetOwnerPrvt( "oGetPlaLoc" )
	_SetOwnerPrvt( "oGetAcoes" )
	_SetOwnerPrvt( "oGetPartic")
	_SetOwnerPrvt( "oGetConExt" )
	_SetOwnerPrvt( "oGetEquMat" )
	_SetOwnerPrvt( "aHeadPlaLoc", Array(0) )  ;  _SetOwnerPrvt( "aColsPlaLoc", Array(0) )
	_SetOwnerPrvt( "aHeadAcoes" , Array(0) )  ;  _SetOwnerPrvt( "aColsAcoes" , Array(0) )
	_SetOwnerPrvt( "aHeadPartic" , Array(0) ) ;  _SetOwnerPrvt( "aColsPartic" , Array(0) )
	_SetOwnerPrvt( "aHeadConExt", Array(0) )     ;  _SetOwnerPrvt( "aColsConExt", Array(0) )
	_SetOwnerPrvt( "aHeadEquMat" , Array(0) ) ;  _SetOwnerPrvt( "aColsEquMat" , Array(0) )
	_SetOwnerPrvt( "oGetDestOc" )
	_SetOwnerPrvt( "aHeadDestOc" , Array(0) ) ;  _SetOwnerPrvt( "aColsDestOc" , Array(0) )
	_SetOwnerPrvt( "oGetAcondi" )
	_SetOwnerPrvt( "oGetRespAc" )
	_SetOwnerPrvt( "aHeadAcondi", Array(0) )  ;  _SetOwnerPrvt( "aColsAcondi", Array(0) )
	_SetOwnerPrvt( "aHeadRespAc" , Array(0) ) ;  _SetOwnerPrvt( "aColsRespAc" , Array(0) )
	_SetOwnerPrvt( "oGetOcoEnv" )
	_SetOwnerPrvt( "oGetResOco" )
	_SetOwnerPrvt( "aHeadOcoEnv", Array(0) )  ;  _SetOwnerPrvt( "aColsOcoEnv", Array(0) )
	_SetOwnerPrvt( "aHeadResOco" , Array(0) ) ;  _SetOwnerPrvt( "aColsResOco" , Array(0) )


   // Botoes opcoes de acao
	_SetOwnerPrvt( "oBtnIncRe"  ) ; _SetOwnerPrvt( "oBtnAtvIna" )
	_SetOwnerPrvt( "oBtnVinRes" ) ; _SetOwnerPrvt( "oBtnVisRes" )

   // Objetos Legenda
	_SetOwnerPrvt( "oLgRes" ) ; _SetOwnerPrvt( "oLgOcR"   )
	_SetOwnerPrvt( "oLgAsp" ) ; _SetOwnerPrvt( "oLgDes"   )
	_SetOwnerPrvt( "oLgPla" ) ; _SetOwnerPrvt( "oLgOPE"   )

	_SetOwnerPrvt( "oLgFMRPC", 0  )  ; _SetOwnerPrvt( "oLgFMRAP", 0   )
	_SetOwnerPrvt( "oLgFMRAR", 0  )  ; _SetOwnerPrvt( "oLgFMRNC", 0   )
	_SetOwnerPrvt( "oLgFMRRB", 0  )

   // Contadores Legenda
	_SetOwnerPrvt( "nLgAsp", 0 )     ; _SetOwnerPrvt( "nLgDes", 0  )
	_SetOwnerPrvt( "nLgOPE", 0 )     ; _SetOwnerPrvt( "nLgRes", 0  )
	_SetOwnerPrvt( "nLgOcR", 0 )     ; _SetOwnerPrvt( "nLgPla", 0  )

	_SetOwnerPrvt( "nLgFMRPC", 0  )  ; _SetOwnerPrvt( "nLgFMRAP", 0   )
	_SetOwnerPrvt( "nLgFMRAR", 0  )  ; _SetOwnerPrvt( "nLgFMRNC", 0   )
	_SetOwnerPrvt( "nLgFMRRB", 0  )

   //Botões nível: Residuos
	_SetOwnerPrvt( "oBtnAltRe" ) ; _SetOwnerPrvt( "oBtnExcRe" )
	_SetOwnerPrvt( "oBtnIncOc" ) ;   _SetOwnerPrvt( "oBtnViOco" )
	_SetOwnerPrvt( "oBtnInFMR" ) ; _SetOwnerPrvt( "oBtnViFMR" )
	_SetOwnerPrvt( "oBtnAlFMR" )

   //Botões Aspecto
	_SetOwnerPrvt( "oBtnInAsp"  ) ;  _SetOwnerPrvt( "oBtnAlAsp"  )
	_SetOwnerPrvt( "oBtnViAsp"  ) ;  _SetOwnerPrvt( "oBtnExAsp"  )
	_SetOwnerPrvt( "oBtnApDes"  ) ;  _SetOwnerPrvt( "oBtnCpAsp"  )
	_SetOwnerPrvt( "oBtnVinAsp" )

   //Botões Plano Emergencial
	_SetOwnerPrvt( "oBtnInPla" )  ; _SetOwnerPrvt( "oBtnViPla"  )
	_SetOwnerPrvt( "oBtnAlPla" )  ; _SetOwnerPrvt( "oBtnExPla"  )
	_SetOwnerPrvt( "oBtnInOPE" )  ; _SetOwnerPrvt( "oBtnAlOPE"  )
	_SetOwnerPrvt( "oBtnViOPE" )  ; _SetOwnerPrvt( "oBtnExOPE"  )
	_SetOwnerPrvt( "oBtnVinPla" ) ;  _SetOwnerPrvt( "oBtnRespOco" )

   //Botões Plano Simulação
	_SetOwnerPrvt( "oBtnRetSimu" )
	_SetOwnerPrvt( "oBtnConSimu" )

   //Alias temporários SGAA100
	_SetOwnerPrvt( "cTRBTAP", GetNextAlias() )
	_SetOwnerPrvt( "cTRBTAK", GetNextAlias() )
	_SetOwnerPrvt("cTRBTAL",  GetNextAlias() )

   // Define Tabelas temporarias especifica para o modulo

	aAdd( aCampos, { "CODNIV"  , "C" , Len(TAK->TAK_CODNIV)  , 0 } )
	aAdd( aCampos, { "CODFUN"  , "C" , Len(TAK->TAK_CODFUN)  , 0 } )
	aAdd( aCampos, { "MAT"     , "C" , Len(TAK->TAK_MAT)     , 0 } )
	aAdd( aCampos, { "OPERAC"  , "C" , 01                    , 0 } )

	aIndTAK  := {{ "CODNIV","CODFUN","MAT" }}
	oTmpTak  := fCriaTRB(cTRBTAK,aCampos,aIndTAK)

	aAdd( aTblTemp, { cTRBTAK, oTmpTak } )

	aCampos := {}

	aAdd( aCampos, { "CODNIV"  , "C" , Len(TAK->TAK_CODNIV)  , 0 } )
	aAdd( aCampos, { "CODFUN"  , "C" , Len(TAK->TAK_CODFUN)  , 0 } )
	aAdd( aCampos, { "MAT"     , "C" , Len(TAK->TAK_MAT)     , 0 } )
	aAdd( aCampos, { "OPERAC"  , "C" , 01                    , 0 } )

	aIndTAP  := {{ "CODNIV","CODFUN","MAT" }}
	oTmpTap  := fCriaTRB(cTRBTAP,aCampos,aIndTAP)

	aAdd( aTblTemp, { cTRBTAP, oTmpTap } )

	aCampos := {}

	aAdd(aCampos,{"FILIAL"  ,"C", __nSizeFil, 0})
	aAdd(aCampos,{"CODEST"  ,"C", Len(TAL->TAL_CODEST), 0})
	aAdd(aCampos,{"CODNIV"  ,"C", Len(TAL->TAL_CODNIV), 0})
	aAdd(aCampos,{"FILDOC"  ,"C", Len(TAL->TAL_FILDOC), 0})
	aAdd(aCampos,{"DOCTO"   ,"C", Len(TAL->TAL_DOCTO) , 0})
	aAdd(aCampos,{"SITUAC"  ,"C", 01 , 0})

	aIndTAL  := {{"FILIAL","CODEST","CODNIV","FILDOC","DOCTO"}}
	oTmpTal  := fCriaTRB(cTRBTAL,aCampos,aIndTAL)

	aAdd( aTblTemp, { cTRBTAL, oTmpTal } )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaOprOcR

Função para a inclusão e visualização da ocorrência de resíduo

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param nOpc - Opção, se é inclusão ou visualização

/*/
//---------------------------------------------------------------------
Static Function SgaOprOcR( nOpc )

	Local cCargo := SubStr( oTree:GetCargo(), 1, 3 )
	Local cTmpTRB := cTRBSGA

	Local lSgaOprOcR := .F.

   	// Posiciona no resíduo da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( "001" + cCargo + cFilAnt )

		If nOpc <> 3

			dbSelectArea("TB0")
			dbSetOrder(1)
			dbSeek(xFilial("TB0")+AllTrim((cTRBSGA)->CODTIPO))
         	// Chama a tela de visualização da ocorrência de resíduo
			Sg150Pro( "TB0", TB0->( Recno() ), 2, Padr(( cTRBSGA )->CODTIPO, Len(TB0->TB0_CODRES)), 0,( cTRBSGA )->NIVSUP )
		Else
		// Valida se o registro existe na TAX
			dbSelectArea( "TAX" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TAX" ) + Padr(( cTRBSGA )->CODTIPO, Len(TB0->TB0_CODRES)) )
				dbSelectArea( cTRBSGA )
	         	// Insere ocorrencia repassando o Pai do residuo posicionado
				lSgaOprOcR := Sg150Pro( "TB0", TB0->( Recno() ), 3, Padr(( cTRBSGA )->CODTIPO, Len(TB0->TB0_CODRES)), 0, ( cTRBSGA )->NIVSUP )
			Else
				MsgInfo( "Definição de Resíduos não localizada, favor atualizar a Árvore Lógica." )
			EndIf
		EndIf

		cTRBSGA := cTmpTRB

		If lSgaOprOcR
			SgaIOcRes( ( cTRBSGA )->CODPRO ) // Insere ocorrencia repassando o residuo como Pai
		EndIf

	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaOprFMR

Função para a inclusão e visualização de FMR

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param nOpc

/*/
//---------------------------------------------------------------------
Static Function SgaOprFMR( nOpc )

	Local cCargo  := SubStr( oTree:GetCargo(), 1, 3 )
	Local cCargoFMR := ""
	Local cTmpTRB := cTRBSGA
	Local aDadosFmr, nRecno := 0
	Local cFolderA := ""

	Local lSgaOpr := .F.
	Local lLocDef := .T.

   	// Posiciona no resíduo da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )

	If dbSeek( "001" + cCargo + cFilAnt )
		// Valida existência da Definição

		If nOpc == 3
			dbSelectArea( "TAX" )
			dbSetOrder( 1 )

			If !( lLocDef := dbSeek( xFilial( "TAX" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TDC->TDC_CODRES ) ) ) )
				MsgInfo( "Definição de Resíduos não localizada, favor atualizar a Árvore Lógica." )
			EndIf

		EndIf

		If lLocDef
			dbSelectArea( cTRBSGA )

			If nOpc <> 3
				dbSelectArea("TDC")
				dbSetOrder(1)
				dbSeek(xFilial("TDC")+AllTrim((cTRBSGA)->CODTIPO))
				nRecno := TDC->( Recno() )
			Else
				aDadosFmr := {{"TDC_DEPTO",( cTRBSGA )->NIVSUP},{"TDC_CODRES",Padr(( cTRBSGA )->CODTIPO, Len(TDC->TDC_CODRES))}}
			EndIf

			aRotSetOpc( "TDC" , nRecno , nOpc )

			lSgaOpr := SG510ALT( "TDC", nRecno, nOpc, aDadosFmr, ( nOpc == 4 .And. TDC->TDC_STATUS == "4" ) )

			cTRBSGA := cTmpTRB

			If nOpc == 3 .And. lSgaOpr
				SgaIFMR( ( cTRBSGA )->CODPRO ) // Insere ocorrencia repassando o residuo como Pai
			Else

				If nOpc == 4 .And. lSgaOpr

					If TDC->TDC_STATUS == "5" .Or. TDC->TDC_STATUS == "7"
						oTree:BeginUpdate()
						oTree:SetDisable()

	               		// Retira o desempenho ambiental da árvore
						SgaDelTp( ( cTRBSGA )->CODPRO, .F. )

						oTree:EndUpdate()
						oTree:SetEnable()
					Else

						If TDC->TDC_STATUS == "1"

							cFolderA := "NG_ICO_FMRPC"
							RecLock(cTRBSGA, .F.)
							( cTRBSGA )->CARGO := "FM1"
							( cTRBSGA )->(MsUnlock())

						ElseIf TDC->TDC_STATUS == "2"

							cFolderA := "NG_ICO_FMRAP"
							RecLock(cTRBSGA, .F.)
							( cTRBSGA )->CARGO := "FM2"
							( cTRBSGA )->(MsUnlock())

						ElseIf TDC->TDC_STATUS == "3" // Armazem

							cFolderA := "NG_ICO_FMRAR"
							RecLock(cTRBSGA, .F.)
							( cTRBSGA )->CARGO := "FM3"
							( cTRBSGA )->(MsUnlock())

							// Guarda a posicao da FMR na arvore
							cCargoFMR := oTree:GetCargo()

							// Adiciona a ocorrencia na arvore e na TRB quando ela e gerada atraves de uma alteracao de FMR
							SgaIOcRes( ( cTRBSGA )->NIVSUP )

							// Reposiciona na FMR para executar a troca de icone
							oTree:TreeSeek( cCargoFMR )

						ElseIf TDC->TDC_STATUS == "4"

							cFolderA := "NG_ICO_FMRNC"
							RecLock(cTRBSGA, .F.)
							( cTRBSGA )->CARGO := "FM4"
							( cTRBSGA )->(MsUnlock())

						ElseIf TDC->TDC_STATUS == "6"

							cFolderA := "NG_ICO_FMRRB"
							RecLock(cTRBSGA, .F.)
							( cTRBSGA )->CARGO := "FM6"
							( cTRBSGA )->(MsUnlock())

						EndIf

						// Altera o icone da FMR
						oTree:ChangeBmp( cFolderA, cFolderA )
					EndIf

				EndIf

			EndIf

		EndIf

	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  OcoResSGA

Função para a inclusão e visualização da ocorrência de resíduo

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param cCodRes  - Código do Resíduo;
       cCodPro  - Codigo do item na arvore
       cNivSup  - Nível Superior;
       lLoad    - Carrega ocorrências.

/*/
//---------------------------------------------------------------------
Static Function OcoResSGA(cCodRes, cCodPro, cNivSup, lLoadOco)

	Local aArea       := GetArea()
	Local aAreaTrb    := (cTRBSGA)->(GetArea())
	Local lIncFil     := .F.
	Local cAliasQry, cQuery

	cAliasQry := GetNextAlias()
	cQuery := " SELECT TB0.TB0_CODOCO AS CODOCO"
	cQuery += " FROM "+RetSqlName("TAV")+" TAV "

	cQuery += " INNER JOIN "+RetSqlName("TB0")+" TB0 ON "
	cQuery += "    TB0.TB0_FILIAL = " + ValToSql(xFilial("TB0")) + " AND TB0.D_E_L_E_T_ <> '*' AND "
	cQuery += "    TB0.TB0_CODRES = TAV.TAV_CODRES AND "
	cQuery += "    TB0.TB0_QTDE > TB0.TB0_QTDRED "

	cQuery += " INNER JOIN "+RetSqlName("TBJ")+" TBJ ON "
	cQuery += "    TBJ.TBJ_FILIAL = " + ValToSql(xFilial("TBJ")) + " AND TBJ.D_E_L_E_T_ <> '*' AND "
	cQuery += "    TB0.TB0_CODOCO = TBJ.TBJ_CODOCO AND "
	cQuery += "    TBJ.TBJ_CODEST = TAV.TAV_CODEST AND "
	cQuery += "    TBJ.TBJ_CODNIV = TAV.TAV_CODNIV "

	cQuery += " WHERE "
	cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
	cQuery += "    TAV.TAV_CODRES = " + ValToSql(cCodRes) + " AND "
	cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
	cQuery += "    TAV.TAV_CODNIV = " + ValToSql(cNivSup)
	cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

	dbSelectArea(cAliasQry)
	dbGoTop()
	While (cAliasQry)->(!EoF())

		dbSelectArea( "TB0" )
		dbSetOrder( 1 )
		If dbSeek( xFilial("TB0") + (cAliasQry)->CODOCO )

         //Inclui a ocorrência de resíduo no TRB
			SgaIOcRes( cCodPro )

			If !lLoadOco // Verifica se deve carregar as ocorrencias do residuo
				lIncFil := .T.
				Exit
			EndIf

		EndIf

		dbSelectArea(cAliasQry)
		(cAliasQry)->(dbSkip())
	End

	(cAliasQry)->(dbCloseArea())

   // FMRs

	If !lIncFil

		cAliasQry := GetNextAlias()
		cQuery := " SELECT TDC.TDC_STATUS STATUS, TDC.TDC_CODFMR AS CODFMR"
		cQuery += " FROM "+RetSqlName("TAV")+" TAV "

		cQuery += " INNER JOIN "+RetSqlName("TDC")+" TDC ON "
		cQuery += "    TDC.TDC_FILIAL = " + ValToSql(xFilial("TDC")) + " AND TDC.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TDC.TDC_CODRES = TAV.TAV_CODRES AND "
		cQuery += "    TDC.TDC_DEPTO  = TAV.TAV_CODNIV AND "
		cQuery += "    TDC.TDC_STATUS <> '5' AND "
		cQuery += "    TDC.TDC_STATUS <> '7' "

		cQuery += " WHERE "
		cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
		cQuery += "    TAV.TAV_CODRES = " + ValToSql(cCodRes) + " AND "
		cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
		cQuery += "    TAV.TAV_CODNIV = " + ValToSql(cNivSup)
		cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"

		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

		dbSelectArea(cAliasQry)
		dbGoTop()
		While (cAliasQry)->(!EoF())

			dbSelectArea( "TDC" )
			dbSetOrder( 1 )
			If dbSeek( xFilial("TDC") + (cAliasQry)->CODFMR )

				SgaIFMR( cCodPro, (cAliasQry)->STATUS )

				If !lLoadOco // Verifica se deve carregar as ocorrencias do residuo
					Exit
				EndIf

			EndIf

			dbSelectArea(cAliasQry)
			(cAliasQry)->(dbSkip())

		End

		(cAliasQry)->(dbCloseArea())

	EndIf

	RestArea(aAreaTrb)
	RestArea(aArea)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902OASP

Função para Inclusão/ Alteração/ Visualização de aspectos.

@author Juliani Schlickmann Damasceno
@since 11/07/2014

@param nOpcx

@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902OASP( nOpcx )

	Local cSeekTr     := oTree:GetCargo()
	Local cLocRes     := ""
	Local cCarSup     := SubStr( oTree:GetCargo() , 4 , 3 )
	Local aArea       := GetArea()
	Local aAreaTRB    := ( cTRBSGA )->( GetArea() )
	Local aAreaTA4    := TA4->( GetArea() )
	Local aAreaTAB    := TAB->( GetArea() )
	Local aAreaTAF    := TAF->( GetArea() )

	Local aGetTmp     := If( Type( "aGets" ) <> "U" , aGets , Nil )
	Local aTelTmp     := If( Type( "aTela" ) <> "U" , aTela , Nil )
	Local aLocRes
	Local nRecno      := 0
	Local aVar        := {}

	aAdd(aVar, If( Type( "Inclui" ) == "L", Inclui, .T.) )
	aAdd(aVar, If( Type( "Altera" ) == "L", Altera, .T.) )

	If nOpcx == 3
		cLocRes := SubStr( oTree:GetCargo() , 1 , 3 )
		aLocRes := { cLocRes }
		SetInclui()
	Else
		dbSelectArea( cTRBSGA )
		dbSetOrder( 2 )
		If dbSeek( "001" + SubStr( oTree:GetCargo() , 1 , 3 ) + cFilAnt )
			dbSelectArea( "TA4" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TA4" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TA4->TA4_CODASP ) ) )
				nRecno := TA4->( Recno() )
				cLocRes := ( cTRBSGA )->NIVSUP
				aLocRes := { cLocRes }
				SetAltera()
			EndIf
		EndIf
	EndIf

	If ( nOpcx <> 3 .And. !Empty( nRecno ) )

      //Chama a tela de alteração/visualização do aspecto
		Sg030Pro( "TA4" , nRecno , nOpcx , aLocRes, .T.  )

		If nOpcx == 4

         //Atualiza a descrição do aspecto na arvore
			SgaAttDesc( __cTpAsp, TA4->TA4_CODASP, TA4->TA4_DESCRI )
		EndIf
	Else
      //Chama a tela para inclusão do aspecto
		If Sg030Pro( "TA4" , nRecno , nOpcx , aLocRes, .T. )[1]

			If nOpcx == 3
				oTree:TreeSeek( cSeekTr )

				//Inclui o aspecto no TRB
				SgaIncAsp( TA4->TA4_CODASP , cLocRes, cCarSup )
			EndIf
		EndIf
	EndIf

	Inclui := aVar[1]
	Altera := aVar[2]

	aTela := aClone( aTelTmp )
	aGets := aClone( aGetTmp )

	RestArea( aAreaTAF )
	RestArea( aAreaTA4 )
	RestArea( aAreaTAB )
	RestArea( aAreaTRB )
	RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SgaIncAsp
Função para Inclusão de aspectos

@author Juliani Schlickmann Damasceno
@since 11/07/2014

@param cCodAsp  - Código do aspecto
@param cNivSup  - Nível no qual o aspecto deve ser incluído
@param cCarSup  - Tipo do Nível superior do período
@param lSeek    - Indica se deve possicionar na tabela
@param cRespons - Responsável pelo nível
@param aItens   - Aspectos já existentes
@param lLoadDes - Carrega desempenhos

@return .T.
/*/
//---------------------------------------------------------------------
Static Function SgaIncAsp( cCodAsp , cNivSup, cCarSup, cRespons, nLoadDes )

	Local aArea       := GetArea()
	Local aAreaTRB    := ( cTRBSGA )->( GetArea() )
	Local cCargo      := "ASP"
	Local cCodDesc, cDesPro

	Default cCodAsp   := ""
	Default cRespons  := ""
	Default nLoadDes  := 1

	dbSelectArea(cTRBSGA)
	dbSetOrder(7)
	If !dbSeek(__cTpAsp + Padr( cCodAsp, Len( (cTRBSGA)->CODTIPO ) ) + cCodEst + cNivSup)

		If IsInCallStack( "MNT902OASP" )

			If cLocal == "000"

				dbSelectArea( "TAF" )
				dbSetOrder( 2 )
				dbGoBottom()
				cLocal := TAF->TAF_CODNIV

				If Empty( cLocal )
					dbSelectArea( cTRBSGA )
					dbSetOrder( 2 )
					dbGoBottom()
					cLocal := ( cTRBSGA )->CODPRO
				EndIf

				If FindFunction( "Soma1Old" )
					cLocal := Soma1Old( AllTrim( cLocal ) )
				Else
					cLocal := Soma1( AllTrim( cLocal ) )
				EndIf

			Else

				dbSelectArea( cTRBSGA )
				dbSetOrder( 2 )
				dbGoBottom()
				cLocal := ( cTRBSGA )->CODPRO

				If FindFunction( "Soma1Old" )
					cLocal := Soma1Old( AllTrim( cLocal ) )
				Else
					cLocal := Soma1( AllTrim( cLocal ) )
				EndIf

			EndIf

		Else
			cLocal := fRetCodNiv()
		EndIf

		cCodNiv  := cLocal
		cDesPro  := NGSEEK( "TA4" , cCodAsp , 1 , "TA4_DESCRI" )
		cCodDesc := cCodAsp + " - " + AllTrim( cDesPro )
		nNivel++

		dbSelectArea( cTRBSGA )
		RecLock( (cTRBSGA), .T. )
		( cTRBSGA )->FILIAL  := cFilAnt
		( cTRBSGA )->CODEST  := cCodEst
		( cTRBSGA )->CODPRO  := cCodNiv
		( cTRBSGA )->DESCRI  := cCodDesc
		( cTRBSGA )->NIVSUP  := cNivSup
		( cTRBSGA )->RESPONS := cRespons
		( cTRBSGA )->TIPO    := __cTpAsp
		( cTRBSGA )->CODTIPO := cCodAsp
		( cTRBSGA )->ORDEM   := cCodNiv
		( cTRBSGA )->CARGO   := cCargo
		( cTRBSGA )->NIVEL   := nNivel

		fTrbModulo() // Efetua marcacao do modulo na tabela temporaria da Tree

		( cTRBSGA )->( MsUnlock() )

      //Atualiza Legenda
		If Type("oLgAsp") == "O"
			nLgAsp++
			oLgAsp:Refresh()
		EndIf

		If oTree:TreeSeek( cNivSup + cCarSup + cFilAnt )
			oTree:AddItem( cCodDesc, ( cTRBSGA )->CODPRO + cCargo + cFilAnt, "NG_ICO_ASPECTO", "NG_ICO_ASPECTO", ,  , 2 )
		EndIf

	EndIf

	If nLoadDes > 0
		DesempSGA( cCodAsp, ( cTRBSGA )->CODPRO, cNivSup, , nLoadDes <> 2 )
	EndIf

	nNivel--
	RestArea( aAreaTRB )
	RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SgaAttDesc

Atualizar as descrições de: - Aspectos
                        - Planos Emergenciais
                        - Ocorrências de Planos Emergenciais na árvore

@author Juliani Schlickmann Damasceno
@since 11/07/2014

@param cTipo      - Tipo do item a ser atualizado
      cCodigo  - Código do Item

@return .T.
/*/
//---------------------------------------------------------------------
Static Function SgaAttDesc( cTipo, cCodigo, cDescri )

	Local aArea    := (cTRBSGA)->(GetArea())
	Local aAreaTRB := GetArea()
	Local cCargo   := SubStr( oTree:GetCargo(), 1, 3 )
	Local cCod     := ""

	Default cDescri := ""

   // Posiciona no resíduo da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( "001" + cCargo + cFilAnt )

		If cTipo == __cTpAsp // Aspecto
			cCod := cCodigo + " - " + AllTrim( cDescri )
			oTree:ChangePrompt( cCod, cCargo + "ASP" + cFilAnt )
		ElseIf cTipo == __cTpPE // Plano Emergencial
			cCod := cCodigo + " - " + AllTrim( cDescri )
			oTree:ChangePrompt( cCod, cCargo + "PLE" + cFilAnt)
		ElseIf cTipo == __cTpOcPE // Ocorrencia
			cCod := cCodigo + " - " + cDescri
			oTree:ChangePrompt( cCod, cCargo + "OPE" + cFilAnt )
		EndIf

		RecLock( cTRBSGA, .F. )
		If cTipo == __cTpAsp
			( cTRBSGA )->DESCRI  := NGSEEK( "TA4" , cCodigo , 1 , "TA4_DESCRI" )
		ElseIf cTipo == __cTpPE
			( cTRBSGA )->DESCRI  := NGSEEK( "TBB" , cCodigo , 1 , "TBB_DESPLA" )
		ElseIf cTipo == __cTpOcPE
			( cTRBSGA )->DESCRI  := cCod
		EndIf
		( cTRBSGA )->( MsUnlock() )

		oTree:TreeSeek( cCargo + cFilAnt )
		oTree:Refresh()
		oTree:SetFocus()
	EndIf

	RestArea(aAreaTRB)
	RestArea(aArea)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc} SgaOprDes

Função para a: Inclusão, alteração, visualização e exclusão de
desempenhos ambientais na árvore lógica.

@author Juliani Schlickmann Damasceno
@since 14/07/2014

@param nOpcx

@return .T.
/*/
//---------------------------------------------------------------------
Static Function SgaOprDes( nOpcx )

	Local cSeekTr     := oTree:GetCargo()
	Local cLocAsp     := SubStr( oTree:GetCargo() , 1 , 3 )
	Local aVar     := {}
	Local nRecno      := 0
	Local cTmpTRB
	Local aGetTmp     := If( Type("aGets") <> "U" , aGets , Nil )
	Local aTelTmp     := If( Type("aTela") <> "U" , aTela , Nil )
	Local aReg110     := {}
	Local cNivel
	Local cOrdem

	aAdd( aVar, If( Type( "Inclui" ) == "L", Inclui, .T. ) )
	aAdd( aVar, If( Type( "Altera" ) == "L", Altera, .T. ) )

   // Posiciona no aspecto da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + cLocAsp + cFilAnt )

		If nOpcx <> 3
			dbSelectArea( "TAB" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TAB" ) + Padr( (cTRBSGA )->CODTIPO, Len( TAB->TAB_ORDEM ) ) )
				nRecno := TAB->( Recno() )
			EndIf
		EndIf

		aRotSetOpc( "TAB" , nRecno , nOpcx )

		If nOpcx <> 3
			cNivel := GetSupTRB( ( cTRBSGA )->NIVSUP )
		Else
			cNivel := ( cTRBSGA )->NIVSUP
		EndIf

		cTmpTRB := cTRBSGA

		Sg110AVPrv()

		aReg110 := Sg110APro( "TAB" , nRecno , nOpcx , Padr( ( cTRBSGA )->CODTIPO, Len( TA4->TA4_CODASP ) ), cNivel , .T.  )

		cTRBSGA := cTmpTRB

		If VALTYPE( aReg110 ) == "A" .AND. aReg110[1] == 1

			If nOpcx == 3

				oTree:TreeSeek( cSeekTr )
				SgaIADes( cLocAsp )

				cOrdem := ""

				dbSelectArea( "TAO" )
				dbSetOrder( 2 )
				If dbSeek( xFilial( "TAO" ) + TAB->TAB_CODASP + TAB->TAB_CODIMP )
					While !EoF() .And. xFilial( "TAO" ) == TAB->TAB_FILIAL .And.  TAB->TAB_CODASP == TAO->TAO_CODASP .And. TAB->TAB_CODIMP == TAO->TAO_CODIMP
						cOrdem := TAO->TAO_ORDEM
						TAO->( dbSkip() )
					End

					If !Empty(cOrdem)
                  // Posiciona no desempenho da TRB
						dbSelectArea( cTRBSGA )
						dbSetOrder( 3 )
						If dbSeek( __cTpDesem + Padr( cOrdem, Len( ( cTRBSGA )->CODTIPO ) ) + cFilAnt )
							SgaDelTp( ( cTRBSGA )->CODPRO )
						EndIf
					EndIf

				EndIf

			ElseIf nOpcx == 4

				dbSelectArea( "TAB" )
				dbSetOrder( 1 )
				If dbSeek( xFilial( "TAB" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TAB->TAB_ORDEM ) ) ) .And. TAB->TAB_SITUAC <> "1"
               // Retira o desempenho ambiental da árvore
					SgaDelTp( ( cTRBSGA )->CODPRO )
				EndIf

			ElseIf nOpcx == 5

				oTree:BeginUpdate()
				oTree:SetDisable()

            // Retira o desempenho ambiental da árvore
				SgaDelTp( ( cTRBSGA )->CODPRO, .F. )

				oTree:EndUpdate()
				oTree:SetEnable()
			EndIf

		EndIf
	EndIf

	Inclui := aVar[1]
	Altera := aVar[2]

	aTela := aClone( aTelTmp )
	aGets := aClone( aGetTmp )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  DesempSGA


@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param cCodAsp - Código do aspecto
      cNivSup  - Nível superior
      cRespons - Responsável
      aItens      - Itens já existentes
      lLoad    - Carrega desempenhos

/*/
//---------------------------------------------------------------------
Static Function DesempSGA( cCodAsp, cCodPro, cNivSup, lLoad )

	Local aArea       := GetArea()
	Local aAreaTrb    := (cTRBSGA)->(GetArea())
	Local cAliasQry, cQuery

	cAliasQry := GetNextAlias()
	cQuery := " SELECT TAB.TAB_ORDEM AS ORDEM"
	cQuery += " FROM "+RetSqlName("TAG")+" TAG "

	cQuery += " INNER JOIN "+RetSqlName("TA4")+" TA4 ON "
	cQuery += "    TA4.TA4_FILIAL = " + ValToSql(xFilial("TA4")) + " AND TA4.D_E_L_E_T_ <> '*' AND "
	cQuery += "    TA4.TA4_CODASP = TAG.TAG_CODASP"

	cQuery += " INNER JOIN "+RetSqlName("TAB")+" TAB ON "
	cQuery += "    TAB.TAB_FILIAL = " + ValToSql(xFilial("TAB")) + " AND TAB.D_E_L_E_T_ <> '*' AND "
	cQuery += "    TAB.TAB_SITUAC = '1' AND "
	cQuery += "    TA4.TA4_CODASP = TAB.TAB_CODASP AND "
	cQuery += "    TAB.TAB_CODEST = TAG.TAG_CODEST AND "
	cQuery += "    TAB.TAB_CODNIV = TAG.TAG_CODNIV "

	cQuery += " WHERE "
	cQuery += "    TAG.TAG_FILIAL = " + ValToSql(xFilial("TAG")) + " AND "
	cQuery += "    TAG.TAG_CODASP = " + ValToSql(cCodAsp) + " AND "
	cQuery += "    TAG.TAG_CODEST = " + ValToSql(cCodest) + " AND "
	cQuery += "    TAG.TAG_CODNIV = " + ValToSql(cNivSup)
	cQuery += "    AND TAG.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

	dbSelectArea(cAliasQry)
	dbGoTop()
	While (cAliasQry)->(!EoF())

		dbSelectArea( "TAB" )
		dbSetOrder( 1 )
		If dbSeek( xFilial("TAB") + (cAliasQry)->ORDEM )

			SgaIADes( cCodPro )

			If !lLoad // Verifica se deve carregar as ocorrencias do residuo
				Exit
			EndIf

		EndIf
		dbSelectArea(cAliasQry)
		(cAliasQry)->(dbSkip())

	End
	(cAliasQry)->(dbCloseArea())

	RestArea(aAreaTrb)
	RestArea(aArea)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  GetDesempA

Função para pegar os desempenhos ambientais do aspecto.

@author Juliani Schlickmann Damasceno
@since 16/07/2014

/*/
//---------------------------------------------------------------------
Static Function GetDesempA(cLocAsp)

	Local aFiltroAsp
	Local aArea    := GetArea()
	Local aAreaTrb    := ( cTRBSGA )->( GetArea() )

	Default := .F.

   // Posiciona no aspecto da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + cLocAsp + cFilAnt )
		aFiltroAsp := { { "TAB_CODASP", Padr( ( cTRBSGA )->CODTIPO, Len( TAB->TAB_CODASP ) ) }, { "TAB_CODNIV", ( cTRBSGA )->NIVSUP } }
	EndIf

	RestArea( aAreaTrb )
	RestArea( aArea )

Return aFiltroAsp

//---------------------------------------------------------------------
/*/{Protheus.doc}  GetSupTRB

Função para pegar o nivel superior do item.

@author Juliani Schlickmann Damasceno
@since 17/07/2014

@param cLocal  - Local do item na árvore

@return cNivSup
/*/
//---------------------------------------------------------------------
Static Function GetSupTRB( cLocal )

	Local aArea    := GetArea()
	Local aAreaTRB    := ( cTRBSGA )->( GetArea() )
	Local cNivSup

	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	dbSeek( cCodEst + cLocal )

	cNivSup := ( cTRBSGA )->NIVSUP

	RestArea( aAreaTRB )
	RestArea( aArea )

Return cNivSup

//---------------------------------------------------------------------
/*/{Protheus.doc}  GetSupTAF

Função para pegar o nivel superior do item.

@author Juliani Schlickmann Damasceno
@since 17/07/2014

@param cLocal  - Local do item na árvore

@return cNivSup
/*/
//---------------------------------------------------------------------
Static Function GetSupTAF( cLocal )

	Local aArea    := GetArea()
	Local aAreaTAF    := TAF->( GetArea() )
	Local cNivSup


	dbSelectArea( "TAF" )
	dbSetOrder( 2 )
	dbSeek( xFilial("TAF") + cCodEst + cLocal )

	cNivSup := TAF->TAF_NIVSUP

	RestArea( aAreaTAF )
	RestArea( aArea )

Return cNivSup

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaDelTp

Função para a exclusão dos desempenhos ambientais e ocorrências de
planos emergenciais na árvore.

@author Juliani Schlickmann Damasceno
@since 17/07/2014

@param cLocal  - Local do item na árvore

/*/
//---------------------------------------------------------------------
Static Function SgaDelTp( cLocal, lDelete )

	Local cNivSup := ""

	Default lDelete := .T.

   // Posiciona no desempenho da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + cLocal + cFilAnt )

		cNivSup := ( cTRBSGA )->NIVSUP

		RecLock( cTRBSGA, .F. )
		If lDelete
			dbDelete()
		Else
			( cTRBSGA )->DELETADO := "X"
		EndIf

		If oTree:TreeSeek( ( cTRBSGA )->CODPRO + AllTrim( ( cTRBSGA )->CARGO ) + cFilAnt )
			oTree:DelItem()
		EndIf

	EndIf

	( cTRBSGA )->( MsUnlock() )

	If !Empty( cNivSup )

		dbSelectArea( cTRBSGA )
		dbSetOrder( 2 )
		If dbSeek( cCodEst + cNivSup + cFilAnt )
			oTree:TreeSeek( ( cTRBSGA )->CODPRO + AllTrim( ( cTRBSGA )->CARGO ) + cFilAnt )
			MNT902MoLg( oTree:GetCargo() )
		EndIf

	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  AprovDes

Função para a chamada da rotina de aprovação dos desempenhos ambientais.
(SGAA112)

@author Juliani Schlickmann Damasceno
@since 17/07/2014

/*/
//---------------------------------------------------------------------
Static Function AprovDes()

	Local nDes     := 0
	Local aReturn  := {}
	Local cLocAsp     := SubStr( oTree:GetCargo() , 1 , 3 )

	aReturn := SGAA112( GetDesempA(cLocAsp) )

	If aReturn[1]
		For nDes := 1 To Len( aReturn[2] )
         // Posiciona no desempenho da TRB
			dbSelectArea( cTRBSGA )
			dbSetOrder( 3 )
			If dbSeek( __cTpDesem + Padr( aReturn[2][nDes], Len( TAB->TAB_ORDEM ) ) )
            // Retira o desempenho da árvore após aprovado
				SgaDelTp( (cTRBSGA)->CODPRO )
			EndIf
		Next nDes
	EndIf

Return
//---------------------------------------------------------------------
/*/{Protheus.doc}  CopiaDes

Função para a chamada da rotina de cópia dos desempenhos ambientais.
(SGAA111)

@author Juliani Schlickmann Damasceno
@since 17/07/2014

/*/
//---------------------------------------------------------------------
Static Function CopiaDes()

	Local nDes := 0
	Local aReturn := {}
	Local cLocAsp     := SubStr( oTree:GetCargo() , 1 , 3 )

	aReturn := SGAA111( .F., GetDesempA(cLocAsp) )

	If aReturn[1]
		For nDes := 1 To Len( aReturn[2] )
			dbSelectArea( "TAB" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TAB" ) + Padr( aReturn[2][nDes], Len( TAB->TAB_ORDEM ) ) )
				SgaIADes(cLocAsp)
			EndIf
		Next nDes
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaIADes

Função para inclusão do desempenho na Tree

@author Juliani Schlickmann Damasceno
@since 17/07/2014

@return cRespons - Responsável
/*/
//---------------------------------------------------------------------
Static Function SgaIADes( cNivSup )

	Local cCargo   := "DES"
	Local cDesPro

	Local aAreaTrb := ( cTRBSGA )->( GetArea() )

	dbSelectArea( cTRBSGA )
	dbSetOrder(7)
	If !dbSeek(__cTpDesem + Padr(TAB->TAB_ORDEM, Len((cTRBSGA)->CODTIPO)) + cCodest + cNivSup + cFilAnt)

		cCodNiv  := fRetCodNiv()
		cLocal   := cCodNiv
		cDesPro  := DTOC( TAB->TAB_DTRESU ) + Space( 2 ) + " - " + Space( 2 ) + NGSEEK( "TAE" , TAB->TAB_CODIMP , 1 , "TAE_DESCRI" )

		RecLock( (cTRBSGA), .T. )
		( cTRBSGA )->FILIAL  := cFilAnt
		( cTRBSGA )->CODEST  := cCodEst
		( cTRBSGA )->CODPRO  := cCodNiv
		( cTRBSGA )->DESCRI  := cDesPro
		( cTRBSGA )->NIVSUP  := cNivSup
		( cTRBSGA )->TIPO    := __cTpDesem
		( cTRBSGA )->CODTIPO := TAB->TAB_ORDEM
		( cTRBSGA )->ORDEM   := cCodNiv
		( cTRBSGA )->CARGO   := cCargo
		( cTRBSGA )->NIVEL   := nNivel+1

		fTrbModulo() // Efetua marcacao do modulo na tabela temporaria da Tree

		( cTRBSGA )->( MsUnlock() )

      //Atualiza Legenda
		If Type("oLgDes") == "O"
			nLgDes++
			oLgDes:Refresh()
		EndIf

		If oTree:TreeSeek( cNivSup + "ASP" + cFilAnt )
			oTree:AddItem( TAB->TAB_ORDEM + " - " + cDesPro, cCodNiv + cCargo + cFilAnt, "NG_ICO_DESEMPENHO", "NG_ICO_DESEMPENHO" , , , 2 )
		EndIf
	Else
		cLocal := ( cTRBSGA )->CODPRO
	EndIf

	RestArea(aAreaTrb)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaIsTemp

Função para verificação se o item está salvo

@author Juliani Schlickmann Damasceno
@since 17/07/2014

@param cNivel - Nivel onde está o item

@return lIsTemp
/*/
//---------------------------------------------------------------------
Static Function SgaIsTemp( cNivel )

	Local cTipo    := SubStr( cNivel, 4, 3 )
	Local lIsTemp     := .F.
	Local aArea    := GetArea()
	Local aAreaTrb    := ( cTRBSGA )->( GetArea() )
	Local aAreaTbl    := {}

	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + SubStr( cNivel, 1, 3 ) + cFilAnt )
		If cTipo == "RES"
			aAreaTbl := TAV->( GetArea() )
			dbSelectArea( "TAV" )
			dbSetOrder( 1 )
			lIsTemp := !dbSeek( xFilial( "TAV" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TAV->TAV_CODRES ) ) + cCodEst + ( cTRBSGA )->NIVSUP )
		ElseIf cTipo == "ASP"
			aAreaTbl := TAG->( GetArea() )
			dbSelectArea( "TAG" )
			dbSetOrder( 1 )
			lIsTemp := !dbSeek( xFilial( "TAG" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TAG->TAG_CODASP ) ) + cCodEst + ( cTRBSGA )->NIVSUP )
		ElseIf cTipo == "PLE"
			aAreaTbl := TBC->( GetArea() )
			dbSelectArea( "TBC" )
			dbSetOrder( 1 )
			lIsTemp := !dbSeek( xFilial( "TBC" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TBC->TBC_CODPLA ) ) + cCodEst + ( cTRBSGA )->NIVSUP )
		ElseIf cTipo == "LOC"
			aAreaTbl := TAF->( GetArea() )
			dbSelectArea( "TAF" )
			dbSetOrder( 2 )
			lIsTemp := !dbSeek( xFilial( "TAF" )+ cCodEst + (cTRBSGA)->CODPRO )
		EndIf
	EndIf

	If !Empty( aAreaTbl )
		RestArea( aAreaTbl )
	EndIf

	RestArea( aAreaTrb )
	RestArea( aArea )

Return lIsTemp

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902OPLA

Função para inclusão/alteração do plano emergencial

@author Juliani Schlickmann Damasceno
@since 11/07/2014

@param nOpcx - Indica o tipo de operação

@return .T.
/*/
//---------------------------------------------------------------------
Static Function MNT902OPLA( nOpcx )

	Local cSeekTr     := oTree:GetCargo()
	Local cLocPla     := ""
	Local cCarSup     := SubStr( oTree:GetCargo() , 4 , 3 )
	Local aArea       := GetArea()
	Local aAreaTRB    := ( cTRBSGA )->( GetArea() )
	Local aAreaTBB    := TBB->( GetArea() )
	Local aAreaTBC    := TBC->( GetArea() )
	Local aAreaTBV    := TBV->( GetArea() )
	Local aAreaTC1    := TC1->( GetArea() )
	Local aAreaTAF    := TAF->( GetArea() )
	Local aGetTmp     := If( Type( "aGets" ) <> "U" , aGets , Nil )
	Local aTelTmp     := If( Type( "aTela" ) <> "U" , aTela , Nil )
	Local aLocPla
	Local nRecno      := 0
	Local aVar        := {}
	Local cTmpTrb
	Local lOk		  := .F.

	aAdd( aVar, If( Type( "Inclui" ) == "L", Inclui, .T. ) )
	aAdd( aVar, If( Type( "Altera" ) == "L", Altera, .T. ) )

	cTmpTrb := cTRBSGA

	If nOpcx == 3
		cLocPla := SubStr( oTree:GetCargo() , 1 , 3 )
		aLocPla := { cLocPla }
		SetInclui()
	Else
		dbSelectArea( cTRBSGA )
		dbSetOrder( 2 )
		If dbSeek( "001" + SubStr( oTree:GetCargo() , 1 , 3 ) + cFilAnt )
			dbSelectArea( "TBB" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TBB" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TBB->TBB_CODPLA ) ) )
				nRecno := TBB->( Recno() )
				cLocPla := ( cTRBSGA )->NIVSUP
				aLocPla := { cLocPla }
				SetAltera()
			EndIf
		EndIf
	EndIf

	lOk := Sg180Pro( "TBB" , nRecno , nOpcx , aLocPla, .T. )
	cTRBSGA := cTmpTrb
	If lOk
		If ( nOpcx <> 3 .And. !Empty( nRecno ) )
			If nOpcx == 4
				SgaAttDesc( __cTpPE, TBB->TBB_CODPLA, TBB->TBB_DESPLA )
			EndIf
		Else
			If nOpcx == 3
				oTree:TreeSeek( cSeekTr )
				SgaIncPE( TBB->TBB_CODPLA , cLocPla, cCarSup )
			EndIf
		EndIf
	EndIf

	Inclui := aVar[1]
	Altera := aVar[2]

	aTela := aClone( aTelTmp )
	aGets := aClone( aGetTmp )

	RestArea( aAreaTAF )
	RestArea( aAreaTBB )
	RestArea( aAreaTBC )
	RestArea( aAreaTBV )
	RestArea( aAreaTC1 )
	RestArea( aAreaTRB )
	RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} SgaIncPE

Função para Inclusão de planos emergenciais e ocorrências no TRB.

@author Juliani Schlickmann Damasceno
@since 11/07/2014

@param cCodPla - Código do Plano Emergencial
@param cNivSup - Nível no qual o plano deve ser incluído
@param cCarSup - Tipo do Nível superior do período
@param cRespons   - Responsável pelo nível
@param lLoadOPE   - carrega ocorrencias de plano emergencial

@return .T.
/*/
//---------------------------------------------------------------------
Static Function SgaIncPE( cCodPla , cNivSup, cCarSup, cRespons, nLoadOPE )

	Local aArea       := ( cTRBSGA )->( GetArea() )
	Local aAreaTBB    := TBB->( GetArea() )
	Local cCargo      := "PLE"
	Local cCodDesc, cDesPro

	Default nLoadOPE  := 1
	Default cRespons  := ""
	Default cCodPla   := ""

	dbSelectArea(cTRBSGA)
	dbSetOrder(7)
	If !dbSeek(__cTpPE + Padr( cCodPla, Len( (cTRBSGA)->CODTIPO ) ) + cCodEst + cNivSup)

		If IsInCallStack( "MNT902OPLA" )
			If cLocal == "000"

				dbSelectArea( "TAF" )
				dbSetOrder( 2 )
				dbGoBottom()
				cLocal := TAF->TAF_CODNIV

				If Empty( cLocal )
					dbSelectArea( cTRBSGA )
					dbSetOrder( 2 )
					dbGoBottom()
					cLocal := ( cTRBSGA )->CODPRO
				EndIf

				If FindFunction( "Soma1Old" )
					cLocal := Soma1Old( AllTrim( cLocal ) )
				Else
					cLocal := Soma1( AllTrim( cLocal ) )
				EndIf

			Else

				dbSelectArea( cTRBSGA )
				dbSetOrder( 2 )
				dbGoBottom()
				cLocal := ( cTRBSGA )->CODPRO

				If FindFunction( "Soma1Old" )
					cLocal := Soma1Old( AllTrim( cLocal ) )
				Else
					cLocal := Soma1( AllTrim( cLocal ) )
				EndIf

			EndIf

		Else
			cLocal := fRetCodNiv()
		EndIf

		cCodNiv  := cLocal
		cDesPro  := NGSEEK( "TBB" , cCodPla , 1 , "TBB_DESPLA" )
		cCodDesc := cCodPla + " - " + AllTrim( cDesPro )
		nNivel++

		dbSelectArea(cTRBSGA)
		RecLock((cTRBSGA),.T.)
		( cTRBSGA )->FILIAL  := cFilAnt
		( cTRBSGA )->CODEST  := cCodEst
		( cTRBSGA )->CODPRO  := cCodNiv
		( cTRBSGA )->DESCRI  := cCodDesc
		( cTRBSGA )->NIVSUP  := cNivSup
		( cTRBSGA )->RESPONS := cRespons
		( cTRBSGA )->TIPO    := __cTpPE
		( cTRBSGA )->CODTIPO := cCodPla
		( cTRBSGA )->ORDEM   := cCodNiv
		( cTRBSGA )->CARGO   := cCargo
		( cTRBSGA )->NIVEL   := nNivel

		fTrbModulo() // Efetua marcacao do modulo na tabela temporaria da Tree

		( cTRBSGA )->( MsUnlock() )

		If Type("oLgPla") == "O"
			nLgPla++
			oLgPla:Refresh()
		EndIf

		If oTree:TreeSeek( cNivSup + cCarSup + cFilAnt )
			oTree:AddItem( cCodDesc, cCodNiv + cCargo + cFilAnt, "NG_ICO_PLANO_EMERG", "NG_ICO_PLANO_EMERG", ,  , 2 )
		EndIf

	EndIf

	If nLoadOPE > 0
      // Carrega ocorrência
		OcoPlaSGA( cCodPla, ( cTRBSGA )->CODPRO, ( cTRBSGA )->NIVSUP, nLoadOPE <> 2 )
	EndIf

	nNivel--
	RestArea( aAreaTBB )
	RestArea( aArea )

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc}  OcoPlaSGA

Função para a inclusão e visualização da ocorrência de resíduo

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param cCodPla - Código do Plano Emergencial
      cNivSup  - Nivel superior
      cRespons - Responsável
      lLoad    - Carrega ocorrencias

/*/
//---------------------------------------------------------------------
Static Function OcoPlaSGA( cCodPla, cCodPro, cNivSup, lLoad )

	Local aArea       := GetArea()
	Local aAreaTrb    := (cTRBSGA)->(GetArea())
	Local cAliasQry, cQuery

	cAliasQry := GetNextAlias()
	cQuery := " SELECT TC1.TC1_CODOCO AS CODOCO"
	cQuery += " FROM "+RetSqlName("TBC")+" TBC "

	cQuery += " INNER JOIN "+RetSqlName("TBB")+" TBB ON "
	cQuery += "    TBB.TBB_FILIAL = " + ValToSql(xFilial("TBB")) + " AND TBB.D_E_L_E_T_ <> '*' AND "
	cQuery += "    TBB.TBB_CODPLA = TBC.TBC_CODPLA"

	cQuery += " LEFT JOIN "+RetSqlName("TC1")+" TC1 ON "
	cQuery += "    TC1.TC1_FILIAL = " + ValToSql(xFilial("TC1")) + " AND TC1.D_E_L_E_T_ <> '*' AND "
	cQuery += "    TBB.TBB_CODPLA = TC1.TC1_CODPLA AND "
	cQuery += "    TC1.TC1_CODEST = TBC.TBC_CODEST AND "
	cQuery += "    TC1.TC1_NIVSUP = TBC.TBC_CODNIV AND "
	cQuery += "    ( SELECT COUNT(TC3_CODOCO) FROM "+RetSqlName("TC3")+" TC3 "
	cQuery += "       WHERE "
	cQuery += "       TC3.TC3_FILIAL = " + ValToSql(xFilial("TC3")) + " AND TC3.D_E_L_E_T_ <> '*' AND "
	cQuery += "       TC3.TC3_CODOCO = TC1.TC1_CODOCO AND "
	cQuery += "       TC3.TC3_OK <> '' ) = 0 "

	cQuery += " INNER JOIN "+RetSqlName("TBV")+" TBV ON "
	cQuery += "    TBV.TBV_FILIAL = " + ValToSql(xFilial("TBV")) + " AND TBV.D_E_L_E_T_ <> '*' AND "
	cQuery += "    TBV.TBV_CODOCO = TC1.TC1_CODOCO"

	cQuery += " WHERE "
	cQuery += "    TBC.TBC_FILIAL = " + ValToSql(xFilial("TBC")) + " AND "
	cQuery += "    TBC.TBC_CODPLA = " + ValToSql(cCodPla) + " AND "
	cQuery += "    TBC.TBC_CODEST = " + ValToSql(cCodEst) + " AND "
	cQuery += "    TBC.TBC_CODNIV = " + ValToSql(cNivSup)
	cQuery += "    AND TBC.D_E_L_E_T_ <> '*'"

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

	dbSelectArea(cAliasQry)
	dbGoTop()
	While (cAliasQry)->(!EoF())

		dbSelectArea( "TBV" )
		dbSetOrder( 1 )
		If dbSeek( xFilial("TBV") + (cAliasQry)->CODOCO )

			SgaIOcPE( cCodPro )

			If !lLoad
				Exit
			EndIf

		EndIf

		dbSelectArea(cAliasQry)
		(cAliasQry)->(dbSkip())

	End
	(cAliasQry)->(dbCloseArea())

	RestArea(aAreaTrb)
	RestArea(aArea)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaOprOPE

Função para a Inclusão/ Alteração/ Visualização da ocorrência de
plano emergencial.

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param nOpcx
/*/
//---------------------------------------------------------------------
Static Function SgaOprOPE( nOpcx )

	Local cSeekTr     := oTree:GetCargo()
	Local cLocPla     := SubStr( oTree:GetCargo() , 1 , 3 )
	Local aVar     := {}
	Local nRecno      := 0
	Local cTmpTRB
	Local lResp    := .T.
	Local aGetTmp     := If( Type( "aGets" ) <> "U" , aGets , Nil )
	Local aTelTmp     := If( Type( "aTela" ) <> "U" , aTela , Nil )
	Local cNivel

	aAdd( aVar, If( Type( "Inclui" ) == "L", Inclui, .T. ) )
	aAdd( aVar, If( Type( "Altera" ) == "L", Altera, .T. ) )

   // Posiciona no aspecto da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + cLocPla + cFilAnt )

		If nOpcx <> 3
			dbSelectArea( "TBV" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TBV" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TBV->TBV_CODPLA ) ) )
				nRecno := TBV->( Recno() )
				SetAltera()
			EndIf
		Else
			SetInclui()
		EndIf

		aRotSetOpc( "TBV" , nRecno , nOpcx )

		If nOpcx <> 3
			cNivel := GetSupTRB( ( cTRBSGA )->NIVSUP )
		Else
			cNivel := ( cTRBSGA )->NIVSUP
		EndIf

		cTmpTRB := cTRBSGA

		SGA340VPPE()

		lResp := Sg340Inc( "TBV", TBV->( Recno() ), nOpcx, Padr( ( cTRBSGA )->CODTIPO, Len( TBV->TBV_CODPLA ) ), cNivel )

		cTRBSGA := cTmpTRB

		If lResp
			If nOpcx == 4
				SgaAttDesc( __cTpOcPE, TBV->TBV_CODOCO, DTOC( TBV->TBV_DATA ) + Space( 2 ) + TBV->TBV_HORA )

			ElseIf nOpcx == 3
				oTree:TreeSeek( cSeekTr )

            // Inclui a ocorrência no TRB
				SgaIOcPE( cLocPla )

			ElseIf nOpcx == 5
				oTree:BeginUpdate()
				oTree:SetDisable()
            // Retira a ocorrência de plano emergencial da árvore
				SgaDelTp( cLocPla, .F. )

				oTree:EndUpdate()
				oTree:SetEnable()
			EndIf

		EndIf

	EndIf

	Inclui := aVar[1]
	Altera := aVar[2]

	aTela := aClone( aTelTmp )
	aGets := aClone( aGetTmp )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  RespOcoPla

Função para a resposta da ocorrência de plano emergencial.

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param nOpcx

/*/
//---------------------------------------------------------------------
Static Function RespOcoPla( nOpcx )

	Local cLocOco  := SubStr( oTree:GetCargo() , 1 , 3 )
	Local nBreak
	Local cDataOco
	Local lOk      := .F.

   // Posiciona no aspecto da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + cLocOco + cFilAnt )

		If  (nBreak := At( Space( 2 ),( cTRBSGA )->DESCRI )) > 0
			cDataOco := DTOS( CTOD( SubStr( ( cTRBSGA )->DESCRI, 1, nBreak ) ) )
		EndIf

		dbSelectArea( "TBV" )
		dbSetOrder( 1 )
		If dbSeek( xFilial( "TBV" ) + Padr( ( cTRBSGA )->CODTIPO, Len( TBV->TBV_CODOCO ) )+ ;
				cDataOco + SubStr( ( cTRBSGA )->DESCRI, nBreak+2, 5 ) )
			SGA350VPRO()
			dbSelectArea( "TC2" )
			dbSetOrder( 1 )
			If dbSeek( xFilial( "TC2" ) + TBV->TBV_CODPLA + TBV->TBV_CODOCO + DTOS( TBV->TBV_DATA ) + TBV->TBV_HORA )

            // Chama a rotina de resposta da ocorrência
				Sg350Resp( "TC2", TC2->( Recno() ), 4 )

				dbSelectArea( "TC3" )
				dbSetOrder( 1 ) //TC3_FILIAL+TC3_CODPLA+TC3_CODACA+TC3_CODOCO
				If dbSeek( xFilial( "TC3" ) + TC2->TC2_CODPLA + TC2->TC2_CODOCO )
					While !EoF() .And. xFilial( "TC3" ) == cFilAnt .And. TC3->TC3_CODPLA == TC2->TC2_CODPLA .And. TC3->TC3_CODOCO == TC2->TC2_CODOCO
						If !Empty( TC3->TC3_OK )
							lOk := .T.
							Exit
						EndIf
						dbSelectArea( "TC3" )
						TC3->( dbSkip() )
					End
					If lOk
						oTree:BeginUpdate()
						oTree:SetDisable()

                  // Retira a ocorrência de plano emergencial da árvore
						SgaDelTp( cLocOco )

						oTree:EndUpdate()
						oTree:SetEnable()
					EndIf
				EndIf

			EndIf
		EndIf
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaIOcRes

Função para a inclusão da ocorrência de resíduos no TRB.

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param cNivSup - Nível superior da ocorrência de resíduo.

/*/
//---------------------------------------------------------------------
Static Function SgaIOcRes( cNivSup )

	Local cFolderA, cFolderB
	Local cCargo  := "ORS"
	Local cDesPro
	Local aAreaTrb := ( cTRBSGA )->( GetArea() )

	dbSelectArea( cTRBSGA )
	dbSetOrder(7)

	If !dbSeek( __cTpOcRes + Padr( TB0->TB0_CODOCO, Len((cTRBSGA)->CODTIPO)) + cCodest + cNivSup + cFilAnt )

		cCodNiv := fRetCodNiv()
		cLocal  := cCodNiv
		cDesPro := DTOC( TB0->TB0_DATA )

		RecLock( ( cTRBSGA ) , .T. )
		( cTRBSGA )->FILIAL  := cFilAnt
		( cTRBSGA )->CODEST  := cCodEst
		( cTRBSGA )->CODPRO  := cCodNiv
		( cTRBSGA )->DESCRI  := cDesPro
		( cTRBSGA )->NIVSUP  := cNivSup
		( cTRBSGA )->TIPO    := __cTpOcRes
		( cTRBSGA )->CODTIPO := TB0->TB0_CODOCO
		( cTRBSGA )->ORDEM   := cCodNiv
		( cTRBSGA )->CARGO   := cCargo
		( cTRBSGA )->NIVEL   := nNivel+1

		fTrbModulo() // Efetua marcacao do modulo na tabela temporaria da Tree

		( cTRBSGA )->( MsUnlock() )

		If Empty( TB0->TB0_QTDRED ) // Se a ocorrencia ainda nao foi destinada

			If Empty( TB0->TB0_QTDDES ) // Nao esta compondo uma carga
				cFolderA := "NG_ICO_OCO_RES"
			Else // Ja esta compondo uma carga (em processo de destinacai ainda nao finalizado)
				cFolderA := "NG_ICO_OCO_RES"
			EndIf

		Else // Parcialmente destinada
			cFolderA := "NG_ICO_OCO_RES"
		EndIf

		cFolderB := cFolderA

     	//Atualiza Legenda
		If Type( "oLgOCR" ) == "O"
			nLgOCR++
			oLgOCR:Refresh()
		EndIf

		If oTree:TreeSeek( cNivSup + "RES" + cFilAnt )
			oTree:AddItem( TB0->TB0_CODOCO + " - " + cDesPro, cCodNiv + cCargo + cFilAnt, cFolderA, cFolderB, , , 2 )
		EndIf

	Else
		cLocal := ( cTRBSGA )->CODPRO
	EndIf

	RestArea( aAreaTrb )

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaIFMR

Função para a inclusão e visualização da ocorrência de
residuos.

@author Juliani Schlickmann Damasceno
@since 07/07/2014


/*/
//---------------------------------------------------------------------
Static Function SgaIFMR( cNivSup, cStatus )

	Local cFolderA, cObjLg
	Local cCargo
	Local cDesPro

	Local aAreaTrb := ( cTRBSGA )->( GetArea() )

	Default cStatus := TDC->TDC_STATUS

	cCargo := "FM" + cStatus

	dbSelectArea( cTRBSGA )
	dbSetOrder(7)
	If !dbSeek(__cTpFMR + Padr(TDC->TDC_CODFMR, Len((cTRBSGA)->CODTIPO)) + cCodest + cNivSup + cFilAnt)

		cCodNiv  := fRetCodNiv()
		cLocal   := cCodNiv
		cDesPro  := DTOC( TDC->TDC_DATA )

		RecLock( (cTRBSGA) , .T. )
		( cTRBSGA )->FILIAL  := cFilAnt
		( cTRBSGA )->CODEST  := cCodEst
		( cTRBSGA )->CODPRO  := cCodNiv
		( cTRBSGA )->DESCRI  := cDesPro
		( cTRBSGA )->NIVSUP  := cNivSup
		( cTRBSGA )->TIPO    := __cTpFMR
		( cTRBSGA )->CODTIPO:= TDC->TDC_CODFMR
		( cTRBSGA )->ORDEM   := cCodNiv
		( cTRBSGA )->CARGO   := cCargo
		( cTRBSGA )->NIVEL   := nNivel+1

		fTrbModulo() // Efetua marcacao do modulo na tabela temporaria da Tree

		( cTRBSGA )->( MsUnlock() )

		If cStatus == "1"

			cFolderA := "NG_ICO_FMRPC"
			cObjLg   := "oLgFMRPC"
			nLgFMRPC++

		ElseIf cStatus == "2"

			cFolderA := "NG_ICO_FMRAP"
			cObjLg   := "oLgFMRAP"
			nLgFMRAP++

		ElseIf cStatus == "3"

			cFolderA := "NG_ICO_FMRAR"
			cObjLg   := "oLgFMRAR"
			nLgFMRAR++

		ElseIf cStatus == "4"

			cFolderA := "NG_ICO_FMRNC"
			cObjLg   := "oLgFMRNC"
			nLgFMRNC++

		ElseIf cStatus == "6"

			cFolderA := "NG_ICO_FMRRB"
			cObjLg   := "oLgFMRRB"
			nLgFMRRB++

		EndIf

		If Type(cObjLg) == "O"
			&(cObjLg):Refresh()
		EndIf

		If oTree:TreeSeek( cNivSup + "RES" + cFilAnt )
			oTree:AddItem( TDC->TDC_CODFMR + " - " + cDesPro, cCodNiv + cCargo + cFilAnt, cFolderA, cFolderA , , , 2 )
		EndIf
	Else
		cLocal := ( cTRBSGA )->CODPRO
	EndIf

	RestArea(aAreaTrb)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  SgaIOcPE

Função para a inclusão da ocorrência de plano emergencial no TRB.

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param cNivSup - Nível superior da ocorrência do plano.

@return
/*/
//---------------------------------------------------------------------
Static Function SgaIOcPE(  cNivSup )

	Local cCargo  := "OPE"
	Local cDesPro

	Local aAreaTrb := ( cTRBSGA )->( GetArea() )

	dbSelectArea( cTRBSGA )
	dbSetOrder(7)
	If !dbSeek(__cTpOcPE + Padr(TBV->TBV_CODOCO, Len((cTRBSGA)->CODTIPO)) + cCodest + cNivSup + cFilAnt)

		cCodNiv  := fRetCodNiv()
		cLocal   := cCodNiv
		cDesPro := DTOC( TBV->TBV_DATA ) + Space( 2 ) + TBV->TBV_HORA

		RecLock( (cTRBSGA) , .T. )
		( cTRBSGA )->FILIAL  := cFilAnt
		( cTRBSGA )->CODEST  := cCodEst
		( cTRBSGA )->CODPRO  := cCodNiv
		( cTRBSGA )->DESCRI  := cDesPro
		( cTRBSGA )->NIVSUP  := cNivSup
		( cTRBSGA )->TIPO    := __cTpOcPE
		( cTRBSGA )->CODTIPO := TBV->TBV_CODOCO
		( cTRBSGA )->ORDEM   := cCodNiv
		( cTRBSGA )->CARGO   := cCargo
		( cTRBSGA )->NIVEL   := nNivel+1

		fTrbModulo() // Efetua marcacao do modulo na tabela temporaria da Tree

		( cTRBSGA )->( MsUnlock() )

      //Atualiza Legenda
		If Type("oLgOPE") == "O"
			nLgOPE++
			oLgOPE:Refresh()
		EndIf

		If oTree:TreeSeek( cNivSup + "PLE" + cFilAnt )
			oTree:AddItem( TBV->TBV_CODOCO + " - " + cDesPro, cCodNiv + cCargo + cFilAnt, "NG_ICO_OCO_PLE", "NG_ICO_OCO_PLE" , , , 2 )
		EndIf
	Else
		cLocal := ( cTRBSGA )->CODPRO
	EndIf

	RestArea(aAreaTrb)

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  RetPlaSimu

Função para o retorno do plano de simulação.

@author Juliani Schlickmann Damasceno
@since 28/07/2014

@param nOpcx

/*/
//---------------------------------------------------------------------
Static Function RetPlaSimu()

	Local cLocPla     := SubStr( oTree:GetCargo() , 1 , 3 )

   // Posiciona no aspecto da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + cLocPla + cFilAnt )
      // Chama a rotina de retorno do plano de simulação
		SGAA210( Padr(( cTRBSGA )->CODTIPO, Len(TBN->TBN_PLAEME)) )
	EndIf

Return

//---------------------------------------------------------------------
/*/{Protheus.doc}  ConfPlaSim

Função para a confirmação do plano de simulação.

@author Juliani Schlickmann Damasceno
@since 07/07/2014

@param nOpcx

/*/
//---------------------------------------------------------------------
Static Function ConfPlaSim()

	Local cLocPla     := SubStr( oTree:GetCargo() , 1 , 3 )

   // Posiciona no aspecto da TRB
	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	If dbSeek( cCodEst + cLocPla + cFilAnt )
      // Chama a rotina de confirmação do plano de simulação
		SGAA250( Padr(( cTRBSGA )->CODTIPO, Len(TBM->TBM_PLAINI)) )
	EndIf

Return

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgLocComp

Monta o caminho dos itens pesquisados.

@author Juliani Schlickmann Damasceno
@since 31/07/2014

@param cNivel - Nivel onde o item se encontra em sua respectiva tabela relacional
      cTipo - Tipo correspondente ao item
      cMod  - Módulo correspondente (SGA)

/*/
//----------------------------------------------------------------------------------
Static Function SgLocComp( cNivel, cTipo, cMod )

	If cTipo == __cTpRes
		cItem := TAV->TAV_CODRES + " - " + NGSEEK( "SB1" , TAV->TAV_CODRES , 1 , "SB1->B1_DESC" )
	ElseIf cTipo == __cTpAsp
		cItem := TAG->TAG_CODASP + " - " + NGSEEK( "TA4" , TAG->TAG_CODASP , 1 , "TA4->TA4_DESCRI" )
	Else
		cItem := TBC->TBC_CODPLA + " - " + NGSEEK( "TBB", TBC->TBC_CODPLA , 1 , "TBB->TBB_DESPLA" )
	EndIf

	cRet := NGLocComp( cNivel, "2", cMod ) + " > " + cItem

Return cRet

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaMLeg

Carrega os filhos dos resíduos, aspectos e planos emergenciais.

@author Juliani Schlickmann Damasceno
@since 22/08/2014

@param cCodPro - Código do item
      cTipo    - Tipo correspondente ao item
      aTreeSGA - Array estrutura da TAF
      k        - Contador da estrutura

/*/
//----------------------------------------------------------------------------------
Static Function SgaMLeg( cCodPro, cTipo )

	Local aAreaTemp := GetArea()

	If cTipo == "RES" // Resíduo

		cAliasQry := GetNextAlias()
		cQuery := " SELECT COUNT(DISTINCT TBJ.TBJ_CODOCO) AS QTDOCR"
		cQuery += " FROM "+RetSqlName("TAV")+" TAV "

		cQuery += " INNER JOIN "+RetSqlName("TB0")+" TB0 ON "
		cQuery += "    TB0.TB0_FILIAL = " + ValToSql(xFilial("TB0")) + " AND TB0.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TB0.TB0_CODRES = TAV.TAV_CODRES AND "
		cQuery += "    TB0.TB0_QTDE > TB0.TB0_QTDRED "

		cQuery += " INNER JOIN "+RetSqlName("TBJ")+" TBJ ON "
		cQuery += "    TBJ.TBJ_FILIAL = " + ValToSql(xFilial("TBJ")) + " AND TBJ.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TB0.TB0_CODOCO = TBJ.TBJ_CODOCO AND "
		cQuery += "    TBJ.TBJ_CODEST = TAV.TAV_CODEST AND "
		cQuery += "    TBJ.TBJ_CODNIV = TAV.TAV_CODNIV "

		cQuery += " WHERE "
		cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
		cQuery += "    TAV.TAV_CODRES = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES))) + " AND "
		cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
		cQuery += "    TAV.TAV_CODNIV = " + ValToSql(cCodPro)
		cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"

		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

		dbSelectArea(cAliasQry)
		dbGoTop()
		If (cAliasQry)->(!EoF())
			nLgOcR += (cAliasQry)->QTDOCR
			(cAliasQry)->(dbSkip())
		EndIf
		(cAliasQry)->(dbCloseArea())

      // FMRs

		cAliasQry := GetNextAlias()
		cQuery := " SELECT TAV_CODRES AS CODRES, TAV_CODEST AS CODEST, TAV_CODNIV AS CODNIV, TDC.TDC_STATUS STATUS, COUNT(DISTINCT TDC.TDC_CODFMR) AS QTDFMR"
		cQuery += " FROM "+RetSqlName("TAV")+" TAV "

		cQuery += " INNER JOIN "+RetSqlName("TDC")+" TDC ON "
		cQuery += "    TDC.TDC_FILIAL = " + ValToSql(xFilial("TDC")) + " AND TDC.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TDC.TDC_CODRES = TAV.TAV_CODRES AND "
		cQuery += "    TDC.TDC_DEPTO  = TAV.TAV_CODNIV AND "
		cQuery += "    TDC.TDC_STATUS <> 5 AND "
		cQuery += "    TDC.TDC_STATUS <> 7 "

		cQuery += " WHERE "
		cQuery += "    TAV.TAV_FILIAL = " + ValToSql(xFilial("TAV")) + " AND "
		cQuery += "    TAV.TAV_CODRES = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES))) + " AND "
		cQuery += "    TAV.TAV_CODEST = " + ValToSql(cCodEst) + " AND "
		cQuery += "    TAV.TAV_CODNIV = " + ValToSql(cCodPro)
		cQuery += "    AND TAV.D_E_L_E_T_ <> '*'"
		cQuery += " GROUP BY TAV.TAV_CODRES,TAV.TAV_CODEST, TAV.TAV_CODNIV, TDC.TDC_STATUS"

		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

		dbSelectArea(cAliasQry)
		dbGoTop()
		While (cAliasQry)->(!EoF())
			If (cAliasQry)->STATUS == "1"
				nLgFMRPC += (cAliasQry)->QTDFMR
			ElseIf (cAliasQry)->STATUS == "2"
				nLgFMRAP += (cAliasQry)->QTDFMR
			ElseIf (cAliasQry)->STATUS == "3"
				nLgFMRAR += (cAliasQry)->QTDFMR
			ElseIf (cAliasQry)->STATUS == "4"
				nLgFMRNC += (cAliasQry)->QTDFMR
			ElseIf (cAliasQry)->STATUS == "6"
				nLgFMRRB += (cAliasQry)->QTDFMR
			EndIf
			(cAliasQry)->(dbSkip())
		End
		(cAliasQry)->(dbCloseArea())

	ElseIf cTipo == "PLE" //Plano Emergencial

		cAliasQry := GetNextAlias()
		cQuery := " SELECT COUNT(DISTINCT TC1.TC1_CODOCO) AS QTDOPE"
		cQuery += " FROM "+RetSqlName("TBC")+" TBC "

		cQuery += " INNER JOIN "+RetSqlName("TBB")+" TBB ON "
		cQuery += "    TBB.TBB_FILIAL = " + ValToSql(xFilial("TBB")) + " AND TBB.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TBB.TBB_CODPLA = TBC.TBC_CODPLA"

		cQuery += " LEFT JOIN "+RetSqlName("TC1")+" TC1 ON "
		cQuery += "    TC1.TC1_FILIAL = " + ValToSql(xFilial("TC1")) + " AND TC1.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TBB.TBB_CODPLA = TC1.TC1_CODPLA AND "
		cQuery += "    TC1.TC1_CODEST = TBC.TBC_CODEST AND "
		cQuery += "    TC1.TC1_NIVSUP = TBC.TBC_CODNIV AND "
		cQuery += "    ( SELECT COUNT(TC3_CODOCO) FROM "+RetSqlName("TC3")+" TC3 "
		cQuery += "       WHERE "
		cQuery += "       TC3.TC3_FILIAL = " + ValToSql(xFilial("TC3")) + " AND TC3.D_E_L_E_T_ <> '*' AND "
		cQuery += "       TC3.TC3_CODOCO = TC1.TC1_CODOCO AND "
		cQuery += "       TC3.TC3_OK <> '' ) = 0 "

		cQuery += " LEFT JOIN "+RetSqlName("TBV")+" TBV ON "
		cQuery += "    TBV.TBV_FILIAL = " + ValToSql(xFilial("TBV")) + " AND TBV.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TBV.TBV_CODOCO = TC1.TC1_CODOCO"

		cQuery += " WHERE "
		cQuery += "    TBC.TBC_FILIAL = " + ValToSql(xFilial("TBC")) + " AND "
		cQuery += "    TBC.TBC_CODPLA = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA))) + " AND "
		cQuery += "    TBC.TBC_CODEST = " + ValToSql(cCodEst) + " AND "
		cQuery += "    TBC.TBC_CODNIV = " + ValToSql(cCodPro)
		cQuery += "    AND TBC.D_E_L_E_T_ <> '*'"

		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

		dbSelectArea(cAliasQry)
		dbGoTop()
		If (cAliasQry)->(!EoF())
			nLgOPE += (cAliasQry)->QTDOPE
			(cAliasQry)->(dbSkip())
		EndIf
		(cAliasQry)->(dbCloseArea())

	ElseIf cTipo == "ASP" // Aspecto

		cAliasQry := GetNextAlias()
		cQuery := " SELECT COUNT(DISTINCT TAB.TAB_ORDEM) AS QTDDES"
		cQuery += " FROM "+RetSqlName("TAG")+" TAG "

		cQuery += " INNER JOIN "+RetSqlName("TA4")+" TA4 ON "
		cQuery += "    TA4.TA4_FILIAL = " + ValToSql(xFilial("TA4")) + " AND TA4.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TA4.TA4_CODASP = TAG.TAG_CODASP"

		cQuery += " LEFT JOIN "+RetSqlName("TAB")+" TAB ON "
		cQuery += "    TAB.TAB_FILIAL = " + ValToSql(xFilial("TAB")) + " AND TAB.D_E_L_E_T_ <> '*' AND "
		cQuery += "    TAB.TAB_SITUAC = '1' AND "
		cQuery += "    TA4.TA4_CODASP = TAB.TAB_CODASP AND "
		cQuery += "    TAB.TAB_CODEST = TAG.TAG_CODEST AND "
		cQuery += "    TAB.TAB_CODNIV = TAG.TAG_CODNIV "

		cQuery += " WHERE "
		cQuery += "    TAG.TAG_FILIAL = " + ValToSql(xFilial("TAG")) + " AND "
		cQuery += "    TAG.TAG_CODASP = " + ValToSql(Padr((cTRBSGA)->CODTIPO,Len(TAB->TAB_CODASP))) + " AND "
		cQuery += "    TAG.TAG_CODEST = " + ValToSql(cCodEst) + " AND "
		cQuery += "    TAG.TAG_CODNIV = " + ValToSql(cCodPro)
		cQuery += "    AND TAG.D_E_L_E_T_ <> '*'"

		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)

		dbSelectArea(cAliasQry)
		dbGoTop()
		If (cAliasQry)->(!EoF())
			nLgDes += (cAliasQry)->QTDDES
			(cAliasQry)->(dbSkip())
		EndIf
		(cAliasQry)->(dbCloseArea())

	EndIf

	RestArea( aAreaTemp )

Return

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelPart

Monta aCols e aHeader de Participantes relacionados no nivel organizacional.

@author Juliani Schlickmann Damasceno
@since 27/08/2014

@param aHeadPart - Tipo do cabeçalho que será exibido, no caso o de Participantes.
      aColsPart - Linhas a serem apresentadas de Participantes.

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelPart(aHeadPart,aColsPart)

	Local nX
	Local nC
	Local aChoice

   //Campos a serem exibidos
	aChoice := {"QAA_MAT" , "QAA_NOME" , "QAA_CODFUN"}

   //Monta aHeader
   aHeadPart := fConsultSX3("QAA", aChoice)

   //Monta aCols
	dbSelectArea("TAK")
	dbSetOrder(1)
	dbSeek(xFilial("TAK") + cCodEst + TAF->TAF_CODNIV)

	nC := 0
	While !EoF() .And. TAF->TAF_FILIAL == xFilial("TAK") .And. TAK->TAK_CODEST == cCodEst .And. TAF->TAF_CODNIV == TAK->TAK_CODNIV
		dbSelectArea("QAA")
		dbSetOrder(1)
		dbSeek(xFilial("QAA") + TAK->TAK_MAT)
		nC++
		aAdd(aColsPart, Array(Len(aHeadPart)+1))
		For nX := 1 to Len(aHeadPart)
			If aHeadPart[nX][10] == "V"
				aColsPart[nC,nX] := CriaVar(AllTrim(aHeadPart[nX,2]))
			ElseIf !Empty(aHeadPart[nX][11])
				aColsPart[nC,nX] := NGRETSX3BOX(aHeadPart[nX,2],FieldGet(FieldPos(aHeadPart[nX,2])))
			Else
				aColsPart[nC,nX] := FieldGet(FieldPos(aHeadPart[nX,2]))
			EndIf
		Next
		aColsPart[nC,Len(aHeadPart)+1] := .F.

		TAK->(dbSkip())
	EndDo
	If Len(aColsPart) == 0
		aColsPart := BlankGetD(aHeadPart)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelFun

Monta aCols e aHeader de Funções relacionadas no nivel organizacional.

@author Juliani Schlickmann Damasceno
@since 27/08/2014

@param aHeadFun - Tipo do cabeçalho que será exibido, no caso o de Funções.
      aColsFun - Linhas a serem apresentadas de Funções.

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelFun(aHeadFun,aColsFun)

	Local nX
	Local nC
	Local aChoice

   // Campos a serem exibidos
	aChoice := {"QAC_FILIAL" , "QAC_FUNCAO" , "QAC_DESC"}

   //Monta aHeader
   aHeadFun := fConsultSX3("QAC", aChoice)

   //Monta aCols

	dbSelectArea("TAK")
	dbSetOrder(1)
	dbSeek(xFilial("TAK") + cCodEst + TAF->TAF_CODNIV)
	nC := 0
	While !EoF() .And. TAF->TAF_FILIAL == xFilial("TAK") .And. TAK->TAK_CODEST == cCodEst .And. TAF->TAF_CODNIV == TAK->TAK_CODNIV
		dbSelectArea("QAC")
		dbSetOrder(1)
		dbSeek(xFilial("QAC") + TAK->TAK_CODFUN)
		nC++
		aAdd(aColsFun, Array(Len(aHeadFun)+1))
		For nX := 1 to Len(aHeadFun)
			If aHeadFun[nX][10] == "V"
				aColsFun[nC,nX] := CriaVar(AllTrim(aHeadFun[nX,2]))
			ElseIf !Empty(aHeadFun[nX][11])
				aColsFun[nC,nX] := NGRETSX3BOX(aHeadFun[nX,2],FieldGet(FieldPos(aHeadFun[nX,2])))
			Else
				aColsFun[nC,nX] := FieldGet(FieldPos(aHeadFun[nX,2]))
			EndIf
		Next
		aColsFun[nC,Len(aHeadFun)+1] := .F.

		TAK->(dbSkip())
	EndDo

	If Len(aColsFun) == 0
		aColsFun := BlankGetD(aHeadFun)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelDoc

Monta aCols e aHeader de Documentos Relacionados, relacionados no nivel organizacional.

@author Juliani Schlickmann Damasceno
@since 27/08/2014

@param aHeadDoc - Tipo do cabeçalho que será exibido, no caso o de Documentos
      aColsDoc - Linhas a serem apresentadas de Documentos

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelDoc(aHeadDoc,aColsDoc)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"QDH_DOCTO" , "QDH_TITULO"}

   //Monta aHeader de documentos
   aHeadDoc := fConsultSX3("QDH", aChoice)

   //Monta aCols
	dbSelectArea("TAL")
	dbSetOrder(1)
	dbSeek(xFilial("TAL") + cCodEst + TAF->TAF_CODNIV)
	nC := 0
	While !EoF() .And. TAF->TAF_FILIAL == xFilial("TAL") .And. TAL->TAL_CODEST == cCodEst .And. TAF->TAF_CODNIV == TAL->TAL_CODNIV
		dbSelectArea("QDH")
		dbSetOrder(1)
		dbSeek(xFilial("QDH") + TAL->TAL_DOCTO)
		nC++
		aAdd(aColsDoc, Array(Len(aHeadDoc)+1))
		For nX := 1 to Len(aHeadDoc)
			If aHeadDoc[nX][10] == "V"
				aColsDoc[nC,nX] := CriaVar(AllTrim(aHeadDoc[nX,2]))
			ElseIf !Empty(aHeadDoc[nX][11])
				aColsDoc[nC,nX] := NGRETSX3BOX(aHeadDoc[nX,2],FieldGet(FieldPos(aHeadDoc[nX,2])))
			Else
				aColsDoc[nC,nX] := FieldGet(FieldPos(aHeadDoc[nX,2]))
			EndIf
		Next
		aColsDoc[nC,Len(aHeadDoc)+1] := .F.

		TAL->(dbSkip())
	EndDo

	If Len(aColsDoc) == 0
		aColsDoc := BlankGetD(aHeadDoc)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaDoc100

Função para verificar se há itens dentro do cTRBTAL - Tabela temporária de
Documentos Relacionados.

@author Juliani Schlickmann Damasceno
@since 09/09/2014

/*/
//----------------------------------------------------------------------------------
Static Function SgaDoc100(cNomNiv, cCodNiv)

	dbSelectArea(cTRBTAL)
	dbSetOrder(1)
	If !dbSeek(xFilial("TAL") + '001' + cCodNiv)
		dbSelectArea("TAL")
		dbSetOrder(1)
		dbSeek(xFilial("TAL") + '001' + cCodNiv )
		While !EoF() .And. xFilial("TAL") == (cTRBSGA)->FILIAL .And. cCodEst == (cTRBSGA)->CODEST .And.;
				TAL->TAL_CODNIV == cCodNiv

			dbSelectArea(cTRBTAL)

			RecLock((cTRBTAL),.T.)
			(cTRBTAL)->FILIAL := xFilial("TAL")
			(cTRBTAL)->CODEST := '001'
			(cTRBTAL)->CODNIV := TAL->TAL_CODNIV
			(cTRBTAL)->FILDOC := TAL->TAL_FILDOC
			(cTRBTAL)->DOCTO := TAL->TAL_DOCTO
			(cTRBTAL)->(MsUnlock())

			TAL->(dbSkip())
		End
	EndIf

	Sg100Qdo(cNomNiv, cCodNiv, .T.)

Return

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelCrit

Monta aCols e aHeader de Critérios de Controle, relacionados ao Resíduo.

@author Juliani Schlickmann Damasceno
@since 11/09/2014

@param aHeadCrit - Tipo do cabeçalho que será exibido, no caso o de Critérios de Controle
      aColsCrit - Linhas a serem apresentadas de Critérios de Controle

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelCrit(aHeadCrit,aColsCrit)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TAZ_CODCRI" , "TAZ_DESCRI", "TAZ_LIMMIN", "TAZ_LIMMAX", "TAZ_UNIMED", "TAZ_RESPON", "TAZ_NOMRES"}

   //Monta aHeader de documentos
	aHeadCrit := fConsultSX3("TAZ", aChoice)

	dbSelectArea("TAV")
	dbSetOrder(1)
	dbSeek(xFilial("TAV") + Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES)))

   //Monta aCols
	dbSelectArea("TAZ")
	dbSetOrder(1)//TAZ_FILIAL+TAZ_CODRES+TAZ_CODCRI
	dbSeek(xFilial("TAZ") + TAV->TAV_CODRES )
	nC := 0
	While !EoF() .And. TAV->TAV_FILIAL == xFilial("TAZ") .And. TAV->TAV_CODRES == TAZ->TAZ_CODRES

		nC++
		aAdd(aColsCrit, Array(Len(aHeadCrit)+1))
		For nX := 1 to Len(aHeadCrit)
			If aHeadCrit[nX][10] == "V"
				aColsCrit[nC,nX] := CriaVar(AllTrim(aHeadCrit[nX,2]))
			ElseIf !Empty(aHeadCrit[nX][11])
				aColsCrit[nC,nX] := NGRETSX3BOX(aHeadCrit[nX,2],FieldGet(FieldPos(aHeadCrit[nX,2])))
			Else
				aColsCrit[nC,nX] := FieldGet(FieldPos(aHeadCrit[nX,2]))
			EndIf
		Next
		aColsCrit[nC,Len(aHeadCrit)+1] := .F.

		TAZ->(dbSkip())
	EndDo

	If Len(aColsDoc) == 0
		aColsDoc := BlankGetD(aHeadCrit)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelDest

Monta aCols e aHeader de Tipo de Destinação, relacionados ao Resíduo.

@author Juliani Schlickmann Damasceno
@since 11/09/2014

@param aHeadTpDest - Tipo do cabeçalho que será exibido, no caso o de Tipo de Destinação
      aColsTpDest - Linhas a serem apresentadas de Critérios de Tipo de Destinação

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelDest(aHeadTpDest,aColsTpDest)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TB7_METODO" , "TB7_TIPO", "TB7_CODTIP", "TB7_DESC", "TB7_ONDEMA", "TB7_FREQUE", "TB7_UM","TB7_COLETA"}

   //Monta aHeader de documentos
   aHeadTpDest := fConsultSX3("TB7", aChoice)

	dbSelectArea("TAV")
	dbSetOrder(1)
	dbSeek(xFilial("TAV") + Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES)))

   //Monta aCols
	dbSelectArea("TB7")
	dbSetOrder(1)//TB7_FILIAL+TB7_CODRES+TB7_TIPO+TB7_CODTIP
	dbSeek(xFilial("TB7") + TAV->TAV_CODRES )
	nC := 0
	While !EoF() .And. TAV->TAV_FILIAL == xFilial("TB7") .And. TAV->TAV_CODRES == TB7->TB7_CODRES

		nC++
		aAdd(aColsTpDest, Array(Len(aHeadTpDest)+1))
		For nX := 1 to Len(aHeadTpDest)
			If aHeadTpDest[nX][10] == "V"
				aColsTpDest[nC,nX] := CriaVar(AllTrim(aHeadTpDest[nX,2]))
			ElseIf !Empty(aHeadTpDest[nX][11])
				aColsTpDest[nC,nX] := NGRETSX3BOX(aHeadTpDest[nX,2],FieldGet(FieldPos(aHeadTpDest[nX,2])))
			Else
				aColsTpDest[nC,nX] := FieldGet(FieldPos(aHeadTpDest[nX,2]))
			EndIf
		Next
		aColsTpDest[nC,Len(aHeadTpDest)+1] := .F.

		TB7->(dbSkip())
	EndDo

	If Len(aColsTpDest) == 0
		aColsTpDest := BlankGetD(aHeadTpDest)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelPolu

Monta aCols e aHeader de Poluentes, relacionados ao Resíduo.

@author Juliani Schlickmann Damasceno
@since 11/09/2014

@param aHeadPolu - Tipo do cabeçalho que será exibido, no caso o de Poluentes
      aColsPolu - Linhas a serem apresentadas de Critérios de Poluentes

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelPolu(aHeadPolu,aColsPolu)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TF1_CODPOL" , "TF1_DATA", "TF1_COEFIC", "TF1_UNIDAD", "TF1_IDMETO", "TF1_CONSIG", "TF1_JUSSING"}

   //Monta aHeader de documentos
   aHeadPolu := fConsultSX3("TF1", aChoice)

	dbSelectArea("TAV")
	dbSetOrder(1)
	dbSeek(xFilial("TAV") + Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES)))

   //Monta aCols
	dbSelectArea("TF1")
	dbSetOrder(1)
	dbSeek(xFilial("TF1") + TAV->TAV_CODRES )
	nC := 0
	While !EoF() .And. TAV->TAV_FILIAL == xFilial("TF1") .And. TAV->TAV_CODRES == TF1->TF1_CODRES

		nC++
		aAdd(aColsPolu, Array(Len(aHeadPolu)+1))
		For nX := 1 to Len(aHeadPolu)
			If aHeadPolu[nX][10] == "V"
				aColsPolu[nC,nX] := CriaVar(AllTrim(aHeadPolu[nX,2]))
			ElseIf !Empty(aHeadPolu[nX][11])
				aColsPolu[nC,nX] := NGRETSX3BOX(aHeadPolu[nX,2],FieldGet(FieldPos(aHeadPolu[nX,2])))
			Else
				aColsPolu[nC,nX] := FieldGet(FieldPos(aHeadPolu[nX,2]))
			EndIf
		Next
		aColsPolu[nC,Len(aHeadPolu)+1] := .F.

		TF1->(dbSkip())
	EndDo

	If Len(aColsPolu) == 0
		aColsPolu := BlankGetD(aHeadPolu)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelMoni

Monta aCols e aHeader de Monitoramento dos Poluentes, relacionados ao Resíduo.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadMoni - Tipo do cabeçalho que será exibido, no caso o de Monitoramento
      aColsMoni - Linhas a serem apresentadas de Critérios de Monitoramento

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelMoni(aHeadMoni,aColsMoni)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TF2_ANO" , "TF2_EFICIE", "TF2_TIPMON"}

   //Monta aHeader de documentos
    aHeadMoni := fConsultSX3("TF2", aChoice)

	dbSelectArea("TAV")
	dbSetOrder(1)
	dbSeek(xFilial("TAV") + Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES)))

   //Monta aCols
	dbSelectArea("TF2")
	dbSetOrder(1)
	dbSeek(xFilial("TF2") + TAV->TAV_CODRES )
	nC := 0
	While !EoF() .And. TAV->TAV_FILIAL == xFilial("TF2") .And. TAV->TAV_CODRES == TF2->TF2_CODRES

		nC++
		aAdd(aColsMoni, Array(Len(aHeadMoni)+1))
		For nX := 1 to Len(aHeadMoni)
			If aHeadMoni[nX][10] == "V"
				aColsMoni[nC,nX] := CriaVar(AllTrim(aHeadMoni[nX,2]))
			ElseIf !Empty(aHeadMoni[nX][11])
				aColsMoni[nC,nX] := NGRETSX3BOX(aHeadMoni[nX,2],FieldGet(FieldPos(aHeadMoni[nX,2])))
			Else
				aColsMoni[nC,nX] := FieldGet(FieldPos(aHeadMoni[nX,2]))
			EndIf
		Next
		aColsMoni[nC,Len(aHeadMoni)+1] := .F.

		TF2->(dbSkip())
	EndDo

	If Len(aColsMoni) == 0
		aColsMoni := BlankGetD(aHeadMoni)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRDesInt

Monta aCols e aHeader de Destinos Internos, relacionados ao Resíduo.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadDesIn - Tipo do cabeçalho que será exibido, no caso o de Destinos Internos
      aColsDesIn - Linhas a serem apresentadas de Critérios de Destinos Internos

/*/
//----------------------------------------------------------------------------------
Static Function SgaRDesInt(aHeadDesIn,aColsDesIn)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TH0_DESTIN" , "TH0_DESCRI"}

   //Monta aHeader de documentos
   aHeadDesIn := fConsultSX3("TH0", aChoice)

	dbSelectArea("TAV")
	dbSetOrder(1)
	dbSeek(xFilial("TAV") + Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES)))
   //Monta aCols
	dbSelectArea("TH0")
	dbSetOrder(1)
	dbSeek(xFilial("TH0") + TAV->TAV_CODRES )
	nC := 0
	While !EoF() .And. TAV->TAV_FILIAL == xFilial("TH0") .And. TAV->TAV_CODRES == TH0->TH0_CODRES

		nC++
		aAdd(aColsDesIn, Array(Len(aHeadDesIn)+1))
		For nX := 1 to Len(aHeadDesIn)
			If aHeadDesIn[nX][10] == "V"
				aColsDesIn[nC,nX] := CriaVar(AllTrim(aHeadDesIn[nX,2]))
			ElseIf !Empty(aHeadDesIn[nX][11])
				aColsDesIn[nC,nX] := NGRETSX3BOX(aHeadDesIn[nX,2],FieldGet(FieldPos(aHeadDesIn[nX,2])))
			Else
				aColsDesIn[nC,nX] := FieldGet(FieldPos(aHeadDesIn[nX,2]))
			EndIf
		Next
		aColsDesIn[nC,Len(aHeadDesIn)+1] := .F.

		TH0->(dbSkip())
	EndDo

	If Len(aColsDesIn) == 0
		aColsDesIn := BlankGetD(aHeadDesIn)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelLoc

Monta aCols e aHeader de Resíduo X Localização.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadResLoc - Tipo do cabeçalho que será exibido, no caso o de Resíduo X Loc
      aColsResLoc - Linhas a serem apresentadas de Resíduo X Localização

/*/
//----------------------------------------------------------------------------------
Static Function SgaRelLoc(aHeadResLoc,aColsResLoc)

	Local cNivSeq := ""

	Local nX
	Local nC
	Local aChoice
	Local cCodTipo

   //Campos que serão exibidos
	aChoice := {"TAF_CODNIV" , "TAF_NOMNIV"}

   //Monta aHeader de documentos
   aHeadResLoc := fConsultSX3("TAF", aChoice)

	cCodTipo := Padr((cTRBSGA)->CODTIPO,Len(TAV->TAV_CODRES))

	dbSelectArea("TAV")
	dbSetOrder(1)
	dbSeek(xFilial("TAV") + cCodTipo)

   //Monta aCols
	nC := 0
	While !EoF() .And. TAV->TAV_FILIAL == xFilial("TAV") .And. cCodTipo == TAV->TAV_CODRES

		If cNivSeq == TAV->TAV_CODNIV
			TAV->(dbSkip())
			Loop
		EndIf

		cNivSeq := TAV->TAV_CODNIV

		dbSelectArea("TAF")
		dbSetOrder(8) //TAF_FILIAL+TAF_CODNIV
		dbSeek(xFilial("TAF") + TAV->TAV_CODNIV)

		nC++
		aAdd(aColsResLoc, Array(Len(aHeadResLoc)+1))
		For nX := 1 to Len(aHeadResLoc)
			If aHeadResLoc[nX][10] == "V"
				aColsResLoc[nC,nX] := CriaVar(AllTrim(aHeadResLoc[nX,2]))
			ElseIf !Empty(aHeadResLoc[nX][11])
				aColsResLoc[nC,nX] := NGRETSX3BOX(aHeadResLoc[nX,2],FieldGet(FieldPos(aHeadResLoc[nX,2])))
			Else
				aColsResLoc[nC,nX] := FieldGet(FieldPos(aHeadResLoc[nX,2]))
			EndIf
		Next
		aColsResLoc[nC,Len(aHeadResLoc)+1] := .F.

		TAV->(dbSkip())
	EndDo

	If Len(aColsResLoc) == 0
		aColsResLoc := BlankGetD(aHeadResLoc)
	EndIf
Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelLoc

Monta aCols e aHeader de Resíduo X Localização.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadAspLoc - Tipo do cabeçalho que será exibido, no caso o de Aspecto X Loc
      aColsAspLoc - Linhas a serem apresentadas de Aspecto X Localização

/*/
//----------------------------------------------------------------------------------
Static Function SgaAspLoc(aHeadAspLoc,aColsAspLoc)

	Local cNivSeq := ""

	Local nX
	Local nC
	Local aChoice
	Local cCodTipo

   //Campos que serão exibidos
	aChoice := {"TAF_CODNIV" , "TAF_NOMNIV"}

   //Monta aHeader de documentos
   aHeadAspLoc := fConsultSX3("TAF", aChoice)

	cCodTipo := Padr((cTRBSGA)->CODTIPO,Len(TAG->TAG_CODASP))

	dbSelectArea("TAG")
	dbSetOrder(1)
	dbSeek(xFilial("TAG") + cCodTipo)

   //Monta aCols
	nC := 0
	While !EoF() .And. TAG->TAG_FILIAL == xFilial("TAG") .And. cCodTipo == TAG->TAG_CODASP

		If cNivSeq == TAG->TAG_CODNIV
			TAG->(dbSkip())
			Loop
		EndIf

		cNivSeq := TAG->TAG_CODNIV

		dbSelectArea("TAF")
		dbSetOrder(8) //TAF_FILIAL+TAF_CODNIV
		dbSeek(xFilial("TAF") + TAG->TAG_CODNIV)

		nC++
		aAdd(aColsAspLoc, Array(Len(aHeadAspLoc)+1))
		For nX := 1 to Len(aHeadAspLoc)
			If aHeadAspLoc[nX][10] == "V"
				aColsAspLoc[nC,nX] := CriaVar(AllTrim(aHeadAspLoc[nX,2]))
			ElseIf !Empty(aHeadAspLoc[nX][11])
				aColsAspLoc[nC,nX] := NGRETSX3BOX(aHeadAspLoc[nX,2],FieldGet(FieldPos(aHeadAspLoc[nX,2])))
			Else
				aColsAspLoc[nC,nX] := FieldGet(FieldPos(aHeadAspLoc[nX,2]))
			EndIf
		Next
		aColsAspLoc[nC,Len(aHeadAspLoc)+1] := .F.

		TAG->(dbSkip())
	EndDo

	If Len(aColsAspLoc) == 0
		aColsAspLoc := BlankGetD(aHeadAspLoc)
	EndIf
Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaAspReq

Monta aCols e aHeader de Aspecto X Requisitos, relacionados ao aspecto.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadAspReq - Tipo do cabeçalho que será exibido, no caso o de Aspecto X Requisitos
      aColsAspReq - Linhas a serem apresentadas de Critérios de Aspecto X Requisitos

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaAspReq(aHeadAspReq,aColsAspReq)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TAJ_CODLEG" , "TAJ_EMENTA"}

   //Monta aHeader de documentos
   aHeadAspReq := fConsultSX3("TAJ", aChoice)

	dbSelectArea("TAG")
	dbSetOrder(1)
	dbSeek(xFilial("TAG") + Padr((cTRBSGA)->CODTIPO,Len(TAG->TAG_CODASP)))
   //Monta aCols
	dbSelectArea("TAJ")
	dbSetOrder(1)
	dbSeek(xFilial("TAJ") + TAG->TAG_CODASP )
	nC := 0
	While !EoF() .And. TAG->TAG_FILIAL == xFilial("TAJ") .And. TAG->TAG_CODASP == TAJ->TAJ_CODASP

		nC++
		aAdd(aColsAspReq, Array(Len(aHeadAspReq)+1))
		For nX := 1 to Len(aHeadAspReq)
			If aHeadAspReq[nX][10] == "V"
				aColsAspReq[nC,nX] := CriaVar(AllTrim(aHeadAspReq[nX,2]))
			ElseIf !Empty(aHeadAspReq[nX][11])
				aColsAspReq[nC,nX] := NGRETSX3BOX(aHeadAspReq[nX,2],FieldGet(FieldPos(aHeadAspReq[nX,2])))
			Else
				aColsAspReq[nC,nX] := FieldGet(FieldPos(aHeadAspReq[nX,2]))
			EndIf
		Next
		aColsAspReq[nC,Len(aHeadAspReq)+1] := .F.

		TAJ->(dbSkip())
	EndDo

	If Len(aColsAspReq) == 0
		aColsAspReq := BlankGetD(aHeadAspReq)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelLoc

Monta aCols e aHeader de Plano Emergencial X Localização.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadPlaLoc - Tipo do cabeçalho que será exibido, no caso o de Plano Emerg X Loc
      aColsPlaLoc - Linhas a serem apresentadas de Plano Emerg X Localização

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaPlaLoc(aHeadPlaLoc,aColsPlaLoc)

	Local nX
	Local nC
	Local aChoice
	Local cCodTipo

   //Campos que serão exibidos
	aChoice := {"TAF_CODNIV" , "TAF_NOMNIV"}

   //Monta aHeader de documentos
   aHeadPlaLoc := fConsultSX3("TAF", aChoice)

	cCodTipo := Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA))

	dbSelectArea("TBC")
	dbSetOrder(1)
	dbSeek(xFilial("TBC") + cCodTipo)

   //Monta aCols
	nC := 0
	While !EoF() .And. TBC->TBC_FILIAL == xFilial("TBC") .And. cCodTipo == TBC->TBC_CODPLA
		dbSelectArea("TAF")
		dbSetOrder(8) //TAF_FILIAL+TAF_CODNIV
		dbSeek(xFilial("TAF") + TBC->TBC_CODNIV)

		nC++
		aAdd(aColsPlaLoc, Array(Len(aHeadPlaLoc)+1))
		For nX := 1 to Len(aHeadPlaLoc)
			If aHeadPlaLoc[nX][10] == "V"
				aColsPlaLoc[nC,nX] := CriaVar(AllTrim(aHeadPlaLoc[nX,2]))
			ElseIf !Empty(aHeadPlaLoc[nX][11])
				aColsPlaLoc[nC,nX] := NGRETSX3BOX(aHeadPlaLoc[nX,2],FieldGet(FieldPos(aHeadPlaLoc[nX,2])))
			Else
				aColsPlaLoc[nC,nX] := FieldGet(FieldPos(aHeadPlaLoc[nX,2]))
			EndIf
		Next
		aColsPlaLoc[nC,Len(aHeadPlaLoc)+1] := .F.

		TBC->(dbSkip())
	EndDo

	If Len(aColsPlaLoc) == 0
		aColsPlaLoc := BlankGetD(aHeadPlaLoc)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRelAcoes

Monta aCols e aHeader de Ações, relacionados ao plano emergencial.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadAcoes - Tipo do cabeçalho que será exibido, no caso o de Ações
      aColsAcoes - Linhas a serem apresentadas de Critérios de Ações

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaRelAcoes(aHeadAcoes,aColsAcoes)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TBO_CODACA" , "TBO_DESACA"}

   //Monta aHeader de documentos
   aHeadAcoes := fConsultSX3("TBO", aChoice)

	dbSelectArea("TBC")
	dbSetOrder(1)
	dbSeek(xFilial("TBC") + Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA)))
   //Monta aCols
	dbSelectArea("TBO")
	dbSetOrder(1)
	dbSeek(xFilial("TBO") + TBC->TBC_CODPLA )
	nC := 0
	While !EoF() .And. TBC->TBC_FILIAL == xFilial("TBO") .And. TBC->TBC_CODPLA == TBO->TBO_CODPLA

		nC++
		aAdd(aColsAcoes, Array(Len(aHeadAcoes)+1))
		For nX := 1 to Len(aHeadAcoes)
			If aHeadAcoes[nX][10] == "V"
				aColsAcoes[nC,nX] := CriaVar(AllTrim(aHeadAcoes[nX,2]))
			ElseIf !Empty(aHeadAcoes[nX][11])
				aColsAcoes[nC,nX] := NGRETSX3BOX(aHeadAcoes[nX,2],FieldGet(FieldPos(aHeadAcoes[nX,2])))
			Else
				aColsAcoes[nC,nX] := FieldGet(FieldPos(aHeadAcoes[nX,2]))
			EndIf
		Next
		aColsAcoes[nC,Len(aHeadAcoes)+1] := .F.

		TBO->(dbSkip())
	EndDo

	If Len(aColsAcoes) == 0
		aColsAcoes := BlankGetD(aHeadAcoes)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaPartic

Monta aCols e aHeader de Participantes, relacionados ao plano emergencial.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadPartic - Tipo do cabeçalho que será exibido, no caso o de participantes
      aColsPartic - Linhas a serem apresentadas de Critérios de participantes

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaPartic(aHeadPartic,aColsPartic)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TBP_TIPPAR" , "TBP_CODPAR", "TBP_NOMPAR", "TBP_CODFUN", "TBP_DESFUN"}

   //Monta aHeader de documentos
    aHeadPartic := fConsultSX3("TBP", aChoice)

	dbSelectArea("TBC")
	dbSetOrder(1)
	dbSeek(xFilial("TBC") + Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA)))
   //Monta aCols
	dbSelectArea("TBP")
	dbSetOrder(1)
	dbSeek(xFilial("TBP") + TBC->TBC_CODPLA )
	nC := 0
	While !EoF() .And. TBC->TBC_FILIAL == xFilial("TBP") .And. TBC->TBC_CODPLA == TBP->TBP_CODPLA

		nC++
		aAdd(aColsPartic, Array(Len(aHeadPartic)+1))
		For nX := 1 to Len(aHeadPartic)
			If aHeadPartic[nX][10] == "V"
				aColsPartic[nC,nX] := CriaVar(AllTrim(aHeadPartic[nX,2]))
			ElseIf !Empty(aHeadPartic[nX][11])
				aColsPartic[nC,nX] := NGRETSX3BOX(aHeadPartic[nX,2],FieldGet(FieldPos(aHeadPartic[nX,2])))
			Else
				aColsPartic[nC,nX] := FieldGet(FieldPos(aHeadPartic[nX,2]))
			EndIf
		Next
		aColsPartic[nC,Len(aHeadPartic)+1] := .F.

		TBP->(dbSkip())
	EndDo

	If Len(aColsPartic) == 0
		aColsPartic := BlankGetD(aHeadPartic)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaConExt

Monta aCols e aHeader de Contatos Externos, relacionados ao plano emergencial.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadConExt - Tipo do cabeçalho que será exibido, no caso o de contatos externos
      aColsConExt - Linhas a serem apresentadas de Critérios de contatos externos

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaConExt(aHeadConExt,aColsConExt)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TBU_CODCON" , "TBU_DESCON", "TBU_FORNEC", "TBU_DESFOR", "TBU_FONE", "TBU_FAX", "TBU_EMAIL", "TBU_ENDERE"}

   //Monta aHeader de documentos
   aHeadConExt := fConsultSX3("TBU", aChoice)

	dbSelectArea("TBC")
	dbSetOrder(1)
	dbSeek(xFilial("TBC") + Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA)))
   //Monta aCols
	dbSelectArea("TBU")
	dbSetOrder(1)
	dbSeek(xFilial("TBU") + TBC->TBC_CODPLA )
	nC := 0
	While !EoF() .And. TBC->TBC_FILIAL == xFilial("TBU") .And. TBC->TBC_CODPLA == TBU->TBU_CODPLA

		nC++
		aAdd(aColsConExt, Array(Len(aHeadConExt)+1))
		For nX := 1 to Len(aHeadConExt)
			If aHeadConExt[nX][10] == "V"
				aColsConExt[nC,nX] := CriaVar(AllTrim(aHeadConExt[nX,2]))
			ElseIf !Empty(aHeadConExt[nX][11])
				aColsConExt[nC,nX] := NGRETSX3BOX(aHeadConExt[nX,2],FieldGet(FieldPos(aHeadConExt[nX,2])))
			Else
				aColsConExt[nC,nX] := FieldGet(FieldPos(aHeadConExt[nX,2]))
			EndIf
		Next
		aColsConExt[nC,Len(aHeadConExt)+1] := .F.

		TBU->(dbSkip())
	EndDo

	If Len(aColsConExt) == 0
		aColsConExt := BlankGetD(aHeadConExt)
	EndIf

Return .T.

//-----------------------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaEquMat

Monta aCols e aHeader de Equipamentos e Materiais, relacionados ao plano emergencial.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadEquMat - Tipo do cabeçalho que será exibido, no caso o de Equipamentos e Materiais
      aColsEquMat - Linhas a serem apresentadas de Critérios de Equipamentos e Materiais

@return
/*/
//-----------------------------------------------------------------------------------------------
Static Function SgaEquMat(aHeadEquMat,aColsEquMat)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TDQ_CODEQP" , "TDQ_DESEQP"}

   //Monta aHeader de documentos
   aHeadEquMat := fConsultSX3("TDQ", aChoice)

	dbSelectArea("TBC")
	dbSetOrder(1)
	dbSeek(xFilial("TBC") + Padr((cTRBSGA)->CODTIPO,Len(TBC->TBC_CODPLA)))
   //Monta aCols
	dbSelectArea("TDQ")
	dbSetOrder(1)
	dbSeek(xFilial("TDQ") + TBC->TBC_CODPLA )
	nC := 0
	While !EoF() .And. SubStr(TBC->TBC_FILIAL,1,4) == Alltrim(xFilial("TDQ")) .And. TBC->TBC_CODPLA == TDQ->TDQ_CODPLA

		nC++
		aAdd(aColsEquMat, Array(Len(aHeadEquMat)+1))
		For nX := 1 to Len(aHeadEquMat)
			If aHeadEquMat[nX][10] == "V"
				aColsEquMat[nC,nX] := CriaVar(AllTrim(aHeadEquMat[nX,2]))
			ElseIf !Empty(aHeadEquMat[nX][11])
				aColsEquMat[nC,nX] := NGRETSX3BOX(aHeadEquMat[nX,2],FieldGet(FieldPos(aHeadEquMat[nX,2])))
			Else
				aColsEquMat[nC,nX] := FieldGet(FieldPos(aHeadEquMat[nX,2]))
			EndIf
		Next
		aColsEquMat[nC,Len(aHeadEquMat)+1] := .F.

		TDQ->(dbSkip())
	EndDo

	If Len(aColsEquMat) == 0
		aColsEquMat := BlankGetD(aHeadEquMat)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaDestOc

Monta aCols e aHeader de Destino do Resíduo.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadDestOc - Tipo do cabeçalho que será exibido, no caso o de Destino do Resíduo
      aColsDestOc - Linhas a serem apresentadas de Destino do Resíduo

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaDestOc(aHeadDestOc,aColsDestOc)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TB4_CODDES" , "TB4_DESCDE", "TB4_QUANTI", "TB4_UNIMED" , "TB4_LOTECT", "TB4_NUMLOT", "TB4_DTVALI"}

   //Monta aHeader de documentos
   aHeadDestOc := fConsultSX3("TB4", aChoice)

	dbSelectArea("TBJ")
	dbSetOrder(1)
	dbSeek(xFilial("TBJ") + Padr((cTRBSGA)->CODTIPO,Len(TBJ->TBJ_CODOCO)))
   //Monta aCols
	dbSelectArea("TB4")
	dbSetOrder(1)
	dbSeek(xFilial("TB4") + TBJ->TBJ_CODOCO )
	nC := 0
	While !EoF() .And. TBJ->TBJ_FILIAL == xFilial("TB4") .And. TBJ->TBJ_CODOCO == TB4->TB4_CODOCO

		nC++
		aAdd(aColsDestOc, Array(Len(aHeadDestOc)+1))
		For nX := 1 to Len(aHeadDestOc)
			If aHeadDestOc[nX][10] == "V"
				aColsDestOc[nC,nX] := CriaVar(AllTrim(aHeadDestOc[nX,2]))
			ElseIf !Empty(aHeadDestOc[nX][11])
				aColsDestOc[nC,nX] := NGRETSX3BOX(aHeadDestOc[nX,2],FieldGet(FieldPos(aHeadDestOc[nX,2])))
			Else
				aColsDestOc[nC,nX] := FieldGet(FieldPos(aHeadDestOc[nX,2]))
			EndIf
		Next
		aColsDestOc[nC,Len(aHeadDestOc)+1] := .F.

		TB4->(dbSkip())
	EndDo

	If Len(aColsDestOc) == 0
		aColsDestOc := BlankGetD(aHeadDestOc)
	EndIf

Return .T.
//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaFMRAcon

Monta aCols e aHeader de acondicionamento.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadAcondi - Tipo do cabeçalho que será exibido, no caso o de acondicionamento
      aColsAcondi - Linhas a serem apresentadas de acondicionamento

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaFMRAcon(aHeadAcondi,aColsAcondi)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TDD_SEQUEN" , "TDD_ACONDI", "TDD_DESCAC", "TDD_COLET" , "TDD_DESCCO", "TDD_UNICOL", "TDD_PESO", "TDD_UNIRES"}

   //Monta aHeader de documentos
   aHeadAcondi := fConsultSX3("TDD", aChoice)

	dbSelectArea("TDC")
	dbSetOrder(1)
	dbSeek(xFilial("TDC") + Padr((cTRBSGA)->CODTIPO,Len(TDC->TDC_CODFMR)))
   //Monta aCols
	dbSelectArea("TDD")
	dbSetOrder(1)
	dbSeek(xFilial("TDD") + TDC->TDC_CODFMR )
	nC := 0
	While !EoF() .And. TDC->TDC_FILIAL == xFilial("TDD") .And. TDC->TDC_CODFMR == TDD->TDD_CODFMR

		nC++
		aAdd(aColsAcondi, Array(Len(aHeadAcondi)+1))
		For nX := 1 to Len(aHeadAcondi)
			If aHeadAcondi[nX][10] == "V"
				aColsAcondi[nC,nX] := CriaVar(AllTrim(aHeadAcondi[nX,2]))
			ElseIf !Empty(aHeadAcondi[nX][11])
				aColsAcondi[nC,nX] := NGRETSX3BOX(aHeadAcondi[nX,2],FieldGet(FieldPos(aHeadAcondi[nX,2])))
			Else
				aColsAcondi[nC,nX] := FieldGet(FieldPos(aHeadAcondi[nX,2]))
			EndIf
		Next
		aColsAcondi[nC,Len(aHeadAcondi)+1] := .F.

		TDD->(dbSkip())
	EndDo

	If Len(aColsAcondi) == 0
		aColsAcondi := BlankGetD(aHeadAcondi)
	EndIf

Return .T.
//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaRespAc

Monta aCols e aHeader de Responsáveis da FMR.

@author Juliani Schlickmann Damasceno
@since 12/09/2014

@param aHeadRespAc - Tipo do cabeçalho que será exibido, no caso o de Responsáveis da FMR
      aColsRespAc - Linhas a serem apresentadas de Responsáveis da FMR

@return
/*/
//----------------------------------------------------------------------------------
Static Function SgaRespAc(aHeadRespAc,aColsRespAc)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TDE_MAT" , "TDE_NOME"}

   //Monta aHeader de documentos
   aHeadRespAc := fConsultSX3("TDE", aChoice)

	dbSelectArea("TDC")
	dbSetOrder(1)
	dbSeek(xFilial("TDC") + Padr((cTRBSGA)->CODTIPO,Len(TDC->TDC_CODFMR)))
   //Monta aCols
	dbSelectArea("TDE")
	dbSetOrder(1)
	dbSeek(xFilial("TDE") + TDC->TDC_CODFMR )
	nC := 0
	While !EoF() .And. TDC->TDC_FILIAL == xFilial("TDE") .And. TDC->TDC_CODFMR == TDE->TDE_CODFMR

		nC++
		aAdd(aColsRespAc, Array(Len(aHeadRespAc)+1))
		For nX := 1 to Len(aHeadRespAc)
			If aHeadRespAc[nX][10] == "V"
				aColsRespAc[nC,nX] := CriaVar(AllTrim(aHeadRespAc[nX,2]))
			ElseIf !Empty(aHeadRespAc[nX][11])
				aColsRespAc[nC,nX] := NGRETSX3BOX(aHeadRespAc[nX,2],FieldGet(FieldPos(aHeadRespAc[nX,2])))
			Else
				aColsRespAc[nC,nX] := FieldGet(FieldPos(aHeadRespAc[nX,2]))
			EndIf
		Next
		aColsRespAc[nC,Len(aHeadRespAc)+1] := .F.

		TDE->(dbSkip())
	EndDo

	If Len(aColsRespAc) == 0
		aColsRespAc := BlankGetD(aHeadRespAc)
	EndIf

Return .T.
//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaEnvolOPE

Monta aCols e aHeader dos Envolvidos na Ocorrência do Plano Emergencial.

@author Juliani Schlickmann Damasceno
@since 15/09/2014

@param aHeadOcoEnv - Tipo do cabeçalho que será exibido, Envolvidos na Ocorrência
                  do Plano Emergencial
      aColsOcoEnv - Linhas a serem apresentadas dos Envolvidos na Ocorrência
                  do Plano Emergencial

@return .T.
/*/
//----------------------------------------------------------------------------------
Static Function SgaEnvolOPE(aHeadOcoEnv,aColsOcoEnv)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TC5_TIPENV" , "TC5_CODMAT", "TC5_NOME"}

   //Monta aHeader de documentos
   aHeadOcoEnv := fConsultSX3("TC5", aChoice)

	dbSelectArea("TC1")
	dbSetOrder(1)
	dbSeek(xFilial("TC1") + Padr((cTRBSGA)->CODTIPO,Len(TC1->TC1_CODOCO)))
   //Monta aCols
	dbSelectArea("TC5")
	dbSetOrder(1)
	dbSeek(xFilial("TC5") + TC1->TC1_CODOCO )
	nC := 0
	While !EoF() .And. TC1->TC1_FILIAL == xFilial("TC5") .And. TC1->TC1_CODOCO == TC5->TC5_CODOCO

		nC++
		aAdd(aColsOcoEnv, Array(Len(aHeadOcoEnv)+1))
		For nX := 1 to Len(aHeadOcoEnv)
			If aHeadOcoEnv[nX][10] == "V"
				aColsOcoEnv[nC,nX] := CriaVar(AllTrim(aHeadOcoEnv[nX,2]))
			ElseIf !Empty(aHeadOcoEnv[nX][11])
				aColsOcoEnv[nC,nX] := NGRETSX3BOX(aHeadOcoEnv[nX,2],FieldGet(FieldPos(aHeadOcoEnv[nX,2])))
			Else
				aColsOcoEnv[nC,nX] := FieldGet(FieldPos(aHeadOcoEnv[nX,2]))
			EndIf
		Next
		aColsOcoEnv[nC,Len(aHeadOcoEnv)+1] := .F.

		TC5->(dbSkip())
	EndDo

	If Len(aColsOcoEnv) == 0
		aColsOcoEnv := BlankGetD(aHeadOcoEnv)
	EndIf

Return .T.

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  SgaResOPE

Monta aCols e aHeader dos Resíduos da Ocorrência do Plano Emergencial.

@author Juliani Schlickmann Damasceno
@since 15/09/2014

@param aHeadResOco - Tipo do cabeçalho que será exibido, Resíduos da Ocorrência
                  do Plano Emergencial
      aColsResOco - Linhas a serem apresentadas dos Resíduos da Ocorrência
                  do Plano Emergencial

@return .T.
/*/
//----------------------------------------------------------------------------------
Static Function SgaResOPE(aHeadResOco,aColsResOco)

	Local nX
	Local nC
	Local aChoice

   //Campos que serão exibidos
	aChoice := {"TCI_CODRES" , "TCI_DESCRE","TCI_UNIMED", "TCI_QTDE"}

   //Monta aHeader de documentos
   aHeadResOco := fConsultSX3("TCI", aChoice)

	dbSelectArea("TC1")
	dbSetOrder(1)
	dbSeek(xFilial("TC1") + Padr((cTRBSGA)->CODTIPO,Len(TC1->TC1_CODOCO)))
   //Monta aCols
	dbSelectArea("TCI")
	dbSetOrder(1)
	dbSeek(xFilial("TCI") + TC1->TC1_CODOCO )
	nC := 0
	While !EoF() .And. TC1->TC1_FILIAL == xFilial("TCI") .And. TC1->TC1_CODOCO == TCI->TCI_CODOCO

		nC++
		aAdd(aColsResOco, Array(Len(aHeadResOco)+1))
		For nX := 1 to Len(aHeadResOco)
			If aHeadResOco[nX][10] == "V"
				aColsResOco[nC,nX] := CriaVar(AllTrim(aHeadResOco[nX,2]))
			ElseIf !Empty(aHeadResOco[nX][11])
				aColsResOco[nC,nX] := NGRETSX3BOX(aHeadResOco[nX,2],FieldGet(FieldPos(aHeadResOco[nX,2])))
			Else
				aColsResOco[nC,nX] := FieldGet(FieldPos(aHeadResOco[nX,2]))
			EndIf
		Next
		aColsResOco[nC,Len(aHeadResOco)+1] := .F.

		TCI->(dbSkip())
	EndDo

	If Len(aColsResOco) == 0
		aColsResOco := BlankGetD(aHeadResOco)
	EndIf

Return .T.
//---------------------------------------------------------------------------------
/*/{Protheus.doc}  AddUserFld
Adiciona campos criado pelo usuario na tela de Inclusão de Identificação(TAF),
utilizado no ponto de entrada MNTA902B.
@author Jean Pytter da Costa
@since 23/01/2015
@param aUserTAF - Array que recebe valores do ponto de entrada MNTA902B
@param aCampos - Array que recebe os campos criado pelo usuario.
@param lAddTrb - Verifica se deve ser adicionado da TRB..
@return
/*/
//---------------------------------------------------------------------------------
Static Function AddUserFld(aUserTAF, aArrAux, lAddTrb)

	Local aArea    := GetArea()
	Local nFld
	Local cCampo 	:= ""
	Local cTipo 	:= ""
	Local nTamanho 	:= 0
	Local nDecimal 	:= 0

	Default lAddTrb := .T.

	If lAddTrb
		For nFld := 1 To Len(aUserTAF)
			cCampo := Posicione("SX3",2,aUserTAF[nFld][1],"X3_CAMPO")
			If !Empty(cCampo)
				cTipo := Posicione("SX3",2,aUserTAF[nFld][1],"X3_TIPO")
				nTamanho := Posicione("SX3",2,aUserTAF[nFld][1],"X3_TAMANHO")
				nDecimal := Posicione("SX3",2,aUserTAF[nFld][1],"X3_DECIMAL")
				aAdd(aArrAux, {cCampo, cTipo, nTamanho, nDecimal} )
			EndIf
		Next nFld
	Else
		For nFld := 1 To Len(aUserTAF)
			cCampo := Posicione("SX3",2,aUserTAF[nFld][1],"X3_CAMPO")
			If !Empty(cCampo)
				aAdd(aArrAux,{ AllTrim(cCampo), "(cTRBSGA)->" + AllTrim(cCampo) } )
			EndIf
		Next nFld
	EndIf

	RestArea(aArea)

Return
//---------------------------------------------------------------------------------
/*/{Protheus.doc}  RecUserFld
Faz a gravação dos valores dos campos.
@author Jean Pytter da Costa
@since 23/01/2015
@param aUserTAF - Array que recebe valores do ponto de entrada MNTA902B
@param cOrigem - Variavel que possui o valor.
@param cDestino - Variavel que recebe o valor.
@return
/*/
//---------------------------------------------------------------------------------
Static Function RecUserFld(aUserTAF, cOrigem, cDestino)

	Local nFld
	For nFld := 1 To Len(aUserTAF)
		&( cDestino + "->" + aUserTAF[nFld][1] ) := &( cOrigem + "->" + aUserTAF[nFld][1] )
	Next nFld

Return

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  BloqTree

Verifica se o usuário atual possui privilégios de inclusão,
alteração e exclusão em outras árvores lógicas pertencentes
a outras filiais.

@author Éwerton Cercal
@since 18/08/2015
@version P12
@return .T. - Lógico
/*/
//---------------------------------------------------------------------------------

Static Function BloqTree()

	Local cCodUsr := RetCodUsr()
	Local nI := 0

	aAcess := aClone(fAcessUser(cCodUsr,.T.))

	For nI := 1 To Len(aAcess)
		aAdd(aFilUsr,SubStr(aAcess[nI], 3))
	Next nI

Return .T.

//---------------------------------------------------------------------
/*/{Protheus.doc} fAcessUser
Função para buscar as empresas e filiais as quais um determinado
usuário possui acesso.

@param String cVerCodUsr: Opcional;
Indica um usuário em específico para
pesquisar.
Default: Usuário Atual.

@param Boolean lShowMsg: Opcional;
Indica se deve mostrar a mensagem.
.T. - Mostra a mensagem
.F. - Nao mostra a mensagem
Default: .F.

@author Éwerton Cercal
@since 21/08/2015
@version P12
@return Array aUsrAccess: Array com as empresas/filiais as
   quais o usuário possui acesso.

/*/
//---------------------------------------------------------------------

Static Function fAcessUser(cVerCodUsr, lShowMsg)

	Local aArea      := GetArea()
	Local aRetAcess  := {} //Retorno da PswRet, evitando multiplas chamadas.
	Local aUsrAccess := {}
	Local aGroups    := {}
	Local nGroup     := 0
	Local nEmpFil    := 0
	Local nTotal     := 0
	Local cPriorAcs  := "" //Nível de prioridade de acesso do usuário.

	Default cVerCodUsr := RetCodUsr()
	Default lShowMsg   := .F.

	PswOrder(1)
	If PswSeek(cVerCodUsr,.T.)
		dbSelectArea("SM0")
		aArea     := GetArea()
		aRetAcess := PswRet(0)

		//------------------------------------------//
		//Prioridade de Acesso do Usuário:          //
		//	0 - Não encontrou o usuário informado;  //
	    //	1 - Prioriza regra por grupo;           //
		//	2 - Desconsidera regra por grupo;       //
		//	3 - Soma regra por grupo.               //
		//------------------------------------------//
		cPriorAcs := FWUsrGrpRule(__cUserID)

      	//Verifica se a restrição será pelo grupo de usuários
		If Len(aRetAcess[1][10]) > 0 .And. cPriorAcs == "1"

			aGroups := aRetAcess[1][10]
			For nGroup := 1 To Len(aGroups) //Adiciona as Empresas e Filiais de todos os Grupos do usuário

				If PswSeek(aGroups[nGroup],.F.) //Seta no Grupo para buscar informações

					aEmpFil := FWGrpEmp(aGroups[nGroup]) //Verifica e adiciona Empresa e Filial permitida para o grupo
					For nEmpFil := 1 To Len(aEmpFil)
						If aScan(aUsrAccess,aEmpFil[nEmpFil]) == 0 //Verifica se já não foi adicionado na array
							aAdd(aUsrAccess,aEmpFil[nEmpFil])
						EndIf
					Next nEmpFil

				EndIf
			Next nGroup

		ElseIf cPriorAcs == "2" //Verifica se as restrições serão direto do usuário
			aUsrAccess := aRetAcess[2][6]
		ElseIf cPriorAcs == "3" //Verifica se as restrições serão somadas entre usuário e grupo

			aUsrAccess := aRetAcess[2][6]
			aGroups    := aRetAcess[1][10]
			For nGroup := 1 To Len(aGroups) //Adiciona as Empresas e Filiais de todos os Grupos do usuário

				If PswSeek(aGroups[nGroup],.F.) //Seta no Grupo para buscar informações

					aEmpFil := FWGrpEmp(aGroups[nGroup]) //Verifica e adiciona Empresa e Filial permitida para o grupo
					For nEmpFil := 1 To Len(aEmpFil)
						If aScan(aUsrAccess,aEmpFil[nEmpFil]) == 0 //Verifica se já não foi adicionado na array
							aAdd(aUsrAccess,aEmpFil[nEmpFil])
						EndIf
					Next nEmpFil

				EndIf
			Next nGroup

		EndIf

      	//Verifica se array contem todas as empresas e filiais
		dbSelectArea("SM0")
		dbGoTop()
		dbEval({|| nTotal++},,{ || aScan( aUsrAccess,{ SM0->M0_CODIGO + SM0->M0_CODFIL } ) == 0 } )

      	//Se todas as empresas e filiais estiverem na array, troca-se para @@@@
      	//Reduzindo a lentidao e nao ocorrendo erro de overflow
		If nTotal == 0
			aUsrAccess := {"@@@@"}
		EndIf
	EndIf

	If lShowMsg .And. Len(aUsrAccess) == 0 .And. Len(aRetAcess[2][6]) == 0
		ApMsgAlert("Usuário não encontrado no cadastro do sistema.")//"Usuário não encontrado no cadastro do sistema."
		Return aUsrAccess
	EndIf

	RestArea(aArea)

Return aUsrAccess

//---------------------------------------------------------------------
/*/{Protheus.doc} fVerifFil
Função para verificar quais filiais o usuário poderá incluir, alterar
e excluir.

@author Éwerton Cercal
@since 31/08/2015
@version P11
@return lRet - Lógico

/*/
//---------------------------------------------------------------------

Static Function fVerifFil()

	Local nI   := 0
	Local lRet := .F.

	If !Empty(aFilUsr)
		If aFilUsr[1] == "@@"
			lRet := .T.
		Else
			For nI := 1 To Len(aFilUsr)
				If AllTrim(SubStr(oTree:GetCargo(), 7)) == AllTrim(aFilUsr[nI])
					lRet := .T.
					Exit
				EndIf
			Next nI
		EndIf
	Else
		lRet := .T.
	EndIf

Return lRet

//---------------------------------------------------------------------
/*/{Protheus.doc} fRunSP
Consulta otimizada para buscar das informações da legenda da árvore lógica
atráves de uma Stored Procedure

 @author Felipe Nathan Welter
  @since 15/07/2016
@version P12
 @return EQUIPMENTS,                         - Bens.
         LOCALIZATIONS,                      - Identificações.
         LATE_ORDERS,                        - Ordem de Serviço Atrasada.
         IN_DAY_ORDERS,                      - OS em dias.
         JUSTIFIED_LATE_ORDERS (JUST_LT_OS), - OS com atrasos justificados.
         DISTRIBUTED_SS,                     - SS Distribuída.
         IN_ANALYSIS_SS,                     - SS em análise.
         JUSTIFIED_LATE_SS (JUST_LT_SS)      - SS atrasada com justificativa.

 Tabelas acessadas: TAF, STJ, TT7, TPL
/*/
//---------------------------------------------------------------------
Static Function fRunSP(cCodNiv,cTipoNiv,cNivSup,cCodSS)

	Local cQuery   := ''
	Local cErro    := ''
	Local cNivSS   := ''
	Local aValues  := {}

	Private cNGMULOS := If(AllTrim(GetNewPar("MV_NGMULOS","N")) == "S","1","2")

	If cTipoNiv = 'SSD' .Or. cTipoNiv = 'SSM'
      // Caso o nivel selecionado seja uma SS Distribuída (SSD) ou com Motivo de Atraso (SSM), esse não existirá na tabela TAF
      // Dessa forma, para que a legenda funcione corretamente, será utilizado o CodNivel superior da SS.
		cNivSS  := cCodNiv
		cCodNiv := cNivSup
	Else
		cCodSS  := ""
	EndIf

	If !TCSPExist(cSPName)
		fCreateSP(cSPName,cNivSS,cCodSS)
	EndIf

	aValues := TCSPEXEC(cSPName, cCodNiv, xFilial( 'TAF' ), xFilial( 'STJ' ), xFilial( 'TPL' ), xFilial( 'TQB' ), xFilial( 'TT7' ) )

	If TCSPExist(cSPName)
		cQuery := 'DROP PROCEDURE '+cSPName
		TCSqlExec(cQuery)
		If lByORA
			cQuery := 'DROP TABLE '+cNameChc
			TCSqlExec(cQuery)
			cQuery := 'DROP TABLE '+cNameCOO
			TCSqlExec(cQuery)
			cQuery := 'DROP TABLE '+cNameCOS
			TCSqlExec(cQuery)
		EndIf
	EndIf

Return aValues

//---------------------------------------------------------------------
/*/{Protheus.doc} fCreateSP
Consulta otimizada para buscar das informações da legenda da árvore lógica
atráves de uma Stored Procedure

 @author Marcelo Antonio Camargo
 @author Felipe Nathan Welter
  @since 15/07/2016
@version P12
 @return EQUIPMENTS,                         - Bens.
         LOCALIZATIONS,                      - Identificações.
         LATE_ORDERS,                        - Ordem de Serviço Atrasada.
         IN_DAY_ORDERS,                      - OS em dias.
         JUSTIFIED_LATE_ORDERS (JUST_LT_OS), - OS com atrasos justificados.
         DISTRIBUTED_SS,                     - SS Distribuída.
         IN_ANALYSIS_SS,                     - SS em análise.
         JUSTIFIED_LATE_SS (JUST_LT_SS)      - SS atrasada com justificativa.

 Tabelas acessadas: TAF, STJ, TT7, TPL
/*/
//---------------------------------------------------------------------
Static Function fCreateSP(cSPName,cNivSS,cCodSS)

	Local cErro := ''

	If lBySQL
		cErro := fQrySQL(cSPName,cNivSS,cCodSS)
	ElseIf lByORA
		cErro := fQryORA(cSPName,cNivSS,cCodSS)
	EndIf

Return cErro

//---------------------------------------------------------------------
/*/{Protheus.doc} fQrySQL
Retorna a query da consulta otimizada via SQL.

@author Marcelo Antonio Camargo
@author Felipe Nathan Welter
@since 11/08/2017
@version P12
/*/
//---------------------------------------------------------------------
Static Function fQrySQL(cSPName,cNivSS,cCodSS)

	Local cQuery   := ''
	Local cErro    := ''
	Local cSizeFil := Trim( Str( FwSizeFilial() ) )

	Local cSX2TAF := RetSQLName("TAF")
	Local cSX2STJ := RetSQLName("STJ")
	Local cSX2TPL := RetSQLName("TPL")
	Local cSX2TQB := RetSQLName("TQB")
	Local cSX2TT7 := RetSQLName("TT7")

	cQuery := "CREATE PROCEDURE " + cSPName + " ( "
	cQuery += "   @ROOT CHAR(3), " // Valores definidos no parâmetrp
	cQuery += '   @FILTAF CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILSTJ CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILTPL CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILTQB CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILTT7 CHAR( ' + cSizeFil + ' ), '

   	//Valores que serão retornados quando na execussão da Procedure
	cQuery += "   @EQUIPMENTS     INT OUT, "
	cQuery += "   @LOCALIZATIONS  INT OUT, "
	cQuery += "   @LATE_ORDERS    INT OUT, "
	cQuery += "   @IN_DAY_ORDERS  INT OUT, "
	cQuery += "   @JUST_LT_OS     INT OUT, "
	cQuery += "   @DISTRIBUTED_SS INT OUT, "
	cQuery += "   @IN_ANALYSIS_SS INT OUT, "
	cQuery += "   @JUST_LT_SS     INT OUT) AS"

   	//Cache de todos os itens da TAF
	cQuery += " DECLARE @CACHE TABLE ("
	cQuery += "    TAF_CODNIV VARCHAR(3),"
	cQuery += "    TAF_NIVSUP VARCHAR(3),"
	cQuery += "    TAF_INDCON INT,"
	cQuery += "    TAF_CODCON VARCHAR(16)"
	cQuery += ");"

   	//Cache de itens da TAF que possuem ordens de serviço vinculadas
	cQuery += " DECLARE @CACHE_OF_ORDERS TABLE ("
	cQuery += "    TJ_ORDEM   VARCHAR(6),"
	cQuery += "    TAF_CODNIV VARCHAR(3),"
	cQuery += "    TAF_NIVSUP VARCHAR(3),"
	cQuery += "    TAF_INDCON INT,"
	cQuery += "    TAF_CODCON VARCHAR(16),"
	cQuery += "    IS_LATE    BIT"
	cQuery += ");"

   	//Cache de itens da TQB
	cQuery += " DECLARE @CACHE_OF_SS TABLE ("
	cQuery += "    TQB_SOLICI CHAR(6),"
	cQuery += "    TQB_CODBEM VARCHAR(16),"
	cQuery += "    TQB_SOLUCA CHAR(1),"
	cQuery += "    TQB_ORDEM  VARCHAR(6)"
	cQuery += ");"

	//CTE para consulta com base em uma âncora (default = '000')
	cQuery += " WITH RECUR_TAF AS"
	cQuery += " ("
	//Ponto de entrada
	cQuery += "  SELECT TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON"
	cQuery += "    FROM " + cSX2TAF
	cQuery += "   WHERE TAF_CODNIV = @ROOT"      // Elemento base
	cQuery += "     AND TAF_FILIAL = @FILTAF" // Filtro por filial
	cQuery +=        " AND TAF_MODMNT <> ''"
	cQuery +=        " AND TAF_INDCON <> '0'"
	cQuery += "     AND D_E_L_E_T_ <> '*' "
	cQuery += "   UNION ALL"
	//Chamada otimizada
	cQuery += "  SELECT A.TAF_CODNIV, A.TAF_NIVSUP, A.TAF_INDCON, A.TAF_CODCON"
	cQuery += "    FROM " + cSX2TAF + " A"
	cQuery += "   INNER JOIN RECUR_TAF R "
	cQuery += "      ON A.TAF_NIVSUP  = R.TAF_CODNIV"
	cQuery += "   WHERE A.TAF_FILIAL  = @FILTAF" // Filtro por filial
	cQuery +=        " AND A.TAF_MODMNT <> ''"
	cQuery +=        " AND A.TAF_INDCON <> '0'"
	cQuery += "     AND A.D_E_L_E_T_   <> '*' "
	cQuery += " )"

	cQuery += "INSERT INTO @CACHE (TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON)"
	cQuery += "  (SELECT * FROM RECUR_TAF);"

	//Equipamentos e localizações com seus valores já processados
	cQuery += " SET @EQUIPMENTS    = (SELECT COUNT(1)      FROM @CACHE C WHERE C.TAF_INDCON = 1) "
	cQuery += " SET @LOCALIZATIONS = (SELECT COUNT(1) - 1  FROM @CACHE C WHERE C.TAF_INDCON = 2);"
	cQuery += " SET @LOCALIZATIONS = CASE WHEN @LOCALIZATIONS < 0 THEN 0 ELSE @LOCALIZATIONS END;"

	//Cachear o tempo atual para consulta
	cQuery += " DECLARE @NOW CHAR(12) ;"
	cQuery += " SET @NOW = '" + DTOS(date()) + SubStr( StrTran(Time(),":", ""), 1, 4 ) + "';"

	//Cachear os itens que possuem ordens liberadas e não finalizadas
	cQuery += "  INSERT INTO @CACHE_OF_ORDERS (TJ_ORDEM, TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON, IS_LATE)"
	cQuery += "  SELECT STJ.TJ_ORDEM, C.TAF_CODNIV, C.TAF_NIVSUP, C.TAF_INDCON, C.TAF_CODCON, ("
	cQuery += "    CASE WHEN @NOW > (TJ_DTMPFIM + REPLACE(TJ_HOMPFIM, ':', '')) THEN 1"
	cQuery += "    ELSE 0"
	cQuery += "    END) AS IS_LATE"
	cQuery += "    FROM " + cSX2STJ + " STJ, @CACHE C"
	cQuery += "   WHERE STJ.TJ_CODBEM = (" //-- Quando for equipamento, buscar o CODCON
	cQuery += "    CASE C.TAF_INDCON"    //-- Senão, buscar o CODNIV
	cQuery += "      WHEN 1 THEN C.TAF_CODCON"
	cQuery += "      ELSE C.TAF_CODNIV"
	cQuery += "    END) "
	cQuery += "     AND STJ.TJ_TERMINO = 'N' "
	cQuery += "     AND STJ.TJ_SITUACA = 'L' "
	cQuery += "     AND STJ.TJ_FILIAL  = @FILSTJ " //Filtro por filial
	cQuery += IIf(!Empty(cCodSS),"AND STJ.TJ_SOLICI = " + ValToSQL(cCodSS),"")
	cQuery += "     AND STJ.D_E_L_E_T_ <> '*';"

	//Localizar todas as ordens em dia
	cQuery += " SET @IN_DAY_ORDERS = ("
	cQuery += "  SELECT COUNT(1)"
	cQuery += "    FROM @CACHE_OF_ORDERS O"
	cQuery += "   WHERE O.IS_LATE = 0"
	cQuery += ");"

	//Localizar todas as ordens atrasadas justificadas.
	cQuery += " SET @JUST_LT_OS = ("
	cQuery += "   SELECT COUNT(1)"
	cQuery += "     FROM @CACHE_OF_ORDERS O"
	cQuery += "     JOIN " + cSX2TPL + " TPL "
	cQuery += "       ON TPL.TPL_FILIAL = @FILTPL "
	cQuery += "      AND TPL.TPL_ORDEM  = TJ_ORDEM "
	cQuery += "      AND TPL.D_E_L_E_T_ <> '*'"
	cQuery += "    WHERE O.IS_LATE      = 1
	cQuery += " );"

	//Localizar todas as ordens atrasadas
	cQuery += "  SET @LATE_ORDERS = ("
	cQuery += "   SELECT COUNT(1)"
	cQuery += "     FROM @CACHE_OF_ORDERS O"
	cQuery += "    WHERE O.IS_LATE = 1"
	cQuery += " ) - @JUST_LT_OS;"  //desconsidera as justiificadas

	// Fazemos caching das solicitações de serviços contidas nesse nível, de maneira
	// O(n)
	cQuery += "  INSERT INTO @CACHE_OF_SS (TQB_SOLICI, TQB_CODBEM, TQB_SOLUCA, TQB_ORDEM)
	cQuery += "  SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM"
	cQuery += "    FROM @CACHE C"
	cQuery += "   INNER JOIN " + cSX2TQB + " TQB"
	cQuery += "      ON TQB.TQB_CODBEM = C.TAF_CODCON"
	cQuery += "   WHERE C.TAF_INDCON   = 1 "
	cQuery += "     AND TQB.TQB_TIPOSS = 'B' "
	cQuery += "     AND TQB.TQB_FILIAL = @FILTQB " // Filtro por filial
	cQuery += "     AND TQB.TQB_DTFECH =  '' "
	cQuery += "     AND TQB.D_E_L_E_T_ <> '*' "

	cQuery += "  UNION ALL" // Merge bem + localização

    // SS distribuídas para localizações
	cQuery += "  SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM"
	cQuery += "    FROM @CACHE C"
	cQuery += "   INNER JOIN " + cSX2TQB + " TQB"
	cQuery += "      ON TQB.TQB_CODBEM = C.TAF_CODNIV"
	cQuery += "   WHERE C.TAF_INDCON   = 2 "
	cQuery += "     AND TQB.TQB_TIPOSS = 'L'"
	cQuery += "     AND TQB.TQB_FILIAL = @FILTQB " // Filtro por filial
	cQuery += "     AND TQB.TQB_DTFECH = ''"
	cQuery += "     AND TQB.D_E_L_E_T_ <> '*';"

	//Quando o Parametro o MV_NGMULOS estiver como sim(1), a SS poderá ter mais de uma OS relacionada, e por isso o campo
	//TQB_ORDEM estará vazio, e os relacionamentos estarão todos na TT7. Por isso irá deletar da CACHE_OF_SS as SS que
	//não possuem ordem nela, porém estão na TT7. Após isso irá inserir novamente essa SS porém informando o relacionamento.
	If cNGMULOS == '1'
		cQuery += "  DELETE @CACHE_OF_SS "
		cQuery += "   WHERE TQB_ORDEM   = ' ' "
		cQuery += "     AND EXISTS "
		cQuery += "        (SELECT * "
		cQuery += "           FROM " + cSX2TT7
		cQuery += "          WHERE TT7_FILIAL = @FILTT7 "
		cQuery += "            AND TT7_SOLICI = TQB_SOLICI "
		cQuery += "            AND D_E_L_E_T_ = ''); "
		cQuery += " "
		cQuery += "  INSERT INTO @CACHE_OF_SS (TQB_SOLICI, TQB_CODBEM, TQB_SOLUCA, TQB_ORDEM) "
		cQuery += "  SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TT7.TT7_ORDEM "
		cQuery += "    FROM @CACHE C "
		cQuery += "   INNER JOIN " + cSX2TQB + " TQB "
		cQuery += "      ON TQB.TQB_CODBEM = C.TAF_CODCON
		cQuery += "   INNER JOIN " + cSX2TT7 + " TT7 "
		cQuery += "      ON TQB.TQB_SOLICI = TT7.TT7_SOLICI "
		cQuery += "   WHERE C.TAF_INDCON   = 1 "
		cQuery += "     AND TQB.TQB_FILIAL = @FILTQB "
		cQuery += "     AND TQB.TQB_TIPOSS = 'B' "
		cQuery += "     AND TQB.TQB_DTFECH = '' "
		cQuery += "     AND TQB.TQB_FILIAL = TT7.TT7_FILIAL "
		cQuery += "     AND TQB.D_E_L_E_T_ <> '*' "
		cQuery += "   UNION ALL "
		cQuery += "  SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TT7.TT7_ORDEM "
		cQuery += "    FROM @CACHE C "
		cQuery += "   INNER JOIN " + cSX2TQB + " TQB "
		cQuery += "      ON TQB.TQB_CODBEM = C.TAF_CODNIV "
		cQuery += "   INNER JOIN " + cSX2TT7 + " TT7 "
		cQuery += "      ON TQB.TQB_SOLICI = TT7.TT7_SOLICI "
		cQuery += "   WHERE C.TAF_INDCON   = 2 "
		cQuery += "     AND TQB.TQB_FILIAL = @FILTQB "
		cQuery += "     AND TQB.TQB_TIPOSS = 'L' "
		cQuery += "     AND TQB.TQB_DTFECH = '' "
		cQuery += "     AND TQB.TQB_FILIAL = TT7.TT7_FILIAL "
		cQuery += "     AND TQB.D_E_L_E_T_ <> '*'; "
	EndIf

	// Solicitações de serviço distribuídas
	cQuery += "SET @DISTRIBUTED_SS = ("
	cQuery += "  SELECT COUNT(DISTINCT TQB_SOLICI) "
	cQuery += "    FROM @CACHE_OF_SS SS"
	cQuery += "   WHERE SS.TQB_SOLUCA = 'D'"
	cQuery += ");"

	// Solicitações de serviço em análise
	cQuery += " SET @IN_ANALYSIS_SS = ("
	cQuery += "  SELECT COUNT(DISTINCT TQB_SOLICI)"
	cQuery += "    FROM @CACHE_OF_SS SS"
	cQuery += "   WHERE SS.TQB_SOLUCA = 'A'"
	cQuery += ");"

	// Solicitações de serviço em atraso com motivo. Para que uma solicitação de
	// serviço seja considerada, ela deve estar vinculada a uma O.S. e possuir
	// motivo de atraso. Também, claro, precisa estar atrasada
	cQuery += " SET @JUST_LT_SS = 0;"
	//-- Condicionalmente definimos o acesso à TPL

	If cNGMULOS == '1'
		cQuery += "   SET @JUST_LT_SS = ("
		cQuery += "     SELECT COUNT(DISTINCT SS.TQB_SOLICI)"
		cQuery += "       FROM @CACHE_OF_SS SS"
		cQuery += "       JOIN " + cSX2TT7 + " TT7 " //-- Buscar as solicitações/ordens na TT7
		cQuery += "         ON TT7.TT7_FILIAL = @FILTT7 "
		cQuery += "        AND TT7.TT7_SOLICI = SS.TQB_SOLICI "
		cQuery += "        AND TT7.D_E_L_E_T_ <> '*'"
		cQuery += "       JOIN " + cSX2TPL + " TPL "// -- Buscar a razão do atraso
		cQuery += "         ON TPL.TPL_FILIAL = @FILTPL "
		cQuery += "        AND TPL.TPL_ORDEM  = SS.TQB_ORDEM "
		cQuery += "        AND TPL.D_E_L_E_T_ <> '*'"
		cQuery += "       JOIN @CACHE_OF_ORDERS O " //-- Verificar se está mesmo atrasada
		cQuery += "         ON O.TJ_ORDEM = SS.TQB_ORDEM "
		cQuery += "        AND O.IS_LATE  = 1) "
	Else
		cQuery += "   SET @JUST_LT_SS = ("
		cQuery += "     SELECT COUNT(DISTINCT SS.TQB_SOLICI)"
		cQuery += "       FROM @CACHE_OF_SS SS"
		cQuery += "       JOIN " + cSX2TPL + " TPL "
		cQuery += "          ON TPL.TPL_ORDEM   = SS.TQB_ORDEM "
		cQuery += "        AND TPL.D_E_L_E_T_ <> '*' " // -- Buscar razão na TPL
		cQuery += "       JOIN @CACHE_OF_ORDERS O "    //-- Verificar se está mesmo atrasada
		cQuery += "         ON O.TJ_ORDEM = SS.TQB_ORDEM "
		cQuery += "        AND O.IS_LATE  = 1 )"
	EndIf

	//Caso esteja posicionado em cima de um bem, ele não terá bens filhos.
	cQuery += " IF EXISTS ( "
	cQuery += "           SELECT DISTINCT 1 "
	cQuery += "             FROM " + cSX2TAF + " TAF "
	cQuery += "            WHERE TAF.TAF_FILIAL = @FILTAF"
	cQuery += "              AND TAF.TAF_INDCON = 1 "
	cQuery += "              AND TAF.TAF_CODNIV = @ROOT "
	cQuery += "          ) "
	cQuery += "     BEGIN "
	cQuery += "       SET @EQUIPMENTS = 0 "
	cQuery += "      END "

	//Caso ele esteja possicionado em cima de uma SS, ela não terá Bem, e SS filhos.
	If !Empty(cNivSS)
		cQuery += " SET @EQUIPMENTS     = 0 "
		cQuery += " SET @DISTRIBUTED_SS = 0 "
		cQuery += " SET @IN_ANALYSIS_SS = 0 "
		cQuery += " SET @JUST_LT_SS     = 0 "
	EndIf

	//Uma SS com motivo de atraso, é considerada uma SS distribuída também. Por isso, é retirada subtraidas das SS distribuidas
	//as SS que estão com motivo de atraso.
	cQuery += " SET @DISTRIBUTED_SS = @DISTRIBUTED_SS - @JUST_LT_SS "

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
	EndIf

Return cErro

//---------------------------------------------------------------------
/*/{Protheus.doc} fQryORA
Retorna a query da consulta otimizada via Oracle.

@author Marcelo Antonio Camargo
@author Felipe Nathan Welter
@since 11/08/2017
@version P12
/*/
//---------------------------------------------------------------------
Static Function fQryORA(cSPName,cNivSS,cCodSS)

	Local cQuery   := ''
	Local cErro    := ''

	Local cSX2TAF  := RetSQLName("TAF")
	Local cSX2STJ  := RetSQLName("STJ")
	Local cSX2TPL  := RetSQLName("TPL")
	Local cSX2TQB  := RetSQLName("TQB")
	Local cSX2TT7  := RetSQLName("TT7")

	cQuery := " CREATE GLOBAL TEMPORARY TABLE " + cNameChc + "(TAF_CODNIV CHAR(16),  "
	cQuery += "                                                TAF_NIVSUP CHAR(3),  "
	cQuery += "                                                TAF_INDCON INT,          "
	cQuery += "                                                TAF_CODCON CHAR(16)) "
	cQuery += " ON COMMIT DELETE ROWS                                                   "

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
	EndIf

	cQuery := " CREATE GLOBAL TEMPORARY TABLE " + cNameCOO + "(TJ_ORDEM   CHAR(6),  "
	cQuery += "                                                TAF_CODNIV CHAR(16),  "
	cQuery += "                                                TAF_NIVSUP CHAR(3),  "
	cQuery += "                                                TAF_INDCON INT,          "
	cQuery += "                                                TAF_CODCON CHAR(16), "
	cQuery += "                                                IS_LATE    NUMBER(1))    "
	cQuery += " ON COMMIT DELETE ROWS                                                   "

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
		cQuery := " DROP TABLE "+ cNameChc
		TCSQLExec(cQuery)
	EndIf

	cQuery := " CREATE GLOBAL TEMPORARY TABLE " + cNameCOS + "(TQB_SOLICI CHAR(6),  "
	cQuery += "                                                TQB_CODBEM CHAR(16), "
	cQuery += "                                                TQB_SOLUCA CHAR(1),  "
	cQuery += "                                                TQB_ORDEM  CHAR(6))  "
	cQuery += " ON COMMIT DELETE ROWS                                                   "

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
		cQuery := " DROP TABLE "+ cNameChc
		TCSQLExec(cQuery)
		cQuery := " DROP TABLE "+ cNameCOO
		TCSQLExec(cQuery)
	EndIf

	If Empty(cErro)

		cQuery := " CREATE OR REPLACE PROCEDURE " + cSPName + " ("
		cQuery += "                                              p_ROOT CHAR, " // Valores definidos no parâmetro
		cQuery += "                                            P_FILTAF CHAR, "
		cQuery += "                                            P_FILSTJ CHAR, "
		cQuery += "                                            P_FILTPL CHAR, "
		cQuery += "                                            P_FILTQB CHAR, "
		cQuery += "                                            P_FILTT7 CHAR, "

		//Valores que serão retornados quando na execussão da Procedure
        cQuery += "                                              p_EQUIPMENTS     OUT  NUMBER, "
        cQuery += "                                              p_LOCALIZATIONS  OUT  NUMBER, "
        cQuery += "                                              p_LATE_ORDERS    OUT  NUMBER, "
        cQuery += "                                              p_IN_DAY_ORDERS  OUT  NUMBER, "
        cQuery += "                                              p_JUST_LT_OS     OUT  NUMBER, "
        cQuery += "                                              p_DISTRIBUTED_SS OUT  NUMBER, "
        cQuery += "                                              p_IN_ANALYSIS_SS OUT  NUMBER, "
        cQuery += "                                              p_JUST_LT_SS     OUT  NUMBER) IS "

		//Outras variáveis utilizadas na procedure.
        cQuery += "   v_NOW CHAR(20); "
        cQuery += "   v_Exis NUMBER; "

		cQuery += " BEGIN "

		cQuery += "    INSERT INTO " + cNameChc
		//CTE para consulta com base em uma âncora (default = '000')
        cQuery += "    WITH RECUR_TAF(TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON) AS "
		cQuery += "    ( "
		cQuery += "    SELECT TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON "
		cQuery += "      FROM " + cSX2TAF
		cQuery += "     WHERE TAF_CODNIV = p_ROOT "    // Elemento base
		cQuery += "       AND TAF_FILIAL = P_FILTAF " // Filtro por filial
		cQuery +=          " AND TAF_MODMNT <> ' '"
		cQuery +=          " AND TAF_INDCON <> '0'"
		cQuery += "       AND D_E_L_E_T_ <> '*' "
		cQuery += "     UNION ALL "
		//Chamada otimizada
		cQuery += "    SELECT A.TAF_CODNIV, A.TAF_NIVSUP, A.TAF_INDCON, A.TAF_CODCON "
		cQuery += "      FROM " + cSX2TAF + " A "
		cQuery += "     INNER JOIN RECUR_TAF R "
		cQuery += "    		    ON A.TAF_NIVSUP = R.TAF_CODNIV "
		cQuery += "     WHERE A.TAF_FILIAL = P_FILTAF " // Filtro por filial
		cQuery +=          " AND A.TAF_MODMNT <> ' '"
		cQuery +=          " AND A.TAF_INDCON <> '0'"
		cQuery += "       AND A.D_E_L_E_T_ <> '*') "
		cQuery += "    SELECT TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON FROM RECUR_TAF; "

		//Equipamentos e localizações com seus valores já processados
		cQuery += "    SELECT Count(1)     INTO p_EQUIPMENTS    FROM " + cNameChc + " C WHERE C.TAF_INDCON = 1; "
		cQuery += "    SELECT Count(1) - 1 INTO p_LOCALIZATIONS FROM " + cNameChc + " C WHERE C.TAF_INDCON = 2;"
		cQuery += "    IF p_LOCALIZATIONS < 0 THEN "
		cQuery += "       p_LOCALIZATIONS := 0; "
		cQuery += "    END IF; "

		cQuery += "      V_NOW := '" + DTOS(date()) + SubStr( StrTran(Time(),":", ""), 1, 4 ) + "';"

		//Cachear os itens que possuem ordens liberadas e não finalizadas
		cQuery += "    INSERT INTO " + cNameCOO + " (TJ_ORDEM, TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON, IS_LATE) "
		cQuery += "    SELECT STJ.TJ_ORDEM, C.TAF_CODNIV, C.TAF_NIVSUP, C.TAF_INDCON, C.TAF_CODCON, "
		cQuery += " 	    ( CASE WHEN v_NOW > TJ_DTMPFIM || REPLACE(TJ_HOMPFIM, ':', '') THEN 1 "
		cQuery += " 		    ELSE 0 "
		cQuery += " 		    END ) AS IS_LATE "
		cQuery += "      FROM " + cSX2STJ + " STJ, " + cNameChc + " C "
		cQuery += "     WHERE STJ.TJ_CODBEM = ( " //-- Quando for equipamento, buscar o CODCON
		cQuery += "        CASE C.TAF_INDCON " //-- Senão, buscar o CODNIV
		cQuery += "           WHEN 1 THEN  C.TAF_CODCON
		cQuery += "           ELSE C.TAF_CODNIV "
		cQuery += "        END ) "
		cQuery += "       AND STJ.TJ_TERMINO = 'N' "
		cQuery += "       AND STJ.TJ_SITUACA = 'L' "
		cQuery += "       AND STJ.TJ_FILIAL  = P_FILSTJ " //Filtro por filial
		cQuery += IIf(!Empty(cCodSS),"       AND STJ.TJ_SOLICI = " + ValToSQL(cCodSS),"")
		cQuery += "       AND STJ.D_E_L_E_T_ <> '*'; "

		//Localizar todas as ordens em dia
		cQuery += "    SELECT Count(1) INTO p_IN_DAY_ORDERS FROM " + cNameCOO + " O WHERE O.IS_LATE = 0;"

		//Localizar todas as ordens atrasadas justificadas. Utilizar o parâmetro
		//MV_NGMULOS para selecionar a tabela adequada
		cQuery += "    SELECT Count(1) INTO p_JUST_LT_OS "
		cQuery += "      FROM " + cNameCOO + " O "
		cQuery += "      JOIN " +  cSX2TPL + " TPL "
		cQuery += "        ON TPL.TPL_FILIAL = P_FILTPL "
		cQuery += "       AND TPL.TPL_ORDEM  = TJ_ORDEM "
		cQuery += "       AND TPL.D_E_L_E_T_ <> '*' "
		cQuery += "     WHERE O.IS_LATE      = 1; "

		//Localizar todas as ordens atrasadas
		cQuery += "    SELECT Count(1) INTO p_LATE_ORDERS "
		cQuery += "      FROM " + cNameCOO + " O "
		cQuery += "     WHERE O.IS_LATE = 1; "

		cQuery += "    p_LATE_ORDERS := p_LATE_ORDERS - p_JUST_LT_OS; " //desconsidera as justiificadas

		// Fazemos caching das solicitações de serviços contidas nesse nível, de maneira O(n)
		cQuery += "    INSERT INTO " + cNameCOS + " (TQB_SOLICI, TQB_CODBEM, TQB_SOLUCA, TQB_ORDEM) "
		cQuery += "    SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM "
		cQuery += "      FROM " + cNameChc + " C "
		cQuery += "     INNER JOIN " + cSX2TQB + " TQB "
		cQuery += "             ON TQB.TQB_CODBEM = C.TAF_CODCON "
		cQuery += "     WHERE C.TAF_INDCON = 1 "
		cQuery += "       AND TQB.TQB_TIPOSS = 'B' "
		cQuery += "       AND TQB.TQB_FILIAL = P_FILTQB "
		cQuery += "       AND TQB.TQB_DTFECH = ' ' "
		cQuery += "       AND TQB.D_E_L_E_T_ <> '*' "
		// Merge bem + localização
		cQuery += "     UNION ALL "
		// SS distribuídas para localizações
		cQuery += "    SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM
		cQuery += "      FROM " + cNameChc + " C "
		cQuery += "     INNER JOIN " + cSX2TQB + " TQB "
		cQuery += "        ON TQB.TQB_CODBEM = C.TAF_CODNIV "
		cQuery += "     WHERE C.TAF_INDCON   = 2 "
		cQuery += "       AND TQB.TQB_TIPOSS = 'L' "
		cQuery += "       AND TQB.TQB_FILIAL = P_FILTQB "
		cQuery += "       AND TQB.TQB_DTFECH = ' ' "
		cQuery += "       AND TQB.D_E_L_E_T_ <> '*'; "

		//Quando o Parametro o MV_NGMULOS estiver como sim(1), a SS poderá ter mais de uma OS relacionada, e por isso o campo
		//TQB_ORDEM estará vazio, e os relacionamentos estarão todos na TT7. Por isso irá deletar da CACHE_OF_SS as SS que
		//não possuem ordem nela, porém estão na TT7. Após isso irá inserir novamente essa SS porém informando o relacionamento.
		If cNGMULOS == '1'
			cQuery += "    DELETE " + cNameCOS + " "
			cQuery += "     WHERE TQB_ORDEM = ' ' "
			cQuery += "       AND EXISTS (SELECT * "
			cQuery += "                     FROM " + cSX2TT7
			cQuery += " 				   WHERE TT7_FILIAL = P_FILTT7 "
			cQuery += " 				     AND TT7_SOLICI = TQB_SOLICI "
			cQuery += " 				     AND D_E_L_E_T_ <> '*'); "

			cQuery += "    INSERT INTO " + cNameCOS + " (TQB_SOLICI, TQB_CODBEM, TQB_SOLUCA, TQB_ORDEM) "
			cQuery += "    SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TT7.TT7_ORDEM "
			cQuery += "      FROM " + cNameChc + " C "
			cQuery += "     INNER JOIN " + cSX2TQB + " TQB "
			cQuery += "             ON TQB.TQB_CODBEM = C.TAF_CODCON "
			cQuery += "     INNER JOIN " + cSX2TT7 + " TT7 "
			cQuery += "             ON TQB.TQB_SOLICI = TT7.TT7_SOLICI "
			cQuery += "     WHERE C.TAF_INDCON   = 1 "
			cQuery += "       AND TQB.TQB_FILIAL = P_FILTQB "
			cQuery += "       AND TQB.TQB_TIPOSS = 'B' "
			cQuery += "       AND TQB.TQB_DTFECH = ' ' "
			cQuery += "       AND TQB.TQB_FILIAL = TT7.TT7_FILIAL "
			cQuery += "       AND TQB.D_E_L_E_T_ <> '*' "
			cQuery += "       AND TT7.D_E_L_E_T_ <> '*' "
			cQuery += "     UNION ALL
			cQuery += "    SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TT7.TT7_ORDEM
			cQuery += "      FROM " + cNameChc + " C "
			cQuery += "     INNER JOIN " + cSX2TQB + " TQB "
			cQuery += "             ON TQB.TQB_CODBEM = C.TAF_CODNIV "
			cQuery += "     INNER JOIN " + cSX2TT7 + " TT7 "
			cQuery += "             ON TQB.TQB_SOLICI = TT7.TT7_SOLICI "
			cQuery += "     WHERE C.TAF_INDCON   = 2 "
			cQuery += " 	  AND TQB.TQB_FILIAL = P_FILTQB "
			cQuery += " 	  AND TQB.TQB_TIPOSS = 'L' "
			cQuery += " 	  AND TQB.TQB_DTFECH = ' ' "
			cQuery += " 	  AND TQB.TQB_FILIAL = TT7.TT7_FILIAL "
			cQuery += " 	  AND TQB.D_E_L_E_T_ <> '*' "
			cQuery += "       AND TT7.D_E_L_E_T_ <> '*'; "
		EndIf

		// Solicitações de serviço distribuídas
		cQuery += "    SELECT Count(DISTINCT TQB_SOLICI) INTO p_DISTRIBUTED_SS FROM " + cNameCOS + " SS WHERE SS.TQB_SOLUCA = 'D'; "

		// Solicitações de serviço em análise
		cQuery += "    SELECT Count(DISTINCT TQB_SOLICI) INTO p_IN_ANALYSIS_SS FROM " + cNameCOS + " SS WHERE SS.TQB_SOLUCA = 'A'; "

		// Solicitações de serviço em atraso com motivo. Para que uma solicitação de
		// serviço seja considerada, ela deve estar vinculada a uma O.S. e possuir
		// motivo de atraso. Também, claro, precisa estar atrasada
		cQuery += "    p_JUST_LT_SS := 0;

		//-- Condicionalmente definimos o acesso à TPL
		//-- O ideal é que essa verificação ocorra no AdvPL
		If cNGMULOS = '1'
			cQuery += "    SELECT Count(DISTINCT SS.TQB_SOLICI) INTO p_JUST_LT_SS "
			cQuery += "      FROM " + cNameCOS + " SS "
			cQuery += "      JOIN " + cSX2TT7 + " TT7 " //Buscar as solicitações/ordens na TT7
			cQuery += "        ON TT7.TT7_FILIAL = P_FILTT7 "
			cQuery += "       AND TT7.D_E_L_E_T_ <> '*' "
			cQuery += "      JOIN " + cSX2TPL + " TPL " //Buscar a razão do atraso
			cQuery += "        ON TPL.TPL_FILIAL = P_FILTT7 "
			cQuery += "       AND TPL.TPL_ORDEM  = SS.TQB_ORDEM "
			cQuery += "       AND TPL.D_E_L_E_T_ <> '*' "
			cQuery += "      JOIN " + cNameCOO + " O "//Verificar se está mesmo atrasada
			cQuery += "        ON O.TJ_ORDEM = SS.TQB_ORDEM "
			cQuery += "       AND O.IS_LATE  = 1; "
		Else
			cQuery += "    SELECT Count(DISTINCT SS.TQB_SOLICI) INTO p_JUST_LT_SS "
			cQuery += "      FROM " + cNameCOS + " SS "
			cQuery += "      JOIN " +  cSX2TPL + " TPL "
			cQuery += "        ON TPL.TPL_ORDEM = SS.TQB_ORDEM "
			cQuery += "       AND TPL.D_E_L_E_T_ <> '*' "
			cQuery += "      JOIN " + cNameCOO + " O "
			cQuery += "        ON O.TJ_ORDEM = SS.TQB_ORDEM "
			cQuery += "       AND O.IS_LATE = 1; "
		EndIf

		//Caso esteja posicionado em cima de um bem, ele não terá bens filhos.
		cQuery += "    BEGIN "
		cQuery += "       SELECT DISTINCT 1 INTO v_Exis "
		cQuery += "    	    FROM " + cSX2TAF + " TAF "
		cQuery += "        WHERE TAF.TAF_FILIAL = P_FILTAF "
		cQuery += "          AND TAF.TAF_INDCON = 1 "
		cQuery += "          AND TAF.TAF_CODNIV = p_ROOT "
		cQuery += "          AND TAF.D_E_L_E_T_ <> '*'; "
		cQuery += "    EXCEPTION "
		cQuery += "       WHEN NO_DATA_FOUND THEN "
		cQuery += "            v_Exis := 0; "
		cQuery += "    END; "
		cQuery += "    IF v_Exis > 0 THEN "
		cQuery += "       p_EQUIPMENTS := 0; "
		cQuery += "    END IF; "

		//Caso ele esteja possicionado em cima de uma SS, ela não terá Bem, e SS filhos.
		If !Empty(cNivSS)
			cQuery += " p_EQUIPMENTS     := 0; "
			cQuery += " p_DISTRIBUTED_SS := 0; "
			cQuery += " p_IN_ANALYSIS_SS := 0; "
			cQuery += " p_JUST_LT_SS     := 0; "
		EndIf

		cQuery += "    p_DISTRIBUTED_SS := p_DISTRIBUTED_SS - p_JUST_LT_SS; "

		cQuery += " END;"

		If (TCSQLExec(cQuery) < 0)
			cErro := TCSQLError()
		EndIf

	EndIf

Return cErro

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  fChangeClr
Altera a cor dos componentes da arvore

@author Bruno Lobo de Souza
@since 29/06/2015
@param nCor - Cor do item
@param cTipo - Tipo do item: "BEM" - Bem, "LOC" - Localização
@return
/*/
//---------------------------------------------------------------------------------
Static Function fChangeClr( nCor, cTipo )

	Local cFolderA,  cFolderB

	If cTipo == "BEM"
		If nCor == 1 //Verde
			cFolderA := "ENGRENAGEM"
			cFolderB := "ENGRENAGEM"
		ElseIf nCor == 2 //Amarelo
			cFolderA := "ng_ico_bemamarelo"
			cFolderB := "ng_ico_bemamarelo"
		Else
			cFolderA := "ng_ico_bemvermelho"
			cFolderB := "ng_ico_bemvermelho"
		EndIf
	ElseIf cTipo == "LOC" //Localização
		If nCor == 1 //Verde
			cFolderA := "FOLDER10"
			cFolderB := "FOLDER11"
		ElseIf nCor == 2 //Amarelo
			cFolderA := "FOLDER5"
			cFolderB := "FOLDER6"
		Else
			cFolderA := "FOLDER7"
			cFolderB := "FOLDER8"
		EndIf
	EndIf

Return { cFolderA, cFolderB }

//---------------------------------------------------------------------
/*/{Protheus.doc} fRunSPClr
Consulta otimizada para buscar das informações da legenda da árvore lógica
atráves de uma Stored Procedure

 @author Maicon André Pinheiro
  @since 15/07/2016
@version P12
 @return LATE_ORDERS,                        - Ordem de Serviço Atrasada.
         JUSTIFIED_LATE_ORDERS (JUST_LT_OS), - OS com atrasos justificados.
         JUSTIFIED_LATE_SS (JUST_LT_SS)      - SS atrasada com justificativa.

 Tabelas acessadas: TAF, STJ, TT7, TPL
/*/
//---------------------------------------------------------------------
Static Function fRunSPClr(cCodNiv,cTipoNiv,cNivSup)

	Local cErro    := ''
	Local aValues  := {}

	Private cNGMULOS := If(AllTrim(GetNewPar("MV_NGMULOS","N")) == "S","1","2")

	If cTipoNiv = 'SSD' .Or. cTipoNiv = 'SSM'
      	// Caso o nivel selecionado seja uma SS Distribuída (SSD) ou com Motivo de Atraso (SSM), esse não existirá na tabela TAF
      	// Dessa forma, para que a legenda funcione corretamente, será utilizado o CodNivel superior da SS.
		cCodNiv := cNivSup
	EndIf

	If !TCSPExist(cSPClr)
		fCriaSPClr(cSPClr)
	EndIf

	aValues := TCSPEXEC( cSPClr, cCodNiv, xFilial( 'TAF' ), xFilial( 'STJ' ), xFilial( 'TPL' ), xFilial( 'TQB' ), xFilial( 'TT7' ) )

	Do Case
		// Caso o nivel selecionado foi uma SS Distribuída (SSD) ou com Motivo de Atraso (SSM), o nivel utilizado para a busca da legenda,
	   	// foi o nivel superior dele. Dessa forma, esse nível encontrou o proprio nível selecionado. Portanto é necessário zerar o mesmo, para
	   	// apresentar a legenda da SS corretamente.
		Case cTipoNiv = 'SSD'
			aValues[6] := 0

		Case cTipoNiv = 'SSM'
			aValues[8] := 0
	End Case

Return aValues

//---------------------------------------------------------------------
/*/{Protheus.doc} fCriaSPClr
Consulta otimizada para buscar das informações da legenda da árvore lógica
atráves de uma Stored Procedure

@author Marcelo Antonio Camargo
@author Felipe Nathan Welter
@since 15/07/2016
@version P12
/*/
//---------------------------------------------------------------------
Static Function fCriaSPClr(cSPClr)

	Local cErro := ''

	If lBySQL
		cErro := fClrSQL(cSPClr)
	ElseIf lByORA
		cErro := fClrORA(cSPClr)
	EndIf

Return cErro

//---------------------------------------------------------------------
/*/{Protheus.doc} fClrSQL
Consulta otimizada para buscar das informações da legenda da árvore lógica
atráves de uma Stored Procedure de SQL

@author Marcelo Antonio Camargo
@author Felipe Nathan Welter
@since 15/07/2016
@version P12
@return LATE_ORDERS,                        - Ordem de Serviço Atrasada.
        JUSTIFIED_LATE_ORDERS (JUST_LT_OS), - OS com atrasos justificados.
        JUSTIFIED_LATE_SS (JUST_LT_SS)      - SS atrasada com justificativa.

Tabelas acessadas: TAF, STJ, TT7, TPL
/*/
//---------------------------------------------------------------------
Static Function fClrSQL(cSPClr)

	Local cQuery   := ''
	Local cErro    := ''
	Local cSizeFil := Trim( Str( FwSizeFilial() ) )

	Local cSX2TAF := RetSQLName("TAF")
	Local cSX2STJ := RetSQLName("STJ")
	Local cSX2TPL := RetSQLName("TPL")
	Local cSX2TQB := RetSQLName("TQB")
	Local cSX2TT7 := RetSQLName("TT7")

	cQuery := "CREATE PROCEDURE " + cSPClr + " ( "
	cQuery += "   @ROOT   CHAR(3), " // Valores definidos no parâmetrp
	cQuery += '   @FILTAF CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILSTJ CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILTPL CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILTQB CHAR( ' + cSizeFil + ' ), '
	cQuery += '   @FILTT7 CHAR( ' + cSizeFil + ' ), '

   	//Valores que serão retornados quando na execussão da Procedure
	cQuery += "   @LATE_ORDERS    INT OUT, "
	cQuery += "   @JUST_LT_OS     INT OUT, "
	cQuery += "   @JUST_LT_SS     INT OUT) AS"

   	//Cache de todos os itens da TAF
	cQuery += " DECLARE @CACHE TABLE ("
	cQuery += "    TAF_CODNIV VARCHAR(3),"
	cQuery += "    TAF_NIVSUP VARCHAR(3),"
	cQuery += "    TAF_INDCON INT,"
	cQuery += "    TAF_CODCON VARCHAR(16)"
	cQuery += ");"

   	//Cache de itens da TAF que possuem ordens de serviço vinculadas
	cQuery += " DECLARE @CACHE_OF_ORDERS TABLE ("
	cQuery += "    TJ_ORDEM   VARCHAR(6),"
	cQuery += "    TAF_CODNIV VARCHAR(3),"
	cQuery += "    TAF_NIVSUP VARCHAR(3),"
	cQuery += "    TAF_INDCON INT,"
	cQuery += "    TAF_CODCON VARCHAR(16),"
	cQuery += "    IS_LATE    BIT"
	cQuery += ");"

   	//Cache de itens da TQB
	cQuery += " DECLARE @CACHE_OF_SS TABLE ("
	cQuery += "    TQB_SOLICI CHAR(6),"
	cQuery += "    TQB_CODBEM VARCHAR(16),"
	cQuery += "    TQB_SOLUCA CHAR(1),"
	cQuery += "    TQB_ORDEM  VARCHAR(6)"
	cQuery += ");"

   	//CTE para consulta com base em uma âncora (default = '000')
	cQuery += " WITH RECUR_TAF AS"
	cQuery += " ("
   	//Ponto de entrada
	cQuery += "  SELECT TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON"
	cQuery += "    FROM " + cSX2TAF
	cQuery += "   WHERE TAF_CODNIV = @ROOT"      // Elemento base
	cQuery += "     AND TAF_FILIAL = @FILTAF" // Filtro por filial
	cQuery +=        " AND TAF_MODMNT <> ''"
	cQuery +=        " AND TAF_INDCON <> '0'"
	cQuery += "     AND D_E_L_E_T_ <> '*' "
	cQuery += "   UNION ALL"
   	//Chamada otimizada
	cQuery += "  SELECT A.TAF_CODNIV, A.TAF_NIVSUP, A.TAF_INDCON, A.TAF_CODCON"
	cQuery += "    FROM " + cSX2TAF + " A"
	cQuery += "   INNER JOIN RECUR_TAF R "
	cQuery += "      ON A.TAF_NIVSUP  = R.TAF_CODNIV"
	cQuery += "   WHERE A.TAF_FILIAL  = @FILTAF" // Filtro por filial
	cQuery +=        " AND A.TAF_MODMNT <> ''"
	cQuery +=        " AND A.TAF_INDCON <> '0'"
	cQuery += "     AND A.D_E_L_E_T_   <> '*' "
	cQuery += " )"

	cQuery += "INSERT INTO @CACHE (TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON)"
	cQuery += "  (SELECT * FROM RECUR_TAF);"

   	//Cachear o tempo atual para consulta
	//cQuery += " DECLARE @NOW CHAR(12) = '" + DTOS(date()) + SubStr( StrTran(Time(),":", ""), 1, 4 ) + "';"
	cQuery += " DECLARE @NOW CHAR(12) ;"
	cQuery += " SET @NOW = '" + DTOS(date()) + SubStr( StrTran(Time(),":", ""), 1, 4 ) + "';"

   	//Cachear os itens que possuem ordens liberadas e não finalizadas
	cQuery += "  INSERT INTO @CACHE_OF_ORDERS (TJ_ORDEM, TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON, IS_LATE)""
	cQuery += "  SELECT STJ.TJ_ORDEM, C.TAF_CODNIV, C.TAF_NIVSUP, C.TAF_INDCON, C.TAF_CODCON, (""
	cQuery += "    CASE WHEN @NOW > (TJ_DTMPFIM + REPLACE(TJ_HOMPFIM, ':', '')) THEN 1"
	cQuery += "    ELSE 0"
	cQuery += "    END) AS IS_LATE"
	cQuery += "    FROM " + cSX2STJ + " STJ, @CACHE C"
	cQuery += "   WHERE STJ.TJ_CODBEM = (" //-- Quando for equipamento, buscar o CODCON
	cQuery += "    CASE C.TAF_INDCON"    //-- Senão, buscar o CODNIV
	cQuery += "      WHEN 1 THEN C.TAF_CODCON"
	cQuery += "      ELSE C.TAF_CODNIV"
	cQuery += "    END) "
	cQuery += "    AND STJ.TJ_TIPOOS = ("
	cQuery += "     CASE C.TAF_INDCON"
	cQuery += "        WHEN 2 THEN 'L' "
	cQuery += "        ELSE  'B' "
	cQuery += "     END) "
	cQuery += "     AND STJ.TJ_TERMINO = 'N' "
	cQuery += "     AND STJ.TJ_SITUACA = 'L' "
	cQuery += "     AND STJ.TJ_FILIAL  = @FILSTJ" //Filtro por filial
	cQuery += "     AND STJ.D_E_L_E_T_ <> '*';"

	//Localizar todas as ordens atrasadas justificadas.
	cQuery += " SET @JUST_LT_OS = ("
	cQuery += "   SELECT COUNT(1)"
	cQuery += "     FROM @CACHE_OF_ORDERS O"
	cQuery += "     JOIN " + cSX2TPL + " TPL "
	cQuery += "       ON TPL.TPL_FILIAL = @FILTPL"
	cQuery += "      AND TPL.TPL_ORDEM  = TJ_ORDEM "
	cQuery += "      AND TPL.D_E_L_E_T_ <> '*'"
	cQuery += "    WHERE O.IS_LATE      = 1
	cQuery += " );"

   	//Localizar todas as ordens atrasadas
	cQuery += "  SET @LATE_ORDERS = ("
	cQuery += "   SELECT COUNT(1)"
	cQuery += "     FROM @CACHE_OF_ORDERS O"
	cQuery += "    WHERE O.IS_LATE = 1"
	cQuery += " ) - @JUST_LT_OS;"  //desconsidera as justiificadas

   	// Fazemos caching das solicitações de serviços contidas nesse nível, de maneira
	cQuery += "  INSERT INTO @CACHE_OF_SS (TQB_SOLICI, TQB_CODBEM, TQB_SOLUCA, TQB_ORDEM)
	cQuery += "  SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM"
	cQuery += "    FROM @CACHE C"
	cQuery += "   INNER JOIN " + cSX2TQB + " TQB"
	cQuery += "      ON TQB.TQB_CODBEM = C.TAF_CODCON"
	cQuery += "   WHERE C.TAF_INDCON   = 1 "
	cQuery += "     AND TQB.TQB_TIPOSS = 'B' "
	cQuery += "     AND TQB.TQB_FILIAL = @FILTQB" // Filtro por filial
	cQuery += "     AND TQB.TQB_DTFECH =  '' "
	cQuery += "     AND TQB.D_E_L_E_T_ <> '*' "

	cQuery += "  UNION ALL" // Merge bem + localização

	// SS distribuídas para localizações
	cQuery += "  SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM"
	cQuery += "    FROM @CACHE C"
	cQuery += "   INNER JOIN " + cSX2TQB + " TQB"
	cQuery += "      ON TQB.TQB_CODBEM = C.TAF_CODNIV"
	cQuery += "   WHERE C.TAF_INDCON   = 2 "
	cQuery += "     AND TQB.TQB_TIPOSS = 'L'"
	cQuery += "     AND TQB.TQB_FILIAL = @FILTQB" // Filtro por filial
	cQuery += "     AND TQB.D_E_L_E_T_ <> '*' "
	cQuery += "     AND TQB.TQB_DTFECH = '';"

   	// Solicitações de serviço em atraso com motivo. Para que uma solicitação de
   	// serviço seja considerada, ela deve estar vinculada a uma O.S. e possuir
   	// motivo de atraso. Também, claro, precisa estar atrasada
	cQuery += " SET @JUST_LT_SS = 0;"
   	//-- Condicionalmente definimos o acesso à TPL
	If cNGMULOS == '1'
		cQuery += " SET @JUST_LT_SS = ("
		cQuery += "   SELECT COUNT(DISTINCT SS.TQB_SOLICI)"
		cQuery += "     FROM @CACHE_OF_SS SS"
		cQuery += "     JOIN " + cSX2TT7 + " TT7 " //-- Buscar as solicitações/ordens na TT7
		cQuery += "       ON TT7.TT7_FILIAL = @FILTT7"
		cQuery += "      AND TT7.TT7_SOLICI = SS.TQB_SOLICI "
		cQuery += "      AND TT7.D_E_L_E_T_ <> '*'"
		cQuery += "     JOIN " + cSX2TPL + " TPL "// -- Buscar a razão do atraso
		cQuery += "       ON TPL.TPL_FILIAL = @FILTPL"
		cQuery += "      AND TPL.TPL_ORDEM  = SS.TQB_ORDEM "
		cQuery += "      AND TPL.D_E_L_E_T_ <> '*'"
		cQuery += "     JOIN @CACHE_OF_ORDERS O " //-- Verificar se está mesmo atrasada
		cQuery += "       ON O.TJ_ORDEM = SS.TQB_ORDEM "
		cQuery += "      AND O.IS_LATE  = 1) "
	Else
		cQuery += " SET @JUST_LT_SS = ("
		cQuery += "   SELECT COUNT(DISTINCT SS.TQB_SOLICI)"
		cQuery += "     FROM @CACHE_OF_SS SS"
		cQuery += "     JOIN " + cSX2TPL + " TPL "
		cQuery += "        ON TPL.TPL_ORDEM   = SS.TQB_ORDEM "
		cQuery += "      AND TPL.D_E_L_E_T_ <> '*' " // -- Buscar razão na TPL
		cQuery += "     JOIN @CACHE_OF_ORDERS O "    //-- Verificar se está mesmo atrasada
		cQuery += "       ON O.TJ_ORDEM = SS.TQB_ORDEM "
		cQuery += "      AND O.IS_LATE  = 1) "
	EndIf

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
	EndIf

Return cErro

//---------------------------------------------------------------------
/*/{Protheus.doc} fClrORA
Consulta otimizada para buscar das informações da legenda da árvore lógica
atráves de uma Stored Procedure de Oracle

@author Marcelo Antonio Camargo
@author Felipe Nathan Welter
@since 15/07/2016
@version P12
@return EQUIPMENTS,                         - Bens.
        LOCALIZATIONS,                      - Identificações.
        LATE_ORDERS,                        - Ordem de Serviço Atrasada.
        IN_DAY_ORDERS,                      - OS em dias.
        JUSTIFIED_LATE_ORDERS (JUST_LT_OS), - OS com atrasos justificados.
        DISTRIBUTED_SS,                     - SS Distribuída.
        IN_ANALYSIS_SS,                     - SS em análise.
        JUSTIFIED_LATE_SS (JUST_LT_SS)      - SS atrasada com justificativa.

Tabelas acessadas: TAF, STJ, TT7, TPL
/*/
//---------------------------------------------------------------------
Static Function fClrORA(cSPClr)

	Local cQuery  := ''
	Local cErro   := ''

	Local cSX2TAF := RetSQLName("TAF")
	Local cSX2STJ := RetSQLName("STJ")
	Local cSX2TPL := RetSQLName("TPL")
	Local cSX2TQB := RetSQLName("TQB")
	Local cSX2TT7 := RetSQLName("TT7")

	cQuery := " CREATE GLOBAL TEMPORARY TABLE " + cColrChc + "(TAF_CODNIV CHAR(16),  "
	cQuery += "                                                TAF_NIVSUP CHAR(3),  "
	cQuery += "                                                TAF_INDCON INT,          "
	cQuery += "                                                TAF_CODCON CHAR(16)) "
	cQuery += " ON COMMIT DELETE ROWS                                                   "

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
	EndIf

	cQuery := " CREATE GLOBAL TEMPORARY TABLE " + cColrCOO + "(TJ_ORDEM   CHAR(6),  "
	cQuery += "                                                TAF_CODNIV CHAR(16),  "
	cQuery += "                                                TAF_NIVSUP CHAR(3),  "
	cQuery += "                                                TAF_INDCON INT,          "
	cQuery += "                                                TAF_CODCON CHAR(16), "
	cQuery += "                                                IS_LATE    NUMBER(1))    "
	cQuery += " ON COMMIT DELETE ROWS                                                   "

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
		cQuery := " DROP TABLE "+ cColrChc
		TCSQLExec(cQuery)
	EndIf

	cQuery := " CREATE GLOBAL TEMPORARY TABLE " + cColrCOS + "(TQB_SOLICI CHAR(6),  "
	cQuery += "                                                TQB_CODBEM CHAR(16), "
	cQuery += "                                                TQB_SOLUCA CHAR(1),  "
	cQuery += "                                                TQB_ORDEM  CHAR(6))  "
	cQuery += " ON COMMIT DELETE ROWS                                                   "

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
		cQuery := " DROP TABLE "+ cColrChc
		TCSQLExec(cQuery)
		cQuery := " DROP TABLE "+ cColrCOO
		TCSQLExec(cQuery)
	EndIf

	If Empty(cErro)

		cQuery := "CREATE OR REPLACE PROCEDURE " + cSPClr + " ("
		// Valores definidos no parâmetro
		cQuery += "                                            P_ROOT   CHAR, "
		cQuery += "                                            P_FILTAF CHAR, "
		cQuery += "                                            P_FILSTJ CHAR, "
		cQuery += "                                            P_FILTPL CHAR, "
		cQuery += "                                            P_FILTQB CHAR, "
		cQuery += "                                            P_FILTT7 CHAR, "

		//Valores que serão retornados quando na execussão da Procedure
		cQuery += "                                            P_LATE_ORDERS    OUT NUMBER, "
		cQuery += "                                            P_JUST_LT_OS     OUT NUMBER, "
		cQuery += "                                            P_JUST_LT_SS     OUT NUMBER) "

		cQuery += "   IS "
		cQuery += "     V_NOW CHAR(12); "
		cQuery += "   BEGIN "

		//CTE para consulta com base em uma âncora (default = '000')
		cQuery += "      INSERT INTO " + cColrChc
		cQuery += "	     WITH RECUR_TAF(TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON) AS"
		cQuery += "	     ( "
		//Ponto de entrada
		cQuery += "	     SELECT TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON "
		cQuery += "	       FROM " + cSX2TAF
		cQuery += "	      WHERE TAF_CODNIV = P_ROOT "    // Elemento base
		cQuery += "         AND TAF_FILIAL = P_FILTAF " // Filtro por filial
		cQuery +=           " AND TAF_MODMNT <> ' '"
		cQuery +=           " AND TAF_INDCON <> '0'"
		cQuery += "         AND D_E_L_E_T_ <> '*' "
		cQuery += "       UNION ALL "
		//Chamada otimizada
		cQuery += "	     SELECT A.TAF_CODNIV, A.TAF_NIVSUP, A.TAF_INDCON, A.TAF_CODCON "
		cQuery += "	       FROM " + cSX2TAF + " A "
		cQuery += "	      INNER JOIN RECUR_TAF R "
		cQuery += "               ON A.TAF_NIVSUP = R.TAF_CODNIV "
		cQuery += "       WHERE A.TAF_FILIAL = P_FILTAF " // Filtro por filial
		cQuery +=             " AND A.TAF_MODMNT <> ' '"
		cQuery +=             " AND A.TAF_INDCON <> '0'"
		cQuery += "	     		AND A.D_E_L_E_T_ <> '*') "
		cQuery += "      SELECT TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON FROM RECUR_TAF; "

		//Cachear o tempo atual para consulta
		cQuery += "      V_NOW := '" + DTOS(date()) + SubStr( StrTran(Time(),":", ""), 1, 4 ) + "';"

		//Cachear os itens que possuem ordens liberadas e não finalizadas
		cQuery += "      INSERT INTO " + cColrCOO + " (TJ_ORDEM, TAF_CODNIV, TAF_NIVSUP, TAF_INDCON, TAF_CODCON, IS_LATE) "
		cQuery += "      SELECT STJ.TJ_ORDEM, C.TAF_CODNIV, C.TAF_NIVSUP, C.TAF_INDCON, C.TAF_CODCON, "
		cQuery += "           ( CASE WHEN V_NOW > TJ_DTMPFIM || REPLACE(TJ_HOMPFIM, ':', '') "
		cQuery += "             THEN 1 "
		cQuery += "             ELSE 0 "
		cQuery += "             END ) AS IS_LATE "
		cQuery += "        FROM " + cSX2STJ + " STJ, " + cColrChc + " C "
		cQuery += "       WHERE STJ.TJ_CODBEM = ( " //-- Quando for equipamento, buscar o CODCON
		cQuery += "          CASE C.TAF_INDCON " //-- Senão, buscar o CODNIV
		cQuery += "             WHEN 1 THEN C.TAF_CODCON "
		cQuery += "             ELSE C.TAF_CODNIV "
		cQuery += "          END ) "
		cQuery += "         AND STJ.TJ_TERMINO = 'N' "
		cQuery += "         AND STJ.TJ_SITUACA = 'L' "
		cQuery += "         AND STJ.TJ_FILIAL  = P_FILSTJ " //Filtro por filial
		cQuery += "         AND STJ.D_E_L_E_T_ <> '*'; "

		//Localizar todas as ordens atrasadas justificadas.
		cQuery += "      SELECT COUNT(1) INTO P_JUST_LT_OS "
		cQuery += "        FROM " + cColrCOO + " O "
		cQuery += "        JOIN " +  cSX2TPL + " TPL "
		cQuery += "          ON TPL.TPL_FILIAL = P_FILTPL "
		cQuery += "         AND TPL.TPL_ORDEM = TJ_ORDEM "
		cQuery += "         AND TPL.D_E_L_E_T_ <> '*' "
		cQuery += "       WHERE O.IS_LATE = 1; "

		//Localizar todas as ordens atrasadas
		cQuery += "      SELECT COUNT(1) INTO P_LATE_ORDERS "
		cQuery += "        FROM " + cColrCOO + " O "
		cQuery += "       WHERE O.IS_LATE = 1; "

		cQuery += "       P_LATE_ORDERS := P_LATE_ORDERS - P_JUST_LT_OS; " //desconsidera as justiificadas

		// Fazemos caching das solicitações de serviços contidas nesse nível, de maneira O(n)
		cQuery += "      INSERT INTO " + cColrCOS + " (TQB_SOLICI, TQB_CODBEM, TQB_SOLUCA, TQB_ORDEM) "
		cQuery += "      SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM "
		cQuery += "        FROM " + cColrChc + " C "
		cQuery += "       INNER JOIN " + cSX2TQB + " TQB "
		cQuery += "          ON TQB.TQB_CODBEM = C.TAF_CODCON "
		cQuery += "       WHERE C.TAF_INDCON   = 1 "
		cQuery += "         AND TQB.TQB_TIPOSS = 'B' "
		cQuery += "         AND TQB.TQB_FILIAL = P_FILTQB "
		cQuery += "         AND TQB.TQB_DTFECH = ' ' "
		cQuery += "         AND TQB.D_E_L_E_T_ <> '*' "
		// Merge bem + localização
		cQuery += "       UNION ALL "
		// SS distribuídas para localizações
		cQuery += "      SELECT TQB.TQB_SOLICI, TQB.TQB_CODBEM, TQB.TQB_SOLUCA, TQB.TQB_ORDEM "
		cQuery += "        FROM " + cColrChc + " C "
		cQuery += "       INNER JOIN " + cSX2TQB + " TQB "
		cQuery += "          ON TQB.TQB_CODBEM = C.TAF_CODNIV "
		cQuery += "       WHERE C.TAF_INDCON   = 2 "
		cQuery += "         AND TQB.TQB_TIPOSS = 'L' "
		cQuery += "         AND TQB.TQB_FILIAL = P_FILTQB "
		cQuery += "         AND TQB.TQB_DTFECH = ' ' "
		cQuery += "         AND TQB.D_E_L_E_T_ <> '*'; "

		// Solicitações de serviço em atraso com motivo. Para que uma solicitação de
		// serviço seja considerada, ela deve estar vinculada a uma O.S. e possuir
		// motivo de atraso. Também, claro, precisa estar atrasada
		cQuery += "      P_JUST_LT_SS := 0;

		//Condicionalmente definimos o acesso à TPL
		If cNGMULOS == '1'
			cQuery += " SELECT COUNT(DISTINCT SS.TQB_SOLICI) INTO P_JUST_LT_SS "
			cQuery += "   FROM " + cColrCOS + " SS "
			cQuery += "   JOIN " + cSX2TT7 + " TT7 " //Buscar as solicitações/ordens na TT7
			cQuery += "     ON TT7.TT7_FILIAL = P_FILTT7 "
			cQuery += "    AND TT7.D_E_L_E_T_ <> '*' "
			cQuery += "   JOIN " + cSX2TPL + " TPL " //Buscar a razão do atraso
			cQuery += "     ON TPL.TPL_FILIAL = P_FILTT7 "
			cQuery += "    AND TPL.TPL_ORDEM = SS.TQB_ORDEM "
			cQuery += "    AND TPL.D_E_L_E_T_ <> '*' "
			cQuery += "   JOIN " + cColrCOO + " O " //Verificar se está mesmo atrasada
			cQuery += "     ON O.TJ_ORDEM = SS.TQB_ORDEM "
			cQuery += "    AND O.IS_LATE = 1; "
		Else
			cQuery += " SELECT COUNT(DISTINCT SS.TQB_SOLICI) INTO P_JUST_LT_SS "
			cQuery += "   FROM " + cColrCOS + " SS "
			cQuery += "   JOIN " +  cSX2TPL + " TPL "
			cQuery += "     ON TPL.TPL_ORDEM = SS.TQB_ORDEM "
			cQuery += "    AND TPL.D_E_L_E_T_ <> '*' "
			cQuery += "   JOIN " + cColrCOO + " O "
			cQuery += "     ON O.TJ_ORDEM = SS.TQB_ORDEM "
			cQuery += "    AND O.IS_LATE = 1; "
		EndIf
		cQuery += "END; "

		If (TCSQLExec(cQuery) < 0)
			cErro := TCSQLError()
		EndIf

	EndIf

Return cErro

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  MNTCHKCLR
Verifica se existe alguma ordem de serviço atrasada na estrutura
a partir do nível informado.
@type static

@author Bruno Lobo de Souza
@since 29/06/2015

@param cCodNivel, Caracter, Elemento que será verificado.
@param cTipo    , Caracter, Tipo "1" = Bem e "2" = Localização.
@param cTab     , Caracter, Se é utilizado tabela temporaria.
@param cNivel   , Caracter, Nivel do elemento que será verificado.
@return         , Array   , Icones da árvore.
/*/
//---------------------------------------------------------------------------------
Function MNTCHKCLR( cCodNivel, cTipo, cTab, cNivel )

	Local aArea     := GetArea()
	Local aAreaTRB  := (cTRBSGA)->(GetArea())
	Local aAreaTAF  := TAF->(GetArea())
	Local aTree     := {}
	Local aFolder   := {}
	Local cFolderA  := ''
	Local cFolderB  := ''
	Local cTipoOS   := ''
	Local cAliasQry := ''
	Local lAmarelo  := .F.
	Local lVermelho := .F.
	Local cTime     := Substr( Time(), 1, 5 )
	Local cDateTime := DtoS( dDataBase ) + cTime
	Local nInd      := 1
	Local nCor      := 1 //Verde

	Default cTab    := 'TAF'
	Default cNivel  := cCodNivel

	aAdd( aTree, { cCodNivel, cTipo, cNivel } )

	dbSelectArea( "TPL" )
	dbSetOrder(1)

	While nInd <= Len( aTree )

		cTipoOS   := IIf( aTree[nInd][2] == '1', 'B', 'L' )
		cAliasQry := GetNextAlias()

		BeginSQL Alias cAliasQry

			SELECT STJ.TJ_ORDEM FROM %table:STJ% STJ
			WHERE
				STJ.TJ_FILIAL   = %xFilial:STJ%             AND
				STJ.TJ_SITUACA  = %exp:'L'%                 AND
				STJ.TJ_TIPOOS   = %exp:cTipoOS%             AND
				STJ.TJ_TERMINO  = %exp:'N'%                 AND
				STJ.TJ_CODBEM   = %exp:aTree[nInd][1]%      AND
				%exp:cDateTime% >= TJ_DTMPFIM || TJ_HOMPFIM AND
				STJ.%NotDel%

		EndSQL

		Do While (cAliasQry)->( !EoF() )

			If TPL->( dbSeek( xFilial( "TPL" ) + (cAliasQry)->TJ_ORDEM ) )
				lAmarelo  := .T.
			Else
				lVermelho := .T.
				Exit
			EndIf

			(cAliasQry)->( dbSkip() )

		EndDo

		dbSelectArea(cTRBSGA)
		dbSetOrder(1)
		dbSeek(cCodEst + aTree[nInd][3] + cFilAnt)
		While !EoF() .And. (cTRBSGA)->FILIAL == cFilAnt .And. (cTRBSGA)->CODEST == cCodEst .And.;
				(cTRBSGA)->NIVSUP == aTree[nInd][3]

			If !Empty((cTRBSGA)->DELETADO)
				(cTRBSGA)->(dbSkip())
				Loop
			EndIf

			If (cTRBSGA)->TIPO == "2"
				aAdd( aTree, { (cTRBSGA)->CODPRO , '2', (cTRBSGA)->CODPRO } )
				aSize( aTree, Len( aTree ) )

			ElseIf (cTRBSGA)->TIPO == "1"
				aAdd( aTree, { (cTRBSGA)->CODTIPO, '1', (cTRBSGA)->CODPRO } )
				aSize( aTree, Len( aTree ) )

			EndIf

			(cTRBSGA)->(dbSkip())
		End

		If cTab == "TAF"
			dbSelectArea( "TAF" )
			dbSetOrder( 1 )
			dbSeek( xFilial( "TAF" ) + cCodEst + aTree[nInd][1] )
			While !EoF() .And. TAF->TAF_FILIAL == xFilial( "TAF" ) .And. TAF->TAF_CODEST == cCodEst .And.;
					TAF->TAF_NIVSUP == aTree[nInd][1]

				If TAF->TAF_INDCON == "2"
					If aScan( aTree, {|x| x[1] == TAF->TAF_CODNIV } ) == 0
						aAdd( aTree, { TAF->TAF_CODNIV, '2', TAF->TAF_CODNIV } )
						aSize( aTree, Len( aTree ) )
					EndIf
				ElseIf TAF->TAF_INDCON == "1"
					If aScan( aTree, {|x| x[1] == TAF->TAF_CODCON } ) == 0
						aAdd( aTree, { TAF->TAF_CODCON, '1', TAF->TAF_CODNIV } )
						aSize( aTree, Len( aTree ) )
					EndIf
				EndIf

				TAF->(dbSkip())
			End
		EndIf

		(cAliasQry)->(dbCloseArea())
		nInd++

	EndDo

	If lVermelho
		nCor := 3
	ElseIf lAmarelo
		nCor := 2
	EndIf

	aFolder  := fCgClrNSQL(nCor,cTipo)
	cFolderA := aFolder[1]
	cFolderB := aFolder[2]

	RestArea(aAreaTRB)
	RestArea(aArea)
	RestArea(aAreaTAF)

Return {cFolderA,cFolderB}

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  fCgClrNSQL
Altera a cor dos componentes da arvore

@author Bruno Lobo de Souza
@since 29/06/2015
@param nCor - Cor do item
@param cTipo - Tipo do item: "1" - Bem, "2" - Localização
@return
/*/
//---------------------------------------------------------------------------------
Static Function fCgClrNSQL( nCor, cTipo )

	Local cFolderA,  cFolderB

	If cTipo == "1"
		If nCor == 1 //Verde
			cFolderA := "ENGRENAGEM"
			cFolderB := "ENGRENAGEM"
		ElseIf nCor == 2 //Amarelo
			cFolderA := "ng_ico_bemamarelo"
			cFolderB := "ng_ico_bemamarelo"
		Else
			cFolderA := "ng_ico_bemvermelho"
			cFolderB := "ng_ico_bemvermelho"
		EndIf
	ElseIf cTipo == "2" //Localização
		If nCor == 1 //Verde
			cFolderA := "FOLDER10"
			cFolderB := "FOLDER11"
		ElseIf nCor == 2 //Amarelo
			cFolderA := "FOLDER5"
			cFolderB := "FOLDER6"
		Else
			cFolderA := "FOLDER7"
			cFolderB := "FOLDER8"
		EndIf
	EndIf

Return { cFolderA, cFolderB }

//---------------------------------------------------------------------------------
/*/{Protheus.doc} fReproClr
Reprocessa cores da árvore
@type static

@author Bruno Lobo de Souza
@since 29/06/2015

@sample fReproClr( '000', .T. )

@param  cCodNiv , Caracter, Codigo do nível a ser verificado.
@param  [lClose], Lógico  , Define se a localização deve se manter fechada.
@return
/*/
//---------------------------------------------------------------------------------
Static Function fReproClr( cCodNiv, lClose )

	Local aArea    := GetArea()
	Local aAreaTRB := (cTRBSGA)->(GetArea())
	Local cCargo   := 'LOC'
	Local cOldSup  := ""

	Default lClose := .F.

	dbSelectArea( cTRBSGA )
	dbSetOrder( 2 )
	dbSeek( cCodEst + cCodNiv + cFilAnt )
	While (cTRBSGA)->NIVSUP > "000" .And. (cTRBSGA)->FILIAL == cFilAnt

		If !Empty( cOldSup ) .And. (cTRBSGA)->CODPRO <> cOldSup
			(cTRBSGA)->(dbSkip(-1))
			Loop
		EndIf

		If (cTRBSGA)->TIPO == "1"
			cCodNiv := (cTRBSGA)->CODTIPO
			cCargo    := "BEM"
		Else
			cCodNiv := (cTRBSGA)->CODPRO
			cCargo    := "LOC"
		EndIf

		aFolder := MNTCHKCLR( cCodNiv, (cTRBSGA)->TIPO, 'TRB', (cTRBSGA)->CODPRO )
		If oTree:TreeSeek( (cTRBSGA)->CODPRO + cCargo + cFilAnt )
			oTree:ChangeBmp( aFolder[1], aFolder[2] )
		EndIf

		If lClose
			oTree:PtCollapse() // Força o fechamento da localização que está posicionada.
			lClose := .F.
		EndIf

		cOldSup := (cTRBSGA)->NIVSUP
		(cTRBSGA)->(dbSkip(-1))

	End

	RestArea( aAreaTRB )
	RestArea( aArea )

Return

//---------------------------------------------------------------------------------
/*/{Protheus.doc}  fBscRestr
Verifica se possui restrição de acesso para Arvore lógica Por filial/usuario

@author Maicon André Pinheiro
@since  27/09/2016
@return lRestricao
/*/
//---------------------------------------------------------------------------------
Static Function fBscRestr()

	Local lRestricao := .F.
	Local cGrpUsr    := ""
	Local nX         := 0

	cGrpUsr := RetCodUsr()
	dbSelectArea("TUA")
	dbSetOrder(1)
	If dbSeek(xFilial("TUA")+"12"+cGrpUsr)
		lRestricao := .T.
	Else
		aVerTUA := {}
		//Verifica se possui restrição de acesso pelo grupo
		aPswRet := UsrRetGrp(cUsername)
		If Len(aPswRet) > 0
			For nX := 1 to Len(aPswRet)
				If !Empty(aPswret[nX])
					aAdd(aVerTUA, {"1",aPswret[nX]})
				EndIf
			Next nX
		EndIf

		For nX := 1 to Len(aVerTUA)
			dbSelectarea("TUA")
			dbSetorder(1)
			If dbSeek(xFilial("TUA") + "11" + aVerTUA[nX][2] )
				lRestricao := .T.
				Exit
			EndIf
		Next nX

	EndIf

Return lRestricao

//---------------------------------------------------------------------
/*/{Protheus.doc} MNT902DEP
Relação para o campo de Departamento.

@return cRelaca  - Relação do campo.

@author Guilherme Benkendorf
@since 07/03/2015
@version P12
/*/
//---------------------------------------------------------------------
Function MNT902DEP()

	Local cRelaca := IIf(Inclui,"",Posicione('SQB',1,xFilial('SQB')+M->TAF_DEPTO,'QB_DESCRIC'))

Return cRelaca
//---------------------------------------------------------------------
/*/{Protheus.doc} NGTUATAF
Carrega todos os níveis filhos da árvore lógica / estrutura organizacional
(TAF) que o usuário tenha permissão para visualizar, com base na rotina
de restrição de acesso (TUA/TUB).

Esta função deve ser usada se o Usuário Logado ou Grupo possuir
restrição de acesso.

@author Felipe Nathan Welter
@since 24/08/2016
@param cCODBEM  - Codigo do bem
		nPOSCON  - Valor do cONtador
		nIndCONt - Indicacao de qual cONtador 1 ou 2
		cFilTroc - Filial de troca de acesso (Ñ Obrigat)

@return aTAF	array contendo os niveis da TAF
@use SIGAMNT
/*/
//---------------------------------------------------------------------
Function NGTUATAF(cNivPai)

	Local aArea := GetArea()
	Local nX
	Local aVerTUA := {{"2",RetCodUsr()}}
	Local cGrpUsr
	Local aFields := {}
	Local cSPTUA := 'M902TUA'+cValToChar(ThreadId())                // Nome da stored procedure para restrição de acesso
	Local cAliasQry
	Local aTAF := {}

	Default cNivSup:= ""
	Default cTipRes:= "1"
	Default cNivPai := "001"

	//-----------------------------------------
	// Se nao existir restricao para o usuario,
	// considera a de seus grupos
	//-----------------------------------------
	cGrpUsr := RetCodUsr()
	dbSelectArea("TUA")
	dbSetOrder(1)
	If !dbSeek(xFilial("TUA")+cTipRes+"2"+cGrpUsr)
		If Len(aPswRet) > 0
			aVerTUA := {}
			For nX := 1 to Len(aPswRet)
			   aAdd(aVerTUA, {"1",aPswret[nX]})
			Next nX
		EndIf
	EndIf

	cGrpUsr := RetCodUsr()
	dbSelectArea("TUA")
	dbSetOrder(1)
	If dbSeek(xFilial("TUA")+"12"+cGrpUsr)
		lRestri := .T.
	Else
		aVerTUA := {}
		//Verifica se possui restrição de acesso pelo grupo
		aPswRet := UsrRetGrp(cUsername)
		If Len(aPswRet) > 0
			For nX := 1 to Len(aPswRet)
				If !Empty(aPswret[nX])
					aAdd(aVerTUA, {"1",aPswret[nX]})
				EndIf
			Next nX
		EndIf

		For nX := 1 to Len(aVerTUA)
			dbSelectarea("TUA")
			dbSetorder(1)
			If dbSeek( xFilial("TUA") + "11" + aVerTUA[nX][2] )
				lRestri := .T.
				Exit
			EndIf
		Next nX

	EndIf

	//--------------------------
	//Monta tabela temporaria
	//--------------------------
	oTempTable := FWTemporaryTable():New()

	aAdd(aFields,{"TAF_CODNIV","C",03,0})
	aAdd(aFields,{"TAF_NIVSUP","C",03,0})
	aAdd(aFields,{"TAF_CODCON","C",16,0})

	oTemptable:SetFields( aFields )
	oTempTable:AddIndex("ind", {"TAF_CODNIV", "TAF_NIVSUP", "TAF_CODCON"} )
	oTempTable:Create()

	//-----------------------------------------
	// Cria SP para ler restricao de acesso TAF
	//-----------------------------------------
	If TCSPExist(cSPTUA)
		cQuery := 'DROP PROCEDURE '+cSPTUA
		TCSqlExec(cQuery)
	EndIf

	fCriaSPTUA(cSPTUA,oTempTable:GetRealName(),aVerTUA)

	//-----------------------------------------
	// Executa SP
	//-----------------------------------------
	If TCSPEXEC(cSPTUA,cNivPai)[1] > 0
		//------------------------------------
		//Executa query para leitura da tabela
		//------------------------------------
		cQuery := "select * from "+ oTempTable:GetRealName()
		cAliasQry := GetNextAlias()
		MPSysOpenQuery( cQuery, cAliasQry )

		dbSelectArea(cAliasQry)

		//CArrega todos os niveis no array
		While (cAliasQry)->(!EoF())
			aAdd(aTAF,(cAliasQry)->TAF_CODNIV)
			(cAliasQry)->(dbSkip())
		Enddo
	EndIf

	//---------------------------------
	//Exclui a tabela
	//---------------------------------
	oTempTable:Delete()

	//-----------------------------------------
	// Exclui SP
	//-----------------------------------------
	If TCSPExist(cSPTUA)
		cQuery := 'DROP PROCEDURE '+cSPTUA
		TCSqlExec(cQuery)
	EndIf

	RestArea(aArea)

Return aTAF

//---------------------------------------------------------------------
/*/{Protheus.doc} fCriaSPTUA
Cria Stored Procedure que carrega todos os níveis filhos da árvore
lógica / estrutura organizacional (TAF) que o usuário tenha permissão
para visualizar, com base na rotina de restrição de acesso (TUA/TUB).

@author Felipe Nathan Welter
@since 24/08/2016
@param cSPTUA  - Nome da Stored Procedure
		cTable  - Nome da tabela temporaria (no banco) em que deve gravar os niveis TAF
		aVerTUA - Array contendo o tipo (TUB_TIPO) + codigo (TUB_GRPUSR)

@return cErro	string reportando erro na criação da SP, caso haja
@obs SIGAMNT
/*/
//---------------------------------------------------------------------

Static Function fCriaSPTUA(cSPTUA,cTable,aVerTUA)

	Local cQuery := ''
	Local cJoin  := ''
	Local cErro  := ''
	Local cGetDB := TcGetDb()
	Local nX     := 0

	For nX := 1 To Len( aVerTUA )

		cJoin += IIf( nX == 1, " AND ( ", "" )
		cJoin += 	" ( TUB_TIPO  = " + ValToSql( aVerTUA[nX,1] )
		cJoin += 		" AND TUB_GRPUSR = " + ValToSql( aVerTUA[nX,2] ) + " ) "
		cJoin += IIf( nX == Len(aVerTUA), " ) ", " OR " )

	Next nX

	If ( nModulo == 19 .Or. nModulo == 95 ) .And. !( Upper( cGetDB ) $ 'ORACLE,POSTGRES,INFORMIX' )
		
		cQuery := " CREATE PROCEDURE " + cSPTUA + " (@ROOT CHAR(3), @NLINES INT OUT) AS "
		
		cQuery += 	"WITH RECUR_TAF AS ( "
		cQuery += 		"SELECT "
		cQuery += 			"TAF.TAF_CODNIV, "
		cQuery +=			"TAF.TAF_NIVSUP, "
		cQuery +=			"TAF.TAF_CODCON  "
		cQuery += 		"FROM " 
		cQuery += 			RetSQLName( 'TAF' ) + " TAF "
		cQuery += 		"INNER JOIN "
		cQuery += 			RetSQLName( 'TUB' ) + " TUB ON "
		cQuery += 				"TUB.TUB_FILIAL = " + ValToSQL( FWxFilial( 'TUB' ) ) + " AND "
		cQuery += 				"( ( TUB.TUB_OPCAO  = '8' AND "
		cQuery += 					"TAF.TAF_INDCON = '2' AND "
		cQuery += 					"TUB.TUB_CODIGO = TAF.TAF_CODNIV ) OR "
		cQuery += 			  	  "( TUB.TUB_OPCAO  = '0' AND "
		cQuery += 			      	"TAF.TAF_INDCON = '1' AND "
		cQuery += 			      	"TUB.TUB_CODIGO = TAF.TAF_CODCON ) ) AND "
		cQuery += 				"TUB.TUB_TIPRES = '1' AND "
		cQuery +=				"TUB.TUB_MARCA  = '1' AND "
		cQuery += 				"TUB.D_E_L_E_T_ = ' ' "
		cQuery += 				cJoin
		cQuery += 		"WHERE "
		cQuery += 			"TAF.TAF_FILIAL = " + ValToSQL( FWxFilial( 'TAF' ) ) + " AND "
		cQuery += 			"TAF.TAF_CODNIV = @ROOT AND "
		cQuery += 			"TAF.TAF_INDCON IN ( '2', '1' ) AND "
		cQuery += 			"TAF.TAF_MODMNT = 'X' AND "
		cQuery += 			"TAF.D_E_L_E_T_ = ' ' "
		cQuery += 		"UNION ALL "
		cQuery += 			"SELECT "
		cQuery +=				"A.TAF_CODNIV, "
		cQuery +=				"A.TAF_NIVSUP, "
		cQuery +=				"A.TAF_CODCON  "
		cQuery += 			"FROM " 
		cQuery += 				RetSQLName( 'TAF' ) + " A "
		cQuery += 			"INNER JOIN "
		cQuery += 				RetSQLName( 'TUB' ) + " B ON "
		cQuery += 					"B.TUB_FILIAL = " + ValToSQL( FWxFilial( 'TUB' ) ) + " AND "
		cQuery += 					"( ( B.TUB_OPCAO  = '8' AND " 
		cQuery += 						"A.TAF_INDCON = '2' AND "
		cQuery += 						"B.TUB_CODIGO = A.TAF_CODNIV ) OR "
		cQuery += 		  		  	  "( B.TUB_OPCAO  = '0' AND "
		cQuery += 		  		  	  	"A.TAF_INDCON = '1' AND "
		cQuery += 						"B.TUB_CODIGO = A.TAF_CODCON ) ) AND "
		cQuery += 					"B.TUB_TIPRES = '1' AND "
		cQuery +=					"B.TUB_MARCA  = '1' AND "
		cQuery += 					"B.D_E_L_E_T_ = ' ' "
		cQuery += 					cJoin
		cQuery += 			"INNER JOIN RECUR_TAF R ON "
		cQuery += 				"A.TAF_NIVSUP = R.TAF_CODNIV "
		cQuery += 			"WHERE " 
		cQuery += 				"A.TAF_FILIAL  = " + ValToSQL( FWxFilial( 'TAF' ) ) + " AND "
		cQuery += 				"A.TAF_INDCON IN ( '1', '2' ) AND "
		cQuery += 				"A.TAF_MODMNT = 'X' AND "
		cQuery += 				"A.D_E_L_E_T_ = ' ' "
		cQuery += "	) "

		cQuery += "	INSERT INTO " + cTable + " (TAF_CODNIV, TAF_NIVSUP, TAF_CODCON)"
		cQuery += "	  (SELECT * FROM RECUR_TAF);"

		cQuery += "	SET @NLINES = (SELECT COUNT(*) FROM " + cTable + ");"

	Else

		cQuery := " CREATE OR REPLACE PROCEDURE " + cSPTUA + " (ROOT VARCHAR, NLINES OUT INT) "
		cQuery += " IS "

		cQuery +=	"BEGIN "

		cQuery +=		"INSERT INTO " + cTable + " (TAF_CODNIV, TAF_NIVSUP, TAF_CODCON) "
		cQuery +=			"WITH RECUR_TAF AS "
		cQuery += 				"( SELECT "
		cQuery += 					"TAF.TAF_CODNIV, "
		cQuery += 					"TAF.TAF_NIVSUP, "
		cQuery += 					"TAF.TAF_CODCON  "
		cQuery += 				  "FROM "
		cQuery += 					 RetSQLName( 'TAF' ) + " TAF "
		cQuery += 				  "INNER JOIN "
		cQuery += 				  	 RetSQLName( 'TUB' ) + " TUB ON "
		cQuery += 						"TUB.TUB_FILIAL = " + ValToSQL( FWxFilial( 'TUB' ) ) + " AND "
		cQuery += 						"( ( TUB.TUB_OPCAO  = '8' AND "
		cQuery += 							"TAF.TAF_INDCON = '2' AND "
		cQuery += 							"TRIM( TUB.TUB_CODIGO ) = TRIM( TAF.TAF_CODNIV ) ) OR "
		cQuery += 			  			  "( TUB.TUB_OPCAO  = '0' AND "
		cQuery += 			   			 	"TAF.TAF_INDCON = '1' AND "
		cQuery += 			    			"TRIM( TUB.TUB_CODIGO ) = TRIM( TAF.TAF_CODCON ) ) ) AND "
		cQuery += 				  	 	"TUB.TUB_TIPRES = '1' AND "
		cQuery += 						"TUB.TUB_MARCA  = '1' AND "
		cQuery += 						"TUB.D_E_L_E_T_ = ' ' "
		cQuery += 						cJoin
		cQuery += 				  "WHERE "
		cQuery += 				  	"TAF.TAF_FILIAL = " + ValToSQL( FWxFilial( 'TAF' ) ) + " AND "
		cQuery += 				  	"TAF.TAF_CODNIV = ROOT AND "
		cQuery += 					"TAF.TAF_INDCON IN ( '2', '1' ) AND "
		cQuery += 					"TAF.TAF_MODMNT = 'X' AND "
		cQuery += 					"TAF.D_E_L_E_T_ = ' ' "
		cQuery += 				  "UNION ALL "
		cQuery += 				  	"SELECT "
		cQuery += 				  		"A.TAF_CODNIV, "
		cQuery += 						"A.TAF_NIVSUP, "
		cQuery += 						"A.TAF_CODCON  "
		cQuery += 					"FROM "
		cQuery += 						RetSQLName( 'TAF' ) + " A "
		cQuery += 					"INNER JOIN "
		cQuery += 						RetSQLName( 'TUB' ) + " B ON "
		cQuery += 							"B.TUB_FILIAL = " + ValToSQL( FWxFilial( 'TUB' ) ) + " AND "
		cQuery += 							"( ( B.TUB_OPCAO  = '8' AND " 
		cQuery += 								"A.TAF_INDCON = '2' AND "
		cQuery += 								"TRIM( B.TUB_CODIGO ) = TRIM( A.TAF_CODNIV ) ) OR "
		cQuery += 		  		  			  "( B.TUB_OPCAO  = '0' AND "
		cQuery += 		  		  				"A.TAF_INDCON = '1' AND "
		cQuery += 								"TRIM( B.TUB_CODIGO ) = TRIM( A.TAF_CODCON ) ) ) AND "
		cQuery += 							"B.TUB_TIPRES = '1' AND "
		cQuery +=							"B.TUB_MARCA  = '1' AND "
		cQuery += 							"B.D_E_L_E_T_ = ' ' "
		cQuery += 							cJoin
		cQuery += 					"INNER JOIN ( "
		cQuery += 						"SELECT "
		cQuery += 							"TAF_CODNIV, "
		cQuery += 						 	"TAF_NIVSUP, "
		cQuery += 							"TAF_CODCON  "
		cQuery += 						"FROM "
		cQuery += 							RetSQLName( 'TAF' ) + " ) R ON "
		cQuery += 								" A.TAF_NIVSUP = R.TAF_CODNIV "
		cQuery += 					"WHERE "
		cQuery += 						"A.TAF_FILIAL = " + ValToSQL( FWxFilial( 'TAF' ) ) + " AND "
		cQuery += 						"A.TAF_INDCON IN ( '1', '2' ) AND "
		cQuery += 						"A.TAF_MODMNT = 'X' AND "
		cQuery += 						"A.D_E_L_E_T_ = ' ' "
		cQuery += 				") "

		cQuery += 		"SELECT G.TAF_CODNIV, G.TAF_NIVSUP, G.TAF_CODCON FROM RECUR_TAF G; "

		cQuery += 		"NLINES := 1; "

		cQuery += 	"END; "

	EndIf

	If (TCSQLExec(cQuery) < 0)
		cErro := TCSQLError()
	EndIf

Return cErro

//---------------------------------------------------------------------
/*/{Protheus.doc} fCriaTRB
Cria TRB
@author eduardo.izola
@since 16/02/2017
@version undefined
@param cAlias, characters, Alias Tabela
@param aFields, array, Array de campos
@param aIndex, array, Indice TRB
@type function
/*/
//---------------------------------------------------------------------
Static Function fCriaTRB(cAlias,aFields,aIndex)

	Local i

	oTempTable := FWTemporaryTable():New( cAlias , aFields )
	For i := 1 To Len(aIndex)
		oTempTable:AddIndex("ind"+cValToChar(i), aIndex[i] )
	Next i
	oTempTable:Create()

Return oTempTable

//---------------------------------------------------------------------
/*/{Protheus.doc} fAtuOS
Atualiza O.S. na arvore, apos efetuar a liberação

@author Bruno Lobo de Souza
@since 24/08/2016

@param cCod, caracter, codigo identificador do nível Ex.: "003BEMM RJ 01 "
@return Nil
@use SIGAMNT
/*/
//---------------------------------------------------------------------
Static Function fAtuOS(cCod)
	MNT902Chg(SubStr(cCod, 1, 3), SubStr(cCod, 4, 3))
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} fConsultSX3
Faz a consulta na SX3

@author  Vitor Bonet
@since   30/04/2018
@version P12
@param cAlias, caracter, com alias da consulta
@param aChoiParam, array, recebe o aChoice
@return aReturn, array, retorna array com os dados da consulta
/*/
//-------------------------------------------------------------------
Static Function fConsultSX3(cAlias, aChoiParam)

	Local aReturn 		:= {}

	Local aNgHeader		:= {}
	Local nTamTot 		:= 0
	Local nInd 			:= 0
	Local cCampo 		:= ""
	Local cUsadoSX3		:= ""
	Local cNivelSX3		:= ""
	Local cTituloSX3	:= ""
	Local cPictureSX3	:= ""
	Local nTamanhoSX3	:= 0
	Local nDecimalSX3	:= 0
	Local cValidSX3		:= ""
	Local cTipoSX3		:= ""
	Local cArquivoSX3	:= ""
	Local cContextSX3	:= ""
	Local cCBoxSX3		:= ""

	aNgHeader := NGHeader(cAlias,,.F.)
	nTamTot := Len(aNgHeader)
	For nInd := 1 To nTamTot
		cCampo 		:= aNgHeader[nInd,2]
		cUsadoSX3	:= aNgHeader[nInd,7]
		cNivelSX3	:= Posicione("SX3",2,cCampo,"X3_NIVEL")
		cTituloSX3	:= Posicione("SX3",2,cCampo,"X3Titulo()")
		cPictureSX3	:= aNgHeader[nInd,3]
		nTamanhoSX3	:= aNgHeader[nInd,4]
		nDecimalSX3	:= aNgHeader[nInd,5]
		cValidSX3	:= aNgHeader[nInd,6]
		cTipoSX3	:= aNgHeader[nInd,8]
		cArquivoSX3	:= Posicione("SX3",2,cCampo,"X3_ARQUIVO")
		cContextSX3	:= aNgHeader[nInd,10]
		cCBoxSX3	:= Posicione("SX3",2,cCampo,"X3CBox()")
		If X3USO(cUsadoSX3) .And. cNivel >= cNivelSX3 .And. aScan( aChoiParam, {|x| x = AllTrim(cCampo) } ) > 0
			aAdd(aReturn,{AllTrim(cTituloSX3), cCampo, cPictureSX3, nTamanhoSX3, nDecimalSX3,cValidSX3, cUsadoSX3, cTipoSX3, cArquivoSX3, cContextSX3, cCBoxSX3 })
		EndIf
	Next nInd

Return aReturn

//-------------------------------------------------------------------
/*/{Protheus.doc} fPermInd
Verifica se tem pelo menos uma permissão de acesso para mostrar os indicadores.

@author  Tainã Alberto Cardoso
@since   10/04/2019
@version P12

@return lRet, Lógico
/*/
//-------------------------------------------------------------------
Static Function fPermInd()

	Local lRet      := .F.
	Local cCodUser  := RetCodUsr()
	Local aPswRet   := FWSFUsrGrps( cCodUser ) //retorna os grupos do usuário
	Local nX        := 0
	Local cAliasB   := GetNextAlias()

	BeginSQL Alias cAliasB
		SELECT TZB.TZB_FILIAL, TZB.TZB_CODIGO
		FROM %table:TZB% TZB
		WHERE TZB.TZB_FILIAL = %xFilial:TZB%
			AND TZB.%NotDel%
			AND TZB.TZB_MODULO = %Exp:Str( nModulo, 2 )%
			AND TZB.TZB_ATIVO = '1'
	EndSql

	lRet := !(( cAliasB )->( EoF() )) .And. FWIsAdmin( cCodUser ) // se usuário é do grupo admin ( tem todas as permissões )

	If !lRet
		While !((cAliasB)->( Eof() ))

			//Verifica permissão por usuário
			lRet := NGIND012AC( (cAliasB)->TZB_FILIAL, (cAliasB)->TZB_CODIGO, "1", cCodUser )

			If lRet
				Exit
			Else
				For nX := 1 to Len(aPswRet)
					//Verifica permissão dos grupos do usuário
					lRet := NGIND012AC( (cAliasB)->TZB_FILIAL, (cAliasB)->TZB_CODIGO, "2", aPswRet[nX] )
					If lRet
						Exit
					EndIf
				Next nX
			EndIf

		(cAliasB)->( dbSkip() )

		EndDo
	EndIf

	(cAliasB)->( dbCloseArea() )

Return lRet

//--------------------------------------------------------------------------------------------------
/*/{Proteus.doc} MntUpdTAF
Verifica se o bem deve sofrer alguma alteração de C.C. ou C.T. refletindo o pai imediato.
@type function

@author Alexandre Santos
@since  29/10/2019

@sample MntUpdTAF( { '001', '020', 'M RJ 01 ' }, { '001', '020', 'M RJ 01 ' }, cTRB )

@param  aRegTAF, Array   , Registro referentes ao pai imediato contido na tabela TAF.
							[1] - TAF_CODEST
							[2] - TAF_NIVSUP
							[3] - TAF_FILIAL
@param  aRegTRB, Array   , Registro referentes ao pai imediato contido na tabela temporária.
							[1] - TRB_CODEST
							[2] - TRB_NIVSUP
							[3] - TRB_FILIAL
@param  cTable , Caracter, Tabela temporária que controla registros da tree.
@return Lógico , Define se houve alteração de C.C. ou C.T. no pai imediato ou se o bem mudou de pai.
/*/
//------------------------------------------------------------------------------------------------
Function MntUpdTAF( aRegTAF, aRegTRB, cTable )

	Local lRet     := ( aRegTAF[2] != aRegTRB[2] )
	Local aAreaTRB := (cTable)->( GetArea() )
	Local aAreaTAF := TAF->( GetArea() )

	// CASO O NÍVEL SUPERIRO FOI ALTERADO NÃO NECESSITA VEIFICAR O C.C. E C.T.
	If !lRet

		// VERIFICA SE OUVE ALTERAÇÃO NO C.C. OU C.T. NO PAI IMEDIATO.
		dbSelectArea( cTable )
		dbSetOrder( 2 ) // CODEST + CODPRO + FILIAL
		If dbSeek( aRegTRB[1] + aRegTRB[2] + aRegTRB[3] )

			lRet := ( (cTable)->CC != TAF->TAF_CCUSTO ) .Or.  ( (cTable)->CENTRAB != TAF->TAF_CENTRA )

		EndIf

	EndIf

	RestArea( aAreaTRB )
	RestArea( aAreaTAF )

Return lRet

//--------------------------------------------------------------------------------------------------
/*/{Proteus.doc} MNTA902TUB
Aciona a função que valida as regras de restrição para as entidades relacionadas a entidade principal.
@type function

@author Alexandre Santos
@since  25/06/2021

@param  cType   , string, Indica a quem as regras de restrições são aplicadas, sendo: ( 1=Grupo; 2=Usuario )
@param  cGrpUsr , string, Código do Grupo ou Usuário.
@param  aOptions, array , Informaçoes para localizar as regras de restrição.
							[1] - Tipo de Regra
							[2] - Código
@param  cTRest  , string, Define a qual processo são aplicadas as restrições ( 1=Árvore Lógica; 2=Distribuição )

@return boolean , Indica se o item validado pode ser visualizado.
/*/
//------------------------------------------------------------------------------------------------
Function MNTA902TUB( cType, cGrpUsr, aOptions, cTRest )

	Local lRet     := .T.
	Local nIndex   := 0

	For nIndex := 1 To Len( aOptions )

		If !NGVerifTUB( cType, cGrpUsr, aOptions[nIndex,1], aOptions[nIndex,2], cTRest )

			lRet := .F.
			Exit

		EndIf

	Next nIndex

Return lRet
