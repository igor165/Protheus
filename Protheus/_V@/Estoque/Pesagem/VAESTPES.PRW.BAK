#INCLUDE 'PROTHEUS.CH'
#include "fwmvcdef.ch"
#Include "TryException.ch"

Static cTitulo := "Pesagem" 

User Function VAESTPES()
    Local aArea   		:= FwGetArea()
    Local oModel  		:= NIL
	Local cFunBkp 		:= FunName()  
    
    SetFunName("VAESTPES")
	
    oModel := FWMBrowse():New()
	oModel:SetAlias( "ZPB" )
	oModel:SetDescription( cTitulo )
	oModel:Activate()
	
    SetFunName(cFunBkp)
	FwRestArea(aArea)
Return 

Static Function MenuDef()
	Local aRot := {}
	
	ADD OPTION aRot TITLE 'Visualizar' 		ACTION 'VIEWDEF.VAESTPES' 			OPERATION MODEL_OPERATION_VIEW   ACCESS 0 //OPERATION 1
	//ADD OPTION aRot TITLE 'Incluir'    		ACTION 'U_Tela1Pesagem' 			OPERATION MODEL_OPERATION_INSERT ACCESS 0 //OPERATION 3
	//ADD OPTION aRot TITLE 'Alterar'    		ACTION 'U_Tela2Pesagem' 			OPERATION MODEL_OPERATION_UPDATE ACCESS 0 //OPERATION 4
	ADD OPTION aRot TITLE 'Incluir'    		ACTION 'VIEWDEF.VAESTPES' 			OPERATION MODEL_OPERATION_INSERT ACCESS 0 //OPERATION 3
	ADD OPTION aRot TITLE 'Alterar'    		ACTION 'VIEWDEF.VAESTPES' 			OPERATION MODEL_OPERATION_UPDATE ACCESS 0 //OPERATION 4
	ADD OPTION aRot TITLE 'Excluir'    		ACTION 'VIEWDEF.VAESTPES' 			OPERATION MODEL_OPERATION_DELETE ACCESS 0 //OPERATION 5

Return aRot


Static Function ModelDef()
	Local oModel   	:= Nil
	Local oStruct   := FWFormStruct(1, 'ZPB') 
	//Local oStFilho 	:= FWFormStruct(1, 'ZPB')
	//Local bVldPos  	:= {|| u_I03GPRE()    	}
	//Local bVldCom  	:= {|| u_zSaveZPBMd2()	}
	//Local bVldPre 	:= {|| u_LockUnlock() 	}
	Local aGatilhos 	:= {}
	Local nI 

	//aAdd(aGatilhos,FwStruTrigger(;
	//							"ZAV_NOTA" 	 ,; // Campo Dominio
	//							"ZAV_ORIGEM" ,; // Campo de Contradominio
	//							"'M'" 		 ,; // Regra de Preenchimento
	//							.F.   		 ,; // Se posicionara ou nao antes da execucao do gatilhos
	//							""    		 ,; // Alias da tabela a ser posicionada
	//							0     		 ,; // Ordem da tabela a ser posicionada
	//							""    		 ,; // Chave de busca da tabela a ser posicionada
	//							NIL   		 ,; // Condicao para execucao do gatilho
	//							"01" )		 ; // Sequencia do gatilho (usado para identificacao no caso de erro)
	//							)

	aAdd(aGatilhos,FwStruTrigger("ZPB_PESOE" ,"ZPB_PEMAN1" ,"'M'"				,.F. ,"" ,0 ,"" ,NIL ,"004" ))
	aAdd(aGatilhos,FwStruTrigger("ZPB_PESOE" ,"ZPB_USRP1"  ,"'"+cUserName+"'"	,.F. ,"" ,0 ,"" ,NIL ,"005" ))
	aAdd(aGatilhos,FwStruTrigger("ZPB_PESOS" ,"ZPB_PEMAN2" ,"'M'"				,.F. ,"" ,0 ,"" ,NIL ,"003" ))
	aAdd(aGatilhos,FwStruTrigger("ZPB_PESOS" ,"ZPB_USRP2"  ,"'"+cUserName+"'"	,.F. ,"" ,0 ,"" ,NIL ,"004" ))

	For nI := 1 to Len(aGatilhos)
		oStruct:AddTrigger(aGatilhos[nI,1],;
							 aGatilhos[nI,2],;
							 aGatilhos[nI,3],;
							 aGatilhos[nI,4])
	Next nI

	//Criando o FormModel, adicionando o CabeÃ§alho e Grid
	oModel := MPFormModel():New("ESTPESV",/* bVldPre */, /* bVldPos */ /*Pos-Validacao*/, /* bVldCom */ /*Commit*/,/*Cancel*/)

	oModel:AddFields("ZPBMASTER",/*cOwner*/ ,oStruct  )

	oModel:SetPrimaryKey({ })

	//Setando outras informaÃ§Ãµes do Modelo de Dados
	oModel:SetDescription(cTitulo)
	oModel:GetModel("ZPBMASTER"):SetDescription("Formulário da "+cTitulo)
	
    //oModel:InstallEvent("VLD_PESAGEM", , zClassPesagem():New(oModel))

Return oModel

Static Function ViewDef()
	Local oModel     	:= FWLoadModel("VAESTPES")
	Local oStruct     	:= FWFormStruct(2, 'ZPB')
	Local oView      	:= FWFormView():New()
    
    //oModel := 
	oView:SetModel(oModel)

	oView:AddField("VIEW_CAB" , oStruct  , "ZPBMASTER")

	//Setando o dimensionamento de tamanho
	oView:CreateHorizontalBox('CABEC', 100)

	//Amarrando a view com as box
	oView:SetOwnerView('VIEW_CAB'  ,'CABEC')

	//oView:AddOtherObject("CAP_1PES",{|oPanel,oOtherObject| criaButtonSel(oPanel,oOtherObject)})
	//oView:AddOtherObject("CAP_2PES",{|oPanel,oOtherObject| criaButtonSel(oPanel,oOtherObject)})

	//Tratativa padrÃ£o para fechar a tela
	//oView:SetCloseOnOk( { |oView| .T. } )
	
	//oView:AddUserButton( 'Cadastrar Motivo','', {|oView| U_VAESTI04()} )
	//oView:AddUserButton( 'Cadastrar Morte','', {|oView| Morte()} )
	//oView:AddUserButton( 'Cadastrar Nascimento','', {|oView| Nascimento()} )
	//oView:AddUserButton( 'Estorno','', {|oView| Estorno()} )
	
	SetKey( VK_F10, { || U_PegaPeso(.T.) } )
    SetKey( VK_F11, { || Iif(U_ZADSalvar(), mbPesoPrint(), .T.) } )
    SetKey( VK_F4 , { || Iif(U_ZADSalvar(.F.), (AtualPsgemNF(), oDlg2:End()), .T.) } )

Return oView

User Function PegaPeso( lGravPeso )
	Local oModel 	:= FwModelActivate()
	Local oMdlDad 	:= oModel:GetModel("ZPBMASTER")
	Local oView 	:= FWViewActive()
	Local nRetorno := 0 // U_ToledoSocket(.T.)
	
	nRetorno := U_ToledoSocket(.T.)
	// // durante desenvolvimento
	// If GetServerIP() == "192.168.0.250" .AND. nRetorno==0
	//     nRetorno := Randomize( 5000, 20000 )
	// EndIf
	if lGravPeso
		if nRetorno > 0 
			If INCLUI
				if nQualPesagem == 0 // entao 1ª pesagem
					oMdlDad:SetValue("ZPB_HORA" 	, Time())
					//oMdlDad:SetValue("ZPB_OPESOE",)
					oMdlDad:SetValue("ZPB_PESOE"	, nRetorno)
					oMdlDad:SetValue("ZPB_PESOL"	, ABS(nRetorno - iIf(ValType(oMdlDad:GetValue("ZPB_PESOS"))=="U", 0, oMdlDad:GetValue("ZPB_PESOS"))))
					oMdlDad:SetValue("ZPB_PEMAN1" 	, "A")
					oMdlDad:SetValue("ZPB_USRP1"  	, cUserName)

				Else
					oMdlDad:SetValue("ZPB_DATAF" 	, Date())
					oMdlDad:SetValue("ZPB_HORAF" 	, Time())
					//oMdlDad:SetValue("ZPB_OPESOS", nRetorno)
					oMdlDad:SetValue("ZPB_PESOS" 	, nRetorno)
					oMdlDad:SetValue("ZPB_PESOL" 	, ABS( iIf(ValType(oMdlDad:GetValue("ZPB_PESOE"))=="U", 0, oMdlDad:GetValue("ZPB_PESOE")) - nRetorno))
					oMdlDad:SetValue("ZPB_PEMAN2" 	, "A")
					oMdlDad:SetValue("ZPB_USRP2"  	, cUserName)
				EndIf
			Else
				If oMdlDad:GetValue("ZPB_PESOE") == 0 // nQualPesagem == 0 // entao 1ª pesagem
					oMdlDad:SetValue("ZPB_HORA" , Time())
					//oMdlDad:SetValue("ZPB_OPESOE",)
					oMdlDad:SetValue("ZPB_PESOE", nRetorno)
					oMdlDad:SetValue("ZPB_PESOL", ABS(nRetorno - iIf(ValType(oMdlDad:GetValue("ZPB_PESOS"))=="U", 0, oMdlDad:GetValue("ZPB_PESOS"))))
					oMdlDad:SetValue("ZPB_PEMAN1" 	, "A")
					oMdlDad:SetValue("ZPB_USRP1"  	, cUserName)
				Else
					oMdlDad:SetValue("ZPB_DATAF" , Date())
					oMdlDad:SetValue("ZPB_HORAF" , Time())
					//oMdlDad:SetValue("ZPB_OPESOS", nRetorno)
					oMdlDad:SetValue("ZPB_PESOS" , nRetorno)
					oMdlDad:SetValue("ZPB_PESOL" , ABS( iIf(ValType(oMdlDad:GetValue("ZPB_PESOE"))=="U", 0, oMdlDad:GetValue("ZPB_PESOE")) - nRetorno))
					oMdlDad:SetValue("ZPB_PEMAN2" 	, "A")
					oMdlDad:SetValue("ZPB_USRP2"  	, cUserName)
				EndIf
			EndIf
		else 
			MsgStop("Peso igual a 0, não será preenchido!")
		EndIf
	EndIf
	oView:Refresh()
Return nRetorno

User Function ReLoadLiquido()
	Local oModel 	:= FwModelActivate()
	Local oMdlDad 	:= oModel:GetModel("ZPBMASTER")
	Local nValor 	:= 0

	// If INCLUI // (nQualPesagem==0)
	nValor := oMdlDad:GetValue("ZPB_PESOL") := ABS(oMdlDad:GetValue("ZPB_PESOE")  -  oMdlDad:GetValue("ZPB_PESOS"))
	//nValor := M->ZPB_PESOL := ABS(M->ZPB_PESOE - M->ZPB_PESOS)
	//Else
	// nValor := ZPB->ZPB_PESOL := ABS(ZPB->ZPB_PESOE - ZPB->ZPB_PESOS)
	// EndIf

Return nValor

User Function ZADSalvar(lAuto)
    Local aAreaZPB := ZPB->(GetArea())
    Local lRecLock := nQualPesagem == 0 // .T.
	Local oModel 	:= FwModelActivate()
	Local oMdlDad 	:= oModel:GetModel("ZPBMASTER")
    Local cChave   := ""

    Default lAuto  := .T.

    MBSaveLog():FULLWrite(, .F., "ZADSALVAR Manual: Placa - "+ AllTrim(M->ZPB_PLACA ) + " Peso - "   + AllTrim( cValToChar(M->ZPB_PESOE) ) )
    MBSaveLog():FULLWrite(, .F., "ZADSALVAR Auto:   Placa - "+ AllTrim(M->ZPB_PLACA ) + " Peso - "   + AllTrim( cValToChar(M->ZPB_OPESOE) ) )
    MBSaveLog():FULLWrite(, .F., "ZADSALVAR Manual: Placa - "+ AllTrim(M->ZPB_PLACA ) + " Peso - "   + AllTrim( cValToChar(M->ZPB_PESOS) ) )
    MBSaveLog():FULLWrite(, .F., "ZADSALVAR Auto:   Placa - "+ AllTrim(M->ZPB_PLACA ) + " Peso - "   + AllTrim( cValToChar(M->ZPB_OPESOS) ) )

    If oMdlDad:GetValue("ZPB_PESOE") == 0
        MSGSTOP('<font color="#FF0000" size="5"><b>PESO DE ENTRADA NÃO INFORMADO. SAIDA BLOQUEADA.</b></font>', "Atenção")
        Return .F.
    EndIf
    
    if !lAuto .AND. oMdlDad:GetValue("ZPB_PESOS") ==0
        if !MSGYESNO('<font color="#FF0000" size="6"><b>PESO DE SAÍDA NÃO INFORMADO. DESEJA SAIR?</b></font>', "Atenção")
            Return .F.
        ENDIF
    ENDIF

    If lAuto .AND. oMdlDad:GetValue("ZPB_PESOS") ==0
        MSGSTOP('<font color="#FF0000" size="5"><b>PESO DE SAÍDA NÃO INFORMADO. SAIDA BLOQUEADA.</b></font>', "Atenção")
        Return .F.
    ENDIF

    If lAuto .OR. oMdlDad:GetValue("ZPB_PESOE") >0.AND. oMdlDad:GetValue("ZPB_PESOS")>0
        If !Obrigatorio(aGets, aTela) .OR. !VldPesagem()
            Return .F.
        EndIf
    EndIf

//    If INCLUI
        cChave := dToS(oMdlDad:GetValue("ZPB_DATA"))+ oMdlDad:GetValue("ZPB_CODIGO")
//    Else
        //cChave := dToS(oMdlDad:GetValue("ZPB_DATA"))+ oMdlDad:GetValue("ZPB_CODIGO")
//    EndIf

    BeginTran()
    TryException
        ZPB->( DbSetOrder(1) )
        lRecLock:=!ZPB->(DbSeek( xFilial("ZPB") + cChave))
        RecLock( "ZPB", lRecLock )
        ZPB->ZPB_FILIAL	:= xFilial('ZPB')
        U_GrvCpo("ZPB")
        oMdlDad:SetValue("ZPB_STATUS", IiF( oMdlDad:GetValue("ZPB_PESOE") >0.AND. oMdlDad:GetValue("ZPB_PESOS")>0, "F", "1"))
        ZPB->(MsUnlock())

        // While __lSX8
        // ZPB->( ConfirmSX8() )
        // EndDo
        MSUnlockAll()
        //oBrowse:Refresh()

        If !lAuto
            cPlacaTGet   := CriaVar( 'DA3_PLACA' , .F.)
            nQualPesagem := 0
        EndIf

    CatchException Using oException
        Alert("Erro ao Gravar Pessagem: " + CRLF + oException:Description)
        u_ShowException(oException)
        DisarmTransaction()
    EndException
    EndTran()
    RestArea(aAreaZPB)

    SetKey( VK_F10, NIL)
    SetKey( VK_F11, NIL)
    SetKey( VK_F4 , NIL)

Return .T.

/*--------------------------------------------------------------------------------,
 | Principal: 					     U_MBESTPES()          		              	  |
 | Func:  fDefinePessagem 	            	          	            	          |
 | Autor: Miguel Martins Bernardo Junior	            	          	          |
 | Data:  25.09.2020                   	          	            	              |
 | Desc:  0=Nao localizado pesagem                                                |
 |        1=Existe pesagem, portanto agora é a 2ª pesagem, ou seja, peso de saida |
 |        PROGRAMAR SQL DE VERIFICACAO DA EXISTENCIA DE PESAGEM                   |
 '--------------------------------------------------------------------------------|
 | Alter:                                                                         |
 | Obs.:                                                                          |
            '--------------------------------------------------------------------------------*/
Static Function UltPesagemXPlaca(cPlaca)
	Local aArea    := GetArea()
	Local _cQry    := ""
	Local aRetorno := {}

	_cQry := " SELECT	TOP 1 R_E_C_N_O_ RECNO--, * " + CRLF
	_cQry += " FROM	"+RetSqlName("ZPB")+" " + CRLF
	_cQry += " WHERE	ZPB_PLACA = '"+ cPlaca +"' " + CRLF
	_cQry += "     AND D_E_L_E_T_=' ' " + CRLF
	_cQry += " ORDER BY R_E_C_N_O_ DESC "
	If lower(cUserName) $ 'bernardo,mbernardo,atoshio,admin,administrador,ioliveira'
		MemoWrite("C:\totvs_relatorios\UltPesagemXPlaca "+cPlacaTGet+".sql" , _cQry)
	EndIf
	dbUseArea(.T.,'TOPCONN',TCGENQRY(,, _cQry ),"TEMPSQL",.F.,.F.)
	if !TEMPSQL->(Eof())
		ZPB->(DbGoTo(TEMPSQL->RECNO))
		aAdd( aRetorno, { ZPB->ZPB_CODMOT,;
							ZPB->ZPB_CPFMOT,;
							ZPB->ZPB_NOMMOT,;
							ZPB->ZPB_PRODUT,;
							ZPB->ZPB_DESC  ,;
							ZPB->ZPB_CLIFOR,;
							ZPB->ZPB_CODFOR,;
							ZPB->ZPB_LOJFOR,;
							ZPB->ZPB_NOMFOR,;
							ZPB->ZPB_LOCAL ,;
							ZPB->ZPB_BAIA  ,;
							ZPB->ZPB_OBSERV } )
	EndIf
	TEMPSQL->(DbCloseArea())
	RestArea(aArea)
Return aRetorno

User Function ESTPESV()
	Local aParam 		:= PARAMIXB
	Local lRet 			:= .T.
	Local cIdPonto 		:= ''
	Local cIdModel 		:= ''
	Local cIdIXB5		:= ''
	Local cIdIXB4		:= ''
	Local oModel 	 	:= nil
	Local oStruct		:= nil
	Local oCab			:= nil
	Local oGridM 		:= nil
	Local nI 
	Local nOper      := 0
	Local _aMotorista	:= {}

	
	If aParam <> NIL
		oModel 	 := aParam[1]
		cIdPonto := aParam[2]
		cIdModel := aParam[3]

		if len(aParam) >= 4
			cIdIXB4  := aParam[4]
		endif 

		if len(aParam) >= 5
			cIdIXB5  := aParam[5]
		endif 
		
		if cIdPonto == "MODELVLDACTIVE"
			nOper := oModel:nOperation

			//Se for inclusão, define o ini padrão
			If nOper == 3 .or. nOper == 4
				oStruct := oModel:GetModel( 'ZPBMASTER' ):GetStruct()
				If (nQualPesagem==0)
					oStruct:SetProperty( 'ZPB_PLACA', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+cPlacaTGet+"'" ) )
					//M->ZPB_PLACA := cPlacaTGet
					_aMotorista  := UltPesagemXPlaca(cPlacaTGet)
					If (!Empty(_aMotorista)) // preenchimento de campos automaticamente de acordo com a ultima pesagem do caminhao
						oStruct:SetProperty( 'ZPB_CODMOT', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 01]+"'" ) )
						oStruct:SetProperty( 'ZPB_CPFMOT', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 02]+"'" ) )
						oStruct:SetProperty( 'ZPB_NOMMOT', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 03]+"'" ) )
						oStruct:SetProperty( 'ZPB_PRODUT', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 04]+"'" ) )
						oStruct:SetProperty( 'ZPB_DESC'  , MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 05]+"'" ) )
						oStruct:SetProperty( 'ZPB_CLIFOR', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 06]+"'" ) )
						oStruct:SetProperty( 'ZPB_CODFOR', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 07]+"'" ) )
						oStruct:SetProperty( 'ZPB_LOJFOR', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 08]+"'" ) )
						oStruct:SetProperty( 'ZPB_NOMFOR', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 09]+"'" ) )
						oStruct:SetProperty( 'ZPB_LOCAL' , MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 10]+"'" ) )
						oStruct:SetProperty( 'ZPB_BAIA'  , MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 11]+"'" ) )
					//	oStruct:SetProperty( 'ZPB_OBSERV', MODEL_FIELD_INIT, FwBuildFeature( STRUCT_FEATURE_INIPAD, "'"+_aMotorista[01, 12]+"'" ) )
					EndIf
				EndIf
			endif 			
		elseif Alltrim(cIdPonto) == "FORMPRE" .and. cIdModel == 'ZMSDETAIL' .AND. cIdIXB5 == 'CANSETVALUE' .AND. AllTrim(cIdIXB4) == 'ZMS_QTDE'
			oModel 	 	:= FwModelActivate()
			oGridM 		:= oModel:GetModel("ZMSDETAIL")
		elseif Alltrim(cIdPonto) == 'FORMPRE' .AND. cIdModel == 'ZMSDETAIL' .AND. cIdIXB5 == 'ISENABLE'
			oModel 	 	:= FwModelActivate()
			oGridM 		:= oModel:GetModel("ZMSDETAIL")
			oCab 		:= oModel:GetModel("ZMSMASTER")

			if oModel:GetOperation() == 4
				if oGridM:GetValue("ZMS_D3EST") == 'N'
					for nI := 1 to oGridM:GetQtdLine()
						oGridM:GoLine(nI)
						if !Empty(oGridM:GetValue("ZMS_D3DOC"))
							oGridM:SetNoInsertLine(.T.)
							exit
						endif
					next
				endif
			endif
		endif
	endif 
Return lRet 
