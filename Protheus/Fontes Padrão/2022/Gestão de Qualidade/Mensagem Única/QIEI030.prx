#INCLUDE 'PROTHEUS.CH'
#INCLUDE 'FWADAPTEREAI.CH'
#INCLUDE 'QIEI030.CH'

Function QIEI030( cXml, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj )
Local cError   := ""
Local cWarning := ""
Local cVersao  := ""
Local lRet     := .T.
Local aRet     := {}
Private oXMl   := Nil

Default cXml		:= ""
Default nTypeTrans	:= "3"
Default cTypeMessage:= ""
Default cVersion	:= ""
Default cTransac	:= ""
Default lEAIObj		:= .F.

//Integracao via JSON
If lEAIObj
	Return QIEI030Json( cXml, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj )
EndIf

If nTypeTrans == TRANS_RECEIVE
	If cTypeMessage == EAI_MESSAGE_BUSINESS .Or. cTypeMessage == EAI_MESSAGE_RESPONSE
		oXml := xmlParser(cXml, "_", @cError, @cWarning)

		If oXml != Nil .And. Empty(cError) .And. Empty(cWarning)
			If Type("oXml:_TOTVSMessage:_MessageInformation:_Version:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_MessageInformation:_Version:Text)
				cVersao := StrTokArr(oXml:_TOTVSMessage:_MessageInformation:_Version:Text, ".")[1]
			Else
				If Type("oXml:_TOTVSMessage:_MessageInformation:_StandardVersion:Text") != "U" .And.  !Empty(oXml:_TOTVSMessage:_MessageInformation:_StandardVersion:Text)
					cVersao := StrTokArr(oXml:_TOTVSMessage:_MessageInformation:_StandardVersion:Text, ".")[1] 	            
				Else
					aRet := {.F.,STR0008} // "Versão da mensagem não informada!"
				Endif
			EndIf
		Else
			aRet := {.F.,STR0009} // "Erro no parser!"
		EndIf

		If lRet
			If cVersao == "1"
				aRet := v1000(cXml, nTypeTrans, cTypeMessage)
			ElseIf cVersao == "2"
				aRet := v2000(cXml, nTypeTrans, cTypeMessage, oXml)
			Else
				aRet := {.F.,STR0010} // "A versão da mensagem informada não foi implementada!"
			EndIf
		EndIf
	ElseIf cTypeMessage == EAI_MESSAGE_WHOIS
		aRet := v2000(cXml, nTypeTrans, cTypeMessage, oXml)
	EndIf

ElseIf nTypeTrans == TRANS_SEND
	If Empty(cVersion)
		aRet := {.F.,STR0011} // "Versão não informada no cadastro do adapter."
	Else
		cVersao := StrTokArr(cVersion, ".")[1]
	EndIf
	
	If lRet
		If cVersao == "1"
			aRet := v1000(cXml, nTypeTrans, cTypeMessage)
		ElseIf cVersao == "2"
			aRet := v2000(cXml, nTypeTrans, cTypeMessage, oXml)
		Else
			aRet := {.F.,STR0010} // "A versão da mensagem informada não foi implementada!"
		EndIf
	EndIf
EndIf

Return aRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³IntegDef  ºAutor  ³ Marcelo C. Coutinho  º Data ³  28/10/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Mensagem Única                                                               º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Mensagem Única                                               º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function v1000( cXML, nTypeTrans, cTypeMessage )

Local lRet     	:= .T.
Local cXMLRet  	:= ""
Local cError		:= ""
Local cWarning 	:= ""
Local cCode			:= ""
Local nCount      := 0
Local aCab			:= {}
Local aItens		:= {}
Local nOpcx			:= 0
Local cLogErro 	:= ""
Local aErroAuto	:= {}
Local cEvent      := "upsert"
Local cValInt		:=""
Local lMktPlace 	:= SuperGetMv("MV_MKPLACE",.F.,.F.)

Private oXmlA030		  := Nil
Private nCountA030	  := 0
Private lMsErroAuto    := .F.
Private lAutoErrNoFile := .T.

If nTypeTrans == TRANS_RECEIVE
	If cTypeMessage == EAI_MESSAGE_BUSINESS
		oXmlA030 := XmlParser(cXml, "_", @cError, @cWarning)

		If oXmlA030 <> Nil .And. Empty(cError) .And. Empty(cWarning)
			
			If Type("oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text") <> "U"
				cCode :=   PadR( oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text , TamSX3("AH_UNIMED")[1] )
				Aadd( aCab, { "AH_UNIMED",cCode, Nil })
			Endif
			
			If Upper(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "UPSERT"
				If Empty(cCode)
					nOpcx := 3
				Else
					If SAH->( MsSeek( xFilial('SAH')+ cCode ))
						nOpcx:= 4
					Else
						nOpcx:= 3
					EndIf
				Endif
			ElseIf Upper(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "DELETE"
				nOpcx := 5
			EndIf

			Aadd( aCab, { "AH_FILIAL", xFilial("SAH"), Nil })

			If nOpcx <> 5
				If Type("oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Description:Text") <> "U"
					Aadd( aCab, { "AH_DESCPO", oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Description:Text, Nil })
				EndIf
				
				If lMktPlace
					If Type("oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text") <> "U"
						Aadd( aCab, { "AH_UMRES",  oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text,   Nil })
					EndIf
				Endif
			EndIf

			MSExecAuto({|x,y| QIEA030(x,y)},aCab,nOpcx)

			If lMsErroAuto
				aErroAuto := GetAutoGRLog()
				
				For nCount := 1 To Len(aErroAuto)
					cLogErro += StrTran(StrTran(aErroAuto[nCount],"<",""),"-","") + (" ")
				Next nCount
				
				// Monta XML de Erro de execução da rotina automatica.
				lRet := .F.
				cXMLRet := cLogErro
			Else
				// Monta xml com status do processamento da rotina autmotica OK.
				cXMLRet := "<OrderId>" + RTrim(SAH->AH_UNIMED) + "</OrderId>"
			EndIf
		Else
			// "Falha ao gerar o objeto XML"
			lRet := .F.
			cXMLRet := "Falha ao manipular o XML"
		EndIf

	ElseIf cTypeMessage == EAI_MESSAGE_RESPONSE
		cXMLRet := '<TAGX>TESTE DE RECEPCAO RESPONSE MESSAGE</TAGX>'
	ElseIf   cTypeMessage == EAI_MESSAGE_WHOIS
		cXMLRet := '1.000|2.000'
	EndIf

ElseIf nTypeTrans == TRANS_SEND

	If !Inclui .And. !Altera
		cEvent := "delete"
	EndIf

	cXMLRet := '<BusinessEvent>'
	cXMLRet +=     '<Entity>UnitOfMeasure</Entity>'
	cXMLRet +=     '<Event>'+ cEvent +'</Event>'
	cXMLRet +=     '<Identification>'
	cXMLRet +=         '<key name="Code">' + RTrim(SAH->AH_UNIMED)   + '</key>'
	cXMLRet +=     '</Identification>'
	cXMLRet += '</BusinessEvent>'
	cXMLRet += '<BusinessContent>'
	
	If lMktPlace
		cXMLRet += '<InternalId>' + IntUndExt(,, SAH->AH_UNIMED,)[2] + '</InternalId>'
	Endif
	
	cXMLRet += '<Code>' + RTrim(SAH->AH_UNIMED) + '</Code>'
	cXMLRet += '<Description>' + RTrim(SAH->AH_DESCPO) + '</Description>'
	
	If lMktPlace
		cXMLRet +=		'<ShortName>'	+ RTrim(SAH->AH_UMRES) + '</ShortName>'  //ESSA É A SILA
	Endif
	
	cXMLRet += '</BusinessContent>'

EndIf

Return { lRet, cXMLRet }

//-------------------------------------------------------------------
/*/{Protheus.doc} v2000

Funcao de integracao com o adapter EAI para envio e recebimento do  cadastro de
Unidade de Medida (SAH) utilizando o conceito de mensagem unica.

@param   cXml          Variavel com conteudo xml para envio/recebimento.
@param   nTypeTrans    Tipo de transacao. (Envio/Recebimento)
@param   cTypeMessage  Tipo de mensagem. (Business Type, WhoIs, etc)

@author  Leandro Luiz da Cruz
@version P11
@since   28/06/2012
@return  aRet - Array contendo o resultado da execucao e a mensagem Xml de retorno.
         aRet[1] - (boolean) Indica o resultado da execução da função
         aRet[2] - (caracter) Mensagem Xml para envio

@obs     O método irá retornar um objeto do tipo TOTVSBusinessEvent caso
         o tipo da mensagem seja EAI_BUSINESS_EVENT ou um tipo
         TOTVSBusinessRequest caso a mensagem seja do tipo TOTVSBusinessRequest.
         O tipo da classe pode ser definido com a função EAI_BUSINESS_REQUEST.
/*/
//-------------------------------------------------------------------
Static Function v2000(cXml, nTypeTrans, cTypeMessage, oXml)
    
Local lRet          := .T.
Local nOpcx         := 0
Local nCount        := 1
Local cXMLRet       := ""
Local cError        := ""
Local cWarning      := ""
Local cLogErro      := ""
Local aUnidMed      := {}
Local aErroAuto     := {}
Local cEvent        := "upsert"
Local cProduct      := ""
Local cValInt       := ""
Local cValExt       := ""
Local cAlias        := "SAH"
Local cField        := "AH_UNIMED" 
Local cCode         := ""
Local cVersao       := RTrim(PmsMsgUVer('UNITOFMEASURE', 'QIEA030')) //Versão da mensagem

Private oXmlA030    := oXml
Private lMsErroAuto := .F.

//Mensagem de Entrada
If nTypeTrans == TRANS_RECEIVE
	If cTypeMessage == EAI_MESSAGE_BUSINESS // Verifica se a marca foi informada
		If Type("oXmlA030:_TotvsMessage:_MessageInformation:_Product:_Name:Text") != "U" .Or. !Empty(oXmlA030:_TotvsMessage:_MessageInformation:_Product:_Name:Text)
			cProduct := oXmlA030:_TotvsMessage:_MessageInformation:_Product:_Name:Text
		Else
			lRet    := .F.
			cXmlRet := STR0014 // "A Marca é obrigatória!"
			Return {lRet, cXMLRet}
		EndIf

		// Verifica se o InternalId foi informado
		If Type("oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text") != "U" .And. !Empty(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text)
			cValExt := Upper(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text)
		Else
			lRet    := .F.
			cXmlRet := STR0015 // "O código do InternalId é obrigatório!"
			Return {lRet, cXMLRet}
		EndIf

		// Verifica se o Código da Unidade de Medida foi informado
		If Type("oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text") != "U" .And. !Empty(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text)
			cCode := oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text
		Else
			If Empty(Posicione("SX3", 2, PadR("AH_UNIMED", 10), "X3_RELACAO"))
				lRet    := .F.
				cXmlRet := STR0016 // "O código da Unidade de Medida é obrigatório!"
				Return {lRet, cXMLRet}
			EndIf
		EndIf

		// Obtém o valor interno da tabela XXF (de/para)
		aAux := IntUndInt(cValExt, cProduct, cVersao)

		cCode := FwNoAccent(cCode) //retiara os acentos do codigo
		cCode := IntUndCEsp(cCode) //Tratamento caracter especial
     
		// Verifica se o evento é Upsert
		If Upper(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "UPSERT"
			// Se o registro foi encontrado
			If aAux[1]
				cCode := aAux[2][3]
				nOpcx := 4 // Update
			Else
				If Empty(Posicione("SX3", 2, PadR("AH_UNIMED", 10), "X3_RELACAO"))
					//Valida tamanho do codigo enviado
					If TamSx3("AH_UNIMED")[1] >= Len(AllTrim(cCode))
						SAH->(dbSetOrder(1))
               	
						If SAH->(DbSeek(xFilial("SAH") + Padr(cCode, TamSx3("AH_UNIMED")[1])))
							nOpcx := 4 // Update
						Else 	
							nOpcx := 3 // Insert
						EndIf
					Else
						If SuperGetMV("MV_QIEICOD",.F.,.T.)
							lRet := .F.
							cXmlRet := STR0032 + AllTrim(cCode) + STR0033 + Chr(10) //"O Codigo da Unidade de Medida "## " possui tamanho maior que o permitido."
							cXmlRet += STR0034 + CValToChar(TamSx3("AH_UNIMED")[1]) + Chr(10) // "Maximo:"
							cXmlRet += STR0035 + CValToChar(Len(AllTrim(cCode))) // "Enviado:"
							Return {lRet, cXmlRet}
						Else
							cCode   := geraCod(cCode)
							nOpcx   := 3 // Insert
						Endif
					EndIf
				Else
					cCode := ""
					nOpcx := 3 // Insert
				EndIf
			EndIf
		
		// Verifica se o evento é Delete
		ElseIf Upper(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "DELETE"
			// Se o registro existe
			If aAux[1]   
				cCode := aAux[2][3]
				nOpcx := 5 // Delete
			Else
				lRet := .F.
				cXmlRet := STR0017 + " -> " + cValExt // "O registro a ser excluído não existe na base Protheus"
				Return {lRet, cXmlRet}
			EndIf
		Else
			lRet    := .F.
			cXmlRet := STR0018 // "O evento informado é inválido!"
			Return {lRet, cXMLRet}
		EndIf

		cValInt := IntUndExt(,,cCode,cVersao)[2]
		
		// Armazena o Código da Unidade de Medida no Array
		aAdd(aUnidMed, {"AH_UNIMED", PadR(cCode, TamSX3("AH_UNIMED")[1]), Nil})

		//Filial
		aAdd(aUnidMed, {"AH_FILIAL", xFilial("SAH"), Nil})

		// Se o evento é diferente de Delete
		If nOpcx != 5
			// Verifica se a Descrição da Unidade de Medida foi informada
			If Type("oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Description:Text") != "U" .Or. !Empty(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Description:Text)
				// Armazena a Descrição da Unidade de Medida no Array
				aAdd(aUnidMed, {"AH_DESCPO", oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Description:Text, Nil})

				// Descrição resumida versão 2.000/2.001
				If cVersao == "2.000" .OR. cVersao == "2.001"
					aAdd(aUnidMed, {"AH_UMRES", SubStr(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Description:Text, 1, TamSX3("AH_UMRES")[1]), Nil})
				EndIf
			Else
				lRet    := .F.
				cXmlRet := STR0019 // "A Descrição da Unidade de Medida é obrigatória"
				Return {lRet, cXmlRet}
			EndIf

			// Descrição resumida a partir da versão 2.002
			If cVersao != "2.000" .And. cVersao != "2.001"
				If Type("oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text") != "U" .And. !Empty(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text)
					aAdd(aUnidMed, {"AH_UMRES", SubStr(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text, 1, TamSX3("AH_UMRES")[1]), Nil})
				EndIf
			EndIf
		EndIf
		
		// Executa comando para insert, update ou delete conforme evento
		MSExecAuto({|x,y| QIEA030(x,y)}, aUnidMed, nOpcx)
		
		// Se houve erros no processamento do MSExecAuto
		If lMsErroAuto
			aErroAuto := GetAutoGRLog()

			cXmlRet := "<![CDATA["
			For nCount := 1 To Len(aErroAuto)
				cXmlRet += aErroAuto[nCount] + Chr(10)
			Next nCount
			cXmlRet += "]]>"

			If Len(aErroAuto) == 0
				cXmlRet:= "<![CDATA[Nao foi possivel efetuar a operacao]]>"
			Endif
			lRet := .F.
		Else
			// Se o evento é diferente de Delete
			If nOpcx != 5
				// Grava na Tabela XXF (de/para)
				CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .F.)
			Else
				// Exclui o InternalId na tabela XXF (de/para)
				CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .T.)
			EndIf

			// Monta XML de retorno
			cXMLRet := "<ListOfInternalId>"
			cXMLRet +=    "<InternalId>"
			cXMLRet +=       "<Name>" + "UnitOfMeasureInternalId" + "</Name>"
			cXMLRet +=       "<Origin>" + cValExt + "</Origin>" // Valor recebido na tag
			cXMLRet +=       "<Destination>" + cValInt + "</Destination>" // Valor XXF gerado
			cXMLRet +=    "</InternalId>"
			cXMLRet += "</ListOfInternalId>"
		EndIf
	ElseIf cTypeMessage == EAI_MESSAGE_RESPONSE
		// Se não houve erros na resposta
		If Upper(oXmlA030:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_Status:Text) == "OK"
			// Verifica se a marca foi informada
			If ValType("oXmlA030:_TOTVSMessage:_MessageInformation:_Product:_name:Text") != "U" .And. !Empty(oXmlA030:_TOTVSMessage:_MessageInformation:_Product:_name:Text)
				cProduct := oXmlA030:_TOTVSMessage:_MessageInformation:_Product:_name:Text
			Else
				lRet    := .F.
				cXmlRet := STR0020 // "Erro no retorno. O Product é obrigatório!"
				Return {Ret, cXmlRet}
			EndIf

			If Type("oXmlA030:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId") <> "U"
				If Type("oXmlA030:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId") != "A"
					// Transforma em array
					XmlNode2Arr(oXmlA030:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId, "_InternalId")
				Endif
        		
				If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Origin:Text") != "U" .And. !Empty(oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Origin:Text)
					cValInt := oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Origin:Text
				Else
					lRet    := .F.
					cXmlRet := STR0021 // "Erro no retorno. O OriginalInternalId é obrigatório!"
					Return {lRet, cXmlRet}
				EndIf
				
				// Verifica se o código externo foi informado
				If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Destination:Text") != "U" .And. !Empty(oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Destination:Text)
					cValExt := oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Destination:Text
				Else
					lRet    := .F.
					cXmlRet := STR0022 // "Erro no retorno. O DestinationInternalId é obrigatório"
					Return {lRet, cXmlRet}
				EndIf
				
				// Mensagem original enviada
				If Type("oXmlA030:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text") != "U" .And. !Empty(oXmlA030:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text)
					cXml := oXmlA030:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text
				Else
					lRet    := .F.
					cXmlRet := STR0023 // "Conteúdo do MessageContent vazio!"
					Return {lRet, cXmlRet}
				EndIf

				// Faz o parse do XML em um objeto
				oXmlA030 := XmlParser(cXml, "_", @cError, @cWarning)

				// Se não houve erros no parse
				If oXmlA030 != Nil .And. Empty(cError) .And. Empty(cWarning)
					If Upper(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "UPSERT"
						// Insere / Atualiza o registro na tabela XXF (de/para)
						CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .F.)
					ElseIf Upper(oXmlA030:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "DELETE"
						// Exclui o registro na tabela XXF (de/para)
						CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .T.)
					Else
						lRet := .F.
						cXmlRet := STR0024 // "Evento do retorno inválido!"
						Return {lRet, cXmlRet}
					EndIf
				Endif
			Endif
		Else
			// Se não for array
			If ValType(oXmlA030:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message) != "A"
				// Transforma em array
				XmlNode2Arr(oXmlA030:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message, "_Message")
			EndIf

			// Percorre o array para obter os erros gerados
			For nCount := 1 To Len(oXmlA030:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message)
				cError := oXmlA030:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message[nCount]:Text + Chr(10)
			Next nCount

			lRet    := .F.
			cXmlRet := cError
		EndIf
	ElseIf cTypeMessage == EAI_MESSAGE_WHOIS
		cXMLRet := "1.000|2.000|2.001|2.002"
	EndIf
ElseIf nTypeTrans == TRANS_SEND
	If !Inclui .And. !Altera
		cEvent := "delete"
		CFGA070Mnt(, cAlias, cField, , IntUndExt(cEmpAnt, SAH->AH_FILIAL, SAH->AH_UNIMED, cVersao)[2], .T.)
	EndIf

	cXmlRet := "<BusinessEvent>"
	cXmlRet +=    "<Entity>" + 'UnitOfMeasure' + "</Entity>"
	cXmlRet +=    "<Event>" + cEvent + "</Event>"
	cXmlRet +=    "<Identification>"
	cXmlRet +=    "<key name='InternalID'>" + IntUndExt(cEmpAnt, SAH->AH_FILIAL, SAH->AH_UNIMED, cVersao)[2] + "</key>"
	cXmlRet +=    "</Identification>"
	cXmlRet += "</BusinessEvent>"
	cXmlRet += "<BusinessContent>"
	cXmlRet +=    "<Code>" + RTrim(SAH->AH_UNIMED) + "</Code>"
	cXmlRet +=    "<InternalId>" + IntUndExt(cEmpAnt, SAH->AH_FILIAL, SAH->AH_UNIMED, cVersao)[2] + "</InternalId>"
	cXmlRet +=    "<Description>" + RTrim(SAH->AH_DESCPO) + "</Description>"
	
	If cVersao != "2.000" .And. cVersao != "2.001"
		cXMLRet += "<ShortName>" + RTrim(SAH->AH_UMRES) + "</ShortName>"
	EndIf
	
	cXmlRet += "</BusinessContent>"
EndIf

Return {lRet, cXMLRet}

//-------------------------------------------------------------------
/*/{Protheus.doc} geraCod
Monta codigo para o campo AH_UNIMED

@param   cCode Code vindo no XML de entrada

@author  Leandro Luiz da Cruz
@version P11
@since   25/09/2012
@return  cResult Variavel com o valor gerado
/*/
//-------------------------------------------------------------------
Static Function geraCod(cCode)

Local nX       := 0
Local nY       := 0
Local cResult  := ""
Local cAlias   := "SAH"
Local lEsgotou := .T.

For nX := 1 To Len(cCode)
	For nY := nX + 1 To Len(cCode)
		cResult := Upper(SubStr(cCode, nX, 1) + SubStr(cCode, nY, 1))

		If !SAH->(DbSeek(xFilial(cAlias) + cResult))
			lEsgotou := .F.
			nX := Len(cCode)
			nY := Len(cCode)
		EndIf
	Next nY
Next nX

If lEsgotou
	cResult := geraCod("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
EndIf

Return cResult

//-------------------------------------------------------------------
/*/{Protheus.doc} IntUndExt
Monta o InternalID da Unidade de Medida de acordo com o código passado
no parâmetro.

@param   cEmpresa Código da empresa (Default cEmpAnt)
@param   cFil     Código da Filial (Default cFilAnt)
@param   cUnidMed Código da Unidade de Medida
@param   cVersao  Versão da mensagem única (Default 2.000)

@author  Leandro Luiz da Cruz
@version P11
@since   08/02/2013
@return  aResult Array contendo no primeiro parâmetro uma variável
         lógica indicando se o registro foi encontrado.
         No segundo parâmetro uma variável string com o InternalID
         montado.

@sample  IntUndExt(,,'UN') irá retornar {.T.,'01| |UN'}
/*/
//-------------------------------------------------------------------
Function IntUndExt(cEmpresa, cFil, cUnidMed, cVersao)

Local   aResult  := {}

Default cEmpresa := cEmpAnt
Default cFil     := xFilial('SAH') // Cadastro compartilhado
Default cVersao  := '2.000'

If cVersao == '1.000'
	aAdd(aResult, .T.)
	aAdd(aResult, PadR(cUnidMed, TamSX3('AH_UNIMED')[1]))
ElseIf cVersao == '2.000' .Or. cVersao == '2.001' .Or. cVersao == '2.002'
	aAdd(aResult, .T.)
	aAdd(aResult, cEmpresa + '|' + RTrim(cFil) + '|' + RTrim(cUnidMed))
Else
	aAdd(aResult, .F.)
	aAdd(aResult, STR0028 + Chr(10) + STR0029 + " 1.000, 2.000, 2.001 e 2.002") //"Versão da mensagem de Unidade de Medida não suportada." "As versões suportadas são:
EndIf

Return aResult

//-------------------------------------------------------------------
/*/{Protheus.doc} IntUndInt
Recebe um InternalID e retorna o código da Unidade de Medida.

@param   cInternalID InternalID recebido na mensagem.
@param   cRefer      Produto que enviou a mensagem
@param   cVersao     Versão da mensagem única (Default 2.000)

@author  Leandro Luiz da Cruz
@version P11
@since   08/02/2013
@return  aResult Array contendo no primeiro parâmetro uma variável
         lógica indicando se o registro foi encontrado no de/para.
         No segundo parâmetro uma variável array com a empresa,
         filial e o Código da Unidade de Medida.

@sample  IntUndInt('01|01|UN') irá retornar {.T., {'01', '01', 'UN'}}
/*/
//-------------------------------------------------------------------
Function IntUndInt(cInternalID, cRefer, cVersao)

Local   aResult  := {}
Local   aTemp    := {}
Local   cTemp    := ''
Local   cAlias   := 'SAH'
Local   cField   := 'AH_UNIMED'
Default cVersao  := '2.000'

cTemp := CFGA070Int(cRefer, cAlias, cField, cInternalID)

If Empty(cTemp)
	aAdd(aResult, .F.)
	aAdd(aResult, STR0030 + AllTrim(cInternalID) + STR0031) //"Unidade de Medida " " não encontrada no de/para!"
Else
	If cVersao == '1.000'
		aAdd(aResult, .T.)
		aAdd(aTemp, SubStr(cTemp, 3, TamSX3('AH_UNIMED')[1]))
		aAdd(aResult, aTemp)
	ElseIf cVersao == '2.000' .Or. cVersao == '2.001' .Or. cVersao == '2.002'
		aAdd(aResult, .T.)
		aTemp := Separa(cTemp, '|')
		aAdd(aResult, aTemp)
	Else
		aAdd(aResult, .F.)
		aAdd(aResult, STR0028 + Chr(10) + STR0029 + " 1.000, 2.000, 2.001 e 2.002") //"Versão da mensagem de Unidade de Medida não suportada." "As versões suportadas são:"
	EndIf
EndIf

Return aResult

//-------------------------------------------------------------------
/*/{Protheus.doc} IntUndCEsp
Trata caracter especial no codigo da unidade de medida

@param   cCode		Codigo da unidade de medida

@author  Rodrigo M. Pontes
@version P11
@since   29/08/2017
@return  Codigo da unidade de medida convertido.

/*/
//-------------------------------------------------------------------

Function IntUndCEsp(cCode)

Local cRet		:= ""

cRet	:= StrTran(cCode,"¹","1")
cRet	:= StrTran(cCode,"²","2")
cRet	:= StrTran(cCode,"³","3")
cRet	:= Upper(cRet)

Return cRet