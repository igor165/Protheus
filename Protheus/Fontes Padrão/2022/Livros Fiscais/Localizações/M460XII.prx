#include "protheus.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#DEFINE _DEBUG   .F.   // Flag para Debuggear el codigo
#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _TES_CFO   10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _ALIQDESG  19

Function M460xii(cCalculo,nItem,aInfo,cXFisRap)        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local lXFis,xRet,nBase
Local aNfOriLot := {}

Local nX	    := 0
Local _nDecVal		:= TamSX3("D2_VALIMP"+aInfo[2])[2]
Local nPosAh:= 0


Local cLote    	:= CriaVar("D2_LOTECTL")
Local cNumL    	:= CriaVar("D2_NUMLOTE")
Local cCodPro   := CriaVar("D2_COD")
Local cLocal    := CriaVar("D2_LOCAL")
Local nQtd   	:= 0
Local nQtdSg    := 0

Private cCpoLiv := ""

SetPrvt("CALIASROT,CORDEMROT,AITEMINFO,AIMPOSTO,_CPROCNAME,_CZONCLSIGA")
SetPrvt("_LAGENTE,AFISCAL,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NVALORMIN,_NALICDESG")
SetPrvt("_NREDUCIR,")

Default cXFisRap := ""

/*/
_____________________________________________________________________________
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦+-----------------------------------------------------------------------+¦¦
¦¦¦Funcion   ¦M460xii   ¦ Autor ¦ William P. Alves       ¦Fecha ¦ 12.03.10¦¦¦
¦¦+----------+------------------------------------------------------------¦¦¦
¦¦¦Descrip.  ¦ Programa que Calcula Impostos Internos				      ¦¦¦
¦¦+----------+------------------------------------------------------------¦¦¦
¦¦¦Uso       ¦ MATA460, llamado por un punto de entrada                   ¦¦¦
¦¦+-----------------------------------------------------------------------¦¦¦
¦¦¦         ACTUALIZACIONES EFECTUADAS DESDE LA CODIFICACION INICIAL      ¦¦¦
¦¦+-----------------------------------------------------------------------¦¦¦
¦¦¦Programador ¦ Fecha  ¦ BOPS ¦  Motivo de la Alteracion                 ¦¦¦
¦¦+------------+--------+------+------------------------------------------¦¦¦
¦¦¦            ¦  /  /  ¦      ¦                                          ¦¦¦
¦¦+-----------------------------------------------------------------------+¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
//-----------------------------------------------------
// Nota:
// Debe registrarse al Cliente en la Tabla SFH en caso
// que sea Agente de Percepcion o este Exento en una ZF.
// Se utiliza el parametro MV_AGENTE
// Significado de las posiciones de MV_AGENTE
// SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
// SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
// SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
// SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
// SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
//-----------------------------------------------------
// Nota:
// Debe utilizarse el parametro MV_EXENTO 
// Significado de las posiciones de MV_EXENTO
// SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
// SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
// SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
// SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
// SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
//-----------------------------------------------------


/*/

// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _DEBUG   .F.   // Flag para Debuggear el codigo



// Indices de aImposto
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _NOMIMPOST 01
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _ALIQUOTA  02
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _BASECALC  03
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _IMPUESTO  04
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _TES_CFO   10
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _RATEOFRET 11
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _IMPFLETE  12
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _RATEODESP 13
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _IMPGASTOS 14

// Subindices de aItemINFO
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _VLRTOTAL  3
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _FLETE     4
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _GASTOS    5

lXfis:=(MaFisFound()  .And. ProcName(1)<>"EXECBLOCK")
cAliasRot  := Alias()
cOrdemRot  := IndexOrd()

If !lXFis
   aItemINFO  := ParamIxb[1]
   aImposto   := ParamIxb[2] 
   xRet:=aImposto
Else
    xRet:=0
Endif   

_cProcName := "M460xIV2"
_cZonClSIGA:= SM0->M0_ESTCOB // Zona Fiscal del Cliente SIGA

_lAgente   := .T.   // En este impuesto el Cliente SIGA siempre cobra IVA.

aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{If(lXFis,{cCalculo,nItem,aInfo},ParamIxb), _cProcName, _lAgente,_cZonClSIGA,lXFis},.T.)


If Type("aInfo") == "A" .And. Len(aInfo)>=2
	cCpoLiv := aInfo[2]
Else
	cCpoLiv := SFB->FB_CPOLVRO
EndIf


If Type("SC9->C9_PEDIDO") == "C" .And. Type("SC5->C5_NUM") == "C"
	If AllTrim(SC5->C5_NUM) == Alltrim(SC9->C9_PEDIDO)
		dbSelectArea("SC6")
		dbSetOrder(1)
		MsSeek(xFilial("SC6")+SC9->C9_PEDIDO+SC9->C9_ITEM)
		cLote    	:= SC9->C9_LOTECTL
		cNumL    	:= SC9->C9_NUMLOTE
		cCodPro    	:= SC9->C9_PRODUTO
		cLocal    	:= SC9->C9_LOCAL
		nQtd   		:= SC9->C9_QTDLIB
		nQtdSg    	:= SC9->C9_QTDLIB2
		aNfOriLot := ImpInfOr(cCodPro,cLocal,nQtd,nQtdSg,cLote,cNumL)
	EndIf
Else
	If 	 Type("aHeader")<>"U"  .And. Len(aHeader)>=1 
		
		If Len(aHeader[1])>1 .And. Subs(aHeader[1][2],1,2)=="D2"        
		    nPosAh:=Iif	(Type("aHeader")<>"U", Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_LOTECTL" } ) ,0)
			If nPosAh>0
				cLote    	:= aCols[nItem][nPosAh]
			EndIf  
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_NUMLOTE" } )  ,0)
			If nPosAh>0
				cNumL    	:= aCols[nItem][nPosAh]
			EndIf  
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_COD" } )  ,0)  
			If nPosAh>0
				cCodPro    	:= aCols[nItem][nPosAh]
			EndIf  
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_LOCAL" } )  ,0) 
			If nPosAh>0
				cLocal    	:= aCols[nItem][nPosAh]
			EndIf  
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_QUANT" } )  ,0)
			If nPosAh>0
				nQtd   		:= aCols[nItem][nPosAh]
			EndIf 
			
			nQtdSg    	:=ConvUm( cCodPro,nQtd,0,2 )
		ElseIf  Len(aHeader[1])>1 .And. Subs(aHeader[1][2],1,2)=="L2"    
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "L2_LOTECTL" } ) ,0)
			If nPosAh>0
				cLote    	:= aCols[nItem][nPosAh]
			EndIf 
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "L2_NLOTE" } )  ,0)
			If nPosAh>0
				cNumL    	:= aCols[nItem][nPosAh]
			EndIf   
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "L2_PRODUTO" } )  ,0)
			If nPosAh>0
				cCodPro    	:= aCols[nItem][nPosAh]
			EndIf   
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "L2_LOCAL" } )  ,0) 
			If nPosAh>0
				cLocal    	:= aCols[nItem][nPosAh]
			EndIf 
			
			nPosAh:=Iif	(Type("aHeader")<>"U",Ascan(aHeader, {|x| AllTrim(x[2]) == "L2_QUANT" } )  ,0) 
			If nPosAh>0
				nQtd   		:= aCols[nItem][nPosAh]
			EndIf
		ElseIf 	 Type("aHeader")<>"U"  .and. Type("aHeaderDet")<>"U" 
			If Subs(aHeaderDet[1][2],1,2)=="LR" .And.  Subs(aHeader[1][2],1,2)=="LR" .AND. Len(aHeader[1])>1 .AND. Len(aHeaderDet[1])>1			
				nPosAh:=Iif(Type("aHeaderDet")<>"U",Ascan(aHeaderDet,{|x| AllTrim(x[2]) == "LR_LOTECTL" } ) ,0)
				If nPosAh>0
					cLote    	:= aColsDet[nItem][nPosAh ]  //
				EndIf 
				
				nPosAh:=Iif(Type("aHeaderDet")<>"U",Ascan(aHeaderDet,{|x| AllTrim(x[2]) == "LR_NLOTE" } ) ,0)
				If nPosAh>0
					cNumL    	:= aColsDet[nItem][nPosAh ]  //
				EndIf 
				
				nPosAh:=Iif(Type("aHeaderDet")<>"U",Ascan(aHeaderDet,{|x| AllTrim(x[2]) == "LR_LOCAL" } )  ,0)
				If nPosAh>0
					cLocal    	:= aColsDet[nItem][nPosAh  ]  //
				EndIf 
				
				nPosAh:=Iif	(Type("aHeader")<>"U",aScan(aHeader, { |x| AllTrim(x[02]) == "LR_PRODUTO" })  ,0)
				If nPosAh>0
					cCodPro    	:= aCols[nItem][nPosAh]
				EndIf 
				
				nPosAh:=Iif	(Type("aHeader")<>"U",aScan(aHeader, { |x| AllTrim(x[02]) == "LR_QUANT" }) ,0)
				If nPosAh>0
					nQtd   		:= aCols[nItem][nPosAh]
				EndIf

				nQtdSg    	:=ConvUm( cCodPro,nQtd,0,2 )
			EndIf
		EndIf
		If lXFis
			If Empty(cCodPro) .Or. MaFisRet(nItem,"IT_PRODUTO") <> cCodPro
				cCodPro := MaFisRet(nItem,"IT_PRODUTO")
			EndIf
			If nQtd==0 .or. MaFisRet(nItem,"IT_QUANT") <> nQtd
				nQtd:= MaFisRet(nItem,"IT_QUANT")
			EndIf	
		EndIf	
		
		aNfOriLot := ImpInfOr(cCodPro,cLocal,nQtd,nQtdSg,cLote,cNumL)					
	EndIf
EndIf

_lCalcular :=  aFiscal[1]
_lEsLegal  :=  aFiscal[2]
_nAlicuota :=  aFiscal[3]
_nValorMin :=  aFiscal[4]
_nReducir  :=  aFiscal[5]
_nAlicDesg :=  IIf (Len(aFiscal)>10,aFiscal[11],0)

_nAlicNom  := _nAlicuota
_nAlicuota := Round((100 * _nAlicuota) / (100 - _nAlicuota), _nDecVal)

IF _DEBUG
   msgstop(_lCalcular, "Calcular - "+_cProcName)
   msgstop(_lEslegal , "Es Legal - "+_cProcName)
   msgstop(_nAlicuota, "Alicuota - "+_cProcName)
   msgstop(_nValorMin, "ValorMin - "+_cProcName)
   msgstop(_nReducir , "Reducir  - "+_cProcName)
ENDIF
	
IF  _lEsLegal // _lCalcular  .AND.

   If !lXFis
      aImposto[_ALIQUOTA]  := _nAlicNom // Alicuota de Zona Fiscal del Proveedor
      aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE] // +aItemINFO[_GASTOS] // Base de Cálculo
      aImposto[_ALIQDESG]  := _nAlicDesg

	  //Tira os descontos se for pelo liquido .Bruno
      If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
		 aImposto[_BASECALC]	-=	aImposto[18]
	  Endif

      IF _DEBUG
         msgstop(aImposto[_ALIQUOTA], "aImposto[_ALIQUOTA] - "+_cProcName)
         msgstop(aImposto[_BASECALC], "aImposto[_BASECALC] - "+_cProcName)
      ENDIF

      //+---------------------------------------------------------------+
      //¦ Efetua o Cálculo do Imposto                                   ¦
      //+---------------------------------------------------------------+
      
      For nX := 1 to Len(aNfOriLot)
	      If _nAlicDesg > 0
	      	aImposto[_IMPUESTO]  := round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100)  ,2) * _nReducir
	      	aImposto[_IMPUESTO]  := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100)
	      ElseIf Valtype(aNfOriLot[nx][1]) == "N" .And. (aNfOriLot[nx][2] * SC6->C6_QTDVEN) <= aNfOriLot[nx][1]  
	      	aImposto[_IMPUESTO]  := aNfOriLot[nx][2] * SC6->C6_QTDVEN
	      	//aImposto[_IMPUESTO]  := round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100)  ,2) * _nReduci
	      Else
	      	aImposto[_IMPUESTO]  := 0
	      EndIf
	  Next nx
      xRet:=aImposto
      
   Else
		If !Empty(cXFisRap)
			xRet := {0,0,0}
			xRet[2] := _nAlicNom
			nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			If GetNewPar('MV_DESCSAI','1')=='2' 
				nBase	-= MaFisRet(nItem,"IT_DESCONTO")
			Endif
            xRet[1] := nBase
            DBSelectArea("SD2")
			DBSetOrder(3)
            If xRet[1] <> 0
            	If _nAlicDesg > 0
            		xRet[3] := (nBase * (_nAlicuota / 100))
            		xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
      	      	ElseIf SD2->(DbSeek(xFilial("SD2")+SC6->C6_NOTA+SC6->C6_SERIE+SC6->C6_CLI+SC6->C6_LOJA+SC6->C6_PRODUTO+SC6->C6_ITEM)) .And. SD2->(FieldGet(FieldPos("D2_VALIMP"+cCpoLiv))) > 0
   	 				xRet[3] := SD2->(FieldGet(FieldPos("D2_VALIMP"+cCpoLiv)))
   				Else
					xRet[3] := (nBase * (_nAlicuota / 100))
				EndIf
    	        
    	   		For nX := 1 to Len(aNfOriLot)
		    
	    	  		If Valtype(aNfOriLot[nx][1]) == "N" .And. (aNfOriLot[nx][2] * nQtd) <= aNfOriLot[nx][1]  
	      				xRet[3] := aNfOriLot[nx][2] * nQtd
           		 	Else                                  
            		  	xRet[3] := aNfOriLot[nx][1] 
            		EndIf	
            		If _nAlicDesg > 0
	           	 	xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
	      			EndIf
	  			Next nx
            
            EndIf
            
		Else
			nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			If GetNewPar('MV_DESCSAI','1')=='2' 
				nBase	-= MaFisRet(nItem,"IT_DESCONTO")
			Endif
	       Do Case
	          	Case cCalculo=="A"
	               xRet:=_nAlicNom
	          	Case cCalculo=="B"
	               	xRet:=nBase      
	          	Case cCalculo=="V"
					
					If _nAlicDesg > 0
						xRet:=(nBase * (_nAlicuota / 100))
						xRet := xRet - ((xRet *_nAlicDesg) / 100)
			        Else  
	          			xRet:=(nBase * (_nAlicuota / 100))
	          		EndIf
	          		
					If nBase <> 0
						For nX := 1 to Len(aNfOriLot)
			                IF Len(aNfOriLot[nx]) >= 2
		      					If Valtype(aNfOriLot[nx][1]) == "N" .And. (aNfOriLot[nx][2] * nQtd) <= aNfOriLot[nx][1]  
		      						xRet[3] := aNfOriLot[nx][2] * nQtd
				            	Else                                  
	    	    		    		xRet[3] := aNfOriLot[nx][1] 
	        	    			EndIf	
	            				If _nAlicDesg > 0
		            				xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
		      					EndIf
		      				EndIf
		  				Next nx
					EndIf
					
	       Endcase
	  Endif
   Endif    
   
ENDIF

dbSelectArea( cAliasRot )
dbSetOrder( cOrdemRot )
// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> __Return( aImposto )
Return( xRet )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ImpInfOr  ³ Autor ³ William P. Alves      ³ Data ³04/03/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Funcao criada para retornar para matxfis a informacao da UF ³±±
±±³          ³e aliquota da nota original de entrada quando o produto pos-³±±
±±³          ³suir rastro por sublote.                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ImpInfOr	                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Retorna													  ³±±
±±³ 		 |UF Original da nota de entrada                              ³±±
±±³ 		 |Aliquota Original da nota de entrada                        ³±±
±±³ 		 |Quantidade proporcional da venda referente ao lote          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function ImpInfOr(cProduto,cLocal,nQuant,nQuant2UM,cLoteCtl,cNumLote)

Local nX	  := 0
Local nPropLot:= 0
Local lRastroLot := .T.
Local aSaldos	 := {}
Local aInfLote	 := {}
Local aNfOri     := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Tratamento do IVA Ajustado                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 

SB1->(dbSetOrder(1))
If SB1->(MsSeek(xFilial("SB1")+cProduto))
//   lIVAAju := IIF(SB1->(FieldPos("B1_IVAAJU")) > 0 .And. SB1->B1_IVAAJU == '1' .And. (IIF(lRastro,lRastroLot := ExecBlock("MAFISRASTRO",.F.,.F.),Rastro(cProduto,"S"))),.T.,.F.)
	lIVAAju := .T.                                               			
EndIf
If lIVAAju .And. (!Empty(cLoteCtl) .Or. !Empty(cNumLote))
	aSaldos := SldPorLote(cProduto,cLocal,nQuant,nQuant2UM,cLoteCtl,cNumLote,NIL,NIL,NIL,.f.,NIL,NIL,NIL,NIL,dDataBase)

	For nX := 1 to Len(aSaldos)
		nPropLot := Round((aSaldos[nX][5]/SC6->C6_QTDVEN)*100,2)
		If lRastroLot
			dbSelectArea("SB8")
			dbSetOrder(5)
			If MsSeek(xFilial("SB8")+cProduto+aSaldos[nX][01])
				aadd(aInfLote,{SB8->B8_DOC,SB8->B8_SERIE,SB8->B8_CLIFOR,SB8->B8_LOJA,nPropLot,SB8->B8_PRODUTO,SB8->B8_ITEM})
			EndIf		
		Else				
			dbSelectArea("SB8")
			dbSetOrder(2)
			If MsSeek(xFilial("SB8")+aSaldos[nX][02]+aSaldos[nX][01])
				aadd(aInfLote,{SB8->B8_DOC,SB8->B8_SERIE,SB8->B8_CLIFOR,SB8->B8_LOJA,nPropLot,SB8->B8_PRODUTO,SB8->B8_ITEM})
			EndIf
		EndIf
		dbSelectArea("SD1")
		dbSetOrder(1)
		If Len(aInfLote[nX])>= 7 .And. MsSeek(xFilial("SD1")+aInfLote[nX][01]+aInfLote[nX][02]+aInfLote[nX][03]+aInfLote[nX][04]+aInfLote[nX][06]+aInfLote[nX][07])
			aadd(aNfOri,{SD1->(FieldGet(FieldPos("D1_VALIMP"+cCpoLiv))),SD1->(FieldGet(FieldPos("D1_VALIMP"+cCpoLiv)))/SD1->D1_QUANT})
		Else
			aadd(aNfOri,{0,0})
		EndIf
	Next nX
EndIf			

Return(aNfOri)
