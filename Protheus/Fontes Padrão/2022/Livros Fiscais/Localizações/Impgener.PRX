#include "protheus.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#include "SIGAWIN.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#DEFINE _NFISCAL   "NF "
#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02 
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _IMPINCID  10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _CCO_TIPO  1
#DEFINE _FH_DTINI  2
#DEFINE _FH_DTFIM  3
#DEFINE _FH_INIVIGE 4
#DEFINE _FH_FIMVIGE 5
#DEFINE _A2_RG820  6
#DEFINE _FH_TIPO   7
#DEFINE _FB_DESGR  8
#DEFINE _FB_DESGR  9
#DEFINE _FF_LIMITE 10
#DEFINE _FF_MINUNIT 11
#DEFINE _FF_FORMAPG 12
#DEFINE _FF_FORMAPG 13
#DEFINE _FF_INCIMP 14
#DEFINE _FCFILIAL	1
#DEFINE _FCTES		2
#DEFINE _FCIMPOSTO	3
#DEFINE _FCPROV		4
#DEFINE _CCOFILIAL	1
#DEFINE _CCOCODPRO	2
#DEFINE _CCOAGPER 	8
#DEFINE _CCOTPPERC	9
#DEFINE _CCOTPPENI	10

/*/
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
°°+-----------------------------------------------------------------------+°°
°°|Funcion   |IMPGENER  | Autor | Jose Luis Otermin      |Fecha | 19.07.99|°°
°°+----------+------------------------------------------------------------|°°
°°|Descrip.  | Obtiene datos para Calculo Impuestos Genericos             |°°
°°+----------+------------------------------------------------------------|°°
°°|Uso       | MATA100/MATA460, llamado por un punto de entrada           |°°
°°+-----------------------------------------------------------------------|°°
°°|         ACTUALIZACIONES EFECTUADAS DESDE LA CODIFICACION INICIAL      |°°
°°+-----------------------------------------------------------------------|°°
°°|Programador | Fecha  | BOPS      |  Motivo de la Alteracion            |°°
°°+------------+--------+-----------+-------------------------------------|°°
°°|Jose Otermin|11/08/99|   xxxxxx  | Consideracion de cModulo=="EST"     |°°
°°|            |  /  /  |           |                                     |°°
°°|M.Camargo   |27/03/17|   mmi-5023|Mod. func ljretserie para menajo se- |°°
°°|            |  /  /  |           |rie C prov Exento.Pais ARG           |°°
°°|Jonathan GR |27/03/17|   mmi-266 |Mod. func ImpGenInci : Se elimina el |°°
°°|            |  /  /  |           |IF donde se valida el array Aimps.   |°°
°°|            |  /  /  |           |Se elimina la función GetZonaEnt.    |°°
°°|            |  /  /  |           |fun GetZonaFiz se elimina el código  |°°
°°|            |  /  /  |           |comentado. Pais ARG                  |°°
°°|M.Camargo   |29/03/17|mmi-264/268|ARG Se considera la inclusión de imp-|°°
°°|            |  /  /  |           |uestos configurados en SFC cuando NO |°°
°°|            |  /  /  |           | no existe en SFF                    |°°
°°|M.Camargo   ³07/04/17³ MMI-180   ³ ARG Se realizan ajustes para        |°°
°°|            |  /  /  |           | realizar una nota de crédito sin    |°°
°°|            |  /  /  |           | estar ligada a una factura.         |°°
°°|Roberto Glez³02/06/17³ MMI-5665  ³Ajuste de selección de registro SFH  |°°
°°|            |  /  /  |           |cuando el pedido ya está cerrado para|°°
°°|            |  /  /  |           |consultar la fecha correspondiente.  |°°
°°|Roberto Glez|02/06/17|MMI-5753   |ARG Si se calcula desde pedidos, se  |°
°°|            |        |           |toma en cuenta la serie del documento|°°
°°|            |        |           |según la función LjRetSerie para     |°°
°°|            |        |           |calcular correctamente.              |°°
°°|Ivan Gomez  |02/08/17|DMICNS-16  |ARG Se modifica validacion para que  |°°
°°|            |        |           |no tome encuenta el TIPO en la tabla |°°
°°|            |        |           |SFZ y se agrega nuevo indice         |°°
°°|Raúl Ortiz M|10/01/18|DMICNS-974 |ARG - Para IB4 y con CCO en convenio |°°
°°|            |        |           |multilateral se debe buscar en SFZ el|°°
°°|            |        |           |registro según la inscripcion en     |°°
°°|            |        |           |A2_TIPO para realizar el calculo.    |°°
°°|            |        |           |Validacion de calculo en SFZ para que|°°
°°|            |        |           |siempre valide la inscripcion.       |°°
°°|Raul Ortiz  |28/02/18|DMICNS-1161| Se modifica la valicación de minimos|°°
°°|            |        |           | para cuando la moneda es diferente  |°°
°°|            |        |           |  a 1 - Argentina                    |°°
°°|LuisEnríquez|08/05/19|DMINA-5686 |Se agrega condición para continuar   |°°
°°|            |        |           |con validaciones solo si _lCalcula es|°°
°°|            |        |           |.T. en validaciones de CCO. (ARG)    |°°
°°+-----------------------------------------------------------------------+°°
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°

Parametros

aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{ParamIxb, _cProcName, _lAgente,_cZonClSIGA})

_lCalcular :=  aFiscal[1] // Hay Datos suficientes para calcular el impuesto?
_lEsLegal  :=  aFiscal[2] // Es Legal calcular este impuesto al Sujeto Fiscal?
_nAlicuota :=  aFiscal[3] // Alicuota del Impuesto
_nValorMin :=  aFiscal[4] // Valor Minimo para tributar
_nReducir  :=  aFiscal[5] // Reduccion del Impuesto Pagado/percibido/Retenido


aImposto[01] -> Código do Imposto
[02] -> Alíquota do Imposto
[03] -> Base de Cálculo do Imposto
[04] -> Valor Calculado do Imposto
[05] -> "___" = Pos.: 1-Inclui no Valor da Duplicata   (S/N)
2-Inclui no Total da Nota Fiscal (S/N)
3-Credita se do imposto para cálculo do Custo (SN)
[06] -> Cpo.Gravaçao SD2 (Valor Imposto)
[07] ->                  (Base de Cálculo)
[08] -> Cpo.Gravaçao SF2 (Valor Imposto)
[09] ->                  (Base de Cálculo)
[10] -> Código dos Impostos Incidentes no Cálculo.
[11] -> Valor do Frete e Despesas Rateados.
[12] -> Valor Calculado do Imposto sobre Valor do Frete e Despesas.
[13] -> Valor Calculado do Imposto sobre Despesas.
[14] -> Valor Calculado do Imposto sobre Gastos Totales.
[15] ->
[16] -> Codigo do Produto.
[17] -> Campo do Livro Fiscal.

//+[Tipos de Facturas ]----------------------------------------------+
//| Cuando Vendemos a:                                               |
//| A1_TIPO               Serie de la Factura      Discrimina?       |
//| I => Inscripto                A                     S            |
//| N => No Inscripto             A                     S            |
//| X => Exento-Subjetivo         A                     S            |
//| O => Exento-Objetivo          B (Cons.Final c/CUIT) N            |
//| F => Consumidor Final         B                     N            |
//| M => Monotributista           B                     N            |
//³ S => No Sujeto                B                                  ³
//| E => Personas del Exterior    E                     S            |
//+------------------------------------------------------------------+

Nota:
Debe registrarse al Cliente/Proveedor en la Tabla SFH en
caso que sea Agente de Percepcion o este Exento en una ZF.
Se utiliza el parametro MV_AGENTE
Significado de las posiciones de MV_AGENTE
SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
----------------------------------------------------------
Nota:
Deberia utilizarse el parametro MV_EXENTO
Significado de las posiciones de MV_EXENTO
SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
//-----------------------------------------------------

/*/
Function Impgener()        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local NTESPOS,NCFOPOS
Local lZonaFis	:=	.T.
Local nMoedaOr:=1, nTxMoedaOr:=1
Local aSF := {}
Local nIndice := 1
Local _CPROVENT:=""
Local cTipCalc:=" "
Local nRecep := 0
Local aAreaSFA := {}

Local cTppeni := ""
Local zZonCCO	:= ""
Local nPosSFC   := 0
Local lImpSFC   := .F.
Local cPesqSFC  := ""
Local nPosCCO   := 0
Local lImpCCO   := .F.
Local cPesqCCO  := ""
Local nAliqOri  := 0
Local cForCli 	:= ""
Local cLoj		:= ""
Local cFHSituac	:= "" 


Private	_lXFis
Private _nAliqSFH := 0
Private _nValorOp := 0
Private _nValorUn := 0
Private _cItem    := ""
Private lCCo := AliasInDic("CCO")
Private lAcresCco := .F.
Private lAgPerCCO := .T.
Private lIndD2 := .T.
Private _nCoefMul := 0
Private _nReduSFH := 0
Private lVerDocO  := .T.

SetPrvt("AFISCAL,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NVALORMIN,_NREDUCIR")
SetPrvt("CALIASROT,CORDEMROT,APARAM1,AITEMINFO,AIMPOSTO,_CMODULO")
SetPrvt("_LAGENTE,_CZONCLSIGA,_CSERIE,CIMPINCID,_CIMPUESTO,_CNOMEPROG")
SetPrvt("_LCLIENTE,_CDESTACA,_CESPECIE,_CTES,_CCFO,NPOSCOL")
SetPrvt("_CTSFISCAL,_CCODIGO,_CSUCURSAL,_CZFISCAL")
SetPrvt("_CTIPOMOV,_LSFAGENTE,_LSFEXENTO,_NSFPORCEN,AM100,_ORDENFZ")
SetPrvt("_RECNOFZ,AARRAY,_NSFH,_CSFAGENTE,_CSFEXENTO,_ORDENFH")
SetPrvt("_RECNOFH,_CCHAVE,ASFF,_CIMPBASE,_NALICINCID,_LINCIDENTE")
SetPrvt("_ALIAS1,_ORDEN1,_RECNO1,_ORDENFC,_RECNOFC,_ORDENFF")
SetPrvt("_RECNOFF,_ORDENFB,_RECNOFB,_LTABLA,_LDUPLO,_CRELBASE")
SetPrvt("_NSFF,_CCHAVEBASE,_NALICBASE,_NALICDESG,_LTIPO,CPROVENT")
SetPrvt("_CNOINSCR")
If ColumnPos("F3_RG1316") > 0
	SetPrvt("_LTIPOSFB,_LCLASSE,_LCLASSIF")
EndIF

If Type("ACPOIMP") == "U" .OR. Len(ACPOIMP) == 0
	Private ACPOIMP := ACPOIMPARG()
EndIf

cAliasRot  := Alias()
cOrdemRot  := IndexOrd()

If ParamIxb[5]==Nil
	_lXFis:=.F.
Else
	_lXFis:=ParamIxb[5]
Endif

nPosCCO := 0
nPosSFC := 0
lImpCCO	:= Type("aImpCCO") <> "U"
lImpSFC	:= Type("aImpSFC") <> "U"

_lCliente  := .F.
aParam1    := ParamIxb[1]    // LLega un Array en el Primer Parametro
If !_lXFis
	aItemINFO  := aParam1[1]
	aImposto   := ParamIxb[1][2]
    //E necessario devido ao fato de na rotina de venda rapida a serie da factura
    //nao poder ser selecionada no ato da venda.
    If !(nModulo == 12 .OR. nModulo == 23)   // 12 - Loja / 23 - Front
    	_cSerie    := If(cModulo=="EIC"  ,LjRetSerie(),Substr(cSerie,1,1))     // Tipo de Factura: "A"
	EndIf
    cImpIncid  := aImposto[_IMPINCID]
    _cImpuesto := aImposto[_NOMIMPOST] // ParamIxb[2][1] // Nombre del Impuesto
Else
    _lCliente  := (MaFisRet(,"NF_CLIFOR" ) == "C")
    _cSerie    := Iif((nModulo == 12 .Or. nModulo == 23 .Or. nModulo == 13) .Or. (Alltrim(FunName()) $ "MATA410|MATA415"), LjRetSerie(), SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)) // 12- Loja /23- front /13 - TMK
    _cImpuesto := aParam1[3][1]
Endif
If Subs(FunName(),1,6) == "MATA12" .or. Upper(FunName())=="MATA150" .or. Upper(FunName())=="MATA160" .or. Upper(FunName())=="MATA143"
	_cSerie := LjRetSerie()
EndIf
_cModulo   := ParamIxb[2]    // Modulo Llamador
_lAgente   := ParamIxb[3]

If Len(ParamIxb)>5 .and. ParamIxb[6]<>Nil         
	cTipCalc:=ParamIxb[6]
EndIf            
    // Tercer parametro recibido.

_cZonClSIGA:= ParamIxb[4]    // Zona Fiscal del Cliente SIGA
_cNomeProg := "IMPGENER"
_lEsLegal  := .F.      // puede calcularse Impuesto para esta Operacion?
_cDestaca  := "N"      // Destaca imp.en NF para este SUJETO FISCAL?
// ----------------------------------------------------------------
// Datos para Calculo que dependen del Modulo llamador
// ----------------------------------------------------------------

If !_lXFis  
	nIndice := aParam1[3]
	DO CASE
		Case FUNNAME() == "FISA828"
			_cEspecie  := _NFISCAL
			_cTES      := SF4->F4_CODIGO        // Tipo de Entrada/Salida
			_cCFO      := SF4->F4_CF            // Codigo Fiscal de Operacion
			_lCliente  := lCliente
		Case Substr(cModulo,1,3) == 'FAT' .or. Substr(cModulo,1,3) == "OMS"
			IF Type("aHeader")=="U"		            // Processo Batch
				_cEspecie  := IIF(Type("cEspecie")=="C",cEspecie,_NFISCAL)
				_cTES      := SF4->F4_CODIGO	//Tipo de Entrada/Salida
				_cCFO      := aItemINFO[8]		//Codigo Fiscal de Operacion
				_lCliente  := .T.
				If Type("L468NPED")=="L" .And. !l468NPed
					nMoedaOr	:= SF2->F2_MOEDA
					nTxMoedaOr	:= SF2->F2_TXMOEDA
				Else
					nMoedaOr	:= SC5->C5_MOEDA
					nTxMoedaOr	:= SC5->C5_TXMOEDA
				Endif
				If nMoedaOr>1 .and. nTxMoedaOr<=1
					nTxMoedaOr := RecMoeda(dDataBase,nMoedaOr)
				Endif
			Else
				_cEspecie  := SUBSTR(cEspecie,1,3)     // Especie del Documento Fiscal
				nPosCol    := aParam1[3]
				If Subs(aHeader[1][2],1,2)=="D1"
					nTESPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D1_TES" } )
					nCFOPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D1_CF" } )
				Else
					nTESPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_TES" } )
					nCFOPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_CF" } )
				EndIf
				
				_cTES      := aCols[nPosCol][nTESPos]  // TES de la Operacion
				_cCFO      := aCols[nPosCol][nCFOPos]  // CFO de la Operacion
				_lCliente  := .T.
			EndIf
		Case nModulo == 12 .OR. nModulo == 23// 12 - Loja / 23 - Front
			IF Type("aHeader")=="U"		            // Processo Batch
				_cEspecie  := IIF(Type("cEspecie")=="C",cEspecie,_NFISCAL)
				_cTES      := SL2->L2_TES           // Tipo de Entrada/Salida
				_cCFO      := SL2->L2_CF            // Codigo Fiscal de Operacion
				_lCliente  := .T.
			Else
				_cEspecie  := IIF(Type("cEspecie")=="U"	,MVNOTAFIS,SUBSTR(cEspecie,1,3))    // Especie del Documento Fiscal
				nPosCol    := IIF(aParam1[3]==0,Len(aCols),aParam1[3])
				
				// Define qual o prefixo dos campos a serem utilizados
				cAliasCpo  := Subs(aHeader[1][2],1,2)
				
				nTESPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == cAliasCpo+"_TES" } )
				nCFOPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == cAliasCpo+"_CF" } )
				
				If nTESPos > 0 .AND. nCFOPos > 0 
					_cTES      := aCols[nPosCol][nTESPos]  // TES de la Operacion
					_cCFO      := aCols[nPosCol][nCFOPos]  // CFO de la Operacion
				Else
					_cTES      := SF4->F4_CODIGO        	
					_cCFO      := SF4->F4_CF             
				EndIf
				_lCliente  := .T.
			EndIf
            _cSerie  := LjRetSerie()

		Case Substr(cModulo,1,3)  == 'TMK'
				_cEspecie  := IIF(Type("cEspecie")=="C",cEspecie,_NFISCAL)
				_cTES      := SC6->C6_TES           // Tipo de Entrada/Salida
				_cCFO      := SC6->C6_CF            // Codigo Fiscal de Operacion
				_lCliente  := .T.
		Case Substr(cModulo,1,3)  == 'COM'  .or. Substr(cModulo,1,3) == "EST" .or. Substr(cModulo,1,3) == "PMS"
			_cEspecie  := SUBSTR(cEspecie,1,3)  // Especie del Documento Fiscal
			nPosCol    := aParam1[3]
			If Subs(aHeader[1][2],1,2)=="D1"
				nTESPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D1_TES" } )
				nCFOPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D1_CF" } )
			Else
				nTESPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_TES" } )
				nCFOPos    := Ascan(aHeader, {|x| AllTrim(x[2]) == "D2_CF" } )
			EndIf
			
			_cTES      := SUBSTR(aCols[nPosCol][nTESPos],1,3)  // TES de la Operacion
			_cCFO      := aCols[nPosCol][nCFOPos]  				// CFO de la Operacion
			_lCliente  := .F.
		Case Substr(cModulo,1,3)  == 'EIC'
			_cEspecie  := IIF(Type("cEspecie")=="C",cEspecie,_NFISCAL)
            _cTES      := SFC->FC_TES     		// Tipo de Entrada/Salida
			
			SF4->(DbSetOrder(1))					
			SF4->(MsSeek(xFilial("SF4")+_cTES))
			
			_cCFO      := SF4->F4_CF            // Codigo Fiscal de Operacion
			_lCliente  := .F.
			
		Case Substr(cModulo,1,3)  == 'FIN'
				_cEspecie  := _NFISCAL
				_cTES      := SF4->F4_CODIGO        // Tipo de Entrada/Salida
				_cCFO      := SF4->F4_CF            // Codigo Fiscal de Operacion
				_lCliente  := .F.
		OtherWise
			MsgStop("Modulo Llamador No Considerado en IMPGENER","ERROR")
	ENDCASE
Else 
	nIndice := aParam1[2]
	_cEspecie  := IIF(Type("cEspecie")=="C",cEspecie,_NFISCAL)
	_cTES      := MaFisRet(aParam1[2],"IT_TES")
	_cCFO      := MaFisRet(aParam1[2],"IT_CF")
	If Empty(_cCFO)
		aSF := SF4->(GetArea())
		SF4->(DbSetORder(1))
		If SF4->(MsSeek(xFilial("SF4") + _cTES))
			_cCFO := SF4->F4_CF
		Endif
		SF4->(RestArea(aSF))
	Endif
	nMoedaOr   := MaFisRet(,"NF_MOEDA")
	nTxMoedaOr := MaFisRet(,"NF_TXMOEDA")
Endif

IF _lCliente
	_cTSFiscal := ALLTRIM(SA1->A1_TIPO) // Tipo de Sujeto Fiscal
	_cCodigo   := SA1->A1_COD
	_cSucursal := SA1->A1_LOJA
	_cZFiscal  := SA1->A1_EST           // Zona Fiscal do Cliente
Else
	_cTSFiscal := ALLTRIM(SA2->A2_TIPO) // Tipo de Sujeto Fiscal
	_cCodigo   := SA2->A2_COD
	_cSucursal := SA2->A2_LOJA
	_cZFiscal  := SA2->A2_EST          // Zona Fiscal do Fornecedor
EndIF

_cTipoMov  := IIF(VAL(LEFT(_cTES,1))<5 ,"E","S")
If _lCliente
	_cCFO := Padr(_cCFO,TamSX3("FF_CFO_V")[1])
Else
	_cCFO := Padr(_cCFO,TamSX3("FF_CFO_C")[1])
EndIf	

//If _cImpuesto $ "IBP|IB2|IB4|IB5|IB6|IB7|IB8|IBA|IBB|IBC|IBD|IBE|IBF|IBG|IBH|IBI|IBJ|IBK|IBL|IBM|IBN|IBO"
If Left(_cImpuesto,2) ==  "IB"
	lZonaFis	:=	.T.
	_cZFiscal	:=	IIf((cPaisLoc == "ARG" .AND. Substr(FunName(),1,4) <> "LOJA"),_cZonClSIGA,_cZFiscal) // ANDERSON CMP ID-7
	If cPaisLoc == "ARG"
		If _cZFiscal == "99" .Or. lCCo
			If lImpSFC
				cPesqSFC 	:= xFilial("SFC") + _cTES + _cImpuesto

				nPosSFC 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
			EndIf
			If nPosSFC == 0
				aSF := SFC->(GetArea())
				SFC->(DbSetOrder(2))
				If SFC->(MsSeek(xFilial("SFC") + _cTES + _cImpuesto))
					_cZFiscal := SFC->FC_PROV
				Endif
				If lImpSFC
					AADD(aImpSFC,{SFC->FC_FILIAL,SFC->FC_TES,SFC->FC_IMPOSTO,SFC->FC_PROV,SFC->FC_CALCULO,SFC->FC_INCIMP,SFC->FC_LIQUIDO})
				EndIf
				SFC->(RestArea(aSF))
			Else
				_cZFiscal := aImpSFC[nPosSFC][_FCPROV]
			EndIf
		Endif
	Endif
	If lCCo .And. ACPOIMP[_CCO_TIPO] .And. !_lCliente
		DbSelectArea("CCO")
		DbSetOrder(1)
		If CCO->(MsSeek(xFilial("CCO")+_cZFiscal))
			_cTSFiscal := ALLTRIM(CCO->CCO_TIPO) // Tipo de Sujeto Fiscal
		EndIf
		//Validacion si es Tucuman, Argentina y si es Convenio Multilateral (V)
		If cPaisLoc == "ARG" .And. _cImpuesto == "IB4" .And. _cTSFiscal == "V" .And. _cZFiscal == "TU" .And. (Alltrim(cEspecie) $ ("NCP|NDP|NF"))			
			_cTSFiscal := ALLTRIM(SA2->A2_TIPO)
		EndIf
	EndIf
Endif

_cEspecie  := PAD(_cEspecie,3)

//----------------------------------------------------------------
_lCalcular := .F.
_lEsLegal  := .F.
_lSFAgente := .F.
_lSFExento := .F.
_CNOINSCR  := .F.

_nAlicuota := 0.00   // Alicuota del Impuesto.
_nAlicDesg := 0.00
_nValorMin := 0.00   // Valor Minimo del Impuesto
_nSFPorcen := 1.00
//----------------------------------------------------------------

If lZonaFis
	PosSFZ()
		
	IF _lEsLegal
		PosSFH(_cZFiscal)
		If  cPaisLoc == "ARG" .And. "IB" $ _cImpuesto .And. Alltrim(_cEspecie) $ "NCC" .And. (Empty(cTipCalc) .or. "B" $ cTipCalc)
			nAliqOri := VerDocOri(_nAlicuota,_cEspecie,_cCodigo,_cSucursal,nIndice,2)
		EndIf
		If _lTipo  .Or. lCCo .And. "IB" $ _cImpuesto
			Do Case
				Case _lCliente
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³A partir del 01/11/2003 se podra percibir para buenos aires   ,³
					//³entre agentes de percepción (Levantado en HW)                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If _cImpuesto == 'IB2' .And. Dtos(dDataBase) < '20031101'
					   _lCalcular := .NOT. (_lSFAgente .OR. _lSFExento) .AND. _lAgente
					ElseIf "IVP" $ _cImpuesto .AND. _cTSFiscal =="S"
						_lCalcular := .T.
					ElseIf "IVP" $ _cImpuesto 
						_lCalcular := _lAgente .And. !_lSFExento 
					ElseIf "MCO" $ _cImpuesto   //Solo considera el campo FH_ISENTO (No debe considerar el agente)
						_lCalcular := !_lSFExento
					Else
						_lCalcular := _lAgente .And. !_lSFExento
					Endif

					If "IB" $ _cImpuesto
						If Type("_cZonClSIGA")=="C" .And. !Empty(_cZonClSIGA)
							_CPROVENT	:=_cZonClSIGA
						ElseIf Type("cA120ProvEnt")=="C" .And. !Empty(cA120ProvEnt)
							_CPROVENT	:= cA120ProvEnt
						ElseIf Type("M->F2_PROVENT")=="C" .And. !Empty(M->F2_PROVENT)
							_CPROVENT	:= M->F2_PROVENT
						ElseIf Type("M->C5_PROVENT")=="C" .And. !Empty(M->C5_PROVENT)
							_CPROVENT	:= M->C5_PROVENT
						ElseIf Type("M->F1_PROVENT")=="C" .And. !Empty(M->F1_PROVENT)
							_CPROVENT	:= M->F1_PROVENT
						ElseIF _lxfis    
					   		_CPROVENT	:=	MaFisRet(,"NF_PROVENT" )			
						EndIf
					EndIf						
				Case .not. _lCliente
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³A partir del 01/11/2003 se podra percibir para buenos aires   ,³
					//³entre agentes de percepción (Levantado en HW)                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If _cImpuesto == 'IB2' .And. Dtos(dDataBase) < '20031101'
					   _lCalcular := _lSFAgente .AND. (.NOT. _lAgente )
					ElseIf "IVP" $ _cImpuesto .AND. _cTSFiscal =="S"
						_lCalcular := .T.
					ElseIf "IVP" $ _cImpuesto 
						If _lAgente // RG 2408/08 - Régimen General Percepción del IVA - Percepción entre Agentes
							IF cEspecie == "NCP"
								cForCli := M->F2_CLIENTE 
								cLoj	:= M->F2_LOJA
							Else
								If cPaisloc == "ARG".and. Funname() $ "FINA847|FISA828|MATA143"
									cForCli := _cCodigo
									cLoj	:= _cSucursal
								ElseIf Funname() $ "MATA121|MATA122|MATA123" .And. Type("M->CA120FORN") <> "U" .And. Type("M->cA120Loj") <> "U"
									cForCli := M->cA120Forn
									cLoj	:= M->cA120Loj
								Else
									cForCli := M->F1_FORNECE
									cLoj	:= M->F1_LOJA
								EndIf
							EndIF
							cFHSituac := Posicione("SFH", 1, xFilial("SFH") + cForCli + cLoj + _cImpuesto, "FH_SITUACA") 
							_lCalcular := (_lAgente .And. AllTrim(cFHSituac) == "5" ) .And. !_lSFExento 
						Else
							_lCalcular := !_lAgente .And. !_lSFExento
						EndIF						
					ElseIf "MCO" $ _cImpuesto  //Solo considera el campo FH_ISENTO (No debe considerar el agente)
						_lCalcular := !_lSFExento
					Else
						_lCalcular := _lSFAgente .And. !(_cImpuesto=="IVP".And._lAgente) .And. !_lSFExento
					Endif
					If "IB" $ _cImpuesto
						If Type("_cZonClSIGA")=="C" .And. !Empty(_cZonClSIGA)
							_CPROVENT	:=_cZonClSIGA 
						ElseIf Type("M->F1_PROVENT")=="C" .And. !Empty(M->F1_PROVENT)
							_CPROVENT	:= M->F1_PROVENT
						ElseIf Type("cA120ProvEnt")=="C" .And. !Empty(cA120ProvEnt)
							_CPROVENT	:= cA120ProvEnt
						ElseIf Type("M->F2_PROVENT")=="C" .And. !Empty(M->F2_PROVENT)
							_CPROVENT	:= M->F2_PROVENT
						ElseIf Type("M->C5_PROVENT")=="C" .And. !Empty(M->C5_PROVENT)
							_CPROVENT	:= M->C5_PROVENT 
						ElseIF _lxfis    
					   		_CPROVENT	:=	MaFisRet(,"NF_PROVENT" )			
						EndIf
					EndIf
			EndCase		
			
			If _lCalcular
				If lCCo .And. "IB" $ _cImpuesto  
					If nPosSFC == 0
						DBSelectArea("SFC")
						DBSetOrder(2)
					EndIf
					If IIF(nPosSFC > 0,.T.,(SFC->(MsSeek(xFilial("SFC") + _cTES + _cImpuesto))))
						If nPosCCO == 0
							DbSelectArea("CCO")
							DbSetOrder(1)
						EndIf
						If lImpCCO
							cPesqCCO 	:= xFilial("CCO") + IIF(nPosSFC> 0,aImpSFC[nPosSFC][_FCPROV],SFC->FC_PROV)
							nPosCCO 	:= Ascan(aImpCCO,{|item| item[_CCOFILIAL] + item[_CCOCODPRO] == cPesqCCO})
						EndIf
						If IIF(nPosCCO > 0, .T., CCO->(MsSeek(xFilial("CCO")+IIF(nPosSFC> 0,aImpSFC[nPosSFC][_FCPROV],SFC->FC_PROV))))
					
							If IIf(_lCliente,IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOAGPER],CCO->CCO_AGPER)=="1",.T.)
					
	    						If  IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOTPPERC],CCO_TPPERC) == "1"   // Entrega e radicação
	    						 	If ((IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOCODPRO],CCO_CODPRO) == _CPROVENT ) .Or.  (IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOCODPRO],CCO_CODPRO) == Iif(_lCliente,SA1->A1_EST,SM0->M0_ESTENT) )) .And. !_lSFExento
										_lCalcular := .T.
									Else
										_lCalcular := .F.
									EndIf
	    						ElseIF IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOTPPERC],CCO_TPPERC) $ "2"   .And. !_lSFExento// Inscricao
						   			_lCalcular := .T.
	    						ElseIf IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOTPPERC],CCO_TPPERC) $ "3"   // Entrega
	    						 	If  IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOCODPRO],CCO_CODPRO) == _CPROVENT  .And. !_lSFExento
										_lCalcular := .T.
									Else
										_lCalcular := .F.
									EndIf
	    						ElseIf IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOTPPERC],CCO_TPPERC) $ "4"
	    							If (IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOCODPRO],CCO_CODPRO) == Iif(_lCliente,SA1->A1_EST,SA2->A2_EST)) .And. !_lSFExento
							   			_lCalcular := .T.
									Else
										_lCalcular := .F.
									EndIf
								EndIf            
								
								// Monotributista	
								If _lCalcular .And. _cZFiscal=="CF" .And. !_lCliente .And. Alltrim(_cTSFiscal) = "M"
									_lCalcular := .F.						     
		                    	EndIf
	                     
	                  		ElseIf IIF(nPosCCO > 0,aImpCCO[nPosCCO][_CCOAGPER],CCO->CCO_AGPER)=="2"
                    			_lCalcular := .F.                            
				      		EndIf
		                	If lImpCCO .and. nPosCCO == 0
								AADD(aImpCCO,{CCO->CCO_FILIAL,CCO->CCO_CODPRO,CCO->CCO_CPERNC,IIf(CCO->(ColumnPos("CCO_CRFPER")) > 0,CCO->CCO_CRFPER,0),IIf(CCO->(ColumnPos("CCO_IMPPER")) > 0,CCO->CCO_IMPPER,0),CCO->CCO_IMMINP,CCO->CCO_TPMINP,CCO->CCO_AGPER,CCO->CCO_TPPERC,IIf(CCO->(ColumnPos("CCO_TPPENI")) > 0,CCO->CCO_TPPENI,"1")})		                	
		                	EndIf
	                	EndIf
						
					EndIf
					
				EndIf
			EndIf
		EndIf
		
		lCalcIB:=.T.
		If SUBSTR(_cImpuesto,1,2) == 'IB' .and. _lSFExento .and. !_lCliente
			lCalcIB:=.F.
		EndIf
		
		// Percepcion sujeto No inscripto
			If CCO->(ColumnPos("CCO_TPPENI")) > 0 .and. _cTSFiscal == "N" .and. _nAliqSFH == 0;
			.and. SUBSTR(_cImpuesto,1,2) == 'IB'  .and. cPaisLoc == "ARG" .and. AliasInDic("CCO")  .And. lCalcIB .And. _lCalcular
				DbSelectArea("CCO")
				DbSetOrder(1)
				If 	CCO->(MsSeek(xFilial("CCO") + _cZFiscal)) //BA-CO
					cTppeni := CCO->CCO_TPPENI
					If CCO->CCO_TPPERC == "2"
						If cTppeni $ "1|2|3|4"
							zZonCCO := IIF( _lCliente,SA1->A1_EST,SA2->A2_EST )   //Solo para radicación calcula
							
							If	( cTppeni == "1" .and. (_cZFiscal == _CPROVENT  .or. zZonCCO == CCO->CCO_CODPRO) ) .or.;
								( cTppeni == "2" .and. _cZFiscal == _CPROVENT ) .or.;
								( cTppeni == "3" .and. zZonCCO == CCO->CCO_CODPRO )
		
								_lCalcular := .T.
		
								If cTppeni == "1" .and. (zZonCCO <> _CPROVENT .AND. zZonCCO <> CCO->CCO_CODPRO )
									_cZFiscal := _CPROVENT
								ElseIf cTppeni == "3" .and. zZonCCO <> _CPROVENT
									_lCalcular := .F.
								Endif 
							Else 
								_lCalcular := .F.
							Endif 
		
							If cTppeni == "4" 
								_lCalcular := .F.
							Endif
						Endif
					EndIf
				EndIf  
			Endif
			//
		ImpIncid()
	EndIF
Endif	


If  !lVerDocO
	_nAlicuota := nAliqOri
ElseIf  Alltrim(_cEspecie) $ "NCC|NCP" .And. (Empty(cTipCalc) .or. "B" $ cTipCalc)
	_nAlicuota := VerDocOri(_nAlicuota,_cEspecie,_cCodigo,_cSucursal,nIndice,1)
EndIf

IF _cTSFiscal = "N" .and. "IB" $ _cImpuesto .and. _lCliente .and. Empty(cTppeni)
	_lCalcular := .F.
	If (SFC->FC_PROV == _cZonClSIGA .Or. SFC->FC_PROV == SA1->A1_EST) .And. !_lCliente
		_lCalcular := .T.
	EndIf	
EndIF

If   cPaisLoc == "ARG" .And.  lAcresCco .And. Left(_cImpuesto,2) ==  "IB" 
	_nAlicuota := _nAlicuota * (1 + (CCO->CCO_CRFPER/100))
EndIf

If  cPaisLoc == "ARG" .And. !lAgPerCCO .And. Left(_cImpuesto,2) == "IB"
	_lCalcular := .F.
EndIf

If SF3->(ColumnPos("F3_RG1316")) > 0
	_lTipoSFB	 := (SFB->FB_TIPO  == "P") // Tipo P
	_lClasse	 := (SFB->FB_CLASSE  == "P") // Incide sobre otro Impuesto?
	_lClassif	 := (SFB->FB_CLASSIF  == "1") // Incide sobre otro Impuesto?
EndIF

aM100     := {}
AADD(aM100, _lCalcular)
AADD(aM100, _lEsLegal)
AADD(aM100, _nAlicuota)
AADD(aM100, Iif(Left(_cImpuesto,2) == "IB" .And. cPaisLoc == "ARG",_nValorMin,xMoeda(_nValorMin,1,nMoedaOr,,,,nTxMoedaOr)))
AADD(aM100, _nSFPorcen)
AADD(aM100, _cImpBASE )
AADD(aM100, nMoedaOr )
AADD(aM100, _cItem)
AADD(aM100, _nValorOp)
AADD(aM100, _nValorUn)
AADD(aM100, _nAlicDesg)
AADD(aM100,_cTSFiscal)
AADD(aM100,_cCFO)
AADD(aM100,_cZFiscal)

If SF3->(ColumnPos("F3_RG1316")) > 0
	AADD(aM100,_ltiposfb)
	AADD(aM100,_lClasse)
	AADD(aM100,_lClassif)
EndIF
AADD(aM100,_cTES)

dbSelectArea( cAliasRot )
dbSetOrder( cOrdemRot )
// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> __Return( aM100 )
Return( aM100 )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
// EOF -------------------
/*/
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦Funcion   ¦PosSFZ    ¦ Autor ¦ Jose Luis Otermin     ¦ Fecha¦ 19/07/99  ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Descripc. ¦Revisa Tabla de Reglas si corresponde cobrar/retener/percibir¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Uso       ¦ PosSFZ()                                                    ¦¦¦
¦¦¦          ¦ Usa: _cTipoMov,_cEspecie,_cTSFiscal,_cSerie,_cImpuesto      ¦¦¦
¦¦+------------------------------------------------------------------------¦¦¦
¦¦¦         ACTUALIZACIONES EFECTUADAS DESDE LA CODIFICACION INICIAL       ¦¦¦
¦¦+------------------------------------------------------------------------¦¦¦
¦¦¦Programador ¦ Data   ¦ BOPS ¦  Motivo da Alteracao                      ¦¦¦
¦¦+------------+--------+------+-------------------------------------------¦¦¦
¦¦¦            ¦  /  /  ¦      ¦                                           ¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
Indica si el Sujeto Fiscal Tiene Relacion con un Impuesto y una Serie de
Documento Fiscal indicado.

Tambien Indica si el Valor del Impuesto calculado debe destacarse en el
Documento Fiscal.

Sirve para limitar el calculo de impuestos que manda SF4+SFC (Tes+Impuestos)
Si la Relacion Sujeto Fiscal+Impuesto no existe, entonces no debe calcularse
el impuesto solicitado por TES.

Indices
//(1)FZ_FILIAL+FZ_TIPMOV+FZ_ESPECIE+FZ_TIPO+FZ_SERIE+FZ_IMPOSTO

_cTipoMov  = Tipo de Movimiento. E=Entrada, S=Salida
_cEspecie  = FT, NCP, NDP, NCC, NDC
_cTSFiscal = Tipo de Sujeto Fiscal
_cSerie    = Letra de la Serie del Documento Fiscal
_cImpuesto = Codigo del Impuesto
/*/
// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> Function PosSFZ
Static Function PosSFZ()

Local	 cTipoCli:="I"

IF _lCliente
	cTipoCli := ALLTRIM(SA1->A1_TIPO) // Tipo de Sujeto Fiscal
Else
	cTipoCli := ALLTRIM(SA2->A2_TIPO) // Tipo de Sujeto Fiscal
EndIF

DbSelectArea("SFZ") // tabla de Relacion Sujeto Fiscal-Impuestos
_OrdenFZ   := INDEXORD()
_RecnoFZ   := RECNO()
If _lXFis .And. !Empty(SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1))  .and.  !(Alltrim(FunName()) $ "MATA410|MATA415")
	_cSerie    := SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)// Serie informada no docto.
EndIf
DbSetOrder(1)

_cDestaca := "N"

SFZ->(DbSetOrder(1))
_lEsLegal := MsSeek(xFilial("SFZ") + _cTipoMov + _cEspecie + cTipoCli + _cSerie + _cImpuesto, .F.)

If .NOT. _lEsLegal
	_lEsLegal := MsSeek(xFilial("SFZ")+_cTipoMov+_cEspecie+cTipoCli+_cSerie+"***",.F.)
	If _lEsLegal
		_cDestaca := SFZ->FZ_DESTACA
	Endif
Else
	_cDestaca := SFZ->FZ_DESTACA
EndIf
// ----------------------------------------------------------------
DBSelectArea("SFZ")
DBSetOrder(_OrdenFZ)
DBGoto(_RecnoFZ)

Return({ _lEsLegal, _cDestaca} )
Return

/*
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦Funcion   ¦PosSFH    ¦ Autor ¦ Jose Luis Otermin     ¦ Fecha¦ 19/07/99  ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Descripc. ¦Revisa si Proveedor/Cliente es Agente/Exento en Zona Fiscal  ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Uso       ¦aArray:=ExecBlock("PosSFH",.F.,.F.,{cCliente,cLoja,cZona,.F.)¦¦¦
¦¦+------------------------------------------------------------------------¦¦¦
¦¦¦         ACTUALIZACIONES EFECTUADAS DESDE LA CODIFICACION INICIAL       ¦¦¦
¦¦+------------------------------------------------------------------------¦¦¦
¦¦¦Programador ¦ Data   ¦ BOPS ¦  Motivo da Alteracao                      ¦¦¦
¦¦+------------+--------+------+-------------------------------------------¦¦¦
¦¦¦            ¦  /  /  ¦      ¦                                           ¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
Indices

//(1) FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
//(2) FH_FILIAL+FH_IMPOSTO+FH_ZONFIS+FH_FORNECE+FH_LOJA
//(3) FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
//(4) FH_FILIAL+FH_IMPOSTO+FH_ZONFIS+FH_CLIENTE+FH_LOJA

_cCodigo   = Codigo del Cliente/Proveedor
_cSucursal = Sucursal del Cliente/Proveedor
_cImpuesto = Impuesto para el que tiene situacion especial.
_cZFiscal  = Zona Fiscal donde tiene actividad
_lCliente  = .T. si es Cliente, .F. si es Proveedor.
*/
// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> Function PosSFH
Static Function PosSFH(cZonaFis)
Local cQuery		:= ""
Local cAliasSFH		:= "SFH"
Local lPeriodo	:= ACPOIMP[_FH_DTINI] .And. ACPOIMP[_FH_DTFIM]
Local lRiscoFis	:= (cPaisLoc == "ARG" .And. ACPOIMP[_FH_INIVIGE] .And. ACPOIMP[_FH_FIMVIGE] )
Local dDtProc  		:= Ctod("//")
Local nRegSFH		:= 0
Local aArea			:= {}
Local aAreaSFF 	:= {}
Local lNAchou		:=.F.
Local lExisCGF		:= AliasInDic("CGF") //Verifica la existencia de la tabla CGF.
Local cTmpCGF	:= criatrab(nil,.F.) //Tabla temporal para realizar query a la tabla CGF
Local nRegCGF := 0 //Utilizado para verificar si existen registros en CGF
Local aAreaSF2 := {} 
Local nCrfPer       := SuperGetMV("MV_CRFPER",,0)
Default cZonaFis	:=_cZonClSIGA

cEspecie:=IIF(Type("cEspecie")=="C",cEspecie,"NF")

_lTipo    := .T.
_nAliqSFH := 0
_nSFH := IIF(_lCliente ,3,1)

_cSFAgente := "N"
_cSFExento := "N"
_nSFPorcen := 1.0   // Si el S.Fiscal NO esta Exento, 1 => Tributar 100%

DBSelectArea("SFH")
_OrdenFH   := INDEXORD()
_RecnoFH   := RECNO()

If Type("dDEmissao")=="D"
	dDtProc := dDEmissao
ElseIf Type("dDEmiss")=="D"
	dDtProc := dDEmiss
Else
	dDtProc:= dDatabase
Endif

If funname() == "MATA410" //Si es para pedidos
	//Si es para un pedido que ya está cerrado, se toma la fecha del cierre correspondiente a la factura para calcular el IB.
	If (!Empty(C5_NOTA) .Or. C5_LIBEROK == 'E') .And. Empty(C5_BLQ) .And. ("IB" $ _cImpuesto .Or. "IVP" $ _cImpuesto)
		aAreaSF2 := SF2->(GetArea())
		SF2->(DbSelectArea("SF2"))
		SF2->(dbSetOrder(2))
		If SF2->(MsSeek(xFilial("SF2") + C5_CLIENT + C5_LOJACLI + C5_NOTA + C5_SERIE + C5_TIPO + "NF"))
			dDtProc := SF2->F2_EMISSAO
		EndIf
		SF2->(RestArea(aAreaSF2))
	EndIf
EndIf

DbSetOrder(_nSFH)   // Cliente+loja+Zona
_cChave    := xFilial("SFH")+_cCodigo+_cSucursal

If lRiscoFis
	cQuery		:= ""
	cAliasSFH	:= ""
	nRegSFH		:= 0
	aArea := GetArea()
	#IFDEF TOP
		cQuery := "select FH_INIVIGE,FH_FIMVIGE, R_E_C_N_O_ from " + RetSqlName("SFH")    
		cQuery += " where FH_FILIAL = '" + xFilial("SFH") + "'"
		cQuery += " and D_E_L_E_T_=''"
		cQuery += " and"
		cQuery += " ("
		cQuery += " (FH_INIVIGE='' and FH_FIMVIGE = '')"
		cQuery += " or"
		cQuery += " ('" + Dtos(dDtProc) + "' >= FH_INIVIGE  and '" + Dtos(dDtProc) + "' <= FH_FIMVIGE)"
		cQuery += " or"
		cQuery += " ('" + Dtos(dDtProc) + "' >= FH_INIVIGE  and  FH_FIMVIGE='')"
		cQuery += ")"
 		cQuery += " and FH_IMPOSTO ='" + _cImpuesto + "'"
		If _lCliente
			cQuery += " and FH_CLIENTE = '" + _cCodigo + "'"
		Else
			cQuery += " and FH_FORNECE = '" + _cCodigo + "'"
		Endif
		cQuery += " and FH_LOJA = '" + _cSucursal + "'"
		cQuery += " and (FH_ZONFIS = '" + cZonaFis + "'" + " or FH_ZONFIS ='**')"
		cAliasSFH := GetNextAlias()
		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSFH,.T.,.T.)
		(cAliasSFH)->(DbGoTop())
		If !((cAliasSFH)->(Eof()))   
			lAchouDt:=.F.
		   	While!((cAliasSFH)->(Eof())) .And. !lAchouDt
		    	If !Empty((cAliasSFH)->FH_INIVIGE) .And. !Empty((cAliasSFH)->FH_FIMVIGE)
		        	nRegSFH := (cAliasSFH)->R_E_C_N_O_
		        	lAchouDt:=.T.
		        Else
		        	nRegSFH := (cAliasSFH)->R_E_C_N_O_
		    	EndIf
		    	(cAliasSFH)-> (DbSkip())
		   	EndDo 
		Endif    

		DbSelectArea(cAliasSFH)
		DbCloseArea()
	#ELSE
		cQuery := "FH_FILIAL == '" + xFilial("SFH") + "'"
		cQuery += " .And."
		cQuery += " ("
		cQuery += " (Empty(FH_INIVIGE) .And. Empty(FH_FIMVIGE))"
		cQuery += " .Or."
		cQuery += " ('" + Dtos(dDtProc) + "' >= Dtos(FH_INIVIGE)  .And. '" + Dtos(dDtProc) + "' <= Dtos(FH_FIMVIGE))"    
			cQuery += " .Or."
		cQuery += " ('" + Dtos(dDtProc) + "' >= Dtos(FH_INIVIGE)  .And.  Empty(FH_FIMVIGE))"
		cQuery += ")"
		cQuery += " .And. FH_IMPOSTO == '" + _cImpuesto + "'"
		If _lCliente
			cQuery += " .And. FH_CLIENTE == '" + _cCodigo + "'"
		Else
			cQuery += " .And. FH_FORNECE == '" + _cCodigo + "'"
		Endif
		cQuery += " .And. FH_LOJA == '" + _cSucursal + "'"
		cQuery += " .And. FH_ZONFIS == '" + cZonaFis + "'"
		SFH->(DbSetFilter({|| &cQuery},cQuery))
		SFH->(DbGoTop())
		If !(SFH->(Eof()))
			nRegSFH := SFH->(Recno())
		Endif
		SFH->(DbClearFilter())
		If !(SFH->(Eof()))
			lAchouDt:=.F.
		   	While!((cAliasSFH)->(Eof())) .And. !lAchouDt
				If !Empty((cAliasSFH)->FH_INIVIGE) .And. !Empty((cAliasSFH)->FH_FIMVIGE)
			       	nRegSFH := (cAliasSFH)->(Recno())
		    	   	lAchouDt:=.T.
			   	Else
			 		nRegSFH := (cAliasSFH)->(Recno())
			   	EndIf
		    	(cAliasSFH)-> (DbSkip())
		   	EndDo
     	EndIf
	
	#ENDIF
	RestArea(aArea)
	If nRegSFH <> 0
		SFH->(DbGoTo(nRegSFH))
	Endif
	 If nRegSFH == 0 //No encuentra el registro, debe ser no inscripto 
		If  (!Type("cEspecie")=="U" .And. ((Alltrim(cEspecie)$("NCP|NDP|NCE|NDE"))  .Or. (Alltrim(cEspecie)$("NF").And.!_lCliente))) .Or. Type("M->C7_MOEDA") <> "U" .Or. Type("M->C7_FORNECE") <> "U"	   .Or.  Type("M->CA120FORN") <> "U"
			    _lSFExento:=.T.
				CCO->(DbSetOrder(1))
				If CCO->(MsSeek(xFilial("CCO")+cZonaFis)) .And. cPaisLoc == "ARG" .and. Iif(Alltrim(cEspecie)$("NCE|NDE"),.T.,!("IB"$_cImpuesto))
					_lSFAgente := (CCO->CCO_AGPER=="1")  
					Iif(_lSFAgente,_lSFExento:=.F.,_lSFExento:=.T.)
				EndIf
		EndIf
		If (cPaisLoc <> 'ARG') .Or. Len(_cTSFiscal) = 0  .Or. (cPaisLoc == 'ARG' .And. nRegSFH==0 .And. CCO->(ColumnPos("CCO_TPPENI")) > 0 .and. "IB"$_cImpuesto)  //Significa que el registro para IB no existe en SFH (esta fuera de rango)
		   _cTSFiscal := "N"  
		Else  
			aAreaSFF := SFF->(GetArea())
		   dbSelectArea("SFF")
		   SFF->(dbSetOrder(13)) 
		   
		   If _cTipoMov=="S"     
		   		SFF->(dbSetOrder(13))
		   Else
		   		SFF->(dbSetOrder(11))
		   EndIf
		   	
		   	
		   	If SFF->(MsSeek(xFilial("SFF")+_cImpuesto+cZonaFis+'N'+_cCFO))
	       	  	 _nAliqSFH := SFF->FF_ALIQ
		   	EndIf
		   		  
 		   
 		   SFF->(RestArea(aAreaSFF))		   
		EndIf
		DBSetOrder(_OrdenFH)
		DBGoto(_RecnoFH)
		Return
	Endif
Else
	
	aArea := GetArea()
	#IFDEF TOP
		cQuery := "select R_E_C_N_O_ from " + RetSqlName("SFH")
		cQuery += " where FH_FILIAL = '" + xFilial("SFH") + "'"
		cQuery += " and D_E_L_E_T_=''"
		cQuery += " and"
		cQuery += " (( FH_IMPOSTO ='" + _cImpuesto + "' and FH_ZONFIS = '" + cZonaFis + "'"
		cQuery += " ) OR "
		cQuery += " ( FH_IMPOSTO ='" + _cImpuesto + "' and FH_ZONFIS = '** ') OR "
		cQuery += " ( FH_IMPOSTO ='***' and FH_ZONFIS = '** '))"		

		If _lCliente
			cQuery += " and FH_CLIENTE = '" + _cCodigo + "'"
		Else
			cQuery += " and FH_FORNECE = '" + _cCodigo + "'"
		Endif
		
		cQuery += " and FH_LOJA = '" + _cSucursal + "'"
		cQuery += " and FH_ZONFIS = '" + cZonaFis + "'"
		cAliasSFH := GetNextAlias()
		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSFH,.T.,.T.)
		(cAliasSFH)->(DbGoTop())
		If !((cAliasSFH)->(Eof()))
			nRegSFH := (cAliasSFH)->R_E_C_N_O_
		Else
			lNAchou:=.T.
		Endif
		DbSelectArea(cAliasSFH)
		DbCloseArea() 
		RestArea(aArea)
		
		If nRegSFH <> 0
			SFH->(DbGoTo(nRegSFH))
		EndIf
	#ELSE
		
		If !MsSeek(_cChave+_cImpuesto+cZonaFis,.F.)
			lNAchou:=.T.
		EndIf					
		If !lNAchou .And. !MsSeek(_cChave+_cImpuesto+"**",.F.)
			lNAchou:=.T.
		EndIf
		If  !lNAchou .And. !MsSeek(_cChave+"***"+"**",.F.)
			lNAchou:=.T.
		EndIf
	#ENDIF
	If lNAchou			
		If (!Type("cEspecie")=="U" .And. ((Alltrim(cEspecie)$("NCP|NDP|NCE|NDE"))  .Or. (Alltrim(cEspecie)$("NF").And.!_lCliente))) .Or. Type("M->C7_MOEDA") <> "U"	
			_lSFExento:=.T.
			CCO->(DbSetOrder(1))
			If CCO->(MsSeek(xFilial("CCO")+cZonaFis)) .And. cPaisLoc == "ARG"
				_lSFAgente := (CCO->CCO_AGPER=="1")  
				Iif(_lSFAgente,_lSFExento:=.F.,_lSFExento:=.T.)
			EndIf
		EndIf
		_cTSFiscal := "N"	
		RestArea(aArea)
		DBSetOrder(_OrdenFH)
		DBGoto(_RecnoFH)
		Return
	Endif
EndIf	

/*Verificacao do Perido de Isencao*/
If SFH->FH_ISENTO=="S" .or. SFH->FH_PERCENT == 100// El Sujeto Fiscal esta exento del Impuesto?
	_lSFExento := .T.
Else 
	If lPeriodo .And. !Empty(SFH->FH_DTINI) .And. !Empty(SFH->FH_DTFIM)
		If dDtProc>=(SFH->FH_DTINI) .And. dDtProc<=(SFH->FH_DTFIM)
			_lSFExento := .T.
		Else
			If lExisCGF .and. cPaisLoc == "ARG" .and. _cImpuesto == "IBF" //Llamado TTLZZX se valida que exista la tabla CGF, país Argentina y el impuesto sea IBF
				CGFQuery(cTmpCGF,IIF(_lCliente,1,2),_cCodigo,_cSucursal,"",@nRegCGF,.F.) //Se busca el registro por medio del query ubicado en la FISA075
				If nRegCGF > 0 //Se valida que exista al menos un registro
					(cTmpCGF)->(dbGoTop()) //Se posiciona en el primer registro
					If ((cTmpCGF)->CGF_FIMVIG == CTOD("//") .or. (cTmpCGF)->CGF_FIMVIG > dDtProc) .and. _cCFO == (cTmpCGF)->CGF_CFO //Si el Código Fiscal es igual al de la tabla CGF y está dentro de las fechas de vigengia se exenta del impuesto.
						_lSFExento := .T.
					Else
						_lSFExento := .F.
					EndIf
				Else
					_lSFExento := .F.
				EndIf
				(cTmpCGF)->(dbCloseArea())
			Else
				_lSFExento := .F.
			EndIf
		Endif    
	Else
		If lExisCGF .and. cPaisLoc == "ARG" .and. _cImpuesto == "IBF" //Llamado TTLZZX se valida que exista la tabla CGF, país Argentina y el impuesto sea IBF
			CGFQuery(cTmpCGF,IIF(_lCliente,1,2),_cCodigo,_cSucursal,"",@nRegCGF,.F.)//Se busca el registro por medio del query ubicado en la FISA075
			If nRegCGF > 0 //Se valida que exista al menos un registro
				(cTmpCGF)->(dbGoTop()) //Se posiciona en el primer registro
				If ((cTmpCGF)->CGF_FIMVIG == CTOD("//") .or. (cTmpCGF)->CGF_FIMVIG > dDtProc) .and. _cCFO == (cTmpCGF)->CGF_CFO //Si el Código Fiscal es igual al de la tabla CGF y está dentro de las fechas de vigengia se exenta del impuesto.
					_lSFExento := .T.
				Else
					_lSFExento := .F.
				EndIf
			Else
				_lSFExento := .F.
			EndIf
			(cTmpCGF)->(dbCloseArea())
		Else
			_lSFExento := .F.
		EndIf
	Endif
Endif

If (dDtProc>=(SFH->FH_INIVIGE) .And. dDtProc<=(SFH->FH_FIMVIGE)) .And. (SFH->FH_TIPO=="N") .And. (SFH->FH_ALIQ==0)
  _CNOINSCR := .T.
EndIf
If  !("IVP" $ _cImpuesto )
	_lSFAgente := (SFH->FH_AGENTE=="S")  // El Sujeto Fiscal es Agente del impuesto?
EndIf

If "IVP" $ _cImpuesto   .And. _lAgente  .And. _lCliente  
		_lSFAgente := (SFH->FH_AGENTE=="S")  // El Sujeto Fiscal es Agente del impuesto?
		_lAgente := (SFH->FH_AGENTE=="N")    
ElseIf  "IVP" $ _cImpuesto   .And. !_lAgente  .And. !_lCliente  
		_lSFAgente := (SFH->FH_AGENTE=="S")
		_lAgente := (SFH->FH_AGENTE=="S")   
EndIf

If "IB" $ _cImpuesto .And. !_LCLIENTE
	_lAgente:=_lSFAgente
EndIf

If !_lCliente .And. "IVP" $ _cImpuesto .AND. ACPOIMP[_A2_RG820] .And. Alltrim((SA2->A2_RG820))=="1" .And. _lSFAgente
	_lAgente:=.F.
EndIf

_nSFPorcen := ROUND((100 - SFH->FH_PERCENT) /100,6) // % de Exencion del Impuesto
If SFH->FH_SITUACA == "2" .and. CCO->(ColumnPos("CCO_CRFPER")) > 0 
	lAcresCco:= .T.
EndIf
_nAliqSFH := SFH->FH_ALIQ

If "IB" $ _cImpuesto
	_nCoefMul := SFH->FH_COEFMUL
	_nReduSFH := SFH->FH_ALIQ
Endif

If _cImpuesto == "MCO" .And. SFH->FH_SITUACA == "2" .And. cPaisLoc == "ARG"
	_nAliqSFH := _nAliqSFH * (1 + (nCrfPer / 100))
EndIf

If lCCo .And. "IB" $ _cImpuesto 
	If ACPOIMP[_FH_TIPO] .and. _LCLIENTE
		dbSelectArea("SFF")
		SFF->(dbSetOrder(13))
		If SFF->(MsSeek(xFilial("SFF")+SFH->FH_IMPOSTO+SFH->FH_ZONFIS+IIf(SFH->FH_TIPO <> "V",SFH->FH_TIPO,"*") )) //FF_FILIAL+FF_IMPOSTO+FF_ZONFIS+FF_TIPO+FF_CFO_V
			_lTipo := .T.
			_cTSFiscal := ALLTRIM(SFH->FH_TIPO)
		Elseif (SFH->FH_TIPO == "V") .and. SFF->(MsSeek(xFilial("SFF")+SFH->FH_IMPOSTO+SFH->FH_ZONFIS+SFH->FH_TIPO ))   //Buscarlo con V para convenio multilateral
			_lTipo := .T.
			_cTSFiscal := ALLTRIM(SFH->FH_TIPO) 
		Else
			_lTipo := .F.   
			_cTSFiscal := "N"
		EndIf
	ElseIf ACPOIMP[_FH_TIPO] .and. "IB" $ _cImpuesto .and. !_LCLIENTE .AND. SFH->FH_TIPO $ "V|N"  
		_cTSFiscal := ALLTRIM(SFH->FH_TIPO)
	EndIf
	
	If SFH->(ColumnPos("FH_TIPO"))>0
    	IF SFH->FH_TIPO == "N"
			_lTipo := .F.   
			_cTSFiscal := "N" 
			_nAliqSFH := 0
    	Endif 
    Endif  

	CCO->(DbSetOrder(1))
	If CCO->(MsSeek(xFilial("CCO")+SFH->FH_ZONFIS)) .And. _LCLIENTE
		_lSFAgente := (CCO->CCO_AGPER=="1")  // El Sujeto Fiscal es Agente del impuesto?
		_lAgente:= Iif(CCO->CCO_CPERNC=="5" .and. cEspecie $ ("NCC") , .F., _lSFAgente) 
	EndIf
	
	If CCO->(ColumnPos("CCO_PCLIAG")) > 0 .And. CCO->(ColumnPos("CCO_PPROAG")) > 0 .And. Left(_cImpuesto,2) ==  "IB" .And. cPaisLoc == "ARG"
		If CCO->(MsSeek(xFilial("CCO")+SFH->FH_ZONFIS))
			If _lCliente 
				If CCO->CCO_CODPRO == SFH->FH_ZONFIS .And. CCO->CCO_AGPER == "1" .And. CCO->CCO_PCLIAG == "N" .And. SFH->FH_AGENTE == "S"
					lAgPerCCO := .F.
				EndIf
			Else
				If CCO->CCO_CODPRO == SFH->FH_ZONFIS .And. CCO->CCO_AGPER == "1" .And. CCO->CCO_PPROAG == "N" .And. SFH->FH_AGENTE == "S"
					lAgPerCCO := .F.
				EndIf
			EndIf
		EndIf
	EndIf
	
EndIf
		
DbSelectArea("SFH")		
DBSetOrder(_OrdenFH)
DBGoto(_RecnoFH)

Return(_lTipo)

/*
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦Funcion   ¦ImpIncid  ¦ Autor ¦ Jose Luis Otermin     ¦ Fecha¦ 01-08-99  ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Descripc. ¦Calcula la Alicuota de los Impuestos Incidentes              ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Uso       ¦  ImpIncid()                                                 ¦¦¦
¦¦¦          ¦Usa      _cTES,_cImpuesto,_cCFO,_cZFiscal,_cNomeProg         ¦¦¦
¦¦¦          ¦Retorna: Alicuota del Impuesto pedido                        ¦¦¦
¦¦¦          ¦         Base Minima de Calculo                              ¦¦¦
¦¦¦          ¦         Relacion entre Base de Calculo y Base Minima.       ¦¦¦
¦¦+------------------------------------------------------------------------¦¦¦
¦¦¦         ACTUALIZACIONES EFECTUADAS DESDE LA CODIFICACION INICIAL       ¦¦¦
¦¦+------------------------------------------------------------------------¦¦¦
¦¦¦Programador ¦ Data   ¦ BOPS ¦  Motivo da Alteracao                      ¦¦¦
¦¦+------------+--------+------+-------------------------------------------¦¦¦
¦¦¦            ¦  /  /  ¦      ¦                                           ¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
aSFF := ExecBlock("ImpIncid",.F.,.F.,{_cTES,_cImpuesto,_cCFO,_cZFiscal,_cNomeProg})
Indices

Usa:
SFB = Catalogo de Impuestos
SFC = Relacion TES-Impuestos
SFF = Tabla de Alicuotas de Impuestos x Zona Fiscal x CFO


Excepto los "D", Todos los Sujetos Fiscales pagan Percepcion.
Solo en caso de ser Agente de Percepcion de IVA, no paga Percepcion.

(1) FF_FILIAL + FF_NUM     + FF_ITEM
(2) FF_FILIAL + FF_ITEM
(3) FF_FILIAL + FF_IMPOSTO + FF_TIPO  + FF_CFO_C
(4) FF_FILIAL + FF_IMPOSTO + FF_TIPO  + FF_CFO_V
(5) FF_FILIAL + FF_IMPOSTO + FF_CFO_C + FF_ZONFIS
(6) FF_FILIAL + FF_IMPOSTO + FF_CFO_V + FF_ZONFIS

Para usar en un futuro. Eso dejaria el codigo generico completamente.

FB_RELACIO -> Relacion ValorMinimo con B.Calculo
0: Sin Relacion
1: >  Minimo;
2: >= Minimo;
3: =  Minimo;
4: <= Minimo;
5: <  Minimo;
6: <> Minimo
7: Adicionar Minimo
8: Restar Minimo
9: Impuesto Calculado >  Minimo
A: Impuesto Calculado >= Minimo
B: Impuesto Calculado <  Minimo
C: Impuesto Calculado <= Minimo

Impuestos Incidentes
En caso del IVA RNI, este incide sobre la alicuota del IVA Normal.

Usa:
_cTES      = Codigo Tipo de Entrada/Salida
_cImpuesto = Codigo del Impuesto
_cCFO      = Codigo Fiscal de la Operacion
_cZFiscal  = Zona Fiscal
_cNomeProg = Nombre del Programa llamador.

*/
// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> Function ImpIncid
Static Function ImpIncid()

Local lNotSFF:=.T.
Local cChaveP:=""

_cImpBASE   := CriaVar("FB_CODIGO")   // Impuesto sobre el que incide.
_nAlicINCID := CriaVar("FC_BASE")     // % del Impuesto sobre el que incide.
_lIncidente := .F.                    // Si Incide o no sobre otro Impuesto.

If Type("_nAlicuota")=="U"
	_nAlicuota  := CriaVar("FB_ALIQ")     // Alicuota del Impuesto
EndIf

_nValorMin  := CriaVar("FF_IMPORTE")  // Valor Minimo del Impuesto
_nValorOp   := 0						// Valor minimo para as operacoes
_nValorUn   := 0						// Valor minimo para valor u
_cItem      := CriaVar("FF_ITEM")		// Tipo da tabela
nValMin		:= 0
If ACPOIMP[_FB_DESGR]
	_nAlicDesg  := CriaVar("FB_DESGR")
Else
	_nAlicDesg  := 0
EndIf
_Alias1    := ALIAS()
_Orden1    := INDEXORD()
_Recno1    := RECNO()

DBSelectArea("SFC")
_OrdenFC   := INDEXORD()
_RecnoFC   := RECNO()
DBSelectArea("SFF")                 // SFF - Tabla de Alicuotas Imp.
_OrdenFF   := INDEXORD()
_RecnoFF   := RECNO()
DBSelectArea("SFB")                 // SFB - Catalogo de Impuestos
_OrdenFB   := INDEXORD()
_RecnoFB   := RECNO()

DBSetOrder(1)
MsSeek(xFilial("SFB")+_cImpuesto)

_lTabla     := (SFB->FB_TABELA == "S") // Tiene Tabla de Alicuotas?
_lDuplo     := (SFB->FB_DUPLO  == "S") // Incide sobre otro Impuesto?

If _nAlicuota == 0
	_nAlicuota  := SFB->FB_ALIQ            // Alicuota del Impuesto
EndIf


If ACPOIMP[_FB_DESGR]
	_nAlicDesg  := SFB->FB_DESGR
EndIf
_cRelBase   := SFB->FB_RELACIO         // Relacion ValorMinimo con B.Calculo

DBSelectArea("SFC")
DBSetOrder(2)                          // FC_FILIAL+FC_TES+FC_IMPOSTO
MsSeek(xFILIAL("SFC")+_cTES+_cImpuesto,.F.)

//Los impuestos incidentes son tratados por el propio impuesto
//en los casos de impuestos por total.
_lIncidente := !EMPTY(SFC->FC_INCIMP) .And. (SFC->FC_CALCULO<>"T")
_cImpBASE   := SFC->FC_INCIMP                 // Impuesto sobre el que incide.
_nAlicINCID := SFC->FC_BASE/100               // (%) de Alicuota que incide.

DBSelectArea("SFB")
DBSetOrder(_OrdenFB)
DBGoto(_RecnoFB)

DBSelectArea("SFC")
DBSetOrder(_OrdenFC)
DBGoto(_RecnoFC)

If _nAliqSFH <>0
	_nAlicuota := _nAliqSFH           // Alicuota del Impuesto
EndIf


If _lTabla

	_nSFF :=    IIF(_cTipoMov=="E",10,12)
	
	DBSelectArea("SFF")
	DbSetOrder(_nSFF)             // Filial+CodImpuesto+CodigoFiscal+ZonaFiscal
	
	_cChaveBase := xFILIAL("SFF")+_cImpuesto
	If _nAliqSFH <> 0
		_nAlicuota := _nAliqSFH
	EndIf	
	
	If Left(_cImpuesto,2) ==  "IB"
		IF .not. MsSeek(_cChaveBase+_cCFO+_cZFiscal+_cTSFiscal,.F.) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
			IF .not. MsSeek(_cChaveBase+_cCFO+_cZFiscal+"*",.F.)
				IF .not. MsSeek(_cChaveBase+_cCFO+"**",.F.)
					IF .not. MsSeek(_cChaveBase+"***"+"**",.F.)
						DBSelectArea("SFF")
						DBSetOrder(_OrdenFF)
						DBGoto(_RecnoFF)
						
						DBSelectArea(_Alias1)
						DBSetOrder(_Orden1)
						DBGoto(_Recno1)
						Return( {_nAlicuota, _nValorMin, _cRelBase, _cItem, _nValorOp, _nValorUn } )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
					EndIf
				EndIf
			Endif
		EndIf
	Else//if _cImpuesto ==  "IVP"
		If  _cImpuesto ==  "IVP" .And. SFF->(ColumnPos("FF_SISA")) > 0   // Padron Sisa Agro
			lNotSFF:=.T.
			If  MsSeek(_cChaveBase+_cCFO,.F.)	
				
				If _cTipoMov=="E"
					cChaveP:="SFF->(FF_FILIAL+FF_IMPOSTO+FF_CFO_C)"
				Else
					cChaveP:="SFF->(FF_FILIAL+FF_IMPOSTO+FF_CFO_V)"
				EndIf
				
				While   !SFF->(Eof()) 	.And. lNotSFF .And.  _cChaveBase+_cCFO == &cChaveP 
					If Empty(SFF->FF_SISA)
						lNotSFF:=.F.
					Else
						SFF->(DbSkip())
					EndIf
				EndDo
			EndIf
			If lNotSFF
				DBSelectArea("SFF")
				DBSetOrder(_OrdenFF)
				DBGoto(_RecnoFF)
							
				DBSelectArea(_Alias1)
				DBSetOrder(_Orden1)
				DBGoto(_Recno1)
				Return( {_nAlicuota, _nValorMin, _cRelBase, _cItem, _nValorOp, _nValorUn} )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
			EndIf
		
		Else
			If .not. MsSeek(_cChaveBase+_cCFO,.F.)
				DBSelectArea("SFF")
				DBSetOrder(_OrdenFF)
				DBGoto(_RecnoFF)
							
				DBSelectArea(_Alias1)
				DBSetOrder(_Orden1)
				DBGoto(_Recno1)
				Return( {_nAlicuota, _nValorMin, _cRelBase, _cItem, _nValorOp, _nValorUn} )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
	        Endif
	    EndIf 
	Endif
	
	If _nAliqSFH == 0
		_nAlicuota := SFF->FF_ALIQ           // Alicuota del Impuesto
	EndIf	
	_nValorMin := SFF->FF_IMPORTE        // Base Minima para Aplicar el Impuesto
	If ACPOIMP[_FF_LIMITE]
		_nValorOp  := SFF->FF_LIMITE		// Valor Minimo das operacoes para aplicar el Impuesto
	Endif
	If ACPOIMP[_FF_MINUNIT]
		_nValorUn  := SFF->FF_MINUNIT		// Valor unitario minimo para aplicar el Impuesto
	Endif
	_cItem     := SFF->FF_ITEM
	IF _lIncidente .OR. _lDuplo          // Si se basa en otro impuesto.
		IF SFF->FF_IMPOSTO == _cImpBASE
			_nAlicBASE := SFF->FF_ALIQ     // Alicuota del Impuesto Base.
		ENDIF
	EndIf

	If _cZFiscal == "TU" .and. _cTSFiscal == "V" .and. "IB4" == _cImpuesto .and. SM0->M0_ESTENT <> "TU" .and. SFF->FF_PRALQIB <> 0 .and. _nReduSFH <> 0 .and. Iif(_lCliente, SA1->A1_EST == "TU",.T.)
		_nSFPorcen:= ROUND((100 - SFF->FF_PRALQIB) /100,6)
	EndIf
	If _cZFiscal == "TU" .and. _cTSFiscal == "V" .and. "IB4" == _cImpuesto .and. SM0->M0_ESTENT <> "TU" .and. SFF->FF_PRALQIB <> 0 .and. _nReduSFH <> 0 .and. _nCoefMul <> 0 .and. Iif(_lCliente,SA1->A1_EST <> "TU",.T.)
		_nSFPorcen:= ROUND((100 - SFF->FF_PRALQIB) /100,6)
	EndIf

	If "IB" $ _cImpuesto .And.  !(_cZFiscal == "TU" .and. "IB4" == _cImpuesto) .and. SFF->FF_PRALQIB <> 0
		_nSFPorcen:= ROUND((100 - SFF->FF_PRALQIB) /100,6)	
	Endif 
	
	If  "IB" $ _cImpuesto .And.  Type("cCondicao")=="C" .And. !Empty(cCondicao)  .And. ACPOIMP[_FF_FORMAPG] .And. !Empty( AllTrim(SFF->FF_FORMAPG))  .And. (Empty(cTipCalc) .or. ("A"$ cTipCalc))
		DBSelectArea("SE4")
		DbSetOrder(1)
		
		nValMin:= 0 
		
		If !_lXFis
		 	nValMin:=aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
		Else
			nValMin:=MaFisRet( ParamIxb[1][2],"IT_VALMERC")+MaFisRet(ParamIxb[1][2],"IT_FRETE")+MaFisRet(ParamIxb[1][2],"IT_DESPESA")+MaFisRet(ParamIxb[1][2],"IT_SEGURO")
		EndIf
		nValMin := ValCond(nValMin)     
   		If Type("cCondicao")=="C" .And. !Empty(cCondicao) .And. SE4->(MsSeek(xFilial("SE4")+cCondicao))
			If ACPOIMP[_FF_FORMAPG] .And. AllTrim(SE4->E4_FORMA) == AllTrim(SFF->FF_FORMAPG) .And. !Empty(SE4->E4_FORMA) .And. nValMin >= SFF->FF_VALMIN
				_nAlicuota := SFF->FF_ALIQPAG
			EndIf
		EndIf
	EndIf
	_cImpBASE   := Iif(ACPOIMP[_FF_INCIMP],Iif(!Empty(Alltrim(SFF->FF_INCIMP)),Alltrim(SFF->FF_INCIMP),_cImpBASE),_cImpBASE)	
	DBSelectArea("SFF")
	DBSetOrder(_OrdenFF)
	DBGoto(_RecnoFF)
EndIf

DBSelectArea(_Alias1)
DBSetOrder(_Orden1)
DBGoto(_Recno1)

// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> //__Return( {_nAlicuota, _nValorMin, _cRelBase } )
Return( {_nAlicuota, _nValorMin, _cRelBase } )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
Return
//EOF---------------------------------

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³LjRetSerie³ Autor ³ Fernando Machima      ³ Data ³ 06/12/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Retorna a serie dependendo do tipo do fornecedor/cliente    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³LjRetSerie                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ImpGener                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±Danilo Santos|29/01/2018|DMICNS-820|Realizado um tratamento quando o     ±±
±±                                    parâmetro MV_ALTSER estiver com o    ±±
±±                                    conteúdo .T. , e a serie for alterada±±
±±                                    o sistema realize  a busca na tabela ±±
±±                                    SFZ com a serie informada.           ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Static Function LjRetSerie()

Local cCodSerie  := GetMv("MV_LOJANF")
Local cTipo      := ""

If _lCliente  
   cTipo  := SA1->A1_TIPO
   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Relacao Tipo de Cliente x Serie  ³
	//ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	//³Tipo Cliente      ³ Serie        ³
	//ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	//³E(Exportacao)   	 ³ E		    ³
	//³F(Cons. Final)    ³ B            ³
	//³M(Monotrib.)      ³ B            ³
	//³N(Resp.Nao Insc.) ³ B            ³
	//³S(Nap Sujeito)    ³ B            ³
	//³X(Isento) 	     	³ B|C          ³
	//³I(Inscrito)       ³ A            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cTipo == "E"	        
	   cCodSerie := "E"	   
	ElseIf cTipo $ "F|N|S|X"
	   cCodSerie := "B"	   
	Else
	   cCodSerie := "A"	   	      
	Endif 
Else
   cTipo  := SA2->A2_TIPO
   If cTipo $ "N|I"
	   cCodSerie    := "A"
	ElseIf cTipo $ "F|M|S"
	   cCodSerie    := "B"
	ElseIf cTipo $ "X"
	   	cCodSerie := "C"
	ElseIf cTipo == "E"    		
	   cCodSerie    := "E"
	Endif  
EndIf
If cPaisLoc == "ARG" .And. !(Alltrim(FunName()) $ "MATA410|MATA415") .AND. SuperGetMV("MV_ALTSER",,.T.) == .T. .And. !Empty(SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1))
	cCodSerie := SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)	
Endif
Return (cCodSerie)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GetZonaFisºAutor  ³Bruno Sobieski      ºFecha ³  10/15/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Retorna la zona fiscal para el item                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GetZonaFis()
If _lXFis

	If !Empty(MaFisRet(,"NF_UFDEST" ))
  		_cZFiscal := MaFisRet(,"NF_UFDEST" )
	Endif
                                           
ElseIf Type("cPROVENT")=="C".And. !Empty(cPROVENT)
	_cZFiscal  := cProvEnt // Zona Fiscal de entrega		
Endif

Return _cZFiscal

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ImpGenInciºAutor  ³Bruno Sobieski      ºFecha ³  22/10/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Calcular o valor de impostos incidentes no calculo por     º±±
±±º          ³ total                                                      º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ImpGenInci(aImposto,aItemInfo)
Local	cImpIncid	:=	aImposto[_IMPINCID]
Local aItemTmp		:=	{}
Local nX	:= 0
Local nI	:=	0
Local nE	:=	0
Local nBase 	:=	0
Local nPosImp	:=	0

cImpIncid	:=	aImposto[_IMPINCID]
nI:=At(";",cImpIncid )
nI:=If(nI==0,Len(AllTrim(cImpIncid))+1,nI)
While nI>1
	nE:=AScan(aItemINFO[6],{|x| x[1] $ Left(cImpIncid,nI-1)})
	If nE>0
		nBase	+=	aItemINFO[6,nE,4]
	End
	cImpIncid:=Stuff(cImpIncid,1,nI,"")
	nI:=At(";",cImpIncid)
	nI:=If(nI==0,Len(AllTrim(cImpIncid))+1,nI)
EndDo
                                       
Return nBase

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VerDocOri ºAutor  ³Microsiga           º Data ³  08/20/08   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function VerDocOri(nAlq,cEspecie,cCod,cSuc,nIndice,nOpcImp)
Local nNovaAlq	:= 0
Local nPosSer	:= 0
Local nPosNF	:= 0
Local nPosIt	:= 0
Local nPosProd	:= 0
Local cCpoAlq	:= ""
Local cNfOri	:= ""
Local cSerOri	:= ""
Local cItOri	:= ""
Local aArea		:= {}
Local aSD1		:= {}

Default nOpcImp := 1

nNovaAlq := nAlq
If cEspecie $ "NCC|NCP"
	Do Case
		Case cEspecie == "NCC"
			If Type("aCols") == "A" .And. Type("aHeader") == "A"
				aArea := SD2->(GetArea())
				cCpoAlq  := "SD2->D2_ALQIMP"+aInfo[2]
				nPosProd := aScan(aHeader,{|x| AllTrim(x[2])=="D1_COD"})
				nPosNF   := aScan(aHeader,{|x| AllTrim(x[2])=="D1_NFORI"})
				nPosSer  := aScan(aHeader,{|x| AllTrim(x[2])=="D1_SERIORI"})
				nPosIt   := aScan(aHeader,{|x| AllTrim(x[2])=="D1_ITEMORI"})
				If nPosNf > 0 .And. nPosSer > 0 .And. nPosIt > 0 .And. nPosProd > 0
					cNfOri  := aCols[nIndice,nPosNF]
					cSerOri := aCols[nIndice,nPosSer]
					cItOri  := aCols[nIndice,nPosIt]
					If Empty(cNfOri)
						nPosNF   := aScan(aHeader,{|x| AllTrim(x[2])=="D1_REMITO"})
						nPosSer  := aScan(aHeader,{|x| AllTrim(x[2])=="D1_SERIREM"})
						nPosIt   := aScan(aHeader,{|x| AllTrim(x[2])=="D1_ITEMREM"})
						If nPosNf > 0 .And. nPosSer > 0 .And. nPosIt > 0 .And. nPosProd > 0
							cNfOri  := aCols[nIndice,nPosNF]
							cSerOri := aCols[nIndice,nPosSer]
							cItOri  := aCols[nIndice,nPosIt]
							If !Empty(cNfOri)
								aSD1 := SD1->(GetArea())
								SD1->(DbSetOrder(1))
								If SD1->(MsSeek(xFilial("SD1")+ cNfOri + cSerOri + cCod + cSuc + aCols[nIndice,nPosProd] + cItOri))
									cNfOri  := SD1->D1_NFORI
									cSerOri := SD1->D1_SERIORI
									cItOri  := SD1->D1_ITEMORI
									SD2->(DbSetOrder(9))
									If !Empty(cNfOri ) .And. SD2->(MsSeek(xFilial("SD2") + cCod + cSuc + cSerOri + cNfOri + cItOri))
										nNovaAlq := &(cCpoAlq)
									Endif
								Endif
								SD1->(RestArea(aSD1))
							Endif
						Endif
					Else
						SD2->(dbSetOrder(3))
						If SD2->(MsSeek(xFilial("SD2")+ cNfOri + cSerOri + cCod + cSuc + aCols[nIndice,nPosProd] + cItOri))
							nNovaAlq := &(cCpoAlq)
							If  nOpcImp == 2
								lVerDocO := .F.
								If   nNovaAlq > 0
									_lSFExento := .F.  //NO fue Exento al momento de generar la NF, 1 => Tributar 100%	
									_nSFPorcen := 1.0  //En la NF la reducción fue aplicada a la alicuota. 						
								Endif
							Endif
						Endif
					Endif
				Endif
				SD2->(RestArea(aArea))
			EndIf
		Case cEspecie == "NCP"
			If Type("aCols") == "A" .And. Type("aHeader") == "A"
				aSD1 := SD1->(GetArea())
				cCpoAlq  := "SD1->D1_ALQIMP"+aInfo[2]
				nPosProd := aScan(aHeader,{|x| AllTrim(x[2])=="D2_COD"})
				nPosNF   := aScan(aHeader,{|x| AllTrim(x[2])=="D2_NFORI"})
				nPosSer  := aScan(aHeader,{|x| AllTrim(x[2])=="D2_SERIORI"})
				nPosIt   := aScan(aHeader,{|x| AllTrim(x[2])=="D2_ITEMORI"})
				If nPosNf > 0 .And. nPosSer > 0 .And. nPosIt > 0 .And. nPosProd > 0
					cNfOri  := aCols[nIndice,nPosNF]
					cSerOri := aCols[nIndice,nPosSer]
					cItOri  := aCols[nIndice,nPosIt]
					If Empty(cNfOri)
						nPosNF   := aScan(aHeader,{|x| AllTrim(x[2])=="D2_REMITO"})
						nPosSer  := aScan(aHeader,{|x| AllTrim(x[2])=="D2_SERIREM"})
						nPosIt   := aScan(aHeader,{|x| AllTrim(x[2])=="D2_ITEMREM"})
						If nPosNf > 0 .And. nPosSer > 0 .And. nPosIt > 0 .And. nPosProd > 0
							cNfOri  := aCols[nIndice,nPosNF]
							cSerOri := aCols[nIndice,nPosSer]
							cItOri  := aCols[nIndice,nPosIt]
							If !Empty(cNfOri)
								aArea := SD2->(GetArea())
								SD2->(DbSetOrder(3))
								If SD2->(MsSeek(xFilial("SD2")+ cNfOri + cSerOri + cCod + cSuc + aCols[nIndice,nPosProd] + cItOri))
									cNfOri  := SD2->D2_NFORI
									cSerOri := SD2->D2_SERIORI
									cItOri  := SD2->D2_ITEMORI
									SD1->(DbSetOrder(10))
									If !Empty(cNfOri) .and.  SD1->(MsSeek(xFilial("SD1") + cCod + cSuc + cSerOri + cNfOri + cItOri))
										nNovaAlq := &(cCpoAlq)
									Endif
								Endif
								SD2->(RestArea(aArea))
							Endif
						Endif
					Else
						SD1->(dbSetOrder(1))
						If SD1->(MsSeek(xFilial("SD1")+ cNfOri + cSerOri + cCod + cSuc + aCols[nIndice,nPosProd] + cItOri))
							nNovaAlq := &(cCpoAlq)
						Endif
					Endif
				Endif
				SD1->(RestArea(aSD1))
			EndIf
		OtherWise
			nNovaAlq := nAlq
	EndCase
Else
	nNovaAlq := nAlq
Endif
Return(nNovaAlq)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³RetTotOperºAutor  ³                    ºFecha ³ 15/05/2009  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna o valor total das notas emitidas para um cliente ou º±±
±±º          ³recebidas de um fornecedor, em um determinado periodo.      º±±
±±º          ³O total retornado e convertido para uma moeda escolhida.    º±±
±±º          ³As devolucoes sao subtraidas do total retornado.            º±±
±±º          ³                                                            º±±
±±º          ³Parametros: cCod   - codigo do emissor da nota fiscal       º±±
±±º          ³            cLoja  - codigo da filial do emissor            º±±
±±º          ³            cTipo  - tipo do emissor                        º±±
±±º          ³                     "F" = fornecedor, "C" = cliente        º±±
±±º          ³            dIni   - data inicial do period                 º±±
±±º          ³            dFim   - data final do periodo                  º±±
±±º          ³            nMoeda - moeda na qual sera convertido o valor  º±±
±±º          ³                     de retorno                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function RetTotOper(cCod,cLoja,cTipo,dIni,dFim,nMoedaFat)
Local cQuery	:= ""
Local cAliasTmp	:= ""
Local nTotal	:= 0
Local nTotalDev	:= 0
Local nValor	:= 0
Local nX		:= 0
Local aAreaSF	:= {}

Default cCod		:= ""
Default cLoja		:= ""
Default cTipo		:= "C"
Default dIni		:= dDatabase
Default dFim		:= dDatabase
Default nMoedaFat	:= 1

aArea := GetArea()
cTipo := Upper(AllTrim(cTipo))
nTotal := 0
nTotalDev := 0
nX := 0
aAreaSF := {}

//SF2
#IFDEF TOP
	cQuery := "select F2_VALMERC,F2_DESPESA,F2_SEGURO,F2_FRETE,F2_MOEDA,F2_TXMOEDA,F2_TIPO"
	cQuery += " from " + RetSqlName("SF2")
	cQuery += " where F2_FILIAL = '" + xFilial("SF2") + "'"
	cQuery += " and F2_CLIENTE = '" + cCod + "'"
	cQuery += " and F2_LOJA = '" + cLoja + "'"
	cQuery += " and F2_EMISSAO >= '" + Dtos(dIni) + "'"
	cQuery += " and F2_EMISSAO <= '" + Dtos(dFim) + "'"
	If cTipo == "C"
		cQuery += " and F2_TIPO = 'N'"
	Else
		cQuery += " and F2_TIPO = 'D'"
	Endif
	cQuery += " and not (" + IsRemito(2,"F2_TIPODOC") + ")"
	cQuery += " and D_E_L_E_T_=''"
	cAliasTmp := GetNextAlias()
	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),cAliasTmp,.F.,.T.)
#ELSE
	DbSelectArea("SF2")
	aAreaSF := GetArea()
	SF2->(DbSetOrder(2))
	cQuery := "F2_FILIAL == '" + xFilial("SF2") + "'"
	cQuery += " .and. F2_CLIENTE == '" + cCod + "'"
	cQuery += " .and. F2_LOJA == '" + cLoja + "'"
	cQuery += " .and. Dtos(F2_EMISSAO) >= '" + Dtos(dIni) + "'"
	cQuery += " .and. Dtos(F2_EMISSAO) <= '" + Dtos(dFim) + "'"
	If cTipo == "C"
		cQuery += " .and. F2_TIPO == 'N'"
	Else
		cQuery += " .and. F2_TIPO == 'D'"
	Endif
	cQuery += " .and. !(" + IsRemito(2,"F2_TIPODOC") + ")"
	cAliasTmp := "SF2"
	DbSetFilter({|| &cQuery},cQuery)
#ENDIF
(cAliasTmp)->(DbGoTop())
While !((cAliasTmp)->(Eof()))
	nValor := (cAliasTmp)->F2_VALMERC + (cAliasTmp)->F2_SEGURO + (cAliasTmp)->F2_DESPESA + (cAliasTmp)->F2_FRETE
	If (cAliasTmp)->F2_MOEDA <> nMoedaFat
		nValor := xMoeda(nValor,(cAliasTmp)->F2_MOEDA,nMoedaFat,,,(cAliasTmp)->F2_TXMOEDA)
	Endif
	If cTipo == "C"
		nTotal += nValor
	Else
		nTotalDev += nValor
	Endif
	(cAliasTmp)->(DbSkip())
Enddo
#IFDEF TOP
	DbSelectArea(cAliasTmp)
	DbCloseArea()
#ELSE
	DbSelectArea("SF2")
	SF2->(DbClearFil())
	SF2->(RestArea(aAreaSF))
#ENDIF
//SF1
#IFDEF TOP
	cQuery := "select F1_VALMERC,F1_DESPESA,F1_SEGURO,F1_FRETE,F1_MOEDA,F1_TXMOEDA,F1_TIPO"
	cQuery += " from " + RetSqlName("SF1")
	cQuery += " where F1_FILIAL = '" + xFilial("SF1") + "'"
	cQuery += " and F1_FORNECE = '" + cCod + "'"
	cQuery += " and F1_LOJA = '" + cLoja + "'"
	cQuery += " and F1_EMISSAO >= '" + Dtos(dIni) + "'"
	cQuery += " and F1_EMISSAO <= '" + Dtos(dFim) + "'"
	If cTipo == "C"
		cQuery += " and F1_TIPO = 'D'"
	Else
		cQuery += " and F1_TIPO = 'N'"
	Endif
	cQuery += " and not (" + IsRemito(2,"F1_TIPODOC") + ")"
	cQuery += " and D_E_L_E_T_=''"
	cAliasTmp := GetNextAlias()
	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGenQry(,,cQuery),cAliasTmp,.F.,.T.)
#ELSE
	DbSelectArea("SF1")
	aAreaSF := GetArea()
	cFiltro := SF1->(DbFilter())
	SF1->(DbSetOrder(2))
	cQuery := "F1_FILIAL == '" + xFilial("SF1") + "'"
	cQuery += " .and. F1_FORNECE == '" + cCod + "'"
	cQuery += " .and. F1_LOJA == '" + cLoja + "'"
	cQuery += " .and. Dtos(F1_EMISSAO) >= '" + Dtos(dIni) + "'"
	cQuery += " .and. Dtos(F1_EMISSAO) <= '" + Dtos(dFim) + "'"
	If cTipo == "C"
		cQuery += " .and. F1_TIPO == 'D'"
	Else
		cQuery += " .and. F1_TIPO == 'N'"
	Endif
	cQuery += " .and. !(" + IsRemito(2,"F1_TIPODOC") + ")"
	cAliasTmp := "SF1"
	DbSetFilter({|| &cQuery},cQuery)
#ENDIF
(cAliasTmp)->(DbGoTop())
While !((cAliasTmp)->(Eof()))
	nValor := (cAliasTmp)->F1_VALMERC + (cAliasTmp)->F1_SEGURO + (cAliasTmp)->F1_DESPESA + (cAliasTmp)->F1_FRETE
	If (cAliasTmp)->F1_MOEDA <> nMoedaFat
		nValor := xMoeda(nValor,(cAliasTmp)->F1_MOEDA,nMoedaFat,,,(cAliasTmp)->F1_TXMOEDA)
	Endif
	If cTipo == "C"
		nTotalDev += nValor
	Else
		nTotal += nValor
	Endif
	(cAliasTmp)->(DbSkip())
Enddo
#IFDEF TOP
	DbSelectArea(cAliasTmp)
	DbCloseArea()
#ELSE
	DbSelectArea("SF1")
	SF1->(DbClearFil())
	SF1->(RestArea(aAreaSF))
#ENDIF
RestArea(aArea)
nValor := nTotal - nTotalDev
Return(nValor)                     

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ValCond³ Autor ³ PAULO AUGUSTO         ³ Data ³ 02/05/11 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Retorna o valor convertido                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ImpGener                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ValCond(nValMin)
Local nMoedaOr		:= 1
Local nTxMoedaOr	:= 0
Default nValMin:=0                              

DO CASE
	Case Substr(cModulo,1,3) == 'FAT' .or. Substr(cModulo,1,3) == "OMS"
		If !_lXFis
			IF Type("aHeader")=="U"		            // Processo Batch
				If Type("L468NPED")=="L" .And. !l468NPed
					nMoedaOr	:= SF2->F2_MOEDA
					nTxMoedaOr	:= SF2->F2_TXMOEDA
				Else
					nMoedaOr	:= SC5->C5_MOEDA
					nTxMoedaOr	:= SC5->C5_TXMOEDA
				Endif
				If nMoedaOr>1 .and. nTxMoedaOr<=1
					nTxMoedaOr := RecMoeda(dDataBase,nMoedaOr)
				Endif
			Else
				If Subs(aHeader[1][2],1,2)=="D2"
					nMoedaOr	:= M->F2_MOEDA
					nTxMoedaOr	:= M->F2_TXMOEDA
				ElseIf Subs(aHeader[1][2],1,2)=="D1"
					nMoedaOr	:= M->F1_MOEDA
					nTxMoedaOr	:= M->F1_TXMOEDA  
				ElseIf Subs(aHeader[1][2],1,2)=="C6"
					nMoedaOr	:= M->C5_MOEDA
				EndIf
			EndIf			
		Else
			nMoedaOr   := MaFisRet(,"NF_MOEDA")
			nTxMoedaOr := MaFisRet(,"NF_TXMOEDA")		
		EndIf
			
	Case Substr(cModulo,1,3)  == 'COM'  .or. Substr(cModulo,1,3) == "EST" .or. Substr(cModulo,1,3) == "PMS"
		
		If !_lXFis
			IF Type("aHeader")=="U" .And. Type("M->C7_MOEDA") <> "U"		            // Processo Batch
				nMoedaOr	:= M->C7_MOEDA
				nTxMoedaOr	:= M->C7_TXMOEDA
			Else
				If Subs(aHeader[1][2],1,2)=="D2"
					nMoedaOr	:= M->F2_MOEDA
					nTxMoedaOr	:= M->F2_TXMOEDA 
				ElseIf Subs(aHeader[1][2],1,2)=="D1"
					nMoedaOr	:= M->F1_MOEDA
					nTxMoedaOr	:= M->F1_TXMOEDA  			
				ElseIf Subs(aHeader[1][2],1,2)=="C7"
					nMoedaOr	:= nMoedaPed
				EndIf
			EndIf 
		Else
			nMoedaOr   := MaFisRet(,"NF_MOEDA")
			nTxMoedaOr := MaFisRet(,"NF_TXMOEDA")
		EndIf
ENDCASE
nValMin:=Round(Xmoeda(nValMin,nMoedaOr,1,,5,nTxMoedaOr),MsDecimais(1))                    
Return(nValMin)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcion   ³MinPerIIBB³ Autor ³ Emanuel Villicaña     ³ Data ³ 08/05/14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacion de Minimos de Retencion de IIBB para Argentina   ³±±
±±³          ³verifica si el minimo lo trae de SFF o de CCO segun reglas  ³±±
±±³          ³del llamado TIWWW                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ImpGener                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MinPerIIBB(nOpc,aPmin,cNumImp,cCalculo,lAntCal)
	Local aArea	:= GetArea()
	Local nMinCCO	:= 0
	Local nLocA	:= 0
	Local nI		:= 0
	Local nX		:= 0
	Local nZ		:= 0
	Local aMinZ	:= {}
	Local aSCfo	:= {}
	Local nPosic	:= 0
	Local nPosT	:= 0
	local lCSff	:= .F.
	Local nRetM	:= 0
	Local cBusca	:= ""
	Local nOrdSFC:=(SFC->(IndexOrd()))
	Local nRegSFC:=(SFC->(Recno()))
	Local lRetie	:= .F.
	Static ACMin	:= {}
	Default lAntCal := .T.
	
	SFC->(DbSetOrder(2))

	If len(aCols) > 0 //FC_FILIAL+FC_TES+FC_IMPOSTO
	
		If len(aCols) == 1 .and. aPmin[1] <= 1 
			asize(ACMin,0)
		Endif 
		nPosic := 0

		For nX :=1 to len(ACMin)
			If ACMin[nX][1] == StrZero(aPmin[1],3,0)
				nPosic := nX
				exit
			Endif 
		Next nX
			
		If nPosic == 0 
			AAdd(ACMin,{StrZero(aPmin[1],3,0),; //Item Factura
			aPmin[2],; // Impuesto
			aPmin[3],; // CFO
			aPmin[4],; // Importe Base
			aPmin[5],; // Importe Minimo
			aPmin[6],; // Alicuota
			Iif(MaFisRet(aPmin[1],"IT_DELETED") == .T.,.T.,.F.) ,; // partida eliminada
			MaFisRet(aPmin[1],"IT_TES") })
		ElseIf nPosic > 0
			ACMin[nPosic][2] := aPmin[2]
			ACMin[nPosic][3] := aPmin[3]
			ACMin[nPosic][4] := aPmin[4]
			ACMin[nPosic][5] := aPmin[5]
			ACMin[nPosic][6] := aPmin[6]
			ACMin[nPosic][7] := Iif(MaFisRet(aPmin[1],"IT_DELETED") == .T.,.T.,.F.)
			ACMin[nPosic][8] := MaFisRet(aPmin[1],"IT_TES")
		Endif

		// Agrupa CFO para el caso de SFF
		For nX :=1 to len(ACMin)
			ACMin[nX][7] := Iif(MaFisRet(val(ACMin[nX][1]),"IT_DELETED") == .T.,.T.,.F.)

		  	If ACMin[nX][7] == .F.
				
				ACMin[nX][3] := MaFisRet(val(ACMin[nX][1]),"IT_CF")
				ACMin[nX][8] := MaFisRet(val(ACMin[nX][1]),"IT_TES")
				
				If SFC->(MsSeek(xFilial("SFC") + ACMin[nX][8] + "IB"))

					If ACMin[nX][5] > 0 .and. lCSff == .F.
						lCSff := .T.
					Endif 
	
					nPosic := 0
					For nI:=1 to len(aSCfo)
						if nLocA := aSCfo[nI][1] == ACMin[nX][3]
							nPosic := nI
							Exit
						Endif
					Next nI
		
					If len(aSCfo) == 0 .or. nPosic == 0 // CFO,MINSFF,nBCfo,nMinCCO
						AAdd(aSCfo,{ACMin[nX][3],;
							ACMin[nX][4],;
							MaFisRet(val(ACMin[nX][1]),'IT_BASEIV'+cNumImp),;
							ACMin[nX][5],;
							ACMin[nX][6],;
							{ACMin[nX]} }) 
					ElseIf nPosic > 0
						aSCfo[nPosic][2] += ACMin[nX][4]
						aSCfo[nPosic][3] += MaFisRet(val(ACMin[nX][1]),'IT_BASEIV'+cNumImp)

						nPosT := 0
						cBusca := ACMin[nX][1]
						nPosT := Ascan(aSCfo[nPosic][6],{|x| x[1] == cBusca })
						If nPosT == 0
							AAdd(aSCfo[nPosic][6],ACMin[nX])
						Endif 

					Endif 
					nMinCCO+=  ACMin[nX][4]
		  		Else // Tratamiento SFF
		  			ACMin[nX][7] := .T. // Desactivamos el campo como si estuviera borrado ya que no se toma en cuenta
					If FindFunction("ActItemNf")
		  				ActItemNf(val(ACMin[nX][1]),val(cNumImp),{0,0,0},.T.)
					EndIf

		  		Endif
		  	Else
		  		If FindFunction("ActItemNf")	
					ActItemNf(val(ACMin[nX][1]),val(cNumImp),{0,0,0},.T.)
				EndIf
		  	Endif 
		Next nX
		//

		If lCSff	== .F. // SI FF_IMPORTE ESTA EN 0
			If CCO->CCO_TPMINP == "1" // Base Imponible Minima 
				lAntCal := .F.
				If nMinCCO > CCO->CCO_IMMINP
				  nRetM = nMinCCO * (aPmin[6]/100)
				  lRetie	:= .T.
				Endif    	
			ElseIf CCO->CCO_TPMINP == "2" // Percepcion Minima
				lAntCal := .F.
				If (nMinCCO * (aSCfo[nI][5]/100)) > CCO->CCO_IMMINP
					nRetM = nMinCCO * (aPmin[6]/100)
					lRetie	:= .T.
				Endif
			Endif 
			
			If lRetie	== .T.
				For nI:=1 to len(aSCfo) 
					For nZ:=1 to len(aSCfo[nI][6]) // Act. aNfItem
						If FindFunction("ActItemNf")
							ActItemNf(val(aSCfo[nI][6][nZ][1]),val(cNumImp),{aSCfo[nI][6][nZ][4],aSCfo[nI][6][nZ][6],0},.F.)
						EndIf
					Next nZ
				Next nI
			Endif
		Else
			lAntCal := .F.
			nMinCCO := 0
			nRetM	 := 0
			
			For nI:=1 to len(aSCfo)
				If aSCfo[nI][2] > aSCfo[nI][4]
					For nZ:=1 to len(aSCfo[nI][6]) // Act. aNfItem
						If FindFunction("ActItemNf")
							ActItemNf(val(aSCfo[nI][6][nZ][1]),val(cNumImp),{aSCfo[nI][6][nZ][4],aSCfo[nI][6][nZ][6],0},.F.)
						EndIf
						If aSCfo[nI][6][nZ][1] == StrZero(aPmin[1],3,0)  .and. cCalculo=="B"
							lRetie	:= .T.
						Endif
					Next nZ
					nRetM += aSCfo[nI][2] * (aSCfo[nI][5]/100)
					nMinCCO += aSCfo[nI][2]
				Else
					For nZ:=1 to len(aSCfo[nI][6]) // Act. aNfItem
						If FindFunction("ActItemNf")
							ActItemNf(val(aSCfo[nI][6][nZ][1]),val(cNumImp),{0,0,0},.F.)
						EndIf
					Next nZ
				Endif 
			Next nI
		Endif

	Endif 

	If lAntCal == .F.
		If nRetM == 0
			For nX :=1 to len(ACMin)
				If FindFunction("ActItemNf")
		  			ActItemNf(val(ACMin[nX][1]),val(cNumImp),{0,0,0},.T.)
				EndIf
			Next nX
		Endif
		
		If len(aPmin) > 0 .And. FindFunction("ActCabNf")
			ActCabNf(val(cNumImp),aPmin[2],nMinCCO,nRetM)
		Endif
	Endif 
		 
	aAdd(aMinZ,{nRetM,nMinCCO,lRetie})

	SFC->(DbSetOrder(nOrdSFC))
	SFC->(DbGoto(nRegSFC))
	RestArea( aArea )	
Return aMinZ

//Mapeamento da memoria da existencia dos campos
Function ACPOIMPARG()
Local ACPOIMP:={}
AADD(ACPOIMP,Iif(cPaisLoc == 'ARG', CCO->(ColumnPos("CCO_TIPO"))>0, ''))
AADD(ACPOIMP,Iif(cPaisLoc $"ARG|PAR",SFH->(ColumnPos("FH_DTINI"))>0, ''))
AADD(ACPOIMP,Iif(cPaisLoc $"ARG|PAR",SFH->(ColumnPos("FH_DTFIM"))>0, ''))
AADD(ACPOIMP,Iif(cPaisLoc $"ARG|PAR",SFH->(ColumnPos("FH_INIVIGE"))>0, ''))
AADD(ACPOIMP,Iif(cPaisLoc $"ARG|PAR",SFH->(ColumnPos("FH_FIMVIGE"))>0, ''))
AADD(ACPOIMP,SA2->(ColumnPos("A2_RG820"))>0)
AADD(ACPOIMP,Iif(cPaisLoc $"ARG|PAR",SFH->(ColumnPos("FH_TIPO"))>0, ''))
AADD(ACPOIMP,SFB->(ColumnPos("FB_DESGR"))>0)
AADD(ACPOIMP,SFB->(ColumnPos("FB_DESGR"))>0)
AADD(ACPOIMP,SFF->(ColumnPos("FF_LIMITE"))>0)
AADD(ACPOIMP,SFF->(ColumnPos("FF_MINUNIT"))>0)
AADD(ACPOIMP,SFF->(ColumnPos("FF_FORMAPG"))>0) 
AADD(ACPOIMP,SFF->(ColumnPos("FF_FORMAPG"))> 0)
AADD(ACPOIMP,SFF->(ColumnPos("FF_INCIMP")>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPA")>0 .And. DBC->(ColumnPos("DBC_BSIMPA"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPB")>0 .And. DBC->(ColumnPos("DBC_BSIMPB"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPC")>0 .And. DBC->(ColumnPos("DBC_BSIMPC"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPD")>0 .And. DBC->(ColumnPos("DBC_BSIMPD"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPE")>0 .And. DBC->(ColumnPos("DBC_BSIMPE"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPF")>0 .And. DBC->(ColumnPos("DBC_BSIMPF"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPG")>0 .And. DBC->(ColumnPos("DBC_BSIMPG"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPH")>0 .And. DBC->(ColumnPos("DBC_BSIMPH"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPI")>0 .and. DBC->(ColumnPos("DBC_BSIMPI"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPJ")>0 .and. DBC->(ColumnPos("DBC_BSIMPJ"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPK")>0 .and. DBC->(ColumnPos("DBC_BSIMPK"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPL")>0 .and. DBC->(ColumnPos("DBC_BSIMPL"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPM")>0 .and. DBC->(ColumnPos("DBC_BSIMPM"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPN")>0 .and. DBC->(ColumnPos("DBC_BSIMPN"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPO")>0 .and. DBC->(ColumnPos("DBC_BSIMPO"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPP")>0 .and. DBC->(ColumnPos("DBC_BSIMPP"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPQ")>0 .and. DBC->(ColumnPos("DBC_BSIMPQ"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPR")>0 .and. DBC->(ColumnPos("DBC_BSIMPR"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPS")>0 .and. DBC->(ColumnPos("DBC_BSIMPS"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPT")>0 .and. DBC->(ColumnPos("DBC_BSIMPT"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPU")>0 .and. DBC->(ColumnPos("DBC_BSIMPU"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPV")>0 .and. DBC->(ColumnPos("DBC_BSIMPV"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPW")>0 .and. DBC->(ColumnPos("DBC_BSIMPW"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPX")>0 .and. DBC->(ColumnPos("DBC_BSIMPX"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPY")>0 .and. DBC->(ColumnPos("DBC_BSIMPY"))>0))
AADD(ACPOIMP,SD1->(ColumnPos("D1_BASIMPZ")>0 .and. DBC->(ColumnPos("DBC_BSIMPZ"))>0))

Return(ACPOIMP)

Function VerificanCampo(nCampo)
Local ValCampo := 0
If nCampo = 0
	   Do Case
	     Case aInfo[2] = 'A'
	           ValCampo := 10
	     Case aInfo[2] = 'B'
	           ValCampo := 11	     
	     Case aInfo[2] = 'C'
	           ValCampo := 12	     
	     Case aInfo[2] = 'D'
	           ValCampo := 13	     
	     Case aInfo[2] = 'E'
	           ValCampo := 14	     
	     Case aInfo[2] = 'F'
	           ValCampo := 15	     
	     Case aInfo[2] = 'G'
	           ValCampo := 16	     
	     Case aInfo[2] = 'H'
	           ValCampo := 17	     
	     Case aInfo[2] = 'I'
	           ValCampo := 18	     
	     Case aInfo[2] = 'J'
	           ValCampo := 19	     
	     Case aInfo[2] = 'K'
	           ValCampo := 20	     
	     Case aInfo[2] = 'L'
	           ValCampo := 21	    
	     Case aInfo[2] = 'M'
	           ValCampo := 22	     
	     Case aInfo[2] = 'N'
	           ValCampo := 23	     
	     Case aInfo[2] = 'O'
	           ValCampo := 23	     
	     Case aInfo[2] = 'P'
	           ValCampo := 25	     
	     Case aInfo[2] = 'Q'
	           ValCampo := 26	     
	     Case aInfo[2] = 'R'
	           ValCampo := 27	     
	     Case aInfo[2] = 'S'
	           ValCampo := 28	     
	     Case aInfo[2] = 'T'
	           ValCampo := 29	     
	     Case aInfo[2] = 'U'
	           ValCampo := 30	    
	     Case aInfo[2] = 'V'
	           ValCampo := 31	     
	     Case aInfo[2] = 'X'
	           ValCampo := 32	     
	     Case aInfo[2] = 'W'
	           ValCampo := 33	     
	     Case aInfo[2] = 'Y'
	           ValCampo := 34	     
	     Case aInfo[2] = 'Z'
	           ValCampo := 35	     
	   EndCase
 Else
 	ValCampo := nCampo
 EndIf
Return ValCampo

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ CGFQuery ³ Autor ³ Raul Ortiz          ³ Data ³ 19/11/2015 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica registro en la 	tabla CGF                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nulo                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Fiscal - Buenos Aires Argentina - MSSQL                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function CGFQuery(cTmpCGF,nOpc,cCod,cLoja,cCodAct, nRegCGF,lExiste,lIbr)
Local cQuery := ""
Local cCGF   := InitSqlName("CGF")

Default lIbr := .F.

	If (CGF->(ColumnPos("CGF_CODCLI")) > 0 .and. nOpc == 1) .or. nOpc == 2
		cQuery := "SELECT *  "
		cQuery += "FROM "+ cCGF + " CGF "
		cQuery += "WHERE CGF_FILIAL = '" + xFilial("CGF") +"' AND "
		If nOpc == 1
			cQuery += "      CGF_CODCLI = '" + cCod + "' AND "
		ElseiF  nOpc == 2
			cQuery += "      CGF_COD = '" + cCod + "' AND "
		EndIf
		cQuery += "      CGF_LOJA   = '" + cLoja + "' AND "
		If lExiste
			cQuery += "      CGF_CODACT   = '" + cCodAct + "' AND "
		EndIf
		cQuery += "      CGF_ZONFIS = 'ME' AND "
		If !lIbr
			cQuery += "      CGF_IMPOST = 'IBF' AND "
		Else
			cQuery += "      CGF_IMPOST = 'IBR' AND "
		EndIf
		cQuery +=		"D_E_L_E_T_ = '' "
		cQuery	+=	"ORDER BY  CGF_INIVIG DESC , CGF_FIMVIG DESC  "

		cQuery := ChangeQuery(cQuery)

		nRegCGF := 0
		DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cTmpCGF,.T.,.T.)
		TCSetField(cTmpCGF,"CGF_INIVIG","D")
		TCSetField(cTmpCGF,"CGF_FIMVIG","D")

		(cTmpCGF)->(dbGoTop())
		Count to nRegCGF
	EndIf
Return

/*
//Funcion: PerAcum
//Autor: Juan Roberto Gonzalez Rivas
//Fecha: 07/12/2017
//Descripcion: Calculo de acumulado mensual de percepciones
//Uso: M460XIBP, M460XIB2, M100XIBP, M100XIB2
//Parametros: 
//		cImp: Impuesto que se esta calculando.
//		cLib: Libro del impuesto donde se guardan los montos.
//		nLimite: Limite a superar por el acumulado.
//		nBase: Base de los documentos actualese.
//		lSuma: Si es para documentos que suman base (.T.) o si es para los documentos que restan (.F.).
//Retorno:
//		aDatosAcm: Estructura de datos con las siguientes posiciones:
//			[1]: Total de la base imponible de las percepciones en el mes.
//			[2]: Total del monto del impuesto percibido en el mes.
*/
Function PerAcum(cImp, cLib, nLimite, nBase, lSuma)
	Local aDatosAcm := {}
	Local aAreaSF3 := SF3->(GetArea())
	Local nTotPerBas := 0
	Local nTotPerRet := 0
	
	AcDocSalPos(@nTotPerBas, @nTotPerRet, cLib, .T.)
	AcDocSalPos(@nTotPerBas, @nTotPerRet, cLib, .F.)
	
	If lSuma
		nTotPerBas += nBase
	Else
		nTotPerBas -= nBase
	EndIf
	
	If nTotPerBas <= nLimite .And. lSuma
		nTotPerBas := 0
		nTotPerRet := 0
	ElseIf nTotPerBas <= nLimite .And. !lSuma
		nTotPerBas := 0
	EndIf
	Aadd(aDatosAcm,{nTotPerBas,nTotPerRet})
	SF3->(RestArea(aAreaSF3))
return aDatosAcm

/*
//Funcion: AcDocSalPos
//Autor: Juan Roberto Gonzalez Rivas
//Fecha: 07/12/2017
//Descripcion: Obtiene sumatoria de los documentos NF de salida, NDC, NCE para un mes y anio determinados.
//Uso: PerAcum
//Parametros: 
//		nTotPerBas: Monto de acumulado mensual de base imponible.
//		nTotPerRet: Monto de acumulado mensual de de percepcion.
//		cLib: Libro del impuesto donde se guardan los montos.
//		lSuma: Si es pera los documentos que suman base (.T.) o si es para los documentos que restan (.F.).
//Retorno: Sin retorno de datos.
*/
Function AcDocSalPos(nTotPerBas, nTotPerRet, cLib, lSuma)
	Local cQuery := ""
	Local cAliasSF3 := GetNextAlias()

	cQuery := "SELECT SUM(F3_BASIMP" + cLib + ") AS BI, SUM(F3_VALIMP" + cLib + ") AS PER "
	cQuery += "FROM " + RetSqlName("SF3")
	cQuery += "WHERE F3_FILIAL = '" + xFilial("SF3") + "' "
	cQuery += "AND D_E_L_E_T_ = '' "
	cQuery += "AND F3_ENTRADA BETWEEN '" + AllTrim(Str(Year(dDataBase))) + PadL(Month(dDataBase), 2, "0") + "01' "
	cQuery += "AND '" + DTOS(dDataBase) + "' AND F3_TIPOMOV = 'V' "
	If lSuma
		cQuery += "AND F3_ESPECIE IN ('NF', 'NDC', 'NCE') "
	Else
		cQuery += "AND F3_ESPECIE IN ('NCC', 'NDE') "
	EndIf
	cQuery += "GROUP BY F3_FILIAL, D_E_L_E_T_, F3_ESTADO, F3_TIPOMOV"
	cQuery := ChangeQuery(cQuery)
	DbUseArea(.T., "TOPCONN", TcGenQry(, , cQuery), cAliasSF3, .T., .T.)
	(cAliasSF3)->(DbGoTop())
	If lSuma
		nTotPerBas := (cAliasSF3)->BI
		nTotPerRet := (cAliasSF3)->PER
	Else
		nTotPerBas -= (cAliasSF3)->BI
		nTotPerRet -= (cAliasSF3)->PER
	EndIf
	(cAliasSF3)->(DbCloseArea())
Return
