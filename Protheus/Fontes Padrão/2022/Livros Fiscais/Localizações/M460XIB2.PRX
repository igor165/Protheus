#include "protheus.CH"         // incluido pelo assistente de conversao do AP5 IDE em 09/09/99

#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _IMPINCID  10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _IMPCALIM 17
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _ALIQDESG  19
#DEFINE _CCOFILIAL 1
#DEFINE _CCOCODPRO 2
#DEFINE _CCOPERNC  3
#DEFINE _CCOCRFPER 4
#DEFINE _CCOIMPPER 5
#DEFINE _CCOIMMINP 6
#DEFINE _CCOTPMINP 7
#DEFINE _FCFILIAL  1
#DEFINE _FCTES     2
#DEFINE _FCIMPOSTO 3
#DEFINE _FCPROV    4
#DEFINE _FCCALCULO 5
#DEFINE _FCINCIMP  6
#DEFINE _FCLIQUIDO 7
#DEFINE _FCSUMATIT 8
#DEFINE _FCSUMATOT 9

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ M100xIB2 ³ Autor ³ Jose Luis Otermin     ³ Data ³ 21.07.99 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa que Calcula Percepcion de Ing.Brutos misma ZFiscal³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ M100xIB2(void)                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA460, llamado por un punto de entrada                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ-Ä-ÂÄÄÄÄÄÄÄÄ-ÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ FECHA    ³   BOPS   ³  MOTIVO DE LA ALTERACION         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Dora Vega     ³07/02/2017³ MMI-178  ³ Se realizan ajustes a la busqueda³±±
±±³              ³          ³          ³ de un remito de devolucion       ³±±
±±³              ³          ³          ³ relacionado a un remito de venta.³±±
±±³              ³          ³          ³ Cambios en funcion M460VLNC(ARG) ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Dora Vega     ³09/02/2017³ MMI-237  ³ Se realizan ajustes para         ³±±
±±³              ³          ³          ³ considerar minimos desde         ³±±
±±³              ³          ³          ³ Generacion de Factura automatica.³±±
±±³              ³          ³          ³ Cambios en funcion M460xib2(ARG) ³±±
±±³M.Camargo     ³07/04/2017³ MMI-180  ³ ARG Se realizan ajustes para     ³±±
±±³              ³          ³          ³ realizar una nota de crédito sin ³±±
±±³              ³          ³          ³ estar ligada a una factura.      ³±±
±±³Raul Ortiz    ³18/04/2017³ MMI-298  ³ Se realizan ajustes para         ³±±
±±³              ³          ³          ³ calcular al cambio de fecha      ³±±
±±³Raul Ortiz M. ³22/09/17  ³DMICNS-166³Se agrega validación cuando en la ³±±
±±³              ³          ³          ³TES se configura un Impuesto INC. ³±±
±±³              ³          ³          ³y se agregan descuentos           ³±±
±±³Raul Ortiz    ³28/02/2018³ DMICNS-  ³ Se modifica la valicación de mi- ³±±
±±³              ³          ³ 1161     ³ nimos para cuando la moneda es   ³±±
±±³              ³          ³          ³ diferente a 1 - Argentina        ³±±  
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄ-Ä-ÁÄÄÄÄÄÄÄÄÄ-ÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function M460xib2(cCalculo,nItem,aInfo,cXFisRap)        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lXFis,xRet,nOrdSFC,nRegSFC,nBase
Local aBaseAc := {}
Local cImpIncid := ''
Local cIncIB    := ''
Local lFindSFC  := .F.
Local aImpRef   := {}
Local aImpVal   := {}
Local nI        := 0
Local nTotAnt   := 0
Local nPos      := 0
Local nItemNF   := 0
Local nTxMoeda := Iif(Type("nTaxamoeda") <> "U", nTaxamoeda, 1)
Local _nMoeda   := 1
Local lCalcImp  := .T.
Local cAlias    := IIf(Type("M->F1_FORNECE")=="C" ,"SF1",Iif (Type("M->F2_CLIENTE")=="C","SF2",""))
Local cTipo     := Iif(cAlias=="SF1",M->F1_ESPECIE,Iif(cAlias=="SF2",M->F2_ESPECIE,""))
local aNFEDev   := {}
Local nBaseAb   := 0
Local nx        := 1
Local cTipoInsc := SA1->A1_TIPO
Local nPos 		:= 0
Local aALiasSFC	:=SFC->(GetArea())
Local cCod		:=" "
Local cLoja		:=" "
Local cPesq		:=" "
Local lMinIb	:= SuperGetMV("MV_IBMIN",.T.,.F.)
Local cZonCCO := ""
Local nPosCCO := 0
Local nPosSFC := 0
Local nPosSFF := 0
Local cPesqCCO:=" "
Local cPesqSFC:=" "
Local cPesqSFF:=" "
Local lImpCCO := .F.
Local lImpSFC := .F.
Local nCoefSFH  := 0
Local nOrdeSFH  := 0
Local aAreaSFH  := {}
Local cLlave    := ""
Local lExisteNF := .F.
Local aAreaSF1  := {}

Private _nValorOp := 0
Private _nValorUn := 0
Private _cItem    := ""

SetPrvt("CALIASROT,CORDEMROT,AITEMINFO,AIMPOSTO,_CPROCNAME,_CZONCLSIGA")
SetPrvt("_LAGENTE,AFISCAL,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NVALORMIN,_NALICDESG")
SetPrvt("_LTIPOSFB,_LCLASSE,_LCLASSIF")
SetPrvt("_NREDUCIR,")

Default cXFisRap := ""
If Type("aRG1316") <> "U"
	If SF3->(ColumnPos("F3_RG1316")) > 0 .and. len(aRG1316) < nItem 
		Aadd(aRG1316,{})
	EndIf
EndIf

	/*/
	//-----------------------------------------------------
	// Nota:
	// Debe registrarse al Cliente en la Tabla SFH en caso
	// que sea Agente de Percepcion o este Exento en una ZF.
	// Se utiliza el parametro MV_AGENTE
	// Significado de las posiciones de MV_AGENTE
	// SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
	// SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
	// SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
	// SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
	// SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
	//-----------------------------------------------------
	// Nota:
	// Debe utilizarse el parametro MV_EXENTO
	// Significado de las posiciones de MV_EXENTO
	// SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
	// SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
	// SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
	// SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
	// SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
	//-----------------------------------------------------
	/*/

	lXfis:=(MaFisFound()  .And. ProcName(1)<>"EXECBLOCK")
	cAliasRot  := Alias()
	cOrdemRot  := IndexOrd()

	If !lXFis
		aItemINFO  := ParamIxb[1]
		aImposto   := ParamIxb[2]
		nItemNF	   := ParamIxb[3]
		xRet:=aImposto
	Else
		xRet:=0
	Endif

	_cProcName := "M460xIB2"

	cProv:=""
	If cPaisLoc == "ARG"
		If lXFis
			cProv:= MaFisRet(nItem,"IT_PROVENT")
		Else
			cProv:= aItemINFO[7]
		EndIf
		If  Empty(cProv)
			cProv:=SM0->M0_ESTENT
		EndIf
	EndIf

	_cZonClSIGA:= If(cPaisLoc == "ARG",cProv,SM0->M0_ESTENT) // Zona Fiscal del Cliente SIGA
	_lAgente   := (SUBSTR(GETMV("MV_AGENTE"),5,1)=="S") //  Agente Percepcion IB?

	nPos     :=  0
	nPosCCO  := 0
	nPosSFC  := 0
	lArrayIb := Type("aImpIB2") <> "U"
	lImpCCO	 := Type("aImpCCO") <> "U"
	lImpSFC	 := Type("aImpSFC") <> "U"

	cEspecie := IIF(Type("cEspecie")=="C",cEspecie,"NF")

	If cAlias== "SF2
		cCod:=	M->F2_CLIENTE
		cLoja:=	M->F2_LOJA

	ElseIf cAlias== "SF1
		cCod:=	M->F1_FORNECE
		cLoja:=	M->F1_LOJA
	EndIf

	IF lXFis .And. (Alltrim(cCod)=="" .OR. Alltrim(cLoja)=="")
		cCod :=	MaFisRet(,"NF_CODCLIFOR" )
		cLoja:=	MaFisRet(,"NF_LOJA" )
	EndIf

	If cPaisloc == "ARG" .AND. FunName() $ "MATA468N|MATA461" .AND. lXFis == .F.
		cCod := SA1->A1_COD
		cLoja := SA1->A1_LOJA
		nOrdeSFH := 3 //FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
	Endif
	
	If Upper(FunName()) == "FISA828"
		If Type("M->NJC_CODPRO")=="C" .And. !Empty(M->NJC_CODPRO) .And. Type("M->NJC_TIENDA")=="C" .And. !Empty(M->NJC_TIENDA)
			cCod		:=	M->NJC_CODPRO
			cLoja		:=	M->NJC_TIENDA	
		EndIf
		
		If Type("M->NJC_VENDED")=="C" .And. !Empty(M->NJC_VENDED) .And. Type("M->NJC_LOJAVE")=="C" .And. !Empty(M->NJC_LOJAVE)
			cCod		:=	M->NJC_VENDED
			cLoja 		:=	M->NJC_LOJAVE	
		EndIf
	Endif

	If lXFis .And. lArrayIb
		cPesq:=xFilial("SF4")+MaFisRet(nItem,"IT_TES")+MaFisRet(nItem,"IT_CF")+MaFisRet(,"NF_CLIFOR" )+cCod+cLoja+MaFisRet(,"NF_PROVENT")+MaFisRet(nItem,"IT_PROVENT")+aInfo[1]+IIf (Type("dDEmissao")=="D",AllTrim(STR(Month(dDEmissao))) + AllTrim(STR(Year(dDEmissao))), AllTrim(STR(Month(dDataBase))) + AllTrim(STR(Year(dDataBase))))+SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)
		nPos:=Ascan(aImpIB2,{|item| item[1] == cPesq})
	EndIf

	If nPos == 0
		aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{If(lXFis,{cCalculo,nItem,aInfo},ParamIxb), _cProcName, _lAgente,_cZonClSIGA,lXFis},.T.)
		If lArrayIb
			If nPos == 0
				Aadd(aImpIB2,{cPesq,aFiscal})
			Else
				aImpIB2[nPos][2] := aFiscal
			EndIf
		EndIf
	Else
		aFiscal:= aImpIB2[nPos][2]
	Endif

	For nI := Len(aFiscal)+1 To 10
		Aadd(aFiscal,0)
	Next

	If cTipo $ ("NCC|NCP")
		If !Empty(MaFisRet(nx,"IT_NFORI")) .and. !Empty(MaFisRet(nx,"IT_SERORI"))
			aAreaSF1 := SF1->(GetArea())
			DbSelectArea("SF1")
			SF1->(DBSetOrder(1))//F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA
			If SF1->(MsSeek(xFilial("SF1")+ MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI") +M->F2_CLIENTE+M->F2_LOJA,.F.))
				lExisteNF := .T.
			Endif
			SF1->(RestArea(aAreaSF1))
		Endif		
	Endif
	_cItem     := ""
	_nValorOp  := 0
	_nValorUn  := 0
	_lCalcular := aFiscal[1]
	_lEsLegal  := aFiscal[2]
	_nAlicuota := aFiscal[3]
	_nValorMin := Iif(lXfis,xMoeda(aFiscal[4],1,MaFisRet(,"NF_MOEDA"),,,,MaFisRet(,"NF_TXMOEDA")),xMoeda(aFiscal[4],1,_nMoeda,,,,nTxMoeda))
	_nReducir  := aFiscal[5]
	cIncIB     := aFiscal[6]
	_nMoeda    := aFiscal[7]
	_cItem     := aFiscal[08]
	_nValorOp  := aFiscal[09]
	_nValorUn  := aFiscal[10]
	_nAlicDesg := aFiscal[11]
	If cPaisLoc == "ARG" .And. Len(aFiscal)>=12
		cTipoInsc :=  aFiscal[12]
	EndIf

	If lXFis
		If lImpSFC
			cPesqSFC 	:= xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1]
			nPosSFC 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
		EndIf
		If nPosSFC == 0
			SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
			If (SFC->(MsSeek( xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1] )))
				If !Empty(Alltrim(SFC->FC_PROV))
					cZonCCO := SFC->FC_PROV
				Endif
			EndIf
			If lImpSFC
				AADD(aImpSFC,{SFC->FC_FILIAL,SFC->FC_TES,SFC->FC_IMPOSTO,SFC->FC_PROV,SFC->FC_CALCULO,SFC->FC_INCIMP,SFC->FC_LIQUIDO,SFC->FC_INCDUPL,SFC->FC_INCNOTA})
			EndIf
		Else
			cZonCCO := aImpSFC[nPosSFC][_FCPROV]
		EndIf

		If lImpCCO
			cPesqCCO 	:= xFilial("CCO") + cZonCCO
			nPosCCO 	:= Ascan(aImpCCO,{|item| item[_CCOFILIAL] + item[_CCOCODPRO] == cPesqCCO})
		EndIf
	EndIf
	
	If lImpSFC .and. SF3->(ColumnPos("F3_RG1316")) > 0 .and. Type("aRG1316") <> "U"
		nPosSFC2 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
		If LEN(aRG1316[nItem]) > 0 
			If aRG1316[nItem][1][1] <> aImpSFC[nPosSFC2][_FCTES]
				aRG1316 [nItem] := {}
			EndIf 
		EndIf
		IF SA2->A2_TIPROV <> Nil
			If (FunName() == "MATA466N" .AND. SA2->A2_TIPROV == "A"  .AND. aFiscal[15] .AND. aFiscal[16] .AND. aFiscal[17];
				 .and. aImpSFC[nPosSFC2][_FCSUMATIT]=="1" .and. aImpSFC[nPosSFC2][_FCSUMATOT] == "1";
				 .and. aImpSFC[nPosSFC2][_FCCALCULO] == "T" .and. aImpSFC[nPosSFC2][_FCLIQUIDO] =="N")
				If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
					_nAlicuota :=  _nAlicuota * CCO->CCO_COESIR 
					If _nAlicuota <> 0
						_lCalcular := .T.
						_lEsLegal  := .T. 
						If  Iif ( LEN(aRG1316[nItem]) > 0, aRG1316[nItem][1][2] <> aImpSFC[nPosSFC2][_FCIMPOSTO],.T.)
							Aadd(aRG1316[nItem],{aImpSFC[nPosSFC2][_FCTES],aImpSFC[nPosSFC2][_FCIMPOSTO],"S"})
						EndIf
					EndIf	
				EndIf
			EndIf
		EndIf
	EndIf

	If cTipo $ ("NCC|NCP")
		DbSelectArea("CCO")
		DbSetOrder(1) //CCO_FILIAL+CCO_CODPRO
		If CCO->(MsSeek(xFilial("CCO")+cZonCCO))
			If !(CCO->CCO_CPERNC $ "1|6") .and. !lExisteNF
				_lCalcular := .F.
			ElseIf (CCO->CCO_CPERNC=="5")
				_lCalcular := .F.
			Endif
		EndIf
	EndIf

	IF _lCalcular  .AND. _lEsLegal

		If !lXFis
			lCalcImp := .T.
			if _nReducir <> 0 
				aImposto[_ALIQUOTA]  := _nAlicuota * _nReducir// Alicuota de Zona Fiscal del Proveedor
			Else 
				aImposto[_ALIQUOTA]  := _nAlicuota
			Endif
			aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo

			//+---------------------------------------------------------------+
			//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
			//+---------------------------------------------------------Lucas-+
			aImposto[_IMPINCID]:=cIncIB
			If !Empty(aImposto[_IMPINCID])
				aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
			Endif
			IF cPaisLoc == "ARG" .And. cTipoInsc == "V"
				aAreaSFH	:= SFH->(Getarea())
				SFH->(DbSetOrder(nOrdeSFH)) 
				cLlave := xFilial("SFH") + cCod + cLoja + aImposto[1] 
				If SFH->(MsSeek( cLlave ))
					While!(SFH->(Eof())) .and. ; 
						iif (nOrdeSFH == 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO == cLlave,;   
									SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO == cLlave)
						If SFH->FH_TIPO == cTipoInsc .and. A085aVigSFH()    
							nCoefSFH := SFH->FH_COEFMUL
							exit  
						Endif 
						SFH->(DbSkip()) 
					EndDo 
				Endif
				SFH->(RestArea(aAreaSFH))

				aImposto[_BASECALC]  := (aImposto[_BASECALC]  * (Iif((Type("lNoRed") <> "U" .and. lNoRed),IIf(nCoefSFH <> 0,nCoefSFH,1),1)))  
			Endif
			aImposto[_ALIQDESG]  := _nAlicDesg
			// Verifica devolução
			If cTipo $ ("NCC|NCP")
				nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO)
			Else
				nBaseAb:=0
			EndIf

			//Tira os descontos se for pelo liquido .Bruno
			If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
				aImposto[_BASECALC]	-=	aImposto[18]
			Endif

			
			//+---------------------------------------------------------------+
			//¦ Efectua el Cálculo del Impuesto                               ¦
			//+---------------------------------------------------------------+
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Tratamento de IB para monotributistas - Argentina           ³
			³ AGIP 177/2009                                               ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If cPaisLoc == "ARG" .And. cTipoInsc == "M"
				If _nMoeda <> 1
					If Type("nTaxamoeda") <> "U"
						nTxMoeda := nTaxamoeda
					EndIf
					nTotAnt := xMoeda(aImposto[_BASECALC],_nMoeda,1,,,nTxMoeda)
				Else
					nTotAnt := aImposto[_BASECALC]
				Endif
				If Type("_nTotOper_") == "N"
					nTotAnt += _nTotOper_
				Endif
				If Type("_aValItem_") <> "A"
					_aValItem_ := {}
				Endif
				nPos := Ascan(_aValItem_,{|item| item[1] == nItemNF})
				If nPos > 0
					_aValItem_[nPos,2] := AllTrim(_cItem) == "B2"		//B2 - "cosas muebles"
				Endif
				lCalcImp := ((nTotAnt -nBaseAb ) > _nValorOp)
				If !lCalcImp
					//Verifica se ha algum "cosa mueble" com valor unitario acima do minimo
					lCalcImp := (Ascan(_aValItem_,{|valor| valor[2] .And. (valor[3] > _nValorUn)}) > 0)
				Endif
			Endif
			If lCalcImp .And. (aImposto[_BASECALC] > _nValorMin)
				If CCO->(ColumnPos("CCO_TPLIMP")) > 0 .And. CCO->CCO_TPLIMP == "2" .And. _nValorOp > 0 .And. AllTrim(cEspecie) == "NF" .And. Substr(cModulo,1,3) == 'FAT'
					aBaseAc := PerAcum(aImposto[_NOMIMPOST], aImposto[_IMPCALIM], _nValorOp, aImposto[_BASECALC], .T.)
					If _nAlicDesg > 0
						aImposto[_IMPUESTO]  := Round((aBaseAc[1][1] - nBaseAb )* ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
						aImposto[_IMPUESTO]  := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100)
					Else
						aImposto[_IMPUESTO]  := Round(aBaseAc[1][1] * ( aImposto[_ALIQUOTA]/100) * _nReducir , MsDecimais(_nMoeda))
					EndIf
					
					If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] != 0 
						aImposto[_IMPUESTO] -= aBaseAc[1][2]
					EndIf
				Else
					If _nAlicDesg > 0
						aImposto[_IMPUESTO]  := Round((aImposto[_BASECALC] - nBaseAb )* ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
						aImposto[_IMPUESTO]  := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100)
					Else
						If _nReducir <> 0
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100), MsDecimais(_nMoeda))
						Else
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir , MsDecimais(_nMoeda))
						Endif	
					EndIf
				EndIf
			ELSE
				aImposto[_IMPUESTO]  := 0.00
				aImposto[_IMPFLETE]  := 0.00
				aImposto[_IMPGASTOS] := 0.00
				aImposto[_RATEOFRET] := 0.00
				aImposto[_RATEODESP] := 0.00
			Endif

			xRet:=aImposto

		Else
			If !Empty(cXFisRap)
				xRet := {0,0,0}
				xRet[2] := _nAlicuota

				xRet := {0,_nAlicuota,0}
				lCalc := .T.
				If !(MaFisRet(nItem,'IT_DELETED')  )
					nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
				Else
					lCalc := .F.
					nBase:=0
				EndIf

				If GetNewPar('MV_DESCSAI','1')=='1'
					nBase	+= MaFisRet(nItem,"IT_DESCONTO")
				Endif
				If nPosSFC == 0
					nOrdSFC:=(SFC->(IndexOrd()))
					nRegSFC:=(SFC->(Recno()))
					SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
				EndIf
				If !Empty(cIncIB)
					If nPosSFC == 0
						lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
					Else
						lFindSFC := .T.
					EndIf
					//Tira os descontos se for pelo liquido
					If lFindSFC
						cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP)) //Alltrim(SFC->FC_INCIMP)
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" ) //SFC->FC_LIQUIDO=="S"
							nBase-= MaFisRet(nItem,"IT_DESCONTO")
						Endif
					Endif
					//+---------------------------------------------------------------+
					//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
					//+---------------------------------------------------------------+
					If !Empty(cIncIB)
						aImpRef:=MaFisRet(nItem,"IT_DESCIV")
						aImpVal:=MaFisRet(nItem,"IT_VALIMP")
						For nI:=1 to Len(aImpRef)
							If !Empty(aImpRef[nI])
								IF Trim(aImpRef[nI][1])$cIncIB
									nBase+=aImpVal[nI]
								Endif
							Endif
						Next
					Endif
				Else
					//Tira os descontos se for pelo liquido
					If IIF(nPosSFC>0,.T.,(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))) //SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
						cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP)) //Alltrim(SFC->FC_INCIMP)
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )  //SFC->FC_LIQUIDO=="S"
							nBase-= MaFisRet(nItem,"IT_DESCONTO")
						Endif
					Endif
					//+---------------------------------------------------------------+
					//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
					//+---------------------------------------------------------------+
					If !Empty(cImpIncid)
						aImpRef:=MaFisRet(nItem,"IT_DESCIV")
						aImpVal:=MaFisRet(nItem,"IT_VALIMP")
						For nI:=1 to Len(aImpRef)
							If !Empty(aImpRef[nI])
								IF Trim(aImpRef[nI][1])$cImpIncid
									nBase+=aImpVal[nI]
								Endif
							Endif
						Next
					Endif
				Endif

				IF cPaisLoc == "ARG" .And. cTipoInsc == "V" .And. cCalculo == "B"
					aAreaSFH	:= SFH->(Getarea())
					nOrdeSFH := Iif(MaFisRet(,"NF_CLIFOR" ) == "C",3,1)
					SFH->(DbSetOrder(nOrdeSFH)) 
					cLlave := xFilial("SFH") + cCod + cLoja + aInfo[1] 
					If SFH->(MsSeek( cLlave ))
						While!(SFH->(Eof())) .and. ; 
							iif (nOrdeSFH == 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO == cLlave,;   
										SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO == cLlave)
							If SFH->FH_TIPO == cTipoInsc .and. A085aVigSFH()    
								nCoefSFH := SFH->FH_COEFMUL
								exit  
							Endif 
							SFH->(DbSkip())
						EndDo 
					Endif
					SFH->(RestArea(aAreaSFH))

					nBase := (nBase  * IIf(nCoefSFH <> 0,nCoefSFH,1) ) 
				Endif

				// Verifica devolução
				If cTipo $ ("NCC|NCP")
					nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO,nItem)
				Else
					nBaseAb:=0
				EndIf
				xRet[1] := nBase
				MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
				If "V" $ cXFisRap
					lCalcImp := .T.
					If SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
						If SFC->FC_CALCULO=="T"
							nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota)
						Endif
					Endif
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Tratamento de IB para monotributistas - Argentina           ³
					³ AGIP 177/2009                                               ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					If cPaisLoc == "ARG"

						// Verifica devolução
						If cTipo $ ("NCC|NCP")
							nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO,nItem)
						Else
							nBaseAb:=0
						EndIf


						nBase := nBase - nBaseAb

						If MaFisRet(,"NF_TIPONF") == "N" .And. MaFisRet(,"NF_OPERNF") == "S" .And. MaFisRet(,"NF_CLIFOR") == "C" .And. cTipoInsc == "M"
							If _nMoeda <> 1
								nTotAnt := xMoeda(nBase,_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
							Else
								nTotAnt := nBase
							Endif
							If Type("_nTotOper_") == "N"
								nTotAnt += _nTotOper_
							Endif
							If Type("_aValItem_") <> "A"
								_aValItem_ := {}
							Endif
							nPos := Ascan(_aValItem_,{|item| item[1] == nItem})
							If nPos == 0
								Aadd(_aValItem_,{nItem,.F.,xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))})
								nPos := Len(_aValItem_)
							Else
								_aValItem_[nPos,3] := xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
							Endif
							_aValItem_[nPos,2] := (AllTrim(_cItem)) == "B2"		//B2 - "cosas muebles"
							lCalcImp := (nTotAnt > _nValorOp)
							If !lCalcImp
								//Verifica se ha algum "cosa mueble" com valor unitario acima do minimo
								lCalcImp := (Ascan(_aValItem_,{|valor| valor[2] .And. (valor[3] > _nValorUn)}) > 0)
							Endif
						Endif
					Endif
					If lCalcImp .And. (nBase > _nValorMin)
						If _nAlicDesg > 0
							xRet[3] := Round(nBase * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
							xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
						Else
							xRet[3] := Round(nBase * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
						EndIf
					Endif
				Endif
				If nPosSFC == 0
					SFC->(DbSetOrder(nOrdSFC))
					SFC->(DbGoto(nRegSFC))
				EndIf
			Else
				Do Case
					Case cCalculo=="A"
						If _nReducir <> 0 
							If lExisteNF
								xRet := _nAlicuota
							Else
								xRet := _nAlicuota  * _nReducir
							Endif
						Else
							xRet:=_nAlicuota
						Endif
					Case cCalculo=="B"
						// Verifica devolução
						If cTipo $ ("NCC|NCP")
							nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO,nItem)
						Else
							nBaseAb:=0
						EndIf

						If !(MaFisRet(nItem,'IT_DELETED')  )
							nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
						Else
							nBase:= 0
						EndIf

						nBase:=nBase - nBaseAb
						If GetNewPar('MV_DESCSAI','1')=='1'
							nBase	+= MaFisRet(nItem,"IT_DESCONTO")
						Endif

						If !Empty(cIncIB)
							//+---------------------------------------------------------------+
							//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
							//+---------------------------------------------------------------+
							If !Empty(cIncIB)
								aImpRef:=MaFisRet(nItem,"IT_DESCIV")
								aImpVal:=MaFisRet(nItem,"IT_VALIMP")
								For nI:=1 to Len(aImpRef)
									If !Empty(aImpRef[nI])
										IF Trim(aImpRef[nI][1])$cIncIB
											nBase+=aImpVal[nI]
										Endif
									Endif
								Next
							Endif
						Else
							nOrdSFC:=(SFC->(IndexOrd()))
							nRegSFC:=(SFC->(Recno()))
							SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
							lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
							//Tira os descontos se for pelo liquido
							If lFindSFC
								cImpIncid:=Alltrim(SFC->FC_INCIMP)
								If SFC->FC_LIQUIDO=="S"
									nBase-= MaFisRet(nItem,"IT_DESCONTO")
								Endif
							Endif
							//+---------------------------------------------------------------+
							//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
							//+---------------------------------------------------------------+
							If !Empty(cImpIncid)
								aImpRef:=MaFisRet(nItem,"IT_DESCIV")
								aImpVal:=MaFisRet(nItem,"IT_VALIMP")
								For nI:=1 to Len(aImpRef)
									If !Empty(aImpRef[nI])
										IF Trim(aImpRef[nI][1])$cImpIncid
											nBase+=aImpVal[nI]
										Endif
									Endif
								Next
							Endif
							SFC->(DbSetOrder(nOrdSFC))
							SFC->(DbGoto(nRegSFC))
						Endif
						xRet:=nBase
						MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
					Case cCalculo=="V"
						lCalcImp := .T.
						MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
						If nPosSFC == 0
							SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
							lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
						Else
							lFindSFC := .T.
						EndIf

						If lFindSFC
							If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCCALCULO]=="T",SFC->FC_CALCULO=="T")
								nBase := (MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV'+aInfo[2]))-nBaseAb)
							Else
								nBase := MaFisRet(nItem,'IT_BASEIV'+aInfo[2])
							Endif
						Endif
						/*
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³ Tratamento de IB para monotributistas - Argentina           ³
						³ AGIP 177/2009                                               ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						If cPaisLoc == "ARG"
							// Verifica devolução
							If cTipo $ ("NCC|NCP")
								nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO,nItem)
							Else
								nBaseAb:=0
							EndIf

							If nBaseAb > 0 .and. cTipo $ ("NCC|NCP")
								nBaseAb := MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV'+aInfo[2]))
							EndIf

							nBase := nBase - nBaseAb
							If MaFisRet(,"NF_TIPONF") == "N" .And. MaFisRet(,"NF_OPERNF") == "S" .And. MaFisRet(,"NF_CLIFOR") == "C" .And. cTipoInsc == "M"
								If _nMoeda <> 1
									nTotAnt := xMoeda(nBase,_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
								Else
									nTotAnt := nBase
								Endif
								If Type("_nTotOper_") == "N"
									nTotAnt += _nTotOper_
								Endif
								If Type("_aValItem_") <> "A"
									_aValItem_ := {}
								Endif
								nPos := Ascan(_aValItem_,{|item| item[1] == nItem})
								If nPos == 0
									Aadd(_aValItem_,{nItem,.F.,xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))})
									nPos := Len(_aValItem_)
								Else
									_aValItem_[nPos,3] := xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
								Endif
								_aValItem_[nPos,2] := (AllTrim(_cItem)) == "B2"		//B2 - "cosas muebles"
								lCalcImp := (nTotAnt > _nValorOp)
								If !lCalcImp
									//Verifica se ha algum "cosa mueble" com valor unitario acima do minimo
									lCalcImp := (Ascan(_aValItem_,{|valor| valor[2] .And. (valor[3] > _nValorUn)}) > 0)
								Endif
							Endif
						Endif
						If lCalcImp .And. (nBase > _nValorMin)
							//Si aplica RG ATER 319-16
							If CCO->(ColumnPos("CCO_TPLIMP")) > 0 .And. CCO->CCO_TPLIMP == "2" .And. _nValorOp > 0 .And. MaFisRet(,"NF_OPERNF") == "S" .And. MaFisRet(,"NF_CLIFOR") == "C" .And. (AllTrim(cEspecie) == "NF" .Or. AllTrim(cEspecie) == "NDC" .Or. AllTrim(cEspecie) == "NDE" .Or. AllTrim(cEspecie) == "NCE")  
								aBaseAc := PerAcum(aInfo[1], aInfo[2], _nValorOp, nBase, .T.)
								If _nAlicDesg > 0
									xRet := Round(aBaseAc[1][1] * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
									xRet := xRet - ((xRet * _nAlicDesg) / 100)
								Else
									xRet := Round(aBaseAc[1][1] * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
								EndIf
								If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] != 0 
									xRet -= aBaseAc[1][2]
								EndIf
							Else
								If _nAlicDesg > 0
									xRet := Round(nBase * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
									xRet := xRet - ((xRet *_nAlicDesg) / 100)
								Else
									If lExisteNF
										xRet := Round(nBase * (_nAlicuota / 100),MsDecimais(_nMoeda))
									Else
										xRet := Round(nBase * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
									Endif
								EndIf
							EndIf
						Endif
				Endcase
			Endif
		Endif
	ENDIF

	If lXFis .and. cCalculo == "V" .and. _lCalcular // Minimos
		If cPaisLoc == "ARG" .And. _nReducir <> 0 
			If lExisteNF
				basTot	:= MaRetBasT(aInfo[2],,_nAlicuota)
			Else
				basTot	:= MaRetBasT(aInfo[2],,_nAlicuota * _nReducir)
			Endif
		Else
			basTot	:= MaRetBasT(aInfo[2],,_nAlicuota)
		Endif
		xRet	:= CCOMinB2(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
	//Cambios para considerar minimos desde Generacion de Factura automatica
	ElseIf !lXfis .and. _lCalcular
		xRet[4] :=  CCOMinB2(_nValorMin,lMinIb,xRet[3],xRet[4],xRet[20],nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
	EndIf
	dbSelectArea( cAliasRot )
	dbSetOrder( cOrdemRot )

	// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> __Return( aImposto )
Return( xRet )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99


Static Function M460VLNC(cTipo,cAlias,cProv,nItem)
Local nBaseAbt  := 0
Local nx        := 1
Local aNFEDev   := {}
Local nPos      := 0
Local lVeriPrv  := .F.
Local aAreaAtu  := {}
Local cTipCalc  := "0"
Local lDesc     := .T.
Local aAreaSF   := {}
Local aAliasSD1 := SD1->(GetArea())
Local aAliasSD2 := SD2->(GetArea())
Local cAliasSD  := ""
Local lRemito   := .F.
Local lIsRemito := .F.
Local cDocRem   := ""
Local cSerRem   := ""
Local cDocFacR  := ""
Local cSerFacR  := ""

Default cTipo  := ""
Default cAlias := ""
Default cProv  := ""
Default nItem  := 1

If AliasInDic("CCO")
	aAreaAtu:=GetArea()
	CCO->(DbSetOrder(1)) //CCO_FILIAL+CCO_CODPRO
	If CCO->(MsSeek(xFilial("CCO") + cProv) )  .And. !(CCO->CCO_CPERNC $ " 1")
		lVeriPrv:=.T.
		cTipCalc := CCO->CCO_CPERNC
	EndIf   
	RestArea(aAreaAtu)
EndIf
	    
aAreaSF:= IIF(cAlias== "SF2",SF1->(GetArea()),SF2->(GetArea()))
If  Type("aCols")=="A" .And. lVeriPrv
	If !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO")) .And. !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM"))
		lIsRemito := .T.
		cAliasSD := IIF(cAlias=="SF2","D2","D1")
		DBSelectArea("S" + cAliasSD)
		("S" + cAliasSD)->(DBSetOrder(IIF(cAliasSD == "D1",2,3))) //D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA o D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM
		//Si existe el Remito de Devolución
		If MsSeek(IIF(cAliasSD == "D1",xFilial("SD1")+GetValorCl("D1_COD")+GetValorCl("D1_REMITO")+GetValorCl("D1_SERIREM")+M->F1_FORNECE+M->F1_LOJA,;
			xFilial("SD2")+GetValorCl("D2_REMITO")+GetValorCl("D2_SERIREM")+M->F2_CLIENTE+M->F2_LOJA+GetValorCl("D2_COD")+GetValorCl("D2_ITEM")))

			//Si existe el Remito de venta
			DBSelectArea("S" + IIF(cAliasSD == "D1","D2","D1"))
			("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",3,2))) //D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM o D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
			If MsSeek(IIF(cAliasSD == "D1",xFilial("SD2")+SD1->D1_NFORI+SD1->D1_SERIORI+M->F1_FORNECE+M->F1_LOJA+SD1->D1_COD,;
				xFilial("SD1")+SD2->D2_COD+SD2->D2_NFORI+SD2->D2_SERIORI+M->F2_CLIENTE+M->F2_LOJA))

				//Si existe una factura
				cDocRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
				cSerRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")

				("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",17,21)))//D2_FILIAL+D2_SERIREM+D2_REMITO o D1_FILIAL+D1_SERIREM+D1_REMITO

				If MsSeek(xFilial("S" + IIF(cAliasSD == "D1","D2","D1"))+ cSerRem + cDocRem)
					//Si encontro los datos de la factura, guarda doc y serie y pone la bandera de encontrado en .T.
					lRemito := .T.
					cDocFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
					cSerFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")
				EndIf
			EndIf
		EndIf
	EndIf

	If Type("aValFact")=="A" .And. Len(aValFact) > 0
		aNFEDev := aValFact
	Else
		For nx:= 1 to Len(aCols)
			If !(aCols[nx][Len(aCols[nx])])
				//Si es un remito y se encontro la factura ligada.
				If lIsRemito .And. lRemito
					nPos:=aScan(aNFEDev,{|x|x[3]==GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
					If nPos >0
						aNFEDev[nPos][2]:= aNFEDev[nPos][2]+MaFisRet(nX,"IT_VALMERC")
					Else
						Aadd(aNFEDev,{cDocFacR+cSerFacR,MaFisRet(nX,"IT_VALMERC"),GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
					EndIf
				Else
					If Iif(cTipo == "NCP" .and. IsInCallStack("lxn466forf6"), nX <= nItem ,.T.)
		   				nPos:=aScan(aNFEDev,{|x|x[1]==MaFisRet(nx,"IT_NFORI")+MaFisRet(nx,"IT_SERORI")} )
		   		 		If nPos >0  
		    				aNFEDev[nPos][2]:= aNFEDev[nPos][2]+MaFisRet(nX,"IT_VALMERC")
			   			Else
			    			Aadd(aNFEDev,{MaFisRet(nX,"IT_NFORI")+MaFisRet(nX,"IT_SERORI"),MaFisRet(nX,"IT_VALMERC")})
		   	 			EndIf
		   	 		EndIf
	       		EndIf
			EndIf
		Next
	EndIf
					
	For nX:=1 to Len(aNFEDev)
		If cAlias== "SF2
			cColLiv:="SF1->F1_BASIMP"+aInfo[2]
			SF1->(DBSetOrder(1))//F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA
			If SF1->(MsSeek(xFilial("SF1")+ aNFEDev[nX][1] +M->F2_CLIENTE+M->F2_LOJA,.F.)) 
				If cTipCalc== "2" .And. aNFEDev[nX][2] == SF1->F1_VALMERC
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO) == Year(SF1->F1_EMISSAO) ;
				                      .And.  aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8".And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO);
					.And.  aNFEDev[nX][2] == &(cColLiv)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf
		ElseIf cAlias== "SF1
			cColLiv:="SF2->F2_BASIMP"+aInfo[2]
			SF2->(DBSetOrder(1))//F2_FILIAL+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA
			If SF2->(MsSeek(xFilial("SF2")+ aNFEDev[nX][1] +M->F1_FORNECE+M->F1_LOJA,.F.)) 
				If (cTipCalc== "2" .And. aNFEDev[nX][2] == SF2->F2_VALMERC) 
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO) == Year(SF2->F2_EMISSAO);
				                      .And.  aNFEDev[nX][2] == SF2->F2_VALMERC 
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO);
					.And.  aNFEDev[nX][2] == &(cColLiv)
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt := nBaseAbt +aNFEDev[nX][2]
			EndIf	
		EndIf	
	Next  
EndIf
RestArea(aAreaSF)
SD1->(RestArea(aAliasSD1))
SD2->(RestArea(aAliasSD2))
Return(nBaseAbt)


static Function GetValorCl(cCampo,nX)

Default nX := 1

If type ("oGetDados:oBrowse:nAt") <> "U"
	nX := oGetDados:oBrowse:nAt
EndIf

Return aCols[nX,GdFieldPos(cCampo, aHeader)]
