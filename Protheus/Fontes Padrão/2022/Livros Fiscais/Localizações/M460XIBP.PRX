#include "SIGAWIN.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#include "protheus.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#INCLUDE "TOPCONN.CH"   

#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _IMPINCID  10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _IMPCALIM 17
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _ALIQDESG  19
#DEFINE _CCOFILIAL 1
#DEFINE _CCOCODPRO 2
#DEFINE _CCOPERNC  3
#DEFINE _CCOCRFPER 4
#DEFINE _CCOIMPPER 5
#DEFINE _CCOIMMINP 6
#DEFINE _CCOTPMINP 7
#DEFINE _FCFILIAL  1
#DEFINE _FCTES     2
#DEFINE _FCIMPOSTO 3
#DEFINE _FCPROV    4
#DEFINE _FCCALCULO 5
#DEFINE _FCINCIMP  6
#DEFINE _FCLIQUIDO 7
#DEFINE _FCSUMATIT 8
#DEFINE _FCSUMATOT 9
#DEFINE _FHFILIAL  1
#DEFINE _CLIPROV   2
#DEFINE _FHFORCLI  3 //FH_FORNECE/FH_CLIENTE
#DEFINE _FHLOJA    4
#DEFINE _FHIMPOSTO 5
#DEFINE _FHZONFIS  6
#DEFINE _FHALIQ    7
#DEFINE _FHCOEFMUL 8

//Static aFiscal

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ M460xIBP ³ Autor ³ Jose Luis Otermin     ³ Data ³ 21.07.99 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa que Calcula Percepcion de Ing.Brutos misma ZFiscal³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ M460xIBP(void)                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA100, llamado por un punto de entrada                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ-Ä-ÂÄÄÄÄÄÄÄÄ-ÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ FECHA    ³   BOPS   ³  MOTIVO DE LA ALTERACION         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Emanuel VV    ³20/05/2014³ TIWWW    ³ Base y Minimo obtenido segun el  ³±±
±±³              ³          ³          ³ llamado TIWWW solo funciona      ³±±
±±³              ³          ³          ³ cuando esta creado el campo      ³±±
±±³              ³          ³          ³ CCO_IMMINP y MV_IBMIN == .T.     ³±±
±±³L Samaniego   ³18/07/2014³ TPLGBS   ³ Establecer importe maximo para   ³±±
±±³              ³          ³          ³ calculo de percepciones de IIBB -³±±
±±³              ³          ³          ³ Para Rio Negro. Solo si existe   ³±±
±±³              ³          ³          ³ el campo CCO_IMPPER              ³±±
±±³Dora Vega     ³07/02/2017³ MMI-178  ³ Se realizan ajustes a la busqueda³±±
±±³              ³          ³          ³ de un remito de devolucion       ³±±
±±³              ³          ³          ³ relacionado a un remito de venta.³±±
±±³              ³          ³          ³ Cambios en funcion M460xibp(ARG) ³±±
±±³Dora Vega     ³09/02/2017³ MMI-237  ³ Se realizan ajustes para         ³±±
±±³              ³          ³          ³ considerar minimos desde         ³±±
±±³              ³          ³          ³ Generacion de Factura automatica.³±±
±±³              ³          ³          ³ Cambios en funcion M460xibp(ARG) ³±±
±±³Dora Vega     ³24/03/2017³ MMI-4705 ³Merge de replica de issue MMI-4653³±±
±±³              ³          ³          ³Se agrega en la busqueda el indice³±±
±±³              ³          ³          ³ correcto en la tabla SFC.(ARG)   ³±±
±±³M.Camargo     ³07/04/2017³ MMI-180  ³ ARG Se realizan ajustes para     ³±±
±±³              ³          ³          ³ realizar una nota de crédito sin ³±±
±±³              ³          ³          ³ estar ligada a una factura.      ³±±
±±³Raul Ortiz    ³18/04/2017³ MMI-298  ³ Se realizan ajustes para         ³±±
±±³              ³          ³          ³ calcular al cambio de fecha      ³±±
±±³Raul Ortiz M. ³22/09/17  ³DMICNS-166³Se agrega validación cuando en la ³±±
±±³              ³          ³          ³TES se configura un Impuesto INC. ³±±
±±³              ³          ³          ³y se agregan descuentos           ³±±
±±³Raul Ortiz M  ³13/12/2017³DMICNS-626³Se agrega validación cuando en la ³±±
±±³              ³          ³          ³ TES se configura un Impuesto INC.³±±
±±³              ³          ³          ³ y en el documento se agrega      ³±±
±±³              ³          ³          ³ descuentos - Argentina           ³±±
±±³Raúl Ortiz    ³04/01/2018³DMICNS-754³Se posiciona correctamente el     ³±±
±±³              ³          ³          ³coeficiente de Tucuman por Factura³±±
±±³              ³          ³          ³ Automatica - Argentina           ³±±
±±³Raul Ortiz    ³11/01/2018³DMICNS-973³Se agrega validacion cuando el    ³±±
±±³              ³          ³          ³nCoefRPer es mayor a 0 - Argentina³±±
±±³Raul Ortiz    ³28/02/2018³ DMICNS-  ³ Se modifica la valicación de mi- ³±±
±±³              ³          ³ 1161     ³ nimos para cuando la moneda es   ³±±
±±³              ³          ³          ³ diferente a 1 - Argentina        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄ-Ä-ÁÄÄÄÄÄÄÄÄÄ-ÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function M460xibp(cCalculo,nItem,aInfo,cXFisRap)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local lXFis,xRet,nOrdSFC,nRegSFC
Local aBaseAc := {}
Local cImpIncid	:= ''
Local cIncIB	:= ''
Local aImpRef	:= {}
Local aImpVal	:= {}
Local nI		:= 0
Local nTotAnt	:= 0
Local nItemNF	:= 0
Local nTxMoeda := Iif(Type("nTaxamoeda") <> "U", nTaxamoeda, 1)
Local nPos		:= 0
Local _nMoeda	:= 1
Local lFindSFC	:= .F.
Local lCalcImp	:= .T.
Local cCalcImp  := ""      
Local nx		:= 1 
local aNFEDev	:= {}
Local nBaseAb	:= 0 
Local aBase		:= {}
Local aInfoImp	:= {}
Local nSumItem	:= 0
Local nCount	:= 0
Local cAlias	:= IIf(Type("M->F1_FORNECE")=="C" ,"SF1",Iif (Type("M->F2_CLIENTE")=="C","SF2",""))
Local cTipo 	:= Iif(cAlias=="SF1",M->F1_ESPECIE,Iif(cAlias=="SF2",M->F2_ESPECIE,""))
Local cTipoInsc := SA1->A1_TIPO
Local lMinIb    := SuperGetMV("MV_IBMIN",.T.,.F.)
Local aALiasSFC := SFC->(Getarea())
Local cCod      := " "
Local cLoja     := " "
Local cPesq     := " "
Local aAreaSFF  := {}
Local aAreaSFH  := {}
Local nAliqSFH  := 0
Local nAliqSFF  := 0
Local nOrdeSFH  := 0
Local nCoefSFH  := 0
Local cLlave    := ""
Local lCalIb    := .T.
Local nBase     := 0
Local lMinCFO   := .F.
Local cZonCCO   := ""
Local lCalcTot  := .F.
Local nCoefRPer := 0
Local cRadic    := ""
Local nIvaTU    := 0
Local nAliqTmp  := 0
Local nPosCCO   := 0
Local nPosSFC   := 0
Local nPosSFF   := 0
Local nPosSFH   := 0
Local cPesqCCO  := " "
Local cPesqSFC  := " "
Local cPesqSFF  := " "
Local cPesqSFH  := " "
Local lImpCCO   := .F.
Local nDocOri   := 0
Local lImpSFC   := .F.
Local lImpSFH   := .F.
Local nBaseAc   := 0
Local _cTSFisAux := ""
Local dDtProc  := Ctod("//")
Local nBAseCalc:= 0
Local nAliqAux	:= 0
Local nBaseAux	:= 0
Local nRedTU	:= 0
Local nRedBase 	:= 0 
Local nAliqFH	:= 0 
Local lExisteNF := .F.
Local aAreaSF1  := {}
Local nImpTU := 0
Local nBaseIBK := 0
Local nBasIBK := 0
Local nAlqIBK := 0
Local nValIBK := 0
Local nPosBasIBK   := 0
Local nPosAlqIBK   := 0
Local nPosValIBK   := 0
Local nBase1       := 0

Static lAntCal 	:= .T.
Static aMPer	:= {}
Static lPrimera := .F.
Static aPriStafe:= {0,.F.,0,0} // Acumulado, Primera vez, Item, base Item 
Static lIniArray := .F.

Private _nValorOp := 0
Private _nValorUn := 0
Private _cItem    := ""
Private _nItem 	  := 1      
Private _cZFiscTU := ""

SetPrvt("CALIASROT,CORDEMROT,AITEMINFO,AIMPOSTO,_CPROCNAME,_CZONCLSIGA")
SetPrvt("_LAGENTE,AFISCAL,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NVALORMIN,_NALICDESG,_cTSFiscal")
SetPrvt("_NREDUCIR,")

Default cXFisRap := ""

If Type("aRG1316") <> "U"
	If SF3->(ColumnPos("F3_RG1316")) > 0 .and. len(aRG1316) < nItem 
		Aadd(aRG1316,{})
	EndIf
EndIf

/*/
//-----------------------------------------------------
// Nota:
// Debe registrarse al Cliente en la Tabla SFH en caso
// que sea Agente de Percepcion o este Exento en una ZF.
// Se utiliza el parametro MV_AGENTE
// Significado de las posiciones de MV_AGENTE
// SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
// SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
// SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
// SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
// SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
//-----------------------------------------------------
// Nota:
// Debe utilizarse el parametro MV_EXENTO
// Significado de las posiciones de MV_EXENTO
// SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
// SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
// SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
// SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
// SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
//-----------------------------------------------------
/*/

lXfis:=(MaFisFound()  .And. ProcName(1)<>"EXECBLOCK")
cAliasRot  := Alias()
cOrdemRot  := IndexOrd()

If !lXFis
	aItemINFO  := ParamIxb[1]
	aImposto   := ParamIxb[2]
	nItemNF	   := ParamIxb[3]
	xRet:=aImposto
	nOrdeSFH	:= 3 //FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
Else
	xRet:=0
Endif

_cProcName := "M460xIBP"
_cZonClSIGA:= IIf(cPaisLoc == "ARG", IIf(lXFis, MaFisRet(nItem, "IT_PROVENT"), aItemINFO[7]), SM0->M0_ESTENT) // Zona Fiscal del Cliente SIGA

If Type("aInfo")=="A" .And. Len(aInfo)>0
	cCalcImp := aInfo[1]
Else
	cCalcImp := aImposto[1]
Endif

_lAgente   := (SUBSTR(GETMV("MV_AGENTE"),5,1)=="S") //  Agente Percepcion IB?

nPos := 0
nPosCCO := 0
nPosSFC := 0
nPosSFH := 0
lArrayIb:= Type("aImpIB2") <> "U"
lImpCCO	:= Type("aImpCCO") <> "U"
lImpSFC	:= Type("aImpSFC") <> "U"
lImpSFH	:= Type("aImpSFH") <> "U"

cEspecie:=IIF(Type("cEspecie")=="C",cEspecie,"NF")
If cAlias== "SF2"
	cCod:=	M->F2_CLIENTE
	cLoja:=	M->F2_LOJA
ElseIf cAlias== "SF1"
	cCod:=	M->F1_FORNECE
	cLoja:=	M->F1_LOJA
EndIf

If cEspecie $ "NDI|NCP"
	nOrdeSFH	:= 1 //FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
	cRadic := SA2->A2_EST
Else
	nOrdeSFH	:= 3 //FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
	cRadic := SA1->A1_EST
EndIf

IF lXFis .And. (Alltrim(cCod)=="" .OR. Alltrim(cLoja)=="")
	cCod:=	MaFisRet(,"NF_CODCLIFOR" )
	cLoja:=	MaFisRet(,"NF_LOJA" )
	nOrdeSFH	:= 3 //FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
//Si es por rutina automatica y no hay datos de loja y cod y se esta generando una factura desde un remito con calculo de IIBB para Tucuman. 
ElseIf !lXFis .And. cPaisLoc == "ARG" .And. (Empty(cCod) .Or. Empty(cLoja)) .And. FunName() == "MATA468N" .AND. cCalcImp == "IB4"
	cCod :=	SA1->A1_COD
	cLoja :=	SA1->A1_LOJA
EndIf

If cTipo $ ("NCC|NCP")
	If !Empty(MaFisRet(nx,"IT_NFORI")) .and. !Empty(MaFisRet(nx,"IT_SERORI"))
		aAreaSF1 := SF1->(GetArea())
		DbSelectArea("SF1")
		SF1->(DBSetOrder(1))//F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA
		If SF1->(MsSeek(xFilial("SF1")+ MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI") +M->F2_CLIENTE+M->F2_LOJA,.F.))
			lExisteNF := .T.
		Endif
		SF1->(RestArea(aAreaSF1))
	Endif	
Endif
If Upper(FunName()) == "FISA828"
	If Type("M->NJC_CODPRO")=="C" .And. !Empty(M->NJC_CODPRO) .And. Type("M->NJC_TIENDA")=="C" .And. !Empty(M->NJC_TIENDA)
		cCod		:=	M->NJC_CODPRO
		cLoja		:=	M->NJC_TIENDA
		nOrdeSFH	:= 3	
	EndIf
	
	If Type("M->NJC_VENDED")=="C" .And. !Empty(M->NJC_VENDED) .And. Type("M->NJC_LOJAVE")=="C" .And. !Empty(M->NJC_LOJAVE)
		cCod		:=	M->NJC_VENDED
		cLoja 		:=	M->NJC_LOJAVE	
		nOrdeSFH	:= 1
	EndIf
Endif
 
If lXFis .And. lArrayIb
	cPesq:=xFilial("SF4")+MaFisRet(nItem,"IT_TES")+MaFisRet(nItem,"IT_CF")+MaFisRet(,"NF_CLIFOR" )+cCod+cLoja+MaFisRet(,"NF_PROVENT")+MaFisRet(nItem,"IT_PROVENT")+aInfo[1]+IIf (Type("dDEmissao")=="D",AllTrim(STR(Month(dDEmissao))) + AllTrim(STR(Year(dDEmissao))), AllTrim(STR(Month(dDataBase))) + AllTrim(STR(Year(dDataBase))))+SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)
	nPos:=Ascan(aImpIB2,{|item| item[1] == cPesq})
EndIf                                                                                                   

If nPos == 0
	aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{If(lXFis,{cCalculo,nItem,aInfo},ParamIxb), _cProcName, _lAgente,_cZonClSIGA,lXFis,cXFisRap},.T.)
	If lArrayIb
		If nPos == 0
			Aadd(aImpIB2,{cPesq,aFiscal})
		Else
			aImpIB2[nPos][2] := aFiscal
		EndIf
	EndIf
Else
	aFiscal:=aImpIB2[nPos][2]
	If len(aFiscal)>13
		CCO->(MsSeek(xFilial("CCO")+aFiscal[14]))
	EndIf
Endif

For nI := Len(aFiscal)+1 To 10
	Aadd(aFiscal,0)
Next

_cItem     := ""
_nValorOp  := 0
_nValorUn  := 0
_lCalcular :=  aFiscal[1]
_lEsLegal  :=  aFiscal[2]
_nAlicuota :=  aFiscal[3]
_nValorMin :=  Iif(lXfis,xMoeda(aFiscal[4],1,MaFisRet(,"NF_MOEDA"),,,,MaFisRet(,"NF_TXMOEDA")),xMoeda(aFiscal[4],1,_nMoeda,,,,nTxMoeda))
_nReducir  :=  aFiscal[5]
cIncIB     :=  aFiscal[6]
_nMoeda    :=  aFiscal[7]
_cItem     := aFiscal[08]
_nValorOp  := aFiscal[09]
_nValorUn  := aFiscal[10]
_nAlicDesg := aFiscal[11]
_cTSFiscal := aFiscal[12]
_cCFO      := Iif(len(aFiscal)>12,aFiscal[13],"")       
_cZFiscTU  := Iif(len(aFiscal)>13,aFiscal[14],_cTSFiscal)

If cPaisLoc == "ARG" .And. Len(aFiscal)>=12
	cTipoInsc :=  aFiscal[12]		
EndIf	

If lXFis
	If lImpSFC
		cPesqSFC := xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1]
		nPosSFC  := Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
	EndIf
	If nPosSFC == 0
		SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
		If (SFC->(MsSeek( xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1] )))
			If !Empty(Alltrim(SFC->FC_PROV))
				cZonCCO  := SFC->FC_PROV
				lCalcTot := IIF(SFC->FC_CALCULO=="T",.T.,.F.)
			Endif 
		EndIf
		If lImpSFC
			AADD(aImpSFC,{SFC->FC_FILIAL,SFC->FC_TES,SFC->FC_IMPOSTO,SFC->FC_PROV,SFC->FC_CALCULO,SFC->FC_INCIMP,SFC->FC_LIQUIDO,SFC->FC_INCDUPL,SFC->FC_INCNOTA})
		EndIf
	Else
		cZonCCO  := aImpSFC[nPosSFC][_FCPROV]
		lCalcTot := IIF(aImpSFC[nPosSFC][_FCCALCULO]=="T",.T.,.F.)
	EndIf

	If lImpCCO
		cPesqCCO := xFilial("CCO") + cZonCCO
		nPosCCO  := Ascan(aImpCCO,{|item| item[_CCOFILIAL] + item[_CCOCODPRO] == cPesqCCO})
	EndIf
EndIf

If lImpSFC .and. SF3->(ColumnPos("F3_RG1316")) > 0 .and.  Type("aRG1316") <> "U"
	nPosSFC2 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
	IF SA2->A2_TIPROV <> Nil
		If (FunName() == "MATA466N" .AND. SA2->A2_TIPROV == "A"  .AND. aFiscal[15] .AND. aFiscal[16] .AND. aFiscal[17];
			 .and. aImpSFC[nPosSFC2][_FCSUMATIT] == "1" .and. aImpSFC[nPosSFC2][_FCSUMATOT] == "1";
			 .and. aImpSFC[nPosSFC2][_FCCALCULO] == "T" .and. aImpSFC[nPosSFC2][_FCLIQUIDO] =="N";
			 .and. CZONCCO == _cZonClSIGA)
			If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
				_nAlicuota :=  _nAlicuota * CCO->CCO_COESIR 
				If _nAlicuota <> 0
					_lCalcular := .T.
					_lEsLegal  := .T. 
					cRG1316 := "S"
				EndIf	
			EndIf
		EndIf
	EndIf
EndIf

If cTipo $ ("NCC|NCP")
	DbSelectArea("CCO")
	DbSetOrder(1) //CCO_FILIAL+CCO_CODPRO
	If CCO->(MsSeek(xFilial("CCO")+cZonCCO))
		If !(CCO->CCO_CPERNC $ "1|6") .and. !lExisteNF
			_lCalcular := .F.
		ElseIf (CCO->CCO_CPERNC=="5")
			_lCalcular := .F.
		Endif
	EndIf
EndIf

IF _lCalcular  .AND. _lEsLegal 
	If (cPaisLoc == "ARG" .and. (lMinIb == .T. .and. lMinCFO) .and. _nValorMin = 0) ;
		   .and. (!Empty(CCO->CCO_TPMINP) .or. CCO->CCO_TPMINP $ "1|2")
		If lPrimera == .F. .and. lXFis
			lAntCal := .T.
			nBasMin := MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			nBasMin -= MaFisRet(nItem,"IT_DESCONTO")
			aMPer := MinPerIIBB(1,{nItem,aInfo[1],aFiscal[13],nBasMin,_nValorMin,_nAlicuota},aInfo[2],cCalculo,@lAntCal)
			lPrimera := .T.
		ElseIf !lXFis  
			nBasMin := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Calculo
			aImposto[_ALIQUOTA]  := _nAlicuota // Alicuota de Zona Fiscal del Proveedor
			aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
		Endif 
			
		If lXFis
			Do Case
			Case aMPer[1][3]== .F. .and. cCalculo=="B"
				xRet := {0,0,0}
			Case aMPer[1][3]== .F. 
				xRet := 0
			Case cCalculo=="A"
				xRet := iif(aMPer[1][3]== .T. .and. aMPer[1][1] <> 0,_nAlicuota,0) 
			Case cCalculo=="B"  .and. !Empty(cXFisRap)				
				xRet := {0,0,0}
				xRet[1] := iif(aMPer[1][3]== .T. .and. aMPer[1][1] <> 0,nBasMin,0) 
				xRet[2] := iif(aMPer[1][3]== .T. .and. aMPer[1][1] <> 0,_nAlicuota,0)
			Case cCalculo=="V"
				xRet := aMPer[1][1]
			Endcase
		Else 
			Do Case
			Case cCalculo=="B"
				xRet := {nBasMin,_nAlicuota,0}
			Case cCalculo=="A"
				IF _nReducir <> 0 .And. cPaisLoc == "ARG" .And. cCalculo == "A"  .And. "IB" $ cCalcImp  .AND. _cZFiscTU <> "TU"
					xRet := _nAlicuota * _nReducir
				Else
					xRet := _nAlicuota
				Endif
			Case cCalculo=="V"
				xRet := aImposto[_IMPUESTO]
			Endcase
		Endif 
	Endif 

	If !lXFis .and. lAntCal == .T. .and. cPaisLoc == "ARG" .AND. cCalcImp == "IB4" .AND. _cTSFiscal == "N"
		aImposto[_ALIQUOTA]  := _nAlicuota // Alicuota de Zona Fiscal del Proveedor
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
	
		//Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
		//+---------------------------------------------------------------+
		//¦ Suma a la base el impuesto IVA para no inscriptos             ¦
		//+---------------------------------------------------------------+
		
		aImposto[_IMPINCID] := cIncIB

		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif

		aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))                                                          	
		xRet:=aImposto

	ElseIf !lXFis .and. lAntCal == .T. .and. cPaisLoc == "ARG" .AND. cCalcImp == "IB4" .AND. _cTSFiscal == "V" 
		If !Empty(Alltrim(SFC->FC_PROV)) .AND. funname() $ "MATA468N|MATA461"
			cZonCCO := SFC->FC_PROV
			lCalcTot := IIF(SFC->FC_CALCULO=="T",.T.,.F.)
			cCod:=	SA1->A1_COD
			cLoja := SA1->A1_LOJA
		Endif
		
		nCoefRPer := POSICIONE("CCO",1,xFilial("CCO")+cZonCCO,"CCO_CRFPER")
		aAreaSFF	:= SFF->(Getarea())
		SFF->(DbSetOrder(12))   //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS
		
		IF SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + "*" ,.F.))
			nAliqSFF := SFF->FF_ALIQ
		Elseif SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal ,.F.))
			nAliqSFF := SFF->FF_ALIQ
		Endif
		SFF->(RestArea(aAreaSFF))		

		aAreaSFH	:= SFH->(Getarea())
		SFH->(DbSetOrder(nOrdeSFH)) 
		cLlave := xFilial("SFH") + cCod + cLoja + "IB4" + _cZFiscTU 
		If SFH->(MsSeek( cLlave ))
			While!(SFH->(Eof())) .and. ; 
				iif (nOrdeSFH = 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
                               SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
				If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()    
					nAliqSFH := SFH->FH_ALIQ
					nCoefSFH := SFH->FH_COEFMUL
					exit  
				Endif 
				SFH->(DbSkip())
			EndDo 
		Endif
		SFH->(RestArea(aAreaSFH))		
		
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
		aImposto[_ALIQUOTA]  := nAliqSFF
		
		If nAliqSFH <> 0
			aImposto[_ALIQUOTA]:= nAliqSFH
		ElseIf nAliqSFF <> 0
			aImposto[_ALIQUOTA]:= nAliqSFF
		EndIf 
		
		//+---------------------------------------------------------------+
		//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
		//+---------------------------------------------------------Lucas-+
		aImposto[_IMPINCID]:=cIncIB
		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif
		//Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
				 
		If aImposto[_BASECALC] > _nValorMin
			aImposto[_ALIQUOTA] := aImposto[_ALIQUOTA] * _nReducir
			If SM0->M0_ESTENT <> "TU"
				If cRadic == "TU"			
					If nAliqSFH <> 0 
						aImposto[_IMPUESTO]:= Round(aImposto[_BASECALC] * ( nAliqSFH/100) * _nReducir,MsDecimais(_nMoeda))				
					Else	
						aImposto[_IMPUESTO]:= Round(aImposto[_BASECALC] * ( nAliqSFF/100) * _nReducir,MsDecimais(_nMoeda))				
					EndIf				
				ElseIf cRadic <> "TU"
					If nAliqSFH <> 0
						aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFH/100) * _nReducir *(Iif((Type("lNoRed") <> "U" .and. lNoRed),IIf(nCoefSFH <> 0,nCoefSFH,1),1)),MsDecimais(_nMoeda))
					Else
						aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFF/100) * _nReducir *(Iif((Type("lNoRed") <> "U" .and. lNoRed),IIf(nCoefSFH <> 0,nCoefSFH,1),1)),MsDecimais(_nMoeda))
					Endif	
					IF (Type("lNoRed") <> "U" .and. lNoRed)
						aImposto[_BASECALC] := Round(IIf(nCoefSFH <> 0,nCoefSFH,1)*aImposto[_BASECALC],MsDecimais(_nMoeda))
					ENDIF								
				Endif
			Else
				If cRadic == "TU"
					aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) ,MsDecimais(_nMoeda))
				ElseIf cRadic <> "TU"
					If nAliqSFH <> 0
						aImposto[_ALIQUOTA] := nAliqSFF * nAliqSFH * _nReducir
						If nCoefSFH<> 0
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * Iif((Type("lNoRed") <> "U" .and. lNoRed), nCoefSFH, 1) * (nAliqSFH / 100) * ( nAliqSFF/100) * _nReducir ,MsDecimais(_nMoeda))	
							IF (Type("lNoRed") <> "U" .and. lNoRed)
								aImposto[_BASECALC] := Round(nCoefSFH * aImposto[_BASECALC],MsDecimais(_nMoeda))
							ENDIF
						ElseIf nCoefRPer <> 0 //rom
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFH / 100) * ( ( nAliqSFF/100) *  Iif((Type("lNoRed") <> "U" .and. lNoRed), nCoefRPer, 1)) * _nReducir ,MsDecimais(_nMoeda))
						  	IF (Type("lNoRed") <> "U" .and. lNoRed)
						  		aImposto[_BASECALC] := Round(nCoefRPer * aImposto[_BASECALC],MsDecimais(_nMoeda))
							ENDIF
						Else 
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFH / 100) * ( nAliqSFF/100) * _nReducir ,MsDecimais(_nMoeda))
						Endif
					Else
						If  nCoefSFH<> 0
							If nCoefRPer <> 0
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * Iif((Type("lNoRed") <> "U" .and. lNoRed), nCoefSFH, 1) * ( ( aImposto[_ALIQUOTA]/100) * Iif((Type("lNoRed") <> "U" .and. lNoRed), nCoefRPer, 1))  ,MsDecimais(_nMoeda))
								IF (Type("lNoRed") <> "U" .and. !lNoRed)
									aImposto[_BASECALC] := Round(nCoefRPer*aImposto[_BASECALC]*nCoefSFH,MsDecimais(_nMoeda))
								ENDIF
							Else
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * Iif((Type("lNoRed") <> "U" .and. lNoRed), nCoefSFH, 1) * ( aImposto[_ALIQUOTA]/100)  ,MsDecimais(_nMoeda))
								IF (Type("lNoRed") <> "U" .and. lNoRed)
									aImposto[_BASECALC] := Round(aImposto[_BASECALC]*nCoefSFH,MsDecimais(_nMoeda))
								ENDIF
							EndIf
						Else
							If nCoefRPer <> 0
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( ( aImposto[_ALIQUOTA]/100) * Iif((Type("lNoRed") <> "U" .and. lNoRed), nCoefRPer, 1))  ,MsDecimais(_nMoeda))
								IF (Type("lNoRed") <> "U" .and. lNoRed)
									aImposto[_BASECALC] := Round(nCoefRPer*aImposto[_BASECALC],MsDecimais(_nMoeda))
								ENDIF
							Else
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100)  ,MsDecimais(_nMoeda))
							EndIf
						EndIf
					Endif
				Endif
			EndIf  	
		EndIf
		xRet:=aImposto
	ElseIf !lXFis .and. lAntCal == .T.

		IF cCalcImp <> "IB4" .and. _cZFiscTU <> "TU"
			If !Empty(Alltrim(SFC->FC_PROV)) .AND. funname() $ "MATA468N|MATA461"
				cCod:=	SA1->A1_COD
				cLoja := SA1->A1_LOJA
			Endif
			aAreaSFH	:= SFH->(Getarea())
			SFH->(DbSetOrder(nOrdeSFH)) 
			cLlave := xFilial("SFH") + cCod + cLoja + cCalcImp + _cZFiscTU
			If SFH->(MsSeek( cLlave ))
				While!(SFH->(Eof())) .and. ; 
					iif (nOrdeSFH == 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
								SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
					If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()    
						nCoefSFH := SFH->FH_COEFMUL
						exit  
					Endif 
					SFH->(DbSkip())
				EndDo 
			Endif
			SFH->(RestArea(aAreaSFH))
		EndIF

		lCalcImp := .T.
		If _nReducir <> 0
			aImposto[_ALIQUOTA]  := _nAlicuota * _nReducir// Alicuota de Zona Fiscal del Proveedor
		Else
			aImposto[_ALIQUOTA]  := _nAlicuota
		Endif
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
		aImposto[_ALIQDESG]  := _nAlicDesg

		//+---------------------------------------------------------------+
		//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
		//+---------------------------------------------------------Lucas-+
		aImposto[_IMPINCID]:=cIncIB

		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif
		
		//Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
		
		IF _cTSFiscal == "V" .And. cPaisLoc == "ARG" .And. "IB" $ cCalcImp   .AND. _cZFiscTU <> "TU"
			aAreaSFF := SFF->(GetArea())
			DBSelectArea("SFF")
			SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
			IF SFF->(MsSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
				If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100 // Posiciono na SFF para armazenar a base reduzida e aliquota
					nRedBase := SFF->FF_REDBASE
				EndIF
			EndIF
			SFF->(RestArea(aAreaSFF))

			aAreaSFH	:= SFH->(Getarea())
			SFH->(DbSetOrder(nOrdeSFH)) 
			cLlave := xFilial("SFH") + cCod + cLoja + cCalcImp + _cZFiscTU
			If SFH->(MsSeek( cLlave ))
				While!(SFH->(Eof())) .and. SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave
					If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()    
						nAliqFH := SFH->FH_ALIQ
						exit  
					EndIF
					SFH->(DbSkip())
				EndDo 
			Endif
			SFH->(RestArea(aAreaSFH))
			If  nAliqFH == 0 
				nRedBase := 0
			Endif
			IF cRadic == "SA" .or. (cRadic <> "SA" .AND. _cZonClSIGA == "SA")
				aImposto[_BASECALC] := (aImposto[_BASECALC] * (1 - nRedBase / 100)) 
			EndIF
			IF cRadic <> "SA" .AND. _cZonClSIGA <> "SA"
				if nAliqFH > 0 // Caso não tenha SFH utilizo a SFF
					aImposto[_BASECALC] := (aImposto[_BASECALC]  * (Iif((Type("lNoRed") <> "U" .and. lNoRed),IIf(nCoefSFH <> 0,nCoefSFH,1),1)) )
				Else
					aImposto[_BASECALC] := (aImposto[_BASECALC] * (1 - nRedBase / 100))
				EndIF
			EndIF
		EndIF
		
		
		// Verifica devolução
		If cTipo $ ("NCC|NCP")
			nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO)//_cZonClSIGA
		Else       
			nBaseAb:=0
		EndIf
		
		//Inicializa array para acumulados
		If Funname() $ "MATA468N|MATA461" .And. cCalcImp == "IBK" .And. lIniArray .And. xRet[3] == 0
			aMPer := {}
			aPriStafe := {0,.F.,0,0}
			lIniArray := .F.
		EndIf

		//Valida si es para Argentina y el impuesto IBK de SF.
		If "IB" $ cCalcImp .And. cPaisLoc == "ARG" .And. ( _cZonClSIGA == "SF"  .or. cCalcImp == "IBK")
			If aImposto[_BASECALC] != 0
				 
				aAreaSFF := SFF->(GetArea())
				DBSelectArea("SFF")
				SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
				
				IF SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
					If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100
						If (Type("lNoRed") <> "U" .and. lNoRed) .or. Type("lNoRed") == "U"
							nBase := aImposto[_BASECALC] * ((100 - SFF->FF_REDBASE) / 100)
						ElseIf (Type("lNoRed") <> "U" .and. !lNoRed)
							nBase := aImposto[_BASECALC]
						EndIf
						IF ALLTRIM(FUNNAME()) $ "MATA468N|MATA461" .and. cCalcImp == "IBK"
							aInfoImp 	:= {SFF->FF_LIMITE,SFF->FF_TPLIM,_cCFO}				
							If VAL(aInfoImp[2]) == 0	
								aInfoImp 	:= M100RLIM(aImposto[_NOMIMPOST], SFF->FF_TIPO)
							EndIf

							If ((ValType(aInfoImp[2])=="C" .And. aInfoImp[2]=="4") .Or. (ValType(aInfoImp[2])=="N" .And. aInfoImp[2]==4)) .And. xRet[3] == 0 
								If aPriStafe[2] == .F.
									aMPer := ObtAcum(aImposto[_IMPCALIM], aInfoImp[1])
									aPriStafe[1]	:= aMPer[1]
									aPriStafe[2]	:= .T.
								EndIf
								
								If len(aMPer) > 0
									aMPer[4] += nBase

									If aMPer[2] == 0
										nBaseIBK := CCOMinB2(_nValorMin,lMinIb,aMPer[4]+aMPer[1],nBase,xRet[20],nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)

										lUlt:=.f.
										If Type("nItenAt") =="N" .and. Type("nMaxIt") =="N" .and.   nItenAt==nMaxIt   
											lUlt:=.t.
										EndIf 
										
										If ((( aMPer[4] + aMPer[1] ) > aInfoImp[1]) .OR. ( lUlt .AND. aMPer[4] + aMPer[1]  > aInfoImp[1] )    ) 
											
											If aMPer[2] == 0 .And. (lUlt) .And. xRet[3] == 0
												If nBaseIBK > 0
													nBase += aMPer[1]
													aMPer[4] += aMPer[1]
												EndIf
											EndIf
										EndIf	

										If lUlt .And. xRet[3] == 0
											lIniArray := .T.
										EndIf
									EndIf
								Endif
							Endif
						EndIf
						aImposto[_BASECALC] := nBase
					EndIf
				EndIf
				SFF->(RestArea(aAreaSFF))
				
			EndIf
		EndIf
		//+---------------------------------------------------------------+
		//¦ Efectua el Cálculo del Impuesto                               ¦
		//+---------------------------------------------------------------+
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Tratamento de IB para monotributistas - Argentina           ³
		³ AGIP 177/2009                                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If cPaisLoc == "ARG" .And. cTipoInsc == "M"
			If _nMoeda <> 1
				If Type("nTaxamoeda") <> "U"
					nTxMoeda := nTaxamoeda   
				EndIf
				nTotAnt := xMoeda(aImposto[_BASECALC],_nMoeda,1,,,nTxMoeda)
			Else
				nTotAnt := aImposto[_BASECALC]
			Endif
			If Type("_nTotOper_") == "N"
				nTotAnt += _nTotOper_
			Endif
			If Type("_aValItem_") <> "A"
				_aValItem_ := {}
			Endif
			nPos := Ascan(_aValItem_,{|item| item[1] == nItemNF})
			If nPos > 0
				_aValItem_[nPos,2] := AllTrim(_cItem) == "B2"		//B2 - "cosas muebles"
			Endif
			lCalcImp := ((nTotAnt -nBaseAb ) > _nValorOp)
			If !lCalcImp
				//Verifica se ha algum "cosa mueble" com valor unitario acima do minimo
				lCalcImp := (Ascan(_aValItem_,{|valor| valor[2] .And. (valor[3] > _nValorUn)}) > 0)
			Endif
		Endif
		If lCalcImp .And. (aImposto[_BASECALC] > _nValorMin)
			//Si aplica RG ATER 319-16
			
			
			If CCO->(ColumnPos("CCO_TPLIMP")) > 0 .And. CCO->CCO_TPLIMP == "2" .And. _nValorOp > 0 .And. AllTrim(cEspecie) == "NF" .And. Substr(cModulo,1,3) == 'FAT'
				aBaseAc := PerAcum(aImposto[_NOMIMPOST], aImposto[_IMPCALIM], _nValorOp, (aImposto[_BASECALC] - nBaseAb), .T.)
				If _nAlicDesg > 0
					aImposto[_IMPUESTO] := Round(aBaseAc[1][1] * (aImposto[_ALIQUOTA] / 100) * _nReducir, MsDecimais(_nMoeda))
					aImposto[_IMPUESTO] := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100) 
				Else
					aImposto[_IMPUESTO] := Round(aBaseAc[1][1] * ( aImposto[_ALIQUOTA] / 100) * _nReducir, MsDecimais(_nMoeda))
				EndIf
				
				If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] != 0 
					aImposto[_IMPUESTO] -= aBaseAc[1][2]
				EndIf
			Else
				If _nAlicDesg > 0
					aImposto[_IMPUESTO] := Round((aImposto[_BASECALC] - nBaseAb ) * ( aImposto[_ALIQUOTA] / 100) * _nReducir, MsDecimais(_nMoeda))
					aImposto[_IMPUESTO] := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100) 
				Else
					IF cCalcImp <> "IB4" .and. _cZFiscTU <> "TU"
						IF "IB" $ cCalcImp
							If _nReducir <> 0
								aImposto[_IMPUESTO] := Round(((aImposto[_BASECALC] - nBaseAb ) * ( aImposto[_ALIQUOTA] / 100)), MsDecimais(_nMoeda)) 
							Else
								aImposto[_IMPUESTO] := Round(((aImposto[_BASECALC] - nBaseAb ) * ( aImposto[_ALIQUOTA] / 100) * _nReducir), MsDecimais(_nMoeda)) 
							Endif	
						ELSE
							aImposto[_IMPUESTO] := Round(((aImposto[_BASECALC] - nBaseAb ) * ( aImposto[_ALIQUOTA] / 100) * _nReducir)* IIf(nCoefSFH <> 0,nCoefSFH,1), MsDecimais(_nMoeda)) 
						EndIF
					Else
						aImposto[_IMPUESTO] := Round((aImposto[_BASECALC] - nBaseAb ) * ( aImposto[_ALIQUOTA] / 100) * _nReducir, MsDecimais(_nMoeda))
					EndIf
				EndIf
			EndIf
		ELSE
			aImposto[_IMPUESTO]  := 0.00
			aImposto[_IMPFLETE]  := 0.00
			aImposto[_IMPGASTOS] := 0.00
			aImposto[_RATEOFRET] := 0.00
			aImposto[_RATEODESP] := 0.00
		Endif
		If ALLTRIM(FUNNAME()) $ "MATA468N|MATA461" .and. cCalcImp == "IBK"  .And. Len(aInfoImp)>1
			If (ValType(aInfoImp[2])=="C" .And. aInfoImp[2]=="4") .Or. (ValType(aInfoImp[2])=="N" .And. aInfoImp[2]==4)
				If len(aMPer) > 0
					If aMPer[4] > 0 .And. aMPer[2] == 0
						aImposto[_IMPUESTO] := Iif(aImposto[_IMPUESTO] < 0,0,aImposto[_IMPUESTO]) 
					Elseif aMPer[4] == 0 
						aImposto[_IMPUESTO] := 0
					Endif
				Endif
			EndIf						
		EndIf
		
		xRet:=aImposto
		
	ElseIf lAntCal == .T. .and. cPaisLoc == "ARG" .AND. aInfo[1] == "IB4" .AND. _cTSFiscal == "N"  
		nAliqTmp := _nAlicuota
		nIvaTU:=0
		POSICIONE("CCO",1,xFilial("CCO")+"TU","CCO_TIPO")
		If CCO->CCO_TIPO="N" .OR. _cTSFiscal == "N"
			If !Empty(cIncIB)
				aImpRef:=MaFisRet(nItem,"IT_DESCIV")
				aImpVal:=MaFisRet(nItem,"IT_VALIMP")
				For nI:=1 to Len(aImpRef)
					If !Empty(aImpRef[nI])
						IF Trim(aImpRef[nI][1])$cIncIB
							nImpTU+=aImpVal[nI]
						Endif
					Endif
				Next
			Endif
		EndIf
		_nAlicuota := nAliqTmp
		If cCalculo $ "B|V"
			nBase := Obtbase(nItem,aInfo[1]) + nImpTU
			If cTipo $ ("NCC|NCP")
				nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO,nItem)
				nBaseAb = IIF(nBaseAb > 0,nBaseAb + nImpTU,0)
			Else
				nBaseAb := 0
			EndIf
			nBase -= nBaseAb
		Endif 
		If cCalculo == "B" 
			Return {nBase,_nAlicuota,0}
		ElseIf cCalculo == "A"
			Return _nAlicuota
		ElseIf cCalculo == "V"
			basTot	:= MaRetBasT(aInfo[2],,_nAlicuota)
			If lCalcTot
				nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota)
			Endif
			xRet	:= Round(nBase * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
			Return xRet
		Endif 
	ElseIf lAntCal == .T. .and. cPaisLoc == "ARG" .AND. aInfo[1] == "IB4" .AND. _cTSFiscal == "V" 
		If nPosCCO == 0
			nCoefRPer := POSICIONE("CCO",1,xFilial("CCO")+cZonCCO,"CCO_CRFPER")
		Else
			nCoefRPer := aImpCCO[nPosCCO][_CCOCRFPER]
		EndIf
		aAreaSFF	:= SFF->(Getarea())
		SFF->(DbSetOrder(12))   // FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS
		IF SFF->(MsSeek(xFILIAL("SFF")+ aInfo[1] + _cCFO + _cZFiscTU + "*" ,.F.))
			nAliqSFF := SFF->FF_ALIQ
		Elseif SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal ,.F.))
			nAliqSFF := SFF->FF_ALIQ
		Endif
		SFF->(RestArea(aAreaSFF))
				

		If lImpSFH
			cPesqSFH 	:= xFilial("SFH") + Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P") + cCod + cLoja + "IB4" + _cZFiscTU 
			nPosSFH 	:= Ascan(aImpSFH,{|item| item[_FHFILIAL] + item[_CLIPROV] + item[_FHFORCLI] + item[_FHLOJA] + item[_FHIMPOSTO] + item[_FHZONFIS] == cPesqSFH})
		EndIf
		If nPosSFH == 0
			aAreaSFH	:= SFH->(Getarea())
			nOrdeSFH := Iif(MaFisRet(,"NF_CLIFOR" ) == "C",3,1)//FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS   o  FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
			SFH->(DbSetOrder(nOrdeSFH)) 
			cLlave := xFilial("SFH") + cCod + cLoja + "IB4" + _cZFiscTU 
			If SFH->(MsSeek( cLlave ))
				While!(SFH->(Eof())) .and. ; 
					iif (nOrdeSFH = 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
                                   SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
					If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()  
						nAliqSFH := SFH->FH_ALIQ
						nCoefSFH := SFH->FH_COEFMUL
						If lImpSFH
							AADD(aImpSFH,{SFH->FH_FILIAL,Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P"),cCod,cLoja,SFH->FH_IMPOSTO,SFH->FH_ZONFIS,SFH->FH_ALIQ,SFH->FH_COEFMUL})
						EndIf
						exit  
					Endif 
					SFH->(DbSkip())
				EndDo 
			Endif
			SFH->(RestArea(aAreaSFH))		
		Else
			nAliqSFH := aImpSFH[nPosSFH][_FHALIQ]
			nCoefSFH := aImpSFH[nPosSFH][_FHCOEFMUL]
		EndIf
		 
		If !Empty(cIncIB)
			nIvaTU := (ObtIva(nItem)/100)
		Endif
		If cCalculo $ "B|V"
			nBase := Obtbase(nItem,aInfo[1]) * ( 1 + nIvaTU)
			If cTipo $ ("NCC|NCP")
				nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO,nItem)
				nBaseAb = IIF(nBaseAb > 0,nBaseAb *( 1 + nIvaTU) ,0)
			Else
				nBaseAb:= 0
			EndIf
			nBase -= nBaseAb
		Endif
		
		If SM0->M0_ESTENT == "TU" .and. cRadic <> "TU" .and. nAliqSFH <> 0  
			nAliqAux := (nAliqSFH * nAliqSFF) * _nReducir
		Else
			If nAliqSFH <> 0
				nAliqAux := nAliqSFH * _nReducir                                       
			Else
				nAliqAux := nAliqSFF * _nReducir                                   
			EndIf
		EndIf
		 
		If cCalculo == "B"
		 	nBaseAux := nBase
			nRedTU := 1
			If lCalcTot
				nBase 	+= ObtbaseT(aInfo[1],nAliqAux,aInfo[2],nItem,IIF(!Empty(cIncIB),nIvaTU,0))
			EndIf
			If SM0->M0_ESTENT <> "TU" .and. cRadic <> "TU"
				nRedTU := IIf(nCoefSFH <> 0,nCoefSFH,1) 
			ElseIf SM0->M0_ESTENT == "TU" .and. cRadic <> "TU"
				If nAliqSFH <> 0
					If nCoefSFH <> 0
						nRedTU := nCoefSFH
					ElseIf nCoefRPer <> 0
						nRedTU := nCoefRPer
					EndIf
				Else
					If  nCoefSFH<> 0
						If nCoefRPer <> 0
							nRedTU := nCoefSFH * nCoefRPer
						Else    
							nRedTU := nCoefSFH
						EndIf
					Else
						If nCoefRPer <> 0
							nRedTU := nCoefRPer
						EndIf
					EndIf
				EndIf
			EndIf
			nBase := nBase * nRedTU
			nBase := Round(nBase,MsDecimais(_nMoeda))
			If lCalcTot .and. FindFunction("MaRatBasT")
				nBaseAux := nBaseAux * nRedTU
				nBaseAux := Round(nBaseAux,MsDecimais(_nMoeda))
				If cPaisLoc == "ARG" .And. Val(aInfo[2]) == 0
					aInfo[2] := VerificanCampo(Val(aInfo[2]))
					nBase := MaRatBasT(aInfo[2],nItem,nAliqAux,nBase,MsDecimais(_nMoeda),nBaseAux)
				else					
					nBase := MaRatBasT(val(aInfo[2]),nItem,nAliqAux,nBase,MsDecimais(_nMoeda),nBaseAux)
				Endif
			EndIf 
			Return {nBase,nAliqAux,0}//Iif(nAliqSFH <> 0,{nBase,nAliqSFH,0},{nBase,nAliqSFF,0})
		ElseIf cCalculo == "A"
			Return nAliqAux
		ElseIf cCalculo == "V"
			If lCalcTot
				If SM0->M0_ESTENT == "TU" .and. cRadic <> "TU" .and. nAliqSFH <> 0  
					nBase := MaRetBasT(aInfo[2],nItem,(nAliqSFH * nAliqSFF) * _nReducir)
				Else
					If nAliqSFH <> 0
						nBase := MaRetBasT(aInfo[2],nItem,nAliqSFH * _nReducir)
					Else
						nBase := MaRetBasT(aInfo[2],nItem,nAliqSFF * _nReducir)
					Endif
				Endif
			Else
				nBase := GetBaseFis(nItem, aInfo[2])
			Endif
		Endif 
		
		If nBase > _nValorMin
			If SM0->M0_ESTENT <> "TU"
				If cRadic == "TU"
					If nAliqSFH <> 0 
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFH * _nReducir)				
						xRet	:= Round(nBase * (nAliqSFH/100)*_nReducir,MsDecimais(_nMoeda))							
					Else
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)				
						xRet	:= Round(nBase * (nAliqSFF/100)*_nReducir,MsDecimais(_nMoeda))								
					EndIf
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
					Return xRet
				ElseIf cRadic <> "TU"			
					If nAliqSFH <> 0
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFH * _nReducir)   
						xRet 	:= Round(nBase * (nAliqSFH/100)*_nReducir,MsDecimais(_nMoeda))
					Else
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)
						xRet 	:= Round(nBase * (nAliqSFF/100)*_nReducir,MsDecimais(_nMoeda))                              
					Endif
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
					Return xRet
				Endif 
			Else
			//Errores cuando MO_ESTENT == TU EN FACTURAS MANUALES
				If cRadic == "TU"
					If nAliqSFH <> 0 
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFH * _nReducir)
						xRet	:= Round(nBase * (nAliqSFH / 100) * _nReducir,MsDecimais(_nMoeda))
					Else
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)
						xRet	:= Round(nBase * (nAliqSFF / 100) * _nReducir,MsDecimais(_nMoeda))
					EndIf
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
					Return xRet
				ElseIf cRadic <> "TU"
					If nAliqSFH <> 0   
						xRet := Round(nBase * (nAliqSFH / 100) * (nAliqSFF / 100) * _nReducir,MsDecimais(_nMoeda))
						basTot	:= MaRetBasT(aInfo[2],,(nAliqSFH * nAliqSFF) * _nReducir)
					Else
						xRet := Round(nBase * (nAliqSFF / 100) * _nReducir,MsDecimais(_nMoeda))
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)
					Endif
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,_nMoeda, nTxMoeda,lXfis)
					Return xRet
				Endif
			EndIf  
		EndIf
	ElseIf lAntCal == .T. 
		If aInfo[1] <> "IB4" .and. _cZFiscTU <> "TU"

			If  lImpSFH
				cPesqSFH 	:= xFilial("SFH") + Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P") + cCod + cLoja + cCalcImp + _cZFiscTU 
				nPosSFH 	:= Ascan(aImpSFH,{|item| item[_FHFILIAL] + item[_CLIPROV] + item[_FHFORCLI] + item[_FHLOJA] + item[_FHIMPOSTO] + item[_FHZONFIS] == cPesqSFH})
			EndIf
			If nPosSFH == 0
				aAreaSFH	:= SFH->(Getarea())
				nOrdeSFH := Iif(MaFisRet(,"NF_CLIFOR" ) == "C",3,1)//FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS   o  FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
				SFH->(DbSetOrder(nOrdeSFH)) 
				cLlave := xFilial("SFH") + cCod + cLoja + cCalcImp + _cZFiscTU 
				If SFH->(MsSeek( cLlave ))
					While!(SFH->(Eof())) .and. ; 
						iif (nOrdeSFH == 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
									SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
						If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()  
							nCoefSFH := SFH->FH_COEFMUL
							If lImpSFH
								AADD(aImpSFH,{SFH->FH_FILIAL,Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P"),cCod,cLoja,SFH->FH_IMPOSTO,SFH->FH_ZONFIS,SFH->FH_ALIQ,SFH->FH_COEFMUL})
							EndIf
							exit  
						Endif 
						SFH->(DbSkip())
					EndDo 
				Endif
				SFH->(RestArea(aAreaSFH))		
			Else
				nCoefSFH := aImpSFH[nPosSFH][_FHCOEFMUL]
			EndIF
		EndIf		


		// Verifica devolução
		If cTipo $ ("NCC|NCP")
			nBaseAb:=M460VLNC(cTipo,cAlias,cZonCCO,nItem)
		Else       
			nBaseAb:=0
		EndIf
		
		If !Empty(cXFisRap)
			xRet := {0,0,0}
			xRet[2] := _nAlicuota
			
			lCalc := .T. 
			If !(MaFisRet(nItem,'IT_DELETED')  )
	    		nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			Else 	
				lCalc := .F. 
				nBase:=0
			EndIf
			
			If GetNewPar('MV_DESCSAI','1')=='1' 
				nBase	+= MaFisRet(nItem,"IT_DESCONTO")
			Endif
			If nPosSFC == 0
				nOrdSFC:=(SFC->(IndexOrd()))
				nRegSFC:=(SFC->(Recno()))
				SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
			EndIf
            If !Empty(cIncIB)
				If nPosSFC == 0
					lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
				Else
					lFindSFC := .T.
				EndIf
				//Tira os descontos se for pelo liquido
				If lFindSFC
					cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP)) //Alltrim(SFC->FC_INCIMP)
					If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" ) //SFC->FC_LIQUIDO=="S"
						nBase-= MaFisRet(nItem,"IT_DESCONTO")
					Endif
				Endif
				//+---------------------------------------------------------------+
				//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
				//+---------------------------------------------------------------+
				aImpRef:=MaFisRet(nItem,"IT_DESCIV")
				aImpVal:=MaFisRet(nItem,"IT_VALIMP")
				For nI:=1 to Len(aImpRef)
					If !Empty(aImpRef[nI])
						IF Trim(aImpRef[nI][1])$cIncIB
							nBase+=aImpVal[nI]
						Endif
					Endif
				Next
			Else
				If nPosSFC == 0
					lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
				Else
					lFindSFC := .T.
				EndIf
				//Tira os descontos se for pelo liquido
				If lFindSFC
					cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP))
					If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )
						nBase-= MaFisRet(nItem,"IT_DESCONTO")
					Endif
				Endif
				//+---------------------------------------------------------------+
				//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
				//+---------------------------------------------------------------+
				If !Empty(cImpIncid)
					aImpRef:=MaFisRet(nItem,"IT_DESCIV")
					aImpVal:=MaFisRet(nItem,"IT_VALIMP")
					For nI:=1 to Len(aImpRef)
						If !Empty(aImpRef[nI])
							IF Trim(aImpRef[nI][1])$cImpIncid
								nBase+=aImpVal[nI]
							Endif
						Endif
					Next
				Endif
			Endif
			//Valida si es para Argentina y el impuesto IBK de SF.
	 		If "IBK" == cCalcImp .And. cPaisLoc == "ARG" .And. cCalculo == "B" .and. nBase != 0 .and. cTipoInsc == "V"
				aAreaSFF := SFF->(GetArea())
				DBSelectArea("SFF")
				SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
				
				IF SFF->(MsSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
					If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100
						nBase := nBase * ((100 - SFF->FF_REDBASE) / 100)
					EndIf
				EndIf
				SFF->(RestArea(aAreaSFF))
			EndIf
			IF _cTSFiscal == "V" .And. cPaisLoc == "ARG" .And. cCalculo == "B"  .And. "IB" $ cCalcImp  .AND. _cZFiscTU <> "TU"
				aAreaSFF := SFF->(GetArea())
				DBSelectArea("SFF")
				SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
				IF SFF->(MsSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
					If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100 // Posiciono na SFF para armazenar a base reduzida e aliquota
						nRedBase := SFF->FF_REDBASE
					EndIF
				EndIF
				SFF->(RestArea(aAreaSFF))
				If  lImpSFH .and. nPosSFH == 0  // Verifico se encontra o registro dentro do array da SFH
					nPosSFH 	:= Ascan(aImpSFH,{|item| item[_FHFILIAL] + item[_CLIPROV] + item[_FHFORCLI] + item[_FHLOJA] + item[_FHIMPOSTO] + item[_FHZONFIS] == cPesqSFH})
				EndIf
				If  nPosSFH > 0 .And. len(aImpSFH) >= nPosSFH .And. aImpSFH[nPosSFH][_FHALIQ] == 0
					nRedBase := 0
				Endif
				IF cRadic == "SA" .or. (cRadic <> "SA" .AND. _cZonClSIGA == "SA")
					nBase := (nBase * (1 - nRedBase / 100)) 
				EndIF
				IF  cRadic <> "SA" .AND. _cZonClSIGA <> "SA"
					if nPosSFH > 0 .AND. aImpSFH[nposSFH][_FHALIQ] > 0 // Caso não tenha SFH utilizo a SFF
						nBase := (nBase  * IIf(nCoefSFH <> 0,nCoefSFH,1) ) 
					Else
						nBase := (nBase * (1 - nRedBase / 100)) 
					EndIF
				EndIF
			EndIF
             
			xRet[1] := nBase 
			MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
			If "V" $ cXFisRap
				lCalcImp := .T.
				lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
				If lFindSFC
					If SFC->FC_CALCULO=="T"
						nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota)
					Endif
				Endif

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Tratamento de IB para monotributistas - Argentina           ³
				³ AGIP 177/2009                                               ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				If cPaisLoc == "ARG" 
					If MaFisRet(,"NF_TIPONF") == "N" .And. MaFisRet(,"NF_OPERNF") == "S" .And. MaFisRet(,"NF_CLIFOR") == "C" .And. cTipoInsc == "M"
						If _nMoeda <> 1
							nTotAnt := xMoeda(nBase,_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
						Else
							nTotAnt := nBase
						Endif
						If Type("_nTotOper_") == "N"
							nTotAnt += _nTotOper_
						Endif
						If Type("_aValItem_") <> "A"
							_aValItem_ := {}
						Endif
						nPos := Ascan(_aValItem_,{|item| item[1] == nItem})
						If nPos == 0
							Aadd(_aValItem_,{nItem,.F.,xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))})
							nPos := Len(_aValItem_)
						Else
							_aValItem_[nPos,3] := xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
						Endif
						_aValItem_[nPos,2] := (AllTrim(_cItem)) == "B2"		//B2 - "cosas muebles"
						lCalcImp := (nTotAnt > _nValorOp)
						If !lCalcImp
							//Verifica se ha algum "cosa mueble" com valor unitario acima do minimo
							lCalcImp := (Ascan(_aValItem_,{|valor| valor[2] .And. (valor[3] > _nValorUn)}) > 0)
						Endif
					Endif
				Endif
				
				If cTipo $ ("NCC|NCP")
					If !M460VPER(cTipo, cAlias, cZonCCO, cCalculo)
						xRet[1] := 0
						xRet[2] := 0 
						nBaseAb := nBase
					EndIf
				EndIF
				
				If lCalcImp .And. ((nBase - nBaseAb )> _nValorMin)
					If _nAlicDesg > 0
						xRet[3] := Round((nBase - nBaseAb ) * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
						xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
					Else
						xRet[3] := Round((nBase - nBaseAb  )* (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
					EndIf
				Endif
			Endif
			
			If(cPaisLoc == "ARG" .AND. aInfo[1] == "IBK")
				aAreaSFF := SFF->(GetArea())
				DBSelectArea("SFF")
				SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
				If SFF->(MsSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
				aInfoImp 	:= {SFF->FF_LIMITE,SFF->FF_TPLIM,_cCFO}				
				If VAL(aInfoImp[2]) == 0	
					aInfoImp 	:= M100RLIM(aInfo[1], SFF->FF_TIPO)
				Endif	
				If (ValType(aInfoImp[2])=="C" .And. aInfoImp[2]=="4") .Or. (ValType(aInfoImp[2])=="N" .And. aInfoImp[2]==4)  
					
					If Funname() $ "MATA410" .And. nItem == 1 .And. aPriStafe[2] == .T.
						aMPer := {}
						aPriStafe := {0,.F.,0,0}
					EndIf

					If Type("aCols") <> "U" .And. (aPriStafe[2] == .F. .or. Len(aCols) = 1)
						aMPer := ObtAcum(aInfo[2], aInfoImp[1])
						aPriStafe[1]	:= aMPer[1]
						aPriStafe[2]	:= .T.
					Endif
											
					If len(aMPer) > 0
						aMPer[4] := nBase
						If aMPer[2] == 0
							nBase1 = ActStaFeIBK(nItem,nBase,aInfo[2],_nAlicuota)
							nBaseIBK := CCOMin(_nValorMin,lMinIb,(nBase+ nBase1 + aMPer[1]),nBase,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
						EndIf
						If ( nBase+ nBase1 + aMPer[1] ) > aInfoImp[1]
							If aMPer[2]==0
								If nBaseIBK > 0
									nBase += aMPer[1]
								EndIf 
							EndIf
							xRet[1]	:= nBase
							xRet[3]	:= 0
							aMPer[4] += nBase1
						Else 
							xRet := {nBase,0,0}
							aMPer[4]	:= 0
						Endif 
					Else
						xRet := {nBase,0,0}
					Endif                                                                                                                  
				Endif				
			EndIf
				SFF->(RestArea(aAreaSFF))
			EndIf
			If nPosSFC == 0
				SFC->(DbSetOrder(nOrdSFC))
				SFC->(DbGoto(nRegSFC))
			EndIf
		Else
			Do Case
				Case cCalculo=="A"
					IF _nReducir <> 0 .And. cPaisLoc == "ARG" .And. cCalculo == "A"  .And. "IB" $ cCalcImp  .AND. _cZFiscTU <> "TU"
						If lExisteNF
							xRet := _nAlicuota
						Else
							xRet := _nAlicuota  * _nReducir
						Endif
					Else
						xRet := _nAlicuota
					Endif
				Case cCalculo=="B"
					nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
					If GetNewPar('MV_DESCSAI','1')=='1' 
						nBase	+= MaFisRet(nItem,"IT_DESCONTO")
					Endif

		            If !Empty(cIncIB)
						//+---------------------------------------------------------------+
						//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
						//+---------------------------------------------------------------+
						If !Empty(cIncIB)
							aImpRef:=MaFisRet(nItem,"IT_DESCIV")
							aImpVal:=MaFisRet(nItem,"IT_VALIMP")
							For nI:=1 to Len(aImpRef)
								If !Empty(aImpRef[nI])
									IF Trim(aImpRef[nI][1])$cIncIB
										nBase+=aImpVal[nI]
									Endif
								Endif
							Next
						Endif
					Else
						nOrdSFC:=(SFC->(IndexOrd()))
						nRegSFC:=(SFC->(Recno()))
				
						SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
						lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
						//Tira os descontos se for pelo liquido
						If lFindSFC
							cImpIncid:=Alltrim(SFC->FC_INCIMP)
							If SFC->FC_LIQUIDO=="S"
								nBase-= MaFisRet(nItem,"IT_DESCONTO")
							Endif
						Endif
						//+---------------------------------------------------------------+
						//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
						//+---------------------------------------------------------------+
						If !Empty(cImpIncid)
							aImpRef:=MaFisRet(nItem,"IT_DESCIV")
							aImpVal:=MaFisRet(nItem,"IT_VALIMP")
							For nI:=1 to Len(aImpRef)
								If !Empty(aImpRef[nI])
									IF Trim(aImpRef[nI][1])$cImpIncid
										nBase+=aImpVal[nI]
									Endif
								Endif
							Next
						Endif
						SFC->(DbSetOrder(nOrdSFC))
						SFC->(DbGoto(nRegSFC))
					Endif
					//Valida si es para Argentina y el impuesto IBK
					If "IBK" == cCalcImp .And. cPaisLoc == "ARG" .and. nBase != 0 .and. cTipoInsc == "V" 
						aAreaSFF := SFF->(GetArea())
						DBSelectArea("SFF")
						SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
						
						IF SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
							If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100
								nBase := nBase * ((100 - SFF->FF_REDBASE) / 100)
							EndIf
						EndIf
						SFF->(RestArea(aAreaSFF))
					EndIf
					xRet:=nBase
				Case cCalculo=="V"
					lCalcImp := .T. 
					MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
					If nPosSFC == 0
						SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
						lFindSFC := SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
					Else
						lFindSFC := .T.
					EndIf
					If lFindSFC
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCCALCULO]=="T",SFC->FC_CALCULO=="T")
							If lExisteNF
								nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota)
							Else
								nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota * _nReducir)
							Endif
		            	Else
							nBase := MaFisRet(nItem,'IT_BASEIV'+aInfo[2])
						Endif
					Endif
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Tratamento de IB para monotributistas - Argentina           ³
					³ AGIP 177/2009                                               ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					If cPaisLoc == "ARG" 
						If MaFisRet(,"NF_TIPONF") == "N" .And. MaFisRet(,"NF_OPERNF") == "S" .And. MaFisRet(,"NF_CLIFOR") == "C" .And. cTipoInsc == "M"
							If _nMoeda <> 1
								nTotAnt := xMoeda(nBase,_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
							Else
								nTotAnt := nBase
							Endif
							If Type("_nTotOper_") == "N"
								nTotAnt += _nTotOper_
							Endif
							If Type("_aValItem_") <> "A"
								_aValItem_ := {}
							Endif
							nPos := Ascan(_aValItem_,{|item| item[1] == nItem})
							If nPos == 0
								Aadd(_aValItem_,{nItem,.F.,xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))})
								nPos := Len(_aValItem_)
							Else
								_aValItem_[nPos,3] := xMoeda(MaFisRet(nItem,"IT_PRCUNI"),_nMoeda,1,,,MaFisRet(,"NF_TXMOEDA"))
							Endif
							_aValItem_[nPos,2] := (AllTrim(_cItem)) == "B2"		//B2 - "cosas muebles"
							lCalcImp := ((nTotAnt) > _nValorOp)
							If !lCalcImp
								//Verifica se ha algum "cosa mueble" com valor unitario acima do minimo
								lCalcImp := (Ascan(_aValItem_,{|valor| valor[2] .And. (valor[3] > _nValorUn)}) > 0)
							Endif
						Endif
					Endif

					If cTipo $ ("NCC|NCP") //.And. _cZonClSIGA == "RN" .And. aInfo[1] == "IBL"
						Iif(M460VPER(cTipo, cAlias, cZonCCO, cCalculo), nBaseAb := nBaseAb, nBaseAb := nBase)
					EndIf

					If nBaseAb > 0 .and. cTipo $ ("NCC|NCP")
						nBaseAb := MaRetBasT(aInfo[2],nItem,_nAlicuota,nItem)
					EndIf 
				
					If lCalcImp .And. ((nBase - nBaseAb ) > _nValorMin)
						//Si aplica RG ATER 319-16
						If CCO->(ColumnPos("CCO_TPLIMP")) > 0 .And. CCO->CCO_TPLIMP == "2" .And. _nValorOp > 0 .And. MaFisRet(,"NF_OPERNF") == "S" .And. (AllTrim(cEspecie) == "NF" .Or. AllTrim(cEspecie) == "NDC" .Or. AllTrim(cEspecie) == "NDE" .Or. AllTrim(cEspecie) == "NCE".Or. AllTrim(cEspecie) == "NCP".Or. AllTrim(cEspecie) == "NDI")  
							aBaseAc := PerAcum(aInfo[1], aInfo[2], _nValorOp, nBase - nBaseAb, .T.)
							If _nAlicDesg > 0
								xRet := Round(aBaseAc[1][1] * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
								xRet := xRet - ((xRet * _nAlicDesg) / 100)
							Else
								xRet := Round((aBaseAc[1][1]) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
							EndIf
							If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] != 0 
								xRet -= aBaseAc[1][2]
							EndIf
						Else
							If _nAlicDesg > 0
								xRet := Round((nBase- nBaseAb  )* (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
								xRet := xRet - ((xRet *_nAlicDesg) / 100)
							Else
								IF  aInfo[1] <> "IB4" .and. _cZFiscTU <> "TU" 
									IF  "IB" $ aInfo[1]  
										If  lExisteNF
											xRet := Round(((nBase - nBaseAb )* (_nAlicuota / 100)) ,MsDecimais(_nMoeda)) 
										Else 
											xRet := Round(((nBase - nBaseAb )* (_nAlicuota / 100) * _nReducir) ,MsDecimais(_nMoeda))
										Endif
									Else
										xRet := Round(((nBase - nBaseAb )* (_nAlicuota / 100) * _nReducir)* IIf(nCoefSFH <> 0,nCoefSFH,1) ,MsDecimais(_nMoeda)) 
									EndIF
								Else
									xRet := Round((nBase - nBaseAb )* (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
								EndIf
							EndIf
						EndIf
					Endif 
					
					If(cPaisLoc == "ARG" .AND. aInfo[1] == "IBK")
						DBSelectArea("SFF")
						SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
						SFF->(DBSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
						aInfoImp 	:= {SFF->FF_LIMITE,SFF->FF_TPLIM,SF4->F4_CF}
						
						If VAL(aInfoImp[2]) == 0	
							aInfoImp 	:= M100RLIM(aInfo[1], SFF->FF_TIPO)
						Endif	
						If (ValType(aInfoImp[2])=="C" .And. aInfoImp[2]=="4") .Or. (ValType(aInfoImp[2])=="N" .And. aInfoImp[2]==4)
							If len(aMPer) > 0
								If aMPer[4] > 0
									nBAseCalc:= ((MaRetBasT(aInfo[2],,_nAlicuota))  - nBaseAb)
									If nBAseCalc>0							
										xRet := Round(nBAseCalc  * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
									Else
										xRet := 0
									EndIf	
								Else 
									xRet := 0
								Endif
							Endif						
						EndIf					
					EndIf						
			Endcase
		Endif
	Endif
ENDIF

If lXFis .and. cCalculo == "V" .and. _lCalcular .and. !(cPaisLoc == "ARG" .AND. cCalcImp == "IB4" .AND. _cTSFiscal == "N")// Minimos
	IF _nReducir <> 0 .And. cPaisLoc == "ARG" .And. "IB" $ cCalcImp  .AND. _cZFiscTU <> "TU"
		If lExisteNF
			basTot	:= MaRetBasT(aInfo[2],,_nAlicuota)
		Else
				basTot	:= MaRetBasT(aInfo[2],,_nAlicuota  * _nReducir)
		Endif
	Else
		basTot	:= MaRetBasT(aInfo[2],,_nAlicuota )
	Endif
	

	If cCalcImp == "IBK" .And. Len(aMPer) > 0
		xRet := CCOMin(_nValorMin,lMinIb,aMPer[4] + aMPer[1],xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
		If lXfis .and. xRet > 0 .and. _nValorMin == 0 .And. aMPer[2] == 0
			If !(FunName() $ "MATA410") .And. (ValType(aHeader) != "U" .And. ValType(aCols) != "U")
				nPosBasIBK := aScan(aHeader, { |x| x[2] == "D2_BASIMP"+aInfo[2]})
				nPosAlqIBK := aScan(aHeader, { |x| x[2] == "D2_ALQIMP"+aInfo[2]})
				nPosValIBK := aScan(aHeader, { |x| x[2] == "D2_VALIMP"+aInfo[2]})
			EndIf
			For nX:= 1 to Len(aCols)	
				If IIf(FunName() $ "MATA410", nX < nItem, nX <> nItem) .And. !MaFisRet(nX,"IT_DELETED")
					nBasIBK := MaFisRet(nX,"IT_BASEIV"+aInfo[2])
					nAlqIBK := MaFisRet(nX,"IT_ALIQIV"+aInfo[2])
					nValIBK := Round(nBasIBK * (nAlqIBK/100), MsDecimais(_nMoeda))
					MaFisAlt("IT_VALIV"+aInfo[2], nValIBK, nX)

					//Actualiza aCols
					If nPosBasIBK > 0
						aCols[nX][nPosBasIBK] := nBasIBK
					EndIf
					If nPosAlqIBK > 0
						aCols[nX][nPosAlqIBK] := nAlqIBK
					EndIf
					If nPosValIBK >0
						aCols[nX][nPosValIBK] := nValIBK
					EndIf
				EndIf
			next
		EndIf
	Else
		xRet := CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
	EndIf
//Cambios para considerar minimos desde Generacion de Factura automatica
ElseIf !lXfis .and. _lCalcular .and. !(cPaisLoc == "ARG" .AND. xRet[1] == "IB4" .AND. CTIPOINSC == "N")
	If cCalcImp == "IBK" .And. Len(aMPer) > 0
		xRet[4] := CCOMinB2(_nValorMin,lMinIb,aMPer[4]+aMPer[1],xRet[4],xRet[20],nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
	Else
		xRet[4] := CCOMinB2(_nValorMin,lMinIb,xRet[3],xRet[4],xRet[20],nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
	EndIf
endif 

dbSelectArea( cAliasRot )
dbSetOrder( cOrdemRot )

If cCalculo=="V" .and. lPrimera == .T. .and. lMinIb == .T. 
	Asize(aMPer,0)
	lPrimera := .F.
Endif 
// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> __Return( aImposto )

Return( xRet )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99

Static Function M460VLNC(cTipo,cAlias,cProv,nItem)  
Local nBaseAbt:=0
Local nx:= 1           
Local aNFEDev:={}
Local nPos:=0
Local lVeriPrv:= .F.
Local aAreaAtu:={}
Local cTipCalc:="0"     
Local lDesc:= .T.
Local aAreaSF := {}
Local aAliasSD1:=SD1->(GetArea())
Local aAliasSD2:=SD2->(GetArea())
Local cAliasSD := ""
Local lRemito := .F.
Local lIsRemito := .F.
Local cDocRem := ""
Local cSerRem := ""
Local cDocFacR := ""
Local cSerFacR := ""
Local cValImp  := ""

Default cTipo  := ""
Default cAlias := ""
Default cProv  := ""
Default nItem  := 1

If AliasInDic("CCO")
	aAreaAtu:=GetArea()
	CCO->(DbSetOrder(1)) //CCO_FILIAL+CCO_CODPRO
    If CCO->(MsSeek(xFilial("CCO") + cProv) )  .And. !(CCO->CCO_CPERNC $ " 1") .And. !(CCO->CCO_CPERNC $ " 6")
		lVeriPrv:=.T.
		cTipCalc := CCO->CCO_CPERNC
	EndIf   
	RestArea(aAreaAtu)
EndIf
		    
aAreaSF:= IIF(cAlias== "SF2",SF1->(GetArea()),SF2->(GetArea()))
If  Type("aCols")=="A" .And. lVeriPrv
	If !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO")) .And. !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM"))
		lIsRemito := .T.
		cAliasSD := IIF(cAlias=="SF2","D2","D1")
		DBSelectArea("S" + cAliasSD)
		("S" + cAliasSD)->(DBSetOrder(IIF(cAliasSD == "D1",2,3))) //D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA o  D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM
		//Si existe el Remito de Devolución
		If MsSeek(IIF(cAliasSD == "D1",xFilial("SD1")+GetValorCl("D1_COD")+GetValorCl("D1_REMITO")+GetValorCl("D1_SERIREM")+M->F1_FORNECE+M->F1_LOJA,;
 			xFilial("SD2")+GetValorCl("D2_REMITO")+GetValorCl("D2_SERIREM")+M->F2_CLIENTE+M->F2_LOJA+GetValorCl("D2_COD")+GetValorCl("D2_ITEM")))

			//Si existe el Remito de venta
			DBSelectArea("S" + IIF(cAliasSD == "D1","D2","D1"))
			("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",3,2))) //D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM  o  D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
			If MsSeek(IIF(cAliasSD == "D1",xFilial("SD2")+SD1->D1_NFORI+SD1->D1_SERIORI+M->F1_FORNECE+M->F1_LOJA+SD1->D1_COD,;
				xFilial("SD1")+SD2->D2_COD+SD2->D2_NFORI+SD2->D2_SERIORI+M->F2_CLIENTE+M->F2_LOJA))
				//Si existe una factura
				cDocRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
				cSerRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")

				("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",17,21)))//D2_FILIAL+D2_SERIREM+D2_REMITO  o D1_FILIAL+D1_SERIREM+D1_REMITO

				If MsSeek(xFilial("S" + IIF(cAliasSD == "D1","D2","D1"))+ cSerRem + cDocRem)
					//Si encontro los datos de la factura, guarda doc y serie y pone la bandera de encontrado en .T.
					lRemito := .T.
					cDocFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
					cSerFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")
				EndIf
			EndIf
		EndIf
	EndIf
	If Type("aValFact")=="A" .And. Len(aValFact) > 0
		aNFEDev := aValFact
	Else
		For nx:= 1 to Len(aCols)
			If !(aCols[nx][Len(aCols[nx])])
				//Si es un remito y se encontro la factura ligada.
				If lIsRemito .And. lRemito
					nPos:=aScan(aNFEDev,{|x|x[3]==GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
		   			If nPos >0
		    			aNFEDev[nPos][2]:= aNFEDev[nPos][2]+MaFisRet(nX,"IT_VALMERC")
			   		Else
			    		Aadd(aNFEDev,{cDocFacR+cSerFacR,MaFisRet(nX,"IT_VALMERC"),GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
		   	 		EndIf
				Else
					If Iif(cTipo == "NCP" .and. IsInCallStack("lxn466forf6"), nX <= nItem ,.T.)
	   					nPos:=aScan(aNFEDev,{|x|x[1]==MaFisRet(nx,"IT_NFORI")+MaFisRet(nx,"IT_SERORI")} )
	   		 			If nPos >0  
	    					aNFEDev[nPos][2]:= aNFEDev[nPos][2]+MaFisRet(nX,"IT_VALMERC")
		   				Else
		    				Aadd(aNFEDev,{MaFisRet(nX,"IT_NFORI")+MaFisRet(nX,"IT_SERORI"),MaFisRet(nX,"IT_VALMERC")})
	   	 				EndIf
	   	 			EndIf	
       			EndIf
	       EndIf
		Next
	EndIf
					
	For nX:=1 to Len(aNFEDev)
		If cAlias== "SF2
			cColLiv:="SF1->F1_BASIMP"+aInfo[2]
			cValImp := "SF1->F1_VALIMP"+aInfo[2]
			SF1->(DBSetOrder(1))//F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA
			If SF1->(MsSeek(xFilial("SF1")+ aNFEDev[nX][1] +M->F2_CLIENTE+M->F2_LOJA,.F.)) 
				If cTipCalc== "2" .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO) == Year(SF1->F1_EMISSAO) ;
				                      .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )									  
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8".And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO);
										 .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf
		ElseIf cAlias== "SF1
			cColLiv:="SF2->F2_BASIMP"+aInfo[2]
			cValImp := "SF2->F2_VALIMP"+aInfo[2]
			SF2->(DBSetOrder(1)) //F2_FILIAL+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA
			If SF2->(MsSeek(xFilial("SF2")+ aNFEDev[nX][1] +M->F1_FORNECE+M->F1_LOJA,.F.)) 
				If cTipCalc== "2" .And. aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO) == Year(SF2->F2_EMISSAO);
				                      .And.  aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO);
										  .And.  aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf	
		EndIf	
	Next  
EndIF
RestArea(aAreaSF)
SD1->(RestArea(aAliasSD1))
SD2->(RestArea(aAliasSD2))
Return(nBaseAbt)


Static Function M100RLIM(cInfo, cTipoContr)

	Local aMin		:= {}
	Local cQuery	:= ""
	Local aArea		:= SD2->(GetArea())
	Local nTes		:= 0
	Local cTes		:= ""
	Local cCod		:= ""
	
	Default cTipoContr := ""
	
	RestArea(aArea)
	
	AADD(aMin, 0)
	AADD(aMin, 0)
	AADD(aMin, 0)

	If cPaisLoc == "ARG" .And. funname() $ "FINC021|FINA096"
		Return aMin
	Endif	
	
	If (Type("aHeader") == "U" .Or. Type("aCols") == "U")
		Return aMin
	Else
		nTes := IIf(AllTrim(FunName()) $ "MATA410",aScan(aHeader,{|x| AllTrim(x[2]) == "C6_TES"}),aScan(aHeader,{|x| AllTrim(x[2]) == "D2_TES"}))
		cTes := IIf(ReadVar() == "M->D2_TES", M->D2_TES, IIf(ReadVar() == "C6_TES", C6_TES, aCols[n,nTes]))
	EndIf
	
	cQuery 	:= 	"SELECT "
	cQuery 	+= 		"F4_CF "
	cQuery 	+= 	"FROM"
	cQuery 	+= 		RetSqlName("SF4")+ " SF4 "
	cQuery 	+= 	"WHERE "
	cQuery 	+= 		"F4_CODIGO='" +cTes+"' AND "
	cQuery 	+= 		"F4_FILIAL='" + xFilial("SF4")+"' AND "
	cQuery	+=	"SF4.D_E_L_E_T_=' ' "
	
	cQuery :=	ChangeQuery(cQuery)
	TcQuery cQuery New Alias "tmpGetCod"  
	
	If tmpGetCod->(!Eof())		
		cCod		:= (tmpGetCod->F4_CF)	
		DbCloseArea()
    EndIf
	
	cQuery 	:= 	"SELECT "
	cQuery 	+= 		"FF_TPLIM, FF_LIMITE "
	cQuery 	+= 	"FROM"
	cQuery 	+= 		RetSqlName("SFF")+ " SFF "
	cQuery 	+= 	"WHERE "
	cQuery 	+= 		"FF_CFO_V='" +cCod+"' AND "
	cQuery 	+= 		"FF_IMPOSTO='" +cInfo+"' AND "
	If !Empty(cTipoContr) //Se filtra el Tipo Contribuyente
		cQuery +=	"FF_TIPO = '" + cTipoContr + "' AND "
	EndIf
	cQuery 	+= 		"FF_FILIAL='" + xFilial("SFF")+"' AND "
	cQuery	+=	"SFF.D_E_L_E_T_=' ' "
	
	cQuery :=	ChangeQuery(cQuery)
	TcQuery cQuery New Alias "tmpGetLim"  
	
	If tmpGetLim->(!Eof())		
		aMin[1]	:= (tmpGetLim->FF_LIMITE)
		aMin[2] 	:= (tmpGetLim->FF_TPLIM)
		aMin[3] := cCod		
    EndIf
    DbCloseArea()
    
Return aMin


//Obtener el valor acumulado del dia
Static Function ObtAcum(cCampo, nLimite)
		
	Local cQuery	:= ""
	Local aTotal	:= {0,0,.F.,0}
	Local cAliasSD1	:=  ""
	Local cAliasSF3	:= ""
	Local cCliente	:= Iif(ALLTRIM(FUNNAME()) $ "MATA410",M->C5_CLIENTE,IIF (ALLTRIM(FUNNAME()) $ "MATA468N|MATA461" ,SC5->C5_CLIENTE , IIF (ALLTRIM(FUNNAME()) $ "MATR700" ,SF2->F2_CLIENTE , M->F2_CLIENTE)))
	Local cLoja		:= Iif(ALLTRIM(FUNNAME()) $ "MATA410",M->C5_LOJACLI,IIF (ALLTRIM(FUNNAME()) $ "MATA468N|MATA461" ,SC5->C5_LOJACLI , IIF (ALLTRIM(FUNNAME()) $ "MATR700" ,SF2->F2_LOJA , M->F2_LOJA)))
	
	If funname() == "FINC021"
		Return aTotal
	EndIf

	cAliasSD1 := CriaTrab(Nil,.F.)    
	// Detectar notas de credito
	cQuery := "SELECT DISTINCT "
	cQuery += "D1_NFORI, D1_FORNECE, D1_LOJA, D1_CF, "
	cQuery += "Sum(D1_BASIMP" + cCampo + ") D1_BASIMP, Sum(D1_VALIMP" + cCampo + ") D1_VALIMP "
	cQuery += "FROM " + RetSQLName("SD1") + " "
	cQuery += "WHERE "
	cQuery += "D1_FILIAL = '" + xFilial("SD1") + "' AND "
	cQuery += "D1_FORNECE = '" + cCliente + "' AND "
	cQuery += "D1_LOJA = '" + cLoja + "' AND "
	cQuery += "D1_ESPECIE IN ('NCC') AND "
	cQuery += "D1_EMISSAO = '"+ Dtos(DDataBase) + "' AND "
	cQuery += "D_E_L_E_T_ = '' GROUP BY D1_NFORI, D1_CF, D1_FORNECE, D1_LOJA" 
	
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSD1, .T., .T. )
	
	If !(cAliasSD1)->(EOF())
		dbSelectArea(cAliasSD1)
		(cAliasSD1)->(dbGoTop())
		While !(cAliasSD1)->(EOF())
		
			cAliasSF3 := CriaTrab(Nil,.F.)
			
			cQuery := "SELECT "
			cQuery += "F3_BASIMP" + cCampo + " SF3BASE, "
			cQuery += "F3_VALIMP" + cCampo + " SF3IMP, "
			cQuery += "F3_VALMERC SF3VAL "
			cQuery += "FROM "
			cQuery += RetSQLName("SF3") + " "
			cQuery += "WHERE "
			cQuery += "F3_FILIAL = '" + xFilial("SF3") + "' AND "
			cQuery += "F3_CLIEFOR ='" + cCliente + "' AND F3_LOJA = '" + cLoja + "' AND "
			cQuery += "F3_NFISCAL = '" + (cAliasSD1)->D1_NFORI + "' AND "
			cQuery += "F3_TIPOMOV = 'V' AND "
			cQuery += "F3_ESPECIE IN ('NF') AND "
			cQuery += "F3_EMISSAO = '" + Dtos(DDATABASE) + "' AND "
			cQuery += "D_E_L_E_T_ = '' "
			
			cQuery := ChangeQuery(cQuery)
			dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSF3, .T., .T. )
			
			While (cAliasSF3)->(!EOF())
				If (cAliasSF3)->SF3BASE == (cAliasSD1)->D1_BASIMP .or. (((cAliasSF3)->SF3VAL)* ((100 - SFF->FF_REDBASE) / 100)) == (cAliasSD1)->D1_BASIMP
					aTotal[1]	+= aTotal[1] - (cAliasSF3)->SF3VAL
					aTotal[2]	+= aTotal[2] - (cAliasSF3)->SF3IMP
					aTotal[3]	:= .T.
				EndIf
				(cAliasSF3)->(dbSkip())	
			EndDo 
			(cAliasSF3)->(dbCloseArea())
			(cAliasSD1)->(dbSkip())	
		EndDo
		(cAliasSD1)->(dbCloseArea())
	EndIF
	
	cAliasSF3 := CriaTrab(Nil,.F.)
		
	cQuery := "SELECT "
	cQuery += "Sum(F3_BASIMP" + cCampo + ") SF3VAL, "
	cQuery += "Sum(F3_VALIMP" + cCampo + ") SF3IMP "
	cQuery += "FROM "
	cQuery += RetSQLName("SF3") + " "
	cQuery += "WHERE "
	cQuery += "F3_FILIAL = '" + xFilial("SF3") + "' AND "
	cQuery += "F3_CLIEFOR ='" + cCliente + "' AND F3_LOJA = '" + cLoja + "' AND "
	cQuery += "F3_ESPECIE IN ('NF', 'NDC', 'NCE') AND "
	cQuery += "F3_EMISSAO = '" + Dtos(DDATABASE) + "' AND "
	cQuery += "D_E_L_E_T_ = '' "
	
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSF3, .T., .T. )
	
	If (cAliasSF3)->(!EOF()) .and. (cAliasSF3)->SF3IMP > 0
		(cAliasSF3)->(dbCloseArea())
			
		cAliasSF3 := CriaTrab(Nil,.F.)
		
		cQuery := "SELECT "
		cQuery += "Sum(F3_BASIMP" + cCampo + ") SF3VAL, "
		cQuery += "Sum(F3_VALIMP" + cCampo + ") SF3IMP "
		cQuery += "FROM "
		cQuery += RetSQLName("SF3") + " "
		cQuery += "WHERE "
		cQuery += "F3_FILIAL = '" + xFilial("SF3") + "' AND "
		cQuery += "F3_CLIEFOR ='" + cCliente + "' AND F3_LOJA = '" + cLoja + "' AND "
		cQuery += "F3_ESPECIE IN ('NF', 'NDC', 'NCE') AND "
		cQuery += "F3_VALIMP" + cCampo + ">0 AND "
		cQuery += "F3_EMISSAO = '" + Dtos(DDATABASE) + "' AND "
		cQuery += "D_E_L_E_T_ = '' "
		
		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), cAliasSF3, .T., .T. )
		
		If (cAliasSF3)->(!EOF())
			aTotal[1]	+= (cAliasSF3)->SF3VAL
			aTotal[2]	+= (cAliasSF3)->SF3IMP
			aTotal[3]	:= .T.
			(cAliasSF3)->(dbCloseArea())
		EndIf
	Else
		aTotal[1]	+= (cAliasSF3)->SF3VAL
		aTotal[2]	+= (cAliasSF3)->SF3IMP
		aTotal[3]	:= .T.
		(cAliasSF3)->(dbCloseArea())
	EndIf 
			
Return aTotal

Static Function M460VPER(cTipo,cAlias,cProv, cCalculo)
Local nx       := 1
Local nPos     := 0
Local lVeriPrv := .F.
Local aAreaAtu := {}
Local cTipCalc := "0"
Local nImpPer  := 0
Local nSumPer  := 0
Local nSumBas  := 0
Local lCalPer  := .T.
Local cClieFor := Iif(cAlias == "SF1", M->F1_FORNECE, M->F2_CLIENTE)
Local cLoja    := Iif(cAlias == "SF1", M->F1_LOJA, M->F2_LOJA)
Local nPosCols := 0
Local nPosNumD := aScan(aHeader,{|x| AllTrim(x[2]) == Iif(cAlias == "SF1", "D1_NFORI", "D2_NFORI")} )	//Numero de Documento Original
Local nPosS    := aScan(aHeader,{|x| AllTrim(x[2]) == Iif(cAlias == "SF1", "D1_SERIORI", "D2_SERIORI")} )	//Serie de Documento Original
Local nPosTES  := aScan(aHeader,{|x| AllTrim(x[2]) == Iif(cAlias == "SF1", "D1_TES", "D2_TES")} ) 	//TES
Local nPosDel  := Len(aCols[n])	//Item Eliminado?

If AliasInDic("CCO")
	aAreaAtu:=GetArea()
	CCO->(DbSetOrder(1)) //CCO_FILIAL+CCO_CODPRO
    If CCO->(MsSeek(xFilial("CCO") + cProv) )  .And. (CCO->CCO_CPERNC $ " 6")
		lVeriPrv:=.T.
		cTipCalc := CCO->CCO_CPERNC
		nImpPer := CCO->CCO_IMPPER
	EndIf   
	RestArea(aAreaAtu)
EndIf

If lVeriPrv
	nx := n
	If !(aCols[nx][Len(aCols[nx])]) .And. Len(AllTrim(aCols[nx,nPosNumD])) > 0
   		nPos:=aScan(aDocOrig,{|x|x[1]==MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI")} )
   		nPosCols:=aScan(aCols,{|x|x[nPosNumD] == MaFisRet(nx,"IT_NFORI") .And. x[nPosS]==MaFisRet(nx,"IT_SERORI") .And. x[nPosDel]== .F. .And. x[nPosTES] == Iif(READVAR() == "M->D2_TES", M->D2_TES, aCols[nx,nPosTES])} )
   		If nPos == 0 .Or. (nPos > 0 .And. nPosCols == 0)
   			If nPos == 0  
	   			Aadd(aDocOrig,{MaFisRet(nX,"IT_NFORI") + MaFisRet(nX,"IT_SERORI"), 0, 0, .T.})
	   		EndIf
	    		 
    		dbSelectArea("SF3")
			SF3->(dbSetOrder(4)) //F3_FILIAL+F3_CLIEFOR+F3_LOJA+F3_NFISCAL+F3_SERIE
			If SF3->(MsSeek(xFilial("SF3") + cClieFor + cLoja + MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI")))
				While SF3->(!Eof()) .And. SF3->F3_FILIAL + SF3->F3_CLIEFOR + SF3->F3_LOJA + SF3->F3_NFISCAL + SF3->F3_SERIE == xFilial("SF3") + cClieFor + cLoja + MaFisRet(nx,"IT_NFORI") + MaFisRet(nX,"IT_SERORI")
					nSumPer += &("SF3->F3_VALIMP" + aInfo[2])
					nSumBas += &("SF3->F3_BASIMP" + aInfo[2])
					If nPos > 0
						aDocOrig[nPos, 2] := nSumBas
						aDocOrig[nPos, 3] := nSumPer
					Else 
						aDocOrig[Len(aDocOrig), 2] := nSumBas
						aDocOrig[Len(aDocOrig), 3] := nSumPer
					EndIf
					SF3->(dbSkip())
				End
			EndIf
   	 	EndIf 
   	 			
	EndIf

	If (nImpPer < nSumPer .And. nPos == 0) .Or. (nImpPer < nSumPer .And. nPos > 0 .And. nPosCols == 0) .And. cCalculo == "B"
		If !(MsgYesNo(OemToAnsi("¿Desea revertir la percepción?")))
			lCalPer := .F.
			If nPos > 0
				aDocOrig[nPos, 4] := lCalPer
			Else
				aDocOrig[Len(aDocOrig), 4] := lCalPer
			EndIf
		Else
			lCalPer := .T.
			If nPos > 0
				aDocOrig[nPos, 4] := lCalPer
			Else
				aDocOrig[Len(aDocOrig), 4] := lCalPer
			EndIf
		EndIf
	ElseIf nPos > 0
		If nImpPer < aDocOrig[nPos, 2]
			lCalPer := aDocOrig[nPos, 4]
		EndIf	
	End If  
EndIf		    
Return(lCalPer)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ LimpiaNfIB  º Autor ºEmanuel Villicaña º Data º  12/09/14  º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Limpia la Base, Alicuota, percepcion que se haya calculado º±±
±±º          ³ previamente dejandola en 0.                                º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ M460XIBP, M100XIBP                                         º±±
±±ºÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function LimpiaNfIB(nPosc)
Local aArea	:= GetArea()
Local nX		:= 0
Local lMata466 := Iif(FunName() == "MATA466N",.T. ,.F.)

If Type("aCols") <> "U" .and. Len(aCols) > 0
	For nX :=1 to len(aCols)
		If (lMata466 .And. MaFisFound("IT",nX)) .or. !lMata466
			ActItemNf(nX,nPosc,{0,0,0},.T.)
		EndIf	
	Next nX
Endif 

RestArea( aArea )	
Return 

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ ActStaFeIBK º Autor ºEmanuel Villicaña º Data º  12/09/14  º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Actualiza la base , aliq y percepcion en el ultimo item.   º±±
±±º          ³                                                            º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ M460XIBP, M100XIBP                                         º±±
±±ºÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function ActStaFeIBK(nItem,nBase,nPosc,nAliq)
Local aArea	:= GetArea()
Local aAreaSFC:= SFC->(GetArea())
Local cTes		:= MaFisRet(nItem,"IT_TES")	 
Local nPos		:= 0
Local nX		:= 0 
Local nxItem	:= 0
Local nxBase	:= 0
Local cNameFun 	:= FunName()
Local nTamAcols	:= 0 
Local lNoMaFis	:= cNameFun == "MATA410"
Local nUltItem  := 0

Default nAliq := 0
Static aDoc := {}
 	
nPosc := NumCpoImpVar(nPosc)

If FindFunction("ActCabNf") .and. FindFunction("LimpiaNfIB")

	ActCabNf(nPosc,"IBK",0,0)
	LimpiaNfIB(nPosc) // Dejar bases en blanco
EndIf

If Type("aCols") <> "U" .and. Len(aCols) > 0
	
	nTamAcols :=len(aCols)
	If nTamAcols == 1 // Inicializo Arreglo  
		Asize(aDoc,0)
	Endif 

	nPos := Ascan(aDoc,{|x| x[1]== nItem })

	If nPos == 0 
		AAdd(aDoc,{nItem,nBase,cTes,nAliq})
	Else
		aDoc[nPos][2] := nBase
		aDoc[nPos][3] := cTes	
		aDoc[nPos][4] := nAliq
	Endif 
Else
		Asize(aDoc,0)
Endif 

If Len(aDoc) > 0
	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	For nX	:= 1 To Len(aDoc)
		nxItem := aDoc[nX][1] 
		If    nTamAcols  >= nxItem  .and. aDoc[nX][1] <> nItem .and. Iif(lNoMaFis, !aCols[nX,Len(aCols[nX])],MaFisRet(nxItem,"IT_DELETED") == .F. )
			If SFC->(MsSeek(xFilial("SFC") + Iif(lNoMaFis, aDoc[nX][3], MaFisRet(nxItem,"IT_TES")) + "IBK"))
				nxBase	+= aDoc[nX][2]
				ActItemNf(nxItem,nPosc,{aDoc[nX][2],aDoc[nX][4],0},.T.)
				nUltItem := nxItem
			Endif 
		Endif 
	Next nX
Endif

If nItem < nUltItem .And. Len(aMPer) > 0
	nPos := Ascan(aDoc,{|x| x[1]== nUltItem })
	ActItemNf(nUltItem,nPosc,{aDoc[nPos][2] + aMPer[1],aDoc[nPos][4],0},.T.)
EndIF
RestArea( aAreaSFC )
RestArea( aArea )
Return nxBase

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ Obtbase     º Autor ºEmanuel Villicaña º Data º  06/02/15  º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Retorna la base de un determinado impuesto dependiendo del º±±
±±º          ³ ITEM.                                                      º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ M100XIBP                                                   º±±
±±ºÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Obtbase(nI,cImpuesto)
Local aArea		:= GetArea()
Local aAreaSFC	:= SFC->(Getarea())
Local nBasx		:= 0
Local cDescSai	:= SuperGetMV("MV_DESCSAI" , .T., "1" )

SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
If !MaFisRet(nI,"IT_DELETED")
	If (SFC->(MsSeek(xFilial("SFC") + MaFisRet(nI,"IT_TES") + cImpuesto)))
		nBasx := MaFisRet(nI,"IT_VALMERC")+MaFisRet(nI,"IT_FRETE")+MaFisRet(nI,"IT_DESPESA")+MaFisRet(nI,"IT_SEGURO")
		If cDescSai == '1' 
			nBasx	+= MaFisRet(nI,"IT_DESCONTO")
		Endif

		If SFC->FC_LIQUIDO=="S"
			nBasx -= MaFisRet(nI,"IT_DESCONTO")
		Endif
	Endif
Endif 

SFC->(RestArea(aAreaSFC))
RestArea( aArea )
Return nBasx	

/*
Funcion: ObtbaseT
Descripción: Función para regresar la base total de un impuesto sin incluir el item de calculo actual
Parametros:
	cImpuesto: Impuesto de calculo
	nAliq: Alicouta de calculo actual
	nNumImp: Campo libro del impuesto
	nItemAt: Item actual
Retorno:
	nBasx: Suma de las bases de los otros items que calculan el impuesto.
*/
Static Function ObtbaseT(cImpuesto, nAliq, cNumImp, nItemAt, _nIvaTU)
Local aArea		:= GetArea()
Local aAreaSFC	:= SFC->(Getarea())
Local nBasx		:= 0
Local cDescSai	:= SuperGetMV("MV_DESCSAI" , .T., "1" )
Local nI		:= 0

Default _nIvaTU := 0

	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	For nI := 1 To Len(aCols)
		If IIf(FunName() $ "MATA410", nI < nItemAt, nI <> nItemAt) .And. !MaFisRet(nI,"IT_DELETED")
			If (SFC->(MsSeek(xFilial("SFC") + MaFisRet(nI,"IT_TES") + cImpuesto)))
				If MaFisRet(nI,'IT_ALIQIV'+cNumImp) == nAliq
					If _nIvaTU != 0 
						nBasx += (MaFisRet(nI,"IT_VALMERC")+MaFisRet(nI,"IT_FRETE")+MaFisRet(nI,"IT_DESPESA")+MaFisRet(nI,"IT_SEGURO")) * ( 1 + _nIvaTU)
					Else
						nBasx += MaFisRet(nI,"IT_VALMERC")+MaFisRet(nI,"IT_FRETE")+MaFisRet(nI,"IT_DESPESA")+MaFisRet(nI,"IT_SEGURO")
					Endif
					If cDescSai == '1' 
						nBasx	+= MaFisRet(nI,"IT_DESCONTO")
					Endif
			
					If SFC->FC_LIQUIDO=="S"
						nBasx -= MaFisRet(nI,"IT_DESCONTO")
					Endif
				EndIf
			Endif
		Endif 
	Next nI

SFC->(RestArea(aAreaSFC))
RestArea( aArea )
Return nBasx

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcion   ³ObtIva    ³ Autor ³Raul Ortiz             ³ Data ³ 19/04/16 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Validacion de Minimos de Retencion de IIBB para Argentina   ³±±
±±³          ³CCO                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³M460xIbp, M100xIbp                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function ObtIva(nI,lOpcAuto,cTesAuto)
Local aArea		:= GetArea()
Local aAreaSFC	:= SFC->(Getarea())
Local nAliq		:= 0
Local cImpIva := ""
Local cImpost	:= "IV"
Local cTesItem	:= ""
Default lOpcAuto := .F.
Default cTesAuto := ""

cTesItem := Iif(lOpcAuto,cTesAuto,MaFisRet(nI,"IT_TES"))

	DbSelectArea("SFC")
	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	Iif (lOpcAuto,.T.,!MaFisRet(nI,"IT_DELETED"))
		If (SFC->(MsSeek(xFilial("SFC") + cTesItem)))
			While !EOF() .and. cTesItem == SFC->FC_TES
				If cImpost $ SFC->FC_IMPOSTO 
					if lOpcAuto
						cImpIva := SFC->FC_IMPOSTO 
					else
						nAliq := POSICIONE("SFB",1,xFilial("SFB")+SFC->FC_IMPOSTO,"FB_ALIQ")
					endif
					Exit
				EndIf
				SFC->(dbSkip())
			Enddo
		Endif


SFC->(RestArea(aAreaSFC))
RestArea( aArea )
Return iif(lOpcAuto,cImpIva,nAliq)


static Function GetValorCl(cCampo,nX)

Default nX := 1

If type ("oGetDados:oBrowse:nAt") <> "U"
	nX := oGetDados:oBrowse:nAt
EndIf

Return aCols[nX,GdFieldPos(cCampo, aHeader)]

/*
Funcion: GetBaseFis
Descripción: Función para regresar la base total de un impuesto sin incluir el item de calculo actual
Parametros:
	nItem: Item actual
	cCpoLiv: Campo libro del impuesto
Retorno:
	nBaseImp: Base del impuesto guardada en el arreglo aNfItem 
*/ 
Static Function GetBaseFis(nItem, cCpoLiv)
Local nBaseImp	:= 0
Local aBaseImp	:= {}

	cCpoLiv := NumCpoImpVar(cCpoLiv)

	aBaseImp := MaFisRet(nItem,"IT_BASEIMP")
	If Len(aBaseImp) > 0
		nBaseImp := aBaseImp[cCpoLiv]
	EndIf

Return nBaseImp
