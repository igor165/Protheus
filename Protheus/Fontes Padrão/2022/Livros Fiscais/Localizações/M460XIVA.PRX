#include "SIGAWIN.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#INCLUDE "PROTHEUS.CH"                           

#DEFINE _DEBUG   .F.   // Flag para Debuggear el codigo
#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _TES_CFO   10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _IMPINCID  15
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _ALIQDESG  19
#DEFINE _FCFILIAL  1
#DEFINE _FCTES     2
#DEFINE _FCIMPOSTO 3
#DEFINE _FCPROV    4
#DEFINE _FCCALCULO 5
#DEFINE _FCINCIMP  6
#DEFINE _FCLIQUIDO 7

Function M460xiva(cCalculo,nItem,aInfo,cXFisRap)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lXFis,xRet,nOrdSFC,nRegSFC,nBase
Local _nMoeda := 1
Local nI      := 0
Local aImpRef := {}
Local aImpVal := {}
Local cIncIB  := ''
Local cCod    := " "
Local cLoja   := " "
Local nPos    := 0
Local cPesq   := " "
Local cAlias  := IIf(Type("M->F1_FORNECE")=="C" ,"SF1",Iif (Type("M->F2_CLIENTE")=="C","SF2",""))
Local cPesqSFC:= " "
Local nPosSFC := 0


SetPrvt("CALIASROT,CORDEMROT,AITEMINFO,AIMPOSTO,_CPROCNAME,_CZONCLSIGA")
SetPrvt("_LAGENTE,_LEXENTO,AFISCAL,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NALICDESG")
SetPrvt("_NVALORMIN,_NREDUCIR,")

Default cXFisRap := ""

/*/
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
°°+-----------------------------------------------------------------------+°°
°°|Funcion   |M460xIVA  | Autor | Jose Luis Otermin      |Fecha | 22.07.99|°°
°°+----------+------------------------------------------------------------|°°
°°|Descrip.  |  Programa que Calcula   IVA                                |°°
°°+----------+------------------------------------------------------------|°°
°°|Uso       | MATA100, llamado por un punto de entrada                   |°°
°°+-----------------------------------------------------------------------|°°
°°|         ACTUALIZACIONES EFECTUADAS DESDE LA CODIFICACION INICIAL      |°°
°°+-----------------------------------------------------------------------|°°
°°|Programador | Fecha  | BOPS      |  Motivo de la Alteracion            |°°
°°+------------+--------+-----------+-------------------------------------|°°
°°|            |  /  /  |           |                                     |°°
°°+-----------------------------------------------------------------------+°°
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
//-----------------------------------------------------
// Nota:
// Debe registrarse al Cliente en la Tabla SFH en caso
// que sea Agente de Percepcion o este Exento en una ZF.
// Se utiliza el parametro MV_AGENTE
// Significado de las posiciones de MV_AGENTE
// SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
// SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
// SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
// SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
// SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
//-----------------------------------------------------
// Nota:
// Debe utilizarse el parametro MV_EXENTO
// Significado de las posiciones de MV_EXENTO
// SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
// SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
// SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
// SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
// SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
//-----------------------------------------------------
/*/

// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _DEBUG   .F.   // Flag para Debuggear el codigo

// Indices de aImposto
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _NOMIMPOST 01
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _ALIQUOTA  02
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _BASECALC  03
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _IMPUESTO  04
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _TES_CFO   10
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _RATEOFRET 11
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _IMPFLETE  12
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _RATEODESP 13
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _IMPGASTOS 14

// Subindices de aItemINFO
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _VLRTOTAL  3
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _FLETE     4
// Movido para o inicio do arquivo pelo assistente de conversao do AP5 IDE em 09/09/99 ==> #DEFINE _GASTOS    5

lXfis:=(MaFisFound()  .And. ProcName(1)<>"EXECBLOCK")
cAliasRot  := Alias()
cOrdemRot  := IndexOrd()

If !lXFis
	aItemINFO  := ParamIxb[1]
	aImposto   := ParamIxb[2]
	xRet:=aImposto
Else
	xRet:=0
Endif

_cProcName := "M460xIVA"

_cZonClSIGA:= SM0->M0_ESTCOB // Zona Fiscal del Cliente SIGA
_lAgente   := .T.     // En este impuesto el Cliente SIGA siempre cobra IVA.
_lExento   := .F.     // Este dato no se lleva en cuenta.

nPos := 0
nPosSFC := 0
lArrayIb	:= Type("aImpIB2") <> "U"
lImpSFC	:= Type("aImpSFC") <> "U"

If cAlias== "SF2
	cCod:=	M->F2_CLIENTE
	cLoja:=	M->F2_LOJA

ElseIf cAlias== "SF1
	cCod:=	M->F1_FORNECE
	cLoja:=	M->F1_LOJA
EndIf

If lXFis .And. lArrayIb
	cPesq:=xFilial("SF4")+MaFisRet(nItem,"IT_TES")+MaFisRet(nItem,"IT_CF")+MaFisRet(,"NF_CLIFOR" )+cCod+cLoja+MaFisRet(,"NF_PROVENT")+MaFisRet(nItem,"IT_PROVENT")+aInfo[1]+SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)
	nPos:=Ascan(aImpIB2,{|item| item[1] == cPesq})
EndIf

If nPos == 0
	aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{If(lXFis,{cCalculo,nItem,aInfo},ParamIxb), _cProcName, _lAgente,_cZonClSIGA,lXFis},.T.)
	If lArrayIb
		If nPos == 0
			Aadd(aImpIB2,{cPesq,aFiscal})
		Else
			aImpIB2[nPos][2] := aFiscal
		EndIf
	EndIf
Else
	aFiscal:= aImpIB2[nPos][2]
Endif

_lCalcular :=  aFiscal[1]
_lEsLegal  :=  aFiscal[2]
_nAlicuota :=  aFiscal[3]
_nValorMin :=  aFiscal[4]
_nReducir  :=  aFiscal[5]
cIncIB     :=  aFiscal[6]
_nMoeda    :=  aFiscal[7]
_nAlicDesg :=  aFiscal[11]

IF _DEBUG
	msgstop(_lCalcular, "Calcular - "+_cProcName)
	msgstop(_lEslegal , "Es Legal - "+_cProcName)
	msgstop(_nAlicuota, "Alicuota - "+_cProcName)
	msgstop(_nValorMin, "ValorMin - "+_cProcName)
	msgstop(_nReducir , "Reducir  - "+_cProcName)
ENDIF

// NO se tiene en cuenta el valor _lCalcular porque este impuesto SIEMPRE
// Se cobra.
IF  _lEsLegal
		
	If !lXFis
		aImposto[_ALIQUOTA]  := _nAlicuota // Alicuota de Zona Fiscal del Proveedor
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]  // Base de Cálculo
		aImposto[_ALIQDESG]  := _nAlicDesg
		If Subs(aImposto[5],4,1) == "S"  .And. Len(AIMPOSTO) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
		IF _DEBUG
			msgstop(aImposto[_ALIQUOTA], "aImposto[_ALIQUOTA] - "+_cProcName)
			msgstop(aImposto[_BASECALC], "aImposto[_BASECALC] - "+_cProcName)
		ENDIF
		//+---------------------------------------------------------------+
		//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
		//+---------------------------------------------------------Lucas-+
		aImposto[_IMPINCID]:=cIncIB
		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif
		//+---------------------------------------------------------------+
		//¦ Efectua el Cálculo del Impuesto                               ¦
		//+---------------------------------------------------------------+
		If _nAlicDesg > 0
			aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100),MsDecimais(_nMoeda))
			aImposto[_IMPUESTO]  := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100)
		Else
			aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100),MsDecimais(_nMoeda))
		EndIf
		xRet:=aImposto
	Else
		If lImpSFC
			cPesqSFC 	:= xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1]
			nPosSFC 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
		EndIf
	
		If !Empty(cXFisRap)
			nBase:=MaFisRet(nItem,"IT_VALMERC")
			If GetNewPar('MV_DESCSAI','1')=='1'
				nBase	+= MaFisRet(nItem,"IT_DESCONTO")
			Endif

			If nPosSFC == 0
				nOrdSFC:=(SFC->(IndexOrd()))
				nRegSFC:=(SFC->(Recno()))
				SFC->(DbSetOrder(2))
			EndIf
			If !Empty(cIncIB)
				//+---------------------------------------------------------------+
				//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
				//+---------------------------------------------------------------+
				If !Empty(cIncIB)
					aImpRef:=MaFisRet(nItem,"IT_DESCIV")
					aImpVal:=MaFisRet(nItem,"IT_VALIMP")
					For nI:=1 to Len(aImpRef)
						If !Empty(aImpRef[nI])
							IF Trim(aImpRef[nI][1])$cIncIB
								nBase+=aImpVal[nI]
							Endif
						Endif
					Next
				Endif
			EndIf

			//Tira os descontos se for pelo liquido
			If nPosSFC == 0
				nOrdSFC:=(SFC->(IndexOrd()))
				nRegSFC:=(SFC->(Recno()))
				SFC->(DbSetOrder(2))
			EndIf
			If IIF(nPosSFC>0,.T.,(SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))))
				If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )
					nBase -= MaFisRet(nItem,"IT_DESCONTO")
				Endif
				If nPosSFC == 0 .and. lImpSFC
					AADD(aImpSFC,{SFC->FC_FILIAL,SFC->FC_TES,SFC->FC_IMPOSTO,SFC->FC_PROV,SFC->FC_CALCULO,SFC->FC_INCIMP,SFC->FC_LIQUIDO})
				EndIf
			Endif
			xRet := {0,0,0}
			xRet[1] := nBase
			xRet[2] := _nAlicuota
			If "V" $ cXFisRap
				If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCCALCULO]=="T",SFC->FC_CALCULO=="T")
					nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota)
				Endif
				If cPaisLoc == "ARG" .AND. nModulo == 12
					If _nAlicDesg > 0
						xRet[3] := Round((nBase * (_nAlicuota / 100)),2)
						xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
					Else
						xRet[3] := Round((nBase * (_nAlicuota / 100)),2)
					EndIf
				Else
					xRet[3] := Round((nBase*(_nAlicuota/100)),MsDecimais(_nMoeda))
					If _nAlicDesg > 0
						xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
					EndIf
				Endif
			Endif
			If nPosSFC == 0
				SFC->(DbSetOrder(nOrdSFC))
				SFC->(DbGoto(nRegSFC))
			EndIf
		Else
			Do Case
				Case cCalculo=="A"
					xRet:=_nAlicuota
				Case cCalculo=="B"
					nBase:=MaFisRet(nItem,"IT_VALMERC")
					If GetNewPar('MV_DESCSAI','1')=='1'
						nBase	+= MaFisRet(nItem,"IT_DESCONTO")
					Endif
					//Tira os descontos se for pelo liquido
					nOrdSFC:=(SFC->(IndexOrd()))
					nRegSFC:=(SFC->(Recno()))
					SFC->(DbSetOrder(2))
					If (SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
						If SFC->FC_LIQUIDO=="S"
							nBase -= MaFisRet(nItem,"IT_DESCONTO")
						Endif
					Endif
					xRet:=nBase
					SFC->(DbSetOrder(nOrdSFC))
					SFC->(DbGoto(nRegSFC))
				Case cCalculo=="V"
					If nPosSFC == 0
						nOrdSFC:=(SFC->(IndexOrd()))
						nRegSFC:=(SFC->(Recno()))
						SFC->(DbSetOrder(2))
						SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
					EndIf
					If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCCALCULO]=="T",SFC->FC_CALCULO=="T")
						nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota)
					Else				
						If GetNewPar('MV_DESCSAI','1')=='2'
							nBase:=MaFisRet(nItem,"IT_VALMERC")
							If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )
								nBase -= MaFisRet(nItem,"IT_DESCONTO")
							EndIf
						Else
							nBase:=MaFisRet(nItem,"IT_VALMERC")	
							If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N" )
								nBase += MaFisRet(nItem,"IT_DESCONTO")
							EndIf
						Endif
					Endif
					If !Empty(cIncIB)
						//+---------------------------------------------------------------+
						//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
						//+---------------------------------------------------------------+
						If !Empty(cIncIB)
							aImpRef:=MaFisRet(nItem,"IT_DESCIV")
							aImpVal:=MaFisRet(nItem,"IT_VALIMP")
							For nI:=1 to Len(aImpRef)
								If !Empty(aImpRef[nI])
									IF Trim(aImpRef[nI][1])$cIncIB
										nBase+=aImpVal[nI]
									Endif
								Endif
							Next
						Endif
					Else
						If nPosSFC == 0
							nOrdSFC:=(SFC->(IndexOrd()))
							nRegSFC:=(SFC->(Recno()))
							SFC->(DbSetOrder(2))
							lFindSFC := SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))
							//Tira os descontos se for pelo liquido
							If lFindSFC
								cImpIncid:=Alltrim(SFC->FC_INCIMP)
							Endif
						Else
							cImpIncid:=Alltrim(aImpSFC[nPosSFC][_FCINCIMP])
						EndIf
						//+---------------------------------------------------------------+
						//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
						//+---------------------------------------------------------------+
						If !Empty(cImpIncid)
							aImpRef:=MaFisRet(nItem,"IT_DESCIV")
							aImpVal:=MaFisRet(nItem,"IT_VALIMP")
							For nI:=1 to Len(aImpRef)
								If !Empty(aImpRef[nI])
									IF Trim(aImpRef[nI][1])$cImpIncid
										nBase+=aImpVal[nI]
									Endif
								Endif
							Next
						Endif
						If nPosSFC == 0
							SFC->(DbSetOrder(nOrdSFC))
							SFC->(DbGoto(nRegSFC))
						EndIf
					Endif
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³tratamento para clientes responsaveis inscritos, porque ³
					//³o calculo dos impostos na ecf sao feitos de maneira     ³
					//³diferente para esses clientes.	                       ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cPaisLoc == "ARG" .AND. nModulo == 12
						If _nAlicDesg > 0
							xRet := Round((nBase * (_nAlicuota / 100)),2)
							xRet := xRet - ((xRet *_nAlicDesg) / 100)
						Else
							xRet:=Round((nBase * (_nAlicuota / 100)),2)
						EndIf
					Else
						If _nAlicDesg > 0
							xRet:= Round((nBase*(_nAlicuota/100)),MsDecimais(_nMoeda))
							xRet := xRet - ((xRet *_nAlicDesg) / 100)	
						Else
							xRet:= Round((nBase*(_nAlicuota/100)),MsDecimais(_nMoeda))
						EndIf
					EndIF
					If nPosSFC == 0
						SFC->(DbSetOrder(nOrdSFC))
						SFC->(DbGoto(nRegSFC))
					EndIf
			Endcase
		Endif
	Endif
ENDIF

dbSelectArea( cAliasRot )
dbSetOrder( cOrdemRot )

Return( xRet )
