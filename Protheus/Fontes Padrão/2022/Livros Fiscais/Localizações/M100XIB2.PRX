#include "PROTHEUS.CH"         // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _IMPINCID  10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _ALIQDESG  19
#DEFINE _CCOFILIAL 1
#DEFINE _CCOCODPRO 2
#DEFINE _CCOPERNC  3
#DEFINE _CCOCRFPER 4
#DEFINE _CCOIMPPER 5
#DEFINE _CCOIMMINP 6
#DEFINE _CCOTPMINP 7
#DEFINE _FCFILIAL  1
#DEFINE _FCTES     2
#DEFINE _FCIMPOSTO 3
#DEFINE _FCPROV    4
#DEFINE _FCCALCULO 5
#DEFINE _FCINCIMP  6
#DEFINE _FCLIQUIDO 7
#DEFINE _FCSUMATIT 8
#DEFINE _FCSUMATOT 9

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ M100xIB2 ³ Autor ³ Jose Luis Otermin     ³ Data ³ 21.07.99 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa que Calcula Percepcion de Ing.Brutos misma ZFiscal³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ M100xIB2(void)                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA100, llamado por un punto de entrada                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ-Ä-ÂÄÄÄÄÄÄÄÄ-ÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ FECHA    ³   BOPS   ³  MOTIVO DE LA ALTERACION         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³L Samaniego   ³05/05/2014³ TIAK89   ³ Calculo de retenciones del       ³±±
±±³              ³          ³          ³ SIRCREB cuando cRG104 == "S" y   ³±±
±±³              ³          ³          ³ FunName == "FINA100"             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Dora Vega     ³07/02/2017³ MMI-178  ³ Se realizan ajustes a la busqueda³±±
±±³              ³          ³          ³ de un remito de devolucion       ³±±
±±³              ³          ³          ³ relacionado a un remito de venta.³±±
±±³              ³          ³          ³ Cambios en funcion M100VLNC(ARG) ³±±
±±³Alf. Medrano  ³30/03/2017³ MMI-4145 ³Retenciones del SIRCREB RG104/2004³±±
±±³              ³          ³          ³ En func M100xib2 se obtiene      ³±±
±±³              ³          ³          ³ Coeficiente SIRCREB para la      ³±±
±±³              ³          ³          ³ distribución de percepción de IB ³±±
±±³              ³          ³          ³ para provincias conf. en la Tes  ³±±
±±³M.Camargo     ³07/04/2017³ MMI-180  ³ ARG Se realizan ajustes para     ³±±
±±³              ³          ³          ³ realizar una nota de crédito sin ³±±
±±³              ³          ³          ³ estar ligada a una factura.      ³±±
±±³Laura Medina  ³11/04/2017³ MMI-4145 ³ Se movio de posicion parte de co-³±±
±±³              ³          ³          ³ digo que afecta el proceso para  ³±±
±±³              ³          ³          ³ calculo correcto de la provicia. ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄ-Ä-ÁÄÄÄÄÄÄÄÄÄ-ÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±³Ivan Gomez    ³04/05/2017³ MMI-5535 ³ Se agregan validaciones cuando el³±±
±±³              ³          ³          ³ parametro "MV_DESCSAI" se 	    ³±±
±±³              ³          ³          ³ encuentre en 1 o 2 cuando se     ³±±
±±³              ³          ³          ³ genera una nota de crédito desde ³±±
±±³              ³          ³          ³ un Documento Orig, también se    ³±±
±±³              ³          ³          ³ agregan validaciones si la TES   ³±±
±±³              ³          ³          ³ calcula sobre el neto o No       ³±±
±±³Raul Ortiz M. ³22/09/17  ³DMICNS-116³Se agrega validación cuando en la ³±±
±±³              ³          ³          ³TES se configura un Impuesto INC. ³±±
±±³              ³          ³          ³y se agregan descuentos           ³±±
±±³Diego Rivera  ³08/12/2017³DMICNS-981³ Se quita validacion              ³±±
±±³              ³          ³          ³ ( Type("lLocxAuto") == "U"       ³±±
±±³              ³          ³          ³ .Or. !lLocxAuto ) ya que no está ³±±
±±³              ³          ³          ³ cálculando impuestos - Argentina ³±±
±±³Raul Ortiz    ³28/02/2018³ DMICNS-  ³ Se modifica la valicación de mi- ³±±
±±³              ³          ³ 1161     ³ nimos para cuando la moneda es   ³±±
±±³              ³          ³          ³ diferente a 1 - Argentina        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄ-Ä-ÁÄÄÄÄÄÄÄÄÄ-ÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function M100xib2(cCalculo,nItem,aInfo,cXFisRap)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local cImpIncid := ''
Local aImpRef   := {}
Local aImpVal   := {}
Local nI        := 0
Local _nMoeda   := 1
Local aBaseAc := {}
Local nBaseAb  := 0
Local cAlias   := IIf(Type("M->F1_FORNECE")=="C" ,"SF1",Iif (Type("M->F2_CLIENTE")=="C","SF2",""))
Local cTipo    := Iif(cAlias=="SF1",M->F1_ESPECIE,Iif(cAlias=="SF2",M->F2_ESPECIE,""))
Local nPos     := 0
Local cCod     := " "
Local cLoja    := " "
Local cPesq    := " "
Local nDocOri  := 0
Local basTot   := 0
Local lMinIb   := SuperGetMV("MV_IBMIN",.T.,.F.)
Local cZonCCO  := ""
Local nPosCCO  := 0
Local nPosSFC  := 0
Local cPesqCCO := " "
Local cPesqSFC := " "
Local lImpCCO  := .F.
Local lImpSFC  := .F.
Local lFCliq	:= .T.
Local nTxMoeda := Iif(Type("nTaxamoeda") <> "U", nTaxamoeda, 1)
Local nCoefSFH  := 0
Local cTipoInsc := " "
Local nOrdeSFH := 0
Local cLlave    := ""
Local aAreaSFH  := {}
Local lExisteNF := .F.
Local nX:=1
Local aAreaSF2 := {}

SetPrvt("CALIASROT,CORDEMROT,AITEMINFO,AIMPOSTO,_CPROCNAME,_CZONCLSIGA")
SetPrvt("_LAGENTE,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NVALORMIN,_NALICDESG")
SetPrvt("_LTIPOSFB,_LCLASSE,_LCLASSIF")
SetPrvt("_NREDUCIR,")

Default cXFisRap := ""
If Type("aRG1316") <> "U"
	If SF3->(ColumnPos("F3_RG1316")) > 0 .and. len(aRG1316) < nItem 
		Aadd(aRG1316,{})
	EndIf
EndIf

/*/
//-----------------------------------------------------
// Nota:
// Debe registrarse al Cliente en la Tabla SFH en caso
// que sea Agente de Percepcion o este Exento en una ZF.
// Se utiliza el parametro MV_AGENTE
// Significado de las posiciones de MV_AGENTE
// SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
// SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
// SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
// SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
// SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
//-----------------------------------------------------
// Nota:
// Debe utilizarse el parametro MV_EXENTO
// Significado de las posiciones de MV_EXENTO
// SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
// SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
// SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
// SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
// SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
//-----------------------------------------------------
/*/

lXfis:=(MaFisFound()  .And. ProcName(1)<>"EXECBLOCK")
cAliasRot  := Alias()
cOrdemRot  := IndexOrd()

If !lXFis
	aItemINFO  := ParamIxb[1]
	aImposto   := ParamIxb[2]
	xRet:=aImposto
Else
	xRet:=0
Endif

_cProcName := "M100IB2"

If !lXFis
	If aImposto[1] $ "IB2" 
		//Pedido de Compra
		If Upper(FunName()) == "MATA121"		
			If Type("cA120ProvEnt")=="C" .And. !Empty(cA120ProvEnt)
				_cZonClSIGA := cA120ProvEnt
			Elseif Type("cA120ProvEnt")=="C" .And. Empty(cA120ProvEnt)
				_cZonClSIGA := SA2->A2_EST
			Endif
		ElseIf Upper(FunName()) == "FISA828"		
			If Type("M->NJC_PROVEN")=="C" .And. !Empty(M->NJC_PROVEN)
				_cZonClSIGA := M->NJC_PROVEN
			Elseif Type("M->NJC_PROVEN")=="C" .And. Empty(M->NJC_PROVEN)
				_cZonClSIGA := SA2->A2_EST
			Endif
			
			If Type("M->NJC_VENDED")=="C" .And. !Empty(M->NJC_VENDED) .And. Type("M->NJC_LOJAVE")=="C" .And. !Empty(M->NJC_LOJAVE)
				cCod		:=	M->NJC_VENDED
				cLoja 		:=	M->NJC_LOJAVE
			EndIf
			
			If Type("M->NJC_CODPRO")=="C" .And. !Empty(M->NJC_CODPRO) .And. Type("M->NJC_TIENDA")=="C" .And. !Empty(M->NJC_TIENDA)
				cCod		:=	M->NJC_CODPRO
				cLoja		:=	M->NJC_TIENDA	
			EndIf			
		Else
		//Factura de Entrada
			If Type("M->F1_PROVENT")=="C" .And. !Empty(M->F1_PROVENT)
				_cZonClSIGA := M->F1_PROVENT
			Elseif Type("M->F1_PROVENT")=="C" .And. Empty(M->F1_PROVENT)
				_cZonClSIGA := SA2->A2_EST
			ElseIf ValType("aImpVarSD1") <> "U" .and. Len(aImpVarSD1) >= 7
				_cZonClSIGA:= aImpVarSD1[7]
			Else
				_cZonClSIGA:= SM0->M0_ESTENT	
			Endif
		Endif 
	Else
		_cZonClSIGA:= SM0->M0_ESTENT
	Endif
Else
	_cZonClSIGA:= If(cPaisLoc=="ARG" , IIF( Upper(FunName()) == "MATA143" , MaFisRet(,"NF_PROVENT") , MaFisRet(nItem,"IT_PROVENT") ) , SM0->M0_ESTENT) // Zona Fiscal del Cliente SIGA
Endif

If cTipo $ ("NCC|NCP")
	If !Empty(MaFisRet(nx,"IT_NFORI")) .and. !Empty(MaFisRet(nx,"IT_SERORI"))
		aAreaSF2 := SF2->(GetArea())
		DbSelectArea("SF2")
		SF2->(DBSetOrder(1))//F2_FILIAL+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA
		If SF2->(MsSeek(xFilial("SF2")+ MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI") +M->F1_FORNECE+M->F1_LOJA,.F.))
			lExisteNF := .T.
		Endif
		SF2->(RestArea(aAreaSF2))
	Endif	
Endif
cProvEnt := PadR(_cZonClSIGA,TamSX3("F1_PROVENT")[1])

If cPaisLoc == "ARG" .and. ( (cTipo $ ("NCC|NCP") .And.  lXFis) .Or.  (  FunName() == "FINA100"   .And.  cRG104 == "S")      )
	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
		_cZonClSIGA = SFC->FC_PROV
	EndIf
EndIf

_cZonClSIGA:=Alltrim(_cZonClSIGA)
_lAgente   := (SUBSTR(GETMV("MV_AGENTE"),5,1)=="S") //  Agente Percepcion IB?

nPos    := 0
nPosCCO := 0
nPosSFC := 0
lArrayIb:= Type("aImpIB2") <> "U"
lImpCCO := Type("aImpCCO") <> "U"
lImpSFC := Type("aImpSFC") <> "U"

cEspecie:=IIF(Type("cEspecie")=="C",cEspecie,"NF")

If cAlias== "SF2
	cCod:=	M->F2_CLIENTE
	cLoja:=	M->F2_LOJA

ElseIf cAlias== "SF1
	cCod:=	M->F1_FORNECE
	cLoja:=	M->F1_LOJA
EndIf

IF lXFis .And. (Alltrim(cCod)=="" .OR. Alltrim(cLoja)=="")
	cCod:=	MaFisRet(,"NF_CODCLIFOR" )
	cLoja:=	MaFisRet(,"NF_LOJA" )
EndIf
If lXFis .And. lArrayIb
	cPesq:=xFilial("SF4")+MaFisRet(nItem,"IT_TES")+MaFisRet(nItem,"IT_CF")+MaFisRet(,"NF_CLIFOR" )+cCod+cLoja+MaFisRet(,"NF_PROVENT")+MaFisRet(nItem,"IT_PROVENT")+aInfo[1]
	If Type("dDEmissao")=="D"
		cPesq += AllTrim(STR(Month(dDEmissao))) + AllTrim(STR(Year(dDEmissao)))
	ElseIf Type("dDEmiss")=="D"
		cPesq += AllTrim(STR(Month(dDEmiss))) + AllTrim(STR(Year(dDEmiss)))
	Else
		cPesq += AllTrim(STR(Month(dDataBase))) + AllTrim(STR(Year(dDataBase)))
	EndIf
	cPesq += SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)
	nPos:=Ascan(aImpIB2,{|item| item[1] == cPesq})
EndIf
If nPos == 0
	aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{If(lXFis,{cCalculo,nItem,aInfo},ParamIxb), _cProcName, _lAgente,cProvEnt,lXFis,cXFisRap},.T.)
	If lArrayIb
		If nPos == 0
			Aadd(aImpIB2,{cPesq,aFiscal})
		Else
			aImpIB2[nPos][2] := aFiscal
		EndIf
	EndIf
Else
	aFiscal:= aImpIB2[nPos][2]
Endif

_lCalcular :=  aFiscal[1]
_lEsLegal  :=  aFiscal[2]
_nAlicuota :=  aFiscal[3]
_nValorMin :=  Iif(lXfis,xMoeda(aFiscal[4],1,MaFisRet(,"NF_MOEDA"),,,,MaFisRet(,"NF_TXMOEDA")),xMoeda(aFiscal[4],1,_nMoeda,,,,nTxMoeda))
_nReducir  :=  aFiscal[5]
cIncIB     :=  aFiscal[6]
_nMoeda    :=  aFiscal[7]
_nAlicDesg :=  aFiscal[11]
If cPaisLoc == "ARG" .And. Len(aFiscal)>=12
	cTipoInsc :=  aFiscal[12]
EndIf


If lXFis
	If lImpSFC
		cPesqSFC := xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1]
		nPosSFC  := Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
	EndIf
	If nPosSFC == 0
		SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
		If (SFC->(MsSeek( xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1] )))
			If !Empty(Alltrim(SFC->FC_PROV))
				cZonCCO := SFC->FC_PROV
			Endif
		EndIf
		If lImpSFC
			AADD(aImpSFC,{SFC->FC_FILIAL,SFC->FC_TES,SFC->FC_IMPOSTO,SFC->FC_PROV,SFC->FC_CALCULO,SFC->FC_INCIMP,SFC->FC_LIQUIDO,SFC->FC_INCDUPL,SFC->FC_INCNOTA})
		EndIf
	Else
		cZonCCO := aImpSFC[nPosSFC][_FCPROV]
	EndIf

	If lImpCCO
		cPesqCCO := xFilial("CCO") + cZonCCO
		nPosCCO  := Ascan(aImpCCO,{|item| item[_CCOFILIAL] + item[_CCOCODPRO] == cPesqCCO})
	EndIf
EndIf

If lImpSFC .and. SF3->(ColumnPos("F3_RG1316")) > 0 .and. Type("aRG1316") <> "U"
	nPosSFC2 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
	If LEN(aRG1316[nItem]) > 0 
		If aRG1316[nItem][1][1] <> aImpSFC[nPosSFC2][_FCTES]
			aRG1316 [nItem] := {}
		EndIf 
	EndIf
	IF SA2->A2_TIPROV <> Nil 
		If (FunName() == "MATA101N" .AND. SA2->A2_TIPROV == "A"  .AND. aFiscal[15] .AND. aFiscal[16] .AND. aFiscal[17];
			 .and. aImpSFC[nPosSFC2][_FCSUMATIT]=="1" .and. aImpSFC[nPosSFC2][_FCSUMATOT] == "1";
			 .and. aImpSFC[nPosSFC2][_FCCALCULO] == "T" .and. aImpSFC[nPosSFC2][_FCLIQUIDO] =="N")
			If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
				_nAlicuota :=  _nAlicuota * CCO->CCO_COESIR 
				If _nAlicuota <> 0
					_lCalcular := .T.
					_lEsLegal  := .T.
					If  Iif ( LEN(aRG1316[nItem]) > 0, aRG1316[nItem][1][2] <> aImpSFC[nPosSFC2][_FCIMPOSTO],.T.)
						Aadd(aRG1316[nItem],{aImpSFC[nPosSFC2][_FCTES],aImpSFC[nPosSFC2][_FCIMPOSTO],"S"})
					EndIf
				EndIf	
			EndIf
		EndIf
	EndIf
EndI

If (FunName() == "FINA100" .And. cRG104 == "S")
	If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
		_nAlicuota := CCO->CCO_COESIR * 100
		If _nAlicuota <> 0
			_lCalcular := .T.
			_lEsLegal  := .T. 
		EndIf	
	EndIf
EndIf

If cTipo $ ("NCC|NCP")
	DbSelectArea("CCO")
	DbSetOrder(1) //CCO_FILIAL+CCO_CODPRO
	If CCO->(MsSeek(xFilial("CCO")+cZonCCO))
		If !(CCO->CCO_CPERNC $ "1|6") .and. !lExisteNF
			_lCalcular := .F.
		ElseIf (CCO->CCO_CPERNC=="5")
			_lCalcular := .F.
		Endif
	EndIf
EndIf

IF _lCalcular  .AND. _lEsLegal
	
	If !lXFis
		aImposto[_ALIQUOTA]  := _nAlicuota // Alicuota de Zona Fiscal del Proveedor
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
		aImposto[_ALIQDESG]  := _nAlicDesg
		
		//Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
		//+---------------------------------------------------------------+
		//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
		//+---------------------------------------------------------Lucas-+
		aImposto[_IMPINCID]:=cIncIB
		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif
		
		//+---------------------------------------------------------------+
		//¦ Efectua el Cálculo del Impuesto                               ¦
		//+---------------------------------------------------------------+
		If aImposto[_BASECALC] > _nValorMin
			If _nAlicDesg > 0
			   	aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
			   	aImposto[_IMPUESTO]  := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100) 
			Else
				aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
			EndIf	
		ELSE
			aImposto[_IMPUESTO]  := 0.00
			aImposto[_IMPFLETE]  := 0.00
			aImposto[_IMPGASTOS] := 0.00
			aImposto[_RATEOFRET] := 0.00
			aImposto[_RATEODESP] := 0.00
		Endif
		xRet:=aImposto
		
	Else
		If Type("aHeader")=="A"
			nDocOri := Ascan(aHeader,{|x| AllTrim(x[2])=="D1_NFORI"})
		EndIf
		If !Empty(cXFisRap)
			xRet := {0,_nAlicuota,0}
	 		lCalc := .T.
			If !(MaFisRet(nItem,'IT_DELETED')  )
	 			nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			Else
				lCalc := .F.
				nBase:=0
			EndIf

			

			If nPosSFC == 0
				nOrdSFC:=(SFC->(IndexOrd()))
				nRegSFC:=(SFC->(Recno()))
				SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
			EndIf

			If !Empty(cIncIB)
				//Tira os descontos se for pelo liquido
				If IIF(nPosSFC>0,.T.,(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))))//(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
					cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP)) //Alltrim(SFC->FC_INCIMP)
					If !(nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. cEspecie $ ("NCC"))
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )//SFC->FC_LIQUIDO=="S"
							nBase-= MaFisRet(nItem,"IT_DESCONTO")
						ElseIf cEspecie $ ("NCC") .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N" )
							lFCliq := .F.
						Endif
					EndIf
				Endif
				//+---------------------------------------------------------------+
				//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
				//+---------------------------------------------------------------+
				aImpRef:=MaFisRet(nItem,"IT_DESCIV")
				aImpVal:=MaFisRet(nItem,"IT_VALIMP")
				For nI:=1 to Len(aImpRef)
					If !Empty(aImpRef[nI])
						IF Trim(aImpRef[nI][1])$cIncIB
							nBase+=aImpVal[nI]
						Endif
					Endif
				Next
			Else
				//Tira os descontos se for pelo liquido
				If IIF(nPosSFC>0,.T.,(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))))
					cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP))
					If !(nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. cEspecie $ ("NCC"))					
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )
							nBase-= MaFisRet(nItem,"IT_DESCONTO")
						ElseIf cEspecie $ ("NCC") .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N" )
							lFCliq := .F.
						Endif
					Else
						nBase -= IIF(SuperGetMV("MV_DESCSAI" , .T., "1" )== "2" .and. cEspecie $ ("NCC") .and. nDocOri > 0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S"), MaFisRet(nItem,"IT_DESCONTO"), 0)
						nBase += IIF(SuperGetMV("MV_DESCSAI" , .T., "1" )== "1" .and. cEspecie $ ("NCC") .and. nDocOri > 0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N"), MaFisRet(nItem,"IT_DESCONTO"), 0)
					EndIf
				Endif
				//+---------------------------------------------------------------+
				//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
				//+---------------------------------------------------------------+
				If !Empty(cImpIncid)
					aImpRef:=MaFisRet(nItem,"IT_DESCIV")
					aImpVal:=MaFisRet(nItem,"IT_VALIMP")
					For nI:=1 to Len(aImpRef)
						If !Empty(aImpRef[nI])
							IF Trim(aImpRef[nI][1])$cImpIncid
								nBase+=aImpVal[nI]
							Endif
						Endif
					Next
				Endif
			Endif 

			IF cPaisLoc == "ARG" .And. cTipoInsc == "V" .And. cCalculo == "B"
				aAreaSFH	:= SFH->(Getarea())
				nOrdeSFH := Iif(MaFisRet(,"NF_CLIFOR" ) == "C",3,1)
				SFH->(DbSetOrder(nOrdeSFH)) 
				cLlave := xFilial("SFH") + cCod + cLoja + aInfo[1] 
				If SFH->(MsSeek( cLlave ))
					While!(SFH->(Eof())) .and. ; 
						iif (nOrdeSFH == 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO == cLlave,;   
									SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO == cLlave)
						If SFH->FH_TIPO == cTipoInsc .and. A085aVigSFH()    
							nCoefSFH := SFH->FH_COEFMUL
							exit  
						Endif 
						SFH->(DbSkip())
					EndDo 
				Endif
				SFH->(RestArea(aAreaSFH))

				nBase := (nBase  * IIf(nCoefSFH <> 0,nCoefSFH,1) ) 
			Endif
			// Trata Campo da Provincia   v
			If cTipo $ ("NCC|NCP|NCI")
				nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO)
			Else       
				nBaseAb:=0
			EndIf			
			
			xRet[1] := nBase
			If FunName() == "FINA100"
				If (cPaisLoc == "ARG" .And. cRG104 == "S")
					CCO->(DbSetOrder(1))//CCO_FILIAL+CCO_CODPRO
					If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
						xRet[2] := CCO->CCO_COESIR * 100
					EndIf
				EndIf
			EndIf
			MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
			If "V" $ cXFisRap
				If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
					If SFC->FC_CALCULO=="T"
						If MaFisRet(,'NF_VALIV'+aInfo[2])== 0
							lCalc := .F.
							nBase := nBase + MaRetBasT(aInfo[2],nItem,_nAlicuota)
						Else
							lCalc := (MaRetBasT(aInfo[2],nItem,_nAlicuota)+nBase) >MaFisRet(,"NF_MINIV"+aInfo[2])
						EndIf

						If lCalc  .OR. nBase>MaFisRet(,"NF_MINIV"+aInfo[2])
							If _nAlicDesg > 0
								xRet[3] := Round((nBase - nBaseAb )*(_nAlicuota /100) * _nReducir,MsDecimais(_nMoeda))
								xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
							Else
								xRet[3] := Round((nBase-nBaseAb) *(_nAlicuota /100) * _nReducir,MsDecimais(_nMoeda))
							EndIf
						Endif
					Else
						If nBase > _nValorMin
							If _nAlicDesg > 0
								xRet[3]	:=	Round(nBase *(_nAlicuota /100) * _nReducir,MsDecimais(_nMoeda))
								xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
							Else
			  		      		xRet[3]	:=	Round(nBase *(_nAlicuota /100) * _nReducir,MsDecimais(_nMoeda))
			  		      	EndIf	
			  			Endif
					Endif
				Endif 
				xRet[3]:=IIf(xRet[3]>0,xRet[3],0)
			Endif
			If nPosSFC == 0
				SFC->(DbSetOrder(nOrdSFC))
				SFC->(DbGoto(nRegSFC))
			EndIf
		Else
			Do Case
				Case cCalculo=="A"
					If _nReducir <> 0 
						If lExisteNF
							xRet:=_nAlicuota
						Else
							xRet:=_nAlicuota * _nReducir
						Endif
					Else
						xRet:=_nAlicuota
					Endif
					If FunName() == "FINA100"
						If (cPaisLoc == "ARG" .And. cRG104 == "S")
							CCO->(DbSetOrder(1))//CCO_FILIAL+CCO_CODPRO
							If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
								xRet := CCO->CCO_COESIR	* 100
							EndIf
						EndIf
					EndIf
				Case cCalculo=="B"
					If !(MaFisRet(nItem,'IT_DELETED')  )
			 			nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
					Else
						nBase:= 0
					EndIf
		           If !Empty(cIncIB)
						//+---------------------------------------------------------------+
						//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
						//+---------------------------------------------------------------+
						aImpRef:=MaFisRet(nItem,"IT_DESCIV")
						aImpVal:=MaFisRet(nItem,"IT_VALIMP")
						For nI:=1 to Len(aImpRef)
							If !Empty(aImpRef[nI])
								IF Trim(aImpRef[nI][1])$cIncIB
									nBase+=aImpVal[nI]
								Endif
							Endif
						Next
					Else
						//Tira os descontos se for pelo liquido
						nOrdSFC:=(SFC->(IndexOrd()))
						nRegSFC:=(SFC->(Recno()))
						SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
						If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
							cImpIncid:=Alltrim(SFC->FC_INCIMP)
							If !(nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. cEspecie $ ("NCC"))
								If SFC->FC_LIQUIDO=="S"
									nBase-= MaFisRet(nItem,"IT_DESCONTO")
								Endif
							EndIf
						Endif
						//+---------------------------------------------------------------+
						//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
						//+---------------------------------------------------------------+
						If !Empty(cImpIncid)
							aImpRef:=MaFisRet(nItem,"IT_DESCIV")
							aImpVal:=MaFisRet(nItem,"IT_VALIMP")
							For nI:=1 to Len(aImpRef)
								If !Empty(aImpRef[nI])
									IF Trim(aImpRef[nI][1])$cImpIncid
										nBase+=aImpVal[nI]
									Endif
								Endif
							Next
						Endif
						SFC->(DbSetOrder(nOrdSFC))
						SFC->(DbGoto(nRegSFC))
					Endif

					// Trata Campo da Provincia   v
					If cTipo $ ("NCC|NCP|NCI")
						nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO)
					Else       
						nBaseAb:=0
					EndIf
					xRet:=nBase - nBaseAb
					xRet:=Iif(xRet>0,xRet,0)
					MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
				Case cCalculo=="V" 
					MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)	 		
					If nPosSFC == 0
						nOrdSFC:=(SFC->(IndexOrd()))
						nRegSFC:=(SFC->(Recno()))
						SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
					EndIf
					
			// Trata Campo da Provincia
					If cTipo $ ("NCC|NCP|NCI")
						nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO)
					Else       
						nBaseAb:=0
					EndIf					
					If IIF(nPosSFC>0,.T.,(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))) //(SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCCALCULO]=="T",SFC->FC_CALCULO=="T") //SFC->FC_CALCULO=="T"
							If nBaseAb > 0 .and. cTipo $ ("NCC|NCP")
								nBaseAb := MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV'+aInfo[2]))
							EndIf
							If cEspecie $ ("NCC") .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N" )
								lFCliq := .F.
							EndIf
							If MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])) >  MaFisRet(,"NF_MINIV"+aInfo[2])
			  		   		   	//Si aplica RG ATER 319-16
								If CCO->(ColumnPos("CCO_TPLIMP")) > 0 .And. CCO->CCO_TPLIMP == "2" .And. MaRetBasT(aInfo[2], nItem, MaFisRet(nItem, 'IT_ALIQIV' + aInfo[2])) > 0 .And. MaFisRet(,"NF_CLIFOR") == "C" .And. (AllTrim(cEspecie) == "NCC" .Or. AllTrim(cEspecie) == "NDC" .Or. AllTrim(cEspecie) == "NDE" .Or. AllTrim(cEspecie) == "NCE")									
									aBaseAc := PerAcum(aInfo[1], aInfo[2], aFiscal[9], MaRetBasT(aInfo[2], nItem, MaFisRet(nItem, 'IT_ALIQIV' + aInfo[2])), .F.)
									If MaFisRet(nItem,"IT_DESCONTO") > 0 .and. lFCliq .and. nDocOri>0 .and. !Empty(aCols[nItem][nDocOri])
										xRet := Round((aBaseAc[1][1] - nBaseAb) * ((MaFisRet(nItem, 'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir, MsDecimais(_nMoeda))
									Else
										xRet := Round((aBaseAc[1][1] - nBaseAb) * ((MaFisRet(nItem, 'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir, MsDecimais(_nMoeda))
									EndIf
									
									If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] != 0
								 		xRet -= aBaseAc[1][2]
								 		If xRet < 0
								 			xRet := Abs(xRet)
								 		EndIf
								 	EndIf
								 	
								 	If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] == 0
										xRet := aBaseAc[1][2]
									EndIf
								Else
									xRet := Round((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])) - nBaseAb) *((MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])	)/100),MsDecimais(_nMoeda))
								EndIf
			  	          	Endif 
			  	          	If _nAlicDesg > 0
								xRet:= xRet - ((xRet *_nAlicDesg) / 100)
							EndIf
		                ELSE
							If MaFisRet(nItem,'IT_BASEIV'+aInfo[2]) >  _nValorMin
								If _nReducir <> 0 
				  		    		xRet := Round((MaFisRet(nItem,'IT_BASEIV'+aInfo[2]))*((MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])	)/100),MsDecimais(_nMoeda))
								Else
									xRet := Round((MaFisRet(nItem,'IT_BASEIV'+aInfo[2]))*((MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])	)/100) * _nReducir,MsDecimais(_nMoeda))
								Endif
							Endif
						Endif
					Endif
					If nPosSFC == 0
						SFC->(DbSetOrder(nOrdSFC))
						SFC->(DbGoto(nRegSFC))
					EndIf
					xRet:= IIf(xRet>0,xRet,0)
			Endcase
		Endif
	Endif
EndIf

If lXFis .and. cCalculo == "V" .and. _lCalcular .and. !(FunName() == "FINA100") // Minimos
	If _nReducir <> 0
		If lExisteNF 
			basTot	:= MaRetBasT(aInfo[2],,_nAlicuota)
		Else
			basTot	:= MaRetBasT(aInfo[2],,_nAlicuota * _nReducir)
		Endif
	Else
		basTot	:= MaRetBasT(aInfo[2],,_nAlicuota)
	Endif
	xRet	:= CCOMinB2(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
endif

dbSelectArea( cAliasRot )
dbSetOrder( cOrdemRot )
Return( xRet )

Static Function M100VLNC(cTipo,cAlias,cProv)
Local nBaseAbt  := 0
Local nx        := 1
Local aNFEDev   := {}
Local nPos      := 0
Local lVeriPrv  := .F.
Local aAreaAtu  := {}
Local cTipCalc  := "0"
Local lDesc     := .T.
Local nBasDev   := 0
Local aAliasSF1 := SF1->(GetArea())
Local aAliasSF2 := SF2->(GetArea())
Local aAliasSD1	:= SD1->(GetArea())
Local aAliasSD2	:= SD2->(GetArea())
Local cAliasSD 	:= ""
Local nDocOri   := 0
Local lRemito 	:= .F.
Local lIsRemito	:= .F.
Local cDocRem 	:= ""
Local cSerRem 	:= ""
Local cDocFacR 	:= ""
Local cSerFacR 	:= ""
Local cDescSai	:= SuperGetMV("MV_DESCSAI" , .T., "1" )

aAreaAtu:=GetArea()
CCO->(DbSetOrder(1))
If CCO->(MsSeek(xFilial("CCO") + cProv) )  .And. !(CCO->CCO_CPERNC $ " 1")
	lVeriPrv:=.T.
	cTipCalc := CCO->CCO_CPERNC
EndIf
RestArea(aAreaAtu)    

If Type("aCols")=="A" .And. lVeriPrv
	If !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO")) .And. !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM"))
		lIsRemito := .T.
		cAliasSD := IIF(cAlias=="SF2","D2","D1")
		DBSelectArea("S" + cAliasSD)
		("S" + cAliasSD)->(DBSetOrder(IIF(cAliasSD == "D1",2,3)))//D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA o D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM
		//Si existe el Remito de Devolución
		If MsSeek(IIF(cAliasSD == "D1",xFilial("SD1")+GetValorCl("D1_COD")+GetValorCl("D1_REMITO")+GetValorCl("D1_SERIREM")+M->F1_FORNECE+M->F1_LOJA,;
		xFilial("SD2")+GetValorCl("D2_REMITO")+GetValorCl("D2_SERIREM")+M->F2_CLIENTE+M->F2_LOJA+GetValorCl("D2_COD")+GetValorCl("D2_ITEM")))
			//Si existe el Remito de venta
			DBSelectArea("S" + IIF(cAliasSD == "D1","D2","D1"))
			("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",3,2)))//D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM o D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
			If MsSeek(IIF(cAliasSD == "D1",xFilial("SD2")+SD1->D1_NFORI+SD1->D1_SERIORI+M->F1_FORNECE+M->F1_LOJA+SD1->D1_COD,;
			xFilial("SD1")+SD2->D2_COD+SD2->D2_NFORI+SD2->D2_SERIORI+M->F2_CLIENTE+M->F2_LOJA))
				//Si existe una factura
				cDocRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
				cSerRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")

				("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",17,21)))//D2_FILIAL+D2_SERIREM+D2_REMITO  o D1_FILIAL+D1_SERIREM+D1_REMITO
				If MsSeek(xFilial("S" + IIF(cAliasSD == "D1","D2","D1"))+ cSerRem + cDocRem)
					//Si encontro los datos de la factura, guarda doc y serie y pone la bandera de encontrado en .T.
					lRemito := .T.
					cDocFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
					cSerFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")
				EndIf
			EndIf
		EndIf
	EndIf
	For nx:= 1 to Len(aCols)
		If !(aCols[nx][Len(aCols[nx])])
			If !MaFisFound("IT",nx)
				Loop
			EndIf
			//Si es un remito y se encontro la factura ligada.
			If lIsRemito .And. lRemito
				nPos:=aScan(aNFEDev,{|x|x[3]==GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
   				nBasDev:=MaFisRet(nX,"IT_VALMERC")

				If Type("aHeader")=="A"
					nDocOri := Ascan(aHeader,{|x| AllTrim(x[2])=="D1_NFORI"})
				EndIf
				
				If (cDescSai == "1" .and. !(cEspecie $ ("NCC"))) .or. cDescSai == "2"
					If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nX,"IT_TES")+aInfo[1])))
						cImpIncid:=Alltrim(SFC->FC_INCIMP)
						If !(nDocOri>0 .and. !Empty(aCols[nx][nDocOri]) .and. cEspecie $ ("NCC"))
							If SFC->FC_LIQUIDO=="S"
								nBasDev-= MaFisRet(nX,"IT_DESCONTO")
							Endif
						EndIf
					Endif
				EndIf

				If nPos > 0
					aNFEDev[nPos][2]:= aNFEDev[nPos][2]+nBasDev
				Else
					Aadd(aNFEDev,{cDocFacR+cSerFacR,nBasDev,GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
				EndIf
			Else
   				nPos:=aScan(aNFEDev,{|x|x[1]==MaFisRet(nx,"IT_NFORI")+MaFisRet(nx,"IT_SERORI")} )
   				nBasDev:=MaFisRet(nX,"IT_VALMERC")
				If Type("aHeader")=="A"
					nDocOri := Ascan(aHeader,{|x| AllTrim(x[2])=="D1_NFORI"})
				EndIf
				If (cDescSai == "1" .and. !(cEspecie $ ("NCC"))) .or. cDescSai == "2"
					If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nX,"IT_TES")+aInfo[1])))
						cImpIncid:=Alltrim(SFC->FC_INCIMP)
						If !(nDocOri>0 .and. !Empty(aCols[nx][nDocOri]) .and. cEspecie $ ("NCC"))
							If SFC->FC_LIQUIDO=="S"
								nBasDev-= MaFisRet(nX,"IT_DESCONTO")
							Endif
						EndIf
					Endif                                                                            
				EndIf
	   		 	If nPos >0  
	    			aNFEDev[nPos][2]:= aNFEDev[nPos][2]+nBasDev	     		
	    			If cEspecie $ ("NCC") .and. cDescSai == "2"
						aNFEDev[nPos][2]:=  aNFEDev[nPos][2] -  MaFisRet(nX,"IT_DESCONTO")
				   EndIf
		   		Else
				   If cEspecie $ ("NCC") .and. cDescSai == "2"
						nBasDev-= MaFisRet(nX,"IT_DESCONTO")
				   EndIf
		    		Aadd(aNFEDev,{MaFisRet(nX,"IT_NFORI")+MaFisRet(nX,"IT_SERORI"),nBasDev})
	   	 		EndIf	
       		EndIf
		EndIf
	Next
					
	For nX:=1 to Len(aNFEDev)
		If cEspecie $ ("NCI") .and. cAlias== "SF1
			cColLiv:="SF1->F1_BASIMP"+aInfo[2]
			SF1->(DBSetOrder(1))
			If SF1->(MsSeek(xFilial("SF1")+ aNFEDev[nX][1] +M->F1_FORNECE+M->F1_LOJA,.F.)) 
				If cTipCalc== "2" .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF1->F1_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO) == Year(SF1->F1_EMISSAO);
				                      .And.  aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF1->F1_EMISSAO)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF1->F1_EMISSAO);
										  .And.  aNFEDev[nX][2] == &(cColLiv)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF1->F1_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF1->F1_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF1->F1_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF1->F1_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf
		ElseIf cAlias== "SF2
			cColLiv:="SF1->F1_BASIMP"+aInfo[2]
			SF1->(DBSetOrder(1))//F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA
			If SF1->(MsSeek(xFilial("SF1")+ aNFEDev[nX][1] +M->F2_CLIENTE+M->F2_LOJA,.F.)) 
				If cTipCalc== "2" .And. aNFEDev[nX][2] == SF1->F1_VALMERC
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO) == Year(SF1->F1_EMISSAO) ;
				                      .And.  aNFEDev[nX][2] == SF1->F1_VALMERC
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8".And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO);
										 .And.  aNFEDev[nX][2] == &(cColLiv)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf
		ElseIf cAlias== "SF1
			cColLiv:="SF2->F2_BASIMP"+aInfo[2]
			SF2->(DBSetOrder(1))//F2_FILIAL+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA
			If SF2->(MsSeek(xFilial("SF2")+ aNFEDev[nX][1] +M->F1_FORNECE+M->F1_LOJA,.F.)) 
				If (cTipCalc== "2" .And. aNFEDev[nX][2] == SF2->F2_VALMERC )
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO) == Year(SF2->F2_EMISSAO);
				                      .And.  aNFEDev[nX][2] == SF2->F2_VALMERC 
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO);
										  .And.  aNFEDev[nX][2] == &(cColLiv)
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == &(cColLiv)
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf	
		EndIf	
	Next  
EndIf   
SF1->(RestArea(aAliasSF1))
SF2->(RestArea(aAliasSF2))
SD1->(RestArea(aAliasSD1))
SD2->(RestArea(aAliasSD2))
Return(nBaseAbt)


Function CCOMinB2(nValmin,lMinIB,nBase,nRetorno,cZonFis,nPos,lImpCCO,nMoedaMin,nTaxMin,lXfis)
Local lValida 	:=  .F.
Local aArea		:= GetArea()
Local aAreaCCO	:= CCO->(GetArea())

Default cZonFis := ""
Default nPos    := 0
Default lImpCCO	:= .F.
Default nMoedaMin	:= 1
Default nTaxMin	:= 1
Default lXfis 	:= .T.

nMoedaMin 	:= Iif (lXfis, MaFisRet(,"NF_MOEDA"),nMoedaMin)
nMoedaMin 	:= Iif(!lXfis .and. (Type("nTipoGer") <> "U" .and. nTipoGer == 2), nMoedSel, nMoedaMin) 
nTaxMin	:= Iif (lXfis, MaFisRet(,"NF_TXMOEDA"),nTaxMin)

If nPos == 0
	CCO->(DbSetOrder(1))//CCO_FILIAL+CCO_CODPRO

	If CCO->(MsSeek( xFilial("CCO") + cZonFis ))
		lValida := (!Empty(CCO->CCO_TPMINP) .or. CCO->CCO_TPMINP $ "1|2")
	Endif
	If lImpCCO
		AADD(aImpCCO,{CCO->CCO_FILIAL,CCO->CCO_CODPRO,CCO->CCO_CPERNC,CCO->CCO_CRFPER,CCO->CCO_IMPPER,CCO->CCO_IMMINP,CCO->CCO_TPMINP,CCO->CCO_AGPER,CCO->CCO_TPPERC,CCO->CCO_TPPENI})
	EndIf
Else
	lValida := (!Empty(aImpCCO[nPos][_CCOTPMINP]) .or. aImpCCO[nPos][_CCOTPMINP] $ "1|2")
EndIf
lValida :=  Iif(lValida .and. nValmin = 0,.T.,.F.)

If lValida
	If nPos == 0
		If CCO->CCO_TPMINP == "1" // Base imponible
			If nBase <= xMoeda(CCO->CCO_IMMINP,1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif
		ElseIf CCO->CCO_TPMINP == "2" // Percepcion minima
			If nRetorno <= xMoeda(CCO->CCO_IMMINP,1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif
		Endif
	Else
		If aImpCCO[nPos][_CCOTPMINP] == "1" // Base imponible
			If nBase <= xMoeda(aImpCCO[nPos][_CCOIMMINP],1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif
		ElseIf aImpCCO[nPos][_CCOTPMINP] == "2" // Percepcion minima
			If nRetorno <= xMoeda(aImpCCO[nPos][_CCOIMMINP],1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif
		Endif
	EndIf
Endif

RestArea(aAreaCCO)
RestArea(aArea)

Return nRetorno

static Function GetValorCl(cCampo,nX)

Default nX := 1

If type ("oGetDados:oBrowse:nAt") <> "U"
	nX := oGetDados:oBrowse:nAt
EndIf

Return aCols[nX,GdFieldPos(cCampo, aHeader)]
