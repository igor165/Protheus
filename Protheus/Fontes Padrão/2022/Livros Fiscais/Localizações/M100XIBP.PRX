#include "PROTHEUS.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#INCLUDE "TOPCONN.CH" 

#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _IMPINCID  10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _ALIQDESG  19
#DEFINE _CCOFILIAL 1
#DEFINE _CCOCODPRO 2
#DEFINE _CCOPERNC  3
#DEFINE _CCOCRFPER 4
#DEFINE _CCOIMPPER 5
#DEFINE _CCOIMMINP 6
#DEFINE _CCOTPMINP 7
#DEFINE _FCFILIAL  1
#DEFINE _FCTES     2
#DEFINE _FCIMPOSTO 3
#DEFINE _FCPROV    4
#DEFINE _FCCALCULO 5
#DEFINE _FCINCIMP  6
#DEFINE _FCLIQUIDO 7
#DEFINE _FCSUMATIT 8
#DEFINE _FCSUMATOT 9
#DEFINE _FHFILIAL  1
#DEFINE _CLIPROV   2
#DEFINE _FHFORCLI  3 //FH_FORNECE/FH_CLIENTE
#DEFINE _FHLOJA    4
#DEFINE _FHIMPOSTO 5
#DEFINE _FHZONFIS  6
#DEFINE _FHALIQ    7
#DEFINE _FHCOEFMUL 8

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ M100xIBP ³ Autor ³ Jose Luis Otermin     ³ Data ³ 21.07.99 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa que Calcula Percepcion de Ing.Brutos misma ZFiscal³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ M100xIBP(void)                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA100, llamado por un punto de entrada                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ-Ä-ÂÄÄÄÄÄÄÄÄ-ÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ FECHA    ³   BOPS   ³  MOTIVO DE LA ALTERACION         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³L Samaniego   ³05/05/2014³ TIAK89   ³ Calculo de retenciones del       ³±±
±±³              ³          ³          ³ SIRCREB cuando cRG104 == "S" y   ³±±
±±³              ³          ³          ³ FunName == "FINA100"             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³L Samaniego   ³18/07/2014³ TPLGBS   ³ Establecer importe maximo para   ³±±
±±³              ³          ³          ³ calculo de percepciones de IIBB -³±±
±±³              ³          ³          ³ Para Rio Negro. Solo si  existe  ³±±
±±³              ³          ³          ³ el campo CCO_IMPPER.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Laura Medina  ³16/11/2015³ TTSLD1   ³ Correccion de un error al        ³±±
±±³              ³          ³          ³ modificar TES.                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ--ÅÄÄÄÄÄÄÄÄ-ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Dora Vega     ³07/02/2017³ MMI-178  ³ Se realizan ajustes a la busqueda³±±
±±³              ³          ³          ³ de un remito de devolucion       ³±±
±±³              ³          ³          ³ relacionado a un remito de venta.³±±
±±³              ³          ³          ³ Cambios en funcion M100VLNC(ARG) ³±±
±±³Alf. Medrano  ³30/03/2017³ MMI-4145 ³Retenciones del SIRCREB RG104/2004³±±
±±³              ³          ³          ³ En func M100xibp se obtiene      ³±±
±±³              ³          ³          ³ Coeficiente SIRCREB para la      ³±±
±±³              ³          ³          ³ distribución de percepción de IB ³±±
±±³              ³          ³          ³ en provincias conf. en la Tes    ³±±
±±³M.Camargo     ³07/04/2017³ MMI-180  ³ ARG Se realizan ajustes para     ³±±
±±³              ³          ³          ³ realizar una nota de crédito sin ³±±
±±³              ³          ³          ³ estar ligada a una factura.      ³±±
±±³Laura Medina  ³11/04/2017³ MMI-4145 ³ Se movio de posicion parte de co-³±±
±±³              ³          ³          ³ digo que afecta el proceso para  ³±±
±±³              ³          ³          ³ calculo correcto de la provicia. ³±±
±±³Marco A. Glez.³12/05/2017³ MMI-5011 ³ Se replica issue MMI-4792 V118   ³±±
±±³              ³          ³          ³ que consiste en dar cumplimiento ³±±
±±³              ³          ³          ³ a la RG 15/97 Percepcion IBBB SF ³±±
±±³              ³          ³          ³ Convenio Multilateral. (ARG)     ³±±
±±³Marco A. Glez.³12/05/2017³ MMI-5140 ³ Se replica issue MMI-4792 V118   ³±±
±±³              ³          ³          ³ que consiste en dar cumplimiento ³±±
±±³              ³          ³          ³ a la RG 15/97 Percepcion IBBB SF ³±±
±±³              ³          ³          ³ Convenio Multilateral. (ARG)     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄ-Ä-ÁÄÄÄÄÄÄÄÄÄ-ÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±³Ivan Gomez    ³04/05/2017³ MMI-5535 ³ Se agregan validaciones cuando el³±±
±±³              ³          ³          ³ parametro "MV_DESCSAI" se 	      ³±±
±±³              ³          ³          ³ encuentre en 1 o 2 cuando se     ³±±
±±³              ³          ³          ³ genera una nota de crédito desde ³±±
±±³              ³          ³          ³ un Documento Orig, también se    ³±±
±±³              ³          ³          ³ agregan validaciones si la TES   ³±±
±±³              ³          ³          ³ calcula sobre el neto o No       ³±±
±±³Roberto Glez. ³12/06/2017³ MMI-5925 ³ Consulta en la correcta posición ³±±
±±³              ³          ³          ³ del arreglo acols para obtener el³±±
±±³              ³          ³          ³ documento original.              ³±±
±±³Raul Ortiz M. ³22/09/17  ³DMICNS-116³Se agrega validación cuando en la ³±±
±±³              ³          ³          ³TES se configura un Impuesto INC. ³±±
±±³              ³          ³          ³y se agregan descuentos           ³±±
±±³Diego Rivera  ³08/12/2017³DMICNS-981³ Se quita validacion              ³±±
±±³              ³          ³          ³ ( Type("lLocxAuto") == "U"       ³±±
±±³              ³          ³          ³ .Or. !lLocxAuto ) ya que no está ³±±
±±³              ³          ³          ³ cálculando impuestos - Argentina ³±±
±±³Raul Ortiz    ³11/01/2018³DMICNS-973³Se agrega validacion cuando el    ³±±
±±³              ³          ³          ³nCoefRPer es mayor a 0 - Argentina³±±
±±³Raul Ortiz    ³28/02/2018³ DMICNS-  ³ Se modifica la valicación de mi- ³±±
±±³              ³          ³ 1161     ³ nimos para cuando la moneda es   ³±±
±±³              ³          ³          ³ diferente a 1 - Argentina        ³±±   
±±³Oscar G.      ³18/02/2019³ DMINA-   ³ Se realiza validacion de campo   ³±±
±±³              ³          ³ 5676     ³ CCO_PERNC antes de realizar calc.³±±
±±³              ³          ³          ³ de Imp. IB. (ARG)                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄ-Ä-ÁÄÄÄÄÄÄÄÄÄ-ÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function M100xibp(cCalculo,nItem,aInfo,cXFisRap)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lXFis,xRet,nOrdSFC,nRegSFC
Local aBaseAc := {}
Local nBase    := {}
Local cImpIncid:= ''
Local cIncIB   := ''
Local aImpRef  := {}
Local aImpVal  := {}
Local nI       := 0
Local _nMoeda  := 1
Local nBaseAb  := 0
Local aBase    := {}
Local aInfoImp := {}
Local nSumItem := 0
Local nCount   := 0
Local cAlias   := IIf(Type("M->F1_FORNECE")=="C" ,"SF1",Iif (Type("M->F2_CLIENTE")=="C","SF2",""))
Local cTipo    := Iif(cAlias=="SF1",M->F1_ESPECIE,Iif(cAlias=="SF2",M->F2_ESPECIE,""))
Local xCalIB
Local lMinIb   := SuperGetMV("MV_IBMIN",.T.,.F.)
Local nPos     := 0
Local aALiasSFC:=SFC->(Getarea())
Local cCod     := " "
Local cLoja    := " "
Local cPesq    := " "
Local aAreaSFF := {}
Local aAreaSFH := {}
Local nAliqSFH := 0
Local nAliqSFF := 0
Local nOrdeSFH := 0
Local nCoefSFH := 0
Local basTot   := 0
Local cLlave   := ""
Local lCalIb   := .T.
Local cCalcImp := ""
Local lMinCFO  := .F.
Local cZonCCO  := ""
Local cProEnt  := ""
Local lCalcTot := .F.
Local nCoefRPer:= 0
Local cRadic   := ""
Local nIvaTU   := 0
Local nAliqTmp := 0
Local nPosCCO  := 0
Local nPosSFC  := 0
Local nPosSFF  := 0
Local nPosSFH  := 0
Local cPesqCCO := " "
Local cPesqSFC := " "
Local cPesqSFF := " "
Local cPesqSFH := " "
Local lImpCCO  := .F.
Local nDocOri  := 0
Local lImpSFC  := .F.
Local lImpSFH  := .F.
Local lFCliq	:= .T.
Local nTxMoeda := Iif(Type("nTaxamoeda") <> "U", nTaxamoeda, 1)
Local lEsRem	:= .F.
Local nX:=1
Local nBase1   := 0
Local nIvaItem := 0
Local _cTSFisAux := ""
Local dDtProc  := Ctod("//")
Local nAliqAux	:= 0
Local nBaseAux	:= 0
Local nRedTU	:= 1
Local nRedBase 	:= 0 
Local nAliqFH	:= 0 
Local lExisteNF := .F.
Local aAreaSF2 := {}
Local nImpTU := 0
Local nBasIBK := 0
Local nAlqIBK := 0
Local nValIBK := 0
Local nPosBasIBK   := 0
Local nPosAlqIBK   := 0
Local nPosValIBK   := 0
Local nItDocOri    := 0

Private _cZFiscTU := ""
Private _nValorOp := 0
Static lAntCal  := .T.
Static aMPer	:= {}
Static lPrimera := .F.

SetPrvt("CALIASROT,CORDEMROT,AITEMINFO,AIMPOSTO,_CPROCNAME,_CZONCLSIGA")
SetPrvt("_LAGENTE,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NVALORMIN,_NALICDESG")
SetPrvt("_NREDUCIR,")

Default cXFisRap := ""

If Type("aRG1316") <> "U"
	If SF3->(ColumnPos("F3_RG1316")) > 0 .and. len(aRG1316) < nItem 
		Aadd(aRG1316,{})
	EndIf
EndIf
If cTipo $ ("NCC|NCP")
	If !Empty(MaFisRet(nx,"IT_NFORI")) .and. !Empty(MaFisRet(nx,"IT_SERORI"))
		aAreaSF2 := SF2->(GetArea())
		DbSelectArea("SF2")
		SF2->(DBSetOrder(1))//F2_FILIAL+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA
		If SF2->(MsSeek(xFilial("SF2")+ MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI") +M->F1_FORNECE+M->F1_LOJA,.F.))
			lExisteNF := .T.
		Endif
		SF2->(RestArea(aAreaSF2))
	Endif	
Endif

/*/
//-----------------------------------------------------
// Nota:
// Debe registrarse al Cliente en la Tabla SFH en caso
// que sea Agente de Percepcion o este Exento en una ZF.
// Se utiliza el parametro MV_AGENTE
// Significado de las posiciones de MV_AGENTE
// SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
// SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
// SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
// SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
// SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
//-----------------------------------------------------
// Nota:
// Debe utilizarse el parametro MV_EXENTO 
// Significado de las posiciones de MV_EXENTO
// SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
// SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
// SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
// SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
// SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
//-----------------------------------------------------
/*/

lXfis:=(MaFisFound()  .And. ProcName(1)<>"EXECBLOCK")
cAliasRot  := Alias()
cOrdemRot  := IndexOrd()

If !lXFis
	aItemINFO := ParamIxb[1]
	aImposto  := ParamIxb[2]
	xRet      := aImposto
	nOrdeSFH  := 3 //FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
Else
    xRet:=0
Endif   

_cProcName := "M100XIBP"
If !lXFis
	If aImposto[1] $ "IB3|IB4|IB5|IB6|IB7|IB8|IBA|IBB|IBC|IBD|IBE|IBF|IBG|IBH|IBI|IBJ|IBK|IBL|IBM|IBN|IBO|IBP" 
		//Pedido de Compra
		If Upper(FunName()) == "MATA121"
			If Type("cA120ProvEnt")=="C" .And. !Empty(cA120ProvEnt)
				_cZonClSIGA := cA120ProvEnt
			Elseif Type("cA120ProvEnt")=="C" .And. Empty(cA120ProvEnt)
				_cZonClSIGA := SA2->A2_EST
			Endif
		ElseIf Upper(FunName()) == "FISA828"		
			If Type("M->NJC_PROVEN")=="C" .And. !Empty(M->NJC_PROVEN)
				_cZonClSIGA := M->NJC_PROVEN
			Elseif Type("M->NJC_PROVEN")=="C" .And. Empty(M->NJC_PROVEN)
				_cZonClSIGA := SA2->A2_EST
			Endif
			If Type("M->NJC_VENDED")=="C" .And. !Empty(M->NJC_VENDED) .And. Type("M->NJC_LOJAVE")=="C" .And. !Empty(M->NJC_LOJAVE)
				cCod		:=	M->NJC_VENDED
				cLoja 		:=	M->NJC_LOJAVE
				nOrdeSFH	:= 1 	
			EndIf
			
			If Type("M->NJC_CODPRO")=="C" .And. !Empty(M->NJC_CODPRO) .And. Type("M->NJC_TIENDA")=="C" .And. !Empty(M->NJC_TIENDA)
				cCod		:=	M->NJC_CODPRO
				cLoja		:=	M->NJC_TIENDA
				nOrdeSFH	:= 3	
			EndIf	
		Else
		//Factura de Entrada
			If Type("M->F1_PROVENT")=="C" .And. !Empty(M->F1_PROVENT)
				_cZonClSIGA := M->F1_PROVENT
			Elseif Type("M->F1_PROVENT")=="C" .And. Empty(M->F1_PROVENT)
				_cZonClSIGA := SA2->A2_EST
			ElseIf ValType("aImpVarSD1") <> "U" .and. Len(aImpVarSD1) >= 7
				_cZonClSIGA:= aImpVarSD1[7]
			Else
				_cZonClSIGA:= SM0->M0_ESTENT	
			Endif
		Endif 
	Else
		_cZonClSIGA:= SM0->M0_ESTENT
	Endif
Else
	_cZonClSIGA:= IIf(cPaisLoc=="ARG", IIF( Upper(FunName()) == "MATA143" , MaFisRet(,"NF_PROVENT") , MaFisRet(nItem,"IT_PROVENT") ) ,SM0->M0_ESTENT) // Zona Fiscal del Cliente SIGA
Endif

cProvEnt := PadR(_cZonClSIGA,TamSX3("F1_PROVENT")[1])

_lAgente   := (SUBSTR(GETMV("MV_AGENTE"),5,1)=="S") //  Agente Percepcion IB?

nPos := 0
nPosCCO := 0
nPosSFC := 0
nPosSFH := 0
lArrayIb:= Type("aImpIB2") <> "U"
lImpCCO	:= Type("aImpCCO") <> "U"
lImpSFC := Type("aImpSFC") <> "U"
lImpSFH	:= Type("aImpSFH") <> "U"

cEspecie:=IIF(Type("cEspecie")=="C",cEspecie,"NF")
If cAlias== "SF2"
	cCod:=	M->F2_CLIENTE
	cLoja:=	M->F2_LOJA
ElseIf cAlias== "SF1"
	cCod:=	M->F1_FORNECE
	cLoja:=	M->F1_LOJA
EndIf
                    
If !(Upper(FunName()) == "FISA828")              
	If cEspecie $ "NCC|NDE"
		nOrdeSFH := 3 //FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
		cRadic   := SA1->A1_EST
	Else
		nOrdeSFH := 1 //FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
		cRadic   := SA2->A2_EST
	EndIf
EndIF

IF lXFis .And. (Alltrim(cCod)=="" .OR. Alltrim(cLoja)=="")
	cCod:=	MaFisRet(,"NF_CODCLIFOR" )
	cLoja:=	MaFisRet(,"NF_LOJA" )
	nOrdeSFH := 1 //FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
EndIf
 
If lXFis .And. lArrayIb
	cPesq:=xFilial("SF4")+MaFisRet(nItem,"IT_TES")+MaFisRet(nItem,"IT_CF")+MaFisRet(,"NF_CLIFOR" )+cCod+cLoja+MaFisRet(,"NF_PROVENT")+MaFisRet(nItem,"IT_PROVENT")+aInfo[1]//+IIf (Type("dDEmissao")=="D",AllTrim(STR(Month(dDEmissao))) + AllTrim(STR(Year(dDEmissao))), AllTrim(STR(Month(dDataBase))) + AllTrim(STR(Year(dDataBase))))
	If Type("dDEmissao")=="D"
		cPesq += AllTrim(STR(Month(dDEmissao))) + AllTrim(STR(Year(dDEmissao)))
	ElseIf Type("dDEmiss")=="D"
		cPesq += AllTrim(STR(Month(dDEmiss))) + AllTrim(STR(Year(dDEmiss)))
	Else
		cPesq += AllTrim(STR(Month(dDataBase))) + AllTrim(STR(Year(dDataBase)))
	EndIf
	cPesq += SubStr(Trim(MaFisRet(,"NF_SERIENF")),1,1)
	nPos:=Ascan(aImpIB2,{|item| item[1] == cPesq})
EndIf

If  cPaisLoc == "ARG" .and. ( (cTipo $ ("NCC|NCP") .And.  lXFis .And. IIf(aInfo[1] == "IBI",nPos == 0 ,.T.) ) .Or.  (  FunName() == "FINA100"   .And.  cRG104 == "S")  )
	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
		_cZonClSIGA = SFC->FC_PROV
	EndIf		
EndIf 

If Empty(Alltrim(_cZonClSIGA)) .And. cTipo $ ("NCC|NCP") .And. aInfo[1] == "IBL" .And. FunName() == "MATA465N"
	_cZonClSIGA := MaFisRet(,"NF_PROVENT")
EndIf
_cZonClSIGA:=Alltrim(_cZonClSIGA)

If nPos == 0
	aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{If(lXFis,{cCalculo,nItem,aInfo},ParamIxb), _cProcName, _lAgente,cProvEnt,lXFis,cXFisRap},.T.)
	If lArrayIb
		If nPos == 0
			Aadd(aImpIB2,{cPesq,aFiscal})
		Else
			aImpIB2[nPos][2] := aFiscal
		EndIf
	EndIf
Else
	aFiscal:=aImpIB2[nPos][2]
	If len(aFiscal)>13
		CCO->(DbSeek(xFilial("CCO")+aFiscal[14]))
	EndIf
Endif

If Type("aImposto") == "A" .And. Len(aImposto) > 0
	cCalcImp := aImposto[1]
ElseIf Type("aInfo") == "A" .And. Len(aInfo) > 0
	cCalcImp := aInfo[1]
Endif

_lCalcular :=  aFiscal[1]
_lEsLegal  :=  aFiscal[2]
_nAlicuota :=  aFiscal[3]
_nValorMin :=  Iif(lXfis,xMoeda(aFiscal[4],1,MaFisRet(,"NF_MOEDA"),,,,MaFisRet(,"NF_TXMOEDA")),xMoeda(aFiscal[4],1,_nMoeda,,,,nTxMoeda))
_nReducir  :=  aFiscal[5]
cIncIB     :=  aFiscal[6]
_nMoeda    :=  aFiscal[7]
 _nValorOp :=  aFiscal[9]
_nAlicDesg :=  aFiscal[11]
_cTSFiscal := aFiscal[12] 
_cCFO      := aFiscal[13]  
_cZFiscTU  := Iif(len(aFiscal)>13,aFiscal[14],_cTSFiscal)

If lXFis
	If lImpSFC
		cPesqSFC 	:= xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1]
		nPosSFC 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
	EndIf
	If nPosSFC == 0
		SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
		If (SFC->(MsSeek( xFilial("SFC") + MaFisRet(nItem,"IT_TES") + aInfo[1] )))
			If !Empty(Alltrim(SFC->FC_PROV))
				cZonCCO := SFC->FC_PROV
				lCalcTot := IIF(SFC->FC_CALCULO=="T",.T.,.F.)
			Endif 
		EndIf
		If lImpSFC 
			AADD(aImpSFC,{SFC->FC_FILIAL,SFC->FC_TES,SFC->FC_IMPOSTO,SFC->FC_PROV,SFC->FC_CALCULO,SFC->FC_INCIMP,SFC->FC_LIQUIDO,SFC->FC_INCDUPL,SFC->FC_INCNOTA})
		EndIf
	Else
		cZonCCO := aImpSFC[nPosSFC][_FCPROV]
		lCalcTot := IIF(aImpSFC[nPosSFC][_FCCALCULO]=="T",.T.,.F.)
	EndIf
	
	If lImpCCO
		cPesqCCO 	:= xFilial("CCO") + cZonCCO
		nPosCCO 	:= Ascan(aImpCCO,{|item| item[_CCOFILIAL] + item[_CCOCODPRO] == cPesqCCO})
	EndIf
EndIf

If lImpSFC .and. SF3->(ColumnPos("F3_RG1316")) > 0 .and. Type("aRG1316") <> "U"
	nPosSFC2 	:= Ascan(aImpSFC,{|item| item[_FCFILIAL] + item[_FCTES] + item[_FCIMPOSTO] == cPesqSFC})
	If LEN(aRG1316[nItem]) > 0 
		If aRG1316[nItem][1][1] <> aImpSFC[nPosSFC2][_FCTES]
			aRG1316 [nItem] := {}
		EndIf 
	EndIf
	IF SA2->A2_TIPROV <> Nil
		If (FunName() == "MATA101N" .AND. SA2->A2_TIPROV == "A"  .AND. aFiscal[15] .AND. aFiscal[16] .AND. aFiscal[17];
			 .and. aImpSFC[nPosSFC2][_FCSUMATIT]=="1" .and. aImpSFC[nPosSFC2][_FCSUMATOT] == "1";
			 .and. aImpSFC[nPosSFC2][_FCCALCULO] == "T" .and. aImpSFC[nPosSFC2][_FCLIQUIDO] =="N")
			If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
				_nAlicuota :=  _nAlicuota * CCO->CCO_COESIR 
				If _nAlicuota <> 0
					_lCalcular := .T.
					_lEsLegal  := .T. 
					If  Iif ( LEN(aRG1316[nItem]) > 0, aRG1316[nItem][1][2] <> aImpSFC[nPosSFC2][_FCIMPOSTO],.T.)
						Aadd(aRG1316[nItem],{aImpSFC[nPosSFC2][_FCTES],aImpSFC[nPosSFC2][_FCIMPOSTO],"S"})
					EndIf
				EndIf	
			EndIf
		EndIf
	EndIf
EndIf

If (FunName() == "FINA100" .And. cRG104 == "S")
	If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
		_nAlicuota := CCO->CCO_COESIR * 100
		If _nAlicuota <> 0
			_lCalcular := .T.
			_lEsLegal  := .T.
		EndIf	
	EndIf
EndIf

If Type("aHeader")=="A"
	nDocOri := Ascan(aHeader,{|x| AllTrim(x[2])=="D1_NFORI"})
EndIf

If cTipo $ ("NCC|NCP")
	DbSelectArea("CCO")
	DbSetOrder(1) //CCO_FILIAL+CCO_CODPRO
	If CCO->(MsSeek(xFilial("CCO")+cZonCCO))
		If !(CCO->CCO_CPERNC $ "1|6") .and. !lExisteNF
			_lCalcular := .F.
		ElseIf (CCO->CCO_CPERNC=="5")
			_lCalcular := .F.
		Endif
	EndIf
EndIf

IF _lCalcular  .AND. _lEsLegal
	If (cPaisLoc == "ARG" .and. (lMinIb == .T. .And. lMinCFO) .and. _nValorMin = 0) ;
		   .and. (!Empty(CCO->CCO_TPMINP) .or. CCO->CCO_TPMINP $ "1|2")
		If lPrimera == .F. 
			lAntCal := .T.
			nBasMin := MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			nBasMin -= MaFisRet(nItem,"IT_DESCONTO")
			aMPer := MinPerIIBB(1,{nItem,aInfo[1],aFiscal[13],nBasMin,_nValorMin,_nAlicuota},aInfo[2],cCalculo,@lAntCal)
			lPrimera := .T.
		Endif

		Do Case
			Case aMPer[1][3]== .F. .and. cCalculo=="B"
				xRet := {0,0,0}
			Case aMPer[1][3]== .F. 
				xRet := 0
			Case cCalculo=="A"
				xRet := iif(aMPer[1][3]== .T. .and. aMPer[1][1] <> 0,_nAlicuota,0) 
			Case cCalculo=="B"  .and. !Empty(cXFisRap)				
				xRet := {0,0,0}
				xRet[1] := iif(aMPer[1][3]== .T. .and. aMPer[1][1] <> 0,nBasMin,0) 
				xRet[2] := iif(aMPer[1][3]== .T. .and. aMPer[1][1] <> 0,_nAlicuota,0)
			Case cCalculo=="V"
				xRet := aMPer[1][1]
		Endcase
	Endif 

	If !lXFis .and. lAntCal == .T. .and. cPaisLoc == "ARG" .AND. cCalcImp == "IB4" .AND. _cTSFiscal == "N"
		aImposto[_ALIQUOTA]  := _nAlicuota // Alicuota de Zona Fiscal del Proveedor
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
	
		//Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
		//+---------------------------------------------------------------+
		//¦ Suma a la base el impuesto IVA para no inscriptos             ¦
		//+---------------------------------------------------------------+
		aImposto[_IMPINCID] := ObtIva(0,.T.,SFC->FC_TES)

		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif
		aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))                                                          	
		xRet:=aImposto

	ElseIf !lXFis .and. lAntCal == .T. .and. cPaisLoc == "ARG" .AND. cCalcImp == "IB4" .AND. _cTSFiscal == "V"

		nCoefRPer := POSICIONE("CCO",1,xFilial("CCO")+cZonCCO,"CCO_CRFPER")
		aAreaSFF	:= SFF->(Getarea())
		SFF->(DbSetOrder(10))   // FF_FILIAL+FF_IMPOSTO+FF_CFO_C+FF_ZONFIS+FF_TIPO

		IF SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + "*" ,.F.))
			nAliqSFF := SFF->FF_ALIQ
		Elseif SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal ,.F.))
			nAliqSFF := SFF->FF_ALIQ
		Endif
		SFF->(RestArea(aAreaSFF))		

		If cRadic <> "TU"
			aAreaSFH	:= SFH->(Getarea())
			SFH->(DbSetOrder(nOrdeSFH)) 
			cLlave := xFilial("SFH") + cCod + cLoja + "IB4" + _cZFiscTU //_cZonClSIGA
			If SFH->(MsSeek( cLlave ))
				While!(SFH->(Eof())) .and. ; 
					iif (nOrdeSFH = 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
                                   SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
					If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()   
						nAliqSFH := SFH->FH_ALIQ
						nCoefSFH := SFH->FH_COEFMUL
						exit  
					Endif 
					SFH->(DbSkip())
				EndDo 
			Endif
			SFH->(RestArea(aAreaSFH))		
		Endif 
		
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
		aImposto[_ALIQUOTA]  := nAliqSFF
		//Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
				 
		If aImposto[_BASECALC] > _nValorMin
			aImposto[_ALIQUOTA] := aImposto[_ALIQUOTA] * _nReducir	
			If SM0->M0_ESTENT <> "TU"		 
				If cRadic == "TU"			
					If nAliqSFH <> 0 
						aImposto[_IMPUESTO]:= Round(aImposto[_BASECALC] * ( nAliqSFH/100) * _nReducir,MsDecimais(_nMoeda))				
					Else	
						aImposto[_IMPUESTO]:= Round(aImposto[_BASECALC] * ( nAliqSFF/100) * _nReducir,MsDecimais(_nMoeda))				
					EndIf				
				ElseIf cRadic <> "TU"
					If nAliqSFH <> 0
						aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFH/100) * _nReducir *(IIf(nCoefSFH <> 0,nCoefSFH,1)),MsDecimais(_nMoeda))
					Else
						aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFF/100) * _nReducir *(IIf(nCoefSFH <> 0,nCoefSFH,1)),MsDecimais(_nMoeda))
					Endif					
				Endif
			Else
				If cRadic == "TU"
					aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) ,MsDecimais(_nMoeda))
				ElseIf cRadic <> "TU"
					If nAliqSFH <> 0
						aImposto[_ALIQUOTA] := nAliqSFF * nAliqSFH * _nReducir
						If nCoefSFH<> 0
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * nCoefSFH * (nAliqSFH / 100) * ( nAliqSFF/100) * _nReducir ,MsDecimais(_nMoeda))
							aImposto[_BASECALC] := nCoefSFH * aImposto[_BASECALC]
						ElseIf nCoefRPer <> 0 //rom
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFH / 100) *  ( nAliqSFF/100) *   nCoefRPer * _nReducir ,MsDecimais(_nMoeda))
						  	aImposto[_BASECALC] := nCoefRPer*aImposto[_BASECALC]
						Else
							aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * (nAliqSFH / 100) * ( nAliqSFF/100) * _nReducir ,MsDecimais(_nMoeda))
						EndIf
					Else
						If  nCoefSFH<> 0
							If nCoefRPer <> 0
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * nCoefSFH * ( ( aImposto[_ALIQUOTA]/100) * nCoefRPer),MsDecimais(_nMoeda))
								aImposto[_BASECALC] := nCoefRPer*aImposto[_BASECALC]*nCoefSFH
							Else
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * nCoefSFH * ( aImposto[_ALIQUOTA]/100) ,MsDecimais(_nMoeda))
								aImposto[_BASECALC] := aImposto[_BASECALC]*nCoefSFH
							EndIf
						Else
							If nCoefRPer <> 0
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( ( aImposto[_ALIQUOTA]/100) * nCoefRPer) * _nReducir ,MsDecimais(_nMoeda))
								aImposto[_BASECALC] := nCoefRPer*aImposto[_BASECALC]
							Else
								aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) ,MsDecimais(_nMoeda))
							EndIf
						EndIf
					Endif
				Endif
			EndIf  	
		EndIf		
		xRet:=aImposto
	ElseIf !lXFis .and. lAntCal == .T.

		IF cCalcImp <> "IB4" .and. _cZFiscTU <> "TU"
			aAreaSFH	:= SFH->(Getarea())
			SFH->(DbSetOrder(nOrdeSFH)) 
			cLlave := xFilial("SFH") + cCod + cLoja + cCalcImp + _cZFiscTU
			If SFH->(MsSeek( cLlave ))
				While!(SFH->(Eof())) .and. ; 
					iif (nOrdeSFH == 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
                                   SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
					If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()   
						nCoefSFH := SFH->FH_COEFMUL
						exit  
					Endif 
					SFH->(DbSkip())
				EndDo 
			Endif
			SFH->(RestArea(aAreaSFH))
		EndIF

		aImposto[_ALIQUOTA]  := _nAlicuota // Alicuota de Zona Fiscal del Proveedor
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
		aImposto[_ALIQDESG]  := _nAlicDesg

		
		IF _cTSFiscal == "V" .And. cPaisLoc == "ARG"  .AND. cTipo == "NCC" .And. cCalcImp == "IBI"
			aAreaSFF := SFF->(GetArea())
			DBSelectArea("SFF")
			SFF->(DbSetOrder(12)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_V+FF_ZONFIS+FF_TIPO
			IF SFF->(MsSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + cTipoInsc))
				If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100 // Posiciono na SFF para armazenar a base reduzida e aliquota
					nRedBase := SFF->FF_REDBASE
				EndIF
			EndIF
			SFF->(RestArea(aAreaSFF))

			aAreaSFH	:= SFH->(Getarea())
			SFH->(DbSetOrder(nOrdeSFH)) 
			cLlave := xFilial("SFH") + cCod + cLoja + cCalcImp + _cZFiscTU
			If SFH->(MsSeek( cLlave ))
				While!(SFH->(Eof())) .and. SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave
					If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()    
						nAliqFH := SFH->FH_ALIQ
						exit  
					EndIF
					SFH->(DbSkip())
				EndDo 
			Endif
			SFH->(RestArea(aAreaSFH))
			If  nAliqFH == 0 
				nRedBase := 0
			Endif
			IF  cRadic == "SA" .or. (cRadic <> "SA" .AND. _cZonClSIGA == "SA")
				aImposto[_BASECALC] := (aImposto[_BASECALC] * (1 - nRedBase / 100))
			EndIF
			IF cRadic <> "SA" .AND. _cZonClSIGA <> "SA"
				if  nAliqFH > 0 // Caso não tenha SFH utilizo a SFF
					aImposto[_BASECALC] := (aImposto[_BASECALC]  * IIf(nCoefSFH <> 0,nCoefSFH,1) )
				Else
					aImposto[_BASECALC] := (aImposto[_BASECALC] * (1 - nRedBase / 100))
				EndIF
			EndIF
		EndIF
		

      //Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
	  	Endif                                                                                                  

		//+---------------------------------------------------------------+
		//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
		//+---------------------------------------------------------Lucas-+
		aImposto[_IMPINCID]:=cIncIB
		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif

		//+---------------------------------------------------------------+
		//¦ Efectua el Cálculo del Impuesto                               ¦
		//+---------------------------------------------------------------+
		If aImposto[_BASECALC] > _nValorMin
	      	If _nAlicDesg > 0
    	   		aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
       			aImposto[_IMPUESTO]  := aImposto[_IMPUESTO] - ((aImposto[_IMPUESTO] * aImposto[_ALIQDESG]) / 100)
       		Else
			   	IF  _cZFiscTU <> "TU" .and. cCalcImp <> "IB4"
         			aImposto[_IMPUESTO]  := Round((aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir) * IIf(nCoefSFH <> 0,nCoefSFH,1) ,MsDecimais(_nMoeda))
				Else
					aImposto[_IMPUESTO]  := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
				Endif
			EndIf
		ELSE 
			aImposto[_IMPUESTO]  := 0.00
			aImposto[_IMPFLETE]  := 0.00
			aImposto[_IMPGASTOS] := 0.00
			aImposto[_RATEOFRET] := 0.00
			aImposto[_RATEODESP] := 0.00
		Endif
       
		xRet:=aImposto
	ElseIf lAntCal == .T. .and. cPaisLoc == "ARG" .AND. aInfo[1] == "IB4" .AND. _cTSFiscal == "N" .and. !(FunName() == "FINA100")
		nAliqTmp := _nAlicuota
		nIvaTU:=0
		POSICIONE("CCO",1,xFilial("CCO")+"TU","CCO_TIPO")
		If CCO->CCO_TIPO="N" .OR. _cTSFiscal == "N"
			If !Empty(cIncIB)
				aImpRef:=MaFisRet(nItem,"IT_DESCIV")
				aImpVal:=MaFisRet(nItem,"IT_VALIMP")
				For nI:=1 to Len(aImpRef)
					If !Empty(aImpRef[nI])
						IF Trim(aImpRef[nI][1])$cIncIB
							nImpTU+=aImpVal[nI]
						Endif
					Endif
				Next
			Endif
		EndIf
		_nAlicuota := nAliqTmp
		If cCalculo $ "B|V"
			If (CCO->CCO_CPERNC $ "2|4|8|0") .And. Type("aCols") == "A"
				nBase1 := 0
				nBase  := 0
				POSICIONE("CCO",1,xFilial("CCO")+"TU","CCO_TIPO")
				If CCO->CCO_TIPO="N" .OR. _cTSFiscal == "N"
					For nx:=1 to Len(aCols)
						nIvaItem := (ObtIva(nx)/100)
						nBase1   := nBase1 +  Obtbase(nx,aInfo[1]) * (nIvaItem)
					Next
				EndIf
			EndIf
			nBase := Obtbase(nItem,aInfo[1]) + nImpTU
			If cTipo $ ("NCC|NCP|NCI")
				nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO,nBase1)
				nBaseAb = IIF(nBaseAb > 0,nBaseAb + nImpTU,0)
			Else
				nBaseAb := 0
			EndIf
			If !(CCO->CCO_CPERNC $ "2|4|8|0")
				If nBaseAb > nBase
					nBase -= nBase
				Else
					nBase -= nBaseAb
				EndIf
			EndIf
		Endif 
		If cCalculo == "B" 
			Return {nBase,_nAlicuota,0}
		ElseIf cCalculo == "A"
			Return _nAlicuota
		ElseIf cCalculo == "V"
			basTot		:= MaRetBasT(aInfo[2],,_nAlicuota)
			If lCalcTot
				nBase := MaRetBasT(aInfo[2],nItem,_nAlicuota)
			Endif
			xRet := Round(nBase * (_nAlicuota / 100) * _nReducir,MsDecimais(_nMoeda))
			If ((CCO->CCO_CPERNC $ "2|4|8|0") .And. (nBaseAb <> 0))
				xRet := 0
			EndIf
			Return xRet 
		Endif 
	ElseIf lAntCal == .T. .and. cPaisLoc == "ARG" .AND. aInfo[1] == "IB4" .AND. _cTSFiscal == "V" .and. !(FunName() == "FINA100")

		If nPosCCO == 0
			nCoefRPer := POSICIONE("CCO",1,xFilial("CCO")+cZonCCO,"CCO_CRFPER")
		Else
			nCoefRPer := aImpCCO[nPosCCO][_CCOCRFPER]
		EndIf
		aAreaSFF	:= SFF->(Getarea())
		SFF->(DbSetOrder(10))   // FF_FILIAL+FF_IMPOSTO+FF_CFO_C+FF_ZONFIS+FF_TIPO
		
		IF SFF->(MsSeek(xFILIAL("SFF")+ aInfo[1] + _cCFO + _cZFiscTU + "*" ,.F.))
			nAliqSFF := SFF->FF_ALIQ
		Elseif SFF->(MsSeek(xFILIAL("SFF")+ aInfo[1] + _cCFO + _cZFiscTU + _cTSFiscal ,.F.))
			nAliqSFF := SFF->FF_ALIQ		
		Endif
		SFF->(RestArea(aAreaSFF))		

		
		If lImpSFH
			cPesqSFH 	:= xFilial("SFH") + Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P") + cCod + cLoja + "IB4" + _cZFiscTU
			nPosSFH 	:= Ascan(aImpSFH,{|item| item[_FHFILIAL] + item[_CLIPROV] + item[_FHFORCLI] + item[_FHLOJA] + item[_FHIMPOSTO] + item[_FHZONFIS] == cPesqSFH})
		EndIf
		If nPosSFH == 0
			aAreaSFH := SFH->(Getarea())
			nOrdeSFH := Iif(MaFisRet(,"NF_CLIFOR" ) == "C",3,1)//FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS  o FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
			SFH->(DbSetOrder(nOrdeSFH)) 
			cLlave := xFilial("SFH") + cCod + cLoja + "IB4" + _cZFiscTU
			If SFH->(MsSeek( cLlave ))
				While!(SFH->(Eof())) .and. ; 
					iif (nOrdeSFH = 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
                                   SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
					If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()   
						nAliqSFH := SFH->FH_ALIQ
						nCoefSFH := SFH->FH_COEFMUL
						If lImpSFH
							AADD(aImpSFH,{SFH->FH_FILIAL,Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P"),cCod,cLoja,SFH->FH_IMPOSTO,SFH->FH_ZONFIS,SFH->FH_ALIQ,SFH->FH_COEFMUL})
						EndIf
						exit  
					Endif 
					SFH->(DbSkip())
				EndDo 
			Endif
			SFH->(RestArea(aAreaSFH))		
		Else
			nAliqSFH := aImpSFH[nPosSFH][_FHALIQ]
			nCoefSFH := aImpSFH[nPosSFH][_FHCOEFMUL]
		EndIf 
		
		If SM0->M0_ESTENT == "TU" .and. cRadic <> "TU" .and. nAliqSFH <> 0  
			nAliqAux := (nAliqSFH * nAliqSFF) * _nReducir
		Else
			If nAliqSFH <> 0
				nAliqAux := nAliqSFH * _nReducir                                       
			Else
				nAliqAux := nAliqSFF * _nReducir                                   
			EndIf
		EndIf
		
		If !Empty(cIncIB)
			nIvaTU := (ObtIva(nItem)/100)
		Endif
		If cCalculo $ "B|V"
			nBase := Obtbase(nItem,aInfo[1]) * ( 1 + nIvaTU)
			If cTipo $ ("NCC|NCP|NCI")
				nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO)
			Else
				nBaseAb := 0
			EndIf
			nBase -= nBaseAb
		Endif 
		If cCalculo == "B" 
			nBaseAux := nBase
			If lCalcTot
				nBase 	+= ObtbaseT(aInfo[1],nAliqAux,aInfo[2],nItem,IIF(!Empty(cIncIB),nIvaTU,0))
			EndIf
			If SM0->M0_ESTENT <> "TU" .and. cRadic <> "TU"
				nRedTU :=  IIf(nCoefSFH <> 0,nCoefSFH,1)
			ElseIf SM0->M0_ESTENT == "TU" .and. cRadic <> "TU"
				If nAliqSFH <> 0
					If nCoefSFH <> 0
						nRedTU :=  nCoefSFH
					ElseIf nCoefRPer <> 0
						nRedTU :=  nCoefRPer
					EndIf
				Else
					If  nCoefSFH<> 0
						If nCoefRPer <> 0
							nRedTU :=  nCoefSFH * nCoefRPer
						Else    
							nRedTU :=  nCoefSFH
						EndIf
					Else
						If nCoefRPer <> 0
							nRedTU := nCoefRPer
						EndIf
					EndIf
				EndIf
			EndIf
			nBase := nBase * nRedTU
			nBase := Round(nBase,MsDecimais(_nMoeda))
			If lCalcTot .and. FindFunction("MaRatBasT")
				nBaseAux := nBaseAux * nRedTU
				nBaseAux := Round(nBaseAux,MsDecimais(_nMoeda))
				If cPaisLoc == "ARG" .And. Val(aInfo[2]) == 0
					aInfo[2] := VerificanCampo(Val(aInfo[2]))
					nBase := MaRatBasT(aInfo[2],nItem,nAliqAux,nBase,MsDecimais(_nMoeda),nBaseAux)
				else					
					nBase := MaRatBasT(val(aInfo[2]),nItem,nAliqAux,nBase,MsDecimais(_nMoeda),nBaseAux)
				Endif
			EndIf 
			Return {nBase,nAliqAux,0}//Iif(nAliqSFH <> 0,{nBase,nAliqSFH,0},{nBase,nAliqSFF,0})
		ElseIf cCalculo == "A"
			Return nAliqAux
		ElseIf cCalculo == "V"
			If lCalcTot
				If SM0->M0_ESTENT == "TU" .and. cRadic <> "TU" .and. nAliqSFH <> 0  
					nBase := MaRetBasT(aInfo[2],nItem,(nAliqSFH * nAliqSFF) * _nReducir)
				Else
					If nAliqSFH <> 0
						nBase := MaRetBasT(aInfo[2],nItem,nAliqSFH * _nReducir)
					Else
						nBase := MaRetBasT(aInfo[2],nItem,nAliqSFF * _nReducir)
					Endif
				Endif
			Else
				nBase := GetBaseFis(nItem, aInfo[2])
			Endif
		Endif 
		
		If nBase > _nValorMin
			If SM0->M0_ESTENT <> "TU"
				If cRadic == "TU"
					If nAliqSFH <> 0 
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFH * _nReducir)				
						xRet	:= Round(nBase * (nAliqSFH/100) * _nReducir,MsDecimais(_nMoeda))				
					Else
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)				
						xRet	:= Round(nBase * (nAliqSFF/100 * _nReducir) * _nReducir,MsDecimais(_nMoeda))									
					EndIf
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO)						
					Return xRet
				ElseIf cRadic <> "TU"						
					If nAliqSFH <> 0
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFH * _nReducir)   
						xRet := Round(nBase * (nAliqSFH/100) * _nReducir ,MsDecimais(_nMoeda))
					Else
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)
	    				xRet := Round(nBase * (nAliqSFF/100) * _nReducir ,MsDecimais(_nMoeda))                               
					Endif
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO) 
					Return xRet
				Endif
			Else
				If cRadic == "TU"
					If nAliqSFH <> 0
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFH * _nReducir)
						xRet	:= Round(nBase * (nAliqSFH / 100) * _nReducir,MsDecimais(_nMoeda))
					Else
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)
						xRet	:= Round(nBase * (nAliqSFF / 100) * _nReducir,MsDecimais(_nMoeda))
					EndIf
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
					Return xRet
				ElseIf cRadic <> "TU"
					If nAliqSFH <> 0   
						xRet := Round(nBase * (nAliqSFH / 100) * (nAliqSFF / 100) * _nReducir,MsDecimais(_nMoeda))
						basTot	:= MaRetBasT(aInfo[2],,(nAliqSFH * nAliqSFF) * _nReducir)
					Else
						xRet := Round(nBase * (nAliqSFF / 100) * _nReducir,MsDecimais(_nMoeda))
						basTot	:= MaRetBasT(aInfo[2],,nAliqSFF * _nReducir)
					Endif
					xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)
					Return xRet
				Endif
			EndIf        
		EndIf
	ElseIf lAntCal == .T.      

		If aInfo[1] <> "IB4" .And. _cZFiscTU <> "TU"

			If lImpSFH
				cPesqSFH 	:= xFilial("SFH") + Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P") + cCod + cLoja + cCalcImp + _cZFiscTU
				nPosSFH 	:= Ascan(aImpSFH,{|item| item[_FHFILIAL] + item[_CLIPROV] + item[_FHFORCLI] + item[_FHLOJA] + item[_FHIMPOSTO] + item[_FHZONFIS] == cPesqSFH})
			EndIf
			If nPosSFH == 0
				aAreaSFH	:= SFH->(Getarea())
				nOrdeSFH := Iif(MaFisRet(,"NF_CLIFOR" ) == "C",3,1)//FH_FILIAL+FH_CLIENTE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS   o  FH_FILIAL+FH_FORNECE+FH_LOJA+FH_IMPOSTO+FH_ZONFIS
				SFH->(DbSetOrder(nOrdeSFH)) 
				cLlave := xFilial("SFH") + cCod + cLoja + cCalcImp + _cZFiscTU 
				If SFH->(MsSeek( cLlave ))
					While!(SFH->(Eof())) .and. ; 
						iif (nOrdeSFH == 1,SFH->FH_FILIAL + SFH->FH_FORNECE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave,;   
									SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave)
						If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()  
							nCoefSFH := SFH->FH_COEFMUL
							If lImpSFH
								AADD(aImpSFH,{SFH->FH_FILIAL,Iif(MaFisRet(,"NF_CLIFOR" ) == "C","C","P"),cCod,cLoja,SFH->FH_IMPOSTO,SFH->FH_ZONFIS,SFH->FH_ALIQ,SFH->FH_COEFMUL})
							EndIf
							exit  
						Endif 
						SFH->(DbSkip())
					EndDo 
				Endif
				SFH->(RestArea(aAreaSFH))		
			Else
				nCoefSFH := aImpSFH[nPosSFH][_FHCOEFMUL]
			EndIF
		EndIf				

		If !Empty(cXFisRap)
			xRet := {0,0,0}                     
			lCalc := .T. 
			If !(MaFisRet(nItem,'IT_DELETED')  )
	    		nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			Else 	
				lCalc := .F. 
				nBase:=0
			EndIf

			If nPosSFC == 0
				nOrdSFC:=(SFC->(IndexOrd()))
				nRegSFC:=(SFC->(Recno()))
				SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
			EndIf
			If !Empty(cIncIB)
				//Tira os descontos se for pelo liquido
				If IIF(nPosSFC>0,.T.,(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))))//(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
					cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP)) //Alltrim(SFC->FC_INCIMP)
					If !(nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. cEspecie $ ("NCC"))
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )//SFC->FC_LIQUIDO=="S"
							nBase-= MaFisRet(nItem,"IT_DESCONTO")
						ElseIf cEspecie $ ("NCC") .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N" )
							lFCliq := .F.
						Endif
					EndIf
				Endif
				//+---------------------------------------------------------------+
				//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
				//+---------------------------------------------------------------+
				aImpRef:=MaFisRet(nItem,"IT_DESCIV")
				aImpVal:=MaFisRet(nItem,"IT_VALIMP")
				For nI:=1 to Len(aImpRef)
					If !Empty(aImpRef[nI])
						IF Trim(aImpRef[nI][1])$cIncIB
							nBase+=aImpVal[nI]
						Endif
					Endif
				Next
			Else
				//Tira os descontos se for pelo liquido
				If IIF(nPosSFC>0,.T.,(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))))
					cImpIncid:= IIF(nPosSFC > 0,Alltrim(aImpSFC[nPosSFC][_FCINCIMP]),Alltrim(SFC->FC_INCIMP))
					If !(nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. cEspecie $ ("NCC"))
						If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S" )
							nBase-= MaFisRet(nItem,"IT_DESCONTO")
						ElseIf cEspecie $ ("NCC") .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N" )
							lFCliq := .F.
						Endif
					EndIf
				Endif
				//+---------------------------------------------------------------+
				//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
				//+---------------------------------------------------------------+
				If !Empty(cImpIncid)
					aImpRef:=MaFisRet(nItem,"IT_DESCIV")
					aImpVal:=MaFisRet(nItem,"IT_VALIMP")
					For nI:=1 to Len(aImpRef)
						If !Empty(aImpRef[nI])
							IF Trim(aImpRef[nI][1])$cImpIncid
								nBase+=aImpVal[nI]
							Endif
						Endif
					Next
				Endif
				If nPosSFC == 0
					SFC->(DbSetOrder(nOrdSFC))
					SFC->(DbGoto(nRegSFC))
				EndIf
	        Endif

			If _cTSFiscal == "V" .And. cPaisLoc == "ARG" .And. cCalculo == "B" .And. "IB" $ cCalcImp .and. !cTipo $ ("NCC|NCP|NCI")
				aAreaSFF := SFF->(GetArea())
					DBSelectArea("SFF")
					SFF->(DbSetOrder(10)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_C+FF_ZONFIS+FF_TIPO
					IF SFF->(MsSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal))
						If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100 // Posiciono na SFF para armazenar a base reduzida e aliquota
							nRedBase := SFF->FF_REDBASE
						EndIF
					EndIF
					SFF->(RestArea(aAreaSFF))
				If  lImpSFH .and. nPosSFH == 0  // Verifico se encontra o registro dentro do array da SFH
					nPosSFH 	:= Ascan(aImpSFH,{|item| item[_FHFILIAL] + item[_CLIPROV] + item[_FHFORCLI] + item[_FHLOJA] + item[_FHIMPOSTO] + item[_FHZONFIS] == cPesqSFH})
				EndIf
				If  nPosSFH > 0 .And. len(aImpSFH) >= nPosSFH .And. aImpSFH[nPosSFH][_FHALIQ] == 0
					nRedBase := 0
				Endif
				IF cRadic == "SA" .or. (cRadic <> "SA" .AND. _cZonClSIGA == "SA")
					nBase := (nBase * (1 - nRedBase / 100)) 
				EndIF
				IF  cRadic <> "SA" 
					if nPosSFH > 0 .AND. aImpSFH[nposSFH][_FHALIQ] > 0 // Caso não tenha SFH utilizo a SFF
						If  _cZFiscTU == "SA" .And. _cZonClSIGA == "SA"
							nCoefSFH := 0
						Endif
						nBase := (nBase  * IIf(nCoefSFH <> 0,nCoefSFH,1) ) 
					Else
						nBase := (nBase * (1 - nRedBase / 100)) 
					EndIF
				EndIF
			Endif
			
		 	xRet[1]	:= nBase - IIF(SuperGetMV("MV_DESCSAI" , .T., "1" )== "2" .and. cTipo $ ("NCC") .and. lFCliq .and. nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S"),MaFisRet(nItem,"IT_DESCONTO"),0)
		 	xRet[1]	+= IIF(SuperGetMV("MV_DESCSAI" , .T., "1" )== "1" .and. cEspecie $ ("NCC") .and. nDocOri > 0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N"), MaFisRet(nItem,"IT_DESCONTO"), 0)
	 		//Valida si es para Argentina y el impuesto IBK de SF.
	 		If "IBK" == cCalcImp .And. cPaisLoc == "ARG" .And. xRet[1] != 0 .And. cCalculo == "B" .and. _cTSFiscal == "V" 
				aAreaSFF := SFF->(GetArea())
				SFF->(DbSetOrder(10)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_C+FF_ZONFIS+FF_TIPO
				
				IF SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal))
					If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100
						nBase := xRet[1] * ((100 - SFF->FF_REDBASE) / 100)
						xRet[1] := nBase
					EndIf
				EndIf
				SFF->(RestArea(aAreaSFF))
			Else
				IF _cTSFiscal == "V" .And. cCalculo == "B" .And. cPaisLoc == "ARG" .AND. cTipo == "NCC" .And. "IB" $ cCalcImp
					aAreaSFF := SFF->(GetArea())
					DBSelectArea("SFF")
					SFF->(DbSetOrder(10)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_C+FF_ZONFIS+FF_TIPO
					IF SFF->(MsSeek(xFilial("SFF") + cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal))
						If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100 // Posiciono na SFF para armazenar a base reduzida e aliquota
							nRedBase := SFF->FF_REDBASE
						EndIF
					EndIF
					SFF->(RestArea(aAreaSFF))
					If lImpSFH .and. nPosSFH == 0  // Verifico se encontra o registro dentro do array da SFH
						nPosSFH 	:= Ascan(aImpSFH,{|item| item[_FHFILIAL] + item[_CLIPROV] + item[_FHFORCLI] + item[_FHLOJA] + item[_FHIMPOSTO] + item[_FHZONFIS] == cPesqSFH})
					EndIf
					If  nPosSFH > 0 .And. len(aImpSFH) >= nPosSFH .And. aImpSFH[nPosSFH][_FHALIQ] == 0
						nRedBase := 0
					Endif
					IF  cRadic == "SA" .or. (cRadic <> "SA" .AND. _cZonClSIGA == "SA")
						xRet[1] := (xRet[1] * (1 - nRedBase / 100)) 
					EndIF
					IF cRadic <> "SA" 
						If  nPosSFH > 0 .AND. aImpSFH[nposSFH][_FHALIQ] > 0 // Caso não tenha SFH utilizo a SFF
							If  _cZFiscTU == "SA" .And. _cZonClSIGA == "SA"
								nCoefSFH := 0
							Endif
							xRet[1] := (xRet[1]  * IIf(nCoefSFH <> 0,nCoefSFH,1) )
						Else
							xRet[1] := (xRet[1] * (1 - nRedBase / 100)) 	
						EndIF
					EndIF
				Else
					xRet[1]	:= nBase - IIF(SuperGetMV("MV_DESCSAI" , .T., "1" )== "2" .and. cTipo $ ("NCC") .and. lFCliq .and. nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S"),MaFisRet(nItem,"IT_DESCONTO"),0)
					xRet[1] 	+= IIF(SuperGetMV("MV_DESCSAI" , .T., "1" )== "1" .and. cEspecie $ ("NCC") .and. nDocOri > 0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N"), MaFisRet(nItem,"IT_DESCONTO"), 0)
				EndIF 
			EndIf
			
			MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)
			xRet[2]	:= _nAlicuota			
			If FunName() == "FINA100"
				If (cPaisLoc == "ARG" .And. cRG104 == "S")
					CCO->(DbSetOrder(1)) //CCO_FILIAL+CCO_CODPRO
					If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
						xRet[2] := CCO->CCO_COESIR * 100	
					EndIf
				EndIf
			EndIf
			
			// Trata Campo da Provincia   v
			
			If cTipo $ ("NCC|NCP|NCI")
				nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO)
			Else       
				nBaseAb:=0
			EndIf	
			
			If cTipo $ ("NCC|NCP|NCI") //.And. _cZonClSIGA == "RN" .And. aInfo[1] == "IBL"
				If !M100VPER(cTipo, cAlias, cZonCCO, cCalculo)
					xRet[1] := 0
					xRet[2] := 0 
					nBaseAb := nBase
				EndIf
			EndIf 
					
			If "V" $ cXFisRap
				SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
				If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
					If SFC->FC_CALCULO=="T"	                            
					     
						If MaFisRet(,'NF_VALIV'+aInfo[2])== 0                  
						 	lCalc := .F. 
							nBase:=nBase + MaRetBasT(aInfo[2],nItem,_nAlicuota)   
						Else     
						  	lCalc := (MaRetBasT(aInfo[2],nItem,_nAlicuota)+nBase) >MaFisRet(,"NF_MINIV"+aInfo[2])	
						EndIf
					
						If  lCalc  .OR. nBase>MaFisRet(,"NF_MINIV"+aInfo[2])
							//Si aplica RG ATER 319-16
							If CCO->(ColumnPos("CCO_TPLIMP")) > 0 .And. CCO->CCO_TPLIMP == "2" .And. _nValorOp > 0 .And. MaFisRet(,"NF_OPERNF") == "S" .And. MaFisRet(,"NF_CLIFOR") == "C" .And. (AllTrim(cTipo) == "NF" .Or. AllTrim(cTipo) == "NCC" .Or. AllTrim(cTipo) == "NDC" .Or. AllTrim(cTipo) == "NDE" .Or. AllTrim(cTipo) == "NCE")
								If _nAlicDesg > 0
									If nBase == nBaseAb .And. cCalcImp == "IBK"
										aBaseAc := PerAcum(aInfo[1], aInfo[2], _nValorOp, nBase, .F.)
										If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] == 0
											xRet[3] := aBaseAc[1][2]
										Else
											xRet[3] := Round((aBaseAc[1][1]) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
										EndIf
									Else
										aBaseAc := PerAcum(aInfo[1], aInfo[2], _nValorOp, nBase - nBaseAb, .F.)
										If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] == 0
											xRet[3] := aBaseAc[1][2]
										Else
											xRet[3] := Round((aBaseAc[1][1]) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
										EndIf
									EndIf
									xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
								Else
									If nBase == nBaseAb .And. cCalcImp == "IBK"
										aBaseAc := PerAcum(aInfo[1], aInfo[2], _nValorOp, nBase, .F.)
										If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] == 0
											xRet[3] := aBaseAc[1][2]
										Else
											xRet[3] := Round((nBase) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
										EndIf
									Else
										aBaseAc := PerAcum(aInfo[1], aInfo[2], _nValorOp, nBase - nBaseAb, .F.)
										If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] == 0
											xRet[3] := aBaseAc[1][2]
										Else
											xRet[3] := Round((nBase - nBaseAb) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
										EndIf
									EndIf
							 	EndIf
							 	If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] != 0
							 		xRet[3] -= aBaseAc[1][2]
							 	EndIf
							Else
							 	If _nAlicDesg > 0
									If nBase == nBaseAb .And. cCalcImp == "IBK"
										xRet[3] := Round((nBase) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
									Else
										xRet[3] := Round((nBase - nBaseAb) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
									EndIf
									xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
								Else
									If nBase == nBaseAb .And. cCalcImp == "IBK"
										xRet[3] := Round((nBase) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
									Else
										xRet[3] := Round((nBase - nBaseAb) * (_nAlicuota / 100) * _nReducir, MsDecimais(_nMoeda))
									EndIf
							 	EndIf
							EndIf
			  			Endif
					Else
						If nBase >  _nValorMin
							If _nAlicDesg > 0
								If nBase == nBaseAb .And. cCalcImp == "IBK"
									xRet[3] := Round((nBase) * (_nAlicuota /100) * _nReducir, MsDecimais(_nMoeda))
								Else
									xRet[3] := Round((nBase-nBaseAb) * (_nAlicuota /100) * _nReducir,MsDecimais(_nMoeda))
								EndIf
							   	xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
							Else
								If nBase == nBaseAb .And. cCalcImp == "IBK"
									xRet[3] := Round((nBase) * (_nAlicuota /100) * _nReducir, MsDecimais(_nMoeda))
								Else
									xRet[3] := Round((nBase-nBaseAb) * (_nAlicuota /100) * _nReducir,MsDecimais(_nMoeda))
								EndIf
							EndIf
			  			Endif
					Endif
				Endif
		 	Endif
		 	
			DBSelectArea("SFF")
			SFF->(DbSetOrder(10)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_C+FF_ZONFIS+FF_TIPO
			SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal))
			
		 	If(cPaisLoc == "ARG" .AND. aInfo[1] == "IBK") .And. AllTrim(cTipo) $ ("NCC")

		 		If nDocOri>0 .and. !Empty(aCols[nItem][nDocOri])
		 			nBase := xRet[1]
		 		EndIf

				aInfoImp 	:= M100RLIM(aInfo[1], SFF->FF_TIPO)
				If (aInfoImp[2]) == "4"
		    		For nCount := 1 To nItem
		      			If aCols[nCount][21] == aCols[nItem][21] 
		      				nSumItem += Iif(MaFisRet(nCount,'IT_BASEIV'+aInfo[2]) = 0, nBase, MaFisRet(nCount,'IT_BASEIV'+aInfo[2])) 
		      			EndIF
		      		Next  
                            
		      		xCalIB := GetValFact(nSumItem, nItem, aInfo[2], nBase, nDocOri) 
		      		If ValType(xCalIB) == "A" 
		      			Iif(xCalIB[1][1] == .T., xRet[1]	:= xCalIB[1][2], "")
		      		Else
		      			xRet[1]	:= nBase	
		      		EndIf
				EndIf
			EndIf
			If nPosSFC == 0
				SFC->(DbSetOrder(nOrdSFC))
				SFC->(DbGoto(nRegSFC))
			EndIf
		Else
		   If cCalculo=="B"
				// Trata Campo da Provincia   v
				If cTipo $ ("NCC|NCP|NCI")
					nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO)
				Else       
					nBaseAb:=0
				EndIf
				
				If cTipo $ ("NCC|NCP|NCI")
					Iif(M100VPER(cTipo, cAlias, cZonCCO, cCalculo), nBaseAb := nBaseAb, nBaseAb := nBase)
				EndIf 
					
				If !(MaFisRet(nItem,'IT_DELETED')  )	
					nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO") - nBaseAb
				Else
					nBase:= 0
				EndIf
		        
	            If !Empty(cIncIB)
					//+---------------------------------------------------------------+
					//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
					//+---------------------------------------------------------------+
					If !Empty(cIncIB)
						aImpRef:=MaFisRet(nItem,"IT_DESCIV")
						aImpVal:=MaFisRet(nItem,"IT_VALIMP")
						For nI:=1 to Len(aImpRef)
							If !Empty(aImpRef[nI])
								IF Trim(aImpRef[nI][1])$cIncIB
									nBase+=aImpVal[nI]
								Endif
							Endif
						Next
					Endif
				Else
					//Tira os descontos se for pelo liquido
					nOrdSFC:=(SFC->(IndexOrd()))
					nRegSFC:=(SFC->(Recno()))
					SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
					If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
							cImpIncid:=Alltrim(SFC->FC_INCIMP)
						If SFC->FC_LIQUIDO=="S"
							nBase-= MaFisRet(nItem,"IT_DESCONTO")
						Endif
					Endif
						//+---------------------------------------------------------------+
						//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
						//+---------------------------------------------------------------+
						If !Empty(cImpIncid)
							aImpRef:=MaFisRet(nItem,"IT_DESCIV")
							aImpVal:=MaFisRet(nItem,"IT_VALIMP")
							For nI:=1 to Len(aImpRef)
								If !Empty(aImpRef[nI])
									IF Trim(aImpRef[nI][1])$cImpIncid
										nBase+=aImpVal[nI]
									Endif
								Endif
							Next
						Endif
		
					SFC->(DbSetOrder(nOrdSFC))
					SFC->(DbGoto(nRegSFC))
		        Endif
		         //Valida si es para Argentina y el impuesto IBK.
				If "IBK" == cCalcImp .And. cPaisLoc == "ARG" .and. nBase != 0 .and. _cTSFiscal == "V" 
					aAreaSFF := SFF->(GetArea())
					SFF->(DbSetOrder(10)) //FF_FILIAL+FF_IMPOSTO+FF_CFO_C+FF_ZONFIS+FF_TIPO
					
					IF SFF->(MsSeek(xFILIAL("SFF")+ cCalcImp + _cCFO + _cZFiscTU + _cTSFiscal))
						If SFF->FF_REDBASE >= 0 .And. SFF->FF_REDBASE <= 100
							nBase := nBase * ((100 - SFF->FF_REDBASE) / 100)
						EndIf
					EndIf
					SFF->(RestArea(aAreaSFF))
				EndIf
		 		xRet	:=	nBase                                                          
			ElseIf cCalculo=="A"
				xRet	:=	Iif(_nReducir <> 0, Iif(lExisteNF, _nAlicuota,_nAlicuota * _nReducir), _nAlicuota)
				If FunName() == "FINA100"
					If (cPaisLoc == "ARG" .And. cRG104 == "S")
						CCO->(DbSetOrder(1)) //CCO_FILIAL+CCO_CODPRO
						If (CCO->(MsSeek(xFilial("CCO") + cZonCCO)))
							xRet := CCO->CCO_COESIR	* 100
						EndIf
					EndIf
				EndIF
			ElseIf cCalculo=="V" 
				MaFisAlt('NF_MINIV'+aInfo[2],_nValorMin,nItem)	 		    
				If nPosSFC == 0
					nOrdSFC:=(SFC->(IndexOrd()))
					nRegSFC:=(SFC->(Recno()))
					SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
				EndIf
				
				// Trata Campo da Provincia   v
				If cTipo $ ("NCC|NCP|NCI")
					nBaseAb:=M100VLNC(cTipo,cAlias,cZonCCO,,@lEsRem)
				Else       
					nBaseAb:=0
				EndIf 
				
				If cTipo $ ("NCC|NCP|NCI")
					Iif(M100VPER(cTipo, cAlias, cZonCCO, cCalculo), nBaseAb := nBaseAb, nBaseAb := MaFisRet(nItem,'IT_BASEIV'+aInfo[2]))
				EndIf 
				
				If IIF(nPosSFC>0,.T.,(SFC->(MsSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1]))))
					If IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCCALCULO]=="T",SFC->FC_CALCULO=="T")
						If nBaseAb > 0 .and. cTipo $ ("NCC|NCP|NCI")
							nBaseAb := MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV'+aInfo[2]))
						EndIf
				    	If MaFisRet(,'NF_BASEIV'+aInfo[2])+MaFisRet(nItem,'IT_BASEIV'+aInfo[2]) >  MaFisRet(,"NF_MINIV"+aInfo[2])
			  		  		If CCO->(ColumnPos("CCO_TPLIMP")) > 0 .And. CCO->CCO_TPLIMP == "2" .And. MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) > 0 .And. (AllTrim(cEspecie) == "NF" .Or. AllTrim(cEspecie) == "NCC" .Or. AllTrim(cEspecie) == "NDC" .Or. AllTrim(cEspecie) == "NDE" .Or. AllTrim(cEspecie) == "NCE")
								If (MaFisRet(nItem,'IT_BASEIV' + aInfo[2])) == nBaseAb .And. cCalcImp == "IBK"
									aBaseAc := PerAcum(aInfo[1], aInfo[2], aFiscal[9], MaRetBasT(aInfo[2], nItem, MaFisRet(nItem, 'IT_ALIQIV' + aInfo[2])), .F.)							
								Else
									aBaseAc := PerAcum(aInfo[1], aInfo[2],_nValorOp, MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) - nBaseAb, IIF (alltrim(cEspecie)$"NCC|NDE",.F.,.T.) )
								EndIf
								xRet := Round(aBaseAc[1][1] * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir, MsDecimais(_nMoeda))
								
								If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] != 0
							 		xRet -= aBaseAc[1][2]
							 		If xRet < 0
							 			xRet := Abs(xRet)
							 		EndIf
							 	EndIf
							 	
							 	If aBaseAc[1][2] != 0 .And. aBaseAc[1][1] == 0
									xRet := aBaseAc[1][2]
								EndIf
							Else
								IF cCalcImp <> "IB4" .and. _cZFiscTU <> "TU"
									IF	"IB" $ cCalcImp
										aAreaSFH	:= SFH->(Getarea())
										SFH->(DbSetOrder(nOrdeSFH)) 
										cLlave := xFilial("SFH") + cCod + cLoja + cCalcImp + _cZFiscTU
										If SFH->(MsSeek( cLlave ))
											While!(SFH->(Eof())) .and. SFH->FH_FILIAL + SFH->FH_CLIENTE + SFH->FH_LOJA + SFH->FH_IMPOSTO + SFH->FH_ZONFIS == cLlave
												If SFH->FH_TIPO == _cTSFiscal .and. A085aVigSFH()    
													nAliqFH := SFH->FH_ALIQ
													exit  
												EndIF
												SFH->(DbSkip())
											EndDo 
										Endif
										SFH->(RestArea(aAreaSFH))
										If  nAliqFH == 0 
											nRedBase := 0
										Endif
										IF  nAliqFH > 0 .And. cRadic <> "SA" .AND. _cZonClSIGA <> "SA"
											If _nReducir <> 0
												xRet := Round(((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100)), MsDecimais(_nMoeda))
											Else	
												xRet := Round(((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir), MsDecimais(_nMoeda))											
											Endif
										Else
											If _nReducir <> 0
												xRet := Round(((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100)), MsDecimais(_nMoeda))
											Else	
												xRet := Round(((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir), MsDecimais(_nMoeda))											
											Endif
										EndIF
										
									Else
										xRet := Round(((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir)* IIf(nCoefSFH <> 0,nCoefSFH,1), MsDecimais(_nMoeda))
									EndIF
								Else
									xRet := Round((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir, MsDecimais(_nMoeda))
								EndIf
							EndIf
			  			Endif
	            	Else
						If MaFisRet(nItem,'IT_BASEIV'+aInfo[2]) >  _nValorMin
							If _nReducir <> 0 .And. cPaisLoc == "ARG" .And. "IB" $ cCalcImp  .AND. _cZFiscTU <> "TU"
								xRet := Round(((MaFisRet(nItem,'IT_BASEIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100), MsDecimais(_nMoeda))
				  			Else
								xRet := Round(((MaFisRet(nItem,'IT_BASEIV' + aInfo[2])) - nBaseAb) * ((MaFisRet(nItem,'IT_ALIQIV' + aInfo[2])) / 100) * _nReducir, MsDecimais(_nMoeda))
							Endif
						Endif
				  	EndIf
				Endif
	  		      	
				If nPosSFC == 0
					SFC->(DbSetOrder(nOrdSFC))
					SFC->(DbGoto(nRegSFC))
				EndIf
		 	Endif
		Endif
	Endif
ENDIF

If cCalculo=="V" .and. lPrimera == .T. .and. lMinIb == .T.
	Asize(aMPer,0)
	lPrimera := .F.
Endif 
	
If lXFis .and. cCalculo == "V" .and. _lCalcular .and. !(cPaisLoc == "ARG" .AND. cCalcImp == "IB4" .AND. _cTSFiscal == "N") .and. !(FunName() == "FINA100")// Minimos
	IF _nReducir <> 0 .And. cPaisLoc == "ARG" .And. "IB" $ cCalcImp  .AND. _cZFiscTU <> "TU"
		If lExisteNF
			If cCalcImp == "IBK" .And. cPaisLoc == "ARG" .And. cEspecie == "NCC"
				basTot := ObtbasIBK(aInfo[1],aInfo[2],nItem) 
			Else
				basTot	:= MaRetBasT(aInfo[2],,_nAlicuota)
			EndIf

		Else
			basTot	:= MaRetBasT(aInfo[2],,_nAlicuota * _nReducir)
		Endif
	Else
		basTot	:= MaRetBasT(aInfo[2],,_nAlicuota )
	Endif
	xRet	:= CCOMin(_nValorMin,lMinIb,basTot,xRet,cZonCCO,nPosCCO,lImpCCO,_nMoeda, nTxMoeda,lXfis)

	If  cCalcImp == "IBK" .And. xRet > 0 .and. cEspecie == "NCC"
		If  (ValType(aHeader) != "U" .And. ValType(aHeader) != "U")
			nPosBasIBK := aScan(aHeader, { |x| x[2] == "D2_BASIMP"+aInfo[2]})
			nPosAlqIBK := aScan(aHeader, { |x| x[2] == "D2_ALQIMP"+aInfo[2]})
			nPosValIBK := aScan(aHeader, { |x| x[2] == "D2_VALIMP"+aInfo[2]})
		EndIf
		IIf (IsInCallStack("LxDocOri"), nItDocOri := nItem, nItDocOri := Len(aCols))
		For nX:= 1 to nItDocOri	
			If  nX <> nItem .And. !MaFisRet(nX,"IT_DELETED")
				nBasIBK := MaFisRet(nX,"IT_BASEIV"+aInfo[2])
				nAlqIBK := MaFisRet(nX,"IT_ALIQIV"+aInfo[2])
				nValIBK := Round(nBasIBK * (nAlqIBK/100), MsDecimais(_nMoeda))
				MaFisAlt("IT_VALIV"+aInfo[2], nValIBK, nX)

				//Actualiza aCols
					If nPosBasIBK > 0
						aCols[nX][nPosBasIBK] := nBasIBK
					EndIf
					If nPosAlqIBK > 0
						aCols[nX][nPosAlqIBK] := nAlqIBK
					EndIf
					If nPosValIBK >0
						aCols[nX][nPosValIBK] := nValIBK
					EndIf
			EndIf
		next
	EndIf
endif 
		
dbSelectArea( cAliasRot )
dbSetOrder( cOrdemRot )

Return( xRet )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99

Static Function M100VLNC(cTipo,cAlias,cProv,nAuxBase,lEsRem)
Local nBaseAbt  := 0
Local nx        := 1
Local aNFEDev   := {}
Local nPos      := 0
Local lVeriPrv  := .F.
Local aAreaAtu  := {}
Local cTipCalc  := "0"
Local lDesc     := .T.
Local nBasDev   := 0
Local aAliasSF1 := SF1->(GetArea())
Local aAliasSF2 := SF2->(GetArea())
Local aAliasSD1	:= SD1->(GetArea())
Local aAliasSD2	:= SD2->(GetArea())
Local cAliasSD 	:= ""
Local cDescSai	:= SuperGetMV("MV_DESCSAI" , .T., "1" )
Local lRemito 	:= .F.
Local lIsRemito := .F.
Local cDocRem   := ""
Local cSerRem   := ""
Local cDocFacR  := ""
Local cSerFacR  := ""
Local cValImp  := ""

Default nAuxBase := 0
Default lEsRem = .F.

If AliasInDic("CCO")
	aAreaAtu:=GetArea()
	CCO->(DbSetOrder(1)) //CCO_FILIAL+CCO_CODPRO
    If CCO->(MsSeek(xFilial("CCO") + cProv) )  .And. !(CCO->CCO_CPERNC $ " 1") .And. !(CCO->CCO_CPERNC $ " 6")
		lVeriPrv:=.T.
		cTipCalc := CCO->CCO_CPERNC
	EndIf   
	RestArea(aAreaAtu)
EndIf
		    
If Type("aCols")=="A" .And. lVeriPrv
	If !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO")) .And. !Empty(GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM"))
		lIsRemito := .T.
		cAliasSD := IIF(cAlias=="SF2","D2","D1")
		DBSelectArea("S" + cAliasSD)
		("S" + cAliasSD)->(DBSetOrder(IIF(cAliasSD == "D1",2,3)))//D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA o  D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM
		//Si existe el Remito de Devolución
		If MsSeek(IIF(cAliasSD == "D1",xFilial("SD1")+GetValorCl("D1_COD")+GetValorCl("D1_REMITO")+GetValorCl("D1_SERIREM")+M->F1_FORNECE+M->F1_LOJA,;
			xFilial("SD2")+GetValorCl("D2_REMITO")+GetValorCl("D2_SERIREM")+M->F2_CLIENTE+M->F2_LOJA+GetValorCl("D2_COD")+GetValorCl("D2_ITEM")))

			//Si existe el Remito de venta
			DBSelectArea("S" + IIF(cAliasSD == "D1","D2","D1"))
			("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",3,2)))//D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM o  D1_FILIAL+D1_COD+D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA
			If MsSeek(IIF(cAliasSD == "D1",xFilial("SD2")+SD1->D1_NFORI+SD1->D1_SERIORI+M->F1_FORNECE+M->F1_LOJA+SD1->D1_COD,;
				xFilial("SD1")+SD2->D2_COD+SD2->D2_NFORI+SD2->D2_SERIORI+M->F2_CLIENTE+M->F2_LOJA))

				//Si existe una factura
				cDocRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
				cSerRem := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")

				("S" + IIF(cAliasSD == "D1","D2","D1"))->(DBSetOrder(IIF(cAliasSD == "D1",17,21)))// D2_FILIAL+D2_SERIREM+D2_REMITO o  D1_FILIAL+D1_SERIREM+D1_REMITO

				If MsSeek(xFilial("S" + IIF(cAliasSD == "D1","D2","D1"))+ cSerRem + cDocRem)
					//Si encontro los datos de la factura, guarda doc y serie y pone la bandera de encontrado en .T.
					lRemito := .T.
					cDocFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_DOC")
					cSerFacR := ("S" + IIF(cAliasSD == "D1","D2","D1"))->&(IIF(cAliasSD == "D1","D2","D1") + "_SERIE")
				EndIf
			EndIf
		EndIf
	EndIf
	For nx:= 1 to Len(aCols)
		If !(aCols[nx][Len(aCols[nx])])
			If !MaFisFound("IT",nx)
				Loop
			EndIf
			//Si es un remito y se encontro la factura ligada.
			If lIsRemito .And. lRemito
				lEsRem := .T.
				nPos:=aScan(aNFEDev,{|x|x[3]==GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
				nBasDev:=MaFisRet(nX,"IT_VALMERC")
				If (cDescSai == "1" .and. !(cEspecie $ ("NCC"))) .or. cDescSai == "2"
					If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nX,"IT_TES")+aInfo[1])))
						cImpIncid:=Alltrim(SFC->FC_INCIMP)
						If SFC->FC_LIQUIDO=="S"
							nBasDev-= MaFisRet(nX,"IT_DESCONTO")
						Endif
					Endif
				EndIf
				If nPos > 0
					aNFEDev[nPos][2]:= aNFEDev[nPos][2]+nBasDev
				Else
					Aadd(aNFEDev,{cDocFacR+cSerFacR,nBasDev,GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_REMITO",nX) + GetValorCl(IIF(cAlias=="SF2","D2","D1")+"_SERIREM",nX)})
				EndIf
			Else
   				nPos:=aScan(aNFEDev,{|x|x[1]==MaFisRet(nx,"IT_NFORI")+MaFisRet(nx,"IT_SERORI")} )  
   				nBasDev:=MaFisRet(nX,"IT_VALMERC")
		   		If (cDescSai == "1" .and. !(cEspecie $ ("NCC"))) .or. cDescSai == "2"
					If (SFC->(MsSeek(xFilial("SFC")+MaFisRet(nX,"IT_TES")+aInfo[1])))
						cImpIncid:=Alltrim(SFC->FC_INCIMP)
						If SFC->FC_LIQUIDO=="S"
							nBasDev-= MaFisRet(nX,"IT_DESCONTO")
						Endif
					Endif
				EndIf
	   		 	If nPos >0  
	    			aNFEDev[nPos][2]:= aNFEDev[nPos][2]+nBasDev
		   		Else
		    		Aadd(aNFEDev,{MaFisRet(nX,"IT_NFORI")+MaFisRet(nX,"IT_SERORI"),nBasDev})
	   	 		EndIf	
       		EndIf
		EndIf
	Next
					
	For nX:=1 to Len(aNFEDev)
		If cEspecie $ ("NCI") .and. cAlias== "SF1
			cColLiv:="SF1->F1_BASIMP"+aInfo[2]
			cValImp := "SF1->F1_VALIMP"+aInfo[2]
			SF1->(DBSetOrder(1))
			If SF1->(MsSeek(xFilial("SF1")+ aNFEDev[nX][1] +M->F1_FORNECE+M->F1_LOJA,.F.)) 
				If cTipCalc== "2" .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
					                                               
				ElseIf cTipCalc== "3" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF1->F1_EMISSAO)
					lDesc:=.F.
				
				ElseIF cTipCalc== "4" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO) == Year(SF1->F1_EMISSAO);
				                      .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF1->F1_EMISSAO)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8" .And. Month(M->F1_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF1->F1_EMISSAO);
										  .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF1->F1_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF1->F1_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF1->F1_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF1->F1_EMISSAO,M->F1_EMISSAO) .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf
		ElseIf cAlias== "SF2
			cColLiv:="SF1->F1_BASIMP"+aInfo[2]
			cValImp := "SF1->F1_VALIMP"+aInfo[2]
			SF1->(DBSetOrder(1))//F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA
			If SF1->(MsSeek(xFilial("SF1")+ aNFEDev[nX][1] +M->F2_CLIENTE+M->F2_LOJA,.F.)) 
				If cTipCalc== "2" .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc== "3" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					lDesc:=.F.
				ElseIF cTipCalc== "4" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO) == Year(SF1->F1_EMISSAO) ;
				                      .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO)
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8".And. Month(M->F2_EMISSAO) == Month(SF1->F1_EMISSAO) .And. Year(M->F2_EMISSAO)== Year(SF1->F1_EMISSAO);
										 .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					If DAY(SF1->F1_EMISSAO) <= 15 .And. DAY(M->F2_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF1->F1_EMISSAO) >= 16 .And. DAY(M->F2_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF1->F1_EMISSAO,M->F2_EMISSAO) .And. aNFEDev[nX][2] == SF1->F1_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf
		ElseIf cAlias== "SF1
			cColLiv:="SF2->F2_BASIMP"+aInfo[2]
			cValImp := "SF2->F2_VALIMP"+aInfo[2]
			SF2->(DBSetOrder(1))//F2_FILIAL+F2_DOC+F2_SERIE+F2_CLIENTE+F2_LOJA
			If SF2->(MsSeek(xFilial("SF2")+ aNFEDev[nX][1] +M->F1_FORNECE+M->F1_LOJA,.F.))
				If cTipCalc== "2" .And. ((aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. ));
				 .Or. (aInfo[1] == "IB4" .And. (aNFEDev[nX][2] + nAuxBase) == &(cColLiv))) 
					lDesc:=.F.
				ElseIf cTipCalc== "3" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					lDesc:=.F.
				ElseIF cTipCalc== "4" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO) == Year(SF2->F2_EMISSAO);
				                      .And.  ((aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )); 
				                      .Or. (aInfo[1] $ "IB4" .And. (aNFEDev[nX][2] + nAuxBase) == &(cColLiv)))
					lDesc:=.F.
				ElseIf cTipCalc == "7" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO)
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "8" .And. Month(M->F1_EMISSAO) == Month(SF2->F2_EMISSAO) .And. Year(M->F1_EMISSAO)== Year(SF2->F2_EMISSAO);
										  .And.  ((aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. ));
										   .Or. (aInfo[1] == "IB4" .And. (aNFEDev[nX][2] + nAuxBase) == &(cColLiv)))
					If DAY(SF2->F2_EMISSAO) <= 15 .And. DAY(M->F1_EMISSAO) <= 15
						lDesc:=.F.
					ElseIf DAY(SF2->F2_EMISSAO) >= 16 .And. DAY(M->F1_EMISSAO) >= 16
						lDesc:=.F.
					EndIf
				ElseIf cTipCalc == "9" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "0" .and. ValidaVig(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. ((aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )); 
				.Or. (aInfo[1] == "IB4" .And. (aNFEDev[nX][2] + nAuxBase) == &(cColLiv)))
					lDesc:=.F.
				ElseIf cTipCalc == "A" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO)
					lDesc:=.F.
				ElseIf cTipCalc == "B" .and. VigValida(SF2->F2_EMISSAO,M->F1_EMISSAO) .And. ((aNFEDev[nX][2] == SF2->F2_VALMERC .and. Iif(aInfo[1] == "IBK",Iif(&(cValImp) > 0 , .T. , .F. ) ,.T. )); 
				.Or. (aInfo[1] == "IB4" .And. (aNFEDev[nX][2] + nAuxBase) == &(cColLiv)))
					lDesc:=.F.
				EndIf 
				
				If lDesc
					nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
				EndIf
			ElseIf cTipCalc $ "2|3|4|7|8|9|0|A|B"
				nBaseAbt:= nBaseAbt +aNFEDev[nX][2]
			EndIf	
		EndIf	
	Next  
EndIf 
SF1->(RestArea(aAliasSF1))
SF2->(RestArea(aAliasSF2))
SD1->(RestArea(aAliasSD1))
SD2->(RestArea(aAliasSD2))
Return(nBaseAbt)

Static Function M100RLIM(cInfo, cTipoContr)
	Local aMin		:= {}
	Local cQuery	:= ""
	Local aArea		:= SD1->(GetArea())
	Local nTes		:= ""
	Local cTes		:= ""
	Local cCod		:= ""

	Default cTipoContr := ""

	AADD(aMin, 0)
	AADD(aMin, "")
	
	If (Type("aHeader") == "U" .Or. Type("aCols") == "U")
		Return aMin
	Else
		nTes := aScan(aHeader,{|x| AllTrim(x[2]) == "D1_TES"	} )
		cTes := IIf(Type("M->D1_TES")=="C" ,M->D1_TES,aCols[n,nTes])
	EndIf
	
	cQuery 	:= 	"SELECT "
	cQuery 	+= 		"F4_CF "
	cQuery 	+= 	"FROM"
	cQuery 	+= 		RetSqlName("SF4")+ " SF4 "
	cQuery 	+= 	"WHERE "
	cQuery 	+= 		"F4_CODIGO='" +cTes+"' AND "
	cQuery 	+= 		"F4_FILIAL='" + xFilial("SF4")+"' AND "
	cQuery	+=	"SF4.D_E_L_E_T_=' ' "
	
	cQuery :=	ChangeQuery(cQuery)
	TcQuery cQuery New Alias "tmpGetCod"  
	
	If tmpGetCod->(!Eof())		
		cCod		:= (tmpGetCod->F4_CF)	
		DbCloseArea()
    EndIf
	
	cQuery 	:= 	"SELECT "
	cQuery 	+= 		"FF_TPLIM, FF_LIMITE "
	cQuery 	+= 	"FROM"
	cQuery 	+= 		RetSqlName("SFF")+ " SFF "
	cQuery 	+= 	"WHERE "
	cQuery 	+= 		"FF_CFO_C = '" + cCod + "' AND "
	cQuery 	+= 		"FF_IMPOSTO = '" +cInfo + "' AND "
	If !Empty(cTipoContr) //Se filtra el Tipo Contribuyente
		cQuery +=	"FF_TIPO = '" + cTipoContr + "' AND "
	EndIf
	cQuery 	+= 		"FF_FILIAL = '" + xFilial("SFF") + "' AND " 
	cQuery	+=	"SFF.D_E_L_E_T_=' ' "
	
	cQuery :=	ChangeQuery(cQuery)
	TcQuery cQuery New Alias "tmpGetLim"  
	
	If tmpGetLim->(!Eof())		
		aMin[1]	:= (tmpGetLim->FF_LIMITE)
		aMin[2] := (tmpGetLim->FF_TPLIM)
		DbCloseArea()
	Else			
		DbCloseArea()
    EndIf
    
Return aMin

Static function GetValFact(nBase, nItem, cCampo, nBaseItem, nDocOri)
Local lRet 		:= .F.
Local cFornece 	:= M->F1_FORNECE
Local cLoja 	:=  M->F1_LOJA
Local cQuery 	:= ""

Default nBaseItem := 0

	cQuery := "SELECT "
	cQuery += "Sum(F3_BASIMP" + cCampo + ") SF3TFAC, "
	cQuery += "Sum(F3_VALMERC) SF3VAL "
	cQuery += "FROM "
	cQuery += RetSQLName("SF3") + " SF3 "
	cQuery += "WHERE "
	cQuery += "F3_FILIAL = '" + xFilial("SF3") + "' AND "
	cQuery += "F3_CLIEFOR ='" + cFornece + "' AND F3_LOJA = '" + cLoja + "' AND "
	cQuery += "F3_NFISCAL = '" + aCols[nItem][nDocOri] + "' AND "
	cQuery += "F3_TIPOMOV = 'V' AND "
	cQuery += "F3_ESPECIE IN ('NF') AND "
	cQuery += "SF3.D_E_L_E_T_=' ' " 
	
	cQuery := ChangeQuery(cQuery)
	TcQuery cQuery New Alias "TmpSumSF3"
	
	If TmpSumSF3->(!EOF())
		If(TmpSumSF3->SF3VAL == nBase) .Or. (TmpSumSF3->SF3TFAC == nBase)
			lRet := {}
		   	aAdd ( lRet, { .T.,  (nBaseItem + (SF3TFAC - nBase)) } )
		EndIf
		dbCloseArea()
	EndIf   
Return lRet


Static Function M100VPER(cTipo,cAlias,cProv, cCalculo)
Local nx       := 1
Local nPos     := 0
Local lVeriPrv := .F.
Local aAreaAtu := {}
Local cTipCalc := "0"
Local nImpPer  := 0
Local nSumPer  := 0
Local nSumBas  := 0
Local lCalPer  := .T.
Local cClieFor := Iif(cAlias == "SF1", M->F1_FORNECE, M->F2_CLIENTE)
Local cLoja    := Iif(cAlias == "SF1", M->F1_LOJA, M->F2_LOJA)
Local nPosCols := 0
Local nPosNumD := aScan(aHeader,{|x| AllTrim(x[2]) == Iif(cAlias == "SF1", "D1_NFORI", "D2_NFORI")} )	//Numero de Documento Original
Local nPosS    := aScan(aHeader,{|x| AllTrim(x[2]) == Iif(cAlias == "SF1", "D1_SERIORI", "D2_SERIORI")} )	//Serie de Documento Original
Local nPosTES  := aScan(aHeader,{|x| AllTrim(x[2]) == Iif(cAlias == "SF1", "D1_TES", "D2_TES")} ) 	//TES
Local nPosDel  := Len(aCols[n])											//Item Eliminado?

If AliasInDic("CCO")
	aAreaAtu:=GetArea()
	CCO->(DbSetOrder(1)) //CCO_FILIAL+CCO_CODPRO
    If CCO->(MsSeek(xFilial("CCO") + cProv) )  .And. (CCO->CCO_CPERNC $ " 6")
		lVeriPrv:=.T.
		cTipCalc := CCO->CCO_CPERNC
		nImpPer := CCO->CCO_IMPPER
	EndIf   
	RestArea(aAreaAtu)
EndIf

If lVeriPrv
	nx := n
	If !(aCols[nx][Len(aCols[nx])]) .And. Len(AllTrim(aCols[nx,nPosNumD])) > 0
   		nPos:=aScan(aDocOrig,{|x|x[1]==MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI")} )
   		nPosCols:=aScan(aCols,{|x|x[nPosNumD] == MaFisRet(nx,"IT_NFORI") .And. x[nPosS]==MaFisRet(nx,"IT_SERORI") .And. x[nPosDel]== .F. .And. x[nPosTES] == Iif(READVAR() == "M->D1_TES", M->D1_TES, aCols[nx,nPosTES])} )
   		If nPos == 0 .Or. (nPos > 0 .And. nPosCols == 0)
   			If nPos == 0  
	   			Aadd(aDocOrig,{MaFisRet(nX,"IT_NFORI") + MaFisRet(nX,"IT_SERORI"), 0, 0, .T.})
	   		EndIf
	    		 
			dbSelectArea("SF3")
			SF3->(dbSetOrder(4))//F3_FILIAL+F3_CLIEFOR+F3_LOJA+F3_NFISCAL+F3_SERIE
			If SF3->(MsSeek(xFilial("SF3") + cClieFor + cLoja + MaFisRet(nx,"IT_NFORI") + MaFisRet(nx,"IT_SERORI")))
				While SF3->(!Eof()) .And. SF3->F3_FILIAL + SF3->F3_CLIEFOR + SF3->F3_LOJA + SF3->F3_NFISCAL + SF3->F3_SERIE == xFilial("SF3") + cClieFor + cLoja + MaFisRet(nx,"IT_NFORI") + MaFisRet(nX,"IT_SERORI")
					nSumPer += &("SF3->F3_VALIMP" + aInfo[2])
					nSumBas += &("SF3->F3_BASIMP" + aInfo[2])
					If nPos > 0
						aDocOrig[nPos, 2] := nSumBas
						aDocOrig[nPos, 3] := nSumPer
					Else 
						aDocOrig[Len(aDocOrig), 2] := nSumBas
						aDocOrig[Len(aDocOrig), 3] := nSumPer
					EndIf
					SF3->(dbSkip())
				EndDo
			EndIf
		EndIf 
	EndIf
	If (nImpPer < nSumPer .And. nPos == 0) .Or. (nImpPer < nSumPer .And. nPos > 0 .And. nPosCols == 0) .And. cCalculo == "B"
		If !(MsgYesNo(OemToAnsi("¿Desea revertir la percepción?")))
			lCalPer := .F.
			If nPos > 0
				aDocOrig[nPos, 4] := lCalPer
			Else
				aDocOrig[Len(aDocOrig), 4] := lCalPer
			EndIf
		Else
			lCalPer := .T.
			If nPos > 0
				aDocOrig[nPos, 4] := lCalPer
			Else
				aDocOrig[Len(aDocOrig), 4] := lCalPer
			EndIf
		EndIf
	ElseIf nPos > 0
		If nImpPer < aDocOrig[nPos, 2]
			lCalPer := aDocOrig[nPos, 4]
		EndIf	
	EndIf  
EndIf		    
Return(lCalPer)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ Obtbase     º Autor ºEmanuel Villicaña º Data º  06/02/15  º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÊÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Retorna la base de un determinado impuesto dependiendo del º±±
±±º          ³ ITEM.                                                      º±±
±±ºÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ M100XIBP                                                   º±±
±±ºÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Obtbase(nI,cImpuesto)
Local aArea		:= GetArea()
Local aAreaSFC	:= SFC->(Getarea())
Local nBasx		:= 0
Local cDescSai	:= SuperGetMV("MV_DESCSAI" , .T., "1" )

SFC->(DbSetOrder(2))//FC_FILIAL+FC_TES+FC_IMPOSTO
If MaFisFound("IT", nI) .and. !MaFisRet(nI,"IT_DELETED")
	If (SFC->(MsSeek(xFilial("SFC") + MaFisRet(nI,"IT_TES") + cImpuesto)))
		nBasx := MaFisRet(nI,"IT_VALMERC")+MaFisRet(nI,"IT_FRETE")+MaFisRet(nI,"IT_DESPESA")+MaFisRet(nI,"IT_SEGURO")
		If cDescSai == '1' 
			nBasx	+= MaFisRet(nI,"IT_DESCONTO")
		Endif

		If SFC->FC_LIQUIDO=="S"
			nBasx -= MaFisRet(nI,"IT_DESCONTO")
		Endif
	Endif
Endif 

SFC->(RestArea(aAreaSFC))
RestArea( aArea )
Return nBasx	

/*
Funcion: ObtbaseT
Descripción: Función para regresar la base total de un impuesto sin incluir el item de calculo actual
Parametros:
	cImpuesto: Impuesto de calculo
	nAliq: Alicouta de calculo actual
	nNumImp: Campo libro del impuesto
	nItemAt: Item actual
Retorno:
	nBasx: Suma de las bases de los otros items que calculan el impuesto.
*/
Static Function ObtbaseT(cImpuesto, nAliq, cNumImp, nItemAt, _nIvaTU)
Local aArea		:= GetArea()
Local aAreaSFC	:= SFC->(Getarea())
Local nBasx		:= 0
Local cDescSai	:= SuperGetMV("MV_DESCSAI" , .T., "1" )
Local nI		:= 0

Default _nIvaTU := 0

	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	For nI := 1 To Len(aCols)
		If MaFisFound("IT", nI) .and. !MaFisRet(nI,"IT_DELETED") .and. nI <> nItemAt
			If (SFC->(MsSeek(xFilial("SFC") + MaFisRet(nI,"IT_TES") + cImpuesto)))
				If MaFisRet(nI,'IT_ALIQIV'+cNumImp) == nAliq
					If _nIvaTU != 0
						nBasx += (MaFisRet(nI,"IT_VALMERC")+MaFisRet(nI,"IT_FRETE")+MaFisRet(nI,"IT_DESPESA")+MaFisRet(nI,"IT_SEGURO")) * ( 1 + _nIvaTU)
					Else
						nBasx += MaFisRet(nI,"IT_VALMERC")+MaFisRet(nI,"IT_FRETE")+MaFisRet(nI,"IT_DESPESA")+MaFisRet(nI,"IT_SEGURO")
					Endif
					If cDescSai == '1' 
						nBasx	+= MaFisRet(nI,"IT_DESCONTO")
					Endif
			
					If SFC->FC_LIQUIDO=="S"
						nBasx -= MaFisRet(nI,"IT_DESCONTO")
					Endif
				EndIf
			Endif
		Endif 
	Next nI

SFC->(RestArea(aAreaSFC))
RestArea( aArea )
Return nBasx

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcion   ³CCOMin    ³ Autor ³ Emanuel Villicaña     ³ Data ³ 14/12/15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Validacion de Minimos de Retencion de IIBB para Argentina   ³±±
±±³          ³CCO                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³M460xIbp, M100xIbp                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function CCOMin(nValmin,lMinIB,nBase,nRetorno,cZonFis,nPos,lImpCCO,nMoedaMin,nTaxMin,lXfis)
Local lValida 	:=  .F. 
Local aArea		:= GetArea()
Local aAreaCCO	:= CCO->(GetArea())

Default cZonFis := ""
Default nPos 		:= 0
Default lImpCCO	:= .F.
Default nMoedaMin	:= 1
Default nTaxMin	:= 1
Default lXfis		:= .T.

nMoedaMin 	:= Iif (lXfis, MaFisRet(,"NF_MOEDA"),nMoedaMin)
nMoedaMin 	:= Iif(!lXfis .and. (Type("nTipoGer") <> "U" .and. nTipoGer == 2), nMoedSel, nMoedaMin) 
nTaxMin	:= Iif (lXfis, MaFisRet(,"NF_TXMOEDA"),nTaxMin)

If nPos == 0
	CCO->(DbSetOrder(1))//CCO_FILIAL+CCO_CODPRO

	If CCO->(MsSeek( xFilial("CCO") + cZonFis ))
		lValida :=  (!Empty(CCO->CCO_TPMINP) .or. CCO->CCO_TPMINP $ "1|2")
	Endif 
	If lImpCCO
		AADD(aImpCCO,{CCO->CCO_FILIAL,CCO->CCO_CODPRO,CCO->CCO_CPERNC,CCO->CCO_CRFPER,CCO->CCO_IMPPER,CCO->CCO_IMMINP,CCO->CCO_TPMINP,CCO->CCO_AGPER,CCO->CCO_TPPERC,CCO->CCO_TPPENI})
	EndIf
Else
	lValida :=  (!Empty(aImpCCO[nPos][_CCOTPMINP]) .or. aImpCCO[nPos][_CCOTPMINP] $ "1|2")
EndIf
lValida :=  Iif(lValida .and. nValmin = 0,.T.,.F.)

If lValida
	If nPos == 0
		If CCO->CCO_TPMINP == "1" // Base imponible
			If nBase <= xMoeda(CCO->CCO_IMMINP,1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif 
		ElseIf CCO->CCO_TPMINP == "2" // Percepcion minima
			If nRetorno <= xMoeda(CCO->CCO_IMMINP,1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif 
		Endif 
	Else
		If aImpCCO[nPos][_CCOTPMINP] == "1" // Base imponible
			If nBase <= xMoeda(aImpCCO[nPos][_CCOIMMINP],1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif
		ElseIf aImpCCO[nPos][_CCOTPMINP] == "2" // Percepcion minima
			If nRetorno <= xMoeda(aImpCCO[nPos][_CCOIMMINP],1,nMoedaMin,,,,nTaxMin)
				nRetorno := 0
			Endif
		Endif
	EndIF
Endif 

RestArea(aAreaCCO)
RestArea(aArea)

Return nRetorno

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcion   ³ObtIva    ³ Autor ³Raul Ortiz             ³ Data ³ 19/04/16 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Validacion de Minimos de Retencion de IIBB para Argentina   ³±±
±±³          ³CCO                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³M460xIbp, M100xIbp                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function ObtIva(nI,lOpcAuto,cTesAuto)
Local aArea		:= GetArea()
Local aAreaSFC	:= SFC->(Getarea())
Local nAliq		:= 0
Local cImpIva := ""
Local cImpost	:= "IV"
Local cTesItem	:= ""
Local lContinua	:= .F.
Default lOpcAuto := .F.
Default cTesAuto := ""

	DbSelectArea("SFC")
	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	lContinua := Iif (lOpcAuto,.T., MaFisFound("IT", nI) .and. !MaFisRet(nI,"IT_DELETED"))
	If lContinua 
		cTesItem := Iif(lOpcAuto,cTesAuto,MaFisRet(nI,"IT_TES"))
		If (SFC->(MsSeek(xFilial("SFC") + cTesItem)))
			While !EOF() .and. cTesItem == SFC->FC_TES
				If cImpost $ SFC->FC_IMPOSTO 
					if lOpcAuto
						cImpIva := SFC->FC_IMPOSTO 
					else
						nAliq := POSICIONE("SFB",1,xFilial("SFB")+SFC->FC_IMPOSTO,"FB_ALIQ")
					endif
					Exit
				EndIf
				SFC->(dbSkip())
			Enddo
		Endif
	EndIf


SFC->(RestArea(aAreaSFC))
RestArea( aArea )
Return iif(lOpcAuto,cImpIva,nAliq)



Static Function GetValorCl(cCampo,nX)
Default nX := 1

If type ("oGetDados:oBrowse:nAt") <> "U"
	nX := oGetDados:oBrowse:nAt
EndIf

Return aCols[nX,GdFieldPos(cCampo, aHeader)]


/*
Funcion: GetBaseFis
Descripción: Función para regresar la base total de un impuesto sin incluir el item de calculo actual
Parametros:
	nItem: Item actual
	cCpoLiv: Campo libro del impuesto
Retorno:
	nBaseImp: Base del impuesto guardada en el arreglo aNfItem 
*/
Static Function GetBaseFis(nItem, cCpoLiv)
Local nBaseImp	:= 0
Local aBaseImp	:= {}

	cCpoLiv := NumCpoImpVar(cCpoLiv)

	aBaseImp := MaFisRet(nItem,"IT_BASEIMP")
	If Len(aBaseImp) > 0
		nBaseImp := aBaseImp[cCpoLiv]
	EndIf

Return nBaseImp

/*
Funcion: ObtbasIBK
Descripción: Función para regresar la base total de un impuesto sin incluir el item de calculo actual
Parametros:
	cImpuesto: Impuesto de calculo
	nAliq: Alicouta de calculo actual
	nNumImp: Campo libro del impuesto

Retorno:
	nBask: Suma de las bases de los otros items que calculen IBK.
*/
Function ObtbasIBK(cImpuesto, cNumImp, nItemAt)
Local aArea		:= GetArea()
Local aAreaSFC	:= SFC->(Getarea())
Local nBask		:= 0
Local nI		:= 0

Default cImpuesto := ""
Default cNumImp   := ""
Default nItemAt   := 0


	SFC->(DbSetOrder(2)) //FC_FILIAL+FC_TES+FC_IMPOSTO
	For nI := 1 To Len(aCols)
		If MaFisFound("IT", nI) .and. !MaFisRet(nI,"IT_DELETED") //.and. nI <> nItemAt
			If (SFC->(MsSeek(xFilial("SFC") + MaFisRet(nI,"IT_TES") + cImpuesto)))
				nBask +=MaFisRet(nI,"IT_BASEIV"+cNumImp)
			EndIf
		Endif 
	Next nI

SFC->(RestArea(aAreaSFC))
RestArea( aArea )
Return nBask
