#include "SIGAWIN.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#include "protheus.CH"        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
#DEFINE _NOMIMPOST 01
#DEFINE _ALIQUOTA  02
#DEFINE _BASECALC  03
#DEFINE _IMPUESTO  04
#DEFINE _IMPINCID  10
#DEFINE _RATEOFRET 11
#DEFINE _IMPFLETE  12
#DEFINE _RATEODESP 13
#DEFINE _IMPGASTOS 14
#DEFINE _VLRTOTAL  3
#DEFINE _FLETE     4
#DEFINE _GASTOS    5
#DEFINE _ALIQDESG  19
//Static aFiscal
Function M100xivp(cCalculo,nItem,aInfo,cXFisRap)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis utilizadas no programa atraves da funcao    ³
//³ SetPrvt, que criara somente as variaveis definidas pelo usuario,    ³
//³ identificando as variaveis publicas do sistema utilizadas no codigo ³
//³ Incluido pelo assistente de conversao do AP5 IDE                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local lXFis,xRet,nOrdSFC,nRegSFC,nBase
Local cImpIncid	:=	''
Local aImpRef 	:= {}
Local aImpVal 	:= {}
Local nI		:= 0
Local lMAgente	:=	ExistBlock("MAGENTE")
Local _lRetorn  := .F.
Local _nMoeda	:= 1
Local nDocOri := 0
Local nPosSFC	:= 0
Local cIncidImp := ""
Local cTipoCli  := ""
Local cTipoMov  := "" 
Local cCfo		  := ""
Local cTipoSFF  := ""
Local lCliente  := .T.
Local aAreaSFF  := {}
Local aAreaSFH	:={}
Local lExSFH    := .F.
Local cTES		:=""
Local cIvaPos	:= FunName()=="FINA935" 
Local cCod		:= "" 
Local cLoja		:= ""
Local cTipoInsc := ""
Local _nSFF  	:= 0
Local cAlias   := IIf(Type("M->F1_FORNECE")=="C" ,"SF1",Iif (Type("M->F2_CLIENTE")=="C","SF2",""))



SetPrvt("CALIASROT,CORDEMROT,AITEMINFO,AIMPOSTO,_CPROCNAME,_CZONCLSIGA")
SetPrvt("_LAGENTE,_LCALCULAR,_LESLEGAL,_NALICUOTA,_NVALORMIN,_NALICDESG")
SetPrvt("_NREDUCIR,_NIMPUESTO,aFiscal")

Default cXFisRap := ""

/*/
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
°°+-----------------------------------------------------------------------+°°
°°|Funcion   |M100xIVA  | Autor | Jose Luis Otermin      |Fecha | 21.07.99|°°
°°+----------+------------------------------------------------------------|°°
°°|Descrip.  | Programa que Calcula Percepcion de IVA s/RG 3337           |°°
°°+----------+------------------------------------------------------------|°°
°°|Uso       | MATA100, llamado por un punto de entrada                   |°°
°°+-----------------------------------------------------------------------|°°
°°|         ACTUALIZACIONES EFECTUADAS DESDE LA CODIFICACION INICIAL      |°°
°°+-----------------------------------------------------------------------|°°
°°|Programador | Fecha  | BOPS      |  Motivo de la Alteracion            |°°
°°+------------+--------+-----------+-------------------------------------|°°
°°|Diego Rivera|08/12/17|DMICNS-981 |Se quita validacion                  |°°
°°|            |        |           | ( Type("lLocxAuto") == "U"          |°°
°°|            |        |           | .Or. !lLocxAuto ) ya que no está    |°°
°°|            |        |           | cálculando impuestos. - Argentina   |°°
°°+-----------------------------------------------------------------------+°°
°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
//-----------------------------------------------------
// Nota:
// Debe registrarse al Cliente en la Tabla SFH en caso
// que sea Agente de Percepcion o este Exento en una ZF.
// Se utiliza el parametro MV_AGENTE
// Significado de las posiciones de MV_AGENTE
// SUBSTR(MV_AGENTE,1,1) = Agente Retencion Ganancias? (S/N)
// SUBSTR(MV_AGENTE,2,1) = Agente Retencion IVA?       (S/N)
// SUBSTR(MV_AGENTE,3,1) = Agente Retencion IB?        (S/N)
// SUBSTR(MV_AGENTE,4,1) = Agente Percepcion IVA?      (S/N)
// SUBSTR(MV_AGENTE,5,1) = Agente Percepcion IB?       (S/N)
//-----------------------------------------------------
// Nota:
// Debe utilizarse el parametro MV_EXENTO
// Significado de las posiciones de MV_EXENTO
// SUBSTR(MV_EXENTO,1,1) = Exento Retencion Ganancias? (S/N)
// SUBSTR(MV_EXENTO,2,1) = Exento Retencion IVA?       (S/N)
// SUBSTR(MV_EXENTO,3,1) = Exento Retencion IB?        (S/N)
// SUBSTR(MV_EXENTO,4,1) = Exento Percepcion IVA?      (S/N)
// SUBSTR(MV_EXENTO,5,1) = Exento Percepcion IB?       (S/N)
//-----------------------------------------------------
/*/

lXfis:=(MaFisFound()  .And. ProcName(1)<>"EXECBLOCK")
If lXfis
 lCliente := (MaFisRet(,"NF_CLIFOR" ) == "C")
Endif

cAliasRot  := Alias()
cOrdemRot  := IndexOrd()

If !lXFis
	aItemINFO  := ParamIxb[1]
	aImposto   := ParamIxb[2]
	xRet:=aImposto
Else
	xRet:=0
Endif

_cProcName := "M100IVP"

_cZonClSIGA:= SM0->M0_ESTCOB // Zona Fiscal del Cliente SIGA
_lAgente   := (SUBSTR(GETMV("MV_AGENTE"),4,1)=="S") //  Agente Percepcion IVA?

cEspecie:=IIF(Type("cEspecie")=="C",cEspecie,"NF")

If lMAgente
	_lRetorn   := Execblock("MAGENTE",.F.,.F.,{SUBSTR(GETMV("MV_AGENTE"),4,1)})
	If	ValType(_lRetorn)=='L'
		_lAgente := _lRetorn
	EndIf	
Endif

	aFiscal    := ExecBlock("IMPGENER",.F.,.F.,{If(lXFis,{cCalculo,nItem,aInfo},ParamIxb), _cProcName, _lAgente,_cZonClSIGA,lXFis},.T.)

_lCalcular :=  aFiscal[1]
_lEsLegal  :=  aFiscal[2]
_nAlicuota :=  aFiscal[3]
_nValorMin :=  aFiscal[4]
_nReducir  :=  aFiscal[5]
_nMoeda    :=  aFiscal[7]
_nAlicDesg :=  aFiscal[11]
cIncidImp  :=  aFiscal[6]
cZonaFis   :=  aFiscal[14]
cCfo       :=  aFiscal[13]

If SF3->(ColumnPos("F3_RG1316")) > 0
	cTES   := aFiscal[18]
else
	cTES   := aFiscal[15]
EndIF

If FunName()=="FINA847"
	lCliente := .F.
Endif

_nSFH := IIF(lCliente ,3,1)

If  cPaisLoc == "ARG"
	If  !( lCliente .And. (SUBSTR(GETMV("MV_AGENTE"),4,1)=="N") ) .OR. (FunName()=="FINA847")//Ventas: MV_AGENTE igual a N -> No calcula
		
		If lCliente 
			cCod:=	M->A1_COD
			cLoja:=	M->A1_LOJA
		Else
			cCod:=	M->A2_COD
			cLoja:=	M->A2_LOJA
		EndIF
		IF Alltrim(cCod)== "" .OR. Alltrim(cLoja)==""  
			cCod:=	MaFisRet(,"NF_CODCLIFOR")
			cLoja:=	MaFisRet(,"NF_LOJA")
		EndIF

		If Funname() == "FINA100"
   			If cAlias== "SF2
				cCod:=	M->F2_CLIENTE
				cLoja:=	M->F2_LOJA
			ElseIf cAlias== "SF1
				cCod:=	M->F1_FORNECE
				cLoja:=	M->F1_LOJA
			Endif
		EndIf

		IF cPaisLoc == "ARG" .and. FunName()=="FINA847"
			cCod  := OFORNECE:BUFFER //Debido la misma nomenclatura de la variable private de la pantalla del PA
			cLoja := OLOJA:BUFFER //Fue hecha la validacion solamente para FINA847
		EndIF

		_nSFF  := IIF(VAL(LEFT(cTES,1))<5 ,19,4)
		cTipoInsc := IIF (lCliente,SA1->A1_TIPO,SA2->A2_TIPO) 
	
		aAreaSFH := SFH->(GetArea())
		dbSelectArea(aAreaSFH[1] )
		dbSetOrder(_nSFH) //FH_FILIAL + FH_FORNECE / FH_CLIENTE + FH_LOJA + FH_IMPOSTO + FH_ZONFIS
		If (SFH->(MsSeek(xFilial("SFH") + cCod  + cLoja + "IVP" )))
			If  A085aVigSFH() 
				IF cTipoInsc == "S" 
					aAreaSFF := SFF->(GetArea())
					dbSelectArea("SFF") 
					dbSetOrder(_nSFF)
					If SFF->(MsSeek(xFilial("SFF") + "IVP"  + cTipoInsc + cCfo))
						IF SFH->FH_ALIQ > 0
							_nAlicuota := SFH->FH_ALIQ
							_lCalcular := .T.
							lExSFH := .T. 
						Else
							cTipoSFF := SFF->FF_TIPO 
							cIncidImp := ALLTRIM(SFF->FF_INCIMP)
							_nAlicuota := SFF->FF_ALIQ
							_lCalcular := .T.
							lExSFH := .T. 
	
						EndIF						
					EndIf
					SFF->(RestArea(aAreaSFF))
				Else
					IF  lCliente
						IF  (SUBSTR(GETMV("MV_AGENTE"),4,1)=="S") .and. SFH->FH_AGENTE == "N"
							_nAlicuota := IIF(SFH->FH_ALIQ > 0,SFH->FH_ALIQ,_nAlicuota)
							lExSFH := .T.
							_lCalcular := .T.
						EndIF
					Else
						IF  (SUBSTR(GETMV("MV_AGENTE"),4,1)=="N") .and. SFH->FH_AGENTE == "S"
							_nAlicuota := IIF(SFH->FH_ALIQ > 0,SFH->FH_ALIQ,_nAlicuota)
							lExSFH := .T.
							_lCalcular := .T.
						ElseIf (SUBSTR(GETMV("MV_AGENTE"),4,1)=="S") .AND. SFH->FH_SITUACA == "5" .AND. SFH->FH_AGENTE == "S"
							_nAlicuota := IIF(SFH->FH_ALIQ > 0,SFH->FH_ALIQ,_nAlicuota) // RG 2408/08 - Régimen General Percepción del IVA - Percepción entre Agentes
							lExSFH := .T.
							_lCalcular := .T.
						EndIF
					EndIF
				EndIF
			ElseIf  lCliente  //Ventas: Sin registro vigente en la SFH -> Calcula
					_lCalcular := .T.
					lExSFH := .T.
			Endif
		ElseIf  lCliente  //Ventas: Sin registro en SFH -> Calcula
				_lCalcular := .T.
				lExSFH := .T.
		Endif
		SFH->(RestArea(aAreaSFH))
	Endif
Else
	lExSFH := .T.
Endif


cTipoMov  := IIF(VAL(LEFT(cTES,1))<5 ,"E","S")

aAreaSFF := SFF->(GetArea())
dbSelectArea(aAreaSFF[1] )

If cTipoMov != "S" 
	If FunName() $ "MATA465N"
		_lCalcular := .T.
	Endif
EndIf
If cIvaPos .And. Type("lTemFX6") <> "U" .And.  lTemFX6
	If cCalculo == "A"                                                                        
		_nAlicuota:= nNewAlicuo
	ElseIf cCalculo == "V"
		_nAlicuota:= MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])
	EndIf 
EndIf	   		  
 		   
SFF->(RestArea(aAreaSFF))

IF _lCalcular  .AND. _lEsLegal .AND. lExSFH 
	
	If !lXFis
		
		aImposto[_ALIQUOTA]  := _nAlicuota // Alicuota de Zona Fiscal del Proveedor
		aImposto[_BASECALC]  := aItemINFO[_VLRTOTAL]+aItemINFO[_FLETE]+aItemINFO[_GASTOS] // Base de Cálculo
		aImposto[_ALIQDESG]  := _nAlicDesg
		
		//Tira os descontos se for pelo liquido .Bruno
		If Subs(aImposto[5],4,1) == "S"  .And. Len(aImposto) >= 18 .And. ValType(aImposto[18])=="N"
			aImposto[_BASECALC]	-=	aImposto[18]
		Endif
		
		//+---------------------------------------------------------------+
		//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
		//+---------------------------------------------------------Lucas-+
		If !Empty(aImposto[_IMPINCID])
			aImposto[_BASECALC]	+=	ImpGenInci(aClone(aImposto),aClone(aItemInfo))
		Endif
		//+---------------------------------------------------------------+
		//¦ Efectua el Cálculo del Impuesto                               ¦
		//+---------------------------------------------------------------+
		If _nAlicDesg > 0
			_nImpuesto := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
			_nImpuesto := _nImpuesto - ((_nImpuesto * aImposto[_ALIQDESG]) / 100) 
		Else
			_nImpuesto := Round(aImposto[_BASECALC] * ( aImposto[_ALIQUOTA]/100) * _nReducir ,MsDecimais(_nMoeda))
		EndIf
		
		If _nImpuesto > _nValorMin
			aImposto[_IMPUESTO]  := _nImpuesto
		ELSE
			aImposto[_IMPUESTO]  := 0.00
			aImposto[_IMPFLETE]  := 0.00
			aImposto[_IMPGASTOS] := 0.00
			aImposto[_RATEOFRET] := 0.00
			aImposto[_RATEODESP] := 0.00
		Endif
		
		xRet:=aImposto
	Else
		If Type("aHeader")=="A"
			nDocOri := Ascan(aHeader,{|x| AllTrim(x[2])=="D1_NFORI"})
		EndIf
		If !Empty(cXFisRap)
			xRet := {0,_nAlicuota,0}
			MaFisAlt('NF_MINIV'+aInfo[2],(_nValorMin/(_nAlicuota/100)),nItem)
			nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
			If lCliente
				cTipoCli := ALLTRIM(SA1->A1_TIPO) // Tipo de Sujeto Fiscal
			Else
				cTipoCli := ALLTRIM(SA2->A2_TIPO) // Tipo de Sujeto Fiscal
			Endif
			//Tira os descontos se for pelo liquido
			nOrdSFC:=(SFC->(IndexOrd()))
			nRegSFC:=(SFC->(Recno()))
			SFC->(DbSetOrder(2))
			If (SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
				If cPaisLoc == "ARG" .And. cTipoCli == "S" .And. cTipoSFF == "S"
					cImpIncid := cIncidImp
				Else
					cImpIncid := Alltrim(SFC->FC_INCIMP)
				Endif
				If !(nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. cEspecie $ ("NCC"))
					If SFC->FC_LIQUIDO=="S"
						nBase-= MaFisRet(nItem,"IT_DESCONTO")
					Endif
				EndIf
			Endif
			//+---------------------------------------------------------------+
			//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
			//+---------------------------------------------------------------+
			If !Empty(cImpIncid)
				aImpRef:=MaFisRet(nItem,"IT_DESCIV")
				aImpVal:=MaFisRet(nItem,"IT_VALIMP")
				For nI:=1 to Len(aImpRef)
					If !Empty(aImpRef[nI])
						IF Trim(aImpRef[nI][1])$cImpIncid
							nBase+=aImpVal[nI]
						Endif
					Endif
				Next
			Endif
			nBase -= IIF(SuperGetMV("MV_DESCSAI" , .T., "1" ) == "2" .and. cEspecie $ ("NCC") .and. nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="S",SFC->FC_LIQUIDO=="S"),MaFisRet(nItem,"IT_DESCONTO"),0)
			nBase += IIF(SuperGetMV("MV_DESCSAI" , .T., "1" ) == "1" .and. cEspecie $ ("NCC") .and. nDocOri > 0 .and. !Empty(aCols[nItem][nDocOri]) .and. IIF(nPosSFC>0,aImpSFC[nPosSFC][_FCLIQUIDO]=="N",SFC->FC_LIQUIDO=="N"), MaFisRet(nItem,"IT_DESCONTO"), 0)
			xRet[1] := nBase
			If "V" $ cXFisRap
				If SFC->FC_CALCULO=="T"
					If _nAlicDesg > 0
						xRet[3]	:= round((MaRetBasT(aInfo[2],nItem,_nAlicuota) *(_nAlicuota /100) * _nReducir),MsDecimais(_nMoeda))
						xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
					Else
	  		      		xRet[3]	:= round((MaRetBasT(aInfo[2],nItem,_nAlicuota) *(_nAlicuota /100) * _nReducir),MsDecimais(_nMoeda))
	  		      	EndIf	
		  			If  xRet[3] <= _nValorMin
			  			xRet[3] :=0
		  			Endif
				Else
					If _nAlicDesg > 0
						xRet[3] := (nBase * (_nAlicuota /100) * _nReducir)
						xRet[3] := xRet[3] - ((xRet[3] *_nAlicDesg) / 100)
					Else 
						xRet[3] := (nBase * (_nAlicuota /100) * _nReducir)
					Endif
					If xRet[3] <= _nValorMin
						xRet[3] := 0
					Endif
				Endif
			Endif
			SFC->(DbSetOrder(nOrdSFC))
			SFC->(DbGoto(nRegSFC))
		Else
			Do Case
				Case cCalculo=="A"
					xRet:=_nAlicuota
					MaFisAlt('NF_MINIV'+aInfo[2],(_nValorMin/(_nAlicuota/100)),nItem)
				Case cCalculo=="B"
					nBase:=MaFisRet(nItem,"IT_VALMERC")+MaFisRet(nItem,"IT_FRETE")+MaFisRet(nItem,"IT_DESPESA")+MaFisRet(nItem,"IT_SEGURO")
					//Tira os descontos se for pelo liquido
					nOrdSFC:=(SFC->(IndexOrd()))
					nRegSFC:=(SFC->(Recno()))
					SFC->(DbSetOrder(2))
					If (SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
						cImpIncid:=Alltrim(SFC->FC_INCIMP)
						If !(nDocOri>0 .and. !Empty(aCols[nItem][nDocOri]) .and. cEspecie $ ("NCC"))
							If SFC->FC_LIQUIDO=="S"
								nBase-= MaFisRet(nItem,"IT_DESCONTO")
							Endif
						EndIf
					Endif
					//+---------------------------------------------------------------+
					//¦ Soma a Base de Cálculo os Impostos Incidentes                 ¦
					//+---------------------------------------------------------------+
					If !Empty(cImpIncid)
						aImpRef:=MaFisRet(nItem,"IT_DESCIV")
						aImpVal:=MaFisRet(nItem,"IT_VALIMP")
						For nI:=1 to Len(aImpRef)
							If !Empty(aImpRef[nI])
								IF Trim(aImpRef[nI][1])$cImpIncid
									nBase+=aImpVal[nI]
								Endif
							Endif
						Next
					Endif
					SFC->(DbSetOrder(nOrdSFC))
					SFC->(DbGoto(nRegSFC))
					xRet:=nBase
				Case cCalculo=="V"
					If MaFisRet(nItem,"IT_VALMERC") > 0
						nOrdSFC:=(SFC->(IndexOrd()))
						nRegSFC:=(SFC->(Recno()))
						SFC->(DbSetOrder(2))
						If (SFC->(DbSeek(xFilial("SFC")+MaFisRet(nItem,"IT_TES")+aInfo[1])))
							If SFC->FC_CALCULO=="T"
				  		      	xRet	:= round((MaRetBasT(aInfo[2],nItem,MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])) *((MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])	)/100) * _nReducir),MsDecimais(_nMoeda))
					  			If  xRet <= _nValorMin
						  			xRet:=0
					  			Endif
							Else 
								If (MaFisRet(nItem,'IT_BASEIV'+aInfo[2])* ((MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])	)/100) * _nReducir) >  _nValorMin
									xRet	:=	round((MaFisRet(nItem,'IT_BASEIV'+aInfo[2])*((MaFisRet(nItem,'IT_ALIQIV'+aInfo[2])	)/100) * _nReducir),MsDecimais(_nMoeda))
								Endif
							Endif
						Endif
						SFC->(DbSetOrder(nOrdSFC))
						SFC->(DbGoto(nRegSFC))
					EndIf
			Endcase
		Endif
	Endif
ENDIF

dbSelectArea( cAliasRot )
dbSetOrder( cOrdemRot )
// Substituido pelo assistente de conversao do AP5 IDE em 09/09/99 ==> __Return( aImposto )
Return( xRet )        // incluido pelo assistente de conversao do AP5 IDE em 09/09/99
