#Include "Protheus.ch"
#Include "RwMake.ch"
#Include "Mata953.ch"
#Include "PROTHEUS.ch"
#Include "FWCommand.ch"
#Include "FwBrowse.ch"
#Include "FwMvcDef.ch"
#Include "MATA95xDef.ch"

#Define CODAJU_CF	01
#Define DESCRI_CF	02
#Define CODUTI_CF	03
#Define INDICE_CF	04
#Define VALOR_CF	05
#Define DETALHE_CF	06

#Define CODCRE_DT	01
#Define DESCRI_DT	02
#Define CREDAC_DT	03
#Define INDICE_DT	04
#Define VALOR_DT	05

Static lGrCredAcu := .F.
STATIC aApurSX2		:=	LoadX2Apur()
STATIC aApurSX3		:=	LoadX3Apur()
STATIC aExistBloc	:=	LoadPEApur()
STATIC aFindFunc	:=  LoadXFFApur()	
Static nTamTPLANC   :=  Iif(aApurSX3[FP_CDH_TPLANC], TamSx3("CDH_TPLANC")[1] , 0 )
Static cStart       :=  Time()
//STATIC lBdjaSon     :=  Iif( GetRPORelease() >= "12.1.033", .T., .F. )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MATA953   ³ Autor ³Andreia dos Santos     ³ Data ³06/08/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Apuracao do ICMS Operacoes Proprias e Substituicao Tributaria³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MATA953(lAutomato,nOpcApu,cTestCase)

Local cCadastro := STR0001 //"Apuracao de ICMS"
Local aSays		:= {}
Local aButtons	:= {}
LOCAL nOpca 	:= 0
LOCAL aCAP		:= {STR0002,STR0003,STR0004}  //"Confirma"###"Abandona"###"Parƒmetros"
Local cPerg		:=	"MTA951"
LocaL cTitulo	:=	STR0001 //"Apuracao de ICMS"
Local cText1	:=	STR0010 //"Este programa faz a Apura‡„o de ICMS, conforme parƒmetros "
Local cText2	:=	STR0011 //"informados pelo usu rio."
Local cVersao 	:= GetVersao(.F.)
Local oSay      := Nil


Private aDIFALDel := {}

Default lAutomato := .F.
Default nOpcApu  := 2
Default cTestCase	:= "MATA953TestCase"

PRIVATE aRotina := {	{ OemToAnsi(STR0005)		,"AxPesqui"  	,0,1},;	 //"Pesquisar"
						{ OemToAnsi(STR0006)		,"AxAlter"		,0,2},;	 //"Visual"
						{ OemToAnsi(STR0007)		,"AxInclui"		,0,3},;	 //"Incluir"
						{ OemToAnsi(STR0008)		,"AxAlter"		,0,4},;  //"Alterar"
						{ OemToAnsi(STR0009)		,"AxAlter"		,0,5} }  //"Exclusao"

//Carga inicial nos campos CDO_SUBAP e CC6_SUBAP em caso de criação dos campos.
FwMsgRun(,{|oSay|FisFillCod(oSay, lAutomato)},"Processando...","")

lGrCredAcu := .F.

Pergunte(cPerg,.F.)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Janela Principal                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

While .T.
	Aadd(aSays,OemToAnsi( ctext1 ) )
	Aadd(aSays,OemToAnsi( cText2 ) )
	Aadd(aButtons, { 1,.T.,{|o| nOpca:= 1,o:oWnd:End()}} )
	Aadd(aButtons, { 2,.T.,{|o| o:oWnd:End() }} )
	Aadd(aButtons, { 5,.T.,{|| Pergunte(cPerg,.T. ) } } )

	If !lAutomato
		FormBatch( cCadastro, aSays, aButtons )
	Else
		nOpca := 1
	EndIf

	//conout(Alltrim(Str(ThreadID())) + " Inicio do processamento MATA953 Alterado:  " + Time())	
	Do Case
		Case nOpca == 1
			Processa({||a953Processa(lAutomato,nOpcApu,cTestCase)})
		Case nOpca == 3
			Pergunte(cPerg,.t.)
			Loop
	EndCase
	Exit
EndDo
	//conout(Alltrim(Str(ThreadID())) + " Fim do processamento MATA953 Alterado:  " + Time())	
	//conout(Alltrim(Str(ThreadID()))+  " Tempo do Processamento MATA953 Alterado :  " + ElapTime(cStart, Time()))
RETURN
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFuncao    ³A953processaºAutor  ³Andreia dos Santos     º Data ³ 09/08/2001º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³Apuracao do ICMS Operacoes Proprias e Substituicao Tributaria  º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953Processa(lAutomato,nOpcApu,cTestCase)

Local cVersao 	:= GetVersao(.F.)
Local aArea     := GetArea()
Local aPosObj   := {}
Local aObjects  := {}
Local aSize     := MsAdvSize()
Local aTitles   := { STR0012,STR0013,STR0014,STR0015,STR0016,STR0017,STR0018,'DIFAL/FECP'} //"ICMS-Entradas"###"ICMS-Saidas"###"ST-Entradas"###"ST-Saidas"###"Apuracao-ICMS"###"Apuracao-ST"###"Informacoes Complementares"
Local aCFG      := {}
Local aOBS      := {}
Local nGd1      := 0
Local nGd2      := 0
Local nGd3      := 0
Local nGd4      := 0
Local oGetDad1
Local oGetDad2
Local oGetDad3
Local oGetDad4
Local oGetDad5
Local oGetDad6
Local oGetDad7
Local oGetDad8
Local oGetDad9
Local oGetDad10
Local oGetDad11
Local oGetDad12
Local oGetDad13
Local oGetDad14
Local oGetDad15
Local oDlg
Local cImp		:= "IC"
Local cImposto	:= "ICMS"
Local nPosRecPR	:= 0
Local nPosRecST	:= 0
Local nS        := 0
Local nY        := 0
Local nX        := 0
Local cLcPadTit	:=	Substr(SuperGetMv("MV_LPADICM"),1,3)
Local cLcPadExt	:=	Substr(SuperGetMv("MV_LPADICM"),5,3)
Local cProdec	:=  SuperGetMv("MV_PRODEC",.F.,"4")
Local cArqST    := ""
Local cProgram	:= "MATA953"
Local aDadIC    := {}
Local aDadST    := {}
Local nProtege := 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para parametros                             ³
//³ mv_par01  // Mes de Apuracao			   	                	 ³
//³ mv_par02  // Ano da Apuracao                                     ³
//³ mv_par03  // Livro Selecionado                                   ³
//³ mv_par04  // Apuracao(Decendial/Mensal/Quinzenal/Semestral/Anual ³
//³ mv_par05  // Periodo (1o./2o./3o.)                               ³
//³ mv_par06  // Arquivo do Perido Anterior                          ³
//³ mv_par07  // Moeda do Titulo                                     ³
//³ mv_par08  // Gera Titulo ( Sim/Nao )                             ³
//³ mv_par09  // Exibir Lancamento Contabil( Sim/Nao )               ³
//³ mv_par10  // Considera Filiais( Sim/Nao )                        ³
//³ mv_par11  // Da Filial                                           ³
//³ mv_par12  // Ate a Filial                                        ³
//³ mv_par13  // Gera Guia de Rec.( Sim/Nao )                        ³
//³ mv_par14  // Gera Cred. Estimulo ( Sim/Nao )                     ³
//³ mv_par15  // Imprime Cred. ST. ( Sim/Nao )                       ³
//³ mv_par16  // Consolidação na mesma UF ( Sim/Nao )                ³
//³ mv_par17  // Gera Tit. ICMS Compl. ( Sim/Nao )                   ³
//³ mv_par18  // Imprime Mapa Resumo ( Sim/Nao )                     ³
//³ mv_par19  // Seleiona Filiais ( Sim/Nao )                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local nMes		:= mv_par01
Local nAno		:= mv_par02
Local cNrLivro	:= mv_par03
Local nApuracao	:= mv_par04
Local nPeriodo	:= mv_par05
Local nMoedTit	:= If(Trim(Str(mv_par07))$"12345",mv_par07,1)
Local lTitulo	:= (mv_par08==1)
Local lContab	:= (mv_par09==1)
Local nConsFil  := mv_par10
Local cFilDe	:= mv_par11
Local cFilAte	:= mv_par12
Local lGuiaRec  := If(mv_par13==1,.T.,.F.)
Local lCrdEst	:= If(mv_par14==1,.T.,.F.)
Local lImpCrdST	:= If(mv_par15==1,.T.,.F.)
Local aDatas	:= DetDatas(nMes,nAno,nApuracao,nPeriodo)
Local dDtIni	:= aDatas[1]
Local dDtFim	:= aDatas[2]
Local dDtVenc	:= DataValida(aDatas[2]+1,.t.)
Local cArqApur 	:= NmArqApur(cImp,nAno,nMes,nApuracao,nPeriodo,cNrLivro)
Local cOrgArrec := Space(30)
Local cObserv   := ""
Local cNumero   := Space(TamSx3("F6_NUMERO")[1])
Local cNumero2  := Space(TamSx3("F6_NUMERO")[1])
Local nValSt 	:= 0
Local aGnreSt   := {}
Local aIcmPago	:= {}
Local aUfEsp	:= {}
Local nNum 		:= 0
Local dDtVenc2  := ""
Local cClasse   := ""
Local aApuICM   := {}
Local nValGuiaSf6 :=  0
Local aEstimulo	:=	{}
Local aIncent	:=	{{"INC",0,0,0,0}}
Local aTitulo	:= 	{}
Local lInfComp	:= .F.	//Gera uma linha no arquivo texto da apuracao, com os dados das Informacoes Complementares
Local cMVSIGNRE := SuperGetMv("MV_SIGNRE",.F.,"")
Local cGNREDF	:= SuperGetMv("MV_GNREDF",.F.,"1")
lOCAL nVlGnreDif	:= 0
Local lConsUF	:= If(mv_par16==1,.T.,.F.)
Local lIcmCompl := If(mv_par17==1,.T.,.F.)
Local aRet      := {}
Local lApPadrao	:=	.T.
Local aGNRSTAnt	:=	{}
Local aRecTit	:=	{}
Local nRecTit	:=	0
Local lConfTit	:=	.F.
Local cTitulo	:= ""
Local cErro		:= ""
Local cSolucao	:= ""
Local cUfAjSt	:= ""
Local nValAtuF	:= 0
Local lMonta	:= .F.
Local lLancCDA	:= .F.
Local lP9Sped 	:= SuperGetMv("MV_P9SPED",,.F.)
Local aTitCDH	:= {}
Local aColAnt	:= {}
Local aLisFil	:= {}
Local lstUfgnre := .T.
//Local lFiliais  := If(mv_par19==1,.T.,.F.)
Local lICMDes   := SuperGetMv("MV_ICMS271",,.F.) .And. aApurSX2[AI_CDM] // Indica se vai haver o controle do CREDITO.NAO DESTACADO ICMS
Local lOldLan	:= (aApurSX2[AI_CC6] .And. aApurSX3[FP_CC6_TIPOAJ] )
Local lGnrePrtge := IIf(cVersao <> "12", Iif(ValType(MV_PAR25) == "N", Iif(MV_PAR25 == 1, .T., .F.), .F.), Iif(ValType(MV_PAR26) == "N", Iif(MV_PAR26 == 1, .T., .F.), .F.))
Local nVlrFECP	:=	0
Local nVlrFECPST:=	0
Local nVFcRN5410:=	0
Local nVFcRN5415:=	0
Local nVFcRN5420:=	0
Local nVFcMG    :=	0
Local nVFcMGST  :=	0
Local nVFcMT 	:=	0
Local nProtege	:=	0
Local nIx		:=	0
Local nIy		:=	0
Local nXX       := 0
Local nXg       := 0
Local nG		:= 0
Local nVlrDeb	:= 0
Local nVlrDebSt := 0
Local aGNREX    := {}
Local nPosGNREX	:=	0
Local nPsGNR5410:=	0
Local nPsGNR5415:=	0
Local nPsGNR5420:=	0
Local nPsGNRMG  :=	0
Local nPsGNRMGST:=	0
Local nPosFECPMG:=  0
Local nPosFESTMG:=  0
Local nPosFCPMG	:= 0
Local nPsGNRMT  :=	0
Local aRetEsp	:=	{}
Local nLmFumacop:= 0
Local nPosFumac := 0
Local lMvDComPro := SuperGetMv("MV_DCOMPRO",,.F.)
Local lMVTITAPUR := SuperGetMv("MV_TITAPUR",.F.,.F.)
Local cPictVal	:= ""
Local lExclGNR	:= mv_par21==1
Local aApIncent	:=	{}
Local aMVINVEST :=	&(GetNewPar("MV_INVEST","{}") )
Local aMVFISPRDC:=	&(GetNewPar("MV_FISPRDC" , "{}") )
Local nValGNREST:= 0
Local cCDeFecpPe:= "RJ70000005/RJ70000006" //Códigos de Lançamentos de Débito Especial de FECP que poderão ser geradas Guias.
Local nTitDebEsp:= 0
Local nTitCnv139:= 0
Local aVlrDebEsp	:=	{ 0 , 0 } //-> Valores de Debitos Especiais para geracao de GNRE (Posicao 1 - apenas FECP's ; Posicao 2 - Demais linhas)
Local aPzRecSt := {}
Local dDtVencDif := ""
Local nSolicFlg  := ""
Local aDadUsrFlg := {}
Local nDH0		 := 0
lOCAL nVlGnreDif	:= 0
Local aTitDifal	:= {}
Local aDifal	:= {}
Local aCDADifal	:= {}
Local aCDAExtra:= {}
Local aGuias	:= {}
Local nTitDifal	:= 0
Local nTitFom	:= 0
Local nTitAcum	:= 0
Local nTitExtra	:= 0
Local aDifEst	:= {}
Local nPosDifal	:= 0
Local aApurDifal	:= {}
Local aAuto		:= {}
Local nPosPad		:= 0
Local aRetAuto	:= {}
Local nPosAuto	:= 0
Local lFECPsep	:= .F.
Local nFeef		:=	0
Local cMVUFICDED:= GetNewPar("MV_UFICDED","MG|AL|CE|DF|ES|MA|MS|PB|PE|PI|SE|RS|AM|PA")
Local aApurCDV	:=	{}
Local lApGIEFD	:=	SuperGetMv( "MV_GIAEFD"	,,	.F. ) .And. aApurSX2[AI_F3K] .And. aApurSX2[AI_CDV] .And. aApurSX2[AI_CDY]
Local aEstruCDA	:= EstruCLan()
Local lCdoAgrupa := aApurSX3[FP_CDO_AGRUPA]	.And. aApurSX3[FP_CC6_AGRUPA] 
Local lCdoSepar  := aApurSX3[FP_CDO_GNRESE]	.And. aApurSX3[FP_CC6_GNRESE] .And. aApurSX3[FP_CDH_GNREF3]	.And. TamSx3("CDH_GNREF3")[1] >=18
Local lGuiaTit	:= .T.
Local aGnreSepar	:=	{ } //Informações de Guias que deverão ser geradas separadamente
Local aGnreSepST	:=	{ } //Informações de Guias que deverão ser geradas separadamente
Local nGnreSepar	:= 0
//
Local lGdebEsp 		:= aExistBloc[PE_GDEBESP]
Local lPadrao		:= .T.

Local aMVSPDPROD	:= {}
Local cLivGIAF		:= ""

Local aEApCe6Ce5 := {}
Local lProcRefer := .F.
Local nVlrTotAnt := 0

Local nMaxLAcols3:= 99

Local cMV_Estado := SuperGetMv("MV_ESTADO", .T., "")
Local cMVDestent := SuperGetMv("MV_DESTENT",,.F.)
Local cMV_Esticm := SuperGetMv("MV_ESTICM")
Local cMV139GNUF := SuperGetMv("MV_139GNUF",,"")
Local cMV_Apusep := SuperGetMV("MV_APUSEP",,"")
Local lConfApur   := SuperGetMV("MV_CONFAPU",.F.,.F.)

Local lTemF2B   := .F.
Local aDic 		:= GAiMxFis()  // AliasIndic
Local oJCodCDA	:= JsonObject():new()
Local oJCodSE2	:= JsonObject():new()
Local cRegCal   := ""
Local cNTitulo  := ""
Local cChvFk7   := ""
Local nValTot   := 0
Local CCODLAN   := ""
Local cNumGNRE	:= ""
Local cNumTitulo :=""
Local nValor 	:= 0
Local cIdApur   := ""
Local cTributo	:= ""
Local aTituloFin := {}
Local aTitulos  :={}
Local nXI       := 0
Local lprocessa := .F.
Local aCont		:= {}



Default lAutomato := .F.
Default nOpcApu   := 2
Default cTestCase := "MATA953TestCase"

Private lUsaSped  := SuperGetMv("MV_USASPED",,.T.) .And. aApurSX2[AI_CDH] .And. aApurSX2[AI_CDA] .And. aApurSX2[AI_CC6]  .And. aApurSX2[AI_CDO]

PRIVATE aExclApur	:= {}	//Indica os subitem que deverão constar na Apuracao de ICMS (Outros Creditos/Outros Debitos) mais
							//  que nao devam ser considerados na compensacao de credito-debito. Esta implementacao se dah para o
							//  estado de MG, segundo $1 do art. 7. da Parte 1 do Anexo XV do RICMS/MG.
							//Esta alteracao somente deverah mostrar o lancamento em Outros Creditos/Debitos para ICMS/ST sobre
							//  prestacao de servico de transporte, a compensacao feita na Apuracao deverah ser efetuada somente
							//  sobre o ICMS/ST Normal.
							//Para este tratamento ser considerado, a TES deverah estar com o campo F4_CREDST igual a 4 e com o P9
							//  do estado atualizado.
PRIVATE aHEADER1:= {}
PRIVATE aCOLS1	:= {}
PRIVATE aAlter1	:= {}
PRIVATE aHEADER2:= {}
PRIVATE aCOLS2	:= {}
PRIVATE aAlter2	:= {}
PRIVATE aHEADER3:= {}
PRIVATE aCOLS3	:= {}
PRIVATE aAlter3	:= {}
PRIVATE aHEADER4:= {}
PRIVATE aCOLS4	:= {}
PRIVATE aAlter4	:= {}
PRIVATE aHEADER5:= {}
PRIVATE aCOLS5	:= {}
PRIVATE aAlter5	:= {}
PRIVATE aHEADER6:= {}
PRIVATE aCOLS6	:= {}
PRIVATE aAlter6	:= {}
PRIVATE aHEADER7:= {}
PRIVATE aCOLS7	:= {}
PRIVATE aAlter7	:= {}
PRIVATE aHEADER8:= {}
PRIVATE aCOLS8	:= {}
PRIVATE aAlter8	:= {}
PRIVATE aHEADER9:= {}
PRIVATE aCOLS9	:= {}
PRIVATE aAlter9	:= {}
PRIVATE aHEADER10:= {}
PRIVATE aCOLS10	:= {}
PRIVATE aAlter10:= {}
PRIVATE aCOLS11	:= {}
PRIVATE aAlter11:= {}
PRIVATE aHEADER11:= {}
PRIVATE aCOLS12	:= {}
PRIVATE aAlter12:= {}
PRIVATE aHEADER12:= {}
PRIVATE aCOLS13	:= {}
PRIVATE aAlter13:= {}
PRIVATE aHEADER13:= {}

PRIVATE aCOLS142:= {}
PRIVATE aCOLS14	:= {}
PRIVATE aAlter14:= {}
PRIVATE aHEADER14:= {}
PRIVATE aCOLS15	:= {}
PRIVATE aAlter15:= {}
PRIVATE aHEADER15:= {}

PRIVATE oFolder
PRIVATE nVlrTitulo:= 0
PRIVATE nVlrTitST:= 0
PRIVATE cCadastro := STR0001 //"Apuracao de ICMS"
PRIVATE nTotFom		:= 0
PRIVATE nCrdFom		:= 0
PRIVATE lFomentGO	:= (cMv_Estado=="GO".And. SuperGetMv("MV_FOMENGO",,.F.))
PRIVATE lACredAcu	:= (SuperGetMv("MV_CREDACU",,.F.)) .And. aApurSX2[AI_F2P] .And. aApurSX2[AI_F2R]  //#vitor01
PRIVATE lApurBA		:= (cMv_Estado=="BA" .And. SuperGetMv("MV_APURBA",,.F.)) .And. !lACredAcu
PRIVATE lAtuFomGO	:= .T.
PRIVATE lArt488MG   := .F.
PRIVATE nVlrArt488MG:= 0
PRIVATE lCon13906 := Iif(!Empty(SuperGetMv("MV_C13906",.F.,"")),If(mv_par23==1,.T.,.F.),.F.)
PRIVATE lGnreC139 := Iif(!Empty(SuperGetMv("MV_C13906",.F.,"")),If(mv_par24==1,.T.,.F.),.F.)
PRIVATE aFoment		:= {} // Guarda a informacao sobre se vai refazer a apuracao ou nao.
PRIVATE aApurExp	:= {}
PRIVATE aApurOut	:= {}
Private aGnre		:= {}
Private cObsArt488MG:= ""
Private nAuxIncent := {}
PRIVATE	aRecStDif  := {}
Private lFiliais  := If(mv_par19==1,.T.,.F.)
Private lGTitFluig := .F. // Indica que o cliente solicitou iniciar uma solicitacao de aprovacao do titulo no Fluig - FUNCIONALIDADE REMOVIDA.
Private aGnreDifal := {}
Private lGerDifal := .T.
Private lExtApuCon := .T. //Aba de extra apuração consolidade
Private lProcDifal :=  aApurSX2[AI_F0I]	.And. aApurSX2[AI_F0J] .And. aApurSX2[AI_F0K]	
Private aApurExtra:= {}
Private lCmpExtra	:= aApurSX3[FP_CDO_TPMOV] .And. aApurSX3[FP_CC6_TPMOV] .And. aApurSX3[FP_CE5_TPLANC]
Private cCodExtLan	:= ''
Private aNWCredAcu	:=	{}

// #vitor01 - Variaveis utilizadas na aba credito acumulado
Private nSaldCred := 0

Private aConfCred := {}
Private aCoSaidInc := {}
Private aCoCredAcu := {}
Private aP2PCREDAC := {}
Private aCdAjCrdAc := {}

Private oPnSaidInc := Nil
Private	oPnCredAcu := Nil
Private oBrSaidInc := Nil
Private oBrCredAcu := Nil
// #vitor01 - Variaveis utilizadas na aba credito acumulado

Private cProcesso	:=	''
Private cTipoProc	:=	''	//Pertence(" 01239")	/ 0=Sefaz;1=Justiça Federal;2=Justiça Estadual;3=Secex/SRF;9=Outros
Private cAutAcaJd	:=	''	//PERTENCE("12") 		/ 1=Próprio contribuinte;2=Outra entidade ou empresa
Private cItemProc	:=	''
Private lProcRef	:=	.F.

PRIVATE aSTPorUF	:= {}
PRIVATE lApagFecp   := .F.

//Verificação de uso de processo referenciado na apuração
If 	aApurSX3[FP_CDH_PROCES]	.and. 	;
 	aApurSX3[FP_CDH_PROCTP]	.and. 	;
	aApurSX3[FP_CDH_PROIND]	.and. 	;
 	aApurSX3[FP_CDH_ITPROC]	.and. 	;
	aApurSX3[FP_F0K_PROCES]	.and. 	;
	aApurSX3[FP_F0K_PROCTP]	.and. 	;
	aApurSX3[FP_F0K_PROIND]	.and.	;
	aApurSX3[FP_F0K_ITPROC]	.and.	;
	aApurSX3[FP_CCF_IDITEM]	.and.   ;
	lUsaSped

	lProcRef := .T.

EndIf

aMVSPDPROD:= &(SuperGetMV("MV_SPDPROD",,"{}"))
IF ValType(aMVSPDPROD) == "A"
	For nXg := 1 to Len(aMVSPDPROD)
		cLivGIAF += aMVSPDPROD[nXg,1]+"#"
	Next nXg
Endif

// Quando Processar Sub-Apuração para registros de GIAF (1960,1970 ou 1980) não gerar GNRE
If !Empty(cNrLivro) .And. (cNrLivro $ Alltrim(cLivGIAF))
	lGuiaRec := .F.
Endif

lProcRefer := lProcRef

If (GetNewPar("MV_PZRECST","1") <> "1")
	aPzRecSt := &(GetNewPar("MV_PZRECST",{"",""}))
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Apenas ira montar o folder do fomentar se for de Goias e se o cliente utilizar ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nTitDifal	:= Len(aTitles)
Aadd(aTitles,'Créditos Extra Apuração') // "Extra Apuração"

nTitExtra	:= Len(aTitles)
If lFomentGO
	Aadd(aTitles,STR0135) // "Apuração-Fomentar"
	nTitFom	:= Len(aTitles)
Elseif lApurBA
	Aadd(aTitles,STR0233)//"Cred.Acumulado-Exportação"
	Aadd(aTitles,STR0234)//"Cred.Acumulado-Out.hipoteses"
EndIf

If lACredAcu // #vitor01 Adicionar titulos
	Aadd(aTitles,"Crédito Acumulado") // "Cred.Acumulado-Exportação"
	nTitAcum := Len(aTitles)
EndIf

Aadd(aTitles,"Débitos Especiais")
nTitDebEsp:= Len(aTitles)
If lCon13906
	Aadd(aTitles,STR0267) // "Convênio 139/06"
	nTitCnv139:= Len(aTitles)
EndIf


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Somente sera permitido processar filial de/ate se o processamento for consolidado.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If (nConsFil == 1 .And. !(cFilDe <= cFilAnt .Or. cFilAnt >= cFilAte)) .Or.;
   (nConsFil == 1 .And.  (cFilDe == "" .Or. cFilAte == ""))
	cTitulo 	:= STR0106 					//"Processamento Consolidado"
	cErro		:= STR0107 					//"O processamento consolidado (filial de/até) somente poderá ser executado "
	cErro		+= STR0108 					//"se a filial inicial (filial de) for a filial consolidadora, ou seja, ser "
	cErro		+= STR0109 					//"a filial da empresa selecionada no momento do processamento da rotina. No momento, a "
	cErro		+= STR0110 + cFilAnt 		//"filial selecionada é a "
	cErro		+= STR0111 + cFilDe + "." 	//", e a filial inicial informada a ser processada foi a "
	cSolucao	:= STR0112 					//"Efetue o processamento consolidado da apuração do ICMS apenas na empresa "
	cSolucao	+= STR0113 + cFilDe 		//"consolidadora. Exemplo: caso queira efetuar a apuração da filial "
	cSolucao	+= STR0114 + cFilDe 		//"selecione a filial "
	cSolucao	+= STR0115 					//" antes de efetuar o processamento da rotina."
	xMagHelpFis(cTitulo,cErro,cSolucao)
	Return
EndIf
If lFiliais
	nConsFil:= 1
	If MV_PAR22==1
		aLisFil	:=MatFilCalc(lFiliais,,,MV_PAR22==1,,2)
	Else
		aLisFil  :=MatFilCalc(lFiliais)
	EndIf
Else
	aLisFil:={{.T.,cFilAnt}}
	nConsFil := 1
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se ja foi feita apuracao para este periodo             ³
//³MV_USASPED - Indica se usa SPED                                 ³
//³se sim (.T.), deve buscar informacoes de apuracao da tabela CDH ³
//³se nao (.F.), busca dos arquivos de apuracao                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lUsaSped
	lMonta := CkApurCDH(nApuracao,nPeriodo,cNrLivro,@aDadIC,cLcPadExt,dDtIni,cArqApur,@aDadST,cProgram,lTitulo,@aGNREX,dDtFim,@nOpcApu,@aFoment, lGuiaRec, lExclGNR,,@aCDADifal,lAutomato,@aEApCe6Ce5,lProcRefer)
	nOpcApu := Iif( nOpcApu == 2 , 1 , Iif( nOpcApu == 3 , 2 , 1 ) )
Else
	lMonta := CheckApur(cImp,nAno,nMes,nApuracao,nPeriodo,cNrLivro,cImposto,@aDadIC,nMoedTit,cLcPadExt,@cArqApur,@aDadSt,cProgram,,lTitulo,@aFoment,@aApurExp,@aApurOut,@nOpcApu,lAutomato)
	nOpcApu := Iif( nOpcApu == 2 , 1 , Iif( nOpcApu == 3 , 2 , 1 ) )
EndIf

//Caso utilize a integracao com o Fluig devo verificar se o usuario logado
//no sistema possui cadastro no Fluig
If lGTitFluig

	//Busco dados do Usuario no Fluig
	aDadUsrFlg := FWWFGetUser( cUserName )

	//Se o array estiver vazio eh porque ocorreu algum problema
	//na comunicacao Protheus x Fluig
	If !Empty( aDadUsrFlg )

		//Caso a posicao 2 do array seja Nil significa que
		//o usuario nao existe no Fluig
		If Valtype( aDadUsrFlg[1][2] ) == "U"

			Help( "", 1, 'Usuário Inválido',,"O usuário " + cUserName + " não está cadastrado no Fluig, a apuração "+;
			 							        "será gerada normalmente sem considerar a integração. ", 1, 1 )

			//Seto a apuracao para nao considerar a integracao
			lGTitFluig := .F.
		EndIf
	Else
		If FWWFIsError()
			Help( "", 1, 'Erro na Comunicação Fluig',,"Ocorreu o seguinte erro na integração com o Fluig " + FWWFGetError()[2] +;
															", a apuração será gerada normalmente sem considerar a integração", 1, 1 )

			//Seto a apuracao para nao considerar a integracao
			lGTitFluig := .F.
		EndIf
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifico se preciso montar novamente as inf do Fomentar³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
lAtuFomGO := Iif(Len(aFoment) > 0,.F.,.T.)

//Verifico a picture dos campos de valores da apuracao
cPictVal := Iif(lUsaSped,RetPictVal(),"@E 999,999,999.99")

If lMonta

	If lAutomato
		If aFindFunc[FF_GETPARAUTO]
			aRetAuto	:= GetParAuto(cTestCase)
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aCols (5) - Resumo da Apuracao - ICMS     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aCOLS5,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS5,{"   ","          ",STR0019,"","","",.F.}) //"            DEBITO DO IMPOSTO                 "
	Aadd(aCOLS5,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS5,{"001","          ",STR0020,0,"","",.F.}) //"Por Saidas/Prestacoes com debito do Imposto   "
	Aadd(aCOLS5,{"002","002.00    ",STR0021,0,"","",.F.}) //"Outros Debitos                                "
    For nX:=1 to Len(aDadIC)
        If aDadIC[nX][1]=="002"
			If lUsaSped .And. len(aDadIC[nX]) == 8
        		Aadd(aCOLS5,{"002",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS5,{"002",CodSubItem(aDadIC[nX][1], aCont,2),aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],aDadIC[nX][9],aDadIC[nX][10],aDadIC[nX][11],aDadIC[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS5,{"002",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],.F.}) //"Texto do usuario
			EndIf
        EndIf
    Next nX
	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="05"	 .And. aRetAuto[nPosAuto][3]=="002"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS5,{"003","003.00    ",STR0022,0,"","",.F.}) //"Estorno de Creditos                           "
	For nX:=1 to Len(aDadIC)
        If aDadIC[nX][1]=="003"
			If lUsaSped .And. len(aDadIC[nX]) == 8
        		Aadd(aCOLS5,{"003",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS5,{"003",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],aDadIC[nX][9],aDadIC[nX][10],aDadIC[nX][11],aDadIC[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS5,{"003",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],.F.}) //"Texto do usuario
			EndIf
        EndIf
    Next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="05"	 .And. aRetAuto[nPosAuto][3]=="003"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

    If aFindFunc[FF_GETSUMDH0] .And. aApurSX2[AI_DH0]
		nDH0:= GetSumDH0(DTos(dDtIni),DTos(dDtFim),"ICM")
		If nDH0 > 0
			Aadd(aCOLS5,{"003","003.99    ","Estorno de Credito CIAP",nDH0,"","",.F.}) //"Estorno de Creditos                           "
		EndIf
	EndIf

	Aadd(aCOLS5,{"004","          ",STR0023,0,"","",.F.}) //"Sub-Total                                     "
	Aadd(aCOLS5,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS5,{"   ","          ",STR0024,"","","",.F.}) //"            CREDITO DO IMPOSTO                "
	Aadd(aCOLS5,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS5,{"005","          ",STR0025,0,"","",.F.}) //"Por Entradas/Aquisicoes com Credito do Imposto"
	Aadd(aCOLS5,{"006","006.00    ",STR0026,0,"              ","",.F.}) //"Outros Creditos                               "

	For nX:=1 to Len(aDadIC)
        If aDadIC[nX][1]=="006"
			If lUsaSped .And. len(aDadIC[nX]) == 8
        		Aadd(aCOLS5,{"006",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS5,{"006",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],aDadIC[nX][9],aDadIC[nX][10],aDadIC[nX][11],aDadIC[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS5,{"006",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],.F.}) //"Texto do usuario
			EndIf
        EndIf
    next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="05"	 .And. aRetAuto[nPosAuto][3]=="006"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS5,{"007","007.00    ",STR0027,0,"","",.F.}) //"Estorno de Debitos                            "
	For nX:=1 to Len(aDadIC)
        If aDadIC[nX][1]=="007"
			If lUsaSped .And. len(aDadIC[nX]) == 8
        		Aadd(aCOLS5,{"007",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS5,{"007",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],aDadIC[nX][9],aDadIC[nX][10],aDadIC[nX][11],aDadIC[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS5,{"007",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],.F.}) //"Texto do usuario
			EndIf
        EndIf
    Next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="05"	 .And. aRetAuto[nPosAuto][3]=="007"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS5,{"008","          ",STR0023,0,"","",.F.}) //"Sub-Total                                     "
	Aadd(aCOLS5,{"009","          ",STR0028,0,"","",.F.}) //"Saldo Credor do Periodo Anterior              "
	Aadd(aCOLS5,{"010","          ",STR0029,0,"","",.F.}) //"Total                                         "
	Aadd(aCOLS5,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS5,{"   ","          ",STR0030,"","","",.F.}) //"            APURACAO DO SALDO                 "
	Aadd(aCOLS5,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS5,{"011","          ",STR0031,0,"","",.F.}) //"Saldo Devedor( Debito menos Credito)          "
	Aadd(aCOLS5,{"012","012.00    ",STR0032,0,"","",.F.}) //"Deducoes                                      "

	For nX:=1 to Len(aDadIC)
        If aDadIC[nX][1]=="012"
			If lUsaSped .And. len(aDadIC[nX]) == 8
        		Aadd(aCOLS5,{"012",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS5,{"012",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],aDadIC[nX][9],aDadIC[nX][10],aDadIC[nX][11],aDadIC[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS5,{"012",aDadIC[nX][4],aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],.F.}) //"Texto do usuario
			EndIf
        EndIf
    next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="05"	 .And. aRetAuto[nPosAuto][3]=="012"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS5,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCOLS5,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS5,{"013","          ",STR0033,0,"","",.F.}) //"Imposto a Recolher                            "
	Aadd(aCOLS5,{"014","          ",STR0034,0,"","",.F.}) //"Saldo Credor ( Credito menos Debito)          "

	cObserv := ""
	For nX := 1 To Len(aDadIC)
	    If aDadIC[nX][1]=="OBS"
			cObserv += aDadIC[nX][2]+CHR(13)+CHR(10)
		EndIf
	Next nX

	//Adiciona um elemento para gravar o CODLAN
	If lUsaSped
		aColAnt	:= aClone(aCOLS5)
		aCOLS5	:= {}
		If !lProcRef
			For nX := 1 to Len(aColAnt)
				If len(aColAnt[nX]) == 7
					Aadd(aCOLS5,Array(9))
					For nY := 1 to 6
						aCOLS5[nX][nY] := aColAnt[nX][nY]
					Next
					aCOLS5[nX][7] := ""
					aCOLS5[nX][8] := ""
					aCOLS5[nX][9] := .F.
				Else
					Aadd(aCOLS5,aColAnt[nX])
				EndIf
			Next

		Else

			For nX := 1 to Len(aColAnt)
				If len(aColAnt[nX]) == 7
					Aadd(aCOLS5,Array(13))
					For nY := 1 to 6
						aCOLS5[nX][nY] := aColAnt[nX][nY]
					Next
					aCOLS5[nX][7]  := ""
					aCOLS5[nX][8]  := ""
					aCOLS5[nX][9]  := ""
					aCOLS5[nX][10] := ""
					aCOLS5[nX][11] := ""
					aCOLS5[nX][12] := ""
					aCOLS5[nX][13] := .F.
				Else
					Aadd(aCOLS5,aColAnt[nX])
				EndIf
			Next

		EndIf

	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aCols (6) Resumo da Apuracao - ST         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aCOLS6,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS6,{"   ","          ",STR0035,"","","",.F.}) //"         DEBITO DO IMPOSTO( ST )             "
	Aadd(aCOLS6,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS6,{"001","          ",STR0020,0,"","",.F.}) //"Por Saidas/Prestacoes com debito do Imposto   "
	Aadd(aCOLS6,{"002","002.00    ",STR0021,0,"","",.F.}) //"Outros Debitos                                "
	For nX:=1 to Len(aDadST)
        If aDadST[nX][1]=="002" 
        	If lUsaSped .And. len(aDadST[nX]) == 8
	        	Aadd(aCOLS6,{"002",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",aDadST[nX][7],aDadST[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS6,{"002",CodSubItem(aDadST[nX][1], aCont,2),aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],aDadST[nX][6],aDadST[nX][7],aDadST[nX][8],aDadST[nX][9],aDadST[nX][10],aDadST[nX][11],aDadST[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS6,{"002",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",.F.}) //"Texto do usuario
	        EndIf
        EndIf
    next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="06"	 .And. aRetAuto[nPosAuto][3]=="002"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS6,{"003","003.00    ",STR0022,0,"","",.F.}) //"Estorno de Creditos                           "
	For nX:=1 to Len(aDadST)
        If aDadST[nX][1]=="003"
			If lUsaSped .And. len(aDadST[nX]) == 8
	        	Aadd(aCOLS6,{"003",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",aDadST[nX][7],aDadST[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS6,{"003",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],aDadST[nX][6],aDadST[nX][7],aDadST[nX][8],aDadST[nX][9],aDadST[nX][10],aDadST[nX][11],aDadST[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS6,{"003",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",.F.}) //"Texto do usuario
	        EndIf
        EndIf
    next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="06"	 .And. aRetAuto[nPosAuto][3]=="003"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS6,{"005","          ",STR0036,0,"","",.F.}) //"SUB-TOTAL ( 001+002+003 )                     "
	Aadd(aCOLS6,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS6,{"   ","          ",STR0037,"","","",.F.}) //"         CREDITO DO IMPOSTO( ST )             "
	Aadd(aCOLS6,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS6,{"006","          ",STR0025,0,"","",.F.}) //"Por Entradas/Aquisicoes com Credito do Imposto"
	Aadd(aCOLS6,{"007","007.00    ",STR0026,0,"              ","",.F.}) //"Outros Creditos                               "
	For nX:=1 to Len(aDadST)
        If aDadST[nX][1]=="007"
        	If lUsaSped .And. len(aDadST[nX]) == 8
	        	Aadd(aCOLS6,{"007",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],aDadST[nX][6],aDadST[nX][7],aDadST[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS6,{"007",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],aDadST[nX][6],aDadST[nX][7],aDadST[nX][8],aDadST[nX][9],aDadST[nX][10],aDadST[nX][11],aDadST[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS6,{"007",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],aDadST[nX][6],.F.}) //"Texto do usuario
	        EndIf
        EndIf
    next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="06"	 .And. aRetAuto[nPosAuto][3]=="007"

				If aRetAuto[nPosAuto][1] == "Man"
	       		nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
	      			If nPosPad == 0
	      				AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
	      				AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf
	Aadd(aCOLS6,{"008","008.00    ",STR0027,0,"","",.F.}) //"Estorno de Debitos                            "
	For nX:=1 to Len(aDadST)
        If aDadST[nX][1]=="008"
           	If lUsaSped .And. len(aDadST[nX]) == 8
	        	Aadd(aCOLS6,{"008",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",aDadST[nX][7],aDadST[nX][8],.F.}) //"Texto do usuario
        	Else
	           Aadd(aCOLS6,{"008",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",.F.}) //"Texto do usuario
	        EndIf
        EndIf
    Next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="06"	 .And. aRetAuto[nPosAuto][3]=="008"

				If aRetAuto[nPosAuto][1] == "Man"
	       		nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
	      			If nPosPad == 0
	      				AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
	      				AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS6,{"010","          ",STR0038,0,"","",.F.}) //"SUB-TOTAL ( 006+007+008 )                     "
	Aadd(aCOLS6,{"011","          ",STR0028,0,"","",.F.}) //"Saldo Credor do Periodo Anterior              "
	Aadd(aCOLS6,{"012","          ",STR0039,0,"","",.F.}) //"TOTAL ( 010+011 )                             "
	Aadd(aCOLS6,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS6,{"   ","          ",STR0040,"","","",.F.}) //"         APURACAO DO SALDO( ST )              "
	Aadd(aCOLS6,{"   ","          ","                                              ","","","",.F.})
	Aadd(aCOLS6,{"013","          ",STR0041,0,"","",.F.}) //"Saldo Devedor( 005-012 )                      "
	Aadd(aCOLS6,{"014","014.00    ",STR0032,0,"","",.F.}) //"Deducoes                                      "
	For nX:=1 to Len(aDadST)
		If aDadST[nX][1]=="014"
			If lUsaSped .And. len(aDadST[nX]) == 8
	        	Aadd(aCOLS6,{"014",AllTrim(aDadST[nX][4]),aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",aDadST[nX][7],aDadST[nX][8],.F.}) //"Texto do usuario
			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS6,{"014",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],aDadST[nX][6],aDadST[nX][7],aDadST[nX][8],aDadST[nX][9],aDadST[nX][10],aDadST[nX][11],aDadST[nX][12],.F.}) //"Texto do usuario
        	Else
	           Aadd(aCOLS6,{"014",aDadST[nX][4],aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",.F.}) //"Texto do usuario
	        EndIf
        EndIf
    Next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="06"	 .And. aRetAuto[nPosAuto][3]=="014"

				If aRetAuto[nPosAuto][1] == "Man"
	       		nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
	      			If nPosPad == 0
	      				AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS6,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
	      				AtuAcols(aCOLS6,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	Aadd(aCOLS6,{"015","          ",STR0042,0,"","",.F.}) //"Imposto a Recolher( 013-014 )                 "
	Aadd(aCOLS6,{"016","          ",STR0043,0,"","",.F.}) //"Saldo Credor ( 012-005 )                      "

	//Adiciona um elemento para gravar o CODLAN
	If lUsaSped
		aColAnt	:= aClone(aCOLS6)
		aCOLS6	:= {}
		If !lProcRef

			For nX := 1 to Len(aColAnt)
				If len(aColAnt[nX]) == 7
					Aadd(aCOLS6,Array(9))
					For nY := 1 to 6
						aCOLS6[nX][nY] := aColAnt[nX][nY]
					Next
					aCOLS6[nX][7] := ""
					aCOLS6[nX][8] := ""
					aCOLS6[nX][9] := .F.
				Else
					Aadd(aCOLS6,aColAnt[nX])
				EndIf
			Next

		Else

			For nX := 1 to Len(aColAnt)
				If len(aColAnt[nX]) == 7
					Aadd(aCOLS6,Array(13))
					For nY := 1 to 6
						aCOLS6[nX][nY] := aColAnt[nX][nY]
					Next
					aCOLS6[nX][7]  := ""
					aCOLS6[nX][8]  := ""
					aCOLS6[nX][9]  := ""
					aCOLS6[nX][10] := ""
					aCOLS6[nX][11] := ""
					aCOLS6[nX][12] := ""
					aCOLS6[nX][13] := .F.
				Else
					Aadd(aCOLS6,aColAnt[nX])
				EndIf
			Next
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aCOLS(7) Informacoes Complementares -Op.Proprias³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aCols7,{"015",STR0044,0,.F.}) //1-"ICMS Retido (Saidas-Devolucoes)"
	Aadd(aCols7,{"016",STR0045,0,.F.}) //2-"ICMS Complementar (Diferencial de Aliquotas)"
	Aadd(aCols7,{"017",STR0046,0,.F.}) //3-"ICMS Retido (Devolucoes de Vendas)"
	Aadd(aCols7,{"018",STR0067,0,.F.}) //4-"ICMS Diferido"
	Aadd(aCols7,{"019",STR0070,0,.F.}) //5-"ICMS Complementar (Ativo Imobilizado)"
	Aadd(aCols7,{"020",STR0071,0,.F.}) //6-"ICMS Complementar (Mat. Uso ou Consumo)"
	Aadd(aCols7,{"021",STR0068,0,.F.}) //7-"Transf. de Credito"
	Aadd(aCols7,{"022",STR0069,0,.F.}) //8-"Transf. de Debito"
	Aadd(aCols7,{"023",STR0073,0,.F.}) //9-"Credito ICMS Solidario"
	Aadd(aCols7,{"024",STR0076,0,.F.}) //10-"Credito Estimulo"
	Aadd(aCols7,{"025",STR0077,0,.F.}) //11-"Credito Presumido"
	Aadd(aCols7,{"026",STR0078,0,.F.}) //12-"Credito Presumido - Prest. Servicos de Transporte"
	Aadd(aCols7,{"027",STR0079,0,.F.}) //13-"Credito Presumido - Zona Franca de Manaus"
	Aadd(aCols7,{"028",STR0080,0,.F.}) //14-"Credito Presumido - Serv.Transp. título ST"
	Aadd(aCols7,{"029",STR0086,0,.F.}) //15-"Cred Pres - Inf./Elet./Tel.-Dec.4.316 (BA)"
	Aadd(aCols7,{"030",STR0116,0,.F.}) //16-"Fundersul - Mato Grosso do Sul"
	Aadd(aCols7,{"031",STR0117,0,.F.}) //17-"Estorno de Credito"
	Aadd(aCols7,{"032",STR0126,0,.F.}) //18-"Estorno de Debito"
	Aadd(aCols7,{"033",STR0128,0,.F.}) //19-"Fust"
	Aadd(aCols7,{"034",STR0129,0,.F.}) //20-"Funttel"
	Aadd(aCols7,{"035",STR0235,0,.F.}) //21-"Credito Acumulado - Exportações"
	Aadd(aCols7,{"036",STR0236,0,.F.}) //22-"Credito Acumulado - Outras hipóteses"
	Aadd(aCols7,{"037",STR0239,0,.F.}) //23
	Aadd(aCols7,{"038",STR0240,0,.F.}) //24
	Aadd(aCols7,{"039",STR0241,0,.F.}) //25
	Aadd(aCols7,{"040",STR0242,0,.F.}) //26
	Aadd(aCols7,{"041",STR0243,0,.F.}) //27-Cred. Presumido-art.631-A do RICMS/2008
	Aadd(aCols7,{"042",STR0244,0,.F.}) //28-FECP COMPLEMENTAR
	Aadd(aCols7,{"043",STR0245,0,.F.}) //29-Senar
	Aadd(aCols7,{"045",STR0252,0,.F.}) //30-Credito Outorgado
	Aadd(aCols7,{"046",STR0256,0,.F.}) //31-"ICMS/ST Recolhido no Momento da Entrada no Estado."
	Aadd(aCols7,{"047",STR0254,0,.F.}) //32-FECOP-Operação Direta
	Aadd(aCols7,{"048",STR0255,0,.F.}) //33-FECOP-Operação Interna ST
	Aadd(aCols7,{"049",STR0257,0,.F.}) //34-FECOP-Operação Interestadual ST
	Aadd(aCols7,{"050",STR0258,0,.F.}) //35-FECP/MG-ICMS próprio
	Aadd(aCols7,{"051",STR0259,0,.F.}) //36-FECP/MG-ICMS ST
	Aadd(aCols7,{"052",STR0260,0,.F.}) //37-FECP/MG-ANTECIPADO
	Aadd(aCols7,{"053",STR0261,0,.F.}) //38-FECP/MT-ICMS próprio
	Aadd(aCols7,{"054",STR0278,0,.F.})  //39-DNVP
	Aadd(aCols7,{"055",STR0279,0,.F.})  //40-CNVP
	Aadd(aCols7,{"063",STR0280,0,.F.}) //41-Fundo de Protecao Social do Estado de GO - PROTEGE
	Aadd(aCols7,{"064",STR0281,0,.F.})  //42-Fundo Estadual de Equilíbrio Fiscal
	Aadd(aCols7,{"065",STR0282,0,.F.}) //43 - Fundo de Protecao Social do Estado de GO - PROTEGE recolhido na emissao.

	If lFomentGO
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem do aCOLS(8) Demonstrativo Apuração Fomentar        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aadd(aCols8,{"   "," ",STR0136,"","","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0137,"","","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"001"," ",STR0139,0,"","",.F.})
		Aadd(aCols8,{"002"," ",STR0140,0,"","",.F.})
		Aadd(aCols8,{"003"," ",STR0141,0,"","",.F.})
		Aadd(aCols8,{"004"," ",STR0142,0,"","",.F.})
		Aadd(aCols8,{"005"," ",STR0143,0,"","",.F.})
		Aadd(aCols8,{"006"," ",STR0144,0,"","",.F.})
		Aadd(aCols8,{"007"," ",STR0145,0,"","",.F.})
		Aadd(aCols8,{"008"," ",STR0146,0,"","",.F.})
		Aadd(aCols8,{"009"," ",STR0147,0,"","",.F.})
		Aadd(aCols8,{"010"," ",STR0148,0,"","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0276,"","","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"101"," ",STR0277,0,"","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0149,"","","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"011"," ",STR0150,0,"","",.F.})
		Aadd(aCols8,{"012"," ",STR0151,0,"","",.F.})
		Aadd(aCols8,{"013"," ",STR0152,0,"","",.F.})
		Aadd(aCols8,{"014"," ",STR0153,0,"","",.F.})
		Aadd(aCols8,{"015"," ",STR0154,0,"","",.F.})
		Aadd(aCols8,{"016"," ",STR0155,0,"","",.F.})
		Aadd(aCols8,{"017"," ",STR0156,0,"","",.F.})
		Aadd(aCols8,{"018"," ",STR0157,0,"","",.F.})
		Aadd(aCols8,{"019"," ",STR0158,0,"","",.F.})
		Aadd(aCols8,{"020"," ",STR0159,0,"","",.F.})
		Aadd(aCols8,{"021"," ",STR0160,0,"","",.F.})
		Aadd(aCols8,{"022"," ",STR0161,0,"","",.F.})
		Aadd(aCols8,{"023"," ",STR0162,0,"","",.F.})
		Aadd(aCols8,{"024"," ",STR0163,0,"","",.F.})
		Aadd(aCols8,{"025"," ",STR0164,0,"","",.F.})
		Aadd(aCols8,{"026"," ",STR0165,0,"","",.F.})
		Aadd(aCols8,{"027"," ",STR0166,0,"","",.F.})
		Aadd(aCols8,{"028"," ",STR0167,0,"","",.F.})
		Aadd(aCols8,{"029"," ",STR0168,0,"","",.F.})
		Aadd(aCols8,{"030"," ",STR0169,0,"","",.F.})
		Aadd(aCols8,{"031"," ",STR0170,0,"","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0171,"","","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"032"," ",STR0172,0,"","",.F.})
		Aadd(aCols8,{"033"," ",STR0173,0,"","",.F.})
		Aadd(aCols8,{"034"," ",STR0174,0,"","",.F.})
		Aadd(aCols8,{"035"," ",STR0175,0,"","",.F.})
		Aadd(aCols8,{"036"," ",STR0176,0,"","",.F.})
		Aadd(aCols8,{"037"," ",STR0177,0,"","",.F.})
		Aadd(aCols8,{"038"," ",STR0178,0,"","",.F.})
		Aadd(aCols8,{"039"," ",STR0179,0,"","",.F.})
		Aadd(aCols8,{"040"," ",STR0180,0,"","",.F.})
		Aadd(aCols8,{"041"," ",STR0181,0,"","",.F.})
		Aadd(aCols8,{"042"," ",STR0182,0,"","",.F.})
		Aadd(aCols8,{"043"," ",STR0183,0,"","",.F.})
		Aadd(aCols8,{"044"," ",STR0184,0,"","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0185,"",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0186,"",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"045"," ",STR0187,0,"","",.F.})
		Aadd(aCols8,{"046"," ",STR0188,0,"","",.F.})
		Aadd(aCols8,{"047"," ",STR0189,0,"","",.F.})
		Aadd(aCols8,{"048"," ",STR0190,0,"","",.F.})
		Aadd(aCols8,{"049"," ",STR0191,0,"","",.F.})
		Aadd(aCols8,{"050"," ",STR0192,0,"","",.F.})
		Aadd(aCols8,{"051"," ",STR0193,0,"","",.F.})
		Aadd(aCols8,{"052"," ",STR0194,0,"","",.F.})
		Aadd(aCols8,{"053"," ",STR0195,0,"","",.F.})
		Aadd(aCols8,{"054"," ",STR0196,0,"","",.F.})
		Aadd(aCols8,{"055"," ",STR0197,0,"","",.F.})
		Aadd(aCols8,{"056"," ",STR0198,0,"","",.F.})
		Aadd(aCols8,{"057"," ",STR0199,0,"","",.F.})
		Aadd(aCols8,{"058"," ",STR0200,0,"","",.F.})
		Aadd(aCols8,{"059"," ",STR0201,0,"","",.F.})
		Aadd(aCols8,{"060"," ",STR0202,0,"","",.F.})
		Aadd(aCols8,{"061"," ",STR0203,0,"","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0204,"","","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"062"," ",STR0205,0,"","",.F.})
		Aadd(aCols8,{"063"," ",STR0206,0,"","",.F.})
		Aadd(aCols8,{"064"," ",STR0207,0,"","",.F.})
		Aadd(aCols8,{"065"," ",STR0208,0,"","",.F.})
		Aadd(aCols8,{"066"," ",STR0209,0,"","",.F.})
		Aadd(aCols8,{"067"," ",STR0210,0,"","",.F.})
		Aadd(aCols8,{"068"," ",STR0211,0,"","",.F.})
		Aadd(aCols8,{"069"," ",STR0212,0,"","",.F.})
		Aadd(aCols8,{"070"," ",STR0213,0,"","",.F.})
		Aadd(aCols8,{"071"," ",STR0214,0,"","",.F.})
		Aadd(aCols8,{"072"," ",STR0215,0,"","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"   "," ",STR0216,"","","",.F.})
		Aadd(aCols8,{"   "," ","                                              ","","","",.F.})
		Aadd(aCols8,{"073"," ",STR0217,0,"","",.F.})
		Aadd(aCols8,{"074"," ",STR0218,0,"","",.F.})
		Aadd(aCols8,{"075"," ",STR0219,0,"","",.F.})
		Aadd(aCols8,{"076"," ",STR0220,0,"","",.F.})
		Aadd(aCols8,{"077"," ",STR0221,0,"","",.F.})
		Aadd(aCols8,{"078"," ",STR0222,0,"","",.F.})
		Aadd(aCols8,{"079"," ",STR0223,0,"","",.F.})
		Aadd(aCols8,{"080"," ",STR0224,0,"","",.F.})
		Aadd(aCols8,{"081"," ",STR0225,0,"","",.F.})
		Aadd(aCols8,{"082"," ",STR0226,0,"","",.F.})
		Aadd(aCols8,{"083"," ",STR0227,0,"","",.F.})
		Aadd(aCols8,{"084"," ",STR0228,0,"","",.F.})

		//Tenho que carregar os valores já definidos na apuracao caso ele esteja refazendo uma apuracao já gravada anteriormente
		For nX:=1 to Len(aFoment)
  			If aFoment[nX][1]=="FOM" .And.;
  			   (Substr(aFoment[nX][2],1,3)$"001#002#003#004#005#006#007#008#009#010#011#012#013#014#015#016#017#018#019#020#021#022#023#024#025#026#027#028#029#030" .Or.;
  				Substr(aFoment[nX][2],1,3)$"031#032#033#034#035#036#037#038#039#040#041#042#043#044#045#046#047#048#049#050#051#052#053#054#055#056#057#058#059#060" .Or.;
  				Substr(aFoment[nX][2],1,3)$"061#062#063#064#065#066#067#068#069#070#071#072#073#074#075#076#077#078#079#080#081#082#083#084#101")

				nY := aScan(aCols8,{|x| x[1] == Substr(aFoment[nX][2],1,3)})
                If nY <> 0
                     nValAtuF 		:= Val(Alltrim(Substr(aFoment[nX][2],79,14)))
                     aCols8[nY][4] 	:= nValAtuF
                EndIf
   	    	EndIf
  		Next nX
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Tratamento para Credito Acumulado de ICMS - Bahia    	  ³
	//³ Artigos 106 a 109 do RICMS/BA  			                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Elseif lApurBA
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem do aCOLS(8) - Credito Acumulado BA - Exportacoes   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aadd(aCols8,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols8,{"   ","          ",STR0019,"","","",.F.}) //"            DEBITO DO IMPOSTO                 "
		Aadd(aCols8,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols8,{"001","          ",STR0020,0,"","",.F.}) //"Por Saidas/Prestacoes com debito do Imposto   "
		Aadd(aCols8,{"002","002.00    ",STR0021,0,"","",.F.}) //"Outros Debitos                                "
	    For nX:=1 to Len(aApurExp)
	        If aApurExp[nX][1]=="002"
				If lUsaSped .And. len(aApurExp[nX]) == 7
	        		Aadd(aCols8,{"002",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],aApurExp[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols8,{"002",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    Next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="08"	 .And. aRetAuto[nPosAuto][3]=="002"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols8,{"003","003.00    ",STR0022,0,"","",.F.}) //"Estorno de Creditos                           "
		For nX:=1 to Len(aApurExp)
	        If aApurExp[nX][1]=="003"
				If lUsaSped .And. len(aApurExp[nX]) == 7
	        		Aadd(aCols8,{"003",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],aApurExp[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols8,{"003",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    Next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="08"	 .And. aRetAuto[nPosAuto][3]=="003"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols8,{"004","          ",STR0023,0,"","",.F.}) //"Sub-Total                                     "
		Aadd(aCols8,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols8,{"   ","          ",STR0024,"","","",.F.}) //"            CREDITO DO IMPOSTO                "
		Aadd(aCols8,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols8,{"005","          ","Entradas/Aquisicoes com Credito do Imposto",0,"","",.F.}) //"Por Entradas/Aquisicoes com Credito do Imposto"
		Aadd(aCols8,{"006","006.00    ",STR0026,0,"              ","",.F.}) //"Outros Creditos                               "
	   	For nX:=1 to Len(aApurExp)
	        If aApurExp[nX][1]=="006"
				If lUsaSped .And. len(aApurExp[nX]) == 7
	        		Aadd(aCols8,{"006",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],aApurExp[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols8,{"006",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="08"	 .And. aRetAuto[nPosAuto][3]=="006"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols8,{"007","007.00    ",STR0027,0,"","",.F.}) //"Estorno de Debitos                            "
		For nX:=1 to Len(aApurExp)
	        If aApurExp[nX][1]=="007"
				If lUsaSped .And. len(aApurExp[nX]) == 7
	        		Aadd(aCols8,{"007",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],aApurExp[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols8,{"007",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    Next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="08"	 .And. aRetAuto[nPosAuto][3]=="007"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols8,{"008","          ",STR0023,0,"","",.F.}) //"Sub-Total                                     "
		Aadd(aCols8,{"009","          ",STR0028,0,"","",.F.}) //"Saldo Credor do Periodo Anterior              "
		Aadd(aCols8,{"010","          ",STR0029,0,"","",.F.}) //"Total                                         "
		Aadd(aCols8,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols8,{"   ","          ",STR0030,"","","",.F.}) //"            APURACAO DO SALDO                 "
		Aadd(aCols8,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols8,{"011","          ",STR0031,0,"","",.F.}) //"Saldo Devedor( Debito menos Credito)          "
		Aadd(aCols8,{"012","012.00    ",STR0032,0,"","",.F.}) //"Deducoes                                      "
		For nX:=1 to Len(aApurExp)
	        If aApurExp[nX][1]=="012"
				If lUsaSped .And. len(aApurExp[nX]) == 7
	        		Aadd(aCols8,{"012",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],aApurExp[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols8,{"012",aApurExp[nX][4],aApurExp[nX][2],aApurExp[nX][3],aApurExp[nX][5],aApurExp[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="08"	 .And. aRetAuto[nPosAuto][3]=="012"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols8,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols8,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols8,{"013","          ",STR0033,0,"","",.F.}) //"Imposto a Recolher                            "
		Aadd(aCols8,{"014","          ",STR0034,0,"","",.F.}) //"Saldo Credor ( Credito menos Debito)          "
		cObserv := ""
		For nX := 1 To Len(aApurExp)
		    If aApurExp[nX][1]=="OBS"
			   cObserv += aApurExp[nX][2]+CHR(13)+CHR(10)
			EndIf
		Next nX
		//Adiciona um elemento para gravar o CODLAN
		If lUsaSped
			aColAnt	:= aClone(aCols8)
			aCOLS8	:= {}
			For nX := 1 to Len(aColAnt)
				If len(aColAnt[nX]) == 7
					Aadd(aCols8,Array(8))
					For nY := 1 to 6
						aCols8[nX][nY] := aColAnt[nX][nY]
					Next
					aCols8[nX][7] := ""
					aCols8[nX][8] := .F.
				Else
					Aadd(aCols8,aColAnt[nX])
				EndIf
			Next
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem do aCOLS(9) - Credito Acumulado BA - Outras hipoteses    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aadd(aCols9,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols9,{"   ","          ",STR0019,"","","",.F.}) //"            DEBITO DO IMPOSTO                 "
		Aadd(aCols9,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols9,{"001","          ",STR0020,0,"","",.F.}) //"Por Saidas/Prestacoes com debito do Imposto   "
		Aadd(aCols9,{"002","002.00    ",STR0021,0,"","",.F.}) //"Outros Debitos                                "
	    For nX:=1 to Len(aApurOut)
	        If aApurOut[nX][1]=="002"
				If lUsaSped .And. len(aApurOut[nX]) == 7
	        		Aadd(aCols9,{"002",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],aApurOut[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols9,{"002",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    Next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="09"	 .And. aRetAuto[nPosAuto][3]=="002"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols9,{"003","003.00    ",STR0022,0,"","",.F.}) //"Estorno de Creditos                           "
		For nX:=1 to Len(aApurOut)
	        If aApurOut[nX][1]=="003"
				If lUsaSped .And. len(aApurOut[nX]) == 7
	        		Aadd(aCols9,{"003",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],aApurOut[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols9,{"003",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    Next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="09"	 .And. aRetAuto[nPosAuto][3]=="003"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols9,{"004","          ",STR0023,0,"","",.F.}) //"Sub-Total                                     "
		Aadd(aCols9,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols9,{"   ","          ",STR0024,"","","",.F.}) //"            CREDITO DO IMPOSTO                "
		Aadd(aCols9,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols9,{"005","          ","Entradas/Aquisicoes com Credito do Imposto",0,"","",.F.}) //"Por Entradas/Aquisicoes com Credito do Imposto"
		Aadd(aCols9,{"006","006.00    ",STR0026,0,"              ","",.F.}) //"Outros Creditos                               "
	   	For nX:=1 to Len(aApurOut)
	        If aApurOut[nX][1]=="006"
				If lUsaSped .And. len(aApurOut[nX]) == 7
	        		Aadd(aCols9,{"006",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],aApurOut[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols9,{"006",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="09"	 .And. aRetAuto[nPosAuto][3]=="006"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols9,{"007","007.00    ",STR0027,0,"","",.F.}) //"Estorno de Debitos                            "
		For nX:=1 to Len(aApurOut)
	        If aApurOut[nX][1]=="007"
				If lUsaSped .And. len(aApurOut[nX]) == 7
	        		Aadd(aCols9,{"007",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],aApurOut[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols9,{"007",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    Next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="09"	 .And. aRetAuto[nPosAuto][3]=="007"

					If aRetAuto[nPosAuto][1] == "Man"
		       		nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
		      			If nPosPad == 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
		      				AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
		      			EndIf
					EndIf

		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols9,{"008","          ",STR0023,0,"","",.F.}) //"Sub-Total                                     "
		Aadd(aCols9,{"009","          ",STR0028,0,"","",.F.}) //"Saldo Credor do Periodo Anterior              "
		Aadd(aCols9,{"010","          ",STR0029,0,"","",.F.}) //"Total                                         "
		Aadd(aCols9,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols9,{"   ","          ",STR0030,"","","",.F.}) //"            APURACAO DO SALDO                 "
		Aadd(aCols9,{"   ","          ","                                              ","","","",.F.})
		Aadd(aCols9,{"011","          ",STR0031,0,"","",.F.}) //"Saldo Devedor( Debito menos Credito)          "
		Aadd(aCols9,{"012","012.00    ",STR0032,0,"","",.F.}) //"Deducoes                                      "
		For nX:=1 to Len(aApurOut)
	        If aApurOut[nX][1]=="012"
				If lUsaSped .And. len(aApurOut[nX]) == 7
	        		Aadd(aCols9,{"012",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],aApurOut[nX][7],.F.}) //"Texto do usuario
	        	Else
					Aadd(aCols9,{"012",aApurOut[nX][4],aApurOut[nX][2],aApurOut[nX][3],aApurOut[nX][5],aApurOut[nX][6],.F.}) //"Texto do usuario
				EndIf
	        EndIf
	    next nX

		If lAutomato .And. lUsaSped
			For nPosAuto :=1 to Len(aRetAuto)
				If aRetAuto[nPosAuto][2]=="09"	 .And. aRetAuto[nPosAuto][3]=="012"
					If aRetAuto[nPosAuto][1] == "Man"
						nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )

						If nPosPad == 0
							AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
						EndIf
					Elseif aRetAuto[nPosAuto][1] == "Aut"
						nPosPad := aScan(aCols9,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
						If nPosPad > 0
							AtuAcols(aCols9,nPosPad,aRetAuto,nPosAuto)
						EndIf
					EndIf
		    	EndIf
		    Next nX
		EndIf

		Aadd(aCols9,{"013","          ",STR0033,0,"","",.F.}) //"Imposto a Recolher                            "
		Aadd(aCols9,{"014","          ",STR0034,0,"","",.F.}) //"Saldo Credor ( Credito menos Debito)          "
		cObserv := ""
		For nX := 1 To Len(aApurOut)
		    If aApurOut[nX][1]=="OBS"
				cObserv += aApurOut[nX][2]+CHR(13)+CHR(10)
			EndIf
		Next nX
		//Adiciona um elemento para gravar o CODLAN
		If lUsaSped
			aColAnt	:= aClone(aCols9)
			aCOLS9	:= {}
			For nX := 1 to Len(aColAnt)
				If len(aColAnt[nX]) == 7
					Aadd(aCols9,Array(8))
					For nY := 1 to 6
						aCols9[nX][nY] := aColAnt[nX][nY]
					Next
					aCols9[nX][7] := ""
					aCols9[nX][8] := .F.
				Else
					Aadd(aCols9,aColAnt[nX])
				EndIf
			Next
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aCOLS(10) - Débitos Especiais.³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	If lUsaSped
		If lProcRef
			Aadd(aCOLS10,{"   ","          ",Space(30)+"DEBITOS ESPECIAIS - ICMS"	,""	,""	,""	,""	,"" ,"" ,"" ,"" ,"" ,.F.})
			Aadd(aCOLS10,{"900","900.00    ",STR0238	,0	,""	,""	,""	,"" ,"" ,"" ,"" ,"" ,.F.})
		Else
			Aadd(aCOLS10,{"   ","          ",Space(30)+"DEBITOS ESPECIAIS - ICMS"	,""	,""	,""	,""	,"",.F.})
			Aadd(aCOLS10,{"900","900.00    ",STR0238	,0	,""	,""	,""	,"",.F.})
		EndIf
	Else
		Aadd(aCOLS10,{"   ","          ",Space(30)+"DEBITOS ESPECIAIS - ICMS"	,""	,""	,""	,.F.})
		Aadd(aCOLS10,{"900","900.00    ",STR0238	,0	,""	,""	,.F.})
	EndIf

	For nX:=1 to Len(aDadIC)
        If aDadIC[nX][1]=="900"
			If lUsaSped .And. len(aDadIC[nX]) == 8
        		Aadd(aCOLS10,{"900",Padr(aDadIC[nX][4],10),aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],.F.}) //"Texto do usuario
 			ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS10,{"900",Padr(aDadIC[nX][4],10),aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],aDadIC[nX][7],aDadIC[nX][8],aDadIC[nX][9],aDadIC[nX][10],aDadIC[nX][11],aDadIC[nX][12],.F.}) //"Texto do usuario
        	Else
				Aadd(aCOLS10,{"900",Padr(aDadIC[nX][4],10),aDadIC[nX][2],aDadIC[nX][3],aDadIC[nX][5],aDadIC[nX][6],.F.}) //"Texto do usuario
			EndIf
        EndIf
    Next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="10"	 .And. aRetAuto[nPosAuto][3]=="900"

				If aRetAuto[nPosAuto][1] == "Man"
					nPosPad := aScan(aCOLS10,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad == 0
						AtuAcols(aCols10,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS10,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
						AtuAcols(aCols10,nPosPad,aRetAuto,nPosAuto,lProcRef)
					EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	If lUsaSped

		If lProcRef
			Aadd(aCOLS10,{"   ","          ",""	,""	,""	,""	,""	,"",'','','','',.F.})

			Aadd(aCOLS10,{"   ","          ",Space(27)+"DEBITOS ESPECIAIS - ICMS/ST"	,""	,""	,""	,""	,"" ,"" ,"" ,"" ,"" ,.F.})
			Aadd(aCOLS10,{"901","901.00    ",STR0238	,0	,""	,""	,""	,"" ,"" ,"" ,"" ,"" ,.F.})
		Else
			Aadd(aCOLS10,{"   ","          ",""	,""	,""	,""	,""	,"",.F.})

			Aadd(aCOLS10,{"   ","          ",Space(27)+"DEBITOS ESPECIAIS - ICMS/ST"	,""	,""	,""	,""	,"",.F.})
			Aadd(aCOLS10,{"901","901.00    ",STR0238	,0	,""	,""	,""	,"",.F.})
		EndIf

	Else
		Aadd(aCOLS10,{"   ","          ",""	,""	,""	,""	,.F.})

		Aadd(aCOLS10,{"   ","          ",Space(27)+"DEBITOS ESPECIAIS - ICMS/ST"	,""	,""	,""	,.F.})
		Aadd(aCOLS10,{"901","901.00    ",STR0238	,0	,""	,""	,.F.})
	EndIf
	For nX:=1 to Len(aDadST)
		If aDadST[nX][1]=="901"
			If lUsaSped .And. len(aDadST[nX]) == 8
	        	Aadd(aCOLS10,{"901",Padr(AllTrim(aDadST[nX][4]),10),aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",aDadST[nX][7],aDadST[nX][8],.F.})

	        ElseIf lUsaSped .And. lProcRef
        		Aadd(aCOLS10,{"901",Padr(aDadST[nX][4],10),aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],aDadST[nX][6],aDadST[nX][7],aDadST[nX][8],aDadST[nX][9],aDadST[nX][10],aDadST[nX][11],aDadST[nX][12],.F.})
        	Else
	           Aadd(aCOLS10,{"901",Padr(aDadST[nX][4],10),aDadST[nX][2],aDadST[nX][3],aDadST[nX][5],"",.F.})
	        EndIf
        EndIf
    Next nX

	If lAutomato .And. lUsaSped
		For nPosAuto :=1 to Len(aRetAuto)
			If aRetAuto[nPosAuto][2]=="10"	 .And. aRetAuto[nPosAuto][3]=="901"

				If aRetAuto[nPosAuto][1] == "Man"
	       		nPosPad := aScan(aCOLS10,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
	      			If nPosPad == 0
	      				AtuAcols(aCols10,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				Elseif aRetAuto[nPosAuto][1] == "Aut"
					nPosPad := aScan(aCOLS10,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
					If nPosPad > 0
	      				AtuAcols(aCols10,nPosPad,aRetAuto,nPosAuto,lProcRef)
	      			EndIf
				EndIf

	    	EndIf
	    Next nX
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (1) Op.Propria - Entradas         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader1,{STR0047	,"F3_CFO"		,"@ 9.9999"	,05,0,".t." ,"û" ,"C"," "," " }) //"CFOP"
	Aadd(aHeader1,{STR0048	,"F3_VALCONT"	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Valor Contabil"
	Aadd(aHeader1,{STR0049	,"F3_BASEICM"	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Base de Calculo"
	Aadd(aHeader1,{STR0050	,"F3_VALICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Imposto Creditado"
	Aadd(aHeader1,{STR0051	,"F3_ISENICM" 	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Isentas"
	Aadd(aHeader1,{STR0052	,"F3_OUTRICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Outras"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (2) - Op. Proprias - Saida        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader2,{STR0047	,"F3_CFO"		,"@ 9.9999"	,05,0,".t." ,"û" ,"C"," "," " }) //"CFOP"
	Aadd(aHeader2,{STR0048	,"F3_VALCONT"	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Valor Contabil"
	Aadd(aHeader2,{STR0049	,"F3_BASEICM"	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Base de Calculo"
	Aadd(aHeader2,{STR0053	,"F3_VALICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Imposto Debitado"
	Aadd(aHeader2,{STR0051	,"F3_ISENICM" 	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Isentas"
	Aadd(aHeader2,{STR0052	,"F3_OUTRICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Outras"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (3) - Subs. Tributaria - Entrada  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader3,{STR0054	,"F3_ESTADO"	,"@!"		,04,0,"a953VlEst()" ,"û" ,"C"," "," " }) //"UF "
	Aadd(aHeader3,{STR0049	,"F3_BASEICM"	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Base de Calculo"
	Aadd(aHeader3,{STR0050	,"F3_VALICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Imposto Creditado"
	Aadd(aHeader3,{STR0053	,"F3_VALICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Imposto Debitado"
	Aadd(aHeader3,{STR0028	,"SALDCRE"  	,cPictVal	,15,2,"a953AtuCre()" ,"û" ,"N"," "," " }) //"Saldo Credor"
	Aadd(aHeader3,{STR0237	,"F3_VALICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Imposto Creditado - Devoluções de vendas"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (4)  Subst. Tributaria - Saida    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader4,{STR0054	,"F3_ESTADO"	,"@!"		,04,0,".t." ,"û" ,"C"," "," " }) //"UF "
	Aadd(aHeader4,{STR0049	,"F3_BASEICM"	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Base de Calculo"
	Aadd(aHeader4,{STR0053	,"F3_VALICM"  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Imposto Debitado"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (5) Resumo da Apuracao - ICMS     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader5,{STR0055	,"cLinha"		,"@E 999"	,03,0,".t." ,"û" ,"C"," "," " }) //"Linha"
	Aadd(aHeader5,{STR0056	,"cCodigo"		,"@!"		,10,0,"a953Codigo()" ,"û" ,"C"," "," " }) //"Codigo"
	Aadd(aHeader5,{STR0057	,"cDescr"		,"@!"		,TamSx3("CDH_DESC")[1],0,".t." ,"û" ,"C"," "," " }) //"Descricao"
	Aadd(aHeader5,{STR0058	,"nValor"  		,cPictVal	,15,2,"IIf(a953Vld5Col(),a953Saldo(.F.,.F.,.F.,.F.),)" ,"û" ,"N"," "," " }) //"Valor"
	Aadd(aHeader5,{STR0072	,"cGNRE"  		,"@!"		,14,0,"a953GNRE('0')" ,"û" ,"C"," "," " }) //"GNRE"
	Aadd(aHeader5,{STR0074	,"cClasse"  	,"@!"		,06,0,".t." ,"û" ,"C"," "," " }) //"Classe de Vencto."
	If lUsaSped
		Aadd(aHeader5,{STR0118	,"cCodLan" 	,"@!"		,22,0,"IIf(a953Vld5Col(),a953CODLAN('0'),)" ,"û" ,"C"," "," " }) //"Cod. Lançamento"
		Aadd(aHeader5,{STR0262	 ,"cTipLan" 	,"@!"		,10,0,".f." ,"","C","","" }) 		//"Tipo Lançamento"
		If lProcRef
			Aadd(aHeader5,{STR0283	,"cProcesso" 	,"@!"		,TamSx3("CCF_NUMERO")[1],0,".T.","û","C"," "," " })//"Processo"
			Aadd(aHeader5,{STR0284	,"cTipoProc" 	,"@!"		,30,0,".T.","û","C"," "," " })//"Tipo do processo"
			Aadd(aHeader5,{STR0285	,"cAutAcaJd" 	,"@!"		,30,0,".T.","û","C"," "," " })//"Autoria da Ação Judicial "
			Aadd(aHeader5,{STR0286	,"cItemProc" 	,"@!"		,30,0,".T.","û","C"," "," " })//"Item"
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (6) Resumo da Apuracao - ST       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader6,{STR0055	,"cLinha"		,"@E 999"	,03,0,".t." ,"û" ,"C"," "," " }) //"Linha"
	Aadd(aHeader6,{STR0056	,"cCodigo"		,"@!"		,10,0,".t." ,"a953Codigo()" ,"C"," "," " }) //"Codigo"
	Aadd(aHeader6,{STR0057	,"cDescr"		,"@!"		,TamSx3("CDH_DESC")[1],0,".t." ,"û" ,"C"," "," " }) //"Descricao"
	Aadd(aHeader6,{STR0058	,"nValor"	  	,cPictVal	,15,2,"a953Saldo(.F.,.T.,.F.,.F.)" ,"û" ,"N"," "," " }) //"Valor"
	Aadd(aHeader6,{STR0072	,"cGNRE"  		,"@!"		,14,0,"a953GNRE('1')" ,"û" ,"C"," "," " }) //"GNRE"
	Aadd(aHeader6,{STR0074	,"cClasse"  	,"@!"		,06,0,".t." ,"û" ,"C"," "," " }) //"Classe de Vencto."
	If lUsaSped
		Aadd(aHeader6,{STR0118	,"cCodLan"  ,"@!"		,22,0,"a953CODLAN('1')" ,"û" ,"C"," "," " }) //"Cod. Lançamento"
		Aadd(aHeader6,{STR0262	,"cTipLan" 	,"@!"		,10,0,".f." ,"","C","","" }) 				  //"Tipo Lançamento"
		If lProcRef
			Aadd(aHeader6,{STR0283	,"cProcesso" 	,"@!"		,TamSx3("CCF_NUMERO")[1],0,".T.","û","C"," "," " })//"Processo"
			Aadd(aHeader6,{STR0284	,"cTipoProc" 	,"@!"		,30,0,".T.","û","C"," "," " })//"Tipo do processo"
			Aadd(aHeader6,{STR0285	,"cAutAcaJd" 	,"@!"		,30,0,".T.","û","C"," "," " })//"Autoria da Ação Judicial "
			Aadd(aHeader6,{STR0286	,"cItemProc" 	,"@!"		,08,0,".T.","û","C"," "," " })//"Item"
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (7) Informacoes Complementares    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader7,{STR0055	,"cLinha"		,"@E 999"	,03,0,".t." ,"û" ,"C"," "," " }) //"Linha"
	Aadd(aHeader7,{STR0057	,"cDescr"		,"@!"		,47,0,".t." ,"û" ,"C"," "," " }) //"Descricao"
	Aadd(aHeader7,{STR0058	,"nValor"	  	,cPictVal	,15,2,".t." ,"û" ,"N"," "," " }) //"Valor"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (8) Demonstrativo Apuração Fomentar³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lFomentGO
		Aadd(aHeader8,{STR0055	,"cLinha"		,"@E 999"	,03,0,".t." ,"û" ,"C"," "," " }) //"Linha"
		Aadd(aHeader8,{" "		,"cCodigo"		,"@!"		,1,0,".t." ,"û" ,"C"," "," " }) //""
		Aadd(aHeader8,{STR0057	,"cDescr"		,"@!"		,100,0,".t." ,"û" ,"C"," "," " }) //"Descricao"
		Aadd(aHeader8,{STR0058	,"nValor"	  	,cPictVal	,14,2,"a953Saldo(.F.,.F.,.T.,.F.)" ,"û" ,"N"," "," " }) //"Valor"
    EndIf

	If lApurBA
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem do aHeader (8) Credito Acumulado - Exportacoes   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aadd(aHeader8,{STR0055	,"cLinha"		,"@E 999"	,03,0,".t." ,"û" ,"C"," "," " }) //"Linha"
		Aadd(aHeader8,{STR0056	,"cCodigo"		,"@!"		,10,0,"a953Codigo()" ,"û" ,"C"," "," " }) //"Codigo"
		Aadd(aHeader8,{STR0057	,"cDescr"		,"@!"		,47,0,".t." ,"û" ,"C"," "," " }) //"Descricao"
		Aadd(aHeader8,{STR0058	,"nValor"  		,cPictVal	,15,2,"a953Saldo(.F.,.F.,.F.,.T.)" ,"û" ,"N"," "," " }) //"Valor"
		Aadd(aHeader8,{STR0072	,"cGNRE"  		,"@!"		,14,0,"a953GNRE()" ,"û" ,"C"," "," " }) //"GNRE"
		Aadd(aHeader8,{STR0074	,"cClasse"  	,"@!"		,06,0,".t." ,"û" ,"C"," "," " }) //"Classe de Vencto."
	    If lUsaSped
		    Aadd(aHeader8,{STR0118	,"cCodLan"  ,"@!"		,22,0,"a953CODLAN('0')" ,"û" ,"C"," "," " }) //"Cod. Lançamento"
	    EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem do aHeader (9) Credito Acumulado - Outras hipoteses  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aadd(aHeader9,{STR0055	,"cLinha"		,"@E 999"	,03,0,".t." ,"û" ,"C"," "," " }) //"Linha"
		Aadd(aHeader9,{STR0056	,"cCodigo"		,"@!"		,10,0,"a953Codigo()" ,"û" ,"C"," "," " }) //"Codigo"
		Aadd(aHeader9,{STR0057	,"cDescr"		,"@!"		,47,0,".t." ,"û" ,"C"," "," " }) //"Descricao"
		Aadd(aHeader9,{STR0058	,"nValor"  		,cPictVal	,15,2,"a953Saldo(.F.,.F.,.F.,.T.)" ,"û" ,"N"," "," " }) //"Valor"
		Aadd(aHeader9,{STR0072	,"cGNRE"  		,"@!"		,14,0,"a953GNRE()" ,"û" ,"C"," "," " }) //"GNRE"
		Aadd(aHeader9,{STR0074	,"cClasse"  	,"@!"		,06,0,".t." ,"û" ,"C"," "," " }) //"Classe de Vencto."
    	If lUsaSped
	    	Aadd(aHeader9,{STR0118	,"cCodLan"  ,"@!"		,22,0,"a953CODLAN('0')" ,"û" ,"C"," "," " }) //"Cod. Lançamento"
	    EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (10) Debitos Especiais  		     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader10,{STR0055	,"cLinha"		,"@E 999"	,03,0,".t."			 					,"û" ,"C"," "," " }) //"Linha"
	Aadd(aHeader10,{STR0056	,"cCodigo"		,"@!"		,10,0,"a953Codigo()" 					,"û" ,"C"," "," " }) //"Codigo"
	Aadd(aHeader10,{STR0057	,"cDescr"		,"@!"		,47,0,".t." 		   					,"û" ,"C"," "," " }) //"Descricao"
	Aadd(aHeader10,{STR0058	,"nValor"  		,cPictVal	,15,2,"a953Saldo(.F.,.F.,.F.,.F.,.T.)" 	,"û" ,"N"," "," " }) //"Valor"
	Aadd(aHeader10,{STR0072	,"cGNRE"  		,"@!"		,14,0,"a953GNRE('')" 					,"û" ,"C"," "," " }) //"GNRE"
	Aadd(aHeader10,{STR0074	,"cClasse"  	,"@!"		,06,0,".t." 							,"û" ,"C"," "," " }) //"Classe de Vencto."
	If lUsaSped
		Aadd(aHeader10,{STR0118	,"cCodLan" 	,"@!"		,22,0,"a953CODLAN('')"	 				,"û" ,"C"," "," " }) //"Cod. Lançamento"
		Aadd(aHeader10,{STR0262	,"cTipLan" 	,"@!"		,10,0,".f." ,"","C","","" }) //"Tipo Lançamento"
		If lProcRef
			Aadd(aHeader10,{STR0283	,"cProcesso" 	,"@!"		,TamSx3("CCF_NUMERO")[1],0,".T.","û","C"," "," " }) //"Processo"
			Aadd(aHeader10,{STR0284	,"cTipoProc" 	,"@!"		,30,0,".T.","û","C"," "," " }) //"Tipo do processo"
			Aadd(aHeader10,{STR0285	,"cAutAcaJd" 	,"@!"		,30,0,".T.","û","C"," "," " }) //"Autoria da Ação Judicial "
			Aadd(aHeader10,{STR0286	,"cItemProc" 	,"@!"		,30,0,".T.","û","C"," "," " }) //"Item"
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (9) Credito Acumulado - Outras hipoteses  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader11,{STR0263	,"cUF"		   		       					,"@!"  		,15,0,"" ,"û" ,"C"," "," " }) //"UF"
	Aadd(aHeader11,{STR0264,"nValServ"									,cPictVal	,15,2,"" ,"û" ,"N"," "," " }) //"Valor Serviço"
	Aadd(aHeader11,{STR0265	,"nBaseCalc" 								,cPictVal	,15,2,"" ,"û" ,"N"," "," " }) //"Base de calculo"
	Aadd(aHeader11,{STR0266	,"nValor"  	   								,cPictVal	,15,2,".F." ,"û" ,"N"," "," " }) //"Valor"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (12) Apuração DIFAL/FECP agrupada
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader12, {" "					,"cMostra"		,"@BMP"		, 2, 0, ".F." ,""    , "C", "", "V" ,"" , "","","V"})
	Aadd(aHeader12,{'Estado'				,"cUF"			,"@!"  		,165	,0,	".T."	,"û" 	,"C"," "," " }) //"UF"
	Aadd(aHeader12,{'DIFAL a Recolher'		,"nValServ"		,cPictVal	,15,2,""    	,"û" ,"N"," "," " }) //"Valor do Difal a Recolher"
	Aadd(aHeader12,{'Saldo Credor DIFAL'	,"nBaseCalc" 	,cPictVal	,15,2,"" 		,"û" ,"N"," "," " }) //"Saldo Credor do Difal"
	Aadd(aHeader12,{'FECP a Recolher'		,"nValFecp" 	,cPictVal	,15,2,"" 		,"û" ,"N"," "," " }) //"Fecp a Recolher"
	Aadd(aHeader12,{'Saldo Credor FECP'		,"nSaldoFecp" 	,cPictVal	,15,2,"" 		,"û" ,"N"," "," " }) //"Saldo Credor do FECP"
	Aadd(aHeader12,{'Débitos Especial'		,"nDepÉsp"		,cPictVal	,15	,2,	"" 		,"û" 	,"N"," "," " }) //"Débitos Especial"
	If lProcRef
		Aadd(aHeader12,{''						,""				,"@!"		,1 ,0,	"" 		,"û" 	,"C"," "," " })
		Aadd(aHeader12,{''						,""				,"@!"		,1	,0,	"" 		,"û" 	,"C"," "," " })
		Aadd(aHeader12,{''						,""				,"@!"		,1	,0,	"" 		,"û" 	,"C"," "," " })
		Aadd(aHeader12,{''						,""				,"@!"		,1	,0,	"" 		,"û" 	,"C"," "," " })
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (13) Apuração DIFAL/FECP Detalhada por UF
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aHeader13,{'Linha'					,"cLinha"			,"@E 999"				,3,0,".T." ,"û" ,"C"," "," " }) //"Código da Linha"
	Aadd(aHeader13,{'SubItem'				,"cCodigo"			,"@!"					,10,0,".T.","û" ,"C"," "," " }) //"Código do SubItem"
	Aadd(aHeader13,{'Descrição'				,"cDescr" 			,'@!'					,60,0,"" ,"û" ,"C"," "," " }) //"Descrição da linha"
	Aadd(aHeader13,{'Valor'					,"nValor" 			,cPictVal				,15,2,"a953Saldo(.F.,.F.,.F.,.F.,.F.,.F.,.T.)" ,"û" ,"N"," "," " }) //"Valor"
	Aadd(aHeader13,{'Código Lançamento'	,"cCodLan" 		,"@!"					,8,2,"a953CODLAN('2')" ,"" ,"C"," "," " }) //"Código de lançamento de apuração"
	Aadd(aHeader13,{'GNRE'					,"cGNRE" 			,"@!"					,14,0,"a953GNRE('2')" ,"" ,"C"," "," " }) //"GNRE"
	Aadd(aHeader13,{'Tipo Ajuste'			,"cTpAju" 			,"@!"					,15,0,".T.","û" ,"C"," "," " }) //"Tipo de ajuste"

	If lUsaSped
		If lProcRef
			Aadd(aHeader13,{STR0283		,"cProcesso" 	,"@!"		,TamSx3("CCF_NUMERO")[1],0,".T.","û","C"," "," " })//"Processo"
			Aadd(aHeader13,{STR0284		,"cTipoProc" 	,"@!"		,30,0,".T.","û","C"," "," " })//"Tipo do processo"
			Aadd(aHeader13,{STR0285		,"cAutAcaJd" 	,"@!"		,30,0,".T.","û","C"," "," " })//"Autoria da Ação Judicial "
			Aadd(aHeader13,{STR0286		,"cItemProc" 	,"@!"		,08,0,".T.","û","C"," "," " })//"Item"
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (14) Extra Apuração Consolidado
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	Aadd(aHeader14,{" "																			,"cMostra",	   "@BMP"				, 2,0,".F." ,""    , "C", "", "V" ,"" , "","","V"})
	Aadd(aHeader14,{'Código de Ajuste'															,"cCod"		   ,"@!"				,20,0,"a953CodExt()" ,"" ,"C"," "," " }) //"Código de Ajuste"
	Aadd(aHeader14,{'Descrição'			    	      	    									,"cDescr" 	   ,'@!'				,35,0,"" ,"û" ,"C"," "," " }) //"Descrição da linha"
	Aadd(aHeader14,{'Saldo créditos fiscais de períodos anteriores' 	    					,"nCrdAnt"	   ,cPictVal			,14,2,"a953SldExt()" ,"" ,"N"," "," " }) //"Créditos de Períodos Anteriores"
	Aadd(aHeader14,{'Total crédito apropriado no período'										,"nCrdMes"	   ,cPictVal			,14,2,".T." ,"" ,"N"," "," " }) //"Créditos apropriados no Mês"
	Aadd(aHeader14,{'Total créditos recebido por transferência'									,"nCrdTrans"   ,cPictVal			,14,2,".T." ,"" ,"N"," "," " }) //"Créditos Recebidos por transferência"
	Aadd(aHeader14,{'Total créditos utilizados no período'										,"nCrdUtiMes"  ,cPictVal			,14,2,".T." ,"" ,"N"," "," " }) //"Créditos Utilizados no Período"
	Aadd(aHeader14,{'Saldo de crédito fiscal acumulado a transportar para o período seguinte'	,"nSaldo"	   ,cPictVal			,14,2,".T." ,"" ,"N"," "," " }) //"Saldo Credor para próximo período"


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader (15) Extra Apuração Detalhado
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	Aadd(aHeader15,{'Linha'												,"cLinha"		   ,"@!"				,3,0,".T." ,"" ,"C"," "," " }) //"Tipo de utilização do Crédito"
	Aadd(aHeader15,{'Descrição'			    							,"cDescr" 	       ,'@!'				,30,0,"" ,"û" ,"C"," "," " }) //"Descrição da linha"
	Aadd(aHeader15,{'Tipo Utilz. Crédito'								,"cTipo"		   ,"@!"				,4,0,".T." ,"" ,"C"," "," " }) //"Tipo de utilização do Crédito"
	Aadd(aHeader15,{'Valor '											,"nCrduti"		   ,cPictVal			,15,3,"a953SldExt()" ,"" ,"N"," "," " }) //"Total de Crédito Utilizado"
	Aadd(aHeader15,{'Número do Documento'								,"cNf"			   ,"@!"				,7,0,".T." ,"" ,"C"," "," " }) //"Número do Documento"
	Aadd(aHeader15,{'Chave NFE'											,"cChaveNfe"	   ,"@!"	    		,40,3,".T." ,"" ,"C"," "," " }) //"Chave NFE"
	Aadd(aHeader15,{'Código Origem'										,"cCod"		   		,"@!"				,7,0,".T." ,"" ,"C"," "," " }) //"Código de Ajuste"
	Aadd(aHeader15,{'Tipo Lanc'											,"cTpAju" 			,"@!"					,12,0,".T.","û" ,"C"," "," " }) //"Tipo de ajuste"

	a953Apura(cImp,dDtIni,dDtFim,cNrLivro,nConsFil,cFilDe,cFilAte,lImpCrdSt,lCrdEst,@aEstimulo,@aIncent,lConsUF,nAno,nMes,nApuracao,nPeriodo,cNrLivro,@lLancCDA,aLisFil,lICMDes,@aIcmPago,@aRetEsp,nOpcApu,@aDifal,@aCDADifal,@aApurDifal,lAutomato,cTestCase,@aCDAExtra,@aApurExtra,@aApurCDV,@aNWCredAcu,aEApCe6Ce5,lProcRefer,aCont)

    If cMv_Estado == "MG" .And. nVlrArt488 <> 0
        a953Saldo( .T.,.F.,.F.,.F.,.F.,.T.)
    Else
    	a953Saldo( .T.,.F.,.F.,.F.) 		// Operacoes Proprias
    EndIf

	a953Saldo( .T.,.T.,.F.,.F.) 		// Substituicao Tributaria

	If lFomentGO
		a953Saldo( .T.,.F.,.T.,.F.) // Fomentar
	Elseif lApurBA
		a953Saldo( .T.,.F.,.T.,.T.) // Apuracao Credito Acumulado Bahia
	EndIf

	a953Saldo( .T.,.F.,.F.,.F.,.T.) 	// Debitos Especiais

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Conforme a consultoria realizada no Jira, apagar a linha do³
	//³FECP ST de Deduções e de Debitos Especiais quando         ³
	//³tem saldo credor e recalcula o saldo da Apuração.         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙd
	lApagFecpST	:=	.F.
	If cMv_Estado$"RJ|BA"
		If  (nFecpST := aScan(aCols6,{|aX|aX[1]=="014" .And. "ADICIONAL RELATIVO AO FECP"==Upper(aX[3])}))>0
			If !aCols6[aScan(aCols6,{|aX|aX[1]=="015"}),4]>0
				aDel(aCols6,nFecpST)
				aSize(aCols6,Len(aCols6)-1)

				a953Saldo( .T.,.F.,.F.,.F.) 		// Operacoes Proprias
				a953Saldo( .T.,.T.,.F.,.F.) 		// Substituicao Tributaria

				lApagFecpST	:=	.T.
			EndIf
		EndIf

		If  lApagFecpST .And. (nFecpST := aScan(aCols10,{|aX|aX[1]$"901" .And. ("ADICIONAL RELATIVO AO FECP"==Upper(aX[3]) .Or. "FECP"==Upper(aX[3]))}))>0
			aDel(aCols10,nFecpST)
			aSize(aCols10,Len(aCols10)-1)

			a953Saldo( .T.,.F.,.F.,.F.,.T.) 	// Debitos Especiais
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Conforme a consultoria realizada no Jira, apagar a linha do³
		//³FECP proprio de Deduções e de Debitos Especiais quando     ³
		//³tem saldo credor e recalcula o saldo da Apuracao.          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		lApagFecp := .F.
		If (nFecp :=aScan(aCols5,{|aX|aX[1]=="012" .And. "FECP"$Upper(aX[3])}))>0
			If !aCols5[aScan(aCols5,{|aX|aX[1]=="013"}),4]>0
				aDel(aCols5,nFecp)
				aSize(aCols5,Len(aCols5)-1)

				a953Saldo( .T.,.F.,.F.,.F.) 		// Operacoes Proprias
				a953Saldo( .T.,.T.,.F.,.F.) 		// Substituicao Tributaria

				lApagFecp := .T.
			EndIf
		EndIf

		If  lApagFecp .And. (nFecp := aScan(aCols10,{|aX|aX[1]$"900" .And. "FECP"$Upper(aX[3])}))>0
			aDel(aCols10,nFecp)
			aSize(aCols10,Len(aCols10)-1)

			a953Saldo( .T.,.F.,.F.,.F.,.T.) 	// Debitos Especiais
		EndIf
	EndIf


	aObjects := {}
	Aadd( aObjects, {  60, 100, .t., .t. } )

	aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 3, 3 }
	aPosObj := MsObjSize( aInfo, aObjects )

	If !lLancCDA .Or. lP9Sped
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega os parametros de autopreenchimento                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PRIVATE aTotal
		aCFG := FsLoadCFGAp("P9AUTOTEXT")
		FsExecCFGAp(aCFG[4],aObs,aCols5)
	EndIf

	If lArt488MG
        cObserv := cObsArt488MG
    Else
    	For nX := 1 To Len(aObs)
		    cObserv += aObs[nX]+CHR(13)+CHR(10)
	    Next nX
	EndIf

    //verifica o linte do valor do FUMACOP
	If cMv_Estado$"MA"
	    nPosFumac := aScan(aCols5,{|x|x[1]=="011"})
		nLmFumacop := aCols5[nPosFumac,4]
        nPosFumac := aScan(aCols6,{|x|x[1]=="005"})
	    nLmFumacop := nLmFumacop + aCols6[nPosFumac,4]
	    nPosFumac := aScan(aCols5,{|x|x[1]=="012"})
        If 	aCols5[nPosFumac+1,4]>nLmFumacop
			aCols5[nPosFumac+1,4] := nLmFumacop
			a953Saldo( .T.,.F.,.F.,.F.) 		// Operacoes Proprias
			a953Saldo( .T.,.T.,.F.,.F.) 		// Substituicao Tributaria
		EndIf
	EndIf

	/* -----------------------------------

				INCENTIVOS FISCAIS

	   -----------------------------------  */

	/* -------------------
		DESENVOLVE/BA
     ------------------- */
	If GetNewPar("MV_ESTADO") == "BA"

		If !Empty (aApIncent := xApGetIncent( "DES" , , , {2,dDtIni,,,} ) )

			Aadd(aApIncent,"")

			a953Saldo( .T. , .F. , .F. , .F. ) 		// Operacoes Proprias

		EndIf

	/* -------------------
		INVEST/ES
	 ------------------- */
	Elseif GetNewPar("MV_ESTADO") == "ES" .And. Len( aMVINVEST ) >= 3

		// Credito Presumido
		// -------------------
		xApGetIncent( "INV" , , , {1,dDtIni,aMVINVEST} )
		a953Saldo( .T. , .F. , .F. , .F. ) 		// Operacoes Proprias

		// Estorno de Debito
		// -------------------
		xApGetIncent( "INV" , , , {2,dDtIni,aMVINVEST} )
		a953Saldo( .T. , .F. , .F. , .F. ) 		// Operacoes Proprias

		// Estorno de Credito
		// -------------------
		xApGetIncent( "INV" , , , {3,dDtIni} )
		a953Saldo( .T. , .F. , .F. , .F. ) 		// Operacoes Proprias


	/* -------------------
		PRODEC(FAMDES)/SC
	 ------------------- */
	Elseif GetNewPar("MV_ESTADO") == "SC" .And. Len( aMVFISPRDC ) >= 10

		If !Empty (aApIncent := xApGetIncent( "PDC" , , , {2,dDtIni,,,aMVFISPRDC} ) )

			Aadd(aApIncent,"")

			a953Saldo( .T. , .F. , .F. , .F. ) 		// Operacoes Proprias

		EndIf

	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem da Tela                                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !lAutomato
		DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],00 To aSize[6],aSize[5] OF oMainWnd PIXEL

		If lFomentGO .Or. lACredAcu // #vitor01 - Montagem da Tela
			If lFomentGO .And. lACredAcu
				oFolder := TFolder():New(aPosObj[1,1],aPosObj[1,2],aTitles,{"","","","","","","","","",""},oDlg,,,,.T.,.F.,aPosObj[1,4]-aPosObj[1,2],aPosObj[1,3]-aPosObj[1,1])
			Else
				oFolder := TFolder():New(aPosObj[1,1],aPosObj[1,2],aTitles,{"","","","","","","","",""},oDlg,,,,.T.,.F.,aPosObj[1,4]-aPosObj[1,2],aPosObj[1,3]-aPosObj[1,1])
			EndIf
		Elseif lApurBA
			oFolder := TFolder():New(aPosObj[1,1],aPosObj[1,2],aTitles,{"","","","","","","","","",""},oDlg,,,,.T.,.F.,aPosObj[1,4]-aPosObj[1,2],aPosObj[1,3]-aPosObj[1,1])
		Else
			oFolder := TFolder():New(aPosObj[1,1],aPosObj[1,2],aTitles,{"","","","","","","",""},oDlg,,,,.T.,.F.,aPosObj[1,4]-aPosObj[1,2],aPosObj[1,3]-aPosObj[1,1])
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Define as posicoes da Getdados a partir do folder    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		nOpcx := 4
		nOpca := 1
		nGd1 := 2
		nGd2 := 2
		nGd3 := aPosObj[1,3]-aPosObj[1,1]-15
		nGd4 := aPosObj[1,4]-aPosObj[1,2]-4

		If lCon13906
			aHeader  := aClone(aHeader11)
			aCols    := aClone(aCols11)
			oGetDad11 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953lin5Ok","A953TdOk","",nOpcx!=2,aAlter11,3,,len(aCols11),,,,"a953Del5Col",oFolder:aDialogs[nTitCnv139])
			oGetDad11:oBrowse:lDisablePaint := .T.
			oGetDad11:oBrowse:bDrawSelect := {|| a953Cpo5Alt(oGetDad11:oBrowse)}
			oGetDad11:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}
		EndIf
		aHeader  := aClone(aHeader10)
		aCols    := aClone(aCols10)
		oGetDad10 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953lin5Ok","A953TdOk","",nOpcx!=2,aAlter10,3,,Len(aCols10),,,,"a953Del10Col",oFolder:aDialogs[nTitDebEsp])
		oGetDad10 :oBrowse:lDisablePaint := .T.
		oGetDad10 :oBrowse:bDrawSelect := {|| a953Cpo5Alt(oGetDad10:oBrowse)}
		oGetDad10 :oBrowse:Cargo := {|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}

		If lUsaSped
			oGetDad10:aInfo[7][1] := "CDO" //na coluna de Cod Lancamento
		EndIf

		//Cria novo folder com apuração consolidada do DIFAL/FECP

		aHeader  := aClone(aHeader13)
		aCols    := aClone(aCols13)
		oGetDad13 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953Lin6Ok","a953VldDif()","",nOpcx!=2,aAlter13,3,,len(aCols13),,,,"a953Del5Col",oFolder:aDialogs[nTitDifal])
		oGetDad13:oBrowse:lDisablePaint := .T.
		oGetDad13:oBrowse:bDrawSelect := {|| a953CPODIF(oGetDad13:oBrowse)}
		oGetDad13:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}
		oGetDad13:oBrowse:bLDblClick := {|| DuploClick(@oGetDad12,@oGetDad13,@oDlg,@aApurDifal,dDtIni)}

		If lUsaSped
			oGetDad13:aInfo[5][1] := "CDO" //na coluna de Cod Lancamento
			oGetDad13:aInfo[6][1] := "SF6DIF" //na coluna de Cod Lancamento

			If lProcRef
				oGetDad13:aInfo[8][1] := "CCFICM" //na coluna de Processo
			EndIf
		EndIf

		//Adiciona Combo Box
		If lUsaSped .And. lProcRef
			oGetDad13:aInfo[09][2] := "0=Sefaz;1=Justiça Federal;2=Justiça Estadual;9=Outros"
			oGetDad13:aInfo[10][2] := "1=Próprio contribuinte;2=Outra entidade ou empresa"
		EndIf

		aHeader  := aClone(aHeader12)
		aCols    := aClone(aCols12)
		oGetDad12 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"A953Lin6Ok","a953VldDif()","",nOpcx!=2,aAlter12,3,,len(aCols12),,,,"a953Del5Col",oFolder:aDialogs[nTitDifal])
		oGetDad12:oBrowse:lDisablePaint := .T.
		oGetDad12:oBrowse:bDrawSelect := {|| .T.}
		oGetDad12:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}
		oGetDad12:oBrowse:bLDblClick := {|| DuploClick(@oGetDad12,@oGetDad13,@oDlg,@aApurDifal,dDtIni)}

		//Cria novo folder com informações Extra Apuração
		aHeader  := aClone(aHeader15)
		aCols    := aClone(aCols15)
		oGetDad15 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953linExt","AlwaysTrue","",nOpcx!=2,aAlter15,3,,len(aCols15),,,,"a953DelExt",oFolder:aDialogs[nTitExtra])
		oGetDad15:oBrowse:lDisablePaint := .T.
		oGetDad15:oBrowse:bDrawSelect := {|| a953CPOEXT(oGetDad15:oBrowse)}
		oGetDad15:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| EditCelExt(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB,oGetDad15)}
		oGetDad15:oBrowse:bLDblClick := {|| DblExtApur(@oGetDad14,@oGetDad15,@oDlg,@aApurExtra)}

		aHeader  := aClone(aHeader14)
		aCols    := aClone(aCols14)
		oGetDad14 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953linExt","AlwaysTrue","",nOpcx!=2,aAlter14,3,,len(aCols14),,,,"a953DelExt",oFolder:aDialogs[nTitExtra])
		oGetDad14:oBrowse:lDisablePaint := .T.
		oGetDad14:oBrowse:bDrawSelect := {|| a953CPOEXT(oGetDad14:oBrowse)}
		oGetDad14:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| EditCelExt(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB,oGetDad14)}
		oGetDad14:oBrowse:bLDblClick := {|| DblExtApur(@oGetDad14,@oGetDad15,@oDlg,@aApurExtra)}
		oGetDad14:aInfo[2][1] := "CDO" //na coluna de Cod Lancamento

		//Adiciona Consulta Padrao na coluna de Cod Lancamento
		oGetDad10:aInfo[5][1] := "SF6AP" //na coluna de GNRE
		If lUsaSped .And. len(aHeader10) == 8
			oGetDad10:aInfo[7][1] := "CDO"
		EndIf
		If lUsaSped .And. lProcRef
			oGetDad10:aInfo[9][1] := "CCFICM" //na coluna de Processo
		EndIf

		//Adiciona Combo Box
		If lUsaSped .And. lProcRef
			oGetDad10:aInfo[10][2] := "0=Sefaz;1=Justiça Federal;2=Justiça Estadual;9=Outros"
			oGetDad10:aInfo[11][2] := "1=Próprio contribuinte;2=Outra entidade ou empresa"
		EndIf

		If lFomentGO
			aHeader  := aClone(aHeader8)
			aCols    := aClone(aCols8)
			oGetDad8 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"AlwaysTrue","AlwaysTrue","",nOpcx!=2,aAlter8,,,len(aCols8),,,,,oFolder:aDialogs[nTitFom])
			oGetDad8:oBrowse:lDisablePaint := .T.
			oGetDad8 :oBrowse:bDrawSelect := {|| a953Cpo8Alt(oGetDad8:oBrowse)}
			oGetDad8:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCelF(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}
		Elseif lApurBA
			//Exportacoes
			aHeader  := aClone(aHeader8)
			aCols    := aClone(aCols8)
			oGetDad8 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953lin5Ok","A953TdOk","",nOpcx!=2,aAlter8,3,,len(aCols8),,,,"a953Del5Col",oFolder:aDialogs[10])
			oGetDad8:oBrowse:lDisablePaint := .T.
			oGetDad8:oBrowse:bDrawSelect := {|| a953Cpo5Alt(oGetDad8:oBrowse)}
			oGetDad8:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}

			//Outras hipoteses
			aHeader  := aClone(aHeader9)
			aCols    := aClone(aCols9)
			oGetDad9 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953lin5Ok","A953TdOk","",nOpcx!=2,aAlter9,3,,len(aCols9),,,,"a953Del5Col",oFolder:aDialogs[11])
			oGetDad9:oBrowse:lDisablePaint := .T.
			oGetDad9:oBrowse:bDrawSelect := {|| a953Cpo5Alt(oGetDad9:oBrowse)}
			oGetDad9:oBrowse:Cargo:={|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}
		EndIf

		If lACredAcu //#vitor01 - Define as posicoes da Getdados a partir do folder
			// Função para monta a aba de credito acumulado
			fMkCredAcu(oFolder:aDialogs[nTitAcum],aNWCredAcu,SubStr(DtoS(dDtIni),1,4) + SubStr(DtoS(dDtIni),5,2),cNrLivro,aCont)
		EndIf

		aHeader  := aClone(aHeader7)
		aCols    := aClone(aCols7)
		oGetDad7 := MSGetDados():New(nGd1,nGd2,58,388,nOpcx,"AlwaysTrue","AlwaysTrue","",nOpcx!=2,aAlter7,,,len(aCols7),,,,"DelColVisual",oFolder:aDialogs[7])

		oFolder:aDialogs[7]:oFont := oDlg:oFont

		@ 62 ,002	TO 170,386 LABEL '' OF oFolder:aDialogs[7] PIXEL

		@ 072, 020 SAY OemToAnsi(STR0059) Of oFolder:aDialogs[7] PIXEL SIZE 80,08  //"Data de Vencimento do Imposto:"
		@ 070, 101 MSGET dDtVenc VALID (dDtVenc>=dDtFim) OF oFolder:aDialogs[7] PIXEL WHEN (nVlrTitulo>0) SIZE 32,08
		@ 089, 020 SAY OemToAnsi(STR0060)Of oFolder:aDialogs[7] PIXEL	SIZE 60,08  //"Org„o Arrecadador      :"
		@ 087, 101 MSGET cOrgArrec PICTURE "@!" OF oFolder:aDialogs[7] PIXEL WHEN (nVlrTitulo>0) SIZE 80 ,9
		@ 112, 020 SAY OemToAnsi(STR0061) Of oFolder:aDialogs[7] PIXEL 	SIZE 80,08  //"Observacoes :"
		@ 117, 070 GET cObserv MEMO OF oFolder:aDialogs[7] PIXEL  SIZE 260,042

		oGetDad7 :oBrowse:lDisablePaint := .T.


		aHeader  := aClone(aHeader6)
		aCols    := aClone(aCols6)
		oGetDad6 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953Lin6Ok","AlwaysTrue","",nOpcx!=2,aAlter6,3,,23,,,,"a953Del6Col",oFolder:aDialogs[6])
		oGetDad6 :oBrowse:lDisablePaint := .T.
		oGetDad6 :oBrowse:bDrawSelect := {|| a953Cpo6Alt(oGetDad6:oBrowse)}
		oGetDad6 :oBrowse:Cargo := {|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCelST(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}
		//oGetDad6:oBrowse:bLDblClick := {|| DetCodLan(1, oGetDad6, aCols6, oDlg, aEstruCDA , nAno ,nMes,lUsaSped)}

		//Adiciona Consulta Padrao
		oGetDad6:aInfo[5][1] := "SF6AP" //na coluna de GNRE
		//Adiciona Consulta Padrao na coluna de Cod Lancamento
		If lUsaSped .And. len(aHeader6) == 8
			oGetDad6:aInfo[7][1] := "CDO" //na coluna de Cod Lancamento
		ElseIf lUsaSped .And. len(aHeader6) == 12 .And. lProcRef
			oGetDad6:aInfo[7][1] := "CDO"
			oGetDad6:aInfo[9][1] := "CCFICM" //na coluna de Processo
		EndIf

		//Adiciona Combo Box
		If lUsaSped .And. len(aHeader5) == 12 .And. lProcRef
			oGetDad6:aInfo[10][2] := "0=Sefaz;1=Justiça Federal;2=Justiça Estadual;9=Outros"
			oGetDad6:aInfo[11][2] := "1=Próprio contribuinte;2=Outra entidade ou empresa"
		EndIf

		aHeader  := aClone(aHeader5)
		aCols    := aClone(aCols5)
		oGetDad5 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"a953lin5Ok","A953TdOk","",nOpcx!=2,aAlter5,3,,len(aCols5),,,,"a953Del5Col",oFolder:aDialogs[5])
		oGetDad5 :oBrowse:lDisablePaint := .T.
		oGetDad5 :oBrowse:bDrawSelect := {|| a953Cpo5Alt(oGetDad5:oBrowse)}
		oGetDad5 :oBrowse:Cargo := {|nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB| MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)}

		//Adiciona Consulta Padrao
		oGetDad5:aInfo[5][1] := "SF6AP" //na coluna de GNRE
		If lUsaSped .And. len(aHeader5) == 8
			oGetDad5:aInfo[7][1] := "CDO" //na coluna de Cod Lancamento
		ElseIf lUsaSped .And. len(aHeader5) == 12 .And. lProcRef
			oGetDad5:aInfo[7][1] := "CDO" //na coluna de Cod Lancamento
			oGetDad5:aInfo[9][1] := "CCFICM" //na coluna de Processo
		EndIf

		//Adiciona Combo Box
		If lUsaSped .And. lProcRef
			oGetDad5:aInfo[10][2] := "0=Sefaz;1=Justiça Federal;2=Justiça Estadual;9=Outros"
			oGetDad5:aInfo[11][2] := "1=Próprio contribuinte;2=Outra entidade ou empresa"
		EndIf

		aHeader  := aClone(aHeader4)
		aCols    := aClone(aCols4)
		oGetDad4 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"AlwaysTrue","AlwaysTrue","",nOpcx!=2,aAlter4,,,len(aCols4),,,,,oFolder:aDialogs[4])
		oGetDad4 :oBrowse:lDisablePaint := .T.

		aHeader  := aClone(aHeader3)
		aCols    := aClone(aCols3)
		oGetDad3 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"A953Lin3Ok","AlwaysTrue","",nOpcx!=2,aAlter3,,,nMaxLAcols3,,,,"a953Del3Col",oFolder:aDialogs[3])
		oGetDad3:oBrowse:bDrawSelect := {|| a953Cpo3Alt(oGetDad3:oBrowse)}
		oGetDad3 :oBrowse:lDisablePaint := .T.
		oGetDad3:aInfo[1][1] := "12" //Consulta padrão de ESTADO

		aHeader  := aClone(aHeader2)
		aCols    := aClone(aCols2)
		oGetDad2 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"AlwaysTrue","AlwaysTrue","",nOpcx!=2,aAlter2,,,len(aCols2),,,,,oFolder:aDialogs[2])
		oGetDad2 :oBrowse:lDisablePaint := .T.

		aHeader  := aClone(aHeader1)
		aCols    := aClone(aCols1)
		oGetDad1 := MSGetDados():New(nGd1,nGd2,nGd3,nGd4,nOpcx,"AlwaysTrue","AlwaysTrue","",nOpcx!=2,aAlter1,,,len(aCols1),,,,,oFolder:aDialogs[1])
		oGetDad1 :oBrowse:lDisablePaint := .T.

		If lFomentGO .Or. lACredAcu //#vitor01 Adiciona Consulta Padrao na coluna de Cod Lancamento
			If lFomentGO .And. lACredAcu
				oFolder:bSetOption:={|nAtu| Ft953Fld(nAtu,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},oGetDad8,oGetDad9,oGetDad10,oGetDad11},aApurDifal,nAno)}
			Else
				oFolder:bSetOption:={|nAtu| Ft953Fld(nAtu,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},Iif(lFomentGO,oGetDad8,oGetDad9),oGetDad10,oGetDad11},aApurDifal,nAno)}
			EndIf
		Elseif lApurBA
			oFolder:bSetOption:={|nAtu| Ft953Fld(nAtu,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},oGetDad8,oGetDad9,oGetDad10,oGetDad11},aApurDifal,nAno)}
			//Adiciona Consulta Padrao na coluna de Cod Lancamento
			If lUsaSped .And. len(aHeader8) == 7
				oGetDad8:aInfo[7][1] := "CDO"
			EndIf
			//Adiciona Consulta Padrao na coluna de Cod Lancamento
			If lUsaSped .And. len(aHeader9) == 7
				oGetDad9:aInfo[7][1] := "CDO"
			EndIf
		Else
			oFolder:bSetOption:={|nAtu| Ft953Fld(nAtu,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},oGetDad10,oGetDad11},aApurDifal,nAno)}
		EndIf

		If ( nOpcx!=2 )
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ao confirmar, simula a mudanca de folder para atualizar os arrays necessarios ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lFomentGO //.Or. lACredAcu

				If lFomentGO .And. lACredAcu //#vitor01 - Ao confirmar, simula a mudanca de folder para atualizar os arrays necessarios
					If !lAutomato
						ACTIVATE MSDIALOG oDlg ON INIT ( Ft953Refre( { oGetDad1, oGetDad2, oGetDad3, oGetDad4, oGetDad5, oGetDad6, oGetDad7, oGetDad8,oGetDad9,oGetDad10,oGetDad11,oGetDad12,oGetDad13,oGetDad14,oGetDad15 } ),;
						EnchoiceBar(oDlg,{||nopca:=If(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},oGetDad8,oGetDad9,oGetDad10,oGetDad11 },aApurDifal,nAno).And.;
									Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad8,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },;
									oFolder:nOption),1,0),If(nOpcA==1,oDlg:End(),Nil)},{||nOpcA:=0,oDlg:End()},,;
									{{"BMPINCLUIR",{|| AddAcols(If(oFolder:nOption==5,oGetDad5,If(oFolder:nOption==6,oGetDad6,If(oFolder:nOption==8,oGetDad8,If(oFolder:nOption==9,oGetDad10,If(oFolder:nOption==12,oGetDad13,Nil))))),Iif(oFolder:nOption==12,.T. ,.F. )) },STR0062,STR0075},;
									 {"BMPVISUAL", {|| ProcLogView()},'Vizualização do LOG de processamento multi-thread',"Log MThread"},;
									 {"BMPVISUAL", {|| A953Legenda()} ,'Legenda','Legenda'},;
									 {"BMPVISUAL", {|| PDetCodLan(oFolder:nOption,oGetDad5, oGetDad6, oGetDad10,oGetDad13, aCols5, aCols6, aCols10, aCols13 ,oDlg, aEstruCDA, nAno ,nMes,lUsaSped, lFomentGO, lApurBa )},'Detalhamento Código de Lançamento',"Detalhamento do Código de Lançamento"}})) //"Inclui Linhas"
					Else
						nOpcA := IIf(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},oGetDad8,oGetDad10,oGetDad11 },aApurDifal,nAno) .And. ;
									Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad8,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },oFolder:nOption),1,0)
					EndIf
				Else
					If !lAutomato
						ACTIVATE MSDIALOG oDlg ON INIT ( Ft953Refre( { oGetDad1, oGetDad2, oGetDad3, oGetDad4, oGetDad5, oGetDad6, oGetDad7, oGetDad8,oGetDad9,oGetDad10,oGetDad11,oGetDad12,oGetDad13,oGetDad14,oGetDad15 } ),;
						EnchoiceBar(oDlg,{||nopca:=If(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},Iif(lFomentGO,oGetDad8,oGetDad9),oGetDad10,oGetDad11 },aApurDifal,nAno).And.;
									Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad8,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },;
									oFolder:nOption),1,0),If(nOpcA==1,oDlg:End(),Nil)},{||nOpcA:=0,oDlg:End()},,;
									{{"BMPINCLUIR",{|| AddAcols(If(oFolder:nOption==5,oGetDad5,If(oFolder:nOption==6,oGetDad6,If(oFolder:nOption==8,oGetDad8,If(oFolder:nOption==9,oGetDad10,If(oFolder:nOption==10,oGetDad13,If(oFolder:nOption==11,oGetDad13,Nil)))))),Iif(oFolder:nOption==11,.T. ,.F. ))},STR0062,STR0075},;
									 {"BMPVISUAL", {|| ProcLogView()},'Vizualização do LOG de processamento multi-thread',"Log MThread"},;
									 {"BMPVISUAL", {|| A953Legenda()} ,'Legenda','Legenda'},;
									 {"BMPVISUAL", {|| ConfApur()},'Conferencia da Apuracao',"Conf. Apuracao ICMS e ICMS-ST"},;
									 {"BMPVISUAL", {|| PDetCodLan(oFolder:nOption,oGetDad5, oGetDad6, oGetDad10,oGetDad13, aCols5, aCols6, aCols10, aCols13 ,oDlg, aEstruCDA, nAno ,nMes,lUsaSped, lFomentGO, lApurBa )},'Detalhamento Código de Lançamento',"Detalhamento do Código de Lançamento"}})) //"Inclui Linhas"
					Else
						nOpcA := IIf(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15},oGetDad8,oGetDad10,oGetDad11 },aApurDifal,nAno) .And. ;
									Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad8,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },oFolder:nOption),1,0)
					EndIf
				EndIf

			Elseif lApurBa
				If !lAutomato
					ACTIVATE MSDIALOG oDlg ON INIT ( Ft953Refre( { oGetDad1, oGetDad2, oGetDad3, oGetDad4, oGetDad5, oGetDad6, oGetDad7, oGetDad8, oGetDad9,oGetDad10,oGetDad11,oGetDad12,oGetDad13,oGetDad14,oGetDad15  } ),;
					EnchoiceBar(oDlg,{||nopca:=If(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15 },oGetDad8,oGetDad9,oGetDad10,oGetDad11},aApurDifal,nAno).And.;
								Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad8,oGetDad9,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },;
								oFolder:nOption),1,0),If(nOpcA==1,oDlg:End(),Nil)},{||nOpcA:=0,oDlg:End()},,{{"BMPINCLUIR",{|| AddAcols(If(oFolder:nOption==5,oGetDad5,If(oFolder:nOption==6,oGetDad6,If(oFolder:nOption==10,oGetDad8,If(oFolder:nOption==11,oGetDad9,If(oFolder:nOption==12,oGetDad10,Nil))))))},STR0062,STR0075},;
								{"BMPVISUAL",{|| ProcLogView()},'Vizualização do LOG de processamento multi-thread',"Log MThread"},{"BMPVISUAL",{|| A953Legenda()} ,'Legenda','Legenda'},;
								{"BMPVISUAL",{|| ConfApur()},'Conferencia da Apuracao',"Conf. Apuracao ICMS e ICMS-ST"},;
								{"BMPVISUAL",{|| PDetCodLan(oFolder:nOption,oGetDad5, oGetDad6, oGetDad10,oGetDad13, aCols5, aCols6, aCols10, aCols13 ,oDlg, aEstruCDA, nAno ,nMes,lUsaSped, lFomentGO, lApurBa,lACredAcu )},'Detalhamento Código de Lançamento',"Detalhamento do Código de Lançamento"}})) //"Inclui Linhas"
				Else
					nOpcA := IIf(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15 },oGetDad8,oGetDad9,oGetDad10,oGetDad11},aApurDifal,nAno) .And. ;
								Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad8,oGetDad9,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },oFolder:nOption),1,0)
				EndIf
			Else
				If !lAutomato
					ACTIVATE MSDIALOG oDlg ON INIT ( Ft953Refre( { oGetDad1, oGetDad2, oGetDad3, oGetDad4, oGetDad5, oGetDad6, oGetDad7,oGetDad8,oGetDad9,oGetDad10,oGetDad11,oGetDad12,oGetDad13,oGetDad14,oGetDad15 } ),;
					EnchoiceBar(oDlg,{||nopca:=If(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15 },oGetDad10,oGetDad11},aApurDifal,nAno).And.;
								Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },;
								oFolder:nOption),1,0),If(nOpcA==1,oDlg:End(),Nil)},{||nOpcA:=0,oDlg:End()},,{{"BMPINCLUIR",{|| AddAcols(If(oFolder:nOption==5,oGetDad5,If(oFolder:nOption==6,oGetDad6,If(oFolder:nOption==10,oGetDad10,If(oFolder:nOption==8,oGetDad13,Iif(oFolder:nOption==9,oGetDad15,nil))))),Iif(oFolder:nOption==9,.T. ,.F. ))},STR0062,STR0075},;
								{"BMPVISUAL",{|| ProcLogView()},'Vizualização do LOG de processamento multi-thread',"Log MThread"},    {"BMPVISUAL",{|| A953Legenda()} ,'Legenda','Legenda'} ,;
								{"BMPVISUAL",{|| ConfApur()},'Conferencia da Apuracao',"Conf. Apuracao ICMS e ICMS-ST"},;
								{"BMPVISUAL",{|| PDetCodLan(oFolder:nOption,oGetDad5, oGetDad6, oGetDad10,oGetDad13, aCols5, aCols6, aCols10, aCols13 ,oDlg, aEstruCDA, nAno ,nMes,lUsaSped, lFomentGO, lApurBa,lACredAcu )},'Detalhamento Código de Lançamento',"Detalhamento do Código de Lançamento"}})) //"Inclui Linhas"
				Else
					nOpcA := IIf(Ft953Fld(oFolder:nOption,oFolder:nOption,oFolder,{oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,{oGetDad12,oGetDad13},{oGetDad14,oGetDad15 },oGetDad10,oGetDad11},aApurDifal,nAno) .And. ;
								Ft953Ok({oGetDad1,oGetDad2,oGetDad3,oGetDad4,oGetDad5,oGetDad6,oGetDad7,oGetDad10,oGetDad12,oGetDad13,oGetDad14,oGetDad15 },oFolder:nOption),1,0)
				EndIf
			EndIf
		EndIf
	Else
		nOpcx := 4
		nOpcA := 1
		aCols := {}
	EndIf
	If ( nOpcx!=2 )
		If ( nOpcA == 1 )
			If aExistBloc[PE_A953CONT]
				aApuICM:= FisApur(cImp,nAno,nMes,nApuracao,nPeriodo,cNrLivro,.F.,aApuICM,nMoedTit,.F.,"")
				Execblock("A953CONT",.F.,.F.,aApuICM)
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        	//³ Apaga arquivo de apuracao        ³
		    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IiF(File(cArqApur),Ferase(cArqApur),.F.)
			cArqST := substr(cArqApur,1,Len(cArqApur)-3)+"ST"+substr(cArqApur,Len(cArqApur),1)
			IiF(File(cArqST),Ferase(cArqST),.F.)

			//Adiciono no array de Apuracao do ICMS os valores de debitos especiais. Codigo 900/901 e subitem 900.??/901.??
			For nXX := 1 To Len(aCOLS10)
				If aCOLS10[nXX,1]=="900"
					Aadd(aCOLS5,aCOLS10[nXX])
				ElseIf aCOLS10[nXX,1]=="901"		
					Aadd(aCOLS6,aCOLS10[nXX])
				EndIf
			Next nXX

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Gera as guias de recolhimento do ICMS ST, da seguinte forma:											  ³
			//³Para o estado do contribuinte: Saidas - Entradas (apurado)											  ³
			//³Para outros estados: Apenas saidas (Ler Explicacao Abaixo)   									      ³
			//³(conforme consulta IOB em 01/11/2006)                      											  ³
			//³																										  ³
			//³De acordo com informacao acima nao deveria ser realizada geracao de GNRE de ICMS ST com valor          ³
			//³apurado (Saidas - Entradas) nos casos de operacoes interestaduais, deveria apenas considerar o         ³
			//³valor da saida, porem na data de 20/10/2011 foi realizada nova analise e constatado que a GNRE deve ser³
			//³gerada com o valor apurado(Saidas - Entradas).														  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ



			// Entradas com ST
			For nX := 1 To Len(aCols3)
				If !Empty(aCols3[nX][1]) .And. aCols3[nX][3]+aCols3[nX][5] > 0
					nY := aScan(aGNRESt,{|x| x[1] == aCols3[nX][1]})
					If nY == 0
						Aadd(aGNRESt,{aCols3[nX][1],0,.F., .F.,0})
						nY := Len(aGNRESt)
					EndIf
					aGNRESt[nY,2] -= aCols3[nX][3]+aCols3[nX][5]
					nVlrTotAnt += aCols3[nX][3]+aCols3[nX][5]
				EndIf
				//Tratamento para nota de entrada com debito de ICMS-ST. Tratamento para todos os estados, como na saida.
				If !Empty(aCols3[nX][1]) .And. aCols3[nX][4] > 0
					If (cMv_Estado $"PE|MG" .Or. cMVDestent) .And. aCols3[nX][1] == cMv_Estado
						Loop
					EndIf
					If alltrim(cMv_Estado) <> aCols3[nX][1]
						Loop
					EndIf
					nY := aScan(aGNRESt,{|x| x[1] == aCols3[nX][1]})
					If nY == 0
						Aadd(aGNRESt,{aCols3[nX][1],0,.F., .F.,0})
						nY := Len(aGNRESt)
					EndIf
					aGNRESt[nY,2] += aCols3[nX][4]
					lstUfgnre := .F.
				EndIf
				//Devolucoes de vendas - credita no saldo ST
				If !Empty(aCols3[nX][1]) .And. Valtype(aCOLS3[nX,6]) == "N" .And. aCols3[nX][6] > 0
					nY := aScan(aGNRESt,{|x| x[1] == aCols3[nX][1]})
					If nY == 0
						Aadd(aGNRESt,{aCols3[nX][1],0,.F.,.F.,0})
						nY := Len(aGNRESt)
					EndIf
					aGNRESt[nY,2] -= aCols3[nX][6]
					aGNRESt[nY,5] -= aCols3[nX][8]
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Este tratamento eh utilizado para subtrair o valor de debito de ST dos documentos de  ³
				//³  entrada que tiveram a configuacao para gerar um imposto debitado(CREDST=3).         ³
				//³  Alem disso, tambem tiveram um lancamento de debito especial configurado, gerando    ³
				//³  entao na apuracao de ICMS/ST um valor a pagar em ST-Entrada e outro tambem          ³
				//³  em Debitos Especiais.                                                               ³
				//³                                                                                      ³
				//³Sem este tratamento, seria gerado 2 GNREs, uma para o debito de ST-Entrada e outro    ³
				//³  para o Debito Especial. Este tratamento visa contemplar somente o valor referente ao³
				//³  lancamento de debitos especiais.                                                    ³
				//³                                                                                      ³
				//|SubStr(aX[3],4,1)=="1"  -->  A quarta opcao igual a "1" Indica que se refere a um     |
				//|  lancamento de debito especial de ST                                                 |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !Empty(aGNRESt)
				aEval(aRetEsp,{|aX| aGNRESt[nY,2] -= Iif(aX[3]==aCols3[nX][1] .And. SubStr(aX[3],4,1)=="1",aX[2],0)})
				EndIf
			Next nX
			// Saidas com ST para todos os estados
			For nX := 1 To Len(aCols4)
				If !Empty(aCols4[nX][1]) .And. aCols4[nX][3] > 0
					nY := aScan(aGNRESt,{|x| x[1] == aCols4[nX][1]})
					If nY == 0
						Aadd(aGNRESt,{aCols4[nX][1],0,.F., .F.,0})
						nY := Len(aGNRESt)
					EndIf
					nPos := aScan(aRecStDif,{|y| y[2] == aGNREST[nY][01]}) //Verifica se é o mesmo estado
					If (nPos <> 0) .And. aRecStDif[nPos][3]>0
						aGNRESt[nY,2] += (aCols4[nX][3] - aRecStDif[nPos][3])
						Aadd(aGNRESt,{aCols4[nX][1],aRecStDif[nPos][3],.F., .T.,0})
					Else
						aGNRESt[nY,2] += aCols4[nX][3]
						aGNRESt[nY,5] += aCols4[nX][04]
					EndIf
				EndIf
			Next nX
			// Contabilizando outros creditos e outros debitos.
			// A verificacao sera feita da seguinte forma:
			// Sera verificado os dois primeiros digitos do sub-codigo de outros creditos e outros debitos.
			// Se no array aGNRESt eu ja tiver o estado informado irei considerar os outros deb/cred para o titulo
			// mas se nao tiver o estado informado irei considerar para o titulo do MV_ESTADO do contribuinte.
			For nX := 1 To Len(aCols6)

				If alltrim(aCols6[nX,5]) <> '901' .And. Empty(aCols6[nX,5]) .And. !Empty(aCols6[ nX , 7 ]) .And. lCdoSepar .And. ChkGnreSep(Alltrim(aCols6[ nX , 7 ]))
					lPadrao := .T.
					if lGdebesp
						aParam := {aCols6[nX][2],aCols6[nX][3],aCols6[nX][4],aCols6[nX][7]}
						aGuias := ExecBlock("GDEBESP", .F., .F.,aParam)
						if ValType(aGuias) == "A" .and. Len(aGuias) <> 0
							for nG := 1 to Len(aGuias)
								Aadd(aGnreSepST,{ aGuias[ nG , 1 ], aGuias[ nG , 2 ]})
							next
							lPadrao := .F.
						EndIF
					EndIF
					if lPadrao
						//Geração de guias separadas
						nGnreSepar	:= aScan(aGnreSepST,{|aX| aX[1] == Alltrim(aCols6[ nX , 7 ]) })
						If nGnreSepar == 0
							Aadd(aGnreSepST,{ Alltrim(aCols6[ nX , 7 ]), aCols6[ nX , 4 ]})
						Else
							aGnreSepST[nGnreSepar][2] += aCols6[ nX , 4 ]
						EndIf
					EndIF

				EndIf

				If aCols6[nX][1] == "002" .And. aCols6[nX][2] <> "002.00" //Outros debitos
					cUfAjSt := IIF(lUsaSped,Substr(aCols6[nX][7],1,2),Substr(aCols6[nX][3],1,2))
					nY := aScan(aGNRESt,{|x| x[1] == cUfAjSt})
					nY := Iif(nY == 0,aScan(aCols6,{|x| x[1] == cMv_Estado}),nY)
					If nY <> 0 .And. aCols6[nX,4] > 0 .And. lstUfgnre
						aGNRESt[nY,2] += aCols6[nX,4]
					ElseIf aCols6[nX,4] > 0 .And. lstUfgnre
						nZ := aScan(aGNRESt,{|x| x[1] == cUfAjSt })
						If !( cUfAjSt $ cMV_Esticm)
							nZ := Iif(nZ == 0,aScan(aGNRESt,{|x| x[1] == cMv_Estado}),nZ)
						EndIf
						If nZ <> 0
							aGNRESt[nZ,2] += aCols6[nX,4]
						Else
							nK := Len(aGNRESt) + 1
							Aadd(aGNRESt,{Iif( cUfAjSt $ cMV_Esticm , cUfAjSt ,cMv_Estado),0,.F., .F.,0})
							aGNRESt[nK,2] += aCols6[nX,4]
						EndIf
					EndIf
				ElseIf aCols6[nX][1] == "007" .And. aCols6[nX][2] <> "007.00" //Outros creditos
					cUfAjSt := IIF(lUsaSped,Substr(aCols6[nX][7],1,2),Substr(aCols6[nX][3],1,2))
					nY := aScan(aGNRESt,{|x| x[1] == cUfAjSt})
					nY := Iif(nY == 0,aScan(aGNRESt,{|x| x[1] == cMv_Estado}),nY)
					If nY <> 0 .And. aCols6[nX,4] > 0
						aGNRESt[nY,2] -= aCols6[nX,4]
					EndIf
				ElseIf aCols6[nX][1] == "003" .And. aCols6[nX][2] <> "003.00" //Estorno de creditos
					cUfAjSt := IIF(lUsaSped,Substr(aCols6[nX][7],1,2),Substr(aCols6[nX][3],1,2))
					nY := aScan(aGNRESt,{|x| x[1] == cUfAjSt})
					nY := Iif(nY == 0,aScan(aGNRESt,{|x| x[1] == cMv_Estado}),nY)
					If nY <> 0 .And. aCols6[nX,4] > 0
						aGNRESt[nY,2] += aCols6[nX,4]
					EndIf
				ElseIf aCols6[nX][1] == "008" .And. aCols6[nX][2] <> "008.00" //Estorno de debitos
					cUfAjSt := IIF(lUsaSped,Substr(aCols6[nX][7],1,2),Substr(aCols6[nX][3],1,2))
					nY := aScan(aGNRESt,{|x| x[1] == cUfAjSt})
					nY := Iif(nY == 0,aScan(aGNRESt,{|x| x[1] == cMv_Estado}),nY)
					If nY <> 0 .And. aCols6[nX,4] > 0
						aGNRESt[nY,2] -= aCols6[nX,4]
					EndIf
				ElseIf aCols6[nX][1] == "014" .And. aCols6[nX][2] <> "014.00" //Deducoes
					cUfAjSt := IIF(lUsaSped,Substr(aCols6[nX][7],1,2),Substr(aCols6[nX][3],1,2))
					nY := aScan(aGNRESt,{|x| x[1] == cUfAjSt})
					nY := Iif(nY == 0,aScan(aGNRESt,{|x| x[1] == cMv_Estado}),nY)
					If nY <> 0 .And. aCols6[nX,4] > 0 .And. !('FECP'$aCols6[nX,3])
						aGNRESt[nY,2] -= aCols6[nX,4]
					EndIf
				EndIf
				If !Empty(aCOLS6[nX,5]) .And. AllTrim(aCols6[nX,1])<>"007" .And. AllTrim(aCols6[nX,1])<>"008" .And. AllTrim(aCols6[nX,1])<>"014"
					cUfAjSt := IIF(lUsaSped,Substr(aCols6[nX][7],1,2),Substr(aCols6[nX][3],1,2))
					nY := aScan(aGNRESt,{|x| x[1] == cUfAjSt})
					nY := Iif(nY == 0,aScan(aGNRESt,{|x| x[1] == cMv_Estado}),nY)
					If nY <> 0 .And. aCols6[nX,4] > 0
						aGNRESt[nY,2]	-= aCols6[nX,4]
					EndIf
				EndIf
				/*
				//Esse trecho foi comentado pois o valor de aGNRESt[nY,2] já está correto quando chega nesse ponto.
				//Portanto qualquer cálculo feito aqui irá gravar valores incorretos no arquivo .ST0.

				If aCols6[nX][1] == "011" .And. aCols6[nX][2] <> "011.00" //Creditos Periodo Anterior
					nY := aScan(aGNRESt,{|x| x[1] == cMv_Estado})
					If nY <> 0 .And. aCols6[nX,4] > 0 .And. aCols6[nX,4] <> nVlrTotAnt
						aGNRESt[nY,2]	-= aCols6[nX,4]-nVlrTotAnt
					EndIf
				EndIf
				*/
			Next nX

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Abate do valor a recolher o valor das guias ja pagas (amarracao CDC)|
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			For nX := 1 to len(aIcmPago)
				If (nY := aScan(aGNRESt,{|x| x[1] == aIcmPago[nX][1]})) > 0
					aGNRESt[nY,2] -= aIcmPago[nX][2]
				EndIf
			Next
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inicializa a geraçao de lancamentos do SIGAPCO      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PcoIniLan('000250')
			Begin Transaction
				nPosRecPR	:= Ascan(aCols5,{|x|x[1]=="013"}) //imposto a recolher
				nPosFECP	:= Ascan(aCols5,{|x|x[1]=="012"}) //FECP a recolher
				nPosRecST	:=	Ascan(aCols6,{|x|x[1]=="015"}) //imposto a recolher Substituicao Tributaria
				nPosFECPST	:=	Ascan(aCols6,{|x|x[1]=="014"}) //FECP a recolher Substituicao Tributaria
                If cMv_Estado == "MG"
                    nPosFECPMG:=  Ascan(aCols5,{|x|x[1]=="012"}) //FECP a recolher
                    nPosFESTMG:=  Ascan(aCols6,{|x|x[1]=="014"}) //FECP a recolher Substituicao Tributaria
                    nPosFCPMG:=  Ascan(aCols5,{|x|x[1]=="007"}) //FECP a recolher, referente ao FEM
                EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Visando Atender a FNC:27052/2011 foi incluido tratamento para que o valor ³
				//³do ICMS COMPLEMENTAR seja deduzido do valor apurado de ICMS PROPRIO       ³
				//³na geracao da GNRE quando o parametro MV_DCOMPRO = .T.                    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                If lMvDComPro
	                nPosDifAliq := Ascan(aCols7,{|x|x[1]=="016"})//ICMS COMPLEMENTAR - Diferencial de Aliquota
					nVlrTitulo	:= (aCols5[nPosRecPR,4] - aCols7[nPosDifAliq][3])
				Else
					nVlrTitulo	:= aCols5[nPosRecPR,4]
					nVlrTitST	:= aCols6[nPosRecST,4]
				EndIf

				nPosDeb		:= Ascan(aCols5,{|x|x[1]=="900"}) // Debitos Especiais ICMS proprio
				nPosDebSt   := Ascan(aCols6,{|x|x[1]=="901"}) // Debitos Especiais ST

		        For nNum :=1 to Len(aCOLS5)
					If Empty(aCOLS5[nNum,5]) .And. nNum < nPosDeb .And. !Empty(aCols5[ nNum , 7 ]) .And. lCdoSepar .And. ChkGnreSep(Alltrim(aCols5[ nNum , 7 ]))

						//Geração de guias separadas
						nGnreSepar	:= aScan(aGnreSepar,{|aX| aX[1] == Alltrim(aCols5[ nNum , 7 ]) })
						If nGnreSepar == 0
							Aadd(aGnreSepar,{ Alltrim(aCols5[ nNum , 7 ]), aCols5[ nNum , 4 ]})
						Else
							aGnreSepar[nGnreSepar][2] += aCols5[ nNum , 4 ]
						EndIf
						nVlrTitulo			-=aCols5[nNum,4]

					//Somente considero os registros que tem o nr da GNRE preenchido e que nao estejam em OUTROS CREDITOS, ESTORNO DE DEBITO e DEBITOS ESPECIAIS
					ElseIf !Empty(aCOLS5[nNum,5]) .And. AllTrim(aCols5[nNum,1])<>"006" .And. AllTrim(aCols5[nNum,1])<>"007" .And. AllTrim(aCols5[nNum,1])<>"012"  .And. AllTrim(aCols5[nNum,1])<>"900" .And. AllTrim(aCols5[nNum,1])<>"901"
						nVlrTitulo			-=aCols5[nNum,4]
						//aCols5[nPosRecPR,4]	-=aCols5[nNum,4] //tratar aqui a guia separada do ICMS próprio erick
					EndIf
                Next

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Efetua Lancamento Contabil LP 712 Apuracao ICMS Saldo Credor ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lContab
					VALOR  := aCols5[ Ascan(aCols5,{|x|x[1]=="004"}) ,04]
					VALOR2 := aCols5[ Ascan(aCols5,{|x|x[1]=="010"}) ,04]
					LancCont("712","MATA953",lContab)
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Armazena vencimento e orgao arrecadador do imposto           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nValGuiaSf6	:=	nVlrTitulo

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Efetua consistencia de Guias selecionadas					 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aGNRE := VerificaGNRE()

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³PE caso haja necessidade de se parametrizar a gravação dos titulos (SE2) e GNREs gerados atraves da Apuracao de ICMS.³
				//³  O PE deve substituir a gravacao padrao.                                                                            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lApPadrao := .T.
				If aExistBloc[PE_MT953TIT] .And. !lGTitFluig
					aGNRSTAnt := aGNREST
                	aRet := ExecBlock ("MT953TIT", .F., .F., {lTitulo, cImposto, cImp, cLcPadTit, dDtIni, dDtFim, dDtVenc, nMoedTit, lGuiaRec, nMes, nAno, lContab, aGNRESt, cMVSIGNRE, cProdec, cOrgArrec, nValGuiaSf6})
                	If ValType (aRet)=="A" .And. Len (aRet)>=6 .And.;
                		ValType (aRet[1])=="C" .And.;
                		ValType (aRet[2])=="A" .And.;
                		ValType (aRet[3])=="A" .And.;
                		ValType (aRet[4])=="A" .And.;
                		ValType (aRet[5])=="L" .And.;
                		ValType (aRet[6])=="C"
	                	cNumero		:=	aRet[1]
	                	aGNRE		:=	aRet[2]
	                	aGNREST		:=	aRet[3]
	                	aTitulo		:=	aRet[4]
	                	lInfComp	:=	aRet[5]
	                	cNumero2	:=	aRet[6]
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Array com os dados dos titulos gerados, para gravação no CDH                                                  ³
						//³deve estar no seguinte formato: {E2_PREFIXO,E2_NUM,E2_PARCELA,E2_TIPO,E2_FORNECE,E2_LOJA,"IC" ou "ST","Descr"}³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	                	If Len (aRet)==7 .And. ValType (aRet[7])=="A"
	                		aTitCDH	:=	aRet[7]
	                	EndIf
	                	lApPadrao	:=	.F.
	                Else	//Se o PE NAO retornar as informacoes necessarias, processo pelo PADRAO
           	     		cNumero		:=	Space(TamSx3("F6_NUMERO")[1])
	                	aGNRE		:=	{}
	                	aGNREST		:=	aGNRSTAnt
	                	aTitulo		:=	{}
	                	lInfComp	:=	.F.
	                	cNumero2	:=	Space(TamSx3("F6_NUMERO")[1])
	                	lApPadrao	:=	.T.
	                EndIf
	            EndIf	//Fim do tratamento para o PE MT953TIT
				If lApPadrao
					nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "ICMS"$aX[8] .And. !"COMPLEMENTAR"$Upper(aX[8])})
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo do ICMS Normal³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					nRecTit := Len(aRecTit)
					lConfTit:= .F.
																					//5												//10									//15
					nSolicFlg := 	FGerTit(lTitulo,nVlrTitulo,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno, nValGuiaSf6,0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,,;
										Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,,,,,,,,,,,,,,,,lAutomato,aRetAuto,)
																																	//46
					If nRecTit <> Len(aRecTit)
						aRecTit[Len(aRecTit)][02] := STR0100 //"Apuração do ICMS - ICMS Normal"
						If lUsaSped
							dbSelectArea("SE2")
							MsGoto(aRecTit[Len(aRecTit)][01])
							Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0100})
						EndIf
					Else
						//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
						If lGTitFluig
							Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0100, nSolicFlg } )
						EndIf
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Gera os lancamentos do SIGAPCO                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					PcoDetLan('000250','01','MATA953')

					If lTitulo .And. nVlrTitulo>0 .And. lConfTit
						Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVlrTitulo})
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo de Adicional relativo ao FECP                ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					nVlrFECP	:=	0
					If cMv_Estado$"RJ|BA" .And. aCols5[nPosFECP,4]>0
						For nIx := nPosFECP To Len(aCols5)
							//Gero neste momento somente quando o numero da GNRE nao for informado, caso seja, serah gerado mais abaixo.
							//Desconsidera as linhas de debitos especiais "900" - P9AUTOTEXT.RJ - para que o valor do FECP nao seja somado 2x.
							If "FECP"$aCols5[nIx,3] .And.  Empty(aCols5[nIx,5]) .And. !"900"$aCols5[nIx,1]
								nVlrFECP	+=	aCols5[nIx,4]
							EndIf
						Next nIx
					EndIf

					If cMv_Estado$"RJ|BA" .And. nVlrFECP>0
						nRecTit := Len(aRecTit)
						lConfTit:= .F.
						nSolicFlg := FGerTit(lTitulo,nVlrFECP,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,nVlrFECP,0,"MATA953",lContab,@cNumero,@aGNRE,,,,,.T.,,,;
												@aRecTit,@lConfTit,,,,"RFECP",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

						If nRecTit <> Len(aRecTit)
							aRecTit[Len(aRecTit)][02] := STR0101 //"Apuração do ICMS - Adicional FECP"
							If lUsaSped
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0101})
							EndIf
						Else
							//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
							If lGTitFluig
								Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0101, nSolicFlg } )
							EndIf
						EndIf
						If lTitulo .And. nVlrFECP>0 .And. lConfTit
							Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVlrFECP})
						EndIf
					EndIf

					//----------------------------------------------
					//Chama gravatit para guias separadas de ICMS Próprio
					//----------------------------------------------
					GnreSepar(aGnreSepar,@aRecTit,@aGNREX,lTitulo,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,lContab,@aGNRE,lAutomato,@aRetAuto,lUsaSped,@aTitCDH,@aTitulo,"RECIC","IC")
					aGnreSepar	:= {}

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo de Adicional relativo ao FECOP-RN            ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cMv_Estado=="RN"
						nVFcRN5410 := 0
						nVFcRN5415 := 0
						nVFcRN5420 := 0
						If aCols7[32,3]>0//FECOP operação direta consumo
							nVFcRN5410 += aCols7[32,3]
							nRecTit := Len(aRecTit)
							lConfTit:= .F.
							nPsGNR5410	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "ICMS"$aX[8] .And. "RFECP"$Upper(aX[7])})

							nSolicFlg := 	FGerTit(lTitulo,nVFcRN5410,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,nVFcRN5410,;
										0,"MATA953",lContab,@cNumero,@aGNRE,,,,,.T.,,Iif(nPsGNR5410>0,aGNREX[nPsGNR5410,1],Nil),@aRecTit,@lConfTit,,,,"RFECP",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := STR0254 //"FECOP-Operação Direta
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0254})
								EndIf
							Else
								//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
								If lGTitFluig
									Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0254, nSolicFlg } )
								EndIf
							EndIf
							If lTitulo .And. nVFcRN5410>0 .And. lConfTit
								Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVFcRN5410})
							EndIf
						EndIf
						If aCols7[33,3]>0//FECOP operação interna ST
							nVFcRN5415 += aCols7[33,3]
							nRecTit := Len(aRecTit)
							lConfTit:= .F.
							nPsGNR5415	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "ICMS"$aX[8] .And. nVFcRN5415==aX[3] .And. "RFECPST"$Upper(aX[7])})

							nSolicFlg := FGerTit(lTitulo,nVFcRN5415,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,nVFcRN5415,"MATA953",lContab,@cNumero,@aGNRE,,,,,;
							.T.,,Iif(nPsGNR5415>0,aGNREX[nPsGNR5415,1],Nil),@aRecTit,@lConfTit,,,,"RFECPST",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := STR0255 //"FECOP-Operação Interna ST
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"ST",STR0255})
								EndIf
							Else
								//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
								If lGTitFluig
									Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "ST", STR0255, nSolicFlg } )
								EndIf
							EndIf
							If lTitulo .And. nVFcRN5415>0 .And. lConfTit
								Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVFcRN5415})
							EndIf
						EndIf
						If aCols7[34,3]>0//FECOP operação interestadual ST
							nVFcRN5420 += aCols7[34,3]
							nRecTit := Len(aRecTit)
							lConfTit:= .F.
							nPsGNR5420	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "ICMS"$aX[8] .And. nVFcRN5420==aX[3] .And. "RFECPST"$Upper(aX[7])})
							nSolicFlg := FGerTit(lTitulo,nVFcRN5420,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,;
										nVFcRN5420,"MATA953",lContab,@cNumero,@aGNRE,,,,,.T.,,Iif(nPsGNR5420>0,aGNREX[nPsGNR5420,1],Nil),@aRecTit,@lConfTit,,,,"RFECPST",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := STR0257 //"FECOP-Operação Interestadual ST
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"ST",STR0257})
								EndIf
							Else
								//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
								If lGTitFluig
									Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "ST", STR0257, nSolicFlg } )
								EndIf
							EndIf
							If lTitulo .And. nVFcRN5420>0 .And. lConfTit
								Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVFcRN5420})
							EndIf
						EndIf
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo de Adicional relativo ao FECP-MG³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cMv_Estado=="MG"
						nVFcMG   := 0
						nVFcMGST := 0
						If aCols5[nPosFECPMG,4]>0
							For nIx := nPosFECPMG To Len(aCols5)
								If "012.01"==Alltrim(aCols5[nIx,2]) .And. "FECP"$Alltrim(aCols5[nIx,3]) .And. Empty(aCols5[nIx,5]) .And. !"900"$aCols5[nIx,2]	//Gero neste momento, somente quando o numero da GNRE nao for informado, caso seja, serah gerado mais abaixo.
									nVFcMG	+=	aCols5[nIx,4]
								EndIf
							Next nIx
						EndIf
						If aCols5[nPosFCPMG,4]>0
							For nIx := nPosFCPMG To Len(aCols5)
								If "007" $ Alltrim(aCols5[nIx,1]) .And. "MG20000018"$Alltrim(aCols5[nIx,7]) .And. Empty(aCols5[nIx,5]) .And. !"900"$aCols5[nIx,2]	//Gero neste momento, somente quando o numero da GNRE nao for informado, caso seja, serah gerado mais abaixo.
									nVFcMG	+=	aCols5[nIx,4]
								EndIf
							Next nIx
						EndIf
						If aCols7[35,3]>0 .And. nVFcMG > 0 //FECP ICMS próprio
							nRecTit := Len(aRecTit)
							lConfTit:= .F.
							nPsGNRMG	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "ICMS"$aX[8] .And. "RFECP"$Upper(aX[7])})

							nSolicFlg := FGerTit(lTitulo,nVFcMG,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,;
										dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,nVFcMG,;
										0,"MATA953",lContab,@cNumero,@aGNRE,,,,,.T.,,Iif(nPsGNRMG>0,aGNREX[nPsGNRMG,1],Nil),@aRecTit,@lConfTit,,,,"RFECP",,,,,,,,,,,,,,,lAutomato,aRetAuto,)
							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := STR0258 //"FECP/MG-ICMS próprio
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0258})
								EndIf
							Else
								//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
								If lGTitFluig
									Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0258, nSolicFlg } )
								EndIf
							EndIf
							If lTitulo .And. nVFcMG > 0 .And. lConfTit
								Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVFcMG})
							EndIf
						EndIf
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo do FECP-MT³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cMv_Estado=="MT"
						nVFcMT := 0
						If aCols7[38,3]>0
							nVFcMT += aCols7[38,3]
							nRecTit := Len(aRecTit)
							lConfTit:= .F.
							nPsGNRMT	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "ICMS"$aX[8] .And. "RFECP"$Upper(aX[7])})

							nSolicFlg := FGerTit(lTitulo,nVFcMT,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,nVFcMT,;
										0,"MATA953",lContab,@cNumero,@aGNRE,,,,,.T.,,Iif(nPsGNRMT>0,aGNREX[nPsGNRMT,1],Nil),@aRecTit,@lConfTit,,,,"RFECP",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := STR0261
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0258})
								EndIf

							Else
								//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
								If lGTitFluig
									Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0258, nSolicFlg } )
								EndIf
							EndIf
							If lTitulo .And. nVFcMT > 0 .And. lConfTit
								Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVFcMT})
							EndIf
						EndIf
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo do PROTEGE - GO³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cMv_Estado=="GO" .And. lGnrePrtge
						nProtege := 0
						If aCols7[41,3]>0
							nProtege += aCols7[41,3]
							nRecTit := Len(aRecTit)
							lConfTit:= .F.

							nSolicFlg := FGerTit(lGnrePrtge,nProtege,cImposto,"PR",cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGnrePrtge,nMes,nAno,nProtege,;
									0,"MATA953",lContab,@cNumero,@aGNRE,,,,,.F.,,,@aRecTit,@lConfTit,,,,"",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := STR0270
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0270})
								EndIf
							Else
								//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
								If lGTitFluig
									Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0102, nSolicFlg } )
								EndIf
							EndIf
							If lGnrePrtge .And. nProtege > 0 .And. lConfTit
								Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nProtege})
							EndIf
						EndIf
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo do FEEF     	³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					nFeef := 0
					If aCols7[42,3]>0
						nFeef += aCols7[42,3]
						nRecTit := Len(aRecTit)
						lConfTit:= .F.

						nSolicFlg := FGerTit(lTitulo,nFeef,cImposto,"FEEF",cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,.F.,nMes,nAno,nFeef,;
								0,"MATA953",lContab,@cNumero,@aGNRE,,,,,.F.,,,@aRecTit,@lConfTit,,,,"",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

						If nRecTit <> Len(aRecTit)
							aRecTit[Len(aRecTit)][02] := STR0270
							If lUsaSped
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",'Fundo Estadual de Equilíbrio Fiscal - FEEF'})
							EndIf
						Else
							//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
							If lGTitFluig
								Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0102, nSolicFlg } )
							EndIf
						EndIf
						If nFeef > 0 .And. lConfTit
							Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nFeef})
						EndIf
					EndIf



					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava o titulo de Diferencial de Aliquotas (RJ/MG/DF)       ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					// Para o DF Art. 74 do RICMS DF
					If lIcmCompl .And. aCols7[2,3] > 0
						nRecTit := Len(aRecTit)
						lConfTit:= .F.

						nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "COMPLEMENTAR"$Upper(aX[8])})

						nSolicFlg := FGerTit(lTitulo,aCols7[2,3],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno, aCols7[2,3],;
									0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,.T.,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,"RICDIF",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

						If nRecTit <> Len(aRecTit)
							aRecTit[Len(aRecTit)][02] := STR0102 //"Apuração do ICMS - ICMS Complementar"
							If lUsaSped
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0102})
							EndIf
						Else
							//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
							If lGTitFluig
								Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0102, nSolicFlg } )
							EndIf
						EndIf
						If lTitulo .And. aCols7[2,3]>0 .And. lConfTit
							lInfComp := .T.
							Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aCols7[2,3]})
						EndIf
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gera o titulo a pagar referente ao ICMS Complementar             ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lIcmCompl .And. cMv_Estado$"RJ|BA" .And. aCols7[28,3] > 0
						nRecTit := Len(aRecTit)
						lConfTit:= .F.

						nSolicFlg := FGerTit(lTitulo,aCols7[28,3],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,	dDtVenc,nMoedTit,lGuiaRec,nMes,nAno, aCols7[28,3],;
									0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,.T.,,@aRecTit,@lConfTit,,,,"RICDIFRJ",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

						If nRecTit <> Len(aRecTit)
							aRecTit[Len(aRecTit)][02] := STR0244 //"FECP Complementar(Cod Receita 750-1)"
							If lUsaSped
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0102})
							EndIf
						Else
							//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
							If lGTitFluig
								Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0102, nSolicFlg } )
							EndIf
						EndIf
						If lTitulo .And. aCols7[28,3]>0 .And. lConfTit
							lInfComp := .T.
							Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aCols7[28,3]})
						EndIf
					EndIf

					If lCon13906 .And. lGnreC139
						For nNum := 1 to Len (aCols11)
							nRecTit := Len(aRecTit)
							If Len(Alltrim(aCols11[nNum,1])) == 2
								nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. 'CONVÊNIO 139/06'$Upper(aX[8])})
								nSolicFlg := FGerTit(lGnreC139,aCols11[nNum,4],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit, Iif(Alltrim(aCols11[nNum,1]) $ cMV139GNUF,.F.,.T.),nMes,nAno,0,;
								0,"MATA953",lContab,@cNumero,@aGNRE,,@aGNREST,aCols11[nNum,1],,,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,'CONV139',,,,aCols11[nNum,4],,,,,,,,,,,lAutomato,aRetAuto,)

							EndIf
							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := 'CONVENIO 139/06' //"FECP Complementar(Cod Receita 750-1)"
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0102})
								EndIf
							EndIf

						Next nNum
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gera o titulo  e Guia ICMS Proprio e ST  dos Codigos de Ajuste gerados cadastrados no  Configurador  na rotina FISA181³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					GerGuiTit()
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Grava os titulos de Substituicao Tributaria para os estados com valor de imposto retido na operacao³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					For nNum := 1 to Len(aGNREST)
						nRecTit := Len(aRecTit)
						lConfTit:= .F.
						lFECPsep:= aGNRESt[nNum][05] > 0

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Se existir Deb. Especial e Debitar Substituicao Tributaria, nao gera GNRE³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						nVlrDebSt := 0
						//Nao eh necessario realizar esta deducao pois ja foram feitas anteriormente
						If !cMv_Estado $ cMVUFICDED
							If  aCols6[nPosDebSt,4]>0
								For nIx := nPosDebSt TO Len(aCols6)
									If "901"$aCols6[nIx,2] .And. Empty(aCols6[nIx,5]) .And. !"FECP"$aCols6[nIx,3] .And. !Empty(aCols6[nIx,7]) .And. Left(aCols6[nIx,7],2)==aGNREST[nNum,1]
										nVlrDebSt := aCols6[nIx,4]
									EndIf
								Next nIx
								aGNREST[nNum,2] -= nVlrDebSt
							EndIf
						EndIf
						If cMv_Estado=="RN"
							nPosGNREX := aScan(aGNREX,{|aX| Len(aX)>=8 .And. "- ST"$aX[8] .And. aGNREST[nNum,1]==aX[5] .And. aX[7]=="RECSALDO" .And. aGNREST[nNum,2]==aX[3]})
						Else
							nPosGNREX := aScan(aGNREX,{|aX| Len(aX)>=8 .And. "- ST"$aX[8] .And. aGNREST[nNum,1]==aX[5] .And. aGNREST[nNum,2]==aX[3]})
						EndIf

						nValGNREST := aGNREST[nNum][02]
						nValFECSEP := aGNRESt[nNum][05]

						//Subtrai do valor total de ST dos códigos de lanãmento com guia separadas. Válidas somente para apuração correspondente ao MV_ESTADO.
						If aGNREST[nNum][01] == GetNewPar( "MV_ESTADO" )

							For nGnreSepar 	:= 1 to Len(aGnreSepST)
								nValFECSEP -=  aGnreSepST[nGnreSepar][2]
								nValGNREST -=  aGnreSepST[nGnreSepar][2]
							Next nGnreSepar
						EndIf
						If aGNREST[nNum][04] .And. !(cNrLivro $ Alltrim(cMV_Apusep)) //// Valida para não gerar titulo e GNRE para ST de subapuração
							If Len(aPzRecSt) > 0 .And. (aPzRecSt[01][02] <= 31) .And. (Month2Str((FirstDate(MonthSum(aDatas[01],aPzRecSt[01][01]))))== Month2Str(DaySum(FirstDate(MonthSum(aDatas[01],2)),(aPzRecSt[01][02])-1)))
								dDtVencDif:= DaySum(FirstDate(MonthSum(aDatas[01],aPzRecSt[01][01])),(aPzRecSt[01][02])-1) //Gera com o dia que foi definido no Parâmetro
							ElseIf Len(aPzRecSt) > 0 .And. Len(aDatas)>0 //Se pular para o proximo Mês pega o ultimo dia do mes
								dDtVencDif := LastDate(FirstDate(MonthSum(aDatas[01],aPzRecSt[01][01])))
							EndIf

							nSolicFlg := FGerTit(lTitulo,nValGNREST,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,DataValida(dDtVencDif,.F.),nMoedTit,lGuiaRec,nMes,nAno,0,;
													nValGNREST,"MATA953",lContab,@cNumero,@aGNRE,,@aGNREST,aGNREST[nNum][01],,,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,,,,,,,,,,,,,,,,lAutomato,aRetAuto,)

						ElseIf !(cNrLivro $ Alltrim(cMV_Apusep)) // Valida para não gerar titulo e GNRE para ST de subapuração
							nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "- ST"$aX[8] .And. aGNREST[nNum,1]==aX[5] .And. aGNREST[nNum,2]==aX[3]+nValFECSEP})
							nSolicFlg := FGerTit(lTitulo,Iif(lFECPsep,nValGNREST - nValFECSEP,nValGNREST),cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,Iif(lFECPsep,nValGNREST - nValFECSEP,nValGNREST),;
							"MATA953",lContab,@cNumero,@aGNRE,,@aGNREST, aGNREST[nNum][01],,,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,,,,,,,,,,,,,,,,lAutomato,aRetAuto,)

									If nRecTit <> Len(aRecTit)
										aRecTit[Len(aRecTit)][02] := STR0104 //"Apuração do ICMS - Substituição Tributária"
										If lUsaSped
											dbSelectArea("SE2")
											MsGoto(aRecTit[Len(aRecTit)][01])
											Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"ST",STR0104})
										EndIf
										//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
										If lGTitFluig
											Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "ST", STR0104, nSolicFlg } )
										EndIf
									EndIf		
							If lFECPsep
										nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. "- ST"$aX[8] .And. aGNREST[nNum,1]==aX[5] .And. nValFECSEP == aX[3]})
									   nSolicFlg := FGerTit(lTitulo,nValFECSEP,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,;
													dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,;
													nValFECSEP,"MATA953",lContab,@cNumero,@aGNRE,,,aGNREST[nNum][01],,.T.,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,,,,,,,,,,,,,,,,lAutomato,aRetAuto,)

									If nRecTit <> Len(aRecTit)
										aRecTit[Len(aRecTit)][02] := STR0104 //"Apuração do ICMS - Substituição Tributária"
										If lUsaSped
											dbSelectArea("SE2")
											MsGoto(aRecTit[Len(aRecTit)][01])
											Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"ST",STR0104})
										EndIf
										//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
										If lGTitFluig
											Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "ST", STR0104, nSolicFlg } )
										EndIf
									EndIf
							EndIf
						EndIf
						
						//----------------------------------------------
						//Chama gravatit para guias separadas de ICMS ST
						//----------------------------------------------
						GnreSepar(aGnreSepSt,@aRecTit,@aGNREX,lTitulo,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,lContab,@aGNRE,lAutomato,@aRetAuto,lUsaSped,@aTitCDH,@aTitulo,"RECST","ST")
						aGnreSepST	:= {}
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Gera os lancamentos do SIGAPCO                      ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						PcoDetLan('000250','03','MATA953')
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Grava a informacao do titulo na apuracao se o mesmo foi gerado³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lTitulo .And. aGNREST[nNum][02]>0 .And. lConfTit
							Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aGNREST[nNum][02]})
						EndIf
					Next

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gero as GNREs de ICMS/ST que tiveram o numero informado manualmente na apuracao³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					For nNum :=1 to Len(aCOLS6)
						//Somente considero os registros que tem o nr da GNRE preenchido
						If !Empty(aCOLS6[nNum,5]) .And. !"901"$aCols6[nNum,2]
							nRecTit := Len(aRecTit)
							lConfTit:= .F.

							//Verifico aqui se o código de ajuste de apuração está com opção de individualizado.
						   //Se estiver então eu não irei chamar a GravaTit para geração de Guia e Título, pelo fato destes códigos
						   //já possuirem Guias geradas e Títulos geradas também.
						   //Se por algum motivo o título não foi gerado na emissão da NF, não posso gerar na apuração,
						   //pois a liagação entre eles é o mesmo número da Guia. Então para códigos individualizados não chamarei GravaTit
						   lGuiaTit	:= .T.
						   If lCdoAgrupa .And. !Empty(aCols6[nNum,7]) .And.  ChkGnreInd( Alltrim( aCols6[nNum,7] ) )
			 					lGuiaTit	:= .F.
						   EndIf


						   If lGuiaTit

								nSolicFlg := FGerTit(lTitulo,aCols6[nNum,4],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,;
									dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,;
									aCols6[nNum,4],"MATA953",lContab,@cNumero,@aGNRE,aCOLS6[nNum,6],@aGNREST,substr(aCOLS6[nNum,7],1,2),,,,aCOLS6[nNum,5],@aRecTit,@lConfTit,,,,aCols6[nNum,2],,,,,,,,,,,,,,,lAutomato,aRetAuto,)
								If nRecTit <> Len(aRecTit)
									aRecTit[Len(aRecTit)][02] := STR0104 //"Apuração do ICMS - Substituição Tributária"
									If lUsaSped
										dbSelectArea("SE2")
										MsGoto(aRecTit[Len(aRecTit)][01])
										Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"ST",STR0104})
									EndIf
								Else
									//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
									If lGTitFluig
										Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "ST", STR0104, nSolicFlg } )
									EndIf
								EndIf
							EndIf
						EndIf
					Next

					/*
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Verifica se para Debitos Especiais ICMS tem numero de GNRE³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					For nNum :=1 to Len(aCOLS5)
				        //Somente considero os registros que tem o nr da GNRE preenchido
			            If !Empty(aCOLS5[nNum,5])
						   nRecTit := Len(aRecTit)
						   lConfTit:= .F.
							GravaTit(lTitulo,aCols5[nNum,4],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,;
								dDtVenc,nMoedTit,lGuiaRec,nMes,nAno, aCols5[nNum,4],;
								0,"MATA953",lContab,@cNumero2,@aGNRE,aCOLS5[nNum,6],,,,,,aCOLS5[nNum,5],@aRecTit,@lConfTit,,,,aCOLS5[nNum,2])

						   If nRecTit <> Len(aRecTit)
							   aRecTit[Len(aRecTit)][02] := STR0248 //"Debitos Especiais ICMS Normal"
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0248})
								EndIf
	                       EndIf
	       				EndIf
					Next
					*/
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gero todas as GNREs amarradas na apucacao de ICMS Proprio manualmente preenchendo o numero da guia.³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			        For nNum :=1 to Len(aCOLS5)
				        //Somente considero os registros que tem o nr da GNRE preenchido
			            If !Empty(aCOLS5[nNum,5])	// .And. !"900"$aCols5[nNum,2]
			               If !(AllTrim (aCOLS5[nNum, 2])$cMVSIGNRE)
				               dDtVenc2 :=STOD(StrZero(Year(ddtvenc)+Val(cProdec),4)+StrZero(Month(ddtvenc),2)+StrZero(Day(ddtvenc),2))
				           Else
					           dDtVenc2 := dDtVenc
				           EndIf
						   //
						   //Verifico aqui se o código de ajuste de apuração está com opção de individualizado.
						   //Se estiver então eu não irei chamar a GravaTit para geração de Guia e Título, pelo fato destes códigos
						   //já possuirem Guias geradas e Títulos geradas também.
						   //Se por algum motivo o título não foi gerado na emissão da NF, não posso gerar na apuração,
						   //pois a liagação entre eles é o mesmo número da Guia. Então para códigos individualizados não chamarei GravaTit
						   lGuiaTit	:= .T.
						   If lCdoAgrupa .And. !Empty(aCols5[nNum,7]) .And.  ChkGnreInd( Alltrim( aCols5[nNum,7] ) )
			 					lGuiaTit	:= .F.
						   EndIf

						   If lGuiaTit

							   nRecTit := Len(aRecTit)
							   lConfTit:= .F.
			     		   nSolicFlg := FGerTit(lTitulo,aCols5[nNum,4],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc2,nMoedTit,lGuiaRec,nMes,nAno,aCols5[nNum,4],;
							   0,"MATA953",lContab,@cNumero2,@aGNRE,aCOLS5[nNum,6],,,,,,aCOLS5[nNum,5],@aRecTit,@lConfTit,,,,aCOLS5[nNum,2],,,,,,,,,,,,,,,lAutomato,aRetAuto,)
							   If nRecTit <> Len(aRecTit)
								   aRecTit[Len(aRecTit)][02] := STR0105 //"Apuração do ICMS - PRODEC"
									If lUsaSped
										dbSelectArea("SE2")
										MsGoto(aRecTit[Len(aRecTit)][01])
										Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0105})
									EndIf
								Else
									//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
									If lGTitFluig
										Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0105, nSolicFlg } )
									EndIf
								EndIf
	/*							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³SUPONHAMOS QUE POSSUÍMOS UM DÉBITO DE 100, INSERIMOS UM SUBITEM          ³
								//³    DE MAIS 150 GERANDO UMA GNRE INDEPENDENTE NUMERO "000001". AO        ³
								//³    CONFIRMAR A APURACAO DE ICMS, APARECERA O PRIMEIRO DEBITO DE 100     ³
								//³    ONDE INFORMAMOS O NUMERO DA GNRE "000001" (MESMO NUMERO DA GNRE      ³
								//³    INDEPENDENTE A SER GERADA), ESTA GNRE SERA GRAVADA, EM SEGUIDA, SERA ³
								//³    APRESENTADA NOVAMENTE A TELA DE GRAVACAO DA GNRE INDEPENDENTE NO     ³
								//³    VALOR DE 150 COM O MESMO NUMERO, SE REDIGITARMOS O NUMERO SERA       ³
								//³    APRESENTADO O HELP "JAGRAVADO", MAS SE NAO REDIGITARMOS E GRAVARMOS  ³
								//³    SE ALTERAR O CAMPO DE NUMERO, SERA CRIADO DUAS GNREs COM O MESMO     ³
								//³    NUMERO PARA O MESMO ESTADO.                                          ³
								//³FOI IMPLEMENTADO UM TRATAMENTO NA GRAVATIT PARA QUANDO OCORRER ESTA      ³
								//³   SITUACAO, O CAMPO SERA ZERADO OBRIGANDO A DIGITACAO, NESTE PONTO O QUE³
								//³   FOI DIGITADO DEVERA TAMBEM ALTERAR TAMBEM A GRAVACAO DO ARQUITO TEXTO ³
								//³   DA APURACAO.                                                          ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								If (Len (aGNRE)>0)
								   aCOLS5[nNum,5] := aGNRE[Len (aGNRE)][1]
								EndIf
	*/							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ Gera os lancamentos do SIGAPCO                      ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								PcoDetLan('000250','04','MATA953')

							EndIf
						EndIf
					Next

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gera a Guia de Recolhimento para os Debitos Especiais de ICMS Proprio³
					//|Serah gerado abaixo, somente as GNREs que nao tiveram um numero      |
					//| amarrado atraves da Apuracao.                                       |
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Tratamento para os estado que utilizam o FECP Generico (F3_VALFECP/F3_VFECPST) e que nao possuem tratamento		³
					//³especifico para geracao das GNRE's.																				³
					//³																													³
					//³Os estados que possuem esses tratamentos especificos (MT;RN;MG;MA;RJ;BA) nao	terao as guias de FECP 				³
					//³geradas neste momento, pois ja foram feitas anteriormente.														³
					//³																													³
					//³Neste processamento (para Debitos Especiais), vou separar as linhas de lancadas especificamente para o FECP das	³
					//³demais linhas, para assim gerar a Guia de forma separada.														³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !( GetNewPar( "MV_ESTADO" ) $ "MT|RN|MG|MA|RJ|BA" )
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Verifico se a aba de Debitos Especiais (ICMS Proprio) possui recolhimento de imposto	³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If aCols5[ nPosDeb , 4 ] > 0
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Abaixo passo por todas as linhas incluidas em Debitos Especiais, segregando os valores que serao		³
							//³recolhidos exclusivamente para o FECP - para outros estados outras nomenclaturas, por esse motivo	³
							//³a utilizacao da funcao UFxNameFcp() - dos valores recolhidos normalmente como ICMS Proprio.			³
							//³																										³
							//³Preciso fazer a segregacao pois as GNRE's geradas para o FECP possuem Codigo de Receita especificos	³
							//³																										³
							//³Esse mecanismo funciona apenas para os estados que possuem codigos de ajuste especificos para o FECP	³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							For nIx := nPosDeb To Len( aCols5 )
								If Empty(aCOLS5[nIx,5]) .And. !Empty(aCols5[ nIx , 7 ]) .And. lCdoSepar .And. ChkGnreSep(Alltrim(aCols5[ nIx , 7 ]))
								// Ponto de entrada para geraração de guias separadas desmembrando o valor total dos códigos de ajuste de débitos especiais
									lPadrao := .T.
									if lGdebEsp // verifica se o PE está compilado
										aParam := {aCols5[nIx][2],aCols5[nIx][3],aCols5[nIx][4],aCols5[nIx][7]}//Parametros: 1°Linha de referencia; 2°descrição do débito especial; 3°Valor total do débito; 4°Código de lançamento
										aGuias := ExecBlock("GDEBESP", .F., .F.,aParam)//retorno: Código de lançamento e valor

										if ValType(aGuias) == "A" .and. Len(aGuias) <> 0
											for nG := 1 to Len(aGuias)
												Aadd(aGnreSepar,{ aGuias[ nG , 1 ], aGuias[ nG , 2 ]})
											next
											lPadrao := .F.
										endif
									endif
										//Geração de guias separadas
										//Nesse ponto o sistema gera guias separadas por código de ajuste aglutinando todos os valores conforme o codigo de ajuste
									If lPadrao //Tratamento padrão do sistema
										nGnreSepar	:= aScan(aGnreSepar,{|aX| aX[1] == Alltrim(aCols5[ nIx , 7 ]) })
										If nGnreSepar == 0
											Aadd(aGnreSepar,{ Alltrim(aCols5[ nIx , 7 ]), aCols5[ nIx , 4 ]})
										Else
											aGnreSepar[nGnreSepar][2] += aCols5[ nIx , 4 ]
										EndIf
									EndIf

								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ aVlrDebEsp[ 1 ] -> Valores exclusivos do FECP	³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								//Validação para que gere guia de debitos especiais quando o parâmetro MV_USASPED estiver igual a F, e que não duplique o valor da guia(aCols5[nIx,2]<>aCols5[nPosDeb,2])
								ElseIf aCols5[ nIx , 4 ] > 0 .And. IIf(lUsaSped == .T.,!Empty(aCols5[ nIx , 7 ]),aCols5[nIx,2] <> aCols5[nPosDeb,2]) .And. Empty( aCols5[ nIx , 5 ] ) .And. !UFxNameFcp( GetNewPar( "MV_ESTADO" ) ) $ aCols5[ nIx , 3 ]
									aVlrDebEsp[ 1 ]	+=	aCols5[ nIx , 4 ]
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ aVlrDebEsp[ 2 ] -> Valores para ICMS Proprio	³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								Elseif aCols5[ nIx , 4 ] > 0 .And. IIf(lUsaSped == .T.,!Empty(aCols5[ nIx , 7 ]),aCols5[nIx,2] <> aCols5[nPosDeb,2]) .And. Empty( aCols5[ nIx , 5 ] )
									aVlrDebEsp[ 2 ]	+=	aCols5[ nIx , 4 ]
								EndIf

							Next nIx
						EndIf

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Geracao das GNRE's e Titulos conforme validacoes acima	³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						For nNum := 1 To Len( aVlrDebEsp )

							If aVlrDebEsp[ nNum ] > 0

								nRecTit := Len(aRecTit)
								lConfTit:= .F.

								nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. AllTrim(aX[7])=="RDBESP"})

								nSolicFlg := FGerTit(	lTitulo,aVlrDebEsp[ nNum ],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,aVlrDebEsp[ nNum ],0,	"MATA953",;
											lContab,@cNumero,@aGNRE,,,,,,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,"RDBESP",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

								If nRecTit <> Len(aRecTit)
									aRecTit[Len(aRecTit)][02] := STR0248 //"Apuração do ICMS - Debitos Especiais"
									If lUsaSped
										dbSelectArea("SE2")
										MsGoto(aRecTit[Len(aRecTit)][01])
										Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0248})
									EndIf
								Else
									//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
									If lGTitFluig
										Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0248, nSolicFlg } )
									EndIf
								EndIf
								If lTitulo .And.aCols5[nPosDeb,4]>0 .And. lConfTit
									Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aVlrDebEsp[ nNum ]})
								EndIf
							EndIf

						Next nNum

					Else
						nVlrDeb := 0
						If  aCols5[nPosDeb,4]>0
							For nIx := nPosDeb TO Len(aCols5)
								If  Empty(aCOLS5[nIx,5]) .And. !Empty(aCols5[ nIx , 7 ]) .And. lCdoSepar .And.  ChkGnreSep(Alltrim(aCols5[ nIx , 7 ]))

									lPadrao := .T.
									if lGdebEsp // verifica se o PE está compilado
										aParam := {aCols5[nIx][2],aCols5[nIx][3],aCols5[nIx][4],aCols5[nIx][7]}//Parametros: 1°Linha de referencia; 2°descrição do débito especial; 3°Valor total do débito; 4°Código de lançamento
										aGuias := ExecBlock("GDEBESP", .F., .F.,aParam)//retorno: Código de lançamento e valor

										if ValType(aGuias) == "A" .and. Len(aGuias) <> 0
											for nG := 1 to Len(aGuias)
												Aadd(aGnreSepar,{ aGuias[ nG , 1 ], aGuias[ nG , 2 ]})
											next
											lPadrao := .F.
										endif
									endif
										//Geração de guias separadas
										//Nesse ponto o sistema gera guias separadas por código de ajuste aglutinando todos os valores conforme o codigo de ajuste
									If lPadrao //Tratamento padrão do sistema
										nGnreSepar	:= aScan(aGnreSepar,{|aX| aX[1] == Alltrim(aCols5[ nIx , 7 ]) })
										If nGnreSepar == 0
											Aadd(aGnreSepar,{ Alltrim(aCols5[ nIx , 7 ]), aCols5[ nIx , 4 ]})
										Else
											aGnreSepar[nGnreSepar][2] += aCols5[ nIx , 4 ]
										EndIf
									EndIf

								ElseIf 	"900"$aCols5[nIx,2] .And. Empty(aCols5[nIx,5]) .And. (!"FECP"$aCols5[nIx,3] .Or. Alltrim(aCols5[nIx,7]) $ cCDeFecpPe ) .And. !Empty(aCols5[nIx,7]) .And. cMv_Estado<>"MT"
									nVlrDeb += aCols5[nIx,4]
								EndIf

							Next nIx
						EndIf
						//verifica se já foi lançado no complementar se já foi não lança de novo só se a aba especial
						//for maior do que o que foi lançado no complementar ai lança a diferença
						If lIcmCompl .And. ((aCols7[28,3] + aCols7[2,3]) - nVlrDeb)>=0
							nVlrDeb :=  0
						elseif lIcmCompl
							nVlrDeb := nVlrDeb - (aCols7[28,3] + aCols7[2,3])
						EndIf
						If  nVlrDeb >0
							nRecTit := Len(aRecTit)
							lConfTit:= .F.

							nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. AllTrim(aX[7])=="RDBESP"})

							nSolicFlg := FGerTit(lTitulo,nVlrDeb,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,;
										dDtVenc,nMoedTit,lGuiaRec,nMes,nAno, nVlrDeb,;
											0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,"RDBESP",,,,,,,,,,,,,,,lAutomato,aRetAuto,)
							If nRecTit <> Len(aRecTit)
								aRecTit[Len(aRecTit)][02] := STR0248 //"Apuração do ICMS - Debitos Especiais"
								If lUsaSped
									dbSelectArea("SE2")
									MsGoto(aRecTit[Len(aRecTit)][01])
									Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0248})
								EndIf
							Else
								//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
								If lGTitFluig
									Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0248, nSolicFlg } )
								EndIf
							EndIf
							If lTitulo .And.aCols5[nPosDeb,4]>0 .And. lConfTit
								Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVlrDeb})
							EndIf
						EndIf

					EndIf

					//-------------------------------------------------------
					//Chama gravatit para guias separadas de Débito Especial Próprio
					//-------------------------------------------------------
					GnreSepar(aGnreSepar,@aRecTit,@aGNREX,lTitulo,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,lContab,@aGNRE,lAutomato,@aRetAuto,lUsaSped,@aTitCDH,@aTitulo,"RDBESP","IC")
					aGnreSepar	:= {}

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gera a Guia de Recolhimento para os Debitos Especiais de ICMS ST	   ³
					//|Serah gerado abaixo, somente as GNREs que nao tiveram um numero     |
					//| amarrado atraves da Apuracao.									   |
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					nVlrDebSt := 0
					If  aCols6[nPosDebSt,4]>0
						For nIx := nPosDebSt TO Len(aCols6)
							If Empty(aCols6[nIx,5]) .And. !Empty(aCols6[ nIx , 7 ]) .And. lCdoSepar .And. ChkGnreSep(Alltrim(aCols6[ nIx , 7 ]))
								//Geração de guias separadas
								nGnreSepar	:= aScan(aGnreSepar,{|aX| aX[1] == Alltrim(aCols6[ nIx , 7 ]) })
								IF nGnreSepar == 0
									AADD(aGnresepar,{ Alltrim(aCols6[ nIx , 7 ]), aCols6[ nIx , 4 ]})
								Else
									aGnreSepar[nGnreSepar][2] += aCols6[ nIx , 4 ]
								EndIF

							ElseIf aCols6[ nIx , 4 ] > 0 .And. Empty(aCols6[nIx,5]) .And. !Empty(aCols6[nIx,7])	.And. aCols6[nIx,7] <> aCols6[nIx-1,7]
								For nIy := nPosDebSt TO Len(aCols6)
									If aCols6[ nIx , 4 ] > 0 .And. Empty(aCols6[nIy,5]) .And. !Empty(aCols6[nIy,7]) .And. aCols6[nIx,7] <> aCols6[nIx-1,7]
										If (aScan(aUfEsp,{|x| x[1] == substr(aCOLS6[nIy,7],1,2)})) == 0
											If substr(aCOLS6[nIy,7],1,2) == substr(aCOLS6[nIx,7],1,2) .And. IIf(lCdoSepar, !ChkGnreSep(Alltrim(aCols6[ nIy , 7 ])), .T.)
												nVlrDebSt += aCols6[nIy,4]
											EndIf
										EndIf
									EndIf
								Next nIy

								Aadd(aUfEsp,{substr(aCOLS6[nIx,7],1,2)})

								If  nVlrDebSt > 0
									nRecTit := Len(aRecTit)
									lConfTit:= .F.

									nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. AllTrim(aX[7])=="RDBESPST"})

									nSolicFlg := FGerTit(lTitulo,nVlrDebSt,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,;
												dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,nVlrDebSt,;
												"MATA953",lContab,@cNumero,@aGNRE,,,substr(aCOLS6[nIx,7],1,2),,,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,"RDBESPST",,,,,,,,,,,,,,,lAutomato,aRetAuto,)
									If nRecTit <> Len(aRecTit)
										aRecTit[Len(aRecTit)][02] := STR0249 //"Apuração do ICMS ST - Debitos Especiais"
										If lUsaSped
											dbSelectArea("SE2")
											MsGoto(aRecTit[Len(aRecTit)][01])
											Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"ST",STR0249})
										EndIf
									Else
										//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
										If lGTitFluig
											Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "ST", STR0249, nSolicFlg } )
										EndIf
									EndIf
									If lTitulo .And.aCols6[nPosDebSt,4]>0 .And. lConfTit
										Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,nVlrDebSt})
									EndIf
								EndIf
								nVlrDebSt := 0
							EndIf
						Next nIx
					EndIf

					//-------------------------------------------------------
					//Chama gravatit para guias separadas de Débito Especial ST
					//-------------------------------------------------------
					GnreSepar(aGnreSepSt,@aRecTit,@aGNREX,lTitulo,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,lContab,@aGNRE,lAutomato,@aRetAuto,lUsaSped,@aTitCDH,@aTitulo,"RDBESPST","ST")
					aGnreSepSt	:= {}

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gera o titulo a pagar referente ao Fundersul - Mato Grosso do Sul³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If GetMV("MV_ESTADO",,"") $ "MS" .And. aCols7[16,3] > 0
						nRecTit := Len(aRecTit)
						lConfTit:= .F.
						nSolicFlg := FGerTit(lTitulo,aCols7[16,3],"FDS","FD",cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,;
									0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,.T.,,@aRecTit,@lConfTit,aCols7[16,3],,,"RFUNDSUL",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

						If nRecTit <> Len(aRecTit)
							aRecTit[Len(aRecTit)][02] := STR0116 //"Fundersul - Mato Grosso do Sul"
							If lUsaSped
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0116})
							EndIf
						Else
							//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
							If lGTitFluig
								Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0116, nSolicFlg } )
							EndIf
						EndIf
						If lTitulo .And. aCols7[16,3]>0 .And. lConfTit
							lInfComp := .T.
							Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aCols7[16,3]})
						EndIf
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gera o titulo a pagar referente ao Senar                         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If aCols7[29,3] > 0
						nRecTit := Len(aRecTit)
						lConfTit:= .F.
						nSolicFlg := FGerTit(lTitulo,aCols7[29,3],"SENAR","SE",cLcPadTit,dDtIni,dDtFim,;
									dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,	0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,.T.,,@aRecTit,@lConfTit,aCols7[29,3],,,"RSENAR",,,,,,,,,,,,,,,lAutomato,aRetAuto,)
						If nRecTit <> Len(aRecTit)
							aRecTit[Len(aRecTit)][02] := STR0245 //"Senar"
							If lUsaSped
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC",STR0245})
							EndIf
						Else
							//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
							If lGTitFluig
								Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", STR0245, nSolicFlg } )
							EndIf
						EndIf
						If lTitulo .And. aCols7[29,3]>0 .And. lConfTit
							lInfComp := .T.
							Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aCols7[29,3]})
						EndIf
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Gera o titulo a pagar referente ao Fumacop                       ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If	cMv_Estado=="MA"
						nPosFumac:= Ascan(aCols5,{|x|x[2]=="012.01"})
						If nPosFumac > 0 .And. aCols5[nPosFumac,4] > 0
							nRecTit := Len(aRecTit)
							lConfTit:= .F.
							nSolicFlg := FGerTit(.F.,aCols5[nPosFumac,4],"FUMA","FU",cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,;
										0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,.T.,,@aRecTit,@lConfTit,aCols5[nPosFumac,4],,,"RFUMAC",,,,,,,,,,,,,,,lAutomato,aRetAuto,)

						EndIf
					EndIf


			//-------------------------------------------------------------------------------------------------------------
			//								GERACAO DA GUIA NACIONAL DE RECOLHIMENTO
			//-------------------------------------------------------------------------------------------------------------
			//
			//											INCENTIVOS FISCAIS
			//
			//-------------------------------------------------------------------------------------------------------------
			//	Abaixo sao geradas as guias de recolhimento dos incentivos fiscais
			//-------------------------------------------------------------------------------------------------------------
					If !Empty(aApIncent)

						//-------------------------------------------------------------------------------------
						//									DESENVOLVE - BA
						//-------------------------------------------------------------------------------------
						//	Programa de Desenvolvimento Industrial e de Integracao Economica do Estado da Bahia
						//	Embasamento legal:
						//	Resolucao  No 123/2009 (regime especial) , Lei no 7.980/2001 e Decreto no 8.205/2002
						//-------------------------------------------------------------------------------------
						If GetNewPar("MV_ESTADO") == "BA"

							// ------------------------------
							//DESENVOLVE PARCELA DE INCENTIVO
							// ------------------------------
							If aApIncent[3] > 0

								// Descricao para GNRE
								aApIncent[Len(aApIncent)]	:=	"Desenvolve"

								nRecTit := Len(aRecTit)
								lConfTit:= .F.

								nSolicFlg := FGerTit(lTitulo,aApIncent[3],cImposto,cImp,cLcPadTit,	dDtIni,dDtFim,aApIncent[4],nMoedTit,lGuiaRec,nMes,nAno,0,0,	"MATA953",;
											lContab,@cNumero,	@aGNRE,,,,,,.T.,,@aRecTit,@lConfTit,aApIncent[3],,,"RDESENV",aApIncent,,,,,,,,,,,,,,lAutomato,aRetAuto,)

								If nRecTit <> Len(aRecTit)
									aRecTit[Len(aRecTit)][02] := "Desenvolve"
									If lUsaSped
										dbSelectArea("SE2")
										MsGoto(aRecTit[Len(aRecTit)][01])

										AADD ( aTitCDH, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
															SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC","Desenvolve"})

									EndIf
								Else
									//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
									If lGTitFluig
										Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", "Desenvolve", nSolicFlg } )
									EndIf
								EndIf

								If lTitulo .And. lConfTit
									lInfComp := .T.
									Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aApIncent[2]})
								EndIf
							EndIf

				            // ------------------------------
				            //DESENVOLVE PARCELA ANTECIPADA
				            // ------------------------------
				            If aApIncent[2] > 0

				            	// Descricao para GNRE
								aApIncent[Len(aApIncent)]	:=	"Desenvolve Ant."

								nRecTit := Len(aRecTit)
								lConfTit:= .F.

								nSolicFlg := 	FGerTit(lTitulo,aApIncent[2],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,aApIncent[5],	nMoedTit,lGuiaRec,nMes,nAno,0,0,"MATA953",;
											lContab,@cNumero,@aGNRE,,,,,,.T.,,@aRecTit,@lConfTit,aApIncent[2],,,"RDSVANT",aApIncent,,,,,,,,,,,,,,lAutomato,aRetAuto,)

								If nRecTit <> Len(aRecTit)
									aRecTit[Len(aRecTit)][02] := "Desenvolve Ant."
									If lUsaSped
										dbSelectArea("SE2")
										MsGoto(aRecTit[Len(aRecTit)][01])

										AADD ( aTitCDH, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
															SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC","Desenvolve Ant."})

									EndIf
								Else
									//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
									If lGTitFluig
										Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", "Desenvolve Ant.", nSolicFlg } )
									EndIf
								EndIf

								If lTitulo .And. lConfTit
									lInfComp := .T.
									Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aApIncent[3]})
								EndIf

							EndIf

						//-------------------------------------------------------------------------------------
						//									PRODEC - SC
						//-------------------------------------------------------------------------------------
						//	Programa de Desenvolvimento Industrial e de Integracao Economica do Estado da Bahia
						//	Embasamento legal:
						//	Resolucao  No 123/2009 (regime especial) , Lei no 7.980/2001 e Decreto no 8.205/2002
						//-------------------------------------------------------------------------------------
						ElseIf GetNewPar("MV_ESTADO") == "SC"

							// ------------------------------
							// Prodec / SC
							// ------------------------------
							If aApIncent[2] > 0

								// Descricao para GNRE
								aApIncent[Len(aApIncent)]	:=	"Prodec"

								nRecTit := Len(aRecTit)
								lConfTit:= .F.

								nSolicFlg := FGerTit(lTitulo,aApIncent[2],cImposto,cImp,cLcPadTit,	dDtIni,dDtFim,aApIncent[4],nMoedTit,lGuiaRec,nMes,nAno,0,0,	"MATA953",lContab,@cNumero,@aGNRE,,,,,,;
											.T.,,@aRecTit,@lConfTit,aApIncent[2],,,"RPRODEC",aApIncent,,,,,,,,,,,,,,lAutomato,aRetAuto,)


								If nRecTit <> Len(aRecTit)
									aRecTit[Len(aRecTit)][02] := "Prodec"
									If lUsaSped
										dbSelectArea("SE2")
										MsGoto(aRecTit[Len(aRecTit)][01])

										AADD ( aTitCDH, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
															SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC","Prodec"})

									EndIf
								Else
									//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
									If lGTitFluig
										Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", "Prodec", nSolicFlg } )
									EndIf
								EndIf

								If lTitulo .And. lConfTit
									lInfComp := .T.
									Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aApIncent[2]})
								EndIf
							EndIf

				            // ------------------------------
				            // Famdes / SC
				            // ------------------------------
				            If aApIncent[3] > 0

				            	// Descricao para GNRE
								aApIncent[Len(aApIncent)]	:=	"Famdes"

				            	// Atribuo os dados financeiros do incentivo auxiliar na posicao do incentivo proncipal
				            	// para correta geracao na GravaTit()
				            	If aApIncent[8] <> Nil
				            		aApIncent[6] := aApIncent[8]
				            	EndIf
				            	If aApIncent[9] <> Nil
				            		aApIncent[7] := aApIncent[9]
				            	EndIf

								nRecTit := Len(aRecTit)
								lConfTit:= .F.

								nSolicFlg := FGerTit(lTitulo,aApIncent[3],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,aApIncent[5],nMoedTit,lGuiaRec,nMes,nAno,0,0,"MATA953",lContab,@cNumero,@aGNRE,,,,,,;
											.T.,,@aRecTit,@lConfTit,aApIncent[3],,,"RFAMDES",aApIncent,,,,,,,,,,,,,,lAutomato,aRetAuto,)

								If nRecTit <> Len(aRecTit)
									aRecTit[Len(aRecTit)][02] := "Famdes"
									If lUsaSped
										dbSelectArea("SE2")
										MsGoto(aRecTit[Len(aRecTit)][01])

										AADD ( aTitCDH, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
															SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"IC","Famdes"})

									EndIf
								Else
									//Caso seja utilizada a integracao com o FLuig eu realizo a gravacao dos dados gerados na tabela CH3
									If lGTitFluig
										Aadd( aTitCDH,{ CH3->CH3_PREFIX, CH3->CH3_NUM, "", CH3->CH3_TIPO, CH3->CH3_FORNEC, CH3->CH3_LOJA, "IC", "Famdes", nSolicFlg } )
									EndIf
								EndIf

								If lTitulo .And. lConfTit
									lInfComp := .T.
									Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aApIncent[3]})
								EndIf

							EndIf

						EndIf
					EndIf

				EndIf

				If lProcDifal
					For nX	:= 1 to Len(aDifal)

						nPosDifal := aScan(aApurDifal,{|x|x[1] == aDifal[nX][1]} )

						aDifEst :=aApurDifal[nPosDifal][2]

						nVlGnreDif	:= aDifEst[aScan(aDifEst,{|x|x[2] == '010.00'} )][4]

						// Adicionada validacao da UF estar contida no parametro para que seja possivel determinar o comportamento
						// por estado, pois alguns estados pedem a GNRE separada e outros pedem GNRE unica. Para nao criar outro
						// parametro o MV_GNREDF foi reutilizado, permitindo os dois preenchimentos (2 = Todos os estados ou uma lista de estados).
						If cGNREDF == '2' .Or. aDifal[nX][1] $ cGNREDF
							nVlGnreDif	+= aDifEst[aScan(aDifEst,{|x|x[2] == IIF(Year(dDtIni) < 2017,'016.00','022.00')} )][4]
						EndIf

						If Len(aDifEst) > 0 .And. nVlGnreDif > 0
							//Gera guia do Difal
							lConfTit	:= .F.
							nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. aX[5]== aDifal[nX][1] .And. AllTrim(aX[8])=="1"})
							nRecTit := Len(aRecTit)
							FGerTit(lTitulo,nVlGnreDif,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,nVlGnreDif,"MATA953",lContab,@cNumero,@aGnreDifal,,,aDifal[nX][1],,,.T.,;
										Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,"DIFAL",,,,,,,,,,,,.T.,,,lAutomato,aRetAuto,)//48

							If nRecTit <> Len(aRecTit)
								//Adiciona o título no array para gravação do F0J
								aRecTit[Len(aRecTit)][02] := "EC 87/15 - DIFAL"
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								AADD ( aTitDifal, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
													SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"EC 87/15 - DIFAL",aDifal[nX][1],SE2->E2_VALOR,SE2->E2_VENCTO})
							EndIf

						EndIf

						//Gera unica Guia DIFAL+FECP debito especial
						nVlGnreDif	:= aDifEst[aScan(aDifEst,{|x|x[2] == '012.00'} )][4]

						// Adicionada validacao da UF estar contida no parametro para que seja possivel determinar o comportamento
						// por estado, pois alguns estados pedem a GNRE separada e outros pedem GNRE unica. Para nao criar outro
						// parametro o MV_GNREDF foi reutilizado, permitindo os dois preenchimentos (2 = Todos os estados ou uma lista de estados).
						If ((cGNREDF == '2' .Or. aDifal[nX][1] $ cGNREDF) .And. Year(dDtIni) >= 2017)
							nVlGnreDif	+= aDifEst[aScan(aDifEst,{|x|x[2] =='024.00'} )][4]
						EndIf

						//Débito especial do Difal
						If Len(aDifEst) > 0 .And. aDifEst[aScan(aDifEst,{|x|x[2] == '012.00'} )][4] > 0
							//Gera guia do Débito especial
							lConfTit	:= .F.
							nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. aX[5]== aDifal[nX][1] .And. AllTrim(aX[8])=="3"})
							nRecTit := Len(aRecTit)
							FGerTit( lTitulo,	nVlGnreDif,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,nVlGnreDif,"MATA953",lContab,@cNumero,@aGnreDifal,,,aDifal[nX][1],,,.T.,;
								Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,"DEBITO ESPECIAL",,,,,,,,,,,,.T.,,,lAutomato,aRetAuto,)//48

							If nRecTit <> Len(aRecTit)
								//Adiciona o título no array para gravação do F0J
								aRecTit[Len(aRecTit)][02] := "EC 87/15 - DEBITO ESPECIAL"
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								AADD ( aTitDifal, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
													SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"EC 87/15 - DEBITO ESPECIAL",aDifal[nX][1],SE2->E2_VALOR,SE2->E2_VENCTO})
							EndIf

						EndIf

						// Adicionada validacao para quando houver UF's informadas no MV_GNREDF, ou seja, o conteudo eh diferente de 1 ou 2, mas a UF da apuracao nao foi informada (!aDifal[nX][1] $ cGNREDF).
						// Neste caso deve ser gerada a GNRE separada.
						If aDifal[nX][1] <> GetNewPar("MV_ESTADO") .And. Len(aDifEst) > 0 .And. aDifEst[aScan(aDifEst,{|x|x[2] == IIF(Year(dDtIni) < 2017,'016.00','022.00')} )][4] > 0 .And. (cGNREDF == '1' .Or. (!cGNREDF $ "1|2" .And. !aDifal[nX][1] $ cGNREDF))
							//Gera guia do FECP
							lConfTit	:= .F.
							nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. aX[5]== aDifal[nX][1] .And. AllTrim(aX[8])=="2"})
							nRecTit	:= Len(aRecTit)
							FGerTit(	lTitulo,aDifEst[aScan(aDifEst,{|x|x[2] == IIF(Year(dDtIni) < 2017,'016.00','022.00')} )][4],cImposto,	cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,0,;
										aDifEst[aScan(aDifEst,{|x|x[2] == IIF(Year(dDtIni) < 2017,'016.00','022.00')} )][4],"MATA953",	lContab,@cNumero,	@aGnreDifal,,,aDifal[nX][1],,.T.,,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),;
										@aRecTit,@lConfTit,,,,"FECP",,,,,,,,,,,,.T.,,,lAutomato,aRetAuto,)//48

							If nRecTit <> Len(aRecTit)
								//Adiciona o título no array para gravação do F0J
								aRecTit[Len(aRecTit)][02] := "EC 87/15 - FECP"
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								AADD ( aTitDifal, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
													SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"EC 87/15 - FECP",aDifal[nX][1],SE2->E2_VALOR,SE2->E2_VENCTO})
							EndIf
						EndIf

						//Débito especial do FECP
						// Adicionada validacao para quando houver UF's informadas no MV_GNREDF, ou seja, o conteudo eh diferente de 1 ou 2, mas a UF da apuracao nao foi informada (!aDifal[nX][1] $ cGNREDF).
						// Neste caso deve ser gerada a GNRE separada.
						If Year(dDtIni) >= 2017 .And. Len(aDifEst) > 0 .And. aDifEst[aScan(aDifEst,{|x|x[2] == '024.00'} )][4] > 0 .And. (cGNREDF == '1' .Or. (!cGNREDF $ "1|2" .And. !aDifal[nX][1] $ cGNREDF))
							//Gera guia do Débito especial de FECP
							lConfTit	:= .F.
							nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. aX[5]== aDifal[nX][1] .And. AllTrim(aX[8])=="4"})
							nRecTit := Len(aRecTit)
							GravaTit(	lTitulo,aDifEst[aScan(aDifEst,{|x|x[2] == '024.00'} )][4],cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,	nMes,nAno,	0,aDifEst[aScan(aDifEst,{|x|x[2] == '024.00'} )][4],;
										"MATA953",	lContab,@cNumero,	@aGnreDifal,,,aDifal[nX][1],,,.T.,Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),@aRecTit,@lConfTit,,,,"DEBITO ESPECIAL FECP",,,,,,,,,,,,.T.,,,lAutomato,aRetAuto,)
										//15										//20																								//31

							If nRecTit <> Len(aRecTit)
								//Adiciona o título no array para gravação do F0J
								aRecTit[Len(aRecTit)][02] := "EC 87/15 - DEBITO ESPECIAL FECP"
								dbSelectArea("SE2")
								MsGoto(aRecTit[Len(aRecTit)][01])
								AADD ( aTitDifal, {	SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,;
													SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,"EC 87/15 - DEBITO ESPECIAL FECP",aDifal[nX][1],SE2->E2_VALOR,SE2->E2_VENCTO})
							EndIf
						EndIf

					Next nX
				EndIf

				For nS:= 1 to Len(aCOLS7)
					Aadd(aCOLS5,{aCOLS7[nS,1],"",aCOLS7[nS,2],aCOLS7[nS,3],"","","",aCOLS7[nS,4]})
				Next nS
				If lProcRef
					Aadd(aCOLS5,{"IND","",Transform(xMoeda(1,nMoedTit,1,dDataBase),"9.999"),0,"","","","","","","",.F.})
				Else
					Aadd(aCOLS5,{"IND","",Transform(xMoeda(1,nMoedTit,1,dDataBase),"9.999"),0,"","","",.F.})
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Armazena linhas do Fomentar para gravar na apuracao          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lFomentGO
					For nS :=1 to Len(aCols8)
						Aadd(aCOLS5,{"FOM","",aCOLS8[nS,1]+" "+aCOLS8[nS,3],aCOLS8[nS,4],"","","",.F.})
					Next nS
				Elseif lApurBA
                    //Exportacoes
					For nS :=1 to Len(aCols8)
						Aadd(aCOLS5,{"EXP",aCOLS8[nS,2],aCOLS8[nS,1]+" "+aCOLS8[nS,3],aCOLS8[nS,4],"","",aCOLS8[nS,7],.F.})
					Next nS
				    //Outras hipoteses
					For nS :=1 to Len(aCols9)
						Aadd(aCOLS5,{"OUT",aCOLS9[nS,2],aCOLS9[nS,1]+" "+aCOLS9[nS,3],aCOLS9[nS,4],"","",aCOLS9[nS,7],.F.})
					Next nS
				EndIf
				If lACredAcu //#vitor01 #TODO Armazena linhas para gravar na apuracao
					For nS :=1 to Len(aCols9)
						If lProcRef
							Aadd(aCOLS5,{"CAC",aCOLS9[nS,2],aCOLS9[nS,1]+" "+aCOLS9[nS,3],aCOLS9[nS,4],"","",aCOLS9[nS,5],"","","","",.F.})
						Else
							Aadd(aCOLS5,{"CAC",aCOLS9[nS,2],aCOLS9[nS,1]+" "+aCOLS9[nS,3],aCOLS9[nS,4],"","",aCOLS9[nS,5],.F.})
						EndIf
					Next nS
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Armazena linhas de observacao                                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				For nY :=1 to MLCount(cObserv,Tamsx3("CDH_DESC")[1]-1)
					If Len(Alltrim(MemoTran(MemoLine(cObserv,Tamsx3("CDH_DESC")[1]-1,nY),"")))>0
						If lProcRef
							Aadd(aCOLS5,{"OBS","",MemoTran(MemoLine(cObserv,Tamsx3("CDH_DESC")[1]-1,nY)),0,"","","","","","","",.F.})
						Else
							Aadd(aCOLS5,{"OBS","",MemoTran(MemoLine(cObserv,Tamsx3("CDH_DESC")[1]-1,nY)),0,"","","",.F.})
						EndIf
					EndIf
				Next

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exibe os titulos gerados dos impostos a pagar pela apuracao ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lMVTITAPUR
					For nX := 1 To Len(aRecTit)
						If aRecTit[nX][01] <> 0
							dbSelectArea("SE2")
							MsGoto(aRecTit[nX][01])
							cCadastro := aRecTit[nX][02]
							// Titulo contabilizado - apos consulta com lider da CONTROLADORIA/FINANCEIRO,
							//	foi estipulado retirar a verificacao e manter a chamada do FINA050
							ALTERA 	:=	.T.
							INCLUI	:=	.F.
							EXCLUI 	:=	.F.
							lRefresh:=	.f.
							nMoeda 	:=	1
							pergunte("FIN050",.F.)

							If lAutomato
								aAuto := {}
								Aadd(aAuto,{"E2_FILIAL"	,xFilial("SE2") , NIL } )
								Aadd(aAuto,{"E2_PREFIXO"	,SE2->E2_PREFIXO, NIL } )
								Aadd(aAuto,{"E2_NUM"		,SE2->E2_NUM, NIL } )
								Aadd(aAuto,{"E2_PARCELA"	,SE2->E2_PARCELA, NIL } )
								Aadd(aAuto,{"E2_TIPO"	,SE2->E2_TIPO, NIL } )
								Aadd(aAuto,{"E2_NATUREZ"	,SE2->E2_NATUREZ, NIL } )
								Aadd(aAuto,{"E2_FORNECE"	,SE2->E2_FORNECE, NIL } )
								Aadd(aAuto,{"E2_LOJA"	,SE2->E2_LOJA, NIL } )
								Aadd(aAuto,{"E2_EMISSAO"	,SE2->E2_EMISSAO, NIL } )
								Aadd(aAuto,{"E2_VENCTO"	,SE2->E2_VENCTO, NIL } )
								Aadd(aAuto,{"E2_VALOR"	,SE2->E2_VALOR, NIL } )
							EndIf

							FINA050(If(lAutomato,aAuto,Nil),,4,'FA050Alter("SE2",SE2->(RECNO()),2)')

							If lAutomato
								pergunte("MTA951",.F.)
							EndIf

						EndIf
						If Len(aTitulo)>0 .And. Len(aTitulo)>=nx
							If aTitulo[nX][1]=="TIT"
								aTitulo[nX][2]:= SE2->E2_NUM+" "+DTOC(SE2->E2_VENCREA)+" "+cOrgArrec
							EndIf
						EndIf
					Next nX
				EndIf

				If lTitulo .And. ( nVlrTitulo>0 .Or. lInfComp .Or. Len(aTitulo) > 0 ) .And. !lGTitFluig
					/*Tratativa como forma de fazer com que a data de vencimento para o título de ICMS-ST informada pelo ponto de entrada TITICMST
					seja demonstrada também na rotina Registro de Apuração de ICMS (MATR940); seja com o parâmetro MV_TITAPUR habilitado ou não. */
					If !lMVTITAPUR
						For nX := 1 To Len(aRecTit)
							If aRecTit[nX][01] <> 0
								dbSelectArea("SE2")
								MsGoto(aRecTit[nX][01])
								If Len(aTitulo)>0 .And. Len(aTitulo)>=nx
									If aTitulo[nX][1]=="TIT"
										aTitulo[nX][2]:= SE2->E2_NUM+" "+DTOC(SE2->E2_VENCREA)+" "+cOrgArrec
									EndIf
								EndIf
							EndIf
						Next nX
					EndIf

					For nNum := 1 to Len(aTitulo)
						Aadd(aCOLS5,{aTitulo[nNum][01],"",aTitulo[nNum][02],aTitulo[nNum][03],"","","",.F.})
					Next
		           	For nNum :=1 to Len(aCOLS5)
		            	If !Empty(aCOLS5[nNum,6])
                        	dDtVenc2 :=STOD(StrZero(Year(ddtvenc)+Val(cProdec),4)+StrZero(Month(ddtvenc),2)+StrZero(Day(ddtvenc),2))
		  		 	   	  	Aadd(aCOLS5,{"TIT","",cNumero2+" "+Dtoc(dDtVenc2)+" "+cOrgArrec,aCols5[nNum,4],"","","",.F.})
                       	EndIf
                   	Next
				EndIf


				If lGuiaRec
					For nX:=1 To Len(aGnre)
					   Aadd(aCOLS5,{"GNR","",aGnre[nX,1]+" "+DtoC(aGnre[nX,2])+" "+cOrgArrec,aGnre[nX,3],aGnre[nX,4],"","",.F.})
					Next
				EndIf

			    FisApur(cImp,nAno,nMes,nApuracao,nPeriodo,cNrLivro,.t.,aCOLS5,nMoedTit,.F.,"",aHeader5[3,4])

			    nValSt := 0
			    aEval(aCOLS6, {|z| nValSt += Iif(ValType(z[4])=="N",z[4],0)})
			    For nX:=1 To Len(aGnreSt)
				   Aadd(aCOLS6,{"1"+aGnreST[nX,1],"","ICMSST:"+aGnreST[nX,1],aGnreST[nX,2],"","","",.F.})
				Next nX
				FisApur("ST",nAno,nMes,nApuracao,nPeriodo,cNrLivro,.t.,aCOLS6,nMoedTit,.F.,"",aHeader5[3,4])

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³MV_USASPED - Indica se usa SPED                                 ³
				//³se sim (.T.), Grava apuracao na tabela CDH                      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lUsaSped
					FisApurCDH(nApuracao,nPeriodo,cNrLivro,dDtIni,dDtFim,lConsUF,cFilDe,cFilAte,aCOLS5,aCOLS6,aTitCDH,aGNRE,lApurBA,lACredAcu )
				EndIf

				//Se tabelas e campos do difal existirem, então deverá chamar funcção para gravar
				If lProcDifal
					GrvApDifal(aDifal,dDtIni,cNrLivro,aTitDifal,aGnreDifal,aApurDifal,aCDADifal)
				EndIf

				//Realiza a gravação dos créditos extra apuração
				If lCmpExtra
					GrvApExtra(aApurExtra,dDtIni,nPeriodo)
				EndIf

				If	lApGIEFD
					GravaCDV(aApurCDV,dDtIni,cNrLivro)
				EndIf

				//#vitor01 - Gravacao Credito Acumulado
				If lACredAcu .And. Len(aCoCredAcu) > 0
					GrvCredAcu(SubStr(DtoS(dDtIni),1,4) + SubStr(DtoS(dDtIni),5,2),cNrLivro)
				EndIf

				//conout(Alltrim(Str(ThreadID())) + " Fim da Gravação MATA953 Alterado:  " + Time())	

			End Transaction
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Finaliza os lancamentos do SIGAPCO.                             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PcoFinLan("000250")
		EndIf
	EndIf
EndIf

If lConfApur
	DeltempICM()
Endif

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFuncao    ³Ft953Refre  ºAutor  ³Microsiga              º Data ³ 08/07/2001º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³ Atualiza os folders                                           º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array com as getdados                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Ft953Refre(aGetDad)

Local nLoop := 0

For nLoop := 1 To Len(aGetDad)
	If len(aGetDad) > 1 // Se esta processando todos as getdados carrego o aHeader correspondente
		If aGetDad[nLoop] <> nil
			If nLoop >= 10
				aHeader  := aClone(&("aHeader"+STR(nLoop,2)))
				aCols    := aClone(&("aCols"+STR(nLoop,2)))
			Else
				aHeader  := aClone(&("aHeader"+STR(nLoop,1)))
				aCols    := aClone(&("aCols"+STR(nLoop,1)))
			EndIf
			aGetDad[nLoop]:oBrowse:lDisablePaint := .F.
			aGetDad[nLoop]:oBrowse:Refresh(.T.)
		EndIf
	EndIf
Next nLoop

If len(aGetDad) > 1
	aHeader  := aClone(aHeader1)
	aCols    := aClone(aCols1)
EndIf

Return( .T. )


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Ft953Fld  ³ Autor ³Andreia dos Santos     ³ Data ³08.08.2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de Tratamento dos Folders                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Folder de Destino                                    ³±±
±±³          ³ExpN2: Folder Atual                                         ³±±
±±³          ³ExpO3: Objeto do Folder                                     ³±±
±±³          ³ExpA4: Array com as getdados.                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Ft953Fld(nFldDst,nFldAtu,oFolder,aGetDad,aApurDifal,nAno)

	Local nApurDifal := 0
	Local nPos := 0

	Local lRetorno := .F.
	Local lTudoOk := .F.
	Local lObjAtu := .F.
	Local lObjDst := .F.

	DEfault aApurDifal := {}
	Default nAno := 2016

	If nFldAtu <> 8 .And. nFldAtu <> 9
		lObjAtu := ValType(aGetDad[nFldAtu]) ==  "O"
	Else
		lObjAtu := ValType(aGetDad[nFldAtu][1]) ==  "O"
	EndIf

	If nFldDst <> 8 .And. nFldDst <> 9
		lObjDst := ValType(aGetDad[nFldDst]) ==  "O"
	Else
		lObjDst := ValType(aGetDad[nFldDst][1]) ==  "O"
	EndIf

	If lObjAtu
		If nFldAtu <> 8 .And. nFldAtu <> 9
			lTudoOk := aGetDad[nFldAtu]:TudoOk()
		Else
			lTudoOk := aGetDad[nFldAtu][1]:TudoOk()
		EndIf
	Else
		lTudoOk := .T.
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Efetua a Validacao da GetDados                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lTudoOk
		lRetorno := .T.

		If lObjAtu
			If nFldAtu <> 8 .And. nFldAtu <> 9
				aGetDad[nFldAtu]:oBrowse:lDisablePaint := .T.
			Else
				aGetDad[nFldAtu][1]:oBrowse:lDisablePaint := .T.
			EndIf
		EndIf

		Do Case
			Case ( nFldAtu == 1 )
				aCols1  := aClone(aCols)
				aHeader1:= aClone(aHeader)
			Case ( nFldAtu == 2 )
				aCols2  := aClone(aCols)
				aHeader2:= aClone(aHeader)
			Case ( nFldAtu == 3 )
				aCols3  := aClone(aCols)
				aHeader3:= aClone(aHeader)
			Case ( nFldAtu == 4 )
				aCols4  := aClone(aCols)
				aHeader4:= aClone(aHeader)
			Case ( nFldAtu == 5 )
				aCols5  := aClone(aCols)
				aHeader5:= aClone(aHeader)
			Case ( nFldAtu == 6 )
				aCols6  := aClone(aCols)
				aHeader6:= aClone(aHeader)
			Case ( nFldAtu == 7 )
				aCols7  := aClone(aCols)
				aHeader7:= aClone(aHeader)

			Case ( nFldAtu == 8 )
				//está saindo da tela da apuração do difal
				If lGerDifal
					aCols12  := aClone(aCols)
					aHeader12:= aClone(aHeader)
				Else
					aCols13  := aClone(aCols)
					aHeader13:= aClone(aHeader)
				EndIf
				lGerDifal	:= .T.

				nPos := aScan(aApurDifal,{|x|x[1] == SubStr(aCols12[aGetDad[nFldAtu][1]:oBrowse:nAt][2],1,2)} )
				nApurDifal  := aScan(aCOLS12,{|x|SubStr(x[2],1,2) == SubStr(aCols12[aGetDad[nFldAtu][1]:oBrowse:nAt][2],1,2)} )

				If lProcDifal .And. nApurDifal  > 0 .And. nPos >0
					aCOLS12[nApurDifal,03]	:=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '010.00'} )][4]
					aCOLS12[nApurDifal,04]	:=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '011.00'} )][4]
					aCOLS12[nApurDifal,07]	:=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '012.00'} )][4]
					If nAno < 2017
						aCOLS12[nApurDifal,05]	:=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '016.00'} )][4]
						aCOLS12[nApurDifal,06]	:=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '017.00'} )][4]
					Else
						aCOLS12[nApurDifal,05]	:=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '022.00'} )][4]
						aCOLS12[nApurDifal,06]	:=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '023.00'} )][4]
						aCOLS12[nApurDifal,07]	+=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '024.00'} )][4]
					EndIf
				EndIf

			Case ( nFldAtu == 9 )
				//Informações extra apuração
				If lExtApuCon
					aCols14  := aClone(aCols)
					aHeader14:= aClone(aHeader)
				Else
					aCols15  := aClone(aCols)
					aHeader15:= aClone(aHeader)
				EndIf
				lExtApuCon	:= .T.

			Case ( lFomentGO .And. nFldAtu == 10 )
				aCols8  := aClone(aCols)
				aHeader8:= aClone(aHeader)
			Case ( lApurBA .And. nFldAtu == 10 ) //Exportacoes
				aCols8  := aClone(aCols)
				aHeader8:= aClone(aHeader)
			Case ( lApurBA .And. nFldAtu == 11 ) //Outras hipoteses
				aCols9  := aClone(aCols)
				aHeader9:= aClone(aHeader)
			Case ( (lFomentGO .And. lACredAcu .And. (nFldAtu == 11)) .Or. (!lFomentGO .And. lACredAcu .And. (nFldAtu == 10)) ) //#vitor01 Folder 10 ou 11
				aCols   := aClone(aCols9)
				aHeader := aClone(aHeader9)
			Case (lFomentGO .And. lACredAcu .And. nFldAtu == 12) .Or. (lFomentGO .And. !lACredAcu .And. nFldAtu == 11) .Or. (!lFomentGO .And. lACredAcu .And. nFldAtu == 11) .Or. (lApurBA .And. nFldAtu == 12) .Or. (!lFomentGO .And. !lApurBA .And. !lACredAcu .And. nFldAtu == 10)  // #vitor01 tratamento folder deb especial atual
				aCols10  := aClone(aCols)
				aHeader10:= aClone(aHeader)
			Case ( lCon13906 .And. nFldAtu == 11 )
				aCols11  := aClone(aCols)
				aHeader11:= aClone(aHeader)
		EndCase

		If lObjDst
			If nFldDst <> 8 .And. nFldDst <> 9
				N := Max(aGetDad[nFldDst]:oBrowse:nAt,1)
			Else
				N := Max(aGetDad[nFldDst][1]:oBrowse:nAt,1)
			EndIf
		EndIf

		Do Case
			Case ( nFldDst == 1 )
				aCols   := aClone(aCols1)
				aHeader := aClone(aHeader1)
			Case ( nFldDst == 2 )
				aCols   := aClone(aCols2)
				aHeader := aClone(aHeader2)
			Case ( nFldDst == 3 )
				aCols   := aClone(aCols3)
				aHeader := aClone(aHeader3)
			Case ( nFldDst == 4 )
				aCols   := aClone(aCols4)
				aHeader := aClone(aHeader4)
			Case ( nFldDst == 5 )
				aCols   := aClone(aCols5)
				aHeader := aClone(aHeader5)
			Case ( nFldDst == 6 )
				aCols   := aClone(aCols6)
				aHeader := aClone(aHeader6)
			Case ( nFldDst == 7 )
				aCols   := aClone(aCols7)
				aHeader := aClone(aHeader7)
			Case ( nFldDst == 8 )
				//Está entrando na aba
				If lGerDifal
					aCols   := aClone(aCols12)
					aHeader := aClone(aHeader12)
					aGetDad[nFldDst][2]:Hide()
					aGetDad[nFldDst][1]:Show()
					aGetDad[nFldDst][1]:oBrowse:Refresh(.T.)
				EndIf

			Case ( nFldDst == 9 )
				//informações Extra apuração
				If lExtApuCon
					aCols   := aClone(aCols14)
					aHeader := aClone(aHeader14)
					aGetDad[nFldDst][2]:Hide()
					aGetDad[nFldDst][1]:Show()
					aGetDad[nFldDst][1]:oBrowse:Refresh(.T.)
				EndIf
			Case ( lFomentGO .And. nFldDst == 10 )
				aCols   := aClone(aCols8)
				aHeader := aClone(aHeader8)
			Case ( lApurBA .And. nFldDst == 10 )
				aCols   := aClone(aCols8)
				aHeader := aClone(aHeader8)
			Case ( lApurBA .And. nFldDst == 11 )
				aCols   := aClone(aCols9)
				aHeader := aClone(aHeader9)
			Case ( (lFomentGO .And. lACredAcu .And. (nFldDst == 11)) .Or. (!lFomentGO .And. lACredAcu .And. (nFldDst == 10)) ) //#vitor01 Folder 10 ou 11
				aCols   := aClone(aCols9)
				aHeader := aClone(aHeader9)
			Case (lFomentGO .And. lACredAcu .And. nFldDst == 12) .Or. (lFomentGO .And. !lACredAcu .And. nFldDst == 11) .Or. (!lFomentGO .And. lACredAcu .And. nFldDst == 11) .Or. (lApurBA .And. nFldDst == 12) .Or. (!lFomentGO .And. !lApurBA .And. !lACredAcu .And. nFldDst == 10)  // #vitor01 tratamento folder deb especial destino
				aCols  := aClone(aCols10)
				aHeader:= aClone(aHeader10)
			Case ( lCon13906 .And. nFldDst == 11 )
				aCols   := aClone(aCols11)
				aHeader := aClone(aHeader11)
		EndCase

		If lObjDst
			If nFldDst <> 8  .And. nFldDst <> 9
				aGetDad[nFldDst]:oBrowse:lDisablePaint := .F.
				aGetDad[nFldDst]:oBrowse:Refresh(.T.)
			Else
				aGetDad[nFldDst][1]:oBrowse:lDisablePaint := .F.
				aGetDad[nFldDst][1]:oBrowse:Refresh(.T.)
			EndIf
		EndIf

		If !lObjDst
			// Se for a aba de credito acumulado
			If (lFomentGO .And. lACredAcu .And. nFldDst == 11) .Or. (!lFomentGO .And. lACredAcu .And. nFldDst == 10)
				// Função para atualizar o array  do credito acumulado
				fCoCredAcu(.F.)

				// Atualiza o browser de credito acumulado
				fABrwCrdAc()
			EndIf
		EndIf
	EndIf

Return lRetorno

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Ft953Ok   ³ Autor ³Eduardo Riera          ³ Data ³13.01.2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao da Getdados                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array com as getdados                                ³±±
±±³          ³ExpN2: Folder atual.                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ft953Ok(aGetDad,nAtu)

Local lRetorno := .F.
Local aSavHead := aClone(aHeader)
Local aSavCols := aClone(aCols)
Local nSavN    := N
Local nCont	:= 0
Local lExit	:= .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Valida todas as getdados                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ aCols e aHeader 1 e 2 nao coincidem com folder 1 e 2 devido  ³
//³ a um erro na classe folder ( nao alterar )                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( nAtu == 2 )
	aHeader := aClone(aSavHead)
	aCols   := aClone(aSavCols)
	N       := nSavN
Else
	aHeader := aClone(aHeader1)
	aCols   := aClone(aCols1)
	N       := Max(aGetDad[1]:oBrowse:nAT,1)
EndIf
If ( aGetDad[1]:TudoOk() )
	If ( nAtu == 1 )
		aHeader := aClone(aSavHead)
		aCols   := aClone(aSavCols)
		N       := nSavN
	Else
		aHeader := aClone(aHeader2)
		aCols   := aClone(aCols2)
		N       := Max(aGetDad[2]:oBrowse:nAT,1)
	EndIf
	If ( aGetDad[2]:TudoOk() )
		If ( nAtu == 3 )
			aHeader := aClone(aSavHead)
			aCols   := aClone(aSavCols)
			N       := nSavN
		Else
			aHeader := aClone(aHeader3)
			aCols   := aClone(aCols3)
			N       := Max(aGetDad[3]:oBrowse:nAT,1)
		EndIf
		If ( aGetDad[3]:TudoOk() )
			If ( nAtu == 4 )
				aHeader := aClone(aSavHead)
				aCols   := aClone(aSavCols)
				N       := nSavN
			Else
				aHeader := aClone(aHeader4)
				aCols   := aClone(aCols4)
				N       := Max(aGetDad[4]:oBrowse:nAT,1)
			EndIf
			If ( aGetDad[4]:TudoOk() )
				If ( nAtu == 5 )
					aHeader := aClone(aSavHead)
					aCols   := aClone(aSavCols)
					N       := nSavN
				Else
					aHeader := aClone(aHeader5)
					aCols   := aClone(aCols5)
					N       := Max(aGetDad[5]:oBrowse:nAT,1)
				EndIf
				If ( aGetDad[5]:TudoOk() )
					lRetorno := .T.
				EndIf
			EndIf
		EndIf
	EndIf
EndIf
If lCmpExtra
	For nCont	:= 1 to len(aCols14)
		If lExit
			Exit
		ElseIF aCols14[nCont][1] =="br_preto"
			//Existe incosistência na Extra apuração
			If !MsgYesNo('Existem Inconsistências de valores na aba "Créditos Extra Apuração", isso poderá causar erro na geração do SPED Fiscal.'+CRLF+CRLF+CRLF+CRLF+'Realmente deseja continuar com a gravação da apuração?')
				lRetorno	:= .F.
			EndIf
			lExit		:= .T.
		EndIf
	Next nCont
EndIf


aHeader := aClone(aSavHead)
aCols   := aClone(aSavCols)
N       := nSavN

Return(lRetorno)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFuncao    ³a953Saldo ºAutor  ³Andreia dos Santos     º Data ³ 13/08/01 º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³ Apura o saldo do ICMS operacoes proprias, substituicao     º±±
±±º          ³ Tributaria e Fomentar GO                                   º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Primeira vez que apura o saldo quando monta o aCols  ³±±
±±³          ³ExpN2: Operacoes com Substituicao Tributaria                ³±±
±±³          ³ExpN3: Funcao chamada a partir da delecao da linha          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953Saldo(lFirst,lST,lFomentar,lApurBA,lDebEsp,lArt488MG,lDifal,lACredAcu)

Local n001		:= 	0
Local n002		:=	0
Local n003		:=	0
Local n004		:=	0
Local n005		:=	0
Local n006		:=	0
Local n007		:=	0
Local n008		:=	0
Local n009		:=	0
Local n010		:=	0
Local n011		:=	0
Local n012 		:=	0
Local n013		:=	0
Local n014 		:=	0
Local n015 		:=	0
Local n016 		:=	0
Local n017	    :=	0
Local n018	:=	0
Local n019	:=	0
Local n020	:=	0
Local n021	:=	0
Local n022	:=	0
Local n023	:=	0
Local n024	:=	0
Local n025	:=	0
Local n026 	:=	0
Local n027	:=	0
Local n028 	:=	0
Local n029	:=	0
Local n030	:=	0
Local n031	:=	0
Local n032	:=	0
Local n033	:=	0
Local n034	:=	0
Local n035	:=	0
Local n036	:=	0
Local n037	:=	0
Local n038	:=	0
Local n039	:=	0
Local n040 	:=	0
Local n041	:=	0
Local n042 	:=	0
Local n043	:=	0
Local n044	:=	0
Local n045	:=	0
Local n046	:=	0
Local n047	:=	0
Local n048	:=	0
Local n049	:=	0
Local n050	:=	0
Local n051	:=	0
Local n052	:=	0
Local n053	:=	0
Local n054 	:=	0
Local n055	:=	0
Local n056 	:=	0
Local n057	:=	0
Local n058	:=	0
Local n059	:=	0
Local n060	:=	0
Local n061	:=	0
Local n062	:=	0
Local n063	:=	0
Local n064	:=	0
Local n065	:=	0
Local n066	:=	0
Local n067	:=	0
Local n068 	:=	0
Local n069	:=	0
Local n070 	:=	0
Local n071 	:=	0
Local n072	:=	0
Local n073	:=	0
Local n074	:=	0
Local n075	:=	0
Local n076	:=	0
Local n077	:=	0
Local n078	:=	0
Local n079	:=	0
Local n080	:=	0
Local n081	:=	0
Local n082	:=	0
Local n083 	:=	0
Local n084	:=	0
Local n900  := 0
Local n901  := 0
Local n0101 :=	0
Local nX	:= 	0
Local nY	:= 	0

Local n01202	:= 	0
Local nValAtu	:= 	0
Local n003_05	:= 	0
Local n004_05	:= 	0
Local n005_05	:=	0
Local n006_05	:=	0
Local n007_05	:=	0
Local n009_05	:=	0
Local n010_05	:=	0
Local n021_05	:=	0

Local nLin001 	:= 0
Local nLin005 	:= 0
Local nLin004 	:= 0
Local nLin033 	:= 0
Local nLin048 	:= 0
Local nLin055 	:= 0
Local nLin063 	:= 0
Local nLin070 	:= 0
Local nLin002 	:= 0
Local nLin003 	:= 0
Local nLin015 	:= 0
Local nLin016 	:= 0
Local nLin017 	:= 0
Local nLin037   := 0
Local nLin043_2 := 0
Local nLin019	:= 0
Local nLin006	:= 0
Local nLin007	:= 0
Local nLin009	:= 0
Local nLin011	:= 0
Local nLin012	:= 0
Local nLin014	:= 0
Local nLin013	:= 0
Local nLin018	:= 0
Local nLin020	:= 0
Local nLin021	:= 0
Local nLin022	:= 0
Local nLin023	:= 0
Local nLin024	:= 0
Local nLin030	:= 0
Local nLin032	:= 0
Local nLin034	:= 0
Local nLin035	:= 0
Local nLin043	:= 0
Local nLin045	:= 0
Local nLin046	:= 0
Local nLin047	:= 0
Local nLin049	:= 0
Local nLin050	:= 0
Local nLin051	:= 0
Local nLin052	:= 0
Local nLin053	:= 0
Local nLin054	:= 0
Local nLin056	:= 0
Local nLin057	:= 0
Local nLin058	:= 0
Local nLin059	:= 0
Local nLin060	:= 0
Local nLin062	:= 0
Local nLin064	:= 0
Local nLin065	:= 0
Local nLin066	:= 0
Local nLin067	:= 0
Local nLin068	:= 0
Local nLin069	:= 0
Local nLin073	:= 0
Local nLin074	:= 0
Local nLin076	:= 0
Local nLin078	:= 0
Local nLin027	:= 0
Local nLin040	:= 0
Local nLin0101	:= 0

Local nPosRecPR	:= 0
Local nPosRecST	:= 0
Local n002Cons	:= 0
Local n007Cons 	:= 0
Local n006Cons 	:= 0
Local nI        := 0

Local nMes		:= mv_par01
Local nAno		:= mv_par02
Local cNrLivro	:= mv_par03
Local nApuracao	:= mv_par04
Local nPeriodo	:= mv_par05
Local aDatas	:= DetDatas(nMes,nAno,nApuracao,nPeriodo)
Local dDtIni	:= aDatas[1]
Local dDtFim	:= aDatas[2]

Local aMvDes	:= &( GetNewPar( 'MV_DESENV' , '{}' ) )
Local aMvPrdc	:= &( GetNewPar( 'MV_FISPRDC' , '{}' ) )

Default lFomentar	:= 	.F.
Default lApurBA	    := 	.F.
Default lACredAcu	:= 	.F.
Default	lDebEsp		:=	.F.
Default lArt488MG   :=  .F.
Default lDifal	:= .F.

If !lDebEsp
	If lFirst .And. !lFomentar
		For nI := 1 To Len(aExclApur)
			If SubStr(aExclApur[nI][2],1,3)=="002" .And. !aExclApur[nI][4] .And.;
				((lST .And. aExclApur[nI][5]=="ST") .Or.;
				(!lST .And. aExclApur[nI][5]=="IC"))
				n002Cons += aExclApur[nI][3]

			ElseIf lST .And. SubStr(aExclApur[nI][2],1,3)=="007" .And. !aExclApur[nI][4] .And. aExclApur[nI][5]=="ST"
				n007Cons += aExclApur[nI][3]

			ElseIf !lST .And. SubStr(aExclApur[nI][2],1,3)=="006" .And. !aExclApur[nI][4] .And. aExclApur[nI][5]=="IC"
				n006Cons += aExclApur[nI][3]

			EndIf
		Next nI
	ElseIf !lFomentar
		For nI := 1 To Len(aExclApur)
			If SubStr(aExclApur[nI][2],1,3)=="002" .And. !aExclApur[nI][4] .And.;
				((lST .And. aExclApur[nI][5]=="ST") .Or.;
				(!lST .And. aExclApur[nI][5]=="IC"))
				If AllTrim (aCols[n,2])==aExclApur[nI,2] .And. aExclApur[nI][3]<>0 .And. (ReadVar()=="M->NVALOR")
					aExclApur[nI][3]	:=	M->NVALOR
				EndIf
				n002Cons += aExclApur[nI][3]

			ElseIf lST .And. SubStr(aExclApur[nI][2],1,3)=="007" .And. !aExclApur[nI][4] .And. aExclApur[nI][5]=="ST"
				If AllTrim (aCols[n,2])==aExclApur[nI,2] .And. aExclApur[nI][3]<>0 .And. (ReadVar()=="M->NVALOR")
					aExclApur[nI][3]	:=	M->NVALOR
				EndIf
				n007Cons += aExclApur[nI][3]

			ElseIf !lST .And. SubStr(aExclApur[nI][2],1,3)=="006" .And. !aExclApur[nI][4] .And. aExclApur[nI][5]=="IC"
				If AllTrim (aCols[n,2])==aExclApur[nI,2] .And. aExclApur[nI][3]<>0 .And. (ReadVar()=="M->NVALOR")
					aExclApur[nI][3]	:=	M->NVALOR
				EndIf
				n006Cons += aExclApur[nI][3]

			EndIf
		Next nI
	EndIf
EndIf

If lST      // SUBSTITUICAO TRIBUTARIA
	n001	:= 	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="001"}) //por saidas com debito do imposto
	n002	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="002"}) //outros debitos
	n003	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="003"}) //estorno de creditos
	n005	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="005"}) //Total das saidas
	n006	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="006"}) //entradas com credito do imposto
	n007	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="007"}) //outros creditos
	n008	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="008"}) //estorno de debitos
	n010	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="010"}) //Sub-total das entradas
	n011	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="011"}) //Saldo credor do periodo anterior
	n012	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="012"}) //Total das entradas
	n013	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="013"}) //Saldo devedor
	n014 	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="014"}) //deducoes
	n015	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="015"}) //imposto a recolher
	n016 	:=	Ascan(If(lFirst,aCols6,aCols),{|x|x[1]=="016"}) //Saldo Credor

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Totalizacao das linhas expandidas³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	a953TotLin(n002,"002",lFirst,aCols6)
	a953TotLin(n003,"003",lFirst,aCols6)
	a953TotLin(n007,"007",lFirst,aCols6)
	a953TotLin(n008,"008",lFirst,aCols6)
	a953TotLin(n014,"014",lFirst,aCols6)

	If !lFirst
		If ReadVar() =="M->NVALOR"
			nLin001	:=	If(aCols[n,1]==aCols[n001,1],M->NVALOR,aCols[n001,4])
			nLin006	:=	If(aCols[n,1]==aCols[n006,1],M->NVALOR,aCols[n006,4])
			nLin011	:=	If(aCols[n,1]==aCols[n011,1],M->NVALOR,aCols[n011,4])

			//Atualiza valores de créditos extra apuração
			If !lFirst .And.  ReadVar() =="M->NVALOR" .And. !Empty(aCols[n,7]) .And. lCmpExtra .And. lUsaSped
				//Se alterar o valor e houver código de lançamento preenchido então irei verificar se precisa atualizar informações de extra apuração.
				AtuExtra(Alltrim(aCols[n,7]),&(ReadVar()),aCols[n,8],'1')
			EndIf

		Elseif empty(ReadVar())
			nLin001	:=	aCols[n001,4]
			nLin006	:=	aCols[n006,4]
			nLin011	:=	aCols[n011,4]
		EndIf
		nLin002	:=	aCols[n002,4] //outros debitos
		nLin003	:=	aCols[n003,4] //estorno de creditos
		nLin007	:=	aCols[n007,4] //outros creditos
		nLin008	:=	aCols[n008,4] //estorno de debitos
		nLin014	:=	aCols[n014,4] //deducoes


		aCols[n005,04]	:=	nLin001+nLin002+nLin003 //total saidas
		aCols[n010,04]	:=	nLin006+nLin007+nLin008 //sub-total entradas
		aCols[n012,04]	:=	aCols[n010,4]+nLin011 //total entradas
		aCols[n013,04]	:=	If((aCols[n005,4]-n002Cons)-(aCols[n012,4]-n007Cons)>=0,(aCols[n005,4]-n002Cons)-(aCols[n012,4]-n007Cons),0) //Saldo Devedor( 005-012 )
		aCols[n015,04]	:=	If(aCols[n013,4]-nLin014>=0,aCols[n013,4]-nLin014,0) //Imposto a recolher( 013-014 )
		aCols[n016,04]	:=	If((aCols[n012,4]-n007Cons)-(aCols[n005,4]-n002Cons)>=0,(aCols[n012,4]-n007Cons)-(aCols[n005,4]-n002Cons),0) //Saldo Credor ( 012-005 )


	    nPosRecPR	:= 	Ascan(aCols5,{|x|x[1]=="013"}) //imposto a recolher Operacoes Proprias
	    nVlrTitulo	:= aCols5[nPosRecPR,4]+aCols[n015,4]
	Else
		aCols6[n005,04]:=	aCols6[n001,4]+aCols6[n002,4]+aCols6[n003,4] //total saidas
		aCols6[n010,04]:=	aCols6[n006,4]+aCols6[n007,4]+aCols6[n008,4] //sub-total entradas
		aCols6[n012,04]:=	aCols6[n010,4]+aCols6[n011,4] //total entradas
		aCols6[n013,04]	:=	If((aCols6[n005,4]-n002Cons)-(aCols6[n012,4]-n007Cons)>=0,(aCols6[n005,4]-n002Cons)-(aCols6[n012,4]-n007Cons),0) //Saldo Devedor( 005-012 )
		aCols6[n015,04]:=	If(aCols6[n013,4]-aCols6[n014,4]>=0,aCols6[n013,4]-aCols6[n014,4],0) //Imposto a recolher( 013-014 )
		aCols6[n016,04]:=	If((aCols6[n012,4]-n007Cons)-(aCols6[n005,4]-n002Cons)>=0,(aCols6[n012,4]-n007Cons)-(aCols6[n005,4]-n002Cons),0) //Saldo Credor ( 012-005 )

	    nPosRecPR	:= 	Ascan(aCols5,{|x|x[1]=="013"}) //imposto a recolher Substituicao Tributaria
    	nVlrTitulo	:= aCols5[nPosRecPR,4]+aCols6[n015,4]
	EndIf
ElseIf lFomentar .And. !lApurBA
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifico os valores array aCols8 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	n001	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="001"})
	n002	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="002"})
	n003	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="003"})
	n004	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="004"})
	n005	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="005"})
	n006	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="006"})
	n007	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="007"})
	n008	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="008"})
	n009	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="009"})
	n010	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="010"})
	n0101	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="101"})
	n011	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="011"})
	n012 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="012"})
	n013	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="013"})
	n014 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="014"})
	n015	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="015"})
	n016	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="016"})
	n017	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="017"})
	n018	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="018"})
	n019	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="019"})
	n020	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="020"})
	n021	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="021"})
	n022	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="022"})
	n023	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="023"})
	n024	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="024"})
	n025	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="025"})
	n026 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="026"})
	n027	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="027"})
	n028 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="028"})
	n029	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="029"})
	n030	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="030"})
	n031	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="031"})
	n032	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="032"})
	n033	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="033"})
	n034	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="034"})
	n035	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="035"})
	n036	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="036"})
	n037	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="037"})
	n038	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="038"})
	n039	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="039"})
	n040 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="040"})
	n041	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="041"})
	n042 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="042"})
	n043	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="043"})
	n044	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="044"})
	n045	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="045"})
	n046	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="046"})
	n047	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="047"})
	n048	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="048"})
	n049	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="049"})
	n050	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="050"})
	n051	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="051"})
	n052	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="052"})
	n053	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="053"})
	n054 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="054"})
	n055	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="055"})
	n056 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="056"})
	n057	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="057"})
	n058	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="058"})
	n059	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="059"})
	n060	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="060"})
	n061	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="061"})
	n062	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="062"})
	n063	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="063"})
	n064	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="064"})
	n065	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="065"})
	n066	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="066"})
	n067	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="067"})
	n068 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="068"})
	n069	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="069"})
	n070 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="070"})
	n071 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="071"})
	n072	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="072"})
	n073	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="073"})
	n074	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="074"})
	n075	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="075"})
	n076	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="076"})
	n077	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="077"})
	n078	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="078"})
	n079	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="079"})
	n080	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="080"})
	n081	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="081"})
	n082	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="082"})
	n083 	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="083"})
	n084	:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="084"})

	If !lFirst
		If ReadVar() =="M->NVALOR"
			nLin001	:=	If(aCols[n,1]==aCols[n001,1],M->NVALOR,aCols[n001,4])
			nLin002	:=	If(aCols[n,1]==aCols[n002,1],M->NVALOR,aCols[n002,4])
			nLin004	:=	If(aCols[n,1]==aCols[n004,1],M->NVALOR,aCols[n004,4])
			nLin005	:=	If(aCols[n,1]==aCols[n005,1],M->NVALOR,aCols[n005,4])
			nLin006	:=	If(aCols[n,1]==aCols[n006,1],M->NVALOR,aCols[n006,4])
			nLin007	:=	If(aCols[n,1]==aCols[n007,1],M->NVALOR,aCols[n007,4])
			nLin0101	:=	If(aCols[n,1]==aCols[n0101,1],M->NVALOR,aCols[n0101,4])
			nLin011	:=	If(aCols[n,1]==aCols[n011,1],M->NVALOR,aCols[n011,4])
			nLin012	:=	If(aCols[n,1]==aCols[n012,1],M->NVALOR,aCols[n012,4])
			nLin013	:=	If(aCols[n,1]==aCols[n013,1],M->NVALOR,aCols[n013,4])
			nLin015	:=	If(aCols[n,1]==aCols[n015,1],M->NVALOR,aCols[n015,4])
			nLin018	:=	If(aCols[n,1]==aCols[n018,1],M->NVALOR,aCols[n018,4])
			nLin019	:=	If(aCols[n,1]==aCols[n019,1],M->NVALOR,aCols[n019,4])
			nLin022	:=	If(aCols[n,1]==aCols[n022,1],M->NVALOR,aCols[n022,4])
			nLin024	:=	If(aCols[n,1]==aCols[n024,1],M->NVALOR,aCols[n024,4])
			nLin027	:=	If(aCols[n,1]==aCols[n027,1],M->NVALOR,aCols[n027,4])
			nLin032	:=	If(aCols[n,1]==aCols[n032,1],M->NVALOR,aCols[n032,4])
			nLin033	:=	If(aCols[n,1]==aCols[n033,1],M->NVALOR,aCols[n033,4])
			nLin034	:=	If(aCols[n,1]==aCols[n034,1],M->NVALOR,aCols[n034,4])
			nLin035	:=	If(aCols[n,1]==aCols[n035,1],M->NVALOR,aCols[n035,4])
			nLin037	:=	If(aCols[n,1]==aCols[n037,1],M->NVALOR,aCols[n037,4])
			nLin040	:=	If(aCols[n,1]==aCols[n040,1],M->NVALOR,aCols[n040,4])
			nLin045	:=	If(aCols[n,1]==aCols[n045,1],M->NVALOR,aCols[n045,4])
			nLin046	:=	If(aCols[n,1]==aCols[n046,1],M->NVALOR,aCols[n046,4])
			nLin047	:=	If(aCols[n,1]==aCols[n047,1],M->NVALOR,aCols[n047,4])
			nLin048	:=	If(aCols[n,1]==aCols[n048,1],M->NVALOR,aCols[n048,4])
			nLin049	:=	If(aCols[n,1]==aCols[n049,1],M->NVALOR,aCols[n049,4])
			nLin050	:=	If(aCols[n,1]==aCols[n050,1],M->NVALOR,aCols[n050,4])
			nLin051	:=	If(aCols[n,1]==aCols[n051,1],M->NVALOR,aCols[n051,4])
			nLin052	:=	If(aCols[n,1]==aCols[n052,1],M->NVALOR,aCols[n052,4])
			nLin053	:=	If(aCols[n,1]==aCols[n053,1],M->NVALOR,aCols[n053,4])
			nLin054	:=	If(aCols[n,1]==aCols[n054,1],M->NVALOR,aCols[n054,4])
			nLin055	:=	If(aCols[n,1]==aCols[n055,1],M->NVALOR,aCols[n055,4])
			nLin056	:=	If(aCols[n,1]==aCols[n056,1],M->NVALOR,aCols[n056,4])
			nLin057	:=	If(aCols[n,1]==aCols[n057,1],M->NVALOR,aCols[n057,4])
			nLin058	:=	If(aCols[n,1]==aCols[n058,1],M->NVALOR,aCols[n058,4])
			nLin059	:=	If(aCols[n,1]==aCols[n059,1],M->NVALOR,aCols[n059,4])
			nLin060	:=	If(aCols[n,1]==aCols[n060,1],M->NVALOR,aCols[n060,4])
			nLin062	:=	If(aCols[n,1]==aCols[n062,1],M->NVALOR,aCols[n062,4])
			nLin063	:=	If(aCols[n,1]==aCols[n063,1],M->NVALOR,aCols[n063,4])
			nLin064	:=	If(aCols[n,1]==aCols[n064,1],M->NVALOR,aCols[n064,4])
			nLin065	:=	If(aCols[n,1]==aCols[n065,1],M->NVALOR,aCols[n065,4])
			nLin066	:=	If(aCols[n,1]==aCols[n066,1],M->NVALOR,aCols[n066,4])
			nLin067	:=	If(aCols[n,1]==aCols[n067,1],M->NVALOR,aCols[n067,4])
			nLin068	:=	If(aCols[n,1]==aCols[n068,1],M->NVALOR,aCols[n068,4])
			nLin069	:=	If(aCols[n,1]==aCols[n069,1],M->NVALOR,aCols[n069,4])
			nLin070	:=	If(aCols[n,1]==aCols[n070,1],M->NVALOR,aCols[n070,4])
			nLin073	:=	If(aCols[n,1]==aCols[n073,1],M->NVALOR,aCols[n073,4])
			nLin074	:=	If(aCols[n,1]==aCols[n074,1],M->NVALOR,aCols[n074,4])
			nLin076	:=	If(aCols[n,1]==aCols[n076,1],M->NVALOR,aCols[n076,4])
			nLin078	:=	If(aCols[n,1]==aCols[n078,1],M->NVALOR,aCols[n078,4])
		ElseIf Empty(ReadVar())
			nLin001	:=	aCols[n001,4]
			nLin002	:=	aCols[n002,4]
			nLin004	:=	aCols[n004,4]
			nLin005	:=	aCols[n005,4]
			nLin006	:=	aCols[n006,4]
			nLin007	:=	aCols[n007,4]
			nLin0101	:=	aCols[n0101,4]
			nLin011	:=	aCols[n011,4]
			nLin012	:=	aCols[n012,4]
			nLin013	:=	aCols[n013,4]
			nLin015	:=	aCols[n015,4]
			nLin018	:=	aCols[n018,4]
			nLin019	:=	aCols[n019,4]
			nLin022	:=	aCols[n022,4]
			nLin024	:=	aCols[n024,4]
			nLin027	:=	aCols[n027,4]
			nLin032	:=	aCols[n032,4]
			nLin033	:=	aCols[n033,4]
			nLin034	:=	aCols[n034,4]
			nLin035	:=	aCols[n035,4]
			nLin037	:=	aCols[n037,4]
			nLin040	:=	aCols[n040,4]
			nLin045	:=	aCols[n045,4]
			nLin046	:=	aCols[n046,4]
			nLin047	:=	aCols[n047,4]
			nLin048	:=	aCols[n048,4]
			nLin049	:=	aCols[n049,4]
			nLin050	:=	aCols[n050,4]
			nLin051	:=	aCols[n051,4]
			nLin052	:=	aCols[n052,4]
			nLin053	:=	aCols[n053,4]
			nLin054	:=	aCols[n054,4]
			nLin055	:=	aCols[n055,4]
			nLin056	:=	aCols[n056,4]
			nLin057	:=	aCols[n057,4]
			nLin058	:=	aCols[n058,4]
			nLin059	:=	aCols[n059,4]
			nLin060	:=	aCols[n060,4]
			nLin062	:=	aCols[n062,4]
			nLin063	:=	aCols[n063,4]
			nLin064	:=	aCols[n064,4]
			nLin065	:=	aCols[n065,4]
			nLin066	:=	aCols[n066,4]
			nLin067	:=	aCols[n067,4]
			nLin068	:=	aCols[n068,4]
			nLin069	:=	aCols[n069,4]
			nLin070	:=	aCols[n070,4]
			nLin073	:=	aCols[n073,4]
			nLin074	:=	aCols[n074,4]
			nLin076	:=	aCols[n076,4]
			nLin078	:=	aCols[n078,4]
		EndIf

  		If !(SuperGetMV("MV_RNDFOM",,.F.)) //Nao arredonda os valores
			//Quadro A - Proporcao dos creditos apropriados
			aCols[n001,04]:= 	nLin001											//saidas de oper. incentivadas
			aCols[n002,04]:=	nLin002			   			   					//todal das saidas
			aCols[n003,04]:=	Iif(aCols[n002,04]>0,((aCols[n001,04]/aCols[n002,04])*100),0)	//percentual
			aCols[n004,04]:=	nLin004											//creditos por entrada
			aCols[n005,04]:=	nLin005											//outros creditos
			aCols[n006,04]:=	nLin006											//estorno de debitos
			aCols[n007,04]:=	nLin007											//saldo credor do periodo anterior
			aCols[n008,04]:=	aCols[n004,04]+aCols[n005,04]+aCols[n006,04]+aCols[n007,04]	//total dos creditos do periodo
			aCols[n009,04]:=	Iif(aCols[n003,04]>0,((aCols[n003,04]*aCols[n008,04])/100),0)	//credito para operacoes incentivadas
			aCols[n010,04]:=	aCols[n008,04]-aCols[n009,04]		 			//credito para operacoes nao incentivadas
			aCols[n0101,04]:=	nLin0101											//Outros Creditos Correspondente Primeira Parcela de ICMS
			//Quadro B - Apuracao dos saldos das operacoes incentivadas
			aCols[n011,04]:= 	nLin011											//debito do IMCS das operacoes incentivadas
			aCols[n012,04]:=	nLin012											//outros debitos das operacoes incentivadas
			aCols[n013,04]:=	nLin013											//estorno de debito das operacoes incentivadas
			aCols[n014,04]:=	aCols[n009,04]+aCols[n0101,04]					//creditos das operacoes incentivadas
			aCols[n015,04]:=	nLin015											//deducoes das operacoes incentivadas
			aCols[n016,04]:=	aCols[n043,04]									//credito ref. saldo credor do period. operacoes nao incentivadas
			aCols[n017,04]:=	Iif((aCols[n011,04]+aCols[n012,04]+aCols[n013,04])-;
								(aCols[n014,04]+aCols[n015,04])>0,(aCols[n011,04]+aCols[n012,04]+aCols[n013,04])-;
								(aCols[n014,04]+aCols[n015,04]+aCols[n016,04]),0)		//saldo devedor do ICMS das operacoes incentivadas
			aCols[n018,04]:=	nLin018											//ICMS por media
			aCols[n019,04]:=	nLin019											//deducoes/compensacoes
			aCols[n020,04]:=	aCols[n018,04]-aCols[n019,04]		 			//saldo do ICMS a pagar por media
			aCols[n021,04]:= 	Iif(aCols[n017,04]>aCols[n018,04],aCols[n017,04]-aCols[n018,04],0)//ICMS base para Fomentar/produzir
			aCols[n022,04]:=	nLin022											//percentagem do financiamento
			aCols[n023,04]:=	((aCols[n021,04]*aCols[n022,04])/100)			//ICMS sujeito a financiamento
			aCols[n024,04]:=	nLin024											//ICMS excedente nao sujeito ao incentivo
			aCols[n025,04]:=	Iif((aCols[n023,04]-aCols[n024,04])>0,aCols[n023,04]-aCols[n024,04],0)//ICMS Financiado
			aCols[n026,04]:=	Iif(aCols[n021,04]>aCols[n023,04],aCols[n021,04]-aCols[n023,04],0)	//saldo do ICMS da parcela nao financiada
			aCols[n027,04]:=	nLin027											//deducoes/compensacoes
			aCols[n028,04]:=	aCols[n026,04]-aCols[n027,04]					//saldo do ICMS a pagar da parcela nao financiada
			aCols[n029,04]:=	Iif((aCols[n014,04]+aCols[n015,04])>;
								(aCols[n011,04]+aCols[n012,04]+aCols[n013,04]),(aCols[n014,04]+aCols[n015,04])-;
								(aCols[n011,04]+aCols[n012,04]+aCols[n013,04]),0)	//saldo credor do periodo
			nLin030 := (aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]-aCols[n036,04]-aCols[n037,04])
			aCols[n030,04]:=	Iif(aCols[n029,04]==0,0,Iif(nLin030<=0,0,Iif(nLin030>=aCols[n029,04],aCols[n029,04],nLin030)))	//saldo credor do periodo utilizado nas operacoes nao incentivadas
			aCols[n031,04]:=	aCols[n029,04]-aCols[n030,04]		 			//saldo credor a transportar para o periodo seguinte
			//Quadro C - Apuracao dos saldos das operacoes nao incentivadas
			aCols[n032,04]:= 	nLin032											//debito do ICMS das operacoes nao incentivadas
			aCols[n033,04]:=	nLin033											//outros debitos das opercaoes nao incentivadas
			aCols[n034,04]:=	nLin034             		                   	//estorno de creditos  das operacoes nao incentivadas
			aCols[n035,04]:=	nLin035                     		           	//ICMS excedente nao sujeito ao incentivo
			aCols[n036,04]:=	aCols[n010,04]									//credito para operacoes nao incentivadas
			aCols[n037,04]:=	nLin037											//deducoes das operacoes nao incentivadas
			aCols[n038,04]:=	aCols[n030,04]									//credito referente a saldo credor do periodo das operacoes incentivadas
			aCols[n039,04]:=	Iif((aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04])>;
								(aCols[n036,04]+aCols[n037,04]+aCols[n038,04]),(aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04])-;
								(aCols[n036,04]+aCols[n037,04]+aCols[n038,04]),0)	//saldo devedor do ICMS das operacoes nao incentivadas
			aCols[n040,04]:=	nLin040											//deducoes/compensacoes
			aCols[n041,04]:=	aCols[n039,04]-aCols[n040,04]		 			//saldo do ICMS a pagar das operacoes nao incentivadas
			aCols[n042,04]:=	Iif((aCols[n036,04]+aCols[n037,04])>;
								(aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]),(aCols[n036,04]+aCols[n037,04])-;
								(aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]),0)	//saldo credor do periodo
			nLin043	 := ((aCols[n036,04]+aCols[n037,04])-(aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]))
			nLin043_2:= (aCols[n011,04]+aCols[n012,04]+aCols[n013,04]-aCols[n014,04]-aCols[n015,04])
			aCols[n043,04]:=	Iif(nLin043<=0,0,Iif(nLin043_2<=0,0,Iif(nLin043_2>=nLin043,nLin043,nLin043_2)))//saldo credor do periodo utilizado nas operacoes incentivadas
			aCols[n044,04]:=	aCols[n042,04]-aCols[n043,04]		 			//saldo credor a transp. para o periodo seguinte
			//Quadro D - Demontrativo e utilizacao dos creditos escriturados na linha observacoes do LRA
		    //Demonstrativo dos creditos
			aCols[n045,04]:= 	nLin045											//saldo credor da linha observacoes do periodo anterior
			aCols[n046,04]:=	nLin046											//cheque moradia
			aCols[n047,04]:=	nLin047											//protege Goias
			aCols[n048,04]:=	nLin048											//proesporte
			aCols[n049,04]:=	nLin049											//goyazes
			aCols[n050,04]:=	nLin050											//pagamento antecipado
			aCols[n051,04]:=	nLin051											//ICMS recebido em transferencia
			aCols[n052,04]:=	nLin052											//credito do fabricante de papel e embalagem reciclado
			aCols[n053,04]:=	nLin053											//credito relativo ao adicional de 2% na aliquota do ICMS
			aCols[n054,04]:=	nLin054						 					//ajuste do valor pago por forca de legislacao
			aCols[n055,04]:= 	nLin055						 					//credito especial para investimento
			aCols[n056,04]:=	nLin056											//credito industrial na producao interna do biodiesel
			aCols[n057,04]:=	nLin057											//credito na producao de alcool anidro
			aCols[n058,04]:=	nLin058											//credito do ICMS pago em DARE
			aCols[n059,04]:=	nLin059 										//credito outorgado para industrial de veiculo automotor
			aCols[n060,04]:=	nLin060											//outros creditos autorizados pela legislacao tributaria
			aCols[n061,04]:=	aCols[n045,04]+aCols[n046,04]+aCols[n047,04]+aCols[n048,04]+aCols[n049,04]+;
								aCols[n050,04]+aCols[n051,04]+aCols[n052,04]+aCols[n053,04]+aCols[n054,04]+;
								aCols[n055,04]+aCols[n056,04]+aCols[n057,04]+aCols[n058,04]+aCols[n059,04]+aCols[n060,04]					//total dos creditos
			//Utilizacao dos creditos
			aCols[n062,04]:= 	nLin062											//ICMS Retido via DARE ou de ST
			aCols[n063,04]:=	nLin063											//ICMS sobre operacoes nao incentivadas
			aCols[n064,04]:=	nLin064											//ICMS por media
			aCols[n065,04]:=	nLin065											//ICMS da percela nao financiada
			aCols[n066,04]:=	nLin066											//transferencia para terceiros e/ou filiais
			aCols[n067,04]:=	nLin067											//restituicao de credito (em moeda)
			aCols[n068,04]:=	nLin068											//quitacao de auto de infracao
			aCols[n069,04]:=	nLin069											//estorno de credito apropriado indevidamente
			aCols[n070,04]:=	nLin070											//outras deducoes/compensacoes
			aCols[n071,04]:=	aCols[n062,04]+aCols[n063,04]+aCols[n064,04]+aCols[n065,04]+aCols[n066,04]+;
								aCols[n067,04]+aCols[n068,04]+aCols[n069,04]+aCols[n070,04]	//total das deducoes/compensacoes
			aCols[n072,04]:=	aCols[n061,04]-aCols[n071,04]					//saldo credor do ICMS da linha obs a transportar para periodo seguinte
			//Quadro E - Demonstrativo de debitos referentes a mercadoria importada para comercializacao
			aCols[n073,04]:= 	nLin073								   			//total das mercadorias importadas
			aCols[n074,04]:=	nLin074											//outros acrescimos sobre importacao
			aCols[n075,04]:=	aCols[n073,04]+aCols[n074,04]                	//total das operacoes de importacao
			aCols[n076,04]:=	nLin076                                			//total das entradas no periodo
			aCols[n077,04]:=	Iif(aCols[n076,04]>0,((aCols[n075,04]/aCols[n076,04])*100),0)		//percentual das operacoes de importacao
			aCols[n078,04]:=	nLin078							 				//ICMS sobre importacao
			aCols[n079,04]:=	Iif(aCols[n077,04]<30,0,((aCols[n076,04]*(aCols[n077,04]-30))/100))	//mercadorias importadas excedentes
			aCols[n080,04]:=	Iif(aCols[n075,04]<=0,0,(aCols[n078,04]*(aCols[n079,04]/aCols[n075,04])))	//ICMS sobre importacao excedente
			aCols[n081,04]:=	((aCols[n080,04]*aCols[n022,04])/100)			//ICMS sobre importacao excedente nao sujeito a incentivo
			aCols[n082,04]:=	aCols[n078,04]-aCols[n080,04]					//ICMS sobre importacao sujeito a incentivo
			aCols[n083,04]:= 	((aCols[n078,04]*(100-aCols[n022,04]))/100)	//ICMS sobre importacao da parcela nao financiada
			aCols[n084,04]:=	aCols[n081,04]+aCols[n083,04]					//saldo do ICMS sobre importacao a pagar
  		Else
			//Quadro A - Proporcao dos creditos apropriados
			aCols[n001,04]:= 	Round(nLin001,2)								//saidas de oper. incentivadas
			aCols[n002,04]:=	Round(nLin002,2)			   			   					//todal das saidas
			aCols[n003,04]:=	Iif(aCols[n002,04]>0,Round(((aCols[n001,04]/aCols[n002,04])*100),2),0)	//percentual
			aCols[n004,04]:=	Round(nLin004,2)											//creditos por entrada
			aCols[n005,04]:=	Round(nLin005,2)											//outros creditos
			aCols[n006,04]:=	Round(nLin006,2)											//estorno de debitos
			aCols[n007,04]:=	Round(nLin007,2)											//saldo credor do periodo anterior
			aCols[n008,04]:=	Round(aCols[n004,04]+aCols[n005,04]+aCols[n006,04]+aCols[n007,04],2)	//total dos creditos do periodo
			aCols[n009,04]:=	Iif(aCols[n003,04]>0,Round(((aCols[n003,04]*aCols[n008,04])/100),2),0)	//credito para operacoes incentivadas
			aCols[n010,04]:=	Round(aCols[n008,04]-aCols[n009,04],2)		 			//credito para operacoes nao incentivadas
			aCols[n0101,04]:=	Round(nLin0101,2)											//Outros Creditos Correspondente Primeira Parcela de ICMS
			//Quadro B - Apuracao dos saldos das operacoes incentivadas
			aCols[n011,04]:= 	Round(nLin011,2)											//debito do IMCS das operacoes incentivadas
			aCols[n012,04]:=	Round(nLin012,2)											//outros debitos das operacoes incentivadas
			aCols[n013,04]:=	Round(nLin013,2)											//estorno de debito das operacoes incentivadas
			aCols[n014,04]:=	Round(aCols[n009,04]+aCols[n0101,04],2)				//creditos das operacoes incentivadas
			aCols[n015,04]:=	Round(nLin015,2)											//deducoes das operacoes incentivadas
			aCols[n016,04]:=	Round(aCols[n043,04],2)									//credito ref. saldo credor do period. operacoes nao incentivadas
			aCols[n017,04]:=	Iif((aCols[n011,04]+aCols[n012,04]+aCols[n013,04])-;
								(aCols[n014,04]+aCols[n015,04])>0,Round((aCols[n011,04]+aCols[n012,04]+aCols[n013,04]),2)-;
								Round((aCols[n014,04]+aCols[n015,04]+aCols[n016,04]),2),0)		//saldo devedor do ICMS das operacoes incentivadas
			aCols[n018,04]:=	Round(nLin018,2)											//ICMS por media
			aCols[n019,04]:=	Round(nLin019,2)											//deducoes/compensacoes
			aCols[n020,04]:=	Round(aCols[n018,04]-aCols[n019,04],2)		 			//saldo do ICMS a pagar por media
			aCols[n021,04]:= 	Iif(aCols[n017,04]>aCols[n018,04],Round(aCols[n017,04]-aCols[n018,04],2),0)//ICMS base para Fomentar/produzir
			aCols[n022,04]:=	Round(nLin022,2)											//percentagem do financiamento
			aCols[n023,04]:=	Round(((aCols[n021,04]*aCols[n022,04])/100),2)			//ICMS sujeito a financiamento
			aCols[n024,04]:=	Round(nLin024,2)											//ICMS excedente nao sujeito ao incentivo
			aCols[n025,04]:=	Iif((aCols[n023,04]-aCols[n024,04])>0,Round(aCols[n023,04]-aCols[n024,04],2),0)//ICMS Financiado
			aCols[n026,04]:=	Iif(aCols[n021,04]>aCols[n023,04],Round(aCols[n021,04]-aCols[n023,04],2),0)	//saldo do ICMS da parcela nao financiada
			aCols[n027,04]:=	Round(nLin027,2)											//deducoes/compensacoes
			aCols[n028,04]:=	Round(aCols[n026,04]-aCols[n027,04],2)					//saldo do ICMS a pagar da parcela nao financiada
			aCols[n029,04]:=	Iif((aCols[n014,04]+aCols[n015,04])>;
								(aCols[n011,04]+aCols[n012,04]+aCols[n013,04]),Round((aCols[n014,04]+aCols[n015,04]),2)-;
								Round((aCols[n011,04]+aCols[n012,04]+aCols[n013,04]),2),0)	//saldo credor do periodo
			nLin030 := Round((aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]-aCols[n036,04]-aCols[n037,04]),2)
			aCols[n030,04]:=	Iif(aCols[n029,04]==0,0,Iif(nLin030<=0,0,Iif(nLin030>=aCols[n029,04],Round(aCols[n029,04],2),Round(nLin030,2))))	//saldo credor do periodo utilizado nas operacoes nao incentivadas
			aCols[n031,04]:=	Round(aCols[n029,04]-aCols[n030,04],2)		 			//saldo credor a transportar para o periodo seguinte
			//Quadro C - Apuracao dos saldos das operacoes nao incentivadas
			aCols[n032,04]:= 	Round(nLin032,2)											//debito do ICMS das operacoes nao incentivadas
			aCols[n033,04]:=	Round(nLin033,2)											//outros debitos das opercaoes nao incentivadas
			aCols[n034,04]:=	Round(nLin034,2)             		                   	//estorno de creditos  das operacoes nao incentivadas
			aCols[n035,04]:=	Round(nLin035,2)                     		           	//ICMS excedente nao sujeito ao incentivo
			aCols[n036,04]:=	Round(aCols[n010,04],2)									//credito para operacoes nao incentivadas
			aCols[n037,04]:=	Round(nLin037,2)											//deducoes das operacoes nao incentivadas
			aCols[n038,04]:=	Round(aCols[n030,04],2)									//credito referente a saldo credor do periodo das operacoes incentivadas
			aCols[n039,04]:=	Iif((aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04])>;
								(aCols[n036,04]+aCols[n037,04]+aCols[n038,04]),Round((aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]),2)-;
								Round((aCols[n036,04]+aCols[n037,04]+aCols[n038,04]),2),0)	//saldo devedor do ICMS das operacoes nao incentivadas
			aCols[n040,04]:=	Round(nLin040,2)											//deducoes/compensacoes
			aCols[n041,04]:=	Round(aCols[n039,04]-aCols[n040,04],2)		 			//saldo do ICMS a pagar das operacoes nao incentivadas
			aCols[n042,04]:=	Iif((aCols[n036,04]+aCols[n037,04])>;
								(aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]),Round((aCols[n036,04]+aCols[n037,04]),2)-;
								Round((aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04]),2),0)	//saldo credor do periodo
			nLin043	 := Round(((aCols[n036,04]+aCols[n037,04])-(aCols[n032,04]+aCols[n033,04]+aCols[n034,04]+aCols[n035,04])),2)
			nLin043_2:= Round((aCols[n011,04]+aCols[n012,04]+aCols[n013,04]-aCols[n014,04]-aCols[n015,04]),2)
			aCols[n043,04]:=	Iif(nLin043<=0,0,Iif(nLin043_2<=0,0,Iif(nLin043_2>=nLin043,Round(nLin043,2),Round(nLin043_2,2))))//saldo credor do periodo utilizado nas operacoes incentivadas
			aCols[n044,04]:=	Round(aCols[n042,04]-aCols[n043,04],2)		 			//saldo credor a transp. para o periodo seguinte
			//Quadro D - Demontrativo e utilizacao dos creditos escriturados na linha observacoes do LRA
		    //Demonstrativo dos creditos
			aCols[n045,04]:= 	Round(nLin045,2)											//saldo credor da linha observacoes do periodo anterior
			aCols[n046,04]:=	Round(nLin046,2)											//cheque moradia
			aCols[n047,04]:=	Round(nLin047,2)											//protege Goias
			aCols[n048,04]:=	Round(nLin048,2)											//proesporte
			aCols[n049,04]:=	Round(nLin049,2)											//goyazes
			aCols[n050,04]:=	Round(nLin050,2)											//pagamento antecipado
			aCols[n051,04]:=	Round(nLin051,2)											//ICMS recebido em transferencia
			aCols[n052,04]:=	Round(nLin052,2)											//credito do fabricante de papel e embalagem reciclado
			aCols[n053,04]:=	Round(nLin053,2)											//credito relativo ao adicional de 2% na aliquota do ICMS
			aCols[n054,04]:=	Round(nLin054,2)						 					//ajuste do valor pago por forca de legislacao
			aCols[n055,04]:= 	Round(nLin055,2)						 					//credito especial para investimento
			aCols[n056,04]:=	Round(nLin056,2)											//credito industrial na producao interna do biodiesel
			aCols[n057,04]:=	Round(nLin057,2)											//credito na producao de alcool anidro
			aCols[n058,04]:=	Round(nLin058,2)											//credito do ICMS pago em DARE
			aCols[n059,04]:=	Round(nLin059,2) 										//credito outorgado para industrial de veiculo automotor
			aCols[n060,04]:=	Round(nLin060,2)											//outros creditos autorizados pela legislacao tributaria
			aCols[n061,04]:=	Round(aCols[n045,04]+aCols[n046,04]+aCols[n047,04]+aCols[n048,04]+aCols[n049,04]+;
								aCols[n050,04]+aCols[n051,04]+aCols[n052,04]+aCols[n053,04]+aCols[n054,04]+;
								aCols[n055,04]+aCols[n056,04]+aCols[n057,04]+aCols[n058,04]+aCols[n059,04]+aCols[n060,04],2)					//total dos creditos
			//Utilizacao dos creditos
			aCols[n062,04]:= 	Round(nLin062,2)											//ICMS Retido via DARE ou de ST
			aCols[n063,04]:=	Round(nLin063,2)											//ICMS sobre operacoes nao incentivadas
			aCols[n064,04]:=	Round(nLin064,2)											//ICMS por media
			aCols[n065,04]:=	Round(nLin065,2)											//ICMS da percela nao financiada
			aCols[n066,04]:=	Round(nLin066,2)											//transferencia para terceiros e/ou filiais
			aCols[n067,04]:=	Round(nLin067,2)											//restituicao de credito (em moeda)
			aCols[n068,04]:=	Round(nLin068,2)											//quitacao de auto de infracao
			aCols[n069,04]:=	Round(nLin069,2)											//estorno de credito apropriado indevidamente
			aCols[n070,04]:=	Round(nLin070,2)											//outras deducoes/compensacoes
			aCols[n071,04]:=	Round(aCols[n062,04]+aCols[n063,04]+aCols[n064,04]+aCols[n065,04]+aCols[n066,04]+;
								aCols[n067,04]+aCols[n068,04]+aCols[n069,04]+aCols[n070,04],2)	//total das deducoes/compensacoes
			aCols[n072,04]:=	Round(aCols[n061,04]-aCols[n071,04],2)					//saldo credor do ICMS da linha obs a transportar para periodo seguinte
			//Quadro E - Demonstrativo de debitos referentes a mercadoria importada para comercializacao
			aCols[n073,04]:= 	Round(nLin073,2)								   			//total das mercadorias importadas
			aCols[n074,04]:=	Round(nLin074,2)											//outros acrescimos sobre importacao
			aCols[n075,04]:=	Round(aCols[n073,04]+aCols[n074,04],2)                	//total das operacoes de importacao
			aCols[n076,04]:=	Round(nLin076,2)                                			//total das entradas no periodo
			aCols[n077,04]:=	Iif(aCols[n076,04]>0,Round(((aCols[n075,04]/aCols[n076,04])*100),2),0)		//percentual das operacoes de importacao
			aCols[n078,04]:=	Round(nLin078,2)							 				//ICMS sobre importacao
			aCols[n079,04]:=	Iif(aCols[n077,04]<30,0,Round(((aCols[n076,04]*(aCols[n077,04]-30))/100),2))	//mercadorias importadas excedentes
			aCols[n080,04]:=	Iif(aCols[n075,04]<=0,0,Round((aCols[n078,04]*(aCols[n079,04]/aCols[n075,04])),2))	//ICMS sobre importacao excedente
			aCols[n081,04]:=	Round(((aCols[n080,04]*aCols[n022,04])/100),2)			//ICMS sobre importacao excedente nao sujeito a incentivo
			aCols[n082,04]:=	Round(aCols[n078,04]-aCols[n080,04],2)					//ICMS sobre importacao sujeito a incentivo
			aCols[n083,04]:= 	Round(((aCols[n078,04]*(100-aCols[n022,04]))/100),2)	//ICMS sobre importacao da parcela nao financiada
			aCols[n084,04]:=	Round(aCols[n081,04]+aCols[n083,04],2)					//saldo do ICMS sobre importacao a pagar
  		EndIf
	ElseIf lAtuFomGO .And. !lApurBA  // So passo aqui se ele nao carregar os valores da apuracao ja feita anteriormente, ou seja, se estiver refazendo a apuracao nao atualizo pq ja peguei os valores pelo array aDadIC

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifico os valores array aCols5 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		n003_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="003"}) //estorno de credito
		n004_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="004"}) //total das saidas
		n005_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="005"}) //entradas com credito do imposto
		n006_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="006"}) //outros creditos
		n007_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="007"}) //estorno de debitos
		n009_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="009"}) //saldo credor do periodo anterior
		n010_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="010"}) //total das entradas
		n021_05	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="021"}) //transferencia de credito

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Totalizacao das linhas expandidas³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		a953TotLin(n003_05,"003",lFirst,aCols5)
		a953TotLin(n006_05,"006",lFirst,aCols5)
		a953TotLin(n007_05,"007",lFirst,aCols5)

  		If !(SuperGetMV("MV_RNDFOM",,.F.)) //Nao arredonda os valores

			//Quadro A - Proporcao dos creditos apropriados
			aCols8[n001,04]:= 	aCols8[n001,04]									//saidas de oper. incentivadas
			aCols8[n002,04]:=	nTotFom							 				//todal das saidas (com excecao das oper. incentivadas)
			aCols8[n003,04]:=	Iif(aCols8[n002,04]>0,((aCols8[n001,04]/aCols8[n002,04])*100),0)//percentual
			aCols8[n004,04]:=	IIf(!Empty(GetNewPar("MV_CRDFOM",'')), nCrdFom, aCols5[n005_05,04] ) //creditos por entrada
			aCols8[n005,04]:=	aCols5[n006_05,04]								//outros creditos
			aCols8[n006,04]:=	aCols5[n007_05,04]								//estorno de debitos
			aCols8[n007,04]:=	aCols5[n009_05,04]								//saldo credor do periodo anterior
			aCols8[n008,04]:=	aCols8[n004,04]+aCols8[n005,04]+aCols8[n006,04]+aCols8[n007,04]	//total dos creditos do periodo
			aCols8[n009,04]:=	Iif(aCols8[n003,04]>0,((aCols8[n003,04]*aCols8[n008,04])/100),0)	//credito para operacoes incentivadas
			aCols8[n010,04]:=	aCols8[n008,04]-aCols8[n009,04]		 			//credito para operacoes nao incentivadas

			//Quadro B - Apuracao dos saldos das operacoes incentivadas
			aCols8[n011,04]:= 	aCols8[n011,04]									//debito do IMCS das operacoes incentivadas
			aCols8[n012,04]:=	aCols8[n012,04]									//outros debitos das operacoes incentivadas
			aCols8[n013,04]:=	aCols8[n013,04]									//estorno de debito das operacoes incentivadas
			aCols8[n014,04]:=	aCols8[n009,04]									//creditos das operacoes incentivadas
			aCols8[n015,04]:=	aCols8[n015,04]									//deducoes das operacoes incentivadas
			aCols8[n016,04]:=	aCols8[n043,04]									//credito ref. saldo credor do period. operacoes nao incentivadas
			aCols8[n017,04]:=	Iif((aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04])-;
								(aCols8[n014,04]+aCols8[n015,04])>0,(aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04])-;
								(aCols8[n014,04]+aCols8[n015,04]+aCols8[n016,04]),0)		//saldo devedor do ICMS das operacoes incentivadas
			aCols8[n018,04]:=	aCols8[n018,04]									//ICMS por media
			aCols8[n019,04]:=	aCols8[n019,04]									//deducoes/compensacoes
			aCols8[n020,04]:=	aCols8[n018,04]-aCols8[n019,04]		 			//saldo do ICMS a pagar por media
			aCols8[n021,04]:= 	Iif(aCols8[n017,04]>aCols8[n018,04],aCols8[n017,04]-aCols8[n018,04],0)	//ICMS base para Fomentar/produzir
			aCols8[n022,04]:=	aCols8[n022,04]									//percentagem do financiamento
			aCols8[n023,04]:=	((aCols8[n021,04]*aCols8[n022,04])/100)		//ICMS sujeito a financiamento
			aCols8[n024,04]:=	aCols8[n024,04]									//ICMS excedente nao sujeito ao incentivo
			aCols8[n025,04]:=	Iif((aCols8[n023,04]-aCols8[n024,04])>0,aCols8[n023,04]-aCols8[n024,04],0)	//ICMS Financiado
			aCols8[n026,04]:=	Iif(aCols8[n021,04]>aCols8[n023,04],aCols8[n021,04]-aCols8[n023,04],0)		//saldo do ICMS da parcela nao financiada
			aCols8[n027,04]:=	aCols8[n027,04]									//deducoes/compensacoes
			aCols8[n028,04]:=	aCols8[n026,04]-aCols8[n027,04]					//saldo do ICMS a pagar da parcela nao financiada
			aCols8[n029,04]:=	Iif((aCols8[n014,04]+aCols8[n015,04])>;
								(aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04]),(aCols8[n014,04]+aCols8[n015,04])-;
								(aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04]),0)		//saldo credor do periodo
			nLin030 := (aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]-aCols8[n036,04]-aCols8[n037,04])
			aCols8[n030,04]:=	Iif(aCols8[n029,04]==0,0,Iif(nLin030<=0,0,Iif(nLin030>=aCols8[n029,04],aCols8[n029,04],nLin030)))	//saldo credor do periodo utilizado nas operacoes nao incentivadas
			aCols8[n031,04]:=	aCols8[n029,04]-aCols8[n030,04]		 			//saldo credor a transportar para o periodo seguinte

			//Quadro C - Apuracao dos saldos das operacoes nao incentivadas
			aCols8[n032,04]:= 	aCols8[n032,04]									//debito do ICMS das operacoes nao incentivadas
			aCols8[n033,04]:=	aCols8[n033,04]									//outros debitos das opercaoes nao incentivadas
			aCols8[n034,04]:=	aCols8[n034,04]                                	//estorno de creditos  das operacoes nao incentivadas
			aCols8[n035,04]:=	aCols8[n035,04]                                	//ICMS excedente nao sujeito ao incentivo
			aCols8[n036,04]:=	aCols8[n010,04]									//credito para operacoes nao incentivadas
			aCols8[n037,04]:=	aCols8[n037,04]									//deducoes das operacoes nao incentivadas
			aCols8[n038,04]:=	aCols8[n030,04]									//credito referente a saldo credor do periodo das operacoes incentivadas
			aCols8[n039,04]:=	Iif((aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04])>;
								(aCols8[n036,04]+aCols8[n037,04]+aCols8[n038,04]),(aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04])-;
								(aCols8[n036,04]+aCols8[n037,04]+aCols8[n038,04]),0)	//saldo devedor do ICMS das operacoes nao incentivadas
			aCols8[n040,04]:=	aCols8[n040,04]									//deducoes/compensacoes
			aCols8[n041,04]:=	aCols8[n039,04]-aCols8[n040,04]		 			//saldo do ICMS a pagar das operacoes nao incentivadas
			aCols8[n042,04]:=	Iif((aCols8[n036,04]+aCols8[n037,04])>;
								(aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]),(aCols8[n036,04]+aCols8[n037,04])-;
								(aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]),0)	//saldo credor do periodo
			nLin043	 := ((aCols8[n036,04]+aCols8[n037,04])-(aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]))
			nLin043_2:= (aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04]-aCols8[n014,04]-aCols8[n015,04])
			aCols8[n043,04]:=	Iif(nLin043<=0,0,Iif(nLin043_2<=0,0,Iif(nLin043_2>=nLin043,nLin043,nLin043_2)))	//saldo credor do periodo utilizado nas operacoes incentivadas
			aCols8[n044,04]:=	aCols8[n042,04]-aCols8[n043,04]		 			//saldo credor a transp. para o periodo seguinte

			//Quadro D - Demontrativo e utilizacao dos creditos escriturados na linha observacoes do LRA
		    //Demonstrativo dos creditos
			aCols8[n045,04]:= 	aCols8[n045,04]									//saldo credor da linha observacoes do periodo anterior
			aCols8[n046,04]:=	aCols8[n046,04]									//cheque moradia
			aCols8[n047,04]:=	aCols8[n047,04]									//protege Goias
			aCols8[n048,04]:=	aCols8[n048,04]									//proesporte
			aCols8[n049,04]:=	aCols8[n049,04]									//goyazes
			aCols8[n050,04]:=	aCols8[n050,04]									//pagamento antecipado
			aCols8[n051,04]:=	aCols8[n051,04]									//ICMS recebido em transferencia
			aCols8[n052,04]:=	aCols8[n052,04]									//credito do fabricante de papel e embalagem reciclado
			aCols8[n053,04]:=	aCols8[n053,04]									//credito relativo ao adicional de 2% na aliquota do ICMS
			aCols8[n054,04]:=	aCols8[n054,04]						 			//ajuste do valor pago por forca de legislacao
			aCols8[n055,04]:= 	aCols8[n055,04]						 			//credito especial para investimento
			aCols8[n056,04]:=	aCols8[n056,04]									//credito industrial na producao interna do biodiesel
			aCols8[n057,04]:=	aCols8[n057,04]									//credito na producao de alcool anidro
			aCols8[n058,04]:=	aCols8[n058,04]									//credito do ICMS pago em DARE
			aCols8[n059,04]:=	aCols8[n059,04] 								//credito outorgado para industrial de veiculo automotor
			aCols8[n060,04]:=	aCols8[n060,04]									//outros creditos autorizados pela legislacao tributaria
			aCols8[n061,04]:=	aCols8[n045,04]+aCols8[n046,04]+aCols8[n047,04]+aCols8[n048,04]+aCols8[n049,04]+;
								aCols8[n050,04]+aCols8[n051,04]+aCols8[n052,04]+aCols8[n053,04]+aCols8[n054,04]+;
								aCols8[n055,04]+aCols8[n056,04]+aCols8[n057,04]+aCols8[n058,04]+aCols8[n059,04]+aCols8[n060,04]					//total dos creditos

			//Utilizacao dos creditos
			aCols8[n062,04]:= 	aCols8[n062,04]									//ICMS Retido via DARE ou de ST
			aCols8[n063,04]:=	aCols8[n063,04]									//ICMS sobre operacoes nao incentivadas
			aCols8[n064,04]:=	aCols8[n064,04]									//ICMS por media
			aCols8[n065,04]:=	aCols8[n065,04]									//ICMS da percela nao financiada
			aCols8[n066,04]:=	Iif(n021_05>0,aCols5[n021_05,04],aCols8[n066,04])	//transferencia para terceiros e/ou filiais
			aCols8[n067,04]:=	aCols8[n067,04]									//restituicao de credito (em moeda)
			aCols8[n068,04]:=	aCols8[n068,04]									//quitacao de auto de infracao
			aCols8[n069,04]:=	aCols5[n003_05,04]								//estorno de credito apropriado indevidamente
			aCols8[n070,04]:=	aCols8[n070,04]									//outras deducoes/compensacoes
			aCols8[n071,04]:=	aCols8[n062,04]+aCols8[n063,04]+aCols8[n064,04]+aCols8[n065,04]+aCols8[n066,04]+;
								aCols8[n067,04]+aCols8[n068,04]+aCols8[n069,04]+aCols8[n070,04]	//total das deducoes/compensacoes
			aCols8[n072,04]:=	aCols8[n061,04]-aCols8[n071,04]					//saldo credor do ICMS da linha obs a transportar para periodo seguinte

			//Quadro E - Demonstrativo de debitos referentes a mercadoria importada para comercializacao
			aCols8[n073,04]:= 	aCols8[n073,04]									//total das mercadorias importadas
			aCols8[n074,04]:=	aCols8[n074,04]									//outros acrescimos sobre importacao
			aCols8[n075,04]:=	aCols8[n073,04]+aCols8[n074,04]                	//total das operacoes de importacao
			//total das entradas no periodo
			IF !Empty(GetNewPar("MV_CRDFOM",'')) .AND. aCols5[n010_05,04] - (aCols5[n010_05,04] - nCrdFom) > 0
				aCols8[n076,04]:= aCols5[n010_05,04] - (aCols5[n010_05,04] - nCrdFom)
			Else
				aCols8[n076,04]:= aCols5[n010_05,04]
			EndIF
			aCols8[n077,04]:=	Iif(aCols8[n076,04]>0,((aCols8[n075,04]/aCols8[n076,04])*100),0)				//percentual das operacoes de importacao
			aCols8[n078,04]:=	aCols8[n078,04]									//ICMS sobre importacao
			aCols8[n079,04]:=	Iif(aCols8[n077,04]<30,0,((aCols8[n076,04]*(aCols8[n077,04]-30))/100))		//mercadorias importadas excedentes
			aCols8[n080,04]:=	Iif(aCols8[n075,04]<=0,0,(aCols8[n078,04]*(aCols8[n079,04]/aCols8[n075,04])))//ICMS sobre importacao excedente
			aCols8[n081,04]:=	((aCols8[n080,04]*aCols8[n022,04])/100)		//ICMS sobre importacao excedente nao sujeito a incentivo
			aCols8[n082,04]:=	aCols8[n078,04]-aCols8[n080,04]					//ICMS sobre importacao sujeito a incentivo
			aCols8[n083,04]:= 	((aCols8[n078,04]*(100-aCols8[022,04]))/100)	//ICMS sobre importacao da parcela nao financiada
			aCols8[n084,04]:=	aCols8[n081,04]+aCols8[n083,04]					//saldo do ICMS sobre importacao a pagar
		Else
			//Quadro A - Proporcao dos creditos apropriados
			aCols8[n001,04]:= 	Round(aCols8[n001,04],2)									//saidas de oper. incentivadas
			aCols8[n002,04]:=	Round(nTotFom,2)				 				//todal das saidas (com excecao das oper. incentivadas)
			aCols8[n003,04]:=	Iif(aCols8[n002,04]>0,Round(((aCols8[n001,04]/aCols8[n002,04])*100),2),0)//percentual
			aCols8[n004,04]:=	Round(IIf(!Empty(GetNewPar("MV_CRDFOM",'')), nCrdFom, aCols5[n005_05,04]),2) //creditos por entrada
			aCols8[n005,04]:=	Round(aCols5[n006_05,04],2)								//outros creditos
			aCols8[n006,04]:=	Round(aCols5[n007_05,04],2)								//estorno de debitos
			aCols8[n007,04]:=	Round(aCols5[n009_05,04],2)								//saldo credor do periodo anterior
			aCols8[n008,04]:=	Round(aCols8[n004,04]+aCols8[n005,04]+aCols8[n006,04]+aCols8[n007,04],2)	//total dos creditos do periodo
			aCols8[n009,04]:=	Iif(aCols8[n003,04]>0,Round(((aCols8[n003,04]*aCols8[n008,04])/100),2),0)	//credito para operacoes incentivadas
			aCols8[n010,04]:=	Round(aCols8[n008,04]-aCols8[n009,04],2)		 			//credito para operacoes nao incentivadas

			//Quadro B - Apuracao dos saldos das operacoes incentivadas
			aCols8[n011,04]:= 	Round(aCols8[n011,04],2)									//debito do IMCS das operacoes incentivadas
			aCols8[n012,04]:=	Round(aCols8[n012,04],2)									//outros debitos das operacoes incentivadas
			aCols8[n013,04]:=	Round(aCols8[n013,04],2)									//estorno de debito das operacoes incentivadas
			aCols8[n014,04]:=	Round(aCols8[n009,04],2)									//creditos das operacoes incentivadas
			aCols8[n015,04]:=	Round(aCols8[n015,04],2)									//deducoes das operacoes incentivadas
			aCols8[n016,04]:=	Round(aCols8[n043,04],2)									//credito ref. saldo credor do period. operacoes nao incentivadas
			aCols8[n017,04]:=	Iif((aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04])-;
								(aCols8[n014,04]+aCols8[n015,04])>0,Round((aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04]),2)-;
								Round((aCols8[n014,04]+aCols8[n015,04]+aCols8[n016,04]),2),0)		//saldo devedor do ICMS das operacoes incentivadas
			aCols8[n018,04]:=	Round(aCols8[n018,04],2)									//ICMS por media
			aCols8[n019,04]:=	Round(aCols8[n019,04],2)									//deducoes/compensacoes
			aCols8[n020,04]:=	Round(aCols8[n018,04]-aCols8[n019,04],2)		 			//saldo do ICMS a pagar por media
			aCols8[n021,04]:= 	Iif(aCols8[n017,04]>aCols8[n018,04],Round(aCols8[n017,04]-aCols8[n018,04],2),0)	//ICMS base para Fomentar/produzir
			aCols8[n022,04]:=	Round(aCols8[n022,04],2)									//percentagem do financiamento
			aCols8[n023,04]:=	Round(((aCols8[n021,04]*aCols8[n022,04])/100),2)		//ICMS sujeito a financiamento
			aCols8[n024,04]:=	Round(aCols8[n024,04],2)									//ICMS excedente nao sujeito ao incentivo
			aCols8[n025,04]:=	Iif((aCols8[n023,04]-aCols8[n024,04])>0,Round(aCols8[n023,04]-aCols8[n024,04],2),0)	//ICMS Financiado
			aCols8[n026,04]:=	Iif(aCols8[n021,04]>aCols8[n023,04],Round(aCols8[n021,04]-aCols8[n023,04],2),0)		//saldo do ICMS da parcela nao financiada
			aCols8[n027,04]:=	Round(aCols8[n027,04],2)									//deducoes/compensacoes
			aCols8[n028,04]:=	Round(aCols8[n026,04]-aCols8[n027,04],2)					//saldo do ICMS a pagar da parcela nao financiada
			aCols8[n029,04]:=	Iif((aCols8[n014,04]+aCols8[n015,04])>;
								(aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04]),Round((aCols8[n014,04]+aCols8[n015,04]),2)-;
								Round((aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04]),2),0)		//saldo credor do periodo
			nLin030 := Round((aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]-aCols8[n036,04]-aCols8[n037,04]),2)
			aCols8[n030,04]:=	Iif(aCols8[n029,04]==0,0,Iif(nLin030<=0,0,Iif(nLin030>=aCols8[n029,04],Round(aCols8[n029,04],2),Round(nLin030,2))))	//saldo credor do periodo utilizado nas operacoes nao incentivadas
			aCols8[n031,04]:=	Round(aCols8[n029,04]-aCols8[n030,04],2)		 			//saldo credor a transportar para o periodo seguinte

			//Quadro C - Apuracao dos saldos das operacoes nao incentivadas
			aCols8[n032,04]:= 	Round(aCols8[n032,04],2)									//debito do ICMS das operacoes nao incentivadas
			aCols8[n033,04]:=	Round(aCols8[n033,04],2)									//outros debitos das opercaoes nao incentivadas
			aCols8[n034,04]:=	Round(aCols8[n034,04],2)                                	//estorno de creditos  das operacoes nao incentivadas
			aCols8[n035,04]:=	Round(aCols8[n035,04],2)                                	//ICMS excedente nao sujeito ao incentivo
			aCols8[n036,04]:=	Round(aCols8[n010,04],2)									//credito para operacoes nao incentivadas
			aCols8[n037,04]:=	Round(aCols8[n037,04],2)									//deducoes das operacoes nao incentivadas
			aCols8[n038,04]:=	Round(aCols8[n030,04],2)									//credito referente a saldo credor do periodo das operacoes incentivadas
			aCols8[n039,04]:=	Iif((aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04])>;
								(aCols8[n036,04]+aCols8[n037,04]+aCols8[n038,04]),Round((aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]),2)-;
								Round((aCols8[n036,04]+aCols8[n037,04]+aCols8[n038,04]),2),0)	//saldo devedor do ICMS das operacoes nao incentivadas
			aCols8[n040,04]:=	Round(aCols8[n040,04],2)									//deducoes/compensacoes
			aCols8[n041,04]:=	Round(aCols8[n039,04]-aCols8[n040,04],2)		 			//saldo do ICMS a pagar das operacoes nao incentivadas
			aCols8[n042,04]:=	Iif((aCols8[n036,04]+aCols8[n037,04])>;
								(aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]),Round((aCols8[n036,04]+aCols8[n037,04]),2)-;
								Round((aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04]),2),0)	//saldo credor do periodo
			nLin043	 := Round(((aCols8[n036,04]+aCols8[n037,04])-(aCols8[n032,04]+aCols8[n033,04]+aCols8[n034,04]+aCols8[n035,04])),2)
			nLin043_2:= Round((aCols8[n011,04]+aCols8[n012,04]+aCols8[n013,04]-aCols8[n014,04]-aCols8[n015,04]),2)
			aCols8[n043,04]:=	Iif(nLin043<=0,0,Iif(nLin043_2<=0,0,Iif(nLin043_2>=nLin043,Round(nLin043,2),Round(nLin043_2,2))))	//saldo credor do periodo utilizado nas operacoes incentivadas
			aCols8[n044,04]:= 	Round(aCols8[n042,04]-aCols8[n043,04],2)		 			//saldo credor a transp. para o periodo seguinte

			//Quadro D - Demontrativo e utilizacao dos creditos escriturados na linha observacoes do LRA
		    //Demonstrativo dos creditos
			aCols8[n045,04]:= 	Round(aCols8[n045,04],2)									//saldo credor da linha observacoes do periodo anterior
			aCols8[n046,04]:=	Round(aCols8[n046,04],2)									//cheque moradia
			aCols8[n047,04]:=	Round(aCols8[n047,04],2)									//protege Goias
			aCols8[n048,04]:=	Round(aCols8[n048,04],2)									//proesporte
			aCols8[n049,04]:=	Round(aCols8[n049,04],2)									//goyazes
			aCols8[n050,04]:=	Round(aCols8[n050,04],2)									//pagamento antecipado
			aCols8[n051,04]:=	Round(aCols8[n051,04],2)									//ICMS recebido em transferencia
			aCols8[n052,04]:=	Round(aCols8[n052,04],2)									//credito do fabricante de papel e embalagem reciclado
			aCols8[n053,04]:=	Round(aCols8[n053,04],2)									//credito relativo ao adicional de 2% na aliquota do ICMS
			aCols8[n054,04]:=	Round(aCols8[n054,04],2)						 			//ajuste do valor pago por forca de legislacao
			aCols8[n055,04]:= 	Round(aCols8[n055,04],2)						 			//credito especial para investimento
			aCols8[n056,04]:=	Round(aCols8[n056,04],2)									//credito industrial na producao interna do biodiesel
			aCols8[n057,04]:=	Round(aCols8[n057,04],2)									//credito na producao de alcool anidro
			aCols8[n058,04]:=	Round(aCols8[n058,04],2)									//credito do ICMS pago em DARE
			aCols8[n059,04]:=	Round(aCols8[n059,04],2) 								//credito outorgado para industrial de veiculo automotor
			aCols8[n060,04]:=	Round(aCols8[n060,04],2)									//outros creditos autorizados pela legislacao tributaria
			aCols8[n061,04]:=	Round(aCols8[n045,04]+aCols8[n046,04]+aCols8[n047,04]+aCols8[n048,04]+aCols8[n049,04]+;
								aCols8[n050,04]+aCols8[n051,04]+aCols8[n052,04]+aCols8[n053,04]+aCols8[n054,04]+;
								aCols8[n055,04]+aCols8[n056,04]+aCols8[n057,04]+aCols8[n058,04]+aCols8[n059,04]+aCols8[n060,04],2)					//total dos creditos

			//Utilizacao dos creditos
			aCols8[n062,04]:= 	Round(aCols8[n062,04],2)									//ICMS Retido via DARE ou de ST
			aCols8[n063,04]:=	Round(aCols8[n063,04],2)									//ICMS sobre operacoes nao incentivadas
			aCols8[n064,04]:=	Round(aCols8[n064,04],2)									//ICMS por media
			aCols8[n065,04]:=	Round(aCols8[n065,04],2)									//ICMS da percela nao financiada
			aCols8[n066,04]:=	Iif(n021_05>0,Round(aCols5[n021_05,04],2),Round(aCols8[n066,04],2))	//transferencia para terceiros e/ou filiais
			aCols8[n067,04]:=	Round(aCols8[n067,04],2)									//restituicao de credito (em moeda)
			aCols8[n068,04]:=	Round(aCols8[n068,04],2)									//quitacao de auto de infracao
			aCols8[n069,04]:=	Round(aCols5[n003_05,04],2)								//estorno de credito apropriado indevidamente
			aCols8[n070,04]:=	Round(aCols8[n070,04],2)									//outras deducoes/compensacoes
			aCols8[n071,04]:=	Round(aCols8[n062,04]+aCols8[n063,04]+aCols8[n064,04]+aCols8[n065,04]+aCols8[n066,04]+;
								aCols8[n067,04]+aCols8[n068,04]+aCols8[n069,04]+aCols8[n070,04],2)	//total das deducoes/compensacoes
			aCols8[n072,04]:=	Round(aCols8[n061,04]-aCols8[n071,04],2)					//saldo credor do ICMS da linha obs a transportar para periodo seguinte

			//Quadro E - Demonstrativo de debitos referentes a mercadoria importada para comercializacao
			aCols8[n073,04]:= 	Round(aCols8[n073,04],2)									//total das mercadorias importadas
			aCols8[n074,04]:=	Round(aCols8[n074,04],2)									//outros acrescimos sobre importacao
			aCols8[n075,04]:=	Round(aCols8[n073,04]+aCols8[n074,04],2)                	//total das operacoes de importacao
			//total das entradas no periodo
			IF !Empty(GetNewPar("MV_CRDFOM",'')) .AND. Round(aCols5[n010_05,04],2)   - (Round(aCols5[n010_05,04],2) - nCrdFom) > 0
				aCols8[n076,04]:= Round(aCols5[n010_05,04],2)   - (Round(aCols5[n010_05,04],2)   - nCrdFom)
			Else
				aCols8[n076,04]:= Round(aCols5[n010_05,04],2)
			EndIF
			aCols8[n077,04]:=	Iif(aCols8[n076,04]>0,Round(((aCols8[n075,04]/aCols8[n076,04])*100),2),0)				//percentual das operacoes de importacao
			aCols8[n078,04]:=	Round(aCols8[n078,04],2)									//ICMS sobre importacao
			aCols8[n079,04]:=	Iif(aCols8[n077,04]<30,0,Round(((aCols8[n076,04]*(aCols8[n077,04]-30))/100),2))		//mercadorias importadas excedentes
			aCols8[n080,04]:=	Iif(aCols8[n075,04]<=0,0,Round((aCols8[n078,04]*(aCols8[n079,04]/aCols8[n075,04])),2))//ICMS sobre importacao excedente
			aCols8[n081,04]:=	Round(((aCols8[n080,04]*aCols8[n022,04])/100),2)		//ICMS sobre importacao excedente nao sujeito a incentivo
			aCols8[n082,04]:=	Round(aCols8[n078,04]-aCols8[n080,04],2)					//ICMS sobre importacao sujeito a incentivo
			aCols8[n083,04]:= 	Round(((aCols8[n078,04]*(100-aCols8[022,04]))/100),2)	//ICMS sobre importacao da parcela nao financiada
			aCols8[n084,04]:=	Round(aCols8[n081,04]+aCols8[n083,04],2)					//saldo do ICMS sobre importacao a pagar
		EndIf
	EndIf
Elseif lApurBA
	 //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	 //³Exportacoes             ³
	 //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	 n001:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="001"}) //por saidas com debito do imposto
	 n002:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="002"}) //outros debitos
	 n003:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="003"}) //estorno de creditos
	 n004:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="004"}) //Total das saidas
	 n005:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="005"}) //entradas com credito do imposto
	 n006:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="006"}) //outros creditos
	 n007:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="007"}) //estorno de debitos
	 n008:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="008"}) //Sub-total das entradas
	 n009:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="009"}) //Saldo credor do periodo anterior
	 n010:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="010"}) //Total das entradas
	 n011:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="011"}) //Saldo devedor
	 n012:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="012"}) //deducoes
	 n013:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="013"}) //imposto a recolher
	 n014:=	Ascan(If(lFirst,aCols8,aCols),{|x|x[1]=="014"}) //Saldo Credor

    //Totalizacao das linhas expandidas
     a953TotLin(n002,"002",lFirst,aCols8)
	 a953TotLin(n003,"003",lFirst,aCols8)
	 a953TotLin(n006,"006",lFirst,aCols8)
	 a953TotLin(n007,"007",lFirst,aCols8)
	 a953TotLin(n012,"012",lFirst,aCols8)

	If !lFirst
		If ReadVar() =="M->NVALOR"
			nLin001	:=	If(aCols[n,1]==aCols[n001,1],M->NVALOR,aCols[n001,4])
			nLin005	:=	If(aCols[n,1]==aCols[n005,1],M->NVALOR,aCols[n005,4])
			nLin009	:=	If(aCols[n,1]==aCols[n009,1],M->NVALOR,aCols[n009,4])
		Elseif empty(ReadVar())
			nLin001	:=	aCols[n001,4]
			nLin005	:=	aCols[n005,4]
			nLin009	:=	aCols[n009,4]
		EndIf
		nLin002	:=	aCols[n002,4]
		nLin003	:=	aCols[n003,4]
		nLin006	:=	aCols[n006,4]
		nLin007	:=	aCols[n007,4]
		nLin012	:=	aCols[n012,4]

		aCols[n004,04]	:=	nLin001+nLin002+nLin003 //total saidas
		aCols[n008,04]	:=	nLin005+nLin006+nLin007 //sub-total entradas
		aCols[n010,04]	:=	aCols[n008,4]+nLin009 //total entradas
		aCols[n011,04]	:=	If((aCols[n004,4]-n002Cons)-(aCols[n010,4]-n006Cons)>=0,(aCols[n004,4]-n002Cons)-(aCols[n010,4]-n006Cons),0) //Saldo Devedor( 004-010 )
		aCols[n013,04]	:=	If(aCols[n011,4]-nLin012>=0,aCols[n011,4]-nLin012,0) //Imposto a recolher( 011-012 )
		aCols[n014,04]	:=	If(((aCols[n010,4]-n006Cons)-(aCols[n004,4]-n002Cons))+nLin012>=0,((aCols[n010,4]-n006Cons)-(aCols[n004,4]-n002Cons))+nLin012,0) //Saldo Credor ( 010-004 )
	Else
		aCols8[n004,04]:=	aCols8[n001,4]+aCols8[n002,4]+aCols8[n003,4] //total saidas
		aCols8[n008,04]:=	aCols8[n005,4]+aCols8[n006,4]+aCols8[n007,4] //sub-total entradas
		aCols8[n010,04]:=	aCols8[n008,4]+aCols8[n009,4] //total entradas
		aCols8[n011,04]:=	If((aCols8[n004,4]-n002Cons)-aCols8[n010,4]>=0,(aCols8[n004,4]-n002Cons)-aCols8[n010,4],0) //Saldo Devedor( 004-010 )
		aCols8[n013,04]:=	If(aCols8[n011,4]-aCols8[n012,4]>=0,aCols8[n011,4]-aCols8[n012,4],0) //Imposto a recolher( 011-012 )
		aCols8[n014,04]:=	If(((aCols8[n010,4]-n006Cons)-(aCols8[n004,4]-n002Cons))+aCols8[n012,4]>=0,((aCols8[n010,4]-n006Cons)-(aCols8[n004,4]-n002Cons))+aCols8[n012,4],0) //Saldo Credor ( 010-004 )
	EndIf
   	 //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	 //³Outras hipoteses            ³
	 //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	 n001	:= 	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="001"}) //por saidas com debito do imposto
	 n002	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="002"}) //outros debitos
	 n003	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="003"}) //estorno de creditos
	 n004	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="004"}) //Total das saidas
	 n005	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="005"}) //entradas com credito do imposto
	 n006	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="006"}) //outros creditos
	 n007	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="007"}) //estorno de debitos
	 n008	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="008"}) //Sub-total das entradas
	 n009	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="009"}) //Saldo credor do periodo anterior
	 n010	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="010"}) //Total das entradas
	 n011	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="011"}) //Saldo devedor
	 n012 	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="012"}) //deducoes
	 n013	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="013"}) //imposto a recolher
	 n014 	:=	Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="014"}) //Saldo Credor

	 //Totalizacao das linhas expandidas
	 a953TotLin(n002,"002",lFirst,aCols9)
	 a953TotLin(n003,"003",lFirst,aCols9)
	 a953TotLin(n006,"006",lFirst,aCols9)
	 a953TotLin(n007,"007",lFirst,aCols9)
	 a953TotLin(n012,"012",lFirst,aCols9)

	If !lFirst
		If ReadVar() =="M->NVALOR"
			nLin001	:=	If(aCols[n,1]==aCols[n001,1],M->NVALOR,aCols[n001,4])
			nLin005	:=	If(aCols[n,1]==aCols[n005,1],M->NVALOR,aCols[n005,4])
			nLin009	:=	If(aCols[n,1]==aCols[n009,1],M->NVALOR,aCols[n009,4])
		Elseif empty(ReadVar())
			nLin001	:=	aCols[n001,4]
			nLin005	:=	aCols[n005,4]
			nLin009	:=	aCols[n009,4]
		EndIf
		nLin002	:=	aCols[n002,4]
		nLin003	:=	aCols[n003,4]
		nLin006	:=	aCols[n006,4]
		nLin007	:=	aCols[n007,4]
		nLin012	:=	aCols[n012,4]

		aCols[n004,04]	:=	nLin001+nLin002+nLin003 //total saidas
		aCols[n008,04]	:=	nLin005+nLin006+nLin007 //sub-total entradas
		aCols[n010,04]	:=	aCols[n008,4]+nLin009 //total entradas
		aCols[n011,04]	:=	If((aCols[n004,4]-n002Cons)-(aCols[n010,4]-n006Cons)>=0,(aCols[n004,4]-n002Cons)-(aCols[n010,4]-n006Cons),0) //Saldo Devedor( 004-010 )
		aCols[n013,04]	:=	If(aCols[n011,4]-nLin012>=0,aCols[n011,4]-nLin012,0) //Imposto a recolher( 011-012 )
		aCols[n014,04]	:=	If(((aCols[n010,4]-n006Cons)-(aCols[n004,4]-n002Cons))+nLin012>=0,((aCols[n010,4]-n006Cons)-(aCols[n004,4]-n002Cons))+nLin012,0) //Saldo Credor ( 010-004 )
	Else
		aCols9[n004,04]:=	aCols9[n001,4]+aCols9[n002,4]+aCols9[n003,4] //total saidas
		aCols9[n008,04]:=	aCols9[n005,4]+aCols9[n006,4]+aCols9[n007,4] //sub-total entradas
		aCols9[n010,04]:=	aCols9[n008,4]+aCols9[n009,4] //total entradas
		aCols9[n011,04]:=	If((aCols9[n004,4]-n002Cons)-aCols9[n010,4]>=0,(aCols9[n004,4]-n002Cons)-aCols9[n010,4],0) //Saldo Devedor( 004-010 )
		aCols9[n013,04]:=	If(aCols9[n011,4]-aCols9[n012,4]>=0,aCols9[n011,4]-aCols9[n012,4],0) //Imposto a recolher( 011-012 )
		aCols9[n014,04]:=	If(((aCols9[n010,4]-n006Cons)-(aCols9[n004,4]-n002Cons))+aCols9[n012,4]>=0,((aCols9[n010,4]-n006Cons)-(aCols9[n004,4]-n002Cons))+aCols9[n012,4],0) //Saldo Credor ( 010-004 )
	EndIf
Elseif lACredAcu //#vitor01 Calculo Apuracao A953Saldo - lACredAcu
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Exportacoes             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	n002:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="002"}) //Debitos
	n003:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="003"}) //Total debitos
	n004:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="004"}) //Creditos
	n005:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="005"}) //Total Creditos
	n006:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="006"}) //Creditos periodo
	n007:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="007"}) //Total Creditos periodo
	n008:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="008"}) //Credito Anterior extra apuração
	n009:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="009"}) //Credito utilizado extra apuração
	n010:= Ascan(If(lFirst,aCols9,aCols),{|x|x[1]=="010"}) //Saldo Credito  extra apuração
	n014:= Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="014"}) //Saldo Credor

	//Totalizacao das linhas expandidas
	a953TotLin(n002,"002",lFirst,aCols9)
	a953TotLin(n004,"004",lFirst,aCols9)
	a953TotLin(n006,"006",lFirst,aCols9)

	If !lFirst
		If ReadVar() =="M->NVALOR"
			nLin002	:=	If(aCols[n,1]==aCols[n002,1],M->NVALOR,aCols[n002,4])
			nLin004	:=	If(aCols[n,1]==aCols[n004,1],M->NVALOR,aCols[n004,4])
			nLin006	:=	If(aCols[n,1]==aCols[n006,1],M->NVALOR,aCols[n006,4])
		Elseif empty(ReadVar())
			nLin002	:=	aCols[n002,4]
			nLin004	:=	aCols[n004,4]
			nLin006	:=	aCols[n006,4]
		EndIf
		nLin002	:=	aCols[n002,4]
		nLin004	:=	aCols[n004,4]
		nLin006	:=	aCols[n006,4]

		aCols[n003,04]	:=	nLin002 //total saidas
		aCols[n005,04]	:=	nLin003 //sub-total entradas
		aCols[n007,04]	:=	nLin006 //total entradas
	Else
		aCols9[n003,04]	:=	aCols9[n002,4] //total saidas
		aCols9[n005,04]	:=	aCols9[n004,4] //sub-total entradas
		aCols9[n007,04]	:=	aCols9[n006,4] //total entradas
		aCols9[n006,04]	:=	aCols5[n014,4] //Saldo Credor no periodo
	EndIf

ElseIf lDebEsp

	n900 := Ascan(If(lFirst,aCols10,aCols),{|x|x[1]=="900"}) //Saldo Credor
	n901 := Ascan(If(lFirst,aCols10,aCols),{|x|x[1]=="901"}) //Saldo Credor

	//Totalizacao das linhas expandidas
	a953TotLin(n900,"900",lFirst,aCols10)
	a953TotLin(n901,"901",lFirst,aCols10)

	//Atualiza valores de créditos extra apuração
	If lUsaSped .AND. !lFirst .And.  ReadVar() =="M->NVALOR" .And. !Empty(aCols[n,7]) .And. lCmpExtra
		//Se alterar o valor e houver código de lançamento preenchido então irei verificar se precisa atualizar informações de extra apuração.
		AtuExtra(Alltrim(aCols[n,7]),&(ReadVar()),aCols[n,8],'1')
	EndIf

ElseIf lDifal

	n001	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="001"}) //por saidas com debito do imposto
	n002	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="002"}) //por saidas com debito do imposto
	n003	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="003"}) //por saidas com debito do imposto
	n004	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="004"}) //por saidas com debito do imposto
	n005	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="005"}) //por saidas com debito do imposto
	n006	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="006"}) //por saidas com debito do imposto
	n007	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="007"}) //por saidas com debito do imposto
	n008	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="008"}) //por saidas com debito do imposto
	n009	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="009"}) //por saidas com debito do imposto
	n010	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="010"}) //por saidas com debito do imposto
	n011	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="011"}) //por saidas com debito do imposto
	n012	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="012"}) //por saidas com debito do imposto
	n013	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="013"}) //por saidas com debito do imposto
	n014	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="014"}) //por saidas com debito do imposto
	n015	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="015"}) //por saidas com debito do imposto
	n016	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="016"}) //por saidas com debito do imposto
	n017	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="017"}) //por saidas com debito do imposto

	If Year(dDtIni) >= 2017
		n018	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="018"}) //por saidas com debito do imposto
		n019	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="019"}) //por saidas com debito do imposto
		n020	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="020"}) //por saidas com debito do imposto
		n021	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="021"}) //por saidas com debito do imposto
		n022	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="022"}) //por saidas com debito do imposto
		n023	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="023"}) //por saidas com debito do imposto
		n024	:= 	Ascan(If(lFirst,aCols13,aCols),{|x|x[1]=="024"}) //por saidas com debito do imposto
	EndIf

	a953TotLin(n002,"002",lFirst,aCols13)
	a953TotLin(n003,"003",lFirst,aCols13)
	a953TotLin(n006,"006",lFirst,aCols13)
	a953TotLin(n007,"007",lFirst,aCols13)
	a953TotLin(n009,"009",lFirst,aCols13)
	a953TotLin(n012,"012",lFirst,aCols13)

	If Year(dDtIni) >= 2017
		a953TotLin(n014,"014",lFirst,aCols13)
		a953TotLin(n015,"015",lFirst,aCols13)
		a953TotLin(n017,"017",lFirst,aCols13)
		a953TotLin(n018,"018",lFirst,aCols13)
		a953TotLin(n019,"019",lFirst,aCols13)
		a953TotLin(n021,"021",lFirst,aCols13)
		a953TotLin(n024,"024",lFirst,aCols13)
	EndIf
	If ReadVar() =="M->NVALOR"
		nLin001	:=	If(aCols[n,1]==aCols[n001,1],M->NVALOR,aCols[n001,4])
		nLin002	:=	If(aCols[n,1]==aCols[n002,1],M->NVALOR,aCols[n002,4])
		nLin003	:=	If(aCols[n,1]==aCols[n003,1],M->NVALOR,aCols[n003,4])
		nLin004	:=	If(aCols[n,1]==aCols[n004,1],M->NVALOR,aCols[n004,4])
		nLin005	:=	If(aCols[n,1]==aCols[n005,1],M->NVALOR,aCols[n005,4])
		nLin006	:=	If(aCols[n,1]==aCols[n006,1],M->NVALOR,aCols[n006,4])
		nLin007	:=	If(aCols[n,1]==aCols[n007,1],M->NVALOR,aCols[n007,4])
		nLin008	:=	If(aCols[n,1]==aCols[n008,1],M->NVALOR,aCols[n008,4])
		nLin009	:=	If(aCols[n,1]==aCols[n009,1],M->NVALOR,aCols[n009,4])
		nLin010	:=	If(aCols[n,1]==aCols[n010,1],M->NVALOR,aCols[n010,4])
		nLin011	:=	0
		nLin012	:=	If(aCols[n,1]==aCols[n012,1],M->NVALOR,aCols[n012,4])
		nLin013	:=	If(aCols[n,1]==aCols[n013,1],M->NVALOR,aCols[n013,4])
		nLin014	:=	If(aCols[n,1]==aCols[n014,1],M->NVALOR,aCols[n014,4])
		nLin015	:=	If(aCols[n,1]==aCols[n015,1],M->NVALOR,aCols[n015,4])
		nLin016	:=	If(aCols[n,1]==aCols[n016,1],M->NVALOR,aCols[n016,4])
		nLin017	:=	0
		If Year(dDtIni) >= 2017
			nLin017	:=	If(aCols[n,1]==aCols[n017,1],M->NVALOR,aCols[n017,4])
			nLin018	:=	If(aCols[n,1]==aCols[n018,1],M->NVALOR,aCols[n018,4])
			nLin019	:=	If(aCols[n,1]==aCols[n019,1],M->NVALOR,aCols[n019,4])
			nLin020	:=	If(aCols[n,1]==aCols[n020,1],M->NVALOR,aCols[n020,4])
			nLin021	:=	If(aCols[n,1]==aCols[n021,1],M->NVALOR,aCols[n021,4])
			nLin022	:=	If(aCols[n,1]==aCols[n022,1],M->NVALOR,aCols[n022,4])
			nLin023	:=	0
			nLin024	:=	If(aCols[n,1]==aCols[n024,1],M->NVALOR,aCols[n024,4])
		EndIf

		//Atualiza valores de créditos extra apuração
		If !lFirst .And.  ReadVar() =="M->NVALOR" .And. !Empty(aCols[n,5]) .And. lCmpExtra
			//Se alterar o valor e houver código de lançamento preenchido então irei verificar se precisa atualizar informações de extra apuração.
			AtuExtra(Alltrim(aCols[n,5]),&(ReadVar()),aCols[n,7],'1')
		EndIf

	Elseif empty(ReadVar())
		nLin001	:=	aCols[n001,4]
		nLin002	:=	aCols[n002,4]
		nLin003	:=	aCols[n003,4]
		nLin004	:=	aCols[n004,4]
		nLin005	:=	aCols[n005,4]
		nLin006	:=	aCols[n006,4]
		nLin007	:=	aCols[n007,4]
		nLin008	:=	aCols[n008,4]
		nLin009	:=	aCols[n009,4]
		nLin010	:=	aCols[n010,4]
		nLin011	:=	0
		nLin012	:=	aCols[n012,4]
		nLin013	:=	aCols[n013,4]
		nLin014	:=	aCols[n014,4]
		nLin015	:=	aCols[n015,4]
		nLin016	:=	aCols[n016,4]
		nLin017	:=	0

		If Year(dDtIni) >= 2017
			nLin017	:=	If(aCols[n,1]==aCols[n017,1],M->NVALOR,aCols[n017,4])
			nLin018	:=	If(aCols[n,1]==aCols[n018,1],M->NVALOR,aCols[n018,4])
			nLin019	:=	If(aCols[n,1]==aCols[n019,1],M->NVALOR,aCols[n019,4])
			nLin020	:=	If(aCols[n,1]==aCols[n020,1],M->NVALOR,aCols[n020,4])
			nLin021	:=	If(aCols[n,1]==aCols[n021,1],M->NVALOR,aCols[n021,4])
			nLin022	:=	If(aCols[n,1]==aCols[n022,1],M->NVALOR,aCols[n022,4])
			nLin023	:=	0
			nLin024	:=	If(aCols[n,1]==aCols[n024,1],M->NVALOR,aCols[n024,4])
		EndIf
	EndIf
	nLin001 := aCols[n001,04]
	nLin002 := aCols[n002,04]
	nLin003 := aCols[n003,04]
	nLin004 := aCols[n004,04]
	nLin005 := aCols[n005,04]
	nLin006 := aCols[n006,04]
	nLin007 := aCols[n007,04]
	nLin009 := aCols[n009,04]

	nLin008	:= (nLin001+nLin002+nLin003) - (TratarValor(nLin004)+TratarValor(nLin005)+TratarValor(nLin006)+TratarValor(nLin007)) // Saldo Devedor de DIFAL
	nLin010	:= nLin008 - nLin009 //VAlor a recolher do Difal

	nLin018 := aCols[n018,04]
	nLin014 := aCols[n014,04]
	nLin015 := aCols[n015,04]
	nLin016 := aCols[n016,04]
	nLin017 := aCols[n017,04]
	nLin018 := aCols[n018,04]
	nLin019 := aCols[n019,04]
	nLin021 := aCols[n021,04]

	If Year(dDtIni) < 2017
		nLin016	:= nLin013 - (nLin014+nLin015)
	Else
		nLin020 := (nLin013+nLin014+nLin015) - (TratarValor(nLin016)+TratarValor(nLin017)+TratarValor(nLin018)+TratarValor(nLin019)) // Saldo Devedor de FCP
		nLin022 := nLin020 - nLin021 //VAlor a recolher do FCP
	EndIf

	If nLin008 < 0
		nLin011	+= nLin008 * -1
		nLin008	:= 0
		nLin011	+= nLin009
		nLin010 	:= 0
	ElseIF nLin010 < 0
		nLin011	+= nLin010 * -1
		nLin010 	:= 0
	EndIf

	aCols[n008,04]	:= nLin008//saldo devedor difal //20
	aCols[n010,04]	:= nLin010	//valor recolher difal //22
	aCols[n011,04]	:= nLin011 //saldo credor difal //23

	If Year(dDtIni) < 2017
	If nLin016 < 0
		nLin017	+= nLin016
		nLin016	:= 0
	EndIf
	aCols[n016,04]	:= nLin016//Valor a recolher FECP
	aCols[n017,04]	:= nLin017	//Saldo credor Fecp
	Else
		If nLin020 < 0
			nLin023	+= nLin020 * -1
			nLin020	:= 0
			nLin023	+= nLin021
			nLin022	:= 0
		ElseIF nLin022 < 0
			nLin023	+= nLin022 * -1
			nLin022 	:= 0
		EndIf
		aCols[n020,04]	:= nLin020 //saldo devedor FCP
		aCols[n022,04]	:= nLin022 //Valor a recolher FECP
		aCols[n023,04]	:= nLin023 //Saldo credor Fecp
	EndIf

Else
	n001	:= 	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="001"}) //por saidas com debito do imposto
	n002	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="002"}) //outros debitos
	n003	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="003"}) //estorno de creditos
	n004	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="004"}) //Total das saidas
	n005	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="005"}) //entradas com credito do imposto
	n006	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="006"}) //outros creditos
	n007	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="007"}) //estorno de debitos
	n008	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="008"}) //Sub-total das entradas
	n009	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="009"}) //Saldo credor do periodo anterior
	n010	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="010"}) //Total das entradas
	n011	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="011"}) //Saldo devedor
	n012 	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="012"}) //deducoes
	n013	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="013"}) //imposto a recolher
	n014 	:=	Ascan(If(lFirst,aCols5,aCols),{|x|x[1]=="014"}) //Saldo Credor

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Totalizacao das linhas expandidas³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	a953TotLin(n002,"002",lFirst,aCols5)
	a953TotLin(n003,"003",lFirst,aCols5)
	a953TotLin(n006,"006",lFirst,aCols5)
	a953TotLin(n007,"007",lFirst,aCols5)
	a953TotLin(n012,"012",lFirst,aCols5)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Estorno RICMS-DF Inciso V art. 60 Decreto 18.955³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If GetMv("MV_ESTADO",,"") == "DF"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Criado parametro MV_GESTCRE que permite ao usuario que o estorno de credito nao³
	//³seja realizado automaticamente pelo sistema.                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If GetNewPar("MV_GESTCRE",.T.)
			aCols5[6][4]+=ProcRICMDF(dDtIni,dDtFim)
		EndIf
	EndIf

	If !lFirst
		If ReadVar() =="M->NVALOR"
			nLin001	:=	If(aCols[n,1]==aCols[n001,1],M->NVALOR,aCols[n001,4])
			nLin005	:=	If(aCols[n,1]==aCols[n005,1],M->NVALOR,aCols[n005,4])
			nLin009	:=	If(aCols[n,1]==aCols[n009,1],M->NVALOR,aCols[n009,4])
		Elseif empty(ReadVar())
			nLin001	:=	aCols[n001,4]
			nLin005	:=	aCols[n005,4]
			nLin009	:=	aCols[n009,4]
		EndIf
		nLin002	:=	aCols[n002,4]
		nLin003	:=	aCols[n003,4]
		nLin006	:=	aCols[n006,4]
		nLin007	:=	aCols[n007,4]
		nLin012	:=	aCols[n012,4]

		aCols[n004,04]	:=	nLin001+nLin002+nLin003 //total saidas
		aCols[n008,04]	:=	nLin005+nLin006+nLin007 //sub-total entradas
		aCols[n010,04]	:=	aCols[n008,4]+nLin009 //total entradas
		aCols[n011,04]	:=	If((aCols[n004,4]-n002Cons)-(aCols[n010,4]-n006Cons)>=0,(aCols[n004,4]-n002Cons)-(aCols[n010,4]-n006Cons),0) //Saldo Devedor( 004-010 )
		aCols[n013,04]	:=	If(aCols[n011,4]-nLin012>=0,aCols[n011,4]-nLin012,0) //Imposto a recolher( 011-012 )
		aCols[n014,04]	:=	If(((aCols[n010,4]-n006Cons)-(aCols[n004,4]-n002Cons))+nLin012>=0,((aCols[n010,4]-n006Cons)-(aCols[n004,4]-n002Cons))+nLin012,0) //Saldo Credor ( 010-004 )

		nPosRecST	:=	Ascan(aCols6,{|x|x[1]=="015"}) //imposto a recolher Substituicao Tributaria
		nVlrTitulo	:= aCols[n013,4]+aCols6[nPosRecST,4]

		//Atualiza valores de créditos extra apuração
		If lUsaSped .AND. ReadVar() =="M->NVALOR" .And. lUsaSped .And. !Empty(aCols[n,7]) .And. lCmpExtra
			//Se alterar o valor e houver código de lançamento preenchido então irei verificar se precisa atualizar informações de extra apuração.
			AtuExtra(Alltrim(aCols[n,7]),&(ReadVar()),aCols[n,8],'1')
		EndIf

	Else
		aCols5[n004,04]:=	aCols5[n001,4]+aCols5[n002,4]+aCols5[n003,4] //total saidas
		aCols5[n008,04]:=	aCols5[n005,4]+aCols5[n006,4]+aCols5[n007,4] //sub-total entradas
		aCols5[n010,04]:=	aCols5[n008,4]+aCols5[n009,4] //total entradas
		aCols5[n011,04]:=	If((aCols5[n004,4]-n002Cons)-aCols5[n010,4]>=0,(aCols5[n004,4]-n002Cons)-aCols5[n010,4],0) //Saldo Devedor( 004-010 )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualizacao do valor das deducoes|
		//³referente a lei 4533 - RJ        |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SuperGetMv("MV_ESTADO", .T., "") == "RJ" .And. GetNewPar("MV_REGESP",0) > 0
			nValAtu 		:=	If(aCols5[n011,4]-aCols5[n012,4]>=0,aCols5[n011,4]-aCols5[n012,4],0)
			aCols5[n012,4]	:=	nValAtu
		EndIf

		aCols5[n013,04]:=	If(aCols5[n011,4]-aCols5[n012,4]>=0,aCols5[n011,4]-aCols5[n012,4],0) //Imposto a recolher( 011-012 )
        If lArt488MG
            aCols5[n013,04] := aCols5[n013,04] - nVlrArt488MG
		EndIf
		aCols5[n014,04]:=	If(((aCols5[n010,4]-n006Cons)-(aCols5[n004,4]-n002Cons))+aCols5[n012,4]>=0,((aCols5[n010,4]-n006Cons)-(aCols5[n004,4]-n002Cons))+aCols5[n012,4],0) //Saldo Credor ( 010-004 )

    	nPosRecST	:=	Ascan(aCols6,{|x|x[1]=="015"}) //imposto a recolher Substituicao Tributaria
        nVlrTitulo	:= aCols5[n013,4]+aCols6[nPosRecST,4]

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualizacao do valor das deducoes|
		//³	referente a lei 4533 - RJ       |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SuperGetMv("MV_ESTADO", .T., "") == "RJ" .And. GetNewPar("MV_REGESP",0) > 0
			For n01202 := 1 to Len(aCols5)
				If Alltrim(aCols5[n01202][2])=="012.02" //Deducoes - Conforme Lei 4533 de 04/04/05
					aCols5[n01202][4] 	:= nValAtu
					Exit
				EndIf
			Next
		EndIf
	EndIf

	// Incentivos Fiscais
	If !lFirst .And. !lST .And. !lFomentar .And. !lApurBA .And. !lDebEsp .And. !lArt488MG .And. !lACredAcu
		// -- DESENVOLVE BA --
		If !Empty( aMvDes ) .And. GetNewPar( 'MV_ESTADO' ) == 'BA'
			If aScan( aCols , { |x| Alltrim(x[2]) == aMvDes[8] } ) > 0
				aCols[ aScan( aCols , { |x| Alltrim(x[2]) == aMvDes[ 8 ] } ) , 4 ] := ( ( nAuxIncent + aCols[ n011 , 4 ] ) * aMvDes[ 2 ] ) / 100
				a953TotLin( n012 , "012" , lFirst , aCols )
				nLin012	:=	aCols[ n012 , 4 ]
				aCols[ n013 , 04 ] := If( aCols[ n011 , 4 ] - nLin012 >= 0 , aCols[ n011 , 4 ] - nLin012 , 0 ) //Imposto a recolher( 011-012 )
			EndIf
		// -- PRODEC SC --
		Elseif !Empty( aMvPrdc ) .And. GetNewPar( 'MV_ESTADO' ) == 'SC'
			If aScan( aCols, { |x| Alltrim(x[2]) == aMvPrdc[8] } ) > 0
				aCols[ aScan( aCols, { |x| Alltrim(x[2]) == aMvPrdc[ 8 ] } ) , 4 ] := ( aCols[n011,4] * aMvPrdc[ 2 ] ) / 100
				a953TotLin( n012 , "012" , lFirst , aCols )
				nLin012	:=	aCols[ n012 , 4 ]
				aCols[ n013 , 04 ] := If( aCols[ n011 , 4 ] - nLin012 >= 0 , aCols[ n011 , 4 ] - nLin012 , 0 ) //Imposto a recolher( 011-012 )
			EndIf
		EndIf
	EndIf
EndIf

Return .T.

Static Function TratarValor(nValor)
	Local nValorRet	:=0
	If nValor <> Nil
		nValorRet = nValor
	EndIf
Return nValorRet


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFunction  ³AddCols   ºAutor  ³Andreia dos Santos     º Data ³  13/08/01º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³ Adiciona linha no acols para "outros Debitos","outros crediº±±
±±º          ³tos","Estorno de debitos","Estorno de debitos","Deducoes" e º±±
±±º          ³"Debitos Especiais"                                         º±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: GetDados                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function AddAcols(oGetDad,lExtraApur)
Local i, nPos
Local cTipo
Local nPosl := len(aCols[1])
Local cLinha	:= ''
Local nCont	:= 0
Default lExtraApur	:= .F.


	If oGetDad <> NIL
		If !LGERDIFAL //Apuração detalhada do DIFAL está acionada
			If lProcDifal
				Do case
					Case aCols[n][1] == "002" .And. alltrim(aCols[n][2]) =="002.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "003" .And. alltrim(aCols[n][2]) =="003.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "006" .And. alltrim(aCols[n][2]) =="006.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "007" .And. alltrim(aCols[n][2]) =="007.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "009" .And. alltrim(aCols[n][2]) =="009.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "012" .And. alltrim(aCols[n][2]) =="012.00" ; cLinha := aCols[n][1]

					//FECP
					Case aCols[n][1] == "014" .And. alltrim(aCols[n][2]) =="014.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "015" .And. alltrim(aCols[n][2]) =="015.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "018" .And. alltrim(aCols[n][2]) =="018.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "019" .And. alltrim(aCols[n][2]) =="019.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "021" .And. alltrim(aCols[n][2]) =="021.00" ; cLinha := aCols[n][1]
					Case aCols[n][1] == "024" .And. alltrim(aCols[n][2]) =="024.00" ; cLinha := aCols[n][1]
				EndCase

				If !Empty(cLinha)
					nPos := n-1
					Aeval(aCols,{|x| If(x[1]==cLinha .And. x[nPosl]==.F.,nPos++,)})
				    nPos++
					aCols := Asize(aCols,Len(aCols)+1)
					aCols := Ains(aCols,nPos)
					aCols[nPos] := Array(Len(aHeader)+1)

					For i := 1 To Len(aHeader)
						cTipo := aHeader[i][8]
						If cTipo $ "CM"
							aCols[nPos][i] := Space(aHeader[i][4])
						ElseIf cTipo == "N"
							aCols[nPos][i] := 0
						ElseIf cTipo == "L"
							aCols[nPos][i] := .F.
						ElseIf cTipo == "D"
							aCols[nPos][i] := Ctod("")
						EndIf
					Next
					aCols[nPos][1] := cLinha
					aCols[nPos][7] := '2'+'-MANUAL'
					aCols[nPos][Len(aHeader)+1] := .F.
					oGetDad:GOTO(nPos)
					Eval(oGetDad:obrowse:bDrawSelect)
				EndIf
			EndIf

		ElseIf aCols[n][1] == "002" .And. alltrim(aCols[n][2]) =="002.00"


				nPos := n-1
			    Aeval(aCols,{|x| If(x[1]=="002" .And. x[nPosl]==.F.,nPos++,)})
			    nPos++
				aCols := Asize(aCols,Len(aCols)+1)
				aCols := Ains(aCols,nPos)
				aCols[nPos] := Array(Len(aHeader)+1)

				For i := 1 To Len(aHeader)
					cTipo := aHeader[i][8]
					If cTipo $ "CM"
						aCols[nPos][i] := Space(aHeader[i][4])
					ElseIf cTipo == "N"
						aCols[nPos][i] := 0
					ElseIf cTipo == "L"
						aCols[nPos][i] := .F.
					ElseIf cTipo == "D"
						aCols[nPos][i] := Ctod("")
					EndIf
				Next
				aCols[nPos][1] := "002"
				If SuperGetMv("MV_USASPED",,.T.)
					aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
					aCols[nPos][Len(aHeader)+1] := .F.
				Else
					aCols[nPos][Len(aHeader)+1] := .F.
				EndIf

				oGetDad:GOTO(nPos)
				Eval(oGetDad:obrowse:bDrawSelect)

		ElseIf aCols[n][1] == "003" .And. alltrim(aCols[n][2]) =="003.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="003" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "003"
			aCols[nPos][Len(aHeader)+1] := .F.
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
		ElseIf aCols[n][1] == "006" .And. alltrim(aCols[n][2]) =="006.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="006" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "006"
			//Conforme FNC 11560/2012
			//Tratado somente para Outros Creditos para RegE111 e RegE113 do SpedFiscal
			If SuperGetMv("MV_USASPED",,.T.)
				aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
				aCols[nPos][Len(aHeader)+1] := .F.
			Else
				aCols[nPos][7] := .F.
			EndIf
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
		ElseIf aCols[n][1] == "007" .And. alltrim(aCols[n][2]) =="007.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="007" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "007"
			//Conforme FNC 11560/2012
			//Tratado somente para Outros Creditos para RegE111 e RegE113 do SpedFiscal
			If SuperGetMv("MV_USASPED",,.T.)
				aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
				aCols[nPos][Len(aHeader)+1] := .F.
			Else
				aCols[nPos][Len(aHeader)+1] := .F.
			EndIf
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
		ElseIf aCols[n][1] == "008" .And. alltrim(aCols[n][2]) =="008.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="008" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "008"
			If SuperGetMv("MV_USASPED",,.T.)
				aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
				aCols[nPos][Len(aHeader)+1] := .F.
			Else
				aCols[nPos][Len(aHeader)+1] := .F.
			EndIf
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
		ElseIf aCols[n][1] == "012" .And. alltrim(aCols[n][2]) =="012.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="012" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "012"
			If SuperGetMv("MV_USASPED",,.T.)
				aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
				aCols[nPos][Len(aHeader)+1] := .F.
			Else
				aCols[nPos][Len(aHeader)+1] := .F.
			EndIf
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
		ElseIf aCols[n][1] == "014" .And. alltrim(aCols[n][2]) =="014.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="014" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "014"
			If SuperGetMv("MV_USASPED",,.T.)
				aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
				aCols[nPos][Len(aHeader)+1] := .F.
			Else
				aCols[nPos][Len(aHeader)+1] := .F.
			EndIf
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
		elseIf aCols[n][1] == "900" .And. alltrim(aCols[n][2]) =="900.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="900" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "900"
			If SuperGetMv("MV_USASPED",,.T.)
				aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
				aCols[nPos][Len(aHeader)+1] := .F.
			Else
				aCols[nPos][Len(aHeader)+1] := .F.
			EndIf
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
		elseIf aCols[n][1] == "901" .And. alltrim(aCols[n][2]) =="901.00"
			nPos := n-1
			Aeval(aCols,{|x| If(x[1]=="901" .And. x[nPosl]==.F.,nPos++,)})
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)

			For i := 1 To Len(aHeader)
				cTipo := aHeader[i][8]
				If cTipo $ "CM"
					aCols[nPos][i] := Space(aHeader[i][4])
				ElseIf cTipo == "N"
					aCols[nPos][i] := 0
				ElseIf cTipo == "L"
					aCols[nPos][i] := .F.
				ElseIf cTipo == "D"
					aCols[nPos][i] := Ctod("")
				EndIf
			Next
			aCols[nPos][1] := "901"
			If SuperGetMv("MV_USASPED",,.T.)
				aCols[nPos][8] := SubStr(a953TpLanc("M"),1,1)
				aCols[nPos][Len(aHeader)+1] := .F.
			Else
				aCols[nPos][Len(aHeader)+1] := .F.
			EndIf
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
	    ElseIf lExtraApur .And. lExtApuCon

			nPos := n-1
		    nPos++
			aCols := Asize(aCols,Len(aCols)+1)
			aCols := Ains(aCols,nPos)
			aCols[nPos] := Array(Len(aHeader)+1)
			aCols[nPos][1]	:= "br_azul"
			aCols[nPos][2] := "INFORME CODIGO AQUI"
			aCols[nPos][3]	:= ""
			aCols[nPos][4] := aCols[nPos][5]	:= aCols[nPos][6]	:= aCols[nPos][7]	:= aCols[nPos][8]	:= 0
			aCols[nPos][Len(aHeader)+1] := .F.
			aCols14	:= aclone(aCols)
			oGetDad:GOTO(nPos)
			Eval(oGetDad:obrowse:bDrawSelect)
			oGetDad:Refresh(.T.)
			oGetDad:oBrowse:Refresh(.T.)

	    ElseIF lExtraApur .And. !lExtApuCon
    		If aCols[n][1] $ "0001/0002/0003"

				nPos := n
		    	nPos++
				aCols := Asize(aCols,Len(aCols)+1)
				aCols := Ains(aCols,nPos)
				aCols[nPos] := Array(Len(aHeader)+1)
				aCols[nPos][1] := aCols[n][1]
				aCols[nPos][2] := space(30)
				aCols[nPos][3] := space(4)
				aCols[nPos][4] := 0
				aCols[nPos][5] := ""
				aCols[nPos][6] := ""
				aCols[nPos][7] := ""
				aCols[nPos][8] := a953TpLanc("M")+fwuuid('MATA953')
				aCols[nPos][Len(aHeader)+1] := .F.

				oGetDad:GOTO(nPos)
				Eval(oGetDad:obrowse:bDrawSelect)

			EndIf


	    EndIf
		Ft953Refre({oGetDad})
	EndIf


Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFuncao    ³a953CPO5ALT³Autor  ³Andreia dos Santos    ³ Data ³13/08/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³Atualiza os campos que podem ser alterados a cada troca de  ³±±
±±º          ³folder( para a apuracao das operacoes proprias)             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: GetDados                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
function a953CPO5ALT(oGetDad)

If empty(aCols[oGetDad:nAt][1]).Or. aCols[oGetDad:nAt][1]$"004#008#010#011#013#014"
	oGetDad:aAlter := {}
	oGetDad:oMother:aAlter := {}
ElseIf aCols[oGetDad:nAt][1]$"002#003#006#007#012#900#901"
	If alltrim(aCols[oGetDad:nAt][2])=="002.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="003.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="006.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="007.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="012.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="900.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="901.00"
		oGetDad:aAlter := {}
		oGetDad:oMother:aAlter := {}
	Else
		If lProcRef
			oGetDad:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan", "cProcesso","cTipoProc","cAutAcaJd","cItemProc"}
			oGetDad:oMother:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan", "cProcesso","cTipoProc","cAutAcaJd","cItemProc"}
		Else
			oGetDad:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan"}
			oGetDad:oMother:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan"}
		EndIf

	EndIf
Else
	oGetDad:aAlter := {"nValor"}
	oGetDad:oMother:aAlter := {"nValor"}
EndIf
return .T.

Function a953CPODIF(oGetDad)

If !LGERDIFAL //Apuração detalhada do difal acionada
	If	lProcRef
		oGetDad:aAlter :={"cCodigo","cDescr","nValor","cCodLan","cGNRE", "cProcesso","cTipoProc","cAutAcaJd","cItemProc"}
		oGetDad:oMother:aAlter :={"cCodigo","cDescr","nValor","cCodLan","cGNRE","cProcesso","cTipoProc","cAutAcaJd","cItemProc"}
	Else
		oGetDad:aAlter :={"cCodigo","cDescr","nValor","cCodLan","cGNRE"}
		oGetDad:oMother:aAlter :={"cCodigo","cDescr","nValor","cCodLan","cGNRE"}
	EndIf
EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFuncao    ³a953CPO6ALT³Autor  ³Andreia dos Santos    ³ Data ³13/08/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³Atualiza os campos que podem ser alterados a cada troca de  ³±±
±±º          ³folder( para a apuracao de substituicao tributaria)         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: GetDados                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
function a953CPO6ALT(oGetDad)

If empty(aCols[oGetDad:nAt][1]).Or. aCols[oGetDad:nAt][1]$"005#010#012#013#015#016#011"
	oGetDad:aAlter := {}
	oGetDad:oMother:aAlter := {}
ElseIf aCols[oGetDad:nAt][1]$"002#003#007#008#014"
	If alltrim(aCols[oGetDad:nAt][2])=="002.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="003.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="007.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="008.00" .Or. alltrim(aCols[oGetDad:nAt][2])=="014.00"
		oGetDad:aAlter := {}
		oGetDad:oMother:aAlter := {}
	Else
		If lProcRef
			oGetDad:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan", "cProcesso","cTipoProc","cAutAcaJd","cItemProc"}
			oGetDad:oMother:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan", "cProcesso","cTipoProc","cAutAcaJd","cItemProc"}
		Else
			oGetDad:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan"}
			oGetDad:oMother:aAlter :={"cCodigo","cDescr","nValor","cGNRE","cClasse","cCodLan"}
		EndIf
	EndIf
Else
	oGetDad:aAlter := {"nValor"}
	oGetDad:oMother:aAlter := {"nValor"}
EndIf
return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFuncao    ³a953CPO8ALT³Autor  ³Luciana Pires         ³ Data ³ 21/08/08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³Atualiza os campos que podem ser alterados a cada troca de  ³±±
±±º          ³folder( para a apuracao do fomentar)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: GetDados                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953CPO8ALT(oGetDad)

If Empty(aCols[oGetDad:nAt][1])
	oGetDad:aAlter := {}
	oGetDad:oMother:aAlter := {}
ElseIf aCols[oGetDad:nAt][1]$"001#002#004#005#006#007#011#012#013#015#018#019#022#024#027#032#033#034#035#037#040#045#046#047#048#049#050#051#052#053#054#055#056#057#058#059#060#062#063#064#065#066#067#068#069#070#073#074#076#078"
	oGetDad:aAlter :={"cCodigo","cDescr","nValor"}
	oGetDad:oMother:aAlter :={"cCodigo","cDescr","nValor"}
Else
	oGetDad:aAlter := {"nValor"}
	oGetDad:oMother:aAlter := {"nValor"}
EndIf
Return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±ºFuncao    ³a953TotLin ³Autor  ³Andreia dos Santos    ³ Data ³ 15/08/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±ºDesc.     ³Totaliza as linhas que podem ser expandidas                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Posicao da linha totalizadora                        ³±±
±±³          ³ExpN2: Numero da linha que sera totalizada                  ³±±
±±³          ³ExpN3: primeira vez que apura o saldo na montagem do aCols  ³±±
±±³          ³ExpN4: aCols                                                ³±±
±±³          ³ExpN5: indica se a funcao foi chamada a partir da delecao da³±±
±±³          ³       linha                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953TotLin(nPos,cLin,lFirst,aColun)
If !lFirst
	aCols[nPos,4] := 0
	//Aeval(aCols,{|x,y| If(x[1]==cLin .And. x[len(aCols[nPos])]==.F. .And. y<>n ,aCols[nPos,4]+=x[4],)})
	Aeval(aCols,{|x,y| If(x[1]==cLin .And. x[len(aCols[y])]==.F. .And. y<>n ,aCols[nPos,4]+=x[4],)})
	If !empty(ReadVar()) .And. ReadVar() == "M->NVALOR"
		//aCols[nPos,4] += If(aCols[n,1]==aCols[nPos,1].And. aCols[n,len(aCols[nPos])]==.F.,M->NVALOR,0)
		aCols[nPos,4] += IIF(aCols[n,1]==aCols[nPos,1].And. aCols[n,len(aCols[n])]==.F.,IIF(ValType(M->NVALOR)=="U", 0, M->NVALOR),0)
	EndIf
Else
	aColun[nPos,4] := 0
	Aeval(aColun,{|x| If(x[1]==cLin .And. x[len(aColun[nPos])]==.F.,aColun[nPos,4]+=x[4],)})
	If !empty(ReadVar()) .And. ReadVar() == "M->NVALOR"
		aColun[nPos,4] += If(aColun[n,1]==aColun[nPos,1].And. aColun[n,len(aColun[nPos])]==.F.,IIF(ValType(M->NVALOR)=="U", 0, M->NVALOR),0)
	EndIf
EndIf
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³a953Del5Col³Autor  ³Andreia dos Santos    ³ Data ³ 16/08/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Verifica se a linha pode ser deletada( aCols 5)             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953Del5Col()
Local lRet := .F.
Local lST  := .F.
Local nAno		:= mv_par02
Local cDif2017	:= Iif(mv_par02 >= 2017,"/014/015/018/019/021/024","")

If !lGerDifal
	If aCols[n,1]$"002/003/006/007/009/012"+cDif2017 .And. Substr(alltrim(aCols[n,2]),4,3)<> ".00"
		If !Empty(aCols[n,5]) .And. lCmpExtra
			//Delete linha da extra apuração
			AtuExtra(aCols[n,5],0,aCols[n,7],'2')
		EndIf

		lRet := .T.
		aCols[n,3] := space(60)
		aCols[n,4] := 0
		aCols[n,5] := space(8)
		aCols[n,6] := space(14)
	EndIf

ElseIf AllTrim(aCols[n,1]) $ "003" .And. lUsaSped .And. SubStr(aCols[n,8],1,2) == "CA"

	MsgAlert("Estorno incluído pelo processo de Crédito Acumulado. Essa linha não pode ser deletada." + CRLF + CRLF + "Verifique.","Atenção")

ElseIf aCols[n,1] $"002#003#006#007#012#900#901" .And. !(alltrim(aCols[n,2])=="002.00" .Or. alltrim(aCols[n,2])=="003.00" .Or. alltrim(aCols[n,2])=="006.00" .Or. alltrim(aCols[n,2])=="007.00" .Or. alltrim(aCols[n,2])=="012.00" .Or. alltrim(aCols[n,2])=="900.00" .Or. alltrim(aCols[n,2])=="901.00")
	lRet := .T.
	aCols[n,4] :=0
	aCols[n,5] :=Space (14)
	aCols[n,6] :=Space (06)
EndIf

If lRet
	If !lGerDifal
		a953Saldo(.F.,.F.,.F.,.F.,.F.,.F.,.T.)
	Else
		a953Saldo(.F.,lST,.F.,.F.)
	EndIf

	If lUsaSped .And. lGerDifal .And. lCmpExtra .And. !Empty(aCols[n,7])
		//Delete linha da extra apuração
		AtuExtra(aCols[n,7],0,aCols[n,8],'2')
	EndIf
EndIf

Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³a953Del6Col³Autor  ³Andreia dos Santos    ³ Data ³  16/08/01³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Verifica se a linha pode ser deletada ( aCols 6 )           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function a953Del6Col()
Local lRet := .F.
Local lST := .T.
Local nPosCons	:=	aScan(aExclApur, {|aX| AllTrim(aCols[n,2])==aX[2]})
Local nPosl := len(aCols[1])

If aCols[n,1] $"002#003#007#008#014" .And. !(alltrim(aCols[n,2])=="002.00" .Or. alltrim(aCols[n,2])=="003.00" .Or. alltrim(aCols[n,2])=="007.00" .Or. alltrim(aCols[n,2])=="008.00" .Or. alltrim(aCols[n,2])=="014.00")
   lRet := .T.
   aCols[n,4] :=0
   If nPosCons<>0
   	   aExclApur[nPosCons][4] := Iif(aExclApur[nPosCons][4] .And. !aCols[n,nPosl], .F., .T.)
   EndIf
EndIf

If lRet
	a953Saldo(.F.,lST,.F.,.F.)
	If lUsaSped .AND. !Empty(aCols[n,7]) .And. lUsaSped .And. lCmpExtra
	//Delete linha da extra apuração
		AtuExtra(aCols[n,7],0,aCols[n,8],'2')
	EndIf
EndIf

Return( lRet )

//Funcao DelColVisual
//Autor  Rafael Soliveira
//Data   18/06/18
//Não permite deletar linhas, uso exclusivo para abas de visualização
Function DelColVisual()

Return( .F. )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³a953Del10Col³Autor  ³Andreia dos Santos    ³ Data ³ 16/08/01³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Verifica se a linha pode ser deletada( aCols 5)             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953Del10Col()

Local lRet := .F.

If aCols[n,1] $"900#901" .And. !(alltrim(aCols[n,2])=="900.00" .Or. alltrim(aCols[n,2])=="901.00")
	lRet := .T.
	aCols[n,4] :=0
EndIf

If lRet
	a953Saldo(.F.,.F.,.F.,.F.,.T.)
EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³A953Lin5Ok ³Autor  ³Andreia dos Santos    ³ Data ³ 17/08/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Verifica se os campos obrigatorios da Apuracao de ICMS pro- ³±±
±±³          ³prio estao preenchidos                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A953Lin5Ok()

Local lRet 		:= .T.
//Local nPosl 	:= len(aCols[1])
Local nX		:= 0
Local lUsaSped  := SuperGetMv("MV_USASPED",,.T.) .And. aApurSX2[AI_CDH] .And. aApurSX2[AI_CDA]
Local cCodLanc 	:= ""
Local cSubItem 	:= ""
local lTdOk		:= SuperGetMv("MV_AICVALT",,.F.) // informa se irá validar apenas ao confirmar
Local cLinha	:= ''
Local nPos	:= 0
Local nPosDet	:= 0

// Se não for a aba de credito acumulado
If !((lFomentGO .And. lACredAcu .And. oFolder:nOption == 11) .Or. (!lFomentGO .And. lACredAcu .And. oFolder:nOption == 10))
	If	aCols[n,1] $"002#003#006#007#012#900#901" .And. ;
		!(alltrim(aCols[n,2])=="002.00" .Or. alltrim(aCols[n,2])=="003.00" .Or. alltrim(aCols[n,2])=="006.00" .Or. alltrim(aCols[n,2])=="007.00" .Or. alltrim(aCols[n,2])=="012.00" .Or. alltrim(aCols[n,2])=="900.00" .Or. alltrim(aCols[n,2])=="901.00") .And. aCols[n, Len(aCols[n])] == .F.

		If aCols[n,1]$"900#901" .And. Empty(aCols[n,2])
			MsgAlert(STR0250) //"O preenchimento do Codigo de Subitem é obrigatorio"
			lRet := .F.
		EndIf
		If ((aCols[n,1]$"900" .And. lApagFecp) .Or.(aCols[n,1]$"901" .And. lApagFecpSt)).And. "FECP"$aCols[n,3]
			MsgAlert(STR0251) //"Nao é possivel a inclusao de debito um especial para FECP quando há saldo credor"
			lRet := .F.
		EndIf
		If empty(aCols[n,3])
			MsgAlert(STR0230) //"O preenchimento da Descrição é Obrigatória"
			lRet := .F.
		EndIf
		If aCols[n,4]==0
			MsgAlert(STR0231) //"O preenchimento do Valor é obrigatório"
			lRet := .F.
		EndIf
		If lUsaSped
			If empty(aCols[n,7])
				MsgAlert(STR0229) //"O preenchimento do Código do Lançamento é obrigatório"
				lRet := .F.
			ElseIf !lTdOk
				cCodLanc := aCols[n,7]
				cSubItem := aCols[n,2]
				aCols[n,7]:=""
				aCols[n,2]:=""

				For nX := 1 to len(aCols)
					//Verifica se tem lancamento duplicado
					If !aCols[nX][Len(aCols[nX])] .And. aCols[nX,7] == cCodLanc //Len(aCols[nX] sempre .F. ou .T.
						//Se existir duplicidade de lancamento o SUBITEM deve estar informado
						If Empty(cSubItem) .Or. Empty(aCols[nX,2]) .Or. Alltrim(cSubItem) == Alltrim(aCols[nX,2])
							MsgAlert("Para utilizar o mesmo código de lançamento é necessário utilizar códigos de Subitem diferentes")
					lRet := .F.
				EndIf
					EndIf
				Next

				aCols[n,7] := cCodLanc
				aCols[n,2] := cSubItem
			EndIf
		EndIf
	EndIf

	//Valida Processos referenciados.
	//Não executar na aba de crédito acumulado pois o aCols não necessariamente estará criado, já
	//que esta aba não segue o padrão de criação das demais e utiliza outros componentes.
	If lProcRef .and. lRet
		If Len(aCols[n]) >= 12
			If	!aCols[n][Len(aHeader) + 01]	.and.	;
				(!Empty(aCols[n][09])	.or.	;
				!Empty(aCols[n][10])	.or.	;
				!Empty(aCols[n][11])	.or.	;
				!Empty(aCols[n][12]))
				lRet := fVlProcRef(	xFilial('CCF') + Subs(aCols[n][09],01, TamSX3('CCF_NUMERO')[01]) + Subs(aCols[n][10],01, TamSX3('CCF_TIPO')[01]) + Subs(aCols[n][11],01, TamSX3('CCF_INDAUT')[01]) +	Subs(aCols[n][12],01, TamSX3('CCF_IDITEM')[01]),	;
									Subs(aCols[n][10],01, TamSX3('CCF_TIPO')[01]) )
			EndIf
		EndIf
	EndIf

EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³A953Lin6Ok ³Autor  ³Andreia dos Santos    ³ Data ³ 17/08/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Verifica se os campos obrigatorios da Apuracao de ICMS Subs-³±±
±±³          ³tituicao Tributaria estao preenchidos                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A953Lin6Ok()
Local lRet		:= .T.
//Local nPosl		:= len(aCols[1])
Local nX		:= 0
Local lUsaSped  := SuperGetMv("MV_USASPED",,.T.) .And. aApurSX2[AI_CDH] .And. aApurSX2[AI_CDA] 
Local cCodLanc 	:= ""
Local cSubItem 	:= ""
Local nAno		:= mv_par02
Local cDif2017	:= Iif(mv_par02 >= 2017,"/014/015/018/019/021/024","")

If !lGerDifal
	//Aqui significa que apuração detalhada do difal está acionada
 	If aCols[n,1]$"002/003/006/007/009/012"+cDif2017 .And. Substr(alltrim(aCols[n,2]),4,3)<> ".00" .And. aCols[n,Len(aCols[n])] == .F.
 		If Empty(aCols[n,2])
 		   	MsgAlert(STR0250)  //"O preenchimento do Codigo de Subitem é obrigatorio"
   			lRet := .F.
 		ElseIf Empty(aCols[n,3])
			MsgAlert(STR0230) //"O preenchimento da Descrição é Obrigatória"
			lRet := .F.
		ElseIf aCols[n,4]==0
			MsgAlert(STR0231) //"O preenchimento do Valor é obrigatório"
			lRet := .F.
 		ElseIF lUsaSped .And. empty(aCols[n,5])
    		MsgAlert(STR0229) //"O preenchimento do Código do Lançamento é obrigatório"
			lRet := .F.
 		EndIf
 	EndIf

ElseIf aCols[n,1] $"002#003#007#008#014#900#901" .And. !(alltrim(aCols[n,2])=="002.00" .Or. alltrim(aCols[n,2])=="003.00" .Or. alltrim(aCols[n,2])=="007.00" .Or. alltrim(aCols[n,2])=="008.00" .Or. alltrim(aCols[n,2])=="014.00" .Or. alltrim(aCols[n,2])=="900.00" .Or. alltrim(aCols[n,2])=="901.00") .And.;
	aCols[n,Len(aCols[n])] == .F.
	If empty(aCols[n,3]) .Or. aCols[n,4]==0  .Or. (lUsaSped .And. empty(aCols[n,7]))
   		lRet := .F.
   	EndIf

 	If aCols[n,1]$"900#901" .And. Empty(aCols[n,2])
   		MsgAlert(STR0250)  //"O preenchimento do Codigo de Subitem é obrigatorio"
   		lRet := .F.
   	EndIf
   	If aCols[n,1]$"900#901" .And. "FECP"$aCols[n,3] .And. lApagFecpST
		MsgAlert(STR0251) //"Nao é possivel a inclusao de um debito especial para FECP quando há saldo credor"
		lRet := .F.
	EndIf
   	If empty(aCols[n,3])
		MsgAlert(STR0230) //"O preenchimento da Descrição é Obrigatória"
		lRet := .F.
	EndIf
	If aCols[n,4]==0
		MsgAlert(STR0231) //"O preenchimento do Valor é obrigatório"
		lRet := .F.
	EndIf
	If lUsaSped
		If empty(aCols[n,7])
    		MsgAlert(STR0229) //"O preenchimento do Código do Lançamento é obrigatório"
			lRet := .F.
		Else
			cCodLanc := aCols[n,7]
			cSubItem := aCols[n,2]
			aCols[n,7]:=""
			aCols[n,2]:=""
			For nX := 1 to len(aCols)
				//Verifica se tem lancamento duplicado
				If !aCols[nX][Len(aCols[nX])] .And. aCols[nX,7] == cCodLanc
					//Se existir duplicidade de lancamento o SUBITEM deve estar informado
					If Empty(cSubItem) .Or. Empty(aCols[nX,2]) .Or. Alltrim(cSubItem) == Alltrim(aCols[nX,2])
						MsgAlert("Para utilizar o mesmo código de lançamento é necessário utilizar códigos de Subitem diferentes")
						lRet := .F.
					EndIf
				EndIf
			Next
			aCols[n,7]:=cCodLanc
			aCols[n,2]:=cSubItem
		EndIf
	EndIf
EndIf

//Valida Processos referenciados
If lProcRef .and. lRet
	If oFolder:nOption == 8
		If	!aCols[n][Len(aHeader) + 01]	.and.	;
			(!Empty(aCols[n][08])	.or.	;
			 !Empty(aCols[n][09])	.or.	;
			 !Empty(aCols[n][10])	.or.	;
			 !Empty(aCols[n][11]))
			lRet := fVlProcRef(	xFilial('CCF') + Subs(aCols[n][08],01, TamSX3('CCF_NUMERO')[01]) + Subs(aCols[n][09],01, TamSX3('CCF_TIPO')[01]) + Subs(aCols[n][10],01, TamSX3('CCF_INDAUT')[01]) +	Subs(aCols[n][11],01, TamSX3('CCF_IDITEM')[01]),	;
								Subs(aCols[n][09],01, TamSX3('CCF_TIPO')[01]))
		EndIf
	Else
		If	!aCols[n][Len(aHeader) + 01]	.and.	;
			(!Empty(aCols[n][09])	.or.	;
			 !Empty(aCols[n][10])	.or.	;
			 !Empty(aCols[n][11])	.or.	;
			 !Empty(aCols[n][12]))
			lRet := fVlProcRef(	xFilial('CCF') + Subs(aCols[n][09],01, TamSX3('CCF_NUMERO')[01]) + Subs(aCols[n][10],01, TamSX3('CCF_TIPO')[01]) + Subs(aCols[n][11],01, TamSX3('CCF_INDAUT')[01]) + Subs(aCols[n][12],01, TamSX3('CCF_IDITEM')[01]), Subs(aCols[n][10],01, TamSX3('CCF_TIPO')[01]))
		EndIf
	EndIf
EndIf

Return( lRet )
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³A953Codigo ³Autor  ³Andreia dos Santos    ³ Data ³ 06/09/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³ Valida codigo digitado.                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953Codigo()
Local lRet	:= .T.
Local nPosl	:= len(aCols[1])
Local nI	:= 0
Local lUsaSped  := SuperGetMv("MV_USASPED",,.T.) .And. aApurSX2[AI_CDH] .And. aApurSX2[AI_CDA] 

If  alltrim(M->CCODIGO)=="002.00" .Or. alltrim(M->CCODIGO)=="003.00" .Or. alltrim(M->CCODIGO)=="006.00" .Or. alltrim(M->CCODIGO)=="007.00" .Or. alltrim(M->CCODIGO)=="008.00" .Or.;
    alltrim(M->CCODIGO)=="012.00" .Or. alltrim(M->CCODIGO)=="014.00" .Or. alltrim(M->CCODIGO)=="900.00" .Or. alltrim(M->CCODIGO)=="901.00".And. aCols[n,nPosl] == .F.

	lRet := .F.
EndIf


If lUsaSped
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³VERIFICACAO SE O CODIGO DIGITADO NA COLUNA JA FOI DIGITADO ANTERIORMENTE EM OUTRA LINHA    ³
	//³ESSA VALIDACAO SO E NECESSARIA PARA A APURACAO NO MODELO DO SPESFISCAL                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nI := 1 To Len (aCols)
     	If !aCols[nI,Len(aCols[nI])] .And. (AllTrim (M->CCODIGO)$aCols[nI,2])
			HELP (" ", 1, "JAGRAVADO")
			lRet := .F.
			Exit
		EndIf
	Next (nI)
EndIf

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³a953GNRE   ³Autor  ³Gustavo G. Rueda      ³ Data ³11/04/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Validacao do codigo da GNRE, o estado eh o MV_ESTADO.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953GNRE(cCodTP) //0-ICMS PROPRIO| 1-ICMS ST
Local lRet := .T.
Local nI	 := 1
Local nX	 := 1
Local nY	 := 0
Local nPos	 := 0
Local nPosl	 := len(aCols[1])
Local lAchou := .F.
Local cBloco := ""
Local nPosRecST	:= 0
Local aGnre2 := {}

//Ajuste para novos codigos de difal exclusivos para FECP
If mv_par02 >= 2017 .And. cCodTP == '2' .And. aCols[n,1] $ "014|015|018|019|021|024"
	cCodTP := '3'
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Quando estiver vindo vazio, significa que estah vindo de debitos especiais e lah pode ser lancado tanto ICMS quanto ICMS ST.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(cCodTP)
	If aCols[n,1]=="900"
		cCodTP	:=	"0"
	ElseIf aCols[n,1]=="901"
		cCodTP	:=	"1"
	EndIf
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³VERIFICACAO SE A GNRE JAH EXISTE GRAVADA NA TABELA SF6 PARA O MESMO ESTADO³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !aCols[n,Len(aCols[n])]
	If !aCols[nI,Len(aCols[nI])] .And. !Empty (cGnre)
		SF6->(DbSetOrder (1))
		If cCodTP =='0' .And. SF6->(DbSeek (xFilial ("SF6")+SuperGetMV("MV_ESTADO", .T., "")+cGnre))
			aCols[n,4] := SF6->F6_VALOR
			aCols[n,6] := SF6->F6_CLAVENC

			cBloco	:= Alltrim(aCols[n,1])
			cValor	:= 0
			nPos	:= 0
			For nX := 1 to Len(aCols)
			    If Alltrim(aCols[nX][1]) == cBloco
					If Alltrim(aCols[nX,2]) == Alltrim(cBloco+".00")
						nPos := nX //Pega a posicao da Linha Pai
					Else
						cValor += aCols[nX,4] //acumula todos os Filhos
					EndIf
				EndIf
			Next
			If nPos > 0 .And. !"900"$cBloco
			    aCols[nPos,4] := cValor //atualiza valor acumulado na linha Pai (para 002/003/006/007/012)

				n001 := Ascan(aCols,{|x|x[1]=="001"})
			    n002 := Ascan(aCols,{|x|x[1]=="002"})
				n003 := Ascan(aCols,{|x|x[1]=="003"})
				n004 := Ascan(aCols,{|x|x[1]=="004"})
				n005 := Ascan(aCols,{|x|x[1]=="005"})
				n006 := Ascan(aCols,{|x|x[1]=="006"})
				n007 := Ascan(aCols,{|x|x[1]=="007"})
				n008 := Ascan(aCols,{|x|x[1]=="008"})
				n009 := Ascan(aCols,{|x|x[1]=="009"})
				n010 := Ascan(aCols,{|x|x[1]=="010"})
				n011 := Ascan(aCols,{|x|x[1]=="011"})
				n012 := Ascan(aCols,{|x|x[1]=="012"})
				n013 := Ascan(aCols,{|x|x[1]=="013"})
				n014 := Ascan(aCols,{|x|x[1]=="014"})

			    If cBloco $ ("002/003")
			    	//ATUALIZA SAIDAS

				    //atualiza valor do sub-total
				    //v004 := v001 + v002 + v003
				    aCols[n004][4] := aCols[n001][4] + aCols[n002][4] + aCols[n003][4]

				Else
					//ATUALIZA ENTRADAS

					//atualiza valor do sub-total
				    //v008 := v005 + v006 + v007
					aCols[n008][4] := aCols[n005][4] + aCols[n006][4] + aCols[n007][4]

					//atualiza valor total
				    //v010 := v008 - v009
					aCols[n010][4] := aCols[n008][4] - aCols[n009][4]

				EndIf

				//atualiza valor do saldo devedor/credor
			    //v011 := v004 - v010
			    If (aCols[n004][4] - aCols[n010][4]) > 0
					aCols[n011][4] := aCols[n004][4] - aCols[n010][4]
					aCols[n014][4] := 0
				Else
					aCols[n011][4] := 0
					aCols[n014][4] := aCols[n010][4] - aCols[n004][4]
				EndIf

				//corrige valor do saldo credor
				//v014 := v014 + v012
				If aCols[n014][4] + aCols[n012][4] - aCols[n011][4] > 0
					aCols[n014][4] := aCols[n014][4] + aCols[n012][4] - aCols[n011][4]
				EndIf

				//atualiza valor do imposto a recolher
				//v013 := v011 - v012
				If aCols[n011][4] - aCols[n012][4] > 0
					aCols[n013][4] := aCols[n011][4] - aCols[n012][4]
				Else
					aCols[n013][4] := 0
				EndIf

				nPosRecST	:=	Ascan(aCols6,{|x|x[1]=="015"}) //imposto a recolher Substituicao Tributaria
     			nVlrTitulo	:= aCols[n013,4]+aCols6[nPosRecST,4]
			EndIf

			//ACRESCENTA OU ATUALIZA ARRAY QUANDO GNRE FOI SELECIONADA
			lAchou := .F.
			For nX := 1 To Len (aGnre)
				If SF6->F6_NUMERO == aGnre[nX,1] .And. SF6->F6_EST == aGnre[nX,5] .And. aGnre[nX,6] == "IC"
					aGnre[nX][1] := SF6->F6_NUMERO
					aGnre[nX][2] := SF6->F6_DTVENC
					aGnre[nX][3] := SF6->F6_VALOR
					aGnre[nX][4] := SF6->F6_CLAVENC
					aGnre[nX][5] := SF6->F6_EST

					lAchou := .T.
					Exit
				EndIf
			Next
			If !lAchou
				Aadd(aGnre,{SF6->F6_NUMERO,SF6->F6_DTVENC,SF6->F6_VALOR,SF6->F6_CLAVENC,SF6->F6_EST,"IC","RECNOTAF"}) //RECNOTAF - Recolhido antecipadamente via Nota Fiscal
			EndIf

			lRet := .T.

		ElseIf cCodTP =='1' .And. SF6->(DbSeek (xFilial ("SF6")+SuperGetMV("MV_ESTADO", .T., "")+cGnre))
			aCols[n,4] := SF6->F6_VALOR
			aCols[n,6] := SF6->F6_CLAVENC

			cBloco	:= Alltrim(aCols[n,1])
			cValor	:= 0
			nPos	:= 0
			For nX := 1 to Len(aCols)
			    If Alltrim(aCols[nX][1]) == cBloco
					If Alltrim(aCols[nX,2]) == Alltrim(cBloco+".00")
						nPos := nX //Pega a posicao da Linha Pai
					Else
						cValor += aCols[nX,4] //acumula todos os Filhos
					EndIf
				EndIf
			Next
			If nPos > 0  .And. !"901"$cBloco
			    aCols[nPos,4] := cValor //atualiza valor acumulado na linha Pai (para 002/003/006/007/012)

				n001 := Ascan(aCols,{|x|x[1]=="001"})
			    n002 := Ascan(aCols,{|x|x[1]=="002"})
				n003 := Ascan(aCols,{|x|x[1]=="003"})
				n004 := Ascan(aCols,{|x|x[1]=="005"})
				n005 := Ascan(aCols,{|x|x[1]=="006"})
				n006 := Ascan(aCols,{|x|x[1]=="007"})
				n007 := Ascan(aCols,{|x|x[1]=="008"})
				n008 := Ascan(aCols,{|x|x[1]=="010"})
				n009 := Ascan(aCols,{|x|x[1]=="011"})
				n010 := Ascan(aCols,{|x|x[1]=="012"})
				n011 := Ascan(aCols,{|x|x[1]=="013"})
				n012 := Ascan(aCols,{|x|x[1]=="014"})
				n013 := Ascan(aCols,{|x|x[1]=="015"})
				n014 := Ascan(aCols,{|x|x[1]=="016"})

			    If cBloco $ ("002/003")
			    	//ATUALIZA SAIDAS

				    //atualiza valor do sub-total
				    //v004 := v001 + v002 + v003
				    aCols[n004][4] := aCols[n001][4] + aCols[n002][4] + aCols[n003][4]

				Else
					//ATUALIZA ENTRADAS

					//atualiza valor do sub-total
				    //v008 := v005 + v006 + v007
					aCols[n008][4] := aCols[n005][4] + aCols[n006][4] + aCols[n007][4]

					//atualiza valor total
				    //v010 := v008 - v009
					aCols[n010][4] := aCols[n008][4] - aCols[n009][4]

				EndIf

				//atualiza valor do saldo devedor/credor
			    //v011 := v004 - v010
			    If (aCols[n004][4] - aCols[n010][4]) > 0
					aCols[n011][4] := aCols[n004][4] - aCols[n010][4]
					aCols[n014][4] := 0
				Else
					aCols[n011][4] := 0
					aCols[n014][4] := aCols[n010][4] - aCols[n004][4]
				EndIf

				//corrige valor do saldo credor
				//v014 := v014 + v012
				If aCols[n014][4] + aCols[n012][4] - aCols[n011][4] > 0
					aCols[n014][4] := aCols[n014][4] + aCols[n012][4] - aCols[n011][4]
				EndIf

				//atualiza valor do imposto a recolher
				//v013 := v011 - v012
				If aCols[n011][4] - aCols[n012][4] > 0
					aCols[n013][4] := aCols[n011][4] - aCols[n012][4]
				Else
					aCols[n013][4] := 0
				EndIf

				nPosRecST	:=	Ascan(aCols6,{|x|x[1]=="015"}) //imposto a recolher Substituicao Tributaria
     			nVlrTitulo	:= aCols[n013,4]+aCols6[nPosRecST,4]
			EndIf

			//ACRESCENTA OU ATUALIZA ARRAY QUANDO GNRE FOI SELECIONADA
			lAchou := .F.
			For nX := 1 To Len (aGnre)
				If SF6->F6_NUMERO == aGnre[nX,1] .And. SF6->F6_EST == aGnre[nX,5] .And. aGnre[nX,6] == "IC"
					aGnre[nX][1] := SF6->F6_NUMERO
					aGnre[nX][2] := SF6->F6_DTVENC
					aGnre[nX][3] := SF6->F6_VALOR
					aGnre[nX][4] := SF6->F6_CLAVENC
					aGnre[nX][5] := SF6->F6_EST

					lAchou := .T.
					Exit
				EndIf
			Next
			If !lAchou
				Aadd(aGnre,{SF6->F6_NUMERO,SF6->F6_DTVENC,SF6->F6_VALOR,SF6->F6_CLAVENC,SF6->F6_EST,"IC","RECNOTAF"}) //RECNOTAF - Recolhido antecipadamente via Nota Fiscal
			EndIf

			lRet := .T.

		ElseIf cCodTP =='2'
			If SF6->(DbSeek (xFilial ("SF6")+SubStr(aCols[2][3],At("(",aCols[2][3]) + 1,2)+cGnre))
							aCols[n,4] := SF6->F6_VALOR

				cBloco	:= Alltrim(aCols[n,1])
				cValor	:= 0
				nPos	:= 0

				For nX := 1 to Len(aCols)
				    If Alltrim(aCols[nX][1]) == cBloco
						If Alltrim(aCols[nX,2]) == Alltrim(cBloco+".00")
							nPos := nX //Pega a posicao da Linha Pai
						Else
							cValor += aCols[nX,4] //acumula todos os Filhos
						EndIf
					EndIf
				Next

			    aCols[nPos,4] := cValor //atualiza valor acumulado na linha Pai (para 002/003/006/007/012)

				n001 := Ascan(aCols,{|x|x[1]=="001"})
			    n002 := Ascan(aCols,{|x|x[1]=="002"})
				n003 := Ascan(aCols,{|x|x[1]=="003"})
				n004 := Ascan(aCols,{|x|x[1]=="004"})
				n005 := Ascan(aCols,{|x|x[1]=="005"})
				n006 := Ascan(aCols,{|x|x[1]=="006"})
				n007 := Ascan(aCols,{|x|x[1]=="007"})
				n008 := Ascan(aCols,{|x|x[1]=="008"})
				n009 := Ascan(aCols,{|x|x[1]=="009"})
				n010 := Ascan(aCols,{|x|x[1]=="010"})
				n011 := Ascan(aCols,{|x|x[1]=="011"})
				n012 := Ascan(aCols,{|x|x[1]=="012"})

			    aCols[n011][4]	:= 0 //zera saldo credor

			    aCols[n008][4]	:= (aCols[n001][4] + aCols[n002][4] + aCols[n003][4]) - ;
			    						(aCols[n004][4] + aCols[n005][4] + aCols[n006][4] + aCols[n007][4]) //saldo devedor
				aCols[n010][4]	:= aCols[n008][4] - aCols[n009][4] //Valor a recolhe

			    If aCols[n008][4] < 0 //se saldo devedor for negativo joga em saldo credor
			    	aCols[n011][4]	+= (aCols[n008][4] * -1)
			    	aCols[n008][4]	:= 0
			    	aCols[n011][4]  += aCols[n009][4]
			    	aCols[n010][4] := 0

			    ElseIF aCols[n010][4] < 0 //Se valor a recolher for negativo então acumula saldo credot
			    	aCols[n011][4]	+= (aCols[n010][4] *-1)
			    	aCols[n010][4]	:= 0
			    EndIf

			    lRet := .T.

			Else
				lRet	:= .F.
				MsgAlert("Guia de recolhimento informada nao existe ou não pertence a este Estado")
			EndIf
		ElseIf cCodTP =='3' //Fecp Difal
			If SF6->(DbSeek (xFilial ("SF6")+SubStr(aCols[2][3],At("(",aCols[2][3]) + 1,2)+cGnre))
							aCols[n,4] := SF6->F6_VALOR

				cBloco	:= Alltrim(aCols[n,1])
				cValor	:= 0
				nPos	:= 0

				For nX := 1 to Len(aCols)
					If Alltrim(aCols[nX][1]) == cBloco
						If Alltrim(aCols[nX,2]) == Alltrim(cBloco+".00")
							nPos := nX //Pega a posicao da Linha Pai
						Else
							cValor += aCols[nX,4] //acumula todos os Filhos
						EndIf
					EndIf
				Next

				aCols[nPos,4] := cValor //atualiza valor acumulado na linha Pai (para 014/015/018/019/021/024)

				n013 := Ascan(aCols,{|x|x[1]=="013"})
				n014 := Ascan(aCols,{|x|x[1]=="014"})
				n015 := Ascan(aCols,{|x|x[1]=="015"})
				n016 := Ascan(aCols,{|x|x[1]=="016"})
				n017 := Ascan(aCols,{|x|x[1]=="017"})
				n018 := Ascan(aCols,{|x|x[1]=="018"})
				n019 := Ascan(aCols,{|x|x[1]=="019"})
				n020 := Ascan(aCols,{|x|x[1]=="020"})
				n021 := Ascan(aCols,{|x|x[1]=="021"})
				n022 := Ascan(aCols,{|x|x[1]=="022"})
				n023 := Ascan(aCols,{|x|x[1]=="023"})
				n024 := Ascan(aCols,{|x|x[1]=="024"})

				aCols[n023][4]	:= 0 //zera saldo credor

				aCols[n020][4]	:= (aCols[n013][4] + aCols[n014][4] + aCols[n015][4]) - ;
										(aCols[n016][4] + aCols[n017][4] + aCols[n018][4] + aCols[n019][4]) //saldo devedor
				aCols[n022][4]	:= aCols[n020][4] - aCols[n021][4] //Valor a recolhe

				If aCols[n020][4] < 0 //se saldo devedor for negativo joga em saldo credor
					aCols[n023][4]	+= (aCols[n020][4] * -1)
					aCols[n020][4]	:= 0
					aCols[n023][4]  += aCols[n021][4]
					aCols[n022][4] := 0

				ElseIF aCols[n022][4] < 0 //Se valor a recolher for negativo então acumula saldo credot
					aCols[n023][4]	+= (aCols[n022][4] *-1)
					aCols[n022][4]	:= 0
				EndIf

				lRet := .T.

			Else
				lRet	:= .F.
				MsgAlert("Guia de recolhimento informada nao existe ou não pertence a este Estado")
			EndIf
		else
			MsgAlert("Guia de recolhimento informada nao existe, sera criada uma guia de recolhimento manual!")
		EndIf

	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³VERIFICACAO SE A GNRE DIGITADA NA COLUNA GNRE JAH FOI DIGITADA ANTERIORMENTE EM OUTRA LINHA³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nI := 1 To Len (aCols)
			If !aCols[nI,Len(aCols[nI])] .And. nI <> n .And. (AllTrim (cGnre)$aCols[nI,5])
				HELP (" ", 1, "JAGRAVADO")
				lRet := .F.
				Exit
			EndIf
		Next (nI)
	EndIf
EndIf

Return (lRet)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³a953TdOk   ³Autor  ³Gustavo G. Rueda      ³ Data ³11/04/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Validacao do codigo da GNRE, o estado padrao eh o MV_ESTADO.³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function a953TdOk()

Local nI := 1
Local nX := 1
Local nPosl := 0

Local cCodLanc	:= ""
Local cSubItem	:= ""

Local lRet       := .T.
Local lUsaSped := SuperGetMv("MV_USASPED",,.T.) .And. aApurSX2[AI_CDH] .And. aApurSX2[AI_CDA] 
Local lTdOk := SuperGetMv("MV_AICVALT",,.F.) // informa se irá validar apenas ao confirmar
local cMv_Estado := SuperGetMV("MV_ESTADO", .T., "")

// Se não for a aba de credito acumulado
If !((lFomentGO .And. lACredAcu .And. oFolder:nOption == 11) .Or. (!lFomentGO .And. lACredAcu .And. oFolder:nOption == 10))
	nPosl := len(aCols[1])

	For nI := 1 To Len (aCols)
		If !aCols[nI,nPosl] .And. !Empty (aCols[nI,5])
			SF6->(DbSetOrder (1))
			If 	SF6->(DbSeek (xFilial ("SF6")+cMv_Estado+aCols[nI,5]))
			//validar se a guia gerada e' exatamente igual a guia salva
			// se houver alguma diferenca, retorna msg de erro
				If !(SF6->F6_VALOR == aCols[nI,4])
					xMagHelpFis (STR0085,;										//"Atenção"
					"O valor informado deve ser igual ao cadastrado na GNRE",;
					"Favor alterar o valor ou inserir um novo número de GNRE")
					lRet := .F.
					Exit
				EndIf
				If !(AllTrim(SF6->F6_CLAVENC) == AllTrim(aCols[nI,6]))
					xMagHelpFis (STR0085,;										//"Atenção"
					"A Classe de Vencimento informada deve ser igual a cadastrada na GNRE",;
					"Favor alterar a Classe de Vencimento ou inserir uma novo número de GNRE")
					lRet := .F.
					Exit
				EndIf
			EndIf
		EndIf

		If lTdOk .And. lUsaSped .And. !Empty(aCols[nI,7])
			cCodLanc := aCols[nI,7]
			cSubItem := aCols[nI,2]
			aCols[nI,7]:=""
			aCols[nI,2]:=""

			For nX := 1 to len(aCols)
				//Verifica se tem lancamento duplicado
				If !aCols[nX][Len(aCols[nX])] .And. aCols[nX,7] == cCodLanc
					//Se existir duplicidade de lancamento o SUBITEM deve estar informado
					If Empty(cSubItem) .Or. Empty(aCols[nX,2]) .Or. Alltrim(cSubItem) == Alltrim(aCols[nX,2])
						MsgAlert("Para utilizar o mesmo código de lançamento é necessário preecher todos os Subitens com códigos diferentes")
						lRet := .F.
						Exit
					EndIf
				EndIf
			Next
			aCols[nI,7]:=cCodLanc
			aCols[nI,2]:=cSubItem
			If !lRet
				Exit
			EndIf
		ElseIf lUsaSped .And. Empty(aCols[nI,7]) .And. !Empty(aCols[nI,4]) .And. aCols[nI,1] $"002#003#006#007#012#900#901" .And. ;
			!(alltrim(aCols[nI,2])=="002.00" .Or. alltrim(aCols[nI,2])=="003.00" .Or. alltrim(aCols[nI,2])=="006.00" .Or. ;
			alltrim(aCols[nI,2])=="007.00" .Or. alltrim(aCols[nI,2])=="012.00" .Or. alltrim(aCols[nI,2])=="900.00" .Or. ;
			alltrim(aCols[nI,2])=="901.00") .And. aCols[nI, Len(aCols[nI])] == .F.
			MsgAlert(STR0229) //"O preenchimento do Código do Lançamento ?obrigatório"
			lRet := .F.
		EndIf
	Next
EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³A953Apura  ³Autor  ³Andreia dos Santos    ³ Data ³ 20/08/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³ Apura os valores do ICMS do periodo e distribui nos folders³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function a953Apura(cImp,dDtIni,dDtFim,cNrLivro,nConsFil,cFilDe,cFilAte,lImpCrdSt,lCrdEst,aEstimulo,aIncent,lConsUf,nAno,nMes,nApuracao,nPeriodo,cNrLivro,lLancCDA,aLisFil,lICMDes,aIcmPago,aRetEsp,nOpcApu,aDifal,aCDADifal,aApurDifal,lAutomato,cTestCase,aCDAExtra,aApurExtra,aApurCDV,aNWCredAcu,aEApCe6Ce5,lProcRefer,aCont)

Local aApuracao 	:= {}
Local aEntrada 		:= {}
Local aSaida		:= {}
Local aCFG          := {}
Local aSaidaTmp		:= {}
Local aEntradaTmp	:= {}
Local cArqAnt		:= Alltrim(mv_par06)
Local nPos			:= 0
Local nPos5			:= 0

Local nPos6			:= 0
Local nPos8			:= 0
Local nPos9			:= 0
Local nPosZ			:= 0
Local nX 			:= 0
Local nEstCiap 		:= 0
Local nCredCiap 	:= 0
LOCAL cMV_Estado	:=	SuperGetMv("MV_ESTADO", .T., "")	// Def. estado empresa
LOCAL nImposto		:= 0
Local lGiaSc01		:=.T.
Local nValor        := 0
Local lSimplSC		:= SuperGetMv("MV_SIMPLSC",.F.,.T.)
Local lArqAnt		:= SuperGetMv("MV_APURANT")

Local lUsaSped  	:= SuperGetMv("MV_USASPED",,.T.) .And. aApurSX2[AI_CDH] .And. aApurSX2[AI_CDA] 
Local nPosl	 		:= len(aCols5[1]) // Define Posição da flag logica
Local nPos2	 		:= len(aCols10[1]) // Define Posição da flag logica
Local nPosIni		:= 0
Local nPosSub		:= 1
Local nSubIt		:= 1
Local nCnt			:= 0
Local nVlFumacop    := 0

Local cSubIt		:= ""
Local cLinhas 		:= ""
Local cNotLinhas 	:= ""
Local aAuxCol 		:= {}
Local aCDAIC		:= {}
Local aCDAST		:= {}
Local aApurCDA		:= {}
Local aApurF3		:= {}
Local lP9Sped 		:= SuperGetMv("MV_P9SPED",,.F.)
Local aCDADE		:=	{}
Local aConv139		:=	{}
Local aCVTot		:= {0,0,0}
Local lSTInterna	:= SuperGetMv("MV_STINTER",,.F.)
Local cDsvInd		:= GetNewPar( "MV_DSVIND" , "''" )

Local aDadosTMP		:={}
Local aDadosAgl		:={}
Local nWx,nXFil,nY
Local aFilsAgl		:= {}
Local cFilBack		:= cFilAnt
Local aEstado		:= {}
Local nEst			:= 0
Local aDifEst		:= {}
Local cMvEst		:= ''
Local cDeStPgDoc	:= ''
Local nNWCredAcu	:= 0
Local nPosPad		:= 0
Local nPosAuto		:= 0
//Local aCont			:= {}
Local lSubTrib 		:= .F.
Local nPsDifal		:= 0
Local aCdaDifalNf	:= {}
local nCDANF 		:= 0
Local nPos			:= 0
Local lGIASCDEB		:= aExistBloc[PE_GIASCDEB]
Local lConfApur   := SuperGetMV("MV_CONFAPU",.F.,.F.) // Tapia
Local aConf			:= &(GetNewPar('MV_RLCSPD',"{}"))  
Local cLivApur 		:= ""
Local cInfLivr		:= Alltrim(SuperGetMV("MV_APUSEP",,""))
Local nT			:= 0
Local nPos001		:= 0
Local nPos005		:= 0
Local aValap		:= {}

Local cMv_Estado := SuperGetMv("MV_ESTADO", .T., "")
Local aContentX5 := {}
Local cAttMvEst := ""

Local nPosUF := 0

Local cTamLan 		:= Space(TamSX3('CDO_CODAJU')[01])
Local cTamPref		:= Space(TamSx3("CCF_NUMERO")[01])
Local cTamTipo		:= Space(TamSX3('CCF_TIPO')[01])
Local cTamIndaut	:= Space(TamSX3('CCF_INDAUT')[01])
Local cTamIdItem	:= Space(TamSX3('CCF_IDITEM')[01])

Private cAlsDeb		:= "ICMSDEB"
Private cTempDeb		:= "ICMSDEBITO"+AllTrim(Str(ThreadID()))
Private cAlsCrd		:= "ICMSCRD"
Private cTempCrd		:= "ICMSCREDITO"+AllTrim(Str(ThreadID()))
Private cAlsSTd		:= "STDEB"
Private cTempSTd		:= "STDEBITO"+AllTrim(Str(ThreadID()))
Private cAlsSTe		:= "STCRD"
Private cTempSTe		:= "STCREDITO"+AllTrim(Str(ThreadID()))

Default	aRetEsp     := {}
Default lImpCrdSt	:= .F.
Default lICMDes  	:= .F.
Default aLisFil     := {}
Default nOpcApu   	:= Nil
Default lAutomato 	:= .F.
Default cTestCase 	:= "MATA953TestCase"
Default aApurCDV	:= {}
Default aNWCredAcu	:=	{}
Default aEApCe6Ce5 := {}
Default aCont	 := {}

If lConfApur
	DeltempICM()
	CrTempApu ("IC", cAlsDeb, cTempDeb)
	CrTempApu ("IC", cAlsCrd, cTempCrd)
	CrTempApu ("IC", cAlsSTd, cTempSTd)
	CrTempApu ("IC", cAlsSTe, cTempSTe)
Endif
//aRetAuto
If lAutomato
	If aFindFunc[FF_GETPARAUTO]
		aRetAuto	:= GetParAuto(cTestCase)
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Processamento dos Creditos de Estimulo - Manaus ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCrdEst
	ProcEst(dDtIni,dDtFim,@aEstimulo,cNrLivro,@aIncent)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega apuracao do SF3                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lFiliais//MV_PAR10==1 .And. MV_PAR22==1
	nConsFil:= 2
	For nXFil:=1 to Len(aLisFil)
		aFilsAgl:={}
		If aLisFil[nXFil][1]
			cFilAnt:=aLisFil[nXFil][2]
			Aadd(aFilsAgl,aLisFil[nXFil])
			cAttMvEst := SuperGetMv("MV_ESTADO", .T., "")
			If cAttMvEst == "RJ" .And. File("P9AUTOTEXT"+"."+cAttMvEst)
				Processa({||aDadosTmp:=ResumeF3(cImp,dDtIni,dDtFim,cNrLivro,.f.,.t.,1,.F.,nConsFil,cFilDe,cFilAte,@aEntrada,@aSaida,,,,.T.,,,lImpCrdST,,lCrdEst,aEstimulo,,lConsUf,@aApurCDA,@aApurF3,@aCDAIC,@aCDAST,"F3_MATRAPR",mv_par18,aFilsAgl,,lICMDes,@aIcmPago,,@aCDADE,@aRetEsp,,Mv_Par20,nOpcApu,,@aConv139,@aRecStDif,,@aDifal,@aCdaDifalNf,lAutomato,@aCDAExtra,@aApurExtra,@aApurCDV,,@aNWCredAcu,lProcRefer,cTempDeb,cTempCrd, cTempSTd, cTempSTe)})	

			Else
				Processa({||aDadosTmp:=ResumeF3(cImp,dDtIni,dDtFim,cNrLivro,.f.,.t.,1,.F.,nConsFil,cFilDe,cFilAte,@aEntrada,@aSaida,,,,,,,lImpCrdST,,lCrdEst,aEstimulo,,lConsUf,@aApurCDA,@aApurF3,@aCDAIC,@aCDAST,"F3_MATRAPR",mv_par18,aFilsAgl,,lICMDes,@aIcmPago,,@aCDADE,@aRetEsp,,Mv_Par20,nOpcApu,,@aConv139,@aRecStDif,,@aDifal,@aCdaDifalNf,lAutomato,@aCDAExtra,@aApurExtra,@aApurCDV,,@aNWCredAcu,lProcRefer,cTempDeb,cTempCrd, cTempSTd, cTempSTe)})
			EndIf
			If nXFil==1
				aDadosAgl:=ACLONE(aDadosTmp)
				aSaidaTmp:=ACLONE(aSaida)
				aEntradaTmp:= ACLONE(aEntrada)
			Else
				For nWX:=1 to Len(aDadosTmp)
					nPosAgl:=AScan( aDadosAgl,{ |x| x[1]==aDadosTmp[nWX,1] })
					If nPosAgl>0
						For nY:=1 to Len(aDadosTmp[nWX])
							If Len(aDadosAgl[nPosAgl])==Len(aDadosTmp[nWX])
								If ValType(aDadosTmp[nWX][nY])=='N'
								    aDadosAgl[nPosAgl,nY]+=aDadosTmp[nWX,nY]
								EndIf
							EndIf
						Next
					Else
						Aadd(aDadosAgl,aDadosTmp[nWX])
					EndIf
				Next
					For nWX:=1 to Len(aSaida)
						nPosAgl:=AScan( aSaidaTmp,{ |x| x[1]==aSaida[nWX,1] })
						If nPosAgl>0
					    	For nY:=1 to Len(aSaida[nWX])
								If ValType(aSaidaTmp[nPosAgl][nY])=='N' .And. ValType(aSaida[nWX][nY])=='N'
									aSaidaTmp[nPosAgl,nY]+=aSaida[nWX,nY]
								EndIf
							Next
					    Else
							Aadd(aSaidaTmp,aSaida[nWX])
					    EndIf
					Next
					For nWX:=1 to Len(aEntrada)
						nPosAgl:=AScan( aEntradaTmp,{ |x| x[1]==aEntrada[nWX,1] })
						If nPosAgl>0
					    	For nY:=1 to Len(aEntrada[nWX])
								If ValType(aEntradaTmp[nPosAgl][nY])=='N' .And. ValType(aEntrada[nWX][nY])=='N'
									aEntradaTmp[nPosAgl,nY]+=aEntrada[nWX,nY]
								Endif
						 	Next
					    Else
					 		Aadd(aEntradaTmp,aEntrada[nWX])
					    Endif
					Next
			EndIf
		EndIf
	Next
	aApuracao:=AClone(aDadosAgl)
	cFilant:=cFilBack
	aSaida :=AClone(aSaidaTmp)
	aEntrada := AClone(aEntradaTmp)
Else
	If SuperGetMv("MV_ESTADO", .T., "") == "RJ" .And. File("P9AUTOTEXT"+"."+SuperGetMv('MV_ESTADO', .T., ""))
		Processa({||aApuracao:=ResumeF3(cImp,dDtIni,dDtFim,cNrLivro,.f.,.t.,1,.F.,nConsFil,cFilDe,cFilAte,@aEntrada,@aSaida,,,,.T.,,,lImpCrdST,,lCrdEst,aEstimulo,,lConsUf,@aApurCDA,@aApurF3,@aCDAIC,@aCDAST,"F3_MATRAPR",mv_par18,aLisFil,,lICMDes,@aIcmPago,,@aCDADE,@aRetEsp,,Mv_Par20,nOpcApu,,@aConv139,@aRecStDif,,@aDifal,@aCdaDifalNf,lAutomato,@aCDAExtra,@aApurExtra,@aApurCDV,,@aNWCredAcu,lProcRefer,cTempDeb,cTempCrd, cTempSTd, cTempSTe)})
	Else
		Processa({||aApuracao:=ResumeF3(cImp,dDtIni,dDtFim,cNrLivro,.f.,.t.,1,.F.,nConsFil,cFilDe,cFilAte,@aEntrada,@aSaida,,,,,,,lImpCrdST,,lCrdEst,aEstimulo,,lConsUf,@aApurCDA,@aApurF3,@aCDAIC,@aCDAST,"F3_MATRAPR",mv_par18,aLisFil,,lICMDes,@aIcmPago,,@aCDADE,@aRetEsp,,Mv_Par20,nOpcApu,,@aConv139,@aRecStDif,,@aDifal,@aCdaDifalNf,lAutomato,@aCDAExtra,@aApurExtra,@aApurCDV,,@aNWCredAcu,lProcRefer,cTempDeb,cTempCrd, cTempSTd, cTempSTe)})
	EndIf
EndIf
lLancCDA := lUsaSped

//conout(Alltrim(Str(ThreadID())) + " Fim do processamento ResumeF3 Alterado:  " + Time())	
//conout(Alltrim(Str(ThreadID()))+  " Tempo do Processamento ResumeF3 Alterado :  " + ElapTime(cStart, Time()))

//Aqui preciso adicionar as informações da CDA que foram processadas da notas fiscias com eventuais lançamentos manuais feitos pelo
For nCDANF:= 1 to Len( aCdaDifalNf )
	If lProcRef
		Aadd(aCDADifal,{aCdaDifalNf[nCDANF][1], aCdaDifalNf[nCDANF][2], aCdaDifalNf[nCDANF][3], aCdaDifalNf[nCDANF][4], aCdaDifalNf[nCDANF][5], aCdaDifalNf[nCDANF][6], aCdaDifalNf[nCDANF][7], aCdaDifalNf[nCDANF][8], aCdaDifalNf[nCDANF][9], aCdaDifalNf[nCDANF][10] ,aCdaDifalNf[nCDANF][11], aCdaDifalNf[nCDANF][12],aCdaDifalNf[nCDANF][13],aCdaDifalNf[nCDANF][14],aCdaDifalNf[nCDANF][15],aCdaDifalNf[nCDANF][16],aCdaDifalNf[nCDANF][17]})
	Else
		Aadd(aCDADifal,{aCdaDifalNf[nCDANF][1], aCdaDifalNf[nCDANF][2], aCdaDifalNf[nCDANF][3], aCdaDifalNf[nCDANF][4], aCdaDifalNf[nCDANF][5], aCdaDifalNf[nCDANF][6], aCdaDifalNf[nCDANF][7], aCdaDifalNf[nCDANF][8], aCdaDifalNf[nCDANF][9], aCdaDifalNf[nCDANF][10] ,aCdaDifalNf[nCDANF][11], aCdaDifalNf[nCDANF][12],aCdaDifalNf[nCDANF][13],aCdaDifalNf[nCDANF][14],aCdaDifalNf[nCDANF][15],aCdaDifalNf[nCDANF][16],aCdaDifalNf[nCDANF][17]})
	EndIf
Next nCDANF

If !lLancCDA .Or. lP9Sped
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Carrega os parametros de autopreenchimento                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aTotal
	aCFG := FsLoadCFGAp("P9AUTOTEXT")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa a pre-configuracao de autopreenchimento              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	FsExecCFGAp(aCFG[1],aCols5)
EndIf

cObsArt488MG := "Nota(s) de transferência de crédito: "
nVlrArt488MG := 0

If !Empty(cInfLivr) .And. (cNrLivro $ cInfLivr) .And. !Empty(GetNewPar('MV_RLCSPD',"{}"))  //(cMV_Estado=="MG" .OR. cMV_Estado=="SC") .And. 
	If ValType(aConf) == "A"
		For nT = 1 to Len(aConf)
			If !Empty(aConf[nT][2]) .And. aConf[nT][2] == cNrLivro .And. !Empty(aConf[nT][1])
				cLivApur := aConf[nT][1]
				Exit
			Endif
		NEXT nT
	Endif	
	aValap := a953TotSubApur(cLivApur,cNrLivro,dDtIni,dDtFim)  //Retorno da função de tottalização para sub-apuração
Endif	

For nX := 1 to len(aApuracao)
	nPosUF := aScan( aSTPorUF, {|x| x[1] == aApuracao[nX,19]} )
	If nPosUF <= 0
		AADD( aSTPorUF, { aApuracao[nX,19], 0, 0, 0 } )
		nPosUF := Len( aSTPorUF )
	EndIf

	If !lLancCDA .Or. lP9Sped
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Executa a configuracao de autopreenchimento do ICMS          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		FsExecCFGAp(aCFG[2],aCols5,aApuracao[nX],aCDAIC)
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa ponto de entrada                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lGiaSc01
		If lGIASCDEB
			nPos := ascan(aCols5,{|x|x[1]=="002"})
			Aeval(aCols5,{|x| If(x[1]=="002" .And. x[nPosl]==.F.,nPos++,)})
			aCols5		:= Asize(aCols5,Len(aCols5)+1)
			aCols5		:= Ains(aCols5,nPos)
			aCols5[nPos] :=Execblock("GIASCDEB",.F.,.F.)
			If lUsaSPED .And. len(aCols5[nPos]) < 8
				//Adiciona elemento para COD_LANCAMENTO
	            aCols5[nPos][7] := ""
	            Aadd(aCols5[nPos],.F.)
			EndIf
		EndIf
		lGiaSc01	:=.F.
	EndIf

	nPos005 := nPos5 := ascan(aCols5,{|x|x[1]=="005"})
	nPos001 := ascan(aCols5,{|x|x[1]=="001"})
	If substr(aApuracao[nX,1],1,1) < "5"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem do aCols (1)  - Op. Proprias Entradas        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nPos :=  Ascan(aCOLS1,{|x|x[1]==aApuracao[nX,1]})
		If nPos==0
			Aadd(aCOLS1,Array(07))
			nPos			:=	Len(aCOLS1)
			aCOLS1[nPos,01]	:=	aApuracao[nX,1]
			aCOLS1[nPos,7] := .F.
			Aeval(aCOLS1[nPos],{|x,nX|aCOLS1[nPos,nX]:=0},2,5)
		EndIf

		aCOLS1[nPos,2] += aApuracao[nX,11] //Valor Contabil
		aCOLS1[nPos,3] += aApuracao[nX,03] //Base do ICMS
		aCOLS1[nPos,4] += aApuracao[nX,04] //Valor do ICMS
		aCOLS1[nPos,5] += aApuracao[nX,05] //Isentas
		aCOLS1[nPos,6] += aApuracao[nX,06] //Outras

		If !Empty(cInfLivr) .And. (cNrLivro $ cInfLivr) .And. (aValap[4] = 3 .Or. aValap[3] = 3)
			If aValap[4] = 3	
				aCols5[nPos005,04] := aValap[2] //Retorno de Função //0 
			Else
				aCols5[nPos5,04] += aApuracao[nX,04] //Por Entradas/prestacoes com debito do imposto	
			Endif	
			If aValap[3] = 3
				aCols5[nPos001,04] := aValap[1] //Retorno de Função //0 
			Endif	
		Else	
			aCols5[nPos5,04] += aApuracao[nX,04] //Por Entradas/prestacoes com debito do imposto
		Endif	

		//If !lUsaSped .Or. !lLancCDA
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Complementar Diferencial de Aliq.³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[2,3]	 += aApuracao[nX,10] + IIf(GetNewPar("MV_PARICMS",.F.),aApuracao[nX,18]+aApuracao[nPos,17],0)
	        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	        //³ ICMS Retido Vendas (Devolucoes)       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[3,3]	 += aApuracao[nX,12]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Diferido                       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[4,3]	 += aApuracao[nX,14]
	        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Complementar Ativo Imobilizado   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[5,3]	 += aApuracao[nX,18]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Complementar Mat. Uso ou Consumo ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[6,3]	 += aApuracao[nX,17]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Transferencia de Credito               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If aApuracao[nX,1] <> "1605"
	    		aCols7[7,3]	 += aApuracao[nX,15]
	    	Else
	    		aCols7[8,3]  += aApuracao[nX,16] // Transferencia de Débito na Entrada
	    	EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Apuracao ICMS Retido( Entradas ) - Credito      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPos6 := ascan(aCols6,{|x|x[1]=="006"})
			If mv_par15 == 3
				//Imprime somente os creditos - ST por devolucao de vendas
				If !lSTInterna .Or. (lSTInterna .And. SubStr(aApuracao[nX,01],1,1)$"1/5" )
					aCols6[nPos6,4]	 += aApuracao[nX,12]
					aSTPorUF[nPosUF][3] += aApuracao[nX,12]
				EndIf
			Else
			// Somando valores de devoluções (posição 12) pois as posições 21 e 08 não devem conter estes valores.
			aCols6[nPos6,4]	 += IIf(lImpCrdSt,aApuracao[nX,21],aApuracao[nX,08]) + aApuracao[nX,12]
			aSTPorUF[nPosUF][3] += IIf(lImpCrdSt,aApuracao[nX,21],aApuracao[nX,08]) + aApuracao[nX,12]
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito de ICMS Solidario              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[9,3]	 += aApuracao[nX,21]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Estimulo - Manaus ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[10,3] += aApuracao[nX,30]

	    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECOP - Ceara			 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[23,3] += aApuracao[nX,68]
	    	aCols7[24,3] += aApuracao[nX,69]
	    	aCols7[25,3] += aApuracao[nX,70]
	    	aCols7[26,3] += aApuracao[nX,71]
	    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECP	       		    	 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[28,3] += aApuracao[nX,73]
	    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³SENAR         			 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[29,3] += iif(!aApuracao[nX][133],0,aApuracao[nX,85])
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Presumido - RJ/PR/RO³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[11,3] += aApuracao[nX,34]+ aApuracao[nX,55]+ aApuracao[nX,64]
	    	If aApurSX3[FP_F3_CRDPCTR]	// Na entrada apenas pode se tratar de devolução, portanto ser?estornado
    			aCols7[11,3] -= aApuracao[nX,111]
    		EndIf
	    	If aApurSX3[FP_F3_CREDPRE]	// Na entrada apenas pode se tratar de devolução, portanto ser?estornado
    			aCols7[11,3] += aApuracao[nX,112]
    		EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Presumido - Entradas Interestaduais Zona Franca de Manaus ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[13,3] += aApuracao[nX,38]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Apuracao ICMS Retido( Entradas ) - Debito       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !lSTInterna .Or. (lSTInterna .And. SubStr(aApuracao[nX,01],1,1)$"1/5" )
				If aApuracao[nX,33]<>0
					nPos6 := aScan(aCols6,{|x|x[1]=="002".And.AllTrim(x[3])==STR0130}) // "Outros Debitos - ICMS nao retido na entrada"
					If nPos6 == 0
						aCols6 := Asize(aCols6,Len(aCols6)+1)
						nPos6 := aScan(aCols6,{|x|x[1]=="002"})
						While Len(aCols6)>nPos6 .And. aCols6[nPos6][1]=="002"
							nPos6++
						EndDo
						aCols6 := Ains(aCols6,nPos6)
						aCols6[nPos6] := {"002",Soma1(aCols6[nPos6-1][2]),STR0130,aApuracao[nX,33],"",""} //"Outros Debitos - ICMS nao retido na entrada"
						aSTPorUF[nPosUF][2] := aApuracao[nX,33]
						If lUsaSPED .And. lProcRef
							//Adiciona elemento para COD_LANCAMENTO					
							Aadd(aCols6[nPos6], cTamLan    )  //cod lançamento							
							Aadd(aCols6[nPos6], " "        )  //c tiplan
							Aadd(aCols6[nPos6], cTamPref   )  // processo
							Aadd(aCols6[nPos6], cTamTipo   )  // ctipoproc
							Aadd(aCols6[nPos6], cTamIndaut )  //aut acao jud
							Aadd(aCols6[nPos6], cTamIdItem )  //item
						ElseIf lUsaSPED
							//Adiciona elemento para COD_LANCAMENTO
							Aadd(aCols6[nPos6], cTamLan ) //cod lançamento
							Aadd(aCols6[nPos6], " "     ) // tiplan
						EndIf
							Aadd(aCols6[nPos6],.F.)
					Else
						aCols6[nPos6,4] += aApuracao[nX,33]
						aSTPorUF[nPosUF][2] += aApuracao[nX,33]
					EndIf
				EndIf
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Presumido(20%) sobre prestacao servico de transporte com ICMS/ST devido ao alienante/remetente|
			//|  da operacao - Decreto 44.147/2005 (MG)                                                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[14,3] += aApuracao[nX,39]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Fundersul - Mato Grosso do Sul³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[16,3] += aApuracao[nX,44]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Estorno de Credito            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[17,3] += aApuracao[nX,47]

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Estorno de Debito             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[18,3] += aApuracao[nX,49]

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Outorgado SP - Decreto 56.018 de 16.07.2010, |
			//|o Decreto 56.855, de 18.03.2011 e o                  |
			//|Decreto 56.874, de 23.03.2011   			    		³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[30,3] += aApuracao[nX,86]
	    	aCols7[30,3] += aApuracao[nX,97]
	    	aCols7[30,3] += aApuracao[nX,98]
	    	aCols7[30,3] += aApuracao[nX,99]
	    	If cMv_Estado == "MG"
		    	aCols7[31,3] += aApuracao[nX,50]
		    EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECOP - RN ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[34,3] += aApuracao[nX,106]

	    	//desenvolve
	    	aCols7[39,3] += aApuracao[nX,121]
	    	aCols7[40,3] += iif( allTrim( aApuracao[nX,1] ) $ cDsvInd , aApuracao[nX,121] , aApuracao[nX,120] )

	    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FEEF - Fundo Estadual de Equilíbrio Fiscal
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			//Armazeno valor FEEF entrada
			aCols7[42,3] -= aApuracao[nX,143]

			//Aqui busco o valor dos créditos por entrada filtrados pelos CFOPs definidos no parâmetro MV_CRDFOM para apuração do Fomentar
			If lFomentGO .AND. !Empty(GetNewPar("MV_CRDFOM",''))
				nCrdFom += aApuracao[nX,145]
			EndIf

	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Montagem do aCols (2)  - Op. Proprias Saida           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nPos :=  Ascan(aCOLS2,{|x|x[1]==aApuracao[nX,1]})
		If nPos==0
			Aadd(aCOLS2,Array(07))
			nPos			:=	Len(aCOLS2)
			aCOLS2[nPos,01]	:=	aApuracao[nX,1]
			aCOLS2[nPos,7] := .F.
			Aeval(aCOLS2[nPos],{|x,nX|aCOLS2[nPos,nX]:=0},2,5)
		EndIf
		aCOLS2[nPos,2] += aApuracao[nX,11] //Valor Contabil
		aCOLS2[nPos,3] += aApuracao[nX,03] //Base do ICMS
		aCOLS2[nPos,4] += aApuracao[nX,04] //Valor do ICMS
		aCOLS2[nPos,5] += aApuracao[nX,05] //Isentas
		aCOLS2[nPos,6] += aApuracao[nX,06] //Outras

		nPos5 := ascan(aCols5,{|x|x[1]=="001"})
		If cMV_Estado=="SC" .And. lSimplSC
			aCols5[nPos5,04] += aApuracao[nX,04] - aApuracao[nX,36] //Por saidas/prestacoes com debito do imposto - Simples/SC
		ElseIf !Empty(cInfLivr) .And. (cNrLivro $ cInfLivr) .And. (aValap[4] = 3 .Or. aValap[3] = 3)
			If aValap[3] = 3
				aCols5[nPos001,04] := aValap[1] //Retorno de Função //0 
			Else
				aCols5[nPos5,04] += aApuracao[nX,04] //Por saidas/prestacoes com debito do imposto
			Endif
			If aValap[4] = 3
				aCols5[nPos005,04] := aValap[2] //Retorno de Função //0 
			Endif
		Else
			aCols5[nPos5,04] += aApuracao[nX,04] //Por saidas/prestacoes com debito do imposto

			/*
			Irei totalizar aqui o valor contábil das saídas quando estiver habilitada a aba do Fomentar GO. Segundo instrução de prenchimento
			na linha 002 do quadro A deve contar o valor total das saídas registradas no Livro de Apuração do ICMS, por este motivo estou totalizando
			o valor contábil das saídas, que será utilizada na linha 002 quadro A.
			*/

			If lFomentGO
				nTotFom	+= aApuracao[nX,142]
			EndIf

		EndIf

		//If !lUsaSped .Or. !lLancCDA // Se usa SPED, montagem dos folder 5, 5 e 7 sera feita a parir de outro array
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	        //³ ICMS Retido Vendas                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[1,3]	 += aApuracao[nX,13]
	        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Diferencial de Aliquota        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[2,3]	 -= aApuracao[nX,10]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECP	       		    	 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[28,3] -= aApuracao[nX,73]			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Diferido                       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[4,3]	 += aApuracao[nX,14]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Complementar Ativo Imobilizado ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[5,3]	 -= aApuracao[nX,18]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ ICMS Complementar Mat.Uso ou Consumo³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[6,3]	 -= aApuracao[nX,17]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Transferencia de Debito              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	If aApuracao[nX,1] <> "5605"
		    	aCols7[7,3]	 += aApuracao[nX,15] // Transferencia de Credito na Saída
	    	Else
	    		aCols7[8,3]	 += aApuracao[nX,16]
	    	EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	        //³ ICMS Retido - Apuracao ST           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !lSTInterna .Or. (lSTInterna .And. SubStr(aApuracao[nX,01],1,1)$"1/5" )
				nPos6 := ascan(aCols6,{|x|x[1]=="001"})
				aCols6[nPos6,4]	 += aApuracao[nX,08]
				aSTPorUF[nPosUF][2] += aApuracao[nX,08]
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Debito  de ICMS Solidario              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[9,3]	 -= aApuracao[nX,21]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Estimulo - Manaus ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[10,3] += aApuracao[nX,30]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Presumido - RJ/PR/RO³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[11,3] += aApuracao[nX,34]+ aApuracao[nX,55]+ aApuracao[nX,64]

	    	If aApurSX3[FP_F3_CRDPCTR]	
    			aCols7[11,3] += aApuracao[nX,111]
	    	EndIf
	    	If aApurSX3[FP_F3_CREDPRE]	
    			aCols7[11,3] += aApuracao[nX,112]
    		EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Presumido - RJ - Prestacoes de Servicos de Transporte   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[12,3] += aApuracao[nX,37]
	    	//
	    	//Valor Crédito Presumido nas operações de Saída com o ICMS destacado sobre os produtos resultantes da industrialização com componentes, partes e pecas recebidos do exterior, destinados a fabricacao de produtos de informatica, eletronicos e telecomunicacoes, por estabelecimento industrial desses setores. Tratamento conforme Art. 1º do DECRETO 4.316 de 19 de Junho de 1995.
	    	aCols7[15,3] += aApuracao[nX,41]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Fundersul - Mato Grosso do Sul³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[16,3] += aApuracao[nX,44]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³SENAR                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[29,3] += iif(!aApuracao[nX][133],0,aApuracao[nX,85])
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Estorno de Credito            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[17,3] += aApuracao[nX,47] //Conforme issue DSERFIS1-17118, precisa-se acrescer nas informações complementares o valor de estorno de credito
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECOP - Ceara			 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[23,3] += aApuracao[nX,68]
	    	aCols7[24,3] += aApuracao[nX,69]
	    	aCols7[25,3] += aApuracao[nX,70]
	    	aCols7[26,3] += aApuracao[nX,71]

	    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Cred. Presumido-art.631-A do RICMS/2008	       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			aCols7[27,3] += aApuracao[nX,72]
	    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Outorgado SP - Decreto 56.018 de 16.07.2010, |
			//|o Decreto 56.855, de 18 .03.2011 e o                 |
			//|Decreto 56.874, de 23.03.2011     					³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[30,3] += aApuracao[nX,86]
	    	aCols7[30,3] += aApuracao[nX,97]
	    	aCols7[30,3] += aApuracao[nX,98]
	    	aCols7[30,3] += aApuracao[nX,99]
	    	If cMv_Estado == "MG"
		    	aCols7[31,3] += aApuracao[nX,50]
		    EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Credito Outorgado - GO Inc.III, Art 11 Anexo IX - RCTE-GO/97   ³
			//e Fundo de Protecao Social do Estado de GO - PROTEGE            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    	If cMv_Estado == "GO"
	    		aCols7[30,3] += aApuracao[nX,110]
	    	EndIf

	    	// PROTEGE-GO
	    	aCols7[41,3] += Max(aApuracao[nX,51] - IIf(Len(aApuracao[nX]) >= 141, aApuracao[nX,141], 0), 0)

		    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Fundo Estadual de Equilíbrio Fiscal
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		    //aCols7[42,3] += Max(aApuracao[nX,139] - IIf(aCols7[42,3]<0 .And. aApuracao[nX,139]>0 ,aCols7[42,3],0), 0) //Saídas - Devoluções(entradas)
			aCols7[42,3] += aApuracao[nX,139]

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Estorno de Debito             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aCols7[18,3] += aApuracao[nX,49]

			//ÚÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECOP - RN ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÙ
	    	aCols7[32,3] += aApuracao[nX,104]
	    	aCols7[33,3] += aApuracao[nX,105]

			//ÚÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECP - MG ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÙ
		    If cMV_Estado=="MG"
				aCols7[35,3] += aApuracao[nX,113]
				aCols7[36,3] += aApuracao[nX,114]
				aCols7[37,3] += aApuracao[nX,115]
				aCols7[37,3] += aApuracao[nX,116]
		    EndIf
		    //ÚÄÄÄÄÄÄÄÄÄÄÄ¿
			//³FECP - MT ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÙ
		    If cMV_Estado=="MT"
				aCols7[38,3] += aApuracao[nX,118]
		    EndIf

		    //desenvolve
	    	aCols7[39,3] += aApuracao[nX,121]
	    	aCols7[40,3] += iif( allTrim( aApuracao[nX,1] ) $ cDsvInd , aApuracao[nX,121] , aApuracao[nX,120] )

		    // PROTEGE-GO Recolhido na emissao do documento.
		    aCols7[43,3] += IIf(Len(aApuracao[nX]) >= 141, aApuracao[nX,141], 0)
		//EndIf
	EndIf

   //	If !lUsaSped .Or. !lLancCDA

    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	    //³Fust                          ³
	    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    	aCols7[19,3] := aApuracao[nX,53]
    	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    	//³Funttel                       ³
    	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    	aCols7[20,3] := aApuracao[nX,54]

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Credito Acumulado de ICMS - Exportacoes         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aCols7[21,3] := aApuracao[nX,62]
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Credito Acumulado de ICMS - Outras hipoteses    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aCols7[22,3] := aApuracao[nX,63]
   //	EndIf

    If cMV_Estado=="MG"
        //quando existe valor de transferencia de credito conforme art.488 RICMS-MG, deve ser descontado esse
        //valor do total de imposto a recolher
        If aApuracao[nX,87]<> 0
            nVlrArt488MG := nVlrArt488MG + aApuracao[nX,87]
            cObsArt488MG := cObsArt488MG + aApuracao[nX,89]
            lArt488MG := .T.
        EndIf
        If aApuracao[nX,88]<>0
            nVlrArt488MG := nVlrArt488MG - aApuracao[nX,88]
            cObsArt488MG := cObsArt488MG + aApuracao[nX,89]
            lArt488MG := .T.
        EndIf
    EndIf

    If cMV_Estado=="MA"
        nVlFumacop := nVlFumacop + aApuracao[nX,83]
    EndIf

Next nX

For nX := 1 To Len( aSTPorUF )
    aSTPorUF[nX][4] := aSTPorUF[nX][2] - aSTPorUF[nX][3]
Next

//Tratamento para não gerar valor negativo para o SENAR
if aCols7[29,3] < 0 
	aCols7[29,3] := 0	
EndIf

If cMV_Estado=="MG"
	If aCols7[35,3] < 0
	    aCols7[35,3] := 0
	EndIf
	If aCols7[36,3] < 0
	    aCols7[36,3] := 0
	EndIf
	If aCols7[37,3] < 0
	    aCols7[37,3] := 0
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Insere no aCOLS7 os valores de ICMS-ST ja pagos em GNRE's emitidas junto com os documentos  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 to len(aIcmPago)

	cDeStPgDoc	:= aIcmPago[nX][1] + " - ICMS ST pago via GNRE na emissão do Documento"

	If (nY := aScan(aCols7,{|x| Substr(x[2],1,len(cDeStPgDoc)) == cDeStPgDoc })) == 0
		Aadd(aCols7,{SOMA1(aCols7[len(aCols7)][1]),cDeStPgDoc,0,.F.})
		nY := len(aCols7)
	EndIf
	aCols7[nY][3] += aIcmPago[nX][2]
Next
If lUsaSped .And. lLancCDA
	aApurCDA := Asort(aApurCDA,,,{|x,y|x[1]<y[1]})
	For nX := 1 to len(aApurCDA)
		If ("1"$aApurCDA[nX][8])	//	ICMS-ST
			nPos := ascan(aCols6,{|x|x[1]==aApurCDA[nX][1]})
			If nPos > 0
				aCols6[nPos,04] += aApurCDA[nX,04]
			EndIf
 		Else	// ICMS
			nPos := ascan(aCols5,{|x|x[1]==aApurCDA[nX][1]})
			If nPos > 0
				aCols5[nPos,04] += aApurCDA[nX,04]
			EndIf
		EndIf
	Next
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Insere no aCOLS5 os ajustes de ICMS levantados do CDA        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 to len(aCDAIC)

	If  (!aCDAIC[nX][10] .And. (nPosZ := ascan(aCols5,{|x|x[1]==aCDAIC[nX][1] .And. AllTrim(x[7])==AllTrim(aCDAIC[nX][7]).and. alltrim(x[8]) <> alltrim(a953TpLanc("CF")) .and. alltrim(x[8]) <> alltrim(a953TpLanc("A"))  }))==0) .Or. (aCDAIC[nX][10] .And.  (nPosZ := ascan(aCols5,{|x|x[1]==aCDAIC[nX][1] .And. AllTrim(x[7])==AllTrim(aCDAIC[nX][7])  .And. alltrim(x[8]) == alltrim(a953TpLanc("A") + aCDAIC[nX][8]) }))==0) .OR. (nPosZ := ascan(aCols5,{|x|x[1]==aCDAIC[nX][1] .And. AllTrim(x[7])==AllTrim(aCDAIC[nX][7]).and. alltrim(x[8]) == alltrim(a953TpLanc("M")) }))==0
		nPos  				:= 	ascan(aCols5,{|x|x[1]==aCDAIC[nX][1]})
		Aeval(aCols5,{|x| If(x[1]==aCDAIC[nX][1] .And. x[nPosl]==.F.,nPos++,)})
		aCols5		   		:= 	Asize(aCols5,Len(aCols5)+1)
		aCols5		   		:= 	Ains(aCols5,nPos)
		If lProcRef
			aCols5[nPos]   		:= 	{aCDAIC[nX][1], CodSubItem(aCDAIC[nX][1], aCont,1),aCDAIC[nX][3],aCDAIC[nX][4],aCDAIC[nX][5],aCDAIC[nX][6],aCDAIC[nX][7], Iif(aCDAIC[nX][10] , a953TpLanc("A") + aCDAIC[nX][8] ,IIF(Alltrim(aCDAIC[nX][12])<>"",a953TpLanc("CF"), a953TpLanc("AG") ))  ,Space(TamSx3("CCF_NUMERO")[1]),Space(TamSx3("CCF_TIPO")[1]),Space(TamSx3("CCF_INDAUT")[1]),Space(TamSx3("CCF_IDITEM")[1]),aCDAIC[nX][9]}
		Else
			aCols5[nPos]   		:= 	{aCDAIC[nX][1], CodSubItem(aCDAIC[nX][1], aCont,1),aCDAIC[nX][3],aCDAIC[nX][4],aCDAIC[nX][5],aCDAIC[nX][6],aCDAIC[nX][7], Iif(aCDAIC[nX][10] ,a953TpLanc("A") + aCDAIC[nX][8],a953TpLanc("AG") )  ,aCDAIC[nX][9]}
		EndIf
	Else
		aCols5[nPosZ][4]	:=	aCDAIC[nX][4]
	EndIf

Next nX

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Insere no aCOLS6 os lancamentos de ICMS-ST levantados do CDA ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 to len(aCDAST)

	If(!aCDAST[nX][10] .And. (nPosZ := ascan(aCols6,{|x|x[1]==aCDAST[nX][1] .And. AllTrim(x[7])==AllTrim(aCDAST[nX][7]).and. alltrim(x[8]) <> alltrim(a953TpLanc("CF")) .and. alltrim(x[8]) <> alltrim(a953TpLanc("A"))  }))==0) .Or. (aCDAST[nX][10] .And.  (nPosZ := ascan(aCols6,{|x|x[1]==aCDAST[nX][1] .And. AllTrim(x[7])==AllTrim(aCDAST[nX][7])  .And. alltrim(x[8]) == alltrim(a953TpLanc("A") + aCDAST[nX][8]) }))==0) .OR. (nPosZ := ascan(aCols6,{|x|x[1]==aCDAST[nX][1] .And. AllTrim(x[7])==AllTrim(aCDAST[nX][7]).and. alltrim(x[8]) == alltrim(a953TpLanc("M")) }))==0
		nPos 				:= 	ascan(aCols6,{|x|x[1]==aCDAST[nX][1]})
		Aeval(aCols6,{|x| If(x[1]==aCDAST[nX][1] .And. x[nPosl]==.F.,nPos++,)})
		aCols6		 		:=	Asize(aCols6,Len(aCols6)+1)
		aCols6		 		:= 	Ains(aCols6,nPos)
		If lProcRef
			aCols6[nPos] 		:= 	{aCDAST[nX][1],CodSubItem(aCDAST[nX][1], aCont,2),aCDAST[nX][3],aCDAST[nX][4],aCDAST[nX][5],aCDAST[nX][6],aCDAST[nX][7], Iif (aCDAST[nX][10] , a953TpLanc("A") + aCDAST[nX][8] ,IIF(Alltrim(aCDAST[nX][12])<>"",a953TpLanc("CF"), a953TpLanc("AG") )) , Space(TamSx3("CCF_NUMERO")[1]), Space(TamSx3("CCF_TIPO")[1]), Space(TamSx3("CCF_INDAUT")[1]), Space(TamSx3("CCF_IDITEM")[1]), aCDAST[nX][9]}
		Else
			aCols6[nPos] 		:= 	{aCDAST[nX][1],CodSubItem(aCDAST[nX][1], aCont,2),aCDAST[nX][3],aCDAST[nX][4],aCDAST[nX][5],aCDAST[nX][6],aCDAST[nX][7], Iif (aCDAST[nX][10] , a953TpLanc("A") + aCDAST[nX][8] , a953TpLanc("AG") ) ,aCDAST[nX][9]}
		EndIf
	Else
		aCols6[nPosZ][4]	:=	aCDAST[nX][4]
	EndIf

Next

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Insere no aCOLS10 - Debitos especiais os ajustes de ICMS levantados do CDA      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 to len(aCDADE)

	If  (!aCDADE[nX][9] .And. (nPosZ := ascan(aCols10,{|x|x[1]==aCDADE[nX][1] .And. AllTrim(x[7])==AllTrim(aCDADE[nX][7]).and. alltrim(x[8]) <> alltrim(a953TpLanc("CF")) .and. alltrim(x[8]) <> alltrim(a953TpLanc("A")) }))==0) .Or. (aCDADE[nX][9] .And.  (nPosZ := ascan(aCols10,{|x|x[1]==aCDADE[nX][1] .And. AllTrim(x[7])==AllTrim(aCDADE[nX][7])  .And. alltrim(x[8]) == alltrim(a953TpLanc("A") + aCDADE[nX][11]) }))==0)  .OR. (nPosZ := ascan(aCols10,{|x|x[1]==aCDADE[nX][1] .And. AllTrim(x[7])==AllTrim(aCDADE[nX][7]).and. alltrim(x[8]) == alltrim(a953TpLanc("M")) }))==0
		nPos  				:= 	ascan(aCols10,{|x|x[1]==aCDADE[nX][1]})
		Aeval(aCols10,{|x| If(x[1]==aCDADE[nX][1] .And. x[nPos2]==.F.,nPos++,)})
		aCols10		 		:= 	Asize(aCols10,Len(aCols10)+1)
		aCols10		 		:= 	Ains(aCols10,nPos)
		If lProcRef
			aCols10[nPos] 	:= 	{aCDADE[nX][1],CodSubItem(aCDADE[nX][1], aCont,3),aCDADE[nX][3],aCDADE[nX][4],aCDADE[nX][5],aCDADE[nX][6],aCDADE[nX][7], Iif (aCDADE[nX][9] ,a953TpLanc("A") + aCDADE[nX][11] ,IIF(Alltrim(aCDADE[nX][12])<>"",a953TpLanc("CF"), a953TpLanc("AG") )) , Space(TamSx3("CCF_NUMERO")[1]), Space(TamSx3("CCF_TIPO")[1]), Space(TamSx3("CCF_INDAUT")[1]), Space(TamSx3("CCF_IDITEM")[1]), aCDADE[nX][8]}
		Else
			aCols10[nPos] 	:= 	{aCDADE[nX][1],CodSubItem(aCDADE[nX][1], aCont,3),aCDADE[nX][3],aCDADE[nX][4],aCDADE[nX][5],aCDADE[nX][6],aCDADE[nX][7], Iif (aCDADE[nX][9] ,a953TpLanc("A") + aCDADE[nX][11] , a953TpLanc("AG") ) ,aCDADE[nX][8]}
		EndIf
	Else
		aCols10[nPosZ][4]	:=	aCDADE[nX][4]
	EndIf

Next nX

If lAutomato .And. lUsaSped
	For nPosAuto :=1 to Len(aRetAuto)
		If aRetAuto[nPosAuto][2]=="10"	 .And. aRetAuto[nPosAuto][3]=="900"
			If aRetAuto[nPosAuto][1] == "Aut"
				nPosPad := aScan(aCOLS10,{|x|AllTrim(x[1]) == aRetAuto[nPosAuto][3] .And. AllTrim(x[2]) == aRetAuto[nPosAuto][6] .And. AllTrim(x[7]) == aRetAuto[nPosAuto][9]} )
				If nPosPad > 0
      				AtuAcols(aCols10,nPosPad,aRetAuto,nPosAuto,lProcRef)
      			EndIf
			EndIf
    	EndIf
    Next nX
EndIf

If lCon13906
	For nX :=1 to Len(aConv139)
		If !aConv139[nX,01] $ cMv_Estado
			Aadd(aCOLS11,Array(07))
			nPos	:= Len(aCOLS11)
			aCOLS11[nPos,01]	:=	aConv139[nX,01]
			aCOLS11[nPos,02]	:=	aConv139[nX,02]
			aCOLS11[nPos,03]	:=	aConv139[nX,03]
			aCOLS11[nPos,04]	:=	aConv139[nX,04]
			aCOLS11[nPos,05]	:='	""
			aCOLS11[nPos,06]	:=	""
			aCOLS11[nPos,07]	:=	.F.
			aCVTot[1]			+=	aConv139[nX,02]
			aCVTot[2]			+=	aConv139[nX,03]
			aCVTot[3]			+=	aConv139[nX,04]
	    EndIf
	Next nX

	//Ordena array pela UF em ordem crescente
	aCOLS11 := ASort(aCOLS11,,,{|x,y| x[1] < y[1] })

	Aadd(aCOLS11,Array(07))
	nPos	:= Len(aCOLS11)
	aCOLS11[nPos,01]	:=	STR0264 //SUB TOTAL
	aCOLS11[nPos,02]	:=	aCVTot[1]
	aCOLS11[nPos,03]	:=	aCVTot[2]
	aCOLS11[nPos,04]	:=	aCVTot[3]
	aCOLS11[nPos,05]	:=	""
	aCOLS11[nPos,06]	:=	""
	aCOLS11[nPos,07]	:=	.F.

	Aadd(aCOLS11,Array(07))
	nPos	:= Len(aCOLS11)
	aCOLS11[nPos,01]	:=	SuperGetMv("MV_ESTADO", .T., "")
	nX:= ascan(aConv139,{|x|x[1]==aCOLS11[nPos,01]})
	aCOLS11[nPos,02]	:=	Iif(nX>0,aConv139[nX,02],0)
	aCOLS11[nPos,03]	:=	Iif(nX>0,aConv139[nX,03],0)
	aCOLS11[nPos,04]	:=	Iif(nX>0,aConv139[nX,04],0)
	aCOLS11[nPos,05]	:=	""
	aCOLS11[nPos,06]	:=	""
	aCOLS11[nPos,07]	:=	.F.
	aCVTot[1]			+=	aCOLS11[nPos,02]
	aCVTot[2]			+=	aCOLS11[nPos,03]
	aCVTot[3]			+=	aCOLS11[nPos,04]

	Aadd(aCOLS11,Array(07))
	nPos	:= Len(aCOLS11)
	aCOLS11[nPos,01]	:=	STR0265//"Total Geral"
	aCOLS11[nPos,02]	:=	aCVTot[1]
	aCOLS11[nPos,03]	:=	aCVTot[2]
	aCOLS11[nPos,04]	:=	aCVTot[3]
	aCOLS11[nPos,05]	:=	""
	aCOLS11[nPos,06]	:=	""
	aCOLS11[nPos,07]	:=	.F.
EndIf

Aadd(aEstado,{'Acre '  ,'AC'})
Aadd(aEstado,{'Alagoas ','AL'})
Aadd(aEstado,{'Amapá ','AP'})
Aadd(aEstado,{'Amazonas ','AM'})
Aadd(aEstado,{'Bahia ','BA'})
Aadd(aEstado,{'Ceará ','CE'})
Aadd(aEstado,{'Distrito Federal ','DF'})
Aadd(aEstado,{'Espírito Santo ','ES'})
Aadd(aEstado,{'Goiás ','GO'})
Aadd(aEstado,{'Maranhão ','MA'})
Aadd(aEstado,{'Mato Grosso  ','MT'})
Aadd(aEstado,{'Mato Grosso do Sul ','MS'})
Aadd(aEstado,{'Minas Gerais ','MG'})
Aadd(aEstado,{'Pará ','PA'})
Aadd(aEstado,{'Paraíba ','PB'})
Aadd(aEstado,{'Paraná ','PR'})
Aadd(aEstado,{'Pernambuco ','PE'})
Aadd(aEstado,{'Piauí ','PI'})
Aadd(aEstado,{'Rio de Janeiro ','RJ'})
Aadd(aEstado,{'Rio Grande do Norte ','RN'})
Aadd(aEstado,{'Rio Grande do Sul ','RS'})
Aadd(aEstado,{'Rondônia ','RO'})
Aadd(aEstado,{'Roraima ','RR'})
Aadd(aEstado,{'Santa Catarina ','SC'})
Aadd(aEstado,{'São Paulo ','SP'})
Aadd(aEstado,{'Sergipe ','SE'})
Aadd(aEstado,{'Tocantins ','TO'})

If lProcRef
	Aadd(aCOLS12,Array(12))
	nPos	:= Len(aCOLS12)
	aCOLS12[nPos,01]	:=	''
	aCOLS12[nPos,02]	:=	''
	aCOLS12[nPos,12]	:=	.F.
Else
	Aadd(aCOLS12,Array(08))
	nPos	:= Len(aCOLS12)
	aCOLS12[nPos,01]	:=	''
	aCOLS12[nPos,02]	:=	''
	aCOLS12[nPos,08]	:=	.F.
EndIf

aApurDifal	:= {}
cMvEst	:= SuperGetMv("MV_ESTADO", .T., "")

If lProcDifal
	dbSelectArea("F0I")
	F0I->(DbSetOrder (1))
EndIf

For nEst	:= 1 to Len(aEstado)

	// Tratamento para inicialização do Difal caso não haja movimentação mas o mesmo possua inscrição no estado.
	lSubTrib := Empty(IESubTrib(aEstado[nEst][2],.T.))

	If !lSubTrib .Or. aEstado[nEst][2] == cMvEst
		nPsDifal	:=	Ascan(aDifal,{|x|x[1]==aEstado[nEst][2]})
		If nPsDifal == 0
			Aadd(aDifal,Array(05))
			nPsDifal	:= Len(aDifal)
			aDifal[nPsDifal,01]	:=	aEstado[nEst][2] 					//UF
			aDifal[nPsDifal,02]	:=	0									//Débito do Difal na saída
			aDifal[nPsDifal,03]	:=	0									//Débito do FECP na saída
			aDifal[nPsDifal,04]	:=	0									//Crédito do DIFAL na entrada
			aDifal[nPsDifal,05]	:=	0 									//Crédito do FECO na entrada
		EndIf
	EndIf

	aDifEst	:= ApurDifal(aEstado[nEst][2] ,aEstado[nEst][1], aDifal, aCdaDifal,cNrLivro,dDtIni,lAutomato,cTestCase)

	If lProcRef
		Aadd(aCOLS12,Array(12))
	Else
		Aadd(aCOLS12,Array(08))
	EndIf

	nPos	:= Len(aCOLS12)

	If aEstado[nEst][2] == cMvEst
		aCOLS12[nPos,01]	:='br_amarelo'
	Else
		aCOLS12[nPos,01]	:=	Iif (lSubTrib ,'br_vermelho' ,'br_verde' )
	EndIf

	aCOLS12[nPos,02]	:=	aEstado[nEst][2] + ' - ' +  aEstado[nEst][1]

	If lProcDifal .And. ascan(aDifal,{|x|x[1]==aEstado[nEst][2]}) > 0

		aCOLS12[nPos,03]	:=	aDifEst[aScan(aDifEst,{|x|x[2] == '010.00'} )][4]
		aCOLS12[nPos,04]	:=	aDifEst[aScan(aDifEst,{|x|x[2] == '011.00'} )][4]
		aCOLS12[nPos,07]	:=	aDifEst[aScan(aDifEst,{|x|x[2] == '012.00'} )][4]
		If Year(dDtIni) < 2017
		aCOLS12[nPos,05]	:=	aDifEst[aScan(aDifEst,{|x|x[2] == '016.00'} )][4]
		aCOLS12[nPos,06]	:=	aDifEst[aScan(aDifEst,{|x|x[2] == '017.00'} )][4]
		Else
			aCOLS12[nPos,05]	:=	aDifEst[aScan(aDifEst,{|x|x[2] == '022.00'} )][4]
			aCOLS12[nPos,06]	:=	aDifEst[aScan(aDifEst,{|x|x[2] == '023.00'} )][4]
			aCOLS12[nPos,07]	+=	aDifEst[aScan(aDifEst,{|x|x[2] == '024.00'} )][4]
		EndIf
	EndIf


	If lProcRef
		aCOLS12[nPos,12]	:=	.F.
	Else
		aCOLS12[nPos,08]	:=	.F.
	EndIf

	//Armazena array do estado no array com todos os estados
	Aadd(aApurDifal,{aEstado[nEst][2],aDifEst})

next nEst

If lProcRef
	Aadd(aCOLS12,Array(12))
	aCOLS12[nPos,12]	:=	.F.
Else
	Aadd(aCOLS12,Array(08))
	aCOLS12[nPos,08]	:=	.F.
EndIf

nPos	:= Len(aCOLS12)
aCOLS12[nPos,01]	:=	''
aCOLS12[nPos,02]	:=	''

If lProcRef
	Aadd(aCOLS13,Array(12))
Else
	Aadd(aCOLS13,Array(08))
EndIf

nPos	:= Len(aCOLS13)
aCOLS13[nPos,01]	:=	''
aCOLS13[nPos,06]	:=	""

If !lProcRef
	aCOLS13[nPos,08]	:=	.F.
Else
	aCOLS13[nPos,08]	:=	Space(TamSx3("CCF_NUMERO")[01])
	aCOLS13[nPos,09]	:=	Space(TamSX3('CCF_TIPO')[01])
	aCOLS13[nPos,10]	:=	Space(TamSX3('CCF_INDAUT')[01])
	aCOLS13[nPos,11]	:=	Space(TamSX3('CCF_IDITEM')[01])
	aCOLS13[nPos,12]	:=	.F.
EndIf

//Processamento da aba Extra Apuração
If lCmpExtra
	ExtraApur(aCDAExtra,aApurExtra,@aCOLS14,@aCOLS15,dDtIni,aEApCe6Ce5)
Else

	Aadd(aCOLS14,{'', space(8), space(50), 0, 0, 0, 0, 0,.F.})

	Aadd(aCOLS15,Array(09))
	nPos	:= Len(aCOLS15)
	aCOLS15[nPos,01]	:=	''
	aCOLS15[nPos,09]	:=	.F.
EndIf

If !lLancCDA .Or. lP9Sped
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa a configuracao de autopreenchimento do ICMS          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	FsExecCFGAp(aCFG[3],aCols5)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montagem do aCols (3)  - ST Entradas        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 to len(aEntrada)
	nPos :=  Ascan(aCOLS3,{|x|x[1]==aEntrada[nX,01]})
	If nPos==0 .And. aEntrada[nX,04]+aEntrada[nX,06]+IIF(len(aEntrada[nX])>=7,aEntrada[nX,07],0) >0
		Aadd(aCOLS3,Array(09))
		nPos			:=	Len(aCOLS3)
		aCOLS3[nPos,01]	:=	aEntrada[nX,01]
		Aeval(aCOLS3[nPos],{|x,nX|aCOLS3[nPos,nX]:=0},2)
		aCOLS3[nPos,len(aCOLS3[nPos])] := .F.
	EndIf
 	If nPos <> 0
		aCOLS3[nPos,02]+=	aEntrada[nX,03] //Base ST
		// mv_par15 = 3: Imprime somente os creditos - ST por devolucao de vendas.
		// Mesmo tratamento aplicado na montagem do aCols6: Apuração - ST.
		If mv_par15 <> 3
			aCOLS3[nPos,03]+=	IIF(lImpCrdSt,aEntrada[nX,05],aEntrada[nX,04]) //Valor Retido
		EndIf
		aCOLS3[nPos,04]+=	aEntrada[nX,06] //Imposto debitado na Entrada
		If len(aEntrada[nX]) >= 7 .And. Valtype(aCOLS3[nPos,6]) == "N"
			aCOLS3[nPos,06]+=	aEntrada[nX,07] //Imposto creditado na Entrada por devolucoes de vendas
		EndIf
		If len(aEntrada[nX]) >= 8 .And. Valtype(aCOLS3[nPos,08]) == "N"
			aCOLS3[nPos,08] +=	aEntrada[nX,08] //Valor do Fecp st
		EndIf
	EndIf

Next nX

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Caso o parametro indique, o nome do arquivo do periodo anterior³
//³sera montado automaticamente pela rotina.                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(cArqAnt)
	If lArqAnt
		If nMes == 1
			nAno := nAno - 1
			nMes := 12
		Else
			nMes := nMes - 1
		EndIf
		cArqAnt := NmArqApur(cImp,nAno,nMes,nApuracao,nPeriodo,cNrLivro)
	EndIf
EndIf

If !Empty(cArqAnt)
	aContentX5 := FWGetSX5( "12" )

	For nX := 1 To Len( aContentX5 )
		nValor := LoadAnt(substr(cArqAnt,1,Len(cArqAnt)-3)+"ST"+substr(cArqAnt,Len(cArqAnt),1),"1"+Left( aContentX5[nX][3], 2 ))
		nPos :=  Ascan(aCOLS3,{|x|x[1]==Left( aContentX5[nX][3], 2 )})
		//Atualiza saldo do periodo anterior - ST
		If nValor < 0
			If nPos==0
				Aadd(aCOLS3,Array(07))
				nPos			:=	Len(aCOLS3)
				aCOLS3[nPos,01]	:=	Left( aContentX5[nX][3], 2 )
				Aeval(aCOLS3[nPos],{|x,nX|aCOLS3[nPos,nX]:=0},2)
				aCOLS3[nPos,len(aCOLS3[nPos])] := .F.
			EndIf
			aCOLS3[nPos,05]+= Abs(nValor)
		EndIf
	Next
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montagem do aCols (4)  - ST Saidas          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 to len(aSaida)
	nPos :=  Ascan(aCOLS4,{|x|x[1]==aSaida[nX,01]})
	If nPos==0 .And. aSaida[nX,04] >0
		Aadd(aCOLs4,Array(05))
		nPos			:=	Len(aCOLS4)
		aCOLS4[nPos,01]	:=	aSaida[nX,01]
		aCOLS4[nPos,05] := .F.
		Aeval(aCOLS4[nPos],{|x,nX|aCOLS4[nPos,nX]:=0},2,3)
	EndIf
	If nPos <> 0
		aCOLS4[nPos,02]	+=	aSaida[nX,03] //Base ST
		aCOLS4[nPos,03]	+=	aSaida[nX,04] //Valor Retido
		aCOLS4[nPos,04] 	+=	aSaida[nX,05] // fecp st
	EndIf
Next nX

nPos5 := ascan(aCols5,{|x|x[1]=="009"})
aCols5[nPos5,4] :=	LoadAnt(cArqAnt,"014")

nPos6 := ascan(aCols6,{|x|x[1]=="011"})
aCols6[nPos6,4] :=	LoadAnt(substr(cArqAnt,1,Len(cArqAnt)-3)+"ST"+substr(cArqAnt,Len(cArqAnt),1),"016")

If lApurBa
    //Exportacoes
	nPos8 := ascan(aCols8,{|x|x[1]=="009"})
	aCols8[nPos8,4] :=	LoadAnt(cArqAnt,"014","EXP")
    //Outras hipoteses
	nPos9 := ascan(aCols9,{|x|x[1]=="009"})
	aCols9[nPos9,4] :=	LoadAnt(cArqAnt,"014","OUT")
EndIf

If cMV_Estado=="MA"
    nPos5 := ascan(aCols5,{|x|x[1]=="012"})
    aCols5[nPos5+1,04] := nVlFumacop //Adcional FUMACOP
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Caso os aCOLS estejam vazios, preenche uma linha zerada ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If len(aCOLS1) == 0
	Aadd(aCOLS1,Array(07))
	aCOLS1[1,1] := space(05)
	aCOLS1[1,7] := .F.
	Aeval(aCOLS1[1],{|x,nX|aCOLS1[1,nX]:=0} ,2,5)
EndIf
If len(aCOLS2) == 0
	Aadd(aCOLS2,Array(07))
	aCOLS2[1,1] := space(05)
	aCOLS2[1,7] := .F.
	Aeval(aCOLS2[1],{|x,nX|aCOLS2[1,nX]:=0},2,5)
EndIf
If len(aCOLS3) == 0
	Aadd(aCOLS3,Array(07))
	aCOLS3[1,1] := space(02)
	Aeval(aCOLS3[1],{|x,nX|aCOLS3[1,nX]:=0},2)
	aCOLS3[1,len(aCOLS3[1])] := .F.
EndIf
If len(aCOLS4) == 0
	Aadd(aCOLS4,Array(05))
	aCOLS4[1,1] := space(02)
	aCOLS4[1,5] := .F.
	Aeval(aCOLS4[1],{|x,nX|aCOLS4[1,nX]:=0},2,3)
EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FsLoadCFGA³ Autor ³Eduardo Riera          ³ Data ³11.06.2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Leitura da configuracao de AutoTexto                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpA1: Array com a seguinte estrutura:                      ³±±
±±³          ³       [1] Array com a Pre-configuracao a ser executada     ³±±
±±³          ³       [2] Array com os valores a serem executados          ³±±
±±³          ³       [3] Array com a Pos-configuracao a ser executada     ³±±
±±³          ³       [4] Array com a Observacao a ser executada           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Arquivo de configuracao                              ³±±
±±³          ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function FsLoadCFGAp(cArquivo)

Local aArea         := GetArea()
Local aCFG          := {{},{},{},{}}
Local cArqCFG       := AllTrim(cArquivo)
Local cLinha        := ""
Local nLinha        := 0
Local aPre          := {}
Local aPos          := {}
Local aVlr          := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Procura o arquivo de configuracao do Estado                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If File(cArqCFG+"."+SuperGetMv('MV_ESTADO'))
	cArqCFG := cArqCFG+"."+SuperGetMv('MV_ESTADO')
Else
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Utiliza o arquivo de configuracao Generico                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cArqCFG := cArqCFG+".CFG"
EndIf

If File(cArqCFG)
	FT_FUSE(cArqCFG)
	FT_FGotop()
	While ( !FT_FEof() )
		cLinha := AllTrim(FT_FREADLN())
		Do Case
			Case SubStr(cLinha,1,1)=="["
				If nLinha <> 0
					Aadd(aCFG[nLinha],aPre)
					Aadd(aCFG[nLinha],aVlr)
					Aadd(aCFG[nLinha],aPos)
				EndIf
				nLinha++
				aPre := {}
				aPos := {}
				aVlr := {}
			Case SubStr(cLinha,1,4)=="(PRE"
				Aadd(aPre,SubStr(cLinha,6))
			Case SubStr(cLinha,1,4)=="(POS"
				Aadd(aPos,SubStr(cLinha,6))
			OtherWise
				Aadd(aVlr,cLinha)
		EndCase
		FT_FSKIP()
	EndDo
	If nLinha <= Len(aCFG)
		Aadd(aCFG[nLinha],aPre)
		Aadd(aCFG[nLinha],aVlr)
		Aadd(aCFG[nLinha],aPos)
	EndIf
	FT_FUse()
Else
	aCFG := {{{},{},{}},{{},{},{}},{{},{},{}},{{},{},{}}}
EndIf
RestArea(aArea)
Return(aCFG)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FsExecCFGA³ Autor ³Eduardo Riera          ³ Data ³11.06.2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Execucao do AutoText da apuracao de ICMS                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array de configuracao a ser executado                ³±±
±±³          ³ExpA2: Acols da Apuracao que deve ser atualizado            ³±±
±±³          ³ExpA3: Valor a ser passado, qdo a avaliacao for um codeblock³±±
±±³          ³       (OPCIONAL)                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function FsExecCFGAp(aCFG,aCols,aCB,aAuxCDAIC)

Local aArea  := GetArea()
Local nX     := 0
Local nY     := 0
Local nP     := 0
Local nPosA  := 0
Local nTamCDA:= 0
Local lGrvCDA:= .F.
Local cLinha := ""
Local cCodigo:= ""
Local cCodInt:= ""
Local cCodST:= ""
Local cTexto := ""
Local cValor := ""
Local nValor := 0
Local cCodGia:= ""
Local cClasse:= ""
Local cExec  := ""
Local cResult:= ""
Local lUsaSped  := SuperGetMv("MV_USASPED",,.T.) .And. aApurSX2[AI_CDH]  .And. aApurSX2[AI_CDA]  .And. aApurSX2[AI_CC6]  .And. aApurSX2[AI_CDO] 
Local lP9Sped 	:= SuperGetMv("MV_P9SPED",,.F.)
Local cMV_Estado := SuperGetMv("MV_ESTADO", .T., "")
Default aAuxCDAIC := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Executa o Pre-Processamento                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 To Len(aCFG[1])
	cLinha := aCFG[1,nX]
	If !Empty(cLinha)
		cLinha := &cLinha
		If ValType(cLinha)=="B"
			Eval(cLinha,aCB)
		EndIf
	EndIf
Next nX
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Executa o Processamento                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 To Len(aCFG[2])
	cLinha := aCFG[2,nX]
	cCodigo:= SubStr(cLinha,1,3)
	If cCodigo$"ST /DE "
		nY      := At("=",cLinha)
		cCodST := SubStr(cLinha,nY-3,3)
	EndIf
   	nY := At("=",cLinha)
	cLinha := SubStr(cLinha,nY+1)

	Do Case
		Case cCodigo == "OBS"
			nY      := At(";",cLinha)
			nY      := IIf(nY==0,Len(cLinha)+1,nY)
			cResult := SubStr(cLinha,1,nY-1)
			cValor  := &cResult
			If ValType(cValor)<>"C"
				cValor := Eval(&(cResult),aCB)
			EndIf
			Aadd(aCols,cValor)
		OtherWise
	   		nY      := At(";",cLinha)
			cCodInt := SubStr(cLinha,1,nY-1)
			cLinha  := SubStr(cLinha,nY+1)

			nY      := At(";",cLinha)
			cTexto  := SubStr(cLinha,1,nY-1)
			cLinha  := SubStr(cLinha,nY+1)

			nY      := At(";",cLinha)
			cValor  := SubStr(cLinha,1,nY-1)
			nValor  := &cValor
			If ValType(nValor)<>"N"
				nValor := Eval(&(cValor),aCB)
			EndIf
			cLinha  := SubStr(cLinha,nY+1)

			nY      := At(";",cLinha)
			If nY==0
				nY      := IIf(nY==0,Len(cLinha)+1,nY)
				cCodGia := SubStr(cLinha,1,nY-1)
				cLinha  := SubStr(cLinha,nY+1)
			Else
				cCodGia := SubStr(cLinha,1,nY-1)
				cLinha  := SubStr(cLinha,nY+1)

				nY		:=	At(";",cLinha)
				nY      := IIf(nY==0,Len(cLinha)+1,nY)
				cExec	:=	SubStr(cLinha,1, nY-1)
				If !Empty(cExec) .And. ValType(&(cExec))=="L"
					If &(cExec)
						If cCodigo=="DE "
							aAdd (aExclApur, {&(cExec), cCodInt, nValor, .F., "DE"})
						ElseIf cCodigo <> "ST "
							aAdd (aExclApur, {&(cExec), cCodInt, nValor, .F., "IC"})
						Else
							aAdd (aExclApur, {&(cExec), cCodInt, nValor, .F., "ST"})
						EndIf
					EndIf
				EndIf
				cLinha  := SubStr(cLinha,nY+1)
			EndIf
			nY  := At(";",cLinha)
			If nY>0
				cClasse := SubStr(cLinha,1,nY-1)
			EndIf

			If cCodigo=="DE "
				If nValor <> 0
					If ((nY := aScan(aCols10,{|x| AllTrim(x[2])==cCodInt .And. Iif(lP9Sped,AllTrim(x[2])==AllTrim(cCodInt),AllTrim(x[3])==AllTrim(cTexto))}))==0)
						nY			:= aScan(aCols10,{|x| x[1]==Left(cCodST,3) })
						aEval(aCols10,{|x| nY += IIf(x[1]==Left(cCodST,3) .And. x[len(aCols10[nY])]==.F.,1,0)})
						aCols10		:= aSize(aCols10,Len(aCols10)+1)
						aCols10		:= aIns(aCols10,nY)
						If !lUsaSped
					   		aCols10[nY]	:= {Left(cCodST,3),PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,.F.}
						Else
							If lProcRef
								aCols10[nY]	:= {Left(cCodST,3),PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,Space(10),"",'','','','',.F.}
							Else
								aCols10[nY]	:= {Left(cCodST,3),PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,Space(10),"",.F.}
							EndIf
						EndIf
					Else
				   		aCols10[nY, 4]	:= nValor

					EndIf
				EndIf
			ElseIf cCodigo <> "ST "
					If nValor <> 0
						If ((nY := aScan(aCols,{|x| x[1]==cCodigo .And. Iif(lP9Sped,AllTrim(x[2])==AllTrim(cCodInt),AllTrim(x[3])==AllTrim(cTexto))}))==0)
							nY        := aScan(aCols,{|x| x[1]==cCodigo })
							aEval(aCols,{|x| nY += IIf(x[1]==cCodigo .And. x[len(aCols[nY])]==.F.,1,0)})
							aCols     := aSize(aCols,Len(aCols)+1)
							aCols     := aIns(aCols,nY)
							If !lUsaSped
								aCols[nY] := {cCodigo,PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,.F.}
							Else
								nTamCDA := Len(aAuxCDAIC)
								lGrvCDA := .F.
								If !(cMV_Estado == "SC" .And. ((cCodInt = "25020" .And. Alltrim(aCb[1]) $ "2406|2551|2552|2553|2554|2555|2604") .Or.;
								   (cCodInt = "25030" .And. Alltrim(aCb[1]) $ "2407|2556|2557")) .And.  nTamCDA > 0)
								  	If lProcRef
								  		aCols[nY] := {cCodigo,PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,space(10),"",'','','','',.F.}
								  	Else
										aCols[nY] := {cCodigo,PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,space(10),"",.F.}
									EndIf
									lGrvCDA := .T.
								Else

									For nP := 1 to nTamCDA

										If aAuxCDAIC[nP][1] == cCodigo .And. ((cCodInt == "25030" .And. aAuxCDAIC[nP][7] == "SC40000003") .Or.;
										   (cCodInt == "25020" .And. aAuxCDAIC[nP][7] == "SC40000002"))
										   	If lProcRef
										   		aCols[nY] := {cCodigo,PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,aAuxCDAIC[nP][7],"",'','','','',.F.}
										   	Else
												aCols[nY] := {cCodigo,PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,aAuxCDAIC[nP][7],"",.F.}
										   	EndIf
											nP := nTamCDA
											lGrvCDA := .T.
										EndIf
									Next nP
								EndIf

								If lProcRef
									IIf(!lGrvCDA,aCols[nY] := {cCodigo,PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,space(10),"",'','','','',.F.}, Nil)
								Else
									IIf(!lGrvCDA,aCols[nY] := {cCodigo,PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,space(10),"",.F.}, Nil)
								EndIf
							EndIf
						Else
							aCols[nY,4]	:= nValor
						EndIf

					EndIf
				Else
					If nValor <> 0
						If ((nY := aScan(aCols6,{|x| AllTrim(x[2])==AllTrim(cCodInt) .And. Iif(lP9Sped,AllTrim(x[2])==AllTrim(cCodInt),AllTrim(x[3])==AllTrim(cTexto))}))==0)
							nY			:= aScan(aCols6,{|x| x[1]==Left(cCodST,3) })
							aEval(aCols6,{|x| nY += IIf(x[1]==Left(cCodST,3) .And. x[len(aCols6[nY])]==.F.,1,0)})
							aCols6		:= aSize(aCols6,Len(aCols6)+1)
							aCols6		:= aIns(aCols6,nY)
							If !lUsaSped
								aCols6[nY]	:= {Left(cCodST,3),PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,.F.}
							Else
								If lProcRef
									aCols6[nY]	:= {Left(cCodST,3),PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,Space(10),"",'','','','',.F.}
								Else
									aCols6[nY]	:= {Left(cCodST,3),PadR(cCodInt,10),cTexto,nValor,cCodGia,cClasse,Space(10),"",.F.}
								EndIf
							EndIf
						Else
							aCols6[nY, 4]	:= nValor
						EndIf

					EndIf
			EndIf
	EndCase
Next nX
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Executa o Pos-Processamento                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 To Len(aCFG[3])
	cLinha := aCFG[3,nX]
	If !Empty(cLinha)
		cLinha := &cLinha
		If ValType(cLinha)=="B"
			Eval(cLinha,aCB)
		EndIf
	EndIf
Next nX
RestArea(aArea)
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FsApCiap  ³ Autor ³Eduardo Riera          ³ Data ³11.06.2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calculo da Apuracao de ICMS com os estornos do CIAP         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpA:                                                       ³±±
±±³          ³[1] Valor do Estorno CIAP para o periodo informado          ³±±
±±³          ³[2] Valor do Credito CIAP para o periodo informado          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1: Data Inicial                                         ³±±
±±³          ³ExpD2: Data Final                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FsApCiap(dDtIni,dDtFim)
Local aArea			:= GetArea()
Local cAliasSFA	:= "SFA"
Local dLei102		:= SuperGetMv("MV_DATCIAP")
Local lQuery		:= .F.
Local lCredito		:= .T.
Local nEstCiap		:= 0
Local nCredCiap		:= 0
Local nDebCiap		:= 0
Local cCampos		:= "SFA.FA_FILIAL,SFA.FA_DATA,SFA.FA_CODIGO,SFA.FA_TIPO,SFA.FA_CREDIT,SFA.FA_VALOR"
Local cMV_Estado := SuperGetMv("MV_ESTADO", .T., "")

If aApurSX3[FP_FA_VALICCO]
	cCampos	+= ",SFA.FA_VALICCO"
EndIf

If aApurSX3[FP_FA_VLDBATV]
	cCampos	+= ",SFA.FA_VLDBATV"
EndIf

cCampos := "%" + cCampos + "%"

dbSelectARea("SFA")
dbSetOrder(2)

#IFDEF TOP

    If TcSrvType()<>"AS/400"

		lQuery 		:= .T.
		cAliasSFA	:= GetNextAlias()

		BeginSql Alias cAliasSFA
			COLUMN FA_DATA AS DATE

			SELECT %Exp:cCampos%

			FROM %table:SFA% SFA

			WHERE SFA.FA_FILIAL = %xFilial:SFA% AND
				SFA.FA_DATA >= %Exp:dDtIni% AND
				SFA.FA_DATA <= %Exp:dDtFim% AND
				SFA.%NotDel%

			ORDER BY %Order:SFA%
		EndSql

		dbSelectArea(cAliasSFA)

	Else

#EndIf

	MsSeek(xFilial("SFA")+Dtos(dDtIni),.T.)

#IFDEF TOP
	EndIf
#EndIf

While ( (cAliasSFA)->(!Eof()).And. xFilial("SFA")==(cAliasSFA)->FA_FILIAL .And.(cAliasSFA)->FA_DATA<=dDtFim )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Conforme Regulamento do ICMS do Estado de Santa Catarina, ativos permanentes          ³
	//³que tiverem ingressado no estabelecimento até 31/12/2000 devem ter lançados os        ³
	//³valores de estornos na apuração do ICMS (Art. 37). Já para ativos permanentes que     ³
	//³tiverem ingressado no estabelecimento a partir de 01/01/2001, deve ser emitida Nota   ³
	//³Fiscal, modelo 1 ou 1-A, para fins de entrada, indicando o valor do crédito a ser     ³
	//³apropriado, bem como ser registrado o valor do crédito referido no inciso I na coluna ³
	//³Crédito do Imposto do livro Registro de Entradas.                                     ³
	//|A partir de 27/11/08, foi revogada a obrigatoriedade de nota fiscal de entrada para   |
    //|lançamento do crédito do ativo permanente mensalmente, dada pela alteração 1.817      |
    //|do RICMS, artigo 37, § 2º.                                                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cMV_Estado == "SC"
		If DTOS((cAliasSFA)->FA_DATA) < "20081101"
			SF9->(dbSetOrder(1))
			SF9->(dbSeek(xFilial("SF9")+(cAliasSFA)->FA_CODIGO))
			If SF9->F9_DTENTNE < dLei102
				lCredito := .T.
				If ((cAliasSFA)->FA_TIPO == "1" ) .And. ((cAliasSFA)->FA_CREDIT=="2")
					nCredCiap	+= (cAliasSFA)->FA_VALOR
				EndIf
				If ( (cAliasSFA)->FA_TIPO=="2" ) .And. (cAliasSFA)->FA_CREDIT<>"1"
					nEstCiap += (cAliasSFA)->FA_VALOR
				EndIf
			Else
				lCredito := .F.
			EndIf
		EndIf
	EndIf

	If ( (cAliasSFA)->FA_TIPO=="2" ) .And. (cAliasSFA)->FA_CREDIT<>"1"
		nEstCiap += (cAliasSFA)->FA_VALOR
	EndIf

	If ((cAliasSFA)->FA_TIPO == "1" ) .And. ((cAliasSFA)->FA_CREDIT=="1")
     	If lCredito
			nCredCiap	+= (cAliasSFA)->FA_VALOR
		EndIf
	EndIf

	If (cAliasSFA)->(FieldPos("FA_VLDBATV")) > 0 .And. GetNewPar("MV_PARICMS",.F.)
		If ((cAliasSFA)->FA_TIPO=="2") .And. (cAliasSFA)->FA_CREDIT<>"1"
			nDebCiap -= (cAliasSFA)->FA_VLDBATV
		EndIf
		If ((cAliasSFA)->FA_TIPO=="1") .And. ((cAliasSFA)->FA_CREDIT=="1")
			nDebCiap += (cAliasSFA)->FA_VLDBATV
		EndIf
	EndIf

	dbSelectArea(cAliasSFA)
	DbSkip()
EndDo
If lQuery
	dbSelectArea(cAliasSFA)
	dbCloseArea()
	dbSelectArea("SFA")
EndIf
RestArea(aArea)
Return({nEstCiap,nCredCiap,nDebCiap})

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ProcEst   ³ Autor ³Edstron E. Correia     ³ Data ³11.01.2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calcula Credito de Estimulo para Apuracao de ICMS - Manaus  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1: Data Inicial                                         ³±±
±±³          ³ExpD2: Data Final                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function ProcEst(dDataIni,dDataFim,aEstimulo,cNrLivro,aIncent)

Local aArea     :=	GetArea()
Local aStruSD1  :=	{}
Local aStruSD2  :=	{}
Local aStruSF3  :=	{}

Local cAliasSD1 :=	"SD1"
Local cIndSd1 	:=	""
Local cAliasSD2 :=	"SD2"
Local cIndSd2 	:=	""
Local cAliasSF3 :=	"SF3"
Local cIndSF3 	:=	""
Local cChave 	:=	""
Local cFiltro	:=	""
Local cCFOS		:=	SuperGetMv("MV_INCENTS",.F.,"5101/5949/6102/6949")
Local cCFOE		:=	SuperGetMv("MV_INCENTE",.F.,"1102/2102/2907")

Local lQuery    :=	.F.

Local nX        :=	0
Local nEstEntr	:=	0
Local nBaseEntr	:=	0
Local nValEntr	:=	0
Local nValContE	:=	0
Local nEstSaid	:=	0
Local nBaseSaid	:=	0
Local nValSaid	:=	0
Local nValContS	:=	0
Local nItem		:=	0
Local nRetInd	:=	0
Local nNum		:=	0
Local nRec		:=	0
Local nFTIN		:=	0
Local nFTIF		:=	0
Local nBaseIncE	:=	0
Local nBaseIncS	:=	0
Local nValIcmE	:=	0
Local nValIcmS	:=	0
Local nPercCred	:=	0
Local nBaseInc	:=	0
Local nValIcm	:=	0
Local nI		:=	0
Local nFtiFrete :=  0
Local cCampo	:=	""
Local cCampo2	:=	""
Local cCfoExt	:=	""
Local aRegra	:=  M953CRDM()
Local dDtCrdEs	:= SuperGetMv("MV_DTCRDES",.T.,cToD("//"))

#IFDEF TOP
	Local cDtCanc	:= ""
	Local cQuery	:= ""
#EndIf

Default cNrLivro := "*"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³O parametro MV_DTCRDES ira indicar a partir de que data o valor do credito estimulo estara³
//³gravado no SF3, nao sendo necessario processar item a item.                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If dDataIni <= dDtCrdEs .Or. dDtCrdEs == cToD("//")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Processa item a item, entradas e saidas³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SD1")
	SD1->(dbsetorder(1))

	#IFDEF TOP
	    If TcSrvType()<>"AS/400"

			lQuery 		:= .T.
			cAliasSD1	:= GetNextAlias()

			BeginSql Alias cAliasSD1
				COLUMN D1_DTDIGIT AS DATE
				SELECT SD1.D1_FILIAL,SD1.D1_DTDIGIT,SD1.D1_TES,SD1.D1_TOTAL,SD1.D1_VALIPI,SD1.D1_ICMSRET,SD1.D1_VALFRE,SD1.D1_DESPESA,SD1.D1_VALDESC,SD1.D1_BASEICM,SD1.D1_VALICM,SD1.D1_CF,SD1.D1_DOC,SD1.D1_SERIE,SD1.D1_FORNECE,SD1.D1_LOJA,SD1.D1_COD,
					   SFT.FT_ITEM,SFT.FT_BASEICM,SFT.FT_VALICM,SFT.FT_BASEIPI,SFT.FT_VALIPI,SFT.FT_VALCONT,SFT.FT_CFOEXT
				FROM %table:SD1% SD1
				Inner JOIN %Table:SFT% SFT on SFT.FT_CLIEFOR = SD1.D1_FORNECE and SFT.FT_NFISCAL = SD1.D1_DOC and SFT.FT_LOJA = SD1.D1_LOJA and SFT.FT_SERIE = SD1.D1_SERIE and SFT.FT_ITEM = SD1.D1_ITEM and SFT.FT_PRODUTO = SD1.D1_COD and SFT.FT_FILIAL = %xFilial:SFT% AND SFT.%NotDel%
				WHERE SD1.D1_FILIAL = %xFilial:SD1% AND
					SD1.D1_DTDIGIT >= %Exp:dDataIni% AND
					SD1.D1_DTDIGIT <= %Exp:dDataFim% AND
					SD1.%NotDel% 

				ORDER BY %Order:SD1%
			EndSql

			dbSelectArea(cAliasSD1)
		Else
	#EndIf
			cIndSd1	:=	CriaTrab (NIL, .F.)
			cChave	:=	IndexKey()
			cFiltro	:=	"D1_FILIAL=='"+xFilial("SD1")+"'"
			cFiltro	+=	" .And. DTOS(SD1->D1_DTDIGIT)>='"+DTOS(dDataIni)+"' .And. DTOS(SD1->D1_DTDIGIT)<='"+DTOS(dDataFim)+"' "
			IndRegua (cAliasSd1, cIndSd1, cChave,, cFiltro)
			nRetInd := RetIndex (cAliasSd1)
			DbSetIndex (cIndSd1+OrdBagExt ())
			DbSetOrder (nRetInd+1)
			nRec := LastRec()
			ProcRegua(nRec)
			DbGoTop ()
	#IFDEF TOP
		EndIf
	#EndIf

   	nBaseIncE	:=	0.00
	nValIcmE	:=	0.00

	While !(cAliasSd1)->(Eof())
		  IncProc(STR0119) //"Processamento Credito Estimulo - Entradas"
	      If SB1->(DbSeek(xFilial("SB1")+(cAliasSD1)->D1_COD))
	         SB5->(DbSeek(xFilial("SB5")+(cAliasSD1)->D1_COD))
		     If !(xFilial ("SD1")+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA==xFilial ("SF1")+SF1->F1_DOC+SF1->F1_SERIE+SF1->F1_FORNECE+SF1->F1_LOJA)
			    nItem := 1
			    SF1->(DbSetOrder (1))
		  	    SF1->(DbSeek (xFilial ("SF1")+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA))
			    //MaFisEnd ()
			   	//MaFisIniNf (1, 0,, "SF1", .F.)
			   	SB1->(DbSeek(xFilial("SB1")+(cAliasSD1)->D1_COD))
		     Else
	  	        If nItem=0
				   SF1->(DbSetOrder (1))
			  	   SF1->(DbSeek (xFilial ("SF1")+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA))
				   //MaFisEnd ()
				   //MaFisIniNf (1, 0,, "SF1", .F.)
				   SB1->(DbSeek(xFilial("SB1")+(cAliasSD1)->D1_COD))
	  	        EndIf
	  	        nItem++
		     EndIf
			 nBaseEntr	:=	(cAliasSD1)->FT_BASEICM//MaFisRet (nItem, "LF_BASEICM")
			 nValContE	:=	(cAliasSD1)->FT_VALCONT//MaFisRet (nItem, "LF_VALCONT")
			 cCfoExt	:=	(cAliasSD1)->FT_CFOEXT//MaFisRet (nItem, "LF_CFOEXT")
			 nFTIN		:=	IIF(AllTrim((cAliasSD1)->D1_CF)=="2101",(nValContE*(SB5->B5_FTIN/100)),0)
             If !Empty(SB1->B1_CRDEST) .Or. !Empty(SB5->B5_PROPOR1)
                If !Empty(SB5->B5_PROPOR1)
                   For nI	:=1 TO 2
                       cCampo	:="B5_PROPOR"+AllTrim(Str(nI))
                       cCampo2	:="B5_CRDEST"+AllTrim(Str(nI))
				       nValEntr	:=	(cAliasSD1)->FT_VALICM * &("SB5->"+cCampo)/100 //MaFisRet (nItem, "LF_VALICM") * &("SB5->"+cCampo)/100
		               nEstEntr	:=	nValEntr * &("SB5->"+cCampo2)/100
				       nNum	:=Ascan(aEstimulo,{|x|x[1]==&("SB5->"+cCampo2)})
	        	       If nNum==0
		                  Aadd(aEstimulo,{&("SB5->"+cCampo2),nEstEntr,0,nBaseEntr,nValEntr,0,0,nFTIN,0})
		               Else
	    	              aEstimulo[nNum,02] +=nEstEntr
	        	          aEstimulo[nNum,04] +=nBaseEntr
	            	      aEstimulo[nNum,05] +=nValEntr
		                  aEstimulo[nNum,08] +=nFTIN
	        	       EndIf
                   Next
                Else
			       nValEntr	:=	(cAliasSD1)->FT_VALICM //MaFisRet (nItem, "LF_VALICM")
	               nEstEntr	:=	(cAliasSD1)->FT_VALICM * SB1->B1_CRDEST / 100 //MaFisRet (nItem, "LF_VALICM") * SB1->B1_CRDEST / 100
			       nNum	:=Ascan(aEstimulo,{|x|x[1]==SB1->B1_CRDEST})
	               If nNum==0
	                  Aadd(aEstimulo,{SB1->B1_CRDEST,nEstEntr,0,nBaseEntr,nValEntr,0,0,nFTIN,0,nBaseIncE,nValIcmE,0,0})
	               Else
	                  aEstimulo[nNum,02] +=nEstEntr
	                  aEstimulo[nNum,04] +=nBaseEntr
	                  aEstimulo[nNum,05] +=nValEntr
	                  aEstimulo[nNum,08] +=nFTIN
	               EndIf
		        EndIf
		     Else
				If !Empty(cCfoExt)
					nNum	:=Ascan(aIncent,{|x|x[1]=="INC"})
	       	        If nNum==0
			           Aadd(aIncent,{"INC",(cAliasSD1)->FT_BASEICM,(cAliasSD1)->FT_VALICM ,0,0})
			        Else
		    	       aIncent[nNum,02] +=(cAliasSD1)->FT_BASEICM //MaFisRet(nItem,"LF_BASEICM")
		        	   aIncent[nNum,03] +=(cAliasSD1)->FT_VALICM //MaFisRet(nItem,"LF_VALICM")
	                EndIf
				EndIf
		     EndIf
		  EndIf
	      (cAliasSD1)->(dbskip())
	EndDo
	#IFDEF TOP
		dbSelectArea(cAliasSD1)
		dbCloseArea()
	#ELSE
		dbSelectArea(cAliasSD1)
		RetIndex (cAliasSd1)
		FErase (cIndSd1+OrdBagExt ())
	#EndIf

	dbSelectArea("SD2")
	SD2->(DbSetOrder(3))

	#IFDEF TOP
	    If TcSrvType()<>"AS/400"

			lQuery 		:= .T.
			cAliasSD2	:= GetNextAlias()

			BeginSql Alias cAliasSD2
				COLUMN D2_EMISSAO AS DATE
				SELECT SD2.D2_FILIAL,SD2.D2_EMISSAO,SD2.D2_TES,SD2.D2_TOTAL,SD2.D2_VALIPI,SD2.D2_ICMSRET,SD2.D2_VALFRE,SD2.D2_DESPESA,SD2.D2_BASEICM,SD2.D2_VALICM,SD2.D2_CF,SD2.D2_DOC,SD2.D2_SERIE,SD2.D2_CLIENTE,SD2.D2_LOJA,SD2.D2_COD,
				       SFT.FT_ITEM,SFT.FT_BASEICM,SFT.FT_VALICM,SFT.FT_BASEIPI,SFT.FT_VALIPI,SFT.FT_VALCONT,SFT.FT_CFOEXT
			
				FROM %table:SD2% SD2
				Inner JOIN %Table:SFT% SFT on SFT.FT_CLIEFOR = SD2.D2_CLIENTE and SFT.FT_NFISCAL = SD2.D2_DOC and SFT.FT_LOJA = SD2.D2_LOJA and SFT.FT_SERIE = SD2.D2_SERIE and SFT.FT_ITEM = SD2.D2_ITEM and SFT.FT_PRODUTO = SD2.D2_COD and SFT.FT_FILIAL = %xFilial:SFT% AND SFT.%NotDel%
				
				WHERE SD2.D2_FILIAL = %xFilial:SD2% AND
					SD2.D2_EMISSAO >= %Exp:dDataIni% AND
					SD2.D2_EMISSAO <= %Exp:dDataFim% AND
					SD2.%NotDel% 

				ORDER BY %Order:SD2%
			EndSql

			dbSelectArea(cAliasSD2)

		Else
	#EndIf
			cIndSd2	:=	CriaTrab (NIL, .F.)
			cChave	:=	IndexKey()
			cFiltro	:=	"D2_FILIAL=='"+xFilial("SD2")+"'"
			cFiltro	+=	" .And. DTOS(SD2->D2_EMISSAO)>='"+DTOS(dDataIni)+"' .And. DTOS(SD2->D2_EMISSAO)<='"+DTOS(dDataFim)+"' "
			IndRegua (cAliasSd2, cIndSd2, cChave,, cFiltro)
			nRetInd := RetIndex (cAliasSd2)
			DbSetIndex (cIndSd2+OrdBagExt ())
			DbSetOrder (nRetInd+1)
			nRec := LastRec()
			ProcRegua(nRec)
			DbGoTop ()
	#IFDEF TOP
		EndIf
	#EndIf

	nItem := 0
    nBaseIncS	:=	0.00
    nValIcmS	:=	0.00
	While !(cAliasSD2)->(Eof ())
		  IncProc(STR0120) //"Processamento Credito Estimulo - Saidas"
	      If SB1->(DbSeek(xFilial("SB1")+(cAliasSD2)->D2_COD))
	         SB5->(DbSeek(xFilial("SB5")+(cAliasSD2)->D2_COD))
		     If !(xFilial ("SD2")+(cAliasSD2)->D2_DOC+(cAliasSD2)->D2_SERIE+(cAliasSD2)->D2_CLIENTE+(cAliasSD2)->D2_LOJA==xFilial ("SF2")+SF2->F2_DOC+SF2->F2_SERIE+SF2->F2_CLIENTE+SF2->F2_LOJA)
			    nItem := 1
	       	    SF2->(DbSetOrder (1))
	            SF2->(DbSeek (xFilial ("SF2")+(cAliasSD2)->D2_DOC+(cAliasSD2)->D2_SERIE+(cAliasSD2)->D2_CLIENTE+(cAliasSD2)->D2_LOJA))
			    //MaFisEnd ()
			   	//MaFisIniNf (2, 0,, "SF2", .F.)
			   	SB1->(DbSeek(xFilial("SB1")+(cAliasSD2)->D2_COD))
		     Else
                If nItem=0
	       	       SF2->(DbSetOrder (1))
	               SF2->(DbSeek (xFilial ("SF2")+(cAliasSD2)->D2_DOC+(cAliasSD2)->D2_SERIE+(cAliasSD2)->D2_CLIENTE+(cAliasSD2)->D2_LOJA))
			       //MaFisEnd ()
			     //  MaFisIniNf (2, 0,, "SF2", .F.)
			       SB1->(DbSeek(xFilial("SB1")+(cAliasSD2)->D2_COD))
			    EndIf
	  	        nItem++
		     EndIf
			 nBaseSaid	:=	(cAliasSD2)->FT_BASEICM//MaFisRet (nItem, "LF_BASEICM")
			 nValContS	:=	(cAliasSD2)->FT_VALCONT//MaFisRet (nItem, "LF_VALCONT")
			 cCfoExt	:=	(cAliasSD2)->FT_CFOEXT //MaFisRet (nItem, "LF_CFOEXT")
			 nFTIF		:=	IIF(SUBS(ALLTRIM((cAliasSD2)->D2_CF),1,1)>="5",(nValContS*(SB5->B5_FTIF/100)),0)
             If ( !Empty(SB1->B1_CRDEST) .Or. !Empty(SB5->B5_PROPOR1) ) .And. Iif(aApurSX3[FP_F4_CRDEST] ,SF4->F4_CRDEST != "4",.T.)
                If !Empty(SB5->B5_PROPOR1)
                   For nI	:=1 TO 2
                       cCampo	:="B5_PROPOR"+AllTrim(Str(nI))
                       cCampo2	:="B5_CRDEST"+AllTrim(Str(nI))
				       nValSaid	:=	MaFisRet (nItem, "LF_VALICM") * &("SB5->"+cCampo)/100
		               nEstSaid	:=	nValSaid * &("SB5->"+cCampo2)/100
				       nNum	:=Ascan(aEstimulo,{|x|x[1]==&("SB5->"+cCampo2)})
	        	       If nNum==0
	                      Aadd(aEstimulo,{&("SB5->"+cCampo2),0,nEstSaid,0,0,nBaseSaid,nValSaid,0,nFTIF,0,0,nBaseIncS,nValICMS})
		               Else
		                  aEstimulo[nNum,03] +=nEstSaid
		                  aEstimulo[nNum,06] +=nBaseSaid
	    	              aEstimulo[nNum,07] +=nValSaid
	        	          aEstimulo[nNum,09] +=nFTIF
	        	       EndIf
                   Next
			    Else
				   nValSaid	:=	(cAliasSD2)->FT_VALICM //MaFisRet (nItem, "LF_VALICM")
		           nEstSaid	:=	(cAliasSD2)->FT_VALICM  * SB1->B1_CRDEST/100  //MaFisRet (nItem, "LF_VALICM") 
			       nNum	:=Ascan(aEstimulo,{|x|x[1]==SB1->B1_CRDEST})
	               If nNum==0
	                  Aadd(aEstimulo,{SB1->B1_CRDEST,0,nEstSaid,0,0,nBaseSaid,nValSaid,0,nFTIF,0,0,nBaseIncS,nValICMS})
	               Else
	                  aEstimulo[nNum,03] +=nEstSaid
	                  aEstimulo[nNum,06] +=nBaseSaid
	                  aEstimulo[nNum,07] +=nValSaid
	                  aEstimulo[nNum,09] +=nFTIF
		           EndIf
		        EndIf
  		     Else
  	    		//Caio
  		     	dbSelectArea("SA1")
	     	    SA1->( DbSetOrder(1) )
		     	SA1->( DbSeek( xFilial("SA1")+(cAliasSD2)->D2_CLIENTE+(cAliasSD2)->D2_LOJA ) )

		     	dbSelectArea("SF4")
	     	    SF4->( DbSetOrder(1) )
		     	SF4->( DbSeek( xFilial("SF4")+(cAliasSD2)->D2_TES) )


		     	If  aApurSX3[FP_F4_CRDEST] .And. aApurSX3[FP_A1_CRDMA] .And. SF4->F4_CRDEST == "4"  .And. Len(aRegra)>0 .And. ;
		     	     ( (nX := AScanX(aRegra, {|x| x[1]== Alltrim(SB1->B1_POSIPI) .And. x[2]== SA1->A1_CRDMA } )) > 0 .Or. ;
		     	       (nX := AScanx(aRegra, {|x| x[1]== Alltrim(SB1->B1_POSIPI) .And. x[2]=="4" } )) > 0 )

		     	    nValSaid	:= (cAliasSD2)->FT_VALICM // MaFisRet (nItem, "LF_VALICM")
		           	nEstSaid	:= (cAliasSD2)->FT_VALICM  * aRegra[nX,3]/100 //MaFisRet (nItem, "LF_VALICM") * aRegra[nX,3]/100
		     	    nNum		:= Ascan(aEstimulo,{|x|x[1]==aRegra[nX,3]})

		            If nNum==0
	                  Aadd(aEstimulo,{aRegra[nX,3],0,nEstSaid,0,0,nBaseSaid,nValSaid,0,nFTIF,0,0,nBaseIncS,nValICMS})
	                Else
	                  aEstimulo[nNum,03] +=nEstSaid
	                  aEstimulo[nNum,06] +=nBaseSaid
	                  aEstimulo[nNum,07] +=nValSaid
	                  aEstimulo[nNum,09] +=nFTIF
		           EndIf
		     	Else
					If !Empty(cCfoExt)
				       nNum	:=Ascan(aIncent,{|x|x[1]=="INC"})
	       	           If nNum==0
			              Aadd(aIncent,{"INC",0,0,(cAliasSD2)->FT_BASEICM,(cAliasSD2)->FT_VALICM})
			           Else
		    	          aIncent[nNum,04] +=(cAliasSD2)->FT_BASEICM //MaFisRet(nItem,"LF_BASEICM")
		        	      aIncent[nNum,05] +=(cAliasSD2)->FT_VALICM //MaFisRet(nItem,"LF_VALICM")
	                   EndIf
					EndIf
				EndIf
			 EndIf
		  EndIf
	      (cAliasSD2)->(dbskip())
	EndDo

	#IFDEF TOP
		dbSelectArea(cAliasSD2)
		dbCloseArea()
	#ELSE
		dbSelectArea(cAliasSD2)
		RetIndex (cAliasSd2)
		Ferase (cIndSd2+OrdBagExt ())
	#EndIf
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica o valor gravado diretamente no SF3      ³
	//|Apenas se existir o campo especifico (F3_CRDEST) |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SF3")
	SF3->(dbsetorder(1))

	#IFDEF TOP
	    If TcSrvType()<>"AS/400"

			lQuery 		:= .T.
			cAliasSF3	:= GetNextAlias()

			If cNrLivro <> "*"
				cQuery := "% F3_NRLIVRO = " + ValToSQL(cNrLivro) + " AND %"
			Else
				cQuery := "% %"
			EndIf

			cDtCanc := Space(TamSx3("F3_DTCANC")[01])

			BeginSql Alias cAliasSF3
				COLUMN F3_ENTRADA AS DATE
				SELECT SF3.F3_VALCONT,SF3.F3_BASEICM,SF3.F3_VALICM,SF3.F3_CRDEST,SF3.F3_CFO

				FROM %table:SF3% SF3

				WHERE SF3.F3_FILIAL = %xFilial:SF3% AND
					SF3.F3_ENTRADA >= %Exp:dDataIni% AND
					SF3.F3_ENTRADA <= %Exp:dDataFim% AND
					SF3.F3_DTCANC = %Exp:cDtCanc% AND
					%Exp:cQuery%
					SF3.%NotDel%

				ORDER BY %Order:SF3%
			EndSql

			dbSelectArea(cAliasSF3)

		Else
	#EndIf
			cIndSF3	:=	CriaTrab(NIL,.F.)
			cChave	:=	IndexKey()
			cFiltro	:=	"SF3->F3_FILIAL == '" + xFilial("SF3") + "' .And. DTOS(SF3->F3_ENTRADA) >= '" + Dtos(dDataIni) + "' .And. DTOS(SF3->F3_ENTRADA) <= '" + Dtos(dDataFim) + "'"
			cFiltro	+=  " .And. DTOS(SF3->F3_DTCANC) == '" + Dtos(Ctod("")) + "'"
			If cNrLivro <> "*"
				cFiltro	+= " .And. SF3->F3_NRLIVRO == '" + cNrLivro + "'"
			EndIf
			IndRegua(cAliasSF3,cIndSF3,cChave,,cFiltro)
			(cAliasSF3)->(DbgoTop())
	#IFDEF TOP
		EndIf
	#EndIf

	While !(cAliasSF3)->(Eof())

		IncProc(STR0121)              //"Processamento Credito Estimulo - Entradas e Saidas"


		nBaseInc	:= 0
		nValIcm		:= 0

		nPercCred	:= (cAliasSF3)->F3_CRDEST * 100 / (cAliasSF3)->F3_VALICM
		nNum		:= Ascan(aEstimulo,{|x|x[1]==nPercCred})

		If SubStr((cAliasSF3)->F3_CFO,1,1) $ "567"
			If nNum == 0
				Aadd(aEstimulo,{nPercCred,0,(cAliasSF3)->F3_CRDEST,0,0,(cAliasSF3)->F3_BASEICM,(cAliasSF3)->F3_VALICM,0,0,0,0,nBaseInc,nValICM})
			Else
				aEstimulo[nNum,03] += (cAliasSF3)->F3_CRDEST
			    aEstimulo[nNum,06] += (cAliasSF3)->F3_BASEICM
			    aEstimulo[nNum,07] += (cAliasSF3)->F3_VALICM
		    	aEstimulo[nNum,09] += 0
			    aEstimulo[nNum,12] += nBaseInc
		    	aEstimulo[nNum,13] += nValIcm
			EndIf
		Else
			If nNum == 0
				Aadd(aEstimulo,{nPercCred,(cAliasSF3)->F3_CRDEST,0,(cAliasSF3)->F3_BASEICM,(cAliasSF3)->F3_VALICM,0,0,0,0,nBaseInc,nValICM,0,0})
			Else
				aEstimulo[nNum,02] += (cAliasSF3)->F3_CRDEST
			    aEstimulo[nNum,04] += (cAliasSF3)->F3_BASEICM
			    aEstimulo[nNum,05] += (cAliasSF3)->F3_VALICM
		    	aEstimulo[nNum,08] += 0
			    aEstimulo[nNum,10] += nBaseInc
		    	aEstimulo[nNum,11] += nValIcm
			EndIf
		EndIf
        (cAliasSF3)->(dbSkip())
	EndDo

	#IFDEF TOP
		dbSelectArea(cAliasSF3)
		dbCloseArea()
	#ELSE
		dbSelectArea(cAliasSF3)
		RetIndex(cAliasSF3)
		FErase(cIndSF3+OrdBagExt())
	#EndIf

EndIf

Return(.t.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MyEditCelST   ³ Autor ³  Microsiga            ³ Data ³12.11.2007³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Controla a edicao dos campos da oGetDad5                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function MyEditCel(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)
Local bSave := oGloBrowse:Cargo

If !(aCols[oGloBrowse:nAt,1]$"002#003#006#007#012#011" .And. (Alltrim(aCols[oGloBrowse:nAt,2])=="002.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="003.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="006.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="007.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="012.00"))
	If lProcRef
		If	AT("OGETDAD5", GetCbSource(oGloBrowse:bDrawSelect)) > 0 .or.	;
			AT("OGETDAD10",GetCbSource(oGloBrowse:bDrawSelect)) > 0 .or.	;
			AT("OGETDAD13",GetCbSource(oGloBrowse:bDrawSelect)) > 0
			If ASCAN(oGloBrowse:aAlter,'cProcesso') == 0
				AADD(oGloBrowse:aAlter,'cProcesso')
			EndIf
			If ASCAN(oGloBrowse:aAlter,'cTipoProc') == 0
				AADD(oGloBrowse:aAlter,'cTipoProc')
			EndIf
			If ASCAN(oGloBrowse:aAlter,'cAutAcaJd') == 0
				AADD(oGloBrowse:aAlter,'cAutAcaJd')
			EndIf
			If ASCAN(oGloBrowse:aAlter,'cItemProc') == 0
				AADD(oGloBrowse:aAlter,'cItemProc')
			EndIf
		EndIf
	EndIf
	oGloBrowse:Cargo := ""
	lEditCol( nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB )
EndIf

oGloBrowse:Cargo := bSave
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MyEditCelST   ³ Autor ³  Microsiga            ³ Data ³12.11.2007³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Controla a edicao dos campos da oGetDad6                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function MyEditCelST(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)
Local bSave := oGloBrowse:Cargo

If !(aCols[oGloBrowse:nAt,1]$"002#003#007#008#014" .And. (Alltrim(aCols[oGloBrowse:nAt,2])=="002.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="003.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="007.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="008.00" .Or. Alltrim(aCols[oGloBrowse:nAt,2])=="014.00"))
	If lProcRef
		If	AT("OGETDAD6", GetCbSource(oGloBrowse:bDrawSelect)) > 0
			If ASCAN(oGloBrowse:aAlter,'cProcesso') == 0
				AADD(oGloBrowse:aAlter,'cProcesso')
			EndIf
			If ASCAN(oGloBrowse:aAlter,'cTipoProc') == 0
				AADD(oGloBrowse:aAlter,'cTipoProc')
			EndIf
			If ASCAN(oGloBrowse:aAlter,'cAutAcaJd') == 0
				AADD(oGloBrowse:aAlter,'cAutAcaJd')
			EndIf
			If ASCAN(oGloBrowse:aAlter,'cItemProc') == 0
				AADD(oGloBrowse:aAlter,'cItemProc')
			EndIf
		EndIf
	EndIf
	oGloBrowse:Cargo := ""
	lEditCol( nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB )
EndIf

oGloBrowse:Cargo := bSave
Return

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³FisApurCDH ³ Autor ³ Liber De Esteban       ³ Data ³ 18-12-07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Grava apuracao no CDH                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAFIS                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL.                     	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ PROGRAMADOR  ³ DATA   ³ BOPS ³  MOTIVO DA ALTERACAO                   	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Murilo Alves ³21/07/08³149814³ Correcao na insercao das observacoes no  ³±±
±±³              ³        ³      ³ CDH quando usar o parametro MV_USASPED.  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function FisApurCDH(nApuracao,nPeriodo,cNrLivro,dDtIni,dDtFim,lConsUF,cFilDe,cFilAte,aLancIC,aLancST,aTitCDH,aGNRE,lApurBA,lACredAcu)
Local cChave	:= STR(nApuracao,1)+STR(nPeriodo,1)+DTOS(dDtIni)+cNrLivro
Local cSequen	:= "001"
Local cMvEst	:= SuperGetMv('MV_ESTADO')
Local nI 		:= 0
Local nCntTit   := 1
Local nCntObs	:= 1
Local nCntIC	:= 0
Local nCntST	:= 0
Local nCntGnr	:= 0
Local cTipo 	:= "TX"+Space(TamSx3("E2_TIPO")[1]-2)
Local cPrefixo	:= SuperGetMV("MV_PFAPUIC",,"ICM")
Local cTipoIP	:= ""
Local nPGNR  	:= 0
Local cDesc		:=	""
Local lTpLanc 	:= aApurSX3[FP_CDH_TPLANC]
Local aInfoFluig := {}
Local lCompTit := .F.
Local cMV_Estado := SuperGetMv("MV_ESTADO", .T., "")

dbSelectArea("CDH")
dbSetOrder(01)
If dbSeek(xFilial("CDH")+"IC"+cChave)
	//dbSeek(xFilial("CDH")+"IC"+cChave+"999",.T.) // Posiciona na ultima sequencia
	//cSequen	 := Soma1(CDH->CDH_SEQUEN)
	While !EOF() .And. CDH->CDH_FILIAL+CDH->CDH_TIPOIP+CDH->CDH_TIPOPR+CDH->CDH_PERIOD+DTOS(CDH->CDH_DTINI)+CDH->CDH_LIVRO == xFilial("CDH")+"IC"+cChave
		cSequen	 := CDH->CDH_SEQUEN
		dbSkip()
	EndDo
	cSequen	 := Soma1(cSequen)
EndIf

For nI:=1 to Len(aLancIC)

	If aLancIC[nI,Len(aLancIC[nI])] .Or. Empty(aLancIC[nI,1]) .Or. aLancIC[nI,1] == "GNR" .Or. aLancIC[nI,1] == "FOM" .Or. (len(aTitCDH) > 0 .And. aLancIC[nI,1] == "TIT") .Or.;
		(lApurBA .And. (aLancIC[nI,1]=="EXP" .Or. aLancIC[nI,1]=="OUT")) .Or. (lACredAcu .And. aLancIC[nI,1]=="CAC") //#TODO Grava apuracao no CDH //Mexi no lApurba OR And
		Loop
	EndIf

	//Indica se existiu complemento do titulo na CDH
	lCompTit := .F.
	RecLock("CDH",.T.)
	CDH->CDH_FILIAL	:=	xFilial("CDH")
	CDH->CDH_TIPOIP	:=	"IC"
	CDH->CDH_TIPOPR	:=	STR(nApuracao,1)
	CDH->CDH_PERIOD	:=	STR(nPeriodo,1)
	CDH->CDH_LIVRO	:=	cNrLivro
	CDH->CDH_SEQUEN	:=	cSequen
	CDH->CDH_DTINI	:=	dDtIni
	CDH->CDH_DTFIM	:=	dDtFim
	CDH->CDH_CONSO	:=	Iif(lConsUF,1,2)
	CDH->CDH_FILDE	:=	cFilDe
	CDH->CDH_FILATE	:=	cFilAte
	If aLancIC[nI,1]=="TIT" // Titulos
		//Quando o cliente nao utiliza a integracao gravo os dados do titulo
		If !lGTitFluig
			CDH->CDH_PRETIT	:=	cPrefixo
			CDH->CDH_NUMTIT	:=	aTitCDH[nI][2]
			CDH->CDH_PARTIT	:=	""
			CDH->CDH_TPTIT	:=	cTipo
			CDH->CDH_VALOR	:=	Iif(Valtype(aLancIC[nI][4]) == "N",aLancIC[nI][4],0)
			CDH->CDH_LINHA	:=	"TIT"
			CDH->CDH_SUBITE	:=	"TIT."+STRZERO(nCntTit,3)
			nCntTit++

		//Quando o cliente nao utiliza a integracao alimento a tabela espelho para
		//posterior geracao da CDH
		Else

			//Caso tenha ocorrido erro ao iniciar a tarefa
			//o retorno sera 0 e o array abaixo nao devera ser alimentado
			If aTitCDH[nI][9] > 0
				aInfoFluig := {}
			    Aadd( aInfoFluig,{;
									0,;
									cPrefixo,;
									aTitCDH[nI][2],;
									cTipo,;
									Iif(Valtype(aLancIC[nI][4]) == "N",aLancIC[nI][4],0),;
									"TIT",;
									"TIT."+STRZERO(nCntTit,3) } )

				lCompTit := .T.
				nCntTit++
			EndIf

		EndIf
	ElseIf aLancIC[nI,1]=="OBS" // Observacoes
		CDH->CDH_LINHA	:=	"OBS"
		CDH->CDH_SUBITE	:=	"OBS."+strZero(nCntObs,3)
		CDH->CDH_DESC	:=	aLancIC[nI][3]
		nCntObs++
	ElseIf aLancIC[nI,1]=="IND"
		CDH->CDH_LINHA	:=	"IND"
		CDH->CDH_SUBITE	:=	"IND"
		CDH->CDH_DESC	:=	STR0122 //"Indice de Conversão"
		CDH->CDH_VALOR	:=	Val(aLancIC[nI][3])
	Else // Lancamentos Apuracao ICMS
		CDH->CDH_LINHA	:=	aLancIC[nI][1]
		CDH->CDH_SUBITE	:=	Alltrim(aLancIC[nI][2])
		CDH->CDH_DESC	:=	aLancIC[nI][3]
		CDH->CDH_VALOR	:=	Iif(Valtype(aLancIC[nI][4]) == "N",aLancIC[nI][4],0)
		CDH->CDH_GNRE	:=	aLancIC[nI][5]
		CDH->CDH_CLVENC	:=	aLancIC[nI][6]
		CDH->CDH_CODLAN	:=	aLancIC[nI][7]

		If Len(aLancIC[nI]) > 8 // Maior que 8 significa que existe controle de lancto manual
			If lTpLanc

				If  SubStr(aLancIC[nI][8],1,2) == 'AI' // Ajuste automático individualizado
					CDH->CDH_TPLANC	:= 'AI' +  alltrim(SubStr(aLancIC[nI][8],500))
				Else
					CDH->CDH_TPLANC	:= alltrim(aLancIC[nI][8])
				EndIf

			EndIf

			If lProcRef
				CDH->CDH_PROCES	:=	aLancIC[nI][9]
				CDH->CDH_ITPROC	:=	aLancIC[nI][12]
				CDH->CDH_PROCTP	:=	aLancIC[nI][10]
				CDH->CDH_PROIND	:=	aLancIC[nI][11]
			EndIf
		EndIf
		If (nPGNR:=aScan(aGnre,{|aX| AllTrim(aX[1])==AllTrim(aLancIC[nI][5]) .And. AllTrim(aX[4])==AllTrim(aLancIC[nI][6])}))>0
			CDH->CDH_ESTGNR	:=	aGnre[nPGNR][5]
		ElseIf !Empty(aLancIC[nI][6]) .And. !Empty(aLancIC[nI][7]) .And.;
				Substr(aLancIC[nI][7],1,2) == cMV_Estado
				CDH->CDH_ESTGNR	:=	cMV_Estado
		Else
			If !Empty(aLancIC[nI][5]) .And. !Empty(aLancIC[nI][7]) .And.;
				Substr(aLancIC[nI][7],1,2) == cMV_Estado
				CDH->CDH_ESTGNR	:=	cMV_Estado
			EndIf
		EndIf
	EndIf

	MsUnlock()
	CDH->(FKCommit())

	//Caso tenha sido gerado o complemento do titulo na tabela CDH eu incluo o
	//Recno da CDH gerada na posicao 1 do Array
	If lCompTit

		aInfoFluig[1][1] := CDH->( Recno() )

		//Funcao para geracao da tabela espelho da CDH ( CH4 )
		FGvFluigWF( "APUR", "1", aTitCDH[nI][9], aInfoFluig )
	EndIf
Next

If Len(aTitCDH) > 0
	For nI := 1 to len(aTitCDH) // Titulos gerados pela apuracao

		//Caso o cliente utilize a integracao com o Fluig nao
		//gero a CDH neste momento, apenas apos a aprovacao da
		//solicitacao no Fluig
		If !lGTitFluig
			RecLock("CDH",.T.)
				CDH->CDH_FILIAL	:=	xFilial("CDH")
				CDH->CDH_TIPOIP	:=	aTitCDH[nI][7]
				CDH->CDH_TIPOPR	:=	STR(nApuracao,1)
				CDH->CDH_PERIOD	:=	STR(nPeriodo,1)
				CDH->CDH_LIVRO	:=	cNrLivro
				CDH->CDH_SEQUEN	:=	cSequen
				CDH->CDH_DTINI	:=	dDtIni
				CDH->CDH_DTFIM	:=	dDtFim
				CDH->CDH_CONSO	:=	Iif(lConsUF,1,2)
				CDH->CDH_FILDE	:=	cFilDe
				CDH->CDH_FILATE	:=	cFilAte
				CDH->CDH_DESC    :=	aTitCDH[nI][8]
				CDH->CDH_PRETIT	:=	aTitCDH[nI][1]
				CDH->CDH_NUMTIT	:=	aTitCDH[nI][2]
				CDH->CDH_PARTIT	:=	aTitCDH[nI][3]
				CDH->CDH_TPTIT	:=	aTitCDH[nI][4]
				CDH->CDH_FORTIT	:=	aTitCDH[nI][5]
				CDH->CDH_LOJTIT	:=	aTitCDH[nI][6]
				CDH->CDH_LINHA	:=	"TIT"
				CDH->CDH_SUBITE	:=	"TIT."+STRZERO(nCntTit,3)
				nCntTit++
			MsUnlock()
			CDH->(FKCommit())

		Else

			//Caso tenha ocorrido erro ao iniciar a tarefa
			//o retorno sera 0 e o array abaixo nao devera ser alimentado
			If aTitCDH[nI][9] > 0
				aInfoFluig := {}
			    Aadd( aInfoFluig,{ aTitCDH[nI][7],;
			    					  STR(nApuracao,1),;
			    					  STR(nPeriodo,1),;
			    					  cNrLivro,;
			    					  cSequen,;
			    					  dDtIni,;
			    					  dDtFim,;
			    					  Iif(lConsUF,1,2),;
			    					  cFilDe,;
			    					  cFilAte,;
			    					  "TIT",;
			    					  "TIT."+STRZERO(nCntTit,3),;
			    					  aTitCDH[nI][8] } )
				nCntTit++

				//Funcao para geracao da tabela espelho da CDH ( CH4 )
				FGvFluigWF( "APUR", "2", aTitCDH[nI][9], aInfoFluig )
			EndIf
		EndIf
	Next

EndIf

nCntGnr := 0
nCntIC	:= 0
nCntST	:= 0
cDesc	:=	""

For nI := 1 to len(aGnre) // GNRE's geradas pela apuracao
	cTipoIP	:= Iif ( len(aGnre[nI])<6 .Or. Empty(aGnre[nI][6]),Iif(aGnre[nI][5] <> cMvEst,"ST","IC"),aGnre[nI][6])

	cDesc	:=	STR0123
	cDesc	+=	Iif(cTipoIP=="IC"," ICMS"," ICMS - ST")
	cDesc	+=	Iif(AllTrim(aGnre[nI,7])=="RICDIF"," Complementar","")
	cDesc	+=	Iif(AllTrim(aGnre[nI,7])=="RDBESP"," Débitos Especiais","")
	cDesc	+=	Iif(AllTrim(aGnre[nI,7])=="RDBESPST"," Débitos Especiais ST","")
	cDesc	+=	Iif(AllTrim(aGnre[nI,7])=="CONV139"," Convênio 139/06","")

	RecLock("CDH",.T.)
	If aApurSX3[FP_CDH_GNREF3] .And. Len(aGnre[nI])>6
		CDH_GNREF3	:=	aGnre[nI][7]
	EndIf
	CDH->CDH_FILIAL	:=	xFilial("CDH")
	CDH->CDH_TIPOIP	:=	cTipoIP
	CDH->CDH_TIPOPR	:=	STR(nApuracao,1)
	CDH->CDH_PERIOD	:=	STR(nPeriodo,1)
	CDH->CDH_LIVRO	:=	cNrLivro
	CDH->CDH_SEQUEN	:=	cSequen
	CDH->CDH_DTINI	:=	dDtIni
	CDH->CDH_DTFIM	:=	dDtFim
	CDH->CDH_CONSO	:=	Iif(lConsUF,1,2)
	CDH->CDH_FILDE	:=	cFilDe
	CDH->CDH_FILATE	:=	cFilAte
	CDH->CDH_DESC	:=	cDesc
	CDH->CDH_GNRE	:=	aGnre[nI][1]
	CDH->CDH_VALOR	:=	aGnre[nI][3]
	CDH->CDH_CLVENC	:=	aGnre[nI][4]
	CDH->CDH_ESTGNR	:=	aGnre[nI][5]
	CDH->CDH_LINHA	:=	"GNR"
	If cTipoIP == "IC"
		nCntIC++
		nCntGnr := nCntIC
	Else
		nCntST++
		nCntGnr := nCntST
	EndIf
	CDH->CDH_SUBITE	:=	"GNR."+STRZERO(nCntGnr,3)

	MsUnlock()
	CDH->(FKCommit())
Next

For nI:=1 to Len(aLancST)

	If aLancST[nI,Len(aLAncST[nI])] .Or. Empty(aLancST[nI,1]) .Or. aLancST[nI,1] $ "IND/GNR/TIT/FOM" .Or. Substr(aLancST[nI,1],1,1) = "1"
		Loop
	EndIf

	RecLock("CDH",.T.)
	CDH->CDH_FILIAL	:=	xFilial("CDH")
	CDH->CDH_TIPOIP	:=	"ST"
	CDH->CDH_TIPOPR	:=	STR(nApuracao,1)
	CDH->CDH_PERIOD	:=	STR(nPeriodo,1)
	CDH->CDH_LIVRO	:=	cNrLivro
	CDH->CDH_SEQUEN	:=	cSequen
	CDH->CDH_DTINI	:=	dDtIni
	CDH->CDH_DTFIM	:=	dDtFim
	CDH->CDH_CONSO	:=	Iif(lConsUF,1,2)
	CDH->CDH_FILDE	:=	cFilDe
	CDH->CDH_FILATE	:=	cFilAte
	CDH->CDH_LINHA	:=	aLancST[nI][1]
	CDH->CDH_SUBITE	:=	Alltrim(aLancST[nI][2])
	CDH->CDH_DESC	:=	aLancST[nI][3]
	CDH->CDH_VALOR	:=	Iif(Valtype(aLancST[nI][4]) == "N",aLancST[nI][4],0)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Gravacao dos dados da GNRE caso tenha uma relacionada ao lancamento manual³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aLancST[nI][5]	:=	PadR(aLancST[nI][5],TamSx3("F6_NUMERO")[1])
	If !Empty(aLancST[nI][5]) .And. aScan(aGNRE,{|aX|aX[1]==aLancST[nI][5] .And. aX[5]==Left(aLancST[nI][7],2) .And. aX[6]=="ST"})>0
		CDH->CDH_ESTGNR	:=	Left(aLancST[nI][7],2)
		CDH->CDH_GNRE	:=	aLancST[nI][5]
	EndIf

	CDH->CDH_CLVENC	:=	aLancST[nI][6]
	CDH->CDH_CODLAN	:=	aLancST[nI][7]

	If Len(aLancST[nI]) > 8 // Maior que 8 significa que existe controle de lancto manual
		If lTpLanc

			If  SubStr(aLancST[nI][8],1,2) == 'AI' // Ajuste automático individualizado
				CDH->CDH_TPLANC	:= 'AI' + alltrim(SubStr(aLancST[nI][8],500))
			Else
				CDH->CDH_TPLANC	:= alltrim(aLancST[nI][8])
			EndIf
		EndIf

		If lProcRef
			CDH->CDH_PROCES	:=	aLancST[nI][9]
			CDH->CDH_ITPROC	:=	aLancST[nI][12]
			CDH->CDH_PROCTP	:=	aLancST[nI][10]
			CDH->CDH_PROIND	:=	aLancST[nI][11]
		EndIf
	EndIf
	MsUnlock()
	CDH->(FKCommit())

Next


Return NIL

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³  ContCred   ³ Autor ³Luccas Curcio            ³ 22.08.2011 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina automática para gravação do Controle de Crédito      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³Função responsável por enviar as informações do Código de   ³±±
±±³          ³ Lançamento que será usado no Controle de Crédito, a fim    ³±±
±±³          ³ de controlar os registros e utilizar no SPED Fiscal.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nil													      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aLanc -> Array contendo as informações do lançamento na     ³±±
±±³			 ³ 			  apuração de icms.                               ³±±
±±³          ³dData -> Variável que contém a data do processamento        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function ContCred(aLanc,dData)

Local nX		:=	0
Local aLancApur	:=	{}

For nX := 1 to Len(aLanc)
	aLancApur	:=	{}
	If !Empty(aLanc[nX,7]) .And. !aLanc[nX,Len(aLanc[nX])]
		aLancApur	:=	aClone(aLanc[nX])
		UFCodLan(aLancApur,dData)
	EndIf
End

Return

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³a953CODLAN ³ Autor ³ Liber De Esteban     ³ Data ³ 17-12-07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Valida Codigo de lancamento informado pelo usuario         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAFIS                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function a953CODLAN(cCodTP)

Local lRet 		:= .T.
Local nI     	:= 1
Local cReflex 	:= aCols[n,1]
Local cUf		:= GetMv("MV_ESTADO",,"") //TODO buscar estado do acols qando cCodTp for igual a 2.
Local nPosCodLan	:= Iif(cCodTP == '2',5,7)
Local nPosTpLanc	:= Iif(cCodTP == '2',7,8)

//Ajuste para novos codigos de difal exclusivos para FECP
If mv_par02 >= 2017 .And. cCodTP == '2' .And. aCols[n,1] $ "014|015|018|019|021|024"
	cCodTP := '3'
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Quando estiver vindo vazio, significa que estah vindo de debitos especiais e lah pode ser lancado tanto ICMS quanto ICMS ST.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(cCodTP)
	If aCols[n,1]=="900"
		cCodTP	:=	"0"
		cReflex	:=	"5"
	ElseIf aCols[n,1]=="901"
		cCodTP	:=	"1"
		cReflex	:=	"5"
	EndIf
Else
	If cCodTP == '2'
		Do Case
			Case  aCols[n,1] == "002";cReflex:="0"
			Case  aCols[n,1] == "003";cReflex:="1"
			Case  aCols[n,1] == "006" ;cReflex:="2"
			Case  aCols[n,1] == "007" ;cReflex:="3"
			Case  aCols[n,1] == "009" ;cReflex:="4"
			Case  aCols[n,1] == "012" ;cReflex:="5"
		EndCase
	Elseif  cCodTP == '3'
		Do Case
			Case  aCols[n,1] == "014";cReflex:="0"
			Case  aCols[n,1] == "015";cReflex:="1"
			Case  aCols[n,1] == "018" ;cReflex:="2"
			Case  aCols[n,1] == "019" ;cReflex:="3"
			Case  aCols[n,1] == "021" ;cReflex:="4"
			Case  aCols[n,1] == "024" ;cReflex:="5"
		EndCase
	Else

		Do Case
			Case  aCols[n,1] == "002";cReflex:="0"
			Case  aCols[n,1] == "003";cReflex:="1"
			Case (aCols[n,1] == "006" .And. cCodTP=="0");cReflex:="2"
			Case (aCols[n,1] == "007" .And. cCodTP=="0");cReflex:="3"
			Case (aCols[n,1] == "012" .And. cCodTP=="0");cReflex:="4"
			Case (aCols[n,1] == "007" .And. cCodTP=="1");cReflex:="2"
			Case (aCols[n,1] == "008" .And. cCodTP=="1");cReflex:="3"
			Case (aCols[n,1] == "014" .And. cCodTP=="1");cReflex:="4"
		EndCase
	EndIf
EndIf

If !aCols[n,Len(aCols[n])]
	If !aCols[nI,Len(aCols[nI])] .And. !Empty(cCodLan)
		CDO->(DbSetOrder(1))
		If CDO->(DbSeek(xFilial("CDO")+Alltrim(cCodLan)))
			If cCodTP <> CDO->CDO_TPAPUR .Or. !(CDO->CDO_UTILI$cReflex) .Or. ((cCodTP == "0" .And. cUf <> CDO->CDO_UF) .Or. (cCodTP $ '2/3' .And. !'('+CDO->CDO_UF+')' $ aCols[2][3]))
				xMagHelpFis (STR0085,;	//"Atenção"
				STR0124,;				//"Código de lançamento inválido!"
				STR0125)				//"Verifique a UF, o reflexo e o tipo de apuração do lançamento selecionado."
				lRet := .F.
			ElseIf aApurSX3[FP_CDO_MSBLQL] .And. CDO->CDO_MSBLQL == "1"
				xMagHelpFis (STR0085,;	//"Atenção"
				STR0274,;				//"Código de Lançamento Bloqueado!"
				STR0275)				//"Favor informar um código de lançamento válido."
				lRet := .F.
			ElseIf !Empty(CDO->CDO_DESCR) // Carrega descrição do lancamento
				aCols[n,3] := Substr(CDO->CDO_DESCR,1,TamSx3("CDH_DESC")[1])
			EndIf
			If len(Alltrim(cCodLan)) > 8
				lRet:= .F.
			EndIf
		Else
			lRet := .F.
		EndIf
	EndIf
EndIf

//Atualiza valores de créditos extra apuração
If lRet .And. lCmpExtra

	If alltrim(aCols[n,nPosCodLan]) <> alltrim(cCodLan) .And. !Empty(cCodLan) .And. !Empty(aCols[n,nPosCodLan])
		//O código de lançamento foi alterado, e precisa verificar se é necessário deletar a linha na aba de extra apuração
		AtuExtra(aCols[n,nPosCodLan],0,aCols[n,nPosTpLanc],'2')
	EndIf

	//Se alterar o valor e houver código de lançamento preenchido então irei verificar se precisa atualizar informações de extra apuração.
	AtuExtra(cCodLan,aCols[n,4],aCols[n,nPosTpLanc],'1')
EndIf

Return (lRet)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MyEditCelF    ³ Autor ³ Luciana Pires         ³ Data ³18.08.2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Controla a edicao dos campos da oGetDad8 - Fomentar             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function MyEditCelF(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB)
Local bSave := oGloBrowse:Cargo

If !(aCols[oGloBrowse:nAt,1]$"003#008#009#010#014#016#017#020#021#023#025#026#028#029#030#031#036#038#039#041#042#043#044#061#071#072#075#077#079#080#081#082#083#084")
	oGloBrowse:Cargo := ""
	lEditCol( nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB )
EndIf

oGloBrowse:Cargo := bSave
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³VerificaGNRE  ³ Autor ³ Murilo Alves          ³ Data ³07.12.2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Efetua consistencia do aGNRE									  ³±±
±±³          |		Se a mesma guia for selecionada varias vezes,			  ³±±
±±³          |		para cada vez, e' incluido em aGnre						  ³±±
±±³          |		Esta funcao trata o array permitindo apenas as guias	  ³±±
±±³          |		aGnre que foram realmente selecionadas					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function VerificaGNRE()

Local	nX		:= 0
Local	aGnre2	:= {}
Local	aGnre3	:= {}

aGnre2	:= aClone(aGnre)
For nX := 1 to Len(aGnre2)
	aGnre2[nX][1] := Alltrim(aGnre[nX][1])
Next
aGnre3 := {}

For nX := 1 to Len(aCols)
	If Ascan(aGnre2,{|x|x[1]==Alltrim(aCols[nX,5])}) > 0
		nPos = Ascan(aGnre2,{|x|x[1]==Alltrim(aCols[nX,5])}) //marca a posicao do aGNRE
		Aadd(aGnre3,aGnre[nPos])
	EndIf
Next
Return aGNRE3

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao   ³ProcRICMDF ³ Autor Erick Gonçalves Dias    ³ Data ³01/10/2010 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.     ³Calculo do estorno RICMS-DF                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Estorno no período                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Data inicial do período e data final do período             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function ProcRICMDF(dDataIni,dDataFim)

Local aArea		:= GetArea()
Local cFiltro	:=	""
Local nValEst :=0  //Valor do estorno
Local nX := 0
Local cAliasSD2 := "SD2"
Local lQuery	:=	.F.
Local cChaveSD2	:=	''


dbSelectArea("SD2")
SD2->(dbsetorder(1))

#IFDEF TOP
	If TcSrvType()<>"AS/400"
		lQuery	:=	.T.
	    cAliasSD2 	:= GetNextAlias()
		cQuery := " SELECT DISTINCT D2_DOC, D2_SERIE, D2_CLIENTE, D2_LOJA "
		cQuery += " FROM " + RetSqlName("SD2") + " SD2 " 
		cQuery += " JOIN " + RetSqlName("SD5") + " SD5 "
		cQuery += " ON SD5.D5_FILIAL='" +xFilial("SD5")+"' "
		cQuery += " AND SD2.D2_COD = SD5.D5_PRODUTO "
		cQuery += " AND SD2.D2_COD=SD5.D5_PRODUTO "
		cQuery += " AND SD2.D2_LOCAL=SD5.D5_LOCAL "
		cQuery += " AND SD2.D2_LOTECTL=SD5.D5_LOTECTL "
		cQuery += " AND SD2.D2_NUMLOTE=SD5.D5_NUMLOTE "
		cQuery += " AND SD5.D5_ORIGLAN<'501' "
		cQuery += " AND SD5.D5_ESTORNO<>'S' "
		cQuery += " AND SD5.D_E_L_E_T_ = ' '"

		cQuery 	+= "WHERE SD2.D2_FILIAL = '" + xFilial("SD2") + "' AND "
		cQuery 	+= "SD2.D2_EMISSAO >= '" + Dtos(dDataIni) + "' AND "
		cQuery 	+= "SD2.D2_EMISSAO <= '" + Dtos(dDataFim) + "' AND "
		cQuery  += "SD2.D2_TIPO <> 'D' AND " //Não irá condirerar as notas de devoluções
		cQuery 	+= "SD2.D_E_L_E_T_ = ' ' "
		

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSD2,.T.,.T.)
	Else
#EndIf
		cIndex  := CriaTrab(NIL,.F.)
		cFiltro	:=	"SD2->D2_FILIAL == '" + xFilial("SD2") + "' .And. DTOS(SD2->D2_EMISSAO) >= '" + Dtos(dDataIni) + "' .And. DTOS(SD2->D2_EMISSAO) <= '" + Dtos(dDataFim) + "' .And. D2_TIPO <> 'D' "
		IndRegua(cAliasSD2,cIndex,SD2->(IndexKey()),,cFiltro)
		dbSelectArea(cAliasSD2)
		dbGoTop()
#IFDEF TOP
	EndIf
#EndIf

While !(cAliasSD2)->(Eof())

	If cChaveSD2 <> ( cAliasSD2 )->( D2_DOC + D2_SERIE + D2_CLIENTE + D2_LOJA )
		cChaveSD2	:=	( cAliasSD2 )->( D2_DOC + D2_SERIE + D2_CLIENTE + D2_LOJA )

		//aLote terá as notas de saídas com suas notas de entradas
		aLote:=RastroNFOr((cAliasSD2)->D2_DOC,(cAliasSD2)->D2_SERIE,(cAliasSD2)->D2_CLIENTE,(cAliasSD2)->D2_LOJA)
		If Len(aLote) > 0
			For nX := 1 to Len(aLote)
				dbSelectArea("SF4")
				SF4->(dbSetOrder(1))
				//Verifica se na TES existe redução de base de ICMS e se o CFOP é de saída interna.
				If SF4->(dbSeek(xFilial("SD2")+aLote[nX][30])) .And. Substr(aLote[nX][34],1,1) == "5"
					If SF4->F4_BASEICM >0
		  				//Calcula estorno de crédito
						//((BASE DE ICMS DE ENTRADA / QUANTIDADE DE ENTRADA ) * ALÍQUOTA DE ICMS DE ENTRADA) * QUANTIDADE DA NOTA DE SAÍDA / 100 * REDUCAO DE SAÍDA
		  				nValEst+= round(((aLote[nX][12] /aLote[nX][6] ) * aLote[nX][14] /100) * 	aLote[nX][4] /100  * SF4->F4_BASEICM ,2)
					EndIf
			    EndIf
			Next nY
		EndIf
	EndIf

	(cAliasSD2)->(dbSkip())
EndDo

#IFDEF TOP
	dbSelectArea(cAliasSD2)
	dbCloseArea()
#ELSE
	dbSelectArea(cAliasSD2)
	RetIndex(cAliasSD2)
	Ferase(cIndex+OrdBagExt())
#EndIf
RestArea(aArea)
Return (nValEst)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³M953CRDM   ºAutor  ³Caio Oliveira      º Data ³  12/29/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³  Funcao que verifica de todos parametros iniciados         º±±
±±º          ³  por MV_CRDM na tabela SX6, Montando um Array contendo:    º±±
±±º          ³  { NCM , TIPO DO CLIENTE, % CRÉDITO, COD NA APURAÇÃO }     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function M953CRDM()

Local	nInd		:=	0
Local	cChave		:=	""
Local	lLoop		:=	.F.
Local	cVar		:=	""
Local	cLetra		:=	""
Local   aRegra		:= {}
Local   nNcm        := 0
Local   nTipo       := 0
Local   nVal        := 0
Local   cNcm        := ""
Local   cTipo       := ""
Local   cVal        := ""
Local   nX			:= 1

DbSelectArea ("SX6")
SX6->(DbSetOrder (1))
SX6->( DbGoTop() )

If SX6->(DbSeek (FWGETCODFILIAL+"MV_CRDM001"))
	cChave		:=	FWGETCODFILIAL //{||cChave1==SX6->X6_FIL .And. "MV_CRDM"$SX6->X6_VAR}
	lLoop		:=	.T.
ElseIf SX6->(DbSeek (Space(FWGETTAMFILIAL)+"MV_CRDM001"))
	cChave		:=	Space(FWGETTAMFILIAL) // {||cChave2==SX6->X6_FIL .And. "MV_CRDM"$SX6->X6_VAR}
	lLoop		:=	.T.
ElseIf SX6->(DbSeek (Space(2)+"MV_CRDM001"))
	cChave		:=	Space(2)  //{||cChave3==SX6->X6_FIL .And. "MV_CRDM"$SX6->X6_VAR}
	lLoop		:=	.T.
EndIf
If lLoop
	For nX := 1 To 999
		cVar := SuperGetMv( "MV_CRDM" + StrZero(nX,3), .F., 0 )

		If ValType( cVar ) == "N"
			Exit
		EndIf

		For nInd := 1 To Len (cVar)
			cLetra	:=	SubStr (cVar, nInd, 1)

			If (";"$cLetra)
				If Len(cNcm)>0 .And. Len(cTipo)>0 .And. Len(cVal)>0
					aAdd (aRegra, {cNcm, cTipo, Val(cVal)} )
				EndIf
				cNcm := cTipo := cVal := ""
				nNcm := nTipo := nVal := 0
			ElseIf ("="$cLetra)
				Loop
			Else
				If nNcm<8
					cNcm += cLetra
					nNcm++
				ElseIf nTipo<1
					cTipo := cLetra
					nTipo++
				ElseIf nVal<5
					cVal  += cLetra
					nVal++
				EndIf
			EndIf
		Next (nInd)

		If Len(cNcm)>0 .And. Len(cTipo)>0 .And. Len(cVal)>0
			aAdd (aRegra, {cNcm, cTipo, Val(cVal)} )
			cNcm := cTipo := cVal := ""
			nNcm := nTipo := nVal := 0
		EndIf
	Next
EndIf

Return aRegra

//-------------------------------------------------------------------
/*/{Protheus.doc} RetPictVal
Retorna picture a ser utilizada nos campos de valores

@param	Nil

@return cRet - Picture do campo

@author Microsiga
@since 30.10.2012
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function RetPictVal()
Local cRet := ""

cRet := Alltrim(PesqPict("CDH","CDH_VALOR"))
//Foi solicitado ao Sandro do Framework a correção do retorno da função PesqPict pois ela esta retornando o "@E ®" quando a picture do campo esta em branco no dicionário.
If Empty(cRet) .Or. cRet == "@E ®"
	cRet := "@E 999,999,999,999.99"
EndIf

Return cRet

//-----------------------------------------------------------------------
/*/{Protheus.doc} UFxNameFcp
Retorna mensagem de observacao referente ao FECP

@param  cUF	-	Estado a ser verificado

@author Luccas Curcio
@since 11/02/2014
@version 1.00

@Return	cRet - Nomenclatura do FCP para a UF

/*/
//-----------------------------------------------------------------------
Function UFxNameFcp( cUF )
Local	cRet	:=	""

//FECP -> Rio de Janeiro; Bahia; Minas Gerais; Mato Grosso; Espirito Santo
If cUF $ "RJ|BA|MG|MT|ES"
	cRet	:=	"FECP"

//FECOEP -> Alagoas
Elseif cUF $ "AL"
	cRet	:=	"FECOEP"

//FUMACOP -> Maranhao
Elseif cUF $ "MA"
	cRet	:=	"FUMACOP"

//FECOP -> Rio Grande do Norte; Ceara
Elseif cUF $ "RN|CE"
	cRet	:=	"FECOP"

//FUNPOBREZA -> Sergipe
ElseIF cUF $ "SE"
	cRet	:=	"FUNPOBREZA"

//FUNCEP -> Paraiba
ElseIF cUF $ "PB"
	cRet	:=	"FUNCEP"

//FECEP -> Pernambuco
ElseIF cUF $ "PE"
	cRet	:=	"FECEP"

EndIf

Return cRet

//-----------------------------------------------------------------------
/*/{Protheus.doc} FGerTit
Funcao para realizar a chamada da GravaTit e retornar o numero da solicitacao
que foi aberta no Fluig

@Param
( Parametros da Funcao GravaTit )

@Return
nNumSolFlg - Numero da Solicitacao criada no Fluig

@author Rodrigo Aguilar
@since  29/04/2014
@version 1.00

/*/
//-----------------------------------------------------------------------
Static Function FGerTit( lTitulo,;
							nVlrTitulo,;
							cImposto,;
							cImp,;
							cLcPadTit,;	//5
							dDtIni,;
							dDtFim,;
							dDtVenc,;
							nMoedTit,;
							lGuiaRec,;     //10
							nMes,;
							nAno,;
							nTitICMS,;
							nTitST,;
							cOrigem,;//15
							lContab,;
							cNumero,;
							aGnre,;
							cClasse,;
							aGNREST,;	//20
							cUF,;
							cCodRetIPI,;
							lFECP,;
							lDifAlq,;
							cNumGnre,;//25
							aRecTit,;
							lConfTit,;
							nTitFun,;
							aDadSf2,;
							lArt65,; 		//30
							cOriGNRE,;
							aApIncent,;
							cCodGnre,;
							nGuiaSN,;
							nConv139,;//35
							lGTitFluig,;
							cNrLivro,;
							nApuracao,;
							nPeriodo,;
							nNumSolFlg,;//40
							cForIss,;
							cLojISS,;
							lDifal,;
							lAntParcBA,;
							cNumConv,;//45
							lAutomato ,;
							aRetAuto,;
							cCodMunRec,;
							cObserv )	 //49

//Carrego as variaveis configuradas por parametro, preciso delas para verificar se
//ja existe pocesso em aberto no Fluig para o mesmo periodo
Local cNrLivro	:= mv_par03
Local nApuracao	:= mv_par04
Local nPeriodo	:= mv_par05

Local nNumSolFlg := 0

Default lContab   := .F.
Default cClasse 	 := Space( 06 )
Default aGNREST 	 := {}
Default cUF		 := GetNewPar("MV_ESTADO")
Default cCodRetIPI := ""
Default lFECP  	 := .F.
Default lDifAlq 	 := .F.
Default cNumGnre	 := Space( TamSx3( "F6_NUMERO" ) [1] )
Default aRecTit	 := {}
Default lConfTit	 := .F.
Default nTitFun	 := 0
Default aDadSf2	 := {}
Default lArt65	 := .F.
Default cOriGNRE	 := "RECSALDO"
Default aApIncent	 := {}
Default cCodGnre 	 := ""
Default nGuiaSN	 := 0
Default nConv139   := 0
Default lGTitFluig := .F.
Default cNrLivro   := ""
Default nApuracao	  := 0
Default nPeriodo := 0
Default nNumSolFlg := 0
Default cForIss := ""
Default cLojISS := ""
Default lDifal	:= .F.
Default lAutomato := .F.
Default aRetAuto  := {}
Default cCodMunRec := ""
DEfault cObserv	:= ''

//Chamada da Funcao GravaTit
GravaTit( lTitulo,;
		   nVlrTitulo,;
		   cImposto,;
		   cImp,;
		   cLcPadTit,;
		   dDtIni,;
		   dDtFim,;
		   dDtVenc,;
		   nMoedTit,;
		   lGuiaRec,;
		   nMes,;
		   nAno,;
	       nTitICMS,;
	       nTitST,;
	       cOrigem,;
	       lContab,;
	       @cNumero,;
	       @aGnre,;
	       cClasse,;
          @aGNREST,;
		   cUF,;
		   cCodRetIPI,;
		   lFECP,;
		   lDifAlq,;
		   cNumGnre,;
		   @aRecTit,;
		   @lConfTit,;
		   nTitFun,;
		   aDadSf2,;
		   lArt65,;
		   cOriGNRE,;
		   aApIncent,;
		   cCodGnre,;
		   nGuiaSN,;
		   nConv139,; //35
		   lGTitFluig,;
		   cNrLivro,;
		   nApuracao,;
		   nPeriodo,;
		   @nNumSolFlg,;
		   ,;
		   ,;
		   lDifal,,,lAutomato,aRetAuto,,,,cObserv ) //48

Return ( nNumSolFlg )

//-------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Model utilizado para o WorkFLow de aprovacao de titulos gerados
pela rotina de apuracao de ICMS ( Integracao Protheus x Fluig )

@Return
oModel - Modelo da solicitacao

@author Rodrigo Aguilar
@since 24/04/2014
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function ModelDef()

Local oStruCH3 := FWFormStruct( 1, 'CH3' )
Local oStruCH4 := FWFormStruct( 1, 'CH4' )
Local oModel   := MPFormModel():New( 'MATA953',,,{ |oModel| SaveModel( oModel ) } )

oModel:AddFields( 'MODEL_CH3', /*cOwner*/, oStruCH3 )
oModel:AddFields( 'MODEL_CH4', /*cOwner*/, oStruCH4 )

Return ( oModel )

//-------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
View utilizada para o WorkFLow de aprovacao de titulos gerados
pela rotina de apuracao de ICMS ( Integracao Protheus x Fluig )

@Return
oView - View da solicitacao

@author Rodrigo Aguilar
@since 24/04/2014
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function ViewDef()

Local cGrupoCH3_1, cGrupoCH3_2, cGrupoCH4_1 := ""

Local oModel := FWLoadModel( 'MATA953' )
Local oView  := FWFormView():New()

Local oStruCH3_1, oStruCH3_2, oStruCH4_1

//Grupo de Campos que serao apenas visuais no formulario do Fluig
cGrupoCH3_1 := "CH3_FILSE2|CH3_PREFIX|CH3_NUM|CH3_VALOR|CH3_HISTOR|CH3_EMISSA|CH3_VENCTO|CH3_RESPON|"
oStruCH3_1  := FwFormStruct( 2, "CH3", {|x| AllTrim( x ) + "|" $ cGrupoCH3_1 } )

//Grupo de Campos que serao editaveis no formulario do Fluig
cGrupoCH3_2 := "CH3_APRTIT|CH3_OBSERV|"
oStruCH3_2  := FwFormStruct( 2, "CH3", {|x| AllTrim( x ) + "|" $ cGrupoCH3_2 } )

//Grupo de Campos que serao ocultos no formulario, apenas incluo-os para salvar a
//informacao da filial da tabela CH4
cGrupoCH4_1 := "CH4_FILCDH|"
oStruCH4_1  := FwFormStruct( 2, "CH4", {|x| AllTrim( x ) + "|" $ cGrupoCH4_1 } )

oView:SetModel( oModel )
oView:AddField( 'VIEW_CH3_1', oStruCH3_1, 'MODEL_CH3' )
oView:AddField( 'VIEW_CH3_2', oStruCH3_2, 'MODEL_CH3' )
oView:AddField( 'VIEW_CH4_1', oStruCH4_1, 'MODEL_CH4' )

oView:EnableTitleView( 'VIEW_CH3_1', "Dados do Título:" )
oView:EnableTitleView( 'VIEW_CH3_2', "Dados da Aprovação:" )

oView:CreateHorizontalBox( 'FIELDSCH3_1', 60 )
oView:SetOwnerView( 'VIEW_CH3_1', 'FIELDSCH3_1' )

oView:CreateHorizontalBox( 'FIELDSCH3_2', 20 )
oView:SetOwnerView( 'VIEW_CH3_2', 'FIELDSCH3_2' )

oView:CreateHorizontalBox( 'FIELDSCH4_1', 20 )
oView:SetOwnerView( 'VIEW_CH4_1', 'FIELDSCH4_1' )

Return ( oView )

//-------------------------------------------------------------------
/*/{Protheus.doc} SaveModel
Funcao para gravacao do retorno da aprovacao do titulo no Fluig

@Return
lRet - Indica se as tabelas foram gravadas corretamente

@author Rodrigo Aguilar
@since 24/04/2014
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function SaveModel( oModel )

Local cNumProces := ""
Local cAprvTit   := ""
Local cObserv    := ""
Local cFilCH3, cFilCH4 := ""
Local lRet := .T.

Local cLcPadTit := Substr( SuperGetMv( "MV_LPADICM" ), 1, 3 )

//Busco a informacao do numero da solicitacao para veificar se a mesma
//existe na base de dados
cNumProces := Alltrim( oModel:GetWKNumProces() )

//Busca as filiais da tabela espelho
cFilCH3 := oModel:GetValue( 'MODEL_CH3' , 'CH3_FILSE2' )
cFilCH4 := oModel:GetValue( 'MODEL_CH4' , 'CH4_FILCDH' )

//Busca as informacoes a serem gravadas na tabela CH3
cAprvTit := oModel:GetValue( 'MODEL_CH3' , 'CH3_APRTIT' )
cObserv  := oModel:GetValue( 'MODEL_CH3' , 'CH3_OBSERV' )

//Posiciono no Titulo da tabela CH3 para geracao na SE2
DbSelectArea( "CH3" )
CH3->( DbSetOrder(1) )
If CH3->( MsSeek( cFilCH3 + cNumProces  ) )

	Begin Transaction

		//Gravo os dados de retorno na tabela CH3
		RecLock( "CH3", .F. )
			CH3->CH3_APRTIT := cAprvTit
			CH3->CH3_OBSERV := cObserv
		CH3->( MsUnlock() )

		//Verifico se o usuario aprovou a geracao do titulo pelo Fluig
		If cAprvTit == "1" //Aprovado

			//Posiciono no processo da tabela CH3 para geracao na SE2
			RecLock( "SE2", .T. )
				SE2->E2_FILIAL   := CH3->CH3_FILIAL
				SE2->E2_NUM	   := CH3->CH3_NUM
				SE2->E2_PREFIXO  := CH3->CH3_PREFIX
				SE2->E2_TIPO     := CH3->CH3_TIPO
				SE2->E2_NATUREZ  := CH3->CH3_NATURE
				SE2->E2_FORNECE  := CH3->CH3_FORNEC
				SE2->E2_LOJA     := CH3->CH3_LOJA
				SE2->E2_NOMFOR   := CH3->CH3_NOMFOR
				SE2->E2_MOEDA	   := CH3->CH3_MOEDA
				SE2->E2_VALOR    := CH3->CH3_VALOR
				SE2->E2_SALDO    := CH3->CH3_VALOR
				SE2->E2_VLCRUZ   := CH3->CH3_VALOR
				SE2->E2_HIST     := CH3->CH3_HISTOR
				SE2->E2_LA       := CH3->CH3_IDLANC
				SE2->E2_EMISSAO  := CH3->CH3_EMISSA
				SE2->E2_VENCTO   := CH3->CH3_VENCTO
				SE2->E2_VENCREA  := DataValida( CH3->CH3_VENCTO, .T. )
				SE2->E2_VENCORI  := CH3->CH3_VENCTO
				SE2->E2_EMIS1	   := CH3->CH3_EMISSA
				SE2->E2_ORIGEM   := CH3->CH3_ORIGEM
				SE2->E2_FILORIG  := CH3->CH3_FILORI
				SE2->E2_CODRET   := CH3->CH3_CODRET
			SE2->( MsUnlock() )

			//Efetua Lancamento Contabil ( Na gravatit este item nao eh executado pois o
			//titulo nao foi gerado, sendo assim realizo a execucao neste ponto ).
			If CH3->CH3_LANCON == "1"
				LancCont( cLcPadTit, "MATA953", .T. )
			EndIf

			//Verifico se existe informacao na tabela CH4 referente a complemento da CDH
			//com o numero do titulo, no mometo de geracao deste registro as informacoes abaixo
			//nao foram geradas devido a nao existencia do Titulo, neste momento realizo o complemento
			//da CDH com as informacoes
			If CH4->( MsSeek( cFilCH4 + Padr( cNumProces, TamSx3("CH4_PROCES")[1] ) + "1" ) )
				If CDH->( DbGoto( CH4->CH4_RECAPU ) )
					Reclock( "CDH", .F. )
						CDH->CDH_PRETIT	:=	CH4->CH4_PREFIX
						CDH->CDH_NUMTIT	:=	CH4->CH4_NUM
						CDH->CDH_PARTIT	:=	""
						CDH->CDH_TPTIT	:=	CH4->CH4_TIPO
						CDH->CDH_VALOR	:=	CH4->CH4_VALOR
						CDH->CDH_LINHA	:=	CH4->CH4_LINHA
						CDH->CDH_SUBITE	:=	CH4->CH4_SUBLIN
					CDH->( MsUnlock() )

				//Caso nao encontre o registro na tabela ( situacao que NUNCA devera acontecer )
				//Retorno .F. para o Fluig nao encerrar a solicitacao
				Else
					oModel:SetErrorMessage (,,,,,STR0268,STR0269) //"Ocorreu um erro ao gravar as informações no Protheus."#"Contate o administrador do sistema."
					DisarmTransaction()
					lRet := .F.
				EndIf
			EndIf

			//Realizo a inclusao dos registros referentes ao titulo que nao foram
			//gerados na CDH
			If CH4->( MsSeek( cFilCH4 + Padr( cNumProces, TamSx3("CH4_PROCES")[1] ) ) )
				RecLock( "CDH", .T. )
					CDH->CDH_FILIAL := CH4->CH4_FILCDH
					CDH->CDH_TIPOIP := CH4->CH4_TIPOIP
					CDH->CDH_TIPOPR := CH4->CH4_TIPOPR
					CDH->CDH_PERIOD := CH4->CH4_PERIOD
					CDH->CDH_LIVRO  := CH4->CH4_LIVRO
					CDH->CDH_SEQUEN := CH4->CH4_SEQUEN
					CDH->CDH_DTINI  := CH4->CH4_DTINI
					CDH->CDH_DTFIM  := CH4->CH4_DTFIN
					CDH->CDH_CONSO  := CH4->CH4_CONSO
					CDH->CDH_FILDE  := CH4->CH4_FILDE
					CDH->CDH_FILATE := CH4->CH4_FILATE
					CDH->CDH_DESC   := CH4->CH4_DESC
					CDH->CDH_PRETIT := CH3->CH3_PREFIX
					CDH->CDH_NUMTIT := CH3->CH3_NUM
					CDH->CDH_PARTIT := ""
					CDH->CDH_TPTIT  := CH3->CH3_TIPO
					CDH->CDH_FORTIT := CH3->CH3_FORNEC
					CDH->CDH_LOJTIT := CH3->CH3_LOJA
					CDH->CDH_LINHA  := CH4->CH4_LINHA
					CDH->CDH_SUBITE := CH4->CH4_SUBLIN
				CDH->( MsUnlock() )

			//Caso nao encontre o registro na tabela ( situacao que NUNCA devera acontecer )
			//Retorno .F. para o Fluig nao encerrar a solicitacao
			Else
				oModel:SetErrorMessage (,,,,,STR0268,STR0269) //"Ocorreu um erro ao gravar as informações no Protheus."#"Contate o administrador do sistema."
				DisarmTransaction()
				lRet := .F.
			EndIf
		EndIf

	End Transaction

//Caso nao encontre o registro na tabela ( situacao que NUNCA devera acontecer )
//Retorno .F. para o Fluig nao encerrar a solicitacao
Else
	oModel:SetErrorMessage (,,,,,STR0268,STR0269) //"Ocorreu um erro ao gravar as informações no Protheus."#"Contate o administrador do sistema."
	lRet := .F.
EndIf

Return ( lRet )

function a953VldDif()

Return .T.


Static Function PDetCodLan(nOpcao,oGetDad5, oGetDad6, oGetDad10,oGetDad13, aCols5, aCols6, aCols10, aCols13 ,oDlg, aColumns, nAno ,nMes,lUsaSped, lFomentGO, lApurBa,lACredAcu )

Local lDebEsp	:= .F.

If lFomentGO .Or. lACredAcu  //#TODO PDetCodLan
	If lFomentGO .And. lACredAcu .And. nOpcao == 12
		lDebEsp	:= .T.
	Elseif nOpcao == 11
		lDebEsp	:= .T.
	EndIf
ElseIF lApurBa .And. nOpcao == 12
	lDebEsp	:= .T.
Elseif  nOpcao == 10
	lDebEsp	:= .T.
EndIf

If nOpcao == 5 //ICMS Próprio
	DetCodLan( 1, oGetDad5, aCols5    , oDlg, aColumns, nAno , nMes, lUsaSped)
ElseIf nOpcao == 6 //ST
	DetCodLan( 2, oGetDad6, aCols6     , oDlg, aColumns, nAno , nMes, lUsaSped)
ElseIf nOpcao == 8 .And. !LGERDIFAL //Difal
	DetCodLan( 3, oGetDad13, aCols13  , oDlg, aColumns, nAno , nMes, lUsaSped)
ElseIF lDebEsp // Débito Especial. Esta Aba não é fixa como as demais, então ora pode ser folder 10, 11 ou 9, em função das variáveis lFomentGO e lApurBa.
	DetCodLan( 4, oGetDad10, aCols10  , oDlg, aColumns, nAno  ,nMes, lUsaSped)
EndIf

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} DetCodLan
Função que irá exibir detalhamento das notas que gravaram código de lançamento
na tabela CDA, exibindo no detalhe as notas e itens que deram origem ao valor
exibido do código de lançamento

nOpcao - Indica de qual aba da apuração está sendo chamada:
		 1=ICMS Próprio
		 2=ICMS ST
		 3=DIFAL
		 4=Débito Especial
oGetDad - Objeto da GetDados da aba de apuração selecionada
aCols   - ACols da aba de apuração selecionada
oDlg    - Dialog principal da apuração
aColumns - Array com as colunas que serão exibidas no detalhamento do código de lançamento
nAno - Ano de processamento
nMes - mês de processamento
lUsaSped - Indica se o MV_USASPED está configurado com .T.

@author Erick G Dias
@since 09/08/2017
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function DetCodLan(nOpcao,oGetDad, aCols, oDlg, aColumns, nAno ,nMes,lUsaSped)

Local aCoors 	:= FWGetDialogSize( oMainWnd )
Local cCodLan	:= ""
Local cQuery	:= ""
Local dDtApur	:= cTod('01/' + cvaltochar(strzero(nMes,2)) + '/'+ cvaltochar(nAno))
Local dDtIni	:= FirstDay(dDtApur)
Local dDtFim	:= Lastday(dDtApur)
Local lLancAuto	:= .F.  //Indica se lançamento é manual ou automatico
Local lTop		:= .F.
Local oDlgPrinc
Local oHist
Local lCdaVlou	:= CDA->(FieldPos("CDA_VLOUTR")) > 0

#IFDEF TOP
	If TcSrvType() <> "AS/400"
		lTop	:= .T.
	EndIf
#EndIf

//Trecho abaixo somente funcionará para ambientes TOP
//Para as abas de ICMS Próprio, ST e Débitos Especiais somente terá coluna de código de lançamento de MV_USASPED estiver habilitado.
//Para apuração do Difal sempre existe a coluna de código de lançamento
If lTop .And. (lUsaSped .Or. nOpcao == 3)
	//TODO possibilidade de deixar mais visível o código de lançamento

	DbSelectArea("CDA")
	DbSetOrder(1)

	//Verifica o Código de lançamento
	If nOpcao == 1 //ICMS Próprio - aCols5

		cCodLan		:= Alltrim(aCols[oGetDad:oBrowse:nAt][7])
		lLancAuto	:= Empty(Alltrim(aCols[oGetDad:oBrowse:nAt][8]))

	ElseIf nOpcao == 2 //ICMS ST - aCols6

		cCodLan		:= Alltrim(aCols[oGetDad:oBrowse:nAt][7])
		lLancAuto	:= Empty(Alltrim(aCols[oGetDad:oBrowse:nAt][8]))

	ElseIf nOpcao == 3 //DIFAL	- aCols13

		cCodLan		:= Alltrim(aCols[oGetDad:oBrowse:nAt][5])
		lLancAuto	:= Iif ('1' $ aCols[oGetDad:oBrowse:nAt][7] ,.T. ,.F. )

	ElseIF nOpcao == 4 //DEBITOS Especiais - aCols10

		cCodLan		:= Alltrim(aCols[oGetDad:oBrowse:nAt][7])
		lLancAuto	:= .T. // Débitos especiais não possui indicação de código manual ou automático
	EndIf

	If !Empty(cCodLan)
		If lCdaVlou
			cQuery	:= " SELECT CDA.CDA_NUMERO,CDA.CDA_SERIE,CDA.CDA_NUMITE,CDA.CDA_CLIFOR,CDA.CDA_LOJA,CDA.CDA_TPMOVI,CDA.CDA_ESPECI,CDA.CDA_BASE,CDA.CDA_ALIQ,CDA.CDA_VALOR, CDA.CDA_VLOUTR "
		Else
			cQuery	:= " SELECT CDA.CDA_NUMERO,CDA.CDA_SERIE,CDA.CDA_NUMITE,CDA.CDA_CLIFOR,CDA.CDA_LOJA,CDA.CDA_TPMOVI,CDA.CDA_ESPECI,CDA.CDA_BASE,CDA.CDA_ALIQ,CDA.CDA_VALOR "
		Endif	
		cQuery	+= " FROM "+RetSqlName("CDA") + " CDA "
		cQuery	+= " JOIN " + RetSqlName( "SFT" ) + " SFT ON SFT.FT_FILIAL = '" + xFilial("SFT") +  "' AND CDA.CDA_TPMOVI = SFT.FT_TIPOMOV AND CDA.CDA_ESPECI = FT_ESPECIE AND "
		cQuery  += " CDA.CDA_NUMERO = SFT.FT_NFISCAL AND CDA.CDA_SERIE = SFT.FT_SERIE AND CDA.CDA_CLIFOR = SFT.FT_CLIEFOR AND CDA.CDA_LOJA = SFT.FT_LOJA AND"
		cQuery  += " CDA.CDA_NUMITE = SFT.FT_ITEM AND SFT.FT_ENTRADA >= '" + DTos(dDtIni) + "' AND SFT.FT_ENTRADA <= '" + DTos(dDtFim) + "' AND SFT.D_E_L_E_T_ = ' '"
		cQuery	+= " Where CDA.CDA_FILIAL = '" + xFilial("CDA") + "' AND CDA.CDA_CODLAN = '" + cCodLan + "' AND CDA.D_E_L_E_T_ = ' ' "

		//Cria a Dialog
		Define MsDialog oDlgPrinc Title 'Detalhamento Código de Lançamento' From aCoors[1], aCoors[2] To aCoors[3], aCoors[4] Pixel

		//Cria o Browse
		oHist := FWFormBrowse():New()
		oHist:SetDescription( 'Movimentações  do período com código de lançamento : ' + Alltrim(cCodLan))
		oHist:SetAlias(GetNextAlias()) //Passa Alias
		oHist:SetDataQuery(.T.) //Indica que Browse será feito através de Query
		oHist:SetQuery (cQuery) //Envia query para Browse
		oHist:SetColumns(aColumns) //Envia as colunas que deverão ser exibidas
		oHist:SetOwner(oDlg)	//Define Dialog da apuração como Owner
		oHist:DisableDetails()	//Desabilita detalhes do Browse
		oHist:Activate(oDlgPrinc) //Ativa Browse na Dialog criada

		Activate MsDialog oDlgPrinc Center
	EndIf

EndIf

Return


Static Function DblExtApur(oGetDad14,oGetDad15,oDlg,aApurExtra)

Local nPos := 0
Local nCont := 0

lExtApuCon := !lExtApuCon

If lCmpExtra

	If lExtApuCon  .And. "VOLTAR" $aCols15[oGetDad15:oBrowse:nAt][2]
		cCodExtLan	:= ''
		oGetDad14:oBrowse:lDisablePaint := .F.

		oGetDad15:Hide()
		oGetDad14:Show()

		aCols    := aCols14
		aHeader  := aHeader14

		oGetDad15:Refresh(.T.)
		oGetDad15:oBrowse:Refresh(.T.)
		oGetDad14:Refresh(.T.)
		oGetDad14:oBrowse:Refresh(.T.)
		oDlg:Refresh()

	ElseIF  !lExtApuCon .And.  !Empty( Alltrim(aCols14[oGetDad14:oBrowse:nAt][2])) .And. len(Alltrim(aCols14[oGetDad14:oBrowse:nAt][2])) == 8
		cCodExtLan	:= aCols14[oGetDad14:oBrowse:nAt][2]
		aCOLS15	:= {}
		nPos := aScan(aApurExtra,{|x|aLLTRIM(x[1]) == Alltrim(aCols14[oGetDad14:oBrowse:nAt][2])} )
		aCOLS15 := aApurExtra[nPos][8]
		oGetDad14:TudoOk()

		oGetDad15:oBrowse:lDisablePaint := .F.

		oGetDad14:Hide()
		oGetDad15:Show()

		aCols    := aCols15
		aHeader  := aHeader15

		oGetDad14:Refresh(.T.)
		oGetDad14:oBrowse:Refresh(.T.)

		oGetDad15:Refresh(.T.)
		oGetDad15:oBrowse:Refresh(.T.)
		oDlg:Refresh()
		Eval(oGetDad15:obrowse:bDrawSelect)

	Else

		lExtApuCon := !lExtApuCon
	EndIf
EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} DuploClick
Função executada ao efetuar duplo clique nas linhas da apuração do DIFAL

@author Erick G Dias
@since 20/01/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function DuploClick(oGetDad12,oGetDad13,oDlg,aApurDifal,dDtIni)

Local nPos			:= 0
Local nPosDifal	:= 0
lOCAL nApurDifal	:= 0

Local aSubItem	:= {}
Local nA			:= 0
Local nValor		:= 0

lGerDifal		:= !lGerDifal

If lGerDifal .And. "VOLTAR" $aCols13[oGetDad13:oBrowse:nAt][3]
	If Year(dDtIni) < 2017
		aSubItem	:= {'010.00','011.00','016.00','017.00','012.00'}
	Else
		aSubItem	:= {'010.00','011.00','022.00','023.00','012.00'}
	EndIf

	//Atualizar apuração consolidada no aCols12
	nPos		:= aScan(aApurDifal,{|x|x[1] == SubStr(aCols12[oGetDad12:oBrowse:nAt][2],1,2)} )
	nApurDifal	:= aScan(aCOLS12,{|x|SubStr(x[2],1,2) == SubStr(aCols12[oGetDad12:oBrowse:nAt][2],1,2)} )

	For nA:=1 to Len(aSubItem)
		nValor		+= aApurDifal[nPos][2][aScan(aApurDifal[nPos][2],{|x|x[2]==aSubItem[nA]})][4]
	Next

	If nApurDifal > 0 .And. lProcDifal .And. nValor >= 0
		For nA:=1 to Len(aSubItem)
			aCOLS12[nApurDifal,nA+2]	:= aApurDifal[nPos][2][aScan(aApurDifal[nPos][2],{|x|x[2]==aSubItem[nA]})][4]
		Next
	EndIf
	//Soma debito Especial FECP
	If Year(dDtIni) >= 2017
		aCOLS12[nApurDifal,07]	+=	aApurDifal[nPos ][2][aScan(aApurDifal[nPos][2],{|x|x[2] == '024.00'} )][4]
	EndIf

	oGetDad12:oBrowse:lDisablePaint := .F.

	oGetDad13:Hide()
	oGetDad12:Show()

	aCols    := aCols12
	aHeader  := aHeader12

	oGetDad13:Refresh(.T.)
	oGetDad13:oBrowse:Refresh(.T.)
	oGetDad12:Refresh(.T.)
	oGetDad12:oBrowse:Refresh(.T.)

	//Eval(oGetDad12:obrowse:bDrawSelect)
	oDlg:Refresh()
	//oGetDad12:oBrowse:lDisablePaint := .T.


ElseIf !lGerDifal .And. len(Alltrim(aCols12[oGetDad12:oBrowse:nAt][2])) > 0

	aCOLS13	:= {}
	nPos := aScan(aApurDifal,{|x|x[1] == SubStr(aCols12[oGetDad12:oBrowse:nAt][2],1,2)} )
	aCOLS13 :=aApurDifal[nPos][2]

	oGetDad13:oBrowse:lDisablePaint := .F.

	oGetDad12:Hide()
	oGetDad13:Show()

	aCols    := aCols13
	aHeader  := aHeader13

	oGetDad12:Refresh(.T.)
	oGetDad12:oBrowse:Refresh(.T.)


	oGetDad13:Refresh(.T.)
	oGetDad13:oBrowse:Refresh(.T.)
	//oGetDad13:oBrowse:lDisablePaint := .T.
	oDlg:Refresh()
	Eval(oGetDad13:obrowse:bDrawSelect)


Else
	lGerDifal		:= !lGerDifal
EndIf

Return


Static Function AtuaDifal()


Return

//-------------------------------------------------------------------
/*/{Protheus.doc} LoadDifal
Função que adiciona a linha no array da apuração do DIFAL

@author Erick G Dias
@since 20/01/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function LoadDifal(aArray, cLinha, cSubLinha, cDescr, nValor)

Local nPos	:= 0

Default cLinha	:= ''
Default cSubLinha	:= ''
Default cDescr	:= ''
Default nValor	:= 0

If !lProcRef
	Aadd(aArray,Array(08))
Else
	Aadd(aArray,Array(12))
EndIf

nPos	:= Len(aArray)
aArray[nPos,01]	:=	cLinha
aArray[nPos,02]	:=	cSubLinha
aArray[nPos,03]	:=	cDescr
aArray[nPos,04]	:=	nValor
aArray[nPos,05]	:=	""
aArray[nPos,06]	:=	""
aArray[nPos,07]	:=	''
If lProcRef
	aArray[nPos,08]	:=	''
	aArray[nPos,09]	:=	''
	aArray[nPos,10]	:=	''
	aArray[nPos,11]	:=	''
	aArray[nPos,12]	:=	.F.
Else
	aArray[nPos,08]	:=	.F.
EndIf


Return

//-------------------------------------------------------------------
/*/{Protheus.doc} ApurDifal
Função que monta as linhas da tela de apuração do Difal

@author Erick G Dias
@since 20/01/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function ApurDifal(cUf, cDescrUf, aDifal,aCdaDIFAL,cNrLivro,dDtIni,lAutomato,cTestCase)

Local aDifTemp	:= {}

Local nDebDif		:= 0
Local nOutDeb		:= 0
Local nEstCrd		:= 0
Local nSldAntDif	:= 0
Local nCrdDif		:= 0
Local nOutCrd		:= 0
Local nEstDeb		:= 0
Local nSldDev		:= 0
Local nDedDif		:= 0
Local nVlRecDif		:= 0
Local nSldCrdDif	:= 0
Local nDebEsp		:= 0
Local nDebFcp		:= 0
Local nSldAntFcp	:= 0
Local nCrdFcp		:= 0
Local nVlRecFcp		:= 0
Local nSldCrdFcp	:= 0
Local nTotDebDif	:= 0
Local nTotCrdDif	:= 0
local nPosDifal		:= 0
Local nX			:= 0
Local nPos			:= 0
Local nPosl 		:= 0
Local nPosPad 		:= 0
Local cMV_SubTr		:=	IIf(aFindFunc[FF_GETSUBTRIB], GetSubTrib("",.T.), SuperGetMv("MV_SUBTRIB"))
Local aCont	:= {}

//Apuração FECP
Local nTotDebFCP	:= 0
Local nDebDifF		:= 0
Local nOutDebF		:= 0
Local nEstCrdF		:= 0
Local nTotCrdFCP	:= 0
Local nOutCrdF		:= 0
Local nEstDebF		:= 0
Local nSldDevF		:= 0
Local nDedDifF		:= 0
Local nDebEspF		:= 0
Local lAno2017		:= Year(dDtIni) >= 2017
Local cTxtTpLanc	:= ''

Default aCdaDIFAL	:= {}
Default lAutomato	:= .F.
Default cTestCase := "MATA953TestSuite"

If lAutomato
	If aFindFunc[FF_GETPARAUTO]
		aRetAuto	:= GetParAuto(cTestCase)
	EndIf
EndIf

nPosDifal	:= aScan(aDifal,{|x|x[1] == cUf} )

If nPosDifal > 0
	nDebDif	:= aDifal[nPosDifal][2]
	nCrdDif	:= aDifal[nPosDifal][4]
	nDebFcp	:= aDifal[nPosDifal][3]
	nCrdFcp	:= aDifal[nPosDifal][5]
EndIf

//Busca saldo credor do Difal e do FECP de período anterior

If lProcDifal .And. F0I->(DbSeek (xFilial ("F0I")+dTos(firstday(firstday(dDtIni)-1))+cUf+cNrLivro))
	nSldAntDif	:=	F0I->F0I_SPDIF
	nSldAntFcp	:=	F0I->F0I_SPFCP
EndIf

LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp,'', '','                    Apuração DO Difal DETALHADA -  ' + cDescrUf + ' ('+ cUf + ')' ,'')
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '','','                   VALORES DO DIFAL                    ', '')
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '001','001.00', 'Débitos de DIFAL nas Saídas', nDebDif)	//FISXAPUR
LoadDifal(@aDifTemp, '002','002.00', 'TOTAL DE Outros débitos de DIFAL', nOutDeb) //CDA/MANUAL
LoadDifal(@aDifTemp, '003','003.00', 'TOTAL D Estorno de créditos de DIFAL', nEstCrd) //CDA/MANUAL
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '004','004.00', 'Saldo Credor do Período Anterior de DIFAL', nSldAntDif) //TABELA período anterior
LoadDifal(@aDifTemp, '005','005.00', 'Créditos do DIFAL', nCrdDif) //FISXAPUR
LoadDifal(@aDifTemp, '006','006.00', 'TOTAL DE Outros Créditos DIFAL', nOutCrd)	//CDA/MANUAL
LoadDifal(@aDifTemp, '007','007.00', 'TOTAL DE Estornos de Débitos DIFAL', nEstDeb)	 //CDA/MANUAL
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '008','008.00', 'Saldo Devedor do DIFAL (débito menos credito)', nSldDev) //CONTA
LoadDifal(@aDifTemp, '009','009.00', 'TOTAL DE Deduções do DIFAL', nDedDif)	 //CDA/MANUAL
LoadDifal(@aDifTemp, '010','010.00', 'Valor a recolher - DIFAL', nVlRecDif)	 //CONTA
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '011','011.00', 'Saldo Credito do DIFAL (crédito menos débito)',nSldCrdDif) //CONTA
LoadDifal(@aDifTemp, '012','012.00', 'TOTAL DE Débitos especiais DIFAL', nDebEsp) //CDA/MANUAL
LoadDifal(@aDifTemp, '', '', '', '')

LoadDifal(@aDifTemp, '','', ' VALORES DO FECP ', '')
LoadDifal(@aDifTemp, '', '', '', '')
If Year(dDtIni) < 2017
LoadDifal(@aDifTemp, '013','013.00', 'Débitos de FECP nas saídas', nDebFcp) //FISXAPUR
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '014','014.00', 'Saldo Credor do Período Anterior de FECP', nSldAntFcp) //TABELA PERÌODO ANTERIOR
 	LoadDifal(@aDifTemp, '015','015.00', 'Créditos do FECP pelas Entradas', nCrdFcp) //FISXAPUR
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '016','016.00', 'Valor a recolher - FECP (débito menos crédito)', nVlRecFcp) //CONTA
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '017','017.00', 'Saldo Credor do FECP (crédito menos débito)', nSldCrdFcp) //CONTA
Else
	LoadDifal(@aDifTemp, '013','013.00', 'Débitos de FECP nas saídas', nDebFcp) //FISXAPUR
 	LoadDifal(@aDifTemp, '014','014.00', 'Outros Débitos FECP', nOutDebF) //CDA/MANUAL
 	LoadDifal(@aDifTemp, '015','015.00', 'Estorno do Crédito FECP', nEstCrdF) //CDA/MANUAL
 	LoadDifal(@aDifTemp, '', '', '', '')
 	LoadDifal(@aDifTemp, '016','016.00', 'Saldo Credor do Período Anterior de FECP', nSldAntFcp) //TABELA PERÌODO ANTERIOR
 	LoadDifal(@aDifTemp, '017','017.00', 'Créditos do FECP pelas Entradas', nCrdFcp) //FISXAPUR
 	LoadDifal(@aDifTemp, '018','018.00', 'Outros Créditos FECP', nOutCrdF) //CDA/MANUAL
 	LoadDifal(@aDifTemp, '019','019.00', 'Estorno do Débito FECP', nEstDebF) //CDA/MANUAL
 	LoadDifal(@aDifTemp, '', '', '', '')
 	LoadDifal(@aDifTemp, '020','020.00', 'Saldo Devedor FECP', nSldDevF) //CONTA
 	LoadDifal(@aDifTemp, '021','021.00', 'Deduções do FECP', nDedDifF) //CDA/MANUAL
 	LoadDifal(@aDifTemp, '', '', '', '')
 	LoadDifal(@aDifTemp, '022','022.00', 'Valor a recolher - FECP (débito menos crédito)', nVlRecFcp) //CONTA
 	LoadDifal(@aDifTemp, '', '', '', '')
 	LoadDifal(@aDifTemp, '023','023.00', 'Saldo Credor do FECP (crédito menos débito)', nSldCrdFcp) //CONTA
 	LoadDifal(@aDifTemp, '024','024.00', 'Débitos Especiais FECP', nDebEspF) //CDA/MANUAL
EndIf
LoadDifal(@aDifTemp, '', '', '', '')
LoadDifal(@aDifTemp, '','' ,' <<<---VOLTAR', '')
//
aSort(aCdaDifal,,,{|x,y| x[6] < y[6] })
nCdaDifal	:= aScan(aCdaDIFAL,{|x|x[6] == cUf} )
nPosl	:= Len(aDifTemp[1])
If nCdaDifal 	> 0 .And. cUf $ cMV_SubTr
	For nX	:= nCdaDifal to Len(aCdaDIFAL) //O array estará ordenado por UF
		cTxtTpLanc	:= ''
		If aCdaDIFAL[nx][6] == cUf

			If aCdaDIFAL[nX][9]
				//Individualizado
				nPos  		:= 	ascan(aDifTemp,{|x|x[1]==aCdaDIFAL[nX][1] .And. x[5] == aCdaDIFAL[nX][4] .And. x[7] == a953TpLanc("A")+aCdaDIFAL[nX][11] .and. alltrim(x[7]) <> alltrim(a953TpLanc("CF")) }) //procura código da linha
				cTxtTpLanc	:= Iif(alltrim(aCdaDIFAL[nX][11])=="CF",a953TpLanc("CF"),a953TpLanc("A")+aCdaDIFAL[nX][11])
			Else
				//Agrupado - Legado
				nPos  		:= 	ascan(aDifTemp,{|x|x[1]==aCdaDIFAL[nX][1]}) //procura código da linha
				cTxtTpLanc	:= Iif(aCdaDIFAL[nX][7]=='1','1-AUTOMATICO', Iif(aCdaDIFAL[nX][7]=='3','3-CONFIG','2-MANUAL'))
			EndIf

			If ! aCdaDIFAL[nX][9] .Or. ( nPos == 0 .And. aCdaDIFAL[nX][9] ) //Se for agrupado sempre insere a linha, se for individualizado somente adiciona se não encontrou
				nPos  		:= 	ascan(aDifTemp,{|x|x[1]==aCdaDIFAL[nX][1]})
				Aeval(aDifTemp,{|x| If(x[1]==aCdaDIFAL[nX][1] .And. x[nPosl]==.F.,nPos++,)})
				aDifTemp		   		:= 	Asize(aDifTemp,Len(aDifTemp)+1)
				aDifTemp		   		:= 	Ains(aDifTemp,nPos)
				If lProcRef
					aDifTemp[nPos]   		:= {aCdaDIFAL[nX][1], CodSubItem(aCdaDIFAL[nX][1], @aCont,4) ,aCdaDIFAL[nX][2],aCdaDIFAL[nX][3],aCdaDIFAL[nX][4],aCdaDIFAL[nX][12],cTxtTpLanc,aCdaDIFAL[nX][13],aCdaDIFAL[nX][14],aCdaDIFAL[nX][15],aCdaDIFAL[nX][16],.F.}
				Else
					aDifTemp[nPos]   		:= {aCdaDIFAL[nX][1], CodSubItem(aCdaDIFAL[nX][1], @aCont,4) ,aCdaDIFAL[nX][2],aCdaDIFAL[nX][3],aCdaDIFAL[nX][4],aCdaDIFAL[nX][12],cTxtTpLanc,.F.}
				EndIf
			Else
				aDifTemp[nPos][4] := aCdaDIFAL[nX][3]
			EndIf

			Do Case

				Case aCdaDIFAL[nx][1] == '002' ; 	nOutDeb += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '003' ; 	nEstCrd += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '006' ; 	nOutCrd += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '007' ; 	nEstDeb += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '009' ; 	nDedDif += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '012' ; 	nDebEsp += aCdaDIFAL[nx][3]

				Case aCdaDIFAL[nx][1] == '014' .And. lAno2017 ; 	nOutDebF += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '015' .And. lAno2017 ; 	nEstCrdF += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '018' .And. lAno2017 ; 	nOutCrdF += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '019' .And. lAno2017 ; 	nEstDebF += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '021' .And. lAno2017 ; 	nDedDifF += aCdaDIFAL[nx][3]
				Case aCdaDIFAL[nx][1] == '024' .And. lAno2017 ; 	nDebEspF += aCdaDIFAL[nx][3]

			EndCase

		Else
			Exit
		EndIf
	next
EndIf

If lAutomato

	If len(aRetAuto) > 0
		nCdaDifal	:= aScan(aRetAuto,{|x|x[6] == cUf} )
		nPosl	:= Len(aDifTemp[1])

		If nCdaDifal 	> 0 .And. cUf $ cMV_SubTr
			For nX	:= nCdaDifal to Len(aRetAuto) //O array estará ordenado por UF

				If Len(aCdaDIFAL) > 0
					nPosPad := aScan(aCdaDIFAL,{|x|x[8] == aRetAuto[nX][8] } )
				EndIf

				If nPosPad == 0

					If aRetAuto[nx][6] == cUf

						nPos  				:= 	ascan(aDifTemp,{|x|x[1]==aRetAuto[nX][1]}) //procura código da linha
						Aeval(aDifTemp,{|x| If(x[1]==aRetAuto[nX][1] .And. x[nPosl]==.F.,nPos++,)})
						aDifTemp		   		:= 	Asize(aDifTemp,Len(aDifTemp)+1)
						aDifTemp		   		:= 	Ains(aDifTemp,nPos)
						aDifTemp[nPos]   		:= {aRetAuto[nX][1],aRetAuto[nX][8],aRetAuto[nX][2],aRetAuto[nX][3],aRetAuto[nX][4],'',aRetAuto[nX][7] +  Iif(aRetAuto[nX][7]=='1','-AUTOMATICO','-MANUAL'),.F.}

						Do Case

							Case aRetAuto[nx][1] == '002' ; 	nOutDeb += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '003' ; 	nEstCrd += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '006' ; 	nOutCrd += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '007' ; 	nEstDeb += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '009' ; 	nDedDif += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '012' ; 	nDebEsp += aRetAuto[nx][3]

							Case aRetAuto[nx][1] == '014' .And. lAno2017 ; 	nOutDebF += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '015' .And. lAno2017 ; 	nEstCrdF += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '018' .And. lAno2017 ; 	nOutCrdF += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '019' .And. lAno2017 ; 	nEstDebF += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '021' .And. lAno2017 ; 	nDedDifF  += aRetAuto[nx][3]
							Case aRetAuto[nx][1] == '024' .And. lAno2017 ; 	nDebEspF  += aRetAuto[nx][3]
						EndCase

					Else
						Exit
					EndIf
				EndIf
			next
		EndIf
	EndIf

EndIf

//Processa valores do DIFAL
nTotDebDif	:= nDebDif + nOutDeb + nEstCrd
nTotCrdDif	:= nSldAntDif +  nCrdDif + nOutCrd + nEstDeb

nSldDev	:= nTotDebDif - nTotCrdDif
nVlRecDif :=	nSldDev - 	nDedDif

If nSldDev < 0
	nSldCrdDif	+= nSldDev * -1
	nSldCrdDif+= nDedDif
Elseif nVlRecDif < 0
	nSldCrdDif	+= nVlRecDif * -1
EndIf

nSldDev	:= Iif(nSldDev < 0,0, nSldDev)
nVlRecDif	:= Iif(nVlRecDif < 0,0, nVlRecDif)
nSldCrdDif	:= Iif(nSldCrdDif < 0,0, nSldCrdDif)

If (nPos := ascan(aDifTemp,{|x|x[1]=='002'})) > 0
	aDifTemp[nPos][4]	:= nOutDeb
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='003'})) > 0

	aDifTemp[nPos][4]	:= nEstCrd
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='006'})) > 0

	aDifTemp[nPos][4]	:= nOutCrd
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='007'})) > 0

	aDifTemp[nPos][4]	:= nEstDeb
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='008'})) > 0

	aDifTemp[nPos][4]	:= nSldDev
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='009'})) > 0

	aDifTemp[nPos][4]	:= nDedDif
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='010'})) > 0

	aDifTemp[nPos][4]	:= nVlRecDif
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='011'})) > 0

	aDifTemp[nPos][4]	:= nSldCrdDif
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]=='012'})) > 0

	aDifTemp[nPos][4]	:= nDebEsp
EndIf

If Year(dDtIni) >= 2017
	//Ajustes FECP
	//Processa valores do FECP
	nTotDebFCP	:= nDebFcp + nOutDebF + nEstCrdF
	nTotCrdFCP	:= nSldAntFcp +  nCrdFcp + nOutCrdF + nEstDebF

	nSldDevF	:= nTotDebFCP - nTotCrdFCP
	nVlRecFcp	:= nSldDevF - nDedDifF

	//nVlRecFcp	:= nDebFcp - nCrdFcp
	//nSldCrdFcp	:= nCrdFcp - nDebFcp

	If nSldDevF < 0
		nSldCrdFcp += nSldDevF * -1
		nSldCrdFcp += nDedDifF
	Elseif nVlRecFcp < 0
		nSldCrdFcp	+= nVlRecFcp * -1
	EndIf

	nSldDevF	:= Iif(nSldDevF < 0,0, nSldDevF)
	nVlRecFcp	:= Iif(nVlRecFcp < 0,0, nVlRecFcp) // Sld Recolher FECP
	nSldCrdFcp	:= Iif(nSldCrdFcp < 0,0, nSldCrdFcp) // Sld Credor FECP
Else
	//Processa valores do FECP
	nVlRecFcp	:= nDebFcp - nCrdFcp
	nSldCrdFcp	:= nCrdFcp - nDebFcp
	nVlRecFcp	:= Iif(nVlRecFcp < 0,0, nVlRecFcp)
	nSldCrdFcp	:= Iif(nSldCrdFcp < 0,0, nSldCrdFcp)
EndIf


If (nPos := ascan(aDifTemp,{|x|x[1]==IIF(Year(dDtIni) < 2017,'016','022')})) > 0
	aDifTemp[nPos][4]	:= nVlRecFcp
EndIf

If (nPos := ascan(aDifTemp,{|x|x[1]==IIF(Year(dDtIni) < 2017,'017','023')})) > 0

	aDifTemp[nPos][4]	:= nSldCrdFcp
EndIf

If Year(dDtIni) >= 2017
	If (nPos := ascan(aDifTemp,{|x|x[1]=='014'})) > 0
		aDifTemp[nPos][4]	:= nOutDebF
	EndIf

	If (nPos := ascan(aDifTemp,{|x|x[1]=='015'})) > 0
		aDifTemp[nPos][4]	:= nEstCrdF
	EndIf

	If (nPos := ascan(aDifTemp,{|x|x[1]=='018'})) > 0
		aDifTemp[nPos][4]	:= nOutCrdF
	EndIf

	If (nPos := ascan(aDifTemp,{|x|x[1]=='019'})) > 0
		aDifTemp[nPos][4]	:= nEstDebF
	EndIf

	If (nPos := ascan(aDifTemp,{|x|x[1]=='020'})) > 0
		aDifTemp[nPos][4]	:= nSldDevF
	EndIf

	If (nPos := ascan(aDifTemp,{|x|x[1]=='021'})) > 0
		aDifTemp[nPos][4]	:= nDedDifF
	EndIf

	If (nPos := ascan(aDifTemp,{|x|x[1]=='024'})) > 0
		aDifTemp[nPos][4]	:= nDebEspF
	EndIf
EndIf

Return aDifTemp

//-------------------------------------------------------------------
/*/{Protheus.doc} GrvApDifal
Função para efetuar gravação apuração do DIFAL nas tabelas F0I, F0J e F0K.

@author Erick G Dias
@since 20/01/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GrvApDifal(aDifal,dDtIni,cNrLivro, aTitDifal,aGnreDifal,aApurDifal,aCDADifal)

Local nCont			:= 0
Local cChave		:= xFilial('F0I')+ DTOS(dDtIni)+cNrLivro
Local nPosDifal 	:= 0
Local nCdaDifal		:= 0
Local nx			:= 0
Local nA			:= 0
Local aDifalGrv		:= {}
//Local aCPOF0I		:= {'F0I_OUTDBF','F0I_OUTCRF','F0I_DEVFCP','F0I_DEDFCP','F0I_DBESPF','F0I_ESTDBF','F0I_ESTCRF'}
Local aVlF0I		:= {}
Local lCPOF0I		:= aApurSX3[FP_F0I_OUTDBF] .and. aApurSX3[FP_F0I_OUTCRF] .and. aApurSX3[FP_F0I_DEVFCP] .and. aApurSX3[FP_F0I_DEDFCP] .and.;
					   aApurSX3[FP_F0I_DBESPF] .and. aApurSX3[FP_F0I_ESTDBF] .and. aApurSX3[FP_F0I_ESTCRF]

Default aTitDifal	:= {}
Default aGnreDifal	:= {}

dbSelectArea("F0I")
F0I->(DbSetOrder (1))
/*
For nA:=1 to Len(aCPOF0I)
	If F0I->(FieldPos(aCPOF0I[nA])) == 0
		lCPOF0I :=  .F.
		Loop
	EndIf
Next
*/
dbSelectArea("F0K")
F0K->(DbSetOrder (1))

For nCont := 1 to Len(aDifal)

	nPosDifal := aScan(aApurDifal,{|x|x[1] == aDifal[nCont][1]} )
	If nPosDifal > 0
		aDifalGrv	:= aApurDifal[nPosDifal][2]
		aVlF0I := RetVlrF0I(aDifalGrv)
		If aVlF0I[1]
		 	If F0I->(DbSeek (xFilial ("F0I")+dTos(dDtIni)+aDifal[nCOnt][1]+cNrLivro))
		 		RecLock("F0I",.F.)
		 	Else
		 		RecLock("F0I",.T.)
				F0I->F0I_FILIAL		:=	xFilial("F0I")
				F0I->F0I_PER		:=	dDtIni
				F0I->F0I_LIVRO		:= cNrLivro
				F0I->F0I_UF			:= aDifal[nCOnt][1]
		 	EndIf

			F0I->F0I_DEBDIF		:= aVlF0I[2][1]
			F0I->F0I_OUTDEB		:= aVlF0I[2][2]
			F0I->F0I_ESTCRD		:= aVlF0I[2][3]
			F0I->F0I_SADIF		:= aVlF0I[2][4]
			F0I->F0I_CRDDIF		:= aVlF0I[2][5]
			F0I->F0I_OUTCRE		:= aVlF0I[2][6]
			F0I->F0I_ESTDEB		:= aVlF0I[2][7]
			F0I->F0I_DEVDIF		:= aVlF0I[2][8]
			F0I->F0I_DEDDIF		:= aVlF0I[2][9]
			F0I->F0I_DIFREC		:= aVlF0I[2][10]
			F0I->F0I_SPDIF		:= aVlF0I[2][11]
			F0I->F0I_DEBESP		:= aVlF0I[2][12]

			//Tratamento para manter a integridade de apurações antes da mudança de layout do spedfiscal
			If Year(dDtIni) < 2017
			F0I->F0I_DEBFCP		:= aVlF0I[2][13]
			F0I->F0I_SAFCP		:= aVlF0I[2][14]
			F0I->F0I_CRDFCP		:= aVlF0I[2][15]
			F0I->F0I_FCPREC		:= aVlF0I[2][16]
			F0I->F0I_SPFCP		:= aVlF0I[2][17]
			Else
				F0I->F0I_DEBFCP		:= aVlF0I[2][18]
				If lCPOF0I
					F0I->F0I_OUTDBF		:= aVlF0I[2][19]
					F0I->F0I_ESTCRF		:= aVlF0I[2][20]
				EndIf
				F0I->F0I_SAFCP		:= aVlF0I[2][21]
				F0I->F0I_CRDFCP		:= aVlF0I[2][22]
				If lCPOF0I
					F0I->F0I_OUTCRF		:= aVlF0I[2][23]
					F0I->F0I_ESTDBF		:= aVlF0I[2][24]
					F0I->F0I_DEVFCP		:= aVlF0I[2][25]
					F0I->F0I_DEDFCP		:= aVlF0I[2][26]
				EndIf
				F0I->F0I_FCPREC		:= aVlF0I[2][27]
				F0I->F0I_SPFCP		:= aVlF0I[2][28]
				If lCPOF0I
					F0I->F0I_DBESPF		:= aVlF0I[2][29]
				EndIf
			EndIf

			MsUnlock()
			F0I->(FKCommit())

			GravaF0K('002','002.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('003','003.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('006','006.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('007','007.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('009','009.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('012','012.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])

			//FECP
			GravaF0K('014','014.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('015','015.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('018','018.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('019','019.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('021','021.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
			GravaF0K('024','024.00',aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,aDifal[nCOnt][1])
		EndIf
	EndIf

Next nCont

dbSelectArea("F0J")
F0J->(DbSetOrder (2))

For nCont	:= 1 to len(aGnreDifal)

	//Irá gravar os títulos e Guias Geradas da apuração do Difal
	//F0J_FILIAL+DTOS(F0J_PER)+F0J_LIVRO+F0J_UF+F0J_GNRE
	If F0J->(DbSeek (xFilial ("F0J")+dTos(dDtIni)+cNrLivro+aGnreDifal[nCOnt][5]+aGnreDifal[nCOnt][1]))
		RecLock("F0J",.F.)
	Else
		RecLock("F0J",.T.)
		F0J->F0J_FILIAL		:=	xFilial("F0J")
		F0J->F0J_PER			:=	dDtIni
		F0J->F0J_LIVRO		:= cNrLivro
		F0J->F0J_UF			:= aGnreDifal[nCOnt][5]
		F0J->F0J_GNRE			:= aGnreDifal[nCOnt][1]
	EndIf
	F0J->F0J_DTVENC			:= aGnreDifal[nCOnt][2]
	F0J->F0J_VALOR			:= aGnreDifal[nCOnt][3]

	If 'DIFAL' $ aGnreDifal[nCOnt][7]
		F0J->F0J_TIPO	:=  '1'
	ElseIF 'FECP' $ aGnreDifal[nCOnt][7]
		F0J->F0J_TIPO	:=  '2'
	ElseIF 'DEBITO ESPECIAL' $ aGnreDifal[nCOnt][7]
		F0J->F0J_TIPO	:=  '3'
	EndIf

	MsUnlock()
	F0J->(FKCommit())

Next

//Realiza a gravação dos títulos gerados na tabela F0J.
dbSelectArea("F0J")
F0J->(DbSetOrder (1))
For nCont	:= 1 to len(aTitDifal)

	//F0J_FILIAL+DTOS(F0J_PER)+F0J_LIVRO+F0J_UF+F0J_TPTIT+F0J_NUMTIT+F0J_PRFTIT
	If F0J->(DbSeek (xFilial("F0J")+dTos(dDtIni)+cNrLivro+aTitDifal[nCOnt][8]+aTitDifal[nCOnt][4]+aTitDifal[nCOnt][2]+aTitDifal[nCOnt][1]))
		RecLock("F0J",.F.)
	Else
		RecLock("F0J",.T.)
		F0J->F0J_FILIAL		:=	xFilial("F0J")
		F0J->F0J_PER			:=	dDtIni
		F0J->F0J_LIVRO		:= cNrLivro
		F0J->F0J_UF			:= aTitDifal[nCOnt][8]
		F0J->F0J_PRFTIT		:= aTitDifal[nCOnt][1]
		F0J->F0J_NUMTIT		:= aTitDifal[nCOnt][2]
		F0J->F0J_PARC			:= aTitDifal[nCOnt][3]
		F0J->F0J_TPTIT		:= aTitDifal[nCOnt][4]
		F0J->F0J_FORN			:= aTitDifal[nCOnt][5]
		F0J->F0J_LOJA			:= aTitDifal[nCOnt][6]
	EndIf

	F0J->F0J_VALOR			:= aTitDifal[nCOnt][9]
	F0J->F0J_DTVENC			:= aTitDifal[nCOnt][10]

	If 'DIFAL' $ aTitDifal[nCOnt][7]
		F0J->F0J_TIPO	:=  '4'
	ElseIF 'FECP' $ aTitDifal[nCOnt][7]
		F0J->F0J_TIPO	:=  '5'
	ElseIF 'DEBITO ESPECIAL' $ aTitDifal[nCOnt][7]
		F0J->F0J_TIPO	:=  '6'
	EndIf

	MsUnlock()
	F0J->(FKCommit())

Next

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} GravaF0K
Função para efetuar gravação na tabela F0K

@author Erick G Dias
@since 20/01/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GravaF0K(cLinha,cSubItem,aDifalGrv,aApurDifal,nPosDifal,dDtIni,cNrLivro,cUf)

Local nX	:= 0
Local cF0KTpLanc	:= ''
Local nTamArray	:= 0

If !lProcRef
	nTamArray	:= 8
Else
	nTamArray	:= 12
EndIf


//Rodar códigos de lançamentos do próprio aApuirDifal
nX	:= aScan(aDifalGrv,{|x|x[2] == cSubItem} )
For nX	:= nX+1 to len(aApurDifal[nPosDifal][2])
	//verificar se linha não está deletada

	If !aApurDifal[nPosDifal][2][nx][nTamArray]
		If aApurDifal[nPosDifal][2][nx][1] == cLinha
			//F0K_FILIAL+DTOS(F0K_PER)+F0K_LIVRO+F0K_UF+F0K_CODAPU+F0K_DESCR
			cF0KTpLanc	:= ''

			If substr(aApurDifal[nPosDifal][2][nx][7],1,2) == 'AI'
				cF0KTpLanc	:= 'AI' +  alltrim(SubStr(aApurDifal[nPosDifal][2][nx][7],500))
			Else
				cF0KTpLanc	:= PADR(aApurDifal[nPosDifal][2][nx][7],TamSx3("F0K_TPLANC")[1])
			EndIf

			If F0K->(DbSeek (xFilial ("F0K")+dTos(dDtIni)+cNrLivro+cUf+PADR(aApurDifal[nPosDifal][2][nx][5],TamSx3("F0K_CODAPU")[1]) + cF0KTpLanc + PADR(aApurDifal[nPosDifal][2][nx][3],TamSx3("F0K_DESCR")[1]) ))
				RecLock("F0K",.F.)
			Else
				RecLock("F0K",.T.)
				F0K->F0K_FILIAL		:=	xFilial("F0K")
				F0K->F0K_PER			:=	dDtIni
				F0K->F0K_LIVRO		:= cNrLivro
				F0K->F0K_UF			:= cUf
				F0K->F0K_CODAPU		:= aApurDifal[nPosDifal][2][nx][5]
				F0K->F0K_GNRE			:= aApurDifal[nPosDifal][2][nx][6]
				F0K->F0K_DESCR		:= aApurDifal[nPosDifal][2][nx][3]
				F0K->F0K_SUBITE		:= aApurDifal[nPosDifal][2][nx][2]
				F0K->F0K_TPLANC		:= cF0KTpLanc
				If lProcRef
					F0K->F0K_PROCES		:= aApurDifal[nPosDifal][2][nx][8]
					F0K->F0K_PROCTP		:= aApurDifal[nPosDifal][2][nx][9]
					F0K->F0K_PROIND		:= aApurDifal[nPosDifal][2][nx][10]
					F0K->F0K_ITPROC		:= aApurDifal[nPosDifal][2][nx][11]
				EndIf

			EndIf

			F0K->F0K_VALOR		+= aApurDifal[nPosDifal][2][nx][4]

			MsUnlock()
			F0K->(FKCommit())

		Else
			Exit
		EndIf
	EndIf
Next nx

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} GravaCDV
Função para efetuar gravação na tabela CDV

@author Marsaulo D Souza
@since 04/08/2017
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function GravaCDV(aApurCDV,dDtIni,cNrLivro)

Local nX	:= 0
Local cPeriodo	:=	SubStr(DtoS(dDtIni),1,6)
Local lCDVID	:= aApurSX3[FP_CDV_ID]

DbSelectArea("CDV")
CDV->(DbSetOrder(3))
For nX	:= nX+1 to len(aApurCDV)


	If !(CDV->(dbSeek(xFilial("CDV")+cPeriodo+aApurCDV[nx][2]+aApurCDV[nx][1])))

		RecLock("CDV",.T.)
		CDV->CDV_FILIAL		:=	xFilial("CDV")
		CDV->CDV_PERIOD		:=	cPeriodo
		CDV->CDV_LIVRO		:=	cNrLivro
		CDV->CDV_CFOP		:=	aApurCDV[nx][1]
		CDV->CDV_CODAJU		:=	aApurCDV[nx][2]
		CDV->CDV_DESCR		:=	If( aFindFunc[FF_GETDESCCDY], getDescCDY( aApurCDV[nx][2] ) , aApurCDV[nx][3] )
		CDV->CDV_VALOR		:=	aApurCDV[nx][4]
		CDV->CDV_AUTO		:=	aApurCDV[nx][5]
		If lCDVID
			CDV->CDV_ID 	:= FWUUID("FISA140")
		Endif
		MsUnlock()
		CDV->(FKCommit())
	EndIf
Next nx
Return


Function A953Legenda()
Local aLegenda := {}

Aadd(aLegenda, {"br_amarelo",	'Estado de Origem'})
Aadd(aLegenda, {"br_vermelho",	'Estado de Destino sem Inscrição Estadual'})
Aadd(aLegenda, {"br_verde",		'Estado de Destino Com Inscrição Estadual'})
Aadd(aLegenda, {"br_azul",		'Extra Apuração sem Inconsistência'})
Aadd(aLegenda, {"br_preto",		'Extra Apuração com Inconsistência'})

BrwLegenda ('Apuração de ICMS', 'Legenda', aLegenda) //"Legenda"

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} AtuAcols
Atualiza as colunas com informações passadas pelo caso de testes

@author fabio.santana
@since 20/01/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function AtuAcols(aColsPad,nPosPad,aColsAuto,nPosAuto,lProcRef)

//aCols Padrão
Default aColsPad 	:= {}
//Array passado pelo CT
Default aColsAuto	:= {}

//Registro posicionado no laço do aColsAuto
Default nPosAuto 	:= 0
//nPos da linha ja existente, para receber o update passado pelo aColsAuto
Default nPosPad 	:= 0
DEfault lProcRef    := .F.

//Se nao encontrou os dados no acols padrão, faço uma inclusão manual
If nPosPad == 0
	If aColsAuto[nPosAuto,10] == SubStr(a953TpLanc("M"),1,1)
		If lProcRef
			Aadd(aColsPad,{aColsAuto[nPosAuto][3],aColsAuto[nPosAuto][6],aColsAuto[nPosAuto][4],aColsAuto[nPosAuto][5],aColsAuto[nPosAuto][7],aColsAuto[nPosAuto][8],aColsAuto[nPosAuto][9],aColsAuto[nPosAuto][10],aColsAuto[nPosAuto][11],aColsAuto[nPosAuto][12],aColsAuto[nPosAuto][13],aColsAuto[nPosAuto][14],.F.}) //"Texto do usuario
		Else
			Aadd(aColsPad,{aColsAuto[nPosAuto][3],aColsAuto[nPosAuto][6],aColsAuto[nPosAuto][4],aColsAuto[nPosAuto][5],aColsAuto[nPosAuto][7],aColsAuto[nPosAuto][8],aColsAuto[nPosAuto][9],aColsAuto[nPosAuto][10],.F.}) //"Texto do usuario
		EndIf
	Else
		Aadd(aColsPad,{aColsAuto[nPosAuto][3],aColsAuto[nPosAuto][6],aColsAuto[nPosAuto][4],aColsAuto[nPosAuto][5],aColsAuto[nPosAuto][7],aColsAuto[nPosAuto][8],aColsAuto[nPosAuto][9],.F.}) //"Texto do usuario
	EndIf
Else
	//Somente atualizo os dados se forem diferentes dos ja gravados
	//Codigo
	If AllTrim(aColsPad[nPosPad,1]) <> AllTrim(aColsAuto[nPosAuto][3])
		aColsPad[nPosPad,1] := aColsAuto[nPosAuto][3]
	EndIf

	//Sub Item
	If AllTrim(aColsPad[nPosPad,2]) <> AllTrim(aColsAuto[nPosAuto][11])
		aColsPad[nPosPad,2] := aColsAuto[nPosAuto][11]
	EndIf

	//Descrição
	If AllTrim(aColsPad[nPosPad,3]) <> AllTrim(aColsAuto[nPosAuto][4])
		aColsPad[nPosPad,3] := aColsAuto[nPosAuto][4]
	EndIf

	//Valor
	If AllTrim(aColsPad[nPosPad,4]) <> AllTrim(aColsAuto[nPosAuto][5])
		aColsPad[nPosPad,4] := aColsAuto[nPosAuto][5]
	EndIf

	//GNRE
	If AllTrim(aColsPad[nPosPad,5]) <> AllTrim(aColsAuto[nPosAuto][7])
		aColsPad[nPosPad,5] := aColsAuto[nPosAuto][7]
	EndIf

	//Classe de vencimento
	If AllTrim(aColsPad[nPosPad,6]) <> AllTrim(aColsAuto[nPosAuto][8])
		aColsPad[nPosPad,6] := aColsAuto[nPosAuto][8]
	EndIf

	//Codigo de Lançamento
	If AllTrim(aColsPad[nPosPad,7]) <> AllTrim(aColsAuto[nPosAuto][12])
		aColsPad[nPosPad,7] := aColsAuto[nPosAuto][12]
	EndIf

	//Em alguns aCols será necessário passar M na decima posição no array
	If aColsAuto[nPosAuto,10] == SubStr(a953TpLanc("M"),1,1)

		If AllTrim(aColsPad[nPosPad,8]) := AllTrim(aColsAuto[nPosAuto][10])
			aColsPad[nPosPad,8] := aColsAuto[nPosAuto][10]
		EndIf
		aColsPad[nPosPad,9] := .F.

	Else
		aColsPad[nPosPad,8] := .F.
	EndIf

EndIf

Return aColsPad

Static Function EstruCLan()

Local aStructCDA 	:= CDA->(DbStruct())
Local aColumns     	:= {}
Local nX         	:= 0
Local nPos          := 0
Local aCamposCDA    := {}
Local lCdaVlou	:= CDA->(FieldPos("CDA_VLOUTR")) > 0
If lCdaVlou
	aCamposCDA    := {"CDA_NUMERO","CDA_SERIE","CDA_NUMITE", "CDA_CLIFOR", "CDA_LOJA", "CDA_TPMOVI", "CDA_ESPECI", "CDA_BASE","CDA_ALIQ","CDA_VALOR", "CDA_VLOUTR"}
Else
	aCamposCDA    := {"CDA_NUMERO","CDA_SERIE","CDA_NUMITE", "CDA_CLIFOR", "CDA_LOJA", "CDA_TPMOVI", "CDA_ESPECI", "CDA_BASE","CDA_ALIQ","CDA_VALOR"}
Endif

For nX:=1 To Len(aCamposCDA)
    If (nPos:=Ascan(aStructCDA,{|x| x[1]==aCamposCDA[nX]}))>0
		Aadd(aColumns,FWBrwColumn():New())
        aColumns[Len(aColumns)]:SetData( &("{||"+aStructCDA[nPos][1]+"}") )
        aColumns[Len(aColumns)]:SetTitle(RetTitle(aStructCDA[nPos][1]))
        aColumns[Len(aColumns)]:SetSize(aStructCDA[nPos][3])
        aColumns[Len(aColumns)]:SetDecimal(aStructCDA[nPos][4])
        aColumns[Len(aColumns)]:SetPicture(PesqPict("CDA",aStructCDA[nPos][1]))
        If aStructCDA[nPos][2]=="N"
        	aColumns[Len(aColumns)]:SetAlign(2)
        EndIf
    EndIf
Next nX

Return(aColumns)

Function a953TpLanc(cTpLanc)

	Local cRet := ""

	Default cTpLanc := ""

	If cTpLanc == "A" .And. nTamTPLANC > 1

		//Sempre que primeiro dígito do CDH_TPLANC for A, significa que código é individualizado automático
		cRet := "AI - Automatico Individualizado" + Space(500)

	ElseIf cTpLanc == 'M'

		cRet := "M"

		If nTamTPLANC > 1
			cRet += "  - Manual" + Space(500)
		EndIf

	ElseIf cTpLanc == 'AG' .And. nTamTPLANC > 1

		cRet := "A  - Automático Agrupado" + Space(500)

	ElseIf cTpLanc == 'CA' .And. nTamTPLANC > 1

		cRet := "CA - Crédito Acumulado" + Space(500)
	ElseIf cTpLanc == 'CF' .And. nTamTPLANC > 1

		cRet := "CF - Config Tributo" + Space(500)

	EndIf

Return cRet


Static Function GnreSepar(aGnreSepar,aRecTit,aGNREX,lTitulo,cImposto,cImp,cLcPadTit,dDtIni,dDtFim,dDtVenc,nMoedTit,lGuiaRec,nMes,nAno,lContab,aGNRE,lAutomato,aRetAuto,lUsaSped,aTitCDH,aTitulo,cRDEBESP,cTpTitCdh)
Local nRecTit	:= Len(aRecTit)
Local lConfTit	:= .F.
Local nPosGNREX	:= 0
Local nCont	    := 0
Local cNumero	:= Space(TamSx3("F6_NUMERO")[1])
Local cOrgArrec := Space(30)
Local lPEGDEBESP:= aExistBloc[PE_GDEBESP]


For nCont	:= 1 to Len(aGnreSepar)


	nPosGNREX	:=	aScan(aGNREX,{|aX| Len(aX)>=8 .And. aX[7]==Padr(cRDEBESP,8)+padr(aGnreSepar[ nCont ][1],10) .and. iif(Len(aX)>=9,aX[9],.T.)})

	IF lPEGDEBESP .and. nPosGNREX > 0
		aAdd(aGNREX[nPosGNREX],.F.)  // flag não refazer novamente para este código
	ENDIF

	nSolicFlg := FGerTit(	lTitulo,;
				aGnreSepar[ nCont ][2],;
				cImposto,;
				cImp,;
				cLcPadTit,;
				dDtIni,;
				dDtFim,;
				dDtVenc,;
				nMoedTit,;
				lGuiaRec,;
				nMes,;
				nAno,;
				IIf(cTpTitCdh <> "ST",aGnreSepar[ nCont ][2],0 ),;
				IIf(cTpTitCdh == "ST",aGnreSepar[ nCont ][2],0 ),;
				"MATA953",;
				lContab,;
				@cNumero,;
				@aGNRE,;
				,;
				,;//20
				,;
				,;
				,;
				,;
				Iif(nPosGNREX>0,aGNREX[nPosGNREX,1],Nil),;
				@aRecTit,;
				@lConfTit,;
				,;
				,;
				,;//30
		  		Padr(cRDEBESP,8)+padr(aGnreSepar[ nCont ][1],10),;
				,;
			  	,;
			  	,;
			  	,;
			  	,;
			  	,;
			  	,;
			  	,;
			  	,;//40
			  	,;
			  	,;
			  	,;
			  	,;
			  	,;
			  	lAutomato,;//46
			  	aRetAuto,;//47
			  	,;//48
			  	"Valores Ref. Código:"+aGnreSepar[ nCont ][1])



	If nRecTit <> Len(aRecTit)
		aRecTit[Len(aRecTit)][02] := STR0248 //"Apuração do ICMS - Debitos Especiais"
		If lUsaSped
			dbSelectArea("SE2")
			MsGoto(aRecTit[Len(aRecTit)][01])
			Aadd(aTitCDH,{SE2->E2_PREFIXO,SE2->E2_NUM,SE2->E2_PARCELA,SE2->E2_TIPO,SE2->E2_FORNECE,SE2->E2_LOJA,cTpTitCdh,STR0248})
		EndIf
	EndIf
	If lTitulo .And. aGnreSepar[ nCont ][2]>0 .And. lConfTit
		Aadd(aTitulo,{"TIT",cNumero+" "+Dtoc(dDtVenc)+" "+cOrgArrec,aGnreSepar[ nCont ][2]})
	EndIf
Next nCont

Return


Static Function ChkGnreSep(cCodLan)

Local lRet	:= .F.

If Len(Alltrim(cCodLan)) == 8
	lRet	:= CDO->(DbSeek(xFilial("CDO")+Alltrim(cCodLan))) .And. CDO->CDO_GNRESE == '1'
ElseIf Len(Alltrim(cCodLan)) == 10
	lRet	:= CC6->(DbSeek(xFilial("CC6")+Alltrim(cCodLan))) .And. CC6->CC6_GNRESE == '1'
EndIf

Return lRet


Function ChkGnreInd(cCodLan)

Local lRet	:= .F.

If Len(Alltrim(cCodLan)) == 8


	lRet	:= CDO->(DbSeek(xFilial("CDO")+Alltrim(cCodLan))) .And. CDO->CDO_AGRUPA == '2'

ElseIf Len(Alltrim(cCodLan)) == 10


	lRet	:= CC6->(DbSeek(xFilial("CC6")+Alltrim(cCodLan))) .And. CC6->CC6_AGRUPA == '2'

EndIf

Return lRet

Function GetDescLan(cCodLan)

Local cDesc	:= ''

If Len(Alltrim(cCodLan)) == 8 .And. CDO->(DbSeek(xFilial("CDO")+Alltrim(cCodLan)))
	cDesc	:= CDO->CDO_DESCR
ElseIf Len(Alltrim(cCodLan)) == 10 .And. CC6->(DbSeek(xFilial("CC6")+Alltrim(cCodLan)))
	cDesc	:= CC6->CC6_DESCR
ElseIf Len(Alltrim(cCodLan)) == 4 .And. CE7->(DbSeek(xFilial("CE7")+Alltrim(cCodLan)))
	cDesc	:= CE7->CE7_DESCR
EndIf


Return cDesc


Static Function CodSubItem(cLinha, aCont, nApur)

Local nPos	:= 0
Local cRet	:= ''
Local nStrzero	:= 0

nPos	:=	aScan(aCont,{|aX| aX[1] == nApur .And. Alltrim(aX[2]) == cLinha})

If nPos == 0

	Aadd(aCont, {})
	nPos	:=	Len (aCont)

	aAdd (aCont[nPos], nApur)
	aAdd (aCont[nPos], cLinha)
	aAdd (aCont[nPos], 1)
Else
	aCont[nPos][3] ++
EndIf

If aCont[nPos][3] <10
	nStrzero	:= 2
Else
	nStrzero	:= len(alltrim(str(aCont[nPos][3])))
EndIf

cRet	:= cLinha + '.'+ Strzero(aCont[nPos][3],nStrzero)

Return PADR(cRet,10)

/*/{Protheus.doc} ExtraApur
	(Função para montar a aba extra apuração)

	@type Static Function
	@author ?????????
	@since ??/??/????

	@param aCDAExtra, array,
	@param aApurExtra, array,
	@param aCols14, array,
	@param aCols15, array,
	@param dDtIni, data, inicial
	@param aEApCe6Ce5, array, contém as informações da extra apuração (tabela CE6 e CE5)

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function ExtraApur(aCDAExtra,aApurExtra,aCols14,aCols15,dDtIni,aEApCe6Ce5)

	Local nCount1 := 0
	Local nCount2 := 0
	Local nPosicao1 := 0
	Local nPosicao2 := 0
	Local nPosicao3 := 0

	Local aApurDet := {}
	Local aExtraDet := {}

	Local cLinha := ""
	Local cDescri := ""

	Local lCE5DESCRI := .F.

	Default aCDAExtra := {}
	Default aApurExtra := {}
	Default aCols14 := {}
	Default aCols15 := {}
	Default aEApCe6Ce5 := {}

	Default dDtIni := CToD("")

	DbSelectArea("CE7")		// TIPO DE UTILIZ. CREDITO
	CE7->(DbSetOrder(1))	// CE7_FILIAL+CE7_CODUTI

	lCE5DESCRI := aApurSX3[FP_CE5_DESCRI]

	// Busca saldo credor de períoro anterior e atualiza o array aApurExtra
	SldExtAnt(@aApurExtra, dDtIni)

	// Ordena o array
	ASort(aCDAExtra,,,{|x,y| x[1] < y[1] })

	For nCount1 := 1 to Len(aApurExtra)

		aApurDet := AdExtraDet(aApurExtra[nCount1][1],aCDAExtra, aApurExtra[nCount1])

		Aadd(aCols14,{Iif(aApurDet[5] >=0 ,'br_azul' ,'br_preto' )  ,aApurExtra[nCount1][1], GetDescLan(aApurExtra[nCount1][1]) ,aApurDet[1],aApurDet[2],aApurDet[3],aApurDet[4],aApurDet[5],.F.})
		//Agora deverá adicionar no aApurExtra o resultado do aCDAExtra com apuração detalhada já pronta

		aApurExtra[nCount1][2] := GetDescLan(alltrim(aApurExtra[nCount1][1]))
		aApurExtra[nCount1][3] := aApurDet[1]
		aApurExtra[nCount1][4] := aApurDet[2]
		aApurExtra[nCount1][5] := aApurDet[3]
		aApurExtra[nCount1][6] := aApurDet[4]
		aApurExtra[nCount1][7] := aApurDet[5]
		aApurExtra[nCount1][8] := aApurDet[6]

	Next

	// Percorre o array que foi preenchido quando é refaz
	For nCount1 := 1 To Len(aEApCe6Ce5)
		// Verifica se o codigo de lançamento já está no array - CE6
		nPosicao1 := Ascan(aCols14,{|x| AllTrim(x[2]) == AllTrim(aEApCe6Ce5[nCount1][2]) })

		// Se não encontrou
		If Empty(nPosicao1)
			Aadd(aCols14,Array(09))
			nPosicao1 := Len(aCols14)

			aCols14[nPosicao1][01] := ""
			aCols14[nPosicao1][02] := aEApCe6Ce5[nCount1][2]
			aCols14[nPosicao1][03] := Posicione("CDO",1,FWxFilial("CDO")+aEApCe6Ce5[nCount1][2],"CDO_DESCR")
			aCols14[nPosicao1][04] := 0
			aCols14[nPosicao1][05] := 0
			aCols14[nPosicao1][06] := 0
			aCols14[nPosicao1][07] := 0
			aCols14[nPosicao1][08] := 0
			aCols14[nPosicao1][09] := .F.
		EndIf

		aCols14[nPosicao1][05] += aEApCe6Ce5[nCount1][3]	// Total crédito apropriado no período
		aCols14[nPosicao1][06] += aEApCe6Ce5[nCount1][4]	// Total créditos recebido por transferência
		aCols14[nPosicao1][07] += aEApCe6Ce5[nCount1][5]	// Total créditos utilizados no período

		// Saldo de crédito fiscal acumulado a transportar para o período seguinte
		aCols14[nPosicao1][08] := aCols14[nPosicao1][04] + aCols14[nPosicao1][05] + aCols14[nPosicao1][06] - aCols14[nPosicao1][07]

		// Legenda - br_azul = Consistente | br_preto = Inconsistente
		aCols14[nPosicao1][01] := IIf(aCols14[nPosicao1][08] >= 0,"br_azul","br_preto")

		// Percorre o array da CE5
		For nCount2 := 1 To Len(aEApCe6Ce5[nCount1][7])
			nPosicao2 := Ascan(aApurExtra,{|x| AllTrim(x[1]) == AllTrim(aEApCe6Ce5[nCount1][2]) })

			If Empty(nPosicao2)
				//Cria nova apuração detalhada
				aExtraDet := AdExtraDet(aEApCe6Ce5[nCount1][2])

				//Adiciona o código no aApurExtra
				Aadd(aApurExtra,Array(8))
				nPosicao2 := Len(aApurExtra)

				aApurExtra[nPosicao2][01] := aEApCe6Ce5[nCount1][02]
				aApurExtra[nPosicao2][02] := aCols14[nPosicao1][03]
				aApurExtra[nPosicao2][03] := aCols14[nPosicao1][04]
				aApurExtra[nPosicao2][08] := aExtraDet[06]
			EndIf

			aApurExtra[nPosicao2][04] := aCols14[nPosicao1][05]
			aApurExtra[nPosicao2][05] := aCols14[nPosicao1][06]
			aApurExtra[nPosicao2][06] := aCols14[nPosicao1][07]
			aApurExtra[nPosicao2][07] := aCols14[nPosicao1][08]

			If !Empty(aEApCe6Ce5[nCount1][7][nCount2][7])
				// CE5_TPMOV
				cLinha := DefLinExtra(aEApCe6Ce5[nCount1][7][nCount2][7])

				nPosicao3 := Ascan(aApurExtra[nPosicao2][8],{|x| AllTrim(x[1]) == cLinha })

				If !Empty(nPosicao3)
					ASize(aApurExtra[nPosicao2][8],Len(aApurExtra[nPosicao2][8])+1)
					AIns(aApurExtra[nPosicao2][8],nPosicao3+1)

					cDescri := Space(30)

					If lCE5DESCRI
						cDescri := aEApCe6Ce5[nCount1][7][nCount2][13]
					EndIf

					aApurExtra[nPosicao2][8][nPosicao3+1] := Array(Len(aHeader15)+1)
					aApurExtra[nPosicao2][8][nPosicao3+1][1] := aApurExtra[nPosicao2][8][nPosicao3][1]
					aApurExtra[nPosicao2][8][nPosicao3+1][2] := cDescri
					aApurExtra[nPosicao2][8][nPosicao3+1][3] := aEApCe6Ce5[nCount1][7][nCount2][1]								// CE5_CODUTI
					aApurExtra[nPosicao2][8][nPosicao3+1][4] := aEApCe6Ce5[nCount1][7][nCount2][2]								// CE5_VALOR
					aApurExtra[nPosicao2][8][nPosicao3+1][5] := aEApCe6Ce5[nCount1][7][nCount2][3]								// CE5_NUMDOC
					aApurExtra[nPosicao2][8][nPosicao3+1][6] := aEApCe6Ce5[nCount1][7][nCount2][4]								// CE5_CHVNFE
					aApurExtra[nPosicao2][8][nPosicao3+1][7] := aEApCe6Ce5[nCount1][7][nCount2][5]								// CE5_CODCDH
					aApurExtra[nPosicao2][8][nPosicao3+1][8] := a953TpLanc(AllTrim(SubString(aEApCe6Ce5[nCount1][7][nCount2][6],1,2)))	// CE5_TPLANC
					aApurExtra[nPosicao2][8][nPosicao3+1][Len(aHeader15)+1] := .F.

					// Totalizador
					aApurExtra[nPosicao2][8][nPosicao3][4] += aEApCe6Ce5[nCount1][7][nCount2][2]	// CE5_VALOR
				EndIf
			EndIf
		Next
	Next

	// Ordena pelo codigo de lançamento
	ASort(aCols14,,,{|x,y| x[2] < y[2] })

	// Ordena pelo codigo de lançamento
	ASort(aApurExtra,,,{|x,y| x[1] < y[1] })

	// Adiciona um registro no array aCols14
	fAddArray(@aCols14,"aCols14",1,.T.)

	// Adiciona um registro no array aCols14
	fAddArray(@aCols14,"aCols14")

	// Adiciona um registro no array aCols15
	fAddArray(@aCols15,"aCols15")

Return Nil

Static Function AdExtraDet(cCod,aCDAExtra,aApurExtra)

Local aRet			:= {}
Local nCont			:= 0
Local nPos			:= 0
Local nPosCda		:= 0
Local cLinha		:= ''
Local nSaldoAnt		:= 0
Local nCrdMes		:= 0
Local nCrdTransf	:= 0
Local nCrdUti		:= 0
Local nSaldProx		:= 0
Local cTpLanc		:= ''
Default aCDAExtra	:= {}
DEfault aApurExtra	:= {}

Aadd(aRet,{space(4), space(30)                      , space(4), , space(9), space(40), "","",.F.})
Aadd(aRet,{space(4), space(30)                      , space(4), , space(9), space(40), "","",.F.})

Aadd(aRet,{space(4), "      Detalhamento Código  " + cCod + "    " , space(4), , space(9), space(40), "","",.F.})

Aadd(aRet,{space(4), space(30)                     , space(4), , space(9), space(40), "","",.F.})

Aadd(aRet,{"0001"  , "     --- Recebimento de Crédito --- ", space(4), 0, space(9), space(40), "","",.F.})
Aadd(aRet,{space(4), space(30)                     , space(4), , space(9), space(40), "","",.F.})

Aadd(aRet,{"0002"  , "     --- Recebimento por Transferência de Crédito --- ", space(4), 0, space(9), space(40), "","",.F.})
Aadd(aRet,{space(4), space(30)                    , space(4), , space(9), space(40), "","",.F.})

Aadd(aRet,{"0003"  , "     --- Utilização de Crédito --- " , space(4), 0, space(9), space(40), "","",.F.})
Aadd(aRet,{space(4), space(30)                     , space(4), , space(9), space(40), "","",.F.})


Aadd(aRet,{space(4), " <<<---VOLTAR"              , space(4), , space(9), space(40), "","",.F.})
Aadd(aRet,{space(4), space(30)                      , space(4), , space(9), space(40), "","",.F.})

nPosCda	:=	aScan(aCDAExtra,{|aX| Alltrim(aX[1]) == Alltrim(cCod)})

If nPosCda > 0

	For nCont	:= nPosCda to len(aCDAExtra)
		If Alltrim(cCod) == Alltrim(aCDAExtra[nCont][1])

			cLinha	:= DefLinExtra(aCDAExtra[nCont][2])

			If cLinha == '0001'
				//Recebimento de Cre´dito
				nCrdMes	+= aCDAExtra[nCont][5]
			ElseIF cLinha == '0003'
				//Utilização de Crédito
				nCrdUti	+= aCDAExtra[nCont][5]
			ElseIF cLinha == '0002'
				//Transferência de Crédito
				nCrdTransf	+= aCDAExtra[nCont][5]
			EndIf

			nPosDet	:= ascan(aRet,{|x|x[1]==cLinha}) //procura código da linha

			If nPosDet > 0 .And. !Empty(cLinha)
				If aCDAExtra[nCont][9]
					//Individualizado
					cTpLanc	:= a953TpLanc('A') + aCDAExtra[nCont][8]
				Else
					//Agrupado
					cTpLanc	:= a953TpLanc('AG')
				EndIf

				AdLinhaExt(@aRet, cLinha, nPosDet, Iif(cLinha $ "0003" ,GetDescLan(aCDAExtra[nCont][3]) ,'' )  , Iif (cLinha $ "0003" ,aCDAExtra[nCont][3] ,'' ) ,aCDAExtra[nCont][5],aCDAExtra[nCont][6],Iif( aCDAExtra[nCont][9], aCDAExtra[nCont][7],''),cTpLanc ,aCDAExtra[nCont][10] )

			EndIf
		Else
			Exit
		EndIf

	Next nCont

EndIf

If Len(aApurExtra) > 0
	nSaldoAnt	:= aApurExtra[3]
EndIf

nSaldProx	:= nSaldoAnt +  nCrdMes + nCrdTransf - nCrdUti

//Atualiza totalizadores da apuração detalhada
AtuVlrExtra(@aRet,'0001')
AtuVlrExtra(@aRet,'0003')
AtuVlrExtra(@aRet,'0002')

Return {nSaldoAnt, nCrdMes, nCrdTransf, nCrdUti, nSaldProx, aRet}

Static Function AdLinhaExt(aRet, cLinha, nPosDet, cDesc, cTipoUti, nVAlor, cNumNF, cChaveNfe, cTpLanc,cCodOri )

Aeval(aRet,{|x| If(x[1]==cLinha ,nPosDet++,)})
aRet		   		:= 	Asize(aRet,Len(aRet)+1)
aRet		   		:= 	Ains(aRet,nPosDet)
aRet[nPosDet]   	:= {cLinha,cDesc,cTipoUti,nVAlor,cNumNF,cChaveNfe,cCodOri,cTpLanc,.F.}

Return


Static Function EdLinhaExt(aRet, nPos, nValor, cOpcao, cLinha )

If cOpcao == '1' //Soma

	aRet[nPos][4]	+= nValor

ElseIf cOpcao == '2' //Subtrai

	aRet[nPos][4]	-= nValor

ElseIf cOpcao == '3' //Sobrepoe
	aRet[nPos][4]	:= nValor
EndIf


Static Function DefLinExtra(cTipopMov)

Local cLinha	:= ''

If cTipopMov == 'R'
	//Recebimento de Cre´dito
	cLinha	:= '0001'
ElseIF cTipopMov == 'U'
	//Utilização de Crédito
	cLinha	:= '0003'
ElseIF cTipopMov == 'T'
	//Transferência de Crédito
	cLinha	:= '0002'
EndIf

Return cLinha

Static Function AtuVlrExtra(aRet,cLinha, nVal, nLinha)
//todo realizar laço para totalizar
Local nPos		:= ascan(aRet,{|x|x[1]==cLinha}) //procura código da linha
Local nCont		:= 0
Local nValor	:= 0
Default nVal	:= 0
Default nLinha	:= 0

For nCont 	:= nPos+1 to Len(aRet)
	If aRet[nCont][1] == cLinha .And. Iif(nLinha > 0 ,nLinha <>nCont  ,.T.)
		nValor += aRet[nCont][4]
	Else
		Exit
	EndIf

Next nCont

aRet[nPos][4]	:= nValor + nVal

Return

/*/{Protheus.doc} AtuSldExtra
	(Função para excluir o credito acumulado)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param aApurExtra, array, informações da extra apuração.
	@param nPos, numerico, contém a posição da extra apuração.

	@return Nil, nulo, não tem retorno
	/*/
Static Function AtuSldExtra(aApurExtra,nPos)

	Local nPosDet := 0
	Local nValor := 0
	Local nSaldProx := 0
	Local nSaldoAnt := 0
	Local nCrdMes := 0
	Local nCrdTransf := 0
	Local nCrdUti := 0
	local naCols14 := 0

	nPosDet := Ascan(aApurExtra[nPos][8],{|x| x[1] == '0001' })
	nCrdMes := aApurExtra[nPos][8][nPosDet][4]

	nPosDet := Ascan(aApurExtra[nPos][8],{|x| x[1] == '0003' })
	nCrdUti := aApurExtra[nPos][8][nPosDet][4]

	nPosDet := Ascan(aApurExtra[nPos][8],{|x| x[1] == '0002' })
	nCrdTransf := aApurExtra[nPos][8][nPosDet][4]

	nSaldoAnt := aApurExtra[nPos][3]

	nSaldProx := nSaldoAnt + nCrdMes + nCrdTransf - nCrdUti

	aApurExtra[nPos][3] := nSaldoAnt
	aApurExtra[nPos][4] := nCrdMes
	aApurExtra[nPos][5] := nCrdTransf
	aApurExtra[nPos][6] := nCrdUti
	aApurExtra[nPos][7] := nSaldProx

	naCols14 := Ascan(aCols14,{|x| AllTrim(x[2] )== AllTrim(aApurExtra[nPos][1]) })

	If !Empty(naCols14)
		aCols14[naCols14][1] := IIf(nSaldProx >= 0,'br_azul','br_preto')	// br_azul = Consistente | br_preto = Inconsistente
		aCols14[naCols14][4] := nSaldoAnt
		aCols14[naCols14][5] := nCrdMes
		aCols14[naCols14][6] := nCrdTransf
		aCols14[naCols14][7] := nCrdUti
		aCols14[naCols14][8] := nSaldProx
	EndIf

Return Nil


Static Function AdCExtrCon(cCodLan, nPos14)

Local aApurDet		:= {}
Local naCols14		:= len(aCols14)
Local nCont			:= 0
Local cDescr		:= GetDescLan(cCodLan)

Default nPos14		:= 0

If nPos14 > 0
	//Significa que é uma inclusão manual, e deve utilizar a linha passada do acols14
	naCols14	:= nPos14
EndIf

//Adiciona o código no aApurExtra
Aadd(aApurExtra,{cCodLan, cDescr,0,0,0,0,0,{}})
nCont	:= Len(aApurExtra)

//Cria nova apuração detalhada
aApurDet := AdExtraDet(cCodLan)

//Atualiza aCols14
aCOLS14[naCols14][1] 	:= Iif(aApurDet[5] >= 0  ,'br_azul'  ,'br_preto'  ) //Extra apuração sem inconsistência
aCOLS14[naCols14][2] 	:= cCodLan
aCOLS14[naCols14][3] 	:= cDescr
aCOLS14[naCols14][4] 	:= aApurDet[1]
aCOLS14[naCols14][5] 	:= aApurDet[2]
aCOLS14[naCols14][6] 	:= aApurDet[3]
aCOLS14[naCols14][7]	:= aApurDet[4]
aCOLS14[naCols14][8] 	:= aApurDet[5]

acols[n][3]				:= cDescr
aApurExtra[nCont][8]	:= aApurDet[6]

//Adiciona nova linha vazia
If nPos14 == 0
	Aadd(aCOLS14,{'', space(8), space(50), 0, 0, 0, 0, 0,.F.})
EndIf

Return nCont



Static Function GrvApExtra(aApurExtra,dDtIni,nPeriodo)

Local nPos		:= 0
Local nPos2		:= 0
Local dPer		:= LastDay(dDtIni)
Local cPer		:=substr(dtos(dPer),1,4) + substr(dtos(dPer),5,2)
Local cTpMov	:= ''

Local lCE5DESCRI := aApurSX3[FP_CE5_DESCRI]

a953DelEAp(dDtIni)

For nPos := 1 to Len(aApurExtra)

	//-----------------------------------------
	//Gravação dos valores consolidadeos na CE6
	//-----------------------------------------
	RecLock("CE6",.T.)
	CE6->CE6_FILIAL	:=	xFilial("CE6")
		CE6->CE6_PERIOD	:=	cPer
		CE6->CE6_CODLAN	:= aApurExtra[nPos][1]
		CE6->CE6_TOTCRE	:= aApurExtra[nPos][4]
		CE6->CE6_TOTTRA	:= aApurExtra[nPos][5]
		CE6->CE6_TOTUTI	:= aApurExtra[nPos][6]
		CE6->CE6_SALDO	:= aApurExtra[nPos][7]
	CE6->(MsUnlock())

	For nPos2 := 1 To Len(aApurExtra[nPos][8])
		//Verifica se o tipo de lançamento está preenchido
		If !Empty(aApurExtra[nPos][8][nPos2][8])

			If Alltrim(aApurExtra[nPos][8][nPos2][1]) == '0001'
				cTpMov	:= 'R'
			ElseIF Alltrim(aApurExtra[nPos][8][nPos2][1]) == '0002'
				cTpMov	:= 'T'
			ElseIF Alltrim(aApurExtra[nPos][8][nPos2][1]) == '0003'
				cTpMov	:= 'U'
			EndIf

			RecLock("CE5",.T.)
				CE5->CE5_FILIAL	:=	xFilial("CE5")
				CE5->CE5_CODIGO	:=	FWUUID('CE5')
				CE5->CE5_DATA	:= dPer
				CE5->CE5_CODLAN	:= aApurExtra[nPos][1]

				If lCE5DESCRI
					CE5->CE5_DESCRI := aApurExtra[nPos][8][nPos2][2]
				EndIf

				CE5->CE5_CODUTI	:= aApurExtra[nPos][8][nPos2][3]
				CE5->CE5_CODCDH	:= aApurExtra[nPos][8][nPos2][7]
				CE5->CE5_TPMOV	:= cTpMov
				CE5->CE5_VALOR	:= aApurExtra[nPos][8][nPos2][4]
				CE5->CE5_NUMDOC	:= aApurExtra[nPos][8][nPos2][5]
				CE5->CE5_PERIOD	:= cPer
				CE5->CE5_CHVNFE	:= aApurExtra[nPos][8][nPos2][6]
				CE5->CE5_TPLANC	:= SubString(aApurExtra[nPos][8][nPos2][8],1,2) + AllTrim(SubStr(aApurExtra[nPos][8][nPos2][8],500))
			CE5->(MsUnlock())
		EndIf

	Next nPos2

Next nPos

Return

Function a953DelEAp(dDtIni)

Local dPer		:= LastDay(dDtIni)
Local cPer		:=substr(dtos(dPer),1,4) + substr(dtos(dPer),5,2)

dbSelectArea( "CE5" )
CE5->( dbSetOrder( 4 ) )

dbSelectArea( "CE6" )
CE6->( dbSetOrder( 2 ) )

If CE5->(DbSeek(xFilial("CE5")+cPer))

	While ( CE5->(!Eof()).And. CE5->CE5_FILIAL + CE5->CE5_PERIOD == xFilial("CE5") + cPer )
		RecLock("CE5",.F.)
		CE5->( DbDelete() )
		CE5->( MsUnlock() )
		CE5->(DbSkip())
	EndDo

EndIf

If CE6->(DbSeek(xFilial("CE6")+cPer))

	While ( CE6->(!Eof()).And. CE6->CE6_FILIAL + CE6->CE6_PERIOD == xFilial("CE6") + cPer )
		RecLock("CE6",.F.)
		CE6->( DbDelete() )
		CE6->( MsUnlock() )
		CE6->(DbSkip())
	EndDo

EndIf

Return

Static Function AtuExtra(cCodLanc,nValor,cChave,cOpcao)

Local cLinha	:= ''
Local nPos		:= 0
Local nPosDet	:= 0
Default  cChave	:= ''

If  len(Alltrim(cCodLanc)) == 8.And. CDO->(DbSeek(xFilial("CDO")+Alltrim(cCodLanc))) .And. !Empty(CDO->CDO_TPMOV) .And. !Empty(CDO->CDO_CODCRE)

	//Inclusão/Edição
	cLinha	:= DefLinExtra(CDO->CDO_TPMOV)

	//Precisa verificar se código já existe no acols14
	nPos := ascan(aApurExtra,{|x|alltrim(x[1])==Alltrim(CDO->CDO_CODCRE)}) //procura código da linha


	If nPos  == 0 .And. cOpcao == '1'
		//Código ainda não existe no acols14 deverá incluir no acols14 e também no acols15
		nPos	:= AdCExtrCon(CDO->CDO_CODCRE)
		CDO->(DbSeek(xFilial("CDO")+Alltrim(cCodLanc)))

	EndIf

	If nPos  > 0
		//Código já existe no acols14, deverá somente atualizar acols14 e acols15
		nPosDet	:= ascan(aApurExtra[nPos][8],{|x|x[1]==cLinha .And. x[3] == CDO->CDO_CODUTI .And. Alltrim(x[8]) == alltrim(cChave) }) //procura código da linha

		If cOpcao == '1'
			//Inclusão
			If nPosDet == 0

				//Significa que não existe ainda a linha manual na apuração detalhada
				nPosDet	:= ascan(aApurExtra[nPos][8],{|x|x[1]==cLinha })
				If nPosDet > 0 .And. !Empty(cLinha)
					cChave	:= aCols[n,8]	:=  a953TpLanc('M')+fwuuid('MATA953')
					AdLinhaExt(@aApurExtra[nPos][8], cLinha, nPosDet, GetDescLan(CDO->CDO_CODUTI) ,CDO->CDO_CODUTI ,nValor,"","",cChave,cCodLanc)
					AtuVlrExtra(aApurExtra[nPos][8],cLinha)
					AtuSldExtra(aApurExtra, nPos)
				EndIf

			ElseIF !Empty(cLinha)

				//Linha manual para este código já existe, então apenas irei acumular o valor
				EdLinhaExt(@aApurExtra[nPos][8], nPosDet, nValor, '3', cLinha )

				//Atualiza apuração detalhada
				AtuVlrExtra(aApurExtra[nPos][8],cLinha)

				//Atualiza apuração consolidada
				AtuSldExtra(aApurExtra, nPos)

			EndIf
		ElseIF cOpcao == '2' .And. nPosDet > 0 .And. !Empty(cLinha) .And. nPos >0
			//Exclusão da apuraçã detalhada
			DelExtra(@aApurExtra[nPos][8], nPosDet)

			//Atualiza apuração detalhada
			AtuVlrExtra(aApurExtra[nPos][8],cLinha)

			//Atualiza apuração consolidada
			AtuSldExtra(aApurExtra, nPos)

		EndIf

	EndIf

EndIf


Return cChave


Static Function DelExtra(aApurExtra, nPos)

aDel(aApurExtra,nPos)
aSize(aApurExtra,Len(aApurExtra)-1)


Return


Static Function SldExtAnt(aApurExtra, dDtIni)

Local dPer		:= FirstDay(dDtIni)-1
Local cPer		:=substr(dtos(dPer),1,4) + substr(dtos(dPer),5,2)
Local nPos		:= 0

dbSelectArea( "CE6" )
CE6->( dbSetOrder( 2 ) )

If CE6->(DbSeek(xFilial("CE6")+cPer))

	While ( CE6->(!Eof()).And. CE6->CE6_FILIAL + CE6->CE6_PERIOD == xFilial("CE6") + cPer )

		If CE6->CE6_SALDO > 0

			nPos := aScan (aApurExtra,{|x|alltrim(x[1])==alltrim(CE6->CE6_CODLAN)})
			If nPos == 0
				//Se código não exitir será então adicionado
				Aadd(aApurExtra,{CE6->CE6_CODLAN, '',CE6->CE6_SALDO,0,0,0,0,{}})
			Else
				//se código existir será então atualizado com saldo credor
				aApurExtra[nPos][3]	:= CE6->CE6_SALDO
			EndIf

		EndIf
		CE6->(DBSKIP())
	EndDo

EndIf


Return aApurExtra


function a953LinExt()
//função que realiza a validação da linha
Local lret	:= .T.
Local nPos	:= 0
If lCmpExtra
	If lExtApuCon .And.  !Empty(alltrim(acols[n][1])) .And. acols[n][9] == .F.
		//Apuração consolidada
		If !CDO->(DbSeek(xFilial("CDO")+Alltrim(alltrim(acols[n][2]))))

			//Realiza validação do código na tabela CDO
			xMagHelpFis ('Atenção',;										//"Atenção"
					"Código de Ajuste Inválido")
			lRet	:= .F.

		EndIf
	Else
		//APuração detalhada

	EndIf
EndIf

Return lRet

/*/{Protheus.doc} EditCelExt
	(Função para verificar se altera a coluna na extra apuração)

	@type Function
	@author Erick Gonçalves Dias
	@since 31/08/2017

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Function EditCelExt(nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB,oGetDad)

	Local bSave := oGloBrowse:Cargo

	If lCmpExtra
		Eval(oGetDad:obrowse:bDrawSelect)

		If lExtApuCon
			If (nCol == 2 .And. len(AllTrim(aCols[oGloBrowse:nAt,2])) <> 8) .Or. nCol == 4
				//pode permitir alteração da célula
				oGloBrowse:Cargo := ""
				lEditCol( nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB )
			EndIf
		ElseIf (nCol ==2 .Or. nCol ==3 .Or. nCol ==4) .And. Empty(aCols[oGloBrowse:nAt,7]) .And. "M  -" $ aCols[oGloBrowse:nAt,8]
			//pode permitir alteração da célula
			oGloBrowse:Cargo := ""
			lEditCol( nCol, cChar, nFlags, oGloBrowse, oGloGetDB, lGetDB )
		EndIf

		oGloBrowse:Cargo := bSave
	EndIf

Return Nil

Function a953CPOEXT(oGetDad)

	If lCmpExtra
		If lExtApuCon
			oGetDad:aAlter :={"cCod","nCrdAnt"}
			oGetDad:oMother:aAlter :={"cCod","nCrdAnt"}
		Else
			oGetDad:aAlter :={"cDescr","cTipo","nCrduti",}
			oGetDad:oMother:aAlter :={"cDescr","cTipo","nCrduti"}
		EndIf
	EndIf

Return .T.

Function a953CodExt()

//Função que realiza a validação do código informado
Local lRet	:= .T.
Local nPos	:= 0

If lCmpExtra
	If lExtApuCon
		//Apuração Consolidada
		If  readvar() == "M->CCOD" .And. len(alltrim(M->CCOD)) == 8

			If substr(M->CCOD,1,2) <> alltrim(GetNewPar("MV_ESTADO"))
				//Realiza validação do código na tabela CDO
				xMagHelpFis (STR0085,;	//"Atenção"
						STR0124,;				//"Código de lançamento inválido!"
						STR0125)				//"Verifique a UF, o reflexo e o tipo de apuração do lançamento selecionado."
				lRet := .F.
			ElseIf substr(M->CCOD,4,1) <> "9"
				xMagHelpFis (STR0085,;	//"Atenção"
						STR0124,;				//"Código de lançamento inválido!"
						'A utilização do código deverá ser de Controle de Créditos')				//"Verifique a UF, o reflexo e o tipo de apuração do lançamento selecionado."
				lRet := .F.
			ElseIF !CDO->(DbSeek(xFilial("CDO")+alltrim(M->CCOD)))

				//Realiza validação do código na tabela CDO
				xMagHelpFis ('Atenção',;										//"Atenção"
						"Código de Ajuste Inválido")
				lRet	:= .F.

			EndIf

		Else
			lRet	:= .F.
		EndIf

		If lRet
			//Adicionar código nos arrays de extra apuração

			nPos := aScan (aApurExtra,{|x|x[1]==alltrim(M->CCOD)})

			If nPos == 0
				AdCExtrCon(alltrim(M->CCOD),N)

			Else

				nPos := aScan (aApurExtra,{|x|x[1]==alltrim(M->CCOD)})
				If nPos > 0

					//Realiza validação do código na tabela CDO
					xMagHelpFis ('Atenção',;										//"Atenção"
							"Código de Ajuste já informado")
					lRet	:= .F.

				EndIf

			EndIf

		EndIf

	EndIf
EndIf

Return lRet

Function a953SldExt()

Local nPos 	:= 0
Local lRet	:= .T.
Local nSldCrd	:= 0
If lCmpExtra .And. (Len(alltrim(aCols[n,2])) == 8 .Or. !lExtApuCon)
	If ReadVar() =="M->NCRDUTI"
		nPos := ascan(aApurExtra,{|x|alltrim(x[1])==Alltrim(cCodExtLan)}) //procura código da linha

		If nPos > 0
			If aCols[n,1] == '0001'
				//Recebimento de crédito
				AtuVlrExtra(@aApurExtra[nPos][8],'0001',M->NCRDUTI,N)
				AtuSldExtra(aApurExtra, nPos)

			ElseIF aCols[n,1] == '0002'
				//Recebimento de crédito por transfer~encia
				AtuVlrExtra(@aApurExtra[nPos][8],'0002',M->NCRDUTI,N)
				AtuSldExtra(aApurExtra, nPos)

			ElseIF aCols[n,1] == '0003'
				//Utilização de crédito
				AtuVlrExtra(@aApurExtra[nPos][8],'0003',M->NCRDUTI,N)
				AtuSldExtra(aApurExtra, nPos)

			EndIf

		EndIf

	ElseIf ReadVar() =="M->NCRDANT"

		nSldCrd	:= M->NCRDANT + aCols[n,5] + aCols[n,6] - aCols[n,7]
		nPos := ascan(aApurExtra,{|x|alltrim(x[1])==Alltrim(aCols[n,2])}) //procura código da linha
		aApurExtra[nPos][3]	:= M->NCRDANT
		aApurExtra[nPos][7]	:= nSldCrd
		aCols[n,8]	:= nSldCrd
		If nSldCrd >= 0
			aCols[n,1]	:= 'br_azul'
		Else
			aCols[n,1]	:= 'br_preto'
		EndIf

	EndIf
EndIf

If lCmpExtra .And. Len(alltrim(aCols[n,2])) <> 8 .And. lExtApuCon
	lRet	:= .F.
EndIf

Return lRet

Function a953DelExt()

Local lRet	:= .F.
Local nPos	:= 0
Local nPosDet	:= 0

If lCmpExtra
	If lExtApuCon .And. (aCols[n,4] + aCols[n,5] + aCols[n,6] + aCols[n,7] + aCols[n,8] == 0) .And. !Empty(aCols[n,1])
		//Pode excluir a linha da apuração consolidada
		lRet	:= .T.
	ElseIf !lExtApuCon .And. Empty(aCols[n,7]) .And. !Empty(aCols[n,1]) .And. aCols[n,9] == .F.
		//Pode excluir linha da apuração detalhada
		nPos := ascan(aApurExtra,{|x|alltrim(x[1])==Alltrim(cCodExtLan)}) //procura código da linha

		If nPos > 0

			nPosDet := ascan(aApurExtra[nPos][8],{|x|x[8] == aCols[n,8] }) //procura código da linha

			If nPosDet > 0

				//Zera o valor
				aApurExtra[nPos][8][nPosDet][4]	:= 0
				aApurExtra[nPos][8][nPosDet][2]	:= ""
				aApurExtra[nPos][8][nPosDet][3]	:= ""

				//Atualiza apuração detalhada
				AtuVlrExtra(aApurExtra[nPos][8],aCols[n,1])

				//Atualiza apuração consolidada
				AtuSldExtra(aApurExtra, nPos)
				lRet	:= .T.
			EndIf

		EndIf

	EndIf
EndIf

Return lRet

/*/{Protheus.doc} GrvCredAcu
	(Rotina que irá fazer gravação do Crédito acumulado na F2R)

	@type Static Function
	@author Rafael S Oliveira
	@since 05/07/2018

	@param c_AnoMes, caracter, contém o ano e o mês
	@param c_NrLivro, caracter, contém o numero do livro

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function GrvCredAcu(c_AnoMes,c_NrLivro) //#TODO function Gravacao GrvCredAcu

	Local lContinua := .T.

	Local nPosicao := 0
	Local nPosaCols5 := 0

	Local cCodApu := ""

	Default c_AnoMes := ""
	Default c_NrLivro := ""

	DbSelectArea("F2R")		// APURACAO DE CREDITO ACUMULADO
	F2R->(DbSetOrder(1))	// F2R_FILIAL+F2R_ANOMES+F2R_LIVRO+F2R_CREDAC

	If Empty(c_AnoMes) .Or. Empty(aCoCredAcu)
		lContinua := .F.
	EndIf

	If lContinua
		//Delete Credito acumulado
		a953DelF2R(c_AnoMes,c_NrLivro)

		// Busca o credito acumulado no mes
		nPosicao := Ascan(aCoCredAcu,{|x| AllTrim(x[1]) == "002" })

		// Se encontrou
		If !Empty(nPosicao)
			nPosicao ++

			While nPosicao <= Len(aCoCredAcu) .And. Empty(aCoCredAcu[nPosicao][1])
				// busca o codigo da apuração
				nPosaCols5 := Ascan(aCols5,{|x| AllTrim(x[7]) == AllTrim(aCoCredAcu[nPosicao][7]) .And. ValType(x[8]) == "C" .And. "CA" $ x[8] })

				If !Empty(nPosaCols5)
					cCodApu := aCols5[nPosaCols5][2]
				Else
					cCodApu := ""
				EndIf

				// Gravação dos valores na F2R
				RecLock("F2R",.T.)
					F2R->F2R_FILIAL := xFilial("F2R")
					F2R->F2R_ANOMES := c_AnoMes
					F2R->F2R_LIVRO := c_NrLivro
					F2R->F2R_CREDAC := aCoCredAcu[nPosicao][6]
					F2R->F2R_DESCRI := Upper(aCoCredAcu[nPosicao][4])
					F2R->F2R_CODAJU := aCoCredAcu[nPosicao][7]
					F2R->F2R_CODCRE := aCoCredAcu[nPosicao][8]
					F2R->F2R_SUBITE := cCodApu
					F2R->F2R_INDICE := aCoCredAcu[nPosicao][9]
					F2R->F2R_VALOR := aCoCredAcu[nPosicao][5]
				F2R->(MsUnlock())

				nPosicao ++
			EndDo
		EndIf
	EndIf

Return Nil

/*/{Protheus.doc} a953DelF2R
	(Rotina que irá fazer exclusão do Crédito acumulado na F2R)

	@type Function
	@author Rafael S Oliveira
	@since 05/07/2018

	@param c_AnoMes, caracter, contém o ano e o mês
	@param c_NrLivro, caracter, contém o numero do livro

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Function a953DelF2R(c_AnoMes,c_NrLivro)

	Default c_AnoMes := ""
	Default c_NrLivro := ""

	// Se não existe a tabela F2R
	If !aApurSX2[AI_F2R]
		Return Nil
	EndIf

	DbSelectArea("F2R")		// APURACAO DE CREDITO ACUMULADO
	F2R->(DbSetOrder(1))	// F2R_FILIAL+F2R_ANOMES+F2R_LIVRO+F2R_CREDAC

	// Busca encontrar o registro de apuração
	If F2R->(DbSeek(FWxFilial("F2R")+c_AnoMes+c_NrLivro))
		// Enquanto for apuração do mes e ano e o livro
		While F2R->(!Eof()).And. FWxFilial("F2R")+c_AnoMes+c_NrLivro == F2R->(F2R_FILIAL+F2R_ANOMES+F2R_LIVRO)
			// Deleta o registro
			RecLock("F2R",.F.)
				F2R->(DbDelete())
			F2R->(MsUnlock())

			F2R->(DbSkip())
		EndDo
	EndIf

Return Nil

/*/{Protheus.doc} RetVlrF0I
//Função respónsavel por verificar se deverá persistir os dados na tabela F0I.
@author joao.balbino
@since 09/02/2018
@version undefined
@param aDifalGrv, array, descricao
@return Primeira posisção retorna se deverá ou não persistir, segunda posição retornar os dados de cada linha.
@type function
/*/
Static Function RetVlrF0I(aDifalGrv)

Local lRet 	:= .F.
Local aRet 	:= {.F.,{}}
Local nPos	:= 0

Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '001.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '002.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '003.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '004.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '005.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '006.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '007.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '008.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '009.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '010.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '011.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '012.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '013.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '014.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '015.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '016.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '017.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '013.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '014.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '015.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '016.00'} )][4])
Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '017.00'} )][4])
/*
Dependendo do ano de processamento, o layout do Difal e da apuração possuem mais linhas, caso apuração seja processada
antes de 2016, poderá ocorrer error log, já que as linhas a partir da 018.00 são condicionais, então verifico antes se
as informações estão no aDifalGrv antes de utilizar.
*/
If aScan(aDifalGrv,{|x|x[2] == '018.00'}) > 0
	Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '018.00'} )][4])
EndIf
If aScan(aDifalGrv,{|x|x[2] == '019.00'}) > 0
	Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '019.00'} )][4])
EndIf
If aScan(aDifalGrv,{|x|x[2] == '020.00'}) > 0
	Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '020.00'} )][4])
EndIf
If aScan(aDifalGrv,{|x|x[2] == '021.00'}) > 0
	Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '021.00'} )][4])
EndIf
If aScan(aDifalGrv,{|x|x[2] == '022.00'}) > 0
	Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '022.00'} )][4])
EndIf
If aScan(aDifalGrv,{|x|x[2] == '023.00'}) > 0
	Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '023.00'} )][4])
EndIf
If aScan(aDifalGrv,{|x|x[2] == '024.00'}) > 0
	Aadd(aRet[2],aDifalGrv[aScan(aDifalGrv,{|x|x[2] == '024.00'} )][4])
EndIf

For nPos:= 1 to Len(aRet[2])
	If aRet[2,nPos] > 0
		aRet[1] := .T.
		Exit
	EndIf
Next nPos

Return aRet

/*/{Protheus.doc} fMkCredAcu
	(Função para monta a aba de credito acumulado)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param o_Dialog, objeto, contém a dialog.
	@param aNWCredAcu, array, contem as saidas incentivadas
	@param c_AnoMes, caracter, contem o ano e mes da apuração
	@param c_NrLivro, caracter, contém o numero do livro

	@Return Nil, nulo, Não tem retorno

	@obs #vitor01
	/*/
Static Function fMkCredAcu(o_Dialog,aNWCredAcu,c_AnoMes,c_NrLivro,aCont)

	Local lContinua := .T.

	Local oLayer := Nil

	Default o_Dialog := Nil

	Default aNWCredAcu := Nil

	Default c_AnoMes := ""
	Default c_NrLivro := ""
	Default aCont := {}

	// Se o objeto não foi passado
	If o_Dialog == Nil
		lContinua := .F.
	EndIf

	If lContinua
		// Retorna o combobox do campo F2P_CREDAC
		aP2PCREDAC := cBoxCrdAcu(.T.)

		// Função para buscar os codigo de ajuste de crédito acumulado
		aCdAjCrdAc := fCdAjCrdAc()

		//Inicializa o FWLayer
		oLayer := FWLayer():new()
		oLayer:Init(o_Dialog,.F.)

		// Adicionando linhas
		oLayer:AddLine("LIN1",40,.F.)
		oLayer:AddLine("LIN2",60,.F.)

		// Adicionando colunas nas linhas
		oLayer:AddCollumn("COL1",100,.F.,"LIN1")
		oLayer:AddCollumn("COL1",100,.F.,"LIN2")

		// Pega o painel
		oPnSaidInc := oLayer:getLinePanel("LIN1")
		oPnCredAcu := oLayer:getLinePanel("LIN2")

		// Monta o acols das saidas incentivadas
		fCoSaidInc(aNWCredAcu)

		// Monta o browser das saídas incentivadas
		oBrSaidInc := FwFormBrowse():New()
		oBrSaidInc:FwBrowse():DisableReport()
		oBrSaidInc:FwBrowse():DisableConfig()
		oBrSaidInc:FwBrowse():DisableFilter()
		oBrSaidInc:FwBrowse():DisableLocate()
		oBrSaidInc:FwBrowse():DisableSeek()
		oBrSaidInc:AddButton("Acumula",{|| a953AcuCrd(aCont) },,2,0,.F.,1,"1",)
		oBrSaidInc:AddButton("Estorna","a953EstCrd()",,2,0,.F.,2,"2",)
		oBrSaidInc:SetColumns(fMkColumns(1))
		oBrSaidInc:SetDataArray()
		oBrSaidInc:SetArray(aCoSaidInc)
		oBrSaidInc:SetOwner(oPnSaidInc)
		oBrSaidInc:SetDescription("Saídas Incentivadas")
		oBrSaidInc:SetFixedBrowse(.T.)
		oBrSaidInc:Activate(oPnSaidInc)

		// Monta o acols do detalhamento do credito acumulado
		fCoCredAcu(.T.,c_AnoMes,c_NrLivro)

		// Monta o browser do detalhamento do credito acumulado
		oBrCredAcu := FwFormBrowse():New()
		oBrCredAcu:FwBrowse():DisableConfig()
		oBrCredAcu:FwBrowse():DisableFilter()
		oBrCredAcu:FwBrowse():DisableLocate()
		oBrCredAcu:FwBrowse():DisableSeek()
		oBrCredAcu:SetItemHeaderClick({})
		oBrCredAcu:SetColumns(fMkColumns(2))
		oBrCredAcu:SetDataArray()
		oBrCredAcu:SetArray(aCoCredAcu)
		oBrCredAcu:SetOwner(oPnCredAcu)
		oBrCredAcu:SetDescription("Detalhamento do Crédito Acumulado")
		oBrCredAcu:SetFixedBrowse(.T.)
		oBrCredAcu:Activate(oPnCredAcu)
	EndIf

Return Nil

/*/{Protheus.doc} fCdAjCrdAc
	(Função para buscar os codigos de ajustes de crédito acumulado)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@Return aCodAjust, array, contem os códigos de ajustes de crédito acumulado

	@obs #vitor01
	/*/
Static Function fCdAjCrdAc()

	Local cMV_Estado := ""

	Local nPosicao := 0

	Local aCodAjust := {}

	DbSelectArea("F2P")		// CODIGO AJUST. CRED. ACUMULADO
	F2P->(DbSetOrder(1))	// F2P_FILIAL+F2P_UF+F2P_CREDAC+F2P_CODCRE+F2P_CODAJU

	cMV_Estado := AllTrim(GetMv("MV_ESTADO",,""))

	// Busca a configuração do estado
	If F2P->(DbSeek(FWxFilial("F2P")+cMV_Estado))

		// Enquanto for a configuração do estado
		While F2P->(!Eof()) .And. FWxFilial("F2P")+cMV_Estado == F2P->(F2P_FILIAL+F2P_UF)

			// Verfica se o registro já existe
			If Ascan(aCodAjust,{|x| x == F2P->F2P_CODCRE }) < 1
				Aadd(aCodAjust,F2P->F2P_CODCRE)
			EndIf

			F2P->(DbSkip())
		EndDo

	EndIf

Return aCodAjust

/*/{Protheus.doc} fCoSaidInc
	(Função para montar os dados do browser de saídas incentivadas)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param aNWCredAcu, array, Informações do credito acumulado

	@Return Nil, nulo, Não tem retorno

	@obs #vitor01
	/*/
Static Function fCoSaidInc(aNWCredAcu)

	Local nCount := 0
	Local nPosicao := 0
	Local nTotal := 0
	Local nTipo := 0
	Local nIndice := 0
	Local nValor := 0
	Local nRestoInd := 0
	Local nMaiorInd := 0
	Local nTipo := 0

	Default aNWCredAcu := {}

	// Se o array estiver preenchido
	If !Empty(aNWCredAcu)
		// Percorre todo o credito acumulado
		For nCount := 1 To Len(aNWCredAcu)
			// Pesquisa o tipo de credito acumulado
			nPosicao := Ascan(aP2PCREDAC,{|x| AllTrim(aNWCredAcu[nCount][1]) == SubStr(x[1],1,Len(AllTrim(aNWCredAcu[nCount][1]))) })

			// Se achou
			If !Empty(nPosicao)
				// Pega o valor
				nTotal += aNWCredAcu[nCount][2]
			EndIf
		Next
	EndIf

	// Percorre todas as opções
	For nCount := 1 To Len(aP2PCREDAC)
		If SubStr(aP2PCREDAC[nCount][1],1,2) <> "3="
			// Inicializa as variaveis
			nIndice := 0
			nValor := 0

			// Se o array estiver preenchido
			If !Empty(aNWCredAcu)
				// Pesquisa o tipo de credito acumulado
				nPosicao := Ascan(aNWCredAcu,{|x| AllTrim(x[1]) $ SubStr(aP2PCREDAC[nCount][1],1,Len(AllTrim(x[1]))) })

				// Se achou
				If !Empty(nPosicao)
					// Monta o indice
					nIndice := aNWCredAcu[nPosicao][2]/nTotal

					// Guarda o resto do indice
					nRestoInd += Val("0.00000" + SubStr(AllTrim(Str(nIndice)),At(".",AllTrim(Str(nIndice)))+6))

					// Monta o indice
					nIndice := Val(SubStr(AllTrim(Str(nIndice)),1,At(".",AllTrim(Str(nIndice)))+5))

					// Pega o valor
					nValor := aNWCredAcu[nPosicao][2]
				EndIf
			EndIf

			// Adiciona um linha no array
			Aadd(aCoSaidInc,{})
			nPosicao := Len(aCoSaidInc)

			Aadd(aCoSaidInc[nPosicao],aP2PCREDAC[nCount][1])			// Tipo
			Aadd(aCoSaidInc[nPosicao],"Saldo " + aP2PCREDAC[nCount][2])	// Descrição
			Aadd(aCoSaidInc[nPosicao],nIndice)							// Indice
			Aadd(aCoSaidInc[nPosicao],nValor)							// Valor
		EndIf
	Next

	If !Empty(nRestoInd)
		ASort(aCoSaidInc,,,{|x,y| x[3] > y[3] })

		For nCount := 1 To Len(aCoSaidInc)
			If Empty(nMaiorInd) .Or. (nMaiorInd == aCoSaidInc[nCount][3] .And. nTipo > Val(SubStr(aCoSaidInc[nCount][1],1,At("=",aCoSaidInc[nCount][1])-1)))
				nTipo := Val(SubStr(aCoSaidInc[nCount][1],1,At("=",aCoSaidInc[nCount][1])-1))
				nMaiorInd := aCoSaidInc[nCount][3]
				nPosicao := nCount
			EndIf
		Next

		aCoSaidInc[nPosicao][3] := Round(aCoSaidInc[nPosicao][3] + nRestoInd,5)

		ASort(aCoSaidInc,,,{|x,y| x[1] < y[1] })
	EndIf

	nIndice := 0
	nValor := 0

	// Varre o array
	Aeval(aCoSaidInc,{|x| nIndice += x[3], nValor += x[4] })

	// Adiciona um linha no array
	Aadd(aCoSaidInc,{})
	nPosicao := Len(aCoSaidInc)

	Aadd(aCoSaidInc[nPosicao],"")		// Tipo
	Aadd(aCoSaidInc[nPosicao],"Total")	// Descrição
	Aadd(aCoSaidInc[nPosicao],nIndice)	// Indice
	Aadd(aCoSaidInc[nPosicao],nValor)	// Valor

Return Nil

/*/{Protheus.doc} fCoCredAcu
	(Função para montar os dados do browser de saídas incentivadas)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param l_Iniciali, logico, se está inicializando ou não.
	@param c_AnoMes, caracter, contem o ano e mes da apuração
	@param c_NrLivro, caracter, contém o numero do livro

	@Return Nil, nulo, Não tem retorno

	@obs #vitor01
	/*/
Static Function fCoCredAcu(l_Iniciali,c_AnoMes,c_NrLivro)

	Local nPosicao := 0
	Local nCount := 0

	Local aSaldoAnt := {}
	Local aCrdAprPr := {}
	Local aCrdTrnPr := {}
	Local aCrdUtiPr := {}
	Local aSaldoTrn := {}

	Default l_Iniciali := .T.

	Default c_AnoMes := ""
	Default c_NrLivro := ""

	// Busca o saldo anterior
	fGExtraApu(@aSaldoAnt,@aCrdTrnPr,@aCrdUtiPr,@aSaldoTrn)

	// Se for inicialização e o array já estiver preenchido
	If l_Iniciali .And. !Empty(aCoCredAcu)
		// Repassa as informações para o array de credito acumulado.
		aCrdAprPr := AClone(aCoCredAcu)
	Else
		// Busca o Crédito gerado no mês
		a953CrdApP(l_Iniciali,c_AnoMes,c_NrLivro,@aCrdAprPr)
	EndIf

	// Inicializa a variavel
	aCoCredAcu := {}

	// Adiciona uma linha
	nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

	aCoCredAcu[nPosicao][1] := "001"
	aCoCredAcu[nPosicao][2] := "SALDO CRÉDITOS FISCAIS DE PERÍODOS ANTERIORES"

	// Existe saldo anterior
	If !Empty(aSaldoAnt)
		aCoCredAcu[nPosicao][5] := aSaldoAnt[1][1]

		For nCount := 1 To Len(aSaldoAnt[1][2])
			// Adiciona uma linha
			nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

			aCoCredAcu[nPosicao][3] := aSaldoAnt[1][2][nCount][1]
			aCoCredAcu[nPosicao][4] := aSaldoAnt[1][2][nCount][2]
			aCoCredAcu[nPosicao][5] := aSaldoAnt[1][2][nCount][3]
		Next
	EndIf

	// Adiciona uma linha
	nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

	aCoCredAcu[nPosicao][1] := "002"
	aCoCredAcu[nPosicao][2] := "TOTAL CRÉDITO APROPRIADO NO PERIODO"

	// Existe saldo anterior
	If !Empty(aCrdAprPr)
		aCoCredAcu[nPosicao][5] := aCrdAprPr[1][1]

		For nCount := 1 To Len(aCrdAprPr[1][2])
			// Adiciona uma linha
			nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

			aCoCredAcu[nPosicao][3] := aCrdAprPr[1][2][nCount][1]
			aCoCredAcu[nPosicao][4] := aCrdAprPr[1][2][nCount][2]
			aCoCredAcu[nPosicao][5] := aCrdAprPr[1][2][nCount][3]
			aCoCredAcu[nPosicao][6] := aCrdAprPr[1][2][nCount][4]
			aCoCredAcu[nPosicao][7] := aCrdAprPr[1][2][nCount][5]
			aCoCredAcu[nPosicao][8] := aCrdAprPr[1][2][nCount][6]
			aCoCredAcu[nPosicao][9] := aCrdAprPr[1][2][nCount][7]
		Next
	EndIf

	// Adiciona uma linha
	nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

	aCoCredAcu[nPosicao][1] := "003"
	aCoCredAcu[nPosicao][2] := "TOTAL CRÉDITOS RECEBIDO POR TRANSFERÊNCIA"

	// Existe saldo anterior
	If !Empty(aCrdTrnPr)
		aCoCredAcu[nPosicao][5] := aCrdTrnPr[1][1]

		For nCount := 1 To Len(aCrdTrnPr[1][2])
			// Adiciona uma linha
			nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

			aCoCredAcu[nPosicao][3] := aCrdTrnPr[1][2][nCount][1]
			aCoCredAcu[nPosicao][4] := aCrdTrnPr[1][2][nCount][2]
			aCoCredAcu[nPosicao][5] := aCrdTrnPr[1][2][nCount][3]
		Next
	EndIf

	// Adiciona uma linha
	nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

	aCoCredAcu[nPosicao][1] := "004"
	aCoCredAcu[nPosicao][2] := "TOTAL CRÉDITOS UTILIZADOS NO PERÍODO"

	// Existe saldo anterior
	If !Empty(aCrdUtiPr)
		aCoCredAcu[nPosicao][5] := aCrdUtiPr[1][1]

		For nCount := 1 To Len(aCrdUtiPr[1][2])
			// Adiciona uma linha
			nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

			aCoCredAcu[nPosicao][3] := aCrdUtiPr[1][2][nCount][1]
			aCoCredAcu[nPosicao][4] := aCrdUtiPr[1][2][nCount][2]
			aCoCredAcu[nPosicao][5] := aCrdUtiPr[1][2][nCount][3]
		Next
	EndIf

	// Adiciona uma linha
	nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

	aCoCredAcu[nPosicao][1] := "005"
	aCoCredAcu[nPosicao][2] := "SALDO DE CRÉDITO FISCAL ACUMULADO A TRANSPORTAR PARA O PERÍODO SEGUINTE"

	// Existe saldo anterior
	If !Empty(aSaldoTrn)
		aCoCredAcu[nPosicao][5] := aSaldoTrn[1][1]

		For nCount := 1 To Len(aSaldoTrn[1][2])
			// Adiciona uma linha
			nPosicao := fAddArray(@aCoCredAcu,"aCoCredAcu")

			aCoCredAcu[nPosicao][3] := aSaldoTrn[1][2][nCount][1]
			aCoCredAcu[nPosicao][4] := aSaldoTrn[1][2][nCount][2]
			aCoCredAcu[nPosicao][5] := aSaldoTrn[1][2][nCount][3]
		Next
	EndIf

Return Nil

/*/{Protheus.doc} fAddArray
	(Função para adicionar em array)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param a_Array, array, array que será adicionado
	@param c_Array, caracter, qual array que será adicionado
	@param n_Posicao, numerico, posição do array
	@param l_AIns, logico, se insere um novo elemento na posição informada

	@Return n_Posicao, numerico, posição do array

	@obs #vitor01
	/*/
Static Function fAddArray(a_Array,c_Array,n_Posicao,l_AIns)

	Local nQtdeCpo := 0

	Default a_Array := {}

	Default c_Array := ""

	Default n_Posicao := 0

	Default l_AIns := .F.

	// Se for inserir um novo elemento e não tiver posição
	If l_AIns .And. Empty(n_Posicao)
		// Não inseri um novo elemento
		l_AIns := .F.
	EndIf

	If c_Array == "aCoCredAcu"
		// Quantidades de campos
		nQtdeCpo := 9
	ElseIf c_Array == "aCols14"
		// Quantidades de campos
		nQtdeCpo := 9
	ElseIf c_Array == "aCols15"
		// Quantidades de campos
		nQtdeCpo := 9
	EndIf

	If !Empty(c_Array)
		// Se não foi passado uma posição
		If Empty(n_Posicao)
			// Adiciona uma posição
			Aadd(a_Array,Array(nQtdeCpo))
			n_Posicao := Len(a_Array)
		Else
			// Se for inserir
			If l_AIns
				// Inseri um novo elemento
				ASize(a_Array,Len(a_Array)+1)
				AIns(a_Array,n_Posicao)
			EndIf

			// Se não inclui a quantidade de campos na posição
			a_Array[n_Posicao] := Array(nQtdeCpo)
		EndIf
	EndIf

	If c_Array == "aCoCredAcu"

		a_Array[n_Posicao][1] := ""
		a_Array[n_Posicao][2] := ""
		a_Array[n_Posicao][3] := ""
		a_Array[n_Posicao][4] := ""
		a_Array[n_Posicao][5] := 0
		a_Array[n_Posicao][6] := ""
		a_Array[n_Posicao][7] := ""
		a_Array[n_Posicao][8] := ""
		a_Array[n_Posicao][9] := 0

	ElseIf c_Array == "aCols14"

		a_Array[n_Posicao][1] := ""
		a_Array[n_Posicao][2] := Space(08)
		a_Array[n_Posicao][3] := Space(50)
		a_Array[n_Posicao][4] := 0
		a_Array[n_Posicao][5] := 0
		a_Array[n_Posicao][6] := 0
		a_Array[n_Posicao][7] := 0
		a_Array[n_Posicao][8] := 0
		a_Array[n_Posicao][9] := .F.

	ElseIf c_Array == "aCols15"

		a_Array[n_Posicao][1] := ""
		a_Array[n_Posicao][2] := Space(30)
		a_Array[n_Posicao][3] := ""
		a_Array[n_Posicao][4] := 0
		a_Array[n_Posicao][5] := ""
		a_Array[n_Posicao][6] := ""
		a_Array[n_Posicao][7] := ""
		a_Array[n_Posicao][8] := ""
		a_Array[n_Posicao][9] := .F.

	EndIf

Return n_Posicao

/*/{Protheus.doc} fGExtraApu
	(Função para buscar as informações da extra apuração)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param a_SaldoAnt, array, contem as informações saldo anterior
	@param a_CrdTrnPr, array, contem as informações dos créditos transferidos no período
	@param a_CrdUtiPr, array, contem as informações dos créditos utilizados no período
	@param a_SaldoTrn, array, contem as informações do saldo a transportar

	@Return Nil, nulo, Não tem retorno

	@obs #vitor01
	/*/
Static Function fGExtraApu(a_SaldoAnt,a_CrdTrnPr,a_CrdUtiPr,a_SaldoTrn)

	Local nCount := 0

	Default a_SaldoAnt := {}
	Default a_CrdUtiPr := {}
	Default a_CrdTrnPr := {}
	Default a_SaldoTrn := {}

	// Se existe os codigos de ajustes de crédito acumulado
	If !Empty(aCdAjCrdAc)
		// Percorre todo o aCols
		For nCount := 1 To Len(aCols14)
			// Verifica se o codigo de ajuste está na tabela de credito acumulado
			If Ascan(aCdAjCrdAc,{|x| Alltrim(x) == AllTrim(aCols14[nCount][2]) }) > 0
				// SALDO CRÉDITOS FISCAIS DE PERÍODOS ANTERIORES
				If !Empty(Round(aCols14[nCount][4],2))
					// Se for a primeira vez
					If Empty(a_SaldoAnt)
						Aadd(a_SaldoAnt,{0,{}})
					EndIf

					// Total
					a_SaldoAnt[1][1] += aCols14[nCount][4]

					// Adiciona a linha
					Aadd(a_SaldoAnt[1][2],{"",aCols14[nCount][3],aCols14[nCount][4]})

					a_SaldoAnt[1][2][Len(a_SaldoAnt[1][2])][1] := StrZero(Len(a_SaldoAnt[1][2]),2)
				EndIf

				// TOTAL CRÉDITOS RECEBIDO POR TRANSFERÊNCIA
				If !Empty(Round(aCols14[nCount][6],2))
					// Se for a primeira vez
					If Empty(a_CrdTrnPr)
						Aadd(a_CrdTrnPr,{0,{}})
					EndIf

					// Total
					a_CrdTrnPr[1][1] += aCols14[nCount][6]

					Aadd(a_CrdTrnPr[1][2],{"",aCols14[nCount][3],aCols14[nCount][6]})

					a_CrdTrnPr[1][2][Len(a_CrdTrnPr[1][2])][1] := StrZero(Len(a_CrdTrnPr[1][2]),2)
				EndIf

				// TOTAL CRÉDITOS UTILIZADOS NO PERÍODO
				If !Empty(Round(aCols14[nCount][7],2))
					// Se for a primeira vez
					If Empty(a_CrdUtiPr)
						Aadd(a_CrdUtiPr,{0,{}})
					EndIf

					// Total
					a_CrdUtiPr[1][1] += aCols14[nCount][7]

					Aadd(a_CrdUtiPr[1][2],{"",aCols14[nCount][3],aCols14[nCount][7]})

					a_CrdUtiPr[1][2][Len(a_CrdUtiPr[1][2])][1] := StrZero(Len(a_CrdUtiPr[1][2]),2)
				EndIf

				// SALDO DE CRÉDITO FISCAL ACUMULADO A TRANSPORTAR PARA O PERÍODO SEGUINTE
				If !Empty(Round(aCols14[nCount][8],2))
					// Se for a primeira vez
					If Empty(a_SaldoTrn)
						Aadd(a_SaldoTrn,{0,{}})
					EndIf

					// Total
					a_SaldoTrn[1][1] += aCols14[nCount][8]

					Aadd(a_SaldoTrn[1][2],{"",aCols14[nCount][3],aCols14[nCount][8]})

					a_SaldoTrn[1][2][Len(a_SaldoTrn[1][2])][1] := StrZero(Len(a_SaldoTrn[1][2]),2)
				EndIf
			EndIf
		Next
	EndIf

Return Nil

/*/{Protheus.doc} a953CrdApP
	(Função para buscar o Crédito gerado no mês)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param l_Iniciali, logico, se está inicializando ou não.
	@param c_AnoMes, caracter, contem o ano e mes da apuração
	@param c_NrLivro, caracter, contém o numero do livro
	@param a_CrdAprPr, array, contem as informações do crédito gerado no mês

	@Return Nil, nulo, Não tem retorno

	@obs #vitor01
	/*/
Function a953CrdApP(l_Iniciali,c_AnoMes,c_NrLivro,a_CrdAprPr)

	Local nPosicao := 0

	Default l_Iniciali := .T.

	Default c_AnoMes := ""
	Default c_NrLivro := ""

	Default a_CrdAprPr := {}

	// Se não existe a tabela F2R
	If !aApurSX2[AI_F2R]
		Return Nil
	EndIf

	DbSelectArea("F2R")		// APURACAO DE CREDITO ACUMULADO
	F2R->(DbSetOrder(1))	// F2R_FILIAL+F2R_ANOMES+F2R_LIVRO+F2R_CREDAC

	// Se inicializa
	If l_Iniciali
		// Busca encontrar o registro de apuração
		If F2R->(DbSeek(FWxFilial("F2R")+c_AnoMes+c_NrLivro))
			lGrCredAcu := .T.

			// Enquanto for apuração do mes e ano e o livro
			While F2R->(!Eof()).And. FWxFilial("F2R")+c_AnoMes+c_NrLivro == F2R->(F2R_FILIAL+F2R_ANOMES+F2R_LIVRO)
				// Se for a primeira vez
				If Empty(a_CrdAprPr)
					Aadd(a_CrdAprPr,{0,{}})
				EndIf

				// Total
				a_CrdAprPr[1][1] += F2R->F2R_VALOR

				Aadd(a_CrdAprPr[1][2],{"",F2R->F2R_DESCRI,F2R->F2R_VALOR,F2R->F2R_CREDAC,F2R->F2R_CODAJU,F2R->F2R_CODCRE,F2R->F2R_INDICE})

				a_CrdAprPr[1][2][Len(a_CrdAprPr[1][2])][1] := StrZero(Len(a_CrdAprPr[1][2]),2)

				F2R->(DbSkip())
			EndDo

			/*
				Deleta a F2R
				A F2R só vai existir nesse momento se estiver refazendo apuração.
				Nesse caso precisar ser deletado, porque caso seja cancelado a mesma não pode ser carregado novamente.
			*/
			a953DelF2R(c_AnoMes,c_NrLivro)
		EndIf
	Else
		// Busca o registro
		nPosicao := Ascan(aCoCredAcu,{|x| AllTrim(x[1]) == "002" })

		// Se encontrou
		If !Empty(nPosicao)
			Aadd(a_CrdAprPr,{aCoCredAcu[nPosicao][5],{}})

			While .T.
				nPosicao++

				If nPosicao <= Len(aCoCredAcu) .And. Empty(aCoCredAcu[nPosicao][1])
					Aadd(a_CrdAprPr[1][2],{aCoCredAcu[nPosicao][3],aCoCredAcu[nPosicao][4],aCoCredAcu[nPosicao][5],aCoCredAcu[nPosicao][6],aCoCredAcu[nPosicao][7],aCoCredAcu[nPosicao][8],aCoCredAcu[nPosicao][9]})
				Else
					Exit
				EndIf

			EndDo
		EndIf
	EndIf

Return Nil

/*/{Protheus.doc} fMkColumns
	(Função para adicionar uma coluna no Browse em tempo de execução.)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param n_Browser, numerico, qual browser será montado

	@Return aColumns, array, multidimensional contendo objetos da FWBrwColumn.

	@obs #vitor01
	/*/
Static Function fMkColumns(n_Browser)

	Local oColuna := Nil

	Local aColumns := {}

	Default n_Browser := 0

	Do Case
		Case n_Browser == 1	// Browser Saidas incentivadas

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	 	  							// Indica se <E9> editavel
			oColuna:SetTitle("Tipo")									// Define titulo
			oColuna:SetType("C")										// Define tipo
			oColuna:SetSize(50)											// Define tamanho
			oColuna:SetDecimal(0)										// Define decimal
			oColuna:SetPicture("@!")									// Define picture
			oColuna:SetAlign("LEFT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoSaidInc[oBrSaidInc:At()][1] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	 	  							// Indica se <E9> editavel
			oColuna:SetTitle(STR0057)									// Define titulo
			oColuna:SetType("C")										// Define tipo
			oColuna:SetSize(150)										// Define tamanho
			oColuna:SetDecimal(0)										// Define decimal
			oColuna:SetPicture("@!")									// Define picture
			oColuna:SetAlign("LEFT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoSaidInc[oBrSaidInc:At()][2] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	   								// Indica se <E9> editavel
			oColuna:SetTitle("Indice")									// Define titulo
			oColuna:SetType("N")										// Define tipo
			oColuna:SetSize(7)											// Define tamanho
			oColuna:SetDecimal(5)										// Define decimal
			oColuna:SetPicture("@E 9.99999")							// Define picture
			oColuna:SetAlign("RIGHT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoSaidInc[oBrSaidInc:At()][3] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)       									// Indica se <E9> editavel
			oColuna:SetTitle(STR0058)									// Define titulo
			oColuna:SetType("N")										// Define tipo
			oColuna:SetSize(16)											// Define tamanho
			oColuna:SetDecimal(2)										// Define decimal
			oColuna:SetPicture("@E 9,999,999,999,999.99")				// Define picture
			oColuna:SetAlign("RIGHT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoSaidInc[oBrSaidInc:At()][4] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

		Case n_Browser == 2	// Browser Detalhamento do credito acumulado

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	 	 						 	// Indica se <E9> editavel
			oColuna:SetTitle("Item")									// Define titulo
			oColuna:SetType("C")										// Define tipo
			oColuna:SetSize(03)											// Define tamanho
			oColuna:SetDecimal(0)										// Define decimal
			oColuna:SetPicture("@E 999")								// Define picture
			oColuna:SetAlign("LEFT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoCredAcu[oBrCredAcu:At()][1] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	 	  							// Indica se <E9> editavel
			oColuna:SetTitle("Descrição do Item")						// Define titulo
			oColuna:SetType("C")										// Define tipo
			oColuna:SetSize(60)											// Define tamanho
			oColuna:SetDecimal(0)										// Define decimal
			oColuna:SetPicture("@!")									// Define picture
			oColuna:SetAlign("LEFT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoCredAcu[oBrCredAcu:At()][2] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	 	  							// Indica se <E9> editavel
			oColuna:SetTitle("Subitem")									// Define titulo
			oColuna:SetType("C")										// Define tipo
			oColuna:SetSize(10)											// Define tamanho
			oColuna:SetDecimal(0)										// Define decimal
			oColuna:SetPicture("@E 99")									// Define picture
			oColuna:SetAlign("LEFT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoCredAcu[oBrCredAcu:At()][3] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	 	  							// Indica se <E9> editavel
			oColuna:SetTitle("Descrição do Subitem")					// Define titulo
			oColuna:SetType("C")										// Define tipo
			oColuna:SetSize(150)										// Define tamanho
			oColuna:SetDecimal(0)										// Define decimal
			oColuna:SetPicture("@!")									// Define picture
			oColuna:SetAlign("LEFT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoCredAcu[oBrCredAcu:At()][4] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

			oColuna := FWBrwColumn():New()								// Cria objeto
			oColuna:SetEdit(.F.)    	 	  							// Indica se <E9> editavel
			oColuna:SetTitle(STR0058)									// Define titulo
			oColuna:SetType("N")										// Define tipo
			oColuna:SetSize(16)											// Define tamanho
			oColuna:SetDecimal(2)										// Define decimal
			oColuna:SetPicture("@E 9,999,999,999,999.99")				// Define picture
			oColuna:SetAlign("RIGHT")									// Define alinhamento
			oColuna:SetHeaderClick({|| .F. })							// Define click no header
			oColuna:SetData(&("{|| aCoCredAcu[oBrCredAcu:At()][5] }"))	// Define conteudo

			Aadd(aColumns,oColuna)

	EndCase

Return aColumns

/*/{Protheus.doc} fABrwCrdAc
	(Função para atualizar o browser de credito acumulado)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fABrwCrdAc()

	// Atualiza a tela
	oBrCredAcu:SetArray(aCoCredAcu)
	oBrCredAcu:Refresh()
	oBrCredAcu:GoTop()

	// Minimiza o efeito de 'congelamento' da aplicação durante a execução de um processo longo forçando o refresh do Smart Client
	ProcessMessages()

Return Nil

/*/{Protheus.doc} a953AcuCrd
	(Função para acumular credito)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Function a953AcuCrd(aCont)

	Local lContinua := .F.
	Default aCont := {}

	// Valida se pode realizar o acumulo de credito
	Processa({|| lContinua := fVldAcuCrd() },"Buscando o saldo credor","Aguarde...",.F.)

	If lContinua
		// Função para montar a tela
		fScCredAcu(aCont)
	EndIf

Return Nil

/*/{Protheus.doc} fVldAcuCrd
	(Função para validar o acumulo de credito)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return lContinua, logico, se pode continuar ou não

	@obs #vitor01
	/*/
Static Function fVldAcuCrd()

	Local lContinua := .F.

	If lGrCredAcu
		MsgAlert("O acumulo de crédito já foi realizado." + CRLF + CRLF + "Verifique.","Atenção")
	Else
		// Busca o saldo credor
		fGetSldCrd()

		If Empty(nSaldCred)
			MsgAlert("Não existe saldo credor para ser acumulado." + CRLF + CRLF + "Verifique.","Atenção")
		Else
			// Busca a configuração de credto acumulado
			fGetCfCrdA()

			If Empty(aConfCred)
				MsgAlert("Não existe configuração de codigo de ajuste para crédito acumulado." + CRLF + CRLF + "Verifique.","Atenção")
			Else
				// Verifica se tem indice
				Aeval(aConfCred,{|x| IIf(!Empty(x[INDICE_CF]),lContinua := .T.,) })

				If !lContinua
					MsgAlert("Não existe saídas incentivadas. O acumulo de crédito não poderá ser realizado." + CRLF + CRLF + "Verifique.","Atenção")
				EndIf
			EndIf
		EndIf
	EndIf

Return lContinua

/*/{Protheus.doc} fGetSldCrd
	(Função buscar o saldo credor)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno.

	@obs #vitor01
	/*/
Static Function fGetSldCrd()

	Local nPosicao := 0

	// Inicializa a variavel
	nSaldCred := 0

	// Saldo Credor
	nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "014" })

	// Se encontrou o saldo credor
	If !Empty(nPosicao)
		nSaldCred := aCols5[nPosicao][4]
	EndIf

Return Nil

/*/{Protheus.doc} fGetCfCrdA
	(Função para buscar a configuração de credito acumulado)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno.

	@obs #vitor01
	/*/
Static Function fGetCfCrdA()

	Local cMV_Estado := ""

	Local nPosicao := 0
	Local nPosicao2 := 0
	Local nIndice := 0
	Local nValor := 0
	Local nMaiorVlr := 0
	Local nTotal := 0

	DbSelectArea("F2P")		// CODIGO AJUST. CRED. ACUMULADO
	F2P->(DbSetOrder(1))	// F2P_FILIAL+F2P_UF+F2P_CREDAC+F2P_CODCRE+F2P_CODAJU

	DbselectArea("CDO")		// AJUSTES MANUAIS DE APUR. ICMS
	CDO->(DbSetOrder(1))	// CDO_FILIAL+CDO_CODAJU

	aConfCred := {}

	cMV_Estado := AllTrim(GetMv("MV_ESTADO",,""))

	// Busca a configuração do estado
	If F2P->(DbSeek(FWxFilial("F2P")+cMV_Estado))
		// Enquanto for a configuração do estado
		While F2P->(!Eof()) .And. FWxFilial("F2P")+cMV_Estado == F2P->(F2P_FILIAL+F2P_UF)
			// Se o utilização para credito acumulado
			If !Empty(fCdAjuCrdA(F2P->F2P_CODAJU))
				// Inicializa as variaveis
				nIndice := 0
				nValor := 0

				// Pesquisa as saidas incentivadas
				nPosicao := Ascan(aCoSaidInc,{|x| AllTrim(F2P->F2P_CREDAC) $ x[1] })

				// Se tiver a saida e existir indice
				If !Empty(nPosicao) .And. !Empty(aCoSaidInc[nPosicao][3])
					nIndice := aCoSaidInc[nPosicao][3]
					nValor := Round(nSaldCred * nIndice,2)
				EndIf

				// Verifica se o codigo da apuração já se encontra no array
				nPosicao := Ascan(aConfCred,{|x| x[CODAJU_CF] == F2P->F2P_CODAJU })

				// Se não tiver
				If Empty(nPosicao)
					// Adiciona no array
					Aadd(aConfCred,{})
					nPosicao := Len(aConfCred)

					// Adiciona as informações de cabeçalho
					Aadd(aConfCred[nPosicao],F2P->F2P_CODAJU)													// CODAJU_CF
					Aadd(aConfCred[nPosicao],Posicione("CDO",1,FWxFilial("CDO")+F2P->F2P_CODAJU,"CDO_DESCR"))	// DESCRI_CF
					Aadd(aConfCred[nPosicao],Posicione("CDO",1,FWxFilial("CDO")+F2P->F2P_CODAJU,"CDO_CODUTI"))	// CODUTI_CF
					Aadd(aConfCred[nPosicao],0)																	// INDICE_CF
					Aadd(aConfCred[nPosicao],0)																	// VALOR_CF
					Aadd(aConfCred[nPosicao],{})																// DETALHE_CF
				EndIf

				// Soma os valores do cabeçalho
				aConfCred[nPosicao][INDICE_CF] += nIndice
				aConfCred[nPosicao][VALOR_CF] += nValor

				// Adiciona as informações dos itens
				Aadd(aConfCred[nPosicao][DETALHE_CF],{})
				nPosicao2 := Len(aConfCred[nPosicao][DETALHE_CF])

				Aadd(aConfCred[nPosicao][DETALHE_CF][nPosicao2],F2P->F2P_CODCRE)													// CODCRE_DT
				Aadd(aConfCred[nPosicao][DETALHE_CF][nPosicao2],Posicione("CDO",1,FWxFilial("CDO")+F2P->F2P_CODCRE,"CDO_DESCR"))	// DESCRI_DT
				Aadd(aConfCred[nPosicao][DETALHE_CF][nPosicao2],F2P->F2P_CREDAC)													// CREDAC_DT
				Aadd(aConfCred[nPosicao][DETALHE_CF][nPosicao2],nIndice)															// INDICE_DT
				Aadd(aConfCred[nPosicao][DETALHE_CF][nPosicao2],nValor)																// VALOR_DT
			EndIf

			F2P->(DbSkip())
		EndDo
	EndIf

Return Nil

/*/{Protheus.doc} fScCredAcu
	(Função para montar a tela para acumular credito)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fScCredAcu(aCont)

	Local aCoors := {}
	Local aCampos := {}
	Local aTamPane := {}
	Local aEstrut := {}

	Local oFont18 := Nil
	Local oDialog := Nil
	Local oLayer := Nil
	Local oPaneSu := Nil
	Local oPaneIn := Nil
	Local oTSay := Nil
	Local oMsmGet := Nil

	Local bConfirma := {|| }
	Local bCancela := {|| }
	Default aCont := {}

	Private aTELA[0][0]
	Private aGETS[0]

	bConfirma := {|| IIf(!Obrigatorio(aGETS,aTELA),MsgAlert("Existem campos obrigatórios não preenchidos." + CRLF + CRLF + "Verifique.","Atenção"),(nSaldCred := M->CREDIT_MES,fAjusValor(),Processa({|| fAcumCred(aCont) },"Acumulando Crédito","Aguarde...",.F.),oDialog:End())) }
	bCancela := {|| oDialog:End() }

	// Função para retornar o tamanho de uma window maximizada debaixo da window principal do Protheus.
	aCoors := {0,5,458,634.33333333}

	// Fonte do texto
	oFont18 := TFont():New("Arial",,18,,.F.,,,,,.F.,.F.)

	Aadd(aCampos,"SLD_CREDOR")
	Aadd(aCampos,"CREDIT_MES")

	Aeval(aCampos,{|x| _SetOwnerPrvt(x,nSaldCred) })

	Define MsDialog oDialog From aCoors[1],aCoors[2] To aCoors[3],aCoors[4] Pixel Title "Acumula crédito"

		//Inicializa o FWLayer
		oLayer := FWLayer():new()
		oLayer:Init(oDialog,.F.)

		// Adicionando linhas
		oLayer:AddLine("LIN1",35,.F.)
		oLayer:AddLine("LIN2",65,.F.)

		// Adicionando colunas nas linhas
		oLayer:AddCollumn("COL1",100,.F.,"LIN1")
		oLayer:AddCollumn("COL1",100,.F.,"LIN2")

		oLayer:AddWindow("COL1","WIN1","Atenção",100,.F.,.F.,,"LIN1")
		oLayer:AddWindow("COL1","WIN1","Acumula Crédito",080,.F.,.F.,,"LIN2")

		// Pega o painel
		oPaneSu := oLayer:getWinPanel('COL1','WIN1','LIN1')
		oPaneIn := oLayer:getWinPanel('COL1','WIN1','LIN2')

		oTSay := TSay():New(0,0,,oPaneSu,,oFont18,,,,.T.,CLR_BLACK,CLR_WHITE,(oPaneSu:nWidth/2),oPaneSu:nHeight*2,,,,,,.T.)
		oTSay:SetCss("b{ color: #FF0000; }")
		oTSay:SetText(fGetTexto())

		aTamPane := {0,0,(oPaneIn:nClientHeight/2)-1,(oPaneIn:nClientWidth/2)-1}

		// Pega a estrutura do MsmGet
		aEstrut := fMakeStrct(aCampos)

		// Monta o campos
		oMsmGet := MsmGet():New(,,3,,,,aCampos,aTamPane,,,,,,oPaneIn,,.F.,.T.,,.F.,.T.,aEstrut,,.T.,,,.T.)

	Activate MsDialog oDialog Centered On Init EnchoiceBar(oDialog,bConfirma,bCancela)

Return Nil

/*/{Protheus.doc} fGetTexto
	(Função para retornar a mensagem acumulação de credito.)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return cMensagem, caracter, mensagem.
	/*/
Static Function fGetTexto()

	Local cMensagem := ""

	cMensagem := "<p>"
	cMensagem += "O controle segregado de crédito acumulado, comprovado pelo contribuinte de ICMS, poderá ser apurado por uma sistemática simplificada. "
	cMensagem += "<br>"
	cMensagem += "</p>"
	cMensagem += "<p>"
	cMensagem += "Esta rotina faz a apuração das saídas do período,  separada por tipo de operação incentivada. Segregando o valor do crédito informado por cada um dos incentivos. "
	cMensagem += "</p>"

Return cMensagem

/*/{Protheus.doc} fMakeStrct
	(Função para montar array com a estrutura dos campos para msmget.)

	@type Static Function
	@author Vitor Ribeiro
	@since 05/02/2018

	@param a_Campos, array, campos do msmget.

	@return aEstrut, array, estrutura do msmget.
	/*/
Static Function fMakeStrct(a_Campos)

	Local nPosicao := 0

	Local aEstrut := {}

	Default a_Campos := {}

	// Monta a estrutura
	nPosicao := AddStruct(@aEstrut)

	aEstrut[nPosicao][01] := "Valor do Saldo Credor"
	aEstrut[nPosicao][02] := a_Campos[nPosicao]
	aEstrut[nPosicao][03] := "N"
	aEstrut[nPosicao][04] := 8
	aEstrut[nPosicao][06] := "@E 99,999,999,999.99"
	aEstrut[nPosicao][10] := a_Campos[nPosicao]
	aEstrut[nPosicao][12] := {|| .F. }

	// Monta a estrutura
	nPosicao := AddStruct(@aEstrut)

	aEstrut[nPosicao][01] := "Valor para Acumular Crédito"
	aEstrut[nPosicao][02] := a_Campos[nPosicao]
	aEstrut[nPosicao][03] := "N"
	aEstrut[nPosicao][04] := 8
	aEstrut[nPosicao][06] := "@E 99,999,999,999.99"
	aEstrut[nPosicao][07] := &("{|| fValida() }")
	aEstrut[nPosicao][08] := .T.
	aEstrut[nPosicao][10] := a_Campos[nPosicao]
	aEstrut[nPosicao][12] := {|| .T. }

Return aEstrut

/*/{Protheus.doc} AddStruct
	(Função para adicionar um linha da estrutura do MsmGet.)

	@type Static Function
	@author Vitor Ribeiro
	@since 05/02/2018

	@param a_Estrut, array, contem a estrutura do msmget.

	@return nPosicao, numerico, retorna a posição do array.
	/*/
Static Function AddStruct(a_Estrut)

	Local nPosicao := 0

	Default a_Estrut := {}

	Aadd(a_Estrut,{})
	nPosicao := Len(a_Estrut)

	Aadd(a_Estrut[nPosicao],"")			// 01 - Titulo
	Aadd(a_Estrut[nPosicao],"")			// 02 - Campo
	Aadd(a_Estrut[nPosicao],"")			// 03 - Tipo
	Aadd(a_Estrut[nPosicao],0)			// 04 - Tamanho
	Aadd(a_Estrut[nPosicao],0)			// 05 - Decimal
	Aadd(a_Estrut[nPosicao],"")			// 06 - Picture
	Aadd(a_Estrut[nPosicao],{|| .T. })	// 07 - Valid
	Aadd(a_Estrut[nPosicao],.F.)		// 08 - Obrigat
	Aadd(a_Estrut[nPosicao],1)			// 09 - Nivel
	Aadd(a_Estrut[nPosicao],"")			// 10 - Inicializador Padrão
	Aadd(a_Estrut[nPosicao],"")			// 11 - F3
	Aadd(a_Estrut[nPosicao],{|| })		// 12 - When
	Aadd(a_Estrut[nPosicao],.F.)		// 13 - Visual
	Aadd(a_Estrut[nPosicao],.F.)		// 14 - Chave
	Aadd(a_Estrut[nPosicao],"")			// 15 - Box - Opção do combo
	Aadd(a_Estrut[nPosicao],0)			// 16 - Folder
	Aadd(a_Estrut[nPosicao],.F.)		// 17 - Não Alterável
	Aadd(a_Estrut[nPosicao],"")			// 18 - PictVar
	Aadd(a_Estrut[nPosicao],"N")		// 19 - Gatilho

Return nPosicao

/*/{Protheus.doc} fValida
	(Função para validar as informações do campo.)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return lContinua, logico, se continua ou não.

	@obs #vitor01
	/*/
Static Function fValida()

	Local lContinua := .F.

	// Se for valor negativo ou zerado
	If M->CREDIT_MES <= 0
		MsgAlert("O valor a ser acumulado não poder ser negativo ou zerado." + CRLF + CRLF + "Verifique.","Atenção")
	ElseIf M->CREDIT_MES > M->SLD_CREDOR
		MsgAlert("O valor a ser acumulado não poder ser maior que o Saldo Credor." + CRLF + CRLF + "Verifique.","Atenção")
	Else
		nSaldCred := M->CREDIT_MES

		// Ajusta o valor
		fAjusValor()

		lContinua := .T.
	EndIf

Return lContinua

/*/{Protheus.doc} fAjusValor
	(Função para ajustar o valor do array de configuração de credito acumulado)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fAjusValor()

	Local nCount1 := 0
	Local nCount2 := 0
	Local nIndice := 0
	Local nValor := 0
	Local nTotal := 0
	Local nMaiorVlr := 0
	Local nPosicao1 := 0
	Local nPosicao2 := 0
	Local nSobra := 0

	// Ajusta o valor
	Aeval(aConfCred,{|x| x[VALOR_CF] := nSaldCred * x[INDICE_CF], Aeval(x[DETALHE_CF],{|y| y[VALOR_DT] := nSaldCred * y[INDICE_DT] }) })

	// Percorre o primeiro array
	For nCount1 := 1 To Len(aConfCred)
		nIndice := 0
		nValor := 0

		// Percorre o segundo array
		For nCount2 := 1 To Len(aConfCred[nCount1][DETALHE_CF])
			// Adiciona o valor
			aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT] := Round(nSaldCred * aConfCred[nCount1][DETALHE_CF][nCount2][INDICE_DT],2)

			// Soma o indice
			nIndice += aConfCred[nCount1][DETALHE_CF][nCount2][INDICE_DT]

			// Soma o valor
			nValor += aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]

			// Se for o maior valor
			If nMaiorVlr < aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]
				// Guarda o valor
				nMaiorVlr := aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]

				// Guarda a posição
				nPosicao1 := nCount1
				nPosicao2 := nCount2
			EndIf
		Next

		// Adiciona o valor
		aConfCred[nCount1][INDICE_CF] := nIndice

		// Adiciona o indice
		aConfCred[nCount1][VALOR_CF] := nValor
	Next

	/*
		Esse treicho é para ajuste de sobra de valor.
	*/

	// Pega o valor total
	Aeval(aConfCred,{|x| Aeval(x[DETALHE_CF],{|y| nTotal += y[VALOR_DT] }) })

	// Se o valor total for diferente do saldo
	If nTotal <> nSaldCred
		// Faz total menos o saldo do credor
		nSobra := nTotal - nSaldCred

		// Se a sobra for positiva
		If nSobra > 0
			// Subtrai do maior valor
			aConfCred[nPosicao1][DETALHE_CF][nPosicao2][VALOR_DT] -= nSobra
		Else
			// Faz saldo do credor menos o total
			nSobra := nSaldCred - nTotal

			// Se a sobra for positiva
			If nSobra > 0
				// Soma do maior valor
				aConfCred[nPosicao1][DETALHE_CF][nPosicao2][VALOR_DT] += nSobra
			EndIf
		EndIf
	EndIf

Return Nil

/*/{Protheus.doc} fAcumCred
	(Função para realizar o acumulo de credito.)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fAcumCred(aCont)

	Local lContinua := .F.

	// Função para incluir o estorno de credito.
	lContinua := fIncEstCrd(aCont)

	If lContinua
		// Função para incluir créditos extra apuração
		lContinua := fIncCrdExt()
	EndIf

	If lContinua
		// Função para incluir o credito acumulado
		lContinua := fIncCrdAcu()
	EndIf

	If lContinua
		lGrCredAcu := .T.

		// Função para atualizar o array do credito acumulado
		fCoCredAcu(.F.)

		// Atualiza o browser de credito acumulado
		fABrwCrdAc()

		MsgAlert("Operação realizada com sucesso!","Atenção")
	EndIf

Return Nil

/*/{Protheus.doc} fIncEstCrd
	(Função para incluir o estorno de credito.)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return lContinua, logico, se incluiu ou não.

	@obs #vitor01
	/*/
Static Function fIncEstCrd(aCont)

	Local lContinua := .T.

	Local nCount1 := 0
	Local nCount2 := 0
	Local nPos002 := 0
	Local nPos003 := 0
	Local nTotal002 := 0
	Local nTotal003 := 0
	Local nPosicao := 0

	Local cTipo := ""
	Local cUtili := ""
	Local cLinha := ""
	Local cCod002 := ""
	Local cCod003 := ""
	Local cCodigo := ""

	Default aCont :={}

	If Empty(nSaldCred) .Or. Empty(aConfCred)
		lContinua := .F.
	EndIf

	If lContinua
		// Procura o item dentro do acols da Apuração-ICMS
		nPos002 := Ascan(aCols5,{|x| AllTrim(x[1]) == "002" .And. AllTrim(x[2]) == "002.00" })

		If !Empty(nPos002)
			nPos002--
			Aeval(aCols5,{|x| IIf(AllTrim(x[1]) == "003" .And. x[Len(aCols5[1])] == .F.,nPos002++,) })
			cCod002 := aCols5[nPos002][2]
		EndIf

		// Procura o item dentro do acols da Apuração-ICMS
		nPos003 := Ascan(aCols5,{|x| AllTrim(x[1]) == "003" .And. AllTrim(x[2]) == "003.00" })

		If !Empty(nPos003)
			nPos003--
			Aeval(aCols5,{|x| IIf(AllTrim(x[1]) == "003" .And. x[Len(aCols5[1])] == .F.,nPos003++,) })
			cCod003 := aCols5[nPos003][2]
		EndIf

		For nCount1 := 1 To Len(aConfCred)
			// Se tiver valor
			If !Empty(aConfCred[nCount1][VALOR_CF])
				// Função para verificar a utilização para credito acumulado
				cUtili := fCdAjuCrdA(aConfCred[nCount1][CODAJU_CF])

				If cUtili $ "0|1"
					If cUtili $ "0"
						nPos002++
						nPos003++

						nPosicao := nPos002
						cCodigo := cCod002
						cLinha := "002"

						nTotal002 += aConfCred[nCount1][VALOR_CF]
					ElseIf cUtili $ "1"
						nPos003++

						nPosicao := nPos003
						cCodigo := cCod003
						cLinha := "003"

						nTotal003 += aConfCred[nCount1][VALOR_CF]
					EndIf

					ASize(aCols5,Len(aCols5)+1)
					AIns(aCols5,nPosicao)

					aCols5[nPosicao] := Array(Len(aHeader5)+1)

					For nCount2 := 1 To Len(aHeader5)
						cTipo := aHeader5[nCount2][8]

						If cTipo $ "CM"
							aCols5[nPosicao][nCount2] := Space(aHeader5[nCount2][4])
						ElseIf cTipo == "N"
							aCols5[nPosicao][nCount2] := 0
						ElseIf cTipo == "L"
							aCols5[nPosicao][nCount2] := .F.
						ElseIf cTipo == "D"
							aCols5[nPosicao][nCount2] := Ctod("")
						EndIf
					Next

					// Pega o proximo codigo
					cCodigo := PadR(SubStr(cCodigo,1,at(".",cCodigo)) + Soma1(SubStr(cCodigo,at(".",cCodigo)+1,Len(AllTrim(SubStr(cCodigo,at(".",cCodigo)+1))))),Len(aCols5[nPosicao][2]))

					aCols5[nPosicao][1] := cLinha
					aCols5[nPosicao][2] := CodSubItem(alltrim(cLinha), aCont,1)
					aCols5[nPosicao][3] := aConfCred[nCount1][DESCRI_CF]
					aCols5[nPosicao][4] := aConfCred[nCount1][VALOR_CF]

					//-- Se utilizar SPED
					If Len(aHeader5) > 7
						aCols5[nPosicao][7] := aConfCred[nCount1][CODAJU_CF]
						aCols5[nPosicao][8] := a953TpLanc("CA")
					EndIf
					aCols5[nPosicao][Len(aHeader5)+1] := .F.

					If cUtili $ "0"
						nPos002 := nPosicao
						cCod002 := cCodigo
					ElseIf cUtili $ "1"
						nPos003 := nPosicao
						cCod003 := cCodigo
					EndIf
				EndIf
			EndIf
		Next

		// Procura o item dentro do acols da Apuração-ICMS
		nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "002" .And. AllTrim(x[2]) == "002.00" })

		If !Empty(nPosicao)
			aCols5[nPosicao][4] += nTotal002
		EndIf

		// Procura o item dentro do acols da Apuração-ICMS
		nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "003" .And. AllTrim(x[2]) == "003.00" })

		If !Empty(nPosicao)
			aCols5[nPosicao][4] += nTotal003
		EndIf

		// Sub total - debito do imposto
		nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "004" })

		If !Empty(nPosicao)
			aCols5[nPosicao][4] += nSaldCred
		EndIf

		// Saldo Credor
		nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "014" })

		If !Empty(nPosicao)
			aCols5[nPosicao][4] -= nSaldCred
		EndIf
	EndIf

Return lContinua

/*/{Protheus.doc} fIncCrdExt
	(Função para incluir créditos extra apuração.)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return lContinua, logico, se incluiu ou não.

	@obs #vitor01
	/*/
Static Function fIncCrdExt()

	Local lContinua := .T.

	Local nPosicao := 0
	Local nPosApuExt := 0
	Local nCount1 := 0
	Local nCount2 := 0
	Local nCount3 := 0

	Local aExtraDet := {}

	Local cLinha := ""

	If Empty(nSaldCred) .Or. Empty(aConfCred)
		lContinua := .F.
	EndIf

	If lContinua
		For nCount1 := 1 To Len(aConfCred)
			For nCount2 := 1 To Len(aConfCred[nCount1][DETALHE_CF])
				// Se tiver valor
				If !Empty(aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT])
					nPosicao := Ascan(aCols14,{|x| AllTrim(x[2]) == aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT] })

					If Empty(nPosicao)
						// Adiciona um registro no array aCols14
						nPosicao := fAddArray(@aCols14,"aCols14",Len(aCols14),.T.)

						For nCount3 := 1 To Len(aHeader14)
							If aHeader14[nCount3][8] $ "CM"
								aCols14[nPosicao][nCount3] := Space(aHeader14[nCount3][4])
							ElseIf aHeader14[nCount3][8] == "N"
								aCols14[nPosicao][nCount3] := 0
							ElseIf aHeader14[nCount3][8] == "L"
								aCols14[nPosicao][nCount3] := .F.
							ElseIf aHeader14[nCount3][8] == "D"
								aCols14[nPosicao][nCount3] := Ctod("")
							EndIf
						Next

						aCols14[nPosicao][2] := aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT]
						aCols14[nPosicao][3] := aConfCred[nCount1][DETALHE_CF][nCount2][DESCRI_DT]
						aCols14[nPosicao][Len(aHeader14)+1] := .F.
					EndIf

					aCols14[nPosicao][5] += aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]
					aCols14[nPosicao][8] += aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]

					If aCols14[nPosicao][8] >= 0
						aCols14[nPosicao][1] := "br_azul"
					Else
						aCols14[nPosicao][1] := "br_preto"
					EndIf

					nPosApuExt := Ascan(aApurExtra,{|x| AllTrim(x[1]) == aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT] })

					If Empty(nPosApuExt)
						//Adiciona o código no aApurExtra
						Aadd(aApurExtra,{aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT],aConfCred[nCount1][DETALHE_CF][nCount2][DESCRI_DT],0,0,0,0,0,{}})
						nPosApuExt := Len(aApurExtra)

						//Cria nova apuração detalhada
						aExtraDet := AdExtraDet(aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT])
						aApurExtra[nPosApuExt][8] := aExtraDet[6]
					EndIf

					aApurExtra[nPosApuExt][4] += aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]
					aApurExtra[nPosApuExt][7] += aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]

					cLinha := DefLinExtra("R")

					nPosicao := Ascan(aApurExtra[nPosApuExt][8],{|x| AllTrim(x[1]) == cLinha })

					If !Empty(nPosicao)
						ASize(aApurExtra[nPosApuExt][8],Len(aApurExtra[nPosApuExt][8])+1)
						AIns(aApurExtra[nPosApuExt][8],nPosicao+1)

						aApurExtra[nPosApuExt][8][nPosicao+1] := Array(Len(aHeader15)+1)
						aApurExtra[nPosApuExt][8][nPosicao+1][1] := aApurExtra[nPosApuExt][8][nPosicao][1]
						aApurExtra[nPosApuExt][8][nPosicao+1][2] := space(30)
						aApurExtra[nPosApuExt][8][nPosicao+1][3] := aConfCred[nCount1][CODUTI_CF]
						aApurExtra[nPosApuExt][8][nPosicao+1][4] := aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]
						aApurExtra[nPosApuExt][8][nPosicao+1][5] := ""
						aApurExtra[nPosApuExt][8][nPosicao+1][6] := ""
						aApurExtra[nPosApuExt][8][nPosicao+1][7] := aConfCred[nCount1][CODAJU_CF]
						aApurExtra[nPosApuExt][8][nPosicao+1][8] := a953TpLanc("CA") + FWUUID("MATA953")
						aApurExtra[nPosApuExt][8][nPosicao+1][Len(aHeader15)+1] := .F.

						aApurExtra[nPosApuExt][8][nPosicao][4] += aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]
					EndIf
				EndIf
			Next
		Next

	EndIf

Return lContinua

/*/{Protheus.doc} fIncCrdAcu
	(Função para incluir o credito acumulado)

	@type Static Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return lContinua, logico, se incluiu ou não.

	@obs #vitor01
	/*/
Static Function fIncCrdAcu()

	Local lContinua := .T.

	Local nPosicao1 := 0
	Local nPosicao2 := 0
	Local nCount1 := 0
	Local nCount2 := 0
	Local nCount3 := 0

	If Empty(nSaldCred) .Or. Empty(aConfCred)
		lContinua := .F.
	EndIf

	If lContinua
		// Busca o registro
		nPosicao1 := Ascan(aCoCredAcu,{|x| AllTrim(x[1]) == "002" })

		// Se encontrou
		If !Empty(nPosicao1)
			aCoCredAcu[nPosicao1][5] := nSaldCred

			For nCount1 := 1 To Len(aConfCred)
				For nCount2 := 1 To Len(aConfCred[nCount1][DETALHE_CF])
					// Busca configuração de credito acumulado
					nPosicao2 := Ascan(aP2PCREDAC,{|x| aConfCred[nCount1][DETALHE_CF][nCount2][CREDAC_DT] $ AllTrim(x[1]) })

					If !Empty(nPosicao2)
						nCount3++

						ASize(aCoCredAcu,Len(aCoCredAcu)+1)
						AIns(aCoCredAcu,nPosicao1+nCount3)

						// Função para adicionar no array
						fAddArray(@aCoCredAcu,"aCoCredAcu",nPosicao1+nCount3)

						aCoCredAcu[nPosicao1+nCount3][03] := StrZero(nCount3,2)
						aCoCredAcu[nPosicao1+nCount3][04] := "Crédito " + aP2PCREDAC[nPosicao2][DESCRI_DT]		// F2R_DESCRI
						aCoCredAcu[nPosicao1+nCount3][05] := aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]	// F2R_VALOR
						aCoCredAcu[nPosicao1+nCount3][06] := aConfCred[nCount1][DETALHE_CF][nCount2][CREDAC_DT]	// F2R_CREDAC
						aCoCredAcu[nPosicao1+nCount3][07] := aConfCred[nCount1][CODAJU_CF]						// F2R_CODAJU
						aCoCredAcu[nPosicao1+nCount3][08] := aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT]	// F2R_CODCRE
						aCoCredAcu[nPosicao1+nCount3][09] := aConfCred[nCount1][DETALHE_CF][nCount2][INDICE_DT]	// F2R_INDICE
					EndIf
				Next
			Next
		EndIf
	EndIf

Return lContinua

/*/{Protheus.doc} a953Vld5Col
	(Função para validar as informações da aba de Apuração-ICMS.)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Function a953Vld5Col()

	Local lContinua := .T.

	If lACredAcu

	If ReadVar() == "M->NVALOR"
		If SubStr(aCols[n][8],1,2) == "CA"
			MsgAlert("Estorno incluído pelo processo de Crédito Acumulado. O valor não pode ser alterado." + CRLF + CRLF + "Verifique.","Atenção")
			lContinua := .F.
		EndIf
	ElseIf ReadVar() == "M->CCODLAN"
		If SubStr(aCols[n][8],1,2) == "CA"
			MsgAlert("Estorno incluído pelo processo de Crédito Acumulado. O código de lançamento não pode ser alterado." + CRLF + CRLF + "Verifique.","Atenção")
			lContinua := .F.
		EndIf
	EndIf

	EndIf

Return lContinua

/*/{Protheus.doc} a953EstCrd
	(Função para estornar o credito acumulado)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Function a953EstCrd()

	Local nPosicao := 0

	If lGrCredAcu
		If Empty(nSaldCred)
			// Busca o registro
			nPosicao := Ascan(aCoCredAcu,{|x| AllTrim(x[1]) == "002" })

			nSaldCred := aCoCredAcu[nPosicao][5]
		EndIf

		If Empty(aConfCred)
			// Busca a configuração de credto acumulado
			fGetCfCrdA()

			fAjusValor()
		EndIf

		If Empty(aConfCred)
			MsgAlert("Não existe configuração de codigo de ajuste para crédito acumulado." + CRLF + CRLF + "Verifique.","Atenção")
		ElseIf MsgNoYes("As operações realizadas pelo acumulo de crédito serão estornadas. Deseja continuar?","Atenção")
			// Função para estornar o crédito
			Processa({|| fEstCrdAcu() },"Estornando o acumulo de crédito","Aguarde...",.F.)
		EndIf
	Else
		MsgAlert("Não foi realizado o acumulo de crédito." + CRLF + CRLF + "Verifique.","Atenção")
	EndIf

Return Nil

/*/{Protheus.doc} fEstCrdAcu
	(Função para estornar o credito acumulado)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fEstCrdAcu()

	Local lContinua := .F.

	// Função para excluir o estorno de credito.
	lContinua := fExcEstCrd()

	If lContinua
		// Função para excluir os créditos extra apuração
		lContinua := fExcCrdExt()
	EndIf

	If lContinua
		// Função para excluir o credito acumulado
		lContinua := fExcCrdAcu()
	EndIf

	If lContinua
		lGrCredAcu := .F.

		// Função para atualizar o array do credito acumulado
		fCoCredAcu(.F.)

		// Atualiza o browser de credito acumulado
		fABrwCrdAc()

		MsgAlert("Operação realizada com sucesso!","Atenção")
	EndIf

Return Nil

/*/{Protheus.doc} fExcEstCrd
	(Função para excluir o estornar de credito acumulado)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fExcEstCrd()

	Local lContinua := .T.

	Local nPosicao := 0
	Local nVlr002 := 0
	Local nVlr003 := 0
	Local nValor := 0

	Local cCodigo := ""

	If Empty(nSaldCred) .Or. Empty(aConfCred)
		lContinua := .F.
	EndIf

	If lContinua
		While .T.
			nPosicao := Ascan(aCols5,{|x| "CA" $ x[8] })

			If Empty(nPosicao)
				Exit
			Else
				nValor += aCols5[nPosicao][4]

				If aCols5[nPosicao][1] == "002"
					nVlr002 += aCols5[nPosicao][4]
				ElseIf aCols5[nPosicao][1] == "003"
					nVlr003 += aCols5[nPosicao][4]
				EndIf

				ADel(aCols5,nPosicao)
				ASize(aCols5,Len(aCols5)-1)
			EndIf
		EndDo

		If !Empty(nValor)
			If !Empty(nVlr002)
				// Procura o item dentro do acols da Apuração-ICMS
				nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "002" .And. AllTrim(x[2]) == "002.00" })

				// Se encontrou a posição
				If !Empty(nPosicao)
					aCols5[nPosicao][4] -= nVlr002

					cCodigo := "00"
					nPosicao++

					While nPosicao <= Len(aCols5) .And. aCols5[nPosicao][1] == "002"
						cCodigo := Soma1(cCodigo)

						aCols5[nPosicao][2] := "002." + cCodigo
						nPosicao++
					EndDo
				EndIf
			EndIf

			If !Empty(nVlr003)
				// Procura o item dentro do acols da Apuração-ICMS
				nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "003" .And. AllTrim(x[2]) == "003.00" })

				// Se encontrou a posição
				If !Empty(nPosicao)
					aCols5[nPosicao][4] -= nVlr003

					cCodigo := "00"
					nPosicao++

					While nPosicao <= Len(aCols5) .And. aCols5[nPosicao][1] == "003"
						cCodigo := Soma1(cCodigo)

						aCols5[nPosicao][2] := "003." + cCodigo
						nPosicao++
					EndDo
				EndIf
			EndIf

			// Sub total - debito do imposto
			nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "004" })

			If !Empty(nPosicao)
				aCols5[nPosicao][4] -= nValor
			EndIf

			// Saldo Credor
			nPosicao := Ascan(aCols5,{|x| AllTrim(x[1]) == "014" })

			If !Empty(nPosicao)
				aCols5[nPosicao][4] += nValor
			EndIf
		EndIf
	EndIf

Return lContinua

/*/{Protheus.doc} fExcCrdExt
	(Função para excluir os créditos extra apuração)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fExcCrdExt()

	Local lContinua := .T.

	Local nPosicao := 0
	Local nCount1 := 0
	Local nCount2 := 0

	If Empty(nSaldCred) .Or. Empty(aConfCred)
		lContinua := .F.
	EndIf

	If lContinua
		For nCount1 := 1 To Len(aConfCred)
			For nCount2 := 1 To Len(aConfCred[nCount1][DETALHE_CF])
				// Se tiver valor
				If !Empty(aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT])
					nPosicao := Ascan(aCols14,{|x| AllTrim(x[2]) == aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT] })

					If !Empty(nPosicao)
						aCols14[nPosicao][5] -= aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]
						aCols14[nPosicao][8] -= aConfCred[nCount1][DETALHE_CF][nCount2][VALOR_DT]
					EndIf

					If Empty(Round(aCols14[nPosicao][8],2))
						ADel(aCols14,nPosicao)
						ASize(aCols14,Len(aCols14)-1)

						nPosicao := Ascan(aApurExtra,{|x| AllTrim(x[1]) == aConfCred[nCount1][DETALHE_CF][nCount2][CODCRE_DT] })

						If !Empty(nPosicao)
							ADel(aApurExtra,nPosicao)
							ASize(aApurExtra,Len(aApurExtra)-1)
						EndIf
					EndIf
				EndIf
			Next
		Next
	EndIf

Return lContinua

/*/{Protheus.doc} fExcCrdAcu
	(Função para excluir o credito acumulado)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@return Nil, nulo, não tem retorno

	@obs #vitor01
	/*/
Static Function fExcCrdAcu()

	Local lContinua := .T.

	Local nPosicao := 0
	Local nCount1 := 0
	Local nCount2 := 0

	If Empty(nSaldCred) .Or. Empty(aConfCred)
		lContinua := .F.
	EndIf

	If lContinua
		// Busca o registro
		nPosicao := Ascan(aCoCredAcu,{|x| AllTrim(x[1]) == "002" })

		// Se encontrou
		If !Empty(nPosicao)
			aCoCredAcu[nPosicao][5] := 0
			nPosicao++

			While nPosicao <= Len(aCoCredAcu) .And. Empty(aCoCredAcu[nPosicao][1])
				ADel(aCoCredAcu,nPosicao)
				ASize(aCoCredAcu,Len(aCoCredAcu)-1)
			EndDo
		EndIf
	EndIf

Return lContinua

/*/{Protheus.doc} fCdAjuCrdA
	(Função para verificar a utilização para credito acumulado)

	@type Function
	@author Vitor Ribeiro
	@since 18/07/2018

	@param c_CodAju, caracter, codigo de ajuste

	@return cUtili, caracter, retorna a utilização do codigo de ajuste

	@obs #vitor01
	/*/
Static Function fCdAjuCrdA(c_CodAju)

	Local cUtili := ""

	Default c_CodAju := ""

	If !Empty(c_CodAju)
		// CDO_UTILI
		cUtili := SubStr(c_CodAju,4,1)

		// Se a utilização não for 0 - Outros Débitos ou 1 - Estorno de Créditos
		If !(cUtili $ "0|1")
			cUtili := ""
		EndIf
	EndIf

Return cUtili

/*/{Protheus.doc} fVlProcRef
	(Função para validar a informação de processos referenciados)
	@type Function
	@author Paulo Krüger
	@since 17/09/2018
	@param cChave, caracter, Chave de busca a processos referenciados
	@return lógico
/*/

Function fVlProcRef(cChave, cTipo)
Local	lRet	:=	.T.
Local	cMens	:=	''
Local	cAno	:=	''
Local	cMes	:=	''
Local	xCondFil:=	Nil

cMes := StrZero(mv_par01,02)
cAno := ALLTRIM(STR(mv_par02))

Default cChave	:=	''
Default cTipo	:=	''

If !Empty(cChave)

	If !(cTipo $ ' 0129') .and. !Empty(cTipo)
		lRet := .F.
		cMens := STR0292 + cTipo	+	CRLF		//Tipo inválido:
		cMens += ''					+	CRLF
		cMens += STR0293 			+	CRLF		//Opções válidas:
		cMens += STR0294			+	CRLF		//0 - Sefaz
		cMens += STR0295			+	CRLF		//1 - Justiça Federal
		cMens += STR0296			+	CRLF		//2 - Justiça Estadual
		cMens += STR0297							//9 - Outros
	EndIf

	If lRet
		CCF->(DbSetOrder(01))
		If !CCF->(DbSeek(cChave))
			lRet := .F.
			cMens:= STR0290 //Processo referenciado nao existe!
		Else
			If Empty(CCF->CCF_DTINI) .and. Empty(CCF->CCF_DTFIN)
				xCondFil := '.T.'
			ElseIf !Empty(CCF->CCF_DTINI) .and. Empty(CCF->CCF_DTFIN)
				xCondFil := "(SUBSTR(DTOS(CCF->CCF_DTINI),01,06) <=  '"+ cAno + cMes +"')"
			ElseIf Empty(CCF->CCF_DTINI) .and. !Empty(CCF->CCF_DTFIN)
				xCondFil := "(SUBSTR(DTOS(CCF->CCF_DTFIN ),01,06) >= '"+ cAno + cMes +"')"
			ElseIf !Empty(CCF->CCF_DTINI) .and. !Empty(CCF->CCF_DTFIN)
				xCondFil := "(SUBSTR(DTOS(CCF->CCF_DTINI),01,06) <=  '"+ cAno + cMes +"' .and. SUBSTR(DTOS(CCF->CCF_DTFIN ),01,06) >= '"+ cAno + cMes +"')"
			EndIf

			If (!&(xCondFil))
				lRet := .F.
				cMens:= STR0291 //Data de vigência do processo inválida!
			EndIf
		EndIf
	EndIf
EndIf

If !lRet
	MsgAlert(cMens)
EndIf

Return(lRet)

//-------------------------------------------------------------------
/*/{Protheus.doc} FisFillCod

Função para carga inicial nos campos CDO_SUBAP e CC6_SUBAP quando os campos forem criados.

DSERFIS1-11789

@author pereira.weslley
@since 11/04/2019
@version 01.00
/*/
//-------------------------------------------------------------------
Static Function FisFillCod(oSay, lAutomato)

	DbSelectArea("CDO")
	DbSetOrder(1)

	If (aApurSX3[FP_CDO_SUBAP]) /*.And. (CC6->(FieldPos("CC6_SUBAP")) > 0)*/
		Begin Transaction
			If !lAutomato
				oSay:cCaption := ("Atualizando códigos...")
				ProcessMessages()
			EndIf

			CDO->(msSeek(xFilial("CDO")+"PE"))

			While !CDO->(EOF()) .And. (CDO->CDO_FILIAL == xFilial("CDO"))
				If Empty(CDO->CDO_SUBAP)
					RecLock("CDO", .F.)
					CDO->CDO_SUBAP := "2"
					MsUnLock()
				EndIf
				CDO->(dbSkip())
			EndDo

			// dbSelectArea("CC6")
			// DbSetOrder(1)
			// CC6->(msSeek(xFilial("CC6")+"PE"))

			// While !CC6->(EOF()) .And. (CC6->CC6_FILIAL == xFilial("CC6"))
			// 	If  Empty(CC6->CC6_SUBAP)
			// 		RecLock("CC6", .F.)
			// 		CC6->CC6_SUBAP :="2"
			// 		MsUnLock()
			// 	EndIf
			// 	CC6->(dbSkip())
			// EndDo

			CD0->(dbGoTop())
			// CC6->(dbGoTop())
		End Transaction
	EndIf

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} a953AtuCre

Função para atualizar os valores de saldo credor do período anterior preenchidos na aba ST-Entradas para Apuração - ST

DSERFIS1-14223

@author matheus.massarotto
@since 11/10/2019
@version 01.00
/*/
//-------------------------------------------------------------------
Function a953AtuCre()
Local nValAntSt := 0
Local n011	    :=	Ascan(aCols6,{|x|x[1]=="011"}) //Saldo credor do periodo anterior
Local nX        := 0
Local lObj		:= Iif(Type("O")=="O",.T.,.F.)
Local lN		:= Iif(Type("N")=="N",.T.,.F.)
Local lRet		:= .T.
Local nLinAtu	:= 0
Local lProb		:= .F.
Local nPosSDCre := Ascan(aHeader3,{|x|x[2]=="SALDCRE"})
Local nPosValaH6:= Ascan(aHeader6,{|x|x[2]=="nValor"})

if lObj
	nLinAtu:= O:nAt
elseif lN
	nLinAtu:= N
else
	lProb:= .T.
endif

if !lProb .and. n011>0 .and. nPosSDCre>0 .and. nPosValaH6>0

	For nX := 1 To Len(aCols)

		if nX == nLinAtu .and. ReadVar() == "M->SALDCRE"
			nValAntSt+= iif(aCols[nX, Len(aCols[nX])],0,&(ReadVar())) //Se for deletado retorno 0, se não retorno o valor do campo
		else
			nValAntSt+= iif(aCols[nX, Len(aCols[nX])],0,aCols[nX][nPosSDCre])// ST - Entradas, Saldo credor do Periodo Anterior , Se for deletado retorno 0, se não retorno o valor do campo
		endif

	Next

	aCols6[n011,nPosValaH6]:=nValAntSt

	a953Saldo(.T.,.T.,.F.,.F.)

else

	MsgAlert(STR0298) //"Não é possível realizar alteração neste campo"
	lRet	:= .F.

endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} a953CPO3ALT

Função para determinar quais campos são alteráveis no Acols3

DSERFIS1-14223

@author matheus.massarotto
@since 11/10/2019
@version 01.00
/*/
//-------------------------------------------------------------------

Function a953CPO3ALT(oGetDad)

	oGetDad:aAlter := {"F3_ESTADO","SALDCRE"}
	oGetDad:oMother:aAlter := {"F3_ESTADO","SALDCRE"}

return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} a953Lin3Ok

Função validar a linha do Acols3

DSERFIS1-14223

@author matheus.massarotto
@since 11/10/2019
@version 01.00
/*/
//-------------------------------------------------------------------

Function a953Lin3Ok()
Local lRet 		:= .T.
Local nPosSDCre := Ascan(aHeader3,{|x|x[2]=="SALDCRE"})
Local nPosUF	:= Ascan(aHeader3,{|x|x[2]=="F3_ESTADO"})
Local lN		:= Iif(Type("N")=="N",.T.,.F.)

// Se for a aba de entradas - ST
If oFolder:nOption == 3 .and. nPosSDCre>0 .and. nPosUF>0 .and. lN
	If	empty(aCols[N,nPosUF]) .and. !empty(aCols[N,nPosSDCre]) .and. aCols[N, Len(aCols[N])] == .F. //Se o estado estiver em branco e o valor preenchido e a linha não for deletada
			MsgAlert(STR0299) //"O preenchimento do estado é obrigatório"
			lRet := .F.
	Else
		lRet:= a953VlEst() // Chamo a função para validar o estado
	Endif
Endif
 
Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} a953VlEst

Função para validar o estado na Entradas-ST

DSERFIS1-14223

@author matheus.massarotto
@since 11/10/2019
@version 01.00
/*/
//-------------------------------------------------------------------
Function a953VlEst()
Local lObj			:= Iif(Type("O")=="O",.T.,.F.)
Local lN			:= Iif(Type("N")=="N",.T.,.F.)
Local cEstAtu		:= Alltrim(&(ReadVar()))
Local lRet			:= .T.
Local nX			:= 0
Local nPosUF		:= Ascan(aHeader3,{|x|x[2]=="F3_ESTADO"})
Local nPosBaseIcm	:= Ascan(aHeader3,{|x|x[2]=="F3_BASEICM"})
Local nPosValIcm	:= Ascan(aHeader3,{|x|x[2]=="F3_VALICM"})
Local nLinAtu		:= 0
Local lProb			:= .F.
Local cEsts 		:= alltrim(GetNewPar("MV_STUF", ""))

if lObj
	nLinAtu:= O:nAt
elseif lN
	nLinAtu:= N
else
	lProb:= .T.
endif

if empty(cEstAtu) .and. empty(ReadVar()) .and. !lProb .and. nPosUF>0
	cEstAtu:= UPPER(alltrim(aCols[nLinAtu,nPosUF]))
endif

if !empty(ReadVar()) .and. ReadVar() == "M->F3_ESTADO" .and. nPosBaseIcm>0 .and. nPosValIcm>0 .and. !lProb .and. (!empty(aCols[nLinAtu,nPosBaseIcm]) .or. !empty(aCols[nLinAtu,nPosValIcm]))
	MsgAlert(STR0301) //Não é permitido alterar o ESTADO de linhas carregadas automaticamente
	lRet:=.F.
elseif !empty(cEstAtu) .and. !ExistCpo('SX5','12'+cEstAtu)	//Verifico se é um estado válido
	lRet:=.F.
elseif !empty(cEstAtu) .and. !(Alltrim(cEstAtu) $ cEsts)
	MsgAlert(STR0302) //O estado informado não consta no parâmetro MV_STUF
	lRet:=.F.
endif

if !lProb .and. nPosUF>0 .and. lRet
	For nX := 1 To Len(aCols)

		if nX <> nLinAtu

			if cEstAtu == Alltrim(aCols[nX][nPosUF]) .and. aCols[nX, Len(aCols[nX])] == .F.	.and. aCols[nLinAtu, Len(aCols[nLinAtu])] == .F.
				lRet:=.F.
				MsgAlert(STR0300) //"O ESTADO informado já existe na seleção atual"
				exit
			endif

		endif

	Next
endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} a953Del3Col

Função validar a deleção da linha do Acols3

DSERFIS1-14223

@author matheus.massarotto
@since 11/10/2019
@version 01.00
/*/
//-------------------------------------------------------------------

Function a953Del3Col(nQtdDelAco3)
Local lRet 			:= .T.
Local nPosBaseIcm	:= Ascan(aHeader3,{|x|x[2]=="F3_BASEICM"})
Local nPosValIcm	:= Ascan(aHeader3,{|x|x[2]=="F3_VALICM"})
Local lN			:= Iif(Type("N")=="N",.T.,.F.)

if nPosBaseIcm>0 .and. nPosValIcm>0 .and. lN
	if (!empty(aCols[N,nPosBaseIcm]) .or. !empty(aCols[N,nPosValIcm])) .and. aCols[N, Len(aCols[N])] == .F. .and. nQtdDelAco3==2 // Adicionei este tratamento nQtdDelAco3==2 pois a função de delete está sendo chamada 2 vezes.
																																//Não identifiquei um jeito de não chamá-la 2 vezes e esta variável na primeira vez que entra vem com 2 depois muda para 1.
		MsgAlert(STR0303) //Não é possível exluir linhas carregadas automaticamente
		lRet:=.F.
	endif
endif

if lRet
	a953AtuCre() //Atualizo o saldo da aba Apuração-ST após deletar ou voltar a linha para ativa.
endif

Return lRet

	/*------------------------------------------------------------------------------------------
{Protheus.doc} ConfApur
Tela para chamar valida??o de Notas Fiscais

@author    Ronaldo Tapia
@version   12.1.17
@since     25/08/2017
@obs       
------------------------------------------------------------------------------------------*/

Static Function ConfApur()
	
Local lRet := .T.
Local cTitulo     := "Conferência de Apuração de ICMS e ICMS-ST"
Local oDlgCNF     := NIL
Local oFont6   	  := NIL
Local lConfApur   := SuperGetMV("MV_CONFAPU",.F.,.F.)

If lConfApur
	// Define fonte para o MsDialog
	DEFINE FONT oFont6 NAME "Arial" BOLD
	
	//Apresenta as opcoes na tela do usuario
	DEFINE MSDIALOG oDlgCNF FROM 264,182 TO 441,712 TITLE cTitulo OF oDlgCNF PIXEL
	@ 004,010 TO 082,157 LABEL "" OF oDlgCNF PIXEL
	
	@ 015,035 SAY "APURAÇÃO de ICMS e ICMS-ST                 "   OF oDlgCNF PIXEL Size 150,010 FONT oFont6 COLOR CLR_HBLUE
	@ 035,017 SAY "Consulta notas fiscais de debito e crédito "   OF oDlgCNF PIXEL Size 150,010 FONT oFont6 COLOR CLR_BLACK
	@ 045,017 SAY "para conferência dos valores apurados.     "   OF oDlgCNF PIXEL Size 150,010 FONT oFont6 COLOR CLR_BLACK
	
	@ 09,186 SAY "Apuração de ICMS"  OF oDlgCNF PIXEL Size 150,010 FONT oFont6 COLOR CLR_BLACK
	@ 40,182 SAY "Apuração de ICMS-ST"  OF oDlgCNF PIXEL Size 150,010 FONT oFont6 COLOR CLR_BLACK
	
	@ 20,167 BUTTON "Consulta Débito " 	SIZE 045,012 ACTION FWMsgRun(, {|| ApurICMSSai() }, "Processando", "Consultando Notas Fiscais...") OF oDlgCNF PIXEL // "Aguarde" ## "Consultando Notas Fiscais..."
	@ 20,215 BUTTON "Consulta Crédito" 	SIZE 045,012 ACTION FWMsgRun(, {|| ApurICMSEnt() }, "Processando", "Consultando Notas Fiscais...") OF oDlgCNF PIXEL
	@ 51,167 BUTTON "Consulta Débito " 	SIZE 045,012 ACTION FWMsgRun(, {|| ApurSTSai() }, "Processando", "Consultando Notas Fiscais...")   OF oDlgCNF PIXEL
	@ 51,215 BUTTON "Consulta Crédito"	SIZE 045,012 ACTION FWMsgRun(, {|| ApurSTEnt() }, "Processando", "Consultando Notas Fiscais...")   OF oDlgCNF PIXEL
	@ 70,191 BUTTON "Sair"    			SIZE 045,012 ACTION Close(oDlgCNF) OF oDlgCNF PIXEL
	
	ACTIVATE MSDIALOG oDlgCNF CENTERED
Else
	MsgAlert("O parametro MV_CONFAPU esta desabilitado ou não existe na base de dados") //"O parametro MV_CONFAPU esta desabilitado"
	lRet := .F.
EndIf


// Consulta valores de d¨¦bito - Apura??o ICMS
Static Function ApurICMSSai()

Local aEnableButtons := {{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.T.,Nil},{.T.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil}} //"Confirmar"###"Fechar"
Local lRet:=.T.
Local cAlsDeb		:= "ICMSDEB"
Local cTempDeb		:= "ICMSDEBITO"+AllTrim(Str(ThreadID()))

If TCCanOpen(cTempDeb)
	dbUseArea( .T. ,__cRdd , cTempDeb , cAlsDeb , .T. , .F. )
	( cAlsDeb )->( dbClearIndex() , dbSetIndex( cTempDeb + '_01' ) )
	//Chama a view da conferencia de apura??o
	If aFindFunc[FF_MATA953A]
		FWExecView("Conferência de Apuração de ICMS: Débito do Imposto", 'mata953a', MODEL_OPERATION_VIEW, /*oDlg*/, {|| .T. } ,/*bOk*/ , /*nPercReducao*/, aEnableButtons, /*bCancel*/ , , /*cToolBar*/, /*oModel*/ ) // Apuração de ICMS
	EndIf

	( cAlsDeb )->(DbCloseArea())
EndIf

Return(lRet)
	
// Consulta valores de cr¨¦dito - Apura??o ICMS
Static Function ApurICMSEnt()

Local aEnableButtons := {{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.T.,Nil},{.T.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil}} //"Confirmar"###"Fechar"
Local lRet:=.T.
Local cAlsCrd		:= "ICMSCRD"
Local cTempCrd		:= "ICMSCREDITO"+AllTrim(Str(ThreadID()))

If TCCanOpen(cTempCrd)
	dbUseArea( .T. ,__cRdd , cTempCrd , cAlsCrd , .T. , .F. )
	( cAlsCrd )->( dbClearIndex() , dbSetIndex( cTempCrd + '_01' ) )
	//Chama a view da conferencia de apura??o
	If aFindFunc[FF_MATA953A]
		FWExecView("Conferência de Apuração de ICMS: Crédito do Imposto", 'mata953a', MODEL_OPERATION_VIEW, /*oDlg*/, {|| .T. } ,/*bOk*/ , /*nPercReducao*/, aEnableButtons, /*bCancel*/ , , /*cToolBar*/, /*oModel*/ ) // Apuração de ICMS
	EndIf

	( cAlsCrd )->(DbCloseArea())
EndIf

Return(lRet)
	

// Consulta valores de D¨¦bito - Apura??o ST
Static Function ApurSTSai()

Local aEnableButtons := {{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.T.,Nil},{.T.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil}} //"Confirmar"###"Fechar"
Local lRet:=.T.
Local cAlsSTd		:= "STDEB"
Local cTempSTd		:= "STDEBITO"+AllTrim(Str(ThreadID()))

If TCCanOpen(cTempSTd)
	dbUseArea( .T. ,__cRdd , cTempSTd , cAlsSTd , .T. , .F. )
	( cAlsSTd )->( dbClearIndex() , dbSetIndex( cTempSTd + '_01' ) )

	//Chama a view da conferencia de apura??o
	If aFindFunc[FF_MATA953A]
		FWExecView("Conferência de Apuração de ICMS-ST: Débito do Imposto", 'mata953a', MODEL_OPERATION_VIEW, /*oDlg*/, {|| .T. } ,/*bOk*/ , /*nPercReducao*/, aEnableButtons, /*bCancel*/ , , /*cToolBar*/, /*oModel*/ ) // Apura??o de ICMS
	EndIf

	( cAlsSTd )->(DbCloseArea())
EndIf

Return(lRet)

// Consulta valores de cr¨¦dito - Apura??o ST
Static Function ApurSTEnt()

Local aEnableButtons := {{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.T.,Nil},{.T.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil}} //"Confirmar"###"Fechar"
Local lRet:=.T.
Local cAlsSTe		:= "STCRD"
Local cTempSTe		:= "STCREDITO"+AllTrim(Str(ThreadID()))

If TCCanOpen(cTempSTe)
	dbUseArea( .T. ,__cRdd , cTempSTe , cAlsSTe , .T. , .F. )
	( cAlsSTe )->( dbClearIndex() , dbSetIndex( cTempSTe + '_01' ) )

	//Chama a view da conferencia de apura??o
	If aFindFunc[FF_MATA953A]
		FWExecView("Conferência de Apuração de ICMS-ST: Crédito do Imposto", 'mata953a', MODEL_OPERATION_VIEW, /*oDlg*/, {|| .T. } ,/*bOk*/ , /*nPercReducao*/, aEnableButtons, /*bCancel*/ , , /*cToolBar*/, /*oModel*/ ) // Apura??o de ICMS
	EndIf

	( cAlsSTe )->(DbCloseArea())
EndIf

Return lRet


Static Function DeltempICM()

Local cTempDeb		:= "ICMSDEBITO"+AllTrim(Str(ThreadID()))
Local cTempCrd		:= "ICMSCREDITO"+AllTrim(Str(ThreadID()))
Local cTempSTd		:= "STDEBITO"+AllTrim(Str(ThreadID()))
Local cTempSTe		:= "STCREDITO"+AllTrim(Str(ThreadID()))

XApDelTempDB (cTempDeb, .F. )
XApDelTempDB (cTempCrd, .F. )
XApDelTempDB (cTempSTd, .F. )
XApDelTempDB (cTempSTe, .F. )

Return nil

//-------------------------------------------------------------------
/*/{Protheus.doc} a953TotSubApur

Função para totalizar entradas e saídas quando nescessário a geração do bloco 1920 do Sped Fiscal para Minas Gerais.
Criado novo somatório da sub-apuração para que quando se tratar do estado de MG ele buscará na tabela CDA pelos códigos de ajustes que são responsaveis para o transporte de valores das sub-apurações para a apuração principal
e atribuirá calculado para este código como sendo o valor apurado, isto vale para as saídas e para as entradas.  
DSERFIS1-15601

@author Adilson Roberto
@since 09/07/2020
@version 01.00
/*/
//-------------------------------------------------------------------
Static Function a953TotSubApur(cLivroap,cLivrosl,dDatInic,Ddataf)
Local aNtot				:= {0,0,0,0}
Local cQuery			:= ''
Local cSelct			:= ""
Local lCdaVlou			:= CDA->(FieldPos("CDA_VLOUTR")) > 0

dbSelectArea("CDA")
CDA->(dbsetorder(1))
cAliasSFTapur	:= GetNextAlias()
cQuery := "% SFT.FT_NRLIVRO = '"+ cLivrosl +"' AND %"
If lCdaVlou
	cSelct := "% CDA.CDA_VALOR, CDA.CDA_CODLAN, SFT.FT_ENTRADA, SFT.FT_NRLIVRO, SFT.FT_NFISCAL, SFT.FT_SERIE, SFT.FT_CLIEFOR, SFT.FT_TIPOMOV, CC6.CC6_SUBAP, CDA.CDA_VLOUTR %"
Else
	cSelct := "% CDA.CDA_VALOR, CDA.CDA_CODLAN, SFT.FT_ENTRADA, SFT.FT_NRLIVRO, SFT.FT_NFISCAL, SFT.FT_SERIE, SFT.FT_CLIEFOR, SFT.FT_TIPOMOV, CC6.CC6_SUBAP %"
Endif
BeginSql Alias cAliasSFTapur
	SELECT %Exp:cSelct%
	FROM %table:CDA% CDA
	INNER JOIN %TABLE:SFT% SFT ON(SFT.FT_FILIAL = %xFilial:SFT% AND SFT.FT_TIPOMOV = CDA.CDA_TPMOVI AND SFT.FT_SERIE = CDA.CDA_SERIE AND SFT.FT_NFISCAL = CDA.CDA_NUMERO AND
								  SFT.FT_CLIEFOR = CDA.CDA_CLIFOR AND SFT.FT_LOJA = CDA.CDA_LOJA AND  SFT.FT_ITEM = CDA.CDA_NUMITE AND SFT.D_E_L_E_T_ = ' ')
	LEFT JOIN %TABLE:CC6% CC6 ON(CC6.CC6_FILIAL = %xFilial:CC6% AND CDA.CDA_CODLAN = CC6.CC6_CODLAN AND CC6.D_E_L_E_T_ = ' ' )								  	
	WHERE CDA.CDA_FILIAL = %xFilial:CDA% AND
		SFT.FT_ENTRADA >= %Exp:dDatInic% AND
		SFT.FT_ENTRADA <= %Exp:Ddataf% AND
		(SFT.FT_DTCANC  = ' ' OR SFT.FT_DTCANC NOT BETWEEN %Exp:dDatInic% AND %Exp:Ddataf%) AND
		%Exp:cQuery%
		CDA.D_E_L_E_T_ = ' '

	ORDER BY %Order:CDA%
EndSql

dbSelectArea(cAliasSFTapur)
( cAliasSFTapur )->( DbGotop() )

While ( cAliasSFTapur )->( !Eof() )
	If (cLivrosl == (cAliasSFTapur)->FT_NRLIVRO .And. SubStr((cAliasSFTapur)->CDA_CODLAN,3,1) == "2" .And. SubStr((cAliasSFTapur)->CDA_CODLAN,4,1) == cLivroap .And. Len(Alltrim((cAliasSFTapur)->CDA_CODLAN)) = 10)
		If lCdaVlou
			aNtot[1] += (cAliasSFTapur)->CDA_VALOR + (cAliasSFTapur)->CDA_VLOUTR
		Else
			aNtot[1] += (cAliasSFTapur)->CDA_VALOR
		Endif	
		If	(cAliasSFTapur)->CC6_SUBAP == '3' 		
			aNtot[3] := 3
		Endif	 
	Elseif (cLivrosl == (cAliasSFTapur)->FT_NRLIVRO .And. SubStr((cAliasSFTapur)->CDA_CODLAN,3,1) == "5" .And. SubStr((cAliasSFTapur)->CDA_CODLAN,4,1) == cLivroap .And. Len(Alltrim((cAliasSFTapur)->CDA_CODLAN)) = 10)
		If lCdaVlou
			aNtot[2] += (cAliasSFTapur)->CDA_VALOR + (cAliasSFTapur)->CDA_VLOUTR
		Else
			aNtot[2] += (cAliasSFTapur)->CDA_VALOR
		Endif	
		If	(cAliasSFTapur)->CC6_SUBAP == '3' 		
			aNtot[4] := 3
		Endif			
	Endif	
	( cAliasSFTapur )->( DbSkip() )
Enddo

Return aNtot

//-------------------------------------------------------------------
/*/{Protheus.doc} RetCodAp

Cria um JSON com todos os códigos de lançamentos cadastrados na tabela CJA filtrado por periodo mais filial.

@author Adilson Roberto
@since 04/02/2022
@version 12.1.33
/*/
//-------------------------------------------------------------------
Function RetcodCDA(dData, oJCodCDA,cRegCal,nValTot)

Local   cAliascJA   := GetNextAlias()
Local   aRegCal     := {}
Local   aRegCal1     := {}
Local   aValTot     := {}
Local   cRegCal     := ""
Local   cCodLan     := ""
Local   cNota       := ""
Local   cSerie      := ""
Local   cCodPart    := ""
Local   nValTot     := 0
Local   lret        := .F.
Local 	nMes		:= mv_par01
Local 	nAno		:= mv_par02
Local 	cNrLivro	:= mv_par03
Local 	nApuracao	:= mv_par04
Local 	nPeriodo	:= mv_par05
Local 	aDatas		:= DetDatas(nMes,nAno,nApuracao,nPeriodo)
Local 	dDtIni		:= aDatas[1]
Local 	dDtFim		:= aDatas[2]
Local 	cSelect		:= ""
Local 	cFrom	    := ""
Local 	cWhere		:= ""
Local 	cGroupby	:= ""
Local 	cSelect2	:= ""
Local 	cFrom2	    := ""
Local 	cWhere2		:= ""
Local 	cGroupby2	:= ""
Local 	cOrderby2	:= ""

DEFAULT dData       := Date()

cSelect +=  "CJA.CJA_FILIAL,CJA.CJA_ID,CJA.CJA_REGCAL,CJA.CJA_CODLAN,CJA.CJA_GUIA,CJA.CJA_TITULO,CJA.CJA_TITGUI,SUM(CDA.CDA_VALOR) VALOR ,SUM(CDA.CDA_VLOUTR) VLOUTR,'','' "

cFrom   +=  RetSQLName("CDA") + " CDA "
cFrom   +=  "JOIN " + RetSQLName("CJA") + " CJA " + " ON (CJA.CJA_FILIAL = " + ValToSQL(xFilial("CJA")) + " AND CJA.CJA_REGCAL = CDA.CDA_REGCAL AND CJA.CJA_CODLAN = CDA.CDA_CODLAN AND CJA.D_E_L_E_T_ = ' ') "
cFrom   +=  "JOIN " + RetSQLName("SFT") + " SFT " + " ON (SFT.FT_FILIAL = " + ValToSQL(xFilial("SFT")) + " AND SFT.FT_NFISCAL = CDA.CDA_NUMERO AND SFT.FT_SERIE = CDA.CDA_SERIE AND SFT.FT_ITEM = CDA.CDA_NUMITE) "

cWhere  +=  "CJA.CJA_FILIAL = " + ValToSQL( xFilial("CJA")) + "AND "
cWhere  +=  "SFT.FT_EMISSAO >= " +ValToSql(dDtIni) + " AND SFT.FT_EMISSAO <= " +ValToSql(dDtFim) + "AND "
cWhere  +=  "CDA.CDA_IFCOMP = 'CONFIG' AND "
cWhere  +=  "CJA.CJA_TITGUI = '01' AND  "
cWhere  +=  "CDA.D_E_L_E_T_ = ' ' AND "
cWhere  +=  "CJA.D_E_L_E_T_ = ' ' "

cGroupby  += "CJA.CJA_FILIAL,CJA.CJA_ID,CJA.CJA_REGCAL,CJA.CJA_CODLAN,CJA.CJA_GUIA,CJA.CJA_TITULO,CJA.CJA_TITGUI"

//Concatenará o % e executará a query.
cSelect := "%" + cSelect + "%"
cFrom   := "%" + cFrom   + "%"
cWhere  := "%" + cWhere  + "%"
cGroupby  := "%" + cGroupby  + "%"


// SEGUNDA QUERY TIPO 02 DE AGRUPAMENTO POR NOTA + CODIGO DE LANÇAMEWNTO
  
cSelect2 +=  "CJA.CJA_FILIAL,CJA.CJA_ID,CJA.CJA_REGCAL,CJA.CJA_CODLAN,CJA.CJA_GUIA,CJA.CJA_TITULO,CJA.CJA_TITGUI,SUM(CDA.CDA_VALOR) VALOR ,SUM(CDA.CDA_VLOUTR) VLOUTR,CDA.CDA_NUMERO, CDA.CDA_SERIE"

cFrom2   +=  RetSQLName("CDA") + " CDA "
cFrom2   +=  "JOIN " + RetSQLName("CJA") + " CJA " + " ON (CJA.CJA_FILIAL = " + ValToSQL(xFilial("CJA")) + " AND CJA.CJA_REGCAL = CDA.CDA_REGCAL AND CJA.CJA_CODLAN = CDA.CDA_CODLAN AND CJA.D_E_L_E_T_ = ' ') "
cFrom2   +=  "JOIN " + RetSQLName("SFT") + " SFT " + " ON (SFT.FT_FILIAL = " + ValToSQL(xFilial("SFT")) + " AND SFT.FT_NFISCAL = CDA.CDA_NUMERO AND SFT.FT_SERIE = CDA.CDA_SERIE AND SFT.FT_ITEM = CDA.CDA_NUMITE) "

cWhere2  +=  "CJA.CJA_FILIAL = " + ValToSQL( xFilial("CJA")) + "AND "
cWhere2  +=  "SFT.FT_EMISSAO >= " +ValToSql(dDtIni) + " AND SFT.FT_EMISSAO <= " +ValToSql(dDtFim) + "AND "
cWhere2  +=  "CDA.CDA_IFCOMP = 'CONFIG' AND "
cWhere2  +=  "CJA.CJA_TITGUI = '02' AND  "
cWhere2  +=  "CDA.D_E_L_E_T_ = ' ' AND "
cWhere2  +=  "CJA.D_E_L_E_T_ = ' ' "

cGroupby2  += "CJA.CJA_FILIAL,CJA.CJA_ID,CJA.CJA_REGCAL,CJA.CJA_CODLAN,CJA.CJA_GUIA,CJA.CJA_TITULO,CJA.CJA_TITGUI,CDA.CDA_NUMERO, CDA.CDA_SERIE"
cOrderby2  += "CJA_REGCAL" 

//Concatenará o % e executará a query.
cSelect2 := "%" + cSelect2 + "%"
cFrom2   := "%" + cFrom2   + "%"
cWhere2  := "%" + cWhere2  + "%"
cGroupby2  := "%" + cGroupby2  + "%"
cOrderby2  := "%" + cOrderby2  + "%"


BeginSQL Alias cAliascJA

	SELECT
		%Exp:cSelect%
	FROM
		%Exp:cFrom%
	WHERE
		%Exp:cWhere%
	Group By
		%Exp:cGroupby%
	UNION
	SELECT
		%Exp:cSelect2%
	FROM
		%Exp:cFrom2%
	WHERE
		%Exp:cWhere2%
	Group By
		%Exp:cGroupby2%
	Order By
		%Exp:cOrderby2%


EndSQL

IF Valtype(oJCodCDA) == 'J'
	FreeObj(oJCodCDA)
Endif
   oJCodCDA := JsonObject():New()
   (cAliascJA)->(DBGoTop())
	If (cAliascJA)->(!EOF())
		lret := .T.
		Do While (cAliascJA)->(!EOF())
			Aadd(aRegCal,{cRegCal, (cAliascJA)->CJA_CODLAN,(cAliascJA)->CJA_TITGUI,(cAliascJA)->CJA_GUIA,(cAliascJA)->CJA_TITULO,(cAliascJA)->VALOR,(cAliascJA)->CJA_REGCAL,(cAliascJA)->CJA_ID })    
				oJCodCDA[cRegCal] := aRegCal
				(cAliascJA)->(DbSkip()) 
		Enddo		
	Endif
Return (lret)


//-------------------------------------------------------------------
/*/{Protheus.doc} RetCodAp

Cria um JSON com todos os titulos gerados pela apuração MATA953 para deletar 
Totilos amarrados na FISA181.
@author BRuce Mello
@since 22/04/2022
@version 12.1.33
/*/
//-------------------------------------------------------------------
Function PosTitDel(dData, oJCodSE2,cChvFk7,cNumTit)

Local   cAliasE2FK7   := GetNextAlias()
Local   aTitulos     := {}
Local   lret        := .F.
Local 	nMes		:= mv_par01
Local 	nAno		:= mv_par02
Local 	cNrLivro	:= mv_par03
Local 	nApuracao	:= mv_par04
Local 	nPeriodo	:= mv_par05
Local 	aDatas		:= DetDatas(nMes,nAno,nApuracao,nPeriodo)
Local 	dDtIni		:= aDatas[1]
Local 	dDtFim		:= aDatas[2]
Local 	cSelect		:= ""
Local 	cFrom	    := ""
Local 	cWhere		:= ""
Local 	cGroupby	:= ""

DEFAULT dData       := Date()

cSelect +=  "E2_NUM,E2_PREFIXO, E2_EMISSAO,E2_ORIGEM,FK7_IDDOC, FK7_CLIFOR, FK7_LOJA "

cFrom   +=  RetSQLName("SE2") + " SE2 "
cFrom   +=  "JOIN " + RetSQLName("FK7") + " FK7 " + " ON (SE2.E2_FILIAL = " + ValToSQL(xFilial("SE2")) + "AND SE2.E2_NUM = FK7.FK7_NUM AND SE2.E2_PREFIXO =FK7.FK7_PREFIX AND SE2.E2_FORNECE = FK7.FK7_CLIFOR AND SE2.E2_LOJA = FK7.FK7_LOJA AND SE2.E2_NUM LIKE 'TG%' AND SE2.D_E_L_E_T_ = ' ') "

cWhere  +=  "SE2.E2_FILIAL = " + ValToSQL( xFilial("SE2")) + "AND "
cWhere  +=  "SE2.E2_EMISSAO >= " +ValToSql(dDtIni) + " AND SE2.E2_EMISSAO <= " +ValToSql(dDtFim) + "AND "
cWhere  +=  "SE2.D_E_L_E_T_ = ' ' AND "
cWhere  +=  "FK7.D_E_L_E_T_ = ' ' "

cGroupby  += "E2_NUM,E2_PREFIXO, E2_EMISSAO,E2_ORIGEM,FK7_IDDOC, FK7_CLIFOR, FK7_LOJA"

//Concatenará o % e executará a query.
cSelect := "%" + cSelect + "%"
cFrom   := "%" + cFrom   + "%"
cWhere  := "%" + cWhere  + "%"
cGroupby  := "%" + cGroupby  + "%"


BeginSQL Alias cAliasE2FK7

	SELECT
		%Exp:cSelect%
	FROM
		%Exp:cFrom%
	WHERE
		%Exp:cWhere%
	Group By
		%Exp:cGroupby%
	

EndSQL

IF Valtype(oJCodSE2) == 'J'
	FreeObj(oJCodSE2)
Endif
   oJCodSE2 := JsonObject():New()
   (cAliasE2FK7)->(DBGoTop())
	If (cAliasE2FK7)->(!EOF())
		lret := .T.
		Do While (cAliasE2FK7)->(!EOF())
			Aadd(aTitulos,{(cAliasE2FK7)->E2_NUM,(cAliasE2FK7)->E2_PREFIXO,(cAliasE2FK7)->FK7_IDDOC,(cAliasE2FK7)->E2_ORIGEM })    
				oJCodSE2 := aTitulos
				(cAliasE2FK7)->(DbSkip()) 
		Enddo		
	Endif
Return (lret)



//-------------------------------------------------------------------
/*/{Protheus.doc} GerGuiTit

Função que gera Guia e Titulo dos codigos de  ajuste lançandos no configurador via FISA181M.
@author BRuce Mello
@since 27/04/2022
@version 12.1.33
/*/
//-------------------------------------------------------------------

Function GerGuiTit(nOpc)
Local lTemF2B   := .F.
Local aDic 		:= GAiMxFis()  // AliasIndic
Local oJCodCDA	:= JsonObject():new()
Local oJCodSE2	:= JsonObject():new()
Local cRegCal   := ""
Local cNTitulo  := ""
Local cChvFk7   := ""
Local nValTot   := 0
Local CCODLAN   := ""
Local cNumGNRE	:= ""
Local cNumTitulo :=""
Local nValor 	:= 0
Local cIdApur   := ""
Local cTributo	:= ""
Local aTituloFin := {}
Local aTitulos  :={}
Local nXI       := 0
Local lprocessa := .F.
Local aCont		:= {}
Local lProCja	:= .F.
Default nOpc := 2

If 	aApurSX3[FP_CDA_VLOUTR] .And. ;
	aApurSX3[FP_CDA_REGCAL] .And. ;
	aApurSX3[FP_CJA_FILIAL] .And. ;
	aApurSX3[FP_CJA_ID]     .And. ;
	aApurSX3[FP_CJA_CODREG] .And. ;
	aApurSX3[FP_CJA_ID_CAB] .And. ;
	aApurSX3[FP_CJA_REGCAL] .And. ;
	aApurSX3[FP_CJA_CODTAB] .And. ;
	aApurSX3[FP_CJA_CODLAN] .And. ;
	aApurSX3[FP_CJA_VIGINI] .And. ;
	aApurSX3[FP_CJA_VIGFIM] .And. ;
	aApurSX3[FP_CJA_NFBASE] .And. ;
	aApurSX3[FP_CJA_NFALIQ] .And. ;
	aApurSX3[FP_CJA_VALOR]  .And. ;
	aApurSX3[FP_CJA_VLOUTR] .And. ;
	aApurSX3[FP_CJA_GUIA]   .And. ;
	aApurSX3[FP_CJA_TITULO] .And. ;
	aApurSX3[FP_CJA_TITGUI]
	
	lProCja := .T.
Endif				
IF  lProCja .And. !lTemF2B  .and. aDic[AI_F2B] .and. aDic[AI_CJA] .and. cPaisLoc == "BRA" //IF  !lTemF2B .And. lBdjaSon .and. aDic[AI_F2B] .and. aDic[AI_CJA] .and. cPaisLoc == "BRA" 

	dbSelectArea("F2B") 
	dbSelectArea("CJA") 
	lTemF2B	:= .T. 
Endif
	If lTemF2B .and. RetcodCDA(dDatabase, @oJCodCDA,@cRegCal,@nValTot)  
			aCdjCda := oJCodCDA
			For nXI  := 1 to len(aCdjCda[cRegCal])
				cIdApur  := aCdjCda[cRegCal][nXI][8]
				DelGuia(cIdApur)
			Next nXI
			IF PosTitDel(dDatabase, @oJCodSE2,cChvFk7,cNTitulo)
				aTitulos := oJCodSE2
				For nXI  := 1 to len(aTitulos)
					cNTitulo := aTitulos[nXI][1]
					cChvFk7 := aTitulos[nXI][3]
					DelTit(cChvFk7, "2", "FISA173", cNTitulo)
				Next nXI
			Endif
			If nOpc <> 3
				For nXI  := 1 to len(aCdjCda[cRegCal])
					aTituloFin := {}
					cNumGNRE	:= FisTitTG()
					cNumTitulo  := xFisTitTG()
					cTITGUI  := aCdjCda[cRegCal][nXI][3]
					cCJAGuia := aCdjCda[cRegCal][nXI][4]
					cCJATIT  := aCdjCda[cRegCal][nXI][5]								
					nValor   := aCdjCda[cRegCal][nXI][6]
					cTributo := aCdjCda[cRegCal][nXI][7]
					cIdApur  := aCdjCda[cRegCal][nXI][8]
					
					If cCJAGuia <> " "  
						//Aqui deverá verificar se possí regra de GNRE para gerar via apuração
						IF  CJ4->(MsSeek(xFilial("CJ4") + cCJAGuia )) .AND. CJ4->CJ4_MODO == "2"
							GravaGNRE(cNumGNRE, nValor, cTributo,cIdApur)
						Endif
					EndIf								
					If cCJATIT <> " "
						aAdd(aTituloFin, {cCJATIT,; // Código da Regra Titulo vinculado na CJA
							nValor,; // Valor do tributo
							cNumTitulo,; // Número do título a ser gerado
							'',; // ID FK7 do título gerado
							''})  	
						FGrvImpFi(aTituloFin, "FISA181", dDatabase)
					Endif	
				Next nXI
			Endif	
			lprocessa :=.T.	
	 Endif

	 return(lprocessa)
		