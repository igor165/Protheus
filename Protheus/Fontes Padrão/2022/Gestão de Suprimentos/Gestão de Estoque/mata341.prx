#Include 'Protheus.ch'
#Include 'FWMVCDef.ch'
#Include 'MATA341.ch'

Static aCab		:= {}
Static aGrid		:= {}
Static aVendas	:= {}

//-------------------------------------------------------------------
/*/{Protheus.doc} MATA341
Solicitação de transferência 

@author Bruno.Schmidt
@since 17/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Function MATA341()
Local oBrowse := nil

oBrowse := FWMBrowse():New()
oBrowse:SetAlias('SB7')
oBrowse:SetDescription("STR0001")
oBrowse:Activate()

Return NIL

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Definição do menu

@author Bruno.Schmidt
@since 17/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function MenuDef()
Local aRotina := {}

ADD OPTION aRotina TITLE STR0002 		ACTION 'VIEWDEF.MATA341'	OPERATION 3  	ACCESS 0  	//'Incluir'//"Incluir"
ADD OPTION aRotina TITLE STR0003  	ACTION 'VIEWDEF.MATA341'	OPERATION 2	ACCESS 0  	//'Visualizar'
ADD OPTION aRotina TITLE STR0004 	 	ACTION 'VIEWDEF.MATA341'	OPERATION 4 	ACCESS 0  	//'Alterar'
ADD OPTION aRotina TITLE STR0005  	ACTION 'VIEWDEF.MATA341'	OPERATION 5  	ACCESS 3	//'Excluir'//"Excluir"

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Definição do modelo de Dados

@author Bruno.Schmidt
@since 17/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function ModelDef()
Local oModel 	:= Nil

Local oStruCab	:= FWFormModelStruct():New()
Local oStru1	:= FWFormModelStruct():New()
Local oStru2	:= FWFormModelStruct():New()

//Local oStruSCR:= FWFormStruct(1,'SCR', {|cCampo| AllTrim(cCampo) $ "CR_FILIAL|CR_NUM|CR_TIPO|CR_APROV|CR_USER|CR_USERORI|CR_GRUPO|CR_ITGRP|CR_OBS"})
Local bWhenTrue := { || .T. }

oStruCab:AddTable("   "	,{" "}," ")

oStru1:AddTable("   "	,{" "}," ")
oStru2:AddTable("   "	,{" "}," ")


// Estrutura do Array
//  [01] - campo, [02] - tipo, [03] - tamanho, [04] mascara, [05] - descrição, [06] - titulo, [07] - combo, [08] - consulta padrão, [09] - bWhen, [10] - bValid, [11] bInit
If Empty(aCab)
	aAdd( aCab,{'MEMO','C',02,'@!','000','000',NIL,NIL,bWhenTrue,NIL,NIL})
EndIf

// GERAÇÃO Do Grtid

If Empty(aGrid)
	aTam := TamSX3("B7_COD"		);aAdd( aGrid,{'GRD_COD'		,aTam[03] , aTam[01]	, PesqPict("SB7","B7_COD"		,aTam[01]),STR0006,STR0006,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_LOCAL"	);aAdd( aGrid,{'GRD_LOCAL'		,aTam[03] , aTam[01]	, PesqPict("SB7","B7_LOCAL"  	,aTam[01]),STR0007,STR0007,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_LOTECTL"	);aAdd( aGrid,{'GRD_LOTECTL'	,aTam[03] , aTam[01]	, PesqPict("SB7","B7_LOTECTL"	,aTam[01]),STR0008,STR0008,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_NUMLOTE"	);aAdd( aGrid,{'GRD_NUMLOTE'	,aTam[03] , aTam[01]	, PesqPict("SB7","B7_NUMLOTE"	,aTam[01]),STR0009,STR0009,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_LOCALIZ"	);aAdd( aGrid,{'GRD_LOCALIZ'	,aTam[03] , aTam[01]	, PesqPict("SB7","B7_LOCALIZ"	,aTam[01]),STR0010,STR0010,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_NUMSERI"	);aAdd( aGrid,{'GRD_NUMSERI'	,aTam[03] , aTam[01]	, PesqPict("SB7","B7_NUMSERI"	,aTam[01]),STR0011,STR0011,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B2_QATU"	);aAdd( aGrid,{'GRD_SLDATUAL'	,aTam[03] , aTam[01]	, PesqPict("SB2","B2_QATU"	 	,aTam[01]),STR0014,STR0014,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_QUANT"	);aAdd( aGrid,{'GRD_QTDINVENT'	,aTam[03] , aTam[01]	, PesqPict("SB7","B7_QUANT"  	,aTam[01]),STR0013,STR0013,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B2_RESERVA"	);aAdd( aGrid,{'GRD_RESERVA'	,aTam[03] , aTam[01]	, PesqPict("SB2","B2_RESERVA"	,aTam[01]),STR0012,STR0012,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_QUANT"	);aAdd( aGrid,{'GRD_AEST'		,aTam[03] , aTam[01]	, PesqPict("SB7","B7_QUANT"		,aTam[01]),"Qtd. A Estornar","Qtd. A Estornar",NIL	, NIL, bWhenTrue, NIL, NIL  } )
EndIf


If Empty(aVendas)
	aAdd( aVendas,{'VEN_FLAG','L',1	,'@!'," "," ",,NIL,bWhenTrue, /*bValidFlag*/, NIL  } )
	aTam := TamSX3("C9_STSERV"	);aAdd( aVendas,{'VEN_ORIG'		,aTam[03] , aTam[01]	, PesqPict("SC9","C9_COD"		,aTam[01]),STR0015,STR0015,{'1='+STR0018,'2='+STR0019,'3=Requisição Interna','4=Transferência'}	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("DCF_DOCTO"	);aAdd( aVendas,{'VEN_PED'		,aTam[03] , aTam[01]	, PesqPict("DCF","DCF_DOCTO"	,aTam[01]),STR0034,STR0034,NIL																			, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_DATENT"	);aAdd( aVendas,{'VEN_DAT'		,aTam[03] , aTam[01]	, PesqPict("SC9","C9_DATENT"	,aTam[01]),STR0021,STR0021,NIL																	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_QTDLIB"	);aAdd( aVendas,{'VEN_QTD'		,aTam[03] , aTam[01]	, PesqPict("SC9","C9_QTDLIB"	,aTam[01]),STR0025,STR0025,NIL																	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_PEDIDO"	);aAdd( aVendas,{'VEN_PEDVEN'	,aTam[03] , aTam[01]	, PesqPict("SC9","C9_PEDIDO"	,aTam[01]),STR0020,STR0020,NIL 																	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_CLIENTE"	);aAdd( aVendas,{'VEN_CODCLI'	,aTam[03] , aTam[01]	, PesqPict("SC9","C9_CLIENTE"	,aTam[01]),STR0022,STR0022,NIL																	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_LOJA"	);aAdd( aVendas,{'VEN_LOJA'		,aTam[03] , aTam[01]	, PesqPict("SC9","C9_LOJA"		,aTam[01]),STR0023,STR0023,NIL																	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("A1_NOME"	);aAdd( aVendas,{'VEN_DESCCLI'	,aTam[03] , aTam[01]	, PesqPict("SA1","A1_NOME"		,aTam[01]),STR0024,STR0024,NIL																	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("B7_DOC"		);aAdd( aVendas,{'VEN_DOC'		,aTam[03] , aTam[01]	, PesqPict("SB7","B7_DOC"		,aTam[01]),STR0024,STR0024,NIL																	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("A1_NOME"	);aAdd( aVendas,{'VEN_OBS'		,aTam[03] , aTam[01]	, PesqPict("SA1","A1_NOME"		,aTam[01]),STR0032,STR0032,NIL																	, NIL, bWhenTrue, NIL, NIL  } )
	//Campos para Chave
	aTam := TamSX3("C9_PRODUTO"	);aAdd( aVendas,{'VEN_PROD'		,aTam[03] , aTam[01]	, PesqPict("SB7","B7_COD"		,aTam[01]),STR0006,STR0006,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_LOCAL"	);aAdd( aVendas,{'VEN_LOCAL'	,aTam[03] , aTam[01]	, PesqPict("SB7","B7_LOCAL"  	,aTam[01]),STR0007,STR0007,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_ITEM"	);aAdd( aVendas,{'VEN_ITEM'		,aTam[03] , aTam[01]	, PesqPict("SC9","C9_ITEM"		,aTam[01]),STR0035,STR0035,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("C9_SEQUEN"	);aAdd( aVendas,{'VEN_ITSEQ'	,aTam[03] , aTam[01]	, PesqPict("SC9","C9_SEQUEN"	,aTam[01]),STR0036,STR0036,NIL	, NIL, bWhenTrue, NIL, NIL  } )
	aTam := TamSX3("D3_NUMSEQ"	);aAdd( aVendas,{'VEN_NUMSEQ'	,aTam[03] , aTam[01]	, PesqPict("SD3","D3_NUMSEQ"	,aTam[01]),STR0011,STR0011,NIL	, NIL, bWhenTrue, NIL, NIL  } )
EndIf

M341Model(aCab	,"CAB_"	,oStruCab	)
M341Model(aGrid	,"STRU1_"	,oStru1	)
M341Model(aVendas	,"STRU2_"	,oStru2	)

//-- Cria a estrutura basica
oModel := MPFormModel():New('MATA341', /* bPreValidacao*/,/*bPosValidacao*/, {|oModel|M341Commit(oModel)}/*bCommit*/, /*bCancel*/ )

//--	Adiciona o componente de formulario no model 
oModel:AddFields( '341MASTER', /*cOwner*/  , oStruCab)

//-- Adiciona Grids e outros Fields Filhos
oModel:AddGrid( '341GRID01', '341MASTER', oStru1, /*bPreValidacao*/, /*bPosValidacao*/,,, /*bCarga*/ )
oModel:AddGrid( '341GRID02', '341GRID01', oStru2, {|oModel,nLine,cAction,cField,xValue,xOldValue| M341PREVL(oModel, nLine, cAction, cField, xValue, xOldValue)}/*bPreValidacao*/, /*bPosValidacao*/,,, /*bCarga*/ )

//-- Configura o model
oModel:SetPrimaryKey({})

//-- Criação de relação entre os Grids
oModel:SetRelation('341GRID02', {{'VEN_PROD','GRD_COD'},{'VEN_LOCAL','GRD_LOCAL'},{'VEN_LOTECTL','GRD_LOTECTL'},{'VEN_NUMLOTE','GRD_NUMLOTE'},{'VEN_NUMSERI','GRD_NUMSERI'}})

//-- Adiciona a descricao do Modelo de Dados
oModel:SetDescription(STR0031)

//-- Adiciona a descricao do Componente do Modelo de Dados
oModel:GetModel( '341GRID01' ):SetDescription( 'GRIDS 01' )
oModel:GetModel( '341GRID02' ):SetDescription( 'GRIDS 02' )

//Modelos de Preenchimento Não Obrigatorio
oModel:GetModel( '341GRID01' ):SetOptional(.T.)
oModel:GetModel( '341GRID02' ):SetOptional(.T.)

oModel:GetModel('341GRID01'):SetNoDeleteLine(.T.)
oModel:GetModel('341GRID02'):SetNoDeleteLine(.T.)

//-- Carregamento dos grids do Modelo
oModel:SetActivate( {|oModel| M341Load(oModel)})


Return oModel


//-------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
Definição do interface

@author Bruno.Schmidt
@since 17/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function ViewDef()

// Cria a estrutura a ser usada na View
Local oStru1		:= FWFormViewStruct():New()
Local oStru2		:= FWFormViewStruct():New()
Local oModel    := FWLoadModel( 'MATA341' )
Local oView		:= Nil


//Carrega os campos da Grid
M341View(aGrid	,oStru1)
M341View(aVendas	,oStru2)

// Monta o modelo da interface do formulario
oView := FWFormView():New()

//-- Associa o View ao Model
oView:SetModel(oModel)

//-- Insere os componentes na view
oView:AddGrid('VIEW_GRID'	, oStru1	,	'341GRID01')
oView:AddGrid('VIEW_VEN'		, oStru2	,	'341GRID02')

//-- Cria uma folder para a tela
oView:CreateHorizontalBox('CABEC'	,15)
oView:CreateHorizontalBox('BODY'	,55)
oView:CreateHorizontalBox('FOOTER'	,30)

//Cria um opanel para colocar o titulo da Tela, pois o MVc bão aceita titulos grandes
oView:AddOtherObject("OTHER_PANEL", {|oPanel| M341CAEBC(oPanel)})

//-- Associa os componentes 
oView:SetOwnerView('OTHER_PANEL'	,'CABEC'	)
oView:SetOwnerView('VIEW_GRID'		,'BODY' 	)
oView:SetOwnerView('VIEW_VEN'		,'FOOTER'	)

oView:EnableTitleView('VIEW_GRID', "Produtos Comprometidos")
oView:EnableTitleView('VIEW_VEN' , "Documentos Reservados")

// Adiciona a descricao do Componente do Modelo de Dados
oModel:GetModel( '341MASTER' ):SetDescription(STR0031)

oStru2:SetProperty('*', MVC_VIEW_CANCHANGE, .F.)
oStru2:SetProperty('VEN_FLAG', MVC_VIEW_CANCHANGE, .T.)

//Remover os campos 
oStru2:RemoveField("VEN_PROD")
oStru2:RemoveField("VEN_LOCAL")
oStru2:RemoveField("VEN_DOC")
oStru2:RemoveField("VEN_ITSEQ")
oStru2:RemoveField("VEN_NUMSEQ")

Return oView 

//-------------------------------------------------------------------
/*/{Protheus.doc} M341View
Função para adicionar dinamicamente os campos na view

@param aCampos Estrutura dos campos que serão adicionados
@param cStru Descrição da estrutura onde os campos serão adicionados
@param oStru Objeto referente a estrutura

@author Bruno.Schmidt
@since 30/09/2015
@version 1.0
/*/
//-------------------------------------------------------------------

Function M341View(aCampos,oStru)
Local nCampo := 0
Local cCampo := ''

For nCampo := 1 To Len(aCampos)
	//--> [01] - campo, [02] - tipo, [03] - tamanho, [04] mascara, [05] - descrição, [06] - titulo, [07] - combo, [08] - consulta padrão, [09] - bWhen, [10] - bValid, [11] bInit
	//cCampo := cStru + aCampos[nCampo][01]
	cOrdem := StrZero(nCampo,2)
	//-- Adiciona campos header do filtro de busca de fornecedor 
	oStru:AddField(aCampos[nCampo][01]		,;	// [01]  C   Nome do Campo
					cOrdem						,;	// [02]  C   Ordem
					aCampos[nCampo][05] 		,;	// [03]  C   Titulo do campo
					aCampos[nCampo][06] 		,;	// [04]  C   Descricao do campo
					{}							,;	// [05]  A   Array com Help
					aCampos[nCampo][02]		,;	// [06]  C   Tipo do campo
					aCampos[nCampo][04]		,;	// [07]  C   Picture
					NIL							,;	// [08]  B   Bloco de Picture Var
					aCampos[nCampo][08]		,;	// [09]  C   Consulta F3
					.F.							,;	// [10]  L   Indica se o campo é alteravel
					NIL							,;	// [11]  C   Pasta do campo
					NIL							,;	// [12]  C   Agrupamento do campo
					aCampos[nCampo][07]		,;	// [13]  A   Lista de valores permitido do campo (Combo)
					NIL							,;	// [14]  N   Tamanho maximo da maior opção do combo
					NIL							,;	// [15]  C   Inicializador de Browse
					.F.							,;	// [16]  L   Indica se o campo é virtual
					NIL							,;	// [17]  C   Picture Variavel
					.F.							)	// [18]  L   Indica pulo de linha após o campo
Next nCampo

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} M341Model
Função para adicionar dinamicamente os campos na estrutura

@param aCampos Estrutura dos campos que serão adicionados
@param cStru Descrição da estrutura onde os campos serão adicionados
@param oStru Objeto referente a estrutura

@author Bruno.Schmidt
@since 30/09/2015
@version 1.0
/*/
//-------------------------------------------------------------------

Function M341Model(aCampos,cStru,oStru)
Local nCampo := 1
Local cCampo := ''

For nCampo := 1 To Len(aCampos)
	//cCampo := cStru + aCampos[nCampo][01]
	//-- Adiciona campos header do filtro de busca de fornecedor 
	oStru:AddField(aCampos[nCampo][05]	,;	// 	[01]  C   Titulo do campo
				 	aCampos[nCampo][06]	,;	// 	[02]  C   ToolTip do campo
				 	aCampos[nCampo][01]	,;	// 	[03]  C   Id do Field
				 	aCampos[nCampo][02]	,;	// 	[04]  C   Tipo do campo
				 	aCampos[nCampo][03]	,;	// 	[05]  N   Tamanho do campo
				 	0						,;	// 	[06]  N   Decimal do campo
				 	aCampos[nCampo][10]	,;	// 	[07]  B   Code-block de validação do campo
				 	aCampos[nCampo][09]	,;	// 	[08]  B   Code-block de validação When do campo
				 	aCampos[nCampo][07]	,;	//	[09]  A   Lista de valores permitido do campo
				 	.F.						,;	//	[10]  L   Indica se o campo tem preenchimento obrigatório
				 	aCampos[nCampo][11]	,;	//	[11]  B   Code-block de inicializacao do campo
				 	Nil						,;	//	[12]  L   Indica se trata-se de um campo chave
				 	.F.						,;	//	[13]  L   Indica se o campo pode receber valor em uma operação de update.
				 	.F.						)	// 	[14]  L   Indica se o campo é virtual
Next nCampo

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} M341Load
Função que executa o carregamento do array para o modelo
tem como intuito verificar todos as dados da tabela SC9(Pedido de Venda)
e da tabela SC0()

@author Bruno.Schmidt
@since 16/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Function M341Load(oModel)
Local oMaster		:= oModel:GetModel('341MASTER')
Local oStru1 		:= oModel:GetModel('341GRID01')
Local oStru2 		:= oModel:GetModel('341GRID02')
Local aValor 		:= {}
Local aEndereco		:= {}
Local cAliasQry 	:= GetNextAlias()
Local cAliasQry2	:= GetNextAlias()
Local cAliasQry3	:= GetNextAlias() 
Local cAliasQry4	:= GetNextAlias()
Local nx			:= 0 
Local nY			:= 0
Local lLocaliz		:= .F.
Local cObs			:= ""
Local lWmsNew		:= SuperGetMv("MV_WMSNEW",.F.,.F.)
Local nTamObs       := TamSX3("A1_NOME")[1]

//-- Efetua o Carregamento do array statico da função mata340
aValor := GetRQtd()

//--Obrigatório alterar o conteudo do cabecalio, pois o mesmo não é apresentado
oMaster:SetValue('MEMO','1')

oStru1:SetNoUpdateLine(.F.)

//-- Carregamento dos Grids
For nx:=1 to Len(aValor) 
	lLocaliz	:= Localiza(aValor[nx][1],.T.)
	lCtrWMS	:= IntDL(aValor[nx][1],lLocaliz)
	
	If !Empty(oStru1:GetValue('GRD_COD'))	
		oStru1:ADDLINE()
	EndIf
	oStru1:SetValue('GRD_COD'		,aValor[nx][1])
	oStru1:SetValue('GRD_LOCAL'		,aValor[nx][2])
	oStru1:SetValue('GRD_LOTECTL'	,aValor[nx][3])
	oStru1:SetValue('GRD_NUMLOTE'	,aValor[nx][4])
	oStru1:SetValue('GRD_LOCALIZ'	,aValor[nx][5])
	oStru1:SetValue('GRD_NUMSERI'	,aValor[nx][6])
	oStru1:SetValue('GRD_SLDATUAL'	,aValor[nx][7])
	oStru1:SetValue('GRD_QTDINVENT'	,aValor[nx][8])
	oStru1:SetValue('GRD_RESERVA'	,aValor[nx][9])
	oStru1:SetValue('GRD_AEST'		,aValor[nx][9] - aValor[nx][8])
	
	
	// -- Reservas de PV não serão apresentadas mais nessa tela
	// --Montar a query da SC9 (retirar chamada da query pra SC9)
	cQuery := M341Query(aValor[nx],'SC9',lCtrWMS,.F.)
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)
	TcSetField(cAliasQry,"DATALIB" ,"D",8,0)

	While (cAliasQry)->(!Eof())
		If !Empty(oStru2:GetValue('VEN_ORIG'))	
			oStru2:ADDLINE()
		EndIf
		
		oStru2:SetValue('VEN_ORIG'		,'2')
		oStru2:SetValue('VEN_PEDVEN'	,(cAliasQry)->NUMPEDIDO)
		oStru2:SetValue('VEN_DAT'		,(cAliasQry)->DATALIB)
		oStru2:SetValue('VEN_QTD'		,(cAliasQry)->QTD)
		oStru2:SetValue('VEN_CODCLI'	,(cAliasQry)->CODCLI)
		oStru2:SetValue('VEN_LOJA'		,(cAliasQry)->LOJA)
		oStru2:SetValue('VEN_DESCCLI'	,Posicione("SA1",1,xFilial("SA1")+(cAliasQry)->(CODCLI+LOJA),"A1_NOME"))
		
		//Campos da chave
		oStru2:SetValue('VEN_PROD'		,(cAliasQry)->PROD)
		oStru2:SetValue('VEN_LOCAL'		,(cAliasQry)->LOCAL)
		oStru2:SetValue('VEN_ITEM'		,(cAliasQry)->ITEM)
		oStru2:SetValue('VEN_DOC'		,aValor[nx][10])
		oStru2:SetValue('VEN_ITSEQ'		,(cAliasQry)->ITSEQ)
		
		If lCtrWMS .and. (cAliasQry)->STATUS == '3'
			// Busca endereço escolhido pelo serviço wms
			aEndereco := {}
			aEndereco := WmsEndEsco("SC9",(cAliasQry)->NUMPEDIDO,(cAliasQry)->ITEM,(cAliasQry)->ITSEQ,(cAliasQry)->PROD)
			
			If Len(aEndereco) > 0
				cObs := "Serviço WMS com Endereço: " + AllTrim(aSort(aEndereco,,,{|x| Alltrim(x) == aValor[nx][5]})[1])
			EndIf
			
			oStru2:SetValue('VEN_OBS',cObs)
		EndIf
		
		(cAliasQry)->(DbSkip())
	EndDo
	(cAliasQry)->(dbCloseArea())

	cQuery:= ""
	// --Montar a query da SC0
	cQuery := M341Query(aValor[nx],'SC0',lCtrWMS,.F.)
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry2, .F., .T.)
	TcSetField(cAliasQry2,"DTEMISSAO" ,"D",8,0)
	
	While (cAliasQry2)->(!Eof()) 

		If !Empty(oStru2:GetValue('VEN_ORIG'))	
			oStru2:ADDLINE()
		EndIf
		oStru2:SetValue('VEN_ORIG'		,'1')	
		oStru2:SetValue('VEN_PED'		,(cAliasQry2)->NUMRESERVA)
		oStru2:SetValue('VEN_DAT'		,(cAliasQry2)->DTEMISSAO)
		oStru2:SetValue('VEN_QTD'		,(cAliasQry2)->QTD)
		oStru2:SetValue('VEN_PEDVEN'	,(cAliasQry2)->PEDIDO)
		
		If (cAliasQry2)->SALDO == QtdComp(0)
			cObs := STR0037
			oStru2:SetValue('VEN_OBS',Padr(cObs,nTamObs))
		EndIf
		
		//Campos da chave
		oStru2:SetValue('VEN_PROD'		,(cAliasQry2)->PROD)
		oStru2:SetValue('VEN_ITEM'		,(cAliasQry2)->ITEM)
		oStru2:SetValue('VEN_ITSEQ'		,(cAliasQry2)->ITSEQ)
		oStru2:SetValue('VEN_LOCAL'		,(cAliasQry2)->ARMAZEM)
		oStru2:SetValue('VEN_DOC'		,aValor[nx][10])

		(cAliasQry2)->(DbSkip())
	EndDo
	(cAliasQry2)->(dbCloseArea())
	
	If lCtrWMS .And. lWmsNew
		cQuery := ""
		cObs := ""
		// --Montar a query da DH1
		cQuery := M341Query(aValor[nx],'DH1',lCtrWMS,.F.)
		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry3, .F., .T.)
		TcSetField(cAliasQry3,"DH1_EMISAO" ,"D",8,0)
		
		While (cAliasQry3)->(!Eof())
			If !Empty(oStru2:GetValue('VEN_ORIG'))	
				oStru2:ADDLINE()
			EndIf
			oStru2:SetValue('VEN_ORIG'		,'3')
			oStru2:SetValue('VEN_PED'		,(cAliasQry3)->DH1_DOC)
			oStru2:SetValue('VEN_DAT'		,(cAliasQry3)->DH1_EMISAO)
			oStru2:SetValue('VEN_QTD'		,(cAliasQry3)->DH1_QUANT)
			
			//Campos da chave
			oStru2:SetValue('VEN_PROD'		,(cAliasQry3)->DH1_PRODUT)
			oStru2:SetValue('VEN_LOCAL'		,(cAliasQry3)->DH1_LOCAL)
			oStru2:SetValue('VEN_DOC'		,aValor[nx][10])
			oStru2:SetValue('VEN_NUMSEQ'	,(cAliasQry3)->DH1_NUMSEQ)
			
			cQuery := " SELECT DCF.DCF_LOCAL,"
			cQuery +=        " DCF.DCF_LOCDES"
			cQuery +=   " FROM "+RetSqlName("DCF")+" DCF"
			cQuery +=  " WHERE DCF.DCF_FILIAL = '"+xFilial("DCF")+"'"
			cQuery +=    " AND DCF.DCF_ID = '"+(cAliasQry3)->DH1_IDDCF+"'"
			cQuery +=    " AND DCF.DCF_LOCAL <> DCF.DCF_LOCDES"
			cQuery +=    " AND DCF.D_E_L_E_T_ = ' '"
			cQuery := ChangeQuery(cQuery)
			cAliasQry4 := GetNextAlias()
			dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry4, .F., .T.)
			If (cAliasQry4)->(!Eof())
				cObs := "Serviço WMS entre armazém "+(cAliasQry4)->DCF_LOCAL+" e "+(cAliasQry4)->DCF_LOCDES
			Else
				aEndereco := {}
				aEndereco := WmsEndEsco("DH1",,,,,(cAliasQry3)->DH1_IDDCF)
				If Len(aEndereco) > 0
					cObs := "Serviço WMS com Endereço: " + AllTrim(aSort(aEndereco,,,{|x| Alltrim(x) == aValor[nx][5]})[1])
				EndIf
			EndIf
			(cAliasQry4)->(dbCloseArea())
			
			oStru2:SetValue('VEN_OBS',cObs)
			
			(cAliasQry3)->(dbSkip())
		EndDo
		(cAliasQry3)->(dbCloseArea())
		
		cQuery := ""
		cObs := ""
		// --Montar a query da DCF
		cQuery := M341Query(aValor[nx],'DCF',lCtrWMS,.F.)
		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry4, .F., .T.)
		TcSetField(cAliasQry4,"DCF_DATA" ,"D",8,0)
		
		While (cAliasQry4)->(!Eof())
			If !Empty(oStru2:GetValue('VEN_ORIG'))	
				oStru2:ADDLINE()
			EndIf
			oStru2:SetValue('VEN_ORIG'		,'4')
			oStru2:SetValue('VEN_PED'		,(cAliasQry4)->DCF_DOCTO)
			oStru2:SetValue('VEN_DAT'		,(cAliasQry4)->DCF_DATA)
			oStru2:SetValue('VEN_QTD'		,(cAliasQry4)->DCF_QUANT)
			
			//Campos da chave
			oStru2:SetValue('VEN_PROD'		,(cAliasQry4)->DCF_CODPRO)
			oStru2:SetValue('VEN_LOCAL'		,(cAliasQry4)->DCF_LOCAL)
			oStru2:SetValue('VEN_DOC'		,aValor[nx][10])
			oStru2:SetValue('VEN_NUMSEQ'	,(cAliasQry4)->DCF_ID)
			
			aEndereco := {}
			aEndereco := WmsEndEsco("DCF",,,,,(cAliasQry4)->DCF_ID)
			If Len(aEndereco) > 0
				cObs := "Serviço WMS com Endereço: " + AllTrim(aSort(aEndereco,,,{|x| Alltrim(x) == aValor[nx][5]})[1])
			EndIf
			
			oStru2:SetValue('VEN_OBS',cObs)

			(cAliasQry4)->(dbSkip())
		EndDo
		(cAliasQry4)->(dbCloseArea())
	EndIf
Next nx 

oStru1:GoLine(1)
oStru2:GoLine(1)
oModel:GetModel('341GRID01'):SetNoInsertLine(.T.)
oModel:GetModel('341GRID02'):SetNoInsertLine(.T.)
oModel:GetModel('341GRID01'):SetNoUpdateLine(.T.)

Return aValor

//-------------------------------------------------------------------
/*/{Protheus.doc} M341CAEBC
Função para apresentar o tezto no cabecalio

@author TOTVS SA
@since 16/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function M341CAEBC( oPanel )

oFont	:= TFont():New(,,-12,.T.)
oSay	:= TSay():New(05,05			,{|| STR0027},oPanel,,oFont,,,,.T.) //"Acao"
oSay	:= TSay():New(13,05			,{|| STR0028},oPanel,,oFont,,,,.T.) //"Acao"
oSay	:= TSay():New(21,05			,{|| STR0029+STR0030},oPanel,,oFont,,,,.T.) //"Acao"

Return NIL

//-------------------------------------------------------------------
/*/{Protheus.doc} M341Commit
Função que executa o carregamento do array para o modelo

@author Bruno.Schmidt
@since 16/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Function M341Commit(oModel)
Local oModelSC0
Local oModelDH1
Local oModelDCF
Local lRet			:= .T.
Local oStru1		:= oModel:GetModel('341GRID01')
Local oStru2		:= oModel:GetModel('341GRID02')
Local aArea			:=	Getarea()
Local nI 			:= 0 
Local nX 			:= 0 
Local lRet			:= .T.
Local lQtdTot		:= .F.
Local lComit		:= .T.
Local nC0_QUANT		:= 0
Local cC0_TIPO		:= ""
Local cC0_DOCRES	:= ""
Local cC0_SOLICIT	:= ""
Local cC0_FILRES	:= ""
Local cC0_NUM		:= ""
Local cC0_PRODUTO	:= ""
Local cC0_LOCAL		:= ""
Local cC0_NUMLOTE	:= ""
Local cC0_LOTECTL	:= ""
Local cC0_LOCALIZ	:= ""
Local cC0_NUMSERI	:= ""

Private LMSERROAUTO := .F.
Private INCLUI 		:= .F.
Private cUserName 	:= cUserName
Private nOperation 	:= 0

For nX := 1 To oStru1:Length()
	oStru1:GoLine(nX)
	For nI := 1 To oStru2:Length()
		oStru2:GoLine(nI)
		If oStru2:GetValue('VEN_FLAG')
			Do Case
				Case oStru2:GetValue('VEN_ORIG') == '1'
					DbSelectArea('SC0')
					DbsetOrder(1)
				 	If DbSeek(xFilial("SC0")+ PadR(oStru2:GetValue('VEN_PED'),TamSx3("C0_NUM")[1]) + oStru2:GetValue('VEN_PROD')+ oStru2:GetValue('VEN_LOCAL'))
						oModelSC0:= FwLoadModel("MATA430")
						oModelSC0:SetOperation(MODEL_OPERATION_UPDATE)
				  		If oModelSC0:Activate()
				 			oModelSC0:LoadValue('SC0GRID','C0_OBS',STR0026 + ' ' + oStru2:GetValue('VEN_DOC') )
				 			cC0_TIPO		:=	oModelSC0:GetValue('MASTER','C0_TIPO')
				 			cC0_DOCRES		:=	oModelSC0:GetValue('MASTER','C0_DOCRES')
							cC0_SOLICIT		:=	oModelSC0:GetValue('MASTER','C0_SOLICIT')
							cC0_FILRES		:=	oModelSC0:GetValue('MASTER','C0_FILRES')
							cC0_NUM			:=	oModelSC0:GetValue('SC0GRID','C0_NUM')
							cC0_PRODUTO		:=	oModelSC0:GetValue('SC0GRID','C0_PRODUTO')
							cC0_LOCAL		:=	oModelSC0:GetValue('SC0GRID','C0_LOCAL')
							cC0_NUMLOTE		:=	oModelSC0:GetValue('SC0GRID','C0_NUMLOTE')
							cC0_LOTECTL		:=	oModelSC0:GetValue('SC0GRID','C0_LOTECTL')
							cC0_LOCALIZ		:=	oModelSC0:GetValue('SC0GRID','C0_LOCALIZ')
							cC0_NUMSERI		:=	oModelSC0:GetValue('SC0GRID','C0_NUMSERI')
							nC0_QUANT		:=	oModelSC0:GetValue('SC0GRID','C0_QUANT')							
							 			
				 			lQtdTot := oModelSC0:GetValue('SC0GRID','C0_QTDORIG') == oModelSC0:GetValue('SC0GRID','C0_QUANT');
							 .OR.  oModelSC0:GetValue('SC0GRID','C0_QTDELIM') == oModelSC0:GetValue('SC0GRID','C0_QTDORIG')	
										 			
							If oModelSC0:VldData()
								oModelSC0:CommitData()
								oModelSC0:DeActivate()
							Else
								oModelSC0:DeActivate()
							EndIf
							
							If lQtdTot // Caso a quantidade seja total deve-se excluir a reserva na SC0
								//Condição acontece após a reserva do PV ser retornada para a SC0
								oModelSC0:SetOperation(MODEL_OPERATION_DELETE)                               
							Else //  Case a quantidade parcial seja suficiente para o acerto deve-se eliminar os residuo 
								a430Reserv({2,cC0_TIPO,	cC0_DOCRES,cC0_SOLICIT,cC0_FILRES},;
											cC0_NUM,cC0_PRODUTO,cC0_LOCAL,0,;
											{cC0_NUMLOTE,cC0_LOTECTL,cC0_LOCALIZ,cC0_NUMSERI},,,nC0_QUANT)
							EndIf

							If oModelSC0:Activate() 
								If oModelSC0:VldData()
									oModelSC0:CommitData()
									oModelSC0:DeActivate()
								Endif
							EndIf	
						EndIf
					EndIf

				Case oStru2:GetValue('VEN_ORIG') == '2'													
					DbSelectArea('SC9')
					DbsetOrder(1)
					If DbSeek( xFilial("SC9")+ PadR(oStru2:GetValue('VEN_PEDVEN'),TamSx3("C9_PEDIDO")[1]) + oStru2:GetValue('VEN_ITEM') + oStru2:GetValue('VEN_ITSEQ') + oStru2:GetValue('VEN_PROD'))
						A460Estorna( .F., .T., 0 )
					EndIf

				Case oStru2:GetValue('VEN_ORIG') == '3'
					dbSelectArea("DH1")
					dbSetOrder(1) // DH1_FILIAL+DH1_DOC+DH1_LOCAL+DH1_NUMSEQ
					If dbSeek(xFilial("DH1")+PadR(oStru2:GetValue('VEN_PED'),TamSx3("DH1_DOC")[1])+PadR(oStru2:GetValue('VEN_LOCAL'),TamSx3("DH1_LOCAL")[1])+PadR(oStru2:GetValue('VEN_NUMSEQ'),TamSx3("DH1_NUMSEQ")[1]))
						oModelDH1 := FwLoadModel("MATA246")
						oModelDH1:SetOperation(MODEL_OPERATION_DELETE)
						If oModelDH1:Activate()
							If oModelDH1:VldData()
								oModelDH1:CommitData()
							Else
								Help(,,"HELP",,oModelDH1:GetErrorMessage()[6],1,0)
							EndIf
							oModelDH1:DeActivate()
						EndIf
					EndIf
				Case oStru2:GetValue('VEN_ORIG') == '4'
					dbSelectArea("DCF")
					dbSetOrder(9)
					If dbSeek(xFilial("DCF")+PadR(oStru2:GetValue('VEN_NUMSEQ'),TamSx3("DCF_ID")[1]))
						oModelDCF := FwLoadModel("WMSA225")
						oModelDCF:SetOperation(MODEL_OPERATION_UPDATE)
						If oModelDCF:Activate()
							If oModelDCF:VldData()
								If !oModelDCF:CommitData()
									Help(,,"HELP",,oModelDCF:GetErrorMessage()[6],1,0)
								EndIf
							EndIf
							oModelDCF:DeActivate()
						EndIf
					EndIf
			EndCase
		EndIf	
	Next nI
Next nX
	
lRet:=FwFormCommit(oModel)
RestArea(aArea)

Return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} M341Auto
Função que executa o carregamento do array para o modelo
tem como intuito verificar todos as dados da tabela SC9(Pedido de Venda)
e da tabela SC0()

@author Bruno.Schmidt
@since 16/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Function M341Auto(nContAuto)
Local nx			:= 0 
Local nY			:= 0
Local nResQTD		:= SuperGetMv("MV_RESSEQ",.F.,0)
Local nQuantExc		:= 0 
Local cAliasQry 	:= GetNextAlias()
Local cAliasQry2	:= GetNextAlias()
Local aValor 		:= {}
Local aArea			:= GetArea()
Local lRet			:= .T.
Local lCtrWMS		:= .F.
Local lLocaliz		:= .F.
Local lAuto			:= .T.
Local cLogError		:= ""
Local lQtdTot		:= .F.
Local lComit		:= .T.
Local nC0_QUANT		:= 0
Local cC0_TIPO		:= ""
Local cC0_DOCRES	:= ""
Local cC0_SOLICIT	:= ""
Local cC0_FILRES	:= ""
Local cC0_NUM		:= ""
Local cC0_PRODUTO	:= ""
Local cC0_LOCAL		:= ""
Local cC0_NUMLOTE	:= ""
Local cC0_LOTECTL	:= ""
Local cC0_LOCALIZ	:= ""
Local cC0_NUMSERI	:= ""

aValor := GetRQtd()	

nContAuto ++

If Empty(aValor)
	lRet := .F.
EndIf

For nx := 1 to Len(aValor) 

	lLocaliz	:= Localiza(aValor[nx][1],.T.)
	
	lCtrWMS	:= IntDL(aValor[nx][1],lLocaliz)
	
	nQuantExc	:= 0 	
	
	// --Montar a query da SC9
	cQuery := M341Query(aValor[nx],'SC9',lCtrWMS,.T.)
	cQuery := ChangeQuery(cQuery)
	
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)
	TcSetField(cAliasQry,"DATALIB" ,"D",8,0)
	
	
	While (cAliasQry)->(!Eof())	.and.	aValor[nX][9] - nQuantExc > aValor[nX][8]
		DbSelectArea('SC9')
		DbsetOrder(1)
		If DbSeek( xFilial("SC9")+(cAliasQry)->NUMPEDIDO + (cAliasQry)->ITEM + (cAliasQry)->ITSEQ + (cAliasQry)->PROD)
			If A460Estorna( .F., .T., 0 )	
				nQuantExc += (cAliasQry)->QTD
			EndIf
		EndIf
		(cAliasQry)->(DbSkip())
	EndDo
	
	(cAliasQry)->(dbCloseArea())
	
	cQuery:= ""
	// --Montar a query da SC0
	cQuery := M341Query(aValor[nx],'SC0',lCtrWMS,.T.)
	cQuery := ChangeQuery(cQuery)	
	
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry2, .F., .T.)
	TcSetField(cAliasQry2,"DTEMISSAO" ,"D",8,0)
	If aValor[nX][7] > nQuantExc
		While (cAliasQry2)->(!Eof()) .and. aValor[nX][9] - nQuantExc > aValor[nX][8]
			DbSelectArea('SC0')
			DbsetOrder(1)
		 	If DbSeek(xFilial("SC0")+ (cAliasQry2)->NUMRESERVA + (cAliasQry2)->PROD + (cAliasQry2)->ARMAZEM)
		 		nQuantExc += SC0->C0_QUANT
				oModelSC0:= FwLoadModel("MATA430")
				oModelSC0:SetOperation(MODEL_OPERATION_UPDATE)
				If oModelSC0:Activate()
					oModelSC0:LoadValue('SC0GRID','C0_OBS',STR0026 + aValor[nx][10])
					cC0_TIPO		:=	oModelSC0:GetValue('MASTER','C0_TIPO')
		 			cC0_DOCRES		:=	oModelSC0:GetValue('MASTER','C0_DOCRES')
					cC0_SOLICIT	:=	oModelSC0:GetValue('MASTER','C0_SOLICIT')
					cC0_FILRES		:=	oModelSC0:GetValue('MASTER','C0_FILRES')
					cC0_NUM		:=	oModelSC0:GetValue('SC0GRID','C0_NUM')
					cC0_PRODUTO	:=	oModelSC0:GetValue('SC0GRID','C0_PRODUTO')
					cC0_LOCAL		:=	oModelSC0:GetValue('SC0GRID','C0_LOCAL')
					cC0_NUMLOTE	:=	oModelSC0:GetValue('SC0GRID','C0_NUMLOTE')
					cC0_LOTECTL	:=	oModelSC0:GetValue('SC0GRID','C0_LOTECTL')
					cC0_LOCALIZ	:=	oModelSC0:GetValue('SC0GRID','C0_LOCALIZ')
					cC0_NUMSERI	:=	oModelSC0:GetValue('SC0GRID','C0_NUMSERI')
					nC0_QUANT		:=	oModelSC0:GetValue('SC0GRID','C0_QUANT')
					 			
		 			lQtdTot := oModelSC0:GetValue('SC0GRID','C0_QTDORIG') == oModelSC0:GetValue('SC0GRID','C0_QUANT')				 			
					
					//INCLUI
					If oModelSC0:VldData()
						oModelSC0:CommitData()
					Else
						AEval( oModelSC0:GetErrorMessage(), { | x |  cLogError += cValToChar( x ) + CRLF   } )
						Help(" ",1,"A340AUTO-1",, "Nao Foi Possivel atualizar a reserva" + CRLF + cLogError ,1,0)
						lRet := .F.
					EndIf
					oModelSC0:DeActivate()
				EndIf	
				If lRet
					If lQtdTot
						oModelSC0:SetOperation(MODEL_OPERATION_DELETE)
					Else
						a430Reserva({2,cC0_TIPO,	cC0_DOCRES,cC0_SOLICIT,cC0_FILRES},;
										cC0_NUM,cC0_PRODUTO,cC0_LOCAL,0,;
										{cC0_NUMLOTE,cC0_LOTECTL,cC0_LOCALIZ,cC0_NUMSERI},,,nC0_QUANT)
						lComit := .F.
					EndIf
					
					If oModelSC0:Activate() .and. lComit
						If oModelSC0:VldData()
							oModelSC0:CommitData()
						Else
							AEval( oModelSC0:GetErrorMessage(), { | x |  cLogError += cValToChar( x ) + CRLF   } )
							Help(" ",1,"A340AUTO-2",, "Nao Foi Possivel excluir a reserva" + CRLF + cLogError ,1,0)
						EndIf					
						oModelSC0:DeActivate()
					EndIf
				EndIf
			EndIf
			(cAliasQry2)->(DbSkip())
		EndDo
	EndIf	
	(cAliasQry2)->(dbCloseArea())
Next nx 

RestArea(aArea)

Return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} M341Query
Função que executa o carregamento do array para o modelo
tem como intuito verificar todos as dados da tabela SC9(Pedido de Venda)
e da tabela SC0()

@author Bruno.Schmidt
@since 16/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Function M341Query(aValor,cTpQuery,lCtrWMS,lAuto)
Local cQuery	:= ""
Local lWmsNew	:= SuperGetMv("MV_WMSNEW",.F.,.F.)
Local nResQTD	:= SuperGetMv("MV_RESSEQ",.F.,0)

	Do Case
	
	Case cTpQuery == 'SC9'
		//-- Verificar os Pedido de vendas TABELA SC9
		cQuery := "SELECT C9_RESERVA RESERVA, C9_PEDIDO NUMPEDIDO,C9_DATALIB DATALIB,C9_CLIENTE CODCLI,C9_LOJA LOJA,"
		cQuery += "C9_QTDLIB QTD,C9_PRODUTO PROD,C9_ITEM ITEM,C9_LOCAL LOCAL, C9_SEQUEN ITSEQ, C9_STSERV STATUS FROM "
		cQuery += RetSqlName("SC9")+" SC9"
		cQuery += " WHERE SC9.C9_FILIAL='"+xFilial("SC9")+"' AND "
		
		If lWmsNew .And. lCtrWMS
			D11->(DbSetOrder(2))
			If D11->(DbSeek(xFilial('D11')+ aValor[1]))
				cQuery += "(SC9.C9_PRODUTO = "	+ "'" + D11->D11_PRDORI + "'"	+ " OR "
				cQuery += " SC9.C9_PRODUTO = "	+ "'" + aValor[1] + "'"	+ ") AND "
			Else
				cQuery += " SC9.C9_PRODUTO = "	+ "'" + aValor[1] + "'"	+ " AND "
			EndIf 
			If lAuto .and. lWmsNew
				cQuery += " SC9.C9_STSERV <> '3' AND "
			EndIf
		Else
			cQuery += " SC9.C9_PRODUTO = "	+ "'" + aValor[1] + "'"	+ " AND "	
		EndIf
		
		cQuery += " SC9.C9_LOCAL = "	+ "'" + aValor[2] + "'"	+ " AND "
		
		If !Empty(aValor[5]) .and. !lCtrWMS
			cQuery += " EXISTS(SELECT 1 FROM " + RetSqlName("SDC")+" SDC " 
			cQuery += " WHERE SDC.DC_PEDIDO =  SC9.C9_PEDIDO AND SDC.DC_LOCALIZ = '" + aValor[5] + "'" 
			cQuery += " AND SDC.DC_ORIGEM = 'SC6' AND SDC.D_E_L_E_T_ = '' AND SDC.DC_ITEM = SC9.C9_ITEM  ) AND "
		EndIf
		
		cQuery += " SC9.C9_LOTECTL = "	+ "'" + aValor[3] + "'"	+ " AND "
		cQuery += " SC9.C9_NUMLOTE = "	+ "'" + aValor[4] + "'"	+ " AND "
		cQuery += " SC9.C9_NUMSERI = "	+ "'" + aValor[6] + "'"	+ " AND "
		cQuery += " SC9.C9_NFISCAL = "	+ "'" + Space(TamSx3("C9_NFISCAL")[1]) + "'"	+ " AND "
		cQuery += " SC9.C9_BLEST = "	+ "'" + Space(TamSx3("C9_BLEST")[1]) + "'"	+ " AND "
		cQuery += " SC9.C9_BLCRED = "	+ "'" + Space(TamSx3("C9_BLCRED")[1]) + "'"	+ " AND "
		cQuery += " SC9.C9_RESERVA = ' ' AND "
		cQuery += " SC9.C9_NFISCAL = ' ' AND "
		cQuery += " SC9.D_E_L_E_T_ = ' ' "
		Do Case
			Case nResQTD = 1
				cQuery += "ORDER BY C9_QTDLIB,C9_DATALIB "
			Case nResQTD = 2
				cQuery += "ORDER BY C9_QTDLIB DESC,C9_DATALIB "
			Case nResQTD = 3
				cQuery += "ORDER BY C9_DATALIB "
			Case nResQTD = 4
				cQuery += "ORDER BY C9_DATALIB DESC "
		EndCase
	
	Case cTpQuery == "SC0" 
		//-- Verificar os Pedido de vendas TABELA SC0
		cQuery := "SELECT SC9.C9_PEDIDO PEDIDO, SC9.C9_RESERVA RESERVA, SC9.C9_NFISCAL NOTA, SC0.C0_NUM NUMRESERVA, SC0.C0_EMISSAO DTEMISSAO, SC0.C0_QTDORIG QTD, SC0.C0_QUANT SALDO, "
		cQuery += "SC0.C0_PRODUTO PROD, SC9.C9_ITEM ITEM,SC9.C9_SEQUEN ITSEQ,SC0.C0_LOCAL ARMAZEM, SC0.C0_LOTECTL LOTECTL,SC0.C0_NUMLOTE NUMLOTE,SC0.C0_NUMSERI NUMSERI FROM "
		cQuery += RetSqlName("SC0")+" SC0 "
		cQuery += "LEFT JOIN " + RetSqlName("SC9") + " SC9 "
		cQuery += "ON SC0.C0_NUM = SC9.C9_RESERVA "
		cQuery += "WHERE SC0.C0_FILIAL='"+xFilial("SC0")+"' AND "
		
		If lWmsNew .And. lCtrWMS
			D11->(DbSetOrder(2))
			If D11->(DbSeek(xFilial('D11')+ aValor[1]))
				cQuery += " (SC0.C0_PRODUTO = "	+ "'" + D11->D11_PRDORI + "'"	+ " OR "
				cQuery += " SC0.C0_PRODUTO = "	+ "'" + aValor[1] + "'"	+ ") AND "
			Else
			cQuery += " SC0.C0_PRODUTO = "	+ "'" + aValor[1] + "'"	+ " AND "	
			EndIf 
		Else
			cQuery += " SC0.C0_PRODUTO = "	+ "'" + aValor[1] + "'"	+ " AND "
		EndIf
		
		cQuery += " SC0.C0_LOCAL = "	+ "'" + aValor[2] + "'"	+ " AND "
		cQuery += " SC0.C0_LOTECTL = "	+ "'" + aValor[3] + "'"	+ " AND "
		cQuery += " SC0.C0_NUMLOTE = "	+ "'" + aValor[4] + "'"	+ " AND "
		cQuery += " SC0.C0_NUMSERI = "	+ "'" + aValor[6] + "'"	+ " AND "
		cQuery += " SC0.D_E_L_E_T_ = ' ' AND "
		cQuery += " ((SC9.C9_RESERVA IS NULL) OR (SC9.C9_NFISCAL = ' ')) AND"
		cQuery += " ((SC9.C9_PEDIDO IS NULL) OR (SC9.C9_PEDIDO IS NOT NULL )) AND"
		cQuery += " SC0.C0_QTDELIM < SC0.C0_QTDORIG" 

		Do Case
			Case nResQTD = 1
				cQuery += "ORDER BY C0_QTDORIG,C0_EMISSAO "
			Case nResQTD = 2
				cQuery += "ORDER BY C0_QTDORIG DESC,C0_EMISSAO "
			Case nResQTD = 3
				cQuery += "ORDER BY C0_EMISSAO "
			Case nResQTD = 4
				cQuery += "ORDER BY C0_EMISSAO DESC "
		EndCase
	
	Case lWmsNew .And. cTpQuery == "DH1"
		cQuery := " SELECT DH1.DH1_DOC,"
		cQuery +=        " DH1.DH1_EMISAO,"
		cQuery +=        " DH1.DH1_PRODUT,"
		cQuery +=        " DH1.DH1_LOCAL,"
		cQuery +=        " DH1.DH1_QUANT,"
		cQuery +=        " DH1.DH1_IDDCF,"
		cQuery +=        " DH1.DH1_NUMSEQ"
		cQuery +=   " FROM "+RetSqlName("DH1")+" DH1"
		cQuery +=  " WHERE DH1.DH1_FILIAL = '"+xFilial("DH1")+"'"
		cQuery +=    " AND DH1.DH1_PRODUT = '"+aValor[1]+"'"
		cQuery +=    " AND DH1.DH1_LOCAL = '"+aValor[2]+"'"
		cQuery +=    " AND DH1.DH1_LOTECT = '"+aValor[3]+"'"
		cQuery +=    " AND DH1.DH1_NUMLOT = '"+aValor[4]+"'"
		cQuery +=    " AND DH1.DH1_NUMSER = '"+aValor[6]+"'"
		cQuery +=    " AND DH1.DH1_STATUS = '1'"
		cQuery +=    " AND DH1.DH1_TM > '500'"
		cQuery +=    " AND EXISTS ( SELECT 1 FROM "+RetSqlName("DCF")+" DCF"
		cQuery +=                  " WHERE DCF.DCF_FILIAL = '"+xFilial("DCF")+"'"
		cQuery +=                    " AND DCF.DCF_ID = DH1.DH1_IDDCF"
		cQuery +=                    " AND DCF.D_E_L_E_T_ = ' ' )"
		cQuery +=    " AND DH1.D_E_L_E_T_ = ' '"
		Do Case
			Case nResQTD = 1
				cQuery += "ORDER BY DH1_QUANT,DH1_EMISAO "
			Case nResQTD = 2
				cQuery += "ORDER BY DH1_QUANT DESC,DH1_EMISAO "
			Case nResQTD = 3
				cQuery += "ORDER BY DH1_EMISAO "
			Case nResQTD = 4
				cQuery += "ORDER BY DH1_EMISAO DESC "
		EndCase
	
	Case lWmsNew .And. cTpQuery == "DCF"
		cQuery := " SELECT DCF.DCF_DOCTO,"
		cQuery +=        " DCF.DCF_DATA,"
		cQuery +=        " DCF.DCF_CODPRO,"
		cQuery +=        " DCF.DCF_LOCAL,"
		cQuery +=        " DCF.DCF_QUANT,"
		cQuery +=        " DCF.DCF_ID"
		cQuery +=   " FROM "+RetSqlName("DCF")+" DCF"
		cQuery +=  " WHERE DCF.DCF_FILIAL = '"+xFilial("DH1")+"'"
		cQuery +=    " AND DCF.DCF_CODPRO = '"+aValor[1]+"'"
		cQuery +=    " AND DCF.DCF_LOCAL = '"+aValor[2]+"'"
		cQuery +=    " AND DCF.DCF_LOTECT = '"+aValor[3]+"'"
		cQuery +=    " AND DCF.DCF_NUMLOT = '"+aValor[4]+"'"
		cQuery +=    " AND DCF.DCF_ORIGEM = 'DCF'"
		cQuery +=    " AND ((DCF.DCF_STSERV IN ('1','2')) AND DCF.DCF_ENDER <> ' ' "
		cQuery +=       " OR DCF.DCF_STSERV = '3' AND EXISTS ( SELECT 1 FROM "+RetSqlName("DCR")+" DCR"
		cQuery +=                                             " INNER JOIN "+RetSqlName("D12")+" D12"
		cQuery +=                                                " ON D12.D12_FILIAL = '"+xFilial("D12")+"'"
		cQuery +=                                               " AND D12.D12_IDDCF = DCR.DCR_IDORI"
		cQuery +=                                               " AND D12.D12_IDMOV = DCR.DCR_IDMOV"
		cQuery +=                                               " AND D12.D12_IDOPER = DCR.DCR_IDOPER"
		cQuery +=                                               " AND D12.D12_SEQUEN = DCR.DCR_SEQUEN"
		cQuery +=                                               " AND D12.D12_STATUS IN ('-','2','3','4')"
		cQuery +=                                               " AND D12.D12_ATUEST = '1'"
		cQuery +=                                               " AND D12.D_E_L_E_T_ = ' '"
		cQuery +=                                             " WHERE DCR.DCR_FILIAL = '"+xFilial("DCR")+"'"
		cQuery +=                                               " AND DCR.DCR_IDDCF = DCF.DCF_ID"
		cQuery +=                                               " AND DCR.DCR_SEQUEN = DCF.DCF_SEQUEN"
		cQuery +=                                               " AND DCR.D_E_L_E_T_ = ' '))"
		cQuery +=    " AND DCF.D_E_L_E_T_ = ' '"
		Do Case
			Case nResQTD = 1
				cQuery += "ORDER BY DCF_QUANT,DCF_DATA "
			Case nResQTD = 2
				cQuery += "ORDER BY DCF_QUANT DESC,DH1_DATA "
			Case nResQTD = 3
				cQuery += "ORDER BY DCF_DATA "
			Case nResQTD = 4
				cQuery += "ORDER BY DCF_DATA DESC "
		EndCase
		
	EndCase

Return cQuery


//-------------------------------------------------------------------
/*/{Protheus.doc} M341PREVL


@author Bruno.Schmidt
@since 16/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Function M341PREVL(oMdGrdAux, nLine, cAction, cField, xValue, xOldValue)
Local oModel 	:= FwModelActive()
Local oMdGrd01	:= Nil
Local aSaveLines:= FWSaveRows()
Local ny 		:= 0 
Local nx 		:= 0
Local nItemPai 	:= 0 
Local nItemSeq	:= 0
Local cCodPai 	:= ""
Local cLocalPai := ""
Local cPedVen 	:= ""
Local lRet 		:= .T.
Local lLocaliz	:= .F.
Local lCtrWMS	:= .F.
Local cMsg 		:= ""

If cAction == 'SETVALUE' .And. xValue <> xOldValue .And. cField == 'VEN_FLAG'
	oMdGrd01	:= oModel:GetModel("341GRID01")
	oMdGrd02	:= oModel:GetModel("341GRID02")
	cCodPai	:= oMdGrdAux:GetValue('VEN_PROD')
	cLocalPai	:= oMdGrdAux:GetValue('VEN_LOCAL')
	nItemPai	:= oMdGrdAux:GetValue('VEN_ITEM')
	nItemSeq	:= oMdGrdAux:GetValue('VEN_ITSEQ')
	cPedVen	:= oMdGrdAux:GetValue('VEN_PED')
	
	lLocaliz	:= Localiza(cCodPai,.T.)
	lCtrWMS	:= IntDL(cCodPai,lLocaliz)
	
	If lCtrWMS 
		For nx := 1 to oMdGrd01:Length()
			oMdGrd01:GoLine(nx)
			For ny := 1 to oMdGrd02:Length()
				oMdGrd02:GoLine(ny)
				If cCodPai == oMdGrd02:GetValue('VEN_PROD') .and.  cLocalPai == oMdGrd02:GetValue('VEN_LOCAL') .and. nItemPai == oMdGrd02:GetValue('VEN_ITEM') .and. nItemSeq == oMdGrd02:GetValue('VEN_ITSEQ') .and. cPedVen == oMdGrd02:GetValue('VEN_PED')
					oMdGrd02:LoadValue('VEN_FLAG',xValue)
				EndIf	
			Next ny
		Next nx
	EndIf

	cObs := oMdGrd02:Getvalue('VEN_OBS')
	If !Empty(cObs)
		If AllTrim(cObs) == STR0037 // Reserva sem saldo em aberto
			cMsg:= STR0038 // "Não é possível estornar uma reserva sem saldo em aberto"
		Else
			cMsg:= STR0039 // "Não é possível estornar pedido com serviço WMS executado!"
		EndIf
		lRet := .F.
		oModel:SetErrorMessage('MATA241', '341GRID02', 'MATA241', '341GRID02',,cMsg)
	EndIf
EndIf

FWRestRows(aSaveLines)

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} M341ValFlag


@author Bruno.Schmidt
@since 16/12/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Function M341ValFlag()
Local lRet := .T.
Local oModel	:= FwModelActive()

oMdGrd02	:= oModel:GetModel("341GRID02")

If !Empty(oMdGrd02:GetValue('VEN_OBS')) 
	Help( ,, 'Bloqueio WMS',,oMdGrd02:GetValue('VEN_OBS'),1,0)
	oMdGrd02:LoadValue('VEN_FLAG',.F.)
ENdIf

Return 
//-------------------------------------------------------------------
/*/{Protheus.doc} WmsEndEsco
Busca o endereço escolhido pelo WMS ao executar o serviço

@author felipe.m
@since 21/02/2016
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function WmsEndEsco(cOrigem,cPedido,cItem,cSequen,cProduto,cIdDCF)
Local aAreaAnt := GetArea()
Local aEndereco := {}
Local cQuery := ""
Local cAliasQry := GetNextAlias()
Local lPedVenda := (cOrigem == "SC9")
Local lMovInter := (cOrigem == "DH1")
Local lMovTrans := (cOrigem == "DCF")

	cQuery := "SELECT D12.D12_ENDORI ENDERECO"
	Do Case
		Case lPedVenda
			cQuery += " FROM "+RetSqlName("SC9")+" SC9"
		Case lMovInter .Or. lMovTrans
			cQuery += " FROM "+RetSqlName("DCF")+" DCF"
	EndCase
	If lPedVenda
		cQuery += " INNER JOIN "+RetSqlName("DCF")+" DCF"
		cQuery +=    " ON DCF.DCF_FILIAL = '"+xFilial("DCF")+"'"
		cQuery +=   " AND DCF.DCF_ID = SC9.C9_IDDCF"
		cQuery +=   " AND DCF.D_E_L_E_T_ = ' '"
	EndIf
	cQuery += " INNER JOIN "+RetSqlName("DCR")+" DCR"
	cQuery +=    " ON DCR.DCR_FILIAL = '"+xFilial("DCR")+"'"
	cQuery +=   " AND DCR.DCR_IDDCF = DCF.DCF_ID"
	cQuery +=   " AND DCR.DCR_SEQUEN = DCF.DCF_SEQUEN"
	cQuery +=   " AND DCR.D_E_L_E_T_ = ' '"
	cQuery += " INNER JOIN "+RetSqlName("D12")+" D12"
	cQuery +=    " ON D12.D12_FILIAL = '"+xFilial("D12")+"'"
	cQuery +=   " AND D12.D12_IDDCF = DCR.DCR_IDORI"
	cQuery +=   " AND D12.D12_IDMOV = DCR.DCR_IDMOV"
	cQuery +=   " AND D12.D12_IDOPER = DCR.DCR_IDOPER"
	cQuery +=   " AND D12.D12_SEQUEN = DCR.DCR_SEQUEN"
	cQuery +=   " AND D12.D12_STATUS IN ('-','2','3','4')"
	cQuery +=   " AND D12.D12_ATUEST = '1'"
	cQuery +=   " AND D12.D_E_L_E_T_ = ' '"
	cQuery += " WHERE"
	Do Case
		Case lPedVenda
			cQuery +=     " SC9.C9_FILIAL = '"+xFilial("SC9")+"'"
			cQuery += " AND SC9.C9_PEDIDO = '"+cPedido+"'"
			cQuery += " AND SC9.C9_ITEM = '"+cItem+"'"
			cQuery += " AND SC9.C9_SEQUEN = '"+cSequen+"'"
			cQuery += " AND SC9.C9_PRODUTO = '"+cProduto+"'"
			cQuery += " AND SC9.D_E_L_E_T_ = ' '"
		Case lMovInter .Or. lMovTrans
			cQuery +=     " DCF.DCF_FILIAL = '"+xFilial("DCF")+"'"
			cQuery += " AND DCF.DCF_ID = '"+cIdDCF+"'"
			cQuery += " AND DCF.D_E_L_E_T_ = ' '"
	EndCase
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGENQRY(,,cQuery),cAliasQry, .F., .T.)
	Do while (cAliasQry)->(!Eof())
		aAdd(aEndereco,(cAliasQry)->ENDERECO)
		(cAliasQry)->(dbSkip())
	EndDo
	(cAliasQry)->(dbCloseArea())

RestArea(aAreaAnt)
Return aEndereco
