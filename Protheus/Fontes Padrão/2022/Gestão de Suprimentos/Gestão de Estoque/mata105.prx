#INCLUDE "MATA105.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWEVENTVIEWCONSTS.CH"
#DEFINE LINHAS 999

Static aRecSCP := NIL
Static aColsSGS:= NIL
Static cCodUsr
Static aGrpUsr
Static bGetSx3 := { | x,y | GetSx3Cache( x, y ) }


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MATA105  ³ Autor ³ Edson Mariate         ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Solicitacao ao Almoxarifado.                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Void mata105(void)                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function MATA105(xReservCab,xReservItens,nOpcAuto,xRatSA)
Local nPos, bBlock
Local nX		 := 0
Local cFiltraSCP := ""
Local aRotAdic   := {}
Local lContinua  := .T.
Local cFilQuery	    := ""
Local nPosNum		:= 0
Local nSCPEmis 		:= 0
Local nSCPItem 		:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Vari vel utilizada no PE MTA105COR                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aMT105COR  := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Array contendo as Rotinas a executar do programa      ³
//³ ----------- Elementos contidos por dimensao ------------     ³
//³ 1. Nome a aparecer no cabecalho                              ³
//³ 2. Nome da Rotina associada                                  ³
//³ 3. Usado pela rotina                                         ³
//³ 4. Tipo de Transa‡„o a ser efetuada                          ³
//³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
//³    2 - Simplesmente Mostra os Campos                         ³
//³    3 - Inclui registros no Bancos de Dados                   ³
//³    4 - Altera o registro corrente                            ³
//³    5 - Remove o registro corrente do Banco de Dados          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private aRotina   := MenuDef()

Private cCadastro := OemToAnsi(STR0010)  //"Solicita‡„o ao Almoxarifado"
Private l105LIN   := ExistBlock("MTA105LIN")
Private l105Auto  := ( xReservCab <> NIL  .And. xReservItens <> NIL .And. nOpcAuto <> Nil )
Private aAutoCab  := {}
Private aAutoItens:= {}
PRIVATE aRatSA	  := If(xRatSA<>NIL,xRatSA,{})
Private aCores    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Esta vari vel serve como sem foro para copia ou repeti‡„o de SA's      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private lCopia    := .F.
Private aAlter	 := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis para armazenar as informacoes do rateio quando houver alteracao ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE nFAltRat    := 0
PRIVATE nFAltRat2   := 0
PRIVATE aCPHSGS     := {}
PRIVATE ACPISGS     := {}

SetKey( VK_F12,{ || pergunte("MTA105",.T.) } )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega o grupo de perguntas                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Pergunte("MTA105", .F.)

aAreaSCP := SCP->(GetArea())
If l105Auto
	aAutoCab := SCP->( MsArrayXDB( xReservCab,,nOpcAuto ) )
	For nX := 1 To Len(xReservItens)
		aadd(aAutoItens,SCP->( MsArrayXDB( xReservItens[ nX ],, nOpcAuto ,.T. ) ) )
	Next
	// se não gerou array, provavelmente não achou o registro na SCP. Com isso falha a execucao automatica
	If len(aAutoCab)==0
		l105Auto := .F.
    EndIf
EndIf
RestArea(aAreaSCP)

dbSelectArea("SCP")
dbSetOrder(1)

If l105Auto
	If (nPos := Ascan(aRotina,{|aVal| aVal[4] == nOpcAuto})) <> 0
		aAreaSCP := SCP->(GetArea())
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valida o array Rateio por CCusto - rotina automatica	       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		If lContinua
			If Len(aRatSA) > 0
				ACPISGS:=aClone(aRatSA)
			EndIf
			bBlock := &( "{ |x,y,z| " + aRotina[ nPos,2 ] + "(x,y,z) }" )
			If nOpcAuto <> 3
				nPosNum	:= aScan(aAutoCab,{|x| AllTrim(x[1]) == "CP_NUM"})
				If !SCP->(DbSeek(xFilial("SCP") + PadR(aAutoCab[nPosNum,2],TamSx3("CP_NUM")[1])))
					AutoGrLog(STR0058+cvaltochar(PadR(aAutoCab[nPosNum,2],TamSx3("CP_NUM")[1])))
					Return .F.
				Else
					//Se Mv_Par02 == 1 ( Exclusao por Item ), Consideramos Sempre o Primeiro Registro Encontrado no aAutoItens para Exclus?o
					If ( nOpcAuto == 5 .And. Mv_Par02 == 1 .And. Len( aAutoItens ) > 0 )
						nSCPEmis := Ascan( aAutoCab , { | x | AllTrim( x[ 1 ] ) == "CP_EMISSAO" } )
						nSCPItem := Ascan( aAutoItens[ 1 ], { | x | AllTrim( x[ 1 ] ) == "CP_ITEM" } )
						If !SCP->( dbSeek( FWxFilial( "SCP" ) + PadR( aAutoCab[ nPosNum ][ 2 ], TamSx3( "CP_NUM" )[1] ) + PadR( aAutoItens[ 1 ][ nSCPItem ][ 2 ], TamSx3( "CP_ITEM" )[1] ) + Dtos( aAutoCab[ nSCPEmis ][ 2 ] ) ) )
							AutoGrLog(STR0058 + cvaltochar( PadR( aAutoCab[nPosNum,2], TamSx3("CP_NUM")[1] ) ) )
							Return .F.
						EndIf
					EndIf
				EndIf
			Endif

			Eval( bBlock,Alias(),SCP->(Recno()),nPos)
		EndIf
	Else
		bBlock := &( "{ |x,y,z| " + aRotina[ nPos,2 ] + "(x,y,z) }" )
		If nOpcAuto <> 3
			nPosNum	:= aScan(aAutoCab,{|x| AllTrim(x[1]) == "CP_NUM"})
			If !SCP->(DbSeek(xFilial("SCP") + PadR(aAutoCab[nPosNum,2],TamSx3("CP_NUM")[1])))
				AutoGrLog(STR0058+cvaltochar(PadR(aAutoCab[nPosNum,2],TamSx3("CP_NUM")[1])))
				Return .F.
			Else
				//Se Mv_Par02 == 1 ( Exclusao por Item ), Consideramos Sempre o Primeiro Registro Encontrado no aAutoItens para Exclus?o
				If ( nOpcAuto == 5 .And. Mv_Par02 == 1 .And. Len( aAutoItens ) > 0 )
					nSCPEmis := Ascan( aAutoCab , { | x | AllTrim( x[ 1 ] ) == "CP_EMISSAO" } )
					nSCPItem := Ascan( aAutoItens[ 1 ], { | x | AllTrim( x[ 1 ] ) == "CP_ITEM" } )
					If !SCP->( dbSeek( FWxFilial( "SCP" ) + PadR( aAutoCab[ nPosNum ][ 2 ], TamSx3( "CP_NUM" )[1] ) + PadR( aAutoItens[ 1 ][ nSCPItem ][ 2 ], TamSx3( "CP_ITEM" )[1] ) + Dtos( aAutoCab[ nSCPEmis ][ 2 ] ) ) )
						AutoGrLog(STR0058 + cvaltochar( PadR( aAutoCab[nPosNum,2], TamSx3("CP_NUM")[1] ) ) )
						Return .F.
					EndIf
				EndIf
			EndIf

			Eval( bBlock,Alias(),SCP->(Recno()),nPos)
		EndIf
		RestArea(aAreaSCP)
	EndIf
ElseIf ( xReservCab == NIL  .And. xReservItens == NIL .And. nOpcAuto == Nil )
	If ExistBlock("MT105FIL")
		cFiltraSCP := ExecBlock("MT105FIL",.F.,.F.)
	EndIf

	aAdd(aCores, { "!EMPTY(CP_PREREQU) .AND. !CP_STATSA $ 'BR'" , "Disable" })
	aAdd(aCores, { "EMPTY(CP_PREREQU)  .AND. !CP_STATSA $ 'BR'" , "Enable"  })
	aAdd(aCores, { "CP_STATSA == 'B'", "BR_PRETO" })
	aAdd(aCores, { "CP_STATSA == 'R'", "BR_CANCEL" })

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ P.E. Utilizado para alterar as cores da legenda              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock("MT105COR")
		aMT105COR := ExecBlock("MT105COR",.F.,.F., {aCores} )
		If ( Valtype(aMT105COR) == "A" )
			aCores := aClone( aMT105COR )
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ P.E. Utilizado para adicionar botoes ao Menu Principal       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock("MT105MNU")
		aRotAdic := ExecBlock("MT105MNU",.F.,.F.)
		If ValType(aRotAdic) == "A"
			AEval(aRotAdic,{|x| AAdd(aRotina,x)})
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ P.E. Utilizacao: Filtro da Mbrowse para ambiente Top         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock("MT105QRY") //-Executado somente se nao utilizar MT105FIL
		cFilQuery := AllTrim(ExecBlock("MT105QRY",.F.,.F.))
		If Valtype(cFilQuery) <> "C"
			cFilQuery := ""
		EndIf
	EndIf

	mBrowse( 6, 1,22,75,"SCP",,"CP_PREREQU",,,,aCores,,,,,,,,IIF(!Empty(cFilQuery),cFilQuery, NIL),,,,cFiltraSCP)

ElseIf ( xReservCab == NIL  .And. xReservItens == NIL .And. nOpcAuto <> Nil )
	If (nPos := Ascan(aRotina,{|aVal| aVal[4] == nOpcAuto})) <> 0
		bBlock := &( "{ |x,y,z| " + aRotina[ nPos,2 ] + "(x,y,z) }" )
		Eval( bBlock,Alias(),SCP->(Recno()),nPos)
	EndIf
EndIf

Set Key VK_F12 To

dbSelectArea("SCP")
dbClearFilter()
dbSetOrder(1)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Visual³ Autor ³ Edson Mariate         ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de visualizacao de uma solicitacao ao almox.      ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ Void A105Visual(ExpC1,ExpN1,ExpN2)                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN2 = Numero do registro                                 ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Visual(cAlias,nReg,nOpcx)

Local aArea    := GetArea()
Local nOpcA    := 0
Local nButton  := 0
Local aBut105  := {}
Local aButtons := Nil
Local oDlg, oGet

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Walk-Thru						                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aNoFields	 := { "CP_NUM" }
Local bSeekWhile := {} //Condicao While para montar o aCols
Local cSeek		 := ""
Local aBtnBack := {}
Local oSize
Local oSize2
Local aHeadSGS	:= {}

Private o105Get
Private cSolic 		:= SCP->CP_SOLICIT
Private dA105Data	:= SCP->CP_EMISSAO
Private cA105Num 	:= SCP->CP_NUM
Private cA105Filial	:= SCP->CP_FILIAL
Private aTELA[0][0]
Private aGETS		:= {}
Private aHeader     := {}
Private aCols       := {}
Private aRatAFH		:= {}
Private aHdrAFH		:= {}
Private bPMSDlgSA	:= {||PmsDlgSA(2,ca105Num)}
Private aRotina   := MenuDef()
Private l105LIN   := ExistBlock("MTA105LIN")
aColsSGS	:= {} // Inicialização de Variável Static

If IntePms()	// Se usa PMS integrado com o ERP
	aBut105 := { {'PROJETPMS',{||Eval(bPmsDlgSA)},STR0014,STR0026 } } //"Gerenciamento de Projetos"##"Ger. de Projetos"
Endif
If MtExistDBM('SA',SCP->CP_NUM,,,.F.)
	Aadd(aBut105,{'APROV105',{|| a120Posic(cAlias,nReg,nOpcX,"SA")},STR0056, STR0057})//"Log de Aprovação"#"Aprovação"
EndIf

aAdd(aBut105,{'RATEIO105',{|| a105RatCC(aHeadSGS,aColsSGS,.F.)},STR0039,STR0040}) //"Rateio por Item da Solicitação"##"Rateio"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Array contendo as registros do SCX ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
A105AcoSGS(@aHeadSGS,@aColsSGS)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Executa ponto de entrada para montar array com botoes a      ³
//³ serem apresentados na tela de alteracao de empenho           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If (ExistBlock( "M105BUT" ) )
	aButtons:=ExecBlock("M105BUT",.F.,.F.)
	If ValType(aButtons) == "A"
		For nButton:=1 to Len(aButtons)
			AADD(aBut105,aButtons[nButton])
		Next nButton
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
//³ Este PE foi criado porque o PE acima (M105BUT) nao permite manipular ³
//³ botoes da enchoicebar.                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock( "A105BUT" )
	aBtnBack := aClone(aBut105)
	aBut105 := ExecBlock( "A105BUT", .F., .F., { nOpcx, aBut105 } )
	If ValType( aBut105 ) # "A"
		aBut105 := aClone(aBtnBack)
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta aHeader e aCols utilizando a funcao FillGetDados   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cSeek	   := cA105Filial + cA105Num
bSeekWhile := { || CP_FILIAL + CP_NUM }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Sintaxe da FillGetDados( nOpcx, cAlias, nOrder, cSeekKey, bSeekWhile, uSeekFor, aNoFields, aYesFields, lOnlyYes, cQuery, bMontCols, lEmpty, aHeaderAux, aColsAux, bAfterCols, bBeforeCols, bAfterHeader, cAliasQry ) |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
FillGetDados(nOpcX,"SCP",1,cSeek,bSeekWhile,{||.T.},aNoFields )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula dimensões                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oSize := FwDefSize():New()
oSize:AddObject( "CABECALHO",  100, 5, .T., .T. ) // Totalmente dimensionavel
oSize:AddObject( "GETDADOS" ,  100, 85, .T., .T. ) // Totalmente dimensionavel

oSize:lProp 	:= .T. // Proporcional
oSize:aMargins 	:= { 3, 3, 3, 3 } // Espaco ao lado dos objetos 0, entre eles 3

oSize:Process() // Dispara os calculos

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Divide cabeçalho                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oSize2 := FwDefSize():New()

oSize2:aWorkArea := oSize:GetNextCallArea( "CABECALHO" )

oSize2:AddObject( "NUMERO"  ,  20, 100, .T., .T.) // Dimensionavel
oSize2:AddObject( "SOLICIT" ,  20, 100, .T., .T.) // Dimensionavel
oSize2:AddObject( "DATA"    ,  20, 100, .T., .T.) // Dimensionavel

oSize2:lLateral := .T.            //Calculo em Lateral
oSize2:lProp := .T.               // Proporcional
oSize2:aMargins := { 3, 3, 0, 0 } // Espaco ao lado dos objetos 0, entre eles 3

oSize2:Process() // Dispara os calculos

DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) OF oMainWnd PIXEL; //"Solicitação de Armazens"
FROM oSize:aWindSize[1],oSize:aWindSize[2] TO oSize:aWindSize[3],oSize:aWindSize[4] OF oMainWnd PIXEL

@ oSize2:GetDimension("NUMERO","LININI")+2,oSize2:GetDimension("NUMERO","COLINI")    SAY OemToAnsi(STR0011)  Of oDlg PIXEL 		//"&N£mero"
@ oSize2:GetDimension("NUMERO","LININI")  ,oSize2:GetDimension("NUMERO","COLINI")+25 MSGET cA105Num 	When .f. Of oDlg PIXEL

@ oSize2:GetDimension("SOLICIT","LININI")+2,oSize2:GetDimension("SOLICIT","COLINI")    SAY OemToAnsi(STR0012) 	 Of oDlg PIXEL	//"&Solicitante"
@ oSize2:GetDimension("SOLICIT","LININI")  ,oSize2:GetDimension("SOLICIT","COLINI")+30 MSGET cSolic  Pict "@S10" 	When .f.  Of oDlg PIXEL

@ oSize2:GetDimension("DATA","LININI")+2,oSize2:GetDimension("DATA","COLINI") SAY OemToAnsi(STR0013)	 Of oDlg PIXEL	//"&Data de Emiss„o"
@ oSize2:GetDimension("DATA","LININI")  ,oSize2:GetDimension("DATA","COLINI")+45 MSGET dA105Data When .f. Of oDlg PIXEL

If ExistBlock("MT105SCR")
	ExecBlock("MT105SCR",.F.,.F.,{@oDlg,nOpcx,oGet})
EndIf

oGet := MSGetDados():New(oSize:GetDimension("GETDADOS","LININI"),oSize:GetDimension("GETDADOS","COLINI"),;
						oSize:GetDimension("GETDADOS","LINEND"),oSize:GetDimension("GETDADOS","COLEND"),;
						nOpcx,"A105LinOk","A105TudOk","",.F.,NIL,NIL,NIL,LINHAS,"A105FldOk",,,"A105DelIt",oDlg)
o105Get := oGet
ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpcA:=1,oDlg:End()},{||oDlg:End()},,aBut105)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Restaura a entrada da rotina                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Inclui³ Autor ³ Edson Maricate        ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de inclusao de solicitacoes ao almoxarifado.      ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ Void A105Inclui(ExpCP,ExpN1)                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN2 = Numero do registro                                 ³±±
±±³          ³ ExpN3 = Opcao selecionada                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Inclui(cAlias,nReg,nOpcx)

Local lViewF4   := .T.
Local lExibeF4  := .T.
Local lGravaOK	:= .T.
Local lHelpNumSeq:= .F.
Local cTabSol	:= "US3"
Local nUsado    := 0
Local nCntFor	:= 0
Local nButton   := 0
Local nOpcA		:= 0
Local nSaveSX8  := GetSX8Len()
Local aBut105	:= {}
Local aCamposVld:= {}
Local bBlkVld   := {|x| x[3] := &(x[2])}
Local lUsers    := GetMV("MV_VSOLIC")
Local aButtons  := Nil
Local cCpoValid := "CP_QUJE/CP_OK/CP_PREREQU/CP_NUMSC/CP_ITSC/CP_SALBLQ/CP_NUMOS/CP_ITEMOS/"
Local aCpoValid	:= {}
Local cA105NumAt:= ""
Local oDlg, oGet
Local nPosSol	:= aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_SOLICIT"})
Local nPosEmi	:= aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_EMISSAO"})
Local nPosNum	:= aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_NUM"})
Local nPosFil	:= aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_FILIAL"})
Local aBtnBack	:= {}
Local oSize
Local oSize2
Local aHeadSGS	:= {}
Local aColsSGS	:= {}
Local aRetInt	:= {}
Local aAreaSCP	:= {}
Local lIntegDef := FWHasEAI("MATA105",.T.,,.T.)
Local nCntBLQ   := 0

Private o105Get
Private aTELA[0][0]
Private aGETS[0]
Private cSolic		  := If(lUsers,CUSERNAME,CRIAVAR("CP_SOLICIT"))
Private cIdUser		  := ""
Private dA105Data	  := dDataBase
Private cA105Num	  := ''
Private cA105Filial := xFilial("SCP")
Private aHeader     := {}
Private aCols       := {}
Private aRatAFH		:= {}
Private aHdrAFH		:= {}
Private bPMSDlgSA	:= {||PmsDlgSA(nOpcx, ca105Num)}
Private aValidGet   := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica a Existencia da varivael l105Auto      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
l105Auto := If(Type("l105Auto") == "L",l105Auto,.F.)
cA105Num := IIf(lCopia,SCP->CP_NUM,cA105Num)
aColsSGS := {} // Inicialização de Variável Static

If !( l105Auto ) .And. Empty( cA105Num )
	aAreaSCP := SCP->( GetArea() )
	cA105Num := CriaVar( "CP_NUM", .T. )
	cA105Num := IIf( Empty( cA105Num ), GetSxeNum( "SCP", "CP_NUM" ), ca105Num )
	cA105Num := IIf( Empty( cA105Num ), NextNumero("SCP", 1,"CP_NUM", .T. ) , cA105Num )

	SCP->( dbSetOrder( 1 ) )
	While SCP->( dbSeek( cA105Filial + cA105Num ) )
		ConfirmSx8( .T. )
		cA105Num :=	GetSxeNum( "SCP", "CP_NUM" )
	EndDo

	cA105NumAt := cA105Num
	RestArea( aAreaSCP )
EndIf

If IntePms()		// Se usa PMS integrado com o ERP
	aBut105 := { {'PROJETPMS',{||Eval(bPmsDlgSA)},STR0014,STR0026 } } //"Gerenciamento de Projetos"##"Ger. de Projetos"
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Botao "Explode 1o nivel estrutura"							 |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Aadd(aBut105, {'PRODUTO',{||A105SeleEs()},OemToAnsi(STR0036),OemToAnsi(STR0035)}) //"Explode 1o nivel da estrutura"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Insere o Botao de Rateio por Centro de Custo ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Aadd(aBut105,{'RATEIO105',{|| A105RatCC(aHeadSGS,aColsSGS,.T.)},STR0039,STR0040}) //"Rateio por Item da Solicitação"##"Rateio"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Executa ponto de entrada para montar array com botoes a      ³
//³ serem apresentados na tela de alteracao de empenho           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If (ExistBlock( "M105BUT" ) )
	aButtons:=ExecBlock("M105BUT",.F.,.F.)
	If ValType(aButtons) == "A"
		For nButton:=1 to Len(aButtons)
			AADD(aBut105,aButtons[nButton])
		Next nButton
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
//³ Este PE foi criado porque o PE acima (M105BUT) nao permite manipular ³
//³ botoes da enchoicebar.                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock( "A105BUT" )
	aBtnBack := aClone(aBut105)
	aBut105 := ExecBlock( "A105BUT", .F., .F., { nOpcx, aBut105 } )
	If ValType( aBut105 ) # "A"
		aBut105 := aClone(aBtnBack)
	EndIf
EndIf

IF (ExistBlock( "M105F4" ) )
	lViewF4 := ExecBlock("M105F4",.F.,.F.)
	If ValType(lViewF4) == "L"
		lExibeF4 := lViewF4
	EndIf
EndIf

If ( ! l105Auto ) .And. ( lExibeF4 )
	Set Key VK_F4 TO ShowF4()
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Adiciona informacoes para validacao de Get Fixo no array     ³
//³ aCamposVld                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
AADD(aCamposVld,{"CP_NUM"		,"cA105Num"	,""})
AADD(aCamposVld,{"CP_SOLICIT"	,"cSolic"	,""})
AADD(aCamposVld,{"CP_EMISSAO"	,"dA105Data",""})

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inicializa o numero com o ultimo + 1                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SCP")
dbSetOrder(1)
If l105Auto
	If !dbSeek(aAutoCab[nPosFil, 2] + aAutoCab[nPosNum ,2])
		cA105Filial := aAutoCab[nPosFil, 2]
		cA105Num    := aAutoCab[nPosNum, 2]
		cSolic	    := aAutoCab[nPosSol, 2]
		dA105Data   := aAutoCab[nPosEmi, 2]
	Else
		cA105Filial := aAutoCab[nPosFil, 2]
		cSolic	    := aAutoCab[nPosSol, 2]
		dA105Data   := aAutoCab[nPosEmi, 2]
	EndIf
EndIf

cA105Filial := IIf(Empty(cA105Filial),xFilial("SCP"), cA105Filial)
cSolic	   	:= IIf(Empty(cSolic), If(lUsers,CUSERNAME,CRIAVAR("CP_SOLICIT")), cSolic)
dA105Data   := IIf(Empty(dA105Data), dDataBase, dA105Data)

If l105Auto .And. Empty( cA105Num )
	aAreaSCP := SCP->( GetArea() )
	cA105Num := CriaVar( "CP_NUM", .T. )
	cA105Num := IIf( Empty( cA105Num ), GetSxeNum( "SCP", "CP_NUM" ), ca105Num )
	cA105Num := IIf( Empty( cA105Num ), NextNumero("SCP", 1,"CP_NUM", .T. ) , cA105Num )

	SCP->( dbSetOrder( 1 ) )
	While SCP->( dbSeek( cA105Filial + cA105Num ) )
		ConfirmSx8( .T. )
		cA105Num :=	GetSxeNum( "SCP", "CP_NUM" )
	EndDo
	RestArea( aAreaSCP )
EndIf

aHeader := A105GetSx3( "SCP", "CP_NUM" )
ADHeadRec(cAlias,aHeader)
nUsado := Len(aHeader)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Opcao de Copia da Solicitacao ao Armazem                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCopia
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona ponteiro do arquivo no 1. registro valido          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea( cAlias )
	dbSetOrder(1)
	dbSeek( cA105Filial+cA105Num )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada para nao copiar campos especificos do       ³
	//³ usuario quando for utilizada a opcao copia da SA.            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock("MT105COP")
		cMT105Cop := ExecBlock("MT105COP",.F.,.F.)
		If ValType(cMT105Cop) == "C"
			cCpoValid += cMT105Cop
		EndIf
	EndIf

	aCpoValid := Separa(cCpoValid,"/")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do Acols                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	While ( !Eof() .And. SCP->CP_FILIAL+SCP->CP_NUM == cA105Filial+cA105Num )
		aadd(aCols,Array(nUsado+1))
		For nCntFor := 1 To nUsado
			If IsHeadRec(aHeader[nCntFor][2])
				aCols[Len(aCols)][nCntFor] := 0
			ElseIf IsHeadAlias(aHeader[nCntFor][2])
				aCols[Len(aCols)][nCntFor] := "SCP"
			ElseIf ( aHeader[nCntfor][10] != "V" ) .And. (aScan(aCpoValid,{|x| AllTrim(x) == AllTrim(aHeader[nCntFor][2])}) == 0)
				aCols[Len(aCols)][nCntFor] := SCP->(FieldGet(FieldPos(aHeader[nCntfor][2])))
			Else
				aCols[Len(aCols)][nCntFor] := CriaVar(aHeader[nCntfor][2])
			EndIf
		Next nCntFor
		aCols[Len(aCols)][nUsado+1] := .F.

		SB1->(DBsetOrder(1))
		If SB1->(MsSeek(xFilial("SB1")+aCols[Len(aCols)][aScan(aHeader,{|x| alltrim(x[2]) == 'CP_PRODUTO'})] ))
			If !RegistroOk ("SB1",.f.)
				aCols[Len(aCols)][nUsado+1] := .T.
				nCntBLQ += 1
			ENDIF
		EndiF

		NNR->(DbSetOrder(1))
		If NNR->(MsSeek(xFilial("NNR")+aCols[Len(aCols)][aScan(aHeader,{|x| alltrim(x[2]) == 'CP_LOCAL'})]))
			If !RegistroOk ("NNR",.f.)			
				aCols[Len(aCols)][nUsado+1] := .T.
				nCntBLQ += 1
			EndIf
		EndIf
		SCP->(dbSkip())
	EndDo
	If nCntBlq > 0 .and. !l105Auto
		MsgInfo(STR0064) //'A solicitação ao Armazem copiada contem produtos ou armazens bloqueados e serão mostrados como deletados'
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ //
	//³ Re-Posiciona ponteiro no registro selecionado para copia     ³ //
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ //
	dbSelectArea( cAlias )
	dbSetOrder(1)
	dbSeek( cA105Filial+cA105Num )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Proximo Numero valido da Solic.Armazem						 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !( Empty( cA105NumAt ) )
		cA105Num	:= cA105NumAt
	Else
		aAreaSCP := SCP->( GetArea() )
		cA105NumAt := CriaVar( "CP_NUM", .T. )
		cA105NumAt := IIf( Empty( cA105NumAt ), GetSxeNum( "SCP", "CP_NUM" ), cA105NumAt )
		cA105NumAt := IIf( Empty( cA105NumAt ), NextNumero("SCP", 1,"CP_NUM", .T. ) , cA105NumAt )

		SCP->( dbSetOrder( 1 ) )
		While SCP->( dbSeek( cA105Filial + cA105NumAt ) )
			ConfirmSx8( .T. )
			cA105NumAt :=	GetSxeNum( "SCP", "CP_NUM" )
		EndDo
		RestArea( aAreaSCP )
		cA105Num	:= cA105NumAt
	EndIf
Else

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aCols                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAdd(aCols,Array(nUsado+1))
	For	nCntFor := 1 To nUsado
		If IsHeadRec(aHeader[nCntFor][2])
			aCols[1][nCntFor] := 0
		ElseIf IsHeadAlias(aHeader[nCntFor][2])
			aCols[1][nCntFor] := "SCP"
		Else
			aCols[1][nCntFor] := CriaVar(aHeader[nCntFor][2])
			If ( AllTrim(aHeader[nCntFor][2]) == "CP_ITEM" )
				aCols[1][nCntFor] := STRZERO(1,LEN(SCP->CP_ITEM))
			EndIf
		EndIf
	Next nCntFor
	aCols[1][nUsado+1] := .F.
	If (l105Auto)
		MsAuto2aCols()
	EndIf

EndIf

cTabSol := CpoRetF3("CP_SOLICIT")
If Empty(cTabSol)
	cTabSol	:= "US3"
EndIf

PcoIniLan("000150")

If !l105Auto
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Calcula dimensões                                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oSize := FwDefSize():New()
	oSize:AddObject( "CABECALHO",  100, 5, .T., .T. ) // Totalmente dimensionavel
	oSize:AddObject( "GETDADOS" ,  100, 85, .T., .T. ) // Totalmente dimensionavel

	oSize:lProp 	:= .T. // Proporcional
	oSize:aMargins 	:= { 3, 3, 3, 3 } // Espaco ao lado dos objetos 0, entre eles 3

	oSize:Process() // Dispara os calculos

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Divide cabeçalho                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oSize2 := FwDefSize():New()

	oSize2:aWorkArea := oSize:GetNextCallArea( "CABECALHO" )

	oSize2:AddObject( "NUMERO"  ,  20, 100, .T., .T.) // Dimensionavel
	oSize2:AddObject( "SOLICIT" ,  20, 100, .T., .T.) // Dimensionavel
	oSize2:AddObject( "DATA"    ,  20, 100, .T., .T.) // Dimensionavel

	oSize2:lLateral := .T.            //Calculo em Lateral
	oSize2:lProp := .T.               // Proporcional
	oSize2:aMargins := { 3, 3, 0, 0 } // Espaco ao lado dos objetos 0, entre eles 3

	oSize2:Process() // Dispara os calculos

	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) OF oMainWnd PIXEL; //"Solicitação de Armazens"
	FROM oSize:aWindSize[1],oSize:aWindSize[2] TO oSize:aWindSize[3],oSize:aWindSize[4] OF oMainWnd PIXEL

	@ oSize2:GetDimension("NUMERO","LININI")+2,oSize2:GetDimension("NUMERO","COLINI")    SAY OemToAnsi(STR0011)  Of oDlg PIXEL 		//"&N£mero"
	@ oSize2:GetDimension("NUMERO","LININI")  ,oSize2:GetDimension("NUMERO","COLINI")+25 MSGET cA105Num  Picture PesqPict("SCP","CP_NUM") Valid A105Numero() .And. CheckSX3("CP_NUM") When VisualSX3("CP_NUM") OF oDlg PIXEL

	@ oSize2:GetDimension("SOLICIT","LININI")+2,oSize2:GetDimension("SOLICIT","COLINI")    SAY OemToAnsi(STR0012) 	 Of oDlg PIXEL	//"&Solicitante"
	@ oSize2:GetDimension("SOLICIT","LININI")  ,oSize2:GetDimension("SOLICIT","COLINI")+30 MSGET cSolic F3 cTabSol Picture "@S10" Valid CheckSX3("CP_SOLICIT") .And. MT105VldID(cSolic,lUsers) When VisualSX3("CP_SOLICIT") OF oDlg PIXEL

	@ oSize2:GetDimension("DATA","LININI")+2,oSize2:GetDimension("DATA","COLINI")    SAY OemToAnsi(STR0013) Of oDlg PIXEL	//"&Data de Emiss„o"
	@ oSize2:GetDimension("DATA","LININI")  ,oSize2:GetDimension("DATA","COLINI")+45 MSGET dA105Data Picture PesqPict("SCP","CP_EMISSAO") Valid NaoVazio() .And. CheckSX3("CP_EMISSAO") When VisualSX3("CP_EMISSAO") OF oDlg PIXEL

	If ExistBlock("MT105SCR")
		ExecBlock("MT105SCR",.F.,.F.,{@oDlg,nOpcx,oGet})
	EndIf

	oGet := MSGetDados():New(oSize:GetDimension("GETDADOS","LININI"),oSize:GetDimension("GETDADOS","COLINI"),;
								oSize:GetDimension("GETDADOS","LINEND"),oSize:GetDimension("GETDADOS","COLEND"),;
								nOpcx,"A105LinOK","A105TudOK","+CP_ITEM",.T.,NIL,NIL,NIL,LINHAS,"A105FldOk",,,"A105DelIt",oDlg)
	o105Get := oGet
	ACTIVATE MSDIALOG oDlg ON INIT ;
	EnchoiceBar(oDlg,{||AEval(aCamposVld,bBlkVld),nOpcA := 1,If(oGet:TudoOk() .And. ChkGetFix(aCamposVld,.F.,.T.),oDlg:End(),nOpcA := 0)},{||oDlg:End()},,aBut105)
Else
	aValidGet := {}
	Aadd(aValidGet,{"cA105Num"	,aAutoCab[nPosNum, 2],"CheckSX3('CP_NUM') .And. VldUser('D3_TM')"		,.T.})
	Aadd(aValidGet,{"cSolic"	,aAutoCab[nPosSol, 2],"CheckSX3('CP_SOLICIT') .And. VldUser('D3_CC')"	,.T.})
	Aadd(aValidGet,{"dA105Data",aAutoCab[nPosEmi, 2],"NaoVazio() .And. CheckSX3('CP_EMISSAO')"		,.T.})

	If SCP->(MsVldAcAuto(aValidGet,"A105LinOk(o)","A105TudOk(o)"))
		If A105RatAut(aRatSA)
			nOpcA := 1
		EndIf
	Else
		nOpcA := 0
	EndIf
EndIf

If ( nOpcA == 1 )
	Begin Transaction
	lGravaOk := Ma105Grava(1,cA105Filial,@cA105NUm,dA105Data,cSolic,@lHelpNumSeq,aHeadSGS,aColsSGS)
	If !( lGravaOk )
		disarmTransaction()
		nOpcA:= 0
	Else
		If lIntegDef
			aRetInt := FwIntegDef( "MATA105",,,, "MATA105" )
			If Valtype(aRetInt) == "A"
				If Len(aRetInt) == 2
					If !aRetInt[ 01 ]
						nOpcA:= 0
					Endif
				Endif
			EndIf
		EndIf
	EndIf
	End Transaction

	If lHelpNumSeq .And. !l105Auto
		Help(" ",1,"NUMSEQ",,cA105Num,4,15)
	EndIf
	If ( !lGravaOk .And. !l105Auto )
		Help(" ",1,"A110NAOREG")
	ElseIf lIntegDef .And. ( nOpcA == 0 ) .And. !aRetInt[ 01 ]
		Help(' ',1,"EAI-ADAPTER" ,, STR0062 + CRLF + aRetInt[ 02 ],2,1,,,,,, { STR0063  } ) /*"Processo Abortado pelo Sistema | "Contate o Administrador do Sistema"*/
	Else
		EvalTrigger()
		While ( GetSX8Len() > nSaveSX8 )
			ConfirmSX8()
		EndDo
	EndIf

Else
	PcoFreeBlq("000150",,,,,.T.)
EndIf
PcoFinLan("000150")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Restaura a entrada da rotina                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( nOpcA == 0 )
	While ( GetSX8Len() > nSaveSX8 )
		RollBackSX8()
	EndDo
Endif
Set Key VK_F4 To

Return (nOpca)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Altera³ Autor ³ Edson Maricate        ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de alteracao de uma solicitacao ao almox.         ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Void A105Altera(ExpCP,ExpN1,ExpN2)                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN2 = Numero do registro                                 ³±±
±±³          ³ ExpN3 = Opcao selecionada no menu                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Altera(cAlias,nReg,nOpcx)

Local aArea      := GetArea()
Local aAreaAFH   := {}
Local cTabSol    := "US3"
Local lGravaOk   := .T.
Local lContinua  := .F.
Local lIntegRM   := .F.
Local lBaixado   := .F.
Local lHelpNumSeq:= .F.
Local nOpcA      := 0
Local nUsado     := 0
Local nButton    := 0
Local nX 		 := 0
Local aBut105    := {}
Local oSize
Local oSize2
Local lUsers     := GetMV("MV_VSOLIC")
Local lOkBaixado := GetMV("MV_ALTSABX",,.T.)
Local aButtons   := Nil
Local oDlg, oGet
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Walk-Thru						                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aNoFields	:= { "CP_NUM" }
Local bSeekWhile:= {} // Condicao While para montar o aCols
Local cSeek		:= ""
Local nPosSol	:= aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_SOLICIT"})
Local nPosEmi	:= aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_EMISSAO"})
Local nPosNum	:= aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_NUM"})
Local aBtnBack	:= {}
Local aHeadSGS	:= {}
Local aColsSGS	:= {}
Local aColsBKPRat:= {}
Local lViaAFH	:= AFH->(FieldPos("AFH_VIAINT")) > 0
Local aRetInt 	:= {}
Local lIntegDef := FWHasEAI("MATA105",.T.,,.T.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica a Existencia da varivael l105Auto      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
l105Auto := If(Type("l105Auto") == "L",l105Auto,.F.)

Private o105Get
Private aTELA[0][0]
Private aGETS       := {}
Private cSolic      := SCP->CP_SOLICIT
Private cIdUser     := ""
Private dA105Data   := IIf(l105Auto,aAutoCab[nPosEmi,2],SCP->CP_EMISSAO)
Private cA105Num    := IIf(l105Auto,aAutoCab[nPosNum,2],SCP->CP_NUM)
Private cA105Filial := SCP->CP_FILIAL
Private aHeader     := {}
Private aCols       := {}
Private aRatAFH     := {}
Private aHdrAFH     := {}
Private bPMSDlgSA   :={||PmsDlgSA(4,ca105Num)}
Private aBackSGS    := {}

aColsSGS	:= {} // Inicialização de Variável Static
If ValType(aAlter) == "A"
	aAlter := {}
EndIf

If !l105Auto .And. IntePms() .And. IsIntegTop(,.T.)
	// Não alterar SA se Vier Integrada pelo RM_Solum

	aAreaAFH  := AFH->(GetArea())
	AFH->(DbSetOrder(2))
	AFH->(MsSeek(xFilial("AFH")+SCP->CP_NUM + SCP->CP_ITEM))

	If lViaAFH
		lViaAFH := IIf(AFH->AFH_VIAINT == 'S',.T.,.F.)
	Endif

	If lViaAFH
		Aviso(STR0018,STR0052,{"Ok"}) //"Atenção"--"Solicitacao ao Armazem gerada pelo RM Solum, não pode ser alterada pelo Protheus."
		lIntegRM := .T.
	Endif

	RestArea(aAreaAFH)
Endif

If IntePms()	// Se usa PMS integrado com o ERP
	aBut105 := { {'PROJETPMS',{||Eval(bPmsDlgSA)},STR0014,STR0026 } } //"Gerenciamento de Projetos"##"Ger. de Projetos"
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se a Solicitacao ao armazem foi gerada pelo SIGATEC ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty(SCP->CP_NUMOS) .And. ExistOS(SCP->CP_NUMOS) .And. !l105Auto
	Aviso("SIGATEC",OemToAnsi(STR0028),{"Ok"})
ElseIf mv_par01 == 2 .And. A105JaBaixada()
	Help("   ",1,"A185JAENCE")
ElseIf !lIntegRM
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Botao "Explode 1o nivel estrutura"							 |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aadd(aBut105, {OemToAnsi(STR0037),{||A105SeleEs()},OemToAnsi(STR0036),OemToAnsi(STR0035)}) //"Explode 1o nivel da estrutura"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Insere o Botao de Rateio por Centro de Custo ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAdd(aBut105,{'RATEIO105',{||A105RatCC(aHeadSGS,aColsSGS,.T.)},STR0039,STR0040}) //Rateio por Item da Solicitação###Rateio
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array contendo as registros do SCX ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	A105AcoSGS(@aHeadSGS,@aColsSGS)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa ponto de entrada para montar array com botoes a      ³
	//³ serem apresentados na tela de alteracao de empenho           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (ExistBlock( "M105BUT" ) )
		aButtons:=ExecBlock("M105BUT",.F.,.F.)
		If ValType(aButtons) == "A"
			For nButton:=1 to Len(aButtons)
				AADD(aBut105,aButtons[nButton])
			Next nButton
		EndIf
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
	//³ Este PE foi criado porque o PE acima (M105BUT) nao permite manipular ³
	//³ botoes da enchoicebar.                                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock( "A105BUT" )
		aBtnBack := aClone(aBut105)
		aBut105 := ExecBlock( "A105BUT", .F., .F., { nOpcx, aBut105 } )
		If ValType( aBut105 ) # "A"
			aBut105 := aClone(aBtnBack)
		EndIf
	EndIf

	If ( ! l105Auto )
		Set Key VK_F4 TO ShowF4()
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta aHeader e aCols utilizando a funcao FillGetDados   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSeek	   := cA105Filial + cA105Num
	bSeekWhile := { || SCP->CP_FILIAL + SCP->CP_NUM }

	If (l105Auto)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta o cabecalho                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aHeader	:= A105GetSx3( "SCP", "CP_NUM" )
		nUsado	:= Len( aHeader )

		MsAuto2aCols()
		If nOpcx == 4
			MsAuto2aCols(nOpcX,,"CP_ITEM")
		Endif
		lContinua := .T.
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Sintaxe da FillGetDados( nOpcx, cAlias, nOrder, cSeekKey, bSeekWhile, uSeekFor, aNoFields, aYesFields, lOnlyYes, cQuery, bMontCols, lEmpty, aHeaderAux, aColsAux, bAfterCols, bBeforeCols, bAfterHeader, cAliasQry ) |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		FillGetDados(nOpcX,cAlias,1,cSeek,bSeekWhile,{||.T.},aNoFields,,,,,,,, {|aColsX| a105AfterC(nOpcX,aColsX,@lContinua,@lBaixado)}/*bAfterCols*/,, {|aHeaderX| a105AfterH(aHeaderX,@cTabSol)}/*bAfterHeader*/  )
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Copia o acols para verificar se houve mudança. ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aColsBKPRat := aClone(aCols)

	//Inicializa array para indicar se a linha da getdados sofreu alteração. tratamento especifico no A105FLDOK para copia.
	For nX:= 1 to Len(aCols)
		aAdd(aAlter, .F.)
	Next
	// Nao permite alterar itens ja baixados ou encerrados
	If !lOkBaixado .And. lBaixado
		lContinua:=.F.
	EndIf

	cTabSol := CpoRetF3("CP_SOLICIT")
	If Empty(cTabSol)
		cTabSol := "US3"
	EndIf

	PcoIniLan("000150")

	If ( lContinua .And. !l105Auto )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula dimensões                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oSize := FwDefSize():New()
		oSize:AddObject( "CABECALHO",  100, 5, .T., .T. ) // Totalmente dimensionavel
		oSize:AddObject( "GETDADOS" ,  100, 85, .T., .T. ) // Totalmente dimensionavel

		oSize:lProp 	:= .T. // Proporcional
		oSize:aMargins 	:= { 3, 3, 3, 3 } // Espaco ao lado dos objetos 0, entre eles 3

		oSize:Process() // Dispara os calculos

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Divide cabeçalho                                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oSize2 := FwDefSize():New()

		oSize2:aWorkArea := oSize:GetNextCallArea( "CABECALHO" )

		oSize2:AddObject( "NUMERO"  ,  20, 100, .T., .T.) // Dimensionavel
		oSize2:AddObject( "SOLICIT" ,  20, 100, .T., .T.) // Dimensionavel
		oSize2:AddObject( "DATA"    ,  20, 100, .T., .T.) // Dimensionavel

		oSize2:lLateral := .T.            //Calculo em Lateral
		oSize2:lProp := .T.               // Proporcional
		oSize2:aMargins := { 3, 3, 0, 0 } // Espaco ao lado dos objetos 0, entre eles 3

		oSize2:Process() // Dispara os calculos

		DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) OF oMainWnd PIXEL; //"Solicitação de Armazens"
		FROM oSize:aWindSize[1],oSize:aWindSize[2] TO oSize:aWindSize[3],oSize:aWindSize[4] OF oMainWnd PIXEL

		@ oSize2:GetDimension("NUMERO","LININI")+2,oSize2:GetDimension("NUMERO","COLINI")    SAY OemToAnsi(STR0011)  Of oDlg PIXEL 		//"&N£mero"
		@ oSize2:GetDimension("NUMERO","LININI")  ,oSize2:GetDimension("NUMERO","COLINI")+25 MSGET cA105Num  Picture PesqPict("SCP","CP_NUM") When .f. OF oDlg PIXEL

		@ oSize2:GetDimension("SOLICIT","LININI")+2,oSize2:GetDimension("SOLICIT","COLINI")    SAY OemToAnsi(STR0012) 	 Of oDlg PIXEL	//"&Solicitante"
		@ oSize2:GetDimension("SOLICIT","LININI")  ,oSize2:GetDimension("SOLICIT","COLINI")+30 MSGET cSolic F3 cTabSol Picture "@S10" Valid CheckSX3("CP_SOLICIT") .And. MT105VldID(cSolic,lUsers) When VisualSX3("CP_SOLICIT") OF oDlg PIXEL

		@ oSize2:GetDimension("DATA","LININI")+2,oSize2:GetDimension("DATA","COLINI")    SAY OemToAnsi(STR0013) Of oDlg PIXEL	//"&Data de Emiss„o"
		@ oSize2:GetDimension("DATA","LININI")  ,oSize2:GetDimension("DATA","COLINI")+45 MSGET dA105Data Picture PesqPict("SCP","CP_EMISSAO") Valid NaoVazio() .And. CheckSX3("CP_EMISSAO") When VisualSX3("CP_EMISSAO") OF oDlg PIXEL

		If ExistBlock("MT105SCR")
			ExecBlock("MT105SCR",.F.,.F.,{@oDlg,nOpcx,oGet})
		EndIf
		oGet := MSGetDados():New(oSize:GetDimension("GETDADOS","LININI"),oSize:GetDimension("GETDADOS","COLINI"),;
								oSize:GetDimension("GETDADOS","LINEND"),oSize:GetDimension("GETDADOS","COLEND"),;
								nOpcx,"A105LinOK","A105TudOK","+CP_ITEM",.T.,NIL,NIL,NIL,LINHAS,"A105FldOk",,,"A105DelIt",oDlg)
		o105Get := oGet
		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpca:=1,if(oGet:TudoOk() .And. A105AColsRa(aColsBKPRat,nOpcx,aColsSGS),oDlg:End(),nOpca := 0)},{||oDlg:End()},,aBut105)
	ElseIf lContinua .And. l105Auto
		aValidGet := {}
		Aadd(aValidGet,{"cA105Num"	,aAutoCab[nPosNum, 2],"CheckSX3('CP_NUM') .And. VldUser('D3_TM')"		,.T.})
		Aadd(aValidGet,{"cSolic"	,aAutoCab[nPosSol, 2],"CheckSX3('CP_SOLICIT') .And. VldUser('D3_CC')"	,.T.})
		Aadd(aValidGet,{"dA105Data",aAutoCab[nPosEmi, 2],"NaoVazio() .And. CheckSX3('CP_EMISSAO')"		,.T.})

		If SCP->(MsVldAcAuto(aValidGet,"A105LinOk(o)","A105TudOk(o)"))   // Consiste os Campos do aCols
			nOpcA := 1
		Else
			nOpcA := 0
		EndIf

	EndIf

	If ( nOpcA == 1 )
		Begin Transaction
			lGravaOk := Ma105Grava(2,cA105Filial,cA105NUm,dA105Data,cSolic,@lHelpNumSeq,aHeadSGS,aColsSGS)
			If !( lGravaOk )
				disarmTransaction()
				nOpcA:= 0
			Else
				If lIntegDef
					aRetInt := FwIntegDef( "MATA105",,,, "MATA105" )
					If Valtype(aRetInt) == "A"
						If Len(aRetInt) == 2
							If !aRetInt[ 01 ]
								nOpcA:= 0
							Endif
						Endif
					EndIf
				EndIf
			EndIf
		End Transaction

		If lHelpNumSeq .And. !l105Auto
			Help(" ",1,"NUMSEQ",,cA105Num,4,15)
		EndIf

		If ( !lGravaOk .And. !l105Auto )
			Help(" ",1,"A110NAOREG")
		ElseIf lIntegDef .And. ( nOpcA == 0 ) .And. !aRetInt[ 01 ]
			Help(' ',1,"EAI-ADAPTER" ,, STR0062 + CRLF + aRetInt[ 02 ],2,1,,,,,, { STR0063  } ) /*"Processo Abortado pelo Sistema | "Contate o Administrador do Sistema"*/
		Else
			EvalTrigger()
		EndIf
	Else
		PcoFreeBlq("000150",,,,,.T.)
	EndIf
	PcoFinLan("000150")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Restaura a entrada da rotina                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	MsUnLockAll()

EndIf

Set Key VK_F4 To
RestArea(aArea)

Return(nOpca)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Deleta³ Autor ³ Edson Mariate         ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de exclusao de solicitacoes de compra             ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ Void A105Deleta(ExpCP,ExpN1,ExpN2)                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN2 = Numero do registro                                 ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Deleta(cAlias,nReg,nOpcx)

Local oDlg, oGet
Local lContinua 	:= .T.
Local lRet			:= .T.
Local lHelpNumSeq   := .F.
Local nOpcA 		:= 0
Local nUsado		:= 0
Local nCntFor		:= 0
Local nButton       := 0
Local aArea			:= GetArea()
Local aBut105		:= {}
Local oSize
Local oSize2
Local lA105DelOk    := ExistBlock("A105DelOk")
Local aButtons      := Nil
Local nPosNum := aScan(aAutoCab, {|xAux| AllTrim(xAux[1]) == "CP_NUM"})
Local aBtnBack := {}
Local aArea2 := {}
Local aArea3 := {}
Local aRetInt := {}
Local lIntegDef := FWHasEAI("MATA105",.T.,,.T.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica a Existencia da varivael l105Auto      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
l105Auto := If(Type("l105Auto") == "L",l105Auto,.F.)

Private o105Get
Private	cSolic 		:= SCP->CP_SOLICIT
Private	da105Data	:= SCP->CP_EMISSAO
Private	ca105Num	:= IIf(l105Auto,aAutoCab[nPosNum, 2],SCP->CP_NUM)
Private	ca105Filial := SCP->CP_FILIAL
Private aTELA[0][0]
Private aGETS		:= {}
Private aHeader		:= {}
Private aCols		:= {}
Private aRatAFH		:= {}
Private aHdrAFH		:= {}
Private bPMSDlgSA	:= {||PmsDlgSA(5,ca105Num)}

If IntePms()	// Se usa PMS integrado com o ERP
	aBut105 := { {'PROJETPMS',{||Eval(bPmsDlgSA)},STR0014,STR0026 } } //"Gerenciamento de Projetos"##"Ger. de Projetos"
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se o usuario tem permissao de exclusao. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aArea2 := GetArea()
SCP->(dbSeek(xFilial("SCP")+cA105Num))
While !SCP->(Eof()) .And. lContinua .And. SCP->CP_NUM == cA105Num
	lContinua := MaAvalPerm(1,{SCP->CP_PRODUTO,"MTA105",5})
	SCP->(dbSkip())
End
RestArea(aArea2)
If !lContinua
	Help(,,1,'SEMPERM')
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Executa ponto de entrada para montar array com botoes a      ³
//³ serem apresentados na tela de alteracao de empenho           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If (ExistBlock( "M105BUT" ) )
	aButtons:=ExecBlock("M105BUT",.F.,.F.)
	If ValType(aButtons) == "A"
		For nButton:=1 to Len(aButtons)
			AADD(aBut105,aButtons[nButton])
		Next nButton
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
//³ Este PE foi criado porque o PE acima (M105BUT) nao permite manipular ³
//³ botoes da enchoicebar.                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock( "A105BUT" )
	aBtnBack := aClone(aBut105)
	aBut105 := ExecBlock( "A105BUT", .F., .F., { nOpcx, aBut105 } )
	If ValType( aBut105 ) # "A"
		aBut105 := aClone(aBtnBack)
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o cabecalho                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aHeader	:= A105GetSx3( "SCP", "CP_NUM" )
ADHeadRec("SCP",aHeader)
nUsado := Len(aHeader)

//Se Mv_Par02 == 1 ( Exclusao por Item ), Consideramos Sempre o Registro Encontrado/Posicionado para Exclus?o
If mv_par02 == 1
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona ponteiro do arquivo cabeca e inicializa variaveis  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea(cAlias)

	If ( MaCanDelSA(.T.) )
		aadd(aCols,Array(nUsado+1))
		For nCntFor := 1 To nUsado
			If IsHeadRec(aHeader[nCntFor][2])
				aCols[Len(aCols)][nCntFor] := SCP->(RecNo())
			ElseIf IsHeadAlias(aHeader[nCntFor][2])
				aCols[Len(aCols)][nCntFor] := "SCP"
			ElseIf ( aHeader[nCntFor][10] != "V" )
				aCols[Len(aCols)][nCntFor] := SCP->(FieldGet(FieldPos(aHeader[nCntfor][2])))
			Else
				aCols[Len(aCols)][nCntFor] := CriaVar(aHeader[nCntfor][2])
			EndIf
		Next nCntFor
		aCOLS[Len(aCols)][nUsado+1] := .F.
	Else
		If !Empty(SCP->CP_NUMOS) .And. ExistOS(SCP->CP_NUMOS)
			Aviso("SIGATEC",OemToAnsi(STR0027),{"Ok"})
		Else
			HELP("  ",1,"A105DELE")
		EndIf
		lContinua := .F.
	EndIf
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona ponteiro do arquivo no 1. registro valido          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea( cAlias )
	dbSetOrder(1)
	dbSeek( cA105Filial+cA105Num )
	aArea3 := GetArea()
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aCols                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	While ( !Eof() .And. SCP->CP_FILIAL+SCP->CP_NUM == cA105Filial+cA105Num )
		If ( MaCanDelSA(.T.) )
			aAdd(aCols,Array(nUsado+1))
			For nCntFor := 1 To nUsado
				If IsHeadRec(aHeader[nCntFor][2])
					aCols[Len(aCols)][nCntFor] := SCP->(RecNo())
				ElseIf IsHeadAlias(aHeader[nCntFor][2])
					aCols[Len(aCols)][nCntFor] := "SCP"
				ElseIf ( aHeader[nCntfor][10] != "V" )
					aCols[Len(aCols)][nCntFor] := SCP->(FieldGet(FieldPos(aHeader[nCntfor][2])))
				Else
					aCols[Len(aCols)][nCntFor] := CriaVar(aHeader[nCntfor][2])
				EndIf
			Next nCntFor
			aCols[Len(aCols)][nUsado+1] := .F.
			lContinua := .T.
		Else
			If !Empty(SCP->CP_NUMOS) .And. ExistOS(SCP->CP_NUMOS)
				If !l105Auto
					Aviso("SIGATEC",OemToAnsi(STR0027),{"Ok"})
				EndIf
			Else
				Help("  ",1,"A105DELE")
			EndIf
			lContinua := .F.
			Exit
		EndIf
		SCP->(dbSkip())
	EndDo
	RestArea(aArea3)
Endif

//------------------------------------------------------------------
// Não permite exclusão caso algum item tenha vínculo com sigamnt
//------------------------------------------------------------------
If lContinua .And. SuperGetMV("MV_NGMNTES",.F.,"") == "S" .And. FindFunction( 'MNTINTSASC' )
	lContinua := MNTINTSASC( cA105Num, 'MATA105', 5 )
EndIf

If lContinua
	PcoIniLan("000150")
	If !l105Auto
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula dimensões                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oSize := FwDefSize():New()
		oSize:AddObject( "CABECALHO",  100, 5, .T., .T. ) // Totalmente dimensionavel
		oSize:AddObject( "GETDADOS" ,  100, 85, .T., .T. ) // Totalmente dimensionavel

		oSize:lProp 	:= .T. // Proporcional
		oSize:aMargins 	:= { 3, 3, 3, 3 } // Espaco ao lado dos objetos 0, entre eles 3

		oSize:Process() // Dispara os calculos

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Divide cabeçalho                                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oSize2 := FwDefSize():New()

		oSize2:aWorkArea := oSize:GetNextCallArea( "CABECALHO" )

		oSize2:AddObject( "NUMERO"  ,  20, 100, .T., .T.) // Dimensionavel
		oSize2:AddObject( "SOLICIT" ,  20, 100, .T., .T.) // Dimensionavel
		oSize2:AddObject( "DATA"    ,  20, 100, .T., .T.) // Dimensionavel

		oSize2:lLateral := .T.            //Calculo em Lateral
		oSize2:lProp := .T.               // Proporcional
		oSize2:aMargins := { 3, 3, 0, 0 } // Espaco ao lado dos objetos 0, entre eles 3

		oSize2:Process() // Dispara os calculos

		DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) OF oMainWnd PIXEL; //"Solicitação de Armazens"
		FROM oSize:aWindSize[1],oSize:aWindSize[2] TO oSize:aWindSize[3],oSize:aWindSize[4] OF oMainWnd PIXEL

		@ oSize2:GetDimension("NUMERO","LININI")+2,oSize2:GetDimension("NUMERO","COLINI")    SAY OemToAnsi(STR0011)  Of oDlg PIXEL 		//"&N£mero"
		@ oSize2:GetDimension("NUMERO","LININI")  ,oSize2:GetDimension("NUMERO","COLINI")+25 MSGET cA105Num 	When .f. Of oDlg PIXEL

		@ oSize2:GetDimension("SOLICIT","LININI")+2,oSize2:GetDimension("SOLICIT","COLINI")    SAY OemToAnsi(STR0012) 	 Of oDlg PIXEL	//"&Solicitante"
		@ oSize2:GetDimension("SOLICIT","LININI")  ,oSize2:GetDimension("SOLICIT","COLINI")+30 MSGET cSolic  Pict "@S10" 	When .f.  Of oDlg PIXEL

		@ oSize2:GetDimension("DATA","LININI")+2,oSize2:GetDimension("DATA","COLINI") SAY OemToAnsi(STR0013)	 Of oDlg PIXEL	//"&Data de Emiss„o"
		@ oSize2:GetDimension("DATA","LININI")  ,oSize2:GetDimension("DATA","COLINI")+45 MSGET dA105Data When .f. Of oDlg PIXEL

		If ExistBlock("MT105SCR")
			ExecBlock("MT105SCR",.F.,.F.,{@oDlg,nOpcx,oGet})
		EndIf

		oGet := MSGetDados():New(oSize:GetDimension("GETDADOS","LININI"),oSize:GetDimension("GETDADOS","COLINI"),;
									oSize:GetDimension("GETDADOS","LINEND"),oSize:GetDimension("GETDADOS","COLEND"),;
									nOpcx,"A105LinOK","A105TudOK","",.f.,NIL,NIL,NIL,LINHAS,"A105FldOk",,,"A105DelIt",oDlg)
		o105Get := oGet
		ACTIVATE MSDIALOG oDlg ON INIT ;
		EnchoiceBar(oDlg,{||nOpca:=1,if(oGet:TudoOk(),oDlg:End(),nOpca := 0)},{||oDlg:End()},,aBut105)
	Else
		nOpcA := 1
	EndIf
	If ( nOpcA == 1 )
		If lA105DelOk
			lRet := ExecBlock("A105DelOk",.F.,.F.)
			lRet := If(ValType(lRet)#"L", .T., lRet)
		EndIf

		If lRet
			Begin Transaction
				If lIntegDef
					If Mv_Par02 == 1
						aRecSCP:= {}
						Aadd( aRecSCP, SCP->( Recno() ) )
					EndIf
					aRetInt := FwIntegDef( "MATA105",,,, "MATA105" )
					If Valtype(aRetInt) == "A"
						If Len(aRetInt) == 2
							If !aRetInt[ 01 ]
								nOpcA:= 0
								Help(' ',1,"EAI-ADAPTER" ,, STR0062 + CRLF + aRetInt[ 02 ],2,1,,,,,, { STR0063  } ) /*"Processo Abortado pelo Sistema | "Contate o Administrador do Sistema"*/
							Endif
						Endif
					EndIf
				Endif
				If nOpcA == 1
					lGravaOk := Ma105Grava(3,cA105Filial,cA105NUm,dA105Data,cSolic,@lHelpNumSeq)
					If !( lGravaOk )
						disarmTransaction()
						nOpcA:= 0
					Else
						EvalTrigger()
					EndIf
				EndIf

			End Transaction
		EndIf
	Else
		PcoFreeBlq("000150",,,,,.T.)
	EndIf
	PcoFinLan("000150")
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Restaura a entrada da rotina                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
MsUnLockAll()
RestArea(aArea)
Return(nOpcA)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Imprim³ Autor ³ Larson Zordan         ³ Data ³19.08.2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de impressao da Solicitacao ao Armazem            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ Void A105Imprim(ExpCP,ExpN1,ExpN2)                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN2 = Numero do registro                                 ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Imprim(cAlias,nReg,nOpcx)
Local aAreaAnt := GetArea()
Local cPrinter := GetMV("MV_RELSALM" ,, "" )
Local xRet     := .T.

If !Empty( cPrinter ) .And. Existblock( cPrinter )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz a chamada do relatorio de usuario                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ExecBlock( cPrinter, .F., .F., { SCP->CP_EMISSAO,SCP->CP_NUM } )
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz a chamada do relatorio padrao                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	xRet := MATR105(.F.,{SCP->CP_EMISSAO,SCP->CP_NUM})
EndIf
Pergunte("MTA105", .F.)
RestArea(aAreaAnt)
Return( xRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³                                                                       ³±±
±±³                                                                       ³±±
±±³                   ROTINAS DE CRITICA DE CAMPOS                        ³±±
±±³                                                                       ³±±
±±³                                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Numero³ Autor ³Edson Mariate          ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica o numero da solicitacao ao almoxarifado.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. se valido                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Numero()

Local lRetorna	:= .T.
Local aArea		:= GetArea()

If ( Empty(cA105Num) )
	Help(" ",1,"VAZIO")
	lRetorna := .F.
Else
	dbSelectArea("SCP")
	dbSetOrder(1)
	If ( dbSeek(cA105Filial+cA105Num ) )
		Help(" ",1,"A10501")
		lRetorna := .F.
	EndIf
EndIf
RestArea(aArea)
Return( lRetorna )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Produt³ Autor ³Edson Mariate          ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica e inicializa os campos a partir do codigo do produto³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. se valido                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Produto()
Local nX		:= 0
Local cVar		:= &(ReadVar())
Local lRetorno  := .T.
Local aAreaSCP  := SCP->(GetArea())
Local aCTBEnt   := CTBEntArr()
Local cOrdProd	:= 0 //vai armazenar a ordem do campo CP_PRODUTO
Local cOrdCc	:= 0 //vai armazenar a ordem do campo CP_CC
Local nPosItem  := aScan(aHeader, {|x| AllTrim(x[2]) == "CP_ITEM"})
Local nPosProd  := aScan(aHeader, {|x| AllTrim(x[2]) == "CP_PRODUTO"})

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se o usuario tem permissao de inclusao. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Inclui
	lRetorno := MaAvalPerm(1,{M->CP_PRODUTO,"MTA105",3})
	If !lRetorno
		Help(,,1,'SEMPERM')
	EndIf
EndIf

dbSelectArea("SCP")
dbSetOrder(2)
If dbSeek(cA105Filial+aCols[n,nPosProd]+cA105Num+aCols[n,nPosItem]) .And. SCP->CP_PREREQU $ "S"
	MsgAlert(STR0020)  //"Este produto NAO podera ser alterado, pois ja gerou uma Pre-Requisicao !!!"
	lRetorno := .F.
EndIf

dbSelectArea("SB1")
dbSetOrder(1)
If lRetorno .And. ( !dbSeek( xFilial()+cVar ) )
	Help(" ",1,"CP_PRODUTO")
	lRetorno := .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o Registro esta Bloqueado.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .And. !RegistroOk("SB1")
	lRetorno := .F.
Endif

If ( lRetorno )
	For nX := 1 To Len(aHeader)
		Do Case
			Case Trim(aHeader[nX][2]) == "CP_UM"			// Unidade Medida
				aCols[n][nX] := SB1->B1_UM
			Case Trim(aHeader[nX][2]) == "CP_LOCAL"		// Almoxarifado
				aCols[n][nX] := RetFldProd(SB1->B1_COD,"B1_LOCPAD")
			Case Trim(aHeader[nX][2]) == "CP_CC"			// Centro Custo
				cOrdProd := Eval( bGetSx3, "CP_PRODUTO", "X3_ORDEM" )
				cOrdCc 	 := Eval( bGetSx3, "CP_CC"	   , "X3_ORDEM" )
				If cOrdCc > cOrdProd
					aCols[n][nX] := SB1->B1_CC
				Endif
			Case Trim(aHeader[nX][2]) == "CP_CONTA"		// Conta Contabil
				aCols[n][nX] := SB1->B1_CONTA
			Case Trim(aHeader[nX][2]) == "CP_DESCRI"		// Descricao
				aCols[n][nX] := PADR(SB1->B1_DESC,LEN(SCP->CP_DESCRI))
			Case Trim(aHeader[nX][2]) == "CP_SEGUM"		// Segunda Unidade Medida
				aCols[n][nX] := SB1->B1_SEGUM
				A100SegUm()
			Case Trim(aHeader[nX][2]) == "CP_ITEMCTA"		//Item da Conta Contabil
				aCols[n][nX] := SB1->B1_ITEMCC
			Case Trim(aHeader[nX][2]) == "CP_CLVL"   		//Classe do Valor Contabil
				aCols[n][nX] := SB1->B1_CLVL
		EndCase
	Next nX
	For nX := 1 To Len(aCTBEnt)
		If GDFieldPos("CP_EC"+aCTBEnt[nX]+"CR") > 0
			aCols[n,GDFieldPos("CP_EC"+aCTBEnt[nX]+"CR")] := SB1->&("B1_EC"+aCTBEnt[nX]+"CR")
			aCols[n,GDFieldPos("CP_EC"+aCTBEnt[nX]+"DB")] := SB1->&("B1_EC"+aCTBEnt[nX]+"DB")
		EndIf
	Next nX
EndIf

RestArea( aAreaSCP )
Return( lRetorno )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105LinOk ³ Autor ³Edson Mariate          ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Validacao da Linha Ok.                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto da GetDados                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. se valido                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105LinOk(o)

Local lRet		:= .T.
Local lDeleted	:= .F.
Local nPProduto := aScan(aHeader,{|x| AllTrim(x[2])=="CP_PRODUTO"})
Local nPLocal	:= aScan(aHeader,{|x| AllTrim(x[2])=="CP_LOCAL"})
Local nPQuant   := aScan(aHeader,{|x| AllTrim(x[2])=="CP_QUANT"})
Local nPItem	:= aScan(aHeader,{|x| AllTrim(x[2])=="CP_ITEM"})
Local nPop      := aScan(aHeader,{|x| Trim(x[2])=="CP_OP"})
Local nCC      := aScan(aHeader,{|x| Trim(x[2])=="CP_CC"})
Local nPConta	:= GDFieldPos("CP_CONTA")
Local nPItemCta	:= GDFieldPos("CP_ITEMCTA")
Local nPCLVL	:= GDFieldPos("CP_CLVL")

If ValType(aCols[n,Len(aCols[n])]) == "L"  /// Verifico se posso Deletar
	lDeleted := aCols[n,Len(aCols[n])]      /// Se esta Deletado
EndIf
If ( !lDeleted )
	//Valida linha apenas se houve alteração.
	If If(Altera .and. len(aAlter) > 0 .and. !(len(aAlter) < n), aAlter[n], .T.)
		If lRet .And. ( ( Empty(aCols[n][nPProduto]) .Or. Empty(aCols[n][nPQuant]) .Or.;
		Empty(aCols[n][nPLocal]) ) )
			Help(" ",1,"A11002")
			lRet := .F.
		EndIf

		//Valida se o produto encontra-se bloqueado pelo campo reservado _MSBLQL
		If !ExistCpo("SB1", aCols[n][nPProduto], 1)
			lRet := .F.
		EndIf

		//Valida se o armazém encontra-se bloqueado pelo campo reservado _MSBLQL
		If !ExistCpo("NNR", aCols[n][nPLocal], 1)
			lRet := .F.
		EndIf

		//Validacao de permissao do armazem
		If lRet
			lRet := MaAvalPerm(3,{aCols[n][nPLocal],aCols[n][nPProduto]})
		EndIf

		If lRet .And. GetMvNNR('MV_CQ','98') == aCols[n][nPLocal]
			Help(" ",1,"A240LOCCQ")
			lRet := .F.
		EndIf
		If lRet .And. GetMvNNR('MV_LOCPROC','99') == aCols[n][nPLocal]
			Help(" ",1,"A240LOCPRC")
			lRet :=  .F.
		EndIf
		If ( lRet .And. aCols[n][nPItem] == "**" )
			Help(" ",1,"A10505")
			lRet := .F.
		Endif

		If ( lRet .And. !CTB105CC(aCols[n][nCC])) // verifica se Centro de Custo eh valido
			lRet := .F.
		Endif

		If ( lRet )
			dbSelectArea("SB2")
			dbSetOrder(1)
			If (!dbSeek(xFilial("SB2")+aCols[n][nPProduto]+aCols[n][nPLocal]) )
				If l105Auto
					CriaSB2(aCols[n][nPProduto],aCols[n][nPLocal])
				Else
					If (!A100Alert(aCols[n][nPProduto],aCols[n][nPLocal]) )
						lRet := .F.
					Else
						CriaSB2(aCols[n][nPProduto],aCols[n][nPLocal])
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf

	If l105LIN .And. lRet
		lRet := ExecBlock("MTA105LIN",.F.,.F.)
		If !ValType(lRet) == "L"
			lRet := .T.
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se a OP informada no item ja esta encerrada.                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If If(Altera .and. len(aAlter) > 0 .and. !(len(aAlter) < n), aAlter[n], .T.)
		If lRet .And. nPop > 0 .AND. !Empty(aCols[n][nPop])
			dbSelectArea("SC2")
			dbSetOrder(1)
			If ( MsSeek(xFilial("SC2")+aCols[n][nPop]) .And. !Empty(C2_DATRF))
				Help(" ",1,"A250ENCERR")
				lRet := .F.
			EndIf
			dbSelectArea("SCP")
		EndIf
		If lRet
			lRet	:=	PcoVldLan('000150','01','MATA105')
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa se o tipo do armazem permite a movimentacao |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lRet .And. AvalBlqLoc(aCols[n][nPProduto],aCols[n][nPLocal],Nil)
			lRet := .F.
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		// Valida qtde com a Integracao PMS
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lRet .And. IntePms() .And. ALTERA
			//Se integração com o SIGAPMS estiver ativa
			//passo a chave para verificar se a tabela AFH foi atualizada
			lRet := PMSVldSA(cA105Num,aCols,aHeader,n)
		EndIf
	EndIf

	If lRet .And. ;
	nPConta <> 0 .And. nCC>0 .And. nPItemCta <> 0 .And. nPClVl <> 0 .And.;
	(!CtbAmarra(aCols[n,nPConta],aCols[n,nCC],aCols[n,nPItemCTA],aCols[n,nPCLVL]))
		lRet:=.F.
	EndIf
EndIf

If lRet
	lRet := a241vldfan(aCols[n][nPProduto])
EndIf

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105TudOk ³ Autor ³Edson Mariate          ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Validacao da TudoOk                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto da GetDados                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. se valido                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105TudOk(oGetd)

Static l105OKSA := NIL
Local lRet := .T.
Local nPop := aScan(aHeader,{|x| Trim(x[2])=="CP_OP"})
Local nX   := 0

If ValType(dA105Data) != 'D'
	MsgAlert(STR0059)
	lRet := .F.
EndIf

If nPop > 0
	If lRet .And. INCLUI
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se a OP informada no item ja esta encerrada.                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nX := 1 To Len(aCols)
			If !aCols[nX][Len(aCols[nX])]
				If !Empty(aCols[nX][nPop])
					dbSelectArea("SC2")
					dbSetOrder(1)
					If ( MsSeek(xFilial("SC2")+aCols[n][nPop]) .And. !Empty(C2_DATRF))
						Help(" ",1,"A250ENCERR")
						lRet := .F.
						Exit
					EndIf
					dbSelectArea("SCP")
				EndIf
			EndIf
		Next nX
	EndIf
EndIf

l105OKSA := IIf(l105OKSA == NIL, ExistBlock("MTA105OK"), l105OKSA)

If l105OKSA
	lRet := ExecBlock("MTA105OK",.F.,.F.)
	If !ValType(lRet) == "L"
		lRet := .T.
	EndIf
EndIf

//-------------------------------------------------------------------------------------------------
// Quando possuir vínculo com sigamnt não permite alteração de campos que comprometem a integridade
//-------------------------------------------------------------------------------------------------
If lRet .And. ALTERA .And. SuperGetMV("MV_NGMNTES",.F.,"") == "S" .And. FindFunction( 'MNTINTSASC' )
	lRet := MNTINTSASC( SCP->CP_NUM, 'MATA105', 4, aHeader, aCols )
EndIf

Return( lRet )
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ma105Grava³ Autor ³Edson Mariate          ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Efetua a Atualizacao das Solicitacoes ao Almoxarifado       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: [1] Inclusado                                        ³±±
±±³          ³       [2] Alteracao                                        ³±±
±±³          ³       [3] Exclusao                                         ³±±
±±³          ³ExpC1: Filial da SA                                         ³±±
±±³          ³ExpC2: Numero da SA                                         ³±±
±±³          ³ExpD1: Data de emissao                                      ³±±
±±³          ³ExpC3: Solicitante                                          ³±±
±±³          ³ExpL1: Consistir o ultimo n§ sequencial a ser gravado       ³±±
±±³          ³ExpA1: Array aHeader de rateio da solicitacao de compra     ³±±
±±³          ³ExpA2: Array aCols de rateio da solicitacao de compra       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. se atualizado efetuada                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Ma105Grava(nOpcao,cA105Filial,cA105Num,dA105Data,cSolic,lHelpNumSeq,aHeadSGS,aColsSGS)

Static l105Grv  := Nil

Local cSaAnt 	:= cA105Num
Local nUsado	:= Len(aHeader)+1
Local nPItem	:= aScan(aHeader,{|x| AllTrim(x[2])=="CP_ITEM"})
Local nPProduto := aScan(aHeader,{|x| AllTrim(x[2])=="CP_PRODUTO"})
Local nV		:= 0
Local nW		:= 0
Local nx		:= 0
Local ny		:= 0
Local nZ		:= 0
Local cMay  	:= ""
Local cStatusSA := ""
Local lGrava    := .T.
Local nSalBlq   := 0
Local aInfoSAI  := {}
Local lGeraSCR  := SuperGetMv("MV_APROVSA",.F.,.F.) .AND. SuperGetMv("MV_APRSAEC",.F.,.F.)
Local lAprovSA  := !lGeraSCR .And. GetNewPar( "MV_APROVSA", .F. ) // Verifica se deve utilizar o controle de bloqueio de SAs.
Local l105Fim   := ExistBlock("MT105FIM")
Local aArea     := GetArea()
Local aAreaAFH  := AFH->(GetArea())
Local aAreaSCP  := SCP->(GetArea())
Local aAreaSGS	:= {}
Local lViaAFH   := .T.
Local lOkBaixa  := GetMV("MV_ALTSABX",,.T.)
Local lMati105  := .F.
Local cEventID
Local cMensagem

DEFAULT aHeadSGS := {}
DEFAULT aColsSGS := {}

cCodUsr := If(cCodUsr == NIL, RetCodUsr(), cCodUsr)
aGrpUsr := If(aGrpUsr == NIL, UsrRetGrp(), aGrpUsr)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica a Existencia da varivael l105Auto      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
l105Auto := If(Type("l105Auto") == "L",l105Auto,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada MT105GRV                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
l105GRV := IIf(l105GRV == NIL, ExistBlock("MT105GRV"), l105GRV)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montagem dos dados da execauto de rateio ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("aRatSA") == "A" .And. Len(aRatSA) > 0
	aHeadSGS := A105GetSx3( "SGS", "GS_CUSTO" )
	aColsSGS  := M105AutRat(aClone(aRatSA),aHeadSGS)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Caso Alteração Automatica deleta os rateios ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Type( "nAutoAdt" ) == "N" .And. nAutoAdt==4 .And. Len(aRatSA) > 0
		aAreaSGS := GetArea()
		SGS->(DbSetOrder(1))
		If SGS->(MsSeek(xFilial("SGS")+SCP->CP_NUM))
			While !SGS->(EOF()) .and. (xFilial("SGS")+SCP->CP_NUM==SGS->GS_FILIAL+SGS->GS_SOLICIT)
				RecLock("SGS",.F.)
				SGS->(dbDelete())
				MsUnlock()
				SGS->(DbSkip())
			EndDo
		EndIf
		RestArea(aAreaSGS)
	EndIf
EndIf

If ( nOpcao != 3 )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Consistir o ultimo n§ sequencial a ser gravado.      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( nOpcao == 1 )
		dbSelectArea("SCP")
		cMay := "SCP"+AllTrim(cA105Filial)
		While MsSeek(cA105Filial+cA105Num) .Or. !MayIUseCode(cMay+cA105Num)
			cA105Num := Soma1(cA105Num,Len(cA105Num))
		EndDo
		If ( cA105Num # cSAAnt ).And. !l105Auto
			lHelpNumSeq := .T.
		EndIf
	Endif

	For nx := 1 To Len(aCols)
		lGrava := .T.
		nSalBlq   := 0
		cStatusSA := ""
		If ( !aCols[nx][nUsado] .And. !Empty(aCols[nx][nPProduto]) )
			dbSelectArea("SCP")
			dbSetOrder(1)
			If ( dbSeek(cA105Filial+cA105Num+aCols[nx][nPItem]) )
				If Empty(CP_PREREQU)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza os arquivos do SIGAPMS - Exclui                                ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If IntePms().And. Ascan(aRatAFH,{|x| x[1]==aCols[nx][nPItem]}) > 0
						PMSWriteSA(3,"SCP")
					EndIf
					RecLock("SCP",.F.)
					// Alcada do MATA107
					If lAprovSA .And. !lGeraSCR .And. AliasInDic("SCW")
						MaVldSolic(SCP->CP_PRODUTO, aGrpUsr, cCodUsr,.F., 0, dA105Data,@aInfoSAI)
						If !Empty(aInfoSAI)
							AtuSalSCW(aInfoSAI[1],aInfoSAI[2],aInfoSAI[3],aInfoSAI[4],SCP->CP_QUANT-SCP->CP_SALBLQ,aInfoSAI[5], .T.,dA105Data)
						EndIf
					EndIf
				ElseIf ALTERA .And. (MV_PAR01 == 1 .Or. lOkBaixa)
					RecLock("SCP",.F.)
					lGrava := .T.
				Else
					lGrava := .F.
				EndIf
			Else
				RecLock("SCP",.T.)
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza dados padroes da solicitacao ao almox.          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lGrava
				Replace CP_FILIAL  With cA105Filial
				Replace CP_NUM     With cA105Num
				Replace CP_EMISSAO With dA105Data
				Replace	CP_SOLICIT With cSolic
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualiza dados do corpo da SA.                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				For ny := 1 To Len(aHeader)
					If ( aHeader[ny][10] != "V" )
						FieldPut(FieldPos(aHeader[ny][2]),aCols[nx][ny])
					EndIf
				Next ny
				If lAprovSA .And. !lGeraSCR
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Trata Saldos Pre Requisicao               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aInfoSaI:={}
					If MaVldSolic(SCP->CP_PRODUTO, aGrpUsr, cCodUsr,.F.,SCP->CP_QUANT,dA105Data,@aInfoSAI)
						If !Empty(aInfoSAI)
							If  SCP->CP_QUANT > aInfoSAI[5]
								cStatusSA := "B"
								nSalBlq   := SCP->CP_QUANT - aInfoSAI[5]
								AtuSalSCW(aInfoSAI[1], aInfoSAI[2], aInfoSAI[3], aInfoSAI[4], 0, aInfoSAI[5],,dA105Data)
							Else
								AtuSalSCW(aInfoSAI[1], aInfoSAI[2], aInfoSAI[3], aInfoSAI[4],SCP->CP_QUANT,aInfoSAI[5],,dA105Data)
							EndIf
						EndIf
					Else
						cStatusSA := "B"
						If !Empty(aInfoSAI)
							nSalBlq   := SCP->CP_QUANT - aInfoSAI[5]
						Else
							nSalBlq   := SCP->CP_QUANT
						EndIf
					EndIf
					Replace	CP_STATSA  With cStatusSA
					Replace	CP_SALBLQ  With nSalBlq
				EndIf

				If Empty(cIdUser)
					Replace CP_CODSOLI With cCodUsr
				Else
					Replace CP_CODSOLI With cIdUser
					cIdUser := ""
				Endif

				MsUnLock()
				If lCopia
					aAreaSCP := GetArea()
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atualizacao do rateio dos itens da solicitacao ao armazem               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				SGS->(DbSetOrder(1))
				If (nW := aScan(aColsSGS,{|x| x[1] == SCP->CP_ITEM})) > 0
					For nZ := 1 To Len(aColsSGS[nW][2])
						nItemSGS := aScan(aHeadSGS, {|x| AllTrim (x[2])=="GS_ITEM"})
						cItemSGS := aColsSGS[nW][2][nZ][nItemSGS]
						lAchou := SGS->(MsSeek(xFilial("SGS")+SCP->CP_NUM+SCP->CP_ITEM+cItemSGS))
						If !aColsSGS[nW,2,nZ,Len(aHeadSGS)+1]
							RecLock("SGS",!lAchou)
							For nV := 1 To Len(aHeadSGS)
								If aHeadSGS[nV][10] <> "V"
									SGS->(FieldPut(FieldPos(aHeadSGS[nV][2]),aColsSGS[nW][2][nZ][nV]))
								EndIf
							Next nV
							SGS->GS_FILIAL	:= xFilial("SGS")
							SGS->GS_SOLICIT	:= SCP->CP_NUM
							SGS->GS_ITEMSOL	:= SCP->CP_ITEM
							MsUnlock()
						ElseIf lAchou
							RecLock("SGS",.F.)
							SGS->(dbDelete())
							MsUnlock()
						EndIf
					Next nZ
					If ALTERA
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Exclui do BD os rateios que foram marcados para delecao  ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						SGS->(MsSeek(xFilial("SGS")+SCP->CP_NUM+SCP->CP_ITEM))
						While !SGS->(EOF()) .and. (xFilial("SGS")+SCP->CP_NUM+SCP->CP_ITEM==SGS->GS_FILIAL+SGS->GS_SOLICIT+SGS->GS_ITEMSOL)
							If !aScan(aColsSGS[nW][2],{|x| x[nItemSGS] == SGS->GS_ITEM}) > 0
								RecLock("SGS",.F.)
								SGS->(dbDelete())
								MsUnlock()
							EndIf
							SGS->(DbSkip())
						Enddo
					EndIf
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Cria o Almoxarifado se nao existir                        ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				CriaSb2(SCP->CP_PRODUTO,SCP->CP_LOCAL)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atualiza os arquivos do SIGAPMS                                         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If IntePms() .And. Ascan(aRatAFH,{|x| x[1]==aCols[nx][nPItem]}) > 0		// Se usa PMS integrado com o ERP
					PMSWriteSA(1,"SCP")
				Endif
			EndIf
			PcoDetLan("000150","01","MATA105")
		Else
			dbSelectArea("SCP")
			dbSetOrder(1)
			If nOpcao <> 1 .And. ( dbSeek(cA105Filial+cA105Num+aCols[nx][nPItem]) ) .And. Empty(SCP->CP_PREREQU)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atualiza os arquivos do SIGAPMS - Estorno/Exclusao                      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				PMSWriteSA(2,"SCP")
				PMSWriteSA(3,"SCP")
				//Integração SIGAMDT
				MdtIntSCP( 2 , SCP->CP_NUM , SCP->CP_ITEM , , SCP->CP_PRODUTO )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Exclui a amarracao com os conhecimentos                      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				MsDocument( "SCP", SCP->( RecNo() ), 2, , 3 )

				RecLock("SCP",.F.,.T.)
				dbDelete()
				MsUnLock()
			EndIf
			PcoDetLan("000150","01","MATA105",.T.)
		EndIf
		If l105GRV .And. !aCols[nx][nUsado]
			ExecBlock("MT105GRV",.f.,.f.,nOpcao)
		EndIf
	Next nx

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Envia e-mail na inclusao da Solicitacao ao Almoxarifado ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nOpcao == 1
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ EventViewer						  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cEventID:= "042"
		cMensagem:=OemToAnsi(STR0065) + cA105Num + OemToAnsi(STR0066) + CRLF //A Solicitacao ao Armazem numero #  acaba de ser incluída.
		cMensagem+='           '+ OemToAnsi(STR0067) + SCP->CP_PRODUTO + OemToAnsi(STR0068) + cValtoChar(SCP->CP_QUANT) //Produto # Quantidade 
		EventInsert(FW_EV_CHANEL_ENVIRONMENT, FW_EV_CATEGORY_MODULES, cEventID,FW_EV_LEVEL_INFO,""/*cCargo*/,OemToAnsi(STR0010),cMensagem,.T./*lPublic*/)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Messenger						  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		MEnviaMail("042",{cA105Num})
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ cNumSAWS - Variavel utilizada na integracao com o RM Solum para   ³
		//³            recuperar o numero da SA gerada pela rotina Automatica.³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Type('cNumSAWS') <> "U"
			cNumSAWS := cA105NUm
		EndIf
	EndIf

Else
	dbSelectArea("SCP")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Atualiza os arquivos do SIGAPMS - Estorno/Exclusao                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If mv_par02 == 1 .And. !l105Auto
		// Não excluir a SA se Vier Integrada pelo RM_Solum - Wilson em 14/06/2011
		aArea     := GetArea()
		aAreaAFH  := AFH->(GetArea())
		aAreaSCP  := SCP->(GetArea())
		AFH->(DbSetOrder(2))
		AFH->(DbSeek(xFilial("AFH")+SCP->(CP_NUM+CP_ITEM)))
		If lViaAFH
			lViaAFH := IIf(AFH->AFH_VIAINT == 'S',.T.,.F.)
		Endif
		If lViaAFH
			MsgAlert(STR0038) // "Solicitacao ao Armazem gerada pelo RM Solum, somente pode ser Excluida pelo RM Solum."
			RestArea(aAreaSCP)
			RestArea(aAreaAFH)
			RestArea(aArea)
			MsUnLockAll()
			Return .F.
		Else
			PMSWriteSA(2,"SCP")
			PMSWriteSA(3,"SCP")
			PcoDetLan("000150","01","MATA105",.T.)
			//Integração SIGAMDT
			MdtIntSCP( 2 , SCP->CP_NUM , SCP->CP_ITEM , , SCP->CP_PRODUTO )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Exclui a amarracao com os conhecimentos                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			MsDocument( "SCP", SCP->( RecNo() ), 2, , 3 )

			If lAprovSA .And. !lGeraSCR
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Elimina dos valores do aCols                         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				MaVldSolic(SCP->CP_PRODUTO, aGrpUsr, cCodUsr,.F.,0, dA105Data,@aInfoSAI)
				If !Empty(aInfoSAI) .And. SCP->CP_STATSA <> "B"
					AtuSalSCW(aInfoSAI[1],aInfoSAI[2],aInfoSAI[3],aInfoSAI[4],SCP->(CP_QUANT-CP_SALBLQ),,.T.,dA105Data)
				EndIf
			EndIf

			RecLock("SCP",.F.)
			dbDelete()
			MsUnLock()

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Efetua a Exclusão do Rateio³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nOpcao == 3
				SGS->(dbSetOrder(1))
				SGS->(dbSeek(xFilial("SGS")+SCP->CP_NUM+SCP->CP_ITEM))
				While SGS->(!EOF()) .And. AllTrim(SGS->(GS_FILIAL+GS_SOLICIT+GS_ITEMSOL)) == AllTrim(xFilial("SGS")+SCP->CP_NUM+SCP->CP_ITEM)
					RecLock("SGS",.F.)
					SGS->(dbDelete())
					MsUnlock()
					SGS->(dbSkip())
				EndDo
			Else
				aAreaSGS := GetArea()
				If (nY := aScan(aColsSGS,{|x| x[1] == SCP->CP_ITEM})) > 0
					For nZ := 1 To Len(aColsSGS[nY][2])
						SGS->(DbSetOrder(1))
						If SGS->(MsSeek(xFilial("SGS")+SCP->CP_NUM+SCP->CP_ITEM+GdFieldGet("GS_ITEM",nz,NIL,aHeadSGS,ACLONE(aColsSGS[NY,2]))))
							RecLock("SGS",.F.)
							SGS->(dbDelete())
							MsUnlock()
						EndIf
					Next nZ
				EndIf
				RestArea(aAreaSGS)
			EndIf

			If l105GRV
				ExecBlock("MT105GRV",.F.,.F.,nOpcao)
			EndIf
		Endif
	Else
		lMati105 := IsInCallStack("MATI105")
		For nx := 1 To Len(aCols)
			If ( !aCols[nx][nUsado] .And. !Empty(aCols[nx][nPProduto]) )
				dbSelectArea("SCP")
				dbSetOrder(1)
				If ( dbSeek(cA105Filial+cA105Num+aCols[nx][nPItem]) ) .And. Empty(SCP->CP_PREREQU)
					// Nao excluir a SA se Vier Integrada pelo RM_Solum
					If !lMati105
						aArea    := GetArea()
						aAreaAFH := AFH->(GetArea())
						aAreaSCP := SCP->(GetArea())
						AFH->(DbSetOrder(2))
						AFH->(DbSeek(xFilial("AFH")+SCP->(CP_NUM+CP_ITEM)))
						lViaAFH := IIf(AFH->AFH_VIAINT == 'S',.T.,.F.)
						If lViaAFH
							If !l105Auto
								MsgAlert(STR0038) // "Solicitacao ao Armazem gerada pelo RM Solum, somente pode ser Excluida pelo RM Solum."
							Else
								Help(" ", 1, STR0038)
							EndIf
							RestArea(aAreaSCP)
							RestArea(aAreaAFH)
							RestArea(aArea)
							MsUnLockAll()
							Return .F.
						EndIf
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza os arquivos do SIGAPMS - Estorno/Exclusao                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					PMSWriteSA(2,"SCP")
					PMSWriteSA(3,"SCP")
					PcoDetLan("000150","01","MATA105",.T.)
					//Integração SIGAMDT
					MdtIntSCP( 2 , SCP->CP_NUM , SCP->CP_ITEM , , SCP->CP_PRODUTO )

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Exclui a amarracao com os conhecimentos                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					MsDocument( "SCP", SCP->( RecNo() ), 2, , 3 )

					If lAprovSA .And. !lGeraSCR
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Elimina dos valores do aCols                         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaVldSolic(SCP->CP_PRODUTO, aGrpUsr, cCodUsr,.F.,0, dA105Data,@aInfoSAI)
						If !Empty(aInfoSAI) .And. SCP->CP_STATSA <> "B"
							AtuSalSCW(aInfoSAI[1],aInfoSAI[2],aInfoSAI[3],aInfoSAI[4],SCP->(CP_QUANT-CP_SALBLQ),,.T.,dA105Data)
						EndIf
					EndIf

					RecLock("SCP",.F.)
					dbDelete()
					MsUnLock()

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Efetua a Exclusão do Rateio³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If nOpcao == 3
						SGS->(dbSetOrder(1))
						SGS->(dbSeek(xFilial("SGS")+SCP->CP_NUM+aCols[nX,nPItem]))
						While SGS->(!EOF()) .And. AllTrim(SGS->(GS_FILIAL+GS_SOLICIT+GS_ITEMSOL)) == AllTrim(xFilial("SGS")+SCP->CP_NUM+aCols[nX,nPItem])
							RecLock("SGS",.F.)
							SGS->(dbDelete())
							MsUnlock()
							SGS->(dbSkip())
						EndDo
					Else
						aAreaSGS := GetArea()
						If (nY := aScan(aColsSGS,{|x| x[1] == SCP->CP_ITEM})) > 0
							For nZ := 1 To Len(aColsSGS[nY][2])
								SGS->(DbSetOrder(1))
								If SGS->(MsSeek(xFilial("SGS")+SCP->CP_NUM+SCP->CP_ITEM+GdFieldGet("GS_ITEM",nz,NIL,aHeadSGS,ACLONE(aColsSGS[NY,2]))))
									RecLock("SGS",.F.)
									SGS->(dbDelete())
									MsUnlock()
								EndIf
							Next nZ
						EndIf
						RestArea(aAreaSGS)
					EndIf

					If l105GRV
						ExecBlock("MT105GRV",.F.,.F.,nOpcao)
					EndIf
				EndIf
			EndIf
		Next nx
	Endif
EndIf

//-- Cria alcada de aprovacao da SA
If lGeraSCR
	MaEntCtb("SCP","SGS",cA105Num,"SA",aHeader,aCols,aHeadSGS,aColsSGS,nOpcao,dA105Data)
EndIf

If l105Fim
	ExecBlock("MT105FIM",.F.,.F.,nOpcao)
EndIf

If lCopia
	RestArea(aAreaSCP)
EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105VALID ³ Autor ³ Edson Mariate         ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica quantidade entregue do produto apos ter gerado o  ³±±
±±³          ³ pedido (integral ou parcialmente)						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ ExpN1 := A105VALID(ExpN2)                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA105                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105VALID(nVar)

Return ( .T. )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105CCusto³ Autor ³Edson Mariate          ³ Data ³16.11.1998³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica o Centro de Custo.                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Centro de Custo                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. se Ok                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105CCusto(cCCusto)
Local lRet:=.T., cEntCc := "CTT"

If !Empty(cCCusto)
	dbSelectArea(cEntCc)
	dbSetOrder(1)
	If !(dbSeek(xFilial(cEntCc)+cCCusto))
		Help( " ",1,"A105CCUSTO")
		lRet := .F.
	Endif
Endif
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³MT105VldID³ Autor ³ Fernando Joly Siquini ³ Data ³08.05.2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica se o Usuario esta cadastrado no CFG      		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Solicitante                                          ³±±
±±³          ³ExpL1: Variavel Logica para validar o solicitante           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function MT105VldID(cSolic,lUsers)

Local aAreaAnt := GetArea()
Local lRet     := .T.
Local cVar     := If(!(Type('__ReadVar')=='U'),__ReadVar,'')
Local aRetUser := {}

Default cSolic := &(cVar)

If lUsers .And. (lRet:=NaoVazio(cSolic))
	PSWOrder(2)
	If !(lRet:=PSWSeek(cSolic, .T.))
		Help(' ', 1, 'USR_EXIST')
	Else
		aRetUser := PswRet(1)
		cIdUser := aRetUser[1,1]
	EndIf

	If !Empty(aRetUser)
		If(aRetUser[1][17])
			Help('',1,'USERBLQ',,STR0060,1,0)
			lRet:= .F.
		EndIf
	EndIf
EndIf

RestArea(aAreaAnt)

Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105Legenda³ Autor ³ Marcos V. Ferreira   ³ Data ³ 13.10.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cria uma janela contendo a legenda da mBrowse              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA105                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105Legenda()
Local aItLeg    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Vari vel utilizada no PE MTA105LEG ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aMT105LEG := {}

aAdd(aItLeg, {"DISABLE" ,STR0022}) //"Pré-requisição gerada"
aAdd(aItLeg, {"ENABLE"  ,STR0023}) //"Pendente"
aAdd(aItLeg, {"BR_PRETO",STR0025}) //"Em aprovação"
aAdd(aItLeg, {"BR_CANCEL",STR0055}) //"Rejeitada"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ P.E. Utilizado para alterar o texto da legenda ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT105LEG")
	aMT105LEG := ExecBlock("MT105LEG",.F.,.F., {aItLeg} )
	If ( Valtype(aMT105LEG) == "A" )
		aItLeg := aClone( aMT105LEG )
	EndIf
EndIf

BrwLegenda(cCadastro,STR0021, aItLeg)
Return .T.

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A105JaBaixada ³ Autor ³Marcelo Iuspa      ³ Data ³ 13/10/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Verifica se uma SA ja esta baixada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A105JaBaixada()                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Mata105                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Function A105JaBaixada
Local lEmAberto  := .F.
Local cSeek      := Nil
Local aSavArea   := {GetArea(), SCP->(GetArea())}

dbSelectArea("SCP")
dbSetOrder(1)
dbSeek(cSeek := xFilial("SCP") + SCP->CP_NUM)

Do While ! Eof() .And. ! lEmAberto .And. SCP->(CP_FILIAL + CP_NUM) == cSeek
	lEmAberto := Empty(SCP->CP_STATUS) .And. (QtdComp(SCP->CP_QUJE) <= QtdComp(SCP->CP_QUANT))
	dbSkip()
EndDo

RestArea(aSavArea[2])
RestArea(aSavArea[1])

Return(! lEmAberto)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ SHOWF4   ³ Autor ³ Nereu Humberto Junior ³ Data ³ 02/03/05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Chamada da funcao MaViewSB2                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA105                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function ShowF4()

Local cCampo:=AllTrim(Upper(ReadVar()))

If cCampo == "M->CP_PRODUTO"
	MaViewSB2(M->CP_PRODUTO)
Endif

Return NIL

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ A105Copia  ³ Autor ³ Marcos V. Ferreira    ³ Data ³ 22.03.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Ativa o sem foro informando que na inclus„o, ser  usada      ³±±
±±³          ³ a SA corrente como modelo para a nova SA.                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ SIGAEST                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
*/
Function A105Copia()
Local aArea   	:= {Alias(),IndexOrd(),Recno()}
Local nPosSCP 	:= aArea[3]
Local aRots 	:= AClone(aRotina)
Local xRet

aRotina := {{STR0024,"A105Copia" , 0, 3, 0}} //"Copia"

If xFilial("SCP") # SCP->CP_FILIAL .or. (SCP->(EOF()) .and. SCP->(BOF()))
	HELP(" ",1,"ARQVAZIO")
Else
	lCopia := .T.

	xRet := A105Inclui("SCP",nPosSCP,1)

	dbSelectArea(aArea[1])
	dbSetOrder(aArea[2])
	lCopia := .F.
	aRotina := AClone(aRots)

Endif

Return xRet

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105SeleEs³ Autor ³Marcos V. Ferreira      ³ Data ³21/02/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Seleciona estrutura como base para preenchimento automatico  ³±±
±±³          ³de produtos a serem solicitados pelo armazem.                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function A105SeleEs()
Local aEstrutura:= {}
Local aAreaSD4	:= SD4->(GetArea())
Local aAreaSDC	:= SDC->(GetArea())
Local aAreaSG1	:= SG1->(GetArea())
Local lSugSemSld:= .F.
Local lOk		:= .F.
Local nPercOP 	:= 0
Local nPosCod   := 0
Local i			:= 0
Local nX		:= 0
Local cLocProc  := GetMvNNR('MV_LOCPROC','99')
Local aSaveCols := aClone(aCols)
Local oDlg

Private cProdEst	:= Criavar("CP_PRODUTO",.F.)
Private cOpEst		:= Criavar("CP_OP",.F.)
Private nQtdOrigEs	:= 1
Private nEstru		:= 0

DEFINE MSDIALOG oDlg FROM  140,000 TO 300,400 TITLE OemToAnsi(STR0033) PIXEL //"Informe produto com estrutura"
@ 10,15 TO 63,185 LABEL Alltrim(RetTitle("CP_OP"))+" - "+Alltrim(RetTitle("CP_PRODUTO"))+" - "+Alltrim(RetTitle("CP_QUANT")) OF oDlg PIXEL
@ 20,20 MSGET cOpEst F3 "SC2" Picture PesqPict("SCP","CP_OP") When(oSugerSld:lVisible := .T.,SysRefresh(),.T.) Valid ((Vazio() .Or. ExistCpo("SC2",cOpEst) .And. A105IniOP())) SIZE 70,9 OF oDlg PIXEL
@ 35,20 MSGET cProdEst F3 "SB1" Picture PesqPict("SCP","CP_PRODUTO") When( lSugSemSld := If(Empty(cOpEst),.F.,lSugSemSld),oSugerSld:lVisible:=!Empty(cOpEst),SysRefresh(),.T.) Valid (NaoVazio() .Or. ExistCpo("SB1",cProdEst)) SIZE 70,9 OF oDlg PIXEL
@ 35,95 MSGET nQtdOrigEs Picture PesqPict("SCP","CP_QUANT") Valid (Positivo() .And. NaoVazio()) SIZE 60,9 OF oDlg PIXEL
@ 50,20 CHECKBOX oSugerSld Var lSugSemSld PROMPT OemtoAnsi(STR0034)	SIZE 150,10 OF oDlg PIXEL //"Sugere itens sem saldo"
DEFINE SBUTTON FROM 67,131 TYPE 1 ACTION (oDlg:End(),lOk:=.T.)  ENABLE OF oDlg
DEFINE SBUTTON FROM 67,158 TYPE 2 ACTION (oDlg:End(),lOk:=.F.)  ENABLE OF oDlg
ACTIVATE MSDIALOG oDlg CENTERED ON INIT(oSugerSld:lVisible := .T.)

If lOk .And. !Empty(cProdEst) .And. nQtdOrigEs > 0
	// Le os empenhos caso a op esteja preenchida
	If !Empty(cOPEst)
		dbSelectArea("SC2")
		dbSetOrder(1)
		dbSeek(xFilial()+cOpEst)
		// Calcula qual o percentual da baixa de insumos
		nPercOp:=nQtdOrigEs/SC2->C2_QUANT
		dbSelectArea("SDC")
		dbSetOrder(2)
		dbSelectArea("SD4")
		dbSetOrder(2)
		dbSeek(xFilial()+cOpEst)
		While !EOF() .And. D4_FILIAL+D4_OP==xFilial()+cOpEst
			If !lSugSemSld .AND. QtdComp(D4_QUANT)==QtdComp(0)
				dbSkip()
				Loop
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//| Produtos de apropriacao indireta, quando ja possuem saldo no armazem de processo |
			//| a baixa e automatica pela producao, quando ainda nao possuem saldo no armazem de |
			//| de processo devera ser feita requisicao manual do armazem padrao.                |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If A260ApropI(D4_COD)
				dbSkip()
				Loop
			EndIf
			If SDC->(dbSeek(xFilial("SDC")+SD4->D4_COD+SD4->D4_LOCAL+SD4->D4_OP+SD4->D4_TRT+SD4->D4_LOTECTL+SD4->D4_NUMLOTE))
				While !SDC->(Eof()) .And. xFilial("SDC")+SD4->D4_COD+SD4->D4_LOCAL+SD4->D4_OP+SD4->D4_TRT+SD4->D4_LOTECTL+SD4->D4_NUMLOTE == SDC->(DC_FILIAL+DC_PRODUTO+DC_LOCAL+DC_OP+DC_TRT+DC_LOTECTL+DC_NUMLOTE)
					AADD(aEstrutura,{NIL,NIL,SD4->D4_COD,Min(SDC->DC_QUANT,(SDC->DC_QTDORIG*nPercOp)),SDC->DC_TRT,SDC->DC_LOTECTL,SDC->DC_NUMLOTE,SDC->DC_LOCALIZ,SDC->DC_NUMSERI,SD4->D4_LOCAL})
					SDC->(dbSkip())
				EndDo
			Else
				AADD(aEstrutura,{NIL,NIL,SD4->D4_COD,Min(SD4->D4_QUANT,(SD4->D4_QTDEORI*nPercOp)),SD4->D4_TRT,SD4->D4_LOTECTL,SD4->D4_NUMLOTE,"","",SD4->D4_LOCAL})
			EndIf
			dbSelectArea("SD4")
			dbSkip()
		EndDo
		RestArea(aAreaSD4)
		RestArea(aAreaSDC)
		// Se nao preencheu OP le somente a estrutura
	Else
		// Le estrutura do produto origem da desmontagem
		If FindFunction("aCusbExpld")
			aCusbExpld(cProdEst,nQtdOrigEs,@aEstrutura)
		Else
			Help(,,"OUTDATEDSOURCE",,STR0061, 1, 0) // "O Fonte SIGACUSB.PRX encontra-se desatualizado."
			aEstrutura := {}
		EndIf
	EndIf

	If Len(aEstrutura) > 0
		//Recupera a posicao do campo CP_PRODUTO dentro do aHeader
		For nX = 1 To Len(aHeader)
			Do Case
				Case Trim(aHeader[nX][2]) == "CP_PRODUTO"
					nPosCod:=nX
					Exit
			EndCase
		Next nX
		// Se existir linhas em branco remove a mesma do acols
		For i:=1 to Len(aCols)
			If Empty(aCols[i,nPosCod])
				ADEL(aCols,i)
				ASIZE(aCols,Len(aCols)-1)
			EndIf
		Next i
	EndIf

	// Le somente os itens de primeiro nivel
	For i:=1 to Len(aEstrutura)
		SB1->(dbSetOrder(1))
		SB1->(dbSeek(xFilial("SB1")+aEstrutura[i,3]))

		// Verifica Armazem de Processo
		If SB1->B1_LOCPAD <> cLocProc

			// Adiciona item no acols
			AADD(aCols,Array(Len(aHeader)+1))
			// Preenche conteudo do acols
			For nx:=1 to Len(aHeader)
				If IsHeadRec(aHeader[nX][2])
					aCols[Len(aCols)][nX] := 0
				ElseIf IsHeadAlias(aHeader[nX][2])
					aCols[Len(aCols)][nX] := "SCP"
				Else
					cCampo:=Alltrim(aHeader[nx,2])
					aCols[Len(aCols)][nx] := CriaVar(cCampo,.F.)
					If cCampo == "CP_ITEM"
						If Len(aCols) <= LINHAS
							aCols[Len(aCols)][nX] := If(Len(aCols) > 1, Soma1(aCols[Len(aCols)-1][nX],LEN(SCP->CP_ITEM)), STRZERO(Len(aCols),LEN(SCP->CP_ITEM))) 
						Else
							aCols[Len(aCols)][nX] := "**"
						Endif
					ElseIF cCampo == "CP_DATPRF"
						aCols[Len(aCols)][nX] := dDataBase
					EndIf
				EndIf
			Next nx
			aCOLS[Len(aCols)][Len(aHeader)+1] := .F.
			// Preenche campos especificos
			GDFieldPut("CP_PRODUTO"	,aEstrutura[i,3]	,Len(aCols))
			GDFieldPut("CP_UM"		,SB1->B1_UM			,Len(aCols))
			GDFieldPut("CP_SEGUM"	,SB1->B1_SEGUM		,Len(aCols))
			GDFieldPut("CP_QUANT"	,aEstrutura[i,4]	,Len(aCols))
			GDFieldPut("CP_QTSEGUM"	,ConvUm(SB1->B1_COD,aEstrutura[i,4],0,2),Len(aCols))
			GDFieldPut("CP_LOCAL"	,RetFldProd(SB1->B1_COD,"B1_LOCPAD"),Len(aCols))
			GDFieldPut("CP_CONTA"	,SB1->B1_CONTA		,Len(aCols))
			GDFieldPut("CP_ITEMCTA"	,SB1->B1_ITEMCC		,Len(aCols))
			GDFieldPut("CP_DESCRI"	,SB1->B1_DESC		,Len(aCols))

			// Preenche o numero da OP
			If !Empty(cOpEst)
				If aEstrutura[i,10]# NIL .AND. !Empty(aEstrutura[i,10])
					GDFieldPut("CP_LOCAL",aEstrutura[i,10],	Len(aCols))
				EndIf
				GDFieldPut("CP_OP"		,cOpEst				,Len(aCols))
				GDFieldPut("CP_TRT"		,aEstrutura[i,5]	,Len(aCols))
				GDFieldPut("CP_LOTECTL"	,aEstrutura[i,6]	,Len(aCols))
				GDFieldPut("CP_NUMLOTE"	,aEstrutura[i,7]	,Len(aCols))
				GDFieldPut("CP_LOCALIZ"	,aEstrutura[i,8]	,Len(aCols))
				GDFieldPut("CP_NUMSERI"	,aEstrutura[i,9]	,Len(aCols))
			EndIf

		EndIf
	Next i
	If ExistBlock("MT105EXP")
		ExecBlock("MT105EXP",.F.,.F.)
	EndIf
	If Len(aCols)=0
		// Restaura aCols
		aCols := aClone(aSaveCols)
	EndIf
	RestArea(aAreaSG1)
EndIf
Return

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105IniOP ³ Autor ³Marcos V. Ferreira      ³ Data ³21.02.2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Inicializa informacoes da Ordem de Producao apos digitar OP  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function A105IniOP()
// Inicializa produto e quantidade
If !Empty(cOPEst) .And. SC2->(MsSeek(xFilial("SC2")+cOpEst))
	nQtdOrigEs:=SC2->C2_QUANT-SC2->C2_QUJE
	cProdEst:=SC2->C2_PRODUTO
EndIf
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105VldBxa³ Autor ³Alexandre Inacio Lemes ³Data  ³28/04/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Valida a Alteracao dos campos quando a SA ja foi baixada.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .F. se o item da SA ja foi baixado.                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105VldBxa()

Local aAreaSCP  := SCP->(GetArea())
Local lRetorno  := .T.
Local nPosItem := aScan(aHeader, {|x| AllTrim(x[2]) == "CP_ITEM"})
Local nPosProd := aScan(aHeader, {|x| AllTrim(x[2]) == "CP_PRODUTO"})
Local cReadVar  := ReadVar()
Local lVldDtNec := SuperGetMv("MV_VLDTNEC",.F.,.T.)
Local lIntegRM  := IsIntegTop("",.T.)

If ALTERA // somente validar se for uma alteracao da SA
	dbSelectArea("SCP")
	dbSetOrder(2)
	If dbSeek(cA105Filial+aCols[n,nPosProd]+cA105Num+aCols[n,nPosItem]) .And. SCP->CP_PREREQU $ "S"
		Help(" ",1,"A105VLBX")
		lRetorno := .F.
	EndIf
EndIf

If lRetorno
	If INCLUI .Or. ALTERA
		If "CP_DATPRF" == SubStr(cReadVar,4,Len(cReadVar))
			If !lIntegRM .Or. (lIntegRM .And. lVldDtNec)
				If &(ReadVar()) < dA105Data
					Aviso(STR0018,STR0054,{"Ok"}) //"Data de necessidade não pode ser inferior a data de emissão."
					lRetorno := .F.
				Endif
			Endif
		Endif
	Endif
Endif

RestArea(aAreaSCP)

Return( lRetorno )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³a105AfterH³ Autor ³ Ricardo Berti         ³ Data ³ 03/01/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao executada APOS gerar aHeader, antes da FillGetDados ³±±
±±³          ³ criar os campos do Walk-Thru.							  ³±±
±±³          ³              						    			 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ a105AfterH(ExpA1,ExpC1)		                    		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = Array aHeader passado por ref.	                  ³±±
±±³          ³ ExpC1 = Campo p/ obter o X3_F3		                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA105                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function a105AfterH( aHeaderX, cTabSol )
Default cTabSol	:= ""
Default aHeaderX:= {}

If Ascan( aHeaderX, { | x | Alltrim( x[ 2 ] ) == "CP_SOLICIT" } ) > 0
	cTabSol := Eval( bGetSx3, "CP_SOLICIT", "X3_F3" )
EndIf

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³a105AfterC³ Autor ³ Ricardo Berti         ³ Data ³ 22/12/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Tratamento de excecoes na montagem automatica do aCols pela³±±
±±³          ³ FillGetDados, executada APOS gerar cada elemento do aCols. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ExpL1 := a105AfterC(ExpN1,ExpA1,ExpL1,ExpL2)				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpN1 = Numero da opcao selecionada                        ³±±
±±³          ³ ExpA1 = aCols (passado por ref.)					          ³±±
±±³          ³ ExpL1 = Indica que houve reg. valido 					  ³±±
±±³          ³ ExpL2 = Indica que houve reg. baixado 					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1 = .F. aborta a FillGetDados (montagem do aCols)  	  ³±±
±±³          ³         .T. continua a montagem do aCols pela FillGetDados ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA105                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function a105AfterC(nOpc,aColsX,lContinua,lBaixado)

If !lContinua
	lContinua := .T.
EndIf
If !lBaixado .And. (SCP->CP_PREREQU == "S" .Or. SCP->CP_STATUS == "E")
	lBaixado := .T.
EndIf
Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³MenuDef   ³ Autor ³ Fabio Alves Silva     ³ Data ³01/11/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Utilizacao de menu Funcional                               ³±±
±±³          ³                                                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Array com opcoes da rotina.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Parametros do array a Rotina:                               ³±±
±±³          ³1. Nome a aparecer no cabecalho                             ³±±
±±³          ³2. Nome da Rotina associada                                 ³±±
±±³          ³3. Reservado                                                ³±±
±±³          ³4. Tipo de Transa‡„o a ser efetuada:                        ³±±
±±³          ³	  1 - Pesquisa e Posiciona em um Banco de Dados    		  ³±±
±±³          ³    2 - Simplesmente Mostra os Campos                       ³±±
±±³          ³    3 - Inclui registros no Bancos de Dados                 ³±±
±±³          ³    4 - Altera o registro corrente                          ³±±
±±³          ³    5 - Remove o registro corrente do Banco de Dados        ³±±
±±³          ³5. Nivel de acesso                                          ³±±
±±³          ³6. Habilita Menu Funcional                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function MenuDef()
Local aRotAdic	:= {}
Private aRotina	:= {{STR0005,"PesqBrw"		, 0 , 1, 0, .F.},;		//"Pesquisar"
					{STR0006,"A105Visual"	, 0 , 2, 0, nil},;		//"Visualizar"
					{STR0007,"A105Inclui"	, 0 , 3, 0, nil},;		//"Incluir"
					{STR0008,"A105Altera"	, 0 , 4, 0, nil},;		//"Alterar"
					{STR0009,"A105Deleta"	, 0 , 5, 0, nil},;		//"Excluir"
					{STR0019,"A105Imprim"	, 0 , 2, 0, nil},;		//"Imprimir"
					{STR0021,"A105Legenda"	, 0 , 2, 0, .F.},; 		//"Legenda"
					{STR0024,"A105Copia" 	, 0 , 9, 0, nil},;		//"Copia"
					{STR0029,"MsDocument"	, 0 , 4, 0, nil }}		//"Conhecimento"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada utilizado para inserir novas opcoes no array aRotina  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MTA105MNU")
	ExecBlock("MTA105MNU",.F.,.F.)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ P.E. Utilizado para adicionar botoes ao Menu Principal       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT105MNU")
	aRotAdic := ExecBlock("MT105MNU",.F.,.F.)
	If ValType(aRotAdic) == "A"
		AEval(aRotAdic,{|x| AAdd(aRotina,x)})
	EndIf
EndIf

Return(aRotina)

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A105FldOk ³ Autor ³ Allyson B. D. Freitas ³ Data ³09/01/2012³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Valida permissao de usuarios                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MsGetDados do MATA105                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A105FldOk()
Local cField := ReadVar()
Local cFieldEdit:= SubStr(cField,4,Len(cField))
Local nPProduto := aScan(aHeader,{|x| AllTrim(x[2])== "CP_PRODUTO"})
Local lEdita    := .T.
Local nX		:= 0

If Altera
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se o usuario tem permissao de alteracao. ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cFieldEdit $ "CP_PRODUTO"
		If !(lEdita := MaAvalPerm(1,{cCampo,"MTA105",5}) .And. MaAvalPerm(1,{aCols[n][nPProduto],"MTA105",3}))
			Help(,,1,'SEMPERM')
		EndIf
	Else
		If !(lEdita := MaAvalPerm(1,{aCols[n][nPProduto],"MTA105",4}))
			Help(,,1,'SEMPERM')
		EndIf
	EndIf
	//Inicializa array para indicar se a linha da getdados sofreu alteração (replicado para copia).
	If lCopia
		For nX:= 1 to Len(aCols)
			aAdd(aAlter, .F.)
		Next
	EndIf
	//Marca linha como alterada no array de controle, apenas para linhas ja existentes. Caso linha tenha sido adicionada, adiciona no array de controle.
	If Len(aAlter) >= n
		aAlter[n] := .T.
	Else
		aAdd(aAlter,.T.)
	EndIf
EndIf

Return lEdita

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A105DelIt  ³ Autor ³Allyson B. D. Freitas ³ Data ³10/01/2012³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao para validar a permissao do usuario na delecao       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³A105DelIt()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T. - tem permissao                                        ³±±
±±³          ³ .F. - nao tem permissao                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MsGetDados do MATA105                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function A105DelIt()
Local nPProduto := aScan(aHeader,{|x| AllTrim(x[2])== "CP_PRODUTO"})
Local lRet := .T.

Static lPermHlp := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se o usuario tem permissao de exclusao. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !(lRet := MaAvalPerm(1,{aCols[n][nPProduto],"MTA105",5})) .And. !lPermHlp
	Help(,,1,'SEMPERM')
	lPermHlp := .T.
Else
	lPermHlp := .F.
EndIf

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±º Function  ³ IntegDef º Autor ³ Alex Egydio          º Data ³  27/12/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Descricao ³ Funcao de tratamento para o recebimento/envio de mensagem    º±±
±±º           ³ unica da Solicitacao ao Armazem.                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Uso       ³ MATA105                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function IntegDef( cXml, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj )
Local aRet 			:= {}
Default cXml 		:= ""
Default nTypeTrans 	:= ""
Default cTypeMessage:= ""
Default cVersion 	:= ""
Default cTransac 	:= ""
Default lEAIObj 	:= .F.
Default aRecSCP		:= {}
aRet := MATI105( cXml, nTypeTrans,cTypeMessage, cVersion, cTransac, lEAIObj, aRecSCP)
Return aRet


Function MTSetRecSCP(aReg)
	aRecSCP := aReg
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ A105RatCC  ³ Autor ³ Carlos Capeli	    ³ Data ³ 10/06/2013 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Monta tela de rateio por centro de custo para o item da SA 	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ a105RatCC(aHeadSGS,aColsSGS,lAltera)				        	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = aHeader de Referencia utilizado na FillGetDados      ³±±
±±³			 ³ ExpA2 = aItens de Referencia utilizado na FillGetDados       ³±±
±±³			 ³ ExpL3 = lAltera criado para ser utilizado na FillGetDados    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ MATA105													    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function A105RatCC(aHeadSGS,aColsSGS,lAltera)
Local aArea       := GetArea()
Local aSavaRotina := aClone(aRotina)
Local aColsCC     := {}
Local aButtons	  := {}
Local aHeadSCP    := {}
Local aColsSCP    := {}
Local aNoFields   := {"GS_FILIAL","GS_CUSTO1","GS_CUSTO2","GS_CUSTO3","GS_CUSTO4","GS_CUSTO5"}
Local bSavKeyF4   := SetKey(VK_F4 ,Nil)
Local bSavKeyF5   := SetKey(VK_F5 ,Nil)
Local bSavKeyF6   := SetKey(VK_F6 ,Nil)
Local bSavKeyF7   := SetKey(VK_F7 ,Nil)
Local bSavKeyF8   := SetKey(VK_F8 ,Nil)
Local bSavKeyF9   := SetKey(VK_F9 ,Nil)
Local bSavKeyF10  := SetKey(VK_F10,Nil)
Local bSavKeyF11  := SetKey(VK_F11,Nil)
Local nPItemSA	  := GDFieldPos("CP_ITEM")
Local nPCC	      := GDFieldPos("CP_CC")
Local nPConta	  := GDFieldPos("CP_CONTA")
Local nPItemCta   := GDFieldPos("CP_ITEMCTA")
Local nPCLVL	  := GDFieldPos("CP_CLVL")
Local nPDECC	  := 0
Local nPDEConta	  := 0
Local nPDEItemCta := 0
Local nPDECLVL	  := 0
Local nPRateio    := GDFieldPos("CP_RATEIO")
Local nItem  	  := aScan(aColsSGS,{|x| x[1] == aCols[n][nPItemSA]})
Local nX          := 0
Local nSavN       := N
Local nPPercSGS   := 0
Local nTotPerc    := 0
Local nOpcA       := 0
Local lContinua   := .T.
Local oDlg
Local cCampo      := ReadVar()
Local nAviso      := 0
Local oSize

DEFAULT aHeadSGS  := {}
DEFAULT aColsSGS  := {}
DEFAULT lAltera   := .T.

Private aOrigHeader := aClone(aHeader)
Private aOrigAcols  := aClone(aCols)
Private oGetMan
Private nOrigN      := N
Private nPercRat    := 0
Private nPercARat	:= 100
Private oPercRat
Private oPercARat
Private oGetDad

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa os botoes da toolbar                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !__lPyme
	aadd(aButtons,{'AUTOM',{|| AdmRatExt(aHeadSGS,oGetDad:aCols,{ |x,y,z,w| a105CarCC(x,y,@z,w) }) },STR0040,OemToAnsi("Escolha de Rateio Pre-Configurado")}) //"Rateio" // 'Escolha de Rateio Pre-Configurado'
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Impede de executar a rotina quando a tecla F3 estiver ativa	        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("InConPad") == "L"
	lContinua := !InConPad
EndIf

If nSavN == 0
	lContinua := .F.
EndIf

If lContinua
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aHeader SGS ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Empty(aHeadSGS)
		aHeadSGS := A105GetSx3( "SGS", "GS_CUSTO" )
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aCols do SGS ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nItem > 0

		aColsCC := aClone(aColsSGS[nItem][2])

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Totaliza o % ja Rateado ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nPercRat := 0
		For nX   := 1  To  Len(aColsCC)
			nPercRat += aColsCC[nX][aScan(aHeadSGS,{|x| AllTrim(x[2])=="GS_PERC"})]
		Next nX

		nPercARat := 100 - nPercRat
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ aHeader e aCols do SCP devem ser salvos pois a FillGetDados destroi ³
		//³ ambos por serem PRIVATE, independente da construcao do aColsCC.     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aHeadSCP := aClone(aHeader)
		aColsSCP := aClone(aCols)
		aHeadSGS := {}
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Sintaxe da FillGetDados(nOpcX,Alias,nOrdem,cSeek,bSeekWhile,uSeekFor,aNoFields,aYesFields,lOnlyYes,cQuery,bMontCols,lEmpty,aHeaderAux,aColsAux,bAfterCols,bBeforeCols,bAfterHeader,cAliasQry |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		FillGetDados(IIf(lAltera,3,2),"SGS",1,,,,aNoFields,,,,,.T.,aHeadSGS,aColsCC,,,)
		aColsCC[1][aScan(aHeadSGS,{|x| Trim(x[2])=="GS_ITEM"})] := StrZero(1,Len(SGS->GS_ITEM))

		aHeader := aHeadSCP
		aCols   := aColsSCP
	EndIf
	If !(Type('l105Auto') <> 'U' .And. l105Auto)
		aHeadSCP := aClone(aHeader)
		aColsSCP := aClone(aCols)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta Dialog                                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DEFINE MSDIALOG oDlg FROM 000,000 TO 250,635 TITLE STR0047 Of oMainWnd PIXEL //"Rateio por Centro de Custo"

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula dimensões                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		oSize := FwDefSize():New(.T.,,,oDlg)
		oSize:AddObject( "CABECALHO",  100, 10, .T., .T. ) // Totalmente dimensionavel
		oSize:AddObject( "GETDADOS" ,  100, 80, .T., .T. ) // Totalmente dimensionavel
		oSize:AddObject( "RODAPE"   ,  100, 10, .T., .T. ) // Totalmente dimensionavel

		oSize:lProp 	:= .T. // Proporcional
		oSize:aMargins 	:= { 3, 3, 3, 3 } // Espaco ao lado dos objetos 0, entre eles 3

		oSize:Process() 	   // Dispara os calculos

		@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")     SAY STR0044  Of oDlg PIXEL SIZE 56 ,9 //"Documento : "
		@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")+33  SAY cA105Num Of oDlg PIXEL SIZE 29 ,9
		@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")+73  SAY RetTitle("CP_ITEM") Of oDlg PIXEL SIZE 65 ,9 //"Item :"
		@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")+112 SAY aCols[N][nPItemSA] Of oDlg PIXEL SIZE 37 ,9

		oGetDad := MsNewGetDados():New(oSize:GetDimension("GETDADOS","LININI"),oSize:GetDimension("GETDADOS","COLINI"),;
										oSize:GetDimension("GETDADOS","LINEND"),oSize:GetDimension("GETDADOS","COLEND"),;
										IIF(lAltera,GD_INSERT+GD_UPDATE+GD_DELETE,0),"A105RatLOk","A105RatTOk","+GS_ITEM",,,999,/* - */,/*superdel*/,/*delok*/,oDlg,aHeadSGS,aColsCC)
		oGetMan := oGetDad
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")     Say STR0045 FONT oDlg:oFont OF oDlg PIXEL	 // "% Rateada: "
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")+50  Say oPercRat VAR nPercRat Picture PesqPict("SGS","GS_PERC") FONT oDlg:oFont COLOR CLR_HBLUE OF oDlg PIXEL
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")+180 Say STR0046 FONT oDlg:oFont OF oDlg PIXEL	 // "% A Ratear: "
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")+234 Say oPercARat VAR nPercARat Picture PesqPict("SGS","GS_PERC") FONT oDlg:oFont COLOR CLR_HBLUE OF oDlg PIXEL

		ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar(oDlg,{||IIF(oGetDad:TudoOk(),(nOpcA:=1,oDlg:End()),(nOpcA:=0))},{||oDlg:End()},,aButtons)

		If lAltera
			aColsCC := Aclone(oGetDad:aCols)
		Else
			aHeader := aHeadSCP
			aCols   := aColsSCP
		EndIf
	Else
		nOpcA := 1
	EndIf
	nPPercSGS := aScan(aHeadSGS,{|x| AllTrim(x[2])=="GS_PERC"})
	nTotPerc := 0

	aColsPar :={}
	AEval( aColsCC, { |x| If( !x[ Len(aHeadSGS) + 1], AAdd( aColsPar, x ), ) } )
	aColsCC := aClone( aColsPar )

	For nX := 1 To Len(aColsCC)
		nTotPerc += aColsCC[nX][nPPercSGS]
	Next nX

	nPDECC	      := aScan(aHeadSGS,{|x| AllTrim(x[2]) == "GS_CC"} )
	nPDIt	      := aScan(aHeadSGS,{|x| AllTrim(x[2]) == "GS_ITEM"} )
	nPDEConta	  := aScan(aHeadSGS,{|x| AllTrim(x[2]) == "GS_CONTA"} )
	nPDEItemCta   := aScan(aHeadSGS,{|x| AllTrim(x[2]) == "GS_ITEMCTA"} )
	nPDECLVL	  := Ascan(aHeadSGS,{|x| AllTrim(x[2]) == "GS_CLVL"} )

	If nOpcA == 1 .And. lAltera
		//-- Validação para que se for alterado os itens refazer o rateio.
		If(nFAltRat>0)
			nFAltRat := 0
			If(nFAltRat2>0)
				nFAltRat2 := 0
			EndIf
			nFAltRat2++
		EndIf
		If nTotPerc > 0
			//Acerta a numeração do Item
			For nX := 1 to Len(aColsCC)
				aColsCC[nX][nPDIt] := RetAsc(Str(nX),TamSX3("GS_ITEM")[1],.T.)
			Next nX

			If nItem > 0
				aColsSGS[nItem][2]	:= aClone(aColsCC)
			Else
				aadd(aColsSGS,{aCols[N][nPItemSA],aClone(aColsCC)})
			EndIf

			aCols[N][nPRateio] := "1"
			If nPCC <> 0 .And. nPDECC <> 0
				aCols[N][nPCC]     := Space(Len(aCols[N][nPCC]))
			EndIf
			If nPConta <> 0 .And. nPDEConta <> 0
				aCols[N][nPConta]  := Space(Len(aCols[N][nPConta]))
			EndIf
			If nPItemCta <> 0 .And. nPDEItemCta <> 0
				aCols[N][nPItemCta]:= Space(Len(aCols[N][nPItemCta]))
			EndIf
			If nPCLVL <> 0 .And. nPDECLVL <> 0
				aCols[N][nPCLVL]   := Space(Len(aCols[N][nPCLVL]))
			EndIf
			If N == 1 .And. Len(aCols)>1
				nAviso := Aviso(STR0018,STR0041,{STR0042,STR0043}) //"Atenção"###"Replicar informações para os demais itens do documento?"###"Sim"###"Não"
				If nAviso == 1
					aColsSGS := {}
					For nX := 1 To Len(aCols)
						aadd(aColsSGS,{aCols[nX][nPItemSA],aClone(aColsCC)})
						aCols[nX][nPRateio] := "1"
						If nPCC <> 0 .And. nPDECC <> 0
							aCols[NX][nPCC] := Space(Len(aCols[NX][nPCC]))
						EndIf
						If nPConta <> 0 .And. nPDEConta <> 0
							aCols[NX][nPConta] := Space(Len(aCols[NX][nPConta]))
						EndIf
						If nPItemCta <> 0 .And. nPDEItemCta <> 0
							aCols[NX][nPItemCta]:= Space(Len(aCols[NX][nPItemCta]))
						EndIf
						If nPCLVL <> 0 .And. nPDECLVL <> 0
							aCols[NX][nPCLVL] := Space(Len(aCols[NX][nPCLVL]))
						EndIf
					Next nX
				EndIf
			EndIf
		Else
			If nItem > 0
				aColsSGS[nItem][2]	:= aClone(aColsCC)
			Else
				aadd(aColsSGS,{aCols[N][nPItemSA],aClone(aColsCC)})
			EndIf
			aCols[nSavN][nPRateio] := "2"
		EndIf
	Else
		If nTotPerc > 0 .And. nItem > 0
			If "CP_RATEIO" $ cCampo
				&cCampo := "1"
			EndIf
			aCols[nSavN][nPRateio] := "1"
		Else
			If "CP_RATEIO" $ cCampo
				&cCampo := "2"
			EndIf
			aCols[nSavN][nPRateio] := "2"
		EndIf
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Armazena aHeadSGS e aColsSGS em array Private validacoes em outros pontos do fonte  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aCPHSGS:=aClone(aHeadSGS)
ACPISGS:=aClone(aColsSGS)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a integridade da rotina                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aRotina	:= aClone(aSavaRotina)
N := nSavN
SetKey(VK_F4 ,bSavKeyF4)
SetKey(VK_F5 ,bSavKeyF5)
SetKey(VK_F6 ,bSavKeyF6)
SetKey(VK_F7 ,bSavKeyF7)
SetKey(VK_F8 ,bSavKeyF8)
SetKey(VK_F9 ,bSavKeyF9)
SetKey(VK_F10,bSavKeyF10)
SetKey(VK_F11,bSavKeyF11)
RestArea(aArea)
Return(.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ A105RatLok³ Autor ³ Carlos Capeli        ³ Data ³10.06.2013 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Esta rotina tem como objetivo validar a linhaok do rateio   ³±±
±±³          ³ dos itens da solicitacao ao armazem                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1: Indica se a linha esta valida                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105RatLOk()
Local nPPerc    := aScan(aHeader,{|x| AllTrim(x[2]) == "GS_PERC"})
Local nPCC	    := aScan(aHeader,{|x| AllTrim(x[2]) == "GS_CC"})
Local nPConta	:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_CONTA"})
Local nPItemCta := aScan(aHeader,{|x| AllTrim(x[2]) == "GS_ITEMCTA"})
Local nPCLVL	:= Ascan(aHeader,{|x| AllTrim(x[2]) == "GS_CLVL"})
Local lRetorno  := .T.
Local nX        := 0

If !aCols[N][Len(aCols[N])]
	If aCols[N][nPPerc] == 0
		Help(" ",1,"A103PERC")
		lRetorno := .F.
	EndIf
EndIf

If lRetorno
	nPercRat := 0
	nPercARat:= 0
	For nX	:= 1 To Len(aCols)
		If !aCols[nX][Len(aCols[nX])]
			nPercRat += aCols[nX][nPPerc]
		EndIf
	Next
	nPercARat := 100 - nPercRat
	If Type("oPercRat")=="O"
		oPercRat:Refresh()
		oPercARat:Refresh()
	Endif
EndIf

//Consiste amarração da Conta Contábil X Centro de Custo
If lRetorno
	If nPConta <> 0 .And. nPCC>0 .And. nPItemCta <> 0 .And. nPClVl <> 0 .And.;
	(!CtbAmarra(aCols[n,nPConta],aCols[n,nPCC],aCols[n,nPItemCTA],aCols[n,nPCLVL]))
		lRetorno:=.F.
	EndIf
EndIf

Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A105RatLok ³Autor ³ Carlos Capeli         ³ Data ³10.06.2013 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Esta rotina tem como objetivo validar a tudook do rateio    ³±±
±±³          ³ dos itens da solicitacao ao armazem                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1: Indica se a todas as linhas estao validas            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA105                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A105RatTok()
Local nPPerc    := aScan(aHeader,{|x| AllTrim(x[2]) == "GS_PERC"} )
Local nPCC	    := aScan(aHeader,{|x| AllTrim(x[2]) == "GS_CC"})
Local nPConta	:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_CONTA"})
Local nPItemCta := aScan(aHeader,{|x| AllTrim(x[2]) == "GS_ITEMCTA"})
Local nPCLVL	:= Ascan(aHeader,{|x| AllTrim(x[2]) == "GS_CLVL"})

Local nTotal   := 0
Local nX       := 0
Local lRetorno := .T.

For nX	:= 1 To Len(aCols)
	If !aCols[nX][Len(aCols[nX])]
		nTotal += aCols[nX][nPPerc]
		//Consiste amarração da Conta Contábil X Centro de Custo
		If (!CtbAmarra(aCols[nX,nPConta],aCols[nX,nPCC],aCols[nX,nPItemCTA],aCols[nX,nPCLVL]))
			lRetorno:=.F.
			Aviso("A105RatTok",STR0048+aCols[nX,1],{"Ok"}) //"Verifique o rateio do Item: "
			Exit
		EndIf
	EndIf
Next

If lRetorno .And. nTotal > 0 .And. nTotal <> 100
	Help(" ",1,"A103TOTRAT")
	lRetorno := .F.
EndIf

Return(lRetorno)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³M105AutRatºAutor  ³Carlos Capeli       º Data ³  10/06/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³Monta o array aRatSA para ser utilizado via ExecAuto.       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MATA105                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function M105AutRat(aRatSA,aHeaderRAT)
Local aAux	:= {}
Local nPos	:= 0
Local nZ	:= 0
Local nY	:= 0
Local nX	:= 0

For nX := 1 To Len(aRatSA)
	If Empty(aScan(aCols,{|x| x[GDFieldPos("CP_ITEM")] == aRatSA[nX,1]}))
		Loop
	EndIf
	For nY := 1 To Len(aRatSA[nX,2])
		aAux := aClone(aRatSA[nX,2,nY])
		aRatSA[nX,2,nY] := Array(Len(aHeaderRAT)+1)
		For nZ := 1 To Len(aRatSA[nX,2,nY]) - 1
			If IsHeadRec(aHeaderRAT[nZ,2]) .Or. IsHeadAlias(aHeaderRAT[nZ,2])
				Loop
			ElseIf (nPos := aScan(aAux,{|x| AllTrim(x[1]) == AllTrim(aHeaderRAT[nZ,2])})) > 0
				aRatSA[nX,2,nY,nZ] := aAux[nPos,2]
			Else
				aRatSA[nX,2,nY,nZ] := CriaVar(aHeaderRAT[nZ,2])
			EndIf
		Next nZ
		aTail(aRatSA[nX,2,nY]) := .F.
	Next nY
Next nX

Return aRatSA

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunção    ³A105AColsRaºAutor  ³Carlos Capeli       º Data ³  10/06/13  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao verifica se existe alteração nos itens da solicitacaoº±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA105                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A105AColsRa(aColsBKPRat,nOpcx,aColsSGS)
Local lContAltRat	:= .T.
Local nRat			:= 0
Local nRat2			:= 0
Local nCols			:= 0
Local nCols2		:= 0
Local nItem			:= 0
Default aColsBKPRat := {}

nFAltRat++ //-- Passou uma vez nesta validação
If( (nOpcx==4) .And. (Len(aColsSGS)>0) )
	If!(nFAltRat>0 .And. nFAltRat2>0 .And. nFAltRat == nFAltRat2)
		//-- Se é uma alteração, o aCols foi alterado e existe rateio é preciso fazer o rateio novamente.
		For nRat := 1 to Len(aColsSGS) //-- Faz a comparação para itens que tenham rateio.
			For nRat2 := 1 to Len(aCols)
				If(aColsSGS[nRat,1] == aCols[nRat2,1])
					nItem := aColsSGS[nRat,1] //-- Seleciona qual item tem rateio.
					For nCols:=1 to Len(aColsBKPRat)
						If (aColsBKPRat[nCols,1] == nItem) //-- Só compara dados dos itens que tem rateio.
							For nCols2:=1 to Len(aColsBKPRat[nCols])
								If nCols<=Len(aColsBKPRat[1])
									If ( Ascan(aColsBKPRat,{|x| x[nCols],x[nCols2]==aCols[nCols,nCols2] } ) == 0 )//-- Comparando aCols original com novo.
										nCols  := Len(aColsBKPRat)
										nCols2 := Len(aColsBKPRat[nCols])
										MsgAlert(STR0049)//--"Na inclusão da solicitacao ao armazem foi feito rateio para o(os) iten(S), necessário verificar os rateios antes de alterar."
										lContAltRat := .F.
									EndIf
								EndIf
							Next
						EndIf
					Next
					nItem := 0
				EndIf
			Next
		Next nRat
	EndIf
EndIf

Return (lContAltRat)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A105AcoSGSºAutor  ³Carlos Capeli       º Data ³  10/06/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Funcao responsavel por criar o aCols da tabela SGS para	  º±±
±±º     	 ³ ser utilizado nos processos de Alterar e Visualizar  	  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ aExp1: aHeadSGS da tabela SGS 							  º±±
±±º			 ³ aExp2: aColsSGS da tabela SGS							  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA105                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A105AcoSGS(aHeadSGS,aColsSGS)
Local aAreaSGS 	:= SGS->(GetArea())
Local aAreaSCP 	:= SCP->(GetArea())
Local cAliasSGS := ""
Local nX 		:= 0
Local nY		:= 0
Local aStruSGS	:= {}
Local cQuery	:= ""
Local cItemSGS	:= ""
Local nItemSGS	:= 0
Default aHeadSGS := {}
Default aColsSGS := {}

If Type("aBackSGS") # "A"
	aBackSGS := {}
EndIf

DbSelectArea("SCP")
DbSetOrder(1)

MsSeek(xFilial("SCP")+cA105Num)
DbSelectArea("SGS")
DbSetOrder(1)

cAliasSGS := "SGS"
lQuery    := .T.
aStruSGS  := SGS->(dbStruct())
cAliasSGS := "A105SOLICIT"
cQuery    := "SELECT SGS.*,SGS.R_E_C_N_O_ SGSRECNO "
cQuery    += "FROM "+RetSqlName("SGS")+" SGS "
cQuery    += "WHERE SGS.GS_FILIAL='"+xFilial("SGS")+"' AND "
cQuery    += "SGS.GS_SOLICIT='"+SCP->CP_NUM+"' AND "
cQuery    += "SGS.D_E_L_E_T_=' ' "
cQuery    += "ORDER BY "+SqlOrder(SGS->(IndexKey()))
cQuery := ChangeQuery(cQuery)
dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSGS,.T.,.T.)
For nX := 1 To Len(aStruSGS)
	If aStruSGS[nX,2]<>"C"
		TcSetField(cAliasSGS,aStruSGS[nX,1],aStruSGS[nX,2],aStruSGS[nX,3],aStruSGS[nX,4])
	EndIf
Next nX
dbSelectArea(cAliasSGS)
While (!Eof() .And. xFilial('SGS') == (cAliasSGS)->GS_FILIAL .And. SCP->CP_NUM == (cAliasSGS)->GS_SOLICIT)
	If Empty(aBackSGS)
		aBackSGS := A105GetSx3( "SGS", "GS_CUSTO|GS_FILIAL" )
	EndIf
	aHeadSGS  := aBackSGS

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Adiciona os campos de Alias e Recno ao aHeader para WalkThru.³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ADHeadRec("SGS",aHeadSGS)
	If cItemSGS <> AllTrim((cAliasSGS)->GS_ITEMSOL)
		cItemSGS := AllTrim((cAliasSGS)->GS_ITEMSOL)
		aAdd(aColsSGS,{cItemSGS,{}})
		nItemSGS++
	EndIf

	aAdd(aColsSGS[nItemSGS][2],Array(Len(aHeadSGS)+1))
	For nY := 1 to Len(aHeadSGS)
		If IsHeadRec(aHeadSGS[nY][2])
			aColsSGS[nItemSGS][2][Len(aColsSGS[nItemSGS][2])][nY] := IIf(lQuery,(cAliasSGS)->SGSRECNO,SGS->(Recno()))
		ElseIf IsHeadAlias(aHeadSGS[nY][2])
			aColsSGS[nItemSGS][2][Len(aColsSGS[nItemSGS][2])][nY] := "SGS"
		ElseIf (aHeadSGS[nY][10] <> "V")
			aColsSGS[nItemSGS][2][Len(aColsSGS[nItemSGS][2])][nY] := (cAliasSGS)->(FieldGet(FieldPos(aHeadSGS[nY][2])))
		Else
			aColsSGS[nItemSGS][2][Len(aColsSGS[nItemSGS][2])][nY] := (cAliasSGS)->(CriaVar(aHeadSGS[nY][2]))
		EndIf
		aColsSGS[nItemSGS][2][Len(aColsSGS[nItemSGS][2])][Len(aHeadSGS)+1] := .F.
	Next nY
	DbSelectArea(cAliasSGS)
	dbSkip()
EndDo

If lQuery
	DbSelectArea(cAliasSGS)
	dbCloseArea()
	DbSelectArea("SGS")
EndIf

RestArea(aAreaSGS)
RestArea(aAreaSCP)
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A105RatAutºAutor  ³Carlos Capeli       º Data ³  17/06/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Valida o array de rateio por CC da ExecAuto.               º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ aRateioSC[nX,1]: item da solicitacao ao armazem.			  º±±
±±º			 ³ aRateioSC[nX,2]: array com os itens do rateio.			  º±±
±±º			 ³ aRateioSC[nX,2,nY,nZ,1]: nome do campo.					  º±±
±±º			 ³ aRateioSC[nX,2,nY,nZ,2]: conteudo do campo. 			  	  º±±
±±º			 ³ aRateioSC[nX,2,nY,nZ,3]: validacao especifica.			  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA105                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A105RatAut(aRateioSA)
Local lRet        := .T.
Local nTotal	  := 0
Local nX		  := 0
Local nY		  := 0
Local nZ		  := 0
Local aPosCampo   := Array(4)

Private N 		  := 1
Default aRateioSA :=  {}



//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ No modo Automatico checa Rateio                       				 ³
//³    1 - A soma dos percentuais de rateios dos C.Custo eh igual a 100% ³
//³    2 - Cada C.Custo rateado existe na tabela SCC                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aRateioSA) > 0
	//-- Obtem posicao dos campos no array da ExecAuto
	nPosPerc := aScan(aRateioSA[1,2,1],{|x| AllTrim(x[1]) == "GS_PERC"	})
	aPosCampo[1] := {"GS_CC",aScan(aRateioSA[1,2,1],{|x| AllTrim(x[1]) == "GS_CC"})}
	aPosCampo[2] := {"GS_CONTA",aScan(aRateioSA[1,2,1],{|x| AllTrim(x[1]) == "GS_CONTA"})}
	aPosCampo[3] := {"GS_ITEMCTA",aScan(aRateioSA[1,2,1],{|x| AllTrim(x[1]) == "GS_ITEMCTA"})}
	aPosCampo[4] := {"GS_CLVL",aScan(aRateioSA[1,2,1],{|x| AllTrim(x[1]) == "GS_CLVL"})}
	If nPosPerc > 0
		For nX := 1 To Len(aRateioSA)
			//-- Zera acumuladores de validacao
			nTotal    := 0
			For nY := 1 to Len(aRateioSA[nX,2])
				//-- Valida campos pelo dicionario
				For nZ := 1 To Len(aRateioSA[nX,2,nY])
					__READVAR := "M->"+(aRateioSA[nX,2,nY,nZ,1])
					M->&(aRateioSA[nX,2,nY,nZ,1]) := aRateioSA[nX,2,nY,nZ,2]
					If !(lRet := CheckSX3(aRateioSA[nX,2,nY,nZ,1],aRateioSA[nX,2,nY,nZ,2]))
						Exit
					EndIf
				Next nZ
				//-- Acumula percentual
				nTotal += aRateioSA[nX,2,nY,nPosPerc,2]
			Next nY
			If lRet .And. (nTotal > 100 .Or. nTotal < 100)
				Help(' ',1,'A103TOTRAT')
				lRet := .F.
				Exit
			Endif
		Next nX
	Else
		Help(' ',1,STR0050+AllTrim(RetTitle("GS_PERC")) +STR0051) //"Erro na estrutura do vetor de rateio: campo "##" ausente."
		lRet := .F.
	EndIf
EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} A105GETSGS()
Função para recuperar variavel aColsSGS

@author Alexandre.Gimenez
@since 04/09/2013
@version 1.0
@return lRet
/*/
//-------------------------------------------------------------------
Function A105GETSGS()

Return aColsSGS

//-------------------------------------------------------------------
/*/{Protheus.doc} A110SETSCX(aSCX)
Função para atualizar variavel aColsSGS

@author Alexandre.Gimenez
@since 04/09/2013
@version 1.0
@return lRet
/*/
//-------------------------------------------------------------------
Function A105SETSGS(aSGS)

aColsSGS := aSGS

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} ExistOS(cOrdServ)
Função para verificar se existe order de servico na tabela ABG

@author isaias.silva
@since 23/05/2014
@version 1.0
@param cOrdServ - codigo da ordem de servico e item
@return lRet
/*/
//-------------------------------------------------------------------

Function ExistOS(cOrdServ)

Local lRet 		:= .F.
Local aAreaABG 	:= ABG->(GetArea())
Local aAreaABF	:= ABF->(GetArea())
Local cNumOs	:= SubStr(cOrdServ, 1, TAMSX3("ABF_NUMOS")[1]) //Recupera o Numero da O.S
Local cItemSA	:= SubStr(cOrdServ, TAMSX3("ABF_NUMOS")[1]+1,TAMSX3("CP_NUMOS")[1]) //Recupera o Item da Requisição

//Realiza o Seek na ABF para buscar o Item da O.S
ABF->(DbSetOrder(1))
If ABF->(DbSeek(xFilial("ABF")+cNumOs))
	ABG->(DbSetOrder(1)) // FILIAL + NUMOS + ITEMOS + SEQRC + ITEM
	If ABG->( dbSeek(xFilial("ABG")+ABF->ABF_NUMOS+ABF->ABF_ITEMOS+ABF->ABF_SEQRC+cItemSA) )
		lRet := .T.
	EndIf
EndIf
RestArea(aAreaABF)
RestArea(aAreaABG)
Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} a110CarCC()
Carrega as definições de rateio externo
@author Rafael Duram
@since 10/05/2016
@version P12
@return .T.
/*/
//-------------------------------------------------------------------
Function a105CarCC(aCols, aHeader, cItem, lPrimeiro)

Local lCusto		:= CtbMovSaldo("CTT")
Local lItem	 		:= CtbMovSaldo("CTD")
Local lCLVL	 		:= CtbMovSaldo("CTH")
Local nPosPerc		:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_PERC" } )
Local nPosItem		:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_ITEMSOL" } )
Local nPosCC		:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_CC"} )
Local nPosConta		:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_CONTA"} )
Local nPosItemCta	:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_ITEMCTA"} )
Local nPosCLVL		:= aScan(aHeader,{|x| AllTrim(x[2]) == "GS_CLVL"} )
Local nHeader		:= 0
Local aEntidades	:= {}
Local nEnt			:= 0
Local nDeb			:= 0

If lPrimeiro
	//-- Se ja foi informado algum rateio, limpar o aCols
	If aCols[Len(aCols)][nPosPerc] <> 0
		aCols := {}
		Aadd(aCols, Array(Len(aHeader) + 1))
		For nHeader := 1 To Len(aHeader)
			If Trim(aHeader[nHeader][2]) <> "GS_ALI_WT" .And. Trim(aHeader[nHeader][2]) <> "GS_REC_WT"
				aCols[Len(aCols)][nHeader] := CriaVar(aHeader[nHeader][2])
			Endif
		Next
	EndIf
	cItem := Soma1(cItem)
	aCols[Len(aCols)][nPosItem]  := cItem
	aCols[Len(aCols)][Len(aHeader)+1] := .F.
Else
	If aCols[Len(aCols)][nPosPerc] = 0
		nCols := Len(aCols)
		cItem := aCols[nCols][nPosItem]
	Else
		If Len(aCols) > 0
			cItem := aCols[Len(aCols)][nPosItem]
		Endif
		Aadd(aCols, Array(Len(aHeader) + 1))
		cItem := Soma1(cItem)
	EndIf

	For nHeader := 1 To Len(aHeader)
		If Trim(aHeader[nHeader][2]) <> "GS_ALI_WT" .And. Trim(aHeader[nHeader][2]) <> "GS_REC_WT"
			aCols[Len(aCols)][nHeader] := CriaVar(aHeader[nHeader][2])
		EndIf
	Next

	aCols[Len(aCols)][nPosItem] := cItem

	// Interpreto os campos incluida possibilidade de variaveis de memoria
	If !Empty(CTJ->CTJ_DEBITO)
		aCols[Len(aCols)][nPosConta]	:= CTJ->CTJ_DEBITO
	Else
		aCols[Len(aCols)][nPosConta]	:= CTJ->CTJ_CREDIT
	Endif

	If lCusto
		If ! Empty(CTJ->CTJ_CCD)
			aCols[Len(aCols)][nPosCc]	:= CTJ->CTJ_CCD
		Else
			aCols[Len(aCols)][nPosCc]	:= CTJ->CTJ_CCC
		Endif
	EndIf

	If lItem
		If ! Empty(CTJ->CTJ_ITEMD)
			aCols[Len(aCols)][nPosItemCta]	:= CTJ->CTJ_ITEMD
		Else
			aCols[Len(aCols)][nPosItemCta]	:= CTJ->CTJ_ITEMC
		Endif
	EndIf

	If lClVl
		If ! Empty(CTJ->CTJ_CLVLDB)
			aCols[Len(aCols)][nPosClVl]	:= CTJ->CTJ_CLVLDB
		Else
			aCols[Len(aCols)][nPosClVl]	:= CTJ->CTJ_CLVLCR
		Endif
	EndIf
	aCols[Len(aCols)][nPosPerc] := CTJ->CTJ_PERCEN
	aCols[Len(aCols)][Len(aHeader) + 1] := .F.

	aEntidades := CtbEntArr()
	For nEnt := 1 to Len(aEntidades)
		For nDeb := 1 to 2
			cCpo := "GS_EC"+aEntidades[nEnt]
			cCTJ := "CTJ_EC"+aEntidades[nEnt]

			If nDeb == 1
				cCpo += "DB"
				cCTJ += "DB"
			Else
				cCpo += "CR"
				cCTJ += "CR"
			EndIf

			nPosHead := aScan(aHeader,{|x| AllTrim(x[2]) == Alltrim(cCpo) } )

			If nPosHead > 0
				aCols[Len(aCols)][nPosHead] := CTJ->(&(cCTJ))
			EndIf

		Next nDeb
	Next nEnt

EndIf

Return .T.

/*/{Protheus.doc} A105GetSx3
	Funcao Responsavel pela Montagem do aHeader MATA105
	@type  Function
	@author Paulo V. Beraldo
	@since Abr/2020
	@version 1.00
	@param xAlias  , Caracter, Alias da Tabela
	@param xCampo  , Caracter, Campos para Exclusao na Montagem do aHeader
	@param aSx3Cpos, Array   , Vetor de Estrutura Simples com os Campos do SX3
	@param lCpoVirt, Boolean , Parametro que Indica se deve Incluir os Campos Virtuais na Consulta
	@return aHeader, Array, Vetor com a Estrutura dos Campos Configurados no Metadados.
	@A105GetSx3)
/*/
Function A105GetSx3( xAlias, xCampo, aSx3Cpos, lCpoVirt )
Local aArea		:= GetArea()
Local nInd		:= 0
Local aAux		:= {}
Local aHeader	:= {}
Local aCpos		:= {}

Default xAlias	:= ''
Default xCampo	:= ''
Default aSx3Cpos:= {}
Default lCpoVirt:= .T.


If !( Empty( xAlias ) )
	aCpos 	 := ESTFwSX3Util():xGetAllFields( xAlias , lCpoVirt )
	aSx3Cpos := IIf( Empty( aSx3Cpos ), { "X3_TITULO", "X3_CAMPO", "X3_PICTURE", "X3_TAMANHO", "X3_DECIMAL", "X3_VALID", "X3_USADO", "X3_TIPO", "X3_ARQUIVO", "X3_CONTEXT" }, aSx3Cpos )

	AEval( aCpos,{ | x | Aadd( aAux,{ x , Eval( bGetSx3, x, "X3_ORDEM" ) } ) } )
	aAux := ASort( aAux,,,{ | x,y | x[ 2 ] < y[ 2 ] } )

	aCpos:= {}
	AEval( aAux,{ | x | Aadd( aCpos, AllTrim( x[ 1 ] ) ) } )

	For nInd := 1 To Len( aCpos )
		aAux := {}
		If ( X3Uso( Eval( bGetSx3, aCpos[ nInd ] , "X3_USADO" ) ) ) .And. ( Eval( bGetSx3, aCpos[ nInd ] , "X3_NIVEL" ) <= cNivel ) .And. IIf( !( Empty( xCampo ) ), !( AllTrim( aCpos[ nInd ] ) $ xCampo ), .T. )
			AEval( aSx3Cpos, { | x | Aadd( aAux, IIf( AllTrim( x ) == "X3_TITULO" , AllTrim( RetTitle( aCpos[ nInd ] ) ), Eval( bGetSx3, aCpos[ nInd ], x ) ) ) } )
			Aadd( aHeader, AClone( aAux ) )
		EndIf
	Next nInd
EndIf

RestArea( aArea )
Return aHeader
