#INCLUDE "MATA215.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWLIBVERSION.CH"
#INCLUDE "FWEVENTVIEWCONSTS.CH"
#DEFINE MAXPASSO 16

//Posições das tabelas no array aFilTabs
#DEFINE TabelaSA1 1
#DEFINE TabelaSB2 2
#DEFINE TabelaSB8 3
#DEFINE TabelaSBF 4
#DEFINE TabelaSC1 5
#DEFINE TabelaSC7 6
#DEFINE TabelaSC2 7
#DEFINE TabelaSD4 8
#DEFINE TabelaSDD 9
#DEFINE TabelaSCQ 10
#DEFINE TabelaSDA 11
#DEFINE TabelaSD1 12
#DEFINE TabelaSC0 13
#DEFINE TabelaSC6 14
#DEFINE TabelaSB6 15
Static lMA215SD1
Static lMT215EXC
Static lMT215PRO
Static lM215SC
Static lMA215SD2

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Mata215   ³ Rev   ³ Eduardo Riera         ³ Data ³30.03.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de atualizacao dos acumulados do MRP                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Mata215(ExpL1)							                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpL1: Indica se o processo sera' Batch                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar os acumulados do MRP ³±±
±±³          ³das seguintes tabelas:                                       ³±±
±±³          ³A) SA1 -> Cadastro de Clientes - Saldo de pedidos.           ³±±
±±³          ³B) SB2 -> Saldos fisico e financeiro - Dados do MRP          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MATA215(lBat)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cCadastro		:= OemtoAnsi(STR0001)  		//"Refaz Acumulados"
Local bBlNewProc	:= {|oCenterPanel|MA215Do(lBat,oCenterPanel)}
Local lUsaNewPrc	:= UsaNewPrc()
Local aSays			:={}
Local aButtons		:={}
Local lOK           := .F.

DEFAULT lBat := .F.

TCInternal(5,"*OFF")   // Desliga Refresh no Lock do Top

AADD(aSays,STR0017) //"Este programa tem como objetivo refazer os Saldos de Pedidos, Solicitações e Ordens"
AADD(aSays,STR0018) //"de Produção dos Produtos com base nos seus respectivos movimentos."
AADD(aSays," ")
AADD(aSays,STR0019) //"ATENÇÃO - Esta rotina será executada em MODO EXCLUSIVO, portanto somente esta estação"
AADD(aSays,STR0020) //"poderá estar ativa enquanto estiver processando a rotina de Refaz Acumulado."

AADD(aButtons, { 1,.T.,{|| lOk := .T.,FechaBatch() }} )
AADD(aButtons, { 2,.T.,{|| lOk := .F.,FechaBatch() }} )

ProcLogIni(aButtons)

If IsBlind()
	BatchProcess(cCadastro,STR0002+CRLF+STR0008,NIL,{|| MA215Do(.T.)})
ElseIf !lBat
	If lUsaNewPrc
		tNewProcess():New("MATA215",cCadastro,bBlNewProc,OemtoAnsi(STR0002)+chr(13)+chr(13)+OemtoAnsi(STR0008),"")
	Else
		FormBatch(cCadastro,aSays,aButtons,,220,560)
		If lOK
			MA215Do(lBat)
		EndIf
	EndIf
Else
	Ma215Do(lBat)
EndIf
Return

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ma215Do   ³Autor  ³Rodrigo de A. Sartorio ³ Data ³04.07.2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de chamada do MATA215                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ma215Do(ExpL1)							                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpL1: Indica se o processo sera' Batch                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MA215Do(lBat,oCenterPanel)
Local oObj
Local lNewProc := .F.

If oCenterPanel <> NIL
	oObj     := oCenterPanel
	lNewProc := .T.
EndIf

If lBat
	Ma215Proc(lBat,oObj)
Else
	If !lNewProc
		FWMsgRun(,{|oObj|Ma215Proc(lBat,oObj,lNewProc)},OemtoAnsi(STR0001),STR0030)
	Else
		Ma215Proc(lBat,oObj,lNewProc)
	EndIf
EndIf
Return .T.

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ma215Proc ³ Rev   ³ Eduardo Riera         ³ Data ³30.03.2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de Processamento do MATA215                           ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ma215Proc(ExpL1,ExpO1)					                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpL1: Indica se o processo sera' Batch                      ³±±
±±³          ³ExpO1: nome do obj da regua de processamento                 ³±±
±±³          ³ExpL2: define se esta utilizando tNewProcess()               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo processar os acumulados do MRP-³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Ma215Proc(lBat,oObj,lNewProc)
Local aTravas     := {}
Local cQuery      := ""
Local cChave      := ""
Local lContinua   := .F.
Local lGravaEmp   := .F.
Local cAliasSA1   := "SA1"
Local cAliasSB2   := "SB2"
Local cAliasSB6   := "SB6"
Local cAliasSB8   := "SB8"
Local cAliasSBF   := "SBF"
Local cAliasSC0   := "SC0"
Local cAliasSC1   := "SC1"
Local cAliasSC2   := "SC2"
Local cAliasSC6   := "SC6"
Local cAliasSC7   := "SC7"
Local cAliasSD4   := "SD4"
Local cAliasAFJ   := "AFJ"
Local cAliasSDD   := "SDD"
Local cAliasSD1   := "SD1"
Local cAliasSL2   := "SL2"
Local cAliasSCQ   := "SCQ"
Local cAliasSDA   := "SDA"
Local cFirst      := ""
Local nX          := 0
Local nMax        := 0
Local nMin        := 0

Local nEmpenho    := 0
Local nEmpenh2    := 0
Local nBaixaEmp   := 0
Local nBaixaEm2   := 0

Local cSeek       := ""
Local cCompara    := ""
Local cMensagem   := ""
Local cEstoque    := ""
Local nTempoIni   := 0
Local nTempoFim   := 0
Local cTempo      := ""
Local dDataIni    := StoD("")
Local dDataFim    := StoD("")
Local cLocOriSB6  := ""
Local lEmpPrev    := If(SuperGetMV("MV_QTDPREV")== "S",.T.,.F.)
Local lPCFilEnt   := SuperGetMv("MV_PCFILEN",.F.,.F.)
Local aTabs       := {}
Local lLockTabs   := .T.
Local lAtuRes     := .T. // Define se atualiza a reserva (TPL OTC)
Local aAreaSM0    := {}
Local lCompraFut  := AliasInDic("DHQ") .And. SF4->(ColumnPos("F4_EFUTUR") > 0) .And. FindFunction("A103Refaz")
Local cFilialLida := ""
Local nElaptime
Local cSB6Filial
Local cSF4Filial
Local cSB2Filial
Local aBind
Local cQrySA1
Local cQrySB8
Local cQrySBF
Local cQrySC7
Local cQrySDA
Local cQrySD1
Local cQrySD12
Local cQryAFJ
Local cQrySL2
Local cQrySB6
Local cQrySDD
Local cQrySDDSDC
Local cAliasSDC
Local cQrySCQ
Local cQryD0G
Local cQryDH1
Local cAliasD0G
Local cAliasDH1
Local cTitle
Local cMessage
Local nPosPrepared
Local __aPrepared := {}
Local cMD5

Local aFilTabs    := {{cAliasSA1, "" /*cFilAnterior*/},;
							{cAliasSB2, "" /*cFilAnterior*/},;
							{cAliasSB8, "" /*cFilAnterior*/},;
							{cAliasSBF, "" /*cFilAnterior*/},;
							{cAliasSC1, "" /*cFilAnterior*/},;
							{cAliasSC7, "" /*cFilAnterior*/},;
							{cAliasSC2, "" /*cFilAnterior*/},;
							{cAliasSD4, "" /*cFilAnterior*/},;
							{cAliasSDD, "" /*cFilAnterior*/},;
							{cAliasSCQ, "" /*cFilAnterior*/},;
							{cAliasSDA, "" /*cFilAnterior*/},;
							{cAliasSD1, "" /*cFilAnterior*/},;
							{cAliasSC0, "" /*cFilAnterior*/},;
							{cAliasSC6, "" /*cFilAnterior*/},;
							{cAliasSB6, "" /*cFilAnterior*/}}

Private nStep     := 8192
Private cQryMa215Res
Private cQryAtuSC1
Private cQryAtuOP
Private cQryOPEmp
Private oRegSC9
Private cQrySD2
Private cQrySDC
Private cQrySC6
Private cQryNNT
Private oTempSC9
Private oTempSC6
Private nPulseLife as numeric
Private oQuerySC6
Private oQuerySC9
Private cSavFil     := cFilAnt
Private cFilProc
Private l215Regua
Private l215Painel
Static __l215VLib

DEFAULT lNewProc := .F.

lMT215PRO   := If(lMT215PRO==nil,ExistBlock( "MT215PRO" ),lMT215PRO)
lMA215SD1	:= If(lMA215SD1==nil,ExistBlock("MA215SD1"),lMA215SD1)
lMT215EXC	:= If(lMT215EXC==nil,ExistBlock("MT215EXC"),lMT215EXC)
__l215VLib 	:= If(__l215VLib == NIL,FWLibVersion() >= "20211116",__l215VLib)
l215Regua   := !lBat .And. lNewProc // Atualiza a regua de processamento
l215Painel  := !lBat .And. !lNewProc // Atualiza o texto do painel

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Semaforo para controle de execucao da rotina                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !MA215Lock(cEmpAnt)
	Return
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada para controlar execucao da rotina de acumuladores³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lMT215PRO
	lRet := ExecBlock("MT215PRO",.F.,.F.)
	If ValType(lRet) <> "L"
		lRet:=.T.
	EndIf

	If !lRet
		Return
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza o log de processamento   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ProcLogAtu("INICIO")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Abre todos os arquivos de forma exclusiva                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
AADD(aTabs,"SA1");AADD(aTabs,"SB1");AADD(aTabs,"SB2");AADD(aTabs,"SB8");AADD(aTabs,"SC0");AADD(aTabs,"SC6")
AADD(aTabs,"SC7");AADD(aTabs,"SC9");AADD(aTabs,"SD2");AADD(aTabs,"SD1");AADD(aTabs,"SD4");AADD(aTabs,"SDC")
AADD(aTabs,"SDD");AADD(aTabs,"SC1");AADD(aTabs,"SC2");AADD(aTabs,"SB6");AADD(aTabs,"SBF");AADD(aTabs,"SDA")
AADD(aTabs,"SL2");AADD(aTabs,"SCQ");AADD(aTabs,"DH1");AADD(aTabs,"D0G")
If lCompraFut
	AADD(aTabs,"DHQ")
EndIf

For nX := 1 To Len(aTabs)
	If !MA280FLock(aTabs[nX],,!IsBlind())
		lLockTabs := .F.
		Exit
	Endif
Next
aAreaSM0 := SM0->(GetArea())
If !lLockTabs
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Fecha todos os arquivos e reabre-os de forma compartilhada   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nX := 1 To Len(aTabs)
		dbSelectArea(aTabs[nX])
		dbCloseArea()
	Next
	OpenFile(SubStr(cNumEmp,1,2),"")
	MA215UnLock(cEmpAnt) //Retorna o Semaforo para o estado inicial, pois a rotina não será executada
	RestArea(aAreaSM0)
	Return
Else
	For nX := 1 To Len(aTabs)
		OpenIndx(aTabs[nX])
	Next
EndIf

aAreaSM0 := SM0->(GetArea())

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona na Primeira Filial                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nTempoIni := Seconds()
dDataIni  := Date()
dbSelectArea("SM0")
dbSetOrder(1)
If Empty(xFilial("SA1")) .Or. Empty(xFilial("SB2")) .Or. lPCFilEnt
	MsSeek(cEmpAnt)
	cFirst := FWGETCODFILIAL //cFirst é a primeira filial do grupo de empresa
Else
	MsSeek(cEmpAnt+cFilAnt)
	cFirst := FWGETCODFILIAL
EndIf

nPulseLife := Seconds()

IF FINDFUNCTION( 'SetAvalSc5' )
	SetAvalSc5(.F.)//- INDICA PARA NÃO ALIMENTAR AS MÉTRICAS
EndIf

While SM0->(!Eof()) .And. cEmpAnt == SM0->M0_CODIGO

	SuperGetMV() //limpo o cache

	If !lBat
		If lNewProc
		    oObj:SetRegua2(MAXPASSO)
		    oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		Else
			cFilProc := STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+AllTrim(SM0->M0_FILIAL) + " - "
	    EndIf
	EndIf
	PulseLife(oObj) //- pulso de conexão

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Altera a Filial do Sistema                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cFilAnt := FWGETCODFILIAL
	If !lBat
		If (oObj <> NIL) .And. lNewProc
			oObj:SaveLog(OemToAnsi(STR0009))
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza o log de processamento             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ProcLogAtu("MENSAGEM",STR0012+cFilAnt,STR0012+cFilAnt,,,csavfil) // "Inicio Filial: "

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se há registros pendentes no SC9                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If FtVldJobFt()
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Zerar os dados a ser atualizado                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//Se a filial retornada pela função xFilial já tiver sido executada não executa novamente

		cFilialLida := xFilial("SA1")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSA1][2]) .Or. (cFilAnt == cFirst)
			SX2->(MsSeek("SA1"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			cAliasSA1 := "SA1MA215PROC"

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			If cQrySA1 == nil
				cQrySA1 := "SELECT MIN(R_E_C_N_O_) MINRECNO,"
				cQrySA1 += "MAX(R_E_C_N_O_) MAXRECNO "
				cQrySA1 += "FROM "+RetSqlName("SA1")+" "
				cQrySA1 += "WHERE A1_FILIAL= ? AND "
				cQrySA1 += "D_E_L_E_T_= ?"
				cQrySA1 := ChangeQuery(cQrySA1)
			EndIf

			aBind := {}
			AADD(aBind,xFilial("SA1"))
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySA1,aBind),cAliasSA1)

			nMax := (cAliasSA1)->MAXRECNO
			nMin := (cAliasSA1)->MINRECNO

			(cAliasSA1)->(dbCloseArea())

			dbSelectArea("SA1")
			cQuery := "UPDATE "
			cQuery += RetSqlName("SA1")+" "
			cQuery += "SET A1_SALPED = 0, "
			cQuery += "A1_SALPEDL = 0, "
			cQuery += "A1_SALPEDB = 0 "
			cQuery += "WHERE A1_FILIAL='"+xFilial("SA1")+"' AND "
			cQuery += "D_E_L_E_T_=' ' AND "
			If l215Regua
				oObj:SetRegua1(Int(nMax/nStep)+1)
			EndIf
			For nX := nMin To nMax+nStep STEP nStep
				cChave := "R_E_C_N_O_>="+Str(nX,10,0)+" AND R_E_C_N_O_<="+Str(nX+nStep,10,0)+""
				TcSqlExec(cQuery+cChave)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			Next nX

			aFilTabs[TabelaSA1][2] := cFilialLida

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³A tabela eh fechada para restaurar o buffer da aplicacao³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea("SA1")
			SA1->(dbCloseArea())
			ChkFile("SA1",.T.)
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		cFilialLida := xFilial("SB2")

		If (Iif(lPCFilEnt, .F., !Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSB2][2])) .Or. (cFilAnt == cFirst)

			SX2->(MsSeek("SB2"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			cAliasSB2 := "SB2MA215PROC"

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			cQuery := "SELECT MIN(R_E_C_N_O_) MINRECNO,"
			cQuery += "MAX(R_E_C_N_O_) MAXRECNO "
			cQuery += "FROM "+RetSqlName("SB2")+" "
			cQuery += "WHERE "
			If ! lPCFilEnt
				cQuery += " B2_FILIAL='"+xFilial("SB2")+"' AND "
			EndIf
			cQuery += "D_E_L_E_T_=' '"
			cQuery := ChangeQuery(cQuery)

			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSB2)
			nMax := (cAliasSB2)->MAXRECNO
			nMin := (cAliasSB2)->MINRECNO
			(cAliasSB2)->(dbCloseArea())
			dbSelectArea("SB2")
			cQuery := "UPDATE "
			cQuery += RetSqlName("SB2")+" "
			cQuery += "SET B2_RESERVA = 0,"
			cQuery += "B2_RESERV2 = 0,"
			cQuery += "B2_QEMP    = 0,"
			cQuery += "B2_QEMP2   = 0,"
			cQuery += "B2_QEMPN   = 0,"
			cQuery += "B2_QEMPN2  = 0,"
			cQuery += "B2_NAOCLAS = 0,"
			cQuery += "B2_SALPEDI = 0,"
			cQuery += "B2_SALPED2 = 0,"
			cQuery += "B2_QPEDVEN = 0,"
			cQuery += "B2_QPEDVE2 = 0,"
			cQuery += "B2_QTNP    = 0,"
			cQuery += "B2_QNPT    = 0,"
			cQuery += "B2_QTER    = 0,"
			cQuery += "B2_QEMPPRE = 0,"
			cQuery += "B2_SALPPRE = 0,"
			cQuery += "B2_QACLASS = 0,"
			cQuery += "B2_QEMPPRJ = 0,"
			cQuery += "B2_QEMPPR2 = 0,"
			cQuery += "B2_QEMPSA  = 0 "
				cQuery += "WHERE "
			If ! lPCFilEnt
				cQuery += " B2_FILIAL='"+xFilial("SB2")+"' AND "
			EndIf
			cQuery += "D_E_L_E_T_=' ' AND "
			If l215Regua
				oObj:SetRegua1(Int(nMax/nStep)+1)
			EndIf
			For nX := nMin To nMax+nStep STEP nStep
				cChave := "R_E_C_N_O_>="+Str(nX,10,0)+" AND R_E_C_N_O_<="+Str(nX+nStep,10,0)+""
				TcSqlExec(cQuery+cChave)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			Next nX

			aFilTabs[TabelaSB2][2] := cFilialLida

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³A tabela eh fechada para restaurar o buffer da aplicacao³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea("SB2")
			SB2->(dbCloseArea())
			ChkFile("SB2",.T.)
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		cFilialLida := xFilial("SB8")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSB8][2]) .Or. (cFilAnt == cFirst)
			SX2->(dbSetOrder(1))
			SX2->(MsSeek("SB8"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			cAliasSB8 := "SB8MA215PROC"

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			If cQrySB8 == nil
				cQrySB8 := "SELECT MIN(R_E_C_N_O_) MINRECNO,"
				cQrySB8 += "MAX(R_E_C_N_O_) MAXRECNO "
				cQrySB8 += "FROM "+RetSqlName("SB8")+" "
				cQrySB8 += "WHERE B8_FILIAL= ? AND "
				cQrySB8 += "D_E_L_E_T_= ?"
				cQrySB8 := ChangeQuery(cQrySB8)
			EndIf

			aBind := {}
			AADD(aBind,xFilial("SB8"))
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySB8,aBind),cAliasSB8)

			nMax := (cAliasSB8)->MAXRECNO
			nMin := (cAliasSB8)->MINRECNO
			(cAliasSB8)->(dbCloseArea())
			dbSelectArea("SB8")
			cQuery := "UPDATE "
			cQuery += RetSqlName("SB8")+" "
			cQuery += "SET B8_EMPENHO = 0, "
			cQuery += "B8_EMPENH2 = 0, "
			cQuery += "B8_QACLASS = 0, "
			cQuery += "B8_QACLAS2 = 0, "
			cQuery += "B8_QEMPPRE = 0 "
			cQuery += "WHERE B8_FILIAL='"+xFilial("SB8")+"' AND "
			cQuery += "D_E_L_E_T_=' ' AND "
			If l215Regua
				oObj:SetRegua1(Int(nMax/nStep)+1)
			EndIf
			For nX := nMin To nMax+nStep STEP nStep
				cChave := "R_E_C_N_O_>="+Str(nX,10,0)+" AND R_E_C_N_O_<="+Str(nX+nStep,10,0)+""
				TcSqlExec(cQuery+cChave)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			Next nX
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³A tabela eh fechada para restaurar o buffer da aplicacao³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			aFilTabs[TabelaSB8][2] := cFilialLida

			dbSelectArea("SB8")
			dbCloseArea()
			ChkFile("SB8",.T.)
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		cFilialLida := xFilial("SBF")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSBF][2]) .Or. (cFilAnt == cFirst)
			SX2->(MsSeek("SBF"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			cAliasSBF := "SBFMA215PROC"

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			If cQrySBF == nil
				cQrySBF := "SELECT MIN(R_E_C_N_O_) MINRECNO,"
				cQrySBF += "MAX(R_E_C_N_O_) MAXRECNO "
				cQrySBF += "FROM "+RetSqlName("SBF")+" "
				cQrySBF += "WHERE BF_FILIAL= ? AND "
				cQrySBF += "D_E_L_E_T_= ?"
				cQrySBF := ChangeQuery(cQrySBF)
			EndIf
			aBind := {}
			AADD(aBind,xFilial("SBF"))
			AADD(aBind,Space(1))
			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySBF,aBind),cAliasSBF)

			nMax := (cAliasSBF)->MAXRECNO
			nMin := (cAliasSBF)->MINRECNO

			(cAliasSBF)->(dbCloseArea())
			dbSelectArea("SBF")
			cQuery := "UPDATE "
			cQuery += RetSqlName("SBF")+" "
			cQuery += "SET BF_EMPENHO = 0, "
			cQuery += "BF_EMPEN2 = 0, "
			cQuery += "BF_QEMPPRE = 0, "
			cQuery += "BF_QEPRE2 = 0 "
			cQuery += "WHERE BF_FILIAL='"+xFilial("SBF")+"' AND "
			cQuery += "D_E_L_E_T_=' ' AND "
			If l215Regua
				oObj:SetRegua1(Int(nMax/nStep)+1)
			EndIf
			For nX := nMin To nMax+nStep STEP nStep
				cChave := "R_E_C_N_O_>="+Str(nX,10,0)+" AND R_E_C_N_O_<="+Str(nX+nStep,10,0)+""
				TcSqlExec(cQuery+cChave)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			Next nX
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³A tabela eh fechada para restaurar o buffer da aplicacao³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			aFilTabs[TabelaSBF][2] := cFilialLida

			dbSelectArea("SBF")
			dbCloseArea()
			ChkFile("SBF",.T.)
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados da Solicitacao de Compra         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		a215AtuSC1(aFilTabs,cFirst,lBat,oObj)

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		cFilialLida := xFilial("SC7")

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados do Pedido de Compra              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSC7][2]) .Or. (cFilAnt == cFirst)
			SX2->(MsSeek("SC7"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			SC7->(dbSetOrder(1))
			cAliasSC7 := "SC7MA215PROC"

			If cQrySC7 == nil
				cQrySC7 := "SELECT C7_FILIAL,C7_PRODUTO,C7_LOCAL,C7_QUJE,C7_QUANT,C7_RESIDUO,C7_FILENT,C7_TPOP,C7_QTSEGUM,"
				cQrySC7 += " C7_FORNECE,C7_LOJA,C7_NUM,C7_ITEM,C7_OP,C7_SEQMRP,C7_DATPRF,C7_TIPO,C7_NUMCOT,C7_TES,C7_ESTOQUE,SB1.B1_FILIAL "
				cQrySC7 += " FROM "+RetSqlName("SC7")+" SC7,"
				cQrySC7 += RetSqlName("SB1")+" SB1 "
				cQrySC7 += "WHERE SC7.C7_FILIAL= ? AND "
				cQrySC7 += "SC7.C7_FILENT IN(?,?) AND "
				cQrySC7 += "SC7.C7_QUJE < C7_QUANT AND "
				cQrySC7 += "SC7.C7_RESIDUO = ? AND "
				cQrySC7 += "SC7.D_E_L_E_T_ = ? AND "
				cQrySC7 += "SB1.B1_FILIAL  = ? AND "
				cQrySC7 += "SB1.B1_COD=SC7.C7_PRODUTO AND "
				cQrySC7 += "SB1.D_E_L_E_T_ = ?"
				cQrySC7 += "UNION ALL "
				cQrySC7 += "SELECT C7_FILIAL,C7_PRODUTO,C7_LOCAL,C7_QUJE,C7_QUANT,C7_RESIDUO,C7_FILENT,C7_TPOP,C7_QTSEGUM, "
				cQrySC7 += " C7_FORNECE,C7_LOJA,C7_NUM,C7_ITEM,C7_OP,C7_SEQMRP,C7_DATPRF,C7_TIPO,C7_NUMCOT,C7_TES,C7_ESTOQUE,SB1.B1_FILIAL "
				cQrySC7 += "FROM "+RetSqlName("SC7")+" SC7,"
				cQrySC7 += RetSqlName("SB1")+" SB1 "
				cQrySC7 += "WHERE SC7.C7_FILENT= ? AND "
				cQrySC7 += "SC7.C7_FILIAL<> ? AND "
				cQrySC7 += "SC7.C7_QUJE < C7_QUANT AND "
				cQrySC7 += "SC7.C7_RESIDUO = ? AND "
				cQrySC7 += "SC7.D_E_L_E_T_ = ? AND "
				cQrySC7 += "SB1.B1_FILIAL=? AND "
				cQrySC7 += "SB1.B1_COD=SC7.C7_PRODUTO AND "
				cQrySC7 += "SB1.D_E_L_E_T_= ? "
				cQrySC7 += "ORDER BY 1,2,3 "
				cQrySC7 := ChangeQuery(cQrySC7)
			EndIf
			aBind := {}
			AADD(aBind,xFilial("SC7"))
			AADD(aBind,Space(Len(SC7->C7_FILENT)))
			AADD(aBind,xFilial("SC7"))
			AADD(aBind,Space(Len(SC7->C7_RESIDUO)))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial("SB1"))
			AADD(aBind,Space(1))
			//- union all
			AADD(aBind,xFilial("SC7"))
			AADD(aBind,xFilial("SC7"))
			AADD(aBind,Space(Len(SC7->C7_RESIDUO)))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial("SB1"))
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySC7,aBind),cAliasSC7,.T.,.T.)
			
			M215Comp('SC7',cAliasSC7)

			If l215Regua
				oObj:SetRegua1(SC7->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
			While !Eof()
				lContinua := .T.
				If lContinua
					MaAvalPC(cAliasSC7,1,,.T.)
				EndIf
				a215Skip(cAliasSC7)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo

			aFilTabs[TabelaSC7][2] := cFilialLida

			(cAliasSC7)->(dbCloseArea())
			dbSelectArea("SC7")
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		// Atualiza os dados acumulados de compras com entrega futura
		If lCompraFut
			A103Refaz(cFilAnt, cFirst, lBat, oObj, l215Regua, cFilProc)
			If l215Regua
				oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
			EndIf
		EndIf

		//³Atualiza os dados acumulados das Ordens de Producao           ³
		a215AtuOP(aFilTabs,cFirst,lBat,oObj)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados dos empenhos da OP               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		a215OPEmp(aFilTabs,cFirst,lBat,oObj)

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Varre o SDD e refaz os bloqueios existentes                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cFilialLida := xFilial("SDD")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSDD][2]) .Or. (cFilAnt == cFirst)
			SX2->(MsSeek("SDD"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			
			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf
			
			SDD->(dbSetOrder(1))
			If cQrySDD == nil
				cQrySDD := "SELECT DD_PRODUTO, DD_SALDO, DD_NUMLOTE,DD_NUMSERI,DD_LOTECTL,DD_IDSDD,"
				cQrySDD += " DD_LOCALIZ, DD_LOCAL, DD_DOC, SDD.R_E_C_N_O_ RECSDD "
				cQrySDD += " FROM "+RetSqlName("SDD")+" SDD"
				cQrySDD += " INNER JOIN "+RetSqlName("SB1")+" SB1"
				cQrySDD += " ON B1_FILIAL = ?"
				cQrySDD += " AND B1_COD = DD_PRODUTO "
				cQrySDD += " AND SB1.D_E_L_E_T_ = ?"
				cQrySDD += " WHERE DD_FILIAL = ?"
				cQrySDD += " AND DD_SALDO > ?"
				cQrySDD += " AND SDD.D_E_L_E_T_ = ?"
				cQrySDD := ChangeQuery(cQrySDD)
			EndIf
			aBind := {}
			AADD(aBind,xFilial("SB1"))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial("SDD"))
			AADD(aBind,CValToChar(0))
			AADD(aBind,Space(1))

			cAliasSDD := 'SDDMA215PROC'
			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySDD,aBind),cAliasSDD,.T.,.T.)

			M215Comp('SDD',cAliasSDD)
			
			If l215Regua
				oObj:SetRegua1(SDD->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
			While (cAliasSDD)->(!Eof())
				cQuery := "UPDATE "+RetSqlName("SDD")
				cQuery += " SET DD_QUANT = "+ValToSQL((cAliasSDD)->DD_SALDO)
				cQuery += " WHERE R_E_C_N_O_ = "+ValToSQL((cAliasSDD)->RECSDD)
				If TcSqlExec(cQuery) != 0
					UserException(TcSqlError())
				EndIf
				SDD->(dbGoTo((cAliasSDD)->RECSDD))

					aTravas  := {}

					If Localiza((cAliasSDD)->DD_PRODUTO) 
						cQrySDDSDC := "SELECT DC_PRODUTO,DC_LOCAL,DC_QUANT,DC_QTSEGUM,DC_LOTECTL,"
						cQrySDDSDC += " DC_NUMLOTE,DC_LOCALIZ,DC_NUMSERI,DC_PEDIDO,DC_IDSDD"
						cQrySDDSDC += " FROM "+RetSqlName("SDC")
						cQrySDDSDC += " WHERE DC_FILIAL = ?"
						cQrySDDSDC += " AND DC_PRODUTO  = ?"
						cQrySDDSDC += " AND DC_LOCAL    = ?"
						cQrySDDSDC += " AND DC_LOTECTL  = ?"
						If !Empty((cAliasSDD)->DD_NUMLOTE)
							cQrySDDSDC += " AND DC_NUMLOTE  = ?"
						EndIf
						If !Empty((cAliasSDD)->DD_LOCALIZ) 
							cQrySDDSDC += " AND DC_LOCALIZ  = ?"
						EndIf
						If !Empty((cAliasSDD)->DD_NUMSERI)
							cQrySDDSDC += " AND DC_NUMSERI  = ?"
						EndIf
						cQrySDDSDC += " AND DC_ORIGEM   = ?"
						cQrySDDSDC += " AND D_E_L_E_T_  = ?"

						cMD5 := MD5(cQrySDDSDC)
						If (nPosPrepared := Ascan(__aPrepared,{|x| x[2] == cMD5})) == 0
							Aadd(__aPrepared,{ChangeQuery(cQrySDDSDC),cMD5})
							nPosPrepared := Len(__aPrepared)
						Endif						
						aBind := {}
						AADD(aBind,xFilial("SDC"))
						AADD(aBind,(cAliasSDD)->DD_PRODUTO)
						AADD(aBind,(cAliasSDD)->DD_LOCAL)
						AADD(aBind,(cAliasSDD)->DD_LOTECTL)
						If !Empty((cAliasSDD)->DD_NUMLOTE)
							AADD(aBind,(cAliasSDD)->DD_NUMLOTE)
						EndIf
						If !Empty((cAliasSDD)->DD_LOCALIZ) 
							AADD(aBind,(cAliasSDD)->DD_LOCALIZ)
						EndIf
						If !Empty((cAliasSDD)->DD_NUMSERI)
							AADD(aBind,(cAliasSDD)->DD_NUMSERI)
						EndIf
						AADD(aBind,'SDD')
						AADD(aBind,Space(1))	

						cAliasSDC := 'SDCMA215PROC'	

						dbUseArea(.T.,"TOPCONN",TcGenQry2(,,__aPrepared[nPosPrepared][1],aBind),cAliasSDC,.T.,.T.)
						
						M215Comp('SDC',cAliasSDC)
					
						While (cAliasSDC)->(!Eof())	
							lGravaEmp := .F.
							If !Empty((cAliasSDD)->DD_IDSDD) .And. !Empty((cAliasSDC)->DC_IDSDD)
								If AllTrim((cAliasSDD)->DD_IDSDD) == AllTrim((cAliasSDC)->DC_IDSDD)
									lGravaEmp := .T.
								Else
									lGravaEmp := .F.
								EndIf
							ElseIf Len(AllTrim((cAliasSDD)->DD_DOC)) == Len(AllTrim((cAliasSDC)->DC_PEDIDO))
								If AllTrim((cAliasSDD)->DD_DOC) == AllTrim((cAliasSDC)->DC_PEDIDO)
									lGravaEmp := .T.
								Else
									lGravaEmp := .F.
								EndIf
							ElseIf Len(AllTrim((cAliasSDD)->DD_DOC)) <> Len(AllTrim((cAliasSDC)->DC_PEDIDO))
								lGravaEmp := .T.
							EndIf

							If lGravaEmp
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ Atualiza arquivo de empenhos               ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								GravaEmp(	(cAliasSDC)->DC_PRODUTO,;
											(cAliasSDC)->DC_LOCAL,;
											(cAliasSDC)->DC_QUANT,;
											(cAliasSDC)->DC_QTSEGUM,;
											(cAliasSDC)->DC_LOTECTL,;
											(cAliasSDC)->DC_NUMLOTE,;
											(cAliasSDC)->DC_LOCALIZ,;
											(cAliasSDC)->DC_NUMSERI,;
											Nil,;
											Nil,;
											(cAliasSDC)->DC_PEDIDO,;
											Nil,;
											"SDD",;
											Nil,;
											Nil,;
											Nil,;
											.F.,;
											.F.,;
											.T.,;
											.F.,;
											.T.,;
											.T.,;
											.F.)
							EndIf
							a215Skip((cAliasSDC))
						EndDo
						(cAliasSDC)->(dbCloseArea())
					Else
						ProcSDD(.F.)
					EndIf

				a215Skip(cAliasSDD)

				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo
			(cAliasSDD)->(dbCloseArea())
			aFilTabs[TabelaSDD][2] := cFilialLida

		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		cFilialLida	:= xFilial("SCQ")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSCQ][2]) .Or. (cFilAnt == cFirst)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Corre SCQ para Atualizar B2_QEMP  em Produtos SB2.           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SX2->(MsSeek("SCQ"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			
			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf
			
			If cQrySCQ == nil
				cQrySCQ := "SELECT CQ_PRODUTO,CQ_LOCAL,SUM(CQ_QTDISP) CQ_QTDISP FROM "
				cQrySCQ += RetSqlName("SCQ")+ " SCQ"
				cQrySCQ += " INNER JOIN "+RetSqlName("SB1")+" SB1"
				cQrySCQ += " ON B1_FILIAL = ?"
				cQrySCQ += " AND B1_COD = CQ_PRODUTO "
				cQrySCQ += " AND SB1.D_E_L_E_T_ = ?"
				cQrySCQ += " WHERE CQ_FILIAL = ?"
				cQrySCQ += " AND CQ_QTDISP   > ?"
				cQrySCQ += " AND CQ_NUMREQ = ? "
				cQrySCQ += " AND SCQ.D_E_L_E_T_  = ?"
				cQrySCQ += " GROUP BY CQ_PRODUTO,CQ_LOCAL"
			EndIf
			aBind := {}
			AADD(aBind,xFilial("SB1"))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial("SCQ"))
			AADD(aBind,CValToChar(0))
			AADD(aBind,Space(TamSX3("CQ_NUMREQ")[1]))
			AADD(aBind,Space(1))

			cAliasSCQ := 'SCQMA215PROC'

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySCQ,aBind),cAliasSCQ,.T.,.T.)

			M215Comp('SCQ',cAliasSCQ)

			If l215Regua
				oObj:SetRegua1(SCQ->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
			While (cAliasSCQ)->(!Eof())
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualizar Qtde Empenhada  em Produtos SB2.          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If SB2->(!MsSeek(xFilial('SB2')+(cAliasSCQ)->CQ_PRODUTO+(cAliasSCQ)->CQ_LOCAL))
					CriaSB2((cAliasSCQ)->CQ_PRODUTO,(cAliasSCQ)->CQ_LOCAL)
				EndIf

						RecLock("SB2",.F.)
					SB2->B2_QEMPSA += (cAliasSCQ)->CQ_QTDISP
				SB2->(MsUnLock())

				a215Skip(cAliasSCQ)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo
			(cAliasSCQ)->(dbCloseArea())

			aFilTabs[TabelaSCQ][2] := cFilialLida

		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		If (!Empty(xFilial("DH1")) .Or. cFilAnt == cFirst ) //-- Corre DH1 para Atualizar B2_RESERV  em Produtos SB2.
			SX2->(MsSeek("DH1"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			SB8->(dbSetOrder(3))
			cAliasDH1 := 'DH1MA215PROC'

			If cQryDH1 == nil
				cQryDH1 := "SELECT DH1_PRODUT,DH1_LOCAL,DH1_QUANT,DH1_LOTECT,DH1_NUMLOT, DH1_QTSEGU"
				cQryDH1 += " FROM "+RetSqlName("DH1")+ " DH1 "
				cQryDH1 += " INNER JOIN "+RetSqlName("SB1")+" SB1 "
				cQryDH1 += " ON B1_FILIAL = ?"
				cQryDH1 += " AND B1_COD = DH1_PRODUT"
				cQryDH1 += " AND SB1.D_E_L_E_T_ = ?"
				cQryDH1 += " WHERE DH1_FILIAL = ?"
				cQryDH1 += " AND DH1_TM > ?"
				cQryDH1 += " AND DH1_QUANT > ?"
				cQryDH1 += " AND DH1_STATUS = ?"
				cQryDH1 += " AND DH1.D_E_L_E_T_ = ?"
				cQryDH1 := ChangeQuery(cQryDH1)
			Endif
			aBind := {}
			AADD(aBind,xFilial("SB1"))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial("DH1"))
			AADD(aBind,'500')
			AADD(aBind,CValToChar(0))
			AADD(aBind,'1')
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryDH1,aBind),cAliasDH1,.T.,.T.)

			M215Comp('DH1',cAliasDH1)

			If l215Regua
				oObj:SetRegua1(DH1->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão

			While (cAliasDH1)->(!Eof()) //--  Atualizar Qtde Empenhada  em Produtos SB2.
				If SB2->(!MsSeek(xFilial("SB2")+(cAliasDH1)->DH1_PRODUT+(cAliasDH1)->DH1_LOCAL))
					CriaSB2((cAliasDH1)->DH1_PRODUT,(cAliasDH1)->DH1_LOCAL)
				EndIf
				RecLock("SB2",.F.)
				SB2->B2_RESERVA += (cAliasDH1)->DH1_QUANT
				SB2->(MsUnLock())
				//-- Caso use rastreabilidade, GRAVA a quantidade do DH1
				//-- no SB8 para que o Saldo por Sub-Lote fique bloqueado
				If Rastro((cAliasDH1)->DH1_PRODUT)
					If Rastro((cAliasDH1)->DH1_PRODUT,"S")
						cSeek:=xFilial("SB8")+(cAliasDH1)->DH1_PRODUT+(cAliasDH1)->DH1_LOCAL+(cAliasDH1)->DH1_LOTECT+(cAliasDH1)->DH1_NUMLOT
					Else
						cSeek:=xFilial("SB8")+(cAliasDH1)->DH1_PRODUT+(cAliasDH1)->DH1_LOCAL+(cAliasDH1)->DH1_LOTECT
					EndIf
					If SB8->(MsSeek(cSeek))
						RecLock("SB8",.F.)
						SB8->B8_EMPENHO += (cAliasDH1)->DH1_QUANT
						SB8->B8_EMPENH2 += (cAliasDH1)->DH1_QTSEGU
						MsUnlock()
					EndIf
				EndIf				
				a215Skip(cAliasDH1)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo
			(cAliasDH1)->(dbCloseArea())
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		If AliasIndic("D0G")
			If (!Empty(xFilial("D0G")) .Or. cFilAnt == cFirst ) //-- Corre D0G para Atualizar B2_QACLASS em Produtos SB2.
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ A partir do D0G atualiza B2_QACLASS e B8_QACLASS             ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				SX2->(MsSeek("D0G"))
				cMensagem := AllTrim(SX2->(X2Nome()))
				cMensagem := Lower(cMensagem)
				cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
				
				If l215Painel
					A215Painel(oObj, cFilProc, cMensagem)
				EndIf

				SB8->(dbSetOrder(3))

				If cQryD0G == nil
					cQryD0G := "SELECT D0G_PRODUT,D0G_LOCAL,D0G_LOTECT,D0G_NUMLOT, D0G_SALDO, D0G_QTSEUM "
					cQryD0G += " FROM " + RetSqlName("D0G") + " D0G "
					cQryD0G += " INNER JOIN "+RetSqlName("SB1")+" SB1 "
					cQryD0G += " ON SB1.B1_FILIAL = ?"
					cQryD0G += " AND SB1.B1_COD = D0G_PRODUT"
					cQryD0G += " AND SB1.D_E_L_E_T_ = ?"
					cQryD0G += " WHERE D0G.D0G_FILIAL = ?"
					cQryD0G += " AND D0G.D0G_SALDO > ?"
					cQryD0G += " AND D0G.D_E_L_E_T_ = ?"
					cQryD0G := ChangeQuery(cQryD0G)
				EndIf
				aBind := {}
				AADD(aBind,xFilial('SB1'))
				AADD(aBind,' ')
				AADD(aBind,xFilial('D0G'))
				AADD(aBind,cValToChar(0))
				AADD(aBind,Space(1))
				cAliasD0G := 'D0GMA215PROC'

				dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryD0G,aBind),cAliasD0G,.T.,.T.)

				M215Comp('D0G',cAliasD0G)
				
				If l215Regua
					oObj:SetRegua1(D0G->(LastRec()))
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
				
				While (cAliasD0G)->(!Eof())
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualizar Qtde Prevista de Produtos SB2.            ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					IF SB2->(!MsSeek(xFilial('SB2')+(cAliasD0G)->D0G_PRODUT+(cAliasD0G)->D0G_LOCAL))
						CriaSB2((cAliasD0G)->D0G_PRODUT,(cAliasD0G)->D0G_LOCAL)
					EndIf
					Reclock("SB2",.F.)
					SB2->B2_QACLASS += (cAliasD0G)->D0G_SALDO
					SB2->(MsUnlock())
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Caso use rastreabilidade, GRAVA a quantidade do D0G   ³
					//³ no SB8 para que o Saldo por Sub-Lote fique bloqueado  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If Rastro((cAliasD0G)->D0G_PRODUT)
						If Rastro((cAliasD0G)->D0G_PRODUT,"S")
							cSeek:=xFilial('SB8')+(cAliasD0G)->D0G_PRODUT+(cAliasD0G)->D0G_LOCAL+(cAliasD0G)->D0G_LOTECT+(cAliasD0G)->D0G_NUMLOT
							cCompara:="B8_FILIAL+B8_PRODUTO+B8_LOCAL+B8_LOTECTL+B8_NUMLOTE"
						Else
							cSeek:=xFilial('SB8')+(cAliasD0G)->D0G_PRODUT+(cAliasD0G)->D0G_LOCAL+(cAliasD0G)->D0G_LOTECT
							cCompara:="B8_FILIAL+B8_PRODUTO+B8_LOCAL+B8_LOTECTL"
						EndIf
						SB8->(dbSeek(cSeek))
						nEmpenho:=(cAliasD0G)->D0G_SALDO
						nEmpenh2:=(cAliasD0G)->D0G_QTSEUM
						While SB8->(!Eof()) .And. nEmpenho > 0 .And. cSeek == SB8->(&(cCompara))
							nBaixaEmp:=Min(nEmpenho,SB8Saldo(Nil,.T.,Nil,Nil,Nil,lEmpPrev))
							nBaixaEm2:=Min(nEmpenh2,SB8Saldo(Nil,.T.,Nil,.T.,Nil,lEmpPrev))
							RecLock("SB8",.F.)
							SB8->B8_QACLASS += nBaixaEmp
							SB8->B8_QACLAS2 += nBaixaEm2
							nEmpenho -= nBaixaEmp
							nEmpenh2 -= nBaixaEm2
							SB8->(MsUnlock())
							SB8->(a215Skip())
						EndDo
					EndIf					
					a215Skip(cAliasD0G)
					If l215Regua
						oObj:IncRegua1(cMensagem)
					EndIf
					PulseLife(oObj) //- pulso de conexão
				EndDo
				(cAliasD0G)->(dbCloseArea())
			EndIf
			If l215Regua
				oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
			EndIf
		EndIf

		cFilialLida := xFilial("SDA")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSDA][2]) .Or. (cFilAnt == cFirst)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ A partir do SDA atualiza B2_QACLASS e B8_QACLASS             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SX2->(MsSeek("SDA"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			SB8->(dbSetOrder(3))

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			If cQrySDA == nil
				cQrySDA := "SELECT DA_PRODUTO, DA_LOCAL, DA_SALDO, SDA.R_E_C_N_O_ RECSDA,"
				cQrySDA += " DA_LOTECTL, DA_NUMLOTE, DA_QTSEGUM FROM "
				cQrySDA += RetSqlName("SDA")+ " SDA "
				cQrySDA += " INNER JOIN "+REtSqlName("SB1")+" SB1"
				cQrySDA += " ON B1_FILIAL = ?"
				cQrySDA += " AND SB1.B1_COD = SDA.DA_PRODUTO"
				cQrySDA += " AND SB1.D_E_L_E_T_ = ?"
				cQrySDA += " WHERE DA_FILIAL    = ?"
				cQrySDA += " AND DA_SALDO       > ? "
				cQrySDA += " AND SDA.D_E_L_E_T_ = ?"
				cQrySDA := ChangeQuery(cQrySDA)
			EndIf
			aBind := {}
			AADD(aBind,xFilial('SB1'))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial('SDA'))
			AADD(aBind,cValToChar(0))
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySDA,aBind),'QSDAMA215',.T.,.T.)

			If l215Regua
				oObj:SetRegua1(SDA->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
			While QSDAMA215->(!Eof())
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualizar Qtde Prevista de Produtos SB2.            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !SB2->(MsSeek(xFilial('SB2')+QSDAMA215->DA_PRODUTO+QSDAMA215->DA_LOCAL))
					CriaSB2(QSDAMA215->DA_PRODUTO,QSDAMA215->DA_LOCAL)
				EndIf

					Reclock("SB2",.F.)
					SB2->B2_QACLASS +=  QSDAMA215->DA_SALDO
					SB2->(MsUnlock())
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Caso use rastreabilidade, GRAVA a quantidade do SDA   ³
					//³ no SB8 para que o Saldo por Sub-Lote fique bloqueado  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If Rastro(QSDAMA215->DA_PRODUTO)
						If Rastro(QSDAMA215->DA_PRODUTO,"S")
							cSeek:=xFilial('SB8')+QSDAMA215->DA_PRODUTO+QSDAMA215->DA_LOCAL+QSDAMA215->DA_LOTECTL+QSDAMA215->DA_NUMLOTE
							cCompara:="B8_FILIAL+B8_PRODUTO+B8_LOCAL+B8_LOTECTL+B8_NUMLOTE"
						Else
							cSeek:=xFilial('SB8')+QSDAMA215->DA_PRODUTO+QSDAMA215->DA_LOCAL+QSDAMA215->DA_LOTECTL
							cCompara:="B8_FILIAL+B8_PRODUTO+B8_LOCAL+B8_LOTECTL"
						EndIf
						SB8->(dbSeek(cSeek))
					nEmpenho:=QSDAMA215->DA_SALDO
					nEmpenh2:=QSDAMA215->DA_QTSEGUM
					While SB8->(!Eof()) .And. nEmpenho > 0 .And. cSeek == SB8->(&(cCompara))
							nBaixaEmp:=Min(nEmpenho,SB8Saldo(Nil,.T.,Nil,Nil,Nil,lEmpPrev))
							nBaixaEm2:=Min(nEmpenh2,SB8Saldo(Nil,.T.,Nil,.T.,Nil,lEmpPrev))
							RecLock("SB8",.F.)
							Replace B8_QACLASS With B8_QACLASS + nBaixaEmp
							Replace B8_QACLAS2 With B8_QACLAS2 + nBaixaEm2
							nEmpenho -= nBaixaEmp
							nEmpenh2 -= nBaixaEm2
							MsUnlock()
							a215Skip()
						EndDo
					EndIf
				a215Skip('QSDAMA215')
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo
			QSDAMA215->(dbCloseArea())

			aFilTabs[TabelaSDA][2] := cFilialLida

		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		cFilialLida := xFilial("SD1")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSD1][2]) .Or. (cFilAnt == cFirst)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Atualiza os dados acumulados da Pre-Nota de Entrada           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SX2->(MsSeek("SD1"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			cAliasSD1 := "SD1MA215PROC"

			If cQrySD1 == nil
				cQrySD1 := "SELECT MIN(R_E_C_N_O_) MINRECNO,"
				cQrySD1 += "MAX(R_E_C_N_O_) MAXRECNO "
				cQrySD1 += "FROM "+RetSqlName("SD1")+" SD1 "
				cQrySD1 += "WHERE SD1.D1_FILIAL= ? AND "
				cQrySD1 += "SD1.D1_IDENTB6<>  ? AND "
				cQrySD1 += "( SD1.D1_QTDEDEV > ? OR SD1.D1_VALDEV > ? ) AND "
				cQrySD1 += "SD1.D_E_L_E_T_= ? "
				cQrySD1 := ChangeQuery(cQrySD1)
			EndIf
			aBind := {}
			AADD(aBind,xFilial("SD1"))
			AADD(aBind,Space(Len(SD1->D1_IDENTB6)))
			AADD(aBind,cValToChar(0))
			AADD(aBind,cValToChar(0))
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySD1,aBind),cAliasSD1)

			nMax := (cAliasSD1)->MAXRECNO
			nMin := (cAliasSD1)->MINRECNO

			(cAliasSD1)->(dbCloseArea())

     		cQuery := "UPDATE "
			cQuery += RetSqlName("SD1")+" "
			cQuery += "SET D1_QTDEDEV = 0, D1_VALDEV = 0 "
			cQuery += "WHERE D1_FILIAL='"+xFilial("SD1")+"' AND "
			cQuery += "D1_IDENTB6<>'"+Space(Len(SD1->D1_IDENTB6))+"' AND "
			cQuery += "( D1_QTDEDEV > 0 OR D1_VALDEV > 0 ) AND "
			cQuery += "D_E_L_E_T_=' ' AND "
			For nX := nMin To nMax+nStep STEP nStep
				cChave := "R_E_C_N_O_>="+Str(nX,10,0)+" AND R_E_C_N_O_<="+Str(nX+nStep,10,0)+""
				TcSqlExec(cQuery+cChave)
			Next nX
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³A tabela eh fechada para restaurar o buffer da aplicacao³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea("SD1")
			dbCloseArea()
			ChkFile("SD1",.T.)

			cAliasSD1 := "SD1MA215PROC"
			SB2->(dbSetOrder(1))

			aBind  := {}
			If lMA215SD1
				cQuery := "SELECT SD1.D1_FILIAL, D1_COD, D1_LOCAL, D1_QUANT "
				cQuery += "FROM "+RetSqlName("SD1")+" SD1,"
				cQuery += RetSqlName("SB1")+" SB1 "
				cQuery += "WHERE SD1.D1_FILIAL='"+xFilial("SD1")+"' AND "
				cQuery += "SD1.D1_TES = '"+Space(Len(SD1->D1_TES))+"' AND "
				cQuery += "SD1.D_E_L_E_T_=' ' AND "
				cQuery += "SB1.B1_FILIAL='"+xFilial("SB1")+"' AND "
				cQuery += "SB1.B1_COD=SD1.D1_COD AND "
				cQuery += "SB1.D_E_L_E_T_=' ' "
				cQuery := ExecBlock("MA215SD1",.F.,.F.,cQuery)
				cQuery += " ORDER BY D1_FILIAL,D1_COD,D1_LOCAL"
				cQuery := ChangeQuery(cQuery)
			Else
				If cQrySD12 == nil
					cQrySD12 := "SELECT SD1.D1_FILIAL, D1_COD, D1_LOCAL,SUM(D1_QUANT) D1_QUANT "
					cQrySD12 += "FROM "+RetSqlName("SD1")+" SD1 "
					cQrySD12 += "INNER JOIN "+RetSqlName("SB1")+" SB1 "
					cQrySD12 += "ON SB1.B1_FILIAL  = ? AND "
					cQrySD12 += "SB1.B1_COD         = SD1.D1_COD AND "
					cQrySD12 += "SB1.D_E_L_E_T_     = ? "
					cQrySD12 += "WHERE SD1.D1_FILIAL= ? AND "
					cQrySD12 += "SD1.D1_TES         = ? AND "
					cQrySD12 += "SD1.D_E_L_E_T_     = ? "
					cQrySD12 += " GROUP BY D1_FILIAL, D1_COD, D1_LOCAL"
					cQrySD12 := ChangeQuery(cQrySD12)
				EndIf
				AADD(aBind,xFilial("SB1"))
				AADD(aBind,Space(1))
				AADD(aBind,xFilial("SD1"))
				AADD(aBind,Space(Len(SD1->D1_TES)))
				AADD(aBind,Space(1))
				cQuery := cQrySD12
			EndIf
			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQuery,aBind),cAliasSD1,.T.,.T.)

			If l215Regua
				oObj:SetRegua1(SD1->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão

			While (cAliasSD1)->(!Eof()) .And. (cAliasSD1)->D1_FILIAL == xFilial("SD1")
				lContinua := .T.
				If lContinua
					If SB2->(!MsSeek(xFilial("SB2")+(cAliasSD1)->D1_COD+(cAliasSD1)->D1_LOCAL))
						CriaSB2((cAliasSD1)->D1_COD,(cAliasSD1)->D1_LOCAL)
					EndIf
					RecLock("SB2",.F.)
					SB2->B2_NAOCLAS += (cAliasSD1)->D1_QUANT
					SB2->(MsUnLock())
				EndIf
				a215Skip(cAliasSD1)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo

			aFilTabs[TabelaSD1][2] := cFilialLida

			(cAliasSD1)->(dbCloseArea())
			dbSelectArea("SD1")
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		cFilialLida := xFilial("SC0")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSC0][2]) .Or. (cFilAnt == cFirst)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Atualiza os dados acumulados das Reserva de Faturamento       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SX2->(MsSeek("SC0"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			dbSelectArea("SC0")
			dbSetOrder(1)
			
			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf
			
			cAliasSC0 := "SC0MA215PROC"

			cQuery := "SELECT C0_PRODUTO,C0_LOCAL,C0_LOTECTL,C0_NUMLOTE,C0_LOCALIZ,C0_QUANT, C0_QTDPED,"
			cQuery += " C0_NUMSERI,C0_NUM,SB1.B1_FILIAL "
			cQuery += "FROM "+RetSqlName("SC0")+" SC0,"
			cQuery += RetSqlName("SB1")+" SB1 "
			cQuery += "WHERE SC0.C0_FILIAL='"+xFilial("SC0")+"' AND "
			If !HasTemplate("OTC")
				cQuery += "SC0.C0_QUANT > 0 AND "
			Endif
			cQuery += "SC0.C0_TIPO<>'LJ' AND "
			cQuery += "SC0.D_E_L_E_T_=' ' AND "
			cQuery += "SB1.B1_FILIAL='"+xFilial("SB1")+"' AND "
			cQuery += "SB1.B1_COD=SC0.C0_PRODUTO AND "
			cQuery += "SB1.D_E_L_E_T_=' ' "
			cQuery += "ORDER BY C0_FILIAL,C0_PRODUTO,C0_LOCAL "

			cQuery := ChangeQuery(cQuery)

			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSC0,.T.,.T.)
			
			M215Comp('SC0',cAliasSC0)

			If l215Regua
				oObj:SetRegua1(SC0->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
			
			While (cAliasSC0)->(!Eof())
				Ma215Res(cAliasSC0, (cAliasSC0)->C0_QUANT, (cAliasSC0)->C0_QTDPED)

				a215Skip(cAliasSC0)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo

			aFilTabs[TabelaSC0][2] := cFilialLida

			(cAliasSC0)->(dbCloseArea())
			dbSelectArea("SC0")
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Atualiza os dados acumulados do PV e seus anexos              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		a215AtuSC6(aFilTabs,cFirst,lBat,oObj)

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados do PODER de 3 e EM 3.            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cFilialLida := xFilial("SB6")

		If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSB6][2]) .Or. (cFilAnt == cFirst)
			SX2->(MsSeek("SB6"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
			dbSelectArea("SB6")
			dbSetOrder(1)

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			cAliasSB6 := "SB6MA215PROC"

			If cQrySB6 == nil
				cQrySB6 := "SELECT B6_FILIAL, B6_PRODUTO,B6_LOCAL, B6_QUANT, B6_TES, B6_ESTOQUE,B6_IDENT "
				cQrySB6 += "FROM "+RetSqlName("SB6")+" SB6 "
				cQrySB6 += "INNER JOIN " +RetSqlName("SB1")+ " SB1 "
				cQrySB6 += "ON SB1.B1_FILIAL= ? AND "
				cQrySB6 += "SB1.B1_COD=SB6.B6_PRODUTO AND "
				cQrySB6 += "SB1.D_E_L_E_T_= ? "
				cQrySB6 += "WHERE SB6.B6_FILIAL= ? AND "
				cQrySB6 += "SB6.B6_QUANT > ? AND "
				cQrySB6 += "SB6.D_E_L_E_T_= ? "
				cQrySB6 += "ORDER BY B6_FILIAL,B6_PRODUTO,B6_LOCAL "
				cQrySB6 := ChangeQuery(cQrySB6)
			EndIf

			aBind := {}
			AADD(aBind,xFilial("SB1"))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial("SB6"))
			AADD(aBind,cValToChar(0))
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySB6,aBind),cAliasSB6,.T.,.T.)

			M215Comp('SB6',cAliasSB6)

			If l215Regua
				oObj:SetRegua1(SB6->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão

			cSB6Filial := xFilial("SB6")
			cSF4Filial := xFilial("SF4")
			cSB2Filial := xFilial("SB2")
			SF4->(dbSetOrder(1))
			SB6->(dbSetOrder(3))
			SB2->(dbSetOrder(1))

			While (cAliasSB6)->(!Eof())
				lContinua := .T.
				cLocOriSB6:= (cAliasSB6)->B6_LOCAL

				SF4->(MsSeek(cSF4Filial+(cAliasSB6)->B6_TES))

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Quando for devolucao de material que estava em terceiros,     ³
				//|posicionar sempre no local de origem da remessa. 			 |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If SF4->F4_PODER3 == "D" .And. (cAliasSB6)->B6_TES < "501"
					If SB6->(MsSeek(cSB6Filial+(cAliasSB6)->B6_IDENT+(cAliasSB6)->B6_PRODUTO+"R"))
						cLocOriSB6 := SB6->B6_LOCAL //Local de Origem
					EndIf
				EndIf

				If SB2->(!MsSeek(cSB2Filial+(cAliasSB6)->B6_PRODUTO+(cAliasSB6)->B6_LOCAL))
					CriaSB2((cAliasSB6)->B6_PRODUTO,(cAliasSB6)->B6_LOCAL)
				EndIf
				RecLock("SB2",.F.)

				cEstoque := (cAliasSB6)->B6_ESTOQUE

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atualiza os Campos B2_QTER, B2_QNPT, B2_QTNP.                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				IF SF4->F4_CODIGO <= "500"   // Documentos de Entrada.
					If ( SF4->F4_PODER3 $ "DR" )
						If ( SF4->F4_PODER3 == "D" ) // Devolucoes.
							If IIf(Empty(cEstoque),SF4->F4_ESTOQUE,cEstoque)=="N"
								SB2->B2_QTER -= (cAliasSB6)->B6_QUANT
							Else
								SB2->B2_QNPT -= (cAliasSB6)->B6_QUANT
							EndIf
						Else  // Remessas.
							If IIf(Empty(cEstoque),SF4->F4_ESTOQUE,cEstoque)=="N"
								SB2->B2_QTER += (cAliasSB6)->B6_QUANT
							Else
								SB2->B2_QTNP += (cAliasSB6)->B6_QUANT
							EndIf
						EndIf
					EndIf
				Else  // Doucmentos de Saida.
					If ( SF4->F4_PODER3 $ "DR" )
						If ( SF4->F4_PODER3 == "D" )  // Devolucoes.
							If IIf(Empty(cEstoque),SF4->F4_ESTOQUE,cEstoque)=="N"
								SB2->B2_QTER -= (cAliasSB6)->B6_QUANT
							Else
								SB2->B2_QTNP -= (cAliasSB6)->B6_QUANT
							EndIf
						Else  //Remessas
							If IIf(Empty(cEstoque),SF4->F4_ESTOQUE,cEstoque)=="N"
								SB2->B2_QTER += (cAliasSB6)->B6_QUANT
							Else
								SB2->B2_QNPT += (cAliasSB6)->B6_QUANT
							EndIf
						EndIf
					EndIf
				Endif

				SB2->(MsUnLock())
				a215Skip(cAliasSB6)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo

			aFilTabs[TabelaSB6][2] := cFilialLida

			(cAliasSB6)->(dbCloseArea())
			dbSelectArea("SB6")
		EndIf

		If l215Regua
			oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados dos empenhos do SIGAPMS          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (!Empty(xFilial("AFJ")) .Or. cFilAnt == cFirst )
			SX2->(MsSeek("AFJ"))
			cMensagem := SX2->(AllTrim(X2Nome()))
			cMensagem := Lower(cMensagem)
			cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

			If l215Painel
				A215Painel(oObj, cFilProc, cMensagem)
			EndIf

			dbSelectArea("AFJ")
			dbSetOrder(1)
			cAliasAFJ := "AFJMA215PROC"

			IF cQryAFJ == nil
				cQryAFJ := "SELECT AFJ_FILIAL, AFJ_COD, AFJ_LOCAL, AFJ_PROJET, AFJ_TAREFA, "
				cQryAFJ += " AFJ_QEMP, AFJ_QEMP2, AFJ_QATU, AFJ_EMPEST, AFJ_QATU2, AFJ_EMPES2, "
				cQryAFJ += " AFJ_QEMPPR, AFJ_QEMPP2, AFJ_TRT"
				cQryAFJ += "FROM "+RetSqlName("AFJ")+" AFJ,"
				cQryAFJ += RetSqlName("SB1")+" SB1 "
				cQryAFJ += "WHERE AFJ.AFJ_FILIAL= ? AND "
				cQryAFJ += "AFJ.AFJ_QEMP > (AFJ.AFJ_QATU + AFJ.AFJ_EMPEST) AND "
				cQryAFJ += "AFJ.D_E_L_E_T_= ? AND "
				cQryAFJ += "SB1.B1_FILIAL= ? AND "
				cQryAFJ += "SB1.B1_COD=AFJ.AFJ_COD AND "
				cQryAFJ += "SB1.D_E_L_E_T_= ? "
				cQryAFJ += "ORDER BY AFJ_FILIAL,AFJ_COD,AFJ_LOCAL"
				cQryAFJ := ChangeQuery(cQryAFJ)
			EndIf
			aBind := {}
			AADD(aBind,xFilial("AFJ"))
			AADD(aBind,Space(1))
			AADD(aBind,xFilial("SB1"))
			AADD(aBind,Space(1))

			dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryAFJ,aBind),cAliasAFJ,.T.,.T.)

			M215Comp('AFJ',cAliasAFJ)

			If l215Regua
				oObj:SetRegua1(AFJ->(LastRec()))
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
			While (cAliasAFJ)->(!Eof())
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualiza arquivo de empenhos               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				PmsAtuEmp(	(cAliasAFJ)->AFJ_PROJET,;
							(cAliasAFJ)->AFJ_TAREFA,;
							(cAliasAFJ)->AFJ_COD,;
							(cAliasAFJ)->AFJ_LOCAL,;
							(cAliasAFJ)->AFJ_QEMP-((cAliasAFJ)->AFJ_QATU + (cAliasAFJ)->AFJ_EMPEST),;
							"+",;
							.F.,;
							(cAliasAFJ)->AFJ_QEMP2-((cAliasAFJ)->AFJ_QATU2 + (cAliasAFJ)->AFJ_EMPES2),;
							(cAliasAFJ)->AFJ_TRT)

				PmsAtuEmp(	(cAliasAFJ)->AFJ_PROJET,;
							(cAliasAFJ)->AFJ_TAREFA,;
							(cAliasAFJ)->AFJ_COD,;
							(cAliasAFJ)->AFJ_LOCAL,;
							(cAliasAFJ)->AFJ_QEMPPR,;
							"+",;
							.F.,;
							(cAliasAFJ)->AFJ_QEMPP2,;
							(cAliasAFJ)->AFJ_TRT,;
							,,,;
							.T.)
				a215Skip(cAliasAFJ)
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
			EndDo
			dbSelectArea(cAliasAFJ)
			(cAliasAFJ)->(dbCloseArea())
			dbSelectArea("AFJ")
		EndIf
	EndIf

	// atualiza os acumulados da transferencia de materiais
	M215NNS(oObj,cFirst,lBat)

	If l215Regua
		oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
	EndIf
	If (!Empty(xFilial("SL2")) .Or. cFilAnt == cFirst )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados das Reservas do SigaLoja         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SX2->(DbSeek("SL2"))
		cMensagem := SX2->(AllTrim(X2Nome()))
		cMensagem := Lower(cMensagem)
		cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

		If l215Painel
			A215Painel(oObj, cFilProc, cMensagem)
		EndIf

		dbSelectArea("SL2")
		SL2->(dbSetOrder(1))
		cAliasSL2 := "SL2RES"
		SB1->(DbSetOrder(1))

		If cQrySL2 == nil
			cQrySL2 := "SELECT SUM(L2_QUANT) L2_QUANT, L2_PRODUTO, L2_FILIAL, L2_LOCAL, L2_NUM, L1_DOC, L1_SERIE , L1_ECFLAG, C5_PEDECOM  "
			cQrySL2 += "FROM " + RetSqlName("SL2") + " SL2 "
			cQrySL2 += "INNER JOIN  " + RetSqlName("SL1") +  " SL1 "
			cQrySL2 += "ON SL1.L1_FILIAL = ? " // 1
			cQrySL2 += "AND SL1.L1_NUM =  SL2.L2_NUM "
			cQrySL2 += "AND SL1.D_E_L_E_T_= ? " // 2
			cQrySL2 += "LEFT OUTER JOIN " + RetSqlName("SC5") + " SC5 "
			cQrySL2 += "ON ( SL1.L1_FILRES = SC5.C5_FILIAL AND SL1.L1_PEDRES = SC5.C5_NUM AND SC5.D_E_L_E_T_= ? ) " //3
			cQrySL2 += "WHERE SL2.L2_FILIAL = ? " // 4
			cQrySL2 += "AND SL2.L2_PDV = ? " // 5
			cQrySL2 += "AND SL2.L2_RESERVA <> ? " // 6
			cQrySL2 += "AND SL2.L2_ORCRES = ? " // 7
			cQrySL2 += "AND SL2.L2_PEDRES = ? "  // 8
			cQrySL2 += "AND SL2.L2_VENDIDO <> ? " // 9
			cQrySL2 += "AND SL2.D_E_L_E_T_= ? " // 10
			cQrySL2 += "GROUP BY SL2.L2_FILIAL, SL2.L2_PRODUTO, SL2.L2_LOCAL, SL2.L2_NUM, SL1.L1_DOC, SL1.L1_SERIE, SL1.L1_ECFLAG, SC5.C5_PEDECOM "
			cQrySL2 := ChangeQuery(cQrySL2)
		EndIf
		aBind:= {}
		AADD(aBind,xFilial("SL1"))
		AADD(aBind,Space(1))
		AADD(aBind,Space(1))
		AADD(aBind,xFilial("SL2"))
		AADD(aBind,Space(Len(SL2->L2_PDV)))
		AADD(aBind,Space(Len(SL2->L2_RESERVA)))
		AADD(aBind,Space(Len(SL2->L2_ORCRES)))
		AADD(aBind,Space(Len(SL2->L2_PEDRES)))
		AADD(aBind,'S')
		AADD(aBind,Space(1))

		dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySL2,aBind),cAliasSL2,.T.,.T.)

		M215Comp('SL2',cAliasSL2)

		If l215Regua
			oObj:SetRegua1(SL2->(LastRec()))
			oObj:IncRegua1(cMensagem)
		EndIf

		PulseLife(oObj) //- pulso de conexão

		While (cAliasSL2)->(!Eof())
			lContinua := .T.
			lAtuRes   := .T.
			If RTrim((cAliasSL2)->L1_ECFLAG)  == "1"
				If !Empty((cAliasSL2)->L1_DOC) .AND. !Empty((cAliasSL2)->L1_SERIE)
					//Pedido e-commerce faturado, não atualiza a reserva
					lContinua := .F.
				ElseIf !Empty((cAliasSL2)->C5_PEDECOM)
					//Pedido e-commerce CiaShop, quantidade em reserva já foi apurada pela SC6
					lContinua := .F.
				EndIf
			EndIf

			If HasTemplate("OTC")
				DbSelectArea("SB1")
				DbSetOrder(1)
				DbSeek( xFilial("SB1") + (cAliasSL2)->L2_PRODUTO )
				If SB1->B1_TIPO == "LG"
					lAtuRes  := .F.
				EndIf
			EndIf

			If lContinua .AND. lAtuRes
				Ma215LjAtuRes( cAliasSL2 )
			EndIf

			a215Skip(cAliasSL2)
			If l215Regua
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
		End

		(cAliasSL2)->(dbCloseArea())
		dbSelectArea("SL2")
	EndIf
	If l215Regua
		oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
	EndIf

	If !lBat
		If (oObj <> NIL) .And. lNewProc
			oObj:SaveLog(OemToAnsi(STR0010))
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza o log de processamento             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ProcLogAtu("MENSAGEM",STR0013+cFilAnt,STR0013+cFilAnt,,,csavfil) //"Final Filial: "
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se deve continuar a atualizar as demais filiais     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (!Empty(xFilial("SA1")) .And. !Empty(xFilial("SB2")) .And. !lPCFilEnt)
		Exit
	EndIf

	//Ponto de entrada executado após o calculo para validações
	If lMT215EXC
		ExecBlock("MT215EXC",.F.,.F.)
	EndIf

	SM0->(dbSkip())
EndDo

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura o posicionamento do SIGAMAT ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea(aAreaSM0)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fecha todos os arquivos e reabre-os de forma compartilhada   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nTempoFim := Seconds()
dDataFim  := Date()
cFilAnt := cSavFil
For nX := 1 To Len(aTabs)
	dbSelectArea(aTabs[nX])
	dbCloseArea()
Next
OpenFile(SubStr(cNumEmp,1,2),"")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Envia mensagem de aviso apos termino da rotina               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cTempo:=StrZero(((nTempoFim+((dDataFim-dDataIni)*86400))-nTempoIni)/60,5,0)
MEnviaMail("021",{CUSERNAME,SubStr(cNumEmp,1,2),SubStr(cNumEmp,3,2),cTempo})

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ EventViewer						  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cTitle	 := STR0025 // "Término de processamento do refaz acumulados "
cMessage := STR0026+cTempo+STR0027+CRLF // "Tempo de Execução: "###" Min"
cMessage += STR0028+cUserName+CRLF // "Usuário: "
EventInsert( FW_EV_CHANEL_ENVIRONMENT, FW_EV_CATEGORY_MODULES, "021", FW_EV_LEVEL_INFO, "", cTitle, cMessage, .T. )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fecha o semaforo de execucao da rotina                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
MA215UnLock(cEmpAnt)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza o log de processamento   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ProcLogAtu("FIM")

IF FINDFUNCTION( 'SetAvalSc5' )
	SetAvalSc5(.T.)//- VOLTA A ALIMENTAR AS MÉTRICAS
EndIf

If !oRegSC9 == NIL
	oRegSC9:Destroy()
	FWFreeObj(oRegSC9)
EndIf

If !oTempSC9 == NIL
	oTempSC9:Delete()
	FWFreeObj(oTempSC9)
EndIf

If !oTempSC6 == NIL
	oTempSC6:Delete()
	FWFreeObj(oTempSC6)
EndIf

If !oQuerySC6 == nil
	oQuerySC6:Destroy()
	FreeObj(oQuerySC6)
	oQuerySC6 := nil
EndIf

If !oQuerySC9 == nil
	oQuerySC9:Destroy()
	FreeObj(oQuerySC9)
	oQuerySC9 := nil
EndIf

// calcula a duraç?o em segundos
nElaptime := ((Seconds()+((dDataFim-dDataIni)*86400))-nTempoIni)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
// Telemetria - Uso da classe FwCustomMetrics                   //
// Metrica - setAverageMetric                                   //
// Grava o tempo medio de processamento do Saldo Atual          //
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If FWLibVersion() >= "20210517"
	FWCustomMetrics():setAverageMetric(	"MATA215"/*cSubRoutine*/,;
										"estoque-protheus_refaz-acumulados-tempo-medio-mensal_seconds" /*cIdMetric*/,;
										nElaptime /*nValue*/,;
										/*dDateSend*/,/*nLapTime*/)
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³A215Skip    ³ Autor ³Fernando Joly Siquini³ Data ³ 26/03/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Se apos o dbSkip um dos Campos Chave (Filial, Produto ou   ³±±
±±³          ³ Armazem) for alterado, a funcao MsUnlockAll() e executada. ³±±
±±³          ³ Este procedimento evita a sobrecarga de LOCKS em ambientes ³±±
±±³          ³ CDX e ADS(Em ambientes TOP a funcao nunca sera executada). ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A215Skip(ExpC1)                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 := Alias no qual o "dbSkip" sera executado.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T. caso o MsUnlockAll() seja executado, .F. caso contrario³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA215                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function a215Skip(c215Alias)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis Locais                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cChaveA    := ''
Local cChaveB    := ''
Local cPrefix    := ''
Local cCpoFil    := ''
Local cCpoCod    := ''
Local cCpoLoc    := ''
Local lRet       := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine Variaveis passadas como parametros                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Default c215Alias  := Alias()

If Select(c215Alias) > 0
	dbSelectArea(c215Alias)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta Strings com nomes dos campos FILIAL, PRODUTO e LOCAL   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cPrefix := If(SubStr(Upper(c215Alias),1,1)=='S',SubStr(Upper(c215Alias),2,2),SubStr(Upper(c215Alias),1,3))+'_'
	cCpoFil := If(FieldPos(cCpoFil:=cPrefix+'FILIAL')>0,cCpoFil,'')
	cCpoCod := If(FieldPos(cCpoCod:=cPrefix+'PRODUTO')>0,cCpoCod,If(FieldPos(cCpoCod:=cPrefix+'COD')>0,cCpoCod,''))
	cCpoLoc := If(FieldPos(cCpoLoc:=cPrefix+'LOCAL')>0,cCpoLoc,If(FieldPos(cCpoLoc:=cPrefix+'ALMOX')>0,cCpoLoc,''))
	If !((cCpoFil+cCpoCod+cCpoLoc)=='')
		cChaveA  := IIf(!Empty(cCpoFil),FieldGet(FieldPos(cCpoFil)),'')
		cChaveA  += IIf(!Empty(cCpoCod),FieldGet(FieldPos(cCpoCod)),'')
		cChaveA  += IIf(!Empty(cCpoLoc),FieldGet(FieldPos(cCpoLoc)),'')
		dbSkip()
		cChaveB := IIf(!Empty(cCpoFil),FieldGet(FieldPos(cCpoFil)),'')
		cChaveB += IIf(!Empty(cCpoCod),FieldGet(FieldPos(cCpoCod)),'')
		cChaveB += IIf(!Empty(cCpoLoc),FieldGet(FieldPos(cCpoLoc)),'')
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Executa o MsUnlockAll caso o dbSkip tenha alterado a Chave   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !(cChaveA==cChaveB)
			MsUnLockall()
			lRet := .T.
		EndIf
	Else
		dbSkip()
	EndIf
EndIf
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³ Ma215Res   ³ Autor ³Henry Fila           ³ Data ³ 19/05/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Avaliacao da reserva por pedido de venda ou SC9            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Ma215Res(ExpC1,ExpN1)                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do SC0 		                              ³±±
±±³          ³ ExpN2-Quantidade a reservar  			                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA215                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function Ma215Res(cAliasSC0,nQtdRes,nQtdPed)

Local aArea    := GetArea()
Local aAreaSC0 := SC0->(GetArea())
Local aAreaSDC := SDC->(GetArea())

Local cAliasSDC:= "SDC"
Local cItem
Local aBind    := {}

DEFAULT nQtdPed  := 0

If HasTemplate("OTC")
	nQtdRes  := nQtdPed
EndIf
If Localiza((cAliasSC0)->C0_PRODUTO) .And. !IntWms((cAliasSC0)->C0_PRODUTO)

	cItem := CriaVar("DC_ITEM")

	SDC->(dbSetOrder(1))

	cAliasSDC := "SDCMA215PROC1"

	If cQryMa215Res == nil
		cQryMa215Res := "SELECT DC_PRODUTO,DC_LOCAL,DC_QUANT,DC_QTSEGUM,DC_LOTECTL,DC_NUMLOTE,DC_LOCALIZ,DC_NUMSERI,DC_PEDIDO,DC_ORIGEM"
		cQryMa215Res += "FROM "+RetSqlName("SDC")+" SDC "
		cQryMa215Res += "WHERE SDC.DC_FILIAL= ? AND "
		cQryMa215Res += "SDC.DC_PRODUTO= ? AND "
		cQryMa215Res += "SDC.DC_LOCAL= ?  AND "
		cQryMa215Res += "SDC.DC_ORIGEM= ? AND "
		cQryMa215Res += "SDC.DC_PEDIDO= ? AND "
		cQryMa215Res += "SDC.DC_ITEM= ? AND "
		cQryMa215Res += "SDC.DC_SEQ= ? AND "
		cQryMa215Res += "SDC.DC_LOTECTL=? AND "
		cQryMa215Res += "SDC.DC_NUMLOTE= ? AND "
		cQryMa215Res += "SDC.D_E_L_E_T_= ?"
		cQryMa215Res += "ORDER BY "+SqlOrder(SDC->(IndexKey()))

		cQryMa215Res := ChangeQuery(cQryMa215Res)
	EndIf

	AADD(aBind,xFilial("SDC"))
	AADD(aBind,(cAliasSC0)->C0_PRODUTO)
	AADD(aBind,(cAliasSC0)->C0_LOCAL)
	AADD(aBind,'SC0')
	AADD(aBind,(cAliasSC0)->C0_NUM)
	AADD(aBind,Criavar("DC_ITEM"))
	AADD(aBind,Criavar("DC_SEQ"))
	AADD(aBind,(cAliasSC0)->C0_LOTECTL)
	AADD(aBind,(cAliasSC0)->C0_NUMLOTE)
	AADD(aBind,Space(1))

	dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryMa215Res,aBind),cAliasSDC,.T.,.T.)

	M215Comp('SDC',cAliasSDC)

	While (cAliasSDC)->(!Eof() )
		GravaEmp(	(cAliasSDC)->DC_PRODUTO,;
					(cAliasSDC)->DC_LOCAL,;
					(cAliasSDC)->DC_QUANT,;
					(cAliasSDC)->DC_QTSEGUM,;
					(cAliasSDC)->DC_LOTECTL,;
					(cAliasSDC)->DC_NUMLOTE,;
					(cAliasSDC)->DC_LOCALIZ,;
					(cAliasSDC)->DC_NUMSERI,;
					Nil,;
					Nil,;
					(cAliasSDC)->DC_PEDIDO,;
						cItem,;
					"SC0",;
					Nil,;
					Nil,;
					Nil,;
					.F.,;
					.F.,;
					.T.,;
					.F.,;
					NIL,;
					.T.,;
					.F.)
		a215Skip(cAliasSDC)
	EndDo
	(cAliasSDC)->(dbCloseArea())
	dbSelectArea("SDC")
Else
	GravaEmp(	(cAliasSC0)->C0_PRODUTO,;
				(cAliasSC0)->C0_LOCAL,;
				nQtdRes,;
				NIL,;
				(cAliasSC0)->C0_LOTECTL,;
				(cAliasSC0)->C0_NUMLOTE,;
				(cAliasSC0)->C0_LOCALIZ,;
				(cAliasSC0)->C0_NUMSERI,;
				Nil,;
				Nil,;
				(cAliasSC0)->C0_NUM,;
					cItem,;
				"SC0",;
				Nil,;
				Nil,;
				Nil,;
				.F.,;
				.F.,;
				.T.,;
				.F.,;
				Nil,;
				!Empty((cAliasSC0)->C0_LOTECTL+(cAliasSC0)->C0_NUMLOTE+(cAliasSC0)->C0_LOCALIZ+(cAliasSC0)->C0_NUMSERI),; //22
				.F.)
EndIf

RestArea(aAreaSC0)
RestArea(aAreaSDC)
RestArea(aArea)

aSize(aAreaSC0,0)
aSize(aAreaSDC,0)
aSize(aArea,0)
aSize(aBind,0)

aAreaSC0 := NIL
aAreaSDC := nil
aArea    := nil
aBind    := nil


Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Ma215LjAtuResºAutor  ³Marcio Lopes        º Data ³  15/05/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Realiza a atualizacao do campo B2_RESERVA, para o modulo      º±±
±±º          ³ SIGALOJA.                                                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametro ³ ExpC1 -> Alias do arquivos a ser utilizado                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Generico                                                      º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºRetorno   ³ Nenhum                                                        ³±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Ma215LjAtuRes( cAliasSL2 )

Local aAreaSB2 := SB2->(GetArea())			// Guarda a area atual do SB2

SB2->(dbSetOrder(1))
If SB2->( MsSeek(xFilial("SB2") + (cAliasSL2)->L2_PRODUTO + (cAliasSL2)->L2_LOCAL ) )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se o produto é uma reserva na base do SIGALOJA³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	RecLock("SB2", .F.)
	SB2->B2_RESERVA += (cAliasSL2)->L2_QUANT
	MsUnlock()
EndIf
Restarea(aAreaSB2)
dbSelectArea(cAliasSL2)
aSize(aAreaSB2,0)
aAreaSB2 := nil
Return(.T.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³ Ma215Check ³ Autor ³TOTVS S/A            ³ Data ³ 17/01/14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Avalia se a rotina MATA215 esta em execucao.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Ma215Check()                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GENERICO                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Function Ma215Check()
Local aTabs     := {}
Local nX        := 0
Local lContinua := .T.
Local cAliasTab := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Somente validar se as tabelas estao exclusivas se a rotina 'Refaz        |
//|Acumulados (MATA215)' estiver em execucao.                               |
//|O parametro MV_A215CHK devera ser utilizado somente para contingencia.   |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !LockByName("MT215"+AllTrim(cEmpAnt),.T.,.F.) .And. SuperGetMv("MV_A215CHK",.F.,.T.)

	//Tabelas utilizadas pela rotina
	AADD(aTabs,"SA1");AADD(aTabs,"SB1");AADD(aTabs,"SB2")
	AADD(aTabs,"SB8");AADD(aTabs,"SC0");AADD(aTabs,"SC6")
	AADD(aTabs,"SC7");AADD(aTabs,"SC9");AADD(aTabs,"SD2")
	AADD(aTabs,"SD1");AADD(aTabs,"SD4");AADD(aTabs,"SDC")
	AADD(aTabs,"SDD");AADD(aTabs,"SC1");AADD(aTabs,"SC2")
	AADD(aTabs,"SB6");AADD(aTabs,"SBF");AADD(aTabs,"SDA")
	AADD(aTabs,"SL2");AADD(aTabs,"SCQ")
	AADD(aTabs,"DH1");AADD(aTabs,"D0G")

	//Verifica se as tabelas estao em modo exclusivo
	For nX := 1 to Len(aTabs)
		If !(ChkFile(aTabs[nX],.T.))
			cAliasTab := aTabs[nX]
			lContinua := .F.
			Exit
		EndIf
		(aTabs[nX])->(dbCloseArea())
		ChkFile(aTabs[nX],.F.)
	Next nX

	//Mensagem para o usuario
	If !lContinua
		Help(" ",1,"MA215CHK")

		FINAL(STR0014 + Space(1) + cAliasTab,,.F.)	//"MA215CHECK: Não foi possivel a abertura da tabela"

	EndIf

Else

	// Desbloqueia o Lock
	MA215UnLock(cEmpAnt)

EndIf
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³MA215Lock   ³ Autor ³ TOTVS S/A           ³ Data ³ 20.01.14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Bloqueio de Empresas para o processamento da rotina        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Codigo da Empresa                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA215                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function MA215Lock(cEmpresa)
Local lRet       := .T.
Local nTentativa := 0

nTentativa := 0
// Trava arquivo para somente este usuario utilizar rotina
While !LockByName("MT215"+AllTrim(cEmpresa),.T.,.F.) .And. nTentativa <= 50
	nTentativa++
	Sleep(100)
End

// Tenta travar somente 50 vezes, e se nao conseguir coloca na lista de filiais com concorrencia
If nTentativa > 50
	If !IsBlind()
		Aviso(STR0015,STR0016+cEmpresa,{"Ok"},2) // ##"Concorrência"##"A empresa corrente já esta sendo utilizadas no processo de refaz acumulados: "
	EndIf
	lRet := .F.
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MA215UnLock ³ Autor ³ TOTVS S/A           ³ Data ³ 20.01.14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Desbloqueio de Empresa                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Codigo da Empresa                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA215                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function MA215UnLock(cEmpresa)

// Destrava o bloqueio de filiais
UnLockByName("MT215"+AllTrim(cEmpresa),.T.,.F.)

Return

/*/{Protheus.doc} m215NNS
//Atualizacao dos empenhos efetuados na rotina MATA311.
@author reynaldo
@since 24/11/2017
@version 1.0
@return ${return}, ${return_description}
@param oObj, object, descricao
@param cFirst, characters, descricao
@param lBat, logical, descricao
@type function
/*/
Static Function m215NNS(oObj,cFirst,lBat)
Local cMensagem := ""
Local cAliasNNT := ""
Local aBind     := {}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Atualiza os dados acumulados dos empenhos da MATA311          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (!Empty(xFilial("NNS")) .Or. cFilAnt == cFirst )
		SX2->(MsSeek("NNS"))
		cMensagem := SX2->(AllTrim(X2Nome()))
		cMensagem := Lower(cMensagem)
		cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

		If l215Painel
			A215Painel(oObj, cFilProc, cMensagem)
		EndIf

		NNT->(dbSetOrder(1))
		SB2->( DbSetOrder(1) )

		cAliasNNT := "NNTMA215PROC"
		If cQryNNT == nil
			cQryNNT := "SELECT NNT_FILORI,NNT_LOCAL,NNT_LOCALI,NNT_PROD,NNT_NSERIE,NNT_LOTECT,NNT_PRODD,"
			cQryNNT += " NNT_NUMLOT,NNT_QUANT,NNT_QTSEG,NNT_LOCLD,NNT_FILDES "
			cQryNNT += " FROM "+RetSqlName("NNT")+" NNT "
			cQryNNT += " INNER JOIN " + RetSqlName("NNS")+" NNS "
			cQryNNT += " ON NNS.NNS_FILIAL = ? "
			cQryNNT += " AND NNS.NNS_COD = NNT.NNT_COD "
			cQryNNT += " AND NNS.NNS_STATUS = ? "
			cQryNNT += " AND NNS.D_E_L_E_T_= ? "
			cQryNNT += " WHERE NNT.NNT_FILIAL = ? "
			cQryNNT += " AND NNT.D_E_L_E_T_ = ? "
			cQryNNT := ChangeQuery(cQryNNT)
		EndIf
		AADD(aBind,xFilial("NNS"))
		AADD(aBind,'1')
		AADD(aBind,Space(1))
		AADD(aBind,xFilial("NNT"))
		AADD(aBind,Space(1))

		dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryNNT,aBind),cAliasNNT,.T.,.T.)

		M215Comp('NNT',cAliasNNT)

		If l215Regua
			oObj:SetRegua1(NNT->(LastRec()))
			oObj:IncRegua1(cMensagem)
		EndIf
		PulseLife(oObj) //- pulso de conexão
		While (cAliasNNT)->(!Eof())
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza arquivo de empenhos               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If Localiza((cAliasNNT)->NNT_PROD)
				//Gera empenho do produto por endereço
				SBF->( DbSetOrder(1) ) //BF_FILIAL+BF_LOCAL+BF_LOCALIZ+BF_PRODUTO+BF_NUMSERI+BF_LOTECTL+BF_NUMLOTE
				If SBF->( DbSeek(xFilial('SBF',(cAliasNNT)->NNT_FILORI)+(cAliasNNT)->(NNT_LOCAL+NNT_LOCALI+NNT_PROD+NNT_NSERIE+NNT_LOTECT+NNT_NUMLOT)) )
					GravaBFEmp("+",(cAliasNNT)->NNT_QUANT,"F",,(cAliasNNT)->NNT_QTSEG)
				Endif
			EndIf
			If Rastro((cAliasNNT)->NNT_PROD)
				//Gera empenho do produto por lote ou sub-lote
				SB8->( DbSetOrder(3) )
				If SB8->( DbSeek(xFilial('SB8',(cAliasNNT)->NNT_FILORI)+(cAliasNNT)->(NNT_PROD+NNT_LOCAL+NNT_LOTECT+NNT_NUMLOT)) )
					GravaB8Emp("+",(cAliasNNT)->NNT_QUANT,"F",NIL,(cAliasNNT)->NNT_QTSEG)
				Endif
			EndIf
			//Gera do produto por armazém
			If SB2->( MsSeek(xFilial('SB2',(cAliasNNT)->NNT_FILORI)+(cAliasNNT)->(NNT_PROD+NNT_LOCAL)) )
				GravaB2Emp("+",(cAliasNNT)->NNT_QUANT,"F",NIL,(cAliasNNT)->NNT_QTSEG)
			Endif
			//Gera previsão de Entrada na Filial de Destino
			If SB2->( MsSeek(xFilial("SB2",(cAliasNNT)->NNT_FILDES)+(cAliasNNT)->(NNT_PRODD+NNT_LOCLD)) )
				GravaB2Pre('+',(cAliasNNT)->NNT_QUANT,"F",(cAliasNNT)->NNT_QTSEG)
			Endif
			(cAliasNNT)->(dbSkip())
			If l215Regua
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
		EndDo
		(cAliasNNT)->(dbCloseArea())
		dbSelectArea("NNT")
	EndIf
	aSize(aBind,0)
	aBind := nil
Return

/*/{Protheus.doc} a215AtuSC1
	Atualiza os dados acumulados da Solicitacao de Compra
	@type  Function
	@author reynaldo
	@since 23/12/2020
	@version version
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/
Static Function a215AtuSC1(aFilTabs,cFirst,lBat,oObj)
Local cFilialLida
Local cMensagem
Local aStru
Local cAliasSC1
Local cQuery
Local nX
Local lContinua
Local lSCSldBl
Local aBind := {}

	lM215SC	:= If(lM215SC==nil,ExistBlock("M215SC"),lM215SC)
	lSCSldBl := SuperGetMv("MV_SCSLDBL",.F.,.F.)

	cFilialLida := xFilial("SC1")

	If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSC1][2]) .Or. (cFilAnt == cFirst)
		SX2->(MsSeek("SC1"))
		cMensagem := SX2->(AllTrim(X2Nome()))
		cMensagem := Lower(cMensagem)
		cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)
		If l215Painel
			A215Painel(oObj, cFilProc, cMensagem)
		EndIf

		dbSelectArea("SC1")
		SC1->(dbSetOrder(1))
		If l215Regua
			oObj:SetRegua1(SC1->(LastRec()))
			oObj:IncRegua1(cMensagem)
		EndIf
		PulseLife(oObj) //- pulso de conexão

		cAliasSC1 := "SC1MA215PROC"

		If cQryAtuSC1 == nil
			cQuery := ""
			aStru  := SC1->(dbStruct())
			For nX := 1 To Len(aStru)
				cQuery += ","+aStru[nX][1]
			Next nX
			cQryAtuSC1 := "SELECT SB1.B1_FILIAL,"+SubStr(cQuery,2)+",SC1.D_E_L_E_T_,SC1.R_E_C_N_O_ SC1RECNO "
			cQryAtuSC1 += "FROM "+RetSqlName("SC1")+" SC1,"
			cQryAtuSC1 += RetSqlName("SB1")+" SB1 "
			cQryAtuSC1 += "WHERE SC1.C1_FILIAL= ? AND "
			cQryAtuSC1 += "SC1.C1_QUJE < SC1.C1_QUANT AND "
			cQryAtuSC1 += "SC1.D_E_L_E_T_= ? AND "
			cQryAtuSC1 += "SC1.C1_RESIDUO= ? AND "
			cQryAtuSC1 += "SB1.B1_FILIAL= ? AND "
			cQryAtuSC1 += "SB1.B1_COD=SC1.C1_PRODUTO AND "
			cQryAtuSC1 += "SB1.D_E_L_E_T_= ? "
			cQryAtuSC1 += "ORDER BY SC1.C1_FILIAL,SC1.C1_PRODUTO,SC1.C1_LOCAL"

			cQryAtuSC1 := ChangeQuery(cQryAtuSC1)

			aSize(aStru,0)
			aStru := nil
		EndIf
		AADD(aBind,xFilial("SC1"))
		AADD(aBind,Space(1))
		AADD(aBind,Space(Len(SC1->C1_RESIDUO)))
		AADD(aBind,xFilial("SB1"))
		AADD(aBind,Space(1))

		dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryAtuSC1,aBind),cAliasSC1,.T.,.T.)

		M215Comp('SC1',cAliasSC1)


		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados da Solicitacao de compra         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		While (cAliasSC1)->(!Eof())
			lContinua := .T.
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto de Entrada para Tratamentos Especiais         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lM215SC
				dbSelectArea("SC1")
				dbGoto((cAliasSC1)->SC1RECNO)
				If ExecBlock("M215SC",.f.,.f.)
					lContinua := .F.
				EndIf
			EndIf
			If lContinua
				MaAvalSC(cAliasSC1,1,,,.T.)

				If (cAliasSC1)->C1_APROV == "R" .AND. lSCSldBl
					dbSelectArea("SC1")
					MsGoto((cAliasSC1)->SC1RECNO)
					MaAvalSC(cAliasSC1,8,,,,,," ")
				EndIf
			EndIf
			a215Skip(cAliasSC1)
			If l215Regua
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
		EndDo

		aFilTabs[TabelaSC1][2] := cFilialLida

		(cAliasSC1)->(dbCloseArea())
		dbSelectArea("SC1")

	EndIf
	aSize(aBind,0)
	aBind := nil

Return

/*/{Protheus.doc} a215AtuOP
	Atualiza os dados acumulados das Ordens de Producao
	@type  Function
	@author reynaldo
	@since 23/12/2020
	@version version
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/
Static Function a215AtuOP(aFilTabs,cFirst,lBat,oObj)
Local cFilialLida
Local cMensagem
Local cAliasSC2
Local cFilialSB2
Local lContinua
Local nQuant
Local aBind := {}

	cFilialLida := xFilial("SC2")

	If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSC2][2]) .Or. (cFilAnt == cFirst)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados das Ordens de Producao           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SX2->(MsSeek("SC2"))
		cMensagem := SX2->(AllTrim(X2Nome()))
		cMensagem := Lower(cMensagem)
		cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

		If l215Painel
			A215Painel(oObj, cFilProc, cMensagem)
		EndIf

		dbSelectArea("SC2")
		SC2->(dbSetOrder(1))
		SB2->(dbSetOrder(1))

		cAliasSC2 := "SC2MA215PROC"

		If cQryAtuOP == nil
			cQryAtuOP := "SELECT SC2.C2_PRODUTO,SC2.C2_LOCAL,SC2.C2_TPOP ,SB1.R_E_C_N_O_ RECNOSB1 , "
			cQryAtuOP += " MAX(SC2.C2_DATRF) C2_DATRF, SUM(SC2.C2_QUANT) C2_QUANT, SUM(SC2.C2_QUJE) C2_QUJE, SUM(SC2.C2_PERDA) C2_PERDA "
			cQryAtuOP += " FROM "+RetSQLName("SC2")+" SC2, "
			cQryAtuOP += " "+RetSQLName("SB1")+ " SB1 "
			cQryAtuOP += " WHERE SC2.C2_FILIAL= ? AND "
			cQryAtuOP += " (SC2.C2_DATRF= ? AND "
			cQryAtuOP += " SC2.C2_QUANT-SC2.C2_QUJE-SC2.C2_PERDA>0) AND "
			cQryAtuOP += " SC2.D_E_L_E_T_= ? AND "
			cQryAtuOP += " SB1.B1_FILIAL= ? AND "
			cQryAtuOP += " SB1.B1_COD=SC2.C2_PRODUTO AND "
			cQryAtuOP += " SB1.D_E_L_E_T_= ? "
			cQryAtuOP += " GROUP BY SC2.C2_PRODUTO,SC2.C2_LOCAL,SC2.C2_TPOP ,SB1.R_E_C_N_O_ "
			cQryAtuOP += " UNION ALL "
			cQryAtuOP += " SELECT SC2.C2_PRODUTO,SC2.C2_LOCAL,SC2.C2_TPOP ,SB1.R_E_C_N_O_ RECNOSB1 , "
			cQryAtuOP += " MAX(SC2.C2_DATRF) C2_DATRF, SUM(SC2.C2_QUANT) C2_QUANT, SUM(SC2.C2_QUJE) C2_QUJE, SUM(SC2.C2_PERDA) C2_PERDA "
			cQryAtuOP += " FROM "+RetSQLName("SC2")+" SC2, "
			cQryAtuOP += " "+RetSQLName("SB1")+ " SB1 "
			cQryAtuOP += " WHERE SC2.C2_FILIAL= ? AND "
			cQryAtuOP += " SC2.C2_DATRF<> ? AND "
			cQryAtuOP += " SC2.D_E_L_E_T_= ? AND "
			cQryAtuOP += " SB1.B1_FILIAL= ? AND "
			cQryAtuOP += " SB1.B1_COD=SC2.C2_PRODUTO AND "
			cQryAtuOP += " SB1.D_E_L_E_T_= ? "
			cQryAtuOP += " GROUP BY SC2.C2_PRODUTO,SC2.C2_LOCAL,SC2.C2_TPOP ,SB1.R_E_C_N_O_ "
			cQryAtuOP += " ORDER BY C2_PRODUTO, C2_LOCAL, C2_TPOP "

			cQryAtuOP := ChangeQuery(cQryAtuOP)
		EndIf
		AADD(aBind,xFilial("SC2"))
		AADD(aBind,Space(8))
		AADD(aBind,Space(1))
		AADD(aBind,xFilial("SB1"))
		AADD(aBind,Space(1))
		//- union all
		AADD(aBind,xFilial("SC2"))
		AADD(aBind,Space(8))
		AADD(aBind,Space(1))
		AADD(aBind,xFilial("SB1"))
		AADD(aBind,Space(1))

		dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryAtuOP,aBind),cAliasSC2,.T.,.T.)

		M215Comp('SC2',cAliasSC2)

		If l215Regua
			oObj:SetRegua1(SC2->(LastRec()))
			oObj:IncRegua1(cMensagem)
		EndIf
		PulseLife(oObj) //- pulso de conexão

		cFilialSB2 :=xFilial("SB2")
		While (cAliasSC2)->(!Eof())
			lContinua := .T.
			If lContinua

				SB1->(MsGoto((cAliasSC2)->RECNOSB1))

				If SB2->(!MsSeek(cFilialSB2+(cAliasSC2)->C2_PRODUTO+(cAliasSC2)->C2_LOCAL))
					CriaSB2((cAliasSC2)->C2_PRODUTO,(cAliasSC2)->C2_LOCAL)
				EndIf
				If Empty((cAliasSC2)->C2_DATRF)
					nQuant := aSC2Sld(cAliasSC2) //Saldo real da OP
				Else
					nQuant := 0
				EndIf
				GravaB2Pre("+",nQuant,(cAliasSC2)->C2_TPOP)
			EndIf
			a215Skip(cAliasSC2)
			If l215Regua
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
		EndDo

		aFilTabs[TabelaSC2][2] := cFilialLida

		(cAliasSC2)->(dbCloseArea())
		dbSelectArea("SC2")

	EndIf
	aSize(aBind,0)
	aBind := nil
	If l215Regua
		oObj:IncRegua2(STR0007+" - "+AllTrim(SM0->M0_NOME)+"/"+SM0->M0_FILIAL) //"Atualizando acumulados"
	EndIf
Return .T.


/*/{Protheus.doc} a215OPEmp
	Atualiza os dados acumulados de empenho das Ordens de Producao.
	Somente separado da funcao Ma215Proc "especializando" o processo
	@type Function
	@author reynaldo
	@since 12/02/2021
	@version 1.0
	@param aFilTabs, param_type, param_descr
	@param cFirst, param_type, param_descr
	@param lBat, param_type, param_descr
	@param oObj, param_type, param_descr
	@return nenhum
	@example
	(examples)
	@see (links_or_references)
/*/
Static Function a215OPEmp(aFilTabs,cFirst,lBat,oObj)
Local cFilialLida
Local cMensagem
Local cAliasSD4
Local cQuery
Local lNegEstr
Local nQuantDc
Local nQtdDifDc
Local cAliasSDC
Local lAchou
Local cLocaliza
Local cNumSerie
Local cPedido
Local cItem
Local aTravas := {}
Local aBind   := {}

	cFilialLida := xFilial("SD4")

	If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSD4][2]) .Or. (cFilAnt == cFirst)


		cLocaliza := CriaVar("BF_LOCALIZ")
		cNumSerie := CriaVar("BF_NUMSERI")
		cPedido   := CriaVar("DC_PEDIDO")
		cItem     := CriaVar("DC_ITEM")

		lNegEstr  := SuperGetMV("MV_NEGESTR",.F.,.F.)

		SX2->(MsSeek("SD4"))
		cMensagem := SX2->(AllTrim(X2Nome()))
		cMensagem := Lower(cMensagem)
		cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

		If l215Painel
			A215Painel(oObj, cFilProc, cMensagem)
		EndIf

		dbSelectArea("SD4")
		dbSetOrder(1)

		cAliasSD4 := "SD4MA215PROC"


		cQuery := "SELECT D4_COD,D4_LOCAL,D4_QUANT,D4_QTSEGUM,D4_LOTECTL,"
		cQuery += " D4_NUMLOTE,D4_OP,D4_TRT,D4_OPORIG,D4_DATA,SB1.R_E_C_N_O_ SB1RECNO "
		cQuery += "FROM "+RetSqlName("SD4")+" SD4,"
		cQuery += RetSqlName("SB1")+" SB1 "
		cQuery += "WHERE SD4.D4_FILIAL='"+xFilial("SD4")+"' AND "
		// MV_NEGESTR - Parametro utilizado para considerar empenho negativo
		If lNegEstr
			cQuery += " SD4.D4_QUANT <> 0 AND "
		Else
			cQuery += "SD4.D4_QUANT > 0 AND "
		EndIf
		cQuery += "SD4.D_E_L_E_T_=' ' AND "
		cQuery += "SB1.B1_FILIAL='"+xFilial("SB1")+"' AND "
		cQuery += "SB1.B1_COD=SD4.D4_COD AND "
		cQuery += "SB1.D_E_L_E_T_=' ' "
		cQuery += "ORDER BY D4_FILIAL,D4_COD,D4_LOCAL"

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSD4,.T.,.T.)
		
		M215Comp('SD4',cAliasSD4)

		If l215Regua
			oObj:SetRegua1(SD4->(LastRec()))
			oObj:IncRegua1(cMensagem)
		EndIf
		PulseLife(oObj) //- pulso de conexão

		While (cAliasSD4)->(!Eof() )
			nQuantDc :=0
			nQtdDifDc:=0

			SB1->(MsGoto((cAliasSD4)->SB1RECNO))

			If Localiza((cAliasSD4)->D4_COD)
				cAliasSDC := "SDCMA215PROC1"

				If cQryOPEmp == nil
					cQryOPEmp := "SELECT DC_PRODUTO,DC_LOCAL,DC_QUANT,DC_QTSEGUM,"
					cQryOPEmp += " DC_LOTECTL,DC_NUMLOTE,DC_LOCALIZ,DC_NUMSERI,DC_OP,DC_TRT "
					cQryOPEmp += "FROM "+RetSqlName("SDC")+" SDC "
					cQryOPEmp += "WHERE SDC.DC_FILIAL= ? AND "
					cQryOPEmp += "SDC.DC_PRODUTO= ? AND "
					cQryOPEmp += "SDC.DC_LOCAL= ? AND "
					cQryOPEmp += "SDC.DC_OP= ? AND "
					cQryOPEmp += "SDC.DC_TRT= ? AND "
					cQryOPEmp += "SDC.DC_LOTECTL= ? AND "
					cQryOPEmp += "SDC.DC_NUMLOTE= ? AND "
					cQryOPEmp += "SDC.D_E_L_E_T_= ? "
					cQryOPEmp += "ORDER BY "+SqlOrder(SDC->(IndexKey()))

					cQryOPEmp := ChangeQuery(cQryOPEmp)
				EndIf
				aBind := {}
				AADD(aBind,xFilial("SDC"))
				AADD(aBind,(cAliasSD4)->D4_COD)
				AADD(aBind,(cAliasSD4)->D4_LOCAL)
				AADD(aBind,(cAliasSD4)->D4_OP)
				AADD(aBind,(cAliasSD4)->D4_TRT)
				AADD(aBind,(cAliasSD4)->D4_LOTECTL)
				AADD(aBind,(cAliasSD4)->D4_NUMLOTE)
				AADD(aBind,Space(1))

				dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQryOPEmp,aBind),cAliasSDC,.T.,.T.)

				M215Comp('SDC',cAliasSDC)

				lAchou := .F.
				While (cAliasSDC)->(!Eof() )
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualiza arquivo de empenhos               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					nQuantDc+=(cAliasSDC)->DC_QUANT
					lAchou := .T.
					GravaEmp(	(cAliasSDC)->DC_PRODUTO,;
									(cAliasSDC)->DC_LOCAL,;
									(cAliasSDC)->DC_QUANT,;
									(cAliasSDC)->DC_QTSEGUM,;
									(cAliasSDC)->DC_LOTECTL,;
									(cAliasSDC)->DC_NUMLOTE,;
									(cAliasSDC)->DC_LOCALIZ,;
									(cAliasSDC)->DC_NUMSERI,;
									(cAliasSDC)->DC_OP,;
									(cAliasSDC)->DC_TRT,;
									cPedido,;
									cItem,;
									"SC2",;
									NIL,;
									NIL,;
									NIL,;
									.F.,;
									.F.,;
									.T.,;
									.F.,;
									NIL,;
									.T.,;
									.F.)
					a215Skip(cAliasSDC)
				EndDo

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Tratamento para verificar se existe diference entre valores da SDC e SD4 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If nQuantDc < (cAliasSD4)->D4_QUANT
					nQtdDifDc := (cAliasSD4)->D4_QUANT - nQuantDc
					lAchou :=.F.
				EndIf

				(cAliasSDC)->(dbCloseArea())
				dbSelectArea("SDC")

				If !lAchou
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualiza arquivo de empenhos               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					GravaEmp(	(cAliasSD4)->D4_COD,;
									(cAliasSD4)->D4_LOCAL,;
									IIf(QtdComp((cAliasSD4)->D4_QUANT) <> QtdComp(nQuantDc),nQtdDifDc,(cAliasSD4)->D4_QUANT),;
									(cAliasSD4)->D4_QTSEGUM,;
									(cAliasSD4)->D4_LOTECTL,;
									(cAliasSD4)->D4_NUMLOTE,;
									cLocaliza,;
									cNumSerie,;
									(cAliasSD4)->D4_OP,;
									(cAliasSD4)->D4_TRT,;
									cPedido,;
									cItem,;
									"SC2",;
									(cAliasSD4)->D4_OPORIG,;
									(cAliasSD4)->D4_DATA,;
									@aTravas,;
									.F.,;
									.F.,;
									.T.,;
									.F.,;
									NIL,;
									.T.,;
									.F.)
				EndIf
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualiza arquivo de empenhos               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				GravaEmp(	(cAliasSD4)->D4_COD,;
								(cAliasSD4)->D4_LOCAL,;
								(cAliasSD4)->D4_QUANT,;
								(cAliasSD4)->D4_QTSEGUM,;
								(cAliasSD4)->D4_LOTECTL,;
								(cAliasSD4)->D4_NUMLOTE,;
								cLocaliza,;
								cNumSerie,;
								(cAliasSD4)->D4_OP,;
								(cAliasSD4)->D4_TRT,;
								cPedido,;
								cItem,;
								"SC2",;
								(cAliasSD4)->D4_OPORIG,;
								(cAliasSD4)->D4_DATA,;
								NIL,;
								.F.,;
								.F.,;
								.T.,;
								.F.,;
								NIL,;
								.T.,;
								.F.)
			EndIf
			a215Skip(cAliasSD4)
			If l215Regua
				oObj:IncRegua1(cMensagem)
			EndIf
			PulseLife(oObj) //- pulso de conexão
		EndDo

		aSize(aBind,0)
		aBind := nil

		aSize(aTravas,0)
		aTravas := nil

		aFilTabs[TabelaSD4][2] := cFilialLida

		(cAliasSD4)->(dbCloseArea())
		dbSelectArea("SD4")
	EndIf
Return

 /*/{Protheus.doc} a215AtuSC6
	Atualizacao referente ao itens do pedido de vendas
	Somente separado da funcao Ma215Proc "especializando" o processo
	@type  Function
	@author reynaldo
	@since 17/02/2021
	@version 1.0
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/
Static Function a215AtuSC6(aFilTabs,cFirst,lBat,oObj)
Local cFilialLida
Local cMensagem
Local cAliasSC6
Local cQuery
Local nX
Local lLiberOk
Local lResidOk
Local lFaturOk
Local cFilialSC6
Local cFilialSD2
Local lContinua
Local cQuebra
Local cAliasSD2
Local cAliasSC9
Local aSaldos
Local cAliasSDC
Local nQtdLib2
Local cSD2Table
Local aBind as array
Local nMin := 0
Local nMax := 0
Local cChave


	lMA215SD2	:= If(lMA215SD2==nil,ExistBlock("MA215SD2"),lMA215SD2)

	cFilialLida := xFilial("SC6")
	aBind := {}
	If (!Empty(cFilialLida) .AND. cFilialLida != aFilTabs[TabelaSC6][2]) .Or. (cFilAnt == cFirst)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza os dados acumulados do PV e seus anexos              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SX2->(MsSeek("SC6"))
		cMensagem := SX2->(AllTrim(X2Nome()))
		cMensagem := Lower(cMensagem)
		cMensagem := Upper(SubStr(cMensagem,1,1))+SubStr(cMensagem,2)

		If l215Painel
			A215Painel(oObj, cFilProc, cMensagem)
		EndIf

		dbSelectArea("SC6")
		SC6->(dbSetOrder(1))

		// Seleciona os itens de pedido de vendas que serão processados
		GeraSC6Tmp()
		cQuery := "SELECT MIN(R_E_C_N_O_) MIN, MAX(R_E_C_N_O_) MAX FROM "+oTempSC6:GetRealName()
		dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQuery,{}),'QTMPSC6',.T.,.T.)
		If QTMPSC6->(!Eof())
			nMin := QTMPSC6->MIN
			nMax := QTMPSC6->MAX
		EndIf
		QTMPSC6->(dbCloseArea())

		cQuery := "UPDATE "
		cQuery += RetSqlName("SC6")+" "
		cQuery += "SET C6_QTDEMP = 0, C6_QTDENT = 0, C6_QTDEMP2 = 0, C6_QTDENT2 = 0 "
		cQuery += "WHERE "
		cQuery += "R_E_C_N_O_ IN (select RECNOSC6 from "+oTempSC6:GetRealName()+" TMP WHERE "
		For nX := nMin To nMax+nStep STEP nStep
			cChave := " TMP.R_E_C_N_O_>="+ValToSQL(nX)
			cChave += " AND TMP.R_E_C_N_O_<="+ValToSQL(nX+nStep)+")"
			If TcSqlExec(cQuery+cChave) < 0
				UserException(STR0020 +TCSQLError() ) // "Falha na limpeza das reservas dos itens de pedidos de venda: "
			EndIf
			PulseLife(oObj) //- pulso de conexão
		Next nX


		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³A tabela eh fechada para restaurar o buffer da aplicacao³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea("SC6")
		dbCloseArea()
		ChkFile("SC6",.T.)

		//Gera uma tabela temporaria com os registros da tabela SC9
		// considerando os registros da tabela SC6 a serem processadas
		GeraSC9Tmp(oTempSC6:GetRealName())

		//
		// Prepare Statment para busca do pedido, item e produto
		//
		If oRegSC9 == nil
			cQuery := " SELECT SC9.RECNOSC9 "
			cQuery += " FROM "+oTempSC9:GetRealName()+" SC9 "
			cQuery += " WHERE SC9.C9_PEDIDO = ? "
			cQuery += " AND SC9.C9_ITEM = ? "
			cQuery += " AND SC9.C9_PRODUTO = ? "
			cQuery := ChangeQuery(cQuery)
			If __l215VLib
				oRegSC9	:= FwExecStatement():New(cQuery)
			Else
				oRegSC9 := FWPreparedStatement():New(cQuery)
			EndIf
		EndIf


		cSD2Table := RetSqlName("SD2")
		cFilialSD2:= xFilial('SD2')

		cAliasSC6 := "SC6MA215PROC"

		If cQrySC6 == nil
			cQrySC6 := "SELECT SC6.C6_FILIAL,SC6.C6_NUM,SC6.C6_ITEM,SC6.C6_PRODUTO,SC6.C6_BLQ,"
			cQrySC6 += "SC6.C6_NUMOS,SC6.C6_QTDEMP,SC6.C6_NUMOSFA,"
			cQrySC6 += "SC6.C6_QTDENT,SC6.C6_RESERVA,SC6.C6_TES,SC6.C6_NUMLOTE,"
			cQrySC6 += "SC6.C6_CLI,SC6.C6_LOCAL,SC6.C6_LOTECTL,SC6.C6_LOJA,SC6.C6_QTDVEN,"
			cQrySC6 += "SC6.C6_OP,SC6.C6_NUMSERI,SC6.C6_LOCALIZ,SC6.C6_QTDRESE,SC6.C6_DTVALID,"
			cQrySC6 += "SC6.C6_QTDLIB,SC6.C6_PRCVEN,"
			cQrySC6 += "SC6.C6_PRUNIT,SC6.C6_VALDESC,"
			cQrySC6 += "SC6.C6_VALOR,SC6.C6_UNSVEN,SC6.C6_ENTREG,SC6.C6_DATFAT, "
			cQrySC6 += "SC6.C6_DESCONT,SC6.C6_QTDLIB2,"
			cQrySC6 += "SC6.R_E_C_N_O_ SC6RECNO, SC6TMP.RECNOSB1 SB1RECNO"
			cQrySC6 += ",SC6.C6_QTDEMP2 ,SC6.C6_QTDENT2 "
			If cPaisLoc <> "BRA"
				cQrySC6 += ",SC6.C6_GERANF,SC6.C6_CONTRAT,SC6.C6_ITEMCON "
			EndIf
			cQrySC6 += " FROM "+RetSqlName("SC6")+" SC6 "
			cQrySC6 += " INNER JOIN " +oTempSC6:GetRealName()+ " SC6TMP "
			cQrySC6 += " ON "
			cQrySC6 += " SC6.C6_NUM          = SC6TMP.C6_NUM  "
			cQrySC6 += " and SC6.C6_ITEM     = SC6TMP.C6_ITEM  "
			cQrySC6 += " and SC6.C6_PRODUTO  = SC6TMP.C6_PRODUTO "
			cQrySC6 += " and SC6.R_E_C_N_O_  = SC6TMP.RECNOSC6 "
			cQrySC6 += " and SC6TMP.EXISTSB1 = ?"
			cQrySC6 += " WHERE SC6.C6_FILIAL = ?"
			cQrySC6 += " AND SC6.D_E_L_E_T_  = ? "
			cQrySC6 += " ORDER BY C6_FILIAL,C6_NUM,C6_ITEM,C6_PRODUTO "
			cQrySC6 := ChangeQuery(cQrySC6)
		EndIf
		aBind := {}
		AADD(aBind,'1')
		AADD(aBind,xFilial( "SC6" ))
		AADD(aBind,Space(1))

		dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySC6,aBind),cAliasSC6,.T.,.T.)

		M215Comp('SC6',cAliasSC6)

		lLiberOk  := .T.
		lResidOk  := .T.
		lFaturOk  := .F.

		If l215Regua
			oObj:SetRegua1(SC6->(LastRec()))
			oObj:IncRegua1(cMensagem)
		EndIf
		PulseLife(oObj) //- pulso de conexão

		cFilialSC6 := xFilial("SC6")
		While !(cAliasSC6)->(Eof()) .And. (cAliasSC6)->C6_FILIAL == cFilialSC6 .And. cFilialSC6 != aFilTabs[TabelaSC6][2]
			lContinua := .T.
			cQuebra   := (cAliasSC6)->C6_NUM
			BEGIN TRANSACTION
				If lContinua
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza os acumulados dos pedidos de venda entregue          ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cAliasSD2 := "SD2MA215PROC1"
					If lMA215SD2


						cQuery := "SELECT D2_FILIAL,D2_PEDIDO,D2_ITEMPV,D2_QUANT,D2_QTSEGUM,D2_COD,D2_DOC,D2_SERIE,D2_EMISSAO,D2_REMITO "
						cQuery += "FROM " +cSD2Table+ " SD2 "
						cQuery += "WHERE "

						If !Empty(cFilialSC6)
							cQuery += "SD2.D2_FILIAL='"+cFilialSD2+"' AND "
						EndIf

						cQuery += " SD2.D2_PEDIDO = '"+(cAliasSC6)->C6_NUM+"' "
						cQuery += " AND SD2.D2_ITEMPV = '"+(cAliasSC6)->C6_ITEM+"' "
						cQuery += " AND SD2.D2_COD = '"+(cAliasSC6)->C6_PRODUTO+"' "

						cQuery := ExecBlock("MA215SD2",.F.,.F.,cQuery)
						cQuery += " AND SD2.D_E_L_E_T_=' ' "

						cQuery += "ORDER BY "+SqlOrder(SD2->(IndexKey()))

						cQuery := ChangeQuery(cQuery)

						dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSD2,.T.,.T.)

						M215Comp('SD2',cAliasSD2)

					Else
						if cQrySD2==nil
							cQrySD2 := "SELECT D2_FILIAL,D2_PEDIDO,D2_ITEMPV,D2_QUANT,D2_QTSEGUM,D2_COD,D2_DOC,D2_SERIE,D2_EMISSAO,D2_REMITO "
							cQrySD2 += " FROM " +cSD2Table+ " SD2 "
							cQrySD2 += " INNER JOIN  " +oTempSC6:GetRealName()+ " SC6 "
							cQrySD2 += " ON SC6.C6_NUM      = SD2.D2_PEDIDO "
							cQrySD2 += " AND SC6.C6_ITEM    = SD2.D2_ITEMPV"
							cQrySD2 += " AND SC6.C6_PRODUTO = SD2.D2_COD "
							cQrySD2 += " AND SC6.EXISTSB1   = ?"
							cQrySD2 += "WHERE SD2.D2_FILIAL= ?"
							cQrySD2 += " AND SD2.D2_PEDIDO = ?"
							cQrySD2 += " AND SD2.D2_ITEMPV = ?"
							cQrySD2 += " AND SD2.D2_COD    = ?"
							cQrySD2 += " AND SD2.D_E_L_E_T_= ?"
							cQrySD2 += "ORDER BY "+SqlOrder(SD2->(IndexKey()))

							cQrySD2 := ChangeQuery(cQrySD2)

						EndIf

						aBind := {}
						AADD(aBind,'1')
						AADD(aBind,cFilialSD2)
						AADD(aBind,(cAliasSC6)->C6_NUM)
						AADD(aBind,(cAliasSC6)->C6_ITEM)
						AADD(aBind,(cAliasSC6)->C6_PRODUTO)
						AADD(aBind,Space(1))

						dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySD2,aBind),cAliasSD2,.T.,.T.)

						M215Comp('SD2',cAliasSD2)

					EndIf

					While (cAliasSD2)->(!Eof()) .AND.;
							(cAliasSD2)->D2_PEDIDO == (cAliasSC6)->C6_NUM .AND.;
							(cAliasSD2)->D2_ITEMPV == (cAliasSC6)->C6_ITEM .AND.;
							(cAliasSD2)->D2_COD == (cAliasSC6)->C6_PRODUTO

						SC6->(MsGoto((cAliasSC6)->SC6RECNO))
						MaAvalSC6("SC6",5,"SC5",.F.,.F.,@lLiberOk,@lResidOk,@lFaturOk,.T.,,cAliasSD2)
						dbSelectArea(cAliasSD2)
						dbSkip()
					EndDo

					(cAliasSD2)->(dbCloseArea())

					dbSelectArea("SD2")

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Passa as variaveis lLiberok, lResidOk e lFaturOk sem referencia para nao modificar o conteudo ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					If !Empty((cAliasSC6)->C6_RESERVA) .And.(cAliasSC6)->C6_QTDRESE > 0
						SC0->(dbSetOrder(1))
						If SC0->(MsSeek(xFilial("SC0")+(cAliasSC6)->C6_RESERVA+(cAliasSC6)->C6_PRODUTO+(cAliasSC6)->C6_LOCAL))
							Ma215Res("SC0",(cAliasSC6)->C6_QTDRESE)
						Endif
					Endif

					SC6->(MsGoto((cAliasSC6)->SC6RECNO))
					SB1->(MsGoto((cAliasSC6)->SB1RECNO))
					MaAvalSC6("SC6",1,"SC5",.F.,.F.,lLiberOk,lResidOk,lFaturOk,.T.)

					dbSelectArea("SC9")
					dbSetOrder(1)

					oRegSC9:SetString(1 ,(cAliasSC6)->C6_NUM)
					oRegSC9:SetString(2 ,(cAliasSC6)->C6_ITEM)
					oRegSC9:SetString(3 ,(cAliasSC6)->C6_PRODUTO)

					cAliasSC9 := "SC9MA215PROC"
					If __l215VLib
						oRegSC9:OpenAlias(cAliasSC9)
					Else
						cQuery := oRegSC9:GetFixQuery()
						MpSysOpenQuery(cQuery,cAliasSC9)
					EndIf

					dbSelectArea(cAliasSC9)

					While (cAliasSC9)->(!Eof())

						SC9->(MSGoto((cAliasSC9)->RECNOSC9))

						aSaldos := {}
						If Localiza(SC9->C9_PRODUTO) .And. ;
							(!IntWms(SC9->C9_PRODUTO) .Or. !(SC9->C9_BLWMS$'01;02;03'))

							cAliasSDC := "SDCMA215PROC2"

							If cQrySDC == nil
								cQrySDC := "SELECT DC_PRODUTO, DC_LOCAL, DC_LOCALIZ, DC_LOTECTL, DC_NUMLOTE, DC_NUMSERI, "
								cQrySDC += " DC_QUANT, DC_QTSEGUM, DC_SEQ, DC_ITEM, DC_FILIAL"
								cQrySDC += "FROM "+RetSqlName("SDC")+" SDC "
								cQrySDC += "WHERE SDC.DC_FILIAL= ? AND "
								cQrySDC += "SDC.DC_PRODUTO = ? AND "
								cQrySDC += "SDC.DC_LOCAL = ? AND "
								cQrySDC += "SDC.DC_ORIGEM = ? AND "
								cQrySDC += "SDC.DC_PEDIDO = ? AND "
								cQrySDC += "SDC.DC_ITEM = ? AND "
								cQrySDC += "SDC.DC_SEQ = ? AND "
								cQrySDC += "SDC.D_E_L_E_T_= ? "
								cQrySDC += "ORDER BY "+SqlOrder(SDC->(IndexKey()))
								cQrySDC := ChangeQuery(cQrySDC)
							EndIF
							aBind := {}
							AADD(aBind,xFilial("SDC"))
							AADD(aBind,SC9->C9_PRODUTO)
							AADD(aBind,SC9->C9_LOCAL)
							AADD(aBind,'SC6')
							AADD(aBind,SC9->C9_PEDIDO)
							AADD(aBind,SC9->C9_ITEM)
							AADD(aBind,SC9->C9_SEQUEN)
							AADD(aBind,Space(1))

							dbUseArea(.T.,"TOPCONN",TcGenQry2(,,cQrySDC,aBind),cAliasSDC,.T.,.T.)

							M215Comp('SDC',cAliasSDC)

							While (cAliasSDC)->(!Eof())
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ Atualiza arquivo de empenhos               ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								aadd(aSaldos,{	(cAliasSDC)->DC_LOTECTL,;
												(cAliasSDC)->DC_NUMLOTE,;
												(cAliasSDC)->DC_LOCALIZ,;
												(cAliasSDC)->DC_NUMSERI,;
												(cAliasSDC)->DC_QUANT,;
												If( Empty( (cAliasSDC)->DC_QTSEGUM ), ConvUm((cAliasSDC)->DC_PRODUTO,(cAliasSDC)->DC_QUANT,0,2),(cAliasSDC)->DC_QTSEGUM ),;
												SC9->C9_DTVALID,;
												"",;
												"",;
												"",;
												(cAliasSDC)->DC_LOCAL})

								(cAliasSDC)->(dbSkip())
							EndDo
							(cAliasSDC)->(dbCloseArea())
							dbSelectArea("SDC")
						Else
							nQtdLib2 := If(Empty(SC9->C9_QTDLIB2),ConvUm(SC9->C9_PRODUTO,SC9->C9_QTDLIB,0,2),SC9->C9_QTDLIB2)
							aSaldos := {{ "","","","",SC9->C9_QTDLIB,nQtdLib2,	Ctod(""),"","","",SC9->C9_LOCAL}}
						EndIf
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Atualiza os acumulados da liberacao do pedido de venda        ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MaAvalSC9("SC9",1,aSaldos,,.T.)

						dbSelectArea(cAliasSC9)
						dbSkip()
					EndDo

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza os acumulados do item do pedido de venda             ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					SC6->(MsGoto((cAliasSC6)->SC6RECNO))

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Verificacao dos acumulados do SC5                                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If ( SC6->C6_QTDVEN > (SC6->C6_QTDEMP+SC6->C6_QTDENT) .And. AllTrim(SC6->C6_BLQ)<>"R")
						lLiberOk := .F.
					EndIf
					If (! "R" $ SC6->C6_BLQ )
						lResidOk := .F.
					EndIf
					If ( SC6->C6_QTDVEN > SC6->C6_QTDENT .And. AllTrim(SC6->C6_BLQ)<>"R")
						lFaturOk := .T.
					EndIf

					dbSelectArea(cAliasSC9)
					dbCloseArea()
					dbSelectArea("SC9")
				EndIf
				(cAliasSC6)->(dbSkip())
				If l215Regua
					oObj:IncRegua1(cMensagem)
				EndIf
				PulseLife(oObj) //- pulso de conexão
				If cQuebra <> (cAliasSC6)->C6_NUM
					SC5->(dbSetOrder(1))
					If SC5->(MsSeek(xFilial("SC5")+cQuebra))
						SC5->(MaAvalSC5("SC5",1,.F.,.F.,@lLiberOk,@lResidOk,@lFaturOk,.T.))
					EndIf
					lLiberOk  := .T.
					lResidOk  := .T.
					lFaturOk  := .F.
				EndIf

			End Transaction
		EndDo


		FWFreeArray(aSaldos)

		aFilTabs[TabelaSC6][2] := cFilialSC6

		(cAliasSC6)->(dbCloseArea())
		dbSelectArea("SC6")
	EndIf
	aSize(aBind,0)
	aBind := nil
Return


/*/{Protheus.doc} GeraSC6Tmp
	Seleciona os  itens de pedido de vendas em aberto para o processamento
	@type  Function
	@author reynaldo
	@since 06/04/2021
	@version 1.0
	@param nenhum
	@return oTempSC6, Objeto, FwTemporarytable com os registros dos itens de pedido de venda a serem processados
	@example
	(examples)
	@see (links_or_references)
	/*/
Static Function GeraSC6Tmp()
Local cAliTMPSC6
Local aFieldSC6
Local aTmpFields
Local nX
Local cSX3Campo
Local aStruField
Local cSC6Table
Local cQuery
Local cQryFields
Local nLenC6_BLQ
Local cQrySelect

	nLenC6_BLQ := Len(SC6->C6_BLQ)
	aFieldSC6 := {"C6_NUM","C6_ITEM","C6_PRODUTO"}

	aTmpFields := {}

	For nX := 1 to len(aFieldSC6)
		cSX3Campo := aFieldSC6[nX]
		aStruField := FWSX3Util():GetFieldStruct(cSX3Campo)
		aadd(aTmpFields,aStruField)
	Next nX

	aadd(aTmpFields,{"RECNOSC6","N",16,0})
	aadd(aTmpFields,{"RECNOSB1","N",16,0})
	aadd(aTmpFields,{"EXISTSB1","C",1,0})

	If oTempSC6 == nil
		cAliTMPSC6 := GetNextAlias()
		//-------------------
		//Criação do objeto
		//-------------------
		oTempSC6 := FWTemporaryTable():New( cAliTMPSC6 )
		//--------------------------
		//Monta os campos da tabela
		//--------------------------
		oTempSC6:SetFields( aTmpFields )

		//--------------------------
		//Monta os indices da tabela
		//--------------------------
		oTempSC6:AddIndex("01", {"C6_NUM","C6_ITEM","C6_PRODUTO"} )

		//------------------
		//Criação da tabela
		//------------------
		oTempSC6:Create()
	Else
		TcSqlExec('truncate table '+oTempSC6:GetRealName())
	EndIf
	cSC6Table := oTempSC6:GetRealName()
	If oQuerySC6 == nil
		cQuery := "SELECT SC6.C6_NUM,SC6.C6_ITEM,SC6.C6_PRODUTO "
		cQuery += ",SC6.R_E_C_N_O_ RECNOSC6 "
		cQuery += ",ISNULL(SB1.R_E_C_N_O_,0) RECNOSB1 "
		cQuery += ",CASE WHEN SB1.R_E_C_N_O_ >0 THEN '1' ELSE '0' END EXISTSB1 "
		cQuery += "FROM "+RetSqlName("SC6")+" SC6 "
		cQuery += " LEFT JOIN "+RetSqlName("SB1")+" SB1 "
		cQuery += "ON "
		cQuery += "SB1.B1_FILIAL= ? AND "
		cQuery += "SB1.B1_COD=SC6.C6_PRODUTO AND "
		cQuery += "SB1.D_E_L_E_T_= ? "
		cQuery += "WHERE "
		cQuery += "SC6.C6_FILIAL= ? AND "
		cQuery += "SC6.C6_BLQ <> ? AND "
		cQuery += "SC6.C6_BLQ <> ? AND "
		cQuery += "(SC6.C6_QTDVEN > SC6.C6_QTDENT OR (SC6.C6_QTDVEN <= SC6.C6_QTDENT AND SC6.C6_ENTREG>= ?)) AND "
		cQuery += "SC6.D_E_L_E_T_= ? "
		cQuery += "ORDER BY C6_FILIAL,C6_NUM,C6_ITEM,C6_PRODUTO "
		cQuery := ChangeQuery(cQuery)

		oQuerySC6 := FWPreparedStatement():New(cQuery)
	EndIf

	oQuerySC6:SetString(1, xFilial( "SB1" ))
	oQuerySC6:SetString(2,Space(1))
	oQuerySC6:SetString(3,xFilial("SC6"))
	oQuerySC6:SetString(4,PadR('S',nLenC6_BLQ))
	oQuerySC6:SetString(5,PadR('R',nLenC6_BLQ))
	oQuerySC6:SetString(6,DTOS(dDataBase-31))
	oQuerySC6:SetString(7,Space(1))

	cQrySelect := oQuerySC6:GetFixQuery()

	cQryFields := ""
	For nX := 1 to len(aTmpFields)
		cQryFields += aTmpFields[nX,1] + " ,"
	Next nX
	cQryFields := left(cQryFields, len(cQryFields)-1)

	cQuery := "INSERT INTO "
	cQuery += cSC6Table
	cQuery += " ( "
	cQuery += cQryFields
	cQuery +=" ) "
	cQuery += cQrySelect

	If TcSqlExec(cQuery) < 0
		UserException( STR0022 +TCSQLError() ) // "Falha na seleção dos itens de pedidos de venda: "
	EndIf

	aSize(aFieldSC6,0)
	Asize(aTmpFields,0)
	aSize(aStruField,0)

	aFieldSC6 := nil
	aTmpFields:= nil
	aStruField:= nil

Return

/*/{Protheus.doc} GeraSC9Tmp
	Selecao dos itens de pedido de vendas liberados que estão associadas aos itens de pedidos de venda selecionados
	@type  Function
	@author reynaldo
	@since 06/04/2021
	@version 1.0
	@param cSC6Table, caracter, Nome da tabela temporaria que contem os registros dos itens de pedido de venda selecionados
	@return oTempSD2, Objeto, FwTemporarytable com os registros dos itens de pedido de venda liberados  que estão relacionadas com os itens de pedido de venda
	@example
	(examples)
	@see (links_or_references)
	/*/
Static Function GeraSC9Tmp(cSC6Table)
Local cAliTMPSC9
Local aFieldSC9
Local aTmpFields
Local nX
Local cSX3Campo
Local aStruField
Local cSC9Table
Local cQuery
Local cFilialSC9
Local cQryFields
Local cQrySelect

	aFieldSC9 := {"C9_PEDIDO","C9_ITEM","C9_SEQUEN","C9_PRODUTO"}

	aTmpFields := {}

	For nX := 1 to len(aFieldSC9)
		cSX3Campo := aFieldSC9[nX]
		aStruField := FWSX3Util():GetFieldStruct(cSX3Campo)
		aadd(aTmpFields,aStruField)
	Next nX

	aadd(aTmpFields,{"RECNOSC9","N",16,0})

	If oTempSC9 == nil

		cAliTMPSC9 := GetNextAlias()

		//-------------------
		//Criação do objeto
		//-------------------
		oTempSC9 := FWTemporaryTable():New( cAliTMPSC9 )
		//--------------------------
		//Monta os campos da tabela
		//--------------------------
		oTempSC9:SetFields( aTmpFields )

		//--------------------------
		//Monta os indices da tabela
		//--------------------------
		oTempSC9:AddIndex("01", {"C9_PEDIDO","C9_ITEM","C9_SEQUEN","C9_PRODUTO"} )

		//------------------
		//Criação da tabela
		//------------------
		oTempSC9:Create()
	Else
		TcSqlExec('truncate table '+oTempSC9:GetRealName())
	EndIf
	cSC9Table := oTempSC9:GetRealName()

	cFilialSC9 := xFilial("SC9")

	If oQuerySC9 == nil
		cQuery := " select SC9.C9_PEDIDO,SC9.C9_ITEM, SC9.C9_SEQUEN, SC9.C9_PRODUTO, SC9.R_E_C_N_O_ RECNOSC9 "
		cQuery += " from "+RetSqlName("SC9")+" SC9 "
		cQuery += " inner join " +cSC6Table+ " SC6 "
		cQuery += " on SC9.C9_PEDIDO = SC6.C6_NUM and "
		cQuery += " SC9.C9_ITEM = SC6.C6_ITEM and "
		cQuery += " SC9.C9_PRODUTO = SC6.C6_PRODUTO and "
		cQuery += " SC6.EXISTSB1= ? " //-1
		cQuery += " WHERE SC9.C9_FILIAL= ?" //-2
		cQuery += " AND SC9.C9_NFISCAL = ?" //-3
		cQuery += " AND SC9.C9_REMITO = ?"  //-4
		cQuery += " AND SC9.D_E_L_E_T_= ? " //-5
		cQuery := ChangeQuery(cQuery)

		oQuerySC9 := FWPreparedStatement():New(cQuery)

		//- esses valores são setados aqui, pois são sempre os mesmos
		oQuerySC9:SetString(1,'1')
		oQuerySC9:SetString(3,Space(Len(SC9->C9_NFISCAL)))
		oQuerySC9:SetString(4,Space(Len(SC9->C9_REMITO)))
		oQuerySC9:SetString(5,Space(1))
	EndIf

	oQuerySC9:SetString(2,cFilialSC9)

	cQrySelect := oQuerySC9:GetFixQuery()

	cQryFields := ""
	For nX := 1 to len(aTmpFields)
		cQryFields += aTmpFields[nX,1] + " ,"
	Next nX
	cQryFields := left(cQryFields, len(cQryFields)-1)

	cQuery := "INSERT INTO "
	cQuery += cSC9Table
	cQuery += " ( "
	cQuery += cQryFields
	cQuery +=" ) "
	cQuery += cQrySelect

	If TcSqlExec(cQuery) < 0
		UserException( STR0023 +TCSQLError() ) // "Falha na seleção dos itens de pedidos de venda liberados: "
	EndIf

	FWFreeArray(aFieldSC9)
	FWFreeArray(aTmpFields)
	FWFreeArray(aStruField)

Return

/*/
	{Protheus.doc} PulseLife
	Envia para o appserver um "pulso" da conexão do smartclient esta vivo
	Este procedimento evita que a conexão fique presa caso o smartclient caia
	@type  Function
	@author Nilton Rodrigues
	@since 06/04/2021
	@version 1.0
/*/
Static Function PulseLife(oObj)
	//- garante que não exista o objeto de régua
	If oObj == nil .and. Seconds() - nPulseLife > 30
		nPulseLife := Seconds()
		SYSREFRESH()//- sincroniza com o appserver
	EndIf
Return

/*/
	{Protheus.doc} M215Comp
	Efetua os ajustes dos campos que não são Caracter ou Memo
	@type  Function
	@author Nilton Rodrigues
	@since 06/04/2021
	@version 1.0
/*/
Static Function M215Comp(cAliasTab as character,cAliasTMP as character)
Local aStru as Array
Local nX    as numeric

aStru := (cAliasTab)->(dbStruct())

For nX := 1 To Len(aStru)
	If !aStru[nX][2] $ "CM" .AND. FieldPos(aStru[nX][1]) > 0
		TcSetField(cAliasTMP,aStru[nX][1],aStru[nX][2],aStru[nX][3],aStru[nX][4])
	EndIf
Next nX

aSize(aStru,0)
aStru := nil

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} SchedDef
Retorna as perguntas definidas no schedule.
/*/
//-------------------------------------------------------------------

Static Function Scheddef()

Local aParam  := {}

aParam := { "P",;           //Tipo R para relatorio P para processo
			"",;      //Pergunte do relatorio, caso nao use passar ParamDef
			,;              //Alias
			,;              //Array de ordens
			}               //Titulo
MsgAlert (OemtoAnsi(STR0029)) //'Esta rotina executa todas filiais da empresa de forma exclusiva, portanto o agendamento deve ser feito para uma filial apenas.')

Return aParam

/*/
{Protheus.doc} A215Painel
Atualiza o texto do painel durante o processamento
@author Squad Entradas
@since 08/09/2022
/*/
Static Function A215Painel(oObj, cFilProc, cMensagem)

	oObj:cCaption := cFilProc + cMensagem
	ProcessMessages()
	
Return
