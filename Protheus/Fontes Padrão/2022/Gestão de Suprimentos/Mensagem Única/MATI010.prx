#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWADAPTEREAI.CH"
#INCLUDE "MATI010.CH"
#INCLUDE "RWMAKE.CH"
#INCLUDE "TBICONN.CH"
#INCLUDE "FWLIBVERSION.CH"

#DEFINE nTamRot 50
#DEFINE nTamMod 50

Static cRotina	:= "MATA010"
Static cItemRot	:= "ITEM"
//-------------------------------------------------------------------------------------------------
/*/{Protheus.doc} MATI010

Funcao de integracao com o adapter EAI para recebimento do  cadastro de
Produto (SB1) utilizando o conceito de mensagem unica.

@param xEnt, caracter/Object, Variavel com conteudo xml/obj para envio/recebimento.
@param nTypeTrans, numeric, Tipo de transacao. (Envio/Recebimento)
@param cTypeMessage, caracter, Tipo de mensagem. (Business Type, WhoIs, etc)
@param cVersion, caracter, Versão da Mensagem Única TOTVS
@param cTransac, caracter, Nome da mensagem iniciada no adapter
@param lEAIObj, Logical Recebe XML ou Objeto EAI

@author  Leandro Luiz da Cruz
@version P11
@since   24/09/2012
@return  aRet   - (array)   Contém o resultado da execução e a mensagem XML de retorno.
       aRet[1] - (boolean)  Indica o resultado da execução da função
       aRet[2] - (caracter) Mensagem XML para envio
	   aRet[3] - (caracter) Nome da mensagem
@obs    O método irá retornar um objeto do tipo TOTVSBusinessEvent caso
        o tipo da mensagem seja EAI_BUSINESS_EVENT ou um tipo
        TOTVSBusinessRequest caso a mensagem seja do tipo TOTVSBusinessRequest.
        O tipo da classe pode ser definido com a função EAI_BUSINESS_REQUEST.
/*/
//-------------------------------------------------------------------------------------------------
Function MATI010( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj )
Local lRet     := .T.	    //Indica o resultado da execução da função
Local cError   := ""	    //Mensagem de erro do parse no xml recebido como parâmetro
Local cXmlRet  := ""
Local cWarning := ""     	//Mensagem de alerta do parse no xml recebido como parâmetro
Local aRet	   := {.T.,""} //Array de retorno da execucao da versao
Local cRet	   := ''		//Xml que será enviado pela função
Local aVersao  := {}
Local cVersao  := ""
Local cRelease := ""

Private lIntegPPI 	:= .F.
Private oXml   		:= Nil

Default xEnt			:= ""
Default nTypeTrans		:= "3"
Default cTypeMessage	:= ""
Default cVersion		:= ""
Default cTransac		:= ""
Default lEAIObj			:= .F.

//Verifica se está sendo executado para realizar a integração com o PPI.
//Se a variável lRunPPI estiver definida, e for .T., assume que é para o PPI.
//Variável é criada no fonte mata010.prx, na função MATA010PPI().
If Type("lRunPPI") == "L" .And. lRunPPI
	lIntegPPI := .T.
EndIf

//????????????????????????????????????????????????????????????????
// Telemetria - Uso da classe FwCustomMetrics                   //
// Metrica - setAverageMetric                                   //
// Grava se usa MATI010 (mensagem unica)                        //
//????????????????????????????????????????????????????????????????
If FWLibVersion() >= "20210628"
	FWCustomMetrics():setAverageMetric(	"MATI010"/*cSubRoutine*/,;
													"estoque-protheus_eai-cadastro-produtos_count" /*cIdMetric*/,;
													1/*nValue*/,;
                                        /*dDateSend*/,;
                                        /*nLapTime*/,;
                                        "MATI010"/*cRotina*/)
EndIf

//Mensagem de Entrada
If nTypeTrans == TRANS_RECEIVE

	If !lEAIObj
		If cTypeMessage == EAI_MESSAGE_BUSINESS .Or. cTypeMessage == EAI_MESSAGE_RESPONSE
				
			
			oXml := xmlParser(xEnt, "_", @cError, @cWarning)

			If oXml != Nil .And. Empty(cError) .And. Empty(cWarning)
					// Versão da mensagem
					If Type("oXml:_TOTVSMessage:_MessageInformation:_version:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_MessageInformation:_version:Text)
						aVersao := StrTokArr(oXml:_TOTVSMessage:_MessageInformation:_version:Text, ".")
						cVersao := aVersao[1]
						cRelease := aVersao[2]
					Else
						If Type("oXml:_TOTVSMessage:_MessageInformation:_StandardVersion:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_MessageInformation:_StandardVersion:Text)
							aVersao := StrTokArr(oXml:_TOTVSMessage:_MessageInformation:_StandardVersion:Text, ".")
							cVersao := aVersao[1]
							cRelease := aVersao[2]
						Else
							lRet    := .F.
							cXmlRet := STR0005 //"Versão da mensagem não informada!"
							aRet := {lRet, cXmlRet, cItemRot }
						Endif
					EndIf
			Else
					lRet    := .F.
					cXmlRet := STR0006 //"Erro no parser!"
					aRet := { lRet, cXmlRet , cItemRot }
			EndIf
			If lRet
			
				If cVersao == "1"
					aRet := v1000( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, cVersao )
				ElseIf cVersao $ "2|3|4"
					aRet := v2000( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, oXml ,cVersao ,cRelease )
				Else
					lRet    := .F.
					cXmlRet := STR0007 //"A versão da mensagem informada não foi implementada!"
					aRet := { lRet, cXmlRet, cItemRot  }
					Return aRet
				EndIf
			EndIf


		ElseIf cTypeMessage == EAI_MESSAGE_WHOIS
				
			aRet := v2000( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, oXml)
		Endif
	Else
		If cTypeMessage == EAI_MESSAGE_BUSINESS .Or. cTypeMessage == EAI_MESSAGE_RESPONSE
			If !empty(xEnt:getHeaderValue("Version"))
				cVersao := StrTokArr(xEnt:getHeaderValue("Version"), ".")[1]
				cRelease := StrTokArr(xEnt:getHeaderValue("Version"), ".")[2]
				//Faz chamada da versão especifica   
				If cVersao == "4"
					aRet := v4000_O( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, cVersao, cRelease)
				Else
					lRet    := .F.
					//tem que trocar as mensagem de erro para o Objeto também
					cRet := STR0007 //"A versão da mensagem informada não foi implementada!"
					aRet := { lRet , cRet, cItemRot }
				EndIf
			Else
				lRet := .F.
				cRet := STR0005 //"Versão da mensagem não informada!"
				aRet := { lRet , cRet, cItemRot }
			EndIf
		ElseIf  cTypeMessage == EAI_MESSAGE_WHOIS
			cRet := '4.000|4.002|4.003|4.005|4.007'
			aRet := {lRet , cRet, cItemRot ,"JSON"}
		EndIf
	EndIf

ElseIf nTypeTrans == TRANS_SEND
		If lIntegPPI .AND. !lEAIObj
			aRet := v2000( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, oXml )
			aRet := { aRet[1] , aRet[2] , cItemRot }
		Else
				If ( Empty( cVersion ) )
					lRet    := .F.
					cXmlRet := STR0008 //"Versão não informada no cadastro do adapter."
					aRet := {lRet, cXmlRet}
					Return {aRet[1], aRet[2], cItemRot }
				Else
					aVersao := StrTokArr( cVersion , ".")
					cVersao := aVersao[1]
					cRelease := aVersao[2]
				EndIf

			If lRet .AND. !lEAIObj
				If lIntegPPI
					aRet := v2000( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, oXml )
				Else

					If cVersao == "1"
						aRet := v1000( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, cVersao )
					ElseIf cVersao $ "2|3|4"
						aRet := v2000(  xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, oXml, cVersao, cRelease )
					Else
						lRet    := .F.
						cXmlRet := STR0007 //"A versão da mensagem informada não foi implementada!"
						aRet := {lRet, cXmlRet, cItemRot }
					EndIf
				EndIf
			ElseIf lRet
				cVersao := StrTokArr(RTrim(PmsMsgUVer( cItemRot , cRotina )), ".")[1]

				//Faz chamada da versão especifica
				If cVersao == "4"
					aRet := v4000_O( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj )
				Else
					//tem que trocar as mensagem de erro para o Objeto também
					cRet := STR0007 //"A versão da mensagem informada não foi implementada!"
					aRet := { lRet , cRet , cItemRot }
				EndIf
			EndIf

	EndIf

EndIf

Return aRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±º Function  ³ MATI010  º Autor ³ Marcelo C. Coutinho  º Data ³  28/10/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Desc.    ³ Funcao de integracao com o adapter EAI para recebimento e    º±±
±±º          ³ envio de informações do cadastro de produtos        (SB1)    º±±
±±º          ³ utilizando o conceito de mensagem unica.                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Param.   ³ cXML - Variavel com conteudo xml para envio/recebimento.     º±±
±±º          ³ nTypeTrans - Tipo de transacao. (Envio/Recebimento)          º±±
±±º          ³ cTypeMessage - Tipo de mensagem. (Business Type, WhoIs, etc) º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Retorno  ³ aRet - Array contendo o resultado da execucao e a mensagem   º±±
±±º          ³        Xml de retorno.                                       º±±
±±º          ³ aRet[1] - (boolean) Indica o resultado da execução da função º±±
±±º          ³ aRet[2] - (caracter) Mensagem Xml para envio                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Uso      ³ MATA010                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function v1000( cXml, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, cVersao )

	Local aArea	   	:= GetArea()
	Local aAreaSA7	:= SA7->(GetArea())
	Local aAreaSBM	:= SBM->(GetArea())
	Local lRet     	:= .T.
	Local lExclui	:= .T.
	Local cXMLRet  	:= ""
	Local cError	:= ""
	Local cErrorDsc	:= ""
	Local aErrosMsg	:= {}
	Local cWarning 	:= ""
	Local nCount	:= 0
	Local aCab		:= {}
	Local aDadosSB5	:={}
	Local nOpcX		:= 0
	Local nOpcXC	:= 0
	Local cLogErro 	:= ""
	Local aErroAuto	:= {}
	Local cEvent	:= "upsert"
	Local cCodPro	:= ""
	Local cDescPro	:= ""
	Local cDescProB5:= ""
	Local cDescGrupo:= ""	//Descricao do grupo do produto
	Local nPeso	  	:= 0	//Peso do produto
	Local nLoteMin	:= 0	//Lote minimo de venda
	Local nLote		:= 0	//Lote Economic
	Local lInitCode	:= .F.//Verifica se possui inicializador padrao

	//Variaveis utilizadas no De/Para de Codigo Interno X Codigo Externo
	Local cMarca	:= "" //Armazena a Marca (LOGIX,PROTHEUS,RM...) que enviou o XML
	Local cValExt	:= "" //Codigo externo utilizada no De/Para de codigos - Tabela XXF
	Local cValInt	:= "" //Codigo interno utilizado no De/Para de codigos - Tabela XXF
	Local cAlias	:= "SB1"
	Local cCampo	:= 'B1_COD'
	Local cProdActiv:= "1" //1=Ativo;0=Não Ativo
	Local lMktPlace := SuperGetMv("MV_MKPLACE",.F.,.F.)
	Local cIntCC	:= ' '
	Local cIntLocal	:= ' '
	Local cIntUM	:= ' '
	Local cIntGrupo	:= ' '

	Local lFilSB1	:= .F.	// identifica se o conteúdo da filial foi gravado no de/para
	Local cKeySB1	:= ' '
	Local cKeySB5	:= ' '
	Local nTamFil	:= FWSizeFilial()
	Local nTamCod	:= TamSx3('B1_COD')[1]
	Local lAltValInt:= SuperGetMv("MV_AVALINT",,.F.)
	Local lItemInfo	:= SuperGetMv("MV_ITEMINF",.F.,.T.)
	Local lMt010int	:= ExistBlock("MT010INT")
	Local aProdCli	:= {}
	Local lM010LocP	:= ExistBlock("M010LOCP")
	Local cLocPad	:= ""
	Local cAuxLocPad:= ""
	Local oModel        := FWModelActive()
    Local lMVC          := TableInDic("G3Q", .F.) .And. oModel <> Nil .And. oModel:cSource == "MATA010"
	Local nOperation	:= 0

	Private oXmlM010		:= Nil
	Private lMsErroAuto    	:= .F.
	Private lAutoErrNoFile	:= .T.
	Private nModulo        	:= 5

	If ( Type("Inclui") == "U" )
		Private Inclui := .F.
	EndIf

	If ( Type("Altera") == "U" )
		Private Altera := .F.
	EndIf

	Default cVersao			:= '1'
	Default cVersion		:= ''
	Default cTransac		:= ''
	Default lEAIObj			:= .F.

	//Tratamento do recebimento de mensagens
	If ( nTypeTrans == TRANS_RECEIVE )

		//Business Message
		If ( cTypeMessage == EAI_MESSAGE_BUSINESS )

			oXmlM010 := XmlParser( cXml, "_", @cError, @cWarning )

			//Valida se houve erro no parser
			If ( oXmlM010 <> Nil ) .And. ( Empty(cError) ) .And. ( Empty(cWarning) )
				If Type("oXmlM010:_TotvsMessage:_MessageInformation:_Product:_Name:Text") <> "U"
					cMarca :=  oXmlM010:_TotvsMessage:_MessageInformation:_Product:_Name:Text
				EndIf

				If lMktPlace
					If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text") <> "U"
						cValExt := oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text
					ElseIf Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text") <> "U"
						cValExt := oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text
					EndIf
				Else
					If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text") <> "U"
						cValExt := oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text
					EndIf
				Endif

				If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text") <> "U"
					cDescPro := oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text
				EndIf

				//--------------------------------------------------------------------------------------
				//-- Tratamento utilizando a tabela XXF com um De/Para de codigos
				//--------------------------------------------------------------------------------------
				cValInt := SubStr( CFGA070INT( cMarca, cAlias, cCampo , cValExt ), 1, nTamFil+nTamCod )

				//-------------------------------------------------------------------
				//  Verifica se a filial já foi gravada com o código do produto
				// para tratar o modo como a rotina foi construída
				lFilSB1 := !Empty(cValInt) .And. ( SubStr( cValInt, 1, nTamFil)==xFilial('SB1') ) .And. SB1->( DbSeek( cValInt ) )

				If Upper(oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "DELETE"
					nOpcX := 5
					nOpcXC:= 5  /// complemento
					cKeySB1 := If( lFilSB1, cValInt, xFilial("SB1")+cValInt )
					If !Empty(cValInt) .And. SB1->( DbSeek( cKeySB1 ) )
						lExclui := .T.
					Else
						lExclui := .F.
						lRet := .F.
						cXmlRet := EncodeUTF8(STR0003 + cValExt) // "Registro não encontrado para exclusão "
					EndIf
				Else // nOpcX <> 5
					cKeySB1 := If( lFilSB1, cValInt, xFilial("SB1")+cValInt )
					cKeySB5 := xFilial("SB5") + If( lFilSB1, Substr(cValInt,nTamFil+1,nTamCod), cValInt )
					If !Empty(cValInt) .And. SB1->(DbSeek( cKeySB1 ) )
						nOpcX 	:= 4
						Altera 	:= .T.

						SB5->(DbSetOrder(1))
						If !SB5->(DBSeek(cKeySB5))
							/// se encontrar o produco na Sb1, e não encontrar o complemento SB5 - faz update na Sb1 e Insert na SB5
							nOpcXC 	:= 3 // Inclui
						Else
							nOpcXC 	:= 4 // Altera
						Endif

					Else
						nOpcX 	:= 3
						nOpcXC 	:= 3 // Inclui - SB5
						Inclui 	:= .T.
					EndIf
				EndIf

				If nOpcX == 3
					If Empty( GetSX3Cache( "B1_COD", "X3_RELACAO" ) )
						If lMt010int
							//Ponto de entrada para definir qual codigo deseja gravar no B1_COD
							cCodPro := ExecBlock("MT010INT",.F.,.F.,{oXmlM010})
						Else
							cCodPro := Substr(cValExt,1,TamSX3('B1_COD')[1])
						Endif
					Else
						lInitCode := .T.
					EndIf
				Else
					cCodPro := SB1->B1_COD
				EndIf

				If nOpcX <> 3 .Or. ( nOpcX == 3 .And. !lInitCode )
					Aadd(aCab,{"B1_COD" , cCodPro, Nil })
					Aadd(aDadosSB5,{"B5_COD" , cCodPro, Nil })     //// 	SB5   - FLAVIO
				EndIf

					If nOpcX <> 5

						//Descricao do produto
						Aadd( aCab, { "B1_DESC",      cDescPro,                                                                                Nil })
						Aadd( aDadosSB5, { "B5_CEME",      cDescPro,                                                                                Nil })   //// SB5 -- FLAVIO

						//Tipo do produto
						If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text") <> "U"
							Aadd( aCab, { "B1_TIPO",     oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text,         Nil })
						EndIf

						If lMktPlace
							//Unidade de medida
							If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureInternalId:Text") <> "U"
								cIntUM := CFGA070INT( cMarca, 'SAH', 'AH_UNIMED', oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureInternalId:Text )

								SAH->( DbSetOrder( 1 ) )
								If !Empty(cIntUM) .And. SAH->( Dbseek( cIntUM ) )
									Aadd( aCab, { "B1_UM", SAH->AH_UNIMED, Nil } )
								ElseIf Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text") <> "U"
									Aadd( aCab, { "B1_UM",   oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text,      Nil })
								EndIf
							ElseIf Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text") <> "U"
								Aadd( aCab, { "B1_UM",       oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text,      Nil })
							EndIf
						Else
							If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text") <> "U"
								Aadd( aCab, { "B1_UM",       oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text,      Nil })
							EndIf
						Endif

						If lMktPlace
							//Armazem padrao
							If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseInternalId:Text") <> "U"
								cIntLocal := CFGA070INT( cMarca, 'SAH', 'AH_UNIMED', oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseInternalId:Text )

								NNR->( DbSetOrder( 1 ) )
								If !Empty( cIntLocal ) .And. NNR->( DbSeek( cIntLocal ) )
									Aadd( aCab, { "B1_LOCPAD", NNR->NNR_CODIGO, Nil } )
								ElseIf Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text") <> "U"
									If !Empty( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text )
										Aadd( aCab, { "B1_LOCPAD", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text, Nil })
									EndIf
								EndIf
							ElseIf Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text") <> "U"
								If !Empty( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text )
									Aadd( aCab, { "B1_LOCPAD", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text, Nil })
								EndIf
							Else
								If nOpcX == 3
									NNR->(DbSetOrder(1)) // NNR_FILIAL+NNR_CODIGO

									If NNR->(dbSeek(xFilial("NNR")))
										If Empty(NNR->NNR_CODIGO)
											NNR->(DbSkip())
										EndIf
										cLocPad := NNR->NNR_CODIGO
									Endif
								Else
									cLocPad := Posicione("SB1",1,xFilial("SB1") + PadR(cCodPro,TamSx3("B1_COD")[1]),"B1_LOCPAD")
								Endif

								If lM010LocP //Ponto de entrada para local de estoque
									cAuxLocPad := ExecBlock("M010LOCP",.F.,.F.,{nOpcX,cCodPro,cLocPad})
									If valType(cAuxLocPad) == "C" .And. !Empty(cAuxLocPad)
										cLocPad := cAuxLocPad
									Endif
								Endif

								aAdd(aCab, {"B1_LOCPAD",cLocPad, Nil})
							EndIf
						Else
							If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text") <> "U"
								If !Empty( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text )
									Aadd( aCab, { "B1_LOCPAD", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text, Nil })
								EndIf
							Else
								If nOpcX == 3
									NNR->(DbSetOrder(1)) // NNR_FILIAL+NNR_CODIGO

									If NNR->(dbSeek(xFilial("NNR")))
										If Empty(NNR->NNR_CODIGO)
											NNR->(DbSkip())
										EndIf
										cLocPad := NNR->NNR_CODIGO
									Endif
								Else
									cLocPad := Posicione("SB1",1,xFilial("SB1") + PadR(cCodPro,TamSx3("B1_COD")[1]),"B1_LOCPAD")
								Endif

								If lM010LocP //Ponto de entrada para local de estoque
									cAuxLocPad := ExecBlock("M010LOCP",.F.,.F.,{nOpcX,cCodPro,cLocPad})
									If valType(cAuxLocPad) == "C" .And. !Empty(cAuxLocPad)
										cLocPad := cAuxLocPad
									Endif
								Endif

								aAdd(aCab, {"B1_LOCPAD",cLocPad, Nil})
							EndIf
						Endif

						// Origem
						If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Origin:_Code:Text") <> "U"
							Aadd( aCab, { "B1_ORIGEM",  oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Origin:_Code:Text,            Nil })
						ElseIf Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Origin:Text") <> "U"
							Aadd( aCab, { "B1_ORIGEM",  oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Origin:Text,            Nil })
						EndIf

						//IPI
						If Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_FiscalClassification:_Code:Text") <> "U"
							Aadd( aCab, { "B1_POSIPI",  oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_FiscalClassification:_Code:Text, Nil })
						ElseIf Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_FiscalClassification:_FiscalClassificationCode:Text") <> "U"
							Aadd( aCab, { "B1_POSIPI",  oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_FiscalClassification:_FiscalClassificationCode:Text, Nil })
						EndIf

						If lMktPlace
							//Segunda unidade de medida
							If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasureInternalId:Text" ) <> "U" )
								cIntUM := CFGA070INT( cMarca, 'SAH', 'AH_UNIMED', oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasureInternalId:Text )

								SAH->( DbSetOrder( 1 ) )

								If !Empty( cIntUM ) .And. SAH->( DbSeek( cIntUM ) )
									aAdd( aCab, { "B1_SEGUM", SAH->AH_UNIMED, Nil } )
								ElseIf ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasure:Text" ) <> "U" )
									aAdd( aCab, { "B1_SEGUM", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasure:Text, Nil } )
								EndIf
							ElseIf ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasure:Text" ) <> "U" )
								aAdd( aCab, { "B1_SEGUM", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasure:Text, Nil } )
							EndIf
						Else
							If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasure:Text" ) <> "U" )
								aAdd( aCab, { "B1_SEGUM", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_SecondUnitOfMeasure:Text, Nil } )
							EndIf
						Endif

						If lMktPlace
							//Grupo do produto
							If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text" ) <> "U" )
								cIntGrupo := CFGA070INT( cMarca, 'SBM', 'BM_GRUPO', oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text )

								SBM->( DbSetOrder( 1 ) )

								If !Empty(cIntGrupo) .And. SBM->( DbSeek(cIntGrupo) )
									aAdd( aCab, { "B1_GRUPO", SBM->BM_GRUPO, Nil } )
								ElseIf ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text" ) <> "U" )
									aAdd( aCab, { "B1_GRUPO", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text, Nil } )
								EndIf
							ElseIf ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text" ) <> "U" )
								aAdd( aCab, { "B1_GRUPO", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text, Nil } )
							EndIf
						Else
							If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text" ) <> "U" )
								aAdd( aCab, { "B1_GRUPO", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text, Nil } )
							EndIf
						Endif

						//Lote minimo
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MinimumLot:Text" ) <> "U" )
							nLoteMin := Val( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MinimumLot:Text )
							aAdd( aCab, { "B1_LM", nLoteMin, Nil } )
						EndIf

						//Peso liquido
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_NetWeight:Text" ) <> "U" )
							nPeso := Val( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_NetWeight:Text )
							aAdd( aCab, { "B1_PESO", nPeso, Nil } )
						EndIf

						//Ativo
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Active:Text" ) <> "U" )
							cProdActiv := AllTrim( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Active:Text )
							If cProdActiv == '0' .Or. Upper(cProdActiv) == 'FALSE' // Nao Ativo
								aAdd( aCab, { "B1_ATIVO", 'N', Nil } )
								aAdd( aCab, { "B1_MSBLQL", '1', Nil } )
							ElseIf cProdActiv == '1' .Or. Upper(cProdActiv) == 'TRUE' // Ativo
								aAdd( aCab, { "B1_ATIVO", 'S', Nil } )
								aAdd( aCab, { "B1_MSBLQL", '2', Nil } )
							EndIf
						EndIf

						If lMktPlace
							// Centro de Custo
							If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_CostCenterInternalId:Text" ) <> "U" )
								cIntCC := CFGA070INT( cMarca, 'CTT', 'CTT_CUSTO', oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_CostCenterInternalId:Text)

								CTT->( DbSetOrder( 1 ) )

								If !Empty( cIntCC ) .And. CTT->( DbSeek( cIntCC ) )
									aAdd( aCab, { "B1_CC", CTT->CTT_CUSTO, Nil } )
								EndIf
							EndIf
						Endif

						// Lote Econômico
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EconomicLot:Text" ) <> "U" )
							nLote := Val( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EconomicLot:Text )
							aAdd( aCab, { "B1_LE", nLote, Nil } )
						EndIf

						// Peso Bruto
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GrossWeight:Text" ) <> "U" )
							nPeso := Val( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GrossWeight:Text )
							aAdd( aCab, { "B1_PESBRU", nPeso, Nil } )
						EndIf

						// Fator de Conversão
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MultiplicationFactorValue:Text" ) <> "U" )
							aAdd( aCab, { "B1_CONV", Val( oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MultiplicationFactorValue:Text ), Nil } )
						EndIf

						// Rastro
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Trail:Text" ) <> "U" )
							aAdd( aCab, { "B1_RASTRO", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Trail:Text, Nil } )
						EndIf

						// CatMat -- categoria de produtos - governo
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentCode:Text" ) <> "U" )
							aAdd( aDadosSB5, { "B5_CATMAT", oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentCode:Text, Nil } )
						EndIf

						// Código do Item de Veículos
						If ( Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_VeicCode:Text" ) <> "U" )
							aAdd( aCab, { "B1_CODITE", SubStr(oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_VeicCode:Text, 1, TamSx3('B1_CODITE')[1]), Nil } )
						Else
							If X3Obrigat("B1_CODITE")
								aAdd( aCab, { "B1_CODITE", SubStr(cCodPro, 1, TamSx3('B1_CODITE')[1]), Nil } )
							Endif
						EndIf

						//Tratamento para amarracao ClienteXProduto(SA7) - Exclui a amarracao para depois realizar a exclusao do produto
					ElseIf nOpcX == 5 
						If lExclui .And. Type("oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation") <> "U"
							aProdCli := prodCli(cCodPro,cMarca,nOpcX,"1.000","",oXmlM010)
							If !aProdCli[1,1]
								lRet	:= .F.
								cXMLRet	:= aProdCli[1,2]
							EndIf
						EndIf
					EndIf

					// ponto de entrada inserido para controlar dados especificos do cliente
					If ExistBlock("MT010EAI")
						aRetPe := ExecBlock("MT010EAI",.F.,.F.,{aCab,nOpcX})
						If ValType(aRetPe) == "A"
							aCab 	:= aClone(aRetPe)
						EndIf
					EndIf

					If lRet
						If nOpcX == 5 .And. !lExclui
							lMsErroAuto := .F.
						Else
							If nOpcX == 5
								cValInt := SB1->B1_COD
								CFGA070Mnt(cMarca , cAlias, cCampo, cValExt , cValInt, .T. )
							EndIf

							If nOpcX <> 3
								SB1->(DbSetOrder(1))
								SB1->(DbSeek(xFilial("SB1") + PadR(SB1->B1_COD,TamSx3("B1_COD")[1])))
							Endif
							MSExecAuto( { |x,y| MATA010(x,y) }, aCab, nOpcX )
						EndIf

						If ( lMsErroAuto )
							//Trata erro na execucao da MSExecAuto
							aErroAuto := GetAutoGRLog()

							For nCount := 1 To Len(aErroAuto)
								cLogErro += _NoTags(aErroAuto[nCount])
							Next nCount

							// Monta XML de Erro de execucao da rotina automatica.
							lRet	 := .F.
							cXMLRet := EncodeUTF8( cLogErro )
						Else
							// Recupera codigo do produto incluido caso tenha inicializador padrao para o codigo
							If lInitCode .And. nOpcX == 3
								cCodPro := SB1->B1_COD
							EndIf
							///// Tratamento para incluir complemento do cadastro de Produtos SB5
							// CatMat -- categoria de produtos - governo
							If nOpcX # 5 .And. Type( "oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentCode:Text" ) <> "U"
								If aScan(aDadosSB5,{|x| x[1] == "B5_COD"}) == 0
									Aadd(aDadosSB5,{"B5_COD" , cCodPro, Nil })     //// 	SB5   - FLAVIO
								EndIf
								MSExecAuto({|x,y| Mata180(x,y)},aDadosSB5,nOpcXC)

								If lMsErroAuto
									aErroAuto := GetAutoGRLog()

									For nCount := 1 To Len(aErroAuto)
										cLogErro += _NoTags(aErroAuto[nCount])
									Next nCount

									// Monta XML de Erro de execucao da rotina automatica.
									lRet	 := .F.
									cXMLRet := EncodeUTF8( cLogErro )
								Endif
							Endif

							//Tratamento para amarracao ClienteXProduto(SA7) - Inclui a amarracao apos inclusao ou alteracao do produto
							If ( nOpcX <> 5 ) .And. !lMsErroAuto
								aProdCli := prodCli(cCodPro,cMarca,nOpcX,"1.000",cDescPro,oXmlM010)

								If !aProdCli[1,1]
									lRet := .F.
									cXMLRet := aProdCli[1,2]
								Endif

								If ( lRet )
									cValInt := xFilial('SB1')+cCodPro

									//Parametro MV_AVALINT habilitado, o InternalId do produto sera apenas o codigo do produto
									If lAltValInt
										cValInt := cCodPro
									Endif

									If ( !Empty(cValExt) ) .And. ( !Empty(cValInt) )
										CFGA070Mnt( cMarca, cAlias, cCampo, cValExt, cValInt )

										// Monta xml com status do processamento da rotina automatica OK.
										cXMLRet += "<ItemCode>"     + cValExt + "</ItemCode>"  //Valor recebido na tag "BusinessMessage:BusinessContent:Code"
										cXMLRet += "<ExternalCode>" + cValInt + "</ExternalCode>"	//Valor gerado
									EndIf
								EndIf
							EndIf
						EndIf
					Endif
			Else
				// "Falha ao gerar o objeto XML"
				lRet := .F.
				cXMLRet := EncodeUTF8( STR0004 ) // "Falha ao manipular o XML"
			EndIf

			//Response Message
		ElseIf cTypeMessage == EAI_MESSAGE_RESPONSE

			//Gravacao do De/Para Codigo Interno X Codigo Externo
			oXmlM010 := XmlParser(cXml, "_", @cError, @cWarning)

			If oXmlM010 <> Nil .And. Empty(cError) .And. Empty(cWarning)
				If Upper(oXmlM010:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_Status:Text) == "OK"
					If Type("oXmlM010:_TotvsMessage:_MessageInformation:_Product:_Name:Text") <> "U"
						cMarca :=  oXmlM010:_TotvsMessage:_MessageInformation:_Product:_Name:Text
					EndIf
					If Type("oXmlM010:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ItemCode:Text") <> "U"
						cValInt := oXmlM010:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ItemCode:Text
					EndIf
					If Type("oXmlM010:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ExternalCode:Text") <> "U"
						cValExt := oXmlM010:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ExternalCode:Text
					EndIf

					If !Empty(cValExt) .And.!Empty(cValInt)
						If CFGA070Mnt( cMarca, cAlias, cCampo, cValExt, cValInt )
							lRet    := .T.
						EndIf
					Else
						lRet    := .F.
					EndIf
				Else //Erro
					If Type("oXmlM010:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message") != "U"
						// Se não for array
						If Type("oXmlM010:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message") != "A"
							// Transforma em array
							XmlNode2Arr(oXmlM010:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message, "_Message")
						EndIf

						// Percorre o array para obter os erros gerados
						For nCount := 1 To Len(oXmlM010:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message)

							If XmlChildEx(oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message[nCount], '_CODE' ) != Nil .And.;
							!Empty(oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message[nCount]:_code:Text)
								cError := oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message[nCount]:_Code:Text
							EndIf
							cErrorDsc := oXmlM010:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_CodeMessage[nCount]:Text

							AADD(aErrosMsg,{cErrorDsc,"1",cError})
						Next nCount

						lRet := .F.
						cXmlRet := FWEAILOfMessages( aErrosMsg )
					Endif
				Endif
			EndIf

			//WhoIs Message
		ElseIf cTypeMessage == EAI_MESSAGE_WHOIS
			cXMLRet := '1.000|1.001|2.000|2.001|3.000|3.001|3.002|3.003|3.004|3.005|3.006'
		EndIf

		//Tratamento do envio de mensagens
	ElseIf nTypeTrans == TRANS_SEND

		If lMVC
			oModel := FWModelActive()
			nOperation := oModel:GetOperation()
		Else
			If Inclui
				nOperation := 3
			ElseIf Altera
				nOperation := 4
			EndIf
		EndIf
		// Verifica se é uma exclusão
		If nOperation != 3 .And. nOperation != 4
			cEvent := 'delete'
		EndIf

		//Busca descricao do grupo de produtos
		dbSelectArea("SBM")
		SBM->(dbSetOrder(1))	//BM_FILIAL + BM_GRUPO

		If ( AllTrim( SB1->B1_GRUPO ) != "" ) .And. ( SBM->( dbSeek( xFilial("SBM") + SB1->B1_GRUPO ) ) )
			cDescGrupo := SBM->BM_DESC
		EndIf

		cDescPro    := SB1->B1_DESC
		cDescProB5	:= Posicione("SB5",1,xFilial("SB5")+SB1->B1_COD,"B5_CEME")

		If lMktPlace .And. !Empty(cDescProB5)
			cDescPro := cDescProB5
		EndIf

		If AllTrim(SB1->B1_ATIVO) == 'N' .Or. AllTrim(SB1->B1_MSBLQL) == "1"
			cProdActiv  :=  '0'
		EndIf

		//Monta XML de envio de mensagem unica
		cXMLRet := '<BusinessEvent>'
		cXMLRet +=     '<Entity>Item</Entity>'
		cXMLRet +=     '<Event>' + cEvent + '</Event>'
		cXMLRet +=     '<Identification>'
		cXMLRet +=         '<key name="Code">' + RTrim(SB1->B1_COD) + '</key>'
		cXMLRet +=     '</Identification>'
		cXMLRet += '</BusinessEvent>'

		cXMLRet += '<BusinessContent>'
		cXMLRet += 	'<CompanyId>' + cEmpAnt + '</CompanyId>'
		cXMLRet += 	'<BranchId>' + cFilAnt + '</BranchId>'

		If lMktPlace
			cXMLRet +=  	'<CompanyInternalId>' + cEmpAnt + '|' + cFilAnt + '</CompanyInternalId>'
			cXMLRet +=  	'<InternalId>' + cEmpAnt + '|' + RTrim(xFilial("SB1"))+ "|" + RTrim(SB1->B1_COD) + '</InternalId>'
		Endif

		cXMLRet += 	'<Code>' + RTrim(SB1->B1_COD) + '</Code>'
		cXMLRet += 	'<Name>' + _NoTags(RTrim(cDescPro)) + '</Name>'
		cXMLRet += 	'<ShortName>' + _NoTags(RTrim(cDescPro)) + '</ShortName>'
		cXMLRet +=  	'<Detail>' + _NoTags(RTrim(cDescPro)) + '</Detail>'
		cXMLRet += 	'<Active>' + RTrim(cProdActiv) + '</Active>'

		If lMktPlace .And. !Empty(SB1->B1_GRUPO)
			cXMLRet += 	'<StockGroupCode>' + RTrim(SB1->B1_GRUPO) + '</StockGroupCode>'
			cXMLRet += 	'<StockGroupDescription>' + RTrim(cDescGrupo) + '</StockGroupDescription>'
		Else
			cXMLRet += 	'<StockGroupCode>' + RTrim(SB1->B1_TIPO) + '</StockGroupCode>'
			cXMLRet += 	'<StockGroupDescription>' + RTrim(Posicione("SX5",1,xFilial("SX5")+'02'+SB1->B1_TIPO,"SX5->X5_DESCRI"))+ '</StockGroupDescription>'
		EndIf

		cXMLRet += 	'<UnitOfMeasureCode>' + RTrim(SB1->B1_UM) + '</UnitOfMeasureCode>'

		If lMktPlace
			cXMLRet += 	'<UnitOfMeasureInternalId>' + cEmpAnt + "|" + RTrim(xFilial("SAH")) + "|" + RTrim(SB1->B1_UM) + '</UnitOfMeasureInternalId>'
		Endif

		cXMLRet += 	'<StandardWarehouseCode>' + IIf( !Empty( SB1->B1_LOCPAD ), RTrim(SB1->B1_LOCPAD), '01' ) + '</StandardWarehouseCode>'
		cXMLRet += 	'<MinimumLot>' + cValToChar(SB1->B1_LM) + '</MinimumLot>'
		cXMLRet += 	'<NetWeight>' + cValToChar(SB1->B1_PESO) + '</NetWeight>'
		cXMLRet += 	'<FiscalInformation><FiscalClassification>'
		cXMLRet += 		'<Code>' + RTrim(SB1->B1_POSIPI) + '</Code>'
		cXMLRet += 		'<Description/>'
		cXMLRet += 	'</FiscalClassification></FiscalInformation>'
		cXMLRet += 	'<GroupCode>' + RTrim(SB1->B1_GRUPO) + '</GroupCode>'
		cXMLRet += 	'<GroupName>' + RTrim(cDescGrupo) + '</GroupName>'
		cXMLRet += 	'<SecondUnitOfMeasure>' + RTrim(SB1->B1_SEGUM) + '</SecondUnitOfMeasure>'
		cXMLRet += 	'<Origin>' + AllTrim(SB1->B1_ORIGEM) + '</Origin>'
		
		If lItemInfo
			dbSelectArea("SA7")
			SA7->(dbSetOrder(2))	//A7_FILIAL + A7_CLIENTE + A7_LOJA + A7_PRODUTO

			If ( SA7->( MsSeek( xFilial("SA7") + SB1->B1_COD ) ) )

				cXMLRet += '<ListOfCustomerItemInformation>'

				While !SA7->(EOF()) .And. SA7->A7_PRODUTO == SB1->B1_COD                            
					cXMLRet += '<CustomerItemInformation>'
					cXMLRet += 		'<CustomerCode>' + RTrim(SA7->A7_CLIENTE) + RTrim(SA7->A7_LOJA) + '</CustomerCode>'
					cXMLRet += 		'<CustomerItemCode>' + RTrim(SA7->A7_CODCLI) + '</CustomerItemCode>'
					//+------------------------------------------------------
					//| Implementado em 2016/12/15 necessário para o
					//+------------------------------------------------------
					DbSelectArea("SA1")
					DbSetOrder(1)
					If MsSeek(xFilial("SA1") + SA7->A7_CLIENTE+SA7->A7_LOJA)
						cXMLRET += '<GovernmentalInformation>'
					Else
						cXMLRet +=    '<GovernmentalInformation>'
						cXMLRet +=       IIf(!Empty(SA1->A1_INSCR)  , '<Id name="INSCRICAO ESTADUAL" scope="State">' + Rtrim(SA1->A1_INSCR) + '</Id>', '')
						cXMLRet +=       IIf(!Empty(SA1->A1_INSCRM) , '<Id name="INSCRICAO MUNICIPAL" scope="Municipal">' + Rtrim(SA1->A1_INSCRM) + '</Id>', '')
						cXMLRet +=       IIf(!Empty(SA1->A1_CGC)    , '<Id name="' + IIF(Len(Alltrim(SA1->A1_GCG)) > 11,"CNPJ","CPF") + '" scope="Federal">' + Rtrim(SA1->A1_CGC) + '</Id>', '')
						cXMLRet +=       IIf(!Empty(SA1->A1_SUFRAMA), '<Id name="SUFRAMA" scope="Federal">' + Rtrim(SA1->A1_SUFRAMA) + '</Id>', '')
						cXMLRet +=    '</GovernmentalInformation>'
					EndIf

					cXMLRet +=          '<CustomerItemCode>' + RTrim(SA7->A7_CODCLI) + '</CustomerItemCode>'
					cXMLRet +=          '<CustomerItemInternalId>' + xFilial("SA7") + "|" + SA7->A7_CODCLI + "|" + SA7->A7_LOJA + "|" + SA7->A7_PRODUTO + '</CustomerItemInternalId>'
					cXMLRet += '</CustomerItemInformation>'
					SA7->(dbSkip())
				EndDo

				cXMLRet += '</ListOfCustomerItemInformation>'

			EndIf
		EndIf

		cXMLRet += '</BusinessContent>'

	EndIf

	RestArea(aAreaSBM)
	RestArea(aAreaSA7)
	RestArea(aArea)

Return { lRet, cXMLRet }

//-------------------------------------------------------------------------------------------------
/*/{Protheus.doc} v2000

Funcao de integracao com o adapter EAI para recebimento do  cadastro de
Produto (SB1) utilizando o conceito de mensagem unica.

@param   cXml        Variável com conteúdo XML para envio/recebimento.
@param   nTypeTrans   Tipo de transação. (Envio/Recebimento)
@param   cTypeMessage  Tipo de mensagem. (Business Type, WhoIs, etc)
@param   cVersao		Versão do XML(XSD) de integrção.
@param   cRelease		Release da versão do XML(XSD) de integrção.

@author  Leandro Luiz da Cruz
@version P11
@since   24/09/2012
@return  aRet  - (array)   Contém o resultado da execução e a mensagem XML de retorno.
		aRet[1] - (boolean)  Indica o resultado da execução da função
		aRet[2] - (caracter) Mensagem XML para envio

@obs    O método irá retornar um objeto do tipo TOTVSBusinessEvent caso
		o tipo da mensagem seja EAI_BUSINESS_EVENT ou um tipo
		TOTVSBusinessRequest caso a mensagem seja do tipo TOTVSBusinessRequest.
		O tipo da classe pode ser definido com a função EAI_BUSINESS_REQUEST.
/*/
//-------------------------------------------------------------------------------------------------
Static Function v2000( cXml, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, oXml ,cVersao ,cRelease )
	Local lRet				:= .T.
	Local lLog				:= .T. //FindFunction("AdpLogEAI")
	Local nEvento			:= 0
	Local nCount			:= 1
	Local cXMLRet			:= ""
	Local aProd				:= {}
	Local aErroAuto			:= {}
	Local aProdCli			:= {}
	Local aAux				:= {}
	Local cEvent			:= ""
	Local cProduct			:= ""
	Local cValInt			:= ""
	Local cValExt			:= ""
	Local cAlias			:= "SB1"
	Local cField			:= "B1_COD"
	Local cCode				:= ""
	Local nAverageCostPrice	:= 0
	Local cError			:= ""
	Local cWarning			:= ""
	Local cUMExt			:= ""
	Local cUMInt			:= ""
	Local cStWaExt			:= ""
	Local cStWaInt			:= ""
	Local cEntity			:= "Item"
	Local aAreaAnt			:= GetArea()
	Local nPrecoCusto		:= 0
	Local nCustoPadrao		:= 0
	Local dBaseDate			:= Nil
	Local nCustoMedio		:= 0
	Local aProdSB5			:= {}//@@
	Local aProdF2Q			:= {}
	Local lDescSB5			:= GetNewPar("MV_MUDESB5",.F.) // diz se ira usar a SB5 para complementar a descrição
	Local nEventoSB5		:= 0
	Local cCodGrupo			:= ""
	Local cMarca			:= ""
	Local cUMCodBar			:= "" //Unidade de Medida do Codigo de Barras
	Local nQtdCodBar		:= 0 //Quantidade do Codigo de Barras
	Local aPrcVen			:= {} //Array contendo Precos de Venda do Produto - SB0
	Local aBarCode			:= {} //Array contendo Codigos de Barras do Produto - SLK
	Local aIntBarCode		:= {} //Array contendo InternalIds de Codigo de Barras
	Local lM010LocP			:= ExistBlock("M010LOCP") //Ponto de entrada para local de estoque
	Local cAuxLocPad		:= ""
	Local cLocPad			:= ""
	Local cCodeTax			:= "" //Codigo da Tributacao ECF
	Local cAliquot			:= "" //Aliquota ECF
	Local cTpTrib			:= "" //Tipo tributacao Protheus
	Local cPriceID			:= "" //Identificacao do Preco Varejo
	Local cPriceValue		:= "" //Preco Varejo
	Local cCurrency			:= "" //Moeda atual
	Local cBaseDatePrice	:= ""	//DataBase da Moeda
	Local nPosTipo			:= 0  //Posicao do campo tipo do produto

	Local cB1_COD			:= ""
	Local cB1_DESC			:= ""
	Local cB1_ATIVO			:= ""
	Local cB1_MSBLQL		:= ""
	Local cB1_GRUPO			:= ""
	Local cB1_UM			:= ""
	Local cB1_LOCPAD		:= ""
	Local cB1_ORIGEM		:= ""
	Local cB1_FPCOD			:= ""
	Local cB1_POSIPI		:= ""
	Local cB1_TIPO			:= ""
	Local cB1_RASTRO		:= ""
	Local cB1_LOCALIZ		:= ""
	Local cB1_CONTA			:= ""
	Local cB1_SEGUM			:= ""
	Local cB1_TIPCONV		:= ""
	Local cB1_UCALSTD		:= ""
	Local cB1_CC			:= ""
	Local cB1_FILIAL		:= ""
	Local cFabric			:= " "
	Local nB1_LE			:= 0
	Local nB1_LM			:= 0
	Local nB1_PESO			:= 0
	Local nB1_PESBRU		:= 0
	Local nB1_CONV			:= 0
	Local nB1_QE			:= 0
	Local nB1_UPRC			:= 0
	Local nB1_CUSTD			:= 0
	Local nB1_PRV1			:= 0
	Local cPont				:= ""
	Local cAddXml			:= ""
	Local aF2QArea			:= {}
	Local aSLKArea			:= {}
	Local aCategory			:= {}

	Local aTaxing			:= {}
	Local aProdSBZ			:= {}
	Local aSBZEmpFil		:= {}

	Local nCnt				:= 0
	Local nPosSB1			:= 0
	Local nPosCod			:= 0
	Local nPosFilial		:= 0
	Local cBkpFil			:= ""
	Local aAreaTMP			:= {}
	Local lSBZNew			:= .F.
	Local cB5_ECTITU	    := ""
	Local cB5_ECDESCR       := ""
	Local cB5_ECCARAC       := ""
	Local cB5_ECPROFU       := ""
	Local cB5_ECLARGU       := ""
	Local cB5_ECCOMP	    := ""
	Local cB5_ECCUBAG       := ""
	Local cB5_ECFLAG	    := ""
	Local cB5_MARCA         := ""
	Local cBrand            := ""
	Local nPosSBZ			:= 0
	Local aExtEmpFil		:= {}
	Local aProdSB9			:= {}
	Local cQuery			:= ""
	Local cValIntSBZ		:= ""
	Local cValExtSBZ		:= ""
	Local cAliasSBZ			:= GetNextAlias()
	Local cXmlCodBar		:= ""	
	Local oModel			:= FWModelActive()
	Local lMVC				:= TableInDic("G3Q", .F.) .And. oModel <> Nil .And. oModel:cSource == "MATA010"
	Local nOperation		:= 0
	Local aAgroDados		:= {}
	Local lAgroAtivo		:= SuperGetMv("MV_SIGAAGR",.F.,.F.)
	Local cCadProd			:= SuperGetMv("MV_CADPROD",.F.,"|SBZ|SB5|SGI|D3E|")
	Local lItemInfo			:= SuperGetMv("MV_ITEMINF",.F.,.T.)
	Local cB1_ALTER         := ""
	Local cType

	Private lMsErroAuto		:= .F.
	Private lAutoErrNoFile	:= .T.
	Private lMsHelpAuto		:= .T.

	If ( Type("Inclui") == "U" )
		Private Inclui := .F.
	EndIf

	If ( Type("Altera") == "U" )
		Private Altera := .F.
	EndIf

	Default cVersao		:= '1.000'
	Default cRelease	:= '000'

	If !lIntegPPI
		If lLog
			AdpLogEAI(1, "MATI010", nTypeTrans, cTypeMessage, cXML)
		EndIf
	EndIf


	If nTypeTrans == TRANS_RECEIVE
		If cTypeMessage == EAI_MESSAGE_BUSINESS

			If Type("oXml:_TotvsMessage:_MessageInformation:_Product:_name:Text") <> "U"
				cMarca :=  oXml:_TotvsMessage:_MessageInformation:_Product:_Name:Text
			EndIf
			// Evento
			If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text)
				cEvent := Upper(oXml:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text)
			Else
				lRet   := .F.
				cXmlRet := STR0012 //"O evento é obrigatório"
				Return {lRet, cXMLRet}
			EndIf

			// Marca
			If Type("oXml:_TotvsMessage:_MessageInformation:_Product:_Name:Text") != "U" .And. !Empty(oXml:_TotvsMessage:_MessageInformation:_Product:_Name:Text)
				cProduct := oXml:_TotvsMessage:_MessageInformation:_Product:_Name:Text
			Else
				lRet   := .F.
				cXmlRet := STR0013 //"A Marca é obrigatória!"
				Return {lRet, cXMLRet}
			EndIf

			// Verifica se a filial atual é a mesma filial de inclusão do cadastro
			aAux := IntChcEmp(oXml, cAlias, cProduct)
			If !aAux[1]
				lRet := aAux[1]
				cXmlRet := aAux[2]
				Return {lRet, cXmlRet}
			EndIf

			// InternalId
			If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text)
				cValExt := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text
			Else
				lRet   := .F.
				cXmlRet := STR0014 //"O código do InternalId é obrigatório!"
				Return {lRet, cXMLRet}
			EndIf

			// Obtém o valor interno
			aAux := IntProInt(cValExt, cProduct, /*Versão*/)

			// Se o evento é Upsert
			If cEvent == "UPSERT"
				// Se o registro foi encontrado
				If !aAux[1]
					nEvento := 3 // Insert

					// Código do Produto
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text)
						cCode := PadR(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Code:Text, TamSX3("B1_COD")[1])
						// Armazena o Código do produto no Array
						aAdd(aProd, {"B1_COD", cCode, Nil})
					Else
						lRet   := .F.
						cXmlRet := STR0015 //"O código do produto é obrigatório!"
						Return {lRet, cXMLRet}
					EndIf

					// Monta o InternalId de produto que será gravado na table XXF (de/para)
					cValInt := IntProExt(/*Empresa*/, /*Filial*/, cCode, /*Versão*/)[2]
				Else
					nEvento := 4 // Update

					cCode := aAux[2][3]

					// Armazena o Código do produto no Array
					aAdd(aProd, {"B1_COD", PadR(cCode, TamSX3("B1_COD")[1]), Nil})

					// Monta o InternalId de produto que será gravado na table XXF (de/para)
					cValInt := IntProExt(/*Empresa*/, /*Filial*/, cCode, /*Versão*/)[2]
				EndIf
			// Se o evento é Delete
			ElseIf cEvent == "DELETE"
				// Se o registro foi encontrado
				If aAux[1]
					nEvento := 5 // Delete
				Else
					lRet := .F.
					cXmlRet := STR0016 + " -> " + cValExt //"O registro a ser excluído não existe na base Protheus"
					Return {lRet, cXmlRet}
				EndIf

				cCode:= aAux[2][3]
				// Armazena o Código do produto no Array
				aAdd(aProd, {"B1_COD", PadR(cCode, TamSX3("B1_COD")[1]), Nil})

				// Monta o InternalId de produto que será gravado na table XXF (de/para)
				cValInt := IntProExt(/*Empresa*/, /*Filial*/, cCode, /*Versão*/)[2]
			Else
				lRet   := .F.
				cXmlRet := STR0017 //"O evento informado é inválido!"
				Return {lRet, cXMLRet}
			EndIf

			// Se o evento é diferente de Delete
			If nEvento != 5
				// Descrição do Produto
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text") == "U" .And.;
				Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text") == "U"
					lRet   := .F.
					cXmlRet := STR0018 //"A Descrição do produto é obrigatória"
					Return {lRet, cXmlRet}

				ElseIf Empty( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text ) .Or.; 
				Empty( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text )
					lRet   := .F.
					cXmlRet := STR0018 //"A Descrição do produto é obrigatória"
					Return {lRet, cXmlRet}

				Else
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text)
						aAdd(aProd, {"B1_DESC", AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ShortName:Text), Nil})
					Endif

					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text)
						If aScan(aProd,{|x| x[1] == "B1_DESC"}) == 0
							aAdd(aProd, {"B1_DESC", PadR(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text,TamSX3("B1_DESC")[1]), Nil})
						Endif

						If lDescSB5
							aAdd(aProdSB5, {"B5_COD", PadR(cCode, TamSX3("B1_COD")[1]), Nil})
							aAdd(aProdSB5, {"B5_CEME", AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text), Nil})
						Else
							lDescSB5 := .F.
						EndIF
					Endif
				Endif

				// Tipo de Produto
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ProductType:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ProductType:Text)
					aAdd(aProd, {"B1_TIPO", getPType(Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ProductType:Text), nTypeTrans), Nil})
				Else
					lRet := .F.
					cXmlRet := STR0019 //"O tipo do produto é obrigatório"
					Return {lRet, cXmlRet}
				EndIf

				// CodIte
				If X3Obrigat("B1_CODITE")
					aAdd(aProd, {"B1_CODITE",PadR(cCode, TamSX3("B1_CODITE")[1]), Nil})
				Endif

				//Obtém o Código Interno da Unidade de Medida
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureInternalId:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureInternalId:Text)
					aAux := IntUndInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureInternalId:Text, cProduct)
					If !aAux[1]
						lRet := aAux[1]
						cXmlRet := aAux[2]
						Return {lRet, cXmlRet}
					Else
						cUMExt := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureInternalId:Text
						cUMInt := cValToChar(IntUndExt(/*Empresa*/, /*Filial*/, aAux[2][3], /*Versão*/)[2])
						aAdd(aProd, {"B1_UM",PadR(aAux[2][3],TamSx3("B1_UM")[1]), Nil})
					EndIf
				ElseIf Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text") <> "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text)
					Aadd( aProd, { "B1_UM", PadR(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_UnitOfMeasureCode:Text,TamSx3("B1_UM")[1]), Nil } )
				Else
					lRet := .F.
					cXmlRet := STR0020 //"A Unidade de Medida é obrigatória"
					Return {lRet, cXmlRet}
				EndIf

				//Obtém o Armazém Padrão p/ requis.
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseInternalId:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseInternalId:Text)
					aAux := IntLocInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseInternalId:Text, cProduct, /*Versão*/)
					If !aAux[1]
						lRet := aAux[1]
						cXmlRet := aAux[2]
						Return {lRet, cXmlRet}
					Else
						cStWaExt := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseInternalId:Text
						cStWaInt := IntLocExt(/*Empresa*/, /*Filial*/, aAux[2][3], /*Versão*/)[2]
						cLocPad := PadR(aAux[2][3],TamSx3("B1_LOCPAD")[1])
						aAdd(aProd, {"B1_LOCPAD", cLocPad, Nil})
					EndIf
				ElseIf XmlChildEx( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent, "_STANDARDWAREHOUSECODE" ) <> Nil
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text)
						cLocPad := PadR(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StandardWarehouseCode:Text,TamSx3("B1_LOCPAD")[1])
						aAdd(aProd, {"B1_LOCPAD", cLocPad, Nil})
					Endif
				Else
					If nEvento == 3
						NNR->(DbSetOrder(1)) // NNR_FILIAL+NNR_CODIGO

						If NNR->(dbSeek(xFilial("NNR")))
							If Empty(NNR->NNR_CODIGO)
								NNR->(DbSkip())
							EndIf
							cLocPad := NNR->NNR_CODIGO
						Endif
					Else
						cLocPad := Posicione("SB1",1,xFilial("SB1") + PadR(cCode,TamSx3("B1_COD")[1]),"B1_LOCPAD")
					Endif

					If lM010LocP //Ponto de entrada para local de estoque
						cAuxLocPad := ExecBlock("M010LOCP",.F.,.F.,{nEvento,cCode,cLocPad})
						If valType(cAuxLocPad) == "C" .And. !Empty(cAuxLocPad)
							cLocPad := cAuxLocPad
						Endif
					Endif

					aAdd(aProd, {"B1_LOCPAD",cLocPad, Nil})
				Endif

				// Origem do Produto
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Origin:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Origin:Text)
					aAdd(aProd, {"B1_ORIGEM", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Origin:Text, Nil})
				EndIf

				// Código de produto ANVISA
				If cVersao == "4" .And. cRelease >= "010"
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_HealthAgency:Text") != "U"
						aAdd(aProdF2Q, {"F2Q_PRODUT", cCode})
						If Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_HealthAgency:Text)
							aAdd(aProdF2Q, {"F2Q_CODANV", PadR(" ", TamSX3("F2Q_CODANV")[1])})
						Else
							aAdd(aProdF2Q, {"F2Q_CODANV", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_HealthAgency:Text})
						EndIf
						aAdd(aProdF2Q, {"F2Q_PMXANV", 0})
					EndIf
				EndIf

				// Nomenclatura Ext.Mercosul
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_FiscalClassification:_FiscalClassificationCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_FiscalClassification:_FiscalClassificationCode:Text)
					aAdd(aProd, {"B1_POSIPI", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_FiscalClassification:_FiscalClassificationCode:Text, Nil})
				EndIf

				// PIS
				If INT010CPUSO("B1_PIS") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_PisRetaining:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_PisRetaining:Text)
					cAux := UPPER(Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_PisRetaining:Text))
					aAdd(aProd, {"B1_PIS",IIF(cAux == 'TRUE','1','2'), Nil})
				EndIf

				If INT010CPUSO("B1_PPIS") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_PisAliquot:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_PisAliquot:Text)
					nAux := Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_PisAliquot:Text)
					aAdd(aProd, {"B1_PPIS",nAux, Nil})
				EndIf

				// COFINS
				If INT010CPUSO("B1_COFINS") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CofinsRetaining:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CofinsRetaining:Text)
					cAux := UPPER(Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CofinsRetaining:Text))
					aAdd(aProd, {"B1_COFINS",IIF(cAux == 'TRUE','1','2'), Nil})
				EndIf

				If INT010CPUSO("B1_PCOFINS") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CofinsAliquot:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CofinsAliquot:Text)
					nAux := Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CofinsAliquot:Text)
					aAdd(aProd, {"B1_PCOFINS",nAux, Nil})
				EndIf

				// CSLL
				If INT010CPUSO("B1_CSLL") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CsllRetaining:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CsllRetaining:Text)
					cAux := UPPER(Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CsllRetaining:Text))
					aAdd(aProd, {"B1_CSLL",IIF(cAux == 'TRUE','1','2'), Nil})
				EndIf

				If INT010CPUSO("B1_PCSLL") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CsllAliquot:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CsllAliquot:Text)
					nAux := Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_CsllAliquot:Text)
					aAdd(aProd, {"B1_PCSLL",nAux, Nil})
				EndIf

				// IRRF
				If INT010CPUSO("B1_IRRF") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IrrfIncidence:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IrrfIncidence:Text)
					cAux := UPPER(Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IrrfIncidence:Text))
					aAdd(aProd, {"B1_IRRF",IIF(cAux == 'TRUE','S','N'), Nil})
				EndIf

				// ISS
				If INT010CPUSO("B1_CODISS") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IssServiceCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IssServiceCode:Text)
					cAux := Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IssServiceCode:Text)
					aAdd(aProd, {"B1_CODISS",cAux, Nil})
				EndIf

				If INT010CPUSO("B1_TRIBMUN") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_MunicipalTaxCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_MunicipalTaxCode:Text)
					cAux := Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_MunicipalTaxCode:Text)
					aAdd(aProd, {"B1_TRIBMUN",cAux, Nil})
				EndIf

				If INT010CPUSO("B1_ALIQISS") .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IssAliquot:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IssAliquot:Text)
					nAux := Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_IssAliquot:Text)
					aAdd(aProd, {"B1_ALIQISS",nAux, Nil})
				EndIf
				If cPaisLoc == "BRA"
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_TaxSubstitutionCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_TaxSubstitutionCode:Text)
						cAux := Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_FiscalInformation:_TaxSubstitutionCode:Text)
						aAdd(aProd, {"B1_CEST",cAux, Nil})
					EndIf
				EndIf

				// Segunda Unidade de Medida e Fator de Conversão
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:SecondUnitOfMeasureCode:Text") != "U" .And. !Empty(oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:SecondUnitOfMeasureCode:Text)
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MultiplicationFactorValue:Text") != "U" .And. !Empty(oXmlM010:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MultiplicationFactorValue:Text)
						aAdd(aProd, {"B1_SEGUM", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:SecondUnitOfMeasureCode:Text, Nil})
						aAdd(aProd, {"B1_CONV", Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MultiplicationFactorValue:Text), Nil})
					Else
						lRet   := .F.
						cXmlRet := STR0022 //"Fator de conversão obrigatório pois existe segunda unidade de medida."
						Return {lRet, cXmlRet}
					EndIf
				EndIf

				// Rastro por Lote, Sublote ou Sem rastro
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Trail:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Trail:Text)
					aAdd(aProd, {"B1_RASTRO", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Trail:Text, Nil})
				EndIf

				// Localização
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_BinControl:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_BinControl:Text)
					If oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_BinControl:Text == "1" .Or. Upper(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_BinControl:Text) == "TRUE"
						aAdd(aProd, {"B1_LOCALIZ", "S", Nil})
					Else
						aAdd(aProd, {"B1_LOCALIZ", "N", Nil})
					EndIf
				EndIf

				// Grupo de Estoque
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupInternalId:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupInternalId:Text)
					If XX4MENS("MATA035", "FAMILY" )
						aAux := IntFamInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupInternalId:Text, cProduct, RTrim(PmsMsgUVer('FAMILY','MATA035')))
					Elseif XX4MENS("MATA035", "STOCKGROUP" )
						aAux := IntStockInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupInternalId:Text, cProduct, RTrim(PmsMsgUVer('STOCKGROUP','MATA035')))
					Endif

					If aAux[1]
						cCodGrupo := RTrim(aAux[2][3])
						aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
					Else
						If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text)
							cCodGrupo := RTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text)
							aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
						Else
							If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text)
								If XX4MENS("MATA035", "FAMILY" )
									aAux := IntFamInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text, cProduct, RTrim(PmsMsgUVer('FAMILY','MATA035')))
								Elseif XX4MENS("MATA035", "STOCKGROUP" )
									aAux := IntStockInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text, cProduct, RTrim(PmsMsgUVer('STOCKGROUP','MATA035')))
								Endif

								If aAux[1]
									cCodGrupo := RTrim(aAux[2][3])
									aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
								Else
									If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text)
										cCodGrupo := RTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text)
										aAdd(aProd, {"B1_GRUPO", RTrim(cCodGrupo), Nil})
									Endif
								Endif
							Endif
						Endif
					Endif
				ElseIf Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text)
					cCodGrupo := RTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_StockGroupCode:Text)
					aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
				ElseIf Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text)
					If XX4MENS("MATA035", "FAMILY" )
						aAux := IntFamInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text, cProduct, RTrim(PmsMsgUVer('FAMILY','MATA035')))
					Elseif XX4MENS("MATA035", "STOCKGROUP" )
						aAux := IntStockInt(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupInternalId:Text, cProduct, RTrim(PmsMsgUVer('STOCKGROUP','MATA035')))
					Endif

					If aAux[1]
						cCodGrupo := RTrim(aAux[2][3])
						aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
					Else
						If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text)
							cCodGrupo := RTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text)
							aAdd(aProd, {"B1_GRUPO", RTrim(cCodGrupo), Nil})
						Endif
					Endif
				ElseIf Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text)
					cCodGrupo := RTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GroupCode:Text)
					aAdd(aProd, {"B1_GRUPO", RTrim(cCodGrupo), Nil})
				Endif

				// Lote mínimo
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MinimumLot:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MinimumLot:Text)
					aAdd(aProd, {"B1_LM", Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_MinimumLot:Text), Nil})
				EndIf

				// Peso Líquido
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_NetWeight:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_NetWeight:Text)
					aAdd(aProd, {"B1_PESO", Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_NetWeight:Text), Nil})
				EndIf

				// Peso Bruto
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GrossWeight:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GrossWeight:Text)
					aAdd(aProd, {"B1_PESBRU", Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GrossWeight:Text), Nil})
				EndIf

				// Último preço de compra
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_CostPrice:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_CostPrice:Text)
					aAdd(aProd, {"B1_UPRC", Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_CostPrice:Text), Nil})
				EndIf

				// Preço de venda
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_SalesPrice:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_SalesPrice:Text)
					aAdd(aProd, {"B1_PRV1", Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_SalesPrice:Text), Nil})
				EndIf

				// Preço médio de custo
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_AverageCostPrice:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_AverageCostPrice:Text)
					nAverageCostPrice := Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_AverageCostPrice:Text)
				EndIf

				// Custo standard
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_StandardCostPrice:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_StandardCostPrice:Text)
					aAdd(aProd, {"B1_CUSTD", Val(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_StandardCostPrice:Text), Nil})
				EndIf

				// Data do último cálculo do custo stardard
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_BaseDate:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_BaseDate:Text)
					dBaseDate := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Values:_BaseDate:Text
					dBaseDate := CToD(SubStr(dBaseDate, 9, 2) + "/" + SubStr(dBaseDate, 6, 2) + "/" + SubStr(dBaseDate, 1, 4))
					aAdd(aProd, {"B1_UCALSTD", dBaseDate, Nil})
				EndIf

				//Ativo
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Active:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Active:Text)
					cProdActiv := AllTrim( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Active:Text )

					If (cProdActiv == '0' .Or. Upper(cProdActiv) == 'FALSE') .And. !(nEvento != 5 .And. lDescSB5) // Nao Ativo
						aAdd( aProd, { "B1_ATIVO", 'N', Nil } )
						aAdd( aProd, { "B1_MSBLQL", '1', Nil } )
					ElseIf (cProdActiv == '1' .Or. Upper(cProdActiv) == 'TRUE') .Or. (nEvento != 5 .And. lDescSB5) // Ativo
						aAdd( aProd, { "B1_ATIVO", 'S', Nil } )
						aAdd( aProd, { "B1_MSBLQL", '2', Nil } )
					EndIf
				EndIf

				//Integracao
				If INT010CPUSO("B1_INTEG")
					aAdd(aProd, {"B1_INTEG","1",Nil})
				Endif

			EndIf
			// Fabricante
			If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ManufacturerCode:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ManufacturerCode:Text)
				cFabric := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ManufacturerCode:Text
				aAdd(aProd, {"B1_FABRIC", cFabric, Nil})
			EndIf

			// Marca
			If lDescSB5 .And. ((cVersao == "4" .And. cRelease > "006") .Or. cVersao > "4")
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Brand:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Brand:Text)
					cBrand := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Brand:Text
					aAdd(aProdSB5, {"B5_MARCA", cBrand, Nil})
				EndIf
			EndIf

			//Tributação ECF - Utilizado em Varejo
			If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Code:Text") != "U" .And.;
			!Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Code:Text)

				//Codigo da Tributacao
				cCodeTax := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Code:Text

				//Tipo da Tributacao
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Type:Text") != "U" .And.;
				!Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Type:Text)

					nPosTipo := aScan(aProd,{|x| AllTrim(x[1]) == "B1_TIPO"}) //Tipo do produto

					//Validacao do Codigo da Tributacao enviada
					If AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Type:Text) $ "1|5" //Tributado ou Reducao de Base
						//Aliquota do produto
						If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Aliquot:Text") != "U" .And.;
						!Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Aliquot:Text)

							cAliquot := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Aliquot:Text //Aliquota

							If nPosTipo > 0
								If AllTrim(aProd[nPosTipo][2]) $ "GE|GG|MO|SV"
									cTpTrib := "S" //Tipo Tributacao Servico
								Else
									cTpTrib := "T" //Tipo Tributacao ICMS
								EndIf

								//Ajusta codigo tributacao
								If Val(cAliquot) <= 9
									cTpTrib += "0"
								EndIf

								If AllTrim(cCodeTax) <> cTpTrib + CValToChar(Val(cAliquot) * 100)
									lRet 	 := .F.
									cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
									cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
									cXmlRet += STR0039 + cTpTrib + CValToChar(Val(cAliquot) * 100) //"Correto:"
									Return {lRet, cXmlRet}
								Else
									If SubStr(cTpTrib, 1, 1) == "S" //Servico
										aAdd(aProd, {"B1_ALIQISS", Val(cAliquot), Nil})
										aAdd(aProd, {"B1_PICMRET", 0, Nil})

										MDQ->(dbSetOrder(1))

									ElseIf SubStr(cTpTrib, 1, 1) == "T" //Mercadoria
										aAdd(aProd, {"B1_PICM", Val(cAliquot), Nil})
										aAdd(aProd, {"B1_PICMRET", 0, Nil})

										MDQ->(dbSetOrder(1))

										If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSTRIB)
											//Busca TES para o produto no cadastro de configuração padrão
											aAdd(aProd, {"B1_TS", MDQ->MDQ_TSTRIB, Nil})
										EndIf
									EndIf
								EndIf
							EndIf
						Else
							lRet 	 := .F.
							cXmlRet := STR0040 //"Aliquota obrigatoria para produto tipo tributado"
							Return {lRet, cXmlRet}
						EndIf
					ElseIf AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Type:Text) == "2" //Isento
						cTpTrib := "I1"

						If AllTrim(cCodeTax) <> cTpTrib
							lRet 	 := .F.
							cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
							cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
							cXmlRet += STR0039 + cTpTrib //"Correto:"
							Return {lRet, cXmlRet}
						EndIf

						aAdd(aProd, {"B1_PICMRET", 0, Nil})

						MDQ->(dbSetOrder(1))

						If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSISEN)
							//Busca TES para o produto no cadastro de configuração padrão
							aAdd(aProd, {"B1_TS", MDQ->MDQ_TSISEN, Nil})
						EndIf
					ElseIf AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Type:Text) == "3" //Substituicao Tributaria
						cAliquot := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Aliquot:Text //Aliquota

						cTpTrib := "F1"

						If AllTrim(cCodeTax) <> cTpTrib
							lRet 	 := .F.
							cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
							cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
							cXmlRet += STR0039 + cTpTrib //"Correto:"
							Return {lRet, cXmlRet}
						EndIf

						//Se aliquota nao informada, busca no parametro
						If Empty(cAliquot)
							cAliquot := CValToChar(SuperGetMv("MV_ICMPAD",, ""))
						EndIf

						aAdd(aProd, {"B1_PICM", Val(cAliquot), Nil})
						aAdd(aProd, {"B1_PICMRET", 0.01, Nil})

						MDQ->(dbSetOrder(1))

						If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSSUBS)
							//Busca TES para o produto no cadastro de configuração padrão
							aAdd(aProd, {"B1_TS", MDQ->MDQ_TSSUBS, Nil})
						EndIf
					ElseIf AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_EcfTaxing:_Type:Text) == "4" //Nao Tributado
						cTpTrib := "N1"

						If AllTrim(cCodeTax) <> cTpTrib
							lRet 	 := .F.
							cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
							cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
							cXmlRet += STR0039 + cTpTrib //"Correto:"
							Return {lRet, cXmlRet}
						EndIf

						aAdd(aProd, {"B1_PICMRET", 0, Nil})

						MDQ->(dbSetOrder(1))

						If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSNTRI)
							//Busca TES para o produto no cadastro de configuração padrão
							aAdd(aProd, {"B1_TS", MDQ->MDQ_TSNTRI, Nil})
						EndIf
					EndIf
				Else
					lRet   	:= .F.
					cXmlRet := STR0041 //"Tipo da Tributacao ECF obrigatorio para produto utilizado em varejo"
					Return {lRet, cXmlRet}
				EndIf
			EndIf
			//Codigo Alternativo 
			If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_AlternativeCode") <> "U"	.and.;
			 Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_AlternativeCode:_Code") <> "U" .and.;
			 Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_AlternativeCode:_InternalId") <> "U"
				
				cValExt := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_AlternativeCode:_InternalId:Text
				aAux := IntProInt(cValExt, cProduct, /*Versão*/)
				If aAux[1]
					aAdd(aProd, {"B1_ALTER", PadR( aAux[2][3], TamSX3("B1_COD")[1]), Nil})
				Endif
			Endif
			//Tipo de Conversor
			If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_TypeUMConversion") <> "U"; 
			.and. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_TypeUMConversion:_type") <> "U"
				cType := Alltrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_TypeUMConversion:_Type:Text)
				If cType $ 'M|D'
					aAdd(aProd, {"B1_TIPCONV", cType, Nil})
				Endif
			Endif
			//Inclui/Altera/Exclui Codigo de Barras do Produto - SLK (SigaLoja)
			If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode") <> "U"
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode") <> "A"
					//Transforma em array
					XmlNode2Arr(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode, "_BarCode")
				EndIf

				//Verifica se o Codigo de Barras foi informado
				For nCount := 1 To Len(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode)
					//Consiste tamanho do Código de Barras enviado
					If TamSx3("LK_CODBAR")[1] >= Len(AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount]:_Code:Text))
						cUMCodBar  := ""
						nQtdCodBar := 0

						//Armazena Unidade de Medida do Codigo de Barras
						If XmlChildEx(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount], "_UNIFOFMEASUREINTERNALID") <> Nil
							cUMCodBar := oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount]:_UnifOfMeasureInternalId:Text
						EndIf

						//Armazena a Quantidade do Codigo de Barras
						If XmlChildEx(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount], "_ITEMQUANTITY") <> Nil
							nQtdCodBar := Val(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount]:_ItemQuantity:Text)
						EndIf

						aAdd(aBarCode, {oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount]:_Code:Text,;
						oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount]:_InternalId:Text,;
						cUMCodBar,;
						nQtdCodBar})
					Else
						//Se encontrado erro no Codigo de Barras, nao continua a integracao
						lRet 	 := .F.
						cXmlRet := STR0034 + AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount]:_Code:Text) + STR0035 + Chr(10) //"O Codigo de Barras " ##" possui tamanho maior que o permitido."
						cXmlRet += STR0036 + CValToChar(TamSx3("LK_CODBAR")[1]) + Chr(10) //"Maximo:"
						cXmlRet += STR0037 + CValToChar(Len(AllTrim(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBarCode:_BarCode[nCount]:_Code:Text))) //"Enviado:"
						Return {lRet, cXmlRet}
					EndIf
				Next nCount
			EndIf

			If cVersao == "4" .AND. cRelease >="005" .AND. "SBZ" == SuperGetMV("MV_ARQPROD",.F.,"SB1")
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation") <> "U"
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation") <> "A"
						//Transforma em array
						XmlNode2Arr(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation, "_BranchInformation")
					EndIf
	
					For nCount := 1 To Len(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation)
					
						//Tributação ECF - Utilizado em Varejo
						If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation["+strzero(nCount,3)+"]:_EcfTaxing:_Code:Text") <> Nil
							aAdd(aProdSBZ,{/*InternalID*/,/*ExternalID*/,{}/*Valores do registro da tabela SBZ*/})
							nPosSBZ := Len(aProdSBZ)

							// InternalId do Estabelecimento/Filial da Informações do produto por Filial 
							If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation["+strzero(nCount,3)+"]:_CompanyInternalId:Text") <> Nil;
							.And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_CompanyInternalId:Text)

								// Quebra o ID em Empresa e Filial enviado(de)
								aExtEmpFil := StrTokArr( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_CompanyInternalId:Text,"|")
								 
								// retorna a empresa / filial de referente(para)
								aSBZEmpFil := FWEAIEmpFil(aExtEmpFil[1], aExtEmpFil[2] ,cMarca)
								
								aAdd(aProdSBZ[nPosSBZ,3] ,{"BZ_FILIAL" ,aSBZEmpFil[2] ,NIL})
								
								nPosCod	:= aScan(aProd,{|x|x[1]=="B1_COD"})
								If nPosCod >0
									// cria o InternalID
									aProdSBZ[nPosSBZ,1] := IntProExt(aSBZEmpFil[1], aSBZEmpFil[2], aProd[nPosCod,2])[2]
								EndIf
							Else
								lRet   	:= .F.
								cXmlRet := STR0042 //"Não foi encontrado InternalId do Estabelecimento/Filial da Informações do produto por Filial "
								Return {lRet, cXmlRet}
							EndIf
	
							// InternalId da Informações do produto por Filial 
							If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation["+strzero(nCount,3)+"]:_InternalId:Text") <> Nil;
							.And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_InternalId:Text)
								aProdSBZ[nPosSBZ,2] := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_InternalId:Text
								
							Else
								lRet   	:= .F.
								cXmlRet := STR0043 // "Não foi encontrado InternalId da Informações do produto por Filial "
								Return {lRet, cXmlRet}
							EndIf

							If Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_EcfTaxing:_Code:Text)
								If nEvento == 4 // Alteração
									nPosFilial := aScan(aProdSBZ[nPosSBZ,3],{|x|x[1]=="BZ_FILIAL"})
									nPosCod	:= aScan(aProd,{|x|x[1]=="B1_COD"})
									If nPosFilial >0 .and. nPosCod >0
										aAdd(aProdSBZ[nPosSBZ,3] ,{"BZ_COD" ,aProd[nPosCod,2] ,NIL})
									EndIf
								Else // sem tributacao no produto
									lRet   	:= .F.
									cXmlRet := STR0041 //"Tipo da Tributacao ECF obrigatorio para produto utilizado em varejo"
									Return {lRet, cXmlRet}
								EndIf
							
							Else
			
								If nEvento <> 5
									//Tipo da Tributacao
									If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation["+strzero(nCount,3)+"]:_EcfTaxing:_Type:Text") <> Nil;
									.AND. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_EcfTaxing:_Type:Text)
										// Aliquota do produto
										cAliquot := ""
										If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation["+strzero(nCount,3)+"]:_EcfTaxing:_Aliquot:Text") <> Nil
											cAliquot := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_EcfTaxing:_Aliquot:Text
										EndIf
										 
										nPosTipo := aScan(aProd,{|x| AllTrim(x[1]) == "B1_TIPO"}) //Tipo do produto
										
										aTaxing := GetEcfTaxing( aProd[nPosTipo,2] ; 
																,oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_EcfTaxing:_Code:Text;
																,oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation[nCount]:_EcfTaxing:_Type:Text;
																,cAliquot;
																)
										If aTaxing[1]
										
											nPosFilial := aScan(aProdSBZ[nPosSBZ,3],{|x|x[1]=="BZ_FILIAL"})
											nPosCod	:= aScan(aProd,{|x|x[1]=="B1_COD"})
											If nPosFilial >0 .and. nPosCod >0
												cBkpFil := cFilAnt
												cFilAnt := padr(aProdSBZ[nPosSBZ,3,nPosFilial,2],TamSX3("BZ_FILIAL")[1])
												aAreaTMP :=GetArea()
												If nEvento <> 5
													aAdd(aProdSBZ[nPosSBZ,3] ,{"BZ_COD" ,aProd[nPosCod,2] ,NIL})
													// Preencho os campos do registro da SBZ com os equivalentes dos campos da tabela SB1, 
													// somente se o registro na SBZ não existir
													dbSelectArea("SBZ")
													DbSetOrder(1)
													If ! dbSeek(padr(aProdSBZ[nPosSBZ,3,nPosFilial,2],TamSX3("BZ_FILIAL")[1])+padr(aProd[nPosCod,2],TamSX3("BZ_COD")[1]))
														// carregar os campos da SBZ com os valores da SB1
														oStruSBZ := FWFormStruct(1,"SBZ")
														For nCnt := 1 to Len(oStruSBZ:aFields)
															nPosSB1	:= aScan(aProd,{|x|x[1]==Alltrim("B1"+SubStr(oStruSBZ:aFields[nCnt,3],3,8))}) 
															If nPosSB1 >0
																aAdd(aProdSBZ[nPosSBZ,3], {oStruSBZ:aFields[nCnt,3], aProd[nPosSB1,2], NIL})
															EndIf
														Next nCnt
													EndIf
													For nCnt := 1 to Len(aTaxing[3])
														nPosSB1	:= aScan(aProdSBZ[nPosSBZ,3],{|x|x[1]==aTaxing[3,nCnt,1]}) 
														If nPosSB1 >0
															aProdSBZ[nPosSBZ,3,nPosSB1,2] := aTaxing[3,nCnt,2]
														Else
															aAdd(aProdSBZ[nPosSBZ,3], aTaxing[3,nCnt])
														EndIf
													Next nCnt
			
												EndIf
												cFilAnt := cBkpFil
												RestArea(aAreaTMP)
												If !lRet
													Return {lRet, cXmlRet}
												EndIf
												 
											EndIf
										Else
											Return {aTaxing[1], aTaxing[2]}
										EndIf
									Else // sem tributacao no produto
										lRet   	:= .F.
										cXmlRet := STR0041 //"Tipo da Tributacao ECF obrigatorio para produto utilizado em varejo"
										Return {lRet, cXmlRet}
									EndIf
								EndIf
							EndIf 
						EndIf
					Next nCount
				EndIf // Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfBranchInformation:_BranchInformation") <> "U"
			EndIf // cVersao == "4" .AND. cRelease =="005" .AND. "SBZ" == SuperGetMV("MV_ARQPROD",.F.,"SB1")

			If cVersao == "4" .And. cRelease >= "007"
				If FindFunction("AGRPMT010ACPMD") .And. lAgroAtivo .And. "AGRO" $ cCadProd
					aAgroDados := AGRPMT010ACPMD(cVersion, oXml, cMarca, nEvento, cCode)
					If Len(aAgroDados) > 0 .and. !aAgroDados[1]
						lRet   	:= .F.
						cXmlRet := Chr(10)
						For nCount := 1 To Len(aAgroDados[2])
							cXmlRet += AllTrim(aAgroDados[2][nCount]) + Chr(10)
						Next nCount
						Return {lRet, cXmlRet}
					EndIf
				EndIf
			EndIf

			// ponto de entrada inserido para controlar dados especificos do cliente
			If ExistBlock("MT010EAI")
				aRetPe := ExecBlock("MT010EAI",.F.,.F.,{aProd,nEvento})
				If ValType(aRetPe) == "A"
					aProd 	:= aClone(aRetPe)
				EndIf
			EndIf

				If nEvento == 5 // Delete

					// Indicadores do produto
					If cVersao == "4" .AND. cRelease >="005"
						cQuery := "SELECT BZ_FILIAL, BZ_COD, R_E_C_N_O_ RecnoSBZ "
						cQuery += "FROM " + RetSQLName("SBZ") + " SBZ "
						cQuery += "WHERE BZ_COD = '" + cCode + "' "
						dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery) , cAliasSBZ, .T., .F. )
						If Select(cAliasSBZ) >0
						 	While (cAliasSBZ)->(!Eof())
						 		dbSelectArea("SBZ")
						 		dbGoto((cAliasSBZ)->RecnoSBZ)
								RecLock("SBZ",.F.)
								dbDelete()
								MsUnLock()
								
								//Monta a ExternalId do Produto
								cValIntSBZ := IntProExt(, (cAliasSBZ)->BZ_FILIAL, (cAliasSBZ)->BZ_COD)[2]

								//Busca ExternalId do Produto
								cValExtSBZ := AllTrim(CFGA070Ext(cMarca, "SBZ", "BZ_COD", cValIntSBZ))
								
								aAdd(aProdSBZ,{cValIntSBZ,cValExtSBZ,{}})
								
								// Exclui na Tabela XXF (de/para)
								CFGA070Mnt(cMarca, "SBZ", "BZ_COD", cValExtSBZ, cValIntSBZ, .T.)
								
								dbSelectArea(cAliasSBZ)
						 		dbSkip()
						 	End
						 	(cAliasSBZ)->(dbCloseArea())
						EndIf
					EndIf

					// Obtém o resultado da função que faz a amarraçãoo do Produto x Cliente
					aProdCli := prodCli(cCode, cProduct, nEvento)

					If aProdCli[1][1] // Exclusão dos filhos ocorreu com sucesso?
						// Exclui o pai
						MSExecAuto({|x, y| MATA010(x, y)}, aProd, nEvento)
					Else
						lRet := .F.
						cXmlRet := aProdCli[1][2]
					EndIf
				Else // Insert or Update
					MSExecAuto({|x, y| MATA010(x, y)}, aProd, nEvento)
				EndIf

				// Se houve erros no processamento do MSExecAuto
				If lMsErroAuto
					aErroAuto := GetAutoGRLog()

					lRet := .F.
					cXmlRet := "<![CDATA["
					For nCount := 1 To Len(aErroAuto)
						cXmlRet += aErroAuto[nCount] + Chr(10)
					Next nCount
					cXmlRet += "]]>"
				Else
					//Validação para o caso de precisar SB5
					If nEvento!=5 .and. lDescSB5
						nEventoSB5 := nEvento

						aAreaAnt := GetArea()

						dbSelectArea("SB5")
						SB5->(dbSetOrder(1)) // B5_FILIAL + B5_COD

						// validar exclusão não se faz necessario por rotina padrão exclui automaticamente
						If nEvento == 4 .And. !(SB5->(MSseek( xFilial("SB5") + aProd [1][2])))
							nEventoSB5 := 3
						EndIf

						RestArea(aAreaAnt)
						// execulta a rotina auto. Dados Complementares do produto para preencher o SB5
						MSExecAuto({|x, y| MATA180(x, y)}, aProdSB5, nEventoSB5)

						If lMsErroAuto

							aErroAuto := GetAutoGRLog()

							lRet := .F.
							cXmlRet := "<![CDATA["
							For nCount := 1 To Len(aErroAuto)
								cXmlRet += aErroAuto[nCount] + Chr(10)
							Next nCount
							cXmlRet += "]]>"
						Else
							SB1->(dbSetOrder(1))
							If (cProdActiv == '0' .Or. Upper(cProdActiv) == 'FALSE' .Or. CriaVar("B1_MSBLQL",.T.) == '1') .And. SB1->(dbSeek(xFilial("SB1")+cCode))
								RecLock("SB1",.F.)
								SB1->B1_MSBLQL := '1'
								SB1->(MsUnLock())
							EndIf
						EndIf
					EndIF

					// Se o evento é diferente de Delete
					If nEvento != 5
						// Obtém o resultado da função que faz a amarraçãoo do Produto x Cliente
						aProdCli := prodCli(cCode, cProduct, nEvento)

						// Amarração Produto x Cliente ocorreu com sucesso?
						If aProdCli[1][1]
							// Grava na Tabela XXF (de/para)
							CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt )

							If nAverageCostPrice >0
								If nEvento == 3 // Insere registros na SB2 | OBS: UPDATE e DELETE são executados pela rotina automática
									aProdSB9 := {}
									aadd(aProdSB9,{"B9_COD", cCode,})	
									aadd(aProdSB9,{"B9_LOCAL", cLocPad,})	
									aadd(aProdSB9,{"B9_CM1", nAverageCostPrice,})	
									MSExecAuto({|x,y| mata220(x,y)},aProdSB9,3)		
									If lMsErroAuto

										aErroAuto := GetAutoGRLog()

										lRet := .F.
										cXmlRet := "<![CDATA["
										For nCount := 1 To Len(aErroAuto)
											cXmlRet += aErroAuto[nCount] + Chr(10)
										Next nCount
										cXmlRet += "]]>"
									EndIf
								EndIf
							EndIf
						Else // Amarração Produto x Cliente retornou erro
							lRet   := .F.
							cXmlRet := aProdCli[1][2]
						EndIf
					Else
						// Exclui na Tabela XXF (de/para)
						CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .T.)
					EndIf

					If nEvento <> 5
						If cVersao == "4" .AND. cRelease =="005" .AND. len(aProdSBZ)>0
							For nPosSBZ := 1 to len(aProdSBZ)
								nPosFilial := aScan(aProdSBZ[nPosSBZ,3],{|x|x[1]=="BZ_FILIAL"})
								nPosCod	:= aScan(aProdSBZ[nPosSBZ,3],{|x|x[1]=="BZ_COD"})
								If nPosFilial >0 .and. nPosCod >0
									cBkpFil := cFilAnt
									cFilAnt := padr(aProdSBZ[nPosSBZ,3,nPosFilial,2],TamSX3("BZ_FILIAL")[1])
									aAreaTMP :=GetArea()
									dbSelectArea("SB1")
									DbSetOrder(1)
									If dbSeek(xFilial("SB1")+padr(aProdSBZ[nPosSBZ,3,nPosCod,2],TamSX3("BZ_COD")[1])) // se o produto existe na filial enviada para a tabela SBZ
										dbSelectArea("SBZ")
										DbSetOrder(1)
										If dbSeek(padr(aProdSBZ[nPosSBZ,3,nPosFilial,2],TamSX3("BZ_FILIAL")[1])+padr(aProdSBZ[nPosSBZ,3,nPosCod,2],TamSX3("BZ_COD")[1]))
											lSBZNew := .F.
											aProdSBZ[nPosSBZ,1] := CFGA070INT( cMarca, 'SBZ', 'BZ_COD', aProdSBZ[nPosSBZ,2] )
										Else
											lSBZNew := .T.
										EndIf
										If Len(aProdSBZ[nPosSBZ,3]) <=2 
											If nEvento == 4 // Alteração
												RecLock("SBZ", lSBZNew)
												SBZ->(dbDelete())
												MsUnLock()
												CFGA070Mnt(cMarca, "SBZ", "BZ_COD", aProdSBZ[nPosSBZ,2], aProdSBZ[nPosSBZ,1], .T.)
											EndIf
										Else
											RecLock("SBZ", lSBZNew)
											For nCnt := 1 to Len(aProdSBZ[nPosSBZ,3])
												FieldPut(FieldPos(aProdSBZ[nPosSBZ,3,nCnt,1]),aProdSBZ[nPosSBZ,3,nCnt,2])
											Next nCnt
											MsUnLock()
											CFGA070Mnt( cMarca, "SBZ", "BZ_COD", aProdSBZ[nPosSBZ,2], aProdSBZ[nPosSBZ,1])
										EndIf
									Else
										lRet    := .F.
										cXmlRet := I18N(STR0044,{cFilAnt})// "Não foi possivel cadastrar na tabela de indicares do produto, pois o codigo do produto não esta cadastrado na filial #1[código da filial]#"
									EndIf
									cFilAnt := cBkpFil
									RestArea(aAreaTMP)
								 
								EndIf
							Next nPosSBZ
						EndIf
					EndIf

					// Grava dados na F2Q
					If nEvento != 5 
						If !Empty(aProdF2Q) .And. (cVersao == "4" .And. cRelease >= "010")

							aAreaAnt := GetArea()

							dbSelectArea("F2Q")
							F2Q->(dbSetOrder(1)) // F2Q_FILIAL + F2Q_PRODUT

							// Verifica se existe produto na F2Q
							If !dbSeek(xFilial("F2Q")+aProdF2Q[1,2]) .And. (nEvento == 3 .Or. nEvento == 4) // Insert .or Update
								RecLock("F2Q", .T.)
								F2Q->F2Q_FILIAL := xFilial("F2Q")
								For nCnt := 1 to Len(aProdF2Q)
									FieldPut(FieldPos(aProdF2Q[nCnt,1]),aProdF2Q[nCnt,2])
								Next nCnt
								MsUnLock()
							ElseIf dbSeek(xFilial("F2Q")+aProdF2Q[1,2]) .And. nEvento == 4 // Update
								RecLock("F2Q", .F.)
								For nCnt := 1 to Len(aProdF2Q)
									FieldPut(FieldPos(aProdF2Q[nCnt,1]),aProdF2Q[nCnt,2])
								Next nCnt
								MsUnLock()
							EndIf
							RestArea(aAreaAnt)
						EndIf
					EndIf

					// Grava dados do Agronegocio
					If cVersao == "4" .And. cRelease >= "007"
						If FindFunction("AGRPMT010GRVMD") .And. lAgroAtivo .And. "AGRO" $ cCadProd
							If !lMsErroAuto .And. aAgroDados[1] == .T. // #AGRO
								AGRPMT010GRVMD(aAgroDados[2], nEvento, cCode , cVersion)
								If lMsErroAuto

									aErroAuto := GetAutoGRLog()

									lRet := .F.
									cXmlRet := "<![CDATA["
									For nCount := 1 To Len(aErroAuto)
										cXmlRet += aErroAuto[nCount] + Chr(10)
									Next nCount
									cXmlRet += "]]>"
									Return {lRet, cXMLRet}
								EndIf
							EndIf
						EndIf
					EndIf

					//Inclui/Altera/Exclui Preco do Produto - SB0 (SigaLoja)
					If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices") <> "U"
						If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices") <> "A"
							//Transforma em array
							XmlNode2Arr(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices, "_GenericPrices")
						EndIf

						//Adiciona as precificacoes de Produto
						For nCount := 1 To Len(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices)
							cPriceID		:= ""
							cCurrency		:= ""
							cBaseDatePrice	:= ""
							cPriceValue		:= "0"

							If XmlChildEx(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount], "_PRICEID") <> Nil .And.;
							!Empty(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_PriceId:Text)
								cPriceID := oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_PriceId:Text
							EndIf

							If XmlChildEx(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount], "_CURRENCYINTERNALID") <> Nil .And.;
							!Empty(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_CurrencyInternalId:Text)
								cCurrency := oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_CurrencyInternalId:Text
							Endif

							If XmlChildEx(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount], "_BASEDATEPRICE") <> Nil .And.;
							!Empty(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_BaseDatePrice:Text)
								cBaseDatePrice := oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_BaseDatePrice:Text
							EndIf

							If XmlChildEx(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount], "_PRICE") <> Nil .And.;
							!Empty(oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_Price:Text)
								cPriceValue := oXML:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfGenericPrices:_GenericPrices[nCount]:_Price:Text
							EndIf

							//Verifica se Identificacao do preco foi informada
							If !Empty(cPriceID)
								aAdd(aPrcVen,	{cPriceID,cPriceValue,cCurrency,cBaseDatePrice})
							EndIf
						Next nCount
					EndIf

					//Executa cadastro de Preco - SB0
					If (Len(aPrcVen) > 0 .Or. nEvento == 5) .And. FindFunction("Lj110Integ")
						Lj110Integ(nEvento, cCode, aPrcVen)
					EndIf

					//Efetua tratamento de Codigo de Barras
					SLK->(dbSetOrder(2))

					If (Len(aBarCode) > 0 .Or. nEvento == 5) .And. FindFunction("Lj210Integ")
						aIntBarCode := Lj210Integ(nEvento, cCode, aBarCode, cProduct)
					ElseIf (Len(aBarCode) == 0 .And. SLK->(dbSeek(xFilial("SLK") + Padr(cCode, TamSx3("B1_COD")[1])))) .And. FindFunction("Lj210Integ")
						aIntBarCode := Lj210Integ(5, cCode, aBarCode, cProduct)
					EndIf

					cXMLRet := "<ListOfInternalId>"
					cXMLRet +=    "<InternalId>"
					cXMLRet +=       "<Name>ItemInternalId</Name>"
					cXMLRet +=       "<Origin>" + cValExt + "</Origin>"
					cXMLRet +=       "<Destination>" + cValInt + "</Destination>"
					cXMLRet +=    "</InternalId>"
					If nEvento == 5 // Delete
						cXMLRet += "</ListOfInternalId>"
					Else
						cXMLRet +=    "<InternalId>"
						cXMLRet +=       "<Name>UnitOfMeasureInternalId</Name>"
						cXMLRet +=       "<Origin>" + cUMExt + "</Origin>"
						cXMLRet +=       "<Destination>" + cUMInt + "</Destination>"
						cXMLRet +=    "</InternalId>"
						cXMLRet +=    "<InternalId>"
						cXMLRet +=       "<Name>StandardWarehouseInternalId</Name>"
						cXMLRet +=       "<Origin>" + cStWaExt + "</Origin>"
						cXMLRet +=       "<Destination>" + cStWaInt + "</Destination>"
						cXMLRet +=    "</InternalId>"

						If cVersao == "4" .AND. cRelease =="005" .AND. Len(aProdSBZ)>0
							For nPosSBZ := 1 to Len(aProdSBZ)
								cXMLRet +=    "<InternalId>"
								cXMLRet +=       "<Name>BranchInformation</Name>"
								cXMLRet +=       "<Origin>" + aProdSBZ[nPosSBZ,2] + "</Origin>"
								cXMLRet +=       "<Destination>" + Alltrim(aProdSBZ[nPosSBZ,1]) + "</Destination>"
								cXMLRet +=    "</InternalId>"
							Next nPosSBZ
						EndIf
						
						//Retorno de informacoes de Codigo de Barras
						If Len(aIntBarCode) > 0
							For nCount := 1 To Len(aIntBarCode)
								cXMLRet +=    "<InternalId>"
								cXMLRet +=      	"<Name>BarCodeInternalId</Name>"
								cXMLRet +=    	"<Origin>" + aIntBarCode[nCount][1] + "</Origin>"
								cXMLRet +=    	"<Destination>" + aIntBarCode[nCount][2] + "</Destination>"
								cXMLRet +=    "</InternalId>"
							Next nCount

							cXMLRet += "</ListOfInternalId>"
						Else
							cXMLRet += "</ListOfInternalId>"
						EndIf
					EndIf
				EndIf

		ElseIf cTypeMessage == EAI_MESSAGE_RESPONSE
			// Se não houve erros na resposta
			If Upper(oXML:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_Status:Text) == "OK"
				// Verifica se a marca foi informada
				If Type("oXML:_TOTVSMessage:_MessageInformation:_Product:_name:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_MessageInformation:_Product:_name:Text)
					cProduct := oXml:_TOTVSMessage:_MessageInformation:_Product:_name:Text
				Else
					lRet    := .F.
					cXmlRet := STR0023 //"Erro no retorno. O Product é obrigatório!"
					Return {lRet, cXmlRet}
				EndIf

				If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId") <> "U"
					// Se não for array
					If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId") != "A"
						// Transforma em array
						XmlNode2Arr(oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId, "_InternalId")
					EndIf

					// Verifica se o código interno foi informado
					If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Origin:Text") != "U" .And. !Empty(oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Origin:Text)
						cValInt := oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Origin:Text
					Else
						lRet    := .F.
						cXmlRet := STR0024 //"Erro no retorno. O OriginalInternalId é obrigatório!"
						Return {lRet, cXmlRet}
					EndIf

					// Verifica se o código externo foi informado
					If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Destination:Text") != "U" .And. !Empty(oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Destination:Text)
						cValExt := oXML:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId[1]:_Destination:Text
					Else
						lRet    := .F.
						cXmlRet := STR0025 //"Erro no retorno. O DestinationInternalId é obrigatório!"
						Return {lRet, cXmlRet}
					EndIf

					// Obtém a mensagem original enviada
					If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text") != "U" .And. !Empty(oXml:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text)
						cXML := oXml:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text
					Else
						lRet    := .F.
						cXmlRet := STR0026 //"Conteúdo do MessageContent vazio!"
						Return {lRet, cXmlRet}
					EndIf

					If Type("oXML:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_Event:Text") <> "U" .And. !Empty(oXML:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_Event:Text)
						If Upper(oXML:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_Event:Text) == "UPSERT"
							CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .F.)
						Elseif Upper(oXML:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_Event:Text) == "DELETE"
							CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .T.)
						Endif
					Else
						// Faz o parse do XML em um objeto
						oXML := XmlParser(cXML, "_", @cError, @cWarning)

						// Se não houve erros no parse
						If oXML != Nil .And. Empty(cError) .And. Empty(cWarning)
							If Upper(oXML:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "UPSERT"
								// Insere / Atualiza o registro na tabela XXF (de/para)
								CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .F.)
							ElseIf Upper(oXML:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "DELETE"
								// Exclui o registro na tabela XXF (de/para)
								CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .T.)
							Else
								lRet := .F.
								cXmlRet := STR0027 //"Evento do retorno inválido!"
								Return {lRet, cXmlRet}
							EndIf
						Else
							lRet := .F.
							cXmlRet := STR0033 //"Erro no parser do retorno!"
							Return {lRet, cXmlRet}
						EndIf
					Endif
				Endif
			Else
				// Se não for array
				If Type("oXML:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message") != "A"
					// Transforma em array
					XmlNode2Arr(oXML:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message, "_Message")
				EndIf

				// Percorre o array para obter os erros gerados
				For nCount := 1 To Len(oXML:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message)
					cError := oXML:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message[nCount]:Text + Chr(10)
				Next nCount

				lRet := .F.
				cXmlRet := cError
			Endif
		ElseIf cTypeMessage == EAI_MESSAGE_WHOIS
 			cXmlRet := '1.000|1.001|2.000|2.001|3.003|3.004|3.005|3.006|3.007|4.000|4.002|4.003|4.005|4.007'
		Endif
	ElseIf nTypeTrans == TRANS_SEND
		If lMVC
			oModel := FWModelActive()
			
			nOperation := oModel:GetOperation()
		Else
			If Inclui
				nOperation := 3
			ElseIf Altera
				nOperation := 4
			EndIf
		EndIf
		// Verifica se é uma exclusão
		If nOperation != 3 .And. nOperation != 4
			cEvent := 'delete'
			CFGA070Mnt(,"SB1","B1_COD",,IntProExt(,,SB1->B1_COD,)[2],.T.)
		Else
			cEvent := 'upsert'
		EndIf
		//Se está integrando com o PPI, utiliza as variáveis de memória, pois a inclusão/alteração/exclusão ainda não foi efetivada
		//no momento da integração, e por isso não é possível utilizar o valor da tabela (SB1->B1_COD).
		//É utilizado o valor da tabela apenas se a operação for de exclusão.
		If lIntegPPI .And. cEvent == 'upsert'
			cPont := "M->"
			cPont5:= cPont
			cB1_DESCB5	:= Posicione("SB5",1,xFilial("SB5")+M->B1_COD,"B5_CEME")
			RegToMemory("SB5",.F.,.T.,.F.)
			
		Else
			cPont  := "SB1->"
			cPont5 := "SB5->"
			cB1_DESCB5	:= Posicione("SB5",1,xFilial("SB5")+SB1->B1_COD,"B5_CEME")
		Endif

		cB1_COD     := &(cPont+"B1_COD")
		cB1_DESC    := &(cPont+"B1_DESC")
		cB1_ATIVO   := &(cPont+"B1_ATIVO")
		cB1_MSBLQL  := &(cPont+"B1_MSBLQL")
		cB1_GRUPO   := &(cPont+"B1_GRUPO")
		cB1_UM      := &(cPont+"B1_UM")
		cB1_LOCPAD  := &(cPont+"B1_LOCPAD")
		nB1_LE      := &(cPont+"B1_LE")
		nB1_LM      := &(cPont+"B1_LM")
		nB1_PESO    := &(cPont+"B1_PESO")
		nB1_PESBRU  := &(cPont+"B1_PESBRU")
		cB1_ORIGEM  := &(cPont+"B1_ORIGEM")
		cB1_FPCOD   := &(cPont+"B1_FPCOD")
		cB1_POSIPI  := &(cPont+"B1_POSIPI")
		cB1_TIPO    := &(cPont+"B1_TIPO")
		cB1_RASTRO  := &(cPont+"B1_RASTRO")
		cB1_LOCALIZ := &(cPont+"B1_LOCALIZ")
		cB1_CONTA   := &(cPont+"B1_CONTA")
		cB1_SEGUM   := &(cPont+"B1_SEGUM")
		cB1_TIPCONV := &(cPont+"B1_TIPCONV")
		nB1_CONV    := &(cPont+"B1_CONV")
		cB1_CC      := &(cPont+"B1_CC")
		nB1_QE      := &(cPont+"B1_QE")
		cB1_FILIAL  := &(cPont+"B1_FILIAL")
		nB1_UPRC    := &(cPont+"B1_UPRC")
		nB1_CUSTD   := &(cPont+"B1_CUSTD")
		cB1_UCALSTD := &(cPont+"B1_UCALSTD")
		nB1_PRV1    := &(cPont+"B1_PRV1")
		cB1_FABRIC  := &(cPont+"B1_FABRIC")
		cB1_ALTER   := &(cPont+"B1_ALTER")
		cB5_MARCA   := &(cPont5+"B5_MARCA")
		//Envia Informacoes do Complemento do Produto
		//para E-commerce

		cB5_ECTITU		:= &(cPont5+"B5_ECTITU")
		cB5_ECDESCR		:= &(cPont5+"B5_ECDESCR")
		cB5_ECCARAC		:= &(cPont5+"B5_ECCARAC")
		cB5_ECPROFU		:= &(cPont5+"B5_ECPROFU")
		cB5_ECLARGU		:= &(cPont5+"B5_ECLARGU")
		cB5_ECCOMP		:= &(cPont5+"B5_ECCOMP") 
		cB5_ECCUBAG		:= &(cPont5+"B5_ECCUBAG")
		cB5_ECFLAG		:= &(cPont5+"B5_ECFLAG") 
		
		//Fim complemento

		// Monta XML de envio de mensagem unica
		cXMLRet := '<BusinessEvent>'
		cXMLRet +=    '<Entity>' + cEntity + '</Entity>'
		cXMLRet +=    '<Event>' + cEvent + '</Event>'
		cXMLRet +=    '<Identification>'
		cXMLRet +=       '<key name="InternalID">' + IntProExt(/*Empresa*/, /*Filial*/, cB1_COD, /*Versão*/)[2] + '</key>'
		cXMLRet +=    '</Identification>'
		cXMLRet += '</BusinessEvent>'
		cXMLRet += '<BusinessContent>'
		cXMLRet +=    '<CompanyId>' + cEmpAnt + '</CompanyId>'
		cXMLRet +=    '<BranchId>' + RTrim(cFilAnt) + '</BranchId>'
		cXMLRet +=    '<CompanyInternalId>' + cEmpAnt + '|' + RTrim(cFilAnt) + '</CompanyInternalId>'
		cXMLRet +=    '<Code>' + AllTrim(cB1_COD) + '</Code>'
		cXMLRet +=    '<InternalId>' + IntProExt(/*Empresa*/, /*Filial*/, cB1_COD, /*Versão*/)[2] + '</InternalId>'

		If lDescSB5 .And. !Empty(cB1_DESCB5)
			cXMLRet +=    '<Name>' + _NoTags(AllTrim(cB1_DESCB5)) + '</Name>'
		Else
			cXMLRet +=    '<Name>' + _NoTags(AllTrim(cB1_DESC)) + '</Name>'
		Endif

		cXMLRet +=    '<ShortName>' + _NoTags(AllTrim(cB1_DESC)) + '</ShortName>'
		cXMLRet +=    '<Active>' + IIf(cB1_ATIVO == "N" .OR. cB1_MSBLQL == "1", "0", "1") + '</Active>'
		//|
		//| Modificado para atender a integração do Datasul
		//| a Tag StockGroupCode é um campo númerico no datasul e por isso no SX5 tabela 02 deve ser
		//| cadastrado os códigos num range de 01 À 99
		//| validação observa se o cadastro foi enviado pelo modulo de TMS

		If !Empty(cB1_GRUPO) .And. cModulo <> "TMS"
			cXMLRet +=    '<StockGroupCode>' + AllTrim(cB1_GRUPO) + '</StockGroupCode>'
			If lIntegPPI
				cXMLRet +=    '<StockGroupInternalId>' + cEmpAnt + '|' + RTrim(xFilial("SBM")) + '|' + AllTrim(cB1_GRUPO) + '</StockGroupInternalId>'
			Else
				If XX4MENS("MATA035", "FAMILY" )
					cXMLRet +=    '<StockGroupInternalId>' + IntFamExt(/*cEmpresa*/,/*cFil*/,AllTrim(SB1->B1_GRUPO), Nil )[2] + '</StockGroupInternalId>'
				Elseif XX4MENS("MATA035", "STOCKGROUP" )
					cXMLRet +=    '<StockGroupInternalId>' + IntStockExt(/*cEmpresa*/,/*cFil*/,AllTrim(SB1->B1_GRUPO),Nil )[2] + '</StockGroupInternalId>'
				Else
					cXMLRet +=    '<StockGroupInternalId>' + cEmpAnt + "|" + AllTrim(xFilial("SBM")) + "|" + AllTrim(cB1_GRUPO) + '</StockGroupInternalId>'
				Endif
			EndIf

			cXMLRet +=    '<StockGroupDescription>' + _NoTags(AllTrim(getGProd(cB1_GRUPO))) + '</StockGroupDescription>'
		//|
		//| Para o modulo TMS o grupo é o B1_TIPO
		//|
		ElseIf cModulo == "TMS"
			cXMLRet +=    '<StockGroupCode>' + AllTrim(cB1_TIPO) + '</StockGroupCode>'
			cXMLRet +=    '<StockGroupInternalId>' + cEmpAnt + '|' + RTrim(xFilial("SB1")) + '|' + AllTrim(cB1_TIPO) + '</StockGroupInternalId>'
			cXMLRet +=    '<StockGroupDescription>' + _NoTags(AllTrim(Posicione("SX5",1,xFilial("SX5") + "02" + cB1_TIPO,"X5_DESCRI"))) + '</StockGroupDescription>'
		Else
			cXMLRet +=    '<StockGroupCode/>'
			cXMLRet +=    '<StockGroupInternalId/>'
			cXMLRet +=    '<StockGroupDescription/>'
		EndIf
		cXMLRet +=    '<UnitOfMeasureCode>' + RTrim(cB1_UM) + '</UnitOfMeasureCode>'
		cXMLRet +=    '<UnitOfMeasureInternalId>' + IntUndExt(/*cEmpresa*/, /*cFilial*/, cB1_UM)[2] + '</UnitOfMeasureInternalId>'
		cXMLRet +=    '<StandardWarehouseCode>' + RTrim(cB1_LOCPAD) + '</StandardWarehouseCode>'
		cXMLRet +=    '<StandardWarehouseInternalId>' + IntLocExt(/*Empresa*/, /*Filial*/, cB1_LOCPAD, /*Versão*/)[2] + '</StandardWarehouseInternalId>'
		cXMLRet +=    '<StandardWarehouseDescription>' + _NoTags(DscLocEs(cB1_LOCPAD)) + '</StandardWarehouseDescription>'
		cXMLRet +=    '<EconomicLot>' + cValToChar(nB1_LE) + '</EconomicLot>'
		cXMLRet +=    '<MinimumLot>' + cValToChar(nB1_LM) + '</MinimumLot>'
		If (cB1_RASTRO == "S" .Or. cB1_RASTRO == "L")
			cXmlRet += '<StockControlType>3</StockControlType>'
		Else
			If (cB1_LOCALIZ == "S")
				cXmlRet += '<StockControlType>2</StockControlType>'
			Else
				cXmlRet += '<StockControlType />'
			EndIf
		EndIf
		cXMLRet +=    '<NetWeight>' + cValToChar(nB1_PESO) + '</NetWeight>'
		cXMLRet +=    '<GrossWeight>' + cValToChar(nB1_PESBRU) +  '</GrossWeight>'
		cXMLRet +=    '<Origin>' + AllTrim(cB1_ORIGEM) + '</Origin>'

		aF2QArea := F2Q->(GetArea())
		F2Q->(DBSetOrder(1)) //F2Q_FILIAL + F2Q_PRODUT
		If F2Q->(DBSeek(xFilial("F2Q")+SB1->B1_COD))
			cXMLRet +=    '<HealthAgency>' + AllTrim(F2Q->F2Q_CODANV) + '</HealthAgency>'
		Else
			cXMLRet +=    '<HealthAgency>' + PadR(" ", TamSX3("F2Q_CODANV")[1]) + '</HealthAgency>'
		EndIf
		RestArea(aF2QArea)

		If !Empty(cB1_FPCOD)
			cXMLRet +=    '<FamilyCode>' + RTrim(cB1_FPCOD) + '</FamilyCode>'
			cXMLRet +=    '<FamilyInternalId>' + cEmpAnt + '|' + RTrim(xFilial("SYC")) + '|' + RTrim(cB1_FPCOD) + '</FamilyInternalId>'
			cXMLRet +=    '<FamilyDescription>' + _NoTags(DscFam(cB1_FPCOD)) + '</FamilyDescription>'
		ElseIf cModulo == "TMS"
			cXMLRet +=    '<FamilyCode>' + RTrim(cB1_GRUPO) + '</FamilyCode>'
			cXMLRet +=    '<FamilyInternalId>' + cEmpAnt + '|' + RTrim(xFilial("SB1")) + '|' + RTrim(cB1_GRUPO) + '</FamilyInternalId>'
			cXMLRet +=    '<FamilyDescription>' +  _NoTags(AllTrim(getGProd(cB1_GRUPO)))  + '</FamilyDescription>'
		Else
			cXMLRet +=    '<FamilyCode />'
			cXMLRet +=    '<FamilyInternalId />'
			cXMLRet +=    '<FamilyDescription />'
		EndIf
		If Empty(cB1_FABRIC)
			cXMLRet +=    '<ManufacturerCode />'
		Else
			cXMLRet +=    '<ManufacturerCode>' + _NoTags(cB1_FABRIC) + '</ManufacturerCode>'
		EndIf
		If ((cVersao == "4" .And. cRelease > "006") .Or. cVersao > "4")
			If Empty(cB5_MARCA)
				cXMLRet +=    '<Brand />'
			Else
				cXMLRet +=    '<Brand>' + _NoTags(AllTrim(cB5_MARCA)) + '</Brand>'
			EndIf
		Endif
		cXMLRet += '<FiscalInformation>'
		If !Empty(cB1_POSIPI)
			cXMLRet +=    '<FiscalClassification>'
			cXMLRet +=       '<Code>' + RTrim(cB1_POSIPI) + '</Code>'
			cXMLRet +=       '<FiscalClassificationInternalId>' + RTrim(cB1_POSIPI) + '</FiscalClassificationInternalId>'
			cXMLRet +=       '<Description>' + _NoTags(DscNCM(cB1_POSIPI)) + '</Description>'
			cXMLRet +=    '</FiscalClassification>'
		EndIf
		cXMLRet +=    '<PisRetaining>'+ IIF(SB1->B1_PIS=='1','true','false') + '</PisRetaining>'
		cXMLRet +=    '<PisAliquot>'+cValToChar(SB1->B1_PPIS)+'</PisAliquot>'
		cXMLRet +=    '<CofinsRetaining>'+ IIF(SB1->B1_COFINS=='1','true','false') +' </CofinsRetaining>'
		cXMLRet +=    '<CofinsAliquot>'+cValToChar(SB1->B1_PCOFINS)+'</CofinsAliquot>'
		cXMLRet +=    '<CsllRetaining>'+ IIF(SB1->B1_CSLL=='1','true','false') +'</CsllRetaining>'
		cXMLRet +=    '<CsllAliquot>'+cValToChar(SB1->B1_PCSLL)+'</CsllAliquot>'
		cXMLRet +=    '<IrrfIncidence>'+ IIF(SB1->B1_IRRF=='S','true','false') +'</IrrfIncidence>'
		cXMLRet +=    '<IssAliquot>'+cValToChar(SB1->B1_ALIQISS)+'</IssAliquot>'
		If cPaisLoc == "BRA"
			cXMLRet +=    '<TaxSubstitutionCode>'+SB1->B1_CEST+'</TaxSubstitutionCode>'
		EndIf
		cXMLRet +=    '<IssServiceCode>'+SB1->B1_CODISS+'</IssServiceCode>'
		If cPaisLoc == "BRA"
			cXMLRet += '<MunicipalTaxCode>'+SB1->B1_TRIBMUN+'</MunicipalTaxCode>'
		EndIf
		cXMLRet += '</FiscalInformation>'

		cXMLRet +=    '<ProductType>' + getPType(cB1_TIPO, nTypeTrans) + '</ProductType>'
		cXMLRet +=    '<Trail>' + RTrim(cB1_RASTRO) + '</Trail>'
		cXMLRet +=    '<BinControl>' + If(cB1_LOCALIZ == "S","True","False") + '</BinControl>'
		If !Empty(cB1_CONTA)
			cXMLRet +=    '<AccountantAccountCode>' + RTrim(cB1_CONTA) + '</AccountantAccountCode>'
		EndIf
		If !Empty(cB1_SEGUM)
			cXMLRet +=    '<SecondUnitOfMeasureCode>' + RTrim(cB1_SEGUM) + '</SecondUnitOfMeasureCode>'
			cXMLRet +=    '<SecondUnitOfMeasureInternalId>' + IntUndExt(/*cEmpresa*/, /*cFilial*/, cB1_SEGUM)[2] + '</SecondUnitOfMeasureInternalId>'
		Else
			cXMLRet +=    '<SecondUnitOfMeasureCode />'
			cXMLRet +=    '<SecondUnitOfMeasureInternalId />'
		EndIf
		cXMLRet +=    '<MultiplicationFactorValue>' + iIf(cB1_TIPCONV == 'M', cValToChar(nB1_CONV), cValToChar(1 / nB1_CONV)) + '</MultiplicationFactorValue>'
		If lIntegPPI
			cXMLRet += '<Detail/>'
			cXMLRet += '<MultipleLot>0</MultipleLot>'
			cXMLRet += '<CostCenterCode>' + cB1_CC + '</CostCenterCode>'
			cXMLRet += '<PackingQuantity>' + cValToChar(nB1_QE) + '</PackingQuantity>'
		EndIf

      	cXmlCodBar := ""
      
      	If !Empty(SB1->B1_CODBAR)
			cXmlCodBar +=		'<BarCode>'
			cXmlCodBar +=			'<Code>' + AllTrim(SB1->B1_CODBAR) + '</Code>'
			cXmlCodBar +=			'<InternalId>' + cEmpAnt + '|' + RTrim(xFilial("SB1"))+ "|" + RTrim(SB1->B1_COD) + '</InternalId>'
			cXmlCodBar +=		'</BarCode>'		
		EndIf

      	aSLKArea := SLK->(GetArea())
      	
      	SLK->(DBSetOrder(2)) //LK_FILIAL+LK_CODIGO+LK_CODBAR
		SLK->(DBSeek(xFilial("SLK")+SB1->B1_COD))
  		While SLK->(!EOF()) .And. xFilial("SLK")+SB1->B1_COD == SLK->(LK_FILIAL+LK_CODIGO)
  			cXmlCodBar +=	'<BarCode>'
  			cXmlCodBar +=		'<Code>' + AllTrim(SLK->LK_CODBAR) + '</Code>'
  			cXmlCodBar +=		'<InternalId>' + cEmpAnt + '|' + RTrim(xFilial("SLK"))+ "|" + RTrim(SLK->LK_CODIGO) + '</InternalId>'
  			cXmlCodBar +=		'<ItemQuantity>' + AllTrim(Str(SLK->LK_QUANT)) + '</ItemQuantity>'
  			If SLK->(ColumnPos("LK_TIPO")) > 0 .And. !Empty(SLK->LK_TIPO)// Campo criado para enviar o tipo de código ex: EAN13 que deve ser cadastrado na tabela 93 do SX5
			    cXmlCodBar += 		'<ItemTypeCode>'+AllTrim(SLK->LK_TIPO)+'</ItemTypeCode>'
			EndIf
			cXmlCodBar +=	'</BarCode>'
			SLK->(DBSkip())			
		End
      	
      	If !Empty(cXmlCodBar)
      		cXMLRet += '<ListOfBarCode>'
      		cXMLRet += cXmlCodBar 
      		cXMLRet +=	'</ListOfBarCode>'
      	EndIf	

		//Codigo ALternativo
      	If !Empty(SB1->B1_ALTER)
			cXMLRet +=		'<AlternativeCode>'
			cXMLRet +=			'<Code>' + AllTrim(SB1->B1_ALTER) + '</Code>'
			cXMLRet +=			'<InternalId>' + cEmpAnt + '|' + RTrim(xFilial("SB1"))+ "|" + RTrim(SB1->B1_ALTER) + '</InternalId>'
			cXMLRet +=			'<Description>' + Posicione("SB1",1,xFilial("SB1")+SB1->B1_ALTER,"B1_DESC") + '</Description>'
			cXMLRet +=		'</AlternativeCode>'		
		EndIf
		//Tipo de COnversão
      	If !Empty(SB1->B1_TIPCONV)
			cXMLRet +=		'<TypeUMConversion>'
			cXMLRet +=			'<type>' + RTRIM(SB1->B1_TIPCONV) + '</type>'
			cXMLRet +=			'<Description>' + IIF(UPPER(SB1->B1_TIPCONV) == 'M','Multiplicador',IIF(UPPER(SB1->B1_TIPCONV) == 'D','DIVISOR','')) + '</Description>'
			cXMLRet +=		'</TypeUMConversion>'		
		EndIf

		RestArea(aSLKArea)

		dbSelectArea("SBZ") //Indicadores de Produtos
		SBZ->(dbSetOrder(1)) //BZ_FILIAL+BZ_COD
		aAreaAnt := GetArea()

		If GetNewPar("MV_SLMSBZ", 0) == 1 // Considera tabela SBZ ou não para dados do produto (0 - NAO ; 1 - SIM)
			If SBZ->(msSeek(PadR(cB1_FILIAL, TamSX3("BZ_FILIAL")[1]) + PadR(cB1_COD, TamSX3("BZ_COD")[1])))
				nPrecoCusto  := SBZ->BZ_UPRC
				nCustoPadrao := SBZ->BZ_CUSTD
				dBaseDate    := SBZ->BZ_UCALSTD
			Else
				nPrecoCusto  := nB1_UPRC
				nCustoPadrao := nB1_CUSTD
				dBaseDate    := cB1_UCALSTD
			EndIf
		Else
			nPrecoCusto  := nB1_UPRC
			nCustoPadrao := nB1_CUSTD
			dBaseDate    := cB1_UCALSTD
		EndIf

		RestArea(aAreaAnt)

		dbSelectArea("SB2") //Saldos Físico e Financeiro
		SB2->(dbSetOrder(1)) //B2_FILIAL+B2_COD+B2_LOCAL
		aAreaAnt := GetArea()

		If SB2->(msSeek(PadR(cB1_FILIAL, TamSX3("B2_FILIAL")[1]) + PadR(cB1_COD, TamSX3("B2_COD")[1]) + PadR(cB1_LOCPAD, TamSX3("B2_LOCAL")[1])))
			nCustoMedio := SB2->B2_CM1
		Else
			nCustoMedio := 0.0
		EndIf

		RestArea(aAreaAnt)

		cXMLRet +=    '<Values>'
		cXMLRet +=       '<CostPrice>' + AllTrim(cValToChar(nPrecoCusto)) + '</CostPrice>'
		cXMLRet +=       '<SalesPrice>' + AllTrim(cValToChar(nB1_PRV1)) + '</SalesPrice>'
		cXMLRet +=       '<AverageCostPrice>' + AllTrim(cValToChar(nCustoMedio)) + '</AverageCostPrice>'
		cXMLRet +=       '<StandardCostPrice>' + AllTrim(cValToChar(nCustoPadrao)) + '</StandardCostPrice>'
		If !Empty(dBaseDate)
			cXMLRet +=    '<BaseDate>' + SubStr(DToS(dBaseDate), 1, 4) + '-' + SubStr(DToS(dBaseDate), 5, 2) + '-' + SubStr(DToS(dBaseDate), 7, 2) + '</BaseDate>'
		EndIf
		cXMLRet +=    '</Values>'

		If lItemInfo
			dbSelectArea("SA7")
			SA7->(dbSetOrder(2)) // A7_FILIAL + A7_PRODUTO + A7_CLIENTE + A7_LOJA
			aAreaAnt := GetArea()

			If SA7->(MsSeek(xFilial("SA7") + cB1_COD))
				cXMLRet += '<ListOfCustomerItemInformation>'

				While !SA7->(EOF()) .And. SA7->A7_PRODUTO == cB1_COD
					cXMLRet += '<CustomerItemInformation>'
					cXMLRet +=    '<CustomerCode>' + SA7->A7_CLIENTE + '</CustomerCode>'
					cXMLRet +=    '<CustomerInternalId>' + IntCliExt(/*Empresa*/, /*Filial*/, SA7->A7_CLIENTE, SA1->A1_LOJA, /*Versão*/)[2] + '</CustomerInternalId>'
					cXMLRet +=    '<CustomerItemCode>' + SA7->A7_CODCLI + '</CustomerItemCode>'
					cXMLRet +=    '<CustomerItemInternalId>' + IntProExt(/*Empresa*/, /*Filial*/, SA7->A7_CODCLI, /*Versão*/)[2] + '</CustomerItemInternalId>'
					cXMLRet += '</CustomerItemInformation>'

					SA7->(dbSkip())
				EndDo
				cXMLRet += '</ListOfCustomerItemInformation>'
			EndIf
		EndIf

		If AllTrim(cVersao) == "4"
			//Categoria de produtos
			aCategory := ItemxCateg()
			If Len(aCategory) > 0
				cXMLRet +=	'<ListOfComercialFamilyItem>'
				For nCount := 1 To Len(aCategory)
					cXMLRet +=		'<ComercialFamilyItem>'
					cXMLRet +=			'<ComercialFamilyCode>'+ aCategory[nCount][3] + '</ComercialFamilyCode>'
					cXMLRet +=			'<ComercialFamilyInternalId>' + cEmpAnt + '|' + RTrim(aCategory[nCount][2])+ "|" + RTrim(aCategory[nCount][3]) + '</ComercialFamilyInternalId>'
					cXMLRet +=			'<ComercialFamilyDescription>' + _NoTags(aCategory[nCount][4]) + '</ComercialFamilyDescription>'
					cXMLRet +=		'</ComercialFamilyItem>'
				Next nCount
				cXMLRet +=	'</ListOfComercialFamilyItem>'
			EndIf
		EndIf

		If lIntegPPI .And. ExistBlock("PCPADDTAGS")
			cAddXml := ExecBlock("PCPADDTAGS",.F.,.F.,{cEntity,cEvent,cPont,oModel})
			If ValType(cAddXml) == "C"
				cXMLRet += cAddXml
			EndIf
		EndIf
		
		cXMLRet +=	'<EcommerceItemInformation>'
		cXMLRet +=		'<ItemTitle>'			  + AllTrim(cB5_ECTITU)  + '</ItemTitle>'
		cXMLRet +=		'<ItemDescription>' 	  + AllTrim(cB5_ECDESCR) + '</ItemDescription>'
		cXMLRet +=		'<ItemFeaturesTechnical>' + AllTrim(cB5_ECCARAC) + '</ItemFeaturesTechnical>'
		cXMLRet +=		'<ItemHeight>' 			  + AllTrim(cValToChar(cB5_ECPROFU))+ '</ItemHeight>'
		cXMLRet +=		'<ItemWidth>' 			  + AllTrim(cValToChar(cB5_ECLARGU))+ '</ItemWidth>'
		cXMLRet +=		'<ItemLenght>'			  + AllTrim(cValToChar(cB5_ECCOMP)) + '</ItemLenght>'
		cXMLRet +=		'<ItemDimensions>' 		  + AllTrim(cValToChar(cB5_ECCUBAG))+ '</ItemDimensions>'
		cXMLRet +=		'<ItemStatus>' 			  + AllTrim(cB5_ECFLAG) + '</ItemStatus>'
		cXMLRet +=	'</EcommerceItemInformation>'

		If cVersao == "4" .and. cRelease >= "007"
			If FindFunction("AGRPMT010XMLENV") .And. lAgroAtivo .And. "AGRO" $ cCadProd
				cXMLRet += AGRPMT010XMLENV(cVersion, cB1_COD)
			EndIf
		EndIf

		RestArea(aAreaAnt)
         
		cXMLRet += '</BusinessContent>'
	EndIf

	If lRet .AND. lIntegPPI
		completXml(@cXMLRet)
	EndIf

Return {lRet, cXmlRet}

// --------------------------------------------------------------------------------------
/*/{Protheus.doc} prodCli
Faz a amarração do Produto x Cliente (SA7)

@param   cCode    Código do Produto
@param   cProduct Marca (RM, Protheus, Microsiga, etc)
@param   nEvento  Evento ocorrido no CRUD do Produto

@author  Leandro Luiz da Cruz
@version P11
@since   04/01/2013
@return  cResult Variável com o valor obtido
/*/
// --------------------------------------------------------------------------------------

Static Function prodCli(cCode, cProduct, nEvento, cVersao, cDescPro, oXmlM010)
	Local aAreaAnt := GetArea()
	Local aResult  := {}
	Local nI       := 0
	Local nCount   := 0
	Local cCliExt  := ""
	Local cCodCli  := ""
	Local cLojCli  := ""
	Local aCabAux  := {}
	Local lPesq    := Nil
	Default cVersao := "2.000"

	aAdd(aResult,{.T.,""})

	If nEvento != 5
		If cVersao == "1.000"
			oXML := oXmlM010
		Endif
		dbSelectArea("SA7")
		dbSetOrder(1) // A7_FILIAL + A7_CLIENTE + A7_LOJA + A7_PRODUTO

		If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation") != "U" .And. !Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation)
			// Se não é array
			If ValType(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation) != "A"
				// Transforma em array
				XmlNode2Arr(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation, "_CustomerItemInformation")
			EndIf

			// Percorre o array para execução do CRUD
			For nCount := 1 To Len(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation)
				If cVersao == "1.000"
					lPesq := Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation["+Str(nCount)+"]:_CustomerCode:Text") <> "U" .And. ;
					Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation["+Str(nCount)+"]:_CustomerItemCode:Text") <> "U"
				Else
					lPesq := Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation["+Str(nCount)+"]:_CustomerInternalId:Text") <> "U" .And. ;
					Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation["+Str(nCount)+"]:_CustomerItemInternalId:Text") <> "U"
				Endif

				If lPesq
					// Obtém o cliente externo
					If cVersao == "1.000"
						cCliExt := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation[nCount]:_CustomerCode:Text
					Else
						cCliExt := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation[nCount]:_CustomerInternalId:Text
					Endif

					// Obtém o cliente interno na tabela XXF (de/para)
					aAux := IntCliInt(cCliExt, cProduct, cVersao)

					// Se o cliente não foi encontrato na tabela de/para
					If !aAux[1]
						aResult := {}
						aAdd(aResult, {.F., STR0028 + cCliExt + STR0029, NIL}) //"O cliente " " não está cadastrado na base Protheus."
						Return aResult
					Else
						If cVersao == "1.000"
							// Obtém o Código do Cliente da chave interna
							cCodCli := aAux[2][1]
							// Obtém a Loja do Cliente da chave interna
							cLojCli := aAux[2][2]
						Else
							// Obtém o Código do Cliente da chave interna
							cCodCli := aAux[2][3]
							// Obtém a Loja do Cliente da chave interna
							cLojCli := aAux[2][4]
						Endif
						aCabAux := {}

						// Popula array
						aAdd(aCabAux, {"A7_CLIENTE", cCodCli, NIL}) // Código do Cliente
						aAdd(aCabAux, {"A7_LOJA",    cLojCli, NIL}) // Loja do Cliente
						aAdd(aCabAux, {"A7_PRODUTO", cCode,   NIL}) // Código do Produto
						If cVersao == "1.000"
							Aadd( aCabAux, {"A7_CODCLI"  ,oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCustomerItemInformation:_CustomerItemInformation[nCount]:_CustomerItemCode:Text , NIL })
							Aadd( aCabAux, {"A7_DESCCLI" ,cDescPro, NIL })
						Endif

						If SA7->(dbSeek(xFilial("SA7") + cCodCli + cLojCli + cCode))
							// Update
							RecLock("SA7", .F.)

							For nI:= 1 To Len(aCabAux)
								SA7->&(aCabAux[nI][1]) := aCabAux[nI][2]
							next nI

							SA7->A7_FILIAL := xFilial("SA7")
							MsUnLock()
						Else
							// Insert
							RecLock("SA7", .T.)

							For nI := 1 To Len(aCabAux)
								SA7->&(aCabAux[nI][1]) := aCabAux[nI][2]
							Next nI

							SA7->A7_FILIAL := xFilial("SA7")
							MsUnLock()
						EndIf
					EndIf
				EndIf
			Next nCount
		EndIf
	Else
		dbSelectArea("SA7")
		SA7->(dbSetOrder(2)) // A7_FILIAL + A7_PRODUTO

		cCode := Padr(cCode, TamSX3('A7_PRODUTO')[1])

		If(SA7->(dbSeek(xFilial("SA7") + cCode)))
			//Delete
			RecLock("SA7", .F.)

			While SA7->(!EOF()) .And. SA7->A7_FILIAL + SA7->A7_PRODUTO == xFilial("SA7") + cCode
				dbDelete()
				SA7->(DbSkip())
			EndDo

			MsUnLock()
		EndIf
	EndIf

	RestArea(aAreaAnt)
Return aResult

// --------------------------------------------------------------------------------------
/*/{Protheus.doc} getPType
Faz o de/para do Tipo de Produto

@param   cTipo      Tipo de Produto
@param   nTypeTrans Tipo da transação

@author  Leandro Luiz da Cruz
@version P11
@since   20/12/2012
@return  cResult Variavel com o valor obtido
/*/
// --------------------------------------------------------------------------------------
Static Function getPType(cTipo, nTypeTrans)
	Local cResult := ""

	If nTypeTrans == TRANS_RECEIVE
		Do Case
			Case cTipo == "01"
				cResult := "AI" // ATIVO IMOBILIZADO
			Case cTipo == "02"
				cResult := "BN" // BENEFICIAMENTO
			Case cTipo == "03"
				cResult := "EM" // EMBALAGEM
			Case cTipo == "04"
				cResult := "GG" // GASTOS GERAIS
			Case cTipo == "05"
				cResult := "MC" // MATERIAIS DE CONSUMO
			Case cTipo == "06"
				cResult := "ME" // MERCADORIA
			Case cTipo == "07"
				cResult := "MO" // MÃO DE OBRA
			Case cTipo == "08"
				cResult := "MP" // MATÉRIA PRIMA
			Case cTipo == "09"
				cResult := "OI" // OUTROS INSUMOS
			Case cTipo == "10"
				cResult := "PA" // PRODUTO ACABADO
			Case cTipo == "11"
				cResult := "PI" // PRODUTO INTERMEDIÁRIO
			Case cTipo == "12"
				cResult := "PP" // PRODUTO EM PROCESSO
			Case cTipo == "13"
				cResult := "PV" // PRODUTO VEÍCULO
			Case cTipo == "14"
				cResult := "SL" // SELO DE CONTROLE
			Case cTipo == "15"
				cResult := "SP" // SUBPRODUTO
			Case cTipo == "16"
				cResult := "IA" // INSUMO AGRICOLA
			Case cTipo == "17"
				cResult := "MM" // MATERIAIS MANFRO
			Case cTipo == "18"
				cResult := "IN" // PRODUTOS INDUSTRIAIS
			Case cTipo == "19"
				cResult := "II" // INSUMO INDUSTRIAIS
			Case cTipo == "20"
				cResult := "SV" // SERVIÇO
			Case cTipo == "21"
				cResult := "GN" // GENERICO
			Case cTipo == "27" // Garantia Extendida
				cResult := "GE"
			Case cTipo == "28" // Kit
				cResult := "KT"
			Case cTipo == "29" // Semente
				cResult := "SM"
		EndCase
	ElseIf nTypeTrans == TRANS_SEND
		Do Case
			Case cTipo == "AI" // ATIVO IMOBILIZADO
				cResult := "01"
			Case cTipo == "BN" // BENEFICIAMENTO
				cResult := "02"
			Case cTipo == "EM" // EMBALAGEM
				cResult := "03"
			Case cTipo == "GG" // GASTOS GERAIS
				cResult := "04"
			Case cTipo == "MC" // MATERIAIS DE CONSUMO
				cResult := "05"
			Case cTipo == "ME" // MERCADORIA
				cResult := "06"
			Case cTipo == "MO" // MÃO DE OBRA
				cResult := "07"
			Case cTipo == "MP" // MATÉRIA PRIMA
				cResult := "08"
			Case cTipo == "OI" // OUTROS INSUMOS
				cResult := "09"
			Case cTipo == "PA" // PRODUTO ACABADO
				cResult := "10"
			Case cTipo == "PI" // PRODUTO INTERMEDIÁRIO
				cResult := "11"
			Case cTipo == "PP" // PRODUTO EM PROCESSO
				cResult := "12"
			Case cTipo == "PV" // PRODUTO VEÍCULO
				cResult := "13"
			Case cTipo == "SL" // SELO DE CONTROLE
				cResult := "14"
			Case cTipo == "SP" // SUBPRODUTO
				cResult := "15"
			Case cTipo == "IA" // INSUMO AGRICOLA
				cResult := "16"
			Case cTipo == "MM" // MATERIAIS MANFRO
				cResult := "17"
			Case cTipo == "IN" // PRODUTOS INDUSTRIAIS
				cResult := "18"
			Case cTipo == "II" // INSUMO INDUSTRIAIS
				cResult := "19"
			Case cTipo == "SV" // SERVIÇO
				cResult := "20"
			Case cTipo == "GN" // GENERICO
				cResult := "21"
			Case cTipo == "GE" // Garantia Extendida
				cResult := "27"
			Case cTipo == "KT" // Kit
				cResult := "28"
			Case cTipo == "SM" // Semente
				cResult := "29"
			Otherwise
				cResult := "21" //Se é um tipo específico do cliente, manda como Genérico.
		EndCase
	EndIf
Return cResult

// --------------------------------------------------------------------------------------
/*/{Protheus.doc} getGProd
Busca a descrição do Grupo de Produtos

@param   cGrupo Código do Grupo de Produtos

@author  Leandro Luiz da Cruz
@version P11
@since   19/12/2012
@return  cResult Variavel com o valor obtido
/*/
// --------------------------------------------------------------------------------------
Static Function getGProd(cGrupo)
Local cResult  := ""
SBM->(dbSetOrder(1))

If !Empty(cGrupo) .And. SBM->(dbSeek(xFilial("SBM") + cGrupo))
	cResult := SBM->BM_DESC
EndIf

Return cResult

// --------------------------------------------------------------------------------------
/*/{Protheus.doc} DscLocEs
Obtem a descrição do Local de Estoque

@param cCod Codigo do Local de Estoque

@author  Leandro Luiz da Cruz
@version P11
@since   19/12/2012 - 15:22
@return  cResult Variavel com o valor obtido
/*/
// --------------------------------------------------------------------------------------

Static Function DscLocEs(cCod)
	Local cResult  := ""
	Local aAreaAnt := GetArea()

	// Altera área
	DbSelectArea("NNR")
	NNR->(DbSetOrder(1)) // NNR_FILIAL + NNR_CODIGO

	// Obtém o nome do Local de Estoque conforme índice informado
	If NNR->(dbSeek(xFilial("NNR") + cCod))
		cResult := AllTrim(NNR->NNR_DESCRI)
	EndIf

	// Restaura área anterior
	RestArea(aAreaAnt)
Return cResult

// --------------------------------------------------------------------------------------
/*/{Protheus.doc} DscNCM
Obtem a descrição do NCM

@param   cCod Codigo do NCM
@author  Mateus Gustavo de Freitas e Silva
@version P11
@since   02/01/2013
@return  cResult Variavel com o valor obtido
/*/
// --------------------------------------------------------------------------------------
Static Function DscNCM(cCod)
	Local cResult  := ""
	Local aAreaAnt := GetArea()

	// Abre a tabela de NCM
	DbSelectArea("SYD")
	SYD->(DbSetOrder(1)) // YD_FILIAL+YD_TEC+YD_EX_NCM+YD_EX_NBM

	// Obtém o nome do NCM conforme índice informado
	If SYD->(msSeek(xFilial("SYD") + PadR(cCod, TamSX3("YD_TEC")[1])))
		cResult := AllTrim(SYD->YD_DESC_P)
	EndIf

	// Restaura área anterior
	RestArea(aAreaAnt)
Return cResult

// --------------------------------------------------------------------------------------
/*/{Protheus.doc} DscFam
Obtém a descrição da Família de Produtos

@param   cCod Código da Família
@author  Leandro Luiz da Cruz
@version P11
@since   02/01/2013
@return  cResult Variável com o valor obtido
/*/
// --------------------------------------------------------------------------------------
Static Function DscFam(cCod)
	Local cResult  := ""
	Local aAreaAnt := GetArea()

	// Abre a tabela de Família de Produtos
	DbSelectArea("SYC")
	SYC->(DbSetOrder(1)) // YC_FILIAL + YC_COD

	// Obtém o nome da Família de Produtos conforme índice informado
	If SYC->(msSeek(xFilial("SYC") + PadR(cCod, TamSX3("YC_COD")[1])))
		cResult := AllTrim(SYC->YC_NOME)
	EndIf

	// Restaura área anterior
	RestArea(aAreaAnt)
Return cResult

//-------------------------------------------------------------------
/*/{Protheus.doc} IntProExt
Monta o InternalID do Produto de acordo com o código passado no
parâmetro.

@param   cEmpresa Código da empresa (Default cEmpAnt)
@param   cFil     Código da Filial (Default cFilAnt)
@param   cProduto Código do Produto
@param   cVersao  Versão da mensagem única (Default 2.001)

@author  Leandro Luiz da Cruz
@version P11
@since   08/02/2013
@return  aResult Array contendo no primeiro parâmetro uma variável
lógica indicando se o registro foi encontrado.
No segundo parâmetro uma variável string com o InternalID
montado.

@sample  IntProExt(, , '00001') irá retornar {.T., '01|01|00001'}
/*/
//-------------------------------------------------------------------
Function IntProExt(cEmpresa, cFil, cProduto, cVersao)
	Local   aResult  := {}
	Default cEmpresa := cEmpAnt
	Default cFil     := xFilial('SB1')
	Default cVersao  := '2.001'

	If cVersao == '1.000' .Or. cVersao == '1.001'
		aAdd(aResult, .T.)
		aAdd(aResult, PadR(cProduto, TamSX3('B1_COD')[1]))
	ElseIf cVersao == '2.000' .Or. cVersao == '2.001' .Or. cVersao == '3.003' .Or. cVersao == '3.004' .Or. cVersao == '3.005' .Or. cVersao == '3.006' .Or. cVersao == '3.007' .Or. cVersao == '4.000' .Or. cVersao == '4.002' .Or. cVersao == '4.003' .Or. cVersao == '4.005' .Or. cVersao == '4.007'
		aAdd(aResult, .T.)
		aAdd(aResult, cEmpresa + '|' + RTrim(cFil) + '|' + RTrim(cProduto))
	Else
		aAdd(aResult, .F.)
		aAdd(aResult, STR0030 + Chr(10) + STR0031) //"Versão do produto não suportada." "As versões suportadas são: 1.000, 1.001, 2.000, 2.001"
	EndIf
Return aResult

//-------------------------------------------------------------------
/*/{Protheus.doc} IntProInt
Recebe um InternalID e retorna o código do Produto.

@param   cInternalID InternalID recebido na mensagem.
@param   cRefer      Produto que enviou a mensagem
@param   cVersao     Versão da mensagem única (Default 2.001)

@author  Leandro Luiz da Cruz
@version P11
@since   08/02/2013
@return  aResult Array contendo no primeiro parâmetro uma variável
lógica indicando se o registro foi encontrado no de/para.
No segundo parâmetro uma variável array com a empresa,
filial e o Código do Produto.

@sample  IntUndInt('01|01|00001') irá retornar {.T., {'01', '01', '00001'}}
/*/
//-------------------------------------------------------------------
Function IntProInt(cInternalID, cRefer, cVersao)
	Local   aResult  := {}
	Local   aTemp    := {}
	Local   cTemp    := ''
	Local   cAlias   := 'SB1'
	Local   cField   := 'B1_COD'
	Default cVersao  := '2.001'

	If cVersao == '1.000' .Or. cVersao == '1.001'
		cTemp := CFGA070Int(cRefer, cAlias, cField, cInternalID)
	Else
		cTemp := CFGA070Int(cRefer, cAlias, cField, cInternalID)
	EndIf

	If Empty(cTemp)
		aAdd(aResult, .F.)
		aAdd(aResult, STR0032 + " -> " + cInternalID) //"Produto não encontrado no de/para!"
	Else
		If cVersao == '1.000' .Or. cVersao == '1.001'
			aAdd(aResult, .T.)
			aAdd(aTemp, SubStr(cTemp, 3, TamSX3('B1_COD')[1]))
			aAdd(aResult, aTemp)
		ElseIf cVersao == '2.000' .Or. cVersao == '2.001' .Or. cVersao == '3.003' .Or. cVersao == '3.004' .Or. cVersao == '3.005' .Or. cVersao == '3.006' .Or. cVersao == '3.007' .Or. cVersao == '4.000' .Or. cVersao == '4.002' .Or. cVersao == '4.003' .Or. cVersao == '4.005' .Or. cVersao == '4.007'
			aAdd(aResult, .T.)
			aTemp := Separa(cTemp, '|')
			aAdd(aResult, aTemp)
		Else
			aAdd(aResult, .F.)
			aAdd(aResult, STR0030 + Chr(10) + STR0031) //"Versão do produto não suportada." "As versões suportadas são: 1.000, 1.001, 2.000, 2.001"
		EndIf
	EndIf
Return aResult


//-------------------------------------------------------------------
/*/{Protheus.doc} XX4MENS()
Retorna o nome da mensagem unica que esta sendo utilizada

@param   cNameFunc Nome da função a ser pesquisada

@author  Rodrigo Machado Pontes
@version P12
@since   24/11/2014
@return  Nome da mensagem unica utilizada
/*/
//-------------------------------------------------------------------

Static Function XX4MENS( cNameFunc, cNameItem )

	Local aAreaXX4		:= XX4->(GetArea())
	Local lRet			:= .F.
	Default cNameFunc	:= ''
	Default cNameItem	:= ''

	lRet := FwXX4Seek( Padr( cNameFunc, nTamRot ) + Padr( cNameItem, nTamMod ) )

	RestArea(aAreaXX4)

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} completXml()
Adiciona o cabeçalho da mensagem quando utilizado integração com o PPI.

@param   cXML  - XML gerado pelo adapter. Parâmetro recebido por referência.

@author  Lucas Konrad França
@version P12
@since   13/08/2015
@return  Nil
/*/
//-------------------------------------------------------------------
Static Function completXml(cXML)
	Local cCabec     := ""
	Local cCloseTags := ""
	Local cGenerated := ""

	cGenerated := SubStr(DTOS(Date()), 1, 4) + '-' + SubStr(DTOS(Date()), 5, 2) + '-' + SubStr(DTOS(Date()), 7, 2) + 'T' + Time()

	cCabec := '<?xml version="1.0" encoding="UTF-8" ?>'
	cCabec += '<TOTVSMessage xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="xmlschema/general/events/Item_3_001.xsd">'
	cCabec +=     '<MessageInformation version="3.001">'
	cCabec +=         '<UUID>1</UUID>'
	cCabec +=         '<Type>BusinessMessage</Type>'
	cCabec +=         '<Transaction>Item</Transaction>'
	cCabec +=         '<StandardVersion>1.0</StandardVersion>'
	cCabec +=         '<SourceApplication>SIGAPCP</SourceApplication>'
	cCabec +=         '<CompanyId>'+cEmpAnt+'</CompanyId>'
	cCabec +=         '<BranchId>'+cFilAnt+'</BranchId>'
	cCabec +=         '<UserId>'+__cUserId+'</UserId>'
	cCabec +=         '<Product name="'+FunName()+'" version="'+GetRPORelease()+'"/>'
	cCabec +=         '<ContextName>PROTHEUS</ContextName>'
	cCabec +=         '<GeneratedOn>' + cGenerated +'</GeneratedOn>'
	cCabec +=         '<DeliveryType>Sync</DeliveryType>'
	cCabec +=     '</MessageInformation>'
	cCabec +=     '<BusinessMessage>'

	cCloseTags := '</BusinessMessage>'
	cCloseTags += '</TOTVSMessage>'

	cXML := cCabec + cXML + cCloseTags

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} ItemxCateg()
Função responsável por retornar todas as categorias (niveis) do produto.
@obs		O array estará ordenado do Maior nivel (pai) para o menor 
			nivel (filhos/netos) da arvore.
			Ex.: Produto: "Gato Persa"
			1.Animais / 2.Domesticos / 3.Gatos / "Gato Persa"
					Contador, Filial	, Cod.	, Desc
			aRet := {{3		, xFilial	, 201 	, Animais		},;
					 {2		, xFilial	, 022	, Domesticos	},;
					 {1		, xFilial	, 013	, Gatos			}}
@author		Felipe Sales Martinez
@version	P12
@since		31/01/2017
@return		Array com as categorias ordenadas do produto
/*/
//-------------------------------------------------------------------
Static Function ItemxCateg()
	Local aRet			:= {}
	Local aArea			:= GetArea()
	Local aACUArea		:= ACU->(GetArea())
	Local aACVArea		:= ACV->(GetArea())
	Local lPorProdut	:= .F.
	Local lPorGrupo		:= .F.
	Local cCategory		:= ""
	Local cACUFil		:= xFilial("ACU")
	Local cACVFil		:= xFilial("ACV")
	Local nCont			:= 0

	ACU->(DBSetOrder(1)) //ACU_FILIAL+ACU_COD

	//Primeiro verifica se possui amarração por produto
	ACV->(DBSetOrder(5)) //ACV_FILIAL+ACV_CODPRO+ACV_CATEGO
	If ACV->(DBSeek( cACVFil + PadR(SB1->B1_COD,TamSx3("B1_COD")[1]) ))
		lPorProdut := .T.
	EndIf

	//Caso nao tenho sido encontrado por produto, verifica por grupo de produto
	If !lPorProdut .And. !Empty(SB1->B1_GRUPO)
		ACV->(DBSetOrder(2)) //ACV_FILIAL+ACV_GRUPO+ACV_CODPRO+ACV_CATEGO
		If ACV->(DBSeek( cACVFil + PadR(SB1->B1_GRUPO,TamSx3("B1_GRUPO")[1]) ))
			lPorGrupo := .T.
		EndIf
	EndIf

	While (lPorProdut .And. ACV->ACV_CODPRO == SB1->B1_COD) .Or. (lPorGrupo .And. ACV->ACV_GRUPO == SB1->B1_GRUPO)

		cCategory := ACV->ACV_CATEGO //Mais baixo nivel de categoria

		While (!Empty(cCategory))

			If ACU->(DBSeek( cACUFil + cCategory ))
				nCont++

				aAdd(aRet, { nCont, cACUFil, ACU->ACU_COD, AllTrim(ACU->ACU_DESC) } )

				cCategory := ACU->ACU_CODPAI //Busca a categoria do pai

			Else
				cCategory := ""
			EndIf
		End
		
		ACV->(DbSkip())
	
	End

	If !Empty(aRet)
		//Ordena o contador do maior para menor (para que seja do maior (pai) nivel para mais baixo nivel (filhas/netas) da categoria)
		aSort(aRet,,,{|x,y| x[1]>y[1]})
	Endif

	RestArea(aACUArea)
	RestArea(aACVArea)
	RestArea(aArea)

Return aRet

//-------------------------------------------------------------------
/*/{Protheus.doc} INT010CPUSO()
Função responsável por retornar se o campo esta com o usado ativo

@author		Rodrigo M Pontes
@version	P12
@since		31/01/2017
@return		Logico, se campo se com o usado como ativo ou não
/*/
//-------------------------------------------------------------------

Static Function INT010CPUSO( cCampo )
Return X3Usado( cCampo )

/*/{Protheus.doc} GetEcfTaxing
//TODO	Calcula os campos BZ_ALIQISS, BZ_PICM e PZPICMRET de acordo com as 
		tags <Code>,<Type>,<Aliquot> que estão no nó da tag <EcfTaxing>, a qual esta 
		se encontra nó da tag <BranchInformation>.
@author reynaldo
@since 19/04/2018
@version 1.0
@return ${return}, ${return_description}
@param cB1_TIPO, characters, descricao
@param cCodeTax, characters, descricao
@param cType, characters, descricao
@param cAliquot, characters, descricao
@type function
/*/
Static Function GetEcfTaxing(cB1_TIPO, cCodeTax, cType, cAliquot)
Local cTpTrib	:= ""
Local cXMLRet	:= ""
Local lRet		:= .T.
Local aAreaMDQ	:= {}
Local aFields	:= {}

	//Validacao do Codigo da Tributacao enviada
	If cType $ "1|5" //Tributado ou Reducao de Base

		If !Empty(cAliquot)
			If AllTrim(cB1_TIPO) $ "GE|GG|MO|SV"
				cTpTrib := "S" //Tipo Tributacao Servico
			Else
				cTpTrib := "T" //Tipo Tributacao ICMS
			EndIf

			//Ajusta codigo tributacao
			If Val(cAliquot) <= 9
				cTpTrib += "0"
			EndIf

			cTpTrib += CValToChar(Val(cAliquot) * 100)
			If AllTrim(cCodeTax) <> cTpTrib
				lRet 	 := .F.
				cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
				cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
				cXmlRet += STR0039 + cTpTrib //"Correto:"
			Else
				If SubStr(cTpTrib, 1, 1) == "S" //Servico
					aAdd(aFields, {"BZ_ALIQISS", Val(cAliquot), Nil})
					aAdd(aFields, {"BZ_PICMRET", 0, Nil})
					aAdd(aFields, {"BZ_PICM", 0, Nil})
					aAdd(aFields, {"BZ_TS", " ", Nil})

				ElseIf SubStr(cTpTrib, 1, 1) == "T" //Mercadoria
					aAdd(aFields, {"BZ_PICM", Val(cAliquot), Nil})
					aAdd(aFields, {"BZ_PICMRET", 0, Nil})
					aAdd(aFields, {"BZ_ALIQISS", 0, Nil})

					dbSelectArea("MDQ")
					aAreaMDQ := GetArea()
					dbSetOrder(1)
					If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSTRIB)
						//Busca TES para o produto no cadastro de configuração padrão
						aAdd(aFields, {"BZ_TS", MDQ->MDQ_TSTRIB, Nil})
					Else
						aAdd(aFields, {"BZ_TS", " ", Nil})
					EndIf
					RestArea(aAreaMDQ)
				EndIf
			EndIf
		Else
			lRet 	 := .F.
			cXmlRet := STR0040 //"Aliquota obrigatoria para produto tipo tributado"
		EndIf
	ElseIf cType == "2" //Isento
		cTpTrib := "I1"

		If AllTrim(cCodeTax) <> cTpTrib
			lRet 	 := .F.
			cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
			cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
			cXmlRet += STR0039 + cTpTrib //"Correto:"
		Else
			aAdd(aFields, {"BZ_PICMRET", 0, Nil})
			aAdd(aFields, {"BZ_ALIQISS", 0, Nil})
			aAdd(aFields, {"BZ_PICM", 0, Nil})

			dbSelectArea("MDQ")
			aAreaMDQ := GetArea()
			dbSetOrder(1)
			If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSISEN)
				//Busca TES para o produto no cadastro de configuração padrão
				aAdd(aFields, {"BZ_TS", MDQ->MDQ_TSISEN, Nil})
			Else
				aAdd(aFields, {"BZ_TS", " ", Nil})
			EndIf
			RestArea(aAreaMDQ)
		EndIf
	ElseIf cType == "3" //Substituicao Tributaria

		cTpTrib := "F1"

		If AllTrim(cCodeTax) <> cTpTrib
			lRet 	 := .F.
			cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
			cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
			cXmlRet += STR0039 + cTpTrib //"Correto:"
		Else
			//Se aliquota nao informada, busca no parametro
			If Empty(cAliquot)
				cAliquot := CValToChar(SuperGetMv("MV_ICMPAD",, ""))
			EndIf

			aAdd(aFields, {"BZ_PICM", Val(cAliquot), Nil})
			aAdd(aFields, {"BZ_PICMRET", 0.01, Nil})
			aAdd(aFields, {"BZ_ALIQISS", 0, Nil})

			dbSelectArea("MDQ")
			aAreaMDQ := GetArea()
			dbSetOrder(1)
			If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSSUBS)
				//Busca TES para o produto no cadastro de configuração padrão
				aAdd(aFields, {"BZ_TS", MDQ->MDQ_TSSUBS, Nil})
			Else
				aAdd(aFields, {"BZ_TS", " ", Nil})
			EndIf
			RestArea(aAreaMDQ)
		EndIf

	ElseIf cType == "4" //Nao Tributado
		cTpTrib := "N1"

		If AllTrim(cCodeTax) <> cTpTrib
			lRet 	 := .F.
			cXmlRet := STR0038 + Chr(10) //"Codigo de tributacao incorreto"
			cXmlRet += STR0037 + AllTrim(cCodeTax) + Chr(10) //"Enviado: "
			cXmlRet += STR0039 + cTpTrib //"Correto:"
		Else
			aAdd(aFields, {"BZ_PICMRET", 0, Nil})
			aAdd(aFields, {"BZ_ALIQISS", 0, Nil})
			aAdd(aFields, {"BZ_PICM", 0, Nil})

			dbSelectArea("MDQ")
			aAreaMDQ := GetArea()
			dbSetOrder(1)
			If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSNTRI)
				//Busca TES para o produto no cadastro de configuração padrão
				aAdd(aFields, {"BZ_TS", MDQ->MDQ_TSNTRI, Nil})
			Else
				aAdd(aFields, {"BZ_TS", " ", Nil})
			EndIf
			RestArea(aAreaMDQ)
		EndIf
	EndIf
	
Return {lRet, cXmlRet, aFields}


//-------------------------------------------------------------------------------------------------
//{Protheus.doc} v4000 json 
/*/{Protheus.doc} V4000_O
Funcao de integracao com o adapter EAI para envio e recebimento do
cadastro de categoria utilizando o conceito de mensagem unica.
@type function
@param Caracter/Objeto,xEntr, Variavel com conteudo Xml ou objeto EAI
@param Numérico, nTypeTrans, Tipo de transacao. (Envio/Recebimento)
@param Caracter, cTypeMessage, Tipo de mensagem. (Business Type, WhoIs, etc)
@author Andy pudja 
@Junção do fontes MATI010 E MATI010O Por: Roberto R.Mezzalira
@version P12
@since 26/06/2018
/*/
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
//{Protheus.doc} v4000
//-------------------------------------------------------------------------------------------------
Static Function v4000_O( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransac, lEAIObj, cVersao, cRelease)
	Local lRet				:= .T.
	Local nCount			:= 1
	Local cRet				:= ""
	Local cEvent			:= ""
	Local aAreaAnt			:= GetArea()
	Local aSaveLine			:= FWSaveRows()		//Salva contexto do model ativo
	Local nPrecoCusto		:= 0
	Local nCustoPadrao		:= 0
	Local dBaseDate			:= Nil
	Local nCustoMedio		:= 0
	Local lDescSB5			:= GetNewPar("MV_MUDESB5",.F.) // diz se ira usar a SB5 para complementar a descrição
	Local lM010LocP			:= ExistBlock("M010LOCP") //Ponto de entrada para local de estoque
	Local lItemInfo			:= SuperGetMv("MV_ITEMINF",.F.,.T.) //Define se envia amarracao Produto x Cliente
	Local cB1_COD			:= ""
	Local cB1_DESC			:= ""
	Local cB1_ATIVO			:= ""
	Local cB1_MSBLQL    	:= ""	
	Local cB1_GRUPO			:= ""
	Local cB1_UM			:= ""
	Local cB1_LOCPAD		:= ""
	Local cB1_ORIGEM		:= ""
	Local cB1_FPCOD			:= ""
	Local cB1_POSIPI		:= ""
	Local cB1_TIPO			:= ""
	Local cB1_RASTRO		:= ""
	Local cB1_LOCALIZ		:= ""
	Local cB1_CONTA			:= ""
	Local cB1_SEGUM			:= ""
	Local cB1_TIPCONV		:= ""
	Local cB1_UCALSTD		:= ""
	Local cB1_CC			:= ""
	Local cB1_FILIAL		:= ""
	Local cB1_ALTER     	:= ""
	Local cB1_CODBAR 		:= ""
	Local nB1_LE			:= 0
	Local nB1_LM			:= 0
	Local nB1_PESO			:= 0
	Local nB1_PESBRU		:= 0
	Local nB1_CONV			:= 0
	Local nB1_QE			:= 0
	Local nB1_UPRC			:= 0
	Local nB1_CUSTD			:= 0
	Local nB1_PRV1			:= 0
	Local cPont				:= ""
	Local aSLKArea			:= {}
	Local aF2QArea			:= {}
	Local aCategory			:= {}
	Local cMascara			:= GetMv("MV_MASCGRD")
	Local nTamRef			:= Val(Substr(cMascara,1,2))
	Local nK				:= 1
	Local ofwEAIObj			:= FWEAIobj():NEW()
	Local cB1_PRODPAI		:= ""
	Local cVarName1			:= ""
	Local cVarName2			:= ""
	Local cVarValue1		:= ""
	Local cVarValue2		:= ""
	Local cValInt			:= ""
	Local cValExt			:= ""
	Local cMarca			:= ""
	Local cCode				:= ""
	Local aProd				:= {}
	Local cStWaExt			:= ""
	Local cStWaInt			:= ""
	Local cLocPad			:= ""
	Local cAuxLocPad		:= ""
	Local cCodGrupo			:= ""
	Local cAux				:= ""
	Local nAux				:= 0
	Local cTpTrib			:= ""
	Local oModel        	:= FWModelActive()
	Local lMVC          	:= TableInDic("G3Q", .F.) .And. oModel <> Nil .And. oModel:cSource == "MATA010"
	Local oModSB5 			:= IIf( lMVC, oModel:GetModel( "SB5DETAIL" ), Nil )
	Local lSB5Mvc			:= ValType( oModSB5 ) == 'O'
	Local nOperation		:= 0
	Local cJson         	:= ''
	Local cCodeTax			:= ""
	Local cAliquot	    	:= "" //Aliquota ECF
	Local cType 			:= ""
	Local cUMCodBar			:= "" 
	Local nQtdCodBar		:= 0 
	Local oListIntId		
	Local oListBarCode	
	Local aBarCode			:= {} 
	Local aProdSB9			:= {}
	Local aProdSBZ			:= {}
	Local aProdF2Q			:= {}
	Local aSBZEmpFil		:= {}
	Local cValIntSBZ		:= ""
	Local cValExtSBZ		:= ""
	Local aErroAuto			:= {}
	Local nEventoSB5		:= 0
	Local cProdActiv		:= "1" //1=Ativo;0=Não Ativo
	Local nPosSBZ			:= 0
	Local nPosCod			:= 0
	Local nPosFilial		:= 0
	Local cBkpFil			:= ""
	Local aAreaTMP			:= {}
	Local lSBZNew			:= .F.
	Local nCnt				:= 0
	Local lAgroAtivo		:= SuperGetMv("MV_SIGAAGR",.F.,.F.)
	Local cCadProd			:= SuperGetMv("MV_CADPROD",.F.,"|SBZ|SB5|SGI|D3E|")
	Local cAlias			:= "SB1"
	Local cField			:= "B1_COD"
	Local nAverageCostPrice	:= 0
	Local oListFisc

	Private lMsErroAuto	:= .F.	

If ( Type("Inclui") == "U" )
	Private Inclui := .F.
EndIf

If ( Type("Altera") == "U" )
	Private Altera := .F.
EndIf

Default cVersao  := '4.000'
Default cRelease := '000'

dbSelectArea( "SB5" )
SB5->( dbSetOrder( 1 ) ) //B5_FILIAL, B5_COD

If nTypeTrans == TRANS_RECEIVE 

	If cTypeMessage == EAI_MESSAGE_RESPONSE
		
		//-- Identifica se o processamento pelo parceiro ocorreu com sucesso
		If Upper(xEnt:getPropValue("ProcessingInformation"):getPropValue("Status")) == "OK"
		
			If xEnt:getHeaderValue("ProductName") !=  nil .And. !Empty(xEnt:getHeaderValue("ProductName")) 
				cMarca := xEnt:getHeaderValue("ProductName")
			Endif

			If Empty(cMarca)
				lRet := .F.
				cRet := ""	

				ofwEAIObj:Activate()
				ofwEAIObj:setProp("ReturnContent")
				cRet := "Erro no retorno. A marca é obrigatoria!"
				ofwEAIObj:getPropValue("ReturnContent"):setProp("Error", cRet)
																						
				Return { lRet, ofwEAIObj, "ITEM" }					

			Endif							
			
			If xEnt:getPropValue("ReturnContent"):getPropValue("ListOfInternalID") <> NIL
				oListIntId := xEnt:getPropValue("ReturnContent"):getPropValue("ListOfInternalID")
			Else
				oListIntId := xEnt:getPropValue("ReturnContent"):getPropValue("ListOfInternalId")
			EndIf

			For nCount := 1 To Len(oListIntId)
				cValInt := oListIntId[nCount]:getPropValue('Origin') 
				cValExt := oListIntId[nCount]:getPropValue('Destination') 

				AdpLogEAI(3, "Origin[" + Str(nCount) + "]: ", cValInt) 
				AdpLogEAI(3, "Destination[" + Str(nCount) + "]: ", cValExt) 
					
				If !Empty(cValExt) .And.!Empty(cValInt)
					CFGA070Mnt(cMarca, 'SB1', 'B1_COD', cValExt, cValInt)

					lRet := .T.
				Else
					lRet := .F.
				EndIf
			Next nCount
		EndIf

	ElseIf cTypeMessage == EAI_MESSAGE_BUSINESS

		If xEnt:getHeaderValue("ProductName") != Nil .And. !Empty(xEnt:getHeaderValue("ProductName"))
			cMarca := AllTrim(xEnt:getHeaderValue("ProductName"))
		Else
			lRet := .F.
			cRet := 'A marca e obrigatoria'
			Return {lRet, cRet}
		EndIf

		If xEnt:getHeaderValue("Event") != Nil .And. !Empty(xEnt:getHeaderValue("Event"))
			cEvent := AllTrim(xEnt:getHeaderValue("Event"))
		Else
			lRet := .F.
			cRet := 'O evento e obrigatorio'
			Return {lRet, cRet}
		EndIf

		If !Empty(xEnt:getPropValue("InternalId"))
			cValExt := xEnt:getPropValue("InternalId")
		Else
			lRet := .F.
			cRet := 'O codigo do InternalId e obrigatorio!'
			Return {lRet, cXMLRet}
		Endif

		aAux := IntProInt(cValExt, cMarca, /*Versao*/)

		If Upper(cEvent) == "UPSERT"
			// Se o registro foi encontrado
			If !aAux[1]
				nOperation := 3 // Insert

				If !Empty(xEnt:getPropValue("Code"))
					cCode := PadR(xEnt:getPropValue("Code"),TamSX3("B1_COD")[1])
					aAdd(aProd, {"B1_COD", cCode, Nil})
				Else
					lRet := .F.
					cRet := "O codigo do produto e obrigatorio!"
					Return {lRet, cRet}
				Endif

				cValInt := IntProExt(/*Empresa*/, /*Filial*/, cCode, /*Versao*/)[2]

			Else
				nOperation := 4 // Update

				cCode := aAux[2][3]

				// Armazena o codigo do produto no Array
				aAdd(aProd, {"B1_COD", PadR(cCode, TamSX3("B1_COD")[1]), Nil})

				// Monta o InternalId de produto que sera gravado na table XXF (de/para)
				cValInt := IntProExt(/*Empresa*/, /*Filial*/, cCode, /*Versao*/)[2]
			EndIf

		ElseIf cEvent == "DELETE"
			// Se o registro foi encontrado
			If aAux[1]
				nOperation := 5 // Delete
			Else
				lRet := .F.
				cRet := "O registro a ser excluido nao existe na base Protheus"  + " -> " + cValExt 
				Return {lRet, cRet}
			EndIf

			cCode:= aAux[2][3]
			// Armazena o codigo do produto no Array
			aAdd(aProd, {"B1_COD", PadR(cCode, TamSX3("B1_COD")[1]), Nil})

			// Monta o InternalId de produto que sera gravado na table XXF (de/para)
			cValInt := IntProExt(/*Empresa*/, /*Filial*/, cCode, /*Versao*/)[2]
		Else
			lRet   := .F.
			cRet := "O evento informado e invalido!"
			Return {lRet, cRet}
		EndIf

		If nOperation != 5

			If Empty(xEnt:getPropValue("Name")) .And. Empty(xEnt:getPropValue("ShortName"))
				lRet   	:= .F.
				cRet 	:= "A Descricao do produto e obrigatoria"
				Return {lRet, cRet}
			Else
				aAdd(aProd, {"B1_DESC", AllTrim(xEnt:getPropValue('ShortName')), Nil})

				If aScan(aProd,{|x| x[1] == "B1_DESC"}) == 0
					aAdd(aProd, {"B1_DESC", PadR(xEnt:getPropValue('Name'),TamSX3("B1_DESC")[1]), Nil})
				Endif

				If lDescSB5
					aAdd(aProdSB5, {"B5_COD", PadR(cCode, TamSX3("B1_COD")[1]), Nil})
					aAdd(aProdSB5, {"B5_CEME", AllTrim(xEnt:getPropValue('Name')), Nil})
				Else
					lDescSB5 := .F.
				Endif
			Endif

			If !Empty(xEnt:getPropValue("ProductType")) 
				aAdd(aProd, {"B1_TIPO", getPType(Alltrim(xEnt:getPropValue("ProductType")), nTypeTrans), Nil})
			Else
				lRet := .F.
				cRet := "O tipo do produto e obrigatorio"
				Return {lRet, cRet}
			Endif

			// CodIte
			If X3Obrigat("B1_CODITE")
				aAdd(aProd, {"B1_CODITE",PadR(cCode, TamSX3("B1_CODITE")[1]), Nil})
			Endif

			If  !Empty(xEnt:getPropValue("UnitOfMeasureInternalId"))
				aAux := IntUndInt(xEnt:getPropValue("UnitOfMeasureInternalId"), cMarca)
				If !aAux[1]
					lRet := aAux[1]
					cRet := aAux[2]
					Return {lRet, cRet}
				Else
					cUMExt := xEnt:getPropValue("UnitOfMeasureInternalId")
					cUMInt := cValToChar(IntUndExt(/*Empresa*/, /*Filial*/, aAux[2][3], /*Versao*/)[2])
					aAdd(aProd, {"B1_UM",PadR(aAux[2][3],TamSx3("B1_UM")[1]), Nil})
				EndIf

			ElseIf !Empty(xEnt:getPropValue("UnitOfMeasureCode"))
				Aadd( aProd, { "B1_UM", PadR(xEnt:getPropValue("UnitOfMeasureCode"),TamSx3("B1_UM")[1]), Nil } )
			Else
				lRet := .F.
				cRet := "A Unidade de Medida e obrigatoria"
				Return {lRet, cRet}
			Endif

			//Obtem o Armazem Padrao p/ requis.
			If !Empty(xEnt:getPropValue("StandardWarehouseInternalId"))
				aAux := IntLocInt(xEnt:getPropValue("StandardWarehouseInternalId"), cMarca, /*Versao*/)
				If !aAux[1]
					lRet := aAux[1]
					cRet := aAux[2]
					Return {lRet, cRet}
				Else
					cStWaExt := xEnt:getPropValue("StandardWarehouseInternalId")
					cStWaInt := IntLocExt(/*Empresa*/, /*Filial*/, aAux[2][3], /*Versao*/)[2]
					cLocPad := PadR(aAux[2][3],TamSx3("B1_LOCPAD")[1])
					aAdd(aProd, {"B1_LOCPAD", cLocPad, Nil})
				EndIf
			ElseIf xEnt:getPropValue("StandardWarehouseCode") != nil
				If !Empty(xEnt:getPropValue("StandardWarehouseCode"))
					cLocPad := PadR(xEnt:getPropValue("StandardWarehouseCode"),TamSx3("B1_LOCPAD")[1])
					aAdd(aProd, {"B1_LOCPAD", cLocPad, Nil})
				Endif

			Else
				If nOperation == 3
					NNR->(DbSetOrder(1)) // NNR_FILIAL+NNR_CODIGO

					If NNR->(dbSeek(xFilial("NNR")))
						If Empty(NNR->NNR_CODIGO)
							NNR->(DbSkip())
						EndIf
						cLocPad := NNR->NNR_CODIGO
					Endif
				Else
					cLocPad := Posicione("SB1",1,xFilial("SB1") + PadR(cCode,TamSx3("B1_COD")[1]),"B1_LOCPAD")
				Endif

				If lM010LocP //Ponto de entrada para local de estoque
					cAuxLocPad := ExecBlock("M010LOCP",.F.,.F.,{nOperation,cCode,cLocPad})
					If valType(cAuxLocPad) == "C" .And. !Empty(cAuxLocPad)
						cLocPad := cAuxLocPad
					Endif
				Endif

				aAdd(aProd, {"B1_LOCPAD",cLocPad, Nil})

			Endif

			// Origem do Produto
			If !Empty(xEnt:getPropValue("Origin"))
				aAdd(aProd, {"B1_ORIGEM", xEnt:getPropValue("Origin"), Nil})
			EndIf

			// Código de produto ANVISA
			If cVersao == "4" .And. cRelease >= "010"
				If xEnt:getPropValue("HealthAgency") != NIL
					aAdd(aProdF2Q, {"F2Q_PRODUT", cCode})
					If Empty(xEnt:getPropValue("HealthAgency"))
						aAdd(aProdF2Q, {"F2Q_CODANV", PadR(" ", TamSX3("F2Q_CODANV")[1])})
					Else
						aAdd(aProdF2Q, {"F2Q_CODANV", xEnt:getPropValue("HealthAgency")})
					EndIf
					aAdd(aProdF2Q, {"F2Q_PMXANV", 0})
				EndIf
			EndIf

			// Nomenclatura Ext.Mercosul
			If xEnt:getPropValue("FiscalInformation")!= nil //.And. !Empty(xEnt:getPropValue("FiscalClassification")) 

				oListFisc := xEnt:getPropValue("FiscalInformation")

				If oListFisc:getPropValue("FiscalClassificationCode") != nil .And. !Empty(oListFisc:getPropValue("FiscalClassificationCode")) 	
					aAdd(aProd, {"B1_POSIPI", oListFisc:getPropValue("FiscalClassificationCode"), Nil})
				EndIf

				// PIS
				If INT010CPUSO("B1_PIS") .And.;
				 oListFisc:getPropValue("PisRetaining") != nil .And. !Empty(oListFisc:getPropValue("PisRetaining")) 	
					cAux := UPPER(Alltrim(oListFisc:getPropValue("PisRetaining")))
					aAdd(aProd, {"B1_PIS",IIF(cAux == 'TRUE','1','2'), Nil})
				EndIf

				If INT010CPUSO("B1_PPIS") .And.;
				  oListFisc:getPropValue("PisAliquot") != nil .And. !Empty(oListFisc:getPropValue("PisAliquot")) 	
					nAux := Val(oListFisc:getPropValue("PisAliquot"))
					aAdd(aProd, {"B1_PPIS",nAux, Nil})
				EndIf

				// COFINS
				If INT010CPUSO("B1_COFINS") .And.;
				  oListFisc:getPropValue("CofinsRetaining") != nil .And. !Empty(oListFisc:getPropValue("CofinsRetaining")) 	
					cAux := UPPER(Alltrim(oListFisc:getPropValue("CofinsRetaining")))
					aAdd(aProd, {"B1_COFINS",IIF(cAux == 'TRUE','1','2'), Nil})
				EndIf

				If INT010CPUSO("B1_PCOFINS") .And.;
				oListFisc:getPropValue("CofinsAliquot") != nil .And. !Empty(oListFisc:getPropValue("CofinsAliquot"))
					nAux := Val(oListFisc:getPropValue("CofinsAliquot"))
					aAdd(aProd, {"B1_PCOFINS",nAux, Nil})
				EndIf

				// CSLL
				If INT010CPUSO("B1_CSLL") .And.;
				oListFisc:getPropValue("CsllRetaining") != nil .And. !Empty(oListFisc:getPropValue("CsllRetaining"))
					cAux := UPPER(Alltrim(oListFisc:getPropValue("CsllRetaining")))
					aAdd(aProd, {"B1_CSLL",IIF(cAux == 'TRUE','1','2'), Nil})
				EndIf

				If INT010CPUSO("B1_PCSLL") .And.;
				oListFisc:getPropValue("CsllAliquot") != nil .And. !Empty(oListFisc:getPropValue("CsllAliquot"))
					nAux := Val(oListFisc:getPropValue("CsllAliquot"))
					aAdd(aProd, {"B1_PCSLL",nAux, Nil})
				EndIf

				// IRRF
				If INT010CPUSO("B1_IRRF") .And.;
				oListFisc:getPropValue("IrrfIncidence") != nil .And. !Empty(oListFisc:getPropValue("IrrfIncidence"))
					cAux := UPPER(Alltrim(oListFisc:getPropValue("IrrfIncidence")))
					aAdd(aProd, {"B1_IRRF",IIF(cAux == 'TRUE','S','N'), Nil})
				EndIf

				// ISS
				If INT010CPUSO("B1_CODISS") .And.;
				oListFisc:getPropValue("IssServiceCode") != nil .And. !Empty(oListFisc:getPropValue("IssServiceCode"))
					cAux := Alltrim(oListFisc:getPropValue("IssServiceCode"))
					aAdd(aProd, {"B1_CODISS",cAux, Nil})
				EndIf

				If INT010CPUSO("B1_TRIBMUN") .And.;
				oListFisc:getPropValue("MunicipalTaxCode") != nil .And. !Empty(oListFisc:getPropValue("MunicipalTaxCode"))
					cAux := Alltrim(oListFisc:getPropValue("MunicipalTaxCode"))
					aAdd(aProd, {"B1_TRIBMUN",cAux, Nil})
				EndIf

				If INT010CPUSO("B1_ALIQISS") .And.;
				oListFisc:getPropValue("IssAliquot") != nil .And. !Empty(oListFisc:getPropValue("IssAliquot"))
					nAux := Val(oListFisc:getPropValue("IssAliquot"))
					aAdd(aProd, {"B1_ALIQISS",nAux, Nil})
				EndIf

				If cPaisLoc == "BRA"
					If oListFisc:getPropValue("TaxSubstitutionCode") != nil .And. !Empty(oListFisc:getPropValue("TaxSubstitutionCode"))
						cAux := Alltrim(oListFisc:getPropValue("TaxSubstitutionCode"))
						aAdd(aProd, {"B1_CEST",cAux, Nil})
					EndIf
				EndIf

			Endif

			// Segunda Unidade de Medida e Fator de ConVersao
			If xEnt:getPropValue("SecondUnitOfMeasureCode") != nil .And. !Empty(xEnt:getPropValue("SecondUnitOfMeasureCode"))

				If xEnt:getPropValue("MultiplicationFactorValue") != nil .And. !Empty(xEnt:getPropValue("MultiplicationFactorValue"))
					aAdd(aProd, {"B1_SEGUM", xEnt:getPropValue("SecondUnitOfMeasureCode"), Nil})
					aAdd(aProd, {"B1_CONV", Val(xEnt:getPropValue("MultiplicationFactorValue")), Nil})
				Else
					lRet   := .F.
					cRet := "Fator de conVersao obrigatorio pois existe segunda unidade de medida."
					Return {lRet, cRet}
				Endif

			Endif

			// Rastro por Lote, Sublote ou Sem rastro
			If xEnt:getPropValue("Trail") != nil .And. !Empty(xEnt:getPropValue("Trail"))
				aAdd(aProd, {"B1_RASTRO", xEnt:getPropValue("Trail"), Nil})
			Endif

			// Localizacao
			If xEnt:getPropValue("BinControl") != nil .And. !Empty(xEnt:getPropValue("BinControl"))
				If xEnt:getPropValue("BinControl") == "1" .Or. Upper(xEnt:getPropValue("BinControl")) == "TRUE"
					aAdd(aProd, {"B1_LOCALIZ", "S", Nil})
				Else
					aAdd(aProd, {"B1_LOCALIZ", "N", Nil})
				EndIf
			Endif	

			// Grupo de Estoque
			If xEnt:getPropValue("StockGroupInternalId") != nil .And. !Empty(xEnt:getPropValue("StockGroupInternalId"))
				If XX4MENS("MATA035", "FAMILY" )
					aAux := IntFamInt(xEnt:getPropValue("StockGroupInternalId"), cMarca, RTrim(PmsMsgUVer('FAMILY','MATA035')))
				Elseif XX4MENS("MATA035", "STOCKGROUP" )
					aAux := IntStockInt(xEnt:getPropValue("StockGroupInternalId"), cMarca, RTrim(PmsMsgUVer('STOCKGROUP','MATA035')))
				Endif

				If aAux[1]
					cCodGrupo := RTrim(aAux[2][3])
					aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
				Else
					If xEnt:getPropValue("StockGroupCode") != nil .And. !Empty(xEnt:getPropValue("StockGroupCode"))
						cCodGrupo := RTrim(xEnt:getPropValue("StockGroupCode"))
						aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
					Else
						If xEnt:getPropValue("GroupInternalId") != nil .And. !Empty(xEnt:getPropValue("GroupInternalId"))
							If XX4MENS("MATA035", "FAMILY" )
								aAux := IntFamInt(xEnt:getPropValue("GroupInternalId"), cMarca, RTrim(PmsMsgUVer('FAMILY','MATA035')))
							Elseif XX4MENS("MATA035", "STOCKGROUP" )
								aAux := IntStockInt(xEnt:getPropValue("GroupInternalId"), cMarca, RTrim(PmsMsgUVer('STOCKGROUP','MATA035')))
							Endif

							If aAux[1]
								cCodGrupo := RTrim(aAux[2][3])
								aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
							Else
								If xEnt:getPropValue("GroupCode") != nil .And. !Empty(xEnt:getPropValue("GroupCode"))
									cCodGrupo := RTrim(xEnt:getPropValue("GroupCode"))
									aAdd(aProd, {"B1_GRUPO", RTrim(cCodGrupo), Nil})
								Endif
							Endif
						Endif
					Endif
				Endif
			ElseIf xEnt:getPropValue("StockGroupCode") != nil .And. !Empty(xEnt:getPropValue("StockGroupCode"))
				cCodGrupo := RTrim(xEnt:getPropValue("StockGroupCode"))
				aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
			ElseIf xEnt:getPropValue("GroupInternalId") != nil .And. !Empty(xEnt:getPropValue("GroupInternalId"))
				If XX4MENS("MATA035", "FAMILY" )
					aAux := IntFamInt(xEnt:getPropValue("GroupInternalId"), cMarca, RTrim(PmsMsgUVer('FAMILY','MATA035')))
				Elseif XX4MENS("MATA035", "STOCKGROUP" )
					aAux := IntStockInt(xEnt:getPropValue("GroupInternalId"), cMarca, RTrim(PmsMsgUVer('STOCKGROUP','MATA035')))
				Endif

				If aAux[1]
					cCodGrupo := RTrim(aAux[2][3])
					aAdd(aProd, {"B1_GRUPO", cCodGrupo, Nil})
				Else
					If xEnt:getPropValue("GroupCode") != nil .And. !Empty(xEnt:getPropValue("GroupCode"))
						cCodGrupo := RTrim(xEnt:getPropValue("GroupCode"))
						aAdd(aProd, {"B1_GRUPO", RTrim(cCodGrupo), Nil})
					Endif
				Endif
			ElseIf xEnt:getPropValue("GroupCode") != nil .And. !Empty(xEnt:getPropValue("GroupCode"))
				cCodGrupo := RTrim(xEnt:getPropValue("GroupCode"))
				aAdd(aProd, {"B1_GRUPO", RTrim(cCodGrupo), Nil})
			Endif

			// Lote maximo
			If xEnt:getPropValue("MinimumLot") != nil .And. !Empty(xEnt:getPropValue("MinimumLot"))
				aAdd(aProd, {"B1_LM", Val(xEnt:getPropValue("MinimumLot") ), Nil})
			EndIf

			// Peso Liquido
			If xEnt:getPropValue("NetWeight") != nil .And. !Empty(xEnt:getPropValue("NetWeight"))
				aAdd(aProd, {"B1_PESO", Val(xEnt:getPropValue("NetWeight")), Nil})
			EndIf

			// Peso Bruto
			If xEnt:getPropValue("GrossWeight") != nil .And. !Empty(xEnt:getPropValue("GrossWeight"))
				aAdd(aProd, {"B1_PESBRU", Val(xEnt:getPropValue("GrossWeight") ), Nil})
			EndIf

			// Ultimo preco de compra
			If xEnt:getPropValue("Values"):getPropValue("CostPrice") != nil .And. !Empty(xEnt:getPropValue("Values"):getPropValue("CostPrice"))
				aAdd(aProd, {"B1_UPRC", Val(xEnt:getPropValue("Values"):getPropValue("CostPrice")), Nil})
			EndIf

			// Preco de venda
			If xEnt:getPropValue("Values"):getPropValue("SalesPrice") != nil .And. !Empty(xEnt:getPropValue("Values"):getPropValue("SalesPrice"))
				aAdd(aProd, {"B1_PRV1", Val(xEnt:getPropValue("Values"):getPropValue("SalesPrice")), Nil})
			EndIf

			// Preco medio de custo
			If xEnt:getPropValue("AverageCostPrice") != nil .And. !Empty(xEnt:getPropValue("AverageCostPrice"))
				nAverageCostPrice := Val(xEnt:getPropValue("Values"):getPropValue("AverageCostPrice"))
			EndIf

			// Custo standard
			If xEnt:getPropValue("Values"):getPropValue("StandardCostPrice") != nil .And. !Empty(xEnt:getPropValue("Values"):getPropValue("StandardCostPrice"))
				aAdd(aProd, {"B1_CUSTD", Val(xEnt:getPropValue("Values"):getPropValue("StandardCostPrice")), Nil})
			EndIf

			// Data do ultimo calculo do custo stardard
			If  xEnt:getPropValue("Values"):getPropValue("BaseDate") != nil .And. !Empty(xEnt:getPropValue("Values"):getPropValue("BaseDate"))
				dBaseDate := xEnt:getPropValue("Values"):getPropValue("BaseDate")
				dBaseDate := CToD(SubStr(dBaseDate, 9, 2) + "/" + SubStr(dBaseDate, 6, 2) + "/" + SubStr(dBaseDate, 1, 4))
				aAdd(aProd, {"B1_UCALSTD", dBaseDate, Nil})
			EndIf

			//Ativo
			If xEnt:getPropValue("Active") != nil .And. !Empty(xEnt:getPropValue("Active"))
				cProdActiv := AllTrim(xEnt:getPropValue("Active"))

				If (cProdActiv == '0' .Or. Upper(cProdActiv) == 'FALSE') .And. !(nOperation != 5 .And. lDescSB5) // Nao Ativo
					aAdd( aProd, { "B1_ATIVO", 'N', Nil } )
					aAdd( aProd, { "B1_MSBLQL", '1', Nil } )
				ElseIf (cProdActiv == '1' .Or. Upper(cProdActiv) == 'TRUE') .Or. (nOperation != 5 .And. lDescSB5) // Ativo
					aAdd( aProd, { "B1_ATIVO", 'S', Nil } )
					aAdd( aProd, { "B1_MSBLQL", '2', Nil } )
				EndIf
			EndIf

			//Integracao
			If INT010CPUSO("B1_INTEG")
				aAdd(aProd, {"B1_INTEG","1",Nil})
			Endif
		EndIf

		// Fabricante
		If xEnt:getPropValue("ManufacturerCode") != nil .And. !Empty(xEnt:getPropValue("ManufacturerCode"))
			cFabric := xEnt:getPropValue("ManufacturerCode")
			aAdd(aProd, {"B1_FABRIC", cFabric, Nil})
		EndIf

		// Marca
		If lDescSB5 .And. ((cVersao == "4" .And. cRelease > "006") .Or. cVersao > "4")
			If xEnt:getPropValue("Brand") != nil .And. !Empty(xEnt:getPropValue("Brand"))
				cBrand := xEnt:getPropValue("Brand")
				aAdd(aProdSB5, {"B5_MARCA", cBrand, Nil})
			EndIf
		EndIf

		//Tributacao ECF - Utilizado em Varejo
		If xEnt:getPropValue("EcfTaxing") != nil .And. !Empty(xEnt:getPropValue("EcfTaxing"))
		
			If xEnt:getPropValue("EcfTaxing"):getPropValue("Code") != nil .And. !Empty(xEnt:getPropValue("EcfTaxing"):getPropValue("Code"))

				//Codigo da Tributacao
				cCodeTax := xEnt:getPropValue("EcfTaxing"):getPropValue("Code")

				//Tipo da Tributacao
				If xEnt:getPropValue("EcfTaxing"):getPropValue("Type") != nil .And. !Empty(xEnt:getPropValue("EcfTaxing"):getPropValue("Type"))
					nPosTipo := aScan(aProd,{|x| AllTrim(x[1]) == "B1_TIPO"}) //Tipo do produto

					//Validacao do Codigo da Tributacao enviada
					If AllTrim(xEnt:getPropValue("EcfTaxing"):getPropValue("Type")) $ "1|5" //Tributado ou Reducao de Base
						//Aliquota do produto
						If xEnt:getPropValue("EcfTaxing"):getPropValue("Aliquot") != nil .And. !Empty(xEnt:getPropValue("EcfTaxing"):getPropValue("Aliquot"))

							cAliquot := xEnt:getPropValue("EcfTaxing"):getPropValue("Aliquot") //Aliquota

							If nPosTipo > 0
								If AllTrim(aProd[nPosTipo][2]) $ "GE|GG|MO|SV"
									cTpTrib := "S" //Tipo Tributacao Servico
								Else
									cTpTrib := "T" //Tipo Tributacao ICMS
								EndIf

								//Ajusta codigo tributacao
								If Val(cAliquot) <= 9
									cTpTrib += "0"
								EndIf

								If AllTrim(cCodeTax) <> cTpTrib + CValToChar(Val(cAliquot) * 100)
									lRet := .F.
									cRet := "Codigo de tributacao incorreto" + Chr(10) 
									cRet += "Enviado: " + AllTrim(cCodeTax) + Chr(10) 
									cRet += "Correto:" + cTpTrib + CValToChar(Val(cAliquot) * 100) 
									Return {lRet, cRet}
								Else
									If SubStr(cTpTrib, 1, 1) == "S" //Servico
										aAdd(aProd, {"B1_ALIQISS", Val(cAliquot), Nil})
										aAdd(aProd, {"B1_PICMRET", 0, Nil})

										MDQ->(dbSetOrder(1))

									ElseIf SubStr(cTpTrib, 1, 1) == "T" //Mercadoria
										aAdd(aProd, {"B1_PICM", Val(cAliquot), Nil})
										aAdd(aProd, {"B1_PICMRET", 0, Nil})

										MDQ->(dbSetOrder(1))

										If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSTRIB)
											//Busca TES para o produto no cadastro de configuracao Padrao
											aAdd(aProd, {"B1_TS", MDQ->MDQ_TSTRIB, Nil})
										EndIf
									EndIf
								EndIf
							EndIf
						Else
							lRet 	 := .F.
							cRet := "Aliquota obrigatoria para produto tipo tributado"
							Return {lRet, cRet}
						EndIf
					ElseIf xEnt:getPropValue("EcfTaxing"):getPropValue("Type") == "2" //Isento
						
						cTpTrib := "I1"

						If AllTrim(cCodeTax) <> cTpTrib
							lRet := .F.
							cRet := "Codigo de tributacao incorreto" + Chr(10) 
							cRet += "Enviado: " + AllTrim(cCodeTax) + Chr(10) 
							cRet += "Correto:" + cTpTrib 
							Return {lRet, cRet}
						EndIf

						aAdd(aProd, {"B1_PICMRET", 0, Nil})

						MDQ->(dbSetOrder(1))

						If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSISEN)
							//Busca TES para o produto no cadastro de configuracao Padrao
							aAdd(aProd, {"B1_TS", MDQ->MDQ_TSISEN, Nil})
						EndIf
					ElseIf xEnt:getPropValue("EcfTaxing"):getPropValue("Type") == "3" //Substituicao Tributaria
						cAliquot := xEnt:getPropValue("EcfTaxing"):getPropValue("Aliquot") //Aliquota

						cTpTrib := "F1"

						If AllTrim(cCodeTax) <> cTpTrib
							lRet := .F.
							cRet := "Codigo de tributacao incorreto" + Chr(10) 
							cRet += "Enviado: " + AllTrim(cCodeTax) + Chr(10) 
							cRet += "Correto:" + cTpTrib 
							Return {lRet, cRet}
						EndIf

						//Se aliquota nao informada, busca no parametro
						If Empty(cAliquot)
							cAliquot := CValToChar(SuperGetMv("MV_ICMPAD",, ""))
						EndIf

						aAdd(aProd, {"B1_PICM", Val(cAliquot), Nil})
						aAdd(aProd, {"B1_PICMRET", 0.01, Nil})

						MDQ->(dbSetOrder(1))

						If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSSUBS)
							//Busca TES para o produto no cadastro de configuracao Padrao
							aAdd(aProd, {"B1_TS", MDQ->MDQ_TSSUBS, Nil})
						EndIf
					ElseIf xEnt:getPropValue("EcfTaxing"):getPropValue("Type") == "4" //Nao Tributado
						cTpTrib := "N1"

						If AllTrim(cCodeTax) <> cTpTrib
							lRet := .F.
							cRet := "Codigo de tributacao incorreto" + Chr(10) 
							cRet += "Enviado: " + AllTrim(cCodeTax) + Chr(10) 
							cRet += "Correto:" + cTpTrib 
							Return {lRet, cRet}
						EndIf

						aAdd(aProd, {"B1_PICMRET", 0, Nil})

						MDQ->(dbSetOrder(1))

						If MDQ->(dbSeek(xFilial("MDQ") + "001")) .And. !Empty(MDQ->MDQ_TSNTRI)
							//Busca TES para o produto no cadastro de configuracao Padrao
							aAdd(aProd, {"B1_TS", MDQ->MDQ_TSNTRI, Nil})
						EndIf
					EndIf
				Else
					lRet := .F.
					cRet := "Tipo da Tributacao ECF obrigatorio para produto utilizado em varejo"
					Return {lRet, cRet}
				EndIf
			EndIf

		Endif

		//Codigo Alternativo 
		If xEnt:getPropValue("AlternativeCode") != nil .And. !Empty(xEnt:getPropValue("AlternativeCode")) .And.;
			xEnt:getPropValue("AlternativeCode"):getPropValue("Code") != nil .And. !Empty(xEnt:getPropValue("AlternativeCode"):getPropValue("Code")) .And.;
			xEnt:getPropValue("AlternativeCode"):getPropValue("InternalId") != nil .And. !Empty(xEnt:getPropValue("AlternativeCode"):getPropValue("InternalId"))

			cValExt := xEnt:getPropValue("AlternativeCode"):getPropValue("InternalId")
			aAux := IntProInt(cValExt, cMarca, /*Versao*/)
			If aAux[1]
				aAdd(aProd, {"B1_ALTER", PadR( aAux[2][3], TamSX3("B1_COD")[1]), Nil})
			Endif
		Endif

		//Tipo de Conversor
		If xEnt:getPropValue("TypeUMConversion") != nil .And. !Empty(xEnt:getPropValue("TypeUMConversion")) 

			If xEnt:getPropValue("TypeUMConversion")[1]:getPropValue("type") != nil .And. !Empty(xEnt:getPropValue("TypeUMConversion")[1]:getPropValue("type"))
				cType := Alltrim(xEnt:getPropValue("TypeUMConversion")[1]:getPropValue("type"))
				If cType $ 'M|D'
					aAdd(aProd, {"B1_TIPCONV", cType, Nil})
				Endif
			Endif

		Endif

		//Inclui/Altera/Exclui Codigo de Barras do Produto - SLK (SigaLoja)
		If xEnt:getPropValue("ListOfBarCode") != nil .And. !Empty(xEnt:getPropValue("ListOfBarCode")) .And.;
			xEnt:getPropValue("ListOfBarCode"):getPropValue("Barcode") != nil .And. !Empty(xEnt:getPropValue("ListOfBarCode"):getPropValue("Barcode")) 
		
			oListBarCode := xEnt:getPropValue('ListOfBarCode')

			//Verifica se o Codigo de Barras foi informado
			For nCount := 1 To Len(oListBarCode)
				//Consiste tamanho do codigo de Barras enviado
				If TamSx3("LK_CODBAR")[1] >= Len(AllTrim(oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('Code')))
					cUMCodBar  := ""
					nQtdCodBar := 0

					//Armazena Unidade de Medida do Codigo de Barras
					If oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('UnifOfMeasureInternalId') != nil .And. !Empty(oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('UnifOfMeasureInternalId'))
						cUMCodBar := oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('UnifOfMeasureInternalId')
					EndIf

					//Armazena a Quantidade do Codigo de Barras
					If oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('ItemQuantity') != nil .And. !Empty(oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('ItemQuantity'))
						nQtdCodBar := Val(oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('ItemQuantity'))
					EndIf

					aAdd(aBarCode, {oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('Code'),;
						oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('InternalId'),cUMCodBar,nQtdCodBar})
				Else
					//Se encontrado erro no Codigo de Barras, nao continua a integracao
					lRet 	 := .F.
					cRet := STR0034 + AllTrim(oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('Code')) + STR0035 + Chr(10) //"O Codigo de Barras " ##" possui tamanho maior que o permitido."
					cRet += STR0036 + CValToChar(TamSx3("LK_CODBAR")[1]) + Chr(10) //"Maximo:"
					cRet += STR0037 + CValToChar(Len(AllTrim(oListBarCode[nCount]:getPropValue('BarCode'):getPropValue('Code')))) //"Enviado:"
					Return {lRet, cRet}
				EndIf
			Next nCount
		EndIf

		// ponto de entrada inserido para controlar dados especificos do cliente
		If ExistBlock("MT010EAI")
			aRetPe := ExecBlock("MT010EAI",.F.,.F.,{aProd,nOperation})
			If ValType(aRetPe) == "A"
				aProd 	:= aClone(aRetPe)
			EndIf
		EndIf

		If nOperation == 5 // Delete

			// Indicadores do produto
			If cVersao == "4" .AND. cRelease >="005"
				cQuery := "SELECT BZ_FILIAL, BZ_COD, R_E_C_N_O_ RecnoSBZ "
				cQuery += "FROM " + RetSQLName("SBZ") + " SBZ "
				cQuery += "WHERE BZ_COD = '" + cCode + "' "
				dbUseArea( .T., "TOPCONN", TcGenQry(,,cQuery) , cAliasSBZ, .T., .F. )
				If Select(cAliasSBZ) >0
					While (cAliasSBZ)->(!Eof())
						dbSelectArea("SBZ")
						dbGoto((cAliasSBZ)->RecnoSBZ)
						RecLock("SBZ",.F.)
						dbDelete()
						MsUnLock()
						
						//Monta a ExternalId do Produto
						cValIntSBZ := IntProExt(, (cAliasSBZ)->BZ_FILIAL, (cAliasSBZ)->BZ_COD)[2]

						//Busca ExternalId do Produto
						cValExtSBZ := AllTrim(CFGA070Ext(cMarca, "SBZ", "BZ_COD", cValIntSBZ))
						
						aAdd(aProdSBZ,{cValIntSBZ,cValExtSBZ,{}})
						
						// Exclui na Tabela XXF (de/para)
						CFGA070Mnt(cMarca, "SBZ", "BZ_COD", cValExtSBZ, cValIntSBZ, .T.)
						
						dbSelectArea(cAliasSBZ)
						dbSkip()
					End
					(cAliasSBZ)->(dbCloseArea())
				EndIf
			EndIf

			// Obtem o resultado da funcao que faz a amarracao do Produto x Cliente
			aProdCli := prodCli(cCode, cMarca, nOperation)

			If aProdCli[1][1] // ExclusÃ£o dos filhos ocorreu com sucesso?
				// Exclui o pai
				MSExecAuto({|x, y| MATA010(x, y)}, aProd, nOperation)
			Else
				lRet := .F.
				cRet := aProdCli[1][2]
			EndIf			
		Else // Insert or Update
			MSExecAuto({|x, y| MATA010(x, y)}, aProd, nOperation)
		EndIf
				
		If lMsErroAuto
			aErroAuto := GetAutoGRLog()

			cRet := ""
			For nCount := 1 To Len(aErroAuto)
				cRet += _NoTags(aErroAuto[nI])
			Next

			lRet		:= .F.
			cRet := EncodeUTF8(cRet)
		Else

			ofwEAIObj:Activate()
																	
			ofwEAIObj:setProp("ReturnContent")

			ofwEAIObj:getPropValue("ReturnContent"):setProp("ListOfInternalID",{},'InternalId',,.T.)
			ofwEAIObj:getPropValue("ReturnContent"):get("ListOfInternalID")[1]:setprop("Name",xEnt:getHeaderValue("Transaction"),,.T.)
			ofwEAIObj:getPropValue("ReturnContent"):get("ListOfInternalID")[1]:setprop("Origin",cValExt,,.T.)
			ofwEAIObj:getPropValue("ReturnContent"):get("ListOfInternalID")[1]:setprop("Destination",cValInt,,.T.)		

			//Validação para o caso de precisar SB5
			If nOperation !=5 .and. lDescSB5
				nEventoSB5 := nOperation

				aAreaAnt := GetArea()

				dbSelectArea("SB5")
				SB5->(dbSetOrder(1)) // B5_FILIAL + B5_COD

				// validar exclusão não se faz necessario por rotina padrão exclui automaticamente
				If nOperation == 4 .And. !(SB5->(MSseek( xFilial("SB5") + aProd [1][2])))
					nEventoSB5 := 3
				EndIf

				RestArea(aAreaAnt)
				// execulta a rotina auto. Dados Complementares do produto para preencher o SB5
				MSExecAuto({|x, y| MATA180(x, y)}, aProdSB5, nEventoSB5)

				If lMsErroAuto
					aErroAuto := GetAutoGRLog()

					cRet := ""
					For nCount := 1 To Len(aErroAuto)
						cRet += _NoTags(aErroAuto[nI])
					Next

					lRet	:= .F.
					cRet 	:= EncodeUTF8(cRet)
				Else
					SB1->(dbSetOrder(1))
					If (cProdActiv == '0' .Or. Upper(cProdActiv) == 'FALSE' .Or. CriaVar("B1_MSBLQL",.T.) == '1') .And. SB1->(dbSeek(xFilial("SB1")+cCode))
						RecLock("SB1",.F.)
						SB1->B1_MSBLQL := '1'
						SB1->(MsUnLock())
					EndIf
				EndIf
			Endif

			// Se o evento é diferente de Delete
			If nOperation != 5
				// Obtém o resultado da função que faz a amarraçãoo do Produto x Cliente
				aProdCli := prodCli(cCode, cMarca, nOperation)

				// Amarração Produto x Cliente ocorreu com sucesso?
				If aProdCli[1][1]
					// Grava na Tabela XXF (de/para)
					CFGA070Mnt(cMarca, cAlias, cField, cValExt, cValInt )

					If nAverageCostPrice >0
						If nOperation == 3 // Insere registros na SB2 | OBS: UPDATE e DELETE são executados pela rotina automática
							aProdSB9 := {}
							aadd(aProdSB9,{"B9_COD", cCode,})	
							aadd(aProdSB9,{"B9_LOCAL", cLocPad,})	
							aadd(aProdSB9,{"B9_CM1", nAverageCostPrice,})	
							MSExecAuto({|x,y| mata220(x,y)},aProdSB9,3)		
							
							If lMsErroAuto

								aErroAuto := GetAutoGRLog()

								cRet := ""
								For nCount := 1 To Len(aErroAuto)
									cRet += _NoTags(aErroAuto[nI])
								Next

								lRet	:= .F.
								cRet 	:= EncodeUTF8(cRet)
							EndIf
							
						EndIf
					EndIf
				Else // Amarração Produto x Cliente retornou erro
					lRet   := .F.
					cRet := aProdCli[1][2]
				EndIf
			Else
				// Exclui na Tabela XXF (de/para)
				CFGA070Mnt(cMarca, cAlias, cField, cValExt, cValInt, .T.)
			EndIf

			If nOperation <> 5
				If cVersao == "4" .AND. cRelease =="005" .AND. len(aProdSBZ)>0
					For nPosSBZ := 1 to len(aProdSBZ)
						nPosFilial := aScan(aProdSBZ[nPosSBZ,3],{|x|x[1]=="BZ_FILIAL"})
						nPosCod	:= aScan(aProdSBZ[nPosSBZ,3],{|x|x[1]=="BZ_COD"})
						If nPosFilial >0 .and. nPosCod >0
							cBkpFil := cFilAnt
							cFilAnt := padr(aProdSBZ[nPosSBZ,3,nPosFilial,2],TamSX3("BZ_FILIAL")[1])
							aAreaTMP :=GetArea()
							dbSelectArea("SB1")
							DbSetOrder(1)
							If dbSeek(xFilial("SB1")+padr(aProdSBZ[nPosSBZ,3,nPosCod,2],TamSX3("BZ_COD")[1])) // se o produto existe na filial enviada para a tabela SBZ
								dbSelectArea("SBZ")
								DbSetOrder(1)
								If dbSeek(padr(aProdSBZ[nPosSBZ,3,nPosFilial,2],TamSX3("BZ_FILIAL")[1])+padr(aProdSBZ[nPosSBZ,3,nPosCod,2],TamSX3("BZ_COD")[1]))
									lSBZNew := .F.
									aProdSBZ[nPosSBZ,1] := CFGA070INT(cMarca, 'SBZ', 'BZ_COD', aProdSBZ[nPosSBZ,2] )
								Else
									lSBZNew := .T.
								EndIf
								If Len(aProdSBZ[nPosSBZ,3]) <=2 
									If nOperation == 4 // Alteração
										RecLock("SBZ", lSBZNew)
										SBZ->(dbDelete())
										MsUnLock()
										CFGA070Mnt(cMarca, "SBZ", "BZ_COD", aProdSBZ[nPosSBZ,2], aProdSBZ[nPosSBZ,1], .T.)
									EndIf
								Else
									RecLock("SBZ", lSBZNew)
									For nCnt := 1 to Len(aProdSBZ[nPosSBZ,3])
										FieldPut(FieldPos(aProdSBZ[nPosSBZ,3,nCnt,1]),aProdSBZ[nPosSBZ,3,nCnt,2])
									Next nCnt
									MsUnLock()
									CFGA070Mnt( cMarca, "SBZ", "BZ_COD", aProdSBZ[nPosSBZ,2], aProdSBZ[nPosSBZ,1])
								EndIf
							Else
								lRet    := .F.
								cRet := I18N(STR0044,{cFilAnt})// "Não foi possivel cadastrar na tabela de indicares do produto, pois o codigo do produto não esta cadastrado na filial #1[código da filial]#"
							EndIf

							cFilAnt := cBkpFil

							RestArea(aAreaTMP)
							
						EndIf
					Next nPosSBZ
				EndIf
			EndIf

			// Grava dados do Agronegocio
			If cVersao == "4" .And. cRelease >= "007"
				If FindFunction("AGRPMT010GRVMD") .And. lAgroAtivo .And. "AGRO" $ cCadProd
					
					If !lMsErroAuto .And. aAgroDados[1] == .T. // #AGRO
						AGRPMT010GRVMD(aAgroDados[2], nOperation, cCode , cVersion)
						
						If lMsErroAuto
							aErroAuto := GetAutoGRLog()

							cRet := ""
							For nCount := 1 To Len(aErroAuto)
								cRet += _NoTags(aErroAuto[nI])
							Next

							lRet	:= .F.
							cRet 	:= EncodeUTF8(cRet)

							Return {lRet, cRet}
						EndIf
					EndIf
				EndIf
			EndIf

			// Grava dados na F2Q
			If nOperation != 5 
				If !Empty(aProdF2Q) .And. (cVersao == "4" .And. cRelease >= "010")
				
					aAreaAnt := GetArea()

					dbSelectArea("F2Q")
					F2Q->(dbSetOrder(1)) // F2Q_FILIAL + F2Q_PRODUT

					// Verifica se existe produto na F2Q
					If !dbSeek(xFilial("F2Q")+aProdF2Q[1,2]) .And. (nOperation == 3 .Or. nOperation == 4) // Insert .or Update
						RecLock("F2Q", .T.)
						F2Q->F2Q_FILIAL := xFilial("F2Q")
						For nCnt := 1 to Len(aProdF2Q)
							FieldPut(FieldPos(aProdF2Q[nCnt,1]),aProdF2Q[nCnt,2])
						Next nCnt
						MsUnLock()
					ElseIf dbSeek(xFilial("F2Q")+aProdF2Q[1,2]) .And. nOperation == 4 // Update
						RecLock("F2Q", .F.)
						For nCnt := 1 to Len(aProdF2Q)
							FieldPut(FieldPos(aProdF2Q[nCnt,1]),aProdF2Q[nCnt,2])
						Next nCnt
						MsUnLock()
					EndIf
					RestArea(aAreaAnt)
				EndIf
			EndIf
		Endif	
	EndIf
ElseIf nTypeTrans == TRANS_SEND

	ofwEAIObj:Activate()
	If lMVC
		oModel := FWModelActive()
		nOperation := oModel:GetOperation()
	Else
		If Inclui
			nOperation := 3
		ElseIf Altera
			nOperation := 4
		EndIf
	EndIf

	// Verifica se é uma exclusão
	If nOperation != 3 .And. nOperation != 4
		cEvent := 'delete'
		CFGA070Mnt(,"SB1","B1_COD",,IntProExt(,,SB1->B1_COD,)[2],.T.)
	Else
		cEvent := 'upsert'
	EndIf

	ofwEAIObj:setEvent(cEvent)

	//Se está integrando com o PPI, utiliza as variáveis de memória, pois a inclusão/alteração/exclusão ainda não foi efetivada
	//no momento da integração, e por isso não é possível utilizar o valor da tabela (SB1->B1_COD).
	//É utilizado o valor da tabela apenas se a operação for de exclusão.

	If lIntegPPI .And. cEvent == 'upsert'
		cPont := "M->"
		cPont5:= cPont
	Else
		cPont  := "SB1->"
		cPont5 := "SB5->"
		cB1_DESCB5	:= Posicione("SB5",1,xFilial("SB5")+SB1->B1_COD,"B5_CEME")
	Endif

	If lMVC
		cB1_COD		:= oModel:GetValue("SB1MASTER","B1_COD")
		cB1_DESC	:= oModel:GetValue("SB1MASTER","B1_DESC")
		cB1_MSBLQL  := oModel:GetValue("SB1MASTER","B1_MSBLQL")
		cB1_ATIVO	:= oModel:GetValue("SB1MASTER","B1_ATIVO")
		cB1_GRUPO	:= oModel:GetValue("SB1MASTER","B1_GRUPO")
		cB1_UM		:= oModel:GetValue("SB1MASTER","B1_UM")
		cB1_LOCPAD	:= oModel:GetValue("SB1MASTER","B1_LOCPAD")
		nB1_LE		:= oModel:GetValue("SB1MASTER","B1_LE")
		nB1_LM		:= oModel:GetValue("SB1MASTER","B1_LM")
		nB1_PESO	:= oModel:GetValue("SB1MASTER","B1_PESO")
		nB1_PESBRU	:= oModel:GetValue("SB1MASTER","B1_PESBRU")
		cB1_ORIGEM	:= oModel:GetValue("SB1MASTER","B1_ORIGEM")
		cB1_FPCOD	:= oModel:GetValue("SB1MASTER","B1_FPCOD")
		cB1_POSIPI	:= oModel:GetValue("SB1MASTER","B1_POSIPI")
		cB1_TIPO	:= oModel:GetValue("SB1MASTER","B1_TIPO")
		cB1_RASTRO	:= oModel:GetValue("SB1MASTER","B1_RASTRO")
		cB1_LOCALIZ	:= oModel:GetValue("SB1MASTER","B1_LOCALIZ")
		cB1_CONTA	:= oModel:GetValue("SB1MASTER","B1_CONTA")
		cB1_SEGUM	:= oModel:GetValue("SB1MASTER","B1_SEGUM")
		cB1_TIPCONV	:= oModel:GetValue("SB1MASTER","B1_TIPCONV")
		nB1_CONV	:= oModel:GetValue("SB1MASTER","B1_CONV")
		cB1_CC		:= oModel:GetValue("SB1MASTER","B1_CC")
		nB1_QE		:= oModel:GetValue("SB1MASTER","B1_QE")
		cB1_FILIAL	:= oModel:GetValue("SB1MASTER","B1_FILIAL")
		nB1_UPRC	:= oModel:GetValue("SB1MASTER","B1_UPRC")
		nB1_CUSTD	:= oModel:GetValue("SB1MASTER","B1_CUSTD")
		cB1_UCALSTD	:= oModel:GetValue("SB1MASTER","B1_UCALSTD")
		nB1_PRV1	:= oModel:GetValue("SB1MASTER","B1_PRV1")
		cB1_FABRIC	:= oModel:GetValue("SB1MASTER","B1_FABRIC")
		cB1_PRODPAI := oModel:GetValue("SB1MASTER","B1_PRODPAI")
		cB1_ALTER   := oModel:GetValue("SB1MASTER","B1_ALTER") 
		cB1_CODBAR  := oModel:GetValue("SB1MASTER","B1_CODBAR") 
	Else
		cB1_COD		:= &(cPont+"B1_COD")
		cB1_DESC	:= &(cPont+"B1_DESC")
		cB1_ATIVO	:= &(cPont+"B1_ATIVO")
		cB1_MSBLQL  := &(cPont+"B1_MSBLQL")
		cB1_GRUPO	:= &(cPont+"B1_GRUPO")
		cB1_UM		:= &(cPont+"B1_UM")
		cB1_LOCPAD	:= &(cPont+"B1_LOCPAD")
		nB1_LE		:= &(cPont+"B1_LE")
		nB1_LM		:= &(cPont+"B1_LM")
		nB1_PESO	:= &(cPont+"B1_PESO")
		nB1_PESBRU	:= &(cPont+"B1_PESBRU")
		cB1_ORIGEM	:= &(cPont+"B1_ORIGEM")
		cB1_FPCOD	:= &(cPont+"B1_FPCOD")
		cB1_POSIPI	:= &(cPont+"B1_POSIPI")
		cB1_TIPO	:= &(cPont+"B1_TIPO")
		cB1_RASTRO	:= &(cPont+"B1_RASTRO")
		cB1_LOCALIZ	:= &(cPont+"B1_LOCALIZ")
		cB1_CONTA	:= &(cPont+"B1_CONTA")
		cB1_SEGUM	:= &(cPont+"B1_SEGUM")
		cB1_TIPCONV	:= &(cPont+"B1_TIPCONV")
		nB1_CONV	:= &(cPont+"B1_CONV")
		cB1_CC		:= &(cPont+"B1_CC")
		nB1_QE		:= &(cPont+"B1_QE")
		cB1_FILIAL	:= &(cPont+"B1_FILIAL")
		nB1_UPRC	:= &(cPont+"B1_UPRC")
		nB1_CUSTD	:= &(cPont+"B1_CUSTD")
		cB1_UCALSTD	:= &(cPont+"B1_UCALSTD")
		nB1_PRV1	:= &(cPont+"B1_PRV1")
		cB1_FABRIC	:= &(cPont+"B1_FABRIC")
		cB1_PRODPAI := &(cPont+"B1_PRODPAI")
		cB1_ALTER   := &(cPont+"B1_ALTER")
		cB1_CODBAR  := &(cpont+"B1_CODBAR")
	EndIf

	//Envia Informacoes do Complemento do Produto
	//para E-commerce

	If lMVC .And. lSB5Mvc
		cB5_ECTITU	:= oModSB5:GetValue( "B5_ECTITU" )
		cB5_ECDESCR	:= oModSB5:GetValue( "B5_ECDESCR")
		cB5_ECCARAC	:= oModSB5:GetValue( "B5_ECCARAC")
		cB5_ECPROFU	:= oModSB5:GetValue( "B5_ECPROFU")
		cB5_ECLARGU	:= oModSB5:GetValue( "B5_ECLARGU")
		cB5_ECCOMP	:= oModSB5:GetValue( "B5_ECCOMP" )
		cB5_ECCUBAG	:= oModSB5:GetValue( "B5_ECCUBAG")
		cB5_ECFLAG	:= oModSB5:GetValue( "B5_ECFLAG" )
		cB5_MARCA	:= oModSB5:GetValue( "B5_MARCA" )
	Else
		SB5->( dbSeek( FWxFilial( "SB5" ) + cB1_COD ) )
		RegToMemory("SB5",.F.,.T.,.F.)

		cB5_ECTITU	:= &(cPont5+"B5_ECTITU")
		cB5_ECDESCR	:= &(cPont5+"B5_ECDESCR")
		cB5_ECCARAC	:= &(cPont5+"B5_ECCARAC")
		cB5_ECPROFU	:= &(cPont5+"B5_ECPROFU")
		cB5_ECLARGU	:= &(cPont5+"B5_ECLARGU")
		cB5_ECCOMP	:= &(cPont5+"B5_ECCOMP")
		cB5_ECCUBAG	:= &(cPont5+"B5_ECCUBAG")
		cB5_ECFLAG	:= &(cPont5+"B5_ECFLAG")
		cB5_MARCA   := &(cPont5+"B5_MARCA")
	EndIf

	//Fim complemento

	// Monta XML de envio de mensagem unica
	
	cValInt := IntProExt(/*Empresa*/, /*Filial*/, cB1_COD, /*Versão*/)[2]
	ofwEAIObj:setProp("InternalId"       	,cValInt  )
	ofwEAIObj:setProp("CompanyId"        	,cEmpAnt )
	ofwEAIObj:setProp("BranchId"         	,cFilAnt )
	ofwEAIObj:setProp("CompanyinternalId"	,cEmpAnt + '|' + cFilAnt )
	ofwEAIObj:setProp("Code"				,AllTrim(cB1_COD) )
			
	If lDescSB5 .And. !Empty(cB1_DESCB5)
		ofwEAIObj:setProp("Name",  			AllTrim(cB1_DESCB5) )
	Else
		ofwEAIObj:setProp("Name",  			AllTrim(cB1_DESC  ) )
	Endif
	
	ofwEAIObj:setProp("ShortName",			AllTrim(cB1_DESC)   )  
	If AllTrim(cB1_ATIVO) == 'N' .Or. AllTrim(cB1_MSBLQL) == "1"
		cProdActiv  :=  '0'
	EndIf 

	ofwEAIObj:setProp("Active", cProdActiv )

	//| Modificado para atender a integração do Datasul
	//| a Tag  é um campo númerico no datasul e por isso no SX5 tabela 02 deve ser 
	//| cadastrado os códigos num range de 01 À 99
	//| validação observa se o cadastro foi enviado pelo modulo de TMS

	If !Empty(cB1_GRUPO) .And. cMODULO <> "TMS"
		ofwEAIObj:setProp("StockGroupCode",	AllTrim(cB1_GRUPO) )
		If lIntegPPI
			ofwEAIObj:setProp("StockGroupInternalId",	cEmpAnt + '|' + RTrim(xFilial("SBM")) + '|' + AllTrim(cB1_GRUPO)   )
		Else
			If XX4MENS("MATA035", "FAMILY" )
				ofwEAIObj:setProp("StockGroupInternalId",	IntFamExt(/*cEmpresa*/,/*cFil*/,AllTrim(SB1->B1_GRUPO), Nil)[2]   )
			Elseif XX4MENS("MATA035", "STOCKGROUP" )
				ofwEAIObj:setProp("StockGroupInternalId",	IntStockExt(/*cEmpresa*/,/*cFil*/,AllTrim(SB1->B1_GRUPO), Nil )[2]   )
			Else
				ofwEAIObj:setProp("StockGroupInternalId",	cEmpAnt + "|" + AllTrim(xFilial("SBM")) + "|" + AllTrim(cB1_GRUPO)   )
			Endif
		EndIf
		ofwEAIObj:setProp("StockGroupDescription",		AllTrim(getGProd(cB1_GRUPO))   )
		//|
		//| Para o modulo TMS o grupo é o B1_TIPO
		//|
	ElseIf cModulo == "TMS"
		ofwEAIObj:setProp("StockGroupCode",				AllTrim(cB1_TIPO)   )
		ofwEAIObj:setProp("StockGroupInternalId",		cEmpAnt + '|' + RTrim(xFilial("SB1")) + '|' + AllTrim(cB1_TIPO)   )
		ofwEAIObj:setProp("StockGroupDescription",		AllTrim(Posicione("SX5",1,xFilial("SX5") + "02" + cB1_TIPO,"X5_DESCRI"))   )
	EndIf

	ofwEAIObj:setProp("UnitOfMeasureCode",				RTrim(cB1_UM)	)
	ofwEAIObj:setProp("UnitOfMeasureInternalId",		IntUndExt(/*cEmpresa*/, /*cFilial*/, cB1_UM)[2]	)
	ofwEAIObj:setProp("StandardWarehouseCode",			RTrim(cB1_LOCPAD))
	ofwEAIObj:setProp("StandardWarehouseInternalId",	IntLocExt(/*Empresa*/, /*Filial*/, cB1_LOCPAD, /*Versão*/)[2]	)
	ofwEAIObj:setProp("StandardWarehouseDescription",	DscLocEs(cB1_LOCPAD)	)
	ofwEAIObj:setProp("EconomicLot",					cValToChar(nB1_LE)	)
	ofwEAIObj:setProp("MinimumLot",						cValToChar(nB1_LM)	)
	If !Empty(cB1_CODBAR)
		ofwEAIObj:setProp("EanCode",					AllTrim(cB1_CODBAR) )
	EndIf
	If (cB1_RASTRO == "S" .Or. cB1_RASTRO == "L")
		ofwEAIObj:setProp("StockControlType",			3	)
	Else
		If (cB1_LOCALIZ == "S")
			ofwEAIObj:setProp("StockControlType",		2	)
		EndIf
	EndIf
	ofwEAIObj:setProp("NetWeight",						cValToChar(nB1_PESO)	)
	ofwEAIObj:setProp("GrossWeight", 					cValToChar(nB1_PESBRU)	)
	ofwEAIObj:setProp("Origin", 						AllTrim(cB1_ORIGEM)	)
	
	aF2QArea := F2Q->(GetArea())
	F2Q->(DBSetOrder(1)) //F2Q_FILIAL + F2Q_PRODUT
	If F2Q->(DBSeek(xFilial("F2Q")+SB1->B1_COD))
		ofwEAIObj:setProp("HealthAgency",					 F2Q->F2Q_CODANV)
	Else
		ofwEAIObj:setProp("HealthAgency", PadR(" ", TamSX3("F2Q_CODANV")[1]))
	EndIf
	RestArea(aF2QArea)

	If !Empty(cB1_FPCOD)
		ofwEAIObj:setProp("FamilyCode",					RTrim(cB1_FPCOD)	)
		ofwEAIObj:setProp("FamilyInternalId", 			cEmpAnt + '|' + RTrim(xFilial("SYC")) + '|' + RTrim(cB1_FPCOD)	)
		ofwEAIObj:setProp("FamilyDescription", 			DscFam(cB1_FPCOD)	)
	ElseIf cModulo == "TMS"
		ofwEAIObj:setProp("FamilyCode",					RTrim(cB1_GRUPO)	)
		ofwEAIObj:setProp("FamilyInternalId", 			cEmpAnt + '|' + RTrim(xFilial("SB1")) + '|' + RTrim(cB1_GRUPO)	)
		ofwEAIObj:setProp("FamilyDescription", 			AllTrim(getGProd(cB1_GRUPO))	)
	EndIf
	ofwEAIObj:setProp("ManufacturerCode", 				cB1_FABRIC)
	ofwEAIObj:setProp("Brand", 						    AllTrim(cB5_MARCA))

	ofwEAIObj:setProp("FiscalInformation")
	If !Empty(cB1_POSIPI)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("FiscalClassification")
		ofwEAIObj:getPropValue("FiscalInformation"):getPropValue("FiscalClassification"):setProp("Code",							RTrim(cB1_POSIPI)	)
		ofwEAIObj:getPropValue("FiscalInformation"):getPropValue("FiscalClassification"):setProp("FiscalClassificationInternalId",	RTrim(cB1_POSIPI)	)
		ofwEAIObj:getPropValue("FiscalInformation"):getPropValue("FiscalClassification"):setProp("Description",						DscNCM(cB1_POSIPI)	)
	EndIf     

			
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("PisRetaining", IIF(SB1->B1_PIS=='1','true','false')	)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("PisAliquot", cValToChar(SB1->B1_PPIS)	)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("CofinsRetaining", IIF(SB1->B1_COFINS=='1','true','false')	)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("CofinsAliquot", cValToChar(SB1->B1_PCOFINS) 	)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("CsllRetaining", IIF(SB1->B1_CSLL=='1','true','false')	)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("CsllAliquot", cValToChar(SB1->B1_PCSLL) 	)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("IrrfIncidence", IIF(SB1->B1_IRRF=='S','true','false')	)
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("IssAliquot", cValToChar(SB1->B1_ALIQISS)	)
		If cPaisLoc == "BRA"
			ofwEAIObj:getPropValue("FiscalInformation"):setProp("TaxSubstitutionCode", SB1->B1_CEST	)
		EndIf
		ofwEAIObj:getPropValue("FiscalInformation"):setProp("IssServiceCode", SB1->B1_CODISS	)
		If cPaisLoc == "BRA"
			ofwEAIObj:getPropValue("FiscalInformation"):setProp("MunicipalTaxCod", SB1->B1_TRIBMUN	)
		EndIf
		
		ofwEAIObj:setProp("ProductType", 						getPType(cB1_TIPO, nTypeTrans)	)      
		ofwEAIObj:setProp("Trail", 								RTrim(cB1_RASTRO) )
		ofwEAIObj:setProp("BinControl", 						If(cB1_LOCALIZ == "S","True","False") )

		If !Empty(cB1_CONTA)
			ofwEAIObj:setProp("AccountantAccountCode", 			RTrim(cB1_CONTA)	)
		EndIf
		If !Empty(cB1_SEGUM)
			ofwEAIObj:setProp("SecondUnitOfMeasureCode", 		RTrim(cB1_SEGUM) )
			ofwEAIObj:setProp("SecondUnitOfMeasureInternalId", 	IntUndExt(/*cEmpresa*/, /*cFilial*/, cB1_SEGUM)[2] )
		EndIf

		ofwEAIObj:setProp("MultiplicationFactorValue", 			cValToChar(nB1_CONV), cValToChar(1 / nB1_CONV)	)	
		If lIntegPPI
			ofwEAIObj:setProp("MultipleLot", 					0	)
			ofwEAIObj:setProp("CostCenterCode", 				cB1_CC	)
			ofwEAIObj:setProp("PackingQuantity", 				cValToChar(nB1_QE)	)
		EndIf
		//Codigo Alternativo 
		If !Empty(cB1_ALTER)
			ofwEAIObj:setProp("AlternativeCode", {})
			ofwEAIObj:getPropValue("AlternativeCode")[1]:setProp("Code",        RTRIM(cB1_ALTER)	)
			ofwEAIObj:getPropValue("AlternativeCode")[1]:setProp("InternalId",  + cEmpAnt + '|' + RTrim(xFilial("SB1")) + '|' + RTrim(cB1_ALTER)  	)
			ofwEAIObj:getPropValue("AlternativeCode")[1]:setProp("Description", +  Posicione("SB1",1,xFilial("SB1")+cB1_ALTER,"B1_DESC")  )
		Endif
		//Tipo de Conversão da UM
		If !Empty(cB1_TIPCONV)
			ofwEAIObj:setProp("TypeUMConversion", {})
			ofwEAIObj:getPropValue("TypeUMConversion")[1]:setProp("type",        RTRIM(cB1_TIPCONV)	)
			ofwEAIObj:getPropValue("TypeUMConversion")[1]:setProp("Description", +  IIF(UPPER(cB1_TIPCONV) == 'M','Multiplicador',IIF(UPPER(cB1_TIPCONV) == 'D','DIVISOR',''))  )
		Endif
		aSLKArea := SLK->(GetArea())
		SLK->(DBSetOrder(2)) //LK_FILIAL+LK_CODIGO+LK_CODBAR
		If SLK->(DBSeek(xFilial("SLK")+SB1->B1_COD))
			If !Empty(SB1->B1_CODBAR)
				ofwEAIObj:setProp("ListOfBarCode")
				ofwEAIObj:setProp("ListOfBarCode", {})
				ofwEAIObj:getPropValue("ListOfBarCode")[nK]:setProp("BarCode")
				ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("Code", AllTrim(SB1->B1_CODBAR)	)
				ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("InternalId", cEmpAnt + '|' + RTrim(xFilial("SB1"))+ "|" + RTrim(SB1->B1_COD)	)

				nK:=nK+1

				While SLK->(!EOF()) .And. xFilial("SLK")+SB1->B1_COD == SLK->(LK_FILIAL+LK_CODIGO)
					ofwEAIObj:setProp("ListOfBarCode", {})

					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:setProp("BarCode")
					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("Code",	AllTrim(SLK->LK_CODBAR)	)
					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("InternalId",	cEmpAnt + '|' + RTrim(xFilial("SLK"))+ "|" + RTrim(SLK->LK_CODIGO)	)
					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("ItemQuantity",	AllTrim(Str(SLK->LK_QUANT))	)
				
					nK:=nK+1

					SLK->(DBSkip())
				End
			else
				ofwEAIObj:setProp("ListOfBarCode")
				
				While SLK->(!EOF()) .And. xFilial("SLK")+SB1->B1_COD == SLK->(LK_FILIAL+LK_CODIGO)
					ofwEAIObj:setProp("ListOfBarCode", {})
					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:setProp("BarCode")
					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("Code",	AllTrim(SLK->LK_CODBAR)	)
					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("InternalId",	cEmpAnt + '|' + RTrim(xFilial("SLK"))+ "|" + RTrim(SLK->LK_CODIGO)	)
					ofwEAIObj:getPropValue("ListOfBarCode")[nK]:getPropValue("BarCode"):setProp("ItemQuantity",	AllTrim(Str(SLK->LK_QUANT))	)

					nK:=nK+1
					SLK->(DBSkip())
				End
			EndIf
		ElseIf !Empty(SB1->B1_CODBAR)
			ofwEAIObj:setProp("ListOfBarCode", {})
			ofwEAIObj:getPropValue("ListOfBarCode")[1]:setProp("BarCode")
			ofwEAIObj:getPropValue("ListOfBarCode")[1]:getPropValue("BarCode"):setProp("Code", AllTrim(SB1->B1_CODBAR)	)
			ofwEAIObj:getPropValue("ListOfBarCode")[1]:getPropValue("BarCode"):setProp("InternalId", cEmpAnt + '|' + RTrim(xFilial("SB1"))+ "|" + RTrim(SB1->B1_COD)	)
		EndIf
	RestArea(aSLKArea)
			
	dbSelectArea("SBZ") //Indicadores de Produtos
	SBZ->(dbSetOrder(1)) //BZ_FILIAL+BZ_COD
	aAreaAnt := GetArea()
	
	If GetNewPar("MV_SLMSBZ", 0) == 1 // Considera tabela SBZ ou não para dados do produto (0 - NAO ; 1 - SIM)
		If SBZ->(msSeek(PadR(cB1_FILIAL, TamSX3("BZ_FILIAL")[1]) + PadR(cB1_COD, TamSX3("BZ_COD")[1])))
			nPrecoCusto  := SBZ->BZ_UPRC
			nCustoPadrao := SBZ->BZ_CUSTD
			dBaseDate    := SBZ->BZ_UCALSTD
		Else
			nPrecoCusto  := nB1_UPRC
			nCustoPadrao := nB1_CUSTD
			dBaseDate    := cB1_UCALSTD
		EndIf
	Else
		nPrecoCusto  := nB1_UPRC
		nCustoPadrao := nB1_CUSTD
		dBaseDate    := cB1_UCALSTD
	EndIf
	
	RestArea(aAreaAnt)

	dbSelectArea("SB2") //Saldos Físico e Financeiro
	SB2->(dbSetOrder(1)) //B2_FILIAL+B2_COD+B2_LOCAL
	aAreaAnt := GetArea()
		
	If SB2->(msSeek(PadR(cB1_FILIAL, TamSX3("B2_FILIAL")[1]) + PadR(cB1_COD, TamSX3("B2_COD")[1]) + PadR(cB1_LOCPAD, TamSX3("B2_LOCAL")[1])))
		nCustoMedio := SB2->B2_CM1
	Else
		nCustoMedio := 0.0
	EndIf
	
	RestArea(aAreaAnt)

	ofwEAIObj:setProp("Values")
	ofwEAIObj:getPropValue("Values"):setProp("CostPrice", 			AllTrim(cValToChar(nPrecoCusto))	)
	ofwEAIObj:getPropValue("Values"):setProp("SalesPrice",			AllTrim(cValToChar(nB1_PRV1))		)	
	ofwEAIObj:getPropValue("Values"):setProp("AverageCostPrice",	AllTrim(cValToChar(nCustoMedio))	)
	ofwEAIObj:getPropValue("Values"):setProp("StandardCostPrice",	AllTrim(cValToChar(nCustoPadrao))	)
	
	If !Empty(dBaseDate)
		ofwEAIObj:getPropValue("Values"):setProp("BaseDate",	SubStr(DToS(dBaseDate), 1, 4) + '-' + SubStr(DToS(dBaseDate), 5, 2) + '-' + SubStr(DToS(dBaseDate), 7, 2)	)
	EndIf
		
	dbSelectArea("SA7")
	SA7->(dbSetOrder(2)) // A7_FILIAL + A7_PRODUTO + A7_CLIENTE + A7_LOJA
	aAreaAnt := GetArea()
	
	If lItemInfo
		If SA7->(MsSeek(xFilial("SA7") + cB1_COD))		
		
			nK:=1
		
			While !SA7->(EOF()) .And. SA7->A7_PRODUTO == cB1_COD
				ofwEAIObj:setProp("ListOfCustomerItemInformation", {})
				ofwEAIObj:getPropValue("ListOfCustomerItemInformation")[nK]:setProp("CustomerItemInformation")
				ofwEAIObj:getPropValue("ListOfCustomerItemInformation")[nK]:getPropValue("CustomerItemInformation"):setProp("CustomerCode", SA7->A7_CLIENTE)
				ofwEAIObj:getPropValue("ListOfCustomerItemInformation")[nK]:getPropValue("CustomerItemInformation"):setProp("CustomerInternalId",	IntCliExt(/*Empresa*/, /*Filial*/, SA7->A7_CLIENTE, SA7->A7_LOJA)[2] )
				ofwEAIObj:getPropValue("ListOfCustomerItemInformation")[nK]:getPropValue("CustomerItemInformation"):setProp("CustomerItemCode",	SA7->A7_CODCLI )				
				ofwEAIObj:getPropValue("ListOfCustomerItemInformation")[nK]:getPropValue("CustomerItemInformation"):setProp("CustomerItemInternalId",	IntProExt(/*Empresa*/, /*Filial*/, SA7->A7_PRODUTO, /*Versão*/)[2] )
				nK:=nK+1
				
				SA7->(dbSkip())

			End
		EndIf
	EndIf
	
	//Categoria de produtos
	aCategory := ItemxCateg()
	If Len(aCategory) > 0
		cRet +=	'<>'
		ofwEAIObj:setProp("ListOfComercialFamilyItem")

		For nCount := 1 To Len(aCategory)
			ofwEAIObj:getPropValue("ListOfComercialFamilyItem"):setProp("ComercialFamilyItem",{})
			ofwEAIObj:getPropValue("ListOfComercialFamilyItem"):getPropValue("ComercialFamilyItem")[nCount]:setProp("ComercialFamilyCode",aCategory[nCount][3])
			ofwEAIObj:getPropValue("ListOfComercialFamilyItem"):getPropValue("ComercialFamilyItem")[nCount]:setProp("ComercialFamilyInternalId",cEmpAnt + '|' + RTrim(aCategory[nCount][2])+ "|" + RTrim(aCategory[nCount][3]) )
			ofwEAIObj:getPropValue("ListOfComercialFamilyItem"):getPropValue("ComercialFamilyItem")[nCount]:setProp("ComercialFamilyItem",aCategory[nCount][4] )
		Next nCount

	EndIf
		

	ofwEAIObj:setProp("ItemTitle", 					cB5_ECTITU)  
	ofwEAIObj:setProp("ItemDescription", 			cB5_ECDESCR 	)  
	ofwEAIObj:setProp("ItemFeaturesTechnical", 		cB5_ECCARAC	)  
	ofwEAIObj:setProp("ItemHeight", 				AllTrim(cValToChar(cB5_ECPROFU))	)  
	ofwEAIObj:setProp("ItemWidth", 					AllTrim(cValToChar(cB5_ECLARGU)))  
	ofwEAIObj:setProp("ItemLenght", 				AllTrim(cValToChar(cB5_ECCOMP))	)  
	ofwEAIObj:setProp("ItemDimensions", 			AllTrim(cValToChar(cB5_ECCUBAG))	)  
	ofwEAIObj:setProp("ItemStatus", 				cB5_ECFLAG	)  
	
	SB4->(DbSetOrder(1))

	If SB4->(DbSeek(xFilial("SB4")+SubStr(cB1_COD,1,nTamRef)))

		ofwEAIObj:setProp("GridInformation")
		ofwEAIObj:getPropValue("GridInformation"):setProp("GridCode", SB4->B4_COD)
		ofwEAIObj:getPropValue("GridInformation"):setProp("GridInternalId", cEmpAnt + '|' + RTrim(xFilial("SB4")) + '|' + SB4->B4_COD)

		If !ExistFunc("Lj900ARGrd")
			cVarName1					 := StaticCall(LOJA900A, Lj900ARGrd,  cMascara, cB1_COD,   1, 1, cB1_PRODPAI)
			cVarName2					 := StaticCall(LOJA900A, Lj900ARGrd,  cMascara, cB1_COD,  1, 2, cB1_PRODPAI)
			cVarValue1					:= StaticCall(LOJA900A, Lj900ARGrd,  cMascara, cB1_COD,  2, 1, cB1_PRODPAI)
			cVarValue2					:= StaticCall(LOJA900A, Lj900ARGrd,  cMascara, cB1_COD,  2, 2, cB1_PRODPAI)
		Else
			cVarName1					 := Lj900ARGrd(  cMascara, cB1_COD,   1, 1, cB1_PRODPAI, .T. )
			cVarName2					 := Lj900ARGrd( cMascara, cB1_COD,  1, 2, cB1_PRODPAI, .T. )
			cVarValue1					:= Lj900ARGrd(  cMascara, cB1_COD,  2, 1, cB1_PRODPAI, .T. )
			cVarValue2					:= Lj900ARGrd(  cMascara, cB1_COD,  2, 2, cB1_PRODPAI, .T. )
		
		EndIf
		If !Empty(cVarName1+cVarValue1)		
			//Variante 1
			ofwEAIObj:getPropValue("GridInformation"):setProp("ListOfGridVariants", {}) 
			ofwEAIObj:getPropValue("GridInformation"):getPropValue("ListOfGridVariants")[1]:setProp("GridVariant")
			ofwEAIObj:getPropValue("GridInformation"):getPropValue("ListOfGridVariants")[1]:getPropValue("GridVariant"):setProp("VariantName" , cVarName1)
			ofwEAIObj:getPropValue("GridInformation"):getPropValue("ListOfGridVariants")[1]:getPropValue("GridVariant"):setProp("VariantValue", cVarValue1)
				
			//Variante 2
			ofwEAIObj:getPropValue("GridInformation"):setProp("ListOfGridVariants", {}) 
			ofwEAIObj:getPropValue("GridInformation"):getPropValue("ListOfGridVariants")[2]:setProp("GridVariant")
			ofwEAIObj:getPropValue("GridInformation"):getPropValue("ListOfGridVariants")[2]:getPropValue("GridVariant"):setProp("VariantName" , cVarName2)
			ofwEAIObj:getPropValue("GridInformation"):getPropValue("ListOfGridVariants")[2]:getPropValue("GridVariant"):setProp("VariantValue", cVarValue2)
		Else
			ofwEAIObj:getPropValue("GridInformation"):setProp("ListOfGridVariants", {}) 
		EndIf
		
	EndIf
				
	If ExistBlock("MT010Jin")
		cJson := ExecBlock("MT010Jin",.F.,.F.)
		If !Empty(cJson)
			ofwEAIObj:loadJson(cJson)
		Endif
	EndIf	

	FWRestRows( aSaveLine ) 				// Restaura ambiente     
	RestArea(aAreaAnt)
EndIf


Return {lRet,ofwEAIObj}
