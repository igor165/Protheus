#INCLUDE "FATA050.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "CRMDEF.CH" 

Static lCopia := .F.

//-------------------------------------------------------------------
/*/{Protheus.doc} FATA050
Cadastro de Metas de Venda. 

@sample 	FATA050( xRotAuto, nOpc, cFilDef, aAddFil )

@param		xRotAuto - Vetor com campos da enchoice utilizado em ExecAuto 
@param		nOpc	 - Opcao da execauto selecionada:3-Inclui,4-Altera,etc

@param 		cFilDef		, caracter	, Filtro padrão para criação do browse
@param 		aAddFil		, array		, Lista de filtros relacionados. 
@param 		cVDefault	, caracter	, Visão padrão. 

@return 	Nenhum

@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//-------------------------------------------------------------------
Function FatA050( aAutoCab,aAutoItem, nOpc, cFilDef, aAddFil, cVDefault )
	Local aAutoRot		:= {}
	Local aPDFields		:= {"A3_NOME"}
	
	Default aAutoCab	:= {}
	Default aAutoItem	:= {}
	Default aAddFil   	:= {}
	Default nOpc		:= 3
	Default cFilDef   	:= ""
	Default cVDefault 	:= ""
	
	
	Private cCadastro := STR0001  //"Meta de Venda"
	Private aRotina   := MenuDef()
	   
	If !Empty(aAutoCab)
		Aadd( aAutoRot, { "SCTCAB", aAutoCab	} )
		Aadd( aAutoRot, { "SCTGRID", aAutoItem	} )
		FWMVCRotAuto( ModelDef(), "SCT", nOpc, aAutoRot) 
	Else
		//Inicializa variaveis com lista de campos que devem ser ofuscados de acordo com usuario.
		FATPDLoad(Nil,Nil,aPDFields)    
		
		//-------------------------------
		// Browse Metas de Venda.  
		//-------------------------------
		BrowseDef( /*oMBrowse*/, cFilDef, aAddFil, cVDefault)
		
		//Finaliza o gerenciamento dos campos com proteção de dados.
		FATPDUnLoad()
	Endif
Return(.T.)  

//------------------------------------------------------------------------------
/*/{Protheus.doc} BrowseDef

Browse de Cadastro de Metas de Venda.  

@sample	BrowseDef( oMBrowse, cFilDef, aAddFil, cVDefault) 

@param		oMBrowse	, Objeto	, Browse criado pelo Widget da Area de Trabalho.
			cFilDef	, Caracter	, Filtro padrao.
			aAddFil	, Array		, Filtros relacionados.
			cVDefault	, Caracter , Visao padrao.
			
@return	oMBrowse	, Objeto	, Retorna o objeto FWMBrowse.

@author	Anderson Silva
@since		05/12/2015
@version	P12
/*/
//------------------------------------------------------------------------------
Static Function BrowseDef( oMBrowse, cFilDef, aAddFil, cVDefault)

Local lWidget 		:= .F.
Local oTableAtt   	:= {}
Local nX          	:= 0
Local nScan       	:= 0

Default oMBrowse	:= Nil
Default cFilDef		:= ""
Default aAddFil		:= {}
Default cVDefault	:= ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cria o Browse ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty( oMBrowse )
	oMBrowse := FWMBrowse():New()
	oMBrowse:SetAlias('SCT')
Else
	lWidget := .T.
EndIf

oMBrowse:SetCanSaveArea(.T.) 

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Filtro Default do Browse                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty( cFilDef )
	oMBrowse:SetFilterDefault( cFilDef )
EndIf
	
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Filtros adicionais do Browse                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nX := 1 To Len( aAddFil )
	oMBrowse:DeleteFilter( aAddFil[nX][ADDFIL_ID] )
	oMBrowse:AddFilter( aAddFil[nX][ADDFIL_TITULO]	,;
					      aAddFil[nX][ADDFIL_EXPR]		,;
					      aAddFil[nX][ADDFIL_NOCHECK]	,;
					      aAddFil[nX][ADDFIL_SELECTED]	,; 
					      aAddFil[nX][ADDFIL_ALIAS]		,;
					      aAddFil[nX][ADDFIL_FILASK]	,;
					      aAddFil[nX][ADDFIL_FILPARSER],;
					      aAddFil[nX][ADDFIL_ID] )		 
	oMBrowse:ExecuteFilter()	
Next nX		

oMBrowse:SetDescription(STR0001)  //"Meta de Venda"

If !lWidget 
			  
	//Cria visoes e graficos padrões
	oTableAtt := TableAttDef()
	oMBrowse:SetAttach( .T. ) //Habilita as visões do Browse				
	oMBrowse:SetViewsDefault(oTableAtt:aViews)
	
	// selecionando a visão inicial 
	If !Empty( cVDefault ) 
		nScan := aScan( oTableAtt:aViews, { |x| x:cID == cVDefault } )
		If nScan > 0 
			oMBrowse:SetIDViewDefault( oTableAtt:aViews[nScan]:cID )
		EndIf
	EndIf
	
	// se for diferente do modulo CRM, então abre a tela com o grafico fechado
	If nModulo <> 73
		oMBrowse:SetOpenChart( .F. )
	EndIf
	
	oMBrowse:SetTotalDefault('CT_DOC','COUNT',STR0016) // 'Total de Registros'
	oMBrowse:Activate()
	
EndIf

Return Nil

//------------------------------------------------------------------------------
/*/{Protheus.doc} TableAttDef

Cria as visões e gráficos padrões de Metas de Venda.
@param		Nenhum

@return	ExpA - Array de Objetos com as Visoes.

@author	Cristiane Nishizaka
@since		02/06/2014
@version	12
/*/
//------------------------------------------------------------------------------
Static Function TableAttDef()

Local oTableAtt		:= FWTableAtt():New()
Local oDSMyMetas	:= Nil // Minhas Metas Ativas
Local aUserPaper	:= {}
Local cCodUser 		:= If(SuperGetMv("MV_CRMUAZS",, .F.), CRMXCodUser(), RetCodUsr())  
Local cSeqPaper		:= " "		

// Tabela Metas de Venda
oTableAtt:SetAlias("SCT")

If ( IsInCallStack("CRMA480") .Or. IsInCallStack("CRMA290") .Or. IsInCallStack("CRMA290A") .Or. IsInCallStack( "CRM290CWGT" ) )
	aUserPaper := CRMXGetPaper()
	
	If !Empty( aUserPaper )
		cCodUser 	:= aUserPaper[USER_PAPER_CODUSR]
		cSeqPaper	:= aUserPaper[USER_PAPER_SEQUEN] + aUserPaper[USER_PAPER_CODPAPER]			
	EndIf

	// Minhas Metas Ativas
	oDSMyMetas := FWDSView():New()
	oDSMyMetas:SetName(STR0017)  //"Minhas Metas Ativas"
	oDSMyMetas:SetID("DSMyMetas")  
	oDSMyMetas:SetOrder(1) // CT_FILIAL+CT_DOC+CT_SEQUEN
	oDSMyMetas:SetCollumns({	"CT_DOC"		,"CT_SEQUEN"	,"CT_DESCRI"	,"CT_DATA"		,"CT_REGIAO"	,;
								"CT_CATEGO" 	,"CT_TIPO"		,"CT_GRUPO"	,"CT_PRODUTO"	,"CT_QUANT"	,;
								"CT_VALOR"		})
	oDSMyMetas:SetPublic(.T.)
	oDSMyMetas:AddFilterRelation( "AO4", "AO4_CHVREG", "CT_FILIAL+CT_DOC+CT_SEQUEN" )
	If !Empty( aUserPaper )
		oDSMyMetas:AddFilter(STR0017, "AO4_ENTIDA == 'SCT' .And. AO4_CODUSR == '" + cCodUser + "' .And. ( AO4_USRPAP == '" + cSeqPaper + "' .Or. AO4_USRPAP == ' ' ) .And. AO4_CTRLTT == .T.","AO4") //"Minhas Metas Ativas" 
	Else
		oDSMyMetas:AddFilter(STR0017, "AO4_ENTIDA='SCT' .AND. AO4_CODUSR == '"+cCodUser+"' .AND. AO4_CTRLTT == .T.","AO4") //"Minhas Metas Ativas"
	EndIf 
	oDSMyMetas:AddFilter(STR0017, "CT_MSBLQL == '2'")  //"Minhas Metas Ativas"
	oTableAtt:AddView(oDSMyMetas)
	
EndIf
		
Return(oTableAtt)

//-------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
Model de Metas de Venda. 

@param 		Nenhum

@return 	oModel, objeto, Model Metas de Vendas

@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//-------------------------------------------------------------------
Static Function ModelDef()

Local oModel	:= Nil
Local oStruCab	:= FWFormStruct(1,'SCT',{|cCampo| AllTrim(cCampo)+"|" $ "CT_DOC|CT_DESCRI|"})
Local oStruGrid	:= FWFormStruct(1,'SCT')

Local bActivate	:= {|oMdl|FatA050Act(oMdl)}
Local bPosValid := {|oMdl|FatA050Pos(oMdl)}
Local bCommit	:= {|oMdl|FatA050Cmt(oMdl)}
Local bLinePost := {||Ft050LinOk()}

oStruGrid:RemoveField("CT_DOC")
oStruGrid:RemoveField("CT_DESCRI")

oModel := MPFormModel():New('FATA050',/*bPreValidacao*/,bPosValid,bCommit,/*bCancel*/)
oModel:AddFields("SCTCAB",/*cOwner*/,oStruCab,/*bPreValidacao*/,/*bPosValid*/,/*bCarga*/)
oModel:AddGrid("SCTGRID","SCTCAB",oStruGrid,/*bLinePre*/,bLinePost,/*bPreVal*/,/*bPosVal*/)
oModel:SetRelation("SCTGRID",{{"CT_FILIAL",'xFilial("SCT")'},{"CT_DOC","CT_DOC"}},SCT->(IndexKey(1)))
oModel:SetPrimaryKey({"CT_FILIAL","CT_DOC","CT_SEQUEN"})
oModel:GetModel("SCTGRID"):SetMaxLine(9999)
oModel:GetModel("SCTGRID"):SetUseOldGrid(.T.)    
oModel:SetActivate(bActivate)

// Adicao do modelo da AO4 para evitar a validacao indevida do relacionamento SX9 antes da funcao CRMA200PAut
AO4GdModel("SCTCAB", oModel, "SCT" )
AO4GdModel("SCTGRID", oModel, "SCT" )

oModel:SetDescription(STR0001)                                                 
     
                                    
Return(oModel)

//-------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
View de Metas de Venda. 

@param 		Nenhum

@return 	oView, objeto, View Metas de Vendas

@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//-------------------------------------------------------------------
Static Function ViewDef()

Local oView			:= Nil
Local oModel		:= FWLoadModel('FATA050')
Local oStruCab		:= FWFormStruct(2,'SCT',{|cCampo| AllTrim(cCampo)+"|" $ "CT_FILIAL|CT_DOC|CT_DESCRI|"})
Local oStruGrid		:= FWFormStruct(2,'SCT')
Local aCabExcel		:= Ft050Cab()  				// Cria o cabecalho para utilizacao no Microsoft Excel
Local aUsrBut		:= {}     						// recebe o ponto de entrada
Local aButtons		:= {}                     	// botoes da enchoicebar
Local nAuxFor		:= 0                       	// auxiliar do For , contador da Array aUsrBut
Local lFat050But	:= ExistBlock("FAT050BUT") 	// P.E. para incluir botoes do usuario na enchoicebar
Local oMdlCab		:= oModel:GetModel('SCTCAB')
Local oMdlGrid		:= oModel:GetModel('SCTGRID')

oStruGrid:RemoveField("CT_DOC")
oStruGrid:RemoveField("CT_DESCRI")

oView := FWFormView():New()
oView:SetModel(oModel)

oView:AddField("VIEW_CAB",oStruCab,"SCTCAB")
oView:AddGrid("VIEW_GRID",oStruGrid,"SCTGRID")
oView:AddIncrementField("VIEW_GRID","CT_SEQUEN")

oView:CreateHorizontalBox("SUPERIOR",13)
oView:CreateHorizontalBox("INFERIOR",87)

oView:SetOwnerView("VIEW_CAB","SUPERIOR")
oView:SetOwnerView("VIEW_GRID","INFERIOR")

If GetRemoteType() == 1
	oView:AddUserButton(PmsBExcel()[3],PmsBExcel()[1],{|| DlgToExcel({ {"CABECALHO",oMdlCab:GetDescription(),{aCabExcel[1][1],aCabExcel[2][1]},{oMdlCab:GetValue('CT_DOC'),oMdlCab:GetValue('CT_DESCRI')}},{"GETDADOS","",oMdlGrid:aHeader,oMdlGrid:aCols}})},PmsBExcel()[2])
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada para incluir botoes do usuario na barra, ³
//³ de ferramentas do formulario na copia das metas de venda. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If lFat050But .And. lCopia
	aUsrBut := ExecBlock("FAT050BUT",.F.,.F.)
	If (ValType(aUsrBut) == "A")
		For nAuxFor := 1 To Len(aUsrBut)
			oView:AddUserButton(aUsrBut[nAuxFor][3],aUsrBut[nAuxFor][1],aUsrBut[nAuxFor][2],aUsrBut[nAuxFor][4])
		Next nAuxFor
	EndIf
	lCopia := .F.
EndIf

Return(oView)

//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
MenuDef Metas de Venda. 

@param 		Nenhum

@return 	aRotina, array, Array com lista de aRotina
@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//-------------------------------------------------------------------
Static Function MenuDef()
Local aRotina 	:={}
Local aUsrBut 	:={}
Local nX 		:= 0

If IsInCallStack("FATA320") 
	aPermissoes := FT060Permi(__cUserId, "ACA_ACMETA")
Else
	aPermissoes := {.T.,.T.,.T.,.T.}
EndIf

ADD OPTION aRotina TITLE STR0002 ACTION 'PesqBrw' 			OPERATION 1	ACCESS 0

If aPermissoes[4]
	ADD OPTION aRotina TITLE STR0003 ACTION 'VIEWDEF.FATA050'	OPERATION 2	ACCESS 0
EndIf

If aPermissoes[1]
	ADD OPTION aRotina TITLE STR0004 ACTION 'VIEWDEF.FATA050'	OPERATION 3	ACCESS 0
EndIf

If aPermissoes[2]
	ADD OPTION aRotina TITLE STR0005 ACTION 'VIEWDEF.FATA050'	OPERATION 4	ACCESS 0
EndIf

If aPermissoes[3]
	ADD OPTION aRotina TITLE STR0006 ACTION 'VIEWDEF.FATA050'	OPERATION 5	ACCESS 0
EndIf

	ADD OPTION aRotina TITLE STR0008 ACTION 'Ft050Cons'			OPERATION 6	ACCESS 0 //"Consulta"
	ADD OPTION aRotina TITLE STR0007 ACTION 'Ft050Copia'			OPERATION 7	ACCESS 0 //"Copia"
	
If nModulo == 73
	ADD OPTION aRotina TITLE STR0015 ACTION "CRMA200('SCT')"			OPERATION 7	ACCESS 0 // "Privilégios"
EndIf

If ExistBlock("FT050MNU")
	aUsrBut := ExecBlock("FT050MNU",.F.,.F.)
	For nX := 1 To Len(aUsrBut)
		ADD OPTION aRotina TITLE aUsrBut[nX][1] ACTION aUsrBut[nX][2] OPERATION aUsrBut[nX][4] ACCESS 0
	Next nX
EndIf

aRotina := CRMXINCROT( "SCT", aRotina )

Return(aRotina)

//-------------------------------------------------------------------
/*/{Protheus.doc} FATA050Act(oMdl)
Bloco executado ao iniciar o formulario MVC para inclusao, alteracao, 
exclusao e visualizacao.      

@param 		oMdl, objeto, Modelo de dados.

@return 	lRet, logico, Verdadeiro
@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//-------------------------------------------------------------------
Static Function FatA050Act(oMdl)

Local nOperation	:= oMdl:GetOperation()
Local oMdlGrid		:= oMdl:GetModel('SCTGRID')
Local nX 			:= 0
Local lRet 			:= .T.
Local cSequence		:= ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se a operacao for copia ajusta a sequencia, ³
//³da linha.         						   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOperation == 3 .And. lCopia
	cSequence := StrZero(0,TamSx3("CT_SEQUEN")[1])
	For nX:= 1 to oMdlGrid:GetQtdLine()
		oMdlGrid:GoLine(nX)
		cSequence := Soma1(cSequence)
		oMdlGrid:SetValue("CT_SEQUEN",cSequence,.T.)
	Next nX
   	lCopia := .F.
EndIf

Return(lRet)            

//-------------------------------------------------------------------
/*/{Protheus.doc} FATA050Pos(oMdl)
Pos validacao do browse MVC, executada antes da gravacao,
permitindo validar o formulario.    

@param 		oMdl, objeto, Modelo de dados.

@return 	lRet, logico, Verdadeiro / Falso
@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Static Function FatA050Pos(oMdl)
Local lRet := .T.

If ExistBlock("FT050TOK")
	lRet := ExecBlock("FT050TOK",.F.,.F.,{oMdl})
EndIf

Return(lRet)

//-------------------------------------------------------------------
/*/{Protheus.doc} FATA050CMT(oMdl)
Bloco executado na gravacao dos dados do formulario MVC.

@param 		oModel		, objeto, Modelo de dados.

@return 	lRetorno	, logico, Verdadeiro
@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Static Function FATA050CMT(oModel)

Local aArea			:= GetArea()                             
Local aAreaAO4		:= AO4->(GetArea())
Local nOperation	:= oModel:GetOperation()
Local lRetorno		:= .T.
Local bInTTS		:= {|oModel| FT050InTTS(oModel)}

//integracao com modulo de planejamento e controle orcamentario
Local lInt_Pco := (SuperGetMV("MV_PCOINTE",.F.,"2")=="1")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inicializa a gravacao dos lancamentos do SIGAPCO          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PcoIniLan("000155")

FWFormcommit(oModel,/*bBefore*/,/*bAfter*/,/*bAfterSTTS*/,bInTTS)  

If nOperation == MODEL_OPERATION_INSERT .OR. nOperation == MODEL_OPERATION_DELETE 
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿  
	//³Grava os lancamentos para integracao com modulo SIGAPCO³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lInt_Pco
		PcoDetLan("000155","01","FATA050")
	EndIf
Endif
 
If nOperation == MODEL_OPERATION_UPDATE
	Ft050GrvDesc(oModel)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Grava os lancamentos para integracao com modulo SIGAPCO³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lInt_Pco
		PcoDetLan("000155","01","FATA050")
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Finaliza a gravacao dos lancamentos do SIGAPCO            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PcoFinLan("000155") 

RestArea( aAreaAO4 ) 
RestArea( aArea )

Return(lRetorno)

//------------------------------------------------------------------------------
/*/	{Protheus.doc} FT050InTTS(oModel)

Bloco de transacao durante o commit do model.

@param		oModel		,objeto, Modelo de dados

@return	lRetorno	,logico, Verdadeiro

@author	Anderson Silva
@since		06/08/2014
@version	12               
/*/
//------------------------------------------------------------------------------
Static Function FT050InTTS(oModel)

Local nOperation	:= oModel:GetOperation()
Local oMdlCab		:= oModel:GetModel("SCTCAB")
Local oMdlGrid		:= oModel:GetModel("SCTGRID")
Local cDoc			:= oMdlCab:GetValue("CT_DOC")
Local cFilAO4		:= xFilial("AO4")
Local cFilSCT		:= xFilial("SCT")
Local cChave    	:= ""
Local nX			:= 0
Local nLenGrid		:= 0		
Local aAutoAO4  	:= {}
		
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Adiciona ou Remove o privilegios deste registro.  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
AO4->(DBSetOrder(1))  
nLenGrid := oMdlGrid:Length() 
For nX := 1 To nLenGrid
	
	oMdlGrid:GoLine(nX)  
	cChave := PadR(cFilSCT+cDoc+oMdlGrid:GetValue("CT_SEQUEN"),TAMSX3("AO4_CHVREG")[1])

	If nOperation == MODEL_OPERATION_UPDATE
		If oMdlGrid:IsInserted() .Or. !AO4->(DBSeek(cFilAO4+"SCT"+cChave))
			nOperation := MODEL_OPERATION_INSERT
		ElseIf oMdlGrid:IsDeleted() 
			nOperation := MODEL_OPERATION_DELETE
		Else
			//Privilegio já gravado para linha. 
			Loop
		EndIf
	EndIf 

	aAutoAO4 := CRMA200PAut(nOperation,"SCT",cChave,/*cCodUsr*/,/*aPermissoes*/,/*aNvlEstrut*/,/*cCodUsrCom*/,/*dDataVld*/)    
	CRMA200Auto(aAutoAO4[1],aAutoAO4[2],nOperation)  
	nOperation	:= oModel:GetOperation()   
	  
Next nX  

Return Nil 

//-------------------------------------------------------------------
/*/{Protheus.doc} Ft050Copia()
Copia do Cadastro de Metas de Venda.  

@param 		Nenhum

@return 	Nenhum
@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Function Ft050Copia()

Local cTitulo		:= STR0007
Local nOperation 	:= 9 // Define o modo de operacao como copia

lCopia := .T.

FWExecView(cTitulo,'VIEWDEF.FATA050',nOperation,/*oDlg*/,/*bCloseOnOk*/,/*bOk*/,/*nPercReducao*/)

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Ft050GrvDesc
Grava a descricao do cabecalho no grid.   

@param 		oMdl ,objeto, Modelo de dados

@return 	Nenhum
@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Static Function Ft050GrvDesc(oMdl)

Local oMdlCab := oMdl:GetModel('SCTCAB')
Local oMdlGrid := oMdl:GetModel('SCTGRID')
Local nX := 0

SCT->( DBSetOrder( 1 ) )

For nX:= 1 to oMdlGrid:GetQtdLine()
	oMdlGrid:GoLine(nX)
	If SCT->( DbSeek(xFilial("SCT")+oMdlCab:GetValue("CT_DOC")+oMdlGrid:GetValue("CT_SEQUEN")) )
		RecLock("SCT",.F.)
		SCT->CT_DESCRI := oMdlCab:GetValue("CT_DESCRI")
		MsUnlock()
	Endif
Next nX

Return Nil

//-------------------------------------------------------------------
/*/{Protheus.doc} Ft050Cab()
Criacao do cabecalho para integracao com Microsoft Excel. 

@param 		Nenhum

@return 	Nenhum

@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Static Function Ft050Cab()

Local aCabec := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montagem do Array do Cabecalho                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SX3->( DBSetOrder( 2 ) )
SX3->( DBSeek("CT_DOC") )
aAdd(aCabec,{OemToAnsi(X3Titulo()),SX3->X3_PICTURE,Nil})
SX3->( DBSeek("CT_DESCRI") )
aAdd(aCabec,{OemToAnsi(X3Titulo()),SX3->X3_PICTURE,Nil})

Return(aCabec)

//-------------------------------------------------------------------
/*/{Protheus.doc} Ft050LinOk
Validação da linha

@param 		Nenhum

@return 	Nenhum

@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Static Function Ft050LinOk()

Local oMdl			:= FWModelActive()
Local oMdlGrid		:= oMdl:GetModel('SCTGRID')
Local nPMoeda		:= oMdlGrid:GetValue('CT_MOEDA') // moeda
Local nPValor		:= oMdlGrid:GetValue('CT_VALOR') // valor
Local nPQuant		:= oMdlGrid:GetValue('CT_QUANT') // quantidade
Local lRet			:= .T.

If !oMdlGrid:IsDeleted()
	Do Case
		Case nPMoeda == 0
			UserException('CT_MOEDA Must be Used !!!')
		Case nPValor == 0
			UserException('CT_VALOR Must be Used !!!')
		Case nPQuant == 0
			UserException('CT_QUANT Must be Used !!!')
	EndCase
	
	If Empty(nPMoeda) .Or. Empty(nPValor) .Or. Empty(nPQuant)
		Help(" ",1,"FT050LOK01")
		lRet := .F.
	EndIf
EndIf

If ExistBlock("FT050LOK")
	lRet := ExecBlock("FT050LOK",.F.,.F.)
EndIf

Return(lRet)

//-------------------------------------------------------------------
/*/{Protheus.doc} Ft050Cons
Consulta as Metas de Venda por data. 

@param 		cAlias ,caracter , Alias SCT
@param 		nReg 	,numerico , Numero do RecNo
@param 		nOpc 	,numerico , Numero da operacao

@return 	Nenhum

@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Function Ft050Cons()
	Processa({|| Ft050PCons()  },STR0018,"",.T.) //"Processando as metas de venda..."
	FATPDLogUser('FT050CONS')
Return Nil

Static Function Ft050PCons()

Local aArea     	:= GetArea()        	// Salva ambiente anterior
Local cCadastro		:= STR0001              // Meta de Venda
Local aSizeAut  	:= MsAdvSize( .F. )    // Array para redimensionamento da tela
Local aObjects  	:= {}					// Array para redimensionamento da tela
Local aCampos   	:= {}                   // campos da a tela
Local aStru     	:= {}                   // Estrutura da Query
Local aSoma     	:= {}                   // soma dos valores
Local aDesc     	:= {}   				// descrição dos elementos no Tree
Local cDesc     	:= ""                  // descricao
Local cChave    	:= AllTrim( &( SuperGetMV("MV_FTMETA",.F.,"" ) )  )
Local cCampo    	:= ""                  // campo da tabela
Local cConteudo 	:= ""                  // conteudo do campo
Local cSeek     	:= ""                  // chave da pesquisa
Local cLast     	:= ""
Local cTitulo   	:= ""                  // titulo
Local cChar     	:= ""
Local cQuery    	:= ""                  // Query
Local cAliasTmp 	:= GetNextAlias()      // Alias
Local cQuebra1  	:= ""
Local cQuebra2 		:= ""
Local dData     	:= SCT->CT_DATA        // data
Local lData     	:= .F.
Local nX        	:= 0                   // auxiliar
Local nY        	:= 0                   // auxiliar
Local nPSoma    	:= 0
Local oDlg			:= Nil                 // tela
Local oTree			:= Nil                 // estrutura da  tela
Local oSay1			:= Nil             	  // objeto say1
Local oSay2			:= Nil                 // objeto say2  
Local nRecord		:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define as descricoes para cada tipo de elemento no Tree                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aAdd( aDesc, { "CT_REGIAO" , { |x| Posicione( "SX5", 1, xFilial( "SX5" ) + "A2" + x, "X5_DESCRI" ) } } )
aAdd( aDesc, { "CT_TIPO"   , { |x| Posicione( "SX5", 1, xFilial( "SX5" ) + "02" + x, "X5_DESCRI" ) } } )
aAdd( aDesc, { "CT_GRUPO"  , { |x| Posicione( "SBM", 1, xFilial( "SBM" ) + x, "BM_DESC" ) } } )
aAdd( aDesc, { "CT_PRODUTO", { |x| Posicione( "SB1", 1, xFilial( "SB1" ) + x, "B1_DESC" ) } } )
aAdd( aDesc, { "CT_VEND"   , { |x| FATPDObfuscate(Posicione( "SA3", 1, xFilial( "SA3" ) + x, "A3_NOME" ),"A3_NOME") } } )

SCT->( DBSetOrder( 1 ) )

If Empty( cChave )
	cChave	:= SCT->( IndexKey() )   // chave da tabela
EndIf

cOrderBy := SqlOrder( cChave )

For nX := 1 To Len(cChave)+1
	cChar  := SubStr(cChave,1,1)
	cChave := SubStr(cChave,2)
	If cChar <> "+" .And. !Empty(cChar)
		cCampo += cChar
	Else
		If ( !Empty(cCampo) )
			aAdd(aCampos,cCampo)
		EndIf
		cCampo := ""
	EndIf
Next nX

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calculo automatico de dimensoes dos objetos                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
AAdd( aObjects, { 100, 100, .t., .t. } )
AAdd( aObjects, { 080, 100, .f., .t. } )

aInfo := { aSizeAut[1], aSizeAut[2], aSizeAut[3], aSizeAut[4], 3, 3 }
aObj  := MsObjSize( aInfo, aObjects, , .T. )

DEFINE MSDIALOG oDlg FROM aSizeAut[7],00 TO aSizeAut[6],aSizeAut[5] TITLE cCadastro OF oMainWnd PIXEL

oTree := DbTree():New( aObj[1,1], aObj[1,2], aObj[1,3], aObj[1,4],oDlg,,,.T.)

aStru := SCT->(dbStruct())

cQuery := "SELECT * "
cQuery += "FROM "+RetSqlName("SCT")+" SCT "
cQuery += "WHERE "
cQuery += "SCT.CT_FILIAL='"+xFilial("SCT")+"' AND "
cQuery += "SCT.CT_DATA='"+Dtos(dData)+"' AND "
cQuery += "SCT.D_E_L_E_T_=' ' "
cQuery += "ORDER BY " +  cOrderBy 

cQuery := ChangeQuery( cQuery )

DBUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasTmp,.T.,.T.)

//-------------------------------------------------------------------
// Identifica a quantidade de registro no alias temporário.    
//-------------------------------------------------------------------
COUNT TO nRecord

//-------------------------------------------------------------------
// Posiciona no primeiro registro.  
//-------------------------------------------------------------------	
(cAliasTmp)->( DBGoTop() )

ProcRegua( nRecord ) 

For nX := 1 To Len(aStru)
	If ( aStru[nX][2] <> "C" )
		TcSetField(cAliasTmp,aStru[nX][1],aStru[nX][2],aStru[nX][3],aStru[nX][4])
	EndIf
Next nX

cQuebra1 := ""

For nX := 1 To Len(aCampos)
	cQuebra1 += "+"+aCampos[nX]
Next nX

cQuebra1 := SubStr(cQuebra1,2)

While ( (cAliasTmp)->( !Eof() ) .And. (cAliasTmp)->CT_FILIAL == xFilial("SCT") .And. (cAliasTmp)->CT_DATA == dData )
		
	IncProc()
	
	cQuebra2 := &cQuebra1
	nY    := 0
	cLast := ""
	For nX := 1 To Len(aCampos)
		cCampo    := AllTrim( aCampos[nX] )
		cConteudo := (cAliasTmp)->&(cCampo)
		cDesc     := ""
		nY        += Len(cConteudo)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Obtem as descricoes para cada tipo de elemento no Tree                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty( nScan := AScan( aDesc, { |x| x[1] == AllTrim( cCampo ) } ) )
			cDesc := " - " + AllTrim( Capital( Eval( aDesc[ nScan, 2 ], cConteudo ) ) )
		EndIf
			
		If ( nX > 1 )
			cLast     += &(aCampos[nX-1])
		EndIf
		lData := .F.
		
		If "DTOS" $ Upper(cCampo)
			cCampo := SubStr(cCampo,6,Len(cCampo)-6)
			lData  := .T.
		EndIf
		
		cTitulo := PadR(AllTrim(RetTitle(cCampo))+": "+If(lData, DToC( SToD( cConteudo ) ) , AllTrim( cConteudo ) ) + cDesc, 120 )
		cSeek   := PadR(SubStr(cQuebra2,1,nY),Len(cQuebra2))
		
		If !oTree:TreeSeek(cSeek)
			oTree:TreeSeek(cLast)
			oTree:AddItem(cTitulo,cSeek,"FOLDER5","FOLDER6",,,If(nX==1,1,2))
			cLast := cSeek
			If ( !Empty(cConteudo) )
				aAdd(aSoma,{cSeek,(cAliasTmp)->CT_QUANT,(cAliasTmp)->CT_VALOR})
			EndIf
		Else
			If ( !Empty(cConteudo) )
				nPSoma := aScan(aSoma,{|x| x[1]==cSeek })
				aSoma[nPSoma][2] += (cAliasTmp)->CT_QUANT
				aSoma[nPSoma][3] += (cAliasTmp)->CT_VALOR
			EndIf
		EndIf
	Next nX
	(cAliasTmp)->( DBSkip() )
End

@ aObj[2,1], aObj[2,2] TO aObj[2,3], aObj[2,4] PROMPT OemToAnsi(STR0009) PIXEL //"Hierarquia"

nLin := aObj[2,1] +  8
nCol := aObj[2,2] +  7

@ nLin,nCol          SAY RetTitle("CT_QUANT") SIZE 040,008 OF oDlg PIXEL
@ nLin + 10,nCol + 6 SAY oSay1 PROMPT 0 SIZE 050,008 OF oDlg PIXEL
@ nLin + 30,nCol SAY RetTitle("CT_VALOR") SIZE 040,008 OF oDlg PIXEL
@ nLin + 40,nCol + 6 SAY oSay2 PROMPT 0 SIZE 050,008 OF oDlg PIXEL

oTree:bChange := {|| Ft050Msg(oTree,oSay1,oSay2,aSoma) }

@ aObj[2,3] - 17,aObj[2,4] - 33 BUTTON STR0010 ACTION ( oDlg:End() ) OF oDlg PIXEL SIZE 30,10 //"Sair"
@ aObj[2,3] - 17,aObj[2,4] - 75 BUTTON STR0011 ACTION ( FtToExcel(aCampos,aSoma) ) OF oDlg PIXEL SIZE 30,10 //"Excel"

ACTIVATE MSDIALOG oDlg ON INIT Eval(oTree:bChange)

RestArea(aArea)
 
Return(.T.)

//-------------------------------------------------------------------
/*/{Protheus.doc} Ft050Msg 
Demonstra as mensagens do rodape da funcao de consulta  

@param 		oTree , objeto , Objeto Tree
@param 		oSay1 , objeto , Objeto Say 1 
@param 		oSay2 , objeto , Objeto Say 2 
@param 		aSoma , array	 , Array com os totais a serem exibidos 

@return 	Nenhum

@author  	Faturamento
@version	P12
@since   	11/11/2010 
/*/
//------------------------------------------------------------------
Static Function Ft050Msg(oTree,oSay1,oSay2,aSoma)

Local nPSoma := 0
Local cSeek  := oTree:GetCargo()

nPSoma := aScan(aSoma,{|x| x[1]==cSeek })

If nPSoma > 0 
	oSay1:SetText(AllTRim( TransForm(aSoma[nPSoma,2],PesqPict("SCT","CT_QUANT",18))))
	oSay2:SetText(AllTRim( TransForm(aSoma[nPSoma,3],PesqPict("SCT","CT_VALOR",18))))
EndIf

Return(.T.)

//-------------------------------------------------------------------
/*/{Protheus.doc} FtToExcel
Exporta para o Excel

@param 		aCampos , array , Campos que serão utilizados como colunas no excel.
@param 		aDados 	 , array , Itens que serão exportados para excel

@return 	Nenhum

@author  	Faturamento
@version	P12
@since   	11/11/2010
/*/
//------------------------------------------------------------------
Static Function FtToExcel(aCampos,aDados)

Local aArea		:= GetArea()                 	// retorna ambiente anterior
Local aStruct   := {}                           // estrutura
Local cDirDocs  := MsDocPath()
Local cPath		:= AllTrim(GetTempPath())
Local nY		:= 0                            // auxiliar do for
Local nX        := 0                            // auxiliar do for
Local cBuffer   := ""                           // recebe as variaveis de valores
Local oExcelApp := Nil                          // recebe planilha do excell
Local nHandle   := 0
Local cArquivo  := CriaTrab(,.F.)+".CSV"        // arquivo
Local xValor    := Nil                          //  valor

If ApOleClient("MsExcel")
	For nX := 1 To Len(aCampos)
		aCampos[nX] := Upper(aCampos[nX])
		aCampos[nX] := StrTran(aCampos[nX],"DTOS(","")
		aCampos[nX] := StrTran(aCampos[nX],")","")
		dbSelectArea("SX3")
		dbSetOrder(2)
		If MsSeek(aCampos[nX])
			aadd(aStruct,{aCampos[nX],SX3->X3_TIPO,SX3->X3_TAMANHO,SX3->X3_DECIMAL})
		EndIf
	Next nX
	SX3->(dbSetOrder(1))
	If (nHandle := FCreate(cDirDocs + "\"+cArquivo)) > 0
		For nY := 1 To Len(aStruct)
			xValor := RetTitle(aStruct[nY][1])
			xValor := PadR(xValor,Max(aStruct[nY][3]+aStruct[nY][4],Len(xValor)))
			cBuffer += ToXlsFormat(xValor)
			cBuffer += ";"
		Next nY
		cBuffer += ToXlsFormat(RetTitle("CT_QUANT"))+";"
		cBuffer += ToXlsFormat(RetTitle("CT_VALOR"))+CRLF
		FWrite(nHandle, cBuffer)
		For nX := 1 To Len(aDados)
			cBuffer	:= ""
			cLinha := aDados[nX][1]
			For nY := 1 To Len(aStruct)
				xValor := SubStr(cLinha,1,aStruct[nY][3]+aStruct[nY][4])
				Do Case
					Case aStruct[nY][2]=="N"
						xValor := Val(xValor)
					Case aStruct[nY][2]=="D"
						xValor := Stod(xValor)
				EndCase
				cBuffer += ToXlsFormat(xValor)
				cBuffer += ";"
				cLinha := SubStr(cLinha,aStruct[nY][3]+aStruct[nY][4]+1)
			Next nY
			cBuffer += ToXlsFormat(aDados[nX][2])+";"
			cBuffer += ToXlsFormat(aDados[nX][3])+CRLF
			FWrite(nHandle, cBuffer)
		Next nX
		FClose(nHandle)
		CpyS2T(cDirDocs + "\" + cArquivo, cPath, .T.)
		
		oExcelApp := MsExcel():New()
		oExcelApp:WorkBooks:Open(cPath + cArquivo)
		oExcelApp:SetVisible(.T.)
	Else
		MsgStop(STR0012) //"Erro na criacao do arquivo na estacao local. Contate o administrador do sistema"
	EndIf
Else
	MsgStop(STR0013)	 //"Microsoft Excel nao instalado."
EndIf

RestArea(aArea)

Return
          
//-----------------------------------------------------------------------------------
/*/{Protheus.doc} FA050Clear
Preenche ou limpa os campos do grid da tabela SCT de acordo com a origem.

@param 		nType	 , numerico , Identificacao da origem(1-Produto, 2-Grupo, 3-Tipo)

@return 	Nenhum

@author  	Anderson Silva
@version	P12
@since   	20/10/2016
/*/
//----------------------------------------------------------------------------------
Function FA050Clear( nType ) 

Local oModel 	:= FWModelActive()                   
Local aArea  	:= GetArea()
Local aAreaSB1	:= SB1->( GetArea() )

If nType == 1                   
	SB1->( DBSetOrder( 1 ) )                                            
    If SB1->( DBSeek( xFilial("SB1") + M->CT_PRODUTO ) )
		oModel:LoadValue("SCTGRID","CT_GRUPO", SB1->B1_GRUPO )
		oModel:LoadValue("SCTGRID","CT_TIPO" , SB1->B1_TIPO  )
    EndIf   
ElseIf  nType == 2
	oModel:ClearField("SCTGRID","CT_PRODUTO")
	oModel:ClearField("SCTGRID","CT_TIPO")
ElseIf nType == 3
	oModel:ClearField("SCTGRID","CT_PRODUTO")
	oModel:ClearField("SCTGRID","CT_GRUPO")
EndIf

RestArea(aAreaSB1)
RestArea(aArea)

Return( .T. )


//-----------------------------------------------------------------------------------
/*/{Protheus.doc} FATPDLoad
    @description
    Inicializa variaveis com lista de campos que devem ser ofuscados de acordo com usuario.
	Remover essa função quando não houver releases menor que 12.1.27

    @type  Function
    @author Squad CRM & Faturamento
    @since  05/12/2019
    @version P12.1.27
    @param cUser, Caractere, Nome do usuário utilizado para validar se possui acesso ao 
        dados protegido.
    @param aAlias, Array, Array com todos os Alias que serão verificados.
    @param aFields, Array, Array com todos os Campos que serão verificados, utilizado 
        apenas se parametro aAlias estiver vazio.
    @param cSource, Caractere, Nome do recurso para gerenciar os dados protegidos.
    
    @return cSource, Caractere, Retorna nome do recurso que foi adicionado na pilha.
    @example FATPDLoad("ADMIN", {"SA1","SU5"}, {"A1_CGC"})
/*/
//-----------------------------------------------------------------------------------
Static Function FATPDLoad(cUser, aAlias, aFields, cSource)
	Local cPDSource := ""

	If FATPDActive()
		cPDSource := FTPDLoad(cUser, aAlias, aFields, cSource)
	EndIf

Return cPDSource


//-----------------------------------------------------------------------------------
/*/{Protheus.doc} FATPDUnload
    @description
    Finaliza o gerenciamento dos campos com proteção de dados.
	Remover essa função quando não houver releases menor que 12.1.27

    @type  Function
    @author Squad CRM & Faturamento
    @since  05/12/2019
    @version P12.1.27
    @param cSource, Caractere, Remove da pilha apenas o recurso que foi carregado.
    @return return, Nulo
    @example FATPDUnload("XXXA010") 
/*/
//-----------------------------------------------------------------------------------
Static Function FATPDUnload(cSource)    

    If FATPDActive()
		FTPDUnload(cSource)    
    EndIf

Return Nil

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDObfuscate
    @description
    Realiza ofuscamento de uma variavel ou de um campo protegido.
	Remover essa função quando não houver releases menor que 12.1.27

    @type  Function
    @sample FATPDObfuscate("999999999","U5_CEL")
    @author Squad CRM & Faturamento
    @since 04/12/2019
    @version P12
    @param xValue, (caracter,numerico,data), Valor que sera ofuscado.
    @param cField, caracter , Campo que sera verificado.
    @param cSource, Caractere, Nome do recurso que buscar dados protegidos.
    @param lLoad, Logico, Efetua a carga automatica do campo informado

    @return xValue, retorna o valor ofuscado.
/*/
//-----------------------------------------------------------------------------
Static Function FATPDObfuscate(xValue, cField, cSource, lLoad)
    
    If FATPDActive()
		xValue := FTPDObfuscate(xValue, cField, cSource, lLoad)
    EndIf

Return xValue   

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDLogUser
    @description
    Realiza o log dos dados acessados, de acordo com as informações enviadas, 
    quando a regra de auditoria de rotinas com campos sensíveis ou pessoais estiver habilitada
	Remover essa função quando não houver releases menor que 12.1.27

   @type  Function
    @sample FATPDLogUser(cFunction, nOpc)
    @author Squad CRM & Faturamento
    @since 06/01/2020
    @version P12
    @param cFunction, Caracter, Rotina que será utilizada no log das tabelas
    @param nOpc, Numerico, Opção atribuída a função em execução - Default=0

    @return lRet, Logico, Retorna se o log dos dados foi executado. 
    Caso o log esteja desligado ou a melhoria não esteja aplicada, também retorna falso.

/*/
//-----------------------------------------------------------------------------
Static Function FATPDLogUser(cFunction, nOpc)

	Local lRet := .F.

	If FATPDActive()
		lRet := FTPDLogUser(cFunction, nOpc)
	EndIf 

Return lRet  

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDActive
    @description
    Função que verifica se a melhoria de Dados Protegidos existe.

    @type  Function
    @sample FATPDActive()
    @author Squad CRM & Faturamento
    @since 17/12/2019
    @version P12    
    @return lRet, Logico, Indica se o sistema trabalha com Dados Protegidos
/*/
//-----------------------------------------------------------------------------
Static Function FATPDActive()

    Static _lFTPDActive := Nil
  
    If _lFTPDActive == Nil
        _lFTPDActive := ( GetRpoRelease() >= "12.1.027" .Or. !Empty(GetApoInfo("FATCRMPD.PRW")) )  
    Endif

Return _lFTPDActive  


//------------------------------------------------------------------------------
/*/	{Protheus.doc} MyFata050
Função exemplo de execução automática
@sample		MyFata050
@param		Nenhum
@return		ExpL - Rotina Automatica Executada com Sucesso.
@author		Renato da Cunha
@since	 	21/03/2018
@version	P12              
/*/
//------------------------------------------------------------------------------
/*
Function MyFata050()
	Local lRet	:= .T. 
	Local aCab	:= {}
	Local aItem	:= {}
	Private lMsErroAuto := .F.
	
	AADD(aCab, { {"CT_DOC"		,"000000002"		, Nil} ,; 
				 {"CT_DESCRI"	,"META POR VENDEDOR", Nil} } )
	
	AADD(aItem, { {"CT_DATA"	,DATE()				, Nil} ,;
				  {"CT_VEND"	,"000001"			, Nil} ,;
				  {"CT_QUANT"	,1					, Nil} ,;
				  {"CT_MOEDA"	,1					, Nil} ,; 
				  {"CT_VALOR"	,300				, Nil} } )
				  
	FATA050(aCab,aItem, 3)
	
	If lMsErroAuto       
      lRet := .F.
      DisarmTransaction()
      MostraErro()
    Else
    	Conout( "Meta incluída com sucesso!!!" )
    EndIf
    Asize(aCab,0) 
Return lRet
*/

//-----------------------------------------------------------------------------------
/*/{Protheus.doc} AO4GdModel

Cria um GridModel associado ao modelo informado no parãmetro, para evitar
a validação do SX9 da entidade principal do modelo informado com a AO4

@param, cIDModel, ID do modelo principal                              , String
@param, oModel  , Objeto do modelo a que o novo modelo serah associado, MPFormModel

@sample		AO4GdModel(cIDModel, oModel)

@return, Nil

@author		Squad CRM/Faturamento
@since		30/06/2021
@version	12.1.27
/*/
//----------------------------------------------------------------------------------
Static Function AO4GdModel(cIDMasterM, oModel, cAliasMast )
Local oStructAO4 := FWFormStruct(1,"AO4",/*bAvalCampo*/,/*lViewUsado*/)
Default cIDMasterM := ""
Default cAliasMast := ""

oModel:AddGrid("AO4CHILD",cIDMasterM,oStructAO4,/*bPreValid*/,/*bPosValid*/, , ,{|oGridModel, lCopy|LoadGdAO4(oGridModel, lCopy)})
oModel:SetRelation( "AO4CHILD" ,{ { "AO4_FILIAL", "FWxFilial( 'AO4' )" }, { "AO4_ENTIDA", cAliasMast }, { "AO4_CHVREG", ( cAliasMast )->( IndexKey( 1 ) ) }  }, AO4->( IndexKey( 1 ) ) )
oModel:GetModel("AO4CHILD"):SetOnlyView()
oModel:GetModel("AO4CHILD"):SetOnlyQuery()
oModel:GetModel("AO4CHILD"):SetOptional(.T.)
oModel:GetModel("AO4CHILD"):SetNoInsertLine(.T.)
oModel:GetModel("AO4CHILD"):SetNoUpdateLine(.T.)
oModel:GetModel("AO4CHILD"):SetNoDeleteLine(.T.)

Return Nil

//-----------------------------------------------------------------------------------
/*/{Protheus.doc} LoadGdAO4 

Bloco de carga dos dados do submodelo.
Este bloco sera invocado durante a execução do metodo activate desta classe.
O bloco recebe por parametro o objeto de model do FormGrid(FWFormGridModel) e um 
valor lógico indicando se eh uma operação de copia.

@param, oGridModel, objeto de model do FormGrid, FWFormGridModel
@param, lCopy     , indica se eh uma operação de copia, Boolean

@sample	LoadGdAO4(oGridModel, lCopy)

@return, aLoad, array com os dados que serão carregados no objeto, 
                o array deve ter a estrutura abaixo:
					[n]
					[n][1] ExpN: Id do registro (RecNo)
					[n][2] Array com os dados, os dados devem seguir exatamente 
					       a mesma ordem da estrutura de dados submodelo

@author		Squad CRM/Faturamento
@since		30/06/2021
@version	12.1.27
/*/
//----------------------------------------------------------------------------------
Static Function LoadGdAO4(oGridModel, lCopy)
	
	Local aLoad      := {}
	Local oStructAO4 := FWFormStruct(1,"AO4",/*bAvalCampo*/,/*lViewUsado*/)
	Local aFields    := {}
	Local nField     := 0
	Local nQtFields  := 0
	Local xValue     := Nil
	Local cField     := ""
	Local cType      := ""
	Local nLen       := 0

	aFields   := oStructAO4:GetFields()
	nQtFields := Len(aFields)

	AAdd(aLoad, {0,{}})

	For nField := 1 To nQtFields
		
		cField := aFields[nField][3]
		
		If Alltrim(cField) == "AO4_FILIAL"
			xValue := XFilial("AO4")
			cType  := ""
		Else
			cType  := aFields[nField][4]
			nLen   := aFields[nField][5]	
		EndIf

		Do Case
			Case cType == "C"
				xValue := Space(nLen)
			Case cType == "N"
				xValue := 0
			Case cType == "L"
				xValue := .T.
			Case cType == "D"
				xValue := CToD("  /  /    ")
		End Case

		AAdd(aLoad[1][2], xValue)
	Next nField

	FwFreeObj(oStructAO4)
	FwFreeObj(aFields)

Return aLoad
