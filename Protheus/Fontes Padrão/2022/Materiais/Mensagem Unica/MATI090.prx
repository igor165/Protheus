#INCLUDE "PROTHEUS.CH"
#INCLUDE 'FWMVCDEF.CH'
#INCLUDE "FWADAPTEREAI.CH"
// #INCLUDE "MATI090.CH"  // Montar CH.
#INCLUDE "RWMAKE.CH"
#INCLUDE "TBICONN.CH"

Static cMessage   := "CurrencyQuote"

/*/{Protheus.doc} MATI090
Função de integração com o adapter EAI para envio e recebimento do cadastro de
moedas (SM2) utilizando o conceito de mensagem única.

@param   cXml          Variável com conteúdo XML para envio/recebimento.
@param   cTypeTrans    Tipo de transação (Envio / Recebimento).
@param   cTypeMsg      Tipo de mensagem (Business Type, WhoIs, etc).
@param   cVersion      Versão da mensagem.
@param   cTransac      Nome da transação.

@author  Felipe Raposo
@version P12
@since   26/03/2018
@return  aRet   - (array)   Contém o resultado da execução e a mensagem XML de retorno.
       aRet[1] - (boolean)  Indica o resultado da execução da função
       aRet[2] - (caracter) Mensagem XML para envio
/*/
Function MATI090(cXml, cTypeTrans, cTypeMsg, cVersion, cTransac)

Local aRet   := {.T., "", cMessage}
Local cSimb  := ""
Local cNome  := ""
Local nX, cX

// Variável estática com as moedas disponíveis no sistema.
Static aMoedas := {}
If empty(aMoedas)
	For nX := 2 to 99
		cX := cValToChar(nX)
		cNome := GetNewPar("MV_MOEDA" + cX, "")
		If !empty(cNome)
			cSimb := GetNewPar("MV_SIMB" + cX, "")
			aAdd(aMoedas, {cX, "M2_MOEDA" + cX, cNome, cSimb})
		Else
			Exit
		Endif
	Next nX
Endif

If (cTypeTrans == TRANS_SEND .or. cTypeTrans == TRANS_RECEIVE)
	If cVersion = "1"
		aRet := v1000(cXml, cTypeTrans, cTypeMsg, cVersion)
	Else
		aRet[2] := "A versão da mensagem informada não foi implementada!"
	Endif
Endif

Return aRet


/*/{Protheus.doc} v1000
Implementação do adapter EAI, versão 1.x

@author  Felipe Raposo
@version P12
@since   26/03/2018
/*/
Static Function v1000(cXml, cTypeTrans, cTypeMsg, cVersion)

Local lRet       := .F.
Local cXmlRet    := ""
Local nX

Local oXml, oModel, cEvent, nEvent
Local aErro, cErro

Local aCurrencie := {}
Local dDate, cDate
Local cCode, nQuote

If (cTypeMsg == EAI_MESSAGE_WHOIS)
	lRet    := .T.
	cXmlRet := '1.000|1.001'

ElseIf (cTypeTrans == TRANS_SEND)
	If (cTypeMsg == EAI_MESSAGE_BUSINESS)
		lRet   := .T.
		oModel := FwModelActive()
		dDate  := oModel:GetValue('SM2MASTER', 'M2_DATA')
		cDate  := Transform(dtos(dDate), '@R 9999-99-99')

		cXMLRet := '<BusinessEvent>'
		cXMLRet += ' <Entity>' + cMessage + '</Entity>'
		cXMLRet += ' <Event>' + If(oModel:GetOperation() = MODEL_OPERATION_DELETE, 'delete', 'upsert') + '</Event>'
		cXMLRet += ' <Identification><key name="InternalId">' + cDate + '</key></Identification>'
		cXMLRet += '</BusinessEvent>'
		cXMLRet += '<BusinessContent>'
		cXMLRet += ' <CompanyId>' + cEmpAnt + '</CompanyId>'
		cXMLRet += ' <BranchId>' + cFilAnt + '</BranchId>'
		cXMLRet += ' <CompanyInternalId>' + cEmpAnt + '|' + cFilAnt + '</CompanyInternalId>'
		cXMLRet += ' <Date>' + cDate + '</Date>'
		If (oModel:GetOperation() <> MODEL_OPERATION_DELETE)
			cXMLRet += ' <ListOfCurrency>'
			For nX := 1 to len(aMoedas)
				cXMLRet += '  <Currency>'
				cXMLRet += '   <Code>' + aMoedas[nX, 1] + '</Code>'
				If cVersion >= "1.001"
					cXMLRet += '   <Name>' + aMoedas[nX, 3] + '</Name>'
					cXMLRet += '   <Symbol>' + aMoedas[nX, 4] + '</Symbol>'
				Endif
				cXMLRet += '   <Quote>' + cValToChar(oModel:GetValue('SM2MASTER', aMoedas[nX, 2])) + '</Quote>'
				cXMLRet += '  </Currency>'
			Next nX
			cXMLRet += ' </ListOfCurrency>'
		Endif
		cXMLRet += '</BusinessContent>'
		oModel := nil
	Endif

ElseIf (cTypeTrans == TRANS_RECEIVE)
	If (cTypeMsg == EAI_MESSAGE_RESPONSE)  // Resposta da mensagem única TOTVS.
		// Não realiza nenhuma ação, pois não há de/para nesse caso.

	ElseIf (cTypeMsg == EAI_MESSAGE_RECEIPT)  // Recibo.
		// Não realiza nenhuma ação.

	ElseIf (cTypeMsg == EAI_MESSAGE_BUSINESS)  // Chegada de mensagem de negócios.
		oXml := tXmlManager():New()
		oXml:Parse(cXml)
		If Empty(cErro := oXml:Error())
			lRet    := .T.
			cEvent  := AllTrim(Upper(oXml:xPathGetNodeValue('/TOTVSMessage/BusinessMessage/BusinessEvent/Event')))
			cDate   := oXml:xPathGetNodeValue('/TOTVSMessage/BusinessMessage/BusinessContent/Date')
			dDate   := stod(StrTran(cDate, "-", ""))

			SM2->(dbSetOrder(1))  // M2_DATA.
			If SM2->(dbSeek(dDate, .F.))
				If cEvent == 'UPSERT'
					nEvent := MODEL_OPERATION_UPDATE
				ElseIf cEvent == 'DELETE'
					nEvent := MODEL_OPERATION_DELETE
				Else
					lRet  := .F.
					cErro := 'Operação inválida. Somente são permitidas as operações UPSERT e DELETE.'
				Endif
			Else
				If cEvent == 'UPSERT'
					nEvent := MODEL_OPERATION_INSERT
				ElseIf cEvent == 'DELETE'
					lRet  := .F.
					cErro := 'Registro não encontrado no Protheus.'
				Else
					lRet  := .F.
					cErro := 'Operação inválida. Somente são permitidas as operações UPSERT e DELETE.'
				Endif
			Endif

			If lRet
				oModel := FwLoadModel('MATA090')
				oModel:SetOperation(nEvent)
				If oModel:Activate()
					If nEvent <> MODEL_OPERATION_DELETE
						If nEvent == MODEL_OPERATION_INSERT
							oModel:SetValue('SM2MASTER', 'M2_DATA', dDate)
						Endif
						aCurrencie := oXml:XPathGetChildArray("/TOTVSMessage/BusinessMessage/BusinessContent/ListOfCurrency")
						For nX := 1 to len(aCurrencie)
							cCode  := oXml:xPathGetNodeValue(aCurrencie[nX, 2] + "/Code")
							nQuote := val(oXml:xPathGetNodeValue(aCurrencie[nX, 2] + "/Quote"))
							oModel:SetValue('SM2MASTER', "M2_MOEDA" + cCode, nQuote)
						Next nX
					Endif
					IF oModel:VldData()
						lRet := oModel:CommitData()
					Else
						lRet := .F.
					Endif
				Else
					lRet := .F.
				Endif

				If !lRet
					cErro := 'A integração não foi bem sucedida. '
					aErro := oModel:GetErrorMessage()
					If !Empty(aErro)
						cErro += 'Foi retornado o seguinte erro: ' + Alltrim(aErro[5]) + '-' + AllTrim(aErro[6])
						If !Empty(Alltrim(aErro[7]))
							cErro += CRLF + 'Solução - ' + AllTrim(aErro[7])
						Endif
					Else
						cErro += 'Verifique os dados enviados'
					Endif
				Endif
				oModel:Deactivate()
				oModel:Destroy()
				oModel := nil
			Endif
		Else
			lRet    := .F.
		Endif
		oXml := nil
	Endif
EndIf

DelClassIntF()

// Se deu erro no processamento.
If !empty(cErro)
	lRet    := .F.
	cXmlRet := "<![CDATA[" + _NoTags(cErro) + "]]>"
Endif

Return {lRet, cXmlRet, cMessage}
