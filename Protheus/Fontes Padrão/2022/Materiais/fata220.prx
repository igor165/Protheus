#INCLUDE "FATA220.ch"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWMVCDEF.CH"

#DEFINE MAXGETDAD 4096

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATA220
@Description	Rotina de Manutencao do cadastro de usuarios do Portal
@Sample			FATA220(nOpcAuto,aAutoCab)
@param			nOpcAuto = Opção da execução automática da rotina
@param			aAutoCab = Array para o execução automática da rotina
@return			oView = View do Modelo
@author			Vendas & CRM
@since			02.02.2012
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Function FATA220(nOpcAuto,aAutoCab)

Private aRotina  := MenuDef()
Private xAutoCab := Nil

// criação de WebService para o Portal do Cliente Mingle
If (FindFunction('PORTAL.CLIENTE.UTIL.CRIAWSPCM') .AND. FindFunction('GFIN.UTIL.BRANCHESGROUP'))
	FWMsgRun(, {|| &('PORTAL.CLIENTE.UTIL.CRIAWSPCM()') }, STR0022, STR0023) //#"Processando"#"Criando WebServices..."
EndIf

If ( nOpcAuto <> Nil )
	If Type(xAutoCab) <> "A"
		xAutoCab := {}
	EndIf
	FWMVCRotAuto(ModelDef(),"AI3",nOpcAuto,{{"FATA220_AI3",xAutoCab},{"FATA220_AI4",xAutoCab},{"FATA220_AI5",xAutoCab},{"FATA220_AI6",xAutoCab}})
Else
	DEFINE FWMBROWSE oMBrowse ALIAS "AI3" DESCRIPTION STR0006 //"Usuarios do Portal"
	ACTIVATE FWMBROWSE oMBrowse
EndIf
Return

//-----------------------------------------------------------------------------
/*/{Protheus.doc} MenuDef()
@Description	Definição do Menu Funcional da Rotina
@Sample			MenuDef()
@param			Nenhum
@return			aRotina = Array com as opções da rotina
       			          Parametros do array a Rotina:
       			          1. Nome a aparecer no cabeçalho
       			          2. Nome da Rotina associada
       			          3. Reservado
       			          4. Tipo de Transação a ser efetuada:
       			             1 - Pesquisa e Posiciona em um Banco de Dados
       			             2 - Simplesmente mostra os campos
       			             3 - Inclui registros no Bancos de Dados
       			             4 - Altera o registro corrente
       			             5 - Remove o registro corrente do Banco de Dados
       			          5. Nível de acesso
       			          6. Habilita Menu Funcional
@author			Vendas & CRM
@since			03.02.2012
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Static Function MenuDef()

Private aRotina := {}

ADD OPTION aRotina Title STR0001 Action 'PesqBrw' OPERATION 1 ACCESS 0 //"Pesquisar"
ADD OPTION aRotina Title STR0002 Action 'VIEWDEF.FATA220' OPERATION 2 ACCESS 0 //"Visualizar"
ADD OPTION aRotina Title STR0003 Action 'VIEWDEF.FATA220' OPERATION 3 ACCESS 0 //"Incluir"
ADD OPTION aRotina Title STR0004 Action 'VIEWDEF.FATA220' OPERATION 4 ACCESS 0 //"Alterar"
ADD OPTION aRotina Title STR0005 Action 'VIEWDEF.FATA220' OPERATION 5 ACCESS 0 //"Excluir"

If ExistBlock("FT220MNU")
	ExecBlock("FT220MNU",.F.,.F.)
EndIf
Return(aRotina)

//-----------------------------------------------------------------------------
/*/{Protheus.doc} ViewDef()
@Description	Definicao da View
@Sample			ViewDef()
@param			Nenhum
@return			oView = View do Modelo
@author			Vendas & CRM
@since			03.02.2012
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Static Function ViewDef()

Local oModel	:= FWLoadModel( 'FATA220' )	// Cria um objeto de Modelo de dados baseado no ModelDef do fonte informado
Local oStruAI3	:= FWFormStruct( 2, 'AI3' )	// Cria as estruturas a serem usadas na View
Local oStruAI4	:= FWFormStruct( 2, 'AI4' ) // Cria as estruturas a serem usadas na View
Local oStruAI5	:= FWFormStruct( 2, 'AI5' ) // Cria as estruturas a serem usadas na View
Local oStruAI6	:= FWFormStruct( 2, 'AI6' ) // Cria as estruturas a serem usadas na View
Local oStruSA3	:= FWFormStruct( 2, 'SA3' ) // Cria as estruturas a serem usadas na View
Local oStruAA1	:= FWFormStruct( 2, 'AA1' ) // Cria as estruturas a serem usadas na View
Local oView									// Interface de visualização construída

oView := FWFormView():New()								// Cria o objeto de View
oView:SetModel( oModel )									// Define qual Modelo de dados será utilizado

oView:AddUserButton( STR0010, 'WEB', {|oView| Ft220CarrD(oView) },NIL,NIL, {MODEL_OPERATION_UPDATE, MODEL_OPERATION_INSERT}) //"Carrega Direitos"

oView:AddField( 'VIEW_AI3', oStruAI3, 'AI3MASTER' )	// Adiciona no nosso View um controle do tipo formulário (antiga Enchoice)
oView:AddGrid( 'VIEW_AI4' , oStruAI4, 'AI4DETAIL' )	// Adiciona no nosso View um controle do tipo Grid (antiga Getdados)
oView:AddGrid( 'VIEW_AI5' , oStruAI5, 'AI5DETAIL' )	// Adiciona no nosso View um controle do tipo Grid (antiga Getdados)
oView:AddGrid( 'VIEW_AI6' , oStruAI6, 'AI6DETAIL' )	// Adiciona no nosso View um controle do tipo Grid (antiga Getdados)
oView:AddGrid( 'VIEW_SA3' , oStruSA3, 'SA3DETAIL' )	// Adiciona no nosso View um controle do tipo Grid (antiga Getdados)
oView:AddGrid( 'VIEW_AA1' , oStruAA1, 'AA1DETAIL' )	// Adiciona no nosso View um controle do tipo Grid (antiga Getdados)

oView:CreateHorizontalBox( 'SUPERIOR'  , 30 )
oView:CreateHorizontalBox( 'INFERIOR'  , 70 )
//Cria pastas
oView:CreateFolder('PASTAS','INFERIOR')

oView:AddSheet( 'PASTAS', 'ABA01', STR0007) // Clientes
oView:AddSheet( 'PASTAS', 'ABA02', STR0008) // Fornecedores
oView:AddSheet( 'PASTAS', 'ABA03', STR0009) // Direitos
oView:AddSheet( 'PASTAS', 'ABA04', STR0016) // Vendedor
oView:AddSheet( 'PASTAS', 'ABA05', STR0017) // Tecnico

// Cria um "box" horizontal para receber cada elemento da view
oView:CreateHorizontalBox( 'ABAS1'  , 100,,, 'PASTAS', 'ABA01' )	//Clientes
oView:CreateHorizontalBox( 'ABAS2' ,  100,,, 'PASTAS', 'ABA02' )	//Fornecedores
oView:CreateHorizontalBox( 'ABAS3' ,  100,,, 'PASTAS', 'ABA03' )	//Direitos
oView:CreateHorizontalBox( 'ABAS4' ,  100,,, 'PASTAS', 'ABA04' )	//Vendedor
oView:CreateHorizontalBox( 'ABAS5' ,  100,,, 'PASTAS', 'ABA05' )	//Tecnico

// Relaciona o identificador (ID) da View com o "box" para exibição
oView:SetOwnerView( 'VIEW_AI3', 'SUPERIOR' )
oView:SetOwnerView( 'VIEW_AI4', 'ABAS1' )
oView:SetOwnerView( 'VIEW_AI5', 'ABAS2' )
oView:SetOwnerView( 'VIEW_AI6', 'ABAS3' )
oView:SetOwnerView( 'VIEW_SA3', 'ABAS4' )
oView:SetOwnerView( 'VIEW_AA1', 'ABAS5' )
Return oView

//-----------------------------------------------------------------------------
/*/{Protheus.doc} ModelDef()
@Description	Definicao do Model
@Sample			ModelDef()
@param			Nenhum
@return			oModel = Modelo
@author			Vendas & CRM
@since			03.02.2012
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Static Function ModelDef()

// Cria as estruturas a serem usadas no Modelo de Dados
Local oStruAI3 	:= FWFormStruct( 1, 'AI3' )	// Cria as estruturas a serem usadas na View
Local oStruAI4 	:= FWFormStruct( 1, 'AI4' ) // Cria as estruturas a serem usadas na View
Local oStruAI5 	:= FWFormStruct( 1, 'AI5' ) // Cria as estruturas a serem usadas na View
Local oStruAI6 	:= FWFormStruct( 1, 'AI6' ) // Cria as estruturas a serem usadas na View
Local oStruSA3 	:= FWFormStruct( 1, 'SA3' ) // Cria as estruturas a serem usadas na View
Local oStruAA1 	:= FWFormStruct( 1, 'AA1' ) // Cria as estruturas a serem usadas na View
Local bLoadSA3 	:= { |oMdlAI3|FT220LdSA3( oMdlAI3 ) }
Local bLoadAA1	:= { |oMdlAI3|FT220LdAA1( oMdlAI3 ) }
Local oModel // Modelo de dados construído

// Cria o objeto do Modelo de Dados
oModel := MPFormModel():New( 'FATA220' , /*{|oMdl| Ft220Pre(oMdl) }*/, {|oModel| Ft220Pos(oModel)}, {|oModel| Ft220Com(oModel)})

// Adiciona ao modelo um componente de formulário
oModel:AddFields( 'AI3MASTER', /*cOwner*/, oStruAI3 )
// Adiciona ao modelo componentes de grid
oModel:AddGrid( 'AI4DETAIL', 'AI3MASTER', oStruAI4 )
oModel:AddGrid( 'AI5DETAIL', 'AI3MASTER', oStruAI5 )
oModel:AddGrid( 'AI6DETAIL', 'AI3MASTER', oStruAI6 )
oModel:AddGrid( 'SA3DETAIL', 'AI3MASTER', oStruSA3,/*bLinePre*/,/*bLinePost*/,/*bPreVal*/,/*bPosVal*/,bLoadSA3 )
oModel:AddGrid( 'AA1DETAIL', 'AI3MASTER', oStruAA1,/*bLinePre*/,/*bLinePost*/,/*bPreVal*/,/*bPosVal*/,bLoadAA1 )

oModel:GetModel( "AI4DETAIL" ):SetUseOldGrid( .T. )
oModel:GetModel( "AI5DETAIL" ):SetUseOldGrid( .T. )
oModel:GetModel( "AI6DETAIL" ):SetUseOldGrid( .T. )
oModel:GetModel( "SA3DETAIL" ):SetUseOldGrid( .T. )
oModel:GetModel( "AA1DETAIL" ):SetUseOldGrid( .T. )

//Linhas unicas dos grids
oModel:GetModel( 'AI4DETAIL' ):SetUniqueLine( { 'AI4_CODCLI','AI4_LOJCLI'} )
oModel:GetModel( 'AI5DETAIL' ):SetUniqueLine( { 'AI5_CODFOR','AI5_LOJFOR'} )
oModel:GetModel( 'AI6DETAIL' ):SetUniqueLine( { 'AI6_WEBSRV'} )

//Deixa opcional adicionar itens
oModel:GetModel( 'AI4DETAIL'):SetOptional( .T. )
oModel:GetModel( 'AI5DETAIL'):SetOptional( .T. )
oModel:GetModel( 'AI6DETAIL'):SetOptional( .T. )
oModel:GetModel( 'SA3DETAIL'):SetOptional( .T. )
oModel:GetModel( 'AA1DETAIL'):SetOptional( .T. )

//Apenas visualização
oModel:GetModel( 'SA3DETAIL' ):SetNoInsertLine( .T. )
oModel:GetModel( 'SA3DETAIL' ):SetNoUpdateLine( .T. )
oModel:GetModel( 'SA3DETAIL' ):SetNoDeleteLine( .T. )
oModel:GetModel( 'AA1DETAIL' ):SetNoInsertLine( .T. )
oModel:GetModel( 'AA1DETAIL' ):SetNoUpdateLine( .T. )
oModel:GetModel( 'AA1DETAIL' ):SetNoDeleteLine( .T. )
oModel:GetModel( 'SA3DETAIL' ):SetOnlyQuery( .T. )
oModel:GetModel( 'AA1DETAIL' ):SetOnlyQuery( .T. )

// Faz relacionamento entre os componentes do model
oModel:SetRelation( 'AI4DETAIL', { { 'AI4_FILIAL', 'xFilial( "AI4" )' }, { 'AI4_CODUSU', 'AI3_CODUSU' } }, AI4->( IndexKey( 1 ) ) )
oModel:SetRelation( 'AI5DETAIL', { { 'AI5_FILIAL', 'xFilial( "AI5" )' }, { 'AI5_CODUSU', 'AI3_CODUSU' } }, AI5->( IndexKey( 1 ) ) )
oModel:SetRelation( 'AI6DETAIL', { { 'AI6_FILIAL', 'xFilial( "AI6" )' }, { 'AI6_CODUSU', 'AI3_CODUSU' } }, AI6->( IndexKey( 1 ) ) )
oModel:SetRelation( 'SA3DETAIL', { { 'A3_FILIAL' , 'xFilial( "SA3" )' }, { 'A3_CODUSR' , 'AI3_USRSIS' } }, SA3->( IndexKey( 7 ) ) )
oModel:SetRelation( 'AA1DETAIL', { { 'AA1_FILIAL', 'xFilial( "AA1" )' }, { 'AA1_CODUSR', 'AI3_USRSIS' } }, AA1->( IndexKey( 4 ) ) )

// Adiciona a descrição do Modelo de Dados
oModel:SetDescription( STR0006 ) //"Usuarios do Portal"

// Adiciona a descrição dos Componentes do Modelo de Dados
oModel:GetModel( 'AI3MASTER' ):SetDescription( STR0006 ) //Usuarios do Portal
oModel:GetModel( 'AI4DETAIL' ):SetDescription( STR0007 ) //Clientes
oModel:GetModel( 'AI5DETAIL' ):SetDescription( STR0008 ) //Fornecedores
oModel:GetModel( 'AI6DETAIL' ):SetDescription( STR0009 ) //Direitos
oModel:GetModel( 'AI5DETAIL' ):SetDescription( STR0016 ) //Vendedores
oModel:GetModel( 'AI6DETAIL' ):SetDescription( STR0017 ) //Atendentes

//Interceptação do Commit e Validação MVC - FWModelEvent
If (FindClass('FATA220EVFIN'))
  oModel:InstallEvent("FATA220EVFIN",, FATA220EVFIN():New())
EndIf

// Retorna o Modelo de dados
Return oModel

//-----------------------------------------------------------------------------
/*/{Protheus.doc} Ft220Pos()
@Description	Pós-Validação do Modelo
@Sample			Ft220Pos(oMdl)
@param			oMdl = Modelo
@return			.T.=Modelo válido / .F.=Modelo Inválido
@author			Vendas & CRM
@since			07.02.2012
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Function Ft220Pos(oMdl)

Local oMdlAI3	:= oMdl:GetModel('AI3MASTER')
Local lRet		:= .T.

If oMdl:GetOperation() == MODEL_OPERATION_DELETE
	// Valida se o usuario esta sendo utlizado no Cad. Participantes (SIGAAPD)
	If lRet .and. TcCanOpen(RetSqlName("RD0"))
		lRet := Ft220CkRD0(oMdlAI3:GetValue("AI3_CODUSU"))
	EndIf

	/**
	   DEMAIS VALIDACOES PARA CONSIDERAR CADASTROS DE OUTROS MODULOS DEVEM SER COLOCADAS AQUI
	**/

	// Ponto de entrada para validar a exclusão do usuario.
	If lRet .and. ExistBlock("FT220Exc")
		lRet := ExecBlock("FT220Exc",.F.,.F.,{__cUserId,cUserName,oMdlAI3:GetValue("AI3_CODUSU"),oMdlAI3:GetValue("AI3_LOGIN"),oMdlAI3:GetValue("AI3_NOME")})
	EndIf
EndIf
Return lRet

//-----------------------------------------------------------------------------
/*/{Protheus.doc} Ft220Com()
@Description	Commit do Modelo
@Sample			Ft220Com(oMdl)
@param			oMdl = Modelo
@return			.T.
@author			Vendas & CRM
@since			07.02.2012
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Function Ft220Com(oMdl)

Local cUsrForm	:= oMdl:GetValue('AI3MASTER',"AI3_USRSIS")
Local nOper		:= oMdl:GetOperation()
Local aArea		:= {}
Local aAreaAA1	:= {}
Local aAreaSA3	:= {}
Local cUsrAI3	:= ""
Local cFilAA1	:= ""
Local cFilSA3	:= ""

DbSelectArea("AI3")
DbSetOrder(1)
If MsSeek(xFilial("AI3")+oMdl:GetValue('AI3MASTER',"AI3_CODUSU"))
	cUsrAI3 := AI3->AI3_USRSIS
EndIf

If FWFormCommit( oMdl )
	If cUsrAI3 <> "" .AND. cUsrAI3 <> cUsrForm .AND. (nOper == MODEL_OPERATION_INSERT .OR. nOper == MODEL_OPERATION_UPDATE)
		// Realiza a substituição do código do usuário do sistema p/o Vendedor e/ou Técnico
		aArea		:= (Alias())->(GetArea())
		aAreaSA3	:= SA3->(GetArea())
   		aAreaAA1	:= AA1->(GetArea())
		cFilSA3		:= xFilial("SA3")
 		cFilAA1		:= xFilial("AA1")

		SA3->(DbSetOrder(7))	//A3_FILIAL+A3_CODUSR
		SA3->(MsSeek(cFilSA3+cUsrAI3))
		While SA3->(! Eof()) .And. SA3->A3_FILIAL == cFilSA3 .And. SA3->A3_CODUSR == cUsrAI3
			SA3->(RecLock("SA3",.F.))
			SA3->A3_CODUSR := cUsrForm
			SA3->(MsUnLock())
			SA3->(DbSkip())
		EndDo

		AA1->(DbSetOrder(4))	//AA1_FILIAL+AA1_CODUSR
		AA1->(MsSeek(cFilAA1+cUsrAI3))
		While AA1->(! Eof()) .And. AA1->AA1_FILIAL == cFilAA1 .And. AA1->AA1_CODUSR == cUsrAI3
			AA1->(RecLock("AA1",.F.))
			AA1->AA1_CODUSR := cUsrForm
			AA1->(MsUnLock())
			AA1->(DbSkip())
		EndDo

		RestArea(aAreaSA3)
		RestArea(aAreaAA1)
		RestArea(aArea)
		aAreaSA3	:= {}
		aAreaAA1	:= {}
		aArea		:= {}
	EndIf
EndIf
Return .T.

//-----------------------------------------------------------------------------
/*/{Protheus.doc} Ft220VlCli()
@Description	Validacao do Cliente/loja
@Sample			Ft220VlCli(cCodCli,cLojCli)
@param			cCodCli = Código do Cliente
@param			cLojCli = Loja do Cliente
@return			.T.=Cliente/Loja válidos // .F.=Cliente/Loja inválidos
@author			Eduardo Riera
@since			08/03/2003
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Function Ft220VlCli(cCodCli,cLojCli)

Local oMdlAI4	:= FwModelActive()
Local cFilSA1	:= xFilial("SA1")
Local lRetorno	:= .T.

DEFAULT cCodCli	:= oMdlAI4:GetModel("AI4DETAIL"):GetValue("AI4_CODCLI")
DEFAULT cLojCli	:= oMdlAI4:GetModel("AI4DETAIL"):GetValue("AI4_LOJCLI")

If Empty(cLojCli) .And. SA1->A1_FILIAL == cFilSA1 .And. SA1->A1_COD == cCodCli
	cLojCli := SA1->A1_LOJA
EndIf
SA1->(DbSetOrder(1))	//A1_FILIAL+A1_COD+A1_LOJA
If SA1->(! MsSeek(cFilSA1 + cCodCli + AllTrim(cLojCli)))
	Help(" ",1,"CLIENTEINV")
	lRetorno := .F.
EndIf
Return(lRetorno)

//-----------------------------------------------------------------------------
/*/{Protheus.doc} Ft220VlFor()
@Description	Validacao do Fornecedor/loja
@Sample			Ft220VlFor(cCodFor,cLojFor)
@param			cCodFor = Código do Fornecedor
@param			cLojFor = Loja do Fornecedor
@return			.T.=Fornecedor/Loja válidos // .F.=Fornecedor/Loja inválidos
@author			Eduardo Riera
@since			08/03/2003
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Function Ft220VlFor(cCodFor,cLojFor)

Local oMdlAI5	:= FwModelActive()
Local cFilSA2	:= xFilial("SA2")
Local lRetorno	:= .T.

DEFAULT cCodFor	:= oMdlAI5:GetModel("AI5DETAIL"):GetValue("AI5_CODFOR")
DEFAULT cLojFor	:= oMdlAI5:GetModel("AI5DETAIL"):GetValue("AI5_LOJFOR")

If Empty(cLojFor) .And. SA1->A1_FILIAL == cFilSA2 .And. SA1->A1_COD == cCodFor
	cLojFor := SA2->A2_LOJA
EndIf
SA2->(DbSetOrder(1))	//A2_FILIAL+A2_COD+A2_LOJA
If SA2->(! MsSeek(cFilSA2 + cCodFor + AllTrim(cLojFor)))
	Help(" ",1,"FORNECEINV")
	lRetorno := .F.
EndIf
Return(lRetorno)

//-----------------------------------------------------------------------------
/*/{Protheus.doc} Ft220CarrD()
@Description	Autopreenchimento dos Direitos do Usuário do Portal
@Sample			Ft220CarrD(oView)
@param			oView = View
@return			.T.=Autopreenchimento OK // .F.=Autopreenchimento com problemas
@author			Vendas & CRM
@since			06.02.2012
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Static Function Ft220CarrD(oView)

Local oModel	:= FWModelActive()
Local oMdlAI6	:= oModel:GetModel('AI6DETAIL')
Local nOper		:= oModel:GetOperation()
Local nLinha	:= oMdlAI6:Length()
Local nI		:= 1
Local nQtdAI7	:= 0
Local aArea		:= {}
Local aAreaAI7	:= {}
Local aWebSrv	:= {}
Local cFilAI7	:= ""
Local cTitHelp	:= ""
Local cSolHelp	:= ""
Local lRet		:= .T.

If ( nOper == MODEL_OPERATION_UPDATE .OR. nOper == MODEL_OPERATION_INSERT) .AND.;
   ( lRet := ((IsBlind())            .OR. MsgYesNo(STR0012)) ) //"Confirma sobreposicao de todos os direitos?"

	aArea		:= GetArea()
	If nLinha > 0 .And. (! oMdlAI6:IsEmpty())
		For nI := 1 To nLinha
			oMdlAI6:GoLine(nI)
			oMdlAI6:DeleteLine()
		Next nI
	EndIf

	cFilAI7		:= xFilial("AI7")
	AI7->(DbSetOrder(1))
	AI7->(MsSeek(cFilAI7))	//AI7_FILIAL+AI7_WEBSRV
	While AI7->(! Eof()) .And. AI7->AI7_FILIAL == cFilAI7
		aAdd(aWebSrv, AI7->AI7_WEBSRV)
		AI7->(DbSkip())
	EndDo

	nQtdAI7	:= Len(aWebSrv)
	For nI := 1 To nQtdAI7
		If ! Empty(oMdlAI6:GetValue("AI6_WEBSRV"))
			nLinha		:= oMdlAI6:AddLine()
		EndIf
		If nLinha > 0
			oMdlAI6:GoLine(nLinha)
		EndIf
		If !( lRet := oMdlAI6:SetValue("AI6_WEBSRV", aWebSrv[nI]) )
			aError		:= oModel:GetErrorMessage()
			cTitHelp	:= If(! Empty(aError[5]), aError[5], "Ft220CarrD")
			cSolHelp	:= ""
			Help("", 1, cTitHelp, , aError[6], 1, 0, , , , , , {cSolHelp})
			Exit
		EndIf
	Next nI
	// Validação SIGAFIN para não habilitar no pardrão o novo portal do cliente
	if oMdlAI6:SeekLine({{"AI6_WEBSRV", 'PORTALCLIENTEMINGLE'}})
		oMdlAI6:DeleteLine()
	endif
	oMdlAI6:GoLine(1)
	RestArea(aArea)
	aWebSrv		:= {}
	aAreaAI7	:= {}
	aArea		:= {}

EndIf

Return lRet

//-----------------------------------------------------------------------------
/*/{Protheus.doc} Ft220IsGrp()
@Description	Validacao do grupo de usuários
@Sample			Ft220IsGrp()
@param			Nenhum
@return			.T.=É um grupo válido // .F.=Não é um grupo válido
@author			Eduardo Riera
@since			12.11.2004
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Function Ft220IsGrp()

Local aArea    := GetArea()
Local aAreaAI3 := AI3->(GetArea())
Local cGrupo   := &(ReadVar())
Local lRetorno := .F.

lRetorno := ( Posicione("AI3", 1, xFilial("AI3") + cGrupo, "AI3_ADMIN") == "3" )
RestArea(aAreaAI3)
RestArea(aArea)
Return lRetorno

//------------------------------------------------------------------------------
/*/{Protheus.doc} FT220LdSA3
@Description	Pré carrega cadastro de Vendedores
@sample			FT220LdSA3(oMdlSA3)
@param			oMdlAI3
@return			aLoad
@author			Renato da Cunha
@since			17/02/2016
@version		12.1.7
/*/
//-----------------------------------------------------------------------------
Static Function FT220LdSA3(oMdlSA3)

Local aLoadSA3		:= {}
Local aAreaSA3		:= SA3->(GetArea())
Local oStructSA3 	:= oMdlSA3:GetStruct()
Local aFieldsSA3	:= oStructSA3:GetFields()
Local nIndex		:= 0
Local nY			:= 0
Local lMvUsrPort	:= SuperGetMv("MV_USERPOR",, .F.)
Local cVendPad		:= AI3->AI3_USRSIS

If Empty(cVendPad) .And. lMvUsrPort
	cVendPad	:= AI3->AI3_VEND
EndIf

If !Empty(cVendPad)
	nIndex	:= If(! Empty(AI3->AI3_USRSIS), 7 /*A3_FILIAL+A3_CODUSR*/, 1 /*A3_FILIAL+A3_COD*/)
	SA3->(DBSetOrder(nIndex))
	If SA3->(DBSeek(xFilial("SA3") + cVendPad))
		aAdd(aLoadSA3,{SA3->(RecNo()), Array(Len(aFieldsSA3))})
		For nY := 1 To Len(aFieldsSA3)
			If !aFieldsSA3[nY][MODEL_FIELD_VIRTUAL]
				aLoadSA3[1][2][nY] := &("SA3->"+ (AllTrim(aFieldsSA3[nY][MODEL_FIELD_IDFIELD])))
			Else
				aLoadSA3[1][2][nY] := CriaVar(aFieldsSA3[nY][MODEL_FIELD_IDFIELD], .T.)
			EndIf
		Next(nY)
	EndIf
EndIf

RestArea(aAreaSA3)
Return(aLoadSA3)

//------------------------------------------------------------------------------
/*/{Protheus.doc} FT220LdAA1
@Description	Pré carrega cadastro de Tecnicos
@sample			FT220LdAA1(oMdlAA1)
@param			oMdlAA1
@return			aLoadAA1
@author			Renato da Cunha
@since			17/02/2016
@version		12.1.7
/*/
//-----------------------------------------------------------------------------
Static Function FT220LdAA1(oMdlAA1)

Local aLoadAA1		:= {}
Local aAreaAA1		:= AA1->(GetArea())
Local oStructAA1 	:= oMdlAA1:GetStruct()
Local aFieldsAA1	:= oStructAA1:GetFields()
Local nIndex		:= 0
Local nY			:= 0
Local lMvUsrPort	:= SuperGetMv("MV_USERPOR",, .F.)
Local cTecnPad		:= AI3->AI3_USRSIS

If Empty(cTecnPad) .And. lMvUsrPort
	cTecnPad	:= AI3->AI3_CODTEC
EndIf

If !Empty(cTecnPad)
	nIndex	:= If(! Empty(AI3->AI3_USRSIS), 4 /*AA1_FILIAL+AA1_CODUSR*/, 1 /*AA1_FILIAL+AA1_CODTEC*/)
	AA1->(DBSetOrder(nIndex))
	If AA1->(DBSeek(xFilial("AA1") + cTecnPad))
		aAdd(aLoadAA1,{AA1->(RecNo()), Array(Len(aFieldsAA1))})
		For nY := 1 To Len(aFieldsAA1)
			If !aFieldsAA1[nY][MODEL_FIELD_VIRTUAL]
				aLoadAA1[1][2][nY] := &("AA1->"+ (AllTrim(aFieldsAA1[nY][MODEL_FIELD_IDFIELD])))
			Else
				aLoadAA1[1][2][nY] := CriaVar(aFieldsAA1[nY][MODEL_FIELD_IDFIELD], .T.)
			EndIf
		Next(nY)
	EndIf
EndIf

RestArea(aAreaAA1)
Return(aLoadAA1)

//-----------------------------------------------------------------------------
/*/{Protheus.doc} Ft220CkRD0()
@Description	Check RD0
@sample			Ft220CkRD0(cCodUsu)
@param			cCodUsu: Código do Usuário
@return			.T. = Não existem registros na RD0 // .F. = Existem registros na RD0
@author
@since			Nov/2018
@version		12.1.17
/*/
//-----------------------------------------------------------------------------
Static Function Ft220CkRD0(cCodUsu)

Local aArea		:= GetArea()
Local cAliasQry	:= GetNextAlias()
Local lRet		:= .T.

BeginSql Alias cAliasQry
	SELECT COUNT(RD0.RD0_PORTAL) TOTAL
	  FROM %Table:RD0% RD0
	 WHERE RD0.RD0_FILIAL = %xFilial:RD0%
	   AND RD0.RD0_PORTAL =	%Exp:cCodUsu%
	   AND RD0.%NotDel%
EndSql

If (cAliasQry)->TOTAL > 0
	Help("", 1, "Ft220CkRD0", , STR0019+CRLF+STR0020, 1, 0)	//"Impossível Excluir"##"Este usuário esta associado a um registro do Cdastro de Participantes do SIGAAPD"
	lRet	:= .F.
EndIf

(cAliasQry)->(DbCloseArea())
RestArea(aArea)
aArea := {}

Return lRet
