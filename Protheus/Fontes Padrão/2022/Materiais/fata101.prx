#include "FATA101.CH"
#INCLUDE "Protheus.ch"

//-------------------------------------------------------------------
/*/{Protheus.doc} FATA101()

Cadastro de regras de margem minima
  
@author Vendas CRM
@since 20/10/2012
/*/
//--------------------------------------------------------------------                              
Function FATA101()
Local oBrowse	:= Nil
                                                                 
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                                                      
//³ Cria o Browse ³                               
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oBrowse := FWMBrowse():New()
oBrowse:SetMenuDef('FATA101')
oBrowse:SetAlias('AIH')
oBrowse:SetDescription(STR0001) //"Cadastro regras margem mínima"
oBrowse:Activate()

Return(.T.)


//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef()

Menu - Cadastro de regras de margem minima
  
@author Vendas CRM
@since 20/10/2012
/*/
//--------------------------------------------------------------------  
Static Function MenuDef() 
Return FWMVCMenu( "FATA101" ) 



//-------------------------------------------------------------------
/*/{Protheus.doc} ModelDef()

Model - Cadastro de regras de margem minima
  
@author Vendas CRM
@since 20/10/2012
/*/
//--------------------------------------------------------------------  
Static Function ModelDef()

Local oModel 		:= MPFormModel():New( 'FATA101' ) 
Local oStruAIH	:= FWFormStruct( 1, 'AIH' )
Local oStruAII	:= FWFormStruct( 1, 'AII' )


//------------------------------------------------
//		 
//------------------------------------------------

//gatilho pra trazer a descricao do item ao selecionar o codigo. Deixei aqui no model porque qdo cadastra no dicionario nao funciona o gatilho ao digitar o codigo (somente F3)
oStruAIH:AddTrigger( "AIH_CODCLI", "AIH_LOJA", {|| .T.},;
							 {|oModel| Padr(Posicione("SA1",1,xFilial("SA1") + oModel:GetValue("AIH_CODCLI"), "A1_LOJA"),TamSx3("AIH_LOJA")[1]) } )
oStruAIH:AddTrigger( "AIH_CODCLI", "AIH_NOME", {|| .T.},;
							 {|oModel| Padr(Posicione("SA1",1,xFilial("SA1") + oModel:GetValue("AIH_CODCLI"), "A1_NOME"),TamSx3("AIH_NOME")[1]) } )

	

oStruAII:AddTrigger( "AII_CODPRO", "AII_DESPRO", {|| .T.},;
							 {|oModel| Padr(Posicione("SB1",1,xFilial("SB1") + oModel:GetValue("AII_CODPRO"), "B1_DESC"),TamSx3("AII_DESPRO")[1]) } )
							 

oModel:AddFields( 'AIH_MASTER', /*cOwner*/, oStruAIH )

oModel:AddGrid( 'AII_DETAIL', 'AIH_MASTER', oStruAII,/*Pre-Validacao*/,/*Pos-Validacao*/,/*bPre*/,/*bPost*/, /*bLoad*/) 
oModel:SetRelation( 'AII_DETAIL', { { 'AII_FILIAL', 'xFilial( "AII" )' }, { 'AII_CODREG','AIH_CODREG' } }, AII->( IndexKey( 1 ) ) )


oModel:SetDescription(STR0002) //obrigartorio ter alguma descricao//"Cadastro de regras por margem mínima"
oModel:GetModel( 'AIH_MASTER' ):SetDescription(STR0003)//"Cabeçalho regra por margem"
oModel:GetModel( 'AII_DETAIL' ):SetDescription(STR0004)//"Itens da regra por margem"

oModel:GetModel( 'AII_DETAIL' ):SetUniqueLine( { 'AII_CODPRO' , 'AII_GRUPO'} )
 
 

 

Return oModel

//-------------------------------------------------------------------
/*/{Protheus.doc} ViewDef()

View - Cadastro de regras de margem minima
  
@author Vendas CRM
@since 20/10/2012
/*/
//--------------------------------------------------------------------  
Static Function ViewDef()

Local oModel 		:= FWLoadModel( 'FATA101' ) 
Local oStruAIH	:= FWFormStruct( 2, 'AIH' )
Local oStruAII	:= FWFormStruct( 2, 'AII' )
Local oView 		:= FWFormView():New()


//----------------------------------------------------------
//		Cria a estrutura baseada na estrutura do model
//----------------------------------------------------------
oView:SetModel( oModel ) 

oView:AddField( 'VIEW_AIH', oStruAIH, 'AIH_MASTER' )
oView:AddGrid( 'VIEW_AII', oStruAII, 'AII_DETAIL' )

oView:CreateHorizontalBox( 'SUPERIOR', 40) 
oView:CreateHorizontalBox( 'INFERIOR', 60 ) 


oView:SetOwnerView( 'VIEW_AIH', 'SUPERIOR' ) 
oView:SetOwnerView( 'VIEW_AII', 'INFERIOR' ) 
 
// Define campos que terao Auto Incremento
oView:AddIncrementField( 'VIEW_AII', 'AII_ITEM' )


Return oView



//-------------------------------------------------------------------
/*/{Protheus.doc} FT101VldCli()

validacao para saber se ja existe cliente cadastrado

@lBloqueia - Determina se ja ha cliente cadastrado 
  
@author Vendas CRM
@since 20/10/2012
/*/
//-------------------------------------------------------------------- 
Function FT101VldCli()
Local lReturn := .F.

lReturn := ExistCpo("SA1",M->AIH_CODCLI+RTRIM(M->AIH_LOJA),,,,!EMPTY(M->AIH_LOJA)) .And. ExistChav("AIH",M->AIH_CODCLI+M->AIH_LOJA,2)
  
Return(lReturn)   

//-------------------------------------------------------------------
/*/{Protheus.doc} FT101VldGp()

validacao para saber se ja existe grupo de cliente cadastrado

  
@author Vendas CRM
@since 18/04/2016
/*/
//-------------------------------------------------------------------- 
Function FT101VldGp()
Local lReturn := .F.

  If ExistChav("AIH",M->AIH_GRPVEN,3)
     lReturn := .T.
  EndIf
  
Return(lReturn)


//-------------------------------------------------------------------
/*/{Protheus.doc} FtRegMar()

Avalia margem minima (avalia cabecalho)

@param cCliente - codigo do cliente
@param cLoja - loja
@param aRentab - dados da rentabilidade ( Cod Produto | Valor Total | CMV - custo | Valor Presente | Lucro Bruto | Margem de Contribuicao )
  
@lBloqueia - Determina se ha bloqueio por margem minima para os itens analisados de aRentab
  
@author Vendas CRM
@since 20/10/2012
/*/
//--------------------------------------------------------------------  
Function FtRegMar(cCliente	, cLoja, aRentab)

Local aArea 		:= GetArea()
Local aAreaAIH	:= AIH->(GetArea())
Local aAreaAII	:= AII->(GetArea())
Local lBloqueia	:= .F.
Local cGrupoCli	:= ""
Local cSeek		:= ""
Local cWhile		:= ""
Local cEspaco		:= ""
/*
aRentab
[n]    Item do pedido
[n][1] codigo do produto
[n][2] Valor Total (unit * qtde)
[n][3] C.M.V. (custo)
[n][4] Valor Presente
[n][5] Lucro Bruto (Valor presente - CMV)
[n][6] Margem de Contribuicao (%)
*/


//--------------------------------------------
//pesquisa regra por o cliente
//--------------------------------------------
cSeek := "xFilial('AIH') + '" + cCliente + cLoja + "'"
cWhile := "!AIH->(Eof()) .AND. xFilial('AIH') == AIH->AIH_FILIAL .AND. + '" + cCliente + "' == AIH->AIH_CODCLI .AND. + '" + cLoja + "' == AIH->AIH_LOJA"
lBloqueia := PesqCliGru(2, cSeek, cWhile, aRentab)
 
If !lBloqueia 
	//--------------------------------------------
	//pesquisa regra por grupo de clientes
	//--------------------------------------------
	cGrupoCli := Posicione("SA1",1 , xFilial("SA1") + cCliente + cLoja , "A1_GRPVEN")
	If !Empty(cGrupoCli)
		cSeek := "xFilial('AIH') + '" + cGrupoCli + "'"
		cWhile := "!AIH->(Eof()) .AND. xFilial('AIH') == AIH->AIH_FILIAL .AND. + '" + cGrupoCli + "' == AIH->AIH_GRPVEN " 
		lBloqueia := PesqCliGru(3, cSeek, cWhile, aRentab)
	EndIf
EndIf

If !lBloqueia 
	//--------------------------------------------------------------------------------------
	//pesquisa regra que sirva para qualquer cliente (codcli branco e grupo cli branco)
	//--------------------------------------------------------------------------------------
	cEspaco := Space(TamSx3("AIH_GRPVEN")[1]) + Space(TamSx3("AIH_CODCLI")[1]) + Space(TamSx3("AIH_LOJA")[1]) 
	cSeek := "xFilial('AIH') + '" + cEspaco + "'"
	cWhile := "!AIH->(Eof()) .AND. xFilial('AIH') == AIH->AIH_FILIAL .AND. AIH->AIH_GRPVEN+AIH->AIH_CODCLI+AIH->AIH_LOJA == '" + cEspaco + "' " 
	lBloqueia := PesqCliGru(3, cSeek, cWhile, aRentab)

EndIf



AII->(RestArea(aAreaAII))
AIH->(RestArea(aAreaAIH))
RestArea(aArea)

Return lBloqueia


//-------------------------------------------------------------------
/*/{Protheus.doc} PesqCliGru()

Avalia a regra. Analisa os itens da regra em relacao ao itens do lancamento (aRentab) 

@param nIndice - indice usado na busca
@param cSeek - expressao para busca
@param cWhile - condicao do while
@param aRentab - dados da rentabilidade ( Cod Produto | Valor Total | CMV - custo | Valor Presente | Lucro Bruto | Margem de Contribuicao )
  
@lBloqueia - Determina se ha bloqueio por margem minima para os itens analisados de aRentab
  
@author Vendas CRM
@since 20/10/2012
/*/
//-------------------------------------------------------------------- 
Function PesqCliGru(nIndice, cSeek, cWhile, aRentab,nMargMin,nMargMed)
Local lBloqueia := .F.

Default nMargMin:=0
Default nMargMed:=0

DbSelectArea("AIH")
DbSetOrder(nIndice)
If DbSeek( &cSeek )
	While &cWhile 
		lBloqueia := FtAvRegMar( aRentab,@nMargMin,@nMargMed ) //avalia a regra. Analisa os itens da regra em relacao ao itens do lancamento (aRentab) 
	
		If lBloqueia
			Exit
		EndIf
				
		AIH->( DbSkip() ) 		
	End Do
EndIf 


Return lBloqueia


//-------------------------------------------------------------------
/*/{Protheus.doc} FtAvRegMar()

Analisa regra posicionada. Precisa ter os arquivos AIH e ACS posicionados preveamente

@param aRentab - dados da rentabilidade ( Cod Produto | Valor Total | CMV - custo | Valor Presente | Lucro Bruto | Margem de Contribuicao )
  
@lBloqueia - Determina se ha bloqueio por margem minima 
  
@author Vendas CRM
@since 20/10/2012
/*/
//-------------------------------------------------------------------- 
Function FtAvRegMar( aRentab ,nMargMin,nMargMed)
Local lBloqueia 	:= .F.
Local cHoraAtual	:= Left( Time(), 5 )  
Local cDtHrAtual	:= DToS( dDataBase ) + cHoraAtual 
Local cDataAtual 	:= DToS( dDataBase )
Local cDataVazia 	:= Space( Len( DToS( ACS->ACS_DATATE ) ) ) 
Local dDataVazia 	:= CToD( "" ) 

Default nMargMin:=0
Default nMargMed:=0
//verifica horario de funcionamento da regra
If  (AIH->AIH_TPHORA == "1" .AND. cDtHrAtual >= DToS( AIH->AIH_DATDE ) + AIH->AIH_HORDE .AND. ;
		( AIH->AIH_DATATE == dDataVazia .OR. cDtHrAtual <= DToS( AIH->AIH_DATATE ) + AIH->AIH_HORATE	) ) .OR. ;	
		( AIH->AIH_TPHORA == "2" .AND. dDatabase >= AIH->AIH_DATDE .AND. ;
		( AIH->AIH_DATATE == dDataVazia .OR. dDataBase <= AIH->AIH_DATATE ) .AND. ;
			cHoraAtual >= AIH->AIH_HORDE .AND. cHoraAtual <= AIH->AIH_HORATE )

	lBloqueia := FtItRegMar( aRentab, AIH->AIH_CODREG ,@nMargMin,@nMargMed ) //Avalia os itens da regra em relacao ao lancamento

	
EndIf


Return lBloqueia


//-------------------------------------------------------------------
/*/{Protheus.doc} FtItRegMar()

Avalia os itens da regra por margem. 

@param aRentab - dados da rentabilidade ( Cod Produto | Valor Total | CMV - custo | Valor Presente | Lucro Bruto | Margem de Contribuicao )
@param cCodReg - codigo da regra a ser analisada  
  
@return lBloqueia - Determina se ha bloqueio por margem minima 
  
@author Vendas CRM
@since 20/10/2012
/*/
//-------------------------------------------------------------------- 
Function FtItRegMar( aRentab , cCodReg,nMargMin,nMargMed )

Local aAreaAII	:= AII->(GetArea())
Local lBloqueia	:= .F.
Local nI 		:= 0
Local nMargemVenda	:= 0		//margem do item no lancamento     

Local nMargemRegra	:= 0		//martem do item na regra 
Default nMargMin:=0
Default nMargMed:=0
/*
aRentab
[n]    Item do pedido
[n][1] codigo do produto
[n][2] Valor Total (unit * qtde)
[n][3] C.M.V. (custo)
[n][4] Valor Presente
[n][5] Lucro Bruto (Valor presente - CMV)
[n][6] Margem de Contribuicao (%)
*/


DbSelectArea("AII")
//Percorre os itens do orcamento e procura cada item na regra valida
For nI := 1 to Len(aRentab)
	AII->(DbSetOrder(2))
	nMargemVenda := StrTran(aRentab[nI][6],".","") //retira a mascara e converte para numerico
	nMargemVenda := Val(StrTran(nMargemVenda,",",".")) //retira a mascara e converte para numerico
	If !Empty(aRentab[nI][1]) //a ultima linha é dos totais... o codpro vem vazio
		//se encontrar o item usa o valor de margem do item
		If DbSeek( xFilial("AII") + cCodReg + aRentab[nI][1] ) 
			nMargemRegra := AII->AII_MARGEM
			nMargMin     := AII->AII_MARGEM
			nMargMed     := AII->AII_MRGREG			
		//Se nao encontrou o produto, procura pelo grupo
		Else
			cCodGru = Posicione("SB1", 1, xFilial("SB1") + aRentab[nI][1], "B1_GRUPO")
			AII->(DbSetOrder(3))
			If DbSeek( xFilial("AII") + cCodReg + cCodGru)
				nMargemRegra := AII->AII_MARGEM
				nMargMin     := AII->AII_MARGEM
				nMargMed     := AII->AII_MRGREG				
			Else //se nao encontrar pega o valor de margem do cabecalho	
				nMargemRegra := AIH->AIH_MARGEM
				nMargMin     := AIH->AIH_MARGEM
				nMargMed     := AIH->AIH_MRGREG				
			EndIf
		EndIf
	
		//Avalia margem
		If nMargemVenda < nMargemRegra 
			lBloqueia := .T.
			Exit
		EndIf
	EndIf
Next nI


	
	
AII->(RestArea(aAreaAII))

Return lBloqueia

//-------------------------------------------------------------------
/*/{Protheus.doc} Ft101Exec()

Exclusão  de bloqueio por margem quando o cliente for deletado

@param cCliente	Código do Cliente Deletado
@param CLoja		Código da Loja

@author Rodrigo dos Santos
@since 04/06/2013
/*/
//-------------------------------------------------------------------- 
Function Ft101Exc(cCliente,cLoja)

Local cSeek 	:= ""
Local cWhile 	:= ""

Default cCliente 	:= ""
Default cLoja 	:= ""
 
cSeek 	:= "xFilial('AIH') + '" + cCliente + cLoja + "'"
cWhile := "!AIH->(Eof()) .AND. xFilial('AIH') == AIH->AIH_FILIAL .AND. + '" +;
			cCliente + "' == AIH->AIH_CODCLI .AND. + '" + cLoja + "' == AIH->AIH_LOJA"

If AliasInDic("AIH")
	DbSelectArea("AIH")
	DbSetOrder(2) // Índice 2 = AIH_CODCLI + AIH_lOJA 

		If AIH->(DbSeek( &cSeek ))
			While &cWhile 
	    		Reclock('AIH',.F.)
				AIH->(DbDelete()) 
				AIH->(MsUnlock())				
				AIH->( DbSkip()) 		
			End Do
		EndIf  
EndIf
Return
 
//-------------------------------------------------------------------
/*/{Protheus.doc} Ft101ExProd()

Exclusão  de produto no Bloqueio de Margem quando o produto for excluído.

@param		cProd	Código do Produto deletado
@author 	Rodrigo dos Santos
@since 	04/06/2013
/*/
//-------------------------------------------------------------------- 
Function Ft101ExProd(cProd)

Local cSeek	:= 	""
Local cWhile	:= 	""

Default cProd	:=	""
 
cSeek	:= "xFilial('AII') + '" +  cProd + "'" 
cWhile	:= "!AII->(Eof()) .AND. xFilial('AII') == AII->AII_FILIAL .AND. '" + cProd + "' == AII->AII_CODPRO"
 
DbSelectArea("AII")
DbSetOrder(4)   //Índice 4 = AII_FILIAL + AII_PRODUTO

If AII->(DbSeek( &cSeek ))
	While &cWhile 
		Reclock('AII',.F.)	
		AII->(DbDelete()) 
		AII->(MsUnlock())				
		AII->( DbSkip()) 		
	EndDo
EndIf

Return


