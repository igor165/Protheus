#INCLUDE "PROTHEUS.CH"
#INCLUDE "FATA100.CH"
#INCLUDE "FWLIBVERSION.CH"

#DEFINE MAXGETDAD 8192

Static __aPrepared :={}

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ FATA100  ³ Autor ³Vendas Clientes        ³ Data ³18.05.2001  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Rotina de Manutencao das Regras de Negocio                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FATA100                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FATA100(uAutoCab, uItensACT, uItensACX, uItensACN ,nOpcAuto)

Local oMBrowse	:= Nil 

Private lFT100Auto 	:= .F.
Private aAutoCab  	:= {}
Private aItensACT	:= {}
Private aItensACX	:= {}
Private aItensACN	:= {}

Private cCadastro	:= OemToAnsi(STR0007)//"Manutencao das Regras de Negocio"
Private aRotina		:= MenuDef()

Default uAutoCab	:= {}
Default uItensACT	:= {}
Default uItensACX	:= {}
Default uItensACN	:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Endereca para a funcao MBrowse                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DbSelectArea("ACS")
DbSetOrder(1)

If Empty( uAutoCab )
	oMBrowse := FWMBrowse():New()
	oMBrowse:SetAlias("ACS")                                       
	oMBrowse:SetDescription(cCadastro)
	oMBrowse:Activate()
Else
	lFT100Auto	:= .T.
	aAutoCab	:= uAutoCab
	aItensACT	:= uItensACT
	aItensACX	:= uItensACX
	aItensACN	:= uItensACN
	MBrowseAuto(nOpcAuto,aClone(aAutoCab),"ACS")	
Endif

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ft100RDes ³ Autor ³Vendas Clientes        ³ Data ³18.05.2001  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de Manutencao da Regra de Negocio                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ft100RNeg                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Arquivo                                       ³±±
±±³          ³ExpN2: Numero do Registro                                     ³±±
±±³          ³ExpN3: Opcao do aRotina                                       ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ft100RNeg(cAlias,nReg,nOpc)

Local aPosObj   	:= {}
Local aObjects  	:= {}
Local aSize     	:= {}
Local aInfo     	:= {}
Local aTitles   	:= {}
Local aHeadNeg  	:= {}
Local aHeadCom  	:= {}
Local aHeadDes  	:= {}
Local aColsNeg  	:= {}
Local aColsCom  	:= {}
Local aColsDes  	:= {}
Local aAux 			:= {}

Local nUsado    	:= 0
Local nY			:= 0
Local nX        	:= 0
Local nOpcA     	:= 0  
Local nSaveSx8  	:= GetSx8Len() 
Local cCodReg   	:= ""
Local lContinua 	:= .T.
Local lCopia    	:= nOpc==6
Local lVisualiza	:= nOpc==2
Local lRet			:= .T.

Local oDlg
Local oGetd1
Local oGetd2

Local oFolder
 
Local lFT100MRN := .F.
Local aButtons  :={}
Local lGrade    := MaGrade()

Local cCadAux := cCadastro //Guarda o texto da private

Private oGetd3
Private aTela[0][0],aGets[0]
Private oGrade := MsMatGrade():New("oGrade",,"ACN_DESCON",,"Positivo().And.Ft100VlGr()",,{{"ACN_DESCON",.T.,,.T.}}) 

DEFAULT INCLUI := .F.                 

cCadastro := OemToAnsi(STR0007) //Altera o texto da variavel Private

aTitles := {STR0008,STR0009,STR0010}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Inicializa as variaveis da Enchoice                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If INCLUI .AND. !lCopia
	RegToMemory( "ACS", .T., .F. )
EndIf
If !INCLUI .OR. lCopia
	If lCopia .OR. lVisualiza .OR. SoftLock("ACS")
		RegToMemory( "ACS", .F., .F. )
		If lCopia
			M->ACS_CODCLI := CriaVar("ACS_CODCLI",.F.)
			M->ACS_LOJA   := CriaVar("ACS_LOJA",.F.)       
			M->ACS_NOME   := CriaVar("ACS_NOME",.F.)					
			M->ACS_GRPVEN := CriaVar("ACS_GRPVEN",.F.)		
			M->ACS_DESGRP := CriaVar("ACS_DESGRP",.F.)					
		Endif	
	Else
		lContinua := .F.
	EndIf
EndIf

If lContinua

	cCodReg := Iif (lCopia, ACS->ACS_CODREG, M->ACS_CODREG)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array aHeader do ACT                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSeek	:= xFilial("ACT")+cCodReg
	cWhile 	:= "ACT->ACT_FILIAL + ACT->ACT_CODREG"   
	aHeader := {}
	aCols 	:= {}
	FillGetDados(	nOpc 		, "ACT", 1	, cSeek,; 
					{||&(cWhile)}, /*{|| bCond,bAct1,bAct2}*/, /*aNoFields*/,; 
			   		/*aYesFields*/, /*lOnlyYes*/,/* cQuery*/, /*bMontAcols*/, IIf(nOpc<>3,.F.,.T.),; 
					aHeadNeg/*aHeaderAux*/, aColsNeg/*aColsAux*/,{||Fat100Item("ACT")}, /*bBeforeCols*/,;
					/*bAfterHeader*/, /*cAliasQry*/)    


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array aHeader do ACX                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSeek	:= xFilial("ACX")+cCodReg
	cWhile	:= "ACX->ACX_FILIAL + ACX->ACX_CODREG"     
	aHeader := {}
	aCols 	:= {} 
	FillGetDados(	nOpc 		, "ACX", 1	, cSeek,; 
					{||&(cWhile)}, /*{|| bCond,bAct1,bAct2}*/, /*aNoFields*/,; 
			   		/*aYesFields*/, /*lOnlyYes*/,/* cQuery*/, /*bMontAcols*/, IIf(nOpc<>3,.F.,.T.),; 
					aHeadCom/*aHeaderAux*/, aColsCom/*aColsAux*/,{||Fat100Item("ACX")}, /*bBeforeCols*/,;
					/*bAfterHeader*/, /*cAliasQry*/)    

	DbSelectArea("ACX")	
	
	If lCopia
		M->ACS_CODREG := CriaVar("ACS_CODREG",.T.) 
    EndIf                                                             
    
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array aHeader do ACN caso a tabela esteja criada     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSeek	:= xFilial("ACN")+cCodReg
	cWhile	:= "ACN->ACN_FILIAL + ACN->ACN_CODREG"     
	aHeader := {}
	aCols 	:= {}
	FillGetDados(	nOpc 		, "ACN", 1	, cSeek,; 
					{||&(cWhile)}, /*{|| bCond,bAct1,bAct2}*/, /*aNoFields*/,; 
			   		/*aYesFields*/, /*lOnlyYes*/, /*cQuery*/, /*bMontAcols*/, IIf(nOpc<>3,.F.,.T.),; 
					aHeadDes/*aHeaderAux*/, aColsDes/*aColsAux*/,{||Fat100Item("ACN")}, /*bBeforeCols*/,;
					/*bAfterHeader*/, /*cAliasQry*/)  

	If lGrade
	 	aColsDes := aColsGrade(oGrade,aCols,aHeader,"ACN_CODPRO","ACN_ITEM","ACN_ITEMGR",aScan(aHeader,{|x| AllTrim(x[2]) == "ACN_DESPRO"}))
	EndIf
	
	If lCopia
		Inclui := .T.
	Endif	
		
	aHeader := {}   
	aCols 	:= {}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz o calculo automatico de dimensoes de objetos     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( Type("lFT100Auto") == "U" .Or. !lFT100Auto )	
		aSize := MsAdvSize()
		AAdd( aObjects, { 100, 100, .T., .T. } ) 
		AAdd( aObjects, { 200, 200, .T., .T. } )
		aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 5, 5 }
		aPosObj := MsObjSize( aInfo, aObjects,.T.)
		
		DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 To aSize[6],aSize[5] of oMainWnd PIXEL
		EnChoice( "ACS", nReg, nOpc,,,,,aPosObj[1], , 3, , , , , ,.F. )
		oFolder := TFolder():New(aPosObj[2,1],aPosObj[2,2],aTitles,{"",""},oDlg,,,,.T.,.F.,aPosObj[2,4]-aPosObj[2,2],aPosObj[2,3]-aPosObj[2,1])
		oFolder:bSetOption:={|nAtu| Ft100Fld(nAtu,oFolder:nOption,oFolder,{oGetD1,oGetD2,oGetD3})}
	
		oGetD1 := MsNewGetDados():New(2,2,aPosObj[2,3]-aPosObj[2,1]-15,aPosObj[2,4]-aPosObj[2,2]-5,Iif(Altera .Or. Inclui, GD_INSERT+GD_DELETE+GD_UPDATE, 0),"Ft100LOk1()","Ft100TOk1()","+ACT_ITEM",,,MAXGETDAD,,,,oFolder:aDialogs[1],aHeadNeg,aColsNeg)
		oGetD2 := MsNewGetDados():New(2,2,aPosObj[2,3]-aPosObj[2,1]-15,aPosObj[2,4]-aPosObj[2,2]-5,Iif(Altera .Or. Inclui, GD_INSERT+GD_DELETE+GD_UPDATE, 0),"Ft100LOk2()","Ft100TOk2()","+ACX_ITEM",,,MAXGETDAD,,,,oFolder:aDialogs[2],aHeadCom,aColsCom)
		oGetD3 := MsNewGetDados():New(2,2,aPosObj[2,3]-aPosObj[2,1]-15,aPosObj[2,4]-aPosObj[2,2]-5,Iif(Altera .Or. Inclui,GD_INSERT+GD_DELETE+GD_UPDATE,0),"Ft100LOk3()","AllwaysTrue()","+ACN_ITEM",,,MAXGETDAD,,,,oFolder:aDialogs[3],aHeadDes,aColsDes)
		
		If ExistBlock( "FT100MRN" )
			aButtons := ExecBlock( "FT100MRN",.F.,.F.,{@aButtons, @oGetD1, @oGetD2, @oGetD3} )
			If ValType( aButtons ) = "A"
				lFT100MRN := .T.
			Endif  	
		Endif
		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpcA := 1,If(Ft100Ok(oGetD1,oGetD2,oGetD3,aColsNeg,aColsCom,aColsDes,oFolder, nOpc),If(!Obrigatorio(aGets,aTela),nOpcA := 0,oDlg:End()),nOpcA := 0)},{||oDlg:End()},,Iif(lFT100MRN, @aButtons,Nil))
		FATPDLogUser("FT100RNEG")	
	Else
		If EnchAuto(cAlias,aAutoCab,{|| Obrigatorio(aGets,aTela) .And. Ft100Ok(,,,,,,,nOpc)},aRotina[nOpc][4])

			If lCopia
				If Empty( aItensACT ) .And. !Empty( aColsNeg )
					For nX := 1 To Len( aColsNeg )
						For nY := 1 To Len( aHeadNeg ) 
							If ( aHeadNeg[nY][10] <> "V" .And. !Empty( aColsNeg[nX][nY] ) )
								aAdd( aAux ,{aHeadNeg[nY][2],aColsNeg[nX][nY], Nil})
							EndIf
						Next nY
						aAdd( aItensACT, aAux )
						aAux := {}
					Next nX
				EndIf
				If Empty( aItensACX ) .And. !Empty( aColsCom )
					aAux := {}
					For nX := 1 To Len( aColsCom )
						For nY := 1 To Len( aHeadCom ) 
							If ( aHeadCom[nY][10] <> "V" .And. !Empty( aColsCom[nX][nY] ) )
								aAdd( aAux ,{aHeadCom[nY][2],aColsCom[nX][nY], Nil})
							EndIf
						Next nY
						aAdd( aItensACX, aAux )  
						aAux := {}
					Next nX
				EndIf
				If Empty( aItensACN ) .And. !Empty( aColsDes )
					aAux := {}
					For nX := 1 To Len( aColsDes )
						For nY := 1 To Len( aHeadCom ) 
							If ( aHeadDes[nY][10] <> "V" .And. !Empty( aColsDes[nX][nY] ) )
								aAdd( aAux ,{aHeadDes[nY][2],aColsDes[nX][nY], Nil})
							EndIf
						Next nY
						aAdd( aItensACN, aAux )
						aAux := {}
					Next nX
				EndIf	 
			EndIf

			If !Empty( aItensACT )
				aHeader 	:= aClone( aHeadNeg )
				lRet 		:= MsGetDAuto(aItensACT,"Ft100LOk1",,aAutoCab, aRotina[nOpc][4])
				aColsNeg	:= aClone( aCols ) 
			EndIf

			If lRet 
				If !Empty( aItensACX ) 
					aCols   	:= {}
					aHeader		:= aClone( aHeadCom )
					lRet 		:= MsGetDAuto(aItensACX,"Ft100LOk2",,aAutoCab, aRotina[nOpc][4])
					aColsCom	:= aClone( aCols )
				EndIf
				If lRet 
					If !Empty( aItensACN )
						aCols 	 := {}
						aHeader	 := aClone( aHeadDes )
						lRet 	 := MsGetDAuto(aItensACN,"Ft100LOk3",,aAutoCab, aRotina[nOpc][4])
						aColsDes := aClone( aCols )
					EndIf 
				EndIf 
			EndIf
			
			If lRet
				nOpcA := 1
			EndIf

			aHeader := {}
			aCols 	:= {} 
		EndIf		
	Endif
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Rotina de Gravacao da Tabela de preco                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nOpcA == 1 .And. nOpc >= 2
		Begin Transaction
		If lGrade
			aColsDes := aGradeCols(oGrade,aColsDes,aHeadDes,"ACN_CODPRO","ACN_ITEMGR","ACN_DESCON","ACN_ITEM")
		EndIf
		Ft100Grv(nOpc-2,aHeadCom,aColsCom,aHeadNeg,aColsNeg,aHeadDes,aColsDes,lCopia)
		While (GetSx8Len() > nSaveSx8)
			ConfirmSx8()
		End
		EvalTrigger()
		End Transaction
	EndIf
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Restaura a entrada da Rotina                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
While (GetSx8Len() > nSaveSx8)
	RollBackSx8()
End

cCadastro := cCadAux

MsUnLockAll()
FreeUsedCode()
Return(nOpcA)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    |Ft100afcol  ºAutor ³Vendas Clientes      º Data ³ 22/02/07  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³Faz o tratamento do aCols                                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±³Parametros³												              ³±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Regras de Negocio                                     	  º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function Fat100Item(cAlias) 

Local nX := 0
If Len(aCols) == 1
	For nX := 1 To Len(aHeader)
			If AllTrim(aHeader[nX,2]) == "ACT_ITEM" .Or. AllTrim(aHeader[nX,2])== "ACX_ITEM" .Or. AllTrim(aHeader[nX,2])== "ACN_ITEM"
				Acols[Len(Acols),nX] := "001"			
			EndIf    
 	Next nX 
EndIf 

Return(.T.)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ft100Grv  ³ Autor ³Vendas Clientes        ³ Data ³ 08/05/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de Gravacao                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ft100Grv                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Opcao da Gravacao sendo:                               ³±±
±±³          ³       [1] Inclusao                                           ³±±
±±³          ³       [2] Alteracao                                          ³±±
±±³          ³       [3] Exclusao                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Ft100Grv(nOpcao		,aHeadCom	,aColsCom	,aHeadNeg	,;
						 aColsNeg	,aHeadDes	,aColsDes, lCopia)

Local aArea     := GetArea()
Local aRegNo    := {}
Local lGravou   := .F.
Local lTravou   := .T.
Local nX        := 0
Local nY        := 0
Local nUsado1   := Len(aHeadNeg)
Local nUsado2   := Len(aHeadCom)
Local nUsado3   := Len(aHeadDes)
Local bCampo 	:= {|nCPO| Field(nCPO) }
Local cItem     := Repl("0",Len(ACT->ACT_ITEM))
Local cFilACS   := xFilial("ACS")
Local cFilACT   := xFilial("ACT")
Local cFilACX   := xFilial("ACX")
Local cFilACN   := xFilial("ACN")

Do Case
	Case nOpcao <> 3
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Grava o Cabecalho                                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("ACS")
		DbSetOrder(1)
		If DbSeek(cFilACS+M->ACS_CODREG)
			RecLock("ACS",.F.)
		Else
			RecLock("ACS",.T.)
		EndIf
		For nX := 1 TO FCount()  			
			FieldPut(nX,M->&(EVAL(bCampo,nX)))
		Next nX
		ACS->ACS_FILIAL := cFilACS
		MsUnLock()
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Guarda os registros para reaproveita-los                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("ACT")
		DbSetOrder(1)
		DbSeek(cFilACT+M->ACS_CODREG)
		While ( !Eof() .AND. cFilACT == ACT->ACT_FILIAL .AND. M->ACS_CODREG == ACT->ACT_CODREG )
			aadd(aRegNo,RecNo())
			DbSkip()
		End
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Grava os itens                                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		cItem     := Repl("0",Len(ACT->ACT_ITEM))		
		
		For nX := 1 To Len(aColsNeg)
			lTravou := .F.
			If nX <= Len(aRegNo)
				DbSelectArea("ACT")
				DbGoto(aRegNo[nX])
				RecLock("ACT")
				lTravou := .T.
			EndIf
			If ( !aColsNeg[nX][nUsado1+1] )
				If !lTravou
					RecLock("ACT",.T.)
				EndIf
				For nY := 1 to Len(aHeadNeg)
					If aHeadNeg[nY][10] <> "V"
						ACT->(FieldPut(FieldPos(aHeadNeg[nY][2]),aColsNeg[nX][nY]))
					EndIf
				Next nY
				cItem := Soma1(cItem)
				ACT->ACT_FILIAL := cFilACT
				ACT->ACT_CODREG := M->ACS_CODREG
				ACT->ACT_ITEM   := cItem
				MsUnLock()
				lGravou := .T.
			Else
				If lTravou
					ACT->(DbDelete()) 
				EndIf
			EndIf
			MsUnLock()
		Next nX

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Guarda os registro para reaproveita-los - ACX                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aRegNo := {}
		cItem  := Repl("0",Len(ACX->ACX_ITEM))				
		
		DbSelectArea("ACX")
		DbSetOrder(1)
		DbSeek(cFilACX+M->ACS_CODREG)
		While ( !Eof() .AND. cFilACX == ACX->ACX_FILIAL .AND. M->ACS_CODREG == ACX->ACX_CODREG )
			aadd(aRegNo,RecNo())
			DbSkip()
		End
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Grava os itens                                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nX := 1 To Len(aColsCom)
			lTravou := .F.
			If nX <= Len(aRegNo)
				DbSelectArea("ACX")
				DbGoto(aRegNo[nX])
				RecLock("ACX")
				lTravou := .T.
			EndIf
			If ( !aColsCom[nX][nUsado2+1] )
				If !lTravou
					RecLock("ACX",.T.)
				EndIf
				For nY := 1 to Len(aHeadCom)
					If aHeadCom[nY][10] <> "V"
						ACX->(FieldPut(FieldPos(aHeadCom[nY][2]),aColsCom[nX][nY]))
					EndIf
				Next nY
				cItem := Soma1(cItem)
				ACX->ACX_FILIAL := cFilACX
				ACX->ACX_CODREG := M->ACS_CODREG
				ACX->ACX_ITEM   := cItem
				MsUnLock()
				lGravou := .T.
			Else        
				If lTravou
					ACX->(DbDelete())
				EndIf
			EndIf
			MsUnLock() 
		Next nX

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Guarda os registro para reaproveita-los - ACN                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aRegNo := {}
		cItem  := Repl("0",Len(ACN->ACN_ITEM))				
		
		DbSelectArea("ACN")
		DbSetOrder(1)
		DbSeek(cFilACN+M->ACS_CODREG)
		While ( !Eof() .AND. cFilACN == ACN->ACN_FILIAL .AND. M->ACS_CODREG == ACN->ACN_CODREG )
			aadd(aRegNo,RecNo())
			DbSkip()
		End
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Grava os itens                                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nX := 1 To Len(aColsDes)
			lTravou := .F. 
			If nX <= Len(aRegNo)
				DbSelectArea("ACN")
				DbGoto(aRegNo[nX])
				RecLock("ACN")
				lTravou := .T.
			EndIf
			If ( !aColsDes[nX][nUsado3+1] )
				If !lTravou
					RecLock("ACN",.T.)
				EndIf
				For nY := 1 to Len(aHeadDes)
					If aHeadDes[nY][10] <> "V"
						ACN->(FieldPut(FieldPos(aHeadDes[nY][2]),aColsDes[nX][nY]))
					EndIf 
				Next nY
				cItem := Soma1(cItem)
				ACN->ACN_FILIAL := cFilACN
				ACN->ACN_CODREG := M->ACS_CODREG
				ACN->ACN_ITEM   := cItem
				MsUnLock()
				lGravou := .T.
			Else        
				If lTravou
					ACN->(DbDelete())
				EndIf
			EndIf
			MsUnLock() 
		Next nX
      
	Case nOpcao == 3
		DbSelectArea("ACT")
		DbSetOrder(1)
		DbSeek(cFilACT+M->ACS_CODREG)
		While ( !Eof() .AND. cFilACT == ACT->ACT_FILIAL .AND. M->ACS_CODREG == ACT->ACT_CODREG )
			RecLock("ACT")
			DbDelete()
			MsUnLock()
			DbSkip()
		End

		DbSelectArea("ACX")
		DbSetOrder(1)
		DbSeek(cFilACX+M->ACS_CODREG)
		While ( !Eof() .AND. cFilACX == ACX->ACX_FILIAL .AND. M->ACS_CODREG == ACX->ACX_CODREG )
			RecLock("ACX")
			DbDelete()
			MsUnLock()
			DbSkip()
		End

		DbSelectArea("ACN")
		DbSetOrder(1)
		DbSeek(cFilACN+M->ACS_CODREG)
		While ( !Eof() .AND. cFilACN == ACN->ACN_FILIAL .AND. M->ACS_CODREG == ACN->ACN_CODREG )
			RecLock("ACN")
			DbDelete()
			MsUnLock()
			DbSkip()
		End
		
		DbSelectArea("ACS")
		DbSetOrder(1)
		If DbSeek(cFilACS+M->ACS_CODREG)
			RecLock("ACS")
			DbDelete()
			MsUnLock()
		EndIf
EndCase
Return(lGravou)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ft100LOk1 ³ Autor ³Vendas Clientes        ³ Data ³ 09/05/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de Validacao da linha Ok                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ft100Lok1()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ft100Lok1()

Local aArea     := GetArea()
Local lRetorno  := .T.
Local nPCodTab  := aScan(aHeader,{|x| AllTrim(x[2])=="ACT_CODTAB"})
Local nPCondPg  := aScan(aHeader,{|x| AllTrim(x[2])=="ACT_CONDPG"})
Local nPFormPg  := aScan(aHeader,{|x| AllTrim(x[2])=="ACT_FORMPG"})
Local nUsado    := Len(aHeader)
Local nX        := 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica os campos obrigatorios                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !aCols[n][nUsado+1]
	Do Case
		Case nPCodTab == 0 .OR. nPCondPg  == 0 .OR. nPFormPg == 0
			lRetorno := .F.
			Help(" ",1,"OBRIGAT",,RetTitle("ACT_CODTAB")+","+RetTitle("ACT_CONDPG")+","+RetTitle("ACT_FORMPG"),4)
		Case Empty(aCols[n][nPCodTab]) .AND. Empty(aCols[n][nPCondPg]) .AND. Empty(aCols[n][nPCondPg]) .AND. n<>1
			lRetorno := .F.
			Help(" ",1,"OBRIGAT",,RetTitle("ACT_CODTAB")+","+RetTitle("ACT_CONDPG")+","+RetTitle("ACT_FORMPG"),4)
	EndCase
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se nao ha valores duplicados                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno
		For nX := 1 To Len(aCols)
			If nX <> N .AND. !aCols[nX][nUsado+1]
				If ( aCols[nX][nPCodTab]+aCols[nX][nPCondPg]+aCols[nX][nPFormPg] == aCols[N][nPCodTab]+aCols[N][nPCondPg]+aCols[N][nPFormPg] )
					lRetorno := .F.
					Help(" ",1,"JAGRAVADO")
				EndIf
			EndIf
		Next nX
	EndIf
EndIf
RestArea(aArea)
Return(lRetorno)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ft100TOk1 ³ Autor ³Vendas Clientes        ³ Data ³ 10/05/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de Validacao da TudoOk                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ft100Tok1()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ft100Tok1()

Local lRetorno := .T.

Return(lRetorno)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ft100LOk2 ³ Autor ³Vendas Clientes        ³ Data ³ 09/05/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de Validacao da linha Ok                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ft100Lok2()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ft100Lok2()

Local aArea     := GetArea()
Local lRetorno  := .T.
Local nPCodPro  := aScan(aHeader,{|x| AllTrim(x[2])=="ACX_CODPRO"})
Local nPGrupo   := aScan(aHeader,{|x| AllTrim(x[2])=="ACX_GRUPO"})
Local nUsado    := Len(aHeader)
Local nX        := 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica os campos obrigatorios                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !aCols[n][nUsado+1]
	Do Case
		Case nPCodPro == 0 .OR. nPGrupo  == 0
			lRetorno := .F.
			Help(" ",1,"OBRIGAT",,RetTitle("ACX_CODPRO")+","+RetTitle("ACT_GRUPO"),4)
		Case Empty(aCols[n][nPCodPro]) .AND. Empty(aCols[n][nPGrupo]) .AND. n<>1
			lRetorno := .F.
			Help(" ",1,"OBRIGAT",,RetTitle("ACX_CODPRO")+","+RetTitle("ACT_GRUPO"),4)
	EndCase
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se nao ha valores duplicados                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno
		For nX := 1 To Len(aCols)
			If nX <> N .AND. !aCols[nX][nUsado+1]
				If ( aCols[nX][nPCodPro]+aCols[nX][nPGrupo] == aCols[N,nPCodPro]+aCols[N][nPGrupo] )
					lRetorno := .F.
					Help(" ",1,"JAGRAVADO")
				EndIf
			EndIf
		Next nX
	EndIf
EndIf
RestArea(aArea)
Return(lRetorno)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ft100LOk3 ³ Autor ³Vendas Clientes        ³ Data ³ 09/05/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de Validacao da linha Ok                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ft100Lok2()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ft100Lok3()

Local aArea     := GetArea()
Local lRetorno  := .T.
Local nPCodPro  := aScan(aHeader,{|x| AllTrim(x[2])=="ACN_CODPRO"})
Local nPGrupo   := aScan(aHeader,{|x| AllTrim(x[2])=="ACN_GRPPRO"})
Local nUsado    := Len(aHeader)
Local nX        := 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica os campos obrigatorios                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !aCols[n][nUsado+1]
	If !Empty(aCols[n][nPCodPro]) .AND. !Empty(aCols[n][nPGrupo]) 
		Help(" ",1,"FT100DESC")
		lRetorno := .F.
	Endif
Endif  
	
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se nao ha valores duplicados                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno
	For nX := 1 To Len(aCols)
		If nX <> N .AND. !aCols[nX][nUsado+1]
			If ( aCols[nX][nPCodPro]+aCols[nX][nPGrupo] == aCols[N,nPCodPro]+aCols[N][nPGrupo] )
				lRetorno := .F.
				Help(" ",1,"JAGRAVADO")
			EndIf
		EndIf
	Next nX
EndIf

RestArea(aArea)
Return(lRetorno)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Ft100TOk  ³ Autor ³Vendas Clientes        ³ Data ³ 10/05/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de Validacao da TudoOk                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Ft100Tok2()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ft100Tok2()

Local lRetorno := .T.

Return(lRetorno)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FtRegraNeg³ Autor ³Vendas Clientes        ³ Data ³15.05.2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Rotina de avaliacao da regra de Negocio                     ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do Cliente                                    ³±±
±±³          ³ExpC2: Loja do Cliente                                      ³±±
±±³          ³ExpC3: Tabela de Preco                                      ³±±
±±³          ³ExpC4: Condicao de Pagamento                                ³±±
±±³          ³ExpC5: Forma de Pagamento                                   ³±±
±±³          ³ExpA6: Array unidimensional contendo os codigos de produtos ³±±
±±³          ³       [1]-Codigo do Produto                                ³±±
±±³          ³       [2]-Item do pedido de venda                          ³±±
±±³          ³       [3]-Desconto do pedido                               ³±±
±±³          ³       [4]-Desconto permitido por regra                     ³±±
±±³          ³       [5]-Status "01" Blq. Regra "02" Blq.Verba            ³±±
±±³          ³ExpL7: Exibe Help                                           ³±±
±±³          ³ExpC8: Codigo do Vendedor p/ avaliacao de blq por verba     ³±±
±±³          ³ExpL9: Define se mostra o motivo de bloqueio por regra      ³±±
±±³          ³ExpL10: Mostra bloqueio por faturamento - Alagoas           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Negociacao valida                                    ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo avaliar a regra de Negocio    ³±±
±±³          ³conforme os parametros da rotina                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³                                                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function FtRegraNeg(cCliente, cLoja,     cTabPreco, cCondPg	,;
                    cFormPg,  aProdDesc, lHelp,     cCodVen, lVerBlqReg, lBlAlagoas)

Local aArea      := GetArea()
Local aAreaACS   := ACS->(GetArea())

Local aParam     := Nil
Local aGrupos    := {}    
Local aProdutos  := {}

Local cHoraAtual := Left( Time(), 5 )  
Local cDtHrAtual := DToS( dDataBase ) + cHoraAtual 
Local cDataAtual := DToS( dDataBase )

Local cDataVazia := Space( Len( DToS( ACS->ACS_DATATE ) ) ) 
Local cAliasACS  := ""
Local cGrpVen    := ""

Local dDataVazia := CToD( "" )    

Local lContinua  := .T.
Local lRetorno   := .T.
Local lContVerba := .T.  
Local lExecao	 := .T.
Local lVldProx	 := .F.

Local nX         := 0
Local nLoop      := 0 

Local cRegraBlq  := ""		//codigo da regra de negocio que bloqueou o lancamento
Local cItemRgBlq := ""		//item da regra de negocio que bloqueou o lancamento
Local nAbaRgBlq 			//aba da regra que gerou o bloqueio (negociacao, comercializacao, desconto)
Local cVerbaBlq  := ""		//codigo da verba de venda que causou o bloqueio de verba
Local cItemVbBlq := ""		//item da verba de venda que causou o bloqueio de verba

Local cFilSE4		:= xFilial("SE4")
Local cFilACS		:= xFilial("ACS")
Local cFilSA1		:= xFilial("SA1")

Local aInsert 	    := {}
Local nLenPrepStat  := 0 
Local nPosPrepared  := 0 
Local cMD5 		    := ""
Local lVerLib		:= A100FWExecStat()

Default cCliente  := Space( Len( SA1->A1_COD  ) )
Default cLoja     := Space( Len( SA1->A1_LOJA ) )
Default cTabPreco := Space( Len( DA0->DA0_CODTAB ) )
Default cCondPg   := Space( Len( DA0->DA0_CONDPG ) )
Default cFormPg   := Space( Len( ACO->ACO_FORMPG ) )
Default cCodVen   := Space( Len( SA3->A3_COD ) )
Default aProdutos := {} 
Default aProdDesc := {} 
Default lHelp     := .T.
Default lVerBlqReg := .F.  
Default lBlAlagoas := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se a forma de pagamnto estiver vazia pega a partir da condição.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty(cCondPg) .AND. Empty(cFormPg)
	cFormPg := Posicione( "SE4", 1, cFilSE4 + cCondPg, "E4_FORMA" ) 
EndIf

If Len(aProdDesc) > 0           
	Aeval(aProdDesc, {|x| If(x[9] .AND. Empty(Ascan(aProdutos, x[1]) ),Aadd(aProdutos,x[1]),)})
Endif	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Pesquisa a regra para o cliente                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

cAliasACS := "QUERYACS"

cQuery := ""
cQuery += "SELECT * FROM ? "
cQuery += "WHERE "
cQuery += "ACS_FILIAL= ? AND "
cQuery += "ACS_CODCLI= ? AND "
cQuery += "ACS_LOJA= ? AND "

cQuery += "( ( ACS_TPHORA='1' AND ( ? >ACS_DATDE OR ( ? =ACS_DATDE AND  ? >=ACS_HORDE ) ) AND "
cQuery += " ( ACS_DATATE= ? OR ( ? <ACS_DATATE OR ( ? =ACS_DATATE AND  ? <=ACS_HORATE ) ) ) ) OR "
cQuery += "( ACS_TPHORA='2' AND ? >=ACS_DATDE AND ( ACS_DATATE= ? OR "
cQuery += " ? <=ACS_DATATE ) AND ? >=ACS_HORDE AND ? <=ACS_HORATE ) ) AND "

cQuery += "D_E_L_E_T_=' '"

Aadd(aInsert, RetSqlName( "ACS" ))
Aadd(aInsert, cFilACS)
Aadd(aInsert, cCliente)
Aadd(aInsert, cLoja)
Aadd(aInsert, cDataAtual)
Aadd(aInsert, cDataAtual)
Aadd(aInsert, cHoraAtual)
Aadd(aInsert, cDataVazia)
Aadd(aInsert, cDataAtual)
Aadd(aInsert, cDataAtual)
Aadd(aInsert, cHoraAtual)
Aadd(aInsert, DToS( dDatabase ))
Aadd(aInsert, cDataVazia)
Aadd(aInsert, DToS( dDataBase ))
Aadd(aInsert, cHoraAtual)
Aadd(aInsert, cHoraAtual)

nLenPrepStat := Len(aInsert)
cMD5         := MD5(cQuery) 
If (nPosPrepared := Ascan(__aPrepared,{|x| x[2] == cMD5})) == 0 
	cQuery := ChangeQuery(cQuery)
	Aadd(__aPrepared,{IIf(lVerLib,FwExecStatement():New(cQuery),FWPreparedStatement():New(cQuery)),cMD5})
	nPosPrepared := Len(__aPrepared)
Endif 
__aPrepared[nPosPrepared][1]:SetUnsafe(1, aInsert[1])
For nX := 2 to nLenPrepStat
	__aPrepared[nPosPrepared][1]:SetString(nX, aInsert[nX])
Next 

If lVerLib
	__aPrepared[nPosPrepared][1]:OpenAlias(cAliasACS)
Else	
	cQuery := __aPrepared[nPosPrepared][1]:getFixQuery()
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasACS,.T.,.T.)
EndIf

aInsert := aSize(aInsert,0)

While !( cAliasACS )->( Eof() ) .AND. cFilACS == ( cAliasACS )->ACS_FILIAL .AND.;
			cCliente == ( cAliasACS )->ACS_CODCLI .AND.;
			cLoja    == ( cAliasACS )->ACS_LOJA 

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Avalia a regra para o item                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                           
	lRetorno   := .F. 		
	lExecao   := .T.
	FtRegNegIt(( cAliasACS )->ACS_CODREG, cTabPreco, cCondPg, cFormPg, aProdutos, ;
	           @aProdDesc, @lContinua, @lRetorno, @lContVerba, @lExecao, ;
	           @nAbaRgBlq, @cItemRgBlq, @cVerbaBlq, @cItemVbBlq, cCliente, cLoja, cCodVen)

	cRegraBlq := ( cAliasACS )->ACS_CODREG 	

	If  !lExecao
		If (!lContinua .and. !lRetorno)
			Exit 
		EndIf 		
	Else
		If (!lContinua .and. lRetorno)
			Exit 
		EndIf 								
    Endif

	( cAliasACS )->( DbSkip() ) 			

End

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fecha a area de trabalho da query                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
( cAliasACS )->( DbCloseArea() ) 
DbSelectArea( "ACS" ) 


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Pesquisa a regra para o grupo de clientes                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lContinua                                   

	SA1->( DbSetOrder( 1 ) ) 
	SA1->( DbSeek( cFilSA1 + cCliente + cLoja ) ) 	

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se o cliente esta inserido em um grupo de clientes            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	cGrpVen := SA1->A1_GRPVEN
	If !Empty( cGrpVen ) 
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Obtem a estrutura acima do grupo do cliente                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aGrupos := {} 
		MaCliStrUp( cGrpVen, @aGrupos )  
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Percorre todos os grupos para localizar uma regra                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

     	For nLoop := 1 To Len( aGrupos )   


			cAliasACS := "QUERYACS" 

			cQuery := ""
			cQuery += "SELECT * FROM "  + RetSqlName( "ACS" ) + " " 
			cQuery += "WHERE "					
			cQuery += "ACS_FILIAL='"    + cFilACS             + "' AND " 
			cQuery += "ACS_GRPVEN='"    + aGrupos[ nLoop, 1 ] + "' AND " 

			cQuery += "( ( ACS_TPHORA='1' AND ('" + cDataAtual + "'>ACS_DATDE OR ('" + cDataAtual + "'=ACS_DATDE AND '" + cHoraAtual + "'>=ACS_HORDE))  AND " 
			cQuery += " ( ACS_DATATE='" + cDataVazia +"' OR ('" + cDataAtual + "'<ACS_DATATE OR ('" + cDataAtual + "'=ACS_DATATE AND '" + cHoraAtual + "'<=ACS_HORATE ) ) ) ) OR " 

			cQuery += "( ACS_TPHORA='2' AND '" + DToS( dDatabase ) + "'>=ACS_DATDE AND ( ACS_DATATE='" + cDataVazia +"' OR "
			cQuery += "'" + DToS( dDataBase ) + "'<=ACS_DATATE ) AND '" + cHoraAtual + "'>=ACS_HORDE AND '" + cHoraAtual + "'<=ACS_HORATE ) ) AND "   

			cQuery += "D_E_L_E_T_=' '" 

			cQuery := ChangeQuery( cQuery ) 

			dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasACS, .F., .T. ) 


			While !( cAliasACS )->( Eof() ) .AND. cFilACS == ( cAliasACS )->ACS_FILIAL .AND.;
			       aGrupos[ nLoop, 1 ] == ( cAliasACS )->ACS_GRPVEN
						
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Avalia a regra para o item                                             ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lRetorno   := .F. 
				lExecao   := .T.
				FtRegNegIt(( cAliasACS )->ACS_CODREG, cTabPreco, cCondPg, cFormPg, aProdutos, ;
				           @aProdDesc, @lContinua, @lRetorno, @lContVerba, @lExecao, ;
				           @nAbaRgBlq, @cItemRgBlq, @cVerbaBlq, @cItemVbBlq, cCliente, cLoja, cCodVen)

				cRegraBlq := ( cAliasACS )->ACS_CODREG 	

				If  !lExecao
					If (!lContinua .and. !lRetorno)
						Exit 
					EndIf 		
				Else
					If (!lContinua .and. lRetorno)
						Exit 
					EndIf 								
		    	Endif

				( cAliasACS )->( DbSkip() )	

			End

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Fecha a area de trabalho da query                                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			( cAliasACS )->( DbCloseArea() ) 
			DbSelectArea( "ACS" ) 

			If !lContinua 
				Exit
			EndIf 	

		Next nLoop 

	EndIf 

EndIf 


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Pesquisa a regra para o codigo de clientes e grupo em branco           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lContinua 

	cAliasACS := "QUERYACS" 

	cQuery := ""
	cQuery += "SELECT * FROM ? " 
	cQuery += "WHERE "			
	cQuery += "ACS_FILIAL= ? AND " 
	cQuery += "ACS_CODCLI= ? AND " 
	cQuery += "ACS_LOJA= ? AND "
	cQuery += "ACS_GRPVEN= ? AND "

	cQuery += "( ( ACS_TPHORA='1' AND ( ? >ACS_DATDE OR ( ? =ACS_DATDE AND ? >=ACS_HORDE ) ) AND " 
	cQuery += " ( ACS_DATATE= ? OR ( ? <ACS_DATATE OR ( ? =ACS_DATATE AND ? <=ACS_HORATE ) ) ) ) OR " 

	cQuery += "( ACS_TPHORA='2' AND ? >=ACS_DATDE AND ( ACS_DATATE= ? OR "
	cQuery += " ? <=ACS_DATATE ) AND ? >=ACS_HORDE AND ? <=ACS_HORATE ) ) AND "   

	cQuery += "D_E_L_E_T_=' '" 

	Aadd(aInsert, RetSqlName("ACS"))
	Aadd(aInsert, cFilACS)
	Aadd(aInsert, Space(Len(ACS->ACS_CODCLI)))
	Aadd(aInsert, Space(Len(ACS->ACS_LOJA)))
	Aadd(aInsert, Space(Len(ACS->ACS_GRPVEN)))
	Aadd(aInsert, cDataAtual)
	Aadd(aInsert, cDataAtual)
	Aadd(aInsert, cHoraAtual)
	Aadd(aInsert, cDataVazia)
	Aadd(aInsert, cDataAtual)
	Aadd(aInsert, cDataAtual)
	Aadd(aInsert, cHoraAtual)
	Aadd(aInsert, DToS(dDatabase))
	Aadd(aInsert, cDataVazia)
	Aadd(aInsert, DToS(dDatabase))
	Aadd(aInsert, cHoraAtual)
	Aadd(aInsert, cHoraAtual)

	nLenPrepStat := Len(aInsert)
	cMD5         := MD5(cQuery) 
	If (nPosPrepared := Ascan(__aPrepared,{|x| x[2] == cMD5})) == 0 
		cQuery := ChangeQuery(cQuery)
		Aadd(__aPrepared,{IIf(lVerLib,FwExecStatement():New(cQuery),FWPreparedStatement():New(cQuery)),cMD5})
		nPosPrepared := Len(__aPrepared)
	Endif 
	__aPrepared[nPosPrepared][1]:SetUnsafe(1, aInsert[1])
	For nX := 2 to nLenPrepStat
		__aPrepared[nPosPrepared][1]:SetString(nX, aInsert[nX])
	Next 
	
	If lVerLib
		__aPrepared[nPosPrepared][1]:OpenAlias(cAliasACS)
	Else
		cQuery := __aPrepared[nPosPrepared][1]:getFixQuery()
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasACS,.T.,.T.)
	EndIf

	aInsert := aSize(aInsert,0)

	While !( cAliasACS )->( Eof() ) 
	              
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Avalia a regra para o item                                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		lRetorno   := .F. 
		lExecao   := .T.
		lVldProx  := .F.
		FtRegNegIt(( cAliasACS )->ACS_CODREG, cTabPreco, cCondPg, cFormPg, aProdutos, ;
		           @aProdDesc, @lContinua, @lRetorno, @lContVerba, @lExecao, ;
		           @nAbaRgBlq, @cItemRgBlq, @cVerbaBlq, @cItemVbBlq, cCliente, cLoja, ;
				   cCodVen, @lVldProx)

		cRegraBlq := ( cAliasACS )->ACS_CODREG
		
		( cAliasACS )->( DbSkip() )	

		//Caso ainda haja regra que possa bloquear a movimentação continua processando
		If lVldProx .And. Empty(cItemRgBlq) .And. !( cAliasACS )->( Eof() )
			lContinua := .T.
		EndIf
		
		If  !lExecao
			If (!lContinua .and. !lRetorno)
				Exit 
			EndIf 		
		Else
			If (!lContinua .and. lRetorno)
				Exit 
			EndIf 								
    	Endif

	End

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Fecha a area de trabalho da query                                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	( cAliasACS )->( DbCloseArea() ) 
	DbSelectArea( "ACS" ) 

EndIf

If !(lRetorno .AND. lContVerba) .AND. lHelp 
	Help(" ",1,"FTREGRANEG")
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso achou bloqueio de regra marca todos os registros dos pedidos como ³
//³ bloqueado                                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lRetorno .And. Upper(FunName())<>"TMKA271"//No TMK este cpo indica bloqueio do produto. 
	For nLoop := 1 to Len(aProdDesc)
		aProdDesc[nLoop,7] := "01"
	Next
Endif	


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica para nao mostrar a msg de bloqueio                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lVerBlqReg 

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Caso achou bloqueio de regra ou verba mostra mensagem de bloqueio      ³
	//³ por regra/verba. Mostra somente se for a rotina liberacao de regra ou  ³
	//³ se estiver com parametro habilitado.                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (!(lRetorno .AND. lContVerba)) 		
		//sempre mostra motivo do bloqueio na liberacao por regra, senao so mostra com parametro habilitado
		//Não mostra o motivo de bloqueio se vier da rotina de Tranferência de Filiais (MATA310)
		If (Upper(FunName()) <> "MATA310") .And. ( (Upper(FunName()) == "FATA210") .OR. (SuperGetMv("MV_VEBLQRG", .F., .F.)) )
			VerBlqReg(cRegraBlq, nAbaRgBlq, cItemRgBlq, cVerbaBlq, cItemVbBlq)
		EndIf
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Se nao bloqueou por regra de negocio verifica regra especifica de alagoas ³
		//³Se nao for chamado pelo fata210 (liberacao regras precisa verificar se    ³
		//³parametro MV_VERBLQRG == .T.                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ((Upper(FunName())== "FATA210") .OR. (SuperGetMv("MV_VEBLQRG", .F., .F.))) .AND. ;
		((lBlAlagoas) .AND. (SC5->C5_BLQ == "1") .AND. (AllTrim(SuperGetMv("MV_ESTADO")) == "AL"))
			VerBlqReg("BLQAL", 0, "", "", "")
		EndIf
				
	EndIf

EndIf	

RestArea(aAreaACS)
RestArea(aArea)

Return(lRetorno .AND. lContVerba)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³FtRegNegIt³ Autor ³ Vendas Clientes       ³ Data ³14/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Avaliacao dos itens da regra de negocios                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FtRegNegIt(ExpC1,ExpC2,ExpC3,ExpC4,ExpC5,ExpL1,ExpL2)      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo da regra                                      ³±±
±±³          ³ExpC2: Tabela de Preco                                      ³±±
±±³          ³ExpC3: Condicao de Pagamento                                ³±±
±±³          ³ExpC4: Forma de Pagamento                                   ³±±
±±³          ³ExpC5: Codigo do produto                                    ³±±
±±³          ³ExpL1: Indica se continua pesquisa ( pass. por referencia ) ³±±
±±³          ³ExpL2: Indica se regra ou excessao ( pass. por referencia ) ³±±
±±³          ³ExpL3: Indica se continua verba    ( pass. por referencia ) ³±±
±±³          ³ExpL4: Indica se verifica verba                             ³±±
±±³          ³ExpL5: Indica validacao de operacoes de excecao             ³±±
±±³          ³ExpN11: Aba da regra de negocio que bloqueou o lancamento   ³±±
±±³          ³ExpC12: Item da regra de negocio que bloqueou o lancamento  ³±±
±±³          ³ExpC13: Verba de venda que bloqueou o lancamento            ³±±
±±³          ³ExpC14: Item da verba de venda que bloqueou o lancamento    ³±±
±±³          ³ExpC15: Cliente p/ analisar blqueio por verba               ³±±
±±³          ³ExpC16: Loja p/ analisar blqueio por verba                  ³±±
±±³          ³ExpC17: Vendedor p/ analisar blqueio por verba              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo avaliar os itens da regra     ³±±
±±³          ³de negocio especificada conforme os parametros              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³                                                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FtRegNegIt(cCodReg		,cTabPreco	,cCondPg	,cFormPg	,;
					aProdutos	,aProdDesc	,lContinua	,lRetorno	,;
					lContVerba  ,lExecao	,nAbaRgBlq	,cItemRgBlq	,;
					cVerbaBlq	,cItemVbBlq	,cCliente	,cLoja		,;
					cCodVen		,lVldProx )
                                                      
Local aSearch   := {} 											// Array com variantes de busca no DbSeek para caso utilizado um grupo de produtos na regra, ou somente um produto
Local cGrupo    := ""											// Grupo de produtos da regra
Local cCodPro   := ""											// Código do produto da regra
Local lContItem := .T.											// Se encontrar algum grupo ou produto na regra sai do loop
Local nX        := 0											// Contador
Local nLoop     := 0 											// Contador
Local nLoop2    := 0											// Contador
Local lSomaVer  := (SuperGetMv("MV_SOMAVER",.F.,"S") == "S")	// Indica se caso o vendedor realize uma venda com preco maior que o de tabela, a diferenca sera adicionada a verba correspondente.
Local aRegras	:= {}											// Regras e excecões encontradas para essa regra de negociação
Local lAchouACX := .T.
Local lProdACX  := .T.
Local lFT100RNI := ExistBlock('FT100RNI')
Local aRetREG   := {}
Local cFilACT   := xFilial("ACT")
Local cFilSB1   := xFilial("SB1")
Local cFilACX   := xFilial("ACX")
Local cFilACN   := xFilial("ACN")
Local cQuery    := ""	// Query utilizada no select
Local cAliasQry := ""	// Alias da query
Local lContDesc := .T.	// Utilizado para procurar algum bloqueio por regra
Local nCntFor   := 0 	// Contador
Local aStruACN  := {}	// Estrutura utilizado no loop para correção dos campos retornados pelo TOP
Local nDcDescont:= GetSx3Cache("ACN_DESCON","X3_DECIMAL")
Local lLibACT	:= .F.
Local lBlqDesc	:= .F.
Local lTemDesc	:= .F.

Default lVldProx := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Adiciona regras a uma array para posterior análise.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ACT->( DbSetOrder( 1 ) )
If ACT->(DbSeek( cFilACT + cCodReg ))
	Do While (	ACT->ACT_FILIAL		== cFilACT .AND.	;
				ACT->ACT_CODREG		== cCodReg )
		aAdd( aRegras, { ACT->ACT_TPRGNG, ACT->ACT_CODTAB, ACT->ACT_CONDPG, ACT->ACT_FORMPG, ACT->ACT_ITEM  } )
		ACT->(DbSkip())	
	End
EndIf

If Len( aRegras ) > 0
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Se só houver excecão, parte do princípio que está aprovado³
	//³até que alguma excecão bloqueie.                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If aScan( aRegras, { |x| x[1] == "2" } ) > 0 .AND. aScan( aRegras, { |x| x[1] == "1" } ) == 0
		lRetorno := .T. 
		lExecao   := .F.
		For nX := 1 To Len( aRegras )
			If(	IF(Empty(aRegras[nX,2]), .T., AllTrim(aRegras[nX,2]) == Alltrim(cTabPreco) )	.AND.;
				IF(Empty(aRegras[nX,3]), .T., AllTrim(aRegras[nX,3]) == Alltrim(cCondPg) )	.AND.;
				IF(Empty(aRegras[nX,4]), .T., AllTrim(aRegras[nX,4]) == Alltrim(cFormPg) )	)
				lRetorno := .F.
				lContinua := .F.
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				cItemRgBlq := aRegras[nX,5] //item da regra que gerou bloqueio
				nAbaRgBlq := 1 //bloqueio por regra de negociacao (aba negociacao)
				
			EndIf
		Next		
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Se não, Verifica a liberação item a item das regras e excecões.³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Else
		For nX := 1 To Len( aRegras )
			If(	IF(Empty(aRegras[nX,2]), .T., AllTrim(aRegras[nX,2]) == Alltrim(cTabPreco) )	.AND.;
				IF(Empty(aRegras[nX,3]), .T., AllTrim(aRegras[nX,3]) == Alltrim(cCondPg) )	.AND.;
				IF(Empty(aRegras[nX,4]), .T., AllTrim(aRegras[nX,4]) == Alltrim(cFormPg) )	)
				lRetorno  := ( aRegras[nX,1] == "1" )
				lContinua := .F.
				lExecao   := ( aRegras[nX,1] == "1" )
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !lRetorno
					cItemRgBlq := aRegras[nX,5] //item da regra que gerou bloqueio 
					nAbaRgBlq := 1 //bloqueio por regra de negociacao (aba negociacao)
				Else
					lLibACT := .T.	
				EndIF
				
				Exit
			Else
				lRetorno  := .F. 
				lContinua := .F.	
				
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Guarda motivo do bloqueio, para mostrar msg ao usuario.        ³
				//³Bloqueado por nao achar nenhum item que atenda a regra         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !lRetorno
					nAbaRgBlq := 1 //bloqueio por regra de negociacao (aba negociacao) 
					
				EndIF								
			EndIf
		Next
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Processa os itens de comercializacao, mesmo que tenha encontrado       ³
//³ um item negociacao valido, para localizar uma possivel excessao        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRetorno .OR. lContinua 

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Percorre todos os produtos                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nLoop2 := 1 To Len( aProdutos )  
	
		cCodPro := aProdutos[ nLoop2 ] 

		SB1->( DbSetOrder( 1 ) ) 
	   If SB1->( DbSeek( cFilSB1 + cCodPro ) ) 
	
			cGrupo := SB1->B1_GRUPO 
			lContItem := .T.
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Alimenta as opcoes de pesquisa                                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If Empty( cGrupo ) 
				aSearch := { { SB1->B1_COD, Space( Len( SB1->B1_GRUPO ) ) } }
			Else			
			   aSearch := { { SB1->B1_COD, Space( Len( SB1->B1_GRUPO ) ) },;
			   				{ Space( Len( SB1->B1_COD ) ), cGrupo } } 	
			EndIf 
	
			ACX->( DbSetOrder( 2 ) )
			If !ACX->( dbSeek( cFilACX + cCodReg ) ) 
				lAchouACX := .F. 
			Else
 				If Empty(ACX->ACX_CODPRO) .And. Empty(ACX->ACX_GRUPO) .And. !ACX->(EOF())			
					lRetorno  := ACX->ACX_TPRGNG == "1"
					lContinua := .F.
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !lRetorno
						cItemRgBlq:=ACX->ACX_ITEM //item da regra que gerou bloqueio 
						nAbaRgBlq := 2 //bloqueio por regra de comercializacao (aba Comercializacao)
					EndIf 
					
					Exit
				Endif
			EndIf
		
			For nLoop := 1 To Len( aSearch ) 
				If ACX->( DbSeek( cFilACX + cCodReg + aSearch[ nLoop, 1 ] + aSearch[ nLoop, 2 ] ) ) 
					lRetorno  := ACX->ACX_TPRGNG == "1"
					lContinua := .F.
					lContItem := .F.
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !lRetorno
						cItemRgBlq :=ACX->ACX_ITEM //item da regra que gerou bloqueio 
						nAbaRgBlq  := 2 //bloqueio por regra de comercializacao (aba Comercializacao)
					EndIf 
					
					Exit
		     	EndIf
			Next nLoop  
			
			If  lContItem .And. ACX->( dbSeek( cFilACX + cCodReg ) ) .And. ;
				(!Empty(ACX->ACX_CODPRO) .Or. !Empty(ACX->ACX_GRUPO)) .And. ACX->ACX_TPRGNG == "1"
		   		lProdACX := .F.
			EndIf
  			
			If Upper(FunName())=="TMKA271"
  				If lContItem .And. !lProdACX 
					aProdDesc[nLoop2,7] := "01"	 
				ElseIf !lContItem .And. lProdACX 
					aProdDesc[nLoop2,7] := ""
				EndIf
			EndIf
		Endif    
	Next nLoop2 	
	
EndIf 

// ACX contém pelo menos um registro cadastrado e algum produto do pedido nao foi encontrado -> REPROVAR.
// Se ACX vazia, APROVAR.  
If lAchouACX .And. !lProdACX
	lRetorno := .F. 
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (! lRetorno)
		nAbaRgBlq := 2 //bloqueio por regra de comercializacao (aba Comercializacao)
	EndIf
	
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se existe regras de desconto de verba.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If lRetorno .AND. lContVerba

	aStruACN:= ACN->(dbStruct())
       
	For nLoop := 1 to Len(aProdDesc)
		
		lContDesc := .T.
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se o item deve ser analisado          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    
		If aProdDesc[ nLoop, 9 ]
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Se o preco de lista for diferente do de venda  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			
			Do Case
			
				Case aProdDesc[nLoop,3] < aProdDesc[nLoop,4]
	
					lTemDesc := .T.

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Busca regra por Produto Preenchido + Grupo em branco      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					cAliasQry := "QRYACN"

					cQuery := "SELECT ACN_DESCON , ACN_ITEM FROM "
					cQuery += RetSqlName("ACN")+ " ACN " 
					cQuery += " WHERE "
					cQuery += "ACN_FILIAL = '"+cFilACN+ "' AND "
					cQuery += "ACN_CODREG = '"+cCodReg+"' AND "
					cQuery += "ACN_CODPRO = '"+aProdDesc[nLoop,1]+"' AND "
					cQuery += "ACN_GRPPRO = '"+Space(Len(ACN->ACN_GRPPRO))+"' AND "
					cQuery += "ACN.D_E_L_E_T_ = ' '"

					cQuery := ChangeQuery( cQuery )        

					dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQRY, .F., .T. ) 

					For nCntFor := 1 To Len(aStruACN)
						If ( aStruACN[nCntFor,2]<>"C" )
							TcSetField(cAliasQry,aStruACN[nCntFor,1],aStruACN[nCntFor,2],aStruACN[nCntFor,3],aStruACN[nCntFor,4])
						EndIf
					Next nCntFor

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Marca flag para verificacao da verba           ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					If (cAliasQRY)->(!Eof())
						lContDesc := .F.
						If Round(aProdDesc[nLoop,5],nDcDescont) > (cAliasQry)->ACN_DESCON
							aProdDesc[nLoop,6] := (cAliasQry)->ACN_DESCON                  					
							aProdDesc[nLoop,7] := "02"                  
							lContVerba:= .F.
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							cItemRgBlq :=  (cAliasQry)->ACN_ITEM //item da regra que gerou bloqueio 
							lBlqDesc := .T.
						Endif
					Endif

					DbSelectArea(cAliasQry)
					DbCloseArea()

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Se nao encontrou ,busca por Produto em Branco + Grupo Preenchido³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ					
					If lContDesc

						SB1->(DbSetOrder(1))
						If SB1->(DbSeek(cFilSB1+aProdDesc[nLoop,1]))
					
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Se nao existe grupo cadastrado nao traz regra  ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If !Empty(SB1->B1_GRUPO)
							
								cAliasQry := "QRYACN"
							
								cQuery := "SELECT ACN_DESCON , ACN_ITEM FROM "
								cQuery += RetSqlName("ACN")+ " ACN " 
								cQuery += " WHERE "
								cQuery += "ACN_FILIAL = '"+cFilACN+ "' AND "
								cQuery += "ACN_CODREG = '"+cCodReg+"' AND "
								cQuery += "ACN_CODPRO = '"+Space(Len(ACN->ACN_CODPRO))+"' AND "
								cQuery += "ACN_GRPPRO = '"+SB1->B1_GRUPO+"' AND "
								cQuery += "ACN.D_E_L_E_T_ = ' '"
						
								cQuery := ChangeQuery( cQuery )        
			
								dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. ) 
		
								For nCntFor := 1 To Len(aStruACN)
									If ( aStruACN[nCntFor,2]<>"C" )
										TcSetField(cAliasQry,aStruACN[nCntFor,1],aStruACN[nCntFor,2],aStruACN[nCntFor,3],aStruACN[nCntFor,4])
									EndIf
								Next nCntFor
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³Marca flag para verificacao da verba           ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								If (cAliasQRY)->(!Eof())						
									lContDesc := .F.                            										         
									If Round(aProdDesc[nLoop,5],nDcDescont) > (cAliasQry)->ACN_DESCON                            
										aProdDesc[nLoop,6] := (cAliasQry)->ACN_DESCON                  													
										aProdDesc[nLoop,7] := "02"         
										lContVerba:= .F.	
										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
										//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
										cItemRgBlq :=  (cAliasQry)->ACN_ITEM //item da regra que gerou bloqueio
										lBlqDesc := .T.					
									Endif
								Endif
	
								DbSelectArea(cAliasQry)
								DbCloseArea()
							Endif		
							
						Endif	

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Se nao encontrou ,busca por Produto em Branco + Grupo em Branco ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ											
						If lContDesc

							cAliasQry := "QRYACN"

							cQuery := "SELECT ACN_DESCON , ACN_ITEM FROM "
							cQuery += RetSqlName("ACN")+ " ACN " 
							cQuery += " WHERE "
							cQuery += "ACN_FILIAL = '"+cFilACN+ "' AND "
							cQuery += "ACN_CODREG = '"+cCodReg+"' AND "
							cQuery += "ACN_CODPRO = '"+Space(Len(ACN->ACN_CODPRO))+"' AND "
							cQuery += "ACN_GRPPRO = '"+Space(Len(ACN->ACN_GRPPRO))+"' AND "
							cQuery += "ACN.D_E_L_E_T_ = ' '"

							cQuery := ChangeQuery( cQuery )        

							dbUseArea( .T., "TOPCONN", TcGenQry( , , cQuery ), cAliasQry, .F., .T. ) 

							For nCntFor := 1 To Len(aStruACN)
								If ( aStruACN[nCntFor,2]<>"C" )
									TcSetField(cAliasQry,aStruACN[nCntFor,1],aStruACN[nCntFor,2],aStruACN[nCntFor,3],aStruACN[nCntFor,4])
								EndIf
							Next nCntFor
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Marca flag para verificacao da verba           ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If (cAliasQRY)->(!Eof())						
								lContDesc := .F.
								If Round(aProdDesc[nLoop,5],nDcDescont) > (cAliasQry)->ACN_DESCON                            
									aProdDesc[nLoop,6] := (cAliasQry)->ACN_DESCON                  													
									aProdDesc[nLoop,7] := "02"         
									lContVerba:= .F.		
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									cItemRgBlq :=  (cAliasQry)->ACN_ITEM //item da regra que gerou bloqueio
									lBlqDesc := .T.
								Endif
							Endif						
							DbSelectArea(cAliasQry)
							DbCloseArea()							
						EndIf
					Endif
				
				Case aProdDesc[nLoop,3] > aProdDesc[nLoop,4] .AND. lSomaVer .AND. aProdDesc[nLoop,4]>0
					aProdDesc[nLoop,6] := 0
					aProdDesc[nLoop,7] := "02"
					lContVerba:= .F.																		

			EndCase
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Guarda motivo do bloqueio, para mostrar msg ao usuario         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If (!lContVerba)
				nAbaRgBlq := 3	  //bloqueio por regra de desconto (aba desconto)	
		
				If	FtVerbaVen("SC5",	"SC6",	cCliente,	cLoja,;
					           cCodVen, aProdDesc[nLoop][1], aProdDesc[nLoop], .F., @cVerbaBlq, @cItemVbBlq) == "1"
					
						nAbaRgBlq	:=0
						cItemRgBlq	:=""
						cVerbaBlq	:=""
						cItemVbBlq	:=""
												
				EndIf
		
			EndIf

			If !lContinua .And. lLibACT .And. lTemDesc .And. lContDesc .And. !lBlqDesc 
				lVldProx := .T.
			EndIf
		Endif
	Next
		
Endif

If lFT100RNI
	aRetREG := ExecBlock('FT100RNI',.F.,.F.,{cCodReg,cTabPreco,cCondPg,cFormPg,aProdutos,aProdDesc,lContinua,lRetorno,lContVerba,lExecao})
	If ValType(aRetREG) == "A" .And. Len(aRetREG) == 5 .And. ValType(aRetREG[1]) == "A" .And. ValType(aRetREG[2]) == "L" .And.;
	    ValType(aRetREG[3]) == "L" .And. ValType(aRetREG[4]) == "L" .And. ValType(aRetREG[5]) == "L"
		aProdDesc  := aRetREG[1]
		lContinua  := aRetREG[2]
		lRetorno   := aRetREG[3]
		lContVerba := aRetREG[4]
		lExecao    := aRetREG[5]
	EndIf
EndIf
Return( .T. ) 


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Ft100Fld  ³ Autor ³Vendas Clientes        ³ Data ³13.01.2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de Tratamento dos Folders                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Folder de Destino                                    ³±±
±±³          ³ExpN2: Folder Atual                                         ³±±
±±³          ³ExpO3: Objeto do Folder                                     ³±±
±±³          ³ExpA4: Array com as getdados.                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Ft100Fld(nFldDst,nFldAtu,oFolder,aGetDad)


Local lRetorno:= .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Efetua a Validacao da GetDados                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( aGetDad[nFldAtu]:TudoOk() )

	lRetorno := .T.
	aGetDad[nFldAtu]:oBrowse:lDisablePaint := .T.
	N := Max(aGetDad[nFldDst]:oBrowse:nAt,1)
	
	aGetDad[nFldDst]:oBrowse:nColPos := 1
	aGetDad[nFldDst]:oBrowse:lDisablePaint := .F.
	aGetDad[nFldDst]:oBrowse:Refresh(.T.)
EndIf
Return(lRetorno)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Ft100Ok   ³ Autor ³Vendas Clientes        ³ Data ³09.11.2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao da Enchoicebar                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Getdados 1                                           ³±±
±±³          ³ExpO2: GetDados 2                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Ft100Ok(oGetd1		,oGetd2		,oGetD3	,aColsNeg	,;
						aColsCom	,aColsDes	,oFolder, nOpc)

Local lRetorno	:= .T.                                                                 
Local lFT100TOK	:= .F.

If ( Type("lFT100Auto") == "U" .Or. !lFT100Auto ) 
	lRetorno := Eval(oFolder:bSetOption,1)

	If lRetorno 
		oFolder:nOption := 1
		If !oGetd1:TudoOk()
			lRetorno := .F.
		Endif
	Endif

	If lRetorno
		lRetorno := Eval(oFolder:bSetOption,2)
		If lRetorno
			oFolder:nOption := 1
			If !oGetd2:TudoOk()
				lRetorno := .F.
			EndIf
		EndIf
	EndIf

	If lRetorno
		lRetorno := Eval(oFolder:bSetOption,3)
		If lRetorno
			oFolder:nOption := 3
			If !oGetd3:TudoOk()
				lRetorno := .F.
			EndIf
		EndIf
	Endif	

	If lRetorno
		aColsNeg := aClone(oGetD1:aCols)
		aColsCom := aClone(oGetD2:aCols)
		aColsDes := aClone(oGetD3:aCols)
	Endif	

	If lRetorno .and. ExistBlock( "FT100TOK" )
		lFT100TOK := ExecBlock( "FT100TOK",.F.,.F.,{oGetD1, oGetD2, oGetD3} )
		If ValType( lFT100TOK ) = "L"
			lRetorno := lFT100TOK
		Endif  	
	Endif 
EndIf

If ValType(nOpc) == "N"

	//Validações apenas para inserir, alterar e copiar
	If (nOpc == 3 .OR. nOpc == 4 .OR. nOpc == 6)
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Validação para casos de cliente preenchido e loja em branco             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (M->ACS_CODCLI != Nil .AND. !EMPTY(M->ACS_CODCLI)) .AND. (M->ACS_LOJA == Nil .OR. EMPTY(M->ACS_LOJA) )
			lRetorno := .F.
			Help(" ",1,"FT100SEMLOJA")
		EndIf
	
	EndIf
	
EndIf

Return(lRetorno)	

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³MenuDef   ³ Autor ³ Vendas Clientes       ³ Data ³01/09/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Utilizacao de menu Funcional                               ³±±
±±³          ³                                                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Array com opcoes da rotina.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Parametros do array a Rotina:                               ³±±
±±³          ³1. Nome a aparecer no cabecalho                             ³±±
±±³          ³2. Nome da Rotina associada                                 ³±±
±±³          ³3. Reservado                                                ³±±
±±³          ³4. Tipo de Transa‡„o a ser efetuada:                        ³±±
±±³          ³	  1 - Pesquisa e Posiciona em um Banco de Dados           ³±±
±±³          ³    2 - Simplesmente Mostra os Campos                       ³±±
±±³          ³    3 - Inclui registros no Bancos de Dados                 ³±±
±±³          ³    4 - Altera o registro corrente                          ³±±
±±³          ³    5 - Remove o registro corrente do Banco de Dados        ³±±
±±³          ³5. Nivel de acesso                                          ³±±
±±³          ³6. Habilita Menu Funcional                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function MenuDef()
     
Private aRotina := {	{ STR0001,"AxPesqui"	,0,1,0,.F.},;		// "Pesquisar"
						{ STR0002,"Ft100RNeg"	,0,2,0,NIL},;		// "Visualizar"
						{ STR0003,"Ft100RNeg"	,0,3,0,NIL},;		// "Incluir"
						{ STR0004,"Ft100RNeg"	,0,4,0,NIL},;		// "Alterar"
						{ STR0005,"Ft100RNeg"	,0,5,0,NIL},;		// "Excluir"
						{ STR0006,"Ft100RNeg"	,0,6,0,NIL}}		// "Copiar"

If ExistBlock("FT100MNU")
	ExecBlock("FT100MNU",.F.,.F.)
EndIf

Return(aRotina)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    VldCliente ³ Autor ³Vendas Clientes        ³ Data ³09.10.2009³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao do campo ACS_CODCLI                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³logico, indicando se ja não esta cadastrado cliente/loja    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function VldCliente()
Local lReturn := .F.

lReturn := ExistCpo("SA1",M->ACS_CODCLI+RTRIM(M->ACS_LOJA),,,,!EMPTY(M->ACS_LOJA)).And.ExistChav("ACS",M->ACS_CODCLI+M->ACS_LOJA,2)
  
Return(lReturn)   


/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ft100GrPrd³Autor  ³Rodrigo T. Silva 		³ Data ³11/11/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Interface de Grade de Produtos - Regras de Negocio		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³FATA100													   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Ft100Prod() 

Local lRet 		  := .T.
Local nITEMGR 	  := aScan(aHeader,{|x| AllTrim(x[2]) == "ACN_ITEMGR"})
Local nDESPRO 	  := aScan(aHeader,{|x| AllTrim(x[2]) == "ACN_DESPRO"})
Local nDESCON 	  := aScan(aHeader,{|x| AllTrim(x[2]) == "ACN_DESCON"})
Local lGrade  	  := !Empty(nITEMGR) .And. MaGrade()
Local cProduto	  := M->ACN_CODPRO
Local lReferencia := MatGrdPrrf(@cProduto)

If lGrade                              
	oGrade:MontaGrade(n,cProduto,.T.,,lReferencia)
EndIf

If lReferencia
	aCols[n,nITEMGR] := "01"
	aCols[n,nDESPRO] := oGrade:GetDescProd(M->ACN_CODPRO)
ElseIf (lRet := ExistCpo("SB1",M->ACN_CODPRO))
	aCols[n,nDESPRO] := Posicione("SB1",1,xFilial("SB1")+M->ACN_CODPRO,"B1_DESC")
	If !Empty(nITEMGR)
		aCols[n,nITEMGR] := CriaVar("ACN_ITEMGR")
	EndIf
EndIf
aCols[n,nDESCON] := 0

Return lRet

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ft100GrDes³Autor  ³Rodrigo T. Silva 		³ Data ³11/11/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Se a Grade estiver ativa, efetua a entrada de dados na colu- ³±±
±±³          ³na de descontos.                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³FATA100													   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Function Ft100GrDes()
Local lRet        := .T.
Local nCODPRO     := aScan(aHeader,{|x| AllTrim(x[2]) == "ACN_CODPRO"})
Local lGrade  	  := MaGrade()
Local cProduto	  := aCols[n,nCODPRO]
Local lReferencia := MatGrdPrrf(@cProduto)
Local cCampo 	  := Substr(ReadVar(),4)

If cCampo == "ACN_DESCON" .And. lReferencia .And. ((M->ACN_DESCON < 0) .Or. (M->ACN_DESCON > 100))
	Aviso(STR0011,STR0012,{"Ok"}) // Atenção, Valor percentual deve estar entre 0 e 100.
	lRet := .F.
ElseIf lGrade .And. MatGrdPrrf(@cProduto)
	oGrade:cProdRef := cProduto
	oGrade:lShowGrd := .T.
	oGrade:nPosLinO := n	
	oGrade:Show("ACN_DESCON")	
	&(ReadVar()) := oGrade:SomaGrade("ACN_DESCON",n)
EndIf
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Ft100VlGr ºAutor  ³Rodrigo T. Silva	 º Data ³  14/05/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Valida valores de descontos digitados na grade.            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ FATA100                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Ft100VlGr()
Local lRet := .T.
oGrade:lShowMsgDiff := .F.
If oGrade:cCpo == "ACN_DESCON" .And. &(ReadVar()) > 100
	Aviso(STR0011,STR0012,{"Ok"})// Atenção, Valor percentual deve estar entre 0 e 100.
	lRet := .F.
EndIf
oGrade:lShowMsgDiff := .T.
Return lRet



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³VerBlqReg ºAutor  ³ Vendas & CRM       º Data ³  15/12/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Mostra o motivo de um bloqueio por regra ou verba.          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºSintaxe   ³VerBlqReg                                                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ExpC1: Codigo da regra que gerou o bloqueio                 º±±
±±º          ³ExpN2: Aba da regra que gerou o bloqueio                    º±±
±±º          ³ExpC3: Item da regra que gerou o bloqueio                   º±±
±±º          ³ExpC4: Codigo da verba de venda                             º±±
±±º          ³ExpC5: Item da verba de venda                               º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function VerBlqReg(cCodRegra, nAbaRegra, cItemRegra, cCodVerba, cItemVerba)


Local aArea 		:= GetArea()	     
Local aColsAnt 		:={} 			
Local aHeaderAnt 	:= {}		
Local nElemAnt
Local aAreaACS							//regra de negocio (cabecalho)	
Local aAreaACK 							//verba de venda (cabecalho)			
Local cMsgMotivo 	:= "" 				//mensagem com o motivo do bloqueio
Local cTipoBlq 		:= STR0013 			//tipo do bloqueio (regra ou verba)
Local nMsgOpc  							//opcao selecionada pelo usuario na mensagem (OK, VerRegra ou Verba)
Local aBotoes		:= {'Ok', STR0013}	//Lista de botoes que serao exibidos (regra e verba, ou somente regra)
Local lAntINCLUI := INCLUI

IF ((cCodRegra <> "") .AND. (nAbaRegra <> 0)) .OR. (AllTrim(cCodRegra) == "BLQAL")
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Guarda o estado atual para restaurar no final. Em alguns pontos não existe as variaveis    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	If Type("aCols") == "A"
		aColsAnt := aClone(Acols)
	EndIf
	
	If Type("aHeader") == "A"
		aHeaderAnt := aClone(aHeader)
	EndIf
	
	If Type("n") == "N"
		nElemAnt := n
	EndIf	
	
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³bloqueio de regra pela aba de negociacao                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (nAbaRegra == 1)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³quando nenhum item atende a regra                                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If (AllTrim(cItemRegra) == '')
				cMsgMotivo:= STR0014 + Chr(13) + Chr(10) + Chr(13) + Chr(10)+ ;  //O lançamento não atende à nenhuma opção de negociação. 
				STR0013 + ": "+ cCodRegra + Chr(13) + Chr(10)+ ; // "Regra:"
				STR0015 + " "+ STR0008 //Tipo de bloqueio: Negociação
						
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³quando alguma excecao e encontrada                                             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			Else
				cMsgMotivo:= STR0016 + ; //"O lançamento encontra-se em uma exceção às regras de negociação."
				Chr(13) + Chr(10) + Chr(13) + Chr(10)+ ;
				STR0013 + ": " +  cCodRegra + Chr(13) + Chr(10)+ ;// "Regra:"
				STR0015 + " "+ STR0008 + Chr(13) + Chr(10) + ;//Tipo de bloqueio: Negociação
				STR0017 +  cItemRegra //"item:"
				
			
			EndIf
		EndIf
		
		
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³bloqueio de regra pela aba comercializacao                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (nAbaRegra == 2)
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³quando o pedido possui itens do tipo regra e itens                             ³
			//³que nao estao definidos na regra                                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If (AllTrim(cItemRegra) == '')
				cMsgMotivo:= STR0018; //"O pedido possui itens que não foram especificados na regra de comercialização."
				 + Chr(13) + Chr(10) + Chr(13) + Chr(10)+ ;
				STR0013 + ": " +  cCodRegra + Chr(13) + Chr(10)+ ; //Regra:
				STR0015 + " " + STR0009 //Tipo de bloqueio: Comercializacao
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³quando algum item que nao poderia ser vendido esta no pedido (excecao)         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			Else
				cMsgMotivo:= STR0019; //"O lançamento possui um item que não pode ser comercializado, de acordo com a regra de comercialização."
				+ Chr(13) + Chr(10)  + Chr(13) + Chr(10)+ ;
				STR0013 + ": " + cCodRegra + Chr(13) + Chr(10)+ ; //Regra:
				STR0015 + " " + STR0009 + Chr(13) + Chr(10)+ ;//Tipo de bloqueio: Comercializacao
				STR0017 +   cItemRegra //Item
				
			
			EndIf
		EndIf
		
		
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³bloqueio de regra pela aba desconto                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (nAbaRegra == 3)
				cMsgMotivo:= STR0020; //"O desconto aplicado é maior que o permitido."
				 + Chr(13) + Chr(10) + Chr(13) + Chr(10)+ ;
				 	STR0013 + ": " + cCodRegra + Chr(13) + Chr(10)+ ; //Regra
					STR0015 + " " + STR0010 //"Tipo de bloqueio: Desconto"
					
					
				If !(AllTrim(cItemRegra) == '') 
					cMsgMotivo += + Chr(13) + Chr(10)+ ;
					STR0017 + cItemRegra // "Item da regra que gerou o bloqueio:"
				EndIf
				
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se esta bloqueado por verba                                            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !(AllTrim(cCodVerba) == '')
				cMsgMotivo +=  + Chr(13) + Chr(10) + Chr(13) + Chr(10)+ ;
				STR0021 + Chr(13) + Chr(10)+; //"A verba de venda não foi suficiente para o desconto."
				STR0022 + ": " + cCodVerba + Chr(13) + Chr(10) //"Verba de Venda:"
				
				If !(AllTrim(cItemVerba) == '') 
					cMsgMotivo += 	STR0017 + cItemVerba
				EndIf
				
				cTipoBlq := STR0022  //para mostrar a mensagem certa (verba ou regra)
				Aadd(aBotoes,STR0022) //mostra o botao de visualizar o cadastro de verba
			
			EndIf
	
			
			
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Bloqueio especifico para estado de alagoas (limite de faturamento)             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (AllTrim(cCodRegra) == "BLQAL")
				cMsgMotivo := STR0023; //"O lançamento ultrapassa o limite de faturamento para o cliente."
				+ Chr(13) + Chr(10)+ Chr(13) + Chr(10)+ STR0024//"Regra específica para Alagoas"
				cTipoBlq := STR0025 //"limite de faturamento"
				aBotoes := {'Ok'} //tira o botao de visualizar a regra
			
		EndIf
		
			
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Mostra a mensagem                                                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !IsBlind()
			nMsgOpc := Aviso(STR0026 + " " + cTipoBlq ,cMsgMotivo,aBotoes,3) //'Bloqueio por '
		Else   
			ConOut("VerBlqReg - " + STR0026 + " " + cTipoBlq + Space(3) + cMsgMotivo)
			nMsgOpc := 1
		EndIf		
		
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Abre a visualizacao da regra para consulta                                     ³
		//³Quando o usuario clica em "regra" ou "verba"                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Do Case
			Case (nMsgOpc == 2) 
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³busca pela regra que bloqueou o pedido para pegar o recno e passar na          ³
				//³chamada a visualizacao da regra                                                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aAreaACS := ACS->(GetArea()) //regra de negocio (cabecalho)						
				dbSelectArea("ACS")
				DbSetOrder(1)
				
				if (MsSeek(xFilial("ACS")+cCodRegra))
						 
					INCLUI := .F. // A chamada em visualizacao do cadastro de regras precisa disso. Se tirar isso nao carrega os itens.
					Ft100RNeg("ACS", Recno() ,2) //abre o cadastro de regras em modo de visualizacao
					INCLUI := lAntINCLUI
					
				EndIf		
				
				dbCloseArea()
				
				ACS->(RestArea(aAreaACS))
			
			
			Case (nMsgOpc == 3)
			
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³busca pela verba que bloqueou o pedido para pegar o recno e passar na          ³
				//³chamada a visualizacao da verba                                                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aAreaACK := ACK->(GetArea()) //verba de venda (cabecalho)						
				dbSelectArea("ACK")
				DbSetOrder(1)
				
				if (MsSeek(xFilial("ACK")+cCodVerba))
						 
					INCLUI := .F. // ???A chamada em visualizacao do cadastro de verbas precisa disso. Se tirar isso nao carrega os itens.
					n :=1 // se nao estiver posicionado no primeiro registro da error log
					Fat190Mnt("ACK", Recno() ,2) //abre o cadastro de regras em modo de visualizacao
					INCLUI := lAntINCLUI
				EndIf		
				
				dbCloseArea()
				
				ACK->(RestArea(aAreaACK))
		EndCase
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Restaura a area                                                                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	RestArea(aArea)
	
	If Type("aCols") == "A"
		aCols := aClone(aColsAnt)
	EndIf
	
	If Type("aHeader") == "A"
		aHeader := aClone(aHeaderAnt)
	EndIf
	
	If Type("n") == "N"
		n := nElemAnt
	EndIf	
		
EndIf

Return Nil


//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDLogUser
    @description
    Realiza o log dos dados acessados, de acordo com as informações enviadas, 
    quando a regra de auditoria de rotinas com campos sensíveis ou pessoais estiver habilitada
	Remover essa função quando não houver releases menor que 12.1.27

   @type  Function
    @sample FATPDLogUser(cFunction, nOpc)
    @author Squad CRM & Faturamento
    @since 06/01/2020
    @version P12
    @param cFunction, Caracter, Rotina que será utilizada no log das tabelas
    @param nOpc, Numerico, Opção atribuída a função em execução - Default=0

    @return lRet, Logico, Retorna se o log dos dados foi executado. 
    Caso o log esteja desligado ou a melhoria não esteja aplicada, também retorna falso.

/*/
//-----------------------------------------------------------------------------
Static Function FATPDLogUser(cFunction, nOpc)

	Local lRet := .F.

	If FATPDActive()
		lRet := FTPDLogUser(cFunction, nOpc)
	EndIf 

Return lRet  

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDActive
    @description
    Função que verifica se a melhoria de Dados Protegidos existe.

    @type  Function
    @sample FATPDActive()
    @author Squad CRM & Faturamento
    @since 17/12/2019
    @version P12    
    @return lRet, Logico, Indica se o sistema trabalha com Dados Protegidos
/*/
//-----------------------------------------------------------------------------
Static Function FATPDActive()

    Static _lFTPDActive := Nil
  
    If _lFTPDActive == Nil
        _lFTPDActive := ( GetRpoRelease() >= "12.1.027" .Or. !Empty(GetApoInfo("FATCRMPD.PRW")) )  
    Endif

Return _lFTPDActive  


/*
User Function MyFATA100()

Local aAutoCab	:= {}
Local aItensACT	:= {}
Local aItensACX	:= {}
Local aItensACN	:= {}

Private lMsErroAuto := .F.

RpcSetEnv("T1","D MG 01","Admin","",,,) 

//---------------------------------------
// Cabeçalho - Regras de Negocio. 
//---------------------------------------
aAdd(aAutoCab,{"ACS_DESCRI"	,"REGRA AUTOMATICA"	,Nil})
aAdd(aAutoCab,{"ACS_CODCLI"	,"FAT001"			,Nil})
aAdd(aAutoCab,{"ACS_LOJA"	,"01"				,Nil})


//---------------------------------------
// Itens - Negociação.  
//--------------------------------------- 
aAdd(aItensACT,{{"ACT_ITEM"  ,"001",Nil},; 
				{"ACT_CODTAB","001",Nil},;
				{"ACT_CONDPG","000",Nil}})

//---------------------------------------
// Itens - Comercialização. 
//---------------------------------------
aAdd(aItensACX,{{"ACX_ITEM"	 ,"001"							  ,Nil},;
				{"ACX_CODPRO","FAT000000000000000000000000102",Nil}})

//---------------------------------------
// Itens - Descontos. 
//---------------------------------------
aAdd(aItensACN,{{"ACN_ITEM"	 ,"001"	,Nil},;
				{"ACN_GRPPRO","0003",Nil}})

aAdd(aItensACN,{{"ACN_ITEM"	 ,"002"	,Nil},;
				{"ACN_GRPPRO","0004",Nil}})

FATA100(aAutoCab, aItensACT, aItensACX, aItensACN ,3)
 
If lMsErroAuto	 
	lRetorno := .F.
	MostraErro()
EndIf

RpcClearEnv()

Return Nil
*/

/*/{Protheus.doc} A100FWExecStat
Função utilizada para validar a data da LIB para utilização da classe FWExecStatement

@type       Function
@author     CRM/Faturamento
@since      Mar/2022
@version    12.1.33
@return     __Ft100VerLib retorna lógico quando a data da lib for superior a 16/11/2021
/*/
Static Function A100FWExecStat()

Static __Ft100VerLib := Nil

If __Ft100VerLib == Nil
	__Ft100VerLib := FWLibVersion() >= "20211116"
EndIf

Return __Ft100VerLib
