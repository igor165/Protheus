#INCLUDE "GPEXCALC.CH"
#INCLUDE "PROTHEUS.CH"

Static lItemClVl
Static lTemProAd	:= SR8->( ColumnPos("R8_PROADIC") ) > 0
Static lTemHoJor	:= SRA->( ColumnPos("RA_HOJORVA") ) > 0
Static lTemPdSup	:= RCM->( ColumnPos("RCM_PDSUP") ) > 0
Static aStruSR8  	:= {}
Static aStruRCM  	:= {}

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³          ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador  ³ Data   ³ FNC            ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr.  ³10/01/13³M12RH01         ³Unificacao das Folhas. Projeto Versao 12  ³±±
±±³             ³        ³REQ.:04_01      ³                                          ³±±
±±³Christiane V ³24/07/14³TQCNUA          ³Alteração na função fAfastados para que   ³±±
±±³             ³        ³                ³calcule os dias a pagar qdo a licença for ³±±
±±³             ³        ³                ³por adoção e estiver configurado o pagto. ³±±
±±³Allyson M.   ³05/08/14³TQFUKY          ³Ajuste na verificacao do limite de deducao³±±
±±³             ³        ³                ³da licenca maternidade quando ha medias.  ³±±
±±³Allyson M.   ³05/08/14³TQGHT8          ³Ajuste em fGerValFut() no carregamento    ³±±
±±³             ³        ³                ³dos valores gerados pelo Dissidio.  		 ³±±
±±³Allyson M.   ³22/10/14³TQUQES          ³Ajuste em fBusCadBenef() p/ montar a data ³±±
±±³             ³        ³                ³de busca do beneficiario de acordo com a  ³±±
±±³             ³        ³                ³data do pagamento, caso seja Portal.  	 ³±±
±±³M. Silveira  ³23/10/14³TQSLLP          ³Ajuste na fEncarCc() p/ gravar a sequencia³±±
±±³             ³        ³                ³da verba conforme o registro origem.      ³±±
±±³Allyson M.   ³08/01/15³TQNIKP          ³Ajuste em fGPSVal() p/ tratar busca do    ³±±
±±³             ³        ³                ³complemento de GPS quando for ambos tipos ³±±
±±³             ³        ³                ³de contrato. 							 ³±±
±±³Gustavo M.   ³27/01/15³PCREQ-2622\     ³Correcao de erro quando o sindicato nao   ³±±
±±³             ³        ³PCREQ-2626      ³esta preenchido no cadastro do func 		 ³±±
±±³Allyson M.   ³04/03/15³TRIA28          ³Ajuste em fDsrHrsAtiv() p/ calcular o DSR ³±±
±±³             ³		 ³				  ³e Horas Atividade respeitando a configura-³±±
±±³             ³		 ³				  ³cao das verbas de Id 0033 e 0317.		 ³±±
±±³M. Silveira  ³30/06/15³TSQWF2 		  ³Ajuste na fSalInc para retornar os valores³±±
±±³             ³        ³				  ³dos adicionais passados por referencia.   ³±±
±±³Allyson M.   ³30/07/15³TSWHRL          ³Ajuste p/ calculo correto do adiantamento ³±±
±±³             ³        ³                ³proporcional quando registro da SR8 de    ³±±
±±³             ³        ³                ³ferias foi migrada da P11 e ajuste para   ³±±
±±³             ³        ³                ³dissidio p/ trazer os dias corretos    	 ³±±
±±³M. Silveira  ³31/08/15³TTFQYM 		  ³Ajuste na FDiasAfast p/ permitir finalizar³±±
±±³             ³        ³				  ³a execucao caso nao haja periodo ativo.   ³±±
±±³Mariana M.   ³03/09/15³TTEKBC          ³Ajuste na função FDiasAfast para não gerar³±±
±±³             ³        ³                ³error.log quando o calculo for efetuado p/³±±
±±³             ³        ³                ³funcionaios comissionado puro com ferias  ³±±
±±³M. Silveira  ³03/09/15³TTDZQ4 		  ³Ajuste na FDiasAfast p/tratar corretamente³±±
±±³             ³        ³				  ³os afastamentos ocorridos em fevereiro.   ³±±
±±³Christiane V.³06/11/15³TTSM85 		  ³Ajuste na FCalcDSR para considerar a data ³±±
±±³             ³        ³				  ³de admissao ao pesquisar os dias de DSR   ³±±
±±³             ³        ³				  ³somente no mes de admissao do funcionario.³±±
±±³Allyson M.   ³08/12/15³TUAFN0          ³Ajuste p/ calculo do menor aprendiz       ³±±
±±³             ³        ³                ³Ajuste no calculo de salario horista      ³±±
±±³             ³        ³                ³quando funcionario esta afastado.         ³±±
±±³             ³        ³                ³Ajuste no calculo dos dias de maternidade ³±±
±±³Allyson M.   ³30/12/15³TUBJJK          ³Ajuste em fBuscaAcm() p/ restaurar o alias³±±
±±³             ³        ³                ³que estava em uso      					 ³±±
±±³Allyson M    ³31/12/15³TUCW36 		  ³Ajuste para que ao possuir um funcionário ³±±
±±³             ³        ³				  ³afastado no Mes e utilizar o parametro MV_³±±
±±³             ³        ³				  ³DIASPER com 2 em um Mes de 31 dias seja   ³±±
±±³             ³        ³				  ³calculado os dias trabalhados corretamente³±±
±±³             ³        ³				  ³igual e' feito na versao 11.              ³±±
±±³Allyson M.   ³06/01/16³TUDVJI          ³Ajuste na validacao dos dias de FGTS      ³±±
±±³             ³        ³                ³quando for afastamento de ferias    		 ³±±
±±³Allyson M.   ³07/01/16³TUCT68          ³Ajuste na validacao dos dias de licenca   ³±±
±±³             ³        ³                ³maternidade    		 					 ³±±
±±³Raquel Hager ³10/02/16³TUJQLJ 		  ³Ajuste para que ao possuir um funcionário ³±±
±±³             ³        ³				  ³afastado no Mês e utilizar o parametro MV_³±±
±±³             ³        ³				  ³DIASPER com 2 em um Mês de 31 dias seja   ³±±
±±³             ³        ³				  ³calculado os dias trabalhados corretamente³±±
±±³             ³        ³				  ³ao possuir afastamento de Férias.         ³±±
±±³Allyson M.   ³10/02/16³TUJQLJ   	  	  ³Ajuste na quantidade de dias pagos no     ³±±
±±³             ³        ³   		  	  ³afastamento p/ verificar o parametro      ³±±
±±³             ³        ³   		  	  ³MV_DIASPER quando nao for ferias		     ³±±
±±³Raquel Hager ³19/02/16³TUKE03   	      ³Ajuste na quantidade de dias pagos no     ³±±
±±³             ³        ³   		  	  ³afastamento - descontar do afastamento e  ³±±
±±³             ³        ³   		  	  ³não dos dias de salario, exceto para      ³±±
±±³             ³        ³   		  	  ³RCM_TIPOAF = 4.							 ³±±
±±³Raquel Hager³01/03/16³TUPOEE   	      ³Ajuste na quantidade de dias afastados    ³±±
±±³            ³        ³   		  	  ³para mes de Fevereiro.                    ³±±
±±³Raquel Hager³03/03/16³TUPOEE   	      ³Ajuste na quantidade de dias afastados    ³±±
±±³            ³        ³   		  	  ³para mes de Fevereiro sem dt de retorno.  ³±±
±±³Raquel Hager³04/03/16³TUKV34  	      ³Ajuste nos dias trabalhados do funcionario³±±
±±³            ³        ³   		  	  ³no mes de admissao.						 ³±±
±±³Raquel Hager³11/03/16³TUQU95  	      ³Ajuste no uso dos Dias de Saldo a Pagar   ³±±
±±³            ³        ³   		  	  ³de afastamento com nDiasC igual a 30.	 ³±±
±±³Raquel Hager³21/03/16³TUQU95   	      ³Ajuste na quantidade de dias afastados    ³±±
±±³            ³        ³   		  	  ³para mes de Fevereiro.                    ³±±
±±³Raquel Hager³30/03/16³TUQU95   	      ³Ajuste na quantidade de Dias de Saldo     ³±±
±±³            ³        ³   		  	  ³para afastamentos que nao possuem dias a  ³±±
±±³            ³        ³   		  	  ³pagar.									 ³±±
±±³Raquel Hager³07/04/16³TUQU95   	      ³Ajuste para afastamentos em Fevereiro que ³±±
±±³            ³        ³   		  	  ³retornam no periodo em aberto.    		 ³±±
±±³Renan Borges³20/05/16³TUZGS1  	      ³Ajuste para que em Fevereiro seja propor- ³±±
±±³            ³        ³   		  	  ³cionalizado pelos dias do periodo quando  ³±±
±±³            ³        ³   		  	  ³funcionário for admitido no mes, demitido ³±±
±±³            ³        ³   		  	  ³possuir afastamento, ou férias.           ³±±
±±³Allyson M   ³14/06/16³TVJDFU     	  ³Ajuste em fSalInc() p/ nao considerar o   ³±±
±±³            ³        ³           	  ³salario incorporado quando for previsao.  ³±±
±±³            ³        ³           	  ³A função somente é executada p/ verificar ³±±
±±³            ³        ³           	  ³os valores dos adicionais     			 ³±±
±±³Raquel Hager³14/06/16³TVAV88     	  ³Incluido tratamento para mnemnonico       ³±±
±±³            ³        ³                 ³NDAPAPG p/ cálc. prop. de adicionais.     ³±±
±±³Raquel Hager³15/06/16³TVAV88     	  ³Inclusão de ColumnPos para R8_PROADIC.    ³±±
±±³Renan Borges³15/06/16³TVIGQD  	      ³Criação do Mnemonico P_PGSALFEV para que  ³±±
±±³            ³        ³   		      ³seja possível definir se em fevereiro será³±±
±±³            ³        ³   		      ³utilizado os dias do mês (Art. 64 a CLT)  ³±±
±±³            ³        ³   		  	  ³ou 30 dias.                               ³±±
±±³Claudinei S.³20/06/16³TVKTW6           ³Ajuste na FCalcDSR para buscar os dias do ³±±
±±             ³        ³                 ³periodo da Folha ou do Ponto, conforme o  ³±±
±±             ³        ³                 ³conteúdo do novo Mnemonico P_nDSRHori.    ³±±
±±³Raquel Hager³21/06/2016³TVAV88		  ³Ajuste na validação do conteúdo R8_PROADIC³±±
±±³            ³          ³               ³ para contagem dos dias. 	             ³±±
±±³Renan Borges³24/06/16³TVIRBJ           ³Ajuste para calcular na provisão adiciona-³±±
±±³            ³        ³   		      ³is de confiança e transferência na provi- ³±±
±±³            ³        ³   		      ³são.                                      ³±±
±±³Claudinei S.³27/06/16³TVKTW6           ³Ajuste na FCalcDSR para buscar os dias do ³±±
±±             ³        ³                 ³periodo do Ponto corretamente.            ³±±
±±³Allyson M   ³05/07/16³TVNTJP     	  ³Ajuste p/ nao verificar a situação de     ³±±
±±³            ³        ³           	  ³folha da SRA pois a situação já é carrega-³±±
±±³            ³        ³           	  ³da na fórmula S_CARGARCH				     ³±±
±±³Allyson M   ³19/07/16³TVLTT3     	  ³Ajuste em FDiasAfast() p/ quando afasta-  ³±±
±±³            ³        ³           	  ³mento terminar no mes p/ considerar saldo ³±±
±±³            ³        ³           	  ³a pagar conforme os dias de afastamento.  ³±±
±±³            ³        ³           	  ³Obs.: isso se tornou necessário devido a  ³±±
±±³            ³        ³           	  ³um erro que existia no fechamento mensal  ³±±
±±³            ³        ³           	  ³que atualizava o saldo a pagar errado	 ³±±
±±³Cícero Alves³22/07/16³				  ³Ajuste na validação do conteúdo R8_PROADIC³±±
±±³            ³        ³       	      ³ para contagem dos dias. 	             ³±±
±±³Allyson M   ³19/08/16³TVDABH     	  ³Ajuste em FGravaSal() p/ gerar referência ³±±
±±³            ³        ³           	  ³em horas p/ funcionário horista e paga-   ³±±
±±³            ³        ³           	  ³mento semanal						     ³±±
±±³Raquel Hager³05/09/16³TVQVEX     	  ³Ajuste na função fRateio para não usar o  ³±±
±±³            ³        ³           	  ³conteudo do mnemônico cFolmes utilizado   ³±±
±±³            ³        ³           	  ³na Versão 11.      					     ³±±
±±³Raquel Hager³07/10/16³TWBMAZ          ³Ajuste para não configurar Calc.Prop.Adic. ³±±
±±³            ³        ³                ³para afastamento de Maternidade.           ³±±
±±³Allyson M   ³11/10/16³TWAVBD     	  ³Ajuste em FCalcDSR() p/ categoria horista ³±±
±±³            ³        ³           	  ³p/ considerar o salário de acordo com as  ³±±
±±³            ³        ³           	  ³horas informadas na verba de salário	     ³±±
±±³Allyson M   ³11/11/16³TWEHXD     	  ³Ajuste em fSalInc() p/ guardar o valor de ³±±
±±³            ³        ³           	  ³incorporação de outras verbas na provisão ³±±
±±³Raquel Hager³23/11/16³TWMEM4           ³Ajuste em fSalInc para buscar período     ³±±
±±³            ³        ³137831           ³da filial do funcionário.				 ³±±
±±³Renan Borges³22/12/16³MRH-3419  	      ³Ajuste para calcular a diferença de aciden³±±
±±³            ³        ³   		  	  ³te de trabalho no dissidio corretamente   ³±±
±±³Flavio C.   ³12/01/17³MRH-1196     	  ³Ajuste para que ao calcular a folha de um ³±±
±±³            ³        ³           	  ³funcionário demitido não seja gerado o Li-³±±
±±³            ³        ³           	  ³quido da folha indevidamente quando este  ³±±
±±³            ³        ³           	  ³possui afastamento.                       ³±±
±±³Raquel Hager³23/01/17³MRH-5281         ³Ajuste na função fAfastados para sempre   ³±±
±±³            ³        ³                 ³usar Salário Hora incorporado nas Médias. ³±±
±±³Allyson M   ³06/02/17³MRH-5565 		  ³Ajuste na FDiasAfast() p/ quando for o    ³±±
±±³            ³        ³				  ³cálculo de rescisão em período seguinte ao³±±
±±³            ³        ³				  ³em aberto, p/ deduzir os dias que foram   ³±±
±±³            ³        ³				  ³pagos na Folha							 ³±±
±±|Claudinei S.|03/03/17|MMAN-1107        |Ajuste em FGravaSal() para considerar o   |±±
±±|            |        |                 |ID-1413 dos Autonomos MEI caso exista.    |±±
±±³Gabriel A.  ³06/02/17³MRH-7898         ³Ajuste na contagem de dias de afastamento.³±±
±±³Paulo O.    ³10/05/17³DRHPAG-1706      ³Ajuste em FDiasAfast para gravar as horas/³±±
±±Inzonha      ³        ³                 ³dias de afastamento que não foram pagos   ³±±
±±             ³        ³                 ³pela empresa e sim pelo INSS na nova verba³±±
±±             ³        ³                 ³de ID 1420                                ³±±
±±³Paulo O.    ³12/05/17³DRHPAG-1706      ³Ajuste para calcular autonomo quando o    ³±±
±±Inzonha      ³        ³                 ³valor do salario está cadastrado no campo ³±±
±±             ³        ³                 ³RA_SALARIO                                ³±±
±±³Eduardo K.  ³10/10/17³MPRIMESP-11608   ³Ajuste em FCalcDSR para calculo correto   ³±±
±±             ³        ³                 ³quando P_nDSRHori configurado como 1.	 ³±±
±±³Eduardo K.  ³12/03/18³MPRIMESP-14152  ³Ajuste p/ pagar corretamente 30 dias em    ³±±
±±             ³        ³                 ³28/Fev caso afastamento termine neste dia ³±±
±±             ³        ³                 ³e possua 28 dias ou mais.				 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ Calc_conv³ Autor ³ Stiefano              ³ Data ³20/05/95  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calculo de Convencao Coletiva                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Calc_Conv(nBaseCalc,aConvencao,AcodFol,cTipo,nDiasF,nDiasA)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Calc_Conv(nBaseCalc,aConvencao,aCodFol,cTipo,nDiasF,nDiasA)
	Local dDtaAux
	Local dDtaBase
	Local dTabDia
	Local nAvos       := 0
	Local nPercentual := 0
	Local nValConv    := 0
	Local nDia        := 0
	Local nMes        := 0
	Local nAno        := 0
	Local nTotalConv  := 0
	Local nX		  := 0

	nPos := Ascan(aConvencao,{ |x| x[1] = SRA->RA_SINDICA })

	If nPos > 0
		nTotalConv  := LEN(aConvencao[nPos])
	endIf

	If nPos > 0 .And. SRA->RA_ADMISSA < aConvencao[nPos,nTotalConv]
		dDtaAux  := aConvencao[nPos,nTotalConv]
		dDtaBase := aConvencao[nPos,nTotalConv]
	Else
		dDtaAux  := SRA->RA_ADMISSA
		dDtaBase := SRA->RA_ADMISSA
	EndIf

	If Mod(Year(dDataAte),4) = 0
		dTabDia := "31*29*31*30*31*30*31*31*30*31*30*31"
	Else
		dTabDia := "31*28*31*30*31*30*31*31*30*31*30*31"
	EndIf

	If dDataAte - dDtaBase > nDiasC
		nDia := Day(dDtaBase)
		nMes := Month(dDtaBase)
		nAno := Year(dDtaBase)
		nMes ++
		If nMes > 12
			nMes = 1
			nAno ++
		EndIf
		If nDia > Val(SubStr(dTabDia,((nMes - 1) * 2) + nMes,02))
			nDia := Val(SubStr(dTabDia,((nMes - 1) * 2) + nMes,02))
		EndIf
		dDtaAux := Ctod(Strzero(nDia,2)+"/"+Strzero(nMes,2)+"/"+Strzero(nAno,4),"DDMMYY")
		nAvos ++

		While dDtaAux <= dDataAte
			nMes ++
			nAvos ++
			If nMes > 12
				nMes = 1
				nAno ++
			EndIf
			If nDia > Val(SubStr(dTabDia,((nMes - 1) * 2) + nMes,02))
				nDia  := Val(SubStr(dTabDia,((nMes - 1) * 2) + nMes,02))
			EndIf
			dDtaAux := Ctod(Strzero(nDia,2)+"/"+Strzero(nMes,2)+"/"+Strzero(nAno,4),"DDMMYY")
		Enddo
		nMes --
		nAvos --
		If nMes = 0
			nMes = 12
			nAno --
		EndIf
		dDtaAux := Ctod(Strzero(nDia,2)+"/"+SubStr(Dtoc(dDtaBase),4,2)+"/"+Strzero(nAno,4),"DDMMYY")
		If dDataAte - dDtaAux + 1 >= 15
			nAvos ++
		EndIf
	Else
		If dDataAte - dDtaBase >=15
			nAvos := 1
		Else
			nAvos := 0
		EndIf
	EndIf

	nAvos += SRA->RA_MESESAN

	If aCodfol[158,1] # Space(3) .And. cTipo == "R"

		If Ascan(aPd, { |X| X[1] = aCodFol[158,1] .And. X[9] # "D"}) = 0

			nPos := Ascan(aConvencao , {|x| x[1] = SRA->RA_SINDICA })

			If nPos > 0

				For nX := 2 To nTotalConv - 3 Step 3
					If nAvos >= aConvencao[nPos,nX] .and. nAvos <= aConvencao[nPos,nX+1]
						nPercentual := aConvencao[nPos,nX+2]
						exit
					endIf
				Next nX

				nValConv := Round( ( ( nBaseCalc * nPercentual ) / 100 ) , 2)

				FMatriz(aCodFol[158,1],nValConv)

				If nValConv > 0 //Grava a base utilizada no cálculo
					aPd[Len(aPd),20] := nBaseCalc
				EndIf

			EndIf
		EndIf
	EndIf

	If aCodfol[159,1] # Space(3) .And. cTipo == "F"

		If Ascan(aPd, { |X| X[1] = aCodFol[159,1] .And. X[9] # "D"}) = 0

			nPos := Ascan(aConvencao , {|x| x[1] = SRA->RA_SINDICA })

			If nPos > 0

				For nX := 2 To nTotalConv - 3 Step 3
					If nAvos >= aConvencao[nPos,nX] .and. nAvos <= aConvencao[nPos,nX+1]
						nPercentual := aConvencao[nPos,nX+2]
						exit
					endIf
				Next nX

				nValConv := Round( ( ( nBaseCalc * nPercentual ) / 100 ) , 2)

				If ( nDiasF + nDiasA ) # nDiasC
					nValConv := Round( ( (nValConv * (nDiasF+nDiasA) ) / 30),2)
				EndIf

				FMatriz(aCodFol[159,1],nValConv)

				If nValConv > 0 //Grava a base utilizada no cálculo
					aPd[Len(aPd),20] := nBaseCalc
				EndIf

			EndIf
		EndIf
	EndIf
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fDiasTrab³ Autor ³ Equipe Rh             ³ Data ³20/05/95  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Dias Trabalhados Mensalista e Semanalista                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fDiasTrab(Diastrab ,cDiasMes,lAdmissao,dDtPesq,lSemanal)   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FDiasTrab(DiasTrab,cDiasMes,lAdmissao,dDtPesq,lSemanal)
	Local cMsgLog

	dDtPesq 		:= If (dDtPesq == Nil , dDataAte , dDtPesq)
	lSemanal		:= If (lSemanal== Nil , .T. , lSemanal)
	lSemanal		:= If ( Type("P_SALINC")#"U" .And. P_SALINC, .F., lSemanal )

	DiasTrab := If(GetMvRH("MV_DIASPER",,"1") == "1",nDiasP,(If(SRA->RA_TIPOPGT =="M", nDiasC, P_NTOTDIAS)))

	If  Type("dDatadem")<>"U" .and. !Empty(dDatadem) .and. SRA->RA_CATFUNC$ "J"
		Diastrab := (dDatadem - Ctod("01/"+Strzero(Month(dDatadem),2)+"/"+right(str(Year(dDatadem)),2),"ddmmyy"))+1
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Para semanalistas, calcula o n£mero de dias trabalhados      ³
	//³ conforme parametro semanas.                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If SRA->RA_TIPOPGT = "S" .And. lSemanal
		DiasTrab	:= 0
		DiasDSR		:= 0
		If Type( "aPeriodo" ) = "U"
			aPeriodo := {}
		EndIf
		If !FTrabCalen(	cPeriodo	,;		//-- data de Referencia
		Nil			,;	//-- Dias Trabalhados
		0			,;	//-- Dias Nao Trabalhados
		@DiasDsr	,;	//-- Dias de DSR
		0      		,;		//-- Dias Nao Uteis de Vale Transporte
		0      		,;		//-- Dias uteis de Vale Transporte
		0      		,; 		//-- Dias de Diferenca de Vale Transporte
		0      		,;		//-- Qtde de Horas de DSR
		0      		,;		//-- Qtde de HoraS Trabalhadas
		0      		,;		//-- Dias de Vale Refeicao
		0      		,;		//-- Dias totais de V.T. Dias Uteis
		0      		,;		//-- Dias totais de V.T. Dias Nao uteis
		cSemana		,;      //-- Numero de pagamento
		Nil			,;		//-- Proporcional a Afastamento
		Nil			,;		//-- Proporcional a Admissao
		dDtPesq		,;		//-- Data Fim do Periodo
		cRot		,;		//-- Roteiro de calculo
		Nil			,;		//-- Data inicial para pesquisa (opcional)
		Nil			,;		//-- Verbas de tipos de afastamentos (opcional)
		Nil			,;		//-- Dias de Vale Alimentacao
		@DiasTrab	;		//-- Dias uteis
		)
			If FindFunction( "AddLogExecRot" )
				cMsgLog		:= "Function: "
				cMsgLog 	+= ProcName()
				cMsgLog 	+= "/Line: "
				cMsgLog 	+= AllTrim( Str( ProcLine() ) )
				cMsgLog		+= " -> "
				cMsgLog		+= STR0004	//"Nao Foi Possivel Carregar Dias Trabalhados e de Dsr a partir do Calendario"
				AddLogExecRot( cMsgLog )
			EndIf
			FinalCalc()
			Return
		EndIf
		If DiasTrab == 0 .or. !(SRA->RA_CATFUNC $ "H*T*G")
			DiasTrab := P_NTOTDIAS
			DiasDsr	 := 0
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Admissao de Funcionario no mes de Calculo                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If SRA->RA_TIPOPGT # "S" .Or. !lSemanal
		If Year(SRA->RA_ADMISSA) == Year(dDtpesq) .And. Month(SRA->RA_ADMISSA) == Month(dDtpesq) .And. Day(SRA->RA_ADMISSA) # 1 .And. ( !IsInCallStack("GPEM040") .And. !IsInCallStack("GPEM630") )
			Diastrab := nDiasP - Day(SRA->RA_ADMISSA) + 1
			lAdmissao := .T.
		EndIf
	EndIf

Return Nil

/*/{Protheus.doc} FDiasAfast
Dias Afastados e Cálculo dos Dias de Maternidade, Auxílio Doença, Auxílio Acidente e Fgts, diminuindo dos Dias Trabalhados
@author Equipe Rh - Mauro
@since 02/05/1996
@param nDiasAfas, numeric, descricao
@param DiasTrab, , descricao
@param dDtPesq, date, descricao
@param lSemanal, logical, descricao
@param cPgMater, characters, descricao
@param cListAfas, characters, descricao
@param aDetAfast, array, descricao
@param lExit, logical, descricao
/*/
Function FDiasAfast(nDiasAfas, DiasTrab, dDtPesq, lSemanal, cPgMater, cListAfas, aDetAfast, lExit, lShowMsg,dIniBusca,dFimBusca)

	Local aDurAux		:= {}

	Local cAliasQRY 	:= GetNextAlias()
	Local cPerFol		:= ""
	Local cSemFol		:= ""

	Local dPerIni		:= CtoD("//")
	Local dPerFim		:= CtoD("//")

	Local lSabNUtil 	:= .F.
	Local lParSab  		:= .F.
	Local lBissexto		:= .F.
	Local lRet			:= .T.

	Local nCont			:= 0
	Local nLinha		:= 0
	Local nDiaAt    	:= 0   //Dias da Semana de Trab. afastado
	Local nDiaAd    	:= 0   //Dias da Semana de Desc. Afastado
	Local nPosCpo		:= 0
	Local nAuxAfa		:= 0
	Local nAuxAfa2		:= 0
	Local nDiasPagar	:= 0
	Local nDEnc			:= 0
	Local nDFGTS		:= 0
	Local nDiasPeriodo	:= If(GetMvRH("MV_DIASPER",,"1") == "1",nDiasP,(If(SRA->RA_TIPOPGT =="M", nDiasC, P_NTOTDIAS)))
	Local nMesMedAfa
	Local nPos031		:= 0
	Local dDataAux		:= CtoD("//")
	Local lValAfas		:= .F.
	Local nX 			:= 1
	Local nTotAfasP		:= 0

	Local lTCpoFgts 	:= ( Type("SRA->RA_PERFGTS") # "U" )
	Local lGestPubl := IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)
	//TODO
	Local cCont15		:= (If( Type("P_LIAUXE15" ) == "U", "S", P_LIAUXE15) == "S" )	// Verifica se controla limite de 15 dias de auxilio enfermidade
	Local nDiasEmp		:= 0
	Local nDiasPagos	:= 0
	Local nHrTrabold	:= 0
	Local DiasTrab2		:= 0
	Local nTotAfast		:= 0

	DEFAULT lExit 		:= .F.
	DEFAULT lShowMsg	:= lExit

	If Type("lAdmissao") == "U"
		lAdmissao := .F.
	EndIf

	aAfaTar := {}

	lDiaQbSegFer 		:= If(Type("lDiaQbSegFer") == "U",.F.,lDiaQbSegFer) // Variavel

	//-- Se mnemonico aperiodo nao tiver sido carregado, efetua a carga
	If Type( "aPeriodo" ) = "U" .or. Empty(aPeriodo)
		aPeriodo := {}
		nPosSem	 := 0
		lRet := fCarPeriodo( cPeriodo, cRot, @aPeriodo, , @nPosSem, lShowMsg )
		If lExit .And. !lRet
			Return(.F.)
		EndIf
	EndIf

	//--Situacao do Funcionario na data de referencia
	lDissidio 	:= If( type("lDissidio") == "U", .F., lDissidio)
	nDiasLRem   := If( Type("nDiasLRem") != "N", 0, nDiasLRem)
	nDiasSRem   := If( Type("nDiasSRem") != "N", 0, nDiasSRem)
	dDtPesq 	:= If( dDtPesq == Nil, If( Type("dDatadem") == "D" .And. ! Empty(dDatadem), dDatadem, aPeriodo[nPosSem, 4] ), dDtPesq)
	lSemanal	:= If( lSemanal == Nil, .T., lSemanal)
	lSemanal	:= If( Type("P_SALINC") != "U" .And. P_SALINC, .F., lSemanal )
	nDPrgSalMa  := If( Type("nDPrgSalMa") != "N", 0, nDPrgSalMa)
	cSitFolh	:= If( Type("cSitFolh") == "U", SRA->RA_SITFOLH, cSitFolh)

	DEFAULT cListAfas   := ""

	If cPaisLoc == "PAR"
		lParSab := If(SRA->RA_SABUTIL == "1",.T.,.F.)
	EndIf

	If cPaisLoc == "PAR" .And. !lParSab
		lSabNUtil := .T.
	EndIf

	//-- Array Criado no Roteiro se Vier por Fora Cria o array caso nao exista
	If Type("aVarRot") = "U"
		aVarRot := {}
	EndIf

	If SRA->RA_TPCONTR == '3' .And. Type('aConvocacao') <> "U" .And. Len(aConvocacao) > 0
		dPerIni := aConvocacao[2]
		dPerFim	:= aConvocacao[3]
	ElseIf !Empty(dIniBusca) .And. !Empty(dFimBusca)
		dPerIni := dIniBusca
		dPerFim	:= dFimBusca
	ElseIf nPosSem > 0		
		dPerIni := aPeriodo[nPosSem,3]
		dPerFim	:= aPeriodo[nPosSem,4]
	Else
		dPerIni := SRA->RA_ADMISSA
		dPerFim	:= cToD("//")
	EndIf

	If !(Type('cCompl') == "U") .and. cCompl == "S" //--Rescisao complementar, nao deve calcular afastamentos
		dPerIni := StoD(AnoMes(dDataDem) + "01")
		dPerFim	:= dDataDem
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Tratamento para anos bissextos                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	lBissexto	:= ( Mod( Year(dDtPesq), 4 ) == 0 )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Trata Dias Trabalhados para Afastamentos e Ferias            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nDiasAfas := nDiasMat := nDPrgSalMa:= nDiasEnf := nDiasPg := nDiasFgts := 0
	nDiaAt    := nDiaAd   := nDiasFer := nDiasLRem	:= nDiasEnc := 0
	nDRecesso := 0 //Dias Recesso Estagiario
	lSalINSS  := .F.

	If Empty( aStruSR8 )
		aStruSR8  := SR8->( dbStruct() )
	EndIf
	If Empty( aStruRCM )
		aStruRCM  := RCM->( dbStruct() )
	EndIf

	BeginSQL Alias cAliasQRY

		SELECT *
		FROM %Table:SR8% SR8
		INNER JOIN %Table:RCM% RCM
		ON R8_TIPOAFA = RCM_TIPO
		WHERE R8_FILIAL = %Exp:SRA->RA_FILIAL%
		AND R8_MAT = %Exp:SRA->RA_MAT%
		AND R8_DATAINI >= %Exp:DtoS(SRA->RA_ADMISSA)%
		AND ( R8_DATAFIM >= %Exp:DtoS(dPerIni)% OR R8_DATAFIM = '' )
		AND RCM_FILIAL = %Exp:xFilial("RCM")%
		AND RCM_TIPOAF <> '3'
		AND RCM.%NotDel%
		AND SR8.%NotDel%

		ORDER BY R8_DATAINI, R8_TIPO

	EndSQL

	For nPosCpo := 1 To Len(aStruSR8)
		If aStruSR8[nPosCpo][2]<>"C"
			TcSetField(cAliasQRY,aStruSR8[nPosCpo][1],aStruSR8[nPosCpo][2],aStruSR8[nPosCpo][3],aStruSR8[nPosCpo][4])
		EndIf
	Next nPosCpo

	For nPosCpo := 1 To Len(aStruRCM)
		If aStruRCM[nPosCpo][2]<>"C"
			TcSetField(cAliasQRY,aStruRCM[nPosCpo][1],aStruRCM[nPosCpo][2],aStruRCM[nPosCpo][3],aStruRCM[nPosCpo][4])
		EndIf
	Next nPosCpo

	While (cAliasQRY)->(!Eof())

		nAuxAfa2 	:= 0
		nDiasSaldo 	:= 0
		nDSaldo2	:= 0
		nDiasDisp	:= 0
		nDDisp2		:= 0
		nDiasPagar 	:= 0
		nDPagar2 	:= 0

		If cTipoRot == "4" .And. Empty((cAliasQRY)->R8_DATAFIM)
			dPerFim := dDataDem
		EndIf

		If (cAliasQRY)->R8_DATAINI > dPerFim
			(cAliasQRY)->(dbSkip())
			Loop
		EndIf

		/* Nos casos de funcionário em regime 2 - estatutário
		os dias de ferias não devem ser descontados dos dias trabalhados.*/
		If SRA->RA_REGIME == '2' .AND. (cAliasQRY)->RCM_TIPOAF = '4'
			(cAliasQRY)->(dbSkip())
			Loop
		EndIf

		If !Empty(cListAfas) .and. !((cAliasQRY)->RCM_TIPOAF $ cListAfas)
			(cAliasQRY)->(dbSkip())
			Loop
		EndIf

		If (cAliasQRY)->R8_DPAGOS > 0
			nDiasSaldo := (cAliasQRY)->R8_SDPAGAR
			If Month(dPerFim) == 2 .And. (MesDia((cAliasQRY)->R8_DATAFIM) == "0228" .OR. MesDia((cAliasQRY)->R8_DATAFIM) == "0229" )  .and. (cAliasQRY)->R8_DPAGAR  >= 28
				nDiasSaldo := 30
			EndIf
		Else
			If (cAliasQRY)->R8_DPAGAR > 0 .And. !((cAliasQRY)->RCM_TIPOAF == '4' .And. (cAliasQRY)->RCM_PD <> aCodFol[891,1])
				nDiasSaldo	:= (cAliasQRY)->R8_DPAGAR
				If (MesDia((cAliasQRY)->R8_DATAFIM) == "0228" .OR. MesDia((cAliasQRY)->R8_DATAFIM) == "0229" ) .and. (cAliasQRY)->R8_DPAGAR  >= 28
					nDiasSaldo := 30
				EndIf
			Else
				nDiasSaldo	:= 0
			EndIf
		EndIf
		nDSaldo2 := nDiasSaldo

		//Para rescisao, verifica se o periodo de cálculo é posterior ao período em aberto da folha,
		//pois o afastamento não estará com o saldo atualizado
		If IsInCallStack("GPEM040") .And. fGetLastPer( @cPerFol, @cSemFol , cProcesso, fGetRotOrdinar(), .T., .F. )
			If cPeriodo > cPerFol
				aAreaSRC := SRC->( GetArea() )
				SRC->( dbSetOrder(1) )
				If SRC->(dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + (cAliasQRY)->R8_PD) )
					While SRC->( !EoF() .And. SRC->RC_FILIAL + SRC->RC_FILIAL + SRC->RC_PD + AllTrim(SRC->RC_NUMID) == SRA->RA_FILIAL + SRA->RA_FILIAL + (cAliasQRY)->R8_PD + AllTrim((cAliasQRY)->R8_NUMID) )
						nDiasSaldo -= SRC->RC_HORAS
						SRC->( dbSkip() )
					End While
				EndIf
				RestArea( aAreaSRC )
			EndIf
		EndIf

		If (cAliasQRY)->R8_DATAINI >= dPerIni
			If (GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dPerFim) == 31 .And. nDiasC == 30 .And. SRA->RA_CATFUNC = "M") .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "Q1/Q2/Q3")//--Sempre será considerado os dias de auxilio maternidade
				If Year(SRA->RA_ADMISSA) == Year(dPerIni) .And. Month(SRA->RA_ADMISSA) == Month(dPerIni)	
					nDiasDisp	:= dPerFim - (cAliasQRY)->R8_DATAINI + 1
				Else
					nDiasDisp	:= dPerFim - (cAliasQRY)->R8_DATAINI
					nDDisp2		:= dPerFim - (cAliasQRY)->R8_DATAINI + 1
				EndIf
			Else
				If P_PGSALFEV
					nDiasDisp	:= If(Day(dPerFim) <= 29 .And. nDiasC == 30 .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "O1*P1"), If(Day(dPerFim) == 28,dPerFim - (cAliasQRY)->R8_DATAINI + 3,dPerFim - (cAliasQRY)->R8_DATAINI + 2) ,dPerFim - (cAliasQRY)->R8_DATAINI + 1)
				Else
					nDiasDisp	:= dPerFim - (cAliasQRY)->R8_DATAINI + 1
				EndIf
			EndIf
		Else
			If (GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dPerFim) == 31 .And. nDiasC == 30 .And. SRA->RA_CATFUNC = "M") .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "Q1/Q2/Q3")//--Sempre será considerado os dias de auxilio maternidade
				nDiasDisp	:= dPerFim - dPerIni
				nDDisp2		:= dPerFim - dPerIni + 1
			Else
				If P_PGSALFEV
					nDiasDisp	:= If(Day(dPerFim) <= 29 .And. nDiasC == 30 .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "O1*P1"), If(Day(dPerFim) == 28,dPerFim - dPerIni + 3,dPerFim - dPerIni + 2) ,dPerFim - dPerIni + 1)
				Else
					nDiasDisp	:= dPerFim - dPerIni + 1
				EndIf
			EndIf
		EndIf

		//Se não for férias e afastamento no periodo inteiro assume afastamento com a quantidade de dias do mês
		If !((cAliasQRY)->RCM_TIPOAF == '4') .And. (Day((cAliasQRY)->R8_DATAINI) == 1 .Or. (cAliasQRY)->R8_DATAINI < dPerIni) .And. Day(dPerFim) == nDiasDisp
			nDiasDisp := DiasTrab
		EndIf

		If (cAliasQRY)->R8_DATAINI >= dPerIni
			If !Empty((cAliasQRY)->R8_DATAFIM) .and. (cAliasQRY)->R8_DATAFIM < dPerFim
				If (GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dPerFim) == 31 .And. nDiasC == 30 .And. SRA->RA_CATFUNC $ "M*C") .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "Q1/Q2/Q3")//--Sempre será considerado os dias de auxilio maternidade
					nAuxAfa	:= (cAliasQRY)->R8_DATAFIM - (cAliasQRY)->R8_DATAINI + 1
					nDiasSaldo := Min(nDiasSaldo,nAuxAfa)
				Else
					nAuxAfa	:= (cAliasQRY)->R8_DATAFIM - (cAliasQRY)->R8_DATAINI + 1
				EndIf
			Else
				If (GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dPerFim) == 31 .And. nDiasC == 30 .And. SRA->RA_CATFUNC $ "M*C") .And. !((cAliasQRY)->RCM_TIPOAF == '4').And. !((cAliasQRY)->RCM_CODSEF $ "Q1/Q2/Q3")//--Sempre será considerado os dias de auxilio maternidade
					If Year(SRA->RA_ADMISSA) == Year(dPerIni) .And. Month(SRA->RA_ADMISSA) == Month(dPerIni)
						nAuxAfa	:= dPerFim - (cAliasQRY)->R8_DATAINI + 1
					Else
						nAuxAfa	:= dPerFim - (cAliasQRY)->R8_DATAINI
						nAuxAfa2:= dPerFim - (cAliasQRY)->R8_DATAINI + 1
					EndIf	
					nDiasSaldo 	:= Min(nDiasSaldo,nAuxAfa)
					nDSaldo2	:= Min(nDSaldo2,nAuxAfa2)
				Else
					If P_PGSALFEV
						nAuxAfa	:= If(Day(dPerFim) <= 29 .And. nDiasC == 30 .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "O1*P1"), If(Day(dPerFim) == 28,dPerFim - (cAliasQRY)->R8_DATAINI + 3,dPerFim - (cAliasQRY)->R8_DATAINI + 2) ,dPerFim - (cAliasQRY)->R8_DATAINI + 1)
					Else
						nAuxAfa	:= dPerFim - (cAliasQRY)->R8_DATAINI + 1
					EndIf
				EndIf
			EndIf
		Else
			If !Empty((cAliasQRY)->R8_DATAFIM) .and. (cAliasQRY)->R8_DATAFIM <= dPerFim
				nAuxAfa := (cAliasQRY)->R8_DATAFIM - dPerIni + 1
				If SubStr((cAliasQRY)->RCM_CODSEF,1,1) == "Q" .and. !(Day(dPerFim) <= 28)
					nDiasSaldo	:= (cAliasQRY)->R8_DATAFIM - dPerIni + 1
				EndIf
			Else
				If P_PGSALFEV
					nAuxAfa	:= If(Day(dPerFim) <= 29 .And. nDiasC == 30 .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "O1*P1"), If(Day(dPerFim) == 28,dPerFim - dPerIni + 3,dPerFim - dPerIni + 2) ,dPerFim - dPerIni + 1)
				Else
					nAuxAfa	:= dPerFim - dPerIni + 1
				EndIf
			EndIf
		EndIf
				
		// Tratamento para fevereiro com afatamento o mês inteiro
		If Month(dPerFim) == 2 .And. Day(dPerFim) >= 28 .And. Day(dPerFim) <= 29
			If !((cAliasQRY)->RCM_TIPOAF == '4') .And. ((nTotAfast + nAuxAfa) >= nDiasC .Or. (nTotAfast + nAuxAfa) >= Day(dPerFim))
				//Verifica se afastamento começou no inicio do mes
				If nTotAfast > 0
					nAuxAfa 	:= DiasTrab - nTotAfast
					nDiasDisp 	:= DiasTrab - nTotAfast
				//Se fevereiro e afastamento for o mês inteiro
				ElseIf nAuxAfa == Day(dPerFim) .and. P_PGSALFEV
					nAuxAfa     := DiasTrab
				EndIf
			// Férias o mes inteiro nao deve gerar dias de pagamento para adiantamento
			ElseIf ((cAliasQRY)->RCM_TIPOAF == '4') .And. ( (nTotAfast + nAuxAfa) >= Day(dPerFim) )
				If nTotAfast + nAuxAfa >= Day(dPerFim) .And. (nDiasMat == 0 .Or. cPgSalMat != "S")
					nAuxAfa := IIF(nAuxAfa < 30 .And. DiasTrab == 30 .And. SRA->RA_CATFUNC = "M" .And. cTipoRot <> "2", nAuxAfa, DiasTrab)
				Else
					nTotAfast += nAuxAfa
				EndIf
				If (nDiasAfas + nAuxAfa) == Day(dPerFim) .And. P_PGSALFEV .And. nDiasAfas > 0
					nDiasAfas += (DiasTrab - (nDiasAfas + nAuxAfa))
				EndIf
			Else 
				nTotAfast += nAuxAfa
			EndIf
		EndIf
		
		If !lDissidio .And. !(cPaisLoc == "BRA" .And. cTipoRot == "4" .And. cCompl == "S" .And. lProxMes)
			//Se nao for adiantamento e afastamento de ferias/suspensao
			If !(cTipoRot == "2" .And. (cAliasQRY)->RCM_TIPOAF == "4") .And. !(cPaisLoc == "BRA" .And. cTipoRot == "2" .And. (cAliasQRY)->RCM_TPEFD == "37")
				nDiasPagar 	:= Min(nDiasSaldo,nDiasDisp)
				nDPagar2	:= Min(nDSaldo2,nDDisp2)
			EndIf
		Else
			IF !(cAliasQRY)->RCM_TIPOAF == "4"
				If (cAliasQRY)->R8_DIASEMP == 0
					nDiasPagar := 0
				ElseIf !Empty((cAliasQRY)->R8_DATAFIM)
					If (dPerIni - (cAliasQRY)->R8_DATAINI + 1 ) > (cAliasQRY)->R8_DIASEMP
						nDiasPagar := 0
					Else
						dDataAux := Min(dPerFim,(cAliasQRY)->R8_DATAFIM)
						lValAfas := SRA->RA_CATFUNC = "M" .And. dDataAux == dPerFim .And. nDiasC == 30
						If ( Month(dPerFim) == 2 .And. P_PGSALFEV ) .And. lValAfas
							nDiasPagar := Min( ( dDataAux + If( Day(dDataAux) == 28,2,1 ) ) - (Max(dPerIni,(cAliasQRY)->R8_DATAINI)) + 1,(cAliasQRY)->R8_DIASEMP)
						ElseIf Day(dPerFim) == 31 .And. Day(dDataAux) == 31 .And. (GetMvRH("MV_DIASPER",,"1") == "2" .AND. nDiasC == 30 .And. SRA->RA_CATFUNC $ "M*C") .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "Q1/Q2/Q3")
							nDiasPagar := Min( dDataAux - (Max(dPerIni,(cAliasQRY)->R8_DATAINI)),(cAliasQRY)->R8_DIASEMP)
						Else
							nDiasPagar := Min( dDataAux - (Max(dPerIni,(cAliasQRY)->R8_DATAINI)) + 1,(cAliasQRY)->R8_DIASEMP)
						EndIf
						If nDiasPagar > (cAliasQRY)->R8_DIASEMP - (dPerIni - (cAliasQRY)->R8_DATAINI )
							nDiasPagar :=  Min(nDiasPagar ,(cAliasQRY)->R8_DIASEMP - (dPerIni - (cAliasQRY)->R8_DATAINI + If(Day(dPerIni-1)==30 .and. lValAfas,1,0 )))
						EndIf
					EndIf
				Else
					If (dPerIni - (cAliasQRY)->R8_DATAINI + 1 ) > (cAliasQRY)->R8_DIASEMP
						nDiasPagar := 0
					Else
						lValAfas := SRA->RA_CATFUNC = "M" .And. nDiasC == 30
						If ( Month(dPerFim) == 2 .And. P_PGSALFEV ) .And. lValAfas
							nDiasPagar := Min( ( dPerFim + If( Day(dPerFim) == 28,2,1 ) ) - (Max(dPerIni,(cAliasQRY)->R8_DATAINI)) + 1,(cAliasQRY)->R8_DIASEMP)
						ElseIf (GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dPerFim) == 31 .And. nDiasC == 30 .And. SRA->RA_CATFUNC $ "M*C") .And. !((cAliasQRY)->RCM_TIPOAF == '4') .And. !((cAliasQRY)->RCM_CODSEF $ "Q1/Q2/Q3")
							nDiasPagar := Min(dPerFim - (Max(dPerIni,(cAliasQRY)->R8_DATAINI)),(cAliasQRY)->R8_DIASEMP)
						Else
							nDiasPagar := Min(dPerFim - (Max(dPerIni,(cAliasQRY)->R8_DATAINI)) + 1,(cAliasQRY)->R8_DIASEMP)
							nDiasPagar := If(nDiasPagar == (cAliasQRY)->R8_DIASEMP, Max((nDiasPagar - (dPerIni - (cAliasQRY)->R8_DATAINI + If(Day(dPerIni-1)==30 .and. lValAfas,1,0 ))),0), nDiasPagar)
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf
		//Se nDiasPagar for 31, e calculo for por 30 dias, deve igualar variaveis, para que não ocorra proporcionalização incorreta.
		nDiasPagar := Min(nDiasPeriodo,nDiasPagar)
		nDiasAfas += nAuxAfa

		//Se deve pagar fevereiro por 30 e funcionário ficou afastado o mês inteiro, paga os dias de salário para completar 30
		If Month(dPerFim) == 2 .And. P_PGSALFEV .And. nDiasAfas == 30 .And. cTipoRot == "1" .And. (cAliasQRY)->R8_DATAFIM >= dPerFim .And. nDiasPagar > 0
			nDiasPagar	:= If(nDiasPagar > Day(dPerFim), Day(dPerFim), nDiasPagar)
			nDiasAfas 	:= Day(dPerFim)
		EndIf		
				
		If (cAliasQRY)->RCM_DEPFGT == "1" .OR. (cAliasQRY)->RCM_TIPO = "001"  //Ferias
			If AllTrim((cAliasQRY)->RCM_CODSEF) == "M" .And. !(lTCpoFgts .And. SRA->RA_PERFGTS > 0.00)
				nDiasFgts 	+= nDiasPagar
			Else
				nDFgts		:= Min(DiasTrab,nAuxAfa)
				If (cAliasQRY)->RCM_TIPO != "001"
					nDiasFgts	+= nDFgts
					//Caso a verba de pagamento da ausência tenha configuração para FGTS, abate os dias pagos na verba que já entrarão para a base.
					If !Empty((cAliasQRY)->RCM_PD) .and. (cAliasQRY)->RCM_PD <> aCodFol[042,1] .and. nDiasPagar > 0 .and. RetValSRV((cAliasQRY)->RCM_PD, SRA->RA_FILIAL, "RV_FGTS") == "S"
						nDiasFgts := Max(0, nDiasFgts - nDiasPagar)
					EndIf
				EndIf
			EndIf
		EndIf

		If (cAliasQRY)->RCM_TIPO = "001"  //Ferias
			nDiasFer += nAuxAfa
		EndIf

		If (cAliasQRY)->RCM_ENCEMP == "1"
			nDEnc		:= Min(DiasTrab,nAuxAfa)
			nDiasEnc	+= nDEnc
		EndIf

		If (cAliasQRY)->RCM_MESMED > 0 .and. SRA->RA_CATFUNC $ (cAliasQRY)->RCM_CATMED
			nMesMedAfa := (cAliasQRY)->RCM_MESMED
		Else
			nMesMedAfa := 0
		EndIf

		If nDFgts > 0 .and. SRA->RA_CATFUNC == "C"
			If (cAliasQRY)->RCM_CODSEF == "P1"
				fVarRot("nMedComiss",( nMedComiss / nDiasC * nDiasPagar),"A")
			Else
				fVarRot("nMedComiss",( nMedComiss / nDiasC * nDFgts),"A")
			EndIf
		EndIf

		//TODO

		If ! cCont15 .And. (cAliasQRY)->RCM_CODSEF $ "P1*O1"

			nDiasEmp := Max(nDiasEmp, (cAliasQRY)->R8_DIASEMP)
			If nDiasPagos <= nDiasEmp
				nDiasPagar := If(nDiasPagos + nDiasPagar < nDiasEmp, nDiasPagar, nDiasEmp - nDiasPagos)
				nDiasPagos += nDiasPagar
			Else
				nDiasPagar := 0
			EndIf
		EndIf

		If nDiasPagar > 0
			nDiasPg += nDiasPagar  //Soma valor de dias a pagar no mnemonico
			If lTemProAd
				If (cAliasQRY)->R8_PROADIC <> "1" .Or. (cAliasQRY)->RCM_CODSEF $ "Q1*Q2*Q3*Q4*Q5*Q6"
					nDaPaPg += nDiasPagar
				EndIf
			Else
				nDaPaPg += nDiasPagar
			EndIf

			If (cAliasQRY)->RCM_CODSEF	$ "Q1*Q3"
				nDiasMat += nDiasPagar
			EndIf
			If (cAliasQRY)->RCM_CODSEF	== "Q2"
				nDPrgSalMa += nDiasPagar
			EndIf
			If (cAliasQRY)->RCM_TIPO == "015" .And. !lDissidio//Licença Remunerada
				nDiasLic += nDiasPagar
			EndIf

			//RECESSO ESTAGIARIO
			If (cAliasQRY)->R8_TIPOAFA == '002' .And. SRA->RA_CATFUNC $ '*E*G*'
				//Se parte do recesso ocorrer no mes seguinte efetua todo o calculo no primeiro mes
				If MesAno((cAliasQRY)->R8_DATAINI) == MesAno(dDtPesq) .And. MesAno((cAliasQRY)->R8_DATAFIM) > MesAno(dDtPesq)
					nDiasPagar   := (cAliasQRY)->R8_DURACAO
				EndIf
			EndIf

			If nDiasC == 30 .And. nAuxAfa > 30 .And. (cAliasQRY)->RCM_CODSEF $ "O1*P1*R "
				nAuxAfa--
			EndIf

			aAdd(aDetAfas,	{	(cAliasQRY)->R8_PD			,;		//Codigo verba
			nDiasPagar										,;		//Qtd Dias a Pagar
			(cAliasQRY)->R8_NUMID							,;		//Numero ID
			nDFgts											,;		//Dias para FGTS
			nDEnc											,;		//Dias para Encargos
			nAuxAfa											,;		//Total dias afastados
			(cAliasQRY)->RCM_CODSEF							,;		//Codigo SEFIP
			(cAliasQRY)->R8_DATAINI							,;		//Data Inicial do Afastamento
			nMesMedAfa										,;		//Quantidade de meses para calculo de media
			(cAliasQRY)->R8_DATAFIM     					,;		//Data Final do Afastamento		
			Iif( cPaisLoc == "BRA", (cAliasQRY)->RCM_TPEFD, "  " ),;//Tipo de afastamento eSocial
			Iif( lTemPdSup, (cAliasQRY)->RCM_PDSUP, "" )	,;		//Verba Sup.
			(cAliasQRY)->RCM_DIASEM							,;		//Dias Pg Empr
			(cAliasQRY)->R8_SEQ								,;		//Sequência
			(cAliasQRY)->R8_CONTAFA							,;		//Nr.Sequencia
			nAuxAfa2 										,;		//Total dias afastados
			nDPagar2 										,;		//Qtd Dias a Pagar
			(cAliasQRY)->R8_TIPOAFA	 } )							//Tipo de afastamento
		ElseIf cTipoRot == "4" .And. Type('lRescDis') <> "U" .And. lRescDis .And. (cAliasQRY)->R8_DATAINI + (cAliasQRY)->R8_DPAGAR >= dPerIni
				aAdd(aDetAfas,	{	(cAliasQRY)->R8_PD			,;		//Codigo verba
				nAuxAfa											,;		//Qtd Dias a Pagar
				(cAliasQRY)->R8_NUMID							,;		//Numero ID
				nDFgts											,;		//Dias para FGTS
				nDEnc											,;		//Dias para Encargos
				nAuxAfa											,;		//Total dias afastados
				(cAliasQRY)->RCM_CODSEF							,;		//Codigo SEFIP
				(cAliasQRY)->R8_DATAINI							,;		//Data Inicial do Afastamento
				nMesMedAfa										,;		//Quantidade de meses para calculo de media
				(cAliasQRY)->R8_DATAFIM     					,;		//Data Final do Afastamento
				Iif( cPaisLoc == "BRA", (cAliasQRY)->RCM_TPEFD, "  " ),;//Tipo de afastamento eSocial
				Iif( lTemPdSup, (cAliasQRY)->RCM_PDSUP, "" )	,;		//Verba Sup.
				(cAliasQRY)->RCM_DIASEM							,;		//Dias Pg Empr
				(cAliasQRY)->R8_SEQ								,;		//Sequência
				(cAliasQRY)->R8_CONTAFA							,;		//Nr.Sequencia
				nAuxAfa2 										,;		//Total dias afastados
				nDPagar2 										,;		//Qtd Dias a Pagar
				(cAliasQRY)->R8_TIPOAFA	 } )						    //Tipo de afastamento
		ElseIf (cAliasQRY)->RCM_DEPFGT == "1" .Or. (lTemPdSup .And. (cAliasQRY)->RCM_TIPOAF != "4")
				aAdd(aDetAfas,	{	(cAliasQRY)->R8_PD			,;		//Codigo verba
				0												,;		//Qtd Dias a Pagar
				(cAliasQRY)->R8_NUMID							,;		//Numero ID
				nDFgts											,;		//Dias para FGTS
				nDEnc											,;		//Dias para Encargos
				nAuxAfa											,;		//Total dias afastados
				(cAliasQRY)->RCM_CODSEF							,;		//Codigo SEFIP
				(cAliasQRY)->R8_DATAINI							,;		//Data Inicial do Afastamento
				nMesMedAfa										,;		//Quantidade de meses para calculo de media
				(cAliasQRY)->R8_DATAFIM     					,;		//Data Final do Afastamento	
				Iif( cPaisLoc == "BRA", (cAliasQRY)->RCM_TPEFD, "  " ),;//Tipo de afastamento eSocial
				Iif( lTemPdSup, (cAliasQRY)->RCM_PDSUP, "" )	,;		//Verba Sup.
				(cAliasQRY)->RCM_DIASEM							,;		//Dias Pg Empr
				(cAliasQRY)->R8_SEQ								,;		//Sequência
				(cAliasQRY)->R8_CONTAFA							,;		//Nr.Sequencia
				nAuxAfa2 										,;		//Total dias afastados
				nDPagar2 										,;		//Qtd Dias a Pagar
				(cAliasQRY)->R8_TIPOAFA	 } )							//Tipo de afastamento
		EndIf

		// Adiciona afastamento em mnemonico para porporcionalidade de tarefas
		If MesAno((cAliasQRY)->R8_DATAINI) == MesAno(dDtPesq) .Or.;
		MesAno((cAliasQRY)->R8_DATAINI) < MesAno(dDtPesq) .And. ( Empty((cAliasQRY)->R8_DATAFIM) .Or. MesAno((cAliasQRY)->R8_DATAFIM) >= MesAno(dDtPesq) )
			aAdd( aAfaTar, {(cAliasQRY)->R8_SEQ	 , (cAliasQRY)->R8_TIPO , (cAliasQRY)->R8_DATAINI , (cAliasQRY)->R8_DATAFIM , (cAliasQRY)->R8_CONTAFA , .F. } )
		EndIf

		//O INSS paga apenas os tipos O|P
		If ((cAliasQRY)->RCM_CODSEF $ "O1*P1*R ") .and. nDiasPagar < 1
			If !( Type("aDiaAfaEs") == "U" )
				If (nPosVld := aScan( aDiaAfaEs, { |x| x[1] == (cAliasQRY)->RCM_CODSEF } ) )  == 0
					aAdd( aDiaAfaEs, { (cAliasQRY)->RCM_CODSEF, (nAuxAfa - nDiasPagar), nMesMedAfa } )
				Else
					aDiaAfaEs[nPosVld][2] += (nAuxAfa - nDiasPagar)
				EndIf
			EndIf
		Endif
		
		(cAliasQRY)->(dbSkip())
	Enddo
	
	If nDiasFer > 0 .And. Type('lRescDis') <> "U" .And. lRescDis
		//Soma os dias a serem pagos de cada afastamento
		Aeval(aDetAfas, {|X| If(x[18] != "001", nTotAfasP+= x[2],0) } )
	else
		//Soma os dias a serem pagos de cada afastamento
		Aeval(aDetAfas, {|X| nTotAfasP+= x[2] } )
	Endif
	
	//Subtrai 1 dia dos dias de afastamentos para não pagar um dia a mais em mês de 31 dias.
	If ( nDiasC == 30 .and. nDiasAfas > 30 .and. ascan(aDetAfas, { |x| x[7] $ "Q1*Q2"}) > 0 .and. ;
		(nTotAfasP > 30  .Or. (nDiasMat > 0 .And. nDiasFer > 0 )) .Or. (nDiasC == 30 .And. nDiasFer == 30));
		.Or. (nDiasC == 30 .And. DiasTrab == 30 .And. nTotAfasP + nDiasFer > 30)
		If (nX := ( ascan(aDetAfas, { |x| !(x[7] $ "Q1*Q2")}))) > 0
			aDetAfas[nX, 2] := aDetAfas[nX, 2] - 1
			nDiasAfas := nDiasAfas - 1
			//Caso os dias de férias sejam 30 e os dias de cáculo também sejam 30, subtrai também dos dias afastados.
			If nDiasC == 30
				aDetAfas[nX, 6] := aDetAfas[nX, 6] - 1
				If nDiasPg + nDiasFer > nDiasC
					nDiasPg--
					nDaPaPg--
				EndIf
			EndIf
		ElseIf (nX := ( ascan(aDetAfas, { |x| x[7] == "Q2"}))) > 0
			aDetAfas[nX, 2] := aDetAfas[nX, 2] - 1
			nDiasAfas := nDiasAfas - 1
			ndiaspg	  := ndiaspg - 1
			nDaPaPg	  := nDaPaPg - 1
		EndIf
	EndIf
	
	// Se houve apenas afastamento pago pelo INSS ou se a soma de afastamento + férias for 31 dias 
	// e o cálculo for por 30 subtri um dia do afastamento
	If ( nDiasC == 30 .And. DiasTrab == 30 .And. nDiasAfas > 30 ) .And. (Empty(aDetAfas) .Or. aScan(aDetAfas, { |x| x[2] > 0 }) == 0) .And. !Empty(aDiaAfaEs)
		aDiaAfaEs[Len(aDiaAfaEs)][2]--
		nDiasAfas--
	EndIf

	DiasTrab := Iif(SRA->RA_CATFUNC = "M" .And. nDiasFer == nDiasC, 0, DiasTrab - nDiasAfas )

	If lTemPdSup
		For nLinha := 1 To Len(aDetAfas)
			//Se campo RCM_PDSUP estiver preenchido
			If !Empty(aDetAfas[nLinha, 12])
				//Caso seja continuação de afastamento (R8_CONTAFA), concatena duração e sequência (R8_SEQ)
				If (nPos := aScan( aDurAux, { |x| aDetAfas[nLinha, 15] $ x[14] } )) > 0
					aDurAux[nPos,  2]  += aDetAfas[nLinha, 2]
					aDurAux[nPos,  3]  += aDetAfas[nLinha, 3]+"/"
					aDurAux[nPos,  6]  += aDetAfas[nLinha, 6]
					aDurAux[nPos, 10]  := aDetAfas[nLinha, 10]
					aDurAux[nPos, 14]  += aDetAfas[nLinha, 14]+"/"
				//Caso contrário, inclui novo
				Else
					aAdd( aDurAux, aClone(aDetAfas[nLinha]) )
					aDurAux[Len(aDurAux), 14] += "/"//R8_SEQ
				EndIf
			EndIf
		Next nLinha
		For nLinha := 1 To Len(aDurAux)
			//Se afastamento sem data de retorno ou (duração do afastamento no mês superior aos dias de pagamento da empresa ou dias de saldo do afastamento inferior à duração do mês ) ou duração do afastamento total superior a 15 dias
			If Empty(aDurAux[nLinha, 10]) .Or. ( (aDurAux[nLinha, 6] > aDurAux[nLinha, 13]) .Or. (aDurAux[nLinha, 2] < aDurAux[nLinha, 6]) ) .Or.;
			 	( Len(Alltrim(aDurAux[nLinha,14])) < 5 .And. (aDurAux[nLinha, 10] - aDurAux[nLinha, 8] + 1 > 15) )
				For nCont := 1 To Len(aDetAfas)
					If aDetAfas[nCont, 14] $ aDurAux[nLinha, 14] .And. ( !lDissidio .Or. aScan( aPdOld, { |x| x[1] == aDetAfas[nLinha, 12] .And. x[15] $ aDurAux[nLinha, 3] }  ) > 0 )
						aDetAfas[nCont, 1] := aDetAfas[nCont, 12]//RCM_PDSUP
						FIncide(aDetAfas[nCont, 12])
						If P_LPRIAFA .And. aDetAfas[nCont, 16] > 0 .And. aDetAfas[nCont, 02] < aDetAfas[nCont, 13] .And. aDetAfas[nCont, 06] < aDetAfas[nCont, 16]
							aDetAfas[nCont, 2] := aDetAfas[nCont, 17]
							DiasTrab += aDetAfas[nCont, 06]
							DiasTrab -= aDetAfas[nCont, 16]
						EndIf
					EndIf
				Next nLinha
			EndIf
		Next nLinha
	EndIf

	//O INSS paga apenas os tipos O|P
	For nX := 1 to len(aDetAfas)
		If aDetAfas[nX, 7] $ "O1*P1*R " .AND. aDetAfas[nX, 2] > 0 
			If !( Type("aDiaAfaEs") == "U" )
				If (nPosVld := aScan( aDiaAfaEs, { |x| x[1] == aDetAfas[nx, 7] } ) )  == 0
					aAdd( aDiaAfaEs, { aDetAfas[nX, 7], (aDetAfas[nX, 6] - aDetAfas[nX, 2]), aDetAfas[nX, 9] } )
				Else
					aDiaAfaEs[nPosVld][2] += (aDetAfas[nX, 6] - aDetAfas[nX, 2])
				EndIf
			EndIf
		Endif
	Next nX

	DbSelectArea(cAliasQRY)
	DbCloseArea()

	If (lDissidio .And. SRA->RA_CATFUNC = "M")
		//necessario buscar todos os lancamentos de salario no aPdOld para contagem correta dos dias trabalhados, pois pode haver lancamento rateado.
		If lGestPubl .And. SRA->RA_REGIME == "2"
			If ( nPos031 := aScan( aPdOld, { |x| x[1] == aCodFol[644,1] }  ) ) > 0
				DiasTrab := 0
				Aeval( aPdOld , { |X| If(x[1] == aCodFol[644,1], DiasTrab += x[4], DiasTrab+=0) } )
			EndIf
	    Else
			If ( nPos031 := aScan( aPdOld, { |x| x[1] == aCodFol[31,1] }  ) ) > 0
				DiasTrab := 0
				Aeval( aPdOld , { |X| If(x[1] == aCodFol[31,1], DiasTrab += x[4], DiasTrab+=0) } )
			EndIf
		EndIf
	EndIf

	If !(SRA->RA_CATFUNC $ "D*H*T*G")
		//?-Tratamento para diminuir o Afastamento de Maternidade quando no mesmo mes que Ferias
		If (nDiasFer + nDiasMat + nDPrgSalMa) > nDiasPeriodo
			IF nDPrgSalMa > 0
				nDPrgSalMa -= Max(((nDiasFer + nDiasMat + nDPrgSalMa) - nDiasPeriodo), 0)
			Else
				nDiasMat -= ((nDiasFer + nDiasMat) - nDiasPeriodo)
				nDiasPg := nDiasMat // Iguala as variáveis para não pagar nada além da maternidade
				nDaPaPg := nDiasMat // Iguala as variáveis para não pagar nada além da maternidade
			Endif
		EndIf
	EndIf

	//Se for dissídio e o funcionário horista verifica se houve pagamento integral do salário pois pode haver lançamento de afastamento retroativo.
	If lDissidio .And. SRA->RA_CATFUNC == "H"
		DiasTrab2 := DiasTrab
		DiasTrab := nDiasC
		FCALCDSR(@NDSR,LADMISSAO,@NHORASTRAB,@NHORASDSR)
		Aeval( aPdOld , { |X| If(x[1] == aCodFol[32,1], nHrTrabold += x[4], nHrTrabold+=0) } )
		If nHrTrabold <> NHORASTRAB
			DiasTrab := DiasTrab2
		EndIf
	EndIf

	DiasTrab := If(DiasTrab<0,0,DiasTrab)

	If cPaisLoc <> "BRA"
		nDiasFgts := 0
	EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fAfastados³ Autor ³ Equipe Rh - Mauro     ³ Data ³02/05/96  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Gerar as Verbas de Matern.,Aux.Doenca,Aux.Acid e o valor de ³±±
±±³          ³Fgts a Ser Somado na Base.                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FAfastados(aCodFol)                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FAfastados(aCodFol)

	Local cSeq		 := "0"
	Local cPdMedAfa	 := P_PDMEDAFA
	Local cCodCorr	 := ""
	Local nT
	Local nMedComiss := 0
	Local nMedComisC := 0
	Local nMedPrgComisC := 0
	Local nMedAuxMat := 0
	Local nLimDMat	 := GetMvRH("MV_LIMDMAT",,0)
	Local nLimMatAux := 0
	Local nValAuxMat := 0
	Local nAdcAuxMat := 0
	Local nValExcMat := 0
	Local nValAuxMed := 0
	Local nValExcMed := 0
	Local nValPropM  := 0
	Local nMedComAux := 0
	Local nHrsAux	 := 0
	Local lValMater	 := .T.		// Variavel que define a valorizacao das medias para salario maternidade
	Local nMedPer 		:= nMedIns := 0.00
	Local n1DiasMat 	:= nDiasMat
	Local n1DPrgSalMa 	:= nDPrgSalMa
	Local nDiasSalM     := 0
	Local nMedAux		:= 0
	Local nSalDia		:= 0
	Local nSalHora		:= 0
	Local nPos407		:= 0
	Local nPos928		:= 0
	Local nPosPd		:= 0
	Local nOldSalDia	:= 0
	Local nOldSalHora	:= 0
	Local lSALMGRP		:= GetMvRH("MV_SALMGRP",,"N") == "S"
	Local lLctoDia		:= .F.
	Local lArred		:= .F.
	Local aAfaAux		:= {}
	Local aDetAux		:= {}
	Local nDiasAux		:= 0
	Local nMedVlDis		:= 0
	Local __lMemCalc 	:= cPaisLoc == "BRA" .And. fMemCalc() //Memória de cálculo
	Local nValPeri      := 0
	Local nValInsa      := 0
	Local nValAdts		:= 0
	Local nValTran		:= 0
	Local nValConf		:= 0
	Local nTotAdic		:= 0
	Local nPosGCom		:= 0
	Local nDiasMAnt		:= 0
	Local nAfasAux		:= 0
	Local nDetAux 		:= 0
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Array que contem as variaveis criadas por fVarRot()       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Type("aVarRot") = "U"
		aVarRot := {}
	EndIf

	If Type("aDetAfas") == "U"
		aDetAfas := {}
	EndIf

	If cTipoRot == "1" .and. !lDissidio .and. cSitFolh == "D" //Se for folha e funcionário estiver demitido, não calcula.
		Return Nil
	EndIf

	//Calcula adicionais sobre medias quando configuracao do sindicato e Salario + Verbas
	cVbMedAux := If( Empty(P_VBMEDAUX), CVBMEDAUX , P_VBMEDAUX  )

	If lDissidio
		For nT := 1 to Len(aDetAfas)
			lLctoDia := RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_LCTODIA") == "S"
			If aScan(aAfaAux, { |x| x[1] == aDetAfas[nT,1] .and. (!lLctoDia .or. x[3] == aDetAfas[nT,3] ) } ) == 0
				nDiasAux := 0
				aEval( aPdOld, { |x| If( (x[1] == aDetAfas[nT,1] .and. ( !lLctoDia .or. DtoS(x[18]) == DtoS(aDetAfas[nT,8]) )) .Or. (cPaisLoc == "BRA" .And. ((RetValSrv( aDetAfas[nT,1], SRA->RA_FILIAL, "RV_INSS" ) == "S" .And. RetValSrv( aDetAfas[nT,1], SRA->RA_FILIAL, "RV_INCCP" ) == "15") .Or. (RetValSrv( aDetAfas[nT,1], SRA->RA_FILIAL, "RV_INSS" ) == "N" .And. RetValSrv( aDetAfas[nT,1], SRA->RA_FILIAL, "RV_INCCP" ) == "00")) .And. !Empty(x[15]) .And. x[15] == aDetAfas[nT,3]), nDiasAux += x[4], Nil ) }  )
				If nDiasAux > 0
					aAdd( aAfaAux, aClone(aDetAfas[nT]) )
					aAfaAux[Len(aAfaAux)][2] := nDiasAux
				ElseIf aDetAfas[nT,7] $ "Q1*Q3" .And. nDiasMat > 0
					nDiasMat := 0
					aEval( aPd, { |X| If( x[1] $ (aCodfol[1338,1]+"/"+aCodfol[1339,1]+"/"+aCodfol[1340,1]+"/"+aCodfol[1341,1]+"/"+aCodfol[1342,1]), x[9] := "D", Nil ) } )//Adicionais sobre maternidade
				EndIf
			EndIf
		Next nT
		aDetAfas := {}
		aDetAfas := aClone(aAfaAux)
	EndIf
	nDiasMAnt := nDiasMat

	For nT := 1 to Len(aDetAfas)
		If RetValSRV(aDetAfas[nT,1],SRA->RA_FILIAL,"RV_BASCAL") <> "2" //Se deve utilizar salario base incorporado (salhora e saldia) ou salario base original (saldor e salhor)
			nSalDia  := SalDor
			nSalHora := SalHor
		Else
			nSalDia  := SalDia
			nSalHora := SalHora
		EndIf

		nOldSalDia  := nSalDia
		nOldSalHora := nSalHora

		//Para Horista com jornada variavel buscar o salario nas medias
		If SRA->RA_CATFUNC == "H" .And. lTemHoJor .And. SRA->RA_HOJORVA == "1"
			// (dDt1,dDt2,     dDt3,dDt4,dDt5     ,nSal h  ,Val_SalMin,aCodFol,lMesAtu,lMovto    ,lFaltas,dDt6    ,dDt7,lJorVar)
			GPEXMED(     ,         ,   ,    ,         ,SalHora,Val_Salmin,aCodfol,       ,          ,       ,dDataAte,    ,.T.,aDetAfas[nT,7])
			nDiasMat := n1DiasMat
			If (cTBLXMED)->(dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "A" + "999" + "99MD" ))
				nSalDia  := (cTBLXMED)->RP_VALATU / nDiasC
				nSalHora := nSalDia / SRA->RA_HRSDIA

			EndIf
			fDelTMPMED()
		EndIf

		If aDetAfas[nT,7] $ "Q1*Q2*Q3*Q4*Q5*Q6"
			n1DiasMat 	:= If(aDetAfas[nT,7] $ "Q1*Q3",Min(aDetAfas[nT,2],nDiasMAnt),0)
			n1DPrgSalMa := If(aDetAfas[nT,7] == "Q2",aDetAfas[nT,2],0)
			nDiasSalM 	:= If(aDetAfas[nT,7] $ "Q4*Q5*Q6",n1DiasMat,0)
			//Verificar se a licença é por adoção, mas está configurada com pagamento para a empresa,
			//neste caso atualizar a variável nDiasMat com a qtde de dias a ser paga
			If aDetAfas[nT,7] $ "Q4*Q5*Q6"
				n1DiasMat:= aDetAfas[nT,2]
			Endif

			nMedAux 	:= aDetAfas[nT,9]
			nLimMatAux	:= 0
			nMedVlDis	:= 0
			If cPaisLoc ==  "BRA"
				If P_HRSPONFO .and. SRA->RA_CATFUNC == "H"
					nHrsAfas:= 0
					nDiasAf	:= 0
					fHrsPon(aDetAfas[nT,7],@nHrsAfas, @nDiasAf,aDetAfas[nT,8],aDetAfas[nT,10],aDetAfas[nT,2] )
					nHrsAux := nHrsAfas
					nHrsAfas:= fConvHr(nHrsAfas,"D")
					If !Empty(nHrsAfas)
						nSalMat  	:= nHrsAfas * SRA->RA_SALARIO
						nSalPrgMat	:= (nSalMat/nDiasAf) * nDPrgSalMa
					Else
						nSalMat  	:= nSalDia * n1DiasMat
						nSalPrgMat	:= nSalDia * n1DPrgSalMa
					EndIf
				Else
					nSalMat  	:= nSalDia * n1DiasMat
					nSalPrgMat	:= nSalDia * n1DPrgSalMa
				EndIf
				//- Busca valor das verbas dos adicionais.
				If !lDissidio
					aEval( aPd, { |x| nValAdts += If( x[1] $ aCodFol[1338,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPd, { |x| nValInsa += If( x[1] $ aCodFol[1339,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPd, { |x| nValPeri += If( x[1] $ aCodFol[1340,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPd, { |x| nValConf += If( x[1] $ aCodFol[1341,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPd, { |x| nValTran += If( x[1] $ aCodFol[1342,1] .And. x[9] != "D", x[5], 0 ) } )
				Else
					aEval( aPdOld, { |x| nValAdts += If( x[1] $ aCodFol[1338,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPdOld, { |x| nValInsa += If( x[1] $ aCodFol[1339,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPdOld, { |x| nValPeri += If( x[1] $ aCodFol[1340,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPdOld, { |x| nValConf += If( x[1] $ aCodFol[1341,1] .And. x[9] != "D", x[5], 0 ) } )
					aEval( aPdOld, { |x| nValTran += If( x[1] $ aCodFol[1342,1] .And. x[9] != "D", x[5], 0 ) } )

					nValAdts := nValAdts * (1 + (RHH->RHH_INDICE/100))
					nValInsa := nValInsa * (1 + (RHH->RHH_INDICE/100))
					nValPeri := nValPeri * (1 + (RHH->RHH_INDICE/100))
					nValConf := nValConf * (1 + (RHH->RHH_INDICE/100))
					nValTran := nValTran * (1 + (RHH->RHH_INDICE/100))
				EndIf

				nTotAdic := nValAdts + nValInsa + nValPeri + nValConf + nValTran

			Else
				nSalMat  := (nSalDia * n1DiasMat) / 2
			EndIf

			//--Calcula media de comissao (para argentina e a media de todas as verbas dos ultimos 3 meses)
			If nMedAux > 0
				If ( nPos407 := aScan( aPd, { |x| x[1] == aCodFol[407,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) ) == 0
					GPEXMED(,,,,,SalHora,Val_Salmin,aCodfol,,,,dDataAte) //Chama calculo de medias para alimentar arquivo TRP
					DbSelectArea(cTBLXMED)
					IF dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "A" + "999" + "99MD" ) //Busca media de maternidade no arquivo TRP
						nMedComiss := (cTBLXMED)->RP_VALATU
						//Memória de cálculo
						If __lMemCalc
							fAddMemLog("Media Salario Maternidade Comissionado",1,1)
							fAddMemLog("Media calulada nMedComiss ->(TRP->RP_VALATU) : " + cValtochar((cTBLXMED)->RP_VALATU),1,2)
						EndIf
						FMedPerIns(@nMedPer,@nMedIns,"A",nSalHora,Val_SalMin,aCodFol,,,,P_ADISMED) //Calcula insalubridade/periculosidade sobre medias
						nMedComiss += (nMedPer + nMedIns)
						//Memória de Cálculo
						If __lMemCalc
							fAddMemLog("Periculosidade/Insalub nas médias (nMedPer + nMedIns) : " + cValtochar(nMedPer + nMedIns),1,2)
							fAddMemLog("nMedComiss +=  (nMedPer + nMedIns) : " + cValtochar(nMedComiss),1,2)
						EndIf
					EndIf
				Else
					nMedComiss := aPd[nPos407, 5]
				EndIf
				If !Empty(aCodFol[407,1]) .and. cPaisLoc == "BRA"
					If nPos407 == 0
						nMedComisC := (nMedComiss / nDiasC * n1DiasMat)
					Else
						nMedComisC := aPd[nPos407, 5]
					EndIf
					If ( nPos928 := aScan( aPd, { |x| x[1] == aCodFol[928,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) ) == 0
						nMedPrgComisC := (nMedComiss / nDiasC * n1DPrgSalMa)
					Else
						nMedPrgComisC := aPd[nPos928, 5]
					EndIf
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog("Dias salario maternidade (n1DiasMat) : " + cValtochar(n1DiasMat),1,2)
						fAddMemLog("nMedComisC --> ((nMedComiss / nDiasC * n1DiasMat)) : " + cValtochar(nMedComisC),1,2)
					EndIf
				Else
					nSalMat += (nMedComiss / nDiasC * n1DiasMat)
					nSalPrgMat += (nMedComiss / nDiasC * n1DPrgSalMa)
				EndIf
			EndIf

			//Abate média da maternidade da garantia de comissão.
			If ( nPosGCom := Ascan(aPd, { |X| X[1] = aCodFol[347,1] .And. X[7] # "I" .And. X[9] # "D" .And. X[3] = cSemana })) > 0
				apd[nPosGCom,5] := Max(NGCOMISPRO - nMedComisC - nMedPrgComisC - NTOTCOMIS, 0)
				NGCOMISPRO := Max(NGCOMISPRO - nMedComisC - nMedPrgComisC - NTOTCOMIS, 0)
			EndIf
		
			//--Licenca Maternidade
			nPosPd := Ascan(aPd, { |X| X[1] == aDetAfas[nT,1] .and. X[7] == "C" .and. X[9] # "D"  .And. X[3] = cSemana })
			If nPosPd > 0 
				If Empty(cSeq)
					cSeq := "0"
				EndIf
				cSeq := Soma1(cSeq)
			EndIf	
			If (nPosPd == 0 .Or. !Empty(cSeq)) .And. Ascan(aPd, { |X| X[1] == aDetAfas[nT,1] .and. X[7] $ "I/G" .and. X[9] # "D"  .And. X[3] == cSemana }) == 0
				//-- Define o valor de salario maternidade a ser pago
				nValAuxMat	:= nSalMat
				nAdcAuxMat	:= 0
				If RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_BASCAL") != "2"
					If nAdtServ > 0
						nAdcAuxMat	+= (nAdtServ / nDiasC * n1DiasMat)
					EndIf
					If nInsalub > 0
						nAdcAuxMat	+= (nInsalub / nDiasC * n1DiasMat)
					EndIf
					If nPeric > 0
						nAdcAuxMat	+= (nPeric / nDiasC * n1DiasMat)
					EndIf
					If nAdcConf > 0
						nAdcAuxMat	+= (nAdcConf / nDiasC * n1DiasMat)
					EndIf
					If nAdcTrf > 0
						nAdcAuxMat	+= (nAdcTrf / nDiasC * n1DiasMat)
					EndIf
				EndIf
				//-- Proporcionaliza o valor do limite de deducao em funcao dos dias
				//-- de licenca maternidade no mes corrente.
				nLimMatAux	:= Round(nLimDMat/nDiasC*n1DiasMat,2)
				//-- Verifica o Limite de Deducao do salario maternidade
				If nLimMatAux > 0 .And. !Empty(aCodFol[668,1]) .And. !Empty(aCodFol[669,1])
					nValExcMat	:= Iif( (nValAuxMat+nAdcAuxMat) > nLimMatAux , (nValAuxMat+nAdcAuxMat) - nLimMatAux , 0 )
					If nAdcAuxMat > 0 .And. nValExcMat > 0
						nValAuxMat 	:= Max(nLimMatAux - nAdcAuxMat, 0)
					Else
						nValAuxMat	:= nValAuxMat - nValExcMat
					EndIf
				EndIf
				//-- Gera a verba de licenca maternidade
				If aDetAfas[nT,7] == "Q2"
					FMatriz(aDetAfas[nT,1],Round(nSalPrgMat,MsDecimais(1)),n1DPrgSalMa,,,"D",,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
				Else
					FMatriz(aDetAfas[nT,1],Round(nValAuxMat,MsDecimais(1)),n1DiasMat,,,"D",,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
				EndIf
				
				If P_HRSPONFO .and. SRA->RA_CATFUNC == "H" .and. nHrsAux > 0 .and. !Empty( cCodCorr := RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_CODCORR"))
					If ( nPosPd := Ascan(aPd, { |X| X[1] == cCodCorr .and. X[7] == "C" .and. X[9] # "D" }) ) > 0
						aPd[nPosPd,4] := nHrsAux
					EndIf
				EndIf
				//-- Gera a verba de excedente de licenca maternidade
				If nValExcMat > 0 .And. aScan( aPd, { |x| x[1] == aCodFol[668,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) == 0
					FMatriz(aCodfol[668,1],Round(nValExcMat,MsDecimais(1)),n1DiasMat,,,"D",,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
				EndIf
				//-- Gera a verba de media de licenca maternidade para comissionados
				If nMedComisC > 0 .And. ( SRA->RA_CATFUNC $ "C*T" ) .And. !Empty(aCodFol[407,1])
					nValAuxMed := nMedComisC
					//-- Verifica o Limite de Deducao do salario maternidade
					If nLimMatAux > 0 .And. !Empty(aCodFol[668,1]) .And. !Empty(aCodFol[669,1])
						//-- Se ja superou o limite na verba 040 Licenca Maternidade
						//-- Lanco a media diretamente no execente
						If nValExcMat > 0
							nValExcMed	:= nValAuxMed
							nValAuxMed	:= 0
						Else
							//-- Avalia o limite utilizando o valor da verba 040 Licenca Maternidade
							nValExcMed	:= If( nValAuxMat + nValAuxMed + nTotAdic > nLimMatAux , (nValAuxMat + nValAuxMed + nTotAdic) - nLimMatAux , 0 )
							nValAuxMed	:= nValAuxMed - nValExcMed
						EndIf
					EndIf
					//-- Gera a verba de media de licenca maternidade
					If nValAuxMed > 0 .And. aScan( aPd, { |x| x[1] == aCodFol[407,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) == 0
						FMatriz(aCodfol[407,1],Round(nValAuxMed,MsDecimais(1)),n1DiasMat,,,"D",,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
						//Memória de cálculo
						If __lMemCalc
							fAddMemLog("Valor Media : " + cValtochar(nValAuxMed),1,2)
							fAddMemLog("Valor Excedente (nValExcMed) : " + cValtochar(nValExcMed),1,2)
							fAddMemLog("Verba " +aCodfol[407,1] + " - PAGTO MEDIAS AUXILIO MATERNIDADE (nValAuxMed - nValExcMed) : " + cValtochar(nValAuxMed),1,2)
						EndIf
					EndIf
					//-- Gera a verba de excedente de licenca maternidade
					If nValExcMed > 0 .And. aScan( aPd, { |x| x[1] == aCodFol[669,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) == 0
						FMatriz(aCodfol[669,1],Round(nValExcMed,MsDecimais(1)),n1DiasMat,,,"D",,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
					EndIf
				EndIf
				//-- Gera a verba de media de prorrogacao de licenca maternidade para comissionados
				If nMedPrgComisC > 0 .And. ( SRA->RA_CATFUNC $ "C*T" ) .And. !Empty(aCodFol[928,1]) .And. aScan( aPd, { |x| x[1] == aCodFol[928,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) == 0
					FMatriz(aCodfol[928,1],Round(nMedPrgComisC,MsDecimais(1)),n1DPrgSalMa,,,"D")
				EndIf

				//--Gera a verba de media para o salario maternidade (Funcionarias com salario nao variavel)
				If !( SRA->RA_CATFUNC $ "C*T" ) .And. ;
				( ( aCodfol[407,1] # Space(3) ) .or. ( aCodfol[928,1] # Space(3) ) ) .And.;
				( ( Ascan(aPd, { |X| X[1] = aCodfol[407,1] .And. X[9] # "D" .And. X[3] = cSemana }) == 0 ) .or. ;
				( Ascan(aPd, { |X| X[1] = aCodfol[928,1] .And. X[9] # "D" .And. X[3] = cSemana }) == 0 ) )
					If ( nPos407 := aScan( aPd, { |x| x[1] == aCodFol[407,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) ) == 0
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Monta Media 												 ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						GPEXMED(,,,,,SalHora,Val_Salmin,aCodfol,,,,dDataAte) //Chama calculo de medias para alimentar arquivo TRP
						If (cTBLXMED)->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "A" + "999" + "99MD" ) ) //Busca media de maternidade no arquivo TRP
							nMedAuxMat := (cTBLXMED)->RP_VALATU + fDsrHrsAtiv("A",aCodFol) //Calcula DSR e Horas Atividade sobre a media
							//Memória de cálculo
							If __lMemCalc
								fAddMemLog("Media Salario Maternidade",1,1)
								fAddMemLog("Media calulada (TRP->RP_VALATU) : " + cValtochar((cTBLXMED)->RP_VALATU),1,2)
								fAddMemLog("Media calulada + Hrs Atividade  (TRP->RP_VALATU + nMedAuxMat) : " + cValtochar(nMedAuxMat),1,2)
							EndIf
							FMedPerIns(@nMedPer,@nMedIns,"A",nSalHora,Val_SalMin,aCodFol,,,,P_ADISMED) //Calcula insalubridade/periculosidade sobre medias
							nMedAuxMat += (nMedPer + nMedIns)
							//Memória de cálculo
							If __lMemCalc
								fAddMemLog("Periculosidade/Insalub nas médias (nMedPer + nMedIns) : " + cValtochar(nMedPer + nMedIns),1,2)
								fAddMemLog("nMedAuxMat +=  (nMedPer + nMedIns) : " + cValtochar(nMedAuxMat),1,2)
							EndIf
						EndIf
					Else
						nMedAuxMat := aPd[nPos407, 5]
					EndIf
					If lDissidio
						aEval( aPdOld, { |x| nMedVlDis += If( x[1] $ aCodFol[407,1] .And. x[9] != "D", x[5], 0 ) } )
						If nMedAuxMat < nMedVlDis
							nMedAuxMat := nMedVlDis * (1 + (RHH->RHH_INDICE/100))
						EndIf
					EndIf
					If nMedAuxMat > 0
						nValAuxMed := nMedAuxMat
						If nPos407 == 0
							If aDetAfas[nT,7] $ "Q4*Q5*Q6" .and. n1DiasMat == 0
								nValPropM	:= Round( ( nValAuxMed / nDiasC * aDetAfas[nT,5] ), MsDecimais(1) )
							Else 
								nValPropM	:= Round( ( nValAuxMed / nDiasC * n1DiasMat ), MsDecimais(1) )
							EndIf
						Else
							nValPropM	:= nMedAuxMat
						EndIf
						//Memória de Cálculo
						If __lMemCalc
							fAddMemLog("Dias salario maternidade (n1DiasMat) :  " + cValtochar(n1DiasMat),1,2)
							fAddMemLog("Proporcional media (( nValAuxMed / nDiasC * n1DiasMat )) : " + cValtochar(nValPropM),1,2)
						EndIf
						//-- Verifica o Limite de Deducao do salario maternidade
						If nLimMatAux > 0 .And. !Empty(aCodFol[668,1]) .And. !Empty(aCodFol[669,1])
							//-- Se ja superou o limite na verba 040 Licenca Maternidade
							//-- Lanco a media diretamente no execente
							If nValExcMat > 0
								nValExcMed	:= nValPropM
								nValAuxMed	:= 0
							Else
								//-- Avalia o limite utilizando o valor da verba 040 Licenca Maternidade
								nValExcMed	:= If( (nValAuxMat + nValPropM + nTotAdic) > nLimMatAux , (nValAuxMat + nValPropM + nTotAdic) - nLimMatAux , 0 )
								nValAuxMed	:= nValPropM - nValExcMed
							EndIf
						EndIf
						//-- Gera a verba de media de licenca maternidade
						If nValAuxMed > 0 .And. nPos407 == 0
							If n1DiasMat > 0
								FMatriz(aCodfol[407,1], nValAuxMed,n1DiasMat,,,,,,,,,Soma1(cSeq),,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
								//Memória de cálculo
								If __lMemCalc
									fAddMemLog("Valor Excedente (nValExcMed) : " + cValtochar(nValExcMed),1,2)
									fAddMemLog("Verba " +aCodfol[407,1] + " - PAGTO MEDIAS AUXILIO MATERNIDADE (nValPropM - nValExcMed) : " + cValtochar(nValAuxMed),1,2)
								EndIf
							ElseIf aDetAfas[nT,7] $ "Q4*Q5*Q6"
								FMatriz(aCodfol[407,1], nValAuxMed,aDetAfas[nT,5],,,,,,,,,Soma1(cSeq),,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
							EndIf 
						EndIf
						//-- Gera a verba de media de prorrogacao da licenca maternidade
						If nMedAuxMat > 0 .And. n1DPrgSalMa > 0 .And. aScan( aPd, { |x| x[1] == aCodFol[928,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) == 0
							FMatriz(aCodfol[928,1], Round((nMedAuxMat / nDiasC * n1DPrgSalMa),MsDecimais(1)),n1DPrgSalMa,,,,,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
						EndIf
						//-- Gera a verba de excedente de licenca maternidade
						If nValExcMed > 0 .And. aScan( aPd, { |x| x[1] == aCodFol[669,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) == 0
							FMatriz(aCodfol[669,1],Round(nValExcMed, MsDecimais(1)),nDiasMat,,,"D",,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
						EndIf
					EndIf
				EndIf

				//-- Gera verba de deducao de sal maternidade para 13o salario quando o
				//-- parametro MV_SALMGRP estiver configurado com "S"
				If lSALMGRP .And. !Empty(aCodFol[670,1]) .And. aScan( aPd, { |x| x[1] == aCodFol[670,1] .And. x[7] $ "I/G" .And. x[9] != "D" } ) == 0
					FMatriz(aCodfol[670,1],Round((nValAuxMat + nValPropM + nTotAdic) / 12,MsDecimais(1)))
				Endif
			EndIf

			//-- Calcula Comissao Para Geracao da Verba Demonstrativa do Auxilio Maternidade
			If nDiasSalM > 0 .And. aCodFol[238,1] # Space(3)
				If nMedAux > 0
					fCMComiss(aCodFol,@nMedComiss,nMedAux)
					fVarRot("nMedComiss",(nMedComiss / nDiasC * nDiasSalM),"A")
				EndIf
			EndIf
		Else
			If RetValSRV(aDetAfas[nT,1],SRA->RA_FILIAL,"RV_REFFER") != "S"
				If P_HRSPONFO .and. SRA->RA_CATFUNC == "H"
					nHrsAfas:= 0
					nDiasAf	:= 0
					fHrsPon(aDetAfas[nT,7],@nHrsAfas, @nDiasAf,aDetAfas[nT,8],aDetAfas[nT,10],aDetAfas[nT,2] )
					nHrsAfas:= fConvHr(nHrsAfas,"D")
					If nHrsAfas > 0
						nValAfas := nHrsAfas * SalHora
					Else
						nValAfas := aDetAfas[nT,2] * nSalDia
					EndIf
				Else
					nValAfas := aDetAfas[nT,2] * nSalDia
				EndIf

				nMedAux := aDetAfas[nT,9]

				If nMedAux > 0 .or. (SRA->RA_CATFUNC $ "I*J" .And. !Empty(cVbMedAux))
					If !(SRA->RA_CATFUNC $ "I*J")
						fCMComiss(aCodFol,@nMedComiss,nMedAux,,,cPdMedAfa)
					Else
						fCMComiss(aCodFol,@nMedComiss,nMedAux,,lValMater)
					EndIf
					If !(SRA->RA_CATFUNC $ "I*J" .And. nMedComiss > 0)
						nValAfas += (nMedComiss / nDiasC * aDetAfas[nT,2])
					Else
						nValAfas := (nMedComiss / nDiasC * aDetAfas[nT,2])
					EndIf
					If (RetValSRV(aDetAfas[nT,1],SRA->RA_FILIAL,"RV_FGTS") != "S" .Or. nValAfas == 0 ) .And. !(SRA->RA_CATFUNC $ "C*I*J*T") //Se não for comissionado e gerou média, cria variável global para somar na base do fgts
						If aDetAfas[nT,2] == 0
							nMedComAux += ( nMedComiss / nDiasC * aDetAfas[nT,4])
						Else
							nMedComAux += ( nMedComiss / nDiasC * aDetAfas[nT,2])
						EndIf
					EndIf
				EndIf
				
				// Suspensão de contrato MP-936
				If (Len(aDetAfas[nT]) >= 11 .And. aDetAfas[nT, 11] == "37") .Or. (Posicione("SR8", 5, SRA->RA_FILIAL + aDetAfas[nT, 3], "R8_TPEFD" ) == "37")
					If SRA->RA_CATFUNC == "C" .And. nMedComiss == 0
						fCMComiss(aCodFol,@nMedComiss,3)
						nValAfas += (nMedComiss / nDiasC * aDetAfas[nT,2])
					EndIf
					FIncide(aDetAfas[nT, 1])
					nPosPdv := Ascan(aPdv, { |x| x[1] = aDetAfas[nT, 1] } )
					nAfasAux := If( nPosPdv > 0 .And. aPdv[nPosPdv, 2] > 0, nValAfas * (aPdv[nPosPdv, 2] / 100 ), nValAfas ) 
					
					If SRA->RA_AFASFGT $ "U1*U3" .Or. SRA->RA_EAPOSEN == "1" // Funcionário Aposentado
						BEmAposent(,,,, nValAfas - nAfasAux) // Gera Ajuda Compensatória- ID 1852
					EndIf
						
					nValAfas := nAfasAux
				EndIf
				
				If SRA->RA_CATFUNC == "C" .And. nValAfas == 0
					nValAfas := (RCE->RCE_GCOMIS / nDiasC * aDetAfas[nT,2])
				EndIf

				lArred := .F.
				
				//Se não for lançamento diário ou existe mais que um afastamento com pagamento na mesma verba, arredonda apenas no final
				If RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_LCTODIA") == "S" .or. ((aScan(aDetAfas, {|x| x[1] == aDetAfas[nT,1]})) == nT .and. (aScan(aDetAfas, {|x| x[1] == aDetAfas[nT,1]}, nT+1)) == 0 )
					nValAfas  := Round(nValAfas, MsDecimais(1))
				Else
					lArred 	  := .T.
					aAdd(aDetAux, {aDetAfas[nT,1], nValAfas})
				EndIf

				nPosPd := Ascan(aPd, { |X| X[1] == aDetAfas[nT,1] .and. X[7] == "C" .and. X[9] # "D"})
				
				If nPosPd == 0
					cSeq := " "
					FMatriz(aDetAfas[nT,1],nValAfas,aDetAfas[nT,2],,,,,,,,,,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
					If P_HRSPONFO .and. SRA->RA_CATFUNC == "H" .and. !Empty( cCodCorr := RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_CODCORR"))
						If ( nPosPd := Ascan(aPd, { |X| X[1] == cCodCorr .and. X[7] == "C" .and. X[9] # "D"}) ) > 0
							aPd[nPosPd,4] := nHrsAfas
						EndIf
					EndIf
				ElseIf nPosPd > 0 .And. RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_LCTODIA") != "S"

					If lArred
						nDetAux := aScan(aDetAfas, {|x| x[1] == aDetAfas[nT,1]}, nT+1)
					EndIf
				
					aPd[nPosPd, 4] += aDetAfas[nT,2]

					If lArred .and. nDetAux == 0
						nValAfas := 0
						aEval(aDetAux,{|x| If(x[1] == aPd[nPosPd,1], nValAfas += x[2], Nil)})
						aPd[nPosPd, 5] := Round(nValAfas, MsDecimais(1))
					Else 
						aPd[nPosPd, 5] += nValAfas
					EndIf

					If P_HRSPONFO .and. SRA->RA_CATFUNC == "H" .and. !Empty( cCodCorr := RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_CODCORR"))
						If ( nPosPd := Ascan(aPd, { |X| X[1] == cCodCorr .and. X[7] == "C" .and. X[9] # "D" }) ) > 0
							aPd[nPosPd,4] += nHrsAfas

							If lArred .and. nDetAux == 0
								aPd[nPosPd, 5] := Round(nValAfas, MsDecimais(1))
							Else
								aPd[nPosPd,5] += nValAfas
							EndIf

						EndIf
					EndIf
				Else
					If Empty(cSeq)
						cSeq := "0"
					EndIf
					cSeq := Soma1(cSeq)
					FMatriz(aDetAfas[nT,1],nValAfas,aDetAfas[nT,2],,,,,,,,,cSeq,,,,aDetAfas[nT,3],,,aDetAfas[nT,8])
					If P_HRSPONFO .and. SRA->RA_CATFUNC == "H" .and. !Empty( cCodCorr := RetValSRV(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_CODCORR"))
						If ( nPosPd := Ascan(aPd, { |X| X[1] == cCodCorr .and. X[7] == "C" .and. X[9] # "D" .and. X[11] == cSeq}) ) > 0
							aPd[nPosPd,4] := nHrsAfas
						EndIf
					EndIf
				EndIf				 
			EndIf
		EndIf
		nSalDia  := nOldSalDia
		nSalHora := nOldSalHora
	Next nT

	If nMedComAux > 0
		fVarRot("nMedComiss", nMedComAux ,"A")
	EndIf

	If cRot $ fGetRotOrdinar() .Or. cTipoRot == "4" //FOL/FPB/RES
		/*O INSS paga apenas os tipos O|P e o calculo e feito apenas p/ Horistas/Mensalistas*/
		If !(SRA->RA_CATFUNC $ "A*P") .And. !( Type("aDiaAfaEs") == "U" ) .And. Len(aDiaAfaEs) > 0
			/*Gerar os dias de afastamento pagos pelo INSS em verba de base.*/
			GenAfaInss(aDiaAfaEs)
		EndIf
	EndIf

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCalcDsr  ³ Autor ³ Equipe Rh             ³ Data ³10/01/96  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calcula o Salario e Dsr a ser pago no mes                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fCalcDsr(nDsr,lAdmissao,nHorasTrab,nHorasDsr)              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FCalcDSR(nDsr,lAdmissao,nHorasTrab,nHorasDsr)
	Local aArea		:= GetArea()
	Local cCatFunc	:= SRA->RA_CATFUNC
	Local cCatSefip	:= SRA->RA_CATEG
	Local cTipoPgt	:= SRA->RA_TIPOPGT
	Local cDatAux	:= StrZero( Year( dDataAte ), 4, 0 ) + StrZero( Month( dDataAte ),2)
	Local lDiasPer	:= GetMvRH("MV_DIASPER",,"1") == "1"
	Local nDiasCalc := nDiasC
	Local nHrsDSR 	:= 0

	Local nDSRDTrab := 0
	Local nDSRDNTrab:= 0
	Local nDSRProp	:= 0
	Local nAuxMat	:= 0

	Local nCont		:= 0
	Local nHrsDAux	:= 0
	Local nInfNorm	:= 0
	Local nInfDesc	:= 0
	Local lSALHDSR	:= .F.
	Local nAntDSR	:= 0
	Local nHrsMes	:= SRA->RA_HRSMES
	Local nHrsDia	:= SRA->RA_HRSDIA
	Local nNorAux	:= Normal
	Local nDesAux	:= Descanso

	Local aProxConv := {}
	Local lProxSem 	:= .F.

	DEFAULT lAdmissao	:= .F.

	//--Situacao do Funcionario na data de referencia
	lDissidio 	:= If( Type("lDissidio") == "U", .F., lDissidio)
	lMAprendiz	:= If( Type("lMAprendiz") == "U", .F., lMAprendiz)
	P_nDSRHori  := If( Type("P_nDSRHori") == "U", 0, P_nDSRHori)
	cSitFolh	:= If( Type("cSitFolh") == "U", SRA->RA_SITFOLH, cSitFolh)
	lDSRPon     := If( Type("P_LDSRHRSP") == "U", .F., P_LDSRHRSP )
	nAuxMat		:= If( Type("nDiasMat") == "U", 0, nDiasMat)

	//Deve considerar o salario e dsr horista informado na RGB para a base de calculo das demais verbas?
	If cPaisLoc == "BRA"
		lSALHDSR := If( Type("P_SALHDSR") == "U", .F., P_SALHDSR)
	EndIf

	If lDissidio
		dbSelectArea( 'SR3' )
		If !Empty(SR3->(INDEXKEY(2)))
			dbSetorder(2)
		EndIf

		If dbSeek( SRA->RA_FILIAL + SRA->RA_MAT )

			While SR3->(!EOF()) .AND. SR3->R3_FILIAL + SR3->R3_MAT == SRA->RA_FILIAL + SRA->RA_MAT

				If SR3->R3_PD == '000' .and. mesAno(SR3->R3_DATA) <= cDatAux
					cCatFunc := fDesc( "SR7", SR3->R3_MAT+DTOS(SR3->R3_DATA)+SR3->R3_SEQ+SR3->R3_TIPO, "R7_CATFUNC", , SRA->RA_FILIAL, 2 )
					cTipoPgt := fDesc( "SR7", SR3->R3_MAT+DTOS(SR3->R3_DATA)+SR3->R3_SEQ+SR3->R3_TIPO, "R7_TIPOPGT", , SRA->RA_FILIAL, 2 )
				EndIf
				SR3->(DbSkip())
			EndDo
		EndIf
		
		SR9->(DbSetOrder(1))
		
		If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "RA_HRSMES "))
			While SR9->( !Eof() ) .and. SRA->RA_FILIAL + SRA->RA_MAT == SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_HRSMES" $ SR9->R9_CAMPO)
				If SR9->R9_DATA <= dDataAte						
					nHrsMes := Val( SR9->R9_DESC )
				Else
					Exit
				EndIf	
		
				SR9->( dbSkip() )
			EndDo
			
			If nHrsMes > 0
				nHrsDia := Round(( nHrsMes / 30 ),4)
			EndIf
		EndIf		
	EndIf

	// Busca as informações do calendário da folha ou do ponto dependendo do P_
	If cCatFunc == "H"
		If lDSRPon .ANd. SRA->RA_TPCONTR <> "3"
			nHrsTrab := Normal
			nHrsDesc := Descanso
		Else
			If SRA->RA_TPCONTR == "3"
				dDtIniPer := aConvocacao[2]
				dDtFimPer := aConvocacao[3]
			Else
				dDtIniPer := If( AnoMes(SRA->RA_ADMISSA) == CPERIODO .And. lAdmissao, SRA->RA_ADMISSA, DDATADE )
				dDtFimPer := If( !Empty(dDataDem), dDataDem, DDATAATE )
			EndIf
			FTrabCalen(	CPERIODO		,;	//01-- Periodo
						@nDSRDTrab		,;	//02-- Dias Trabalhados
						@nDSRDNTrab		,;	//03-- Dias Nao Trabalhados
						@nDSRProp		,;	//04-- Dias de DSR
						0				,;	//05-- Dias Nao Uteis de Vale Transporte
						0				,;	//06-- Dias uteis de Vale Transporte
						0 				,;	//07-- Dias de Diferenca de Vale Transporte
						@nHrsDSR		,;	//08-- Qtde de Horas de DSR
						@nHrsTrab		,;	//09-- Qtde de HoraS Trabalhadas
						0				,;	//10-- Dias de Vale Refeicao
						0				,;	//11-- Dias totais de V.T. Dias Uteis
						0				,;	//12-- Dias totais de V.T. Dias Nao uteis
						cSemana			,;	//13-- Numero de Pagamento
						.T. 			,;	//14-- Proporcional a Afastamento
						lAdmissao		,;	//15-- Proporcional a Admissao
						dDtFimPer		,;	//16-- Data Fim do Periodo
						CROT			,;	//17-- Roteiro
						dDtIniPer		,;	//18-- Data inicial para pesquisa (opcional)
						0				,;	//19-- Verbas de tipos de afastamentos (opcional)
						0				,;	//20-- Dias de Vale Alimentacao
						0				,;	//21-- Dias uteis
						.T. 			,;	//22-- Considera as férias do array aafas
						{}				,;	//23-- Calendario do Ponto
						.T.				)	//24-- Se a função foi chamada pela FCalcDSR
			If SRA->RA_TPCONTR != "3"
				nHrsDesc := Round( nHrsDia * nDSRProp, 2 )		//Dias DSR
				nHrsTrab := Round( nHrsDia * (nDSRDTrab), 2 )	//Dias Trabalhados
			//Contrato intermitente
			Else
				nAntDSR := nDSRProp

				//Verifica se tem convocação na mesma semana para não pagar DSR duplicado
				lProxSem := .F. 
				If dow(dDataAte) <> 7
					aProxConv 	:= BuscaConv(dDataAte+1, dDataAte+(7 - dow(dDataAte))) 
					lProxSem 	:= !Empty(aProxConv[1][9])
				EndIf

				//Quando possuir contrato intermitente, se não possuir faltas no período de convocação, deverá receber DSR mesmo que tenha trabalhado apenas um dia na semana
				If 	(nDSRDTrab > 0  .Or. (nDSRDNTrab >0 .And. nDSRDTrab == 0)) .And. Len(aAfast) == 0 .And. ( nDSRProp == 0 .Or. ( dow(dDtFimPer) > 1 ) .And. ( Day(dDtFimPer) < f_ultdia(dDtFimPer) .Or. ( aConvocacao[8] <= (dDtFimPer + (7 - dow(dDtFimPer)) ) .And. !lProxSem ) ) )
					nDSRProp := fDsrConv(nDSRProp,dDtIniPer,dDtFimPer)
				EndIf				
				If P_nDSRHori <> 3
					Descanso := nHrsDesc := Round( aConvocacao[7] * nDSRProp, 2 )		//Dias DSR
					nHrsTrab := Round( aConvocacao[7] * (nDSRDTrab), 2 )	//Dias Trabalhados
				Else
					Descanso := nHrsDesc := Round( nHrsDSR * nDSRProp, 2 )		//Dias DSR
					nHrsTrab := Normal
				EndIf
			EndIf
		EndIf
		If P_nDSRHori <> 0 .And. SRA->RA_TPCONTR != "3"
			Normal := nHrsTrab
			Descanso := nHrsDesc
		Else //Retorna valor original antes de fTrabCalend
			nDiasMat := nAuxMat
		EndIf
	Endif

	//Para funcionários horistas e sem jornada varíavel, verifica se houve lançamento das verbas de salário horista e DSR horista
	If cCatFunc == "H" .And. !lHoJorVa .And. cTipoRot == "1" .And. lSALHDSR
		//Percorre o aPd em busca das verbas de salário horista (Id 0032) e DSR horista (Id 0033)
		For nCont := 1 To Len(aPd)
			If aPd[nCont,1] == aCodFol[032,1] .And. aPd[nCont,9] != "D" .And. AllTrim( aPd[nCont,3] ) == AllTrim( cSemana ) .And. aPd[nCont,7] == "I"
				nInfNorm	+= aPd[nCont,4]
			EndIf
			If aPd[nCont,1] == aCodFol[033,1] .And. aPd[nCont,9] != "D" .And. AllTrim( aPd[nCont,3] ) == AllTrim( cSemana ) .And. aPd[nCont,7] == "I"
				nInfDesc	+= aPd[nCont,4]
			EndIf
		Next nCont

		//Caso tenha informado a verba de salário horista, utiliza as horas informadas
		If nInfNorm > 0
			Normal := nInfNorm
			//Caso possua afastamento, divide as horas pelas dias trabalhados e multiplica pelos dias de cálculo para considerar as horas previstas no mês
			If nDiasAfas > 0
				Normal := (Normal / DiasTrab * nDiasC)
			EndIf

			nHrsDAux := (Normal / aPeriodo[nPosSem,24] * aPeriodo[nPosSem,20] / nDiasC)
			//Caso tenha informado a verba de DSR horista, utiliza as horas informadas
			If nInfDesc > 0
				Descanso := nInfDesc
			Else
				Descanso := nHrsDAux * aPeriodo[nPosSem,7]
			EndIf

			//Verifica a quantidade de horas trabalhadas por dia, de acordo com as horas informadas
			nHrsDAux := (Normal + Descanso) / nDiasC

			//Retira a incorporação das variáveis de salário, pois foram consideradas as horas cadastrais
			Salario -= (SRA->RA_SALARIO * nHrsCal)
			SalMes 	-= (SRA->RA_SALARIO * nHrsCal)
			SalDor 	-= (SRA->RA_SALARIO * nHrsDia)
			SalDia 	-= (SRA->RA_SALARIO * nHrsDia)

			//Efetua a incorporação das variáveis de salário, com base nas horas trabalhadas
			nHrsCal := nHrsDAux * nDiasC
			Salario	+= (SRA->RA_SALARIO * nHrsCal)
			SalMes 	+= (SRA->RA_SALARIO * nHrsCal)
			SalDor 	+= (SRA->RA_SALARIO * nHrsDAux)
			SalDia 	+= (SRA->RA_SALARIO * nHrsDAux)
		EndIf
	EndIf

	IF cSitFolh = " " .And. !lAdmissao
		IF cTipoPgt = "M"
			If cCatFunc $ "M*C*A*P*E"
				If DiasTrab == nDiasCalc
					nSalPg  := Salario
				Else
					nSalInt := Salario
					nSalPg 	:= SalDor * DiasTrab
				EndIf
			ElseIf cCatFunc $ "H*G"
				If cCatSefip == "07" .And. lMAprendiz .And. cCatFunc == "H" .And. F_ULTDIA(dDataDe) != 30
					nSalPg     := Round(SRA->RA_SALARIO * nNumSemana * (( NHRSCAL )/5) ,MsDecimais(1))
					nDsr       := Round(NSalPg / 6,MsDecimais(1))
					nHorasTrab := Normal
					nHorasDsr  := Descanso
				Else
					If DiasTrab > 0 .And. (lDiasPer .or. cCatFunc == "H" .or. lDSRPon)
						//Tratamento para que não gere um minuto a mais em meses com 31 dias e 5 dias de DSR devido ao arredondamento das horas normais e descanso
						If nDiasC == 31 .and. !lDissidio .and. Round(Normal,2) + Round(Descanso,2) > Normal + Descanso
							Normal 	 := NoRound(Round(Normal,3),2)
							Descanso := Round(Descanso,2)
						EndIf
						nSalPg     := Round(SalHor * Round(Normal,2),MsDecimais(1))
						nDsr       := Round(SalHor * Round(Descanso,2),MsDecimais(1))
						nHorasTrab := Normal
						nHorasDsr  := Descanso
					Else
						nSalPg     := Round(( Salario / P_QTDIAMES ) * DiasTrab ,MsDecimais(1))
						nDsr       := 0.00
						nHorasTrab := ( nHrsMes / P_QTDIAMES ) * DiasTrab
						nHorasDsr  := 0
					EndIf
				EndIF
				nDsrInt    := nDsr 
			ElseIf cCatFunc $ "D"
				nSalPg     := SalDor * Diastrab
			EndIf
		ElseIf cTipoPgt = "S"
			If Type("P_NTOTDIAS")=="U"
				P_NTOTDIAS := 7						//-- Total de Dias da Semana
			EndIf
			nSalPg         := Round(SalDor * DiasTrab,MsDecimais(1))
			If DiasDsr > 0
				/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Para Semanalista admitido no meio da semana do calculo, o DSR³
				³ nao correspondia aos dias do aSemana.                        ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				nDsr       := If( DiasTrab + DiasDsr==7,(SalDor*7)-nSalPg,SalDor*((DiasTrab + DiasDsr)-DiasTrab) )
				nHorasDsr  := (DiasTrab + DiasDsr) - DiasTrab
			EndIf
			If SRA->RA_TPCONTR == "3"
				nSalPg 		:= Round(SalHor * Round(Normal, 2), MsDecimais(1))
				nDsr 		:= Round(SalHor * Round(Descanso,2), MsDecimais(1))
				nHorasTrab 	:= Normal
				nHorasDsr  	:= Descanso
				nDsrInt    	:= nDsr 
			EndIf
		EndIf
	ElseIf cSitFolh # "D" .And. cCatFunc $ "M*C*D*S*A*P*E"

		nSalPg     := Round(SalDor * Diastrab,MsDecimais(1))
		nSalInt    := Salario

	ElseIf cSitFolh # "D"
		If lAdmissao .and. cCatSefip == "07" .And. lMAprendiz .And. cCatFunc == "H"
			nHorasTrab := ( ( nNorAux + nDesAux ) / nDiasP * DiasTrab ) / 7 * 6
			nHorasDsr  := ( ( nNorAux + nDesAux ) / nDiasP * DiasTrab ) / 7
		ELseIf P_nDSRHori <> 0 .Or. lDSRPon
			nHorasTrab := nHrsTrab
			nHorasDsr  := nHrsDesc
		Else
			If SRA->RA_TPCONTR == '3' .And. cCatFunc == "H"
				nHorasTrab := Round((Normal / (aConvocacao[5]-nAntDSR)) * (nDSRDTRab + nDSRDNTrab),2)
			   	nHorasDsr  := Round((Descanso / nDSRDNTrab) * nDSRProp,2)
			ElseIf cCatFunc == "H" .and. DiasTrab <> nDiasCalc .and. ( nDSRDTRab + nDSRDNTrab + nDSRProp > 0 ) .and. nDiasCalc == aPeriodo[nPosSem,18]//Quando existe afastamento, proporcionaliza dias trablhados e DSR
				nHorasTrab := Round((Normal / aPeriodo[nPosSem,24] ) * ( nDSRDTRab + nDSRDNTrab ),2)
				nHorasDsr  := Round((Descanso / aPeriodo[nPosSem,7] ) * nDSRProp,2)
			Else
				nHorasTrab := Round((Normal / nDiasCalc) * DiasTrab,2)
				nHorasDsr  := Round((Descanso / nDiasCalc) * DiasTrab,2)
			EndIf
		Endif
		If cCatSefip == "07" .And. lMAprendiz .And. cCatFunc == "H" .and. !lAdmissao
			nSalPg     := Round(SRA->RA_SALARIO * nHorastrab,MsDecimais(1))
		Else
			nSalPg     := Round(SalHor * nHorastrab,MsDecimais(1))
		EndIf
		If SRA->RA_TPCONTR == '3' .And. cCatFunc == "H"
			If NDIASAFAS > 15
				nDsrInt := Round(SalHor * nHorasDsr,MsDecimais(1))
			Else
				nDsrInt := Round(SalHor * Round(Descanso,2),MsDecimais(1))
			EndIf
			
			If nDSRProp <> nAntDSR
				nDsr := nDsrInt
				nHorasDsr := nHrsDesc
			Else
				nDsr       := Round(SalHor * nHorasDsr,MsDecimais(1))
			EndIf
		Else
			If cCatSefip == "07" .And. lMAprendiz .And. cCatFunc == "H" .and. !lAdmissao
				nDsr := Round(SRA->RA_SALARIO * nHorasDsr,MsDecimais(1))
			Else 
				nDsr := Round(SalHor * nHorasDsr,MsDecimais(1))
			EndIf
		EndIf
		nSalInt    := Round(SalHor * Normal,MsDecimais(1))
	EndIf
	If cSitFolh = "A" .And. cTipoPgt == "S"
		nDsr       := Round(SalDor * DiasDsr,MsDecimais(1))
		nHorasDsr  := DiasDsr
	EndIf

	RestArea(aArea)

Return Nil
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fGravaSal ³ Autor ³ Equipe Rh             ³ Data ³10/01/96  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Geracao da Verba de salario e Dsr                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fGravaSal(aCodFol,DiastRab,nHorasTrab,nDsr,nHorasDsr       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FGravaSal(aCodFol,DiasTRab,nHorasTrab,nDsr,nHorasDsr)
	Local aArea		:= GetArea()
	Local cDatAux	:= StrZero( Year( dDataAte ), 4, 0 ) + StrZero( Month( dDataAte ),2)
	Local cCatFunc	:= SRA->RA_CATFUNC
	Local cTipoPgt	:= SRA->RA_TIPOPGT
	
	//--Situacao do Funcionario na data de referencia
	lDissidio 	:= If( type("lDissidio")=="U",.F.,lDissidio)
	cSitFolh	:= If( Type("cSitFolh")=="U",SRA->RA_SITFOLH,cSitFolh)

	If lDissidio
		dbSelectArea( 'SR3' )
		If !Empty(SR3->(INDEXKEY(2)))
			dbSetorder(2)
		EndIf

		If dbSeek( SRA->RA_FILIAL + SRA->RA_MAT )

			While SR3->(!EOF()) .AND. SR3->R3_FILIAL + SR3->R3_MAT == SRA->RA_FILIAL + SRA->RA_MAT

				If SR3->R3_PD == '000' .and. mesAno(SR3->R3_DATA) <= cDatAux
					cCatFunc := fDesc( "SR7", SR3->R3_MAT+DTOS(SR3->R3_DATA)+SR3->R3_SEQ+SR3->R3_TIPO, "R7_CATFUNC", , SRA->RA_FILIAL, 2 )
					cTipoPgt := fDesc( "SR7", SR3->R3_MAT+DTOS(SR3->R3_DATA)+SR3->R3_SEQ+SR3->R3_TIPO, "R7_TIPOPGT", , SRA->RA_FILIAL, 2 )
				EndIf
				SR3->(DbSkip())
			EndDo
		EndIf
	EndIf

	If Salario > 0 .And. cSitFolh # "D"
		If cCalcInf == "N"        //GETMV("MV_CALCINF")
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Salario Mensalista                                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If cCatFunc $ "M*C*D" .And. cTipoPgt = "M" .And. Ascan(aPd, { |X| X[1] = aCodfol[31,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0
				FMatriz(aCodfol[31,1],nSalPg ,Diastrab,,,,,,,,,,,,,,,,,,nSalInt)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Pro-Labore                                                   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ElseIf cCatFunc $ "P" .And. cTipoPgt = "M" .And. aCodFol[217,1] # Space(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[217,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0
				FMatriz(aCodfol[217,1],nSalPg ,Diastrab,,,,,,,,,,,,,,,,,,nSalInt)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Autonomo                                                     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ElseIf cCatFunc $ "A" .And. aCodFol[218,1] # Space(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[218,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0;
			.And. (Len(aCodFol) < 1413 .Or. aCodFol[1413,1] == Space(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[1413,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0)
				FMatriz(aCodfol[218,1],nSalPg ,Diastrab,,,,,,,,,,,,,,,,,,nSalInt)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Autonomo MEI Tomador Integração com Compras                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			Elseif cCatFunc $ "A" .And. cTipoPgt = "M" .And. Len(aCodFol)> 1412 .And. aCodFol[1413,1] # Space(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[1413,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0;
			.And. aCodFol[218,1] # Space(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[218,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0
				FMatriz(aCodfol[1413,1],nSalPg ,Diastrab)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Estagiario Mensalista                                                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ElseIf cCatFunc $ "E" .And. cTipoPgt = "M" .And. aCodFol[219,1] # Space(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[219,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0
				FMatriz(aCodfol[219,1],nSalPg ,Diastrab,,,,,,,,,,,,,,,,,,nSalInt)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Salario Horista + DSR                                        ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ElseIf cCatFunc $ "H" .And. cTipoPgt = "M" .And. aCodfol[32,1] # SPACE(3) .AND. aCodfol[33,1] = SPACE(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[32,1] .And. X[9] # "D"}) = 0
				FMatriz(aCodfol[32,1],nSalPg+nDsr,nHorastrab+nHorasDsr,,,,,,,,,,,,,,,,,,nSalInt)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Estagiario Horista                                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ElseIf cCatFunc $ "G" .And. cTipoPgt = "M" .And. aCodfol[220,1] # SPACE(3) .And. Ascan(aPd, { |X| X[1] = aCodfol[220,1] .And. X[9] # "D"}) = 0
				FMatriz(aCodfol[220,1],nSalPg+nDsr,nHorastrab+nHorasDsr,,,,,,,,,,,,,,,,,,nSalInt)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Salario Horista                                              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ElseIf cCatFunc $ "H" .And. cTipoPgt = "M" .And. aCodfol[32,1] # SPACE(3) .AND. aCodfol[33,1] # SPACE(3)
				If Ascan(aPd, { |X| X[1] = aCodfol[32,1] .And. X[9] # "D"}) = 0
					FMatriz(aCodfol[32,1],nSalPg,nHorasTrab,,,,,,,,,,,,,,,,,,nSalInt)
				EndIf
				If Ascan(aPd, { |X| X[1] = aCodfol[33,1] .And. X[9] # "D"}) = 0
					FMatriz(aCodfol[33,1],nDsr,nHorasDsr,,,,,,,,,,,,,,,,,,nSalInt)
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Salario Para Semanalistas                                    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			ElSeIf cTipoPgt = "S" .And. cCatFunc <> "A" .And. Ascan(aPd, { |X| X[1] = aCodfol[32,1] .And. X[3] = cSemana .And. X[9] # "D"}) = 0
				FMatriz(aCodfol[32,1],nSalPg,If(cCatFunc == "H", Normal, Diastrab))
				If Ascan(aPd, { |X| X[1] = aCodfol[33,1] .And. cSemana = X[3] .And. X[9] # "D"}) = 0
					FMatriz(aCodfol[33,1],nDsr,If(cCatFunc == "H", Descanso, nHorasDsr),,,,,,,,,,,,,,,,,,nSalInt)
				EndIf
			EndIf
		EndIf
	EndIf

	RestArea(aArea)

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ FMedPerIns ³ autor ³ Mauro               ³ Data ³ 14/08/96 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Calcula Peric. e Insal. Sobre Medias com Incidencia        ´±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Parametro ³  nMedPer = Variavel de retorno Valor Calc. Peric.          ´±±
±±³          ³  nMedIns = Variavel de Retorno Valor Calc. Insal.          ´±±
±±³          ³  cTipMed = 1=Ferias Venc. 2=FeriaS Prop. 3= 13o. 4=Av.Prev.´±±
±±³          ³  SalHora = Salario Hora Para Calculo                       ´±±
±±³          ³  nValMin = Valor do Salario Minimo                         ´±±
±±³          ³  aCodfol = Array dos Codisgo da Folha                      ´±±
±±³          ³  cTipTot = Qual total deseja somar "99MD" OU '9999'        ´±±
±±³          ³  nValPer = Valor a Somar na Base (Ex. Verbas Mes Resc.)    ´±±
±±³          ³  nValIns = Valor a Somar na Base (Ex. Verbas Mes Resc.)    ´±±
±±³          ³  lAdiMed = Calcular media sobre adicionais na provisao     ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FMedPerIns(nMedPer,nMedIns,cTipMed,SalHora,nValMin,aCodFol,cTipTot,nValPer,nValIns,lAdiMed)
Local nMinHora  	:= 0.00
Local nBMedPer  	:= nBMedIns := 0.00
Local nHMedIns		:= 0                       // total das horas (media) qdo utilizado parametro MV_INSALVH como 'H'
Local cGetInSal 	:= GetMvRH("MV_INSALVH")
Local cGetPeric 	:= GetMvRH("MV_PERICVH")
Local nFatorInsal	:= 0
Local lCalInV		:= (SRA->RA_ADCINS $ "2*3*4" .and. Posicione("RCE",1,xFilial("RCE")+SRA->RA_SINDICA,"RCE_BCALIN") == "3")
Local lCalPerV		:= 	SRA->RA_ADCPERI == "2" .and. Posicione("RCE",1,xFilial("RCE")+SRA->RA_SINDICA,"RCE_BCALPE") == "2"
Local cTipHV        := ""
Local nPerc_adiI	:= 0
Local nPerc_adiP	:= 0
Local cPdAnt		:= ""
Local nHMedInsV		:= 0
Local nBMedPerV		:= 0	
Local nBMedInsV		:= 0
Local aMed			:= {}
Local nI			:= 1

DEFAULT lAdiMed		:= .T.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Tratamento para o fator multiplicador do sal.minimo na insalubridade (radiologista).				|
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If GETNEWPAR("MV_USASMIN",.T.)
		nFatorInsal	:= 1
		IF 	SRA->( FieldPos( 'RA_FTINSAL' ) > 0 )  .AND.  !Empty(SRA->RA_FTINSAL)
			nFatorInsal	:= SRA->RA_FTINSAL
		EndIf
		nMinHora  	:= (Round( ( nValMin *nFatorInsal)  , 2)/SRA->RA_HRSMES)
	Else
		nMinHora	:= SalHora
	EndIf

	// Verifica se Foram Passados os Parametros da Funcao
	cTipTot := If (cTipTot= Nil,'99MD',cTipTot)
	nValPer := If (nValPer= Nil,0.00  ,nValPer)
	nValIns := If (nValIns= Nil,0.00  ,nValIns)

	If lCalInV .or. lCalPerV
		If (cTBLXMED)->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+cTipMed))
			
			If lCalInV
				If SRA->RA_ADCINS == "2"				
					nPerc_adiI := Posicione("RCE",1,xFilial("RCE")+SRA->RA_SINDICA,"RCE_PINSMI")
				ElseIf SRA->RA_ADCINS == "3"
					nPerc_adiI := Posicione("RCE",1,xFilial("RCE")+SRA->RA_SINDICA,"RCE_PINSME")
				Else
					nPerc_adiI := Posicione("RCE",1,xFilial("RCE")+SRA->RA_SINDICA,"RCE_PINSMA")
				EndIf
			EndIf
			
			If lCalPerV
				nPerc_adiP := RetValSRV(aCodfol[36,1],SRA->RA_FILIAL,"RV_PERC")
			EndIf
			
			While (cTBLXMED)->(!Eof() .And. SRA->RA_FILIAL+SRA->RA_MAT+cTipMed = (cTBLXMED)->RP_FILIAL+(cTBLXMED)->RP_MAT+(cTBLXMED)->RP_TIPO)
				If (cTBLXMED)->RP_PD > "900"
					(cTBLXMED)->(dbSkip())
					Loop
				EndIf
				If Empty(cTipHV)
					cTipHV := (cTBLXMED)->RP_TIPO1
				EndIf
				
				// Verifica se e o registro de total de medias
				If (cTBLXMED)->RP_DATARQ = cTipTot

					// Verifica Incidencia Para Periculosidade
					If RetValSRV((cTBLXMED)->RP_PD,SRA->RA_FILIAL,"RV_PERICUL") == "S" .And. lAdiMed
						nBMedPer += If (cTipHV = 'H'.And. cGetPeric = 'H',(cTBLXMED)->RP_HORAS * SalHora,(cTBLXMED)->RP_VALATU)
						nBMedPerV += If (cTipHV = 'H'.And. cGetPeric = 'H',(cTBLXMED)->RP_HORAS * SalHora,(cTBLXMED)->RP_VALATU)
					EndIf

					// Verifica Incidencia para Insalubridade
					If RetValSRV((cTBLXMED)->RP_PD,SRA->RA_FILIAL,"RV_INSALUB") == "S" .And. lAdiMed
						nHMedIns += If (cTipHV = 'H' .And. cGetInsal = 'H',(cTBLXMED)->RP_HORAS,0)   // SE UTILIZAR PARAMETRO MV_INSALVH como 'H', armazenar o total de horas para o calculo da media de insal.
						nBMedIns += If (! cGetInsal = 'H',(cTBLXMED)->RP_VALATU,0)
						
						nHMedInsV += If (cTipHV = 'H' .And. cGetInsal = 'H',(cTBLXMED)->RP_HORAS,0)   // SE UTILIZAR PARAMETRO MV_INSALVH como 'H', armazenar o total de horas para o calculo da media de insal.
						nBMedInsV += If (! cGetInsal = 'H',(cTBLXMED)->RP_VALATU,0)
					EndIf
				EndIf
				
				cPdAnt := (cTBLXMED)->RP_PD
				(cTBLXMED)->(dbSkip())
				
				If cPdAnt <> (cTBLXMED)->RP_PD
					If (nBMedInsV > 0.00 .or. nHMedInsV > 0) .And. lCalInV
						If cGetInsal = 'H' // se utiliza parametro MV_INSALVH como 'H', efetuar calculo da media igual na folha ( (tot. horas (media) *  sal.hora min * % insalub. ))
							nMedInsV := ((nHMedInsV * nMinHora) * nPerc_adiI) /100
						Else
							nMedInsV := ((nBMedInsV + nValIns) * nPerc_adiI) / 100
						EndIf
						aadd(aMed,{SRA->RA_MAT,cTipMed,cPdAnt,"ZZ01",0,nMedInsV,nMedInsV,"N",0})
					EndIf
					
					// Calculo do Valor da Periculosidade sobre a Media
					If nBMedPerV > 0.00 .And. lCalPerV
						nMedPerV   := ( (nBMedPerV+nValPer) * nPerc_adiP) /100
						aadd(aMed,{SRA->RA_MAT,cTipMed,cPdAnt,"ZZ02",0,nMedPerV,nMedPerV,"N",0})
					EndIf
					nBMedPerV := 0
					nHMedInsV := 0
					nBMedInsV := 0
				EndIf
			Enddo
			// Calculo do Valor da Insalubridade sobre Media
			If (nBMedIns > 0.00 .or. nHMedIns > 0) .And. lCalInV
				If cGetInsal = 'H' // se utiliza parametro MV_INSALVH como 'H', efetuar calculo da media igual na folha ( (tot. horas (media) *  sal.hora min * % insalub. ))
					nMedIns := ((nHMedIns * nMinHora) * nPerc_adiI) /100
				Else
					nMedIns := ((nBMedIns + nValIns) * nPerc_adiI) / 100
				EndIf
				GRA_TOT(SRA->RA_MAT,cTipMed,"999","ZZ01",0,nMedIns,nMedIns,"N",0)
			EndIf
			
			// Calculo do Valor da Periculosidade sobre a Media
			If nBMedPer > 0.00 .And. lCalPerV
				nMedPer   := ( (nBMedPer+nValPer) * nPerc_adiP) /100
				GRA_TOT(SRA->RA_MAT,cTipMed,"999","ZZ02",0,nMedPer,nMedPer,"N",0)
			EndIf
		
			For nI := 1 To Len(aMed)
				GRA_TOT(aMed[nI,1],aMed[nI,2],aMed[nI,3],aMed[nI,4],aMed[nI,5],aMed[nI,6],aMed[nI,7],aMed[nI,8],aMed[nI,9])
			Next nI
		EndIf
	EndIf

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fRateio    ³ autor ³ Kelly Soares        ³ Data ³ 10/10/11 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Consulta e grava registros de rateio programado (RHQ).     ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Parametro ³ aEnc: array com dados para gravacao.                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fRateio(aEnc, nTipoBsc, cDataRef)
	Local aArea		:= GetArea()
	Local cChave	:= ""
	Local cMMAAAA	:= ""
	Local nTamItem	:= Space(GetSx3Cache("RHQ_ITEM","X3_TAMANHO"))
	Local nTamCLVL  := Space(GetSx3Cache("RHQ_CLVL","X3_TAMANHO"))

	DEFAULT aEnc		:= {}
	DEFAULT nTipoBsc	:= 2
	DEFAULT lItemClVl	:= GetMvRH( "MV_ITMCLVL", .F., "2" ) $ "1*3"

	If TYPE("cAnoMes") == "U" .OR. cAnoMes == Nil
		cAnoMes := AnoMes(dDataBase)
	EndIf

	//--Competencia de calculo
	cFolMes	:= If(cDataRef == Nil, cAnoMes, cDataRef)
	cMMAAAA	:= Right(cFolMes,2)+Left(cFolMes,4)

	// nTipoBsc = 1 - Apenas Deleta os registros na tabela RHQ
	// nTipoBsc = 2 - Apenas Carrega os Lancamentos/cria na tabela RHQ
	// nTipoBsc = 3 - Ambos

	If nTipoBsc == 1 .Or. nTipoBsc == 3
		DbSelectArea("RHQ")
		DbSeek(SRA->RA_FILIAL+SRA->RA_MAT)
		While !Eof() .and. RHQ->(RHQ_FILIAL+RHQ_MAT) == SRA->(RA_FILIAL+RA_MAT)
			If ( RHQ->RHQ_ORIGEM == 'U' ) .and. ( Right(RHQ->RHQ_DEMES,4)+Left(RHQ->RHQ_DEMES,2)<= cFolMes ) .and. ( Empty(RHQ->RHQ_AMES) .or. ( !Empty(RHQ->RHQ_AMES) .and. Right(RHQ->RHQ_AMES,4)+Left(RHQ->RHQ_AMES,2) >= cFolMes ) )
				RecLock("RHQ",.F.)
				RHQ->( dbDelete() )
				RHQ->( MsUnlock() )
			EndIf
			DbSkip()
		Enddo
	EndIf

	If nTipoBsc == 2 .Or. nTipoBsc == 3
		//--Busca dados
		If Empty(aEnc)
			aRateio := {}
			DbSelectArea("RHQ")
			DbSeek(SRA->RA_FILIAL+SRA->RA_MAT)
			While !Eof() .and. RHQ->(RHQ_FILIAL+RHQ_MAT) == SRA->(RA_FILIAL+RA_MAT)
				If ( Right(RHQ->RHQ_DEMES,4)+Left(RHQ->RHQ_DEMES,2) <= cFolMes ) .and. ( Empty(RHQ->RHQ_AMES) .or. ( !Empty(RHQ->RHQ_AMES) .and. Right(RHQ->RHQ_AMES,4)+Left(RHQ->RHQ_AMES,2) >= cFolMes ) )
					//Esta checagem é necessária para casos em que a programação de rateio foi gerada utilizando item contábil e no momento do
					//cálculo do rateio o parâmetro MV_ITMCLVL está como "Não"
					If lItemClVl
						aAdd(aRateio,{RHQ->RHQ_CC, RHQ->RHQ_ITEM, RHQ->RHQ_CLVL, RHQ->RHQ_PERC / 100, RHQ->RHQ_ORIGEM, RHQ->(Recno()), ""})
					Else
						aAdd(aRateio,{RHQ->RHQ_CC, nTamItem, nTamCLVL, RHQ->RHQ_PERC / 100, RHQ->RHQ_ORIGEM, RHQ->(Recno()), ""})
					EndIf
				EndIf
				DbSkip()
			Enddo
			If !Empty(aRateio)
				aSort(aRateio,,,{ |x,y| x[5] < y[5] } )
			EndIf
			//--Grava dados
		Else
			DbSelectArea("RHQ")
			cChave := SRA->RA_FILIAL + SRA->RA_MAT + cMMAAAA + "U" + aEnc[1]
			If lItemClVl
				cChave += aEnc[5] + aEnc[6]
			EndIf
			If !(RHQ->(DbSeek(cChave)))
				RecLock("RHQ",.T.)
				RHQ->RHQ_FILIAL	:= SRA->RA_FILIAL
				RHQ->RHQ_MAT	:= SRA->RA_MAT
				RHQ->RHQ_DEMES	:= cMMAAAA
				RHQ->RHQ_AMES	:= cMMAAAA
				RHQ->RHQ_CC		:= aEnc[1]
				If lItemClVl
					RHQ->RHQ_ITEM	:= aEnc[5]
					RHQ->RHQ_CLVL	:= aEnc[6]
				Else
					RHQ->RHQ_ITEM	:= Space(GetSx3Cache("RHQ_ITEM","X3_TAMANHO"))
					RHQ->RHQ_CLVL	:= Space(GetSx3Cache("RHQ_CLVL","X3_TAMANHO"))
				EndIf
				If Int(aEnc[4]) > 0
					RHQ->RHQ_PERC	:= aEnc[4]
				Else
					RHQ->RHQ_PERC	:= aEnc[4] * 100
				EndIf
				RHQ->RHQ_ORIGEM := "U"
				RHQ->(MsUnlock())
			EndIf
		EndIf
	EndIf

	RestArea(aArea)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fGravaSRK  ³ autor ³ Stiefano            ³ Data ³ 28/05/98 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Grava Valores Futuros (SRK)                                ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Parametro ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fGravaSRK(cMat,cCusto,cCod,nValorVac,dData_Base)

	Local Dia,Mes,Ano

	If nValorVac == 0
		Return
	EndIf

	If dData_Base # NIL
		Dia := Day(dData_Base)
		Mes := Month(dData_Base)
		Ano := Val(Subs(Dtoc(dData_Base),7,2))
		Mes ++
		If Mes > 12
			Mes = 1
			Ano ++
		EndIf
		If Dia > 16
			Dia := 1
		EndIf
		dDataAux := Ctod(Strzero(Dia,2)+"/"+Strzero(Mes,2)+"/"+Strzero(Ano,2),"DDMMYY")
	Else
		dDataAux := dDataBase
	EndIf

	dbSelectArea( "SRK" )
	If dbSeek( xFilial("SRK") + cMat + cCod )
		RecLock("SRK",.F.,.T.)
	Else
		RecLock("SRK",.T.)
	EndIf
	SRK->RK_FILIAL    := xFilial("SRK")
	SRK->RK_MAT       := cMat
	SRK->RK_PD        := cCod
	SRK->RK_VALORTO   := nValorVac
	SRK->RK_PARCELA   := 1
	SRK->RK_VALORPA   := nValorVac
	SRK->RK_VALORAR   := 0
	SRK->RK_DTVENC    := dDataAux
	SRK->RK_DTMOVI    := dDataBase
	SRK->RK_DOCUMEN   := "000001"
	SRK->RK_CC        := cCusto
	MsUnlock()
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fSalInc	  ³ autor ³ Mauro               ³ Data ³ 24/08/98 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Achar Salario Incorporado Usando Roteiro da Folha          ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Parametro ³ fSalInc(Salario,SalMes,SalHora,SalDia,Comiss)              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fSalInc(nSal, nSalM, nSalH, nSalD, lRelGp, nComiss, dDtTarDe, dDtTarAte, DtRefSalIn, cSemSalIn, nVPeric, nVInsal, nVAdtS, nVAdcCon, nVAdcTrf, nOutros, nSalhInc, nSalHor, nSalDor)
	Local aArea			:= GetArea()
	Local cPeriodo		:= ""
	Local lAtsMan		:= .F.
	Local lProvisao 	:= IsInCallStack("GPEM070") .Or. IsInCallStack("GPM070GRD")
	Local nRet			:= 0
	Local nX			:= 0
	Local n1Aux 		:= n2Aux := n3Aux := n4Aux 	:= n5Aux := n6Aux := 0
	Local cVbInsal 		:= ""
	Local cVbPeric 		:= ""
	Local cVbAdCar 		:= ""
	Local cVbAdTrf 		:= ""
	Local cVbAts 		:= ""

	// Seta e Carrega os Mnemonicos.
	SetMnemonicos(Nil,Nil,.T.)
	// Define Variaveis usadas no roteiro de calculo
	Private nSalMin	  	:= 0
	Private aVarRot		:= {} // Matriz com Variaveis e Valores No Roteiro de Calculo
	Private cRotFol 	:= If(SRA->RA_CATFUNC $ "P*A",fGetCalcRot("9"),fGetRotOrdinar())
	Private cRotInc		:= fGetCalcRot('G')
	Private lContinua   := .T.
	Private lSalInco    := .T. // Chamada da formula efetuada atraves de fSalInc()
	Private cSemana		:= If (cSemana = Nil,Space(2),cSemana)
	Private aCRA		:= { STR0011,STR0012,STR0013 } //"Confirma"###"Redigita"###"Abandona"
	Private Mediasem:= 12
	Private Sind_ant:= "!!"
	Private DiasTrab 	:= 0
	Private cDiasMes 	:= "N"
	Private cCalcInf 	:= "N"
	Private nDiasEnf 	:= nValAfas := nAfasFgts := nHorasTrab := nHorasDsr := 0
	Private nDiasAfas	:= nDiasMat := nDiasAc	 := nDiasAd    := nDiasFgts := 0
	Private DiasDsr  	:= 0
	Private lAdmissao	:= .F.
	Private Val_SalMin 	:= 0.00
	Private lAdicInteg := .F.

	DEFAULT nVPeric 	:= 0
	DEFAULT nVInsal 	:= 0
	DEFAULT nVAdtS		:= 0
	DEFAULT nVAdcCon	:= 0
	DEFAULT nVAdcTrf	:= 0
	DEFAULT nOutros 	:= 0
	DEFAULT nSalhInc	:= 0
	DEFAULT lItemClVl	:= GetMvRH( "MV_ITMCLVL", .F., "2" ) $ "1*3"
	DEFAULT nSalHor	  	:= 0
	DEFAULT nSalDor		:= 0

	// Parametro Composicao do Mes
	Normal	   	:= SRA->RA_HRSMES
	Descanso  	:= 0
	nDsr		:= 0

	// Variavel inicializada nos calculos porem nao nos relatorios
	If Type("lUltSemana") == "U"
		Private lUltSemana := .T.
	EndIf

	If Type("nPosSem") == "U"
		Private nPosSem := 0
	EndIf

	aPerAtual	:= {}

	// Se a data de ref. nao foi passada pega periodo ativo
	If DtRefSalIn == Nil
		If fGetPerAtual( @aPerAtual, xFilial("RCH",SRA->RA_FILIAL), SRA->RA_PROCES, cRotFol )
			cPeriodo	:= aPerAtual[1,1]
			cNumPgto	:= aPerAtual[1,2]
			dDataAte	:= aPerAtual[1,6]
		Else
			Return(.F.)
		EndIf
	Else
		cPeriodo	:= AnoMes(DtRefSalIn)
		cNumPgto	:= If(cSemSalIn # Nil,cSemSalIn,"01")
	EndIf

	DEFAULT  DtRefSalIn	:= If(DtRefSalIn # Nil,DtRefSalIn,dDataAte)
	DEFAULT  cSemSalIn	:= If(cSemSalIn # Nil,cSemSalIn,cNumPgto)

	If !(cPaisLoc $ "BRA") .and. FindFunction("fXSalInc")
		fXSalInc(@nSal,@nSalM,@nSalH,@nSalD,@lRelGp,@nComiss,@dDtTarDe,@dDtTarAte)
		Return
	EndIf

	// Variaveis para Retorno
	nAdtServ 	:= nPeric	:= nInsalub := 0.00	  // Valores dos Adicionais
	cCodAdt  	:= cCodIns 	:= Space(3) 		  // Codigos que Foram Gerados
	Salario 	:= 0
	SalMes  	:= 0
	SalDia  	:= 0
	SalHora 	:= 0
	nSalPg  	:= 0
	nComiss  	:= 0
	aPdv	   	:= {} // Matriz Incidencia de Verbas Usado na Fvaloriza()
	aPd			:= {}

	Private nTotDias := 0

	lRelGp := If (lRelGp == Nil , .F. , .T.)

	If cCompl == "S" .And. lProxMes
		// Se for complementar, carrega verbas da rescisao anterior para
		// efetuar a incorporacao do salario
		Aeval(aPdResc,{|X| If( X[7] $"E*V*I*G" ,( Aadd(aPd, aClone( X )  ) , fIncide(X[1]) ) ,NIL ) })
	Else
		dbSelectArea( "SRC" )
		dbSetOrder(1)
		dbSeek( SRA->RA_FILIAL + SRA->RA_MAT )
		While !EOF() .And. SRA->RA_FILIAL + SRA->RA_MAT  = SRC->RC_FILIAL + SRC->RC_MAT
			cDel := " "
			If SRC->RC_TIPO2 $ "CKLR" .And. SRC->RC_SEMANA == cSemana
				cDel := "D"
			Endif
			dDtapg := SRC->RC_DATA

			FMatriz(SRC->RC_PD,SRC->RC_VALOR,SRC->RC_HORAS,SRC->RC_SEMANA,SRC->RC_CC,;
			SRC->RC_TIPO1,SRC->RC_TIPO2,SRC->RC_PARCELA,cDel,dDtapg,,SRC->RC_SEQ,,If(lItemClVl,RC_ITEM,''),If(lItemClVl,RC_CLVL,''),,,SRC->RC_IDCMPL )
			dbSelectArea("SRC")
			dbSkip()
		Enddo
	EndIf

	//Carrega dados do periodo da folha
	SetRotExec( cRotFol )
	SetPeriodCalc( cPeriodo )
	SetNumPgCalc( cNumPgto )

	// Executar as Formulas do Roteiro "INC"
	nRet := ExecRot(SRA->RA_FILIAL, cRotInc )

	If nRet < 0 .Or. nRet == 2 //Retorna 2 quando calculo eh abortado
		nComiss := 0
		nSal    := 0
		nSalM   := 0
		nSalH   := 0
		nSalD   := 0

		RestArea(aArea)

		Return
	EndIf

	// Soma Verba de Comissao/Dsr Comissao/Garantia de Comissao e
	// iguala as variaveis para retorno de acordo com os parametros.
	nComiss := fBuscaPD( FGetCodFol("165")+","+FGetCodFol("166")+","+FGetCodFol("347") )
	nSal    := Salario
	If !lProvisao
		nSalM   := SalMes
		nSalH   := SalHora
		nSalHor := SalHor
		nSalD   := SalDia
		nSalDor := SalDor
	Else
		nSalM   := Salario
		nSalH   := SalHor
		nSalD   := SalDor
		nSalhInc:= SalHora //Grava o salário hora incorporado pois deverá ser usada nas verbas de horas extra com base incorporada.
		nSalInc	:= SalMes 		
	EndIf
	nVPeric := nPeric
	nVInsal := nInsalub
	nVAdtS	:= nAdtServ
	nVAdcCon:= nAdcConf
	nVAdcTrf:= nAdcTrf

	If lProvisao

		cVbInsal	:= aCodFol[0037,1] +"/"+ aCodFol[0038,1] +"/"+ aCodFol[39,1] +"/"+ aCodFol[1282,1]	//Insalubridade
		cVbPeric	:= aCodFol[0036,1] +"/"+ aCodFol[1281,1]	//Periculosidade
		cVbAdCar	:= aCodFol[0984,1] //Adcional Cargo
		cVbAdTrf	:= aCodFol[0988,1] //Adicional Transf
		cVbAts 		:= aCodFol[0001,1] +"/"+ aCodFol[0002,1] +"/"+ aCodFol[003,1] +"/"+ aCodFol[004,1] +"/"+ aCodFol[005,1] +"/"+ ;
						aCodFol[1283,1] +"/"+ aCodFol[1284,1] +"/"+ aCodFol[1285,1] +"/"+ aCodFol[1286,1] +"/"+ aCodFol[1287,1] +"/"+ aCodFol[1338,1]	//ATS
		lAtsMan 	:= (cAdtPoSer == "" .And. nAdtServ == 0)//ATS com SRA vazio

		//Os valores dos adicionais somente podem deduzir do salario composto quando eles incorporam ao salario
		For nX := 1 To Len( aPd )
			Do Case
				Case aPd[nX][1] $ cVbPeric	//Adicional de Periculosidae
					If RetValSRV( aPd[nX][1],SRA->RA_FILIAL,"RV_INCORP") == "S"
						n1Aux := nPeric
					EndIf
				Case aPd[nX][1] $ cVbInsal	//Adicional de Insalubridade
					If RetValSRV( aPd[nX][1],SRA->RA_FILIAL,"RV_INCORP") == "S"
						n2Aux := nInsalub
					EndIf
				Case aPd[nX][1] $ cVbAts	//Adicional por tempo de servico
					If RetValSRV( aPd[nX][1],SRA->RA_FILIAL,"RV_INCORP") == "S"
						If !lAtsMan
							n3Aux := nAdtServ
						Else
							n3Aux 	+= aPd[nX][5]
							nVAdtS 	+= aPd[nX][5]
						EndIf
					EndIf
				Case aPd[nX][1] $ cVbAdCar	//Adicional Cargo confianca
					If RetValSRV( aPd[nX][1],SRA->RA_FILIAL,"RV_INCORP") == "S"
						n4Aux := nAdcConf
					EndIf
				Case aPd[nX][1] $ cVbAdTrf	//Adicional Transferencia
					If RetValSRV( aPd[nX][1],SRA->RA_FILIAL,"RV_INCORP") == "S"
						n5Aux := nAdcTrf
					EndIf
				Case aPd[nX][1] $ aCodFol[165,1] + "/" + aCodFol[166,1]	//Comissão e DSR sobre comissão
					//Se incorpora salário e tem referência para média
					If RetValSRV( aPd[nX][1],SRA->RA_FILIAL,"RV_INCORP") == "S" .and. !(RetValSRV( aPd[nX][1],SRA->RA_FILIAL,"RV_MEDFER") $ "N  ")
						n6Aux += aPd[nX][5]
					EndIf
			End Case
		Next nX

		nOutros := Max( SalMes - (Salario + n1Aux + n2Aux + n3Aux + n4Aux + n5Aux + n6Aux), 0 )

	EndIf

	If lRelGp
		Set Device to Print
	EndIf

	RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fVarRot	  ³ autor ³ Mauro               ³ Data ³ 11/02/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Incluir /Alterar/Retornar Conteudo de Variaveis do Roteiro ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Parametro ³ fVarRot(cVar,cOpc,cConteudo)                               ³±±
±±³          ³ cVar  	=Descri‡Æo da Variavel					          ³±±
±±³          ³ cConteudo = Nil - Retorno do Conteudo da Variavel          ³±±
±±³          ³           # Nil - Cria Variavel e seu Conteudo no Array    ³±±
±±³          ³ cSubSoma  = "A" - Acumular 								  ³±±
±±³          ³ cSubSoma  = "S" - Substituir								  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±/*/
Function fVarRot(cVar,cConteudo,cSubSoma)

	Local cRet
	Local nPosV

	cSubSoma := If (cSubSoma == Nil, "S" , cSubSoma)

	If cConteudo # Nil
		If (nPosV := Ascan(aVarRot,{ |x| UPPER(x[1]) == UPPER(cVar) })) == 0
			Aadd(aVarRot,{cVar,cConteudo})
		ElseIf cSubSoma = "S"
			aVarRot[nPosV,2] := cConteudo
		Else
			aVarRot[nPosV,2] += cConteudo
		EndIf
	Else
		If (nPosV := Ascan(aVarRot,{ |x| UPPER(x[1]) == UPPER(cVar) } )) > 0
			cRet := aVarRot[nPosv,2]
		Else
			If Upper(Subs(cVar,1,1)) = "N"
				cRet := 0
			ElseIf 	Upper(Subs(cVar,1,1)) = "C"
				cRet := ""
			ElseIf 	Upper(Subs(cVar,1,1)) = "L"
				cRet := .F.
			ElseIf 	Upper(Subs(cVar,1,1)) = "D"
				cRet := Ctod("")
			Else
				cRet := Nil
			EndIf
		EndIf
		Return(cRet)
	EndIf
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fSCAfas	  ³ autor ³ Mauro               ³ Data ³ 15/02/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Somar Valor No Sal.Contr. sem Calculo do Inss Funcionario  ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Parametro ³ nValSoma = Valor a ser Somado no Sal.Contribuicao          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±/*/
Function fSCAfas(nValSoma,l132)

	Local nBaseTot 	:= 0
	Local nBaseOutE := 0
	Local cCodAte	:= ""
	Local cCodAci	:= ""
	Local aTab		:= {}
	Local nBInss_b	:= 0
	Local nBInssF_b := 0
	Local nBaseAte  := 0
	Local nBaseAci  := 0

	l132 := If ( l132== Nil, .F. , l132)
	If ! l132
		aTab 	:= aTInss
		cCodAte := aCodFol[13,1]
		cCodAci := aCodFol[14,1]
	Else
		aTab := aTInss13
		cCodAte := aCodFol[19,1]
		cCodAci := aCodFol[20,1]
	EndIf

	//--Verifica se existe no array aVarRot o teto do Inss caso nao esita cria
	If fVarRot("nTetoInss") == 0
		nPT :=  Len(aTab)
		If nPt > 0 .And. aTab[nPT,1] > 0
			fVarRot("nTetoInss",aTab[nPT,1])
		ElseIf nPt > 1
			nPt := If (nPt-1 > 0 , nPt -1 , 1)
			fVarRot("nTetoInss",aTab[nPT,1])
		EndIf
	EndIf

	//-- Somar Base de Inss Outras Empresas
	If ! l132
		IF !Empty( aCodFol[288,1] ) //Base Inss Outras Empresas
			aEval( aPD , { |x| nBaseOutE += IF( x[1] == aCodFol[288,1] .and. x[9] # "D" .and. x[3] == cSemana , x[5] , 0.00 ) } )
		EndIf
	Else
		IF !Empty( aCodFol[290,1] ) //Base Inss Outras Empresas 13o. Salario
			aEval( aPD , { |x| nBaseOutE += IF( x[1] == aCodFol[290,1] .and. x[9] # "D", x[5] , 0.00 ) } )
		EndIf
	EndIf

	//--Verifica se lancou Base de Inss somando as verbas
	If ! l132
		nBInss_b := nBInssf_b := 0.00
		Aeval( aPd ,{ |X| nBInss_B += If (x[1] $ aCodFol[13,1]+"*"+ aCodFol[14,1] .And. X[3] = cSemana .And. X[9] # "D",x[5],0.00) })

		//-- Soma Incidencia para Inss quando base nao foi lancada
		IF nBInss_b = 0
			//-- Soma Incidencia para Inss quando base não foi lancada
			Aeval( aPd ,{ |X| SomaInc(X,4,@nBInss_b  ,11,"N",12,"N", , ,aCodfol) })
			Aeval( aPd ,{ |X| SomaInc(X,4,@nBInssF_b ,11,"S", , , , ,aCodFol) })
		EndIf
	Else
		nBInss_b := 0.00
		Aeval( aPd ,{ |X| nBInss_B += If (x[1] $ aCodFol[19,1]+"*"+aCodFol[20,1] .And. X[9] # "D",x[5],0.00) })
	EndIf

	//--Base Total do Funcionario
	nBaseTot := nBInss_b + nBInssF_b + nBaseOutE + nValSoma

	//--Regrava as Bases apos soma do Sal. Maternidade
	If nBaseTot > fVarRot("nTetoInss")
		nBaseAte :=  Max(fVarRot("nTetoInss") - nBaseOutE,0)
		nBaseAci :=  nBaseTot - nBaseOutE - nBaseAte
	Else
		nBaseAte :=  Max(nBaseTot - nBaseOutE,0)
	EndIf

	fMatriz(cCodAte,nBaseAte,,,,,,,,,.T.)
	fMatriz(cCodAci,nBaseAci,,,,,,,,,.T.)

	If l132
		//--Apagar Inss para ser recalculado pela base total
		//--O INSS nao desconta o Inss do 13o.pago e a folha deve descontar
		//-- sobre o total do ano.
		fDelPd(aCodFol[070,1]+","+aCodFol[169,1])
		fCInss13(aCodfol,aTinss13,.F.)
	EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCMComiss ³ Autor ³ Emerson Rosa de Souza ³ Data ³ 13.11.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Buscar comissao para calcular media 						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aCodfol     - Codigos da folha							  ³±±
±±³          ³ nMedComiss  - Valor de retorno das medias de comissaso	  ³±±
±±³          ³ nMesesMedia - Numero de meses para calculo das medias 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fCMComiss(aCodFol,nMedComiss,nMesesMedia,cCondAdic,lValoriza,cPdMedAfa)

	Local Ny,dDtaAfas,cAnoMesIni,cAnoMesFim,cCondBusca
	Local nCnt1,nVerbas,nProxVerb
	Local nVlDsrProf := nVlHrsAtiv := 0
	Local cBsDsrProf := cBsHrsAtiv := ""
	Local lDsrHrsAtiv := GetMvRH("MV_DSRHATV",,.T.) // Calcula DSR e sobre ele a Hora Atividade
	Local cVbMedAnt	  := ""

	DEFAULT lValoriza	:= .F.
	DEFAULT cPdMedAfa   := ""

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³	Busca data do inicio e retorno do afastamento   			  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !fChkAfas(SRA->RA_FILIAL,SRA->RA_MAT,,@dDtaAfas)
		Return
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³	Monta data inicial e final da busca das medias  			  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cAnoMesIni := StrZero(Year(dDtaAfas),4) + StrZero(Month(dDtaAfas),2)
	For Ny  := 1 To nMesesMedia
		cAnoMesIni := If(Val(Right(cAnoMesIni,2))-1 == 0,StrZero(Val(Left(cAnoMesIni,4))-1,4)+"12",Left(cAnoMesIni,4)+StrZero(Val(Right(cAnoMesIni,2))-1,2))
		If Ny == 1
			cAnoMesFim := cAnoMesIni
		EndIf
	Next Ny
	If nMesesMedia == 0 .Or. cAnoMesFim == "000000"
		cAnoMesFim := cAnoMesIni
	EndIf

	dDtPqIni := CTOD("01/"+Subs(cAnoMesIni,5,2)+"/"+Subs(cAnoMesIni,1,4),"DDMMYY")
	dDtPqFim := CTOD("01/"+Subs(cAnoMesFim,5,2)+"/"+Subs(cAnoMesFim,1,4),"DDMMYY")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³	Define a condicao de busca para os tarefeiros    			  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cCondBusca := If(SRA->RA_CATFUNC == "T", "!Empty(SRV->RV_TAREFA) .And. "+;
	"AllTrim(SRV->RV_TAREFA)#'N'","")

	If cCondAdic <> Nil
		If Empty(cCondBusca)
			cCondBusca	:=	cCondAdic
		Else
			cCondBusca	+=	".And."+cCondAdic
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³	Soma das Verbas no Acumulado								  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !(SRA->RA_CATFUNC $ "I*J")
		cVbMedAnt := cVbMedAfas
		If !Empty(cPdMedAfa)
			nCnt1 := 1
			While nCnt1 < Len(cPdMedAfa)
				cVbMedAfas += "/" + SubStr(cPdMedAfa,nCnt1,3)
				nCnt1 += 3
			EndDo
		EndIf
		nMedComiss := fBuscaAcm(cVbMedAfas,cCondBusca,dDtPqIni,dDtPqFim,"V",,,lValoriza,,(nDiasMat>0))
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Calculo da Media										      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nMedComiss := Round(nMedComiss / nMesesMedia, 2)
		cVbMedAfas := cVbMedAnt
	Else
		nVerbas := MlCount(cVbMedAux,4)
		nProxVerb := 1
		For nCnt1 := 1 To nVerbas
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Posiciona na Verba para calculo das medias do professor		   	³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If	!( (aCodfol[33,1] $ cVbMedAux) .Or. (aCodfol[317,1] $ cVbMedAux) )
				SRV->( PosSrv(Substr(cVbMedAux,nProxVerb,3),SRA->RA_FILIAL) )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Relaciona verbas para calculo do DSR e Horas Atividade 			³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If SRV->RV_TIPOCOD == "1"
					If SRV->RV_DSRPROF == "S"
						cBsDsrProf += SRV->RV_COD + "/"
					EndIf

					If SRV->RV_HRSATIV == "S"
						cBsHrsAtiv += SRV->RV_COD + "/"
					EndIf
				EndIf
			EndIf
			nProxVerb := nProxVerb + 4
		Next nCnt1
		cBsDsrProf := Substr(cBsDsrProf,1,(Len(cBsDsrProf)-1)) //Verbas que compoem base de calculo do DSR
		cBsHrsAtiv := Substr(cBsHrsAtiv,1,(Len(cBsHrsAtiv)-1)) //Verbas que compoem base de calculo das Horas Atividade

		nMedComiss := fBuscaAcm(cVbMedAux,cCondBusca,dDtPqIni,dDtPqFim,"V",,,lValoriza,,(nDiasMat>0)) //Media das tarefas variaveis
		If lDsrHrsAtiv // Calcula DSR e sobre ele a Hora Atividade
			nVlDsrProf := fBuscaAcm(cBsDsrProf,cCondBusca,dDtPqIni,dDtPqFim,"V",,,lValoriza,,(nDiasMat>0)) * aParProf[2] //Calcula DSR
			nVlHrsAtiv := (fBuscaAcm(cBsHrsAtiv,cCondBusca,dDtPqIni,dDtPqFim,"V",,,lValoriza,,(nDiasMat>0)) + nVlDsrProf) * aParProf[3] //Calcula Horas Atividade
		Else
			nVlHrsAtiv := fBuscaAcm(cBsHrsAtiv,cCondBusca,dDtPqIni,dDtPqFim,"V",,,lValoriza,,(nDiasMat>0)) * aParProf[3] //Calcula Horas Atividade
			nVlDsrProf := (fBuscaAcm(cBsDsrProf,cCondBusca,dDtPqIni,dDtPqFim,"V",,,lValoriza,,(nDiasMat>0)) + nVlHrsAtiv) * aParProf[2] //Calcula DSR
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Calculo da Media Total (Tarefas + DSR + Horas Atividade)      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nMedComiss := Round((nMedComiss + nVlDsrProf + nVlHrsAtiv) / nMesesMedia, 2) //Valor total da Media (Tarefas Variaveis + DSR + Horas Atividade)
	EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fBuscaAcm ³ Autor ³ Mauro                 ³ Data ³ 13.11.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Buscar Verbas no Acumulado 								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fBuscaAcm(uParam1,uParam2,uParam3,uParam4,uParam5,uParam6,uParam7,uParam8,uParam9,uParam10,uParam11, uParam12)

	Local aArea		:= GetArea()
	Local cVerbas
	Local cStrSrv
	Local dPerIni
	Local dPerFim
	Local cAnoMesIni
	Local cAnoMesFim
	Local cRetVH
	Local nValor
	Local nQtd
	Local lValoriza
	Local l13o
	Local lMatern
	Local lVerbas
	Local lRetNeg

	Local nVez
	Local nPercVlr	 := 1.00
	Local bCondSrv   := { |e| If (ValType(e) = "C",&(e),If (ValType(e) = "B",Eval(e),.F.)) }
	Local aChave     := Array(01,07)
	Local aRecTrf	 := {}

	Local cChave     := SRA->RA_FILIAL + SRA->RA_MAT
	Local cAliasSRD	 := "SRD"
	Local cFil_Query := ""
	Local cMat_Query := ""
	Local lQuery	 := .F.
	Local cAliasSRV  := "SRV"
	Local aStruSRV	 := {}
	Local lQuerySRV	 := .F.
	Local aTarefaVal := {}
	Local nPosTa	 := 0
	Local nPos		 := 0
	Local nHrsDia	 := 1 //Garante divisao diferente de zero

	Local aVerbas
	Local cSvVerbas
	Local nX

	Private aVerbasAc := {}
	Private lDtRef  := .F.	//# Indica se a pesquisa nos acumulados sera por Data de Referencia
	
	Static __oSt1 
	Static __cEmpAux

	dbSelectArea("RCA")
	dbSetOrder(1)	//# RCA_FILIAL+RCA_MNEMON
	lDtRef := dbSeek(xFilial("RCA")+"P_MAIORSAL      ",.F.)

	DEFAULT uParam8  := .F.
	DEFAULT uParam9  := .F.
	DEFAULT uParam10 := .F.
	DEFAULT uParam11 := .F.
	DEFAULT uParam12 := .F.

	//DEFAULT l13o	:= .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Variavel que define a valorizacao das verbas lancadas em horas ou dias³
	//³pelo valor do salario hora e salario dia.                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	//DEFAULT lValoriza	:= .F.
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Variavel que define se o calculo que esta sendo feito e para medias de³
	//³licenca maternidade.                                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	//DEFAULT lMatern		:= .F.

	cVerbas		:= uParam1
	cStrSrv		:= uParam2
	dPerIni		:= uParam3
	dPerFim		:= uParam4
	cRetVH		:= uParam5
	nValor		:= uParam6
	nQtd		:= uParam7
	lValoriza	:= uParam8
	l13o    	:= uParam9
	lMatern		:= uParam10
	lVerbas		:= uParam11
	lRetNeg		:= uParam12
	cAnoMesIni	:= MesAno(dPerIni)
	cAnoMesFim	:= MesAno(dPerFim)

	cAnoMesFim := If( l13o,substr(MesAno(dPerFim),1,4)+"13",MesAno(dPerFim))
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Somente valoriza as verbas caso tenha Salario Hora e Salario Dia ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lValoriza
		If !( Type("SALMES") == "N" .And. Type("SALHORA") == "N" .And. ;
		Type("SALDIA") == "N" .And. Type("SALARIO") == "N" )
			If !( nSalHora > 0 .And. SalDia > 0 )
				lValoriza := .F.
			EndIf
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Tratamento para retorno em Dias se a verba for lancada como   ³
	//³horas.														 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	IF cRetVH == "D"
		nHrsDia 	:= Round(SRA->RA_HRSMES/30,2)	//-- Calcula 1 dia de trabalho
	EndIf

	nValor 	:= 0
	nQtd	:= 0

	DbSelectArea( cAliasSRD )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Carrega informacoes atuais do Funcionario em aChave.          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aChave[01,01] := cEmpAnt	  ; aChave[01,02] := cChave
	aChave[01,03] := SRA->RA_CC	  ; aChave[01,04] := cEmpAnt
	aChave[01,05] := cChave 	  ; aChave[01,06] := SRA->RA_CC
	aChave[01,07] := dDataBase

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Retorna Todas as Transferencias do Funcionario.              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	IF fTransf(@aChave,,,,,,,.T.)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Grava em aChave a Situacao Atual do Funcionario               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF aScan( aChave,{ |x| ( x[1] + x[2] ) == ( cEmpAnt + cChave ) } ) == 0 .or. ;
		aScan( aChave,{ |x| cEmpAnt != x[4] } ) > 0
			SRA->( aAdd(aChave,{cEmpAnt			,; // 01 - Empresa Origem
			cChave            					,; // 02 - Filial + Matricula Origem
			RA_CC								,; // 03 - Centro de Custo Origem
			cEmpAnt								,; // 04 - Empresa Destino
			cChave              				,; // 05 - Filial + Matricula Destino
			RA_CC								,; // 06 - Centro de Custo Destino
			(aChave[ Len( aChave ) , 7 ] + 1 )})) // 07 - Data da Transferencia
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Ordena o Array aChave em Ordem Decrescente de Data            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aSort( aChave ,,, { |x,y| x[7] > y[7] } )
	EndIf

	dbSelectArea( cAliasSRD )
	cChave := Space(FWGETTAMFILIAL) + "!!!!!!"
	For nVez := 1 to Len(aChave)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se chaves sao diferentes para nao duplicar valores   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If aChave[nVez,2] == cChave
			Loop
		Else
			cChave := aChave[nVez,2]
			cFil_Query	:= substr(cChave,1,FWGETTAMFILIAL)
			cMat_Query	:= substr(cChave,FWGETTAMFILIAL+1,Len(cChave)-FWGETTAMFILIAL)
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Sai do For/Next Quando Encontrar a 1a Transf. entre Empresas  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF !( aChave[nVez,4] == NIL ) .And. !(aChave[nVez,1] == aChave[nVez,4])
			Exit
		EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Configuracao para TOP para SRD                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If !Empty( xFilial("SRV") )
			lQuerySRV	:= .T.
			cAliasSRV 	:= "QSRV"
			aStruSRV  	:= SRV->(dbStruct())
			cQuery 		:= "SELECT * "
			cQuery 		+= "FROM "+ RetSqlName("SRV") + " "
			cQuery 		+= "WHERE RV_FILIAL	='"	+ SRA->RA_FILIAL 	+"' AND "
			cQuery 		+= "D_E_L_E_T_	= ' ' "
			cQuery 		+= "ORDER BY "+SqlOrder("RV_FILIAL+RV_COD")
			cQuery 		:= ChangeQuery(cQuery)

			IF Select(cAliasSRV) > 0
				(cAliasSRV)->( dbclosearea())
			endif

			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSRV)
			For nX := 1 To Len(aStruSRV)
				If aStruSRV[nX][2]<>"C"
					TcSetField(cAliasSRV,aStruSRV[nX][1],aStruSRV[nX][2],aStruSRV[nX][3],aStruSRV[nX][4])
				EndIf
			Next nX
		EndIf

		If __oSt1 == Nil .or. ( __cEmpAux == Nil .or. __cEmpAux <> cEmpAnt )
	
			__cEmpAux := cEmpAnt
		
			__oSt1 := FWPreparedStatement():New()	 
	
			cQuery := "SELECT * FROM " + RetSqlName('SRD') + " WHERE "
			cQuery += "RD_FILIAL = ? AND "
			cQuery += "RD_MAT = ? AND "
			cQuery += "RD_DATARQ >= ? AND "
			cQuery += "RD_DATARQ <= ? AND "
			cQuery += " *TIPOPESQ* "     
			cQuery += "D_E_L_E_T_ = ' ' "
			cQuery += "ORDER BY "+SqlOrder("RD_FILIAL+RD_MAT+RD_DATARQ+RD_PD+RD_SEMANA+RD_SEQ+RD_CC")  
			
			cQuery := ChangeQuery(cQuery)
			
			__oSt1:SetQuery(cQuery)
	
		EndIf

		cAliasSRD 	:= "QSRD"
		lQuery    	:= .T.
		aStruSRD  	:= SRD->(dbStruct())

		__oSt1:SetString(1,cFil_Query)
		__oSt1:SetString(2,cMat_Query)
		__oSt1:SetString(3,cAnoMesIni)
		__oSt1:SetString(4,cAnoMesFim)
		
		cQuery := __oSt1:getFixQuery()
		
		If !Empty( cVerbas )
			If !Empty(cStrSrv)
				(cAliasSRV)->(dBeval({||cVerbas+="/"+(cAliasSRV)->RV_COD},{||Eval(bCondSrv,cStrSrv)} ))
			EndIf
			cSvVerbas 	:= cVerbas
			aVerbas 	:= StrToArray( cVerbas, "/" )

			If !Empty( aVerbas )
				cVerbas := "( "
				For nX := 1 To Len( aVerbas )
					cVerbas += "'" + aVerbas[ nX ] + "'" + ","
				Next nX
				cVerbas := Substr( cVerbas, 1, Len( cVerbas ) -1)
				cVerbas += " )"
				cQuery := Replace(cQuery,'*TIPOPESQ*',"RD_PD IN " + cVerbas + " AND " )
			EndIf
			cVerbas := cSvVerbas
		Else
			cQuery := Replace(cQuery,'*TIPOPESQ*'," ")
		EndIf

		IF Select(cAliasSRD) > 0
			(cAliasSRD)->( dbclosearea())
		endif

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSRD)

		For nX := 1 To Len(aStruSRD)
			If aStruSRD[nX][2]<>"C"
				TcSetField(cAliasSRD,aStruSRD[nX][1],aStruSRD[nX][2],aStruSRD[nX][3],aStruSRD[nX][4])
			EndIf
		Next nX

		While !(cAliasSRD)->(Eof() ) .And. cChave == (cAliasSRD)->RD_FILIAL+(cAliasSRD)->RD_MAT .And.;
		(cAliasSRD)->RD_DATARQ >= cAnoMesIni .And. (cAliasSRD)->RD_DATARQ <= cAnoMesFim
			If   Ascan(aRecTrf,(cAliasSRD)->R_E_C_N_O_ ) >0
				(cAliasSRD)->( dbSkip() )
				Loop
			EndIf

			If lMatern
				If	substr( (cAliasSRD)->RD_DATARQ ,5,2) == "13"
					(cAliasSRD)->( dbSkip() )
					Loop
				EndIf
			EndIf

			If ( cVerbas # Nil .And. (cAliasSRD)->RD_PD $ cVerbas ) .Or.;
			( cStrSrv # Nil .And. !Empty(cStrSrv) .And. ;
			PosSrv((cAliasSRD)->RD_PD,SRA->RA_FILIAL) .And. SRV->(Eval(bCondSrv,cStrSrv)) )

				If PosSrv((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "13"
					If lValoriza
						nPercVlr	:= If(SRV->RV_PERC == 0.00,1.00,SRV->RV_PERC/100)
					EndIf
					If lValoriza
						//-- Valorizacao de verbas lancadas em horas
						If (cAliasSRD)->RD_TIPO1 == "H"
							nValor 	+=	Round((cAliasSRD)->RD_HORAS * SalHora * nPercVlr,2)
							//-- Valorizacao de verbas lancadas em dias
						ElseIf (cAliasSRD)->RD_TIPO1 == "D"
							nValor 	+=	Round((cAliasSRD)->RD_HORAS * SalDia * nPercVlr,2)
							//-- Valorizacao de tarefas e horas aulas
						ElseIf (cAliasSRD)->RD_HORAS > 0 .And. Len(Alltrim(SRV->RV_TAREFA)) == 3
							If Len(aTarefaVal) == 0
								fCarTar(@aTarefaVal)
							EndIf
							nPosTa := Ascan(aTarefaVal,{ |X| X[1] == SRV->RV_TAREFA })
							If nPosTa > 0 .And. (cAliasSRD)->RD_HORAS > 0
								nValor 	+=	(cAliasSRD)->RD_HORAS * aTarefaVal[nPosTa,3]
							Else
								nValor 	+=	(cAliasSRD)->RD_VALOR
							EndIf
							//-- Verbas sem valorizacao
						Else
							nValor 	+=	(cAliasSRD)->RD_VALOR
						EndIf
						//-- Nenhuma valorizacao de verbas
					Else
						nValor 	+=	(cAliasSRD)->RD_VALOR
					EndIf
					//-- Se o retorno for em dias e a verba foi lancada em Horas, converte para dias baseada na carga de trabalho semanal contratada
					IF  cRetVH == "D" .and. (cAliasSRD)->RD_TIPO1 == "H"
						nQtd	+= Int( 	(cAliasSRD)->RD_HORAS / nHrsDia )
					Else
						nQtd	+= (cAliasSRD)->RD_HORAS
					EndIf

					Aadd(aRecTrf,(cAliasSRD)->R_E_C_N_O_ )

				ElseIf PosSrv((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2/4"

					If lValoriza
						nPercVlr	:= If(SRV->RV_PERC == 0.00,1.00,SRV->RV_PERC/100)
					EndIf
					If lValoriza
						//-- Valorizacao de verbas lancadas em horas
						If (cAliasSRD)->RD_TIPO1 == "H"
							nValor 	-= Round((cAliasSRD)->RD_HORAS * SalHora * nPercVlr,2)
							//-- Valorizacao de verbas lancadas em dias
						ElseIf (cAliasSRD)->RD_TIPO1 == "D"
							nValor 	-= Round((cAliasSRD)->RD_HORAS * SalDia * nPercVlr,2)
							//-- Valorizacao de tarefas e horas aulas
						ElseIf (cAliasSRD)->RD_HORAS > 0 .And. Len(Alltrim(SRV->RV_TAREFA)) == 3
							If Len(aTarefaVal) == 0
								fCarTar(@aTarefaVal)
							EndIf
							nPosTa := Ascan(aTarefaVal,{ |X| X[1] == SRV->RV_TAREFA })
							If nPosTa > 0 .And. (cAliasSRD)->RD_HORAS > 0
								nValor 	-= (cAliasSRD)->RD_HORAS * aTarefaVal[nPosTa,3]
							Else
								nValor 	-= (cAliasSRD)->RD_VALOR
							EndIf
							//-- Verbas sem valorizacao
						Else
							nValor 	-= (cAliasSRD)->RD_VALOR
						EndIf
						//-- Nenhuma valorizacao de verbas
					Else
						nValor 	-= (cAliasSRD)->RD_VALOR
					EndIf
					//-- Se o retorno for em dias e a verba foi lancada em Horass converte para dias baseada na carga de trabalho semanal contratada
					IF  cRetVH == "D" .and. (cAliasSRD)->RD_TIPO1 == "H"
						nQtd	-= Int( 	(cAliasSRD)->RD_HORAS / nHrsDia )
					Else
						nQtd	-= (cAliasSRD)->RD_HORAS
					EndIf

					Aadd(aRecTrf,(cAliasSRD)->R_E_C_N_O_ )

				EndIf

				If lVerbas
					If !lDtRef .OR. ( Alltrim(RCA->RCA_CONTEU) == "1")
						nPos := Ascan( aVerbasAc, { |X| X[1] = (cAliasSRD)->RD_PD .And. x[4] == (cAliasSRD)->RD_DATARQ })
					Else
						nPos := Ascan( aVerbasAc, { |X| X[1] = (cAliasSRD)->RD_PD .And. x[4] == AnoMes((cAliasSRD)->RD_DTREF) })
					EndIf
					If nPos = 0
						If !lDtRef .OR. ( Alltrim(RCA->RCA_CONTEU) == "1")
							AADD(aVerbasAc, ;
							{(cAliasSRD)->RD_PD, ;
							(cAliasSRD)->RD_HORAS * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							(cAliasSRD)->RD_VALOR * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							(cAliasSRD)->RD_DATARQ } )
						Else
							AADD(aVerbasAc, ;
							{(cAliasSRD)->RD_PD, ;
							(cAliasSRD)->RD_HORAS * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							(cAliasSRD)->RD_VALOR * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							AnoMes((cAliasSRD)->RD_DTREF) } )
						EndIf
					Else
						aVerbasAc[nPos,2]:= aVerbasAc[nPos,2] + (cAliasSRD)->RD_HORAS * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1)
						aVerbasAc[nPos,3]:= aVerbasAc[nPos,3] + (cAliasSRD)->RD_VALOR * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1)
					EndIf
				EndIf
			Else
				If lVerbas  .and. cStrSrv == Nil
					If !lDtRef .OR. ( Alltrim(RCA->RCA_CONTEU) == "1")
						nPos := Ascan( aVerbasAc, { |X| X[1] = (cAliasSRD)->RD_PD .And. x[4] == (cAliasSRD)->RD_DATARQ })
					Else
						nPos := Ascan( aVerbasAc, { |X| X[1] = (cAliasSRD)->RD_PD .And. x[4] == AnoMes((cAliasSRD)->RD_DTREF) })
					EndIf
					If nPos = 0
						If !lDtRef .OR. ( Alltrim(RCA->RCA_CONTEU) == "1")
							AADD(aVerbasAc, ;
							{(cAliasSRD)->RD_PD,;
							(cAliasSRD)->RD_HORAS * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							(cAliasSRD)->RD_VALOR * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							(cAliasSRD)->RD_DATARQ } )
						Else
							AADD(aVerbasAc, ;
							{(cAliasSRD)->RD_PD, ;
							(cAliasSRD)->RD_HORAS * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							(cAliasSRD)->RD_VALOR * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1),;
							AnoMes((cAliasSRD)->RD_DTREF) } )
						EndIf
					Else
						aVerbasAc[nPos,2]:= aVerbasAc[nPos,2] + (cAliasSRD)->RD_HORAS * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1)
						aVerbasAc[nPos,3]:= aVerbasAc[nPos,3] + (cAliasSRD)->RD_VALOR * Iif(RetValSRV((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "2|4" .And. lRetNeg,-1,1)
					EndIf
				EndIf
			EndIf
			dbSelectArea(cAliasSRD)
			dbSkip()
		EndDo
		If lQuery
			If lQuerySRV
				dbSelectArea(cAliasSRV)
				dbCloseArea()
				dbSelectArea("SRV")
			EndIf
			dbSelectArea(cAliasSRD)
			dbCloseArea()
			dbSelectArea("SRD")
		EndIf

	Next nVez

	RestArea(aArea)

	If lVerbas
		Return(aVerbasAc)
	EndIf

	If cRetVH # Nil .And. cRetVH $ "H.D"
		Return(nQtd)
	EndIf

Return(nValor)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fDTrabDsr ºAutor  ³Microsiga           º Data ³  04/09/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FDTRABDSR(dDataref,dDataIni,dDataFim,cSem,cRet)

	Local lUltSemana
	Local nPosSem
	Local nFim
	Local nTotDias
	Local nDiaFinal := f_UltDia(dDataRef)
	Local nValRet 	:= 0
	Local cOldSem 	:= Space(2)
	Local lPerAfas	:= .F.
	Local nCount	:= 0

	Static cMesASem

	DEFAULT cMesASem 	:= "!!!!!!"
	DEFAULT aSemanas 	:= {}

	cOldSem		:= cSemana
	cRet		:= If (cRet == Nil .Or. !cRet$ "N/D/U/S", " ",cRet)
	cSem 		:= If (cSem == Nil .Or. cSem == Space(2), "00",cSem)
	nDTrab 		:= 0
	nDDsr  		:= 0
	nDSab		:= 0
	nDUte		:= 0

	//--Atribui a Semana Solicitada ou 00 para mensalista
	cSemana		:= cSem

	//--Carrega a Semana Somente se Mudar a data de Referencia
	If cMesASem # MesAno(dDataRef) .Or. Empty(aSemanas)
		aSemanas 	:= {}
		//--Funcao para carregar Semana
		fCarSemana(dDataRef,@aSemanas,lUltSemana,nPosSem,.F.)
		cMesASem := MesAno(dDataRef)
	EndIf

	nPos := Ascan( aSemanas, { |X| X[1] == cSem } )
	If nPos > 0

		//-- Verifica se Deve Desprezar o Periodo Inicial e final quando afastamento ou
		//-- se for passado so data fim deve-se contar ate a data final no caso de demissao.
		//--.Or. MesAno(dDataIni) # MesAno(Ctod(aSemanas[ nPos,2],"DDMMYY"))
		If dDataIni = Nil .Or. Empty(dDataIni)
			lPerAfas := .F.
		ElseIf !Empty(dDataIni) .And. dDataFim # Nil
			lPerAfas := .T.
		EndIf

		nDiaFinal := f_UltDia(Ctod(aSemanas[ nPos,3],"DDMMYY"))

		dDataIni    := If (dDataIni == Nil .Or. MesAno(dDataIni) # MesAno(DDataRef),CTOD("01/"+StrZero(Month(dDataRef),2)+"/"+StrZero(Year(dDataref),4),"DDMMYY"),dDataIni)
		dDataFim 	:= If (dDataFim == Nil .Or. MesAno(dDataFim) # MesAno(DDataRef),CTOD(StrZero(nDiaFinal,2)+"/"+StrZero(Month(dDataRef),2)+"/"+StrZero(Year(dDataRef),4),"DDMMYY"),dDataFim)
		dDataFim 	:= If (dDataFim > Ctod(aSemanas[ nPos,3],"DDMMYY"),Ctod(aSemanas[ nPos,3],"DDMMYY"),dDataFim)

		nTotDias := aSemanas[ nPos,5 ]  // Total de Dias da Semana
		nInicio  := 1

		If Day(dDataFim) >= f_UltDia(Ctod(aSemanas[ nPos,3],"DDMMYY"))
			nFim     :=  Len( aSemanas[ nPos,4 ] )
		ElseIf Day(dDataFim) < f_UltDia(dDataRef) .And. ! lPerAfas
			nFim     := Day(dDataFim)
		ElseIf lPerAfas
			nFim     :=  Len( aSemanas[ nPos,4 ] )
		EndIf

		//-- Verifica Admissao no periodo e diminui o numero de dias a ser pesquisado
		If SRA->RA_ADMISSA >= Ctod(aSemanas[ nPos,2],"DDMMYY") .And. SRA->RA_ADMISSA <= Ctod( aSemanas[ nPos,3],"DDMMYY")
			nInicio := nTotDias - ( Ctod(aSemanas[ nPos,3],"DDMMYY")-SRA->RA_ADMISSAO )
		EndIf

		//-- Monta a Data de Inicio da Pesquisa
		dDataDia := (Ctod(aSemanas[ nPos,2],"DDMMYY") + nInicio ) -1
		//-- Verifica os dias de Trab. e Dsr da Semana
		For nCount := nInicio To nFim

			If (lPerAfas .And. (dDataDia < dDataIni  .Or. dDataDia > dDataFim )) ;
			.Or. (! lPerAfas .And. dDataDia <= dDataFim)

				If SubStr( aSemanas[ nPos,4],nCount,1 ) == "S"
					++nDTrab
					If Alltrim(Upper(Cdow(dDataDia))) = "SATURDAY"
						nDSab ++
					Else
						nDUte ++
					EndIf
				Else
					++nDDsr
				EndIf
			EndIf
			dDataDia := Ctod(aSemanas[ nPos,2],"DDMMYY") + nCount

		Next nCount
	EndIf

	//--Prepara a Variavel e retorno conforme o Parametro cRet
	If cRet == "N"  		// Dias Totias Trabalhados no Periodo
		nValRet := nDTrab
	ElseIf cRet == "D"  	// Dias Total de DSR no Periodo
		nValRet := nDDsr
	ElseIf cRet == "U"     	// Dias da Semana/Uteis do Periodo
		nValRet	:= nDUte
	ElseIf cRet == "S"		// Dias de Sabado do Periodo
		nValRet	:= nDSab
	Else
		nValRet:= 0
	EndIf

	//--Retorna a Semana Original do Calculo
	cSemana := cOldSem

Return(nValRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fDsrHrsAtiv ³ Autor ³ Jonatas A. T. Alves   ³ Data ³25/06/07  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calcula DSR e Horas Ativides sobre as medias considerando as ³±±
±±³          ³ verbas que incidem para esses calculos.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fDsrHrsAtiv(cTipMed,aCodFol,cTipTot,nVlDsrProf,nVlHrsAtiv)   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cTipMed = 1=Ferias Venc. 2=FeriaS Prop. 3= 13o. 4=Av.Prev.   ³±±
±±³          ³ aCodfol = Array dos Codigos da Folha                         ³±±
±±³          ³ cTipTot = Qual total deseja somar "99MD" OU '9999'           ³±±
±±³          ³ nVlDsrProf = Valor do DSR de professores                     ³±±
±±³          ³ nVlHrsAtiv = Valor das Horas Atividade de professores        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fDsrHrsAtiv(cTipMed,aCodFol,cTipTot,nVlDsrProf,nVlHrsAtiv,lDissidio)
Local nDsrHrsAtiv 	:= 0
Local lMedFerDsr	:= If(((Alltrim(RetValSRV(aCodfol[33,1],SRA->RA_FILIAL,"RV_MEDFER")) == "N") .Or. Empty(Alltrim(RetValSRV(aCodfol[33,1],SRA->RA_FILIAL,"RV_MEDFER")))), .T., .F.)
Local lMedFerHrs	:= If(((Alltrim(RetValSRV(aCodfol[317,1],SRA->RA_FILIAL,"RV_MEDFER")) == "N") .Or. Empty(Alltrim(RetValSRV(aCodfol[317,1],SRA->RA_FILIAL,"RV_MEDFER")))), .T., .F.)
Local lMed13Dsr 	:= If(((Alltrim(RetValSRV(aCodfol[33,1],SRA->RA_FILIAL,"RV_MED13")) == "N") .Or. Empty(Alltrim(RetValSRV(aCodfol[33,1],SRA->RA_FILIAL,"RV_MED13")))), .T., .F.)
Local lMed13Hrs		:= If(((Alltrim(RetValSRV(aCodfol[317,1],SRA->RA_FILIAL,"RV_MED13")) == "N") .Or. Empty(Alltrim(RetValSRV(aCodfol[317,1],SRA->RA_FILIAL,"RV_MED13")))), .T., .F.)
Local lMedAviDsr	:= If(((Alltrim(RetValSRV(aCodfol[33,1],SRA->RA_FILIAL,"RV_MEDAVI")) == "N") .Or. Empty(Alltrim(RetValSRV(aCodfol[33,1],SRA->RA_FILIAL,"RV_MEDAVI")))), .T., .F.)
Local lMedAviHrs	:= If(((Alltrim(RetValSRV(aCodfol[317,1],SRA->RA_FILIAL,"RV_MEDAVI")) == "N") .Or. Empty(Alltrim(RetValSRV(aCodfol[317,1],SRA->RA_FILIAL,"RV_MEDAVI")))), .T., .F.)
Local lDsrHrsAtiv   := GetMvRH("MV_DSRHATV",,.T.) // Calcula DSR e sobre ele a Hora Atividade
Local lDsrBsHAtv 	:= RetValSRV(aCodFol[033,1],SRA->RA_FILIAL,"RV_HRSATIV") == "S" // Dsr base para Hora atividade
Local lHAtvBsDsr 	:= RetValSRV(aCodFol[317,1],SRA->RA_FILIAL,"RV_DSRPROF") == "S" // Hora atividade base para Dsr
Local aParProf		:= {}

DEFAULT cTipTot		:= "99MD"
DEFAULT nVlDsrProf	:= 0
DEFAULT nVlHrsAtiv	:= 0
DEFAULT lDissidio	:= .F.

	If (SRA->RA_CATFUNC $ "I*J") .And. If( cTipMed == "3", (lMed13Dsr .And. lMed13Hrs), If( cTipMed == "4", (lMedAviDsr .And. lMedAviHrs), (lMedFerDsr .And. lMedFerHrs)))

		aParProf := fParProf()

		nRegAnt := (cTBLXMED)->(Recno())
		(cTBLXMED)->(DbGoTop())

		If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + cTipMed)
			While !(cTBLXMED)->(Eof()) .And. (SRA->RA_FILIAL + SRA->RA_MAT + cTipMed = (cTBLXMED)->RP_FILIAL + (cTBLXMED)->RP_MAT + (cTBLXMED)->RP_TIPO)
				If (cTBLXMED)->RP_PD > "900"
					(cTBLXMED)->(dbSkip())
					Loop
				EndIf
				// Verifica se e o registro de total de medias
				If (cTBLXMED)->RP_DATARQ = cTipTot

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Relaciona verbas para calculo do DSR e Horas Atividade 			³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If RetValSRV((cTBLXMED)->RP_PD,SRA->RA_FILIAL,"RV_DSRPROF") == "S"
						nVlDsrProf += If( !lDissidio, (cTBLXMED)->RP_VALATU, (cTBLXMED)->RP_VALOR)
					EndIf

					If RetValSRV((cTBLXMED)->RP_PD,SRA->RA_FILIAL,"RV_HRSATIV") == "S"
						nVlHrsAtiv += If( !lDissidio, (cTBLXMED)->RP_VALATU, (cTBLXMED)->RP_VALOR)
					EndIf

				EndIf
				(cTBLXMED)->(dbSkip())
			EndDo
		EndIf

		If lDsrHrsAtiv // Calcula DSR e sobre ele a Hora Atividade
			nVlDsrProf := nVlDsrProf * aParProf[2] //Calcula DSR
			nVlHrsAtiv := (nVlHrsAtiv + If(lDsrBsHAtv, nVlDsrProf, 0)) * aParProf[3] //Calcula Horas Atividade
		Else
			nVlHrsAtiv := nVlHrsAtiv * aParProf[3] //Calcula Horas Atividade
			nVlDsrProf := (nVlDsrProf + If(lHAtvBsDsr, nVlHrsAtiv, 0) ) * aParProf[2] //Calcula DSR
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Calculo da Media Total (DSR + Horas Atividade)			      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nDsrHrsAtiv := nVlDsrProf + nVlHrsAtiv
		
		If nDsrHrsAtiv > 0
			GRA_TOT(SRA->RA_MAT,cTipMed,"999","ZZ04",0,nDsrHrsAtiv,nDsrHrsAtiv,"N",0)
		EndIf
		
		(cTBLXMED)->(dbGoTo(nRegAnt))
		
	EndIf

Return(nDsrHrsAtiv)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fDtItens  |Autor  ³ Equipe RH             ³ Data ³ 03/03/08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Preenche campo RH_DTITENS qdo. vazio     			      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEXCAL1/GPEM450/GPEM410									  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fDtItens(lIndividual)

	Local aArea 	:= GetArea()
	Local aAreaSRA 	:= SRA->(GetArea())
	Local cAliasTMP	:= ""	// Alias da query para arquivo temporario(RH_DTITENS)
	Local cQuery	:= ""

	DEFAULT lIndividual := .T.

	dbSelectArea( "SRH" )
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica conteudo do campo RH_DTITENS p/ preencher registros vazios ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If SRH->(FieldPos( "RH_DTITENS" )) # 0
		cAliasTMP 	:= GetNextAlias()
		cQuery 		:= "SELECT RH_FILIAL,RH_MAT,RH_DTITENS,"
		cQuery 		+= "R_E_C_N_O_ AS RECNUM "
		cQuery 		+= "FROM "+ RetSqlName("SRH") + " SRH "

		If lIndividual
			cQuery 		+= "WHERE RH_FILIAL	= '"	+ SRA->RA_FILIAL	+ "' "
			cQuery 		+= "AND RH_MAT		= '"	+ SRA->RA_MAT 		+ "' "
		Else
			cQuery 		+= "WHERE RH_FILIAL	BETWEEN '"	+ cFilDe + "' AND '" + cFilAte + "'"
			cQuery 		+= "AND RH_MAT		BETWEEN '"	+ cMatDe + "' AND '" + cMatAte + "'"
		EndIf

		cQuery 		+= "AND RH_DTITENS = ' ' "
		cQuery		+= "AND SRH.D_E_L_E_T_ = ' ' "

		cQuery 		:= ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasTMP)

		( cAliasTMP )->( dbGoTop() )

		dbSelectArea( "SRH" )

		While !( cAliasTMP )->( Eof() )
			dbGoTo( (cAliasTMP)->(RECNUM) )
			RecLock("SRH",.F.,.T.)
			SRH->RH_DTITENS := SRH->RH_DTRECIB
			SRH->(MsUnlock())
			( cAliasTMP )->( dbSkip() )
		EndDo

		( cAliasTMP )->( dbCloseArea() )
	EndIf

	RestArea(aAreaSRA)
	RestArea(aArea)

Return(NIL)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fDifPensaoSM³ Autor ³ Marcelo Silveira      ³ Data ³03/03/09  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calcula o Percentual e o Valor da Diferenca do Salario Minino³±±
±±³          ³ no calculo da Diferenca de Ferias.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fDifPensaoSM( nSalMins, lValDif, lFolhaN )                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nSalMins = Numero de salarios minimos                        ³±±
±±³          ³ lValDif  = .T. retorna o valor da diferenca                  ³±±
±±³          ³            .F. retorna somente o percentual                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fDifPensaoSM( nSalMins, lValDif )

	Local aAreaAtu := GetArea()
	Local nRegFer  := 0
	Local nSalAtu  := 0
	Local nSalAnt  := 0
	Local nValRet  := 0
	Local nSalDif  := 0
	Local i        := 0
	Local cFolMes  := cPeriodo

	DEFAULT lValDif := .F. //Se verdadeiro retorna o valor da diferenca

	DbSelectArea("SRH")

	For i := 1 To Len( ADIFFER )

		nRegFer  := ADIFFER[i][1]
		SRH->( MsGoto( nRegFer ) )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³	Se houve alteracao no valor do Salario Minino obtem o         ³
		//³	percentual e valor calculado                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If RH_SALMIN # Val_SalMin
			If MesAno(RH_DATAINI) == cFolMes
				nValRet  := ( Min( RH_DFERIAS, 30 ) / 30 )
			Else
				nValRet  := ( Min( nDiasMse, 30 ) / 30 )
			EndIf
			If lValDif
				nSalAtu  := NoRound( Val_SalMin * nSalMins, MsDecimais(1) ) * nValRet //Valor do Salario Atual
				nSalAnt  := NoRound( RH_SALMIN * nSalMins, MsDecimais(1) ) * nValRet //Valor do Salario Anterior pago
				nSalDif  += nSalAtu - nSalAnt
				nValRet  := nSalDif
			EndIf
		EndIf

	Next i

	RestArea( aAreaAtu )

Return( nValRet )

/*/{Protheus.doc} GenAfaInss
Rotina gera os dias de afastamento que foram pagos pelo INSS em verba de base.
@author Claudinei Soares
@since 10/05/2017
@version P12.1.07
@param aDiasInss, array, numero de dias pagos pelo INSS
@return Nil, Valor nulo
/*/
Static Function GenAfaInss(aDiasInss)
	Local aArea		:= GetArea()
	Local cCodVerba	:= ''
	Local cPdMedAfa := If(Type("P_PDMEDAFA") <> "U",P_PDMEDAFA,"")	
	Local nCont		:= 0
	Local nDiasInss := 0
	Local nRefer 	:= 0
	Local nValor 	:= 0
	Local nMedComiss:= 0

	If Len(aDiasInss) <= 0 .Or. Len(aCodFol) < 1420
		Return
	EndIf

	For nCont := 1 To Len(aDiasInss)
		
		If aDiasInss[nCont, 2] == 0 
			LOOP
		EndIf
		
		cCodVerba	:= ''
		If aDiasInss[nCont, 1] == "P1" .Or. Len(aCodFol) < 1432 .Or. (aDiasInss[nCont, 1] == "O1" .And. Empty(aCodFol[1432,1]))
			cCodVerba := aCodFol[1420,1]
		ElseIf aDiasInss[nCont, 1] == "O1"
			cCodVerba := aCodFol[1432,1]
		ElseIf aDiasInss[nCont, 1] == "R " .And. !Empty(aCodFol[1433,1])
			cCodVerba := aCodFol[1433,1]
		EndIf
		If nDiasC == 30 .And. aDiasInss[nCont, 2] > nDiasC
			nDiasInss := nDiasC
		Else
			nDiasInss := aDiasInss[nCont, 2]
		EndIf
		If SRA->RA_CATFUNC == "C"
			If aDiasInss[nCont, 3] > 0
				//Calcula média de comissões do funcionário
				fCMComiss(aCodFol,@nMedComiss,aDiasInss[nCont, 3],,,cPdMedAfa)
				nValor	  := Round(nMedComiss / nDiasC * nDiasInss, MsDecimais(1))
				If aDiasInss[nCont, 1] == "O1"
					//Utiliza a variável nMedComiss para que o valor seja somado a base do FGTS 
					fVarRot("nMedComiss", nValor ,"A")
				EndIf
			EndIf
		Else
			If nDiasInss == nDiasC
				nValor	:= Iif(SALARIO > 0, SALARIO, SalMes)
			Else
				nValor	  := Round(nDiasInss * Iif(SALDOR > 0, SALDOR, SalDia), MsDecimais(1))
			EndIf
			nValor += fBsFgtsAdic(Nil, Nil, nDiasInss)
		EndIf
		If SRA->RA_CATFUNC == "H"
			nRefer	:= Round(nDiasInss * SRA->RA_HRSDIA, MsDecimais(1))
		ElseIf SRA->RA_CATFUNC $ "M*C"
			nRefer	:= 	nDiasInss
		EndIf

		If nValor > 0 .And. !Empty(cCodVerba)
			FMatriz(cCodVerba,nValor,nRefer)
		EndIf
	Next nCont

	RestArea(aArea)
Return Nil

/*/{Protheus.doc} fHrsPon
Calcula as horas do ponto com base no dia de afastamento
@author Claudinei Soares
@since 10/05/2017
@version P12.1.07
@param aDiasInss, array, numero de dias pagos pelo INSS
@return Nil, Valor nulo
/*/
Function fHrsPon(cTipo,nHrsAfas, nDiasAf, dSR8Ini, dSR8Fim, nDiasMax)

	Local aTabPadrao	:= {}
	Local aTabCalend 	:= {}
	Local aTurnos		:= {}
	Local cOrdem		:= '!!'
	Local cOrdAnt		:= '!!'
	Local cFilRegra 	:= ""
	Local cFilTno		:= ""
	Local cfRegra		:= ""
	Local cPagInterv	:= ""
	Local nHrsDia		:= 0
	Local nHrsDsr		:= HrsSem2OneDsr(SRA->RA_HRSEMAN)
	Local nPos			:= 0
	Local nX       		:= 0
	Local nDiasTot		:= 0
	Local lDSRTab		:= SuperGetMv("MV_DSRTAB",, .F.)
	Local lPgDSR		:= .F.
	Local lTrbFeriado	:= .F.
	Local dDtIni		:= CtoD("")
	Local dDtFim		:= CtoD("")
	Local dData    		:= CtoD("")
	Local dbkData		:= CtoD("")

	DEFAULT cTipo	 := ""
	DEFAULT nHrsAfas := 0
	DEFAULT nDiasAf	 := 0
	DEFAULT dSR8Fim  := dDataAte

	If Empty(dSR8Fim)
		dSR8Fim := dDataAte
	EndIf

	Static aTabCalAux	:= {}

	dDtIni:= dDataDe
	dDtFim:= dDataAte

	If MesAno(SRA->RA_ADMISSA) == MesAno(dDtIni) //verifica se funcionario foi admitido no mes
		dDtIni := SRA->RA_ADMISSA
	EndIf

	cSeqTurn := SRA->RA_SEQTURN
	cTno     := SRA->RA_TNOTRAB
	cFilTno	 := fFilFunc("SR6")

	nPos := Ascan(aTabCalAux,{ |x| x[1] == cFilTno .and. x[2] == cTno .and. x[3] == cSeqTurn .and. x[4] == dDtIni .and. x[5] == dDtFim  })

	If nPos == 0
		CriaCalend(dDtIni,dDtFim,cTno,cSeqTurn,aTabPadrao,@aTabCalend,SRA->RA_FILIAL,SRA->RA_MAT,SRA->RA_CC,@aTurnos,NIL,NIL,.F.)
		aAdd(aTabCalAux, {cFilTno, cTno, cSeqTurn, dDtIni, dDtFim, aClone(aTabCalend)})
	Else
		aTabCalend := aClone(aTabCalAux[nPos,6])
	EndIf

	For nX := 1 To Len(aTabCalend)
		dData 	  := aTabCalend[nX,48] //Data de apontamento
		cOrdem 	  := aTabCalend[nX,2]
		cFilRegra := fFilFunc("SPA")

		//-- Verifica se funcionario Trabalha em Feriado
		If cfRegra <> ( cFilRegra + aTabCalend[ nX , 23 ] )
			cFRegra		:= ( cFilRegra + aTabCalend[ nX , 23 ]  )
			lTrbFeriado	:= PosSPA( aTabCalend[ nX , 23 ] , cFilRegra , "PA_FERIADO" , 1 , .F. ) == "S"
			cPagInterv	:= PosSPA( aTabCalend[ nX , 23 ] , cFilRegra , "PA_PAGINT" , 1 , .F. ) == "S"
		EndIf

		If !( aTabCalend[ nX , 48 ] >= dSR8Ini .And. aTabCalend[ nX , 48 ] <= dSR8Fim )
			Loop
		EndIf

		If cOrdAnt <> cOrdem
			cOrdAnt := cOrdem
			nDiasTot++

			If nDiasTot > nDiasMax
				Exit
			EndIf
		EndIf

		//-- Descarta as Horas da Tabela para Dias diferentes de Trabalhado ou DSR
		If !(aTabCalend[ nX , 36 ] $ "S*D")// .AND. !(aTabCalend[ nX , 36 ] == "D" .and. "Q" $ cTipo)
			Loop
		EndIf

		If dData <> dbkData
			lPgDSR := .T.
			nDiasAf ++
		EndIf

		//Feriados tornam-se DSR e devem ser contados nas horas do mes.
		If ((aTabCalend[ nX , 06 ] == "D" .OR. aTabCalend[ nX , 06 ] == "F") .Or. ( cTipo == "F" .Or. "Q" $ cTipo .And. aTabCalend[ nX , 36 ] == "D" .OR. aTabCalend[ nX , 36 ] == "F")) .And. lPgDSR
			//Caso o parametro esteja ativo e seja um feriado, considera as horas previstas para o dia
			If aTabCalend[ nX , 06 ] == "F" .And. lDSRTab
				nHrsDia := 0
				aEval( aTabCalend, { |x| If( x[2] == cOrdem, nHrsDia := SomaHoras( nHrsDia, x[7] ), Nil ) } )
				If nHrsDia > 0
					nHrsAfas := SomaHoras( nHrsAfas, nHrsDia )
				Else
					nHrsAfas := SomaHoras( nHrsAfas, nHrsDSR )
				EndIf
				//Caso contrario, considera as horas de um DSR comum
			Else
				nHrsAfas := SomaHoras(nHrsAfas, nHrsDsr)
			EndIf
		ElseIf !Empty(aTabCalend[nX,7]) .AND. !(aTabCalend[ nX , 06 ] $ "D*F*C")
			nHrsAfas	:= SomaHoras(nHrsAfas,aTabCalend[nX,7])
		EndIf

		dbkData:= dData
		lPgDSR := .F.

	Next nX

Return .T.

/*/{Protheus.doc} fDsrConv
Verifica se deve obter o DSR da semana
@author Leandro Drumond
@since 10/09/2018
@version P12.1.17
@return Quantidade de DSR na convocação
/*/
Static Function fDsrConv(nDSRProp,dIniConv,dFimConv)
	Local aAuxConv := {}
	Local nRet	   := nDSRProp
	Local nX	   := 0
	Local dFimSem  := dFimConv + ( 7 - dow(dFimConv) ) //Sábado da semana de convocação
	Local dIniSem  := ( dFimSem - dow(dFimSem) ) + 1 //Domingo da semana de convocação
	Local lOk	   := .F.
	Local lSoma	   := .T.
	Local nDsrAnt  := 0

	Static cFuncConv
	Static aFuncConv

	If cFuncConv <> SRA->(RA_FILIAL+RA_MAT) .or. aFuncConv == Nil
		aFuncConv := BuscaConv(dDataDe, dDataAte)
		cFuncConv := SRA->(RA_FILIAL+RA_MAT)
	EndIf

	aAuxConv := aClone(aFuncConv)

	If ( dFimSem - dIniSem ) < 7 .And. ( AnoMes(dFimSem+1) == cPeriodo .Or.  Anomes(dFimConv) == cPeriodo ) //Convocacão termina antes do domingo e domingo ainda esta no mesmo período
		
		For nX := 1 to Len(aAuxConv)
			If lOk
				//Se a próxima convocação começar na mesma semana, não soma DSR, se for em semana diferente, soma DSR.
				If aAuxConv[nX,2] <= dFimSem + 1 .And. ( dIniConv >= dIniSem .Or. nRet > 0)
					lSoma := .F.
				EndIf
				Exit
			Else
				If aAuxConv[nX,3] == dFimConv
					lOk := .T.
					If !Empty(aAuxConv[nX,8]) .And. aAuxConv[nX,8] > dFimConv
						lSoma := .F.
					EndIf
				EndIf
			EndIf
		Next nX
		If lSoma
			nRet++
		EndIf
		//Verifica se já existe DSR pago na semana para outras convocações.
		//Quando o intermitente é semanalista, o cadastro de períodos é unico para cada convocação. Logo, não dá pra saber se haverá convocações futuras para a mesma semana.
		//Com isso, caso exista mais de uma convocação para a mesma semana, o DSR será pago na primeira convocação e nas demais, não será pago.
		If SRA->RA_TIPOPGT == "S"
			nDsrAnt := aScan(aPd,{|X| X[1]==aCodFol[33,1] .And. X[3] <> cSemana .And. X[9] # "D" .and. X[18] >= dIniSem .And. X[18] <= dFimSem})
			If nDsrAnt > 0
				nRet --
			EndIf
		EndIf
	EndIf

Return nRet
