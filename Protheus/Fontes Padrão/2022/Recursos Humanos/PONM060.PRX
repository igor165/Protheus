#INCLUDE "PONM060.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "HEADERGD.CH"
#INCLUDE "FWMVCDEF.CH"

Static lPnm060CposBlock
Static lPn060SRAAbono
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONM060  ³ Autor ³ Fernando Joly Siquini ³ Data ³ 22/09/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Abono Coletivo                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso  	 ³ SIGAPON													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Mauricio MR ³26/12/01³Acerto³  Correcao para considerar TpMarca e C.C. ³±±
±±³            ³------  ³------³  na Geracao e Eliminacao dos Abonos.     ³±±
±±³            ³        ³      ³  Inclusao da IDTpMarca().	              ³±±
±±³=======================================================================³±±
±±³                         *** Versao 7.10 ***                           ³±±
±±³=======================================================================³±±
±±³Leandro Dr. ³13/04/14³      ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³        ³      ³que nao serao utilizados na P12.		    ³±±
±±³Emerson Camp³05/08/14³TQEQEB³Aplicação do MsAdvSize de forma correta   ³±±
±±³            ³        ³      ³removendo os valores de dimensão chumbados³±±
±±|Luis Artuso ³06/02/15³TRLZ43³Ajuste para restringir a visualizacao de  ³±±
±±|            ³        ³      ³de eventos que  o usuario nao possua 	  ³±±
±±|            ³        ³      ³acesso. 								  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONM060(aAutoItens)

Local aArea			:= GetArea()
Local aSays			:= {}
Local aButtons		:= {}
Local aColsMark		:= {}
Local cSvFilAnt		:= cFilAnt
Local lMarcar     	:= .F.
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjCoords	 := {}
Local aObjSize		:= {}
Local aColsAux		:= {}
Local aBotoes		:= {}
Local bSet15
Local bSet24
Local cPerg			:= "PON060M"
Local cFiltro		:= ""
Local cWhere		:= ""
Local cKeyAux		:= ""
Local lBarG1ShowTm 	:= ( SuperGetMv("MV_PNSWTG1",NIL,"N") == "S" )
Local lBarG2ShowTm 	:= ( SuperGetMv("MV_PNSWTG2",NIL,"S") == "S" )
Local nOpcA			:= 0
Local nX			:= 0
Local nPosAcols		:= 0
Local nPosBusca		:= 1
Local oDlg
Local aEmpUser		:= {}
Local cEmpAut		:= ""
Local aAvFields		:= {} //campos exibidos em tela a serem avaliados pelo gerenciamento de dados sensiveis
Local aPDFields		:= {} //campos que estao classificados como dados sensiveis
Local aOfuscaCpo	:= {}
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local nX			:= 0
Local nPos			:= 0

Private aGdAltera	:= {}
Private aHeader		:= {}
Private aCols		:= {}
Private nLastRec	:= 0
Private oGet
Private lAbortPrint := .F.
Private lAutoExec	:= .F.
Private cCadastro   := OemToAnsi(STR0001 ) // 'Abono Coletivo'

DEFAULT lPnm060CposBlock	:= ExistBlock( "PNM060CPOS" )
DEFAULT lPn060SRAAbono		:= ExistBlock( "PNM060SRA"  )
DEFAULT aAutoItens			:= {}

lAutoExec := !Empty(aAutoItens)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ So Executa se os Modos de Acesso dos Arquivos Relacionados es³
³ tiverm OK.												   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ValidArqPon()
	If !lAutoExec
		aAdd(aSays,OemToAnsi( STR0003 ) )// 'Este programa tem  como  objetivo  gerar  Abonos para  os  Eventos '
		aAdd(aSays,OemToAnsi( STR0004 ) )// 'escolhidos, no intervalo de Datas e Funcion rios parametrizado.    '

		aAdd(aButtons, { 1,.T.,{|o| nOpcA := 1,FechaBatch() }} )
		aAdd(aButtons, { 2,.T.,{|o| nOpcA := 0,FechaBatch() }} )

		FormBatch( cCadastro, aSays, aButtons )
	EndIf
	
	If nOpca == 0 .And. !lAutoExec
		Return
	EndIf
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carregando as Perguntas 								       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pergunte(cPerg,.T.)
		Return
	EndIf

	nLimpGer   := mv_par01   //1 - Gera Abono  | 2 - Limpa Abono
	cTipoAbono := If(mv_par02==1,"G",If(mv_par02==2,"I","G.I")) //Tipos de Abonos : 1 - Gerado      | 2 - Informado    | 3 - Ambos
	cSituacao  := mv_par07
	cCategoria := mv_par08
	dDataIni   := mv_par09
	dDataFim   := mv_par10
	lSobrepoe  := If(mv_par12==1, .T., .F.)
	nTipoAbon  := mv_par13
	nHoraAbon  := mv_par14
	
	If !lAutoExec
		If Empty(nLimpGer)
			Help( ,, STR0002,, STR0020, 1, 0 )//"Tipo de Processamento deve ser informado"
			Return .F.
		EndIf

		If Empty(dDataIni) .or. Empty(dDataFim)
			Help( ,, STR0002,, STR0021, 1, 0 )//"Data Inicial e Final devem ser preenchidas"
			Return .F.
		EndIf

		If nTipoAbon == 2 .and. nHoraAbon == 0
			Help( ,, STR0002,, STR0008, 1, 0 )//"Para abono parcial deve ser informado as 'Horas de Abono Parcial'"
			Return .F.
		EndIf
	EndIf

	aEmpUser	:= FWEmpLoad() // A funcao 'FwEmpLoad' retorna para o array 'aEmpUser' quais as empresas/filiais que o usuario tem acesso.
	
	// Carrega as filiais que o usuário tem acesso
	For nX	:= 1 To Len(aEmpUser)
		If aEmpUser[nX, 1] == cEmpAnt
			cEmpAut	+= "'" + aEmpUser[nX, 3] + "',"
		EndIf
	Next nX
	cEmpAut := Left(cEmpAut, Len(cEmpAut) - 1)
	
	If !( Empty(cEmpAut))
		
		cSituacao := fSqlIn(StrTran(MV_PAR07, '*'), 1)
		cCategoria := fSqlIn(StrTran(MV_PAR08, '*'), 1)
		
		MakeSqlExpr(cPerg)
		
		// Filiais que o usuário tem acesso
		cWhere := "RA_FILIAL IN (" + cEmpAut + ") AND "
		
		// Filiais selecionadas nas perguntas
		If !Empty(mv_par03)
			cWhere +=  mv_par03 + " AND "
		EndIf
		
		If !Empty(mv_par04)
			cWhere += mv_par04 + " AND "
		EndIf
		
		If !Empty(mv_par05)
			cWhere += mv_par05 + " AND "
		EndIf
		
		If !Empty(mv_par06)
			cWhere += mv_par06 + " AND "
		EndIf
		
		If !Empty(mv_par15)
			cWhere += mv_par15 + " AND "
		EndIf
		
		cWhere += "RA_CATFUNC IN (" + UPPER(cCategoria) + ") AND "
		cWhere += "RA_SITFOLH IN (" + UPPER(cSituacao) + ") AND "
		
		If !Empty(mv_par11)
			cWhere += mv_par11 + " AND "
		EndIf
		
		cWhere := "%" + cWhere + "%"
		
		cAliasQry := GetNextAlias()
		
		BeginSql Alias cAliasQry
			SELECT DISTINCT(PC_PD),RA_FILIAL,RA_MAT,RA_NOME
			FROM 	%table:SRA% SRA
			INNER JOIN %table:SPC% SPC
				ON RA_FILIAL = PC_FILIAL
				AND RA_MAT = PC_MAT
			WHERE %exp:cWhere%
				PC_DATA BETWEEN %exp:DtoS(dDataIni)% AND %exp:DtoS(dDataFim)% AND
				SRA.%NotDel% AND SPC.%NotDel%
			ORDER BY RA_FILIAL, RA_MAT, PC_PD
		EndSql

		While (cAliasQry)->(!Eof())
			(cAliasQry)->(aAdd(aCols,{RA_FILIAL,RA_MAT,RA_NOME,PC_PD,Space(3),.F.}))
			(cAliasQry)->(DbSkip())
		EndDo

		(cAliasQry)->(DbCloseArea())

	EndIf

	If Empty(aCols)
		Help( ,, STR0002,, STR0009, 1, 0 )//"Nenhum evento encontrado com os filtros informados"
		Return .F.
	EndIf

	If !lAutoExec
		aAdvSize		:= MsAdvSize(  , .T. , 390)
		aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
		aAdd( aObjCoords , { 000, 005, .T. , .F. } )
		aAdd( aObjCoords , { 000, 000, .T. , .T. } )
		aObjSize := MsObjSize( aInfoAdvSize , aObjCoords )

		DEFINE MSDIALOG oDlg FROM aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] Title cCadastro Pixel style DS_MODALFRAME  //"Abono Coletivo "
			Pnm060MntHeader(@aHeader)

			oGet := MsNewGetDados():New(aObjSize[2,1],;	// nTop
										aObjSize[2,2],;   // nLelft
										aObjSize[2,3],;	// nBottom
										aObjSize[2,4],;	// nRright
										GD_INSERT + GD_UPDATE + GD_DELETE,;		// controle do que podera ser realizado na GetDado - nstyle
										"Pnm060LinOk",;	// funcao para validar a edicao da linha - ulinhaOK
										"Pnm060TudOk",;	// funcao para validar todas os registros da GetDados - uTudoOK
										NIL,;				// cIniCPOS
										NIL,;				// aAlter
										0,; 				// nfreeze
										99999,;  			// nMax
										NIL,;		 		// cFieldOK
										NIL,;				// usuperdel
										.T.,;				// udelOK
										@oDlg,;        	// objeto de dialogo - oWnd
										@aHeader,;			// Vetor com Colunas - AparHeader
										@aCols;			// Vetor com Header - AparCols
										)

			bSet15	:= {|| nOpca:=1, If(oGet:TudoOk(),(aCols:=oGet:aCols,oDlg:End()),nOpca:=0)}
			bSet24	:= {|| nOpca:=0, oDlg:End()}
			aAdd( aBotoes, { 'ABOLOT', { || fAboLot() }, STR0010, STR0010 } )// 'Abono em Lote' string

		//Proteção de Dados Sensíveis
		If aOfusca[2]
			aOfuscaCpo := {.F.,.F.,.F.,.F.,.F.}
			aAvFields  := {"RA_FILIAL","RA_MAT","RA_NOME","PC_PD","PC_ABONO"}
			aPDFields := FwProtectedDataUtil():UsrNoAccessFieldsInList(  aAvFields )
			oGet:oBrowse:lObfuscate := .T.
			For nX := 1 to Len(aPDFields)
				nPos := aScan(aAvFields, {|x| x == aPDFields[nX]:cField})
				aOfuscaCpo[nPos] := .T.
			Next nX
			oGet:oBrowse:aObfuscatedCols := aOfuscaCpo
		EndIf

		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg , bSet15 , bSet24,, aBotoes ) CENTERED
	Else
		For nX := 1 To Len(aAutoItens)
			nPosAcols := aScan(aCols,{|x| x[1] == aAutoItens[nX,1] .And. x[2] == aAutoItens[nX,2] .And. x[4] == aAutoItens[nX,3] .And. Empty(x[5])})
			If nPosAcols > 0
				aCols[nPosAcols,5] := aAutoItens[nX,4]
			EndIf
		Next
	EndIf

	If nOpca == 1 .Or. lAutoExec
		//Retira os itens deletados do aCols
		aColsAux := {}
		For nX := 1 to Len(aCols)
			If nLimpGer == 1 .and. Empty(aCols[nX,5])
				Loop
			EndIf
			If cKeyAux <> aCols[nX,1] + aCols[nX,2]
				nLastRec++
				cKeyAux := aCols[nX,1] + aCols[nX,2]
			EndIf

			If !aCols[nX,6]
				aAdd(aColsAux,aCols[nX])
			EndIf
		Next nX
		aCols := aColsAux
		If lAutoExec
			PNM060Proc()
		Else
			Proc2BarGauge( { ||PNM060Proc() } , STR0005 , NIL , NIL , .T. , lBarG1ShowTm , lBarG2ShowTm ) // 'Gera‡„o de Abonos Coletivos'
		EndIf
	EndIf

EndIF

cFilAnt := cSvFilAnt

RestArea( aArea )

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONM060Processa ³ Autor ³ Fernando Joly  ³ Data ³ 22/09/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Processa o Abono de Horas                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso  	 ³ SIGAPON							             			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function PNM060Proc()

Local aAbonos		:= {}     //--  Array com os Abonos de um determinado Apontamento
Local aArea			:= {}
Local aInfo			:= {}
Local aRecsBarG		:= {}
Local cAcessaSRA	:= &("{ || " + ChkRH("PONM060","SRA","2") + "}")
Local cChave		:= ""      //--  Armazena campos chaves para efeito de pesquisa no SPK
Local cChave1		:= ""      //--  Armazena campos chaves para efeito de pesquisa no SPC
Local cCodABO		:= ""      //--  Contem o codigo do primeiro abono remanescente para atualizar o apontamento
Local cSvFilAnt		:= cFilAnt
Local cLastFil		:= "__cLastFil__"
Local cMsgBarG1		:= ""
Local cTimeIni		:= Time()
Local cMsgErr		:= ""
Local cFilMat		:= ""
Local dDataAtu		:= Ctod("//")
Local lFoundAbono	:= .F.		//--  Indica que existe abono remanescente para o Apontamento qdo da Eliminacao
Local nExistAb		:= 0.00		//-- Existe evento para o abono (0=Default).
Local nX			:= 0.00
Local nHorasAbono	:= 0.00		//--  Variavel auxiliar para calculo de horas abonadas
Local naAbonos		:= 0.00		//--  Qtde de Abonos
Local nIncPercG1	:= 0.00
Local nIncPercG2	:= 0.00
Local nRecsBarG		:= 0.00
Local nPosSRA		:= 0
Local uRet			:= NIL

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seta as Ordens do SPC e do SRA                               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SPC->( dbSetOrder(1) ) //-- PC_Filial + PC_MAT + PC_PD + DtoS(PC_DATA)
SRA->( dbSetOrder(1) ) //-- RA_Filial + RA_Mat

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Atualiza a Mensagem para a IncProcG1() (Cadastro de Empresas)³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CREATE SCOPE aInfo FOR ( M0_CODIGO == cEmpAnt )
If !lAutoExec
	BarGauge1Set( ( nRecsBarG := SM0->( ScopeCount( aInfo ) ) ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa a Mensagem para a IncProcG2() ( Funcionarios )	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IncProcG2( OemToAnsi( STR0012 ) , .F. )	//'Processando...'

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa a Regua para a IncProcG2() ( Funcionarios )	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	BarGauge2Set( nLastRec )
EndIf

Begin Sequence
    //Corre todos os funcionarios marcados
	For nPosSRA := 1 to Len(aCols)
		If cFilMat <> aCols[nPosSRA,1] + aCols[nPosSRA,2]
			cFilMat := aCols[nPosSRA,1] + aCols[nPosSRA,2]
			SRA->(DbSeek(cFilMat))
		EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega as Filiais e Periodos de Apontamento                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	    IF !( cLastFil == SRA->RA_FILIAL )
	    	cLastFil := SRA->RA_FILIAL
	    	cFilAnt	 := IF( !Empty( cLastFil ) , cLastFil , cFilAnt )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem o % de Incremento da 2a. BarGauge					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			nIncPercG1 := SuperGetMv( "MV_PONINC1" , NIL , 5 , cLastFil )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem o % de Incremento da 2a. BarGauge					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			nIncPercG2 := SuperGetMv( "MV_PONINCP" , NIL , 5 , cLastFil )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Atualiza a Mensagem para a IncProcG1() ( Turnos )			   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			fInfo( @aInfo , cLastFil )
			cMsgBarG1 := (  STR0013 + " " + cLastFil + " - " + AllTrim( aInfo[3] ) ) ////"Filial:"
			
			If !lAutoExec
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Inicializa Mensagem na 1a BarGauge                           ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IncProcG1( cMsgBarG1 , .F.  )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Incrementa a Barra de Gauge referente a Filial				   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IncPrcG1Time( cMsgBarG1 , nRecsBarG , cTimeIni , .F. , 1 , nIncPercG1 )
			EndIf
	    EndIF
		
		If !lAutoExec
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Movimenta a R‚gua de Processamento                           ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IncPrcG2Time( OemToAnsi( STR0019 ) , nLastRec , cTimeIni , .T. , 2 , nIncPercG2 )	//"Processados:"
		EndIF
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Consiste controle de acessos e filiais validas               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If SRA->( !(RA_FILIAL $ fValidFil()) .Or. !Eval(cAcessaSRA) )
			Loop
		EndIf

	    /*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Ponto de Entrada Para Tratar Funcionario 					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lPn060SRAAbono )
			IF ( ValType( uRet := ExecBlock( "PNM060SRA",.F.,.F.)) == 'L')
				IF !uRet
					SRA->(dbSkip())
					Loop
				EndIF
				uRet	:= NIL
			EndIF
		Endif

	    /*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Gera Abono Coletivo de acordo com os paramentros passados    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If nLimpGer==1
		   /*
		   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		   ³ Verifica se existem marca‡”es no SPC                         ³
		   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If SPC->(dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + aCols[nPosSRA,4], .F. ) )
				While SPC->(! Eof() .And. PC_FILIAL + PC_MAT + PC_PD == SRA->RA_FILIAL + SRA->RA_MAT + aCols[nPosSRA,4] )
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Aborta o processamento									   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					IF ( lAbortPrint )
						Break
					EndIF

					 //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					 //³ Consiste filtro De/At‚ ( SPC )                               ³
					 //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					 If SPC->PC_DATA < dDataIni .Or. SPC->PC_DATA > dDataFim
						SPC->(dbSkip())
						Loop
					 EndIf

					 //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					 //³ Consiste se o Apontamento com Codigo e/ou a Quantidade Informada  nao pode ser     ³
					 //³ abonado                                                                            ³
					 //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !Empty(SPC->PC_QUANTI)
						SPC->(dbSkip())
						Loop
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Consiste SobreGrava‡„o de Abonos ( SPC )                     ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aAbonos:={}
					nExistAb := fAbonos(SPC->PC_DATA,SPC->PC_PD,,@aAbonos,SPC->PC_TPMARCA,SPC->PC_CC)
					If !lSobrePoe .And. nExistAb >0
						SPC->(dbSkip())
						Loop
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Define o N£mero de Horas a ser Abonado                       ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If nTipoAbon == 1 //-- Abono Integral
						nNumH := SPC->PC_QUANTC
					Else //-- Abono Parcial
						nNumH := Min(SPC->PC_QUANTC,nHoraAbon)
					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Processa a Grava‡„o do Motivo e Horas do Abono               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !RecLock('SPC', .F.)
						SPC->(dbSkip())
						Loop
					EndIf

					SPC->PC_QTABONO := nNumH
					SPC->PC_ABONO   := aCols[nPosSRA,5]

					SPC->( MsUnLock() )

			        naAbonos:=Len(aAbonos)
				    //-- Corre Todos os Abonos do Apontamento e Deleta-os
				    For nX:=1 To naAbonos
				        //-- Posiciona no Registro Segundo aAbonos[,8]
						SPK->(DbGoto(aAbonos[nX,8]))
						IF !RecLock('SPK',.F.,.T.)
							Loop
						EndIF
						IF !SPK->( FkDelete( @cMsgErr ) )
							SPK->( RollBackDelTran( cMsgErr ) )
						EndIF
						SPK->( MsUnlock() )
				    Next nX

					//Inclui Novo Abono
					IF RecLock('SPK',.T.)
						SPK->PK_FILIAL	:= SRA->RA_FILIAL
						SPK->PK_MAT		:= SRA->RA_MAT
						SPK->PK_DATA	:= SPC->PC_DATA
						SPK->PK_CODEVE	:= SPC->PC_PD
						SPK->PK_CODABO	:= aCols[nPosSRA,5]
						SPK->PK_HRSABO	:= nNumH
			        	SPK->PK_HORINI  := 0.00
				    	SPK->PK_HORFIM  := 0.00
                    	SPK->PK_FLAG    := "G"
                    	SPK->PK_CC      := SPC->PC_CC
                    	SPK->PK_TPMARCA := SPC->PC_TPMARCA
						SPK->( MsUnLock() )
					EndIF

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Seleciona o Pr¢ximo Evento                                   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					SPC->(dbSkip())
		  		EndDo
			EndIf
		Else
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Limpa Abonos de acordo com os parametros passados           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			//Posiciona no arquivo de Abonos
			dbSelectArea('SPK')
			dbSetOrder(1)   //Filial+Mat+Dtos(Data)+PK_CODABO
			//Inicializa a variavel auxiliar para preencher em brancos o campo Motivo do Abono SPC->PC_ABONO (SPK->PK_CODABO)
			cLimpaMotAbo:=CriaVar('PK_CODABO',.T.)

			//Monta Chave de acordo com as opcoes desejadas
            cChave := ( xFilial( "SPK" , SRA->RA_FILIAL ) + SRA->RA_MAT )

			If dbSeek(cChave)

			    //Corre Todos os Abonos da Chave Filial+Matricula+Abono
				While SPK->( !Eof() .And. cChave == ( PK_FILIAL + PK_MAT ) )

					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Aborta o processamento									   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					IF ( lAbortPrint )
						Break
					EndIF

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Consiste filtro De/At‚ ( SPK )                               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If SPK->PK_DATA < dDataIni .Or. SPK->PK_DATA > dDataFim
						SPK->(dbSkip())
						Loop
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Consiste se o TIPO ABONO pertence ao Parametrizado ( SPK )   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !(SPK->PK_FLAG$cTipoAbono)
						SPK->(Dbskip())
						Loop
					Endif

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Processa Limpeza de Abonos³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				    //Bloqueia registro de abono
				    IF !RecLock('SPK',.F.)
						SPK->(Dbskip())
						Loop
				    EndIF

				    //Posiciona no Apontamento que Gerou o Abono a ser Eliminado
				    dbSelectArea('SPC')
				    dbSetOrder(1)

					//Monta Chave1 de acordo com as opcoes desejadas
					cChave1    := ( xFilial( 'SPC' , SRA->RA_FILIAL ) + SRA->RA_MAT + SPK->PK_CODEVE + Dtos(SPK->PK_DATA)+ SPK->PK_TPMARCA + SPK->PK_CC )

					//Procura pelo Apontamento que gerou o(s) Abono(s) a ser(rem) eliminado(s)
					//Bloqueia Apontamento e "Atualiza" campos sobre o abono a ser eliminado
					If dbSeek(cChave1) .and. RecLock('SPC', .F.)

						//Calcula horas abonadas para o evento
						nHorasAbono:=Max(0,SubHoras(SPC->PC_QTABONO,SPK->PK_HRSABO))
						SPC->PC_QTABONO := nHorasAbono
						//Se o Qtde de Horas abonadas for reduzida a zero "nao deve haver" mais registros de abonos
						//para o evento abonado
						//Limpa a referencia ao abono no Apontamento(SPC)
						If Empty(nHorasAbono)
							SPC->PC_ABONO := cLimpaMotAbo
						Endif

						//Verifica se ha outros Abonos remanescentes no SPK
						//para atualizar o codigo do abono no SPC.

						//Posiciona no arquivo de Abonos
						dbSelectArea('SPK')
						//Armazena status da Area SPK (Area,Ordem e Registro corrente)
						aArea := GetArea()

						//-- Obtem Abonos de Acordo com o Apontamento Bloqueado
						aAbonos:={}
						nExistAb := fAbonos(SPC->PC_DATA,SPC->PC_PD,,@aAbonos,SPC->PC_TPMARCA,SPC->PC_CC)
						naAbonos:=Len(aAbonos)
						//-- Corre Todos os Abonos do Apontamento
						cCodABO		:=cLimpaMotAbo  //-- Inicializa com BRANCO
						For nX:=1 To naAbonos
							//-- Verifica se ha outro abono que nao seja o que foi lido
							//-- e que pertenca ao mesmo apontamento
							If aAbonos[nX,8] <> aArea[3]
								cCodABO		:=aAbonos[nX,1]	//-- Substitui BRANCO pelo Codigo do Abono
							Endif
						Next nX
						//-- Atualiza o apontamento com BRANCO(Se somente existia um abono para o apontamento)
						//-- ou com o Codigo do primeiro abono remanescente
						dbSelectArea('SPC')
						SPC->PC_ABONO := cCodABO

						//Libera bloqueio
						SPC->( MsUnLock() )

						//Posiciona no arquivo de Abonos (SPK) na ordem e registro original
						RestArea(aArea)
					Endif

					//Reposiciona no Abono a ser Eliminado
					dbSelectArea('SPK')
					IF !SPK->( FkDelete( @cMsgErr ) )
						SPK->( RollBackDelTran( cMsgErr ) )
					EndIF
					SPK->( MsUnlock() )

					SPK->( DbSkip() )
				EndDo
			EndIf
			//Restaura Area Principal
			dbSelectArea('SRA')
		EndIf

	Next nPosSRA

End Sequence

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a integridade dos arquivos utilizados               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea('SPC')
dbSetOrder(1)

dbSelectArea('SRA')
dbSetOrder(1)

cFilAnt := cSvFilAnt

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fValidAbon      ³ Autor ³ Fernando Joly  ³ Data ³ 23/09/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Verifica a existencia do Motivo de Abono                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAPON                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cMot := Caracter, com 3 posi‡”es para o Motivo de Abono    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fValidAbon(cMot)

Local lRet      := .T.
Local nSP6Recno := SP6->(Recno())
Local nSP6Order := SP6->(IndexOrd())

If ValType(cMot) == 'U'
	cMot := &(ReadVar())
EndIf

If Empty(cMot)
	Help(' ',1,'NVAZIO')
	Return( .F. )
EndIf

SP6->(dbSetOrder(1))

If !SP6->(dbSeek(xFilial('SP6')+cMot, .F.))
	lRet := .F.
EndIf

//-- Retorna a Integridade do arquivo SP6
SP6->(dbSetOrder(nSP6Order))
SP6->(dbGoto(nSP6Recno))

Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fValidHora      ³ Autor ³ Fernando Joly  ³ Data ³ 23/09/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Verifica a digita‡„o de Horas em perguntas                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAPON                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nHor := Num‚rico, com 5 posi‡”es e 2 decimais para a Hora  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fValidHora(nCampo)

Local nHoras	:= 0
Local nMinutos := 0
Local lRet		:= .T.

If ValType(nCampo) == 'U'
	nCampo := &(ReadVar())
EndIf

nHoras	:= Val(Left (StrZero(nCampo,5,2),2))
nMinutos := Val(Right(StrZero(nCampo,5,2),2))

If nMinutos < 0 .Or. nMinutos > 59 .Or. ;
	nHoras < 0 .Or. nHoras > 23
	lRet := .F.
EndIf

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pnm060MntHeader³ Autor ³ Leandro Drumond    ³ Data ³ 13/03/14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta aHeader para utilizacao na tela.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Pnm060MntHeader(aHeader)
Local nPos	:= 0

aHeader := {}

aAdd(aHeader,{})

nPos := Len(aHeader)

aHeader[nPos]:= Array( __ELEMENTOS_AHEADER__ )
aHeader[nPos , __AHEADER_TITLE__	]	:= STR0011 //Filial
aHeader[nPos , __AHEADER_FIELD__	]	:= "FILIAL"
aHeader[nPos , __AHEADER_PICTURE__	]	:= "@!"
aHeader[nPos , __AHEADER_WIDTH__	]	:= FwSizeFilial()
aHeader[nPos , __AHEADER_DEC__		]	:= 0
aHeader[nPos , __AHEADER_VALID__	]	:= ""
aHeader[nPos , __AHEADER_USE__		]	:= Chr(251)
aHeader[nPos , __AHEADER_TYPE__		]	:= "C"
aHeader[nPos , __AHEADER_F3__		]	:= ""
aHeader[nPos , __AHEADER_CONTEXT__	]	:= "R"
aHeader[nPos , __AHEADER_CBOX__		]	:= ""
aHeader[nPos , __AHEADER_INITPAD__	]	:= ""
aHeader[nPos , __AHEADER_WHEN__		]	:= ""
aHeader[nPos , __AHEADER_VISUAL__	]	:= "V"
aHeader[nPos , __AHEADER_VLDUSR__	]	:= ""
aHeader[nPos , __AHEADER_RESERV16__	]	:= ""
aHeader[nPos , __AHEADER_RESERV17__	]	:= .F.

aAdd(aHeader,{})

nPos := Len(aHeader)

aHeader[nPos]:= Array( __ELEMENTOS_AHEADER__ )
aHeader[nPos , __AHEADER_TITLE__	]	:= STR0014 //"Matricula"
aHeader[nPos , __AHEADER_FIELD__	]	:= "MAT"
aHeader[nPos , __AHEADER_PICTURE__	]	:= "@!"
aHeader[nPos , __AHEADER_WIDTH__	]	:= TamSX3("RA_MAT")[1]
aHeader[nPos , __AHEADER_DEC__		]	:= 0
aHeader[nPos , __AHEADER_VALID__	]	:= ""
aHeader[nPos , __AHEADER_USE__		]	:= Chr(251)
aHeader[nPos , __AHEADER_TYPE__		]	:= "C"
aHeader[nPos , __AHEADER_F3__		]	:= ""
aHeader[nPos , __AHEADER_CONTEXT__	]	:= "R"
aHeader[nPos , __AHEADER_CBOX__		]	:= ""
aHeader[nPos , __AHEADER_INITPAD__	]	:= ""
aHeader[nPos , __AHEADER_WHEN__		]	:= ""
aHeader[nPos , __AHEADER_VISUAL__	]	:= "V"
aHeader[nPos , __AHEADER_VLDUSR__	]	:= ""
aHeader[nPos , __AHEADER_RESERV16__	]	:= ""
aHeader[nPos , __AHEADER_RESERV17__	]	:= .F.

aAdd(aHeader,{})

nPos := Len(aHeader)

aHeader[nPos]:= Array( __ELEMENTOS_AHEADER__ )
aHeader[nPos , __AHEADER_TITLE__	]	:= STR0015 //"Nome"
aHeader[nPos , __AHEADER_FIELD__	]	:= "NOME"
aHeader[nPos , __AHEADER_PICTURE__	]	:= "@!"
aHeader[nPos , __AHEADER_WIDTH__	]	:= TamSX3("RA_NOME")[1]
aHeader[nPos , __AHEADER_DEC__		]	:= 0
aHeader[nPos , __AHEADER_VALID__	]	:= ""
aHeader[nPos , __AHEADER_USE__		]	:= Chr(251)
aHeader[nPos , __AHEADER_TYPE__		]	:= "C"
aHeader[nPos , __AHEADER_F3__		]	:= ""
aHeader[nPos , __AHEADER_CONTEXT__	]	:= "R"
aHeader[nPos , __AHEADER_CBOX__		]	:= ""
aHeader[nPos , __AHEADER_INITPAD__	]	:= ""
aHeader[nPos , __AHEADER_WHEN__		]	:= ""
aHeader[nPos , __AHEADER_VISUAL__	]	:= "V"
aHeader[nPos , __AHEADER_VLDUSR__	]	:= ""
aHeader[nPos , __AHEADER_RESERV16__	]	:= ""
aHeader[nPos , __AHEADER_RESERV17__	]	:= .F.

aAdd(aHeader,{})

nPos := Len(aHeader)

aHeader[nPos]:= Array( __ELEMENTOS_AHEADER__ )
aHeader[nPos , __AHEADER_TITLE__	]	:= STR0022 //"Evento"
aHeader[nPos , __AHEADER_FIELD__	]	:= "EVENTO"
aHeader[nPos , __AHEADER_PICTURE__	]	:= "@!"
aHeader[nPos , __AHEADER_WIDTH__	]	:= TamSX3("PC_PD")[1]
aHeader[nPos , __AHEADER_DEC__		]	:= 0
aHeader[nPos , __AHEADER_VALID__	]	:= ""
aHeader[nPos , __AHEADER_USE__		]	:= Chr(251)
aHeader[nPos , __AHEADER_TYPE__		]	:= "C"
aHeader[nPos , __AHEADER_F3__		]	:= ""
aHeader[nPos , __AHEADER_CONTEXT__	]	:= "R"
aHeader[nPos , __AHEADER_CBOX__		]	:= ""
aHeader[nPos , __AHEADER_INITPAD__	]	:= ""
aHeader[nPos , __AHEADER_WHEN__		]	:= ""
aHeader[nPos , __AHEADER_VISUAL__	]	:= "V"
aHeader[nPos , __AHEADER_VLDUSR__	]	:= ""
aHeader[nPos , __AHEADER_RESERV16__	]	:= ""
aHeader[nPos , __AHEADER_RESERV17__	]	:= .F.

aAdd(aHeader,{})

nPos := Len(aHeader)

aHeader[nPos]:= Array( __ELEMENTOS_AHEADER__ )
aHeader[nPos , __AHEADER_TITLE__	]	:= STR0023 //"Motivo Abono"
aHeader[nPos , __AHEADER_FIELD__	]	:= "MOTIVO"
aHeader[nPos , __AHEADER_PICTURE__	]	:= "@!"
aHeader[nPos , __AHEADER_WIDTH__	]	:= TamSX3("P6_CODIGO")[1]
aHeader[nPos , __AHEADER_DEC__		]	:= 0
aHeader[nPos , __AHEADER_VALID__	]	:= "NaoVazio() .and. ExistCpo('SP6')"
aHeader[nPos , __AHEADER_USE__		]	:= Chr(251)
aHeader[nPos , __AHEADER_TYPE__		]	:= "C"
aHeader[nPos , __AHEADER_F3__		]	:= "SP6"
aHeader[nPos , __AHEADER_CONTEXT__	]	:= "R"
aHeader[nPos , __AHEADER_CBOX__		]	:= ""
aHeader[nPos , __AHEADER_INITPAD__	]	:= ""
aHeader[nPos , __AHEADER_WHEN__		]	:= ""
aHeader[nPos , __AHEADER_VISUAL__	]	:= "A"
aHeader[nPos , __AHEADER_VLDUSR__	]	:= ""
aHeader[nPos , __AHEADER_RESERV16__	]	:= ""
aHeader[nPos , __AHEADER_RESERV17__	]	:= .F.

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pnm060LinOk    ³ Autor ³ Leandro Drumond    ³ Data ³ 13/03/14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ LinOk da grid.						                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Pnm060LinOk()

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pnm060TudOk    ³ Autor ³ Leandro Drumond    ³ Data ³ 13/03/14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ TudOk da grid.						                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Pnm060TudOk()
Local nX 		:= 0
Local lRet 		:= .T.
Local lPergunta	:= .F.

Begin Sequence

	For nX := 1 to Len(aCols)
		If nLimpGer == 1 .and. Empty(aCols[nX,5])
			lPergunta := .T.
		EndIf
	Next nX

	If lPergunta
		If !MsgYesNo( STR0024 ) //"Existem eventos cujo motivo de abono não foram informados, se prosseguir, estes eventos não serão abonados. Continua?"
			lRet := .F.
		EndIf
	EndIf

End Sequence

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fAboLot        ³ Autor ³ Leandro Drumond    ³ Data ³ 16/03/14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Efetua abono em lote.				                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function fAboLot()
Local nOpca			:= 0
Local nX			:= 0
Local oDlg
Local oMotivo
Local oEvento
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjCoords	:= {}
Local aObjSize		:= {}

Private cMotivo		:= Space(3)
Private cEvento		:= Space(3)

aAdvSize		:= MsAdvSize(  , .T. , 390)
aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
aAdd( aObjCoords , { 000, 005, .T. , .F. } )
aAdd( aObjCoords , { 000, 000, .T. , .T. } )
aObjSize := MsObjSize( aInfoAdvSize , aObjCoords )

Define MsDialog oDlg FROM aAdvSize[7],0 TO aAdvSize[6]-250,aAdvSize[5]-20 Title cCadastro Pixel style DS_MODALFRAME  //"Abono Coletivo "

	@ aObjSize[2,1]   , aObjSize[2,2] SAY STR0025 SIZE 60,10 OF oDlg PIXEL  //"Motivo de Abono"
	@ aObjSize[2,1]   , aObjSize[2,4]*0.18 MSGET oMotivo 	VAR cMotivo VALID ExistCpo('SP6') F3 "SP6" SIZE 60,10 OF oDlg PIXEL HASBUTTON

	@ aObjSize[2,1]   , aObjSize[2,4]*0.50 SAY STR0026 SIZE 60,10 OF oDlg PIXEL  //"Evento Abonado"
	@ aObjSize[2,1]   , aObjSize[2,4]*0.66 MSGET oEvento 	VAR cEvento VALID ExistCpo('SP9') F3 "SP9" SIZE 60,10 OF oDlg PIXEL HASBUTTON

	bSet15	:= {|| nOpca:=1, If(fVldAboLot(cMotivo,cEvento),oDlg:End(),Nil)}
	bSet24	:= {|| nOpca:=0, oDlg:End()}

ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 ) CENTERED

If nOpca == 1
	For nX := 1 to Len(oGet:aCols)
		If oGet:aCols[nX,4] == cEvento
			oGet:aCols[nX,5] := cMotivo
		EndIf
	Next nX
	oGet:ForceRefresh()
EndIf

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fVldAboLotºAutor  ³Leandro Drumond     º Data ³  16/03/14   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida abono em lote.                                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³PONM060                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fVldAboLot(cMotivo, cEvento)
Local lRet	:= .T.

If Empty(cMotivo)
	Help( ,, STR0002,, STR0027, 1, 0 )//"Informe o motivo de abono"
	lRet := .F.
ElseIf Empty(cEvento)
	Help( ,, STR0002,, STR0028, 1, 0 )//"Informe o código do evento"
	lRet := .F.
EndIf

Return lRet
