#INCLUDE "PROTHEUS.CH"
#INCLUDE "GPEA1010.CH"
#INCLUDE "HEADERGD.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "FWBROWSE.CH"
#INCLUDE "FILEIO.CH"
#Include "MSOle.ch"

Static lGp010FimPe  := ExistBlock("GP010FIMPE")
Static lGpe10Hist 	:= ExistBlock("GPE10HIST")
Static lGpe10AltS 	:= ExistBlock("GPE10ALTS")
Static lGpe10Menu 	:= ExistBlock("GPE10MENU")
Static lIntegDef 	:= FindFunction("GETROTINTEG") .And. FindFunction("FWHASEAI")
Static lErpLogi		:= SuperGetMv("MV_ERPLOGI",,"2") == "1"
Static cContrMat  	:= SuperGetMv("MV_MATRICU",NIL,"0")
//Para uso eSocial - verificacao nivel dos campos necessarios
//Integração com o TAF
Static lIntTAF		:= ((SuperGetMv("MV_RHTAF",, .F.) == .T.) .AND. Val(SuperGetMv("MV_FASESOC",/*lHelp*/,' ')) >= 1 )
Static lMiddleware	:= If( cPaisLoc == 'BRA' .AND. Findfunction("fVerMW"), fVerMW(), .F. )
Static aSocialNiv	:= If( cPaisLoc == 'BRA', If(Findfunction("fGM17Nivel"),fGM17Nivel("GPEA010"), {.F.,""}),{.F.,""})
Static FocoAnterior	:= ""
Static FocoAntADCINS:= .F.
Static cAA1Fil		:= ""
Static lInteRHAA1	:= If(FindFunction("IntegRHAA1"),IntegRHAA1(),.F.)
Static lVldCtr		:= SuperGetMv("MV_VLDCTR",,.F.) //Define se valida preenchimento do campo Data de Termino de Contrato quando Tipo de Contrato = 2.
Static lEFDMsg		:= SuperGetMv("MV_EFDMSG",,.F.)
Static lRetific		:= SuperGetMv("MV_RETSOC",,.F.)
Static cNTSV		:= SuperGetMv("MV_NTSV",,"")
Static cVersEnvio	:= ""
Static cVersGPE   	:= ""
Static lNT15		:= .F. // NT 15/2019
Static lGera2300	:= .T.
Static aTabS130	 	:= {}
Static lParcial		:= .F.
Static lVerRJ5 		:= If(IsInCallStack("MATA020"), .F. , FindFunction("fVldObraRJ") .And. (fVldObraRJ(@lParcial, .F.) .And. !lParcial))
Static lGpe10InNG	:= SUPERGETMV('MV_RHNG', .F., .F.)
Static aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[2]Ofuscamento
Static cVerTaf		:= StrTran(StrTran(SuperGetMv("MV_TAFVLES",, "2.4"), "_", "."), "0", "", 1, 2)
Static lOpeSoc		:= SuperGetMv("MV_OPESOC", NIL, .F.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍ»±±
±±³Funcao    ³ GPEA010  ³Autor  ³J. Ricardo         v.I           ³ Data ³13/10/1992³±±
±±³          ³          ³       ³Marinaldo de Jesus v.II          ³      ³04/02/2004³±±
±±³          ³          ³       ³Raquel Hager       v.III         ³      ³22/04/2013³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ³±±
±±³Descricao ³ Cadastramento de Funcionarios                                        ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Sintaxe   ³ GPEA010()                                                            ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Uso       ³ Generico                                                             ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRUCAO INICIAL                     ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Programador ³ Data   ³ FNC            ³  Motivo da Alteracao                     ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Raquel Hager³22/04/13³M12RH01    RQ007³Prj. Unificacao das Folhas de Pagamento.  ³±±
±±³Raquel Hager³24/04/13³M12RH01    RQ007³Correcao no uso do obj. oBrwSRA e libera- ³±±
±±³            ³        ³                ³cao do campo RA_PROCES para edicao na     ³±±
±±³            ³        ³                ³integracao ORGxRSP.                       ³±±
±±³C. Olivieri ³19/07/13³M12RH01   RQ0313³Compatibilizacao de fontes + Adicionadas  ³±±
±±³            ³        ³                ³funcoes WHEN para os campos: RA_PERICUL,  ³±±
±±³            ³        ³                ³RA_INSMAX.                                ³±±
±±³Raquel Hager³11/09/13³M12RH01    RQ007³Compatibilizacao com ver. 11.80 = funcao  ³±±
±±³            ³        ³                ³fValTermCt e chamada da funcao CalcSDI p/ ³±±
±±³            ³        ³                ³o Mexico na funcao Gpea010FunVld.         ³±±
±±³Raquel Hager³25/09/13³M12RH01    RQ007³Compatibilizacao com ver. 11.80 = funcao  ³±±
±±³            ³        ³                ³AjusClvl.Tratamento ID 891(cat.func E/G) e³±±
±±³            ³        ³                ³para Gestao Publica na gravacao da SRF.   ³±±
±±³Emerson Camp³22/02/14³       003155_01³Adaptação do fonte para disponibilizar    ³±±
±±³            ³        ³                ³a cópia de funcionários                   ³±±
±±³Raquel Hager³19/03/14³M12RH01         ³Ajustes devido acesso a rotina de Copia   ³±±
±±³            |        |RHU210_03_14    |pela rotina gpea11(Gestao de Funcionario).³±±
±±³Cecilia C.  ³31/03/14³M_RH003         ³Ajuste na integracao SIGAORG com modulos  ³±±
±±³            |        |315701          |SIGACSA, SIGATRM, SIGARSP, SIGAGPE.       ³±±
±±³Cecilia C.  ³10/04/14³TPCJMG          ³Ajuste na valdacao do campo RA_CATFUNC pa_³±±
±±³            ³        ³9097/2014       ³ra nao ocorrer error.log.                 ³±±
±±³Cecilia C.  ³14/05/14³M_RH003         ³Ajustes nas fucoes para nao verifica os   ³±±
±±³            ³        ³297401          ³campos RA_INSMIN e RA_INSMED.             ³±±
±±³Raquel Hager³05/06/14³TPTBN8          ³Inclusao de replicas versao 11 com itens  ³±±
±±³            ³        ³                ³do eSocial.                               ³±±
±±³Emerson Camp³31/07/14³          TQETRU³Removido o Static da função FSraSenha()   ³±±
±±³            ³        ³                ³pois ela é utilizada por outros fontes    ³±±
±±³Renan Borges³28/08/14³          TQGQIE³Ajuste para procurar fornecedor na tabela ³±±
±±³            ³        ³                ³de historico de planos de saude quando não³±±
±±³            ³        ³                ³encontrar na tabela de planos de saudes a-³±±
±±³            ³        ³                ³tivos.                                    ³±±
±±³Emerson Camp³29/08/14³          TQJPMV³Ajustado a alimentação dos campos RA_SENHA³±±
±±³            ³        ³                ³e RD0_SENHA                               ³±±
±±³Raquel Hager³04/09/14³TQMIX9          ³Remocao de Fatos Relevantes(922)/ eSocial.³±±
±±³Sidney O.   ³04/09/14³TPZDWG          ³Alteracao no preenchimento automatico da .³±±
±±³            ³        ³                ³insalubridade                            .³±±
±±³Gustavo M.  ³19/09/14³TQPFGL          ³Ajuste na verificacao da existencia da va.³±±
±±³            ³        ³                ³riavel cArmCodRd0                        .³±±
±±³Gustavo M.  ³24/09/14³TQPRW5          ³Ajuste para verificacao do relacionamento.³±±
±±³            ³        ³                ³SRAxRD0.                                  ³±±
±±³Alberto M.  ³21/11/14³TQZFU2          ³Ajuste na verificacao da existencia da va.³±±
±±³            ³        ³                ³riavel cArmCodRd0                         ³±±
±±³Wag Mobile  ³06/01/15³TRFGQH          ³Ajuste na validacao da alteracao da funcao³±±
±±³            ³        ³                ³na integracao com o TSA.                  ³±±
±±³Luis Artuso ³22/01/15³TQTDMS          ³Ajuste para remover a validacao do campo  ³±±
±±³            ³        ³                ³RA_DTFIMCT para permitir campo vazio mesmo³±±
±±³            ³        ³                ³com o tipo de contrato 2.					³±±
±±³Flavio Corr ³19/03/15³PCREQ-4163      ³Integração Mensagem Unica                 ³±±
±±³Christiane V³09/04/15³PCREQ-2663      ³Consistência da Existência de Plano Saúde ³±±
±±³            ³        ³                ³ao alterar o campo RA_PLSAUDE.            ³±±
±±³Gabriel A.  ³12/05/15³PCREQ-2679      ³Alterações realizadas para vincular o     ³±±
±±³            ³        ³                ³fonte ao requisito.                       ³±±
±±³Gabriel A.  ³13/05/15³PCDEF-31989     ³Alterações realizadas para vincular o     ³±±
±±³            ³        ³                ³fonte ao requisito PCDEF-31989.           ³±±
±±³Christiane V³02/07/15³TSMUY2          ³Adaptações para versão 2.0 do eSocial     ³±±
±±³Renan Borges|10/07/15|TSPBC2          |Ajuste para validar sequencia do turno, no³±±
±±³            |        |                |Brasil, no cadastro de funcionários corre-³±±
±±³            |        |                |tamente, mesmo quando o parâmetro         ³±±
±±³            |        |                |MV_USESPJ estiver como 0, já que não é uti³±±
±±³            |        |                |lizado para o Brasil.                     ³±±
±±³Flavio Corr.³20/07/15³PCREQ-4161      ³Alterações para gerar Browse com Visao e  ³±±
±±³            ³        ³                ³Grafico para a workarea                   ³±±
±±³Mariana M   |12/08/15|TSXYQP          |Ajuste na função GpA_MedOdo para validar o³±±
±±³            |        |                |relatorio GPER008 quando for user function³±±
±±³Marcos Perei|21/09/15|PCREQ-5349      |Compatibilização Folha Pública.           ³±±
±±³Allyson M.  |16/10/15|TTPMJ1          |Ajuste p/ sempre executar a integracao com³±±
±±³            |        |                |o TSA na alteracao do funcionario.        ³±±
±±³Claudinei S.|21/10/15|TTBXDR          |Ajuste para validar o tempo de contrato,  ³±±
±±³            |        |                |para atender a lei 12.395/2011 (Lei Pele).³±±
±±³            |        |                |Contratos Determinados de ate 5 anos.     ³±±
±±³Gustavo M.  |30/11/15|PCDEF-86092     |Ajuste para corrigir error.log no reajuste³±±
±±³            |        |                |salarial							        ³±±
±±³Matheus M.  |07/12/15|TTZK83          |Tratativa para verificar se a base possui ³±±
±±³            |        |                |GFP (Gestão de Folha Pública).            ³±±
±±³Matheus M.  |22/12/15|TTZZ94          |Ajuste na inicialização da variável 	    ³±±
±±³            |        |                |cArmCodRd0 na função Gpea010COP para não  ³±±
±±³            |        |                |gerar erro ao copiar um funcionário.	 	³±±
±±³Cícero Alves|06/01/16|PCREQ-9091      |Controle para verificar a readmissão.     ³±±
±±³Renan Borges|15/01/16|TUDNMJ          |Ajuste para validar os dados corretamente ³±±
±±³            |        |                |na importação realizada pelo Mile da roti-³±±
±±³            |        |                |na GPEA010 e ajuste para importar com as  ³±±
±±³            |        |                |filiais pre-definidas.                    ³±±
±±³Matheus M.  |22/01/16|TTQAXT          |Verifica se está sendo utilizado via Roti-³±±
±±³            |        |                |automática e vem do portal Rotina eSocial ³±±
±±³Claudinei S.|22/01/16|TTXJGG          |Ajuste em GpA_MedOdo() para considerar o  ³±±
±±³            |        |                |relatorio GPER014 Acumulados Plano Saude. ³±±
±±³Flavio C.   |11/03/16|TUPVIS          |Correção lSrarelRD0 para não exibir tela  ³±±
±±³            |        |                |e no valid do campo Periculosidade para   ³±±
±±³            |        |                |não gravar valor se estiver com 2=não     ³±±
±±³Flavio C.   |30/03/16|TUOLTP          |Valid para verificar se pode alterar a dt ³±±
±±³            |        |                |de admissao, podendo alterar o periodo    ³±±
±±³            |        |                |aquisitivo na SRF                         ³±±
±±³Flavio C.   |04/04/16|TUURKK          |Correção variavel cIntegra                ³±±
±±³Victor A.   |29/04/16|TUXYB9          |Alterado nomenclatura da variável         ³±±
±±³            |        |                |bGPE010bAdd para bGP010Add.               ³±±
±±³Raquel Hager|12/05/16|TVAYRM          |Criação da função f010CBO() para valida-  ³±±
±±³            |        |                |ção do gatilho no campo RA_CODFUNC.       ³±±
±±³Raquel Hager|30/05/16|TUZFT1          |Atribuido conteudo default para os campos ³±±
±±³            |        |                |horas de periculosidade/insalubridade.    ³±±
±±³Raquel Hager|02/06/16|TVDMW8          |Ajuste para troca de msAlert para Help()./³±±
±±³            |        |                |Inclusao da funcao de validação do eSocial³±±
±±³            |        |                |na confirmação do cadastro.               ³±±
±±³Raquel Hager|09/06/16|TVJGVA          |Incluida função fSalWhen() utilizada no   ³±±
±±³            |        |                |campo RA_SALARIO.                         ³±±
±±³Allyson M.  |17/06/16|TVIBRQ          |Ajuste na exibicao das informações do     ³±±
±±³            |        |                |estagiário quando efetuar transferência.  ³±±
±±|Esther V.   |21/06/16|TVMDKA          |Ajuste para incluir a validacao do campo  |±±
±±|            |        |                |RA_DTFIMCT quando MV_VLDCTR = .T. e o Tipo|±±
±±|            |        |                |de Contrato 2.							|±±
±±|Esther V.   |06/07/16|TVMDKA          |Correcao da localizacao da validacao.     |±±
±±|Claudinei S.|06/07/16|TUQEO7/TUHOIB   |Ajuste p/ validar a existencia das funcoes|±±
±±|            |        |                |de integracao com o Totvs Reserv.         |±±
±±³Matheus M.  |14/07/16|TVISLW          |Ajuste no help de alteração salarial.     ³±±
±±³Raquel Hager|19/07/16|TVQMMO          |Ajuste na função Gp010ExAlt para não reali³±±
±±³            |        |                |zar validação se campos não estiverem na  ³±±
±±³            |        |                |enchoice.                                 ³±±
±±ºM. Camargo  ³05/05/16³TVOXVG          ³Ajustes Localización Republica Dominicana	³±±
±±º            ³        ³                ³Gen de Mov en Tray Lab 01,02 y 03. Gravar ³±±
±±º            ³        ³                ³R3_ANTEAUM = RA_ANTEAUM.					³±±
±±|Esther V.   |28/07/16|TVMDKA          |Correcao da localizacao da validacao.     |±±
±±|Cícero Alves|05/08/16|TVNVM9          |Incluída validação para o campo RA_CATFUNC|±±
±±|			   |		| 		         |Quando utilizado no cadastro de autonomos |±±
±±³Cícero Alves|04/08/16|TVTFCP          |Ajuste para passar a empresa correta na   ³±±
±±³            |        |                |chamada da função fGetPessoa				³±±
±±³Cícero Alves|05/08/16|TVTBIJ			 |Ajuste para não considerar campos virtuais³±±
±±³            |        |                |da tabela SRB ao copiar um funcionário	³±±
±±³João Balbino|10/08/16|TVTJFA			 |Ajuste na função do gatilho da função para³±±
±±³            |        |                |alterar respeitar o parâmetro MV_ALTSAL.  ³±±
±±³Cícero Alves|23/08/16|TVTBIJ			 |Ajuste para não considerar campos virtuais³±±
±±³            |        |                |da tabela SRB ao copiar um funcionário	³±±
±±³João Balbino|06/09/16|TVZTV4			 |Ajuste na função GPEA010MNT para exibir   ³±±
±±³            |        |                |log de inconcistência quando execução for ³±±
±±³            |        |                |automática                                ³±±
±±³Cícero Alves|16/09/16|TWBHUG			 |Ajuste no gatilho do campo RA_CODFUNC		³±±
±±³Cícero Alves|27/09/16|TWCZH8			 |Ajuste para sempre atualizar o campo 		³±±
±±³            |        |                |RA_CODCBO quando a função for alterada    ³±±
±±³            |        |                |independente do parametro MV_ALTSAL		³±±
±±ºjonathan glz³30/09/16³TWEPU2          ³Se crea funcion ValidRUT() para chile paraº±±
±±º            ³        ³                ³validar que el rut no se repita, pues soloº±±
±±º            ³        ³                ³se puede tener un RUT por Empres.         º±±
±±º            ³        ³                ³Se agrega a rutina Gpea010Mnt para validarº±±
±±º            ³        ³                ³al momento de incluir, modificar o copiar º±±
±±ºjonathan glz³30/09/16³TWERP1          ³Adecuacion funcion ValidRUT() para chile. º±±
±±º            ³        ³                ³Se mete adecuacion para cuando la funcion º±±
±±º            ³        ³                ³GPEA010 se llama de GPEA011 y validar la  º±±
±±º            ³        ³                ³reactivacion de un empleado finiquitado.  º±±
±±ºAlf. Medrano³02/12/15³PCREQ-7944      ³Generación de días derecho para Chile V12 º±±
±±ºAlf. Medrano³07/01/16³PCREQ-7944      ³Merge v12.1.7 vs v12.1.9  Tratamiento de  º±±
±±º            ³        ³                ³GFP (Gestão de Folha Pública). Chile V12  º±±
±±ºM.Camargo   ³09/02/16³pcdef2015_2016  ³Cambio funciones fsalvas y VldRADtCol     º±±
±±º            ³        ³-2041           ³}País Colombia                            º±±
±±ºM.Camargo   ³29/02/16³pdr_ser_mi002-54³Localización Colombia: Cambios varias     º±±
±±º            ³        ³                ³funciones GPEA010MTO, gpea010Grv,GravaRCP º±±
±±º            ³        ³                ³GP010ALTSAL,GP010GETSAL                   º±±
±±³Matheus M.  |25/10/16|TWHYZY			   |Ajuste para chamar o P.E GP010FIMPE na op-³±±
±±³            |        |                |ção de cópia de funcionários.		     	³±±
±±ºAlf. Medrano³24/11/16³MMI-4222        ³Merge v12.1.9 vs 12.1.14 cambios COL y CHIº±±
±±³Marcelo F.  |09/01/17|MRH-4506        |Melhoria para tratar o controle automatico³±±
±±³            |        |                |de matricula por grupo de empresas.     	³±±
±±³Eduardo K.  |13/02/17|MPRIMESP-295    |Ajuste de arredondamento de casas decimais³±±
±±³            |        |                |que causava inconsistencia no Oracle	    ³±±
±±³Isabel N.   |07/03/17|MRH-7349        |Ajuste no nome dos campos RA_DTISINF e    ³±±
±±³            |        |                |RA_ADMISSA, conforme cadastrados no ATUSX.³±±
±±³Marcos Cout.|06/04/17|DRHESOCP-78     |Ajustes na validação dos campos para o    ³±±
±±³ e Eduardo  |        |                |E-Social (Layout 2.2)                     ³±±
±±³Isabel N.   |12/04/17|DRHPONTP-176    |Criação da função fGrinrai() para validar ³±±
±±³            |        |                |a obrigatoriedade do campo RA_GRINRAI.    ³±±
±±³Marcia Moura³27/04/2017³DRHESOCP-38   ³Integracao do TAF - registro s2200        ³±±
±±³Claudinei S.|28/04/17|MRH-482         |Ajuste em Gpea010Grv() para gravar os dias³±±
±±³            |        |                |de direito em caso de regime parcial.     ³±±
±±³Marcia Moura|02/05/17|DRHESOCP-215    |Apenas para gerar o pacote                ³±±
±±³Marcos Cout ³09/05/17³DRHESOCP-225    ³Realizar a geração do evento S-2300       ³±±
±±³            ³        ³                ³Compatibilização do eSocial p layout2.2.01³±±
±±³Marcia Moura³10/05/17³DRHESOCP-98     ³Realizar a geração do evento S-2206       ³±±
±±³Marcos Cout.³11/05/17³DRHESOCP-237    ³Realizar os ajustes necessarios para cri- ³±±
±±³            ³        ³                ³ação do evento S-2300 no cad. Estagiario  ³±±
±±³Marcos Cout.³12/05/17³DRHESOCP-249 ³  ³Realizar os ajustes necessarios para cri- ³±±
±±³            ³        ³                ³ação do evento S-2306 no Cad. Funcionario ³±±
±±³Paulo O.    |17/05/17|DRHPAG-1371     |Ajuste para correção de error log         ³±±
±±³Marcos Cout.³19/05/17³DRHESOCP-278 ³  ³Corrigir chamada da tela auxiliar de esta-³±±
±±³            ³        ³                ³giario. CatFunc = E*G e CatEFD = 901      ³±±
±±³Marcos Cout.³29/05/17³DRHESOCP-308 ³  ³Adicionado a mensagem de geração do evento³±±
±±³            ³        ³                ³com sucesso no TAF. Ajustes diversos      ³±±
±±³Cícero Alves|31/05/17|DRHPAG-2457     |Retirada a chamada da função IncAfast		³±±
±±³Marcos Cout |12/06/17|DRHESOCP-384    |War Room (1a Semana) + Merge              ³±±
±±³            |        |                |Foi revisto os comenstários para os tipos ³±±
±±³            ³        ³                ³de alteração. Foi Revisto a chamada da    ³±±
±±³            ³        ³                ³função de TSV (S-2300). Foi ajustado nome ³±±
±±³            |        |                |da função de fIntTSV para fInt2300 para   ³±±
±±³            ³        ³                ³manter o padrão. Ajustado errorlog na vari³±±
±±³            ³        ³                ³avel lAltCon.                             ³±±
±±³Marcos Cout.³13/06/17³DRHESOCP-363    ³Realizado ajuste necessário para que todos³±±
±±³            ³        ³                ³os campos obrigatórios para o eSocial apa-³±±
±±³            ³        ³                ³reçam na mensagem de confirmação. Realiza-³±±
±±³            ³        ³                ³do ajuste para tratar STATUS "4"          ³±±
±±³Esther V.   |13/06/17|DRHPONTP-886    |Ajuste na busca visão do tipo comunicação ³±±
±±³            |        |                |quando utilizado controle de postos.      ³±±
±±³Isabel N.   |22/06/17|DRHPONTP-926    |Condicionada validação do relacionamento  ³±±
±±³            |        |                |SRAxSQG ao excluir registro da SRA; Ajuste³±±
±±³            |        |                |em Gpea010Grv() p/atualizar currículo.    ³±±
±±³Willian U.  |17/07/17|DRHPONTP-927    |Alterado a validação do campo RA_ANTEAUM  ³±±
±±³            |        |                |na alteração para não disparar o erro     ³±±
±±³            |        |                |GPETIPOALT indevidamente.                 ³±±
±±³Marcos Cout |20/07/17|DRHESOCP-403    |Realizado ajustes necessários para que o  ³±±
±±³            |        |                |evento S-2205 seja gerado corretamente p/ ³±±
±±³            |        |                |para registros de Trabalhador S Vinculos  ³±±
±±³            |        |                |Ajustado a chamada da funcao fGP10eSoci   ³±±
±±³            |        |                |somente quanto existe a integração ativa  ³±±
±±³            |        |                |Realizado ajustes para validar também os  ³±±
±±³            |        |                |campos quando o func é estagiário         ³±±
±±³Marcos Cout |26/07/17|DRHESOCP-674    |Realizado ajustes para que o registro com ³±±
±±³            |        |                |origem através da cópia de outro (nOpc==7)³±±
±±³            |        |                |seja integrado corretamente na inclusao   ³±±
±±³Oswaldo L   |03/08/17| DRHESOCP-755   |Merge e-social 11.80 e 12.1.17            ³±±
±±³Eduardo V   |15/08/17| DRHESOCP-878   |Inclusão de "RA_OBSDEFI" na funcao fAltCad³±±
±±³Eduardo V   |21/08/17|DRHESOCP-899 	 |Trat. no campo RA_TPCONTR, onde em caso do³±±
±±³Eduardo V   |		|			 	 |mesmo esteja vazio,preencher com "1" o xml³±±
±±³Marcos Cout |24/08/17|DRHESOCP-898    |Foi realizado os ajustes necessários para ³±±
±±³            |        |                |que o parametro MV_EFDAVIS seja sempre con³±±
±±³            |        |                |_sultado para validação. Ao inves de ser  ³±±
±±³            |        |                |consultado somente quando MV_RHTAF = .T.  ³±±
±±³Cícero Alves|01/09/17|DRHPAG-256		 |Inclusão de msg para cadastro do histórico³±±
±±³            |		|				 |de contratos, Funcionário Residen. Exter. ³±±
±±³Cecilia C   |06/09/17| DRHESOCP-1009  |Inclusão de "RA_DTINCON" na funcao fAltCad³±±
±±³Eduardo V   |08/09/17| DRHESOCP-1061  |Tratativa de campo "RA_DESEPS" para alerta³±±
±±|Marcos Cout.|08/09/17|DRHESOCP-887    |Unificação das rotinas de integração dos  ³±±
±±|            |        |                |trabalhadores. Ajustada rotina fintAdmiss ³±±
±±³Eduardo V   |11/09/17| DRHESOCP-1093  |Tratativa de campo "RA_DESEPS" quando o   ³±±
±±³            |        |                |mesmo sofre uma alteração                 ³±±
±±³Marcos Cout |14/09/17| DRHESOCP-1018  |Adicionando a regra de validação de layout³±±
±±³            |        |                |corrente no ambiente (TAF x GPE)          ³±±
±±³Marcos Cout |15/09/17|DRHESOCP-1117   |Realizar ajustes necessários para que o   ³±±
±±³            |        |                |código unico do trabalhador seja enviado  ³±±
±±³            |        |                |para um trabalhador que ja tenha tido o   ³±±
±±³            |        |                |evento S-2190 gerado previamente.         ³±±
±±³Marcos Cout |19/09/17|DRHESOCP-1117   |Realizado ajustes para correção de error  ³±±
±±³            |        |                |log ao comparar os releases do eSocial    ³±±
±±³Marcos Cout |29/09/17| DRHESOCP-1374 |Realizar ajustes p geração do evento S-2399³±±
±±³            |        |                |Removida condição de SRA_SITFOL <> D,     ³±±
±±³            |        |                |adicionada o nOPC vindo na tela corrente p³±±
±±³            |        |                |ra tratativa de ERRORLOG, Tratada mensagem³±±
±±³            |        |                |de integração dos eventos de TSV. Tratado ³±±
±±³            |        |                |cenário para geração de S-2399 ou S-3000  ³±±
±±³Eduardo V   |11/09/17| DRHESOCP-1447  |Acerto de campos para o array e ra_sitfol ³±±
±±³Eduardo K.  |17/10/17|MPRIMESP-11802  |Removida obrigatoriedade de preenchimento ³±±
±±³            |        |                |do campo RA_DTCPEXP conforme leiaute -    ³±±
±±³            |        |                |2.4 eSocial.   							³±±
±±³Joao Balbino|10/11/17|MPRIMESP-12158  |Ajuste na finção GPE010FUNVLD para que na ³±±
±±³            |        |                |alteração não subscreva o salário alterado³±±
±±³Oswaldo L   |22/11/17|DRHPAG-8144     |Sincronizar\Corrigir gatilhos Funcao\Cargo³±±
±±³Oswaldo L   |11/12/17|DRHPAG-9345     |Tratativa do Tp.Contrato Intermitente     ³±±
±±³Marcos Cout |16/12/17|DRHPAG-9726     |Tratativa no retorno da pesquisa se o func³±±
±±³            |        |                |possui ou não dados de rescisão. Ajuste   ³±±
±±³            |        |                |pontual para não impactar fontes da fase4 ³±±
±±³Jaqueline L |03/01/18|DRHPAG-10987    |Conversão do campo RA_ADMISS para DTOS    ³±±
±±³            |        |                |para evitar problema nos painéis.         ³±±
±±³Marcos Cout |04/01/18|DRHESOCP-2649   |Bloqueado o acesso a função de validação d³±±
±±³            |        |                |registro (memoria x banco)na fGP10TAF qnd ³±±
±±³            |        |                |estou realizando uma  inclusão            ³±±
±±³Cecília Carv|08/01/18|DRHESOCP-2682   |Ajuste para geração de contrato intermiten³±±
±±³            |        |                |te - evento S-2200.                       ³±±
±±³Marcos Cout.|07/02/18|DRHESOCP-2952   |Aplicando o campo RA_TIPOPGT na função de ³±±
±±³            |        |                |alteração contratual fAltCon()            ³±±
±±³Eduardo Vic |15/02/2018|DRHESOCP-3051 |Inclusão da chamada da nova funcionalida p³±±
±±³            |        |                |envio dos dados de observações contratuais³±±
±±³Marcos Cout |16/03/18|DRHESOCP-3618   |Realizando ajustes na chave de pesquisa do³±±
±±³            |        |                |trabalhador sem vinculo (TSV)             ³±±
±±³Raquel Hager|08/02/18|DMA3-55         |Russia Localization - Changes.            ³±±
±±³Anastasiya  |21/03/18|DMA3-DMA3-751   |Russia Localization - Changes.            ³±±
±±³ Kulagina   |		|				 |           								³±±
±±³M.Camargo   |20/12/18|DMINA-5150      |Validaciones para cuando _aPerSEL está    ³±±
±±³            |		|				 |vacío, funcion Gpea010GRV					³±±
±±³M.Camargo   |19/09/19|DMINA-7192      |modificación gpMontac para rescicion col. ³±±
±±³  Marco A.  |08/07/20|DMINA-9448      |Se localiza validacion de matricula en la ³±±
±±³            |		|				 |funcion Gpea010Run, para que aplique si   ³±±
±±³            |		|				 |no es MEX y el parametro MV_MATRICU es    ³±±
±±³            |		|				 |diferente de 0. (MEX)                     ³±±
±±³Wesley Alves|11/08/20|DRHGCH-20583    |Exportação de dados do funcionário para a ³±±
±±³Pereira     |		|				 |API de integração REST Quirons	    	³±±
±±³Eduardo Prz |22/11/20|DMINA-10573     |Localización de la adicion de tabla RGE en³±±
±±³            |		|				 |array aAlias en la en funcion Gpea010ChkDel³±±
±±³            |		|				 |para que al borrar un empleado , se borren³±±
±±³            |		|				 |los registros pertenecientes al empleado  ³±±
±±³            |		|				 |en el historico de contratos(tabla RGE)   ³±±
±±³Marco A. Glz|04/03/21|  DMINA-11172   |Se bifurca validacion del campo matricula ³±±
±±³            |		|				 |en la funcion Gpea010RunValid para los    ³±±
±±³            |		|				 |paises MEX, COL, PER y EQU.               ³±±
±±ÈÍÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GPEA010( nOpcAuto , aRotinaNew , aRotAuto , nOpc )

Local aArea			:= GetArea()
Local aAreaSRA		:= SRA->( GetArea() )
Local aIndexSRA		:= {}
Local bBlock
Local cField	   	:= ""
Local cMsgDic		:= ""	//Mensagem para validacao de dicionario de dados
Local cFiltraSRA
Local nPos
Local nPosMat
Local uRet
Local cOldFilAnt	:= cFilAnt
Local lAdmPre		:= .F.

Private oBrwSRA
Private aRotina 	:= 	MenuDef() 									// Ajuste para versao 9.12
Private aTabFer		:= {}
Private aTabFer2	:= {}
Private bFiltraBrw	:= { || NIL }
Private cAltSal    	:=	Getmv("MV_ALTSAL")
Private cCadastro	:= 	"" 						// "Cadastro de Funcionarios"
Private cFuncAnt   	:= 	""
Private lGp010Auto 	:=	(aRotAuto<>Nil)
Private lItemClVl  	:= 	SuperGetMv( "MV_ITMCLVL", .F., "2" ) $ "1*3" // Define se trabalha com item e classe contabil
Private lValidF    	:= 	.T.
Private lAltSal    	:= 	.F.
Private lHistSal   	:= 	.F.
Private lUsaAnteAum	:= 	.F.
Private lSetCentury	:= __SetCentury("on")  // ON - Campos do tipo data com AAAA, OFF - Campos do tipo data com AA
Private nSalAnt    	:= 	0
Private aDep                       // Vetor para armazenar dados dos Dependentes , utilizado qdo nOpc = 7
Private aBenef                     // Vetor para armazenar dados dos Beneficiarios , utilizado qdo nOpc = 7
Private cArmCodRd0	:= ""			// Armazena o Cod RD0 da pessoa antes de inciar a cópia
Private _aPerSel	:= {}
Private	nSitSalAnt
Private	cSitFolAnt	:= " "
Private lGestPubl 	:= IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

Private aTpAlt		:= {.F.,.F.,.F.,.F.} // indica o tipo de integracao com eSocial
Private lTemGC		:= fIsCorpManage( FWGrpCompany() ) // verifica se a empresa tem gestao corporativa
Private cAuxParT	:=""
DEFAULT lGp010FimPe := ExistBlock("GP010FIMPE")
DEFAULT lGpe10Hist 	:= ExistBlock("GPE10HIST")
DEFAULT lGpe10AltS 	:= ExistBlock("GPE10ALTS")
Default lGpe10Menu 	:= ExistBlock("GPE10MENU")

Private aParamRus	:= {} //array for parameter values
Private cCodUnico  	:= ""
Private aAutoOri	:= {}

// Informa usuário sobre compartilhamento indevido na SRA
If fR33SRA()
	Return
EndIf

SXV->( DbSetOrder(2) ) //XV_ALIAS + XV_MASHUP
If SXV->( DbSeek("SRA") )
	AddMashupAlias({"SRA"})
EndIf

If lMiddleware .And. !ChkFile("RJE")
	Help( " ", 1, OemToAnsi(STR0045),, OemToAnsi(STR0430), 1, 0 )//"Tabela RJE não encontrada. Execute o UPDDISTR - atualizador de dicionário e base de dados."
	Return
EndIf

lMsErroAuto := .F.

cAA1Fil := FWxFilial("AA1")

	//Monta o Browse
	oBrwSRA:= FwMBrowse():New()
	oBrwSRA:SetAlias( 'SRA' )
	If lGestPubl
		oBrwSRA:SetDescription(oEmToAnsi(STR0392)) 		//"Cadastro de Servidores"
		cCadastro	:= OemToAnsi( STR0392 )
	Else
		oBrwSRA:SetDescription(oEmToAnsi(STR0009)) 		//"Cadastro de Funcionarios"
		cCadastro	:= 	If(cPaisLoc =="RUS", OemToAnsi( STR0368 ),OemToAnsi( STR0009 )) //"Contract Data"###"Cadastro de Funcionarios"
	Endif

	If cPaisLoc == "RUS"
		oBrwSRA:AddLegend( "SRA->RA_MSBLQL == '2'", "GREEN", STR0374 ) // Active
		oBrwSRA:AddLegend( "SRA->RA_MSBLQL == '1'", "RED"  , STR0375 ) // Inactive
	Else
		GpLegend(@oBrwSRA,.T.)
	EndIf


	oBrwSRA:SetmenuDef( 'GPEA010' )

	If lGp010Auto // Compatibilizacao para trigger
	   _SetOwnerPrvt("RA_DCARGO","")
	EndIf

	Begin Sequence
	    // Verifica utilizacao do campo RA_ANTEAUM
		lUsaAnteAum := fChecaAnteAum()

		// Verifica se o Modulo e Ativo Fixo
		If ( TestaAtf() )
			Break
		EndIf

		// Acerta o Dicionario de Dados do SRA para uso no Pyme
		If FindFunction( "Pyme_Dic_Ajust" )
			Pyme_Dic_Ajust( "SRA" , .F. )
			Pyme_Dic_Ajust( "SQ3" , .T. ) // Apresentar a consulta padrao SQ3
		EndIf

		If lGpe10Menu	// Adiciona opcoes ao menu
			ExecBlock("GPE10MENU",.F.,.F.)
		EndIf

		If lGp010Auto	//Compatibilizacao para trigger
			_SetOwnerPrvt("RA_DCARGO","")
    	EndIf

		If ( ValType( aRotinaNew) == "A" ) // Redefinindo aRotina
			aRotina := aClone( aRotinaNew )
		EndIf

		If !lGp010Auto .AND. ( nOpcAuto <> Nil )

			aRotSetOpc( "SRA" , NIL , nOpcAuto , .F. )
			nPos := aScan( aRotina , { |x| x[4] == nOpcAuto } )
			If ( nPos == 0 )
				Break
			EndIf
			dbSelectArea( "SRA" )
			bBlock	:= &( "{ |a,b,c,d,e,f,g| " + aRotina[ nPos , 2 ] + "(a,b,c,d,e,f,g) }" )

			If aRotina[nPos, 2] == "fSelecCamposSRA" //A funcao que e chamada pelo item de menu
				uRet	:= Eval( bBlock )
			Else
				//A outra rotina que foi prevista pra ser chamada com este
				//bloco de código foi a Gpea010Cop
				uRet	:= Eval( bBlock , "SRA" , SRA->( Recno() ) , nPos )
			Endif

		Else
			If lGp010Auto
				aSvRotSetOpc := aRotSetOpc( NIL , NIL , nOpc )
				nPos := Ascan(aRotAuto,{|x| Alltrim(x[1]) == "RA_FILIAL"})
				If nPos > 0
					If FWFilExist(,aRotAuto[nPos,2])
						cFilAnt := aRotAuto[nPos,2]
					Else
						Break
					EndIf
				EndIf

				dbSelectArea("SRA")

				Begin Transaction
					If nOpc == 4
						// Salva o conteúdo atual (Gravado na SRA) dos campos passados no aRotAuto
						SaveMenVar(aRotAuto)
					EndIf

					// Chama a rotina automática
					aAutoOri := aClone(aRotAuto)
					MsRotAuto(nOpc,aRotAuto,"SRA")

					If !lMsErroAuto .And. (lIntTAF .Or. lMiddleware)
							nPosMat := Ascan(aRotAuto,{|x| Alltrim(x[1]) == "RA_MAT"})
							SRA->(dbSeek(cFilAnt + aRotAuto[nPosMat][2]))
							RegToMemory("SRA", .F., .F., .F., "GPEA010")
						// Chama a integração com o TAF
						If !fGp10TafNew(nOpc, aRotAuto, @cCodUnico,@lAdmPre)
							lMsErroAuto := .T.
							DisarmTransaction()
						EndIf
					EndIf

					//Caso não houver inconsistências
					If !lMsErroAuto

						//Integração com o SIGAMDT (as validações de integração entre GPE e MDT estão todas dentro da NgIntegra)
						If FindFunction( "NgIntegra" )

							//Caso houver alguma inconsistência na integração com o MDT e o parâmetro estiver definido com o evento S-2240
							NgIntegra( { nOpc, lAdmPre } )

						EndIf

					EndIf

				End Transaction

			Else
				IF cPaisLoc == "RUS" .And. Pergunte( "GPEA010RUS", .T. )

					AAdd( aParamRus, UPPER( alltrim( MV_PAR01 ) ) )
					If( !Empty( MV_PAR02 ), AAdd( aParamRus, UPPER( alltrim( MV_PAR02 ) ) ), AAdd( aParamRus,Space( GetSx3Cache( "RA_PRINOME", "X3_TAMANHO" ) ) ) )
					If( !Empty( MV_PAR03 ), AAdd( aParamRus, UPPER( alltrim( MV_PAR03 ) ) ), AAdd( aParamRus,Space( GetSx3Cache( "RA_SECNOME", "X3_TAMANHO" ) ) ) )
					If( !Empty( MV_PAR04 ), AAdd( aParamRus, DTOS( MV_PAR04 ) ), AAdd( aParamRus, CTOD( '//' ) ) )
					If( !Empty( MV_PAR05 ), AAdd( aParamRus, UPPER( alltrim( MV_PAR05 ) ) ), AAdd( aParamRus, Space( GetSx3Cache( "RA_CIC", "X3_TAMANHO" ) ) ) )

					cFiltraRh := ActFiltRUS( aParamRus )
					oBrwSRA:SetFilterDefault(cFiltraRh)
					oBrwSRA:Activate()
				Else
					// Inicializa o filtro
					cFiltraRh := ChkRh("GPEA010","SRA","1")
					cFiltraRh += IF(!Empty(cFiltraRh),' .and. !(RA_CATFUNC $ "A|P")', '!(RA_CATFUNC $ "A|P")' )
					oBrwSRA:SetFilterDefault(cFiltraRh)
					oBrwSRA:Activate()
				Endif
		   EndIf
		EndIf

	End Sequence

	cFilAnt := cOldFilAnt
	// Retorna o SET EPOCH padrao do Framework
	If(FindFunction( "RetPadEpoch" ))
		RetPadEpoch()
	EndIf

	If !lSetCentury
		__SetCentury("off")
	EndIf

	//RestArea( aAreaSRA )
	RestArea( aArea )

Return( uRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010_01	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 26/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Visualizacao do Cadastro de Funcionarios.		  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ SIGAAPD											          ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010_01()

Local aRotinaNew	:= {;
						{ STR0004	, "PesqBrw"		, 0 , 1 },;		// "Pesquisar"
			 			{ STR0005	, "Gpea010Vis"	, 0 , 2 },;		// "Visualizar"
			 			{ STR0019	, "GpLegend"	, 0 , 10 };		// "Legenda"
		      		}
Return( GPEA010( Nil , aRotinaNew ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Vis	  ³ Autor ³ Marinaldo de Jesus ³ Data ³ 21/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Visualizacao do Cadastro de Funcionarios.		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - MenuDef                                           ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Vis( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )
Local uRetAxVisual

	nOpc := 2
	DEFAULT lDlgPadSiga := .F.
	uRetAxVisual := Gpea010Mnt( @cAlias , @nReg , @nOpc , @cSraMat , lDlgPadSiga , oDlg , aObjSize )

Return( uRetAxVisual )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010Inc ³ Autor ³ Claudecino C Leao  ³ Data ³ 03/09/98 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Inclusao de Funcionario com atualizacao do arquivo de   ³
³          ³ tecnicos (AA1).     									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ SIGAAPD - Fonte APDA020                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010Inc( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )
//Caso seja incluido via Cadastro do Participante
Private cArmCodRd0	:= ""			// Armazena o Cod RD0 da pessoa antes de inciar a cópia

DEFAULT lDlgPadSiga := .T.

Return( Gpea010Inc( @cAlias , @nReg , @nOpc , @cSraMat , lDlgPadSiga , oDlg , aObjSize ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Inc	  ³ Autor ³ Marinaldo de Jesus ³ Data ³ 14/08/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Inclusao do Cadastro de Funcionarios.			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - MenuDef                                         	 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Inc( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )

nOpc := 3
DEFAULT lDlgPadSiga := .F.

Return( Gpea010Mnt( @cAlias , @nReg , @nOpc , @cSraMat , lDlgPadSiga , oDlg , aObjSize ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ AxAlt010 ³ Autor ³ Jorge Queiroz         ³ Data ³          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Alteracao do Cadastro de Funcionarios.           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ 					                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function AxAlt010( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )

DEFAULT lDlgPadSiga := .T.

Return( Gpea010Mnt( cAlias , nReg , nOpc , @cSraMat , lDlgPadSiga , oDlg , aObjSize ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Alt	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 14/08/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Alteracao do Cadastro de Funcionarios.	          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - MenuDef                                         	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Alt( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )

nOpc := 4
DEFAULT lDlgPadSiga := .F.

Return( Gpea010Mnt( @cAlias , @nReg , @nOpc , @cSraMat , lDlgPadSiga , oDlg , aObjSize ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010dele ³ Autor ³ Wagner Xavier  ³ Data ³ 13/10/92 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Exclusao do Cadastro de Funcionarios.      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA265                                              ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010dele( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )

DEFAULT lDlgPadSiga := .T.

Return( Gpea010Del( @cAlias , @nReg , @nOpc , @cSraMat , lDlgPadSiga , oDlg , aObjSize ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Del	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 14/08/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Exclusao do Cadastro de Funcionarios.			  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - MenuDef                                            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Del( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )

nOpc := 5
DEFAULT lDlgPadSiga := .F.

Return( Gpea010Mnt( @cAlias , @nReg , @nOpc , @cSraMat , lDlgPadSiga , oDlg , aObjSize ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Mnt	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 04/02/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Manutencao do Cadastro de Funcionarios.            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - MenuDef                                            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Mnt( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize, lGrvGPE, leSocGPE )

Local aArea		   		:= GetArea(Alias())
Local aSvKeys			:= GetKeys()
Local aAdvSize			:= {}
Local aInfoAdvSize 		:= {}
Local aObjCoords		:= {}
Local aSegmentos		:= {}
Local aBtn10			:= {} 				// Array que receber o valor Receber o
Local bDialogInit		:= { || NIL }
Local bSkip		   		:= { || .F. }
Local cCpoFil			:= ""
Local cKeySeek			:= ""
Local lActivate	   		:= ( oDlg == NIL )
Local lGrava			:= .F.
Local lLimpa       		:= .T.             	// Variavel que dita se grava ou nao campo da aba 3 na operacao de copia (nOpc 7)
Local lRelRd0			:= .F.				//  Variavel que dita exibidacao de teclas de atalho F4/F5 - Relacionamento RD0
Local lInteReser		:= SuperGetMV("MV_RESEXP",.F.,"0") <>  "0" // Integracao Reserve - forma de exportacao
Local lExpCad	   		:= SubStr(SuperGetMV("MV_RESCAD",.F.,"000"),3,1) == "1"	//Integracao Reserve - verifica se exporta participantes
Local nLoop		   		:= 0
Local nLoops			:= 0
Local nOpcA				:= 0
Local nPosMat 	    	:= 0
Local lPyme		   		:= If( Type( "__lPyme" ) <> "U", __lPyme, .F. )
Local aDicFch			:= {}
Local cCPF				:= ""
Local cCatEFD			:= ""
Local cMatric			:= ""
Local cCodigo
Local bSraGsp			:= {||.T.}
Local nPosicao := 0
Local bFina673Obr		:= {|| If( FindFunction('Fina673Obr'), Fina673Obr("SRA"),.T.) }
Local lAutoErro 		:= .F.
Local lChkCCT			:=  SuperGetMV("MV_CCTFUNC",.F.,.F.) .and. ChkFile("RI4")

Local lVer2_3			:= SR8->(ColumnPos("R8_TPPROC")) > 0
Local nX				:= 1
Local lVldInteg			:= .T.
Local nCampo			:= 0
Local lSetCentury		:= __SetCentury("on")
Local nModMile			:= Iif(IsInCallStack("FWMILEIMPORT"), 7, Nil)
Local cEFDAviso			:= Alltrim(FSubst(If(cPaisLoc == 'BRA' .And. Findfunction("fEFDAviso"), fEFDAviso(), SuperGetMv("MV_EFDAVIS",, "0")))) //Integracao com TAF)
Local cMatUnica			:= SuperGetMV("MV_MATUNIC",.F.,"")
Local aFldRel			:= If(aOfusca[2], FwProtectedDataUtil():UsrNoAccessFieldsInList( {"RA_NOME"} ), {})
Local lOfusca			:= Len(aFldRel) > 0
Local lAdmPre			:= .F.
Local cX3IniPad			:= ""

Private aHeaderRCP  	:= {}				// Vetor com o cabecalho da GetDados RCP(variavel para getdados da tabela RCP)
Private aModTraj		:= {}              // Vetor com informacoes Trajetoria Laboral(COS/MEX)
Private aRCPCols		:= {}			    // Vetor com as colunas da GetDados RCP(variavel para getdados da tabela RCP)
Private aRCPColsAnt		:= {}				// Vetor com as colunas da GetDados RCP(variavel para getdados da tabela RCP)
Private aRecDelSR		:= {}
Private bGP010Add	 	:= If( Type("bGPE010bAdd") = "U", { || .T. } , bGPE010bAdd) // Alterado nomenclatura da variável, nome anterior era bGPE010bAdd1
Private dDtExper		:= {}				// Data de Experiencia de Contratos
Private lTemDep     	:= .F.           	// Variavel que indica se Tem dependente qdo for utilizado funcção Copia
Private lTemBen     	:= .F.             // Variavel que indica se Tem Beneficiarios qdo for utilizado funcção Copia
Private lItemClVl  		:= 	SuperGetMv( "MV_ITMCLVL", .F., "2" ) $ "1*3" // Define se trabalha com item e classe contabil
Private lIntGPE	   		:= If(GetMv("MV_QGINT",.F.,"N") == "S",.T.,.F.)
Private nPosRCP			:= 0
Private cCadastro		:= ""
Private lRet2206		:= .F.	//integracao S-2206

Private lGestPubl 		:= IIF(ExistFunc("fUsaGFP"), fUsaGFP(), .F.)		//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP
Private lOpeSoc		:= SuperGetMv("MV_OPESOC", NIL, .F.)

Private lDelRCX := .T.
// Russia - First SNILS (RA_CIC)
Private cSnAnt			:= ""
Private aDicioT			:= {}

Default lGrvGPE			:= .F. //Variável que indica se usuário optou por gravar SÓ no GPE quando leiaute do TAF está divergente
Default leSocGPE		:= .F. //Indica gravação apenas no GPE por campos sem acesso pelo módulo de origem/nivel do usuário

	If lGestPubl
		cCadastro	:= OemToAnsi( STR0392 )
	Else
		cCadastro	:= If(cPaisLoc =="RUS", OemToAnsi( STR0368 ),OemToAnsi( STR0009 ))	// "Contract Data"###"Cadastro de Funcionarios"
	Endif

	If leSocGPE
		lMiddleware := .F.
		lGrvGPE		:= .T.
	Else
		lMiddleware	:= If( cPaisLoc == 'BRA' .AND. Findfunction("fVerMW"), fVerMW(), .F. )
	EndIf
	If lGrvGPE
		lIntTAF := .F.
	Else
		lIntTAF		:= ((SuperGetMv("MV_RHTAF",, .F.) == .T.) .AND. Val(SuperGetMv("MV_FASESOC",/*lHelp*/,' ')) >= 1 )
	EndIf

	If cModulo == "TRM" .And. (nopc == 4 .Or. nOpc == 2 ) .And. SRA->RA_CATFUNC $ "A|P"
		//--Monta o Array com os Campos do sx3 e quando usado marca com x
		SX3->(dbSetOrder(1))
		SX3->(dbSeek("SRA"))
		While SX3->(! Eof()) .And. SX3->X3_ARQUIVO = 'SRA'
			uCampo := SX3->X3_CAMPO
			If Alltrim(uCampo) $ '/RA_FILIAL/RA_ITEM/RA_CLVL' .or. ;
			  (__lPyme	.and. SX3->X3_PYME="N" )
				SX3->(dbSkip())
				loop
			Endif

			nCampo := nCampo + 1
			If cPaisLoc=="BRA"
				Aadd(aDicioT, X3Titulo()+Space(14)+CHR(179)+"["+If (X3USO(SX3->X3_USADO),"X"," ")+"]"+Space(5)+SX3->X3_CAMPO+Space(3)+STRZERO(SX3->X3_TAMANHO,3)+STRZERO(SX3->X3_DECIMAL,2)+ "01"+ Strzero(nCampo,3) )
			Else
				If X3USO(SX3->X3_USADO)
					Aadd(aDicioT, X3Titulo()+Space(14)+CHR(179)+"["+If (X3USO(SX3->X3_USADO),"X"," ")+"]"+Space(5)+SX3->X3_CAMPO+Space(3)+STRZERO(SX3->X3_TAMANHO,3)+STRZERO(SX3->X3_DECIMAL,2)+ "01"+ Strzero(nCampo,3) )
				Endif
			Endif
			SX3->(dbSkip())
		Enddo
		f265Conf()
	EndIf

If Type("lGp010Auto") == "U"
	Private lGp010Auto := .F.
EndIf

If Type("cCodUnico") == "U"
	Private cCodUnico := ""
EndIf

//Variavel utilizada na integracao com o PIMS.
If lIntegDef
	Private dDataAlt    := ''
Endif

If Type("cPosto") == "U"
	Private cPosto	:= IIF(ValType(nLoop) == "N", Space( GetSx3Cache("RCL_POSTO","X3_TAMANHO" ) ), Space(9) )
		Private cDepart	:= IIF(ValType(nLoop) == "N", Space( GetSx3Cache("RCL_DEPTO","X3_TAMANHO" ) ), Space(9) )
EndIf

If Type("nSalAnt") == "U"
	Private nSalAnt := 0
EndIf

If Type("cFuncAnt") == "U"
	Private cFuncAnt := ""
EndIf

If Type("lAltSal") == "U"
	Private lAltSal := .F.
EndIf

If Type("_aPerSel") == "U"
	Private _aPerSel := {}
EndIf

cContrMat  	:= SuperGetMv("MV_MATRICU",NIL,"0",cFilAnt)

	// ATENCAO
	// Na montagem do objeto pelo metodo MsMGet, a opcao
	// equivale a posicao no array aRotina, como o gpea011
	// possui array com posicoes diferentes sao geradas
	// inconsistencias, por isso e necessario carregar
	// o aRotina com as opcoes do GPEA010.
	If Type("lGPEA011") != "U"
		If lGPEA011
			aRotina := MenuDef()
		Endif
	Endif

	If Type("lMsErroAuto") == "L" .And. lGp010Auto
		lAutoErro := .T.
	EndIf

	If nOpc = 7 .AND. Type("aDep") == "U" .AND. Type("aBenef") == "U"
		//"Foi selecionado a opcao para copiar os dados do funcionario:"
		//" para a filial"
		//"Deseja prosseguir?"
		If !( MsgYesNo(STR0258+Chr(13)+SRA->RA_FILIAL+SRA->RA_MAT+" "+ If(lOfusca, Replicate('*',15), AllTrim(SRA->RA_NOME))+" "+STR0259+" "+cFilAnt+"."+Chr(13)+STR0260 ) )
			Return .F.
		EndIF
	ElseIf nOpc = 7 .AND. Type("aDep") == "A" .AND. Type("aBenef") == "A"
		nOpc := 3
	EndIf

	aDep        := {}	// Vetor para armazenar dados dos Dependentes , utilizado qdo nOpc = 7
	aBenef      := {}  // Vetor para armazenar dados dos Beneficiarios , utilizado qdo nOpc = 7


	// Seta as Variaveis que serao utilizadas por outras rotinas
	_SetOwnerPrvt(	"aSraFields"	, {} )
	_SetOwnerPrvt(	"aSraAltera" 	, {} )
	_SetOwnerPrvt(	"aSraNaoAlt" 	, {} )
	_SetOwnerPrvt(	"aSraVirtual"	, {} )
	_SetOwnerPrvt(	"aSraVisual" 	, {} )
	_SetOwnerPrvt(	"aSraHeader" 	, {} )
	_SetOwnerPrvt(	"aSRANotFields" , {} )
	_SetOwnerPrvt(	"aSraCols" 		, {} )
	_SetOwnerPrvt(	"aSvSraCols"	, {} )
	_SetOwnerPrvt(	"aGpea010Btn"	, {} )
	_SetOwnerPrvt(	"bSraSet15"		, { || Nil } )
	_SetOwnerPrvt(	"bSraSet15Auto"	, { || Nil } )
	_SetOwnerPrvt(	"bSraSet24"		, { || Nil } )
	_SetOwnerPrvt(	"bSraRelRd0" 	, { || Nil } )
	_SetOwnerPrvt(	"bSraShwRel" 	, { || Nil } )
	_SetOwnerPrvt(	"bSraPosto" 	, { || .T. } )
	_SetOwnerPrvt(	"lSraRelRd0" 	, .F. )
	_SetOwnerPrvt(	"nGetSX8Len"	, GetSX8Len() )
	_SetOwnerPrvt(	"nRd0Recno"		, 0			  )
	_SetOwnerPrvt(	"oEnchSra"		, Nil		  )
	_SetOwnerPrvt(	"cOrgCfg"		, If(!lPyme, GetMv("MV_ORGCFG", NIL, "0"), "0"	) )
	// Criar as variaveis para Filtro da tabela de Periodos - RCH
	_SetOwnerPrvt(	"cCond"			, "3" )
	_SetOwnerPrvt(	"cRot"			, fGetRotOrdinar() )
	_SetOwnerPrvt(	"cProcesso"		,  If( nOpc <> 3, SRA->RA_PROCES, "") )
	_SetOwnerPrvt(	"cPeriodo"		,  "" )


	// Se nao usa controle de posto (MV_ORGCFG = 2), ou nao for inclusao
	// nao apresenta tela de solicitacao de postos
	// Configuracao do parametro MV_ORGCFG:
	// 0 Nao utiliza o modulo Arquitetura Organizacional (Padrao).
	// 1 Utiliza o modulo Arquitetura Organizacional completo.
	// 2 Utiliza o modulo Arquitetura Organizacional sem controle de postos.
	If !lPyme .And. cOrgCfg = "1" .And. INCLUI
		RDK->(DbSetOrder(4) )
		If RDK->(!DbSeek(xFilial("RDK")+"2"+"1"))
			If lGp010Auto
				AutoGrLog(OemToAnsi(STR0217))
			Else
				MsgAlert( OemToAnsi(STR0217),;		// "O Sistema esta configurado para utilizar visao organizacional!, Nao sera possivel efetuar o cadastro. Verifique o parametro MV_ORGCFG."
					  	  OemToAnsi(STR0076)) 		//  "Atencao"
				Return 0
			EndIf
		EndIf
	EndIf

	// Coloca o Ponteiro do Mouse em Estado de Espera
	If !lGp010Auto
		CursorWait()
	EndIf

	// Reinicializa __aUniqueKey__ em UniqueKey() utilizada na funcao que
	// filtra a consulta via tecla <F3> para as Sequencias de Turno RA_SEQTURN
	UniqueKey()

	// Reinicializa as Informacoes em Cache carregadas pela PosSpa() utilizadas
	// na verificacao de Regra Valida
	If FindFunction( "RstPosAlias" )
		RstPosAlias("SPA")
	EndIf

	// Localizar se existe algum periodo com este roteiro, senao procurar roteiros em branco
	DbSelectArea( "RCH" )
	DbSetOrder( 4 )
	DbSeek( xFilial( "RCH" ) + cProcesso + cRot, .F. )
	If Eof()
		cRot := Space( GetSx3Cache( "RCH_ROTEIR", "X3_TAMANHO" ) )
	EndIf
    RCH->(dbCloseArea())

    dbSelectArea("SRA")
	DbSetOrder( 1 )

	Begin Sequence

		// Checa a Opcao Selecionada
	    aRotSetOpc( cAlias , @nReg ,nOPC )

	    cCpoFil := ( PrefixoCpo(cAlias)+"_FILIAL" )
		// Na Alteracao ou Exclusao Lock do Registro
		If ( ( nOpc == 4 ) .Or. ( nOpc == 5 ) )//.Or. ( nOpc == 7 ))
			If ( nOpc == 4 ) //.Or. ( nOpc == 7 )
				// Verifica se esta alterando um registro da mesma filial
				If ( ( cAlias )->( FieldPos( cCpoFil ) > 0 )  )
		    		If ( cAlias )->( FieldGet( FieldPos( cCpoFil ) ) <> xFilial( "SRA" ) )
		    		    Help(" ",1,"A000FI") // "Codigo da Filial nao esta correto."
		    		    Break
		      		EndIf
				EndIf
			EndIf

			If !( SoftLock( cAlias ) )
				Break
			EndIf
		EndIf

		// Monta a chave para Pesquisa em GdMontaCols
		If ( nOpc == 2 ) .Or. ( nOpc == 4 ) .Or. ( nOpc == 7 )
			If nOpc == 2
				cKeySeek:= (cAlias)->(&(cCpoFil)) + SRA->RA_MAT
			Else
				cKeySeek:= ( &(cCpoFil) + SRA->RA_MAT )
			EndIf
			bSkip 	:= { ||  &("RA_FILIAL")+ &("RA_MAT") <> cKeySeek }
		EndIf

		If lPyme .Or. cOrgCfg != "1"
			AAdd(aSRANotFields, "RA_POSTO")
		EndIf

		If cPaisLoc == "RUS"
			AAdd(aSRANotFields, "RA_SALARIO")
		EndIf

		If !lItemClVl
			AAdd(aSRANotFields, "RA_ITEM")
			AAdd(aSRANotFields, "RA_CLVL")
		EndIf

		If cPaisLoc == "RUS"
			AAdd(aSRANotFields, "RA_SITFOLH")
		EndIf

		Iif(cPaisLoc == "BRA" .And. FindFunction("fVersEsoc"), fVersEsoc("S2200", .F., /*aRetGPE*/, /*aRetTAF*/, @cVersEnvio), .T.)

		If cPaisLoc <> "PER" .And. (cVersEnvio <= "2.5")
			AAdd(aSRANotFields, "RA_TIPOVIA")
		Endif

		If cModulo == "MNT" .And. SuperGetMv("MV_NGMNTRH",.F.,"") == "N"
			aAdd( aSRANotFields, "RA_PROCES" )
		EndIf

		If cPaisLoc == "BRA"
			If SRA->(ColumnPos("RA_DTENTRA")) > 0 .And. SRA->(ColumnPos("RA_TIPINF")) > 0 .And. SRA->(ColumnPos("RA_DTREC")) > 0
				If cVersEnvio < "9.0"  .Or. !lOpeSoc
					aAdd( aSRANotFields, "RA_DTENTRA" )
					aAdd( aSRANotFields, "RA_TIPINF" )
					aAdd( aSRANotFields, "RA_DTREC" )
				Endif
			Endif
		Endif
		If cModulo == "TRM" .And. (nopc == 4 .Or. nOpc == 2).And. SRA->RA_CATFUNC $ "A|P"
			Aeval(aDicioT,{|x| If(Substr(x,29,1)!= "X", Aadd(aSRANotFields,alltrim(Subs(x,36,10))),"") })
		EndIf

		// Monta os dados para a Enchoice
		aSraCols := SRA->(GdBuildCols(@aSraHeader, @nLoops, @aSraVirtual, @aSraVisual, "SRA", aSRANotFields, If(!Empty(cKeySeek), cKeySeek, NIL),,,, bSkip,,,,,,,,,,,,,,,,,,,,,,, nModMile))

	    If !(nOpc == 3 .Or. nOpc == 7)
	        If !( cPaisLoc $ "EQU|VEN" )
		    	If (nPosContr := GdFieldPos( "RA_TIPOCO" , aSraHeader )) > 0
					aAdd(aSraVisual, "RA_TIPOCO")
					aSraHeader[nPosContr, 14] := "V"
				EndIf
		    	If (nPosContr := GdFieldPos( "RA_MOTCON" , aSraHeader )) > 0
					aAdd(aSraVisual, "RA_MOTCON")
					aSraHeader[nPosContr, 14] := "V"
				EndIf
		    	If (nPosContr := GdFieldPos( "RA_DATAINI" , aSraHeader )) > 0
					aAdd(aSraVisual, "RA_DATAINI")
					aSraHeader[nPosContr, 14] := "V"
				EndIf
		    	If (nPosContr := GdFieldPos( "RA_DATAFIM" , aSraHeader )) > 0
					aAdd(aSraVisual, "RA_DATAFIM")
					aSraHeader[nPosContr, 14] := "V"
				EndIf
	        EndIf
	    EndIf

		If ( nOpc == 7 ) // Copia
	   		Inclui := .T.
			aDicFch			:= fReadFile()

			nLoops := Len( aSraHeader )
		    For nLoop := 1 To nLoops
		    	If !(aSraHeader[nLOOP][__AHEADER_FIELD__] $ "RA_ALI_WT*RA_REC_WT")
		    	   	If aSraHeader[nLOOP][__AHEADER_FIELD__] == "RA_TIPOCO"
					  	If ALLTRIM(GetSx3Cache( aSraHeader[nLOOP][__AHEADER_FIELD__],"X3_WHEN" )) == "INCLUI"
					    	aSraHeader[nLOOP][__AHEADER_WHEN__] := "fteste()"
					  	EndIf
					EndIf
					If !lGp010Auto
						nPos := Ascan(aDicFch,{ |x| Subs(x,36,10) = PadR(aSraHeader[nLOOP][__AHEADER_FIELD__], 10) })
						If nPos == 0 .OR. Empty(Subs(aDicFch[nPos],29,1))
							If (lLimpa)
								cX3IniPad := GetSx3Cache( aSraHeader[nLOOP][__AHEADER_FIELD__] , "X3_RELACAO" )
								If !Empty(cX3IniPad) .And. Valtype(&cX3IniPad) == aSraHeader[nLOOP][__AHEADER_TYPE__]
									aSraCols[1,nLoop] := &(cX3IniPad)
								Else
								If aSraHeader[nLOOP][__AHEADER_TYPE__] == "C"
									aSraCols[1,nLoop] := Space( GetSx3Cache( aSraHeader[nLOOP][__AHEADER_FIELD__] , "X3_TAMANHO" ) )
								ElseIf aSraHeader[nLOOP][__AHEADER_TYPE__] == "D"
									aSraCols[1,nLoop] := CTOD("//")
								ElseIf aSraHeader[nLOOP][__AHEADER_TYPE__] == "N"
									aSraCols[1,nLoop] := 0
								EndIf
							EndIf
						EndIf
		            EndIf
	    		EndIf
	    		EndIf
		    Next nLoop
			lTemDep := fCarDep(SRA->RA_FILIAL,SRA->RA_MAT)     // Verifica se Existe Dependentes para este funcionario
			lTemBen := fCarBenef(SRA->RA_FILIAL,SRA->RA_MAT)   // Verifica se Existe Beneficiariospara este funcionario
	   	EndIf

		aSvSraCols	:= aClone( aSraCols )

		If ( nOpc == 3 .Or. nOpc == 7 ) //Inclusao ou Copia
			//Nao podera informar a matricula quando for controle de numeracao por Filial ou Empresa
			If !Empty(cContrMat) .And. cContrMat != "0"
		    	aAdd( aSraNaoAlt , "RA_MAT"		)
				nPosMat 	:= GdFieldPos( "RA_MAT"	, aSraHeader )

				If Empty(cMatUnica)
					If cContrMat == "1"
						aSraCols[ 01, nPosMat ] := GetSx8Num("SRA", "RA_MAT")
					ElseIf cContrMat == "2"
						aSraCols[ 01, nPosMat ] := GetSx8Num("SRA", "RA_MAT", FwCodEmp("SRA") + "\SRA\RA_MAT")
					Else
						aSraCols[ 01, nPosMat ] := GetSx8Num("SRA", "RA_MAT", FWGrpCompany() + "\GRPEMP\SRA\RA_MAT")
					EndIf
				Else //Utiliza sequencial unico para Funcionários e Autônomos "MV_MATUNIC"
					aSraCols[ 01, nPosMat ] := fProxMat(cContrMat) // Função que está no fonte GPEA265
				EndIf
			EndIf
		EndIf

		// Cria as variaveis de memoria e Ccarrega os dados Conforme o arquivo
		If (cPaisLoc== "PAR" .and.  nOpc == 7)
			fGetPerAtual(@_aPerSel,xFilial("RCH"),SRA->RA_PROCES,fGetRotOrdinar())
		EndIf
		For nLoop := 1 To nLoops
			aAdd( aSraFields , aSraHeader[ nLoop , 02 ] )
			If !lGp010Auto
				If ( lActivate )
					// Seta as variaveis que serao utilizadas aa partir deste Ponto
					SetMemVar( aSraHeader[ nLoop , 02 ] , aSraCols[ 01 , nLoop ] , .T. )
					If (cPaisLoc== "PAR" .and.  nOpc == 7)
						If Len (_aPerSel)>0
							aSraCols[1,81] := _aPerSel[1,1]
							aSraCols[1,82] := _aPerSel[1,2]
						EndIf
					EndIf
				Else
					// Seta as variaveis que serao utilizadas por outro programa
					_SetOwnerPrvt( aSraHeader[ nLoop , 02 ] , aSraCols[ 01 , nLoop ] )
				EndIf
			EndIf
		Next nLoop

		If cPaisLoc $ "BRA"  .And. ( !Empty(GDFieldPos("RA_ANOCHEG", aSraHeader)) .And. !Empty(GDFieldPos("RA_NACIONA", aSraHeader)) )
			If 	( M->RA_NACIONA == "10" ) 	.And. ( M->RA_ANOCHEG == "00" )
				M->RA_ANOCHEG := Space(TamSx3("RA_ANOCHEG")[1])
				aSraCols[ 01 , GDFieldPos("RA_ANOCHEG", aSraHeader) ]:= M->RA_ANOCHEG
			EndIf
		EndIf

		//Campos Utilizados na validacao, "when" e gatilhos eSocial que deverao estar
		//em uso e com nivel de permissao do usuario
		//Caso contrario nao sera permitida inclusao de funcionarios
		IF (lIntTAF .Or. lMiddleware) .And. nOpc == 3
			If !(aSocialNiv[1]) .And. aSocialNiv[2]<>""
				If !lAutoErro
					MsgAlert(aSocialNiv[2],OemToAnsi(STR0076))
				Else
					AutoGRLog(OemToAnsi(STR0076)+" - " + aSocialNiv[2])
					lMsErroAuto := .T.
				EndIf
				BREAK
			EndIf
		Endif

		// Verifica se pode excluir o funcionario
		If ( nOpc == 5 )
			If !( Gpea010ChkDel( cAlias , nReg , nOpc , GetMemVar( "RA_MAT" ) ) )  .Or. ;
				!Gpea010Excl() .Or. If(lIntGPE,!QVALDELUSU(SRA->RA_MAT),.F.)
				Break
			EndIf
			If !(lGp010Auto) .AND. (cPaisLoc == 'BRA')  .AND.  (lIntTAF .Or. lMiddleware)
				//fIntAdmiss("SRA",, 5)
				//Retirado o controle de exclusão, será incluído posteriormente.
			EndIf

		EndIf

		// Quando for Visualizacao, Inclusao, Alteracao ou Copia
		If ( ( nOpc == 2 ) .Or. ( nOpc == 3 ) .Or. ( nOpc == 4 ) .Or. ( nOpc == 7 )	)
			// Apenas na Inclusao, Alteracao e Copia
			If ( ( nOpc == 3 ) .Or. ( nOpc == 4 ) .Or. ( nOpc == 7 )	)
				// Desabilita campos quando Integracao ORG x RSP estiver ativada
				If GP10OrgxRSP()
		    		aAdd( aSraNaoAlt , "RA_DEPTO"	)
		    		aAdd( aSraNaoAlt , "RA_POSTO" 	)
		    		aAdd( aSraNaoAlt , "RA_CODFUNC" )
		    		aAdd( aSraNaoAlt , "RA_CC" 		)
				EndIf

				// Define os campos editaveis na Enchoice
				nLoops := Len( aSraVisual )
				For nLoop := 1 To nLoops
					aAdd( aSraNaoAlt , aSraVisual[ nLoop ] )
				Next nLoop
				If cPaisLoc == "BRA" .And. aScan( aSraNaoAlt, { |x| x == "RA_CODUNIC" } ) == 0
					aAdd( aSraNaoAlt , "RA_CODUNIC"	)
				EndIf
				If cPaisLoc == "RUS" .And. cOrgCfg == "1"
					aAdd( aSraNaoAlt , "RA_DEPTO"	)
					aAdd( aSraNaoAlt , "RA_CARGO"	)
					aAdd( aSraNaoAlt , "RA_CODFUNC"	)
				EndIf
		    	If ( nOpc == 4 ) // Alteracao
					// As alteracoes de Matricula e Centro de Custo deverao ser
					// feitas pelo programa de transferencia
					aAdd( aSraNaoAlt , "RA_MAT"		)
					If  cPaisLoc != "RUS" .Or. ((cPaisLoc == "RUS") .And. !Empty(M->RA_CC))
						aAdd( aSraNaoAlt , "RA_CC" 		)
					EndIf

					If  (cPaisLoc == "RUS")
						If !Empty(M->RA_DEPTO)
							aAdd( aSraNaoAlt , "RA_DEPTO")
						EndIf
						If !Empty(M->RA_CARGO)
							aAdd( aSraNaoAlt , "RA_CARGO")
						EndIf
						If !Empty(M->RA_CODFUNC)
							aAdd( aSraNaoAlt , "RA_CODFUNC")
						EndIf
						If !Empty(M->RA_POSTO)
							aAdd( aSraNaoAlt , "RA_POSTO")
						EndIf
						If !Empty(M->RA_TABELA)
							aAdd( aSraNaoAlt , "RA_SALARIO")
						EndIf
						If !Empty(M->RA_TABNIVE)
							aAdd( aSraNaoAlt , "RA_SALARIO")
						EndIf
						If !Empty(M->RA_TABFAIX)
							aAdd( aSraNaoAlt , "RA_SALARIO")
						EndIf
						If !Empty(M->RA_SALARIO)
							aAdd( aSraNaoAlt , "RA_SALARIO")
						EndIf
						If !Empty(M->RA_CATFUNC)
							aAdd( aSraNaoAlt , "RA_CATFUNC")
						EndIf
						If !Empty(M->RA_TIPOPGT)
							aAdd( aSraNaoAlt , "RA_TIPOPGT")
						EndIf
						If !Empty(M->RA_TNOTRAB)
							aAdd( aSraNaoAlt , "RA_TNOTRAB")
						EndIf
						If !Empty(M->RA_SEQTURN)
							aAdd( aSraNaoAlt , "RA_SEQTURN")
						EndIf
					EndIf
					If cPaisLoc <> "ARG"
						aAdd( aSraNaoAlt , "RA_DPASSME")
					EndIf
		    		aAdd( aSraNaoAlt , "RA_PROCES" )
		    		If cPaisLoc == "RUS"
		    			aAdd( aSraNaoAlt , "RA_CIC" )
		    		EndIf
		    		If lItemClVl
			    		aAdd( aSraNaoAlt , "RA_ITEM")
			    		aAdd( aSraNaoAlt , "RA_CLVL")
					EndIf
					// As alteracoes de Turno de Trabalho,Sequencia e Regra  deverao
					// ser feitas pelo programa de Trocas de Turno Quando Forem validos
					If (;
							IsMemVar( "RA_TNOTRAB" ) .and. ;
							IsMemVar( "RA_SEQTURN" ) .and. ;
							If( !(cPaisLoc == "RUS"), IsMemVar( "RA_REGRA" ), .T. );
						)
							If (;
									PosSPA( GetMemVar( "RA_REGRA" ) , xFilial("SRA") , NIL , RetOrdem("SPA","PA_FILIAL+PA_CODIGO") , .F. ) .And. ;
									Gpea010SeqVld( .F. , .T. );
								)
							aAdd( aSraNaoAlt , "RA_TNOTRAB" )
							aAdd( aSraNaoAlt , "RA_SEQTURN" )
							If !(cPaisLoc == "RUS")
								aAdd( aSraNaoAlt , "RA_REGRA" )
							EndIf
						EndIf
					EndIf
		   		ElseIf ( nOpc == 3 ) // Inclusao
		   				If cPaisLoc <> "ARG"
		   					aAdd( aSraNaoAlt , "RA_DPASSME")
			    		EndIf
		    	EndIf

				nLoops := Len( aSraFields )
				For nLoop := 1 To nLoops
					If ( aScan( aSraNaoAlt , { |cNaoA| cNaoA == aSraFields[ nLoop ] } ) == 0 )
						aAdd( aSraAltera , aSraFields[ nLoop ] )
					EndIf
				Next nLoop

				// Se existir o arquivo de relacionamento com a RD0
				// disponibiliza botao
				If nOpc != 5
					If BldArrRdZRel() .And. !lPyme
						If !(cPaisLoc == "RUS") // It will always going to relate with Russia
							// Define o botao para efetuar relacionamentos com a RD0
							bSraRelRd0 := { ||	CursorWait(),;
												lSraRelRd0 := SraRelRd0( @nRd0Recno , aSraHeader , .T. , Nil ),;
												SetKey( VK_F4 , bSraRelRd0 )		,;
												CursorArrow();
								   		  }
							aAdd(;
			  						aGpea010Btn	,;
			  										{;
			  											"DESTINOS_OCEAN"					,;
			  			   								bSraRelRd0							,;
			  			   								OemToAnsi( STR0037 + "...<F4>"  )	,;	// "Relacionar"
			  			       	   						OemToAnsi( STR0038				)	 ;	// "Relac."
			  			           					};
			  					 )
					  	EndIf
					lRelRd0 := .T.
					EndIf
				EndIf

			EndIf

			// Se existir o arquivo de relacionamento com a RD0
			// disponibiliza Botao
			If nOpc != 5
				If BldArrRdZRel() .And. !lPyme
					If !(cPaisLoc == "RUS") // It will be viewed in another routine
						// Define o botao para visualizar relacionamentos com a RD0
			  				bSraShwRel := { || 	CursorWait(),;
			  									SraShwRel( @nRd0Recno ),;
			  									SetKey( VK_F5 , bSraShwRel ),;
			  							   		CursorArrow();
			  					   		  }

			  				aAdd(;
			  						aGpea010Btn	,;
			  										{;
			  											"ANALITICO"							,;
			  			   								bSraShwRel							,;
			  			       	   						OemToAnsi( STR0039 + "...<F5>"  )	,;	// "Visualizar Relacionamento"
			  			       	   						OemToAnsi( STR0040				)	 ;	// "Vis.Relac."
			  			           					};
		   					)
		   			EndIf
		   		EndIf


				If !lPyme .And. cOrgCfg == "1"  .And. ( nOpc == 3 .Or. nOpc == 7)
					bSraPosto := { ||	CursorWait(),;
										If(nOpc == 3, ORGXPosto(oEnchSra), .T.) ,;
										SetKey( VK_F6 , bSraPosto )			,;
		  								CursorArrow();
		  					   	  }

		  			aAdd(;
		  					aGpea010Btn	,;
		  									{;
		  										"MSGFORWD"							,;
		  			   							bSraPosto							,;
		  			   							OemToAnsi( STR0099 + "...<F6>"  )	,;	// "Selec. Posto"
		  			       	   					OemToAnsi( STR0100				)	 ;	// "Posto"
		  			           				};
		  			     )
				EndIf
			EndIf
		EndIf

		If ( lActivate ) .And. !lGp010Auto
			// Monta as Dimensoes dos Objetos
			DEFAULT lDlgPadSiga	:= .F.
			aAdvSize		:= MsAdvSize()
			aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
			aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
			aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
		EndIf


		//Se for Gestao de Folha Publica - SIGAGFP
		// Ajuste para o item Manutenção de Aposentados/Pensionistas
		If  lGestPubl .and. IsInCallStack( "VDFA170") .AND. nOpc == 3
			M->RA_MATIPEN := cMatPen
			M->RA_FITIPEN := cFilPen
			M->RA_CATFUNC := "9" //Pensionista
			bSraGsp := {||IF( Empty(M->RA_SALARIO) .Or. Empty(M->RA_TIPOPEN),VldPensi(),.T.)}
		EndIf

		// Define o Bloco para <CTRL-O> ( Button OK )
		bSraSet15 := { || If(;
							( ( nOpc == 3 ) .Or. ( nOpc == 4 ) .Or. (nOpc == 7) );		// Inclusao,Alteracao ou Copia
							.And.;
							fValTermCt(nOpc);											// Valida Dt. Termino de Contrato
							.AND.;
							IIf(cPaisLoc <> "BRA", fPosEmpAct(nOpc), .T.); //Función utilizada para MI al modificar RA_SUPERVI
							.And.;
							If(( nOpc == 3 ) .Or. ( nOpc == 7 ),Gpea010RunValid(nOpc),.T.); // Executa o valide do campo RA_MAT
							.And.;
							Obrigatorio( oEnchSra:aGets , oEnchSra:aTela );				// Verifica os Campos Obrigatoris na Enchoice
							.And.;
							If(cPaisLoc $ "BRA|DOM|MEX",fGP10ValBlq(),.t.);             //Valida se CPF está bloqueado
                            .And.;
							fAjusCLVL();
							.And.;
							fGrinrai();													// Valida preenchimento do campo RA_GRINRAI
							.and.;
							If(cPaisLoc=="BRA" .anD. nOpc == 4,fvldADM(),.t.);
							.And.;
							If(lIntegDef .And. lErpLogi,Gp010VldDepto(),.T.);					//Se existir integracao com LOGIX, verifica se depto foi informado, pois depto eh obrigatorio no LOGIX
							.and.;
							If(cPaisLoc $ "DOM|PAR".And. (nOpc == 3 .Or. nOpc == 7), If( Empty(M->RA_CIC), .T., ValidId(M->RA_CIC) ), .T.);	// Verifica campo RA_CIC									//Verifica os campos referentes a Infonavit - somente para o Mexico
							.And. ;
							If(cPaisLoc=="BRA", fTemRHK(), .T.);								//
							.And. ;
							IF( ( nOpc == 4 .And. !(cPaisLoc == "RUS")) , Gp010AltSal() , .T. );			//Verifica a Alteracao Salarial                  NA VERSAO 12 INCLUIR ESTA LINHA EXATAMENTE NESTA POSICAO POIS FALTOU!!!
							.and.;
							If(cPaisLoc=="BRA" .And. !lGrvGPE, fGP10ENew(nOpc,lGp010Auto), .T.);			//Verifica eSocial versus MV_EFDAVIS
							.And.;
							fGP10ResEx();											//Verifica e Residente no Exterior
							.And.;
							Gpea010SeqVld();														// Verifica a Sequencia do Turno
							.And.;
							If(nOpc == 3 .And. Empty(cPosto), ORGXPosto(oEnchSra),.T.);   			// Validacao do posto
							.And.;
							Gpea010ValPE(nOpc);														// Verifica a execucao do ponto de entrada Gp010ValPE
							.And.;
							Eval(bGP010Add);														//Executa validacao do RSPM001
							.And.;
							If( ( nOpc == 3 ) , PcoVldLan('000084','01','GPEA010') , IIF( nOpc == 4,PcoVldLan('000084','03','GPEA010'),.T.) );
							.And. ;
							If(cPaisLoc=="MEX", Gpea010InfVal(), .T.);								// Verifica os campos referentes a Infonavit - somente para o Mexico
							.And. ;
							If(cPaisLoc=="PER", Gpea010PDT(), .T.);								// Valida campos do PDT
							.And.;
							If(cPaisLoc=="COS", fSalario_Cos(), .T.);								// Verifica os campos referentes a Infonavit - somente para o Mexico
							.And.;
							If(cPaisLoc=="ARG", fAliquARG("4"), .T.);								// Verifica os campos RA_ATIV, RA_COND, RA_MODALID pasta SICOSS Argentina
							.And.;
	                  		If((cPaisLoc $ "PTG/COL/PER/ANG") .And. (nOpc == 3 .Or. nOpc == 7), Gpea010VlCtr(), .T.);	// Verifica os campos de Contrato na inclusao do funcionario
							.And.;
							If((cPaisLoc=="COL" ) .And. (nOpc == 3 .Or. nOpc == 4 .Or. nOpc == 7), Gp010EstVLD() .And. Gp010ValSal() .And. Gp010AfpVld(), .T.); // Valida salario para estagiario e salario integral
							.And.;
							If((cPaisLoc=="CHI" ) .And. (nOpc == 3 .OR. nOpc == 4 .OR. nOpc == 7), ValidRUT(nOpc) , .T.); //Valida rut
							.ANd.;
							If( ( nOpc == 4 ) .And. !(cPaisLoc == "RUS"), Gp010AltSal() .And. Gp010ValSit() .And. Gp010Transf() .And. ;
							 If(cPaisLoc=="PTG",Gp010AltCAT(),.T. )  .And. If(cPaisLoc$"MEX|COS|DOM|COL|PAR",Gp010Adm(.F.),.T. ) , .T. );	// Verifica a Alteracao Categoria Portugal
							.And.;
							If( cValToChar( nOpc ) $ "3|4|7" .And. cPaisLoc!="RUS" .And. !lGrvGPE, If( !(fGp10TafNew(nOpc,,@cCodUnico,@lAdmPre)),iF(cEfdAviso != "1",.T.,.F.),.T.) ,.T.);			//Verifica integracao com TAF - Inclusão/Alteração/Cópia
							.And.;
							If( (nOpc == 3 .Or. nOpc == 4 .Or. nOpc == 7), fChkImg(nOpc), .T. ) ; //Valida tamanho da imagem
							.And.;
							If((cPaisLoc <>"PAR" ), NGATUAST1(), .T.);    // Solicitacao de inclusao de parceiros NG - SIGAMNT
							.And.;
							If( (nOpc == 3 .or. nOpc == 4 ) .and. lChkCCT, fChkCCT(), .T.);    // Valida se CCT esta em uso e relacionamento entre sindicato e função
							.And.;
							If(lInteReser .And. lExpCad, Eval(bFina673Obr), .T.),; // Valida os campos Obrigatorios para o Reserve
							(;
								nOpcA := 1 ,;
								RestKeys( aSvKeys , .T. ),;
								oDlg:End();
						 	),;
						 	If(;
						 		( ( nOpc == 3 ) .Or. ( nOpc == 4 ) .Or. ( nOpc == 7 ) ) ,;	// Inclusao,Alteracao ou Copia
						 			(;
						 				nOpcA := 0 ,;
						 				.F.;
						 			 ),;
								(;
									nOpcA := If( nOpc == 2 , 0 , 1 ) ,;			            // Visualizacao ou Exclusao
									RestKeys( aSvKeys , .T. ),;
									oDlg:End();
						 		);
						 	  );
							);
					 }

		bSraSet15Auto := { || If(;
								( ( nOpc == 3 ) .Or. ( nOpc == 4 ) .Or. (nOpc == 7) );		// Inclusao,Alteracao ou Copia
								.And.;
								fValTermCt(nOpc);											// Valida Dt. Termino de Contrato
								.AND.;
								If(( nOpc == 3 ) .Or. ( nOpc == 7 ),Gpea010RunValid(nOpc),.T.); // Executa o valide do campo RA_MAT
								.And.;
								fGrinrai();													// Valida preenchimento do campo RA_GRINRAI
								.And.;
								If(cPaisLoc=="DOM|PAR" .And. (nOpc == 3 .Or. nOpc == 7), If( Empty(M->RA_CIC), .T., ValidId(M->RA_CIC) ), .T.);	// Verifica campo RA_CIC									//Verifica os campos referentes a Infonavit - somente para o Mexico
								.and.;
								If(cPaisLoc=="BRA" .anD. nOpc == 4,fvldADM(),.t.);
								.And. ;
								Gpea010SeqVld();													// Verifica a Sequencia do Turno
								.And.;
								Gpea010ValPE(nOpc);													// Verifica a execucao do ponto de entrada Gp010ValPE
								.And.;
								If(cPaisLoc == "BRA", fGP10ENew(nOpc,lGp010Auto), .T.);                    //Verifica eSocial versus MV_EFDAVIS
								.And.;
								Eval(bGP010Add);													// Executa validacao do RSPM001
								.And.;
								If( ( nOpc == 3 ) , PcoVldLan('000084','01','GPEA010') , IIF( nOpc == 4,PcoVldLan('000084','03','GPEA010'),.T.) );
								.And. ;
								If(cPaisLoc=="MEX", Gpea010InfVal(), .T.);							// Verifica os campos referentes a Infonavit - somente para o Mexico
								.And. ;
								If(cPaisLoc=="PER", Gpea010PDT(), .T.);							// Valida campos do PDT
								.And.;
		                        If((cPaisLoc $ "PTG/COL/PER/ANG") .And. (nOpc == 3 .Or. nOpc == 7), Gpea010VlCtr(), .T.);	// Verifica os campos de Contrato na inclusao do funcionario
								.And.;
								If((cPaisLoc=="COL" ) .And. (nOpc == 3 .Or. nOpc == 4 .Or. nOpc == 7), Gp010EstVLD() .And. IIf(!lGp010Auto, fSalBas(), .T.), .T.); // Valida Salário para estagiário e salário integral
								.And.;
								If((cPaisLoc=="CHI" ) .And. (nOpc == 3 .OR. nOpc == 4 .OR. nOpc == 7), ValidRUT(nOpc) , .T.); //Valida rut
								.ANd.;
								If( (nOpc == 3 .or. nOpc == 4 ) .and. lChkCCT, fChkCCT(), .T.);    // Valida se CCT esta em uso e relacionamento entre sindicato e função
								.And.;
								If( ( nOpc == 4 ) .And. !(cPaisLoc == "RUS") , Gp010AltSal() .And. Gp010ValSit() .And. Gp010Transf() .And. ;
								     If(cPaisLoc=="PTG",Gp010AltCAT(),.T. )  .And. If(cPaisLoc$"MEX|COS|COL|PAR",Gp010Adm(.F.),.T. ) , .T. );	// Verifica a Alteracao Categoria Portugal
								.And.;
								NGATUAST1(),;    // Solicitacao de inclusao de parceiros NG  - SIGAMNT
								(;
									nOpcA := 1 ;
							 	),;
							 	If(;
							 		( ( nOpc == 3 ) .Or. ( nOpc == 4 ) .Or. ( nOpc == 7 ) ) ,;	// Inclusao,Alteracao ou Copia
							 			( nOpcA := 0 ),;
									(;
											nOpcA := IF( nOpc == 2 , 0 , 1 ) ,;					// Visualizacao ou Exclusao
										RestKeys( aSvKeys , .T. );
							 		);
							 	  );
							   );
						  }

		// Define o Bloco para <CTRL-X> ( Button Cancel )
		bSraSet24	:= { || If(Type("lSraOk")=="U","",lSraOk:=.F.), ( RestArea( aArea ), RestKeys( aSvKeys , .T. ) ), aDep := Nil, aBenef := Nil, oDlg:End() }

	    // Inclusao de botao de historico de contrato na Toolbar - localizacao Portugal
		If ( cPaisLoc $ "PTG/COL/PER/ANG" ) .And. (nModulo == 7) .And. Visual
			aAdd(aGpea010Btn, {'RELATORIO', {|| Gpea720HIST()}, OemToansi(STR0107) , OemToansi(STR0107) } ) // "Historico de Contratos"
		EndIf

		// Inclusao de botoes na Toolbar
		If ExistBlock("GPE10BTN")
			aBtn10 := ExecBlock("GPE10BTN",.F.,.F.)
			If Valtype(aBtn10)="A" .And. Len(aBtn10) >= 2 // Garante que tenha o icone do botao e a funcao a ser executada
				If !( ValType(aBtn10[1]) == "A" )
					AADD(aGpea010Btn,aBtn10)
				Else
					For nLoop := 1 To Len(aBtn10)
						aAdd( aGpea010Btn, aBtn10[nLoop] )
					Next
				EndIf
			EndIf
		EndIf

		cPosto:= SRA->RA_POSTO

		If !lGp010Auto .AND. (cPaisLoc == 'BRA') .AND. (nOpc == 4 .OR. nOpc == 2)  .AND. (fGP010FoiE() .OR. SRA->RA_CATFUNC $ "E*G")
			aAdd(aGpea010Btn	,{NIL,	{||fGP010Estg( nOpc , SRA->RA_CATFUNC , .F. , , SRA->RA_CATEFD )},"",OemToAnsi(STR0289)} )  //"Info Exclusivas Estágio"
		EndIf
        If !lGp010Auto .AND. (cPaisLoc == 'BRA') .AND. (nOpc == 4 .OR. nOpc == 2)  .AND. (SRA->RA_CATEFD $ fCatTrabEFD("TCV") ) .And. FindFunction("GPEA933")
            aAdd(aGpea010Btn    ,{NIL,  {||AuxSVA()},"",OemToAnsi(STR0377)})  //"Manut Observ."
        EndIf

		If !lGp010Auto .AND. (cPaisLoc == 'BRA') .AND. (nOpc == 4 .OR. nOpc == 2) .And. SRA->RA_TPCONTR == "3"
			aAdd(aGpea010Btn	,{NIL,	{||fGP010Conv(nOpc,.F.,SRA->RA_FILIAL,SRA->RA_MAT)},"", OemToAnsi(STR0355) } )
		EndIf

		// Monta bloco para o init do Dialog
		bDialogInit := { || EnchoiceBar(oDlg , bSraSet15 , bSraSet24 , Nil , aGpea010Btn ),;
							If ( lRelRd0 .And. !(cPaisLoc == "RUS") , SetKey( VK_F4 , bSraRelRd0 ),Nil)					,;
							If ( lRelRd0 .And. !(cPaisLoc == "RUS") , SetKey( VK_F5 , bSraShwRel ),Nil)					,;
							If ( (cOrgCfg == "1"  .And. ( nOpc == 3 .Or. nOpc == 7))  ,SetKey( VK_F6 , bSraPosto ),Nil)	,;
							If( (nOpc == 3 .Or. nOpc == 7) .And. Empty(cPosto), If(!ORGXPosto(oEnchSra), iif(cPaisLoc == "RUS", oDlg:End(), Nil), Nil) , Nil);
						}


		// Admissao do candidato pelo ambiente Recrutamento e Selecao
		If (nModulo == 20 .Or. nModulo == 7 ).And. IsInCallStack( "RSPM001")
			fRSM001DeP()	// Preenche as variaveis de memoria (SRA) c/ as informacoes do candidato (SQG)
		ElseIf cModulo == "GPE" .And. Upper(AllTrim(FunName())) == "GPEA810"
			fGP810Var()		// Preenche as varia0veis de memoria (SRA) c/ as informacoes da matricula anterior
		EndIf

		//Se for Gestao de Folha Publica - SIGAGFP
		If  lGestPubl .AND. IsInCallStack( "VDFM040")
			cCadastro := OemToAnsi( STR0392 )		//"Cadastro de Servidores"
			If 	FindFunction("VDF040DEPA")
				RegToMemory("SRA", .F., .F., .F., "VDFM040")
				VDF040DEPA()//Carrega as variaveis de memória para os campos caso a chamada tenha sido feita
							//pelo SIGAGPE e pela rotina de ingresso aproveitando os dados do curriculo.
				RunTrigger(1, NIL, NIL, NIL, "RA_NOME   ")
				RunTrigger(1, NIL, NIL, NIL, "RA_ADMISSA")
				RunTrigger(1, NIL, NIL, NIL, "RA_CODFUNC")
			Endif
		Endif
		// Monta a Dialog Principal
		If lGp010Auto
			Eval(bSraSet15Auto)
			If nOpcA <> 1
				Return .F.
			EndIf
		Else
			If nModulo == 20 .And. IsInCallStack( "RSPM001")
				fRSM001DeP() // Carrega as variaveis de memoria para os campos caso a chamada tenha sido feita
			EndIf			 // pelo SIGARSP e pela rotina de ingresso aproveitando os dados do curriculo


			If cPaisLoc == "RUS"
				If Inclui
					RunTrigger( 1, NIL, NIL, NIL, "RA_PRINOME" )
					RunTrigger( 1, NIL, NIL, NIL, "RA_PRISOBR" )
					RunTrigger( 1, NIL, NIL, NIL, "RA_SECNOME" )
				EndIf

				RunTrigger( 1, NIL, NIL, NIL, "RA_NASC" )
				RunTrigger( 1, NIL, NIL, NIL, "RA_CIC" )
			EndIf

			//---------------------------------------------------------------------------------------
			//| Realiza a verificação do layout do eSocial do GPE x TAF (somente se MV_RHTAF == .T.)
			//| Eventos: S2100, S2200, S2205, S2206, S2300, S2306 e S2399
			//---------------------------------------------------------------------------------------
			If lIntTAF .Or. lMiddleware
				If FindFunction("fVersEsoc")
					fVersEsoc("S2200", .F., /*aRetGPE*/, /*aRetTAF*/, @cVersEnvio, @cVersGPE, ,@lNT15)
				EndIf

				If FindFunction("ESocMsgVer") .And. !lMiddleware .And. cVersEnvio <> cVersGPE .And. (cVersGPE >= "9.0" .Or. cVersEnvio >= "9.0")
					If ( cValToChar(nOpc) $ "4|3" )
						If ESocMsgVer(.F., /*cEvento*/, cVersGPE, cVersEnvio)
							lVldInteg := .T.
							lGrvGPE	:= .T.
						Else
							lVldInteg := .F.
						EndIf
					EndIf
				EndIf

				If ( lVldInteg )
					If ( lActivate )
						DEFINE MSDIALOG oDlg TITLE OemToAnsi( cCadastro ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL
					EndIf

					oEnchSra	:= MsMGet():New( "SRA" , nReg , IIF(nOpc==7 ,3,nOpc) , Nil , Nil , Nil , aSraFields , aObjSize[1] , aSraAltera , Nil , Nil , Nil, oDlg , Nil , .F. , Nil , .F. )

					If ( lActivate )
						ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit )
					EndIf
				EndIf

			Else

				If ( lActivate )
					DEFINE MSDIALOG oDlg TITLE OemToAnsi( cCadastro ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL
				EndIf

				oEnchSra	:= MsMGet():New( "SRA" , nReg , IIF(nOpc==7 ,3,nOpc) , Nil , Nil , Nil , aSraFields , aObjSize[1] , aSraAltera , Nil , Nil , Nil, oDlg , Nil , .F. , Nil , .F. )

				If ( lActivate )
					ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit )
				EndIf

			EndIf

		EndIf

		If cPaisLoc =="RUS" .AND. nOpc == 3 .AND. Type("aParamRus") == "A" .AND. Len(aParamRus) != 0
			SetMemVar("RA_PRISOBR", aParamRus[1])
			SetMemVar("RA_PRINOME", aParamRus[2])
			SetMemVar("RA_SECNOME", aParamRus[3])
			SetMemVar("RA_NASC", STOD(aParamRus[4]))
			SetMemVar("RA_CIC", aParamRus[5])
		EndIf
	End Sequence

	// Coloca o Ponteiro do Mouse em Estado de Espera
	If !lGp010Auto
		CursorWait()
	EndIf

	PcoIniLan("000084")

	If ( lActivate )
		// Se o parametro para o modulo Gestao Educacional estiver ativo, carrega o conteudo de uma
		// variavel privada para uma local, e trabalha com esta a partir deste ponto
		Begin Transaction

			If nOpc == 5  // Exclusao
			    If nOpca == 1
					PcoDetLan("000084","01","GPEA010", .T.)
					PcoDetLan("000084","02","GPEA010", .T.)
					PcoDetLan("000084","03","GPEA010", .T.)
				EndIf
			EndIf

			If nOpc == 7
				aRotSetOpc( cAlias , @nReg , 3 )
			EndIf

			lGrava :=  Gpea010Put( cAlias , IIF(nOpc == 7,3,nOpc), nReg , nOpcA , @cSraMat, aSegmentos, cCodUnico, lAdmPre)

			// UnLock do Registro do SRA
			SRA->( MsUnLock() )
			If (nOpc == 3 .Or. nOpc == 4 .Or. nOpc == 7) // Inclusao, Alteracao ou Copia
			    If nOpca == 1
					If (nOpc == 3 .Or. nOpc == 7) // Inclusao e Copia
						PcoDetLan("000084","01","GPEA010")
		 	   		ElseIf nOpc == 4 // Alteracao
						PcoDetLan("000084","03","GPEA010")
					EndIf
				EndIf
			EndIf

			// Se usa numeracao automatica nao deve guardar o ultimo quando a inclusao ou copia for cancelada
			If( nOpc == 3 .Or. nOpc == 7 ) .And. ( !Empty(cContrMat) .And. cContrMat # "0" .And. Empty(cMatUnica) )
				If( lGrava, ConfirmSX8(), CancelSX8() )
			EndIf

			// Ponto de Entrada apos a gravacao dos registros
			If nOpca == 1
				If ExistBLock('GP010AGRV')
					ExecBLock('GP010AGRV',.F.,.F.,{nOpc,lGrava})
				EndIf
			EndIf
		End Transaction
	EndIf

	PcoFinLan("000084")
	PcoFreeBlq("000084")

	// Ponto de Entrada para tratamento especifico solicitado pela
	// FNC 000000024082009
	If (nOpc == 3 .Or. nOpc == 4 .Or. nOpc == 5 .Or. nOpc == 7) .And. nOpcA == 1
		If lGp010FimPe
			ExecBlock("GP010FIMPE",.F.,.F.)
		EndIf
	EndIf

	//Retorna o SET EPOCH padrao do framework
	If(FindFunction( "RetPadEpoch" ))
		RetPadEpoch()
	EndIf

	// Restaura o Ponteiro do Mouse
	If !lGp010Auto
		CursorArrow()
	EndIf

	// Restaura opcao original das teclas de funcao apos ativacao das F4, F5 e F6

	RestArea( aArea )
	RestKeys( aSvKeys , .T. )

	If AllTrim(Upper(FunName())) == "GPEA010" .And. !IsBlind()
		nPosicao := oBrwSRA:nAt
		If ValType(nPosicao) == "N"
			oBrwSRA:Refresh(.T.)
			oBrwSRA:Goto( nPosicao )
		EndIf
	EndIf

	lAltSal  := .F.
	cFuncAnt := ""
	nSalAnt  := 0

	If !(lSetCentury)
		__SetCentury("off")
	EndIf

Return( nOpcA )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Put	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 10/09/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Grava as informacoes do SRA e verifica relacionamento com as ³
³          ³ as tabelas RD0/RDZ. 										  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Put( cAlias , nOpc , nReg , nOpcA , cSraMat, aSegmentos, cCodUnico, lAdmPre)

Local lGrv := .F.
Local nAmbCLASSIS	:= 0
Local nAmbTOP		:= 0

Default cCodUnico	:= ""
Default lAdmPre		:= .F.

	If Type("lGp010Auto") == "U"
		Private lGp010Auto := .F.
	EndIf

	// Carrega a Matricula que sera retornada por Referencia
	cSraMat := GetMemVar( "RA_MAT" )

	If Type("lUsaAnteAum") =="U"
		Private lUsaAnteAum :=.F.
		lUsaAnteAum := fChecaAnteAum()
	EndIf

	If ( nOpcA == 1 )

		Begin Transaction Extended

			// Efetua Gravacao ou Exclusao no SRA
			lGrv	:= Gpea010Grv( cAlias , nOPC , nReg , aSraCols , aSraHeader , aSraVirtual , aSvSraCols , lSraRelRd0 , nRd0Recno, cCodUnico, lAdmPre)

		End Transaction Extended
		If (lGrv) .And. FWIsInCallStack("TRMA100")
			if !fGp10TafNew(nOpc, Nil, @cCodUnico, @lAdmPre)
				DisarmTransaction()
				lGrv := .F.
			EndIf
		Endif
		If lGrv
			// Integracao Protheus X RM Classis Net (RM Sistemas)
			If GetNewPar("MV_CLASSIS", .F.) .And. FindFunction("_IntRMTpCon") .And. ( AllTrim(Str(nOpc)) $ "3|4|5" )
				// Efetua inclusao de registros na tabela INT_FUNC (Tabela de integracao de professores)
				// referente a Integracao do Protheus x RM Classis Net (RM Sistemas)
				If (lTopOk := _IntRMTpCon(@nAmbTOP,@nAmbCLASSIS))
					ClsIncPrf(If(nOpc == 3,"I",If(nOpc == 4,"U","D")), "GPE010")
				Else
					MsgStop(STR0173) //"O registro não será integrado ao RM - Não existe ambiente instalado."
				EndIf
			EndIf

			// Integracao PIMS GRAOS
			If SuperGetMV("MV_PIMSINT",.F.,.F.) .And. FindFunction("PIMSGeraXML")
				If !lGestPubl
					PIMSGeraXML("Employee",STR0009,"2","SRA") // "Cadastro de Funcionarios"
				Endif
			EndIf

		EndIf

		//Caso for execução automática vai ser chamada após a integração do funcionário com o TAF/Mid
		If lGrv .And. !lGp010Auto

			//Integração com o SIGAMDT (as validações de integração entre GPE e MDT estão todas dentro da NgIntegra)
			If FindFunction( "NgIntegra" )

				//Caso houver alguma inconsistência na integração com o MDT e o parâmetro estiver definido com o evento S-2240
				lGrv := NgIntegra( { nOpc, lAdmPre } )

			EndIf

		EndIf

		// Monta array com  os dados para envio de e-mail (M-Messenger)
		If ( lGrv ) .And. (nOpc == 3 .Or. nOpc == 7)
			fMontaMail( "016" )
		EndIf

		// Integracao SIGATRM com o Datasul EPM e Datasul AMS
		GPEA010EPMInt(nOpc)

	ElseIf (;
				( nOpcA == 0 );
				.And.;
				( nOpc == 3 );
				.And.;
				( nOpc == 7 );
			)

		// Se nao gravou funcionario mas fez relacionamento, retira-o
		If ( ExistePessoa( "SRA" , xFilial("SRA") + GetMemVar( "RA_MAT" ) , FwCodEmp("SRA") , FwCodFil() , .T. ) )
			If !( SRA->( MsSeek( xFilial("SRA") + GetMemVar( "RA_MAT" ) , .F. ) ) )
				UndoRelRdz( "SRA" , RD0->RD0_CODIGO , FwCodEmp("SRA") , FwCodFil() )
			EndIf
		EndIf

		// RollBack da numeracao automatica
		While ( GetSX8Len() > nGetSX8Len )
			CancelSX8()
		EndDo

	EndIf

Return( lGrv )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Grv	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 04/02/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Grava as Informacoes no SRA e suas correlacoes.   		      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpea010Grv(	cAlias			,;
							nOpc			,;
							nReg			,;
							aSraCols		,;
							aSraHeader		,;
							aSraVirtual		,;
							aSvSraCols		,;
							lSraRelRd0		,;
							nRd0Recno		,;
							cCodUnico		,;
							lAdmPre			 ;
						  )
// Variaveis de Inicializacao Obrigatoria
Local aMestre		:= GdPutIStrMestre( 01 )
Local aAlias		:= {}
Local aPeriodos     := {}
Local cOpcao		:= If( ( nOpc == 5 ) , "DELETE" , If( ( ( nOpc == 3 ) .Or. ( nOpc == 4 ) ) , "PUT" , NIL ) )
Local cTipoDia
Local nSraRdzOrd	:= GetRdzIndRel( "SRA" )
Local nTempoParc	:= 0
Local nPosTbFer	:= 0
Local lAnoCivil     := .F.
Local lNewRelRd0	:= .T.
Local aRet			:= {}

// Variaveis utilizadas na gestao publica.
Local dDatEfet
Local nSALARIO
Local cFUNCAO
Local cCATFUNC
Local cCARGO
Local aVdfm210      := {}

// Variaveis que serao inicializadas no Corpo da Funcao
Local cRd0Codigo
Local cLastCodRd0
Local lGrava
Local nLoop
Local nLoops
Local lGpea180 		:= IsInCallStack("GPEA180")
Local cAliasSQG		:= GetNextAlias()

// Variaveis usadas para gravacao do ATS (GSP)
Local aVerbasATS	:= {}
Local aDiasFer		:= {}
Local aAreaSR6		:= {}
Local nPosGpo 		:= 0 //Peru

Local dDataAux
Local nX:= 1
Local nFator 		:= 0
Local nDiasFer 		:= 0
Local sDataIni		:= ""

Local cPdFer		:= ""
Local nHorasDia
Local nSalMes
Local nSalDia
Local lTroca  // Valida ou nao uso do campo RA_ANTEAUM

//Variaveis utilizadas para o eSocial
Local cCPF		:= ""
Local cCatEFD	:= ""
Local cMatric	:= ""
Local cStatus	:= ""
Local cStat1:= ""
Local cTrabVincu	:= fCatTrabEFD("TCV") //"101|102|103|104|105|106|111|301|302|303|306|309" //Trabalhador com vinculo


//Variaveis utilizadas na integração com Gestão de Serviços
Local cSeqAtu		:= ""
Local cSeqAnt		:= ""
Local cTrnAtu		:= ""
Local cTrnAnt		:= ""
Local cNomeAtu	    := ""
Local cNomeAnt	    := ""
Local cQuery        := ""
Local cCmpFilSr9	:= ""

// Variaveis utilizadas na integracao SIGAPON x TSREP
Local cPisAnt		:= ""
Local lDifPIS		:= .F.
Local lTSREP		:= SuperGetMv( "MV_TSREP" , NIL , .F. )
Local lTSAAutCra	:= SuperGetMv( "MV_TSAAUTC" , NIL , .F. )
Local lClearRHEXP 	:= .F.

// Variaveis utilizadas no Ponto de Entrada GPE10HIST
Local nTipoOper := 2
Local cCond     := ""
Local bCondAux
Local bCond     := {|x|( ( GdFieldGet( "RA_SALARIO" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_SALARIO" ) ) .Or. ;
( GdFieldGet( "RA_CODFUNC" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CODFUNC" ) ) .Or. ;
( GdFieldGet( "RA_CATFUNC" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CATFUNC" ) ) .Or. ;
( GdFieldGet( "RA_CARGO"   , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CARGO"   ) ) .Or. ;
( GdFieldGet( "RA_ANTEAUM" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_ANTEAUM" ) ) )}
Local lGravaHist    := SuperGetMv( "MV_HSTSAL" , NIL , .F. )
Local cNomOrd := ""
Local cCodAnt := ""
Local nDiasDir  := 0
Local areaRCP:=  Iif(cPaisLoc == "PAR", RCP->(getarea()), {})

Local cSenhaAux := ''

dbSelectArea('RD0')
RD0->(dbSetOrder(6))
IF RD0->(dbSeek(xFilial('RD0')+ GetMemVar("RA_CIC")))
	cSenhaAux := RD0->RD0_SENHA
ENDIF

Default cCodUnico	:= ""
Default lAdmPre		:= "" //Variável que determina se houve gravação da admissão preliminar

	SetMnemonicos(xFilial("RCA"),NIL,.T.,"P_REGPARCI")

	P_REGPARCI	:= If( Type("P_REGPARCI") == "U", .F. , P_REGPARCI)

	If Type("lRet2206") == "U"
		Private lRet2206 := .F.
	EndIf

	If Type("lGp010Auto") == "U"
		Private lGp010Auto := .F.
	EndIf

	If Type("nSitSalAnt") == "U"
		Private nSitSalAnt
	EndIf

	If Type("cSitFolAnt") == "U"
		Private cSitFolAnt := " "
	EndIf

	IF cPaisLoc $ "COL/PAR"
		// Se obtiene el periodo de nómina ordinaria abierto
		Private _aPerSel :={}
		cNomOrd := fGetRotOrdinar(,,,.T.,lGp010Auto)
		fGetPerAtual(@_aPerSel,xFilial("RCH"),GetMemVar("RA_PROCES"),cNomOrd, lGp010Auto)
		If len(_aPerSel) == 0
			MsgAlert(STR0415) // "No se puede continuar con el proceso. Revise por favor."
			Return .F.
		EndIf
	EndIf
	Private oObjREP		:= Nil
	Private cAtsPer := ""

	Private lGestPubl 	:= IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP
	Private lSubsTp 	:= "MSSQL" $ AllTrim( Upper( TcGetDb() ) ) .Or. AllTrim( Upper( TcGetDb() ) ) == 'SYBASE'
	If cPaisLoc == "DOM"
		fGetPerAtual(@_aPerSel,xFilial("RCH"),GetMemVar("RA_PROCES") ,fGetRotOrdinar())
	EndIf
	// Variavel informativa para utilizacao no P.E. GPE10HIST, contem a condicao padrao do sistema para gravao de historico de alteracao de salarios
	cCond := '(( GdFieldGet( "RA_SALARIO" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_SALARIO" ) ) .or. '
	cCond += ' ( GdFieldGet( "RA_CODFUNC" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CODFUNC" ) ) .or. '
	cCond += ' ( GdFieldGet( "RA_CATFUNC" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CATFUNC" ) ) .or. '
	cCond += ' ( GdFieldGet( "RA_CARGO"   , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CARGO"   ) ) .or. '
	cCond += ' ( GdFieldGet( "RA_ANTEAUM" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_ANTEAUM" ) ) )'

	// Ponto de Entrada para alterar a condicao (bCond) padrao do sistema para gravacao do historico de alteracao de salarios
	If lGpe10Hist
		bCondAux := ExecBlock("GPE10HIST",.F.,.F.,{nTipoOper,bCond,cCond})
		bCond    := If( ValType(bCondAux) = "B" , bCondAux , bCond )   // Somente altera condicao padrao do sistema se o retorno do Ponto de Entrada for um bloco de codigo
	EndIf

	// Busca mnemonico que determina se o ATS ser calculado por periodo (GSP).
	// Aplicado somente ao antigo modelo de Gestao Publica. Para o modulo SIGAGFP isto ainda não é utilizado
	If  GetMv( "MV_GSPUPL",, "1" ) == "2" // Gestao Publica 1=Nao; 2=Sim
		dbSelectArea( "RCA" )
		dbSetOrder(1)
		dbSeek( xFilial("RCA") + "P_ATSPER" )
		cAtsPer := &(RCA->RCA_CONTEU)
	EndIf

	// Busca mnemonico que determina se o ano e civil
	If cPaisLoc $ "ANG"
		lAnoCivil := ( "S" $ Posicione("RCA",1,xFilial("RCA")+"P_FERPAC","RCA_CONTEU") )
	EndIf

	// As variaveis nao existem quando esta sendo utilizada a transferencia (transferencia chama a funcao GPEA010Put),
	// portanto estao sendo declaradas como .F. por padrao, pois as funcoes que utilizam as variaveis
	If Type( "lTemDep" ) == "U"
		_SetOwnerPrvt(	"lTemDep" , .F. )
	EndIf

	If Type( "lTemBen" ) == "U"
		_SetOwnerPrvt(	"lTemBen" , .F. )
	EndIf

	// Altera o Estado do Cursor
	If !lGp010Auto
		CursorWait()
	EndIf

	If lTSREP
		oObjREP := PTSREPOBJ():New()
		oObjRep:WSReadRHExp( "SRA", 1 )
	EndIf

	If 	SRA->(FieldPos("RA_DEFETIV")) > 0
	 	dDatEfet := SRA->RA_DEFETIV
	EndIf
	If  SRA->(FieldPos("RA_SALARIO")) > 0
	 	nSALARIO := SRA->RA_SALARIO
	EndIf
	If  SRA->(FieldPos("RA_CODFUNC")) > 0
	 	cFUNCAO := SRA->RA_CODFUNC
	EndIf
	If  SRA->(FieldPos("RA_CATFUNC")) > 0
	 	cCATFUNC := SRA->RA_CATFUNC
	EndIf
	If  SRA->(FieldPos("RA_CARGO")) > 0
	 	cCARGO := SRA->RA_CARGO
	EndIf


	Begin Sequence

		// Atualiza aRdmCols para Verificar se houveram alteracoes
		nLoops := Len( aSraHeader )
		For nLoop := 1 To nLoops
			aSraCols[ 01 , nLoop ] := GetMemVar( aSraHeader[ nLoop , 02 ] )
		Next nLoop

		If !( lGrava := ( ( nOpc == 5 .Or. lTSREP ) .or. !fCompArray( aSraCols , aSvSraCols ) ) )
			Break
		EndIf

		aMestre[ 01 , 01 ]	:= cAlias
		aMestre[ 01 , 02 ]	:= nReg
		aMestre[ 01 , 03 ]	:= lGrava
		aMestre[ 01 , 04 ]	:= aClone( aSraHeader )
		aMestre[ 01 , 05 ]	:= aClone( aSraVirtual )
		aMestre[ 01 , 06 ]	:= {}
		aMestre[ 01 , 07 ]	:= {}

		If ( nOpc == 3 ) // Inclusao

			// Inclui as Informacoes
			GdPutInfoData( aMestre , cOpcao , .F. )

			If  SRA->( RecLock( "SRA" , .F. ) )
				If SRA->(ColumnPos("RA_USRADM")) > 0
					SRA->RA_USRADM := __CUSERID
				EndIf
				If !(cPaisLoc == "RUS")
					if !lInttaf .And. !lMiddleware
						SRA->RA_CODUNIC := fRACodUnic()
					else
						If Upper(AllTrim(FunName())) == "GPEA810"
							SRA->RA_CODUNIC := c810CodUnic
						ElseIf Empty(cCodUnico)
							SRA->RA_CODUNIC := fRACodUnic()
						Else
							SRA->RA_CODUNIC := cCodUnico
						Endif
					Endif
					// Reinicializa a variável cCodUnico por ela ser Estática
					cCodUnico := ""
				EndIf

				If cPaisLoc == "BRA"
					SRA->RA_RESEXT := IIF(SRA->RA_RESEXT == "1",SRA->RA_RESEXT,"2")
				EndIf
				SRA->RA_MSBLQL := "2"// Inicializa o conteudo do campo RA_MSBLQL
				If lTSREP .And. lTSAAutCra
					nPosCra := aScan(aSraHeader, { |x| x[2] == "RA_CRACHA" } )
					nPosMat := aScan(aSraHeader, { |x| x[2] == "RA_MAT" } )
					If nPosCra > 0 .And. nPosMat > 0
						SRA->RA_CRACHA := cFilAnt + aSraCols[ 01, nPosMat ]
					EndIf
				EndIf
				SRA->( MsUnLock() )
			EndIf


			// Efetua Gravacao do SRF
			// Em toda inclusao sera gerado automaticamento um registro na
			// SRF, com Filial, Matricula e Data de Admissao do SRA.
			// Exceto no caso de inclusao de autonomos.

			If lGestPubl .AND. SRA->RA_REGIME == "2"  // Gestao de Folha Publica - SIGAGFP

				//Grava as Informacoes no SR3 e SR7
				If !( SR7->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+DTOS(GetMemVar("RA_DATAALT"))+GetMemVar("RA_TIPOALT") )))
					If !( SR7->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+DTOS(GetMemVar("RA_DATAALT"))+"001" )))
						fGravaSr3(GetMemVar( "RA_ADMISSA" ),GetMemVar("RA_TIPOALT"),GetMemVar("RA_SALARIO"),, nOpc,/*nAtuDiss*/,/*nSalarAnt*/,/*lIntTAF180*/,lRet2206)
					Endif
				Endif

							/*	(RCC_CONTEU,1,50) S106001 - Tipo Ocorrencia
								(RCC_CONTEU,51,1) S106002 - Dias Cred para cada 1 trab
								(RCC_CONTEU,52,1) S106003 - Publica Portaria
								(RCC_CONTEU,53,1) S106004 - Trocar Descanso por Inden
								(RCC_CONTEU,54,3) S106005 - Provento de indenização
								(RCC_CONTEU,57,3) S106006 - Base de dias em descando
								(RCC_CONTEU,60,30)S106007 - Categorias
								(RCC_CONTEU,90,2) S106008 - Regime
								(RCC_CONTEU,92,1) S106009 - Unid. Per. Aquisitivo
								(RCC_CONTEU,93,3) S106010 - Qtd. Per. Aquisitivo
								(RCC_CONTEU,96,3) S106011 - Dias Direito Per.Aquisit.
								(RCC_CONTEU,99,2) S106012 - Sindicato
							*/

				cQuery  += "SELECT "
				If lSubsTp
					cQuery  += "SUBSTRING(RCC_CONTEU,52,1) S106003,"
					cQuery  += "SUBSTRING(RCC_CONTEU,57,3) S106006,"
					cQuery  += "SUBSTRING(RCC_CONTEU,92,1) S106009,"
					cQuery  += "SUBSTRING(RCC_CONTEU,93,3) S106010,"
					cQuery  += "SUBSTRING(RCC_CONTEU,96,3) S106011,"
					cQuery  += "SUBSTRING(RCC_CONTEU,99,2) S106012"
				ELSE
					cQuery  += "SUBSTR(RCC_CONTEU,52,1) S106003,"
					cQuery  += "SUBSTR(RCC_CONTEU,57,3) S106006,"
					cQuery  += "SUBSTR(RCC_CONTEU,92,1) S106009,"
					cQuery  += "SUBSTR(RCC_CONTEU,93,3) S106010,"
					cQuery  += "SUBSTR(RCC_CONTEU,96,3) S106011,"
					cQuery  += "SUBSTR(RCC_CONTEU,99,2) S106012"
				EndIf

				cQuery  += " FROM " + RetSqlName( 'RCC' )
				cQuery  += " WHERE RCC_CODIGO='S106' "
				cQuery  += " AND D_E_L_E_T_=' ' "
				cQuery  += " AND RCC_FILIAL = '" + FWXFILIAL("RCC") + "' "

				If lSubsTp
					cQuery  += " AND SUBSTRING(RCC_CONTEU,60,30) LIKE('%"+ SRA->RA_CATFUNC +"%')"
					cQuery  += " AND SUBSTRING(RCC_CONTEU,90,2) LIKE('%" + SRA->RA_REGIME +"%')"
					cQuery  += " AND SUBSTRING(RCC_CONTEU,96,3) <>'  0'"
				Else
					cQuery  += " AND SUBSTR(RCC_CONTEU,60,30) LIKE('%"+ SRA->RA_CATFUNC +"%')"
					cQuery  += " AND SUBSTR(RCC_CONTEU,90,2) LIKE('%" + SRA->RA_REGIME +"%')"
					cQuery  += " AND SUBSTR(RCC_CONTEU,96,3) <>'  0'"
				EndIf

				cQuery  += " ORDER BY S106006, S106009, S106010, S106011, S106012 "

				dbUseArea(.T.,"TOPCONN", TCGenQry(,,cQuery),"TRBRCC106", .F., .T.)
				dbSelectArea("TRBRCC106")

				cCodAnt := ""
				While TRBRCC106->(!EOF())
					nDiasDir := 0

					DbSelectArea( "SRF" )
					DbSetOrder( 2 )
					If !DbSeek(  SRA->RA_FILIAL + SRA->RA_MAT + TRBRCC106->S106006 + DTOS( SRA->RA_ADMISSA ) )

						If (!Empty(SRA->RA_SINDICA) .And. (TRBRCC106->S106012 == SRA->RA_SINDICA .Or. Empty(TRBRCC106->S106012) )) .Or.;
						   (Empty(SRA->RA_SINDICA) .And. Empty(TRBRCC106->S106012))
							nDiasDir := Val(TRBRCC106->S106011)
					    Endif

						IF  SRF->(Eof()) .And. (cCodAnt <> TRBRCC106->S106006) .And. nDiasDir > 0
                            cCodAnt := TRBRCC106->S106006
							Reclock( "SRF" , .T. )
                            SRF->RF_FILIAL 	:= SRA->RA_FILIAL
							SRF->RF_MAT		:= SRA->RA_MAT
							SRF->RF_DATABAS	:= SRA->RA_ADMISSA
							IF TRBRCC106->S106009 == '1'
								SRF->RF_DATAFIM := DaySum(SRA->RA_ADMISSA , Val(TRBRCC106->S106010)) - 1 	//Soma Dias em Uma Data
							Else
								SRF->RF_DATAFIM := MonthSum(SRA->RA_ADMISSA , Val(TRBRCC106->S106010)) - 1 	//Soma Meses em Uma Data
							Endif
							SRF->RF_PD      	:= TRBRCC106->S106006
							SRF->RF_STATUS  	:= "0"
							SRF->RF_DIASDIR 	:= nDiasDir
							SRF->( MsUnLock() )
						Endif
					Endif

					TRBRCC106->(DBSKIP())
				EndDo
				TRBRCC106->( dbCloseArea() )

			Else

				If cPaisLoc <> "MEX" .And. SRA->RA_CATFUNC != "A" .and. !(cPaisLoc $ "COL|CHI|RUS|")

					If SRA->RA_CATFUNC $ "E*G"   // Estagiario Mensalista/Horista
						cPdFer	:= FGETCODFOL( "0891" )
					Else
						cPdFer	:= FGETCODFOL( "0072" )
					EndIf

					SRF->( dbSetOrder( 2 ) )

					If !SRF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + cPdFer + DTOS( SRA->RA_ADMISSA ) ) )
						If Reclock( "SRF" , .T. )
							SRF->RF_FILIAL 	:= SRA->RA_FILIAL
							SRF->RF_MAT		:= SRA->RA_MAT
							SRF->RF_DATABAS	:= SRA->RA_ADMISSA

							If cPaisLoc $ "PTG|ARG" .Or. ( cPaisLoc $ "ANG" .And. lAnoCivil )
								SRF->RF_DATAFIM	:= CTOD("31/12/"+Str(YEAR(SRF->RF_DATABAS),4))
							Else
								SRF->RF_DATAFIM := fCalcFimAq(SRF->RF_DATABAS)
							EndIf

							SRF->RF_PD      :=  cPdFer
							SRF->RF_STATUS  := "1"

							If cPaisLoc == "ARG"
								fDiasFerArg(.T.,SRF->RF_DATABAS,SRF->RF_DATAFIM,@nDiasFer)
								SRF->RF_DIASDIR := nDiasFer
								If (Month(SRA->RA_ADMISSA) >= 10) // Se o func. entra apos outubro ja tem direito de antecipar ferias
									SRF->RF_DIASANT := nDiasFer
								EndIf
							ElseIf cPaisLoc == "COL"
								SRF->RF_DIASDIR := If(fTabela("S021", 1, 8) <> Nil, fTabela("S021", 1, 8), 15)
							ElseIf cPaisLoc == "PER"
								nPosGpo:=fPosTab("S008", SRA->RA_GPOVAC, "=", 4 )
								If SRA->RA_MEIOPER=="1"

								     SRF->RF_DIASDIR:=IIF(fTabela("S008",nPosGpo,07) <> NIL, fTabela("S008",nPosGpo,07),0)
								Else //Si es 2

							 		  SRF->RF_DIASDIR:=IIF(fTabela("S008",nPosGpo,06) <> NIL, fTabela("S008",nPosGpo,06),0)
							 	EndIf
							ElseIf cPaisLoc == "EQU" .And. !Empty(FGETCODFOL("0072"))
							//  Gera todos os periodos aquisitivos ate a data base
								DiasFerEqu( SRF->RF_DATABAS, SRF->RF_DATAFIM, @aDiasFer)
								If Len(aDiasFer) > 0
									SRF->RF_DIASDIR := aDiasFer[1]
									SRF->RF_DIASADI := aDiasFer[2]
									If SRF->RF_DATAFIM > dDataBase
										SRF->RF_DFERAAT := aDiasFer[3]
										SRF->RF_DBONAAT := aDiasFer[4]
										SRF->RF_DFALAAT := aDiasFer[5]
									Else
										SRF->RF_DFERVAT := aDiasFer[3]
										SRF->RF_DBONVAT := aDiasFer[4]
										SRF->RF_DFALVAT := aDiasFer[5]
									EndIf
								EndIf
								dDataAux := SRF->RF_DATAFIM + 1
								While dDataAux <= dDataBase
									aDiasFer := {}
									SRF->( MsUnLock() )
									If Reclock( "SRF" , .T. )
										SRF->RF_FILIAL 	:= SRA->RA_FILIAL
										SRF->RF_MAT		:= SRA->RA_MAT
										SRF->RF_DATABAS	:= dDataAux
										SRF->RF_DATAFIM := fCalcFimAq(dDataAux)
										SRF->RF_PD      := FGETCODFOL( "0072" )
										SRF->RF_STATUS  := "1"
										DiasFerEqu(SRF->RF_DATABAS, SRF->RF_DATAFIM, @aDiasFer)
										If Len(aDiasFer) > 0
											SRF->RF_DIASDIR := aDiasFer[1]
											SRF->RF_DIASADI := aDiasFer[2]
											If SRF->RF_DATAFIM > dDataBase
												SRF->RF_DFERAAT := aDiasFer[3]
												SRF->RF_DBONAAT := aDiasFer[4]
												SRF->RF_DFALAAT := aDiasFer[5]
											Else
												SRF->RF_DFERVAT := aDiasFer[3]
												SRF->RF_DBONVAT := aDiasFer[4]
												SRF->RF_DFALVAT := aDiasFer[5]
											EndIf
										EndIf
										dDataAux := SRF->RF_DATAFIM + 1
									EndIf
								Enddo
							ElseIf cPaisLoc == "PTG"
								DiasFerPtg(@aPeriodos,SRF->RF_DATABAS,SRF->RF_DATAFIM)

								If Len(aPeriodos) > 0
									SRF->RF_DIASDIR:= aPeriodos[1][3] + aPeriodos[1][4]
								Else
									SRF->RF_DIASDIR:= 30
								EndIf
						    ElseIf cPaisLoc == "BOL"
								DiasFerBol(@aPeriodos,SRF->RF_DATABAS,SRF->RF_DATAFIM)

								If Len(aPeriodos) > 0
									SRF->RF_DIASDIR:= aPeriodos[1][3] + aPeriodos[1][4]
								Else
									SRF->RF_DIASDIR := 15
								EndIf
							ElseIf cPaisLoc == "ANG"
								SRF->RF_DIASDIR := DiasFerAng( SRF->RF_DATABAS, SRF->RF_DATAFIM, ,.T. )
							ElseIf cPaisLoc == "DOM"
								SRF->RF_DIASDIR:= Iif(fTabela("S006",01,06) <> Nil, fTabela("S006",01,06), 0)
							ElseIf cPaisLoc == "COS"
								DbSelectArea( "RCJ" )
								DbSetOrder( RetOrdem( "RCJ", "RCJ_FILIAL+RC_CODIGO" ) )
								DbSeek( xFilial( "RCJ", SRA->RA_FILIAL ) + SRA->RA_PROCES, .F. )
								If !Eof()
									SRF->RF_DIASDIR := RCJ->RCJ_DIAVAC
								Else
									SRF->RF_DIASDIR := 30
								EndIf
								DbSelectArea( "SRF" )
							ElseIf cPaisLoc == "PAR"
								SRF->RF_DIASDIR := DiasFerPar(SRA->RA_PROCES, SRA->RA_DTREC, SRA->RA_ADMISSA,SRA->RA_GPOVAC)
							Else
								aTabFer := {}
								aTabFer2 := {}
								fTab_Fer(@aTabFer,,@aTabFer2,fUsaGPE())
								If P_REGPARCI .And. SRA->RA_HOPARC == "1" .And. SRA->RA_HRSEMAN <= 25 .And. cPaisLoc == "BRA"
									nTempoParc := SRA->RA_HRSEMAN
									//Art. 130A da CLT, Paragrafo Unico: Se o funcionário trabalha por regime de tempo parcial
									//e suas faltas forem superiores a 7 os dias de férias caem pela metade.
									nPosTbFer := Ascan(aTabFer2, { |X|  nTempoParc <= X[6] .And. nTempoParc > X[5] })
									If nPosTbFer > 0
										aTabFer := aClone(aTabFer2[nPosTbFer])
									Endif
								EndIf
								If Len(aTabFer) > 0
									SRF->RF_DIASDIR := aTabFer[3]
								Else
									SRF->RF_DIASDIR := 30
								EndIf
							EndIf
							SRF->( MsUnLock() )
						EndIf
					EndIf

					If cPaisLoc == "VEN"
						// Tratamento de Utilidades no Contr.Dias Direito
						If	!SRF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + FGETCODFOL( "0881" ) + DTOS( SRA->RA_ADMISSA ) ) )
							If Reclock( "SRF" , .T. )
								SRF->RF_FILIAL 	:= SRA->RA_FILIAL
								SRF->RF_MAT		:= SRA->RA_MAT
								SRF->RF_DATABAS	:= SRA->RA_ADMISSA
								SRF->RF_DATAFIM	:= CTOD("31/12/"+Str(YEAR(SRA->RA_ADMISSA),4))
								SRF->RF_PD      := FGETCODFOL( "0881" )
								SRF->RF_STATUS  := "1"
								SRF->( MsUnLock() )
							EndIf
						EndIf

						// Tratamento de Pagamento Juros Antiguidade no Contr.Dias Direito
						If	!SRF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + FGETCODFOL( "1232" ) + DTOS( SRA->RA_ADMISSA ) ) )
							If Reclock( "SRF" , .T. )
								SRF->RF_FILIAL 	:= SRA->RA_FILIAL
								SRF->RF_MAT		:= SRA->RA_MAT
								SRF->RF_DATABAS	:= SRA->RA_ADMISSA
								SRF->RF_DATAFIM	:= fCalcFimAq(SRA->RA_ADMISSA)
								SRF->RF_PD      := FGETCODFOL( "1232" )
								SRF->RF_STATUS  := "1"
								SRF->( MsUnLock() )
							EndIf
						EndIf

						//# Tratamento de Antiguidade Paga na Rescisao no Contr.Dias Direito
						If	!SRF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + FGETCODFOL( "1017" ) + DTOS( SRA->RA_ADMISSA ) ) )
							If Reclock( "SRF" , .T. )
								SRF->RF_FILIAL 	:= SRA->RA_FILIAL
								SRF->RF_MAT		:= SRA->RA_MAT
								SRF->RF_DATABAS	:= SRA->RA_ADMISSA
								SRF->RF_DATAFIM	:= Ctod("31/12/2999")
								SRF->RF_PD      := FGETCODFOL( "1017" )
								SRF->RF_STATUS  := "1"
								SRF->( MsUnLock() )
							EndIf
						EndIf
					EndIf

					// Gravacao apenas para Gestao Publica modelo antigo. Não aplicado para Gestao de Folha Publica - SIGAGFP
					If GetMv( "MV_GSPUBL",, "1" ) == "2" // Gestao Publica 1=Nao; 2=Sim
						If (SRA->RA_ADTPOSE <> '******') .And. (SRA->RA_ADTPOSE <> '***N**') .And. (cAtsPer == "S")
							If Left(SRA->RA_ADTPOSE,1) == "A"
								aAdd(aVerbasATS, FGETCODFOL("0001"))
							EndIf
							If SubStr(SRA->RA_ADTPOSE,2,1) == "B"
								aAdd(aVerbasATS, FGETCODFOL("0002"))
							EndIf
							If SubStr(SRA->RA_ADTPOSE,3,1) == "D"
								aAdd(aVerbasATS, FGETCODFOL("0004"))
							EndIf
							If SubStr(SRA->RA_ADTPOSE,5,1) == "Q"
								aAdd(aVerbasATS, FGETCODFOL("0005"))
							EndIf
							If Right(SRA->RA_ADTPOSE,1) == "T"
								aAdd(aVerbasATS, FGETCODFOL("0003"))
							EndIf
							For nX:= 1 To Len(aVerbasATS)
								If !Empty(aVerbasATS[nX])
									IF !SRF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + aVerbasATS[nX] + DTOS( SRA->RA_ADMISSA ) ) )
										IF Reclock( "SRF" , .T. )
											sDataIni:= DToS(SRA->RA_ADMISSA)
											SRF->RF_FILIAL 	:= SRA->RA_FILIAL
											SRF->RF_MAT		:= SRA->RA_MAT
											SRF->RF_DATABAS	:= SRA->RA_ADMISSA
											SRF->RF_PD      := aVerbasATS[nX]
											If aVerbasATS[nX] == FGETCODFOL("0001")
												SRF->RF_DATAFIM:= StoD(StrZero(Val(Substr(sDataIni,1,4))+1,4)+Substr(sDataIni,5,4)) -1
											ElseIf aVerbasATS[nX] == FGETCODFOL("0002")
												SRF->RF_DATAFIM:= StoD(StrZero(Val(Substr(sDataIni,1,4))+2,4)+Substr(sDataIni,5,4)) -1
											ElseIf aVerbasATS[nX] == FGETCODFOL("0003")
												SRF->RF_DATAFIM:= StoD(StrZero(Val(Substr(sDataIni,1,4))+3,4)+Substr(sDataIni,5,4)) -1
											ElseIf aVerbasATS[nX] == FGETCODFOL("0004")
												SRF->RF_DATAFIM:= StoD(StrZero(Val(Substr(sDataIni,1,4))+4,4)+Substr(sDataIni,5,4)) -1
											ElseIf aVerbasATS[nX] == FGETCODFOL("0005")
												SRF->RF_DATAFIM:= StoD(StrZero(Val(Substr(sDataIni,1,4))+5,4)+Substr(sDataIni,5,4)) -1
											EndIf
											SRF->RF_DIASDIR:= SRF->RF_DATAFIM-SRF->RF_DATABAS + 1
											SRF->( MsUnLock() )
										EndIf
									EndIf
								EndIf
							Next nX
						EndIf
					EndIf

					SRF->( dbSetOrder( 1 ) )
				EndIf

			If cPaisLoc $ "MEX/COS/COL/DOM/PAR"

				If cPaisLoc == "COS"
					// Calcular o valor do Salario Mes e Salario Dia
					If !fSalario_COS(SRA->RA_FILIAL, SRA->RA_MAT, @nSalMes, @nSalDia, SRA->RA_ADMISSA, @nHorasDia)
						lGrava := .F.
						Return lGrava
					EndIf

					// Grava as Informacoes no SR3 e SR7
					fGravaSr3(GetMemVar( "RA_ADMISSA" ),GetMemVar("RA_TIPOALT"),GetMemVar("RA_SALARIO"),, nOpc)

					DbSelectArea( "RCP")
				EndIf

				// Efetua Gravacao do RCP
				// Em toda inclusao sera gerado automaticamente um registro na
				// RCP - Trajetoria Laboral
				If Reclock("RCP",.T.)
					RCP->RCP_FILIAL 	:= SRA->RA_FILIAL
					RCP->RCP_MAT	 	:= SRA->RA_MAT
					RCP->RCP_DTMOV 		:= SRA->RA_ADMISSA
					If cPaisLoc =="PAR"
						If SRA->RA_JUBILAC <>"0"
							RCP->RCP_TPMOV := "14"
						Else
							RCP->RCP_TPMOV := "01"
						EndIf
					Else
						RCP->RCP_TPMOV  	:= "01"
					EndIf
					If cPaisLoc <> "DOM"
						RCP->RCP_CODRPA  	:= SRA->RA_CODRPAT
					EndIf
					If !(cPaisLoc $ "COL|DOM|PAR")
						RCP->RCP_TJRNDA		:= SRA->RA_TJRNDA
						RCP->RCP_PERMOV		:= SRA->RA_PERADM
						RCP->RCP_NPGMOV		:= SRA->RA_PAGADM
					EndIF

					If cPaisLoc == "MEX"

						RCP->RCP_SALDII := SRA->RA_SALINT
						RCP->RCP_SALIVC	:= SRA->RA_SALIVC
						RCP->RCP_SALINS	:= SRA->RA_SALINS
						RCP->RCP_TEIMSS	:= SRA->RA_TEIMSS
						RCP->RCP_TSIMSS	:= SRA->RA_TSIMSS
						RCP->RCP_CBIMSS	:= SRA->RA_TIPOAFA
						RCP->RCP_SALMES	:= SRA->RA_SALMES
						RCP->RCP_SALDIA	:= SRA->RA_SALDIA
						RCP->RCP_CARGO	:= SRA->RA_CARGO
						RCP->RCP_CC		:= SRA->RA_CC
						RCP->RCP_CODFUN	:= SRA->RA_CODFUNC
						RCP->RCP_DEPTO	:= SRA->RA_DEPTO

					ElseIf cPaisLoc == "COS"

						RCP->RCP_CIC 	:= SRA->RA_CIC
						RCP->RCP_TPCIC	:= SRA->RA_TPCIC
						RCP->RCP_TPCCSS	:= SRA->RA_TPCCSS
						RCP->RCP_HRSDIA := nHorasDia
						RCP->RCP_SALMES	:= nSalMes
						RCP->RCP_SALDIA	:= nSalDia
						RCP->RCP_CARGO	:= SRA->RA_CARGO
						RCP->RCP_CC		:= SRA->RA_CC
						RCP->RCP_CODFUN	:= SRA->RA_CODFUNC
						RCP->RCP_DEPTO	:= SRA->RA_DEPTO
					ElseIf cPaisLoc $ "COL/PAR"						//Proyecto Col11.8_RH\175402
						RCP->RCP_CIC 		:= SRA->RA_CIC
						If cPaisLoc $ "COL
							RCP->RCP_NITARL := SRA->RA_NITARL
							RCP->RCP_NITAFP := SRA->RA_CODAFP
							RCP->RCP_TPSAL  := SRA->RA_TIPOSAL
						EndIF
						RCP->RCP_SALMES := SRA->RA_SALARIO
						RCP->RCP_RG 	  := SRA->RA_RG
						RCP->RCP_CARGO  := SRA->RA_CARGO
						RCP->RCP_CC	  := SRA->RA_CC
						RCP->RCP_CODFUN := SRA->RA_CODFUNC
						RCP->RCP_DEPTO  := SRA->RA_DEPTO
						RCP->RCP_KEYLOC := SRA->RA_KEYLOC
						RCP->RCP_PERMOV := _aPerSel[1,1]
						RCP->RCP_NPGMOV := _aPerSel[1,2]
					ElseIF cPaisLoc == "DOM"
						RCP->RCP_CARGO	:= SRA->RA_CARGO
						RCP->RCP_CC		:= SRA->RA_CC
						RCP->RCP_CODFUN	:= SRA->RA_CODFUNC
						RCP->RCP_DEPTO	:= SRA->RA_DEPTO
						RCP->RCP_SALMES	:= SRA->RA_SALARIO
						RCP->RCP_PERMOV := _aPerSel[1,1]
						RCP->RCP_NPGMOV := _aPerSel[1,2]
						RCP->RCP_TIPALT	:= '001'

					ElseIF cPaisLoc == "PAR"
						RCP->RCP_SALMES	:= SRA->RA_SALARIO
						RCP->RCP_SALDIA	:= SRA->RA_SALDIA
						RCP->RCP_PERMOV := _aPerSel[1,1]
						RCP->RCP_NPGMOV := _aPerSel[1,2]
						RCP->RCP_TPCIC	:= SRA->RA_TPCIC
						RCP->RCP_CIC 	:= SRA->RA_CIC
						RCP->RCP_CODRPA := SRA->RA_CODRPAT
						RCP->RCP_RG 	:= SRA->RA_RG
						RCP->RCP_TIPCOT := SRA->RA_TIPCOT
						RCP->RCP_REGIST := SRA->RA_REGISTR
						RCP->RCP_TEIMSS	:= SRA->RA_TEIMSS
						RCP->RCP_CODFUN	:= SRA->RA_CODFUNC
						RCP->RCP_CARGO  := SRA->RA_CARGO
						RCP->RCP_CC		:= SRA->RA_CC
						RCP->RCP_DEPTO	:= SRA->RA_DEPTO
						RCP->RCP_KEYLOC := SRA->RA_KEYLOC

					EndIf

				 	RCP->(MsUnlock())
				EndIf

			  EndIf

			  If cPaisLoc == "MEX"
					//Gera novo periodo de ferias
					MkNewPerSRF(SRA->RA_FILIAL, SRA->RA_MAT, fGetCodFol("0072"), SRA->RA_ADMISSA)
				ElseIf cPaisLoc == "COL"
					//Proyecto COL11.8_RH Req 175402 Fuente: GPEXFUNCOL.PRW
					MkNewSRFCol(SRA->RA_FILIAL, SRA->RA_MAT, fGetCodFol("0072"), SRA->RA_ADMISSA)
			  EndIf

			EndIf
			// Días derecho Chile
			If cPaisLoc == "CHI"
					// Proyecto M_RH008 Req 169804 Fuente GPEXFUNCHI.PRW
					MkNewSRFCHI(SRA->RA_FILIAL, SRA->RA_MAT, fGetCodFol("0072"), SRA->RA_ADMISSA)
			EndIf

			If cPaisLoc $ "PTG*COL*PER*ANG*PAR"
				// Efetua Gravacao do RGE
				// Em toda inclusao sera gerado automaticamente um registro no
				// RGE - Historico de Contratos
				If Reclock("RGE",.T.)
					RGE->RGE_FILIAL 	:= SRA->RA_FILIAL
					RGE->RGE_MAT	 	:= SRA->RA_MAT
					RGE->RGE_MOVIM		:= "C"
					RGE->RGE_TIPOCO		:= SRA->RA_TIPOCO
					RGE->RGE_DESCR		:= M->RA_DESCONT
					RGE->RGE_MOTCON		:= SRA->RA_MOTCON
					RGE->RGE_DESMOT		:= M->RA_DESCMOT
					RGE->RGE_DATAIN	    := SRA->RA_DATAINI
					RGE->RGE_DATAFI	    := SRA->RA_DATAFIM
					RGE->(MsUnlock())
				EndIf
			EndIf

			// Em toda inclusao, grava campo de Periculosidade e Insalubridade - Valid fHist
			nLoops := Len( aSraHeader )
			For nLoop := 1 To nLoops
				If ( Alltrim( aSraHeader[ nLoop , 02 ] ) $ "RA_PERICUL*RA_INSMAX*RA_ADCINS*RA_ADCCONF*RA_ADCTRF*RA_PERCSAT" )
					fGravaSr9( aSraHeader[ nLoop , 02 ] , aSraCols[ 01 , nLoop ] , aSvSraCols[ 01 , nLoop ], SRA->RA_ADMISSA,.T. )
				EndIf
			Next nLoop

			// Grava Turno e Sequencia Inicial no SPF
			If cPaisLoc == "RUS"
				If (;
						IsMemVar( "RA_ADMISSA" ) .And. ;
						IsMemVar( "RA_TNOTRAB" ) .And. ;
						IsMemVar( "RA_SEQTURN" ) ;
					)
					SRA->( Gpea010SPFGrv( RA_FILIAL , RA_MAT , RA_ADMISSA , RA_TNOTRAB , RA_SEQTURN , If(!(cPaisLoc == "RUS") ,RA_REGRA,"") ) )
				EndIf
			Else
				If (;
						IsMemVar( "RA_ADMISSA" ) .And. ;
						IsMemVar( "RA_TNOTRAB" ) .And. ;
						IsMemVar( "RA_SEQTURN" ) .And. ;
						IsMemVar( "RA_REGRA"   )       ;
					)

					// Apenas se forem validos
					If (;
							PosSPA( SRA->RA_REGRA , xFilial("SRA") , Nil , RetOrdem("SPA","PA_FILIAL+PA_CODIGO") , .F. ) .And. ;
							Gpea010SeqVld( .F. , .T. );
						)
							SRA->( Gpea010SPFGrv( RA_FILIAL , RA_MAT , RA_ADMISSA , RA_TNOTRAB , RA_SEQTURN , If(!(cPaisLoc == "RUS") ,RA_REGRA,"") ) )
					EndIf
				EndIf
			EndIf

			// Cria-se senha do funcinario para o Brasil quando estiver vazia
			fSraSenha()
			If !(cPaisLoc == "RUS")
				lSraRelRd0 := SraRelRd0( @nRd0Recno , aSraHeader , .T. , NIL, @lNewRelRd0)
			EndIf

			// Obtem o Codigo do RD0
			If ( lSraRelRd0 )
				RD0->( MsGoto( nRd0Recno ) )
				cRd0Codigo := RD0->RD0_CODIGO
			Else
				If cPaisLoc == "RUS"
					cRd0Codigo	:= SRA->RA_CODUNIC
				Else
					Rd0GetCodigo( @cRd0Codigo , .F. )
				EndIf
			EndIf

			// Ponto de Entrada para geração ou não do relacionamento -o retorno deve ser logico (.T. ou .F.)
			If cPaisLoc =="BRA" .And. lNewRelRd0 .And. ExistBlock("Gp010RelRd0")
				lNewRelRd0 := ExecBlock("Gp010RelRd0",.F.,.F.)
			EndIf

			// Atualiza Cadastro de Pessoas
			If lNewRelRd0
				EntUpdateRd0(	cRd0Codigo							,;	//01 -> Codigo da Pessoa
								"SRA"								,;	//02 -> Entidade Relacionada
								xFilial("SRA")+GetMemVar("RA_MAT")	,;	//03 -> Chave da Entidade
								nSraRdzOrd							,;	//04 -> Ordem
								SRA->( Recno() )					,;	//05 -> Recno da Entidade
								cEmpAnt			 					,;	//06 -> Codigo da Empresa
								cFilAnt								,;	//07 -> Codigo da Filial
								"1"					 				,;	//06 -> Conteudo para o RD0_TIPO "1"=Interno;"2"=Externo
								.F.				 					,;	//07 -> Se Atualiza as Entidades Relacionadas
								Nil									,;	//10 -> Array com as Entidades para o Before Update
								Nil					 				,;	//11 -> Se Executa algo depois do Update
								Nil									,;	//12 -> Array com as Estruturas para o Update
								Nil									,;  //13 -> Array com as informa??es de Login e Senha
								.T.									 ;  //14 -> Logical param indicates if function called from GPEA010
							 )
			EndIf

			If lIntegDef
				aRet := FwIntegdef("GPEA010")
				If aRet <> nil .And. !Empty(aRet)
					lGrava := aRet[1]
				EndIf
			EndIf

			If !lGrava
				Return .F.
			EndIf

			// Integracao EmployeeSituation e EmployeeHistorySalaryPosition
			If !EmployeeMsg(nSitSalAnt,cSitFolAnt)
				Return .F.
			EndIf

	    	If lTSREP
				//Executa o WebServices TSA - Pessoa Fisica e Usuario

				//Será necessário integrar o turno antes caso o mesmo não esteja
				//no suricato ou foi limpo pela carga Inicial PONM430
				aAreaSR6  := SR6->( GetArea() )

				SR6->(dbSetOrder(1))

				If SR6->(DbSeek(xFilial("SR6",SRA->RA_FILIAL) + SRA->RA_TNOTRAB))
					oObjREP:WSShiftWork(1)
					oObjRep:WSUpdRHExp( "SR6" )
					RestArea(aAreaSR6)
				EndIf

				lClearRHEXP := !(oObjREP:WSNatural( 1 ) .And. oObjREP:WSUser( 1 ))
				oObjRep:WSUpdRHExp( "SRA", lClearRHEXP)

				oObjREP:WSUser( 4 , SPF->PF_DATA,,,SPF->PF_TURNOPA,,,SPF->PF_SEQUEPA )
				oObjRep:WSUpdRHExp( "SPF" )

	    	EndIf

			If lGpe10InNG .And. !lGpea180
				fPrepDadosApi(nOpc)
			Endif

	    ElseIf ( nOpc == 4 )	// Alteracao
	    	If FindFunction("TecConfAlo") .AND. SuperGetMV("MV_TECXRH", NIL, .F. ) .AND. !Empty( M->RA_DEMISSA ) .AND. !IsBlind()
	    		TecConfAlo( /*oModel*/ )
	    	EndIf

			If lTSREP
				lDifPIS := ( If( IsMemVar( "RA_PIS" ) , GetMemVar( "RA_PIS" ), SRA->RA_PIS ) ) <> SRA->RA_PIS
				cPisAnt := SRA->RA_PIS
    		EndIf

			//Guarda salario a situacao do funcionario antes da alteracao.
			If lIntegDef
				nSitSalAnt := SRA->RA_SALARIO
				cSitFolAnt := SRA->RA_SITFOLH
			EndIf

			// Gravar a transferencia de processos
			If !lGpea180 .And. IsMemVar( "RA_PROCES" )
				If ( GdFieldGet( "RA_PROCES" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_PROCES" ) )
					GravaTrf()
				EndIf
			EndIf

			// Verifica se houve alteracao de salario, funcao ou categoria
			// Verifica se campo RA_ANTEAUM existe atraves da verificacao no dicionario SX3
        	lTroca := (ValType(GetSX3Cache('RA_ANTEAUM', 'X3_TAMANHO')) == 'N' .And. GetSX3Cache('RA_ANTEAUM', 'X3_TAMANHO') > 0 .And. lUsaAnteAum )

			If (;
					!(cPaisLoc == "RUS") .And.	;
					IsMemVar( "RA_SALARIO" ) .And. ;
					IsMemVar( "RA_CODFUNC" ) .And. ;
					IsMemVar( "RA_CATFUNC" ) .And. ;
					IsMemVar( "RA_CARGO"   ) .And. ;
					(!lTroca .Or. (lTroca .And. IsMemVar( "RA_ANTEAUM" )))  	;
				)
				If (;
						( GdFieldPos( "RA_SALARIO" ,aSraHeader) > 0 .And. GdFieldGet( "RA_SALARIO" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_SALARIO" ) ) .Or. ;
						( GdFieldGet( "RA_CODFUNC" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CODFUNC" ) ) .Or. ;
						( GdFieldGet( "RA_CATFUNC" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CATFUNC" ) ) .Or. ;
						( GdFieldGet( "RA_CARGO"   , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CARGO"   ) ) .Or. ;
						( !lTroca .Or. (lTroca .And. GdFieldPos( "RA_ANTEAUM" ,aSraHeader) > 0 .And. GdFieldGet( "RA_ANTEAUM" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_ANTEAUM" ) ))     ;
					)

					// Garante o Posicionamento no Recno de Entrada
					SRA->( MsGoto( nReg ) )

				    If lTSREP
						If SRA->RA_CODFUNC != GetMemVar( "RA_CODFUNC" )
							oObjREP:WSUser( 3 )
						Endif
				    EndIF

					// Se o parâmetro para gravar histórico salarial está habilitado e se o funcionário for autônomo ou prolabore.
					IF !(SRA->RA_CATFUNC $ "A|P") .OR. lGravaHist
						// Grava as Informacoes no SR3 e SR7
						fGravaSr3(GetMemVar( "RA_DATAALT" ),GetMemVar("RA_TIPOALT"),GetMemVar("RA_SALARIO"),, nOpc,/*nAtuDiss*/,/*nSalarAnt*/,/*lIntTAF180*/,lRet2206)
					ENDIF
				EndIf
			EndIf

			// Verifica se houve alteracao de Categoria Profissional IRCT
			If cPaisLoc == "PTG"
			   If IsMemVar( "RA_CODCAT" )
			      If (GdFieldGet( "RA_CODCAT" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CODCAT" ))
					 // Garante o Posicionamento no Recno de Entrada
					 SRA->( MsGoto( nReg ) )
					 // Grava as Informacoes no Historico alteracoes categorias Prof. SRH
					 fGravaRgh(GetMemVar( "RA_CODCAT" ),GetMemVar( "RA_DTALT" ))
			      EndIf
			   EndIf
			EndIf

			//atualiza SRF caso tenha alterado a data de admissao
			If SRA->RA_ADMISSA	<> M->RA_ADMISSA .And. !(cPaisLoc $ "MEX|RUS|") .And. SRA->RA_CATFUNC != "A"
				If SRA->RA_CATFUNC $ "E*G"   // Estagiario Mensalista/Horista
					cPdFer	:= FGETCODFOL( "0891" )
				Else
					cPdFer	:= FGETCODFOL( "0072" )
				EndIf

				SRF->( dbSetOrder( 2 ) )
				If SRF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + cPdFer + DTOS( SRA->RA_ADMISSA ) ) )
					If SRF->RF_STATUS == "1"
						If Reclock( "SRF" , .F. )
							SRF->RF_DATABAS	:= M->RA_ADMISSA
							SRF->RF_DATAFIM := fCalcFimAq(SRF->RF_DATABAS)
							SRF->( MsUnLock() )
						EndIf
					EndIf
				EndIf
				SRF->( dbSetOrder( 1 ) )
			EndIf

			// Atualiza o Cadastro de Participantes
			If !lGpea180
				If ( lSraRelRd0 )
					RD0->( MsGoto( nRd0Recno ) )
					cRd0Codigo	:= RD0->RD0_CODIGO
					// Verifica se esta alterando relacionamento existente
					cLastCodRd0 := fGetPessoa( "SRA" , ( xFilial( "SRA" ) + GetMemVar( "RA_MAT" ) ), cEmpAnt, FwCodFil() )
					If ( cRd0Codigo <> cLastCodRd0 )
						// Exclui o antigo relacionamento
						UndoRelRdz( "SRA", cLastCodRd0 , cEmpAnt, FwCodFil() )
					EndIf
				Else
					cRd0Codigo := fGetPessoa( "SRA" , ( xFilial( "SRA" ) + GetMemVar( "RA_MAT" ) ) , cEmpAnt, FwCodFil() )
				EndIf
			EndIf

			If lGpe10InNG .And. !lGpea180
				fPrepDadosApi(nOpc,aSraCols,aSraHeader)
			Endif

			// Grava as Informacoes
			GdPutInfoData( aMestre , cOpcao , .F. )

			If cPaisLoc == "COL"
				cCmpFilSr9:= "RA_SALARIO*RA_CODFUNC*RA_CATFUNC*RA_AFASFGT"
			Else
				cCmpFilSr9:= "RA_SALARIO*RA_CODFUNC*RA_CATFUNC*RA_AFASFGT*RA_SITFOLH"
			EndIf
			// Grava as alteracoes dos campos no SR9 (Historico) - Valid fHist
			nLoops := Len( aSraHeader )
			For nLoop := 1 To nLoops
				If !( AllTrim( aSraHeader[ nLoop , 02 ] ) $ cCmpFilSr9 )
					fGravaSr9( aSraHeader[ nLoop , 02 ] , aSraCols[ 01 , nLoop ] , aSvSraCols[ 01 , nLoop ],,AllTrim( aSraHeader[ nLoop , 02 ] ) $ "RA_ADCCONF*RA_ADCTRF*RA_PERCSAT" )
				EndIf
			Next nLoop

			// Inicializa o conteudo do campo RA_RESEXT
           If cPaisLoc == "BRA"
				If SRA->(RecLock("SRA", .F.))

					SRA->RA_RESEXT := Iif(SRA->RA_RESEXT == "1", SRA->RA_RESEXT, "2")

					//Se na alteração, não tiver matricula unica, gera.
					If Empty(SRA->RA_CODUNIC)
						If !lInttaf .And. !lMiddleware
							SRA->RA_CODUNIC := fRACodUnic()
						Else
							If Empty(cCodUnico)
								SRA->RA_CODUNIC := fRACodUnic()
							Else
								SRA->RA_CODUNIC := cCodUnico
							Endif
						Endif
					EndIf

					SRA->(MsUnLock())

					// Após a gravação reinicializa a variável cCodUnico por ser Estática
					cCodUnico := ""
				EndIf
			EndIf

			// Atualiza Cadastro Pessoas x Entidades
			If !Empty( cRd0Codigo )
				EntUpdateRd0(	cRd0Codigo							,;	//01 -> Codigo da Pessoa
								"SRA"								,;	//02 -> Entidade Relacionada
								( xFilial( "SRA" ) + SRA->RA_MAT )	,;	//03 -> Chave da Entidade
								nSraRdzOrd							,;	//04 -> Ordem
								nReg								,;	//05 -> Recno da Entidade
								cEmpAnt								,;	//06 -> Codigo da Empresa
								cFilAnt								,;	//07 -> Codigo da Filial
								"1"									,;	//08 -> Conteudo para o RD0_TIPO "1"=Interno;"2"=Externo
								.T.									,;	//09 -> Se Atualiza as Entidades Relacionadas
								NIL									,;	//10 -> Array com as Entidades para o Before Update
								NIL					 				 ;	//11 -> Se Executa algo depois do Update
					  		)
			EndIf

			// Grava Turno e Sequencia Inicial no SPF
			If cPaisLoc == "RUS"
				If (;
						IsMemVar( "RA_ADMISSA" ) .And. ;
						IsMemVar( "RA_TNOTRAB" ) .And. ;
						IsMemVar( "RA_SEQTURN" ) ;
					)
					SRA->( Gpea010SPFGrv( RA_FILIAL , RA_MAT , RA_ADMISSA , RA_TNOTRAB , RA_SEQTURN , If(!(cPaisLoc == "RUS") ,RA_REGRA,"") ) )
				EndIf
			Else
				If (;
						IsMemVar( "RA_ADMISSA" ) .And. ;
						IsMemVar( "RA_TNOTRAB" ) .And. ;
						IsMemVar( "RA_SEQTURN" ) .And. ;
						IsMemVar( "RA_REGRA"   )       ;
					)

						// Apenas se forem validos
					If (;
							PosSPA( SRA->RA_REGRA , xFilial("SRA") , Nil , RetOrdem("SPA","PA_FILIAL+PA_CODIGO") , .F. ) .And. ;
							Gpea010SeqVld( .F. , .T. );
						)
							SRA->( Gpea010SPFGrv( RA_FILIAL , RA_MAT , RA_ADMISSA , RA_TNOTRAB , RA_SEQTURN , If(!(cPaisLoc == "RUS") ,RA_REGRA,"") ) )
					EndIf
				EndIf
			EndIf

			If lIntegDef
				aRet := FwIntegdef("GPEA010")
				If aRet <> nil .And. !Empty(aRet)
					lGrava := aRet[1]
				EndIf
			EndIf

			If !lGrava
				Return .F.
			EndIf

			// Integracao EmployeeSituation e EmployeeHistorySalaryPosition
			If !EmployeeMsg(nSitSalAnt,cSitFolAnt)
				Return .F.
			EndIf

			If lInteRHAA1

				//Função
				cFuncAnt := GdFieldGet( "RA_CODFUNC" , 1 , .F. , aSraHeader , aSvSraCols )
				cFuncAtu := GetMemVar( "RA_CODFUNC" )
				//Nome
				cNomeAnt := GdFieldGet( "RA_NOME" , 1 , .F. , aSraHeader , aSvSraCols )
				cNomeAtu := GetMemVar( "RA_NOME" )
				//Turno
				cTrnAnt := GdFieldGet( "RA_TNOTRAB" , 1 , .F. , aSraHeader , aSvSraCols )
				cTrnAtu := GetMemVar( "RA_TNOTRAB" )
				//Sequencia
				cSeqAnt := GdFieldGet( "RA_SEQTURN" , 1 , .F. , aSraHeader , aSvSraCols )
				cSeqAtu := GetMemVar( "RA_SEQTURN" )

				DbSelectArea("AA1")
				AA1->(DbSetOrder(7))

				If AA1->(DbSeek(cAA1Fil + SRA->RA_MAT + SRA->RA_FILIAL))
					TxTransfAA1(, , SRA->RA_FILIAL , SRA->RA_FILIAL ,SRA->RA_MAT , SRA->RA_MAT , , , cFuncAnt, cFuncAtu,cTrnAnt, cTrnAtu, cSeqAnt, cSeqAtu, cNomeAnt, cNomeAtu)
				EndIf
			EndIf

			// Cria senha do funcinario para o Brasil quando estiver vazia
			fSraSenha()

			If lTSREP
				// Carrega os campos alterados para analise da integracao WebServices TSA
				oObjRep:WSReadRHExp( "SRA", 2 )
				// Verifica se houve alteracoes nos campos de integracao WebServices TSA
				If oObjRep:WSChkRHExp( "SRA" )
					// Executa o WebServices TSA - Pessoa Fisica e Usuario
					lClearRHEXP := !(oObjREP:WSNatural( 1 ) .And. oObjREP:WSUser( 1 ))
					oObjRep:WSUpdRHExp( "SRA", lClearRHEXP)
				EndIf
			EndIf

			// Atualiza o cadastro de Trajetoria Laboral
			If cPaisLoc $ "MEX/COS/COL/DOM/PAR"
				If !lGpea180 .And. Type("aModTraj") == "A" .And.  Len(aModTraj) > 0
					GravaRCP()
				EndIf

				If MV_MODFOL== "2" .And. IsMemVar( "RA_FECREI" ) .And. cPaisLoc == "MEX"
					If(GdFieldGet( "RA_FECREI", 1, .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_FECREI" )	)
						MkNewPerSRF(SRA->RA_FILIAL, SRA->RA_MAT, fGetCodFol("0072"), SRA->RA_FECREI)
					EndIf
				EndIf
			EndIf

	    ElseIf ( nOpc == 5 )	// Exclusao

			If lTSREP
				cPisAnt := SRA->RA_PIS
			EndIf

			If lGpe10InNG .And. !lGpea180
				fPrepDadosApi(nOpc)
			Endif
			// Exclui somente Relacionamento (RDZ)
			cLastCodRd0 := fGetPessoa( "SRA" , ( xFilial( "SRA" ) + GetMemVar( "RA_MAT" ) ) , FwCodEmp("SRA") , FwCodFil() )
			UndoRelRdz( "SRA" , cLastCodRd0 , FwCodEmp("SRA") , FwCodFil() )

			// Exclui as Informacoes
			aAdd( aAlias, "SR9" )

			If (cPaisLoc == 'BRA')
				dbSelectArea("SX2")
				dbSetOrder(1)
				If (MSSeek("RFS") .And. MSSeek("RAE") )
					aAdd( aAlias, "RFS" )	//Informacoes Exclusivas Estagiarios
				Endif

				If MSSeek("RFY")
					aAdd( aAlias, "RFY" )	//Aviso Prévio
				EndIf

				If MSSeek("RFX")
					aAdd( aAlias, "RFX" )	//Periodos de estabilidade
				EndIf

				If MSSeek("RFZ")
					aAdd( aAlias, "RFZ" )	//Sucesso de Vinculos
				EndIf

				If MSSeek("RBW") //Funcionarios Temporarios
					aAdd( aAlias, "RBW" )
				EndIf
			EndIf

			If ValType( aRecDelSR ) == "A" .And. Len( aRecDelSR ) > 0 .And. aRecDelSR[ 1, 5 ]
				Gp010ChkSR( aAlias, .T. )
			EndIf

			GdPutInfoData( aMestre , cOpcao , .F. )

			If lIntegDef
				FwIntegdef("GPEA010")
			EndIf

			If lIntGPE
				DbSelectArea("QAA") // Usuarios
				DbSetOrder(1)
				If DbSeek(xFilial("QAA")+cEmpAnt+cFilAnt+SRA->RA_MAT)
					Reclock("QAA",.F.)
					dbDelete()
					MsUnlock()
				EndIf
			EndIf

			//Atualiza SQG - Currículo
			If ( Select(cAliasSQG) > 0 )
				(cAliasSQG)->(DbCloseArea())
			EndIf

			BeginSql Alias cAliasSQG
				SELECT SQG.QG_FILIAL, SQG.QG_CURRIC
				FROM %table:SQG% SQG
				WHERE	SQG.QG_FILMAT = %exp:SRA->RA_FILIAL%
					AND SQG.QG_MAT = %exp:SRA->RA_MAT%
					AND SQG.%notDel%
			EndSql

			If !(cAliasSQG)->(Eof())
				cResult := (cAliasSQG)->QG_FILIAL + (cAliasSQG)->QG_CURRIC
				DbSelectArea("SQG")
				DbSetOrder(1)
				If DbSeek(cResult)
					RecLock("SQG",.F.)
					SQG->QG_SITUAC := "001"
					SQG->QG_FILMAT := ""
					SQG->QG_MAT := ""
					SQG->(MsUnlock())
				EndIf
			EndIf
			(cAliasSQG)->( dbCloseArea() )
			If lDelRCX
				DbSelectArea("RCX")
				DbSetOrder(4) //RCX_FILIAL+RCX_FILFUN+RCX_MATFUN+RCX_POSTO
				If RCX->( MsSeek(xFilial("RCX",SRA->RA_FILIAL) + SRA->(RA_FILIAL + RA_MAT)) )
					RecLock("RCX",.F.)
					RCX->( DbDelete() )
					RCX->( MsUnlock() )
				EndIf
			EndIf
	    EndIf

		// Realiza a gravacao do responsavel no arquivo utilizado
		// pelos modulos do Quality Celerina, caso haja integracao.
		If ( ( nOpc == 3 ) .Or. ( nOpc == 4 )  .Or. ( nOpc == 7 )) // Incluao, Alteracao ou Copia
			Qa_Quality()
		EndIf

		// SIGAORG - Se usa controle de postos, criar movimentacao de ocupacao de
		// posto, como selecionado no inicio da rotina
		If lGrava .And. cOrgCfg == "1"
            OrgGpe010Grv(nOpc, cRd0Codigo, SRA->RA_MAT)
		EndIf

		// Grava somente se execucao nao for a partir do SIGATRM.
		If lGrava .And. IsInCallStack("Gpea010Mnt")
            If lTemDep      //Se tiver Dependente, variavel alimentada quando nOpc = 7
               fGravaSRB()  //Efetua Gravacao dos Registros do SRB(Dependentes)
            EndIf
            If lTemBen      //Se Tiver Beneficiario, variavel alimentada quando nOpc = 7
               fGravaSRQ()  //Efetua Gravacao dos Registros do SRQ(Beneficiarios)
            EndIf
		EndIf

		// Confirmando a Numeracao Automatica
		If ( nOpc == 3 .Or. nOpc == 7) // Inclusao ou Copia
			While ( GetSX8Len() > nGetSX8Len )
				ConfirmSX8()
			EndDo
		EndIf

		If !lGp010Auto .AND. (cPaisLoc == 'BRA' .And. lGrava)
			If Findfunction("GPEA920") .And. (GetMemVar("RA_CATFUNC") $ "E*G")
				fGP010Estg( nOpc , GetMemVar("RA_CATFUNC") , .T. , , GetMemVar("RA_CATEFD") )
			Endif

			If ( nOpc == 3 .Or. nOpc == 7)
				If GetMemVar("RA_TPCONTR") == "3"
					fGP010Conv(nOpc,.F.,SRA->RA_FILIAL, SRA->RA_MAT)  //"Info Exclusivas Convocação"
				EndIf
			EndIf

			If ( nOpc == 3 .Or. nOpc == 7)
				If GetMemVar("RA_CATEFD") == "106" .And. GetMemVar("RA_TPCONTR") == "2"
					fGP010RBW( nOpc , .T. ) //Exibe a tela do cadastro de Temporários - GPEA927 - Tabela RBW.
				EndIf
			EndIf

			If ( nOpc == 3 .Or. nOpc == 7)
				If  GetMemVar("RA_CATEFD") $ fCatTrabEFD("AGE") .And. GetMemVar("RA_VIEMRAI") $ '30|31|35' .And. GetMemVar("RA_TPPREVI") == "2"
					fGP010RS9( nOpc , .T. ) //Exibe a tela de Dados do Agente Publico - GPEA931 - Tabela RS9.
				EndIf
			EndIf

		EndIf

	End Sequence

	// Restaura o Estado do Cursor
	If !lGp010Auto
		CursorArrow()
	EndIf

	//Se for Gestao Publica e Estatutário
	If 	lGestPubl .AND. (SRA->RA_REGIME == "2")

		If !lGp010Auto .AND. nOpc == 3 .AND. SRA->RA_CATFUNC $ '4,5'//4Servidor Adido/Cedido - Inclusao ou copia
			RecLock("RID",.T.,.T.)
			RID->RID_FILIAL	:= SRA->RA_FILIAL
			RID->RID_MAT	:= SRA->RA_MAT
			RID->RID_CODFUN	:= SRA->RA_CODFUNC
			RID->RID_DATINI	:= SRA->RA_ADMISSA
			RID->RID_TIADCD	:= SRA->RA_ADICEDI
			RID->RID_CATORI	:= SRA->RA_CATFUNC
			If RID->(ColumnPos("RID_CTESOR")) > 0
				RID->RID_CTESOR	:= SRA->RA_CATEFD
    		Endif
			RID->( MsUnLock() )
		EndIf

		If !lGp010Auto .AND. nOpc == 4 .AND. SRA->RA_CATFUNC $ '4,5'//4Servidor Adido/Cedido - Alteracao
			dbSelectArea("RID")
			dbSetOrder(1)
			IF 	dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+DTOS(SRA->RA_ADMISSA))
				RecLock("RID",.F.,.T.)
				RID->RID_TIADCD	:= SRA->RA_ADICEDI
				RID->( MsUnLock() )
			Endif
		EndIf

		If !lGp010Auto .AND. nOpc == 3 //Inclusao ou copia
			If FindFunction('VDFA060') .AND. !(IsInCallStack("VDFM040")) //se vier da rotina de Candidato x Concurso não precisa gerar Ato novamente.
		    	VDFA060({"GPEA010",SRA->RA_MAT,SRA->RA_CATFUNC,"",FwxFilial('SRA'),SRA->RA_CIC,SRA->RA_ADMISSA,'1','SRA'})
			Endif
		Endif


	   	If (SRA->RA_CATFUNC $ 'E,G,M,4,7,8,9') .And. !lGp010Auto .AND. nOpc == 4
			If (nSALARIO<>SRA->RA_SALARIO .Or. cFUNCAO<>SRA->RA_CODFUNC .Or. cCATFUNC<>SRA->RA_CATFUNC .Or. cCARGO<>SRA->RA_CARGO)
				If !( SR7->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+DTOS(GetMemVar("RA_DATAALT"))+GetMemVar("RA_TIPOALT") )))
					If !( SR7->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+DTOS(GetMemVar("RA_DATAALT"))+"001" )))
						fGravaSr3(GetMemVar( "RA_ADMISSA" ),GetMemVar("RA_TIPOALT"),GetMemVar("RA_SALARIO"),, nOpc,/*nAtuDiss*/,/*nSalarAnt*/,/*lIntTAF180*/,lRet2206)
					Endif
				Endif
			Endif
		Endif

		//Publicacao do Vitaliciamento
		If !lGp010Auto .AND. dDatEfet <> SRA->RA_DEFETIV .AND. Empty(dDatEfet) .AND. nOpc == 4
			/*  Vitaliciamento.
			    aParametro[1]	Classificação do funcionario - Tabela Aux S101.
				aParametro[2]	Tipo de documento.           - Tabela Aux S100.
				aParametro[3]	Categoria do funcionario.    - Tabela SQ3 ou SRA.
				aParametro[4]	Matricula do funcionario.    - Tabela SRA.
				aParametro[5]	Alias da tabela corrente.    - SRA
				aParametro[6]	Status 1 Autmatico 2 manual 3 reservado .
				aParametro[7]	Chave de gravação de historico na RI6.
				aParametro[8]	Filial da matricula do funcionario.
				aParametro[9]	CPF do funcionario.
				aParametro[10]  Data de Efeito.
				aParametro[11]  Indice da tabela
				aParametro[12]  Filial do Substituto
				aParametro[13]  Matricula do Substituto
			*/

			If FindFunction('VDFM210') .AND. SRA->RA_CATFUNC $ '0123'//1=Membro 2 =Servidor
				aVdfm210:={'26',QryTpDoc(SRA->RA_CATFUNC),SRA->RA_CATFUNC,SRA->RA_MAT,'SRA','1',"",FwxFilial('SRA'),SRA->RA_CIC,SRA->RA_DEFETIV,'1','',''}
	                   If (xRet:= VDFM210(aVdfm210) ) == .F.
				    ApMsgInfo( STR0244, STR0245 )//"Ato/Portaria não foi publicado. O Processo foi interrompido.","Atenção"
				Endif
			EndIf
		EndIf
	EndIf
	If nOpc == 4 .and. cPaisLoc=="PAR" .AND. SRA->RA_JUBILAC <>"0"

		DbSelectArea("RCP") // Estas seleccionando la tabla  en esta solo instruccion
		dbSetOrder(1)
		RecLock("RCP",.T.)
		RCP->RCP_FILIAL 	:= SRA->RA_FILIAL
		RCP->RCP_MAT	 	:= SRA->RA_MAT
		RCP->RCP_DTMOV 		:= SRA->RA_OPCAO
		RCP->RCP_TPMOV := "14"
		RCP->RCP_SALMES	:= SRA->RA_SALARIO
		RCP->RCP_SALDIA	:= SRA->RA_SALDIA
		RCP->RCP_PERMOV := _aPerSel[1,1]
		RCP->RCP_NPGMOV := _aPerSel[1,2]
		RCP->RCP_TPCIC	:= SRA->RA_TPCIC
		RCP->RCP_CIC 	:= SRA->RA_CIC
		RCP->RCP_CODRPA := SRA->RA_CODRPAT
		RCP->RCP_RG 	:= SRA->RA_RG
		RCP->RCP_TIPCOT := SRA->RA_TIPCOT
		RCP->RCP_REGIST := SRA->RA_REGISTR
		RCP->RCP_TEIMSS	:= SRA->RA_TEIMSS
		RCP->RCP_CODFUN	:= SRA->RA_CODFUNC
		RCP->RCP_CARGO  := SRA->RA_CARGO
		RCP->RCP_CC		:= SRA->RA_CC
		RCP->RCP_DEPTO	:= SRA->RA_DEPTO
		RCP->RCP_KEYLOC := SRA->RA_KEYLOC

		MsUnlock()
		RESTAREA(areaRCP)
	EndIf

	//RESTAURA A SENHA DA RD0
	dbSelectArea('RD0')
	if !empty(cSenhaAux) .and. SRA->RA_SENHA <> cSenhaAux
		RD0->(dbSetOrder(6))
		IF RD0->(dbSeek(xFilial('RD0')+ SRA->RA_CIC))
			RD0->( RecLock( "RD0" , .F. ) )
				RD0->RD0_SENHA := cSenhaAux
			RD0->(MsUnlock())
		ENDIF
	ENDIF

Return( lGrava )

/*/{Protheus.doc} Gpea010ChkDel
Verifica se os registros podem ser deletados.
@type Function
@author Marinaldo de Jesus
@since 04/02/2004
@param cAlias, Caracter, Alias do Arquivo Principal
@param nReg, Numérico, Recno do Arquivo Principal
@param nOpc, Numérico, Opção do Arquivo Principal
@param cCodigo, Caracter, Chave para Exclusao (Sem a Filial)
@return lChkDelOk, Lógico, Indica se o registro pode ser excluído
/*/
Static Function Gpea010ChkDel(cAlias, nReg, nOpc, cCodigo)

	Local aAreas		:= {}
	Local aAlias		:= {}
	Local aNotSx9Check	:= {}
	Local cKeyDel		:= ""
	Local lChkDelOk 	:= .T.
	Local lDelButton	:= .F.
	Local nAreas		:= 0
	Local axErro  		:= {}
	Local cOrgCfg       := SuperGetMv("MV_ORGCFG",NIL,0)
	Local cIndKeyRE0	:= ''
	Local cArqRE0		:= ''
	Local nIndexRE0		:= 0
	Local cRd0Cod		:= ''
	Local cQryDA4		:= ''

	Private lDelDA4		:= .T.

	DEFAULT cAlias		:= Alias()
	DEFAULT nReg		:= ( cAlias )->( Recno() )
	DEFAULT nOpc		:= 5
	DEFAULT cCodigo		:= ""

	// As tabelas a seguir foram inseridas no array aAreas pois elas
	// possuem algum tipo de particularidade que as impedem de
	// serem cadastradas desse modo e utilizas satisfatoriamente
	// na funcao ChkDelRegs(veja montagedem de conteudo do array na funcao
	// CheckSx9 - fonte RHLIBDB).

	// SRE
	aAdd( aAreas , Array( 04 ) )
	nAreas := Len( aAreas )
	aAreas[nAreas,01] := SRE->( GetArea() )
	aAreas[nAreas,02] := {}
	aAreas[nAreas,03] := 0
	aAreas[nAreas,04] := { |aLog| DelChkTransf( nReg , @aLog ) }

	// RGB
	If AliasInDic("RGB")
		aAdd( aAreas , Array( 03 ) )
		nAreas := Len( aAreas )
		aAreas[nAreas,01] := RGB->( GetArea() )
		aAreas[nAreas,02] := {"RGB_FILIAL","RGB_MAT"}
		aAreas[nAreas,03] := RetOrdem( "RGB" , "RGB_FILIAL+RGB_MAT" , .T. )
	EndIf

	// SQS
	aAdd( aAreas , Array( 05 ) )
	nAreas := Len( aAreas )
	aAreas[nAreas,01] := SQS->( GetArea() )
	aAreas[nAreas,02] := {"QS_MATRESP","QS_FILRESP"}
	aAreas[nAreas,03] := ""
	aAreas[nAreas,04] := {|| Nil}
	aAreas[nAreas,05] := "RA_MAT+RA_FILIAL"

	// SQB
	aAdd( aAreas , Array( 05 ) )
	nAreas := Len( aAreas )
	aAreas[nAreas,01] := SQB->( GetArea() )
	aAreas[nAreas,02] := {"QB_MATRESP","QB_FILRESP"}
	aAreas[nAreas,03] := ""
	aAreas[nAreas,04] := {|| Nil}
	aAreas[nAreas,05] := "RA_MAT+RA_FILIAL"

	// SQD
	aAdd( aAreas , Array( 05 ) )
	nAreas := Len( aAreas )
	aAreas[nAreas,01] := SQD->( GetArea() )
	aAreas[nAreas,02] := {"QD_MATPROC","QD_FILPROC"}
	aAreas[nAreas,03] := ""
	aAreas[nAreas,04] := {|| Nil}
	aAreas[nAreas,05] := "RA_MAT+RA_FILIAL"

	aAdd( aAlias, "SR9" ) // Histórico do cadastro de Funcionários
	aAdd( aAlias, "SRF" ) // Controle de Dias de Direito
	If cPaisLoc $ "PTG*COL*PER*ANG*PAR"
		aAdd( aAlias ,"RGE" ) // Histórico de contratos
	EndIf
	If (cPaisLoc == 'BRA')
		dbSelectArea("SX2")
		dbSetOrder(1)

		If (MSSeek("RFS"))
			aAdd( aAlias, "RFS" )	//Informacoes Exclusivas Estagiarios
		Endif

		If MSSeek("RFY")
			aAdd( aAlias, "RFY" )	//Aviso Previo
		EndIf

		If MSSeek("RFX")
			aAdd( aAlias, "RFX" )	//Periodos de estabilidade
		EndIf

		If MSSeek("RFZ")
			aAdd( aAlias, "RFZ" )	//Sucesso de Vínculos
		EndIf

		If MSSeek("RBW")
	   		aAdd( aAlias, "RBW" )	//Funcionarios Temporarios
		EndIf

	EndIf

	If ( lDelButton := Gp010ChkSR( aAlias ) )
		aNotSx9Check := aClone( aAlias )
		AADD(aNotSx9Check,"SQS")
		AADD(aNotSx9Check,"SQB")
		AADD(aNotSx9Check,"SQD")
		AADD(aNotSx9Check,"SX5")
		AADD(aNotSx9Check,"RJP") //INTEGRAÇÃO NG
	Else
		Return( .F. )
	EndIf

	If cOrgCfg == "1"
		DbSelectArea("RCX")
		DbSetOrder(4) //RCX_FILIAL+RCX_FILFUN+RCX_MATFUN+RCX_POSTO
		If RCX->( MsSeek(xFilial("RCX",SRA->RA_FILIAL) + SRA->(RA_FILIAL + RA_MAT)) )
			DbSelectArea("RCL")
			DbSetOrder(2) //RCL_FILIAL+RCL_POSTO
			If RCL->( MsSeek(xFilial("RCL",SRA->RA_FILIAL) + RCX->RCX_POSTO) ) .And. RCL->RCL_STATUS == "1"
				lDelRCX := .T.
			EndIf
		EndIf
	EndIf

	AAdd(aNotSx9Check,"RAQ")
	AAdd(aNotSx9Check,"RAR")
	If lDelRCX
		AAdd(aNotSx9Check,"RCX")
		AAdd(aNotSx9Check,"RCL")
	EndIf

	//RE0
	cRd0Cod 	:= fGetPessoa("SRA",(xFilial("SRA")+SRA->RA_MAT),cEmpAnt,FwCodFil()) //cod. participante na RD0
	DbSelectArea('RE0')
	cIndKeyRE0	:= "RE0_RECLAM"
	cArqRE0		:= CriaTrab( Nil,.F.)
	IndRegua("RE0",cArqRE0,cIndKeyRE0,,,'',.T.)
	nIndexRE0	:= RE0->(RetIndex())+1
	RE0->(DbSetOrder(nIndexRE0))
	DbSelectArea('RE0')
	If !(RE0->(DbSeek(cRd0Cod)))
		AADD(aNotSx9Check,"RE0")
	EndIf

	//RD0
	DbSelectArea('RD0')
	RD0->(DbSetOrder(6))
	If RD0->(DbSeek(xFilial("RD0", SRA->RA_FILIAL )+SRA->RA_CIC+cRd0Cod ) )
		aAdd( aAlias, "RD0" )
		aAdd( aAreas , Array( 05 ) )
		nAreas := Len( aAreas )
		aAreas[nAreas,01] := RD0->( GetArea() )
		aAreas[nAreas,02] := {"RD0_CIC"}
		aAreas[nAreas,03] := ""
		aAreas[nAreas,04] := { || NIL }
		aAreas[nAreas,05] := "RA_CIC"
	else
		AADD(aNotSx9Check,"RD0")
	EndIf

	RD0->(DbCloseArea())

	//DA4 - Motoristas
	If ChkFile("DA4")
		cQryDA4 := "SELECT DA4_FILIAL, DA4_COD, R_E_C_N_O_ AS RECDA4 "
		cQryDA4 += "FROM "	+ RetSqlName( "DA4" ) + " "
		cQryDA4	+= "WHERE DA4_FILBAS = '"   + SRA->RA_FILIAL + "' "
		cQryDA4	+= "AND DA4_MAT	= '"	    + SRA->RA_MAT    + "' "
		cQryDA4	+= "AND D_E_L_E_T_ <> '*' "

		cQryDA4	:= ChangeQuery(cQryDA4)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQryDA4),"DA4QRY")

		AAdd(aNotSx9Check,"DA4")

		IF !DA4QRY->( Eof() )
			DA4->(DBGOTO(DA4QRY->RECDA4))

			aAdd( aAlias, "DA4" )
			aAdd( aAreas , Array( 05 ) )
			nAreas := Len( aAreas )
			aAreas[nAreas,01] := DA4->( GetArea() )
			aAreas[nAreas,02] := {"DA4_FILBAS","DA4_MAT"}
			aAreas[nAreas,03] := ""
			aAreas[nAreas,04] := { || NIL }
			aAreas[nAreas,05] := "RA_FILIAL+RA_MAT"
			lDelDA4 := .F.
		ELSE
			lDelDA4 := .T.
		EndIf

		DA4QRY->(DbCloseArea())
	Endif

	( cAlias )->( MsGoto( nReg ) )
	cKeyDel	:= cCodigo

	lChkDelOk  := ChkDelRegs(	cAlias				,;	// Alias do Arquivo Principal
								nReg				,;	// Registro do Arquivo Principal
								nOpc				,;	// Opcao para a AxDeleta
								xFilial( cAlias )	,;	// Filial do Arquivo principal para Delecao
								cKeyDel				,;	// Chave do Arquivo Principal para Delecao
								aAreas				,;	// Array contendo informacoes dos arquivos a serem pesquisados
								Nil					,;	// Mensagem para MsgYesNo
								Nil					,;	// Titulo do Log de Delecao
								Nil					,;	// Mensagem para o corpo do Log
								.F.				 	,;	// Se executa AxDeleta
								!lGp010Auto  		,;	// Se deve Mostrar o Log
								@axErro				,;	// Array com o Log de Exclusao
								Nil				 	,;	// Array com o Titulo do Log
								Nil					,;	// Bloco para Posicionamento no Arquivo
								Nil					,;	// Bloco para a Condicao While
								Nil					,;	// Bloco para Skip/Loop no While
								Nil					,;	// Verifica os Relacionamentos no SX9
								aNotSx9Check		,;	// Alias que nao deverao ser Verificados no SX9
								Nil				 	,;	// Se faz uma checagem soft
							   	lGp010Auto			 ;  // Se esta executando rotina automatica        */
							)

    If lGp010Auto .And. Len( axErro ) > 0
		aEval( axErro, {|x| If( ( ValType(x)=="C" .And. !Empty( x ) ), AutoGrLog( x ), ) } )
	EndIf

	// Integracao Protheus x RM Classis Net (RM Sistemas)
	If lChkDelOk .And. GetNewPar("MV_CLASSIS", .F.)
		// Antes de Excluir, verifica se pode ser excluido
		// Verifica se esse professor esta sendo utilizado nas tabelas relacionadas no RM Classis Net (RM Sistemas)
		lChkDelOk := ClsConsPrf()
	EndIf

Return( lChkDelOk  )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ DelChkTransf ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 05/02/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Verifica se existem transferencias para o funcionario.	      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DelChkTransf( nReg , aLog )
Local lDelOk := .T.

SRA->( MsGoto( nReg ) )
If !( lDelOk := !( fTransf( Nil , Nil , Nil , Nil , Nil , Nil , Nil ,.T. ) ) )
	aAdd( aLog , "SRE" + " - " + STR0051 )	// "Existem Transferencias para o Funcionario"
EndIf

Return( lDelOk )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ SraRelRd0 	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 05/02/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualiza o SR9 com as alteracoes efetuadas pela RD0.		  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SraRelRd0( nRd0Recno , aHeader , lChkPessoa , cLstCodRd0 )
Local aSvKeys		:= GetKeys()
Local aArea 		:= GetArea()
Local aAreaRD0		:= RD0->( GetArea() )
Local aAreaSRA		:= SRA->( GetArea() )
Local cProcName3	:= Upper( AllTrim( ProcName( 3 ) ) )
Local cProcName4	:= Upper( AllTrim( ProcName( 4 ) ) )
Local cProcName5	:= Upper( AllTrim( ProcName( 5 ) ) )
Local cMsgErr		:= ""
Local cCic
Local cSeek
Local lSraRelRd0	:= .F.
Local lUndoRelRdz	:= .F.
Local nSraRdzOrd	:= GetRdzIndRel( "SRA" )
Local nSvRecno
Local aFldRel		:= If(aOfusca[2], FwProtectedDataUtil():UsrNoAccessFieldsInList( {"RA_NOME","RD0_NOME"} ), {})
Local lOfusca		:= Len(aFldRel) > 0
DEFAULT lChkPessoa := .T.

	nRd0Recno := 0

	Begin Sequence

		If !(cPaisLoc == "RUS")
			If 	(;
					!( "GPEA010MNT" $ ( cProcName3 + cProcName4 + cProcName5 ) );
					 .And.;
					!( "TRM100ROT"  $ ( cProcName3 + cProcName4 + cProcName5 ) );
				)
				Break
			EndIf

			If Empty( GetMemVar( "RA_MAT" ) )
				MsgInfo( OemToAnsi( STR0052 ) )	// "Preencha o codigo da Matricula"
				Break
			EndIf

			If ( lChkPessoa )
				If ( ExistePessoa( "SRA" , xFilial("SRA") + GetMemVar( "RA_MAT" ) , cEmpAnt , cFilAnt , .T. ) )
					cLstCodRd0 := RD0->RD0_CODIGO
	  			   MsgInfo( OemToAnsi( STR0235 ) ) 	// "Ja existe relacionamento para este funcionario."
					Break
				EndIf
			EndIf
		EndIf

		If ( IsMemVar( "RA_CIC" ) )
			cCic := GetMemVar( "RA_CIC" )
	        If !Empty( cCic )
				RD0->( dbSetOrder( RetOrdem( "RD0" , "RD0_FILIAL+RD0_CIC" ) ) )
				cSeek := ( xFilial( "RD0" , xFilial("SRA") ) + cCic )
				If RD0->( dbSeek( cSeek , .F. ) )
					nSvRecno := RD0->( Recno() )
					If ( RD0->RD0_MSBLQL <> "2" )
						While RD0->( !Eof() .And. ( cSeek == RD0_FILIAL + RD0_CIC ) )
							If ( RD0->RD0_MSBLQL == "2" )
								nSvRecno := RD0->( Recno() )
								Exit
							EndIf
							RD0->( dbSkip() )
						EndDo
					EndIf
					RD0->( MsGoto( nSvRecno ) )
					If !lGp010Auto
						If !(cPaisLoc == "RUS")
							lSraRelRd0 := MsgYesNo( OemToAnsi( STR0043 + " ( " + RD0->RD0_CODIGO + " - " + If(lOfusca, Replicate('*',15), AllTrim( RD0->RD0_NOME )) + " ) " + STR0044 + AllTrim(FWX3Titulo("RA_CIC")) + STR0439 + SRA->RA_MAT + " - " + If(lOfusca, Replicate('*',15), AllTrim( SRA->RA_NOME )) + " ), " + STR0045 ) )
							//"O participante/A Pessoa ("###") possui o mesmo numero de CPF informado para a matrícula ("###"), criar relacionamento?
						Else
							lSraRelRd0 := .T.
						EndIf
					Else
						lSraRelRd0 := .F.
					EndIf
					If lSraRelRd0
						//Caso seja incluido via Cadastro do Participante
						If Type("cArmCodRd0") == "U"
							Private cArmCodRd0	:= ""		// Armazena o Cod RD0 da pessoa antes de inciar a cópia
						EndIf
						If Empty(cArmCodRd0)
							cArmCodRd0 := RD0->RD0_CODIGO
							fSraSenha()
						EndIf

						nRd0Recno := nSvRecno
						RD0->( dbSetOrder( RetOrdem( "RD0" , "RD0_FILIAL+RD0_CODIGO" ) ) )
						Break
					EndIf
					lNewRelRd0	:=	lSraRelRd0    // Indica que ja existe participante para o funcionario mas nao sera feito relacionamento
				EndIf
				RD0->( dbSetOrder( RetOrdem( "RD0" , "RD0_FILIAL+RD0_CODIGO" ) ) )
			Else
				lNewRelRd0:= .F.   // Nao gera relacionamento quando nao foi cadastrado o CPF
			EndIf
		EndIf

	End Sequence

	CursorWait()

	If !Empty( nRd0Recno )
		RD0->( MsGoto( nRd0Recno ) )
		fUpdateEnt( RD0->RD0_CODIGO , "SRA" , xFilial( "SRA" ) + GetMemVar( "RA_MAT" ) , nSraRdzOrd , cEmpAnt , cFilAnt )
	EndIf

	RestArea( aAreaRd0 )
	RestArea( aAreaSRA )
	RestArea( aArea )
	RestKeys( aSvKeys , .T. )

	CursorArrow()

Return( lSraRelRd0 )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ SraShwRel 	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 05/02/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualiza a SR9 com as alteracoes efetuadas pela RD0.		  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SraShwRel( nRd0Recno )
Local cProcName3	:= Upper( AllTrim( ProcName( 3 ) ) )
Local cProcName4	:= Upper( AllTrim( ProcName( 4 ) ) )
Local cProcName5	:= Upper( AllTrim( ProcName( 5 ) ) )


	Begin Sequence

		If 	(;
				!( "GPEA010MNT" $ ( cProcName3 + cProcName4 + cProcName5 ) );
				 .And.;
				!( "TRM100ROT"  $ ( cProcName3 + cProcName4 + cProcName5 ) );
			)

			Break
		EndIf

		If Empty( nRd0Recno )
			If ( EntExisteRel( "SRA" , xFilial("SRA")+GetMemVar( "RA_MAT" ) , cEmpAnt , cFilAnt , .T. ) )
				nRd0Recno := RD0->( Recno() )
			Else
				nRd0Recno := 0
			EndIf
		EndIf

		If !Empty( nRd0Recno )

			RD0->( MsGoto( nRd0Recno ) )
			Apda020Vis( "RD0" , nRd0Recno , 2 )
		Else
			MsgInfo( OemToAnsi( STR0041 ) ) // "Nao existe relacionamento a ser visualizado."
		EndIf

	End Sequence

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ SraUpdtSr9	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 03/02/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualiza a SR9 com as alteracoes efetuadas pela RD0.	      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function SraUpdtSr9( cAlias , aSraFields )
Local aArea		:= GetArea()
Local aAreaAls	:= ( cAlias )->( GetArea() )
Local nField
Local nFields

	nFields := Len( aSraFields )
	For nField := 1 To nFields
		fGravaSr9( aSraFields[ nField , 01 ] , aSraFields[ nField , 04 ] , aSraFields[ nField , 03 ],,AllTrim( aSraFields[ nField , 01 ] ) $ "RA_ADCCONF*RA_ADCTRF*RA_PERCSAT" )
	Next nField

	RestArea( aAreaAls )
	RestArea( aArea )

Return( Nil )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010AltSal ³ Autor ³ Mauro Sergio      ³ Data ³ 22/04/96 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Consistencia de campos que refletem no Historico Salarial.³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010	                                               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010AltSal()
Local aArea		:= GetArea()
Local nTipoOper := 1
Local bCond     := {|x| (( IsMemVar( "RA_SALARIO" ) .and. Round( NoRound(GetMemVar( "RA_SALARIO" ),3),2) # Round( NoRound(SRA->RA_SALARIO,3),2)) .OR.  ;
  			 ( IsMemVar( "RA_CODFUNC" ) .And. GetMemVar( "RA_CODFUNC" ) # SRA->RA_CODFUNC) .Or.  ;
			 ( lTroca .And. IsMemVar( "RA_ANTEAUM" ) .And. Round( NoRound(GetMemVar( "RA_ANTEAUM" ),3),2) # Round( NoRound(SRA->RA_ANTEAUM,3),2) ) .Or. ;
			 ( IsMemVar( "RA_CARGO"   ) .And. GetMemVar( "RA_CARGO"   ) # SRA->RA_CARGO ) .Or.;
			 ( IsMemVar( "RA_CATFUNC" ) .And. GetMemVar( "RA_CATFUNC" ) # SRA->RA_CATFUNC ) ) }
Local bCondAlt	:= {||}
Local bCondAux	:= {||}
Local bRetPE	:= {||}
Local cCond     := ""
Local lRet      := .T.
Local lTransf	:= IsInCallStack( "GPEA180" )
Local cRot  	:= fGetRotOrdinar(lTransf)
Local lTroca

	IF FunName() == "TCFA040" .and. lGp010Auto
		Return(.T.)
	EndIF

	If Type("lUsaAnteAum") == "U"
		Private lUsaAnteAum :=.F.
		lUsaAnteAum := fChecaAnteAum()
	EndIf

	If Type("lGp010Auto") == "U"
		Private lGp010Auto := .F.
	EndIf

	If Type("aAutoOri") == "U"
		Private aAutoOri := {}
	EndIf

	lTroca    := (ValType(GetSX3Cache('RA_ANTEAUM', 'X3_TAMANHO')) == 'N' .And. GetSX3Cache('RA_ANTEAUM', 'X3_TAMANHO') > 0 .And. lUsaAnteAum )

	cCond := '(( IsMemVar( "RA_SALARIO" ) .And. GetMemVar( "RA_SALARIO" ) # SRA->RA_SALARIO) .Or. '
	cCond += ' ( IsMemVar( "RA_CODFUNC" ) .And. GetMemVar( "RA_CODFUNC" ) # SRA->RA_CODFUNC) .Or. '
	cCond += ' ( IsMemVar( "RA_ANTEAUM" ) .And. GetMemVar( "RA_ANTEAUM" ) # SRA->RA_ANTEAUM) .Or. '
	cCond += ' ( IsMemVar( "RA_CARGO"   ) .And. GetMemVar( "RA_CARGO"   ) # SRA->RA_CARGO  ) .Or. '
	cCond += ' ( IsMemVar( "RA_CATFUNC" ) .And. GetMemVar( "RA_CATFUNC" ) # SRA->RA_CATFUNC ) ) '

	// Ponto de Entrada para alterar a condicao (bCond) padrao do sistema para gravacao do historico de alteracao de salarios
	If lGpe10Hist
		bCondAux := ExecBlock("GPE10HIST",.F.,.F.,{nTipoOper,bCond,cCond})
		bCond    := If( ValType(bCondAux) = "B" , bCondAux , bCond )   // Somente altera condicao padrao do sistema se o retorno do Ponto de Entrada for um bloco de codigo
	EndIf

	If Eval( bCond )

		// Caso ocorra alteracao de categoria, obrigatorio alterar o salario e data
		If ( !(M->RA_CATFUNC == SRA->RA_CATFUNC) .And. (GetMemVar( "RA_TIPOALT" ) == Space(3) .Or. Empty(GetMemVar( "RA_DATAALT" ) )) )
			MsgAlert(OemToAnsi( STR0218 ) + CRLF + OemToAnsi( STR0219 ),OemToAnsi( STR0076 )) //"Ocorreu alteracao de Categoria!" "Favor informar data e tipo de alteração salarial!" "Atencao"
			lRet := .F.
		EndIf

	   If ( lRet )
			// Condicao padrao da alteracao salarial - se Tipo e Data da Alteracao estao vazios
			bCondAlt := {|| GetMemVar( "RA_TIPOALT" ) == Space(3) .Or. Empty( GetMemVar( "RA_DATAALT" ) )}

			// Ponto de Entrada para alterar a condicao (bCondPE) padrao do sistema para validacao da alteracao salarial
		 	If lGpe10AltS
		  		bRetPE 		:= ExecBlock( "GPE10ALTS", .F., .F. )
		   		bCondAlt	:= If( ValType( bRetPE ) = "B" , bRetPE , bCondAlt )   //Somente altera condicao padrao do sistema se o retorno do Ponto de Entrada for um bloco de codigo
		    EndIf

			// Validar o periodo de aumento quando houver alteracao de salarios
			If cPaisLoc $ "MEX|PAR"
				DbSelectArea( "RCH" )
				DbSetOrder( 1 ) // RCH_FILIAL + RCH_PROCESS + RCH_PER + RCH_NUMPAG + RCH_ROTEIR
				If ( IsMemVar( "RA_SALARIO" ) .And. GetMemVar( "RA_SALARIO" ) # SRA->RA_SALARIO)
					DbSeek( xFilial( "RCH" ) + GetMemVar( "RA_PROCES" ) + GetMemVar( "RA_PERAUM" ) + GetMemVar( "RA_PAGAUM" ) + cRot, .F. )
			     	If Eof()
			     		Help(' ',1,"GPPERAUM",,OemToAnsi( STR0074 ) , 1 , 0) // "Periodo de Aumento de Salario nao e valido!"
			     		lRet := .F.
			     	EndIf
				EndIf
			EndIf

			If (Eval( bCondAlt ) .Or. !( lRet := If(cPaisLoc $ "MEX|COS|PAR",gp010CpoTLab(),.T.) )) .and. cPaisLoc <> "COL"

				If !lGp010Auto .Or. (lGp010Auto .And. CpoNoArray(aAutoOri))
					Help("",1,"GPTIPOALT",,STR0321,1,0) // "Houve alteração salarial e os campos Tipo ou Data da Alteração de Salario nao foram preenchidos."
		   			lRet := .F.
				Else
					// Rotina Automática - Restaura o conteúdo dos campos se não foi feita alteração salarial
					// e o salario tenha sido alterado indevidamente por gatilhos(SX7)
					SetMemVar("RA_SALARIO"	,SRA->RA_SALARIO)
					If lUsaAnteAum
						SetMemVar("RA_ANTEAUM"	,SRA->RA_ANTEAUM)
					EndIf
				EndIf
			Else
				lRet	:=	PcoVldLan('000084','04','GPEA010')
			EndIf

			// Verifica se faltam campos para a gravacao do historico salarial.
			If lRet
		   		If !( lRet := Gp010ExAlt() )
					Return(lRet)
		   		EndIf
			EndIf

		EndIf

	EndIf


	// Valida quando Tipo de Contrato estiver preenchido como "Prazo Determinado", deve ser preenchido a clausula assecuratoria
	If cPaisLoc == "BRA" .And. ;
		( M->RA_TPCONTR == "2" .And. Empty(M->RA_CLAURES) )
	   	MsgAlert(OemToAnsi( STR0220 ) +CRLF+ OemToAnsi( STR0222 ), OemToAnsi( STR0076 )) //"Tipo de Contrato Determinado !"###"Favor informar se e com Clausula assecuratoria ou nao###"Atencao"
		lRet := .F.
	EndIf

	RestArea(aArea)

Return( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fGravaSr3 ³ Autor ³ Mauro Sergio         ³ Data ³ 22/04/96 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Gravacao da Alteracao Salarial.                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³ fGravaSr3()                                                ³
|          | nRelAtua - Se 2 indica se a funcao foi chamada pelo        ³
|		   |			GPER200,se integra PCO e qual codigo PCO usar.	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA010                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGravaSr3(dRaDataAlt,cTipAum,nSalario,nRelAtua,nOpc,nAtuDiss,nSalarAnt,lIntTAF180,lRet2206)
Local aArea			:= GetArea()
Local aR7AllRecs	:= {}
Local cDescCar		:= ""
Local cFun			:= ""
Local lLock			:= .F.
Local lAchouAlt		:= .T.
Local lGpAltSal		:= ExistBlock( "GPALTSAL" )
Local lTroca
Local nSalMes		:= 0
Local nPosDt		:= 0
Local nPosTp		:= 0
Local nR7SeqTam
Local cSeq			:= "1"
Local lGravaHist	:= SuperGetMv( "MV_HSTSAL" , NIL , .F. )
Local lGPR200		:= Upper(AllTrim(FunName())) $ "GPEA010"
Local lGpa180		:= Upper(AllTrim(FunName())) $ "GPEA180"

Private lGestPubl	:= IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

Default nAtuDiss	:= 1 ///Atualiza Base Dissidio(1-Nao;2-Sim)
Default nSalarAnt	:= 0
Default lIntTAF180	:= .F.	//Se gerou evento na transferência
Default lRet2206 	:= .F.

	fSeqHistSal( @aR7AllRecs, @nR7SeqTam ) // Funcao para preenchimento dos campos R7_SEQ e R3_SEQ

	If Type( "lHistSal" ) == "U"
		_SetOwnerPrvt(	"lHistSal" , .F. )
	EndIf

	If Type("lUsaAnteAum") =="U"
		Private lUsaAnteAum :=.F.
		lUsaAnteAum := fChecaAnteAum()
	EndIf

	// Verifica se campo RA_ANTEAUM existe atraves da verificacao no dicionario SX3
	lTroca := (ValType(GetSX3Cache('RA_ANTEAUM', 'X3_TAMANHO')) == 'N' .And. GetSX3Cache('RA_ANTEAUM', 'X3_TAMANHO') > 0 .and. lUsaAnteAum )

	nRelAtua := If(nRelAtua == Nil, 0, nRelAtua)
	nOpc := If(nOpc == Nil, 0, nOpc)

	If FindFunction("SPFilterOff")        // Verifica se existe a funcao
		SPFilterOff( { "SR3", "SR7" } )  // Desabilita o filtro da tabela
	EndIf

	// Verifica se ja teve alguma alteracao salarial se nao grava a anterior como primeira
	dbSelectArea("SR7")
	If SR7->( !dbSeek(SRA->RA_FILIAL+SRA->RA_MAT) )

	    cFun := DescFun( SRA->RA_CODFUNC , SRA->RA_FILIAL )

		If SQ3->( dbSeek(xFilial("SQ3")+SRA->RA_CARGO+SRA->RA_CC)) .Or. SQ3->( dbSeek(xFilial("SQ3")+SRA->RA_CARGO))
			cDescCar := SQ3->Q3_DESCSUM
	   	EndIf
		// Grava o Salario anterior quando nao existir alteracao
		dbSelectArea("SR7")
		If SR7->( RecLock("SR7",.T.,.T.) )

			// Se gestao Publica
			If 	lGestPubl .AND. SRA->RA_REGIME == "2"
				SR7->R7_FILIAL  := SRA->RA_FILIAL
				SR7->R7_MAT     := SRA->RA_MAT
				SR7->R7_DATA    := SRA->RA_ADMISSA
				SR7->R7_TIPO    := "001"
				SR7->R7_FUNCAO  := SRA->RA_CODFUNC
				SR7->R7_DESCFUN := cFun
				SR7->R7_TIPOPGT := SRA->RA_TIPOPGT
				SR7->R7_CATFUNC := SRA->RA_CATFUNC
				SR7->R7_USUARIO := STR0017  //"Sistema"
		   		SR7->R7_CARGO   := SRA->RA_CARGO
				SR7->R7_DESCCAR	:= cDescCar
				SR7->R7_SEQ		:= "1"
				SR7->R7_EFUNCAO	:=	SRA->RA_CODFUNC
				SR7->R7_EDESCFU	:=	Alltrim(POSICIONE("SRJ",1,FwxFilial("SRJ")+SR7->R7_EFUNCAO,"RJ_DESC"))
				SR7->R7_ECAFUNC	:=	SRA->RA_CATFUNC
				SR7->R7_ECARGO	:=	SRA->RA_CARGO
				SR7->R7_EDESCCA	:=	Alltrim(POSICIONE("SQ3",1,FwxFilial("SQ3")+SR7->R7_ECARGO,"Q3_DESCSUM"))

			Else
				SR7->R7_FILIAL   := SRA->RA_FILIAL
				SR7->R7_MAT      := SRA->RA_MAT
				SR7->R7_DATA     := SRA->RA_ADMISSA
				SR7->R7_TIPO     := "001"
				SR7->R7_FUNCAO   := SRA->RA_CODFUNC
				SR7->R7_DESCFUN  := cFun
				SR7->R7_TIPOPGT  := SRA->RA_TIPOPGT
				SR7->R7_CATFUNC  := SRA->RA_CATFUNC
				SR7->R7_USUARIO  := STR0017  //"Sistema"

				SR7->R7_CARGO   := SRA->RA_CARGO
				SR7->R7_DESCCAR	:= cDescCar

				If ValType(nR7SeqTam) == "N"
					SR7->R7_SEQ		:= Strzero( 1, nR7SeqTam )
				EndIf

			Endif

			SR7->( MsUnLock() )
			SR7->( FKCOMMIT() )
		EndIf

		dbSelectArea("SR3")
		If	RecLock("SR3",.T.,.T.)

			// Se gestao Publica
			If 	lGestPubl .AND. SRA->RA_REGIME == "2"
				SR3->R3_FILIAL   	:= SRA->RA_FILIAL
				SR3->R3_MAT      	:= SRA->RA_MAT
				SR3->R3_DATA     	:= SRA->RA_ADMISSA
				SR3->R3_PD       	:= "000"
				SR3->R3_DESCPD   	:= OemToAnsi(STR0018)  //"SALARIO BASE"
				SR3->R3_VALOR    	:= SRA->RA_SALARIO
				SR3->R3_TIPO     	:= "001"
				SR3->R3_ANTEAUM	:= If(lTroca, SRA->RA_ANTEAUM, SRA->RA_SALARIO)
				SR3->R3_SEQ		:= "1"
				SR3->R3_CTABELA	:= 	''
				SR3->R3_CTABNIV	:= 	''
				SR3->R3_CTABFAI	:= 	''
				SR3->R3_TPSBCOM	:= ''
				SR3->R3_PERCCOM	:= 	0
				SR3->R3_CSALAR	:= 	0
				SR3->R3_TABELA	:=	SRA->RA_TABELA
				SR3->R3_TABNIVE	:=	SRA->RA_TABNIVE
				SR3->R3_TABFAIX	:=	SRA->RA_TABFAIX
			Else
				SR3->R3_FILIAL   := SRA->RA_FILIAL
				SR3->R3_MAT      := SRA->RA_MAT
				SR3->R3_DATA     := SRA->RA_ADMISSA
				SR3->R3_PD       := "000"
				SR3->R3_DESCPD   := OemToAnsi(STR0018)  //"SALARIO BASE"

				If cPaisLoc == "COS"
					lHistSal := .T.
					If !fSalario_COS(SRA->RA_FILIAL, SRA->RA_MAT, @nSalMes,, SRA->RA_ADMISSA)
						Return
					EndIf
					nSalario := nSalMes
					SR3->R3_VALOR    := nSalMes
				Else
					SR3->R3_VALOR    := Iif(nSalarAnt == 0,SRA->RA_SALARIO,nSalarAnt)
				EndIf

				SR3->R3_TIPO     := "001"
				SR3->R3_ANTEAUM	:= If(lTroca, SRA->RA_ANTEAUM, SRA->RA_SALARIO)

				If ValType(nR7SeqTam) == "N"
					SR3->R3_SEQ		:= Strzero( 1, nR7SeqTam )
				EndIf
			Endif
			If (lIntTAF .Or. lMiddleware) .And. ( lGPR200 .Or. lGpa180 )
				SR3->R3_INTGTAF := SR3->R3_DATA
			Endif
			SR3->( MsUnLock() )
		EndIf
	EndIf

	If !nOpc == 3
		If !cPaisLoc == "COS" .Or. (cPaisLoc == "COS" .And. !Empty(cTipAum)) //Para a Costa Rica nao pode gerar registro de aumento qdo nao for informado o tipo do aumento
			// Gravacao da alteracao salarial atual
			cFun := DescFun(If( IsMemVar("RA_CODFUNC"), GetMemVar("RA_CODFUNC") ,SRA->RA_CODFUNC ),SRA->RA_FILIAL)

			If SQ3->( dbSeek(xFilial("SQ3")+M->RA_CARGO+M->RA_CC)) .or. SQ3->( dbSeek(xFilial("SQ3")+M->RA_CARGO))
				cDescCar := SQ3->Q3_DESCSUM
			EndIf

			//Se for Gestao Publica
			If 	lGestPubl .AND. SRA->RA_REGIME == "2"
				dbSelectArea("SR7")
				IF 	dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+Dtos(dRaDataAlt) )
					cSeq := Soma1(SR3->R3_SEQ)
				EndIf
			EndIf

			dbSelectArea("SR7")
			If dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+Dtos(dRaDataAlt)+cTipAum )
				lLock := RecLock("SR7",.F.,.T.)
			Else
				lLock := RecLock("SR7",.T.,.T.)
				lAchouAlt := .F.
			EndIf

			If ( lLock )

				//Se for Gestao Publica
				If 	lGestPubl .AND. SRA->RA_REGIME == "2"
					SR7->R7_FILIAL   	:= 	SRA->RA_FILIAL
					SR7->R7_MAT      	:= 	SRA->RA_MAT
					SR7->R7_DATA     	:= 	dRaDataAlt
					SR7->R7_TIPO     	:= 	cTipAum
					SR7->R7_FUNCAO   	:= 	If( IsMemVar("RA_CODFUNC"), GetMemVar("RA_CODFUNC"),SRA->RA_CODFUNC )
					SR7->R7_DESCFUN  	:= 	cFun
					SR7->R7_TIPOPGT  	:= 	If( IsMemVar("RA_TIPOPGT"),GetMemVar("RA_TIPOPGT"),SRA->RA_TIPOPGT )
					SR7->R7_CATFUNC  	:= 	If( IsMemVar("RA_CATFUNC"),GetMemVar("RA_CATFUNC"),SRA->RA_CATFUNC )
					SR7->R7_USUARIO  	:= 	SubStr(cUsuario,7,15)
		   			SR7->R7_CARGO   	:= 	SRA->RA_CARGO
					SR7->R7_DESCCAR	:= 	cDescCar
					SR7->R7_SEQ		:= 	cSeq
					SR7->R7_EFUNCAO	:=	SRA->RA_CODFUNC
					SR7->R7_EDESCFU	:=	Alltrim(POSICIONE("SRJ",1,FwxFilial("SRJ")+SR7->R7_EFUNCAO,"RJ_DESC"))
					SR7->R7_ECAFUNC	:=	SRA->RA_CATFUNC
					SR7->R7_ECARGO	:=	SRA->RA_CARGO
					SR7->R7_EDESCCA	:=	Alltrim(POSICIONE("SQ3",1,FwxFilial("SQ3")+SR7->R7_ECARGO,"Q3_DESCSUM"))

					If lGpe10InNG .And. M->RA_CODFUNC <> SRA->RA_CODFUNC
						fSendDadosApi("A",dRaDataAlt,cSeq,cTipAum)
					EndIf

				Else
					SR7->R7_FILIAL   := SRA->RA_FILIAL
					SR7->R7_MAT      := SRA->RA_MAT
					SR7->R7_DATA     := dRaDataAlt
					SR7->R7_TIPO     := cTipAum
					SR7->R7_FUNCAO   := If( IsMemVar("RA_CODFUNC"), GetMemVar("RA_CODFUNC"),SRA->RA_CODFUNC )
					SR7->R7_DESCFUN  := cFun
					SR7->R7_TIPOPGT  := If( IsMemVar("RA_TIPOPGT"),GetMemVar("RA_TIPOPGT"),SRA->RA_TIPOPGT )
					SR7->R7_CATFUNC  := If( IsMemVar("RA_CATFUNC"),GetMemVar("RA_CATFUNC"),SRA->RA_CATFUNC )
					SR7->R7_USUARIO  := SubStr(cUsuario,7,15)
					SR7->R7_CARGO    := GetMemVar("RA_CARGO")
					SR7->R7_DESCCAR	 := cDescCar

					If Len( aR7AllRecs ) > 0 .And. ( ( nPosDt := aScan( aR7AllRecs, { |x| x[ 1 ] == SR7->R7_DATA } ) ) > 0 ) // Existe alteracao salarial para a data informada
						If cPaisLoc <> "COL"
							If lAchouAlt // Mesmo tipo de aumento, entao localiza seq. e substitui

								nPosTp 	:= aScan( aR7AllRecs[ nPosDt, 2 ], { |x| x[ 2 ] == SR7->R7_TIPO } ) // Localiza registro do mesmo tipo de aumento
								SR7->R7_SEQ	:= aR7AllRecs[ nPosDt, 2, nPosTp, 3 ]
							Else // Tipo de aumento diferente, entao atualiza seq. como sendo a ultima

								aSort( @aR7AllRecs[ nPosDt, 2 ], , , { | x, y | x[ 3 ] < y[ 3 ] } )
								SR7->R7_SEQ	:= StrZero( Val( Soma1( aR7AllRecs[ nPosDt, 2, Len( aR7AllRecs[ nPosDt, 2 ] ), 3 ] ) ), nR7SeqTam )
							EndIf
						Else
							SR7->R7_SEQ		:= Alltrim(Str(Val(SR3->R3_SEQ)+1))
						EndIf
					Else // Nao existem quaisquer alteracoes salariais p/ a data informada, logo eh a primeira seq.
						If( ValType(nR7SeqTam) == "N", SR7->R7_SEQ := StrZero( 1, nR7SeqTam ), )
					EndIf

					If lGpe10InNG .And. M->RA_CODFUNC <> SRA->RA_CODFUNC
						fSendDadosApi("I",dRaDataAlt,SR7->R7_SEQ,cTipAum)
					EndIf

				EndIf
				SR7->( MsUnLock() )
				SR7->( FKCOMMIT() )
			EndIf

			If ( lLock )

				dbSelectArea("SR3")
				If dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+Dtos(dRaDataAlt)+cTipAum )
					lLock := RecLock("SR3",.F.,.T.)
				Else
					lLock := RecLock("SR3",.T.,.T.)
				EndIf

				If ( lLock )

					//Se for Gestao Publica
					If 	lGestPubl .AND. SRA->RA_REGIME == "2"
						SR3->R3_FILIAL   		:= SRA->RA_FILIAL
						SR3->R3_MAT      		:= SRA->RA_MAT
						SR3->R3_DATA     		:= dRaDataAlt
						SR3->R3_PD       		:= "000"
						SR3->R3_DESCPD   		:= OemToAnsi(STR0018)  //"SALARIO BASE"
						SR3->R3_VALOR    		:= nSalario
						SR3->R3_ANTEAUM		:= nSalario  //GSP sempre mantera o dissidio igual ao salario
						SR3->R3_TIPO     		:= cTipAum
						SR3->R3_SEQ			:= SR7->R7_SEQ
						SR3->R3_CTABELA		:= 	''
						SR3->R3_CTABNIV		:= 	''
						SR3->R3_CTABFAI		:= 	''
						SR3->R3_TPSBCOM		:= ''
						SR3->R3_PERCCOM		:= 	0
						SR3->R3_CSALAR		:= 	0

						If	SRA->RA_CATFUNC $ 'E,G,M,4,7,8,9' 	//E-Estagiário Mensalista,G-Estagiário Horista,MMensalistas,
							SR3->R3_TABELA	:= 	''				//4Adidos,7Membro Aposentado,8Servidor Aposentado e 9Pensionista.
							SR3->R3_TABNIVE	:= 	''
							SR3->R3_TABFAIX	:= 	''
						Else
							SR3->R3_TABELA	:=	SRA->RA_TABELA
							SR3->R3_TABNIVE	:=	SRA->RA_TABNIVE
							SR3->R3_TABFAIX	:=	SRA->RA_TABFAIX
						Endif

					Else

						SR3->R3_FILIAL   := SRA->RA_FILIAL
						SR3->R3_MAT      := SRA->RA_MAT
						SR3->R3_DATA     := dRaDataAlt
						SR3->R3_PD       := "000"
						SR3->R3_DESCPD   := OemToAnsi(STR0018)  //"SALARIO BASE"
						If cPaisLoc == "COS"
							lHistSal := .T.
							If !fSalario_COS(SRA->RA_FILIAL, SRA->RA_MAT, @nSalMes,, dRaDataAlt)
								Return
							EndIf
							nSalario := nSalMes
						ElseIf cPaisLoc == "DOM"
							SR3->R3_ANTEAUM := GetMemVar("RA_ANTEAUM")
						EndIf
						If nAtuDiss == 2
							SR3->R3_ANTEAUM	:=  nSalario
						Else
							SR3->R3_ANTEAUM	:= If(lTroca, GetMemVar("RA_ANTEAUM"), nSalario)
						EndIf
					EndIf
					SR3->R3_VALOR    := nSalario
					SR3->R3_TIPO     := cTipAum
					SR3->R3_SEQ		 := SR7->R7_SEQ
					If (lIntTAF .Or. lMiddleware) .And. ( lGPR200 .Or. lIntTAF180 .Or. lRet2206)
						SR3->R3_INTGTAF := SR3->R3_DATA
					Endif

					SR3->( MsUnLock() )

					If nRelAtua <> 0                			// Se nRelAtua == 2, funcao fGravaSr3 chamada pelo GPER200, realiza o lancamento no PCO com os parametros ('000087','01','GPER200')
						If nRelAtua == 2                        // Se nRelAtua == 1, funcao fGravaSr3 chamada pelo GPER200 e nao realiza lancamento no PCO
							PcoDetLan('000087','01','GPER200')  // Se nRelAtua == 0, funcao fGravaSr3 chamada pelo GPEA010, realiza o lancamento no PCO com os parametros ('000084','04','GPEA010')
						EndIf
					Else
						PcoDetLan('000084','04','GPEA010')
					EndIf

					// Ponto de Entrada para atualizar tabela personalizada
					If lGpAltSal
			        	Execblock("GPALTSAL",.F.,.F.,)
					EndIf

				EndIf
			EndIf
		EndIf
	EndIf

	RestArea( aArea )

	If FindFunction("SPFilterOff")       			// Verifica se existe a função
		SPFilterOff(  { "SR3", "SR7" } ,  .F.  )   // Ativa o filtro
	EndIf

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fGravaSr9 ³ Autor ³ Mauro Sergio        V.I  ³Data ³ 22/04/96 ³
³          ³           ³       ³ Marinaldo de Jesus  V.II ³     ³ 06/02/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Gravacao da alteracoes cadastrais na tabela SR9 de campos     ³
³          ³ com a funcao 'FHIST' no Valid.                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGravaSr9( cCampo , uConteudo , uContAnt, dDataAtu, lForceRec )
Local cValid
Local cVldUser
Local cContAnt
Local cConteudo
Local cTypeCnt1
Local cTypeCnt2
Local lHist			:= .F.
Local lSraLocked	:= IsLocked( "SRA" , SRA->( Recno() ) )
Local lLock			:= .F.
Local lSetCentury	:= __SetCentury("on")
Local lAddNew

DEFAULT dDataAtu  := dDataBase
DEFAULT lForceRec := .F.

If (dDataBase < SRA->RA_ADMISSA)
	dDataAtu := SRA->RA_ADMISSA
EndIf

	Begin Sequence

		cTypeCnt1 := ValType( uConteudo )
		cTypeCnt2 := ValType( uContAnt  )

		If !( cTypeCnt1 == cTypeCnt2 )
			Break
		EndIf

		cCampo	:= Upper( AllTrim( cCampo ) )
		cValid	:= GetSx3Cache( cCampo , "X3_VALID" )
		If !lForceRec .and. !( lHist := ( cValid <> Nil .And. ( "FHIST" $ Upper( cValid ) ) ) ) .and. !(cCampo $ "RA_ADCINS*RA_ASSIST*RA_CONFED*RA_MENSIND")
			cVldUser	:= GetSx3Cache( cCampo , "X3_VLDUSER"	)
			If !( lHist := ( cVldUser <> Nil .And. ( "FHIST" $ Upper( cVldUser ) ) ) )
				Break
			EndIf
		EndIf

		cPictCpo	:= Upper( AllTrim( GetSx3Cache( cCampo , "X3_PICTURE" ) ) )
		cContAnt	:= AllTrim( AllToChar( uContAnt , cPictCpo ) )
		cConteudo	:= AllTrim( AllToChar( uConteudo , cPictCpo ) )

		If !( lHist := cContAnt <> cConteudo )
			Break
		EndIf

		// Verifica se Houve alguma alteracao caso nao haja grava o anterior como primeira

		lAddNew := SR9->( !dbSeek( SRA->( RA_FILIAL + RA_MAT ) + cCampo ))

		cMes := If( ( Month(dDataAtu) -1 > 0 ) , StrZero( Month( dDataAtu ) -1 , 2 ) , "12" )
		cAno := If( cMes == "12" , StrZero( Year( dDataAtu ) - 1 , 4 ) , StrZero( Year( dDataAtu ) , 4 ) )

		// Tratamento de historico para admissao e demissao na Bolivia a fim de salvar
		// as movimentacoes ocorridas por reingresso do funcionario.
		If cPaisLoc	== "BOL" .And. ( cCampo == "RA_ADMISSA" .Or. cCampo == "RA_DEMISSA" )
			lAddNew := !( SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + cCampo + cAno + cMes ) ) )
		EndIf

		If ( lAddNew )
		    If SR9->( RecLock( "SR9" , .T. , .T. ) )
				SR9->R9_FILIAL   := SRA->RA_FILIAL
				SR9->R9_MAT      := SRA->RA_MAT
				SR9->R9_DATA     := SRA->RA_ADMISSA
				SR9->R9_CAMPO    := cCampo
				SR9->R9_DESC     := cContAnt
				SR9->( MsUnLock() )
			EndIf
		EndIf

		// Gravacao da alteracao cadastral atual
		lAddNew := !( SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + cCampo + Dtos( dDataBase ) ) ) )
		If SR9->( RecLock( "SR9" , lAddNew , .T. ) )
			SR9->R9_FILIAL   := SRA->RA_FILIAL
			SR9->R9_MAT      := SRA->RA_MAT
			SR9->R9_DATA     := dDataAtu
			SR9->R9_CAMPO    := cCampo
			SR9->R9_DESC     := cConteudo
			SR9->( MsUnLock() )
		EndIf

		If !( lSraLocked )
			lLock := SRA->( RecLock( "SRA" , .F. ) )
		Else
			lLock := lSraLocked
		EndIf

		If ( lLock )

			// Flega as Alteracoes correspondentes
			If ( cCampo $ "RA_NOME" )
				SRA->RA_ALTNOME := "S"
			ElseIf ( cCampo $ "RA_PIS" )
				SRA->RA_ALTPIS := "S"
			ElseIf ( cCampo $ "RA_NUMCP/RA_SERCP/RA_UFCP" )
				SRA->RA_ALTCP := "S"
			ElseIf ( cCampo $ "RA_BAIRRO/RA_MUNICIP/RA_ENDEREC/RA_COMPLEM/RA_ESTADO/RA_CEP" )
				SRA->RA_ALTEND := "S"
			ElseIf ( cCampo $ "RA_ADMISSA" )
				SRA->RA_ALTADM := "S"
			ElseIf ( cCampo $ "RA_OPCAO" )
				SRA->RA_ALTOPC := "S"
			EndIf

		EndIf

		If !( lSraLocked )
			SRA->( MsUnLock() )
		EndIf

	End Sequence

	If !( lSetCentury )
		__SetCentury("off")
	EndIf

Return( lHist )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ TestaAtf	  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 21/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Verifica se o modulo e o SIGAATF(Ativo Fixo).			      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                  	  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function TestaAtf()
Local lAtf := ( cModulo == "ATF" )

	If ( lAtf ) // Esta verificacao se deve ao fato de o GPEA010 ter saido no menu do modulo Ativo Fixo.
		ApMsgAlert(OemToAnsi(STR0024)) //  "Esta rotina nao pode ser acessada pelo Modulo Ativo Fixo"
	EndIf

Return( lAtf )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010SeqVld ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 17/10/01 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida a Sequencia de Turno preenchida.                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Campo RA_SEQTURN                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010SeqVld( lShowHelp , lVldTrcTurn )
Local cFil
Local cVar
Local cSeq
Local cTno
Local lRet	:= .T.
Local lUseSPJ := If(cPaisLoc == "BRA",.T., SuperGetMv("MV_USESPJ",NIL,"0")  == "1" )

	If lUseSPJ
		cAlias := "SPJ"  // Virtual
	Else
		cAlias := "RF2"  // Fisica - Fase4
	EndIf

	DEFAULT lShowHelp		:= .T.
	DEFAULT lVldTrcTurn		:= .F.

	if(IsInCallStack('RHIMPGEN') .Or. IsInCallStack('RHIMP01'))
		Return .T.
	endIf
	If ( IsMemVar( "RA_SEQTURN" ) .And. IsMemVar( "RA_TNOTRAB" ) )
		cVar	:= ReadVar()
		cSeq	:= If( cVar == "M->RA_SEQTURN", &( cVar ) , GetMemVar("RA_SEQTURN") )
		cTno	:= GetMemVar("RA_TNOTRAB")
		cFil	:= xFilial( cAlias , xFilial("SRA") )
		If ( ( lVldTrcTurn ) .Or. !Empty( cSeq ) )
			lRet := (cAlias)->( MsSeek( cFil + cTno + cSeq , .F. ) )
		EndIf
		If !( lRet )
			If ( lShowHelp )
				Help( ' ' , 1 , 'SEQTURNINV' , , OemToAnsi( STR0025 ) , 1 , 0 ) // "Sequencia nao cadastrada para o turno"
			EndIf
		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010SPFGrv ³ Autor ³ Marinaldo de Jesus ³ Data ³ 26/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Grava Turno Inicial, Sequencia e Regra no Cadastro de        ³
³          ³ Turnos de Trabalho(SPF).                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpea010SPFGrv( cFil , cMat , dData , cTnoTrab , cSeqTurn , cRegra, nJornada )
Private oObjREP		:= Nil

	If !( SPF->( MsSeek( xFilial("SPF",cFil) + cMat , .F. ) ) )
		If SPF->( RecLock( "SPF" , .T. ) )
			SPF->PF_FILIAL	:= xFilial( "SPF" , cFil )
			SPF->PF_MAT		:= cMat
			SPF->PF_DATA	:= dData
			SPF->PF_TURNODE	:= cTnoTrab
			SPF->PF_SEQUEDE := cSeqTurn
			SPF->PF_TURNOPA	:= cTnoTrab
			SPF->PF_SEQUEPA := cSeqTurn
			If cPaisLoc = "RUS"
				SPF->PF_REASC	:= "00" // Initial
			EndIf
			SPF->PF_REGRADE := cRegra
			SPF->PF_REGRAPA := cRegra
			If lGestPubl .AND. SRA->RA_REGIME == "2" //Se for Gestao de Folha Publica - SIGAGFP
				SPF->PF_JORNADE := nJornada
				SPF->PF_JORNAPA := nJornada
			EndIf
			SPF->( MsUnLock() )
		EndIf
	EndIf

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GPEA010Vld ³ Autor ³ Bruno Sobieski      ³ Data ³ 17/12/02 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao de campos do SRA atraves do X3_VALID.            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Campos RA_CATFUNC/RA_CARGO                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GPEA010Vld()
Local lRet		:= .T.
Local cVar		:= ReadVar()
Local cConteudo := &( cVar )
Local cValidos	:= ""

	If (;
			( cVar == "M->RA_CATFUNC" );
			.And.;
			( cPaisLoc <> "BRA" );
		)
		If ( cPaisLoc == "CHI" )
			cValidos	:=	"ACEGMT"
		ElseIf ( cPaisLoc == "PAR" )
			cValidos	:=	"AEDMTS123456"
		ElseIf ( cPaisLoc == "DOM" ) .Or. ( cPaisLoc == "COS" )
			cValidos	:=	"DEGHMST"
		ElseIf ( cPaisLoc == "ARG" )
			cValidos	:=	"ACDEGHMST"
		ElseIf ( cPaisLoc == "VEN" )
			cValidos	:=	"12ACDEGHIJMPST"
		ElseIf ( cPaisLoc == "BOL" )
			cValidos	:=	"ACHMPST"
		ElseIf ( cPaisLoc == "PER" )
			cValidos	:=	"CDEGHMST"
		ElseIf ( cPaisLoc == "EQU" )
			cValidos	:=	"12ACEHMOPS"
		ElseIf ( cPaisLoc == "RUS" )
			cValidos	:=	"HMR"
		Else
			cValidos	:=	"ACDEGHMST"
		EndIf
		If !( lRet := ( cConteudo $ cValidos ) )
			Help('',1,'GPEA010001') // "Categoria nao disponivel para esta versao"
	   EndIf
   ElseIf cPaisLoc == "BRA" .AND. cVar == "M->RA_CATFUNC" .AND. cConteudo $ "A|P" .And. ( Empty( M->RA_NUMCP ) .Or. Empty( M->RA_SERCP ) ) .And. ( X3Obrigat("RA_NUMCP") .Or. X3Obrigat("RA_SERCP") )
		Help(,,'HELP',,OemToAnsi(STR0436),1,0) //Preencha o conteúdo dos campos RA_NUMCP e RA_SERCP referentes a Carteira de Trabalho ou então atualize a base de dados para que eles não sejam mais obrigatórios
	EndIf

	If cVar == "M->RA_CARGO"
		If Empty(M->RA_CARGO)
			M->RA_DCARGO := ""
		EndIf

		lRet		:= 	Empty(cVar) .Or. SQ3->(DbSeek(xFilial("SQ3")+M->RA_CARGO+M->RA_CC))

		If !lRet
			cValidos:=	fDesc("SQ3",M->RA_CARGO,"Q3_CC")
			If !Empty(cValidos)
				Aviso(OemToAnsi(STR0076),OemToAnsi(STR0079)+M->RA_CARGO+OemToAnsi(STR0080)+M->RA_CC+	;
					  OemToAnsi(STR0081),{OemToAnsi(STR0077)},,OemToAnsi(STR0082))
					//"Atencao!" ### "Nao existe o Cargo " + RA_CARGO + " para o Centro de Custo " + RA_CC + ;
					//". Informe Cargo Valido." ### "OK" ### "Cargo informado invalido."
				lRet	:=	.F.
			Else
				lRet	:=	.T.
			EndIf
		EndIf

		If lRet
			lRet := ExistCpo("SQ3")
		EndIf

	EndIf


	If cVar == "M->RA_HRSMES"
		If M->RA_PERICUL > cConteudo .And. M->RA_ADCPERI == '2'
			M->RA_PERICUL := cConteudo
		EndIf
		If M->RA_INSMAX > cConteudo .And. M->RA_ADCINS == '2'
			M->RA_INSMAX := cConteudo
		EndIf
	EndIf
	/*Checagem dos dados de periculosidade*/
	If cModulo != "MNT" .And. !(cPaisLoc == "RUS")
		If  M->RA_HRSMES > 0 .And. M->RA_ADCPERI == '2'
			M->RA_PERICUL := M->RA_HRSMES
		Else
			M->RA_PERICUL := 0
		EndIf

		/*Checagem dos dados de insalubridade*/
		If  M->RA_HRSMES > 0 .And. IIF(IsmemVar("RA_ADCINS"),Val(M->RA_ADCINS) >= 2 , .t.)
			M->RA_INSMAX := M->RA_HRSMES
		Else
			M->RA_INSMAX := 0
		EndIf
	EndIf

	If cPaisLoc == "BRA" .And. cVar == "M->RA_BAIRRO"
		If Len(AllTrim(cConteudo)) > 20
			MsgAlert( oEmToAnsi(STR0401),;	// "Para a SEFIP é permitido o tamanho de 20 caracteres, sendo assim, o conteúdo do campo será truncado na SEFIP para o preenchimento do registro 14."
					  oEmtoAnsi(STR0402) )	// "Bairro"
		Endif
	Endif

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaMsBlQlVld  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 21/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valid para o campo RA_MSBLQL.								  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID do campo RA_MSBLQL                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaMsBlQlVld()
Local lRaMsBlQlVld := .T.

	Begin Sequence

		If !( lRaMsBlQlVld := Pertence( RaMsBlQlBox( .T. ) ) )
			Break
		EndIf

	End Sequence

Return( lRaMsBlQlVld )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaMsBlQlInit ³ Autor ³ Marinaldo de Jesus ³ Data ³ 21/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Inicializador padrao para o campo RA_MSBLQL.			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_RELACAO do campo RA_MSBLQL                               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³ "2"														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaMsBlQlInit()
Return( SubStr( RaMsBlQlBox( .T. ) , 2 , 1 ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaMsBlQlBox  ³ Autor ³ Marinaldo de Jesus  ³ Data ³ 21/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao³ Opcoes do cBox para o campo RA_MSBLQL.					      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_CBOX do campo RA_MSBLQL                               	  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³ cOpcBox													  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaMsBlQlBox( lValid , lRetDesc , cOpcDesc )
Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

	If !( lValid )

		If !( lRetDesc )
			cOpcBox := ( "1=" + STR0026 + ";" )	// "Nao"
			cOpcBox += ( "2=" + STR0027		  )	// "Sim"
		Else
			Do Case
				Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0026 )	// "Nao"
				Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0027 )	// "Sim"
			End Case
		EndIf
	Else
		cOpcBox := "12"
	EndIf

Return( cOpcBox )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010ValPE ³ Autor ³ Ricardo Duarte Costa ³ Data ³ 20/04/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Validacao de Ponto de Entrada.                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010ValPE(nOpcA)

Local lRet	:= .T.

	// Ponto de Entrada para checar os dados de inclusao/alteracao
	// de funcionarios. O retorno deve ser logico (.T. ou .F.)
	If ExistBlock("Gp010ValPE")
		lRet := ExecBlock("Gp010ValPE",.F.,.F.)
	EndIf

	// Integracao Protheus X RM Classis Net (RM Sistemas)
	If lRet .And. GetNewPar("MV_CLASSIS", .F.)
		If Empty(M->RA_CODTIT)
			If M->RA_CATFUNC $ GetMv("MV_ACCATPR")
				//Obriga o preenchimento do campo RA_CODTIT, caso o funcionario seja um professor
				Help(,,'HELP',,OemToAnsi(STR0223),1,0) // "A Titulacao deve ser informada para funcionario que exerce a funcao de professor."
				lRet := .F.
			ElseIf M->RA_CATFUNC $ AllTrim(GetNewPar("MV_GPCFUPR", ""))
				//Pergunta ao usuario se eh um funcionario que tambem exerce a funcao de professor
			    If MsgYesNo( STR0224 ) //Esse funcionario exerce a funcao de professor?
					//Obriga o preenchimento do campo RA_CODTIT, caso o funcionario seja um professor
					Help(,,'HELP',,OemToAnsi(STR0223),1,0) // "A Titulacao deve ser informada para funcionario que exerce a funcao de professor."
					lRet := .F.
				EndIf
			EndIf
		EndIf
			// Integracao Protheus x RM Classis
			// Verifica se este codigo de matricula ja foi utilizado
		   	If lRet .And. nOpcA == 3 .And. (M->RA_CATFUNC $ GetMv("MV_ACCATPR") .Or. M->RA_CATFUNC $ alltrim(GetNewPar("MV_GPCFUPR", "")) ) .And. ClsMatExis(M->RA_MAT)
				Aviso(STR0225,STR0226,{STR0227}) //"Devida a integracao com o TOTVS Educacional, nao e permitido utilizar codigos de matricula repetidos, mesmo que em filiais diferentes. Preencha um codigo de matricula ainda nao utilizado"
				lRet := .F.
			EndIf
	EndIf


Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GP010Categ ³ Autor ³ Equipe RH			  ³ Data ³ --/--/-- ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao de campos do SRA atraves do X3_VALID.            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Campo RA_CATFUNC                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GP010Categ( cCateg )

Private lGestPubl 	:= IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

	lRet := .T.

	If ALTERA
		If cCateg == "A" .And. SRA->RA_CATFUNC # "A"
			lRet := .F.
			Aviso( OemToAnsi(STR0076), OemToAnsi(STR0083),{OemToAnsi(STR0077)},,OemToAnsi(STR0084))
			//"Atencao" ### "Nao e possivel alterar a Categoria deste funcionario para Autonomo."### "OK" ### "Categoria incorreta"
			EndIf
		If lRet .And. GetNewPar("MV_CLASSIS",.F.) // Integracao Protheus X RM Classis Net (RM Sistemas)
			If M->RA_CATFUNC <> SRA->RA_CATFUNC
				If !(M->RA_CATFUNC $ GetMv("MV_ACCATPR")) .And. !(M->RA_CATFUNC $ alltrim(GetNewPar("MV_GPCFUPR", "")))
					lRet := ClsConsPrf("RA_CATFUNC")
				EndIf
			EndIf
		EndIf
	EndIf
    If (cPaisLoc == "BRA")
		If M->RA_CATFUNC $ "012345678"
			If !lGestPubl .OR. !(cModulo $ "VDF/GFP")	//Se nao utiliza o modulo de Gestao de Folha Publica - SIGAGFP, nao permite uso das categorias 0 a 9. Deve usar os modulos GFP e VDF quando estatutário.
				Aviso( OemToAnsi(STR0076), OemToAnsi(STR0308),{OemToAnsi(STR0077)},,OemToAnsi(STR0084))
				//"Atencao" ### "A categoria selecionada é exclusiva para a Gestão de Folha Pública."### "OK" ### "Categoria incorreta"
			EndIf
		ElseIf M->RA_CATFUNC == "9"
			If !lOpeSoc
				lRet := .F.
				Aviso( OemToAnsi(STR0076), OemToAnsi(STR0474),{OemToAnsi(STR0077)},,OemToAnsi(STR0084))
			Endif
		Endif
	EndIf

	//-- Validação para que no cadastro de autonomos / Pró-labore permita apenas as categorias A e P
	If IsInCallStack("GPEA265")
		If ! cCateg $ "A|P"
		 	lRet := .F.
		 	Help(, , 'HELP', ,  OemToAnsi(STR0324), 1, 0)
		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaDtAltVld   ³ Autor ³ Emerson Grassi Rocha ³ Data ³ 05/08/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do campo RA_DATAALT (Data de Alteracao Salarial)    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function RaDtAltVld()
Local lRet := .T.

	// Nao permitir Dt. Alteracao Salarial menor que Dt.Admissao
	If !Empty(M->RA_DATAALT) .And. M->RA_DATAALT < M->RA_ADMISSA
		Aviso(OemToAnsi(STR0076), OemToAnsi(STR0075), {OemToAnsi(STR0077)})	//"Atencao!"###"A data da alteracao salarial nao pode ser menor que a data de admissao."###"OK"
		lRet := .F.
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010FunVld ³ Autor ³ Eduardo Ju                ³ Data ³ 23/09/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualizacao do Salario baseado na Faixa Salarial a partir da Funcao.³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso   	   ³ X7_REGRA - CDOmin RA_SALARIO										 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010FunVld(cCampo)
Local cCargo 	:= SuperGetMv("MV_FUNCARG",NIL,"F") //Default F (Funcao) senao considera C (Cargo) quando informado no parametro
Local cMsg		:= If( "RA_CARGO" $ __READVAR, OemToAnsi(STR0207), OemToAnsi(STR0206) )
Local cFunname	:= Upper(Alltrim(Funname()))
Local cAlSalario:=	Getmv("MV_ALTSAL")
Local nSalSRJ	:= ""
Local nSalario	:= 0

	If Type("lGp010Auto") == "U"
		Private lGp010Auto := .F.
	EndIf

	// Ajuste para quando  gatilho chamado do cadastro de Autonomos
	If cFunname $ "GPEA180*GPEA265*TRMA100"
		nSalAnt		:= 0
		cFuncAnt	:= ""
		lAltSal		:= .F.
	EndIf

	nSalario := If( nSalAnt > 0 , nSalAnt, If(Inclui, GetMemVar("RA_SALARIO"), SRA->RA_SALARIO) )

	// Ao definir o cargo se a funcao ja tiver sido validada sem salario, ele obtem o valor informado
	If Inclui
		If nSalAnt > 0 .And. "RA_CARGO" $ __READVAR
			nSalario := nSalAnt
		Else
			nSalario := GetMemVar("RA_SALARIO")
		EndIf
	EndIf

	If Altera .and. (SRA->RA_SALARIO <> GetMemVar("RA_SALARIO"))
		nSalario := GetMemVar("RA_SALARIO")
	EndIF

	//Parametro MV_FUNCARG
	//C  - Considera a Faixa Salarial e atualiza o campo Salario no Cadastro de Funcionarios com o Valor da Faixa Salarial
	//F  - Considera o Salario da Funcao e atualiza o campo Salario no Cadastro de Funcionarios
	//"" - Nao considera nenhuma as situacoes anteriores
	//Lembrando que cAlSalario == "S" atualiza as Informacoes da Funcao no Cadastro de Funcionarios
	If cAlSalario == "S"   	// Somente devera considerar o parametro MV_FUNCARG se o MV_ALTSAL estiver com  "S"
		If cCargo == "C" .And. cFuncAnt # M->RA_CARGO
			If !lGp010Auto .And. !IsBlind() .And. !(Type("lGp265Auto") == "L" .And. lGp265Auto)
				If (cCampo == "F" .And. !Empty(SRJ->RJ_CARGO)) .Or. cCampo == "C"	// Cargo considerando Campo Funcao ou Cargo
					ConPad1( NIL , NIL , NIL , "RB601" , NIL , NIL , .F. )
					If( nSalario > RB6->RB6_VALOR .Or. (cFuncAnt # M->RA_CARGO .And. nSalario > RB6->RB6_VALOR) )
						// "Nao existe salario nesse cargo ou ele e menor que salario Atual. Deseja altera-lo mesmo assim?"
						If !lGp010Auto
							lAltSal := MsgYesNo( cMsg )
						Else
							lAltSal := .T.
						EndIf
					ElseIf RB6->RB6_VALOR > nSalario
						lAltSal := .T.
					EndIf
					If lAltSal
						nSalario 		:= RB6->RB6_VALOR
						M->RA_TABELA 	:= RB6->RB6_TABELA
						M->RA_TABNIVE	:= RB6->RB6_NIVEL
						M->RA_TABFAIX	:= RB6->RB6_FAIXA
					EndIf
					cFuncAnt := M->RA_CARGO
				EndIf
			EndIf

		ElseIf cCargo == "F" .And. cFuncAnt # M->RA_CODFUNC

			If IsMemVar( "RA_SALARIO" )
				// Posiciona na funcao para obter o salario correto caso a funcao tenha sido alterada
				If M->RA_CODFUNC # SRJ->RJ_FUNCAO
					nSalSRJ := ( Posicione("SRJ",1,xFilial("SRJ")+M->RA_CODFUNC,"RJ_SALARIO") )
				Else
					If ( (lGp010Auto .And. Inclui) .Or. !lGp010Auto)
						nSalSRJ := SRJ->RJ_SALARIO
					Else
						nSalSRJ := nSalario
					EndIf
				EndIf
				If( nSalario > nSalSRJ .Or. (cFuncAnt # M->RA_CODFUNC .And. nSalario > nSalSRJ) ) .And. cAlSalario == "S"
					// "Nao existe salario nessa funcao ou ele e menor que salario Atual. Deseja altera-lo mesmo assim?"
					If !lGp010Auto
						lAltSal := MsgYesNo( cMsg )
					Else
						lAltSal := .T.
					EndIf
				ElseIf nSalSRJ > nSalario
					lAltSal := .T.
				EndIf
				nSalario := Iif( (Inclui .Or. cAlSalario = "S") .And. lAltSal , nSalSRJ , nSalario )
				cFuncAnt := M->RA_CODFUNC
			EndIf

		EndIf
	EndIf

	nSalAnt := nSalario

	// Quando o salario for atualizado devido a alteracao da funcao, os campos
	// adicionais do Mexico referentes ao salario tambem devem ser atualizados
	If cPaisLoc == "MEX" .And. lAltSal
		CalcSDI()
		M->RA_DATAALT := cToD("  /  /  ")
	EndIf

Return( nSalario )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GP010F3RB6    ³ Autor ³ Eduardo Ju          ³ Data ³ 05/05/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Criacao do filtro Tabela e Nivel para o Cargo.                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 													   ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GP010F3RB6()
Local uRet 		:= "@#"
Local cFunname 	:= ""
Local cCC		:= ""
Local cCargo	:= ""

	cFunname := Upper(AllTrim(Funname()))

	If HTTPISAPW()
	   uRet := .T.	 // O retorno devera ser sempre .T. quando executado pela Web (TCF)
	EndIf

	If ( cFunname == "TRMA100" .Or. cFunname == "GPEA010" .Or. cFunname == "GPEA011")

	   	If INCLUI .Or. ALTERA

			cCC		:= M->RA_CC

			If !Empty(M->RA_CARGO)
				cCargo := M->RA_CARGO
			Else
				cCargo := FDesc("SRJ", M->RA_CODFUNC, "RJ_CARGO",,FwCodFil())
			EndIf

			dbSelectArea("SQ3")
			dbSetOrder(1)

			If !(dbSeek(xFilial("SQ3")+cCargo+cCC))
				dbSeek(xFilial("SQ3")+cCargo)
			EndIf

		EndIf

		DbSelectarea("RB6")	// Itens da Tabela Salarial
		If !Empty(SQ3->Q3_TABELA)
			If !Empty(SQ3->Q3_TABNIVE)
				uRet:= "@#RB6->RB6_TABELA+RB6->RB6_NIVEL+RB6->RB6_ATUAL == SQ3->Q3_TABELA+SQ3->Q3_TABNIVE+'1'@#"
			Else
				uRet:= "@#RB6->RB6_TABELA+RB6->RB6_ATUAL == SQ3->Q3_TABELA+'1'@#"
			EndIf
		Else
			uRet:= "@#RB6->RB6_ATUAL == '1'@#"
		EndIf

	ElseIf cFunname == "TRMA020"

		DbSelectarea("RB6")	// Itens da Tabela Salarial

		If !Empty(M->Q3_TABELA)
			If !Empty(M->Q3_TABNIVE)
				uRet:= "@#RB6->RB6_TABELA+RB6->RB6_NIVEL+RB6->RB6_ATUAL == M->Q3_TABELA+M->Q3_TABNIVE+'1'@#"
			Else
				uRet:= "@#RB6->RB6_TABELA+RB6->RB6_ATUAL == M->Q3_TABELA+'1'@#"
			Endif
		Else
			uRet:= "@#RB6->RB6_ATUAL == '1'@#"
		EndIf

	ElseIf cFunname == "CSAM010" .Or. cFunname == "CSAR030"

		DbSelectarea("RB6")	// Itens da Tabela Salarial
		uRet:= "@#RB6->RB6_ATUAL == '1'@#"

	EndIf
Return ( uRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaCargoX7Regra ³ Autor ³ Tania Bronzeri           ³ Data ³ 19/05/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para carregar descricao do Cargo do Funcionario.			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - RA_CARGO												 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaCargoX7Regra()
Local cFuncao 	:= M->RA_CODFUNC
Local cCc		:= M->RA_CC
Local cCargo	:= M->RA_CARGO
Local cCodCargo	:= Iif(Empty(cCargo),fDesc("SRJ",cFuncao,"RJ_CARGO"),cCargo)
Local cDesCargo	:= fDesc("SQ3",cCodCargo+cCc,"Q3_DESCSUM")

	cDesCargo		:= If(Empty(cDesCargo),fDesc("SQ3",cCodCargo+Space(9),"Q3_DESCSUM"),cDesCargo)

Return ( cDesCargo )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010RunValid ³ Autor ³ Pedro Eloy 	            ³ Data ³ 12/06/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Implementacao para tratar a execucao valid do RA_MAT.				  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ nOpc = Numero de operacion                                           ³
³          ³ 2 = Visualizacion / 3 = Inclusion / 4 = Alteracion / 7 = Copia       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010															  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010RunValid(nOpc)
Local aSalvaArea	:= GetArea()
Local lRetorno		:= .T.
Local nEncho		:= 1
Local nPos			:= 0	// Pesquisa a posicao do campo RA_MAT na enchoice
Local lVldMat		:= cPaisLoc $ "MEX|COL|PER|EQU" .And. (nOpc == 3 .Or. nOpc == 7) .And. (!Empty(cContrMat) .And. cContrMat != "0")

Private lGestPubl 	:= IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

	If __cInternet=="AUTOMATICO"
		Return(.T.)
	EndIf

	//Se for Gestao Publica
	If  lGestPubl
		If 	M->RA_CATFUNC $ '4,5' .And. Empty(M->RA_ADICEDI)
			cHelp := OemToAnsi( STR0247)	//"Informe o campo do tipo Adido/Cedido."
			Help("",1,"GPREINGR", , cHelp,1,0)
			RETURN(.F.)
		Endif
	Endif

	nPos := ASCAN(oenchsra:agets,{ |X| "RA_MAT"$X})

	nEncho := oEnchSra:Nctrl
	oEnchSra:aEntryCTRLS[nPos]:setFocus()

	cExecMat := GetSX3Cache("RA_MAT", "X3_VALID")

	If !Empty(cExecMat) .And. !lVldMat
		lRetorno := &cExecMat
	EndIf

	RestArea(aSalvaArea)
	oEnchSra:GOTOCTRL(nEncho)

Return (lRetorno)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fOpOcor        ³ Autor ³ Marcelo Silveira    ³ Data ³ 13/02/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Codigo de Agentes Nocivos.					 					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_WHEN - Campo RA_OCORREN 									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fOpOcor()
Local cTitulo  := STR0230 // "Classificacao da exposicao a agentes nocivos"
Local MvPar    :=""
Local MvParDef :=""
Local lRet     := .T.
Local l1Elem   := .T.

Private aOcor:={}

	If AllTrim(ReadVar() )= "M->RA_OCORREN"

		cAlias := Alias() 					 // Salva Alias Anterior
		MvPar:=&(Alltrim(ReadVar()))		 // Carrega Nome da Variavel do Get em Questao
		mvRet:=Alltrim(ReadVar())			 // Iguala Nome da Variavel ao Nome variavel de Retorno

	    aOcor := {;
					STR0159,; //"  - Sem exp.ag.nocivo."
					STR0160,; //"01 - Nao exposto.ag.nocivo. Ja esteve exposto."
					STR0161,; //"02 - Exposicao ag.nocivo (aposentadoria especial 15 anos)"
					STR0162,; //"03 - Exposicao ag.nocivo (aposentadoria especial 20 anos)"
					STR0163,; //"04 - Exposicao ag.nocivo (aposentadoria especial 25 anos)"
					STR0164,; //"05 - Nao exposto ag.nocivo com Mult Vinc."
					STR0165,; //"06 - Mult.Vinc.Exp.ag.nocivo (aposentadoria especial 15 anos)"
					STR0166,; //"07 - Mult.Vinc.Exp.ag.nocivo (aposentadoria especial 20 anos)"
					STR0167 ; //"08 - Mult.Vinc.Exp.ag.nocivo (aposentadoria especial 25 anos)"
		          }

		MvParDef:= "  0102030405060708"

		If f_Opcoes(@MvPar,cTitulo,aOcor,MvParDef,,,l1Elem,2)  	//Chama funcao f_Opcoes
			&MvRet := SubStr(mvpar,1,2) 							//Devolve Resultado
		EndIf
		dbSelectArea(cAlias) 										//Retorna Alias
		lRet := .F.
	ElseIf !Empty(mvpar)
		lRet := .T.
	EndIf

Return( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Gat01   ³ Autor ³ Eduardo Ju 	  	    ³ Data ³ 16/01/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Gatilho do campo RA_CODFUNC - RA_CODFUNC001. 		              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Gatilho do campo RA_CODFUNC - RA_CODFUNC001					  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Gat01()
Local nSalario	:= 0.00
Local cAlSalario:= SuperGetMv("MV_ALTSAL", .F., "S")
Local cOrgCfg 	:= SuperGetMv("MV_ORGCFG",NIL,0)


	If Type("lGp010Auto") == "U"
		Private lGp010Auto := .F.
	EndIf

	nSalario := IIF(IsMemVar("RA_SALARIO"),GetMemVar("RA_SALARIO"),IIF(Inclui,0.00,SRA->RA_SALARIO))

	If cAlSalario == "S" .And. SRJ->RJ_SALARIO >= 0 .AND. cOrgCfg != "1" .And. ( (lGp010Auto .And. ( (M->RA_CODFUNC # SRA->RA_CODFUNC .And. ALTERA) .Or. INCLUI )) .Or. !lGp010Auto )
		If (  ( Inclui .And. Empty(nSalario) ) .Or. (cNivel >= GetSx3Cache( "RA_SALARIO", "X3_NIVEL" ))  )
			nSalario := SRJ->RJ_SALARIO
		EndIf
	EndIf

	If  cPaisLoc == "PAR"
		nSalario := fSal_PAR()
	Endif

Return ( nSalario )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ OrgGpe010Grv	³ Autor ³ Marcos Alves	    ³ Data ³ 30/11/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Integracao - SIGAORG:									      ³
³		   ³ Gravacao da movimentacao de ocupacao do posto.               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ GPEA010                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function OrgGpe010Grv(nOpc, cRd0Codigo, cMat)
Local aArea			:= GetArea()
Local lDemissao		:= .F.
Local lRet			:= .T.
Local lExistePessoa:= ExistePessoa("SRA", SRA->(RA_FILIAL + RA_MAT))
Local nGetSX8Len
Local cKeyPosto

	If Type("cPosto")="U"
		Private cPosto	:= Space( GetSx3Cache("RCL_POSTO","X3_TAMANHO" ))
		Private cDepart	:= Space( GetSx3Cache("RCL_DEPTO","X3_TAMANHO" ))
	EndIf

	Begin Sequence
		nGetSX8Len:= GetSX8Len()

		If (nOpc == 4)
			If (GdFieldGet("RA_DEMISSA", 1, .F. , aSraHeader , aSvSraCols) <> GetMemVar( "RA_DEMISSA")) .And.;
			   !Empty(GetMemVar("RA_DEMISSA")) .And.;
			   (GetMemVar("RA_SITFOLH") == "D" )
				lDemissao:= .T.
			EndIf

			If lExistePessoa
				RCX->(dbSetorder(5))		//RCX_FILIAL+RCX_FILOCU+RCX_CODOCU+RCX_FILFUN+RCX_MATFUN
				cKeyPosto:= xFilial("RCX") + RD0->(RD0_FILIAL + RD0_CODIGO) + SRA->(RA_FILIAL + RA_MAT)
			Else
				RCX->(dbSetorder(4))		//RCX_FILIAL+RCX_FILFUN+RCX_MATFUN+RCX_POSTO
				cKeyPosto:= xFilial("RCX") + SRA->(RA_FILIAL + RA_MAT)
			EndIf
		EndIf

		If (nOpc == 3) .Or.; //Inclusao
		   (nOpc == 4 .And. !RCX->(DBSeek(cKeyPosto)) .And. !Empty(cPosto) .And. !lDemissao)
	       If Empty(cPosto)
	           cPosto := SRA->RA_POSTO
	       EndIf

			If lExistePessoa
				OrgXOcupacao(SRA->RA_FILIAL, SRA->RA_MAT, cPosto, SRA->RA_ADMISSA, RD0->RD0_FILIAL, RD0->RD0_CODIGO)
			Else
				OrgXOcupacao(SRA->RA_FILIAL, SRA->RA_MAT, cPosto, SRA->RA_ADMISSA)
		 	EndIf

	    ElseIf nOpc == 4 	// Alteracao
			// Demissao (Alteracao no cadastro)
			If lDemissao .And. FindFunction("OrgXRescisao")
				OrgXRescisao(SRA->RA_FILIAL, SRA->RA_MAT, SRA->RA_DEMISSA)
		    EndIf
	 	EndIf

		While ( GetSX8Len() > nGetSX8Len )
			ConfirmSX8()
		EndDo

	End Sequence

	RestArea( aArea )

Return ( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ ORGXPosto	 ³ Autor ³ Marcos Alves		³ Data ³ 18/12/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Integracao SIGAORG - Tela para inserir o posto.          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Botao bSraPosto VK_F6						  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function ORGXPosto(oEnchSra,lInclui)

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local aSvKeys		:= GetKeys()
Local bSet15		:= { || Nil}
Local bSet24		:= { || Nil }
Local cKeyPosto
Local lPyme		    := If( Type( "__lPyme" ) <> "U", __lPyme, .F. )
Local lRet			:=.T.
Local lIntRSP		:=  GetMv("MV_IORGRSP", Nil, "0") == "1"
Local nOpcA			:= 0
Local oDlg
Local oBut1
Local oBut2
Local oGetPosto, oGetDPosto
Local oSayMsg
Local nSize
Local cVaga   := ""
Local cMsg	  := ""
Local lPerg   := .F.
Local cFunname	:= Upper(Alltrim(Funname()))

Private oGetDepto, oGetDDepto
Private lSubstituto:= .F.

DEFAULT lInclui := INCLUI

	// Se nao usa controle de posto (MV_ORGCFG = 2), ou nao for inclusao
	// nao apresenta tela de solicitacao de postos
	// Configuracao do parametro MV_ORGCFG:
	// 0	Nao utiliza o modulo Arquitetura Organizacional (Padrão).
	// 1	Utiliza o modulo Arquitetura Organizacional completo.
	// 2	Utiliza o modulo Arquitetura Organizacional sem controle de postos.
	If ( lPyme .Or. cOrgCfg != "1" )
		Return .T.
	ElseIf !INCLUI
		If !ALTERA .Or. ( ALTERA .And. SRA->RA_SITFOLH == "D" )
			Return .T.
		EndIf
	EndIf

	// Atualiza os campos na enchoice do SRA (como gatilho) qdo Integracao ORG X RSP estiver ativada
	If lIntRSP .And. IsInCallStack("RSPM001")

	    If !(cFunname $ "RSPM001")
	        If (Empty(SRA->RA_POSTO)) .Or. (!cFunname $ "GPEA010")
		        lPerg := PERGUNTE("RSPSRA",.T.)
		        If ! lPerg
			         Return Nil
		        EndIf
	        EndIf
	        cVaga := mv_par01
	        cPosto:= SQS->QS_POSTO
	    EndIf

		RCL->( dbSetOrder(RetOrder("RCL","RCL_FILIAL+RCL_POSTO")))
		If RCL->( dbSeek(SQS->QS_FILPOST+ SQS->QS_POSTO))

			SetMemVar("RA_POSTO"	,RCL->RCL_POSTO)
			SetMemVar("RA_TPCONTR"	,RCL->RCL_TPCONT)
			SetMemVar("RA_DEPTO"	,RCL->RCL_DEPTO)
			SetMemVar("RA_CC"		,RCL->RCL_CC)

			RunTrigger(1, NIL, NIL, NIL, "RA_POSTO  ")
			RunTrigger(1, NIL, NIL, NIL, "RA_TPCONTR")
			RunTrigger(1, NIL, NIL, NIL, "RA_DEPTO  ")
			RunTrigger(1, NIL, NIL, NIL, "RA_CC     ")

			If !(Empty(RCL->RCL_PROCES))
				SetMemVar("RA_PROCES"	,RCL->RCL_PROCES)
				RunTrigger(1, NIL, NIL, NIL, "RA_PROCES ")
			EndIf

			// Campos que possuem gatilhos entre si e que devem respeitar o conteudo vindo da tabela RCL
			SetMemVar("RA_CODFUNC"	,RCL->RCL_FUNCAO)
			RunTrigger(1, NIL, NIL, NIL, "RA_CODFUNC")

			SetMemVar("RA_CARGO"	,RCL->RCL_CARGO)
			RunTrigger(1, NIL, NIL, NIL, "RA_CARGO  ")

			//valida preenchimento do campo Salario.
			If !(Empty(RCL->RCL_SALAR))
				If (M->RA_SALARIO == 0)
					SetMemVar("RA_SALARIO"	,RCL->RCL_SALAR)
					RunTrigger(1, NIL, NIL, NIL, "RA_SALARIO")
				Else
					cMsg := OemToAnsi(STR0338) + CRLF + OemToAnsi(STR0339) + cValToChar(RCL->RCL_SALAR) + CRLF + OemToAnsi(STR0340) + cValToChar(M->RA_SALARIO)
					If MsgYesNo( cMsg ) //salario presente no cadastro de postos diferente do salario atual, deseja atualizar? Salario Posto: *** Salario Funcionario: ***
		   				SetMemVar("RA_SALARIO"	,RCL->RCL_SALAR)
		   				RunTrigger(1, NIL, NIL, NIL, "RA_SALARIO")
					EndIf
				EndIf
			EndIf

     		If oEnchSra != NIL
			    oEnchSra:Refresh()
			EndIf
			Return .T.
		EndIf
	EndIf

	If Type("M->RA_DEPTO") == "U"
		nSize:= GetSx3Cache("RA_DEPTO", "X3_TAMANHO")
		SetMemVar("RA_DEPTO", IIF(ValType(nSize) == "N", Space(nSize), Space(9) ), .T.)
	EndIf

	If Type("cPosto") == "U"
		nSize:=	GetSx3Cache("RCL_POSTO","X3_TAMANHO" )
		_SetOwnerPrvt("cPosto", IIF(ValType(nSize) == "N", Space(nSize), Space(9) ) )
	EndIf

	If Type("cDepart") == "U"
		If cPaisLoc == "RUS"
			nSize := GetSx3Cache("RA_DEPTO","X3_TAMANHO" )
		Else
			nSize := GetSx3Cache("RCL_DEPTO","X3_TAMANHO" )
		EndIf
		_SetOwnerPrvt("cDepart", IIF(ValType(nSize) == "N", Space(nSize), Space(9) ) )
	EndIf

	SetMemVar("QB_DESCRIC", Space(GetSx3Cache("QB_DESCRIC", "X3_TAMANHO")), .T.)
	SetMemVar("RCL_DCARGO", Space(GetSx3Cache("RCL_DCARGO", "X3_TAMANHO")), .T.)

   	SetKey( VK_F6 , { || Nil } )

	// Pesquisa somente qdo nao for inclusao
	If !lInclui
		If ExistePessoa("SRA", SRA->(RA_FILIAL + RA_MAT))
			RCX->(dbSetorder(5))		//RCX_FILIAL+RCX_FILOCU+RCX_CODOCU+RCX_FILFUN+RCX_MATFUN
			cKeyPosto:= xFilial("RCX") + RD0->(RD0_FILIAL + RD0_CODIGO) + SRA->(RA_FILIAL + RA_MAT)
		Else
			RCX->(dbSetorder(4))		//RCX_FILIAL+RCX_FILFUN+RCX_MATFUN+RCX_POSTO
			cKeyPosto:= xFilial("RCX") + SRA->(RA_FILIAL + RA_MAT)
		EndIf

		If RCX->(DBSeek(cKeyPosto))
			RestKeys( aSvKeys , .T. )
			Return .T.
		EndIf
	ElseIf cPaisLoc != "RUS" .And. !Empty(M->RA_POSTO) .And. Empty(cPosto)
		cPosto := M->RA_POSTO
		Return .T.
	EndIf

	// Monta as Dimensoes dos Objetos
	aAdvSize		:= MsAdvSize()
	aAdvSize[5]		:= (aAdvSize[5]/100) * 70
	aAdvSize[6]		:= (aAdvSize[6]/100) * 39
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

	DEFINE MSDIALOG oDlg TITLE STR0101	FROM aAdvSize[7],0 To aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL // "Selecione o Posto"

		@ aObjSize[1,1]+15, aObjSize[1,2]+10 SAY STR0121 SIZE 40,10 PIXEL // "Cod.Depto"
		If cPaisLoc == "RUS"
			@ aObjSize[1,1]+15, aObjSize[1,2]+50 MSGET oGetDepto VAR cDepart SIZE 40,10 F3 "RD4RUS" PIXEL VALID OrgVldxDepto(cDepart, @oGetDDepto)
		ELSE
			@ aObjSize[1,1]+15, aObjSize[1,2]+50 MSGET oGetDepto VAR cDepart SIZE 40,10 F3 "RD4FOL" PIXEL VALID OrgVldxDepto(cDepart, @oGetDDepto)
		ENDIF
		@ aObjSize[1,1]+15, aObjSize[1,2]+110 SAY STR0122 SIZE 40,10 PIXEL // "Departamento"
		@ aObjSize[1,1]+15, aObjSize[1,2]+150 MSGET oGetDDepto VAR M->QB_DESCRIC SIZE 100,10 PIXEL READONLY

		@ aObjSize[1,1]+30, aObjSize[1,2]+10 SAY STR0123 SIZE 40,10 PIXEL // "Cod. Posto"

		If cPaisLoc == "RUS"
			@ aObjSize[1,1]+30, aObjSize[1,2]+50 MSGET oGetPosto VAR cPosto SIZE 40,10 F3 "RCLRUS" PIXEL VALID OrgVldxPosto(cPosto, @oGetDPosto)
		ELSE
		@ aObjSize[1,1]+30, aObjSize[1,2]+50 MSGET oGetPosto VAR cPosto SIZE 40,10 F3 "RCLORG" PIXEL VALID OrgVldxPosto(cPosto, @oGetDPosto)
		endif
		@ aObjSize[1,1]+30, aObjSize[1,2]+110 SAY STR0100 SIZE 40,10 PIXEL // "Posto"

		If cPaisLoc == "RUS"
			@ aObjSize[1,1]+30, aObjSize[1,2]+150 MSGET oGetDPosto VAR M->RCL_DFUNC SIZE 100,10 PIXEL READONLY
		else
		@ aObjSize[1,1]+30, aObjSize[1,2]+150 MSGET oGetDPosto VAR M->RCL_DCARGO SIZE 100,10 PIXEL READONLY
		endif
		@ aObjSize[1,1]+45, aObjSize[1,2]+10 CHECKBOX lSubstituto PROMPT STR0125 PIXEL SIZE 80, 10 WHEN .F.  //"Substituto"

		bSet15 := { || nOpcA := 1 , If(OrgVldxDepto(),If(OrgVldxPosto(cPosto, @oGetDPosto),oDlg:End(),NIL),NIL)}
		bSet24 := { || nOpcA := 0 , RestKeys( aSvKeys , .T. ), oDlg:End() }

		oDlg:lEscClose := .F.

	ACTIVATE MSDIALOG oDlg ON INIT Enchoicebar(oDlg,bSet15, bSet24) CENTERED

	If ( nOpcA == 1 )
		// Atualiza os campos na enchoice do SRA (como gatilho)

		If !(Empty(cPosto))
			SetMemVar("RA_POSTO"	,RCL->RCL_POSTO)
			SetMemVar("RA_TPCONTR"	,RCL->RCL_TPCONT)
			SetMemVar("RA_DEPTO"	,RCL->RCL_DEPTO)
			SetMemVar("RA_CARGO"	,RCL->RCL_CARGO)
			SetMemVar("RA_CC"		,RCL->RCL_CC)
			SetMemVar("RA_CODFUNC"	,RCL->RCL_FUNCAO)

			RunTrigger(1, NIL, NIL, NIL, "RA_POSTO  ")
			RunTrigger(1, NIL, NIL, NIL, "RA_TPCONTR")
			RunTrigger(1, NIL, NIL, NIL, "RA_DEPTO  ")
			RunTrigger(1, NIL, NIL, NIL, "RA_CARGO  ")
			RunTrigger(1, NIL, NIL, NIL, "RA_CC     ")
			RunTrigger(1, NIL, NIL, NIL, "RA_CODFUNC")

			If !(Empty(RCL->RCL_PROCES))
				SetMemVar("RA_PROCES"	,RCL->RCL_PROCES)
				RunTrigger(1, NIL, NIL, NIL, "RA_PROCES")
			EndIf

			//valida preenchimento do campo Salario.
			If !(Empty(RCL->RCL_SALAR))
				If (M->RA_SALARIO == 0)
					SetMemVar("RA_SALARIO"	,RCL->RCL_SALAR)
					RunTrigger(1, NIL, NIL, NIL, "RA_SALARIO")
				Else
					cMsg := OemToAnsi(STR0338) + CRLF + OemToAnsi(STR0339) + cValToChar(RCL->RCL_SALAR) + CRLF + OemToAnsi(STR0340) + cValToChar(M->RA_SALARIO)
					If MsgYesNo( cMsg ) //salario presente no cadastro de postos diferente do salario atual, deseja atualizar? Salario Posto: *** Salario Funcionario: ***
						SetMemVar("RA_SALARIO"	,RCL->RCL_SALAR)
						RunTrigger(1, NIL, NIL, NIL, "RA_SALARIO")
					EndIf
				EndIf
			EndIf

			If oEnchSra != NIL
				oEnchSra:Refresh()
			EndIf
		EndIf
	Else
		lRet :=.F.
	EndIf

	RestKeys( aSvKeys , .T. )

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ OrgVldxPosto ³ Autor ³ Marcos Alves    ³ Data ³ 18/12/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Get cPosto.			                      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Integracao SIGAORG (ORGXPosto)							  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function OrgVldxPosto(cPosto, oGetDescricao)
Local lRet	:= Empty(cPosto) .Or. ExistCpo("RCL", cDepart + cPosto, 1)

	lSubstituto:= .F.

	If lRet .And. !Empty(cPosto)
		RCL->( dbSetOrder(RetOrdem("RCL","RCL_FILIAL+RCL_DEPTO+RCL_POSTO")))
		RCL->( dbSeek(xFilial("RCL") + cDepart + cPosto))
		If !(RCL->RCL_STATUS $ ("1*2"))
			Help(,,'HELP',,OemToAnsi(STR0231)+CRLF+oEmtoAnsi(STR0076),1,0) // "O posto informado nao valido!"
			lRet := .F.
		EndIf

		If lRet
			If cPaisLoc == "RUS"
				oGetDescricao:cText:= FDesc("SRJ", RCL->RCL_FUNCAO, "RJ_DESC")
			ELSE
				oGetDescricao:cText:= FDesc("SQ3", RCL->RCL_CARGO, "Q3_DESCSUM")
			Endif
			If RCL->RCL_OPOSTO >= RCL->RCL_NPOSTO  //RCL->RCL_STATUS =="2"	// 1=Livre;2=Ocupado;3=Congelado;4=Cancelado
				lSubstituto:= .T.
			EndIf
		EndIf
	Else
		oGetDescricao:cText:= ""
	EndIf

Return ( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ OrgVldxDepto ³ Autor ³ Rogerio Ribeiro   ³ Data ³ 18/12/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Get Departamento.								³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Integracao SIGAORG (ORGXPosto)								³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function OrgVldxDepto()
Local aArea    := GetArea()
Local aAreaRD4 := RD4->( GetArea() )
Local aAreaRDK := RDK->( GetArea() )
Local lRet     := .T.

	If lRet .And. !Empty(cDepart)
		dbSelectArea("RD4")
		RD4->( dbSetOrder(RetOrdem("RD4", "RD4_FILIAL+RD4_EMPIDE+RD4_FILIDE+RD4_CODIDE")) )
   		RD4->( dbGoTop() )

		dbSelectArea("RDK")
        RDK->( dbSetOrder(RetOrdem("RDK","RDK_FILIAL+RDK_CODIGO+RDK_HIERAR+RDK_TIPO")) )

		If lRet := ( RD4->( dbSeek(xFilial("RD4") + FwCodEmp("SRA") + xFilial("RDK") + cDepart) ) )
			lRet := .F.

			While RD4->( !Eof() ) .And. (RD4->(RD4_FILIAL+RD4_EMPIDE+RD4_FILIDE+RD4_CODIDE) == xFilial("RD4") + FwCodEmp("SRA") + xFilial("SQB") + cDepart)
           		RDK->( dbGoTop() )
           		If RDK->( dbSeek(xFilial("RDK") + RD4->RD4_CODIGO + "11") )
           			lRet := .T.
           			Exit
           		EndIf
				RD4->( dbSkip() )
			EndDo
		EndIf
	EndIf

	If Empty(cDepart)
		lRet := .F.
	Else
		lRet := ExistCpo("SQB", cDepart, 1)
	EndIf

	If lRet .And. !Empty(cDepart)
		M->QB_DESCRIC:= fDesc("SQB", cDepart,"QB_DESCRIC")
	Else
		Help(,,'HELP',,OemToAnsi(STR0232)+CRLF+oEmtoAnsi(STR0076),1,0) 				// "O departamento informado nao e valido!"// "Atencao"
		M->QB_DESCRIC:= ""
		M->RA_DEPTO := ""
	EndIf

	RestArea( aAreaRDK )
	RestArea( aAreaRD4 )
	RestArea( aArea )

Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ VerVaga      ³ Autor ³ Cecilia Carvalho  ³ Data ³ 31/03/14 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Get Vaga.								³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Integracao SIGAORG       								³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function VerVaga()
Local lCtlVaga	:= GetNewPar("MV_CTRVAGA",.T.)	// 	T -> Controla Vagas
Local lRet:=.T.

	If ! lCtlVaga
		Return lRet
	EndIf

	cVaga := mv_par01

	dbSelectArea("SQS")
	dbSetOrder(1)
	If dbSeek(xFilial("SQS")+cVaga)
		If SQS->QS_NRVAGA <= SQS->QS_VAGAFEC
			lRet:= .F.
		EndIf
	Else
		lRet:= .F.
	EndIf

	If !lRet
		Help(Space(1), 1, 'RSPNEXIST') //-- Nao existe a vaga indicada para o candidato.
	EndIf

Return lRet


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GPRD4Filtro  ³ Autor ³ Tatiane Vieira Matias ³ Data ³ 26/06/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Filtrar os departamentos de acordo com a visao Organizacional  ³
³          ³ e operacional.											    	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Consulta Padrao RD4ORG.									    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GPRD4Filtro()
Local cFiltro  := RD4ORGFiltro()
Return cFiltro

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GPFILtroUF   ³ Autor ³ Mauricio Tsuyoshi   ³ Data ³ 06/01/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Filtra os municipios de um  estado selecionado.			  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_F3 - RHVAM/CC2COS		 								  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GPFiltroUF()
Local aArea  	:= GetArea()
Local aCpoUF 	:= {}
Local aCpoCid	:= {}
Local cCampo 	:= ReadVar()
Local cPreFixo 	:= ""
Local cAux    	:= ""
Local cFiltro 	:= ""
Local cCpoAux 	:= ""
Local nX
Local nPos 		:= At("_", cCampo )

	DbSelectArea( "SX3" )
	DbSetOrder( 2 )
	If nPos > 0
		cPrefixo := Substr( cCampo, 4, nPos-3 )
		aCpoUF := aAdd( aCpoUF, {'UF', 'EST','ESTADO' } )
	 	For nX := 1 To Len(aCpoUF)
	 		cAux := AllTrim(cPrefixo + aCpoUF[nX])
	      	If Len(cAux) < 10
	      		cAux += Space(10-Len(cAux))
	      	EndIf
	      	DbSeek( cAux )
	      	If !Eof()
	         	nX := Len(aCpoUF) +1
	      	EndIf
	   	Next nX
	   	If !Eof() .And. !Empty(&('M->' + cAux))
			cFiltro := "(AllTrim(CC2->CC2_EST) == '" + AllTrim(&('M->' + cAux)) + "')"
	   	EndIf

	   	cFiltro := "@#" + cFiltro + "@#"
	EndIf

	RestArea( aArea )

Return( cFiltro )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GP10OrgxRSP  ³ Autor ³ Equipe RH 		  ³ Data ³ 08/03/12 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atribui condicao para quando Integracao ORGxRSP esta ativa.³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010					 								³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GP10OrgxRSP()
Local lRet 	:= .F.
Local lIntRSP	:=  GetMv("MV_IORGRSP", NIL, "0") == "1"
Local nA		:= 0

	If lIntRSP
		For nA := 1 to 10
			If Upper( AllTrim( ProcName( nA ) ) ) $ "RSPM001/RS001CNV"
				lRet := .T.
				Exit
			EndIf
		Next
	EndIf

Return ( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ MenuDef		³ Autor ³  Luiz Gustavo   ³ Data ³ 03/01/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Isola opcoes de menu para que as opcoes da rotina possam   ³
³          ³ ser lidas pelas bibliotecas Framework da Versao 9.12 .     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³ aRotina												 	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MenuDef()
Local lRefTrab  := FindFunction("fRefTrab") .And. fRefTrab("I")
Local leSocial	:= SuperGetMv( "MV_NG2ESOC" , .F. , "2" ) == "1"
Local lClockIn	:= SuperGetMv( "MV_APICLO0", .F., .F. )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define Array contendo as Rotinas a executar do programa      ³
	//³ ----------- Elementos contidos por dimensao ------------     ³
	//³ 1. Nome a aparecer no cabecalho                              ³
	//³ 2. Nome da Rotina associada                                  ³
	//³ 3. Usado pela rotina                                         ³
	//³ 4. Tipo de Transacao a ser efetuada                          ³
	//³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	//³    2 - Simplesmente Mostra os Campos                         ³
	//³    3 - Inclui registros no Bancos de Dados                   ³
	//³    4 - Altera o registro corrente                            ³
	//³    5 - Remove o registro corrente do Banco de Dados          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aRotina := {}

	AAdd(aRotina, {STR0004, "PesqBrw",    0, 1, NIL, .F.})		// "Pesquisar"
	AAdd(aRotina, {STR0005, "Gpea010Vis", 0, 2})	 	   		// "Visualizar"

	If nModulo != 70	// Se Modulo nao for SIGAORG
		AAdd(aRotina, {STR0006, "Gpea010Inc", 0, 3, 81})	 	// "Incluir"
		AAdd(aRotina, {STR0007, "Gpea010Alt", 0, 4, 82})	 	// "Alterar"

		If cPaisLoc $ "PTG/COL/PER/ANG/PAR" .And. nModulo == 7
			AAdd(aRotina, {STR0106, "GPCONTR", 0, 4}) 			// "Contratos"
		EndIf

		AAdd(aRotina, {STR0008, "Gpea010Del", 0, 5, 3}) 	 	// "Excluir"
	EndIf

	If !(cPaisLoc == "RUS")
		AAdd(aRotina, {STR0248, "fSelecCamposSRA", 0, 8})		// Config. Cópia
		AAdd(aRotina, {STR0143, "Gpea010Cop", 0, 3, 81})		// "Copia"
	Else
		AAdd(aRotina, {STR0381, "fSelecCamposSRA", 0, 8})	// "Copy Contract Config."
		AAdd(aRotina, {STR0382, "Gpea010Cop", 0, 3, 81})	// "Copy Contract"
		AAdd(aRotina, {STR0383, "GPEA010Prt", 0, 11})		//Print the order
		AAdd(aRotina, {STR0376, "fActLegend", 0, 10})
	EndIf

	If !IsInCallStack("GPEW020")
		If FindFunction("fRhBanConh") .And. aOfusca[2]
			AAdd(aRotina, {STR0098, "fRhBanConh", 0, 4, , .F.})
		Else
			AAdd(aRotina, {STR0098, "MsDocument", 0, 4})		// "Conhecimento"
		EndIf
	EndIf

	If cPaisLoc == "BRA" .AND. lRefTrab //se utiliza reforma
		aadd(aRotina, {STR0351, "VIEWDEF.GPEA016",0,3}) //"Período de Gestação"
	EndIf
	If cPaisLoc == "BRA" 	// Se a tabela SV7 existe no banco
		Aadd(aRotina, {STR0355, "Aux018", 0, 4}) //"Convocações"
	EndIf
	If leSocial
		Aadd(aRotina, {STR0418, "MDTGeraXml", 0, 6}) //"Gerar Xml Riscos"
	EndIf
	If cPaisLoc == "BRA" .And. (lIntTaf .Or. lMiddleware) .And. FindFunction("GPEA941") .And. ChkFile("RJJ")
		aAdd(aRotina, {STR0437, "VIEWDEF.GPEA941",0,4}) //"Processos do Funcionário"
	EndIf

	If lClockIn .And. nModulo == 16 .And. ChkFile("RRE")
		aAdd(aRotina, {STR0483, "PONA460()", 0, 4}) // Endereços Clock-in
	EndIf

Return ( aRotina )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010ChkPeri  ³ Autor ³ Carlos E. Olivieri  ³ Data ³ 18/07/13 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Checa se o funcionario possui adicional de periculosidade     ³
³          ³ para liberar o campo RA_PERICUL                               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_WHEN - Campo RA_PERICUL                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010ChkPeri()

Local lRet

	lRet := GetMemVar("RA_ADCPERI") == "2"

	Do Case
		Case ReadVar() == "M->RA_ADCPERI"
			FocoAnterior := "RA_PERICUL"

		Case ReadVar() == "M->RA_ADCINS"

			If FocoAnterior == "RA_PERICUL"

				If !lRet
					SetMemVar("RA_PERICUL", 0)
				Else
					If GetMemVar("RA_PERICUL") == 0
						SetMemVar("RA_PERICUL", GetMemVar("RA_HRSMES"))
					Endif
				Endif

			Else
				FocoAnterior := "RA_ADCINS"

			Endif
	EndCase

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010ChkInsal ³ Autor ³ Carlos E. Olivieri  ³ Data ³ 19/07/13 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Checa se o funcionario possui adicional de insalubridade      ³
³          ³ para liberar o campo RA_INSMAX                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_WHEN - Campo RA_INSMAX                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010ChkInsal()

Local lRet

	lRet := GetMemVar("RA_ADCINS") != "1" .And. !Empty(GetMemVar("RA_ADCINS"))

	Do Case
		Case ReadVar() == "M->RA_ADCINS"
			FocoAntADCINS := .T.

		Case ReadVar() <> "M->RA_ADCINS" .AND. FocoAntADCINS

			If !lRet
				SetMemVar("RA_INSMAX", 0)
			Else
				If GetMemVar("RA_INSMAX") == 0
					SetMemVar("RA_INSMAX", GetMemVar("RA_HRSMES"))
				Endif
			Endif

			FocoAntADCINS := .F.
	EndCase

Return lRet


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fAjusCLVL     ³ Autor ³ Equipe RH           ³ Data ³ 19/09/13 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Altera obrigatoriedade dos campos RA_ITEM/RA_CLVL quando      ³
³          ³ MV_ITMCLVL for igual a 1 ou 3.                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010					                                   ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fAjusCLVL()
Local aArea		:= GetArea()
Local cItmClVl	:= SuperGetMv( "MV_ITMCLVL", .F., "2" )

Local cItem 	:= M->RA_ITEM
Local cClvl		:= M->RA_CLVL
Local lRet 		:= .T.
Local nPos		:= 0
Local nEncho	:= 0


	If cItmClVl == "1" // 1= Obrigatorio;2/3=Nao obrigatorio

		If Empty(cItem) .Or. Empty(cClvl)
			Help("",1,OemtoAnsi(STR0076),,OemtoAnsi(STR0302),1,0) //"Item /Classe de valor obrigatório"
			lRet := .F.
		EndIf

	Endif


Return( lRet )


//------------------------------------------
//   FUNCOES ESPECIFICAS - PADRAO
//------------------------------------------

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010Excl  ³ Autor ³ Natie        ³ Data ³ 03/06/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida exclusao de funcionario para Ponto de Entrada. ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010Excl()
Local lRet	:= .T.

	// Ponto de Entrada para validacao de Exclusao de Funcionarios
	// O retorno deve ser logico (.T. ou .F.)
	If ExistBlock("Gp010Exclu")
		lRet := ExecBlock("Gp010Exclu",.F.,.F.)
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fSraSenha    ³ Autor ³ Natie       ³ Data ³ 16/08/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Grava a senha se estiver vazia.                      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                              ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
*/
Function FSraSenha()
Local aArea			:= GetArea()
Local aAreaSRA		:= SRA->( GetArea() )
Local cCPF			:= SRA->RA_CIC
Local cSenhaCpy

	//Caso seja incluido via Cadastro do Participante
	If Type("cArmCodRd0") == "U"
		cArmCodRd0	:= ""			// Armazena o Cod RD0 da pessoa antes de inciar a cópia
	EndIf

	If ! Empty(cArmCodRd0)
		dbSelectArea('RD0')
		RD0->(DbSetOrder(1))
		If RD0->(MsSeek(FwxFilial("RD0",SRA->RA_FILIAL) + cArmCodRd0))
			If !Empty(RD0->RD0_SENHA)
				//Pega a senha do registro copiado (cópia de funcionário)
				cSenhaCpy := RD0->RD0_SENHA
			EndIf
		EndIf
	EndIf
    If cPaisLoc == "RUS"
    	 M->RA_CODUNIC	:= RD0->RD0_CODIGO
	EndIf
    If cSenhaCpy <> Nil
		If cPaisLoc == "RUS"
			M->RA_SENHA := cSenhaCpy
		Else
    		RecLock("SRA",.F.)
				//Na rotina de cópia de funcionário, salva a senha que pertence ao registro original (copiado)
				SRA->RA_SENHA := cSenhaCpy
			MsUnlock()
		EndIf
	Else
		If cPaisLoc = 'BRA' .And. !(SRA->(Eof())) .And. Empty(SRA->RA_SENHA) .And. !Empty(SRA->RA_CIC)
			RecLock("SRA",.F.)
				SRA->RA_SENHA := RD0SX7PASS(SRA->RA_NASC,SRA->RA_ADMISSA,SRA->RA_CIC,SRA->RA_SENHA)
			MsUnlock()
		EndIf
	EndIf

	dbSelectArea('RD0')
	RD0->(dbSetOrder(6))
	If RD0->(dbSeek(xFilial('RD0')+ cCPF))
		RecLock('RD0',.F.)
		If cSenhaCpy <> Nil
			//Na rotina de cópia de funcionário, salva a senha que pertence ao registro original (copiado)
			RD0->RD0_SENHA := cSenhaCpy
		Else
			If Empty(RD0->RD0_SENHA)
				RD0->RD0_SENHA := RD0SX7PASS(SRA->RA_NASC,SRA->RA_ADMISSA,SRA->RA_CIC,SRA->RA_SENHA)
			Endif
		EndIf
		MsUnlock()
	Endif

	RestArea( aAreaSRA )
	RestArea( aArea )

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ NGATUAST1    ³ Autor ³ Elisangela Costa    ³ Data ³ 06/11/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualizacao de informacoes no cadastro de funcionario do     ³
³          ³ SIGAMNT - (ST1) se integrado.								  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010  - SIGAMNT                                           ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function NGATUAST1()

Local nSalHora := 0

	If ALTERA

		If !(AllTrim(GetNewPar("MV_NGMNTRH","")) $ "SX")
	    	Return .T.
		EndIf

   		dbSelectArea("ST1")
		dbSetOrder(1)

	   	If dbSeek(xFilial("ST1")+M->RA_MAT)

	   		RecLock("ST1",.F.)
			ST1->T1_NOME   := M->RA_NOME
      		ST1->T1_CCUSTO := M->RA_CC

	    	If AllTrim(GetNewPar("MV_NGSALHO","")) == "S" .And. TYPE("M->RA_SALARIO") <> "U" .And. TYPE("M->RA_HRSMES") <> "U" .And. M->RA_CATFUNC == 'M'

	    		nSalHora := (M->RA_SALARIO / M->RA_HRSMES)
	    		ST1->T1_SALARIO := nSalHora

			Else
      			If TYPE( "M->RA_SALARIO" ) <> "U"
					ST1->T1_SALARIO := M->RA_SALARIO
	   			EndIf
	      	EndIf

	      	// Trata campos de disponibilidade do funcionario quando o mesmo e demitido
	    	If !Empty(M->RA_DEMISSA)
	      		ST1->T1_DISPONI := "N"
	      		ST1->T1_DTFIMDI := M->RA_DEMISSA

	      	ElseIf Empty(M->RA_DEMISSA) .And. !Empty(SRA->RA_DEMISSA)
				ST1->T1_DISPONI := "S"
	      		ST1->T1_DTFIMDI := CtoD("  /  /  ")
			EndIf

	      	ST1->(MsUnlock())
	   	EndIf

	EndIf

Return( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010ChkSR   ³ Autor ³ Jonatas A.        ³ Data ³ 28/01/08  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Efetua busca de registros relacionados aos funcionarios p/  ³
³          ³ nao bloquear exclusao em validacao realizada pelo SX9, onde ³
³          ³ registros c/ relacionamento serao excluidos automaticamente.³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 			                                         ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gp010ChkSR( aAlias, lDelRegs )

	Local aArea			:= GetArea()
	Local aAreaElem		:= {}
	Local cAlias		:= ""
	Local cPrefix		:= ""
	Local ni			:= 0
	Local nRegSR		:= 0
	Local lDelButton	:= .T.
	Local cAliasDel		:= GetNextAlias()
	Local cQuery		:= ""

	DEFAULT aAlias		:= {}
	DEFAULT lDelRegs	:= .F.

	For ni := 1 To Len( aAlias )

		cAlias := aAlias[ni]

		If !(cAlias $ ("RFS*RAE*RFX*RFY*RFZ*RBW*RGE"))		//Controle de tabelas com prefixos completos
			cPrefix := Substr( ( cAlias ), 2, 2 )
		Else
			cPrefix	:= cAlias
		EndIf

		aAreaElem	:= ( cAlias )->( GetArea() )

		dbSelectArea( cAlias )
		( cAlias )->( dbSetOrder(1) )
		( cAlias )->( dbGoTop() )

		If !lDelRegs

			cQuery := "SELECT " + cPrefix + "_FILIAL," + cPrefix + "_MAT,"
			cQuery += "R_E_C_N_O_ AS RECNUM "
			cQuery += "FROM "	+ RetSqlName( cAlias )	+ " "				+ cAlias + " "
			cQuery += "WHERE "	+ cPrefix				+ "_FILIAL	= '"	+ SRA->RA_FILIAL	+"' "
			cQuery += "AND "	+ cPrefix  				+ "_MAT		= '"	+ SRA->RA_MAT 		+"' "
			cQuery += "AND " 	+ cAlias + ".D_E_L_E_T_ = ' ' "

			cQuery := ChangeQuery(cQuery)
			dbUseArea(.T., "TOPCONN", TcGenQry(,, cQuery), cAliasDel)

			While !( cAliasDel )->( Eof() )

				aAdd( aRecDelSR, {( cAlias ),;
										__ExecMacro( ( cAliasDel ) + "->"	+	cPrefix	+	"_FILIAL" )	,;
										__ExecMacro( ( cAliasDel ) + "->"	+	cPrefix	+	"_MAT" )	,;
										__ExecMacro( ( cAliasDel ) + "->"				+	"RECNUM" )	,;
										.F.																 ;
									})
				( cAliasDel )->( dbSkip() )
			EndDo

			( cAliasDel )->( dbCloseArea() )

        EndIf
	Next ni

	If Len(aRecDelSR) > 0

			If lDelRegs

				For nRegSR := 1 To Len( aRecDelSR )
					( aRecDelSR[ nRegSR, 1 ] )->( dbGoTo( aRecDelSR[ nRegSR, 4 ] ) )
					RecLock( aRecDelSR[ nRegSR, 1 ], .F., .T. )
					( aRecDelSR[ nRegSR, 1 ] )->( dbDelete() )
					( aRecDelSR[ nRegSR, 1 ] )->( MsUnlock() )
				Next nRegSR

				aRecDelSR	:= {}
			Else
				cAlias := ""
				aEval(aRecDelSR, {|x| If( !(x[1] $ cAlias), cAlias += x[1] + ", ", ) })

				If lGp010Auto
					Aeval( aRecDelSR, { |x| x[ 5 ] := .T. } )
				Else
					If ( lDelButton := MsgYesNo( OemToAnsi( STR0236 + " " + cAlias + " " + STR0237 ) ) )  // "Existe(m) registo(s) na(s) tabela(s)"
						Aeval( aRecDelSR, { |x| x[ 5 ] := .T. } )                                         // " para esse empregado. Para realizar sua exclusao, e necessario excluir esse(s) registro(s). Deseja exclui-lo(s)?"
					EndIf
				EndIf
			EndIf
		EndIf

		RestArea( aAreaElem )
	RestArea( aArea )

Return( lDelButton )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010ExAlt   ³ Autor ³ Eduardo Ju        ³ Data ³ 09/04/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Alteracao: Checa campos que fazem parte do Hist.Salarial.  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 			                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gp010ExAlt(lHelp)
Local lRet			:= .T.
Local nBkpSalario	:= IIF( cNivel < GetSx3Cache( "RA_SALARIO" , "X3_NIVEL" ),0,GdFieldGet( "RA_SALARIO" , 1 , .F. , aSraHeader , aSvSraCols ))  // Salario
Local nBkpCodFunc	:= GdFieldGet( "RA_CODFUNC" , 1 , .F. , aSraHeader , aSvSraCols )	// Cod.Funcao
Local nBkpCatfunc	:= GdFieldGet( "RA_CATFUNC" , 1 , .F. , aSraHeader , aSvSraCols )	// Cat.Func
Local nBkpCargo		:= GdFieldGet( "RA_CARGO"   , 1 , .F. , aSraHeader , aSvSraCols ) 	// Cargo
Local nBkpAnteaum	:= If ( lUsaAnteAum, GdFieldGet( "RA_ANTEAUM" , 1 , .F. , aSraHeader , aSvSraCols ), 0 )	//Sal.Bas.Dis
Local nBkpTipoPgt	:= GdFieldGet( "RA_TIPOPGT" , 1 , .F. , aSraHeader , aSvSraCols )	// Tipo.Pgto

DEFAULT	lHelp		:= .T.
	If ( IsMemVar( "RA_SALARIO" ) .and. IsMemVar( "RA_CODFUNC" ) .and. IsMemVar( "RA_CATFUNC" ) .and. IsMemVar( "RA_CARGO"   ) .and. IsMemVar( "RA_ANTEAUM" ) )

		If  nBkpSalario == Nil .Or. nBkpCodFunc == Nil .Or. nBkpCatfunc == Nil .Or. ;
			nBkpCargo 	== Nil .Or. nBkpAnteaum == Nil .Or. nBkpTipoPgt == Nil	// Verificar os campos a mostrar no help
			If lHelp
				Aviso(STR0076,STR0228,{STR0077},,STR0229)
				//"Atencao"#"Houve alteracao de campos utilizados no Historico Salarial. Porem, alguns campos nao estao habilitados para o usuario logado. A manutencao desses campos e permitida em Funcionarios no ambiente Gestao de Pessoal."#"OK"#"Manutencao Nao Permitida"
			EndIf
			lRet := .F.
		EndIf
	EndIf
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GpA_MedOdo   ³ Autor ³ Renata Elena      ³ Data ³ 17/12/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para Consulta Padrao de Assistencia Medica e Odonto-³
³          ³ Logica S008.											    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 			                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GpA_MedOdo()
Local cVar 		:= ReadVar()
Local cCons 	:= ""
Local cCpoRet 	:= ""
Local cConteud	:= ""
Local cTpPlano	:= ""
Local cTpForn	:= ""
Local cCodFor 	:= ""
Local cCodPlano	:= ""
Local cFilter 	:= ""
Local cSvAlias	:= ""
Local cTip		:= ""

Local nCPn		:= 0 // Variavel utilizada quando é aberta mais de uma getdados ao mesmo tempo
Local xRet
Local oModel
Local oStructRHK
Local oStructRHL
Local oStructRHM
Local oStructRHN
Local oStructRHO
Local oStructSJX
Local oStructSLE
Local oStructSL0
Local bFilterRCC := { || .T. }

Private lNvPerg	 := SX1->( dbSeek("GPER008P") )

	If FunName() = "GPER008" .or. FunName() = "U_GPER008"//-- Relatório de Calculo do Plano de Saúde
		cCons := "S016"
		//-- "Fornecedor Odontologico De ?" e "Fornecedor Odontologico Ate ? "
		If lNvPerg
			If (cVar == "MV_PAR18" .Or. cVar == "MV_PAR19")
				cCons := "S017"
			//-- "Código Plano de ?" e "Código Plano até ?"
			ElseIf cVar == "MV_PAR21" .Or. cVar == "MV_PAR22"
				cCons := "S008"
			EndIf
		else
			If (cVar == "MV_PAR16" .Or. cVar == "MV_PAR17")
				cCons := "S017"
			//-- "Código Plano de ?" e "Código Plano até ?"
			ElseIf cVar == "MV_PAR20" .Or. cVar == "MV_PAR21"
				cCons := "S008"
			EndIf
		EndIf
		cCpoRet := "CODIGO"
	ElseIf FunName() = "GPER014"
		If cVar == "MV_PAR09"
			cCons := "S016"
		ElseIf cVar == "MV_PAR10"
			cCons := "S017"
		EndIf
		cCpoRet := "CODIGO"
	ElseIf cVar == "M->RB_CODAMED" .or. cVar == "SRB->RB_CODAMED" // DEPENDENTES ASSISTENCIA MEDICA
	   	If(cVar == "M->RB_CODAMED", cTip := GdFieldGet("RB_TIPAMED"), cTip := M->RB_TIPAMED)
		If(cTip == "2",	cCons := "S009", cCons := "S008")
		cCpoRet := "CODIGO"
	ElseIf cVar == "M->RB_ASODONT" .or. cVar == "SRB->RB_ASODONT" // DEPENDENTES ASSISTENCIA ODONTOLOGICA
		If(cVar == "M->RB_ASODONT", cTip := GdFieldGet("RB_TPASODO"), cTip := M->RB_TPASODO)
		If(cTip == "2",	cCons := "S014", cCons := "S013")
		cCpoRet := "CODIGO"
	ElseIf __READVAR == "M->CODFOR"           //CONSULTA F3 A PARTIR DE UMA TABELA SNNN
		If cCodigo == "S008" .or. cCodigo == "S009"	.or. cCodigo == "S028" .or. cCodigo == "S029" .Or. cCodigo == "S059" .Or. cCodigo == "S140"// FORNECEDOR ASSISTENCIA MEDICA
			cCons := "S016"
			cCpoRet := "CODIGO"
		ElseIf cCodigo == "S013" .or. cCodigo == "S014" .or. cCodigo == "S030" .or. cCodigo == "S031" .Or. cCodigo == "S060" .Or. cCodigo == "S141"// FORNECEDOR ASSISTENCIA ODONTOLOGICA
			cCons := "S017"
			cCpoRet := "CODIGO"
		ElseIf cCodigo == "S074"
		    If Len(aCols) > 0
		    	If aCols[n,5] == "2"
		    		cCons := "S017"
   					cCpoRet := "CODIGO"
		    	Else
		    		cCons := "S016"
					cCpoRet := "CODIGO"
				Endif
			Endif
		EndIf
	ElseIf cVar $ "M->RHK_CODFOR*M->RHK_PLANO*M->RHL_PLANO*M->RHM_PLANO*M->RHN_CODFOR*M->RHN_PLANO*M->RHO_CODFOR*M->JX_CODFORN*M->JX_PLANO*M->L0_PLANO*M->LE_PLANO"
		oModel 		:= FWModelActive()

		If !(cVar $ "M->RHN_CODFOR*M->RHN_PLANO*M->RHO_CODFOR")
			If (cVar $ "M->JX_CODFORN*M->JX_PLANO*M->L0_PLANO*M->LE_PLANO")
				oStructSJX	:= oModel:GetModel("GPEA063_MSJX")
				cTpForn := oStructSJX:GetValue("JX_TPFORN")
			Else
				oStructRHK	:= oModel:GetModel( "GPEA001_MRHK" )
				cTpForn		:= oStructRHK:GetValue("RHK_TPFORN")
			EndIf
		ElseIf cVar $ "M->RHN_CODFOR*M->RHN_PLANO"
			oStructRHN	:= oModel:GetModel( "GPEA002_MRHN" )
			cTpForn		:= oStructRHN:GetValue("RHN_TPFORN")
		ElseIf cVar $ "M->RHO_CODFOR*M->RHO_PLANO"
			oStructRHO	:= oModel:GetModel( "GPEA003_MRHO" )
			cTpForn		:= oStructRHO:GetValue("RHO_TPFORN")
		EndIf

		If cVar $ "M->RHK_CODFOR*M->RHN_CODFOR*M->RHO_CODFOR*M->JX_CODFORN"
			If cTpForn == "1"
				cCons := "S016"
				cCpoRet := "CODIGO"
			Else
				cCons := "S017"
				cCpoRet := "CODIGO"
			EndIf
			If(cVar == "M->RHK_CODFOR", bFilterRCC := {|| RCC->RCC_FILIAL == xFilial("RCC", SRA->RA_FILIAL )}, Nil )
			If cVar == "M->RHO_CODFOR"  // Filtrar somente os fornecedores vinculados ao funcionario
				If FunName() == "GPEA003"
					cSvAlias := Alias()
					DbSelectArea("RHK")
					DbSetOrder( 1 )
					DbSeek( SRA->RA_FILIAL + SRA->RA_MAT, .F. )
					cCodFor := ""
					While !Eof() .and. RHK->RHK_FILIAL + RHK->RHK_MAT == SRA->RA_FILIAL + SRA->RA_MAT
						cCodFor += RHK->RHK_CODFOR + "*"
						DbSkip()
					EndDo
					//Procurar Na RHN
					DbSelectArea("RHN")
					DbSetOrder( 1 )
					DbSeek( SRA->RA_FILIAL + SRA->RA_MAT, .F. )
					While !Eof() .and. RHN->RHN_FILIAL + RHN->RHN_MAT == SRA->RA_FILIAL + SRA->RA_MAT
						cCodFor += RHN->RHN_CODFOR + "*"
					DbSkip()
					EndDo
					DbSelectArea( cSvAlias )
					cFilter := "{ || Substr(RCC->RCC_CONTEU,1,3) $ '" + cCodFor + "' }"
					bFilterRCC := &cFilter

				EndIf
			EndIf

		ElseIf cVar $ "M->RHK_PLANO*M->RHL_PLANO*M->RHM_PLANO*M->RHN_PLANO*M->JX_PLANO*M->L0_PLANO*M->LE_PLANO"

			If !(cVar $ "M->RHN_PLANO")
				If(cVar $ "M->JX_PLANO*M->L0_PLANO*M->LE_PLANO")
					oStructSLE	:= oModel:GetModel( "GPEA063_MSLE" )
					oStructSL0	:= oModel:GetModel( "GPEA063_MSL0" )
					cCodPlano := oStructSJX:GetValue("JX_CODFORN")
				Else
					oStructRHL	:= oModel:GetModel( "GPEA001_MRHL" )
					oStructRHM	:= oModel:GetModel( "GPEA001_MRHM" )
					cCodPlano	:= oStructRHK:GetValue("RHK_CODFOR")
				EndIf
			Else
				cCodPlano	:= oStructRHN:GetValue("RHN_CODFOR")
			EndIf

			If cVar == "M->RHK_PLANO"
				cTpPlano 	:= oStructRHK:GetValue("RHK_TPPLAN")
			ElseIf cVar == "M->RHL_PLANO"
				cTpPlano 	:= oStructRHL:GetValue("RHL_TPPLAN")
			ElseIf cVar == "M->RHM_PLANO"
				cTpPlano 	:= oStructRHM:GetValue("RHM_TPPLAN")
			ElseIf cVar == "M->RHN_PLANO"
				cTpPlano 	:= oStructRHN:GetValue("RHN_TPPLAN")
			ElseIf cVar == "M->JX_PLANO"
				cTpPlano := oStructSJX:GetValue("JX_TPPLANO")
			ElseIf cVar == "M->L0_PLANO"
				cTpPlano := oStructSL0:GetValue("L0_TPPLANO")
			ElseIf cVar == "M->LE_PLANO"
				cTpPlano := oStructSLE:GetValue("LE_TPPLANO")
			EndIf

			If cTpForn == "1"
				If cTpPlano == "1"
					cCons := "S008"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,92,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "2"
					cCons := "S009"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,83,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "3"
					cCons := "S028"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,95,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "4"
					cCons := "S029"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,113,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "5"
					cCons := "S059"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,95,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "6"
					cCons := "S140"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,95,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				EndIf
			Elseif cTpForn == "2"
				If cTpPlano == "1"
					cCons := "S013"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,92,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "2"
					cCons := "S014"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,83,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "3"
					cCons := "S030"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,95,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "4"
					cCons := "S031"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,110,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "5"
					cCons := "S060"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,95,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				ElseIf cTpPlano == "6"
					cCons := "S141"
					cFilter := "{ || Substr(RCC->RCC_CONTEU,95,3) ==  '" + cCodPlano + "' }"
					bFilterRCC := &cFilter
				EndIf
			EndIf
			cCpoRet := "CODIGO"
		EndIf
	EndIf

	// n - Variavel de posicionamento do objeto GetDados
	// O trecho abaixo controla para que não haja conflito entre 2 GetDados, caso seja
	// disparada uma consulta F3 entre 2 tabelas. Ex.: S008 faz consulta em S016
	If Type('n') =="N"
		nCpn := n
	EndIf

	xRet := Gp310SXB(cCons, cCpoRet, bFilterRCC )

	If ValType(xRet)<> "L" .or. (ValType(xRet)== "L"  .and. !xRet)
		VAR_IXB := &__READVAR
	EndIf

	If nCpn > 0
		n := nCpn
	EndIf

	If ValType(xRet) <> "L"
		xRet := .F.
	EndIf

Return( xRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GPEA010EPMInt ³ Autor ³ Rogerio Ribeiro  ³ Data ³ 09/04/00 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Integracao do Protheus SIGATRM com o Datasul EPM e 		³
³          ³ Datasul AMS.											    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 			                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GPEA010EPMInt(nOpcao)
Local oWSUsuario, oUsuario
Local nOldSet 	:= SetVarNameLen(255)
Local cEmp    	:= ""
Local cUni    	:= ""
Local cFil	  	:= ""
Local cPai    	:= ""
Local cFilho  	:= ""

Local nTamLayEmp  := Len(FWSM0Layout(cEmpAnt,1))
Local nTamLayUni  := Len(FWSM0Layout(cEmpAnt,2))
Local nTamLayFil  := Len(FWSM0Layout(cEmpAnt,3))

	If SuperGetMv("MV_TRMINTG", NIL, .F.)
		oWSUsuario:= EPMWSNew("Usuario")

		If nOpcao == 3 .Or.;
		nOpcao == 4
			oUsuario					:= UsuarioWSService_UsuarioWSHolder():New()
			oUsuario:cCdExterno 		:= SRA->RA_FILIAL + alltrim(SRA->RA_MAT)
			oUsuario:cNome 				:= alltrim(SRA->RA_NOME)
			oUsuario:cCpf 				:= SRA->RA_CIC
			oUsuario:cEmail 			:= alltrim(SRA->RA_EMAIL)
			oUsuario:cLogin 			:= SRA->RA_CIC
			oUsuario:dDataNascimento 	:= SRA->RA_NASC
			oUsuario:cSexo 				:= SRA->RA_SEXO
			oUsuario:cRg 				:= alltrim(SRA->RA_RG)
			oUsuario:cNomeMae 			:= alltrim(SRA->RA_MAE)

			// Prepara relacionamento com unidade
			oUsuario:oWSListaUsuarioPerfil := UsuarioWSService_ListaUsuarioPerfilWSHolder():New()
			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil := {}
			Aadd(oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil, UsuarioWSService_UsuarioPerfilWSHolder():New())

			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:cCDUsuarioExterno 	   := SRA->RA_FILIAL + alltrim(SRA->RA_MAT)
			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:cCDUsuarioPerfilExterno := ""

			//Captura Empresa
			cEmp := Substr(SRA->RA_FILIAL, 1, nTamLayEmp)
			//Captura Unidade
			cUni := Substr(SRA->RA_FILIAL, nTamLayEmp+1, nTamLayUni)
			//Captura Filial
			cFil := Substr(SRA->RA_FILIAL, nTamLayEmp+nTamLayUni+1, nTamLayFil)

			//Identifica Pai-Filho para Filial SQ0
			If nTamLayEmp > 0 .Or. nTamLayUni > 0
				//Identifica Pai-Filho para Filial SQ0
				If !Empty(cFil) .and. cFil <> Nil
					cPai   := cEmp+cUni
					cFilho := cEmp+cUni+cFil
				Else
					If !Empty(cUni) .and. cUni <> Nil
						cPai   := cEmp
						cFilho := cEmp+cUni
					Else
						If !Empty(cEmp) .and. cEmp <> Nil
							cPai   := FWGrpCompany()
							cFilho := cEmp
						EndIf
					EndIf
				EndIf
			Else
				cPai	 	:= FWGrpCompany()
				cFilho 		:= SRA->RA_FILIAL
			EndIf

			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:oWSListaUsuarioPerfilUnidade:= UsuarioWSService_ListaUsuarioPerfilUnidadeWSHolder():New()
			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:oWSListaUsuarioPerfilUnidade:oWSUsuarioPerfilUnidade := {}

			Aadd(oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:oWSListaUsuarioPerfilUnidade:oWSUsuarioPerfilUnidade, UsuarioWSService_UsuarioPerfilUnidadeWSHolder():New())
			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:oWSListaUsuarioPerfilUnidade:oWSUsuarioPerfilUnidade[1]:cCdUnidadeFilhoExterno			:= cFilho
			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:oWSListaUsuarioPerfilUnidade:oWSUsuarioPerfilUnidade[1]:cCdUnidadePaiExterno				:= cPai
			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:oWSListaUsuarioPerfilUnidade:oWSUsuarioPerfilUnidade[1]:cCdUsuarioPerfilExterno 			:= ""
			oUsuario:oWSListaUsuarioPerfil:oWSUsuarioPerfil[1]:oWSListaUsuarioPerfilUnidade:oWSUsuarioPerfilUnidade[1]:cCdUsuarioPerfilUnidadeExterno 	:= ""

			oUsuario:oWSUsuarioExtra := UsuarioWSService_UsuarioExtraWSHolder():New()
			oUsuario:oWSUsuarioExtra:cCdUsuarioExterno := ""

			If !oWSUsuario:InsertUsuario(oUsuario)
				Alert(OemToAnsi(STR0261) + Chr(13) + GetWSCError())
			EndIF
		ElseIf nOpcao == 5
			If !oWSUsuario:deleteUsuario(SRA->RA_FILIAL + alltrim(SRA->RA_MAT))
				Alert(OemToAnsi(STR0261) + Chr(13) + GetWSCError())
			EndIf
		EndIf
	EndIf

	SetVarNameLen(nOldSet)

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fValTermCt   ³ Autor ³ Equipe RH         ³ Data ³ 03/09/13  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao que valida Dt Term do Contrato Determinado Inferior  ³
³          ³ a Data de Admissao e Verifica se ultrapassa Qtdade de 2 anos³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 			                                         ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fValTermCt(nOpc)
Local lRet		:= .T.
Local dDtTerm   := YearSum(M->RA_ADMISSA, 5)
Local dAdmissa  := cTod(" / / ")
Local lTipoCon	:= SRA->(ColumnPos("RA_TIPOCON")) > 0

	If cPaisLoc == "BRA" .And. (IsMemVar( "RA_TPCONTR" ))
		If (M->RA_TPCONTR == "2")
			If !Empty(M->RA_DTFIMCT)
				If (INCLUI)
					dAdmissa  := M->RA_ADMISSA
				Else
					dAdmissa  := SRA->RA_ADMISSA
				EndIf

				If (M->RA_DTFIMCT < dAdmissa)
					//-Valida quando Tipo de Contrato estiver preenchido como "Prazo Determinado", Data Fim de Contrato deve ser igual ou Superior a Admissao e ter até 5 anos da mesma.
					Help(,,OemToAnsi(STR0076),,OemToAnsi(STR0220) +CRLF+ OemToAnsi(STR0238),1,0)
					lRet := .F.
				ElseIf !Empty(M->RA_DTFIMCT) .And. IsMemVar( "RA_TPCONTR" ) .And. (dDtTerm < M->RA_DTFIMCT)
					// Valida quando Tipo de Contrato estiver preenchido como "Prazo Determinado", Data Fim ultrapassa 5 anos de Contrato da Data de Admissao
					Help(,,OemToAnsi(STR0076),,OemToAnsi(STR0220) +CRLF+ OemToAnsi(STR0239),1,0)
					lRet := .F.
				EndIf

				// Valida quando Tipo de Contrato estiver preenchido como "Prazo Determinado", deve ser preenchido a clausula assecuratoria
				If Empty(M->RA_CLAURES)
					Help(,,OemToAnsi(STR0076),,OemToAnsi(STR0220) +CRLF+ OemToAnsi(STR0222),1,0) //"Tipo de Contrato Determinado !" "Favor informar se e com Clausula assecuratoria ou não" "Atencao"
					lRet := .F.
				EndIf
			// Se parametro MV_VLDCTR = .T., valida quando Tipo de Contrato estiver preenchido como "Prazo Determinado"
			ElseIf lVldCtr .And. !lIntTaf .And. !lMiddleware
				Help(,, OemToAnsi(STR0076),, OemToAnsi(STR0220) + CRLF + OemToAnsi(STR0221), 1, 0) // "Atencao"#"Tipo de Contrato Determinado !"#"Por favor, informe a data de término do contrato."
				lRet := .F.
			EndIf
		EndIf

		If lRet .And. lTipoCon
			If M->RA_TPCONTR == "1" .And. !Empty(M->RA_TIPOCON)
				Help(,,OemToAnsi(STR0076),,OemToAnsi(STR0427),1,0) //Atencao#TpContDeterm. não deve ser preenchido para contrato indeterminado.
				lRet := .F.
			ElseIf M->RA_TPCONTR == "2" .And. M->RA_TIPOCON == "1" .And. !Empty(M->RA_DTFIMCT)
				Help(,,OemToAnsi(STR0076),,OemToAnsi(STR0428),1,0) //Atencao#Data fim do contrato não deve ser preenchida para contrato determinado por ocorrência de fato.
				lRet := .F.
			Endif
		EndIf
	EndIf
Return(lRet)


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ IntegDef	  ³ Autor ³ Emerson Campos    ³ Data ³ 23/01/12 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para a interacao com EAI - Envio/Recebimento        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 		                                        	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function IntegDef( cXml, nType, cTypeMsg, cVersaoMsg )
Local aRet := {}

aRet:= GPEI010( cXml, nType, cTypeMsg, cVersaoMsg )

Return( aRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010VldDepto ³ Autor ³ Leandro Dr.      ³ Data ³ 05/11/13 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida departamento caso esteja utilizando integracao com  ³
³          ³ o LOGIX.													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 		                                        	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010VldDepto()
Local cDepto 	:= M->RA_DEPTO
Local lRet 		:= .T.
Local nPos		:= 0
Local nEncho	:= 0

	If Empty(cDepto)
		nPos			:= ASCAN(oenchsra:agets,{ |X| "RA_DEPTO"$X})	// Pesquisa a posicao do campo RA_MAT na enchoice
		nEncho	:= oEnchSra:Nctrl
		oEnchSra:aEntryCTRLS[nPos]:setFocus()
		oEnchSra:GOTOCTRL(nEncho)

		Help("",1,OemtoAnsi(STR0076),,OemtoAnsi(STR0282),1,0) //"Campo departamento e obrigatorio nas integracoes com LOGIX, preencha-o para prosseguir"
		lRet := .F.
	EndIf

Return( lRet )


//------------------------------------------
//   FUNCOES ESPECIFICAS - FASE 4
//------------------------------------------

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010COP	  ³ Autor ³ Emerson Campos    ³ Data ³ 12/02/14 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Rotina de Copia de Registro de Funcionarios.		        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - MenuDef                                         	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010COP( cAlias , nReg , nOpc , cSraMat , lDlgPadSiga , oDlg , aObjSize )
Local lFile		:= If(File("COPIACPOSSRA.FCH"), .T., .F.)
Local lTela		:= .F. //Gera o arquivo default sem apresentar a tela de configuração

	If Type("cArmCodRd0") == "U"
		cArmCodRd0	:= ""
	EndIf

	If Empty(cArmCodRd0)
		cArmCodRd0 := fGetPessoa( "SRA" , ( SRA->RA_FILIAL+SRA->RA_MAT ) , cEmpAnt , SRA->RA_FILIAL )
	EndIf

	If !lFile
		fSelecCamposSRA(lTela)
	EndIf
	nOpc := 7
	DEFAULT lDlgPadSiga := .F.
Return( Gpea010Mnt( @cAlias , @nReg , @nOPC , @cSraMat , lDlgPadSiga , oDlg , aObjSize ) )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fGravaSRB	  ³ Autor ³ Abel Ribeiro      ³ Data ³ 29/12/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualiza o SRB, com os Dependentes do Registro Anterior.	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPE010	                                                	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGravaSRB(cAlias)
Local aArea		:= GetArea()
Local aCposSRB	:= {}
Local nX		:= 0
Local nY		:= 0

	dbSelectArea("SX3")
	dbSetOrder(1)
	dbSeek("SRB")
	While ( !Eof() .AND. (SX3->X3_ARQUIVO == "SRB") )
		If SX3->X3_CONTEXT != "V"
			Aadd(aCposSRB,{ SX3->X3_CAMPO })
		EndIf
		dbSelectArea("SX3")
		dbSkip()
	EndDo

	If Len(aDep) > 0 .And. Len(aCposSRB) > 0
	 	dbSelectArea("SRB")
		For nX := 1 to Len(aDep)
			RecLock("SRB",.T.)
			For nY := 1 To Len(aCposSRB)
				If AllTrim(aCposSRB[nY][1]) == "RB_FILIAL"
					&(aCposSRB[nY][1]) := xFilial("SRA")
				ElseIf AllTrim(aCposSRB[nY][1]) == "RB_MAT"
						&(aCposSRB[nY][1]) := GETMEMVAR("RA_MAT")
			    Else
			    	&(aCposSRB[nY][1]) := aDep[nX][nY]
			    EndIf
		    Next nY
		    SRB->(MsUnlock())
		 Next nX
	 EndIf

	RestArea( aArea )

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fGravaSRQ	  ³ Autor ³ Abel Ribeiro      ³ Data ³ 29/12/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualiza o SRQ, com os Beneficiarios. 	                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010	                                               	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGravaSRQ(cAlias)
Local aArea		:= GetArea()
Local aCposSRQ	:= {}
Local nX		:= 0
Local nY		:= 0

	dbSelectArea("SX3")
	dbSetOrder(1)
	dbSeek("SRQ")
	While ( ! Eof() .AND. (SX3->X3_ARQUIVO == "SRB") )
		If SX3->X3_CONTEXT != "V"
			Aadd(aCposSRQ,{ SX3->X3_CAMPO })
		EndIf
		dbSelectArea("SX3")
		dbSkip()
	EndDo

	If Len(aBenef) > 0 .And. Len(aCposSRQ) > 0
	 	dbSelectArea("SRQ")
		For nX := 1 to Len(aBenef)
			RecLock("SRQ",.T.)
			For nY := 1 To Len(aCposSRQ)
				If AllTrim(aCposSRQ[nY][1]) == "RQ_FILIAL"
					&(aCposSRQ[nY][1]) := xFilial("SRA")
				ElseIf AllTrim(aCposSRQ[nY][1]) == "RQ_MAT"
						&(aCposSRQ[nY][1]) := GETMEMVAR("RA_MAT")
			    Else
			    	&(aCposSRQ[nY][1]) := aBenef[nX][nY]
			    EndIf
		    Next nY
		    SRQ->(MsUnlock())
		 Next nX
	 EndIf

 	RestArea( aArea )

Return


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010Transf ³ Autor ³ Mauricio Takakura   ³ Data ³ 18/04/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida transferencia.                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010	                                              	 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010Transf()
	Local cRotFol
	Local cMsg 		:= OemToAnsi(STR0093) + CRLF + CRLF // "Sera realizada as seguintes transferencias: "
	Local lRet		:= .T.

	// Validacao da Transferencia de Processos
	If ISMEMVAR("M->RA_PROCES") .AND. M->RA_PROCES <> SRA->RA_PROCES
		If cPaisLoc == "MEX"
			cRotFol := fGetRotOrdinar()
			lRet := fPosPeriodo( xFilial("RCH"), M->RA_PROCES, M->RA_PERADM, M->RA_PAGADM, cRotFol, ,1 )
			If lRet
				lRet := fPosPeriodo( xFilial("RCH"), M->RA_PROCES, M->RA_PERAUM, M->RA_PAGAUM, cRotFol, ,1 )
			EndIf
			If !lRet
				Help( ' ' , 1 , "TRANSPROC", , OemToAnsi(STR0094) , 1 , 0 ) // "Periodo de Admissao ou Aumento invalido"
			EndIf
		EndIf

		cMsg += OemToAnsi(STR0089) 										// "Processo: "
		cMsg += CRLF + OemToAnsi(STR0090) + " " + SRA->RA_PROCES + " - " + fDesc("RCJ",SRA->RA_PROCES, "RCJ_DESCRI")  // "De: "
		cMsg += "    " + OemToAnsi(STR0091) + " " + M->RA_PROCES + " - " + fDesc("RCJ",M->RA_PROCES, "RCJ_DESCRI") // "Para: "

		If lRet
			If lRet := MsgYesNo( cMsg + CRLF + CRLF + OemToAnsi(STR0092) ) // "Deseja Continuar com a Transferencia?"
				// Validar os Periodos do Cadastro de Funcionario
				lRet := fTransProc()
			EndIf

		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010SalBas ³ Autor ³ Abel Ribeiro       ³ Data ³ 10/11/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Consistencia do Campo Tipo Salario Base Integral.          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_SALBASI                              	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010GetSal()
Local aArea		:= GetArea()
Local lRet 		:= .T.
Local dDataRef  := dDataBase
Local nSalMin   := FTABELA("S019",1,4, dDataRef)
Local nFator := fTabela("S021", 1, 19, dDataRef)

	If (nFator == Nil)
		nFator:= fTabela("S021",1, 19)
	EndIf

	If cPaisLoc == "COL" .And. GetMemVar( "RA_TIPOSAL" ) == "2"

		If nSalMin == Nil .Or. nSalMin == 0
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0139+DTOC(dDataRef)), {OemToAnsi(STR0077)})	//"Atencao!"###"Favor preencher a tabela de Salario Minimo, na DataBase : " ### "OK"
	  		lRet := .F.
		EndIf

		If M->RA_SALARIO < ( nSalMin * 10 )
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0140)+;
	  			chr(10)+chr(13)+STR0157+TRANSFORM(nSalMin,"@E 9,999,999,999.99"), {OemToAnsi(STR0077)})	//"Atencao!"###"Salario Base Integral nao pode ser < 10 Salarios Minimos" ### "OK"
			lRet:= .F.
		EndIf

	EndIf

	RestArea( aArea )

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fSalbas   ³ Autor ³ Abel Ribeiro         ³ Data ³ 10/03/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Consistencia do Campo Tipo Salario Base Integral.          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_SALBASI                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fSalBas()
Local aArea		:= GetArea()
Local lRet 		:= .T.
Local cTipoSal	:= GetMemVar("RA_TIPOSAL")
Local dDataRef  	:= dDataBase
Local cMoeda	   	:= ""							// Moneda de Origen de salario
Local dtConv		:= CtoD(" /  / ")				// Fecha de Conversión
Local nSalario		:= If (M->RA_SALARIO == Nil, SRA->RA_SALARIO, M->RA_SALARIO)			// Salario del empleado
Local nAux01		:= 0							// Auxiliar
Local nSalIntB		:= 0
Local nHorMes		:= 0
Local nSalBas
Local nSalMin   	:= IIF(cPaisLoc <> "COL",FTABELA("S019",1,4, dDataRef),FTABELA("S007",1,6)) // Salario mínimo
Local nFator := IIF(cPaisLoc <> "COL",fTabela("S021", 1, 19, dDataRef),Nil)

	If (nFator == Nil) .and. cPaisLoc <> "COL"
		nFator:= fTabela("S021",1, 19)
	EndIf

	IF cPaisLoc == "COL"

		If nSalMin == Nil .Or. nSalMin == 0
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0139 + DTOC(dDataRef)), {OemToAnsi(STR0077)})	//"Atencao!"###"Favor preencher a tabela de Salário Minimo, na DataBase : " ### "OK"
	  		lRet := .F.
		EndIf

		nHorMes := GetMemVar("RA_HRSMES")

		If nHorMes > 0 .and. nHorMes < 240
			nSalMin := ( nSalMin / 240 ) * nHorMes
		EndIf

		If lRet
		//+------------------------------------------------------------------------------------------+
		//|		1.- Se realiza conversión de otras monedas a pesos colombianos                        |
		//+------------------------------------------------------------------------------------------+
		cMoeda := GetMemVar("RA_MOEDAPG")

		If cMoeda <> Nil .and. cMoeda <> "01"
			dtConv := IIF(Inclui ,GetMemVar("RA_ADMISSA"),GetMemVar("RA_FECAUM"))
			nSalario := xMoeda(nSalario,Val(cMoeda),1,dtConv)
		EndIf

		//+------------------------------------------------------------------------------------------+
		//|		2.- Se realiza comparación contra el salario mínimo	                     			  |
		//+------------------------------------------------------------------------------------------+

		Do Case

			case cTipoSal == "1"
				If !(nSalario >= nSalMin)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0240) + str(nSalMin), {OemToAnsi(STR0077)})  //##"El salario debe ser mayor o igual al salario mínimo -> "###"Atencao!"###"OK"
				 	lRet := .F.
				EndIf
			Case cTipoSal == "2"
				nAux01 := fPosTab("S010",XFILIAL("SRA"),"=",1)
				nAux01 		:= IIF(nAux01 == 0, 1, nAux01)
				nSalbas 	:= fTabela("S010",nAux01,5)
				nFator 		:= IIF(nSalBas <> Nil .and. nSalBas <> 0 , nSalBas/ 100, 0 )
				nSalIntB 	:= nSalMin * (1 + nFator)

				If !(nSalario >= nSalIntB)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0240) + str(nSalIntB), {OemToAnsi(STR0077)})  //##"El salario debe ser mayor o igual al salario mínimo -> "###"Atencao!"###"OK"
				 	lRet := .F.
				EndIf
		End Case

		EndIf

	ENDIF

	RestArea( aArea )

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ ValFator ³ Autor ³ Erika Kanamori        ³ Data ³ 04/06/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida campo RA_FATOR e calcula salario integral.          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function ValFator()
Local lRet		:= .T.
Local nSalario := 0

	If M->RA_FATOR < 30
		Aviso(OemToAnsi(STR0076), OemToAnsi(STR0138), {OemToAnsi(STR0077)})  //##"O Fator Prestacional deve ser maior que 30%"###"Atencao!"###"OK"
		lRet := .F.
	EndIf

	If lRet
		nSalario := M->RA_SALBASI + (M->RA_SALBASI * M->RA_FATOR)
		M->RA_SALARIO := nSalario
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010EstVLD ³ Autor ³ Abel Ribeiro       ³ Data ³ 12/11/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Salario de Estagiario  para tipo 1 ,2 e 3.    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico para Colombia                   		³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gp010EstVLD()
Local aArea		:= GetArea()
Local lRet 		:= .T.
Local dDataRef  := dDataBase

	If GetMemVar( "RA_TIPOEST" ) $ "1/2/3"
	   nSalMin    := FTABELA("S007",1,4,NIL)

	   If nSalMin == Nil .Or. nSalMin == 0
	      Aviso(OemToAnsi(STR0076), OemToAnsi(STR0139+DTOC(dDATAREF)), {OemToAnsi(STR0077)})	//"Atencao!"###"Favor preencher a tabela de Salário Minimo, na DataBase : " ### "OK"
	      lRet := .F.
	      Return(lRet)
	   EndIf
	EndIf

	If  GetMemVar( "RA_TIPOEST" ) = "1"
	        If ( GetMemVar("RA_SALARIO") < ( nSalMin * 0.50 ) )
	           Aviso(OemToAnsi(STR0076), OemToAnsi(STR0146), {OemToAnsi(STR0077)})	//"Atencao!"###"Salario Estagiario nao pode ser inferior a 50% SMVL" ### "OK"
		       lRet := .F.
		    EndIf
	ElseIf  GetMemVar( "RA_TIPOEST" ) = "2"
	        If ( GetMemVar("RA_SALARIO") < ( nSalMin * 0.75 ) )
		       Aviso(OemToAnsi(STR0076), OemToAnsi(STR0147), {OemToAnsi(STR0077)})	//"Atencao!"###"Salario Estagiario nao pode ser inferior a 75% SMVL" ### "OK"
			   lRet := .F.
		    EndIf
	ElseIf  GetMemVar( "RA_TIPOEST" ) = "3"
	        If ( GetMemVar("RA_SALARIO") <  nSalMin  )
		       Aviso(OemToAnsi(STR0076), OemToAnsi(STR0148), {OemToAnsi(STR0077)})	//"Atencao!"###"Salario Estagiario nao pode ser inferior a 1 SMVL" ### "OK"
			   lRet := .F.
		    EndIf
	EndIf

	RestArea( aArea )

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GpVldLocPag ³ Autor ³ Abel Ribeiro        ³ Data ³ 24/11/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Local de Pagto tab. caixas Compens. com  Local ³
³          ³ Pagto informado no campo RA_KEYLOC.                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico para Colombia 	                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GpVldLocPag()
Local lRet 		:= .T.
Local cCxComp   := ''

	nPosB		:= FPOSTAB("S004",GetMemVar( "RA_CXCOMP" ),"=",4)

	If nPosB > 0
		cCxComp := If(FTABELA("S004",nPosB,8)<> Nil,FTABELA("S004",nPosB,8),cCxComp)
	EndIf

	If GetMemVar( "RA_KEYLOC" ) <> cCxComp
	   Aviso(OemToAnsi(STR0076), OemToAnsi(STR0156), {OemToAnsi(STR0077)})	//"Atencao!"###"Localidade de Pagamento da Caixa de Compensação deve ser igual a localidade de pagamento do funcionário" ### "OK"
	   lRet := .F.
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaTpMoeda    ³ Autor ³ Abel Ribeiro      ³ Data ³ 21/01/04 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Opcoes do cBox para o campo Tipo de Moeda.				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_CBOX do campo RA_TPMOEDA                               	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaTpMoeda()
Local cOpcBox:=''
Local I := 0

	For I = 1 To 5
 		cMOEDA  := GetMv("MV_MOEDA"+STR(I,1))
   		If Empty(cMOEDA)
     		Loop
       	Else
	       cOpcBox += STR(I,1)+"=" + cMOEDA + ";"
	    EndIf
	Next

Return( cOpcBox )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GP010Adm     ³ Autor ³ Silvia Taguti     ³ Data ³ 23/03/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Consistencia para modificacao dos campos no cadastro.	    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010					                               	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GP010Adm(lGeraLog, nLin, cFilSRA )
Local aRCPVirtGd	:= {}				// Vetor com os campos virtuais(variavel para getdados da tabela RCP)
Local aRCPVisualGD	:= {} 				// Vetor com os campos visuais(variavel para getdados da tabela RCP)
Local aRCPNotFields	:= {}				// Vetor com os campos que nao seria visualizados(variavel para getdados da tabela RCP)
Local aArea			:= GetArea()
Local cKey			:= ''				// Variavel com os valores das chaves(variavel para getdados da tabela RCP)
Local cPdSrf		:= ""
Local cTipoMov
Local cTipoReg
Local dDtDemis		:= Ctod("//")
Local dLastDt		:= Ctod("  /  /  ")
Local lRet  	:= .T.
Local lBjIMSS 	:= .F.					// Permitir incluir um rescisao junto com uma alteracao salarial
Local lTLFuncSal    := .T.              // COS - Variavel que determina que foi realizada uma troca de funcao + salario
Local nPos 		:= nPosA := nPosB := 0
Local nPosDtMov
Local nPosTipo
Local nPosRPat
Local nPosSal
Local nPosDtImss
Local nPosPer
Local nPosPag
Local nPosTpBa
Local nPosCodFunc
Local nPosCargo
Local nPosTpCCSS
Local nPosCic
Local nPosTjrNda
Local nPosTpFin
Local nNewPos		:= 0
Local nTamOri
Local nPosNITarl :=0
Local nPosHrImss

Private aRCPColsRec	:= {}				// Vetor que contem os Recnos da tabela. (variavel para getdados da tabela RCP)
Private nRCPUsado	:= 0.00 			// Variavel que retorna a quantidade de campos da tabela. (variavel para getdados da tabela RCP)
If cPaisLoc $ "DOM|PAR"
	Private _aPerSel :={}
	fGetPerAtual(@_aPerSel,xFilial("RCH"),SRA->RA_PROCES,fGetRotOrdinar())//fGetPerSel(SRA->RA_PROCES)
EndIf
Default lGeraLog  	:= .F.
Default nLin	    := 1
Default cFilSRA     := xFilial( "SRA", SRA->RA_FILIAL )

	cKey	 := ( cFilSRA + SRA->RA_MAT )
	aHeaderRCP := {}									// Foi necessario zerar a variavel pois o Gdmontacols nao gerencia o campo Ghost
	aRCPCols := RCP->( GdMontaCols(	@aHeaderRCP		,; 	//01 -> Array com os Campos do Cabecalho da GetDados
							  		@nRCPUsado		,;	//02 -> Numero de Campos em Uso
							  		@aRCPVirtGd		,;	//03 -> [@]Array com os Campos Virtuais
							  		@aRCPVisualGd	,;	//04 -> [@]Array com os Campos Visuais
	                          		"RCP"			,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
							  		aRCPNotFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
							  		@aRCPColsRec	,;	//07 -> [@]Array unidimensional contendo os Recnos
							  		"SRA"			,;	//08 -> Alias do Arquivo Pai
							  		cKey			,;	//09 -> Chave para o Posicionamento no Alias Filho
					 			  	NIL				,;	//10 -> Bloco para condicao de Loop While
		  			 				NIL				,;	//11 -> Bloco para Skip no Loop While
		  			 				.T.				,;	//12 -> Se Havera o Elemento de Delecao no aCols
		  			 				NIL				,;	//13 -> Se cria variaveis Publicas
		  			 				NIL				,;	//14 -> Se Sera considerado o Inicializador Padrao
		  			 				NIL				,;	//15 -> Lado para o inicializador padrao
		  			 				NIL				,;	//16 -> Opcional, Carregar Todos os Campos
		  			 				NIL				,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
					 				NIL				,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
					 				NIL				,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
					 				NIL				,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
					 				.T.				,;	//21 -> Carregar Coluna Fantasma
									NIL				,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
									NIL				,;	//23 -> Verifica se Deve Checar se o campo eh usado
									NIL				,;	//24 -> Verifica se Deve Checar o nivel do usuario
									NIL				,;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
									NIL				,;	//26 -> [@]Array que contera as chaves conforme recnos
									NIL				,;	//27 -> [@]Se devera efetuar o Lock dos Registros
									NIL				,;	//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
							        NIL				,;	//29 -> Numero maximo de Locks a ser efetuado
									.T.				 ;	//30 -> Utiliza Numeracao na GhostCol
							  	);
									)					//Funcao em PONXFUN.PRX

	aRCPColsAnt := aClone( aRCPCols )

	// Reorganiza o array para o tratamento de datas duplicadas
	fReorgCols(@aRCPCols)

	nPosDtMov 	:= GdFieldPos( "RCP_DTMOV"	, aHeaderRCP )
	nPosTipo  	:= GdFieldPos( "RCP_TPMOV"	, aHeaderRCP )
	nPosRPat  	:= GdFieldPos( "RCP_CODRPA" , aHeaderRCP )
	nPosSal  	:= GdFieldPos( "RCP_SALMES" , aHeaderRCP )
	nPosDtImss  := GdFieldPos( "RCP_DTIMSS" , aHeaderRCP )
	nPosPer		:= GdFieldPos( "RCP_PERMOV" , aHeaderRCP )
	nPosPag		:= GdFieldPos( "RCP_NPGMOV" , aHeaderRCP )
	nPosTpBa	:= GdFieldPos( "RCP_CBIMSS" , aHeaderRCP )
	nPosTpFin	:= GdFieldPos( "RCP_TIPFIN" , aHeaderRCP )

	If cPaisLoc == "COS"
		nPosCodFunc := GdFieldPos( "RCP_CODFUN", aHeaderRCP )
		nPosCargo	:= GdFieldPos( "RCP_CARGO"	, aHeaderRCP )
		nPosTpCCSS	:= GdFieldPos( "RCP_TPCCSS"	, aHeaderRCP )
		nPosCic		:= GdFieldPos( "RCP_CIC"	, aHeaderRCP )
		nPosTjrNda	:= GdFieldPos( "RCP_TJRNDA"	, aHeaderRCP )
	ElseIF cPaisLoc $ "COL"
		nPosCodFunc 	:= GdFieldPos( "RCP_CODFUN", aHeaderRCP )
		nPosCargo		:= GdFieldPos( "RCP_CARGO"	, aHeaderRCP )
		nPosTpCCSS		:= GdFieldPos( "RCP_KEYLOC"	, aHeaderRCP )
		nPosTpFin		:= GdFieldPos( "RCP_CBIMSS" , aHeaderRCP )
		nPosTpAlt		:= GdFieldPos( "RCP_TIPALT" , aHeaderRCP )
		nPosAFP  		:= GdFieldPos( "RCP_NITAFP" , aHeaderRCP )

		nPosCic			:= GdFieldPos( "RCP_CIC"	, aHeaderRCP )
		nPosCC			:= GdFieldPos( "RCP_CC"	, aHeaderRCP )
		If cPaisLoc == "COL"
			nPosNITarl		:= GdFieldPos( "RCP_NITARL"	, aHeaderRCP )
		EndIF
	ElseIf cPaisLoc == "DOM"
		nPosDtImss	:= nPosDtMov
		nPosTpAlt		:= 	GdFieldPos( "RCP_TIPALT" , aHeaderRCP )
	ElseIf cPaisLoc == "PAR"
		nPosTpCCSS	:= GdFieldPos( "RCP_KEYLOC"	, aHeaderRCP )
		nPosCic		:= GdFieldPos( "RCP_CIC"	, aHeaderRCP )
		nPosCodFunc := GdFieldPos( "RCP_CODFUN", aHeaderRCP )
		nPosCargo	:= GdFieldPos( "RCP_CARGO"	, aHeaderRCP )
		nPosTpAlt	:= GdFieldPos( "RCP_TIPALT" , aHeaderRCP )
		nPosTpFin	:= GdFieldPos( "RCP_CBIMSS" , aHeaderRCP )
		nPosSal  	:= GdFieldPos( "RCP_SALMES" , aHeaderRCP )
		nPosDtImss	:= GdFieldPos("RCP_DTIMSS",aHeaderRCP )
		nPosHrImss  := GdFieldPos("RCP_HRIMSS",aHeaderRCP )



	EndIf

	aModTraj	:= {}
	nTamOri  := Len(aRCPCols)

	// Se a data de admissao foi alterada e nao enviada ao IMSS
	// perguntar se deve ser substituida, caso afirmativo modificar acols
	If IsMemVar( "RA_ADMISSA" )
		If GdFieldGet( "RA_ADMISSA", nLin, .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_ADMISSA" )
			nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "01" } )
			If nPos > 0
				If !Empty(aRCPCols[nPos,nPosDtImss] )
					If lGeraLog
						lLog := .T.
						If aTotRegs[1]== 0
							cLog := STR0059 									// "Registro ja foi enviado ao Seguro Social"
							Aadd(aTitle,cLog)
							Aadd(aLog,{})
							aTotRegs[1] := len(aLog)
	               		EndIf
						Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
					Else
						cHelp := OemToAnsi( STR0059 )
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )			// "Registro ja foi enviado ao Seguro Social!"
					EndIf
					lRet := .F.
			   EndIf
				If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
					If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0053 + " " +  STR0054 ) ) )	   // "Ja existe um registro de Admissao"
						lRet := .F.
						Return( lRet )
					Else
						aRCPCols[nPos,nPosDtMov]:= GetMemVar( "RA_ADMISSA" )  	// Substituir aCols
						aRCPCols[nPos,nPosPer]	:= GetMemVar( "RA_PERADM" )  	// Substituir aCols
						aRCPCols[nPos,nPosPag]	:= GetMemVar( "RA_PAGADM" )  	// Substituir aCols
						nPosRCP := nPos
						AADD(aModTraj,{(nPos),"01",SRA->RA_ADMISSA,"M" } )
					EndIf
				EndIf
			EndIf
	   EndIf
	EndIf


	// Se a data de demissao for alterada, verificar se a data de demissao e igual
	// a data de baixa IMSS, caso seja igual e nao foi enviado ao IMSS pode ser substituido
	// caso a data de demissao for diferente da data de baixa IMSS, validar as duas
	// datas e substituir ou gerar os 2 registros
	If IsMemVar( "RA_DEMISSA" ) .And. ( GdFieldGet("RA_FECREI", nLin, .F. , aSraHeader , aSvSraCols) == GetMemVar("RA_FECREI") )
		If Empty(GetMemVar( "RA_DEMISSA")) .And. GetMemVar( "RA_SITFOLH") == "D"
			Help( "", 1 , "RA_DEMISSA" , , , 1 , 0 )
			Return( .F. )
		EndIf
		If (GdFieldGet( "RA_DEMISSA", nLin, .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_DEMISSA"))
		If cPaisLoc $ "COL|DOM|PAR"  .And. GetMemVar( "RA_SITFOLH") <> "D"
			Help( "", 1 , "RA_SITFOLH" , , , 1 , 0 )
			Return( .F. )
		EndIF
		If (Empty(GetMemVar( "RA_TIPOAFA" ) ) .AND. cPaisLoc == "MEX") .Or.;
		 	(Empty(GetMemVar( "RA_TIPOFIN" )) .AND. cPaisLoc == "COS" ) .or.  ;
		 	(Empty(GetMemVar( "RA_TIPFIN" )) .AND. cPaisLoc == "COL" ) .OR. ;
		 	(Empty(GetMemVar( "RA_TIPOFIN" )) .AND. cPaisLoc == "DOM" ) .OR.;
		 	(Empty(GetMemVar("RA_TIPOFIN")) .AND. cPaisLoc=="PAR")
				cHelp := OemToAnsi( STR0066)
				Help( "", 1 , "GPCAUSABA" , , cHelp , 1 , 0 )
				Return( .F. )
			Else
				//Se data de Demissao igual a data de demissao IMSS
				If M->RA_DEMISSA ==  If(cPaisLoc == "MEX", M->RA_DTBIMSS, M->RA_DEMISSA)
					nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "02"  .And. x[nPosDtMov] == SRA->RA_DEMISSA  } )
					If nPos > 0
						If !Empty(aRCPCols[nPos,nPosDtImss] )
							If lGeraLog
								lLog := .T.
								If aTotRegs[1]== 0
									cLog := STR0059 // "Registro ja foi enviado ao Seguro Social"
									Aadd(aTitle,cLog)
									Aadd(aLog,{})
									aTotRegs[1] := len(aLog)
			        		    EndIf
								Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
	                  		Else
								cHelp := OemToAnsi( STR0059)
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )			//"Registro ja foi enviado ao Seguro Social"
							EndIf
							lRet := .F.
					    EndIf

						If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
							If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0055 + " " +  STR0054 ) ) ) //"Ja existe um registro de Admissao"###"Deseja substituir o registro existente"
								//Adiciona em aCls o tipo de movimento 02
								GpMontac(GetMemVar( "RA_DEMISSA" ),"02",,,@nNewPos)
								aRCPCols[nNewPos,nPosPer]	:= 	Gp010RetCont("RCH_PER",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nNewPos,nPosPag]	:= 	Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								If cPaisLoc == "MEX"
									aRCPCols[nNewPos,nPosTpBa]    := GetMemVar( "RA_TIPOAFA" )
								ElseIf cPaisLoc == "COS"
									aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
								ElseIf cPaisLoc $ "COL"
									aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPFIN" )
								ElseIf cPaisLoc == "DOM"
									aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
									aRCPCols[nNewPos,nPosTpAlt]    := GetMemVar( "RA_TIPOALT" )
									aRCPCols[nNewPos,nPosSal]      := GetMemVar( "RA_SALARIO" )
								ElseIf cPaisLoc == "PAR"
									aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
									aRCPCols[nNewPos,nPosSal]   := GetMemVar( "RA_SALARIO" )
								EndIf
								If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
									lRet := .F.
								EndIf
							Else
								aRCPCols[nPos,nPosDtMov]	:= GetMemVar( "RA_DEMISSA" )	 // Substituir aCols
								aRCPCols[nPos,nPosPer]		:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nPos,nPosPag]		:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								If cPaisLoc == "COS"
										aRCPCols[nPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
								ElseIf cPaisLoc $ "COL"
									aRCPCols[nPos,nPosTpFin]    := GetMemVar( "RA_TIPFIN" )
								ElseIf cPaisLoc == "DOM"
									aRCPCols[nPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
									aRCPCols[nPos,nPosTpAlt]    := GetMemVar( "RA_TIPOALT" )
									aRCPCols[nPos,nPosSal]    	:= GetMemVar( "RA_SALARIO" )
								ElseIf cPaisLoc == "PAR"
									aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
									aRCPCols[nNewPos,nPosSal]   := GetMemVar( "RA_SALARIO" )
								Else
									aRCPCols[nPos,nPosTpBa]    	:= GetMemVar( "RA_TIPOAFA" )
								EndIf
								nPosRCP := nPos
								AADD(aModTraj,{nPos,"02",SRA->RA_DEMISSA,"M" } )
							EndIf
						EndIf
					Else
						//Adiciona em aCols o tipo de movimento 02
						GpMontac(GetMemVar( "RA_DEMISSA" ),"02",,,@nNewPos)
						aRCPCols[nNewPos,nPosPer]	:= 	Gp010RetCont("RCH_PER",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
						aRCPCols[nNewPos,nPosPag]	:= 	Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
						If cPaisLoc == "COS"
							aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
					ElseIf cPaisLoc $ "COL"
						aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPFIN" )
					ElseIf cPaisLoc == "DOM"
						aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
						aRCPCols[nNewPos,nPosTpAlt]    	:= GetMemVar( "RA_TIPOALT" )
						aRCPCols[nNewPos,nPosSal]    	:= GetMemVar( "RA_SALARIO" )
					ElseIf cPaisLoc == "PAR"
						aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
						aRCPCols[nNewPos,nPosSal]   := GetMemVar( "RA_SALARIO" )
						Else
							aRCPCols[nNewPos,nPosTpBa]  := GetMemVar( "RA_TIPOAFA" )
						EndIf

						If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
							lRet := .F.
						EndIf
					EndIf
				Else
					If GetMemVar( "RA_DEMISSA") > GetMemVar( "RA_DTBIMSS")
						cHelp := OemToAnsi(STR0087)	   						// "Data de Demissao menor que Data do IMSS"
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )	// "Registro ja foi enviado ao IMSS"
						Return( .f. )
					EndIf

					// Se a data de Demissao diferente da Data de demissao IMSS
					nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "02"  .And. x[nPosDtMov] == SRA->RA_DTBIMSS  } )
					If nPos > 0
						If !Empty(aRCPCols[nPos,nPosDtImss] )
							If lGeraLog
								lLog := .T.
								If aTotRegs[1]== 0
									cLog := STR0059 // "Registro ja foi enviado ao Seguro Social"
									Aadd(aTitle,cLog)
									Aadd(aLog,{})
									aTotRegs[1] := Len(aLog)
			        		   EndIf
								Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
	                  		Else
								cHelp := OemToAnsi( STR0059)
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 ) // "Registro ja foi enviado ao Seguro Social"
							EndIf
							lRet := .F.
					    EndIf
						If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
							If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0055 + " " +  STR0054 ) ) ) //"Ja existe um registro de Admissao"###"Deseja substituir o registro existente"
								lRet := .F.
							Else
								aRCPCols[nPos,nPosDtMov]:= GetMemVar( "RA_DTBIMSS" )	 // Substituir aCols
								aRCPCols[nPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DTBIMSS" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DTBIMSS" ),SRA->RA_PROCES, @lRet)
							If cPaisLoc $ "COS|DOM|PAR"
									aRCPCols[nPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
								Else
									aRCPCols[nPos,nPosTpBa] := GetMemVar( "RA_TIPOAFA" )
								EndIf

								nPosRCP := nPos
								AADD(aModTraj,{nPos,"02",SRA->RA_DTBIMSS,"M" } )
							EndIf
						EndIf
					Else
					   //Adiciona Acols do Tipo 02 baixa de movimento-IMSS
						GpMontac(GetMemVar( "RA_DTBIMSS" ),"02",,,@nNewPos)
						aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DTBIMSS" ),SRA->RA_PROCES, @lRet)
						aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DTBIMSS" ),SRA->RA_PROCES, @lRet)
					If cPaisLoc $ "COS|DOM"
							aRCPCols[nNewPos,nPosTpFin] := GetMemVar( "RA_TIPOFIN" )
						Else
							aRCPCols[nNewPos,nPosTpBa]  := GetMemVar( "RA_TIPOAFA" )
						EndIf

						If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
							lRet := .F.
						EndIf
					EndIf

					nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "20"  .And. x[nPosDtMov] == SRA->RA_DTBIMSS  } )
					If nPos > 0
						If !Empty(aRCPCols[nPos,nPosDtImss] )
							If lGeraLog
								lLog := .T.
								If aTotRegs[1]== 0
									cLog := STR0059 // "Registro ja foi enviado ao Seguro Social"
									Aadd(aTitle,cLog)
									Aadd(aLog,{})
									aTotRegs[1] := len(aLog)
		        		   		EndIf
								Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
	   	   					Else
								cHelp := OemToAnsi( STR0059)
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )	// "Registro ja foi enviado ao IMSS"
							EndIf
							lRet := .F.
					   	EndIf

						If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
							If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0055 + " " +  STR0054 ) ) ) //"Ja existe um registro de Admissao"###"Deseja substituir o registro existente"
							   //Adiciona Acols do Tipo 20 baixa de movimento-Folha
								GpMontac(GetMemVar( "RA_DEMISSA" ),"20",,,@nNewPos)
								aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								If cPaisLoc == "COS"
									aRCPCols[nNewPos,nPosTpFin]:= GetMemVar( "RA_TIPOFIN" )
								Else
									aRCPCols[nNewPos,nPosTpBa] := GetMemVar( "RA_TIPOAFA" )
								EndIf

								If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
									lRet := .F.
								EndIf
							Else
								aRCPCols[nPos,nPosDtMov]	:= GetMemVar( "RA_DEMISSA" )	 // Substituir aCols
								aRCPCols[nPos,nPosPer]		:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nPos,nPosPag]		:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
								If cPaisLoc == "COS"
									aRCPCols[nPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
								Else
									aRCPCols[nPos,nPosTpBa]    	:= GetMemVar( "RA_TIPOAFA" )
								EndIf

								nPosRCP := nPos
								AADD(aModTraj,{nPos,"20", SRA->RA_DEMISSA,"M" } )
							EndIf
						EndIf
					Else
					   //Adiciona Acols do Tipo 20 baixa de movimento-Folha
					   	nNewPos := 0		// Forcar a inclusao do registro 20, pois as datas sao diferentes
						GpMontac(GetMemVar( "RA_DEMISSA" ),"20",,,@nNewPos)
						aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
						aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DEMISSA" ),SRA->RA_PROCES, @lRet)
						If cPaisLoc $ "COS|PAR"
							aRCPCols[nNewPos,nPosTpFin]  := GetMemVar( "RA_TIPOFIN" )
						Else
							aRCPCols[nNewPos,nPosTpBa]   := GetMemVar( "RA_TIPOAFA" )
						EndIf

						If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
							lRet := .F.
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf


	// Se o registro patronal foi modificado,e gerar 2 registros, com baixa patronal e alta patronal
	// se ja existe um registro patronal cadastrado e nao foi enviado ao imss, perguntar se sera
	// substituido
	If IsMemVar("RA_CODRPAT") .And. (GetMemVar("RA_CODRPAT") <> GdFieldGet("RA_CODRPAT", nLin, .F. ,aSraHeader,aSvSraCols) )

	If (IsMemVar( "RA_FECREI" ) .And. GdFieldGet( "RA_FECREI", nLin, .F. , aSraHeader , aSvSraCols ) == GetMemVar( "RA_FECREI" ) ) .Or. cPaisLoc == "COS" ;
	.or. cPaisLoc $ "COL"

			If Empty(GetMemVar( "RA_DATAALT" ) )
				Help("",1,"GPDATAALT")					// "Data da alteracao nao esta preenchida."
				lret := .F.
			Else
			nPos  := aScan( aRCPCols , { |x| x[nPosTipo] == IIF(cPaisLoc <> "COL","04","TDE") .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
				If nPos > 0
					If !Empty(aRCPCols[nPos,nPosDtImss] )
						If lGeraLog
							lLog := .T.
							If aTotRegs[1]== 0
								cLog := STR0059 				// "Registro ja foi enviado ao Seguro Social"
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[1] := len(aLog)
		               		EndIf
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
		            	Else
							cHelp := OemToAnsi( STR0059)						// "Registro ja foi enviado ao Seguro Social"
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						EndIf
						lRet := .F.
				   EndIf

					If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
						If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0056 + " " +  STR0054 ) ) ) //"Ja existe um registro de Modificacao Patronal" //"Deseja substituir o registro existente"
							lRet := .F.
						Else
							//Nao pode alterar nenhuma informacao da trajetoria caso exista registros apos a
							// data de alteracao informada.
							nPos := aScan( aRCPCols , { |x| x[nPosDtMov] > GetMemVar( "RA_DATAALT" ) + 1 } )
							If nPos > 0
								If lGeraLog
									lLog := .T.
									If aTotRegs[2]== 0
										cLog := STR0062 // Ja existem modificacoes apos a data de alteracao informada.
										Aadd(aTitle,cLog)
										Aadd(aLog,{})
										aTotRegs[2] := len(aLog)
									EndIf
									Aadd(aLog[aTotRegs[2]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
								Else
									cHelp := OemToAnsi( STR0062) 						// "Ja existem modificacoes apos a data de alteracao informada."
									Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )	// "Registro ja foi enviado ao IMSS"
								EndIf
								lRet := .F.
							Else
								nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "03" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) + 1 } )
								aRCPCols[nPos,nPosRPat]	:= GetMemVar("RA_CODRPAT") // Substituir acols
								aRCPCols[nPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
							If cPaisLoc == "COL"
								aRCPCols[nPos,nPosTpFin]    := ""
								aRCPCols[nPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )
							EndIf
								nPosRCP := nPos
								AADD(aModTraj,{nPos,"03",GetMemVar("RA_DATAALT") + 1,"M" } )
							EndIf
						EndIf
					EndIf
				Else
					// Nao pode incluir/alterar nenhuma informacao da trajetoria caso exista registros
					// apos a data de alteracao informada. Devera informar uma data superior a ultima
					// data existente na trajetoria.
					nPos := aScan( aRCPCols , { |x| x[nPosDtMov] > GetMemVar( "RA_DATAALT" ) } )
					If nPos > 0
						If lGeraLog
							lLog := .T.
							If aTotRegs[2]== 0
								cLog := STR0062 // "Ja existem modificacoes apos a data de alteracao informada."
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[2] := len(aLog)
		        		   EndIf
							Aadd(aLog[aTotRegs[2]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
		            	Else
							cHelp := OemToAnsi( STR0062)   						// "Ja existem modificacoes apos a data de alteracao informada."
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )	// "Registro ja foi enviado ao Seguro Social"
						EndIf
						lRet := .F.
					Else

					GpMontac(IIF(!(cPaisLoc $ "COL") ,GetMemVar( "RA_DATAALT" ),GetMemVar( "RA_DATAALT" )- 1), "04" , GdFieldGet("RA_CODRPAT", nLin, .F. ,aSraHeader,aSvSraCols),,@nNewPos ) //CBP
						aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
						aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
						If cPaisLoc == "COS"
							aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
					ElseIf cPaisLoc $ "COL"
						aRCPCols[nNewPos,nPosTpFin]    := ""
						aRCPCols[nNewPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )
						Else
							aRCPCols[nNewPos,nPosTpBa]  := GetMemVar( "RA_TIPOAFA" )
						EndIf
						// Qdo esta alterando o Registro Patronal eh gerado dois registro e o de Alta e com uma data depois da data da alteracao
	    				// Essa validacao eh necessario para saber se esta ocorrendo a alteracao de registro com salario ao mesmo tempo
						If IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) )
							If cPaisLoc == "MEX"
								aRCPCols[nNewPos,GdFieldPos( "RCP_SALDII", aHeaderRCP )]  := GdFieldGet("RA_SALINT", nLin, .F. ,aSraHeader,aSvSraCols)
								aRCPCols[nNewPos,GdFieldPos( "RCP_SALIVC", aHeaderRCP )]  := GdFieldGet("RA_SALIVC", nLin, .F. ,aSraHeader,aSvSraCols)
								aRCPCols[nNewPos,GdFieldPos( "RCP_SALINS", aHeaderRCP )]  := GdFieldGet("RA_SALINS", nLin, .F. ,aSraHeader,aSvSraCols)
	                        EndIf

							aRCPCols[nNewPos,GdFieldPos( "RCP_SALMES", aHeaderRCP )]  := GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols)
						If cPaisLoc != "COL|PAR"
							aRCPCols[nNewPos,GdFieldPos( "RCP_SALDIA", aHeaderRCP )]  := GdFieldGet("RA_SALDIA", nLin, .F. ,aSraHeader,aSvSraCols)
						EndIf
						EndIf
						If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
							lRet := .F.
						Else
						If !EMPTY(GetMemVar( "RA_CODRPAT" ))
							nNewPos := 0
							GpMontac(IIF( cPaisLoc <> "COL" ,GetMemVar( "RA_DATAALT" )+1,GetMemVar( "RA_DATAALT" ) ), "03", GetMemVar( "RA_CODRPAT" ),,@nNewPos )
								aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
							If cPaisLoc == "COL"
									aRCPCols[nNewPos,nPosTpFin]    := ""
									aRCPCols[nNewPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )
							EndIf
								If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
									lRet := .F.
								EndIf
							EndIf
						endif
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf


	// Se o campo de reingresso for modificado, gerar um registro na cadastro patronal, caso haja
	// um registro do movimento e nao foi enviado ao imss, perguntar se sera substituido
	If cPaisLoc == "COL" .And. (GetMemVar("RA_CODAFP") <> GdFieldGet("RA_CODAFP", nLin, .F. ,aSraHeader,aSvSraCols) )
		If Empty(GetMemVar( "RA_DATAALT" ) )
				Help("",1,"GPDATAALT")					//-- Data da alteração nao esta preenchida.
				lret := .F.
		Else
			nPos  := aScan( aRCPCols , { |x| x[nPosTipo] == "08" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
			If nPos > 0
				If !Empty(aRCPCols[nPos,nPosDtImss] )
						If lGeraLog
							lLog := .T.
							If aTotRegs[1]== 0
								cLog := STR0059 //"Registro ja foi enviado ao IMSS"
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[1] := len(aLog)
							Endif
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
						Else
							cHelp := OemToAnsi( STR0059)
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )				//--"Registro ja foi enviado ao IMSS"
						Endif
						lRet := .F.
				Endif
				If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
						If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0056 + " " +  STR0054 ) ) ) //"Ya hay un registro de Modificacion Patronal"
							lRet := .F.
						Else
							//Nao pode alterar nenhuma informacao da trajetoria caso exista registros apos a
							// data de alteracao informada.
							nPos := aScan( aRCPCols , { |x| x[nPosDtMov] > GetMemVar( "RA_DATAALT" ) + 1 } )
							If nPos > 0
								If lGeraLog
									lLog := .T.
									If aTotRegs[2]== 0
										cLog := STR0062 //Ja existem modificacoes apos a data de alteracao informada.
										Aadd(aTitle,cLog)
										Aadd(aLog,{})
										aTotRegs[2] := len(aLog)
									Endif
									Aadd(aLog[aTotRegs[2]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
								Else
									cHelp := OemToAnsi( STR0062) //Ja existem modificacoes apos a data de alteracao informada.
									Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )			//--"Registro ja foi enviado ao IMSS"
								Endif
								lRet := .F.
							Else
								nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "09" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
								aRCPCols[nPos,nPosAFP]	:= GetMemVar("RA_CODAFP") //substituir acols
								aRCPCols[nPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
								nPosRCP := nPos
								aRCPCols[nPos,nPosTpFin]    := ""
								aRCPCols[nPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )
								AADD(aModTraj,{nPos,"09",GetMemVar("RA_DATAALT"),"M" } )
							EndIf
						EndIF
					Endif
			Else

					//Nao pode incluir/alterar nenhuma informacao da trajetoria caso exista registros
					// apos a data de alteracao informada. Devera informar uma data superior a ultima
					// data existente na trajetoria.
					nPos := aScan( aRCPCols , { |x| x[nPosDtMov] > GetMemVar( "RA_DATAALT" ) - 1} )
					If nPos > 0
						If lGeraLog
							lLog := .T.
							If aTotRegs[2]== 0
								cLog := STR0062 //Ja existem modificacoes apos a data de alteracao informada.
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[2] := len(aLog)
						   Endif
							Aadd(aLog[aTotRegs[2]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
						Else
							cHelp := OemToAnsi( STR0062)   //Ja existem modificacoes apos a data de alteracao informada.
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )			//--"Registro ja foi enviado ao Seguro Social"
						Endif
						lRet := .F.
					Else
						GpMontac(GetMemVar( "RA_DATAALT" )-1, "08" , GdFieldGet("RA_CODAFP", nLin, .F. ,aSraHeader,aSvSraCols),,@nNewPos )
						aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
						aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
						aRCPCols[nNewPos,nPosTpFin]	:= ""//GetMemVar( "RA_TIPFIN" )
						aRCPCols[nNewPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )

						If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
							lRet := .F.
						Else
							If !EMPTY(GetMemVar( "RA_CODAFP" ))
								nNewPos := 0
								GpMontac(GetMemVar( "RA_DATAALT" ) ,  "09", GetMemVar( "RA_CODAFP" ),,@nNewPos )
								aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
								aRCPCols[nNewPos,nPosTpFin]    := ""
								aRCPCols[nNewPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )
								If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
									lRet := .F.
								Endif
							endif
						Endif
					EndIf
			EndIf
		EndIf
	EndIF


// REINGRESO
	If IsMemVar( "RA_FECREI" ) .and. cPaisLoc $ "MEX|DOM"
		If GdFieldGet( "RA_FECREI", nLin, .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_FECREI" )
			If MV_MODFOL == "2"
				If (fFindSrc(SRA->RA_FILIAL+GetMemVar( "RA_MAT" )+GdFieldGet( "RA_PROCES", nLin, .F. , aSraHeader , aSvSraCols )))
					cHelp := OemToAnsi( STR0124 ) + CRLF	// Existe Rescisao pendente para o Funcionario.
					cHelp += OemToAnsi( STR0130 ) + CRLF   // "Favor efetuar o pagamento antes de proceder "
					cHelp += OemToAnsi( STR0131 )	    	// "o reingresso."
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
				lRet := .F.
			EndIf
		EndIf
		If cPaisLoc $ "DOM|PAR"
			If !Empty(GetMemVar( "RA_DEMISSA" )) .or. GetMemVar( "RA_SITFOLH" ) == "D"
				cHelp := OemToAnsi( STR0316) //--"Modifique situación del empleado para continuar con el Reingreso.
					Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
					lRet := .F.
				EndIf
			EndIf
			If lRet
				nPos := aScan( aRCPCols , { |x| x[nPosDtMov] == GetMemVar( "RA_FECREI" ) .And. x[nPosTipo] == "06" } )
				If nPos > 0
					If !Empty(aRCPCols[nPos,nPosDtImss] )
						If lGeraLog
							lLog := .T.
							If aTotRegs[1]== 0
								cLog := STR0059  //"Registro ja foi enviado ao IMSS"
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[1] := len(aLog)
		        		   	EndIf
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
			           	Else
							cHelp := OemToAnsi( STR0059)
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )	// "Registro ja foi enviado ao IMSS"
						EndIf
						lRet := .F.
					EndIf

					If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
						If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0058 + " " +  STR0054 ) ) ) //"Ja existe um registro de Reingresso"###"Deseja substituir o registro existente"
							lRet := .F.
						Else
							aRCPCols[nPos,nPosDtMov]:= GetMemVar("RA_FECREI")	 	// Substituir aCols com data de reingresso
							aRCPCols[nPos,nPosPer]	:= GetMemVar( "RA_PERADM" )  	// Substituir aCols com periodo aberto
							aRCPCols[nPos,nPosPag]	:= GetMemVar( "RA_PAGADM" )  	// Substituir aCols com periodo aberto
						if cPaisLoc $ "DOM|PAR"
							aRCPCols[nPos,nPosTpAlt]	:= GetMemVar( "RA_TIPOALT" )
							aRCPCols[nPos,nPosSal]    	:= GetMemVar( "RA_SALARIO" )
							aRCPCols[nPos,nPosPer]	:= _aPerSel[1,1]  		//substituir acols com periodo aberto
							aRCPCols[nPos,nPosPag]	:= _aPerSel[1,2]  		//substituir acols com periodo aberto
						EndIf
							nPosRCP := nPos
							AADD(aModTraj,{(nPos),"06",SRA->RA_FECREI,"M" } )
						EndIf
					EndIf
				Else
					GpMontac(GetMemVar( "RA_FECREI" ),"06",,,@nNewPos )
				If cPaisLoc $ "DOM|PAR"
					aRCPCols[nNewPos,nPosTpAlt]	:= GetMemVar( "RA_TIPOALT" )
					aRCPCols[nNewPos,nPosSal]	:= GetMemVar( "RA_SALARIO" )
					aRCPCols[nNewPos,nPosPer]	:= _aPerSel[1,1]  		//substituir acols com periodo aberto
					aRCPCols[nNewPos,nPosPag]	:= _aPerSel[1,2]  		//substituir acols com periodo aberto
				EndIf
					If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
						lRet := .F.
					EndIf
				EndIf
		Else
			If cPaisLoc <> "DOM"
				GpMontac(GetMemVar( "RA_FECREI" ),"06",,,@nNewPos )
				If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
					lRet := .F.
				Endif
			EndIf
		EndIF
   Endif

		If (lRet .And. (GdFieldGet( "RA_FECREI", nLin, .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_FECREI" )))
			If(cPaisLoc == "MEX" .And. MV_MODFOL == "2")
				If !(Empty(GdFieldGet( "RA_FECREI", nLin, .F. , aSraHeader , aSvSraCols )))
					// Houve alteracao na data de reingresso, isso significa que o funcionario
					// foi reingressado. Realiza as consistencias.
					DbSelectArea("SRF")
					SRF->(DbSetOrder( RetOrdem( "SRF", "RF_FILIAL+RF_MAT+RF_PD+DTOS(RF_DATABAS)" ) ))
					If(!(AllTrim(xFilial("SRF")) == "" ))
						cFilSRF:= SRA->RA_FILIAL
					Else
						cFilSRF := xFilial("SRF",SRA->RA_FILIAL)
					EndIf
					cPdSrf:=fGetCodFol("0072")
					dLastDt := GdFieldGet( "RA_FECREI", nLin, .F. , aSraHeader , aSvSraCols )
			 		If(SRF->(DbSeek(cFilSRF + SRA->RA_MAT + cPdSRF + DtoS(dLastDt) )))
			 		     If(SRF->RF_STATUS == "1")
			 		     	Help( ' ' , 1 , "GPDIASDIR" , , OemToAnsi(STR0158) , 1 , 0 )
							lRet := .F.
			 		     EndIf
			 		EndIf
				EndIf
			EndIf
		EndIf
	EndIf


	// Quando o campo de salario for modificado, informar a data da modificacao e o tipo de modificacao,
	// sera gerado um registro na trajetoria patronal. Caso ja haja um registro no cadastro patronal e nao foi
	// enviado ao imss, perguntar se sera substituido. Gerar lancamento somente se nao houve alteracao de Reg.
	// Patronal, pois se ha, foi gerado no item de Registro Patronal a parte de alteracao de salarios.
	If IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) ) .and.;
		(GetMemVar("RA_CODRPAT") == GdFieldGet("RA_CODRPAT", nLin, .F. ,aSraHeader,aSvSraCols) ) .and. cPaisLoc <> "DOM"

		If ( IsMemVar( "RA_FECREI" ) .and. GdFieldGet( "RA_FECREI", nLin, .F. , aSraHeader , aSvSraCols ) == GetMemVar( "RA_FECREI" ) ) .Or. cPaisLoc == "COS"

			If ( GetMemVar( "RA_TIPOALT" ) = Space(3) .Or. Empty(GetMemVar( "RA_DATAALT" ) )) .And. ;
				 ( ( lRet := If(cPaisLoc $ "MEX|COS|PAR",!gp010CpoTLab(),.T.) ) .Or. cAltSal == "N" )
				Help("",1,"GPTIPOALT",,STR0321,1,0) // "Houve alteração salarial e os campos Tipo ou Data da Alteração de Salario nao foram preenchidos."
			    lRet := .F.
		   Else
				nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "05" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
				If nPos > 0
					If !Empty(aRCPCols[nPos,nPosDtImss] )
						If lGeraLog
							lLog := .T.
							If aTotRegs[1]== 0
								cLog := STR0059 // "Registro ja foi enviado ao Seguro Social"
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[1] := Len(aLog)
		        		   	EndIf
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
		            	Else
							cHelp := OemToAnsi( STR0059)
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 ) // "Registro ja foi enviado ao Seguro Social"
						EndIf
						lRet := .F.
				    EndIf

					If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
						If !(MsgYesNo( OemToAnsi(SRA->RA_FILIAL + " - " + SRA->RA_MAT + " - " + STR0057 + " " + STR0054 ) ) ) //"Ja existe um registro de Modificacao Salarial"###"Deseja substituir o registro existente"
							lRet := .F.
						Else
							GpMontac(GetMemVar( "RA_DATAALT" ),"05",GetMemVar( "RA_CODRPAT" ),GetMemVar( "RA_SALMES" ),@nPos )
							aRCPCols[nPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet) 	// Subst. periodo aberto
							aRCPCols[nPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)	// Subst. periodo aberto
						EndIf
					EndIf
				Else
					If (GetMemVar( "RA_DATAALT" ) == GetMemVar( "RA_ADMISSA" )) .Or. (GetMemVar( "RA_FECREI" ) == GetMemVar( "RA_DATAALT" )) .Or.;
						aScan( aRCPCols, { |x| x[nPosTipo] == "03" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } ) > 0

						If (GetMemVar( "RA_DATAALT" ) == GetMemVar( "RA_ADMISSA" ))
							nNewPos := aScan( aRCPCols , { |x| x[nPosTipo] == "01" .And. x[nPosDtMov] == GetMemVar( "RA_ADMISSA" ) } )
							cTipoReg := "01"
						ElseIf cPaisLoc == "MEX" .and. (GetMemVar( "RA_DATAALT" ) == GetMemVar( "RA_FECREI" ))
							nNewPos := aScan( aRCPCols , { |x| x[nPosTipo] == "06" .And. x[nPosDtMov] == GetMemVar( "RA_FECREI" ) } )
	       					cTipoReg := "06"
	      				Else
		      				nNewPos := aScan( aRCPCols , { |x| x[nPosTipo] == "03" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
	   						cTipoReg := "03"
						EndIf
						If nNewPos > 0
							If !(MsgYesNo( OemToAnsi( STR0072 ) + CRLF + OemToAnsi( STR0073 ) ) ) //"Data de Alteracao Salaral e Data de Admissao sao Iguais!"###"Alterar Registro de Admissao da Trajetoria Laboral?"
								lRet := .F.
								nNewPos := 1
								Return(lRet)
							Else
								lRet := GpMontac(GetMemVar( "RA_DATAALT" ),cTipoReg,GetMemVar( "RA_CODRPAT" ),GetMemVar( "RA_SALMES" ),@nNewPos )
							EndIf
						EndIf
					Else
						If (GdFieldGet( "RA_DEMISSA", nLin, .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_DEMISSA")).And.;
							!Empty(GetMemVar( "RA_DEMISSA"))
							nNewPos := 0
						EndIf
						If(cPaisLoc == "COS|PAR" .and.(IsMemVar("RA_CODFUNC") .And. GetMemVar("RA_CODFUNC") <> GdFieldGet("RA_CODFUNC", nLin, .F. ,aSraHeader,aSvSraCols)  ) ,lTLFuncSal := .F., lTLFuncSal := .T.)
							If ( lTLFuncSal )
								lRet := GpMontac(GetMemVar( "RA_DATAALT" ),"05",GetMemVar( "RA_CODRPAT" ),GetMemVar( "RA_SALMES" ),@nNewPos )
								If lRet
									aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet) 	// Subst. periodo aberto
									aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)	// Subst. periodo aberto
								EndIf

								If( nNewPos <= 0 .Or. (Empty(GetMemVar( "RA_DATAALT" ) ) .Or. Empty(GetMemVar("RA_TIPOALT"))) )
									Help("",1,"GPTIPOALT",,STR0321,1,0) // "Houve alteração salarial e os campos Tipo ou Data da Alteração de Salario nao foram preenchidos."
									lRet := .F.
								EndIf
								If lRet .And. !GpValTraj(@aRCPCols,nNewPos,lGeraLog, cFilSRA)
									lRet := .F.
								EndIf

							EndIf
	                EndIf
				EndIf
			EndIf
		EndIf
	EndIf

	// vARIACIÓN DE SALARIO PERMANENTE
	If  cPaisLoc $ "COL|PAR"  .and. (IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) ) .or.;
		IsMemVar("RA_TIPOSAL" ) .and. (GetMemVar("RA_TIPOSAL") # GdFieldGet("RA_TIPOSAL", nLin, .F. ,aSraHeader,aSvSraCols) ))

		//Verificar si se cambio el ra_tiposal
		IF IsMemVar("RA_TIPOSAL" ) .and. (GetMemVar("RA_TIPOSAL") # GdFieldGet("RA_TIPOSAL", nLin, .F. ,aSraHeader,aSvSraCols) )
			If (  Empty(GetMemVar( "RA_DTALTTS" ) ))
				Help("",1,"RA_DTALTTS")
			    lRet := .F.
			EndIf
		End If

		If lRet .and. ((IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) )) .or.;
		  ((IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) )).and. ;
		   IsMemVar("RA_TIPOSAL" ) .and. (GetMemVar("RA_TIPOSAL") # GdFieldGet("RA_TIPOSAL", nLin, .F. ,aSraHeader,aSvSraCols) )))

			If ( Empty(GetMemVar( "RA_TIPOALT" ) ))
				Help("",1,"GPTIPOALT")
			    lRet := .F.
			ElseIF (Empty(GetMemVar( "RA_FECAUM" ) ))
				cHelp := OemToAnsi (STR0243)
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			    lRet := .F.
			ElseIf ( Empty(GetMemVar( "RA_PERAUM" ) ))
				cHelp := OemToansi(STR0241)
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			    lRet := .F.
			ElseIf ( Empty(GetMemVar( "RA_PAGAUM" ) ))
				cHelp := OemToAnsi(STR0242)
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			    lRet := .F.
			Else
				nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "05" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
				If nPos > 0
					If !Empty(aRCPCols[nPos,nPosDtImss] )
						If lGeraLog
							lLog := .T.
							If aTotRegs[1]== 0
								cLog := STR0059 //"Registro ja foi enviado ao Seguro Social"
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[1] := len(aLog)
		        		   	Endif
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
		            	Else
							cHelp := OemToAnsi( STR0059)
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )				//--"Registro ja foi enviado ao Seguro Social"
						Endif
						lRet := .F.
				    Endif

					If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
						If !(MsgYesNo( OemToAnsi(SRA->RA_FILIAL + " - " + SRA->RA_MAT + " - " + STR0057 + " " + STR0054 ) ) ) //"Ya hay un registro de Modificacion Salarial"
							lRet := .F.
						Else
							GpMontac(GetMemVar( "RA_FECAUM" ),"05",GetMemVar( "RA_CODRPAT" ),GetMemVar( "RA_SALARIO" ),@nPos )
							aRCPCols[nPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet) //subst. periodo aberto
							aRCPCols[nPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)	//subst. periodo aberto

							aRCPCols[nPos,nPosTpFin]    := ""


						EndIF
					EndIf
				Else
					lRet := GpMontac(GetMemVar( "RA_FECAUM" ),"05",GetMemVar( "RA_CODRPAT" ),GetMemVar( "RA_SALARIO" ),@nNewPos )
					If lRet
						aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet) //subst. periodo aberto
						aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)	//subst. periodo aberto
						aRCPCols[nNewPos,nPosTpFin]    := ""

					EndIf

					If( nNewPos <= 0 .Or. (Empty(GetMemVar( "RA_FECAUM" ) ) .Or. Empty(GetMemVar("RA_TIPOALT"))) )
						Help("",1,"GPTIPOALT") //Tipo ou Data da Alteração de Salário nao foram preenchidos.
						lRet := .F.
					EndIf
					If lRet .And. !GpValTraj(@aRCPCols,nNewPos,lGeraLog, cFilSRA)
						lRet := .F.
					Endif

	                If lRet
	            		M->RA_ANTEAUM :=  GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) //GetMemVar("RA_SALARIO")
	                	M->RA_DATAALT :=  GetMemVar("RA_FECAUM")

	                End IF
				End

			EndIF

		End IF

		If !lRet
			Return lRet
		EndIf
	Endif
	// Se houver mudanca de Funcao, Cargo, Classe de Seguro e Nro do CPF e Jornada devera gerar
	// um registro em trajetoria laboral. Na mesma data devera manter e alterar o tipo.
	If cPaisLoc $ "COS|COL|PAR" .and. (IsMemVar("RA_CODFUNC") .And. (GetMemVar("RA_CODFUNC") <> GdFieldGet("RA_CODFUNC", nLin, .F. ,aSraHeader,aSvSraCols) ) .Or.;
	   IsMemVar("RA_CARGO") .And. (GetMemVar("RA_CARGO") <> GdFieldGet("RA_CARGO", nLin, .F. ,aSraHeader,aSvSraCols) ) .Or.;
	   IsMemVar("RA_TPCCSS") .And. (GetMemVar("RA_TPCCSS") <> GdFieldGet("RA_TPCCSS", nLin, .F. ,aSraHeader,aSvSraCols) ) .Or.;
	IsMemVar("RA_CIC") .And. (GetMemVar("RA_CIC") <> GdFieldGet("RA_CIC", nLin, .F. ,aSraHeader,aSvSraCols) ) .and. cPaisLoc <> "COL".Or.;
	IsMemVar("RA_TJRNDA") .And. (GetMemVar("RA_TJRNDA") <> GdFieldGet("RA_TJRNDA", nLin, .F. ,aSraHeader,aSvSraCols) ) .or. ;
	IsMemVar("RA_KEYLOC") .And. (GetMemVar("RA_KEYLOC") <> GdFieldGet("RA_KEYLOC", nLin, .F. ,aSraHeader,aSvSraCols) ))

		If Empty(GetMemVar( "RA_DATAALT" ) )
			Help("",1,"GPDATAALT")					// "Data da alteracao nao esta preenchida."
			lret := .F.
		Else
			nPos  := aScan( aRCPCols , { |x| x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
			If nPos > 0
				If !Empty(aRCPCols[nPos,nPosDtImss] )
					If lGeraLog
						lLog := .T.
						If aTotRegs[1]== 0
							cLog := STR0059 									// "Registro ja foi enviado ao Seguro Social"
							Aadd(aTitle,cLog)
							Aadd(aLog,{})
							aTotRegs[1] := len(aLog)
	               		EndIf
						Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
	            	Else
						cHelp := OemToAnsi( STR0059)						// "Registro ja foi enviado ao Seguro Social"
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
					EndIf
					lRet := .F.
			   	EndIf

				If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
					If !(MsgYesNo( OemToAnsi( SRA->RA_MAT+" - "+STR0208 + " " +  STR0054 ) ) ) //"Ja existe um registro nesta data."###"Deseja substituir o registro existente"
						lRet := .F.
					Else
						// Nao pode alterar nenhuma informacao da trajetoria caso exista registros apos a
						// data de alteracao informada.
						nPos := aScan( aRCPCols , { |x| x[nPosDtMov] > GetMemVar( "RA_DATAALT" ) + 1 } )
						If nPos > 0
							If lGeraLog
								lLog := .T.
								If aTotRegs[2]== 0
									cLog := STR0062 	// "Ja existem modificacoes apos a data de alteracao informada."
									Aadd(aTitle,cLog)
									Aadd(aLog,{})
									aTotRegs[2] := len(aLog)
								Endif
								Aadd(aLog[aTotRegs[2]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
							Else
								cHelp := OemToAnsi( STR0062) 						// "Ja existem modificacoes apos a data de alteracao informada."
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )	// "Registro ja foi enviado ao IMSS"
							EndIf
							lRet := .F.
						Else
							nPos  := aScan( aRCPCols , { |x| x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
							If  !(cPaisLoc $ "COL/PAR")
								aRCPCols[nPos,nPosCodFunc]	:= GetMemVar( "RA_CODFUNC" )
								aRCPCols[nPos,nPosCargo]	:= GetMemVar( "RA_CARGO" )
								aRCPCols[nPos,nPosTpCCSS]	:= GetMemVar( "RA_TPCCSS" )
								aRCPCols[nPos,nPosCic]		:= GetMemVar( "RA_CIC" )
								aRCPCols[nPos,nPosTjrNda]	:= GetMemVar( "RA_TJRNDA" )
								nPosRCP := nPos
								AADD(aModTraj,{nPos,aRCPCols[nPos,nPosTipo],GetMemVar("RA_DATAALT") + 1,"M" } )
							Else
								If aRCPCols[nPos,nPosTipo] $ "05"
									//Aplica solo si el movimiento es cambio de función y cargo y que detone un cambio de sueldo
									If IsMemVar("RA_CODFUNC" ) .and. (GetMemVar("RA_CODFUNC") # GdFieldGet("RA_CODFUNC", nLin, .F. ,aSraHeader,aSvSraCols) )
										cTipoMov := "11"
									EndIf
									If IsMemVar("RA_CARGO") .and. (GetMemVar("RA_CARGO") # GdFieldGet("RA_CARGO", nLin, .F. ,aSraHeader,aSvSraCols) )
										cTipoMov := "12"
									EndIf
									nNewPos := 0
									GpMontac(GetMemVar( "RA_DATAALT" ), cTipoMov, SRA->RA_CODRPAT ,,@nNewPos )
									aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
									aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)

									aRCPCols[nNewPos,nPosTpCCSS]:= GetMemVar( "RA_KEYLOC" )
									aRCPCols[nNewPos,nPosTpFin] := ""
									aRCPCols[nNewPos,nPosTpAlt] := ""//GetMemVar( "RA_TIPFIN" )

									aRCPCols[nNewPos,nPosCodFunc]:= GetMemVar( "RA_CODFUNC" )
									aRCPCols[nNewPos,nPosCargo]	 := GetMemVar( "RA_CARGO" )
									If cPaisLoc == "PAR"
										aRCPCols[nNewPos,nPosSal]   := GetMemVar( "RA_SALARIO" )
									Endif
									If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
										lRet := .F.
									Endif
								Else
									aRCPCols[nPos,nPosCodFunc]	:= GetMemVar( "RA_CODFUNC" )
									aRCPCols[nPos,nPosCargo]	:= GetMemVar( "RA_CARGO" )
									aRCPCols[nPos,nPosTpCCSS]	:= GetMemVar( "RA_KEYLOC" )
									If cPaisLoc == "COL"
										aRCPCols[nPos,nPosNITarl]	:= GetMemVar( "RA_NITARL" )
									EndIf
									aRCPCols[nPos,nPosTpFin]   	:= ""
									aRCPCols[nPos,nPosTpAlt]   	:= ""
								nPosRCP := nPos
								AADD(aModTraj,{nPos,aRCPCols[nPos,nPosTipo],GetMemVar("RA_DATAALT")  ,"M" } )
							EndIf
						EndIf
						EndIf
					EndIf
				EndIf
			Else
				// Nao pode incluir/alterar nenhuma informacao da trajetoria caso exista registros
				// apos a data de alteracao informada. Devera informar uma data superior a ultima
				// data existente na trajetoria.
				nPos := aScan( aRCPCols , { |x| x[nPosDtMov] > GetMemVar( "RA_DATAALT" ) } )
				If nPos > 0
					If lGeraLog
						lLog := .T.
						If aTotRegs[2]== 0
							cLog := STR0062 // "Ja existem modificacoes apos a data de alteracao informada."
							Aadd(aTitle,cLog)
							Aadd(aLog,{})
							aTotRegs[2] := len(aLog)
	        		   EndIf
						Aadd(aLog[aTotRegs[2]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
	            	Else
						cHelp := OemToAnsi( STR0062)   				   		// "Ja existem modificacoes apos a data de alteracao informada."
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )	// "Registro ja foi enviado ao Seguro Social"
					EndIf
					lRet := .F.
				Else

					// Quando houver mais de uma alteração, devera gravar o codigo de acordo com a hierarquia
					If IsMemVar("RA_TPCCSS") .And. (GetMemVar("RA_TPCCSS") # GdFieldGet("RA_TPCCSS", nLin, .F. ,aSraHeader,aSvSraCols) )
						cTipoMov := "21"
					EndIf
					If IsMemVar("RA_CIC") .And. (GetMemVar("RA_CIC") # GdFieldGet("RA_CIC", nLin, .F. ,aSraHeader,aSvSraCols) )
						cTipoMov := "22"
					EndIf
					If IsMemVar("RA_TJRNDA") .And. (GetMemVar("RA_TJRNDA") # GdFieldGet("RA_TJRNDA", nLin, .F. ,aSraHeader,aSvSraCols) )
						cTipoMov := "23"
					EndIf
	                If IsMemVar("RA_CODFUNC" ) .And. (GetMemVar("RA_CODFUNC") # GdFieldGet("RA_CODFUNC", nLin, .F. ,aSraHeader,aSvSraCols) )
	                	cTipoMov := "11"
					EndIf
					If IsMemVar("RA_CARGO") .And. (GetMemVar("RA_CARGO") # GdFieldGet("RA_CARGO", nLin, .F. ,aSraHeader,aSvSraCols) )
						cTipoMov := "12"
					EndIf

					If cPaisLoc $ "COL|PAR" .and. IsMemVar("RA_KEYLOC") .and. (GetMemVar("RA_KEYLOC") # GdFieldGet("RA_KEYLOC", nLin, .F. ,aSraHeader,aSvSraCols) )
						cTipoMov := "13"
					EndIf

					GpMontac(GetMemVar( "RA_DATAALT" ), cTipoMov, SRA->RA_CODRPAT ,,@nNewPos )
					aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
					aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)
					If cPaisLoc == "COS"
						aRCPCols[nNewPos,nPosTpFin]    := GetMemVar( "RA_TIPOFIN" )
						aRCPCols[nNewPos,nPosTpCCSS]:= GetMemVar( "RA_TPCCSS" )
						aRCPCols[nNewPos,nPosCic]	:= GetMemVar( "RA_CIC" )
						aRCPCols[nNewPos,nPosTjrNda]:= GetMemVar( "RA_TJRNDA" )
					ElseIf cPaisLoc $ "COL"
						aRCPCols[nNewPos,nPosTpCCSS]:= GetMemVar( "RA_KEYLOC" )
						aRCPCols[nNewPos,nPosTpFin]    := ""
						aRCPCols[nNewPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )
					ElseIf cPaisLoc == "PAR"
						aRCPCols[nNewPos,nPosTpCCSS]:= GetMemVar( "RA_KEYLOC" )
						aRCPCols[nNewPos,nPosSal]   := GetMemVar( "RA_SALARIO" )
//						aRCPCols[nNewPos,nPosTpFin]    := ""
//						aRCPCols[nNewPos,nPosTpAlt]    := ""//GetMemVar( "RA_TIPFIN" )
					Else
						aRCPCols[nNewPos,nPosTpBa]  := GetMemVar( "RA_TIPOAFA" )
					EndIf
					aRCPCols[nNewPos,nPosCodFunc]:= GetMemVar( "RA_CODFUNC" )
					aRCPCols[nNewPos,nPosCargo]	:= GetMemVar( "RA_CARGO" )
					aRCPCols[nNewPos,nPosTpCCSS]:= GetMemVar( "RA_TPCCSS" )
					aRCPCols[nNewPos,nPosCic]	:= GetMemVar( "RA_CIC" )
					If cPaisLoc $ "COS/MEX"
						aRCPCols[nNewPos,nPosTjrNda]:= GetMemVar( "RA_TJRNDA" )
					EndIf
					If !GpValTraj(@aRCPCols, nNewPos, lGeraLog, cFilSRA)
						lRet := .F.
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf

	If  cPaisLoc $ "DOM|PAR"  .and. (IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) ) .or.;
		IsMemVar("RA_TIPOSAL" ) .and. (GetMemVar("RA_TIPOSAL") # GdFieldGet("RA_TIPOSAL", nLin, .F. ,aSraHeader,aSvSraCols) ))

		//Verificar si se cambio el ra_tiposal
		IF IsMemVar("RA_TIPOSAL" ) .and. (GetMemVar("RA_TIPOSAL") # GdFieldGet("RA_TIPOSAL", nLin, .F. ,aSraHeader,aSvSraCols) ) .and. cPaisLoc == "COL"
			If (  Empty(GetMemVar( "RA_DTALTTS" ) ) )
				Help("",1,"RA_DTALTTS")
			    lRet := .F.
			EndIf
		End If

		If lRet .and. ((IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) )) .or.;
		  ((IsMemVar("RA_SALARIO" ) .and. (GetMemVar("RA_SALARIO") # GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) )).and. ;
		   IsMemVar("RA_TIPOSAL" ) .and. (GetMemVar("RA_TIPOSAL") # GdFieldGet("RA_TIPOSAL", nLin, .F. ,aSraHeader,aSvSraCols) )))

			If ( Empty(GetMemVar( "RA_TIPOALT" ) ))
				Help("",1,"GPTIPOALT")
			    lRet := .F.
			ElseIF (Empty(GetMemVar( "RA_FECAUM" ) ))
				cHelp := OemToAnsi (STR0243)
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			    lRet := .F.
			ElseIf ( Empty(GetMemVar( "RA_PERAUM" ) ))
				cHelp := OemToansi(STR0241)
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			    lRet := .F.
			ElseIf ( Empty(GetMemVar( "RA_PAGAUM" ) ))
				cHelp := OemToAnsi(STR0242)
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			    lRet := .F.
			Else
				nPos := aScan( aRCPCols , { |x| x[nPosTipo] == "05" .And. x[nPosDtMov] == GetMemVar( "RA_DATAALT" ) } )
				If nPos > 0
					If !Empty(aRCPCols[nPos,nPosDtImss] )
						If lGeraLog
							lLog := .T.
							If aTotRegs[1]== 0
								cLog := STR0059 //"Registro ja foi enviado ao Seguro Social"
								Aadd(aTitle,cLog)
								Aadd(aLog,{})
								aTotRegs[1] := len(aLog)
		        		   	Endif
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
		            	Else
							cHelp := OemToAnsi( STR0059)
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )				//--"Registro ja foi enviado ao Seguro Social"
						Endif
						lRet := .F.
				    Endif

					If lRet .And. GpValTraj(@aRCPCols, nPos, lGeraLog, cFilSRA)
						If !(MsgYesNo( OemToAnsi(SRA->RA_FILIAL + " - " + SRA->RA_MAT + " - " + STR0057 + " " + STR0054 ) ) ) //"Ya hay un registro de Modificacion Salarial"
							lRet := .F.
						Else
							GpMontac(GetMemVar( "RA_FECAUM" ),"05",GetMemVar( "RA_CODRPAT" ),GetMemVar( "RA_SALARIO" ),@nPos )
							aRCPCols[nPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet) //subst. periodo aberto
							aRCPCols[nPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)	//subst. periodo aberto

							aRCPCols[nPos,nPosTpFin]    := ""


						EndIF
					EndIf
				Else
					lRet := GpMontac(GetMemVar( "RA_FECAUM" ),"05",GetMemVar( "RA_CODRPAT" ),GetMemVar( "RA_SALARIO" ),@nNewPos )
					If lRet
						aRCPCols[nNewPos,nPosPer]	:= Gp010RetCont("RCH_PER",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet) //subst. periodo aberto
						aRCPCols[nNewPos,nPosPag]	:= Gp010RetCont("RCH_NUMPAG",GetMemVar( "RA_DATAALT" ),SRA->RA_PROCES, @lRet)	//subst. periodo aberto
						aRCPCols[nNewPos,nPosTpFin]    := ""

					EndIf

					If( nNewPos <= 0 .Or. (Empty(GetMemVar( "RA_FECAUM" ) ) .Or. Empty(GetMemVar("RA_TIPOALT"))) )
						Help("",1,"GPTIPOALT") //Tipo ou Data da Alteração de Salário nao foram preenchidos.
						lRet := .F.
					EndIf
					If lRet .And. !GpValTraj(@aRCPCols,nNewPos,lGeraLog, cFilSRA)
						lRet := .F.
					Endif

	                If lRet
	            		M->RA_ANTEAUM :=  GdFieldGet("RA_SALARIO", nLin, .F. ,aSraHeader,aSvSraCols) //GetMemVar("RA_SALARIO")
	                	M->RA_DATAALT :=  GetMemVar("RA_FECAUM")

	                End IF
				End

			EndIF

		End IF

		If !lRet
			Return lRet
		EndIf
	Endif





	If lRet
		lRet := GpValTGer(@aRCPCols,lGeraLog, cFilSRA)
	EndIf

	RestArea(aArea)

Return( lRet )



/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GpMontac     ³ Autor ³ Equipe RH         ³ Data ³ 28/03/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Adiciona no aCols.										    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Trajetoria Laboral	                        	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GpMontac(dData, cTipo, cCodPat, nSal, nNewPos)
Local cTipoReg
Local lRet := .T.
Local nY := 0
Local nX := 0
Local nSalMes
Local nSalDia
Local nHorasDia
Local aPerSel := {}

Default cCodPat 	:= GetMemVar( "RA_CODRPAT" )
Default nNewPos   	:= 0

	If cPaisLoc <> "COS"
		If !(cPaisLoc $ "COL")
			Default nSal	:= GetMemVar( "RA_SALMES" )
		Else
			Default nSal	:= GetMemVar( "RA_SALARIO" )
			//Se obtiene el periodo actual abierto de la nómina ordinaria.
			fgetPerAtual(@aPerSel,xFilial("RCH"),IIF(funname()=="GPEM042",SRA->RA_PROCES,GetMemVar( "RA_PROCES" )),fGetRotOrdinar())
		EndIf
	Else
		If !fSalario_COS(xFilial("SRA"), GetMemVar( "RA_MAT" ), @nSalMes, @nSalDia, dData, @nHorasDia)
			lRet := .F.
			Return(lRet)
		EndIf
		Default nSal	:= nSalMes
	EndIf

	// Se nNewPos diferente de zero, o registro esta sendo substituido, senao eh uma inclusao
	If(nNewPos <> 0)
		nX :=nNewPos
	Else
		Aadd(aRCPCols,Array(Len(aHeaderRCP)+1))
		nX :=Len(aRCPCols)
	EndIf

	cTipoReg := If(nNewPos <> 0, "M", "I")

	For ny := 1 to Len(aHeaderRCP)
		If Trim(aHeaderRCP[ny][2]) == "RCP_MAT"
			aRCPCols[nX][ny] := GetMemVar( "RA_MAT" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_DTMOV"
			aRCPCols[nX][ny] := dData
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TPMOV"
			aRCPCols[nX][ny] := cTipo
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_SALDII"
			aRCPCols[nX][ny] := GetMemVar( "RA_SALINT" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_SALMES"
			aRCPCols[nX][ny] := nSal
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_SALDIA"
			aRCPCols[nX][ny] := If(cPaisLoc <> "COS", GetMemVar( "RA_SALDIA" ), nSalDia)
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_SALIVC"
			aRCPCols[nX][ny] := GetMemVar( "RA_SALIVC" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_SALINS"
			aRCPCols[nX][ny] := GetMemVar( "RA_SALINS" )
	ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CODRPA" .and. cPaisLoc <> "COL"
			aRCPCols[nX][ny] := cCodPat
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TJRNDA"
			aRCPCols[nX][ny] := GetMemVar( "RA_TJRNDA" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TEIMSS"
			aRCPCols[nX][ny] := GetMemVar( "RA_TEIMSS" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TSIMSS"
			aRCPCols[nX][ny] := GetMemVar( "RA_TSIMSS" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_PERMOV"
			aRCPCols[nX][ny] := GetMemVar( "RA_PERADM" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_NPGMOV"
			aRCPCols[nX][ny] := GetMemVar( "RA_PAGADM" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CARGO"
			aRCPCols[nX][ny] := GetMemVar( "RA_CARGO" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CC"
			aRCPCols[nX][ny] := GetMemVar( "RA_CC" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CODFUN"
			aRCPCols[nX][ny] := GetMemVar( "RA_CODFUNC" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_DEPTO"
			aRCPCols[nX][ny] := GetMemVar( "RA_DEPTO" )
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TIPALT"
			aRCPCols[nX][ny] := If(M->RA_SITFOLH <> "D", GetMemVar("RA_TIPOALT"),"")
		ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TIPFIN"
			aRCPCols[nX][ny] := GetMemVar( "RA_TIPOFIN" )
		Endif
		If cPaisLoc == "COS"
			If Trim(aHeaderRCP[ny][2]) == "RCP_CIC"
				aRCPCols[nX][ny] := GetMemVar( "RA_CIC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TPCIC"
				aRCPCols[nX][ny] := GetMemVar( "RA_TPCIC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_HRSDIA"
				aRCPCols[nX][ny] := nHorasDia
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TPCCSS"
				aRCPCols[nX][ny] := GetMemVar( "RA_TPCCSS" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CARGO"
				aRCPCols[nX][ny] := GetMemVar( "RA_CARGO" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CC"
				aRCPCols[nX][ny] := GetMemVar( "RA_CC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CODFUN"
				aRCPCols[nX][ny] := GetMemVar( "RA_CODFUNC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_DEPTO"
				aRCPCols[nX][ny] := GetMemVar( "RA_DEPTO" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TIPALT"
				aRCPCols[nX][ny] := GetMemVar( "RA_TIPOALT" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TIPFIN"
				aRCPCols[nX][ny] := GetMemVar( "RA_TIPOFIN" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CBIMSS"
				aRCPCols[nX][ny] := GetMemVar( "RA_TIPOAFA" )
			EndIf
		EndIf
		If cPaisLoc $ "COL"
			If Trim(aHeaderRCP[ny][2]) == "RCP_CIC"
				aRCPCols[nX][ny] := GetMemVar( "RA_CIC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CODFUN"
				aRCPCols[nX][ny] := GetMemVar( "RA_CODFUNC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_DEPTO"
				aRCPCols[nX][ny] := GetMemVar( "RA_DEPTO" )
			ElseIF	 Trim(aHeaderRCP[ny][2]) == "RCP_KEYLOC"
				aRCPCols[nX][ny] := GetMemVar( "RA_KEYLOC" )
			ElseIF	 Trim(aHeaderRCP[ny][2]) == "RCP_NITARL"
				aRCPCols[nX][ny] := GetMemVar( "RA_NITARL" )
			ElseIF	 Trim(aHeaderRCP[ny][2]) == "RCP_NITAFP"
				If cTipo $ "08|09"
					aRCPCols[nX][ny] := cCodPat
				Else
					aRCPCols[nX][ny] := GetMemVar( "RA_CODAFP" )
				EndIf
			ElseIF	 Trim(aHeaderRCP[ny][2]) == "RCP_TPSAL"
				aRCPCols[nX][ny] := GetMemVar( "RA_TIPOSAL" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CBIMSS"
				aRCPCols[nX][ny] := GetMemVar( "RA_TIPFIN" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_PERMOV"
				aRCPCols[nX][ny] := aPerSel[1,1]
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_NPGMOV"
				aRCPCols[nX][ny] := aPerSel[1,2]
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_RG"
				aRCPCols[nX][ny] := GetMemVar( "RA_RG" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CODRPA"
				If (cTipo $ "03|04" .and. cPaisLoc == "COL")
					aRCPCols[nX][ny] := GetMemVar( "RA_CODRPAT" )
				Else
					aRCPCols[nX][ny] := cCodPat
				EndIf
			EndIf
		EndIf
		If cPaisLoc == "PAR"
			If Trim(aHeaderRCP[ny][2]) == "RCP_CIC"
				aRCPCols[nX][ny] := GetMemVar( "RA_CIC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CODFUN"
				aRCPCols[nX][ny] := GetMemVar( "RA_CODFUNC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_DEPTO"
				aRCPCols[nX][ny] := GetMemVar( "RA_DEPTO" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_SALMES"
				aRCPCols[nX][ny] := nSal
			ElseIF	 Trim(aHeaderRCP[ny][2]) == "RCP_KEYLOC"
				aRCPCols[nX][ny] := GetMemVar( "RA_KEYLOC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CBIMSS"
				aRCPCols[nX][ny] := GetMemVar( "RA_TIPOFIN" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_PERMOV"
				aRCPCols[nX][ny] := dData
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TPMOV"
				aRCPCols[nX][ny] := cTipo
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_NPGMOV"
				aRCPCols[nX][ny] := GetMemVar( "RA_PAGADM" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_RG"
				aRCPCols[nX][ny] := GetMemVar( "RA_RG" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CARGO"
				aRCPCols[nX][ny] := GetMemVar( "RA_CARGO" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TPCIC"
				aRCPCols[nX][ny] := GetMemVar( "RA_TPCIC" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_TIPCOT"
				aRCPCols[nX][ny] := GetMemVar( "RA_TIPCOT" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_REGIST"
				aRCPCols[nX][ny] := GetMemVar( "RA_REGISTR" )
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_SALARIO"
				aRCPCols[nX][ny] := nSal
			ElseIf Trim(aHeaderRCP[ny][2]) == "RCP_CODRPA"
				If cTipo $ "03|04"
					aRCPCols[nX][ny] := GetMemVar( "RA_CODRPAT" )
				Else
					aRCPCols[nX][ny] := cCodPat
				EndIf
			EndIf
		EndIf
	Next ny

	aRCPCols[nX][Len(aHeaderRCP)+1] := .F.
	AADD(aModTraj,{(nX),cTipo,dData,cTipoReg})

	nNewPos := nX

Return( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GravaRCP     ³ Autor ³ Equipe RH         ³ Data ³ 28/03/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Grava alteracoes no cadastro de Trajetoria Laboral.	    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 -  Trajetoria Laboral	                        	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GravaRCP()
Local cSeek
Local nMaxArray		:= Len( aHeaderRCP )					// Quantidade de colunas da RCP.
Local ny			:= 0.00									// Contador de colunas.
Local n		   		:= 0
Local nx			:= 0
Local nPosDtMov 	:= GdFieldPos( "RCP_DTMOV"	 , aHeaderRCP )
Local nPosTipo  	:= GdFieldPos( "RCP_TPMOV"	 , aHeaderRCP )

	dbSelectArea("RCP")
	dbSetOrder(1)
	cSeek := (SRA->RA_FILIAL+SRA->RA_MAT)

	For nx:=1 TO Len(aModTraj)
		n:= aModTraj[nX,1]
		If RCP->( dbSeek(cSeek) )
			If aModTraj[nx,4] == "M"
				While RCP->( !Eof() .And. ( cSeek == RCP->RCP_FILIAL+RCP->RCP_MAT ) )
					If aModTraj[nX,2] == RCP->RCP_TPMOV  .And. aModTraj[nX,3] == RCP->RCP_DTMOV
						RecLock("RCP",.F.,.T.)

						RCP->RCP_FILIAL	:= xFilial("SRA")
						RCP->RCP_MAT		:= SRA->RA_MAT

						For ny := 1 To nMaxArray
							cCampo    := Trim(aHeaderRCP[ny][2])
							xConteudo := aRCPCols[n,ny]
							&cCampo := xConteudo
						Next ny
						RCP->( MsUnlock() )
						Exit
					EndIf
					RCP->( dbSkip() )
				Enddo
			Else
				If RCP->( dbSeek(cSeek) )
					RecLock("RCP",.T.,.T.)
					RCP->RCP_FILIAL	:= xFilial("SRA")
					RCP->RCP_MAT		:= SRA->RA_MAT

					For ny := 1 To nMaxArray
						cCampo    := Trim(aHeaderRCP[ny][2])
						xConteudo := aRCPCols[n,ny]
						&cCampo := xConteudo
					Next ny
					RCP->( MsUnlock() )
				EndIf
			EndIf
		EndIf
	Next nx

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ GP010RetCont ³ Autor ³ Equipe RH         ³ Data ³ 04/01/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Retorna o ultimo Periodo em aberto.					    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - X7_REGRA Campo RA_PROCES                       	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010RetCont(cCampo,dData,cProces,lRet)
Local aArea			:= GetArea()
Local cRotOrd     	:= ""
Local cConteudo		:= ""
Local lTransfEmp	:= .F.

Default cCampo 		:= ""
Default dData  		:= Ctod("//")
Default cProces   	:= ""

	lRet := .F.

	cRotOrd := fGetCalcRot('1') //FOLHA

	dbSelectArea( "RCH" )
	dbSetOrder(4)
	If Type("OGETSRA2") == "O"
		lTransfEmp	:= ( oGetSRA2:aCols[oGetSRA2:nat,2] <> oGetSRA1:aCols[oGetSRA1:nat,2])
		// Abre o arquivo da Empresa
		EmpChangeTable( "RCH" , __cSvEmpAnt , cEmpAte , 4 )
	EndIf

	If !dbSeek(xFilial("RCH")+cProces+cRotOrd, .F.)
		cRotOrd := fGetCalcRot('9') //Autonomo
		dbSeek(xFilial("RCH")+cProces+cRotOrd, .F.)
	EndIf

	If Eof()
		cRotOrd := Space( GetSx3Cache("RCH_ROTEIR", "X3_TAMANHO") )
		dbSeek(xFilial("RCH")+cProces+cRotOrd, .F.)
	EndIf
	While !Eof()
		If Empty(RCH->RCH_DTFECH) .And. (RCH->RCH_PROCES == cProces) .And. RCH->RCH_ROTEIR == cRotOrd
				cConteudo 	:= &(cCampo)
				lRet	:= .T.
				EXIT
		Endif
		dbSkip()
	EndDo

	If !(lRet)
		cHelp := OemToAnsi( STR0061 ) // "Periodo nao Localizado"
		Help( ' ' , 1 , OemToAnsi( STR0076 ) , , cHelp , 1 , 0 )  // "Atencao"
	EndIf

	// Restaura o arquivo da Empresa
	If lTransfEmp
		EmpChangeTable( "RCH" , cEmpAte , __cSvEmpAnt , 4 )
	EndIf

	dbSelectArea( "RCH" )
	dbSetOrder(1)

	RestArea( aArea )

Return( cConteudo )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010ValSal ³ Autor ³ Mauricio T. Takakura ³ Data ³ 20/06/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao das informacoes para o campo Salario.                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                   	    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010ValSal()
Local cRetPer
Local dDataRef  := dDataBase
Local lRet 		:= .T.
Local lPer 		:= .F.
Local lTransfer	:= ( Type("nOpcaoa180")  <> "U" .and. nOpcaoa180 = 4  )
Local nPosPerAum:= 0
Local nPosPagAum:= 0
Local nSalMin	:= 0

	If cPaisLoc == "MEX"
		If funname() == "GPEA265" // Se for cadastro de Autonomos, CATFUNC e sempre "A"
			M->RA_CATFUNC := "A"
		EndIf

		If !IsInCallStack("GPEA010")
			SetMemVar("RA_HRSMES", If( INCLUI, M->RA_HRSMES, SRA->RA_HRSMES ), .T. )
		EndIf

		If Empty( M->RA_PROCES ) .Or. Empty( M->RA_HRSMES ) .Or. Empty( M->RA_CVEZON ) .Or.;
			Empty( M->RA_ADMISSA ) .Or. Empty( M->RA_CATFUNC )
			lRet := .F.
			// " Os campos obrigatorios para o calculo do Salario nao estao preenchidos"
			// " Verificar campos: Processo, Hrs.Mensais, Cod.Zona Economica, "
					// " Dt.Admissao e categoria do funcionario "
			Help(,,'HELP',, OemToAnsi( STR0063 ) + CRLF+Oemtoansi( STR0104)  + CRLF+Oemtoansi( STR0105)  ,1,0)
		EndIf

		// Preencher o campo RA_PERAUM e RA_PAGAUM na alteracao de salarios
		If MV_MODFOL == "2"
			If Type("Altera") == "U" // Foi incluido este tratamento para a execucacao atraves da formula SDI
				Altera := .T.
			EndIf
		EndIf

		If Altera  .Or. lTransfer
			cRetPer := Gp010RetCont("RCH_PER", NIL, M->RA_PROCES, @lPer )
			If lPer
				M->RA_PERAUM := cRetPer
			EndIf
			cRetPer := Gp010RetCont("RCH_NUMPAG", NIL, M->RA_PROCES, @lPer )
			If lPer
				M->RA_PAGAUM := cRetPer
			EndIf

			// Quando chamada vem  da transferencia, deve atualizar o
			// objeto
			If lTransfer
				nPosPerAum:= GdFieldPos("RA_PERAUM", oGetSRA2:aHeader)
				nPosPagAum:= GdFieldPos("RA_PAGAUM", oGetSRA2:aHeader)
	        	If nPosPerAum > 0 .and. nPosPagAum > 0
					oGetSRA2:aCols[oGetSRA2:nAt , nPosPerAum ] := M->RA_PERAUM
					oGetSRA2:aCols[oGetSRA2:nAt , nPosPagAum ] := M->RA_PAGAUM
					oGetSRA2:Refresh()
				EndIf
			EndIf
		EndIf
	EndIf

	If cPaisLoc == "COL"
		lRet := fSalBas()
	Endif

Return( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010ValSit   ³ Autor ³ Equipe RH 	    ³ Data ³ 08/01/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida a Situacao do Funcionario.				          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010ValSit()
Local lRet := .T.

	If IsMemVar( "RA_SITFOLH" )
		If SRA->RA_SITFOLH <> GetMemVar( "RA_SITFOLH" )
			If GetMemVar( "RA_SITFOLH" ) == "D" .And. Empty(GetMemVar("RA_DEMISSA"))
				cHelp := OemToAnsi( STR0064)
				Help( "", 1 , "GPDEMISSA" , , cHelp , 1 , 0 )	// "Data de Demissao nao foi Informada"
	  			lRet := .F.
	      EndIf

			If cPaisLoc == "MEX" .And. lRet
				If SRA->RA_SITFOLH == "D" .And. GetMemVar( "RA_SITFOLH" ) == " " .And. (Empty(GetMemVar("RA_FECREI")) .Or.;
				   GetMemVar("RA_DEMISSA") > GetMemVar("RA_FECREI"))
					cHelp := OemToAnsi( STR0065)
					Help("",1,"GPREINGR", , cHelp,1,0) // "Nao se informou a data de reingreso"
	  				lRet := .F.
				EndIf

				// Verifica se esta tentando fazer a alteracao do registro patronal
				// e demissao ao mesmo tempo
				If ( SRA->RA_SITFOLH <> GetMemVar( "RA_SITFOLH" )  .And. ; // Verifica se alterou a situacao do funcionario
				   GetMemVar( "RA_SITFOLH" ) =="D" )               .And. ; // Verifica se a situacao foi alterada para demitido
				   (SRA->RA_CODRPAT <> GetMemVar( "RA_CODRPAT" )) 		   	// Verifica se alterou o registro patronal do funcionario

	                cHelp := OemToAnsi(STR0132)	// "Nao 4 possivel alterar o Registro Patronal e demitir ao mesmo tempo"
					Help("",1,"GPEATRAJL", , cHelp,1,0)
	       			lRet := .F.
	       		EndIf

				If lRet
					// Validar os campos de Rescisão - Obrigar sempre o preenchimento de todos os campos
					// Se um dos campos estiver preenchido, todos os demais deverá estar
					If (!Empty(GetMemVar( "RA_SITFOLH" )) .And. GetMemVar( "RA_SITFOLH" ) == "D" ) .Or.;
		   			    !Empty(GetMemVar( "RA_DEMISSA" )) .Or.;
					    !Empty(GetMemVar( "RA_DTBIMSS" )) .Or. ;
					    !Empty(GetMemVar( "RA_TIPOAFA" ))

						If Empty(GetMemVar( "RA_SITFOLH" )) .Or. Empty(GetMemVar( "RA_DEMISSA" )) .Or.;
			   			   Empty(GetMemVar( "RA_DTBIMSS" )) .Or. Empty(GetMemVar( "RA_TIPOAFA" ))

		   					If !(((SRA->RA_SITFOLH == "D" .And. Empty( GetMemVar("RA_SITFOLH"))).And.; 	// Verifica se esta tentando tirar demissao do funcionario
							   (GetMemVar("RA_CODRPAT")!=SRA->RA_CODRPAT))) 				           		// Verifica se esta trocando o registro patronal
								If lGp010Auto
									AutoGrLog(OemToAnsi( STR0088 )) //"Todos os campos de Demissao deverao estar preenchidos!"
								Else
						  			MsgInfo( OemToAnsi( STR0088 ) )	//"Todos os campos de Demissao deverao estar preenchidos!"
					  			EndIf
					  			lRet := .F.
							EndIf
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf


	//Se for Gestao Publica
	If 	lGestPubl
		If 	M->RA_CATFUNC $ '4,5' .And. Empty(M->RA_ADICEDI)
			cHelp := OemToAnsi( STR0247)	//"Informe o campo do tipo Adido/Cedido."
			Help("",1,"GPREINGR", , cHelp,1,0)
			lRet := .F.
		Endif
	Endif


Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpa010ValPro	³ Autor ³ Mauricio Takakura  ³ Data ³ 09/08/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Campo RA_PROCES.                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_PROCES                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpa010ValPro()
Local lRet

	lRet := ExistCpo( "RCJ" )

	// Necessario atualizar a variavel cProcesso para o Filtro de Periodos
	If (MV_MODFOL == "2")
		cProcesso := M->RA_PROCES
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010ProcTp	³ Autor ³ Equipe RH          ³ Data ³ 10/12/12 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do campo RA_PROCES/RA_TIPOPGT.	                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_PROCES/RA_TIPOPGT(Esp. Brasil)            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010ProcTp()
Local lRet		:= .T.

	If Upper(AllTrim(Funname())) == "GPEA010"  .And. cPaisLoc == "BRA"
		If  !Empty(M->RA_PROCES) .And. !Empty(M->RA_TIPOPGT)
			If M->RA_PROCES == "00001" .And. !(M->RA_TIPOPGT == "M")
				MsgInfo( OemToAnsi( STR0233 ), OemToAnsi( STR0076 ) )	// "Atencao"###"Processo e Tipo de Pagamento incompativeis."
			EndIf
			If M->RA_PROCES == "00003" .And. !(M->RA_TIPOPGT == "S")
				MsgInfo( OemToAnsi( STR0233 ), OemToAnsi( STR0076 ) )	// "Atencao"###"Processo e Tipo de Pagamento incompativeis."
			EndIf
		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpa010WhenPag	³ Autor ³ Tatiane Vieira Matias ³ Data  ³ 28/01/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Atualiza a string cPeriodo conforme campo escolhido.              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_WHEN - campos RA_PAGAUM e RA_PAGADM                            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpa010WhenPag()
Local cCampo := ReadVar()

	// Necessario atualizar a variavel cProcesso para o Filtro de Periodos
	If (MV_MODFOL == "2" .And. Type("RA_PAGADM") != "U"  .And. Type("RA_PERADM") != "U")
	 	If cCampo == "M->RA_PAGADM"
			cPeriodo := M->RA_PERADM
		ElseIf cCampo == "M->RA_PAGAUM"
			cPeriodo := M->RA_PERAUM
		EndIf
	EndIf

Return( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpa010ValInf   ³ Autor ³ Tatiane Matias   ³ Data ³ 07/03/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao dos Campos Infonavit.                			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Mexico                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010InfVal()
Local lRet := .T.

	If !Inclui
		If !Empty(SRA->RA_TIPINF) .And. GetMemVar("RA_TIPINF") <> SRA->RA_TIPINF .And. Empty(GetMemVar("RA_DTMDINF"))
			lRet := .F.
			If lGp010Auto
				AutoGrLog(OemToAnsi( STR0067 ))	// "Data de Modificacao do tipo de desconto deve ser preenchido"
			Else
				MsgInfo( OemToAnsi( STR0067 ) )	// "Data de Modificacao do tipo de desconto deve ser preenchido"
			EndIf
		EndIf

		If lRet .And. !Empty(SRA->RA_NUMINF) .And. GetMemVar("RA_NUMINF") <> SRA->RA_NUMINF .And. Empty(GetMemVar("RA_DTMNINF"))
			lRet := .F.
			If lGp010Auto
				AutoGrLog(OemToAnsi( STR0068 )) // "Data de Modificacao do numero de credito Infonavit deve ser preenchido"
			Else
				MsgInfo( OemToAnsi( STR0068 ) )	 // "Data de Modificacao do numero de credito Infonavit deve ser preenchido"
			EndIf
		EndIf
	EndIf

	// Validar o periodo de admissao
	If Inclui .And. lRet
		If !(ExistCpo( "RCH", GetMemVar( "RA_PROCES" ) + GetMemVar( "RA_PERADM" ) + GetMemVar( "RA_PAGADM" ), 1 ))
			lRet := .F.
		EndIf
	EndIf

Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010SuspValid ³ Autor ³ Tatiane Matias   ³ Data ³ 08/03/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Campo Data de Suspensao.         				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010SuspValid ()
Local lRet := .T.

	If GetMemVar("RA_DTCINF") > GetMemVar("RA_DTISINF")
		lRet := .F.
		MsgInfo( OemToAnsi( STR0069 ) )	// "Data de Suspensao de desconto Infonavit deve ser maior que a data de inicio de Credito Infonavit"
	ElseIf Empty(GetMemVar("RA_DTISINF")) .and. !Empty(SRA->RA_DTISINF)
		lRet := .F.
		MsgInfo( OemToAnsi( STR0071 ) )	// "Data de Suspensao de desconto Infonavit nao pode ser apagada"
	EndIf

Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010ReinValid ³ Autor ³ Tatiane Matias   ³ Data ³ 08/03/06 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do Campo Data de Suspensao.         				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010ReinValid ()
Local lRet := .T.

   If GetMemVar("RA_DTISINF") > GetMemVar("RA_DTRDINF")
		lRet := .F.
		MsgInfo( OemToAnsi( STR0070 ) )	// "Data de Reinicio de desconto Infonavit deve ser maior que a data de Suspensao de desconto Infonavit"
	EndIf

Return ( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaTipoSal    ³ Autor ³ Abel Ribeiro      ³ Data ³ 12/11/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do campo RA_TIPOSAL (Tipo de Salario).           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Colombia                             	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaTipoSal()
Local lRet := .T.

	// Nao permitir Dt.Admissao < 01/01/91 para Tipo de Salario = 2 (Integral)
	If ((M->RA_TIPOSAL  == "2") .And. (M->RA_ADMISSA < CTOD("01/01/91")))
		Aviso(	OemToAnsi(STR0076),; 	// "Atencao!"
				OemToAnsi(STR0145),; 	// "Para Salario Integral, data de Admissão não pode ser < 01/01/91"
				{OemToAnsi(STR0077)})	// "OK"
		lRet := .F.
	EndIf

Return ( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaTipoEst    ³ Autor ³ Abel Ribeiro      ³ Data ³ 12/11/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do campo RA_TIPOEST (Tipo de Estagiario).        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                  	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaTipoEst()
Local lRet := .T.

	// Nao permitir Dt.Admissao > 01/01/91 para Tipo de Salario = 2 (Integral)
	If  M->RA_CATFUNC  == "E" .And. EMPTY(M->RA_TIPOEST)
		Aviso(OemToAnsi(STR0076), OemToAnsi(STR0144),{OemToAnsi(STR0077)})	//"Atencao!"###"Informe o tipo de Estagiario" ### "OK"
		lRet := .F.
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ CalcSDI	  ³ Autor ³  Tatiane Matias   ³ Data ³ 08/11/07 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Calcula Salario Diario Integrado.                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_SALARIO Mexico                         ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function CalcSDI(lExibe)
Local aArea		:= GetArea()
Local lRetorno  := .T.

DEFAULT lExibe := .T.

	If MV_MODFOL == "1"
		lRetorno := fFormula("327SDI")
	ElseIf MV_MODFOL == "2"

		// Execucao do Calculo pelo Motor de Calculo Modelo II se
		// existir na base de dados.
		DbSelectArea("SRY")
		DbSetOrder(1)
		DbSeek( xFilial( "SRY" ) + "SDI",.F.)
		If !Eof()
	    	lRet := fFormula( "SDI", lExibe, "SRA"  )
	 	Else
	 		// Ponto de Entrada apos a gravacao dos Registros
			If ExistBLock('CalculoSDI')
				lRetorno := U_CalculoSDI()
			EndIf
		EndIf
	EndIf

	RestArea( aArea )

Return( lRetorno )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ VldRADtPtg   ³ Autor ³ Rogerio Vaz Melonio       ³ Data ³ 06/05/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao dos campos das datas da pasta de Contrato.               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Portugal                                      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ cCampo = campo de data inicio/data vim 						 	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function VldRADtPtg(cCampo)

	If cPaisLoc <> "PTG"
		Return(.T.)
	EndIf

	lRet := .T.

	If cCampo == "RA_DATAINI"
		If Empty(M->RA_DATAINI)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0108), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Inicio de Contrato deve ser Preenchida" ### "OK"
			lRet := .F.
		ElseIf (M->RA_DATAINI > DDATABASE)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0109), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Inicio de deve ser anterior ou igual à Data Base" ### "OK"
			lRet := .F.
		EndIf
	ElseIf cCampo == "RA_DATAFIM"
		nDiasContr := Val(fDescRCC("S011",M->RA_TIPOCO,1,2,53,4))
		nDiasMin   := Val(fDescRCC("S011",M->RA_TIPOCO,1,2,57,4))
		nDiasMax   := Val(fDescRCC("S011",M->RA_TIPOCO,1,2,61,4))
		lRespTipo := .F.
		Do Case
			Case M->RA_TIPOCO $ "10/13"	//# == "01" // Valida data Fim de Contrato sem Termo
				If !Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0110), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato sem Termo não deve ter data fim preenchida" ### "OK"
					lRet := .F.
				Endif
			Case M->RA_TIPOCO $ "20/23"	//# == "02" // Valida data fim de Contrato a Termo Certo
				If Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0111), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim preenchida" ### "OK"
					lRet := .F.
				ElseIf !Empty(M->RA_DATAFIM) // Valida data fim do Contrato a Termo Certo
					If M->RA_DATAFIM <= DDATABASE
						Aviso(OemToAnsi(STR0076), OemToAnsi(STR0112), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim posterior à Data Base" ### "OK"
						lRet := .F.
					ElseIf M->RA_DATAFIM <= M->RA_DATAINI
						Aviso(OemToAnsi(STR0076), OemToAnsi(STR0113), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim posterior à Data Inicio" ### "OK"
						lRet := .F.
					Else // A data fim deve respeitar os limites do tipo de contrato
						// A verificacao sera feita abaixo
						lRespTipo := .T.
					EndIf
				EndIf
			Case M->RA_TIPOCO $ "30/33"	//# == "03" // Valida data fim de Contrato a Termo Incerto
				If !Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0114), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Incerto não deve ter data fim preenchida" ### "OK"
					lRet := .F.
				EndIf
			Case M->RA_TIPOCO $ "80"	//# == "04" // Valida data fim de Sem Contrato
				If M->RA_DATAFIM <= DDATABASE
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0115), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Fim deve ser posterior à Data Base" ### "OK"
					lRet := .F.
				ElseIf M->RA_DATAFIM <= M->RA_DATAINI
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0116), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Fim deve ser posterior à Data Inicio" ### "OK"
					lRet := .F.
			    EndIf
			Otherwise	// Verifica demais tipos, a data fim deve respeitar os limites do tipo de contrato
						// A verificacao sera feita abaixo
				lRespTipo := .T.
		EndCase
		If lRespTipo // verifica se a data fim esta dentro dos limites do tipo de contrato
			If M->RA_DATAFIM > M->RA_DATAINI + nDiasContr - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0117), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Final ultrapassa o limite de dias do Tipo de Contrato" ### "OK"
				lRet := .F.
			ElseIf M->RA_DATAFIM < M->RA_DATAINI + nDiasMin - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0118), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Final deve ser superior ao minimo de dias do Tipo de Contrato" ### "OK"
				lRet := .F.
			ElseIf M->RA_DATAFIM > M->RA_DATAINI + nDiasMax - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0119), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Final deve ser inferior ao maximo de dias do Tipo de Contrato"	 ### "OK"
				lRet := .F.
			EndIf
		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³FunCAo    ³ VldRADtCol   ³ Autor ³ Abel Ribeiro              ³ Data ³ 13/11/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao dos campos das datas da pasta de Contrato.               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Localizacao Colombia                                               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ cCampo = campo de data inicio/data vim 							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function VldRADtCol(cCampo)
Local nQtDiaPEr := 0
Local nQtResul  := 0
Local cTipoFor := ""

	If cPaisLoc <> "COL"
		Return(.T.)
	EndIf

	lRet := .T.

	If  cCampo == "RA_DATAINI"
		cTipoFor   := fDescRCC("S018",M->RA_TIPOCO,1,2,69,1)
		If Empty(M->RA_DATAINI)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0108), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Inicio de Contrato deve ser Preenchida" ### "OK"
			lRet := .F.
		ElseIf (M->RA_DATAINI > DDATABASE)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0109), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Inicio de deve ser anterior ou igual à Data Base" ### "OK"
			lRet := .F.
		EndIf

		If !(cTipoFor $ "3456")		// Valida data fim de Contrato a Termino não Definido
		   	M->RA_RENOVA := "2"    // Este Tipo de COntrato nao tem renovacao
	        M->RA_VCTOEXP:=  M->RA_DATAINI + 60
	    EndIf

		//Data de Experiencia permitida para este tipo de Contrato = 2Meses

	ElseIf cCampo == "RA_DATAFIM"
		nDiasContr := Val(fDescRCC("S018",M->RA_TIPOCO,1,2,53,4))
		nDiasMin   := Val(fDescRCC("S018",M->RA_TIPOCO,1,2,57,4))
		nDiasMax   := Val(fDescRCC("S018",M->RA_TIPOCO,1,2,61,4))
		cTipoFor   := fDescRCC("S018",M->RA_TIPOCO,1,2,69,1)
		lRespTipo := .F.

		If cTipoFor $ "3456"
			_nDias := IF(!Empty(M->RA_DATAFIM),(M->RA_DATAFIM-M->RA_DATAINI)+1,0)
			If Empty(M->RA_DATAFIM)
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0149), {OemToAnsi(STR0077)})	// "Atencao!"###"Contrato de Termino Fixo deve ter data fim preenchida"  ### "OK"
				lRet := .F.
	        ElseIF M->RA_DATAFIM > M->RA_DATAINI + nDiasContr - 1   					// Verifica Dias Maximo de Contrato conforme Tabela
			     Aviso(OemToAnsi(STR0076), OemToAnsi(STR0117), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Final ultrapassa o limite de dias do Tipo de Contrato" ### "OK"
			     lRet := .F.
			ElseIF _nDIAS > nDiasMax													//Verifica Dias Maximo de COntrato conforme Tabela
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0117), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato de Término Fixo, Periodo nao pode ser superior a 1 Ano" ### "OK"
				lRet := .F.
			Endif
		EndIf
	EndIf

Return(lRet)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ VldRADtVen   ³ Autor ³ Paulo Leme                ³ Data ³ 02/12/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao dos campos das datas da pasta de Contrato                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Localizacao Venezuela                                              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ cCampo = campo de data inicio/data vim 							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function VldRADtVen(cCampo)

	If cPaisLoc <> "VEN"
		Return(.T.)
	EndIf

	lRet := .T.

	If cCampo == "RA_DATAINI"
		If Empty(M->RA_DATAINI)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0108), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Inicio de Contrato deve ser Preenchida"###"OK"
			lRet := .F.
		EndIf
		If (M->RA_DATAINI < M->RA_ADMISSA)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0155), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Inicio anterior a Data de Admissao"###"OK"
			lRet := .T.
		EndIf
	ElseIf cCampo == "RA_DATAFIM"
		nDiasContr := Val(fDescRCC("S014",M->RA_TIPOCO,1,2,53,4))
		nDiasMin   := Val(fDescRCC("S014",M->RA_TIPOCO,1,2,57,4))
		nDiasMax   := Val(fDescRCC("S014",M->RA_TIPOCO,1,2,61,4))
		lRespTipo := .F.
		Do Case
			Case M->RA_TIPOCO == "01" // Valida data Fim de Contrato TEMPO INDETERMINADO
				If !Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0110), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato TEMPO INDETERMINADO não deve ter data fim preenchida"###"OK"
					lRet := .F.
				EndIf
			Case M->RA_TIPOCO == "02" // Valida data fim de Contrato a TEMPO DETERMINADO
				If Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0111), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a TEMPO DETERMINADO deve ter data fim preenchida"###"OK"
					lRet := .F.
				ElseIf !Empty(M->RA_DATAFIM) // Valida data fim do Contrato a TEMPO DETERMIADO
					If M->RA_DATAFIM <= M->RA_DATAINI
						Aviso(OemToAnsi(STR0076), OemToAnsi(STR0113), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim posterior à Data Inicio"###"OK"
						lRet := .F.
					Else // A data fim deve respeitar os limites do tipo de contrato
						// A verificacao sera feita abaixo
						lRespTipo := .T.
					EndIf
				EndIf
			Case M->RA_TIPOCO == "03" // Valida data fim de Contrato POR OBRA DETERMINADA
				If Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0111), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a TEMPO DETERMINADO deve ter data fim preenchida"###"OK"
					lRet := .F.
				ElseIf !Empty(M->RA_DATAFIM) // Valida data fim do Contrato a TEMPO DETERMIADO
					If M->RA_DATAFIM <= M->RA_DATAINI
						Aviso(OemToAnsi(STR0076), OemToAnsi(STR0113), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim posterior à Data Inicio"###"OK"
						lRet := .F.
					Else // A data fim deve respeitar os limites do tipo de contrato
						// A verificacao sera feita abaixo
						lRespTipo := .T.
					EndIf
				EndIf

			Otherwise	// Verifica demais tipos, a data fim deve respeitar os limites do tipo de contrato
						// A verificacao sera feita abaixo
				lRespTipo := .T.
		EndCase
		If lRespTipo .And. M->RA_TIPOCO $ "02/03"// Verifica se a data fim esta dentro dos limites do tipo de contrato
			If M->RA_DATAFIM > M->RA_DATAINI + nDiasContr - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0117), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Final ultrapassa o limite de dias do Tipo de Contrato"###"OK"
				lRet := .F.
			ElseIf M->RA_DATAFIM < M->RA_DATAINI + nDiasMin - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0118), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Final deve ser superior ao minimo de dias do Tipo de Contrato"###"OK"
				lRet := .F.
			ElseIf M->RA_DATAFIM > M->RA_DATAINI + nDiasMax - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0119), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Final deve ser inferior ao maximo de dias do Tipo de Contrato"###"OK"
				lRet := .F.
			EndIf
		EndIf
	EndIf

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ VldRADtANG   ³Autor³ Ricardo Berti		          ³ Data ³22/04/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao dos campos das datas da pasta de Contrato                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Localizacao Angola		                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ cCampo = campo de data inicio/data vim 							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function VldRADtANG(cCampo)

	If cPaisLoc <> "ANG"
		Return(.T.)
	EndIf

	lRet := .T.

	If cCampo == "RA_DATAINI"
		If Empty(M->RA_DATAINI)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0108), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Inicio de Contrato deve ser Preenchida" ### "OK"
			lRet := .F.
		ElseIf (M->RA_DATAINI > DDATABASE)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0109), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Inicio de deve ser anterior ou igual à Data Base" ### "OK"
			lRet := .F.
		EndIf
	ElseIf cCampo == "RA_DATAFIM"
		nDiasContr := Val(fDescRCC("S016",M->RA_TIPOCO,1,2,53,4))
		nDiasMin   := Val(fDescRCC("S016",M->RA_TIPOCO,1,2,57,4))
		nDiasMax   := Val(fDescRCC("S016",M->RA_TIPOCO,1,2,61,4))
		lRespTipo := .F.
		Do Case
			Case Left(M->RA_TIPOCO,1) == "1"	// Valida data fim de Contrato a Termo Incerto
				If !Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0114), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Incerto não deve ter data fim preenchida" ### "OK"
					lRet := .F.
				Endif
			Case Left(M->RA_TIPOCO,1) == "2"	// Valida data fim de Contrato a Termo Certo
				If Empty(M->RA_DATAFIM)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0111), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim preenchida" ### "OK"
					lRet := .F.
				ElseIf !Empty(M->RA_DATAFIM) // Valida data fim do Contrato a Termo Certo
					If M->RA_DATAFIM <= DDATABASE
						Aviso(OemToAnsi(STR0076), OemToAnsi(STR0112), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim posterior à Data Base" ### "OK"
						lRet := .F.
					ElseIf M->RA_DATAFIM <= M->RA_DATAINI
						Aviso(OemToAnsi(STR0076), OemToAnsi(STR0113), {OemToAnsi(STR0077)})	//"Atencao!"###"Contrato a Termo Certo deve ter data fim posterior à Data Inicio" ### "OK"
						lRet := .F.
					Else // a data fim deve respeitar os limites do tipo de contrato
						// a verificacao sera feita abaixo
						lRespTipo := .T.
					EndIf
				EndIf
			Otherwise	// verifica demais tipos, a data fim deve respeitar os limites do tipo de contrato
						// a verificacao sera feita abaixo
				lRespTipo := .T.
		EndCase
		If lRespTipo // verifica se a data fim esta dentro dos limites do tipo de contrato
			If nDiasContr > 0 .And. M->RA_DATAFIM > M->RA_DATAINI + nDiasContr - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0117), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Final ultrapassa o limite de dias do Tipo de Contrato" ### "OK"
				lRet := .F.
			ElseIf M->RA_DATAFIM < M->RA_DATAINI + nDiasMin - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0118), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Final deve ser superior ao minimo de dias do Tipo de Contrato" ### "OK"
				lRet := .F.
			ElseIf nDiasMax > 0 .And. M->RA_DATAFIM > M->RA_DATAINI + nDiasMax - 1
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0119), {OemToAnsi(STR0077)})	//"Atencao!"###"Data Final deve ser inferior ao maximo de dias do Tipo de Contrato"	 ### "OK"
				lRet := .F.
			EndIf
		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010VlCtr ³ Autor ³ Rogerio Vaz Melonio       ³ Data ³ 07/05/08  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao dos campos das datas da pasta de Contrato antes de gravar.³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Portugal                                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpea010VlCtr()

	If !cPaisLoc $ "PTG/COL/PER/ANG"
		Return(.T.)
	EndIf

	lRet := .T.

	// Valida o campo data inicio do contrato
	If cPaisLoc=="PTG"
	    lRet := VldRADtPTG("RA_DATAINI")
	ElseIf cPaisLoc=="COL"
		lRet := VldRADtCOL("RA_DATAINI")
	ElseIf cPaisLoc=="VEN"
		lRet := VldRADtVEN("RA_DATAINI")
	ElseIf cPaisLoc=="PER"
		lRet := VldRADtPER("RA_DATAINI")
	ElseIf cPaisLoc=="ANG"
		lRet := VldRADtANG("RA_DATAINI")
	EndIf

	If lRet
		// Valida o campo data fim do contrato
		If cPaisLoc=="PTG"
			lRet := VldRADtPTG("RA_DATAFIM")
		ElseIf cPaisLoc=="COL"
			lRet := VldRADtCOL("RA_DATAFIM")
		ElseIf cPaisLoc=="VEN"
			lRet := VldRADtVEN("RA_DATAFIM")
		ElseIf cPaisLoc=="PER"
			lRet := VldRADtPER("RA_DATAFIM")
		ElseIf cPaisLoc=="ANG"
			lRet := VldRADtANG("RA_DATAFIM")
		EndIf
	EndIf

Return( lRet )

/*
Check list das funcionalidades da rotina de cadastro de funcionarios
o	Somente podera ser efetuada a contratacao, quando ocorrer a inclusao do funcionario. - GPEA010 + SX3 - OK
o	Os campos Tipo de Contrato e Data Inicial sao obrigatorios - OK SX3. Os campos Data Fim e Motivo do Contrato não são obrigatorios. - OK SX3
o	Estes campos estarao disponiveis para digitacao somente na opcao de Inclusao. SX3 - OK
o	Apos a gravacao da inclusao, nao se modifica mais pelo cadastro de funcionarios. GPEA010 + SX3 - OK
o	Nao deve ser permitida a digitacao de data final anterior a data base do sistema - OK GPEA010. Se o usuario deseja manter o historico anterior deve utilizar a rotina de historico.
o	Depois gravada a inclusao do funcionario, gravar as informacoes do contrato no "Historico de contratos" - GPEA010 OK.
*/

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010AltCat ³Autor ³ Abel Ribeiro        ³ Data ³ 17/04/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Consistencia do Campo Codigo Categoria Profissional.       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010	                                              	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010AltCat()
Local aArea	 := GetArea()
Local lRet 	 := .T.

	If (( IsMemVar( "RA_CODCAT"  ) .And. GetMemVar( "RA_CODCAT" )  # SRA->RA_CODCAT) )

		If lRet
			If ( Empty(GetMemVar( "RA_DTALT" ) ))
			    Help("",1,"GPEA010002")   // "Para alterar uma categoria deve-se informar a data de alteracao."
			    lRet := .F.               //  Campo RA_DTALT, esta informação sera gravada para consultas futuras.
			EndIf
		EndIf
	EndIf

	RestArea( aArea )

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fGravaRgh ³ Autor ³ Abel Ribeiro         ³ Data ³ 22/04/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Gravacao da Alteracao Categorias Profissionais.            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGravaRgh(cCodCat,dDtAlt)
Local aArea			:= GetArea()
Local nOPC          := 0

	// Verifica se ja teve alguma alteracao de Categoria se nao grava a anterior como Primeira
	dbSelectArea("RGH")
	dbSetORder(1)
	If RGH->( !dbSeek(SRA->RA_FILIAL+SRA->RA_CODIRCT+SRA->RA_CODCAT+SRA->RA_MAT ) )
		dbSelectArea("RGH")
	    //o Registro Atual como a Primeira Alteracao
		If RGH->( RecLock("RGH",.T.,.T.) )
		   RGH->RGH_FILIAL   := SRA->RA_FILIAL
		   RGH->RGH_DATA     := DDTALT
		   RGH->RGH_CODIRC   := SRA->RA_CODIRCT
		   RGH->RGH_CODCAT   := SRA->RA_CODCAT
		   RGH->RGH_MAT      := SRA->RA_MAT
		   RGH->RGH_DTINIC   := SRA->RA_ADMISSA
		   RGH->RGH_DTFIM    := dDtAlt
		   RGH->( MsUnLock() )
		EndIf
	    //Grava a Alteracao de categoria que esta na memoria
		dbSelectArea("RGH")
		If  RecLock("RGH",.T.,.T.)
			RGH->RGH_FILIAL   := SRA->RA_FILIAL
			RGH->RGH_DATA     := DDTALT
		   	RGH->RGH_CODIRC   := SRA->RA_CODIRCT
			RGH->RGH_CODCAT   := cCodCat
			RGH->RGH_MAT      := SRA->RA_MAT
			RGH->RGH_DTINIC   := dDtALT
			RGH->( MsUnLock() )
		EndIf
	Else
	    dbSelectArea("RGH")
		dbSetORder(2)
		If dbSeek(SRA->RA_FILIAL+DTOS(dDtAlt)+SRA->RA_CODIRCT+cCodCat+SRA->RA_MAT)
		   nOpc  := AVISO(OemToAnsi(STR0076),OemToAnsi(STR0120),{STR0013,STR0015}) // "Atencao"#"Ja Existe uma Alteracao para este mesmo IRCT/Categoria"#Confirma / Cancela
		   If nOpc == 1
		      RecLock("RGH",.F.,.F.)
			  RGH->RGH_CODCAT   := cCODCAT  // Regrava a categoria que esta na memoria
			  RGH->RGH_DTINIC   := dDTAlt   // Data de Alteracao
			  RGH->RGH_DATA     := dDTAlt
		      RGH->( MsUnLock() )
		   EndIf
		Else
		   If RecLock("RGH",.T.,.T.)
			  RGH->RGH_FILIAL   := SRA->RA_FILIAL
			  RGH->RGH_DATA     := DDTALT
		   	  RGH->RGH_CODIRC   := SRA->RA_CODIRCT
			  RGH->RGH_CODCAT   := cCodCat
			  RGH->RGH_MAT      := SRA->RA_MAT
			  RGH->RGH_DTINIC   := dDtALT
			  RGH->( MsUnLock() )
		   EndIf
		EndIf
	EndIf

	RestArea( aArea )

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fCarDep   ³ Autor ³ Emerson Campos       ³ Data ³ 12/02/14 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Verifica se ha dependentes e carrega array para Copia.		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function  fCarDep(cFil,cMat)
Local aArea		:= GetArea()
Local aCposSRB	:= {}
Local nX		:= 0
Local nInd		:= 1
Local nPosDtBx	:= 0 //Data baixa

	dbSelectArea("SX3")
	dbSetOrder(1)
	dbSeek("SRB")
	While ( !Eof() .And. (SX3->X3_ARQUIVO == "SRB") )
		If SX3->X3_CONTEXT != "V"
			Aadd(aCposSRB,{ SX3->X3_CAMPO })
		EndIf
		dbSelectArea("SX3")
		dbSkip()
	EndDo

	If Len(aCposSRB) > 0
		nPosDtBx	:= aScan(aCposSRB,{|x| AllTrim(x[1]) == 'RB_DTBAIXA' })
		dbSelectArea("SRB")
		dbSeek(cFIl+cMat)
		While ! Eof() .And. cFIL+cMat = SRB->RB_FILIAL+SRB->RB_MAT
			If Empty(&(aCposSRB[nPosDtBx][1])) .OR. &(aCposSRB[nPosDtBx][1]) >  dDataBase
				Aadd(aDep, {})
			   	For nX := 1 to Len(aCposSRB)
			   		Aadd(aDep[nInd], If(AllTrim(aCposSRB[nX,1]) == 'RB_DTENTRA', CtoD("  /  /  "), &(aCposSRB[nX][1])))
			   	Next nX
			   	nInd++
			EndIf
			dbSkip()
		Enddo
	EndIf

	RestArea(aArea)

Return( Iif(Len(aDep) > 0,.T.,.F.) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fCarBenef ³ Autor ³ Emerson Campos       ³ Data ³ 12/02/14 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Verifica se ha dependentes e carrega array para Copia.		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function  fCarBenef(cFil,cMat)
Local aArea		:= GetArea()
Local aCposSRQ	:= {}
Local nX		:= 0
Local nInd		:= 1
Local nPosDtFim	:= 0 //Data baixa

	dbSelectArea("SX3")
	dbSetOrder(1)
	dbSeek("SRQ")
	While ( !Eof() .And. (SX3->X3_ARQUIVO == "SRQ") )
		Aadd(aCposSRQ,{ SX3->X3_CAMPO })
		dbSelectArea("SX3")
		dbSkip()
	EndDo

	If Len(aCposSRQ) > 0
		nPosDtFim	:= aScan(aCposSRQ,{|x| AllTrim(x[1]) == 'RQ_DTFIM' })
		dbSelectArea("SRQ")
		dbSeek(cFIl+cMat)
		While ! Eof() .And. cFIL+cMat = SRQ->RQ_FILIAL+SRQ->RQ_MAT
			If Empty(&(aCposSRQ[nPosDtFim][1])) .OR. &(aCposSRQ[nPosDtFim][1]) >  dDataBase
				Aadd(aBenef, {})
			   	For nX := 1 to Len(aCposSRQ)
			   		Aadd(aBenef[nInd], If(AllTrim(aCposSRQ[nX,1]) == 'RQ_DTINI', CtoD("  /  /  "), &(aCposSRQ[nX][1])))
			   	Next nX
			   	nInd++
			EndIf
			dbSkip()
		Enddo
	EndIf

	RestArea(aArea)

Return( Iif(Len(aBenef) > 0,.T.,.F.) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fChecaAnteAum ³ Autor ³ Christiane Vieira  ³ Data ³ 30/12/11 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Verifica se o campo RA_ANTEAUM e usado.			          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 							                          ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fChecaAnteAum()
Local aArea		:= GetArea()
Local lRet      := .T.

	dbSelectArea("SX3")
	dbSetOrder(2)

	dbSelectArea("SX3")
	If SX3->( dbSeek("RA_ANTEAUM"))
		If !X3Uso(SX3->X3_USADO)
			lRet := .F.
		EndIf
	EndIf

	RestArea( aArea )

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fSalario_COS ³ Autor ³ Mauricio Takakura ³ Data ³ 30/08/11 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Calcular o Salario Diario e Mensal do Funcionario.         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Trajetoria Laboral                               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fSalario_COS(	cFilSRA	,;	//Filial do Funcionario
						cMatSRA	,;	//Matricula do Funcionario
						nSalMes	,;	//@-Salario Mes do Funcionario
						nSalDia	,;	//@-Salario Dia do Funcionario
						dDataCot,;	//Data de Cotacao para Salario Estrangeiro
						nHorasDia;	//@-Retorna as horas trabalhadas por dia
							   )
Local cTipoDia		:= "M"
Local cMoedaPg		:= ""
Local cCodFunc		:= ""
Local cCatFun		:= ""
Local lTemConjuge 	:= .F.
Local lRet := .T.
Local nPosTab		:= 0
Local nFacCon		:= 30
Local nSalario		:= 0
Local nSalMinMTSS	:= 0
Local nMinSal		:= 0 // Variavel para atribuição dos salários Diário ou Mensal para comparar com nSalMinMTSS
Local nCotDolar		:= 0
Local nPos			:= 0
Local nIVMFunc		:= 0
Local nSEMFunc		:= 0
Local nApBancoP		:= 0
Local nIndApl		:= 0
Local n2ISRDe		:= 0
Local n2ISRAte		:= 0
Local n2PorISR		:= 0
Local n3PorISR		:= 0
Local nVlrConjuge 	:= 0
Local nDepeFilhos 	:= 0
Local nVlrFilhos	:= 0
Local nPorcApl		:= 0
Local nNewSalMes	:= 0

DEFAULT cFilSRA	:= SRA->RA_FILIAL
DEFAULT cMatSRA	:= SRA->RA_MAT
DEFAULT dDataCot:= SRA->RA_ADMISSA

	If Type( "lHistSal" ) == "U"
		_SetOwnerPrvt(	"lHistSal" , .F. )
	EndIf

    // Calculo para Moeda Estrangeria
	If SRA->RA_FILIAL + SRA->RA_MAT <> cFilSRA + cMatSRA
		DbSelectArea( "SRA" )
		DbSetOrder( 1 )
		DbSeek( cFilSRA + cMatSRA, .F. )
	EndIf

	nSalario	:= If( Empty(GetMemVar( "RA_SALARIO" )), SRA->RA_SALARIO, GetMemVar( "RA_SALARIO" ))
	cMoedaPg 	:= If( Empty(GetMemVar( "RA_MOEDAPG" )), SRA->RA_MOEDAPG, GetMemVar( "RA_MOEDAPG" ))
	cCodFunc 	:= If( Empty(GetMemVar( "RA_CODFUNC" )), SRA->RA_CODFUNC, GetMemVar( "RA_CODFUNC" ))
	cProces  	:= If( Empty(GetMemVar( "RA_PROCES"  )), SRA->RA_PROCES , GetMemVar( "RA_PROCES" ))
	nSRASalario := If( Empty(GetMemVar( "RA_SALARIO" )), SRA->RA_SALARIO, GetMemVar( "RA_SALARIO" ))
	cTnoTrab 	:= If( Empty(GetMemVar( "RA_TNOTRAB" )), SRA->RA_TNOTRAB, GetMemVar( "RA_TNOTRAB" ))
	cGrossUP	:= If( Empty(GetMemVar( "RA_GROSSUP" )), SRA->RA_GROSSUP, GetMemVar( "RA_GROSSUP" ))
	If !lHistSal
		cCatFun	:= If( Empty(GetMemVar( "RA_CATFUNC" )), SRA->RA_CATFUNC, GetMemVar( "RA_CATFUNC" ))
	EndIf

	DbSelectArea( "SR6" )
	DbSetOrder( RetOrdem( "SR6", "R6_FILIAL+R6_TURNO" ) )
	DbSeek( xFilial( "SR6", cFilSRA ) + cTnoTrab, .F. )
	If !Eof()
		nHorasDia := SR6->R6_HRDIA
	EndIf

	If (nPosTab := fPosTab("S006", SRJ->RJ_CODMTSS, "=", 4)) > 0
		cTipoDia := fTabela("S006", nPosTab, 8)
		nSalMinMTSS := fTabela("S006", nPosTab, 7) // BUSCA SALARIO MINIMO
	EndIf

	If !Empty(cMoedaPg)
		DbSelectArea( "SRJ" )
		DbSetOrder( RetOrdem( "SRJ", "RJ_FILIAL+RJ_FUNCAO" ) )
		DbSeek( xFilial( "SRJ", cFilSRA ) + cCodFunc, .F. )
		If !Eof()

			DbSelectArea( "RCJ" )
			DbSetOrder( RetOrdem( "RCJ", "RCJ_FILIAL+RC_CODIGO" ) )
			DbSeek( xFilial( "RCJ", cFilSRA ) + cProces, .F. )
			If !Eof()
				nFacCon := RCJ->RCJ_FACCON
			Else
				nFacCon := 1
			EndIf

			nSalario := nSRASalario
			nCotDolar := RecMoeda(dDataCot,Val(cMoedaPg))
			If nCotDolar <= 0
				nCotDolar := 1
			EndIf
			nSalario := nSalario * nCotDolar

			If cTipoDia == "D"
				nSalmes := nSalario * nFacCon
				nSalDia := nSalario
			ElseIf cTipoDia == "M"
				If cCatFun == "H"
					nSalario := nSalario * nHorasDia * nFacCon
				ElseIf cCatFun == "D"
					nSalario := nSalario * nFacCon
				Endif
				nSalmes := nSalario
				nSalDia := nSalario / nFacCon
			EndIf
		EndIf
	Else
		nSalMes := nSalario
		nSalDia := nSalario / nFacCon
	EndIf

	// Calculo para Grossup
	If cGrossUp <> "1"
		nPorcApl := 1

		If cGrossUp <> "3" // Valido para CCSS e Total
			nPos := fPosTab("S001", 0.01, "<", 4)
			If nPos > 0
				nIVMFunc := FTabela("S001", nPos, 15) // Valor na tabela de IVM do funcionario
				nSEMFunc := FTabela("S001", nPos, 16) // Valor na tabela de SEM do funcionario
				nApBancoP:= FTabela("S001", nPos, 17) // Valor na tabela de Aporte ao Banco Popular
			EndIf

			nPorcApl := (nIVMFunc+nSEMFunc+nApBancoP)/100
		EndIf

		// Grossup somente com CCSS - Impuesto sobre Seguridad Social
		If cGrossUp == "4"
			nIndApl := 1 / nPorcApl
			nSalMes := nSalMes / nIndApl
		Else
			nPos := fPosTab("S002", 2, "=", 4)
			n2ISRDe := FTabela("S002", nPos, 5) // Faixa Inicial do Imposto de Renda
			n2ISRAte:= FTabela("S002", nPos, 6) // Faixa Final do Imposto de Renda
			n2PorISR:= FTabela("S002", nPos, 7) // % do ISR
			If n2PorISR > 0
				n2PorISR := n2PorISR / 100
			EndIf

			nPos := fPosTab("S002", 3, "=", 4)
			n3PorISR:= FTabela("S002", nPos, 7) // % do ISR
			If n3PorISR > 0
				n3PorISR := n3PorISR / 100
			EndIf

			// Verifica se ha dependentes para calculo do IR
			dbSelectArea("SRB")
			dbSetOrder(1)
			dbSeek( cFilSRA + cMatSRA )
			nDepeFilhos := 0
			While !Eof() .And. SRB->RB_FILIAL + SRB->RB_MAT == cFilSRA + cMatSRA
				If SRB->RB_GRAUPAR == "C" .and. SRB->RB_TIPIR $ "4"  		// Conjuge
					lTemConjuge := .T.
			  	EndIf

			  	If SRB->RB_GRAUPAR == "F" .and. SRB->RB_TIPIR <> "5"  		// Filhos
					nDepeFilhos += 1
				EndIf

				SRB->(dbSkip())
			EndDo

			If lTemConjuge
				nPos := fPosTab("S003", 1, "=", 4)
				nVlrConjuge := FTabela("S003", nPos, 5) // Valor de Desconto por Conjuge
			EndIf

			If nDepeFilhos > 0
				nVlrFilhos 	:= FTabela("S003", nPos, 6) // Valor de Desconto por Filhos
				nVlrFilhos	:= nVlrFilhos * nDepeFilhos
			EndIf

			If nSalmes <= n2ISRDe
				nIndApl := 1-nPorcApl
				nNewSalMes := nSalMes / nIndApl
			ElseIf nSalmes > n2ISRDe .And. nSalmes < n2ISRAte
				nNewSalMes := (nSalMes + (n2ISRDe * n2PorISR) - nVlrFilhos - nVlrConjuge ) / (1-nPorcApl-n2PorISR)
			ElseIf nSalmes >= n2ISRAte
	  			nNewSalMes := (nSalMes + ( n2ISRAte - n2ISRDe) * n2PorISR  - (n2ISRAte * n3PorISR) - nVlrFilhos - nVlrConjuge) / (1-nPorcApl-n3PorISR)
			EndIf

  			nSalMes := nNewSalMes
		EndIf
		nSalDia := nSalMes / nFacCon
		nMinSal := If (cTipoDia == "M", nSalMes, nSalDia)
		If nMinSal < nSalMinMTSS .And. !lHistSal
			Help(" ",1,".A030VLD.") // Problema: "Valor Invalido"### Solucao: "O Salario deve ser maior ou igual ao Salario Minimo do Codigo MTSS"
			lRet := .F.
		EndIf
	Else
		nMinSal := If (cTipoDia == "M", nSalMes, nSalDia)
		If nMinSal < nSalMinMTSS  .And. !lHistSal
			Help(" ",1,".A030VLD.") // Problema: "Valor Invalido"### Solucao: "O Salario deve ser maior ou igual ao Salario Minimo do Codigo MTSS"
			lRet := .F.
		EndIf
	EndIf
	lHistSal := .F.

	If nSalMes == 0 .Or. nSalDia == 0
		MsgInfo(OemToAnsi(STR0210), OemToAnsi(STR0076)) // "Salario Mensal ou Salario Diario possuem valores zerados"###"Atencao"
		lRet := .F.
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ gp010CpoTLab ³ Autor ³ Marcelo Silveira          ³ Data ³ 01/02/10 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Alteracao: Checa campos que compoem a Traj.Laboral.	            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 					                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function gp010CpoTLab( lHelp )
Local lRet			:= .T.
Local nVlSalario	:= IIF( cNivel < GetSx3Cache( "RA_SALARIO" , "X3_NIVEL" ),0,GdFieldGet( "RA_SALARIO" , 1 , .F. , aSraHeader , aSvSraCols ))  //Salario
Local nDtRead		:= GdFieldGet( "RA_FECREI"	, 1, .F. , aSraHeader , aSvSraCols ) // Data de readmissao
Local nCodReg		:= GdFieldGet( "RA_CODRPAT"	, 1, .F. , aSraHeader , aSvSraCols ) // Codigo registro patronal
Local nVlDtDem 		:= GdFieldGet( "RA_DEMISSA"	, 1, .F. , aSraHeader , aSvSraCols ) // Data demissao
Local nVlDtAdm		:= GdFieldGet( "RA_ADMISSA"	, 1, .F. , aSraHeader , aSvSraCols ) // Data admissao
Local nVlPerAum		:= GdFieldGet( "RA_PERAUM"	, 1, .F. , aSraHeader , aSvSraCols ) // Periodo de aumento
Local nVlPagAum		:= GdFieldGet( "RA_PAGAUM"	, 1, .F. , aSraHeader , aSvSraCols ) // Pagamento do aumento
Local nVlTpAum 		:= GdFieldGet( "RA_TIPOALT"	, 1, .F. , aSraHeader , aSvSraCols ) // Tipo alteracao salarial
Local nVlDtAum 		:= GdFieldGet( "RA_DATAALT"	, 1, .F. , aSraHeader , aSvSraCols ) // Data alteracao salarial

If Type("lGp010Auto") == "U"
	Private lGp010Auto := .F.
EndIf

	IF lGp010Auto .And. FunName() == "TCFA040"
		Return(.T.)
	EndIF

	DEFAULT	lHelp		:= .T.

	If  nVlSalario == Nil	.Or. nCodReg == Nil 	.Or. ;
		nVlDtDem == Nil		.Or. nVlDtAdm == Nil	.Or. nVlPerAum == Nil	.Or. ;
		nVlPagAum == Nil	.Or. nVlTpAum == Nil	.Or. nVlDtAum == Nil .Or. (cPaisLoc == "MEX" .And. nDtRead == Nil)
		If lHelp
			Aviso(STR0076,STR0179,{STR0077},,STR0180)
			// "Atencao","Houve alteracao de campos ou falta informacoes utilizadas na Trajetoria Laboral. Porem, alguns campos nao estao habilitados para o usuario logado. A manutecao desses campos e permitida em Funcionarios no ambiente Gestao de Pessoal.",{"OK"},,"Manutencao Nao Permitida")
		EndIf
		lRet := .F.
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fFindSrc  ³ Autor ³ Tania Bronzeri       ³ Data ³ 20/06/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Busca lancamentos na SRC, para rotina de reingresso.       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Trajetoria Laboral                               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fFindSrc(cChave)
Local aArea	  := GetArea()
Local lRet	  := .T.
Local cRoteir := fGetCalcRot('4')	// Rescisao

	DbSelectArea("SRC")
	DbSetOrder(RetOrdem("SRC","RC_FILIAL+RC_MAT+RC_PROCES+RC_ROTEIR+RC_PERIODO+RC_SEMANA"))
	If !(lRet := DbSeek(cChave+cRoteir, .F.))
  		If ExistBlock("GP010RES")
			lRet := !(ExecBlock("GP010RES",.F.,.F.))
			If lRet == Nil
				lRet := .T.
			EndIf
  		Else
	  		cRoteir := fGetCalcRot('A')	// Aplicacao de Rescisao
			If !Empty( cRoteir )
	   			lRet 	:= DbSeek(cChave+cRoteir, .F.)
			Else
				lRet := .F.
			Endif
  		EndIf
	EndIf

	RestArea(aArea)

Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fOpAFP    ³ Autor ³ Renata Elena         ³ Data ³ 08/09/08 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Opcoes de AFP.											    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_WHEN - Campo AFPOPC - Localizacao Bolivia               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fOpAFP()
Local cTitulo	:= ""
Local cpar		:= ""
Local MvParDef	:= ""
Local MvPar
Local lRet	    := .T.

Private aInc	:={}

	If Alltrim(ReadVar() )= "M->RA_AFPOPC"

		MvPar		:=	&(Alltrim(ReadVar()))	 		    	// Carrega Nome da Variavel do Get em Questao
		mvRet		:=	Alltrim(ReadVar())			 	    	// Iguala Nome da Variavel ao Nome variavel de Retorno
		aInc		:=	{STR0134,STR0135,STR0136,STR0205}  		// "AFP Comission"###"AFP Vejez"###"AFP Riesgo"###"Aporte Solidário"
		MvParDef	:=	"1234"
		cTitulo		:=	STR0137							  		//"Calculo AFP"

		f_Opcoes(@MvPar,cTitulo,aInc,MvParDef,12,49,.F.,,4)  	// Chama funcao f_Opcoes

		&MvRet := mvpar											// Devolve Resultado
		cPar := StrTran( mvpar, '*', "")

		If (cPar $ "234" .OR. cPar $ "24") .AND. !("1" $ mvpar)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0216), {OemToAnsi(STR0077)})	//"Atencao!"###"1 - AFP Comissao e obrigatorio para as opcoes de AFP" ### "OK"
			&MvRet := ""
	  	EndIf

		If &MvRet == "****"
			&MvRet := ""
		EndIf

	EndIf

Return( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Sitmilbox   ³ Autor ³ Tiago Malta     ³ Data ³ 30/09/10 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Combo do campo RA_SITMIL.							     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Portugal                           ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Sitmilbox()
Local cSitBox := ""

		cSitBox := ( "1=" +	STR0192	+ ";" )	// 1 = Aguarda Inspecção ou foi-lhe concedido adiamento da inspecção;
		cSitBox += ( "2=" + STR0193	+ ";" )	// 2 = Aguarda incorporação;
		cSitBox += ( "3=" +	STR0194	+ ";" )	// 3 = A cumprir Serviço Militar;
		cSitBox += ( "4=" + STR0195	+ ";" ) // 4 = ServiCo Militar Cumprido ou passagem à reserva territorial;
		cSitBox += ( "5=" + STR0196	+ ";" )	// 5 = Inapto para Serviço Militar;
		cSitBox += ( "6=" + STR0197	+ ";" )	// 6 = Objector de Consciência;
		cSitBox += ( "7=" + STR0198 + ";" )	// 7 = Em regime de voluntariado ou contrato;
		cSitBox += ( "8=" +	STR0199  )		// 8 = Outros

Return( cSitBox )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gp010AfpVld ³ Autor ³ Equipe RH          ³ Data ³ 14/09/11 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao do campo RA_CODAFP com RA_DTINAFP.		        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Colombia		                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gp010AfpVld()
	Local aArea		:= GetArea()
	Local lRet 		:= .T.

	If !lGp010Auto .And. IsMemVar( "RA_CODAFP" ) .And. IsMemVar( "RA_DTINAFP" )
		If	( GdFieldGet( "RA_CODAFP" , 1 , .F. , aSraHeader , aSvSraCols ) <> GetMemVar( "RA_CODAFP" ) ) .And.;
			( GdFieldGet( "RA_DTINAFP", 1 , .F. , aSraHeader , aSvSraCols ) == GetMemVar( "RA_DTINAFP" ) )

			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0209), {OemToAnsi(STR0077)})	//"Atencao!"###"Mudou de AFP!!!  Favor incluir uma nova data de início para essa AFP !"###"OK"
			lRet := .F.

		EndIf
	EndIf

	RestArea( aArea )

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaCICBox  ³ Autor ³ Erika Kanamori       ³ Data ³ 19/11/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao utilizada pra construcao de combo box do campo		³
³  		   ³ RA_TPCIC, para localizacao Peru.   						³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaCICBox()
Local cOpcBox := ""

	cOpcBox := "01=" + STR0172 + ";" 	// "Doc. Nacional de Identidad"
    cOpcBox += "02=" + STR0173 + ";" 	// "Carnet de Fuerzas Policiales"
    cOpcBox += "03=" + STR0174 + ";" 	// "Carnet de Fuerzas Armadas"
    cOpcBox += "04=" + STR0175 + ";" 	// "Carnet de Estranjeria"
    cOpcBox += "05=" + STR0176 + ";" 	// "Libreta-Cedula Tributaria"
    cOpcBox += "07=" + STR0177 + ";" 	// "Pasaporte"
    cOpcBox += "08=" + STR0178     		// "Doc. Provisional de Identidad"

Return ( cOpcBox )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ VldRANacional ³ Autor ³ Erika Kanamori   ³ Data ³ 19/11/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida se o funcionario e estrangeiro ou nao.				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Peru                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function VldRANacional()
Local lRet:= .F.
Local nPos:= fPosTab("S023", M->RA_NACIONA, "=", 4 )

	If nPos > 0
		Nacional := fTabela("S023", nPos, 6, )

	    If Nacional == "S"
	    	lRet:= .T.
	    EndIf

	EndIf

Return ( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ VldSxbS21PER  ³ Autor ³ Erika Kanamori   ³ Data ³ 23/12/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Retorna parametro para filtro da consulta padrao S21PER.	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Peru                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function VldSxbS21PER()
Local lRet:= .F.
Local nPosDepto:= 4

	If !(Len(aHeader) < 1)
		nPosDepto:= (ASCAN(aHeader,{|X| X[2] = "CODDEPTO"}))
		If SubStr(RCC_CONTEU,1,2) == aCols[Len(aCols)][nPosDepto]
			lRet:= .T.
		EndIf
	EndIf

Return ( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RetUbigeo     ³ Autor ³ Erika Kanamori   ³ Data ³ 28/12/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Exibir descricao de Estado, Municipio e Bairro.			³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Peru                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RetUbigeo(cCpoCEP,cCpoEST,cCpoMUN,cCpoBAI)
Local aTabUbiGeo 	:= {}
Local nAux			:= 1
Local nPosTab		:= 0
Local lRet			:= .F.

DEFAULT cCpoCEP := "RA_CEP"
DEFAULT cCpoEST := "RA_DEPARTA"
DEFAULT cCpoMUN := "RA_MUNICIP"
DEFAULT cCpoBAI := "RA_BAIRRO"

	fCarrTab( @aTabUbiGeo, "S022", Nil)

	If ( Len(aTabUbiGeo) >= 1 )
	    nAux := 1
		While ( nAux <= Len(aTabUbiGeo) )
	        If ( aTabUbiGeo[nAux,1] == "S022" .And. aTabUbiGeo[nAux,5] == SubStr(M->(&(cCpoCEP)),1,2) .And. ;
	        	aTabUbiGeo[nAux,6] == SubStr(M->(&(cCpoCEP)),3,2) .And. aTabUbiGeo[nAux,7] == SubStr(M->(&(cCpoCEP)),5,2) )

	    		M->(&(cCpoBAI)) := aTabUbiGeo[nAux,8]

	    		nPosTab:= fPosTab("S021", SubStr(M->(&(cCpoCEP)),1,2), "=", 4, SubStr(M->(&(cCpoCEP)),3,2), "=", 5)
	    		If nPosTab > 0
	    			M->(&(cCpoMUN)) := fTabela("S021", nPosTab, 6 )
	       		EndIf

	       		nPosTab:= fPosTab("S020", SubStr(M->(&(cCpoCEP)),1,2), "=", 4 )
	       		If nPosTab > 0
	    			M->(&(cCpoEST)) := fTabela("S020", nPosTab, 5 )
	    		EndIf

	    		nAux := LEN(aTabUbiGeo)
	    		lRet:= .T.
	    	EndIf
	    	nAux++
	    End
	EndIf

Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RaSalPER      ³ Autor ³ Ademar Fernandes ³ Data ³ 17/11/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Valida o campo RA_SALARIO qdo RA_TIPOSAL = 2 (Integral).	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 					                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RaSalPER()
Local lRet  := .T.
Local n2UIT := 0

	If M->RA_TIPOSAL == "2"

		n2UIT := (FTABELA("S002", 01, 04) * 2)

		If M->RA_SALARIO < n2UIT

			lRet := .F.
			Help(,,STR0076,,OemToAnsi(STR0165),1,0) // "Salario tem que ser maior que 2 UIT !","Atencao !!!"

		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ VldRADtPER   ³Autor³ Ademar Fernandes            ³ Data ³ 22/11/09 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao dos campos das datas da pasta de Contrato.               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Peru                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ cCampo = campo de data inicio/data vim 							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function VldRADtPER(cCampo)
Local nDiasExp  := 0
Local cTipoCo	:= M->RA_TIPOCO
Local nRenova 	:=0
Local nDiasMin	:= 0
Local nDiasMax 	:= 0
Local lRet := .T.

	If !(cPaisLoc $ "PER/COL")
		Return(.T.)
	EndIf

	M->RA_RENOVA := "N"
	If M->RA_TPCONTR == "2" .And. !Empty(cTipoCo)  //# Contrato determinado
		If cPaisLoc='PER'
			nDiasExp := Val(fDescRCC("ST12",cTipoCo,1,2,53,4))
			nRenova := Val(fDescRCC("ST12",cTipoCo,1,2,65,4))
			nDiasMin := Val(fDescRCC("ST12",cTipoCo,1,2,57,4))
			nDiasMax := Val(fDescRCC("ST12",cTipoCo,1,2,61,4))
		Else
			If cPaisLoc='COL'
				nDiasExp := Val(fDescRCC("S018",cTipoCo,1,2,53,4))
				nRenova	:=	Val(fDescRCC("S018",cTipoCo,1,2,65,4))
				nDiasMin := Val(fDescRCC("S018",cTipoCo,1,2,57,4))
				nDiasMax := Val(fDescRCC("S018",cTipoCo,1,2,61,4))
			endif

		EndIf

		If nRenova<>0
			M->RA_RENOVA:='S'
		Else
			M->RA_RENOVA:='N'
		EndIf
		M->RA_VCTOEXP:= M->RA_DATAINI + nDiasExp
	EndIf

	If cCampo == "RA_DATAINI" .and. Empty(M->RA_DATAINI)
			Aviso(OemToAnsi(STR0076), OemToAnsi(STR0108), {OemToAnsi(STR0077)})	// "Atencao!"###"Data Inicio de Contrato deve ser Preenchida"###"OK"
			lRet := .F.
	EndIf

	If M->RA_TPCONTR == '2' //# Contrato determinado
		If cCampo == "RA_DATAFIM"
			If Empty(M->RA_DATAFIM)
				Aviso(OemToAnsi(STR0076), OemToAnsi(STR0110), {OemToAnsi(STR0077)})  // "Atencao!"###"Contrato de Termino Fixo deve ter data fim preenchida"###"OK"
				lRet := .F.
			Else
				nDias := (M->RA_DATAFIM - M->RA_DATAINI)+1

				If M->RA_DATAFIM <= M->RA_DATAINI
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0151), {OemToAnsi(STR0077)})//  "Atencao!"###"Contrato de Termino Fixo deve ter data fim posterior a Data Inicio"###"OK"
					lRet := .F.
				EndIf
				If M->RA_DATAFIM > (M->RA_DATAINI + nDiasMax - 1)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0119), {OemToAnsi(STR0077)})//  "Atencao!"###"Data Final deve ser inferior ao maximo de dias do Tipo de Contrato"###"OK"
					lRet := .F.
				EndIf
				If M->RA_DATAFIM < (M->RA_DATAINI + nDiasMin - 1)
					Aviso(OemToAnsi(STR0076), OemToAnsi(STR0119), {OemToAnsi(STR0077)})//  "Atencao!"###"Data Final deve ser superior ao minimo de dias do Tipo de Contrato"###"OK"

					lRet := .F.

				EndIf
			EndIf
		EndIf
	 EndIf
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ fRetCidEstPer ³ Autor ³ Alceu Pereira	          ³ Data ³ 03/03/10 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Retorna por referencia a descricao - Estado - Cidade - Municipio.  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Peru	                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fRetCidEstPer (cBaiPer, cMunPer, cEstPer)
Local aTabUbiGeo 	:= {}
Local nAux			:= 1
Local nPosTab		:= 0
Local lRet			:= .F.

	fCarrTab( @aTabUbiGeo, "S022", Nil)

	If ( Len(aTabUbiGeo) >= 1 )
	    nAux := 1
		While (nAux <= Len(aTabUbiGeo))
	        If ( aTabUbiGeo[nAux,1] == "S022" .And. aTabUbiGeo[nAux,5] == SubStr(SRA->RA_CEP,1,2) .And. aTabUbiGeo[nAux,6] == SubStr(SRA->RA_CEP,3,2) .And. aTabUbiGeo[nAux,7] == SubStr(SRA->RA_CEP,5,2) )
	    		cBaiPer := aTabUbiGeo[nAux,8]

	    		nPosTab:= fPosTab("S021", SubStr(SRA->RA_CEP,1,2), "=", 4, SubStr(SRA->RA_CEP,3,2), "=", 5)
	    		If nPosTab > 0
	    			cMunPer := fTabela("S021", nPosTab, 6 )
	       		EndIf

	       		nPosTab:= fPosTab("S020", SubStr(SRA->RA_CEP,1,2), "=", 4 )
	       		If nPosTab > 0
	    			cEstPer := fTabela("S020", nPosTab, 5 )
	    		EndIf

	    		nAux := Len(aTabUbiGeo)
	    		lRet:= .T.
	    	EndIf
	    	nAux++
	    End
	EndIf

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RetContUbigeo ³ Autor ³ Erika Kanamori           ³ Data ³  23/04/10   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Retorna descricao de Estado, Municipio ou Bairro.		               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_RELACAO - Campos RA_DEPARTA/RA_MUNICIP/RA_BAIRRO - Especifico Peru ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RetContUbigeo(cCpoCEP, cCampo)
Local aTabUbiGeo 	:= {}
Local cConteudo		:= ""
Local nAux			:= 1
Local nPosTab		:= 0

	fCarrTab( @aTabUbiGeo, "S022", Nil)

	If( Len(aTabUbiGeo) >= 1 )
	    nAux := 1
		While ( nAux <= Len(aTabUbiGeo) )
	        If ( aTabUbiGeo[nAux,1] == "S022" .And. aTabUbiGeo[nAux,5] == SubStr(&(cCpoCEP),1,2) .And. ;
	        	aTabUbiGeo[nAux,6] == SubStr(&(cCpoCEP),3,2) .And. aTabUbiGeo[nAux,7] == SubStr(&(cCpoCEP),5,2) )

	        	If Substr(cCampo, 4, len(cCampo)) == "BAIRRO"
	        		cConteudo := aTabUbiGeo[nAux,8]
	        	Else
		        	If Substr(cCampo, 4, len(cCampo)) == "MUNICIP"
			    		nPosTab:= fPosTab("S021", SubStr(&(cCpoCEP),1,2), "=", 4, SubStr(&(cCpoCEP),3,2), "=", 5)
			    		If nPosTab > 0
			    			cConteudo := fTabela("S021", nPosTab, 6 )
			       		EndIf
			       	Else
			       		nPosTab:= fPosTab("S020", SubStr(&(cCpoCEP),1,2), "=", 4 )
			       		If nPosTab > 0
			    			cConteudo := fTabela("S020", nPosTab, 5 )
			    		EndIf
					EndIf
	    		EndIf
	    		nAux := Len(aTabUbiGeo)
	    	EndIf
	    	nAux++
	    End
	EndIf

Return( cConteudo )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RAPAISPAS_WHEN ³ Autor ³ Leandro Drumond  ³ Data ³ 19/12/11 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para permitir editar ou nao o campo RA_CODPAIS.		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_WHEN - Campo RA_CODPAIS - Especifico Peru                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RAPAISPAS_WHEN()
Local lRet := .T.

	// Edita o campo RB_PAISPAS apenas se o documento for do tipo passaporte
	lRet := Iif( M->RA_TPDOCTO == "07", .T., .F. )

Return( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RAEMPTER_WHEN ³ Autor ³ Leandro Drumond  ³ Data ³ 06/01/12 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para permitir editar ou nao o campo RA_EMPTER.		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_WHEN - Campo RA_EMPTER - Especifico Peru                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RAEMPTER_WHEN()
Local lRet := .T.

	// Edita o campo RB_PAISPAS apenas se o documento for do tipo passaporte
	lRet := Iif( M->RA_TRABTER == "1" .or. M->RA_CATPDT == "4", .T., .F. )

	If !lRet
		M->RA_EMPTER := Space(11) // Zera conteudo do campo
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RAValidS043   ³ Autor ³ Leandro Drumond  ³ Data ³ 19/12/11 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para validar campos codigo do pais no passaporte.	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_CODPAIS - Especifico Peru 				³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function ValidS043()
Local cTpDoc 	:= M->RA_TPDOCTO
Local lRet 		:= .F.
Local nPos		:= fPosTab("S043", M->RA_CODPAIS, "=", 4 )

	If nPos > 0 .Or. cTpDoc <> '07'
	   	lRet:= .T.
	Else
		If ValType(lGp010Auto) == 'L' .And. lGp010Auto
			AutoGrLog(OemToAnsi( STR0212 ))
		Else
			MsgInfo( OemToAnsi( STR0212 ) )	//"Pais emissor do passaporte deve ser informado para este tipo de documento."
		EndIf
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RAValidS044   ³ Autor ³ Leandro Drumond  ³ Data ³ 19/12/11 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para validar campos codigo do pais no passaporte.	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_TPFORM - Especifico Peru               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RAValidS044()
Local lRet 		:= .F.
Local nPos		:= fPosTab("S044", M->RA_TPFORM, "=", 4 )
Local cTpDoc 	:= M->RA_CATFUNC

	If nPos > 0 .Or. cTpDoc <> 'E'
	   	lRet:= .T.
	EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ RAS045Valid   ³ Autor ³ Leandro Drumond  ³ Data ³ 06/01/12 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para validar campos da tabela empleadores.			³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ X3_VALID - Campo RA_EMPTER - Especifico Peru               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RAS045Valid()
Local cCatPdt 	:= M->RA_CATPDT
Local cTrabTer	:= M->RA_TRABTER
Local lRet 		:= .F.
Local nPos		:= fPosTab("S045", M->RA_EMPTER, "=", 6 )

	If nPos > 0 .Or. ( cCatPdt <> '4' .And. cTrabTer <> '1' )
	   	lRet:= .T.
	Else
		If ValType(lGp010Auto) == 'L' .And. lGp010Auto
			AutoGrLog(OemToAnsi( STR0213 ))
		Else
			MsgInfo( OemToAnsi( STR0213 ) )	//"RUC do empregador deve ser informado para funcionarios que trabalham em terceiros ou com categoria PDT igual a '4'"
		EndIf
	EndIf

Return( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ Gpea010PDT    ³ Autor ³ Leandro Drumond  ³ Data ³ 26/12/11 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Funcao para validar os campos do PDT.		   				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010  - Especifico Peru			                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpea010PDT()
Local lRet := .T.

	lRet := ValidS043() .and. RAS045Valid()

Return( lRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³ ValidId       ³ Autor ³ Raquel Hager     ³ Data ³ 23/04/12 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³ Validacao de campo RA_CIC.				   				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA010 - Especifico Rep. Dominicana                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function ValidId(cId)
Local aArea   	:= GetArea()
Local lRet 		:= .T.
Local cMsgAlert	:= ""

	DbSelectArea("SRA")
	DbSetOrder( 5 )

	If DbSeek( xFilial( "SRA" ) + cId )
		cMsgAlert := OemToAnsi(STR0214) 		// "Este numero de identificacao ja existe para o funcionario: "
		cMsgAlert += SRA->RA_FILIAL + " / " + SRA->RA_MAT  + " / " + AllTrim(SRA->RA_NOME) + "."
		cMsgAlert += OemToAnsi(STR0215)			// "Deseja confirmar a inclusão?

		If !MsgYesNo(cMsgAlert ,OemToAnsi(STR0076))
			lRet := .F.
		EndIf
	EndIf

	DbSetOrder(1)

	RestArea(aArea)

Return( lRet )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³fSelecCamposSRA ³ Autor ³ Emerson Campos  ³ Data ³23/07/02  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Enchoice para escolha do SX3 para a ficha                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GPEA010                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fSelecCamposSRA(lTela)
Local cFile			:= "COPIACPOSSRA.FCH"
Local cBuffer
Local cDet
Local nHdl
Local n
Local nOpt			:= 0
Local nTam
Local aDicBkp
Local aCpoNAlt
Local oFont3
Local oFont
Local oFont06
Local oBtnMarcTod
Local oBtnDesmTod
Local oBtnInverte
Local oGroup1
Local bNIL			:= { || NIL }
Local bSvVK_F4		:= bNIL
Local bSvVK_F5		:= bNIL
Local bSvVK_F6		:= bNIL
Local nY
Local cOk			:= ""
Local aDicioT		:= {}
Local cCpoNoShow	:= ""
Local cFolderNoShow	:= ""
Local aRetCoords	:= {}
Local lItemClVl 	:= SuperGetMv( "MV_ITMCLVL", .F., "2" ) $ "1*3"
Local lFile			:= If(File("COPIACPOSSRA.FCH"), .T., .F.)
Local aDicFch		:= fReadFile()

Private l1Elem		:= .F.
Private oAgrup
Private nCampo		:= 0
Private nAgrup		:= 01

Default lTela		:= .T.

	If cPaisLoc == "RUS"
		cCpoNoShow	:= 'RA_FILIAL/RA_MAT/RA_ADMISSA/RA_TIPOADM/RA_PROCES/RA_DEMISSA/RA_CATFUNC/RA_TIPOPGT/RA_SITFOLH'
		cFolderNoShow	:= "5/H/I/J/K"
	ElseIf cPaisLoc == "PAR"
		cCpoNoShow	:= 'RA_FILIAL/RA_MAT/RA_ADMISSA/RA_DEMISSA/RA_ALTNOME/RA_ALTNASC/RA_ALTCP/RA_ALTEND/RA_BITMAP/RA_ADMISSA/RA_ANTEAUM/RA_CATFUNC/RA_CODFUNC/RA_DATAALT/RA_DEMISSA/RA_DESCFUN/RA_DTREC/RA_FECAUM/RA_SALARIO/RA_SALDIAA/RA_SALMES/RA_SALMESA/RA_SITFOLH/RA_TABELA /RA_TABELA /RA_TIPOADM/RA_TIPOALT/RA_TIPOEST/RA_TIPOFIN'
		cFolderNoShow	:= "5/9"  // Control de Reloj, Cargos y Salarios y Contratos
	Else
		cCpoNoShow	:= 'RA_FILIAL/RA_MAT/RA_ADMISSA/RA_DEMISSA/RA_ALTNOME/RA_ALTNASC/RA_ALTCP/RA_ALTEND/RA_BITMAP'
		cFolderNoShow	:= "2/5/7" // Funcionais, Controle de Ponto e Cargos e Salarios
	EndIF

	If Type("lTela") != "C"
		lTela := .T.
	Endif

	If Type("lGPEA011") != "U"
		If lGPEA011
			lTela := .T.
		Endif
	Endif

	//--Monta o Array com os Campos do SX3 e quando usado marca com x
	SX3->(dbSetOrder(1))
	SX3->(dbSeek("SRA"))
	While SX3->(! Eof()) .And. SX3->X3_ARQUIVO = 'SRA'
		uCampo := SX3->X3_CAMPO
		If Alltrim(uCampo) $ cCpoNoShow .or. ;
		AllTrim(SX3->X3_FOLDER) $ cFolderNoShow .or. ;
		(__lPyme	.and. SX3->X3_PYME="N" )
			SX3->(dbSkip())
			loop
		Endif

		lIncItClVl	:= .T.
		// Remove ou insere os campos RA_ITEM e RA_CLVL conforme o conteudo do paramentro MV_ITMCLVL
		If ! lItemClVl
			If AllTrim(SX3->X3_CAMPO) == "RA_ITEM" .OR. AllTrim(SX3->X3_CAMPO) == "RA_CLVL"
				lIncItClVl	:= .F.
			EndIf
		EndIf

		nCampo := nCampo + 1
		If X3USO(SX3->X3_USADO)
			If lIncItClVl
				If !Empty(aDicFch)
					nPos := Ascan(aDicFch,{ |x| AllTrim(Subs(x,36,10)) = Alltrim(SX3->X3_CAMPO) })
					If nPos > 0
						cOk	:= Subs(aDicFch[nPos],28,3)
					EndIf
				Else
					cOk	:= "[X]"
				EndIf
				If cPaisLoc=="BRA"
					Aadd(aDicioT, X3Titulo()+Space(14)+CHR(179)+cOk+Space(5)+SX3->X3_CAMPO+Space(3)+STRZERO(SX3->X3_TAMANHO,3)+STRZERO(SX3->X3_DECIMAL,2)+ strzero(nAgrup,2)+ Strzero(nCampo,3) )
				Else
					If X3USO(SX3->X3_USADO)
						Aadd(aDicioT, X3Titulo()+Space(14)+CHR(179)+cOk+Space(5)+SX3->X3_CAMPO+Space(3)+STRZERO(SX3->X3_TAMANHO,3)+STRZERO(SX3->X3_DECIMAL,2)+ strzero(nAgrup,2)+ Strzero(nCampo,3) )
					Endif
				Endif
			EndIf
		EndIf
		SX3->(dbSkip())
	Enddo

	aDicBkp 		:= aClone(aDicioT)

	INCLUI = .F.

	oOk := LoadBitmap( GetResources(), "Enable" )
	oNo := LoadBitmap( GetResources(), "LBNO" )

	// Monta array com os campos da selecao, desconsiderando
	// aqueles que sempre aparecerao na tela.
	aDicioW := {}
	Aeval(aDicioT,{ |x| If(!(ALLTRIM(substr(x,36,10))$"RA_FILIAL/RA_MAT/RA_ADMISSA/RA_DEMISSA/RA_ALTNOME/RA_ALTNASC/RA_ALTCP/RA_ALTEND/RA_BITMAP"),;
									Aadd(aDicioW,{Subs(x,1,16),; 				//Descricao Campo
									If (Subs(x,29,1) = "X",.t.,.f.),;			//usado/nao usado
									Subs(x,36,18) , ;                          	//Campo
									Subs(x,54,2), ;						   		//Agrupamento
									Subs(x,56,3) }),"" ) })        				//Ordem

	// Monta array com os campos que sempre aparecerao na tela,
	// mesmo que nao tenham sido selecionados.
	aCpoNAlt:= {}

	/*

	No momento não foi identificado a necessidade desta rotina

	Aeval(aDicioT,{ |x| If(ALLTRIM(substr(x,36,10))$"",;
									Aadd(aCpoNAlt,{Subs(x,1,16),; 				//Descricao Campo
									.T.,;										//usado/nao usado
									Subs(x,36,18) , ;                          	//Campo
									Subs(x,54,2), ;						   		//Agrupamento
									Subs(x,56,3) }),"" ) })        				//Ordem
	*/

	cTitulo := oEmToAnsi(STR0249)   //"Dicionario"

	SETAPILHA()

	If lTela
	DEFINE FONT oFont3  NAME "Arial" BOLD
	DEFINE FONT oFont   NAME "Arial" SIZE 0,-11
	DEFINE FONT oFont06 NAME "Arial" SIZE 01,01

	// Monta as Dimensoes dos Objetos
	aRetCoords := RetCoords(1,2,0,120)
	//-- Atualiza Array com os campos agrupados
	DEFINE MSDIALOG oDlg4 FROM 0,0 TO 350,500 TITLE cTitulo PIXEL

		@ aRetCoords[1][1],aRetCoords[1][2] Group oGroup1 To aRetCoords[2][1]+20,240 PROMPT OemToAnsi(STR0250) Of oDlg4 Pixel COLOR CLR_BLUE  //"Seleção de Campos"

		//--ListBox do Dicionario de dados   25,30,120,150
		@ aRetCoords[1][1]+10,aRetCoords[1][2]+10 LISTBOX oUso;
				FIELDS HEADER STR0251,STR0252,Left(STR0253,5),STR0254;   //"U."###"Campos"###"Agrupamento"###"Ordem"
				SIZE 210,100 ;
				ON DBLCLICK (aDicioW:= fG265Troca(aDicioW,,oUso:nAT),oUso:Refresh(.f.) ) ;
				OF oDlg4 PIXEL
				oUso:SetArray(aDicioW)
				oUso:bLine := { || {if(aDicioW[oUso:nAt,2],oOk,oNo),OemToAnsi(aDicioW[oUso:nAt,1]),aDicioW[oUso:nAt,4],aDicioW[oUso:nAt,5] }}
				oUso:Refresh()

		//--  Botoes Usado/Nao Usado
		@ aRetCoords[2][1],aRetCoords[2][2]+10 BUTTON oBtnMarcTod	PROMPT OemToAnsi(STR0255) FONT oFont06	SIZE 65,13 OF oDlg4	PIXEL  ; //"Marca Todos <F4>"
	      ACTION (aDicioW:=fG265Troca(aDicioW,"M"),oUso:Refresh())
	      bSvVK_F4 := SetKey(VK_F4,{ || (aDicioW:=fG265Troca(aDicioW,"M"),oUso:Refresh()) } )

		@ aRetCoords[2][1],aRetCoords[2][2]+80 BUTTON oBtnDesmTod	PROMPT OemToAnsi(STR0256) FONT ofont06	SIZE 65,13 OF oDlg4	PIXEL ; //"Desmarca Todos <F5>"
		  ACTION (aDicioW:=fG265Troca(aDicioW,"D"),oUso:Refresh())
	   	  bSvVK_F6 := SetKey(VK_F5,{ || (aDicioW:=fG265Troca(aDicioW,"D"),oUso:Refresh()) } )

		@ aRetCoords[2][1],aRetCoords[2][2]+150 BUTTON oBtnInverte	PROMPT OemToAnsi(STR0257) FONT ofont06	SIZE 65,13 OF oDlg4	PIXEL ; //"Inverte Seleo <F6>"
		  ACTION (aDicioW:=fG265Troca(aDicioW,"I"),oUso:Refresh())
		  bSvVK_F6 := SetKey(VK_F6,{ || (aDicioW:=fG265Troca(aDicioW,"I"),oUso:Refresh()) } )

	ACTIVATE MSDIALOG oDlg4 CENTERED ON INIT Enchoicebar(oDlg4,{|| nOpt := 1,oDlg4:End()},{|| nOpt := 3,oDlg4:End()})
	EndIf

	SETAPILHA()

	SetKey( VK_F4	,	IF( Empty( bSvVK_F4 ) , bNIL , bSvVK_F4 ) )
	SetKey( VK_F5	,	IF( Empty( bSvVK_F5 ) , bNIL , bSvVK_F5 ) )
	SetKey( VK_F6	,	IF( Empty( bSvVK_F6 ) , bNIL , bSvVK_F6 ) )

	//--volta o Array da tela para o aDicioT para ser gravado
	If nOpt == 1 .OR. !lTela
		aDicioT := {}

		Aeval(aDicioW,{ |x| Aadd(aDicioT,Subs(x[1],1,12)+Space(14)+CHR(179)+"["+If (x[2],"X"," ")+"]"+Space(5)+x[3]+x[4]+x[5] )})

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ajusta o tamanho do array de tela para serem inseridos ³
		//³os campos que sempre terao que aparecer.                ³
		//³ Estes campos serao inseridos nos primeiros elementos do³
		//³array de tela.                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nTam := Len(aCpoNAlt)+len(aDicioT)
		ASize(aDicioT,nTam)
		For nY := 1 to Len(aCpoNAlt)
			Ains(aDicioT,1)
		Next

		nY := 1
		nTam := len(aCpoNAlt)
		//-- Inclui no array de tela os campos que sempre aparecerao em tela
		For n := 1 to nTam
			aDicioT[n]:= Subs(aCpoNAlt[nY,1],1,12)+Space(14)+CHR(179)+"["+If (aCpoNAlt[nY,2],"X"," ")+"]"+Space(5)+aCpoNAlt[nY,3]+aCpoNAlt[nY,4]+aCpoNAlt[nY,5]
			nY++
		Next

	Endif

	DeleteObject(oOk)
	DeleteObject(oNo)

	//--Quando confirma grava o Arquivo .fch
	If nOpt == 1 .OR. !lTela
		If lFile
			nHdl := fOpen(cFile , FO_WRITE + FO_SHARED )
		Else
			nHdl := MSFCREATE(cFile,FC_NORMAL)
		EndIf

		If nHdl == -1   .or. fError() # 0
			Help(" ",1,"SAVECONS")
		Else
			For n=1 to Len(aDicioT)
				cDet	:= aDicioT[n]+Chr(13)+Chr(10)
				fWrite(nHdl,cDet,Len(cDet) )
			Next
		EndIf
		FClose(nHdl)    //Fecha arq.binario e grava no disco
	Else
		aDicioT	:= Aclone(aDicBkp)
	EndIf

Return

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³fReadFile       ³ Autor ³ Emerson Campos  ³ Data ³23/07/02  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Enchoice para escolha do SX3 para a ficha                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GPEA010                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fReadFile()
Local cFile  	:= "COPIACPOSSRA.FCH"
Local aDicFch 	:= {}
Local n
Local nTamArq
Local nBuffer
Local cBuffer

	If File(cFile)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Le arquivo texto - Nro total de linhas     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nHdl    := Fopen(cfile,2+64)				//Abertura e gravacao e compartilhamento

		If nHdl <= 0
			return .f.
		EndIf
		cString	:= FReadStr(nHdl,60)
		nBuffer	:= 60
		nTamArq := fSeek(nHdl,0,2)

		fSeek(nHdl,0,0)

		nFor 	:= nTamArq / nBuffer
		cBuffer	:= space(nBuffer)

		FRead(nHdl,@cBuffer,nBuffer)

		For n=1 to nFor
			Aadd(aDicFch,cBuffer)
			cBuffer	:= space(nBuffer)
			FRead(nHdl,@cBuffer,nBuffer)
		Next n
	EndIf
Return aDicFch


//------------------------------------------
//   FUNCOES ESPECIFICAS - ESOCIAL
//------------------------------------------


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fTpDeficie³ Autor ³ Glaucia M.		    ³ Data ³ 13/08/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Selecionar Informacao sobre Deficiencia Funcionario         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fTpDeficie()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Cadastro tabela SRA - Campo RA_PORTDEF					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fTpDeficie()
Local cTitulo:= OemtoAnsi(STR0262) //"Informacoes Deficiencia" //
Local MvPar
Local MvParDef:="1234"
Local MvParDef2:="123456"
Local lRet := .T.
Local lOpt := .F.
Local cAlias := Alias()

Static aCat2:={"1-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0264),; //Fisica
 			   "2-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0265),; //Auditiva
			   "3-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0266),; //Visual
			   "4-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0280),;	//"Mental"
			   "5-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0279),;	//"Intelectual"
			   "6-"+OemtoAnsi(STR0278)}							//"O trabalhador é reabilitado, e apto a retornar ao trabalho")}
Static nVezAdt := 0

	If Alltrim(ReadVar() )= "M->RA_PORTDEF" .And. (nVezAdt = Nil .Or. nVezAdt < 1)

		lGp010Auto  := If (Type("lGp010Auto") =="U",.F.,lGp010Auto)

		If lGp010Auto//Execucao automatica (msExecAuto)
			dbSelectArea(cAlias)
			Return(lRet)
		EndIf

		nVezAdt ++

		MvPar:=&(Alltrim(ReadVar()))		 // Carrega Nome da Variavel do Get em Questao
		mvRet:=Alltrim(ReadVar())			 // Iguala Nome da Variavel ao Nome variavel de Retorno
		// Chama funcao f_Opcoes
		lOpt := f_Opcoes(@MvPar,cTitulo,aCat2,MvParDef2,12,49,.F.)

		If lOpt
			&MvRet :=  MvPar
		EndIf
		lRet := .F.
		dbSelectArea(cAlias)

	ElseIf nVezAdt >= 1
		nVezAdt := 0
		lRet := .T.
	EndIf

	dbSelectArea(cAlias) 								 // Retorna Alias
Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fTpDeficie³ Autor ³ Glaucia M.		    ³ Data ³ 13/08/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Selecionar Informacao sobre Deficiencia Funcionario         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fTpDeficie()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Cadastro tabela SRA - Campo RA_PORTDEF					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fSXBTpDef()
Local cTitulo:= OemtoAnsi(STR0262) //"Informacoes Deficiencia" //
Local MvPar
Local MvParDef:="1234"
Local MvParDef2:="123456"
Local lRet := .T.
Local lOpt := .F.
Local cAlias := Alias()

Static aCat2:={"1-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0264),; //Fisica
 			   "2-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0265),; //Auditiva
			   "3-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0266),; //Visual
			   "4-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0280),;	//"Mental"
			   "5-"+OemtoAnsi(STR0263)+" "+OemtoAnsi(STR0279),;	//"Intelectual"
			   "6-"+OemtoAnsi(STR0278)}							//"O trabalhador é reabilitado, e apto a retornar ao trabalho")}

	If Alltrim(ReadVar() )= "M->RA_PORTDEF"

		lGp010Auto  := If (Type("lGp010Auto") =="U",.F.,lGp010Auto)

		If lGp010Auto//Execucao automatica (msExecAuto)
			dbSelectArea(cAlias)
			Return(lRet)
		EndIf


		MvPar:=&(Alltrim(ReadVar()))		 // Carrega Nome da Variavel do Get em Questao
		mvRet:=Alltrim(ReadVar())			 // Iguala Nome da Variavel ao Nome variavel de Retorno
		VAR_IXB := mvRet
		// Chama funcao f_Opcoes
		lOpt := f_Opcoes(@MvPar,cTitulo,aCat2,MvParDef2,12,49,.F.)

		If lOpt
			&MvRet :=  MvPar
			VAR_IXB := MvPar
		Else
			lRet := .F.
		EndIf
		dbSelectArea(cAlias)
	EndIf

	dbSelectArea(cAlias) 								 // Retorna Alias
Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fX7DEFFI  ³ Autor ³ Glaucia M.		    ³ Data ³ 13/08/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Gatilho ao selecionar Informacao Deficiencia Funcionario    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³fX7DEFFI()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Cadastro tabela SRA - Campo RA_TPDEFFI					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fX7DEFFI()
Local aArea	:=GetArea()
Local cTPDEFFI:= M->RA_TPDEFFI
Local cReturn:=''

	Do Case
		Case cTPDEFFI == '0'
			cReturn:='******'
		Case cTPDEFFI == '1'
			cReturn:='1*****'
		Case cTPDEFFI == '2'
			cReturn:='*2****'
		Case cTPDEFFI == '3'
			cReturn:='**3***'
		Case (cTPDEFFI == '4' .OR. cTPDEFFI == '5')
			cReturn := space(TAMSX3("RA_PORTDEF")[1])
		Case cTPDEFFI == '6'
			cReturn:='*****6'
	EndCase

    M->RA_CTPCD := IF(cReturn <> '******','1','2')                                                               
	RestArea(aArea)

Return( cReturn )


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fCondCateg³ Autor ³ Glaucia M.		    ³ Data ³ 14/08/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Gatilho para preenchimento do campo RA_CATEFD.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fCondCateg()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Cadastro tabela SRA - Campo RA_CATFUNC e   RA_VIEMRAI	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fCondCateg(nCampo)
Local aArea	:=GetArea()
Local lRet	:= .F.
DEFAULT nCampo := 1

	If EMPTY(M->RA_CATFUNC)
		If nCampo == 1 .AND. M->RA_CATFUNC $ 'EG'
			lRet:= .T.
		ElseIf nCampo == 2 .AND. M->RA_VIEMRAI=='50'
			lRet:= .T.
		EndIf
	EndIf

	RestArea(aArea)
Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fCondDefi ³ Autor ³ Glaucia M.		    ³ Data ³ 20/08/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Condicao para Gatilho para preenchimento do campo RA_PORTDEF³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fCondDefi()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Cadastro tabela SRA - Campo RA_PORTDEF  					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fCondDefi()
Local aArea	:=GetArea()
Local lRet	:= .F.

	If TAMSX3("RA_PORTDEF")[1]== 6
		lRet:=.T.
	Endif

	RestArea(aArea)
Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fGP10Nasc ³ Autor ³ Glaucia M.		    ³ Data ³ 21/08/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Validar campo data com a data de nascimento funcionario.    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fGP10Nasc()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ dCampo - Nome do campo para validacao				 	  ³±±
±±³          ³ nCampo - Titulo campo para efeito de alterta.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Validacao tabela SRA         					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fGP10Nasc(dCampo, nCampo)
Local lRet	:=	.T.
Local  cTituloCmp := ""

DEFAULT nCampo := 1
DEFAULT dCampo := Ctod("  /  /  ")

	Do Case
		Case nCampo == 1
			cTituloCmp	:= OemToAnsi(STR0268)//"Data Emissao CNH"
		Case nCampo == 2
			cTituloCmp	:= OemToAnsi(STR0269)//"Data Emissao do Registro Orgao de Classe"
		Case nCampo == 3
			cTituloCmp	:= OemToAnsi(STR0270)//"Data Expedicao RNE"
		Case nCampo == 5
			cTituloCmp  := OemToAnsi(STR0314) //Informada
	EndCase

	If !empty(dCampo) .AND. !empty(cTituloCmp)
		If (GETMEMVAR("RA_NASC")>= dCampo)
			lRet:= .F.
			Help( ,, 'Help',, OemToAnsi(STR0271)+" "+cTituloCmp+" "+OemToAnsi(STR0272) , 1, 0 ) //A data   ###"e invalida, a mesma devera ser maior que a data de nascimento do funcionario."
		EndIf
	EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fValidDoc ³ Autor ³ Glaucia M.		    ³ Data ³ 21/08/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Validar Emissao e Validade Registro de Classe.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fValidDoc()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ dData1 - Data de comparacao 1                              ³±±
±±³          ³ dData2 - Data de comparacao 2                              ³±±
±±³          ³ nCampo - Id do documento de verificacao                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Validacao tabela SRA         					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fValidDoc(dData1, dData2, nCampo)
Local lRet			:=	.T.
Local cTitloCmp1 	:= ""
Local cTitloCmp2 	:= ""

	Do Case
		Case nCampo == 1
			cTitloCmp1	:= OemToAnsi(STR0269) //"Data Emissao do Registro Orgao de Classe"
			cTitloCmp2	:= OemToAnsi(STR0276) // "Data de Validade do Registro de Orgão de Classe"
		Case nCampo == 2
			cTitloCmp1	:= OemToAnsi(STR0268) //"Data Emissão CNH"
			cTitloCmp2	:= OemToAnsi(STR0277) //"Data de Validade CNH"
	EndCase


	If empty(dData1) .OR. dData2 == Ctod("  /  /  ")
		lRet:= .F.
		Help( ,, 'Help',,OemToAnsi(STR0273)+" "+cTitloCmp1+", "+ OemToAnsi(STR0274), 1, 0 ) //"E necessario preencher o campo ## para incluir a sua data de validade."
	ElseIf dData1 >= dData2
		lRet:= .F.
		Help( ,, 'Help',, cTitloCmp2 +" "+OemToAnsi(STR0275), 1, 0 )//" e invalida, pois e menor ou igual a sua emissao."
	EndIf

Return lRet


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fGP10eSoci³ Autor ³ Glaucia M.		    ³ Data ³ 06/09/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verificar se a eSocial foi implantada versus MV_EFDAVIS.    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fGP10eSoci()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nao aplica.                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Botao Confirmar da rotina                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fGP10eSoci(nOpcy,lGp010Auto)
Return fGP10ENew(nOpcy,lGp010Auto)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fGP10vCPF ³ Autor ³ Glaucia M.		    ³ Data ³ 11/09/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Validar se existem beneficiários com o mesmo CPF funcionario³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³fGP10vCPF(cMat,cCPF) 	     							 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cCampo1 - Matricula funcionario                            ³±±
±±³          ³ cCampo1 - Numero de identificacao CPF funcionario          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Validacao campo RA_CIC       					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/

Function fGP10vCPF(cMat,cCPF)
Local aArea	:= GetArea()
Local cMsg	:= ""
Local lRet := .T.

	If !EMPTY(cMat) .AND. !EMPTY(cCPF)
		dbSelectArea("SRQ")
		SRQ->(dbSetOrder(2)) //RQ_FILIAL+RQ_MAT+RQ_CIC
		SRQ->(MSseek(FwxFilial("SRQ")+cMat+cCPF))
		If !(SRQ->( EOF() ))
			cMsg:= OemToAnsi(STR0287)+CRLF+OemToAnsi(STR0288) //"CPF Invalido"##"Existe(m) beneficiario(s) associado(s) a este funcionário com o mesmo CPF."
			Help("",1,OemToAnsi(STR0287),,cMsg,1,0)			//"CPF Invalido
			lRet := .F.
		Endif
	EndIf

	RestArea(aArea)
Return lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fGP010Estg      ºAutor  ³Equipe RH        º Data ³ 18/06/13 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao que avalia se apresenta ou não a tela de cadastro    º±±
±±º          ³Informacoes exclusivas estagiario.                          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ nOpc1-Indica origem da chamada                             º±±
±±º          ³ cCatEstag -conteudo do campo RA_CATFUNC                    º±±
±±º          ³ lAvisa - se há necessidade de emitir alterta antes de      º±±
±±º          ³          acessar o cadastro Informacoes exclusivas estágio.º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ GPEA010 - Acoes relacionas "Info Exclusivas Estágio"       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fGP010Estg(nOpc1,cCatEstag,lAvisa,lOriGrava,cCatESocial)
Local aArea			:= GetArea()
Local aKeys			:= GetKeys()
Local lExecuta		:= .F.
Local lFoiEstag		:= .F.
Local lExistMenu	:= .F.
Local lGPEA180		:= IsInCallStack("GPEA180")
Local lInclAnt		:= .F.
Local lAltAnt		:= .F.
DEFAULT cCatESocial := ""

	If ( (cCatEstag $ 'E*G') .AND. (cCatESocial $ '901|906') )
		lExecuta:= .T.
	ElseIf nOpc1 != 3 .AND. !lAvisa
		lFoiEstag 	:= fGP010FoiE()
		lExecuta	:= lFoiEstag
	EndIf

	If !lGPEA180
		lExistMenu	:= aScan(aGpea010Btn,{|x| x[4] == OemToAnsi(STR0289) }) != 0 //"Info Exclusivas Estágio"
		If lAvisa .And. lExistMenu .And. nOpc1 !=3
			lExecuta := .F.
		EndIf
	EndIf

	If lExecuta
		If nOpc1 == 3 .OR. nOpc1 == 4
			If !lGPEA180 .And. lAvisa
				Aviso(OemtoAnsi(STR0076),OemtoAnsi(STR0291)+" '"+OemtoAnsi(STR0290)+ "'"+'.',{OemtoAnsi(STR0001)}) //"Atencao" ## Como o vinculo e de estagio, apresentaremos o cadastro ## Informacoes Exclusivas do Estagio ## "OK" ##
			ElseIf lFoiEstag
				Aviso(OemtoAnsi(STR0076),OemtoAnsi(STR0292)+" '"+OemtoAnsi(STR0174)+ "'"+'.',{OemtoAnsi(STR0001)}) //"Atencao" ## "O atual vinculo do funcionario nao e de estagio, mas o mesmo ja pertenceu a este vinculo anteriormente. Assim apresentaremos o cadastro ## 'Informacoes Exclusivas do Estagio'."## "OK"
			EndIf

			If !lGPEA180 .Or. ( !IsBlind() .And. MsgYesNo(STR0317) )//"Deseja abrir o cadastro de informações exclusivas estágio ?"
				lInclAnt := IIf(Type("INCLUI")<>"U", INCLUI, .F.)
				lAltAnt	 := IIf(Type("ALTERA")<>"U", ALTERA, .F.)
				FWExecView(OemtoAnsi(STR0290), "GPEA920", MODEL_OPERATION_UPDATE,,{||.T.}) //"Informacoes Exclusivas Estagio"
				INCLUI := lInclAnt
				ALTERA := lAltAnt
			EndIf
		Else
			FWExecView(OemtoAnsi(STR0290), "GPEA920", MODEL_OPERATION_VIEW,,{||.T.}) 	//"Informacoes Exclusivas Estagio"
		EndIf
	EndIf

	RestKeys(aKeys , .T.)
	RestArea(aArea)

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fGP010FoiE      ºAutor  ³Equipe RH        º Data ³ 19/06/13 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao que avalia se o funcionario em questao, se algum dia º±±
±±º          ³possuiu a categoria estagiario (E ou G).                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ nOpc1-Indica origem da chamada                             º±±
±±º          ³ cCatEstag -conteudo do campo RA_CATFUNC                    º±±
±±º          ³ lAvisa - se há necessidade de emitir alterta antes de      º±±
±±º          ³          acessar o cadastro Informacoes exclusivas estágio.º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ GPEA010 - Acoes relacionas "Info Exclusivas Estágio"       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fGP010FoiE()
Local aArea			:= GetArea()
Local cQuery		:=""
Local lRet			:= .F.
Local cTipo			:= "('E','G') "

		cQuery := "SELECT R7_CATFUNC "
		cQuery += "FROM "+ RetSqlName("SR7") + " SR7 "
		cQuery += "WHERE R7_FILIAL = '" + SRA->RA_FILIAL  + "' AND "
		cQuery += 	"R7_MAT =  '" + SRA->RA_MAT + "' AND "
		cQuery += 	"R7_CATFUNC IN " + cTipo
		cQuery += "   AND SR7.D_E_L_E_T_ = ' ' "
		cQuery := ChangeQuery( cQuery )

		If Select("QSR7")>0
			DbSelectArea("QSR7")
			QSR7->(DbCloseArea())
		Endif

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),"QSR7",.F.,.T.)
		lRet:= ("QSR7")->(!Eof())


	RestArea(aArea)
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fGP10Taf  ³ Autor ³ Alessandro Santos     | Data ³ 23/04/14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verificar campos de integracao com TAF. MV_INTTAF.		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fGP10Taf()											 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nao aplica.                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Botao Confirmar da rotina                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fGp10Taf(nOpc,aRotAuto,cCodUnico)
Return fGp10TafNew(nOpc,aRotAuto,cCodUnico)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ±±
±±³Funcao    ³EmployeeMsg   ³ Autor ³ Alberto M.     ³ Data ³ 27/01/15 ³   ±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Rotina para realizar a integracao das mensagens de status  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Integracao via mensagem unica.                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function EmployeeMsg(;
							nSitSalAnt,;//Salario anterior para verificar se houve alteracao salarial.
							cSitFolAnt;//Situacao do funcionario antes da alteracao, para verificar se houve alteracao na situacao do funcionario.
						    )
Local aRet	:= {}
Local lRet	:= .T.

	//EmployeeHistorySalaryPosition.
	If lIntegDef .And. (nSitSalAnt != SRA->RA_SALARIO)
		dDataAlt := GetMemVar( "RA_DATAALT" )
		SetRotInteg("GPEA250")
		aRet := FwIntegDef("GPEA250")
		If aRet <> nil .And. !Empty(aRet)
			lRet := aRet[1]
		EndIf
	EndIf

	//EmployeeSituation.
	If lIntegDef .And. lRet .And. (cSitFolAnt != SRA->RA_SITFOLH)
		SetRotInteg("GPEM040")
		aRet := FwIntegDef("GPEM040")
		If aRet <> nil .And. !Empty(aRet)
			lRet := aRet[1]
		EndIf
	EndIf

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fTemRHK         ºAutor  ³Equipe RH      º Data ³ 09/04/2015 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao que avalia se o funcionario em questao, tem registro º±±
±±º          ³de Plano de Saúde Ativo - Tabela RHK.                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ GPEA010                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fTemRHK()
Local aArea		:= GetArea()
Local lRet  	:= .T.
Local cMat		:= GetMemVar( "RA_MAT" )
Local cPerRef	:= AnoMes(dDataBase)
Local cPerIni	:= ""
Local cPerFim	:= ""

	If GetMemVar( "RA_PLSAUDE" ) = "2"
		DbSelectArea("RHK")
		DbSeek( xFilial( "RHK" , xFilial("SRA") ) + cMat )
		If RHK->RHK_FILIAL == SRA->RA_FILIAL .And. RHK->RHK_MAT == cMat
			cPerIni := Right(RHK->RHK_PERINI, 4) + Left(RHK->RHK_PERINI, 2)
			cPerFim := Right(RHK->RHK_PERFIM, 4) + Left(RHK->RHK_PERFIM, 2)
			IF (cPerRef >= cPerIni .And. (Empty(RHK->RHK_PERFIM) .Or. cPerRef <= cPerFim ))

				Help("",1,OemtoAnsi(STR0076),,OemtoAnsi(STR0303),1,0) //"O funcionário possui Plano de Saúde Ativo, não é possível alterar o campo 'Pl.Saúde' para 'Não'
				lRet:= .F.
			Endif
		Endif
	Endif

	RestArea(aArea)
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³QryTpDoc ³ Autor ³ Totvs	    ³ Data ³ 23/07/2013           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Retornar qual o Tipo de Documento da Tabela Ax. S101       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function QryTpDoc(cCatfunc)
Local cQuery  := ""
Local cRet    := ""
Private lSubsTp := "MSSQL" $ AllTrim( Upper( TcGetDb() ) ) .Or. AllTrim( Upper( TcGetDb() ) ) == 'SYBASE'

	cQuery  += "SELECT "
	If lSubsTp
		cQuery += " SUBSTRING(RCC_CONTEU,33,3) DOCPADRAO,SUBSTRING(RCC_CONTEU,36,3)DOCMEMBRO "
	Else
		cQuery += " SUBSTR(RCC_CONTEU,33,3) DOCPADRAO,SUBSTR(RCC_CONTEU,36,3)DOCMEMBRO "
	EndIf
	cQuery += " FROM " + RetSqlName("RCC") +  " RCC "
	cQuery += " WHERE RCC.RCC_CODIGO = 'S101' "
	cQuery += " AND RCC.RCC_FILIAL = '"+FwxFilial("RCC")+"'"
	cQuery += " AND RCC.D_E_L_E_T_ = ' ' "
	If lSubsTp
		cQuery += " AND SUBSTRING(RCC.RCC_CONTEU,1,2)= '26' "
	Else
		cQuery += " AND SUBSTR(RCC.RCC_CONTEU,1,2)= '26' "
	EndIf
	cQuery = ChangeQuery(cQuery)
	DbUseArea(.T.,'TOPCONN',TCGENQRY(,,cQuery),'TRBRCC',.T.,.T.)

	If cCatfunc = '1'
		cRet := Alltrim(TRBRCC->DOCMEMBRO)
	Else
		cRet := Alltrim(TRBRCC->DOCPADRAO)
	EndIf

	TRBRCC->(DbCloseArea())

Return cRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³GPE10LIMPA ³ Autor ³ Totvs	    ³ Data ³ 30/09/2013       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Limpa campos na inclusao do campo RA_CATFUNC               ³±±
±±           ³ Chamada pelo X3_VALID do RA_CATFUNC                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GPE10LIMPA()
Private lGestPubl 	:= IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

	// Se for Gestao Publica
	If 	lGestPubl .AND. (!Empty(M->RA_REGIME) .AND. M->RA_REGIME == '2')
		M->RA_SALARIO 	:= 0
		M->RA_TABELA	:= Space( TamSX3("RA_TABELA")[1] )
		M->RA_TABNIVE	:= Space( TamSX3("RA_TABNIVE")[1] )
		M->RA_TABFAIX	:= Space( TamSX3("RA_TABFAIX")[1] )
		M->RA_CODFUNC	:= Space( TamSX3("RA_CODFUNC")[1] )
		M->RA_CARGO   := Space( TamSX3("RA_CARGO")[1] )
	Endif

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³VldPensi ³ Autor ³ Totvs	    ³ Data ³ 20/11/2013         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida os campos Tipos do Pensionista e  Salario           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function VldPensi()

Help(,,'HELP',,OemToAnsi(STR0246),1,0) //"Os Campos Obrigatórios (Tipo do Pensionista) e (Salário) não foram preenchidos"

Return .F.

/*/{Protheus.doc} fGP10ValBlq
Verifica se CPF está bloqueado para reintegração.
@Author Cícero Alves
@Since 06/01/2016
@Version P12
/*/
Static Function fGP10ValBlq()

Local aArea       := SRA->(GetArea())
Local lBloqAdm	  := SRA->(ColumnPos("RA_BLOQADM")) > 0
Local lRet        := .T.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Atualizacao do Help do campo RG_DTGERAR - Data da Geracao da Rescisao ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !Empty(M->RA_CIC) .And. SRA->RA_CIC <> M->RA_CIC .And. !IsInCallStack ("GPEA810GRV")

		dbSelectArea("SRA")
		dbSetOrder(RetOrder("SRA","RA_CIC + RA_FILIAL + RA_MAT"))
		IF dbSeek(M->RA_CIC)
			While !EOF() .And. M->RA_CIC == SRA->RA_CIC  .AND. SRA->RA_SITFOLH == 'D'
				If lBloqAdm .and. SRA->RA_BLOQADM == "1"
					Help( ,, STR0309,, STR0310 + SRA->RA_FILIAL + STR0311 + SRA->RA_MAT + STR0417, 1, 0 )
					lRet := .F.
					Exit
				ElseIf !Empty(SRA->RA_FECREI)
					Help( ,, STR0309,, STR0310 + SRA->RA_FILIAL + STR0311 + SRA->RA_MAT + STR0312, 1, 0 )
					lRet := .F.
					Exit
				Endif
				dbSkip()
			EndDo
		EndIf
	EndIf

	RestArea(aArea)

Return lRet

/*/{Protheus.doc} fvldADM
Verifica se pode alterar a data de admissao
@Author Flavio Correa
@Since 30/03/2016
@Version P12
/*/
Static function fvldADM()
Local aArea	:= GetArea()
Local lRet 	:= .T.

	If SRA->RA_ADMISSA	<> M->RA_ADMISSA .And. SRA->RA_CATFUNC != "A"
		dbSelectArea("SRD")
		SRD->(dbSetOrder(1))
		If SRD->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT))
			Help(' ',1,"GPPERADM",,OemToAnsi( STR0313 ) , 1 , 0) //"Funcionário já possui calculo não pode alterar a data de admissão"
			lRet := .F.
		Else
			lRet := .T.
		EndIf
	EndIf

	RestArea(aArea)
Return lRet


/*/{Protheus.doc} f010CBO
Gatilho para a atualizar o CBO quando preenchido a função.
@type function
@author Victor Andrade
@since 11/05/2016
@version 1.0
@return ${return}, ${return_description}
@example
(examples)
@see (links_or_references)
/*/
Function f010CBO()

Local cCbo	  := ""
	cCbo := SRJ->RJ_CODCBO

Return( AllTrim(cCbo) )

/*/{Protheus.doc} fSalWhen

Funcao executada pela propriedade When do campo RA_SALARIO
devido a limitada de caracteres para esse campo foi criada essa
funcao para acumular as validações necessárias para este
campo

@author raquel.andrade
@since 09/06/2016
@version P12 R7
/*/
Function fSalWhen()
	Local lRet	:= .T.
	lRet	:= Iif(fUsaGFP().and.M->RA_CATFUNC $ "012356",.F.,.T.) .And. Iif(nModulo == 20 .AND. !IsInCallStack( "RSPM001"),.F.,.T.)
	If lRet
		lRet := M->RA_TPCONTR <> "3" //Se for contrato intermitente não permite a alteração do campo
	EndIf
Return lRet

/*/{Protheus.doc} fRACodUnic
 Retorna o valor a ser gravado no campo RA_CODUNIC
@author PHILIPE.POMPEU
@since 12/09/2016
@version P12
@return cCodUnic, caractere,valor do código único do funcionário
/*/
Function fRACodUnic(lTipo)

Local cCodUnic	:= ""
Local nTamCod	:= TamSx3("RA_CODUNIC")[1]

Default lTipo := .T.

	/*cEmpAnt sempre vai guardar o código da empresa, independente se usa gestão corporativa ou não.*/
	cCodUnic := cEmpAnt

	If lIntTaf .Or. lMiddleware
		if lTipo
			cCodUnic += SRA->(RA_FILIAL + RA_MAT)
		else
			cCodUnic += cfilant + Iif(Empty(M->RA_MAT), getMemVar("RA_MAT"), M->RA_MAT)
		Endif
	else
		cCodUnic += SRA->(RA_FILIAL + RA_MAT)
	Endif

	cCodUnic += dToS(Date())
	cCodUnic += StrTran(Time(),':')

	//Limita ao tamanho do campo para nao gerar problema na integracao
	If Len(cCodUnic) > nTamCod
		cCodUnic := SubStr( cCodUnic, 1, nTamCod )
	EndIf

Return cCodUnic

/*/
ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»
ºPrograma  ³ ValidRUT º Autor ³ Jonathan Glez      º Data ³ 06/07/2016  º
ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹
ºDesc.     ³ Función para validar la RUT de empleado, para que no se    º
º          ³ permite ingresar RUT duplicadas. uso en RA_CIC y Gpea010Mntº
ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹
ºUso       ³ ValidRUT(nOpc)                                             º
ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹
ºParametros³ nExp1 := Tipo de operación.                                º
ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
/*/
Function ValidRUT(nOpc)
Local aArea    := GetArea()
Local lRet     := .T.
Local cCIC     := IIF( !empty( GetMemVar( "RA_CIC" ) ) , GetMemVar( "RA_CIC" ) , M->RA_CIC)
Local cMatEmp  := IIF( !empty( GetMemVar( "RA_MAT" ) ) , GetMemVar( "RA_MAT" ) , M->RA_MAT)

	dbSelectArea("SRA")
	SRA->( DbSetOrder(19) ) //L = RA_CIC+RA_FILIAL+RA_MAT
		IF SRA->( DbSeek( cCIC ) )
			IF (nOpc == 3 .OR.  nOpc == 7) .AND. SRA->RA_SITFOLH # "D"  //incluir y copiar
			             //"RUT ya registrado con la matricula : "  ####  en la sucursal:  " ####"RUT Duplicado"
				MsgAlert(STR0319 + ALLTRIM(SRA->RA_MAT) + STR0320 + ALLTRIM(SRA->RA_FILIAL) , UPPER(STR0318))
				lRet := .F.
			ENDIF
			IF nOpc == 4 .AND. cCIC == SRA->RA_CIC //Valida la reactivacion y modificacion del empleado.
				While SRA->(!EOF()) .AND. cCIC == SRA->RA_CIC .AND. lRet
					If cMatEmp <> SRA->RA_MAT .AND. SRA->RA_SITFOLH # "D"
						if FunName() == "GPEA011"
									//"RUT activo con la matricula: "  ####  en la sucursal:  " ####"RUT Activo"
				             MsgAlert(STR0323 + ALLTRIM(SRA->RA_MAT) + STR0320 + ALLTRIM(SRA->RA_FILIAL) , UPPER(STR0322))
						Else
									//"RUT ya registrado con la matricula : "  ####  en la sucursal:  " ####"RUT Duplicado"
				             MsgAlert(STR0319 + ALLTRIM(SRA->RA_MAT) + STR0320 + ALLTRIM(SRA->RA_FILIAL) , UPPER(STR0318))
						EndIf
						lRet := .F.
					EndIf
					SRA->( dbSkip())
				EndDo
			ENDIF
		ENDIF
	RestArea( aArea )
return lRet

/*/{Protheus.doc} GP010TpAlt
 Valida o tipo de alteracao salarial;
@author PHILIPE.POMPEU
@since 03/10/2016
@version P12
@param cTipoAlt, caractere, tipo alteracao salarial
@return lResult, resultado
/*/
Function GP010TpAlt(cTipoAlt)
Local lResult := .T.
Local lGestPubl := IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)
Default cTipoAlt := &(ReadVar())

	if(!(lGestPubl .AND. (!Empty(M->RA_REGIME) .AND. M->RA_REGIME == '2')) .And. cTipoAlt $ 'EXO|NOM')
		MsgInfo( OemToAnsi( STR0388 ) ) //##"Este tipo de alteração salarial é de uso exlusivo do módulo Gestão Folha Pública."##
		lResult := .F.
	endIf
Return lResult


/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fAltCad   ³ Autor ³ Marcia Moura          | Data ³ 11/04/16 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verificar se eh uma alteracao cadastral            		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fAltCad()    						       				 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nao aplica.                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Botao Confirmar da rotina                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fAltCad(cVersEnvio, aBkpCpos)
Return fAltCadNew(cVersEnvio, aBkpCpos)

/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fAltRet   ³ Autor ³ Marcia Moura          | Data ³ 03/08/16 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verificar se eh retificacao                       		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fAltRet()    						       				 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nao aplica.                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Botao Confirmar da rotina                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fAltRet(cVersEnvio, aBkpCpos)
Return fAltRetNew(cVersEnvio, aBkpCpos)

/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fAltCon   ³ Autor ³ Marcia Moura          | Data ³ 03/08/16 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Verificar se eh alteracao contratual                  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fAltCon()    						       				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ lAltEst - Verifica alteracao contratual estagiario         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Botao Confirmar da rotina                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fAltCon( lAltEst, cVersEnvio, aBkpCpos)
Return fAltConNew( lAltEst, cVersEnvio, aBkpCpos)

/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fVerTpAlt ³ Autor ³ Marcos Coutinho       | Data ³ 12/05/17 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verificar qual o tipo de alteração foi realizada no cad	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fVerTpAlt()    						       				        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nao aplica.                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ GPEA010  - Botao Confirmar da rotina                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fVerTpAlt(aTpAlt,lRet,lAltContr,cVersEnvio,aBkpCpos)
Return fVTpAltNew(aTpAlt,lRet,lAltContr,cVersEnvio,aBkpCpos)

/*/
{Protheus.doc} fGrinrai
Valida o preenchimento do campo RA_GRINRAI
 Função criada pela necessidade de se retirar a obrigatoriedade
do campo no Atusx p/poder incluir seu uso nos módulos TRM e CSA.
@author Isabel Noguti
@since 12/04/2017
@version V12.1.17
@return lRet, resultado
/*/
Function fGrinrai()
Local lRet := .T.

	If (cPaisLoc == "BRA") .And. Empty( M->RA_GRINRAI)
		lRet := .F.
		Help('',1,'GRINRAI') //"Campo RA_GRINRAI (Cód. Instr. RAIS) é obrigatório."
	EndIf

Return lRet
/*/{Protheus.doc} Validación Campo RA_TIPOCO
Carga los campos RA_DIASESP y RA_RENOVA
@author Cristian Franco
@since 20/01/2020
@version 12.1.25
/*/
Function fConPAR()
Local nAux01 := 0
Local dDataIni := CTOD("//")
Local cTipoCo := ""
Local nDiasExp := 0
Local cRenova  := ""
Local dDataFim := CTOD("//")
Local cTpContr := ""
Local cAux02   := ""

dDataIni  := If( IsMemVar( "RA_DATAINI" ), GetMemVar( "RA_DATAINI" ) , SRA->RA_DATAINI)
cTipoCo   := If( IsMemVar( "RA_TIPOCO" ), GetMemVar( "RA_TIPOCO" ) , SRA->RA_TIPOCO)
nDiasExp  := If( IsMemVar( "RA_DIASEXP" ), GetMemVar( "RA_DIASEXP" ) , SRA->RA_DIASEXP)
cRenova   := If( IsMemVar( "RA_RENOVA" ), GetMemVar( "RA_RENOVA" ) , SRA->RA_RENOVA)
dDataFim  := If( IsMemVar( "RA_DATAFIM" ), GetMemVar( "RA_DATAFIM" ) , SRA->RA_DATAFIM)
cTpContr  := If( IsMemVar( "RA_TPCONTR" ), GetMemVar( "RA_TPCONTR" ) , SRA->RA_TPCONTR)


DbSelectArea( "SRA")
nAux01:= FPOSTAB("S018",cTipoCo,"=", 4 )
If INCLUI
	If nAux01 > 0
		nDiasExp:= fTabela("S018",nAux01,7)
		cAux02 := fTabela("S018",nAux01,9)
		If ValType(cAux02)!= "C" .and. ValType(cAux02)!="U"
			cAux02 := STR(cAux02)
		EndIf

		If  ALLTRIM(cAux02) <>"0"
			cRenova:="2"
		Else
		 	cRenova:="1"
		EndIf

	EndIf
	M->RA_RENOVA	:= cRenova
	M->RA_DIASEXP 	:= nDiasExp
	If cTpContr="1"
	  M->RA_DATAFIM:=""
	Else
	  M->RA_DATAFIM:= dDataIni + (nDiasExp -1)
	EndIf
	cAuxParT:= M->RA_TIPOCO

EndIf

Return cAuxParT

/*/{Protheus.doc} Validacion  de  campo RA_DIASEXP
Valida el campo RA_DIASEXP que se encuentre  dentro de un rango
@author Cristian Franco
@since 20/01/2020
@version 12.1.25
/*/
Function fValidExp()
Local nDiasExp := M->RA_DIASEXP
Local dDataIni :=	 CTOD("//")
Local cOpc1    :=""
Local cOpc2    :=""
Local nAux01 := 0


dDataIni  := If( IsMemVar( "RA_DATAINI" ), GetMemVar( "RA_DATAINI" ) , SRA->RA_DATAINI)

DbSelectArea( "SRA")
nAux01	  := FPOSTAB("S018",cAuxParT,"=", 4 )
cOpc1 	  := fTabela("S018", nAux01,7)
cOpc2 	  := fTabela("S018", nAux01,8)



IIf( (nDiasExp >= cOpc1) .and. (nDiasExp <= cOpc2),M->RA_DATAFIM:= dDataIni + (nDiasExp -1)  ,alert("NO SE ENCUENTRA DENTRO DEL RANGO DE DÍAS MÍNIMOS Y MÁXIMOS"))


Return nDiasExp

/*/{Protheus.doc} fGP10ResEx
Verifica se o funcionário á residente no exterior, se sim solicita o seu cadastro no histórico de contratos.
@author Cícero Alves
@since 01/09/2017
@version 1.0
/*/
Function fGP10ResEx()

Local cMsg	:= ""

	If cPaisLoc == 'BRA'
		//Se funcionario tiver sido cadastrado ou atualizado como Residente no Exterior
		If M->RA_RESEXT == "1" .And. SRA->RA_RESEXT <> M->RA_RESEXT
			cMsg := OemtoAnsi(STR0244) + CRLF		//"Para funconarios residentes no exterior, "
			cMsg += OemtoAnsi(STR0245) + CRLF		//"informar na rotina de Historico de Contratos, "
			cMsg += OemtoAnsi(STR0246) + CRLF		//"Atualizacoes/Funcionario/Historico Contrato, "
			cMsg += OemtoAnsi(STR0247) + CRLF		//"quais os impostos, IR, Dedução de INSS, "
			cMsg += OemtoAnsi(STR0248) + CRLF		//"Contribuicoes Patronais, "
			cMsg += OemtoAnsi(STR0249) + CRLF		//"deverao ser calculados para ele."
			MsgInfo(cMsg)
		EndIf
	EndIf

Return( .T. )

/*
{Protheus.doc} Gpea010DCargo
Gatilho do campo RA_DCARGO a partir da informação da Função
@author Oswaldo L
@since 12/04/2017
@version V12.1.17
@return lRet, resultado
*/
Function Gpea010DCargo()

	Local cRet := M->RA_DCARGO

	If !Empty(SRJ->RJ_CARGO) .And. cModulo $ "GPE/RSP/TRM/MDT/CSA/APD/GFP/ORG/VDF"
		cRet := Posicione('SQ3', 1, xFilial('SQ3') + SRJ->RJ_CARGO, 'Q3_DESCSUM')
	EndIf

Return cRet


/*
{Protheus.doc} Gpea010CCargo
Gatilho do campo RA_CARGO a partir da informação da Função
@author Oswaldo L
@since 12/04/2017
@version V12.1.17
@return lRet, resultado
*/
Function Gpea010CCargo()

	Local cRet := M->RA_CARGO

	If !Empty(SRJ->RJ_CARGO) .And. cModulo $ "GPE/RSP/TRM/MDT/CSA/APD/GFP/ORG/VDF"
		cRet := SRJ->RJ_CARGO
	EndIf

Return cRet


/*
{Protheus.doc} fGP010Conv
Funcao que avalia se apresenta ou não a tela de cadastro Informacoes de convocacao

@author Oswaldo L
@since 12/12/2017
@version V12.1.17
@return lRet, resultado
*/
Function fGP010Conv(nOpc1,lAvisa, cRaFil, cRaMat)
Local aArea			:= GetArea()
Local aKeys			:= GetKeys()
Local lExecuta		:= .F.
Local lExistMenu	:= .F.
Local lGPEA180		:= IsInCallStack("GPEA180")
Local lExistConvMenu   := .F.

	If !lGPEA180

		lExistConvMenu	:= aScan(aGpea010Btn,{|x| x[4] ==  OemToAnsi(STR0355)  }) != 0 //"Info Exclusivas Convocação"
		lExecuta        := .T.

		If nOpc1 == 3  .And. !MsgYesNo(oEmToAnsi(STR0360))
			lExecuta := .F.
		EndIf

		If lAvisa .And. lExistConvMenu .And. nOpc1 !=3
			lExecuta := .F.
		EndIf

	EndIf

	If TabNovaDic()
		If lExecuta .And. FindFunction ("GPEA1801")
			DbSelectArea('SV7')
			SV7->(DbSetOrder(1))
			SV7->(DbSeek(cRaFil + cRaMat))

			If nOpc1 == 3 .OR. nOpc1 == 4

				If !lGPEA180
					FWExecView(OemToAnsi(STR0355), "GPEA018", MODEL_OPERATION_UPDATE ,,{||.T.}) //Convocacoes
				EndIf
			Else
				FWExecView(OemToAnsi(STR0355), "GPEA018", MODEL_OPERATION_VIEW,,{||.T.}) 	//Convocacoes
			EndIf
		EndIf
	EndIf

	RestKeys(aKeys , .T.)
	RestArea(aArea)

Return .T.

/*/{Protheus.doc} TabNovaDic
Testa existência da tabela SV7 - Convocações
@author Oswaldo L
@since 12/12/2017
@version 12.1.17
@return lRet, .T. Caso a tabela exista no banco de dados, .F. Caso não exista
/*/
Static Function TabNovaDic()

Local lRet	:= .F.
Local aArea	:= GetArea()


	If chkfile('SV7')
		lRet := .T.
	Else
		MsgInfo( OemToAnsi( STR0372 ) )
	EndIf

	RestArea(aArea)

Return lRet


/*
{Protheus.doc} Gpea10Inter
Verifica se já existem convocações - evita modificar tipo de contrato após isto
@author Oswaldo L
@since 12/12/2017
@version V12.1.17
@return lRet, resultado
*/
Function Gpea10Inter(nValidacao)
	Local lRet      := .T.
	Local aArea     := GetArea()
	Local cAliasTab := GetNextAlias()
	Local aPerAtual	:= {}
	Local lValida   := ALTERA .And. SRA->RA_TPCONTR == "3" .And. SRA->RA_TPCONTR <> M->RA_TPCONTR

	If lValida
		fGetPerAtual(@aPerAtual,xFilial("RCH"),GetMemVar("RA_PROCES"), Iif( M->RA_CATFUNC $ "A|P", fGetCalcRot("9"), fGetCalcRot("1")))

		If Empty(aPerAtual) .And. lValida
			MsgInfo( OemToAnsi( STR0423 ) ) //O processo deve ter um período ativo cadastrado.
			lRet := .F.
		Else
			If TabNovaDic () .And. !Empty(M->RA_MAT)
				If nValidacao == 1 //validacao campo RA_TPCONTR
					//Tabela SV6 é compartilhada e estara sendo usada em qualquer outra empresa-filial, por isto não filtramos filial
					BeginSql Alias cAliasTab
							SELECT   SV7.*  FROM  %table:SV7%  SV7
							WHERE    SV7.V7_FILIAL = %Exp:( SRA->RA_FILIAL )%
							AND   SV7.V7_MAT = %Exp:( M->RA_MAT )%
							AND (V7_DTINI >= %Exp:( DTOS(aPerAtual[1,6]))%
							OR  V7_DTFIM >= %Exp:( DTOS(aPerAtual[1,7]))%)
							AND   %NotDel%
					EndSql

					If (cAliasTab)->(!Eof())
						MsgInfo( OemToAnsi( STR0361 ) )
						lRet := .F.
					EndIf

					(cAliasTab)->(DbCloseArea())
				EndIf
			EndIf
		EndIf
	Else
		If TabNovaDic () .And. !Empty(M->RA_MAT)
			If nValidacao == 1 //validacao campo RA_TPCONTR
				If M->RA_TPCONTR == "3"
					If M->RA_CATFUNC != 'H'
						MsgInfo( OemToAnsi( STR0362 ) )
						lRet := .F.
					ElseIf INCLUI //Apaga conteúdo do campo salário
						M->RA_SALARIO := 0
					EndIf
				EndIf
			EndIf
			If nValidacao == 2 //validacao campo RA_CATFUNC\RA_TIPOPGT
				If M->RA_TPCONTR == "3"
					If M->RA_CATFUNC != 'H'
						MsgInfo( OemToAnsi( STR0362 ) )
						lRet := .F.
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf

	RestArea(aArea)
Return lRet

/*/{Protheus.doc} Aux018
Função auxiliar para a chamada da rotina de convocações
@author cicero.pereira
@since 21/12/2017
@version 12.1.17
/*/
Function Aux018()

	If SRA->RA_TPCONTR == "3" .And. TabNovaDic()
		FWExecView(OemToAnsi(STR0355), "GPEA018", MODEL_OPERATION_UPDATE ,,{||.T.}) //Convocacoes
	Else
		Help( ,,STR0389,,STR0390, 1, 0 )// "Contrato Intermitente"#"Opção disponível apenas para funcionários com contrato intermitente."
	EndIf

Return

/*/{Protheus.doc} AuxSVA
Função auxiliar para a chamada da rotina de observações
@author cicero.pereira
@since 21/12/2017
@version 12.1.17
/*/
Function AuxSVA()

Local lExecSVA	:= .T.
Local lSVA		:= Chkfile("SVA")
Local lVaTp		:= If( lSVA, SVA->( ColumnPos( "VA_TP")) > 0, lSVA)

	If FindFunction("ESocMsgVer") .And. !lMiddleware .And. lIntTAF .And. cVersGPE <> cVersEnvio .And. (cVersGPE >= "9.0" .Or. cVersEnvio >= "9.0")
		ESocMsgVer(.T., /*cEvento*/, cVersGPE, cVersEnvio)
		Return
	Else
		If lVaTp .And. FindFunction("fObsSVA")
			lExecSVA :=	fObsSVA() != "0"
		Endif

		If lSVA
			If lExecSVA
				FWExecView(OemtoAnsi(STR0378), "GPEA933", MODEL_OPERATION_UPDATE,,{||.T.}) //Observações contratuais
			Endif
		Else
			Help( ,, "Atenção" ,,StrTran(STR0379,"[U]","UPDDISTR"), 1, 0 )
		EndIf
	EndIf

Return

/*/{Protheus.doc} fUsaGPE
Consulta a SRD para ver se o cliente utiliza o GPE ou somente os demais modulos ou integração, sem calculo
@author cicero.pereira
@since 21/12/2017
@version 12.1.17
/*/
Function fUsaGPE()
Local aArea		:= GetArea()
Local lTemSRD	:= .F.
Local cOrder:= ''

cOrder:= 'RD_FILIAL+RD_PROCES+RD_PERIODO+RD_SEMANA+RD_ROTEIR+RD_CC+RD_MAT'
SRD->(dbSetOrder(RetOrder("SRD",cOrder)))
SRD->(dbGoTop())
lTemSRD := (!SRD->(Eof()) .AND. !Empty(SRD->RD_PERIODO))

RestArea(aArea)
Return lTemSRD


/*
{Protheus.doc} fRegNr()
Function for trigger at RA_CIC - Snils
@author raquel.andrade
@since 12/12/2017
*/
Function fRegNr()
Local cRd0Codigo as Character
Local cSNILS	as Character

	cRd0Codigo	:= If(ALTERA, M->RA_CODUNIC,"")
	cSNILS		:= M->RA_CIC

	If Empty(cSnAnt)
		cSnAnt	:= cSNILS
	EndIf

	// Check if exist Personal Registration Number for same SNILS (RA_CIC)
	lSraRelRd0 := SraRelRd0( @nRd0Recno , aSraHeader , .T. , Nil )

	// If it is empty, generate new code
	If Empty(M->RA_CODUNIC)
		Rd0GetCodigo( @cRd0Codigo , .F. )
		lNewRelRd0	:= .T.
	// If it is not empty and new SNILS, keep generated code
	ElseIf  !lSraRelRd0 .And. INCLUI
		If !fPrSnils(M->RA_CODUNIC)
			cRd0Codigo := M->RA_CODUNIC
		Else
			Rd0GetCodigo( @cRd0Codigo , .F. )
		EndIf
	EndIf

Return (Iif(lSraRelRd0, M->RA_CODUNIC, cRd0Codigo) )

/*
{Protheus.doc} fPrSnils
Check if there is a record of Person on table RD0
@author raquel.andrade
@since 29/11/2018
*/
Function fPrSnils(cCodUnic as Character)
Local aArea	:= GetARea()
Local lRet	:= .F.

	RD0->( dbSetOrder( RetOrdem( "RD0" , "RD0_FILIAL+RD0_CODIGO" ) ) )
	lRet :=  RD0->( dbSeek( ( xFilial( "RD0" , xFilial("SRA") ) + cCodUnic ) , .F. ) )

	RestArea(aArea)

Return lRet

/*
{Protheus.doc} fSignNme()
Trigger for fields: Surname(RA_PRISOBR),Name(RA_NOME),Middle Name(RA_SECNOME).
@author raquel.andrade
@since 13/12/2017
@version V12.1.17
*/
Function fSignNme( cSurName as Character, cName as Character, cMidName as Character )
Local cSign as Character

	cSign	:= cSurName + " " + Substr( cName, 1, 1 )+". "
	If ( !Empty( cMidName ), cSign += Substr( cMidName, 1, 1 ) + ".", )

Return ( cSign )

/*
{Protheus.doc} fPerWT()
Rule for triggers for fields:
Percentage of Working Time (RA_PERWK);
Partime Time Worker (RA_TIPOCON).
@author raquel.andrade
@since 15/12/2017
@version V12.1.17
*/
Function fPerWT(cType as Character)
Local cContent as Character
Local nContent as Numeric

	If cType == "1" // Part Time
		If M->RA_TIPOCON == "1" // 1=Yes
			nContent	:= 50
		EndIf
	Elseif cType == "2"  // Percentage of Working Time
		If M->RA_PERWK == 50
			cContent		:= "1"
		Else
			cContent		:= "2"
		EndIf
	EndIf

Return ( If(cType == "1",nContent, cContent))

/*
{Protheus.doc} fVldSal()
Validation of field Amount (RA_SALARY).
Responsible to check if amount is in accordance
with selected Salary Table/Level.
@author raquel.andrade
@since 15/12/2017
@version V12.1.17
*/
Function fVldSal(cTable as Character, cLevel as Character, cRange as Character)
Local aArea as Array
Local nSalary as Numeric

	aArea	:= GetArea()
	nSalary := &(ReadVar())

	If Empty(cTable) .Or. Empty(cLevel) .Or. Empty(cRange)
		Help(,,'HELP',,STR0366,1,0) // "Please select Table Salary, Level and Range before filling Amount."
	Else
		dbSelectArea("RB6")
		RB6->(dbSetOrder(1))
		If dbSeek(xFilial("RB6")+cTable+cLevel+cRange)
			If nSalary > RB6->RB6_VALOR
				Help(,,'HELP',,STR0367,1,0) // "Amount is higher than range selected!"
			EndIf
		EndIf
	EndIf

	RestArea(aArea)

Return ( .T. )

/*
{Protheus.doc} fActLegend()
Function for Legend/Caption based on field RA_MSBLQL
@author ekaterina.moskovkira
@since 02/02/2018
@version V12.1.17
*/
Function fActLegend( )
Local aLegend as Array
	aLegend := {}

	Aadd( aLegend, { "BR_VERDE"	  , STR0374 } )
	Aadd( aLegend, { "BR_VERMELHO", STR0375 } )

	BrwLegenda ( STR0373, STR0376, aLegend )

Return ( .T. )

/*
{Protheus.doc} GPEA010Prt()
Function for print the order
@author anastasiya.kulagina
@since 22/03/2018
@version V12.1.21
*/
Function GPEA010Prt()
Local oWord as Object
Local cFileOpen as Character
Local cFileSave as Character

	if pergunte("SAVEORD01",.T.)
		cFileOpen := alltrim(MV_PAR01)
		cFileSave := alltrim(MV_PAR02) + STR0384 +"_"+ SRA->RA_MAT + ".Docx"		 //name of files "AdmissOrder_%CODE%"
		If cFileOpen!="" .AND. !RAT(".DOC", UPPER(cFileOpen))
			MsgInfo(STR0385,STR0383)				//error message "The file of the incorrect type is selected."
		Else
			oWord := OLE_CreateLink()
			If File(cFileOpen)
			OLE_OpenFile(oWord, cFileOpen)
			Else
			OLE_NewFile(oWord)
			EndIf
			OLE_SaveAsFile( oWord, cFileSave,,,.F. )
		ENDIF
	endIf

RETURN (.T.)

/*
{Protheus.doc} fPer()
Function of filling in the employee's Card with data from the Question
@author anastasiya.kulagina
@since 12/04/2018
@version V12.1.21
*/
Function fPer(nT)
Local cField as Character
	if  LEN(aParamRus) != 0
		DO CASE
  			CASE nT == 1
     			cField	:=	aParamRus[1]
  			CASE nT == 2
     			cField	:=	aParamRus[2]
  			CASE nT == 3
     			cField	:=	aParamRus[3]
			CASE nT == 4
     			Return ( STOD( aParamRus[4] ) )
  			OTHERWISE
     			cField	:=	aParamRus[5]
		ENDCASE
	else
	DO CASE
  			CASE nT == 1
     			cField	:=	Space(GetSx3Cache("RA_PRISOBR","X3_TAMANHO"))
  			CASE nT == 2
     			cField	:=	Space(GetSx3Cache("RA_NOME","X3_TAMANHO"))
  			CASE nT == 3
     			cField	:=	Space(GetSx3Cache("RA_SECNOME","X3_TAMANHO"))
			CASE nT == 4
     			Return CTOD('//')
  			OTHERWISE
     			cField	:=	Space(GetSx3Cache("RA_CIC","X3_TAMANHO"))
		ENDCASE
	endif

Return cField



/*/{Protheus.doc} Gpea10SetFil
	The function generates a filter for the standard RCLRUS request by the value of the selected Department
	@type  Function
	@author Anastasiya.Kulagina
	@since 14/05/2018
	@version 1.0
/*/
Function GPEA10SetFil()
Local cFilter 	as Character
Local cFilRCL 	as Character
Local oModel	as Object
Local oModelTMP	as Object

cFilter := ""
cFilRCL	:= ""

	If FunName() != "ORGA060"
		If IsInCallStack("RU07T03RUS")
			oModel := FWModelActive()
			oModelTMP := oModel:GetModel("TMPDETAIL")
			If !Empty(oModelTMP:GetValue("DEPARTMENT"))
				cFilter := "RCL->RCL_DEPTO == '" + oModelTMP:GetValue("DEPARTMENT") + "' .AND. "
				cFilter += "RCL->RCL_STATUS =='1' "
			EndIf
		ElseIf Type("cDepart") != "U" .And. !Empty(cDepart)
			cFilter := "RCL->RCL_DEPTO == '" + cDepart + "' .AND. "
			cFilter += "RCL->RCL_STATUS =='1' "
		EndIf
	Else
		If Type("oGdRd4") != "U"
			cFilRCL := xFilial("RCL", oGdRd4:aCols[oGdRd4:nAt, GdFieldPos("RD4_FILIDE", oGdRd4:aHeader) ] )
		Else
			cFilRCL := xFilial("RCL")
		EndIf
		cFilter := " RCL_FILIAL == '" + cFilRCL  + "'  "
	endif
	cFilter := "@#" + cFilter + "@#"

Return(cFilter)


/*/{Protheus.doc} fRd4FilRUS
	The function generates a filter for the standard RD4RUS request by the value of the selected Department
	@type  Function
	@author Anastasiya.Kulagina
	@since 16/05/2018
	@version 1.0
/*/
Function fRd4FilRUS()
	Local lRet     := .T.

	if RD4->RD4_HIERAR != '1'
		lRet     := .F.
	endif

Return(lRet)

/*/{Protheus.doc} fWrHrsD
	Count of working hours from work shift by Work Shift Code
	@type  Function
	@author ekaterina.moskovkira
	@since 13.05.2018
	@version 001
	@param cWShift as Character - Work Shidt Code
	@return nWSHours as Numberic - count of working hours
	@example
	(examples)
	@see (links_or_references)
	/*/
Function fWrHrsD(cWShift)
Local	nWSHours	:= 0.00
Local 	aArea		:= GetArea()

dbSelectArea("SR6")
dbSetOrder(1)
If (SR6->(dbSeek(xFilial( "SR6" ) + cWShift) ) )
	nWSHours := Posicione("SR6", 1, xFilial( "SR6" ) + cWShift, "R6_HRDIA")
Endif

RestArea(aArea)

Return nWSHours
/*/{Protheus.doc} fCheckCIC
	Function checks count of symbols in pergunte GPEA010EUS field "?????"
	@type  Function
	@author ekaterina.moskovkira
	@since 31/05/2018
	@version 1.0
	@return boolean value
	/*/
Function fCheckCIC()
	Local lRet	:= .T.

	If !Empty( AllTrim( MV_PAR05 ) ) .AND. Len( AllTrim( MV_PAR05 ) ) < 11
		MsgAlert(STR0391)
		lRet = .F.
	EndIf

Return lRet

/*/{Protheus.doc} ActFiltRUS
	Function creates a filter (for Acionts Items) with values from pergunte
	@type		Function
	@author		ekaterina.moskovkira
	@since		30/05/2018
	@version 	1.0
	@param 		aPar	Array		array with values from pergunte
	@return 	CFilter	Character	String with condition for default user filter
	/*/
Function ActFiltRUS( aPar as Array )
	Local CFilter	as Character

	CFilter := ''

	If Len(aPar) > 0
		If( !Empty(aPar[1]), CFilter += "'" + aPar[1] + "'" + "= UPPER(RA_PRISOBR)", )
		If !Empty(aPar[2])
			If( CFilter != '', CFilter += ' .AND. ', )
			CFilter +=  "'" + aPar[2] + "'" + "$ UPPER(RA_PRINOME)"
		EndIf
		If !Empty(aPar[3])
			If( CFilter != '', CFilter += ' .AND. ', )
			CFilter +=  "'" + aPar[3] + "'" + "$ UPPER(RA_SECNOME)"
		EndIf
		If !Empty(aPar[4])
			If( CFilter != '', CFilter += ' .AND. ', )
			CFilter +=  "'" + aPar[4] + "'" + "== DTOS(RA_NASC)"
		EndIf
		If !Empty(aPar[5])
			If( CFilter != '', CFilter += ' .AND. ', )
			CFilter +=  "'" + aPar[5] + "'" + "== RA_CIC"
		Endif
	EndIf

Return CFilter

/*/{Protheus.doc} CancelSX8
Rollback SX8
@since 02/07/2019
@version 12.1.17
/*/

Static Function CancelSX8()

Local nLenSX8 := GetSX8Len()
Local nI := 0

FOR nI:=1 TO nLenSX8
	RollBackSX8()
NEXT i

Return .T.

/*{Protheus.doc} GPEA010001
	Function create a full name from RA_PRISOBR, RA_PRINOME, RA_SECNOME. To fill RA_NOME
	@type  Function in triggers RA_PRISOBR, RA_PRINOME, RA_SECNOME (seq 2)
	@author denis.belotserkovsky
	@since 2019.01.09
*/
Function GPEA010001 (cPrisobr as Character, cPrinome as Character, cSecnome as Character)
	Local cRes	as Character

	cRes := AllTrim(cPrisobr) + ' ' + AllTrim(cPrinome) + ' ' + AllTrim(cSecnome)

return cRes


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³TableAttDef³ Autor ³ IP RH Inovacao       ³ Data ³ 24.06.15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Visoes e Graficos										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Static Function TableAttDef()

Local oTableAtt		:= FWTableAtt():New()
Local oDSMyAbert	:= Nil
Local aPerAtual		:= {}
Local cDt1			:= dtos(Firstdate(date()))
Local cDt2			:= dtos(Lastdate(date()))

	If fGetPerAtual( @aPerAtual, , "00001", fGetRotOrdinar() )
		cDt1 := dtos(aPerAtual[1][6])
		cDt2 := dtos(aPerAtual[1][7])
	EndIf

	oTableAtt:SetAlias("SRA")

	oDSMyAbert := FWDSView():New()
	oDSMyAbert:SetName(STR0304)//"Admitidos no mês
	oDSMyAbert:SetID("GPEA010V1")
	oDSMyAbert:SetOrder(1)
	oDSMyAbert:SetCollumns({	"RA_FILIAL"	,"RA_MAT","RA_NOME"	 })
	oDSMyAbert:SetPublic(.T.)
	oDSMyAbert:AddFilter("Func", " DtoS(RA_ADMISSA) >= '"+cDt1+"' .AND. DtoS(RA_ADMISSA) <= '"+cDt2+"'")
	oTableAtt:AddView(oDSMyAbert)

	oDSMyAbert := FWDSView():New()
	oDSMyAbert:SetName(STR0305) // "Meus admitidos"
	oDSMyAbert:SetID("GPEA010V2")
	oDSMyAbert:SetOrder(1)
	oDSMyAbert:SetCollumns({	"RA_FILIAL"	,"RA_MAT","RA_NOME"	 })
	oDSMyAbert:SetPublic(.T.)
	oDSMyAbert:AddFilter("Func", "RA_USRADM == '"+__CUSERID+"'")
	oTableAtt:AddView(oDSMyAbert)

	oDSPorProb := FWDSChart():New()
	oDSPorProb:SetName(STR0306)   //"Admissão"
	oDSPorProb:SetTitle(STR0306)
	oDSPorProb:SetID("GPEA010G1")
	oDSPorProb:SetType("PIECHART")
	oDSPorProb:SetSeries({{"SRA","RA_SITFOLH","COUNT"}})
	oDSPorProb:SetCategory({{"SRA", "RA_SITFOLH"}})
	oDSPorProb:SetPublic(.T.)
	oDSPorProb:SetLegend(CONTROL_ALIGN_BOTTOM) //Inferior
	oDSPorProb:SetTitleAlign(CONTROL_ALIGN_CENTER)
	oTableAtt:AddChart(oDSPorProb)

Return(oTableAtt)

/*/{Protheus.doc} fTpConSVA
Checa RA_TIPOCON + se tem SVA p/ integrar ou não o tipo de contrato determinado pela ocorrência de um fato
@author  isabel.noguti
@since   10/07/2019
@version 12.1.25
/*/
Static Function fTpConSVA()
	Local lInteg	:= .T.
	Local aArea		:= GetArea()
	Local lTipoCon	:= SRA->(ColumnPos("RA_TIPOCON")) > 0

	If GetMemVar("RA_TPCONTR") == "2" .And. Empty(GetMemVar("RA_DTFIMCT"))
		If Chkfile("SVA")
			If lTipoCon .And. GetMemVar("RA_TIPOCON") == "1"
				dbSelectArea("SVA")
				SVA->(dbSetOrder(1))//VA_FILIAL+VA_MATRIC
				If !SVA->( dbSeek( xFilial("SRA") + GetMemVar("RA_MAT") ))
					Help("",1,OemtoAnsi(STR0076),,OemtoAnsi(STR0429),1,0) //Tipo de contrado determinado pela ocorrência de um fato sem registro na tabela SVA. O cadastro do funcionário será gravado na SRA, porém para integração com o TAF será necessário informar suas Observações Contratuais.
					lInteg := .F.
				EndIf
			EndIf
		Else
			Help( ,,OemtoAnsi(STR0076),,StrTran(STR0379,"[U]","UPDDISTR"), 1, 0 ) //Favor realizar a aplicação do UPDDISTR, para a criação da tabela SVA - Observ Contrato de Trabalho
			lInteg := .F.
		EndIf
	EndIf

	RestArea(aArea)

Return lInteg

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³ FSubst        ³ Autor ³ Cristina Ogura   ³ Data ³ 17/09/98 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao que substitui os caracteres especiais por espacos   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FSubst()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ GPEM610                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function FSubst(cTexto)

	Local aAcentos	:= {}
	Local aAcSubst	:= {}
	Local cImpCar	:= Space(01)
	Local cImpLin	:= ""
	Local cAux		:= ""
	Local cAux1		:= ""
	Local nTamTxt	:= Len(cTexto)
	Local j
	Local nPos

	// Para alteracao/inclusao de caracteres, utilizar a fonte TERMINAL no IDE com o tamanho
	// maximo possivel para visualizacao dos mesmos.
	// Utilizar como referencia a tabela ASCII anexa a evidencia de teste (FNC 807/2009).
	aAcentos :=	{;
				Chr(199), Chr(231), Chr(196), Chr(197), Chr(224), Chr(229), Chr(225), Chr(228), Chr(170),;
				Chr(201), Chr(234), Chr(233), Chr(237), Chr(244), Chr(246), Chr(242), Chr(243), Chr(186),;
				Chr(250), Chr(097), Chr(098), Chr(099), Chr(100), Chr(101), Chr(102), Chr(103), Chr(104),;
				Chr(105), Chr(106), Chr(107), Chr(108), Chr(109), Chr(110), Chr(111), Chr(112), Chr(113),;
				Chr(114), Chr(115), Chr(116), Chr(117), Chr(118), Chr(120), Chr(122), Chr(119), Chr(121),;
				Chr(065), Chr(066), Chr(067), Chr(068), Chr(069), Chr(070), Chr(071), Chr(072), Chr(073),;
				Chr(074), Chr(075), Chr(076), Chr(077), Chr(078), Chr(079), Chr(080), Chr(081), Chr(082),;
				Chr(083), Chr(084), Chr(085), Chr(086), Chr(088), Chr(090), Chr(087), Chr(089), Chr(048),;
				Chr(049), Chr(050), Chr(051), Chr(052), Chr(053), Chr(054), Chr(055), Chr(056), Chr(057),;
				Chr(038), Chr(195), Chr(212), Chr(211), Chr(205), Chr(193), Chr(192), Chr(218), Chr(220),;
				Chr(213), Chr(245), Chr(227), Chr(252);
				}

	aAcSubst :=	{;
				"C", "c", "A", "A", "a", "a", "a", "a", "a",;
				"E", "e", "e", "i", "o", "o", "o", "o", "o",;
				"u", "a", "b", "c", "d", "e", "f", "g", "h",;
				"i", "j", "k", "l", "m", "n", "o", "p", "q",;
				"r", "s", "t", "u", "v", "x", "z", "w", "y",;
				"A", "B", "C", "D", "E", "F", "G", "H", "I",;
				"J", "K", "L", "M", "N", "O", "P", "Q", "R",;
				"S", "T", "U", "V", "X", "Z", "W", "Y", "0",;
				"1", "2", "3", "4", "5", "6", "7", "8", "9",;
				"E", "A", "O", "O", "I", "A", "A", "U", "U",;
				"O", "o", "a", "u";
				}

	For j := 1 TO Len(AllTrim(cTexto))

		cImpCar	:= SubStr(cTexto, j, 1)

		//-- Nao pode sair com 2 espacos em branco.
		cAux := Space(01)
		nPos := 0
		nPos := Ascan(aAcentos, cImpCar)

		If nPos > 0
			cAux := aAcSubst[nPos]
		Elseif (cAux1 == Space(1) .And. cAux == space(1)) .Or. Len(cAux1) == 0
			cAux :=	""
		EndIf

		cAux1 	:= 	cAux
		cImpCar	:=	cAux
		cImpLin	:=	cImpLin+cImpCar

	Next j

	//--Volta o texto no tamanho original
	cImpLin := Left(cImpLin + Space(nTamTxt), nTamTxt)

Return cImpLin



/*/{Protheus.doc} fSendDadosApi
Processo para enviar os dados de inclusão/alteração/deleção para
integração via API REST.
@since	22/04/2020
@autor	raquel.andrade
@version 1.0
/*/
Static Function fSendDadosApi(cOperacao,dR7Data,cR7Seq,cR7Tipo)

Local dDtBase   := dDataBase
Local cHoraAt   := Time()
Local cTmpEmp   := cEmpAnt
Local cProces   := "SR7"
Local cUserId   := SubStr(cUsuario,7,15)
Local cTmpMat   := SRA->RA_MAT
Local cTmpFil   := SRA->RA_FILIAL
Local cChave    := cTmpEmp + "|" + cTmpFil + "|" + cTmpMat + "|" + DTOS(dR7Data) + "|" + cR7Seq + "|" + cR7Tipo

fSetInforRJP(cTmpFil, cTmpMat, cProces, cChave, cOperacao,  dDtBase, cHoraAt, cUserId)

Return (.T.)

/*/{Protheus.doc} fPrepDadosApi
Processo para preparar os dados de inclusão/alteração/deleção para
integração via API REST.

@since	23/04/2020
@autor	Silvia Taguti
@version P12.1.XX

/*/
Static Function fPrepDadosApi(nOpcModel,aSraCols,aSraHeader)

Local aArea		:= GetArea()
Local cOperacao := ""

If !ChkFile("RJP")
	Return
Endif

If nOpcModel == 3 .Or. nOpcModel == 7
	cOperacao := "I"
	fSendSRAApi(cOperacao)
ElseIf nOpcModel == 4
	If fAltCamposApi(aSraCols,aSraHeader)
		cOperacao := "A"
		fSendSRAApi(cOperacao)
	EndIf
ElseIf nOpcModel == 5
	cOperacao := "E"
	fSendSRAApi(cOperacao)
ENDIF

RestArea(aArea)

Return (.T.)


/*/{Protheus.doc} fSendSRAApi
Processo para enviar os dados de inclusão/alteração/deleção/Copia para
integração via API REST.
@since	23/04/2020
@autor	Silvia Taguti
@version 1.0
/*/
Static Function fSendSRAApi(cOperacao)

Local dDtBase   := dDataBase
Local cHoraAt   := Time()
Local cTmpEmp   := cEmpAnt
Local cProces   := "SRA"
Local cUserId   := SubStr(cUsuario,7,15)
Local cTmpMat   := M->RA_MAT
Local cTmpFil   := xFilial ("SRA")
Local cChave    := cTmpEmp + "|" + cTmpFil + "|" + cTmpMat

fSetInforRJP(cTmpFil, cTmpMat, cProces, cChave, cOperacao,  dDtBase, cHoraAt, cUserId)

Return (.T.)

/*/{Protheus.doc} fAltCamposApi
Verifica se os campos de envio da API foram alterados
@since	23/04/2020
@autor	Silvia Taguti
@version P12.1.XX
/*/

Static Function fAltCamposApi(aSraCols,aSraHeader)

Local aArea		:= GetArea()
Local lAlterou  := .F.
Local bCond     := {|x|(  SRA->RA_MAT <> GetMemVar( "RA_MAT" ) ) .Or. ;
( SRA->RA_NOMECMP <> GetMemVar( "RA_NOMECMP" ) ) .Or. ;
( SRA->RA_NASC <> GetMemVar( "RA_NASC") ) .Or. ;
( SRA->RA_CIC <> GetMemVar( "RA_CIC") )  .Or. ;
( SRA->RA_SEXO 	<> GetMemVar( "RA_SEXO") ) .Or. ;
( SRA->RA_RG	<> GetMemVar( "RA_RG") ) .Or. ;
( SRA->RA_EMAIL <> GetMemVar( "RA_EMAIL") ) .Or. ;
( SRA->RA_TNOTRAB <> GetMemVar( "RA_TNOTRAB") )  .Or. ;
( SRA->RA_CC	<> GetMemVar( "RA_CC") ) .Or. ;
( SRA->RA_CODFUNC <> GetMemVar( "RA_CODFUNC") ) .Or. ;
( SRA->RA_ENDEREC <> GetMemVar( "RA_ENDEREC") ) .Or. ;
( SRA->RA_NUMENDE <> GetMemVar( "RA_NUMENDE") ) .Or. ;
( SRA->RA_BAIRRO <> GetMemVar( "RA_BAIRRO") ) .Or. ;
( SRA->RA_CODMUN <> GetMemVar( "RA_CODMUN") ) .Or. ;
( SRA->RA_MUNICIP <> GetMemVar( "RA_MUNICIP") ) .Or. ;
( SRA->RA_CEP	<> GetMemVar( "RA_CEP") ) .Or. ;
( SRA->RA_TELEFON <> GetMemVar( "RA_TELEFON") ) .Or. ;
( SRA->RA_DEPTO   <> GetMemVar( "RA_DEPTO") )   .Or. ;
( SRA->RA_SITFOLH <> GetMemVar( "RA_SITFOLH") ) .Or. ;
( SRA->RA_CATEFD  <> GetMemVar( "RA_CATEFD") )  .Or. ;
( SRA->RA_ADMISSA <> GetMemVar( "RA_ADMISSA") ) .Or. ;
( SRA->RA_DEMISSA <> GetMemVar( "RA_DEMISSA") ) .Or. ;
( SRA->RA_CATEG   <> GetMemVar( "RA_CATEG") )   .Or. ;
( SRA->RA_PIS	  <> GetMemVar( "RA_PIS") )		.Or. ;
( SRA->RA_DDDFONE <> GetMemVar( "RA_DDDFONE") ) .Or. ;
( SRA->RA_MAE <> GetMemVar( "RA_MAE") ) .Or. ;
( SRA->RA_ESTCIVI <> GetMemVar( "RA_ESTCIVI") ) .Or. ;
( SRA->RA_NUMCP <> GetMemVar( "RA_NUMCP") ) .Or. ;
( SRA->RA_GRINRAI <> GetMemVar( "RA_GRINRAI") ) .Or. ;
( SRA->RA_ESTADO <> GetMemVar( "RA_ESTADO") ) .Or. ;
( SRA->RA_VIEMRAI <> GetMemVar( "RA_VIEMRAI") ) .Or. ;
( SRA->RA_CATEFD <> GetMemVar( "RA_CATEFD") ) .Or. ;
( SRA->RA_CARGO <> GetMemVar( "RA_CARGO") )}

If Eval( bCond )
	lAlterou := .T.
Endif

RestArea(aArea)

Return (lAlterou)

/*/{Protheus.doc} fVldCmpTab
Valida o compartilhamento de algumas tabelas com a tabela SRA.
@type		Function
@author		Silvio C. Stecca
@since		29/04/2020
@version	12.1.XX
@param
@return		lCmpTab, Logico, Retorna se o compartilhamento entre as tabelas estão ok.
/*/
Function fVldCmpTab()

	Local oButton2
	Local oGroup1
	Local oPanel1
	Local oSay1
	Local oCheckBo1
	Local lCheckBo1	:= .F.
	Local cSession	:= "AlertaSRA"
	Local lChkMsg	:= fwGetProfString(cSession, "MSG_JOBRAZ_" + cUserName, '', .T.) == ""
	Local cTabelas	:= ""
	Local aCmpTab	:= {}
	Local nCnt		:= 0

	Static oDlg

	// ENCONTRA O COMPARTILHAMENTO ENTRE AS TABELAS C9V/C9Y/CUP/T3L/CRQ/T80/T90/T1U/T1V/TOF/CUU/T3A
	aAdd(aCmpTab, {"SRA - Funcionários"							, FWModeAccess("SRA", 1) + FWModeAccess("SRA", 2) + FWModeAccess("SRA", 3)})
	aAdd(aCmpTab, {"C9V - Dados do Trabalhador"					, FWModeAccess("C9V", 1) + FWModeAccess("C9V", 2) + FWModeAccess("C9V", 3)})
	aAdd(aCmpTab, {"C9Y - Cadastro de Dependentes"				, FWModeAccess("C9Y", 1) + FWModeAccess("C9Y", 2) + FWModeAccess("C9Y", 3)})
	aAdd(aCmpTab, {"CUP - Cadastro Inicial do Vínculo"			, FWModeAccess("CUP", 1) + FWModeAccess("CUP", 2) + FWModeAccess("CUP", 3)})
	aAdd(aCmpTab, {"T3L - Trabalhador Substituido"				, FWModeAccess("T3L", 1) + FWModeAccess("T3L", 2) + FWModeAccess("T3L", 3)})
	aAdd(aCmpTab, {"CRQ - Cadastro de horário contratual"		, FWModeAccess("CRQ", 1) + FWModeAccess("CRQ", 2) + FWModeAccess("CRQ", 3)})
	aAdd(aCmpTab, {"T80 - Filiacao Sindical do Trabalhador"		, FWModeAccess("T80", 1) + FWModeAccess("T80", 2) + FWModeAccess("T80", 3)})
	aAdd(aCmpTab, {"T90 - Observações do contrato de trabalho"	, FWModeAccess("T90", 1) + FWModeAccess("T90", 2) + FWModeAccess("T90", 3)})
	aAdd(aCmpTab, {"T1U - Alteração de Dados Cadastrais"		, FWModeAccess("T1U", 1) + FWModeAccess("T1U", 2) + FWModeAccess("T1U", 3)})
	aAdd(aCmpTab, {"T1V - Alteração Contrato Trabalhador"		, FWModeAccess("T1V", 1) + FWModeAccess("T1V", 2) + FWModeAccess("T1V", 3)})
	aAdd(aCmpTab, {"T0F - Alteração Informação TSV"				, FWModeAccess("T0F", 1) + FWModeAccess("T0F", 2) + FWModeAccess("T0F", 3)})
	aAdd(aCmpTab, {"CUU - Informação TSV"						, FWModeAccess("CUU", 1) + FWModeAccess("CUU", 2) + FWModeAccess("CUU", 3)})
	aAdd(aCmpTab, {"T3A - Admissão Preliminar"					, FWModeAccess("T3A", 1) + FWModeAccess("T3A", 2) + FWModeAccess("T3A", 3)})

	// VERIFICA SE AS TABELAS ESTÃO COM O MESMO TIPO DE COMPARTILHAMENTO.
	For nCnt := 2 to Len(aCmpTab)
		If aCmpTab[nCnt, 2] != aCmpTab[1, 2]
			cTabelas += aCmpTab[nCnt, 1] + CRLF
		EndIf
	Next nCnt

	If lChkMsg .And. !Empty(cTabelas)
		DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0443) FROM 000, 000 TO 280, 550 COLORS 0, 16777215 PIXEL //"Atualização de dicionário"
			@ 000, 000 MSPANEL oPanel1 SIZE 375, 150 OF oDlg COLORS 0, 16777215 RAISED
			@ 005, 012 GROUP oGroup1 TO 115, 265 PROMPT OemToAnsi(STR0076) OF oPanel1 COLOR 0, 16777215 PIXEL //"Atenção"
			@ 013, 017 SAY oSay1 PROMPT + CRLF + OemToAnsi(STR0441) + CRLF + CRLF + cTabelas + CRLF + OemToAnsi(STR0442) SIZE 245, 200 OF oPanel1 COLORS 0, 16777215 PIXEL //'Foi liberada uma atualização de dicionário para a tabela RAZ no pacote de expedição contínua do RH (a partir do dia 27/03/2020) e também no pacote de atualização do eSocial (a partir de 04/2020) que permite a inclusão de mais de um vínculo para a mesma inscrição, mas de categorias diferentes. Clique em "Abrir Link" para consultar a documentação no TDN'
			@ 122, 012 CHECKBOX oCheckBo1 VAR lCheckBo1 PROMPT OEMToAnsi(STR0444) SIZE 067, 008 OF oPanel1 COLORS 0, 16777215 PIXEL //"Não exibir novamente"
			@ 122, 228 BUTTON oButton2 PROMPT OEMToAnsi(STR0445) SIZE 037, 012 OF oPanel1 PIXEL

			oButton2:bLClicked := {|| oDlg:End() }

		ACTIVATE MSDIALOG oDlg CENTERED

		If lCheckBo1
			fwWriteProfString(cSession, "MSG_JOBRAZ_" + cUserName, 'CHECKED', .T.)
		EndIf

	EndIf

Return .T.


/*/{Protheus.doc} fChkImg
Valida o tamanho da foto do funcionario na inclusao, copia, ou alteracao do registro
@type		Static Function
@author		Marcelo Silveira
@since		24/09/2020
@return		lRet, Logico, retorna verdadeiro se a imagem esta no padrao ou se o usuario confirmou a mensagem
/*/
Static Function fChkImg(nOpcao)

Local cPathPict		:= GetSrvProfString("Startpath","")
Local cCountries	:= "BRA" //Paises que utilizam o MeuRH
Local cExtensao		:= ".JPG"
Local lContinua		:= .T.
Local lRet 			:= .T.
Local nTamFile		:= 0
Local nTamMax		:= 204800 //200Kb
Local oFile			:= Nil
Local lMRHLoadImg	:= ExistBlock("MRHLoadImg")
Local cCodFil		:= ""
Local cCodMat		:= ""

DEFAULT nOpcao		:= 3

/*
As fotos exibidas no Meu RH são obtidas por meio do cadastro do funcionário.
Quando a foto é muito grande e supera 4MB o sistema trava na hora de fazer o login.
Essa validação visa informar aos usuários sobre o tamanho do arquivo e seus efeitos
*/
If cPaisLoc $ cCountries .And. !Empty( cBmpPict := Upper( AllTrim( M->RA_BITMAP ) ) )

	If nOpcao == 4 //Se for alteração.
		cCodFil := SRA->RA_FILIAL
		cCodMat := SRA->RA_MAT
	Else // Inclusão / Cópia
		cCodFil := xFilial("SRA")
		cCodMat := M->RA_MAT
	EndIf

	//Extrai a imagem do repositorio
	If RepExtract(cBmpPict,cPathPict+cBmpPict)

		//Pesquisa a imagem pelo padrao JPG, se nao encontrar pesquisa o padrao BMP
		If !File(cPathPict+cBmpPict+cExtensao)
			cExtensao := ".BMP"
			lContinua := File(cPathPict+cBmpPict+cExtensao)
		EndIf

		If lContinua

			oFile := FwFileReader():New(cPathPict+cBmpPict+cExtensao)

			If oFile:Open()
		    	nTamFile := oFile:getFileSize()
				cLine := oFile:FullRead()
				oFile:Close()

				If lMRHLoadImg
					nTamMax := ExecBLock("MRHLoadImg", .F. , .F. ,{ cCodFil, cCodMat, cBmpPict } )
				EndIf

				//Exclui o arquivo de imagem extraido na system
				fErase(cPathPict+cBmpPict+cExtensao)

				If nTamFile > nTamMax

					lRet := MsgYesNo( ;
							OemToAnsi(STR0449) + " " +; //O tamanho da imagem do funcionario supera
							cValToChar(nTamMax) + " " +;
							(STR0450) + " " + ; //Bytes
							(STR0451) + CRLF + CRLF + ; //Isso afeta o desempenho de rotinas executadas via Job/WebServices"
							OemToAnsi(STR0448) ) //"Deseja prosseguir?"

				EndIf

			EndIf

		EndIf

	EndIf

EndIf

Return lRet

/*/{Protheus.doc} CpoNoArray
Verifica se determinado campo foi informado no array da rotina automática
@type		Static Function
@author		martins.marcio
@since		20/09/2021
@return		lRet, Logico, retorna verdadeiro se PELO MENOS UM dos campos foi informado no array
/*/
Static Function CpoNoArray(aAutoOri, aCampos)

	Local lRet := .F.
	Local nI
	Default aAutoOri := {} // Array original enviado para a rotina automática
	Default aCampos := {"RA_SALARIO", "RA_ANTEAUM", "RA_CARGO", "RA_CATFUNC", "RA_CODFUNC"} // Campos que deseja verificar se foram informados no array

	If !Empty(aAutoOri)
		For nI := 1 To Len(aCampos)
			If aScan( aAutoOri , { |x| x[1] == aCampos[nI] } ) > 0
				lRet := .T.
				EXIT
			EndIf
		Next nI
	EndIf

Return lRet

/*/{Protheus.doc} fR33SRA()
Exibe mensagem informativa sobre compartilhamento da SRA.
@type		Static Function
@author		raquel.andrade
@since		15/10/2021
@return		lRet
/*/
Function fR33SRA()
Local aSays		   	:= {}
Local aButtons	   	:= {}
Local cTitulo		:= ""
Local nOpcA		  	:= 0
Local lRet			:= .F.
Local lGestPubl 	:= IIF(ExistFunc("fUsaGFP"),fUsaGFP(),.F.)


	If GetRpoRelease() == "12.1.033" .And. FWModeAccess("SRA", 3) == "C"

		If isBlind()
			//"Atenção"###"A tabela de Servidores (SRA) está com compartilhamento para Filiais como Compartilhado."###"A tabela de Funcionários (SRA) está com compartilhamento para Filiais como Compartilhado."
			Help(,,OemToAnsi(STR0245),,OemToAnsi(STR0482) + OemToAnsi(STR0480),1,0)
			lRet := .T.
		Else
			If lGestPubl
				cTitulo	:= OemToAnsi( STR0392 ) // Servidores
				aAdd(aSays,OemToAnsi(OemToAnsi(STR0482))) //"A tabela de Servidores (SRA) está com compartilhamento para Filiais como Compartilhado."
			Else
				cTitulo	:= 	If(cPaisLoc =="RUS", OemToAnsi( STR0368 ),OemToAnsi( STR0009 )) //"Contract Data"###"Cadastro de Funcionarios"
				aAdd(aSays,OemToAnsi(OemToAnsi(STR0479))) //"A tabela de Funcionários (SRA) está com compartilhamento para Filiais como Compartilhado."
			EndIf

			aAdd(aSays,OemToAnsi(OemToAnsi(STR0480))) //"Alterar para compartilhamento Exclusivo via módulo Configurador."
			aAdd(aSays,"")
			aAdd(aSays,OemToAnsi(STR0481)) //"Clique em Visualizar para consultar a documentacao no TDN. "
			aAdd(aSays,"")

			aAdd(aButtons, { 15 ,.T.,{||  ShellExecute("open","https://www.youtube.com/watch?v=yIgA-tHxBXA","","",1) } } )
			aAdd(aButtons, { 1, .T.,{|o| nOpcA := 1,FechaBatch() }} )
			FormBatch( cTitulo, aSays, aButtons )

			If nOpcA == 1 .Or. nOpcA == 0
				lRet := .T.
			EndIf
		EndIf
	EndIf

Return lRet

/*/{Protheus.doc} fGP010RBW()
Exibe a tela do cadastro de Temporários - GPEA927 - Tabela RBW.
@type		Function
@author		martins.marcio
@since		11/02/2022
@return		.T.
/*/
Function fGP010RBW(nOpc1,lAvisa)
Local aArea			:= GetArea()
Local aKeys			:= GetKeys()
Local lGPEA180		:= IsInCallStack("GPEA180")
Local lInclAnt		:= INCLUI
Local lAltAnt		:= ALTERA
Local cFNameBkp		:= FunName()

Default nOpc1		:= 0
Default lAvisa		:= .T.

	If nOpc1 == 3 .OR. nOpc1 == 4
		If !lGPEA180
			If lAvisa
				Aviso(OemtoAnsi(STR0076), OemtoAnsi(STR0484), {OemtoAnsi(STR0001)}, 2) //"Atencao" ## // "Baseado no Tipo de Contrato escolhido, apresentaremos o Cadastro de Temporários" ## "OK" ##
			EndIf
			SetFunName("GPEA927")
			FWExecView(OemtoAnsi(STR0485), "GPEA927", MODEL_OPERATION_UPDATE,,{||.T.}) //"Cadastro de Funcionarios Temporarios"
			INCLUI := lInclAnt
			ALTERA := lAltAnt
			SetFunName(cFNameBkp)
		EndIf
	EndIf

	RestKeys(aKeys , .T.)
	RestArea(aArea)

Return .T.

/*/{Protheus.doc} fGP010RS9()
Exibe a tela de Dados do Agente Publico - GPEA931 - Tabela RS9.
@type		Function
@author		martins.marcio
@since		24/08/2022
@return		.T.
/*/
Function fGP010RS9(nOpc1,lAvisa)
Local aArea			:= GetArea()
Local aKeys			:= GetKeys()
Local lGPEA180		:= IsInCallStack("GPEA180")
Local lInclAnt		:= .F.
Local lAltAnt		:= .F.
Local cFNameBkp		:= FunName()

Private lAudesp	:= SuperGetMv('MV_AUDESP',, .F.)
Private lCargSQ3 := SuperGetMv("MV_CARGSQ3",,.F.)

Default nOpc1		:= 0
Default lAvisa		:= .T.

	If nOpc1 == 3 .OR. nOpc1 == 4
		If !lGPEA180 .And. !IsBlind()
			If lAvisa
				Aviso(OemtoAnsi(STR0076), OemtoAnsi(STR0492), {OemtoAnsi(STR0001)}, 1) //"Atencao" ## // "Conforme o regime previdenciário escolhido, será apresentado o cadastro do Agente Público." ## "Confirma" ##
			EndIf
			lInclAnt := IIf(Type("INCLUI")<>"U", INCLUI, .F.)
			lAltAnt	 := IIf(Type("ALTERA")<>"U", ALTERA, .F.)
			SetFunName("GPEA931")
			FWExecView(OemtoAnsi(STR0493), "GPEA931", MODEL_OPERATION_UPDATE,,{||.T.}) //Dados Agente Publico
			INCLUI := lInclAnt
			ALTERA := lAltAnt
			SetFunName(cFNameBkp)
		EndIf
	EndIf

	RestKeys(aKeys , .T.)
	RestArea(aArea)

Return .T.

/*/{Protheus.doc} fChkCCT()
Valida se a função esta associada a CCT do sindicato
@type		Function
@author		Leandro Drumond
@since		05/04/2022
@return		.T.
/*/
Static Function fChkCCT()
Local aArea			:= GetArea()
Local cChave
Local lRet			:= .T.

If !Empty(M->RA_SINDICA) .and. !Empty(M->RA_CODFUNC)
	RCE->(DbSetOrder(1))
	RCE->(DbSeek(xFilial("RCE")+M->RA_SINDICA))
	If !Empty(RCE->RCE_CCT)
		DbSelectArea("RI4")
		RI4->(DbSetOrder(2)) //RI4_FILSRJ + RI4_CODSRJ

		cChave := xFilial("SRJ") + M->RA_CODFUNC

		lRet := .F.

		If RI4->(DbSeek(cChave))
			While RI4->(!Eof() .and. RI4_FILSRJ + RI4_CODSRJ == cChave)
				If RI4_CODCCT == RCE->RCE_CCT
					lRet := .T.
					Exit
				EndIf
				RI4->(DbSkip())
			EndDo
		EndIf

		If !lRet
			Help(,, OemToAnsi(STR0076),, + CRLF + OemToAnsi(STR0486) , 1, 0,,,,,, { + CRLF + OemToAnsi(STR0487)})//"Atencao" ## "A função selecionada não esta associada a CCT do sindicato. Operação não permitida." ### "Associe a função a CCT do sindicato ou desabilite o parâmetro MV_CCTFUNC"
		EndIf
	EndIf
EndIf

RestArea(aArea)

Return lRet

/*/{Protheus.doc} fPosEmpAct
	Función utilizada para posicionarse en el registro que se está editando
	cuando se selecciona un valor en el campo RA_SUPERVI.

	@type  Static Function
	@author marco.rivera
	@since 19/05/2022
	@version 1.0
	@param nOpc, Numérico, Opción utilizada para el mantenimiento de empleados.
	@example
	fPosEmpAct(nOpc)
/*/
Static Function fPosEmpAct(nOpc)

	Default nOpc	:= 3

	/*
	nOpc = 2 - Visualización
	nOpc = 3 - Inclusión
	nOpc = 4 - Modificación
	nOpc = 7 - Copiado
	*/

	If nOpc <> 3 //Si es diferente de inclusión
		DBSelectArea("SRA")
		SRA->(DbSetOrder(1)) //RA_FILIAL+RA_MAT+RA_NOME
		SRA->(MsSeek(xFilial("SRA")+M->RA_MAT)) //Se posiciona sobre el registro
	EndIf

Return .T.
