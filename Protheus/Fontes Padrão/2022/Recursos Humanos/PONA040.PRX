#INCLUDE "PONA040.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"

Static lPonaPo3Block
Static __lChkTnoOpc
Static __lCpoDataAlt
Static __lCpoUsuaAlt
Static lPnaBar   := ExistBlock( "PNA040BAR" )
Static lPnaBtn   := ExistBlock( "PNA040BTN" )
Static lPnaCel   := ExistBlock( "PNA040CEL" )
Static lPnaGrv   := ExistBlock( "PNA040GRV" )
Static lPnopcx   := ExistBlock( "PONOPCX" )
Static lPnaVal	 := ExistBlock( "PNA040VAL" )
Static lPort1510 := Port1510() 	//Verifica se Portaria 1510/2009 esta em vigor.
Static lIsBlind  := IsBlind()

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONA040  ³ Autor ³ Equipe Advanced RH    ³ Data ³22/03/1996³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Manuten‡„o no Arquivo de Marca‡”es                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAPON                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³14/04/14³      ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³        ³      ³que nao serao utilizados na P12.		  ³±±
±±³Luis Artuso ³06/08/14³TQENVL³Ajuste na utilizacao do F5 para nao gerar ³±±
±±³            ³        ³      ³errorlog.                     			  ³±±
±±³Luis Artuso ³11/08/14³TQGSV0³Ajuste para geracao de evento de hora     ³±±
±±³            ³        ³      ³extra inter jornada  entre periodos.	  ³±±
±±³Luis Artuso ³11/02/15³TRCDC1³Valida abert.arqs.do Fecham.: Pn090Open() ³±±
±±³Renan Borges³18/04/16³TUJU54³Ajuste para ao precisar F5 após uma marca-³±±
±±³            ³        ³      ³ção vazia sistema não mude a data.        ³±±
±±³Allyson M.  ³29/12/16³MRH-  ³Ajuste p/ resetar o flag de marcação ori- ³±±
±±³            ³        ³1226  ³ginal quando incluir uma marcação 	  	  ³±±
±±³Gabriel A.  ³09/01/16³MRH-  ³Ajuste na chamada do comando de           ³±±
±±³            ³        ³4382  ³fechamento das telas.                     ³±±
±±³Renan Borges³17/01/17³MRH-  ³Ajuste para lançar e apontar marcações cor³±±
±±³            ³        ³3465  ³retamente quando for alterada a regra de  ³±±
±±³            ³        ³      ³apontamento do funcionário, de saida para ³±±
±±³            ³        ³      ³entrada.                                  ³±±
±±³Willian U.  ³20/06/17³DRHPONTP-³Ajuste para impedir que a rotina trave ³±±
±±³            ³        ³849      ³ao utilizar uma tecla de atalho de     ³±±
±±³            ³        ³         ³função com uma célula em modo de       ³±±
±±³            ³        ³         ³edição.                                ³±±
±±³M. Silveira ³12/08/17³DRHPONTP-³Ajuste na P8DataVld() para nao permitir³±±
±±³            ³        ³1776     ³incluir marcacao fora do per. de apont.³±±
±±³João Balbino³13/10/17³MPRIMESP-³Ajuste na Marcação por celula para que ³±±
±±³            ³        ³11683    ³funcione a enchoice corretamente.      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Function PONA040()

PRIVATE aRotina 	:= MenuDef()

// - Valida se o usuário tem acesso ao lançamento de marcações
// - No período informado.
If BloqPer()

	Return (Nil)

EndIf

NewPONA040( "PONA040" )

Return (Nil)
/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ NewPona040()	³Autor³                   ³ Data ³30/03/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³ Programa principal separado para tratamento da funcao      ³
³          ³ MenuDef().                                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040, PONA180                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Function NewPONA040( cChamada )

Local aArea			:= GetArea()
Local aAreaAux		:= {}
Local aIndexSRA		:= {}
Local cFiltraSRA	:= ""

Private bFiltraBrw	:= {|| NIL }
Private cCadastro   := OemToAnsi( STR0005 ) // 'Manuten‡„o das Marca‡”es'
Private cProg		:= IF( cChamada == NIL , FunName() , cChamada )
Private dPerIni     := Ctod("//")
Private dPerFim     := Ctod("//")
Private lPona180	:= fContemStr( cProg , "PONA180" , .T. )
Private cSpaceNRep  := If(lPort1510,Space( GetSx3Cache( "P8_NUMREP" , "X3_TAMANHO" ) ),Nil)
Private cSpaceMoti  := If(lPort1510,Space( GetSx3Cache( "P8_MOTIVRG" , "X3_TAMANHO" ) ),Nil)
Private aButtons 	:= {}

If lPort1510
	cCadastro += fPortTit() //Complementa titulo da tela com dizeres referente a portaria.
EndIf

IF !( lPona180 )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa Variaveis Private para o Apontamento             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Private cApoCla := SuperGetMV( "MV_APOCLA" , NIL , "S" , cFilAnt )
	aAreaAux := SP8->( GetArea() )
Else
	aAreaAux := SPG->( GetArea() )
Endif

DEFAULT lPonapo3Block 	:= ExistBlock( "PONAPO3" )
DEFAULT __lChkTnoOpc	:= ( SuperGetMv("MV_TNOOPC",NIL,"N") == "S" )
DEFAULT __lCpoDataAlt	:= IF(lPort1510, .T., ( IF( ( ( SP8->(FIELDPOS( "P8_DATAALT" )) != 0 ) .and. ( SPG->(FIELDPOS( "PG_DATAALT" )) != 0 ) .and. ( SuperGetMv("MV_PONLOG",NIL,"N") == "S" ) ) ,.T. , .F. ) ) ) //Manter pois no momento campo existe apenas para Brasil - P12
DEFAULT __lCpoUsuaAlt	:= IF(lPort1510, .T., ( IF( ( ( SP8->(FIELDPOS( "P8_USUARIO" )) != 0 ) .and. ( SPG->(FIELDPOS( "PG_USUARIO" )) != 0 ) .and. ( SuperGetMv("MV_PONLOG",NIL,"N") == "S" ) ) ,.T. , .F. ) ) ) //Manter pois no momento campo existe apenas para Brasil - P12

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³So Executa se o Modo de Acesso dos Arquivos do Ponto estiverem OK e o Ca³
	³dastro de Funcionario Nao Estiver Vazio								 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( ValidArqPon() .and. ChkVazio("SRA") )
		Break
	EndIF

	Private aAlter      := {}
	Private aTabPadrao  := {}
	Private nColMarc    := SuperGetmv( "MV_COLMARC" , NIL , 2 , cFilAnt )
	Private nMV_COLMARC := 0

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica Numero de Elementos para as Colunas da GetDados    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( nColMarc == NIL )
		Break
	EndIF
	nColMarc    *= 2
	nMV_COLMARC := nColMarc

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cFiltraRh	:= ChkRh( cProg , "SRA" , "1" )
	bFiltraBrw 	:= { || FilBrowse( "SRA" , @aIndexSRA , @cFiltraRH ) }
	Eval( bFiltraBrw )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Browse do Cadastro de Funcionarios                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	dbSelectArea( "SRA" )
	mBrowse( 006 , 001 , 022 , 075 , "SRA" , NIL , NIL , NIL , NIL , NIL , fCriaCor() )

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	EndFilBrw( "SRA" , aIndexSra )

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura Dados de Entrada												 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	RestArea( aAreaAux )  // Restaura a area SP8/SPG

End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura Dados de Entrada												 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestArea( aArea )

Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn040Atu  ³ Autor ³ Equipe Advanced RH    ³ Data ³14/10/1997³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Programa de Atualiza‡„o das Marca‡”es                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pn040Alt(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn040Atu(cAlias,nReg,nOpcX,lRoboAut,aMarcRob, nOpcEs, aHorasRb, lForApRb)

Local aMarcacoes			:= {}
Local aColsRec				:= {}
Local aCloneMarc			:= {}
Local aKeys					:= GetKeys()
Local aAdvSize				:= {}
Local aInfoAdvSize			:= {}
Local aObjSize				:= {}
Local aObjCoords			:= {}
Local bNIL					:= { || NIL }
Local bSet15				:= { || NIL }
Local bSet24				:= { || NIL }
Local bSvSet15				:= { || NIL }
Local bSvSet24				:= { || NIL }
Local cOrdem     			:= ""
Local cTurno     			:= ""
Local cPrefix				:= ""
Local cSpaceGiro			:= ""
Local cSpaceFunc 			:= ""
Local cSpaceCust			:= ""
Local cSpaceApon			:= ""
Local cSpaceFlag			:= ""
Local cSpaceRelo			:= ""
Local cSpaceTpMc			:= ""
Local cSpacePerAp			:= ""
Local cMsg					:= ""
Local cAviso				:= ""
Local dDataOk    			:= Ctod("//")
Local dDataMarc				:= Ctod("//")
Local dPerIGeA				:= Ctod("//")
Local dPerFGeA				:= Ctod("//")
Local dPerIniPar			:= Ctod("//")
Local dPerFimPar			:= Ctod("//")
Local lApHeDtm	 			:= ( SuperGetMv( "MV_APHEDTM" , NIL , "N" , cFilAnt ) == "S" )
Local lMvMcAutMm			:= ( SuperGetMv( "MV_MCAUTMM" , NIL , "N" , cFilAnt ) == "S" )
Local lGetMarcAuto			:= ( SuperGetMv( "MV_GETMAUT" , NIL , "S" , cFilAnt ) == "S" )
Local nX		 			:= 0
Local nY					:= 0
Local nForX		 			:= 0
Local nColPos   			:= 1
Local nCol       			:= 0
Local nLin       			:= 0
Local nFor       			:= 0
Local nFor1      			:= 0
Local nSub       			:= 0
Local nPos		 			:= 0
Local nAut					:= 0
Local nAut2					:= 0
Local nAutLin				:= If( Empty(aMarcRob) , NIL, aMarcRob[1][8][1])
Local nAutCol				:= If( Empty(aMarcRob) , NIL, aMarcRob[1][8][4])
Local nMarAle				:= If( Empty(aMarcRob) , NIL, aMarcRob[1][8][5])
Local oDlg					:= NIL
Local oGet					:= NIL
Local oFont					:= NIL
Local oGroup				:= NIL
Local _lGrava				:= .T.
Local lRobMan				:= .T.
Local lBloqOk				:= .F.

Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 	:= {}
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

Local lCpoCCT		:=  SP4->(ColumnPos("P4_CODCCT") > 0)

Private aHeader    			:= {}
Private aCampos    			:= {}
Private aOrdena    			:= {}
Private aResult	   			:= {}
Private aCols       		:= {}
Private aCols1      		:= {}
Private aOldCols1   		:= {}
Private aLastCols1			:= {}
Private aLastApo			:= {}
Private aTabCalend  		:= {}
Private aRecsMarcAutDele	:= {}
Private cPerAponta			:= ""
Private bP8HoraWhen         := {|| {aCols1,oGet,n} }
Private lContinua			:= .F.
Private lGeraAuto			:= .F.
Private lP8PGIniCa			:= .T.
Private nUsado     			:= 0
Private nLenIni    			:= 0
Private nOpcA				:= 0
Private lHrInter			:= .F. // Sera utilizada em PONXAPO, para identificar se ha hora de inter jornada entre periodos (para detalhes, verif. ch.: TQECYB)


DEFAULT lPnaGrv	:= ExistBlock( "PNA040GRV" )
DEFAULT lPnopcx := ExistBlock( "PONOPCX" )
DEFAULT aMarcRob:= {}
DEFAULT lForApRb := .F.
DEFAULT aHorasRb:={}

aButtons := {}
Begin Sequence

	//Quando portaria estiver ativa, acumulado nao podera mais sofrer alteracoes
	If lPort1510 .and. lPona180
		nOpcx := 4
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Quando For Acumulado Verifica o Periodo que foi previamente  Selecionado³
	³pelo Usuario													 		 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPona180 )
		dPerIni := SPO->PO_DATAINI
		dPerFim := SPO->PO_DATAFIM
		IF ( Empty( dPerIni ) .or. Empty( dPerFim ) )
			Help( "" , 1 , "SPONOTPERC" )
			Break
		EndIF
	Else
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Caso Contrario Verifica se o Periodo eh Valido atraves de CheckPonmes() ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !( CheckPonMes( @dPerIni , @dPerFim , .F. , .T. , !lPona180 ) )
			Break
		EndIF

		//-- Verifica se existe bloqueio para abertura da tabela
		If !Pn090Open(@cMsg, @cAviso,.T.,DtoS(dPerIni) + DtoS(dPerFim))
			MsgStop( cMsg, cAviso )
			Break
		Else
			lBloqOk := .T.
		EndIf
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carregar o Conteudo do Periodo de Apontamento que sera Gravado no  Campo³
	³??_PAPONTA																 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cPerAponta := ( Dtos( dPerIni ) + Dtos( dPerFim ) )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Valida o Periodo de Apontamento para Digitacao das Informacoes          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !(;
			GetPonMesDat( @dPerIniPar , @dPerFimPar );
			.and.;
			ValidPonData(dPerIni,"P",dPerIniPar,dPerFimPar,lPona180,.T.);
		 )
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa Variaveis													 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cAlias		:= IF( lPona180 , "SPG" , "SP8" )
	cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
	cSpaceGiro	:= Space( Len( (cAlias)->(&(cPrefix+"GIRO") ) ) )
	cSpaceFunc 	:= Space( Len( (cAlias)->(&(cPrefix+"FUNCAO" ) ) ) )
	cSpaceCust	:= Space( Len( (cAlias)->(&(cPrefix+"CC" ) ) ) )
	cSpaceApon	:= Space( Len( (cAlias)->(&(cPrefix+"APONTA") ) ) )
	cSpaceFlag	:= Space( Len( (cAlias)->(&(cPrefix+"FLAG" ) ) ) )
	cSpaceRelo	:= Space( Len( (cAlias)->(&(cPrefix+"RELOGIO" ) ) ) )
	cSpaceTpMc	:= Space( Len( (cAlias)->(&(cPrefix+"TPMARCA" ) ) ) )
	cSpacePerAp	:= Space( Len( (cAlias)->(&(cPrefix+"PAPONTA" ) ) ) )
	dPerIGeA	:= dPerIni
	dPerFGeA	:= Min( dPerFim , dDataBase )

	If lPort1510
		cSpaceNumRep  := Space( Len( (cAlias)->(&(cPrefix+"NUMREP"  ) ) ) )
		cSpaceTpmCrep := Space( Len( (cAlias)->(&(cPrefix+"TPMCREP" ) ) ) )
		cSpaceTipoReg := Space( Len( (cAlias)->(&(cPrefix+"TIPOREG" ) ) ) )
		cSpaceMotiVrg := Space( Len( (cAlias)->(&(cPrefix+"MOTIVRG" ) ) ) )
	EndIf

   	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³  Ponto-de-Entrada 											³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPnopcx )
		If ( ValType( nRet := ExecBlock("PONOPCX",.F.,.F., { nOpcx } ) ) == "N" )
			nOpcx	 := nRet
			nOpcxAnt := nOpcx
		EndIf
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Deve Carregar as Marcacoes Automaticas.         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( lGetMarcAuto )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apenas Quando nao For Exclusao/Visualizacao, Nao Provir   de³
		³ Acumulados e se o parametro MV_MCAUTMM estiver com "S"	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) .or. lPona180 .or. !( lMvMcAutMm ) )
			lGetMarcAuto := .T.
		EndIF
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas de Marcacoes do Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !(;
			Pona040Locks( nOpcX , cAlias, {} );
			.and.;
	   		Pona040Locks( nOpcX , IF( lPona180 , "SPH" , "SPC" ) , {} );
	   		.and.;
	   		Pona040Locks( nOpcX , "SPK" , {} );
	   	)
       Break
    EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Calendario de Marcacoes do Funcionario            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !GetMarcacoes(	@aMarcacoes			,;	//01 -> Marcacoes dos Funcionarios
						@aTabCalend			,;	//02 -> Calendario de Marcacoes
						@aTabPadrao			,;	//03 -> Tabela Padrao
						NIL     			,;	//04 -> Turnos de Trabalho
						dPerIni 			,;	//05 -> Periodo Inicial
						dPerFim				,;	//06 -> Periodo Final
						SRA->RA_FILIAL		,;	//07 -> Filial
						SRA->RA_MAT			,;	//08 -> Matricula
						SRA->RA_TNOTRAB		,;	//09 -> Turno
						SRA->RA_SEQTURN		,;	//10 -> Sequencia de Turno
						SRA->RA_CC			,;	//11 -> Centro de Custo
						cAlias				,;	//12 -> Alias para Carga das Marcacoes
						.T.					,;	//13 -> Se carrega Recno em aMarcacoes
						.T.		 			,;	//14 -> Se considera Apenas Ordenadas
						NIL					,;  //15 -> Verifica as Folgas Automaticas
						NIL  				,;  //16 -> Se Grava Evento de Folga Mes Anterior
						lGetMarcAuto		,;	//17 -> Se Carrega as Marcacoes Automaticas
						@aRecsMarcAutDele	 ;	//18 -> Registros de Marcacoes Automaticas que deverao ser Deletados
					  )
		Help(" ",1,"TPADNCAD")
		Break
	EndIF



	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Visualizacao             	 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( nOpcX <> 4 )
		aEval( aMarcacoes , { |x| aAdd( aColsRec , x[AMARC_RECNO] ) } )
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas e Registros  do Funcionario			 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( Pona040Locks( nOpcX , cAlias, aColsRec ) )
       Break
    EndIF
	aColsRec := {}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Apenas Quando nao For Exclusao/Visualizacao ou Nao Provir de³
	³ Acumulados												  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( !( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) ) .and. !( lPona180 ) .and. ( lMvMcAutMm ) )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Define o Periodo para a Geracao das Marcacoes Automaticas   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF SRA->( RA_ADMISSA > dPerIni .and. RA_ADMISSA <= dPerFim )
			dPerIGeA := SRA->RA_ADMISSA
		EndIF
		IF SRA->( RA_DEMISSA < dPerFim .and. !Empty( RA_DEMISSA ) )
			dPerFGeA := SRA->RA_DEMISSA
		EndIF
		dPerIGeA	:= Max( dPerIGeA , dPerIni )
		dPerFGeA	:= Min( dPerFGeA , Min( dDataBase , dPerFim ) )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Salva Conteudo de aMarcacoes para Verificar Havera  Reaponta³
		³ Mento														  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aCloneMarc	:= aClone( aMarcacoes )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Gera marca‡oes Autom ticas.                                 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		PutMarcAuto( aTabCalend , @aMarcacoes , dPerIGeA , dPerFGeA , SRA->RA_FILIAL )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Compara aMarcacoes com aCloneMarc para ver se Havera Reaponta³
		³ tamento													  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	    lGeraAuto := !fCompArray( aMarcacoes , aCloneMarc )
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Cria array com as marca‡”es do Periodo para o funcion rio.  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aCampos := {}
	nFornX := Len( aMarcacoes )
	For nX := 1 To nFornX

		If lPort1510
			//Nao exibe marcacoes desconsideradas
			If aMarcacoes[ nX , AMARC_TPMCREP  	] == "D"
				Loop
			EndIf
		EndIf

		IF ( nPos := aScan( aTabCalend , { |x| x[CALEND_POS_ORDEM] == aMarcacoes[ nX , 03 ]  } ) ) > 0
			dDataOk := aTabCalend[ nPos , CALEND_POS_DATA_APO ]
		Else
			Loop
		EndIF

		aAdd(aCampos, Array( ELEMENTOS_AMARC ) ) //-- ** Array aCampos **
	 	nLenCampos := Len( aCampos )
	 	aCampos[nLenCampos,01] := aMarcacoes[ nX , AMARC_ORDEM		] 														//-- 01 Ordem da Marca‡„o
		aCampos[nLenCampos,02] := dDataOk																					//-- 02 Data de Referencia
		aCampos[nLenCampos,03] := aMarcacoes[ nX , AMARC_DATA		]														//-- 03 Data Real
		aCampos[nLenCampos,04] := aMarcacoes[ nX , AMARC_HORA		]														//-- 04 Hora da Ocorrˆncia
		aCampos[nLenCampos,05] := IF( !Empty( aMarcacoes[ nX , AMARC_RECNO ] ) , aMarcacoes[ nX , AMARC_RECNO ] , 0 )		//-- 05 Recno em SP8 ou SPG
		aCampos[nLenCampos,06] := aMarcacoes[ nX , AMARC_RELOGIO	]														//-- 06 Rel¢gio
		aCampos[nLenCampos,07] := aMarcacoes[ nX , AMARC_FLAG		]														//-- 07 Flag de Marcacao
		aCampos[nLenCampos,08] := aMarcacoes[ nX , AMARC_GIRO		] 														//-- 08 Giro
		aCampos[nLenCampos,09] := aMarcacoes[ nX , AMARC_FUNCAO		]														//-- 09 Fun‡„o
		aCampos[nLenCampos,10] := aMarcacoes[ nX , AMARC_CC			] 														//-- 10 Centro de Custo
		aCampos[nLenCampos,11] := aMarcacoes[ nX , AMARC_APONTA		]														//-- 11 Flag de Apontamento
		aCampos[nLenCampos,12] := aMarcacoes[ nX , AMARC_TIPOMARC	]														//-- 12 Tipo da Marcacao
		aCampos[nLenCampos,13] := aMarcacoes[ nX , AMARC_L_ORIGEM	]														//-- 13 Define Se a Marcacao Pode ou Nao ser (Re)Ordenada
		aCampos[nLenCampos,14] := aMarcacoes[ nX , AMARC_DTHR2STR	]														//-- 14 String de Data/Hora para aSort
		aCampos[nLenCampos,15] := aMarcacoes[ nX , AMARC_PERAPONTA	]														//-- 15 String de Data com o Periodo de Apontamento
		If lPort1510
			aCampos[nLenCampos,25] := IF(Empty(aMarcacoes[ nX , AMARC_DATAAPO 	]),dDataOk,aMarcacoes[ nX , AMARC_DATAAPO  	])  //-- 25 Data de Apontamento
			aCampos[nLenCampos,26] := aMarcacoes[ nX , AMARC_NUMREP  	]                                    				//-- 26 Némero do REP
			aCampos[nLenCampos,27] := aMarcacoes[ nX , AMARC_TPMCREP  	]                                    				//-- 27 Tipo de Marcação no REP
			aCampos[nLenCampos,28] := aMarcacoes[ nX , AMARC_TIPOREG 	]                                    				//-- 28 Tipo de Registro
			aCampos[nLenCampos,29] := aMarcacoes[ nX , AMARC_MOTIVRG  	]                                   				//-- 29 Motivo Modificação do Registro
		EndIf
		
		If lCpoCCT
			aCampos[nLenCampos, 39] := aMarcacoes[ nX , AMARC_FILCCT 	] 
			aCampos[nLenCampos, 40] := aMarcacoes[ nX , AMARC_CODCCT  	] 
		EndIF

	Next nX

	//-- Verifica qual ‚ o dia com mais marca‡”es
	nColMarc := nMV_COLMARC
	nUsado := nColMarc
	If ( nForX := Len(aCampos) ) > 0
		nCol   := 0
		cOrdem := aCampos[1,1]
		For nX := 1 To nForX
			If aCampos[nX,1] # cOrdem
				If nCol > nUsado
					nUsado := nCol
				EndIf
				nCol := 0
				cOrdem := aCampos[nX,1]
			EndIf
			nCol ++
		Next nX
		If nCol > nUsado
			nUsado := nCol
		EndIf
	EndIf

	//-- Redimencionar o n£mero de Colunas, caso existam muitas marca‡”es.
	If nUsado > nColMarc
		If nUsado%2 == 0
			nColMarc := nUsado
		Else
			nColMarc := nUsado + 1
		Endif
		Help(" ",1,"PN040NCOL",,Str(nColMarc/2,2),3,28)
	Endif

	//-- Monta o Array aHeader ( Cabeçalho )
	aAdd(aHeader,{ STR0018 , "M_DTREFE", Space(1),  12, 0, , CHR(251), "C", cAlias,NIL,NIL,NIL,NIL } ) // 'Data Ref.'
	aAdd(aHeader,{ STR0019 , "M_DTREAL", Space(1),   8, 0, "fPn040VDts(GetMemVar('M_DtReal'), o, n, nColMarc, @aCols, @aCols1)", CHR(251), "D", cAlias,NIL,NIL,NIL,NIL } ) // 'Data 1a E'
	aAlter := {}
	nSub := 0
	For nFor := 1 To  nColMarc
		If nFor%2 == 0
			nSub ++
			aAdd(aHeader,{;
							Str(nFor-nSub,IWLenNum(nFor))+STR0020 ,;
							"SAI"+StrZero(nFor-nSub,2),;// 'a S'
							"99.99",;
							5,;
							2,;
							"fPn040When(aCols1,o,n) .and. FCompZeros('SAI"+StrZero(nFor-nSub,2)+"').and.fPn040VHrs(GetMemVar('SAI"+StrZero(nFor-nSub,2)+"'),o,n,nColMarc,@aCols,@aCols1)",;
							CHR(251),;
							"C",;
							cAlias;
						};
				)
			If ( nOpcX # 3 .and. nOpcX # 4 )
				aAdd(aAlter, "SAI"+StrZero(nFor-nSub,2))
			EndIf
		Else
			aAdd(aHeader,{;
							Str(nFor-nSub,IWLenNum(nFor))+STR0024,;
							"ENT"+StrZero(nFor-nSub,2),;// 'a E'
							"99.99",;
							5,;
							2,;
							"fPn040When(aCols1,o,n) .and. FCompZeros('ENT"+StrZero(nFor-nSub,2)+"').and.fPn040VHrs(GetMemVar('ENT"+StrZero(nFor-nSub,2)+"'),o,n,nColMarc,@aCols,@aCols1)",;
							CHR(251),;
							"C",;
							cAlias;
						  };
				 )
			If ( nOpcX # 3 .and. nOpcX # 4 )
				aAdd(aAlter, "ENT"+StrZero(nFor-nSub,2))
			EndIf
		Endif
	Next nFor

	//-- Monta os Arrays aCols e aCols1 ( Conte£do )
	aCols  := {}
	aCols1 := {}
	nForX := ( dPerFim-dPerIni )
	For nX := 0 to nForX
		dDataRefe := (dPerIni + nX )
		dDataReal := (dPerIni + nX )

	    //-- Define a Ordem da Data Atual
		cOrdem := ""
		If ( nPos := aScan(aTabCalend, {|x| x[CALEND_POS_DATA_APO] == dDataRefe .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0
			cOrdem := aTabCalend[ nPos , CALEND_POS_ORDEM ]
			dDataReal := aTabCalend[ nPos , CALEND_POS_DATA ]
		Else
			Loop
		EndIf

		//-- Define a 1a Marca‡„o pertencente a Ordem corrente
		If (nPos := aScan(aCampos, {|x| x[1] == cOrdem .And. x[2] == dDataRefe})) > 0
			dDataRefe := aCampos[nPos, 2]
			dDataReal := aCampos[nPos, 3]
		EndIf

		aAdd(aCols , {})
		aAdd(aCols1, {})
		aAdd(aCols[Len(aCols)]  , DtoC(dDataRefe) + " - " + DiaSemana( dDataRefe , 3 ) )
		aAdd(aCols1[Len(aCols1)], dDataRefe)

		aAdd(aCols[Len(aCols)]  , dDataReal)
		aAdd(aCols1[Len(aCols1)], dDataReal)

		For nY := 1 to nColMarc
			If nPos > 0 .And. nPos <= Len(aCampos) .And. aCampos[nPos,1] == cOrdem .And. dDataRefe == aCampos[nPos,2]
				aAdd(aCols[Len(aCols)]    , StrZero(aCampos[nPos, 4],5,2) )
				aAdd(aCols1[Len(aCols1)]	,	{	StrZero(aCampos[nPos, 4],5,2)								,;	//01 - Hora da Marcacao
													aCampos[nPos,05]											,;	//02 - Recno() no SP8 ou SPG
													aCampos[nPos,08]											,;	//03 - Giro
													aCampos[nPos,09]											,;	//04 - Funcao
													aCampos[nPos,10]											,;	//05 - Centro de Custo
													aCampos[nPos,11]											,;	//06 - Flag de Apontamento
													aCampos[nPos,07]											,;	//07 - Flag de Marcacao
													aCampos[nPos,03]											,;	//08 - Data da Marcacao
													aCampos[nPos,06]											,;	//09 - Relogio
													aCampos[nPos,12]											,;	//10 - Tipo da Marcacao
													IF(Empty(aCampos[nPos,15]),cSpacePerAp,aCampos[nPos,15])	,;	//11 - Periodo de Apontamento
													IF(lPort1510,IF(Empty(aCampos[nPos,25]),dDataRefe,aCampos[nPos,25]),NIL)							,;  //12 - Data de Apontamento
													IF(lPort1510,aCampos[nPos,26],NIL)							,;  //13 - Némero do REP
													IF(lPort1510,aCampos[nPos,27],NIL)							,;  //14 - Tipo de Marcação no REP
													IF(lPort1510,aCampos[nPos,28],NIL)							,;  //15 - Tipo de Registro
													IF(lPort1510,aCampos[nPos,29],NIL)							,;  //16 - Motivo Modificação do Registro
													.F.															,;  //17 - Se marcacoes originais foram recarregadas
													If(lCpoCCT, aCampos[nPos, 39], "")							,;  //18
													If(lCpoCCT, aCampos[nPos, 40], "")					 		 ;  //19
												 };
					 )
			Else
				aAdd(aCols[Len(aCols)]	,	Space(5) )
				aAdd(aCols1[Len(aCols1)],	{	Space(5)						,;	//01 - Hora da Marcacao
												0								,;	//02 - Recno()
												cSpaceGiro						,;	//03 - Giro
												cSpaceFunc						,;	//04 - Funcao
												cSpaceCust						,;	//05 - Centro de Custo
												cSpaceApon						,;	//06 - Flag de Apontamento
												cSpaceFlag						,;	//07 - Flag de Marcacao
												dDataMarc						,;	//08 - Data da Marcacao
												cSpaceRelo						,;	//09 - Relogio
												cSpaceTpMc  					,;	//10 - Tipo da Marcacao
												cPerAponta						,;	//11 - Periodo de Apontamento
												IF(lPort1510,dDataRefe,NIL)		,;  //12 - Data de Apontamento
												IF(lPort1510,cSpaceNumRep,NIL)	,;  //13 - Némero do REP
												IF(lPort1510,cSpaceTpmCrep,NIL)	,;  //14 - Tipo de Marcação no REP
												IF(lPort1510,cSpaceTipoReg,NIL)	,;  //15 - Tipo de Registro
												IF(lPort1510,cSpaceMotiVrg,NIL)	,;  //16 - Motivo Modificação do Registro
												.F.								,;  //17 - Se marcacoes originais foram recarregadas
												""								,;  //18
												""						 		 ;  //19
											 };
					)
			EndIf
			nPos ++
		Next nY
		aAdd(aCols1[Len(aCols1)], cOrdem)

	Next nX

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Alimenta as Variaveis que serao Utilizadas no Apontamento   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aOldCols1	:= aClone( aCols1 )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Houve Geracao de Marcacoes Automaticas e  Altera³
	³ Flag para Forcar o Reapontamento e a Remontagem do Resultado³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lGeraAuto )
		aEval( @aCols1 , { |x| aEval( x , { |x| IF( ValType(x)=="A" , IF( x[7] == "A" .and. x[6] != "S" , x[7] := "M" , NIL ) , NIL ) } ) } )
	EndIF
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Periodo de Apontamento							  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aEval( @aCols1 , { |x| aEval( x , { |x| IF( ValType(x)=="A" , IF( Empty( x[11] ) ,  x[11] := cPerAponta , NIL ) , NIL ) } ) } )

	aLastCols1	:= aClone( aCols1 )
	nLenIni		:= Len(aCols1)


	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega os Apontamentos Anteriores						  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( ( lApHeDtm ) .and. ( nOpcX == 2 ) )
		aLastApo := {}
	Else
		aLastApo := GetLastApo( dPerIni , dPerFim , IF( lPona180 , "SPH" , "SPC" ) )
	EndIF

	//-- N„o permitir Exclus„o/Visualizac„o sem Registros
	IF Len(aCampos) == 0 .and. ( ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) ) .and. Empty( aLastApo ) )
		Help(" ",1,"A040SLANC")
		dbSelectArea("SRA")
		Break
	EndIF

	If !lIsBlind
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta as Dimensoes dos Objetos         					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aAdvSize		:= MsAdvSize()
		aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
		aAdd( aObjCoords , { 000 , 020 , .T. , .F. } )
		aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
		aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

		//Tratamento dados sensíveis
		If aOfusca[2]
			aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
			IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
				lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
			ENDIF

			IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
				lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
			ENDIF
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Mostra a Tela de Manutencao de Marcacoes             ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
		DEFINE MSDIALOG oDlg TITLE cCadastro FROM aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL				    							// 'Manuten‡„o das Marca‡”es'

			@ aObjSize[1,1] , aObjSize[1,2] 				GROUP oGroup TO aObjSize[1,3] ,(( aObjSize[1,4])*0.18 )	LABEL OemToAnsi(STR0039) OF oDlg PIXEL				// "Matricula:"
			oGroup:oFont:= oFont
			@ aObjSize[1,1] , (( aObjSize[1,4])*0.185 ) 	GROUP oGroup TO aObjSize[1,3],((aObjSize[1,4])*0.87)		LABEL OemToAnsi(STR0040) OF oDlg PIXEL	// "Nome:"
			oGroup:oFont:= oFont
			@ aObjSize[1,1] , ((aObjSize[1,4])*0.875) 		GROUP oGroup TO aObjSize[1,3] ,aObjSize[1,4]				LABEL OemToAnsi(STR0106) OF oDlg PIXEL						// "Admiss„o:"
			oGroup:oFont:= oFont

			@ ((aObjSize[1,1]) +10) , ((aObjSize[1,2]) * 2.5)	SAY StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT))				SIZE 050,10 OF oDlg PIXEL FONT oFont
			@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.2) 	SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME)) 	SIZE 146,10 OF oDlg PIXEL FONT oFont
			@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.89)	SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

			oGet := MsGetDados():New(aObjSize[2,1],aObjSize[2,2],aObjSize[2,3],aObjSize[2,4],nOpcX,"Pn040LinOk","Pn040TudOk","",NIL,aAlter,1,NIL,(dPerFim-dPerIni))

			bSet15 := { || nOpcA := IF( nOpcX == 3 , nOpcX , 1 ) , IF( oGet:TudoOk() , ( nOpcA := 1 , oDlg:End() ) , ( nOpcA := 0 , .F. ) ) }
			bSet24 := { || nOpcA := 3 , IF( oGet:TudoOk() , oDlg:End() , ( nOpcA := 0 , .F. ) ) }

			IF !(nOpcX == 2 .or. nOpcX == 3)
				bSet15 	:= {|| oDlg:End() }
			EndIF
			oDlg:bSet15 := bSet15
			bSvSet15 := SetKey( 15 , oDlg:bSet15 )
			oDlg:bSet24 := bSet24
			bSvSet24 := SetKey( 24 , oDlg:bSet24 )

		PonChoiBar(oGet,nOpcX,IF(nOpcX==2,"1",IF(nOpcX==3,"3","4")),.F.,lPona180)
		ACTIVATE MSDIALOG oDlg ON INIT enchoicebar(oDlg,bSet15, bSet24,NIL,aButtons) CENTERED
	Else
		If lRoboAut
			nOpcA  := 1
			nOpcAo := nOpcEs

			For nAut := 1 To aMarcRob[1][8][2] //Linhas Marcadas
				For nAut2 :=1 To aMarcRob[1][8][3] //Colunas Marcadas
					fMoveCols( oGet , nOpcAo , nMarAle, .T., nAutLin, nAutCol )
					nAutCol++
				Next
				nAutLin++
				nAutCol := aMarcRob[1][8][4]
			Next
		Else
			For nAut := 1 To aMarcRob[1][8][2] 	   //Linhas Marcadas
				For nAut2 :=1 To aMarcRob[1][8][3] //Colunas Marcadas
					lRoboAut	:= .T.
					fPn040VHrs( aHorasRb[1][nAut2], oGet , aMarcRob[1][8][2] , aMarcRob[1][8][9], aCols, aCols1, lRoboAut, nAutCol )
					If lForApRb
						F_ALT_T( oGet , nOpcEs , lForApRb )
					EndIf
					nAutCol++
				Next
				nAutLin++
				nAutCol := aMarcRob[1][8][4]
			Next

		EndIf
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	SetKey( 15	    , IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
	SetKey( 24	    , IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )
	RestKeys( aKeys , .T. )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada para permitir ou não a gravacao			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPnaGrv )
		IF ( ValType( lRet := ExecBlock( "PNA040GRV",.F.,.F., { cAlias, cPrefix, nOpcX } ) ) == "L" )
			_lGrava    := lRet
			lRet	   := NIL
		EndIF
	EndIF

	If _lGrava
		If ( nOpcA == 1 ) .Or. lRoboAut
			Pn040Grava(cAlias,nOpcX,aCampos)
			//-- Processa Gatilhos
			EvalTrigger()
		Endif
	Endif

End Sequence

//Exclui registro de bloqueio lógico
If lBloqOk
	Pnm090UnlockPer( SRA->RA_FILIAL, .F., DtoS(dPerIni) + DtoS(dPerFim), SRA->RA_MAT )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Libera Retgistros Locados		                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
FreeLocks( cAlias , NIL , .T. )
FreeLocks( IF( lPona180 , "SPH" , "SPC" ) , NIL , .T. )
FreeLocks( "SPK" , NIL , .T. )

dbSelectArea("SRA")

Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³pn040LinOk³ Autor ³ J. Ricardo            ³ Data ³20/02/1995³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Critica linha digitada                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn040LinOk(o)

Local lRet := .T.
Local nVal:= n

If lPnaVal
	lRet:=ExecBlock( "PNA040VAL" , .F. , .F. , { aClone( aCols1 ) , aClone( aOldCols1 ), aClone( aTabCalend ), nVal } )
Endif

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn040TudOk³ Autor ³ Equipe Advanced RH    ³ Data ³20/02/1995³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn040TudOk(o)
Local bNIL			:= { || NIL }
Local bSvSet15		:= SetKey( 15 )
Local bSvSet24		:= SetKey( 24 )
Local cOpcA			:= ""
Local lRet			:= .T.
Local lMsgMcImpar	:= ( SuperGetMv( "MV_MSGMIMP" , NIL , "N" , cFilAnt ) == "S" )
Local nX			:= 0
Local nForX			:= 0
Local nY			:= 0
Local nForY			:= 0
Local nVezes		:= 0
Local nVazios		:= 0
Local nValidos		:= 0
Local nPos 			:= 0

//-- Variaveis ja inicializadas.
cOpcA     := StrZero(nOpcA,1)
lContinua := .F.

//-- Confirma / Redigita
IF !( cOpcA $ "0ú3" )
	Begin Sequence

		If lPort1510
			nForX := Len(aCols1)
			For nX := 1 to nForX
				nForY := Len(aCols1[nX])
				For nY := 3 to nForY
					IF ( ( ValType( aCols1[ nX , nY ] ) == "A" ) .and. ( aCols1[nX,nY,14] == "D" .or. aCols1[nX,nY,16] == "I" ) .and. ( Empty(aCols1[nX,nY,17]) ) )
						MsgAlert( STR0306 , STR0108 ) //"Campo motivo deve ser preenchido para todas as marcações informadas ou desconsideradas" ### Atenção
						Return(.F.)
					EndIf
				Next
			Next
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se desejar Mostrar Aviso de Marcacoes Impares                 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( lMsgMcImpar )
			//-- Nao Permite Datas com Marcacoes impares.
			nForX := Len(aCols1)
			For nX := 1 To nForX
				nVazios  := 0
				nValidos := 0
				aEval(aCols1[nX],{ |x| IF(Empty(x[1]),nVazios++,nValidos++)},3,nColMarc)
				IF nValidos%2 > 0
					IF !( lRet := !MsgNoYes( OemToAnsi(STR0042)  + " " + OemToAnsi( STR0004 ) , OemToAnsi(STR0041) ) )	//'Existe um ou mais dias com numero de marcacoes Impar'###'Redigita?'###"Aten‡„o"
						o:Refresh()
						o:nAt       := nX
						o:nColPos   := 1
						o:nRowPos   := IF(nX<=12,nX,If(nX>=(Len(aCols1)-11),12-(Len(aCols1)-nX),6))
						n           := nX
					EndIF
					Break
				EndIF
			Next nX
		EndIF
	End Sequence
Else //-- Abandona
	//-- Caso tenham ocorrido altera‡”es, adverte sobre o Abandono sem Grava‡„o (Windows)
	IF !fCompArray( aCols1 , aOldCols1 )
		lRet := !MsgNoYes( OemToAnsi(STR0037)  + " " + OemToAnsi( STR0004 ) , OemToAnsi(STR0036) )	//'Vo‡ˆ est  prestes a perder as altera‡”es realizadas.'###'Redigita?'###"Aten‡„o"
	EndIF
EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
SetKey( 15	, IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
SetKey( 24	, IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn040Grava³ Autor ³ Equipe Advanced RH    ³ Data ³24/04/1996³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Efetua a Grava‡„o ou a Exclus„o dos Aponamentos e Marca‡”es³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn040Grava(cAlias,nOpcX,aCampos)

Local aRecOld		:= {}
Local aRecAtu		:= {}
Local aMarcacoes	:= {}
Local cTurno    	:= ""
Local cOrdem		:= ""
Local cCusto		:= SRA->RA_CC
Local cPrefix		:= ""
Local cFilFunc		:= ""
Local cMatFunc		:= SRA->RA_MAT
Local cFilSPC		:= ""
Local cFilSPCMat	:= ""
Local cMsgErr		:= ""
Local cSpaceIdOrg   := ""
Local cMotDes		:= ""
Local dDataAtu  	:= CtoD("//")
Local lGrava		:= ( Len( aLastApo ) == 0 )
Local lReaponta		:= .F.
Local lGoto			:= .T.
Local lModMarc		:= .F.
Local lSPCDelInfo	:= .F.
Local lClassifica	:= .F.
Local nX        	:= 0
Local nForX			:= 0
Local nY        	:= 0
Local nPos			:= 0
Local nSerAtu   	:= 0
Local nSerAnt   	:= 0
Local nColMarc2		:= ( nColMarc + 2 )
Local nColMarc3		:= ( nColMarc + 3 )

DEFAULT __lChkTnoOpc	:= SuperGetMv("MV_TNOOPC",NIL,"N") == "S"

cAlias				:= IF( lPona180 , "SPG" , "SP8" )
cPrefix				:= ( PrefixoCpo( cAlias ) + "_" )
cFilFunc			:= fFilFunc(cAlias)
cFilSPC				:= fFilFunc("SPC")
cFilSPCMat			:= ( cFilSPC + cMatFunc )

If lPort1510
	cSpaceIdOrg := Space(GetSx3Cache( "P8_IDORG" , "X3_TAMANHO" ) )
EndIf

IF ( cAlias == "SP8" ) //Apenas Quando nao For Acumulado

	//-- Atualiza‡„o dos Apontamentos no SPC
	If ( nOpcX == 2 )
		IF ( cApoCla == "S" )

	        If ( lReaponta := (!fCompArray(aCols1,aLastCols1).or.Empty(aResult).or.lGeraAuto) )	 	//Reprocessa o Apontamento
			 	 aOrdena 	:= {}
                 aResult	:= {}
            Endif

			PreparaCla(	@aOrdena		,;	//Array com as Marcacoes
						@aResult		,;	//Array com os Resultados
						nColMarc		,;  //Numero de Colunas de Marcacoes
						lGrava			,;  //Grava o Apontamento
						lReaponta 	 	;	//Reprocessa o Apontamento
					  )

			IF !( lGrava ) .or. Empty(aResult) //Carregar Apenas os Valores Alterados no Apontamento
				IF ( lReaponta )
					GetNewResult( @aResult , aLastApo , aCols1 , aLastCols1 )
				EndIF
				//Neste Caso a PreparaCla Apenas Ira Gravar o Apontamento
				PreparaCla(	@aOrdena											,;	//Array com as Marcacoes
							@aResult											,;	//Array com os Resultados
							nColMarc											,;  //Numero de Colunas de Marcacoes
							.T.													,;  //Grava o Apontamento
							.F.													 ;	//Reprocessa o Apontamento
						  )

			EndIF
		EndIF
	//-- Exclus„o dos Apontamentos no SPC
	ElseIf ( nOpcX == 3 )
		//""Excluir, alˆm dos apontamentos calculados pelo sistema, os apontamentos informados pelo usu rio?"
		IF ( SPC->( dbSeek( cFilSPCMat , .F. ) ) )
			lSPCDelInfo := MsgNoYes( OemToAnsi( STR0120 ) , cCadastro )
			CursorWait()
				Begin Transaction
					SP8DelSPC( dPerIni , dPerFim , cFilSPC , cMatFunc , lSPCDelInfo )
				End Transaction
			CursorArrow()
		EndIF
	EndIf

	DbSelectArea(cAlias)

EndIF

//Guarda os Recnos do aOldCols1 para verificar se ouve alteracao de ordem
//em relação a aCols1
If lPort1510
	nForX := Len(aOldCols1)
	For nX := 1 to nForX
		For nY := 3 To nColMarc2
			If !Empty(aOldCols1[nX,nY,2])
				aAdd(aRecOld, {nX,nY,aOldCols1[nX,nY,2]})
			EndIf
			If !Empty(aCols1[nX,nY,2])
				aAdd(aRecAtu, {nX,nY,aCols1[nX,nY,2]})
			EndIf
		Next nY
	Next nX
EndIf


/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Deleta os Registros de Marcacoes Automaticas que foram  recar³
³ regadas													   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
PonDelRecnos( cAlias , aRecsMarcAutDele )

Begin Transaction
	nForX := Len(aCols1)
	For nX := 1 to nForX

		//-- Data da 1a Marca‡„o da Ordem
		dDataAtu := aCols1[nX, 2]

		For nY := 3 To nColMarc2

			//-- Quando o campo Iniciou e Finalizou em Branco, ‚ ignorado
			If Empty(aCols1[nX, nY, 1]) .and. Empty(aOldCols1[nX, nY, 1])
				Loop
			EndIf

			//-- Transforma a Hora Atual e a Anterior em N£mero de S‚rie
			nSerAtu  := If( Empty(aCols1[nX, nY, 1]), 0, fDHtoNS(,Val(aCols1[nX, nY, 1])) )
			nSerAnt  := If( Empty(aCols1[nX, nY, 1]), 0, fDHtoNS(,Val(aCols1[nX, If(nY>3,(nY-1),nY), 1])) )
			dDataAtu += If(nSerAtu<nSerAnt,1,0)

			IF ( nPos := aScan( aTabCalend , { |x| x[CALEND_POS_ORDEM] == aCols1[nX, nColMarc3] } ) ) > 0
				cTurno := aTabCalend[ nPos , CALEND_POS_TURNO ]
				cOrdem := aTabCalend[ nPos , CALEND_POS_ORDEM ]
			EndIF

			//-- Atualiza‡„o das Marca‡”es no SP8 ou SPG
			If ( nOpcX == 2 )

				IF ( ( cAlias == "SP8" ) .and. ( cApoCla == "S" ) ) //So Carrega Flag de Apontamento quando apontamento estiver setado
					IF ( nPos := aScan( aOrdena , { |x| x[AMARC_DATA]	== dDataAtu					.and.; //Data
														x[AMARC_HORA]	== Val(aCols1[nX, nY, 1])	.and.; //Hora
														x[AMARC_ORDEM]	== cOrdem						 ; //Ordem
												  };
										);
				 		) > 0
						aCols1[ nX , nY , 06] := aOrdena[ nPos , AMARC_APONTA	]
						aCols1[ nX , nY , 10] := aOrdena[ nPos , AMARC_TIPOMARC	]
						aCols1[ nX , nY , 12] := aOrdena[ nPos , AMARC_DATAAPO	]
					EndIF
				EndIF

				If ( lModMarc := ( aCols1[nX, 02] # aOldCols1[nX, 02] ) ) .or. ;
				   ( lModMarc := ( aCols1[nX, nY, 01] # aOldCols1[nX, nY, 01] ) ) .or. ;
				   ( aCols1[nX, nY, 06] # aOldCols1[nX, nY, 06] ) .or. ;
				   ( aCols1[nX, nY, 11] # aOldCols1[nX, nY, 11] ) .or. ;
				   ( lPort1510 .and. !( ( nPos := aScan( aRecAtu , { |x| x[3] == aOldCols1[nX, nY, 2] } ) ) > 0 ) )

					//-- Inclui Marca‡”es ( Alt+Ins )
					If ValType(aCols1[nX,nY,17]) == "L" .and. aCols1[nX,nY,17]
						If lPort1510
							If !Empty(aCols1[nX, nY, 2])
								(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
								If RecLock(cAlias,.F.)
									(cAlias)->(&(cPrefix+"TPMCREP"))	:= Space(1)
									(cAlias)->(&(cPrefix+"MOTIVRG"))	:= cSpaceMoti
									(cAlias)->(MsUnLock())
								EndIf
							EndIf

							IF ( lGoto := !Empty( aOldCols1[nX, nY, 2] ) ) .and. aOldCols1[nX, nY, 15] <> "O"  .and. aOldCols1[nX, nY, 14] == "D"
								( cAlias )->(dbGoto(aOldCols1[nX, nY, 2]))
								IF RecLock(cAlias,.F.)
									IF !( cAlias )->( FkDelete( @cMsgErr ) )
										RollBackDelTran( cMsgErr )
									EndIF
									( cAlias )->( MsUnLock() )
								EndIF
							ElseIF ( lGoto := !Empty( aOldCols1[nX, nY, 2] ) ) .and. aOldCols1[nX, nY, 15] == "O"  .and. aOldCols1[nX, nY, 14] == "D"
								( cAlias )->(dbGoto(aOldCols1[nX, nY, 2]))
								cMotDes := aOldCols1[ nX , nY , 16 ]
								IF RecLock(cAlias,.F.)
									(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
									(cAlias)->(&(cPrefix+"MOTIVRG"))	:= cMotDes
								   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
									(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
									(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
								    ( cAlias )->( MsUnLock() )
							    EndIf
							EndIF
						Endif
					ElseIf ( ( aOldCols1[nX, nY, 2] == 0 ) .and. !Empty(aCols1[nX, nY, 1]) .and. ( ( lPort1510 .and. Empty(aCols1[nX, nY, 2]) ) .or. !lPort1510 ) )
						IF RecLock(cAlias,.T.)
							(cAlias)->(&(cPrefix+"FILIAL"))		:= cFilFunc
							(cAlias)->(&(cPrefix+"MAT"))		:= cMatFunc
							(cAlias)->(&(cPrefix+"TURNO"))		:= cTurno
							(cAlias)->(&(cPrefix+"DATA"))		:= IF( Empty( aCols1[ nX , nY , 08 ] ) , dDataAtu , aCols1[ nX , nY , 08 ] )
							(cAlias)->(&(cPrefix+"ORDEM"))		:= aCols1[ nX , nColMarc3 ]
							(cAlias)->(&(cPrefix+"FLAG"))		:= IF(Empty(aCols1[ nX , nY , 07 ]),"I",IF(lModMarc,"M",aCols1[ nX , nY , 07 ]))
							(cAlias)->(&(cPrefix+"HORA"))		:= Val(aCols1[ nX , nY , 01 ] )
							(cAlias)->(&(cPrefix+"GIRO"))		:= aCols1[ nX , nY , 03 ]
							(cAlias)->(&(cPrefix+"FUNCAO"))		:= aCols1[ nX , nY , 04 ]
							(cAlias)->(&(cPrefix+"CC"))			:= IF( Empty( aCols1[ nX , nY , 05] ) , cCusto , aCols1[ nX , nY , 05 ] )
							(cAlias)->(&(cPrefix+"APONTA"))		:= aCols1[ nX , nY , 06 ]
							(cAlias)->(&(cPrefix+"RELOGIO"))	:= aCols1[ nX , nY , 09 ]
							(cAlias)->(&(cPrefix+"TPMARCA"))	:= aCols1[ nX , nY , 10 ]
							(cAlias)->(&(cPrefix+"PAPONTA"))	:= aCols1[ nX , nY , 11 ]
							If lPort1510
								(cAlias)->(&(cPrefix+"DATAAPO"))	:= aCols1[ nX , nY , 12 ]
								(cAlias)->(&(cPrefix+"NUMREP" ))	:= aCols1[ nX , nY , 13 ]
								(cAlias)->(&(cPrefix+"TPMCREP"))	:= aCols1[ nX , nY , 14 ]
								(cAlias)->(&(cPrefix+"TIPOREG"))	:= aCols1[ nX , nY , 15 ]
								(cAlias)->(&(cPrefix+"MOTIVRG"))	:= aCols1[ nX , nY , 16 ]
								(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
								(cAlias)->(&(cPrefix+"IDORG"  ))	:= cSpaceIdOrg
							EndIf
							If __lCpoDataAlt .And. __lCpoUsuaAlt
							   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
								(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
							EndIf
							( cAlias )->( MsUnLock() )
						EndIF
						//-- Exclui Marca‡”es ( Alt+Del )
					ElseIf Empty(aCols1[nX, nY, 1])
						If lPort1510
							IF ( lGoto := !Empty( aOldCols1[nX, nY, 2] ) )
								( cAlias )->(dbGoto(aOldCols1[nX, nY, 2]))
								IF RecLock(cAlias,.F.)
									//Se o registro for original, marca como desconsiderado
									//Do contrario, deleta a marcacao
									If (cAlias)->(&(cPrefix+"TIPOREG")) == "O"
										cMotDes := aOldCols1[ nX , nY , 16 ]
										If Empty(aOldCols1[ nX , nY , 16 ])
											//Se marcacao existir no aCols1
											If !( aOldCols1[ nX , nY , 15 ] == "O" .and. !( nPos := aScan( aRecAtu , { |x| x[3] == aOldCols1[nX, nY, 2] } ) ) > 0 )
												(cAlias)->(&(cPrefix+"ORDEM"))   := StrZero( aRecAtu[ nPos, 1 ], 2 )
												(cAlias)->(&(cPrefix+"DATAAPO")) := aCols1[ aRecAtu[ nPos, 1 ], 1]
												lClassifica := .T.
												( cAlias )->( MsUnLock() )
												Loop
											Else
												cMotDes := aOldCols1[ nX , nY-1 , 16 ]
											EndIf
						   				EndIf
										(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
										(cAlias)->(&(cPrefix+"MOTIVRG"))	:= cMotDes
									   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
										(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
										(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
									ElseIf aOldCols1[nX, nY, 14] == "D"
										IF !( cAlias )->( FkDelete( @cMsgErr ) )
											RollBackDelTran( cMsgErr )
										EndIF
									EndIf
									( cAlias )->( MsUnLock() )
								EndIF
							EndIF
						Else
							IF ( lGoto := !Empty( aOldCols1[nX, nY, 2] ) )
								( cAlias )->(dbGoto(aOldCols1[nX, nY, 2]))
								IF RecLock(cAlias,.F.)
									IF !( cAlias )->( FkDelete( @cMsgErr ) )
										RollBackDelTran( cMsgErr )
									EndIF
									( cAlias )->( MsUnLock() )
								EndIF
							EndIF
						EndIf
					//-- Altera Marca‡”es ( Alt+G ou Marca‡”es Alteradas )
					Else
						If ( lGoto := !Empty( aOldCols1[nX, nY, 2] ) )
							If lPort1510
								(cAlias)->(dbGoto(aOldCols1[nX, nY, 2]))
								IF RecLock(cAlias,.F.)
									//Se marcacao for original e motivo de desconsideracao estiver preenchido
									// OU
									//Marcacao nao existir no aCols1
									If ( aOldCols1[ nX , nY , 15 ] == "O" .and. !Empty(aOldCols1[ nX , nY , 16 ]) ) .OR. ;
									   ( aOldCols1[ nX , nY , 15 ] == "O" .and. !( nPos := aScan( aRecAtu , { |x| x[3] == aOldCols1[nX, nY, 2] } ) ) > 0 )
										(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
										(cAlias)->(&(cPrefix+"MOTIVRG"))	:= If (Empty(aOldCols1[ nX , nY , 16 ]), aOldCols1[ nX , nY-1 , 16 ] , aOldCols1[ nX , nY , 16 ])
									   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
										(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
										(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
									ElseIf !(aOldCols1[ nX , nY , 15 ] == "O") .and. (aOldCols1[ nX , nY , 14 ] == "D")
										IF !( cAlias )->( FkDelete( @cMsgErr ) )
											RollBackDelTran( cMsgErr )
										EndIF
									Else
	   									If ( nPos := aScan( aRecOld , { |x| x[3] == aCols1[nX, nY, 2] } ) ) > 0
											If ( ( aOldCols1[aRecOld[nPos,1],aRecOld[nPos,2],12] <> aCols1[nX,1] ) .or. ( aOldCols1[aRecOld[nPos,1],nColMarc3 ] <> aCols1[ nX , nColMarc3 ] ) )
												( cAlias )->( MsUnLock() )
												(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
												IF RecLock(cAlias,.F.)
													(cAlias)->(&(cPrefix+"ORDEM"))   := aCols1[ nX , nColMarc3 ]
													(cAlias)->(&(cPrefix+"DATAAPO")) := aCols1[nX,1]
													(cAlias)->(&(cPrefix+"TPMARCA")) := aCols1[ nX,nY,10 ]
													lClassifica := .T.
													( cAlias )->( MsUnLock() )
												EndIf
												Loop
											Else // Atualizo apenas o tipo de marcação (P8_TPMARCA)
												( cAlias )->( MsUnLock() )
												( cAlias)->(dbGoto(aCols1[nX, nY, 2]))
												IF RecLock( cAlias,.F. )
													(cAlias)->(&(cPrefix+"TPMARCA")) := aCols1[ nX,nY,10 ]
													lClassifica := .T.
													( cAlias )->( MsUnLock() )
												EndIf
											EndIf
										EndIf
									EndIf
									( cAlias )->( MsUnLock() )
									If ( Empty(aCols1[nX, nY, 2]) )
										If !(RecLock(cAlias,.T.))
											Loop
										EndIf
									Else
										If aCols1[ nX , nY , 15 ] == "O" .and. Empty(aCols1[ nX , nY , 16 ])
											(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
											If !( (cAlias)->(&(cPrefix+"TPMCREP")) == aCols1[ nX , nY , 14 ] )
												If RecLock(cAlias,.F.)
													(cAlias)->(&(cPrefix+"TPMCREP"))	:= Space(1)
													(cAlias)->(&(cPrefix+"MOTIVRG"))	:= cSpaceMoti
													(cAlias)->(MsUnLock())
												EndIf
											EndIf
											Loop
										Else
											(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
											If !(RecLock(cAlias,.F.))
												Loop
											EndIf
										EndIf
									EndIf
								EndIF
							Else
								(cAlias)->(dbGoto(aOldCols1[nX, nY, 2]))
								If !(RecLock(cAlias,.F.))
									Loop
								EndIf
							EndIf

							IF !Empty(aCols1[nX, nY, 1])

								(cAlias)->(&(cPrefix+"FILIAL"))		:= cFilFunc
								(cAlias)->(&(cPrefix+"MAT"))		:= cMatFunc
								(cAlias)->(&(cPrefix+"TURNO"))		:= cTurno
								(cAlias)->(&(cPrefix+"GIRO"))		:= aCols1[ nX , nY , 03 ]
								(cAlias)->(&(cPrefix+"FUNCAO"))		:= aCols1[ nX , nY , 04 ]
								(cAlias)->(&(cPrefix+"CC"))			:= IF( Empty( aCols1[ nX , nY , 05 ] ) , cCusto , aCols1[ nX , nY , 05 ] )
								(cAlias)->(&(cPrefix+"DATA"))		:= IF( Empty( aCols1[ nX , nY , 08 ] ) , dDataAtu , aCols1[ nX , nY , 08 ] )
								(cAlias)->(&(cPrefix+"ORDEM"))		:= aCols1[ nX , nColMarc3 ]
								(cAlias)->(&(cPrefix+"FLAG"))		:= IF(Empty(aCols1[ nX , nY , 07 ]),"M",IF(lModMarc,"M",aCols1[ nX , nY , 07 ]))
								(cAlias)->(&(cPrefix+"HORA"))		:= Val(aCols1[ nX , nY , 01 ])
								(cAlias)->(&(cPrefix+"APONTA"))		:= aCols1[ nX , nY , 06 ]
								(cAlias)->(&(cPrefix+"RELOGIO"))	:= aCols1[ nX , nY , 09 ]
								(cAlias)->(&(cPrefix+"TPMARCA"))	:= aCols1[ nX , nY , 10 ]
								(cAlias)->(&(cPrefix+"PAPONTA"))	:= aCols1[ nX , nY , 11 ]
								If lPort1510
									(cAlias)->(&(cPrefix+"DATAAPO"))	:= aCols1[ nX , nY , 12 ]
									(cAlias)->(&(cPrefix+"NUMREP" ))	:= aCols1[ nX , nY , 13 ]
									(cAlias)->(&(cPrefix+"TPMCREP"))	:= aCols1[ nX , nY , 14 ]
									(cAlias)->(&(cPrefix+"TIPOREG"))	:= aCols1[ nX , nY , 15 ]
									(cAlias)->(&(cPrefix+"MOTIVRG"))	:= aCols1[ nX , nY , 16 ]
									(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
								EndIf
								If __lCpoDataAlt .And. __lCpoUsuaAlt
								   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
									(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
								EndIf
							Else
								IF !( cAlias )->( FkDelete( @cMsgErr ) )
									RollBackDelTran( cMsgErr )
								EndIF
							EndIF
							( cAlias )->( MsUnLock() )
						ElseIF !Empty(aCols1[nX, nY, 1])
							If lPort1510 .and. !Empty(aCols1[nX, nY, 2])
								If ( nPos := aScan( aRecOld , { |x| x[3] == aCols1[nX, nY, 2] } ) ) > 0
									If ( ( aOldCols1[aRecOld[nPos,1],aRecOld[nPos,2],12] <> aCols1[nX,1] ) .or. ( aOldCols1[aRecOld[nPos,1],nColMarc3 ] <> aCols1[ nX , nColMarc3 ] ) )
										(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
										If (RecLock(cAlias,.F.))
											(cAlias)->(&(cPrefix+"ORDEM"))   := aCols1[ nX , nColMarc3 ]
											(cAlias)->(&(cPrefix+"DATAAPO")) := aCols1[nX,1]
											(cAlias)->(&(cPrefix+"TPMARCA")) := aCols1[ nX,nY,10 ]
											lClassifica := .T.
											( cAlias )->( MsUnLock() )
										EndIf
									ElseIf ( aOldCols1[aRecOld[nPos,1],aRecOld[nPos,2],12] == aCols1[nX,1] ) .And. ( aOldCols1[aRecOld[nPos,1],nColMarc3 ] == aCols1[ nX , nColMarc3 ] )
										(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
										If (RecLock(cAlias,.F.))
											(cAlias)->(&(cPrefix+"TPMARCA")) := aCols1[ nX,nY,10 ]
											lClassifica := .T.
											( cAlias )->( MsUnLock() )
										EndIf
									EndIf
								ElseIf !Empty(aCols1[nX, nY, 2])
									(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
									If ( (cAlias)->(&(cPrefix+"DATAAPO")) <> aCols1[nX,1] ) .Or. ( (cAlias)->(&(cPrefix+"ORDEM")) <> aCols1[ nX , nColMarc3 ] )
										If (RecLock(cAlias,.F.))
											(cAlias)->(&(cPrefix+"ORDEM"))   := aCols1[ nX , nColMarc3 ]
											(cAlias)->(&(cPrefix+"DATAAPO")) := aCols1[nX,1]
											If !( (cAlias)->(&(cPrefix+"TPMCREP")) == aCols1[ nX , nY , 14 ] )
												(cAlias)->(&(cPrefix+"TPMCREP"))	:= Space(1)
												(cAlias)->(&(cPrefix+"MOTIVRG"))	:= cSpaceMoti
											EndIf
											lClassifica := .T.
											( cAlias )->( MsUnLock() )
										EndIf
									EndIf
								EndIf
								Loop
							EndIf
							IF RecLock(cAlias,.T.)
								(cAlias)->(&(cPrefix+"FILIAL"))		:= cFilFunc
								(cAlias)->(&(cPrefix+"MAT"))		:= cMatFunc
								(cAlias)->(&(cPrefix+"TURNO"))		:= cTurno
								(cAlias)->(&(cPrefix+"GIRO"))		:= aCols1[ nX , nY , 03 ]
								(cAlias)->(&(cPrefix+"FUNCAO"))		:= aCols1[ nX , nY , 04 ]
								(cAlias)->(&(cPrefix+"CC"))			:= IF( Empty( aCols1[ nX , nY , 05 ] ) , cCusto , aCols1[ nX , nY , 05 ] )
								(cAlias)->(&(cPrefix+"DATA"))		:= IF( Empty( aCols1[ nX , nY , 08 ] ) , dDataAtu , aCols1[ nX , nY , 08 ] )
								(cAlias)->(&(cPrefix+"ORDEM"))		:= aCols1[ nX , nColMarc3 ]
								(cAlias)->(&(cPrefix+"FLAG"))		:= IF(Empty(aCols1[ nX , nY , 07 ]),"M",IF(lModMarc,"M",aCols1[ nX , nY , 07 ]))
								(cAlias)->(&(cPrefix+"HORA"))		:= Val(aCols1[ nX , nY , 01 ])
								(cAlias)->(&(cPrefix+"APONTA"))		:= aCols1[ nX , nY , 06 ]
								(cAlias)->(&(cPrefix+"RELOGIO"))	:= aCols1[ nX , nY , 09 ]
								(cAlias)->(&(cPrefix+"TPMARCA"))	:= aCols1[ nX , nY , 10 ]
								(cAlias)->(&(cPrefix+"PAPONTA"))	:= aCols1[ nX , nY , 11 ]
								If lPort1510
									(cAlias)->(&(cPrefix+"DATAAPO"))	:= aCols1[ nX , nY , 12 ]
									(cAlias)->(&(cPrefix+"NUMREP" ))	:= aCols1[ nX , nY , 13 ]
									(cAlias)->(&(cPrefix+"TPMCREP"))	:= aCols1[ nX , nY , 14 ]
									(cAlias)->(&(cPrefix+"TIPOREG"))	:= aCols1[ nX , nY , 15 ]
									(cAlias)->(&(cPrefix+"MOTIVRG"))	:= aCols1[ nX , nY , 16 ]
									(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
								EndIf
								If __lCpoDataAlt .And. __lCpoUsuaAlt
									   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
										(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
								EndIf

								( cAlias )->( MsUnLock() )
							EndIF
						EndIF
					EndIf
				EndIf
			//-- Exclus„o das Marca‡”es no SP8 ou SPG
			ElseIf ( nOpcX == 3 )
				If lPort1510 .and. aOldCols1[nX, nY, 15] == "O"
					Loop
				Else
					IF ( lGoto := !Empty( aOldCols1[nX, nY, 2] ) )
						(cAlias)->(dbGoto(aCols1[nX, nY, 2]))
						IF RecLock(cAlias,.F.)
							IF !( cAlias )->( FkDelete( @cMsgErr ) )
								RollBackDelTran( cMsgErr )
							EndIF
							( cAlias )->( MsUnLock() )
						EndIF
					EndIF
				EndIf
			EndIf
		Next nY
	Next nX

End Transaction

If lPort1510 .and. lClassifica
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Calendario de Marcacoes do Funcionario para       ³
	³ reclassificao da data de apontamento da RFE                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF GetMarcacoes(	@aMarcacoes			,;	//01 -> Marcacoes dos Funcionarios
						@aTabCalend			,;	//02 -> Calendario de Marcacoes
						@aTabPadrao			,;	//03 -> Tabela Padrao
						NIL     			,;	//04 -> Turnos de Trabalho
						dPerIni 			,;	//05 -> Periodo Inicial
						dPerFim				,;	//06 -> Periodo Final
						SRA->RA_FILIAL		,;	//07 -> Filial
						SRA->RA_MAT			,;	//08 -> Matricula
						SRA->RA_TNOTRAB		,;	//09 -> Turno
						SRA->RA_SEQTURN		,;	//10 -> Sequencia de Turno
						SRA->RA_CC			,;	//11 -> Centro de Custo
						cAlias				,;	//12 -> Alias para Carga das Marcacoes
						.T.					,;	//13 -> Se carrega Recno em aMarcacoes
						.T.		 			,;	//14 -> Se considera Apenas Ordenadas
						NIL					,;  //15 -> Verifica as Folgas Automaticas
						NIL  				,;  //16 -> Se Grava Evento de Folga Mes Anterior
						NIL					,;	//17 -> Se Carrega as Marcacoes Automaticas
						@aRecsMarcAutDele	 ;	//18 -> Registros de Marcacoes Automaticas que deverao ser Deletados
					  )
		RFEDataApo(aMarcacoes , aTabCalend)
	EndIF

EndIf

Return( NIL )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fMoveCols ³ Autor ³ Equipe Advanced RH    ³ Data ³24/04/1996³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Move colunas no array aCols                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fMoveCols(oGet,nOpcAo,nMinMax, lRoboAut, nLinAut, nColAut)

Local nColPos   	:= 1
Local aColsAux		:= {}
Local aColsAux1		:= {}
Local aTpMarc    	:= {}
Local aSvoGet		:= {}
Local cHelp			:= ""
Local cOrdem    	:= ""
Local cConteudo		:= ""
Local cAlias		:= IF( lPona180 , "SPG" , "SP8" )
Local cMotivo		:= ""
Local cTpmCrep		:= "D"
Local dNewData		:= Ctod("//")
Local dDataApo		:= Ctod("")
Local lPodeMover	:= .T.
Local lPasso     	:= .T.
Local lInterv	 	:= .F.
Local lSumIntAleat  := SuperGetMv("MV_SUMINTA",NIL,2) == 1
Local nNewMarc		:= 0
Local nX        	:= 0
Local nY        	:= 0
Local nPos      	:= 0
Local nTamLin   	:= 0
Local nLinDe    	:= If(lRoboAut, nLinAut, n)
Local nColPara  	:= 0
Local nLinPara  	:= 0
Local nGuardaCol	:= 0
Local nGuardaLin	:= 0
Local nInterv	 	:= 0
Local nHrTrab	 	:= 0
Local nColDe     	:= If(lRoboAut, nColAut,oGet:oBrowse:nColPos)
Local nAleato	 	:= 0
Local nRecAux       := 0
Local aRecDel 		:= {}
Local lInsere		:= .F.
Local cVar			:= READVAR()

//-- Verifica se existe um campo em modo de edição
If !Empty(cVar)
	MsgAlert(STR0317,STR0318)
	Return (.F.)
Endif

DEFAULT nMinMax := 0
DEFAULT lRoboAut:= .F.
DEFAULT nLinAut := 0
DEFAULT nColAut := 0



TabMarc( "SPJ" , @aTpMarc )
If lRoboAut
	n := nLinDe
EndIf

nLinDe     := n
nGuardaLin := n
nGuardaCol := nColDe
cConteudo  := aCols[nLinDe,nColDe]
nTamLin	   := Len(aCols[nLinDe])

If ( nColDe == 1 ) .or.  ( nColDe == 2 ) .or. ;
   ( nOpcAo == 1 ) .and. ( nLinDe == Len(aCols) ) .and. ( nColDe == Len(aCols[nLinDe]) ) .or. ;
   (( nOpcAo == 1 ) .and. Empty(cConteudo) )
	Help(" ",1,"P040NPODE")
	Return (.F.)
Endif

If lPort1510
	If ( aCols1[nLinDe,nColDe,15]	== "O" .and. nOpcao == 3 )
		MsgAlert( STR0307 , STR0108 ) // "Marcacões originais não podem ser alteradas"###Atenção
		Return(.F.)
	EndIf
	If ( ( aCols1[nLinDe,nColDe,15]	== "O" .and. nOpcao == 2 ) .or. ( nOpcao == 3 ) )
		cMotivo := ""
		If !lIsBlind
			If !fGetMotivo(@cMotivo, @cHelp, If(nOpcao == 3, 1 ,nOpcao) )
				MsgAlert( cHelp , STR0108 ) //cHelp###Atenção
				Return(.F.)
			EndIf
		Else
			cMotivo :="INCLUSAO MANUAL"
		EndIf
	EndIf
EndIf

//-- Inclus„o
//-- Nao Permite incluir coluna se nao houve coluna em branco entre a posicao atual e a
//-- ultima posicao do periodo de apontamento
If  ( nOpcAo == 1 )
    nY:=nColDe
	For nX := nLinDe To Len(aCols)
		For nY  := nY To Len(aCols[nX])
			//-- A marca‡„o em quest„o ‚ a £ltima da Tabela
			If ((nX == Len(aCols))  .and.  (nY == Len(aCols[nX])))
				//-- Deleta a £ltima marca‡„o da £ltima coluna
				If  !EMPTY(aCols[nX,nY])
					cHelp := Space(01) + OEMTOANSI(STR0123) + CRLF //"Todas as Colunas Dispon¡veis est„o"
					cHelp += Space(01) + OEMTOANSI(STR0124) + CRLF //"preenchidas. Para Incluir uma Nova"
					cHelp += Space(01) + OEMTOANSI(STR0125) + CRLF //"Nova Marca‡„o Elimine Uma Antiga..."
					cHelp += Space(50) + CRLF
					cHelp += Space(50) + CRLF
					cHelp += Space(50) + CRLF
					Help(" ",1,"PN040NCOL",,cHelp, 1 , 0 )
					Return (.F.)
				EndIf
				nY := ( Len(aCols[nX]) + 1 )
				nX := ( Len(aCols) + 1 )
			ElseIf lPort1510 .And. nY == nTamLin .And. aCols1[nX,nY,15] == "O"
				MsgAlert( STR0314 , STR0108 ) //"Inclusão não permitida. Não é permitido mover marcações originais para outro dia."###Atenção
				Return (.F.)
			Else
				If  EMPTY(aCols[nX,nY])
					nY := ( Len(aCols[nX]) + 1 )
				    nX := ( Len(aCols) + 1 )
				Endif
			Endif
		Next nY
		nY:=3
	Next nX
Endif
//-- Redefine Vari veis locais
aColsAux  := aClone(aCols)
aCols1Aux := aClone(aCols1)
nTamLin   := Len(aCols[n])
nColPara  := nColDe
nLinPara  := nLinDe

//aTpMarc Devera Ter o Tamanho das Colunas de Horas
For nX := 1 To nTamLin
	aAdd( aTpMarc , "" )
Next nX

//-- Apaga o Conte£do atual
If ( nOpcAo == 1 )
	aColsAux[nLinDe,nColDe]  := Space(5)
	aCols1[nLinDe,nColDe,1]  := Space(5)
	aCols1[nLinDe,nColDe,2]  := 0
	aCols1[nLinDe,nColDe,9]  := Space(3)
	aCols1[nLinDe,nColDe,14] := Space(1)
	aCols1[nLinDe,nColDe,15] := "I"
	aCols1[nLinDe,nColDe,16] := cSpaceMoti
	aCols1[nLinDe,nColDe,17] := .F.
Endif

//-- Inclus„o ou Exclus„o de Marca‡„o
If ( ( nOpcAo == 1 ) .or. ( nOpcAo == 2 ) )
	For nX := nLinDe To If(nOpcAo==1,Len(aCols),Len(aColsAux))
		For nY  := nColDe To nTamLin
			If nRecAux == 0
				nRecAux := aCols1[nX,nY,02]
			EndIf
			nColPara ++
			If nColPara > nTamLin
				If ( nOpcAo == 2 ) .AND. (  nLinPara == Len(aColsAux) )
				    nX		:= Len(aColsAux)
				    nY		:= Len(aColsAux[nX])
                Else
	               	nLinPara ++
                Endif
				nColPara := 3
			Endif
			//-- A marca‡„o em quest„o ‚ a £ltima da Tabela
			If ( ( nX == Len(aColsAux) ) .and. ( nY == Len(aColsAux[nX]) ) )
				//-- Deleta a £ltima marca‡„o da £ltima coluna
				If ( nOpcAo == 2 )
					If lPort1510
						//Se coluna for a deletada, seta "D" no aOldCols
						If ( nY == nColDe )
							If ( nRecAux > 0 ) .AnD. ( aScan(aRecDel, { |x| x[1] == nRecAux }) == 0 )
								aAdd(aRecDel, {nRecAux, nTamLin, cTpmCrep, cMotivo})
								cTpmCrep := ""
								cMotivo  := ""
							EndIf
						EndIf
						aCols1[  nX , nY , 12 ] := aCols1[ nX , 02 ]
						aCols1[  nX , nY , 13 ] := cSpaceNRep
						aCols1[  nX , nY , 14 ] := Space(1)
						aCols1[  nX , nY , 15 ] := "I"
						aCols1[  nX , nY , 16 ] := cMotivo
					EndIf
					aColsAux[nX,nY]		:= Space(5)
					aCols1[nX,nY,01]	:= Space(5)
					aCols1[nX,nY,02]    := 0
					aCols1[nX,nY,05]	:= Space(1)
					aCols1[nX,nY,06]	:= "N"
					aCols1[nX,nY,07]	:= Space(1)
					aCols1[nX,nY,08]	:= Ctod("//")
					aCols1[nX,nY,09]	:= Space(2)
					aCols1[nX,nY,10]	:= Space(2)
					aCols1[nX,nY,11]	:= cPerAponta
				EndIf
			//-- Quando a pr¢xima coluna estiver em branco
			ElseIf Empty(aColsAux[nLinPara,nColPara])
				//-- Inclus„o de Colunas
				If ( nOpcAo == 1 )
					//-- Insere uma Coluna com o Conte£do da Coluna Anterior
					aColsAux[nLinPara, nColPara] := aCols[nX, nY]
					aCols1[nLinPara,nColPara,01] := aCols1Aux[nX, nY, 01]
					aCols1[nLinPara,nColPara,02] := aCols1Aux[nX, nY, 02]
					aCols1[nLinPara,nColPara,05] := aCols1Aux[nX, nY, 05]
					aCols1[nLinPara,nColPara,06] := "N"
					aCols1[nLinPara,nColPara,07] := aCols1Aux[nX, nY, 07]
					aCols1[nLinPara,nColPara,08] := aCols1Aux[nX, nY, 08]
					If nY > 3
						If Empty(aCols1Aux[nX, nY-1, 01]) .OR. ( aCols1[nLinPara,nColPara,01] < aCols1Aux[nX, nY-1, 01] )
							aCols1[nLinPara,nColPara,08]	:= aCols1Aux[nX, nY, 08]
							aCols1[nLinPara,nColPara-1,08]	:= aCols1Aux[nX, nY-1, 08]
						EndIf
					EndIf
					aCols1[nLinPara,nColPara,09] := aCols1Aux[nX, nY, 09]
					aCols1[nLinPara,nColPara,10] := aCols1Aux[nX, nY, 10]
					aCols1[nLinPara,nColPara,11] := aCols1Aux[nX, nY, 11]
					If lPort1510
						aCols1[nLinPara,nColPara,12] := aCols1Aux[nX, nY, 12]
						aCols1[nLinPara,nColPara,13] := aCols1Aux[nX, nY, 13]
						aCols1[nLinPara,nColPara,14] := aCols1Aux[nX, nY, 14]
						aCols1[nLinPara,nColPara,15] := aCols1Aux[nX, nY, 15]
						aCols1[nLinPara,nColPara,16] := aCols1Aux[nX, nY, 16]
					EndIf
				//-- Exclus„o de Colunas
				ElseIf ( nOpcAo == 2 )
					If ( nColPara > 3 )
						//-- Deleta o Conte£do Atual
						If lPort1510
							//Se coluna for a deletada, seta "D" no aOldCols
							If ( (nColPara-1) == nColDe )
								If ( nRecAux > 0 ) .AnD. ( aScan(aRecDel, { |x| x[1] == nRecAux }) == 0 )
									aAdd(aRecDel, {nRecAux, nTamLin, cTpmCrep, cMotivo})
									cTpmCrep := ""
									cMotivo  := ""
								EndIf
							EndIf
							aCols1[nLinpara,nColPara-1,12 ] := aCols1[ nX , 02 ]
							aCols1[nLinpara,nColPara-1,13 ] := cSpaceNRep
							aCols1[nLinpara,nColPara-1,14 ] := Space(1)
							aCols1[nLinpara,nColPara-1,15 ] := Space(1)
							aCols1[nLinpara,nColPara-1,16 ] := cSpaceMoti
						EndIf
						aColsAux[nLinPara,nColPara-1]	:= Space(5)
						aCols1[nLinpara,nColPara-1,01]	:= Space(5)
						aCols1[nLinpara,nColPara-1,02]	:= 0
						aCols1[nLinpara,nColPara-1,05]	:= Space(1)
						aCols1[nLinpara,nColPara-1,06]	:= "N"
						aCols1[nLinpara,nColPara-1,07]	:= Space(1)
						aCols1[nLinpara,nColPara-1,08]	:= Ctod("//")
						aCols1[nLinpara,nColPara-1,09]	:= Space(2)
						aCols1[nLinpara,nColPara-1,10]	:= Space(2)
						aCols1[nLinpara,nColPara-1,11]	:= cPerAponta
					ElseIf ( nLinPara > 1 )
						//-- Deleta o Conte£do da éltima Coluna da linha anterior
						aColsAux[nLinPara-1, Len(aColsAux[nLinPara-1])]	:= Space(5)
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),01]	:= Space(5)
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),02]	:= 0
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),05]	:= Space(1)
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),06]	:= "N"
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),07]	:= Space(1)
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),08]	:= Ctod("//")
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),09]	:= Space(2)
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),10]	:= Space(2)
						aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),11]	:= cPerAponta
						If lPort1510
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 12 ] := aCols1[ nLinPara-1 , 02 ]
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 13 ] := cSpaceNRep
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 14 ] := Space(1)
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 15 ] := Space(1)
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 16 ] := cSpaceMoti
							//Se coluna for a deletada, seta "D" no aOldCols
							If ( nY == nColDe )
								If ( nRecAux > 0 ) .AnD. ( aScan(aRecDel, { |x| x[1] == nRecAux }) == 0 )
									aAdd(aRecDel, {nRecAux, nTamLin, cTpmCrep, cMotivo})
									cTpmCrep := ""
									cMotivo  := ""
								EndIf
							EndIf
						EndIf
					Endif
				Endif
				nY := ( nTamLin + 1 )
				nX := ( Len(aCols) + 1 )
				If ( nPos := aScan(aTabCalend, { |x| x[CALEND_POS_DATA] == aCols1[nGuardaLin,1] .and. x[CALEND_POS_TIPO_MARC] == "1E"  } ) ) > 0
					aCols1[nGuardaLin,2] := aCols1[nGuardaLin,1]
					aColsAux[nGuardaLin,2] := aCols1[nGuardaLin,1]
				Endif

			//-- Quando a pr¢xima coluna estiver preenchida
			Else
				//-- Inclus„o de Colunas
				If ( nOpcAo == 1 )
					//-- Insere uma Coluna com o Conte£do da Coluna Anterior
					aColsAux[nLinPara,nColPara]		:= aCols[nX,nY]
					aCols1[nLinPara,nColPara,01]	:= aCols1Aux[nX,nY,01]
					aCols1[nLinPara,nColPara,02]	:= aCols1Aux[nX,nY,02]
					aCols1[nLinPara,nColPara,05]	:= aCols1Aux[nX,nY,05]
					aCols1[nLinPara,nColPara,06]	:= "N"
					aCols1[nLinPara,nColPara,07]	:= aCols1Aux[nX,nY,07]
					aCols1[nLinPara,nColPara,08]	:= aCols1Aux[nX,nY,08]
					If nY > 3
						lInsere	:= .T.
						If ( nColMarc <= 4 .AND. nColPara <= 3)
							lInsere	:= .F.
						EndIf

						If ( lInsere )
							If ( aCols1[nLinPara,nColPara,01] < aCols1Aux[nX,nY-1,01] )
								aCols1[nLinPara,nColPara,08]	:= aCols1Aux[nX, nY, 08]
								aCols1[nLinPara,nColPara-1,08]	:= aCols1Aux[nX, nY-1, 08]
							EndIf
						EndIf
					EndIf
					aCols1[nLinPara,nColPara,09]	:= aCols1Aux[nX,nY,09]
					aCols1[nLinPara,nColPara,10]	:= aCols1Aux[nX,nY,10]
					aCols1[nLinPara,nColPara,11]	:= aCols1Aux[nX,nY,11]
					If lPort1510
						aCols1[ nLinPara,nColPara,12 ] := aCols1Aux[ nX , nY , 12 ]
						aCols1[ nLinPara,nColPara,13 ] := aCols1Aux[ nX , nY , 13 ]
						aCols1[ nLinPara,nColPara,14 ] := aCols1Aux[ nX , nY , 14 ]
						aCols1[ nLinPara,nColPara,15 ] := aCols1Aux[ nX , nY , 15 ]
						aCols1[ nLinPara,nColPara,16 ] := aCols1Aux[ nX , nY , 16 ]
					EndIf
				//-- Exclus„o de Colunas
				ElseIf ( nOpcAo == 2 )
					//-- Deleta o Conte£do da Coluna atual, e o preenche com o Conte£do da coluna seguinte
					If lPort1510
						//Se coluna for a deletada, seta "D" no aOldCols
						If ( nY == nColDe )
							If ( nRecAux > 0 ) .AnD. ( aScan(aRecDel, { |x| x[1] == nRecAux }) == 0 )
								aAdd(aRecDel, {nRecAux, nTamLin, cTpmCrep, cMotivo})
								cTpmCrep := ""
								cMotivo  := ""
							EndIf
						EndIf
						If nLinDe != nLinPara .And. !Empty(aColsAux[nLinDe,nColDe]) .And. ( aCols1[ nLinPara,nColPara,15 ] == "O" .Or. (aCols1[ nLinDe,nColDe,15 ] == "I" .And. nTamLin == nColDe))
							lPodeMover := .F.
							//-- Deleta o Conte£do da éltima Coluna da linha anterior
							aColsAux[nLinPara-1, Len(aColsAux[nLinPara-1])]	:= Space(5)
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),01]	:= Space(5)
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),02]	:= 0
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),05]	:= Space(1)
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),06]	:= "N"
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),07]	:= Space(1)
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),08]	:= Ctod("//")
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),09]	:= Space(2)
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),10]	:= Space(2)
							aCols1[nLinPara-1,Len(aColsAux[nLinPara-1]),11]	:= cPerAponta
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 12 ] := aCols1[ nLinPara-1 , 02 ]
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 13 ] := cSpaceNRep
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 14 ] := Space(1)
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 15 ] := Space(1)
							aCols1[  nLinPara-1,Len(aColsAux[nLinPara-1]), 16 ] := cSpaceMoti
							aOldCols1[ nLinPara-1,Len(aColsAux[nLinPara-1]), 14 ] := cTpmCrep
							aOldCols1[ nLinPara-1,Len(aColsAux[nLinPara-1]), 16 ] := cMotivo
							cTpmCrep := ""
							cMotivo  := ""
							nY := ( nTamLin + 1 )
							nX := ( Len(aCols) + 1 )
						ElseIf nLinDe != nLinPara .And. aCols1[ nLinPara,nColPara,15 ] == "O" .And. Empty(aColsAux[nLinDe,nColDe])
							lPodeMover := .F.
							MsgAlert( STR0315 , STR0108 ) //"Exclusão não permitida. Não é permitido mover marcações originais de outro dia."###Atenção
							nY := ( nTamLin + 1 )
							nX := ( Len(aCols) + 1 )
						Else
							aCols1[ nX , nY , 12 ] := aCols1[ nLinPara,nColPara,12 ]
							aCols1[ nX , nY , 13 ] := aCols1[ nLinPara,nColPara,13 ]
							aCols1[ nX , nY , 14 ] := aCols1[ nLinPara,nColPara,14 ]
							aCols1[ nX , nY , 15 ] := aCols1[ nLinPara,nColPara,15 ]
							aCols1[ nX , nY , 16 ] := aCols1[ nLinPara,nColPara,16 ]
						EndIf
					EndIf
					If lPodeMover
						aColsAux[nX,nY]		:= aCols[nLinPara,nColPara]
						aCols1[nX,nY,01]	:= aCols1[nLinPara,nColPara,01]
						aCols1[nX,nY,02]	:= aCols1[nLinPara,nColPara,02]
						aCols1[nX,nY,05]	:= aCols1[nLinPara,nColPara,05]
						aCols1[nX,nY,06]	:= "N"
						aCols1[nX,nY,07]	:= aCols1[nLinPara,nColPara,07]
						aCols1[nX,nY,08]	:= aCols1[nLinPara,nColPara,08]
						aCols1[nX,nY,09]	:= aCols1[nLinPara,nColPara,09]
						aCols1[nX,nY,10]	:= aCols1[nLinPara,nColPara,10]
						aCols1[nX,nY,11]	:= aCols1[nLinPara,nColPara,11]
						nColDe++
					EndIf
				Endif
			Endif
		Next nY
		nColDe := 3
	Next nX
	//--Desflega as Marcacoes Apontadas
	For nX := nLinDe To nLinPara
		For nY := 3 To nTamLin
			aCols1[ nX , nY , 06 ] := "N"
		Next nY
	Next nX
	aCols := aClone(aColsAux)
//-- Geracao de Marcacao.
ElseIf ( nOpcAo == 3 )
	//-- Carrega a Marca‡„o do Calend rio
	If ( nPos := aScan(aTabCalend, { |x| x[CALEND_POS_DATA] == aCols1[nGuardaLin,1] .and. x[CALEND_POS_TIPO_MARC] == "1E"  } ) ) > 0
		cOrdem := aTabCalend[nPos,CALEND_POS_ORDEM]
		If ( nPos := aScan(aTabCalend, { |x| x[CALEND_POS_ORDEM] == cOrdem .and. x[CALEND_POS_TIPO_MARC] == aTpMarc[nGuardaCol-2] } ) ) > 0
			IF aTabCalend[ nPos , CALEND_POS_DATA ] >= SRA->RA_ADMISSA
				dNewData := aCols1[nGuardaLin,1] //Data de Referencia da Marcacao
				IF ( nMinMax == 0 ) //Marcacoes Normais
					aCols[nGuardaLin,nGuardaCol]    	:= StrZero(aTabCalend[ nPos , CALEND_POS_HORA ] , 5 , 2 )
					aCols1[nGuardaLin,nGuardaCol,01]	:= StrZero(aTabCalend[ nPos , CALEND_POS_HORA ] , 5 , 2 )
					aCols1[nGuardaLin,2]				:= dNewData
					aCols1[nGuardaLin,nGuardaCol,05]	:= IF(Empty(aTabCalend[nPos,CALEND_POS_CC]),SRA->RA_CC,aTabCalend[nPos,CALEND_POS_CC])
					aCols1[nGuardaLin,nGuardaCol,06]	:= "N"
					aCols1[nGuardaLin,nGuardaCol,07]	:= IF(Empty(aOldCols1[nGuardaLin,nGuardaCol,7]),"I","M")
					aCols1[nGuardaLin,nGuardaCol,08]	:= aTabCalend[ nPos , CALEND_POS_DATA ]
					aCols1[nGuardaLin,nGuardaCol,09]	:= Space(3)
					aCols1[nGuardaLin,nGuardaCol,10]	:= aTabCalend[ nPos , CALEND_POS_TIPO_MARC ]
					aCols1[nGuardaLin,nGuardaCol,11]	:= cPerAponta
					If lPort1510
						aCols1[nGuardaLin,nGuardaCol,12] 	:= dNewData
						aCols1[nGuardaLin,nGuardaCol,13] 	:= cSpaceNRep
						aCols1[nGuardaLin,nGuardaCol,14] 	:= Space(1)
						aCols1[nGuardaLin,nGuardaCol,15] 	:= "I"
						aCols1[nGuardaLin,nGuardaCol,16] 	:= cMotivo
					EndIf
					IF aTabCalend[nPos,CALEND_POS_TIPO_MARC] == "1E"
						aCols[nGuardaLin,2]			:= dNewData
					EndIF
				Else //Marcacoes Aleatorias
					//Verifica as Horas de Intervalo da Tabela
					IF ( aTabCalend[ nPos , CALEND_POS_HRS_INTER ] > 0 .or. Subst(aTabCalend[ nPos , CALEND_POS_TIPO_MARC ],-1) == "E" )
						IF ( lInterv := ( aTabCalend[ nPos , CALEND_POS_HRS_INTER ] > 0 ) )
						    nInterv := Min( ( __Hrs2Min( aTabCalend[ nPos , CALEND_POS_HRS_INTER ] ) / 2 ) , nMinMax )
						ElseIF ( lInterv := ( aTabCalend[ Max( 1 , nPos - 1 ) , CALEND_POS_HRS_INTER ] > 0 ) )
							nInterv := Min( ( __Hrs2Min( aTabCalend[ Max( 1 , nPos - 1  ) , CALEND_POS_HRS_INTER ] ) / 2 ) , nMinMax )
						EndIF
					EndIF
					//Verifica as Horas Trabalhadas da Tabela
					IF ( aTabCalend[ nPos , CALEND_POS_HRS_TRABA ] > 0 .or. Subst(aTabCalend[ nPos , CALEND_POS_TIPO_MARC ],-1) == "S" )
						IF ( aTabCalend[ nPos , CALEND_POS_HRS_TRABA ] > 0 )
						    nHrTrab := Min( ( __Hrs2Min( aTabCalend[ nPos , CALEND_POS_HRS_TRABA ] ) / 2 ) , nMinMax )
						ElseIF ( aTabCalend[ Max( 1 , nPos - 1 ) , CALEND_POS_HRS_TRABA ] > 0 )
							nHrTrab := Min( ( __Hrs2Min( aTabCalend[ nPos - 1 , CALEND_POS_HRS_TRABA ] ) / 2 ) , nMinMax )
						EndIF
					EndIF
					dDataApo							:= dNewData
					dNewData							:= aTabCalend[ nPos , CALEND_POS_DATA ]
					If Subst(aTabCalend[nPos,CALEND_POS_TIPO_MARC],-1) == "E"
						IF lInterv
							If lSumIntAleat
								nNewMarc := aTabCalend[ nPos , CALEND_POS_HORA ] + ( Val(aCols1[nGuardaLin,nGuardaCol-1,1]) - aTabCalend[ nPos-1 , CALEND_POS_HORA ] )
								nNewMarc := DataHora2Ale( @dNewData , nNewMarc , nInterv , @nAleato , "S" )
							Else
								nNewMarc := DataHora2Ale( @dNewData , aTabCalend[ nPos , CALEND_POS_HORA ] , nInterv , @nAleato , Subst(aTabCalend[nPos,CALEND_POS_TIPO_MARC],-1))
							EndIf

						Else
							nNewMarc := DataHora2Ale( @dNewData , aTabCalend[ nPos , CALEND_POS_HORA ] , nHrTrab , @nAleato , Subst(aTabCalend[nPos,CALEND_POS_TIPO_MARC],-1) )
						EndIF
					Else
						IF lInterv
							nNewMarc := DataHora2Ale(@dNewData,aTabCalend[ nPos , CALEND_POS_HORA ],nInterv,@nAleato,Subst(aTabCalend[nPos,CALEND_POS_TIPO_MARC],-1))
						Else
							nNewMarc := DataHora2Ale(@dNewData,aTabCalend[ nPos , CALEND_POS_HORA ],nHrTrab,@nAleato,Subst(aTabCalend[nPos,CALEND_POS_TIPO_MARC],-1))
						EndIF
					EndIf

					aCols[nGuardaLin,nGuardaCol]    	:= StrZero(nNewMarc,5,2)
					aCols1[nGuardaLin,nGuardaCol,01]	:= StrZero(nNewMarc,5,2)
					aCols1[nGuardaLin,nGuardaCol,05]	:= IF(Empty(aTabCalend[nPos,CALEND_POS_CC]),SRA->RA_CC,aTabCalend[nPos,CALEND_POS_CC])
					aCols1[nGuardaLin,nGuardaCol,06]	:= "N"
					aCols1[nGuardaLin,nGuardaCol,07]	:= IF(Empty(aOldCols1[nGuardaLin,nGuardaCol,7]),"I","M")
					aCols1[nGuardaLin,nGuardaCol,08]	:= dNewData
					aCols1[nGuardaLin,nGuardaCol,09]	:= IF(Empty(aOldCols1[nGuardaLin,nGuardaCol,9]),Space(2),aOldCols1[nGuardaLin,nGuardaCol,9])
					aCols1[nGuardaLin,nGuardaCol,10]	:= aTabCalend[ nPos , CALEND_POS_TIPO_MARC ]
					aCols1[nGuardaLin,nGuardaCol,11]	:= cPerAponta
					If lPort1510
						aCols1[nGuardaLin,nGuardaCol,12] 	:= dDataApo
						aCols1[nGuardaLin,nGuardaCol,13] 	:= cSpaceNRep
						aCols1[nGuardaLin,nGuardaCol,14] 	:= Space(1)
						aCols1[nGuardaLin,nGuardaCol,15] 	:= "I"
						aCols1[nGuardaLin,nGuardaCol,16] 	:= cMotivo
					EndIf
					IF aTabCalend[nPos,CALEND_POS_TIPO_MARC] == "1E"
						aCols[nGuardaLin	,2]		:= dNewData
						aCols1[nGuardaLin	,2]		:= dNewData
					EndIF
				EndIF
			EndIF
		EndIf
	EndIf
	If Empty(aCols[nGuardaLin,nGuardaCol]) .AND. !lRoboAut
		Help(" ",1,"P040SSP1")
	Endif
	dbSelectArea(cAlias)
Endif

If !Empty(aRecDel)
	fDelOldM( @aOldCols1, aRecDel )
EndIf

If !lIsBlind
	oGet:oBrowse:lDisablePaint := .T.
	aSvoGet := SaveoGet( "ALL" , oGet )
	oGet:Refresh(.T.)
	oGet:oBrowse:SetFocus()
	RestartoGet( aSvoGet , "ALL", @oGet )
	oGet:oBrowse:lDisablePaint := .F.
EndIf

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FCompZeros³ Autor ³ J. Ricardo            ³ Data ³24/04/1996³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Coloca os dados do aCols no padrao 08:00 (horas)           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FCompZeros(cCampo)

Local cSetVar

If Empty(&(cCampo)) .or. &(cCampo) == "  .  "
	cSetVar := Space(5)
Else
	cSetVar := StrZero(Val(&(cCampo)),5,2)
Endif
SetMemVar( cCampo , cSetVar )

Return( .T. )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ F_Alt_T  ³ Autor ³Marinaldo de Jesus     ³ Data ³08/03/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Mostra os Totais de Ocorrencias.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PonA040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function F_ALT_T( oGet , nOpc , lForceApont )

Local aSvoGet:= {}

DEFAULT lForceApont := .F.

IF ( nOpc == 2 ) //-- Caso seja Alteracao
	//-- Prepara o Array aOrdena para gravacao e Classifica o aCols
	IF lForceApont .or. ( !fCompArray( aCols1 , aLastCols1 ) .or. Empty( aResult ) .or. lGeraAuto )
		aOrdena := {}
		aResult := {}
		IF( lForceApont , aLastApo := {} , NIL )
		lGeraAuto := .F.
		PreparaCla(@aOrdena,@aResult,nColMarc,.F.,NIL,NIL,NIL,NIL,lForceApont)
		IF ( Len( aLastApo ) > 0 )
			GetNewResult( @aResult , aLastApo , aCols1 , aLastCols1 )
		EndIF
		aLastCols1 := aClone( aCols1 )
	EndIF
ElseIF ( nOpc == 4 ) //Apenas Visualizacao
	IF !Empty( aLastApo )
		aResult := aClone( aLastApo )
	Else
		aResult := GetLastApo( dPerIni , dPerFim , IF( lPona180 , "SPH" , "SPC" ) )
	EndIF
EndIF

If !lIsBlind
	IF ( Len( aResult ) > 0 )
		//--Mostrar os Totais Apontados.
		fMostraApo(nOpc,aResult,oGet)
	Else
		MsgAlert( OemToAnsi( STR0107 ) , STR0108 )	//"Nao Existem Apontamentos para o Funcionario"###"Aviso"
	EndIF
EndIf
IF ( nOpc == 4 ) //Apenas Visualizacao
	aResult := {}
EndIF

If !lIsBlind
	oGet:oBrowse:lDisablePaint := .T.
	aSvoGet := SaveoGet( "ALL" , oGet )
	oGet:Refresh(.T.)
	oGet:oBrowse:SetFocus()
	RestartoGet( aSvoGet , "ALL", @oGet )
	oGet:oBrowse:lDisablePaint := .F.
EndIF

Return( NIL )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³F_ALT_H   ³ Autor ³Marinaldo de Jesus     ³ Data ³12/11/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Consulta a tabela de horario padrao                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function F_ALT_H(oGet,aArray,nPosDele,aHeaderLoc,lAcumulado,lSetKey,nPosCalend,lCalendFunc)

Local aMarcacoes	:= {}
Local aListBox	 	:= {}
Local aCloneCalend	:= {}
Local aCords		:= { 30 , 05 , 310 , 140 }
Local aKeys			:= GetKeys()
Local bChange		:= { || .T. }
Local bSet15		:= { || oDlg:End() }
Local bSet24		:= { || oDlg:End() }
Local bNIL			:= { || NIL }
Local bSvSet15		:= { || NIL }
Local bSvSet24		:= { || NIL }
Local cDsrAutPa		:= PosSP9("036N",SRA->RA_FILIAL,"P9_CODIGO",2)
Local cAfasta   	:= ""
Local cPrefix		:= ( PrefixoCpo( "SP8" ) + "_" )
Local cP8Turno		:= Space( GetSx3Cache( "P8_TURNO" , "X3_TAMANHO" ) )
Local nX			:= 0
Local nLenX			:= 0
Local nY			:= 0
Local nLenY			:= 0
Local nLenMarc		:= 0
Local nLenTab		:= 0
Local nTamP8Ordem	:= ( GetSx3Cache( "P8_ORDEM" , "X3_TAMANHO" ) )
Local oDlg
Local oLbox
Local oFont
Local oGroup

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjCoords	:= {}
Local aObjSize		:= {}

Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 	:= {}
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

DEFAULT lAcumulado	:= .F.
DEFAULT lSetKey		:= .F.
DEFAULT nPosCalend	:= 0
DEFAULT lCalendFunc	:= .T.
aButtons := {}

Begin Sequence

	IF ( lCalendFunc )

		IF aArray == NIL //Pona040
			nLenX := Len(aCols)
			For nX := 1 To nLenX
				//-- Implementa o array aMarcacoes p/ utilizacao em fDiasFolga().
				nLenY := Len(aCols[nX])
				For nY := 3 To nLenY
					If ValType(aCols[nX,nY]) == "C" .and. !Empty(aCols[nX,nY])
						aAdd( aMarcacoes , Array( ELEMENTOS_AMARC ) )
						nLenMarc := Len( aMarcacoes )
						aMarcacoes[ nLenMarc , AMARC_DATA		] := aCols[nX,2]										//01 - Data
						aMarcacoes[ nLenMarc , AMARC_HORA		] := aCols[nX,nY]										//02 - Hora
						aMarcacoes[ nLenMarc , AMARC_ORDEM		] := StrZero( nX , nTamP8Ordem )						//03 - Ordem
						aMarcacoes[ nLenMarc , AMARC_FLAG		] := aCols1[nX,nY,07]									//04 - Flag
						aMarcacoes[ nLenMarc , AMARC_RECNO		] := 0													//05 - Recno
						aMarcacoes[ nLenMarc , AMARC_TURNO		] := cP8Turno  											//06 - Turno
						aMarcacoes[ nLenMarc , AMARC_FUNCAO		] := aCols1[nX,nY,03]									//07 - Funcao
						aMarcacoes[ nLenMarc , AMARC_GIRO		] := aCols1[nX,nY,04]									//08 - Giro
						aMarcacoes[ nLenMarc , AMARC_CC			] := aCols1[nX,nY,05]									//09 - Centro de Custo
						aMarcacoes[ nLenMarc , AMARC_APONTA		] := aCols1[nX,nY,06]									//10 - Flag de Apontamento
						aMarcacoes[ nLenMarc , AMARC_RELOGIO	] := aCols1[nX,nY,09]									//11 - Relogio
						aMarcacoes[ nLenMarc , AMARC_TIPOMARC	] := aCols1[nX,nY,10]									//12 - Tipo de Marcacao
						aMarcacoes[ nLenMarc , AMARC_L_ORIGEM	] := ( !Empty(aMarcacoes[ nLenMarc , AMARC_FLAG ]) .and. aMarcacoes[ nLenMarc , AMARC_FLAG ] $ "M,I" )	//13 - Logico
						aMarcacoes[ nLenMarc , AMARC_DTHR2STR	] := DataHora2Str( aCols[nX,2] , aCols[nX,nY] )		//14 - String de Data/Hora
						aMarcacoes[ nLenMarc , AMARC_PERAPONTA	] := aCols1[nX,nY,11]                                  //15 - Periodo de Apontamento
						If lPort1510
							aMarcacoes[ nLenMarc , AMARC_DATAAPO  	] := aCols1[nX,nY,12]                 				//25 - Data de Apontamento
							aMarcacoes[ nLenMarc , AMARC_NUMREP  	] := aCols1[nX,nY,13]                 				//26 - Némero do REP
							aMarcacoes[ nLenMarc , AMARC_TPMCREP 	] := aCols1[nX,nY,14]                  				//27 - Tipo de Marcação no REP
							aMarcacoes[ nLenMarc , AMARC_TIPOREG 	] := aCols1[nX,nY,15]                  				//28 - Tipo de Registro
							aMarcacoes[ nLenMarc , AMARC_MOTIVRG 	] := aCols1[nX,nY,16]                  				//29 - Motivo Modificação do Registro
						EndIf
					Endif
				Next nY
			Next nX
		Else //Pona230
			cPrefix := IF( lAcumulado , ( PrefixoCpo( "SPG" ) + "_" ) , cPrefix )
			nLenX := Len( aArray )
			For nX := 1 To nLenX
				IF IF(ValType(aArray[ nX , nPosDele ]) == "L", !aArray[ nX , nPosDele ] , .T. )
					aAdd( aMarcacoes , Array( ELEMENTOS_AMARC ) )
					nLenMarc := Len( aMarcacoes )
					aMarcacoes[ nLenMarc , AMARC_DATA		] := aArray[ nX , GdFieldPos(cPrefix+"DATA"		,aHeaderLoc )]							//01 - Data da Marcacao
					aMarcacoes[ nLenMarc , AMARC_HORA		] := aArray[ nX , GdFieldPos(cPrefix+"HORA"		,aHeaderLoc )]							//02 - Hora da Marcacao
					aMarcacoes[ nLenMarc , AMARC_ORDEM		] := aArray[ nX , GdFieldPos(cPrefix+"ORDEM"	,aHeaderLoc )]							//03 - Ordem da Marcacao
					aMarcacoes[ nLenMarc , AMARC_FLAG		] := aArray[ nX , GdFieldPos(cPrefix+"FLAG"		,aHeaderLoc )]							//04 - Flag da Marcacao
					aMarcacoes[ nLenMarc , AMARC_RECNO		] := 0																					//05 - Recno no SP8 ou SPG
					aMarcacoes[ nLenMarc , AMARC_TURNO		] := aArray[ nX , GdFieldPos(cPrefix+"TURNO"	,aHeaderLoc )]							//06 - Turno de Trabalho
					aMarcacoes[ nLenMarc , AMARC_FUNCAO		] := aArray[ nX , GdFieldPos(cPrefix+"FUNCAO"	,aHeaderLoc )]							//07 - Funcao
					aMarcacoes[ nLenMarc , AMARC_GIRO		] := aArray[ nX , GdFieldPos(cPrefix+"GIRO"		,aHeaderLoc )]							//08 - Giro
					aMarcacoes[ nLenMarc , AMARC_CC			] := aArray[ nX , GdFieldPos(cPrefix+"CC"		,aHeaderLoc )]							//09 - Centro de Custo
					aMarcacoes[ nLenMarc , AMARC_APONTA		] := aArray[ nX , GdFieldPos(cPrefix+"APONTA"	,aHeaderLoc )]							//10 - Flag de Apontamento
					aMarcacoes[ nLenMarc , AMARC_RELOGIO	] := aArray[ nX , GdFieldPos(cPrefix+"RELOGIO"	,aHeaderLoc )]							//11 - Relogio
			    	aMarcacoes[ nLenMarc , AMARC_TIPOMARC	] := aArray[ nX , GdFieldPos(cPrefix+"TPMARCA"	,aHeaderLoc )]							//12 - Tipo da Marcacao
			    	aMarcacoes[ nLenMarc , AMARC_L_ORIGEM	] := ( !Empty(aMarcacoes[ nLenMarc , AMARC_FLAG ]) .and. aMarcacoes[ nLenMarc , AMARC_FLAG ] $ "M,I" )			//13 - Logico
			    	aMarcacoes[ nLenMarc , AMARC_DTHR2STR	] := DataHora2Str(aMarcacoes[nLenMarc,AMARC_DATA] ,aMarcacoes[ nLenMarc , AMARC_HORA])	//14 - String de Data/Hora
			    	aMarcacoes[ nLenMarc , AMARC_PERAPONTA	] := aArray[ nX , GdFieldPos(cPrefix+"PAPONTA"	,aHeaderLoc )]							//15 - Periodo de Apontamento
					If lPort1510
						aMarcacoes[ nLenMarc , AMARC_DATAAPO  	] := aArray[ nX , GdFieldPos(cPrefix+"DATAAPO"	,aHeaderLoc )]                 		//25 - Data de Apontamento
						aMarcacoes[ nLenMarc , AMARC_NUMREP  	] := aArray[ nX , GdFieldPos(cPrefix+"NUMREP"	,aHeaderLoc )]                 		//26 - Némero do REP
						aMarcacoes[ nLenMarc , AMARC_TPMCREP 	] := aArray[ nX , GdFieldPos(cPrefix+"TPMCREP"	,aHeaderLoc )]                  	//27 - Tipo de Marcação no REP
						aMarcacoes[ nLenMarc , AMARC_TIPOREG 	] := aArray[ nX , GdFieldPos(cPrefix+"TIPOREG"	,aHeaderLoc )]                  	//28 - Tipo de Registro
						aMarcacoes[ nLenMarc , AMARC_MOTIVRG 	] := aArray[ nX , GdFieldPos(cPrefix+"MOTIVRG"	,aHeaderLoc )]                  	//29 - Motivo Modificação do Registro
					EndIf
			    EndIF
			Next nX
		EndIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Remonta Calendario para funcionarios com Turnos Opcionais   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		RecriaCalend( @aTabCalend, @aTabPadrao,,aMarcacoes )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Salva o Calendario que podera ter o Conteudo Modificado  por³
		³ fDiasFolga()												  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aCloneCalend := aClone( aTabCalend )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Gera as folgas automaticas								  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		fDiasFolga(aClone(aMarcacoes),@aTabCalend,dPerIni,dPerFim,cDsrAutPa,lAcumulado,.F.)

	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o aListBox de Acordo com o Calendario de Marcacoes    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !GetCalendListBox( @aListBox , aTabCalend , NIL , lCalendFunc )
		Break
	EndIF

	IF !Empty( aListBox )
		If !lIsBlind
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Monta as Dimensoes dos Objetos         					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

			aAdvSize		:= MsAdvSize()
			aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
			aAdd( aObjCoords , { 000 , 020 , .T. , .F. } )
			aAdd( aObjCoords , { 000 , 010 , .T. , .F. } )
			aAdd( aObjCoords , { 000 , 000 , .T. , .T. , .T.} )
			aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

			//Tratamento dados sensíveis
			If aOfusca[2]
				aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
				IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
					lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
				ENDIF

				IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
					lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
				ENDIF
			EndIf

			DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
			DEFINE MSDIALOG oDlg  TITLE OemToAnsi( STR0052 ) FROM  aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL  // 'Consulta de Hor rios'


					IF ( lCalendFunc )

					@ aObjSize[1,1] , aObjSize[1,2] GROUP oGroup TO ( aObjSize[1,3] ),(( aObjSize[1,4])*0.18 )       LABEL OemToAnsi(STR0039) OF oDlg PIXEL									// "Matricula:"
					oGroup:oFont:= oFont
					@ aObjSize[1,1] , (( aObjSize[1,4])*0.185 ) GROUP oGroup TO aObjSize[1,3],((aObjSize[1,4])*0.87) LABEL OemToAnsi(STR0040) OF oDlg PIXEL									// "Nome:"
					oGroup:oFont:= oFont
					@ aObjSize[1,1] , ((aObjSize[1,4])*0.875) GROUP oGroup TO aObjSize[1,3] ,aObjSize[1,4]   LABEL OemToAnsi(STR0106) OF oDlg PIXEL									// "Admiss„o:"
					oGroup:oFont:= oFont

					@ ((aObjSize[1,1]) +10) , ((aObjSize[1,2]) * 2.5)  SAY StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT)) 					SIZE 050,10 OF oDlg PIXEL FONT oFont
					@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.2)  SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME)) 	SIZE 146,10 OF oDlg PIXEL FONT oFont
					@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.89) SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

					EndIF

					@ aObjSize[2,1], aObjSize[2,2] SAY OemToAnsi( STR0029 ) SIZE aObjSize[2,3] , aObjSize[2,4]  OF oDlg PIXEL FONT oFont									// "Calend rio"


				   	ListBoxCalend( aObjSize[3] , @oDlg , aListBox , @oLBox , bChange  )

					IF ( lCalendFunc )

						IF ( aArray == NIL ) .and. Empty( nPosCalend )	//Pona040
							nPosCalend := aScan( aListBox , { |x| x[ CalendRetCpo( cPrefix+"ORDEM" , .T. , oLBox ) ] == aCols1[ n , Len( aCols1[n] ) ] } )
						Else					//Pona230
						    IF Empty(nPosCalend) 						//Pona230
								nPosCalend := aScan( aListBox , { |x| x[ CalendRetCpo( cPrefix+"ORDEM" , .T. , oLBox ) ] == aCols[ n , GdFieldPos( cPrefix+"ORDEM",aHeaderLoc ) ] } )
						    EndIF
						EndIF

						IF ( nPosCalend > 0 )
							oLBox:nAt := nPosCalend
						EndIF

					EndIF

					bSvSet15 := SetKey( 15 , bSet15 )
					bSvSet24 := SetKey( 24 , bSet24 )

				PonChoiBar(,,"0",.T.,lAcumulado)
			ACTIVATE MSDIALOG oDlg ON INIT enchoicebar(oDlg,bSet15,bSet24,NIL,aButtons) CENTERED
		Else

			PonChoiBar(,,"0",.T.,lAcumulado)
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		SetKey( 15	, IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
		SetKey( 24	, IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )

	EndIF

End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestKeys( aKeys , .T. )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Calendario que foi Modificado em fDiasFolga()	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF ( lCalendFunc )
	aTabCalend := aClone( aCloneCalend )
EndIF

Return( .T. )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fMostraApo³ Autor ³Equipe Advanced RH     ³ Data ³24/04/1996³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Mostra o arquivo de resultados do apontamento              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fMostraApo(nOpc,aResult,oGet,lSetKey,lAcumulado)

Local aKeys		:= GetKeys()
Local aSvoGet	:= SaveoGet( "ALL" , oGet )
Local bNIL		:= { || NIL }
Local bSet15	:= { || NIL }
Local bSet24	:= { || NIL }
Local bSvSet15	:= { || NIL }
Local bSvSet24	:= { || NIL }
Local bResult	:= { || NIL }
Local baSort	:= { || NIL }
Local cAlias    := "SPC"
Local nPos      :=  0
Local oGetNew
Local oDlg
Local oFont
Local oGroup

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}

Local bSet15		:= {}
Local bSet24		:= {}

Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 	:= {}
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

DEFAULT lSetKey := .F.

Private aCols   := {}
Private aHeader := {}
Private n		:= 1
aButtons := {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Montar Consulta dos Apontamentos							  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aHeader := Array( 07 , 09 )

aHeader[ 01 , 01 ] := STR0018	// 'Data Ref.'
aHeader[ 01 , 02 ] := "M_DTREFE"
aHeader[ 01 , 03 ] := Space(1)
aHeader[ 01 , 04 ] := 14
aHeader[ 01 , 05 ] := 0
aHeader[ 01 , 06 ] := NIL
aHeader[ 01 , 07 ] := CHR(251)
aHeader[ 01 , 08 ] := "C"
aHeader[ 01 , 09 ] := cAlias

aHeader[ 02 , 01 ] := STR0055	// 'Cod.'
aHeader[ 02 , 02 ] := "PC_PD"
aHeader[ 02 , 03 ] := Alltrim(X3Picture("PC_PD"))
aHeader[ 02 , 04 ] := GetSx3Cache( "PC_PD" , "X3_TAMANHO" )
aHeader[ 02 , 05 ] := 0
aHeader[ 02 , 06 ] := ""
aHeader[ 02 , 07 ] := CHR(251)
aHeader[ 02 , 08 ] := "C"
aHeader[ 02 , 09 ] := cAlias

aHeader[ 03 , 01 ] := STR0056	// 'Descricao'
aHeader[ 03 , 02 ] := "PC_DESC"
aHeader[ 03 , 03 ] := Alltrim(X3Picture("PC_DESC"))
aHeader[ 03 , 04 ] := GetSx3Cache( "PC_DESC" , "X3_TAMANHO" )
aHeader[ 03 , 05 ] := 0
aHeader[ 03 , 06 ] := Space(1)
aHeader[ 03 , 07 ] := CHR(251)
aHeader[ 03 , 08 ] := "C"
aHeader[ 03 , 09 ] := cAlias

aHeader[ 04 , 01 ] := STR0057	// 'Calculado'
aHeader[ 04 , 02 ] := "PC_QUANTC"
aHeader[ 04 , 03 ] := Alltrim(X3Picture("PC_QUANTC"))
aHeader[ 04 , 04 ] := GetSx3Cache( "PC_QUANTC" , "X3_TAMANHO" )
aHeader[ 04 , 05 ] := GetSx3Cache( "PC_QUANTC" , "X3_DECIMAL" )
aHeader[ 04 , 06 ] := ""
aHeader[ 04 , 07 ] := CHR(251)
aHeader[ 04 , 08 ] := "N"
aHeader[ 04 , 09 ] := cAlias

aHeader[ 05 , 01 ] := STR0101	// 'Centro de Custo'
aHeader[ 05 , 02 ] := "PC_CC"
aHeader[ 05 , 03 ] := Alltrim(X3Picture("PC_CC"))
aHeader[ 05 , 04 ] := GetSx3Cache( "PC_CC" , "X3_TAMANHO" )
aHeader[ 05 , 05 ] := 0
aHeader[ 05 , 06 ] := ""
aHeader[ 05 , 07 ] := CHR(251)
aHeader[ 05 , 08 ] := "C"
aHeader[ 05 , 09 ] := cAlias

aHeader[ 06 , 01 ] := STR0102	// 'Tipo de Marcacao'
aHeader[ 06 , 02 ] := "PC_TPMARCA"
aHeader[ 06 , 03 ] := Alltrim(X3Picture("PC_TPMARCA"))
aHeader[ 06 , 04 ] := GetSx3Cache( "PC_TPMARCA" , "X3_TAMANHO" )
aHeader[ 06 , 05 ] := 0
aHeader[ 06 , 06 ] := ""
aHeader[ 06 , 07 ] := CHR(251)
aHeader[ 06 , 08 ] := "C"
aHeader[ 06 , 09 ] := cAlias

aHeader[ 07 , 01 ] := ""	// Couna em Branco
aHeader[ 07 , 02 ] := "UTIMA_COL"
aHeader[ 07 , 03 ] := Space(1)
aHeader[ 07 , 04 ] := 01
aHeader[ 07 , 05 ] := 0
aHeader[ 07 , 06 ] := ""
aHeader[ 07 , 07 ] := CHR(251)
aHeader[ 07 , 08 ] := "C"
aHeader[ 07 , 09 ] := cAlias

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega aCols de acordo com aResult						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
bResult := { ||	aEval(aResult, { |x| IF( !Empty(x[1]),;
									  			aAdd( aCols , {											 ;
																Dtoc(x[1]) + " - " + DiaSemana(x[1],3)	,;
																x[2]									,;
																DescPdPon(x[2])							,;
																x[3]									,;
																x[4]									,;
																x[5]									,;
																""										 ;
													  		   };
											 		 ),;
										 		 NIL;
										);
				 				};
	  				  );
	  	   }

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Ordena aCols												  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
baSort := { || aSort(@aCols,,,{|x,y|	DtoS(CtoD(Left(x[1],Len(DTOC(MsDate()))),"ddmmyy"))+x[2]+x[6] < ;
					  					DtoS(CtoD(Left(y[1],Len(DTOC(MsDate()))),"ddmmyy"))+y[2]+y[6]	;
							  };
					);
		  }

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ MsgRun para Display de Tela								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
MsAguarde( { || Eval( bResult ) , Eval( bAsort ) } , OemToAnsi(STR0098) , OemToAnsi(STR0008) )//"Carregando Apontamento"###'Aguarde...'

If !lIsBlind
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize(,.T.,370)
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd( aObjCoords , { 000 , 020 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF

		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
	EndIf

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( STR0061 ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL		// "Visualiza‡„o dos Apontamentos"

		@ aObjSize[1,1] , aObjSize[1,2] GROUP oGroup TO ( aObjSize[1,3] ),(( aObjSize[1,4])*0.18 )		LABEL OemToAnsi(STR0039) OF oDlg PIXEL									// "Matricula:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1] , (( aObjSize[1,4])*0.185 ) GROUP oGroup TO aObjSize[1,3],((aObjSize[1,4])*0.87)	LABEL OemToAnsi(STR0040) OF oDlg PIXEL									// "Nome:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1] , ((aObjSize[1,4])*0.875) GROUP oGroup TO  aObjSize[1,3] ,aObjSize[1,4]   		LABEL OemToAnsi(STR0106) OF oDlg PIXEL									// "Admiss„o:"
		oGroup:oFont:= oFont

		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,2]) * 2.5)  SAY StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT)) 					SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.2)  SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME))		SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.89) SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

		oGetNew := MsGetDados():New(aObjSize[2,1], aObjSize[2,2], aObjSize[2,3], aObjSize[2,4],002,NIL,NIL,"",NIL,{},1,NIL,(Len(aCols)))

		bSet15 := {|| oDlg:End() }
		bSvSet15 := SetKey( 15 , bSet15 )
		bSet24 := {|| oDlg:End() }
		bSvSet24 := SetKey( 24 , bSet24 )

		PonChoiBar(oGetNew,nOpc,"2",.F.,lAcumulado)
	ACTIVATE MSDIALOG oDlg ON INIT enchoicebar(oDlg, bSet15, bSet24, NIL, aButtons) VALID ( .T. ) CENTERED
Else

	PonChoiBar(oGetNew,nOpc,"2",.F.,lAcumulado) //Não precisou tratar.
EndIf
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
SetKey( 15	, IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
SetKey( 24	, IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )
RestKeys( aKeys , .T. )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura informacoes aCols, aHeader e n da GetDados Anterior³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestartoGet( aSvoGet , "ALL", @oGet )

Return( .T. )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³FMostraTot³ Autor ³Marinaldo de Jesus     ³ Data ³08/03/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Mostra somente as totalizacoes do arquivo de resultados    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FMostraTot( lAcumulado )

Local aNewCols 		:= {}
Local aNewHeader	:= {}
Local aTotais 		:= {}
Local aKeys			:= GetKeys()
Local cAlias		:= "SPC"
Local bNIL			:= { || NIL }
Local bSvSet15		:= { || NIL }
Local bSvSet24		:= { || NIL }
Local nX      		:= 0
Local nPos    		:= 0
Local nItem 		:= 1
Local oDlg
Local oFont
Local oLbox
Local oGroup

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}

Local bSet15		:= {}
Local bSet24		:= {}

Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 	:= {}
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

Private oGetDados
aButtons := {}

For nX := 1 To Len( aCols )
	IF ( nPos := Ascan(aTotais,{|x| x[1] = aCols[nX,2] .and. x[3] == aCols[nX,5] }) ) > 0
		aTotais[nPos,2] := __TimeSum(aTotais[nPos,2],aCols[nX,4])
	Else
		aAdd(aTotais,{aCols[nX,2],aCols[nX,4],aCols[nX,5] })
	EndIF
Next nX

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Retorna se nao Tiver Totais a Mostrar						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF Len( aTotais ) == 0
	Return( NIL )
EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Montar Consulta dos Apontamentos							  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aNewHeader := Array( 05 , 09 )

aNewHeader[ 01 , 01 ] := STR0055	// 'Cod.'
aNewHeader[ 01 , 02 ] := "PC_PD"
aNewHeader[ 01 , 03 ] := Alltrim(X3Picture("PC_PD"))
aNewHeader[ 01 , 04 ] := GetSx3Cache( "PC_PD" , "X3_TAMANHO" )
aNewHeader[ 01 , 05 ] := 0
aNewHeader[ 01 , 06 ] := ""
aNewHeader[ 01 , 07 ] := CHR(251)
aNewHeader[ 01 , 08 ] := "C"
aNewHeader[ 01 , 09 ] := cAlias

aNewHeader[ 02 , 01 ] := STR0056	// 'Descricao'
aNewHeader[ 02 , 02 ] := "PC_DESC"
aNewHeader[ 02 , 03 ] := Alltrim(X3Picture("PC_DESC"))
aNewHeader[ 02 , 04 ] := GetSx3Cache( "PC_DESC" , "X3_TAMANHO" )
aNewHeader[ 02 , 05 ] := 0
aNewHeader[ 02 , 06 ] := Space(1)
aNewHeader[ 02 , 07 ] := CHR(251)
aNewHeader[ 02 , 08 ] := "C"
aNewHeader[ 02 , 09 ] := cAlias

aNewHeader[ 03 , 01 ] := STR0057	// 'Calculado'
aNewHeader[ 03 , 02 ] := "PC_QUANTC"
aNewHeader[ 03 , 03 ] := Alltrim(X3Picture("PC_QUANTC"))
aNewHeader[ 03 , 04 ] := GetSx3Cache( "PC_QUANTC" , "X3_TAMANHO" )
aNewHeader[ 03 , 05 ] := GetSx3Cache( "PC_QUANTC" , "X3_DECIMAL" )
aNewHeader[ 03 , 06 ] := ""
aNewHeader[ 03 , 07 ] := CHR(251)
aNewHeader[ 03 , 08 ] := "N"
aNewHeader[ 03 , 09 ] := cAlias

aNewHeader[ 04 , 01 ] := STR0101	// 'Centro de Custo'
aNewHeader[ 04 , 02 ] := "PC_CC"
aNewHeader[ 04 , 03 ] := Alltrim(X3Picture("PC_CC"))
aNewHeader[ 04 , 04 ] := GetSx3Cache( "PC_CC" , "X3_TAMANHO" )
aNewHeader[ 04 , 05 ] := 0
aNewHeader[ 04 , 06 ] := ""
aNewHeader[ 04 , 07 ] := CHR(251)
aNewHeader[ 04 , 08 ] := "C"
aNewHeader[ 04 , 09 ] := cAlias

aNewHeader[ 05 , 01 ] := ""	// Couna em Branco
aNewHeader[ 05 , 02 ] := "UTIMA_COL"
aNewHeader[ 05 , 03 ] := Space(1)
aNewHeader[ 05 , 04 ] := 01
aNewHeader[ 05 , 05 ] := 0
aNewHeader[ 05 , 06 ] := ""
aNewHeader[ 05 , 07 ] := CHR(251)
aNewHeader[ 05 , 08 ] := "C"
aNewHeader[ 05 , 09 ] := cAlias

aNewCols := Array( Len( aTotais ) , 06 )

For nX := 1 To Len(aTotais)
	aNewCols[ nX , 01 ] := aTotais[nX,1]				//Codigo do Evento
	aNewCols[ nX , 02 ] := DescPdPon(aTotais[nX,1])	//Descricao do Evento
	aNewCols[ nX , 03 ] := aTotais[nX,2]				//Horas Apontadas
	aNewCols[ nX , 04 ] := aTotais[nX,3]				//Centro de Custo
	aNewCols[ nX , 05 ] := ""							//Coluna em Branco
	aNewCols[ nX , 06 ] := .F.
Next nX

aSort( aNewCols , , , { |x,y| ( x[1] + x[4] ) < ( y[1] + y[4] ) } )

If !lIsBlind
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize(,.T.,370)
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd( aObjCoords , { 000 , 020 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF

		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
	EndIf

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD

	DEFINE MSDIALOG oDlg  FROM aAdvSize[7],0 To aAdvSize[6],aAdvSize[5] PIXEL TITLE OemToAnsi(STR0096 )							   		// ' Totaliza‡„o do Per¡odo '

		@ aObjSize[1,1] , aObjSize[1,2] GROUP oGroup TO ( aObjSize[1,3] ),(( aObjSize[1,4])*0.18 )        LABEL OemToAnsi(STR0039) OF oDlg PIXEL									// "Matricula:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1] , (( aObjSize[1,4])*0.185 ) GROUP oGroup TO aObjSize[1,3],((aObjSize[1,4])*0.87)	LABEL OemToAnsi(STR0040) OF oDlg PIXEL									// "Nome:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1] , ((aObjSize[1,4])*0.875) GROUP oGroup TO  aObjSize[1,3] ,aObjSize[1,4]			LABEL OemToAnsi(STR0106) OF oDlg PIXEL									// "Admiss„o:"
		oGroup:oFont:= oFont

		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,2]) * 2.5)	SAY StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT)) 					SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.2)	SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME))	SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.89)	SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

		oGetDados := MsNewGetDados():New(aObjSize[2,1], aObjSize[2,2], aObjSize[2,3], aObjSize[2,4],0,"AllWaysTrue()","AllWaysTrue()","",{},0,99999,NIL,NIL,NIL,oDlg,aNewHeader,aNewCols)
		bSet15 := { || oDlg:End() }
		bSvSet15 := SetKey( 15 , bSet15 )
		bSet24 := { || oDlg:End() }
		bSvSet24 := SetKey( 24 , bSet24 )

	    PonChoiBar(,,"0",.F.,lAcumulado)
	ACTIVATE MSDIALOG oDlg ON INIT enchoicebar(oDlg, bSet15, bSet24, NIL, aButtons) CENTERED
Else

	PonChoiBar(,,"0",.F.,lAcumulado)
EndIf
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
SetKey( 15	    , IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
SetKey( 24	    , IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )
RestKeys( aKeys , .T. )

Return( NIL )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PreparaCla³ Autor ³Equipe Advanced RH     ³ Data ³24/04/1996³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Prepara o Array aOrdena Para o Apontamento das Marcacoes   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function PreparaCla(	aMarcacoes	,;	//01 - Array com as Marcacoes
						aResult		,;	//02 - Array com os Resultados
						nColMarc	,;  //03 - Numero de Colunas de Marcacoes
						lGrava		,;  //04 - Grava o Apontamento
						lReprocessa	,;	//05 - Reprocessa o Apontamento
						aArray	   	,;	//06 - Array com a Estrutura do aCols
						aHeaderLoc	,;	//07 - Array com a Estrutura do aHeader
						nPosDele    ,;	//08 - Posicao do Registro Deletado em aCols
						lForceApont ,;	//09 - Se Forca o Reapontamento das Marcacoes
						lNoAguarde	,;  //10 - Se nao deve apresentar MSAguarde durante apontamento
						aSvtree		 ;  //11 - Array com informações do acols da SPC, SP8 e SPK
					  )

Local aCodigos		:= {}
Local aAbonosPer	:= {}
Local aLogFile   	:= {} //-- mensagens de inconsistencia no apontamento
Local aCloneCalend	:= {}
Local cOrdem     	:= ""
Local cTurno	 	:= ""
Local cFil	    	:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cMensagem		:= ""
Local cEvesNoDele	:= ""
Local cDsrAutPa		:= PosSP9("036N",SRA->RA_FILIAL,"P9_CODIGO",2)
Local dPerFimApo 	:= Min( dPerFim , dDataBase )
Local lRet		 	:= .T.
Local nXFor      	:= 0
Local nLenXFor	 	:= 0
Local nYFor      	:= 0
Local nLenYFor	 	:= 0
Local nX			:= 0
Local nRecno  		:= 0
Local nPos		 	:= 0
Local nPosData		:= 0
Local nPosHora		:= 0
Local nPosOrdem		:= 0
Local nPosFlag		:= 0
Local nPosTurno		:= 0
Local nPosFuncao	:= 0
Local nPosGiro		:= 0
Local nPosCc		:= 0
Local nPosAponta	:= 0
Local nPosRelog		:= 0
Local nPosTpMar		:= 0
Local nPosPerApo	:= 0
Local nPosDataApo	:= 0
Local nPosNumRep    := 0
Local nPosTpmCrep   := 0
Local nPosTipoReg   := 0
Local nPosMotiVrg   := 0
Local nPosLstApo	:= 0
Local nPosFilCCT	:= 0
Local nPosCodCCT	:= 0
Local nLenMarc		:= 0
Local lForcApAux
Local lCpoCCT		:=  SP4->(ColumnPos("P4_CODCCT") > 0)

DEFAULT lReprocessa := .T.
DEFAULT aResult		:= {}
DEFAULT lForceApont	:= .F.
DEFAULT lNoAguarde	:= .F.
DEFAULT	aSvtree		:= {}
				
lForcApAux := lForceApont

IF !fCargaId(@aCodigos,SRA->RA_FILIAL)
	Return( NIL )
EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega a aAbonosPer para a GravaSPC						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
fAbonosPer( @aAbonosPer , dPerIni , dPerFim , cFil , cMat )

IF ( lReprocessa )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa Variaveis Staticas no Apontamento              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF( lForceApont , PonDestroyStatic() , NIL )

	//-- Funcao de Apontamento
	aResult := {}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Prepara o Array com as Marcacoes para o Apontamento         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( ( aArray == NIL ) .and. ( aHeaderLoc == NIL ) .and. ( nPosDele == NIL ) )

		//-- Looping para cada dia.
		nLenXFor := Len(aCols1)
		For nXFor := 1 to nLenXFor

			// Se possuir abono para o dia forço o reapontamento
			If aScan( aAbonosPer , { |x| x[AABONOS_DATA] == aCols1[nXFor,1] } ) > 0
				lForceApont := .T.
			EndIf

			cOrdem := aCols1[nXFor,nColMarc+3] //-- Ordem da Ocorrˆncia

			IF ( nPos := aScan( aTabCalend , { |x| x[CALEND_POS_ORDEM] == cOrdem } ) ) > 0
				cTurno := aTabCalend[ nPos , CALEND_POS_TURNO ]
			EndIF

			//-- Looping para cada marca‡„o.
		 	nLenYFor := (nColMarc+2)
		 	For nYFor := 3 To nLenYFor

				//-- N„o Carrega Marcacoes Vazias
				IF Empty(aCols1[nXFor,nYFor,1])
					Loop
				EndIF
				
				// Não processa marcações que já foram apontadas anteriormente
				If !lForceApont
					nPosLstApo := aScan(aLastApo, { |x| x[1] == aCols1[nXFor,nYFor,12] } )
					lForceApont := nPosLstApo == 0
				EndIf

				nRecno := aCols1[nXFor,nYFor,1]

				//-- Verifica se Teve Alguma Alteracao e Altera Flag de Apontamento
				IF (;
						( lForceApont ) .Or.;
				   		( aCols1[nXFor,nYFor,1] != aOldCols1[nXFor,nYFor,1] ) .Or.;
				   		( aCols1[nXFor,nYFor,3] != aOldCols1[nXFor,nYFor,3] ) .Or.;
				   		( aCols1[nXFor,nYFor,4] != aOldCols1[nXFor,nYFor,4] ) .Or.;
				   		( aCols1[nXFor,nYFor,5] != aOldCols1[nXFor,nYFor,5] ) .Or.;
				   		( aCols1[nXFor,nYFor,8] != aOldCols1[nXFor,nYFor,8] ) .Or.;
				   		( aCols1[nXFor,nYFor,9] != aOldCols1[nXFor,nYFor,9] );
				   	)
	                aCols1[nXFor,nYFor,6] := "N" //Altera o Flag de Apontamento
				EndIF

				//-- Carrega o Array aMarcacoes com as Marcacoes a Serem Apontadas
				aAdd( aMarcacoes , Array( ELEMENTOS_AMARC ) )
				nLenMarc := Len( aMarcacoes )
				aMarcacoes[ nLenMarc , AMARC_DATA		] := aCols1[nXFor,nYFor,08]								//01 - Data da Marcacao
				aMarcacoes[ nLenMarc , AMARC_HORA		] := Val(aCols1[nXFor,nYFor,01])						//02 - Hora da Marcacao
				aMarcacoes[ nLenMarc , AMARC_ORDEM		] := cOrdem												//03 - Ordem da Marcacao
				aMarcacoes[ nLenMarc , AMARC_FLAG		] := aCols1[nXFor,nYFor,07]								//04 - Flag da Marcacao
				aMarcacoes[ nLenMarc , AMARC_RECNO		] := nRecno												//05 - Recno no SP8 ou SPG
				aMarcacoes[ nLenMarc , AMARC_TURNO		] := cTurno												//06 - Turno de Trabalho
				aMarcacoes[ nLenMarc , AMARC_FUNCAO		] := aCols1[nXFor,nYFor,03]								//07 - Funcao
				aMarcacoes[ nLenMarc , AMARC_GIRO		] := aCols1[nXFor,nYFor,04]								//08 - Giro
				aMarcacoes[ nLenMarc , AMARC_CC			] := aCols1[nXFor,nYFor,05]								//09 - Centro de Custo
				aMarcacoes[ nLenMarc , AMARC_APONTA		] := aCols1[nXFor,nYFor,06]								//10 - Flag de Apontamento
				aMarcacoes[ nLenMarc , AMARC_RELOGIO	] := aCols1[nXFor,nYFor,09]								//11 - Relogio
				aMarcacoes[ nLenMarc , AMARC_TIPOMARC	] := aCols1[nXFor,nYFor,10]								//12 - Tipo de Marcacao
				aMarcacoes[ nLenMarc , AMARC_L_ORIGEM	] := ( !Empty(aMarcacoes[ nLenMarc , AMARC_FLAG ]) .and. aMarcacoes[ nLenMarc , AMARC_FLAG ] $ "M,I" )	//13 - Logico
				aMarcacoes[ nLenMarc , AMARC_DTHR2STR	] := DataHora2Str(;
																			aMarcacoes[ nLenMarc , AMARC_DATA],;
																			aMarcacoes[ nLenMarc , AMARC_HORA];
																		)										//14 - String de Data/Hora
				aMarcacoes[ nLenMarc , AMARC_PERAPONTA	] := aCols1[nXFor,nYFor,11]                            //15 - Periodo de Apontamento
				If lPort1510
					aMarcacoes[ nLenMarc , AMARC_DATAAPO] := aCols1[nXFor,nYFor,12]           					//25 - Data de Apontamento
					aMarcacoes[ nLenMarc , AMARC_NUMREP ] := aCols1[nXFor,nYFor,13]           					//26 - Némero do REP
					aMarcacoes[ nLenMarc , AMARC_TPMCREP] := aCols1[nXFor,nYFor,14]               				//27 - Tipo de Marcação no REP
					aMarcacoes[ nLenMarc , AMARC_TIPOREG] := aCols1[nXFor,nYFor,15]               				//28 - Tipo de Registro
					aMarcacoes[ nLenMarc , AMARC_MOTIVRG] := aCols1[nXFor,nYFor,16]               				//29 - Motivo Modificação do Registro
				EndIf
				
				If lCpoCCT
					aMarcacoes[ nLenMarc , AMARC_FILCCT] := aCols1[nXFor,nYFor, 18]
					aMarcacoes[ nLenMarc , AMARC_CODCCT] := aCols1[nXFor,nYFor, 19]
				EndIf
				
			Next nYFor
			lForceApont := lForcApAux
		Next nXFor
	ElseIF ( ( aArray != NIL ) .and. ( aHeaderLoc != NIL ) .and. ( nPosDele != NIL ) )

		IF ( nXFor := Len( aArray ) ) > 0

			nPosData		:= GdFieldPos( "P8_DATA"	, aHeaderLoc )
			nPosHora		:= GdFieldPos( "P8_HORA"	, aHeaderLoc )
			nPosOrdem		:= GdFieldPos( "P8_ORDEM"	, aHeaderLoc )
			nPosFlag		:= GdFieldPos( "P8_FLAG"	, aHeaderLoc )
			nPosTurno		:= GdFieldPos( "P8_TURNO"	, aHeaderLoc )
			nPosFuncao		:= GdFieldPos( "P8_FUNCAO"	, aHeaderLoc )
			nPosGiro		:= GdFieldPos( "P8_GIRO"	, aHeaderLoc )
			nPosCc			:= GdFieldPos( "P8_CC"		, aHeaderLoc )
			nPosAponta		:= GdFieldPos( "P8_APONTA"	, aHeaderLoc )
			nPosRelog		:= GdFieldPos( "P8_RELOGIO"	, aHeaderLoc )
			nPosTpMar		:= GdFieldPos( "P8_TPMARCA"	, aHeaderLoc )
			nPosPerApo		:= GdFieldPos( "P8_PAPONTA" , aHeaderLoc )
			If lPort1510
				nPosDataApo := GdFieldPos( "P8_DATAAPO" , aHeaderLoc )
				nPosNumRep  := GdFieldPos( "P8_NUMREP"  , aHeaderLoc )
				nPosTpmCrep := GdFieldPos( "P8_TPMCREP" , aHeaderLoc )
				nPosTipoReg := GdFieldPos( "P8_TIPOREG" , aHeaderLoc )
				nPosMotiVrg := GdFieldPos( "P8_MOTIVRG" , aHeaderLoc )
			EndIf
			If lCpoCCT
				nPosFilCCT := GdFieldPos( "P8_FILCCT" , aHeaderLoc )
				nPosCodCCT := GdFieldPos( "P8_CODCCT" , aHeaderLoc )
			EndIf
			
			For nX := 1 To nXFor
				IF !aArray[ nX , nPosDele ]
					aAdd( aMarcacoes , Array( ELEMENTOS_AMARC ) )
					nLenMarc := Len( aMarcacoes )
					aMarcacoes[ nLenMarc , AMARC_DATA		] := aArray[ nX , nPosData   ]							//01 - Data da Marcacao
					aMarcacoes[ nLenMarc , AMARC_HORA		] := aArray[ nX , nPosHora   ]							//02 - Hora da Marcacao
					aMarcacoes[ nLenMarc , AMARC_ORDEM		] := aArray[ nX , nPosOrdem  ]							//03 - Ordem da Marcacao
					aMarcacoes[ nLenMarc , AMARC_FLAG		] := aArray[ nX , nPosFlag   ]							//04 - Flag da Marcacao
					aMarcacoes[ nLenMarc , AMARC_RECNO		] := 0											   		//05 - Recno no SP8 ou SPG
					aMarcacoes[ nLenMarc , AMARC_TURNO		] := aArray[ nX , nPosTurno  ]							//06 - Turno de Trabalho
					aMarcacoes[ nLenMarc , AMARC_FUNCAO		] := aArray[ nX , nPosFuncao ]							//07 - Funcao
					aMarcacoes[ nLenMarc , AMARC_GIRO		] := aArray[ nX , nPosGiro   ]							//08 - Giro
					aMarcacoes[ nLenMarc , AMARC_CC			] := aArray[ nX , nPosCc     ]							//09 - Centro de Custo
					aMarcacoes[ nLenMarc , AMARC_APONTA		] := IF( lForceApont,"N",aArray[ nX , nPosAponta])		//10 - Flag de Apontamento
					aMarcacoes[ nLenMarc , AMARC_RELOGIO	] := aArray[ nX , nPosRelog  ]							//11 - Relogio
			    	aMarcacoes[ nLenMarc , AMARC_TIPOMARC	] := aArray[ nX , nPosTpMar  ]							//12 - Tipo de Marcacao
			    	aMarcacoes[ nLenMarc , AMARC_L_ORIGEM	] := ( !Empty(aMarcacoes[ nLenMarc , AMARC_FLAG ]) .and. aMarcacoes[ nLenMarc , AMARC_FLAG ] $ "M,I" )	//13 - Logico
					aMarcacoes[ nLenMarc , AMARC_DTHR2STR	] := DataHora2Str(;
																				aMarcacoes[ nLenMarc , AMARC_DATA],;
																				aMarcacoes[ nLenMarc , AMARC_HORA];
																		)											//14 - String de Data/Hora
					aMarcacoes[ nLenMarc , AMARC_PERAPONTA	] := aArray[ nX , nPosPerApo ]                      	//15 - Periodo de Apontamento
					If lPort1510
						aMarcacoes[ nLenMarc , AMARC_DATAAPO] := aArray[ nX , nPosDataApo]                 		//25 - Data de Apontamento
						aMarcacoes[ nLenMarc , AMARC_NUMREP ] := aArray[ nX , nPosNumRep ]                 		//26 - Némero do REP
						aMarcacoes[ nLenMarc , AMARC_TPMCREP] := aArray[ nX , nPosTpmCrep]                  		//27 - Tipo de Marcação no REP
						aMarcacoes[ nLenMarc , AMARC_TIPOREG] := aArray[ nX , nPosTipoReg]                  		//28 - Tipo de Registro
						aMarcacoes[ nLenMarc , AMARC_MOTIVRG] := aArray[ nX , nPosMotiVrg]                  		//29 - Motivo Modificação do Registro
					EndIf
					If lCpoCCT
						aMarcacoes[ nLenMarc , AMARC_FILCCT] := aArray[ nX , nPosFilCCT]                 		//
						aMarcacoes[ nLenMarc , AMARC_CODCCT] := aArray[ nX , nPosCodCCT]                 		//
					EndIf
		    	EndIF
		    Next nX

		EndIF

	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Remonta Calendario para funcionarios com Turnos Opcionais   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	RecriaCalend( @aTabCalend, @aTabPadrao,,aMarcacoes )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Salva o Calendario que podera ter o Conteudo Modificado  por³
	³ fDiasFolga()												  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aCloneCalend := aClone( aTabCalend )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gera as folgas automaticas								  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	fDiasFolga(aClone(aMarcacoes),@aTabCalend,dPerIni,dPerFim,cDsrAutPa)

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Aponta Marcacoes do Funcionario                      	     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cMensagem := IF( lForceApont,OemToAnsi(STR0110),OemToAnsi(STR0097))	//" Reapontando as Marca‡”es..."###Apontando Marcacoes "
	cTitulo	  := OemToAnsi(STR0098)										//"Aguarde..."

    IF Empty(dPerFimApo)
		dPerFimApo 	:= Min( dPerFim , dDataBase )
	Endif

	If lNoAguarde //Utilizacao da MsAguarde nos integrados(PONA280) ocasionava erro de sincronismo do Protheus, logo foi desabilitada.

		CursorWait()

		lRet := Aponta(	dPerIni		 ,;
						dPerFimApo	 ,;
						@aMarcacoes	 ,;
						aTabCalend	 ,;
						cFil		 ,;
						cMat		 ,;
						aCodigos	 ,;
						@aResult	 ,;
						lGrava		 ,;
						.T.			 ,;
						@aLogFile	 ,;
						@aAbonosPer	 ,;
						/*lApoSaida*/,;
						aSvtree		  ;
					  )

		CursorArrow()

	Else

		MsAguarde({|| lRet := Aponta(	dPerIni		 ,;
										dPerFimApo	 ,;
										@aMarcacoes	 ,;
										aTabCalend	 ,;
										cFil		 ,;
										cMat		 ,;
										aCodigos	 ,;
										@aResult	 ,;
										lGrava		 ,;
										.T.			 ,;
										@aLogFile	 ,;
										@aAbonosPer	 ,;
										/*lApoSaida*/,;
										aSvtree		  ;
									  );
				},;
				cTitulo,;
				cMensagem;
				)
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura o Calendario que foi Modificado em fDiasFolga()	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aTabCalend := aClone( aCloneCalend )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se o Retorno do Apontamento foi OK             	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( lRet )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Reinicializa Variaveis Staticas no Apontamento              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		PonDestroyStatic()
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Gera e Mostra o Log 										  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !Empty( aLogFile )
			fMakeLog( { aLogFile } , { STR0113 } , NIL , .T. , FunName() ) //'Log de Ocorrencias:'
		EndIF
	EndIF

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reordeno corretamente o tipo de marcação nas marcações 	   ³
	³ processadas												   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	fAltTpMarc(@aMarcacoes)

ElseIF ( lGrava )
	//Obtem os Eventos que nao podem ser Deletados do Resultado
	cEvesNoDele := ObtemEveNoDele( aCodigos )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Apenas Grava o Apontamento no SPC                    	     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	MsAguarde( { || GravaSPC( aResult, cFil , cMat , cEvesNoDele , dPerIni , dPerFim , aAbonosPer ) },;
				OemToAnsi(STR0098),;
				OemToAnsi(STR0103);
			 )
EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Executa o Ponto de Entrada Que Deixou de Ser Executado     no³
³ Apontamento												   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF ( lGrava .and. lPonaPo3Block )
	ExecBlock( "PONAPO3" , .F. , .F. , { aClone( aMarcacoes ) , aClone( aTabCalend ) } , .F. )
EndIF

Return( lRet )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PonChoiBar³ Autor ³Equipe Advanded RH     ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Monta o array aButtons                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PonChoiBar(oGet,nOpc,cBarra,lLegenda,lAcumulado)

/*/BEGINDOC
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³cBarra: 0 -> Botoes DEFAULT - OK + Calendario			³
³        1 -> Todos os Botoes							³
³        2 -> Botoes DEFAULT - OK + Totalizacao			³
³        3 -> Botoes DEFAULT							³
³        4 -> Botoes DEFAULT - OK + Consulta Apontamento³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ENDDOC*/

Local aBar40		:= {}
Local aBtn40		:= {}
Local aKeys			:= GetKeys()
Local bColDel		:= { || NIL }
Local bColInc		:= { || NIL }
Local bGerMarOne	:= { || NIL }
Local bGerAleOne	:= { || NIL }
Local bRecRFE		:= { || NIL }
Local bAponMarc		:= { || NIL }
Local bReaponMarc	:= { || NIL }
Local bCalend		:= { || NIL }
Local bEditCel		:= { || NIL }
Local bShowTot		:= { || NIL }
Local nCount		:= 0
Local nMinMax		:= Abs( SuperGetMv( "MV_MCALEAT" , NIL , 0 , cFilAnt ) )
Local aSvoGet		:= {}
Local bLegend		:= { || NIL }

DEFAULT lAcumulado	:= .F.
DEFAULT lLegenda	:= .F.
DEFAULT lPnaBar   	:= ExistBlock( "PNA040BAR" )
DEFAULT lPnaBtn   	:= ExistBlock( "PNA040BTN" )

bColDel		:= { || fMoveCols( oGet , 2 ) }
bColInc		:= { || fMoveCols( oGet , 1 ) }
bGerMarOne	:= { || fMoveCols( oGet , 3 ) }
IF nMinMax > 0 .and. cBarra == "1"
	bGerAleOne	:= { || fMoveCols(oGet,3,nMinMax) }
EndIF

bRecRFE		:= { || aSvOGet := SaveoGet("ALL",oGet),;
				IF(	Pna040RecRFE(oGet,@aSvoGet),;
					(;
				   		oGet:oBrowse:lDisablePaint := .T.,;
			   			oGet:Refresh(.T.),;
						oGet:oBrowse:SetFocus(),;
						RestartoGet( aSvoGet , "ALL", @oGet ),;
						oGet:oBrowse:lDisablePaint := .F.;
					),;
					NIL;
				   );
			 	}

IF ( !lAcumulado .or. lAcumulado .and. ( cBarra == "4" ) )
	bAponMarc	:= { || f_Alt_T(oGet,nOpc) }
	IF !( cBarra == "4" )
		bReaponMarc	:= { || f_Alt_T(oGet,nOpc,.T.) }
	EndIF
EndIF

bCalend		:= { || f_Alt_H(oGet,,,,lAcumulado) }
bEditCel	:= { || aSvOGet := SaveoGet("ALL",oGet),;
					IF(	Pna040EditCel(oGet,@aSvoGet,nOpc),;
						(;
							oGet:oBrowse:lDisablePaint := .T.,;
			   		  		oGet:Refresh(.T.),;
					   		oGet:oBrowse:SetFocus(),;
					   		RestartoGet( aSvoGet , "ALL", @oGet ),;
					   		oGet:oBrowse:lDisablePaint := .F.;
						),;
						RestartoGet(aSvoGet,"ALL",@oGet);
					   );
				 }

bShowTot	:= { || fMostraTot( lAcumulado ) }
bLegend		:= { || GetLegendCalend() }

aAdd(aButtons, { "S4WB009N", { || Agenda()  } ,  OemToAnsi(STR0274) } )

IF ( ( cBarra == "1" ) .or. ( cBarra == "4" ) )
	IF ( cBarra != "4" )
		If lPort1510
			aAdd(aButtons, { "SDUZAP", { || Eval( bColDel )  } ,  OemToAnsi(STR0311) } ) // Desconsidera
			SetKey( VK_F4 , bColDel )
		Else
			aAdd(aButtons, { "SDUZAP", { || Eval( bColDel )  } ,  OemToAnsi(STR0278) } ) // Deleta
			SetKey( VK_F4 , bColDel )
		EndIf

		aAdd(aButtons, { "SDUFIELDS", { || Eval( bColInc )  } ,  OemToAnsi(STR0280) } ) // Inclui
		SetKey( VK_F5 , bColInc )

		aAdd(aButtons, { "CLOCK01", { || Eval( bGerMarOne )  } ,  OemToAnsi(STR0282) } ) // Gera
		SetKey( VK_F6 , bGerMarOne )

		aAdd(aButtons, { "FILTRO", { || Eval( bGerAleOne )  } ,  OemToAnsi(STR0316) } ) // Marcação aleatória
		SetKey( VK_F7 , bGerAleOne )

		If lPort1510 .and. !lPona180
			aAdd(aButtons, { "DEVOLNF", { || Eval( bRecRFE )  } ,  OemToAnsi(STR0309) } ) // Restaurar
			SetKey( K_ALT_R , bRecRFE )
		EndIf
	EndIF

	IF !(lAcumulado .and. cBarra != "4")
	    aAdd(aButtons, { "COLTOT", { || Eval( bAponMarc )  } ,  OemToAnsi(STR0203) } ) // Totaliza
	SetKey( VK_F8 , bAponMarc )
	EndIf
	IF ( cBarra != "4" )
		IF !lAcumulado
			aAdd(aButtons, { "RECALC", { || Eval( bReaponMarc )  } ,  OemToAnsi(STR0209) } ) // Reaponta
		SetKey( VK_F9 , bReaponMarc )
		EndIF
	EndIF

	aAdd(aButtons, { "S4SB014N", { || Eval( bCalend )  } ,  OemToAnsi(STR0285) } ) // Consulta
	SetKey( VK_F10 , bCalend )

	IF ( cBarra != "4" )
		IF !( ( nMinMax == 0 ) .and. ( cBarra == "1" ) )
			aAdd(aButtons, { "ALTERA", { || Eval( bEditCel )  } ,  OemToAnsi(STR0211) } ) // Editar
		SetKey( VK_F11 , bEditCel )
			EndIF
		EndIF

ElseIF ( cBarra == "2" )
  	aAdd(aButtons, { "COLTOT", { || Eval( bShowTot )  } ,  OemToAnsi(STR0286) } ) // Total Geral
	SetKey( VK_F8 , bShowTot )
EndIF

IF lLegenda
  	aAdd(aButtons, { "BMPVISUAL", { || Eval( bLegend )  } ,  OemToAnsi(STR0210) } ) // Legenda
	SetKey( VK_F4 , bLegend )
EndIF

If lPnaBtn
	aBtn40 	:= ExecBlock ( "PNA040BTN",.F.,.F. )
	If Valtype( aBtn40 ) == "A"
		For nCount  := 1 To Len( aBtn40 )
			cRes	:= aBtn40[nCount,1]//Bitmap do botao
			bAction := aBtn40[nCount,2]//Acao do botao
			cDesc	:= aBtn40[nCount,3]//Descricao do botao
   			aAdd(aButtons, { cRes, bAction , OemToAnsi(cDesc) } )

   			//oNewBtn := TBtnBmp():NewBar( cRes,cRes,,,cDesc, bAction, .T., oBar,,,cToolt)//cria botao
		Next
	EndIf
EndIf

If lPnaBar
	aBar40 	:= ExecBlock( "PNA040BAR", .F., .F., {aButtons} )
	If Valtype( aBar40 ) == "A"
		aButtons := aClone(aBar40)
	EndIf
EndIf

Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn040VHrs ³ Autor ³ Equipe Advanced RH    ³ Data ³03/06/1997³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Consiste Digita‡„o de Horas (DOS) e altera aCols1 (WINDOWS)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pn040VHrs(ExpN1,ExpO1,ExpN2,ExpN3,ExpA1,ExpA2,ExpA3,ExpA4) ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cHora 		= Hora digitada.                              ³±±
±±³          ³ oGet	 		= Objeto oGet.                                ³±±
±±³          ³ n	 		= Linha do array aCols.                       ³±±
±±³          ³ nColMarc 	= N£mero de Colunas com Hor rios.             ³±±
±±³          ³ aCols		= Array com as marca‡oes 					  ³±±
±±³          ³ aCols1		= Array com as Marca‡oes (C¢pia)			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PonA040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fPn040VHrs( cHora , oGet , n , nColMarc , aCols , aCols1, lRoboAut, nColAut )

Local cCusto	:= SRA->RA_CC
Local nColPos	:= If(lRoboAut, nColAut, oGet:ColPos )
Local cLastHrs	:= aCols1[ n , nColPos , 1 ]
Local cMotivo	:= ""
Local cHelp		:= ""
Local lRet		:= .T.
Local nHora		:= Val( cHora )
Local nColAnt	:= nColPos
Local nTamCol	:= Len( aCols[ n ] )
Local nTamCol1	:= Len( aCols1[ n ] )
Local nX		:= 0
Local nPos 		:= 0
Local aTpMarc	:= {}

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ So Valida Quando Houver Diferenca Nas Horas                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( cLastHrs == cHora )
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Valida a Hora Digitada                                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( lRet := VldHora(nHora) )
		//"A hora digitada ‚ inv lida."###'Aviso'
		MsgInfo( OemToAnsi( STR0121 ) , OemToAnsi( STR0108 ) )
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Efetua a Altera‡„o da Horas em aCols1.                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aCols1[n,nColPos,1] := IF( Empty( cHora ) , Space( 5 ) , StrZero( nHora , 5 , 2 ) ) //-- Hora

	IF Empty( cHora )
		aCols1[ n , nColPos , 8 ] :=   Ctod("")
		If lPort1510
			For nPos := 3 to nTamCol
				If ( aOldCols1[n,nPos,2] == aCols1[n,nColPos,02] )
					aOldCols1[ n , nPos , 14 ] := "D"
					Exit
				EndIf
			Next nPos
		EndIf
	Else

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega a Data Para Hora Informada                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( nColPos == 3 ) .and. ( ( nColAnt + 1 ) <= nTamCol )
			IF !Empty( aCols1[ n , nColAnt + 1 , 1 ] ) .and. nHora > Val( aCols1[ n , nColAnt + 1 , 1 ] )
				aCols1[ n , nColPos , 8 ] := IF( Empty( aCols1[ n , nColAnt + 1 , 8 ] ) , aCols1[ n , 2 ] - 1 , aCols1[ n , nColAnt + 1 , 8 ] - 1 ) //-- Data
		    Else
				While ( ++nColAnt <= nTamCol )
					IF !Empty( aCols1[ n , nColAnt , 1 ] ) .and. nHora > Val( aCols1[ n , nColAnt , 1 ] )
						aCols1[ n , nColPos , 8 ] := IF( Empty( aCols1[ n , nColAnt , 8 ] ) , aCols1[ n , 2 ] - 1 , aCols1[ n , nColAnt , 8 ] - 1 ) //-- Data
						Exit
					EndIF
				End While
		 		IF Empty( aCols1[ n , nColPos , 8 ] )
		 			aCols1[ n , nColPos , 8 ] := aCols1[ n , 2 ]
		 		EndIF
		    EndIF
		    aCols[ n , 2 ] := aCols1[ n , nColPos , 8 ]
		ElseIF ( nColPos > 3 ) .and. ( ( nColAnt - 1 ) >= 3 )
			IF !Empty( aCols1[ n , nColAnt - 1 , 1 ] ) .and. nHora < Val( aCols1[ n , nColAnt - 1 , 1 ] )
				aCols1[ n , nColPos , 8 ] := IF( Empty( aCols1[ n , nColAnt - 1 , 8 ] ) , aCols1[ n , 2 ] + 1 , aCols1[ n , nColAnt - 1 , 8 ] + 1 ) //-- Data
		    Else
				While ( --nColAnt >= 3 )
					IF !Empty( aCols1[ n , nColAnt , 1 ] ) .and. nHora < Val( aCols1[ n , nColAnt , 1 ] )
						aCols1[ n , nColPos , 8 ] := IF( Empty( aCols1[ n , nColAnt , 8 ] ) , aCols1[ n , 2 ] + 1 , aCols1[ n , nColAnt , 8 ] + 1 ) //-- Data
						Exit
					EndIF
				End While
		 		IF Empty( aCols1[ n , nColPos , 8 ] )
		 			aCols1[ n , nColPos , 8 ] := aCols1[ n , 2 ]
		 		EndIF
		    EndIF
		EndIF
	Endif

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se a Marcacao esta Sem Centro de Custo e Carrega   o³
	³ Centro de Custo do Cadastro e Altera o Flag de Apontamento de³
	³ Todas as Marcacoes do Dia.                                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nX := 1 To nTamCol1
		IF ValType( aCols1[ n , nX ] ) == "A"
			IF Empty( aCols1[ n , nX , 5 ]  )
				aCols1[ n , nX , 5 ] := cCusto	//Carrega o Centro de Custo
			EndIF
			aCols1[ n , nX , 6 ] := "N"			//Altera o Flag de Apontamento
		EndIF
	Next nX

End Sequence

If lRet
	If lPort1510
		If Empty(aCols1[ n , nColPos , 17 ])
			//Solicita motivo para inclusao
			If !lIsBlind
				If !fGetMotivo(@cMotivo, @cHelp, 1 )
					MsgAlert( cHelp , STR0108 ) //cHelp###Atenção
					Return(.F.)
				EndIf
			Else
				cMotivo :="INCLUSAO MANUAL"
			EndIf
			TabMarc( "SPJ" , aTpMarc )
			aCols1[ n , nColPos , 10 ] := aTpMarc[nColPos-2]
			aCols1[ n , nColPos , 12 ] := aCols1[ n , 01 ]
			aCols1[ n , nColPos , 14 ] := Space(1)
			aCols1[ n , nColPos , 15 ] := "I"
			aCols1[ n , nColPos , 16 ] := cMotivo
		EndIf
	EndIf
EndIf

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn040VDts ³ Autor ³ Equipe Advanced RH    ³ Data ³03/06/1997³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Nil (DOS) e altera aCols1 (WINDOWS)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fPn040VDts( dData , oGet , n , nColMarc , aCols , aCols1 ) ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cHora 		= Hora digitada.                              ³±±
±±³          ³ oGet	 		= Objeto oGet.                                ³±±
±±³          ³ n	 		= Linha do array aCols.                       ³±±
±±³          ³ nColMarc 	= N£mero de Colunas com Hor rios.             ³±±
±±³          ³ aCols		= Array com as marca‡oes 					  ³±±
±±³          ³ aCols1		= Array com as Marca‡oes (C¢pia)			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PonA040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fPn040VDts( dData , oGet , n , nColMarc , aCols , aCols1 )

Local cCusto	:= SRA->RA_CC
Local dLastData := aCols1[ n , 2 ]
Local lRet		:= .T.
Local nColAnt	:= oGet:ColPos
Local nTamCol1	:= Len( aCols1[ n ] )
Local nX		:= 0

Begin Sequence

	//-- N„o permite alterar datas j  existentes
	IF ( n <= nLenIni .and. ( nColAnt == 1 ) )
		lRet := .F.
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ So Passa Pela Validacao Quando Nova Data For Diferente       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( dLastData != dData )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Nao Permite Data em Branco                                   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF Empty(dData)
			Help(" ",1,"P040DTNIL")
			lRet := .F.
			Break
		EndIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Efetua a Altera‡„o da Data em aCols1.                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aCols1[ n , 2 ]		:= dData	//-- Data Real
		aCols1[ n , 3 , 8 ] := dData	//-- Altera a Data da 1a. Entrada

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se a Marcacao esta Sem Centro de Custo e Carrega   o³
		³ Centro de Custo do Cadastro e Acerta a Data e Altera o   Flag³
		³ de Apontamento de Todas as Marcacoes do Dia.                 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		For nX := 3 To nTamCol1
			IF ValType( aCols1[ n , nX ] ) == "A"
				IF Empty( aCols1[ n , nX , 5 ]  )
					aCols1[ n , nX , 5 ] := cCusto	//Carrega o Centro de Custo
				EndIF
				aCols1[ n , nX , 6 ] := "N"			//Altera o Flag de Apontamento
			EndIF
		Next nX

	EndIF

End Sequence

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetNewResult³ Autor ³Marinaldo de Jesus    ³ Data ³30/07/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Remontar aResult                                             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetNewResult( aResult , aLastApo , aArrayAtu , aArrayAnt )	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aResult		-> Array contendo apenas os Resultados Apontados ³
³          ³aLastApo	-> Array com os Valores Apontados Anteriormente	 ³
³          ³aArrayAtu	-> Array com os Valores de aCols (Atual)         ³
³          ³aArrayAnt   -> Array com os Valores do Primeiro aCols      	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³aResult                                              	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GetNewResult( aResult , aLastApo , aArrayAtu , aArrayAnt )

Local bAsc	:= { || NIL }
Local bSrt	:= { | x , y | Dtos( x[1] ) + x[2] < Dtos( y[1] ) + y[2] }
Local nX	:= 0
Local nY	:= 0
Local nLenX	:= 0
Local nLenY	:= 0
Local nPos	:= 0

nLenX := Min( Len( aArrayAtu ) , Len( aArrayAnt ) )

bAsc :=	{ |x|	x[01] == aLastApo[nY,01]	.and.;	//Data da Geracao
				x[02] == aLastApo[nY,02]	.and.;	//Codigo do Evento
				x[04] == aLastApo[nY,04]	.and.;	//Centro de Custo
				x[05] == aLastApo[nY,05]		 ;	//Tipo de Marcacao
		 }

For nX := 1 To nLenX
	IF fCompArray( aArrayAtu[ nX ] , aArrayAnt[ nX ] )
		IF ( nPos := aScan( aLastApo , { |x| x[01] == aArrayAtu[ nX , 01 ] } ) ) > 0
			nLenY	:= Len( aLastApo )
			For nY := nPos To nLenY
				IF aLastApo[ nY , 01 ] == aArrayAtu[ nX , 01 ] .and. aScan( aResult , bAsc ) == 0
					aAdd( aResult , aClone( aLastApo[ nY ] ) )
				Else
					Exit
				EndIF
			Next nY
		EndIF
	EndIF
Next nX

aSort( @aResult , NIL , NIL , bSrt )

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pna040EditCel³Autor ³Marinaldo de Jesus    ³ Data ³17/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Editar Campos Nao Visualizaveis na GetDados          		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pna040EditCel( nPosCel )									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³                                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pna040EditCel( oGet , aSvoGet, nOpcX )

Local aArea			:= GetArea()
Local aAreaCols		:= {}
Local aKeys			:= GetKeys()
Local aAlterGd		:= {}
Local aVirtGd		:= {}
Local aVisual		:= {}
Local aNotFields	:= {}
Local aSvCols		:= {}
Local bSvSet15		:= { || NIL }
Local bSvSet24		:= { || NIL }
Local bSkip			:= { || NIL }
Local cAlias		:= IF( lPona180 , "SPG" , "SP8" )
Local cPrefixo		:= ( PrefixoCpo( cAlias ) + "_" )
//Local nUsado		:= 0
Local nOpc			:= 0
Local nSvn			:= aSvoGet[3]
Local nSvColPos		:= oGet:oBrowse:nColPos
Local nAlt			:= 0
Local nAlts			:= 0
Local lEdit			:= .F.
Local lNew			:= .F.
Local oDlgNew
Local oGetNew
Local cCod			:= SRA->RA_MAT
Local bSeekWhile	:=  {||  }
Local nSPZCOrd		:= 0
Local dDataPesq
Local nPosData 		:= 0
Local nPosHr 		:= 0
Local nPosDataApo   := 0
Local nPosNumRep    := 0
Local nPosTpmCrep   := 0
Local nPosTipoReg   := 0
Local nPosMotiVrg   := 0

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
DEFAULT lPnaCel	:= ExistBlock( "PNA040CEL" )
aButtons := {}

If lPona180
	bSeekWhile	:= {|| SPG->PG_FILIAL + SPG->PG_MAT + SPG->PG_ORDEM+Dtos(SPG->PG_DATA)+Str(SPG->PG_HORA,5,2) }
	nSPZCOrd		:= RetOrdem( "SPG" , "PG_FILIAL+PG_MAT+PG_ORDEM+Dtos(PG_DATA)+Str(PG_HORA,5,2)" )
	If lPort1510
		bSkip	:= {|| SPG->PG_TPMCREP == "D" }
	EndIf
Else
	bSeekWhile	:= {|| SP8->P8_FILIAL + SP8->P8_MAT + SP8->P8_ORDEM+Dtos(SP8->P8_DATA)+Str(SP8->P8_HORA,5,2) }
	nSPZOrd		:= RetOrdem( "SP8" , "P8_FILIAL+P8_MAT+P8_ORDEM+Dtos(P8_DATA)+Str(P8_HORA,5,2)" )
	If lPort1510
		bSkip	:= {|| SP8->P8_TPMCREP == "D" }
	EndIf
Endif

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ So Executa nas Colunas de Horas							   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( nSvColPos <= 2 )
		Help(" ",1,"P040NPODE")
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Variaveis da GetDados								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Private aHeader	:= {}
	Private aCols	:= {}
	Private n		:= 1

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Begin aHeader/aCols										   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Salva Area do Alias de aCols								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aAreaCols := ( cAlias )->( GetArea() )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Campos que nao serao Mostrados							   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aAdd( aNotFields , cPrefixo+"FILIAL" )
		aAdd( aNotFields , cPrefixo+"MAT"	 )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Buscando informacao para montar o aCols / aHeader 		   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( nSvColPos == 3 .and. Empty( aCols1[ nSvn , nSvColPos , 08 ] ) )
			dDataPesq := aCols1[ nSvn , 02 ]
			lNew := .T.
		Else
			dDataPesq:= aCols1[ nSvn , nSvColPos , 08 ]
			lNew :=  !(aCols1[ nSvn , nSvColPos , 15 ] == "O")
		EndIF

		aCols := GDMontaCols(;
						@aHeader,;		//01 -> Array com os Campos do Cabecalho da GetDados
						NIL,;			//02 -> Numero de Campos em Uso
						@aVirtGd,;		//03 -> [@]Array com os Campos Virtuais
						@aVisual,;		//04 -> [@]Array com os Campos Visuais
						cAlias,;		//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
						aNotFields,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
						NIL,;			//07 -> [@]Array unidimensional contendo os Recnos
						cAlias,;		//08 -> Alias do Arquivo Pai
						xFilial(cAlias)+cCod+aCols1[ nSvn , Len( aCols1[ nSvn ] ) ]+Dtos(dDataPesq)+ Str( Val( aCols1[ nSvn , nSvColPos , 01 ] ),5,2 ),;			//09 -> Chave para o Posicionamento no Alias Filho
						bSeekWhile,;	//10 -> Bloco para condicao de Loop While
						bSkip,;			//11 -> Bloco para Skip no Loop While
						.T.,;			//12 -> Se Havera o Elemento de Delecao no aCols
						NIL,;			//13 -> Se cria variaveis Publicas
						NIL,;			//14 -> Se Sera considerado o Inicializador Padrao
						NIL,;			//15 -> Lado para o inicializador padrao
						NIL,;			//16 -> Opcional, Carregar Todos os Campos
						NIL,;			//17 -> Opcional, Nao Carregar os Campos Virtuais
						NIL,;			//18 -> Opcional, Utilizacao de Query para Selecao de Dados
						NIL,;			//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
						NIL,;			//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
						NIL,;			//21 -> Carregar Coluna Fantasma e/ou BitMap ( Logico ou Array )
						NIL,;			//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
						NIL,;			//23 -> Verifica se Deve Checar se o campo eh usado
						NIL,;			//24 -> Verifica se Deve Checar o nivel do usuario
						NIL,;			//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
						NIL,;			//26 -> [@]Array que contera as chaves conforme recnos
						NIL,;			//27 -> [@]Se devera efetuar o Lock dos Registros
						NIL,;			//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
						NIL,;			//29 -> Numero maximo de Locks a ser efetuado
						NIL,;			//30 -> Utiliza Numeracao na GhostCol
						NIL,;			//31 -> Carrega os Campos de Usuario
						nOpc;
				)

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Define os Campos Alteravais 								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( aScan( aVisual , { |x| x == ( cPrefixo + "ORDEM" ) } ) == 0 )
			aAdd( aVisual , ( cPrefixo + "ORDEM"	) )
		EndIF
		IF ( aScan( aVisual , { |x| x == ( cPrefixo + "PAPONTA" ) } ) == 0 )
			aAdd( aVisual , ( cPrefixo + "PAPONTA"	) )
        EndIF

		//Se portaria estiver ativa nao permite que os registros originais sejam alterados
		//Somente e permitida a exclusao (desconsideracao) e inclusao de novo registro
		If !lNew .and. lPort1510
			nAlts := Len( aHeader )
			For nAlt := 1 To nAlts
				IF (;
						( aScan( aVisual  , { |x| x == aHeader[ nAlt , 02 ] } ) == 0 ) ;
					)
					aAdd( aVisual , aHeader[ nAlt , 02 ] )
				EndIF
			Next nAlt
		EndIf

		nAlts := Len( aHeader )
		For nAlt := 1 To nAlts
			IF (;
					( aScan( aVisual  , { |x| x == aHeader[ nAlt , 02 ] } ) == 0 ) ;
				)
				aAdd( aAlterGd , aHeader[ nAlt , 02 ] )
			EndIF
		Next nAlt

		nPosData 	:= GdfieldPos(cPrefixo + "DATA")
        // atribui os dados inicializador no aCols para edição.
		If Empty(aCols[1][nPosData])
			nPosHr 		:= GdfieldPos(cPrefixo + "HORA")
			// terá somente um elemento no aCols. - edição
            aCols[1][nPosData]	:=	dDataPesq
            aCols[1][nPosHr]	:= 	Val(aCols1[ nSvn , nSvColPos , 01 ])
		Endif

		//Atribui os dados referentes a portaria ao aCols
		If lPort1510
			nPosDataApo := GdFieldPos(cPrefixo + "DATAAPO")
			nPosNumRep  := GdFieldPos(cPrefixo + "NUMREP" )
			nPosTpmCrep := GdFieldPos(cPrefixo + "TPMCREP")
			nPosTipoReg := GdFieldPos(cPrefixo + "TIPOREG")
			nPosMotiVrg := GdFieldPos(cPrefixo + "MOTIVRG")
			aCols[1][nPosDataApo]	:= 	aCols1[ nSvn , nSvColPos , 12 ]
			aCols[1][nPosNumRep]	:= 	aCols1[ nSvn , nSvColPos , 13 ]
			aCols[1][nPosTpmCrep]	:= 	Space(1)
			aCols[1][nPosTipoReg]	:= 	If (Empty(aCols1[ nSvn , nSvColPos , 15 ]),"I",aCols1[ nSvn , nSvColPos , 15 ])
			aCols[1][nPosMotiVrg]	:= 	If (Empty(aCols1[ nSvn , nSvColPos , 16 ]),If(aCols[1][nPosTipoReg] == "I",fInitMotivo( xFilial("RFD"), "1" , "1" ),cSpaceMoti),aCols1[ nSvn , nSvColPos , 16 ])
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura Area do Alias de aCols							   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		RestArea( aAreaCols )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ End aHeader/aCols										   	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada para inclusao de novas colunas			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPnaCel )
		ExecBlock("PNA040CEL",.F.,.F.,{cPrefixo})
	EndIF

	/*/
	³ Salva o Estado Atual de aCols para Comparacao em fCompArray()³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aSvCols := aClone( aCols )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize(, .T., 370)
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o Dialogo para Edicao                			   	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	DEFINE MSDIALOG oDlgNew TITLE OemToAnsi( STR0005 + " - " + STR0111 ) From aAdvSize[7],0 To aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL	// 'Manuten‡„o das Marca‡”es'###'Editar Celula...<F11>'

		oGetNew := MsGetDados():New(aObjSize[1,1], aObjSize[1,2], aObjSize[1,3], aObjSize[1,4],2,"LinOkEditCel","TudOkEditCel","",.F.,aAlterGd,1,NIL,1)

		oDlgNew:bSet15 := { || IF( oGetNew:TudoOk() , ( nOpc := 1 , oDlgNew:End() ) , nOpc := 0 ) }
		bSvSet15 := SetKey( 15 , oDlgNew:bSet15 )
		oDlgNew:bSet24 := { || nOpc := 0 , oDlgNew:End() }
		bSvSet24 := SetKey( 24 , oDlgNew:bSet24 )
	ACTIVATE MSDIALOG oDlgNew ON INIT EnchoiceBar( oDlgNew , { || IF( oGetNew:TudoOk() , ( nOpc := 1 , oDlgNew:End() ) , nOpc := 0 ) } , { || nOpc := 0 , oDlgNew:End() } ) CENTERED

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura <Ctrl-O> e <Ctrl-X>               			   	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	SetKey( 15 , bSvSet15 )
	SetKey( 24 , bSvSet24 )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se houve alteracao Carrega os novos valores			   	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lEdit := ( nOpc == 1 .and. !fCompArray( aCols , aSvCols ) ) )
		aSvoGet[ 2 , nSvn , nSvColPos ]	:= StrZero( GdFieldGet(	cPrefixo+"HORA" ) , 5 , 2 )
		aCols1[ nSvn , nSvColPos , 01 ] := aSvoGet[ 2 , nSvn , nSvColPos ]
		aCols1[ nSvn , nSvColPos , 03 ] := GdFieldGet(	cPrefixo+"GIRO"    	)
		aCols1[ nSvn , nSvColPos , 04 ] := GdFieldGet(	cPrefixo+"FUNCAO"	)
		aCols1[ nSvn , nSvColPos , 05 ] := GdFieldGet(	cPrefixo+"CC"		)
		aCols1[ nSvn , nSvColPos , 06 ] := GdFieldGet(	cPrefixo+"APONTA"	)
		aCols1[ nSvn , nSvColPos , 07 ] := GdFieldGet(	cPrefixo+"FLAG"		)
		aCols1[ nSvn , nSvColPos , 08 ] := GdFieldGet(	cPrefixo+"DATA"		)
		aCols1[ nSvn , nSvColPos , 09 ] := GdFieldGet(	cPrefixo+"RELOGIO"	)
		aCols1[ nSvn , nSvColPos , 10 ] := GdFieldGet(	cPrefixo+"TPMARCA"	)
		aCols1[ nSvn , nSvColPos , 11 ] := GdFieldGet(	cPrefixo+"PAPONTA"	)
		If lPort1510
			aCols1[ nSvn , nSvColPos , 12 ] := GdFieldGet(	cPrefixo+"DATAAPO"	)
			aCols1[ nSvn , nSvColPos , 13 ] := GdFieldGet(	cPrefixo+"NUMREP"	)
			aCols1[ nSvn , nSvColPos , 14 ] := GdFieldGet(	cPrefixo+"TPMCREP"	)
			aCols1[ nSvn , nSvColPos , 15 ] := GdFieldGet(	cPrefixo+"TIPOREG"	)
			aCols1[ nSvn , nSvColPos , 16 ] := GdFieldGet(	cPrefixo+"MOTIVRG"	)
		EndIf
		IF ( nSvColPos == 3 )
			lEdit := .T.
			aCols1[ nSvn , 02 ] := GdFieldGet( cPrefixo+"DATA"	)
			aSvoGet[ 02 , nSvn , 02 ] := aCols1[ nSvn , 02 ]
		EndIF
	EndIF

End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura Teclas de Atalho e Ponteiros de Entrada			   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestKeys( aKeys )
RestArea( aArea )

Return( lEdit )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³LinOkEditCel ³Autor ³Marinaldo de Jesus    ³ Data ³17/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida Linha em Pn040EditCel                         		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³LinOkEditCel()								 				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³                                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function LinOkEditCel( oBrowse )

Local cAlias	:= IF( lPona180 , "SPG" , "SP8" )
Local cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )
Local cHelp		:= ""
Local lOK		:= .T.

Begin Sequence
	IF !( lOK := !Empty( GdFieldGet( cPrefixo + "DATA" ) ) )
		Help(" ",1,"P040DTNIL")
		Break
	EndIF
	IF !( lOK := !Empty( GdFieldGet( cPrefixo + "CC" ) ) )
		cHelp := STR0112	//'Centro de Custo N„o Foi Preenchido'
		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
		Break
	EndIF
	If lPort1510
		IF ( GdFieldGet( cPrefixo + "TPMCREP" ) == "D" .or. GdFieldGet( cPrefixo + "TIPOREG" ) == "I" )
			If Empty( GdFieldGet( cPrefixo + "MOTIVRG" ) )
				cHelp := STR0306  //"Campo motivo deve ser preenchido para todas as marcações informadas ou desconsideradas"
				Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
				lOk := .F.
				Break
			EndIf
		EndIF
	EndIf
End Sequence

Return( lOK )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³TudOkEditCel ³Autor ³Marinaldo de Jesus    ³ Data ³17/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida Linha em Pn040EditCel                         		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³TudOkEditCel()								 				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³                                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function TudOkEditCel( oBrowse )
Return( LinOkEditCel( oBrowse ) )

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn040Data ³ Autor ³ Mauricio MR           ³ Data ³09/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Funcao Inicializadora da Data                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona040/Pona280                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn040Data()

Local dRet 	:= Ctod('')

//-- Verifica se Existe uma lista como Calendario (Ver. Prog Pona280)
IF ( Type("lPona280") <> "U" )
   //-- Obtem a Data Corrente do Calendario
   dRet := CalendRetCpo( cPrefix+"DATA",,,cPrefix  )
EndIF

Return( dRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SelePerApo   ³Autor ³Marinaldo de Jesus    ³ Data ³12/08/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna Selecao para o Periodo de Apontamento        		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³SelePerApo(cAlias,nReg,nOpcX)								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³                                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function SelePerApo( cAlias , nReg , nOpcX )

PerApoConPad()

Return( nOpcX )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8PapontaWhen³Autor ³Marinaldo de Jesus    ³ Data ³25/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³When para o Campo P8_PAPONTA                         		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8PapontaWhyen()             								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.F.                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_WHEN do campo P8_PAPONTA                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8PapontaWhen()

Local cPerAponta	:= ""
Local dPerIni		:= Ctod("//")
Local dPerFim		:= Ctod("//")
Local lWhen			:= .T.
Local lAlterou		:= .F.

If Type("oGetDados") = "O"
   oGetDados:lNewLine:= .F.
ElseIf Type("oGet") = "O"
   oGet:lNewLine:= .F.
ElseIf Type("o1Get") = "O"
   o1Get:lNewLine:= .F.
Endif


IF ( Upper( AllTrim( ReadVar() ) ) == "M->P8_PAPONTA" )
	dPerIni	:= Stod( SubStr( GetMemVar("P8_PAPONTA") , 1 , 8 ) )
	dPerFim	:= Stod( SubStr( GetMemVar("P8_PAPONTA") , 9 , 8 ) )
	cPerAponta := P8PGModPaponta( @dPerIni , dPerFim )
	IF ( ( Type( "aHeader" ) == "A" ) .and. ( Type( "aCols" ) == "A" ) )
		GdFieldPut( "P8_PAPONTA" , cPerAponta )
		IF ( lAlterou := !( GdFieldGet("P8_PAPONTA") == &( ReadVar() ) ) )
			GdFieldPut( "P8_APONTA" , "N" )
			GdFieldPut( "P8_ORDEM" , Space( GetSx3Cache( "P8_ORDEM" , "X3_TAMANHO" ) ) )
		EndIF
	EndIF
	SetMemVar( "P8_PAPONTA" , cPerAponta )
	lWhen := .F.
EndIF

Return( lWhen )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PGPapontaWhen³Autor ³Marinaldo de Jesus    ³ Data ³25/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³When para o Campo PG_PAPONTA                         		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PGPapontaWhyen()             								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.F.                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_WHEN do campo PG_PAPONTA                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function PGPapontaWhen()

Local cPerAponta	:= ""
Local dPerIni		:= Ctod("//")
Local dPerFim		:= Ctod("//")
Local lWhen			:= .T.

IF ( Upper( AllTrim( ReadVar() ) ) == "M->PG_PAPONTA" )
	dPerIni	:= Stod( SubStr( GetMemVar( "PG_PAPONTA" ) , 1 , 8 ) )
	dPerFim	:= Stod( SubStr( GetMemVar( "PG_PAPONTA" ) , 9 , 8 ) )
	cPerAponta := P8PGModPaponta( @dPerIni , dPerFim )
	IF ( ( Type( "aHeader" ) == "A" ) .and. ( Type( "aCols" ) == "A" ) )
		GdFieldPut( "PG_PAPONTA" , cPerAponta )
	EndIF
	SetMemVar( "PG_PAPONTA" , cPerAponta )
	lWhen := .F.
EndIF

Return( lWhen )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8PGModPaponta	³Autor³Marinaldo de Jesus ³ Data ³25/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Disponibilizar Dialogo para Alteracao do Periodo 			³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>     								³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³P8PapontaWhen() e PGPapontaWhen()                           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function P8PGModPaponta( dPerIni , dPerFim )

Local aSvKeys			:= GetKeys()
Local aArea				:= GetArea()
Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjCoords		:= {}
Local aObjSize			:= {}
Local aButtons			:= {}
Local bSet15			:= { || NIL }
Local bSet24			:= { || NIL }
Local bPrev				:= { || GetPerPrev( @dPerIni , @dPerFim , oPerIni , oPerFim )	, SetKey( VK_F4 , bPrev 	) }
Local bAtu				:= { || GetPerAtu( @dPerIni , @dPerFim , oPerIni , oPerFim )	, SetKey( VK_F5 , bAtu		) }
Local bNext				:= { || GetPerNext( @dPerIni , @dPerFim , oPerIni , oPerFim )	, SetKey( VK_F6 , bNext 	) }
Local bPerSPO			:= { || GetPerSPO( @dPerIni , @dPerFim , oPerIni , oPerFim )	, SetKey( VK_F7 , bPerSPO	) }
Local bDialogInit		:= { || NIL }
Local cPerAponta		:= ( Dtos( dPerIni ) + Dtos( dPerFim ) )
Local lbSet15			:= .F.
Local oDlg				:= NIL
Local oFont				:= NIL
Local oFontBig			:= NIL
Local oGroup			:= NIL
Local oPerIni			:= NIL
Local oPerFim			:= NIL

aButtons := {}
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicializa o Periodo de Apontamento conforme Data Base	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF ( Empty( dPerIni ) .or. Empty( dPerFim ) )
	PerAponta(	@dPerIni 		,;	//Data Inicial passada como referencia
				@dPerFim 		,;	//Data Final   passada como referencia
				NIL				,;	//Data Base
				.T.				,;	//Mostrar o Help
				xFilial("SRA")	,;	//Filial para GetMv
				.F.				 ;	//Se eh para gerar um novo periodo
			  )
EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta as Dimensoes dos Objetos         					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aAdvSize		:= MsAdvSize( .T. , .T. )
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Redimensiona                           					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aAdvSize[3] -= 25
aAdvSize[4] -= 50
aAdvSize[5] -= 50
aAdvSize[6] -= 50
aAdvSize[7] += 50
aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Define o Botao para o Periodo Anterior  					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aAdd(;
		aButtons	,;
						{;
							"PREV"				,;
   							bPrev				,;
       	   					OemToAnsi( STR0117 ),;	//"Anterior <F4>..."
							OemToAnsi( STR0217 ) ;	//"Anterior"
           				};
        )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Define o Botao para o Periodo Atual     					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aAdd(;
		aButtons	,;
						{;
							"E4"				,;
   							bAtu				,;
       	   					OemToAnsi( STR0118 ),;	//"Atual <F5>..."
       	   					OemToAnsi( STR0218 ) ;	//"Atual"
           				};
        )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Define o Botao para o Proximo Periodo						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aAdd(;
		aButtons	,;
						{;
							"NEXT"				,;
   							bNext				,;
       	   					OemToAnsi( STR0119 ),;	//"Pr¢ximo <F6>..."
							OemToAnsi( STR0219 ) ;	//"Pr¢ximo"
           				};
        )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Define o Botao para o Proximo Periodo						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aAdd(;
		aButtons	,;
						{;
							"BMPSXB"			,;
   							bPerSPO				,;
       	   					OemToAnsi( STR0122 ),;	//"Per¡odo do SP0 <F7>..."
       	   					OemToAnsi( STR0222 ) ;	//"Per¡odo"
           				};
        )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define o Bloco para a Teclas <CTRL-O>   ( Button OK da Enchoi³
³ ceBar )													   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
bSet15 := { ||	IF(;
						Eval( oPerIni:bValid ) .and.	 			 ;
						Eval( oPerFim:bValid )	.and.				 ;
						MaxP8PGOrdVld( dPerIni , dPerFim , .T. )	,;
						(;
							lbSet15 := .T. ,;
							RestKeys( aSvKeys , .T. ),;
							oDlg:End();
						),;
						.F.;
				   );
		}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define o  Bloco  para a Teclas <CTRL-X> ( Button Cancel da En³
³ choiceBar )												   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
bSet24 := { || RestKeys( aSvKeys , .T. ) , oDlg:End() }

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Define o Bloco para o Init do Dialog 						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
bDialogInit := { ||;
						SetKey( VK_F4 , bPrev	),;
						SetKey( VK_F5 , bAtu 	),;
						SetKey( VK_F6 , bNext	),;
						SetKey( VK_F7 , bPerSPO	),;
						EnchoiceBar( oDlg , bSet15 , bSet24 , NIL , aButtons );
				}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Monta Dialogo para a selecao do Periodo 					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
DEFINE FONT oFont		NAME "Arial" SIZE 0,-11 BOLD
DEFINE MSDIALOG oDlg TITLE OemToAnsi(cCadastro) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL

	@ aObjSize[1,1] , aObjSize[1,2] GROUP oGroup TO aObjSize[1,3],aObjSize[1,4] LABEL OemToAnsi(STR0114) OF oDlg PIXEL	//'Per¡odo de Apontamento:'
	oGroup:oFont:= oFont

	@ ( aObjSize[1,1] + 035 ) , ( aObjSize[1,2]+010 )	SAY OemToAnsi(STR0115)		SIZE 100,10 OF oDlg PIXEL FONT oFont	//"Inicial:"
	@ ( aObjSize[1,1] + 030 ) , ( aObjSize[1,2]+035 )	MSGET oPerIni VAR dPerIni	SIZE 100,10 OF oDlg PIXEL FONT oFont VALID !Empty( dPerIni )

	@ ( aObjSize[1,1] + 035 ) , ( aObjSize[1,2]+150 )	SAY OemToAnsi(STR0116)		SIZE 100,10 OF oDlg PIXEL FONT oFont	//"Final:"
	@ ( aObjSize[1,1] + 030 ) , ( aObjSize[1,2]+175 )	MSGET oPerFim VAR dPerFim	SIZE 100,10 OF oDlg PIXEL FONT oFont VALID ( !Empty( dPerFim ) .and. ( dPerIni <= dPerFim ) )

ACTIVATE MSDIALOG oDlg CENTERED ON INIT Eval( bDialogInit )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura as Teclas de Atalho                     	  		  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestKeys( aSvKeys , .T. )

IF ( lbSet15 )
	cPerAponta := ( Dtos( dPerIni ) + Dtos( dPerFim ) )
EndIF

Return( cPerAponta )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8PapontaInit³Autor ³Marinaldo de Jesus    ³ Data ³25/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador padrao para o Campo P8_PAPONTA         		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8PapontaInit()             								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.F.                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_RELACAO do campo P8_PAPONTA                               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8PapontaInit()

Local cPerAponta	:= Space( GetSx3Cache( "P8_PAPONTA" , "X3_TAMANHO" ) )

IF ( ( Type( "dPerIni" ) == "D" ) .and. ( Type( "dPerFim" ) == "D" ) )
	cPerAponta := ( Dtos( dPerIni ) + Dtos( dPerFim ) )
EndIF

Return( cPerAponta )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PGPapontaInit³Autor ³Marinaldo de Jesus    ³ Data ³25/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador padrao para o Campo PG_PAPONTA         		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PGPapontaInit()             								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.F.                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_RELACAO do campo PG_PAPONTA                               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function PGPapontaInit()

Local cPerAponta	:= Space( GetSx3Cache( "PG_PAPONTA" , "X3_TAMANHO" ) )

IF ( ( Type( "dPerIni" ) == "D" ) .and. ( Type( "dPerFim" ) == "D" ) )
	cPerAponta := ( Dtos( dPerIni ) + Dtos( dPerFim ) )
EndIF

Return( cPerAponta )





/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8DataVld()  ³Autor ³Marinaldo de Jesus    ³ Data ³28/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar a Digitacao do Campo P8_DATA                 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8DataVld()                 								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_VALID do campo P8_DATA                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8DataVld()

Local lP8DataVld	:= .T.
Local lGetDados		:= .F.
Local lAlterou		:= .F.

Begin Sequence

	IF !( lP8DataVld := NaoVazio() )
		Break
	EndIF

	lGetDados := (;
					( Type( "aHeader" ) == "A" ) .and. ;
					( Type( "aCols"	  ) == "A" )       ;
				  )

	IF ( lGetDados )
		IF ( lAlterou := !( GdFieldGet("P8_DATA") == &( ReadVar() ) ) )
			GdFieldPut( "P8_APONTA" , "N" )
		EndIF
	EndIF

	//Nao permite data informada fora do periodo de apontamento. Considera um dia antes e um dia depois devido ao horario noturno
	If Type("cPerAponta") <> "U" .And. !Empty(cPerAponta)
		dDtInfo := &( ReadVar() )
		If( dDtInfo < ( Stod( SubStr(cPerAponta,1,8) ) - 1 ) .Or. dDtInfo > ( Stod( SubStr(cPerAponta,9,8) ) + 1 ) )
			lP8DataVld := .F.
			//"A data digitada é inválida para esse período de apontamento."###'Aviso'
			MsgInfo( OemToAnsi( STR0319 ) , OemToAnsi( STR0108 ) )
		EndIf
	EndIf

End Sequence

Return( lP8DataVld )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8OrdemVld   ³Autor ³Marinaldo de Jesus    ³ Data ³28/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar a Digitacao do Campo P8_ORDEM                		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8Ordemld()                 								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_VALID do campo P8_ORDEM                                   ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8OrdemVld()

Local lP8OrdemVld	:= .T.
Local lGetDados		:= .F.
Local lAlterou		:= .F.

Begin Sequence

	lGetDados := (;
					( Type( "aHeader" ) == "A" ) .and. ;
					( Type( "aCols"	  ) == "A" )       ;
				  )

	IF ( lGetDados )
		IF ( lAlterou := !( GdFieldGet("P8_ORDEM") == &( ReadVar() ) ) )
			GdFieldPut( "P8_APONTA" , "N" )
		EndIF
	EndIF

End Sequence

Return( lP8OrdemVld )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8HoraVld()  ³Autor ³Marinaldo de Jesus    ³ Data ³28/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar a Digitacao do Campo P8_HORA                 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8HoraVld()                 								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_VALID do campo P8_HORA                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8HoraVld()

Local lP8HoraVld	:= .T.
Local lGetDados		:= .F.
Local lAlterou		:= .F.
Local lPONA280		:= IsInCallStack("PONA280")
Local nTipoReg    	:= 0

Begin Sequence

	lGetDados := (;
					( Type( "aHeader" ) == "A" ) .and. ;
					( Type( "aCols"	  ) == "A" )       ;
				  )

	If lPort1510 .And. lPONA280 .And. lGetDados
		If (nTipoReg := GdFieldPos( "P8_TIPOREG" )) > 0 .And. aCols[n,nTipoReg] == "O"
			MsgAlert( STR0307 , STR0108 ) //"Marcacões originais não podem ser alteradas" ### Atenção
			lP8HoraVld := .F.
			Break
		EndIf
	EndIf

	IF !( lP8HoraVld := VldHora( GetMemVar( "P8_HORA" ) ) )
		//"A hora digitada ‚ inv lida."###'Aviso'
		MsgInfo( OemToAnsi( STR0121 ) , OemToAnsi( STR0108 ) )
		Break
	EndIF

	IF ( lGetDados )
		IF ( lAlterou := !( GdFieldGet("P8_HORA") == &( ReadVar() ) ) )
			GdFieldPut( "P8_APONTA" , "N" )
		EndIF
	EndIF

End Sequence

Return( lP8HoraVld )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8PapontaVld ³Autor ³Marinaldo de Jesus    ³ Data ³28/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar a Digitacao do Campo P8_PAPONTA              		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8PapontaVld                 								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_VALID do campo P8_PAPONTA                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8PapontaVld()

Local lP8PapontaVld	:= .T.
Local lGetDados		:= .F.
Local lAlterou		:= .F.

Begin Sequence

	IF !( lP8PapontaVld := NaoVazio() )
		Break
	EndIF

	lGetDados := (;
					( Type( "aHeader" ) == "A" ) .and. ;
					( Type( "aCols"	  ) == "A" ) 		;
				  )

	IF ( lGetDados )
		IF ( lAlterou := !( GdFieldGet("P8_PAPONTA") == &( ReadVar() ) ) )
			GdFieldPut( "P8_APONTA" , "N" )
		EndIF
	EndIF

End Sequence

Return( lP8PapontaVld )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8ApontaVld  ³Autor ³Marinaldo de Jesus    ³ Data ³28/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar a Digitacao do Campo P8_APONTA              		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8ApontaVld                 								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_VALID do campo P8_APONTA                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8ApontaVld()

Local dHora			:= Ctod("//")
Local lP8ApontaVld	:= .T.
Local lGetDados		:= .F.
Local lAlterou		:= .F.
Local nHora			:= 0
Local nPosData		:= 0
Local nPosHora		:= 0
Local nPosAponta	:= 0
Local nPosGdSp8Rel	:= 0

Begin Sequence

	IF !( lP8ApontaVld := ( Vazio() .or. Pertence("SN") ) )
		Break
	EndIF

	lGetDados := (;
					( Type( "aHeader" ) == "A" ) .and. ;
					( Type( "aCols"	  ) == "A" )  ;
				  )

	IF ( lGetDados )
		IF ( lAlterou := !( GdFieldGet("P8_APONTA") == &( ReadVar() ) ) )
			IF ( ( Type( "aGdSp8ColR" ) == "A" ) .and. ( Type( "aGdSp8HedR" ) == "A" ) )
				dData 		:= GdFieldGet("P8_DATA")
				nHora 		:= GdFieldGet("P8_HORA")
				IF ( ( nPosAponta  := GdFieldPos( "P8_APONTA" , aGdSp8HedR ) ) > 0 )
					IF ( ( nPosGdSp8Del := aScan( aGdSp8ColR , { |x| ( x[ nPosData ] == dData ) .and. ( x[ nPosHora ] == nHora ) } ) ) > 0 )
						aGdSp8ColR[ nPosGdSp8Del , nPosAponta ] := &( ReadVar() )
					EndIF
				EndIF
			EndIF
		EndIF
	EndIF

End Sequence

Return( lP8ApontaVld )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SP8DelSPC	 ³Autor ³Marinaldo de Jesus    ³ Data ³28/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deleta os Apontamentos do SPC baseados no SP8        		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>   								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>   								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generica                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function SP8DelSPC( dPerIni , dPerFim , cFil , cMat , lDelInfUsu )

Local cFilMat			:= ""
Local cFilSPC			:= ""
Local cMsgErr			:= ""

DEFAULT cFil 			:= SRA->RA_FILIAL
DEFAULT cMat 			:= SRA->RA_MAT
DEFAULT lDelInfUsu		:= .F.

cFilSPC	:= xFilial( "SPC" , cFil )
cFilMat := ( cFilSPC + cMat )
SPC->( dbSetOrder( RetOrdem( "SPC" , "PC_FILIAL+PC_MAT+DTOS(PC_DATA)" ) ) )
IF SPC->( dbSeek( cFilMat , .F. ) )
	While SPC->( !Eof() .and. PC_FILIAL + PC_MAT == cFilMat )
		IF SPC->( PC_DATA >= dPerIni .and. PC_DATA <= dPerFim )
			IF SPC->( RecLock( "SPC" , .F. ) )
				IF Empty( SPC->PC_PDI )
					IF !SPC->( FkDelete( @cMsgErr ) )
						RollBackDelTran( cMsgErr )
					EndIF
				Else
					IF !( lDelInfUsu )
						SPC->PC_PD		:= SPC->PC_PDI
						SPC->PC_QUANTC	:= 0
						SPC->PC_FLAG	:= "I"
					Else
						IF !SPC->( FkDelete( @cMsgErr ) )
							RollBackDelTran( cMsgErr )
						EndIF
					EndIF
				EndIF
				SPC->( MsUnLock() )
			EndIF
		EndIF
		SPC->( dbSkip() )
	End While
EndIF

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pona040Locks    ³Autor³Mauricio MR         ³ Data ³14/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Lancamentos de Marcacoes					         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA140                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pona040Locks( nOpc , cAlias , aRecnos )

Local lLocks	:= .T.
Local aRecAux	:= {}

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Visualizacao             	 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( nOpc == 4 )
		Break
	EndIF

	aEval( aRecnos , { |x| IF( !Empty( x ) , aAdd( aRecAux , x ) , NIL ) } )

	IF !( lLocks := WhileNoLock( cAlias , aRecAux , { xFilial( cAlias ) + SRA->RA_MAT } , 1 , 1 , .T. , NIL ) )
		Break
	EndIF

End Sequence

Return( lLocks )


/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³RecriaCalend    ³Autor³Mauricio MR         ³ Data ³14/08/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Recria o Calendario em funcao de Turnos Opcionais	         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA040                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function RecriaCalend( aTabCalend, aTabPadrao, aTurnos, aMarcacoes )
Local lRet := .T.

DEFAULT aTurnos := {}
DEFAULT __lChkTnoOpc	:= ( SuperGetMv("MV_TNOOPC",NIL,"N") == "S" )

If Empty(dPerIni) .Or. Empty(dPerFim)
	 CheckPonMes( @dPerIni , @dPerFim , .F. , .F. , .F. , cFilAnt , .F. )
Endif
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega as Marcacoes do Funcionario para Ajustar os Turnos  ³
³ em funcao da existencia de turnos opcionais				  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If 	__lChkTnoOpc
	lRet := CriaCalend(	dPerIni 		,;	//01 -> Data Inicial do Periodo
		   			   	dPerFim			,;	//02 -> Data Final do Periodo
				   		SRA->RA_TNOTRAB	,;	//03 -> Turno Para a Montagem do Calendario
				   		SRA->RA_SEQTURN	,;	//04 -> Sequencia Inicial para a Montagem Calendario
				   		@aTabPadrao		,;	//05 -> Array Tabela de Horario Padrao
				   		@aTabCalend		,;	//06 -> Array com o Calendario de Marcacoes
				   		SRA->RA_FILIAL  ,;	//07 -> Filial para a Montagem da Tabela de Horario
				   		SRA->RA_MAT		,;	//08 -> Matricula para a Montagem da Tabela de Horario
				   		SRA->RA_CC 		,;	//09 -> Centro de Custo para a Montagem da Tabela
				   		@aTurnos		,;	//10 -> Array com as Trocas de Turno
						NIL				,;	//11 -> Array com Todas as Excecoes do Periodo
						NIL				,;	//12 -> Se executa Query para a Montagem da Tabela Padrao
						.T.				,;	//13 -> Se executa a funcao se sincronismo do calendario
						NIL			 	,;	//14 -> Se Forca a Criacao de Novo Calendario
						aMarcacoes		;   //15 -> Array de marcacoes para Tratamento de Turnos Opcionais
		 	 		  )
Endif

Return ( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fPn040When      ³Autor³Leandro Drumond     ³ Data ³05/10/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³When do aHeader                              		         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA140                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function fPn040When(aCols,oGet,nX)

	Local lRet	 := .T.

	//Se registro for original, nao permite alteracao
	If aCols[nX,oGet:ColPos,15] == "O"
		MsgAlert( STR0307 , STR0108 ) //"Marcacões originais não podem ser alteradas" ### Atenção
		lRet := .F.
	EndIf

	If lRet .And. aCols[nX, 2 ] < SRA->RA_ADMISSA
		lRet := .F.
		// Admissão # Não é permitido incluir marcações em datas anteriores à admissão do funcionário # Informe as marcações apartir da data
		help( ,, STR0320,, STR0321, 1 , 0,,,,,, { STR0322 + DToC(SRA->RA_ADMISSA)})
	EndIf

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8WMotiVrg      ³Autor³Leandro Drumond     ³ Data ³06/10/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³When do campo P8_MOTIVRG                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GENERICO                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8WMotiVrg()
Local lWhen			:= .T.

IF ( Upper( AllTrim( ReadVar() ) ) == "M->P8_MOTIVRG" )
	IF ( ( Type( "aHeader" ) == "A" ) .and. ( Type( "aCols" ) == "A" ) )
		IF ( GdFieldGet( "P8_TIPOREG" ) != "O" .or. GdFieldGet( "P8_TPMCREP" ) == "D" )
			lWhen := .T.
		Else
			lWhen := .F.
		EndIF
	EndIF
EndIF

Return( lWhen )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P8VMotiVrg      ³Autor³Leandro Drumond     ³ Data ³06/10/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valid do campo P8_MOTIVRG                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GENERICO                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function P8VMotiVrg()
Local lRet			:= .T.

IF ( Upper( AllTrim( ReadVar() ) ) == "M->P8_MOTIVRG" )
	IF ( ( Type( "aHeader" ) == "A" ) .and. ( Type( "aCols" ) == "A" ) )
		IF ( GdFieldGet( "P8_TIPOREG" ) != "O" .or. GdFieldGet( "P8_TPMCREP" ) == "D" )

			// Retira caracteres especiais do motivo
			PVldCpoOK(M->P8_MOTIVRG,," ")

			If Empty( M->P8_MOTIVRG )
				lRet := .F.
			EndIf
		EndIF
	EndIF
EndIF

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pna040RecRFE ³Autor ³Leandro Drumond       ³ Data ³22/10/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Recarrega marcacoes originais da RFE.                		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pna040RecRFE(oGet,aSvoGet,nOpcX                      		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³                                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pna040RecRFE( oGet , aSvoGet )

Local aArea			:= GetArea()
Local aAreaCols		:= {}
Local aKeys			:= GetKeys()
Local aSvColsAtu	:= {}
Local aColsAtu		:= {}
Local cAlias		:= "SP8"
Local cKeySeek		:= ""
Local cCod			:= SRA->RA_MAT
Local nSvn			:= aSvoGet[3]
Local nSvColPos		:= oGet:oBrowse:nColPos
Local nLenColPos	:= 0
Local nSPZCOrd		:= 0
Local dDataPesq
Local nQtdCol		:= nMV_COLMARC + 2
Local lContinua		:= .T.

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ So Executa nas Colunas de Horas							   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( nSvColPos <= 2 )
		nSvColPos := 3
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Variaveis da GetDados								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Private aHeader	:= {}
	Private aCols	:= {}
	Private n		:= 1

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Salva Area do Alias de aCols								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aAreaCols := ( cAlias )->( GetArea() )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Buscando informacao para montar o aCols			 		   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( nSvColPos == 3 .or. Empty( aCols1[ nSvn , nSvColPos , 12 ] ) )
		dDataPesq := aCols1[ nSvn , 01 ]
	Else
		dDataPesq := aCols1[ nSvn , nSvColPos , 12 ]
	EndIF

	aSvColsAtu	:= aClone(aSvoGet)
	aColsAtu	:= aClone(aCols1)

	DbSelectArea("SP8")
	nSPZCOrd	:= RetOrdem( "SP8" , "P8_FILIAL+P8_MAT+DTOS(P8_DATAAPO)+DTOS(P8_DATA)+STR(P8_HORA,5,2)" )
	DbSetOrder(nSPZCOrd)
	nSvColPos := 2
	cKeySeek := xFilial("SP8")+cCod+DtoS(dDataPesq)
	If DbSeek(cKeySeek)
		While SP8->( !Eof() .and. P8_FILIAL + P8_MAT + DtoS(P8_DATAAPO) == cKeySeek )
			If !SP8->P8_TIPOREG == "O"
				DbSkip()
				Loop
			EndIf

			nSvColPos++

			//Se ultrapassar a quantidade de colunas para marcacoes existentes, sai do while sem recuperar nenhuma marcacao
			If nSvColPos > nQtdCol
				MsgAlert( STR0312 + CRLF + STR0313 , STR0108 ) //"As marcações originais a serem restauradas ultrapassam o limite máximo de colunas definido no MV_COLMARC." // "Altere o valor do parâmetro para um número maior para que todas as marcações sejam restauradas." ### Atenção
				lContinua := .F.
				//Retorna dados originais
				aCols1  := aClone(aColsAtu)
				aSvoGet := aClone(aSvColsAtu)
				Exit
			EndIf

			aSvoGet[ 2 , nSvn , nSvColPos ] := STR(SP8->P8_HORA,5,2)
			aCols1[ nSvn , nSvColPos , 01 ] := aSvoGet[ 2 , nSvn , nSvColPos ]
			aCols1[ nSvn , nSvColPos , 02 ] := Recno()
			aCols1[ nSvn , nSvColPos , 07 ] := SP8->P8_FLAG
			aCols1[ nSvn , nSvColPos , 08 ] := SP8->P8_DATA
			aCols1[ nSvn , nSvColPos , 09 ] := SP8->P8_RELOGIO
			aCols1[ nSvn , nSvColPos , 12 ] := SP8->P8_DATAAPO
			aCols1[ nSvn , nSvColPos , 13 ] := SP8->P8_NUMREP
			aCols1[ nSvn , nSvColPos , 14 ] := Space(1)
			aCols1[ nSvn , nSvColPos , 15 ] := SP8->P8_TIPOREG
			aCols1[ nSvn , nSvColPos , 16 ] := cSpaceMoti
			If!(aCols1[ nSvn , nSvColPos , 02 ] == aOldCols1[ nSvn , nSvColPos , 02 ])
				aCols1[ nSvn , nSvColPos , 17 ] := .T.
			EndIf

			IF ( nSvColPos == 3 )
				aCols1[ nSvn , 02 ] := SP8->P8_DATA
				aSvoGet[ 02 , nSvn , 02 ] := aCols1[ nSvn , 02 ]
			EndIF

			DbSkip()
		End While
	EndIf

	If lContinua
		nLenColPos := (Len(aCols1[nSvn])-1)
		For nSvColPos := nSvColPos+1 to nLenColPos
			aCols1[ nSvn , nSvColPos     ] := Array(18)
			aCols1[ nSvn , nSvColPos, 1  ] := ''
			aCols1[ nSvn , nSvColPos, 11 ] := cPerAponta
			aSvoGet[ 2 , nSvn , nSvColPos] := ''
		Next

		nLenColPos := (Len(aOldCols1[nSvn])-1)

		For nSvColPos := 3 to nLenColPos
			//Se marcacao eh original, desconsiderada e igual a marcacao que acaba de ser restaurada
			//Indica que o usuario desconsidero e reconsidero as marcacoes na mesma secao, portanto
			//nada deve ser feito.
			If (aOldCols1[ nSvn , nSvColPos , 15 ] == "O" .and. aOldCols1[ nSvn , nSvColPos , 14 ] == "D" .and.;
				val(aOldCols1[ nSvn , nSvColPos , 1 ]) == val(aCols1[ nSvn , nSvColPos , 1 ]) .and. ;
				aOldCols1[ nSvn , nSvColPos , 8 ] == aCols1[ nSvn , nSvColPos , 8 ] )
				aOldCols1[nSvn , nSvColPos] := aClone(aCols1[ nSvn , nSvColPos])
			//Marca para delecao marcacoes que nao sao originais
			ElseIf !( aOldCols1[ nSvn , nSvColPos , 15 ] == "O" ) .AnD. !( aColsAtu[ nSvn , nSvColPos , 15 ] == "O" )
				aOldCols1[ nSvn , nSvColPos, 14 ] := "D"
			EndIf
		Next
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura Area do Alias de aCols							   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	RestArea( aAreaCols )

End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura Teclas de Atalho e Ponteiros de Entrada			   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestKeys( aKeys )
RestArea( aArea )

Return( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Almeida     ³ Data ³21/11/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas blibliotecas Framework da Versao 9.12 .     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function MenuDef()
/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Array contendo as Rotinas a executar do programa      ³
	³ ----------- Elementos contidos por dimensao ------------     ³
	³ 1. Nome a aparecer no cabecalho                              ³
	³ 2. Nome da Rotina associada                                  ³
	³ 3. Usado pela rotina                                         ³
	³ 4. Tipo de Transa‡„o a ser efetuada                          ³
	³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	³    2 - Simplesmente Mostra os Campos                         ³
	³    3 - Inclui registros no Bancos de Dados                   ³
	³    4 - Altera o registro corrente                            ³
	³    5 - Remove o registro corrente do Banco de Dados          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	aRotina := {	{ STR0006 , "PesqBrw"   	, 0 , 1 , ,.F.} ,;		//'Pesquisar'
					{ STR0007 , "Pn040Atu"  	, 0 , 4 } ,;			//'Atualizar'    2
					{ STR0009 , "Pn040Atu"  	, 0 , 5 } ,;			//'Excluir'      3
					{ STR0001 , "Pn040Atu"  	, 0 , 2 } ,;			//'Visualizar'   4
					{ STR0099 , "GpLegend"  	, 0 , 2 , ,.F.}  ;		//'Legenda'
				}

If ExistBlock("PNA040MNU")
	ExecBlock("PNA040MNU", .F., .F.)
EndIf
Return aRotina

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fDelOldM ³ Autor ³ Equipe Advanced RH    ³ Data ³14/09/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Efetua a verificação das provaveis exclusoes e realiza a m-³±±
±±³          ³ arcacao do flag de desprezo.                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ pona040                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fDelOldM(aOldCols1, aRecDel)
Local nX 	 := 0
Local nY 	 := 0
Local nXCols := 0
Local nYCols := 0
Local nXOldC := 0
Local nYOldC := 0
Local nCount := 0
Local nRecaux:= 0
Local aPosDel:= {}

For nCount := 1 to Len(aRecDel)
	nRecAux := aRecDel[nCount][1]
	For nX := 1 to Len(aOldCols1)
		For nY := 3 to aRecDel[nCount][2]
			//Verifica se marcação foi deletada, ou apenas movimentada.
			If ( Ascan(aCols1[nX, nY], {|e|  ( Valtype(e) == "N" .And. e == nRecAux ) }) > 0 ) .AnD.;
			   ( Empty(nXCols) .AnD. Empty(nYCols) )
				nXCols := nX
				nYCols := nY
		    EndIf
		    //Busca posição da marcação no aCols de controle para deleção, caso necessário.
			If ( Ascan(aOldCols1[nX, nY], {|e|  ( Valtype(e) == "N" .And. e == nRecAux ) }) > 0 )
				aAdd(aPosDel, {nX, nY})
		    EndIf
	    Next
	Next
	//Bloco de deleção da marcação
	If !Empty(aPosDel) .AnD. (Empty(nXCols) .AnD. Empty(nYCols))
		nXOldC := aPosDel[nCount][1]
		nYOldC := aPosDel[nCount][2]
		aOldCols1[ nXOldC , nYOldC , 14 ] := aRecDel[nCount][3]
		aOldCols1[ nXOldC , nYOldC , 16 ] := aRecDel[nCount][4]
	EndIf
Next

Return

/*/{Protheus.doc}BloqPer()
- Verifica se o usuário ( Quando remote ) possui acesso aos lançamentos do Ponto Eletrônico
- na DataBase vigente, ou se o usuário logado no portal GCH, possui acesso na DataBase vigente.
@author: Matheus Bizutti
@since:  19/01/2017
@param:  lPortal - Indica se está sendo chamado para uso através do Portal GCH.

/*/

Function BloqPer(lPortal)

Local cSemanaRG3 := ""
Local lRet		 := .F.

Default lPortal	 := .F.

// - Retorna o dia a partir da DataBase.
cSemanaRG3 := Dtos(dDataBase)
cSemanaRG3 := Substr(cSemanaRG3,7,2)

// - Valida se o usuário tem acesso ao lançamento de marcações
// - No período informado.
If !( fVldAccess(cFilAnt,dDataBase,cSemanaRG3, .T., "PON", "1" , "G",lPortal) )
	lRet := .T.
EndIf

Return (lRet)
