#INCLUDE "PONM050.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"

Static lPnm050CposBlock		:= ExistBlock( "PNM050CPOS" )
Static lPort1510 			:= Port1510() 	//Verifica se Portaria 1510/2009 esta em vigor.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONM050  ³ Autor ³Marinaldo de Jesus     ³ Data ³29/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Exclusao de Informacoes Apontadas pelo SIGAPON             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso  	 ³ SIGAPON													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³13/04/14³      ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³        ³      ³que nao serao utilizados na P12.		  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONM050()

Local aArea			:= GetArea()
Local aRegs			:= {} //Variavel Terporaria. Devera Ser Excluida Para a Proxima Versao
Local aHelpPor	 
Local aHelpEng	 
Local aHelpSpa   
Local aSays   		:= {}
Local aButtons		:= {}
Local cSvFilAnt		:= cFilAnt
Local lBarG1ShowTm 	:= .F.
Local lBarG2ShowTm 	:= .F.
Local nOpcA			:= 0

Private lAbortPrint := .F.
Private cCadastro   := OemToAnsi(STR0001 ) // 'Elimina‡„o das Marca‡”es'

DEFAULT lPnm050CposBlock	:= ExistBlock( "PNM050CPOS" )

If lPort1510
	cCadastro += fPortTit() //Complementa titulo da tela com dizeres referente a portaria.
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ So Executa se os Modos de Acesso dos Arquivos Relacionados es³
³ tiverm OK.											  	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ValidArqPon()

	Pergunte('PNM050', .F.)
	
	aAdd(aSays,OemToAnsi( STR0003 ) )//'Este programa tem como objetivo efetuar a Elimina‡„o de :'
	aAdd(aSays,OemToAnsi( STR0004 ) )//'- Marca‡”es(SP8)________Acumulado de Marca‡”es(SPG)'
	aAdd(aSays,OemToAnsi( STR0005 ) )//'- Apontamentos(SPC)_____Acumulados Apontamentos(SPH)'
	aAdd(aSays,OemToAnsi( STR0006 ) )//'- Refei‡”es(SP5)________Acumulado de Refei‡”es(SPN)'
	aAdd(aSays,OemToAnsi( STR0007 ) )//'- Resultados(SPB)_______Abonos(SPK)'
	aAdd(aSays,OemToAnsi( STR0008 ) )//'- Banco de Horas(SPI)___Abonos(SPK)'
	If lPort1510
		aAdd(aSays,OemToAnsi( STR0020 ) )//'Obs.: As marcações originais não serão eliminadas.'
	EndIf
	
	aAdd(aButtons, { 5,.T.,{|| Pergunte("PNM050",.T. ) } } )
	aAdd(aButtons, { 1,.T.,{|o| nOpcA := 1,IF(GpConfOK(),FechaBatch(),nOpcA := 0 ) }} )
	aAdd(aButtons, { 2,.T.,{|o| FechaBatch() }} )
		
	FormBatch( cCadastro, aSays, aButtons )
	
	IF ( nOpcA == 1 )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se deve Mostrar Calculo de Tempo nas BarGauge			 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		lBarG1ShowTm := ( SuperGetMv("MV_PNSWTG1",NIL,"N") == "S" )
		lBarG2ShowTm := ( SuperGetMv("MV_PNSWTG2",NIL,"S") == "S" )
		/*                               
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Executa o Processo de Exclusao de Marcacoes              			 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		Proc2BarGauge( { || Ponm050Proc() } , STR0001 , NIL , NIL , .T. , lBarG1ShowTm , lBarG2ShowTm )  // 'Elimina‡„o das Marca‡”es'
	EndIF

EndIF	

cFilAnt := cSvFilAnt
	
RestArea( aArea )

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ponm050Proc³Autor ³ Marinaldo de Jesus    ³ Data ³29/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Realizar a Dele‡„o de Registros                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PonM050                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±³           ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³--------³------³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Ponm050Proc()

//-- Defini‡„o de Variaveis Locais   
Local aAreaSRA		:= SRA->( GetArea() )
Local aAreaSP5		:= SP5->( GetArea() )
Local aAreaSP8		:= SP8->( GetArea() )
Local aAreaSPB		:= SPB->( GetArea() )
Local aAreaSPC		:= SPC->( GetArea() )
Local aAreaSPG		:= SPG->( GetArea() )
Local aAreaSPH		:= SPH->( GetArea() )
Local aAreaSPI		:= SPI->( GetArea() )
Local aAreaSPL		:= SPL->( GetArea() )
Local aAreaSPN		:= SPN->( GetArea() )
Local aAreaSPK		:= SPK->( GetArea() )
Local aRecnos		:= {}
Local aTabPadrao 	:= {}
Local aInfo			:= {}
Local aRecsBarG		:= {}
Local bSraScope		:= { || NIL }
Local cFilDe   	 	:= ""
Local cFilAte   	:= ""
Local cCCDe     	:= ""
Local cCCAte    	:= ""
Local cTurnoDe  	:= ""
Local cTurnoAte 	:= ""
Local cMatDe    	:= ""
Local cMatAte   	:= ""
Local cNomeDe   	:= ""
Local cNomeAte  	:= ""
Local cTipo     	:= ""
Local cSituacoes 	:= ''
Local cCategoria 	:= ''
Local cLimpaMotAbo	:= Space( TamSx3("PC_ABONO")[1] )	//Variavel auxiliar para preencher em branco o campo Motivo do Abono
Local nRefDe		:= ""
Local nRefAte		:= ""
Local cTpRefDe		:= ""
Local cTpRefAte		:= ""
Local cAcessaSRA 	:= &("{ || " + ChkRH("PONM050","SRA","2") + "}")
Local cLastFil		:= "__cLastFil__"  
Local cSvFilAnt		:= cFilAnt
Local cTimeIni		:= Time()
Local cMsgBarG1		:= ""
Local dIni      	:= Ctod("//")
Local dFim      	:= Ctod("//")
Local dPerIni		:= Ctod("//")
Local dPerFim		:= Ctod("//")
Local lDataApontamento:= .F.
Local lSP8      	:= .F.
Local lSPG      	:= .F.
Local lSPC      	:= .F.
Local lSPH      	:= .F.
Local lSP5      	:= .F.
Local lSPN      	:= .F.
Local lSPB      	:= .F.
Local lSPL			:= .F.
Local lSPI      	:= .F.
Local lSPK      	:= .F. 
Local nLimpa    	:= 2
Local nLastRec		:= 0.00
Local nIncPercG1	:= 0.00
Local nIncPercG2	:= 0.00
Local nRecsBarG		:= 0.00

Local aStruSRA		:= {}
Local aCposSRA		:= {}
Local aTempSRA		:= SRA->( dbStruct() )
Local cQuery	 	:= ""
Local cQueryCond	:= ""
Local cRetSqlName	:= ""
Local lSraQryOpened	:= .F.
Local nContField	:= Len( aTempSRA	)
Local uRet			:= NIL
Local nX

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega as Perguntas em Variaveis MV_PAR??                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Pergunte( "PNM050" , .F. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carregando as Perguntas                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cFilDe    	:= mv_par01									//Filial De
cFilAte   	:= mv_par02									//Filial Ate
cCCDe     	:= mv_par03									//Centro de Custo De
cCCAte    	:= mv_par04									//Centro de Custo Ate
cTurnoDe  	:= mv_par05									//Turno De
cTurnoAte 	:= mv_par06									//Turno Ate
cMatDe    	:= mv_par07									//Matricula De
cMatAte   	:= mv_par08									//Matricula Ate
cNomeDe   	:= mv_par09									//Nome De
cNomeAte  	:= mv_par10									//Nome Ate
dIni      	:= mv_par11									//Data Inicio
dFim      	:= mv_par12									//Data Fim
lSP8      	:= ( mv_par13 == 2 .or. mv_par13 == 4 )	//Excluir Marcacoes:1=Nao;2;Movimento;4=Ambos
lSPG      	:= ( mv_par13 == 3 .or. mv_par13 == 4 )	//Excluir Marcacoes:1=Nao;3=Acumulado;4=Ambos
lSP5      	:= ( mv_par14 == 2 .or. mv_par14 == 4 )	//Excluir Refeicoes:1=Nao;2=Movimento;4=Ambos
lSPN      	:= ( mv_par14 == 3 .or. mv_par14 == 4 )	//Excluir Refeicoes:1=Nao;3=Acumulado;4=Ambos
lSPC      	:= ( mv_par15 == 2 .or. mv_par15 == 4 )	//Excluir Apontamentos:1=Nao;2=Movimento;4=Ambos
lSPH      	:= ( mv_par15 == 3 .or. mv_par15 == 4 )	//Excluir Apontamentos:1=Nao;3=Acumulado;4=Ambos
lSPB      	:= ( mv_par16 == 2 .or. mv_par16 == 4 )	//Excluir Resultados:1=Nao;2=Movimento;4=Ambos
lSPL      	:= ( mv_par16 == 3 .or. mv_par16 == 4 )	//Excluir Resultados:1=Nao;3=Acumulado;4=Ambos
lSPK      	:= ( mv_par17 == 1 )						//Excluir Abonos
lSPI      	:= ( mv_par18 == 1 )						//Excluir Banco de Horas
cTipo     	:= RetTipoExclu( mv_par19 )					//Tipo a Ser Excluido:1=Gerado;2=Informado;3=Leitura;4=Marcacao;5=Classificado
nLimpa    	:= mv_par20 								//Exclui Todos os Tipos:1=Sim;2=Nao
nRefDe	 	:= mv_par21									//Horas de Refeicao De
nRefAte	 	:= mv_par22									//Horas de Refeicao Ate
cTpRefDe	:= mv_par23									//Tipo de Refeicao De
cTpRefAte	:= mv_par24									//Tipo de Refeicao Ate
cSituacoes	:= mv_par25
cCategoria	:= mv_par26

lDataApontamento:= If(mv_par27 == 1, .T., .F.) //-- Elimina marcacoes/refeicoes pela data de apontamento
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seta as Ordens dos Arquivos                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SP5->( dbSetOrder(1) )
SP8->( dbSetOrder(1) )
SPB->( dbSetOrder(1) )
SPC->( dbSetOrder(2) )
SPG->( dbSetOrder(1) )
SPH->( dbSetOrder(1) )
SPI->( dbSetOrder(1) )
SPL->( dbSetOrder(1) )
SPN->( dbSetOrder(1) )
SPK->( dbSetOrder(1) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Procura primeiro funcion rio.                               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SRA->( dbSetOrder( RetOrdem( "SRA" , "RA_FILIAL+RA_TNOTRAB" ) ) )
cInicio  := "RA_FILIAL+RA_TNOTRAB"
cFim     := cFilAte + cTurnoAte

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Cria o Bloco dos Funcionarios que atendam ao Scopo	   	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
bSraScope	:= { || ;
						(;
							(	RA_FILIAL	>= cFilDe  	) .and. (	RA_FILIAL	<= cFilAte  	) .and. ;
							(	RA_TNOTRAB	>= cTurnoDe	) .and. (	RA_TNOTRAB	<= cTurnoAte	) .and. ;
							(	RA_NOME		>= cNomeDe	) .and. (	RA_NOME		<= cNomeAte		) .and. ;
							(	RA_MAT		>= cMatDe	) .and. (	RA_MAT		<= cMatAte		) .and. ;
							(	RA_CATFUNC $ cCategorias ) .and. (	RA_SITFOLH	$ cSituacoes	) .and. ;
							(	RA_CC		>= cCCDe	) .and. (	RA_CC		<= cCCAte		)	    ;
						);
			   }

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Atualiza a Mensagem para a IncProcG1() (Cadastro de Empresas)³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CREATE SCOPE aInfo FOR ( ( ( M0_CODIGO == cEmpAnt ) .and. ( FWGETCODFILIAL >= cFilDe ) .and. ( FWGETCODFILIAL <= cFilAte ) ) )
BarGauge1Set( ( nRecsBarG := SM0->( ScopeCount( aInfo ) ) ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seta apenas os Campos do SRA que serao Utilizados           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aAdd( aCposSRA , "RA_FILIAL"	)
aAdd( aCposSRA , "RA_MAT" 		)	
aAdd( aCposSRA , "RA_NOME"		)
aAdd( aCposSRA , "RA_CC"		)
aAdd( aCposSRA , "RA_TNOTRAB"	)
aAdd( aCposSRA , "RA_SEQTURN"	)
aAdd( aCposSRA , "RA_REGRA"		)
aAdd( aCposSRA , "RA_ADMISSA"	)
aAdd( aCposSRA , "RA_CATFUNC"	)
aAdd( aCposSRA , "RA_SITFOLH"	)
aAdd( aCposSRA , "RA_DEMISSA"	)
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Verifica e Seta os campos a mais incluidos no Mex             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/				
fAdCpoSra(aCposSra)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Ponto de Entrada para Campos do Usuario                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( lPnm050CposBlock )
	IF ( ValType( uRet := ExecBlock("PNM050CPOS",.F.,.F.,aCposSRA) ) == "A" )
		IF Len( uRet ) >= Len( aCposSRA )
			aCposSRA := aClone(uRet)
			uRet	 := NIL
		EndIF
	EndIF
EndIF
For nX := 1 To nContField
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega os Campos do SRA para a Montagem da Query			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF aScan( aCposSRA , { |x| Upper(AllTrim(x)) == Upper( AllTrim( aTempSRA[ nX , 1 ] ) ) } ) > 0.00
		aAdd( aStruSRA , aClone( aTempSRA[ nX ] ) )
	EndIF
Next nX
aCposSRA	:= aTempSRA := NIL
nContField	:= Len( aStruSRA )
cQuery := "SELECT "
For nX := 1 To nContField
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inclui os Campos na Montagem da Query						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cQuery += aStruSRA[ nX , 1 ] + ", "
Next nX
cRetSqlName := InitSqlName("SRA")
cQuery		:= SubStr( cQuery , 1 , Len( cQuery ) - 2 )

cQueryCond	:= " FROM "+cRetSqlName
cQueryCond	+= " WHERE "
cQueryCond	+= "RA_FILIAL>='"+cFilDe+"'"
cQueryCond	+= " AND " 
cQueryCond	+= "RA_FILIAL<='"+cFilAte+"'"
cQueryCond	+= " AND " 
cQueryCond	+= "RA_TNOTRAB>='"+cTurnoDe+"'"	
cQueryCond	+= " AND " 
cQueryCond	+= "RA_TNOTRAB<='"+cTurnoAte+"'"
cQueryCond	+= " AND " 
cQueryCond	+= "RA_MAT>='"+cMatDe+"'"
cQueryCond	+= " AND " 
cQueryCond	+= "RA_MAT<='"+cMatAte+"'"
cQueryCond	+= " AND " 
cQueryCond	+= "RA_NOME>='"+cNomeDe+"'"	
cQueryCond	+= " AND " 
cQueryCond	+= "RA_NOME<='"+cNomeAte+"'"
cQueryCond	+= " AND " 	
cQueryCond	+= "RA_CC>='"+cCCDe+"'"
cQueryCond	+= " AND " 
cQueryCond	+= "RA_CC<='"+cCCAte+"'"
cQueryCond	+= " AND "
cQueryCond	+= "D_E_L_E_T_=' ' "

cQuery		+= cQueryCond
cQuery		+= "ORDER BY "+SqlOrder( SRA->( IndexKey() ) )
cQuery		:= ChangeQuery(cQuery)
SRA->( dbCloseArea() ) //Fecha o SRA para uso da Query
IF ( lSraQryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"SRA",.T.,.T.) )
	For nX := 1 To nContField
		IF ( aStruSRA[nX,2] <> "C" )
			TcSetField("SRA",aStruSRA[nX,1],aStruSRA[nX,2],aStruSRA[nX,3],aStruSRA[nX,4])
		EndIF
	Next nX
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica o Total de Registros a Serem Processados            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cQuery := "SELECT COUNT(*) NLASTREC "
	cQuery += cQueryCond
	cQuery := ChangeQuery(cQuery)
        IF ( MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"__QRYCOUNT",.T.,.T.) )
		nLastRec := __QRYCOUNT->NLASTREC
		__QRYCOUNT->( dbCloseArea() )
	Else
		MsAguarde( { || SRA->( dbEval( { || ++nLastRec } ) ) } , STR0002 + STR0009 )	//'Aguarde...'###'Selecionaldo Funcionarios'
		SRA->( dbGotop() )
	EndIF
	cQuery		:= ""
	cQueryCond	:= ""
Else
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura Arquivo Padrao e Ordem                             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ChkFile( "SRA" , .F. )
	SRA->( dbSetOrder( RetOrdem( "SRA" ) ) )
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Procura primeiro funcion rio.                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	SRA->( dbSeek( cFilDe + cMatDe , .T. ) )
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica o Total de Registros a Serem Processados            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nLastRec := SRA->( LastRec() )
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicializa a Mensagem para a IncProcG2() ( Funcionarios )	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IncProcG2( OemToAnsi( STR0012 ) , .F. )	//'Processando...'

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Atualiza a Mensagem para a IncProcG2() ( Funcionarios )	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
BarGauge2Set( nLastRec )

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Processa a Exclusao   									   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	While SRA->( !Eof() .and. &(cInicio) <= cFim )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Consiste filtro do intervalo De / Ate                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !( lSraQryOpened )
			IF SRA->( !Eval( bSraScope ) )
				SRA->( dbSkip() )
				Loop
			EndIF
		Else
	       	If 	SRA->( ! ( ( RA_CATFUNC $ cCategorias ) .and. ( RA_SITFOLH	$ cSituacoes ) ) )
				SRA->(dbSkip())              
				Loop
			Endif
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega as Filiais e Periodos de Apontamento                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	    IF !( cLastFil == SRA->RA_FILIAL )
	    	cLastFil := SRA->RA_FILIAL
	    	cFilAnt	 := IF( !Empty( cLastFil ) , cLastFil , cFilAnt )
			
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem o % de Incremento da 2a. BarGauge					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			nIncPercG1 := SuperGetMv( "MV_PONINC1" , NIL , 5 , cLastFil )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem o % de Incremento da 2a. BarGauge					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			nIncPercG2 := SuperGetMv( "MV_PONINCP" , NIL , 5 , cLastFil )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Atualiza a Mensagem para a IncProcG1() ( Turnos )			   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			fInfo( @aInfo , cLastFil )
			cMsgBarG1 := ( STR0013 + " " + cLastFil + " - " + AllTrim( aInfo[3] ) ) ////"Filial:"
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Inicializa Mensagem na 1a BarGauge                           ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IncProcG1( cMsgBarG1 , .F.  )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Incrementa a Barra de Gauge referente a Filial				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IncPrcG1Time( cMsgBarG1 , nRecsBarG , cTimeIni , .F. , 1 , nIncPercG1 )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Carrega o Periodo de Apontamento              				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF lDataApontamento
				If ( ( lSPC ) .OR. ( lSP8 ) .OR. ( lSPG ) )
					GetPonMesDat( @dPerIni , @dPerFim , cLastFil )
				EndIF	
		    Else
			    If ( ( lSPC ) .AND. !( lSP8 ) )
					GetPonMesDat( @dPerIni , @dPerFim , cLastFil )
				EndIF	
			EndIF	
	    EndIF
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Movimenta a R‚gua de Processamento                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IncPrcG2Time( OemToAnsi( STR0019 ) , nLastRec , cTimeIni , .T. , 2 , nIncPercG2 )	//"Processados:"

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Consiste controle de acessos e filiais validas               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF SRA->( !(RA_FILIAL $ fValidFil()) .Or. !Eval(cAcessaSRA) )
			SRA->(dbSkip())
			Loop
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta marca‡”es de Refei‡„o (SP5)                          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSP5 )
			IF __lFkInUse
				DelSp5SpnC("SP5",nLimpa,cTipo,nRefDe,nRefAte,dIni,dFim,cTpRefDe,cTpRefAte)
			Else
				DelSp5SpnT("SP5",nLimpa,cTipo,nRefDe,nRefAte,dIni,dFim,cTpRefDe,cTpRefAte)
			EndIF	
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Acumulados de Marca‡”es de Refei‡„o (SPN)        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPN )
			IF __lFkInUse
				DelSp5SpnC("SPN",nLimpa,cTipo,nRefDe,nRefAte,dIni,dFim,cTpRefDe,cTpRefAte)
			Else
				DelSp5SpnT("SPN",nLimpa,cTipo,nRefDe,nRefAte,dIni,dFim,cTpRefDe,cTpRefAte)
			EndIF	
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Marca‡”es (SP8/SPG)                     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	    IF lDataApontamento
	       DeleTopApont( lSP8, lSPG, dIni , dFim , dPerIni, dPerFim, cLastFil, nLimpa, cTipo) 
	    Else   
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Marca‡”es (SP8)                         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSP8 )
			IF __lFkInUse
				DeleteXbs( "SP8" , nLimpa , cTipo , dIni , dFim )
			Else
				DeleteTop( "SP8" , nLimpa , cTipo , dIni , dFim )
			EndIF	
        EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Acumulados de Marca‡”es (SPG)           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPG )
			IF __lFkInUse
				DeleteXbs( "SPG" , nLimpa , cTipo , dIni , dFim )
			Else
				DeleteTop( "SPG" , nLimpa , cTipo , dIni , dFim )
			EndIF	
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF
	    Endif

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Apontamentos (SPC)                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPC )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Desflega as Marcacoes Apontadas apenas quando nao for selecio³
			³nada a exclusao das marcacoes								  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF IF( !( lSP8 ) , SP8FlgAponta( dIni , dFim , @aRecnos , @aTabPadrao , dPerIni , dPerFim ) , .T. )
				IF __lFkInUse
					DeleteXbs( "SPC" , nLimpa , cTipo , dIni , dFim , aRecnos )
				Else
					DeleteTop( "SPC" , nLimpa , cTipo , dIni , dFim , aRecnos )
				EndIF
			EndIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Acumulado de Apontamentos (SPH)         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPH )
			IF __lFkInUse
				DeleteXbs( "SPH" , nLimpa , cTipo , dIni , dFim )
			Else
				DeleteTop( "SPH" , nLimpa , cTipo , dIni , dFim )
			EndIF	
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Resultados (SPB)                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPB )
			IF __lFkInUse 
				DeleteXbs( "SPB" , nLimpa , cTipo , dIni , dFim )
			Else
				DeleteTop( "SPB" , nLimpa , cTipo , dIni , dFim )
			EndIF	
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Acumulado de Resultados (SPL)           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPL )
			IF __lFkInUse
				DeleteXbs( "SPL" , nLimpa , cTipo , dIni , dFim )
			Else
				DeleteTop( "SPL" , nLimpa , cTipo , dIni , dFim )
			EndIF	
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Banco de Horas (SPI)                    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPI )
			IF __lFkInUse
				DeleteXbs( "SPI" , nLimpa , cTipo , dIni , dFim )
			Else
				DeleteTop( "SPI" , nLimpa , cTipo , dIni , dFim )
			EndIF	
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Abonos (SPK)                            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPK )
			IF IF( !( lSPC ) , SPCClearAbono( dIni , dFim , cLimpaMotAbo , @aRecnos ) , .T. )
				IF __lFkInUse
					DeleteXbs( "SPK" , nLimpa , cTipo , dIni , dFim , aRecnos )
				Else
					DeleteTop( "SPK" , nLimpa , cTipo , dIni , dFim )
				EndIF
			EndIF
		EndIF
		
		SRA->( dbSkip() )

	End While
	
End Sequence

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Fecha a Query do SRA e Restaura o Padrao                    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( lSraQryOpened )
	SRA->( dbCloseArea() )
	ChkFile( "SRA" , .F. )
EndIF
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Reabre os Arquivos										       ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
ReOpenFiles( { "SP5" , "SPN" , "SP8" , "SPG" , "SPB" , "SPL" , "SPC" , "SPH" , "SPI" , "SPK" } ) 

RestArea( aAreaSRA )
RestArea( aAreaSP5 )
RestArea( aAreaSP8 )
RestArea( aAreaSPB )
RestArea( aAreaSPC )
RestArea( aAreaSPG )
RestArea( aAreaSPH )
RestArea( aAreaSPI )
RestArea( aAreaSPL )
RestArea( aAreaSPN )
RestArea( aAreaSPK )

cFilAnt	:= cSvFilAnt

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³DelSp5SpnC		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Deleta os Dados do SP5 ou SPN Quando Code Base              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DelSp5SpnC(	cAlias		,;
							nLimpa		,;
							cTipo		,;
							nRefDe		,;
							nRefAte		,;
							dIni		,;
							dFim		,;
							cTpRefDe	,;
							cTpRefAte	 ;
						  )

Local cPrefixo	:= ""
Local cMsgErr	:= ""

cAlias		:= Upper( AllTrim( cAlias ) )
cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )

IF ( cAlias $ ( "SP5_SPN" ) )
	IF ( cAlias )->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT , .F. ) )
		While ( cAlias )->( !Eof() .and. SRA->RA_FILIAL + SRA->RA_MAT == &( cPrefixo+"FILIAL" ) + &( cPrefixo+"MAT" ) )
			IF ( cAlias )->(;
								( &( cPrefixo+"DATA"    ) >= dIni		.and. &( cPrefixo+"DATA" )		<= dFim		) .and. ;
								( &( cPrefixo+"HORA"    ) >= nRefDe 	.and. &( cPrefixo+"HORA" ) 		<= nRefAte	) .and. ;
								( &( cPrefixo+"TIPOREF" ) >= cTpRefDe	.and. &( cPrefixo+"TIPOREF" )	<= cTpRefAte);
							)	
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Limpa registros conforme tipo de Lancto					  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( ( nLimpa == 1 ) .or. ( ( cAlias )->( &( cPrefixo+"FLAG" ) == cTipo ) ) )
					IF ( cAlias )->( RecLock( cAlias , .F. , .T. ) )
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
						( cAlias )->( MsUnlock() )
					EndIF	
				EndIF
			EndIF
			( cAlias )->( dbSkip() )
		End While
	EndIF
EndIF
	
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³DelSp5SpnT		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Deleta os Dados do SP5 ou SPN Quando TOP					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DelSp5SpnT(	cAlias		,;
							nLimpa		,;
							cTipo		,;
							nRefDe		,;
							nRefAte		,;
							dIni		,;
							dFim		,;
							cTpRefDe	,;
							cTpRefAte	 ;
						  )

Local cPrefixo 		:= ""
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cQuery		:= ""
Local cWhere		:= ""
Local cQueryDelet	:= ""
Local cQueryRecno	:= ""
Local cRetSqlName	:= InitSqlName( cAlias )
Local cIniData		:= Dtos( dIni )
Local cFimData		:= Dtos( dFim )
Local cCpoRecno 	:= "R_E_C_N_O_"
Local lDeleted 		:= .F.
Local nMinRec 		:= 0.00
Local nMaxRec 		:= 0.00
Local nCountDele	:= 0.00
	
cAlias		:= Upper( AllTrim( cAlias ) )
cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )
	
IF ( cAlias $ ( "SP5_SPN" ) )

	IF ( lDeleted := ( ( nCountDele := CountDele(cAlias,cPrefixo,cFil,cMat,cIniData,cFimData,cRetSqlName) ) > 0.00 ) )

		cQuery := "DELETE FROM " + cRetSqlName

		cWhere := " WHERE "
		cWhere += cPrefixo+"FILIAL='"+cFil+"'"
		cWhere += " AND "
		cWhere += cPrefixo+"MAT='"+cMat+"'"
		cWhere += " AND "
		IF !( nLimpa == 1 )
			cWhere += cPrefixo+"FLAG='"+cTipo+"'"
			cWhere += " AND "
		EndIF
		cWhere += cPrefixo+"TIPOREF>='"+cTpRefDe+"'"
		cWhere += " AND "
		cWhere += cPrefixo+"TIPOREF<='"+cTpRefAte+"'"
		cWhere += " AND "
		cWhere += cPrefixo+"DATA>='"+cIniData+"'"
		cWhere += " AND "
		cWhere += cPrefixo+"DATA<='"+cFimData+"'"
		cWhere += " AND "
		cWhere += cPrefixo+"HORA>="+Str(nRefDe,TamSx3(cPrefixo+"HORA")[1],TamSx3(cPrefixo+"HORA")[2])
		cWhere += " AND "
		cWhere += cPrefixo+"HORA<="+Str(nRefAte,TamSx3(cPrefixo+"HORA")[1],TamSx3(cPrefixo+"HORA")[2])
			
		cQuery += cWhere
	
		MsMinMaxRec( cAlias , @nMinRec , @nMaxRec , NIL , cWhere )
	
		While ( nMinRec <= nMaxRec )
			cQueryRecno := " AND "
			cQueryRecno += "("
			cQueryRecno +=		cCpoRecno + " >= " + AllTrim( Str( nMinRec , 18 , 0 ) )
			cQueryRecno += 		" AND "
			cQueryRecno += 		cCpoRecno + " <= " + AllTrim( Str( ( nMinRec += 1024 ) , 18 , 0 ) )
			cQueryRecno += ")"
			cQueryDelet := ( cQuery + cQueryRecno )
			TcSqlExec( cQueryDelet )
		End While
	
	EndIF

EndIF	

Return( lDeleted )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³DeleteXbs		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Deleta os Dados Quando Code Base             				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DeleteXbs( cAlias , nLimpa , cTipo , dIni , dFim , aRecnos )

Local cPrefixo 		:= ""
Local cCpo			:= ""
Local cMsgErr		:= ""
Local lExistFlag	:= .F.
Local lExistTipo2	:= .F.
Local lChkFlag		:= .F.
Local lDeleted		:= .F.
Local nRecno		:= 0.00
Local nRecnos		:= 0.00

cAlias		:= Upper( AllTrim( cAlias ) )

IF Empty( aRecnos )
	cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )
	IF ( lExistFlag	:= ( ( cAlias )->( FieldPos( cPrefixo+"FLAG" ) ) > 0.00 ) )
		cCpo := "FLAG"
	ElseIF ( lExistTipo2 := ( ( cAlias )->( FieldPos( cPrefixo+"TIPO2" ) ) > 0.00 ) )
		cCpo := "TIPO2"
	EndIF	
	lChkFlag := ( lExistFlag .or. lExistTipo2 )
	IF ( cAlias)->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT, .F.) )
		While ( cAlias)->( !Eof() .and. SRA->RA_FILIAL + SRA->RA_MAT == &( cPrefixo+"FILIAL" ) + &( cPrefixo+"MAT" ) )
			IF ( ( nLimpa == 1 ) .or. IF( lChkFlag ,  ( ( cAlias )->( &( cPrefixo+cCpo ) ) == cTipo ) , .T. ) )
				IF ( cAlias)->( &( cPrefixo+"DATA" ) >= dIni .and. &( cPrefixo+"DATA" ) <= dFim )
	                //--Se portaria estiver ativada deleta apenas registros que nao forem originais
	                //--Registros anteriores a portaria, com campo TIPOREG vazio, não serao excluidos
					If ( lPort1510 .and. ( cAlias == "SP8" .or. cAlias == "SPG" ) )
						If (cAlias)->( &( cPrefixo+"TIPOREG" ) ) == "O" .or. Empty((cAlias)->( &( cPrefixo+"TIPOREG" )))
							( cAlias)->( dbSkip() )
							Loop
						EndIf
					EndIf
					IF ( cAlias)->( RecLock( cAlias , .F. , .T. ) )
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
						( cAlias)->( MsUnlock() )
						lDeleted := .T.
					EndIF
				EndIF
			EndIF
			( cAlias)->( dbSkip() )
		End While
	EndIF	
Else
	IF ( lDeleted := ( ( nRecnos := Len( aRecnos ) ) > 0.00 ) )
		For nRecno := 1 To nRecnos
			( cAlias )->( dbGoto( aRecnos[ nRecno ] ) )
			If lPort1510 .and. ( (cAlias)->( &( cPrefixo+"TIPOREG" ) ) == "O" .or. Empty((cAlias)->( &( cPrefixo+"TIPOREG" )) ) )
				Loop
			EndIf
			IF ( cAlias )->( RecLock( cAlias , .F. ) )
				IF !( cAlias )->( FkDelete( @cMsgErr ) )
					( cAlias )->( RollBackDelTran( cMsgErr ) )
				EndIF
				( cAlias )->( MsUnLock() )
			EndIF
		Next nRecno
	EndIF	
EndIF

Return( lDeleted )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³DeleteToP		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Deleta os Dados Quando TOP               				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DeleteToP( cAlias , nLimpa , cTipo , dIni , dFim , aRecnos )

Local cPrefixo 		:= ""
Local cQuery		:= ""
Local cWhere		:= ""	
Local cQueryDelet	:= ""
Local cQueryRecno	:= ""
Local cRetSqlName	:= InitSqlName( cAlias )
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cIniData		:= Dtos( dIni )
Local cFimData		:= Dtos( dFim )
Local cCpoRecno 	:= "R_E_C_N_O_"
Local lExistFlag	:= .F.
Local lExistTipo2	:= .F.
Local lDeleted		:= .F.
Local nMinRec 		:= 0.00
Local nMaxRec 		:= 0.00
Local nCountDele	:= 0.00

cAlias		:= Upper( AllTrim( cAlias ) )
cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )

IF Empty( aRecnos ) .or. ( lPort1510 .and. cAlias $ ("SP8_SPG") )

	IF !( cAlias $ ( "SP5_SPN" ) )
	
		IF ( lDeleted := ( ( nCountDele := CountDele(cAlias,cPrefixo,cFil,cMat,cIniData,cFimData,cRetSqlName) ) > 0.00 ) )
		
			lExistFlag	:= ( ( cAlias )->( FieldPos( cPrefixo+"FLAG" ) ) > 0.00 )
			lExistTipo2	:= ( ( cAlias )->( FieldPos( cPrefixo+"TIPO2" ) ) > 0.00 )
	
			cQuery := "DELETE FROM " + cRetSqlName
				
			cWhere := " WHERE "
			cWhere += ( cPrefixo+"FILIAL='"+cFil+"'" )
			cWhere += " AND "
			cWhere += ( cPrefixo+"MAT='"+cMat+"'" )
			cWhere += " AND "
			IF !( nLimpa == 1 )
				IF ( lExistFlag )
					IF ( cAlias == "SPC" .AND. cTipo <> "I"  )
						   	cWhere += ( cPrefixo+"FLAG='  ' " )     
						    cWhere += " AND " 
					 Else
					     	cWhere += ( cPrefixo+"FLAG='"+cTipo+"'" )
						    cWhere += " AND " 
					 End if
				ElseIF ( lExistTipo2 )
					cWhere += ( cPrefixo+"TIPO2='"+cTipo+"'" )
					cWhere += " AND "
				EndIF
			EndIF
			cWhere += ( cPrefixo+"DATA>='"+cIniData+"'" )
			cWhere += " AND "
			cWhere += ( cPrefixo+"DATA<='"+cFimData+"'" )
                //--Se portaria estiver ativada deleta apenas registros que nao forem originais
                //--Registros anteriores a portaria, com campo TIPOREG vazio, não serao excluidos
			If ( lPort1510 .and. ( cAlias == "SP8" .or. cAlias == "SPG" ) )
				cWhere += " AND "
				cWhere += ( cPrefixo+"TIPOREG<>'O'" )
				cWhere += " AND "
				cWhere += ( cPrefixo+"TIPOREG<>''" )				
			EndIf

			cQuery += cWhere
		
			MsMinMaxRec( cAlias , @nMinRec , @nMaxRec , NIL , cWhere )
	
			While ( nMinRec <= nMaxRec )
				cQueryRecno := " AND "
				cQueryRecno += "("
				cQueryRecno +=		cCpoRecno + " >= " + AllTrim( Str( nMinRec , 18 , 0 ) )
				cQueryRecno += 		" AND "
				cQueryRecno += 		cCpoRecno + " <= " + AllTrim( Str( ( nMinRec += 1024 ) , 18 , 0 ) )
				cQueryRecno += ")"
				cQueryDelet := ( cQuery + cQueryRecno )
				TcSqlExec( cQueryDelet )
			End While

		EndIF
	
	EndIF

Else    

	lDeleted := ( ( nMaxRec := Len( aRecnos ) ) > 0.00 )
	For nMinRec := 1 To nMaxRec
	
		nCountDele := aRecnos[ nMinRec ]
		
		cQueryDelet := "DELETE FROM " + cRetSqlName
		cQueryDelet += " WHERE "
		cQueryDelet += cCpoRecno + "=" + AllTrim( Str( nCountDele , 18 , 0 ) )
		TcSqlExec( cQueryDelet )
		
	Next nMinRec
	
EndIF

Return( lDeleted )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³SP8FlgAponta    ³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retira o Flag de Apontamento do SP8      				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SP8FlgAponta( dIni , dFim , aRecnos , aTabPadrao , dPerIni , dPerFim )

Local aTabCalend	:= {}
Local cSvAlias		:= Alias()
Local cAlias		:= "SPC"
Local cAliasQuery	:= cAlias
Local cAliasSP8		:= "SP8"
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cFilMat		:= ( cFil + cMat )
Local dLstData		:= Ctod("//")
Local lExistApont	:= .F.
Local lQueryOpened	:= .F.
Local lSP8QryOpened	:= .F.
Local nPosCalend	:= 0.00

Local aSp8Recnos		:= {}
Local aSpcFields		:= ( "SPC" )->( dbStruct() )
Local cIniData	 		:= ""
Local cFimData			:= ""
Local cQuery	 		:= ""
Local cQuerySP8			:= ""
Local cRetSqlName		:= InitSqlName( cAlias )
Local cSp8RetSqln		:= InitSqlName( cAliasSP8 )
Local cSp8IndexKey		:= SqlOrder( ( cAliasSP8 )->( IndexKey() ) )
Local cCpoRecno			:= ""
Local cDataBase			:= ""
Local nSpcFields 		:= Len( aSpcFields )
Local nRecno			:= 0.00
Local nRecnos			:= 0.00
Local nX

aRecnos := {}

IF !( __lFkInUse)

	cIniData	:= Dtos( dIni )
	cFimData	:= Dtos( dFim )
	cCpoRecno	:= "R_E_C_N_O_"
	cDataBase	:= ""

	IF ( lExistApont := ( CountDele(cAlias,"PC_",cFil,cMat,cIniData,cFimData,cRetSqlName) > 0.00 ) ) 
		cAliasQuery := ( "__Q" + cAliasQuery + "QRY" )
		cQuery := "SELECT "
		For nX := 1 To nSpcFields
			cQuery += aSpcFields[ nX , 01 ] + ", "
		Next nX
		cQuery += "R_E_C_N_O_ RECNO "
		cQuery += " FROM " + cRetSqlName
		cQuery += " WHERE "
		cQuery += "PC_FILIAL='"+cFil+"'"
		cQuery += " AND "
		cQuery += "PC_MAT='"+cMat+"'"
		cQuery += " AND "
		cQuery += " ( "
		cQuery += 		"PC_DATA>='"+cIniData+"'"
		cQuery += 		" AND "
		cQuery += 		"PC_DATA<='"+cFimData+"'"
		cQuery += " ) "
		cQuery += "ORDER BY " + SqlOrder( (cAlias)->( IndexKey() ) )
		cQuery := ChangeQuery( cQuery )
		IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.T.,.T.) )
			For nX := 1 To nSpcFields
				IF !( aSpcFields[ nX , 02 ] == "C" )
					TcSetField(cAliasQuery,aSpcFields[nX,01],aSpcFields[nX,02],aSpcFields[nX,03],aSpcFields[nX,04])
				EndIF
			Next nX
			cQuery := ""
		EndIF
	EndIF

EndIF

IF !( lQueryOpened )
	cAliasQuery	:= cAlias
	( cAliasQuery )->( dbSeek( cFilMat , .F. ) )
EndIF	

IF !( lQueryOpened )
	lExistApont := ( cAliasQuery )->( Found() )
Else
	lExistApont := ( cAliasQuery )->( !Eof() )
EndIF

IF ( lExistApont )
	
	CriaCalend(dPerIni,dPerFim,SRA->RA_TNOTRAB,SRA->RA_SEQTURN,@aTabPadrao,@aTabCalend,cFil,NIL,NIL,NIL,NIL,NIL,.F.)

	dPerIni -= 2
	dPerFim += 2
	
	IF ( lQueryOpened )

		cIniData	:= Dtos( dPerIni )
		cFimData	:= Dtos( dPerFim )

	EndIF

	While ( cAliasQuery )->( !Eof() .and. cFilMat == PC_FILIAL + PC_MAT )

		IF !( dLstData == ( cAliasQuery )->( PC_DATA ) )
	
			dLstData := ( cAliasQuery )->( PC_DATA )
	
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Retira o Flag de Marcacao Apontada do SP8					  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( nPosCalend := aScan( aTabCalend , { |x| x[1] == dLstData .and. x[4] == "1E" } ) ) > 0.00

				IF !__lFkInUse
				
					cQuerySP8	:= "SELECT "
					cQuerySP8 	+= "R_E_C_N_O_ RECNO "
					cQuerySP8	+= " FROM "+ cSp8RetSqln
					cQuerySP8	+= " WHERE "
					cQuerySP8	+= "P8_FILIAL='"+cFil+"'"
					cQuerySP8	+= " AND "
					cQuerySP8	+= "P8_MAT='"+cMat+"'"
					cQuerySP8	+= " AND "
					cQuerySP8	+= "P8_ORDEM='"+aTabCalend[ nPosCalend , 02 ]+"'"
					cQuerySP8	+= " AND "
					cQuerySP8	+= " ( "
					cQuerySP8	+= 		"P8_DATA>='"+cIniData+"'"
					cQuerySP8	+= 		" AND "
					cQuerySP8	+= 		"P8_DATA<='"+cFimData+"'"
					cQuerySP8	+= " ) "
					cQuerySP8	+= " AND "
					cQuerySP8	+= "P8_APONTA='S'"
					cQuery		+= " ORDER BY "+cSp8IndexKey
					cQuerySP8	:= ChangeQuery( cQuerySP8 )
		
					cAliasSP8	:= "QRYSP8REC"
		
					IF !( lSP8QryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuerySP8),cAliasSP8,.T.,.T.) )
						cAliasSP8 := "SP8"
					EndIF
				
				EndIF
				
				IF ( lSP8QryOpened )

					While ( cAliasSP8 )->( !Eof() )
						( cAliasSP8 )->( aAdd( aSp8Recnos , RECNO ) )
						( cAliasSP8 )->( dbSkip() )
					End While
					cQuerySP8 := ""
					( cAliasSP8 )->( dbCloseArea() )
					dbSelectArea( cAliasQuery )
				
				Else
					
					IF ( cAliasSP8 )->( dbSeek( ( cAliasQuery )->( PC_FILIAL + PC_MAT ) + aTabCalend[ nPosCalend , 02 ] ) )
						While ( cAliasSP8 )->( !Eof() .and. P8_FILIAL + P8_MAT + P8_ORDEM == ( cFilMat + aTabCalend[ nPosCalend , 02 ] )  )
							IF ( cAliasSP8 )->( P8_DATA >= dPerIni .and. P8_DATA <= dPerFim )
								IF ( cAliasSP8 )->( RecLock( "SP8" , .F. , .T. ) )
									( cAliasSP8 )->( P8_APONTA ) := "N"
									( cAliasSP8 )->( MsUnLock() )
								EndIF
							EndIF
							( cAliasSP8 )->( dbSkip() )
						End While
					EndIF

   				EndIF
	
   			EndIF
	
		EndIF

		IF !( lQueryOpened )

			aAdd( aRecnos , ( cAliasQuery )->( Recno() ) )

		Else

			aAdd( aRecnos , ( cAliasQuery )->( RECNO ) )

		EndIF	

		( cAliasQuery )->( dbSkip() )

	End While

	nRecnos := Len( aSp8Recnos )
	For nRecno := 1 To nRecnos 
		cQuerySP8 := "UPDATE "
		cQuerySP8 += cSp8RetSqln
		cQuerySP8 += " SET P8_APONTA='N' "
		cQuerySP8 += " WHERE " 
		cQuerySP8 += cCpoRecno + "=" + AllTrim( Str( aSp8Recnos[ nRecno ] , 18 , 0 ) )
		TcSqlExec( cQuerySP8 )
	Next nRecno
	IF ( lQueryOpened )
		( cAliasQuery )->( dbCloseArea() )
	EndIF
EndIF

dbSelectArea( cSvAlias )

Return( lExistApont )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³SPCClearAbono   ³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Limpa os Abonos do SPC                   				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SPCClearAbono( dIni , dFim , cLimpaMotAbo , aRecnos )

Local cSvAlias			:= Alias()
Local cAlias			:= "SPK"
Local cAliasQuery		:= cAlias
Local cAliasSPC			:= "SPC"
Local cFil				:= SRA->RA_FILIAL
Local cMat				:= SRA->RA_MAT
Local cChave    		:= ""
Local cChave1   		:= ""
Local lExistAbono		:= .F.
Local lSPCQryOpened		:= .F.

Local aSpcRecnos		:= {}
Local aSpkFields		:= ( "SPK" )->( dbStruct() )
Local cIniData	 		:= ""
Local cFimData			:= ""
Local cQuery	 		:= ""
Local cQuerySPC			:= ""
Local cCpoRecno			:= ""
Local cRetSqlName		:= InitSqlName( cAlias )
Local cSpcRetSqln		:= InitSqlName( cAliasSPC )
Local cSpcIndexKey		:= SqlOrder( ( cAliasSPC )->( IndexKey() ) )
Local lQueryOpened		:= .F.
Local nSpkFields 		:= Len( aSpkFields )
Local nRecno			:= 0.00
Local nRecnos			:= 0.00
Local nX

aRecnos := {}

IF !__lFkInUse
	cIniData	:= Dtos( dIni )
	cFimData	:= Dtos( dFim )
	cCpoRecno	:= "R_E_C_N_O_"

	IF ( lExistAbono := ( CountDele(cAlias,"PK_",cFil,cMat,cIniData,cFimData,cRetSqlName) > 0.00 ) ) 
		cAliasQuery := ( "__Q" + cAliasQuery + "QRY" )
		cQuery := "SELECT "
		For nX := 1 To nSpkFields
			cQuery += aSpkFields[ nX , 01 ] + ", "
		Next nX
		cQuery += "R_E_C_N_O_ RECNO "
		cQuery += " FROM "
		cQuery += cRetSqlName
		cQuery += " WHERE "
		cQuery += "PK_FILIAL='"+cFil+"'"
		cQuery += " AND "
		cQuery += "PK_MAT='"+cMat+"'"
		cQuery += " AND "
		cQuery += " ( "
		cQuery += 		"PK_DATA>='"+cIniData+"'"
		cQuery +=		" AND "
		cQuery += 		"PK_DATA<='"+cFimData+"'"
		cQuery += " ) "
		cQuery += "ORDER BY " + SqlOrder( (cAlias)->( IndexKey() ) )
		cQuery := ChangeQuery( cQuery )
		IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.T.,.T.) )
			For nX := 1 To nSpkFields
				IF !( aSpkFields[ nX , 02 ] == "C" )
					TcSetField(cAliasQuery,aSpkFields[nX,01],aSpkFields[nX,02],aSpkFields[nX,03],aSpkFields[nX,04])
				EndIF
			Next nX
			cQuery := ""
		EndIF
	EndIF

EndIF

IF !( lQueryOpened )
	cAliasQuery		:= cAlias
	( cAliasQuery )->( dbSeek( cChave , .F. ) )
EndIF

IF !( lQueryOpened )
	lExistAbono := ( cAliasQuery )->( Found() )
Else
	lExistAbono := ( cAliasQuery )->( !Eof() )		
EndIF

IF ( lExistAbono )

	cChave	:= ( cFil + cMat )

	While ( cAliasQuery )->( !Eof() .and. cChave == (PK_FILIAL + PK_MAT) )

		IF ( cAliasQuery )->( PK_DATA >= dIni .And. PK_DATA <= dFim )
			
			IF !__lFkInUse

				cQuerySPC	:= "SELECT "
				cQuerySPC 	+= "R_E_C_N_O_ RECNO "
				cQuerySPC	+= " FROM "+cSpcRetSqln
				cQuerySPC	+= " WHERE "
				cQuerySPC	+= "PC_FILIAL='"+cFil+"'"
				cQuerySPC	+= " AND "
				cQuerySPC	+= "PC_MAT='"+cMat+"'"
				cQuerySPC	+= " AND "
				cQuerySPC	+= "PC_ABONO='"+(cAliasQuery)->(PK_CODABO)+"'"
				cQuerySPC	+= " AND "
				cQuerySPC	+= "PC_DATA='"+Dtos((cAliasQuery)->(PK_DATA))+"'"
				cQuerySPC	+= " AND "
				cQuerySPC	+= "PC_CC='"+(cAliasQuery)->(PK_CC)+"'"
				cQuerySPC	+= " AND "
				cQuerySPC	+= "PC_TPMARCA='"+(cAliasQuery)->(PK_TPMARCA)+"'"
				cQuery		+= " ORDER BY "+cSpcIndexKey
				cQuerySPC	:= ChangeQuery( cQuerySPC )
			   
				cAliasSPC	:= "QRYSPCREC"
				
				IF !( lSPCQryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuerySPC),cAliasSPC,.T.,.T.) )
					cAliasSPC	:= "SPC"
				EndIF
					
            EndIF
            
			IF ( lSPCQryOpened )

				While ( cAliasSPC )->( !Eof() )
					( cAliasSPC )->( aAdd( aSpcRecnos , RECNO ) )
					( cAliasSPC )->( dbSkip() )
				End While
				cQuerySPC := ""
				( cAliasSPC )->( dbCloseArea() )
				dbSelectArea( cAliasQuery )
				
			Else				

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Zera o Abono e Limpa o Motivo								   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				cChave1 := ( cAliasQuery )->( cChave + Dtos(PK_DATA)+ PK_CODEVE + PK_TPMARCA + PK_CC )
				IF ( cAliasSPC )->( dbSeek( cChave1 ) )
					IF ( cAliasSPC )->( RecLock( "SPC" , .F. ) )
						( cAliasSPC )->( PC_QTABONO	)	:= 0.00
	               		( cAliasSPC )->( PC_ABONO	)	:= cLimpaMotAbo
						( cAliasSPC )->( MsUnLock() )
					EndIF
				EndIF

			EndIF
			
			IF !( lQueryOpened )
				aAdd( aRecnos , ( cAliasQuery )->( Recno() ) )
			Else
				aAdd( aRecnos , ( cAliasQuery )->( RECNO ) )
			EndIF	
		EndIF
        
		( cAliasQuery )->( dbSkip() )
		
	End While

	nRecnos := Len( aSpcRecnos )

	For nRecno := 1 To nRecnos
		cQuerySPC := "UPDATE "
		cQuerySPC += cSpcRetSqln
		cQuerySPC += " SET "
		cQuerySPC += "PC_QTABONO=0 , "
		cQuerySPC += "PC_ABONO='" + cLimpaMotAbo + "'"
		cQuerySPC += " WHERE "
		cQuerySPC += cCpoRecno + "=" + AllTrim( Str( aSpcRecnos[ nRecno ] , 18 , 0 ) )
		TcSqlExec( cQuerySPC )
	Next nRecno

	IF ( lQueryOpened )
		( cAliasQuery )->( dbCloseArea() )
	EndIF
EndIF

dbSelectArea( cSvAlias )

Return( lExistAbono )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³CountDele	    ³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Conta Registros para ver se deve haver delecao				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function CountDele(	cAlias		,;
							cPrefixo	,;
							cFil		,;
							cMat		,;
							cIniData	,;
							cFimData	,;
							cRetSqlName	 ;
						 )

Local cSvAlias	 := Alias()	
Local nCountDele := 0.00

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica o Total de Registros a Serem Processados            ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cQuery := "SELECT COUNT(*) NCOUNTDELE "
cQuery += " FROM "
cQuery += cRetSqlName
cQuery += " WHERE "
cQuery += cPrefixo+"FILIAL='"+cFil+"'"
cQuery += " AND "  
cQuery += cPrefixo+"MAT='"+cMat+"'"
cQuery += " AND "  
cQuery += " ( "
cQuery += 		cPrefixo+"DATA>='"+cIniData+"'"
cQuery += 		" AND "  
cQuery += 		cPrefixo+"DATA<='"+cFimData+"'"
cQuery += " ) "
cQuery := ChangeQuery(cQuery)
IF MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"__RECSDELE")
	nCountDele := __RECSDELE->NCOUNTDELE
	__RECSDELE->( dbCloseArea() )
EndIF

dbSelectArea( cSvAlias )

Return( nCountDele )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³RetTipoExclu    ³Autor³Marinaldo de Jesus ³ Data ³02/04/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retorna o Tipo para Exclusao                  				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function RetTipoExclu( nMvPar )
Return( IF(nMvPar==1,"G",IF(nMvPar==2,"I",IF(nMvPar==3,"E",IF(nMvPar==4,"M","A")))) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³ReOpenFiles   ³Autor³Equipe Advanded RH   ³ Data ³11/03/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Reabre os Arquivos em Modo Compartilhado					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros Formais>                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros Formais>                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³PONM090   												    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function ReOpenFiles( aFilesReOpen )

Local nLoop
Local nLoops

nLoops := Len( aFilesReOpen )
For nLoop := 1 To nLoops
    ( aFilesReOpen[ nLoop ] )->( dbCloseArea() )
    ChkFile( aFilesReOpen[ nLoop ] )
Next nLoop

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DeleTopApont   ³ Autor ³Mauricio MR        ³ Data ³03/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deleta as marcacoes conforme o periodo informado		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³DeleTopApont()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametro ³															 ³
³          ³dIni  		-> Data Inicial				                     ³
³          ³dFim  		-> Data Final				         		     ³
³          ³dPerIni   	-> Inicio Periodo de Apontamento				 ³
³          ³               Retornado.                               	 ³
³          ³dPerFim   	-> Final do Periodo de Apontamento				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponm050			                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function DeleTopApont( lSP8, lSPG, dIni , dFim, dPerIni , dPerFim , cLastFil, nLimpa, cTipo)

Local aPeriodos		:= {}
Local aMarcacoes	:= {}
Local aTabCalend	:= {}
Local aTabPadrao	:= {}
Local aTurnos		:= {}
Local cOrdem	
Local cTurno		:= ""
Local cSeq			:= ""   
Local dData			
Local dMarcIni   	:= Ctod("//")	//-- Data Inicial a Considerar para Recuperar as Marcacoes
Local dMarcFim   	:= Ctod("//")	//-- Data Final a Considerar para Recuperar as Marcacoes
Local dPerCorrIni
Local dPerCorrFim
Local lImpAcum   	:= .F.  
Local cMsgErr		:= ""   
Local nDia
Local nDias
Local nMarc  
Local nPosMarc
Local nTab
Local nX  

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Obtem os Periodos Compreendidos pelas datas informadas		   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aPeriodos := Monta_per( dIni , dFim , cLastFil , SRA->RA_MAT , dPerIni , dPerFim )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Corre Todos os Periodos 									  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
naPeriodos := Len( aPeriodos )
For nX := 1 To naPeriodos

    dPerCorrIni		:= aPeriodos[ nX , 1 ]
    dPerCorrFim		:= aPeriodos[ nX , 2 ] 

   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem as Datas para Recuperacao das Marcacoes				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    dMarcIni	:= aPeriodos[ nX , 3 ]
    dMarcFim	:= aPeriodos[ nX , 4 ]

   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se Eliminacao eh de Acumulado						  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	lImpAcum := ( dPerCorrFim < dPerIni )
	
   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se eh Acumulado e a Eliminacao NAO eh de Acumulado	  ³
	³Verifica se NAO eh Acumulado e a Eliminacao NAO eh do Mes Aberto ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	If lImpAcum .AND. ( !lSPG )
	   Loop
	ElseIf ( !lImpAcum ) .AND. ( !lSP8 )
	   Loop
	Endif   
    
    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Retorna Turno/Sequencia das Marca‡”es Acumuladas			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( lImpAcum ) 
	    cAlias:= "SPG"
		IF SPF->( dbSeek( SRA->( RA_FILIAL + RA_MAT ) + Dtos( dPerCorrIni) ) ) .and. !Empty(SPF->PF_SEQUEPA)
			cTurno	:= SPF->PF_TURNOPA
			cSeq	:= SPF->PF_SEQUEPA
		Else
    		/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Tenta Achar a Sequencia Inicial utilizando RetSeq()³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !RetSeq(cSeq,@cTurno,dPerCorrIni,dPerCorrFim,dDataBase,aTabPadrao,@cSeq) .or. Empty( cSeq )
    			/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Tenta Achar a Sequencia Inicial utilizando fQualSeq()		  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				cSeq := fQualSeq( NIL , aTabPadrao , dPerCorrIni , @cTurno )
			EndIF
		EndIF
	Else
	    cAlias:= "SP8"
   			/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Considera a Sequencia e Turno do Cadastro            		  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cTurno	:= SRA->RA_TNOTRAB
		cSeq	:= SRA->RA_SEQTURN
	EndIF

    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega Arrays com as Marca‡”es do Periodo (aMarcacoes), com³
	³o Calendario de Marca‡”es do Periodo (aTabCalend) e com    as³	
	³Trocas de Turno do Funcionario (aTurnos)					  ³	
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	( aMarcacoes := {} , aTabCalend := {} , aTurnos := {} )   
    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Importante: 												  ³
	³ O periodo fornecido abaixo para recuperar as marcacoes   cor³
	³ respondente ao periodo de apontamentoo Calendario de 	 Marca³	
	³ ‡”es do Periodo ( aTabCalend ) e com  as Trocas de Turno  do³	
	³ Funcionario ( aTurnos ) integral afim de criar o  calendario³	
	³ com as ordens correspondentes as gravadas nas marcacoes	  ³	
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !GetMarcacoes(	@aMarcacoes					,;	//Marcacoes dos Funcionarios
						@aTabCalend					,;	//Calendario de Marcacoes
						@aTabPadrao					,;	//Tabela Padrao
						@aTurnos					,;	//Turnos de Trabalho
						dPerCorrIni 				,;	//Periodo Inicial
						dPerCorrFim					,;	//Periodo Final
						SRA->RA_FILIAL				,;	//Filial
						SRA->RA_MAT					,;	//Matricula
						cTurno						,;	//Turno
						cSeq						,;	//Sequencia de Turno
						SRA->RA_CC					,;	//Centro de Custo
						IF(lImpAcum,"SPG","SP8")	,;	//Alias para Carga das Marcacoes
						.T.							,;	//Se carrega Recno em aMarcacoes
						.T.							,;	//Se considera Apenas Ordenadas
					    .T.    						,;	//Se Verifica as Folgas Automaticas
					  	.F.    			 			 ;	//Se Grava Evento de Folga Automatica Periodo Anterior
				 )
		Loop
	EndIF					 

	nDias := ( dMarcFim - dMarcIni )
	For nDia := 0 To nDias
		//-- Reinicializa Variaveis.
		dData  := dMarcIni + nDia		
		//-- o Array aTabcalend ‚ setado para a 1a Entrada do dia em quest„o.
		IF ( nTab := aScan(aTabCalend, {|x| x[1] == dData .And. x[4] == '1E' }) ) == 0.00
			Loop
		EndIF
        
		//-- o Array aMarcacoes ‚ setado para a 1a Marca‡„o do dia em quest„o.
		cOrdem  	:= aTabCalend[nTab, CALEND_POS_ORDEM]
		If ( ( nPosMarc 	:= aScan( aMarcacoes, { |x| x[ AMARC_ORDEM  ] == cOrdem } ) ) > 0 )
			For nMarc:= nPosMarc To Len(aMarcacoes)
			    If aMarcacoes[nMarc, AMARC_ORDEM ] ==  cOrdem 
			    	If nLimpa == 1 .or.  aMarcacoes[nMarc, AMARC_FLAG ] == cTipo
    		            //--Se portaria estiver ativada deleta apenas registros que nao forem originais
	        	        //--Registros anteriores a portaria, com campo TIPOREG vazio, não serao excluidos
			    		If lPort1510
			    			If aMarcacoes[nMarc , AMARC_TIPOREG] == "O" .or. Empty(aMarcacoes[nMarc , AMARC_TIPOREG])
			    				Loop
			    			EndIf
			    		EndIf
				        (cAlias)->(dbGoto( aMarcacoes[nMarc, AMARC_RECNO ] ) )
						RecLock( cAlias , .F. ) 
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
						( cAlias )->( MsUnLock() ) 
					Endif
			    Else
			       Exit
			    Endif   
			Next nMarc
		Endif
    Next nDia
Next nX
Return	

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Monta_Per³ Autor ³Equipe Advanced RH     ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function Monta_Per( dDataIni , dDataFim , cFil , cMat , dIniAtu , dFimAtu )

Local aPeriodos := {}
Local cFilSPO	:= xFilial( "SPO" , cFil )
Local dAdmissa	:= SRA->RA_ADMISSA
Local dPerIni   := Ctod("//")
Local dPerFim   := Ctod("//")
Local cPaponta	:= SuperGetMv("MV_PAPONTA", , "")
Local nDiasPer	:= 0

SPO->( dbSetOrder( 1 ) )
SPO->( dbSeek( cFilSPO , .F. ) )

While SPO->( !Eof() .and. PO_FILIAL == cFilSPO )
                       
    dPerIni := SPO->PO_DATAINI
    dPerFim := SPO->PO_DATAFIM  

    //-- Filtra Periodos de Apontamento a Serem considerados em funcao do Periodo Solicitado
    IF dPerFim < dDataIni .OR. dPerIni > dDataFim                                                      
		SPO->( dbSkip() )  
		Loop  
    Endif

    //-- Somente Considera Periodos de Apontamentos com Data Final Superior a Data de Admissao
    IF ( dPerFim >= dAdmissa )
       aAdd( aPeriodos , { dPerIni , dPerFim , Max( dPerIni , dDataIni ) , Min( dPerFim , dDataFim ) } )
	Else
		Exit
	EndIF

	SPO->( dbSkip() )

End While

IF ( aScan( aPeriodos , { |x| x[1] == dIniAtu .and. x[2] == dFimAtu } ) == 0.00 )
	dPerIni := dIniAtu
	dPerFim	:= dFimAtu 
	IF !(dPerFim < dDataIni .OR. dPerIni > dDataFim)
		IF ( dPerFim >= dAdmissa )
			aAdd(aPeriodos, { dPerIni, dPerFim, Max(dPerIni,dDataIni), Min(dPerFim,dDataFim) } )
		EndIF
	ElseIf dDataIni > dPerFim // Período futuro
		If Len(cPaponta) > 5
			nDiasPer := DateDiffDay(dPerIni, dPerFim)
			dPerIni := DaySum(dPerFim, 1) // O próximo período começa no dia seguinte ao termino do período atual
			dPerFim := DaySum(dPerIni, nDiasPer) // O período seguite terá a mesma quantidade de dias do período atual
		Else
			dPerIni := MonthSum(dPerIni, 1)
			dPerFim := MonthSum(dPerFim, 1)
		EndIf
		
		aAdd(aPeriodos, { dPerIni, dPerFim, Max(dPerIni, dDataIni), Min(dPerFim, dDataFim)})
    Endif
EndIF

Return( aPeriodos )
