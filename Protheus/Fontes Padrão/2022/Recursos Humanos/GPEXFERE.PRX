#INCLUDE "PROTHEUS.CH"
#INCLUDE "GPEXFERE.CH"

Static lGpAltCFe 	:= ExistBlock("GPALTCFE")

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa    ³GPEXFERE|Autor ³Microsiga                | Data ³  12/14/05    		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Desc.       ³Funcoes comuns aos programas de Ferias e Rescisao		       		|±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso         ³GPEM030 - GPEM040                                              		|±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³             ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.              		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³  BOPS/FNC      ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³25/02/13³M12RH01         ³Unificacao das Folhas. Projeto Versao 12  ³±± 
±±³	           ³	    ³REQ.: 06_01	 ³                                          ³±±
±±³M. Silveira ³03/12/15³TTTQYK          ³Atribuicao da nDiasDed na fValPerFerias().³±±
±±³Allyson M.  ³08/12/15³TTQKD1          ³Ajuste em Calc_Fer() p/ verificar se o    ³±±
±±³            ³        ³        		 ³sab/dom. foi pago no calculo de rescisao  ³±±
±±³Allyson M   ³19/01/16³TUFRM8          ³Ajuste em fImpMed() p/ calcular o salario ³±±
±±³	           ³	    ³            	 ³incorporado no momento da impressao do    ³±±
±±³	           ³	    ³            	 ³relatorio pois as variaveis de salario    ³±±
±±³	           ³	    ³            	 ³estao com o valor sem incorporacao	    ³±±
±±³Matheus M.  ³17/10/16³TWG365          ³Ajuste para não gerar error.log quando a  ³±±
±±³	           ³	    ³            	 ³variável dDtAux2 estiver vazia.		    ³±±
±±³Raquel Hager³28/12/16³MRH-3812  	     ³Realizado ajuste para buscar id correto   ³±±
±±³            ³        ³                ³para Estagiários na função Calc_Fer.      ³±±
±±|Claudinei S.|28/04/2017|MRH-482       |Implementado o cálculo para funcionários  |±±
±±|            |          |              |com regime parcial.                       |±±
±±³Gabriel A.  ³09/11/17³DRHPAG-8377     ³Alteração realizada apenas para gerar     ³±±
±±³            ³        ³                ³patch para versão 12.1.07.                ³±±
±±³Oscar G.    ³16/03/21³DMINA-11334     ³En Fun. CALC_FER se actualiza tabla de    ³±±
±±³            ³        ³                ³vacaciones consultada. COL                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³fVerMedia  ³ Autor ³ Marinaldo de Jesus   ³ Data ³31/07/2000 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Emissao do Demonstrativo de Media							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³                              							     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cTipo -> "R" = Rescisao , "F" = Ferias						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL 														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³             										         ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
*/
Function fVerMedia(cTipo)

Local aOrd		:= {}               			//Ordem do Relatorio

Local cDesc1	:= OemToAnsi(STR0001)			//"Demonstrativo de M‚dias"
Local cDesc2	:= OemToAnsi(STR0002)			//"Ser  impresso de acordo com os parametros solicitados pelo"
Local cDesc3	:= OemToAnsi(STR0003)			//"usu rio."
Local cString	:= "SRA"						//alias do arquivo principal (Base)
Local cMens   	:= ""
Local nSvRecno	:= SRA->( Recno() )			//Salva posicao do SRA para Restaurar apos SetPrint()
Local lPergRH	:= ( GetMvRH( "MV_PERGRH" ) == "S" )
Local lHistMed	:= AliasInDic("RJK") .And. AliasInDic("SRP") .And. FindFunction("fVerHistMed")
Local lTemTransf:= .F.

Local dRef 
Local cPerMed	:= ""
Local cSEmMed	:= ""
Local cRotMed	:= ""

If ( cTipo == "R" )
	dRef := M->RG_DTGERAR						//Adiciona a Data de Referencia ao Cabecalho do Relatorio
	cPerMed	:= M->RG_PERIODO
	cSEmMed	:= M->RG_SEMANA
	cRotMed	:= M->RG_ROTEIR
ElseIf ( cTipo == "F" )
	dRef := M->RH_DATAINI					//Adiciona a Data de Referencia ao Cabecalho do Relatorio
	cPerMed	:= M->RH_PERIODO
	cSEmMed	:= M->RH_NPAGTO
	cRotMed	:= M->RH_ROTEIR
EndIf

If lHistMed .And. fTemHMed(dRef, Nil, cPerMed, cSEmMed, cRotMed, @lTemTransf, cTipo)
	fVerHistMed(cTipo, dRef, lTemTransf)
	return
EndIf
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define Variaveis Private(Basicas)							  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Private cPerg	 	:= If( lPergRH, "GPR080", "" )
Private lImpPgto 	:= .T.
Private aReturn		:= {OemToAnsi(STR0004), 1,OemToAnsi(STR0005), 2, 2, 1, "",1 }	//"Zebrado"###"Administra‡„o"
Private nomeprog	:="fVerMedia"
Private aLinha		:= {}
Private nLastKey	:= 0

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define Variaveis Private(Programa)						 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Private aInfo	:=	{}
Private aFolBas[4] , aAdiBas[4] , aFerBas[4] , a13Bas[4]
Private aFolIR[4]  , aAdiIR[4]	, aFerIR[4]  , a13IR[4]

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Variaveis Utilizadas na funcao IMPR 					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Private TITULO		:= OemToAnsi(STR0006)	//"DEMONSTRATIVO DE MEDIAS"
Private AT_PRG		:= nomeprog
Private wCabec0		:= 1
Private wCabec1		:= STR0007	//"DATA BASE: "
Private CONTFL		:= 1
Private LI			:= 0
Private nTamanho	:= "M"

cMens := OemToAnsi(STR0019)+chr(13) //"Deseja imprimir a linha de médias de"
cMens += OemToAnsi(STR0020)+chr(13) //"pagamento?"

lImpPgto := MsgYesNo(cMens,STR0009)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Envia controle para a funcao SETPRINT						   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
wnrel := "DEM_MED"										//Nome DEFAULT do relatorio em Disco
wnrel := SetPrint(cString,wnrel,cPerg,@Titulo,cDesc1,cDesc2,cDesc3,.F.,aOrd,,nTamanho,,.F.)

SRA->( dbGoto( nSvRecno ) )								//Reposiciona o Ponteiro do SRA

If ( cTipo == "R" )
	lMovMensal	:= lMesAtu	:= ( M->RG_MEDATU == "S" )	//Considera Mes Atual
	wCabec1		+= DtoC(dDataDem)						//Adiciona a Data de Referencia ao Cabecalho do Relatorio
ElseIf ( cTipo == "F" )
	lMovMensal	:= lMesAtu	:= ( M->RH_MEDATU == "S" )	//Considera Mes Atual
	wCabec1		+= DtoC(M->RH_DBASEAT)					//Adiciona a Data de Referencia ao Cabecalho do Relatorio
EndIf

Begin Sequence

	If ( nLastKey == 27 )
		Break
	EndIf

	SetDEFAULT(aReturn, cString)

	If ( nLastKey == 27 )
		Break
	EndIf
	
	//Caso deva ser impresso os parametros no relatorio, seta os valores das perguntas
	//com as informacoes do funcionario. 
	If lPergRH
		MV_PAR01 := If( cTipo == "R", M->RG_DATADEM, M->RH_DBASEAT )	//Data base
		MV_PAR02 := MV_PAR03 := SRA->RA_FILIAL							//Filial de/ate
		MV_PAR04 := MV_PAR05 := SRA->RA_CC								//C.C. de/ate
		MV_PAR06 := MV_PAR07 := SRA->RA_MAT								//Mat. de/ate
		MV_PAR08 := MV_PAR09 := SRA->RA_NOME							//Nome de/ate
		MV_PAR10 := If( cTipo == "R", 5, 1 )							//Tipo de Media (5-Todos; 1-Ferias)
		MV_PAR11 := SRA->RA_SITFOLH										//Situacoes a impr.
		MV_PAR12 := SRA->RA_CATFUNC										//Categorias a impr.
		MV_PAR13 := If( lMesAtu, 1, 3 )							   		//Considera mes atual (1-Sim; 3-Nao)
		MV_PAR14 := If( lImpPgto, 1, 2 )								//Imprime 'Media Pagto' (1-Sim; 2-Nao)
	EndIf

	RptStatus( {|lEnd| fImpMed(@lEnd, wnRel, cString, cTipo)}, TITULO )

End Sequence

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³ fImpMed  ³ Autor ³ Marinaldo de Jesus 	  ³ Data ³28/07/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Demonstrativo de Medias								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe e ³ fImpMed( Lend, wnRel , cString )       				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ Lend 	   - A‡Æo do Codelock							    ³
³		   ³ wnRel	   - T¡tulo do relat¢rio						    ³
³          ³ cString	- Mensagem										³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³ Generico 												    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fImpMed( Lend , WnRel , cString, cTipo )

Local nSalMes  := If(Type("nSMesMed") != "U", nSMesMed, SalMes)
Local nSalDia  := If(Type("nSDiaMed") != "U", nSDiaMed, SalDia)
Local nSalHora := If(Type("nSHorMed") != "U", nSHorMed, SalHora)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Imprime Demonstrativo	fImpr_Med() em GPER080.PRX		      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If ExistBlock("GPM04MED") // Ponto para chamada de funcao especifica para impressao
	Execblock("GPM04MED",.F.,.F.)
Else
	fImpr_Med(nSalMes,nSalDia,nSalHora,cTipo,lImpPgto)
EndIf

Set Device To Screen

If aReturn[5] = 1
	Set Printer To
	Commit
	Ourspool(wnrel)
EndIf

MS_FLUSH()

Return( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpePerValid³Autor³Mauricio T. Takakura      ³Data³27/01/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Validar o Periodo                             				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Consulta Padrao (SXB)				                  	   	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function GpePerValid( 	nTipo		,;	// 1 - Campo RCH_PER e 2 - RCH_NUMPAG e 3 - Localizar em Alteracao e 4 - RCH_ROTEIRO
					 	dDtFech		,;	// Data de Fechamento
					 	dRch_DtIni	,;	// Data Inicio do Periodo
					 	dRch_DtFim 	,;	// Data Final do Periodo
					 	cRoteiro	 ;	// Roteiro a Pesquisar
					)

Local cBlankRot
Local cOldAlias := Alias()
Local cFilRCH	:= xFilial("RCH")
Local cMsg

Local lRet 		:= .T.
Local lOk		:= .F.
Local lRotEmpty := .F.

DEFAULT dDtFech	 := CtoD("//")
DEFAULT cRoteiro := cRot          

//--Preenche as variaves conforme o tipo do parametro para quando não existir ou estiver vazia 
If nTipo = 1 .And. (Type("cPeriodo") = "U" .Or. Empty(cPeriodo) )
	cPeriodo := &( ReadVar() )
ElseIf nTipo = 2 .And. (Type("cNumPag") = "U" .Or. Empty(cNumPag) .Or. cNumPag <> &( ReadVar() ) )
	cNumPag := &( ReadVar() )
EndIf	

If Type("cProcesso") = "U" .Or. Empty(cProcesso)
	cProcesso := SRA->RA_PROCES
EndIf	

Begin Sequence

	DbSelectArea("RCH")
	If ( nTipo == 1 )
		RCH->( dbsetOrder( Retorder( "RCH" , "RCH_FILIAL+RCH_PROCES+RCH_PER+DTOS(RCH_DTFECH)" ) ) )
		RCH->( dbSeek( cFilRCH + cProcesso + cPeriodo + DtoS(dDtFech), .F. ) )
		If !Empty(cRoteiro)
			While RCH->( !Eof() .and. (( RCH_FILIAL + RCH_PROCES + RCH_PER + DTOS(RCH_DTFECH) ) == ( cFilRCH + cProcesso + cPeriodo + DTOS( dDtFech ) )))
				If RCH->(RCH_ROTEIR) == cRoteiro .Or. RCH->(RCH_ROTEIR) == Space(3)
					lOk := .T.
					Exit
				EndIf
				RCH->( dbSkip() )
			EndDo
			If !lOk 
				RCH->(DbGoBottom())
				RCH->(dbSkip())
			EndIf
		EndIf
	ElseIf ( nTipo == 2 ) .Or. ( nTipo == 3 )
		RCH->( DbSetOrder( Retorder( "RCH", "RCH_FILIAL+RCH_PROCES+RCH_PER+RCH_NUMPAG+RCH_ROTEIR" ) ) )
		RCH->( dbSeek( cFilRCH + cProcesso + cPeriodo + cNumPag + cRoteiro , .F. ) )
		
		// O usuario podera optar por um periodo com roteiro em branco //
		If RCH->( Eof() )
			lRotEmpty := .T.
			RCH->( dbSeek( cFilRCH + cProcesso + cPeriodo + cNumPag + Space(3) , .F. ) )
		EndIf
		While RCH->( !Eof() .and. (( RCH_FILIAL + RCH_PROCES + RCH_PER + RCH_NUMPAG ) == ( cFilRCH + cProcesso + cPeriodo + cNumPag )))
			If Empty(RCH->RCH_DtFech) .And. ( ( lRotEmpty .And. Empty(RCH->RCH_ROTEIR)) .Or. ( !lRotEmpty .And. RCH->RCH_ROTEIR == cRoteiro ))
				Exit
			EndIf
			RCH->( dbSkip() )
		EndDo
		If RCH->(;
					!Empty( RCH_DTFECH );
					.Or.;
					(;
						( RCH_FILIAL + RCH_PROCES + RCH_PER + RCH_NUMPAG + If( !lRotEmpty, RCH_ROTEIR, "") );
						!=;
						( cFilRCH + cProcesso + cPeriodo + cNumPag + If( !lRotEmpty, cRoteiro, ""));
					);
				)
			RCH->(DbGoBottom())
			RCH->(dbSkip())
		EndIf
	ElseIf ( nTipo == 5 )
		RCH->( DbSetOrder( RetOrder( "RCH", "RCH_FILIAL+RCH_PROCES+RCH_ROTEIR+DTOS(RCH_DTFECH)+RCH_PER+RCH_NUMPAG") ) )
		RCH->( DbSeek( cFilRCH + cProcesso + cRoteiro + DtoS( CtoD( "//") ), .F. ) )
		If RCH->( Eof() )
			cBlankRot := Space( GetSx3Cache( "RCH_ROTEIR", "X3_TAMANHO" ) )
			RCH->( DbSeek( cFilRCH + cProcesso + cBlankRot + DtoS( CtoD( "//") ), .F. ) )
		EndIf
	EndIf
	If RCH->( Eof() )
		If nTipo == 2 
			RCH->( DbSetOrder( Retorder( "RCH", "RCH_FILIAL+RCH_PROCES+RCH_PER+RCH_NUMPAG+RCH_ROTEIR" ) ) )
			If !RCH->( dbSeek( cFilRCH + cProcesso + cPeriodo + cNumPag + cRoteiro) )
				cMsg := OemToAnsi(STR0010)	// "No. Pagamento nao Cadastrado para este Periodo!"
				MsgInfo( cMsg, OemToAnsi(STR0009) ) // "Atencao"  
				lRet := .F.
			Else
				lRet := .T.				
			EndIf
		Else  
			lRet := .F.
			If nTipo == 1 .Or. nTipo == 3
				cMsg := OemToAnsi(STR0008)	// "Periodo nao Cadastrado!"
				MsgInfo( cMsg, OemToAnsi(STR0009) ) // "Atencao"
			Else
				cMsg := OemToAnsi(STR0010)	// "No. Pagamento nao Cadastrado para este Periodo!"
				MsgInfo( cMsg, OemToAnsi(STR0009) ) // "Atencao"
			EndIf
		EndIf	
	Else
		If nTipo == 1
			cNumPag := RCH->( RCH_NumPag )
		ElseIf nTipo == 5
			cPeriodo := RCH->( RCH_PER )
			cNumPag  := RCH->( RCH_NumPag )
		EndIf
	 	dRch_DtIni := RCH->( RCH_DtIni )
	 	dRch_DtFim := RCH->( RCH_DtFim )
	EndIf

End Sequence

DbSelectArea(cOldAlias)

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³GpTipoRot ³ Autor ³ Marinaldo de Jesus 	  ³ Data ³28/07/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Filtro para o Tipo de Roteiro							    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe e ³ GpTipoRot(   ) 					      				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ Variavel Private _cTpRot = "1" - Folha						³
³          ³                          = "2 - Adto					    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³ Generico 												    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GpTipoRot()

Local cFiltroSry	:= "(SRY->RY_FILIAL = '" + xFilial("SRY") + "')"

If Type("_cTpRot") # "U" .And. Type("_cTpRot") = "C"
	cFiltroSRY += " .and. (SRY->RY_TIPO = '" +_cTpRot + "')"
EndIf

cFiltroSRY := "@#" + cFiltroSRY+ "@#"

Return(cFiltroSRY)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Calc_Fer  ³ Autor ³ Emerson Rosa de Souza ³ Data ³18/02/00  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calcula os dias de ferias vencidas e a vencer, e verifica se³±±
±±³          ³houve afastamento para trocar o periodo aquisitivo 		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Calc_Fer()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aPerFerias -Retorna Array com Periodos de ferias           |±±
±±³          ³ dDtLimite  -Data atual do sistema ou fim do periodo        |±±
±±³          ³ nDiasFeVe  -Dias de ferias vencidas a ser atualizados      |±±
±±³          ³ nDiasFeAv  -Dias de ferias a vencer a ser atualizados      |±±
±±³          ³ nTDiasAfa  -Total de dias de afastamento do periodo        |±±
±±³          ³ cTipAfa    -Tipos de afastamento que devem ser tratados    |±±
±±³          ³ lDiasAfAcum-Retorna o dias afastado em todos os periodos.  |±±
±±³          ³ lTodosPer  -Indica se deve carregar Todos Periodos         |±±
±±³          ³ dDtBasFer  -Indica periodo inicial p/montagem do aPerFerias|±±
±±³          ³ dDtIniPer  -Data inicial do periodo                        |±±
±±³          ³ lAvisoInd  -Indica se o aviso previo e indenizado          |±±
±±³          ³ dRetFimOP  -Data de retorno do afastamento.		          |±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Calc_Fer(aPerFerias,dDtLimite,nDiasFeVe,nDiasFeAv,nTDiasAfa,cTipAfa,lDiasAfAcum,lTodosPer,dDtBasFer,dDtIniPer,lAvisoInd,dRetFimOP)
Local aAreaSRF      := SRF->( GetArea() )
Local aPerFerAux	:= {}
Local aDiasVen		:= {}
Local aDiasAng		:= {}
Local aDiasEqu		:= {}
Local aSvPerFer    	:= {}       // Copia aPerFerias
Local cCodFer		:= ""
Local cCodTipAfa	:= ""
Local cDescTipAfa	:= ""
Local cAliasQry		:= "SRF"
Local dFimDtBas		:= CtoD("")
Local dProxMes		:= CtoD("")
Local dDataAux		:= CtoD("")
Local dFimAux       := CtoD("")
Local dIniAux		:= CtoD("")
Local dDataPer		:= If(!Empty(dDtLimite),fCalcFimAq(dDtLimite),fCalcFimAq(dDataBase))	//# Data Limite do Periodo a ser considerado
Local lLoop			:= .T.
Local lAdmissa		:= .F.
Local lAnoAdm		:= .F.
Local lVencPer		:= .T.
Local lUltPresc		:= .F.
Local nDiaBom		:= 0
Local nDVencAux		:= 0
Local nDiasBase		:= 12
Local nPos			:= 0
Local nx			:= 0
Local nDiasBon		:= 0
Local nDiasBoVe		:= 0
Local nDiasBoAv		:= 0
Local nDiasAux      := 0
Local nFatorFe		:= 0
Local nFatorBo		:= 0
Local nDFalFer		:= 0
Local nDFalBon		:= 0 
Local nDiasVArg		:= 0
Local nToDiaPer		:= 0
Local nPosTbFer	   	:= 0 
Local nTempoParc   	:= 0
Local nCpSabDom		:= 0
Local lGPEM070      := IsInCallStack("GPEM070") .or. IsInCallStack("GPM070GRD")
Local cCompl		:= ""
Local nDiasFer  	:=0
Local lFimOk		:= .T.

SetMnemonicos(xFilial("RCA"),NIL,.T.,"P_REGPARCI")

P_REGPARCI	:= If( Type("P_REGPARCI") == "U", .F. , P_REGPARCI)

DEFAULT aPerFerias	:= {}
DEFAULT cTipAfa		:= "F"
DEFAULT dDtBasFer   := CtoD("")
DEFAULT dDtIniPer   := CtoD("")
DEFAULT dRetFimOP	:= CtoD("")
DEFAULT lAvisoInd   := .F.
DEFAULT lDiasAfAcum	:= .F.						// Retorna total de dias afastados acumulado
DEFAULT lTodosPer   := .F.
DEFAULT nTDiasAfa	:= 0 						// Dias de afastamento

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Varia privates utilizadas no ponto de entrada "GPALTCFE"     |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private aAfast 		:= {}
Private dDtAux1		
Private dDtAux2
Private nTotDiasPer := 0
Private nFator 		:= 0
Private nTDiasFe	:= 0

If lAvisoInd .and. Len(aPerFerias) > 0
	aSvPerFer := aClone(aPerFerias)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Variavel private para tratamento de feiras por ano civil.    |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//--Quando a Variavel existir nao sera necesario carregar novamente
//--Foi criada porque calc. de ProvisÆo chamar a todo Funcionario. 
If Type("lPerFeAc") == "U" .Or. lPerFeAc = Nil
	Private lPerFeAc := .F.
EndIf	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Carrega tabela para apuracao dos dias de ferias - aTabFer    |
//| 1-Meses Periodo    2-Nro Periodos   3-Dias do Mes    4-Fator |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Verifica a existecia do array aTabFer p/ o calculo de ferias |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("aTabFer") # "A" .Or. Len(aTabFer) == 0 .Or. (cPaisLoc == "PER" .And. Type("aTabFer[5]") == "U")
	aTabFer := {}
	aTabFer2 := {}
	If cPaisLoc == "PER"
		fRetTab(@aTabFer,"S008",,,fCalcFimAq(Iif(dDataRef==Nil,dDataBase,dDataRef)),)
	Else
		fTab_Fer(@aTabFer,,@aTabFer2)
	EndIf
EndIf

nDiasBase := aTabFer[1]

//Se as horas semanais forem inferiores a 26, e o Mnemonico P_REGPARCI estiver ativo,
//utiliza os dias de férias da tabela S065 - Tabela de férias tempo parcial (Artigo 130A da CLT)
If cPaisLoc == "BRA"
	nTempoParc := SRA->RA_HRSEMAN
	If nTempoParc <= 25 .And. nTempoParc  > 0 .And. Len(aTabFer2) > 0 .And. P_REGPARCI
		nPosTbFer := Ascan(aTabFer2, { |X|  nTempoParc <= X[6] .And. nTempoParc > X[5] })
		If nPosTbFer > 0
			aTabFer := aClone(aTabFer2[nPosTbFer])
		Endif
	Endif
EndIf

If cPaisLoc == "PTG"
	nFator := 22/12

ElseIf cPaisLoc == "ARG"
	nFator := FatorFerArg()

ElseIf cPaisLoc == "COL"
	nDiasFer := If(fTabela("S013", 1, 8) <> Nil, fTabela("S013", 1, 8), 15)
	nFator := nDiasFer/12

ElseIf cPaisLoc == "PER"
	nPos:= 0
		nPos := fPosTab("S008",SRA->RA_GPOVAC, "=", 4)
		IF nPos>0

			If SRA->RA_MEIOPER == "1" //# Part Time
				nDiasFer := fTabela("S008",nPos,7) //aTabFer[4]
			Else
				nDiasFer := fTabela("S008",nPos,6) //aTabFer[3]
			EndIf		
				
		EndIF
	nFator := nDiasFer/12

ElseIf cPaisLoc == "BOL" 
    DDATAF := If(CTIPOROT == '4' , DDATADEM, DDATAATE )	
    nAnosTrab := (( DDATAF - SRA->RA_ADMISSA) + 1) / 365
    NX := FPOSTAB("S010", SRA->RA_PROCES, "=", 4 , NANOSTRAB , "<=" , 6 )
    nDiasFer:= If(NX > 0,  FTABELA("S010" , NX , 7 ) ,  0 )  
	nFator := nDiasFer/12
ElseIf !( cPaisLoc $ "PAR|VEN" )
	nFator := aTabFer[4]
ElseIf cPaisLoc == "PAR"
	nDiasFer := If(fTabela("S013", 1, 8) <> Nil, fTabela("S013", 1, 8), 15)
	If Year(dDataBase) - Year(SRA->RA_NASC) <= 17  .Or. ;
		(Year(dDataBase) - Year(SRA->RA_NASC) == 18 .And.;
	 	Substr(Dtos(dDataBase),5,4) <=Substr(Dtos(SRA->RA_NASC),5,4))
		nFator	:=	2.5
	Else		
		nAnos	:= (Year(dDataBase) - Year(SRA->RA_ADMISSA)) - If(Substr(Dtos(dDataBase),5,4) <= Substr(Dtos(SRA->RA_ADMISSA),5,4),1,0 )
		Do Case
			Case nAnos > 10
				nFator	:=	2.5
			Case nAnos > 5 .And. nAnos <= 10
				nFator	:=	1.5
			Case nAnos <= 5
				nFator	:=	1
		EndCase					
	EndIf
ElseIf cPaisLoc == "CHI"
	nAnosAnt := If(Int(SRA->RA_MESESAN/12) > 10,10,Int(SRA->RA_MESESAN/12))
	nFator	:=	1.25
	nAnos	:= (Year(dDataBase) - Year(SRA->RA_ADMISSA)) - If(Substr(Dtos(dDataBase),5,4) <= Substr(Dtos(SRA->RA_ADMISSA),5,4),1,0 )
	nAnos += nAnosAnt
	If nAnos >= 10
		nFator	:=	(15+Int((nAnos-10)/3)) / nDiasBase
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Carrega os periodos ja gravados no Controle de Dias de Direito - SRF |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aPerFerias) == 0
    If SRA->RA_CATFUNC $ "E*G"   // Estagiario Mensalista/Horista
		cCodFer	:= FGETCODFOL( "0891" )
	Else 
		cCodFer	:= FGETCODFOL( "0072" )
	EndIf
	DbSelectarea("SRF")
	DbSetOrder(2)
			
	If (cAliasQry)->( dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+cCodFer) )			
		While !(cAliasQry)->(Eof()) .And. SRA->RA_FILIAL+SRA->RA_MAT+cCodFer == (cAliasQry)->RF_FILIAL+(cAliasQry)->RF_MAT+(cAliasQry)->RF_PD
			If lTodosPer .or. ( !lTodosPer .and. (cAliasQry)->RF_STATUS $ " 1" .And. (cAliasQry)->RF_DATABAS >= dDtBasFer .and. if( !(cPaisLoc $ "PER") .OR. !IsInCallStack("GPEM030") , (cAliasQry)->RF_DATAFIM <= dDataPer , .T.) )
				//-- Somente carregos os periodos de ferias, qualquer outro identificador sera desprezado.
				aAdd(aPerFerias,{	(cAliasQry)->RF_DATABAS	,;											// 01 - Inicio Database de Ferias
									If(Empty((cAliasQry)->RF_DATAFIM),fCalcFimAq((cAliasQry)->RF_DATABAS),(cAliasQry)->RF_DATAFIM),;  // 02 - Final Database de Ferias
									(cAliasQry)->RF_DFERVAT	,;											// 03 - Dias de ferias vencidas
									(cAliasQry)->RF_DFERAAT	,;											// 04 - Dias de ferias a vencer
									0.00			,;													// 05 - Dias totais de afastamento por periodo
									(cAliasQry)->RF_OBSERVA	,;											// 06 - Descricao do tipo de afastamento do periodo
									CtoD("")		,;													// 07 - Data de original de termino do p.aquisitivo quando houver prorrogacao do mesmo RWX
									If(Empty((cAliasQry)->RF_STATUS),"1",(cAliasQry)->RF_STATUS),;	// 08 - Status do periodo de ferias:  1-Ativo (Vencidos/A vencer)/2-Prescrito (Perdido)/3-Pago
									CtoD("")		,;													// 09 - Data de Inicio do Proximo periodo caso seja um periodo perdido.
									0				,;													// 10 - Quantidade dias de deducao para o direito apurado no periodo
									(cAliasQry)->RF_DVENPEN ,;     										// 11 - Dias Vencidos Pendentes
									(cAliasQry)->RF_IVENPEN ,;     										// 12 - Data Inicia Vencido Pendente
									(cAliasQry)->RF_FVENPEN ,;											// 13 - Data Inicia Vencido Pendente
									(cAliasQry)->RF_DFERANT ,;     										// 14 - Dias de Ferias Antecipadas
									(cAliasQry)->RF_DFALVAT ,;     										// 15 - Dias de Faltas Vencidas
									(cAliasQry)->RF_DFALAAT ,;     										// 16 - Dias de Faltas a Vencer
									If(cPaisLoc$"VEN|EQU",(cAliasQry)->RF_DBONVAT,NIL),; 				// 17 - Dias de bono vencido
									If(cPaisLoc$"VEN|EQU",(cAliasQry)->RF_DBONAAT,NIL),; 				// 18 - Dias de bono a Vencer
									0				,;													// 19 - Total de dias de ferias
									0				,;													// 20 - Total de dias de bonificacao
									0				,;													// 21 - Dias de Faltas vencidas bonificacao
									0				,;													// 22 - Dias de ¦Faltas a Vencer bonificacao		
									0				,;													// 23 - Dias de ausencia convertidos em ferias
									0				,;      											// 24 - Total de Dias de Ferias do Periodo
									(cAliasQry)->RF_DIASANT ,;      									// 25 - Dias Gozados Vencidos
									(cAliasQry)->RF_DIASANT	,;	    									// 26 - Dias Gozados a Vencer 
									0               ,;      											// 27 - Dias Subsid. Vencidos
									0               ,;   												// 28 - Dias Subsid. a Vencer
									0				,; 													// 29 - Dias de Pagto. Minimo na Adm/Dem (cpo. RF_PAGOFER desabilitado 08/2012)
									(cAliasQry)->( RECNO() ),;											// 30 - Recno do aquivo
									Iif(Type("SRF->RF_FERPAGA")<>"U",  (cAliasQry)->RF_FERPAGA, 0) ,;	// 31 - Dias pagos em R$ na folha
									(cAliasQry)->RF_DATAATU,;											// 32 - Data de atualizacao
									0                ;                                                  // 33 - Dias de suspensão do período
									})

			ElseIf (cAliasQry)->RF_STATUS == "2" .Or. (cTipoRot == "4" .And. (cAliasQry)->RF_DFERANT > 0 .And. (cAliasQry)->RF_DATABAS > dDtLimite)
				dIniAux := (cAliasQry)->RF_DATABAS
				dFimAux := (cAliasQry)->RF_DATAFIM		
				lUltPresc := .T.
			ElseIf (cAliasQry)->RF_STATUS == "3" .and. (cAliasQry)->RF_DATABAS > dFimAux
				dIniAux := (cAliasQry)->RF_DATAFIM + 1
				dFimAux	:= fCalcFimAq(dIniAux)	
			EndIf
			(cAliasQry)->(dbskip())
		EndDo
	EndIf

EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Verificar os periodos gravados no SRF e define a data base de  |
//| de ferias do periodo aquisitivo mais antigo aberto.            |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aPerFerias) > 0
	If Empty(dDtBasFer)
		nPos		:= Ascan(aPerFerias,{ |X| X[8] == "1" })
		nPos		:= If(nPos == 0,Len(aPerFerias),nPos)
		dDtBasFer	:= aPerFerias[nPos,1]
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Valida os periodos de ferias encontrados no SRF                |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	fValPerFerias(dDtLimite,dDtBasFer,@aPerFerias,@nTDiasAfa,cTipAfa,lDiasAfAcum,@dRetFimOP,@cCodTipAfa,@cDescTipAfa,nDiasBase,@nDiasFeVe,@nDiasFeAv,@lFimOk,@nDiasAux)

	//-- Calcula as datas do proximo periodo aquisitivo
	dIniAux		:= If(	Empty(aPerFerias[Len(aPerFerias),9]),;		//Se nao houve mudanca da data de inicio do periodo aquisitivo
						aPerFerias[Len(aPerFerias),2]+1,;
						aPerFerias[Len(aPerFerias),9];
						)
	dFimAux		:= fCalcFimAq(dIniAux)
ElseIf !(lUltPresc)
	//-- Caso cadastro SRF esteja em branco cria todos os periodos baseado na data de admissao do funcionario
	nPos		:= 1
	If cTipoRot <> "4" .and. cCompl <> "S" .and. !Empty(dDtLimite)
		dIniAux		:= If( Empty(dDtBasFer), SRA->RA_ADMISSA, Iif(IsInCallStack("Gpem120") .Or. IsInCallStack("Gpm120Thread"), dDtBasFer, Min(dDtLimite,dDtBasFer)) ) 
	Else
		dIniAux		:= dDtLimite
	EndIf
	dFimAux		:= fCalcFimAq(dIniAux)
	dDtBasFer	:= dIniAux
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Cria o periodo virtual caso seja mes de aniversario do periodo |
//| aquisitivo.                                                    |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( cTipoRot <> "4" .and. dIniAux - 1 <= dDtLimite .And. ( Empty(aPerFerias) .Or. !(aPerFerias[Len(aPerFerias),33] > 0 .And. !lFimOk) ) .And. (Empty(aPerFerias) .or. aPerFerias[Len(aPerFerias),8] <> '2' .or. !Empty(aPerFerias[Len(aPerFerias),9])));
 	.Or. ( cTipoRot == "4" .and. dIniAux <= dDtLimite )
	While dIniAux - 1 <= dDtLimite  //Usa data final do período anterior para o caso do periodo e data limite possuirem a mesma data.
		aAdd(aPerFerAux,{	dIniAux			,;	// 01
							dFimAux			,;	// 02
							0.00			,;	// 03
							0.00			,;	// 04
							0.00			,;	// 05
							""				,;	// 06
							CtoD("")		,;	// 07
							"1"				,;	// 08
							CtoD("")		,;	// 09
							0.00			,;	// 10
							0.00			,;	// 11
							CtoD("")		,;	// 12
							CtoD("")		,;	// 13
							0.00			,;	// 14
							0.00			,;	// 15
							0.00			,;	// 16
							0.00			,;	// 17
							0.00			,;	// 18
							0.00		    ,;	// 19
							0.00			,;	// 20
							0.00		    ,;	// 21
							0.00			,;	// 22
							0.00			,;	// 23
							0.00			,;	// 24   
							0.00			,;	// 25
							0.00			,;	// 26
							0.00			,;	// 27
							0.00			,;	// 28
							0.00			,;  // 29
							0.00			,;	// 30
							0.00			,;	// 31
							CtoD("")		,;	// 32
							0.00             ;  // 33
							})
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//| Valida os periodos de ferias virtuais.                         |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		fValPerFerias(dDtLimite,@dDtBasFer,@aPerFerAux,@nTDiasAfa,cTipAfa,lDiasAfAcum)
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//| Unifica os periodos do SRF e os periodos virtuais.             |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aeval(aPerFerAux, { |X| aAdd(aPerFerias,aClone(X)) } )
		aPerFerAux	:= {}
		dDataAux    := dIniAux
		dIniAux		:= If(Empty(aPerFerias[Len(aPerFerias),9]) .or. aPerFerias[Len(aPerFerias),9] == aPerFerias[Len(aPerFerias),1],aPerFerias[Len(aPerFerias),2] + 1,aPerFerias[Len(aPerFerias),9])
		dFimAux		:= fCalcFimAq(dIniAux)
		
		If dIniAux <= dDataAux
			Exit
		EndIf
		
		If cTipoRot == "4" .and. dIniAux > dDtLimite
			Exit
		EndIf
		
	EndDo
EndIf

If ExistBlock("CALCDFER")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Variaveis private utilizadas no ponto de entrada			 |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Private Tabdia
	Private dDataSis := dDtLimite
	Private Dtaux  	 := dDtBasFer
	Private FerVAtu  := 0
	Private FerAAtu  := 0
	If mod(year(dDtLimite),4) = 0
		Tabdia := "31*29*31*30*31*30*31*31*30*31*30*31"
	Else
		Tabdia := "31*28*31*30*31*30*31*31*30*31*30*31"
	EndIf

	ExecBlock("CALCDFER",.F.,.F.)
	nDiasFeVe := FerVAtu
	nDiasFeAv := FerAAtu
	//-- Atualizo os dias de ferias vencidas e a vencer
	//-- nPos e' a linha de aPerFerias que foi passada como database
	//-- para o ponto de entrada. Se nao existir o proximo periodo
	//-- atualizo os dias a vencer e vencidos no mesmo periodo.
	If nDiasFeAv > 0 .And. Len(aPerFerias) >= nPos+1
		aPerFerias[nPos+1,4]	:= nDiasFeAv
		aPerFerias[nPos,3]		:= nDiasFeve
	ElseIf nDiasFeve > 0
		aPerFerias[nPos,3]	:= nDiasFeVe + nDiasFeAv
		aPerFerias[nPos,4]	:= 0
	EndIf

	Return
Else                            
	For nx := 1 to Len(aPerFerias)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	   	//³ Calcula os dias de ferias vencidas e a vencer.   			 |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If aPerFerias[nx,8] == "1"	// Somente periodos abertos.
			nTDiasFe	:= 0  //dias de ferias (avos)
		    nDiasFeve	:= 0  //dias de ferias vencidas
			nDiasFeAv	:= 0  //dias de ferias a vencer
		    nDiasBove	:= 0
			nDiasBoAv	:= 0
			If cPaisLoc == "VEN"
				nDiasBon	:= 0
			    nDiasBoVe	:= 0
				nDiasBoAv	:= 0
				aDiasVen	:= {}
			EndIf
			If cPaisLoc == "ANG"
				aDiasAng	:= {}
			EndIf
			If cPaisLoc == "EQU"
				aDiasEqu	:= {}
			EndIf
			dDtAux1		:= dDtAux2 := aPerFerias[nx,1]
			dFimDtBas	:= aPerFerias[nX,2]
			dFimDtBas	:= Min( dFimDtBas, dDtLimite )
			
			If cPaisLoc == "ARG"						
				lLoop := !DiasFerArg(lPerFeAc,dDtAux1,dFimDtBas,@nTDiasFe)				
			EndIf
			
			If cPaisLoc == "VEN"
				If !(lLoop := DiasFerVen(dDtAux1,dFimDtBas,@aDiasVen,nX==Len(aPerFerias)))
					Return
				EndIf
			EndIf
			
			If cPaisLoc == "ANG"
				If DiasFerAng(dDtAux1,dFimDtBas,@aDiasAng,lAdmissa)
					lLoop := .F.
				EndIf
			EndIf

			If cPaisLoc == "EQU"
				If DiasFerEqu(dDtAux1,dFimDtBas,@aDiasEqu,dDtLimite)
					lLoop := .F.
				EndIf
			EndIf
			
			If cPaisLoc == "PER"
				lLoop:= .F.
				aPerFerias[nX][24]:= nDiasFer 
				If aPerFerias[nX][03] == 0
					aDiasPer:= {}                    
					DiasFerPer(dDtAux1,dFimDtBas,@aDiasPer)
				
					If !Empty(dDtIniPer) .And. dDtIniPer <= aPerFerias[nX][02] .And. dDtLimite >= aPerFerias[nX][02]
							
						//If dDtLimite >= aPerFerias[nX][02] //se o periodo aquisitivo fechou
	                    aPerFerias[nX,24] := aDiasPer[1]
						aPerFerias[nX,03] := aDiasPer[2] - aPerFerias[nX,14]
						aPerFerias[nX,04] := 0
						aPerFerias[nX,15] := aDiasPer[4]
						aPerFerias[nX,16] := aDiasPer[3]
					Else
						aPerFerias[nX,24] := aDiasPer[1]
						aPerFerias[nX,04] := aDiasPer[2]
						aPerFerias[nX,15] := aDiasPer[4]
						aPerFerias[nX,16] := aDiasPer[3]
					EndIf
						
				EndIf					 
			EndIf
			
			If lLoop
		        
		        If cPaisLoc == "VEN"
					nFatorFe	:= aDiasVen[1] / (DateDiffMonth(dDtAux1,If(nX = Len(aPerFerias),fCalcFimAq(dDtAux1),dFimDtBas))+If(Day(dDtAux1)=1,1,0))
					nFatorBo	:= aDiasVen[2] / (DateDiffMonth(dDtAux1,If(nX = Len(aPerFerias),fCalcFimAq(dDtAux1),dFimDtBas))+If(Day(dDtAux1)=1,1,0))
					nDFalFer	:= aDiasVen[3]
					nDFalBon	:= aDiasVen[4]
					aPerFerias[nx,19] := aDiasVen[1]
					aPerFerias[nx,20] := aDiasVen[2]
				EndIf               
				
				//# Verifica novamente o Fator do Ano
				If cPaisLoc == "ARG"
					If MesAno(CtoD("31/12/"+Str(Year(dDtAux1)))) > MesAno(dDtLimite)
						nFator := FatorFerArg(dDtLimite,,aPerFerias[nx,14])
					Else
						nFator := FatorFerArg(CtoD("31/12/"+Str(Year(dDtAux1))),,aPerFerias[nx,14])
					EndIf
					
					//# Grava o Total de Dias de Ferias do Periodo
					aPerFerias[nx,24] := nTotDiasPer
				EndIf

				//Se for rescisão e houve suspensão durante o período, soma os dias de suspensão no inicio do período aquisitivo para que conte os avos de férias corretamente.
				If cPaisLoc == "BRA" .and. cTipoRot == "4" .and. nX == Len(aPerFerias) .and. aPerFerias[nX,2] <> aPerFerias[nX,7] .and. aPerFerias[nX,33] > 0 .and. aPerFerias[nX,10] == 0
					dDtAux2 := aPerFerias[nX,1] + aPerFerias[nX,33]
					aPerFerias[nx,1] := dDtAux2
				EndIf
				
				While dDtAux2 < dFimDtBas .And. !Empty(dDtAux2)
					dProxMes := dDtAux2 + (f_UltDia(dDtAux2) - Day(dDtAux2) + 1)
					//quando passa pelo mês 02, o diabom passa a ser sempre 28/29 e aí conta os avos errados
					nDiaBom  := Min( iif(month(dDtAux2) == 3,Day(aPerFerias[nx,1]),Day(dDtAux2)), f_UltDia(dProxMes) )
					
					dDtAux2  := CtoD( StrZero(nDiaBom,2)+"/"+StrZero(Month(dProxMes),2)+"/"+StrZero(Year(dProxMes),4),"DDMMYY" )
					dDtAux2  := Min(dDtAux2, dFimDtBas)
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Ponto de entrada p/alterar a contagem do direito aos avos de |
					//³ acordo com necessidade do usario.(contar baseado em 14 dias) |
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cPaisLoc == "PTG"
						If Year(dDtAux2) == Year(SRA->RA_ADMISSA)
							If nTDiasFe < 20
								nTDiasFe += 2
							EndIf
						Else
							nTDiasFe += nFator
						EndIf
					ElseIf cPaisLoc == "ARG"
						nTDiasFe += nFator
					ElseIf cPaisLoc == "VEN"
						nTDiasFe	+= nFatorFe
						nDiasBon	+= nFatorBo
					ElseIf cPaisLoc == "CHI"
						If dDtAux2 - dDtAux1 + 1 >= If(Month(dDtAux1) <> 2,30,28) 
						   nTDiasFe += nFator
						Else
							If Type("cTipoRot") <> "U" .And. cTipoRot == "4"
								If f_UltDia(dDtAux1) == 31
									nDiaProp := -1
								ElseIf f_UltDia(dDtAux1) == 29
									nDiaProp := 1
								ElseIf f_UltDia(dDtAux1) == 28
									nDiaProp := 2
								Else
									nDiaProp := 0
								EndIf		
								nTDiasFe += nFator *((dDtAux2 - dDtAux1 + nDiaProp) /30 )
							Else
								If dDtAux2 - dDtAux1 + 1 >= 15
							   		nTDiasFe += nfator
							   	EndIf
							EndIf	
						EndIf
					ElseIf lGpAltCFe
						ExecBlock("GPALTCFE",.F.,.F.)
					Else
						nSabDom := 0
						If SRA->RA_DEMISSA == dDtAux2 .Or. dDataDem == dDtAux2
							If lGPEM070 .and. ( SRG->(Eof() .or. RG_FILIAL + RG_MAT + DtoS(RG_DATADEM) <> SRA->RA_FILIAL + SRA->RA_MAT + dToS( SRA->RA_DEMISSA )) )
								SRG->( dbSetOrder(3) )
								SRG->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + dToS( SRA->RA_DEMISSA ) ) )					
							EndIf
							
							nCpSabDom := If(cTipoRot = "4", M->RG_SABDOM , SRG->RG_SABDOM ) 
							If nCpSabDom == "1" //1=Sim;2=Nao
								nSabDom := If( DoW( dDtAux2 ) == 6, 2, 0 )
							EndIf
						EndIf

						If (dDtAux2 - dDtAux1 + 1 + nSabDom) >= 15
						   nTDiasFe += nfator
						EndIf
					EndIf
						
					dDtAux1 := dDtAux2
				EndDo 
				nTDiasFe := Round(nTDiasFe, 2)
			EndIf
			
			//Atualizacao dos dias de ferias vencidas e/ou proporcionais
			If 	cPaisLoc == "ANG" .AND. Len(aDiasAng) > 0
			
				If Type("cAnoMes") == "U"
					If Type("cAnoProc") # "U" .And. Type("cMesProc") # "U"
						cAnoMes := cAnoProc+cMesProc
					EndIf
				EndIf
				
				If Empty(cAnoMes) .And. Type("cMesAnoRef") # "U"
					cAnoMes := cMesAnoRef
				EndIf

				//Na admissao acima da data 15/01 o periodo vencera somente em julho do ano seguinte.
				//Caso o mnemonico P_FEACVEN esteja ativo esta regra nao e aplicada
				If Type("P_FEACVEN") == "U"
					P_FEACVEN := &( AllTrim(Posicione("RCA",1,xFilial("RCA")+"P_FEACVEN","RCA_CONTEU")) )
					P_FEACVEN := If( P_FEACVEN == Nil, .T., P_FEACVEN )
				EndIf
				
				If !P_FEACVEN
					If lAnoAdm := AnoMes(aPerFerias[nx,1]) == AnoMes(SRA->RA_ADMISSA) .And. MesDia(SRA->RA_ADMISSA) > "0115"
						lVencPer := cAnoMes >= CValToChar( Year(SRA->RA_ADMISSA)+1 ) + "07"
					Else
						lVencPer := .T.
					EndIf
				Else
					lVencPer := .T.
				EndIf
				
				//Antes do mes do vencimento atualiza os dias proporcionais
            	If cAnoMes >= AnoMes(aPerFerias[nx,1]) .and. cAnoMes < AnoMes(aPerFerias[nx,2])
					If Len( aDiasAng ) > 4
						aPerFerias[nx,4] := aDiasAng[5] - aPerFerias[nx][14]
						aPerFerias[nx,3] := 0
					EndIf

				//Se no vencimento a regra de admissao nao for aplicavel, o periodo sera marcado como vencido
            	ElseIf ( cAnoMes >= AnoMes(aPerFerias[nx,1]) .and. cAnoMes >= AnoMes(aPerFerias[nx,2]) .And. !lAnoAdm )
					If Len( aDiasAng ) > 4
						aPerFerias[nx,3]  := aDiasAng[5] - aPerFerias[nx][14]
						aPerFerias[nx,4]  := 0
					EndIf

				//Se no mes do vencimento a regra de admissao for aplicavel, atualiza apenas os dias proporcionais
				ElseIf ( cAnoMes >= AnoMes(aPerFerias[nx,1]) .and. cAnoMes >= AnoMes(aPerFerias[nx,2]) ) .And. ( lAnoAdm .And. !lVencPer )
					If Len( aDiasAng ) > 4           	
						aPerFerias[nx,4] := aDiasAng[5] - aPerFerias[nx][14]
						aPerFerias[nx,3] := 0
					EndIf
                    
				//Se esta ou ja passou do mes do vencimento e ja venceu o prazo da regra de admissao, o periodo sera marcado como vencido
				ElseIf ( cAnoMes >= AnoMes(aPerFerias[nx,1]) .and. cAnoMes >= AnoMes(aPerFerias[nx,2]) .And. lVencPer )
					If Len( aDiasAng ) > 4
						aPerFerias[nx,3]  := aDiasAng[5] - aPerFerias[nx][14]
						aPerFerias[nx,4]  := 0
					EndIf
				
				EndIf  

				//Atualiza dias de ausencia convertidos em ferias
				aPerFerias[nx,23] := aDiasAng[3]

				//Quantidade minima de dias a serem pagos na admissao ou demissao
				aPerFerias[nx,29] := aDiasAng[4]
									
			EndIf

			If cPaisLoc == "EQU" .AND. Len(aDiasEqu) > 0				
				aPerFerias[nx,5]  := aDiasEqu[5] 	 // 05 - Dias totais de afastamento por periodo
				aPerFerias[nx,19] := aDiasEqu[1] 	 // 19 - Total de dias de ferias
				aPerFerias[nx,20] := aDiasEqu[2] 	 // 20 - Total de dias de bonificacao
            	If (dDtLimite >= aPerFerias[nx,1] .and. dDtLimite <= aPerFerias[nx,2]) .or. aPerFerias[nx,1] > dDtLimite
					aPerFerias[nx,3]  := 0
					aPerFerias[nx,4]  := aDiasEqu[3]
					aPerFerias[nx,17] := 0				
					aPerFerias[nx,18] := aDiasEqu[4]
					aPerFerias[nx,15] := 0				
					aPerFerias[nx,16] := aDiasEqu[5]
				Else 
					aPerFerias[nx,3]  := aDiasEqu[3] // 03 - Dias de ferias vencidas
					aPerFerias[nx,4]  := 0			 // 04 - Dias de ferias a vencer
					aPerFerias[nx,17] := aDiasEqu[4] // 17 - Dias de bono vencido
					aPerFerias[nx,18] := 0			 // 18 - Dias de bono a Vencer
					aPerFerias[nx,15] := aDiasEqu[5] // 15 - Dias de falta vencida				
					aPerFerias[nx,16] := 0			 // 16 - Dias de falta a vencer
				EndIf			
			EndIf                                
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		   	//³ Se Ano Civil e fim do periodo 31/12, os dias serao vencidos. |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If cPaisLoc == "VEN"  
				If nTDiasFe == aDiasVen[1]
					nDiasFeVe	:= nTDiasFe
					nDiasFeAv	:= 0					
				Else 
					nDiasFeAv	:= nTDiasFe
				EndIf
				If nDiasBon == aDiasVen[2]
					nDiasBoVe	:= nDiasBon
					nDiasBoAv	:= 0
				Else
					nDiasBoAv := nDiasBon
				EndIf
			ElseIf !(cPaisLoc $ "ANG*PER")
				If Substr(DTOS(dFimDtBas),5,4) == "1231" .And. lPerFeAc //Variavel carregada em fCalcFimAq()
					nDVencAux := nTDiasFe
				Else
					nDVencAux := INT(Round((nTDiasFe-aPerFerias[nX,10])/Round(nDiasBase*nFator, 2),8))*Round(nDiasBase*nFator, 2)
				EndIf
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			   	//³ Ajusta as variaveis de dias de ferias vencidas e a vencer.   |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If nTDiasFe == nDVencAux .or. ( ( nTDiasFe - aPerFerias[nX,10] ) >= nDVencAux .and. nDVencAux > 0 )
					nDiasFeve	:= nTDiasFe
					nDiasFeAv	:= 0
				ElseIf aPerFerias[nX,11] > 0
					nDiasFeve	:= nTDiasFe
					nDiasFeAv	:= 0
				Else
					nDiasFeAv	:= nTDiasFe
				EndIf
				
				If nDiasAux > 0 .and. nx > 1 
			    	nDiasFeAv := nDiasAux
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Redistribui os dias de vencidas e a vencer.                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nToDiaPer := (nDiasBase*nFator)
			EndIf

			If !(cPaisLoc $ "ANG*PER*EQU")
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			   	//³ Ajusta o direito de ferias no array dos periodos aquisitivos.|
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				//-- Abate os avos que o funcionario ficou afastado por tipo R*W*X e considera como ferias vencidas.
				If cPaisLoc == "ARG"
					
					If Alltrim(FunName()) == "GPEM030" .Or. Alltrim(FunName()) == "GPEM040" .Or. Alltrim(FunName()) == "GPEM060" .Or. Alltrim(FunName()) == "GPEM630"
						
						If Type("P_ARRDVAC") # "U" .And. P_ARRDVAC == "1"
							//# Arredonda os Dias de Vacaciones
							aPerFerias[nx,3]	:= Round( Iif(nDiasFeVe>0,nDiasFeVe - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0) ,0)
							aPerFerias[nx,4]	:= Round( Iif(nDiasFeAv>0,nDiasFeAv - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0) ,0)
						Else
							aPerFerias[nx,3]	:= Iif(nDiasFeVe>0,nDiasFeVe - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0)
							aPerFerias[nx,4]	:= Iif(nDiasFeAv>0,nDiasFeAv - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0)
						EndIf
					Else
						
						If Type("P_ARRDVAC") # "U" .And. P_ARRDVAC == "1"
							//# Arredonda os Dias de Vacaciones
							nDiasVArg           := Round( Iif(nDiasFeVe>0,nDiasFeVe - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0) ,0)
							aPerFerias[nx,3]	:= Round( Iif( nDiasVArg       >  aPerFerias[nx,24]                                              .AND. ;
														    !( SRA->RA_ADMISSA >= aPerFerias[nx,01] .AND. SRA->RA_ADMISSA <= aPerFerias[nx,02] ) .AND. ;
														    !( dDtLimite       >= aPerFerias[nx,01] .AND. dDtLimite       <= aPerFerias[nx,02] )     , ;
															   aPerFerias[nx,24] , nDiasVArg) ,0)
							aPerFerias[nx,4]	:= Round( Iif(nDiasFeAv>0,nDiasFeAv - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0) ,0)
						Else
							nDiasVArg           := Iif(nDiasFeVe>0,nDiasFeVe - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0)
							aPerFerias[nx,3]	:= Iif( nDiasVArg      >  aPerFerias[nx,24]                                              .AND. ;
												    !( SRA->RA_ADMISSA >= aPerFerias[nx,01] .AND. SRA->RA_ADMISSA <= aPerFerias[nx,02] ) .AND. ;
												    !( dDtLimite       >= aPerFerias[nx,01] .AND. dDtLimite       <= aPerFerias[nx,02] )     , ;
													   aPerFerias[nx,24] , nDiasVArg ) 
							aPerFerias[nx,4]	:= Iif(nDiasFeAv>0,nDiasFeAv - (Iif(aPerFerias[nx,2]<=dDtLimite,aPerFerias[nx,10],0)),0)
						EndIf
					EndIf
				Else				
					aPerFerias[nx,3]	:= Min(Max(Iif(nDiasFeVe>0,nDiasFeVe - (Iif(nDiasFeAv == 0,aPerFerias[nx,10],0)),0),0),Round(nDiasBase*nFator,2))
					aPerFerias[nx,4]	:= Min(Max(Iif(nDiasFeAv>0,nDiasFeAv - (Iif(nDiasFeVe == 0,aPerFerias[nx,10],0)),0),0),Round(nDiasBase*nFator,2))
					//Caso tenha dias vencidos e há dias de dedução por motivo RXW, significa que houve suspensão do período
					//Logo, ao invés de férias vencidas, os dias são das férias proporcionais
					If aPerFerias[nx,3] > 0 .And. aPerFerias[nx,3] < 30 .And. aPerFerias[nx,10] > 0 .And. aPerFerias[nx,4] == 00
						aPerFerias[nx,4] := aPerFerias[nx,3]
						aPerFerias[nx,3] := 0
					//Se existe outro período aquisitivo o período atual esta vencido
					ElseIf Len(aPerFerias) > nX .and. aPerFerias[nx,10] > 0 .and. AnoMes(aPerFerias[nX,2]) < cPeriodo .and. aPerFerias[nX,3] == 0 .and. aPerFerias[nX,4] > 0 
						aPerFerias[nX,3] := nToDiaPer
						aPerFerias[nx,4] := 0
					EndIf
				EndIf
				
				If cPaisLoc == "VEN"
					aPerFerias[nx,17] := nDiasBoVe
					aPerFerias[nx,18] := nDiasBoAv
					If nx < Len(aperferias)
						aPerFerias[nx,15] := nDFalFer
						aPerFerias[nx,21] := nDFalBon
					Else
						aPerFerias[nx,16] := nDFalFer
						aPerFerias[nx,22] := nDFalBon
					EndIf
				EndIf
			EndIf
		EndIf
	Next nx
EndIf

RestArea( aAreaSRF )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza as variaveis de dias de ferias vencidas e proporcionais.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nDiasFeVe	:= 0
nDiasFeAv	:= 0
nDiasBoVe	:= 0
nDiasBoAv	:= 0
Aeval(aPerFerias,{|X| If(X[8] == "1",(nDiasFeve += X[3], nDiasFeAv += X[4]),nil)})
If cPaisLoc == "VEN"  .AND. cTipoRot <> "4"
	Aeval(aPerFerias,{|X| If(X[8] == "1",(nDiasBove += X[17], nDiasBoAv += X[18]),nil)})
	Aeval(aPerFerias,{|X| If(X[8] == "1",(nDiasFeve -= X[15], nDiasFeAv -= X[16]),nil)})
	Aeval(aPerFerias,{|X| If(X[8] == "1",(nDiasBove -= X[21], nDiasBoAv -= X[22]),nil)})
EndIf
nDiasFeVe	:= Max(nDiasFeVe,0)
nDiasFeAv	:= Max(nDiasFeAv,0)
nDiasBoVe	:= Max(nDiasBoVe,0)
nDiasBoAv	:= Max(nDiasBoAv,0)

If lAvisoInd 
	aPerFerias	:= aClone(aSvPerFer)
EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCalcFimAq³ Autor ³ Equipe RH             ³ Data ³19/01/99  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna o Fim do Periodo Aquisitivo                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fCalcFimAq(dDtIni,cTipoRet)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fCalcFimAq(dDtIni,cTipoRet)
Local cDtFim, dDtFim
Local aGetArea    := GetArea()
Local aGetAreaRCA := RCA->( GetArea() )

STATIC cFerAnoCivil

If !(cPaisLoc == "BRA")
	// Caso o mnemonico nao tenha sido carregado, busca-o no RCA.
	If cFerAnoCivil == Nil
		cFerAnoCivil := "N"
		If Type("P_FERPAC") # "U"
			cFerAnoCivil := P_FERPAC  //-- Ferias Por Ano Civil
		Else
			RCA->( dbSetOrder( 1 ) )
			If RCA->( dbSeek( xFilial( "RCA" ) + "P_FERPAC" ) )
				cFerAnoCivil := AllTrim( RCA->RCA_CONTEU )
			EndIf
		EndIf
	EndIf
	
	If SRA->(Type("RA_FERPAC")) # "U" .and. !Empty(SRA->RA_FERPAC)
	   cFerAnoCivil := SRA->RA_FERPAC
	EndIf
EndIf

cTipoRet := If(cTipoRet == Nil, "DATA", cTipoRet)

If cFerAnoCivil == "S"
	If cTipoRet == "DATA"
		dDtFim := CtoD("31/12/" + StrZero(Year(dDtIni),4),"DDMMYY")
	ElseIf cTipoRet == "ANOMES"
		dDtFim := StrZero(Year(dDtIni),4)+"12"
	EndIf	
Else
	If Type("aTabFer") # "A" 
		aTabFer := {}
	EndIf
	fTab_Fer(@aTabFer)
	If ! Empty(aTabFer)
		dDtFim := MonthSum(dDtIni,aTabFer[1]) - 1
	Else
		cDtFim := SubS(DtoC(dDtIni), 1, 6) + StrZero(Year(dDtIni) + 1, 4)
		//--Verifica se o ano ‚ Bissexto
		If SubStr(cDtfim, 4, 2) == "02".And. SubStr(cDtfim, 1, 2) == "29"
			cDtFim := "28/" + SubS(cDtFim, 4, 7)
		EndIf
		dDtFim := CtoD(cDtFim, "DDMMYY") - 1
	EndIf

	If cTipoRet == "ANOMES"
		dDtFim := AnoMes(dDtFim)
	EndIf
EndIf

//--Retorno para funcoes que nao inicializam cFerAnoCivil - Calc_Fer()
lPerFeAc := ( cFerAnoCivil == "S" )

RestArea( aGetAreaRCA )
RestArea( aGetArea )

Return dDtFim

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³fValPerFer ³ Autor ³ Ricardo Duarte Costa  ³ Data ³29/10/05  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³                                                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fValPerFerias(	dDtLimite,;		// Data de referencia do processamento
								dDtBasFer,;		// Data base inicial do periodo aquisitivo mais antigo
								aPerFerias,;	// Array com os periodos a serem verificados
								nTDiasAfa,;		// Total de dias de afastamentos do periodo
								cTipAfa,;		// Codigos dos afastamentos que deverao ser tratados
								lDiasAfAcum,;	// Retona dias de afastamentos acumulados
								dRetFimOP,;		// Data de retorno do afastamento
								cCodTipAfa,;	// Tipo de Afastamento que ocasionou a troca de periodo								
								cDescTipAfa,;   // Descricao do afastamento
								nDiasBase,;		
								nDiasFeVe,;
								nDiasFeAv,;
								lDtFimOk,;
								nDiasAux)
Local aAfast		:= {}
Local aAfastAux		:= {}
Local cTip180		:= ""
Local cTipSusp		:= ""
Local nAvosAf		:= 0
Local nDiasAf		:= 0
Local nCnt			:= 0
Local nDias180 		:= 0
Local nDias30	 	:= 0
Local nDiasDed		:= 0
Local nDiasSusp		:= 0
Local nAvosSusp		:= 0
Local nTotSusp		:= 0
Local nTotPerSusp	:= 0
Local nVezes		:= 0
Local nX			:= 0
Local nY            := 0
Local nLenAfast		:= 0
Local dRet30		:= CtoD("")
Local dRet180		:= CtoD("")
Local dRetSusp		:= CtoD("")
Local dNewPerIni	:= CtoD("")
Local dIniDtBas		:= CtoD("")
Local dFimDtBas 	:= CtoD("")
Local dIniPerOk 	:= CtoD("")
Local lMudaPer		:= .F.
Local lSimAf1Per   	:= .F.	    // Tem dia de afastamento RWX no 1o periodo de ferias
Local lSimAf2Per   	:= .F.      // Tem dia de afastamento RWX no 2o periodo de ferias
/*	Estrutura aPerFerias
	// 01 - Inicio Database de Ferias
	// 02 - Final Database de Ferias
	// 03 - Dias de ferias vencidas
	// 04 - Dias de ferias a vencer
	// 05 - Dias totais de afastamento por periodo
	// 06 - Descricao do tipo de afastamento do periodo
	// 07 - Data de original de termino do p.aquisitivo quando houver prorrogacao do mesmo RWX
	// 08 - Status do periodo de ferias:  1-Ativo (Vencidos/A vencer)/2-Prescrito (Perdido)/3-Pago
	// 09 - Data de Inicio do Proximo periodo caso seja um periodo perdido.
	// 10 - Quantidade dias de deducao para o direito apurado no periodo	
	// 11 - Dias Vencidos Pendentes
    // 12 - Data Inicia Vencido Pendente
	// 12 - Data Inicia Vencido Pendente
    // 13 - Dias de Ferias Antecipadas
	// 14 - Dias de Ferias Antecipadas
	// 15 - Dias de Faltas Vencidas
	// 16 - Dias de Faltas a Vencer
	// 17 - Dias de bono vencido
	// 18 - Dias de bono a Vencer
	// 19 - Total de dias de ferias
	// 20 - Total de dias de bonificacao
	// 21 - Dias de Faltas vencidas bonificacao
	// 22 - Dias de ¦Faltas a Vencer bonificacao		
	// 23 - Dias de ausencia convertidos em ferias
	// 24 - Total de Dias de Ferias do Periodo
*/

DEFAULT nDiasBase := 12
DEFAULT nDiasFeVe := 0
DEFAULT nDiasFeAv := 0
DEFAULT lDtFimOk  := .T.
DEFAULT nDiasAux  := 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Posiciona no primeiro periodo aquisitivo de ferias em aberto p/|
//| processamento dos calculos de localizacoes.                    |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nPos		:= 1
nVezes		:= Len(aPerFerias)
For nx := nPos to nVezes
	//-- Processa somente para periodos aberto e virtuais, periodos perdidos serao desconsiderados.
	cDescTipAfa := ""										// Tipo de afastamento que ocasionou a troca do periodo
	dIniPerOk	:= CtoD("")									// Data de inicio do periodo aquisitivo quando houve perda do periodo aquisitivo anterior.
	dDtFimOk    := CtoD("")									// Fim do periodo aquisitivo valido
	If aPerFerias[nx,8] $ "1"
		If !Empty(dNewPerIni)
			aPerFerias[nx,1] := dNewPerIni
			aPerFerias[nx,2] := fCalcFimAq(dNewPerIni)
			dNewPerIni		 := aPerFerias[nx,2] + 1
		EndIf
			
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	   	//³ Atualiza o inicio e o fim da data base para avaliacao.   	 |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		// Periodo normal sem alteracao na data base de inicio das ferias.
		dIniDtBas	:= aPerFerias[nx,1]
		dFimDtBas	:= aPerFerias[nx,2]
		dFimDtBas	:= Min( dFimDtBas, dDtLimite )
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	   	//³ Busca os dias de afastamento do periodo corrente.  			 |
	   	//³ O-Acidente P-Doenca  R-servico militar  X-Licenca sem Venc.  |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aAfast  := {}
		nAvosAf := nDiasAf := 0
		fRetAfas(dIniDtBas,dFimDtBas,cTipAfa,@nAvosAf,@nDiasAf,,@aAfast,,.F.,,,,,,,.F.)
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	   	//³ A partir do array aAfast, obtem dias e retorno do afastamento|
	   	//³ Elementos do Array aAfast[Avos,Dias,Inicio,Fim,Tipo]		 |
		//ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
		//| Quando existir o afastamento de aposentadoria por invalidez  |
		//| deve tratar como Doença ou Acidente de Trabalho porem ira    |
		//| preservar a data de retorno p/afast. O e P.                  |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nDias180 	:= 0
		dRet180		:= CtoD("")
		cTip180		:= ""
		nDias30	 	:= 0
		dRet30		:= CtoD("")
		nDiasSusp	:= 0
		nAvosSusp	:= 0
		dRetSusp	:= CtoD("")
		nTotSusp	:= 0
		nTotPerSusp	:= 0
		cTipSusp	:= ""
		lDtFimOk	:= .T.
		
		For nCnt := 1 To Len(aAfast)
			If ( dIniDtBas == dDtBasFer .or. (dIniDtBas > dDtBasFer .and. aPerFerias[nx,2] > dDtLimite)).And. (aAfast[nCnt,7] == "2" .and. aAfast[nCnt,2] > 0 )
				//Para rescisao, verificar se inicio ou fim do afastamento esta dentro do 1.periodo de ferias, levando em consideracao
				//data da rescisao como fim do periodo.
				If cTipoRot == "4" .and. ( Year(dFimDtBas) == Year(fCalcFimAq(dDtBasFer) ) .or. ;
					!(!Empty(aAfast[nCnt,4]) .and. aAfast[nCnt,4] < dDtBasFer .and. aAfast[nCnt,3] > dFimDtBas) )
					lSimAf1Per	:= .T. // TEM afastamento X,R,W no primeiro periodo de ferias			
				ElseIf !Empty(aAfast[nCnt,4]) .and. aAfast[nCnt,3] <=  dFimDtBas .and. (aAfast[nCnt,4] >= fCalcFimAq(dDtBasFer) .Or.  (aAfast[nCnt,3] >= dDtBasFer .And. aAfast[nCnt,4] <= fCalcFimAq(dDtBasFer)))
					lSimAf1Per	:= .T. // TEM afastamento X,R,W no primeiro periodo de ferias			
				EndIf
			ElseIf dIniDtBas >  aAfast[nCnt,3] .And. (aAfast[nCnt,7] == "2" .and. aAfast[nCnt,2] > 0 )
				lSimAf2Per 	:= .T. // TEM afastamento X,R,W no segundo periodo de ferias
			EndIf
			
			If aAfast[nCnt,7] == "1"	//Perde ferias apos 180 dias
				dRet180	 	:= aAfast[nCnt,4]    // Data do retorno
				cTip180	 	:= aAfast[nCnt,16]   // Tipo de afastamento
				cTipAux		:= aAfast[nCnt,13]
				If dRet180 > dFimDtBas .and. cPeriodo == AnoMes(dRet180) .And. aAfast[nCnt,20] == 0
					aAfastAux := {}
					fRetAfas(aAfast[nCnt,3],dDtLimite,cTipAfa,@nAvosAf,@nDiasAf,,@aAfastAux,,.F.,,,,,,,.F.)
					For nY := 1 to Len(aAfastAux)
						If aAfast[nCnt,3] <= aAfastAux[nY,3] 
							If Empty(aAfastAux[nY,4]).or. aAfastAux[nY,4] > dDtLimite
								nDias180 += ( dDtLimite - aAfastAux[nY,3] ) + 1
							Else
								nDias180 += aAfastAux[nY,11]    // Dias afastado
							EndIf
						EndIf
					Next nY
				Else
					nDias180 	+= aAfast[nCnt,11]    // Dias afastado
				EndIf
			ElseIf aAfast[nCnt,7] == "2"	//Suspensao do periodo
				nDiasSusp   += aAfast[nCnt,2]	// Dias afastado
				dRetSusp	:= If(lSimAf1Per .Or. lSimAf2Per,If(Empty(aAfast[nCnt,4]),dDtLimite,aAfast[nCnt,4]),dRetSusp) 				// Data do retorno - Se nao houve afastamento no 1o periodo nao posso mudar a data de termino do periodo aquisitivo de ferias.
				cTipSusp    := AllTrim(aAfast[nCnt,16])                            	// Tipo de afastamento
				nTotSusp	+= (If(Empty(aAfast[nCnt,4]),dDtLimite,aAfast[nCnt,4]) - aAfast[nCnt,3])+1                	// Total de Dias Afatados (Data Fim - Data Inicio)
				If aAfast[nCnt,3] < fCalcFimAq(dDtBasFer) .And. fCalcFimAq(dDtBasFer) < aAfast[nCnt,4] //Afastamento terminou em outro período aquisitivo
					nTotPerSusp	+= ( aAfast[nCnt,4] - dFimDtBas ) + 1
				EndIf
				If dRetSusp > dFimDtBas .or. ( Empty(dRetSusp) .and. !Empty(aAfast[nCnt,4]) .and. (aAfast[nCnt,4] + aAfast[nCnt,2]) > dFimDtBas )
					aAfastAux := {}
					fRetAfas(dIniDtBas,dDtLimite,cTipAfa,@nAvosAf,@nDiasAf,,@aAfastAux,,.F.)
					nAvosSusp := nAvosAf
					nDiasSusp := 0
					For nY := 1 to Len(aAfastAux)
						If dFimDtBas + nDiasSusp >= aAfastAux[nY,3]
							nDiasSusp += ( If(Empty(aAfastAux[nY,4]) .or. aAfastAux[nY,4] > dDtLimite, dDtLimite, aAfastAux[nY,4]) - aAfastAux[nY,3] ) + 1
							dRetSusp := If(Empty(aAfastAux[nY,4]),dDtLimite,aAfastAux[nY,4])
							lSimAf1Per	:= .T.
							If nY > 1								
								nTotSusp := nDiasSusp
							EndIf
						EndIf
					Next nY					
				Else
					If !Empty(aAfast[nCnt,4]) .and. aAfast[nCnt,4] <= dFimDtBas .and. nTotSusp > nDiasSusp
						nDiasSusp := nTotSusp
					EndIf
					nAvosSusp	+= aAfast[nCnt,1]   // Avos perdidos no afastamento
					//Se tem mais de 30 dias de suspensão, mas nenhum avo perdido, indica que o afastamento começou após o dia 15 e terminou antes do dia 14, 
					//como o período fica suspenso, equivale a um avo perdido
					If aAfast[nCnt,1] == 0 .and. ( aAfast[nCnt,4] - aAfast[nCnt,3] + 1 ) >= 30
						nAvosSusp++
					EndIf
				EndIf
				cTipAux		:= aAfast[nCnt,13]
				If Empty(aAfast[nCnt, 4]) .And. (lSimAf1Per .Or. lSimAf2Per)
					If aAfast[nCnt, 3] > aPerFerias[nx,2]
						dDtFimOk := dFimDtBas
					ElseIf lSimAf1Per .and. nCnt > 1 .and. aAfast[nCnt,3] <=  dFimDtBas
						//Se existe outra suspensão de período no mesmo período aquisitivo, em data de retorno, desativa variavel para não mudar período aquisitivo
						lSimAf1Per := .F.						
					EndIf
				EndIf
				lDtFimOk	:= !Empty(aAfast[nCnt, 4])
			ElseIf aAfast[nCnt,7] == "3"//Perde ferias apos 30 dias
				nDias30		+= aAfast[nCnt,2]     		// Dias afastado
				dRet30		:= aAfast[nCnt,4]     		// Data do retorno
				cTipAux		:= aAfast[nCnt,13]
			EndIf
		
		Next nCnt
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//| Atualiza Variavel Com o Total de Dias de Afastamento (O*P)   |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lDiasAfAcum  // Se total de dias afastados (acumulado)
			nTDiasAfa += ( nDias180 + nDiasSusp )
		Else          // Se total de dias do periodo
			nTDiasAfa := nDias180 + nDiasSusp
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//| Trata a perda do periodo (DOENCA/AC.TRABALHO/L.REMUNERADA)   |
		//| Obs.: Somente deve ser avaliado se afastado mais que 180 dias|
		//|       ou licenca remunerada e afastamento maior que 30 dias. |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nDias180 > 180 .Or. nDias30 > 30
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	   		//³ Define o historico da perda do periodo de ferias p/afastamento³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nDias180 > 180
				cCodTipAfa	:= cTip180
			Else
				cCodTipAfa	:= ""
			EndIf
			
			cDescTipAfa := PosAlias( "RCM" , cTipAux , xFilial("RCM") , "RCM_DESCRI" , 1  )
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//| Data do novo periodo encontrada a partir da data de retorno. |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !(cPaisLoc == "URU")
				If Empty(dIniPerOk) .And. nDias180 > 180
					If !Empty(dRet180)
						dIniPerOk  := dRet180 + 1 // Indica o inicio de um periodo valido
					EndIf
					dRetFimOP  := dRet180
					lMudaPer   := .T.
				ElseIf !Empty(dRet30)				// Novo periodo para afastamento por licenca remunerada
					dIniPerOk  := dRet30 + 1       // Indica o inicio de um periodo valido
					lMudaPer   := .T.
				EndIf
			EndIf
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//| Trata a perda dos meses afastado (S.MILITAR/L.N.REM./M.SIND.)|
		//| Obs.: Deve ser avaliado mesmo sem periodo vencido			 |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If nDiasSusp > 0
			
			If nAvosSusp > 0
				nDiasDed := nAvosSusp * nFator
				If DateDiffMonth( aPerFerias[1,1] , aPerFerias[1,2] ) > 12  .and. (cPeriodo == AnoMes(aPerFerias[1,2])) .and. aPerFerias[1,4] <= 30 .and. ( Empty(aPerFerias[1,7]) .or. cPeriodo == AnoMes(aPerFerias[1,7]) )
					nDiasAux := nDiasDed - nFator
					nDiasDed := nFator
				EndIf
			ElseIf Day( dIniDtBas ) != 17
				nDiasDed := Int(nDiasSusp/15) * nFator
			EndIf
			
			aPerFerias[nX,33] := nDiasSusp
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	   		//³ Encontra o proximo periodo. Exemplo:                         |
	   		//| Ini Periodo   Ini Afast.  Fim Afast.   Retorno   Compl. Per. |
	   		//|	  01/04/97    02/03/98     12/01/99    13/01/99    12/02/99  |
	   		//|                                                              |
	   		//| De 01/04/97 a 02/03/98 sao 11 meses trabalhados. O retorno se| 
	   		//| deu em 13/01/99, portanto deve-se trabalhar mais um (1) mes, |
	   		//| ate (12/02/99) para completar o periodo. O Inicio do proximo |
	   		//| periodo neste exemplo, dar-se-a em 13/02/99. (CLT, Art.132)  |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !Empty(dRetSusp)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		   		//³ nDiasSusp   = Dias afastados no periodo aquisitivo                                         	   |
		   		//³ nTotSusp    = Dias afastados (Fim Afastamento - Inicio do afastamento)                     	   |
				//³	nTotPerSusp = Dias afastados do proximo periodo aquisitivo (nTotSusp - nDiasSusp )         	   | 
		   		//| 																				           	   |
		        //|Calculo dDtFimOK    															               	   |
		        //|  * Se periodo aquisitivo de ferias, "lMudaPer" = .T., foi alterado devido a perda de periodo   |
		        //|    por afastamento P ou O, e tiver dias de afastamento TIPO X,R,W no 1. ou 2.Perido de ferias. |
				//|    verificar novamente os afastamento (fRetAfas) considerando as datas do novo periodo         |
		        //|    dIniPerOk) 															   	   |
		        //|  * Achando a qtd de dias afastados pelo tipo X, R ou W,  novo peiodo, calcular a data fim  	   |
		        //|    do periodo aquisitivo somando os dias do afastamento (nDiasSusp) no final novo periodo  	   |
		        //|    aquisitivo. 																		   	   	   |
		        //|    					   															   	       	   |
			    //|  * Se periodo aqusitivo nao for alterado, lMudaPer = .F. , e :                                 |
				//|	   * Qtd de Dias em nTotPerSusp for > 0 (zero), ou seja, termino afast. fora periodo aquis.    |
		        //|       => Retorno Afastamento (dRetSusp) + Dias afastados dentro do periodo (nDiasSusp)         |
		        //|    * Qtd de Dias em nTotPerSusp for = 0 (zero), ou seja, fim afast. dentro periodo aquis.:     |
		        //|       => Final do Periodo aquisitivo (fCalcFimArq) + Dias afastados (nDiasSusp )               |
		        //|    * Qtd de Dias em nTotPerSusp for > 0 (zero), ou seja, termino afast. fora periodo aquis.:   |
		        //|       => Retorno Afastamento (dRetSusp) + Dias afastados dentro do periodo (nDiasSusp)         |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If Empty(dDtFimOk) .and. (lSimAf2Per .or. lSimAf1Per) // Data Fim esta em branco e tem afastamento (X,R,W )no 1. ou 2.periodo
					If lMudaPer 
						If !Empty(dIniPerOK)
							aAfast  	:= {}
							nDiasSusp	:= 0
							dRetSusp 	:= CtoD("")
							
							fRetAfas(dIniPerOK,fCalcFimAq(dIniPerOk),cTipAfa,'','',,@aAfast,,.F.)
							
							For nCnt := 1 To Len(aAfast)  
									If aAfast[nCnt,7] == "2"	//Suspensa do periodo
										nDiasSusp 	+= aAfast[nCnt,2]      // Dias afastado
										dRetSusp 	:= aAfast[nCnt,4]      // Data do retorno - Se nao houve afastamento no
									EndIf
							Next nCnt
							
							dDtFimOk := (fCalcFimAq(dIniPerOk) + nDiasSusp)
						EndIf
					Else
						dDtFimOk := If(nTotPerSusp == 0,(fCalcFimAq(dIniDtBas) + nDiasSusp), fCalcFimAq(dIniDtBas) + nTotSusp)
					EndIf	
	
					If cTipoRot == "4"
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//| Se a demssao ocorre depois do fim do periodo aquisitivo,     |
						//| o prolongamento do mesmo, em funcao do afastamento,ocorrera. |
						//| Caso contrario, para efeito de pagamento,somente serao consi |					
						//| rados os avos proporcionais a que o empregado tenha direito. |					
						//| Pois nao tera tempo habil para cumprir os faltantes e assim  |					
						//| adquirir o direito as ferias.								 |										
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

						dDtFimOk := Min( dDtFimOk, dDtLimite )
					EndIf
						
				EndIf							
				cCodTipAfa	:= If(cTipSusp == "R", "R", If (cTipSusp == "X", "X", If (cTipSusp == "W","W",cTipSusp ) ) )
				cDescTipAfa := PosAlias( "RCM" , cTipAux , xFilial("RCM") , "RCM_DESCRI" , 1  )
			Else
				aPerFerias[nx,10]:= nDiasDed
		   	EndIf
		EndIf
		
		//-- Atualizacao final do periodo aquisitivo corrente no array aPerFerias
		//-- Verifica se a data final do periodo foi modificada por afastamentoS R*X*W
		If !Empty(dDtFimOK) .And. !(cTipSusp == "U3" .And. !lDtFimOk .And. nx < nVezes)
			aPerFerias[nx,10] := nDiasDed
			aPerFerias[nx,7] := aPerFerias[nx,2]	// 07 - Data final original do periodo aquisitivo
			aPerFerias[nx,2] := dDtFimOK			// 02 - Final Database de Ferias
			If Empty(dIniPerOk)
				dNewPerIni := dDtFimOK + 1
			EndIf
		EndIf

		aPerFerias[nx,5] := nDias180 + nDias30 + nDiasSusp	// 05 - Dias totais de afastamento por periodo
		aPerFerias[nx,6] := cDescTipAfa						// 06 - Descricao do tipo de afastamento do periodo

		//-- Ajusta a data Inicial do proximo periodo, quantidades de dias de ferias vencidas e a vencer
		//-- para os tipos de afastamentos O*P*8
		If !Empty(dIniPerOk) .AND. dIniPerOk <> aPerFerias[nX,01]
			aPerFerias[nx,3] := 0			// 03 - dias de ferias vencidas
			aPerFerias[nx,4] := 0			// 04 - dias de ferias a vencer
			aPerFerias[nx,8] := "2"			// 08 - Tipo do periodo 2 - Prescrito (Perdido)
			aPerFerias[nx,9] := dIniPerOk	// 09 - Data de Inicio do Proximo periodo aquisitivo quando houver perda do direito
		ElseIf lMudaPer //Se esta afastado sem retorno, e perdeu o periodo, marca o periodo como prescrito.
			aPerFerias[nx,3] := 0			// 03 - dias de ferias vencidas
			aPerFerias[nx,4] := 0			// 04 - dias de ferias a vencer
			aPerFerias[nx,8] := "2"			// 08 - Tipo do periodo 2 - Prescrito (Perdido)		 
			nLenAfast := Len(aAfast)
			//Apenas para aposentadoria por invalidez
			If nLenAfast > 0 .And. aAfast[nLenAfast,16] == "U3" .and. aAfast[nLenAfast,3] - 1 >= aPerFerias[nx,1] .And. aAfast[nLenAfast,3] - 1 <= aPerFerias[nx,2]
				aPerFerias[nx,7] := aPerFerias[nx,2]
				aPerFerias[nx,2] := aAfast[nLenAfast,3] - 1 // 02 Data fim do período
			EndIf
		EndIf
	EndIf
Next nx

dDtBasFer := If(Empty(dIniPerOk), dDtBasFer, dIniPerOk) // Data atualizada se passada por referencia

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³TrfColsObj ³ Autor ³ Mauricio T. Takakura ³ Data ³09/03/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Transferir do aCols para o Objeto                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Vide abaixo                                        		    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ Necessario a variavel oSrr e aCols serem Privates       	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ Generico                                                   ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function TrfColsObj( aTrfCols )

Local cSvSetRot
Local cSvSetPer
Local cSvSetNumPago

Local nX
Local nSrrUsado		:= Len( aSrrHeader )
Local nPosTipo2		:= GdFieldPos("RR_TIPO2"	, aSrrHeader )
Local nPosPd		:= GdFieldPos("RR_PD"		, aSrrHeader )
Local nPosValor		:= GdFieldPos("RR_VALOR"	, aSrrHeader )
Local nPosHoras 	:= GdFieldPos("RR_HORAS"	, aSrrHeader )
Local nPosValInfo	:= GdFieldPos("RR_VALINFO"	, aSrrHeader )
Local nPosHorInfo 	:= GdFieldPos("RR_HORINFO"	, aSrrHeader )
Local nPosCc		:= GdFieldPos("RR_CC"		, aSrrHeader )
Local nPosTipo1		:= GdFieldPos("RR_TIPO1"	, aSrrHeader )
Local nPosDataPag	:= GdFieldPos("RR_DATAPAG"	, aSrrHeader )
Local nPoscSeq		:= GdFieldPos("RR_SEQ"		, aSrrHeader )
Local nPoscNumID	:= GdFieldPos("RR_NUMID"	, aSrrHeader )
Local nPosCodFun  	:= If(SRR->(FieldPos("RR_CODFUNC")) > 0,GdFieldPos("RR_CODFUNC"	, aSrrHeader ),0)
Local lItemClvl		:= GetMvRH( "MV_ITMCLVL", .F., "2" ) == "1"
Local nPosItem		:= 0
Local nPosClvl      := 0

                                                                   
If lItemClvl
	nPosItem:= GdFieldPos("RR_ITEM"	, aSrrHeader)
	nPosClvl:= GdFieldPos("RR_CLVL"	, aSrrHeader )
EndIf

Begin Sequence

	If Type( "OSRR" ) == Nil .or. Type( "ATRFCOLS" ) == Nil
		Break
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Transferir o aCols para o Objeto oSrr 					 ³
	³ E necessario setar o Roteiro e Periodo que serao utilizado ³	
	³ na FGeraVerba.                           					 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cSvSetRot := SetRotExec( cRot )
	cSvSetPer := SetPeriodCalc( cPeriodo )
	cSvSetNumPago := SetNumPgCalc( cNumPag )
	

	For nX := 1 To Len( aTrfCols )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega apenas valores nao provenitentes de Rescisao e a ver³
		³ba de Liquido de Rescisao Paga anteriormente , de FGTS  para³
		³o Calculo dos 40% Rescisao	e Verbas de Adicionais			 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If (aTrfCols[ nX , nPosTipo2 ] $ "R/K" .and. !(  aTrfCols[ nX , nPosPd ] $ cVerbaNDel )) .or. (Empty(aTrfCols[ nX , nPosPd ]))
			Loop
		EndIf

		FMatriz( aTrfCols[nX, nPosPd]						,;
				If(aTrfCols[nX, nPosValInfo]>0, aTrfCols[nX, nPosValInfo], aTrfCols[nX, nPosValor])	,;
				If( aTrfCols[nX,nPosTipo1] == "H", fConvHoras( If( aTrfCols[nX,nPosHorInfo]>0, aTrfCols[nX,nPosHorInfo],aTrfCols[nX,nPosHoras]), "2" ), If(aTrfCols[nX,nPosHorInfo]>0,aTrfCols[nX,nPosHorInfo],aTrfCols[nX,nPosHoras])),;
				cNumPag										,;
				aTrfCols[nX, nPosCc]						,;
				aTrfCols[nX, nPosTipo1]						,;
				aTrfCols[nX, nPosTipo2]						,;
				Nil											,;
				If( aTrfCols[nX, nSrrUsado+1], "D", " " )	,;
				aTrfCols[nX, nPosDataPag]					,;
				Nil						 					,;
				aTrfCols[nX, nPosValInfo]					,;
				If( aTrfCols[nX,nPosTipo1] == "H", fConvHoras( aTrfCols[nX,nPosHorInfo], "2" ), aTrfCols[nX,nPosHorInfo]),;
				aTrfCols[nX, nPoscSeq]						,;
				aTrfCols[nX, nPoscNumID]					,;
				If(SRR->(FieldPos("RR_CODFUNC")) > 0,aTrfCols[nX, nPosCodFun],Nil) ,;
				If(lItemClvl,aTrfCols[nX, nPosItem],Nil)	,;
				If(lItemClvl,aTrfCols[nX, nPosClvl],Nil)	; 
			   )
	Next nX
	
	SetRotExec( cSvSetRot )
	SetPeriodCalc( cSvSetPer )
	SetNumPgCalc( cSvSetNumPago )
	
End Sequence

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fPerAtual		³Autor³Mauricio Takakura  ³ Data ³02/01/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Get do Periodo Atual        								³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Gpem040                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fPerAtual( aPerAtual , cRot )

Local aArea 	:= GetArea()
Local aRCHArea	:= RCH->( GetArea() )

Local cFilRCH	:= xFilial( "RCH" )
Local cBlankRot

DEFAULT aPerAtual := {}

Begin Sequence

	DbSelectArea( "RCH")
	DbSetOrder( RetOrder( "RCH", "RCH_FILIAL+RCH_PROCES+RCH_ROTEIR+DTOS(RCH_DTFECH)+RCH_PER+RCH_NUMPAG" ) )
	DbSeek( cFilRCH + cProcesso + cRot, .F. )
	cBlankRot := cRot
	If RCH->( Eof() )
		cBlankRot := Space( GetSx3Cache( "RCH_ROTEIR", "X3_TAMANHO" ) )
		DbSeek( cFilRCH + cProcesso + cBlankRot, .F. )
	EndIf	

	While RCH->( !Eof() ) .And. ( RCH->( RCH_FILIAL + RCH_PROCES + RCH_ROTEIR) == cFilRCH + cProcesso + cBlankRot )
		If Empty( RCH->( RCH_DTFECH ) )
			RCH->( aAdd( aPerAtual, { RCH_PER, RCH_NUMPAG, RCH_ROTEIR, RCH_MES, RCH_ANO, RCH_DTINI, RCH_DTFIM, RCH_DTPAGO } ) )
			Exit
		EndIf
		RCH->( DbSkip() )
	EndDo

End Sequence

RestArea( aArea )
RestArea( aRCHArea )

Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasFerPtg      ³Autor³Kelly Soares       ³ Data ³29/05/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Dias de Ferias no Periodo Informado							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Portugal                                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aPeriodos = Array com periodos de ferias					³
³          ³dInicio = Inicio do Periodo 								³
³          ³dFim = Final do Periodo           							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasFerPtg(aPeriodos,dInicio,dFim)

Local nFator	:= 0
Local nDias		:= 0
Local nVenc		:= 0
Local nProp		:= 0
Local lAdm		:= .F.

If Len(aPeriodos) > 0
	aPeriodos := {}
EndIf

While ( dInicio <= dFim )

	dData1 := dInicio
	dData2 := If( Year(dInicio) == Year(dFim), dFim, CtoD( "31/12/" + StrZero( Year(dInicio),4 ) ) )
	lAdm := ( YEAR(dData1) == YEAR(SRA->RA_ADMISSA) )
    nFator := If( lAdm, 2, 22/12 )
	nDias := Round( ( Month(dData2) - Month(dData1) + 1 ) * nFator , 2 )
	If ( lAdm .And. nDias > 20 )
		nDias := 20
	EndIf
	nVenc := nDias
	If Year(dData1) == Year(dFim)
		nProp := nDias             
		nVenc := 0
	EndIf
	aAdd(aPeriodos,{dData1,dData2,nVenc,nProp})
	dInicio := dData2 + 1
	
End

Return nil
/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasFerBol      ³Autor³Luis Trombini      ³ Data ³26/07/2011³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Dias de Ferias no Periodo Informado							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Bolivia                                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aPeriodos = Array com periodos de ferias					³
³          ³dInicio = Inicio do Periodo 								³
³          ³dFim = Final do Periodo           							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasFerBol(aPeriodos,dInicio,dFim)

Local nFator	:= 0
Local nDias		:= 0
Local nVenc		:= 0
Local nProp		:= 0
Local lAdm		:= .F.
Local nFaixa
Local nAnosTrab
Local dData1	
Local dData2	
Local dData3	

If Len(aPeriodos) > 0
	aPeriodos := {}
EndIf

While ( dInicio <= dFim )

	dData1	:= dInicio
	dData2	:= If( Year(dInicio) == Year(dFim), dFim, CtoD( "31/12/" + StrZero( Year(dInicio),4 ) ) )
	dData3	:= 	If( SRA->( FieldPos("RA_DTREC")) > 0 .And. !Empty(SRA->RA_DTREC), SRA->RA_DTREC, SRA->RA_ADMISSA )

	lAdm	:= ( YEAR(dData1) == YEAR(dData3) )

    nAnosTrab :=  Int((( dData2 - dData1) + 1) / 365)
    nFaixa	:= FPOSTAB("S010", SRA->RA_PROCES, "=", 4 , nAnosTrab , "<=" , 6 )
    nDias	:= If(nFaixa > 0,  FTABELA("S010" , nFaixa , 7 ) ,  0 )  
	nFator	:= nDias/12

	If !lAdm
	  	nDias := Round( ( Month(dData2) - Month(dData1) + 1 ) * nFator , 2 )
	EndIf
	nVenc := nDias
	If Year(dData1) == Year(dFim)
		nProp := nDias             
		nVenc := 0
	EndIf
	aAdd(aPeriodos,{dData1,dData2,nVenc,nProp})
	dInicio := dData2 + 1
	
End

Return nil

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³FatorFerArg     ³Autor³Kelly Soares       ³ Data ³02/09/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Fator de ferias por mes apurado na provisao					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Argentina                                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                            				³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function FatorFerArg(dDataFinal,lMesAdm,nDiasPagos )

Local nRet		:= 0
Local nAnos 	:= 0
Local nDividendo:= 0
Local nDivisor  := 12
Local nPosTab	:= 0
Local cCodTab	:= "01" // Codigo da tabela de escala de ferias padrao LCT
Local aMat		:= {}

DEFAULT lMesAdm := .F.
DEFAULT dDataFinal := dDataBase
DEFAULT nDiasPagos := 0

If SRA->(Type("RA_CODCONV")) <> "U" .And. ;
   !Empty(SRA->RA_CODCONV) .And. ;
	fPosReg("RGM",1,xFilial("RGM")+SRA->RA_CODCONV) .And. ;
	!Empty(RGM->RGM_TABFER)
	cCodTab := RGM->RGM_TABFER
EndIf

If cPaisLoc == "ARG" 
	If lMesAdm
		aMat := fRetMatAdm(M->RA_CIC,xFilial("SRA"),M->RA_MAT,lMesAdm)  
	Else
		aMat := fRetMatAdm(SRA->RA_CIC,SRA->RA_FILIAL,SRA->RA_MAT,lMesAdm)  
	EndIf		
Else 
	aMat := fRetMat(SRA->RA_FILIAL+SRA->RA_MAT)
EndIf	

//# fCalAntig(aMat,nMeses,dDtDemiss,lRetMes)
If dDataBase = dDataFinal
	nAnos := fCalAntig(aMat,,)
Else
	nAnos := fCalAntig(aMat,,dDataFinal)
	nAnos += 1
EndIf
nPosTab := fPosTab("S011",cCodTab,"=",4,nAnos,"<=",6)		
nDividendo := If(nPosTab>0,FTABELA("S011",nPosTab,7),0)
nDividendo -= nDiasPagos
nRet := nDividendo / nDivisor

nTotDiasPer := nDividendo	//# Var pra atualizar pos 24 do aPerFerias
Return nRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasFerArg      ³Autor³Kelly Soares       ³ Data ³02/09/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Total de dias de ferias.                   					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Argentina                                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³lAnoCivil = Ferias por ano civil.       					³
³          ³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³nDias     = Dias de ferias - passar por referencia.			³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasFerArg(lAnoCivil,dDtIni,dDtFim,nDias)

Local dIniArg		:= dDtIni
Local dFimArg		:= dDtFim
Local nHabilesAno	:= 0
Local nHabilesFunc	:= 0
Local nAfastFunc	:= 0
Local nAnos			:= 0
Local aAfast		:= {}
Local aMat			:= {}
Local lRet			:= .F.
Local dData3

If lAnoCivil
	dIniArg := CtoD('01/01/'+StrZero(Year(dDtIni)))
	dFimArg := CtoD('31/12/'+StrZero(Year(dDtIni)))
EndIf                    

aMat := fRetMat(SRA->RA_FILIAL+SRA->RA_MAT)
nAnos := fCalAntig(aMat)

nHabilesAno := DateWorkDay(dIniArg,dFimArg,.T.)//Considera sabado como dia util

dData3	:= 	If( SRA->( FieldPos("RA_DTREC")) > 0 .And. !Empty(SRA->RA_DTREC), SRA->RA_DTREC, SRA->RA_ADMISSA )

If ( dData3 > dIniArg )
	nHabilesFunc := DateWorkDay(dData3,dFimArg,.T.)
Else
	nHabilesFunc := nHabilesAno
EndIf				
// Obtem dias de falta
fBuscaACM(FGETCODFOL("0054"),,dIniArg,dFimArg,"H",,@nAfastFunc)
nAfastFunc *= -1
// Obtem dias de afastamento
fRetAfas(dIniArg,dFimArg,"F",,,,,@aAfast)
aEval(aAfast,{ |X| nAfastFunc += If(X[7]="2",X[2],0) })				
nHabilesFunc -=	nAfastFunc
If nHabilesFunc <= (nHabilesAno/2)
	RCE->(DbSetOrder(1))
	If !Empty(SRA->RA_SINDICA) .And. RCE->(DbSeek(xFilial()+SRA->RA_SINDICA)) .And. !Empty(RCE->RCE_DIASUT)
		nDias := Int(nHabilesFunc/RCE->RCE_DIASUT)
	Else
		nDias := Int(nHabilesFunc/If(nAnos>10,10,If(nAnos>5,15,20)))
	EndIf			
	lRet := .T.
EndIf

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasFerVen      ³Autor³Kelly Soares       ³ Data ³09/12/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Total de dias de ferias e bonificacao.    					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Venezuela                                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³aDias     = Dias de ferias e bono - passar por referencia.	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasFerVen(dDtIni,dDtFim,aDias,lUltimo)

Local nDiasFer	:= 0
Local nDiasBon	:= 0
Local nDiasAdi	:= 0
Local nDiasFal	:= 0
Local nFalFer	:= 0
Local nFalBon	:= 0
Local nDiasTot1	:= 0
Local nDiasTot2	:= 0
Local nAnos		:= 0
Local aMat		:= {}
Local aTab		:= {}
Local aAfast	:= {}
Local lRet		:= .F.                    

fRetTab(@aTab,"S006",4,,dDtFim,SRA->RA_SINDICA)
If !Empty(aTab)

	aMat := fRetMat(SRA->RA_FILIAL+SRA->RA_MAT)
	nAnos := fCalAntig(aMat,1,dDtFim)

	// Apura faltas nos acumulados (SRD)
	fBuscaACM(FGETCODFOL("0054"),,dDtIni,dDtFim,"H",,@nDiasFal)
	nDiasFal *= -1	
	
	// Apura faltas nas ausencias (SR8)
	fBuscaAfast(dDtIni,dDtFim,@aAfast)
	aEval(aAfast,{ |X| nDiasFal += If(X[5]="1",X[11],0) })
    
    If lUltimo
		// Apura faltas lancadas na rescisao
		If Type("cTipoRot") != "U" .and. cTipoRot == "4" .and. oSrr != NIL
			If Fo_Seek(@oSrr, "RR_PD", FGETCODFOL("0054"))
				nDiasFal += Fo_GetVal(@oSrr,"RR_HORAS")
			EndIf
		EndIf	
	EndIf
	
	// Apura dias de ferias
	nDiasFer := aTab[6]
	nDiasAdi := aTab[7]
	nDiasAdi *= nAnos
	nDiasAdi -= If(aTab[9]="N",aTab[7],0)
	If !Empty(aTab[8]) .and. nDiasAdi > aTab[8]
		nDiasAdi := aTab[8]
	EndIf
	nDiasTot1 := nDiasFer + nDiasAdi
	nFalFer := aTab[10]

	//Apura dias de bonificacao
	nDiasBon := aTab[11]
	nDiasAdi := aTab[12]
	nDiasAdi *= nAnos
	nDiasAdi -= If(aTab[14]="N",aTab[12],0)
	If !Empty(aTab[13]) .and. nDiasAdi > aTab[13]
		nDiasAdi := aTab[13]
	EndIf
	nDiasTot2 := nDiasBon + nDiasAdi
	nFalBon := aTab[15]

	aAdd(aDias,Max(nDiasTot1,0))  				// Dias totais de ferias
	aAdd(aDias,Max(nDiasTot2,0)) 				// Dias totais de bono
	aAdd(aDias,If(nDiasFal>nFalFer,nDiasFal,0)) // Faltas para ferias
	aAdd(aDias,If(nDiasFal>nFalBon,nDiasFal,0)) // Faltas para bono
	lRet := .T.	                 

EndIf

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fTipoPrv        ³Autor³Kelly Soares       ³ Data ³19/12/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³fOpcoes para tipo de provisao no calculo. 					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Venezuela                                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                           					³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fTipoPrv()
        
Local cReturn := space(3)
Local cItens    := '123'
Local aItens    := {STR0016,STR0017,STR0018}

If !Empty(&("MV_PAR01"))
	cReturn := &("MV_PAR01")
EndIf

f_Opcoes(@cReturn ,'Tipo de Provisao ?', aItens ,cItens,,,.F.,1,3) 

&("MV_PAR01") := ALLTRIM(cReturn)
          
Return(.T.)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasAntVen      ³Autor³Tiago Malta        ³ Data ³05/12/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Total de dias de Antiguidade.    							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Venezuela                                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³nDias     = Dias de Antiguidade - passar por referencia.	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasAntVen(dDtIni,dDtFim,nDias)

Local nDAntmes	:= 0  // Numero de Dias de direito por mes
Local nMesExp	:= 0  // Numero de Meses de Experiencia
Local nADiasAdi	:= 0  // Numero de Dias de direito por Ano
Local nTotAnos 	:= 0  // Total de Anos desde a Admissao
Local nAdi1Ano	:= 0  // Numero do ano que começa a contar de direito 1o ou 2o
Local nLimite   := 0  // Limite de Numero de Dias de direito por Ano
Local cAcmDAno  := 0  // Indica se acumula dias por ano
Local aTab		:= {} 
Local nx		:= 0             

fRetTab(@aTab,"S016",4,12,dDtFim,SRA->RA_SINDICA)

If !Empty(aTab)

	// Apura dias de Antiguidade
	nDAntmes := aTab[6]
	nMesExp  := aTab[7]
	nADiasAdi:= aTab[8]
	nAdi1Ano := If(aTab[9]="S",1,2)
	nLimite  := aTab[10]
	cAcmDAno := aTab[11]
	nTotMese := DateDiffMonth( dDtIni , dDtFim )
	nTotAnos := NoRound(nTotMese / 12 ,0)
	nTotMese := ( ( nTotMese - nMesExp ) * nDAntmes ) 
	nQtdAnt  := nADiasAdi
	
	For nx:=nAdi1Ano TO nTotAnos
	
		nTotMese += nQtdAnt
	
		If cAcmDAno	== "S"
			If nQtdAnt < nLimite
				nQtdAnt += nADiasAdi
			EndIf 
		EndIf
	
	Next nx
	
	If nTotMese > 0
		nDias := nTotMese
	EndIf

EndIf

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasFerAng      ³Autor³Tiago Malta        ³ Data ³13/08/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Total de dias de ferias .                  					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Angola                                                      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³aDias     = Dias de ferias - passar por referencia.			³
³          ³lAdmissa  = Identifica se eh correspondente a admissao.     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasFerAng(dDtIni,dDtFim,aDiasRet,lAdmissa)

Local nDiasFer	:= 0   
Local nMinDias	:= 0   
Local nDiasAdm	:= 0
Local nDMinAdm	:= 0
Local nMesComp	:= 0
Local nAvos     := 0
Local nTotDFAng	:= 0
Local aTab		:= {}
Local lRet		:= .F.
Local lAdm		:= .F.
Local lProv		:= (Type("c__roteiro") <> "U" .and. c__roteiro $ "PRV")

DEFAULT aDiasRet := {} 
DEFAULT lAdmissa := .F.

If Type('dDataDem') == "U"
	dDataDem  := CtoD(ALLTRIM(Posicione( "RCA",1,xFilial("RCA")+"DDATADEM","RCA_CONTEU" )))
EndIf

//Arredonda dias de ferias. Padrao Nao ("2")
If Type("P_ARRDFER") == "U"
	P_ARRDFER := &( AllTrim(Posicione("RCA",1,xFilial("RCA")+"P_ARRDFER","RCA_CONTEU")) )
	P_ARRDFER := If( P_ARRDFER == Nil, .T., P_ARRDFER )
EndIf

fRetTab(@aTab,"S004",,,dDtFim)
If !Empty(aTab)
    
	nDiasFer   := aTab[5]
	nMinDias   := aTab[6]	
	nDiasAdm   := aTab[7]
	nDMinAdm   := aTab[8]	
	nMesComp   := aTab[9]
	
	If lProv .AND. dDtFim >= dDataate
		dDtFim := dDataate
	EndIf
	
    fDesDFAng( dDtIni, dDtFim , nMesComp , @aDiasRet )
    
    If Len(aDiasRet) > 0
    
	    lAdm		:= Year(SRA->RA_ADMISSA) == Year(dDtIni)
	    nAvos		:= aDiasRet[1]
	   
	    // Periodo de Admissao
	    If lAdm
	    	nTotDFAng := IIf( (nDiasAdm * nAvos) < nDMinAdm , nDMinAdm , If( P_ARRDFER, Round((nDiasAdm * nAvos),0), nDiasAdm * nAvos) )
	       
	    	//Se tiver 12 avos o periodo eh completo
	    	If nAvos == 12
	    		nTotDFAng := nDiasFer
	    	EndIf 
	    
	    // Periodo de Demissao ou Periodos Vencidos de Provisao
	    ElseIf lProv .Or. (!lProv .and. !EMPTY(DDATADEM) .and. dDataDem >= dDtIni .and. dDataDem <= dDtFim)
		    nTotDFAng := Round((nDiasFer / 12 * nAvos),0)

	    EndIf
	    
		//Quantidade minima de dias para pagar no ano de admissao ou demissao
	    If lAdm .Or. !lProv
    		aDiasRet[4]	:= If( !lProv, nDMinAdm, 0 )
	    EndIf
	    
		//No fechamento calcula somente os dias proporcionais
	    If IsInCallStack("Gpem120")
	    	nTotDFAng := If( P_ARRDFER, Round((nDiasAdm * nAvos),0), nDiasAdm * nAvos )
	    EndIf
	    
		If nTotDFAng > 0
		    aAdd( aDiasRet , nTotDFAng ) // Total de Dias de Ferias.
		EndIf
		
		lRet := .T.
	    
    EndIf
EndIf

If lAdmissa
	Return( nTotDFAng )
EndIf

Return lRet  

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fDesDFAng       ³Autor³Tiago Malta        ³ Data ³13/08/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Apuração dos Avos de Ferias e Desconto de ausencia.        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Angola                                                      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³aDias     = Dias de ferias - passar por referencia.     	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Function fDesDFAng( dDtIni, dDtFim , nLimFalFer , aDias )

Local aAfast	:= {}
Local nDiasFal  := 0
Local nDConvF   := 0 
Local nTDiasFal := 0
Local nTDConvF  := 0 
Local nCount    := 0
Local nIni      := Month(dDtIni)
Local cIni      := MesAno(dDtIni)
Local cFim      := MesAno(dDtFim)
Local nAvos     := 0
Local nDMes     := 0  
Local dDtaini   := CtoD('//')
Local dDtafim   := CtoD('//')
Local cAno      := Strzero(Year(dDtIni),4)
Local P_DIASMES := Alltrim( Posicione( "RCA",1,xFilial("RCA")+"P_DIASMES","RCA_CONTEU" ) )

nCount := nIni 
   
	While cIni <= cFim 
	    
		If cAno + Strzero(nCount,2) == AnoMes(dDtIni)
			dDtaini := dDtIni
			dDtafim := CtoD( Alltrim(STR(f_UltDia(dDtIni)))+Substr(DtoC(dDtIni),3,10) )
		ElseIf ( ( cAno + Strzero(nCount,2) ) == cFim )
	  		dDtaini := CtoD( '01/'+STRZERO(nCount,2)+'/'+cAno )
	  		dDtafim := dDtFim
	 	Else
	  		dDtaini := CtoD( '01/'+STRZERO(nCount,2)+'/'+cAno )
	  		dDtafim := CtoD( Alltrim(STR(f_UltDia(dDtaini))) +'/'+ STRZERO(nCount,2)+'/'+cAno )
		EndIf
				
		// Apura faltas nas ausencias (SR8)
		fBuscaAfast(dDtaini,dDtafim,@aAfast) 
		
		Aeval( aAfast, { |x| iif( x[05]=="1"      , nDiasFal += x[11] , 0 ) } )
		Aeval( aAfast, { |x| iif( x[14]=="1"      , nDConvF  += x[11] , 0 ) } )

		If cPaisLoc $ "BRA" 
			nDMes     := IIf(P_DIASMES=='S',f_UltDia(dDtaini),30)
		Else
			nDMes     := 30
		endif
		
		If Day(dDtaini) > Day(FIRSTYDATE(dDtaini)) .AND. cIni <> cFim
			nDMes := Abs(Day(dDtaini) - 30)    
		ElseIf Day(dDtaini) > Day(FIRSTYDATE(dDtaini)) .AND. cIni == cFim
			nDMes := Day(dDtFim)
			If MesAno(dDtIni) == MesAno(SRA->RA_ADMISSA)
				nDMes := nDMes - Day(SRA->RA_ADMISSA) + 1
			EndIf			
		ElseIf Day(dDtaFim) <>  f_UltDia(dDtaFim)
			nDMes := Day(dDtaFim)		
		EndIf
		
		nAvos += IIf( ( nDMes - ( nDiasFal + nDConvF) ) >= nLimFalFer , 1 , 0 ) 
		
		nTDiasFal  += nDiasFal
		nTDConvF   += nDConvF
   		nDiasFal   := 0
   		nDConvF    := 0 
   		nDGozo     := 0
   		
   		
   		nCount ++
   		
   		If nCount > 12	
	   		nCount := 1
	   		cAno := Soma1(cAno)
   		EndIf 
   		
		cIni := cAno+StrZero(nCount,2)
   		
	EndDo 
	
	aAdd( aDias , nAvos     ) // Avos de Ferias.
	aAdd( aDias , nTDiasFal ) // Total de Dias de Ausencia.
	aAdd( aDias , nTDConvF  ) // Total de Dias Convertidos em Ferias.
	aAdd( aDias , 0  		) // Total Minimo de dias a serem pagos.

Return()

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasFerPer      ³Autor³Erika K.           ³ Data ³18/06/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Total de dias de ferias .                  					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Peru                                                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³aDiasFer  = passar por referencia (retorno)					³
³          ³     aDiasFer[1]: Total de dias de Ferias.                	³
³          ³     aDiasFer[2]: Avos de ferias.  							³
³          ³     aDiasFer[3]: Total de dias de ausencia.                ³
³          ³     aDiasFer[4]: Avos de ausencias.                	    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasFerPer(dDtIni,dDtFim,aDiasFer)

Local nDFerias  := 0

aDiasFer	:= { , , , , }

If Type('dDataDem') == "U"
	dDataDem  := CtoD(AllTrim(Posicione( "RCA",1,xFilial("RCA")+"DDATADEM","RCA_CONTEU" )))
EndIf

If SRA->RA_MEIOPER == "1" 
	If cPaisloc $ "PER"
		nDFerias:= Iif(fTabela("S008",01,07) <> Nil, fTabela("S008",01,07), 0)
	else
		nDFerias:= Iif(fTabela("S017",01,07) <> Nil, fTabela("S017",01,07), 0)
	EndIF
Else
	If cPaisloc $ "PER"
	nDFerias:= Iif(fTabela("S008",01,06) <> Nil, fTabela("S008",01,06), 0)
	else
	nDFerias:= Iif(fTabela("S017",01,06) <> Nil, fTabela("S017",01,06), 0)
	EndIF
EndIf        
                                            

aDiasFer[1]:= nDFerias 
		                          
fDesDFPer( dDtIni, dDtFim , nDFerias , @aDiasFer )	

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fDesDFPer       ³Autor³Erika K.           ³ Data ³13/08/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Apuração dos Avos de Ferias e Desconto de ausencia.        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Peru                                                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³nDiasFer  = Dias de ferias.						 			³
³          ³aDias  = Dias de ferias.						 			³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Function fDesDFPer( dDtIni, dDtFim , nDiasFer, aDias )

Local aAfast	:= {}
Local nDiasFal  := 0 
Local nTDiasFal := 0 
Local nMes      := 0
Local cIni      := MesAno(dDtIni)
Local cFim      := MesAno(dDtFim)
//Local nAvos     := 0
Local nAvosFer  := 0
Local nAvosTot  := 0
Local nDFerMes  := 0  
Local nDiasMes	:= 0
Local dDtaini   := CtoD('//')
Local dDtafim   := CtoD('//')
Local cAno      := Strzero(Year(dDtIni),4)
Local P_DIASMES := Alltrim( Posicione( "RCA",1,xFilial("RCA")+"P_DIASMES","RCA_CONTEU" ) )

nMes := Month(dDtIni)
   
	While cIni <= cFim  //meses do periodo aquisitivo 
	    
		If cAno + Strzero(nMes,2) == AnoMes(dDtIni)
			dDtaini := dDtIni
			dDtafim := CtoD( Alltrim(STR(f_UltDia(dDtIni)))+Substr(DtoC(dDtIni),3,10) )
		ElseIf ( ( cAno + Strzero(nMes,2) ) == cFim )
	  		dDtaini := CtoD( '01/'+STRZERO(nMes,2)+'/'+cAno )
	  		dDtafim := dDtFim
	 	Else
	  		dDtaini := CtoD( '01/'+STRZERO(nMes,2)+'/'+cAno )
	  		dDtafim := CtoD( Alltrim(STR(f_UltDia(dDtaini))) +'/'+ STRZERO(nMes,2)+'/'+cAno )
		EndIf
				
		// Apura faltas nas ausencias (SR8)
		fBuscaAfast(dDtaini,dDtafim,@aAfast) 
		
		Aeval( aAfast, { |x| iif( x[05] == "1" , nDiasFal += x[11] , 0 ) } )   
		If cPaisLoc $ "BRA"
			nDiasMes:= nDFerMes := IIf(P_DIASMES=='S',f_UltDia(dDtaini),30)
		else
			nDiasMes:= nDFerMes := 30
		EndIf
		
		
		If Day(dDtaini) > Day(FIRSTYDATE(dDtaini))// .AND. cIni <> cFim
			nDFerMes := Abs(Day(dDtaini) - 30) + 1   
		//ElseIf Day(dDtaini) > Day(FIRSTYDATE(dDtaini)) .AND. cIni == cFim
		//	nDFerMes := Day(dDtFim) 
		ElseIf Day(dDtaFim) <>  f_UltDia(dDtaFim)
			nDFerMes := Day(dDtaFim)		
		EndIf                                     
		
		
		
		If cpaisLoc $ "BRA"
			If P_DIASMES <> 'S'
				nDFerMes:= Min(nDFerMes, 30)
			EndIf
		else
			nDFerMes:= 30
		EndIF
		nDFerias:= Max(nDFerMes - nDiasFal, 0)

		nAvosTot += (( nDiasFer / 12 ) / nDiasMes ) * nDFerMes
		nAvosFer += (( nDiasFer / 12 ) / nDiasMes ) * nDFerias
		
		nTDiasFal  += nDiasFal
   		nDiasFal   := 0
   		   		
   		nMes ++                                                 
   		
   		If nMes > 12	
	   		nMes := 1
	   		cAno := Soma1(cAno)
   		EndIf 
   		
		cIni := cAno+StrZero(nMes,2)
   		
	EndDo 
	
	aDias[2]:= nAvosFer     // Avos de Ferias.
	aDias[3]:= nTDiasFal // Total de Dias de Ausencia.
	aDias[4]:= nAvosTot - nAvosFer // Avos de faltas.
	
Return()

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³FatorFerEqu     ³Autor³Kelly Soares       ³ Data ³06/10/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Fator de ferias por mes apurado no periodo 					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Equador                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                            				³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function FatorFerEqu(dDtIni, dDtFim, nFFer, nFAdi, nFDir, nADir)

Local nDFer		 := 0
Local nDAdi		 := 0
Local nMin		 := 0
Local nMax		 := 0
Local nIdade	 := 0
Local nAnos		 := 0
Local nPosTab	 := 0
Local nAux		 := 0
Local lRet		 := .T.
Local aMat		 := {}
Local aTab		 := {}
Local aTabela	 := {}

DEFAULT nFFer := 0
DEFAULT nFAdi := 0
DEFAULT nFDir := 0
DEFAULT nADir := 0

nIdade	:= Calc_Idade(dDtFim, SRA->RA_NASC)

FCARRTAB( @aTabela, "S015", dDtFim )

If Len(aTabela) >= 1            
	For nAux:= 1 to Len(aTabela)
		If aTabela[nAux,1] == "S015"     
			aAdd(aTab, aTabela[nAux])
		EndIf
	End
EndIf

nPosTab := aScan( aTab , { |x| x[5] >= nIdade } )

If Empty(nPosTab)
	lRet := .F.
Else
	
	nDFer	:= aTab[nPosTab,6]
	nMin	:= aTab[nPosTab,7]
	nDAdi	:= aTab[nPosTab,8]
	nMax	:= aTab[nPosTab,9]

	aMat	:= fRetMat(SRA->RA_FILIAL + SRA->RA_MAT)
	nAnos	:= fCalAntig(aMat,1,dDtFim + 1)
	
	If nAnos > nMin
		nAnos -= nMin
		nDAdi *= nAnos
		If nDAdi > nMax
			nDAdi := nMax
		EndIf
	Else
		nDAdi := 0
	EndIf
	
	nFFer := nDFer / 12
	nFAdi := nDAdi / 12
	nFDir := nDFer
	nADir := nDAdi

EndIf

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DiasFerEqu      ³Autor³Erika K.           ³ Data ³13/08/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Obtem dias de ferias no periodo.           					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Equador                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³dDtIni    = Data inicial para apuracao.						³
³          ³dDtFim    = Data final para apuracao.						³
³          ³aDiasFer  = passar por referencia (retorno)					³
³          ³     aDiasFer[1]: Avos de ferias.  							³
³          ³     aDiasFer[2]: Total de dias de ausencia.                ³
³          ³     aDiasFer[3]: Dias Totais de Ferias.                	³
³          ³     aDiasFer[4]: Dias Adicionais de Ferias.               	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function DiasFerEqu(dDtIni,dDtFim,aDiasFer,dLimite)

Local nFer		:= 0
Local nAdic		:= 0
Local nDirFer	:= 0
Local nDirAdi	:= 0
Local nDiasFal  := 0
Local nDiasMes	:= 0
Local nDFerMes	:= 0 
Local nTDiasFal := 0 
Local nTotFer	:= 0
Local nTotAdi	:= 0

Local cIni      := ""
Local cFim      := ""
Local P_DIASMES := Alltrim( Posicione( "RCA",1,xFilial("RCA")+"P_DIASMES","RCA_CONTEU" ) )

Local dDtaini   := CtoD('//')
Local dDtafim   := CtoD('//')
Local dDtAux	:= CtoD('//')

Local aAfast	:= {}

DEFAULT dLimite := dDataBase

If !Empty(SRA->RA_DEMISSA)
	dDtFim := Min(dDtFim,SRA->RA_DEMISSA)
ElseIf dDtFim > dLimite
	cDtAux := StrZero(Day(dDtIni),2) + "/" + StrZero(Month(dLimite),2) + "/" + StrZero(Year(dLimite),4)
	dDtFim := Max(CtoD(cDtAux) - 1,dDtIni)
EndIf
      
aDiasFer  := { , , , , }
cIni      := MesAno(dDtIni)
cFim      := MesAno(dDtFim)

If FatorFerEqu(dDtIni, dDtFim, @nFer, @nAdic, @nDirFer, @nDirAdi) .AND. (dDtFim >= dDtIni)

	While dDtIni < dDtFim

		dDtAux := Min(dDtIni + f_UltDia(dDtIni) - 1,dDtFim)

		// Apura faltas nas ausencias (SR8)
		fBuscaAfast(dDtaini,dDtafim,@aAfast) 		
		Aeval( aAfast, { |x| iif( x[05] == "1" , nDiasFal += x[11] , 0 ) } )    
		
		If cPaisLoc $ "BRA"
			nDiasMes := IIf(P_DIASMES=='S',f_UltDia(dDtaini),30)
		
		Else
			nDiasMes := 30
		EndIF
		
		
	
		nDFerMes := nDiasMes
		
		nDFerMes:= Max(nDFerMes - nDiasFal, 0)
		
		nTotFer += ( nFer  / nDiasMes ) * nDFerMes 
		nTotAdi += ( nAdic / nDiasMes ) * nDFerMes 
		
		nTDiasFal  += nDiasFal
   		nDiasFal   := 0
	
		dDtIni := dDtAux + 1
		
    EndDo	
EndIf
	
aDiasFer[1]	:= Round(nDirFer,2)		//Dias de direito a ferias
aDiasFer[2]	:= Round(nDirAdi,2)		//Dias de direito a adicionais
aDiasFer[3]	:= Round(nTotFer,2)		//Dias adquiridos de ferias
aDiasFer[4]	:= Round(nTotAdi,2)		//Dias adquiridos de adicionais
aDiasFer[5]	:= Round(nTDiasFal,2)	//Dias de faltas
	
Return

/*/{Protheus.doc} fCodAbon
Função que some proventas que incidem para Férias (RV_REFFER) mas
que não são ref à Abono (RV_CODABO)
@author Raquel Andrade
@since 06/12/2018
@version P12.1.17
/*/
Function fCodAbon(nValor, nTipo)
Local cCodAbon	:= ""
Local cCodAbMS	:= ""
Local cPdAux	:= ""
Local nVlrAbn	:= 0
Local nX		:= 0
Local nPos1		:= 0
Local nPos2		:= 0
Local lMesSeg	:= .F.

/*
nTipo 1 == Todas as verbas de abono serão subtraídas
nTipo 2 == Todas as verbas de abono mês serão somadas
nTipo 3 == Todas as verbas de abono mês seguinte serão somadas
*/
If SRV->(ColumnPos("RV_CODABO")) > 0 //Campo não existe na 12.1.17
	For nX := 1 to Len(aPd)
		If RetValSRV( aPd[nX][1], SRA->RA_FILIAL, "RV_REFFER" )  == "S"
			// Verifica se verba possio Cód. Abono informado
			cCodAbon	:= RetValSRV( aPd[nX][1], SRA->RA_FILIAL, "RV_CODABO" ) 
			If !Empty(cCodAbon)
				If nTipo > 1
					lMesSeg := !Empty(RetValSRV( cCodAbon, SRA->RA_FILIAL, "RV_CODMSEG" ))
				EndIf			
				If !( cCodAbon $ cPdAux )
					// Verifica se essa verba está no aPd
					nPos1 := aScan(aPD,{ |X| X[1] == cCodAbon .And. X[9] # "D" })
					If nPos1 > 0
						If nTipo == 1 .or. ( nTipo == 2 .and. !lMesSeg ) .or. ( nTipo == 3 .and. lMesSeg ) 					
							nVlrAbn	+= aPd[nPos1][5]
							cPdAux += cCodAbon + "*"
						EndIf
					EndIf
				EndIf
				If nTipo == 1 .Or. nTipo == 3
					cCodAbMS	:= fBusMesSeg(cCodAbon)
					If !Empty(cCodAbMS) .and. !( cCodAbMS $ cPdAux )
						If nTipo == 3
							lMesSeg := !Empty(RetValSRV( cCodAbMS, SRA->RA_FILIAL, "RV_CODMSEG" ))
						EndIf				
					
						If ( nTipo <> 3 .or. lMesSeg )						
							nPos2 := aScan(aPD,{ |X| X[1] == cCodAbMS .And. X[9] # "D" })
							If nPos2 > 0
								nVlrAbn	+= aPd[nPos2][5]
								cPdAux += cCodAbMS + "*"
							EndIf
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf
	Next nX
	
	If nTipo == 1 // Férias
		nValor	-= nVlrAbn // Remove verbas Ref. Férias que possuem Código de Abono (RV_CODABO) (e Mês Seguinte da mesma se houver)
	ElseIf nTipo == 2 // Abono Mês
		nValor	+= nVlrAbn // Adiciona verbas Ref. Férias que possuem Código de Abono (RV_CODABO)
	ElseIf nTipo == 3 // Abono Mês Seguinte
		nValor	+= nVlrAbn // Adiciona verbas Ref. Férias que possuem Código Abono Mês Seguinte
	EndIf
EndIf

Return
