#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "TOPCONN.CH"
#INCLUDE "FWADAPTEREAI.CH"
                     
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PonxFun   ³ Autor ³ *EQUIPE RH ADVANCED*        ³ Data ³27/06/2014³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Biblioteca de Funções Utilizadas nas Mensagens Únicas            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Void                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Genérico                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³                     ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³   Data   ³    FNC   ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Christiane V³27/06/2014³M_RH006/  ³Criação das funções auxiliares para serem ³±±
±±³            ³          ³ 296903   ³utilizadas nas mensagens únicas do ponto. ³±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³FUNTOTHRº   Autor ³Lutchen Henrique   º Data ³  13/01/2014  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Recebe funcionario e retorna total de horas do func no mês. º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºSintaxe   ³Exp1 => Variavel com conteudo xml para envio/recebimento.   º±±
±±º          ³Exp2 => Tipo de transacao. (Envio/Recebimento)              º±±
±±º          ³Exp3 => Tipo de mensagem. (Business Type, WhoIs, etc)       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP5                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function CALTOTHR(cMat,dDataDe,dDataAte,cFilAnte,nHrTrab,nHrNTrb)

Local cDet			:= ''				//-- Linha de detalhe da impressao
Local cSeqAnt		:= '  '				//-- Sequencia anterior
Local nX			:= 0				//-- Variavel de loop for
Local aAbon			:= {}				//-- Itens de abono GERAL
Local aNTra			:= {}				//-- Itens de hrs nao trabalhadas GERAL
Local aAdic			:= {}				//-- Itens de hrs adicionais GERAL     
Local aCodHeAut		:= {}				//-- Codigos de hora extra autorizada
Local aCodAbat		:= {}				//-- Codigos de horas nao trabalhadas
Local aTurnos		:= {}				//-- Trocas de turno do periodo
Local aPeriodos		:= {}				//-- Periodos a imprimir
Local cColuna01		:= ''				//-- Detalhe da coluna 1 do relatorio
Local cColuna02		:= ''				//-- Detalhe da coluna 2 do relatorio
Local cColuna03		:= ''				//-- Detalhe da coluna 3 do relatorio
Local cAlias		:= 'SPC'			//-- Alias do arquivo a partir do qual os lancamentos serao lidos
Local lSemApo		:= .F.				//-- Indicador se Existe Apontamentos     
Local nHrsPrev		:= 0				//-- Horas previstas
Local nHrsReal		:= 0				//-- Horas reais
Local nPReal		:= 0				//-- Percentual horas reais
Local nHrsAdic		:= 0				//-- Horas adicionais
Local nPAdic		:= 0				//-- Percentual horas adicionais
Local nPNTra		:= 0				//-- Percentual horas nao trabalhadas
Local nHrsAbon		:= 0				//-- Horas abonadas
Local nPAbo			:= 0				//-- Percentual horas abonadas
Local dPerIni		:= Ctod("  /  /  ")	//-- Data de inicio do periodo
Local dPerFim		:= Ctod("  /  /  ")	//-- Data fim do periodo
Local dPonmesIni	:= Ctod("  /  /  ")	//-- Data de inicio do periodo aberto
Local dPonmesFim	:= Ctod("  /  /  ")	//-- Data fim do periodo aberto
Local cAcessaSRA	:= &("{ || " + ChkRH("ABSENT","SRA","2") + "}")
Local dtInicio 		:= Ctod('') 		//-- Auxiliar Inicio do Periodo considerando Data Admissao				//-- Trocas de turno do periodo                                                                                 
Local nModAux		:= nModulo 

Private cFilRegra  := ''				//-- Filial para uso na consulta do arquivo Regra
Private cTnoAnt    := ''				//-- Turno anterior
Private cCcAnt     := ''				//-- Centro de custo anterior
Private nHrsnTra   := 0					//-- Horas nao trabalhadas
Private aTabPadrao := {}				//-- Tabela de horario padrao
Private aTabCalend := {}				//-- Calendario de trabalho
Private aAdicT     := {}				//-- Totalizador hrs adicionais turno
Private aNTraT     := {}				//-- Totalizador hrs nao trab. turno
Private aAbonT     := {}				//-- Totalizador hrs abonadas turno
Private aAdicC     := {}				//-- Totalizador hrs adicionais centro de custo
Private aNTraC     := {}				//-- Totalizador hrs nao trabalhadas centro de custo
Private aAbonC     := {}				//-- Totalizador hrs abonadas centro de custo
Private aAdicF     := {}				//-- Totalizador hrs adicionais filial
Private aNTraF     := {}				//-- Totalizador hrs nao trabalhadas filial
Private aAbonF     := {}				//-- Totalizador hrs abonadas filial
Private aAdicE     := {}				//-- Totalizador hrs adicionais empresa
Private aNTraE     := {}				//-- Totalizador hrs nao trabalhadas empresa
Private aAbonE     := {}				//-- Totalizador hrs abonadas empresa
Private aTotalF    := {}
Private aTotalE    := {}
Private aTotalC    := {}
Private aTotalT    := {}  
Private aInfo      := {} 
Private lPrimVez   := .T.

nModulo:= 7 //Altera modulo para GPE

SRA->(dbSetOrder(1))
If SRA->(dbSeek(xFilial("SRA")+cMat))
	
	//Dados da empresa/filial
	fInfo(@aInfo,SRA->RA_FILIAL)
	
	//Carrega os codigos de horas nao trabalhadas
	fCarCodAbat(@aCodAbat)                     
	
	cFilRegra:= fFilFunc("SPA") 
	
	//Carrega periodo de Apontamento Aberto
	CheckPonMes( @dPerIni , @dPerFim , .F. , .T. , .F. , cFilAnte )
	
    //Obtem o Periodo Aberto 
	GetPonMesDat( @dPonMesIni , @dPonMesFim , cFilAnte )
	
	//Retorna Periodos de Apontamentos Selecionados
	aPeriodos := Monta_per( dDataDe , dDataAte , cFilAnte , SRA->RA_MAT , dPerIni , dPerFim )    
	
	For nX := 1 To Len(aPeriodos)
		
		cSeqTurn := '**'
		
		//-- Chamada a fTrocaTno() para identificar o turno correto a ser passado para retseq.
		fTrocaTno(aPeriodos[nX,1], aPeriodos[nX,2], @aTurnos)
		
		cSeqTurn := SRA->RA_SEQTURN
		cTno     := If(Len(aTurnos)==0,SRA->RA_TNOTRAB,aTurnos[1,1])
		
		//-- Se periodo for anterior ao atual arquivo de trabalho sera SPH
		If ( aPeriodos[nX,2] < dPonMesIni )
			cAlias := 'SPH'
		Else
			cAlias := 'SPC'
		Endif
		
		//-- Considera a Data de Admissao para o Inicio do Periodo
		dtInicio:=Max(aPeriodos[nX,3],SRA->RA_ADMISSA)                    
		
		//-- Monta calendario com horarios de trabalho
		CriaCalend( Max(aPeriodos[nX,1],SRA->RA_ADMISSA),aPeriodos[nX,2],cTno,cSeqTurn,aTabPadrao,@aTabCalend,SRA->RA_FILIAL,SRA->RA_MAT,SRA->RA_CC,@aTurnos,NIL,NIL,.F.)
		
		//-- Apura as horas trabalhadas a partir do calendario de trabalho
		nHrsPrev := fHrsPrev(aTabCalend,dtInicio,aPeriodos[nX,4])
		
		//-- Apura as horas adicionais, horas nao trabalhadas e as horas abonadas, a partir do SPC e/ou SPH
		nHrsAdic	:= 0
		nHrsAbon	:= 0		
		nHrsnTra	:= 0		
		fSomaHrs(aCodAbat, aCodHeAut, @aAdic, @aNTra, @aAbon, @nHrsAdic, @nHrsnTra, @nHrsAbon, dtInicio, aPeriodos[nX,4], cAlias, @lSemApo)
		
		//-- Apura as horas efetivamente trabalhadas ( previstas - nao trab )
		If ! Empty(nHrsnTra)
			nHrsReal := SubHoras(nHrsPrev,nHrsnTra)			
			nHrsReal := If(nHrsReal < 0.00, 0.00, nHrsReal)
		Else
			If lSemApo                                                                                                  
				//Verifica se trata de um periodo de apontamento futuro
				If ( aPeriodos[nX, 1] > dPonMesFim )
					nHrsReal := 0.00
				Else                                             
					nHrsReal := nHrsPrev
				Endif
			Else 
				nHrsReal := nHrsPrev
			Endif	   	                   
		Endif	
	Next nX
	
EndIf

nHrTrab := nHrsReal
nHrNTrb := nHrsnTra

nModulo:= nModAux //Restaura modulo

Return()


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fCarCodAbat³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fCarCodAbat(aCodAbat)

If SP9->(dbSeek(fFilFunc('SP9')))
	Do While ! SP9->(Eof()) .And. SP9->P9_FILIAL == fFilFunc('SP9')
		If SP9->P9_TIPOCOD = "2" .And. !SP9->P9_IDPON == "005A" // Evento de Desconto
			Aadd(aCodAbat, SP9->P9_CODIGO)
		Endif
		SP9->(dbSkip())
	Enddo
Endif

Return Nil


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Monta_Per³ Autor ³Equipe Advanced RH     ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function Monta_Per( dDataIni , dDataFim , cFil , cMat , dIniAtu , dFimAtu )

Local aPeriodos := {}
Local cFilSPO	:= xFilial( "SPO" , cFil )
Local dAdmissa:= SRA->RA_ADMISSA
Local dPerIni := Ctod("//")
Local dPerFim := Ctod("//")
Local dData	:= Ctod("//")  

SPO->( dbSetOrder( 1 ) )
SPO->( dbSeek( cFilSPO , .F. ) )

//Obtem os periodos Historicos se estiverem compreendidos pelo periodo solicitado
While SPO->(!Eof()) .and. (SPO->PO_FILIAL == cFilSPO )
	
    dPerIni := SPO->PO_DATAINI
    dPerFim := SPO->PO_DATAFIM  
	
    //-- Filtra Periodos de Apontamento a Serem considerados em funcao do Periodo Solicitado
    IF dPerFim < dDataIni .OR. dPerIni > dDataFim                                                      
		SPO->( dbSkip() )  
		Loop  
    Endif
	
    //-- Somente Considera Periodos de Apontamentos com Data Final Superior a Data de Admissao
	If ( dPerFim >= dAdmissa )
		aAdd( aPeriodos , { dPerIni , dPerFim , Max( dPerIni , dDataIni ) , Min( dPerFim , dDataFim ) } )
	EndIf
	
	SPO->( dbSkip() )
	
End While

//Inclui o periodo atual se estiver compreendido pelo periodo solicitado
IF ( aScan( aPeriodos , { |x| x[1] == dIniAtu .and. x[2] == dFimAtu } ) == 0.00 )
	dPerIni := dIniAtu
	dPerFim	:= dFimAtu 
	IF !(dPerFim < dDataIni .OR. dPerIni > dDataFim)
		IF ( dPerFim >= dAdmissa )
			aAdd(aPeriodos, { dPerIni, dPerFim, Max(dPerIni,dDataIni), Min(dPerFim,dDataFim) } )
		EndIF
    Endif
EndIF

If !Empty(aPeriodos)
	dData	:= aPeriodos[ Len(aPeriodos), 2 ] + 1    
	dPerIni	:= aPeriodos[ Len(aPeriodos), 1 ]     
	dPerFim	:= aPeriodos[ Len(aPeriodos), 2 ]     
Else
	dData	:= dDataIni
	dPerIni	:= dIniAtu 
	dPerFim	:= dFimAtu 
endif

//Inclui periodos futuros se estiverem compreendidos pelo periodo solicitado
If dData > dFimAtu 
	While .T.
		If !PerAponta(@dPerIni,@dPerFim,dData,Nil, Nil, .T., Nil, Nil, .T.)
			HELP(' ',1,'PERNCAD')
			Return Nil
		Endif
		
		//-- Filtra Periodos de Apontamento a Serem considerados em funcao do Periodo Solicitado
		IF ( dPerFim >= dAdmissa )  .and.  !(   dPerFim < dDataIni .OR. dPerIni > dDataFim )
			Aadd(aPeriodos, { dPerIni, dPerFim, Max(dPerIni,dDataIni), Min(dPerFim,dDataFim) })
		Endif
		
		If dDataFim > dPerFim
			dData := dPerFim + 1
		Else
			Exit
		Endif
		
	Enddo
Endif

Return( aPeriodos )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fHrsPrev ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fHrsPrev(aTabCalend,dPerIni,dPerfim)

Local nHrsPrev := 0
Local nX       := 0
Local dData    := 0
Local cTipodia 		:= ''
Local lTrbFeriado	:=.F.
Local cFRegra		:= ''   
Local cOrdem		:= '!!'  
Local lAfastado		:= .F. 
Local lAfastPrev		:= .F.
Local lForaPer		:= .F.

Pergunte('ABSENT',.F.) //carrega Grupo de Perguntas para alimentar a variavel lAfastPrev
lAfastPrev	:= If(MV_PAR18 == 1,.T.,.F.)	//Considera o Afastamento como Previsto ? Sim/Nao

For nX := 1 To Len(aTabCalend)
    
	dData := aTabCalend[nX,1]      
	
    //Somente verifica afastamento para Ordem ainda nao lida
    If cOrdem <> aTabCalend[nX,2]
		cOrdem	:= aTabCalend[nX,2]  
		//-- Desconsidera as datas fora do periodo solicitado
		lForaPer	:= (dData < dPerIni .OR. dData > dPerFim)  .OR. SRA->( RA_SITFOLH $ 'DúT' .and. dData > RA_DEMISSA ) 
	   	//-- Desconsidera as datas de afastamento
		lAfastado:=  fAfasta(SRA->RA_FILIAL,SRA->RA_MAT,dData)
	Endif
	
    //Desconsidera a data de APONTAMENTO se estiver fora do periodo solicitado ou se o funcionario esta afastado 
    //e nao se quer considerar o afastamento.
    If lForaPer .OR. (lAfastado .AND. !lAfastPrev)
		Loop
    Endif  
    
	    //-- Verifica se funcionario Trabalha em Feriado
    If cfRegra <> ( cFilRegra + aTabCalend[ nX , 23 ] )
		cFRegra		:= ( cFilRegra + aTabCalend[ nX , 23 ]  )
		lTrbFeriado	:= GetTrbFer( cFilRegra , aTabCalend[ nX , 23 ] )
	Endif
	
	cTipoDia	:= IF( aTabCalend[ nX , 19 ] , IF(  aTabCalend[ nX , 10 ]  == "E" , aTabCalend[ nX , 06 ] , IF(!lTrbFeriado,"F",aTabCalend[ nX , 06 ] ) ) , aTabCalend[ nX , 06 ] )                  
    
    //-- Descarta as Horas da Tabela para Dias diferentes de Trabalhado
    If cTipoDia !='S' .AND. lAfastado .AND. !lAfastPrev                                                 
		Loop
    Endif
	
	//-- Apura os dias que o funcionario esta afastado
	If cTipoDia =='N' .AND. lAfastado .AND. lAfastPrev
		If !Empty(aTabCalend[nX,7])
			nHrsnTra := SomaHoras(nHrsnTra, aTabCalend[nX,7])
		Endif
	Endif    
	
	//-- Verifica o total de horas trabalhadas da jornada
	If !Empty(aTabCalend[nX,7]) .And. aTabCalend[nX, 6] == "S"
		nHrsPrev := SomaHoras(nHrsPrev,aTabCalend[nX,7])
	Endif
	
Next nX

Return nHrsPrev


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fSomaHrs ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fSomaHrs(aCodAbat, aCodHeAut, aAdic, aNTra, aAbon, nHrsAdic, nHrsnTra, nHrsAbon, dPerIni , dPerFim, cAlias, lSemApo)

Local nX      	:= 0
Local nHoras  	:= 0 
Local nPos	  		:= 0
Local aAbonosPer	:= {}

cPD     := cAlias+'->'+Right(cAlias,2)+'_PD'		//-- Campo codigo de evento
cFil    := cAlias+'->'+Right(cAlias,2)+'_FILIAL'	//-- Campo codigo da filial
cMat    := cAlias+'->'+Right(cAlias,2)+'_MAT'		//-- Campo matricula
cPDI    := cAlias+'->'+Right(cAlias,2)+'_PDI'		//-- Campo codigo de evento informado
cPD     := cAlias+'->'+Right(cAlias,2)+'_PD'		//-- Campo codigo de evento gerado
dData   := cAlias+'->'+Right(cAlias,2)+'_DATA'		//-- Campo data de referencia do lancamento
cQuantc := cAlias+'->'+Right(cAlias,2)+'_QUANTC'	//-- Campo quantidade de horas calculadas
cQuanti := cAlias+'->'+Right(cAlias,2)+'_QUANTI'	//-- Campo quantidade de horas informadas
cTpMarca:= cAlias+'->'+Right(cAlias,2)+'_TPMARCA'	//-- Campo tipo de marcacao
cCC		:= cAlias+'->'+Right(cAlias,2)+'_CC'	    //-- Campo centro de custo

lSemApo:= .T.

//Corre Todos os Lancamentos do Periodo
dbSelectArea(cAlias)
If dbSeek(fFilFunc(cAlias)+SRA->RA_MAT)
	
	//Carrega os Abonos Conforme Periodo
	fAbonosPer( @aAbonosPer , dPerIni , dPerFim , &cFil , SRA->RA_MAT )
	
	Do While &cFil + &cMat == SRA->RA_FILIAL + SRA->RA_MAT
	    //-- Desconsidera Apontamentos fora do Periodo solicitado
		If &dData < dPerIni .Or. &dData > dPerFim
			(cAlias)->( dbSkip() )
			Loop
		Endif
		
		lSemApo		:= .F.               
                    
		cEvento := If(Empty(&cPDI),&cPD,&cPDI)
		
		//-- Obtem as horas do Evento
		nQuant := If(Empty(&cPDI),&cQuantc,&cQuanti)
        
       //-- Verifica se Evento eh de Desconto
		If ( Ascan(aCodAbat, cEvento) <> 0 )             
			//-- Acrescenta o Evento ou Acumula horas do Evento para Array GERAL
			fAcumula(@aNTra , cEvento, nQuant)
			//-- Acumula Total de Horas de Todos os Eventos
			nHrsnTra := SomaHoras(nHrsnTra, nQuant)
		Else
		    //-- Verifica se Evento eh Horas Extras   
			If ( nPos := aScan( aTabCalend, {|x| x[1] == &dData .and. x[4] == '1E' } ) ) > 0
			    //-- Carrega tabela de Horas Extras / Horas Extras Noturnas        
				IF ( lRet := GetTabExtra( @aCodHeAut , SRA->RA_FILIAL , aTabCalend[ nPos , 14 ] , .F. , .T. ) )
					//-- Verifica se Evento eh hora extra valida para o turno
					If (Ascan(aCodHeAut,{|x| x[4] == cEvento}) <> 0 )  
						//-- Acrescenta o Evento ou Acumula horas do Evento para Array GERAL
						fAcumula(@aAdic , cEvento, nQuant)
						//-- Acumula Total de Horas de Todos os Eventos
						nHrsAdic := SomaHoras(nHrsAdic, nQuant)
					Else
						(cAlias)->( dbSkip() )
						Loop
					Endif    
				Else
					(cAlias)->( dbSkip() )
					Loop
				Endif    
            Else        
				(cAlias)->( dbSkip() )
				Loop
            Endif
        Endif
        
        If(Empty(&cPDI))
			nHrsAbon:=SomaHoras(fHrsAbon(&dData , &cPD, &cTPMARCA , &cCC , aAbonosPer, @aAbon ),nHrsAbon)
        Endif	
		
		(cAlias)->( dbSkip() )
	Enddo
Endif

//-- Calcula Percentual das Horas do Evento em relacao ao total de horas apontadas 
fCalcPerc(aAbon,nHrsAbon)

Return  


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GetTrbFer  ³ Autor ³ Equipe RH             ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Retorna  .T. se Trabalha .F. senao.                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ GetTrbFer(cFil, cRegra)                                     ³±± 
±±³          ³ cFil   -> Filial para Consulta da Regra em SPA              ³±±
±±³          ³ cRegra -> Regra a ser Pesquisada                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Absent                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function GetTrbFer( cFil , cRegra )
Return( ( PosSPA( cRegra , cFil , "PA_FERIADO" , 1 , .F. ) == "S" ) )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fAcumula ³ Autor ³ Mauricio MR           ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Acumula Evento em array de Acumuladores                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fAcumula(aColuna , cEvento, nQuant)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Absent                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fAcumula(aColuna , cEvento, nQuant)

Local nPos:=0

//-- Acrescenta o Evento ou Acumula horas do Evento para Array GERAL
If Len(aColuna) > 0 .And. (nPos := Ascan(aColuna, { |x| x[1] == cEvento })) > 0
	aColuna[nPos,3] := SomaHoras(aColuna[nPos,3], nQuant)
Else
	Aadd(aColuna, { cEvento, DescPDPon(cEvento), nQuant, 0 })
Endif

Return        

          
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fHrsAbon ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fHrsAbon(dData , cPD, cTPMARCA , cCC , aAbonosPer, aAbon )

Local nHrsAbon 	:= 0
Local nX       	:= 0
Local aAbonos  	:= {}
Local aJustifica:= {}            
Local cEvento	:= ""
Local lAbHoras	:= .F.  
Local nPos		:= 0

If fAbonos( dData , cPD , NIL , @aJustifica , cTPMARCA , cCC , aAbonosPer ) > 0
	//-- Corre Todos os Abonos
	For nX := 1 To Len(aJustifica)
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Cria Array Analitico de Abonos com horas Convertidas.		   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		//-- Obtem a Quantidade de Horas Abonadas
	    If ( nPos := aScan( aAbon, { |x| x[1] == aJustifica[nX,1] } ) ) > 0
			aAbon[nPos,3] := SomaHoras(aAbon[nPos,3], aJustifica[nX,2] ) //_QtAbono
		Else
			Aadd(aAbon, {aJustifica[nX,1] , DescAbono(aJustifica[nX,1],'C'), aJustifica[nX,2], 0 })
		EndIf 
		nHrsAbon:=	SomaHoras( nHrsAbon, aJustifica[nX,2] )
	Next nX 
Endif           

Return(nHrsAbon)            


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fCalcPerc³ Autor ³ Mauricio MR           ³ Data ³ 05/04/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Calcula Percentual de Horas de um Evento em Relacao ao to- ³±±
±±³          ³ tal geral.                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fCalcPerc(aColuna)                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aColuna  --> Array de Eventos e Horas                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ nHoras   --> Total de Horas                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fCalcPerc(aColuna,nHoras)

Local nX      := 0

nHoras  := If(nHoras==Nil,0,nHoras)

//---- Calcula o Total GERAL de Horas 
If Empty(nHoras)
	aEval(aColuna, { |y| nHoras := SomaHoras(nHoras,y[3]) })
Endif

//-- Calcula o percentual de cada item em relacao ao total
aEval(aColuna, { |y| y[4]:=(fConvHr(y[3],'D') / fConvHr(nHoras,'D')) * 100 })

Return nHoras

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³IntegDef ºAutor  ³Totvs       		 º Data ³ 25/06/2014  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Mensagem Única                                              º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PONM010                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function IntegDef(cXML, nTypeTrans, cTypeMessage, cVersaoMsg )

Local aRet

// Chama a rotina que trata a parte principal
aRet := PONY010(cXML, nTypeTrans, cTypeMessage, cVersaoMsg )

Return aRet
