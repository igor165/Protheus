#INCLUDE "PROTHEUS.CH"
#INCLUDE "FWADAPTEREAI.CH"
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ GPEN660 ³ Autor ³ Edna Dalfovo   ³ Data ³ 12/04/12 ³        ±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Inclusão, Exclusão e Alteração de Arquivo Financeiro                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function GPEN660(cXML, nTypeTrans, cTypeMessage)
Local lRet        := .T.
Local cXMLRet  	  := ""
Local cError     := ""
Local cWarning   := ""
Local nCount     := 0
Private oXmlM660  := ""

If nTypeTrans == TRANS_RECEIVE

     If       cTypeMessage == EAI_MESSAGE_BUSINESS
          cXMLRet := '<TAGX>TESTE DE RECEPCAO BUSINESS MESSAGE</TAGX>'

     ElseIf   cTypeMessage == EAI_MESSAGE_RESPONSE
        // Faz o parser do xml em um objeto
         oXmlM660 := XmlParser(cXml, "_", @cError, @cWarning)

         // Caso não haja erro no parser do xml
         If oXmlM660 <> Nil .And. Empty(cError) .And. Empty(cWarning)
            If Upper(oXmlM660:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_Status:Text) == "OK"
               If ValType("oXmlM660:_TOTVSMessage:_ResponseMessage:_ReturnContent:_DocumentNumber:Text") <> "U" .And. !Empty(oXmlM660:_TOTVSMessage:_ResponseMessage:_ReturnContent:_DocumentNumber:Text)
                  CFGA070Mnt(oXmlM660:_TOTVSMessage:_MessageInformation:_Product:_Name:Text,"RC1","RC1_NUMTIT", oXmlM660:_TOTVSMessage:_ResponseMessage:_ReturnContent:_DocumentNumber:Text,ALLTRIM(M->cEmpAnt)+'|' + ALLTRIM(RC1->RC1_FILTIT) +'|'+ ALLTRIM(RC1->RC1_CODTIT) +'|'+ ALLTRIM(RC1->RC1_PREFIX) +'|'+ ALLTRIM(RC1->RC1_NUMTIT),.T.)
               EndIf

               pRetEAI := .T.
            Else
            	lRet    := .F.
               	pRetEAI := .F.
               	If ValType(oXmlM660:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message) <> "A"
               	   	XmlNode2Arr(oXmlM660:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message, "_Message")
               	EndIf

               	For nCount := 1 To Len(oXmlM660:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message)
                	cXMLRet += oXmlM660:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message[nCount]:Text + '\n'
               	Next nCount
               
            Endif
         Else
            lRet := .F.
            cXMLRet := "Erro ao fazer o parse da mensagem!"
         EndIf
     ElseIf cTypeMessage == EAI_MESSAGE_WHOIS
         cXMLRet := '1.000'
     Endif



ElseIf nTypeTrans == TRANS_SEND

    If !Inclui .And. !Altera
         cXMLRet += '<BusinessEvent>'
         cXMLRet +=     '<Entity>AccountPayableDocument</Entity>'
         cXMLRet +=     '<Event>delete</Event>'
         cXMLRet +=     '<Identification>'
         cXMLRet +=         '<key name="NumTit">' +  RC1->RC1_NUMTIT + '</key>'
    	 cXMLRet +=     '</Identification>'
    	 cXMLRet +='</BusinessEvent>'
       	 cXMLRet +='<BusinessContent>'
            cXMLRet +='<CompanyId>'+M->cEmpAnt+'</CompanyId>'
        	//cXMLRet += '<BranchId>'+ RC1->RC1_FILTIT + '</BranchId>'
            cXMLRet += '<BranchId>'+ cFilAnt + '</BranchId>'
        	cXMLRet +='<DocumentPrefix>' +"U"+'</DocumentPrefix>'
         cXMLRet += '<DocumentNumber>' + ALLTRIM(M->cEmpAnt)+'|' + ALLTRIM(RC1->RC1_FILTIT) +'|'+ ALLTRIM(RC1->RC1_CODTIT) +'|'+ ALLTRIM(RC1->RC1_PREFIX) +'|'+ ALLTRIM(RC1->RC1_NUMTIT) + '</DocumentNumber>'
         cXMLRet +='<DocumentParcel></DocumentParcel>'
   	     cXMLRet +='<IssueDate></IssueDate>'
       	 cXMLRet +='<RealDueDate></RealDueDate>'
	        cXMLRet +='<VendorCode></VendorCode>'
         cXMLRet +='<GrossValue></GrossValue>'
         cXMLRet +='<ApportionmentDistribution>'
     	   cXMLRet +='<Apportionment>'
                cXMLRet +='<CostCenterCode></CostCenterCode>'
               	cXMLRet +='<Value></Value>'
	               cXMLRet +='<FinancialCode></FinancialCode>'
        cXMLRet +='</Apportionment>'
        cXMLRet +='</ApportionmentDistribution>'
        cXMLRet +='<Origin>' + 'PROTHEUS_GPE'+ '</Origin>'


         cXMLRet += '</BusinessContent>'
    EndIf
EndIf

cXmlRet:=FWNoAccent(cXmlRet)
cXmlRet:=EncodeUTF8(cXmlRet)


Return { lRet, cXMLRet }



