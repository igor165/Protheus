#INCLUDE "PROTHEUS.CH" 
#INCLUDE "FWADAPTEREAI.CH"
#INCLUDE "APDI020.CH"

Static cVerSend         := "1.000|1.001"  // versões disponíveis

//-------------------------------------------------------------------
/*/{Protheus.doc} APDI020
Funcao de integracao com o adapter EAI para envio e recebimento do
cadastro de funcionários (SRA) utilizando o conceito de mensagem unica.

@param   cXML          Variavel com conteudo xml para envio/recebimento
@param   nTypeTrans    Tipo de transacao. (Envio/Recebimento)
@param   cTypeMessage  Tipo de mensagem. (Business Type, WhoIs, etc)

@version P11
@since   18/10/2012
@return  aRet - Array contendo o resultado da execucao e a mensagem Xml de retorno.
aRet[1] - (boolean) Indica o resultado da execução da função
aRet[2] - (caracter) Mensagem Xml para envio

@obs     O método irá retornar um objeto do tipo TOTVSBusinessEvent caso
o tipo da mensagem seja EAI_BUSINESS_EVENT ou um tipo
TOTVSBusinessRequest caso a mensagem seja do tipo TOTVSBusinessRequest.
O tipo da classe pode ser definido com a função EAI_BUSINESS_REQUEST.
/*/
/*
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador³ Data   ³ BOPS  ³  Motivo da Alteracao                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Flavio Corr³20/05/14³       ³Ajustes no xml para versao 2.005 do XSD	   ³±±
±±³Alberto M. ³23/12/14³       ³Ajustes no xml para versao 3.001 do XSD	   ³±±
±±³Renan B.   ³24/02/15³TRPCKI ³Ajuste para ao integrar funcionários do Pro³±±
±±³           ³        ³       ³theus via EAI para o Logix é necessário que³±±	   
±±³           ³        ³       ³sejam enviadas a informação de Identidade. ³±±
±±³Renan B.   ³06/03/15³TRUAZP ³Ajuste para ao integrar funcionários do Pro³±±
±±³           ³        ³       ³theus via EAI é necessário emitir uma men- ³±±	   
±±³           ³        ³       ³sagem ao usuário para que ele entenda o mo-³±±
±±³           ³        ³       ³tivo para a gravação não ter sido concluída³±±
±±³Renan B.   ³07/08/15³TSQVSS ³Ajuste p/ somente utilizar a propriedade   ³±±
±±³           ³        ³       ³PositionCodeInternalId quando versao for   ³±±	   
±±³           ³        ³       ³maior que 2.001							   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
*/
//-------------------------------------------------------------------
Function APDI020(cXML, nTypeTrans, cTypeMessage, cVersao)

Local aPeople     := {}
Local aAux             := {}
Local lRet             := .T.
Local cXMLRet          := ""
Local cError           := ""
Local cWarning         := ""
Local cCod             := ""
Local cEvent           := "upsert"
Local cValInt          := ""
Local cValExt          := ""
Local cProduct         := ""
Local cAlias           := "RD0"
Local cField           := "RD0_CODIGO"
Local nI               := 1
Local nFim				  := 0

Default cVersao        := "1.000"

Private oXml           := ""
Private lMsErroAuto    := .F.
Private lMsHelpAuto    := .T.
Private lAutoErrNoFile := .T.

cVersao := Alltrim(cVersao)
If nTypeTrans == TRANS_RECEIVE
	If cTypeMessage == EAI_MESSAGE_BUSINESS
	
		If cVersao $ cVerSend
			// Faz o parse do xml em um objeto
			oXml := XmlParser(cXml, "_", @cError, @cWarning)
			
			// Se não houve erros
			If oXml != Nil .And. Empty(cError) .And. Empty(cWarning)
				// Verifica se o InternalId foi informado
	
				If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text") == "U" .Or. ;
					 Empty(oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text)
					
					lRet    := .F.
					cXmlRet := STR0001 //"O código do InternalId é obrigatório!"
	
				Else
					cValExt := oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_InternalId:Text
	
					// Código do Produto da Integração
					cProduct := oXml:_TOTVSMessage:_MessageInformation:_Product:_Name:Text
					
					aAdd(aPeople, {"RD0_FILIAL", xFilial("RD0"), Nil})
					
					
					//Pesquisa o IntenalId do Funcionário
					aAux     := IntPeopleInt(cValExt, cProduct, cVersao)
					
					If aAux[1]
						cCod     := aAux[2][2] + aAux[2][3]
					EndIf
					
					If Upper(oXml:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "UPSERT"
						
						If !Empty(cCod) .And. RD0->( DbSeek( cCod ) )
							nOpcx := 4 //Alteração
							cCod := RD0->RD0_CODIGO
							aAdd( aPeople, {"RD0_CODIGO", cCod, Nil } ) 
						Else
							nOpcx := 3 //Inclusão
							
							While .T.
								cCod := GetSXENUM( "RD0", "RD0_CODIGO" )
								
								If RD0->( dbSeek( xFilial("RD0")+cCod) )
									ConfirmSX8()
								Else
									Exit
								EndIf
							End
								
							aAdd( aPeople, {"RD0_CODIGO", cCod, Nil } )
						EndIf
						
						// Nome da Pessoa
						If !GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Name:Text","RD0_NOME",lRet)
							lRet := .F.
							cXmlRet := "Nome da Pessoa não preenchido, envia a " + " tag Name " + " com conteúdo." 
						EndIf
						
						//Endereço
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Address:_Address:Text","RD0_END",lRet)
						
						//numero
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Address:_Number:Text","RD0_CMPEND",lRet)

						//Complemento
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Address:_Complement:Text","RD0_CMPEND",lRet)

						//Cod Municipio
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Address:_City:_Description:Text","RD0_MUN",lRet)

						//bairro
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Address:_District:Text","RD0_BAIRRO",lRet)
						
						//estado
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Address:_State:_Code:Text","RD0_UF",lRet)
					
						//cep
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Address:_ZIPCode:Text","RD0_CEP",lRet)

					
						//Telefones/Emails
						If lRet .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation") <> "U"
							If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation") != "A"
								XmlNode2Arr( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation, "_Id" )
							EndIf
							If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:RealName") == "U"
								nFim := Len( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation )
								For nI := 1 To nFim
									//If XmlChildEx( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id[nI], "_NAME" ) <> Nil
										If Upper( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_Type:Text ) == "2"
											aAdd(aPeople, {"RD0_FONE", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_PhoneNumber:Text, Nil})
											//aAdd(aPeople, {"RD0_FAX", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_FaxNumber:Text, Nil})
											aAdd(aPeople, {"RD0_EMAIL", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_Email:Text, Nil})
											//aAdd(aPeople, {"RD0_DDD", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_DiallingCode:Text, Nil})
											//aAdd(aPeople, {"RD0_DDI", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_InternationalDiallingCode:Text, Nil})
										ElseIf Upper( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_Type:Text ) == "3"
											aAdd(aPeople, {"RD0_FAX", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_PhoneNumber:Text, Nil})
										ElseIf Upper( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_Type:Text ) == "5"
											aAdd(aPeople, {"RD0_NUMCEL", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_PhoneNumber:Text, Nil})
										EndIf
									//EndIf 
								Next nI
							Else
								If Upper( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_Type:Text ) == "2"
									aAdd(aPeople, {"RD0_FONE", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_PhoneNumber:Text, Nil})
									//aAdd(aPeople, {"RD0_FAX", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_FaxNumber:Text, Nil})
									aAdd(aPeople, {"RD0_EMAIL", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_Email:Text, Nil})
									//aAdd(aPeople, {"RD0_DDD", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_DiallingCode:Text, Nil})
									//aAdd(aPeople, {"RD0_DDI", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_InternationalDiallingCode:Text, Nil})
								ElseIf Upper( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_Type:Text ) == "3"
									aAdd(aPeople, {"RD0_FAX", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_PhoneNumber:Text, Nil})
								ElseIf Upper( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation[nI]:_Type:Text ) == "5"
									aAdd(aPeople, {"RD0_NUMCEL", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_ListOfCommunicationInformation:_CommunicationInformation:_PhoneNumber:Text, Nil})
								EndIf
							EndIf
							
						EndIf							
						
						//CPF
						If lRet .And. Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id") <> "U"
							If Type("oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id") != "A"
								XmlNode2Arr( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id, "_Id" )
							EndIf
							For nI := 1 To Len( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id )
								If XmlChildEx( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id[nI], "_NAME" ) <> Nil
									If Upper( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id[nI]:_Name:Text ) == "CPF"
										aAdd(aPeople, {"RD0_CIC", oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_GovernmentalInformation:_Id[nI]:Text, Nil})
									EndIf
								EndIf 
							Next nI
						EndIf
						
						// Data de Nascimento
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_BirthDate:Text","RD0_DTNASC",lRet,'STOD( StrTran( SubStr( oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_BirthDate:Text, 1, 10 ), "-", "") )')

						//Tipo de Pessoa						
						GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_KindOfPeople:Text","RD0_TIPO",lRet)
				
					ElseIf Upper(oXml:_TOTVSMessage:_BusinessMessage:_BusinessEvent:_Event:Text) == "DELETE" ;
						.And. RD0->( DbSeek( cCod ) )
	
						nOpcx := 5 //Exclusão
	
						cCod := RD0->RD0_CODIGO
						aAdd( aPeople, { "RD0_CODIGO", cCod, Nil } )
						
					Else
						
						lRet    := .F.
						cXmlRet := STR0002 //"O Event informado é inválido!"
						
					EndIf
					
					If lRet
						BeginTran()
						
						// Executa comando para insert, update ou delete conforme evento
						MSExecAuto({|x, y, z, w, a| APDA020(x, y, z, w, a)},,, nOpcx, ,aPeople)
						
						// Se houve erros no processamento do MSExecAuto
						If lMsErroAuto
							DisarmTransaction()
							RollBackSX8()
							aErro := GetAutoGRLog()
			
							lRet := .F.
							
							For nI := 1 To Len(aErro)
								cXMLRet += StrTran( StrTran( StrTran( StrTran( StrTran( aErro[nI], CHR(10), "" ), CHR(13), "" ), "/", "" ), "<", "" ), ">", "" ) + "|"
							Next nI
							varinfo("ERRO MENSAGEM UNICA",aErro)
						Else
							
							cValInt := IntPeopleExt( , , RTrim( cCod ), cVersao )[2]
							
							If(nOpcx != 5) // Se o evento é diferente de delete
								// Grava o registro na tabela XXF (de/para)
								CFGA070Mnt( cProduct, cAlias, cField, cValExt, cValInt )
								ConfirmSX8()
								
								// Monta o XML de retorno
								cXMLRet := "<ListOfInternalId>"
								cXMLRet +=     "<InternalId>"
								cXMLRet +=         "<Name>People</Name>"
								cXMLRet +=         "<Origin>" + cValExt + "</Origin>" // Valor recebido na tag
								cXMLRet +=         "<Destination>" + cValInt + "</Destination>" // Valor XXF gerado
								cXMLRet +=     "</InternalId>"
								cXMLRet += "</ListOfInternalId>"
			
							Else
								// Exclui o registro na tabela XXF (de/para)
								CFGA070Mnt(, cAlias, cField,, cValInt, .T.)
							EndIf
							
							EndTran()
							
						EndIf
					
					EndIf
				
				EndIf
			Else
				lRet    := .F.
				cXmlRet := STR0003 //"Erro ao parsear xml!"
			EndIf
		Else
			lRet := .F.
			cXmlRet := STR0011 // "Versão não tratada pelo adapter"
		EndIf
	ElseIf cTypeMessage == EAI_MESSAGE_RESPONSE
		
		// Faz o parse do xml em um objeto
		oXml := XmlParser(cXml, "_", @cError, @cWarning)
		// Se não houve erros na resposta
		If(Upper(oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_Status:Text) == "OK")
			// Verifica se a marca foi informada
			If(Type("oXml:_TOTVSMessage:_MessageInformation:_Product:_name:Text") != "U" .And. ;
				 !Empty(oXml:_TOTVSMessage:_MessageInformation:_Product:_name:Text))
				
				cProduct := oXml:_TOTVSMessage:_MessageInformation:_Product:_name:Text
			Else
				lRet    := .F.
				cXmlRet := STR0004 //"Erro no retorno. O Product é obrigatório!"
			EndIf
			
			// Verifica se o código interno foi informado
			If lRet .And. (Type("oXml:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId:_Origin:Text") != "U" .And.;
				 !Empty(oXml:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId:_Origin:Text))
				
				cValInt := oXml:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId:_Origin:Text
			Else
				lRet    := .F.
				cXmlRet := STR0005 //"Erro no retorno. O OriginalInternalId é obrigatório!"
				Return {lRet, EncodeUTF8(cXmlRet)}
			EndIf
			
			// Verifica se o código externo foi informado
			If lRet .And. (Type("oXml:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId:_Destination:Text") != "U" .And. ;
				 !Empty(oXml:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId:_Destination:Text))
				
				cValExt := oXml:_TOTVSMessage:_ResponseMessage:_ReturnContent:_ListOfInternalId:_InternalId:_Destination:Text
			Else
				lRet    := .F.
				cXmlRet := STR0006 //"Erro no retorno. O DestinationInternalId é obrigatório"
			EndIf
			
			If lRet .And. (Type("oXml:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text") != "U" .And. ;
				 !Empty(oXml:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text))
				// Obtém a mensagem original enviada
				cXml := oXml:_TOTVSMessage:_ResponseMessage:_ReceivedMessage:_MessageContent:Text
			Else
				lRet    := .F.
				cXmlRet := STR0007 //"Conteúdo do MessageContent vazio!"
			EndIf
			
			If lRet
				// Insere / Atualiza o registro na tabela XXF (de/para)
				CFGA070Mnt(cProduct, cAlias, cField, cValExt, cValInt, .F.,)
			EndIf
			
		Else
			// Se não for array
			If(ValType(oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message) != "A")
				// Transforma em array
				XmlNode2Arr(oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message, "_Message")
			EndIf
			
			// Percorre o array para obter os erros gerados
			For nI := 1 To Len(oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message)
				cError := oXml:_TOTVSMessage:_ResponseMessage:_ProcessingInformation:_ListOfMessages:_Message[nI]:Text + "|"
			Next nI
			
			lRet    := .F.
			cXmlRet := cError
			MsgAlert( OemToAnsi(cError), STR0013 ) 
		EndIf
	ElseIf cTypeMessage == EAI_MESSAGE_WHOIS
		lRet := .T.
		cXMLRet := cVerSend
	Endif
ElseIf nTypeTrans == TRANS_SEND
	If !Inclui .And. !Altera
		cEvent := "delete"

		M->RD0_CODIGO := RD0->RD0_CODIGO
		M->RD0_NOME   := RD0->RD0_NOME
		M->RD0_END	  	:= RD0->RD0_END
		M->RD0_CMPEND := RD0->RD0_CMPEND
		M->RD0_MUN 	:= RD0->RD0_MUN
		M->RD0_BAIRRO	:= RD0->RD0_BAIRRO
		M->RD0_UF		:= RD0->RD0_UF
		M->RD0_CEP		:= RD0->RD0_CEP
		M->RD0_FONE	:= RD0->RD0_FONE
		M->RD0_NUMCEL	:= RD0->RD0_NUMCEL
		M->RD0_FAX		:= RD0->RD0_FAX
		M->RD0_EMAIL	:= RD0->RD0_EMAIL
		M->RD0_DDD		:= RD0->RD0_DDD
		M->RD0_DDI		:= RD0->RD0_DDI
		M->RD0_CIC		:= RD0->RD0_CIC
		M->RD0_DTNASC	:= RD0->RD0_DTNASC
		M->RD0_TIPO	:= RD0->RD0_TIPO
		
		CFGA070Mnt(, cAlias, cField,, ( cEmpAnt + '|' + xFilial("RD0") + '|' + AllTrim(M->RD0_CODIGO) ), .T.)
		
	EndIf
	
	cXMLRet += '<BusinessEvent>'
	cXMLRet +=    '<Entity>People</Entity>'
	cXMLRet += '<Event>' + cEvent + '</Event>'
	cXMLRet +=    '<Identification>'
	cXMLRet +=       '<key name="InternalID">' + cEmpAnt + '|' + xFilial("RD0") + '|' + AllTrim(M->RD0_CODIGO) + '</key>'
	cXMLRet +=    '</Identification>'
	cXMLRet += '</BusinessEvent>'
	cXMLRet += '<BusinessContent>'
	cXMLRet +=    '<CompanyId>' + cEmpAnt + '</CompanyId>'
	cXMLRet +=    '<BranchId>' + xFilial("RD0") + '</BranchId>'
	cXMLRet +=    '<CompanyInternalId>' + cEmpAnt + "|" + xFilial("RD0") + '</CompanyInternalId>'
	cXMLRet +=    '<Code>' + AllTrim(M->RD0_CODIGO) + '</Code>'
	cXMLRet +=    '<InternalId>' + cEmpAnt + '|' + xFilial("RD0") + '|' + AllTrim(M->RD0_CODIGO) + '</InternalId>'
	cXMLRet +=    '<Name>' + HtmlNoTags(Alltrim(M->RD0_NOME)) + '</Name>'

	cXMLRet +=    '<Address>'
	cXMLRet +=    '    <Address>' + HtmlNoTags(Alltrim(M->RD0_END)) + '</Address>'
	//cXMLRet +=    '    <Number></Number>'
	cXMLRet +=    '    <Complement>' + AllTrim(M->RD0_CMPEND) + '</Complement>'
	cXMLRet +=    '    <City><Description>' + HtmlNoTags(Alltrim(M->RD0_MUN)) + '</Description></City>'
	cXMLRet +=    '    <District>' + HtmlNoTags(Alltrim(M->RD0_BAIRRO)) + '</District>'
	cXMLRet +=    '    <State><Code>' + AllTrim(M->RD0_UF) + '</Code></State>'
	cXMLRet +=    '    <ZIPCode>' + AllTrim(M->RD0_CEP) + '</ZIPCode>'
	cXMLRet +=    '    <POBox></POBox>'
	cXMLRet +=    '</Address>'
	cXMLRet +=    '<ListOfCommunicationInformation>'
	cXMLRet +=    '  <CommunicationInformation>'
	cXMLRet +=    '    <Type>2</Type>'
	cXMLRet +=    '    <PhoneNumber>' + AllTrim(M->RD0_FONE) + '</PhoneNumber>'
//cXMLRet +=    '    <FaxNumber>' + AllTrim(M->RD0_FAX) + '</FaxNumber>'
//cXMLRet +=    '    <FaxNumberExtension></FaxNumberExtension>'
//cXMLRet +=    '    <HomePage></HomePage>'
	cXMLRet +=    '    <Email>' + AllTrim(M->RD0_EMAIL) + '</Email>'
//cXMLRet +=    '    <DiallingCode>' + AllTrim(M->RD0_DDD) + '</DiallingCode>'
//cXMLRet +=    '    <InternationalDiallingCode>' + AllTrim(M->RD0_DDI) + '</InternationalDiallingCode>'
	cXMLRet +=    '  </CommunicationInformation>'
	cXMLRet +=    '  <CommunicationInformation>'
	cXMLRet +=    '    <Type>3</Type>'
	cXMLRet +=    '    <PhoneNumber>' + AllTrim(M->RD0_FAX) + '</PhoneNumber>'
	cXMLRet +=    '  </CommunicationInformation>'
	cXMLRet +=    '  <CommunicationInformation>'
	cXMLRet +=    '    <Type>5</Type>'
	cXMLRet +=    '    <PhoneNumber>' + AllTrim(M->RD0_NUMCEL) + '</PhoneNumber>'
	cXMLRet +=    '  </CommunicationInformation>'
	cXMLRet +=    '</ListOfCommunicationInformation>'
	
	cXMLRet +=    '<GovernmentalInformation>'
	If !Empty(M->RD0_CIC)
		cXMLRet +=       '<Id name="CPF" scope="Federal">' + AllTrim(M->RD0_CIC) + '</Id>'
	EndIf
	cXMLRet +=    '</GovernmentalInformation>'
	If !Empty(M->RD0_DTNASC)
		cXMLRet +=    '<BirthDate>' + Transform( DToS( M->RD0_DTNASC ), "@R 9999-99-99") + '</BirthDate>'
	Endif
	cXMLRet +=    '<KindOfPeople>' + AllTrim(M->RD0_TIPO) + '</KindOfPeople>'
	
	cXMLRet += '</BusinessContent>'
EndIf

cXmlRet:=FWNoAccent(cXmlRet)
cXmlRet:=EncodeUTF8(cXmlRet)

Return {lRet, cXmlRet}

//-------------------------------------------------------------------
/*/{Protheus.doc} IntPeopleExt
Monta o InternalID do Funcionário de acordo com o código passado
no parâmetro.

@param   cEmpresa   Código da empresa (Default cEmpAnt)
@param   cFil       Código da Filial (Default cFilAnt)
@param   cMatricula Matrícula do Funcionário
@param   cVersao    Versão da mensagem única (Default 2.001)

@version P11
@since   26/02/2013
@return  aResult Array contendo no primeiro parâmetro uma variável
lógica indicando se o registro foi encontrado.
No segundo parâmetro uma variável string com o InternalID
montado.

@sample  IntFunExt(, , '00001') irá retornar {.T.,'01|01|00001'}
/*/
//-------------------------------------------------------------------
Function IntPeopleExt(cEmpresa, cFil, cCodigo, cVersao)
Local   aResult  := {}
Default cEmpresa := cEmpAnt
Default cFil     := xFilial('RD0') // Cadastro compartilhado
Default cVersao  := '1.000'

If cVersao $ cVerSend
	aAdd(aResult, .T.)
	aAdd(aResult, cEmpresa + '|' + PadR(cFil, TamSX3('RD0_FILIAL')[1]) + '|' + PadR(cCodigo, TamSX3('RD0_CODIGO')[1]))
Else
	aAdd(aResult, .F.)
	aAdd(aResult, STR0008) //'Versão não suportada. As versões suportadas são: 1.000 e 1.001'
EndIf
Return aResult

//-------------------------------------------------------------------
/*/{Protheus.doc} IntPeopleInt
Recebe um InternalID e retorna o código do Funcionário.

@param   cInternalID InternalID recebido na mensagem.
@param   cRefer      Produto que enviou a mensagem
@param   cVersao     Versão da mensagem única (Default 2.001)

@author  Roney de Oliveira
@version P11
@since   26/02/2013
@return  aResult Array contendo no primeiro parâmetro uma variável
lógica indicando se o registro foi encontrado no de/para.
No segundo parâmetro uma variável array com a empresa,
filial e a matrícula do funcionário.

@sample  IntPeopleInt('01|01|0001') irá retornar {.T., {'01', '01', '0001'}}
/*/
//-------------------------------------------------------------------
Function IntPeopleInt(cInternalID, cRefer, cVersao)
Local   aResult  := {}
Local   aTemp    := {}
Local   cTemp    := ''
Local   cAlias   := 'RD0'
Local   cField   := 'RD0_CODIGO'
Default cVersao  := '1.000'

cTemp := CFGA070Int(cRefer, cAlias, cField, cInternalID)

If Empty(cTemp)
	aAdd(aResult, .F.)
	aAdd(aResult, STR0009 + AllTrim(cInternalID) + STR0010)   //'Participante/Pessoa ' ### ' não encontrado no de/para!'
Else
	If cVersao $ cVerSend
		aAdd(aResult, .T.)
		aTemp := StrToKArr( cTemp, "|" )
		aAdd(aResult, aTemp)
	Else
		aAdd(aResult, .F.)
		aAdd(aResult, STR0012 + '1.000|1.001' ) //"Versão não suportada. As versões suportadas são: "
	EndIf
EndIf

Return aResult

//-------------------------------------------------------------------
/*/{Protheus.doc} GetField
	Pegar Conteudo de um campo no XML e salvar no array

@param   aPeople,oXML,cTag,cCampo,lRet,cConteudo
@version P11
@since   20/05/2014
@return  lRet

@sample  GetField(@aPeople,oXML,"oXml:_TOTVSMessage:_BusinessMessage:_BusinessContent:_Gender:Text","RA_SEXO",lRet)

/*/
//-------------------------------------------------------------------	
Static Function GetField(aPeople,oXML,cTag,cCampo,lRet,cConteudo)
Local nPos			:= 0
Default cConteudo := cTag


If lRet 
	If Type(cTag) <> "U" .AND. !Empty(&(cTag))
		If ( nPos := aScan(aPeople, { |x| x[1] == cCampo }) ) == 0
			aAdd(aPeople, {cCampo, &(cConteudo), Nil})
		Else
			aPeople[nPos][2] := AllTrim(aPeople[nPos][2]) + " " + &(cConteudo)
		EndIf
	Else
		lRet := .F.
	Endif
EndIf

Return lRet						