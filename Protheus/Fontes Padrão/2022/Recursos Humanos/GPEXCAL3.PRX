#INCLUDE "GPEXCALC.CH" 
#INCLUDE "PROTHEUS.CH"

Static lProvResc

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³			ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.			  			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data	³ FNC			 ³  Motivo da Alteracao 					³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Allyson M   ³04/08/14³TQEUQG          ³Ajuste p/ apuracao da diferenca de ferias ³±±
±±³            ³        ³                ³quando nao houve reajuste salarial. 		³±±
±±³M. Silveira ³29/08/14³TQISWE          ³Ajuste para o uso do parametro  MV_CVTPROP³±±
±±³            ³        ³                ³com base no saldo de salario ('S').		³±±
±±³Claudinei S.³25/11/14³TQVPV8          ³Ajuste em fChkPLRAnt() para considerar os ³±±
±±³            ³        ³                ³valores da filial anterior,se transferido.³±±
±±³Thiago Y.M.N³15/01/15³TRHAZD          l³Ajuste na rotina BaseVTProp()para calcular³±±
±±³            ³        ³                ³corretamente o Valor do Salario Base do   ³±±
±±³            ³        ³                ³desconto do VT.Ajuste rotina fVTRCalc(),	³±±
±±³            ³        ³                ³para calculo correto do Custo do Funcion.	³±±
±±³            ³        ³                ³quando houver dias de afastamento no peri-³±±
±±³            ³        ³                ³odo vigente.								³±±
±±³Flavio Corr.³04/02/15³PCDEF-11847     ³Ajuste na rotina fAtuCalc()para valorizar ³±±
±±³            ³        ³                ³somente verbas não calculadas pelo sistema³±±
±±³Esther V	   ³02/06/15³PCDEF-36040     ³Criada funcao fFaltasRGB() p/ ver faltas  ³±±
±±³            ³        ³                ³lancadas na RGB p/ determinado funcionario³±±
±±³Flavio Corre³22/06/15³TSRHGG          ³Ajuste na busca da SR para ferias,        ³±±     
±±³            ³        ³            	 ³RR_DATA = RH_DATAINI                      ³±±
±±³Allyson M   ³01/09/15³TSZEC3          ³Ajuste em fCalcRG1() p/ calculo de lanctos³±±
±±³            ³        ³                ³fixos p/ verificar se e' calculado sobre  ³±±
±±³            ³        ³                ³salario base ou salario incorporada e na  ³±±
±±³            ³        ³                ³verificacao se verba ja existe em aPd.    ³±±
±±³Allyson M   ³15/10/15³TTNC58          ³Ajuste em fCalcRG1() p/ calculo de lanctos³±±
±±³            ³        ³                ³fixos quando ha calculo proporcional e    ³±±
±±³            ³        ³                ³verba em horas p/ propocionalizar as horas³±±
±±³            ³        ³                ³e nao utilizar a referencia em dias. E   	³±±
±±³            ³        ³                ³a base de calculo sera pelo MV_DIASPER.	³±±
±±³            ³        ³                ³Ajuste em fCalcRG1() p/ verificar o dia   ³±±
±±³            ³        ³                ³final correto do pagamento do lancamento  ³±±
±±³            ³        ³                ³p/ nao gerar error log no calculo.		³±±
±±³            ³        ³                ³Ajuste em fCalcRG1() p/ nao calcular o    ³±±
±±³            ³        ³                ³lancamento fixo na folha quando func. esta³±±
±±³            ³        ³                ³demitido.									³±±
±±³            ³        ³                ³Ajuste para calcular folha corretamente   ³±±     
±±³            ³        ³                ³quando funcionário for estagiário e pos-  ³±±
±±³            ³        ³                ³suir um lançamento fixo e lançamentos men-³±±
±±³            ³        ³                ³sais informados.                          ³±±
±±³Allyson M   ³14/12/15³TUAI32          ³Ajuste em fCDifFerias() p/ nao validar o  ³±±
±±³            ³        ³                ³campo RV_COMPL_ pois a diferenca de ferias³±±
±±³            ³        ³                ³sempre deve ser gerada					³±±
±±³Cícero Alves³15/12/15³TTUFIO   		 ³Alteração para considerar o campo 		³±±
±±³            ³        ³                ³RH_SALARIO e não RH_SALDIF para calcular  ³±±
±±³            ³        ³		         ³diferença de férias						³±±
±±³Allyson M   ³23/12/15³TUBRHI          ³Ajuste em fCalcRG1() p/ nao verificar o % ³±±
±±³            ³        ³                ³da verba quando regra por % salario base  ³±±
±±³Allyson M   ³22/01/16³TUDHS0          ³Ajuste em fCDifFerias() p/ validar a data ³±±
±±³            ³        ³                ³inicio e fim do 1o. calculo de ferias p/  ³±±
±±³            ³        ³                ³a validacao das verbas de ferias que foram³±±
±±³            ³        ³                ³pagas no periodo anterior					³±±
±±³            ³        ³                ³Ajuste em fGrvDifFer() p/ verificar se a  ³±±
±±³            ³        ³                ³diferenca e' maior do que 0 se nao for    ³±±
±±³            ³        ³                ³dissidio e p/ gerar a sequencia nas verbas³±±
±±³            ³        ³                ³p/ quando houver mais de um calculo de    ³±±
±±³            ³        ³                ³ferias no periodo    						³±±
±±³Raquel Hager³21/06/16³          TTTHYV³Ajuste para utilizar RG1_ROT apenas para  ³±±
±±³            ³        ³                ³localizao Brasil.                         ³±±
±±³Raquel Hager³21/06/16³          TUUAKY³Ajuste para nao gerar pagamento de difere-³±±
±±³            ³        ³                ³de ferias duplicadas.                     ³±±
±±³Renan Borges³06/04/16³TUPGC9          ³Ajuste para buscar os lançamentos fixos do³±±     
±±³            ³        ³                ³roteiro da folha também.                  ³±±
±±³Renan Borges³25/04/16³TUWJKS          ³Ajuste na funcao CalVer para valorizar de ³±±     
±±³            ³        ³                ³acordo com a base de calculo configurada  ³±±
±±³            ³        ³                ³no cadastro de Verbas.                    ³±±
±±³Raquel Hager³19/05/16³          TVBG85³Ajuste para gravar tipo 'G' na funcao     ³±±
±±³            ³        ³                ³fCalcRG1.                                 ³±±
±±³Claudinei S.³02/06/16³TVIAIX          ³Ajuste em IncorpSal() para considerar o   ³±±
±±³            ³        ³                ³tipo do Código, provento/desconto para    ³±±
±±³            ³        ³                ³fazer a incorporação dos valores.         ³±±
±±³Allyson M   ³03/06/16³TVHFL0          ³Ajuste em fAtuCalc() p/ nao incorporar as ³±±
±±³            ³        ³                ³verbas de adicionais, pois caso a verba   ³±±
±±³            ³        ³                ³fosse em horas, era feito incorporacao    ³±±
±±³            ³        ³                ³novamente sendo que na 12 ja ocorre a     ³±±
±±³            ³        ³                ³incorporacao do valor no fMatriz()        ³±±
±±³Allyson M   ³13/06/16³TVHO32          ³Ajuste para não valorizar verbas calcula- ³±±     
±±³            ³        ³                ³das pela Rescisao(tipo R) e as obtidas por³±±
±±³            ³        ³                ³fechamento(tipo F) advindas da RGB.       ³±±
±±³Marcia Moura³06/07/16³TVMEN0          ³Criacao do controle para RA_HOJORVA, onde ³±±
±±³            ³         ³               ³sera utilizada media horas como sal. base³±±
±³Marcia Moura³15/07/16³TVQFRB         ³Controle para calcular a media de Horista com³±±
±±³            ³        ³               ³jornada var.utilizando valores do mess resc.³±±
±±³Claudinei S.³22/07/16³TVQQQXK         ³Ajuste em fMediaHora() para que quando for³±±
±±³            ³        ³                ³média de férias buscar os acumulados, na  ³±±
±±³            ³        ³                ³chamada do GPEXMED o 9º parâmetro estava  ³±±
±±³            ³        ³                ³.T. passou a ser .F.                      ³±±
±±³Allyson M   ³29/07/16³TVPKR7          ³Ajuste em fCalcRG1() p/ proporcionalizar  ³±±
±±³            ³        ³                ³verba que incorpora  						³±±
±±³Allyson M   ³05/08/16³TVSZY6          ³Ajuste em fGrvDifFer() p/ validar a gera- ³±±
±±³            ³        ³                ³ção das diferenças corretamente			³±±
±±³Raquel Hager³12/08/16³TVPQVC          ³Ajuste nas funções CalVer/FVerAdiant para ³±±
±±³            ³        ³                ³considerar os lançamentos da RG1(tipo G). ³±±
±±³Allyson M   ³21/09/16³TVZLYN          ³Ajuste p/ considerar verbas de valor no   ³±±
±±³            ³        ³                ³dissidio  								³±±
±±³Claudinei S.³21/09/16³TVQQXK          ³Ajuste em fMediaHora() para que quando for³±±
±±³            ³        ³                ³média de férias proporcionais, a data da  ³±±
±±³            ³        ³                ³busca das médias seja o primeiro dia do   ³±±
±±³            ³        ³                ³periodo e não o último, Jornada Variavel. ³±±
±±³Claudinei S.³27/09/16³TVQQXK          ³Ajuste em fMediaHora() para que nas       ³±±
±±³            ³        ³                ³provisões sejam apuradas as médias de 13º ³±±
±±³            ³        ³                ³férias proporcionais e férias vencidas,   ³±±
±±³            ³        ³                ³para Hojorva só apurava a média de 13º.   ³±±
±±³Allyson M   ³28/09/16³TVZLYN          ³Ajuste p/ considerar verbas de valor no   ³±±
±±³            ³        ³                ³dissidio  								³±±
±±³Allyson M   ³26/10/16³TWHDNC          ³Ajuste em fCalcRG1() p/ não gerar error   ³±±
±±³            ³        ³                ³log quando executado na rescisão     		³±±
±±³Raquel Hager³10/11/16³TWKEU2          ³Alteração na função fAtuCalc para conside ³±±
±±³            ³        ³                ³rar verbas de outras origens que não some ³±±
±±³            ³        ³                ³nte de rescisao para complementar por     ³±±
±±³            ³        ³                ³dissidio.									³±±
±±³Allyson M   ³11/11/16³TVZN68          ³Ajuste em fCDifFerias() p/ não gerar dife-³±±
±±³            ³        ³                ³rença de férias no segundo mês caso o     ³±±
±±³            ³        ³                ³reajuste tenha ocorrido no primeiro mês   ³±±
±±³            ³        ³                ³pois as diferenças já foram geradas no    ³±±
±±³            ³        ³                ³primeiro mês das férias    				³±±
±±³Allyson M   ³21/12/16³MRH-355         ³Ajuste em fAtuCalc() p/ atualizar a verba ³±±
±±³            ³        ³                ³com o valor base de cálculo     			³±±
±±³Raquel Hager³11/01/16³MRH-4165        ³Ajuste em fMediaHora para quando for 132  ³±±
±±³            ³        ³                ³verificar mnemônico P_CCOMP13.    		³±±
±±³Gabriel A.  ³08/02/17³MRH-6142        ³Ajuste para quando há mais de um          ³±±
±±³            ³        ³                ³lançamento fixo para a mesma verba.       ³±±
±±³Gabriel A.  ³28/03/17³MRH-8526        ³Ajuste para incorporar os adicionais sobre³±±
±±³            ³        ³                ³maternidade no salário.                   ³±±
±±³Gabriel A.  ³04/04/17³DRHPAG-141      ³Ajuste para não olhar o campo RCM_SALFAM  ³±±
±±³            ³        ³                ³para o caso de férias.                    ³±±
±±³Gabriel A.  ³01/06/17³DRHPAG-1855     ³Ajuste arredondar o valor do adiantamento.³±±
±±³Eduardo K.  ³02/05/17³MPRIMESP-9737   ³Ajuste no calculo de rescisao complementar³±±
±±³            ³        ³                ³sem dissídio.		                        ³±±
±±³Gabriel A.  ³11/09/17³DRHPAG-5367     ³Implementação de folha complementar para  ³±±
±±³            ³        ³                ³múltiplos vínculos.                       ³±±
±±³Eduardo K.  ³13/10/17³MPRIMESP-11722  ³Ajuste para proporcionalizar verbas       ³±±
±±³            ³        ³                ³corretamente quando existir prorrogação   ³±±
±±³            ³        ³                ³de licença maternidade.                   ³±± 
±±³Eduardo K.  ³12/01/18³MPRIMESP-13222  ³Ajuste para proporcionalizar verbas de ATS³±±
±±³            ³        ³                ³corretamente quando informadas nos lança- ³±±
±±³            ³        ³                ³mentos fixos.			                    ³±± 
±±³Eduardo K.  ³17/01/18³MPRIMESP-13311  ³Ajuste para proporcionalizar os dias      ³±±
±±³            ³        ³                ³corretamente em casos de afastamento por  ³±±
±±³            ³        ³                ³licença maternidade.                      ³±± 
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fDiasAdian³ Autor ³ Mauro                 ³ Data ³ 07.03.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Retorna os Dias trabalhados no Mes                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fDiasAdiant( nDiasTb , dDtAfMat )                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nDiasTb  = Variavel dos Dias trabalhados                   ³±±
±±³          ³ dDtAfMat = Data do Inicio da Licenca Materninadde          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fDiasAdiant( nDiastb, dDtAfMat, nFaltasAdi )
	Local dDtaAfas	:= Ctod('//')
	Local dDtaRet	:= Ctod('//')
	Local cTipAfas	:= ""
	Local cEveFalta	:= ""
	Local cEveFalta2:= ""
	Local cAliasPON
	Local dPonIni   := CtoD("")
	Local dPonFim 	:= CtoD("")
	Local lTabS143	:= !Empty(aPercAdi) 
	Local lTabS147	:= !Empty(aPercAdi2) .And. aScan(aPercAdi2, {|x| x[3] == .T. } ) > 0
	Local lVerPON	:= lTabS143 .Or. lTabS147
	Local nDiasAfas	:= 0.00

	Private cDiasMes  := GetMvRH("MV_DIASMES",.F.)

	Private nDiasMat  := 0.00

	dDtaFim := dDataAte

	// -- Verifica se Afastamento refere-se a Licenca Maternidade
	If fChkAfas(SRA->RA_FILIAL,SRA->RA_MAT,dDtaFim,@dDtaAfas,@dDtaRet,@cTipAfas)
		If cTipAfas == 'Q'
			dDtAfMat := dDtaAfas 
		EndIf 
	EndIf

	// -- Apura Dias Trabalhados
	fDiasTrab(@nDiastb,cDiasMes) 

	// -- Apura Dias Trabalhados e Dias de Afastamento Para Calculo do Adiantamento 
	fDiasAfast(@nDiasAfas,@nDiastb,dDtaFim) 

	nDiasTb		:= Max( ( nDiasTb + nDiasMat + nDPrgSalMa + nDiasLic ) , 0 )
	nDiasPg		:= nDiasPg - nDiasMat - nDPrgSalMa //Retira os dias de maternidade do dias a pagar pois já foi somado nos dias trabalhados.
	nDiasAfas	:= Max( ( nDiasAfas - nDiasMat - nDPrgSalMa) , 0 )

	If nDiasTb > 0 .And. lVerPON
		cEveFalta 	:= If( Empty(P_CDFALADI), "", StrTran( P_CDFALADI, ",", "','" ))
		cEveFalta2 	:= If( Empty(P_PDFALADI), "", StrTran( P_PDFALADI, ",", "','" ))

		If !Empty(cEveFalta)
			GetPerAtu(@dPonIni, @dPonFim )

			cAliasPON := GetNextAlias()

			// Busca faltas na SPC
			BeginSQL Alias cAliasPON

				SELECT COUNT(*) FALTAS
				FROM %Table:SPC% SPC
				WHERE ( PC_PD IN (%Exp: cEveFalta%)
				AND PC_PDI = ''
				OR PC_PDI IN (%Exp: cEveFalta% ))
				AND PC_DATA BETWEEN %Exp: dTos(dPonIni)% AND %Exp: dTos(dPonFim)%
				AND PC_MAT = %Exp: SRA->RA_MAT%
				AND PC_FILIAL = %Exp: SRA->RA_FILIAL%
				AND SPC.%NotDel%

			EndSQL

			nDiasTb -= (cAliasPON)->(FALTAS)//Subtrai as faltas dos dias trabalhados

			(cAliasPON)->(dbCloseArea())
		EndIf
		If !Empty(cEveFalta2)
			If Empty(cEveFalta)
				GetPerAtu(@dPonIni, @dPonFim )
				cAliasPON := GetNextAlias()
			EndIf

			// Busca faltas na SPC
			BeginSQL Alias cAliasPON

				SELECT COUNT(*) FALTAS
				FROM %Table:SPC% SPC
				WHERE ( PC_PD IN (%Exp: cEveFalta2%)
				AND PC_PDI = ''
				OR PC_PDI IN (%Exp: cEveFalta2% ))
				AND PC_DATA BETWEEN %Exp: dTos(dPonIni)% AND %Exp: dTos(dPonFim)%
				AND PC_MAT = %Exp: SRA->RA_MAT%
				AND PC_FILIAL = %Exp: SRA->RA_FILIAL%
				AND SPC.%NotDel%

			EndSQL

			nFaltasAdi += (cAliasPON)->(FALTAS)//Soma as faltas

			(cAliasPON)->(dbCloseArea())
		EndIf
	EndIf

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ fCalcRG1  ³ Autor ³ Equipe RH            ³ Data ³ 26.04.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Efetua carga dos lancamentos fixos.                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fCalcRG1()  
	Local aArea			:= GetArea()
	Local cAliasX		:= ""
	Local cQuery		:= ""  
	Local cVerba		:= ""
	Local cVerbaMS		:= ""
	Local cVerbaAbo		:= ""
	Local cVerbaAbMS	:= ""
	Local cVerbaDic 	:= "" 
	Local cTpCalc		:= ""  
	Local cNumId 		:= ""
	Local cCodCor 		:= ""
	Local cProp 		:= ""
	Local cCC 			:= ""  
	Local cTab 			:= ""    
	Local cVbACu 		:= ""
	Local nBaseTmp		:= 0
	Local cNIDAcu 		:= ""  
	Local cTpVbAcu		:= ""
	Local cSeq			:= ""
	Local dDtIniPgto 	:= CtoD("//")
	Local dDtFimPagto 	:= CtoD("//")
	Local dDtaDem		:= CtoD("//")
	Local dDtLib		:= CtoD("//")
	Local lInCorp 		:= .F.
	Local lGravaRG1 	:= .F.  
	Local lAdm 			:= .F.
	Local lDem 			:= .F.
	Local lCodAbo		:= .F. 
	Local lGestPubl		:= IIf(ExistFunc("fUsaGFP"),fUsaGFP(),.F.) //Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP
	Local nRef 			:= 0
	Local nRefVrb		:= 0
	Local nPercVrb 		:= 0  
	Local nPosv 		:= 0  
	Local nValTab 		:= 0  
	Local nValor 		:= 0
	Local nValorMS		:= 0
	Local nValorAbo		:= 0
	Local nValorAboMS	:= 0
	Local nLin 			:= 0
	Local nCol 			:= 0     
	Local nPosPd		:= 0
	Local nValSRC 		:= 0
	Local nHorasSRC 	:= 0
	Local nCasasDec		:= 0  
	Local nDiaIniRG1	:= 0   
	Local nDiaFimRG1	:= 0 
	Local nBaseAcu		:= 0 
	Local nRefAcu		:= 0
	Local nSeq			:= 0
	Local nOldDiasPg	:= 0
	Local cRoteiro      := ''
	
	Static __oSt1
	Static __cEmpAux

	lDissidio 	:= If( Type("lDissidio")=="U",.F.,lDissidio)
	
	If cTipoRot == "1" .and. !lDissidio .and. Type("lSalInco") <> "U" .and. lSalInco
		If cPeriodo <= fPerFech( cProcesso, cRot) //Se estiver calculando roteiro INC e período estiver fechado, não carrega lançamentos fixos pois já foi carregado da SRD
			Return Nil
		EndIf
	EndIf
	
	If ( cTipoRot == "3" )
		cAnoMes := AnoMes(GetMemVar("RH_DATAINI"))
		lCodAbo := SRV->(ColumnPos( "RV_CODABO" )) > 0    
	EndIf 
	
	If __oSt1 == Nil .or. ( __cEmpAux == Nil .or. __cEmpAux <> cEmpAnt )
	
		__cEmpAux := cEmpAnt
	
		__oSt1 := FWPreparedStatement():New()	 

		cQuery := "SELECT * FROM " + RetSqlName('RG1') + " WHERE "
		cQuery += "RG1_FILIAL = ? AND " 
		cQuery += "RG1_MAT = ?  AND "    
		cQuery += "RG1_DINIPG <= ? "     
		cQuery += "AND ( RG1_DFIMPG =  '        ' " + " OR " + "RG1_DFIMPG >= ? ) AND "
		If cPaisLoc == "BRA"
			cQuery += " ( RG1_ROT = ? OR RG1_ROT = ? ) AND "
		EndIf		   
		cQuery += "D_E_L_E_T_ = ' ' "     
		cQuery += "ORDER BY RG1_FILIAL,RG1_MAT,RG1_ORDEM,RG1_PD,RG1_DINIPG"  
		cQuery := ChangeQuery(cQuery)
		
		__oSt1:SetQuery(cQuery)
	
	EndIf
	
	cAliasX:= GetNextAlias()
	
	__oSt1:SetString(1,SRA->RA_FILIAL)
	__oSt1:SetString(2,SRA->RA_MAT)
	__oSt1:SetString(3,cAnoMes + STRZERO(F_ULTDIA(dDataRef),2))
	__oSt1:SetString(4,cAnomes + '01')
	If cPaisLoc == "BRA"
		__oSt1:SetString(5,cRot)
		__oSt1:SetString(6,If(cTipoRot=="4",fGetRotOrdinar(),cRot))
	EndIf
	
	cQuery := __oSt1:getFixQuery()
	
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasX)

	cPpdAcFixos:= ""

	If (cAliasX)->( !EOF() )
		cVerbAdic := FGETCODFOL("0001") + "*" + FGETCODFOL("0002") + "*" + FGETCODFOL("0003") + "*" + FGETCODFOL("0004") + ;
		"*" + FGETCODFOL("0005") + "*" + FGETCODFOL("0036") + "*" + FGETCODFOL("0037") + "*" + FGETCODFOL("0038") + ;
		"*" + FGETCODFOL("0039")
	EndIf

	While (cAliasX)->( !EOF() )

		If (cAliasX)->RG1_AUTOM != "1"  //  Nao possui calculo automatico 
			(cAliasX)->( dbSkip() )
			Loop
		EndIf  

		If lGestPubl .AND. SRA->RA_REGIME == '2' // estatutário
			dDtLib := StoD((cAliasX)->RG1_LIBPAG)	//data de liberação do pagamento
			If MesAno(dDtLib) > cAnoMes 	//se data de liberação é posterior ao período de cálculo
				(cAliasX)->( dbSkip() )
				Loop
			ElseIf Empty(dDtLib)
				dDtLib := dDataDe
			EndIf
			dDtaDem := If( cTipoRot == "4", GETMEMVAR("RG_DATADEM"), SRA->RA_DEMISSA )
		EndIf

		dDtFimPg 	:= StoD((cAliasX)->RG1_DFIMPG)
		cVerba 		:= (cAliasX)->RG1_PD   
		cVerbaMS	:= ""
		cVerbaAbo	:= ""
		cVerbaAbMS	:= ""
		nValorMS	:= 0
		nValorAbo	:= 0
		nValorAboMS	:= 0   

		// Indenizacao rescisao
		If (  cVerba == fGetCodFol("0110")  )
			(cAliasX)->( dbSkip() )
			Loop
		EndIf      

		//Se for roteiro da Folha/AUT e funcionario demitido, nao faz o calculo
		If cPaisLoc == "BRA"
			If fGetTipoRot((cAliasX)->RG1_ROT) $ "1*9" .And. cSitFolh == "D" .and. cTipoRot <> "4" //Se situacao é "D" e é rescisão, trata-se de complementar ou recalculo
				(cAliasX)->( dbSkip() )
				Loop
			EndIf
		EndIf

		cTpCalc 	:= (cAliasX)->RG1_TPCALC
		nRef 		:= (cAliasX)->RG1_REFER   
		If lGestPubl .AND. SRA->RA_REGIME == '2'
			NREFLICPRE := (nRef / 30) //referencia Licenca Premio
		EndIf   

		dbSelectArea("SRV")
		dbSetOrder(RetOrder("SRV", "RV_FILIAL+RV_COD"))
		If SRV->(dbSeek(xFilial("SRV", (cAliasX)->RG1_FILIAL)+ cVerba))
			nPercVrb 	:= If (SRV->RV_PERC == 0,100,SRV->RV_PERC) 
			cCodCor 	:= SRV->RV_CODCORR
			lIncorp 	:= If( SRV->RV_INCORP == "S",.T.,.F.)
		EndIf 

		cProp 		:= (cAliasX)->RG1_PROP
		cProp 		:= If( ( cProp == "1" .and. !(cTipoRot $ "5*6") )  ,"S","N")
		If lGestPubl .AND. SRA->RA_REGIME == '2'
			If !cTipoRot $ "1*7*9*4" //Só utiliza proporcionalização na folha, rescisão e outros
				cProp := "N"
			EndIf
		Endif	
		lGravaRG1 	:= .F.
		cCC 		:=  (cAliasX)->RG1_CC
		nValTab 	:= 0
		
		If !lDissidio
			cNumID 		:= If(!Empty((cAliasX)->RG1_NUMID),(cAliasX)->RG1_NUMID,cNumId)  
		EndIf
		
		// Posiciona na Matriz de Incidencia
		fIncide(cVerba)
		nPosv := aScan(aPdv, { |x| x[1] == cVerba } )

		Do Case  
			Case cTpCalc == "1"  // Valor
				nValor 		:= (cAliasX)->RG1_VALOR
				lGravaRG1 	:= .T.
			
			Case cTpCalc == "2"  // Dias 
				If aPdv[nPosv,34] == "1"
					nValor 		:= nRef * SALDOR / 100 * nPercVrb
				Else
					nValor 		:= nRef * SALDIA / 100 * nPercVrb
				EndIf				
				lGravaRG1 	:= .T.
			
			Case cTpCalc == "3"  // Horas 
				If aPdv[nPosv,34] == "1"
					nValor 		:= nRef * SALHOR / 100 * nPercVrb
				Else
					nValor 		:= nRef * SALHORA / 100 * nPercVrb
				EndIf
				nRefVrb 	:= nRef
				lGravaRG1 	:= .T.
			
			Case cTpCalc == "4"  // Tabela  
				cTab := (cAliasX)->RG1_CODTAB
				nLin := (cAliasX)->RG1_LINHA
				nCol := (cAliasX)->RG1_COLUNA
				nValTab := FTABELA(CTAB,NLIN,NCOL)
				nRef := If( nRef == 0,nPercVrb,nRef)
				If ( ValType(nValTab) <> "U" )
					nValor := nRef * nValTab/ 100 
					lGravaRG1 := .T.
				EndIf
			
			Case cTpCalc == "5"  // Acumulador 
				cPpdAcFixos += (cAliasX)->RG1_PD + "-"    
				If ( cTipoRot $ "1*3" )      
					cVbAcu 		:= cVerba
					nBaseTmp 	:= fFiltroSRV(SRV->RV_CODMEMO)
					cNIDAcu 	:= (cAliasX)->RG1_NUMID   
					cTpVbAcu	:= SRV->RV_TIPO 
					nRefAcu		:= nRef
					nBaseAcu 	+= nRef * nBaseTmp / 100
				EndIf
				lGravaRG1 	:= .F.
			
			Case cTpCalc == "6"  // Percentual Salario Base  
				If aPdv[nPosv,34] == "1"
					nValor 		:= nRef * SALARIO / 100
				Else
					nValor 		:= nRef * SALMES / 100
				EndIf				 
				lGravaRG1 	:= .T.
			
			Case cTpCalc == "7"  // Percentual Salario Minimo  
				nValor 		:= nRef * VAL_SALMIN / 100 
				lGravaRG1 	:= .T.
		End Case

		NTOTADIC += nValor

		nOldDiasPg := 0
		
		If cProp == "S" .And. ( nDiasMat + nDPrgSalMa ) == 0
			nOldDiasPg := nDiasPg
			nDiasPg := 0
		EndIf
		
		If ( lGravaRG1 )   				
		
			If !(lGestPubl .AND. SRA->RA_REGIME == '2') //Se Folha Privada
				If cProp == "S" .And. !cTipoRot $ "1*9*4"
		   			If cTipoRot == "3"
		   				If SRV->RV_REFFER == "S"
		   					cVerbaMS 	:= fBusMesSeg(cVerba)
		   					If lCodAbo .and. !Empty( cVerbaAbo := SRV->RV_CODABO)
		   						cVerbaAbMS	:= fBusMesSeg(cVerbaAbo)
		   					EndIf
		   				EndIf

		   				If !Empty(cVerbaMS)
		   					If Empty(cVerbaAbo)
			   					nValorMS := ( nValor / nDiasc ) * (NDIASFMS + NDIASABMS) //Valor proporcional a férias e abono mês seguinte
			   					nValor   := ( nValor / nDiasc ) * (NDIASFM + NDIASABM) 	 //Valor proporcional a férias e abono
			   				Else
			   					If Empty(cVerbaAbMS)
			   						nValorMS := ( nValor / nDiasc ) * NDIASFMS 				//Valor proporcional a férias mês seguinte
			   						nValorAbo:= ( nValor / nDiasc ) * NDIASABM + NDIASABMS	//Valor proporcional a abono e abono mês seguinte
			   						nValor   := ( nValor / nDiasc ) * NDIASFM				//Valor proporcional a férias
			   					Else
			   						nValorMS 	:= ( nValor / nDiasc ) * NDIASFMS //Valor proporcional a férias mês seguinte
				   					nValorAboMS	:= ( nValor / nDiasc ) * NDIASABMS//Valor proporcional a abono mês seguinte
				   					nValorAbo	:= ( nValor / nDiasc ) * NDIASABM //Valor proporcional a abono			   					
				   					nValor   	:= ( nValor / nDiasc ) * NDIASFM  //Valor proporcional a férias 
			   					EndIf
			   				EndIf
		   				Else
		   					If Empty(cVerbaAbo)
			   					nValor   := ( nValor / nDiasC ) * (NDIASFM + NDIASABM + NDIASFMS + NDIASABMS) //Valor proporcional a todo o período de férias
			   				Else
			   					If Empty(cVerbaAbMS)
			   						nValorAbo:= ( nValor / nDiasC ) * (NDIASABM + NDIASABMS) //Valor proporcional a todo o período de abono
			   						nValor   := ( nValor / nDiasC ) * (NDIASFM + NDIASFMS)   //Valor proporcional a todo o período de férias
			   					Else
			   						nValorAbo	:= ( nValor / nDiasC ) * NDIASABM 				//Valor proporcional a abono
			   						nValorAboMS	:= ( nValor / nDiasc ) * NDIASABMS				//Valor proporcional a abono mês seguinte
			   						nValor   	:= ( nValor / nDiasC ) * (NDIASFM + NDIASFMS) 	//Valor proporcional a todo o período de férias			   				
			   					EndIf
			   				EndIf
		   				EndIf
		   			
		   				cProp := "N"
		   			EndIf		   	
		   		EndIf
			ElseIf (lGestPubl .AND. SRA->RA_REGIME == '2') .AND. !(cVerba == ACODFOL[1333,1]) //SE GFP E NÃO É VERBA LIC. PREMIO
				If cProp == "S"
					dDtIniPgto  := dDataDe
					dDtFimPagto := dDataAte
					If Empty(dDtFimPg)
						dDtFimPg := dDataAte
					EndIf
					If cAnoMes == MesAno(SRA->RA_ADMISSA)
						dDtIniPgto := SRA->RA_ADMISSA
						lAdm := .T.
					EndIf
					If dDtLib > dDtIniPgto
						dDtIniPgto := dDtLib
					EndIf
					If lDem
						dDtFimPagto := dDtaDem
						lDem := .T.
					EndIf
					If dDtFimPg < dDtFimPagto
						dDtFimPagto := dDtFimPg
					EndIf
		
					nDiaIniRG1 := DAY(dDtIniPgto)
					nDiaFimRG1 := DAY(dDtFimPagto)
					
					If ( ( ( !(SRA->RA_CATFUNC $ "H*T*D") .OR. (SRA->RA_CATFUNC $ "H*T*D" .AND. P_DIASMES <> "S") ) .AND. (nDiaFimRG1 > 30) .AND. !(cVerba == FGETCODFOL("0072")) ) ;
						.OR. ( (MONTH(dDtIniPgto) == 2 .AND. nDiaFimRG1 > 27 ) .AND. !(SRA->RA_CATFUNC $ 'H*T*D') ) ) .AND. !lAdm .AND. !lDem 

						nDiaFimRG1 := 30
		   			EndIf

					If cTipoRot == "6" .AND. SRA->RA_SITFOLH == "F"
						nDiasAfas := 0
					EndIf
					
					nRef:= ( nDiaFimRG1 - nDiaIniRG1 + 1 ) - nDiasAfas
					nValor	:= nValor / 30 * Min(nRef,30)
		   			
				Else
					If !lIncorp .AND. !(cTpCalc == "5")
						nRef	:= (nDiasC - Day(dDataDe) + 1) - nDiasAfas
						nValor	:= nValor / 30 * Min(nRef,30)
					EndIf
				EndIf
				If SRV->RV_TIPO == "H" .AND. cTpCalc == "3"
					nRef := nRefVrb / 30 * Min(nRef,30)
				EndIf
				If	cTipoRot == "6"
					nValor	:= nValor/12 * nAvos
					nRef	:= nRef/12 * nAvos
				EndIf 
			EndIf
		   				
			nPosPd	:= FLocaliaPd( cVerba )   
			If cPaisLoc == "COL" 
				nCasasDec := RHDECIMAIS
			Else           
				nCasasDec := 2
			EndIf
			
			// Verba existe no aPd com tipo diferente de 'I - Informado'				
			If (  nPosPd > 0 .And. aPd[nPosPd,07] # "I" )
				If aPd[nPosPd,07] == "G" .and. (Empty(cNumId) .or. AllTrim(aPd[nPosPd,15]) == AllTrim(cNumId)) .and. aPd[nPosPd,3] == cNumPag .and. aPd[nPosPd,2] == cCC
					If lDissidio
						//Se incorpora salário, elimina valor incorporado do salmes e incorpora valor total da verba recalculada
						If RetValSrv(cVerba, SRA->RA_FILIAL,"RV_INCORP") == "S"
							SalMes -= aPd[nPosPd,05]
							aPd[nPosPd,19] := nValor //Grava valor integral do lançamento
						EndIf
						(cAliasX)->( dbSkip() )
						Loop
					Else
						aPd[nPosPd,5] += Round(nValor, nCasasDec)
						If !Empty(cVerbaMS) .and. nValorMS > 0
							nPosPd	:= FLocaliaPd( cVerbaMS )
							If nPosPd > 0 .And. aPd[nPosPd,07] # "I"
								aPd[nPosPd,5] += Round(nValorMS, nCasasDec)
							EndIf
						EndIf
						If !Empty(cVerbaAbo) .and. nValorAbo > 0
							nPosPd	:= FLocaliaPd( cVerbaAbo )
							If nPosPd > 0 .And. aPd[nPosPd,07] # "I"
								aPd[nPosPd,5] += Round(nValorAbo, nCasasDec)
							EndIf
						EndIf
						If !Empty(cVerbaAbMS) .and. nValorAboMS > 0
							nPosPd	:= FLocaliaPd( cVerbaAbMS )
							If nPosPd > 0 .And. aPd[nPosPd,07] # "I"
								aPd[nPosPd,5] += Round(nValorAboMS, nCasasDec)
							EndIf
						EndIf
					EndIf
				Else
					// Rescisao Complementar
					If cCompl == "S" .And. aPd[nPosPd,07] == "G" .And. aPd[nPosPd,3] == cNumPag .And. aPd[nPosPd,2] == cCC
						// Deleta lancamento anterior
						aDel( aPd , nPosPd )
						aSize( aPd , Len(aPd) - 1 )
					EndIf
					nSeq := 0
					AEval(aPd, {|x| nSeq := IIf(x[1] == cVerba .and. ( Val(x[11]) + 1 ) > nSeq, Val(x[11]) + 1, nSeq) })
					cSeq := If(nSeq == 0, " ", AllTrim(Str(nSeq)))
					FMatriz(cVerba, Round(nValor, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO,"G",,,,.T.,cSeq,,,,cNumID,,,,cProp == "S")
					If nValorMS > 0
						FMatriz(cVerbaMS, Round(nValorMS, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO ,"G",,,,.T.,cSeq,,,,cNumID,,,,cProp == "S")
					EndIf 
					If nValorAbo > 0
						FMatriz(cVerbaAbo, Round(nValorAbo, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO ,"G",,,,.T.,cSeq,,,,cNumID,,,,cProp == "S")
					EndIf
					If nValorAboMS > 0
						FMatriz(cVerbaAbMS, Round(nValorAboMS, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO ,"G",,,,.T.,cSeq,,,,cNumID,,,,cProp == "S")
					EndIf
				EndIf 
			// Verba nao existe no aPd, permite lancamento e valor maior que zero
			// Nao sendo do tipo acumulador e roteiro de Folha/Ferias
			ElseIf nPosPd == 0 .And. SRV->RV_QTDLANC <> "0" .And. nValor > 0 .And.  If(cTpCalc == "5" .And. !cTipoRot $ "1*3", .F., .T.) 
				FMatriz(cVerba, Round(nValor, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO ,"G",,,,.T.,,,,,cNumID,,,,cProp == "S")
				If nValorMS > 0
					FMatriz(cVerbaMS, Round(nValorMS, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO ,"G",,,,.T.,,,,,cNumID,,,,(If(!(lGestPubl .AND. SRA->RA_REGIME == '2'),cProp == "S",.F.)))
				EndIf
				If nValorAbo > 0
					FMatriz(cVerbaAbo, Round(nValorAbo, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO ,"G",,,,.T.,,,,,cNumID,,,,cProp == "S")
				EndIf
				If nValorAboMS > 0
					FMatriz(cVerbaAbMS, Round(nValorAboMS, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO ,"G",,,,.T.,,,,,cNumID,,,,cProp == "S")
				EndIf     
			EndIf

			// Codigo correspondente a verba
			cRoteiro:= AllTrim(GetRotExec())
			If(fGetTipoRot(cRoteiro) == "5" .OR. fGetTipoRot(cRoteiro) == "6" .OR. fGetTipoRot(cRoteiro) == "F" )        	
				If ( !Empty(cCodCor) )    
					PosSRV(cCodCor,SRA->RA_FILIAL) 
					nPosPd	:= FLocaliaPd( cVerba )     
					If ( nPosPd > 0 )    
						If ( SRV->RV_QTDLANC $ " *1" )    
							nValSRC 		:= aPd[nPosPd,05]    
							nHorasSRC 		:= If (aPd[nPosPd,06]=="H",fConvHoras(aPd[nPosPd,04],"1"),aPd[nPosPd,04])    
							aPd[nPosPd,05]	+= nValSRC		//Valor
							aPd[nPosPd,04]	+= nHorasSRC	//Horas     
						EndIf   

						If ( SRV->RV_QTDLANC > "1" .And. nValor > 0 )
							AEval(aPd, {|x| nSeq += IIf(x[1] == cVerba, 1, 0) })
							FMatriz(cCodCor, Round(nValor, nCasasDec),  nRef, CNUMPAG, cCC , SRV->RV_TIPO,"G",,,,,AllTrim(Str(nSeq)),,,,cNumID,,,,cProp == "S")
							nSeq := 0
						EndIf
					EndIf

					If nPosPd == 0  .And. SRV->RV_QTDLANC <> "0" .And. nValor > 0 
						FMatriz(cCodCor, Round(nValor, nCasasDec),nRef,CNUMPAG,cCC,SRV->RV_TIPO,"G",,,,.T.,,,,,cNumID,,,,cProp == "S")   
					EndIf    
				EndIf
			Endif
		EndIf  

		If nOldDiasPg > 0
			nDiasPg := nOldDiasPg
		EndIf

		SRV->(dbCloseArea())

		(cAliasX)->( dbSkip() )
	EndDo  

	// Existiram lancamentos do tipo acumulador
	If nBaseAcu > 0     
		nValor 	:= nBaseAcu
		FMatriz(cVbAcu, Round(nValor, nCasasDec),nRefAcu,CNUMPAG,cCC,cTpVbAcu,,,,,.T.,,,,,cNIDAcu,,,,cProp == "S")  			
	EndIf

	(cAliasX)->(dbCloseArea())

	RestArea(aArea)

Return( Nil )



/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³FVerAdiant³ Autor ³ Leandro Drumond       ³ Data ³ 08.01.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica se valor do adiantamento foi informado.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FVerAdiant()               						          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ 												              ³±±
±±³          ³ 													          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FVerAdiant()

	Local Informado := .F.
	Local nDiasBase	:= 0 
	Local nValAdi	:= 0
	Local nVlFalPon	:= 0
	Local nPercAdt  := SRA->RA_PERCADT

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se adiantamento foi informado se deve ser calculado ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nPos := Ascan ( aPD , { |X| X[1] == aCodFol[6,1] .And. X[3] == cNumPag .And. X[9] # "D" } )
	Aeval( aPd ,{ |X| nValAdi += If (x[1] == aCodFol[6,1] .And. x[3] == cSemana .And. x[7] $ "I*G" .And. X[9] # "D",x[5],0.00) })

	If nPos > 0 .And. nValAdi > 0
		Val_Adto 	:= nValAdi
		Informado	:= .T.
	Else
		If Len(aPercAdi) > 0
			aEval(aPercAdi, {|x| If(x[1] <= DIASTB, nPercAdt := x[2], Nil )})
		EndIf
		If cPaisLoc <> 'CHI' .Or. SRA->RA_ANTICI == 0 
			If cPaisLoc == "CHI" .And. SRA->RA_ANTLIQ == "1"
				Val_Adto := LOCLiqSal() * ( nPercAdt / 100 )
			Else
				Val_Adto :=  nBaseAdt * ( nPercAdt / 100 )
			EndIf
		Else
			Val_Adto := SRA->RA_ANTICI
		EndIf

		nDiasBase:= nDiasC //RCF_DCALCM

		//	 Qdo mes admissao = mes calculo, qtd "DiasTrab" =  (nUlt_Dia  -  Day(SRA->RA_ADMISSA) + 1)
		If cAdtoPro == "S" .and. !Informado .and. ( DiasTb < nDiasBase )
			Val_Adto := ( Val_Adto * DiasTb  ) / nDiasBase
		ElseIf cAdtoPro =='N' .And. DiasTb <= 0
			Val_Adto := 0.00
		EndIf

		If FaltADI > 0 .And. Val_Adto > 0
            If RetValSRV( aCodFol[1884,1], SRA->RA_FILIAL, "RV_BASCAL") == "2"    
                nVlFalPon := Round( FaltADI * SalDia, 2 )
			Else
                nVlFalPon := Round( FaltADI * SalDor, 2 )
            EndIf    
            fGeraVerba( aCodFol[1884,1], nVlFalPon, FaltADI )
			Val_Adto -= nVlFalPon
		EndIf

		Val_Adto := Round( Val_Adto,2 )
	EndIf

Return(Informado)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³FSomaAdiant³ Autor ³ Leandro Drumond      ³ Data ³ 08.01.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Soma codigos de adiantamento. 				              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FSomaAdiant()              						          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ 												              ³±±
±±³          ³ 													          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FSomaAdiant()

	Local nPos 
	Local cPdPensao	:= ""
	Local aCodBenef := {}
	Local nNAdiant	:= 0 
	Local nLen		:= 0

	Private aNAdiant:={}

	Msvadto := Val_Adto

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Busca informacoes no cadastro de beneficiarios para			 ³
	//³ desconsiderar a pensao alimenticia da variavel BASE_INI		 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	fBusCadBenef( @aCodBenef, "ADI" )

	Aeval( aCodBenef , { |X| cPdPensao += ( X[1] + "," ) } )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Calcula/Soma na Base os Cod. que devem ser Pagos Adiantamento³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Aeval( aPD , { |X| CalVer(X,aCodFol,cPdPensao) } )

	If !Empty(aNAdiant)                                               
		For nNAdiant:=1 to Len(aNAdiant)
			nPos:= Ascan(aPD , { |X| X[1] == aNAdiant[nNAdiant] }) 
			nLen := Len(aPD)
			ADel ( aPD, nPos )	
			ASize( aPD, nLen - 1)  
		Next
	EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ CalVer   ³ Autor ³ Mauro                 ³ Data ³ 03.03.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calcula as Verbas do Adiantamento                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ CalVer(X,aCodFol,cPdPensao)                                ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ X =  Matriz Multi contendo                                 ³±±
±±³          ³ Codigo da Verba , C.Custo, Semana, Horas , Valor , Tipo1 ,;³±±
±±³          ³ Tipo2 , Parcela                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function CalVer(aPDad,aCodFol,cPDPensao)

	Local nPos		:= 0

	dbSelectArea("SRV")
	//dbSeek(SRA->RA_FILIAL+aPDad[1])
	PosSrv(aPDad[1],SRA->RA_FILIAL)
	If !Eof()
		If aPDad[3] == cNumPag .And. SRV->RV_ADIANTA == "S"
			Perc_Adi :=  SRV->RV_PERC
			Perc_Adi := IIF(Perc_Adi > 0,Perc_Adi,100)
			nPos		:= aScan(aPdv,{|x| x[1] = aPdad[1]})
			If aPdad[6] = "H"
				If nPos > 0
					If aPdv[nPos,34] == "1"
						aPdad[5] := (aPdad[4] * Salhor) * Perc_Adi / 100
					Else
						aPdad[5] := (aPdad[4] * Salhora) * Perc_Adi / 100
					EndIf
				EndIf			
			ElseIf aPdad[6] = "D"
				If nPos > 0
					If aPdv[nPos,34] == "1"
						aPdad[5] := (aPdad[4] * SalDor) * Perc_Adi / 100
					Else
						aPdad[5] := (aPdad[4] * SalDia) * Perc_Adi / 1000
					EndIf
				EndIf			
			EndIf
			If SRV->RV_TIPOCOD == "1" // Provento
				//--Somar Incidencia de Ir e nao somar codigos de Pensao e Distr. de Lucro
				If SRV->RV_IR == "S" .And. ! (aPdAd[1] $ aCodFol[058,1]+"/"+cPdPensao) .and. !(aPdad[7] $ "I*G") //Nao soma verbas informadas/geradas pois ja foram somadas em fBaseIni()
					Base_Ini += aPdad[5]
					Base_Ini := NoRound( Base_Ini )
				EndIf
				nValOutros+=If( aCodFol[08,1] <> aPdad[1] ,aPdad[5],0)
				nValOutros := NoRound( nValOutros )
			ElseIf SRV->RV_TIPOCOD == "2" // Desconto
				//--Abater Incidencia de Ir e nao somar codigos de Pensao e Distr. de Lucro
				If SRV->RV_IR == "S" .And. ! (aPdAd[1] $ aCodFol[058,1]+"/"+cPdPensao)
					Base_Ini -= aPdad[5]
					Base_Ini := NoRound( Base_Ini )
				EndIf
				nValOutros-=If( aCodFol[08,1] <> aPdad[1] ,aPdad[5],0)
				nValOutros := NoRound( nValOutros )
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Somar Verbas Dos Adiantamentos Anteriores                    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ElseIf aPDad[3] < cNumPag .And. SRV->RV_IR == "S" .And. SRV->RV_ADIANTA == "S"
			If SRV->RV_TIPOCOD == "1" // Provento
				Base_Ini += If(!(aPdad[1] $ aCodFol[058,1]+"/"+cPdPensao), aPdad[5], 0)
				Base_Ini := NoRound( Base_Ini )
			ElseIf SRV->RV_TIPOCOD == "2" // Desconto
				Base_Ini -= If(!(aPdad[1] $ aCodFol[058,1]+"/"+cPdPensao), aPdad[5], 0)
				Base_Ini := NoRound( Base_Ini )
			EndIf
		ElseIf aPdad[1] == aCodfol[6,1] .And. SRV->RV_IR == "S" .And. aPdad[3] < cNumPag
			Base_Ini += If(!(aPdad[1] $ aCodFol[058,1]+"/"+cPdPensao), aPdad[5], 0)
			Base_Ini := NoRound( Base_Ini )
		EndIf
	EndIf

Return Nil


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³FCarPDAdiant³ Autor ³ Leandro Drumond     ³ Data ³ 11.01.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Zera aPd, mantendo os informados na RGB.		              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ FCarPDAdiant()              						          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ 												              ³±±
±±³          ³ 													          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function FCarPDAdiant()

	Local nX 		:= 1
	Local nTamApd   := Len(aPd)

	While nTamApd >= nX
		//--Deleta do aPd tudo que nao for informado (RGB)
		If !(aPd[nX,7] $ "I*E*G*F*V")
			aDel(aPd,nX)
			aSize(aPd,Len(aPd)-1)
			nTamApd--
			nX-- //--Volta o valor de nX pois como aPd[N] foi deletado, aPd[N+1] passa a ser aPd[N]
		EndIf
		nX++
	EndDo

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fBuscPDSRD³ Autor ³ Leandro Drumond       ³ Data ³ 03.07.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Busca verba especifica em determinado periodo              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fBuscPDSRD()								                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fBuscPDSRD(cMesAno, cVerba)
	Local aArea		:= GetArea()
	Local cQuery	:= ""
	Local cAliasQry	:= GetNextAlias()
	Local nValor 	:= 0

	cQuery := "SELECT RD_VALOR FROM " + RetSqlName("SRD") + " WHERE "
	cQUery +=		"RD_FILIAL = '" + SRA->RA_FILIAL + "' AND "
	cQuery +=		"RD_MAT = '" + SRA->RA_MAT + "' AND "
	cQuery +=		"RD_PD = '" + cVerba + "' AND "
	cQuery +=		"RD_DATARQ = '" + cMesAno + "' AND "
	cQuery +=		"D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)

	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)

	dbSelectArea(cAliasQry)

	If (cAliasQry)->( !Eof() )
		nValor := (cAliasQry)->RD_VALOR
	Else
		nValor := SRA->RA_SALARIO
	EndIf

	dbCloseArea()

	RestArea(aArea)

Return nValor


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ FAtuCalc ³ Autor ³ Tiago Malta           ³ Data ³ 23.03.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Atualização de Verbas                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aPd      =  Matriz com as Verbas a Serem Valorizadas       ³±±
±±³          ³ aCodfol  =  Matriz Com as Verbas de Referencia             ³±±
±±³          ³ SalMes   =  Salario Mensal                                 ³±±
±±³          ³ SalDia   =  Salario Mensal                                 ³±±
±±³          ³ SalHora  =  Salario Mensal                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/ 
Function fAtuCalc(aPd,aCodfol,SalMes,Saldia,SalHora,lIncorp) 

	Local cVerbAdic :=	aCodFol[01,1]+"*"+aCodFol[02,1]+"*"+aCodFol[03,1]+"*"+aCodFol[04,1]+"*"+aCodFol[05,1]+"*"+;
	aCodFol[36,1]+"*"+aCodFol[37,1]+"*"+aCodFol[38,1]+"*"+aCodFol[39,1]+"*"+aCodFol[984,1]+"*"+aCodFol[988,1]
	Local lFatorHE	:= .F.      
	Local SavSalHora:= 0
	Local SavSaldia	:= 0 
	Local aPdAux	:= {} 
	Local aConvocAux:= {}
	Local aSalAux	:= {}
	Local lComissBRA:= .F.  
	Local lTemComiss:= .F.
	Local lIncODSR	:= GetMvRH( "MV_INCODSR",, .F. )  
	Local n
	Local nCodFol	:= 0

	lDissidio 	:= If( Type("lDissidio")=="U",.F.,lDissidio)
	
	Static lIncorPE
	Static lGpeIncSl
	
	DEFAULT lIncorp   := .T.
	DEFAULT lIncorPE  := ExistBlock("INCORPSL")
	DEFAULT lGpeIncSl := ExistBlock( "GPEINCSL" )

	Private lIncorpSal := lIncorp // Utilizada no Ponto de Entrada INCORPSL

	// Ponto de Entrada para ordenar o array aPd
	// Para uso em incorporacoes salarias fora da regra padrao do sistema
	If lGpeIncSl
		ExecBlock("GPEINCSL",.F.,.F.)
	EndIf

	//Quando for dissídio, executa a incorporação das verbas de valor que foram informadas no cálculo
	//É necessário o processo efetuado a parte pois ao contrário da folha, as verbas de valor ainda não foram incorporadas ao SalMes 
	If lDissidio
		For n := 1 To Len(aPd)		
			If AllTrim( aPd[n,3] ) # AllTrim( cSemana ) .Or. aPd[n,9] == "D"
				Loop
			EndIf

			If !(aPd[n,6] == "V" .And. aPd[n,7] $ "I/G")
				Loop
			EndIf

			// Posiciona na Matriz de Incidencia
			nPosv := ASCAN(aPdv, { |Y| Y[1]=aPd[n,1] })

			// Quando Incorporar o Salario
			If SalMes # NIl .And. aPdv[nPosv,18] = "S"
				If lIncorPE
					If !ExecBlock("INCORPSL",.F.,.F.)
						Loop
					EndIf
				EndIf			

				nValor	:= aPd[n,19]

				//-- Se for insalubirdade/periculosidade, assume o valor integral
				//-- na composicao do salario do mes
				If ( aPd[n,1] $ aCodFol[37,1]+"*"+aCodFol[38,1]+"*"+aCodFol[39,1] ) .and. Type("nIntInsal") <> 'U'
					nValor	:= if( nIntInsal > 0, nIntInsal, aPd[n,5] )

					// Se o funcionario esteve de ferias o mes todo, o valor da insalubridade ja esta incorporado na verba das ferias
					If ( cSitFolh = "F" .and. DiasTrab == 0 .and. cTipoRot == "1")
						nValor := 0.00
					EndIf

				ElseIf ( aPd[n,1] $ aCodFol[36,1]) .and. Type("nIntPercul") <> 'U' 
					nValor	:= if( nIntPercul > 0, nIntPercul, aPd[n,5] )
				EndIf

				SalMes  += nValor
				SalHora += (nValor / nHrsCal)    //--(SalMes /0 SRA->RA_hrsmes)
				SalDia  += (nValor / nDiasC)     //--SalMes / nDiasC			
			EndIf
		Next n
	EndIf

	If cTipoRot == "4" .and. SRA->RA_TPCONTR == "3" //Se for rescisão de contrato intermitente, pega o valor hora das convocações do mês
		aConvocAux := BuscaConv( , GetMemVar("RG_DATADEM"))

		If Len(aConvocAux) > 0 .and. aConvocAux[Len(aConvocAux)][4] > 0
			
			aAdd(aSalAux,Salmes)
			aAdd(aSalAux,Saldia)
			aAdd(aSalAux,SalHora)
			aAdd(aSalAux,Salario)
			aAdd(aSalAux,SalDor)
			aAdd(aSalAux,SalHor)			

			Salario := SalMes  := aConvocAux[Len(aConvocAux)][4] * NHRSCAL
			SalDor  := SalDia  := aConvocAux[Len(aConvocAux)][4] * aConvocAux[Len(aConvocAux)][7]
			SalHor  := SalHora := aConvocAux[Len(aConvocAux)][4]
		EndIf
	EndIf

	//Caso exista adicionais sobre maternidade e não haja dias trabalhados no mês, incorpora o adicional
	//ao salário se na configuração da verba principal do adicional o campo RV_INCORP estiver como "S"
	If cTipoRot == "1" .And. DiasTrab == 0 .And. !P_PGATSAFA
		For n := 1 To Len(aPd)
			If aPd[n,1] $ ( aCodFol[1338,1] + "/" + aCodFol[1339,1] + "/" +  aCodFol[1340,1] + "/" + aCodFol[1341,1] + "/" + aCodFol[1342,1] ) .And. RetValSrv(aPd[n,1], SRA->RA_FILIAL, "RV_INCORP") == "N"
				Do Case
					Case aPd[n,1] == aCodFol[1338,1]
						nCodFol := 1
					Case aPd[n,1] == aCodFol[1339,1]
						If SRA->RA_ADCINS == "2"
							nCodFol := 37
						ElseIf SRA->RA_ADCINS == "3"
							nCodFol := 38
						ElseIf SRA->RA_ADCINS == "4"
							nCodFol := 39
						EndIf
					Case aPd[n,1] == aCodFol[1340,1]
						nCodFol := 36
					Case aPd[n,1] == aCodFol[1341,1]
						nCodFol := 984
					OtherWise
						nCodFol := 988
				EndCase

				If nCodFol > 0
					If RetValSrv(aCodFol[nCodFol,1], SRA->RA_FILIAL, "RV_INCORP") == "S"
						nValor := aPd[n,5]
					Else
						nValor := 0
					EndIf
				Else
					nValor := 0
				EndIf

				SalMes  += nValor
				SalHora += (nValor / nHrsCal)
				SalDia  += (nValor / nDiasC)
			EndIf
		Next n
	EndIf

	//Efetua tratamento para ordenar as verbas colocando as que possuem referência de HE no final do array, 
	//para que todas as demais verbas que possam incorporar o salário (adicional noturno por exemplo) sejam valorizadas antes.
	n := 1
	While n <= Len(aPd)
		nPosv := aScan(aPdv, { |X| x[1] == aPd[n,1] })
		If nPosv == 0
			fIncide(aPd[n,1])
			nPosv := aScan(aPdv, { |X| x[1] == aPd[n,1] })
		EndIf
		
		If aPdv[nPosv,17] == "S"
			aAdd(aPdAux,aPd[n])
			aDel(aPd,n)
			aSize(aPd,Len(aPd)-1)
		Else
			n++
		EndIf
	EndDo
	
	For n := 1 to Len(aPdAux)
		aAdd(aPd, aPdAux[n])
	Next n

	For n := 1 To Len(aPd)

		If (lComissBRA := ( ( cPaisLoc == "BRA" )  .and.  (SRA->RA_CATFUNC == "C" )) )
			If aPd[n,1] == aCodfol[165,1] .And. aPd[n,3] == cSemana .And. aPd[n,9] # "D"
				lTemComiss := .T.
			EndIf	
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ N„o deve valorizar verbas de outras semanas ou Verbas Deletadas³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If AllTrim( aPd[n,3] ) # AllTrim( cSemana ) .Or. aPd[n,9] == "D"
			Loop
		EndIf

		If aPd[n,1] == aCodFol[48,1] .and. cTipoRot == "4" .and. cCompl == "S" .and. SRA->RA_CATFUNC <> 'H'
			//Não valoriza verba de saldo de salário, mesmo que esteja em "Horas", pois deve manter o valor calculado na rescisão original.
			If aPd[n,5] > 0
				Loop
			EndIf
		EndIf

		// Posiciona na Matriz de Incidencia
		nPosv := ASCAN(aPdv, { |Y| Y[1]=aPd[n,1] })

		If ( aPd[n,7] == "F" .And. aPd[n,5] <> 0.00 ) .or. !( aPd[n,6] $ "H*D") .Or. ( cTipoRot == "4" .And. aPd[n,1] $ cVerbAdic .And. (aPd[n,7] <> "I" .Or. (cCompl == "S" .And. lProxMes .And. !lRescDis .And. aScan( aPd, { |x| x[1] == aCodFol[151,1] .And. AnoMes(x[18]) == AnoMes(M->RG_DTGERAR)  } ) > 0 ) )) 
			Loop
		EndIf

		If (SalMes # Nil .Or. (SalMes = Nil .And. aPdv[nPosv,18] # "S" )) .And. Empty(aPdv[nPosv,31]) .and. !( lIncODSR .And. ( aScan(aPdv, { |Y| Y[32] == aPd[n, 1] }) > 0 ) ) //Tarefa
			If ( aPd[n,5] = 0 .And. aPd[n,7] $ "I*E*G*F" )	.Or. ( lDissidio .And. aPd[n,7] $ "I*E*G*F" )  .Or. ( FunName()=="GPEM040" .And. aPd[n,7] $ "I*E*G*F" )
				If aPd[n,6] == "H"
					If aPdv[nPosv,34] == "1"
						aPd[n,19] := aPd[n,5] := Round((SALHOR * aPd[n,4] ) * (aPdv[nPosv,2] / 100 ),MsDecimais(1))
						aPd[n,20] := SALARIO
					Else
						aPd[n,19] := aPd[n,5] := Round((SALHORA * aPd[n,4] ) * (aPdv[nPosv,2] / 100 ),MsDecimais(1))
						aPd[n,20] := SALMES
					EndIf
					aPd[n,9] := " "
				ElseIf aPd[n,7] == "F" .And. aPd[n,5] = 0.00
					If aPdv[nPosv,34] == "1"
						aPd[n,19] := aPd[n,5] := Round((SALHOR * aPd[n,4] ) * (aPdv[nPosv,2] / 100 ),MsDecimais(1))
						aPd[n,20] := SALARIO
					Else
						aPd[n,19] := aPd[n,5] := Round((Salhora * aPd[n,4] ) * (aPdv[nPosv,2] / 100 ),MsDecimais(1))
						aPd[n,20] := SALMES
					EndIf
					aPd[n,9] := " "
				ElseIf aPd[n,6] == "D"
					If aPdv[nPosv,34] == "1"
						aPd[n,19] := aPd[n,5] := Round((SALDOR * aPd[n,4]) * (aPdv[nPosv,2] / 100),MsDecimais(1))
						aPd[n,20] := SALARIO
					Else
						aPd[n,19] := aPd[n,5] := Round((SALDIA * aPd[n,4]) * (aPdv[nPosv,2] / 100),MsDecimais(1))
						aPd[n,20] := SALMES
					EndIf
					aPd[n,9] := " "
				EndIf
			ElseIf Type("lSalInco") != "U" .And. lSalInco .And. aPd[n,6] == "H" .And. aPd[n,5] > 0 .And. aPd[n,7] $ "I*E*G*F" .And. aPdv[nPosv,18] == "S"
				Loop
			EndIf
		EndIf  

		//Restaura o valor original apos o calculo Fator de Hora Extra
		If lFatorHE
			SalHora	:= SavSalHora
			Saldia	:= SavSaldia
			lFatorHE := .F.
		EndIf

		// Quando Incorporar o Salario
		If SalMes # NIl .And. aPdv[nPosv,18] = "S"

			If lIncorPE
				If !ExecBlock("INCORPSL",.F.,.F.)
					Loop
				EndIf
			EndIf

			If lIncorpSal 

				nValor	:= aPd[n,5]

				If lDissidio
					//-- Se for insalubirdade/periculosidade, assume o valor integral
					//-- na composicao do salario do mes
					If ( aPd[n,1] $ aCodFol[37,1]+"*"+aCodFol[38,1]+"*"+aCodFol[39,1] ) .AND. Type("nIntInsal") <> 'U' 
						nValor	:= if( nIntInsal > 0, nIntInsal, aPd[n,5] )

						// Se o funcionario esteve de ferias o mes todo, o valor da insalubridade ja esta incorporado na verba das ferias
						If ( cSitFolh = "F" .and. DiasTrab == 0 .and. cTipoRot == "1")
							nValor := 0.00
						EndIf

					ElseIf ( aPd[n,1] $ aCodFol[36,1]) .and. Type("nIntPercul") <> 'U'
						nValor	:= if( nIntPercul > 0, nIntPercul, aPd[n,5] )
					EndIf
				EndIf

				//so valoriza verbas que não foram calculadas pelo sistema
				If !(aPd[n,7] $ "C*F*R*K") 
					SalMes  += nValor
					SalHora += (nValor / nHrsCal)    //--(SalMes /0 SRA->RA_hrsmes)
					SalDia  += (nValor / nDiasC)     //--SalMes / nDiasC
					If Len(aSalAux) > 0 //Incorpora nas verbas originais da rescisão de intermitente
						aSalAux[1] += nValor
						aSalAux[2] += (nValor / nDiasC)
						aSalAux[3] += (nValor / nHrsCal)
					EndIf
				EndIf

				//Caso seja a rotina de rescisao, atualiza o cabecalho do salario com os valores com a incorporacao			
				If cTipoRot == "4" .And. IsInCallStack( "GPEM040" )
					M->RG_SALMES  := SalMes
					M->RG_SALDIA  := SalDia
					M->RG_SALHORA := SalHora
				EndIf
			EndIf 

		EndIf

	Next n 

	aSort( aPD ,,, { |x,y| x[1] + x[11] < y[1] + y[11] } ) 
	
	// Se for rescisão guarda o valor das verbas lançadas que incorporam salário e não tem identificador de cálculo.
	If cTipoRot == "4"
		aeval( APD , { |X| NINCSEMID += IF( !(x[7] $ "F*K") .And. RetValSrv(x[1], SRA->RA_FILIAL,"RV_INCORP") == "S" .And. Empty(RetValSrv(x[1], SRA->RA_FILIAL, "RV_CODFOL")) .And. X[9] # "D" , If(X[19] > 0, X[19], X[5]) , 0.00 ) } )
	EndIf

	If Len(aSalAux) > 0 //Se rescisão de intermitente, retorna os valores originais das verbas de salário
		SalMes  := aSalAux[1]
		SalDia  := aSalAux[2]
		SalHora := aSalAux[3]
		Salario := aSalAux[4]
		SalDor  := aSalAux[5]
		SalHor  := aSalAux[6]

		If IsInCallStack( "GPEM040" )
			M->RG_SALMES  := SalMes
			M->RG_SALDIA  := SalDia
			M->RG_SALHORA := SalHora
		EndIf
	EndIf

Return()                                      

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³IncorpSal ºAutor  ³Tiago Malta         º Data ³  12/08/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Função para incorporar mnemonicos de salario.              º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function IncorpSal(nVlPd,nValor,lDesconto)

	Local nValAux:= 0

	DEFAULT nVlPd  := 0
	DEFAULT nValor := 0
	DEFAULT lDesconto := .F.

	nValAux := nVlPd

	If nValor > 0
		If nValor > nValAux
			nValAux := nValor - nValAux
		ElseIf nValor < nValAux 
			nValAux := nValAux - nValor	
		EndIf
	EndIf

	//Se lDesconto significa que o tipo da verba é de desconto portanto deverá ser subtraído o valor e não somado.
	If !lDesconto
		SalMes  += nValAux
		SalHora += (nValAux / nHrsCal)    
		SalDia  += (nValAux / nDiasC)
	Else
		SalMes  -= nValAux
		SalHora -= (nValAux / nHrsCal)    
		SalDia  -= (nValAux / nDiasC)
	Endif

Return()     


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fPropor   ºAutor  ³Tiago Malta         º Data ³  12/08/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Função para propocionalizar dias e horas.                  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fPropor(nValor,nHoras,cTip1,nValInteg,nDiasC)

	DEFAULT nValor 		:= 0 
	DEFAULT nHoras 		:= 0
	DEFAULT cTip1 		:= ""
	DEFAULT nValInteg 	:= 0
	DEFAULT nDiasC 		:= 0

	If cTip1 $ "D*H" .And. nHoras > 0
		If SRA->RA_TIPOPGT == "S" .and. SRA->RA_CATFUNC == "S"
			nHoras := ( (nHoras / nDiasC ) * Min(( DiasTrab + DiasDSR + nDiasPG - nDiasMat - nDPrgSalMa ),nDiasC) )
		Else
			nHoras := ( (nHoras / nDiasC ) * Min(( DiasTrab + nDiasPg - nDiasMat - nDPrgSalMa ),nDiasC))
		EndIf
	Else
		nHoras := Min((DiasTrab + nDiasPg - nDiasMat - nDPrgSalMa),nDiasC)
	Endif 

	nValInteg := nValor

	If SRA->RA_TIPOPGT == "S" .and. SRA->RA_CATFUNC == "S"
		nValor := Round( ( ( nValor / nDiasC ) * Min(( DiasTrab + DiasDSR + nDiasPg - nDiasMat - nDPrgSalMa ),nDiasC) ), MsDecimais(1) )
	Else
		nValor := Round( ( ( nValor / nDiasC ) * Min(( DiasTrab + nDiasPg - nDiasMat - nDPrgSalMa),nDiasC) ), MsDecimais(1) )
	EndIf

Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³fCarPdCalc     ºAutor  ³Leandro Drumond  º Data ³ 12/09/2013  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³Verifica existencia de verbas necessarias para o calculo      º±±
±±º        ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³ Roteiro de Calculo - Generico                                º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fCarPdCalc()
	Local aIdErro	:= {}
	Local lRet 		:= .T.
	Local nX		:= 0

	If cTipoRot == "2" //Adiantamento
		If GetMvRH("MV_ARREDAD") > 0 //Se utiliza arredondamento
			If Empty(aCodFol[1329,1]) //Arredondamento (Provento)
				aAdd(aIdErro,("1329 - " + aCodFol[1329,2]))
			EndIf
		EndIf
	EndIf

	If cTipoRot == "F" //PLR
		If Empty(aCodFol[151,1]) //Distribuicao de Lucros
			aAdd(aIdErro,("0151 - " + aCodFol[151,2]))
		EndIf
		If Empty(aCodFol[152,1]) //IR PLR
			aAdd(aIdErro,("0152 - " + aCodFol[152,2]))
		EndIf
		If Empty(aCodFol[835,1]) //Base IR PLR
			aAdd(aIdErro,("0835 - " + aCodFol[835,2]))
		EndIf
		If Empty(aCodFol[836,1]) //Liquido PLR
			aAdd(aIdErro,("0836 - " + aCodFol[836,2]))
		EndIf
		If Empty(aCodFol[1279,1]) //PLR PRIMEIRA PARCELA
			aAdd(aIdErro,("1279 - " + aCodFol[1279,2]))
		EndIf
	EndIf
	
	If cTipoRot == "1" .and. IsInCallStack("fCDifFerias") .and. P_LDIFMED
		If Empty(aCodFol[838,1]) //Diferenca de Media de Ferias no Mes 
			aAdd(aIdErro,("0838 - " + aCodFol[838,2]))
		EndIf
		If Empty(aCodFol[839,1]) //Diferenca de Media de Ferias Mes Seguinte
			aAdd(aIdErro,("0839 - " + aCodFol[839,2]))
		EndIf
	EndIf

	If !Empty(aIdErro)
		lRet := .F.
		AddLogExecRot( STR0037 )	// "Necessário cadastrar verbas com os seguintes ID's: "
		For nX := 1 to Len(aIdErro)
			AddLogExecRot( Space(5) + aIdErro[nX] )
		Next nX
	EndIf

Return lRet

/*/{Protheus.doc} fCDifFerias
Verifica existencia de diferenca de ferias - Usada no Roteiro de Calculo - Folha
@author Leandro Drumond
@since 06/11/2013
/*/
Function fCDifFerias()
	
	Local aArea			:= GetArea()
	Local aAreaSRF		:= SRF->( GetArea() )
	Local aSaveMnemo	:= {}
	Local aFerP11		:= {}
	Local aGrvFer		:= {}
	Local aPdMSeg		:= {}
	Local aCodBenef		:= {}
	Local aAuxDissDif	:= {}
	Local aAuxOld		:= {}
	Local cDataRef		:= If(cTipoRot == "4", AnoMes(dDataDem),AnoMes(dDataDe)) //Inicio do periodo
	Local cSeq			:= ""
	Local cTpRotSv		:= cTipoRot
	Local dDtMesSeg		:= CtoD("")
	Local lGeraDif		:= .F.
	Local lTemReaj		:= .F.
	Local nElem			:= 0
	Local nElem1		:= 0
	Local nCount		:= 0
	Local nPos			:= 0
	Local nPosAux		:= 0
	Local nTamAux		:= 0
	Local nAntec13o 	:= 0
	Local nFer			:= 0
	Local nMedia13s		:= 0
	Local nMediaHrs		:= 0
	Local nMediaOut		:= 0
	Local nOrderSRR		:= RetOrder("SRR", "RR_FILIAL+RR_MAT+RR_PERIODO+RR_ROTEIR+RR_SEMANA+RR_PD+RR_CC+RR_ITEM+RR_CLVL+RR_SEQ+DTOS(RR_DATA)")
	Local lsvDissidio
	Local lsvDif1046	:= .F.
	Local lsvDif927		:= .F.
	Local lFer3Per
	Local aPdFer		:= {}
	Local dDtFim
	Local dDtIni
	Local nSalDif		:= 0
	Local nSalDifMin	:= 0
	Local cBkpRot 		:= ""
	Local cBkpPer 		:= ""
	Local cBkpNumPago	:= ""
	Local cCodPgMed		:= ""
	Local cCodMedHr		:= ""
	Local cCodMedHa		:= ""
	Local cCodMedVl		:= ""
	Local cCodMedVlA	:= ""
	Local cFilBsc	:= SRA->RA_FILIAL
	Local cMatBsc	:= SRA->RA_MAT
	Local aTransf	:= {}
	Local nX		:= 0
	Local nTransf	:= 0
	
	Private aPdCopia    := aClone(aPd)
	Private aDif_Fer	:= {}
	Private lBkpCompl	:= lCalcCompl
	Private nSalMesI    := 0
	Private nDfMedHr   	:= 0
	Private nDfMedHA	:= 0
	Private nDfMedVl   	:= 0
	Private nDfMedVlA	:= 0
	Private lDfMedPMes  := .T.
	
	If Type("P_LDIFINC") <> "U" .And. P_LDIFINC
		nSalMesI := If(SRA->RA_CATFUNC $ "H*G*T", SalHora, SalMes)
	EndIf
	
	lDissidio	:= If( type("lDissidio") == "U", .F., lDissidio)
	lsvDissidio	:= lDissidio
	lMedMP1046	:= .F.
	lMedMP927	:= .F.

	// Zera o array aDifFer com os periodos de ferias no mes para nao
	// haver duplicidade de calculo na diferenca durante a rescisao.
	If cTipoRot == "4"
		aDifFer := {}	// Mnemônico
	Endif
	
	DbSelectArea("SRR")
	DbSelectArea("SRH")
	
	If lDissidio
		aEval( aPd, { |x| If( x[7] == "F" .And. fDesc("SRV", x[1], "RV_REFFER", Nil, SRA->RA_FILIAL) == "S" .And. !(x[1] $ P_ADIPGFE+"/"+P_ADIPGAB), x[9] := "D", Nil ) }  )
	
		// Carrego transferecias de filial do funcionario
		fTransf(@aTransf,,,,,,,.T.)
		If Len(aTransf) > 0
			aSort(aTransf,,,{|x,y| x[7]>y[7]} ) //Ordena a partir da transferencia mais recente
			nTransf	:= Len(aTransf)	
			For nX := 1 To nTransf			
				// Houve transferencia(s) antes do calculo entre filiais, nesta ocasião o registros SRH/SRR estarão deletados na Filial Origem
				// e copiados na Filial Destino, é preciso trocar a chave de busca nesses registros
				// Filial Origem + Matricula Origem <> Filial Destino + Matricula Destino
				If aTransf[nx,02] <> aTransf[nx,05]
					cFilBsc	:= aTransf[nx,10] // Filial de Destino
					cMatBsc	:= aTransf[nx,11] // Matricula de Destino
					Exit
				EndIf
			Next nX
		EndIf
	
	EndIf

	If SRH->(DbSeek(cFilBsc + cMatBsc))
		While ! SRH->(Eof()) .And. SRA->(cFilBsc + cMatBsc) == SRH->(RH_FILIAL + RH_MAT)
			If ( SRH->(AnoMes(RH_DATAINI) == cDataRef .Or. AnoMes(RH_DATAFIM) == cDataRef .Or. (AnoMes(RH_DATAINI) < cDataRef .And. AnoMes(RH_DATAFIM) > cDataRef) .Or. ( RH_ABOPEC != "1"  .And. AnoMes(RH_DATAFIM + RH_DABONPE) == cDataRef )) ) .Or.;
				(P_LMEDMP927 .And. !Empty(P_MP927INI) .And. !Empty(P_MP927FIM) .And. AnoMes(RH_DATAINI) >= P_MP927INI .And. AnoMes(RH_DATAINI) <= P_MP927FIM .And. AnoMes(RH_DATAINI) < AnoMes(RH_DBASEAT) .And. (cDataRef > AnoMes(RH_DBASEAT) .Or. cTipoRot == "4" .And. cCompl == "S") .And. !fDifMP927()) .Or.;
				(P_LMEDMP1046 .And. !Empty(P_DINIADI) .And. !Empty(P_DFIMADI) .And. RH_DATAINI >= P_DINIADI .And. RH_DATAINI <= P_DFIMADI .And. AnoMes(RH_DATAINI) < AnoMes(RH_DBASEAT) .And. (cDataRef > AnoMes(RH_DBASEAT) .Or. cTipoRot == "4" .And. cCompl == "S") .And. !fDifMP1046())
				
				If P_LMEDMP927 .And. !Empty(P_MP927INI) .And. !Empty(P_MP927FIM) .And. AnoMes(SRH->RH_DATAINI) >= P_MP927INI .And. AnoMes(SRH->RH_DATAINI) <= P_MP927FIM .And. AnoMes(SRH->RH_DATAINI) < AnoMes(SRH->RH_DBASEAT) .And. (cDataRef > AnoMes(SRH->RH_DBASEAT) .Or. cTipoRot == "4" .And. cCompl == "S") .And. !fDifMP927()
					lMedMP927 := .T.
				EndIf
				If P_LMEDMP1046 .And. !Empty(P_DINIADI) .And. !Empty(P_DFIMADI) .And. SRH->RH_DATAINI >= P_DINIADI .And. SRH->RH_DATAINI <= P_DFIMADI .And. AnoMes(SRH->RH_DATAINI) < AnoMes(SRH->RH_DBASEAT) .And. (cDataRef > AnoMes(SRH->RH_DBASEAT) .Or. cTipoRot == "4" .And. cCompl == "S") .And. !fDifMP1046()
					lMedMP1046 := .T.
				EndIf

				//-- Gera aDifFer que sera utilizado no calculo do INSS
				nDiasMse 	:= 0
				nDfMedVl 	:= 0
				nDfMedHr 	:= 0
				lsvDif927	:= lMedMP927
				lsvDif1046	:= lMedMP1046
				
				If lDissidio
					//Verifica a verba onde será efetuado pagamento da média em valor
					If SRA->RA_CATFUNC == "C"
						cCodPgMed	:= aCodFol[343,1]//Media Ferias de Comissiao no Mes
					ElseIf SRA->RA_CATFUNC == "T"
						cCodPgMed	:= aCodFol[345,1]//Media Ferias de Tarefa no Mes
					ElseIf SRA->RA_CATFUNC $ "I*J"
						cCodPgMed	:= aCodFol[636,1]//Media Ferias (calculo professor)
					Else
						cCodPgMed	:= aCodFol[075,1]//Media Ferias Valor
					EndIf
					//Verifica a verba onde será efetuado a geração da diferença de férias
					cCodMedVl := RetValSRV(cCodPgMed, SRA->RA_FILIAL, "RV_FERSEG") + "/"
					cCodMedVlA += RetValSRV(aCodFol[623,1], SRA->RA_FILIAL, "RV_FERSEG") + "/"
					cCodMedHr := RetValSRV(aCodFol[082,1], SRA->RA_FILIAL, "RV_FERSEG") + "/"
					cCodMedHa += RetValSRV(aCodFol[622,1], SRA->RA_FILIAL, "RV_FERSEG") + "/"
					//Verifica o valor da diferença da media de valor que foi paga no mes original ref. Ferias
					nDfMedVl := fBuscaAcm(cCodMedVl, , SRH->RH_DATAINI, SRH->RH_DATAFIM+SRH->RH_DABONPE,"V")
					//Verifica o valor da diferença da media de valor que foi paga no mes original ref. Abono
					nDfMedVlA := fBuscaAcm(cCodMedVlA, , SRH->RH_DATAINI, SRH->RH_DATAFIM+SRH->RH_DABONPE,"V")
					//Verifica o valor da diferença da media de horas que foi paga no mes original ref. Ferias
					nDfMedHr := fBuscaAcm(cCodMedHr, , SRH->RH_DATAINI, SRH->RH_DATAFIM+SRH->RH_DABONPE,"V")
					//Verifica o valor da diferença da media de horas que foi paga no mes original ref. Abono
					nDfMedHA := fBuscaAcm(cCodMedHa, , SRH->RH_DATAINI, SRH->RH_DATAFIM+SRH->RH_DABONPE,"V")
					//Indica se houve pagamento de diferença de médias no mês que iniciou as férias
					If AnoMes(SRH->RH_DATAINI) <> AnoMes(SRH->RH_DATAFIM+SRH->RH_DABONPE) .and. P_LMEDFERD
						lDfMedPMes := fBuscaAcm(cCodMedVl+cCodMedVlA+cCodMedHr+cCodMedHa, , SRH->RH_DATAINI, StoD(AnoMes(SRH->RH_DATAINI) + StrZero(f_UltDia(SRH->RH_DATAINI),2)),"V") > 0
					EndIf
				EndIf
				
				If Month(dDataDe) < 12
					dDtMesSeg 	:= CtoD("01/"+StrZero(Month(dDataDe)+1,2)+"/"+StrZero(Year(dDataDe),4),"DDMMYY")
				Else
					dDtMesSeg 	:= CtoD("01/01/"+StrZero(Year(dDataDe)+1,4),"DDMMYY")
				Endif
				
				If Month(SRH->RH_DATAINI)==Month(SRH->RH_DATAFIM) .And. Year(SRH->RH_DATAINI) == Year(SRH->RH_DATAFIM)
					nDiasMse	:= 0
				Else
					If MesAno(SRH->RH_DATAFIM) > MesAno(dDtMesSeg)
						nDiasMse 	:= f_UltDia(dDtMesSeg)
						If Month(SRH->RH_DATAINI) == 1 .And. Month(SRH->RH_DATAFIM) == 3
							nDiasMse := nDiasMse + Day(SRH->RH_DATAFIM)
						EndIf
					Else	
						nDiasMse := Day(SRH->RH_DATAFIM) - SRH->RH_DIALRE1
					EndIf
				EndIf
				
				//Se foi pago abono pecuniário apóso período de férias, soma os dias de abono da data fim
				dDtFim	:= If(SRH->RH_DABONPE > 0 .and. SRH->RH_ABOPEC <> '1', (SRH->RH_DATAINI + SRH->RH_DFERIAS + SRH->RH_DABONPE) - 1 ,SRH->RH_DATAFIM)  
				dDtIni	:= SRH->RH_DATAINI
				nSalDif	:= SRH->RH_SALDIF
				nSalDifMin := SRH->RH_SALMIN
				
				Aadd(aDifFer,{ SRH->(Recno()) , nDiasMes , nDiasMse })
				
				//--Fim geracao aDifFer
				If !lDissidio .And. cTipoRot != "4"
					If SRA->RA_CATFUNC == "C" .And. SRA->RA_SALARIO == 0
						// Se comissionista puro
						lGeraDif := .T.
					Else 
						If MesAno(dDtIni) == cPeriodo
							lTemReaj := ( SRH->RH_SALARIO > 0 .AND. SRH->RH_SALARIO <> IIf(fDifIncorp(.T.,.T.),nSalMesInc,SRA->RA_SALARIO) ) .OR. (SRH->RH_SALMIN > 0 .AND. SRH->RH_SALMIN <> Val_SalMin)
							lGeraDif := lTemReaj .Or. P_LDIFMED
							
							If lGeraDif .and. !lTemReaj //Não existe reajuste mas o mnemonico para calcular diferença de médias esta ativo.
								If !fCarPdCalc() //Verifica se as verbas de diferença de médias estão cadastradas
									FINALCALC()
								EndIf
							EndIf
						ElseIf MesAno(dDtFim) == cPeriodo .or. ( MesAno(dDtIni) < cPeriodo .and. MesAno(dDtFim) > cPeriodo ) //Se férias iniciar em 31/01 poderá acabar em março.
							lGeraDif := ( SRH->RH_SALDIF > 0 .AND. SRH->RH_SALDIF <> IIf(fDifIncorp(.T.,.T.),nSalMesInc,SRA->RA_SALARIO) )  .OR. (SRH->RH_SALMIN > 0 .AND. SRH->RH_SALMIN <> Val_SalMin) .Or. lMesAcuAts 
						EndIf
					EndIf
				Else
					// No dissídio sempre recalcula as férias
					lGeraDif := lDissidio .Or. (!Empty(SRH->RH_SALARIO) .AND. SRH->RH_SALARIO <> IIf(fDifIncorp(.T.,.T.),nSalMesInc,SALARIO) .Or. (SRA->RA_CATFUNC == "C" .And. SRA->RA_SALARIO == 0))
				EndIf
				
				If lGeraDif .Or. lMedMP927 .Or. lMedMP1046
					
					aDif_Fer := {}
					
					SRR->(DbSetOrder(nOrderSRR))
					
					If SRR->(DbSeek(SRH->(RH_FILIAL+RH_MAT+RH_PERIODO+RH_ROTEIR+RH_NPAGTO)))
						//Se for férias partidas, procura verba de mês seguinte
						//Se não encontrar, significa que cálculo foi efetuado na P11 e apura as diferenças conforme conceito da P11
						If MesAno(SRH->RH_DATAFIM + IIf(SRH->RH_ABOPEC <> '1',SRH->RH_DABONPE,0)) == AnoMes(SRH->RH_DATAINI) .Or. ( MesAno(SRH->RH_DATAFIM + IIf(SRH->RH_ABOPEC <> '1',SRH->RH_DABONPE,0)) != AnoMes(SRH->RH_DATAINI) .And. ( SRR->(DbSeek(SRH->(RH_FILIAL+RH_MAT+RH_PERIODO+RH_ROTEIR+RH_NPAGTO+aCodFol[78,1]))) .OR. SRR->(DbSeek(SRH->(RH_FILIAL+RH_MAT+RH_PERIODO+RH_ROTEIR+RH_NPAGTO+aCodFol[206,1]))) .OR. SRR->(DbSeek(SRH->(RH_FILIAL+RH_MAT+RH_PERIODO+RH_ROTEIR+RH_NPAGTO+aCodFol[73,1]))) ))
							SRR->( DbSeek(SRH->(RH_FILIAL+RH_MAT+RH_PERIODO+RH_ROTEIR+RH_NPAGTO)) )
							While SRR->(!Eof() .and. RR_FILIAL + RR_MAT + RR_PERIODO + RR_ROTEIR + RR_SEMANA == SRH->RH_FILIAL + SRH->RH_MAT + SRH->RH_PERIODO + SRH->RH_ROTEIR + SRH->RH_NPAGTO )
								If ( SRH->RH_DTRECIB == SRR->RR_DATAPAG ) .And. ( SRH->RH_DATAINI == SRR->RR_DATA )
									aAdd(aDif_Fer, { SRR->RR_PD, SRR->RR_VALOR, 0, 0, 0, SRR->RR_SEQ, SRR->RR_DATAPAG } )
								EndIf
								SRR->(DbSkip())
							EndDo
						Else
							// FERIAS GERADA NA VERSÃO P11 E DISSIDIO CALCULO P12
							If Month(SRH->RH_DATAINI)== Month(SRH->RH_DATAFIM) .And. Year(SRH->RH_DATAINI) == Year(SRH->RH_DATAFIM)
								nDiasMes := ( Day(SRH->RH_DATAFIM) - Day(SRH->RH_DATAINI) - SRH->RH_DIALREM ) + 1
								nDiasMse := 0
								If ( nDiasMes + SRH->RH_DIALREM ) > 30
									nDiasMes := 30 - SRH->RH_DIALREM
								Endif
							Elseif Anomes(SRH->RH_DATAINI) == cDataRef 
								nDiasMes := ( f_UltDia(SRH->RH_DATAINI) - Day(SRH->RH_DATAINI) - SRH->RH_DIALREM ) + 1
													//--Montar Dias de ferias mes seguinte
								If Month(ddataRef) < 12
									dDtMesSeg 	:= Ctod("01/"+StrZero(Month(dDataRef)+1,2)+"/"+StrZero(Year(dDataRef),4),"DDMMYY")
								Else
									dDtMesSeg 	:= Ctod("01/01/"+StrZero(Year(dDataRef)+1,4),"DDMMYY")
								Endif
													//-- Verifica se mes/ano final e maior que data do mes seguinte se for 
													//-- utilizar ultimo dia do mes como dias de ferias mes seguinte
								If MesAno(SRH->RH_DATAFIM) > MesAno(dDtMesSeg)
									nDiasMse 	:= f_ultDia(dDtMesSeg)
								Else
									nDiasMse 	:= Day(SRH->RH_DATAFIM) - SRH->RH_DIALRE1
								Endif
							Elseif AnoMes(SRH->RH_DATAFIM) == cDataRef//- Estou no mes Seguinte
									nDiasMse 	:= Day(SRH->RH_DATAFIM) - SRH->RH_DIALRE1
									//nDiasMse := 0	
							EndIf
							
							Aadd(aFerP11, { SRH->(Recno()), nDiasMes, nDiasMse })
							Aadd(aDifFer,{ SRH->(Recno()) , nDiasMes , nDiasMse })
							LDISSFER11 := .T.			
						EndIf
						
						If SRH->RH_DABONPE > 0
							//apura dos dias de abono
							If !empty(SRH->RH_ABOPEC)
								cAboAnt :=	SRH->RH_ABOPEC
							Else
								cAboAnt :=	GetMv("MV_ABOPEC")
								cAboAnt := if(cAboAnt=="S","1","2")
							EndIf
							
							If cAboAnt == "1"	
								dDtIAb := SRH->RH_DATAINI - SRH->RH_DABONPE
								dDtFAb := SRH->RH_DATAINI -1
							Else	
								dDtIAb := SRH->RH_DATAFIM + 1
								dDtFAb := SRH->RH_DATAFIM + SRH->RH_DABONPE
							EndIf

							If MesAno(dDtIAb) == MesAno(SRH->RH_DATAFIM)  .And. MesAno(dDtFAb) # MesAno(SRH->RH_DATAFIM)	
								nDAbMes := (F_ULTDIA(dDtIAb) - Day(dDtIAb)) + 1
								nDAbMse := Day(dDtFAb)
							ElseIf MesAno(dDtIAb) > MesAno(SRH->RH_DATAFIM)		
								nDAbMes := 0
								nDAbMse := SRH->RH_DABONPE
							ElseIf MesAno(SRH->RH_DATAINI) <= MesAno(SRH->RH_DATAFIM) .And. MesAno(dDtFAb) == MesAno(SRH->RH_DATAFIM)	;
									.And. 	MesAno(dDtIAb) < MesAno(SRH->RH_DATAFIM)	
								nDAbMes := Day(dDtFAb)
								nDAbMse := 0
							Else
								nDAbMes := SRH->RH_DABONPE
								nDAbMse := 0
							EndIf
						EndIf
						If !lDissidio
							nDfMedHA 	:= ( nDfMedHA / nDAbMes ) * SRH->RH_DABONPE
							nDfMedVlA 	:= ( nDfMedVlA / nDAbMes ) * SRH->RH_DABONPE
						EndIf
					EndIf
					
					If ! Empty(aDif_Fer)
						
						If Empty(aSaveMnemo)
							aSaveMnemo	:= SaveMnemonicos() //Salva os mnemonicos utilizados no calculo da folha
						EndIf
						
						cSvSetRot		:= cBkpRot 		:= cRot
						cSvSetPer		:= cBkpPer 		:= cPeriodo
						cSvSetNumPago	:= cBkpNumPago	:= cNumPag
						
						If lDissidio
							aAuxDissDif := aClone(aDissInf)
							aAuxOld 	:= aClone(aPdOld)
							If nDiasMse > 0 .or. nDAbMse > 0
								fCrgMesSeg(@aAuxDissDif,cPeriodo==SRH->RH_PERIODO)
							EndIf							
						EndIf
						
						SetMnemonicos(NIL,NIL,.T.) //Reseta mnemonicos    
						
						cRotPr			:= cTpRotSv	// Grava Roteiro Primario
						
						cRot			:= SRH->RH_ROTEIR
						cPeriodo		:= SRH->RH_PERIODO
						cNumPag			:= SRH->RH_NPAGTO
						cProcesso		:= SRA->RA_PROCES
						cTipoRot		:= "3" //Ferias
						lCalcFol		:= .T.	//Indica que esta calculando a folha de pagamento, para executar apenas parte do roteiro de feriias
						
						//Carrega variaveis na memoria para utilizacao no roteiro de ferias
						SetMemVar( "RH_DTRECIB" ,SRH->RH_DTRECIB ,.T.)
						SetMemVar( "RH_DATAINI" ,SRH->RH_DATAINI ,.T.)
						SetMemVar( "RH_DATAFIM" ,SRH->RH_DATAFIM ,.T.)
						SetMemVar( "RH_PERC13S" ,SRH->RH_PERC13S ,.T.)
						SetMemVar( "RH_DFERIAS" ,SRH->RH_DFERIAS ,.T.)
						SetMemVar( "RH_DABONPE" ,SRH->RH_DABONPE ,.T.)
						SetMemVar( "RH_DFERVEN" ,SRH->RH_DFERVEN ,.T.)
						SetMemVar( "RH_DBASEAT" ,SRH->RH_DBASEAT ,.T.)
						SetMemVar( "RH_DATABAS" ,SRH->RH_DATABAS ,.T.)
						SetMemVar( "RH_ABOPEC"  ,SRH->RH_ABOPEC  ,.T.)
						SetMemVar( "RH_DIALRE1" ,SRH->RH_DIALRE1 ,.T.)
						SetMemVar( "RH_DIALREM" ,SRH->RH_DIALREM ,.T.)
						
						lDissidio 		:= lsvDissidio
						If !lDissidio
							lMedMP927	:= lsvDif927
							lMedMP1046	:= lsvDif1046
						EndIf

						SetRotExec( cRot )
						SetPeriodCalc( cPeriodo )
						SetNumPgCalc( cNumPag )
						
						If lDissidio
							aDissInf := aClone(aAuxDissDif)
							aPdOldAux:= aClone(aAuxOld)
						EndIf

						SRF->(DbSetOrder(1))
						SRF->(DbSeek(SRH->(RH_FILIAL+RH_MAT+DtoS(RH_DATABAS))))
						
						// Executa as formulas do roteiro de ferias
						ExecRot( SRA->RA_FILIAL , cRot )
						
						SetRotExec( cBkpRot )
						SetPeriodCalc( cBkpPer )
						SetNumPgCalc( cBkpNumPago )
						
						nElem := Len(aPd)
						
						// CONTA OS ELEMENTOS VALIDOS PARA MONTAR O NOVO aCols
						nElem1 := 0
						aEval(aPd,{ |X| nElem1 += If( Round(x[5],2) = 0.00 .Or. X[9]=="D" ,0 ,1) })
						
						If nElem1 > 0
							//Se foi calculado verba de férias mes seguinte, e no calculo original não possui esta verba, significa que o calculo original não foi feito na P12,
							//portanto, carrega array com verbas do mes seguinte para somar nas verbas do mes e calcular a diferença corretamente.
							If (aScan(aPd, {|x| x[1] == aCodFol[73,1] .and. x[9] <> "D"})) > 0 .and. (aScan(aDif_Fer, {|x| x[1] == aCodFol[73,1]})) == 0
								aPdMSeg := fCarPdMSeg()
							EndIf
							
							aSort( aPD ,,, { |x,y| x[1] + x[11] < y[1] + y[11] } )
							
							lFer3Per := MesAno(dDtIni) <> MesAno(dDtFim) .and. Val(MesAno(dDtIni)) <> Val(MesAno(MonthSub(dDtFim ,1))) 
							
							For nCount = 1 To nElem
								If Round(aPd[nCount,5],2) == 0.00 .Or. aPd[nCount,9] == "D"
									Loop
								EndIf
								
								//Se for dissidio com férias pagas em dois meses, e estiver calculando o primeiro período de férias, verifica se verba possui configuração para dissidio ou incidência para INSS/FGTS
								//No último período, inclui todas as verbas pois precisa fazer a alteração das verbas de mes e mês seguinte.
								//Utilizo a variável cBkpPer pois a função multv altera o conteúdo da variável cSvSetPer
								If lDissidio .And. ( !lFer3Per .Or. !( lFer3Per .and. cBkpPer > MesAno(dDtIni) .And. cBkpPer < MesAno(dDtFim) .and. aPd[nCount,11] == "1" ) ) .And. ( MesAno(dDtFim) == MesAno(dDtIni) .Or. MesAno(dDtFim) <> cBkpPer ) .And.; 
									(RetValSRV(aPd[nCount,01], xFilial("SRV", SRA->RA_FILIAL), "RV_COMPL_") == "N" .And. RetValSRV(aPd[nCount,01], xFilial("SRV", SRA->RA_FILIAL), "RV_INSS") != "S" .And. RetValSRV(aPd[nCount,01], xFilial("SRV", SRA->RA_FILIAL), "RV_FGTS") != "S")
									Loop
								EndIf
								
								If lFer3Per
									nPos := Ascan(aDif_Fer,{ |X| X[1] == aPd[nCount,01] .and. X[6] == aPd[nCount,11] } )
								Else
									nPos := Ascan(aDif_Fer,{ |X| X[1] == aPd[nCount,01] } )
								EndIf
								
								If nPos > 0
									aDif_Fer[nPos,3] += Round(aPd[nCount, 05], 2)
									aDif_Fer[nPos,4] += aPd[nCount, 04]
								Else
									If (nPosAux := Ascan(aPdMSeg,{ |X| X[1] = aPd[nCount,01] } )) > 0
										nPos := Ascan(aDif_Fer,{ |X| X[1] = aPdMSeg[nPosAux,02] } )
									EndIf
									If nPos > 0
										aDif_Fer[nPos,3] += Round(aPd[nCount,05],2)
										aDif_Fer[nPos,4] += aPd[nCount,04]
									Else
										aAdd(aDif_Fer, { aPd[nCount,01], 0, Round(aPd[nCount,05],2), aPd[nCount,04], 0, aPd[nCount,11], SRH->RH_DTRECIB})
										nPos := Len(aDif_Fer)
									EndIf
								EndIf
								If lDissidio .and. aDif_Fer[nPos,1] $ aCodFol[75,1] + "/" + aCodFol[623,1] //Se for média de férias/abono sobre valor, verifica se houve pagamento de diferença na folha
									If aDif_Fer[nPos,1] == aCodFol[75,1]
										If (nPosAux := Ascan(aPdOldAux,{ |X| X[1] == aCodFol[838,1] .and. x[9] <> 'D' } )) > 0
											aDif_Fer[nPos,2] += aPdOldAux[nPosAux,5]
										EndIf
									Else 
										If (nPosAux := Ascan(aPdOldAux,{ |X| X[1] == aCodFol[1417,1] .and. x[9] <> 'D' } )) > 0
											aDif_Fer[nPos,2] += aPdOldAux[nPosAux,5]
										EndIf
									EndIf 
								EndIf
							Next
							nCount := 1
							While .T.
								If nCount > Len(aDif_Fer)
									Exit
								EndIf
								If lFer3Per .and. Len(aDif_Fer[nCount]) >= 6 .And. !Empty(aDif_Fer[nCount,6]) .and. ( ( MesAno(dDtFim) > cSvSetPer .and. aDif_Fer[nCount,6] > '1' ) .or. (MesAno(dDtFim) == cSvSetPer .and. aDif_Fer[nCount,06] <> '2' ) )
									aDif_Fer[nCount,5] := 0
									aDel(aDif_Fer,nCount)
									aSize(aDif_Fer,Len(aDif_Fer)-1)
									nCount--
								Else
									aDif_Fer[nCount,5] := aDif_Fer[nCount,3]-aDif_Fer[nCount,2]
								EndIf
								nCount++
							EndDo
						EndIf
						
						aAdd(aGrvFer,{SRH->(Recno()),aDif_Fer})
						
						If !Empty(aSaveMnemo)
							RestoreMnemonicos( aSaveMnemo ) //Restaura os mnemonicos originais
						EndIf
						
					EndIf
				EndIf
				
				//Ferias Mes Seguinte
				If !Empty(dDtFim)
					If MesAno(dDtFim) == cDataRef .or. ( MesAno(dDtIni) < cDataRef .and. MesAno(dDtFim) > cDataRef ) 
						fCargaTrans(@aPdFer)
						If Len(aGrvFer) > 0
							nTamAux := Len(aGrvFer[1,2])
							nCount := 0
							While .T.
								nCount++
								If nCount > nTamAux
									Exit
								EndIf
								nPos := aScan(aPdFer,{|x| x[1]==aGrvFer[1][2][nCount][1] }) //Verba que será alterada
								If  nPos > 0 .and. aPdFer[nPos][3] $ "F*A"
									nPos1 := aScan(aGrvFer[1][2],{|x| x[1]==aPdFer[nPos][2] }) //verba a excluir
									If nPos1 > 0
										aDel(aGrvFer[1][2],nPos1)
										aSize(aGrvFer[1][2],Len(aGrvFer[1][2])-1)
										If nPos1 < nCount
											nCount--
										EndIf
										nTamAux--
									EndIf
									//Se as férias iniciaram no período anterior e não houve diferença de salário nem alteração no salário mínimo
									If MesAno(dDtIni) < cPeriodo .And. (( nSalDif == 0 .OR. nSalDif == Salario ) .And. ( nSalDifMin == Val_SalMin )) .And. !lDissidio .And. !lMesAcuAts
										//Deleta a verbas de mês seguinte se estiver com mnemônico desabilitado ou se não for as verbas de médias
										//pois as diferenças já foram geradas no mês anterior
										If !P_LDIFMED
											nPos1 := aScan(aGrvFer[1][2],{|x| x[1]==aPdFer[nPos][1] }) //verba a excluir
											aDel(aGrvFer[1][2],nPos1)
											aSize(aGrvFer[1][2],Len(aGrvFer[1][2])-1)
											If nPos1 <= nCount
												nCount--
											EndIf
											nTamAux--
										Else
											aGrvFer[1][2][nCount][1] := aPdFer[nPos][2]
										EndIf
									Else
										aGrvFer[1][2][nCount][1] := aPdFer[nPos][2]
									EndIf
								ElseIf MesAno(dDtIni) < cDataRef
									//Se não possui verba de mês seguinte, verifica se a verba existe no movimento do mês, 
									//se não existir no movimento, significa que foi pago no mês anterior e não deve ser calculado novamente.
									//se a verba estiver como 'I' - informada no aPD , não será considerada a verba calculada. 
									nPos := aScan(aPd, {|x| x[1] == aGrvFer[1][2][nCount][1] .and. x[9] <> "D" .and. x[7] <> "I" .And. x[10] == aGrvFer[1][2][nCount][7]})
									If nPos == 0
										aDel(aGrvFer[1][2],nCount)
										aSize(aGrvFer[1][2],Len(aGrvFer[1][2])-1)
										nCount--
										nTamAux--
									EndIf
								EndIf
							EndDo
						EndIf
					EndIf
				EndIf
			EndIf

			SRH->(DbSkip())
			
		EndDo
	EndIf
	
	If !Empty(aGrvFer)
		fGrvDifFer(aGrvFer, (lMedMP927 .Or. lMedMP1046), lMedMP1046)
		If lDissidio
			aSort(aPd,,,{|x,y| x[1] + x[11] <= y[1] + y[11]})
		EndIf
		If cPaisLoc == "BRA"
			fBusCadBenef( @aCodBenef )
			If Len(aCodBenef) > 0
				fPensDFer(aPdCopia)
			EndIf
		EndIf
	EndIf
	
	//Efetua apuração da diferença conforme conceito da P11
	If ! Empty( aFerP11 )
		For nFer := 1 To Len(aFerP11)
			dbSelectArea("SRH")
			dbGoTo( aFerP11[nFer, 1] )
			
			nDiasMes := aFerP11[nFer,2]
			nDiasMse := aFerP11[nFer,3]
			cSeq 		:= If(nFer == 1, " ", Str(nFer-1, 1) )
			
			If P_LDIFMED .And. !lDissidio
				GPEXMED(SRH->RH_DATABAS, cToD("//"), SRH->RH_DATAINI, cToD("//"), If(P_DTMDFER == "2", SRH->RH_DATAINI, If(cTipoRot == "4", dDataDem, dDataDe)), SalHora, Val_Salmin, aCodFol, .T., .T., .F.)
				fMedFer(@nMediaOut, @nMediaHrs, @nMedia13s, @nAntec13o, .F.)
				nMediaOut := ROUND( (nMediaOut / If(SRH->RH_DFERIAS >= 30, SRH->RH_Dferven, 30)) * SRH->RH_DFERIAS,2)
				nMediaHrs := ROUND( (nMediaHrs / If(SRH->RH_DFERIAS >= 30, SRH->RH_Dferven, 30)) * SRH->RH_DFERIAS,2)
			EndIf
			
			If AnoMes(SRH->RH_DATAINI) == cDataRef
				Dif_fer( SalMes/SRH->RH_SALMES, 2, Val_Salmin, SRH->RH_SALMIN, aCodfol, cSeq, Nil, Nil, nMediaOut)
			ElseIf AnoMes(SRH->RH_DATAFIM + IIf(SRH->RH_ABOPEC <> '1',SRH->RH_DABONPE,0)) == cDataRef
				If SRH->RH_SALDIF > 0
					Dif_fer( SalMes/SRH->RH_SALDIF, 1, Val_Salmin, SRH->RH_SALMIND, aCodfol, cSeq, Nil, Nil, nMediaOut)
				Else
					Dif_fer( SalMes/SRH->RH_SALMES, 1, Val_Salmin, SRH->RH_SALMIN, aCodfol, cSeq, Nil, Nil, nMediaOut)
				EndIf 
			EndIf
		Next nFer
	EndIf
	
	RestArea(aAreaSRF)
	RestArea(aArea)
	
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³fLicRemFe	   ºAutor  ³Leandro Drumond  º Data ³ 06/11/2013  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³Verifica existencia de licenca remunerada nas ferias para     º±±
±±º        ³geracao de verba                                              º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³ Roteiro de Calculo - Folha                                   º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fLicRemFe(nValor)
	
	Local aArea			:= GetArea()
	Local cDataRef		:= AnoMes(dDataDe)
	Local nDiasFerAnt	:= 0
	
	nDiasLRem		:= 0 //Zera mnemonico
	
	DbSelectArea("SRH")
	
	If DbSeek(SRA->RA_FILIAL + SRA->RA_MAT) 
		While !Eof() .And. SRA->RA_FILIAL+SRA->RA_MAT == SRH->RH_FILIAL+SRH->RH_MAT
			If AnoMes(SRH->RH_DATAINI) == cDataRef // No mesmo mês das férias
				nValor 		+= SRH->RH_DIALREM * SalDia
				nDiasLRem 	+= SRH->RH_DIALREM
			Else
				nDiasFerAnt := Posicione("SRR", 1, SRA->RA_FILIAL + SRA->RA_MAT + "F" + dToS(SRH->RH_DATAINI) + aCodFol[0073][1] , "RR_HORAS") // Busca pela verba de Férias mês seguinte
				
				If AnoMes(MonthSum(SRH->RH_DATAINI, 1)) == cDataRef // Mês seguinte
					nDiasLRem += Min( nDiasC - nDiasFerAnt, SRH->RH_DIALRE1 )
					nValor += Min( nDiasC - nDiasFerAnt, SRH->RH_DIALRE1 ) * SalDia
				ElseIf SRH->RH_DIALRE1 - (Last_Day(MonthSum(SRH->RH_DATAINI, 1))  - nDiasFerAnt) > 0  // Terceiro mês 
					nDiasLRem += SRH->RH_DIALRE1 - (Last_Day(MonthSum(SRH->RH_DATAINI, 1))  - nDiasFerAnt)
					nValor += (SRH->RH_DIALRE1 - (Last_Day(MonthSum(SRH->RH_DATAINI, 1))  - nDiasFerAnt)) * SalDia
				EndIf
				
			EndIf
			SRH->(DbSkip())
		EndDo
	EndIf
	
	// Tratativa para apurar a licença remunerada de horistas com jornada baseada no ponto
	// De acordo com a consultoria tributária, pelo pagamento ser em folha, deverá considerar o salário da folha e não o salário das férias.
	If P_LDSRHRSP
		If nDiasLRem > 0 .And. SRA->RA_CATFUNC == "H"
			// Reapura as horas integrais conforme a escala do ponto.
			// O parametro .T. traz as variávels nPonTrab e nPonDesc com a quantidade total de horas.
			fHTrabCalen( Max(SRA->RA_ADMISSA,dDataDe ), dDataAte, .T.)
			//Verifica a configuração da verba.
			// 2 - Salário Incorporado
			// 1 - Salário Base.
			If PosSrv(aCodFol[103,1],xFilial("SRV"),"RV_BASCAL") == "2"
				nValor := SalHora * (nPonTrab + nPonDesc)
				nValor := (nValor / nDiasC) * nDiasLRem
			Else
				nValor := SalHor * (nPonTrab + nPonDesc)
				nValor := (nValor / nDiasC) * nDiasLRem
			EndIf
		EndIf
	EndIf

	RestArea(aArea)

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³fGrvDifFer     ºAutor  ³Leandro Drumond  º Data ³ 07/11/2013  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³Gera diferenca de ferias no aPd.                              º±±
±±º        ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³ Roteiro de Calculo - Folha                                   º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fGrvDifFer( aDif_Fer, lDifMP927, lMedMP1046 )

	Local aArea			:= GetArea()
	Local aFerAux		:= {}
	Local aGrvDif		:= {}
	Local cPdAux		:= ""
	Local cPdDif		:= ""
	Local cSeq			:= " "
	Local cSeqAux		:= ""
	Local cLastSeq		:= ""
	Local cTxtMP		:= "MP927"
	Local cDifVer		:= ""
	Local nRecSRH		:= 0
	Local nPD			:= 0
	Local nPos			:= 0
	Local nPosFer		:= 0
	Local nPosSeq		:= 0
	Local nX			:= 0
	Local nY			:= 0
	Local nDifAnt		:= 0
	Local cTipo2		:= ""
	Local nPercUT 		:= 0
	Local nValRHH 		:= 0
	Local nVlAuxA		:= 0
	Local nVlAuxF		:= 0
	Local nVlTotFer		:= 0

	Default lDifMP927	:= .F.
	Default lDifMP1046	:= .F.
	
	If lDifMP1046
		cTxtMP		:= "MP1046"
	EndIf
	
	If lDissidio
		For nPD := 1 To Len(aPd)
			cDifVer := aScan(ApdOld, { |X| X[1] = aPd[nPD,1] .And. X[7] == "K" })
			If aPd[nPD,7] == "I" .And. aScan( aDissInf, { |x| x[6] == aPd[nPD,1] .And. !Empty(x[9]) .And. x[9] == aPd[nPD,10] .And. x[7] == aPd[nPD,5] } ) > 0 .And. cDifVer > 0
				aDel( aPd, nPD )
				aSize( aPd, Len(aPd) - 1 )
				nPD--
			EndIf
			If nPD == Len(aPd)
				Exit
			EndIf
		Next nPD
	EndIf
	
	For nX := 1 to Len(aDif_Fer)
		nRecSRH := aDif_Fer[nX,1]
		aFerAux := aDif_Fer[nX,2]
		aGrvDif	:= {}
		cTipo2  := ""
		DbSelectArea("SRH")
		DbGoTo(nRecSRH)

		If lDissidio
			If ( nPosFer := aScan( aFerAux, {|x| x[1] == aCodFol[72,1] } ) ) > 0 
				aEval( aPdOld, { |X| If ( x[1] == aCodFol[72,1] .And. X[9] != "D", nVlTotFer += x[5], Nil ) } ) //Soma o valor total da verba de Id 072 pois pode haver rateio
				If ( nPosSeq := aScan( aPdOld, {|x| x[1] == aCodFol[72,1] .And. nVlTotFer == aFerAux[nPosFer, 2] } ) ) > 0
					cSeq := aPdOld[nPosSeq, 11]
					cTipo2 := aPdOld[nPosSeq, 7]
				Else
					If Empty(cLastSeq)
						cSeq 	 := Str( Len(aDif_Fer)+1, 1)
						cLastSeq := cSeq
					Else
						cSeq 	 := Str( Val(cLastSeq)+1, 1 )
						cLastSeq := cSeq			
					EndIf
				EndIf
			EndIf
		Else
			cSeq := If(nX == 1, " ", Str(nX-1, 1) )
		EndIf
		
		For nY := 1 to Len(aFerAux)
			If !lDissidio .And. aFerAux[nY,5] >= 0
				If lDifMP927
					If !(RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") $ "0075/0076/0082/0083/0343/0344/0345/0346/0622/0623/0633/0634/0636/0637/0639/0640/1405/1406/1407/1408/1409/1410")//Medias de ferias e abono|Adc. sobre média de férias e abono
						Loop
					Else
						If RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "0076"
							cPdAux	:= aCodFol[75, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "0083"
							cPdAux	:= aCodFol[82, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "0344"
							cPdAux	:= aCodFol[343, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "0346"
							cPdAux	:= aCodFol[345, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "0633"
							cPdAux	:= aCodFol[622, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "0634"
							cPdAux	:= aCodFol[623, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "0637"
							cPdAux	:= aCodFol[636, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "1405"
							cPdAux	:= aCodFol[639, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "1406"
							cPdAux	:= aCodFol[640, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "1409"
							cPdAux	:= aCodFol[1407, 1]
						ElseIf RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") == "1410"
							cPdAux	:= aCodFol[1408, 1]
						Else
							cPdAux	:= aFerAux[nY,1]
						EndIf
					EndIf
				Else
					cPdAux	:= aFerAux[nY,1]
				EndIf
				cPdDif := RetValSrv(cPdAux, xFilial("SRR"), "RV_FERSEG")
				If !Empty(cPdDif)
					If lDifMP927 .And. RetValSrv(aFerAux[nY,1], xFilial("SRR"), "RV_CODFOL") $ "0075/0076/0082/0083/0343/0344/0345/0346/0622/0623/0633/0634/0636/0637/0639/0640/1405/1406/1407/1408/1409/1410"//Medias de ferias e abono|Adc. sobre média de férias e abono
						nValRHH := 0
						fPesqRHH( aFerAux[nY,1], @nValRHH )
						If nValRHH > 0
							aFerAux[nY, 2] 	:= nValRHH
							aFerAux[nY, 5]	:= aFerAux[nY, 3] - aFerAux[nY, 2]
							If aFerAux[nY, 5] <= 0
								Loop
							EndIf
						EndIf
					EndIf
					If( nPos := Ascan(aGrvDif,{ |X| X[1] == cPdDif .And. Iif( lDifMP927, x[6] == cTxtMP + "-" + dToS(SRH->RH_DATABAS) + "-" + dToS(SRH->RH_DBASEAT), .T. ) } ) ) > 0
						aGrvDif[nPos,2] += aFerAux[nY,5]
						If lDifMP927
							aGrvDif[nPos,3] += aFerAux[nY,4]
							aGrvDif[nPos,4] += aFerAux[nY,2]
						EndIf
					Else
						aAdd(aGrvDif, { cPdDif, aFerAux[nY,5], aFerAux[nY,4], aFerAux[nY,2], Nil, Iif( lDifMP927, cTxtMP + "-" + dToS(SRH->RH_DATABAS) + "-" + dToS(SRH->RH_DBASEAT), "" ), aFerAux[nY,1] })
					EndIf
				EndIf
			ElseIf lDissidio
				aAdd(aGrvDif, { aFerAux[nY,1], aFerAux[nY,3], aFerAux[nY,4], aFerAux[nY,2], aFerAux[nY,7], "", "" } )
			EndIf
		Next nY

		If lDifMP927//Somente apuração da diferença de médias devido MP 927/2020 | MP 1046/2021
			For nY := 1 to Len(aGrvDif)
				If RetValSrv(aGrvDif[nY,7], xFilial("SRR"), "RV_CODFOL") $ "0075/0076/0082/0083/0343/0344/0345/0346/0636/0637/0639/0640/1405/1406/"
					nVlAuxF += aGrvDif[nY, 2]
				Else
					nVlAuxA += aGrvDif[nY, 2]
				EndIf
			Next nY
			If nVlAuxF > 0
				cPdDif 	:= RetValSrv(aCodFol[77, 1], xFilial("SRR"), "RV_FERSEG")
				nPercUT := RetValSrv(aCodFol[77, 1], xFilial("SRR"), "RV_PERC")
				If nPercUT == 0 .Or. nPercUT == 100
					nPercUT := 1/3
				Else
					nPercUT := nPercUT / 100
				EndIf
				If !Empty(cPdDif)
					aAdd(aGrvDif, {cPdDif, nVlAuxF * nPercUT, 0, 0, "", cTxtMP + "-" + dToS(SRH->RH_DATABAS) + "-" + dToS(SRH->RH_DBASEAT), "" })
				Endif
			EndIf
			If nVlAuxA > 0
				cPdDif  := RetValSrv(aCodFol[79, 1], xFilial("SRR"), "RV_FERSEG")
				nPercUT := RetValSrv(aCodFol[79, 1], xFilial("SRR"), "RV_PERC")
				If nPercUT == 0 .Or. nPercUT == 100
					nPercUT := 1/3
				Else
					nPercUT := nPercUT / 100
				EndIf
				If !Empty(cPdDif)
					aAdd(aGrvDif, {cPdDif, nVlAuxA * nPercUT, 0, 0, "", cTxtMP + "-" + dToS(SRH->RH_DATABAS) + "-" + dToS(SRH->RH_DBASEAT), "" })
				Endif
			EndIf
		EndIf
		
		If !Empty(aGrvDif)
			For nY := 1 to Len(aGrvDif)
				If ( nPosSeq := aScan( aPdOld, {|x| x[1] == aGrvDif[nY,1] .And. x[5] == aGrvDif[nY,4] } ) ) > 0
					
					cTipo2  := aPdOld[nPosSeq, 7]
					
					// Ordena por verba + sequência decrescente
					aSort(aPd,,,{|x,y| x[1] + x[11] >= y[1] + y[11]})
					
					// Procura pela maior sequência da verba 
					If ( nPosApdSeq := aScan(aPd, {|x| x[1] == aGrvDif[nY, 1]})) > 0
						cSeqAux := Soma1(aPd[nPosApdSeq, 11])
					Else
						cSeqAux := aPdOld[nPosSeq, 11]
					EndIf
					
				Else
					cSeqAux := cSeq
					cTipo2  := ""
				EndIf
				
				nDifAnt := 0
				If ( lDissidio .And. ( nPosFer := Ascan(aPd,{ |X| X[1]+X[3]+X[11]+x[7] == aGrvDif[nY,1] + cSemana + cSeqAux + cTipo2 } ) ) > 0 ) .Or.;
					( lDissidio .And. ( nPosFer := Ascan(aPd,{ |X| X[1]+X[3]+x[7] == aGrvDif[nY,1] + cSemana + "I" .and. x[9] <> "D"  } ) ) > 0 ) .Or.;
					( !lDissidio .And. ( nPosFer := Ascan(aPd,{ |X| X[1]+X[3]+X[11] == aGrvDif[nY,1] + cSemana + cSeqAux } ) ) > 0 )
					While .T.
						If aPd[nPosFer,7] == "F" //Se verba existe no aPd e veio do fechamento, é porque já foi paga diferença no mês anterior, deverá subtrair a diferença já paga da diferença apurada
							nDifAnt += aPd[nPosFer,5]
						ElseIf lDissidio .and. aPd[nPosFer,7] == "I" .and. ( aScan(aDissInf, {|x| x[6] == aPd[nPosFer,1]}) ) > 0
							nDifAnt += aPd[nPosFer,5] //Verba já existe no aPd pq foi informada no dissídio, não calcular nova diferença.
						EndIf
						cSeqAux := Soma1(cSeqAux)
						If ( nPosFer := Ascan(aPd,{ |X| X[1]+X[3]+X[11] == aGrvDif[nY,1] + cSemana + cSeqAux } ) ) == 0
							Exit
						EndIf			
					EndDo
					If cSeqAux > "9"
						cSeqAux := "9"
					EndIf
				EndIf
				
				fGeraVerba(aGrvDif[nY,1], aGrvDif[nY,2]-nDifAnt, aGrvDif[nY,3], Nil, Nil, Nil, Iif( lDissidio, cTipo2, Nil ), Nil, Nil, Iif( lDissidio, aGrvDif[nY,5], Nil), .T., aGrvDif[nY,4], Nil, cSeqAux, aGrvDif[nY, 6] )
			Next nY
		EndIf
		
	Next nX
	
	RestArea(aArea)
	
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³fCalCompl      ºAutor  ³Leandro Drumond  º Data ³ 11/02/2014  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³Calcula Folha Complementar.			                          º±±
±±º        ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³Roteiros de Calculo			                                  º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fCalCompl()
	Local aArea		:= GetArea()
	Local aPdNew	:= aPd
	Local cAliasQry	:= GetNextAlias()
	Local cQuery	:= ""
	Local cPdAux	:= ""
	Local cCcAux	:= ""
	Local cPdArred	:= If(cTipoRot == "1", fGetCodFol("0043"),fGetCodFol("0026")) //Verba de arredondamento
	Local cPdLiq	:= If(cTipoRot == "1", fGetCodFol("0047"),fGetCodFol("0021")) //Verba de Liquido
	Local cPdInsu	:= If(cTipoRot == "1", fGetCodFol("0045"),fGetCodFol("0030")) //Verba de insuficiecia de Saldo
	Local cPdIR		:= If(cTipoRot == "1", fGetCodFol("0066"),fGetCodFol("0067")) //Verba de IR
	Local cPdFgts	:= fGetCodFol("0017") + "*" + fGetCodFol("0018") //Base FGTS * Deposito FGTS
	Local cPdIRComp := fGetCodFol("0659")
	Local lTemSaldo := .F.
	Local lDifIR	:= .F.
	Local nLen		:= 0
	Local nValDifIR	:= 0
	Local nValCompIR:= 0
	Local nX		:= 0
	Local nPos		:= 0
	Local nValAux	:= 0
	Local nInssAnt  := 0
	Local nIrAnt    := 0
	Local nBsInssAt := 0
	Local nBsInssAc := 0
	Local nBsIRAnt  := 0


	If !( Type("lUtiMultiV")<> "U" .And. lUtiMultiV )
		//--Carrega tudo que foi calculado anteriormente para calcular as diferencas
		cQuery := " SELECT * FROM " + RetSqlName("SRC")
		cQuery += " WHERE RC_FILIAL = '" + SRA->RA_FILIAL + "' AND"
		cQuery += " RC_MAT = '" + SRA->RA_MAT + "' AND"
		cQuery += " RC_PROCES = '" + cProcesso + "' AND"
		cQuery += " RC_PERIODO = '" + cPeriodo + "' AND"
		cQuery += " RC_ROTEIR = '" + cRot + "' AND"
		cQuery += " RC_SEMANA < '" + cSemana + "' AND"
		cQuery += " D_E_L_E_T_ = ' ' "

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)

		aPd := {}

		While (cAliasQry)->( !Eof() )
			If (cAliasQry)->RC_PD == cPdIRComp //Soma verbas de compensacao de IR
				nValCompIR += (cAliasQry)->RC_VALOR
			ElseIf ( nPos := Ascan(aPd,{ |X| X[1]+X[2]+x[11] == (cAliasQry)->(RC_PD + RC_CC + RC_SEQ) } ) ) > 0
				//--Se a verba for provento ou desconto e ja existir no aPd, soma os valores.
				If (PosSrv(cPdAux,SRA->RA_FILIAL,"RV_TIPOCOD") $ "1*2") .or. (cAliasQry)->(RC_PD) $ cPdFgts
					aPd[nPos,5] += (cAliasQry)->(RC_VALOR)
				EndIf
			Else
				(cAliasQry)->( FMatriz(RC_PD,RC_VALOR,RC_HORAS,RC_SEMANA,RC_CC,RC_TIPO1,RC_TIPO2,," ",RC_DATA,,RC_SEQ,RC_QTDSEM,RC_ITEM,RC_CLVL ) )
			EndIf

			(cAliasQry)->( DbSkip() )
		EndDo

		nLen := Len(aPdNew) 

		For nX := 1 to nLen
			cPdAux := aPdNew[nX,1]
			cCcAux := aPdNew[nX,2]

			If cPdArred <> cPdAux .and. cPdLiq <> cPdAux
				//--Calcula diferenca apenas de proventos e descontos
				If ( nPos := Ascan(aPd,{ |X| X[1]+X[2]+X[7] == cPdAux + cCcAux + aPdNew[nX,7] .and. x[5] > 0 } ) ) > 0
					If cPdAux == cPdIR .and. !Empty(cPdIRComp) .and. aPdNew[nX,5] < aPd[nPos,5]
						lDifIR	  := .T.
						lTemSaldo := .T.
						nValDifIR := ( aPdNew[nX,5] - aPd[nPos,5] ) * -1
					EndIf
					If cPdAUx == cPdIR //Se for verba de IR soma a compensacao feita nos calculos anteriores, se existir.
						nValAux := aPdNew[nX,5]
						aPdNew[nX,5] := Max( ( aPdNew[nX,5] + nValCompIR ) - aPd[nPos,5], 0 )
						aPd[nPos,5] -= nValAux
					Else
						nValAux := aPdNew[nX,5]
						aPdNew[nX,5] := Max(aPdNew[nX,5] - aPd[nPos,5], 0 )
						aPd[nPos,5] -= nValAux
					EndIf
					If aPdNew[nX,5] > 0
						lTemSaldo := .T.
					EndIf
					//Caso o valor da verba seja 0, coloca como deletada no aPdNew.
					If aPdNew[nX,5] == 0
						aPdNew[nX,9] := "D"
					EndIf
				//Se o nPos for igual a 0, então a verba não existe na semana anterior.
				//Contudo pode haver casos de verbas com códigos diferentes lançados na semana seguinte.
				ElseIf aPdNew[nX,5] > 0 .and. aPdNew[nX,9] <> "D"
					lTemSaldo := .T.
				EndIf
			EndIf

			//--Deleta a verba de arredondamento pois ela sera gerada novamente pela funcao fLiquido() baseada nas diferencas calculadas.
			If cPdAux == cPdLiq .or. cPdAux == cPdArred
				aPdNew[nX,9] := "D"
			EndIf

		Next nX

		If lTemSaldo //Se existir verba de provento ou desconto maior que zero, efetua a gravacao, do contrario nao existem diferencas, portanto zera o array para nao gravar nada.
			aPd := aClone(aPdNew)

			If lDifIR //--Se o valor de IR a pagar for menor do que o que ja foi pago, gera verba de compensacao de IR com a diferenca.
				FMatriz(cPdIRComp,nValDifIR-nValCompIR,0,cSemana,SRA->RA_CC,"V",,," ",DDATA_PGTO,,,,SRA->RA_ITEM,SRA->RA_CLVL )
			EndIf

			fLiquido(aCodFol,cPdLiq,If(cTipoRot=="1",nValArred,nValArr13),cPdArred,.T.,cPdInsu,.T.) //Recalcula o liquido
		Else
			aPd := {}
		EndIf
	Else
		cQuery := " SELECT * FROM " + RetSqlName("SRC")
		cQuery += " WHERE "
		cQuery += " ( "
		For nX := 1 To Len(aCPFAll)
			cQuery += " ( RC_FILIAL = '" + aCPFAll[nX,2] + "' AND"
			cQuery += " RC_MAT = '" + aCPFAll[nX,3] + "' )"

			If nX <> Len(aCPFAll)
				cQuery += " OR "
			EndIf
		Next nX
		cQuery += " ) AND"
		cQuery += " RC_PROCES = '" + cProcesso + "' AND"
		cQuery += " RC_PERIODO = '" + cPeriodo + "' AND"
		cQuery += " RC_ROTEIR = '" + cRot + "' AND"
		cQuery += " RC_SEMANA < '" + cSemana + "' AND"
		cQuery += " RC_PD IN('" + aCodFol[0064,1] + "','" + aCodFol[0065,1] + "','" + aCodFol[0232,1] + "','" + aCodFol[0066,1] + "','" + aCodFol[0067,1] +;
		"','" + cPdIRComp + "','" + aCodFol[0222,1] + "','" + aCodFol[0013,1] + "','" + aCodFol[0014,1] + "','" + aCodFol[0015,1] +;
		"','" + aCodFol[0016,1] + "','" + aCodFol[0010,1] + "') AND" //Verbas de INSS e IR
		cQuery += " D_E_L_E_T_ = ' ' "

		cQuery := ChangeQuery(cQuery)

		DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasQry)

		While (cAliasQry)->( !Eof() )
			If (cAliasQry)->RC_PD == cPdIRComp //Soma verbas de compensacao de IR
				nValCompIR += (cAliasQry)->RC_VALOR
			ElseIf (cAliasQry)->RC_PD $ aCodFol[0066,1] + "*" + aCodFol[0067,1] //IR
				nIRAnt += (cAliasQry)->RC_VALOR
			ElseIf (cAliasQry)->RC_PD $ aCodFol[0064,1] + "*" + aCodFol[0065,1] + "*" + aCodFol[0222,1] + "*" + aCodFol[0232,1] //INSS
				nInssAnt += (cAliasQry)->(RC_VALOR)
			ElseIf (cAliasQry)->RC_PD == aCodFol[0013,1]
				nBsInssAt += (cAliasQry)->(RC_VALOR)
			ElseIf (cAliasQry)->RC_PD == aCodFol[0014,1]
				nBsInssAc += (cAliasQry)->(RC_VALOR)
			ElseIf (cAliasQry)->RC_PD $ aCodFol[0010,1] + "*" + aCodFol[0015,1] + "*" + aCodFol[0016,1]
				nBsIRAnt += (cAliasQry)->(RC_VALOR)
			EndIf
			(cAliasQry)->( DbSkip() )
		EndDo

		nLen := Len(aPdNew)

		For nX := 1 to nLen
			cPdAux := aPdNew[nX,1]
			cCcAux := aPdNew[nX,2]

			If cPdAux $ aCodFol[0064,1] + "*" + aCodFol[0222,1] + "*" + aCodFol[0167,1] //INSS
				nValAux := aPdNew[nX,5]
				aPdNew[nX,5] := Max(aPdNew[nX,5] - nInssAnt, 0 )
			EndIf
			If aPdNew[nX,5] > 0
				lTemSaldo := .T.
			EndIf

			//--Deleta a verba de arredondamento pois ela sera gerada novamente pela funcao fLiquido() baseada nas diferencas calculadas.
			If cPdAux $ cPdArred + "*" + cPdLiq + "*" + cPdIRComp
				aPdNew[nX,9] := "D"
			EndIf
		Next nX

		fCIr(aCodfol,aTabir)

		aPdNew := aPd
		nLen   := Len(aPdNew)

		For nX := 1 to nLen
			cPdAux := aPdNew[nX,1]
			cCcAux := aPdNew[nX,2]

			If cPdAux == cPdIR .And. !Empty(cPdIRComp) .And. aPdNew[nX,5] < nIRAnt
				lDifIR	  := .T.
				lTemSaldo := .T.
				nValDifIR := ( aPdNew[nX,5] - nIRAnt ) * -1
			EndIf		
			If cPdAux $ aCodFol[0066,1] + "*" + aCodFol[0067,1] //Se for verba de IR soma a compensacao feita nos calculos anteriores, se existir.
				nValAux := aPdNew[nX,5]
				aPdNew[nX,5] := Max( ( aPdNew[nX,5] + nValCompIR ) - nIRAnt, 0 )
			EndIf
			If cPdAux == aCodFol[0013,1] //Base INSS Até Lim.
				nValAux := aPdNew[nX,5]
				aPdNew[nX,5] := Max(aPdNew[nX,5] - nBsInssAt, 0 )
			EndIf
			If cPdAux == aCodFol[0014,1] //Base INSS Acima Lim.
				nValAux := aPdNew[nX,5]
				aPdNew[nX,5] := Max(aPdNew[nX,5] - nBsInssAc, 0 )
			EndIf
			If cPdAux == aCodFol[0015,1] //Base IR
				nValAux := aPdNew[nX,5]
				aPdNew[nX,5] := Max(aPdNew[nX,5] - nBsIRAnt, 0 )
			EndIf
		Next nX

		If lTemSaldo //Se existir verba de provento ou desconto maior que zero, efetua a gravacao, do contrario nao existem diferencas, portanto zera o array para nao gravar nada.
			aPd := aClone(aPdNew)

			If lDifIR //--Se o valor de IR a pagar for menor do que o que ja foi pago, gera verba de compensacao de IR com a diferenca.
				FMatriz(cPdIRComp,nValDifIR-nValCompIR,0,cSemana,SRA->RA_CC,"V",,," ",DDATA_PGTO,,,,SRA->RA_ITEM,SRA->RA_CLVL )
			EndIf
		Else
			aPd := {}
		EndIf
	EndIf

	dbSelectArea(cAliasQry)
	dbCloseArea()

	RestArea(aArea)

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³fVerCompl      ºAutor  ³Leandro Drumond  º Data ³ 12/02/2014  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³Verifica se a folha normal esta aberta.                       º±±
±±º        ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³Roteiros de Calculo			                                  º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fVerCompl()
	Local aArea		:= GetArea()
	Local lRet		:= .T.

	DbSelectArea("RCH")
	DbSetOrder(1)

	If DbSeek(xFilial("RCH")+SRA->RA_PROCES+cPeriodo+"01"+cRot)
		If !Empty(RCH_DTFECH)
			lRet := .F.
			CMSGLOG := STR0041 //"Período anterior esta fechado, não poderá ser feito o cálculo complementar."
		EndIf
	Else
		lRet := .F.
		CMSGLOG := STR0042//"Nao existe periodo anterior cadastrado, calculo complementar não poderá ser realizado."
	EndIf

	If !lRet
		S_MSGLOG()
	EndIf

	RestArea(aArea)

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³fVldCompl      ºAutor  ³Leandro Drumond  º Data ³ 14/02/2014  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³Valida se deve calcular complementar para funcionario.        º±±
±±º        ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³Roteiros de Calculo			                                  º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fVldCompl()
	Local aArea 	:= GetArea()
	Local lRet		:= .T.

	DbSelectArea("SRC")
	DbSetOrder(RetOrder("SRC","RC_FILIAL+RC_MAT+RC_PROCES+RC_ROTEIR+RC_PERIODO+RC_SEMANA"))

	If !DbSeek(SRA->RA_FILIAL + SRA->RA_MAT + cProcesso + cRot + cPeriodo )
		lRet := .F.
		CMSGLOG := STR0029 + " " +  AllTrim(SRA->RA_FILIAL) + " " + STR0030 + " " + SRA->RA_MAT + " " +  STR0043 //"Filial " ### "Matricula" ### "não possui folha calculada. Complementar não será calculada."
		S_MSGLOG()
	EndIf

	RestArea(aArea)

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³ fTpAusSalF    º Autor ³ Raquel Hager    º Data ³ 12/05/2014  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³ Verifica conteudo do campo RCM_SALFAM e retorna na           º±±
±±º        ³ formula S_CALSALFA.                                          º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³ Formula S_CALSALFA  		                                  º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTpAusSalF(dDtIniPer,dDtFimPer)
	Local aArea		:= GetArea()  
	Local cCdAfast	:= ""        
	Local cPgSalFam	:= ""
	Local dDtIni	:= 	CtoD("//")
	Local dDtFim	:=	CtoD("//")    
	Local lPgSalFam := .F.    
	Local nCnt		:= 0

	DEFAULT	dDtIniPer := CtoD("//")
	DEFAULT dDtFimPer := CtoD("//")   

	fRetAfas(dDtIniPer,dDtFimPer,,,,,@aAfast,,.F.,,,,,,.F.)

	If Len(aAfast) > 0   

		For nCnt := 1 to Len(aAfast)
			dDtIni := aAfast[nCnt][3]
			dDtFim := aAfast[nCnt][4]

			cCdAfast := aAfast[nCnt,13]
			dbSelectArea("RCM")
			dbSetOrder(1)	// RCM_FILIAL+RCM_TIPO
			If dbSeek(xFilial("RCM",SRA->RA_FILIAL)+cCdAfast)
				If RCM->RCM_TIPOAF $ "3*4"
					lPgSalFam := .T.
				Else
					cPgSalFam	:= RCM->RCM_SALFAM  				   
					// Conteudo do campo RCM_SALFAM(Pg. Sal. Fam.)
					// 1- Pagamento no inicio do afastamento
					// 2- Pagamento no retorno do afastamento    
					// 3- Paga (sempre)
					// 4- Nao paga   
					If cPgSalFam $ "1*2*3" 
						Do Case 
							Case cPgSalFam == "1"  
								dDtFim := If(Empty(dDtFim), dDtFimPer, dDtFim) 
								If dDtFim >= dDtIniPer .and. dDtIni <= dDtFimPer
									//Se o afastamento iniciou-se no mês de cálculo ou terminou no mês de cálculo sem ultrapassar os dias pagos pela empresa, paga salário familia
									If dDtIniPer <= dDtIni .or. aAfast[nCnt,19] + aAfast[nCnt,2] <= aAfast[nCnt,20]
										lPgSalFam	:= .T.
									EndIf
								EndIf
							Case cPgSalFam == "2"   
								If dDtIniPer <= dDtFim .And. dDtFim < dDtFimPer
									lPgSalFam	:= .T.
								EndIf
							Case cPgSalFam == "3"  
								lPgSalFam	:= .T.
						End Case
					EndIf 		
				EndIf  
			EndIf  

			// Basta existir 1 Afastamento que receba o beneficio
			// para executar o calculo do Salario Familia
			If lPgSalFam  
				Exit
			EndIf

		Next nX

	Else  
		lPgSalFam	:= .T.	
	EndIf

	RestArea(aArea)

Return( lPgSalFam )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fPensDFer ³ Autor ³ Emerson Rosa          ³ Data ³20/03/03  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calculo pensao sobre diferenca de ferias                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fPensDFer(@aPd,aPdCopia)									  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fPensDFer(aPdCopia)
	
	Local nB_InssF, nV_InssF
	Local aPdPensao := AClone(aPd)
	
	//Se gerou verbas de diferenca de ferias, calcula a pensao.
	If Len(aPdPensao) > 0
		//Calcula o INSS para deducao na base da Pensao.
		If !(cInssFM $ "S/R") //Recalcula apenas se MV_DINSSFM for diferente de S e R
		nB_InssF := nV_InssF := 0.00
		Aeval( aPdPensao ,{ |X| SomaInc(X,35,@nB_InssF, , , , , , ,aCodFol) })
		Calc_Inss(aTInss,nB_InssF,@nV_InssF,,,,,,)
		FMatriz(aCodfol[65,1],nV_InssF,,,,,,,,,.T.)
		EndIf
		
		//Calcula a Pensao sobre as verbas de diferenca de ferias
		FCalcPensao(, aCodFol[0101, 1], aCodFol[170,1],0,dData_Pgto,"DFE")
	EndIf
	
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Dif_fer   ³ Autor ³ Equipe Rh             ³ Data ³10/01/96  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calculo da Diferenca de Ferias                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Dif_Fer(Indice,Calculo,nVal_salMin,nSalMinPg,aCodFol)      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Dif_fer(Indice,Calculo,nVal_salMin,nSalMinPg,aCodFol,cSeq,nSalMesf,cDifAbo,nMediaOut)

	Local lReajust := (Indice - 1) * 100 > 0
	Local nDifMed  := 0.00
	Local nOutadic := 0.00
	Local nOutadiAb:= 0.00
	Local nOutMed  := 0.00
	Local nOutVal  := 0.00
	Local nOutValAb:= 0.00
	Local nValTerc := 0.00
	Local nValTercV:= 0.00
	Local nAboPecu := 0.00
	Local nTercAbo := 0.00
	Local nVlDifSM := 0.00
	Local dDtBusFer
	Local cCodMedFer	:= aCodFol[75,1] +'*'+aCodFol[76,1]+'*'+;  //Media de ferias
	aCodFol[343,1]+'*'+	aCodFol[344,1]+'*'+; //Media de ferias Comissionados
	aCodFol[345,1]+'*'+aCodFol[346,1]        //Media de ferias Tarefeiros
	Local CADTFER 	:= " "
	Local CBSADTFER := " "
	Local CTPATS 	:= " "
	Local nMedAb	:= 0.00
	Local nValAb	:= 0.00
	Local cCodMedAb :=	aCodFol[622,1]+'*'+aCodFol[623,1]+'*'+aCodFol[633,1]+'*'+aCodFol[634,1] //medias de abono

	Default nMediaOut	:= 0
	Default nSalMesf	:= Salmes 
	Default cDifAbo		:= "S"

	lDissidio			:= If(type("lDissidio")=="U",.F.,lDissidio)

	If nVal_SalMin = Nil
		nVal_Salmin := 0.00
	EndIf

	//Se nao apurar diferenca de media de ferias e Se nao houver alteracao de salario nem de salario minimo, nao calcular diferenca.
	If !P_LDIFMED .And. ((Indice-1)* 100 <= 0 .and. (nVal_SalMin == SRH->RH_SalMin) ) .And.;
	(cPaisLoc <> "ARG" .Or. AnoMes(SRH->RH_DTRECIB)>=AnoMes(SRH->RH_DATAINI))
		Return ( Nil )
	EndIf
	dDtBusFer := SRH->RH_DATAINI

	DbSelectArea("SRV")
	DbSetOrder(1)

	dbSelectArea("SRR")
	dbSetOrder(1)

	If dbSeek( SRA->RA_FILIAL+SRA->RA_MAT+"F"+Dtos(dDtBusFer) )
		While ! Eof() .And. SRA->RA_FILIAL+SRA->RA_MAT = SRR->RR_FILIAL+SRR->RR_MAT

			If SRR->RR_DATA = dDtBusFer
				//Se houve reajuste salarial
				If lReajust
					If	SRR->RR_PD = aCodfol[75,1] .And. lDissidio
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						If Calculo # 1
							FMatriz(aCodfol[838,1],(nDifval/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
							FMatriz(aCodfol[839,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						Else
							FMatriz(aCodfol[838,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						EndIf

						If lDissidio
							nDifVal := SRR->RR_VALOR
							If Calculo # 1
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMes,nDiasMes,,,,,,,,,cSeq)
							Else
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMse,nDiasMse,,,,,,,,,cSeq)
							EndIf
						EndIf
					ElseIf SRR->RR_PD = aCodfol[65,1] .And. lDissidio
						If Calculo # 1
							FMatriz(SRR->RR_PD,SRR->RR_VALOR * nDiasMes,,,,,,,,,,cSeq)
						EndIf
					ElseIf SRR->RR_PD = aCodfol[232,1] .And. lDissidio
						If !Calculo # 1
							FMatriz(aCodfol[65,1],SRR->RR_VALOR,,,,,,,,,,cSeq)
						EndIf							
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de Ferias                                             ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD = aCodfol[72,1]
						//aAreaTemp := GetArea()					
						If SRV->(DbSeek(xFilial("SRV")+aCodFol[72,1]))
							nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
							If Calculo # 1
								FMatriz(aCodfol[88,1],(nDifval/SRH->RH_DFERIAS)* nDiasMes ,nDiasMes,,,,,,,,,cSeq)
								FMatriz(aCodfol[89,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse ,nDiasMse,,,,,,,,,cSeq)
							Else
								FMatriz(aCodfol[88,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse , nDiasMse,,,,,,,,,cSeq)
							EndIf
						EndIf
						//RestArea(aAreaTemp)					
						If lDissidio 
							nDifVal := SRR->RR_VALOR
							If Calculo # 1						
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMes,nDiasMes,,,,,,,,,cSeq)
							Else					
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMse,nDiasMse,,,,,,,,,cSeq)
							EndIf
						EndIf 
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  1/3 s/ Ferias                                     ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[77,1]
						nValTerc  += SRR->RR_VALOR
						If lDissidio 
							nDifVal := SRR->RR_VALOR
							If Calculo # 1						
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMes,nDiasMes,,,,,,,,,cSeq)
							Else					
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMse,nDiasMse,,,,,,,,,cSeq)
							EndIf
						EndIf 
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Ferias Dobradas                                   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[224,1] .and. (nDiasMes > 0 ) // calcular diferenca ferias em dobro somente no mes
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						FMatriz(aCodfol[227,1],nDifval,nDiasMes+nDiasMse,,,,,,,,,cSeq)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de 1/3  Ferias Dobradas                               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[226,1].and. (nDiasMes > 0 ) 
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						FMatriz(aCodfol[228,1],nDifval,,,,,,,,,,cSeq)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Media H.Extras                                    ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[82,1]
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						If Calculo # 1
							FMatriz(aCodfol[96,1],(nDifval/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
							FMatriz(aCodfol[97,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						Else
							FMatriz(aCodfol[96,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						EndIf

						If lDissidio
							nDifVal := SRR->RR_VALOR
							If Calculo # 1						
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMes,nDiasMes,,,,,,,,,cSeq)
							Else					
								FMatriz(SRR->RR_PD,(nDifval/SRH->RH_DFERIAS)* nDiasMse,nDiasMse,,,,,,,,,cSeq)
							EndIf
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Convencao Coletiva                                ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[159,1]
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						If Calculo # 1
							FMatriz(aCodfol[161,1],(nDifval/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
							FMatriz(aCodfol[162,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						Else
							FMatriz(aCodfol[161,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Dsr S/ Medias                                     ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[80,1]
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						If Calculo # 1
							FMatriz(aCodfol[92,1],(nDifval/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
							FMatriz(aCodfol[93,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						Else
							FMatriz(aCodfol[92,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Abono Pecuniario                                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[74,1]
						nAboPecu  := SRR->RR_VALOR
						If lDissidio 
							FMatriz(SRR->RR_PD,(nAboPecu/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  1/3 s/ Abono                                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[79,1]
						nTercAbo  := SRR->RR_VALOR
						If lDissidio 
							FMatriz(SRR->RR_PD,(nTercAbo/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Media Horas sobre abono                        ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[622,1]
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						If Calculo # 1
							FMatriz(aCodfol[1416,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,,,,,,,,,,cSeq)
							FMatriz(aCodfol[1418,1],(nDifval/SRH->RH_DABONPE)* nDAbMse,,,,,,,,,,cSeq)
						Else
							FMatriz(aCodfol[1416,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,,,,,,,,,,cSeq)
						EndIf

						If lDissidio
							nDifVal := SRR->RR_VALOR
							FMatriz(SRR->RR_PD,(nDifVal/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Media valor sobre abono                        ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD == aCodfol[623,1]
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						If Calculo # 1
							FMatriz(aCodfol[1417,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,,,,,,,,,,cSeq)
							FMatriz(aCodfol[1419,1],(nDifval/SRH->RH_DABONPE)* nDAbMse,,,,,,,,,,cSeq)
						Else
							FMatriz(aCodfol[1417,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,,,,,,,,,,cSeq)
						EndIf

						If lDissidio
							nDifVal := SRR->RR_VALOR
							FMatriz(SRR->RR_PD,(nDifVal/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Diferenca do 13§ Pago em Ferias, Caso Parametrizado          ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf GetMvRH("MV_D13FR") = "S".And. SRR->RR_PD == aCodfol[22,1]
						Dif13o := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						FMatriz(aCodFol[163,1],Dif13o,,,,,,,,,,cSeq)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de Adicional Tempo Servico                            ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf SRR->RR_PD $ aCodfol[1,1]+'*'+aCodfol[2,1]+'*'+aCodfol[3,1]+'*'+aCodfol[4,1]+'*'+aCodfol[5,1]+'*'+Iif( cPaisLoc == "BRA", aCodfol[1296,1]+'*'+aCodfol[1297,1]+'*'+aCodfol[1298,1]+'*'+aCodfol[1299,1], "")
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Funcao que Retorna o Valor do Adicional Tempo Servico        ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						nAdtServ := 0.00
						CADTFER := CTIPOATS   
						CADTFER := STRTRAN(CADTFER,"*","")
						CTPATS := POSICIONE("RCE",1,XFILIAL("RCE",SRA->RA_FILIAL)+SRA->RA_SINDICA,"RCE_TPCATS")
						IF ( CTPATS  == "3" )
							CBSADTFER := " "
						EndIF
						fCalAdt(aCodfol,@nAdtServ,,SalMes,,,SRR->RR_PD,CADTFER,CTPATS,CBSADTFER)
						nAdtServ := NoRound(nAdtServ / 30 * SRH->RH_DFERIAS,2)
						nDifval  := nAdtServ - SRR->RR_VALOR
						If nDifval > 0
							nOutAdic += nDifval
						Else
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//| Se nao houver diferenca, subtrair o valor do 1/3 e abono     |
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							nOutVal  += SRR->RR_VALOR
						EndIf
						If lDissidio 
							If Calculo # 1						
								FMatriz(SRR->RR_PD,(SRR->RR_VALOR/SRH->RH_DFERIAS)* nDiasMes,nDiasMes,,,,,,,,,cSeq)
							Else					
								FMatriz(SRR->RR_PD,(SRR->RR_VALOR/SRH->RH_DFERIAS)* nDiasMse,nDiasMse,,,,,,,,,cSeq)
							EndIf
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de Adicional Tempo Servico Abono                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf cPaisLoc == "BRA" .And. SRR->RR_PD $ aCodfol[1312,1]+'*'+aCodfol[1313,1]+'*'+aCodfol[1314,1]+'*'+aCodfol[1315,1]
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Funcao que Retorna o Valor do Adicional Tempo Servico        ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						nAdtServ := 0.00
						CADTFER := CTIPOATS   
						CADTFER := STRTRAN(CADTFER,"*","")
						CTPATS := POSICIONE("RCE",1,XFILIAL("RCE",SRA->RA_FILIAL)+SRA->RA_SINDICA,"RCE_TPCATS")
						IF ( CTPATS  == "3" )
							CBSADTFER := " "
						EndIF
						fCalAdt(aCodfol,@nAdtServ,,SalMes,,,SRR->RR_PD,CADTFER,CTPATS,CBSADTFER)
						nAdtServ := NoRound(nAdtServ / 30 * SRH->RH_DABONPE,2)
						nDifval  := nAdtServ - SRR->RR_VALOR
						If nDifval > 0
							nOutAdiAb += nDifval
						Else
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//| Se nao houver diferenca, subtrair o valor do 1/3 e abono     |
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							nOutValAb  += SRR->RR_VALOR
						EndIf
						If lDissidio 
							FMatriz(SRR->RR_PD,(SRR->RR_VALOR/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Insalubridade Ferias                                         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					Elseif SRR->RR_PD $ aCodfol[37,1]+'*'+aCodfol[38,1]+'*'+aCodfol[39,1]+'*'+Iif( cPaisLoc == "BRA", aCodfol[1304,1]+'*'+aCodfol[1305,1]+'*'+aCodfol[1306,1]+'*'+aCodfol[1307,1], "")
						If GetNewPar("MV_USASMIN") = .T.
							If nVal_SalMin # SRH->RH_SalMin
								IndiceIns := If(nSalMInPg > 0, ( nVal_SalMin / nSalMinPg ), 0)
								nDifval   := ( SRR->RR_VALOR * IndiceIns ) - SRR->RR_VALOR
								nVlDifSM  := nDifval
								nOutAdic  += nDifval
							Else
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//| Se nao houver diferenca, subtrair o valor do 1/3 e abono     |
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								nOutVal += SRR->RR_VALOR
							EndIf
						Else
							nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
							nOutAdic  += nDifval
						EndIf

						//Gera a insalubridade na verba de outros adicionais no dissídio para compor corretamente os impostos
						If lDissidio
							If Calculo # 1
								FMatriz(aCodfol[84,1],(SRR->RR_VALOR/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
								FMatriz(aCodfol[85,1],(SRR->RR_VALOR/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
							Else
								FMatriz(aCodfol[84,1],(SRR->RR_VALOR/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
							EndIf
						EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Insalubridade Ferias Abono                                   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					Elseif cPaisLoc == "BRA" .And. SRR->RR_PD $ aCodfol[1320,1]+'*'+aCodfol[1321,1]+'*'+aCodfol[1322,1]+'*'+aCodfol[1323,1]
						If GetNewPar("MV_USASMIN",.T.,SRA->RA_FILIAL) = .T. 			
							If nVal_SalMin # SRH->RH_SalMin
								IndiceIns := If (nSalMInPg > 0,( nVal_SalMin / nSalMinPg ),0)
								nDifval   := ( SRR->RR_VALOR * IndiceIns ) - SRR->RR_VALOR
								nVlDifSM  := nDifval
								nOutAdiAb += nDifval
							Else
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//| Se nao houver diferenca, subtrair o valor do 1/3 e abono     |
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								nOutValAb  += SRR->RR_VALOR
							EndIf
						Else
							nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
							nOutAdiAb += nDifval
						EndIf 
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Adicionais de Confianca e de Transferencia                    ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ				 
					Elseif cPaisLoc=='BRA' .And. SRR->RR_PD $ aCodfol[984,1]+'*'+aCodfol[988,1]+'*'+aCodfol[1308,1]+'*'+aCodfol[1309,1]+'*'+aCodfol[1310,1]+'*'+aCodfol[1311,1]
						nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
						nOutAdic  += nDifval
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Adicionais de Confianca e de Transferencia Abono             ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ				 
					Elseif cPaisLoc=='BRA' .And. SRR->RR_PD $ aCodfol[1324,1]+'*'+aCodfol[1325,1]+'*'+aCodfol[1326,1]+'*'+aCodfol[1327,1]
							nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
							nOutAdiAb += nDifval
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Remuneracion variable Argentina                              ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf cPaisLoc=='ARG' .And. SRA->RA_TIPOPGT == "M" .And. SRR->RR_PD$ aCodfol[84,1]
						nDifVal	:=	((GetRemVarD(dDataBase,,.T.)*SRR->RR_HORAS) - SRR->RR_VALOR)
						nOutAdic	+=	nDifVal
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Como o valor de 1/3 de ferias inclui o 1/3 sobre o fixo e o 1/3 sobre    ³
						//³o variavel, e sao corregidos por criterios diferentes, eh necessario     ³
						//³tirar o 1/3 do variavel do 1/3 fixo, assim o nValTercV tera a correcao do³
						//³1/3 variavel e o nValTerc so o valor do fixo a ser corrigido.            ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						nValTercV+=	(nDifVal * 30/25)- nDifVal           
						nValTerc	-=	(SRR->RR_VALOR*30/25) - SRR->RR_VALOR
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Codigo de  Outras Verbas                                     ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf PosSrv(SRR->RR_PD,SRR->RR_FILIAL,"RV_TIPOCOD") == "1" .And.;
					!(SRR->RR_PD $ aCodFol[22,1] + '*' + cCodMedFer + '*' + cCodMedAB)
						If SRR->RR_TIPO1 # "V" .Or. SRR->RR_PD $ aCodFol[36,1]+Iif( cPaisLoc == "BRA", aCodfol[1300,1]+'*'+aCodfol[1301,1]+'*'+aCodfol[1302,1]+'*'+aCodfol[1303,1], "")
							nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
							nOutAdic  += nDifval
						ElseIf cPaisLoc == "BRA" .And. SRR->RR_PD $ aCodfol[1316,1]+'*'+aCodfol[1317,1]+'*'+aCodfol[1318,1]+'*'+aCodfol[1319,1]
							nDifval   := (SRR->RR_VALOR * Indice) - SRR->RR_VALOR
							nOutAdiAb += nDifval
						EndIf
					EndIf
				EndIf
				If SRR->RR_PD$ cCodMedFer
					nOutMed   += SRR->RR_VALOR
					nOutVal   += SRR->RR_VALOR
				EndIf
				If SRR->RR_PD $ cCodMedAb
					nMedAb   += SRR->RR_VALOR
					nValAb   += SRR->RR_VALOR
					nOutVal  += SRR->RR_VALOR
				EndIf
			EndIf
			dbSkip()
		Enddo

		//Soma o valor das verbas de Outros Adicionais de Férias, que na versão 11 não eram geradas na SRR, somente no cálculo da folha
		If cPaisLoc == "BRA" .And. lDissidio .And. Type("aPdOld") == "A"
			aEval( aPdOld, { |X| If ( x[1] $ aCodFol[84,1]+"*"+aCodFol[85,1] .And. X[9] != "D", nOutAdic += (x[5] * Indice) - x[5], Nil ) } )
			aEval( aPdOld, { |X| If ( x[1] $ aCodFol[84,1] .And. X[9] != "D", AADD(aPd, x), Nil ) } )
		EndIf

		//Se houve reajuste salarial
		If lReajust
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Codigo de  Outros Adicional                                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nOutAdic > 0.00
				nDifval  := nOutAdic
				If Calculo # 1
					FMatriz(aCodfol[98,1],(nDifVal/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
					FMatriz(aCodfol[99,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
				Else
					FMatriz(aCodfol[98,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
				EndIf
			EndIf
			If nOutAdiAb > 0.00
				nDifval  := nOutAdiAb
				If Calculo # 1
					FMatriz(aCodfol[1450,1],(nDifVal/SRH->RH_DABONPE)* nDAbMes,,,,,,,,,,cSeq)
					FMatriz(aCodfol[1451,1],(nDifval/SRH->RH_DABONPE)* nDAbMse,,,,,,,,,,cSeq)
				Else
					FMatriz(aCodfol[1450,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,,,,,,,,,,cSeq)
				EndIf
			EndIf 
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Codigo de  1/3 s/ Ferias                                     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nValTerc+nValTercV > 0
				nValTerc  -= (nOutVal / 3)
				nDifval   := (nValTerc * Indice) - nValTerc
				nDifval   += (nVlDifSM / 3)
				nDifval   += (nValTercV) 
				If Calculo # 1
					FMatriz(aCodfol[90,1],(nDifval/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
					FMatriz(aCodfol[91,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
				Else
					FMatriz(aCodfol[90,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
				EndIf
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Codigo de  Abono Pecuniario                                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nAboPecu > 0
				If cDifAbo == "S" //Apenas diferenca abono mes seguinte
					nDifval   := (nAboPecu * Indice) - nAboPecu                 		
					FMatriz(aCodfol[94,1],(nDifVal/SRH->RH_DABONPE) * nDAbMes,nDAbMes,,,,,,,,,cSeq)
				Else
					nAboPecu  -= ( nOutVal / SRH->RH_DFERIAS * SRH->RH_DABONPE )
					nDifval   := (nAboPecu * Indice) - nAboPecu                 
				EndIf	          

				If Calculo # 1
					If aCodFol[207,1] == Space(3)
						FMatriz(aCodfol[94,1],nDifval,SRH->RH_DABONPE,,,,,,,,,cSeq)
					Else
						FMatriz(aCodfol[94,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
						FMatriz(aCodfol[207,1],(nDifval/SRH->RH_DABONPE)* nDAbMse,nDAbMse,,,,,,,,,cSeq)
					EndIf
				Else
					FMatriz(aCodfol[94,1],(nDifVal/SRH->RH_DABONPE) * nDAbMse,nDAbMse,,,,,,,,,cSeq)
				EndIf
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Codigo de  1/3 s/ Abono                                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nTercAbo > 0
				If cDifAbo == "S" //Apenas diferenca abono mes seguinte
					nDifval   := (nTercAbo * Indice) - nTercAbo
					FMatriz(aCodfol[95,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
				Else		
					nTercAbo  -= ( ( nOutVal / SRH->RH_DFERIAS * SRH->RH_DABONPE ) / 3 )
					nDifval   := (nTercAbo * Indice) - nTercAbo
				EndIf
				If Calculo # 1
					If aCodFol[208,1] == Space(3)
						FMatriz(aCodfol[95,1],nDifval,SRH->RH_DABONPE,,,,,,,,,cSeq)
					Else
						FMatriz(aCodfol[95,1],(nDifval/SRH->RH_DABONPE)* nDAbMes,nDAbMes,,,,,,,,,cSeq)
						FMatriz(aCodfol[208,1],(nDifval/SRH->RH_DABONPE)* nDAbMse,nDAbMse,,,,,,,,,cSeq)
					EndIf
				Else
					FMatriz(aCodfol[95,1],(nDifVal/SRH->RH_DABONPE) * nDAbMse,nDAbMse,,,,,,,,,cSeq)
				EndIf
			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Codigo de Medias de Ferias                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If P_LDIFMED .And. nOutMed > 0.And. aCodFol[838,1] != Space(3) .And. aCodFol[839,1] != Space(3) .And. aCodFol[840,1] != Space(3) .And. aCodFol[841,1] != Space(3)
			If nMediaOut > nOutMed
				nDifMed	  := nMediaOut - nOutMed
				nDifval   := nDifMed / 3
				If Calculo # 1 
					//Diferenca de Media de Ferias no Mes  
					fMatriz(aCodfol[838,1],(nDifMed/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
					//Diferenca de Media de Ferias Mes Seguinte
					fMatriz(aCodfol[839,1],(nDifMed/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
					//Diferenca 1/3 sobre Media de Ferias no Mes
					fMatriz(aCodfol[840,1],(nDifVal/SRH->RH_DFERIAS)* nDiasMes,,,,,,,,,,cSeq)
					//Diferenca 1/3 sobre Media de Ferias Mes Seguinte
					fMatriz(aCodfol[841,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
				Else
					//Diferenca de Media de Ferias no Mes  
					fMatriz(aCodfol[838,1],(nDifMed/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
					//Diferenca 1/3 sobre Media de Ferias no Mes
					fMatriz(aCodfol[840,1],(nDifval/SRH->RH_DFERIAS)* nDiasMse,,,,,,,,,,cSeq)
				EndIf
			EndIf
		EndIf	

		If Calculo # 1  .and. !lDissidio .And. lReajust
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Grava Salario da Diferenca no Arquivo SRH                    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea("SRH")
			RecLock("SRH",.F.,.T.)
			SRH->RH_SALDIF  := nSalMesf
			SRH->RH_SALMIND := nVal_salMin
			MsUnlock()
		EndIf
	EndIf
Return( Nil )


/*/{Protheus.doc} fFaltasRGB
Verifica e retorna numeros de faltas lancados na RGB.
@type function

@author Esther de Viveiro
@since 01/06/2015
@version P12.1.5

@param cFil, caracter, filial do funcionario
@param cProces, caracter, processo do funcionario
@param cRot1, caracter, roteiro a ser pesquisado
@param [cRot2], caracter, roteiro a ser pesquisado
@param cMatr, caracter, matricula do funcionario

@param dDataIni, data, data do Inicio do intervalo a ser pesquisado
@param dDataFim, data, data do Fim do intervalo a ser pesquisado

@return numérico, Faltas encontradas
/*/
Function fFaltasRGB(cFil, cProces, cRot1, cRot2, cMatr, dDataIni, dDataFim)

	Local aArea	:= GetArea()

	Local cPd054 	:= fGetCodFol("0054")
	Local cPd055 	:= fGetCodFol("0055")
	Local cPd203 	:= fGetCodFol("0203")
	Local cPd242 	:= fGetCodFol("0242")
	Local cPd243 	:= fGetCodFol("0243")
	Local cPd244 	:= fGetCodFol("0244")
	Local cPd245 	:= fGetCodFol("0245")
	Local cVerbaPesq := "" 

	Local cAliasRGB	:= GetNextAlias()
	Local cQuery	:= ""

	Local nFaltas := 0

	DEFAULT cRot1 := ""
	DEFAULT cRot2 := ""

	If dDataIni <= dDataFim

		cQuery := "SELECT RGB_HORAS, RGB_TIPO1, RGB_PD, RGB_DTREF "	
		cQuery += "FROM " + RetSqlName("RGB")+ " RGB "
		cQuery += "WHERE RGB.RGB_FILIAL='" + cFil + "' AND "
		cQuery += 		  "RGB.RGB_PROCES='" + cProces + "' AND "
		cQuery += 		  "(RGB.RGB_ROTEIR='" + cRot1 + "' OR RGB.RGB_ROTEIR='" + cRot2 + "') AND "
		cQuery += 		  "RGB.RGB_MAT='" + cMatr + "' AND "
		cQuery += 	 	  "RGB.RGB_PD IN('" + cPd054 + "', '" + cPd055 + "', '" + cPd203 + "', '" + cPd242 + "', '" + cPd243 + "', '" + cPd244 + "', '" + cPd244 + "') AND "
		cQuery += 		  "RGB.RGB_DTREF>='" + DTOS(dDataIni) + "' AND RGB.RGB_DTREF<='" + DTOS(dDataFim) + "' AND "
		cQuery += 		  "RGB.D_E_L_E_T_= '' "

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasRGB,.T.,.T.)

		While (cAliasRGB)->(!Eof())
			cVerbaPesq := (cAliasRGB)->RGB_PD

			// Pesquisa Faltas na RGB
			If cVerbaPesq == cPd054
				If PosSrv(cPd054,cFil,"RV_MEDFER") $ "S *SP"
					nFaltas += If((cAliasRGB)->RGB_TIPO1 == "D", (cAliasRGB)->RGB_HORAS, Int((cAliasRGB)->RGB_HORAS/Round(SRA->RA_HRSMES/30,2)) )
				EndIf
			EndIf

			// Pesquisa Atraso na RGB
			If cVerbaPesq == cPd055
				If PosSrv(cPd055,SRA->RA_FILIAL,"RV_MEDFER") $ "S *SP"
					nFaltas += If((cAliasRGB)->RGB_TIPO1 == "D", (cAliasRGB)->RGB_HORAS, Int((cAliasRGB)->RGB_HORAS/Round(SRA->RA_HRSMES/30,2)) )
				EndIf
			EndIf

			// Pesquisa Faltas Mes Anterior na RGB
			If cVerbaPesq == cPd203
				If PosSrv(cPd203,SRA->RA_FILIAL,"RV_MEDFER") $ "S *SP"
					nFaltas += If((cAliasRGB)->RGB_TIPO1 == "D", (cAliasRGB)->RGB_HORAS, Int((cAliasRGB)->RGB_HORAS/Round(SRA->RA_HRSMES/30,2)) )
				EndIf
			EndIf

			// Pesquisa Faltas (II) na RGB
			If cVerbaPesq == cPd242
				If PosSrv(cPd242,SRA->RA_FILIAL,"RV_MEDFER") $ "S *SP"
					nFaltas += If((cAliasRGB)->RGB_TIPO1 == "D", (cAliasRGB)->RGB_HORAS, Int((cAliasRGB)->RGB_HORAS/Round(SRA->RA_HRSMES/30,2)) )
				EndIf
			EndIf

			// Pesquisa Atrasos (II) na RGB
			If cVerbaPesq == cPd243
				If PosSrv(cPd243,SRA->RA_FILIAL,"RV_MEDFER") $ "S *SP"
					nFaltas += If((cAliasRGB)->RGB_TIPO1 == "D", (cAliasRGB)->RGB_HORAS, Int((cAliasRGB)->RGB_HORAS/Round(SRA->RA_HRSMES/30,2)) )
				EndIf
			EndIf

			// Pesquisa Reembolso de Faltas na RGB
			If cVerbaPesq == cPd244
				If PosSrv(cPd244,SRA->RA_FILIAL,"RV_MEDFER") $ "S *SP"
					nFaltas -= If((cAliasRGB)->RGB_TIPO1 == "D", (cAliasRGB)->RGB_HORAS, Int((cAliasRGB)->RGB_HORAS/Round(SRA->RA_HRSMES/30,2)) )
				EndIf
			EndIf

			// Pesquisa Reembolso de Atrasos na RGB
			If cVerbaPesq == cPd245
				If PosSrv(cPd245,SRA->RA_FILIAL,"RV_MEDFER") $ "S *SP"
					nFaltas -= If((cAliasRGB)->RGB_TIPO1 == "D", (cAliasRGB)->RGB_HORAS, Int((cAliasRGB)->RGB_HORAS/Round(SRA->RA_HRSMES/30,2)) )
				EndIf
			EndIf

			(cAliasRGB)->(DbSkip())
		EndDo

		(cAliasRGB)->(DbCloseArea())
	EndIf

	RestArea(aArea)

Return (nFaltas)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunction³ fCarPdMSeg    º Autor ³ Leandro Drumond º Data ³ 23/07/2015  º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³ Carrega array com as verbas que possuem verbames seguinte.   º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³ Dissidio Retroativo						                  º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fCarPdMSeg()
	Local aArea 	:= GetArea()
	Local aRet		:= {}
	Local cAliasQry	:= GetNextAlias()

	BeginSql alias cAliasQry
	SELECT RV_COD, RV_CODMSEG
	FROM %table:SRV% SRV
	WHERE RV_CODMSEG <> '   ' AND RV_FILIAL = %xfilial:RD4% AND  
	SRV.%notDel%
	ORDER BY RV_COD   
	EndSql

	While (cAliasQry)->(!Eof())
		(cAliasQry)->(aAdd(aRet,{RV_COD,RV_CODMSEG}))
		(cAliasQry)->(DbSkip())
	EndDo

	(cAliasQry)->(DbCloseArea())
	
	RestArea(aArea)

Return aRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³fMediaHoraºAutor  ³Marcia              º Data ³ 20/01/2015  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Busca a composicao do mes no turno do funcionario          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso ³ SIGAGPE                                                          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fMediaHora() 
	Local dDataAx
	Local lLimpaMed	:= .T. 
	Local nPos		:= 0
	Local nAuxNor	:= 0
	
	Private lRefMed	:= P_REFMED //GetMvRH("MV_REFMED",, .F.)
	
	Static aMedProv := {}
	
	DEFAULT lProvResc  := (GetMvRH("MV_PROVRES",,"N") == "S") 

	cProce			:= If( type("cProce")	=="U"	,""			,cProce)
	dDataHorj		:= If( type("dDataHorj")=="U"	,CTOD("//")	,dDataHorj) 

	If SRA->(ColumnPos( "RA_HOJORVA" )) > 0 .And. SRA->RA_HOJORVA == "1"
		If FunName() $ "GPEM030|GPEM060" .Or. IsInCallStack("GPM060PROC")
			// se tiver periodo aquisitivo completo, entao considera a data de referencia o periodo aquisitivo  
			//conforme legislaço deve ser o periodo aquisitivo 

			If !Empty(aPerFerias)
				nPosFer		:= aScan(aPerFerias,{ |X| X[8] == "1" }) 
			Else
				Return Nil
			Endif

			If aPerFerias[nPosFer,2]< aperiodo[NPOSSEM,4] 
				dDataAx:=	aPerFerias[nPosFer,2]
			Else
				dDataAx:=aperiodo[NPOSSEM,3]
			Endif    

			If nColPro==1			
				dDataAx:=dDtInCol 
			Endif 

			GPEXMED(aPerFerias[nPosFer,1], dDataAx, dDataAx, CTOD(""), dDataAx, SalHora, Val_Binsal, aCodfol, lMesAtu, .F., .F., , ,.T.)
			dbSelectArea(cTBLXMED)
			dbSeek(SRA->RA_FILIAL + SRA->RA_MAT,.F.)
			If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "1" + "999" + "9999  ") .OR. dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "1" + "999" + "9999  ")
				Normal := (cTBLXMED)->RP_HORAS
			Else
				If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "2" + "999" + "9999  ") .OR. dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "2" + "999" + "9999  ")
					Normal := (cTBLXMED)->RP_HORAS
				Endif 
			Endif

		ElseIf FunName() $ "GPEM040|GPEM630" .And. cTipoRot != "3"
			GPEXMED(SRF->RF_DATABAS,   ,ddatadem,ddatadem,ddatadem,SalHora,Val_BInsal,aCodfol,lMesAtu,.T.   ,.F.     ,   ,    ,.T.)
			dbSelectArea(cTBLXMED)                         
			dbSeek(SRA->RA_FILIAL + SRA->RA_MAT,.F.)
			BuscaSalHor() 
		ElseIf CTIPOROT == "5"
			GPEXMED(""  ,""  ,If(lRefMed .and. !Empty(dRefMed),dRefMed,dDataRef),"", If(lRefMed .and. !Empty(dRefMed), dRefMed, dDataRef), SalHora,Val_BInsal,aCodfol,lMesAtu,,,,,.T.)
			dbSelectArea(cTBLXMED)
			dbSeek(SRA->RA_FILIAL + SRA->RA_MAT,.F.)
			If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "3" + "999" + "9999  ")
				Normal := (cTBLXMED)->RP_HORAS
			Endif
		ElseIf CTIPOROT == "6"
			GPEXMED("","",If(lRefMed .and. !Empty(dRefMed),dRefMed,dDataRef),"",If(lRefMed .and. !Empty(dRefMed),dRefMed,dDataRef),SalHora,Val_BInsal,aCodfol,If (P_CCOMP13 == 'S',.T.,lMesAtu),If (P_CCOMP13 == 'S',.T.,.F.),,,,.T.)
			dbSelectArea(cTBLXMED)
			dbSeek(SRA->RA_FILIAL + SRA->RA_MAT,.F.)
			If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "3" + "999" + "9999  ")
				Normal := (cTBLXMED)->RP_HORAS
			EndIf
		ElseIf FunName() $ "GPEA070" .Or. IsInCallStack( "GPEM070" ) .or. IsInCallStack( "GPM070GRD" )
			lLimpaMed := .F.
			
			If !Empty(cProce)
				If Len(aMedProv) > 0 .and. aMedProv[1,2] <> SRA->RA_MAT
					aMedProv := {}
				EndIf
				
				dRefMed	:= If(lProvResc .And. lDemitido,dDataDem1,dDataRef)
				
				If ( nPos := aScan(aMedProv, {|X| x[1]+x[2]+DtoS(x[3])+DtoS(x[4])+x[5] == SRA->RA_FILIAL + SRA->RA_MAT + DtoS(dDataHorj) + DtoS(dRefMed) + cProce }) ) > 0
					Normal := aMedProv[nPos,6]
				Else
					lLimpaMed := .T.
					
					dbSelectArea(cTBLXMED)
					Zap                                                                   
					
					GpexMed(dDataHorj, , LastDate(dRefMed), , LastDate(dRefMed), nSalHora, nSalMin, aCodFol, .T., (!lFechouMes), , , , .T.)
				
					dbSelectArea(cTBLXMED)
					
					nAuxNor := Normal
		
					If Empty(aMedProv) //Grava os outros dois, se o período for o mesmo, será o mesmo valor, e não terá que executar o GPEXMED mais duas vezes
						For nPos := 1 to 3
							If Val(cProce) <> nPos
								Normal := nAuxNor
								If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + cValToChar(nPos) + "999" + "9999  ")
									Normal := (cTBLXMED)->RP_HORAS
									If lHojorva
										Normal := (cTBLXMED)->RP_VALATU / SRA->RA_SALARIO
									EndIf
								EndIf
								aAdd(aMedProv, {SRA->RA_FILIAL , SRA->RA_MAT , dDataHorj , dRefMed , cValToChar(nPos), Normal})
							EndIf
						Next nPos
					EndIf
					
					Normal := nAuxNor
					If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + cProce + "999" + "9999  ")
						Normal := (cTBLXMED)->RP_HORAS
						If lHojorva
							Normal := (cTBLXMED)->RP_VALATU / SRA->RA_SALARIO
						EndIf
					EndIf
										
					aAdd(aMedProv, {SRA->RA_FILIAL , SRA->RA_MAT , dDataHorj , dRefMed , cProce, Normal})						

					Gp070LimpaMed() //Altera static no GPEM070 para que o GPEXMED seja executado novamente sem o parâmetro de jornada variável
				EndIf
			EndIf
		ElseIf CTIPOROT == "3" .And. lCalcFol
		
			If M->RH_DBASEAT < aperiodo[NPOSSEM,4] 
				dDataAx := M->RH_DBASEAT
			Else
				dDataAx := aperiodo[NPOSSEM,3]
			Endif
			
			GPEXMED(M->RH_DATABAS, dDataAx, dDataAx, CTOD(""), dDataAx, SalHora, Val_Binsal, aCodfol, lMesAtu, .F., .F., , ,.T.)
			dbSelectArea(cTBLXMED)
			dbSeek(SRA->RA_FILIAL + SRA->RA_MAT,.F.)
			If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "1" + "999" + "9999  ") .Or. dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "2" + "999" + "9999  ")
				Normal := (cTBLXMED)->RP_HORAS
			EndIf
		Endif    
		dbSelectArea(cTBLXMED)
		If lLimpaMed
			Zap
		EndIf 
	Endif
Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³BuscaSalHor³ Autor ³Marcia Moura          ³ Data ³30/06/2016³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Encontra Salario Ferias Proporcionais e Vencidas            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³GPEXINI													  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function BuscaSalHor()

	Local cTipMed
	Local k

	nSalMes13 := nSalMesFv := nSalMesFp := nSalMesAp := SRA->RA_SALARIO * Normal

	IF dbSeek( SRA->RA_FILIAL + SRA->RA_MAT )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Media de Ferias Vencidas (Tratamento de Mais de Um Periodo)³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For k := 1 To 6
			cTipMed	:= Str( IF(k ==1, 1,k+3), 1)
			IF dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + cTipMed + "999" + "99MD" )
				if  (cTBLXMED)->RP_HORAS > 0 
					nSalMesFv := SRA->RA_SALARIO * (cTBLXMED)->RP_HORAS
				Endif
			EndIF
		Next k                                                                                                          

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Media de Ferias Proporcionais                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea(cTBLXMED)
		IF dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "2" + "999" + "9999" )     

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ A rotina de media gera os periodos de acordo com a data de demissao sem   ³
			//³ o aviso previo e o periodo para media pode ser proporcional e com o aviso ³
			//³ as ferias mudou de proporcional para vencidas e a media ficou gravada no  ³
			//³ periodo proporcional, nessa situacao utilizar media proporcional para o   ³
			//³ calculo das ferias vencidas.                                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			If !lDFerAvi
				If ( (nDFerV == 0 .And. nMedFerv = 0) .Or. (nDFerV > 0 .And. (nDFerA + nDFerInd ) == aTabFer[3]) ) .And. nDFerA > 0 .And. nDFerVen > 0
					nSalMesFv := SRA->RA_SALARIO * 	(cTBLXMED)->RP_HORAS
				else
					nSalMesFp := SRA->RA_SALARIO * 	(cTBLXMED)->RP_HORAS
				EndIF
			Else  
				nSalMesFp := SRA->RA_SALARIO * 	(cTBLXMED)->RP_HORAS
			EndIf	

		EndIF

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Media de 13§ Salario                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea(cTBLXMED) 
		IF dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "3" + "999" + "9999" )
			nSalMes13 := SRA->RA_SALARIO * 	(cTBLXMED)->RP_HORAS
		EndIF                             

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Media de Aviso Previo                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		If dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + "4" + "999" + "9999  ")
			nSalMesAp := SRA->RA_SALARIO * 	(cTBLXMED)->RP_HORAS
			Normal := (cTBLXMED)->RP_HORAS

			//calculo novamente o saldia, salmes e salhora, agora utilizando a média de horas
			SALDIA := SRA->RA_SALARIO * NORMAL / NDIASC    
			SALMES := SRA->RA_SALARIO * NORMAL
			IF cTipoRot # "2" .or. SRA->RA_CATFUNC # "T"                                                                                                                                                                                                                 
				SALARIO :=  SALMES
				SALHOR	:= SALHORA
				SALDOR := SALDIA
			Endif
		Endif

	EndIF
Return Nil

/*/{Protheus.doc} fDifIncorp
Verifica se é para calcular diferença de FER ou 132 para verbas que incorporam salário
@author gabriel.almeida
@since 05/06/2018
@version 1.0
/*/
Function fDifIncorp(lCalcFolp,lRotDif)
	Local lDifIncorp 	:= .F.
	
	If Type("P_LDIFINC") <> "U" .And. P_LDIFINC
		Default lCalcFolp := lCalcFol .Or. lDissidio
		Default lRotDif   := ( (cTipoRot == "6" .And. P_CCOMP13 == "S") .Or. (!lDissidio .And. cTipoRot == "3") )
		
		nSalMesInc := IIf(Type("nSalMesI") <> "U",nSalMesI,0)
		lDifIncorp := nSalMesInc > 0 .And. lCalcFolp .And. lRotDif
	EndIf
Return lDifIncorp

/*/{Protheus.doc} fBusMesSeg
Verifica se a verba possui divisão de mês e mês seguinte
@author Leandro Drumond
@since 30/08/2018
@version 1.0
/*/
Function fBusMesSeg(cVerba)
	Local aArea		:= GetArea()
	Local cFilSRV	:= xFilial("SRV", SRA->RA_FILIAL)
	Local cRet		:= ""

	DbSelectArea("SRV")
	SRV->(DbSetOrder(7)) //RV_FILIAL+RV_CODMSEG
	If SRV->(DbSeek(cFilSRV + cVerba))
		cRet := SRV->RV_COD
	EndIf
	SRV->(DbSetOrder(1))

	RestArea(aArea)
Return cRet

/*/{Protheus.doc} fCrgMesSeg
Troca as verbas de mês por mês seguinte
@author Leandro Drumond
@since 30/08/2018
@version 1.0
/*/
Static Function fCrgMesSeg(aAuxDissDif,lMes)
Local cPerAux := If(lMes,SomaMesAno(cPeriodo),cPeriodo)
Local cPdMS	  := ""
Local nX	  := 0

For nX := 1 to Len(aAuxDissDif)
	If aAuxDissDif[nX,1] + aAuxDissDif[nX,2] + aAuxDissDif[nX,4] + aAuxDissDif[nX,5] == SRA->RA_FILIAL + SRA->RA_MAT + cPerAux + cSemana .and. !Empty(cPdMS := fBusMesSeg(aAuxDissDif[nX,6]))
		aAuxDissDif[nX,6] := cPdMS
		aAuxDissDif[nX,4] := SRH->RH_PERIODO //Muda para período de origem
	EndIf
Next nX

Return Nil

Static Function fFiltroSRV(cPdFiltro)
Local aArea		 := SRV->(GetArea())
Local aRetFiltro
Local cTabMestre := "SRV"
Local cExpFiltro := ""
Local aFilterExp := {}
Local nI 		 := 1
Local nBase		 := 0

aAdd( aFilterExp , { "FILTRO_COD" , cPdFiltro    	, NIL , NIL    } )

aRetFiltro := FilterBuildExpr( aFilterExp,.F. )
cExpFiltro := GpFltAlsGet( aRetFiltro , cTabMestre )

dbSelectArea("SRV")
dbSetOrder(1)
	
For nI := 1 To Len(aPd)
	If SRV->(dbSeek(xFilial("SRV")+aPd[nI,1]))
		If &(cExpFiltro)
			nBase += aPd[nI][5]
		EndIf
	EndIf
Next nI
RestArea(aArea)
Return nBase

/*/{Protheus.doc} fDifMP927
Efetua pesquisa na SRD de verba com NUMID do período aquisitivo adiantado para validar se a diferença de média de férias já foi gerada
@author Allyson Mesashi
@since 03/11/2020
@version 1.0
/*/
Static Function fDifMP927()

Local cAliasSRD	:= GetNextAlias()
Local cQuery	:= ""
Local lAchou	:= .F.

Static __oSt927

If __oSt927 == Nil
	__oSt927 := FWPreparedStatement():New()	 

	cQuery := "SELECT R_E_C_N_O_ FROM " + RetSqlName('SRD') + " WHERE "
	cQuery += "RD_FILIAL = ? AND "
	cQuery += "RD_MAT = ?  AND "
	cQuery += "RD_NUMID = ? AND "
	cQuery += "D_E_L_E_T_ = ' '"
	cQuery := ChangeQuery(cQuery)
	
	__oSt927:SetQuery(cQuery)
EndIf

__oSt927:SetString(1, SRH->RH_FILIAL)
__oSt927:SetString(2, SRH->RH_MAT)
__oSt927:SetString(3, "MP927" + "-" + dToS(SRH->RH_DATABAS) + "-" + dToS(SRH->RH_DBASEAT))

cQuery := __oSt927:getFixQuery()

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSRD)

If (cAliasSRD)->( !EoF() ) 
	lAchou	:= .T.
EndIf

(cAliasSRD)->( dbCloseArea() ) 

Return lAchou

/*/{Protheus.doc} fDifMP1046
Efetua pesquisa na SRD de verba com NUMID do período aquisitivo adiantado para validar se a diferença de média de férias já foi gerada
@author Allyson Mesashi
@since 03/11/2020
@version 1.0
/*/
Static Function fDifMP1046()

Local cAliasSRD	:= GetNextAlias()
Local cQuery	:= ""
Local lAchou	:= .F.

Static __oSt1046

If __oSt1046 == Nil
	__oSt1046 := FWPreparedStatement():New()	 

	cQuery := "SELECT R_E_C_N_O_ FROM " + RetSqlName('SRD') + " WHERE "
	cQuery += "RD_FILIAL = ? AND "
	cQuery += "RD_MAT = ?  AND "
	cQuery += "RD_NUMID = ? AND "
	cQuery += "D_E_L_E_T_ = ' '"
	cQuery := ChangeQuery(cQuery)
	
	__oSt1046:SetQuery(cQuery)
EndIf

__oSt1046:SetString(1, SRH->RH_FILIAL)
__oSt1046:SetString(2, SRH->RH_MAT)
__oSt1046:SetString(3, "MP1046" + "-" + dToS(SRH->RH_DATABAS) + "-" + dToS(SRH->RH_DBASEAT))

cQuery := __oSt1046:getFixQuery()

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSRD)

If (cAliasSRD)->( !EoF() ) 
	lAchou	:= .T.
EndIf

(cAliasSRD)->( dbCloseArea() ) 

Return lAchou

/*/{Protheus.doc} fPesqRHH()
Função que verifica cálculo do dissídio na tabela RHH
@type function
@author Allyson Mesashi
@since 04/11/2020
@version 1.0
/*/
Static Function fPesqRHH( cVerba, nValRHH )

Local cMesAno	:= ""

Default cVerba 	:= ""
Default nValRHH := 0

RHH->( dbSetOrder(2) )//RHH_FILIAL+RHH_MAT+RHH_DATA+RHH_MESANO+RHH_VB+RHH_CC+RHH_ITEM+RHH_CLVL
If RHH->( dbSeek( SRH->RH_FILIAL+SRH->RH_MAT+AnoMes(SRH->RH_DATAINI) ) )
	cMesAno	:= RHH->RHH_MESANO
	If RHH->( dbSeek( SRH->RH_FILIAL+SRH->RH_MAT+AnoMes(SRH->RH_DATAINI)+cMesAno+cVerba ) )
		While RHH->( !EoF() ) .And. RHH->RHH_FILIAL+RHH->RHH_MAT+RHH->RHH_DATA+RHH->RHH_MESANO+RHH->RHH_VB == SRH->RH_FILIAL+SRH->RH_MAT+AnoMes(SRH->RH_DATAINI)+cMesAno+cVerba
			nValRHH += RHH->RHH_CALC
			RHH->( dbSkip() ) 
		EndDo
	EndIf
EndIf

Return
