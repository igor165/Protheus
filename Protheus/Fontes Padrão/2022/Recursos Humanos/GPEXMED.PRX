#INCLUDE "PROTHEUS.CH"                                                                 

Static cFilPd	:= ""  					//Codigo da filial da tabela SRV usado na função fCargaPro
Static Pd		:= {}  					//Array das verbas com incidencia para media usado na função fCargaPro
Static PdHRJorva:= {} 
Static aStruSRD := {}      				//Estrutura da Query
Static lGestPubl:= IIF(ExistFunc("fUsaGFP"), fUsaGFP(), .F.)
Static _cRotFol	:= If(lGestPubl, fGetRotOrdinar(), fGetCalcRot("1"))
Static _cRotAut	:= fGetCalcRot("9")
Static _cRotRes	:= fGetCalcRot("4")
Static _cRot131	:= fGetCalcRot("5")
Static _cRot132	:= fGetCalcRot("6")
Static _cRotQry	:= ""
Static __lMemCalc
Static _cRegFun	:= ""  					//Regime do Funcionário
Static __oStTit
Static lHistMed	:= FindFunction("RetLogCalc")
Static lHoJorva
Static lTabHist
Static lJornadVar := .F.

//STATICS UTILIZADAS PARA VERIFICAR PONTOS DE ENTRADA
Static lGpMedTar
Static lGPXMEDPD
Static lGPXCOMIS
Static lGpMedTrp
Static lGpMedPer
Static lGpMedArr
Static lGpMovSrc
Static lGpavosMed

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ GPEXMED  ³ Autor ³ Recursos Humanos                ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Calcular Medias de Horas Extras e Asdicionais.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³GPEXMED(dDt1,dDt2,dDt3,dDt4,dDt5,nSalh,Val_SalMin,aCodfol,lc          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                                      ³±±
±±³dDt1      ³ Data Base para Ferias Vencidas e se deve calcular media.             ³±±
±±³dDt2      ³ Data Base para Ferias a vencer e se deve calcular media.             ³±±
±±³dDt3      ³ Data Base para 13. Salario  e se deve calcular media.                ³±±
±±³dDt4      ³ Data Base para Aviso Previo e se deve calcular media.                ³±±
±±³dDt5      ³ Data de Referencia para Calculo.                                     ³±±
±±³nSalh     ³ Valor do Salario Hora.                                               ³±±
±±³Val_SalMin³ Valor do Salario Minimo.                                             ³±±
±±³aCodFol   ³ Vetor contendo os codigos da folha.                                  ³±±
±±³lMesAtu   ³ Se considerar Mes Atual para a media por 3,6,9,ou 12                 ³±±
±±³lMovto    ³ Considera Movto. do Arquivo de Lacto.                                ³±±
±±³dDt7      ³ Data de Referencia p/Calc.13Salario (relatorio)                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³  FNC           ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³27/09/12³M12RH01         ³Unificao da Folha. RHU210_04_01           ³±±
±±³Tiago Malta ³04/11/13³RQ1848          ³Unificacao da Folha. 1a Parc. do 13o sal. ³±±
±±³Antonio C.  ³06/05/14³TPLMQ4          ³Replica Versão 11 para versão 12.         ³±±
±±³Cecilia Car.³11/04/14³M_RH003         ³Na funcao GpexMed, nao verificar mais os  ³±±
±±³            ³        ³002974          ³campos RA_INSMIN e RA_INSMED.             ³±±
±±³Allyson M.  ³30/07/14³TQAPCY 		 ³Ajuste na verificacao dos periodos consi- ³±±
±±³            ³        ³                ³derados para media caso haja sindicato p/	³±±
±±³            ³        ³                ³o funcionario.							³±±
±±³            ³        ³        		 ³Ajuste p/ verificacao dos periodos consi- ³±±
±±³            ³        ³                ³derados para media nas verbas de faltas e	³±±
±±³            ³        ³                ³atrasos									³±±
±±³Allyson M.  ³06/08/14³TQGRN8 		 ³Ajuste p/ considerar o mês atual p/ media ³±±
±±³            ³        ³                ³de aviso previo caso o calculo seja defi-	³±±
±±³            ³        ³                ³nido por sindicato e os meses p/ media nao³±±
±±³            ³        ³                ³sejam preenchidos.						³±±
±±³Allyson M.  ³27/11/14³TQXLEQ 		 ³Ajuste p/ deduzir os valores das verbas de³±±
±±³            ³        ³                ³desconto das medias.						³±±
±±|Claudinei S.|09/01/15|TQO030          ³Para as medias de licenca maternidade caso³±±
±±|            |        |                ³tenha tido outro afastamento anterior e   ³±±
±±|            |        |                ³em seguida se afastou por maternidade nao ³±±
±±|            |        |                ³podera considerar o periodo do afastamento³±±
±±|            |        |                ³anterior para a composicao das medias.    ³±±
±±³Allyson M.  ³03/02/15³TQTRLX 		 ³- Ajuste na verificacao do periodo consi- ³±±
±±³            ³        ³                ³derado para media de aviso previo.		³±±
±±³            ³        ³                ³- Ajuste p/ nao efetuar o pagamento de    ³±±
±±³            ³        ³                ³media de insalubridade se funcionario 	³±±
±±³            ³        ³                ³estiver recebendo o adicional pois o valor³±±
±±³            ³        ³                ³ja sera pago na remuneracao.				³±±
±±|Esther V.   ³09/06/15³PCDEF-38153     ³Ajustado nome da variavel cDiasAux.       ³±±
±±³Allyson M.  ³03/08/15³TSIDQ1 		 ³Ajuste na apuracao das medias de 13o.     ³±±
±±³            ³        ³                ³quando MV_M13ANOC esta com 1.				³±±
±±³Allyson M.  ³15/10/15³TTNCJ8 		 ³Ajuste em GRA_MED() p/ gerar a media sobre³±±
±±³            ³        ³                ³todos os lancamentos fixos.				³±±
±±³            ³        ³                ³Ajuste para considerar verba de base nas  ³±±
±±³            ³        ³                ³medias como provento (replica Mariana)	³±±
±±³            ³        ³                ³Ajuste no calculo de Medias quando 1o 	³±±
±±³            ³        ³          		 ³período do cadastro de sindicato contem 12³±±
±±³            ³        ³          		 ³meses e os demais com 0 (replica Trombini)³±±
±±³            ³        ³                ³Ajuste na apuracao das medias de 13o.     ³±±
±±³            ³        ³          		 ³quando MV_MEDDIRE esta com "N", utiliza de³±±
±±³            ³        ³          		 ³finição de sindicato e verbas. O sistema  ³±±
±±³            ³        ³          		 ³paga conforme definido nestes cadastros ou³±±
±±³            ³        ³          		 ³então por 12 meses (replica Renan)        ³±±
±±³Allyson M   ³27/11/15³TTQINI    		 ³Ajuste no periodo considerado na media de ³±±
±±³            ³        ³          		 ³aviso previo (ajuste de 08/2014 retirado).³±±
±±³            ³        ³TTWFDM    		 ³Ajuste na validacao dos dias de faltas p/ ³±±
±±³            ³        ³          		 ³apuracao dos avos de 13.					³±±
±±³Allyson M.  ³11/12/15³TU9321          ³Ajuste na verificacao do valor pago na 1a.³±±
±±³            ³        ³                ³parcela do 13o.                           ³±±
±±³Allyson M.  ³30/12/15³TUAWS7		 	 ³Ajuste em fAcumFaltas() p/ validar a falta³±±
±±³            ³        ³                ³por sua data de pagamento e nao pela data	³±±
±±³            ³        ³                ³final do periodo							³±±
±±³Allyson M.  ³14/01/16³TUFYH3		 	 ³Ajuste em CAL_X_FALTAS() no calculo da    ³±±
±±³            ³        ³                ³falta em horas p/ buscar as horas mensais	³±±
±±³            ³        ³                ³na tabela SR9 ao inves de considerar as 	³±±
±±³            ³        ³                ³horas atuais pois pode ter tido alteracao	³±±
±±³Renan Borges³12/04/16³TUR737		 	 ³Ajuste para gerar o desconto de 13° corre-³±±
±±³            ³        ³                ³tamente na Rescisão quando funcionário    ³±±
±±³            ³        ³                ³possuir antecipação de 13° nas férias.    ³±±
±±ºRaquel Hager³30/05/2016³TVFXON        ³Ajuste para não somar id 165 quando comple³±±
±±º            ³          ³              ³mentar./Ajuste na gravaçã dos dados da TRP³±±
±±º            ³          ³              ³para não imprimir referências após resc.  ³±±
±±º            ³          ³              ³original.                                 ³±±
±±³Allyson M.  ³13/06/16³TVJSRJ		 	 ³Ajuste p/ considerar o periodo correto p/ ³±±
±±³            ³        ³                ³medias quando for rescisao complementar	³±±
±±³Gabriel A.  ³10/06/16³TVH082          ³Ajuste para considerar os valores corretos³±±
±±³            ³        ³                ³no cálculo de médias.                     ³±±
±±³Marcia Moura³06/07/16³TVMEN0          ³Criacao do controle para RA_HOJORVA, onde ³±±
±±³            ³        ³                ³sera utilizada media de hrs como sal. base³±±
±±³Allyson M.  ³08/07/16³TUVZUJ 		 ³Ajuste na busca dos afastamentos p/ buscar³±±
±±³            ³        ³                ³somente Licencas Maternidade dos ultimos 6³±±
±±³            ³        ³                ³meses ao apurar o valor da media.         ³±±
±±|Claudinei S.|11/07/16|TUVZAE/TUROAM   |MV_M13ANOC só será considerado caso o     |±±
±±|            |        |                |MV_MEDDIRE estiver como "N", ajustada a   |±±
±±|            |        |                |Media de ferias proporcionais para que no |±±
±±|            |        |                |caso de funcionarios com menos de um ano  |±±
±±|            |        |                |a media nao seja pela quantidade do cad.  |±±
±±|            |        |                |de verbas e sim os meses proporcionais.   |±±
±±³Allyson M.  ³15/07/16³TULOXA		 	 ³Ajuste p/ considerar o roteiro 132 na     ³±±
±±³            ³        ³                ³query da SRD								³±±
±³Marcia Moura³15/07/16³TVQFRB         ³Controle para calcular a media de Horista com³±±
±±³            ³        ³               ³jornada var.utilizando valores do mess resc.³±±
±±|Claudinei S.|18/07/16|TVQHSJ          |Ajuste em fGravaTrp para não considerar os|±±
±±|            |        |                |ID's 32 e 33 no total geral das médias e  |±±
±±|            |        |                |Ajustado em fCargaPro a geração das médias|±±
±±|            |        |                |para no caso de horista jornada variavel  |±±
±±|            |        |                |demonstrar também as outras verbas de     |±±
±±|            |        |                |média e não só as verbas salario e DSR.   |±±
±±|Claudinei S.|22/07/16|TVQQXK          |Ajuste em fGravaTrp para não considerar as|±±
±±|            |        |                |verbas do grupo 0 (RV_GRPVERB) no total   |±±
±±|            |        |                |das médias. Feito ajuste em FCargaPro para|±±
±±|            |        |                |considerar as verbas do grupo 0 na média  |±±
±±|            |        |                |do salário (HOJORVA). deixaram de ser     |±±
±±|            |        |                |fixos os ID's 0032 e 0033.                |±±
±±|Cícero Alves|12/08/16|TVRUMM          |Ajuste na fFalVenc para não acessar o aPd |±±
±±|            |        |                |quando o tipo de cálculo for 2			|±±
±±|Allyson M   |17/08/16|TVW057    		 |-Ajuste p/ verificar meses para media de  |±±
±±|            |        |          		 |ferias corretamente quando funcionario tem|±±
±±|            |        |          		 |menos de um ano e ha configuração de meses|±±
±±|            |        |          		 |na verba									|±±
±±|            |        |          		 |-Ajuste p/ verificar os avos de ferias    |±±
±±|            |        |          		 |proporcionais ao verificar o periodo que  |±±
±±|            |        |          		 |sera considerado para as medias quando ha |±±
±±|            |        |          		 |configuração de meses na verba 			|±±
±±³Renan Borges³02/09/16³TVTOZI		 	 ³Ajuste para ao calcular a rescisão coside-³±±
±±³            ³        ³                ³rar o 13° pago somente no ano da rescisão ³±±
±±³            ³        ³                ³e não nos anteriores.                     ³±±
±±|Claudinei S.|09/09/16|TVQQXK          |Ajuste em  fCargaPro, para demonstrar as  |±±
±±|            |        |                |verbas que irão compor a média do salário |±±
±±|            |        |                |no demonstrativo de médias, caso a        |±±
±±|            |        |                |primeira verba estivesse com sim para     |±±
±±|            |        |                |média as verbas do grupo 0 não eram       |±±
±±|            |        |                |consideradas.                             |±±
±±|Eduardo K.  |25/10/16|TWHI15          |ajuste para o correto calculo de média de |±±
±±|            |        |                |acordo com o conteudo do campo 			|±±
±±|            |        |                |"Mes p/ Media".							|±±
±±|Allyson M   |11/11/16|TWEHXD    		 |-Ajuste no cálculo de médias quando apenas|±±
±±|            |        |          		 |um período de média foi preenchido mas que|±±
±±|            |        |          		 |não é o primeiro período.					|±±
±±|            |        |          		 |-Ajuste p/ considerar os afastamentos p/  |±±
±±|            |        |          		 |ferias corretamente 						|±±
±±|Flavio Corr.|15/12/16|MRH-3352        |Ajustada GPEXMED, para converter a ref.   |±±
±±|	           |	    |            	 |em horas para horistas com jornada varia- |±±
±±|	           |	    |            	 |vel que tem verbas em valor ou dias       |±±
±±|Allyson M   |20/12/16|MRH-3539  		 |Ajuste p/ também considerar o ID 0163 na  |±±
±±|            |        |          		 |verificação da antecipação do 13º			|±±
±±|Allyson M   |23/12/16|MRH-378   		 |Ajuste p/ considerar os lançamentos da RGB|±±
±±|            |        |          		 |quando verificar o mês atual				|±±
±±|Allyson M   |28/12/16|MRH-3514  		 |Criação do PE GPMEDPER p/ alterar período |±±
±±|            |        |          		 |de busca das férias						|±±
±±³Renan Borges³04/01/17³MRH-4116	 	 ³Ajuste para quando calcular a prov. em um ³±±
±±³            ³        ³                ³mes que teve 13° fechado seja descontado  ³±±
±±³            ³        ³                ³o que já foi pago corretamente.           ³±±
±±|Raquel Hager|04/01/17|MRH-1607	 	 |Ajuste para carga das Datas Inicias/Finais|±±
±±|            |        |                |das médias para o cálculo de Rescisão.    |±±
±±|Raquel Hager|19/01/17|MRH-4655	 	 |Implementado Totalizador das verbas do    |±±
±±|            |        |                |Grupo 0 - Horista com Jornada Variável.   |±±
±±|Raquel Hager|13/02/17|MRH-5991	 	 |Ajuste no Totalizador das verbas do       |±±
±±|            |        |                |Grupo 0 - Horista com Jornada Variável.   |±±
±±|Renan Borges|03/03/17|MRH-7435	 	 |Ajuste para calcular medias corretamente  |±±
±±|            |        |                |de quando funcionário possuir menos de um |±±
±±|            |        |                |ano trabalhado, e ajuste para pegar as mé-|±±
±±|            |        |                |dias no período correto.                  |±±
±±|Gabriel A.  |05/06/17|DRHPAG-2655     |Ajuste para considerar os dados do        |±±
±±|            |        |                |movimento mesmo quando houver lançamentos |±±
±±|            |        |                |para o cálculo de férias.                 |±±
±±|Flavio C.   |14/08/17|DRHPAG-4297     |Subindo fonte na 12.1.17 para ficar       |±±
±±|            |        |                |compativel com  os releases anteriores    |±±
±±|João Balbino|16/01/18|MPRIMESP-13284  |Ajustado calculo de méd para ferias no mes|±±
±±|            |        |                |para que gere a dif corretamente.         |±±
±±|Tiago B.	   |01/02/18|MPRIMESP-13486  |Ajuste no cálculo da media de 13º quando  |±±
±±|            |        |                |rescisão futura							|±±
±±|Silvia Tag. |05/07/18|DRHGFP-309      |Tratamento para Folha Publica, utilizando |±±
±±|            |        |                |roteiro ordinario e tratamento para nao   |±±
±±|            |        |                |buscar pensao no calc. resc e 213         |±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GPEXMED(dDt1, dDt2, dDt3, dDt4, dDt5, nSalh, Val_SalMin, aCodFol, lMesAtu, lMovto, lFaltas, dDt6, dDt7, lJorVar, cTpAfast, lDemonCalc, nSalhInc, lMovto13)
		
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis Locais do Programa                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local aAreaSRF			:= SRF->( GetArea() ) 	
Local cArqAnt           := Alias()
Local nOrdem            := IndexOrd()
Local cMatricula        := SRA->RA_MAT
Local cChave            := SRA->RA_FILIAL + cMatricula
Local aChave   			:= Array( 01 , 07 )
Local aRepetido 		:= {}
Local cCodInsalubridade := aCodFol[37,1]+","+aCodFol[38,1]+","+aCodFol[39,1]
Local cCodAdicTemSer    := aCodFol[01,1]+","+aCodFol[02,1]+","+aCodFol[03,1]+","+aCodFol[04,1]+","+aCodFol[05,1]+","+aCodFol[1288,1]+","+aCodFol[1289,1]
Local n13MenosAVos      := 0
Local lCabLog			:= .F.
Local aAfast	        := {}
Local aAux				:= {}
Local fop[6]
Local nPosFe			:= 0
Local nPos13			:= 0
Local nPosAv 			:= 0
Local nPosMater			:= 0
Local nPosAfQ        	:= 0
Local nValAux			:= 0
Local cMedDAv 			:= "N"
Local cMedD13 			:= "N"
Local dFimVenPend
Local cAliasAnt
Local nDiasVenPen 		:= 0
Local aCodBenef 		:= {}
Local nCntP
Local nPos1 			:= 0
Local nPosBenef 		:= 0
Local cServer 			:= "INTEL"
Local nS
Local k
Local nCntF
Local aPerVenc 			:= {}
Local aPerUnic 			:= {}
Local nP
Local nF
Local cTipFV
Local dData
Local dDt5Bkp			:= cToD("//")
Local dDtFim
Local dDtIni
Local dDtPrP
Local lLerSRC	 		:= .F.
Local lLeuApd			:= .F.
Local lSindicato		:= .F.
Local lTemPerFer		:= Type("aPerFerias") == "A"
Local nDfV 				:= 0
Local nDfp 				:= 0
Local cMesFol			:= ""
Local X 				:= 0  
Local Y  				:= 0 
Local nVez 				:= 0 
Local n13  				:= 0 
Local nM  				:= 0 
Local nX               	:= 0
local nI				:= 0
Local nZ  				:= 0
Local uRet				:= .F.
Local cAnoMesIni		
Local cAnoMesFim
Local Ny				:= 0
Local dDtAux
Local cRot13o			:= _cRot131
Local cRotCalc			:= ""
Local nPosAfALic		:= 0
Local nBkpAfALic		:= 0	
Local cDtCompara 		:= ""	
Local aRGBAux			:= {}
Local aPerAtual			:= {}
Local cRotOrd           := fGetRotOrdinar()
Local cPdRGB			:= ""

//--Variaveis para Query SRD             
Local cQuery    := "" 		//Expressao da Query
Local lQuery    := .F. 		// Indica se a query foi executada
Local cAliasSRD := "SRD" 	//Alias da Query

Local cCodSRR 		:= "   "
Local cDiasAux		:= ""
Local nValorSRR 	:= 0
Local nHorasSRR 	:= 0
Local nTiposSRR 	:= 0
Local dDataSRR 		:= CtoD("//")
Local cRot,cPer,cAno,cMes
Local cVerbas_Aux 	:= ""
Local cLog 			:= ""
Local nFaltas13o	:= 0
Local aPdBkp    	:= {}
Local nPosAfQ2		:= 0
Local cModFunc		:= If (SRA->RA_REGIME == "2","GFP","GPE")
Local lContrInt		:= SRA->RA_TPCONTR== "3" .And. If(SRD->(ColumnPos( 'RD_CONVOC' )) > 0,.T.,.F.) .ANd. !FwIsInCallStack("CALMED") .And. !FwIsInCallStack("VER_MED")
Local nQtdAfAnt		:= 0

Private aMater         	:= {}
Private aFv				:= {}
Private aFp 			:= {}
Private a13 			:= {}
Private aAv				:= {}
Private aLM 			:= {}
Private aFerVen        	:= {}
Private a13Sala        	:= {}
Private aAviso         	:= {}
Private oFerVen
Private oFerPro
Private o13Sala
Private oAviso
Private oMater
Private lRefMed     	:= P_REFMED 
Private lMedOrig     	:= P_MEDORIG 
Private cTAfaFer    	:= GetMvRH( "MV_TAFAFER" )
Private dDtBasFim 		:= CtoD("")
Private nPosicaoChave  	:= ""
Private lRescCompl 		:= .F.
Private lMedHoras		:= .F.
//--Variaveis para carga das verbas de medias         
Private lAdmAno		:= .F. //Se funcionario foi admitido no ano e foi apos o dia 17/01 (utilizado na media do decimo terceiro)
Private aAumentos	:=	{}
Private aTarefa  	:= {}
Private cMesSrc		:= MesAno(dDt5) 
Private dDtLcFixo   := dDt5
Private aFerPro    	:= {}
Private cDataI[5]
Private cDataF[5]
Private dDataI[5]
Private dDataF[5]
Private aFixosMed := {}
Private aFixosPag := {}
Private cPer1			:= ""
Private cPer2			:= ""
Private cPer3			:= ""
Private cPer4			:= ""
Private cPerAte			:= ""
Private lDemCalc  		:= .F. 
Private lItemClVl 		:= GetMvRH( "MV_ITMCLVL", .F., "2" ) $ "1*3" // Define se trabalha com item e classe contabil
Private lFixosMed		:= .T.
Private dFimPer	  		:= CtoD("")
Private nMesesDir		:= 12

DEFAULT __lMemCalc := cPaisLoc == "BRA" .And. FindFunction("fMemCalc") .And. fMemCalc()
DEFAULT lHoJorva   := SRA->(COLUMNPOS( "RA_HOJORVA" )) > 0

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Memória de Cálculo									           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If __lMemCalc
	If !IsInCallStack("EXECROT")
		fAddMemLog("Função :" + Funname()+ " - " + ProcName(1),1,1)
	EndIf
	fAddMemLog("Parâmetros de entrada :",1,1)
	fAddMemLog("Data Base para Ferias Vencidas (dDt1):" + cValToChar(dDt1),1,2)
	fAddMemLog("Data Base para Ferias a vencer (dDt2):" + cValToChar(dDt2),1,2)
	fAddMemLog("Data Base para 13. Salario (dDt3) :" + cValToChar(dDt3),1,2)
	fAddMemLog("Data Base para Aviso Previo (dDt4) :" + cValToChar(dDt4),1,2)
	fAddMemLog("Data de Referencia para Calculo (dDt5) :" + cValToChar(dDt5),1,2)
	fAddMemLog("Salario hora (nSalh) :" + cValToChar(nSalh),1,2)
	fAddMemLog("Salario Minimo (Val_SalMin) :" + cValToChar(Val_SalMin),1,2)
	fAddMemLog("Se considerar Mes Atual para a media (lMesAtu) :" + cValToChar(lMesAtu),1,2)
	fAddMemLog("Considera Movto (lMovto) :" + cValToChar(lMovto),1,2)
	fAddMemLog("Media de Faltas (lFaltas) :" + cValToChar(lFaltas),1,2)
	fAddMemLog("Data Base para Lic. Maternidade (dDt6) :" + cValToChar(dDt6),1,2)
	fAddMemLog("Data de Referencia p/Calc.13Salario (relatorio) (dDt7) :" + cValToChar(dDt7),1,2)
	fAddMemLog("cTpAfast :" + cValToChar(cTpAfast) + " (Lic. Maternid. é avaliada automaticamente se houver)",1,2)
	fAddMemLog("Salario hora incorporado (nSalhInc) :" + cValToChar(nSalhInc),1,2)
	fAddMemLog("Considera Movto 13 (lMovto13) :" + cValToChar(lMovto13),1,2)
EndIf

DEFAULT cTpAfast := "Q"

lJorVar	 := If(lJorVar  == Nil , .F. , lJorVar)

lMedHoras	:= lJorVar
lDemCalc	:= If(lDemonCalc == Nil, .F. , lDemonCalc) 

// Busca o Ano/Mes em aberto no Roteiro Ordinario, para substituir o parametro MV_FOLMES
If SRA->RA_CATFUNC $ "A*P" 
    cRot := _cRotAut 
Else 
	cRot := If((lGestPubl .AND. SRA->RA_REGIME == '2'), cRotOrd, _cRotFol ) 
EndIf

If !Empty(cRot) .And. fGetPerAtual( @aPerAtual, xFilial("RCH", SRA->RA_FILIAL), cProcesso, cRot )
	cPer 	:= aPerAtual[1,1]
	cAno 	:= aPerAtual[1,5]
	cMes 	:= aPerAtual[1,4]
	dFimPer:= aPerAtual[1,7]
Else
	cPer  	:= gp240RetCont("RCH", 4, xFilial("RCH", SRA->RA_FILIAL) + cProcesso + cRot, "RCH_PER"		, "Empty(RCH->RCH_DTFECH) .AND. (RCH->RCH_PROCES == '" + cProcesso + If( Empty(cRot),"", "') .AND. (RCH->RCH_ROTEIR == '" + cRot ) + "') .AND. RCH->RCH_PERSEL == '1' ")
	cAno  	:= gp240RetCont("RCH", 4, xFilial("RCH", SRA->RA_FILIAL) + cProcesso + cRot, "RCH_ANO"		, "Empty(RCH->RCH_DTFECH) .AND. (RCH->RCH_PROCES == '" + cProcesso + If( Empty(cRot),"", "') .AND. (RCH->RCH_ROTEIR == '" + cRot ) + "') .AND. RCH->RCH_PERSEL == '1' ")
	cMes    := gp240RetCont("RCH", 4, xFilial("RCH", SRA->RA_FILIAL) + cProcesso + cRot, "RCH_MES"		, "Empty(RCH->RCH_DTFECH) .AND. (RCH->RCH_PROCES == '" + cProcesso + If( Empty(cRot),"", "') .AND. (RCH->RCH_ROTEIR == '" + cRot ) + "') .AND. RCH->RCH_PERSEL == '1' ")
	If Empty( cPer )
		cPer  	:= gp240RetCont("RCH", 1, xFilial("RCH", SRA->RA_FILIAL) + cProcesso, "RCH_PER"		, "Empty(RCH->RCH_DTFECH) .AND. (RCH->RCH_PROCES == '" + cProcesso + "') .AND. RCH->RCH_PERSEL == '1'  ")
		cAno  	:= gp240RetCont("RCH", 1, xFilial("RCH", SRA->RA_FILIAL) + cProcesso, "RCH_ANO"		, "Empty(RCH->RCH_DTFECH) .AND. (RCH->RCH_PROCES == '" + cProcesso + "') .AND. RCH->RCH_PERSEL == '1' ")
	   	cMes    := gp240RetCont("RCH", 1, xFilial("RCH", SRA->RA_FILIAL) + cProcesso, "RCH_MES"		, "Empty(RCH->RCH_DTFECH) .AND. (RCH->RCH_PROCES == '" + cProcesso + "') .AND. RCH->RCH_PERSEL == '1' ")
		dFimPer	:= gp240RetCont("RCH", 1, xFilial("RCH", SRA->RA_FILIAL) + cProcesso, "RCH_DTFIM"		, "Empty(RCH->RCH_DTFECH) .AND. (RCH->RCH_PROCES == '" + cProcesso + If( Empty(cRot),"", "') .AND. (RCH->RCH_ROTEIR == '" + cRot ) + "') .AND. RCH->RCH_PERSEL == '1' ")
	EndIf
EndIf

Private cFolMes := cAno+cMes
Private lMdMesRes	:= .F.
Private lMdAviMes   := .F.

cServer := TcSrvType()   

cTipoRot := If(Type("cTipoRot") == "U" .or. cTipoRot == Nil, "",cTipoRot)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se e Rescisao Complementar							 |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cTipoRot == "4"  .and. Type("cCompl") # "U" .and. cCompl == "S"
	lRescCompl := .T.
	cFolMes    := cMesSrc
	dFimPer	   := dDt5
	If dDt3 == NIL
		dDt3 := dDataDem
	EndIf
ElseIf cTipoRot == "4" //"RES"
	cMesFol := cAno+cMes
	If MesAno(dDt5) > cMesFol
		lLerSrc := .T.
		cMesSrc	:= cMesFol
	EndIf
	dFimPer	   := dDt5		                 
ElseIf cTipoRot == "6" .And. lMovto .And. lMesAtu
		lLerSrc := .T.
EndIf 

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Criar Arquivo Temporario Para Medias Caso Nao Exista         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Cria_Trp()

dbSelectArea("SRD")
If dDt5 == NIL
	dDt5 := dDataBase
EndIf

dDt5Bkp := dDt5

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis Privadas do Programa                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private vTab           := {}
Private nFerPropFaltas := nVal1BasPen := nVal1Parc13 :=  nVal113  := 0 
Private aSind		   := {}
Private aValBenef      := {}
Private lVez           := .F.
Private lAltPerProp	   := .F.
Private cFlim
Private cIlim
Private nQualmed[6]
Private nQualMedPE[6]
Private n13Faltas[12]
Private nTHoras		,nTVOrig	,nTVAtua    := 0
Private nMHoras		,nMVOrig	,nMVAtua    := 0
Private nDHoras		,nDVOrig	,nDVAtua    := 0
Private nHETHoras	,nHETVOrig	,nHETVAtua  := 0
Private nHEMHoras	,nHEMVOrig	,nHEMVAtua  := 0
Private nHEDHoras	,nHEDVOrig	,nHEDVAtua  := 0
Private nNHETHoras	,nNHETVOrig	,nNHETVAtua := 0
Private nNHEMHoras	,nNHEMVOrig	,nNHEMVAtua := 0
Private nNHEDHoras	,nNHEDVOrig	,nNHEDVAtua := 0
// Variaveis Grupo 0 (Horista - Jornada Variavel)
Private nGR0THoras,nGR0TVOrig, nGR0TVAtua	:= 0
Private nGR0MHoras,nGR0MVOrig,nGR0MVAtua	:= 0
Private nGR0DHoras,nGR0DVOrig,nGR0DVAtua	:= 0
Private lTemJorVar	:= ( SRA->( Type("RA_HOJORVA") ) != "U" ) .And. ( SRA->RA_CATFUNC == "H" .And. SRA->RA_HOJORVA == "1" )
Private nTTHoras	,nTTVOrig	,nTTVAtua   := 0
Private nTMHoras	,nTMVOrig	,nTMVAtua   := 0
Private nTDHoras	,nTDVOrig	,nTDVAtua   := 0
Private cPdComiss	:= ""
Private dDtAv 		:= dDt4
Private nDTrab 		:= If(lRescCompl, dDt3, dDt5) - SRA->RA_ADMISSA
Private cMenor 		:= "      "    //Menor Periodo para montagem da Query
Private cMaior 		:= "      "    //Maior Periodo para montagem da Query
Private nSalMedHr				   //Utilizada no ponto de entrada para alterar salario de calculo das medias
Private aAuxAfast := {} 

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Parametro que define o periodo inicial para busca das medias ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
// 1 - Continua no modo padrao, buscando a partir do mes inicial do periodo
// 2 - Busca a partir do mes subsequente ao inicio do periodo
// 3 - Se no mes inicial do periodo houver mais de 14 dias trabalhados,
//	   utiliza o proprio mes, caso contrario utiliza o mes seguinte.
Private cBuscaMedia 	:= P_BUSMEDI 
Private cMedDir        	:= P_MEDDIREN
Private nComiss        	:= P_COMISSA
Private cMed13AnoC	   	:= P_M13ANOC 
Private nMesesPer	   	:= P_NMESPER

//Se o parametro MV_MEDDIRE estiver ativo, o MV_M13ANOC sera sempre 1.
If cMedDir == "S" .And. cMed13AnoC <> "1"
	cMed13AnoC := "1"
Endif

lMesAtu	 := If(lMesAtu == Nil , .F. , lMesAtu)
lMovto	 := If(lMovto  == Nil , .F. , lMovto)
lFaltas  := If(lFaltas == Nil , .F. , lFaltas)

//Mnemonico permite que valores informados na rescisao sejam considerados para a Media de Aviso Previo
//Seu uso esta restrito a Comissionados e Tarefeiros que ainda nao completaram 1 ano de servico.
lMdMesRes := If( Type("P_LMDAVMES") # "U", P_LMDAVMES, .F. ) .And. lMesAtu .And. (SRA->RA_CATFUNC $ "C*T" .or. lJorVar) // consideraremos também para horista jornada variavel
lMdAviMes := If( Type("P_LMDAVRES") # "U", P_LMDAVRES, .F. ) .And. lMesAtu .And. !(SRA->RA_CATFUNC $ "C*T" .or. lJorVar) //Mnemonico utilizado em complementação ao primeiro, apenas para quem não é comissionado e tarefeiro

DEFAULT lMovto13 	:= lMovto
DEFAULT lGpMedTar 	:= ExistBlock("GPMEDTAR")
DEFAULT lGPXMEDPD	:= ExistBlock("GPXMEDPD")
DEFAULT lGPXCOMIS	:= ExistBlock("GPXCOMIS")
DEFAULT lGpMedTrp 	:= ExistBlock("GPMEDTRP")
DEFAULT lGpMedPer 	:= ExistBlock("GPMEDPER")
DEFAULT lGpMedArr   := ExistBlock("GPMEDARR")
DEFAULT lGpMovSrc 	:= ExistBlock("GPMOVSRC")
DEFAULT lGpavosMed 	:= ExistBlock("GPAVOSMED")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ajusta o conteudo da variavel cMed13oAnoC                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cMed13AnoC == "1"
	cMed13AnoC	:= "S"
ElseIf cMed13AnoC == "2"
	cMed13AnoC	:= "N"
EndIf
If lTemJorVar
	gp140GrpVerb( xFilial("SRV"),@cVerbas_Aux,"0",.F.)
EndIf

Afill( n13Faltas , 0 )
Afill( cDataF , Space(6) )
Afill( cDataI , "999999" )
Afill( dDataF , CtoD("") )
Afill( dDataI , Ctod("") )

fop[ 1 ] := If( dDt1 == NIL .OR. Empty(dDt1), .F. , .T. )
fop[ 2 ] := If( dDt2 == NIL .OR. Empty(dDt2), .F. , .T. )
fop[ 3 ] := If( dDt3 == NIL .OR. Empty(dDt3), .F. , .T. )
fop[ 4 ] := If( dDt4 == NIL .OR. Empty(dDt4), .F. , .T. )
fop[ 5 ] := If( dDt6 == NIL .OR. Empty(dDt6), .F. , .T. )
fop[ 6 ] := If( dDt7 == NIL .Or. Empty(dDt7), .F. , .T. )

lpritab := "0"

//--Chamada Execblock para gravar Movimento Mensal no SRD
If lGpMovSrc
   nSalMedHr := nSalh
   If EXECBLOCK("GPMOVSRC",.F.,.F.) == .T.
	   lMesAtu := .T.
   EndIf
   nSalh := nSalMedHr
EndIf

//--Ponto de Entrada para definir as demais verbas de comissionados a serem 
//--calculadas a serem calculadas pela media dos maiores valores.
If lGPXCOMIS
	cPdComiss	:= EXECBLOCK("GPXCOMIS",.F.,.F.)
	If Type("cPdComiss") # "C"
		cPdComiss	:= ""
	EndIf
EndIf
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Carrega informacoes atuais do Funcionario em aChave.          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aChave[ 01 , 01 ] :=  cEmpAnt		; aChave[ 01 , 02 ] := cChave 
aChave[ 01 , 03 ] :=  SRA->RA_CC	; aChave[ 01 , 04 ] := cEmpAnt
aChave[ 01 , 05 ] :=  cChave 		; aChave[ 01 , 06 ] := SRA->RA_CC
aChave[ 01 , 07 ] :=  dDataBase
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Seleciona o Arquivo de Transferencias e Retorna Todas as Trans³
³ferencias do Funcionario.                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If fTransf(@aChave,,,,,,,.T.)
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Grava em aTransf a Situacao Atual do Funcionario              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If aScan( aChave,{ |x| ( x[1] + x[2] ) == ( cEmpAnt + cChave ) } ) == 0 .OR. ;
	   aScan( aChave,{ |x| cEmpAnt != x[4] } ) > 0	
    	SRA->( aAdd(aChave,{									 ;
    						cEmpAnt								,; // 01 - Empresa Origem
    						cChave            					,; // 02 - Filial + Matricula Origem  
    						RA_CC								,; // 03 - Centro de Custo Origem
    						cEmpAnt								,; // 04 - Empresa Destino
    						cChave              				,; // 05 - Filial + Matricula Destino
    						RA_CC								,; // 06 - Centro de Custo Destino
							( aChave[ Len( aChave ) , 7 ] + 1 ) ,; // 07 - Data da Transferencia
                   		    ""						  			,; // 08 - Filial de Origem
                      		""									,; // 09 - Matricula de Origem
                            ""									,; // 10 - Filial de Destino
                            ""									,; // 11 - Matricula de Destino
                            ""									,; // 12 - Mes/Ano ( Ano/Mes ) da Transferencia 	
                            0									 ; // 13 - Mes/Ano ( Ano/Mes ) da Transferencia 	
    						}									 ;
    				)											 ;
    		  )
    EndIf
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Ordena o Array aChave em Ordem Decrescente de Data            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If Len( aChave ) > 0 .AND. Len( aChave[1] ) > 12
		aSort( aChave ,,, { |x,y| DTOS(x[7]) + StrZero(x[13],15) > DTOS(y[7]) + StrZero(y[13],15) } )
	Else
		aSort( aChave ,,, { |x,y| x[7] > y[7] } )
	EndIf
EndIf

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Memória de Cálculo									           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If __lMemCalc
	For nI := 1 To Len(aChave)
		If !( aChave[nI][01] + aChave[nI][02] + aChave[nI][03] == aChave[nI][04] + aChave[nI][05] + aChave[nI][06] )
			fAddMemLog("Dados Funcionário / Transferência : " + alltrim(str(nI)) ,1,1)
			fAddMemLog("Empresa Origem / Destino :" + aChave[nI][01] + "/" + aChave[nI][04] ,1,2)
	    	fAddMemLog("Filial + Matricula Origem / Destino :" + aChave[nI][02] + "/" + aChave[nI][05] ,1,2)
	    	fAddMemLog("Centro de Custo Origem / Destino :" + aChave[nI][03] + "/" + aChave[nI][06] ,1,2)
			fAddMemLog("Data da Transferencia :" + cValToChar(aChave[nI][07])  ,1,2)
		EndIf
	Next nI
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Parametro Sindicato                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea( "RCE" )
If dbSeek( xFilial("RCE", SRA->RA_FILIAL) + SRA->RA_SINDICA )
	Aadd( aSind, { "", RCE->RCE_MED01 } )
	Aadd( aSind, { "", If( cPaisLoc=="ARG", 0, RCE->RCE_MED02 ) } )
	Aadd( aSind, { "", If( cPaisLoc=="ARG", 0, RCE->RCE_MED03 ) } )
	Aadd( aSind, { "", If( cPaisLoc=="ARG", 0, RCE->RCE_MED04 ) } )
	Base_medias := ""
	lSindicato	:= .T.
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Dados Sindicato : " + SRA->RA_SINDICA + " - " + RCE->RCE_DESCRI ,1,1)
	EndIf

	For nS := 1 To 4
		aSind[nS,1] := If(aSind[nS,2] > 0, "S", "N")
		Base_medias += aSind[nS,1]
		//Memória de Cálculo
		If __lMemCalc
			fAddMemLog("Meses para Media " + Alltrim(Str(nS)) +"Periodo (RCE->RCE_MED"+ Alltrim(Str(nS)) + ") : " + cValToChar(aSind[nS,2]) ,1,2)
		EndIF
	Next nS
Else
	Aadd(aSind,{"N",0})
	Aadd(aSind,{"N",0})
	Aadd(aSind,{"N",0})
	Aadd(aSind,{"N",0})
	Base_medias := "NNNN"
	//Memória de Cálculo
	If __lMemCalc
		fAddMemLog("SEM Sindicato " ,1,1)
	EndIf
EndIf
//Memória de Cálculo
If __lMemCalc
	fAddMemLog("Base_medias (Base_medias) :" + cValToChar(Base_medias) ,1,2)
EndIF

dbSelectArea( "SRD" )

cAnMe := MesAno(If(Empty(dDt5), dDataBase, dDt5))
cAM13 := MesAno(If(Empty(dDt3), dDataBase, dDt3))
cIlim := MesAno(SRA->RA_ADMISSA)
nMes  := Month(dDt5)
nAno  := Year(dDt5)
cFlim := SubStr(StrZero( nAno , 4 ) , 3 , 2 ) + StrZero( nMes , 2 )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ferias Vencidas/Proporcionais - Definicao Data Inicial/Final ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If (fop[1] == .T.) .OR. (fop[2] == .T.)

	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Ferias Vencidas/Proporcionais" ,1,1)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Verifica a existecia do array aTabFer p/ o calculo de ferias |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Type("aTabFer") # "A" .Or. Len(aTabFer) == 0 .Or. (cPaisLoc == "PER" .And. Type("aTabFer[5]") == "U")
		aTabFer := {}
		If cPaisLoc == "PER"
			fRetTab(@aTabFer,"S017",,,fCalcFimAq(Iif(dDataRef==Nil,dDataBase,dDataRef)),)
		Else
			fTab_Fer(@aTabFer)
		EndIf
	EndIf
	
	If cPaisLoc == "PER"
		If SRA->RA_MEIOPER == "1" //# Part Time
			nDiasFer := aTabFer[6]
		Else
			nDiasFer := aTabFer[5]
		EndIf
	Else
		nDiasFer := aTabFer[4]
	EndIf
	//Memória de Cálculo
	If __lMemCalc
		fAddMemLog("Tabela de férias - Fator de férias(nDiasFer): " + cValToChar(nDiasFer) ,1,2)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Achar Dias de Ferias Vencidas e Proporcionais 				 |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nDfV := nDfp := 0
	
	If cTipoRot == "3" .And. (lDissidio .Or. IsInCallStack("fCDifFerias")) .And. cMedDir == "N" //Esta calculando roteiro de férias no dissidio, periodo de férias já foi fechado, neste caso, utiliza osdias vencidos gravados na SRH
		nDFv := M->RH_DFERVEN
		If nDFv <= 0
			nDFp := M->RH_DFERVEN
		EndIf
	ElseIf cTipoRot == "4" .and. lRescCompl //Se for rescisão complementar, pega os dias de férias vencidas e proporcionais do cabeçalho
		nDFv := M->RG_DFERVEN
		nDFp := M->RG_DFERPRO
	Else
		Calc_Fer(aClone(aPerFerias),If(cTipoRot == "3", dDt3, dDt5),@nDFv,@nDFp)
	EndIf
	
	If nDFv > 0
		nMes := Round( nDFv / nDiasFer, 2 )
	Else                	
		nMes := Round( nDFp / nDiasFer, 2 )
	EndIf
	
	//Memória de Cálculo
	If __lMemCalc
		fAddMemLog("Dias Férias vencidas (nDFv): " + cValToChar(nDFv) ,1,2)
		fAddMemLog("Dias Férias Proporcionais (nDFp): " + cValToChar(nDFp) ,1,2)
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//| Verifica se existe dias de ferias vencidas pendente          |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cAliasAnt   := Alias()
	dFimVenPend := CTOD("")
	nDiasVenPen := 0
	dbSelectArea( "SRF" )

	If SRF->RF_FILIAL+SRF->RF_MAT <> SRA->RA_FILIAL+SRA->RA_MAT
		SRF->( dbSetOrder( 2 ) )
		SRF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+fGetCodFol("0072")+Left( DToS(dDt1),6 ) ) )
		SRF->( dbSetOrder( 1 ) )
		DbSelectArea(cAliasAnt)
	EndIf
	
	If SRF->RF_DVENPEN > 0 .AND. !Empty(SRF->RF_IVENPEN)
		nDiasVenPen := SRF->RF_DVENPEN
		//--Se houver dias pendentes o inicio do periodo deve ser o inicio pendente		
		dDt1		:= SRF->RF_IVENPEN
		dFimVenPend := SRF->RF_FVENPEN
		nMesesDir	:= Round( SRF->RF_DIASDIR / nDiasFer, 2 )
	EndIf

	If nMes >= 12 .OR. nDFv > 0 .OR. nDiasVenPen > 0
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta Array Com Todos os Periodos de Ferias Vencidas		 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dDtIni  := dDt1
		If cPaisLoc == "PER"
			nPerFer := Min(Max(Int(nDFv/nDiasFer),1),9) // Calcula o numero de periodos
		Else
			nPerFer := Min(Max(Int(nDFv/aTabFer[3]),1),9) // Calcula o numero de periodos
		EndIf
		For nCntF := 1 To nPerFer
			If Empty(dFimVenPend)
				dDtPrP := fCalcFimAq(dDtIni)+1  // Inicio do Proximo Periodo
			Else
				dDtPrP := dFimVenPend+1         // Inicio do Proximo Periodo
				dFimVenPend := CTOD("")
			EndIf
			dDtFim := If (Empty(dDtBasFim), dDtPrP - Day(dDtPrP),dDtBasFim)  // Mês Anterior ao Inicio do Período"
			Aadd(aPerVenc,{ MesAno(dDtIni), MesAno(dDtFim), 0, dDtIni, dDtFim, AnoMes(dDtPrP) } )
			dDtIni := dDtPrP
		Next nCntF

		// Ferias Vencidas
		cDataI[1] := aPerVenc[1,1]
		cDataF[1] := If( nMesesPer == 0, aPerVenc[Len(aPerVenc),2], aPerVenc[1,2] )
		dDataI[1] := aPerVenc[1,4]
		dDataF[1] := If( nMesesPer == 0, aPerVenc[Len(aPerVenc),5], aPerVenc[1,5] )
		// Ferias Proporcionais
     	cDataI[2] := If(Val(Right(cDataF[1],2))+1 == 13,StrZero(Val(Left(cDataF[1],4))+1,4)+"01",Left(cDataF[1],4)+StrZero(Val(Right(cDataF[1],2))+1,2))
		cDataF[2] := StrZero(Year(dDt5),4)+StrZero(Month(dDt5),2)
		dDataI[2] := dDataF[1] + 1
		dDataF[2] := dDt5
		
		fop[1]    := .T.
		If dDataF[2] > dDataI[2]
			fop[2]    := .T.
			If ( dDataF[2] - dDataI[2] ) - 1 > ( aTabFer[1] * aTabFer[3] )
				//Se a data do período de férias proporcionais ativo for maior que a data para apuração de médias de férias proporcionais
				If ( nCntF := aScan(aPerFerias, {|x| x[4] > 0 .and. x[8] == "1"}) ) > 0 .and.  aPerFerias[nCntF,1] > dDataI[2]
					dDataI[2] := aPerFerias[nCntF,1]
					cDataI[2] := AnoMes(dDataI[2])
					dDtIni := dDataI[2]
				EndIf
			EndIf
		EndIf
		
		// Inicio do Periodo de Ferias Proporcionais
		dDt2 := dDtIni
	Else
		If nMes < 1
			fop[1] := .F.
			fop[2] := .F.
		Else
			fop[1]    := .F.
			fop[2]    := .T.
			cDataI[2] := StrZero(Year(dDt1),4)+StrZero(Month(dDt1),2)
			cDataF[2] := StrZero(Year(dDt5),4)+StrZero(Month(dDt5),2)
			dDataI[2] := dDt1
			dDataF[2] := dDt5
			cDataI[1] := "      "
			cDataF[1] := "      "
			dDataI[1] := Ctod("")
			dDataF[1] := Ctod("")
			dDt2       := dDt1  // incluido
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Altera o inicio e o fim da busca das medias 				 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If  cBuscaMedia == "2" .OR.;
	  ( cBuscaMedia == "3" .AND. F_ULTDIA( dDt1 )-Day( dDt1 )+1 < 15 )
		// Ferias Vencidas
		If ! Empty( cDataI[1] ) .AND. ! Empty( cDataF[1] )
			cDataI[1] := If(Val(SubStr(cDataI[1],5,2))+1 == 13,StrZero(Val(SubStr(cDataI[1],1,4))+1,4)+"01",SubStr(cDataI[1],1,4)+StrZero(Val(SubStr(cDataI[1],5,2))+1,2))
			cDataF[1] := If(Val(SubStr(cDataF[1],5,2))+1 == 13,StrZero(Val(SubStr(cDataF[1],1,4))+1,4)+"01",SubStr(cDataF[1],1,4)+StrZero(Val(SubStr(cDataF[1],5,2))+1,2))
			dDataI[1] := MonthSum( dDataI[1] , 1 )
			dDataF[1] := MonthSum( dDataF[1] , 1 )
        EndIf
        // Outros Periodos de Ferias Vencidas
        For k := 1 To Len(aPerVenc)
   			aPerVenc[k,1] := If(Val(SubStr(aPerVenc[k,1],5,2))+1 == 13,StrZero(Val(SubStr(aPerVenc[k,1],1,4))+1,4)+"01",SubStr(aPerVenc[k,1],1,4)+StrZero(Val(SubStr(aPerVenc[k,1],5,2))+1,2))
   			aPerVenc[k,2] := If(Val(SubStr(aPerVenc[k,2],5,2))+1 == 13,StrZero(Val(SubStr(aPerVenc[k,2],1,4))+1,4)+"01",SubStr(aPerVenc[k,2],1,4)+StrZero(Val(SubStr(aPerVenc[k,2],5,2))+1,2))
        Next k
        
		// Ferias Proporcionais
		If !Empty( cDataI[2] ) .AND. cDataI[2] < cDataF[2]
			cDataI[2]   := If(Val(SubStr(cDataI[2],5,2))+1 == 13,StrZero(Val(SubStr(cDataI[2],1,4))+1,4)+"01",SubStr(cDataI[2],1,4)+StrZero(Val(SubStr(cDataI[2],5,2))+1,2))
			dDataI[2] 	:= MonthSum( dDataI[2] , 1 )
            lAltPerProp := .T.
		EndIf
	EndIf

EndIf

Afill(nQualmed,12)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula os Periodos para o Funcionarios                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For x = 1 TO 5
	If fop[x] = .T. .and. SRA->RA_TPCONTR <> "3" .And. !(cPaisLoc == "BRA" .And. SRA->RA_CATEFD $ '107/108') //Se for contrato intermitente, calcula sempre por 12
		If cTipoRot == "4" .And. cCompl == "S" 
			If x == 3
				dDt5 := dDt3
			Else
				dDt5 := dDt5Bkp
			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ FUNCIONARIO TEM MAIS DE 1 ANO                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (dDt5 - SRA->RA_ADMISSA >= 365 .And. x # 1) .Or. (x = 1 .And. nMes >= 12) .Or.;
			 ( x = 1 .And. nDiasVenPen > 0 ) .Or. ( x = 1 .And. nDFv > 0 ) .Or. (x == 3 .And. Year(dDt5) <> Year(SRA->RA_ADMISSA))   
			If x = 1      // FERIAS VENCIDAS
				nqualmed[ x ] := DIFDATA_MES( dDt1, If(cTipoRot == "3" .Or. (cTipoRot == "4" .And. cCompl == "S"), dDt3, dDt5) , x , .T. )
			ElseIf x = 2  // FERIAS A VENCER
				If GetMvRH("MV_DTMDFER",,"1") == "1" .And. lMesAtu .and. cMedDir <> "S" .and. cTipoRot <> "4"
					nqualmed[ x ] := DateDiffMonth( dDt2, If(cTipoRot == "3"  .Or. (cTipoRot == "4" .And. cCompl == "S") , dDt3, dDt5) ) + 1
					nqualmed[ x ] := Min(aTabFer[1] , nqualmed[ x ])
				Else				
					nqualmed[ x ] := Abs(DIFDATA_MES( dDt2, If(cTipoRot == "3"  .Or. (cTipoRot == "4" .And. cCompl == "S") , dDt3, dDt5) , x , .T. ))
				EndIf
			ElseIf x = 3  // 13§ SALARIO   
				If lRefMed 	
					nqualmed[ x ] := DIFDATA_MES( CTOD("01/01/"+Str(Year(If(cTipoRot == "4" .And. cCompl == "S", dDt3, dDt5)),4) , "DDMMYY" ) , If(!Empty(dDt7),dDt7,dDt3) , x , .T. )
					nqualmed[ 6 ] := DIFDATA_MES( CTOD("01/01/"+Str(Year(If(cTipoRot == "4" .And. cCompl == "S", dDt3, dDt5)),4) , "DDMMYY" ) , dDt3 , x , .T. )
				Else
					nqualmed[ x ] := DIFDATA_MES( CTOD("01/01/"+Str(Year( Max(dDt3, IIf(cTipoRot == "4" .And. cCompl == "S",dDt3,dDt5))),4) , "DDMMYY" ) , dDt3 , x , .T. )
					If Type("P_INCCOMPL") != "U" .And. P_INCCOMPL
						DDTPESQ1 := MAX( SRA->RA_ADMISSA, CTOD("01/01/"+SUBSTR(DTOS(dDt5),1,4), "DDMMYY") )
						FRETAFAS(DDTPESQ1,CTOD("31/12/"+SUBSTR(DTOS(dDt5),1,4), "DDMMYY"),"13",@NAVOSAF,,,)
						nqualmed[ x ] := nqualmed[ x ] - NAVOSAF + nAvosMat
					EndIf
				EndIf	

	           	if !lJorVar
	           		lMdMesRes := .F.
	           	Endif				
			ElseIf x = 4  // RESCISAO - AVISO PREVIO
				nqualmed[ x ] := DIFDATA_MES(SRA->RA_ADMISSA, dDt4 , x , dDt4 - SRA->RA_ADMISSA >= 365 )
           	EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ FUNCIONARIO TEM MENOS DE 1 ANO                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Else
			If x = 1      // FERIAS VENCIDAS
				nqualmed[ x ] := 0
			ElseIf x = 2  // FERIAS A VENCER
				nqualmed[ x ] := DIFDATA_MES( dDt2, If(cTipoRot == "3" .Or.(cTipoRot == "4" .And. cCompl == "S"), dDt3, dDt5) , x , .F. )				
			ElseIf x = 3  // 13§ SALARIO
				If Year(dDt5) == Year(SRA->RA_ADMISSA)              
					If lRefMed 
						nqualmed[ x ] := DIFDATA_MES( SRA->RA_ADMISSA , If(!Empty(dDt7),dDt7,dDt3) , x , .F. )
						nqualmed[ 6 ] := DIFDATA_MES( SRA->RA_ADMISSA , dDt3 , x , .F. )
					Else
						nqualmed[ x ] := DIFDATA_MES( SRA->RA_ADMISSA , dDt3 , x , .F. )	
					EndIf	
				Else
					If lRefMed 
						nqualmed[ x ] := DIFDATA_MES( CTOD("01/01/"+Str(Year(If(cTipoRot == "4" .And. cCompl == "S", dDt3, dDt5)),4) , "DDMMYY" ) , If(!Empty(dDt7),dDt7,dDt3), x , .F. )						
						nqualmed[ 6 ] := DIFDATA_MES( CTOD("01/01/"+Str(Year(If(cTipoRot == "4" .And. cCompl == "S", dDt3, dDt5)),4) , "DDMMYY" ) , dDt3 , x , .F. )
					Else
						nqualmed[ x ] := DIFDATA_MES( CTOD("01/01/"+Str(Year(dDt5),4) , "DDMMYY" ) , dDt3 , x , .F. )
						If Type("P_INCCOMPL") != "U" .And. P_INCCOMPL
							DDTPESQ1 := MAX( SRA->RA_ADMISSA, CTOD("01/01/"+SUBSTR(DTOS(dDt5),1,4), "DDMMYY") )
							FRETAFAS(DDTPESQ1,CTOD("31/12/"+SUBSTR(DTOS(dDt5),1,4), "DDMMYY"),"13",@NAVOSAF,,,)
							nqualmed[ x ] := nqualmed[ x ] - NAVOSAF + nAvosMat
						EndIf
					EndIf
				EndIf

			ElseIf x = 4  // RESCISAO - AVISO PREVIO
				nqualmed[ x ] := DIFDATA_MES( SRA->RA_ADMISSA , dDt4 , x , .F. )
			EndIf
		EndIf
		// Licenca Maternidade
		If x = 5  
			nqualmed[ x ] := If (SRA->RA_CATFUNC $ "C*T",P_MCOMISS,6)
		EndIf
		//Memória de Cálculo
		If __lMemCalc
			fAddMemLog("Divisor da Média (nqualmed[" +cValtoChar(x) + "]) : " +  cValToChar(nqualmed[ x ]) ,1,2)
		EndIf
	EndIf
Next x

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ 13§ Salario - Definicao da Data Inicial e Final              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If fop[3] = .T.
	cDataI[3] := StrZero(Year(dDt3),4)+"01"
	cDataF[3] := StrZero(Year(dDt3),4)+StrZero(Month(dDt3),2)
	dDataI[3] := StoD(cDataI[3] + "01")
	dDataF[3] := StoD(cDataF[3] + StrZero(Last_Day(StoD(cDataF[3]+"01")),2))
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Rescis„o - Definicao da Data Inicial e Final                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF fop[4] = .T.
	If  lMesAtu
		dData	:= YearSub( dDt4, 1 )
		dData	:= MonthSum( dData, 1 )
		cDataI[4] := AnoMes( dData )
		cDataF[4] := AnoMes( dDt4 )
		dDataI[4] := dData
		dDAtaF[4] := dDt4
	Else
		nMes := Month(dDt4)
		nAno := Year(dDt4)
		cDataI[4] := StrZero(Year(dDt4)-1,4)+StrZero(Month(dDt4),2)
		nMes --
		If nMes < 1
			nMes := 12
			nAno --
		Endif
		cDataF[4] := StrZero(nAno,4)+StrZero(nMes,2)
		dDataI[4] := StoD(cDataI[4]+"01")
		dDataF[4] := StoD(cDataF[4] + StrZero(Last_Day(StoD(cDataF[4]+"01")),2))	
	EndIf
EndIf
      
If fop[5]
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³	Busca data do inicio e retorno do afastamento por motivo de licenca maternidade ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cTipAfas := ""
	fRetAfas(StoD(AnoMes(dDt6)+"01"), dDt6 , , , , ,@aAfast )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³	Monta data inicial e final da busca das medias  			  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	If ( nPosAfQ := aScan( aAfast,{ |X| cTpAfast $ X[16] } ) ) > 0
		nqualmed[ 5 ] := Posicione("RCM",1,xFilial("RCM")+aAfast[nPosAfQ,13],"RCM_MESMED")
		cAnoMesIni := StrZero(Year(aAfast[nPosAfQ,3]),4) + StrZero(Month(aAfast[nPosAfQ,3]),2)
		cDiasAux  := StrZero(Day(aAfast[nPosAfQ,3]),2)
		//Instrucao Normativa 45
		//Se a licenca maternidade se iniciou ao termino de outro afastamento, sem ter trabalhado ao menos 1 dia,
		//as medias deverao ser apuradas antes do periodo deste outro afastamento.
		aAuxAfast := Aclone(aAfast)
		fRetAfas(MonthSub(dDt6,6) ,aAfast[nPosAfQ,3] , , , , ,@aAfast )
		If cPaisLoc == 'BRA'
			If ( nPosAfQ := aScan( aAfast,{ |X| cTpAfast $ X[16] } ) ) > 0
				nPosAfQ2 := aScan( aAfast,{ |X| 'Q2' $ X[16] } ) 
				nPosAfQ:=  IIf(nPosAfQ2 < nPosAfQ , nPosAfQ , nPosAfQ2)
				If ( nPosAfALic := aScan( aAfast,{ |X| X[4] == (aAfast[nPosAfQ,3]-1)  } ) ) > 0
					If "Q2" $ aAfast[nPosAfQ,16] .And. cTpAfast $ aAfast[nPosAfALic,16]  
						If (nBkpAfALic := aScan( aAfast,{ |X| X[4] == (aAfast[nPosAfALic,3]-1) } )) > 0
							nPosAfALic := nBkpAfALic 
						EndIf
					EndIf 
					For nI := 1 To Len(aAfast)
						If aAfast[nI,4] >= FirstDay(aAfast[nPosAfAlic,3]) .And. aAfast[nI,4] <= aAfast[nPosAfAlic,4]
							If Month(aAfast[nI,4]) == Month(aAfast[nPosAfAlic,3]) .And. Month(aAfast[nI,3]) == Month(aAfast[nI,4])
								nQtdAfAnt += aAfast[nI,4] - aAfast[nI,3]+1
							ElseIf aAfast[nI,4] >= FirstDay(aAfast[nPosAfAlic,3]) .And. aAfast[nI,4] <= aAfast[nPosAfAlic,4]
								nQtdAfAnt += (If(aAfast[nI,4] > LastDay(aAfast[nPosAfAlic,3]),LastDay(aAfast[nPosAfAlic,3]),aAfast[nI,4]) - If(aAfast[nI,3] < FirstDay(aAfast[nPosAfAlic,3]),FirstDay(aAfast[nPosAfAlic,3]),aAfast[nPosAfAlic,3])+1)	
							EndIf	
						EndIf
					Next

					//Instrucao Normativa 45 não se aplica a férias somente afastamentos por doença ou trabalho
					If nPosAfALic > 0 .And. aAfast[nPosAfALic, 13] != "001" .And. nQtdAfAnt >= Day(LastDay(aAfast[nPosAfALic,3]))
						cAnoMesIni := StrZero(Year(aAfast[nPosAfALic,3]),4) + StrZero(Month(aAfast[nPosAfALic,3]),2)
						cDiasAux  := StrZero(Day(aAfast[nPosAfALic,3]),2)
					EndIf
				Endif
			Endif
		Endif
		
		For Ny  := 1 To nqualmed[ 5 ]
			cAnoMesIni := If(Val(Right(cAnoMesIni,2))-1 == 0,StrZero(Val(Left(cAnoMesIni,4))-1,4)+"12",Left(cAnoMesIni,4)+StrZero(Val(Right(cAnoMesIni,2))-1,2))
			If Ny == 1
				cAnoMesFim := cAnoMesIni
			EndIf
		Next Ny
		If nqualmed[ 5 ] > 0
			cDataI[5] := cAnoMesIni
			cDataF[5] := cAnoMesFim
			dDataI[5] := StoD(cAnoMesIni + cDiasAux) 
			dDataF[5] := StoD(cAnoMesFim + cDiasAux)
		EndIf
	EndIf	
EndIf	
	
//--Carrega verbas com incidencia para Media 
If ( SRA->RA_CATFUNC == "H" .AND. lHoJorva .AND. SRA->RA_HOJORVA == "1" )
	Pd := {}
	If lMedHoras .and. !Empty(PdHRJorva)
		Pd := aClone(PdHRJorva)
	EndIf
	lJornadVar := .T.
ElseIf lJornadVar // Processou Jornada Variavel antes de Mensalista, preciso recarregar incidencias.
	Pd := {}
	lJornadVar := .F.	
EndIf

//Ponto de entrada para alterar a quantidade de avos para divisão das médias
If lGpavosMed
	nQualMedPE := Execblock("GPAVOSMED",.F.,.F.,nQualMed)
	If ValType(nQualMedPE) == "A" .And. Len(nQualMedPE) == 6
		nQualMed := nQualMedPE
	EndIf
EndIf
         
If cFilPd != FwxFilial("SRV", SRA->RA_FILIAL) .OR. Empty(Pd) .OR. _cRegFun != SRA->RA_REGIME
	cFilPd := FwxFilial("SRV", SRA->RA_FILIAL)	//#SRA->RA_FILIAL
	_cRegFun := SRA->RA_REGIME
	Pd := {}
	fCargaPro(cFilPd,@Pd,acodfol)
	If lMedHoras .and. ( SRA->RA_CATFUNC == "H" .AND. lHoJorva .AND. SRA->RA_HOJORVA == "1" )
		PdHRJorva := aClone(Pd)
	EndIf	
	_cRotFol	:= fGetCalcRot("1",cModFunc)
	_cRotAut	:= fGetCalcRot("9")
	_cRotRes	:= fGetCalcRot("4",cModFunc)
	_cRot131	:= fGetCalcRot("5",cModFunc)
	_cRot132	:= fGetCalcRot("6",cModFunc)
	_cRotQry	:= fSqlIn(_cRotFol + _cRot131 + _cRot132, 3)
EndIf 	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³  Carrega verbas que entram para medias                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
nPosFe := 0
nPos13 := 0
nPosAv := 0
nPosMater := 0
//Memória de cálculo
If lGPXMEDPD .And. __lMemCalc
	fAddMemLog("PONTO DE ENTRADA GPXMEDPD ATIVO" ,1,2)
EndIf

For X = 1 To Len(PD)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Desconsidera codigos de Base                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If RetValSRV( SubStr(Pd[X],1,3) , SRA->RA_FILIAL , "RV_TIPOCOD" ) == "3" .Or. lGPXMEDPD
		If lGPXMEDPD
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³-Inclusao de ponto de entrada para manipular as verbas a serem³
			//³ consideradas para a media.                                   ³
			//³-Neste momento o cadastro de verbas esta posicionado na verba ³
			//³ corrente e pode ser consultado.                              ³
			//³-ParamIxb[1] corresponde ao codigo da verba que esta sendo    ³
			//³ processada.                                                  ³
			//³-O Retorno tem que ser do tipo "Logico" .T. quando a verba    ³
			//³ tiver que ser considerada e .F. quando a verba tiver que ser ³
			//³ desprezada para o calculo das medias.                        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			uRet	:= Execblock("GPXMEDPD",.F.,.F.,{SubStr(Pd[X],1,3),PD})
			uRet	:= If(ValType(uRet)=="L",uRet,.F.)
			If !uRet
				Loop
			EndIf
		Else
			Loop
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Desconsidera codigos de Adicional por Tempo de Servico       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If SRA->RA_ADTPOSE # "N"
		If SubStr(Pd[X],1,3) $ cCodAdicTemSer
			Loop
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Desconsidera Periculosidade se Campo do Cadastro do Funcio - ³
	//³ nario (SRA->RA_PERICUL) # 0                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If SubStr(Pd[X],1,3) == aCodfol[36,1] .And. SRA->RA_PERICUL # 0
		Loop
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Desconsidera codigos de Insalubridade se os  respectivos     ³
	//³ campos do cadastro de funcionarios estiverem preenchidos     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If SRA->RA_INSMAX # 0
		If SubStr(pd[X],1,3) $ cCodInsalubridade
			Loop
		Endif
	Endif

	//Adicional confiança
	If SubStr(Pd[X],1,3) == aCodfol[984,1] .And. SRA->RA_ADCCONF # 0
		Loop
	EndIf

	//Adicional transferência
	If SubStr(Pd[X],1,3) == aCodfol[988,1] .And. SRA->RA_ADCTRF # 0
		Loop
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ 1¦ Coluna = Codigo da Verba                                  ³
	//³ 2¦ Coluna = Qtde Meses para Medias                           ³
	//³ 3¦ Coluna = AAMM de Inicio                                   ³
	//³ 4¦ Coluna = AAMM de Fim                                      ³
	//³ 5¦ Coluna = Reajustavel ?                                    ³
	//³ 6¦ Coluna = Hora Extra ?                                     ³
	//³ 7¦ Coluna = % Adicional                                      ³
	//³ 8¦ Coluna = Incidencia da Verba                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta array para 13o Salario                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fOp[3]
		If !(SubStr(Pd[X],6,2) == "N ") .And. !Empty(SubStr(Pd[X],6,2))
			Aadd(a13Sala,{SubStr(PD[X],1,3),SubStr(Pd[X],6,2),"XXXXXX","XXXXXX",SubStr(PD[X],10,1),SubStr(PD[X],11,1),Val(SubStr(PD[X],12,7)),SubStr(Pd[X],6,2),,CtoD(""),CtoD(""),SubStr(Pd[X],6,2)})

			nPos13 ++
			// De Acordo Com o Sindicato, Determina se a Media Sera Por 3, 6, 9 ou 12 Meses
			lAdmAno := .F.
			cDtCompara := "17/01/"+ STR(YEAR(SRA->RA_ADMISSA),4)
			If STR(YEAR(SRA->RA_ADMISSA),4) == SubSTR(cDataI[3],1,4) .And. SRA->RA_ADMISSA > CTOD(cDtCompara)
				lAdmAno := .T.
			Endif
			If a13Sala[nPos13,2] == "S " .And. cMedDir = "N"
				If cMed13AnoC == "S" .and. cTipoRot == "4" .and. lRescCompl
					For nS:= 1 To 4
						If aSind[nS][1] = "S" 
							If lRefMed
								nQualMed[6] := If(!Empty(nQualMed[6]), nQualMed[6], nQualMed[3])
								a13Sala[nPos13,2] := If (nQualMed[6] > aSind[nS][2],StrZero(aSind[nS][2],2),StrZero(nQualMed[6],2) )
							Else
								a13Sala[nPos13,2] := If (nQualMed[3] < aSind[nS][2],StrZero(nQualMed[3],2),StrZero(aSind[nS][2],2) )							
							Endif
						Endif
					Next nS
				Else
					For nS:= 1 To 4
						If aSind[nS][1] = "S" 
							If lRefMed
								nQualMed[6] := If(!Empty(nQualMed[6]), nQualMed[6], nQualMed[3])
								a13Sala[nPos13,2] := If (nQualMed[6] > aSind[nS][2],StrZero(aSind[nS][2],2),StrZero(nQualMed[6],2) )
	    		        	Else
								a13Sala[nPos13,2] := If (lAdmAno .And. nQualMed[3] < aSind[nS][2],StrZero(nQualMed[3],2),StrZero(aSind[nS][2],2) )							
							Endif
						Endif
					Next nS
				EndIf
			ElseIf a13Sala[nPos13,2] == "S " .And. cMedDir = "S"
				cMedD13 := "S"
				If cMed13AnoC == "S"
					a13Sala[nPos13,2] := StrZero(nQualMed[3],2)
				Else
					For nS:= 1 To 4
						If aSind[nS][1] = "S"
							a13Sala[nPos13,2] := If (lAdmAno .And. nQualMed[3] < aSind[nS][2],StrZero(nQualMed[3],2),StrZero(aSind[nS][2],2) )
						EndIf
					Next nS
				EndIf
			EndIf
			//--Quando For Por Sindicato ou Meses na Verba
			If ! (a13Sala[nPos13,2] $ "S *SP" ) .And. ( cMedDir = "N" .Or. (cMedDir == "S" .And. Val(a13Sala[nPos13,2]) < nQualMed[3]) )
				If ! lMesAtu  //--Nao Considerar Mes Atual
					a13Sala[nPos13,3] := Iif( Month(IIf(lRescCompl, dDt3, dDt5)) - 1 == 0, Str(Year(IIf(lRescCompl, dDt3, dDt5))-1, 4) + "12", Str(Year(IIf(lRescCompl, dDt3, dDt5)), 4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)) - 1, 2))
					a13Sala[nPos13,10]:= MonthSub(dDt5,1)
				Else
					a13Sala[nPos13,3] := Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)),2)
					a13Sala[nPos13,10]:= dDt5
				EndIf
				//-- Calcular de Outra Forma
				a13Sala[nPos13,4] := a13Sala[nPos13,3]
				a13Sala[nPos13,11]:= dDataF[3]
				For Y = 1 To Val(a13Sala[nPos13,2]) - 1
					a13Sala[nPos13,3] := If(Val(SubStr(a13Sala[nPos13,3],5,2)) - 1 == 0, StrZero(Val(SubStr(a13Sala[nPos13,3],1,4))-1,4) + "12",SubStr(a13Sala[nPos13,3],1,4) + StrZero(Val(SubStr(a13Sala[nPos13,3],5,2)) - 1,2))
					a13Sala[nPos13,10]:= MonthSub(a13Sala[nPos13,10],1)
				Next Y
			EndIf

			If a13Sala[nPos13,3] == "XXXXXX"

				a13Sala[nPos13,3] := cDataI[3]
				a13Sala[nPos13,4] := cDataF[3] 
				a13Sala[nPos13,10]:= dDataI[3]
				a13Sala[nPos13,11]:= dDataF[3]
				a13Sala[nPos13,2] := If(lRefMed .and. !Empty(nQualMed[6]), StrZero(nQualMed[6],2), StrZero(nQualMed[3],2) )

			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Garante que o Ano inicial nunca sera menor que o ano final	 ³
			//³ exceto na utilizacao do parametro MV_M13ANOC para verbas     ³
			//³ configuradas com a quantidade de meses para media.           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !lRescCompl
				If cMed13AnoC == "S"
					If SubStr(a13Sala[nPos13,3],1,4) < SubStr(a13Sala[nPos13,4],1,4)
						a13Sala[nPos13,3] := SubStr(a13Sala[nPos13,4],1,4) + "01"
						a13Sala[nPos13,10]:= Stod(a13Sala[nPos13,3] + "01")
					//-- Caso esteja no mes de janeiro com as datas iniciais e finais no ano anterior a data de referencia
					//-- ajustaremos o mes inicial e final para janeiro do ano corrente.
					ElseIf  month(dDt5) == 01 .And. SubStr(a13Sala[nPos13,4],1,4) <> str(Year(dDt5),4)
						a13Sala[nPos13,3] := str(Year(dDt5),4) + "01"
						a13Sala[nPos13,10]:= StoD(a13Sala[nPos13,3] + StrZero(Day(a13Sala[nPos13,10]),2))
						a13Sala[nPos13,4] := str(Year(dDt5),4) + "01"
						a13Sala[nPos13,11]:= StoD(a13Sala[nPos13,4] + StrZero(Day(a13Sala[nPos13,11]),2))
					EndIf
				Else
					If	( a13Sala[nPos13,2] $ "S " .And. !('S'$ Base_Medias) ) .Or. ;
						a13Sala[nPos13,2] $ "SP"
						If SubStr(a13Sala[nPos13,3],1,4) < SubStr(a13Sala[nPos13,4],1,4)
							a13Sala[nPos13,3] := SubStr(a13Sala[nPos13,4],1,4) + "01"
							a13Sala[nPos13,10] := StoD(a13Sala[nPos13,3] + StrZero(Day(a13Sala[nPos13,10]),2))
						//-- Caso esteja no mes de janeiro com as datas iniciais e finais no ano anterior a data de referencia
						//-- ajustaremos o mes inicial e final para janeiro do ano corrente.
						ElseIf  month(dDt5) == 01 .And. SubStr(a13Sala[nPos13,4],1,4) <> str(Year(dDt5),4)
							a13Sala[nPos13,3] := str(Year(dDt5),4) + "01"
							a13Sala[nPos13,4] := str(Year(dDt5),4) + "01"
							a13Sala[nPos13,10] := StoD(a13Sala[nPos13,3] + StrZero(Day(a13Sala[nPos13,10]),2))
							a13Sala[nPos13,11]:= StoD(a13Sala[nPos13,4] + StrZero(Day(a13Sala[nPos13,11]),2))
						EndIf
					EndIf
				EndIf
			ElseIf cTipoRot == "4" .and. lRescCompl .and. cMed13AnoC == "S" //Se for complementar, garante que o ano inicial não seja inferior ao ano da admissão no caso de utiliação do parametro MV_M13ANOC
				If SubStr(a13Sala[nPos13,3],1,4) < SubStr(AnoMes(dDt3),1,4)
					a13Sala[nPos13,3] := SubStr(AnoMes(dDt3),1,4) + "01"
					a13Sala[nPos13,10]:= StoD(AnoMes(dDt3) + "01")
				EndIf			
				If lProxMes .And. a13Sala[nPos13,3] == a13Sala[nPos13,4]
					a13Sala[nPos13,4] := AnoMes(dDt5)
				EndIf
			EndIf
			//--Verificacao da Maior e Menor data para a Query 
			cMenor := If( cMenor < (SubStr(a13Sala[nPos13,4],1,4) + "01") .And. !empty(cMenor) , cMenor , SubStr(a13Sala[nPos13,4],1,4) + "01" )
			cMenor := If( cMenor < a13Sala[nPos13,3] .And. !Empty(cMenor), cMenor , a13Sala[nPos13,3] )		
			cMaior := If( a13Sala[nPos13,4] > cMaior , a13Sala[nPos13,4] , cMaior )
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta array para Aviso Previo                                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fOp[4]
		If !(SubStr(Pd[X],8,2) == "N ") .And. !Empty(SubStr(Pd[X],8,2))
			Aadd(aAviso, {SubStr(PD[X],1,3),SubStr(Pd[X],8,2),"XXXXXX","XXXXXX",SubStr(PD[X],10,1),SubStr(PD[X],11,1),Val(SubStr(PD[X],12,7)),SubStr(Pd[X],8,2),,CtoD(""),CtoD(""),SubStr(Pd[X],8,2)})
			nPosAv ++
			
			if lJorVar
				aAviso[nPosAv,2]  := StrZero(nQualMed[4],2)
				If lMesAtu .And. ( lMdMesRes .Or. ( "S" $ Base_medias .And. !( Val(SubStr( Pd[X] ,8,2) ) > 0) ) ) // Considerar Mes Atual apenas se calculo for por sindicato ou regra especial para Categoria C/T
					aAviso[nPosAv,3] := Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)),2)
					aAviso[nPosAv,4] := Str(Year(dDt5),4) + StrZero(Month(dDt5),2)
				Else
					aAviso[nPosAv,3] := Iif(Month(IIf(lRescCompl, dDt3, dDt5)) - 1 == 0,Str(Year(IIf(lRescCompl, dDt3, dDt5))-1,4)+"12",Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)) - 1,2))
					aAviso[nPosAv,4] := Iif(Month(dDt5) - 1 == 0,Str(Year(dDt5)-1,4) + "12",Str(Year(dDt5),4) + StrZero(Month(dDt5) - 1,2))
				EndIf
				
				For Y = 1 To Val(aAviso[nPosAv,2]) - 1
					aAviso[nPosAv,3] := If(Val(SubStr(aAviso[nPosAv,3],5,2)) - 1 == 0, StrZero(Val(SubStr(aAviso[nPosAv,3],1,4))-1,4) + "12",SubStr(aAviso[nPosAv,3],1,4) + StrZero(Val(SubStr(aAviso[nPosAv,3],5,2)) - 1,2))
				Next Y
			Else
				// De Acordo Com o Sindicato, Determina se a Media Sera Por 3, 6, 9 ou 12 Meses
				If aAviso[nPosAv,2] == "S " .And. cMedDir = "N"
					For nS:= 1 To 4
						If aSind[nS][1] = "S"
							aAviso[nPosAv,2] := If (nDTrab < 365 .And. nQualMed[4] < aSind[nS][2],StrZero(nQualMed[4],2),StrZero(aSind[nS][2],2) )
						ElseIf lRescCompl .and. aAviso[nPosAv,2] == "00"
							aAviso[nPosAv,2] := StrZero(nQualMed[4],2)
						EndIf
					Next
				ElseIf aAviso[nPosAv,2] == "S " .And. cMedDir = "S"
					cMedDAv := "S"
				EndIf
				//--Quando for por Sindicato ou Meses na Verba
				If ! (aAviso[nPosAv,2]$ "S *SP") 
					If (lMesAtu .And. ( lMdMesRes .Or. ( "S" $ Base_medias .And. !( Val(SubStr( Pd[X] ,8,2) ) > 0) ) )) .Or. (lMesAtu .And. Val(aAviso[nPosAv,2]) > 0) // Considerar Mes Atual apenas se calculo for por sindicato ou regra especial para Categoria C/T
						aAviso[nPosAv,3] := Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)),2)
						aAviso[nPosAv,4] := Str(Year(dDt5),4) + StrZero(Month(dDt5),2)
					Else
						aAviso[nPosAv,3] := Iif(Month(IIf(lRescCompl, dDt3, dDt5)) - 1 == 0,Str(Year(IIf(lRescCompl, dDt3, dDt5))-1,4)+"12",Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)) - 1,2))
						aAviso[nPosAv,4] := Iif(Month(dDt5) - 1 == 0,Str(Year(dDt5)-1,4) + "12",Str(Year(dDt5),4) + StrZero(Month(dDt5) - 1,2))
					EndIf
					For Y = 1 To Val(aAviso[nPosAv,2]) - 1
						aAviso[nPosAv,3] := If(Val(SubStr(aAviso[nPosAv,3],5,2)) - 1 == 0, StrZero(Val(SubStr(aAviso[nPosAv,3],1,4))-1,4) + "12",SubStr(aAviso[nPosAv,3],1,4) + StrZero(Val(SubStr(aAviso[nPosAv,3],5,2)) - 1,2))
					Next Y
				EndIf
			Endif
			If aAviso[nPosAv,3] == "XXXXXX"
				aAviso[nPosAv,3] := cDataI[4]
				aAviso[nPosAv,4] := cDataF[4]
				aAviso[nPosAv,2] := StrZero(nQualMed[4],2)
			EndIf
			//--Verificacao da Maior e Meno data para a Query
			cMenor := If( cMenor < aAviso[nPosAv,3] .And. !Empty(cMenor), cMenor , aAviso[nPosAv,3] )		
			cMaior := If( aAviso[nPosAv,4] > cMaior , aAviso[nPosAv,4] , cMaior )
		EndIf
	EndIf    
	
	If fOp[5]
		If !(SubStr(Pd[X],4,2) == "N ") .And. !Empty(SubStr(Pd[X],4,2))
			Aadd(aMater, {SubStr(PD[X],1,3),SubStr(Pd[X],8,2),cDataI[5],cDataF[5],SubStr(PD[X],10,1),SubStr(PD[X],11,1),Val(SubStr(PD[X],12,7)),SubStr(Pd[X],8,2),,CtoD(""),CtoD(""), SubStr(Pd[X],8,2)})
			nPosMater ++
			//--Verificacao da Maior e Meno data para a Query
			cMenor := If( cMenor < aMater[nPosMater,3] .And. !Empty(cMenor), cMenor , aMater[nPosMater,3] )		
			cMaior := If( aMater[nPosMater,4] > cMaior , aMater[nPosMater,4] , cMaior )
    	EndIf	
    EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta array para Ferias Vencidas e Proporcionais             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fOp[1] .Or. fOp[2]
		If !(SubStr(Pd[X],4,2) == "N ") .And. !Empty(SubStr(Pd[X],4,2))
			If (If(lRescCompl, dDt3, dDt5) - SRA->RA_ADMISSA < 365) .And. fOp[2] .And. StrZero(nQualMed[2],2) < SubStr(Pd[X],4,2) .And. (cMedDir == "N")
				Aadd(aFerPro,{SubStr(PD[X],1,3),STR(nQualMed[2]),"XXXXXX","XXXXXX",SubStr(PD[X],10,1),SubStr(PD[X],11,1),Val(SubStr(PD[X],12,7)),STR(nQualMed[2]),    ,CtoD(''), CtoD(''), SubStr(Pd[X],4,2)})
			Else
				Aadd(aFerPro,{SubStr(PD[X],1,3),SubStr(Pd[X],4,2),"XXXXXX","XXXXXX",SubStr(PD[X],10,1),SubStr(PD[X],11,1),Val(SubStr(PD[X],12,7)),SubStr(Pd[X],4,2),    ,CtoD(''), CtoD(''), SubStr(Pd[X],4,2)})
			Endif
			Aadd(aFerVen,{SubStr(PD[X],1,3),SubStr(Pd[X],4,2),"XXXXXX","XXXXXX",SubStr(PD[X],10,1),SubStr(PD[X],11,1),Val(SubStr(PD[X],12,7)),SubStr(Pd[X],4,2),.F. ,CtoD(''), CtoD(''), SubStr(Pd[X],4,2)})
			nPosFe ++
			//-- De Acordo Com o Sindicato, Determina se a Media Sera Por 3, 6, 9 ou 12 Meses
			If aFerVen[nPosFe,2] == "S " .And. cMedDir = "N"
				For nS:= 1 To 4
					If aSind[nS][1] = "S"
						aFerVen[nPosFe,2] := StrZero(aSind[nS][2],2)
						aFerPro[nPosFe,2] := StrZero(aSind[nS][2],2)
					EndIf
				Next
			EndIf
			//--Quando for por Sindicato ou Meses no Cadastro de Verba
			If !(aFerVen[nPosFe,2] $ "S *SP")    //.And. cMedDir == "N"
				If !lMesAtu  //-- Nao Considera Mes Atual
					aFerVen[nPosFe,3] := Iif(Month(IIf(lRescCompl, dDt3, dDt5)) - 1 == 0,Str(Year(IIf(lRescCompl, dDt3, dDt5))-1,4) + "12",Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)) - 1,2))
					aFerVen[nPosFe,4] := Iif(Month(dDt5) - 1 == 0,Str(Year(dDt5)-1,4) + "12",Str(Year(dDt5),4) + StrZero(Month(dDt5) - 1,2))
					If Val(aFerPro[nPosFe,2]) > 0
						aFerPro[nPosFe,3] := Iif(Month(IIf(lRescCompl, dDt3, dDt5)) - 1 == 0,Str(Year(IIf(lRescCompl, dDt3, dDt5))-1,4) + "12",Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)) - 1,2))
						aFerPro[nPosFe,4] := Iif(Month(dDt5) - 1 == 0,Str(Year(dDt5)-1,4) + "12",Str(Year(dDt5),4) + StrZero(Month(dDt5) - 1,2))
					EndIf
					aFerVen[nPosFe,10] := MonthSub( dDt5 , 1 )
					aFerPro[nPosFe,10] := aFerVen[nPosFe,10]
				Else
					aFerVen[nPosFe,3] := Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)),2)
					aFerVen[nPosFe,4] := Str(Year(dDt5),4) + StrZero(Month(dDt5),2)
					If Val(aFerPro[nPosFe,2]) > 0
						aFerPro[nPosFe,3] := Str(Year(IIf(lRescCompl, dDt3, dDt5)),4) + StrZero(Month(IIf(lRescCompl, dDt3, dDt5)),2)
						aFerPro[nPosFe,4] := Str(Year(dDt5),4) + StrZero(Month(dDt5),2)
					EndIf
					aFerVen[nPosFe,10] := dDt5
					aFerPro[nPosFe,10] := dDt5
				EndIf
				aFerVen[nPosFe,11]:= aFerVen[nPosFe,10]
				aFerPro[nPosFe,11]:= aFerPro[nPosFe,10]
				For Y = 1 To Val(aFerVen[nPosFe,2]) - 1
					aFerVen[nPosFe,3] := If(Val(SubStr(aFerVen[nPosFe,3],5,2)) - 1 == 0,StrZero(Val(SubStr(aFerVen[nPosFe,3],1,4))-1,4) + "12", SubStr(aFerVen[nPosFe,3],1,4) + StrZero(Val(SubStr(aFerVen[nPosFe,3],5,2)) - 1,2))
					aFerVen[nPosFe,10]:= MonthSub( aFerVen[nPosFe,10] , 1 )
				Next Y
				For Y = 1 To Val(aFerPro[nPosFe,2]) - 1
					aFerPro[nPosFe,3] := If(Val(SubStr(aFerPro[nPosFe,3],5,2)) - 1 == 0,StrZero(Val(SubStr(aFerPro[nPosFe,3],1,4))-1,4) + "12", SubStr(aFerPro[nPosFe,3],1,4) + StrZero(Val(SubStr(aFerPro[nPosFe,3],5,2)) - 1,2))
					aFerPro[nPosFe,10]:= MonthSub( aFerPro[nPosFe,10] , 1 )
				Next Y
				//--Indica que o intervalo de meses deve ser utilizado para todos os
				//--periodos de ferias vencidas.
				aFerVen[nPosFe,9] := .T.
			/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Parametro que determina o numero de meses para media dentro do periodo de ferias                     ³
			//³* Parametro : MV_NMESPER                                                                             ³
			//³* Descrição: Indique o numero de meses para caclulo da media dentro do periodo aquisitivo de ferias, ³
			//³quando for diferente de 12 e a media for sobre o periodo aquisitivo.                                 ³
			//³* Tipo : Numerico                                                                                    ³
			//³* Conteudo : 6 ou numero de meses a sele selecionado                                                 ³
			//³* Restrição de Uso:                                                                                  ³
			//³Esse parametro so ira funcionar para verbas que estejam  com  "SP" no campo "Media Ferias" ou  "S"   ³
			//³e não houver indicação de media no cadastro de   Sindicato.                                          ³
			//³O parametro nao sera utilizado para as verbas que tenham numero de meses no campo "Media Ferias",    ³
			//³prevalecendo o calculo padrão.                                                                       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			ElseIf nMesesPer > 0
				//--Direciona array para o numero de Meses da Media do Periodo
				aFerVen[nPosFe,2] := StrZero(nMesesPer,2)
				aFerPro[nPosFe,2] := If (nQualMed[2] < nMesesPer,StrZero(nQualMed[2],2),StrZero(nMesesPer,2) )

				//--Determina o Mes Final para voltar o numero de meses conforme parametro
				//--Ferias vencidas
				aFerVen[nPosFe,3] := cDataF[1]
				aFerVen[nPosFe,10]:= dDataF[1]
				aFerVen[nPosFe,4] := aFerVen[nPosFe,3]
				aFerVen[nPosFe,11]:= aFerVen[nPosFe,10]
				For Y = 1 To nMesesPer - 1
					aFerVen[nPosFe,3] := If(Val(SubStr(aFerVen[nPosFe,3],5,2)) - 1 == 0,StrZero(Val(SubStr(aFerVen[nPosFe,3],1,4))-1,4) + "12", SubStr(aFerVen[nPosFe,3],1,4) + StrZero(Val(SubStr(aFerVen[nPosFe,3],5,2)) - 1,2))
					aFerVen[nPosFe,10]:= MonthSub( aFerVen[nPosFe,10] , 1 ) 
				Next Y

				//--Determina o Mes Final para voltar o numero de meses conforme parametro
				//--Ferias Proporcionais
				aFerPro[nPosFe,3] := cDataF[2]
				aFerPro[nPosFe,10]:= dDataF[2]
				aFerPro[nPosFe,4] := aFerPro[nPosFe,3]
				aFerPro[nPosFe,11]:= aFerPro[nPosFe,10]
				For Y = 1 To Val(aFerPro[nPosFe,2]) - 1
					aFerPro[nPosFe,3] := If(Val(SubStr(aFerPro[nPosFe,3],5,2)) - 1 == 0,StrZero(Val(SubStr(aFerPro[nPosFe,3],1,4))-1,4) + "12", SubStr(aFerPro[nPosFe,3],1,4) + StrZero(Val(SubStr(aFerPro[nPosFe,3],5,2)) - 1,2))
					aFerPro[nPosFe,10]:= MonthSub( aFerPro[nPosFe,10] , 1 )
				Next Y
			EndIf
			If aFerVen[nPosFe,3] == "XXXXXX"
				aFerVen[nPosFe,3] := cDataI[1]
				aFerVen[nPosFe,4] := cDataF[1]
				aFerVen[nPosFe,2] := StrZero(nQualMed[1],2)
				aFerVen[nPosFe,10]:= dDataI[1]
				aFerVen[nPosFe,11]:= dDataF[1]
			EndIf
			If aFerPro[nPosFe,3] == "XXXXXX"
				aFerPro[nPosFe,3] := cDataI[2]
				aFerPro[nPosFe,4] := cDataF[2]
				aFerPro[nPosFe,10] := dDataI[2]
				aFerPro[nPosFe,11] := dDataF[2]
				aFerPro[nPosFe,2] := StrZero(nQualMed[2],2)
			EndIf
			
			//--Verificacao da Maior e Menor data para a Query
			cMenor := If( cMenor < aFerPro[nPosFe,3] .And. !Empty(cMenor), cMenor , aFerPro[nPosFe,3] )		
			cMaior := If( aFerPro[nPosFe,4] > cMaior , aFerPro[nPosFe,4] , cMaior )
			//--Verificacao da Maior e Meno data para a Query
			cMenor := If( ( cMenor < aFerVen[nPosFe,3] .And. !Empty(cMenor)) .Or. Empty(aFerVen[nPosFe,3]), cMenor , aFerVen[nPosFe,3] )
			cMaior := If( aFerVen[nPosFe,4] > cMaior , aFerVen[nPosFe,4] , cMaior )
		EndIf
	EndIf
Next X

If fOp[1] .Or. fOp[2]
	//Garante que so ira buscar as medias a partir da data de admissao do funcionario
	If cMenor < MesAno(SRA->RA_ADMISSA)
		cMenor := MesAno(SRA->RA_ADMISSA)
	Endif
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ajusta o periodo de busca das verbas para considerar as faltas  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
	If RetValSRV(aCodFol[54,1],Sra->Ra_Filial,"RV_MEDFER") $ "SP"
		//--Verificacao da Maior e Menor data para a Query
		cMenor := If( cMenor < cDataI[2] .And. !Empty(cMenor), cMenor , cDataI[2] )		
		cMaior := If( cDataF[2] > cMaior , cDataF[2] , cMaior )
		//--Verificacao da Maior e Meno data para a Query
		cMenor := If( ( cMenor < cDataI[1] .And. !Empty(cMenor)) .Or. Empty(cDataI[1]), cMenor , cDataI[1] )
		cMaior := If( cDataF[2] > cMaior , cDataF[2] , cMaior )
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se calculo da 2a parcela, buscar codigos de pensao 1a parcela ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If (cTipoRot == "6" .And. !(lGestPubl .AND. SRA->RA_REGIME == '2')) .Or. cTipoRot == "4" //"RES" ou "132"
	cRotCalc := _cRot131 //"131"
	fBusCadBenef(@aCodBenef, cRotCalc,{aCodfol[172,1]})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada para alterar configuração de médias das verbas ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lGpMedPer
   Execblock("GPMEDPER",.F.,.F.)
EndIf

//Abate os valores de DSR para calcular corretamente as médias
If lRescCompl
	cPdDSR := fGetPdDSR() 
 	If aScan(aPd,{ |x| x[1] $ cPdDSR } ) > 0
		For nX := 1 To Len(aPdResc)
			If aPdResc[nX, 9] <> "D" .And. ( ( nPos := aScan(aPd,{ |x| x[1]+x[11] == aPdResc[nX,1] + aPdResc[nX,11] .And. x[9] <> "D" .And. x[5] > 0 } ) ) > 0;
			.Or. ( nPos := aScan(aPd,{ |x| x[1] == aPdResc[nX,1] .And. x[9] <> "D" .And. x[5] > 0 .And. x[7] <> "G" } ) ) > 0 )
				If aPD[nPos,1] $ ( cPdDSR )
					If aScan(aPdBkp, {|x| x[1]+x[2] == aPd[nPos,1] + aPd[nPos,11] } ) == 0
						aAdd( aPdBkp, { aPd[nPos,1], aPd[nPos,11] , aPd[nPos,5], aPd[nPos,4] , aPd[nPos,18]  })
					EndIf
					aPd[nPos,4] := aPd[nPos,4] - aPdResc[nX,4]
					aPd[nPos,5] := aPd[nPos,5] - aPdResc[nX,5]
	
					If aPd[nPos,5] <= 0
						aPd[nPos,9] := "D"
					EndIf
				EndIf
			EndIf
		Next nX
	EndIf
	If lProxMes
		For nVez := 1 to Len(aPd)
			If aPd[nVez,7] == "I" .and. aPd[nVez,9] <> 'D'
				nValAux := 0
				nRefAux := 0
				aEval(aPdResc,{ |X| nValAux += If( x[1] == aPd[nVez,1] .and. x[9]<>'D' .and. AllTrim(x[15]) == AllTrim(aPd[nVez,15]) ,x[5] ,0) })
				aEval(aPdResc,{ |X| nRefAux += If( x[1] == aPd[nVez,1] .and. x[9]<>'D' .and. AllTrim(x[15]) == AllTrim(aPd[nVez,15]) ,x[4] ,0) })
				aAdd( aPdBkp, { aPd[nVez,1], aPd[nVez,11] , aPd[nVez,5], aPd[nVez,4] , aPd[nVez,18] })
				aPd[nVez,5] -= nValAux
				aPd[nVez,4] -= nRefAux
			EndIf
		Next nVez
	EndIf
EndIf

oFerVen := AToHM( aFerVen )
oFerPro := AToHM( aFerPro )
o13Sala := AToHM( a13Sala )
oAviso  := AToHM( aAviso )
oMater  := AToHM( aMater )

aFerVen := {}
aFerPro := {}
a13Sala := {}
aAviso  := {}
aMater  := {}

For nVez := 1 to Len(aChave)

	dbSelectArea("SRD")
	cChave := aChave[ nVez , 2 ]
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Sai do For/Next Quando Encontrar a Primeira Transferencia   de³
	³Empresa.                                                      ³	
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !( aChave[ nVez , 4 ] == NIL ) .AND. !( aChave[ nVez , 1 ] == aChave[ nVez , 4 ] )
    	Exit
    EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Ajusta a variaveis cMenor e cMaior quando tiver media de 13o  ³
	³Salario e as variaveis estiverem vazias para formar o periodo ³
	³a ser filtrado na query a ser executada no SRD.               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If fOp[3]
		If Empty(cMenor)
			cMenor	:= Str(year(dDt5),4)+"01"
		EndIf
		If Empty(cMaior)
			cMaior	:= MesAno(dDt5)
		EndIf
	EndIf
	
	dDtAux := dDt5
	
	//Se for rescisão complementar e não considerar o mês atual para médias, busca na SRD apenas verbas anteriores ao mês da demissão
	If lRescCompl .and. !lMesAtu .And. dDt5 <> dDt3
		dDtAux := MonthSub(dDt3,1)
		If cMaior > AnoMes(dDtAux)
			cMaior := AnoMes(dDtAux)
		EndIf
	EndIf
	
	If lContrInt .or. (cPaisLoc == "BRA" .And. SRA->RA_CATEFD $ '107/108')
		cMenor := MesAno(dDtAux)
	EndIf
	
	lQuery := .T.
	cAliasSRD := "QSRD"
	aStruSRD  := If(Empty(aStruSRD),SRD->(dbStruct()),aStruSRD)
	cQuery := "SELECT * "
	cQuery += "FROM "+RetSqlName("SRD")+" SRD "
	cQuery += "WHERE SRD.RD_FILIAL='"+SubStr(cChave,1,FwGetTamFilial)+"' AND "
	cQuery += "SRD.RD_MAT='"+SubStr(cChave,FwGetTamFilial+1)+"' AND "
	cQuery += "((SRD.RD_DATARQ>='"+cMenor+"' AND "
	If fOp[3]
		cQuery += "SRD.RD_DATARQ<='"+MesAno(dDtAux)+"') OR "			
	Else
		cQuery += "SRD.RD_DATARQ<='"+cMaior+"') OR "
	Endif
	cQuery += "(SRD.RD_DTREF >= '" + cMenor + "01' AND "
	If fOp[3]
		cQuery += "SRD.RD_DTREF <= '" + MesAno(dDtAux) + "31' )) AND "
    Else
		cQuery += "SRD.RD_DTREF <= '" + cMaior + "31' )) AND "
    EndIf
    If lContrInt .and. cTipoRot == "1"
    	cQuery += "SRD.RD_CONVOC = '" + ACONVOCACAO[1] + "'  AND "
    EndIf
    cQuery += "SRD.RD_ROTEIR IN (" + _cRotQry + ") AND "
	cQuery += "SRD.D_E_L_E_T_=' ' "
	cQuery += "ORDER BY "+SqlOrder(SRD->(IndexKey()))
	cQuery := ChangeQuery(cQuery)
	If Select(cAliasSRD) > 0
		(cAliasSRD)->(DbCloseArea())
	EndIf
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSRD,.T.,.T.)
	
	For nX := 1 To Len(aStruSRD)
		If ( aStruSRD[nX][2] <> "C" )
			TcSetField(cAliasSRD,aStruSRD[nX][1],aStruSRD[nX][2],aStruSRD[nX][3],aStruSRD[nX][4])
		EndIf
	Next nX
	While (cAliasSRD)->(!Eof()) .AND. cChave == (cAliasSRD)->RD_FILIAL+(cAliasSRD)->RD_MAT

		If (cAliasSRD)->RD_ROTEIR == _cRot132 .And. (!fop[3] .Or. fop[3] .And. HMGet(o13Sala, (cAliasSRD)->RD_PD, @a13Sala) )
			dbSelectArea(cAliasSRD)
			dbSkip()
			Loop
		EndIf

		If lRescCompl .And. (cAliasSRD)->RD_ROTEIR == cRotOrd .And. (cAliasSRD)->RD_TIPO1 == "H" .And. !Empty((cAliasSRD)->RD_DATPGT) .And. AnoMes((cAliasSRD)->RD_DATPGT) < (cAliasSRD)->RD_DATARQ
			(cAliasSRD)->( DbSkip() )
			Loop
		EndIf
			
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se a Verba ja foi Considerada para a Media.          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If !lItemCLVL
			If (cAliasSRD)->( aScan( aRepetido, RD_DATARQ + RD_PD + RD_SEMANA + RD_SEQ + RD_CC ) ) == 0
				(cAliasSRD)->( aAdd( aRepetido, RD_DATARQ + RD_PD + RD_SEMANA + RD_SEQ + RD_CC ) )
			Else
				dbSelectArea(cAliasSRD)
				dbSkip()
				Loop	
			EndIf  
		Else 
			If (cAliasSRD)->( aScan( aRepetido, RD_DATARQ + RD_PD + RD_SEMANA + RD_SEQ + RD_CC + RD_ITEM + RD_CLVL ) ) == 0
				(cAliasSRD)->( aAdd( aRepetido, RD_DATARQ + RD_PD + RD_SEMANA + RD_SEQ + RD_CC + RD_ITEM + RD_CLVL ) )
			Else
				dbSelectArea(cAliasSRD)
				dbSkip()
				Loop	
			EndIf  
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquisa 1¦ Parcela 13§ Salario                 				³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If fOp[3] .And. Left((cAliasSRD)->RD_DATARQ,4) == Left(cAM13,4) .And. (cAliasSRD)->RD_DATARQ <= cAM13 .And.;
		 	((cAliasSRD)->RD_ROTEIR == cRot13o .OR. ((cAliasSRD)->RD_ROTEIR == cRot .AND. (cAliasSRD)->RD_PD $ aCodFol[22,1]+"/"+aCodFol[163,1] + "/" + If( Len(aCodFol) >= 1435, aCodFol[1434,1], "" ))) .And. RetValSRV((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_TIPOCOD") == "1" //Provento 
		 	nVal1Parc13 += (cAliasSRD)->RD_VALOR
		 	If (cAliasSRD)->RD_PD $  ( aCodFol[022,1] + "/" + aCodFol[024,1] + "/" + aCodFol[163,1] + "/" + If( Len(aCodFol) >= 1435, aCodFol[1434,1] + "/" + aCodFol[1435,1], "" ) )
		 		nVal113 += (cAliasSRD)->RD_VALOR
		 	EndIf
		EndIf
		
		If fop[3] .And. left((cAliasSRD)->RD_DATARQ,6) > cMaior
		 	dbSelectArea(cAliasSRD)
			dbSkip()
			Loop
		EndIf

		If ( (cAliasSRD)->RD_ROTEIR == _cRot132 .AND. (!fop[3] .OR. ( fop[3] .AND. !((cAliasSRD)->RD_DATARQ >= cDataI[3] .AND. (cAliasSRD)->RD_DATARQ <= cDataF[3]) )) ) .Or.;
			( (!fop[3] .OR. ( fop[3] .AND. !((cAliasSRD)->RD_DATARQ >= cDataI[3] .AND. (cAliasSRD)->RD_DATARQ <= cDataF[3]) )) .And. (cAliasSRD)->RD_PD == aCodFol[0024,1] )
			dbSelectArea(cAliasSRD)
			dbSkip()
			Loop
		EndIf
		
		//--Se incluir movimento mensal(lMovto), nao incluir acumulado
		If (cAliasSRD)->RD_DATARQ == MesAno(dDt5) .AND. ( ((cAliasSRD)->RD_ROTEIR $ (_cRot131+"/"+_cRot132) .AND. lMovto13) .OR. (!((cAliasSRD)->RD_ROTEIR $ (_cRot131+"/"+_cRot132)) .AND. If(cTipoRot $ "5", !lMovto, lMovto))  )
			dbSelectArea(cAliasSRD)
			dbSkip()
			Loop
		EndIf

		//--Se Roteiro de 13o. Verifica a Pensao
		If ( ( cTipoRot == "6" .And. !(lGestPubl .AND. SRA->RA_REGIME == '2') ) .Or. cTipoRot == "4" ) .and. fop[3] = .T.
			If RD_DATARQ >= cDataI[3] .AND. RD_DATARQ <= cDataF[3]
				If RD_PD == aCodFol[173,1]
					nVal1BasPen += (cAliasSRD)->RD_VALOR
				EndIf
				If Ascan(aCodBenef, { |x| x[1] == (cAliasSRD)->RD_PD }) > 0
					nPosBenef := Ascan(aValBenef, { |x| x[1] == (cAliasSRD)->RD_PD })
					If nPosBenef > 0
						aValBenef[nPosBenef,2] += (cAliasSRD)->RD_VALOR
					Else
						Aadd(aValBenef, { (cAliasSRD)->RD_PD, (cAliasSRD)->RD_VALOR } )
					EndIf
				EndIf
			EndIf
		EndIf
			//-- Verifica se Codigo de Falta e Atraso
		If (cAliasSRD)->RD_PD $ ( aCodFol[54,1]+"*"+aCodFol[55,1]+'*'+aCodFol[203,1]+'*'+aCodFol[242,1]+'*'+aCodFol[243,1]+'*'+aCodFol[244,1]+'*'+aCodFol[245,1] )
			fAcumFaltas(fOP, cDatai, cDataF, @aPerVenc, If(Empty((cAliasSRD)->RD_DTREF), (cAliasSRD)->RD_DATARQ, AnoMes((cAliasSRD)->RD_DTREF)), (cAliasSRD)->RD_PD, "1", Nil, cAliasSrd, dFimPer, If(Empty((cAliasSRD)->RD_DTREF), (cAliasSRD)->RD_DATPGT, (cAliasSRD)->RD_DTREF), dDataI, dDataF, (cAliasSRD)->RD_DATARQ, lTemPerFer)
			dbSelectArea(cAliasSRD)
			(cAliasSRD)->( dbSkip() )
			Loop			
		EndIf

		//--Verifica se deve calcular Media Ferias Vencidas
		If fOp[1]
			//--Procura no Array de Ferias Venc.
			If (HMGet(oFerVen, (cAliasSRD)->RD_PD, @aFerVen))
				//--Verifica se Mes/Ano serve para Media
				If (cAliasSRD)->RD_DATARQ >= aFerVen[1,3] .AND. (cAliasSRD)->RD_DATARQ <= aFerVen[1,4]
					If lRescCompl .And. (nPos1 := Ascan(aFv,{ |y| y[1] == (cAliasSRD)->RD_PD .And. (cAliasSRD)->RD_PD == aCodFol[0035,1] .And. y[2] >= AnoMes(dDataDem) .And. y[2] < (cAliasSRD)->RD_DATARQ }) ) > 0
						aFv[nPos1,2] := (cAliasSRD)->RD_DATARQ
						aFv[nPos1,3] := (cAliasSRD)->RD_HORAS
						aFv[nPos1,4] := (cAliasSRD)->RD_VALOR
					//--Procura no Array p/ calculo
					ElseIf (nPos1 := Ascan(aFv,{ |y| y[1] == (cAliasSRD)->RD_PD .AND. y[2] == (cAliasSRD)->RD_DATARQ }) ) > 0
						aFv[nPos1,3] += (cAliasSRD)->RD_HORAS
						aFv[nPos1,4] += (cAliasSRD)->RD_VALOR
					Else
						AADD(aFv,{(cAliasSRD)->RD_PD,(cAliasSRD)->RD_DATARQ,(cAliasSRD)->RD_HORAS,(cAliasSRD)->RD_VALOR,(cAliasSRD)->RD_TIPO1,(cAliasSRD)->RD_DATPGT})
					EndIf
				EndIf
			EndIf
		EndIf

		//--Verifica se deve calcular Media Ferias Proporcionais
		If fOp[2]
			//--Procura no Array de Ferias Venc.
			If (HMGet(oFerPro, (cAliasSRD)->RD_PD, @aFerPro))
				//--Verifica se Mes/Ano serve para Media
				If (cAliasSRD)->RD_DATARQ >= aFerPro[1,3] .AND. (cAliasSRD)->RD_DATARQ <= aFerPro[1,4]
					If lRescCompl .And. (nPos1 := Ascan(aFp,{ |y| y[1] == (cAliasSRD)->RD_PD .And. (cAliasSRD)->RD_PD == aCodFol[0035,1] .And. y[2] >= AnoMes(dDataDem) .And. y[2] < (cAliasSRD)->RD_DATARQ }) ) > 0
						aFp[nPos1,2] := (cAliasSRD)->RD_DATARQ
						aFp[nPos1,3] := (cAliasSRD)->RD_HORAS
						aFp[nPos1,4] := (cAliasSRD)->RD_VALOR
					//--Procura no Array p/ calculo
					ElseIf (nPos1 := Ascan(aFp,{ |y| y[1] == (cAliasSRD)->RD_PD .AND. y[2] == (cAliasSRD)->RD_DATARQ }) ) > 0
						aFp[nPos1,3] += (cAliasSRD)->RD_HORAS
						aFp[nPos1,4] += (cAliasSRD)->RD_VALOR
					Else
						AADD(aFp,{(cAliasSRD)->RD_PD,(cAliasSRD)->RD_DATARQ,(cAliasSRD)->RD_HORAS,(cAliasSRD)->RD_VALOR,(cAliasSRD)->RD_TIPO1,(cAliasSRD)->RD_DATPGT })
					EndIf
				EndIf
			EndIf
		EndIf

		//--Verifica se deve calcular Media 13o.
		If fOp[3] .And. (cAliasSRD)->RD_ROTEIR <> _cRot131
			//--Procura no Array de Ferias Venc.
			If HMGet(o13Sala, (cAliasSRD)->RD_PD, @a13Sala)
				//--Verifica se Mes/Ano serve para Media
				If ( (cAliasSRD)->RD_DATARQ >= a13Sala[1,3] .AND. (cAliasSRD)->RD_DATARQ <= a13Sala[1,4] ) .or. (lMesAtu .And. lRescCompl .And. (cAliasSRD)->RD_DATARQ < AnoMes(dDt5) .And. (cAliasSRD)->RD_DATARQ >= cDataI[3] ) 
					If lRescCompl .And. (nPos1 := Ascan(a13,{ |y| y[1] == (cAliasSRD)->RD_PD .And. (cAliasSRD)->RD_PD == aCodFol[0035,1] .And. y[2] >= AnoMes(dDataDem) .And. y[2] < (cAliasSRD)->RD_DATARQ }) ) > 0
						a13[nPos1,2] := (cAliasSRD)->RD_DATARQ
						a13[nPos1,3] := (cAliasSRD)->RD_HORAS
						a13[nPos1,4] := (cAliasSRD)->RD_VALOR
					//--Procura no Array p/ calculo
					ElseIf (nPos1 := Ascan(a13,{ |y| y[1] == (cAliasSRD)->RD_PD .AND. y[2] == (cAliasSRD)->RD_DATARQ }) ) > 0
						a13[nPos1,3] += (cAliasSRD)->RD_HORAS
						a13[nPos1,4] += (cAliasSRD)->RD_VALOR
					Else
						AADD(a13,{(cAliasSRD)->RD_PD,(cAliasSRD)->RD_DATARQ,(cAliasSRD)->RD_HORAS,(cAliasSRD)->RD_VALOR,(cAliasSRD)->RD_TIPO1,(cAliasSRD)->RD_DATPGT })
					EndIf
				EndIf
			EndIf
		EndIf

		//--Verifica se deve calcular aviso prévio
		If fOp[4]
			//--Procura no Array de Ferias Venc.
			If HMGet(oAviso, (cAliasSRD)->RD_PD, @aAviso)
				//--Verifica se Mes/Ano serve para Media
				If (cAliasSRD)->RD_DATARQ >= aAviso[1,3] .AND. (cAliasSRD)->RD_DATARQ <= aAviso[1,4]
					If lRescCompl .And. (nPos1 := Ascan(aAv,{ |y| y[1] == (cAliasSRD)->RD_PD .And. (cAliasSRD)->RD_PD == aCodFol[0035,1] .And. y[2] >= AnoMes(dDataDem) .And. y[2] < (cAliasSRD)->RD_DATARQ }) ) > 0
						aAv[nPos1,2] := (cAliasSRD)->RD_DATARQ
						aAv[nPos1,3] := (cAliasSRD)->RD_HORAS
						aAv[nPos1,4] := (cAliasSRD)->RD_VALOR
					//--Procura no Array p/ calculo
					ElseIf (nPos1 := Ascan(aAv,{ |y| y[1] == (cAliasSRD)->RD_PD .AND. y[2] == (cAliasSRD)->RD_DATARQ }) ) > 0
						aAv[nPos1,3] += (cAliasSRD)->RD_HORAS
						aAv[nPos1,4] += (cAliasSRD)->RD_VALOR
					Else
						AADD(aAv,{(cAliasSRD)->RD_PD,(cAliasSRD)->RD_DATARQ,(cAliasSRD)->RD_HORAS,(cAliasSRD)->RD_VALOR,(cAliasSRD)->RD_TIPO1,(cAliasSRD)->RD_DATPGT })
					EndIf
				EndIf
			EndIf
		EndIf   
		//verifica se deve calcular medias de Lic. Maternidade
		If fOp[5]
			//--Procura no Array de Ferias Venc.
			If HMGet(oMater, (cAliasSRD)->RD_PD, @aMater)
				//--Verifica se Mes/Ano serve para Media
				If (cAliasSRD)->RD_DATARQ >= aMater[1,3] .AND. (cAliasSRD)->RD_DATARQ <= aMater[1,4]
					If lRescCompl .And. (nPos1 := Ascan(aLM,{ |y| y[1] == (cAliasSRD)->RD_PD .And. (cAliasSRD)->RD_PD == aCodFol[0035,1] .And. y[2] >= AnoMes(dDataDem) .And. y[2] < (cAliasSRD)->RD_DATARQ }) ) > 0
						aLM[nPos1,2] := (cAliasSRD)->RD_DATARQ
						aLM[nPos1,3] := (cAliasSRD)->RD_HORAS
						aLM[nPos1,4] := (cAliasSRD)->RD_VALOR
					//--Procura no Array p/ calculo
					ElseIf (nPos1 := Ascan(aLM,{ |y| y[1] == (cAliasSRD)->RD_PD .AND. y[2] == (cAliasSRD)->RD_DATARQ }) ) > 0
						aLM[nPos1,3] += (cAliasSRD)->RD_HORAS
						aLM[nPos1,4] += (cAliasSRD)->RD_VALOR
					Else
						AADD(aLM,{(cAliasSRD)->RD_PD,(cAliasSRD)->RD_DATARQ,(cAliasSRD)->RD_HORAS,(cAliasSRD)->RD_VALOR,(cAliasSRD)->RD_TIPO1,(cAliasSRD)->RD_DATPGT })
					EndIf
				EndIf
			EndIf
		EndIf

		dbSelectARea(cAliasSRD)
		dbSkip()
	Enddo
			
	If ( lQuery )
		If cArqAnt <> "QSRD"  
			dbSelectARea(cAliasSRD)
			dbCloseArea()
		EndIf
		dbSelectArea("SRD")
	EndIf

Next nVez

If cPaisLoc == "BRA" .And. !Empty(dDt1)
	fVerSuspD( fOP, dDt1, @aPerVenc, lTemPerFer )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Total do Adiantamento do 13§ Salario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nVal1Parc13 > 0
	cReajus := "N"
	GRA_MED("3",100,0,1,"N",dDt5,nSalh,aCodFol,"9598","997",0,nVal1Parc13,"V",CTOD("  /  /  "),Val_SalMin)
	GRA_MED("3",100,0,1,"N",dDt5,nSalh,aCodFol,"9597","997",0,nVal113,"V",CTOD("  /  /  "),Val_SalMin)
EndIf

If cTipoRot $ "4*6"
	For nCntP := 1 To Len(aValBenef)
		If aValBenef[nCntP,2] > 0
			FMatriz(aValBenef[nCntP,1],aValBenef[nCntP,2], , , ,"V","S")
		EndIf
	Next nCntP
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grava Base da Pensao Alimenticia 13§ Sal. 1¦ Parcela     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nVal1BasPen > 0
		FMatriz(aCodfol[173,1],nVal1BasPen, , , ,"V","S")
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se existe as Verbas de Medias no Movimento Mensal      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lMovto
	If cTipoRot == "6"
		dbSelectArea( "SRC" )
		SRC->(dbSetorder(1))
		dbSeek( SRA->RA_FILIAL+SRA->RA_MAT)
		While ! Eof() .AND. SRA->RA_FILIAL+SRA->RA_MAT == SRC->RC_FILIAL+SRC->RC_MAT
			//Não carrega Roteiro "FOL" se estiver calculando complementar
	        If ( SRC->RC_ROTEIR == _cRotFol .and. !lCalcFol ) .OR. ( cTipoRot == "6" .AND. SRC->RC_ROTEIR == _cRot131 ) //If RC_ROTEIRO = FOL ou 131
	        
				If !( SRC->RC_PD $ ( aCodFol[54,1]+"*"+aCodFol[55,1]+'*'+aCodFol[203,1]+'*'+aCodFol[242,1]+'*'+aCodFol[243,1]+'*'+aCodFol[244,1]+'*'+aCodFol[245,1] ) ) .And. HMGet(o13Sala, SRC->RC_PD, @a13Sala)
					//--Procura no Array p/ calculo
					If (nPos1 := Ascan(a13,{ |y| y[1] == SRC->RC_PD .AND. y[2] == AnoMes(dDt5) }) ) > 0
						a13[nPos1,3] += SRC->RC_HORAS
						a13[nPos1,4] += SRC->RC_VALOR
					Else
						AADD(a13,{SRC->RC_PD,AnoMes(dDt5),SRC->RC_HORAS,SRC->RC_VALOR,SRC->RC_TIPO1,SRC->RC_DATA })
					EndIf
				EndIf
			EndIf
			dbSelectArea("SRC")
			dbSkip()

		Enddo
		lLeuApd := .T.
	ElseIf cTipoRot == "5"
		dbSelectArea( "SRC" )
		SRC->(dbSetorder(1))
		dbSeek( SRA->RA_FILIAL+SRA->RA_MAT)
		While ! Eof() .AND. SRA->RA_FILIAL+SRA->RA_MAT == SRC->RC_FILIAL+SRC->RC_MAT
	        If ( SRC->RC_ROTEIR == _cRotFol )  //If RC_ROTEIRO = FOL 
	        
				If !( SRC->RC_PD $ ( aCodFol[54,1]+"*"+aCodFol[55,1]+'*'+aCodFol[203,1]+'*'+aCodFol[242,1]+'*'+aCodFol[243,1]+'*'+aCodFol[244,1]+'*'+aCodFol[245,1] ) ) .And. HMGet(o13Sala, SRC->RC_PD, @a13Sala)
					//--Procura no Array p/ calculo
					If (nPos1 := Ascan(a13,{ |y| y[1] == SRC->RC_PD .And. y[2] == AnoMes(SRC->RC_PERIODO) }) ) > 0
						a13[nPos1,3] += SRC->RC_HORAS
						a13[nPos1,4] += SRC->RC_VALOR
					Else
						AADD(a13,{SRC->RC_PD,dtos(dDt5),SRC->RC_HORAS,SRC->RC_VALOR,SRC->RC_TIPO1,SRC->RC_DATA })
					EndIf
				EndIf
			EndIf
			dbSelectArea("SRC")
			dbSkip()

		Enddo
		lLeuApd := .T.
	ElseIf !cPaisLoc $ "BRA|CHI|PAR" .and.  ValType(OSRR) <> "U" 
		If fo_GetnElem(@OSRR) > 0 .AND. lMesAtu 
		   fo_GoTop(@OSRR)
			For nM := 1 To Len( oSrr:aCols )
				If !fo_Deleted( @oSrr, nM )
					cCodSRR   := fo_GetVal(@OSRR, "RR_PD", nM )
				   	nValorSRR := fo_GetVal(@OSRR, "RR_VALOR", nM )
			   		nHorasSRR := fo_GetVal(@OSRR, "RR_HORAS", nM )
			   		nTiposSRR := fo_GetVal(@OSRR, "RR_TIPO1", nM )
				   	dDataSRR  := fo_GetVal(@OSRR, "RR_DATA", nM )
					If !( cCodSRR $ ( aCodFol[54,1]+"*"+aCodFol[55,1]+'*'+aCodFol[203,1]+'*'+aCodFol[242,1]+'*'+aCodFol[243,1]+'*'+aCodFol[244,1]+'*'+aCodFol[245,1] ) )
						//-- 13o. Salario
						If HMGet(o13Sala, cCodSRR, @a13Sala)
							//--Procura no Array p/ calculo
							If (nPos1 := Ascan(a13,{ |y| y[1] == cCodSRR .AND. y[2] == Str(Year(dDt5),4)+StrZero(Month(dDt5),2) }) ) > 0
								If lRescCompl
									a13[nPos1,3] := nHorasSRR
									a13[nPos1,4] := nValorSRR
								Else
									a13[nPos1,3] += nHorasSRR
									a13[nPos1,4] += nValorSRR
								EndIf						
							Else
								AADD(a13,{cCodSRR,Str(Year(dDt5),4)+StrZero(Month(dDt5),2),nHorasSRR,nValorSRR,nTiposSRR,If(dDataSRR = Nil .OR. ValType(dDataSRR) # "D",Ctod(""),dDataSRR)  })
							EndIf
						EndIf
		
						//--Ferias Proporcionais
						If (HMGet(oFerPro, cCodSRR, @aFerPro)) .and. cFolMes >= aFerPro[1][3] .AND. cFolMes <= aFerPro[1][4]
							//--Procura no Array p/ calculo
							If (nPos1 := Ascan(aFp,{ |y| y[1] == cCodSRR .AND. y[2] == Str(Year(dDt5),4)+StrZero(Month(dDt5),2) }) ) > 0
								If lRescCompl
									aFp[nPos1,3] := nHorasSRR   //HORAS
									aFp[nPos1,4] := nValorSRR   //VALOR
								Else
									aFp[nPos1,3] += nHorasSRR
									aFp[nPos1,4] += nValorSRR
								EndIf
							Else
								AADD(aFp,{cCodSRR,Str(Year(dDt5),4)+StrZero(Month(dDt5),2),nHorasSRR,nValorSRR,nTiposSRR,If(dDataSRR = Nil .OR. ValType(dDataSRR)#"D", Ctod(""),dDataSRR ) })
							EndIf
						EndIf
		
						//--Ferias Vencidas
						If (HMGet(oFerVen, cCodSRR, @aFerVen)) .and. cFolMes >= aFerVen[1,3] .AND. cFolMes <= aFerVen[1,4]
							//--Procura no Array p/ calculo
							If (nPos1 := Ascan(aFv,{ |y| y[1] == cCodSRR .AND. y[2] == Str(Year(dDt5),4)+StrZero(Month(dDt5),2) }) ) > 0
								If lRescCompl
									aFv[nPos1,3] := nHorasSRR
									aFv[nPos1,4] := nValorSRR
								Else
									aFv[nPos1,3] += nHorasSRR
									aFv[nPos1,4] += nValorSRR
								EndIf	
							Else
								AADD(aFv,{cCodSRR,Str(Year(dDt5),4)+StrZero(Month(dDt5),2),nHorasSRR,nValorSRR,nTiposSRR,If (dDataSRR = Nil .OR. ValType(dDataSRR)#"D", Ctod(""),dDataSRR)  })
							EndIf
						EndIf
		
						//--Aviso Previo
				  		If !Empty(dDtAv) .AND. ( dDtAv - SRA->RA_ADMISSA < 365  .OR. "S" $ Base_medias )
							If HMGet(oAviso, cCodSRR, @aAviso)
								//--Procura no Array p/ calculo
								If (nPos1 := Ascan(aAv,{ |y| y[1] == cCodSRR .AND. y[2] == Str(Year(dDt5),4)+StrZero(Month(dDt5),2) }) ) > 0
									If lRescCompl
										aAv[nPos1,3] := nHorasSRR
										aAv[nPos1,4] := nValorSRR
									Else
										aAv[nPos1,3] += nHorasSRR
										aAv[nPos1,4] += nValorSRR
									EndIf	
								Else
									AADD(aAv,{cCodSRR,Str(Year(dDt5),4)+StrZero(Month(dDt5),2),nHorasSRR,nValorSRR,nTiposSRR,If (dDataSRR = Nil .OR. ValType(dDataSRR)#"D", Ctod(""),dDataSRR) })
								EndIf
							EndIf
						EndIf
					//-- Verifica se Codigo de Falta e Atraso
					Else
						fAcumFaltas(fOP,cDatai,cDataF,@aPerVenc,cFolMes,cCodSRR,"3",nM,"   ")
					EndIf
				EndIf
			Next nM
			lLeuApd := .T.
		EndIf	
   ElseIf ( (cPaisLoc $ "CHI|PAR" .Or. cPaisLoc == "BRA" .And. ( cTipoRot == "4" .or. ( cTipoRot == "1" .and. (IsInCallStack("S_MEDINTER") .Or. IsInCallStack("S_MEDCNTVA")) ) ) ) .And. Type("aPd") == "A" .And. Len(aPd) > 0 .And. lMesAtu )
		For nM := 1 to Len(aPd)		
			//Não considera as verbas carregas no APD na rescisão complementar pois já foram incluídas pela leitura da SRD 
			If cTipoRot == "4" .and. cCompl = "S" .and. lProxMes .and. ( ( !Empty(aPd[nM,18]) .and. aPd[nM,7] $ "I|E|G|" .and. anomes(aPd[nM,18]) < anomes(dDt5 )) .or. ( aCodFol[35,1] == aPd[nM,1] .And. Round(aPd[nM,4],2) == 0))
				Loop
			EndIf

			If lContrInt .And. aPd[nM,22] <> ACONVOCACAO[1]
				Loop
			EndIf 
			If !( aPd[nM,1] $ ( aCodFol[54,1]+"*"+ aCodFol[55,1]+'*'+ aCodFol[203,1]+'*'+ aCodFol[242,1]+'*'+ aCodFol[243,1]+'*'+ aCodFol[244,1]+'*'+aCodFol[245,1] ) )
				//-- 13º Salário
				If HMGet(o13Sala, aPd[nM,1], @a13Sala)
					//--Procura no Array p/ cálculo
					If (nPos1 := Ascan(a13,{ |y| !(cTipoRot == "4" .And. cCompl == "S" .And. lProxMes) .And. y[1] == aPd[nM,1] .And. y[2] == Str(Year(dDt5),4) + StrZero(Month(dDt5),2) }) ) > 0
						If lRescCompl .And. (aPd[nM,1] <> aCodFol[165,1])
							a13[nPos1,3] := aPd[nM,4]
							a13[nPos1,4] := aPd[nM,5]
						Else
							a13[nPos1,3] += aPd[nM,4]
							a13[nPos1,4] += aPd[nM,5]
						EndIf						
					Else
						AADD(a13,{aPd[nM,1],Str(Year(dDt5),4)+ StrZero(Month(dDt5),2), aPd[nM,4],;
						aPd[nM,5], aPd[nM,6], If(aPd[nM,10] = Nil .Or. ValType(aPd[nM,10]) # "D", ;
						Ctod(""),aPd[nM,10])  })
					EndIf
				EndIf
	
				//--Férias Proporcionais
				If (HMGet(oFerPro, aPd[nM,1], @aFerPro)) .and. cFolMes >= aFerPro[1][3] .AND. cFolMes <= aFerPro[1][4]
					//--Procura no Array p/ cálculo
					If (nPos1 := Ascan(aFp,{ |y| !(cTipoRot == "4" .And. cCompl == "S" .And. lProxMes) .And. y[1] == aPd[nM,1] .And. y[2] == Str(Year(dDt5),4) + StrZero(Month(dDt5), 2) }) ) > 0
						If lRescCompl .And. (aPd[nM,1] <> aCodFol[165,1])
							aFp[nPos1,3] := aPd[nM,4]
							aFp[nPos1,4] := aPd[nM,5]
						Else
							aFp[nPos1,3] += aPd[nM,4]
							aFp[nPos1,4] += aPd[nM,5]
						EndIf
					Else
						AADD(aFp,{aPd[nM,1], Str(Year(dDt5),4) + StrZero(Month(dDt5),2), aPd[nM,4],; 
						aPd[nM,5], aPd[nM,6],If(aPd[nM,10] = Nil .Or. ValType(aPd[nM,10])#"D",;
	     				Ctod(""),aPd[nM,10]) })
					EndIf
				EndIf
	
				//--Férias Vencidas
				If (HMGet(oFerVen, aPd[nM,1], @aFerVen)) .and. cFolMes >= aFerVen[1,3] .and. cFolMes <= aFerVen[1,4]
					//--Procura no Array p/ cálculo
					If (nPos1 := Ascan(aFv,{ |y| !(cTipoRot == "4" .And. cCompl == "S" .And. lProxMes) .And. y[1] == aPd[nM,1] .And. y[2] == Str(Year(dDt5),4) + StrZero(Month(dDt5),2) }) ) > 0
						If lRescCompl .And. (aPd[nM,1] <> aCodFol[165,1])
							aFv[nPos1,3] := aPd[nM,4]
							aFv[nPos1,4] := aPd[nM,5]
						Else
							aFv[nPos1,3] += aPd[nM,4]
							aFv[nPos1,4] += aPd[nM,5]
						EndIf	
					Else
						AADD(aFv,{aPd[nM,1], Str(Year(dDt5),4) + StrZero(Month(dDt5),2),; 
						aPd[nM,4], aPd[nM,5], aPd[nM,6],If (aPd[nM,10] = Nil .Or.;
						ValType(aPd[nM,10])#"D", Ctod(""),aPd[nM,10])  })
					EndIf
				EndIf
	
				//--Aviso Prévio
				If !Empty(dDtAv) .And. ( lMdMesRes .Or. "S" $ Base_medias .Or. lSindicato .Or. lMdAviMes) // Considerar mes da rescisao apenas qdo calculo por sindicato.
					If HMGet(oAviso, aPd[nM,1], @aAviso)  .And. ( If(!lMesAtu .Or. lMdMesRes .Or. lMdAviMes .Or. lSindicato, .T., ! (Val(aAviso[1,8]) > 0)) )
						//--Procura no Array p/ calculo
						If (nPos1 := Ascan(aAv,{ |y| !(cTipoRot == "4" .And. cCompl == "S" .And. lProxMes) .And. y[1] == aPd[nM,1] .And. y[2] == Str(Year(dDt5),4) + StrZero(Month(dDt5),2) }) ) > 0
							If lRescCompl .And. (aPd[nM,1] <> aCodFol[165,1])
								aAv[nPos1,3] := aPd[nM,4]
								aAv[nPos1,4] := aPd[nM,5]
							Else
								aAv[nPos1,3] += aPd[nM,4]
								aAv[nPos1,4] += aPd[nM,5]
							EndIf	
						Else
							AADD(aAv,{aPd[nM,1],Str(Year(dDt5),4) + StrZero(Month(dDt5),2),; 
							aPd[nM,4], aPd[nM,5],aPd[nM,6],If (aPd[nM,10] = Nil .Or. ;
							ValType(aPd[nM,10])#"D", Ctod(""),aPd[nM,10]) })
						EndIf
					EndIf
				EndIf
			//-- Verifica se Código de Falta e Atraso
			Else
				If lLerSrc .Or. ( lRescCompl .And. lProxMes )
					fAcumFaltas(fOP, cDatai, cDataF, @aPerVenc, StrZero(Year(dDt3),4) + StrZero(Month(dDt3),2), aPd[nM,1],"3",nM,"   ",dDt3,aPd[nM,18], dDataI, dDataF)
				Else
					fAcumFaltas(fOP,cDatai,cDataF,@aPerVenc,If(Empty(aPd[nM,18]),cFolMes,AnoMes(aPd[nM,18])),aPd[nM,1],"3",nM,"   ",dFimPer,If(Empty(aPd[nM,10]),dFimPer,aPd[nM,10]), dDataI, dDataF)
				EndIf
			EndIf
		Next nM
		lLeuApd := .T.
   	EndIf
   	cPdRGB := ""
   	If lLerSrc .OR. ( !lLeuApd .AND. ( ( cTipoRot == "3" .and. lMesAtu ) .OR. ( Empty(cTipoRot) .and. lMesAtu ) .OR. ( cTipoRot == "1" .And. lMesAtu .And. ( IsInCallStack("GPEM070") .or. IsInCallStack("GPM070GRD") ).And. IsInCallStack("fMediaHora") ) ) )
		dbSelectArea( "SRC" )
		dbSetOrder(1)
		If !dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + aCodFol[318,1] )			
			dbSelectArea( "RGB" )
			dbSetOrder(1)
			If dbSeek( SRA->RA_FILIAL+SRA->RA_MAT)
				While ! Eof() .AND. SRA->RA_FILIAL+SRA->RA_MAT == RGB->RGB_FILIAL+RGB->RGB_MAT
					//Estava usando lixo da RGB de períodos fechados
					If RGB->RGB_PERIOD >= cPer .and. (( RGB->RGB_ROTEIR == _cRotFol /*"FOL"*/ ) .OR. (cTipoRot == "4" .and. RGB->RGB_ROTEIR == _cRotRes) .OR. ( cTipoRot == "6" .AND. RGB->RGB_ROTEIR == _cRot131 /*"131"*/ ))
						If !( RGB->RGB_PD $ ( aCodFol[54,1]+"*"+aCodFol[55,1]+'*'+aCodFol[203,1]+'*'+aCodFol[242,1]+'*'+aCodFol[243,1]+'*'+aCodFol[244,1]+'*'+aCodFol[245,1] ) )
							//--Ferias Proporcionais			
							If !lTemJorVar .Or. (lTemJorVar .And. !lJorVar) .Or. (lTemJorVar .And. lJorVar .And. RGB->RGB_PD $ cVerbas_Aux)
								If (HMGet(oFerPro, RGB->RGB_PD, @aFerPro)) .and. cFolMes >= aFerPro[1][3] .AND. cFolMes <= aFerPro[1][4]
									//--Procura no Array p/ calculo
									If (nPos1 := Ascan(aFp,{ |y| y[1] == RGB->RGB_PD .AND. y[2] == RGB->RGB_PERIOD }) ) > 0
										aFp[nPos1,3] += RGB->RGB_HORAS
										aFp[nPos1,4] += RGB->RGB_VALOR
									Else
										AADD(aFp,{RGB->RGB_PD,RGB->RGB_PERIOD,RGB->RGB_HORAS,RGB->RGB_VALOR,RGB->RGB_TIPO1,RGB->RGB_DTREF })
										cPdRGB += RGB->RGB_PD + "*"
									EndIf
								EndIf
				
								//--Ferias Vencidas
								If (HMGet(oFerVen, RGB->RGB_PD, @aFerVen)) .and. cFolMes >= aFerVen[1][3] .AND. cFolMes <= aFerVen[1][4]
									//--Procura no Array p/ calculo
									If (nPos1 := Ascan(aFv,{ |y| y[1] == RGB->RGB_PD .AND. y[2] == RGB->RGB_PERIOD }) ) > 0
										aFv[nPos1,3] += RGB->RGB_HORAS
										aFv[nPos1,4] += RGB->RGB_VALOR
									Else
										AADD(aFv,{RGB->RGB_PD,RGB->RGB_PERIOD,RGB->RGB_HORAS,RGB->RGB_VALOR,RGB->RGB_TIPO1,RGB->RGB_DTREF })
										cPdRGB += RGB->RGB_PD + "*"
									EndIf
								EndIf
							
								//-- 13o. Salario
								If HMGet(o13Sala, RGB->RGB_PD, @a13Sala)
									//--Procura no Array p/ calculo
									If (nPos1 := Ascan(a13,{ |y| y[1] == RGB->RGB_PD .AND. y[2] == RGB->RGB_PERIOD }) ) > 0
										a13[nPos1,3] += RGB->RGB_HORAS
										a13[nPos1,4] += RGB->RGB_VALOR
									Else
										AADD(a13,{RGB->RGB_PD,RGB->RGB_PERIOD,RGB->RGB_HORAS,RGB->RGB_VALOR,RGB->RGB_TIPO1,RGB->RGB_DTREF })
										cPdRGB += RGB->RGB_PD + "*"
									EndIf
								EndIf
							
								//-- Aviso Previo
								If Empty(cTipoRot) .or. ;											// Demonstrativo de Medias
								   (cTipoRot == "4" .and. MesAno(dDt5) > cMesFol ) 					// Calculo de medias s/ aviso na rescisao
									If HMGet(oAviso, RGB->RGB_PD, @aAviso)
										//--Procura no Array p/ calculo
										If (nPos1 := Ascan(aAv,{ |y| y[1] == RGB->RGB_PD .AND. y[2] == RGB->RGB_PERIOD }) ) > 0
											aAv[nPos1,3] += RGB->RGB_HORAS
											aAv[nPos1,4] += RGB->RGB_VALOR
										Else
											AADD(aAv,{RGB->RGB_PD,RGB->RGB_PERIOD,RGB->RGB_HORAS,RGB->RGB_VALOR,RGB->RGB_TIPO1,RGB->RGB_DTREF })
										EndIf
									EndIf
								EndIf
								//Licenca Maternidade
								If Empty(cTipoRot) // Demonstrativo de Medias
									If HMGet(oMater, RGB->RGB_PD, @aMater)
										//--Procura no Array p/ calculo
										If (nPos1 := Ascan(aLM,{ |y| y[1] == RGB->RGB_PD .AND. y[2] == RGB->RGB_PERIOD }) ) > 0
											aLM[nPos1,3] += RGB->RGB_HORAS
											aLM[nPos1,4] += RGB->RGB_VALOR
										Else
											AADD(aLM,{RGB->RGB_PD,RGB->RGB_PERIOD,RGB->RGB_HORAS,RGB->RGB_VALOR,RGB->RGB_TIPO1,RGB->RGB_DTREF })
										EndIf
									EndIf
								EndIf
							EndIf
						//-- Verifica se Codigo de Falta e Atraso
						Else
							fAcumFaltas(fOP,cDatai,cDataF,@aPerVenc,If(Empty(RGB->RGB_DTREF),cFolMes,AnoMes(RGB->RGB_DTREF)),RGB->RGB_PD,"2",,"SRC",dFimPer,RGB->RGB_DTREF, dDataI, dDataF)
						EndIf
						aAdd(aRGBAux, {cMesSrc, RGB->RGB_PD, RGB->RGB_SEQ})
					EndIf
					dbSelectArea("RGB")
					dbSkip()
				Enddo
			EndIf
			
			//Inclui as verbas que já foram calculadas pela folha e que não estão na RGB quando estiver calculando diferença de férias
			If cTipoRot == "3" .and. cRotPr == "1" .and. Type("aPdCopia") <> "U" .and. Len(aPdCopia) > 0
				For nM := 1 to Len(aPdCopia)
					If aPdCopia[nM,1] $ cPdRGB //Mantém a verba encontrada na RGB
						Loop
					EndIf
					If !( aPdCopia[nM,1] $ ( aCodFol[54,1]+"*"+aCodFol[55,1]+'*'+aCodFol[203,1]+'*'+aCodFol[242,1]+'*'+aCodFol[243,1]+'*'+aCodFol[244,1]+'*'+aCodFol[245,1] ) )
						//--Ferias Proporcionais			
						If !lTemJorVar .Or. (lTemJorVar .And. !lJorVar) .Or. (lTemJorVar .And. lJorVar .And. aPdCopia[nM,1] $ cVerbas_Aux)
							If (HMGet(oFerPro, aPdCopia[nM,1], @aFerPro)) .and. cFolMes >= aFerPro[1][3] .AND. cFolMes <= aFerPro[1][4]
								//--Procura no Array p/ calculo
								If (nPos1 := Ascan(aFp,{ |y| y[1] == aPdCopia[nM,1] .AND. y[2] == cFolMes }) ) > 0
									aFp[nPos1,3] += aPdCopia[nM,4]
									aFp[nPos1,4] += aPdCopia[nM,5]
								Else
									AADD(aFp,{aPdCopia[nM,1],cFolMes,aPdCopia[nM,4],aPdCopia[nM,5],aPdCopia[nM,6],aPdCopia[nM,18] })
								EndIf
							EndIf
			
							//--Ferias Vencidas
							If (HMGet(oFerVen, aPdCopia[nM,1], @aFerVen)).and. cFolMes >= aFerVen[1][3] .AND. cFolMes <= aFerVen[1][4]
								//--Procura no Array p/ calculo
								If (nPos1 := Ascan(aFv,{ |y| y[1] == aPdCopia[nM,1] .AND. y[2] == cFolMes }) ) > 0
									aFv[nPos1,3] += aPdCopia[nM,4]
									aFv[nPos1,4] += aPdCopia[nM,5]
								Else
									AADD(aFv,{aPdCopia[nM,1],cFolMes,aPdCopia[nM,4],aPdCopia[nM,5],aPdCopia[nM,6],aPdCopia[nM,18] })
								EndIf
							EndIf
						
							//-- 13o. Salario
							If HMGet(o13Sala, aPdCopia[nM,1], @a13Sala)
								//--Procura no Array p/ calculo
								If (nPos1 := Ascan(a13,{ |y| y[1] == aPdCopia[nM,1] .AND. y[2] == cFolMes }) ) > 0
									a13[nPos1,3] += aPdCopia[nM,4]
									a13[nPos1,4] += aPdCopia[nM,5]
								Else
									AADD(a13,{aPdCopia[nM,1],cFolMes,aPdCopia[nM,4],aPdCopia[nM,5],aPdCopia[nM,6],aPdCopia[nM,18] })
								EndIf
							EndIf
						EndIf
					//-- Verifica se Codigo de Falta e Atraso
					Else
						fAcumFaltas(fOP,cDatai,cDataF,@aPerVenc,If(Empty(aPdCopia[nM,18]),cFolMes,AnoMes(aPdCopia[nM,18])),aPdCopia[nM,1],"2",,"SRC",dFimPer,aPdCopia[nM,18], dDataI, dDataF)
					EndIf
					aAdd(aRGBAux, {cMesSrc, aPdCopia[nM,1], aPdCopia[nM,11]})					
				Next nM 
			EndIf
		EndIf

		dbSelectArea( "SRC" )
		If dbSeek( SRA->RA_FILIAL+SRA->RA_MAT)
			While ! Eof() .AND. SRA->RA_FILIAL+SRA->RA_MAT == SRC->RC_FILIAL+SRC->RC_MAT
				If (!lLeuApd .And. cTipoRot == "6") .Or.  ( cTipoRot == "6" .And. P_CCOMP13 = 'S' .And. lCalcFol) .Or. cTipoRot <> "6"
					If ( SRC->RC_ROTEIR == _cRotFol /*"FOL"*/ ) .OR. ( cTipoRot == "6" .AND. SRC->RC_ROTEIR == _cRot131 /*"131"*/ )
						If aScan(aRGBAux, { |x| x[1] == cMesSrc .And. x[2] == SRC->RC_PD .And. x[3] == SRC->RC_SEQ}) == 0
							If !( SRC->RC_PD $ ( aCodFol[54,1]+"*"+aCodFol[55,1]+'*'+aCodFol[203,1]+'*'+aCodFol[242,1]+'*'+aCodFol[243,1]+'*'+aCodFol[244,1]+'*'+aCodFol[245,1] ) )
								//--Ferias Proporcionais			
								If !lTemJorVar .Or. (lTemJorVar .And. !lJorVar) .Or. (lTemJorVar .And. lJorVar .And. SRC->RC_PD $ cVerbas_Aux)
									If (HMGet(oFerPro, SRC->RC_PD, @aFerPro)) .and. cFolMes >= aFerPro[1][3] .AND. cFolMes <= aFerPro[1][4]
										//--Procura no Array p/ calculo
										If (nPos1 := Ascan(aFp,{ |y| y[1] == SRC->RC_PD .AND. y[2] == SRC->RC_PERIODO }) ) > 0
											aFp[nPos1,3] += SRC->RC_HORAS
											aFp[nPos1,4] += SRC->RC_VALOR
										Else
											AADD(aFp,{SRC->RC_PD,SRC->RC_PERIODO,SRC->RC_HORAS,SRC->RC_VALOR,SRC->RC_TIPO1,SRC->RC_DATA })
										EndIf
									EndIf
					
									//--Ferias Vencidas
									If (HMGet(oFerVen, SRC->RC_PD, @aFerVen)) .and. cFolMes >= aFerVen[1][3] .and. cFolMes <= aFerVen[1][4]
										//--Procura no Array p/ calculo
										If (nPos1 := Ascan(aFv,{ |y| y[1] == SRC->RC_PD .AND. y[2] == SRC->RC_PERIODO }) ) > 0
											aFv[nPos1,3] += SRC->RC_HORAS
											aFv[nPos1,4] += SRC->RC_VALOR
										Else
											AADD(aFv,{SRC->RC_PD,SRC->RC_PERIODO,SRC->RC_HORAS,SRC->RC_VALOR,SRC->RC_TIPO1,SRC->RC_DATA })
										EndIf
									EndIf
								
									//-- 13o. Salario
									If HMGet(o13Sala, SRC->RC_PD, @a13Sala)
										//--Procura no Array p/ calculo
										If (nPos1 := Ascan(a13,{ |y| y[1] == SRC->RC_PD .AND. y[2] == SRC->RC_PERIODO }) ) > 0
											a13[nPos1,3] += SRC->RC_HORAS
											a13[nPos1,4] += SRC->RC_VALOR
										Else
											AADD(a13,{SRC->RC_PD,SRC->RC_PERIODO,SRC->RC_HORAS,SRC->RC_VALOR,SRC->RC_TIPO1,SRC->RC_DATA })
										EndIf
									EndIf
								
									//-- Aviso Previo
									If Empty(cTipoRot) .or. ;											// Demonstrativo de Medias
									(cTipoRot == "4" .and. MesAno(dDt5) > cMesFol ) 					// Calculo de medias s/ aviso na rescisao
										If HMGet(oAviso, SRC->RC_PD, @aAviso)
											//--Procura no Array p/ calculo
											If (nPos1 := Ascan(aAv,{ |y| y[1] == SRC->RC_PD .AND. y[2] == SRC->RC_PERIODO }) ) > 0
												aAv[nPos1,3] += SRC->RC_HORAS
												aAv[nPos1,4] += SRC->RC_VALOR
											Else
												AADD(aAv,{SRC->RC_PD,SRC->RC_PERIODO,SRC->RC_HORAS,SRC->RC_VALOR,SRC->RC_TIPO1,SRC->RC_DATA })
											EndIf
										EndIf
									EndIf
									//Licenca Maternidade
									If Empty(cTipoRot) // Demonstrativo de Medias
										If HMGet(oMater, SRC->RC_PD, @aMater)
											//--Procura no Array p/ calculo
											If (nPos1 := Ascan(aLM,{ |y| y[1] == SRC->RC_PD .AND. y[2] == SRC->RC_PERIODO }) ) > 0
												aLM[nPos1,3] += SRC->RC_HORAS
												aLM[nPos1,4] += SRC->RC_VALOR
											Else
												AADD(aLM,{SRC->RC_PD,SRC->RC_PERIODO,SRC->RC_HORAS,SRC->RC_VALOR,SRC->RC_TIPO1,SRC->RC_DATA })
											EndIf
										EndIf
									EndIf
								EndIf
							//-- Verifica se Codigo de Falta e Atraso
							Else
								fAcumFaltas(fOP,cDatai,cDataF,@aPerVenc,If(Empty(SRC->RC_DTREF),cFolMes,AnoMes(SRC->RC_DTREF)),SRC->RC_PD,"2",,"SRC",dFimPer,SRC->RC_DATA, dDataI, dDataF)
							EndIf
						EndIf
					EndIf
				EndIf
				dbSelectArea("SRC")
				dbSkip()
			Enddo
		EndIf
	EndIf
EndIf

//Memória de Cálculo
If __lMemCalc
	If fOp[1]
		lCabLog := .T.
		For nI := 1 To Len(aFv)
			If lCabLog		
				fAddMemLog("Periodo de Busca Fer. Vencidas : " + cValToChar(cDataI[1]) + "/" + cValToChar(cDataF[1])  ,1,1)
				fAddMemLog("Verbas para cálculo Férias Vencidas : " ,1,2)
				fAddMemLog("VERBA|DATA|REF|VALOR|TIPO|PGTO| " ,1,2)
				lCabLog := .F.
			EndIf
			cLog := ""
			For nZ := 1 to Len(aFv[nI])
				cLog += cValtochar(aFv[nI][nZ]) + "|"
			Next nZ
			fAddMemLog(cLog ,1,2)
		Next nI
	EndIf

	If fOp[2]
		lCabLog := .T.
		For nI := 1 To Len(aFp)
			If lCabLog
				fAddMemLog("Periodo de Busca Fer. Proporcionais : " + cValToChar(cDataI[2]) + "/" + cValToChar(cDataF[2])  ,1,1)
				fAddMemLog("Verbas para cálculo Férias Proporcionais : " ,1,2)
				fAddMemLog("VERBA|DATA|REF|VALOR|TIPO|PGTO| " ,1,2)
				lCabLog := .F.
			EndIf		
			cLog := ""
			For nZ := 1 to Len(aFp[nI])
				cLog += cValtochar(aFp[nI][nZ]) + "|"
			Next nZ
			fAddMemLog(cLog ,1,2)
		Next nI
	EndIf

	If fOp[3]
		lCabLog := .T.
		For nI := 1 To Len(a13)
			If lCabLog
				fAddMemLog("Periodo de Busca 13 : " + cValToChar(cDataI[3]) + "/" + cValToChar(cDataF[3])  ,1,1)
				fAddMemLog("Verbas para cálculo 13 salario : " ,1,2)
				fAddMemLog("VERBA|DATA|REF|VALOR|TIPO|PGTO| " ,1,2)
				lCabLog := .F.
			EndIf
			cLog := ""
			For nZ := 1 to Len(a13[nI])
				cLog += cValtochar(a13[nI][nZ]) + "|"
			Next nZ
			fAddMemLog(cLog ,1,2)
		Next nI
	EndIf

	If fOp[4]
		lCabLog := .T.
		If lCabLog
			fAddMemLog("Periodo de Busca Rescisão : " + cValToChar(cDataI[4]) + "/" + cValToChar(cDataF[4])  ,1,1)
			fAddMemLog("Verbas para cálculo Aviso Previo : " ,1,2)
			fAddMemLog("VERBA|DATA|REF|VALOR|TIPO|PGTO| " ,1,2)
			lCabLog := .F.
		EndIf
		For nI := 1 To Len(aAv)
			cLog := ""
			For nZ := 1 to Len(aAv[nI])
				cLog += cValtochar(aAv[nI][nZ]) + "|"
			Next nZ
			fAddMemLog(cLog ,1,2)
		Next nI
	EndIf

	If fOp[5]
		lCabLog := .T.
		If lCabLog
			fAddMemLog("Periodo de Busca Lic. Maternidade : " + cValToChar(cDataI[5]) + "/" + cValToChar(cDataF[5])  ,1,1)
			fAddMemLog("Verbas para cálculo Licença Maternidade : " ,1,2)
			fAddMemLog("VERBA|DATA|REF|VALOR|TIPO|PGTO| " ,1,2)
			lCabLog := .F.
		EndIf
		For nI := 1 To Len(aLM)
			cLog := ""
			For nZ := 1 to Len(aLM[nI])
				cLog += cValtochar(aLM[nI][nZ]) + "|"
			Next nZ
			fAddMemLog(cLog ,1,2)
		Next nI
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Dias de Faltas de Ferias Vencidas (Sera Gravado Por Periodo) ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aPerVenc) > 0
	For nP := 1 To Len(aPerVenc)
		cTipFv := Str( If(nP==1,1,nP+3) ,1 )
		If aPerVenc[nP,3] > 0
			GRA_TOT(cMatricula,cTipFv,"998","9698",Round(aPerVenc[nP,3],1),0,0,"D",0)
			//Memória de Cálculo
			If __lMemCalc
				fAddMemLog("Faltas Férias Vencidas ("+cTipFv+") : " + cValtoChar(Round(aPerVenc[nP,3],1)) ,1,1)
			EndIf
		EndIf
	Next nP
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Dias de Faltas para ser Considerado nas Ferias Proporcionais ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nFerPropFaltas > 0
	GRA_TOT(cMatricula,"2","998","9698",Round(nFerPropFaltas,1),0,0,"D",0)
	//Memória de Cálculo
	If __lMemCalc
		fAddMemLog("Faltas Férias Proporcionais : " + cValtoChar(Round(nFerPropFaltas,1)) ,1,1)
	EndIf
EndIf

//Se não for para considerar o mês atual, busca faltas no aPd para inclusão no relatório de 13º, que terá as faltas abatidas independente da configuração do momvimento
If fOp[3] .and. !lMesAtu .and. cTipoRot == "4" .and. Len(aPd) > 0
	For nM := 1 to Len(aPd)
		If ( aPd[nM,1] $ ( aCodFol[54,1]+"*"+ aCodFol[55,1]+'*'+ aCodFol[203,1]+'*'+ aCodFol[242,1]+'*'+ aCodFol[243,1]+'*'+ aCodFol[244,1]+'*'+aCodFol[245,1] ) )
			fAcumFaltas({.F.,.F.,.T.,.F.,.F.,.F.},cDatai,cDataF,@aPerVenc,If(Empty(aPd[nM,18]),cFolMes,AnoMes(aPd[nM,18])),aPd[nM,1],"3",nM,"   ",dFimPer,If(Empty(aPd[nM,10]),dFimPer,aPd[nM,10]), dDataI, dDataF)
		EndIf
	Next nM
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Dias de Faltas para ser Considerado no 13§ Salario           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Tot_Vetor(n13Faltas) > 0
	n13MenosAVos := 0
	//Memória de Cálculo
	If __lMemCalc
		fAddMemLog("Faltas 13 " ,1,1)
	EndIf
	For n13 := 1 To 12
		If n13Faltas[n13] > 0
			nFaltas13o 	+= n13Faltas[n13]
			GRA_TOT(cMatricula, "3", "998", Str(Year(dDt5),4)+StrZero(n13,2), n13Faltas[n13], 0, 0, "D", 0, .T.)
			//Memória de cálculo
			If __lMemCalc
				fAddMemLog("Faltas 13 : ("+Str(Year(dDt5),4)+StrZero(n13,2)+")" + cValtoChar(n13Faltas[n13]) ,1,2)
			EndIf
			nDiaAdm := 0
			If MesAno(SRA->RA_ADMISSA) == MesAno(CTOD("01/"+StrZero(n13,2)+"/"+StrZero(Year(dDt5),4), "DDMMYY" ))
				nDiaAdm := Day(SRA->RA_ADMISSA) - 1
			EndIf
			//-- Testa as faltas somente se o mes tiver mais de 15 dias trabalhados, pois se tiver menos de 15 dias
			//-- ja tera o avo desconsiderado no calculo dos avos de direito "fAvos13()".
			If (F_ULTDIA(CTOD("01/"+StrZero(n13,2)+"/"+StrZero(Year(dDt5),4), "DDMMYY" )) - nDiaAdm ) > 14 
				//-- Se tiver mais de 15 faltas no mes, perde o mes
				If n13Faltas[n13] > 15
					n13MenosAvos ++               
				Else	
					//-- Na rescisao verificar se tem mais de 15 dias trabalhados pela data de demissao e nao ultimo dia do mes 
    				If cTipoRot == "4" .and. ;
						MesAno(dDt3) == MesAno(CTOD("01/"+StrZero(n13,2)+"/"+StrZero(Year(dDt3),4), "DDMMYY" )) .and.;
						Day(dDt3) > 14 .and. ( Day(dDt3) - n13Faltas[n13] - nDiaAdm ) < 15 
						n13MenosAvos ++                   
					Else
						If(F_ULTDIA(CTOD("01/"+StrZero(n13,2)+"/"+StrZero(Year(dDt5),4), "DDMMYY" )) - n13Faltas[n13] - nDiaAdm ) < 15
							n13MenosAvos ++
						EndIf	                                               
					EndIf	
				EndIf
			EndIf	
		EndIf
	Next n13
	If n13MenosAvos > 0
		GRA_TOT(cMatricula,"3","998","9998",n13MenosAvos,0,0,"D",0)
	EndIf
	If nFaltas13o > 0
		GRA_TOT(cMatricula,"3","998","9698",nFaltas13o,0,0,"D",0)
	EndIf
EndIf

If !lFaltas

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada para alterar a quantidade de meses nos arrays  ³
	//| de ferias, 13o., aviso e maternidade. Utilizado por exemplo qdo.|
	//| busca-se a media dos ultimos 12 meses porem num determinado mes |
	//| devido ao afastamento nao houve media, logo esse mes deve ser   |
	//| subtraido no calc. de medias alterando-se os arrays disponiveis.|
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lGpMedArr

		aFerVen := {}
		aFerPro := {}
		a13Sala := {}
		aAviso	:= {}
		aMater	:= {}
		HMList(oFerVen,@aAux)
		aEval(aAux, {|x| aAdd(aFerVen,x[2,1]) } )
		HMList(oFerPro,@aAux)
		aEval(aAux, {|x| aAdd(aFerPro,x[2,1]) } )
		HMList(o13Sala,@aAux)
		aEval(aAux, {|x| aAdd(a13Sala,x[2,1]) } )
		HMList(oAviso,@aAux)
		aEval(aAux, {|x| aAdd(aAviso,x[2,1]) } )
		HMList(oMater,@aAux)
		aEval(aAux, {|x| aAdd(aMater,x[2,1]) } )

	   Execblock("GPMEDARR",.F.,.F.)

	   	oFerVen := AToHM( aFerVen )
		oFerPro := AToHM( aFerPro )
		o13Sala := AToHM( a13Sala )
		oAviso  := AToHM( aAviso )
		oMater  := AToHM( aMater )
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ferias Vencidas                                                 ³
	//| Adiciona ao array aPerUnic as verbas referente a cada periodo   |
	//| de vencidas. O array aFerVen[nPos,9] indica se a verba e por    |
	//| sindicato ou meses no cadastro de verba,sendo assim estas verbas|
	//| deverao ser utilizadas para todos os periodos de vencidas.      |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fop[1]
		aSort(aFv,,,{ |x,y| x[1]+x[2] < y[1]+y[2] })
		aPerMedia := {}
		nCont := 1
		For nP := 1 To Len(aPerVenc)
			aPerUnic := {}
			For nF   := 1 To Len(aFv)
				If (HMGet(oFerVen, aFv[nF,1], @aFerVen))
                	If aFerVen[1,9] .Or. (aFv[nF,2] >= aPerVenc[nP,1] .And. aFv[nF,2] <= aPerVenc[nP,2])
						Aadd(aPerUnic,{ aFv[nF,1],aFv[nF,2],aFv[nF,3],aFv[nF,4],aFv[nF,5],aFv[nF,6]})
					EndIf
				EndIf
			Next nF
			// O primeiro periodo de vencidas sera sempre "1", os demais serao numerados
			// a partir do numero "5"
			cTipFv := Alltrim(Str( If(nP==1,1,nP+3) ,2 ))
			//Memória de Cálculo
			If __lMemCalc
				fAddMemLog("Médias Férias Vencidas ("+cTipFv+")",1,1)
			EndIf
			fGravaTrp(cTipFv,cMatricula,@aPerUnic,oFerVen,nSalh,dDt5,lMesAtu,lMovto,aCodFol,Val_SalMin,nSalhInc,IIf(lRescCompl, dDt3, dDt5))
           	aAdd(aPerMedia, {cTipFv, aPerVenc[nCont,1], aPerVenc[nCont,2] ,0})
            nCont++
		Next nP
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ferias Proporcionais                                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fop[2]
		aSort(aFp,,,{ |x,y| x[1]+x[2] < y[1]+y[2] })
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog("Médias Férias Proporcionais",1,1)
		EndIf
		fGravaTrp("2",cMatricula,@aFp,oFerPro,nSalh,dDt5,lMesAtu,lMovto,aCodFol,Val_SalMin,nSalhInc,IIf(lRescCompl, dDt3, dDt5))
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ 13§ Salario                                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fop[3]
		aSort(a13,,,{ |x,y| x[1]+x[2] < y[1]+y[2] })
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog("Médias 13 Salario",1,1)
		EndIf
		fGravaTrp("3",cMatricula,@a13,o13Sala,nSalh,dDt5,lMesAtu,lMovto,aCodFol,Val_SalMin,nSalhInc,IIf(lRescCompl, dDt3, dDt5))
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Aviso Previo                                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fop[4]
		aSort(aAv,,,{ |x,y| x[1]+x[2] < y[1]+y[2] })
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog("Médias Aviso Previo",1,1)
		EndIf
		fGravaTrp("4",cMatricula,@aAv,oAviso,nSalh,dDt5,lMesAtu,lMovto,aCodFol,Val_SalMin,nSalhInc,IIf(lRescCompl, dDt3, dDt5))
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Licenca Maternidade                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fop[5]
		aSort(aLM,,,{ |x,y| x[1]+x[2] < y[1]+y[2] })
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog("Médias Licença Maternidade",1,1)
		EndIf
		fGravaTrp("A",cMatricula,@aLM,oMater,nSalh,dDt5,lMesAtu,lMovto,aCodFol,Val_SalMin,nSalhInc,IIf(lRescCompl, dDt3, dDt5))
	EndIf

EndIf

//Restaura o aPd por conta do abatimento em virtude do DSR
If lRescCompl .And. Len(aPdBkp) > 0
	For nX := 1 to Len(aPdBkp)
		If ( nPos := aScan(aPd,{|x| x[1]+x[11]+dtos(x[18]) == aPdBkp[nX,1] + aPdBkp[nX,2]+ dtos(aPdBkp[nX,5]) } ) ) > 0
			aPd[nPos,5] := aPdBkp[nX,3]
			aPd[nPos,4] := aPdBkp[nX,4]
			aPd[nPos,9] := " "
		EndIf
	Next nX
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//|Chamada Execblock para Deletar Movimento Mensal do SRD           |
//³As variaveis abaixo foram declaradas como Private				³
//³aFerPro,aFerVen,a13Sala,aAviso,aFv,aFp,a13,aAv                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("GPDERSRD")
	//Restaura arrays para uso no ponto de entrada
	aFerVen := {}
	aFerPro := {}
	a13Sala := {}
	aAviso	:= {}
	aMater	:= {}
	HMList(oFerVen,@aAux)
	aEval(aAux, {|x| aAdd(aFerVen,x[2,1]) } )
	HMList(oFerPro,@aAux)
	aEval(aAux, {|x| aAdd(aFerPro,x[2,1]) } )
	HMList(o13Sala,@aAux)
	aEval(aAux, {|x| aAdd(a13Sala,x[2,1]) } )
	HMList(oAviso,@aAux)
	aEval(aAux, {|x| aAdd(aAviso,x[2,1]) } )
	HMList(oMater,@aAux)
	aEval(aAux, {|x| aAdd(aMater,x[2,1]) } )

   Execblock("GPDERSRD",.F.,.F.)
EndIf

HMClean(oFerVen)
HMClean(oFerPro)
HMClean(o13Sala)
HMClean(oAviso)
HMClean(oMater)

FreeObj(oFerVen)
FreeObj(oFerPro)
FreeObj(o13Sala)
FreeObj(oAviso)
FreeObj(oMater)

oFerVen := Nil
oFerPro := Nil
o13Sala := Nil
oAviso  := Nil
oMater  := Nil

RestArea(aAreaSRF)

If !Empty(cArqAnt)
	dbSelectArea( cArqAnt )
	dbSetOrder(nOrdem)
EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fGravaTrp	³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Procura no SRD as Verbas que devem entrar para media	      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fGravaTrp(cTipo,cMatricula,cChave,aArray,nSalh,dDt5,lMesAtu,³±±
±±³          ³          lMovto,aCodFol )		                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fGravaTrp(cTipo,cMatricula,aVerbas,oHash,nSalh,dDt5,lMesAtu,lMovto,aCodFol,Val_SalMin,nSalhInc,dDtResc)

Local aArray		:= {}
Local nPos      	:= 0
Local cFil 			:= xFilial("SRV")
Local cVerba    	:= Space(3)
Local cVerbas_Aux	:= ""
Local cAAMM     	:= Space(6)
Local nValor    	:= 0
Local nHoras    	:= 0
Local aVerbaNew 	:= {}
Local nPosMed   	:= If(cTipo=="A",5,If( Val(cTipo) >  4, 1,Val(cTipo) ))
Local nF			:= 0

//Variaveis auxiliares
Local nTTHor_x   := nTTVOr_x   := nTTVAt_x   := 0
Local nTMHor_x   := nTMVOr_x   := nTMVAt_x   := 0
Local nTDHor_x   := nTDVOr_x   := nTDVAt_x   := 0
Local nHETHor_x  := nHETVOr_x  := nHETVAt_x  := 0
Local nHEMHor_x  := nHEMVOr_x  := nHEMVAt_x  := 0
Local nHEDHor_x  := nHEDVOr_x  := nHEDVAt_x  := 0
Local nNHETHor_x := nNHETVOr_x := nNHETVAt_x := 0
Local nNHEMHor_x := nNHEMVOr_x := nNHEMVAt_x := 0
Local nNHEDHor_x := nNHEDVOr_x := nNHEDVAt_x := 0

DEFAULT dDtResc := dDt5

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Zera Variaveis do Total Geral                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nTTHoras   := nTTVOrig   := nTTVAtua   := 0
nTMHoras   := nTMVOrig   := nTMVAtua   := 0
nTDHoras   := nTDVOrig   := nTDVAtua   := 0
nHETHoras  := nHETVOrig  := nHETVAtua  := 0
nHEMHoras  := nHEMVOrig  := nHEMVAtua  := 0
nHEDHoras  := nHEDVOrig  := nHEDVAtua  := 0
nNHETHoras := nNHETVOrig := nNHETVAtua := 0
nNHEMHoras := nNHEMVOrig := nNHEMVAtua := 0
nNHEDHoras := nNHEDVOrig := nNHEDVAtua := 0
// Variaveis Grupo 0 (Horista - Jornada Variavel)
nGR0THoras	:= nGR0TVOrig := nGR0TVAtua	:= 0
nGR0MHoras	:= nGR0MVOrig := nGR0MVAtua	:= 0
nGR0DHoras	:= nGR0DVOrig := nGR0DVAtua	:= 0 

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Zera Variaveis do Total da Verba                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nTHoras := nTVOrig := nTVAtua := 0
nMHoras := nMVOrig := nMVAtua := 0
nDHoras := nDVOrig := nDVAtua := 0

cFil := xFilial("SRV")

//Busca as verbas que irão compor a média salarial (HOJORVA)
gp140GrpVerb(cFil,@cVerbas_Aux,"0",.F.)

//--Agrupar as Verbas conforme cadastro Verbas campo de agrupamento
For  nF := 1 To Len(aVerbas)
   cVerbaAnt := aVerbas[nF,1]
   nPos := Ascan(PD,cVerbaAnt)
   If nPos > 0 .And. Val(Subs(PD[nPos],22,3)) > 0 // Posicao do campo agrupamento
      aVerbas[nF,1] := Subs(PD[nPos],22,3)
   EndIf
   cVerba := aVerbas[nF,1]
   cAAMM  := aVerbas[nF,2]
   nHoras := aVerbas[nF,3]
   nValor := aVerbas[nF,4]
   //-- Cria Novo Vetor Agrupado
   nPos := Ascan(aVerbaNew,{ |x| x[1] == cVerba .AND. x[2] == cAAMM })
   If nPos > 0
      aVerbaNew[nPos,3] += nHoras
      aVerbaNew[nPos,4] += nValor
   Else
      AADD(aVerbaNew,{cVerba,cAAMM,nHoras,nValor,aVerbas[nF,5],aVerbas[nF,6]})
   EndIf
Next nF
//-- Array de Agrupados para Array de verbas
aVerbas := Aclone(aVerbaNew)
aSort( aVerbas,,,{ |x,y| x[1] + x[2] < y[1] + y[2] } )

cVerbaAnt :=  "!!!"
//Memória de cálculo
If __lMemCalc
	fAddMemLog("Apuração" ,1,2)
EndIf

For nF := 1 to Len(aVerbas)

	cVerba 	:= aVerbas[nF,1]

	If cVerba == cVerbaAnt .OR. cVerbaAnt == "!!!"

		If HMGet(oHash, cVerba, @aArray)
			X := 1
		Else
			Loop
		EndIf	
				
		cGuarda := aArray[X,3]

		cReajus := aArray[X,5]
        // Verifica se a Verba foi Gravada. Alteracao realizada para tratamento de Media por Tabela
		If !(lRescCompl .And. cMedDir == "N" .And. aVerbas[nF,2] > Str(Year(dDt5),4) + StrZero(Month(dDt5),2)) .And.;
			( cTipoRot != "4" .Or. ( aVerbas[nF,2] <= cDataF[4] .Or. lMesAtu ) )
		
			If GRA_MED(cTipo,aArray[X,7],0,Val(aArray[X,2]),aArray[X,6],dDt5,nSalh,aCodFol,aVerbas[nF,2],aVerbas[nF,1],aVerbas[nF,3],aVerbas[nF,4],aVerbas[nF,5],aVerbas[nF,6],Val_SalMin,nSalhInc)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Acumula Totais da Verba                                         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nTHoras += (cTBLXMED)->RP_HORAS
				nTVOrig += (cTBLXMED)->RP_VALOR
				nTVAtua += (cTBLXMED)->RP_VALATU
			EndIf
		EndIf
		If cVerbaAnt == "!!!"
			cVerbaAnt := cVerba
		EndIf
	EndIf

	If cVerbaAnt # cVerba .OR. nF == Len(aVerbas)
		//--Calcula Media das Verbas
		If nComiss > 0 .AND. cVerbaAnt$ aCodFol[165,1]+'*'+aCodFol[166,1]+'*'+aCodFol[347,1]+'*'+cPdComiss
			fComissao( cMatricula , cTipo , cVerbaAnt , nQualMed[nPosMed] )
 		ElseIf x > 0 
			aArray[X,3] := cGuarda
			HMSet(oHash, aArray[1,1], aArray)
			fCalMed(cMatricula,cTipo,aArray[X,1],dDt5,aArray[X,2],nQualMed[nPosMed],aArray[X,6],aArray[x,8],lMesAtu,aArray[x,12],dDtResc)
		EndIf

		If cVerbaAnt # cVerba
			nF --
		EndIf

		//-- Guarda a Verba Atual como Anterior
		cVerbaAnt := cVerba

		nTHoras := nTVOrig := nTVAtua := 0
		nMHoras := nMVOrig := nMVAtua := 0
		nDHoras := nDVOrig := nDVAtua := 0

	EndIf

	//-- Se funcionário possui jornada variável e as médias são do salário e do DSR
	//-- não grava nos totais.
	
	If aVerbas[nF,1] $ cVerbas_Aux .And. lMedHoras .And. (AllTrim(FunName()) == "GPER080" .Or. lDemCalc)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se for uma verba que é média salarial não deve entrar nos totais                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nTTHoras   :=	nTTHor_x		;	nTMHoras   :=	nTMHor_x		;	nTDHoras   := nTDHor_x     
		nHETHoras  :=	nHETHor_x		;	nHEMHoras  :=	nHEMHor_x		;	nHEDHoras  := nHEDHor_x    
		nNHETHoras :=	nNHETHor_x		;	nNHEMHoras :=	nNHEMHor_x		;	nNHEDHoras := nNHEDHor_x     
		nTTVOrig   :=	nTTVOr_x		;	nTMVOrig   :=	nTMVOr_x		;	nTDVOrig   := nTDVOr_x     
		nHETVOrig  :=	nHETVOr_x		;	nHEMVOrig  :=	nHEMVOr_x		;	nHEDVOrig  := nHEDVOr_x    
		nNHETVOrig :=	nNHETVOr_x   	;	nNHEMVOrig :=	nNHEMVOr_x		;	nNHEDVOrig := nNHEDVOr_x   
		nTTVAtua   :=	nTTVAt_x		;	nTMVAtua   :=	nTMVAt_x		;	nTDVAtua   := nTDVAt_x     
		nHETVAtua  :=	nHETVAt_x    	;	nHEMVAtua  :=	nHEMVAt_x		;	nHEDVAtua  := nHEDVAt_x    
		nNHETVAtua :=	nNHETVAt_x   	;	nNHEMVAtua :=	nNHEMVAt_x		;	nNHEDVAtua := nNHEDVAt_x    
	Else	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Senão alimenta as variaveis auxiliares com os valores dos totais                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nTTHor_x   :=	nTTHoras		;	nTMHor_x   :=	nTMHoras		;	nTDHor_x   :=	nTDHoras
		nHETHor_x  :=	nHETHoras		;	nHEMHor_x  :=	nHEMHoras		;	nHEDHor_x  :=	nHEDHoras
		nNHETHor_x :=	nNHETHoras		;	nNHEMHor_x :=	nNHEMHoras		;	nNHEDHor_x :=	nNHEDHoras
		nTTVOr_x   :=	nTTVOrig		;	nTMVOr_x   :=	nTMVOrig		;	nTDVOr_x   :=	nTDVOrig
		nHETVOr_x  :=	nHETVOrig		;	nHEMVOr_x  :=	nHEMVOrig		;	nHEDVOr_x  :=	nHEDVOrig
		nNHETVOr_x :=	nNHETVOrig		;	nNHEMVOr_x :=	nNHEMVOrig		;	nNHEDVOr_x :=	nNHEDVOrig
		nTTVAt_x   :=	nTTVAtua		;	nTMVAt_x   :=	nTMVAtua		;	nTDVAt_x   :=	nTDVAtua
		nHETVAt_x  :=	nHETVAtua		;	nHEMVAt_x  :=	nHEMVAtua		;	nHEDVAt_x  :=	nHEDVAtua
		nNHETVAt_x :=	nNHETVAtua		;	nNHEMVAt_x :=	nNHEMVAtua		;	nNHEDVAt_x :=	nNHEDVAtua
	Endif  
Next nF

If ( nTTHoras + nTTVOrig + nTTVAtua ) > 0  
	
	// Total - Nao Hora Extra
	GRA_TOT(cMatricula,cTipo,"999","9798",nNHETHoras,nNHETVOrig,nNHETVAtua,"N",0)
	//Memória de Cálculo
	If __lMemCalc
		fAddMemLog("Total - Nao Hora Extra |" + cValtoChar(nNHETHoras) + "|" + cValtoChar(nNHETVOrig) + "|" + cValtoChar(nNHETVOrig) + "|N|"   ,1,2)
	EndIf

	// Media pela incidencia - Nao Hora Extra
	GRA_TOT(cMatricula,cTipo,"999","9799",nNHEMHoras,nNHEMVOrig,nNHEMVAtua,"N",0)
	//Memória de Cálculo
	If __lMemCalc
		fAddMemLog("Media pela incidencia - Nao Hora Extra |" + cValtoChar(nNHEMHoras) + "|" + cValtoChar(nNHEMVOrig) + "|" + cValtoChar(nNHEMVAtua) + "|N|"   ,1,2)
	EndIf

	// Media por 12 - Nao Hora Extra
	GRA_TOT(cMatricula,cTipo,"999","97MD",nNHEDHoras,nNHEDVOrig,nNHEDVAtua,"N",0)
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Media por 12 - Nao Hora Extra |" + cValtoChar(nNHEDHoras) + "|" + cValtoChar(nNHEDVOrig) + "|" + cValtoChar(nNHEDVAtua) + "|N|"   ,1,2)
	EndIf

	// Total - So' Hora Extra
	GRA_TOT(cMatricula,cTipo,"999","9898",nHETHoras,nHETVOrig,nHETVAtua,"N",0)
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Total - So' Hora Extra |" + cValtoChar(nHETHoras) + "|" + cValtoChar(nHETVOrig) + "|" + cValtoChar(nHETVAtua) + "|N|"   ,1,2)
	EndIf

	// Media pela incidencia - So' Hora Extra
 	GRA_TOT(cMatricula,cTipo,"999","9899",nHEMHoras,nHEMVOrig,nHEMVAtua,"N",0)
	 //Memória de cálculo
	 If __lMemCalc
		fAddMemLog("Media pela incidencia - So' Hora Extra |" + cValtoChar(nHEMHoras) + "|" + cValtoChar(nHEMVOrig) + "|" + cValtoChar(nHEMVAtua) + "|N|"   ,1,2)
	EndIf

	// Media por 12 - So' Hora Extra
	GRA_TOT(cMatricula,cTipo,"999","98MD",nHEDHoras,nHEDVOrig,nHEDVAtua,"N",0)
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Media por 12 - So' Hora Extra |" + cValtoChar(nHEDHoras) + "|" + cValtoChar(nHEDVOrig) + "|" + cValtoChar(nHEDVAtua) + "|N|"   ,1,2)
	EndIf

	// Total - Geral
	GRA_TOT(cMatricula,cTipo,"999","9998",nTTHoras,nTTVOrig,nTTVAtua,"N",0)
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Total - Geral |" + cValtoChar(nTTHoras) + "|" + cValtoChar(nTTVOrig) + "|" + cValtoChar(nTTVAtua) + "|N|"   ,1,2)
	EndIf

	// Media pela incidencia - Geral
	GRA_TOT(cMatricula,cTipo,"999","9999",nTMHoras,nTMVOrig,nTMVAtua,"N",0)
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Media pela incidencia - Geral |" + cValtoChar(nTMHoras) + "|" + cValtoChar(nTMVOrig) + "|" + cValtoChar(nTMVAtua) + "|N|"   ,1,2)
	EndIf

	// Media por 12 - Geral
	GRA_TOT(cMatricula,cTipo,"999","99MD",nTDHoras,nTDVOrig,nTDVAtua,"N",If(cTipo=="A",nQualMed[5],12))
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Media por ("+cvaltochar(If(cTipo=="A",nQualMed[5],12))+") - Geral |" + cValtoChar(nTDHoras) + "|" + cValtoChar(nTDVOrig) + "|" + cValtoChar(nTDVAtua) + "|N|"   ,1,2)
	EndIf
EndIf

If (nGR0THoras +  nGR0TVOrig + nGR0TVAtua ) > 0
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grava Registros Totalizadores                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	// Totalizadores para Grupo 0 - Horista com Jornada Variável
	If lTemJorVar
		// Total - Grupo 0
		GRA_TOT(cMatricula,cTipo,"995","9598",nGR0THoras,nGR0TVOrig,nGR0TVAtua,"N",0)
		// Media pela incidencia - Grupo 0
		GRA_TOT(cMatricula,cTipo,"995","9599",nGR0MHoras,nGR0MVOrig,nGR0MVAtua,"N",0)
		// Media por 12 - Grupo 0
		GRA_TOT(cMatricula,cTipo,"995","95MD",nGR0DHoras,nGR0DVOrig,nGR0DVAtua,"N",0)	
	EndIf
EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³DIFDATA_ME³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Retorna Diferenca de Meses entre datas                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³DIFDATA_MES(dDataI,dDataF,cFer13res,lMaisdeumana) 		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function DIFDATA_MES(dDataI,dDataF,cFer13res,lMaisdeumano)

Local dDataAux	:= dDataI
Local dDataIni	:= dDataI

nMeses := ( Year(dDataF) - Year(dDataI) ) * 12
nMeses += ( Month(dDataF) - Month(dDataI) )

nUltDM := 0
nDiasM := 16

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Cuida para que o "nQualMed" nao seja maior que a diferenca entre|
//|	o mes inicial e final das ferias proporcionais                  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cFer13res == 2 .And. cMedDir == "S"
	//--Obtém a data de inicio do último avo
 	While MonthSum(dDataAux,1) < dDataF .And. cBuscaMedia == "3"
 		dDataAux := MonthSum(dDataAux,1)
 	EndDo 

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Soma 1 na variavel nMeses para considerar inclusive o ultimo mês do período³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nMeses++
	If cBuscaMedia == "2"
		nMeses --
	EndIf
	//Verifica se na Data Inicial trabalhou mais de 15 dias.
	If cBuscaMedia == "3" .and. ( f_UltDia(dDataI) - Day( dDataI ) + 1 ) < 15
		nMeses --
	EndIf
	//Verifica se no último mês (avo) trabalhou pelo menos 15 dias.
	If cBuscaMedia <> "3" 
		If Day(dDataF) < 15 .Or. ( cBuscaMedia == "1" .And. !lMaisdeumano .And. nMeses > nMes )
			nMeses --   
		EndIf
	Else
		If ( ( dDataF - dDataAux) + 1 < 15 )
			nMeses --
		EndIf
	EndIf	         
	nMeses := If (nMeses > 12 , 12, nMeses)
	Return( nMeses ) 
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Verifica se Tem 15 ou mais Dias de Diferenca entre o dia inicial|
//|	e o Final e Incrementa mais um mes                              |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cFer13res == 1 .or. cFer13res == 2
	While .T.
		If MonthSum(dDataIni,1) > dDataF
			Exit
		Else
			dDataAux := dDataIni
			dDataIni := MonthSum(dDataIni,1)
			If Day(dDataI) <> Day(dDataIni) .and. Day(dDataI) <= f_UltDia(dDataIni)
				dDataIni := StoD(AnoMes(dDataIni) + StrZero(Day(dDataI),2))
				If dDataIni > dDataF
					dDataIni := dDataAux
					Exit
				EndIf 
			EndIf
		EndIf
	EndDo
	If Day(dDataF) > Day(dDataI) .and. ( dDataF - dDataIni ) + 1 >= 15
		nMeses ++
	EndIf
EndIf

If cFer13res == 2
	If AnoMes(dDataF) <> AnoMes(dDataIni) .and. ( dDataF - dDataIni ) + 1 < 15
		nMeses --
	EndIf
ElseIf cFer13res == 3 .Or. ( cFer13res == 4 .And. lMaisdeumano == .F. )
	If ( f_UltDia( dDataI ) - Day( dDataI ) + 1 ) < 15
		nMeses --
	EndIf
	If Day(dDataF) >= 15 
		nMeses ++
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//| Limita o Numero de Meses a 12 ou Meses de Direito, de Acordo com RF_DIASDIR	|
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nMeses > nMesesDir
	nMeses := nMesesDir
EndIf

Return( nMeses )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³GRA_MED   ³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Gravar registros que irao compor as medias - Trp           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³GRA_MED(cTipo,nPerc,nTot,nQualMes,cHestra,dLim,nSalH,aCodFol³±±
±±³          ³  cDataArq,cPd,nHoras,nValor,cTipo1,dDtpgto,nSalMin)		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³  cTipo    - 1 - Ferias Vencidas                            ³±±
±±³		  	 ³ 			   2 - Ferias A vencer                            ³±±
±±³			 ³             3 - Decimo Terceiro                            ³±±
±±³			 ³             4 - Rescisao                                   ³±±
±±³			 ³             A - Licenca Maternidade                        ³±±
±±³			 ³ nPerc    - Percentual da Verba                             ³±±
±±³			 ³ nTot     - N„o Est  Sendo Usado                            ³±±
±±³			 ³ nQualmes - At‚ que Mes Este Reg.Deve ser Cons. para Media  ³±±
±±³			 ³ cHextra  - "S"=Codigo e' Hora Extra "N"=Nao e' Hora Extra  ³±±
±±³			 ³ dLim     - Data Limite do Periodo                          ³±±
±±³			 ³ nSalh    - Valor do Sal rio Hora                           ³±±
±±³			 ³ aCodFol  - Array Contendo as Verbas e Seus Identificadores ³±±
±±³			 ³ cDatarq  - Ano e Mes da Verba                              ³±±
±±³			 ³ cPd      - Verba de Provento ou Desconto                   ³±±
±±³			 ³ nHoras   - Valor das Horas da Verba                        ³±±
±±³			 ³ nValor   - Valor das Horas da Verba                        ³±±
±±³			 ³ cTipo1   - Tipo da Verba -  EX: "H" Horas , "V" Valor      ³±±
±±³			 ³ dDtPgto  - Data de Pagamento da Verba                      ³±±
±±³			 ³ nSalMin  - Valor Salario Minimo                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function GRA_MED(cTipo,nPerc,nTot,nQualmes,cHextra,dLim,nSalh,aCodFol,cDatarq,cPd,nHoras,nValor,cTipo1,dDtPgto,nSalMin,nSalhInc)
Local cCodInsalubridade := aCodFol[37,1]+","+aCodFol[38,1]+","+aCodFol[39,1]
Local nSalHora 			:= 0
Local nPosTa            := 0
Local nRet				:= 0
Local nFatorInsal		:= 1
Local nSalAtual			:= 0
Local nSalHR080			:= 0
Local nBkpSalhor		:= SALHOR
Local lGPER080			:= IsInCallStack("GPER080")
Local lAlterou			:= .F.
Local nGPALTTRP			:= 0
Local aPerAux			:= {}
Local nDiasAux			:= 0
Local nPosAux			:= 0
Local aAreaRCH			:= RCH->( GetArea() )

DEFAULT nSalhInc := 0

nDiasC := If( Type("nDiasC") == "U" .or. nDiasC == 0, 30, nDiasC )

//Memória de cálculo
If __lMemCalc
	fAddMemLog("Verba : " + cPd + " - " + AllTrim( RetValSRV(cPd, SRA->RA_FILIAL, "RV_DESC") ),1,3)
	fAddMemLog("Competencia (cDatarq) = " + cValtoChar(cDatarq),1,4)
	fAddMemLog("Dias periodo (nDiasC)= " + cValtoChar(nDiasC),1,4)
	fAddMemLog("Referencia (nHoras)= " + cValtoChar(nHoras),1,4)
	fAddMemLog("Valor (nValor)= " + cValtoChar(nValor),1,4)
	fAddMemLog("Percentual (nPerc)= " + cValtoChar(nPerc),1,4)
	fAddMemLog("Data Limite do Periodo (dLim)= " + cValtoChar(dLim),1,4)
	fAddMemLog("At‚ que Mes Este Reg.Deve ser Cons. para Media (nQualmes)= " + cValtoChar(nQualmes) ,1,4)
	fAddMemLog("Reajuste - Indicador Econômico (cReajus) = " + cValtoChar(cReajus) ,1,4)
EndIf

If !(cTipoRot == "4" .And. cCompl == "S" .And. lProxMes) .And. SRA->RA_CATFUNC == "M" .And. Len(cDatarq) == 6 .And. fCarPeriodo( cDatarq, _cRotFol, @aPerAux, Nil, @nPosAux) .And. !Empty(aPerAux) .And. nPosAux > 0
	If (nDiasAux := aPerAux[nPosAux, 20]) != 30 .Or. nDiasC != 30
		SALHOR		:= Salario / (SRA->RA_HRSDIA * nDiasAux)
		nSalh		:= SalMes / (SRA->RA_HRSDIA * nDiasAux)
		lGPER080	:= .F.
		lAlterou	:= .T.
	EndIf
EndIf
RestArea(aAreaRCH)

If lGPER080 .Or. Empty(SALHOR)
	If SRA->RA_TIPOPGT == "M"
		If SRA->RA_CATFUNC $ "M*C*P*A*E"
			nSalHR080 := SRA->RA_SALARIO /  (P_QTDIAMES * SRA->RA_HRSDIA)
			//Memória de Cálculo
			If	__lMemCalc
				fAddMemLog("Salario para média (nSalHR080) = SRA->RA_SALARIO /  (P_QTDIAMES * SRA->RA_HRSDIA) --> " + cValtoChar(nSalHR080) ,1,4)
			EndIf
		ElseIf SRA->RA_CATFUNC $ "H*T*G"
			nSalHR080 := SRA->RA_SALARIO
			//Memória de Cálculo
			If __lMemCalc
				fAddMemLog("Salario para média (nSalHR080) = SRA->RA_SALARIO --> " + cValtoChar(nSalHR080) ,1,4)
			EndIf
		Else
			nSalHR080 := SRA->RA_SALARIO / SRA->RA_HRSDIA
			//Memória de Cálculo
			If __lMemCalc
				fAddMemLog("Salario para média (nSalHR080) = SRA->RA_SALARIO / SRA->RA_HRSDIA --> " + cValtoChar(nSalHR080) ,1,4)
			EndIf 
		EndIf 
		SALHOR := nSalHR080	
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se existe reg. do func. solicitado e deleta         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea( cTBLXMED )

//Jornada variavel
If lMedHoras .And. cTipo1 <> "H" .And. cPd != "997"
	nSalAtual 	:= fBuscaSal(Stod(cDatarq+"01"),,,.f.) //busca salario na SR3 de acordo com periodo
	nHoras 		:= NoRound(nValor / nSalAtual , 2 )
	cTipo1 		:= "H"
	If __lMemCalc
		fAddMemLog( "Referencia (nHoras) = NoRound(nValor / nSalAtual , 2 ) --> " + cValtoChar(nHoras) ,1,4)
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Converte para Horas Quando Tipo for Igual a Dias             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cTipo1 == "D"
	cTipo1 := "H"
	nHoras := NoRound( ( ( SRA->RA_HRSMES / nDiasC ) * nHoras ) , 2 )
	//Memória de cálculo
	If __lMemCalc
		fAddMemLog( "Referencia (nHoras) = NoRound( ( ( SRA->RA_HRSMES / nDiasC ) * nHoras ) , 2 ) --> " + cValtoChar(nHoras) ,1,4)
	EndIf
EndIf

// Antes de Gravar, verifica se o Evento e Tabela e se continua recebendo nos lancamentos fixos
If Ascan(Pd,{ |x| SubStr(X,1,3) == cPd .AND. SubStr(X,6,1) == "S" } ) > 0
    // Carrega os Lancamentos Fixos
	If lFixosMed
		fCarFixos(@aFixosMed,dDtLcFixo)
	EndIf
    // Pesquisa a Tabela,Linha e Coluna nos Lancamentos Fixos na epoca que recebeu
    cCodTab := ""
    nLinTab := 0
    nColTab := 0
	If ( nPosFixo := Ascan(aFixosMed,{ |X| X[1] = cPd .AND. cDatarq >= x[5] .AND. ( Empty(x[6]) .OR. cDatarq <= x[6] ) })) > 0
		If aFixosMed[nPosFixo,7] == "4" // Tabela
	 		cCodTab:= aFixosMed[nPosFixo,2]
	    	nLinTab:= aFixosMed[nPosFixo,3]
     		nColTab:= aFixosMed[nPosFixo,4]  
 		EndIf
 	EndIf
EndIf

RecLock(cTBLXMED,.T.)
(cTBLXMED)->RP_FILIAL   := SRA->RA_FILIAL
(cTBLXMED)->RP_MAT      := SRA->RA_MAT
(cTBLXMED)->RP_TIPO     := cTipo
(cTBLXMED)->RP_DATARQ   := cDatarq
(cTBLXMED)->RP_PD       := cPd
(cTBLXMED)->RP_HORAS    := nHoras
(cTBLXMED)->RP_VALOR    := nValor
(cTBLXMED)->RP_TIPO1    := cTipo1
(cTBLXMED)->RP_DATPGT   := dDtPgto
(cTBLXMED)->RP_ADIC     := nPerc
(cTBLXMED)->RP_MESMEDI := nQualmes

If ExistBlock("GPALTTRP")
	nSalMedHr := nSalh
	ExecBlock("GPALTTRP",.F.,.F.)
	If nSalMedHr <> nSalh
		nGPALTTRP := nSalMedHr
	EndIf
	nSalh := nSalMedHr
EndIf

If cPd $ cCodInsalubridade
	nFatorInsal	:= 1
    If !Empty(SRA->RA_FTINSAL)
		nFatorInsal := SRA->RA_FTINSAL
    EndIf
	//Memória de cálculo
	If __lMemCalc
    	fAddMemLog( "Fator Insalubridade (nFatorInsal) = " + cValtoChar(nFatorInsal) ,1,4)
    EndIf
    
	If nHoras > 0 .And. cTipo1 # "V"
		nMin := Round( ( nSalMin *nFatorInsal) / SRA->RA_HRSMES , 2)
		(cTBLXMED)->RP_VALATU := ( nHoras * nMin ) * ( nPerc / 100 )
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog( "nMin = Round( ( nSalMin *nFatorInsal) / SRA->RA_HRSMES , 2) --> " + cValtoChar(nMin) ,1,4)
			fAddMemLog( "Valor Atual =( nHoras * nMin ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
		EndIf
   	ElseIf cReajus $ "SR"
		(cTBLXMED)->RP_VALATU := CALC_REAJ( nValor , dLim , cDatarq ,(cReaJus=="S"))
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog( "Valor Atual =CALC_REAJ( nValor , dLim , cDatarq ,(cReaJus=='S')) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
		EndIf
	Else
		(cTBLXMED)->RP_VALATU := nValor
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog( "Valor Atual = nValor --> " + cValtoChar(nValor) ,1,4)
		EndIf    
	EndIf    
Else
	//--Verifica se a Verba e Tarefa sera corrigida pelo valor atual
	If (nPosTa := Ascan(Pd,{ |x| SubStr(X,1,3) == cPd .AND. (!Empty(SubStr(X,19,3)) .AND. !('N'$SubStr(X,19,3))) } )) > 0
		If Len(aTarefa) = 0
			fCarTar(@aTarefa)
		EndIf
		cCodTarefa := SubStr(Pd[nPosTa],19,3)
		If Len(AllTrim(cCodTarefa)) == 3 //Existe codigo da tarefa na verba
			nPosTa := Ascan(aTarefa,{ |Z| Z[1] == cCodTarefa })
		Else
			nPosTa := Ascan(aTarefa,{ |Z| Z[2] == cPd })
		EndIf
		If nPosTa > 0 .AND. nHoras > 0
			nValor := nHoras * aTarefa[nPosTa,3]
		EndIf
		//--Verifica a existencia do Ponto de entrada para valorizar tarefas, 
		//--deve retornar a verba valorizada para calculo da media.  
		//--Esta enviando como parametro um array com 3 elemento coforme abaixo:
		//-- cVb := Paramixb[1]  // Verba
		//-- nVl := ParamIxb[2]  // Valor
		//-- nHr := ParamIxb[3]  // Horas
		If lGpMedTar                                
			If ( ValType( nRet := ExecBlock('GPMEDTAR' , .F. , .F. , { cPd , nValor , nHoras } ) ) == "N" )
				nValor := nRet
			EndIf	
        EndIf
		(cTBLXMED)->RP_VALATU := nValor
	//--Verifica se a Verba se Refere a Tabela, se for sera corrigida pelo valor atual
	ElseIf Ascan(Pd,{ |x| SubStr(X,1,3) == cPd .AND. SubStr(X,25,1) == "S" } ) > 0
		If ( !Empty(cCodTab) .AND. nLinTab > 0 .AND. nColTab > 0 )
			nValor := fTabela(cCodTab,nLinTab,nColTab)     
			nValor := nValor * nHoras / 100 
		EndIf
		(cTBLXMED)->RP_VALATU := nValor
    ElseIf nHoras > 0 .AND. cTipo1 # "V"
		If nSalh # Nil
			fIncide(cPd)
			nPosv := aScan(aPdv, { |Y| Y[1] = cPd })
			If lGPER080
				If aPdv[nPosv,34] != "2"
					(cTBLXMED)->RP_VALATU := ( nHoras * If(nGPALTTRP == 0, nSalHR080, nGPALTTRP) ) * ( nPerc / 100 )
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog( "nSalHR080 --> " + cValtoChar( If(nGPALTTRP == 0, nSalHR080, nGPALTTRP) ) ,1,4)
						fAddMemLog( "Valor Atual = ( nHoras * nSalHR080 ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
					EndIf
				ElseIf !((cTBLXMED)->RP_TIPO $ "A/3/4") .And. Type("aSalFER") <> "U" .And. (Len(aSalFER) > 0)
					(cTBLXMED)->RP_VALATU := ( nHoras * aSalFER[1][3] ) * ( nPerc / 100 )
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog( "aSalFER[1][3] --> " + cValtoChar(aSalFER[1][3]) ,1,4)
						fAddMemLog( "Valor Atual = ( nHoras * aSalFER[1][3] ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
					EndIf
				ElseIf ((cTBLXMED)->RP_TIPO $ "3") .And. Type("aSal13") <> "U" .And. (Len(aSal13) > 0)
					(cTBLXMED)->RP_VALATU := ( nHoras * aSal13[1][3] ) * ( nPerc / 100 )
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog( "aSal13[1][3] --> " + cValtoChar(aSal13[1][3]) ,1,4)
						fAddMemLog( "Valor Atual = ( nHoras * aSal13[1][3] ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
					EndIf
				ElseIf ((cTBLXMED)->RP_TIPO $ "4") .And. Type("aSalAP") <> "U" .And. (Len(aSalAP) > 0)
					(cTBLXMED)->RP_VALATU := ( nHoras * aSalAP[1][3] ) * ( nPerc / 100 )
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog( "aSalAP[1][3] --> " + cValtoChar(aSalAP[1][3]) ,1,4)
						fAddMemLog( "Valor Atual = ( nHoras * aSalAP[1][3] ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
					EndIf
				ElseIf ((cTBLXMED)->RP_TIPO $ "A") .And. Type("aSalFOL") <> "U" .And. (Len(aSalFOL) > 0)
					(cTBLXMED)->RP_VALATU := ( nHoras * aSalFOL[1][3] ) * ( nPerc / 100 )
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog( "aSalFOL[1][3] --> " + cValtoChar(aSalFOL[1][3]) ,1,4)
						fAddMemLog( "Valor Atual = ( nHoras * aSalFOL[1][3] ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
					EndIf
				ElseIf ( aPdv[nPosv,34] == "2" .or. (aCodFol[35,1] == cPd .and. ( nHoras * nSalHR080 ) * ( nPerc / 100 ) < nValor ) ) .and. nSalh > 0 //Se for base incorporada ou verba de DSR e valor atual for menor que valor anterior, efetua cálculo com valor hora incorporada
					(cTBLXMED)->RP_VALATU := ( nHoras * If( nGPALTTRP == 0, nSalh, nGPALTTRP) ) * ( nPerc / 100 )
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog( "nSalh --> " + cValtoChar(If( nGPALTTRP == 0, nSalh, nGPALTTRP)) ,1,4)
						fAddMemLog( "Valor Atual = ( nHoras * nSalh ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
					EndIf
				EndIf
			Else
				If ( IsInCallStack("GPEM070") .or. IsInCallStack("GPM070GRD") ) .and. ( aPdv[nPosv,34] == "2" .or. (aCodFol[35,1] == cPd .and. ( nHoras * nSalh ) * ( nPerc / 100 ) < nValor ) ) .and. nSalhInc > 0 //Se for base incorporada ou verba de DSR e valor atual for menor que valor anterior, efetua cálculo com valor hora incorporada
					(cTBLXMED)->RP_VALATU :=  ( nHoras * If(nGPALTTRP == 0, nSalhInc, nGPALTTRP) ) * ( nPerc / 100 )
					//Memória de cálculo
					If __lMemCalc
						fAddMemLog( "nSalhInc --> " + cValtoChar( If(nGPALTTRP == 0, nSalhInc, nGPALTTRP) ) ,1,4)
						fAddMemLog( "Valor Atual = ( nHoras * nSalhInc ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
					EndIf
				Else
					// Se for a verba do DSR HE, utilizar o salário incorporado na verba, pois a referência da verba foi gerada, no momento do cálculo
					// considerando o Valor do DSR divido pelo SalHora (Salario Hora Incorporado - GPEXCALC)
					If Len(aPdv) > 0 .And. ( aPdv[nPosv,34] == "2" .or. (aCodFol[35,1] == cPd .and. ( nHoras * nSalh ) * ( nPerc / 100 ) < nValor ) )
						(cTBLXMED)->RP_VALATU := ( nHoras * If(nGPALTTRP == 0, nSalh, nGPALTTRP) ) * ( nPerc / 100 )
						//Memória de cálculo
						If __lMemCalc
							fAddMemLog( "nSalh --> " + cValtoChar( If(nGPALTTRP == 0, nSalh, nGPALTTRP) ) ,1,4)
							fAddMemLog( "Valor Atual = ( nHoras * nSalh ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
						EndIf
					Else
						(cTBLXMED)->RP_VALATU := ( nHoras * If(nGPALTTRP == 0, SALHOR, nGPALTTRP) ) * ( nPerc / 100 )
						//Memória de cálculo
						If __lMemCalc
							fAddMemLog(  "SALHOR --> " + cValtoChar( If(nGPALTTRP == 0, SALHOR, nGPALTTRP) ) ,1,4)
							fAddMemLog( "Valor Atual = ( nHoras * SALHOR ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
						EndIf
					EndIf
				EndIf
			EndIf
		Else
			If SRA->RA_TIPOPGT = "M" .AND. SRA->RA_CATFUNC $ "M*C*T"
				nSalHora := SRA->RA_SALARIO / SRA->RA_HRSMES
				//Memória de cálculo
				If __lMemCalc
					fAddMemLog( "Salario Hora (nSalHora) = SRA->RA_SALARIO / SRA->RA_HRSMES--> " + cValtoChar(nSalHora) ,1,4)
				EndIf
			ElseIf SRA->RA_TIPOPGT = "S" .AND. SRA->RA_CATFUNC $ "S*T"
				nSalHora := SRA->RA_SALARIO / 7 * nDiasC / SRA->RA_HRSMES
				//Memória de cálculo
				If __lMemCalc
					fAddMemLog( "Salario Hora (nSalHora) = SRA->RA_SALARIO / 7 * nDiasC / SRA->RA_HRSMES--> " + cValtoChar(nSalHora) ,1,4)
				EndIf
			ElseIf SRA->RA_CATFUNC $ "H"
				nSalHora := SRA->RA_SALARIO
				//Memória de cálculo
				If __lMemCalc
					fAddMemLog( "Salario Hora (nSalHora) =SRA->RA_SALARIO--> " + cValtoChar(nSalHora) ,1,4)
				EndIf
			ElseIf SRA->RA_CATFUNC $ "D"
				nSalHora := ( SRA->RA_SALARIO * nDiasC ) / SRA->RA_HRSMES
				//Memória de cálculo
				If __lMemCalc
					fAddMemLog(  "Salario Hora (nSalHora) =( SRA->RA_SALARIO * nDiasC ) / SRA->RA_HRSMES--> " + cValtoChar(nSalHora) ,1,4)
				EndIf
			EndIf
			(cTBLXMED)->RP_VALATU := ( nHoras * nSalHora ) * ( nPerc / 100 )
			//Memória de cálculo
			If __lMemCalc
				fAddMemLog( "Valor Atual = ( nHoras * nSalHora ) * ( nPerc / 100 ) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
			EndIf
		EndIf
    ElseIf cReajus $ "RS"
      (cTBLXMED)->RP_VALATU := CALC_REAJ( nValor , dLim , cDatarq ,(cReajus=="S"))
	  //Memória de cálculo
	  If __lMemCalc
			fAddMemLog( "Valor Atual = CALC_REAJ( nValor , dLim , cDatarq ,(cReajus=='S')) --> " + cValtoChar((cTBLXMED)->RP_VALATU) ,1,4)
		EndIf
	Else
		(cTBLXMED)->RP_VALATU := nValor
	EndIf
EndIf

//?-Grava o maior valor entre Original e Atual pro "Comissionado"
If SRA->RA_CATFUNC == "C" .Or. lMedOrig
	(cTBLXMED)->RP_VALATU := MAX((cTBLXMED)->RP_VALOR,(cTBLXMED)->RP_VALATU)
EndIf

If lAlterou
	SalHor	:= nBkpSalhor
EndIf

MsUnlock()

If lGPMEDTRP
	Execblock("GPMEDTRP",.F.,.F.)
EndIf

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³CALC_REAJ ³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Calcula o Reajuste sobre o valor da Verba                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³CALC_REAJ(nValor , dLimite , cDatarq )					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nValor  -> Valor a ser Reajustado                          ³±±
±±³          ³ dLimite -> Data Limite para Reajuste                       ³±±
±±³          ³ cDatarq -> Ano/Mes do SRD a ser Considerado                ³±±
±±³          ³ lIndice -> Indica se deve reajustar pelo indice de reajuste³±±
±±³          ³             ou pela variacao do salario.                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function CALC_REAJ(nValor, dLimite, cDatarq, lIndice)
Local aTabS039	:= {}
Local cTab	 	:= "S039"
Local cFil		:= SRA->RA_FILIAL
Local cSindFunc	:= SRA->RA_SINDICA
Local cDtRefAnt	:= cDatarq
Local nValAtu 	:= 0
Local nValOri	:= 0 
Local nTab 		:= 0 
Local nX		:= 0 
Local nSizeSin	:= TamSX3("RA_SINDICA")[1]
Local nSizeTab	:= 0
Local dDtAux	:= StoD(cDatarq+"01")
Local dBkpRef	
Local lTroca 	:= .F.

If Type( "dDataref" ) <> "U"
	dBkpRef	:= dDataRef
	lTroca := .T.
EndIf

lIndice := If(lIndice == Nil, .T.,lIndice)

If lIndice
	freaj := 0
	If aScan( vTab,{|x| x[1] == cDatarq } ) == 0
		lPritab := "0"     
		vTab	:= {}
	EndIf	
	
	If lPritab = "0" .OR. lPritab = "9"
		fCarrTab( @aTabS039, cTab, , .T. )
		nSizeTab := Len(aTabS039)
		
		If nSizeTab > 0
			While AnoMes(dLimite) >= AnoMes(dDtAux)
				cDatarq := AnoMes(dDtAux)
				If !Empty(cFil)
					nPosTab := fPosTab( cTab,cSindFunc,"=",4,cFil,"=",1,,,,,,,,,StoD(cDatarq+"01"))
					If nPosTab == 0
						nPosTab := fPosTab( cTab,Space(nSizeSin),"=",4,cFil,"=",1,,,,,,,,,StoD(cDatarq+"01"))
						If nPosTab == 0
							cFil := Space(FWGetTamFilial)
							nPosTab := fPosTab( cTab,cSindFunc,"=",4,cFil,"=",1,,,,,,,,,StoD(cDatarq+"01"))
						Else
							cSindFunc := Space(nSizeSin)
						EndIf
					EndIf
				Else
					cFil := Space(FWGetTamFilial)
					nPosTab := fPosTab( cTab,cSindFunc,"=",4,cFil,"=",1,,,,,,,,,StoD(cDatarq+"01"))
				EndIf
				
				If nPosTab == 0
					cSindFunc := Space(nSizeSin)
					nPosTab := fPosTab( cTab,cSindFunc,"=",4,cFil,"=",1,,,,,,,,,StoD(cDatarq+"01"))
				EndIf
				
				If nPosTab > 0
			
					lPriTab := "1"
					While .T.
						aAdd(vTab ,{ fTabela(cTab,nPosTab,2,StoD(cDatarq+"01")) , fTabela(cTab,nPosTab,5,StoD(cDatarq+"01"))} )
						            
						nPosTab++
						If nSizeTab >= nPosTab
							If !( fTabela(cTab,nPosTab,4,StoD(cDatarq+"01")) == cSindFunc .and. fTabela(cTab,nPosTab,1,StoD(cDatarq+"01")) == cFil )
								Exit
							EndIf
						Else
							Exit
						EndIf
					EndDo
				Else
					If Len(vTab) == 0
						lPriTab := "9"
					EndIf
				EndIf
				dDtAux := MonthSum( dDtAux , 1 )
			EndDo
		EndIf					
  
		aSort( vTab,,,{ |x,y| x[1] > y[1] } )
	EndIf
	
	cDatarq := cDtRefAnt

	If lPritab = "1"
		For nTab = 1 To Len(vTab)
			If cDatarq <= vTab[nTab,1]
				nValor *= ( 1 + ( vTab[nTab,2] / 100 ) )
				nValor := Round( nValor , 2 )
			EndIf
		Next nTab
	EndIf
Else
	If Len(aAumentos) == 0
		DbSelectArea("SR3")
	   	DbSeek(SRA->RA_FILIAL+SRA->RA_MAT)
	   	
		While !Eof() .AND. SRA->RA_FILIAL+SRA->RA_MAT==R3_FILIAL+R3_MAT
			AAdd(aAumentos,{SR3->R3_DATA,SR3->R3_VALOR})	
			DbSkip()
	   Enddo
	EndIf

   //Procurar o valor base do salario
	For nX:=1	To Len(aAumentos)
		If Substr(DTOS(aAumentos[nX][1]),1,6) == cDatarq
			nValori	:=	aAumentos[nX][2]
			Exit
		ElseIf Substr(DTOS(aAumentos[nX][1]),1,6) > cDatarq
			If nX > 1
				nValori	:=	aAumentos[nX-1][2]
			EndIf
			Exit						
		EndIf
	Next			

	//Procurar o valor do salario na data limite
	For nX:=1	To Len(aAumentos)+1
		If nX == (Len(aAumentos)+1).OR. Substr(DTOS(aAumentos[nX][1]),1,6) >= Substr(Dtos(dLimite),1,6)
			If nX > 1
				nValAtu	:=	aAumentos[nX-1][2]
			Else
				nValAtu	:=	nValOri
			EndIf
			Exit
		EndIf
	Next			

	If nValAtu*nValOri > 0
		nValor   *= (nValAtu/nValOri)
	EndIf
EndIf

If lTroca
	dDataRef:= dBkpRef	
EndIf
dbSelectArea( cTBLXMED )

Return( nValor )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³GRA_TOT   ³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Grava a Media ou o Total de cada verba                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³GRA_TOT(cMat,cTipo,cPd,dDataArq,nHor,nOri,nAtu,cTipo1,nMeses³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cTipo = 1 - Ferias Vencidas                                ³±±
±±³			 ³         2 - Ferias A vencer                                ³±±
±±³			 ³         4 - Rescisao                                       ³±±
±±³			 ³         3 - Decimo Terceiro                                ³±±
±±³			 ³ cPd   = Codigo do provento/desconto                        ³±±
±±³			 ³         999 - Media ou Total                               ³±±
±±³			 ³         998 - Totalizador de Faltas                        ³±±
±±³			 ³         997 - Totalizador do Adiantamento do 13o Salario   ³±±
±±³			 ³ nHor  = TOTAL ou MEDIA das horas                           ³±±
±±³			 ³ nOri  = TOTAL ou MEDIA do Valor de Origem                  ³±±
±±³			 ³ nAtu  = TOTAL ou MEDIA do Valor Atual                      ³±±
±±³			 ³ cTipo1= H - Horas                                          ³±±
±±³			 ³         V - Valor                                          ³±±
±±³			 ³ nMeses= Numero de Meses Para Dividir as Medias             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GRA_TOT(cMat,cTipo,cPd,dDatarq,nHor,nOri,nAtu,cTipo1,nMeses,lFalta13)

Local nMaxHoras  := 999999.99

Default lFalta13 := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se existe registro do func. solicitado e deleta     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea(cTBLXMED )

RecLock(cTBLXMED,.T.)
(cTBLXMED)->RP_FILIAL   := SRA->RA_FILIAL
(cTBLXMED)->RP_MAT      := cMat
(cTBLXMED)->RP_TIPO     := cTipo
(cTBLXMED)->RP_DATARQ   := dDatarq
(cTBLXMED)->RP_TIPO1    := cTipo1
(cTBLXMED)->RP_PD       := cPd
(cTBLXMED)->RP_HORAS    := Min( nHor, nMaxHoras )
(cTBLXMED)->RP_VALOR    := nOri
(cTBLXMED)->RP_VALATU   := Iif(SRA->RA_CATFUNC=="C",MAX(nOri,nAtu),nAtu)	//?-Grava o maior valor entre Original e Atual pro "Comissionado"
(cTBLXMED)->RP_MESMEDI  := nMeses
If lFalta13
	(cTBLXMED)->RP_DATPGT   := LastDate( sToD(dDatarq+"01") )
EndIf

MsUnlock()

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCargaPro ³ Autor ³ Recursos Hunanos      ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carregar Array de Proventos                              	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fCargaPro(cFil,Pd,aCodFol) 								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fCargaPro(cFil,Pd,acodfol)

Local cAlias		:= Alias()
Local cVerbas_Aux	:= ""
Local nSvOrdSRV
Local nVb			:= 0
Local uRet

dbSelectArea( "SRV" )
nSvOrdSRV	:= SRV->( IndexOrd() )	//Salva Ordem do SRV
dbSetOrder( 04 )					//Seleciona Ordem por Tipo de Codigo 

DEFAULT cFil := xFilial("SRV", SRA->RA_FILIAL)

If dbSeek( cFil + "1" , .T. )  //Posiciona no Tipo Provento
	If !lMedHoras .Or. FunName() == "GPER080"  .Or. lDemCalc
		While !Eof() .And. SRV->RV_FILIAL == cFil
			If (SRV->RV_MEDFER $ "S şSPş01ş02ş03ş04ş05ş06ş07ş08ş09ş10ş11ş12" .Or.	;
				SRV->RV_MED13  $ "S şSPş01ş02ş03ş04ş05ş06ş07ş08ş09ş10ş11ş12" .Or.	;
				SRV->RV_MEDAVI $ "S şSPş01ş02ş03ş04ş05ş06ş07ş08ş09ş10ş11ş12")
   				Aadd(Pd,+ SRV->RV_COD + SRV->RV_MEDFER + SRV->RV_MED13 + SRV->RV_MEDAVI + SRV->RV_MEDREAJ + SRV->RV_HE + Transform(SRV->RV_PERC,"999.999") + SRV->RV_TAREFA + SRV->RV_GRAMED)
			EndIf
			dbSkip()
		Enddo
	Endif
	If lMedHoras
		//Busca as verbas que estão no grupo 0 (RV_GRPVERB)
		gp140GrpVerb(cFil,@cVerbas_Aux,"0",.T.)
		If LEN(cVerbas_Aux) > 0
			SRV->(dbSetOrder(1))
			//Inclui as verbas do grupo 0 na média salarial.
			For nVb = 1 to LEN(cVerbas_Aux) Step 3
				SRV->(dbSeek(cFil+SubStr(cVerbas_Aux,nVb,3)))
				Aadd(Pd,+ SubStr(cVerbas_Aux,nVb,3) + "S " + "S " + "S " + SRV->RV_MEDREAJ + SRV->RV_HE + Transform(SRV->RV_PERC,"999.999") + SRV->RV_TAREFA + SRV->RV_GRAMED)
			Next nVb
		EndIf
	EndIf
Else
	If GetRemoteType() == -1
		MsgLogGrid( Ap5GetHelp("GPXMEDSSRV"), .F. ) // Retornar string da funcao Help
	Else
		Help(" ",1,"GPXMEDSSRV")
	EndIf
	dbSetOrder( nSvOrdSRV ) // Restaura Ordem do SRV
	dbSelectArea( cAlias )
	Return( .F. )
EndIf

dbSetOrder( nSvOrdSRV ) // Restaura Ordem do SRV
dbSelectArea( cAlias )

If ExistBlock("GPXPDMED")
	uRet	:= Execblock("GPXPDMED",.F.,.F.,PD)
	If ValType(uRet) == "A"
		PD := aClone(uRet)
	EndIf
EndIf

Return( .T. )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³CAL_X_FALT³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ConVerte Faltas em Dias                                	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³									 						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function CAL_X_FALTAS(	cAlias,;		// indica o alias que sera utilizado para calcular a qtde de dias
								cTipoCalc,;		// indica o tipo 1=Acumulado 2=Mensal 3=Apd
								nX,;			// indica a posicao do aPd que devo considerar para buscar as faltas
								lSuspDisc,;		// indica se é suspensão disciplinar
								nDiasSusp)		// indica os dias da suspensão disciplinar

Local nHrs := 0

DEFAULT cTipocalc	:= "1"
DEFAULT nX	  		:= 0
DEFAULT lSuspDisc	:= .F.
DEFAULT nDiasSusp	:= 0

If lSuspDisc
	Return nDiasSusp
Else
	If cTipoCalc == "1"
		If (cAlias)->RD_TIPO1 = "D"
			Return (cAlias)->RD_HORAS
		ElseIf (cAlias)->RD_TIPO1 = "H"
			nHrs := gpRetSR9("SR9", (cAlias)->RD_DATPGT, "RA_HRSDIA")
			nHrs := If(Empty(nHrs),SRA->RA_HRSDIA,nHrs)
			Return ((cAlias)->RD_HORAS/nHrs)
		EndIf
	ElseIf cTipoCalc == "2"
		If (cAlias)->RC_TIPO1 = "D"
			Return (cAlias)->RC_HORAS
		ElseIf (cAlias)->RC_TIPO1 = "H"
			nHrs := gpRetSR9("SR9", (cAlias)->RC_DATA, "RA_HRSDIA")
			nHrs := If(Empty(nHrs),SRA->RA_HRSDIA,nHrs)
			Return ((cAlias)->RC_HORAS/nHrs)
		EndIf
	ElseIf cTipoCalc == "3"
		If aPd[nX,6] = "D"		// Tipo 1
			Return aPd[nX,4]
		ElseIf aPd[nX,6] = "H"	// Tipo 1
			nHrs := gpRetSR9("SR9", aPd[nX,10], "RA_HRSDIA")
			nHrs := If(Empty(nHrs),SRA->RA_HRSDIA,nHrs)
			Return (aPd[nX,4]/nHrs)
		EndIf
	EndIf
EndIf

Return 0

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Tot_Vetor ³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ 							                               	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³									 						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Tot_Vetor(fvet)

Local aelem
Local sumblock  := { | aelem | sumtot += aelem}
sumtot := 0
AEVAL(fvet,sumblock)

Return(sumtot)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fComissao	³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Calcular a Medias das 3 Maiores dos ultimos 12 Meses       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fComissao(cMatricula,cTipo,cVerba)						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fComissao(cMatricula,cTipo,cVerba,nQualMed)

Local cAlias   	:= Alias()
Local aComiss  	:= {}
Local nCountC  	:= 0
Local nI 		:= 0 

Local nHr_sArr := 0
Local nVO_sArr := 0
Local nVA_sArr := 0

nTHoras := nTVOrig := nTVAtua := 0
dbSelectArea(cTBLXMED)
If dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + cTipo + cVerba )
	While !Eof() .AND. SRA->RA_FILIAL + SRA->RA_MAT + cTipo + cVerba == (cTBLXMED)->RP_FILIAL + (cTBLXMED)->RP_MAT + (cTBLXMED)->RP_TIPO + (cTBLXMED)->RP_PD
		Aadd( aComiss , { (cTBLXMED)->RP_VALATU , (cTBLXMED)->RP_VALOR , (cTBLXMED)->RP_HORAS } )
		dbSkip()
	Enddo

	If Len( aComiss ) > 0
		aSort( aComiss,,,{ |x,y| x[1] > y[1] } )
		For Ni = 1 To If( Len( aComiss ) < nComiss , Len( aComiss ) , nComiss )
			nTHoras += aComiss[Ni,3]
			nTVOrig += aComiss[Ni,2]
			nTVAtua += aComiss[Ni,1]
			nCountC ++
		Next Ni

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grava o Registro com o Total da Verba                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		GRA_TOT(cMatricula,cTipo,cVerba,"9998",nTHoras,nTVOrig,nTVAtua,"N",0)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula e Grava a Media das 3 Maiores dos ultimos 12 meses      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nMHoras := Round( nTHoras / nCountC, 2 )
		nMVOrig := Round( nTVOrig / nCountC, 2 )
		nMVAtua := Round( nTVAtua / nCountC, 2 )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valores sem arredondamento     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nHr_sArr := nTHoras / nCountC
		nVO_sArr := nTVOrig / nCountC
		nVA_sArr := nTVAtua / nCountC

		GRA_TOT(cMatricula,cTipo,cVerba,"9999",nMHoras,nMVOrig,nMVAtua,"N",nCountC)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula e Grava a Media Total da Verba por 12                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTipo$ "2*3" .AND. cMedDir == "N"
		   nDHoras := Round( (nHr_sArr * nQualMed) / 12, 2 )
		   nDVOrig := Round( (nVO_sArr * nQualMed) / 12, 2 )
		   nDVAtua := Round( (nVA_sArr * nQualMed) / 12, 2 )
			GRA_TOT(cMatricula,cTipo,cVerba,"99MD",nDHoras,nDVOrig,nDVAtua,"N",nQualMed)
		Else
			nDHoras := nMHoras
			nDVOrig := nMVOrig
			nDVAtua := nMVAtua
			GRA_TOT(cMatricula,cTipo,cVerba,"99MD",nDHoras,nDVOrig,nDVAtua,"N",nCountC)
		EndIf


		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Acumula Variaveis para Totais Gerais                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nTTHoras += nTHoras   // Total de Horas
		nTTVOrig += nTVOrig   // Valor Total Original
		nTTVAtua += nTVAtua   // Valor Total Atual

		nTMHoras += nMHoras   // Media de Horas (pela incidencia)
		nTMVOrig += nMVOrig   // Media do Valor Original
		nTMVAtua += nMVAtua   // Media do Valor Atual

		nTDHoras += nDHoras   // Media de Horas (por 12)
		nTDVOrig += nDVOrig   // Media do Valor Original
		nTDVAtua += nDVAtua   // Media do Valor Atual

		//--Tatais quando  Nao e' Hora Extra
		nNHETHoras += nTHoras   // Total de Horas
		nNHETVOrig += nTVOrig   // Valor Total Original
		nNHETVAtua += nTVAtua   // Valor Total Atual
		nNHEMHoras += nMHoras   // Media de Horas (pela incidencia)
		nNHEMVOrig += nMVOrig   // Media do Valor Original
		nNHEMVAtua += nMVAtua   // Media do Valor Atual
		nNHEDHoras += nDHoras   // Media de Horas (por 12)
		nNHEDVOrig += nDVOrig   // Media do Valor Original
		nNHEDVAtua += nDVAtua   // Media do Valor Atual

	EndIf
EndIf

dbSelectArea( cAlias )

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCalMed	³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Calcular a Medias e gravar no Trp 						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fCalMed(cMatricula,cTipo,cVerba,dDtBase,cMeses,nQualMed,	  ³±±
±±³          ³        cTipHV,cTipMed,lMesAtu)                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fCalMed(cMatricula,cTipo,cVerba,dDtBase,cMeses,nQualMed,cTipHv,cTipMed,lMesAtu,cMedVerba,dDtResc)

Local cAlias   := Alias()
Local aAreaSRV := SRV->( GetArea() )
Local aMed[4,5]
Local nVezes 	:= 0
Local nX		:= 0 
Local cAMesAte 	:= " "
Local cTipoPD	:= RetValSRV(cVerba, SRA->RA_FILIAL, "RV_TIPOCOD")
Local lMesmoAno	:= .F.
Local nDivisor	:= 0
Local nQtdMeses	:= 0

Local cAnoMes1 := MesAno(SubMeses(dDtResc,If (lMesAtu,aSind[1,2]-1,aSind[1,2]) ))
Local cAnoMes2 := MesAno(SubMeses(dDtResc,If (lMesAtu,aSind[2,2]-1,aSind[2,2]) ))
Local cAnoMes3 := MesAno(SubMeses(dDtResc,If (lMesAtu,aSind[3,2]-1,aSind[3,2]) ))
Local cAnoMes4 := MesAno(SubMeses(dDtResc,If (lMesAtu,aSind[4,2]-1,aSind[4,2]) ))

Local nHr_sArr := 0
Local nVO_sArr := 0
Local nVA_sArr := 0

Local cVerbas_Aux	:= ""

//Busca as verbas que irão compor a média salarial (HOJORVA)
gp140GrpVerb(xFilial("SRV"),@cVerbas_Aux,"0",.F.)

//--Verifica ate que mes considera para media sindicato
If lMesAtu
	cAMesAte := MesAno(dDtBase)
Else
   cAMesAte := MesAno(SubMeses(dDtBase,1))
EndIf

If cMedVerba == "S "
	For Nx = 1 to 4
		nVezes += If (aSind[Nx,1] == 'S' , 1 , 0)
		//Se for media de 13 salario, não deve verificar se tem menos de 1 ano trabalhado.
		//verifica-se se o funcionario foi admitido no ano do calculo.
		If cTipo <> "3"
			aMed[Nx,1] := If (nDTrab < 365 .and. nQualMed < aSind[nx,2] ,StrZero(nQualMed,2), StrZero(aSind[Nx,2],2) )
		Else
			lMesmoAno:= SUBSTR(cDataI[3],1,4) == STR(YEAR(SRA->RA_ADMISSA),4)
			//Se foi admitido em ano anterior ao calculo utiliza a media cheia, senao faz a proporcao.
			aMed[Nx,1] := If (lMesmoAno .and. nQualMed < aSind[nx,2] ,StrZero(nQualMed,2), StrZero(aSind[Nx,2],2) )
		Endif
		aMed[Nx,2] := 0.00
		aMed[Nx,3] := 0.00
		aMed[Nx,4] := 0.00
		aMed[Nx,5] := 0.00
	Next Nx
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada para alterar configuração de médias das verbas ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lGpMedPer
	cAnoMes1 := cPer1
	cAnoMes2 := cPer2
	cAnoMes3 := cPer3
	cAnoMes4 := cPer4
	cAMesAte := cPerAte
EndIf

If nThoras+nTVOrig+nTVAtua # 0

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grava o Registro com o Total da Verba                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	GRA_TOT(cMatricula,cTipo,cVerba,"9998",nTHoras,nTVOrig,nTVAtua,cTipHV,0)

	//Memória de cálculo
	If __lMemCalc
		fAddMemLog("Total Verba " + cVerba + " - " + Alltrim(SRV->RV_DESC) + " : "   ,1,3)
		fAddMemLog("Tipo|Horas|Vlr. Original|Valor Atual|HE?|"  ,1,4)
		fAddMemLog("Total|" + cValtoChar(nTHoras) + "|" + cValtoChar(nTVOrig) + "|" + cValtoChar(nTVAtua) + "|" + cValtoChar(cTipHV) + "|"   ,1,4)
	EndIf

	//--Calculo da Media Para Verificar Qual a Maior entre 3,6,9 ou 12.
	IF cMedDir = 'N' .And. nVezes >= 1 .And. cTipMed # 'SP' .and. cTipo!="A"

		dbSelectArea(cTBLXMED)
		If dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + cTipo + cVerba )
			While !Eof() .And. SRA->RA_FILIAL + SRA->RA_MAT + cTipo + cVerba == (cTBLXMED)->RP_FILIAL + (cTBLXMED)->RP_MAT + (cTBLXMED)->RP_TIPO + (cTBLXMED)->RP_PD

				//-- Soma Para Medias Dos 3 Ultimos Meses
				If aSind[1,1] == 'S' .And. (cTBLXMED)->RP_DATARQ >= cAnoMes1 .And. (cTBLXMED)->RP_DATARQ <= cAMesAte
					aMed[1,2] +=  (cTBLXMED)->RP_HORAS
					aMed[1,3] +=  (cTBLXMED)->RP_VALOR
					aMed[1,4] +=  (cTBLXMED)->RP_VALATU
				EndIf

				//-- Soma Para Medias Dos 6 Ultimos Meses
				If aSind[2,1] == 'S' .And. (cTBLXMED)->RP_DATARQ >= cAnoMes2 .And. (cTBLXMED)->RP_DATARQ <= cAMesAte
					aMed[2,2] +=  (cTBLXMED)->RP_HORAS
					aMed[2,3] +=  (cTBLXMED)->RP_VALOR
					aMed[2,4] +=  (cTBLXMED)->RP_VALATU
				EndIf

				//-- Soma Para Medias Dos 9 Ultimos Meses
				If aSind[3,1] == 'S' .And. (cTBLXMED)->RP_DATARQ >= cAnoMes3 .And. (cTBLXMED)->RP_DATARQ <= cAMesAte
					aMed[3,2] +=  (cTBLXMED)->RP_HORAS
					aMed[3,3] +=  (cTBLXMED)->RP_VALOR
					aMed[3,4] +=  (cTBLXMED)->RP_VALATU
				EndIf

				//-- Soma Para Medias Dos 12 Ultimos Meses
				If aSind[4,1] == 'S' .And. (cTBLXMED)->RP_DATARQ >= cAnoMes4 .And. (cTBLXMED)->RP_DATARQ <= cAMesAte
					aMed[4,2] +=  (cTBLXMED)->RP_HORAS
					aMed[4,3] +=  (cTBLXMED)->RP_VALOR
					aMed[4,4] +=  (cTBLXMED)->RP_VALATU
				EndIf
				dbSkip()
			Enddo

			//--Calcula  para Saber Qual a Maior
			If aMed[1,4] > 0
				aMed[1,5] := Round(aMed[1,4] / Val(aMed[1,1]),2)
			EndIf
			If aMed[2,4] > 0
				aMed[2,5] := Round(aMed[2,4] / Val(aMed[2,1]),2)
			EndIf
			If aMed[3,4] > 0
				aMed[3,5] := Round(aMed[3,4] / Val(aMed[3,1]),2)
			EndIf
			If aMed[4,4] > 0
				aMed[4,5] := Round(aMed[4,4] / Val(aMed[4,1]),2)
			EndIf
			//--Sortear o Array
			aSort( aMed,,,{ |x,y| x[5] < y[5] } )

			//--Grava Total da Maior entre 3,6,9 ou 12.
			If aMed[4,2]+aMed[4,3]+aMed[4,4] > 0
				nMHoras := Round( aMed[4,2] / Val(aMed[4,1]), 2 )
				nMVOrig := Round( aMed[4,3] / Val(aMed[4,1]), 2 )
				nMVAtua := Round( aMed[4,4] / Val(aMed[4,1]), 2 )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Valores sem arredondamento     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nHr_sArr := aMed[4,2] / Val(aMed[4,1])
				nVO_sArr := aMed[4,3] / Val(aMed[4,1])
				nVA_sArr := aMed[4,4] / Val(aMed[4,1])
				
				If cPaisLoc == "PER"
					nHr_sArr := fCalMedPer(cVerba,nHr_sArr)
					nVO_sArr := fCalMedPer(cVerba,nVO_sArr)
					nVA_sArr := fCalMedPer(cVerba,nVA_sArr)
				EndIf				
		
				GRA_TOT(cMatricula,cTipo,cVerba,"9999",nMHoras,nMVOrig,nMVAtua,cTipHV,Val(aMed[4,1]))
				//Memória de cálculo
				If __lMemCalc
					fAddMemLog("Incidencia " +  "("+cValtoChar(aMed[4,1])+") |" + cValtoChar(nMHoras) + "|" + cValtoChar(nMVOrig) + "|" + cValtoChar(nMVAtua) + "|" + cValtoChar(cTipHV) + "|"   ,1,4)
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Calcula e Grava a Media Total da Verba por 12                   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !(cTipo $ "3/4/5/A")
					nDivisor	:= aTabFer[1]
					nQtdMeses	:= Min(nQualMed, aTabFer[1])
				Else
					nDivisor	:= 12
					nQtdMeses	:= nQualMed
				EndIf
				nDHoras := Round( (nHr_sArr * nQtdMeses)  / nDivisor, 2 )
				nDVOrig := Round( (nVO_sArr * nQtdMeses)  / nDivisor, 2 )
				nDVAtua := Round( (nVA_sArr * nQtdMeses)  / nDivisor, 2 )
	   			GRA_TOT(cMatricula,cTipo,cVerba,"99MD",nDHoras,nDVOrig,nDVAtua,cTipHV,nDivisor)
				//Memória de cálculo
				If __lMemCalc
					fAddMemLog("Por ("+cValToChar(nDivisor)+") |" + cValtoChar(nDHoras) + "|" + cValtoChar(nDVOrig) + "|" + cValtoChar(nDVAtua) + "|" + cValtoChar(cTipHV) + "|"   ,1,4)
				EndIf
				
			EndIf
		EndIf
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula e Grava a Media Total da Verba Conforme Incidencia      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cMeses 	:= If( cTipo =="A",Str(nQualMed),If(Val(cMeses) > 0 , cMeses , "1" )) 
		nMHoras := Round( nTHoras / Val(cMeses), 2 )
		nMVOrig := Round( nTVOrig / Val(cMeses), 2 )
		nMVAtua := Round( nTVAtua / Val(cMeses), 2 )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valores sem arredondamento     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nHr_sArr := nTHoras / Val(cMeses)
		nVO_sArr := nTVOrig / Val(cMeses)
		nVA_sArr := nTVAtua / Val(cMeses)
		
		If cPaisLoc == "PER"
			nHr_sArr := fCalMedPer(cVerba,nHr_sArr)
			nVO_sArr := fCalMedPer(cVerba,nVO_sArr)
			nVA_sArr := fCalMedPer(cVerba,nVA_sArr)
		EndIf		

		GRA_TOT(cMatricula,cTipo,cVerba,"9999",nMHoras,nMVOrig,nMVAtua,cTipHV,Val(cMeses) )
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog("Incidencia ("+cValtoChar(cMeses)+") |" + cValtoChar(nMHoras) + "|" + cValtoChar(nMVOrig) + "|" + cValtoChar(nMVAtua) + "|" + cValtoChar(cTipHV) + "|"   ,1,4)
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula e Grava a Media Total da Verba por 12                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !(cTipo $ "3/4/5/A")
			nDivisor	:= aTabFer[1]
			nQtdMeses	:= Min(nQualMed, aTabFer[1])
		Else
			nDivisor	:= 12
			nQtdMeses	:= nQualMed
		EndIf
 	  	nDHoras := If((cMedDir == "S" .And. cTipMed == "S ") .or. cTipo=="A" ,nMHoras,Round( (nHr_sArr * nQtdMeses) / nDivisor, 2 ))
	   	nDVOrig := If((cMedDir == "S" .And. cTipMed == "S ") .or. cTipo=="A" ,nMVOrig,Round( (nVO_sArr * nQtdMeses) / nDivisor, 2 ))
	   	nDVAtua := If((cMedDir == "S" .And. cTipMed == "S ") .or. cTipo=="A" ,nMVAtua,Round( (nVA_sArr * nQtdMeses) / nDivisor, 2 ))
       
		GRA_TOT(cMatricula,cTipo,cVerba,"99MD",nDHoras,nDVOrig,nDVAtua,cTipHV,If((cMedDir == "S" .And. cTipMed == "S ") .or. cTipo=="A" ,nQtdMeses,nDivisor) )
		//Memória de cálculo
		If __lMemCalc
			fAddMemLog("Por ("+ cValToChar(If((cMedDir == "S" .And. cTipMed == "S ") .or. cTipo=="A" ,nQtdMeses,nDivisor))+") |" + cValtoChar(nDHoras) + "|" + cValtoChar(nDVOrig) + "|" + cValtoChar(nDVAtua) + "|" + cValtoChar(cTipHV) + "|"   ,1,4)
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Acumula Variaveis para Totais Gerais                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cTipoPD $ "1*3"
		nTTHoras += nTHoras   // Total de Horas
		nTTVOrig += nTVOrig   // Valor Total Original
		nTTVAtua += nTVAtua   // Valor Total Atual
	
		nTMHoras += nMHoras   // Media de Horas (pela incidencia)
		nTMVOrig += nMVOrig   // Media do Valor Original
		nTMVAtua += nMVAtua   // Media do Valor Atual
	
		nTDHoras += nDHoras   // Media de Horas (por 12)
		nTDVOrig += nDVOrig   // Media do Valor Original
		nTDVAtua += nDVAtua   // Media do Valor Atual
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica e acumula totais de Horas Extras e Outros              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTipHV == "S"  // E' Hora Extra
			nHETHoras += nTHoras    // Total de Horas
			nHETVOrig += nTVOrig    // Valor Total Original
			nHETVAtua += nTVAtua    // Valor Total Atual
			nHEMHoras += nMHoras    // Media de Horas (pela incidencia)
			nHEMVOrig += nMVOrig    // Media do Valor Original
			nHEMVAtua += nMVAtua    // Media do Valor Atual
			nHEDHoras += nDHoras    // Media de Horas (por 12)
			nHEDVOrig += nDVOrig    // Media do Valor Original
			nHEDVAtua += nDVAtua    // Media do Valor Atual
		ElseIf lTemJorVar .And. cVerba $ cVerbas_Aux // Verbas do Grupo 0
			nGR0THoras += nTHoras    // Total de Horas
			nGR0TVOrig += nTVOrig    // Valor Total Original
			nGR0TVAtua += nTVAtua    // Valor Total Atual
			nGR0MHoras += nMHoras    // Media de Horas (pela incidencia)
			nGR0MVOrig += nMVOrig    // Media do Valor Original
			nGR0MVAtua += nMVAtua    // Media do Valor Atual
			nGR0DHoras += nDHoras    // Media de Horas (por 12)
			nGR0DVOrig += nDVOrig    // Media do Valor Original
			nGR0DVAtua += nDVAtua    // Media do Valor Atual
		Else  // Nao e' Hora Extra
			nNHETHoras += nTHoras   // Total de Horas
			nNHETVOrig += nTVOrig   // Valor Total Original
			nNHETVAtua += nTVAtua   // Valor Total Atual
			nNHEMHoras += nMHoras   // Media de Horas (pela incidencia)
			nNHEMVOrig += nMVOrig   // Media do Valor Original
			nNHEMVAtua += nMVAtua   // Media do Valor Atual
			nNHEDHoras += nDHoras   // Media de Horas (por 12)
			nNHEDVOrig += nDVOrig   // Media do Valor Original
			nNHEDVAtua += nDVAtua   // Media do Valor Atual
		Endif
	Else
		nTTHoras += nTHoras * (-1)   // Total de Horas
		nTTVOrig += nTVOrig * (-1)   // Valor Total Original
		nTTVAtua += nTVAtua * (-1)   // Valor Total Atual
	
		nTMHoras += nMHoras * (-1)   // Media de Horas (pela incidencia)
		nTMVOrig += nMVOrig * (-1)   // Media do Valor Original
		nTMVAtua += nMVAtua * (-1)   // Media do Valor Atual
	
		nTDHoras += nDHoras * (-1)   // Media de Horas (por 12)
		nTDVOrig += nDVOrig * (-1)   // Media do Valor Original
		nTDVAtua += nDVAtua * (-1)   // Media do Valor Atual
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica e acumula totais de Horas Extras e Outros              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTipHV == "S"  // E' Hora Extra
			nHETHoras += nTHoras * (-1)    // Total de Horas
			nHETVOrig += nTVOrig * (-1)    // Valor Total Original
			nHETVAtua += nTVAtua * (-1)    // Valor Total Atual
			nHEMHoras += nMHoras * (-1)    // Media de Horas (pela incidencia)
			nHEMVOrig += nMVOrig * (-1)    // Media do Valor Original
			nHEMVAtua += nMVAtua * (-1)    // Media do Valor Atual
			nHEDHoras += nDHoras * (-1)    // Media de Horas (por 12)
			nHEDVOrig += nDVOrig * (-1)    // Media do Valor Original
			nHEDVAtua += nDVAtua * (-1)    // Media do Valor Atual
		ElseIf lTemJorVar .And. cVerba $ cVerbas_Aux // Verbas do Grupo 0
			nGR0THoras += nTHoras * (-1)   // Total de Horas
			nGR0TVOrig += nTVOrig * (-1)   // Valor Total Original
			nGR0TVAtua += nTVAtua * (-1)   // Valor Total Atual
			nGR0MHoras += nMHoras * (-1)   // Media de Horas (pela incidencia)
			nGR0MVOrig += nMVOrig * (-1)   // Media do Valor Original
			nGR0MVAtua += nMVAtua * (-1)  // Media do Valor Atual
			nGR0DHoras += nDHoras * (-1)  // Media de Horas (por 12)
			nGR0DVOrig += nDVOrig * (-1)   // Media do Valor Original
			nGR0DVAtua += nDVAtua * (-1)   // Media do Valor Atual
		Else  // Nao e' Hora Extra
			nNHETHoras += nTHoras * (-1)   // Total de Horas
			nNHETVOrig += nTVOrig * (-1)   // Valor Total Original
			nNHETVAtua += nTVAtua * (-1)   // Valor Total Atual
			nNHEMHoras += nMHoras * (-1)   // Media de Horas (pela incidencia)
			nNHEMVOrig += nMVOrig * (-1)   // Media do Valor Original
			nNHEMVAtua += nMVAtua * (-1)   // Media do Valor Atual
			nNHEDHoras += nDHoras * (-1)   // Media de Horas (por 12)
			nNHEDVOrig += nDVOrig * (-1)   // Media do Valor Original
			nNHEDVAtua += nDVAtua * (-1)   // Media do Valor Atual
		Endif	
	Endif
EndIf

RestArea( aAreaSRV )
dbSelectArea( cAlias )

Return Nil


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SubMeses  ³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ 							                               	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³									 						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function SubMeses(dData,nMenos)
Local dDtMenos
Local nMes := Month(dData)
Local nAno := Year(dData)
Local n 	:= 0 

For n = 1 To nMenos
	nMes := nMes - 1
	If nMes = 0
		nMes := 12
		nAno -= 1
	EndIf
Next
dDtMenos := Ctod("01/"+StrZero(nMes,2)+"/"+StrZero(nAno,4) , "DDMMYY" )
Return(dDtMenos)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCarTar   ³ Autor ³ Recursos Hunano       ³ Data ³ 20/07/94 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ 							                               	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³									 						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fCarTar(aTarefa)
Local aArea 	:= GetArea()
Local aTabS070  := {}
Local cTab		:= "S070"
Local nSizeTab	:= 0
Local nPosTab	:= 0

fCarrTab( @aTabS070, cTab, , .T. )
nSizeTab := Len(aTabS070)

For nPosTab := 1 to nSizeTab
	aAdd(aTarefa,{ fTabela(cTab,nPosTab,4) , fTabela(cTab,nPosTab,7) , fTabela(cTab,nPosTab,6)})
Next nPosTab

RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fFalVenc  |Autor  ³ Recursos Hunano       ³ Data ³ 16/03/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Gravar as faltas de ferias vencidas por periodo            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fFalVenc(aPerVenc, lSomar) 								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aPerVenc - Array Contendo os Periodos de Ferias Vencidas	  ³±±
±±³          ³ lSomar   - Indica se deve ser somado ou subtraido       	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fFalVenc(aPerVenc, lSomar, cAliasSrd, cTipoCalc, nX, lSuspDisc, nDiasSusp, cCompSusp)

Local cAnoMesAux   := ""
Local nCnt

DEFAULT cTipocalc	:= "1"
DEFAULT nX	  		:= 0
DEFAULT lSuspDisc	:= .F.
DEFAULT nDiasSusp	:= 0
DEFAULT cCompSusp	:= ""

If lSuspDisc
	cAnoMesAux := IIf(cTipoCalc == "1", cCompSusp, cFolMes)
Else
	cAnoMesAux := If(cTipoCalc == "1", If(Empty((cAliasSRD)->RD_DTREF), (cAliasSRD)->RD_DATARQ, AnoMes((cAliasSRD)->RD_DTREF)), If(cTipoCalc == "2", cFolMes, If(Empty(aPd[nX,18]), cFolMes, AnoMes(aPd[nX,18]))))
EndIf

For nCnt := 1 To Len(aPerVenc)
   	If cAnoMesAux >= aPerVenc[nCnt, 1] .And. cAnoMesAux <= aPerVenc[nCnt, 6]
   		If lSomar
	   		aPerVenc[nCnt,3] += Cal_X_Faltas(cAliasSrd, cTipoCalc, nX, lSuspDisc, nDiasSusp)
	   	Else
	   		aPerVenc[nCnt,3] -= Cal_X_Faltas(cAliasSrd, cTipoCalc, nX, lSuspDisc, nDiasSusp)
	   	EndIf	
  	EndIf
Next nCnt

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fAcumFaltas|Autor  ³ Ricardo Duarte Costa ³ Data ³ 18/11/04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Acumula as faltas para utilizacao nas medias.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                           								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aPerVenc - Array Contendo os Periodos de Ferias Vencidas	  ³±±
±±³          ³ lSomar   - Indica se deve ser somado ou subtraido       	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fAcumFaltas(fOP, cDatai, cDataF, aPerVenc, cMesAno, cVerbaPesq, cTipoCalc, nX, cAliaspSrd, dFimPer, dDtRef, dDataI, dDataF, cDatArq, lTemPerFer, lSuspDisc, nDiasSusp, cCompSusp)

Local nFor			:= 0
Local cAnoMes		:= cMesAno
Local cDataIAux		:= cDataI
Local cDataFAux		:= cDataF
Local dDataIAux		:= dDataI
Local dDataFAux		:= dDataF
Local lAlteraDat	:= .F.
Local lSegFaltas	:= P_SEGFALT
Local nPosProp		:= 0
Local nPosVenc		:= 0

DEFAULT cTipocalc	:= "1"
DEFAULT nX	  		:= 0
DEFAULT cAliaspSRD	:= cAliasSRD
DEFAULT cDatArq		:= ""
DEFAULT lTemPerFer	:= .F.
DEFAULT lSuspDisc	:= .F.
DEFAULT nDiasSusp	:= 0
DEFAULT cCompSusp	:= ""

If Empty(cVerbaPesq)
	Return
EndIf

If lTemPerFer .And. ( nPosVenc := aScan( aPerFerias, { |x| x[3] > 0 } ) ) > 0
	nPosProp	:= aScan( aPerFerias, { |x| x[4] > 0 } )
	cDataF[1] 	:= AnoMes(aPerFerias[nPosVenc, 2])
	dDataF[1]	:= aPerFerias[nPosVenc, 2]
	cDataI[2] 	:= SomaMesAno( AnoMes(aPerFerias[nPosVenc, 2]) )
	If nPosProp > 0
		dDataI[2]	:= aPerFerias[nPosProp, 1]
	Else
		dDataI[2]	:= aPerFerias[nPosVenc, 2]+1
	EndIf
	lAlteraDat	:= .F.
EndIf

If cPaisLoc == "BRA" .and. lSegFaltas .and. cVerbaPesq $ aCodFol[054,1] + '*' + aCodFol[242,1]
	cMesAno := dDtRef
	cDataI	:= dDataI
	cDataF	:= dDataF
	lAlteraDat := .T.
EndIf	

For nFor := 1 To 3
	If fOp[nFor] .And. cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquisa Faltas no Acumulado                                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cVerbaPesq $ aCodFol[054,1] + "*" + aCodFol[242,1]
			If nFor = 1 .And. HMGet(oFerVen, cVerbaPesq, @aFerVen)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					fFalVenc(@aPerVenc, .T., cAliaspSrd, cTipoCalc, nX, lSuspDisc, nDiasSusp, cCompSusp)
				EndIf
			ElseIf nFor = 2 .And. HMGet(oFerPro, cVerbaPesq, @aFerPro)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					nFerPropFaltas += Cal_X_Faltas(cAliaspSrd, cTipoCalc, nX, lSuspDisc, nDiasSusp)
				EndIf		
			ElseIf nFor = 3 .And. HMGet(o13Sala, cVerbaPesq, @a13Sala)
				If !Empty( cDatArq )
					cAnoMes := cDatArq
				EndIf
				If cAnoMes >= a13Sala[1][3] .And. cAnoMes <= a13Sala[1][4]
					n13Faltas[Val(Right(cAnoMes,2))] += Cal_X_Faltas(cAliaspSrd, cTipoCalc, nX, lSuspDisc, nDiasSusp)
				EndIf
			Endif
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquisa Atrazo no Acumulado                                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cVerbaPesq == aCodFol[055,1]
			If nFor = 1 .And. HMGet(oFerVen, cVerbaPesq, @aFerVen)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					fFalVenc(@aPerVenc,.T.,cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf nFor = 2 .And. HMGet(oFerPro, cVerbaPesq, @aFerPro)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					nFerPropFaltas += Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf Left(cMesAno,4) == Left(cAnMe,4) .and. HMGet(o13Sala, cVerbaPesq, @a13Sala)
				If cMesAno >= a13Sala[1][3] .And. cMesAno <= a13Sala[1][4]
					n13Faltas[Val(Right(cMesAno,2))] += Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				Endif
			Endif
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquisa Faltas Mes Anterior no Acumulado                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cVerbaPesq == aCodFol[203,1]
			If nFor = 1 .And. HMGet(oFerVen, cVerbaPesq, @aFerVen)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					fFalVenc(@aPerVenc,.T.,cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf nFor = 2 .And. HMGet(oFerPro, cVerbaPesq, @aFerPro)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					nFerPropFaltas += Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf Left(cMesAno,4) == Left(cAnMe,4) .and. HMGet(o13Sala, cVerbaPesq, @a13Sala)
				If cMesAno >= a13Sala[1][3] .And. cMesAno <= a13Sala[1][4]	
					n13Faltas[Val(Right(cMesAno,2))] += Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			EndIf
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquisa Atrasos (II) no Acumulado                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cVerbaPesq == aCodFol[243,1]
			IF nFor = 1 .And. HMGet(oFerVen, cVerbaPesq, @aFerVen)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					fFalVenc(@aPerVenc,.T.,cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIF nFor = 2 .And. HMGet(oFerPro, cVerbaPesq, @aFerPro)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					nFerPropFaltas += Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIF HMGet(o13Sala, cVerbaPesq, @a13Sala)
				If cMesAno >= a13Sala[1][3] .And. cMesAno <= a13Sala[1][4]
					n13Faltas[Val(Right(cMesAno,2))] += Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIF
			EndIF
		EndIf				
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquisa Reembolso de Faltas no Acumulado                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cVerbaPesq == aCodFol[244,1]
			If nFor = 1 .And. HMGet(oFerVen, cVerbaPesq, @aFerVen)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					fFalVenc(@aPerVenc,.F.,cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf nFor = 2 .And. HMGet(oFerPro, cVerbaPesq, @aFerPro)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					nFerPropFaltas -= Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf HMGet(o13Sala, cVerbaPesq, @a13Sala)
				If cMesAno >= a13Sala[1][3] .And. cMesAno <= a13Sala[1][4]
					n13Faltas[Val(Right(cMesAno,2))] -= Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			EndIf
		EndIf				
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquisa Reembolso de Atrasos no Acumulado                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cVerbaPesq == aCodFol[245,1]
			If nFor = 1 .And. HMGet(oFerVen, cVerbaPesq, @aFerVen)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					fFalVenc(@aPerVenc,.F.,cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf nFor = 2 .And. HMGet(oFerPro, cVerbaPesq, @aFerPro)
				If cMesAno >= cDatai[nFor] .And. cMesAno <= cDataF[nFor]
					nFerPropFaltas -= Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			ElseIf HMGet(o13Sala, cVerbaPesq, @a13Sala)
				If cMesAno >= a13Sala[1][3] .And. cMesAno <= a13Sala[1][4]
					n13Faltas[Val(Right(cMesAno,2))] -= Cal_X_Faltas(cAliaspSrd,cTipoCalc,nX)
				EndIf
			EndIf
		EndIf
	EndIf
Next

If lAlteraDat
	cDataI := cDataIAux
	cDataF := cDataFAux
	dDataI := dDataIAux
	dDataF := dDataFAux
EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCarFixos |Autor  ³ Recursos Humanos      ³ Data ³ 16/10/05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Busca as verbas da tabela RG1 - Lancamentos Fixos		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fCarFixos()				 								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aFixosMed - Array Contendo os lancamentos				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fCarFixos(aFixosMed,dDtLcFixo)
Local cAlias := Alias()
Local cChave := SRA->RA_FILIAL+SRA->RA_MAT

dbSelectArea( "RG1" )
If dbSeek(cChave)
   While !RG1->(Eof()) .AND. cChave == RG1->RG1_FILIAL+RG1->RG1_MAT
		If !(lGestPubl .AND. SRA->RA_REGIME == '2')
			Aadd(aFixosMed,{RG1->RG1_PD,RG1->RG1_CODTAB,RG1->RG1_LINHA,RG1->RG1_COLUNA,MesAno(RG1->RG1_DINIPG),If(EMPTY(RG1->RG1_DFIMPG),Space(6),MesAno(RG1->RG1_DFIMPG)),RG1->RG1_TPCALC })
    	Else
			If !Empty( RG1->RG1_DFIMPG ) .AND. MesAno(RG1->RG1_DFIMPG) < MesAno(dDtLcFixo)
				Aadd(aFixosMed,{RG1->RG1_PD,RG1->RG1_CODTAB,RG1->RG1_LINHA,RG1->RG1_COLUNA,MesAno(RG1->RG1_DINIPG),IF(EMPTY(RG1->RG1_DFIMPG),Space(6),MesAno(RG1->RG1_DFIMPG)),RG1->RG1_TPCALC })
			Else
				Aadd(aFixosPag,{RG1->RG1_PD,RG1->RG1_CODTAB,RG1->RG1_LINHA,RG1->RG1_COLUNA,MesAno(RG1->RG1_DINIPG),IF(EMPTY(RG1->RG1_DFIMPG),Space(6),MesAno(RG1->RG1_DFIMPG)),RG1->RG1_TPCALC })
			EndIf
		Endif	
		dbSkip()
	Enddo
EndIf

aSort(aFixosMed,,,{ |x,y| x[1]+x[5] < y[1]+y[5] })
dbSelectArea( cAlias )

lFixosMed := .F. //Controle para não executar mais de uma vez

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fCalMedPer|Autor  ³ Marcelo Silveira      ³ Data ³ 20/04/11 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Valores de media de acordo com o cad. de verbas - Peru      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cVerba,nValor                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fCalMedPer(cVerba,nValor)

Local cNumVerba := ""

//Tratamento especifico de medias para o Peru. No padrao sempre eh considerado 12 meses
//No entanto, no Peru a proporcao deve ser de acordo com o cadastro de verbas 'RV_REMCOMP'
//Por isso, se a proporcao for anual (V_REMCOMP="4") nao eh necessario fazer nenhum ajuste

cNumVerba := RetValSRV( cVerba, SRA->RA_FILIAL, "RV_REMCOMP" )

If cNumVerba # "4" 
	If cNumVerba == "1"
		//Valor da media sera com base na media diaria do valor recebido no periodo
		nValor := nValor * 12
       	nDiasRem := 180
		If ( SRA->RA_ADMISSA > MonthSub(dDtLcFixo,6) )
        	nDiasRem := DATEDIFFDAY( SRA->RA_ADMISSA, dDtLcFixo )
        	nDiasRem := MIN( NDIASREM, 180 )
		EndIf
		nValor := nValor / nDiasRem * 30
	ElseIf cNumVerba $ "2|3" 
		//Valor da media Semestral, entao soma dois valores mensais
		nValor += nValor
	EndIf
EndIf

Return( nValor )

/*{Protheus.doc} RstXMED

Funcao que reinicializa variaveis estaticas
 
@author Allyson Mesashi
@since 11/11/2016
@version P12 R7
*/
Function RstXMED()
	cFilPd	:= ""
	Pd		:= {}
	lTabHist := Nil 
	If IsInCallStack("GPER080")
		SetRotExec( "__cRotInExec" )
	EndIf
Return

/*/{Protheus.doc} fHistMed
/Grava tabelas de histórico de médias
@author flavio.scorrea
@since 23/10/2019
/*/
Function fHistMed(dDtRef,cDis,cPerMed,cSemMed,cRotMed,aSalMed)
Local aArea		:= GetArea()
Local cId		:= ""

DEFAULT dDtRef  := DDATAREF
DEFAULT cDis	:= "2" //1=Sim;2=Nao
DEFAULT aSalMed	:= {}
DEFAULT cPerMed	:= CPERIODO
DEFAULT cSemMed	:= CSEMANA
DEFAULT cRotMed	:= CROT

DEFAULT lTabHist := AliasInDic("RJK") .And. AliasInDic("SRP") 

If !lTabHist .or. ( Empty(cPerMed) .and. Empty(cSemMed) .and. Empty(cRotMed) )
	Return ""
EndIf

If cPaisLoc != "BRA"
	If Empty(cSemMed) .And. !Empty(cNumPag)
		cSemMed	:= cNumPag
	EndIf
	If Empty(cRotMed)
		If !Empty(C__ROTEIRO)
			cRotMed	:= C__ROTEIRO
		Else
			cRotMed	:= Space( GetSx3Cache( "RCH_ROTEIR" , "X3_TAMANHO" ) )
		EndIf
	EndIf
EndIf

//RJK_FILIAL+RJK_PROCES+RJK_MAT+RJK_PERIOD+RJK_SEMANA+RJK_ROTEIR+DTOS(RJK_DTREF)+RJK_DISSI
cId := fGrvRJK(SRA->RA_FILIAL,SRA->RA_PROCES,SRA->RA_MAT,cPerMed,cSemMed,cRotMed,dDtRef,cDis,aSalMed)
If !Empty(cId) .And. ChkFile("SRP")
	fGrvSRP(cId)
EndIf

RestArea(aArea)
Return cId

/*/{Protheus.doc} fGrvSRP
/Grava tabela SRP de histórico de médias
@author flavio.scorrea
@since 23/10/2019
/*/
Static Function fGrvSRP(cId)
Local aArea	:= GetArea()
Local lRet	:= .T.

If Type("cTBLXMED") == "U" .Or. Select(cTBLXMED) <= 0 
	Return .T.
EndIf

(cTBLXMED)->(dbGoTop())
While !((cTBLXMED)->(Eof()))
	RecLock("SRP",.T.)
		SRP->RP_FILIAL 	:= (cTBLXMED)->RP_FILIAL
		SRP->RP_MAT		:= (cTBLXMED)->RP_MAT
		SRP->RP_TIPO	:= (cTBLXMED)->RP_TIPO
		SRP->RP_DATARQ	:= (cTBLXMED)->RP_DATARQ
		SRP->RP_PD		:= (cTBLXMED)->RP_PD
		SRP->RP_HORAS	:= (cTBLXMED)->RP_HORAS
		SRP->RP_VALOR	:= (cTBLXMED)->RP_VALOR
		SRP->RP_VALATU	:= (cTBLXMED)->RP_VALATU
		SRP->RP_TIPO1	:= (cTBLXMED)->RP_TIPO1
		SRP->RP_ADIC	:= (cTBLXMED)->RP_ADIC
		SRP->RP_DATPGT	:= (cTBLXMED)->RP_DATPGT
		SRP->RP_MESMEDI	:= (cTBLXMED)->RP_MESMEDI
		SRP->RP_HEXTRA	:= (cTBLXMED)->RP_HEXTRA
		SRP->RP_ID		:= cId
	SRP->(MsUnlock())
	(cTBLXMED)->(dbSkip())
EndDo

RestArea(aArea)
Return lRet

/*/{Protheus.doc} fGrvRJK
/Grava tabela RJK de histórico de médias
@author flavio.scorrea
@since 23/10/2019
/*/
Static Function fGrvRJK(cFilMed,cProcMed,cMatMed,cPerMed,cSemMed,cRotMed,dDtRef,cDis,aSalMed)
Local aArea			:= GetArea()
Local cId			:= ""
Local cMemo			:= ""
Local aParam 		:= {}
Local nI			:= 1
Local nJ			:= 1
Local lNovo			:= .T.
Local nSalMesMed 	:= SALMES
Local nSalDiaMed	:= SALDIA
Local nSalHorMed	:= SALHORA
Local nSalBasMed	:= SALARIO
Local nPericMed		:= iif(cPaisLoc=="BRA",nPeric,0)
Local nInsaluMed	:= iif(cPaisLoc=="BRA",nInsalub,0)
Local nAdConfMed	:= iif(cPaisLoc=="BRA",nAdcConf,0)
Local nAdcTrfMed	:= iif(cPaisLoc=="BRA",nAdcTrf,0)
Local nATSMed		:= iif(cPaisLoc=="BRA",nADTSERV,0)

If Len(aSalMed) > 0 
	If aSalMed[1] > 0
		nSalMesMed 	:= aSalMed[1]
	EndIf
	If aSalMed[2] > 0
		nSalDiaMed	:= aSalMed[2]
	EndIf
	If aSalMed[3] > 0
		nSalHorMed	:= aSalMed[3]
	EndIf
	If aSalMed[4] > 0
		nPericMed	:= aSalMed[4]
	EndIf
	If aSalMed[5] > 0
		nInsaluMed	:= aSalMed[5]
	EndIf
	If aSalMed[6] > 0
		nAdConfMed	:= aSalMed[6]
	EndIf
	If aSalMed[7] > 0
		nAdcTrfMed	:= aSalMed[7]
	EndIf
	If aSalMed[8] > 0
		nATSMed		:= aSalMed[8]
	EndIf
	If aSalMed[9] > 0
		nSalBasMed	:= aSalMed[9]
	EndIf
EndIf

If lHistMed
	RetLogCalc(aParam,"24","M")
EndIf

For nI := 1 To Len(aParam)
	For nJ := 1 To Len(aParam[nI])
		cMemo += aParam[nI][nJ] + Chr(10)+CHr(13)
	Next nJ
Next nI

//busca dados, se achar excluir para gerar um novo
dbSelectArea("RJK")
RJK->(dbSetOrder(1))//RJK_FILIAL+RJK_PROCES+RJK_MAT+RJK_PERIOD+RJK_SEMANA+RJK_ROTEIR+DTOS(RJK_DTREF)+RJK_DISSI
If RJK->(dbSeek(cFilMed+cProcMed+cMatMed+cPerMed+cSemMed+cRotMed+dtos(dDtRef)+cDis))
	cId := RJK->RJK_ID
	lNovo := .F.
	TcSqlExec("DELETE FROM " + RetSqlName("SRP") + " WHERE RP_FILIAL = '"+cFilMed+"' AND RP_ID = '" + cId + "'")
Else
	cId := Getsx8Num("RJK","RJK_ID")
	ConfirmSx8()
EndIf

RecLock("RJK",lNovo)
	RJK->RJK_FILIAL	:= cFilMed
	RJK->RJK_PROCES	:= cProcMed
	RJK->RJK_MAT	:= cMatMed
	RJK->RJK_PERIOD	:= cPerMed
	RJK->RJK_SEMANA	:= cSemMed
	RJK->RJK_ROTEIR	:= cRotMed
	RJK->RJK_DTREF	:= dDtRef
	RJK->RJK_DISSI	:= cDis
	RJK->RJK_ID		:= cId
	RJK->RJK_CC		:= SRA->RA_CC 
	RJK->RJK_ITEM	:= SRA->RA_ITEM
	RJK->RJK_CLVL	:= SRA->RA_CLVL
	RJK->RJK_BASFER	:= fBaseFer()
	RJK->RJK_EMISSA	:= dDataBase
	RJK->RJK_CODFUN	:= SRA->RA_CODFUNC
	RJK->RJK_ADMISS	:= SRA->RA_ADMISSA 
	RJK->RJK_SALBAS	:= nSalBasMed
	RJK->RJK_SALINC	:= nSalMesMed
	RJK->RJK_SALMES	:= nSalMesMed
	RJK->RJK_SALDIA	:= nSalDiaMed
	RJK->RJK_SALHOR	:= nSalHorMed
	RJK->RJK_PERIC	:= nPericMed
	RJK->RJK_INSAL	:= nInsaluMed
	RJK->RJK_CONF	:= nAdConfMed
	RJK->RJK_TRANSF	:= nAdcTrfMed
	RJK->RJK_ATS	:= nATSMed
	RJK->RJK_MNEMO1	:= cMemo

RJK->(msUnlock())

RestArea(aArea)
Return cId

/*/{Protheus.doc} fBaseFer
/Busca data base de férias
@author flavio.scorrea
@since 23/10/2019
/*/
Static Function fBaseFer()

Local aArea		:= SRF->(GetArea())
Local dBaseFer 	:= SRA->RA_ADMISSA

If !(cTipoRot == "4" .And. cCompl == "S")
	dbSelectArea("SRF")
	SRF->(dbSetOrder(1))
	If SRF->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT))
		While !SRF->(Eof()) .And. SRF->(RF_FILIAL+RF_MAT) == SRA->RA_FILIAL+SRA->RA_MAT
			If SRF->RF_STATUS == "1"
				dBaseFer := SRF->RF_DATABAS
				Exit
			EndIf
			SRF->(dbSkip())
		EndDo
	EndIf
Else
	dBaseFer := SRF->RF_DATABAS
EndIf

RestArea(aArea)

Return dBaseFer

/*/{Protheus.doc} fTemHMed
/Verifica se tem histórico de médias
@author flavio.scorrea
@since 23/10/2019
/*/
Function fTemHMed(dDtRef, cDis, cPerMed, cSemMed, cRotMed, lTemTransf, cTipo)

Local aArea		:= GetArea()
Local aTransf	:= {}
Local lRet 		:= .F.
Local nCont		:= 0

DEFAULT dDtRef  	:= DDATAREF
DEFAULT cDis		:= "2" //1=Sim;2=Nao
DEFAULT cPerMed		:= CPERIODO
DEFAULT cSemMed		:= CSEMANA
DEFAULT cRotMed		:= CROT
DEFAULT lTemTransf	:= .F.
DEFAULT cTipo		:= ""

dbSelectArea("RJK")
RJK->(dbSetOrder(1))//RJK_FILIAL+RJK_PROCES+RJK_MAT+RJK_PERIOD+RJK_SEMANA+RJK_ROTEIR+DTOS(RJK_DTREF)+RJK_DISSI
lRet := RJK->(dbSeek(SRA->RA_FILIAL+SRA->RA_PROCES+SRA->RA_MAT+cPerMed+cSemMed+cRotMed+dtos(dDtRef)+cDis))

If !lRet .And. cTipo == "F"
	fTransfAll(@aTransf)
	If Len(aTransf) > 0
		For nCont := 1 To Len(aTransf)
			If AnoMes(aTransf[nCont, 7]) >= cPerMed
				If RJK->(dbSeek(aTransf[nCont, 8]+aTransf[nCont, 14]+aTransf[nCont, 9]+cPerMed+cSemMed+cRotMed+dToS(dDtRef)+cDis))
					lRet 		:= .T.
					lTemTransf 	:= .T.
				Endif
			EndIf
		Next nCont
	Endif
Endif 

RestArea(aArea)
Return lRet

/*/{Protheus.doc} fGetHMed
/Verifica se tem histórico de médias
@author flavio.scorrea
@since 23/10/2019
/*/
Function fGetHMed(cId, lTemTransf, cTipo)

Local cAliasTmp	:= GetNextAlias()
Local cCodFil	:= "%'" + SRA->RA_FILIAL + "'%"

Default lTemTransf	:= .F.
Default cTipo		:= ""

If Select(cTBLXMED) > 0
	dbSelectArea(cTBLXMED)
	ZAP
Else
	Cria_Trp()
EndIf

If lTemTransf .And. cTipo == "F"
	cCodFil	:= "%'" + RJK->RJK_FILIAL + "'%"
EndIf

BeginSQL Alias cAliasTmp
	COLUMN RP_DATPGT as date
	SELECT *
	FROM %Table:SRP% SRP
	WHERE RP_FILIAL = %Exp:cCodFil%
	AND RP_ID = %Exp:cId%
	AND SRP.%NotDel%
EndSQL

While !(cAliasTmp)->(eof())
	RecLock(cTBLXMED,.T.)
	
	(cTBLXMED)->RP_FILIAL 	:= (cAliasTmp)->RP_FILIAL 	
	(cTBLXMED)->RP_MAT	 	:= (cAliasTmp)->RP_MAT	
	(cTBLXMED)->RP_TIPO	 	:= (cAliasTmp)->RP_TIPO	
	(cTBLXMED)->RP_DATARQ	:= (cAliasTmp)->RP_DATARQ	
	(cTBLXMED)->RP_PD	 	:= (cAliasTmp)->RP_PD	
	(cTBLXMED)->RP_HORAS	:= (cAliasTmp)->RP_HORAS	
	(cTBLXMED)->RP_VALOR	:= (cAliasTmp)->RP_VALOR	
	(cTBLXMED)->RP_VALATU	:= (cAliasTmp)->RP_VALATU	
	(cTBLXMED)->RP_TIPO1	:= (cAliasTmp)->RP_TIPO1	
	(cTBLXMED)->RP_ADIC	 	:= (cAliasTmp)->RP_ADIC	
	(cTBLXMED)->RP_DATPGT	:= (cAliasTmp)->RP_DATPGT	
	(cTBLXMED)->RP_MESMEDI	:= (cAliasTmp)->RP_MESMEDI	
	(cTBLXMED)->RP_HEXTRA	:= (cAliasTmp)->RP_HEXTRA
		
	(cTBLXMED)->(msUnlock())
	(cAliasTmp)->(dbSkip())
EndDo
(cAliasTmp)->(dbCloseArea())
Return 

/*/{Protheus.doc} fDelHMedId
/Delete historico de medias
@author flavio.scorrea
@since 23/10/2019
/*/
Function fDelHMedId(cIdHistMed)

TcSqlExec("DELETE FROM " + RetSqlName("SRP") + " WHERE RP_FILIAL = '"+SRA->RA_FILIAL+"' AND RP_ID = '" + cIdHistMed + "'")
TcSqlExec("DELETE FROM " + RetSqlName("RJK") + " WHERE RJK_FILIAL = '"+SRA->RA_FILIAL+"' AND RJK_ID = '" + cIdHistMed + "'")

Return

/*/{Protheus.doc} fGetPdDSR
Retorna as verbas de DSR existentes no cálculo
@author Leandro.Drumond
@since 01/02/2021
/*/
Static Function fGetPdDSR()
Local cRet 	 := aCodFol[0166,1] + "*" + aCodFol[0035,1] + "*" + aCodFol[0033,1] + "*" + aCodFol[0122,1]
Local nX 	 := 1
Local cPdAux := ""

For nX := 1 to Len(aPd) //Se houver verba de DSR sem ID cadastrada, inclui no retorno para que a os valores originais sejam abatidos
	If !Empty(cPdAux := RetValSRV(aPd[nX,1], SRA->RA_FILIAL, "RV_CODDSR"))
		cRet += "*" + cPdAux
	EndIf
Next nX

Return cRet

/*/{Protheus.doc} fVerSuspD()
Função que verifica suspensão disciplinar e as trata como faltas injustificadas
@author	    Allyson Mesashi
@since		05/11/2021
@version	P12
/*/
Static Function fVerSuspD( fOP, dInicio, aPerVenc, lTemPerFer )

Local aArea		:= GetArea()
Local cAliasTit	:= GetNextAlias()
Local cQrySt	:= ""

If __oStTit == Nil
	__oStTit := FWPreparedStatement():New()
	cQrySt := "SELECT TIT_FILIAL,TIT_MAT,TIT_DATA,TIT_QTDDIA"
	cQrySt += "FROM " + RetSqlName('TIT') + " TIT "
	cQrySt += "WHERE TIT.TIT_FILIAL = ? AND "
	cQrySt += 		"TIT.TIT_MAT = ? AND "
	cQrySt += 		"TIT.TIT_TIPO = '1' AND "
	cQrySt += 		"TIT.TIT_AFASTA = '1' AND "
	cQrySt += 		"TIT.TIT_DATA >= ? AND "
	cQrySt += 		"TIT.D_E_L_E_T_ = ' '"
	cQrySt := ChangeQuery(cQrySt)
	__oStTit:SetQuery(cQrySt)
EndIf

__oStTit:SetString(1, SRA->RA_FILIAL)
__oStTit:SetString(2, SRA->RA_MAT)
__oStTit:SetString(3, dToS(dInicio))

cQrySt := __oStTit:getFixQuery()

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQrySt),cAliasTit,.T.,.T.)

While (cAliasTit)->( !EoF() )
	fAcumFaltas(fOP, cDatai, cDataF, @aPerVenc, AnoMes(sToD( (cAliasTit)->TIT_DATA )), aCodFol[54,1], "1", Nil, "", dFimPer, sToD( (cAliasTit)->TIT_DATA ), dDataI, dDataF, AnoMes(sToD( (cAliasTit)->TIT_DATA )), lTemPerFer, .T., (cAliasTit)->TIT_QTDDIA, AnoMes(sToD( (cAliasTit)->TIT_DATA )))
	(cAliasTit)->( dbSkip() )
End

(cAliasTit)->(dbCloseArea())

RestArea(aArea)

Return
