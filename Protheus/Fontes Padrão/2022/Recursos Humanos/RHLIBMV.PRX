#INCLUDE "PROTHEUS.CH"

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³InRhLibMvExec ³Autor ³Marinaldo de Jesus   ³ Data ³14/05/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executar Funcoes Dentro de RHLIBMV                           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³InRhLibMvExec( cExecIn , aFormParam )						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico 													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function InRhLibMvExec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= __ExecMacro( cExecIn )
EndIF

Return( uRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DuplicaMv	  ³ Autor ³Marinaldo de Jesus    ³ Data ³09/08/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Duplicar o MV's                                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³DuplicaMv( cFil , cMv )										   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cFil   	-> Filial para a Gravacao                  			   ³
³          ³cMv    	-> Parametro a Ser Duplicado               			   ³
³          ³cFilPsq	-> Filial Auxiliar para Pesquisa do Mv     			   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                      									   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generica                                                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function DuplicaMv( cFil , cMv , cFilPsq )

Local aArea		:= GetArea()
Local aAreaSX6	:= SX6->( GetArea() )
Local aStruSX6	:= SX6->( dbStruct() )
Local aItemSX6	:= Array( Len( aStruSX6 ) )
Local cFilSX6	:= Space( Len( SX6->X6_FIL ) )
Local cCpoSX6	:= ""
Local lRet		:= .F.
Local nCpo		:= 0
Local nCpos		:= 0

DEFAULT cFil	:= cFilAnt
DEFAULT cMv		:= "__NoExistMv__"
DEFAULT cFilPsq	:= cFilAnt

cMv := Upper( cMv )

Begin Sequence
	
	IF ( lRet := SX6->( dbSeek( cFil + cMv , .F. ) ) )
		Break
	EndIF

	IF !( lRet := SX6->( dbSeek( cFilSX6 + cMv , .F. ) ) )
		IF !( lRet := SX6->( dbSeek( cFilPsq + cMv , .F. ) ) )
        	Break
        EndIF
	EndIF

	nCpos := Len( aStruSX6 )
	For nCpo := 1 To nCpos
		aItemSX6[ nCpo ] := SX6->( FieldGet( FieldPos( aStruSX6[ nCpo , 01 ] ) ) )
	Next nCpo
	IF ( lRet := SX6->( RecLock( "SX6" , .T. , .F. ) ) )
		For nCpo := 1 To nCpos
			cCpoSX6 := Upper( AllTrim( aStruSX6[ nCpo , 01 ] ) )
			IF ( "X6_FIL" == cCpoSX6  )
				SX6->( FieldPut( FieldPos( cCpoSX6 ) , cFil ) )
			ElseIF !( cCpoSX6 $ "X6_CONTEUD*X6_CONTSPA*X6_CONTENG" )
				SX6->( FieldPut( FieldPos( cCpoSX6 ) , aItemSX6[ nCpo ] ) )
			EndIF
		Next nCpo
		SX6->( MsUnLock() )
	EndIF

End Sequence

( RestArea( aAreaSX6 ) , RestArea( aArea ) )

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PutMvFil	  ³ Autor ³Marinaldo de Jesus    ³ Data ³08/08/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Gravar o Conteudo do Parametro MV_? considerando a Filial      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PutMvFil( cMvPar , uPutMv , cFil )						   	   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cMvPar -> Parametro MV_? para gravacao do Conteudo			   ³
³          ³uPutMv -> Conteudo a Ser Gravado                  			   ³
³          ³cFil   -> Filial para a Gravacao                  			   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet -> Retorno de PutMv()									   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generica                                                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function PutMvFil( cMvPar , uPutMv , cFil )

Local cSvFilAnt	:= cFilAnt
Local uRet		:= NIL

DEFAULT cFil := cSvFilAnt

cFilAnt := IF( !Empty( cFil ) , cFil , cFilAnt )
uRet 	:= PutMv( cMvPar , uPutMv )
cFilAnt	:= cSvFilAnt

Return( uRet )

/*/{Protheus.doc} GetMvRH
Busca conteúdo do parametro MV solicitado e grava a informação no array publico rastro de todos os parametros utilizados nos processos de cálculo
@type function
@author Leandro Drumond
@since 02/03/2017
@version P12.1.14
@param cParametro, Nome do parametro SX6 a ser pesquisado
@param lHelp, Se .F.: será exibida a mensagem de Help(remote) ou gerado log na pasta system(batch), caso o parâmetro não seja encontradono SX6 e não for informado o valor Default.Se .T., retorna verdadeiro ou falso se o parametro existir e não for informado o valor default.
@param xDefault, Conteúdo padrão que será utilizado caso o parâmetro não exista.
@param cFil, Filial onde será consultado o parâmetro. Se em branco, utiliza a filial corrente.	
@return GetMvRH()
/*/
Function GetMvRH(cParametro,lHelp,xDefault,cFil)
Local xRet		:= SuperGetMv(cParametro,lHelp,xDefault,cFil)
Local nPos		:= 0

Static lGrvLog

DEFAULT lGrvLog := SuperGetMV("MV_LOGPROC",,.F.)

//Ajuste para evitar error.log causado pela existência desse parâmetro em versões antigas do protheus com tipo diferente de lógico
If cParametro == "MV_CONSIG"
	xRet := If(ValType(xRet) == "L", xRet, xDefault)
EndIf

//Grava parametros utilizados nos processos monitorados apenas se parametro estiver ativo.
If lGrvLog .and. FunName() $ "GPEM020*GPEM030*GPEM040*GPEM060*GPEA070*GPEM110*GPEM120*GPEM630"
	If Type("__aMVLog") == "U"
		_SetOwnerPrvt("__aMVLog",{})
	EndIf
	If (nPos := aScan( __aMvLog , { |x| x[1] == cParametro } )) == 0
		aAdd(__aMvLog, {cParametro, If(ValType(xRet) == "C", xRet, cValToChar(xRet))})
	EndIf
EndIf

Return xRet
