#Include 'GPEM620.CH'
#INCLUDE "PROTHEUS.CH"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ GPEM620  ³ Autor ³ Ricardo               ³ Data ³ 18/05/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calculo da pesquisa gerencial.                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ GPEM620()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Especifico                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data     ³ BOPS   ³  Motivo da Alteracao                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Carlos E. O.³22/10/13  ³M12RH01 ³ Projeto Unificacao                   ³±±
±±³            ³          ³RQ0323  ³                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Function GPEM620()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Declara variaveis locais de execucao.									  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
*/
Local aArea			:= GetArea()
Local aAlias		:= SRA->(GetArea())	// Area atual salva com seus ponteiros
Local aSays			:= {}				// Matriz de tela
Local aButtons		:= {}				// Matriz de botoes
Local nOpca			:= 0				// Opcao escolhida
Local cCadastro		:= STR0004			// Descricao do cadastro
Local cDatIni,cDatFin					// Variaveis para contagem de meses

//Variaveis tambem usadas em outras funcoes
Private lErroPSQ    := .F.
Private lArqInBd	:= .T.				// Importação dos arquivos .PSQ
Private cPerg		:= 'GPM620'			// Parametros do Pergunte
Private aMeses							// Matriz de meses
Private cProcesso
Private cRot
Private cNomeUser

	cNomeUser := StrTran(cUserName,".","")
	cNomeUser := StrTran(cNomeUser,"-","")
	cNomeUser := StrTran(cNomeUser,"/","")
	cNomeUser := StrTran(cNomeUser,"_","")
	cNomeUser := StrTran(cNomeUser," ","")

	lArqInBd	:= fPSQInBd()		// Importação dos arquivos .PSQ

	If lArqInBd
		// Carrega parametros
		Pergunte( cPerg, .f. )

		cProcesso 	:= mv_par01
		cRot		:= mv_par02

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ajusta filtro do arquivo SRU.											³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea( 'SRU' )
		Set Filter To Empty( SRU->RU_SEQUE ) .and. !Empty( SRU->RU_CODIGO )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta tela de dialogo.													³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Aadd( aSays, OemToAnsi( STR0016 ) )

		AADD( aButtons, { 5, .T., { |o| Pergunte( cPerg, .t. ) } } )
		AADD( aButtons, { 1, .T., { |o| nOpca := 1, If( Gp620OK(), FechaBatch(), nOpca :=0 ) } } )
		AADD( aButtons, { 2, .T., { |o| FechaBatch() } } )

		FormBatch( cCadastro, aSays, aButtons )

		dbSelectArea( 'SRU' )
		Set Filter To

		If nOpca == 1
			If Empty( mv_par03 )
				Aviso( STR0005, STR0017, { STR0013 } ) //"Atencao"#"Nao foi informada a data inicial para calculo"#"Ok"

			ElseIf ' '$mv_par03 .or. !( Right( mv_par03, 2 )$'01.02.03.04.05.06.07.08.09.10.11.12')
				Aviso( STR0005, STR0024, { STR0013 } ) //"Atencao"#"Data inicial para calculo invalida"#"Ok"

			ElseIf Empty( mv_par05 )
				Aviso( STR0005, STR0018, { STR0013 } ) //"Atencao"#"Nao foi informada a data final para calculo"#"Ok"

			ElseIf ' '$mv_par05 .or. !( Right( mv_par05, 2 )$'01.02.03.04.05.06.07.08.09.10.11.12')
				Aviso( STR0005, STR0025, { STR0013 } ) //"Atencao"#"Data final para calculo invalida"#"Ok"

			ElseIf Empty( mv_par09 )
				Aviso( STR0005, STR0019, { STR0013 } ) //"Atencao"#"Nao foi selecionado o codigo da pesquisa gerencial desejada"#"Ok"

			Else
				cDatIni := Left( mv_par03, 4 ) + Right( mv_par03, 2 )
				cDatFin := Left( mv_par05, 4 ) + Right( mv_par05, 2 )
				aMeses	 := {}

				Do While .t.
					AAdd( aMeses, cDatIni )

					If cDatIni = cDatFin
						Exit
					Endif

					If Right( cDatIni, 2 ) = '12'
						cDatIni := StrZero( Val( Left( cDatIni, 4 ) ) + 1, 4, 0 ) + '01'
					Else
						cDatIni := Left( cDatIni, 4 ) + StrZero( Val( Right( cDatIni, 2 ) ) + 1, 2, 0 )
					Endif
				Enddo

				If Len( aMeses ) > 12
					Aviso( STR0005, STR0020, { STR0013 } ) //"Atencao"#"Foi selecionado um periodo maior que 12 meses"#"Ok"
				Else
					ProcGpe( { |lEnd| Gp620Proc() },,, .T. )
				Endif
			Endif
		Endif
	EndIf

	SRA->( RestArea( aAlias ) )
	RestArea(aArea)

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM620   ºAutor  ³TOTVS               º Data ³  31/10/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao () Gpm620Erro - Para indicar se houve erro apos um  º±±
±±º          ³           bloco BEGIN/END SEQUENCE.                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ ErrorBlock( { |e| Gpm620Erro(e) } )                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Gpm620Erro (oError)

	If oError:GenCode > 0
		lErro := .T.
		Break //Referente ao bloco BEGIN/END SEQUENCE
	EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM620   ºAutor  ³Microsiga           º Data ³  08/09/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao Gp620Proc() - Efetua o calculo da pesquisa geren-   º±±
±±º          ³                      cial.                                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP6                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Gp620Proc()
//Variaveis locais
	//Strings
	Local cPerioDe		// Periodo inicial
	Local cPerioAte		// Periodo final
	Local cNrPagtoDe    // Nro. Pagamento inicial
	Local cNrPagtoAte   // Nro. Pagamento final
	Local cPesquisa		// Codigo da pesquisa gerencial
	Local cFilDe		// Filial inicial
	Local cFilAte		// Filial final
	Local cCcDe			// Centro de custo inicial
	Local cCcAte		// Centro de custo final
	Local cMatDe		// Matricula inicial
	Local cMatAte		// Matricula final
	Local cNomeDe		// Nome inicial
	Local cNomeAte		// Nome final
	Local cSituacao		// Situacao de folha
	Local cCategoria	// Categoria
	Local cNomArq		// Nome do arquivo de dados que sera gerado
	Local cNomInd		// Nome do arquivo de indice que sera gerado
	Local cIndCon		// Chave do indice
	Local cRDD			:= "TOPCONN"
	Local cMes			:= ""
	Local cAno			:= ""
	Local cMoviment		:= ""
	Local cTodosPer		:= ""
	Local cJoinMov		:= ""
	Local cCpoAdic		:= ""
	Local cNrPagto		:= ""
	Local cSitQuery		:= ""
	Local cCatQuery		:= ""

	//Numericas
	Local nRegs			:= 0
	Local nReg			:= 0

	//Logicas
	Local lCria			:= .F.	// Controle de criacao do arquivo temporario
	Local lRecria		:= .F.

	//Arrays
	Local aCampos		// Matriz de estrutura do arquivo de calculo
	Local aPerAberto	:= {}
	Local aPerFechado	:= {}
	Local aPerTodos		:= {}

	//Code blocks
	Local bError 		:= ErrorBlock( { |e| Gpm620Erro(e) } )
	//Lgpd
	Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), { .T., .F. }) //[2]Ofuscamento
	Local aFldRel		:= If(aOfusca[2], FwProtectedDataUtil():UsrNoAccessFieldsInList( {"RA_NOME"} ), {})
	Local lOfusca		:= Len(aFldRel) > 0
//Variaveis Private
	Private lErro		:= .F.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ajusta variaveis de trabalho                                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	cProcesso 	:= mv_par01
	cRot		:= mv_par02
	cPerioDe	:= mv_par03
	cNrPagtoDe	:= mv_par04
	cPerioAte	:= mv_par05
	cNrPagtoAte	:= mv_par06
	cFilDe  	:= mv_par07
	cFilAte 	:= mv_par08
	cPesquisa	:= mv_par09
	cCcDe		:= mv_par10
	cCcAte		:= mv_par11
	cMatDe		:= mv_par12
	cMatAte		:= mv_par13
	cNomeDe		:= mv_par14
	cNomeAte	:= mv_par15
	cSituacao	:= mv_par16
	cCategoria	:= mv_par17

	cVerbas		:= VerbasSru( cPesquisa )
	cNomArq := 'PSQ' + AllTrim(cPesquisa) + AllTrim(Substr( cNomeUser, 1, 20 ))
	cNomArq := StrTran(cNomArq," ","")
	cNomInd := cNomArq + "1"
	cIndCon	:= 'RU_FILIAL + RU_MAT + RU_CC + RU_VERBA + RU_DATA'

	aCampos	:= {	{ 'RU_FILIAL',  'C', FWGETTAMFILIAL		, 0},;
					{ 'RU_MAT'   ,  'C', TamSx3("RA_MAT")[1], 0},;
					{ 'RU_CC'    ,  'C', 09					, 0},;
					{ 'RU_VERBA' ,  'C', 03					, 0},;
					{ 'RU_DATA'  ,  'C', 06					, 0},;
					{ 'RU_VALOR' ,  'N', 12					, 2},;
					{ 'RU_PARAM' ,  'C', 50					, 0}}

	//Verifica a criacao do arquivo de calculo.
	If MsFile( cNomArq, , cRDD )
		lRecria := ( Aviso( STR0005, STR0006, { STR0007, STR0008 } ) = 1 )
		If !lRecria
			Return
		Endif
		cNomArq := RetArq(cRDD,cNomArq,.T.)
	Else
		lCria := .T.
	Endif

	Begin Sequence

	If lCria
		DbCreate( cNomArq, aCampos, cRDD )
		DbUseArea( .T., cRDD, cNomArq, 'TRB', .F., .F. )
		dbCreateIndex( cNomInd, cIndCon, {|| &(cIndCon)} )
		dbClearInd()
		dbSetIndex( cNomArq + "1" )
		dbSelectArea( 'TRB' )
	Else
		DbUseArea( .T., cRDD, cNomArq, 'TRB', .F., .F. )
		dbClearInd()
		dbSetIndex( cNomArq + "1" )
		dbSelectArea( 'TRB' )
		Zap
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Acrescenta registros de controle.										³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= PadR('PR', FWGETTAMFILIAL)
	TRB->RU_MAT		:= 'DATINI'
	TRB->RU_PARAM	:= cPerioDe
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= PadR('PR', FWGETTAMFILIAL)
	TRB->RU_MAT		:= 'DATFIN'
	TRB->RU_PARAM	:= cPerioAte
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'CODPSQ'
	TRB->RU_PARAM	:= cPesquisa
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'FILINI'
	TRB->RU_PARAM	:= cFilDe
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'FILFIN'
	TRB->RU_PARAM	:= cFilAte
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'CUSINI'
	TRB->RU_PARAM	:= cCCDe
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'CUSFIN'
	TRB->RU_PARAM	:= cCCAte
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'MATINI'
	TRB->RU_PARAM	:= cMatDe
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'MATFIN'
	TRB->RU_PARAM	:= cMatAte
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'NOMINI'
	TRB->RU_PARAM	:= cNomeDe
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'NOMFIN'
	TRB->RU_PARAM	:= cNomeAte
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'SITFUN'
	TRB->RU_PARAM	:= cSituacao
	msUnLock()

	RecLock( 'TRB', .t. )
	TRB->RU_FILIAL	:= 'PR'
	TRB->RU_MAT		:= 'CATFUN'
	TRB->RU_PARAM	:= cCategoria
	msUnLock()

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona ponteiros do arquivo de funcionarios.							³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea( 'SRA' )
	dbSetOrder( 1 )
	dbSeek( cFilDe + cMatDe, .T. )
	cInicio 	:= '{ || RA_FILIAL + RA_MAT }'
	cFim    	:= cFilAte + cMatAte
	cNameDB		:= Upper(TcGetDb())

	//Pegar todos os periodos selecionados

	cTodosPer := GetNextAlias()
	cWhere := "%WHERE RCH.RCH_PROCES = '" + cProcesso + "' AND RCH.RCH_ROTEIR = '" + cRot + "' AND ("

	If ( cNameDB $ "DB2_ORACLE_INFORMIX_POSTGRES" )
		cWhere += " CONCAT(RCH.RCH_PER , RCH.RCH_NUMPAG) BETWEEN '" + cPerioDe + cNrPagtoDe + "' AND '" + cPerioAte + cNrPagtoAte
	Else
		cWhere += " RCH.RCH_PER + RCH.RCH_NUMPAG BETWEEN '" + cPerioDe + cNrPagtoDe + "' AND '" + cPerioAte + cNrPagtoAte
	EndIf

	cWhere += "')%"

	BeginSql Alias cTodosPer

		SELECT RCH.RCH_PER, RCH.RCH_NUMPAG, RCH.RCH_FILIAL
			FROM %table:RCH% RCH
			%exp:cWhere% AND RCH.%notDel%

	EndSql

	cWhere := ""

	While !(cTodosPer)->(Eof())

		cPeriodo := (cTodosPer)->RCH_PER
		cNrPagto := (cTodosPer)->RCH_NUMPAG

		cAno	:= SubStr(cPeriodo,1,4)
		cMes	:= SubStr(cPeriodo,5,2)

		fRetPerComp( 	cMes		  	,;	// Obrigatorio - Mes para localizar as informacoes
						cAno		  	,;	// Obrigatorio - Ano para localizar as informacoes
						xFilial("RCH")	,;	// Opcional - Filial a Pesquisar
						cProcesso	  	,;	// Opcional - Filtro por Processo
						cRot		,;	// Opcional - Filtro por Roteiro
						@aPerAberto	  	,;	// Por Referencia - Array com os periodos Abertos
						@aPerFechado	,;	// Por Referencia - Array com os periodos Fechados
						@aPerTodos    	;	// Por Referencia - Array com os periodos Abertos e Fechados em Ordem Crescente
					)

		nPosAb	:= 	aScan(aPerAberto, {|x|  x[1]+x[2]+x[7]+x[8] == cPeriodo + cNrPagto + cProcesso + cRot })
		lAberto	:= 	If(nPosAb == 0, .F., .T.)
		nPosFc	:=	aScan(aPerFechado, {|x|  x[1]+x[2]+x[7]+x[8] == cPeriodo + cNrPagto + cProcesso + cRot })
		lFechado:= 	If(nPosFc == 0, .F., .T.)

		// Verifica se existe o arquivo do periodo
		If  !lAberto .And. !lFechado
			MsgAlert( OemToAnsi( STR0027 ), OemToAnsi( STR0005 ) ) //"Periodo nao calculado!"###"Atencao"
			Break
		EndIf

		If( lAberto, cAliasMov	:= "SRC", cAliasMov := "SRD")

		If lAberto
			cAcessa := &("{ || " + ChkRH("GPER520","SRC","2") + "}")
		Else
			cAcessa := &("{ || " + ChkRH("GPER520","SRD","2") + "}")
		EndIf

		cMoviment := GetNextAlias()

		cJoinMov := "% INNER JOIN " + RetSQLName(cAliasMov) + " " + cAliasMov + " ON SRA.RA_FILIAL ="

		If cAliasMov == "SRC"
			cCpoAdic := "%, SRC.RC_PD, SRC.RC_CC, SRC.RC_ROTEIR, SRC.RC_PERIODO, SRC.RC_SEMANA, SRC.RC_VALOR"
			cJoinMov += " SRC.RC_FILIAL AND SRA.RA_MAT = SRC.RC_MAT"
		Else
			cCpoAdic := "%, SRD.RD_PD, SRD.RD_CC, SRD.RD_ROTEIR, SRD.RD_PERIODO, SRD.RD_SEMANA, SRD.RD_VALOR"
			cJoinMov += " SRD.RD_FILIAL AND SRA.RA_MAT = SRD.RD_MAT"
		Endif

		cCpoAdic += "%"

		cJoinMov += " INNER JOIN " + RetSqlName("RCH") + " RCH ON " + FwJoinFilial("RCH","SRA")

		cJoinMov += "%"

		//-- Filtros para a Query

		//-- Processo/Roteiro/Periodo/Nro Pagamento
		If !Empty(AllTrim(cProcesso))
			cWhere := " AND SRA.RA_PROCES ='" + cProcesso + "' "

			If !Empty(AllTrim(cRot))
				cWhere += "AND "

				If cAliasMov == "SRC"
					cWhere += "SRC.RC_ROTEIR='" + cRot + "'"
					cWhere += " AND "
					cWhere += "SRC.RC_PERIODO='" + cPeriodo + "'"
					cWhere += " AND "
					cWhere += "SRC.RC_SEMANA='" + cNrPagto + "'"

				Else
					cWhere += "SRD.RD_ROTEIR='" + cRot + "'"
					cWhere += " AND "
					cWhere += "SRD.RD_PERIODO='" + cPeriodo + "'"
					cWhere += " AND "
					cWhere += "SRD.RD_SEMANA='" + cNrPagto + "'"
				Endif
			Endif

			//-- Filiais
			If !Empty(cFilDe) .Or. (!Empty(cFilAte))

				If Empty(cFilDe)

					cWhere +=  "AND SRA.RA_FILIAL<='" + cFilAte + "'"

				Else

					If Empty(cFilAte)

						cWhere +=  "AND SRA.RA_FILIAL>='" + cFilDe + "'"

					Else
						cWhere +=  "AND SRA.RA_FILIAL BETWEEN '" + cFilDe + "' AND '" + cFilAte + "'"

					Endif
				Endif

			Endif

			//-- Centros de Custo
			If !Empty(cCcDe) .Or. (!Empty(cCcAte))

				If Empty(cCcDe)

					cWhere +=  "AND SRA.RA_CC<='" + cCcAte + "'"

				Else

					If Empty(cCcAte)

						cWhere +=  "AND SRA.RA_CC>='" + cCcDe + "'"

					Else
						cWhere +=  "AND SRA.RA_CC BETWEEN '" + cCcDe + "' AND '" + cCcAte + "'"

					Endif
				Endif

			Endif

			//-- Matriculas
			If !Empty(cMatDe) .Or. (!Empty(cMatAte))

				If Empty(cMatDe)

					cWhere +=  "AND SRA.RA_MAT<='" + cMatAte + "'"

				Else

					If Empty(cMatAte)

						cWhere +=  "AND SRA.RA_MAT>='" + cMatDe + "'"

					Else
						cWhere +=  "AND SRA.RA_MAT BETWEEN '" + cMatDe + "' AND '" + cMatAte + "'"

					Endif
				Endif

			Endif

			//-- Nomes
			If !Empty(cNomeDe) .Or. (!Empty(cNomeAte))

				If Empty(cNomeDe)

					cWhere +=  "AND SRA.RA_NOME<='" + cNomeAte + "'"

				Else

					If Empty(cNomeAte)

						cWhere +=  "AND SRA.RA_NOME>='" + cNomeDe + "'"

					Else
						cWhere +=  "AND SRA.RA_NOME BETWEEN '" + cNomeDe + "' AND '" + cNomeAte + "'"

					Endif
				Endif

			Endif


		Endif

		//-- Situacoes
		cSitQuery := ""
		For nReg:=1 to Len(Trim(cSituacao))
			cSitQuery += "'"+Subs(cSituacao,nReg,1)+"'"
			If ( nReg+1 ) <= Len(Trim(cSituacao))
				cSitQuery += ","
			Endif
		Next nReg

		If !Empty(AllTrim(cSitQuery))
			cWhere += "AND SRA.RA_SITFOLH IN (" + cSitQuery + ")"
		Endif
		cCatQuery := ""
		//-- Categorias
		For nReg:=1 to Len(Trim(cCategoria))
			cCatQuery += "'"+Subs(cCategoria,nReg,1)+"'"
			If ( nReg+1 ) <= Len(Trim(cCategoria))
				cCatQuery += ","
			Endif
		Next nReg

		If !Empty(AllTrim(cCatQuery))
			cWhere += "AND SRA.RA_CATFUNC IN (" + cCatQuery + ")"
		Endif

		cWhere += " AND RCH.RCH_FILIAL = '" + (cTodosPer)->RCH_FILIAL + "'"

		cWhere := "%" + cWhere + "%"

		BeginSql Alias cMoviment

			SELECT DISTINCT(SRA.RA_FILIAL), SRA.RA_MAT, SRA.RA_NOME, SRA.RA_PROCES %exp:cCpoAdic%
					FROM  %table:SRA% SRA
						%exp:cJoinMov%
					WHERE SRA.%notDel%
						%exp:cWhere%
					ORDER BY RA_FILIAL, RA_MAT
		EndSql

		//Contar registros para a regua (interface com usuario)
		dbSelectArea(cMoviment)
		dbGotop()

		Do While !Eof()
			nRegs++
			dbSkip()
		Enddo

		GPProcRegua( nRegs )

		dbGoTop()

		Do While !(cMoviment)->(Eof()) //.And.  Eval( &( cInicio ) ) <= cFim

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza exibicao da regua de visualizacao.								³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			GPIncProc( RA_FILIAL + ' - ' + RA_MAT + If( lOfusca, "", ' - ' + RA_NOME ) )

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Grava valores no arquivo de calculo - Arquivo de acumulado.				³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			If cAliasMov == "SRD"

				If (cMoviment)->RD_PD $ cVerbas

					dbSelectArea( 'TRB' )
					RecLock( 'TRB', !dbSeek( (cMoviment)->RA_FILIAL +;
											(cMoviment)->RA_MAT +;
											(cMoviment)->RD_CC +;
											(cMoviment)->RD_PD +;
											(cMoviment)->RD_PERIODO ) )
											//((cMoviment)->RD_DATARQ )) )

					TRB->RU_FILIAL	:= (cMoviment)->RA_FILIAL
					TRB->RU_MAT 	:= (cMoviment)->RA_MAT
					TRB->RU_CC		:= (cMoviment)->RD_CC
					TRB->RU_VERBA	:= (cMoviment)->RD_PD
					TRB->RU_DATA	:= (cMoviment)->RD_PERIODO
					TRB->RU_VALOR	:= TRB->RU_VALOR + (cMoviment)->RD_VALOR
					msUnLock()
				Endif

			Else
				If (cMoviment)->RC_PD $ cVerbas

					dbSelectArea( 'TRB' )
					//RecLock( 'TRB', !dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + SRC->RC_PD + MesAno( SRC->RC_DATA ) ) )
					RecLock( 'TRB', !dbSeek( (cMoviment)->RA_FILIAL +;
											(cMoviment)->RA_MAT +;
											(cMoviment)->RC_CC +;
											(cMoviment)->RC_PD +;
											(cMoviment)->RC_PERIODO ) );
											//(cMoviment)->SRC->RC_PD + MesAno( SRC->RC_DATA ) ) )

					TRB->RU_FILIAL	:= (cMoviment)->RA_FILIAL
					TRB->RU_MAT 	:= (cMoviment)->RA_MAT
					TRB->RU_CC		:= (cMoviment)->RC_CC
					TRB->RU_VERBA	:= (cMoviment)->RC_PD
					TRB->RU_DATA	:= (cMoviment)->RC_PERIODO
					TRB->RU_VALOR	:= TRB->RU_VALOR + (cMoviment)->RC_VALOR
					msUnLock()
				Endif

			Endif

			(cMoviment)->(dbSkip())
		Enddo

		(cTodosPer)->(dbSkip())
	Enddo

	End Sequence

	If lErro
		MsgAlert(OemToAnsi(STR0029), OemToAnsi(STR0005)) //"Houve falha ao criar arquivo de Pesquisa Gerencial."#"Atencao"
	Else
		MsgAlert(OemToAnsi(STR0028), OemToAnsi(STR0005)) //"Arquivo de Pesquisa Gerencial gerado com sucesso."#"Atencao"
	Endif

	dbSelectArea( 'TRB' )
	dbCloseArea()

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM620   ºAutor  ³Ricardo             º Data ³  17/05/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Function aOptions() - Simulacao da funcao aChoice do       º±±
±±º          ³                       Clipper.                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Ap6                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function aOptions(	paOpcoes,;	// Matriz de opcoes
					pcCabec  ;	// Cabecalho do dialogo
                 )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declara variaveis de execucao.											³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lnRetorno := 0 // Variavel de retorno
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjCoords	:= {}
Local aObjSize		:= {}
Local aLbxCoord		:= {}

Private oBrowse	// Objeto browse
Private cBrowse	// Retorno do browse
Private oOk		// Objeto de botao OK
Private oCancel	// Objeto

/**************************************************************
Monta as Dimensoes dos Objetos
**************************************************************/
aAdvSize		:= MsAdvSize()
// Manipular para diminuir o tamanho da janela
aAdvSize[ 3 ] -= 50
aAdvSize[ 4 ] -= 50

aAdvSize[ 5 ] -= 340
aAdvSize[ 6 ] -= 170

aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
aObjSize	:= MsObjSize( aInfoAdvSize , aObjCoords )
aLbxCoord 	:= { (aObjSize[1,1]+5), (aObjSize[1,2]+5), (aObjSize[1,3]-60),(aObjSize[1,4]-130) }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Seleciona a pesquisa desejada.											³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Define MSDialog loDialog Title pcCabec From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] PIXEL

@ aLbxCoord[1],aLbxCoord[2] ListBox oBrowse ;
			var cBrowse ;
			Fields Header OemToAnsi( STR0009 ) ;
			Size aLbxCoord[4],aLbxCoord[3] Of loDialog Pixel

oBrowse:SetArray( paOpcoes )
oBrowse:bLine := { || { paOpcoes[oBrowse:nAt] } }
oBrowse:blDblClick := { || lnRetorno := oBrowse:nAt,loDialog:End() }

Activate MsDialog loDialog Centered On Init EnchoiceBar( loDialog, { || lnRetorno := oBrowse:nAt,loDialog:End() }, { || lnRetorno := 0,loDialog:End() } )

Return lnRetorno

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM620   ºAutor  ³Ricardo             º Data ³  17/05/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao gp620Vis() - Efetua a visualizacao da pesquisa cal- º±±
±±º          ³                     culada.                                º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP6                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function gp620Vis( lVisualiza,; // Controle de visualizacao
				   cPesquisa ,; // Codigo da pesquisa desejada
				   lAbreArq   ; // Abre arquivo TRB
				 )

	//Declara variaveis de execucao
	Local aArquivos		:= {}	// Matriz com os arquivos de pesquisa calculados
	Local nArquivos		:= 0	// Tamanho da matriz dos arquivos de pesquisa calculados
	Local aOpcoes		:= {}	// Matriz de opcoes
	Local aVerbas		:= {}	// Matriz de verbas da pesquisa selecionada
	Local aMeses		:= {}	// Matriz de meses da pesquisa selecionada
	Local nVerbas				// Tamanho da matriz de verbas
	Local nMeses				// Tamanho da matriz de meses
	Local aConsulta				// Matriz de consulta
	Local nConsulta				// Tamanho da matriz de consulta
	Local cCodPsq				// Codigo da pesquisa selecionada
	Local cNomArq				// Nome do arquivo de pesquisa selecionado
	Local cNomInd				// Nome do arquivo de indice da pesquisa selecionada
	Local cDatIni,cDatFin		// Data inicial e final da pesquisa selecionada
	Local nVrb,nMes,nI	 		// Variaveis de auxilio
	Local nJ
	Local cCodCCAtu		:= ""
	Local cRdd			:= "TOPCONN"
	Local aSRU			:= {}
	Local aArea			:= {}

	Private aHeader		:= {}	// Matriz de cabecalho da visualizacao
	Private aCols		:= {}	// Matriz de colunas da visualizacao
	Private nCols				// Tamanho da matriz de colunas da visualizacao

	DEFAULT lAbreArq	:= .T.

	//Verifica se existe arquivo calculado
	aArea := getarea()
	dbSelectArea("SRU")
	dbgoTop()
	While SRU->(!Eof()) 
		If Empty(SRU->RU_SEQUE) .And. SRU->RU_FILIAL == xFilial("SRU")
			aAdd( aSRU, SRU->RU_CODIGO )			
		EndIf
		SRU->(dbSkip())
	EndDo

	If Len(aSRU) > 0
		For nI := 1 to Len(aSRU)
			cNomArq := 'PSQ' + AllTrim(aSRU[nI]) + AllTrim( Substr( cNomeUser, 1, 20 ))
			cNomArq := StrTran(cNomArq," ","")
			If MsFile( cNomArq,, cRdd )
				aAdd( aArquivos, cNomArq )
			EndIf
		Next nI
	EndIf
	RestArea(aArea)

	nArquivos := Len( aArquivos )
	If nArquivos == 0
		Aviso( STR0010, STR0012, { STR0013 } )
		Return
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Seleciona a pesquisa desejada.											³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lVisualiza
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta matriz de opcoes para escolha da pesquisa.						³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nI := 1 To nArquivos
			cNomArq := StrTran(aArquivos[nI]," ","")
			cNomInd := cNomArq + "1"
			DbUseArea( .T., cRdd, cNomArq, 'TRB', .F. )
			Set Index To (cNomInd)
			dbSelectArea( 'TRB' )
			dbSeek( PadR('PR', FWGETTAMFILIAL)+'DATINI' )
			cDatIni := Trim( TRB->RU_PARAM )
			dbSeek( PadR('PR', FWGETTAMFILIAL)+'DATFIN' )
			cDatFin := Trim( TRB->RU_PARAM )
			dbSeek( 'PRCODPSQ' )
			cCodPsq := Trim( TRB->RU_PARAM )
			dbCloseArea()
			dbSelectArea( 'SRU' )
			dbSeek( xFilial( 'SRU' ) + cCodPsq )
			AAdd( aOpcoes, cCodPsq + ' - ' + Trim( SRU->RU_DESC ) + ' ( ' + cDatIni + ' a ' + cDatFin + ' )' )
		Next nI
		ASort( aOpcoes )
		If ( nOpcao := AOptions( aOpcoes, STR0010 ) ) = 0
			Return .f.
		Else
			cCodPsq	:= Substr( aOpcoes[nOpcao], 1, 3 )
		Endif
	Else
		cCodPsq := cPesquisa
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ajusta variaveis para abertura dos arquivos.							³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aVerbas	:= Str2Arr( VerbasSru( cCodPsq ), ',' )
	nVerbas	:= Len( aVerbas )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Abre o arquivo de pesquisa e ajusta variaveis de trabalho.				³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lAbreArq
		cNomArq := 'PSQ' + cCodPsq + AllTrim( Substr( StrTran(cUserName,".",""), 1, 20 ))
		cNomArq := StrTran(cNomArq," ","")
		cNomInd := cNomArq + "1"
		dbUseArea( .T., cRdd, cNomArq, 'TRB', .F. )
		dbSelectArea( 'TRB' )
		Set Index To ( cNomInd )
	EndIf

	TRB->( dbSeek( PadR('PR', FWGETTAMFILIAL)+'DATINI') )
	cDatIni := Trim( TRB->RU_PARAM )
	TRB->( dbSeek( PadR('PR', FWGETTAMFILIAL)+'DATFIN') )
	cDatFin := Trim( TRB->RU_PARAM )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Cria matriz de meses.													³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aMeses := { STR0011 }
	Do While .t.
		AAdd( aMeses, cDatIni )
		If cDatIni = cDatFin
			Exit
		Endif
		If Right( cDatIni, 2 ) = '12'
			cDatIni := StrZero( Val( Left( cDatIni, 4 ) ) + 1, 4, 0 ) + '01'
		Else
			cDatIni := Left( cDatIni, 4 ) + StrZero( Val( Right( cDatIni, 2 ) ) + 1, 2, 0 )
		Endif
	Enddo
	nMeses := Len( aMeses )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define e inicializa matriz de consulta.									³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aConsulta := Array( nVerbas, nMeses + 3 )
	nConsulta := Len( aConsulta )
	For nI = 1 To nVerbas
		SRV->( 	dbSeek( xFilial( 'SRV' ) + aVerbas[nI] ) )
		aConsulta[nI,1] := aVerbas[nI] + '-' + SRV->RV_DESC
		aConsulta[nI,2] := ""
		For nJ = 3 To nMeses + 1
			aConsulta[nI,nJ] := 0
		Next nJ
		aConsulta[nI][nMeses+3] := .f.
	Next

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza matriz de consulta com os valores da pesquisa selecionada.		³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea( 'TRB' )
	dbSeek( SRA->RA_FILIAL + SRA->RA_MAT )

	Do While !Eof() .and. TRB->RU_FILIAL = SRA->RA_FILIAL .and. TRB->RU_MAT = SRA->RA_MAT

		If Empty(cCodCCAtu)
			cCodCCAtu := AllTrim(TRB->RU_CC)
		EndIf

		//Verifica se o C.Custos e igual
		If AllTrim(cCodCCAtu) == AllTrim(TRB->RU_CC)

			nVrb := Ascan( aVerbas, TRB->RU_VERBA )
			nMes := Ascan( aMeses, TRB->RU_DATA )

			If nVrb > 0 .and. nMes > 0
				aConsulta[ nVrb, 2 ] := TRB->RU_CC
				aConsulta[ nVrb, nMes+1 ] := TRB->RU_VALOR
			Endif

		Else
			//Se houve mudanca de C.Custo totaliza a matriz processada ate o momento
			//e transfere os dados para o Acols
			For nI = 1 to nConsulta
				nVrb := 0
				For nJ = 3 To nMeses+1
					nVrb += aConsulta[nI,nJ]
				Next
				aConsulta[nI][nJ] := nVrb
				//Adiciona ao aCols apenas quando existir valores
				If nVrb > 0
					Aadd( aCols, aConsulta[nI] )
				EndIf
			Next

			//Limpa os valores processados para o C.Custo anterior e recria a matriz
			aConsulta := {}
			aConsulta := Array( nVerbas, nMeses + 3 )
			nConsulta := Len( aConsulta )

			//Define e inicializa novamente a matriz de consulta
			For nI = 1 To nVerbas
				SRV->( 	dbSeek( xFilial( 'SRV' ) + aVerbas[nI] ) )
				aConsulta[nI,1] := aVerbas[nI] + '-' + SRV->RV_DESC
				aConsulta[nI,2] := ""
				For nJ = 3 To nMeses+1
					aConsulta[nI,nJ] := 0
				Next nJ
				aConsulta[nI][nMeses+3] := .f.
			Next

			nVrb := Ascan( aVerbas, TRB->RU_VERBA )
			nMes := Ascan( aMeses, TRB->RU_DATA )
			If nVrb > 0 .and. nMes > 0
				aConsulta[ nVrb, 2 ] := TRB->RU_CC
				aConsulta[ nVrb, nMes+1 ] := TRB->RU_VALOR
			Endif

			cCodCCAtu := AllTrim(TRB->RU_CC)

		EndIf

		dbSkip()
	Enddo

	If lAbreArq
		dbSelectArea( 'TRB' )
		dbCloseArea()
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Cria matriz de cabecalho.												³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	AAdd( aHeader, { STR0022, 'VERBA', '@!', 30, 0, '', 'û', 'C', '  ', ' ' } )
	For nI = 2 To nMeses
		AAdd( aHeader, { Right( aMeses[nI], 2 ) + '/' + Left( aMeses[nI], 4 ), 'VALOR' + STRZERO( nI-1, 3, 0 ),  '@E 999,999,999.99', 15, 0, '', 'û', 'N', '  ', ' ' } )
	Next nI
	AAdd( aHeader, { STR0023, 'TOTAL', '@E 999,999,999.99', 15, 0, '', 'û', 'C', '  ', ' ' } )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Cria matriz de colunas, com os meses totalizados.						³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nI = 1 to nConsulta
		nVrb := 0
		For nJ = 3 To nMeses+1
			nVrb += aConsulta[nI,nJ]
		Next
		aConsulta[nI][nJ] := nVrb
		Aadd( aCols, aConsulta[nI] )
	Next

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a visualizacao foi solicitada.								³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lVisualiza = .t.
		If Len( aCols ) = 0
			Aviso( STR0005, STR0014, { STR0013 } )
			Return .t.
		Endif
		Modelo2( STR0015, {}, {}, {}, 1 )
		Return .t.
	Endif

Return aCols
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM620   ºAutor  ³Microsiga           º Data ³  08/06/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao Gp620Ok() - Confirmacao da execucao do calculo da   º±±
±±º          ³                    pesquisa gerencial.                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Estatica                                                   º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Gp620Ok()
Return ( MsgYesNo( OemToAnsi( STR0021 ), OemToAnsi( STR0005 ) ) )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM620   ºAutor  ³TOTVS               º Data ³  22/10/2013 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºFuncao    ³ Gpm60SetVar() - Transferir o parametro MV_PAR01 para       º±±
±±º          ³ cProcesso ou MV_PAR02 para cRot.                           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ X1_VALID                                                   º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Gpm620SetVar(cParam)
	If cParam == "1"
		cProcesso := &( ReadVar() )
	Else
		cRot := &( ReadVar() )
	Endif
Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM620   ºAutor  ³TOTVS               º Data ³  23/10/2013 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºFuncao    ³ Gpm620Per() - Valid do campo de periodo, verifica se existeº±±
±±º          ³ na tabela RCH.                                             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ X1_VALID                                                   º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Gpm620Per(cParam)
	
	Local aArea := GetArea()
	Local lPerValido
	Local cFil := FWxFilial("RCH", RCH->RCH_FILIAL)
	Local lRet := .T.
	
	DbSelectArea("RCH")
	
	If RCH->(EoF())
		cFil := FWxFilial("RCH")
	EndIf
	
	// Foi usado o F3 e a tabela já está posicionada
	If (RCH->(RCH_FILIAL + RCH_PROCES + RCH_ROTEIR + RCH_PER) == cFil + cProcesso + cRot + cParam)
		lPerValido := .T.
	Else
		DbSetOrder(RetOrder ("RCH", "RCH_FILIAL+RCH_PROCES+RCH_ROTEIR+RCH_PER"))
		lPerValido := DbSeek(cFil+cProcesso+cRot+cParam)
	EndIf
	
	If !lPerValido
		MsgAlert(OemToAnsi(STR0026), OemToAnsi(STR0005)) //"Periodo nao encontrado! Confira tambem o roteiro."###"Atencao"
		lRet := .F.
	ElseIf FunName() == "GPER105"
		SetMVValue("GPE105R","MV_PAR11",RCH->RCH_NUMPAG)
		MV_PAR11 := RCH->RCH_NUMPAG
	ElseIf FunName() == "GPEM620"
		If ReadVar() == "MV_PAR03"
			SetMVValue("GPM620","MV_PAR04",RCH->RCH_NUMPAG)
			MV_PAR04 = RCH->RCH_NUMPAG
		Else
			SetMVValue("GPM620","MV_PAR06",RCH->RCH_NUMPAG)
			MV_PAR06 = RCH->RCH_NUMPAG
		EndIf
	EndIf
	
	RestArea(aArea)
	
Return lRet

/*/{Protheus.doc} fPSQInBd()
Verifica existência de arquivos .PSQ (e .psx de índice) na system, de pesquisas antigas
geradas pelo usuário logado, para importar para o banco de dados e apagar o arquivo ao final
@type		function
@author		isabel.noguti
@since		05/10/2018
@version	12.1.17
/*/
Function fPSQInBd()
	Local aArquivos	:= Directory( Substr( cNomeUser, 1, 5 ) + '???.PSQ' )
	Local nArquivos	:= Len(aArquivos)
	Local lRet		:= .F.
	Local aSays		:= {}
	Local aButtons	:= {}
	Local nI		:= 0
	Local cNomeArq	:= ""
	Local cNomeTab	:= ""
	Local cNomeInd	:= ""
	Local cRDD		:= __LocalDriver
	Local oError

	Private aSize	:= {}
	Private aInfo	:= {}
	Private aObj	:= {}
	Private aPObj	:= {}
	Private aPGet	:= {}

	If nArquivos == 0
		lRet := .T.
	Else
		aSize := MsAdvSize()
		AADD( aObj, { 100, 100, .T., .T. })
		aInfo := { aSize[1], aSize[2], aSize[3], aSize[4], 3, 3 }
		aPObj := MsObjSize( aInfo, aObj )

		// Cálculo automático de dimensões dos objetos MSGET
		aPGet := MsObjGetPos( (aSize[3] - aSize[1]), 315, { {004, 024, 240, 270} } )

		AAdd( aSays, OemToAnsi(STR0030) )	//"Devido à descontinuidade do uso de drive ISAM, a rotina de pesquisas gerenciais passa a"
		AAdd( aSays, OemToAnsi(STR0031) )	//"ser processada em SGBD, deixando de utilizar os arquivos externos (com extensão .PSQ)."
		AAdd( aSays, OemToAnsi(STR0032) )	//"Para utilização desta rotina, o usuário logado deverá importar seus arquivos gerados"
		AAdd( aSays, OemToAnsi(STR0033) )	//"anteriormente na pasta system do sistema para o banco de dados."
		AAdd( aSays, OemToAnsi(STR0034) )	//"Deseja importar todas as suas pesquisas agora?"
		AAdd( aButtons, {01, .T., {|o| lRet := .T., FechaBatch()}} )
		AAdd( aButtons, {02, .T., {|o| lRet := .F., FechaBatch()}} )

		FormBatch(OemToAnsi(STR0035), aSays, aButtons)	//"Importação dos arquivos .PSQ"

		If lRet

			For nI := 1 to nArquivos
				cNomeArq := RetArq( cRDD, aArquivos[nI][1], .T. )
				cNomeInd := RetArq( cRDD, Left( cNomeArq, 9 ) + 'psx', .F. )
				cNomeTab := RetArq( "TOPCONN", 'PSQ'+SubStr(aArquivos[nI][1],6,3)+AllTrim(Substr( StrTran(cUserName,".",""), 1, 20 )), .T. )

				If File(cNomeArq)
					oError := ErrorBlock({|e| CheckErro(e, cNomeArq, cNomeInd)})
						DbUseArea( .T., cRDD, cNomeArq, "XXX", .F., .F. )
					ErrorBlock(oError)

					If Type("lErroPSQ") == "U" .Or. !lErroPSQ
						Set Index To (cNomeInd)

						FWMsgRun(,{|| Importar(cNomeTab)   }, OemToAnsi(STR0036),OemToAnsi(STR0035)) //"Cancelar - <Ctrl-X>", "Importação dos arquivos .PSQ"

						If Select("XXX") > 0
							XXX->( DbCloseArea() )
						EndIf

						fErase(cNomeArq)
						fErase(cNomeInd)
					EndIf
				EndIf
			Next nI

		EndIf

	EndIf

Return lRet

//Caso arquivo seja dbf e de erro ao abrir será dado a possibilidade de excluí-lo ou continuar a rotina sem dar error log
Static Function CheckErro(e, cNomeArq, cNomeInd)

	LOCAL aArrSay := {}
	LOCAL aArrBut := {}
	LOCAL cArqTxt := ''

	AADD(aArrSay, 'Existe um arquivo de pesquisa (.PSQ) corrompido ou incompatível na pasta system')
	AADD(aArrSay, 'Deseja excluí-lo agora?')

	AADD(aArrBut, {3, .T., {|| lExeFun := .T., ApagaArq(cNomeArq, cNomeInd) }})
	AADD(aArrBut, {2, .T., {|| lExeFun := .F., FechaBatch()}})

	FormBatch('Arquivo corrompido', aArrSay, aArrBut)

	lErroPSQ := .T.

Return

Static Function ApagaArq(cNomeArq, cNomeInd)

	fErase(cNomeArq)
	fErase(cNomeInd)
	FechaBatch()

Return



/*/{Protheus.doc} Importar
Importa dados dos arquivos .PSQ para tabelas no banco, nomeadas como 'PSQ999nomeusuario'
@type	 function
@author  isabel.noguti
@since   10/10/2018
@version 12.1.17
/*/
Static Function Importar(cNomeTab)
	Local cRDD		:= "TOPCONN"
	Local cIndCon	:= 'RU_FILIAL + RU_MAT + RU_CC + RU_VERBA + RU_DATA'
	Local aCampos	:= {{ 'RU_FILIAL',  'C', FWGETTAMFILIAL		, 0},;
						{ 'RU_MAT'   ,  'C', TamSx3("RA_MAT")[1], 0},;
						{ 'RU_CC'    ,  'C', 09					, 0},;
						{ 'RU_VERBA' ,  'C', 03					, 0},;
						{ 'RU_DATA'  ,  'C', 06					, 0},;
						{ 'RU_VALOR' ,  'N', 12					, 2},;
						{ 'RU_PARAM' ,  'C', 50					, 0}}

	DbCreate( cNomeTab, aCampos, cRDD )
	DbUseArea( .T., cRDD, cNomeTab, "YYY", .F., .F. )
	dbCreateIndex( cNomeTab + "1", cIndCon, {|| &(cIndCon)} )
	dbClearInd()
	dbSetIndex( cNomeTab + "1" )
	dbSelectArea( "YYY" )

	dbSelectArea( "XXX" )
	XXX->(DbGoTop())
	While (XXX->(!EoF()))

		RecLock("YYY",.T.)
		YYY->RU_FILIAL	:= XXX->RU_FILIAL
		YYY->RU_MAT		:= XXX->RU_MAT
		YYY->RU_CC		:= XXX->RU_CC
		YYY->RU_VERBA	:= XXX->RU_VERBA
		YYY->RU_DATA	:= XXX->RU_DATA
		YYY->RU_VALOR	:= XXX->RU_VALOR
		YYY->RU_PARAM	:= XXX->RU_PARAM
		MsUnlock()

		XXX->(DbSkip())
	EndDo

	If Select("YYY") > 0
		YYY->( DbCloseArea() )
	EndIf

Return
