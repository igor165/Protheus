#INCLUDE "PONM050.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"

Static lPnm050CposBlock		:= ExistBlock( "PNM050CPOS" )
Static lExInAs400			:= ExeInAs400()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONM050  ³ Autor ³Marinaldo de Jesus     ³ Data ³29/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Exclusao de Informacoes Apontadas pelo SIGAPON             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso  	 ³ SIGAPON													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±|Marinaldo   ³21/04/04³Melhor³Tratamento nos Lock dos Registros e Delete|±± 
±±|Mauricio MR ³28/04/04³Melhor³Tratamento de cFilAnt para Integridade	  |±±
±±³Luiz Gustavo³06/02/07³      ³Retiradas funcoes de ajuste de dicionario.³±± 
±±³Igor Franzoi³10/05/07³      ³Verificar campos a mais para Query p/ SRA ³±±
±±³Leandro Dr  ³25/03/08³      ³Inclusao de processo no pergunte, adequado³±±
±±³            ³        ³      ³para trabalhar com objeto oPeriodo        ³±±
±±³Erika K.    ³29/05/08³      ³Ajustes nos indices da tabela SPK para    ³±±
±±³Francisco Jr³29/11/09³026092³Alteracao FWCODFILIAL para uso gestao     ³±±
±±³            ³        ³ /2009³Corporativa.                              ³±±
±±|Glaucia C.  ³29/08/11³022242³Melhoria das consultas SQL para DB2.TDPBEV|±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONM050()

Local aArea			:= GetArea()
Local aRegs			:= {} //Variavel Terporaria. Devera Ser Excluida Para a Proxima Versao
Local aHelpPor	 
Local aHelpEng	 
Local aHelpSpa   
Local aSays   		:= {}
Local aButtons		:= {}
Local cSvFilAnt		:= cFilAnt
Local lBarG1ShowTm 	:= .F.
Local lBarG2ShowTm 	:= .F.
Local nOpcA			:= 0

Private lAbortPrint := .F.
Private cCadastro   := OemToAnsi(STR0001 ) // 'Elimina‡„o das Marca‡”es'
Private oPeriodo	:= RHPERIODO():New()

DEFAULT lPnm050CposBlock	:= ExistBlock( "PNM050CPOS" )
DEFAULT lExInAs400			:= ExeInAs400()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ So Executa se os Modos de Acesso dos Arquivos Relacionados es³
³ tiverm OK.											  	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ValidArqPon()

	Pergunte('PONM050', .F.)
	
	aAdd(aSays,OemToAnsi( STR0003 ) )//'Este programa tem como objetivo efetuar a Elimina‡„o de :'
	aAdd(aSays,OemToAnsi( STR0004 ) )//'- Marca‡”es(SP8)________Acumulado de Marca‡”es(SPG)'
	aAdd(aSays,OemToAnsi( STR0005 ) )//'- Apontamentos(SPC)_____Acumulados Apontamentos(SPH)'
	aAdd(aSays,OemToAnsi( STR0006 ) )//'- Refei‡”es(SP5)________Acumulado de Refei‡”es(SPN)'
	aAdd(aSays,OemToAnsi( STR0007 ) )//'- Resultados(SPB)_______Abonos(SPK)'
	aAdd(aSays,OemToAnsi( STR0008 ) )//'- Banco de Horas(SPI)___Abonos(SPK)'
	
	aAdd(aButtons, { 5,.T.,{|| Pergunte("PONM050",.T. ) } } )
	aAdd(aButtons, { 1,.T.,{|o| nOpcA := 1,IF(GpConfOK(),FechaBatch(),nOpcA := 0 ) }} )
	aAdd(aButtons, { 2,.T.,{|o| FechaBatch() }} )
		
	FormBatch( cCadastro, aSays, aButtons )
	
	IF ( nOpcA == 1 )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se deve Mostrar Calculo de Tempo nas BarGauge			 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		lBarG1ShowTm := ( SuperGetMv("MV_PNSWTG1",NIL,"N") == "S" )
		lBarG2ShowTm := ( SuperGetMv("MV_PNSWTG2",NIL,"S") == "S" )
		/*                               
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Executa o Processo de Exclusao de Marcacoes              			 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		Proc2BarGauge( { || Ponm050Proc() } , STR0001 , NIL , NIL , .T. , lBarG1ShowTm , lBarG2ShowTm )  // 'Elimina‡„o das Marca‡”es'
	EndIF

EndIF	

cFilAnt := cSvFilAnt
	
RestArea( aArea )

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ponm050Proc³Autor ³ Marinaldo de Jesus    ³ Data ³29/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Realizar a Dele‡„o de Registros                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PonM050                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±³           ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³--------³------³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Ponm050Proc()

//-- Defini‡„o de Variaveis Locais   
Local aAreaSRA		:= SRA->( GetArea() )
Local aAreaSP5		:= SP5->( GetArea() )
Local aAreaSP8		:= SP8->( GetArea() )
Local aAreaSPB		:= SPB->( GetArea() )
Local aAreaSPC		:= SPC->( GetArea() )
Local aAreaSPG		:= SPG->( GetArea() )
Local aAreaSPH		:= SPH->( GetArea() )
Local aAreaSPI		:= SPI->( GetArea() )
Local aAreaSPL		:= SPL->( GetArea() )
Local aAreaSPN		:= SPN->( GetArea() )
Local aAreaSPK		:= SPK->( GetArea() )
Local aRecnos		:= {}
Local aTabPadrao 	:= {}
Local aInfo			:= {}
Local aRecsBarG		:= {}
Local bSraScope		:= { || NIL }
Local cFilDe   	 	:= ""
Local cFilAte   	:= ""
Local cCCDe     	:= ""
Local cCCAte    	:= ""
Local cTurnoDe  	:= ""
Local cTurnoAte 	:= ""
Local cMatDe    	:= ""
Local cMatAte   	:= ""
Local cNomeDe   	:= ""
Local cNomeAte  	:= ""
Local cTipo     	:= ""
Local cSituacoes 	:= ''
Local cCategoria 	:= ''
Local cLimpaMotAbo	:= Space( TamSx3("PC_ABONO")[1] )	//Variavel auxiliar para preencher em branco o campo Motivo do Abono
Local nRefDe		:= ""
Local nRefAte		:= ""
Local cTpRefDe		:= ""
Local cTpRefAte		:= ""
Local cAcessaSRA 	:= &("{ || " + ChkRH("PONM050","SRA","2") + "}")
Local cLastFil		:= "__cLastFil__"  
Local cSvFilAnt		:= cFilAnt
Local cTimeIni		:= Time()
Local cMsgBarG1		:= ""
Local dPerIni		:= Ctod("//")
Local dPerFim		:= Ctod("//")
Local lDataApontamento:= .F.
Local lSP8      	:= .F.
Local lSPG      	:= .F.
Local lSPC      	:= .F.
Local lSPH      	:= .F.
Local lSP5      	:= .F.
Local lSPN      	:= .F.
Local lSPB      	:= .F.
Local lSPL			:= .F.
Local lSPI      	:= .F.
Local lSPK      	:= .F. 
Local nLimpa    	:= 2
Local nLastRec		:= 0.00
Local nIncPercG1	:= 0.00
Local nIncPercG2	:= 0.00
Local nRecsBarG		:= 0.00

#IFDEF TOP
   	Local aStruSRA		:= {}
	Local aCposSRA		:= {}
	Local aTempSRA		:= SRA->( dbStruct() )
	Local cQuery	 	:= ""
	Local cQueryCond	:= ""
	Local cRetSqlName	:= ""
	Local lSraQryOpened	:= .F.
	Local nContField	:= Len( aTempSRA	)
	Local uRet			:= NIL
	Local nX
#ENDIF

Private cProcesso		:= ''

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega as Perguntas em Variaveis MV_PAR??                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Pergunte( "PONM050" , .F. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carregando as Perguntas                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cProcesso   := mv_par01
cFilDe    	:= mv_par02									//Filial De
cFilAte   	:= mv_par03									//Filial Ate
cCCDe     	:= mv_par04									//Centro de Custo De
cCCAte    	:= mv_par05									//Centro de Custo Ate
cTurnoDe  	:= mv_par06									//Turno De
cTurnoAte 	:= mv_par07									//Turno Ate
cMatDe    	:= mv_par08									//Matricula De
cMatAte   	:= mv_par09									//Matricula Ate
cNomeDe   	:= mv_par10									//Nome De
cNomeAte  	:= mv_par11									//Nome Ate
dPerIni    	:= mv_par12									//Data Inicio
dPerFim    	:= mv_par13									//Data Fim
lSP8      	:= ( mv_par14 == 2 .or. mv_par14 == 4 )		//Excluir Marcacoes:1=Nao;2;Movimento;4=Ambos
lSPG      	:= ( mv_par14 == 3 .or. mv_par14 == 4 )		//Excluir Marcacoes:1=Nao;3=Acumulado;4=Ambos
lSP5      	:= ( mv_par15 == 2 .or. mv_par15 == 4 )		//Excluir Refeicoes:1=Nao;2=Movimento;4=Ambos
lSPN      	:= ( mv_par15 == 3 .or. mv_par15 == 4 )		//Excluir Refeicoes:1=Nao;3=Acumulado;4=Ambos
lSPC      	:= ( mv_par16 == 2 .or. mv_par16 == 4 )		//Excluir Apontamentos:1=Nao;2=Movimento;4=Ambos
lSPH      	:= ( mv_par16 == 3 .or. mv_par16 == 4 )		//Excluir Apontamentos:1=Nao;3=Acumulado;4=Ambos
lSPB      	:= ( mv_par17 == 2 .or. mv_par17 == 4 )		//Excluir Resultados:1=Nao;2=Movimento;4=Ambos
lSPL      	:= ( mv_par17 == 3 .or. mv_par17 == 4 )		//Excluir Resultados:1=Nao;3=Acumulado;4=Ambos
lSPK      	:= ( mv_par18 == 1 )						//Excluir Abonos
lSPI      	:= ( mv_par19 == 1 )						//Excluir Banco de Horas
cTipo     	:= RetTipoExclu( mv_par20 )					//Tipo a Ser Excluido:1=Gerado;2=Informado;3=Leitura;4=Marcacao;5=Classificado
nLimpa    	:= mv_par21 								//Exclui Todos os Tipos:1=Sim;2=Nao
nRefDe	 	:= mv_par22									//Horas de Refeicao De
nRefAte	 	:= mv_par23									//Horas de Refeicao Ate
cTpRefDe	:= mv_par24									//Tipo de Refeicao De
cTpRefAte	:= mv_par25									//Tipo de Refeicao Ate
cSituacoes	:= mv_par26
cCategoria	:= mv_par27

lDataApontamento:= If(mv_par28 == 1, .T., .F.) //-- Elimina marcacoes/refeicoes pela data de apontamento
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seta as Ordens dos Arquivos                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SP5->( dbSetOrder(1) )
SP8->( dbSetOrder(1) )
SPB->( dbSetOrder(1) )
SPC->( dbSetOrder(2) )
SPG->( dbSetOrder(1) )
SPH->( dbSetOrder(1) )
SPI->( dbSetOrder(1) )
SPL->( dbSetOrder(1) )
SPN->( dbSetOrder(1) )
SPK->( dbSetOrder(RetOrdem( "SPK", "PK_FILIAL+PK_MAT+DTOS(PK_DATA)+PK_CODABO+STR(PK_HORINI,5,2)+PK_TPMARCA+PK_CC+PK_DEPTO+PK_POSTO+PK_CODFUNC") ))

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Procura primeiro funcion rio.                               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SRA->( dbSetOrder( RetOrdem( "SRA" , "RA_FILIAL+RA_TNOTRAB" ) ) )
cInicio  := "RA_FILIAL+RA_TNOTRAB"
cFim     := cFilAte + cTurnoAte

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Cria o Bloco dos Funcionarios que atendam ao Scopo	   	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
bSraScope	:= { || ;
						(;
							(	RA_FILIAL	>= cFilDe  	) .and. (	RA_FILIAL	<= cFilAte  	) .and. ;
							(	RA_TNOTRAB	>= cTurnoDe	) .and. (	RA_TNOTRAB	<= cTurnoAte	) .and. ;
							(	RA_NOME		>= cNomeDe	) .and. (	RA_NOME		<= cNomeAte		) .and. ;
							(	RA_MAT		>= cMatDe	) .and. (	RA_MAT		<= cMatAte		) .and. ;
							(	RA_CATFUNC $ cCategorias ) .and. (	RA_SITFOLH	$ cSituacoes	) .and. ;
							(	RA_CC		>= cCCDe	) .and. (	RA_CC		<= cCCAte		)	    ;
						);
			   }

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Atualiza a Mensagem para a IncProcG1() (Cadastro de Empresas)³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CREATE SCOPE aInfo FOR ( ( ( M0_CODIGO == cEmpAnt ) .and. ( FWGETCODFILIAL >= cFilDe ) .and. ( FWGETCODFILIAL <= cFilAte ) ) )
BarGauge1Set( ( nRecsBarG := SM0->( ScopeCount( aInfo ) ) ) )

#IFNDEF TOP

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Numero de Funcionarios a serem Pocessados                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aRecsBarG := {}
	CREATE SCOPE aRecsBarG FOR Eval( bSraScope )
	nLastRec := SRA->( ScopeCount( aRecsBarG ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Procura primeiro funcion rio.                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	SRA->( dbSeek( cFilDe + cTurnoDe + cMatDe , .T. ) )

#ELSE
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Seta apenas os Campos do SRA que serao Utilizados           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdd( aCposSRA , "RA_FILIAL"	)
	aAdd( aCposSRA , "RA_MAT" 		)	
	aAdd( aCposSRA , "RA_NOME"		)
	aAdd( aCposSRA , "RA_CC"		)
	aAdd( aCposSRA , "RA_TNOTRAB"	)
	aAdd( aCposSRA , "RA_SEQTURN"	)
	aAdd( aCposSRA , "RA_REGRA"		)
	aAdd( aCposSRA , "RA_ADMISSA"	)
	If cPaisLoc == "MEX"
		aAdd( aCposSRA , "RA_FECREI"  	)
	EndIf
	aAdd( aCposSRA , "RA_CATFUNC"	)
	aAdd( aCposSRA , "RA_SITFOLH"	)
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica e Seta os campos a mais incluidos no Mex             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/				
	fAdCpoSra(aCposSra)
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada para Campos do Usuario                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( lPnm050CposBlock )
		IF ( ValType( uRet := ExecBlock("PNM050CPOS",.F.,.F.,aCposSRA) ) == "A" )
			IF Len( uRet ) >= Len( aCposSRA )
				aCposSRA := aClone(uRet)
				uRet	 := NIL
			EndIF
		EndIF
	EndIF
	For nX := 1 To nContField
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega os Campos do SRA para a Montagem da Query			   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF aScan( aCposSRA , { |x| Upper(AllTrim(x)) == Upper( AllTrim( aTempSRA[ nX , 1 ] ) ) } ) > 0.00
			aAdd( aStruSRA , aClone( aTempSRA[ nX ] ) )
		EndIF
	Next nX
	aCposSRA	:= aTempSRA := NIL
	nContField	:= Len( aStruSRA )
	cQuery := "SELECT "
	For nX := 1 To nContField
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inclui os Campos na Montagem da Query						   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cQuery += aStruSRA[ nX , 1 ] + ", "
	Next nX
	cRetSqlName := InitSqlName("SRA")
	cQuery		:= SubStr( cQuery , 1 , Len( cQuery ) - 2 )
	
	cQueryCond	:= " FROM "+cRetSqlName
	cQueryCond	+= " WHERE "
	cQueryCond	+= "RA_FILIAL>='"+cFilDe+"'"
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_FILIAL<='"+cFilAte+"'"
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_TNOTRAB>='"+cTurnoDe+"'"	
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_TNOTRAB<='"+cTurnoAte+"'"
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_MAT>='"+cMatDe+"'"
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_MAT<='"+cMatAte+"'"
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_NOME>='"+cNomeDe+"'"	
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_NOME<='"+cNomeAte+"'"
	cQueryCond	+= " AND " 	
	cQueryCond	+= "RA_CC>='"+cCCDe+"'"
	cQueryCond	+= " AND " 
	cQueryCond	+= "RA_CC<='"+cCCAte+"'"
	cQueryCond	+= " AND "
	
	If !Empty(cProcesso)
		cQueryCond	+= "RA_PROCES='"+cProcesso+"'"
		cQueryCond	+= " AND "
	EndIf
	
	cQueryCond	+= "D_E_L_E_T_=' ' "
	
	cQuery		+= cQueryCond
	cQuery		+= "ORDER BY "+SqlOrder( SRA->( IndexKey() ) )
	cQuery		:= ChangeQuery(cQuery)
	SRA->( dbCloseArea() ) //Fecha o SRA para uso da Query
	IF ( lSraQryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"SRA",.T.,.T.) )
		For nX := 1 To nContField
			IF ( aStruSRA[nX,2] <> "C" )
				TcSetField("SRA",aStruSRA[nX,1],aStruSRA[nX,2],aStruSRA[nX,3],aStruSRA[nX,4])
			EndIF
		Next nX
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica o Total de Registros a Serem Processados            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cQuery := "SELECT COUNT(*) NLASTREC "
		cQuery += cQueryCond
		cQuery := ChangeQuery(cQuery)
        IF ( MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"__QRYCOUNT",.T.,.T.) )
			nLastRec := __QRYCOUNT->NLASTREC
			__QRYCOUNT->( dbCloseArea() )
		Else
			MsAguarde( { || SRA->( dbEval( { || ++nLastRec } ) ) } , STR0002 + STR0009 )	//'Aguarde...'###'Selecionaldo Funcionarios'
			SRA->( dbGotop() )
		EndIF
		cQuery		:= ""
		cQueryCond	:= ""
	Else
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura Arquivo Padrao e Ordem                             ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ChkFile( "SRA" , .F. )
		SRA->( dbSetOrder( RetOrdem( "SRA" ) ) )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Procura primeiro funcion rio.                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		SRA->( dbSeek( cFilDe + cMatDe , .T. ) )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica o Total de Registros a Serem Processados            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nLastRec := SRA->( LastRec() )
	EndIF
#ENDIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicializa a Mensagem para a IncProcG2() ( Funcionarios )	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IncProcG2( OemToAnsi( STR0012 ) , .F. )	//'Processando...'

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Atualiza a Mensagem para a IncProcG2() ( Funcionarios )	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
BarGauge2Set( nLastRec )

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ajusta Estruturas											   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !PonStruct( Nil, Nil, {|x|( VerSP5Struct() ) } )
	   Break
	Endif

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Processa a Exclusao   									   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	While SRA->( !Eof() .and. &(cInicio) <= cFim )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Consiste filtro do intervalo De / Ate                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		#IFNDEF TOP
			IF SRA->( !Eval( bSraScope ) )
				SRA->( dbSkip() )
				Loop
			EndIF
		#ELSE
			IF !( lSraQryOpened )
				IF SRA->( !Eval( bSraScope ) )
					SRA->( dbSkip() )
					Loop
				EndIF
			Else
		       	If 	SRA->( ! ( ( RA_CATFUNC $ cCategorias ) .and. ( RA_SITFOLH	$ cSituacoes ) ) )
					SRA->(dbSkip())              
					Loop
				Endif
			EndIF
		#ENDIF
		
		If !Empty(cProcesso)
			If !( SRA->RA_PROCES == cProcesso )
				SRA->(dbSkip())
				Loop
			EndIf
		EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega as Filiais e Periodos de Apontamento                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	    IF !( cLastFil == SRA->RA_FILIAL )
	    	cLastFil := SRA->RA_FILIAL
	    	cFilAnt	 := IF( !Empty( cLastFil ) , cLastFil , cFilAnt )
			
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem o % de Incremento da 2a. BarGauge					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			nIncPercG1 := SuperGetMv( "MV_PONINC1" , NIL , 5 , cLastFil )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem o % de Incremento da 2a. BarGauge					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			nIncPercG2 := SuperGetMv( "MV_PONINCP" , NIL , 5 , cLastFil )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Atualiza a Mensagem para a IncProcG1() ( Turnos )			   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			fInfo( @aInfo , cLastFil )
			cMsgBarG1 := ( STR0013 + " " + cLastFil + " - " + AllTrim( aInfo[3] ) ) ////"Filial:"
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Inicializa Mensagem na 1a BarGauge                           ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IncProcG1( cMsgBarG1 , .F.  )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Incrementa a Barra de Gauge referente a Filial				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IncPrcG1Time( cMsgBarG1 , nRecsBarG , cTimeIni , .F. , 1 , nIncPercG1 )

	    EndIF
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Movimenta a R‚gua de Processamento                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IncPrcG2Time( OemToAnsi( STR0019 ) , nLastRec , cTimeIni , .T. , 2 , nIncPercG2 )	//"Processados:"

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Consiste controle de acessos e filiais validas               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF SRA->( !(RA_FILIAL $ fValidFil()) .Or. !Eval(cAcessaSRA) )
			SRA->(dbSkip())
			Loop
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta marca‡”es de Refei‡„o (SP5)                          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSP5 )
			#IFNDEF TOP
				DelSp5SpnC("SP5",nLimpa,cTipo,nRefDe,nRefAte,dPerIni,dPerFim,cTpRefDe,cTpRefAte)
			#ELSE
				IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
					DelSp5SpnC("SP5",nLimpa,cTipo,nRefDe,nRefAte,dPerIni,dPerFim,cTpRefDe,cTpRefAte)
				Else
					DelSp5SpnT("SP5",nLimpa,cTipo,nRefDe,nRefAte,dPerIni,dPerFim,cTpRefDe,cTpRefAte)
				EndIF	
			#ENDIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Acumulados de Marca‡”es de Refei‡„o (SPN)        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPN )
			#IFNDEF TOP
				DelSp5SpnC("SPN",nLimpa,cTipo,nRefDe,nRefAte,dPerIni,dPerFim,cTpRefDe,cTpRefAte)
			#ELSE
				IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
					DelSp5SpnC("SPN",nLimpa,cTipo,nRefDe,nRefAte,dPerIni,dPerFim,cTpRefDe,cTpRefAte)
				Else
					DelSp5SpnT("SPN",nLimpa,cTipo,nRefDe,nRefAte,dPerIni,dPerFim,cTpRefDe,cTpRefAte)
				EndIF	
			#ENDIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Marca‡”es (SP8/SPG)                     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	    IF lDataApontamento
	       DeleTopApont( lSP8, lSPG, dPerIni , dPerFim , cLastFil, nLimpa, cTipo) 
	    Else   
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Deleta registros de Marca‡”es (SP8)                         ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( lSP8 )
				#IFNDEF TOP
					DeleteXbs( "SP8" , nLimpa , cTipo , dPerIni , dPerFim )
				#ELSE
					IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
						DeleteXbs( "SP8" , nLimpa , cTipo , dPerIni , dPerFim )
					Else
						DeleteTop( "SP8" , nLimpa , cTipo , dPerIni , dPerFim )
					EndIF	
				#ENDIF
	        EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Aborta o Processamento									   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( lAbortPrint )
				Break
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Deleta registros de Acumulados de Marca‡”es (SPG)           ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( lSPG )
				#IFNDEF TOP
					DeleteXbs( "SPG" , nLimpa , cTipo , dPerIni , dPerFim )
				#ELSE
					IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
						DeleteXbs( "SPG" , nLimpa , cTipo , dPerIni , dPerFim )
					Else
						DeleteTop( "SPG" , nLimpa , cTipo , dPerIni , dPerFim )
					EndIF	
				#ENDIF
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Aborta o Processamento									   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( lAbortPrint )
				Break
			EndIF
	    Endif

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Apontamentos (SPC)                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPC )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Desflega as Marcacoes Apontadas apenas quando nao for selecio³
			³nada a exclusao das marcacoes								  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF IF( !( lSP8 ) , SP8FlgAponta( dPerIni , dPerFim , @aRecnos , @aTabPadrao ) , .T. )
				#IFNDEF TOP
					DeleteXbs( "SPC" , nLimpa , cTipo , dPerIni , dPerFim , aRecnos )
				#ELSE
					IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
						DeleteXbs( "SPC" , nLimpa , cTipo , dPerIni , dPerFim , aRecnos )
					Else
						DeleteTop( "SPC" , nLimpa , cTipo , dPerIni , dPerFim , aRecnos )
					EndIF
				#ENDIF
			EndIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Acumulado de Apontamentos (SPH)         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPH )
			#IFNDEF TOP
				DeleteXbs( "SPH" , nLimpa , cTipo , dPerIni , dPerFim )
			#ELSE
				IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
					DeleteXbs( "SPH" , nLimpa , cTipo , dPerIni , dPerFim )
				Else
					DeleteTop( "SPH" , nLimpa , cTipo , dPerIni , dPerFim )
				EndIF	
			#ENDIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Resultados (SPB)                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPB )
			#IFNDEF TOP
				DeleteXbs( "SPB" , nLimpa , cTipo , dPerIni , dPerFim )
			#ELSE
				IF ( ( lExInAs400 ) .or. ( __lFkInUse ) ) 
					DeleteXbs( "SPB" , nLimpa , cTipo , dPerIni , dPerFim )
				Else
					DeleteTop( "SPB" , nLimpa , cTipo , dPerIni , dPerFim )
				EndIF	
			#ENDIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Acumulado de Resultados (SPL)           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPL )
			#IFNDEF TOP
				DeleteXbs( "SPL" , nLimpa , cTipo , dPerIni , dPerFim )
			#ELSE
				IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
					DeleteXbs( "SPL" , nLimpa , cTipo , dPerIni , dPerFim )
				Else
					DeleteTop( "SPL" , nLimpa , cTipo , dPerIni , dPerFim )
				EndIF	
			#ENDIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Banco de Horas (SPI)                    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPI )
			#IFNDEF TOP
				DeleteXbs( "SPI" , nLimpa , cTipo , dPerIni , dPerFim )
			#ELSE
				IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
					DeleteXbs( "SPI" , nLimpa , cTipo , dPerIni , dPerFim )
				Else
					DeleteTop( "SPI" , nLimpa , cTipo , dPerIni , dPerFim )
				EndIF	
			#ENDIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Aborta o Processamento									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lAbortPrint )
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta registros de Abonos (SPK)                            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lSPK )
			IF IF( !( lSPC ) , SPCClearAbono( dPerIni , dPerFim , cLimpaMotAbo , @aRecnos ) , .T. )
				#IFNDEF TOP
					DeleteXbs( "SPK" , nLimpa , cTipo , dPerIni , dPerFim , aRecnos )
				#ELSE
					IF ( ( lExInAs400 ) .or. ( __lFkInUse ) )
						DeleteXbs( "SPK" , nLimpa , cTipo , dPerIni , dPerFim , aRecnos )
					Else
						DeleteTop( "SPK" , nLimpa , cTipo , dPerIni , dPerFim )
					EndIF
				#ENDIF
			EndIF
		EndIF
		
		SRA->( dbSkip() )

	End While
	
End Sequence

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Fecha a Query do SRA e Restaura o Padrao                    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
#IFDEF TOP
	IF ( lSraQryOpened )
		SRA->( dbCloseArea() )
		ChkFile( "SRA" , .F. )
	EndIF
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reabre os Arquivos										       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ReOpenFiles( { "SP5" , "SPN" , "SP8" , "SPG" , "SPB" , "SPL" , "SPC" , "SPH" , "SPI" , "SPK" } ) 
#ENDIF

RestArea( aAreaSRA )
RestArea( aAreaSP5 )
RestArea( aAreaSP8 )
RestArea( aAreaSPB )
RestArea( aAreaSPC )
RestArea( aAreaSPG )
RestArea( aAreaSPH )
RestArea( aAreaSPI )
RestArea( aAreaSPL )
RestArea( aAreaSPN )
RestArea( aAreaSPK )

cFilAnt	:= cSvFilAnt

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³DelSp5SpnC		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Deleta os Dados do SP5 ou SPN Quando Code Base ou As/400    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DelSp5SpnC(	cAlias		,;
							nLimpa		,;
							cTipo		,;
							nRefDe		,;
							nRefAte		,;
							dPerIni		,;
							dPerFim		,;
							cTpRefDe	,;
							cTpRefAte	 ;
						  )

Local cPrefixo	:= ""
Local cMsgErr	:= ""

cAlias		:= Upper( AllTrim( cAlias ) )
cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )

IF ( cAlias $ ( "SP5_SPN" ) )
	IF ( cAlias )->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT , .F. ) )
		While ( cAlias )->( !Eof() .and. SRA->RA_FILIAL + SRA->RA_MAT == &( cPrefixo+"FILIAL" ) + &( cPrefixo+"MAT" ) )
			IF ( cAlias )->(;
								( &( cPrefixo+"DATA"    ) >= dPerIni		.and. &( cPrefixo+"DATA" )		<= dPerFim		) .and. ;
								( &( cPrefixo+"HORA"    ) >= nRefDe 	.and. &( cPrefixo+"HORA" ) 		<= nRefAte	) .and. ;
								( &( cPrefixo+"TIPOREF" ) >= cTpRefDe	.and. &( cPrefixo+"TIPOREF" )	<= cTpRefAte);
							)	
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Limpa registros conforme tipo de Lancto					  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( ( nLimpa == 1 ) .or. ( ( cAlias )->( &( cPrefixo+"FLAG" ) == cTipo ) ) )
					IF ( cAlias )->( RecLock( cAlias , .F. , .T. ) )
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
						( cAlias )->( MsUnlock() )
					EndIF	
				EndIF
			EndIF
			( cAlias )->( dbSkip() )
		End While
	EndIF
EndIF
	
Return( NIL )

#IFDEF TOP

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
	³Fun‡…o    ³DelSp5SpnT		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
	³Descri‡…o ³Deleta os Dados do SP5 ou SPN Quando TOP					³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Sintaxe   ³<Vide Parametros Formais>									³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Parametros³<Vide Parametros Formais>									³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³ Uso      ³PONM050 													³
	ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Static Function DelSp5SpnT(	cAlias		,;
								nLimpa		,;
								cTipo		,;
								nRefDe		,;
								nRefAte		,;
								dPerIni		,;
								dPerFim		,;
								cTpRefDe	,;
								cTpRefAte	 ;
							  )
	
	Local cPrefixo 		:= ""
	Local cFil			:= SRA->RA_FILIAL
	Local cMat			:= SRA->RA_MAT
	Local cQuery		:= ""
	Local cWhere		:= ""
	Local cQueryDelet	:= ""
	Local cQueryRecno	:= ""
	Local cRetSqlName	:= InitSqlName( cAlias )
	Local cIniData		:= Dtos( dPerIni )
	Local cFimData		:= Dtos( dPerFim )
	Local cCpoRecno 	:= IF( lExInAs400 , "RRN("+cRetSqlName+")", "R_E_C_N_O_" )
	Local lDeleted 		:= .F.
	Local nMinRec 		:= 0.00
	Local nMaxRec 		:= 0.00
	Local nCountDele	:= 0.00
		
	cAlias		:= Upper( AllTrim( cAlias ) )
	cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )
		
	IF ( cAlias $ ( "SP5_SPN" ) )
	
		IF ( lDeleted := ( ( nCountDele := CountDele(cAlias,cPrefixo,cFil,cMat,cIniData,cFimData,cRetSqlName) ) > 0.00 ) )
	
			cQuery := "DELETE FROM " + cRetSqlName
	
			cWhere := " WHERE "
			cWhere += cPrefixo+"FILIAL='"+cFil+"'"
			cWhere += " AND "
			cWhere += cPrefixo+"MAT='"+cMat+"'"
			cWhere += " AND "
			IF !( nLimpa == 1 )
				cWhere += cPrefixo+"FLAG='"+cTipo+"'"
				cWhere += " AND "
			EndIF
			cWhere += cPrefixo+"TIPOREF>='"+cTpRefDe+"'"
			cWhere += " AND "
			cWhere += cPrefixo+"TIPOREF<='"+cTpRefAte+"'"
			cWhere += " AND "
			cWhere += cPrefixo+"DATA>='"+cIniData+"'"
			cWhere += " AND "
			cWhere += cPrefixo+"DATA<='"+cFimData+"'"
			cWhere += " AND "
			cWhere += cPrefixo+"HORA>="+Str(nRefDe,TamSx3(cPrefixo+"HORA")[1],TamSx3(cPrefixo+"HORA")[2])
			cWhere += " AND "
			cWhere += cPrefixo+"HORA<="+Str(nRefAte,TamSx3(cPrefixo+"HORA")[1],TamSx3(cPrefixo+"HORA")[2])
				
			cQuery += cWhere
		
			MsMinMaxRec( cAlias , @nMinRec , @nMaxRec , NIL , cWhere )
		
			While ( nMinRec <= nMaxRec )
				cQueryRecno := " AND "
				cQueryRecno += "("
				cQueryRecno +=		cCpoRecno + " >= " + AllTrim( Str( nMinRec , 18 , 0 ) )
				cQueryRecno += 		" AND "
				cQueryRecno += 		cCpoRecno + " <= " + AllTrim( Str( ( nMinRec += 1024 ) , 18 , 0 ) )
				cQueryRecno += ")"
				cQueryDelet := ( cQuery + cQueryRecno )
				TcSqlExec( cQueryDelet )
			End While
		
		EndIF
	
	EndIF	
	
	Return( lDeleted )
	
#ENDIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³DeleteXbs		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Deleta os Dados Quando Code Base ou As/400    				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DeleteXbs( cAlias , nLimpa , cTipo , dPerIni , dPerFim , aRecnos )

Local cPrefixo 		:= ""
Local cCpo			:= ""
Local cMsgErr		:= ""
Local lExistFlag	:= .F.
Local lExistTipo2	:= .F.
Local lChkFlag		:= .F.
Local lDeleted		:= .F.
Local nRecno		:= 0.00
Local nRecnos		:= 0.00

cAlias		:= Upper( AllTrim( cAlias ) )

IF Empty( aRecnos )
	cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )
	IF ( lExistFlag	:= ( ( cAlias )->( FieldPos( cPrefixo+"FLAG" ) ) > 0.00 ) )
		cCpo := "FLAG"
	ElseIF ( lExistTipo2 := ( ( cAlias )->( FieldPos( cPrefixo+"TIPO2" ) ) > 0.00 ) )
		cCpo := "TIPO2"
	EndIF	
	lChkFlag := ( lExistFlag .or. lExistTipo2 )
	IF ( cAlias)->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT, .F.) )
		While ( cAlias)->( !Eof() .and. SRA->RA_FILIAL + SRA->RA_MAT == &( cPrefixo+"FILIAL" ) + &( cPrefixo+"MAT" ) )
			IF ( ( nLimpa == 1 ) .or. IF( lChkFlag ,  ( ( cAlias )->( &( cPrefixo+cCpo ) ) == cTipo ) , .T. ) )
				IF ( cAlias)->( &( cPrefixo+"DATA" ) >= dPerIni .and. &( cPrefixo+"DATA" ) <= dPerFim )
					IF ( cAlias)->( RecLock( cAlias , .F. , .T. ) )
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
						( cAlias)->( MsUnlock() )
						lDeleted := .T.
					EndIF
				EndIF
			EndIF
			( cAlias)->( dbSkip() )
		End While
	EndIF	
Else
	IF ( lDeleted := ( ( nRecnos := Len( aRecnos ) ) > 0.00 ) )
		For nRecno := 1 To nRecnos
			( cAlias )->( dbGoto( aRecnos[ nRecno ] ) )
			IF ( cAlias )->( RecLock( cAlias , .F. ) )
				IF !( cAlias )->( FkDelete( @cMsgErr ) )
					( cAlias )->( RollBackDelTran( cMsgErr ) )
				EndIF
				( cAlias )->( MsUnLock() )
			EndIF
		Next nRecno
	EndIF	
EndIF

Return( lDeleted )

#IFDEF TOP

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
	³Fun‡…o    ³DeleteToP		³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
	³Descri‡…o ³Deleta os Dados Quando TOP               				    ³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Sintaxe   ³<Vide Parametros Formais>									³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Parametros³<Vide Parametros Formais>									³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³ Uso      ³PONM050 													³
	ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Static Function DeleteToP( cAlias , nLimpa , cTipo , dPerIni , dPerFim , aRecnos )
	
	Local cPrefixo 		:= ""
	Local cQuery		:= ""
	Local cWhere		:= ""	
	Local cQueryDelet	:= ""
	Local cQueryRecno	:= ""
	Local cRetSqlName	:= InitSqlName( cAlias )
	Local cFil			:= SRA->RA_FILIAL
	Local cMat			:= SRA->RA_MAT
	Local cIniData		:= Dtos( dPerIni )
	Local cFimData		:= Dtos( dPerFim )
	Local cCpoRecno 	:= IF( lExInAs400 , "RRN("+cRetSqlName+")", "R_E_C_N_O_" )
	Local lExistFlag	:= .F.
	Local lExistTipo2	:= .F.
	Local lDeleted		:= .F.
	Local nMinRec 		:= 0.00
	Local nMaxRec 		:= 0.00
	Local nCountDele	:= 0.00
	
	cAlias		:= Upper( AllTrim( cAlias ) )
	cPrefixo	:= ( PrefixoCpo( cAlias ) + "_" )
	
	IF Empty( aRecnos )
	
		IF !( cAlias $ ( "SP5_SPN" ) )
		
			IF ( lDeleted := ( ( nCountDele := CountDele(cAlias,cPrefixo,cFil,cMat,cIniData,cFimData,cRetSqlName) ) > 0.00 ) )
			
				lExistFlag	:= ( ( cAlias )->( FieldPos( cPrefixo+"FLAG" ) ) > 0.00 )
				lExistTipo2	:= ( ( cAlias )->( FieldPos( cPrefixo+"TIPO2" ) ) > 0.00 )
		
				cQuery := "DELETE FROM " + cRetSqlName
					
				cWhere := " WHERE "
				cWhere += ( cPrefixo+"FILIAL='"+cFil+"'" )
				cWhere += " AND "
				cWhere += ( cPrefixo+"MAT='"+cMat+"'" )
				cWhere += " AND "
				IF !( nLimpa == 1 )
					IF ( lExistFlag )
						cWhere += ( cPrefixo+"FLAG='"+cTipo+"'" )
						cWhere += " AND "
					ElseIF ( lExistTipo2 )
						cWhere += ( cPrefixo+"TIPO2='"+cTipo+"'" )
						cWhere += " AND "
					EndIF
				EndIF
				cWhere += ( cPrefixo+"DATA>='"+cIniData+"'" )
				cWhere += " AND "
				cWhere += ( cPrefixo+"DATA<='"+cFimData+"'" )
	
				cQuery += cWhere
			
				MsMinMaxRec( cAlias , @nMinRec , @nMaxRec , NIL , cWhere )
		
				While ( nMinRec <= nMaxRec )
					cQueryRecno := " AND "
					cQueryRecno += "("
					cQueryRecno +=		cCpoRecno + " >= " + AllTrim( Str( nMinRec , 18 , 0 ) )
					cQueryRecno += 		" AND "
					cQueryRecno += 		cCpoRecno + " <= " + AllTrim( Str( ( nMinRec += 1024 ) , 18 , 0 ) )
					cQueryRecno += ")"
					cQueryDelet := ( cQuery + cQueryRecno )
					TcSqlExec( cQueryDelet )
				End While
	
			EndIF
		
		EndIF
	
	Else    
	
		lDeleted := ( ( nMaxRec := Len( aRecnos ) ) > 0.00 )
		For nMinRec := 1 To nMaxRec
		
			nCountDele := aRecnos[ nMinRec ]
			
			cQueryDelet := "DELETE FROM " + cRetSqlName
			cQueryDelet += " WHERE "
			cQueryDelet += cCpoRecno + "=" + AllTrim( Str( nCountDele , 18 , 0 ) )
			TcSqlExec( cQueryDelet )
			
		Next nMinRec
		
	EndIF
	
	Return( lDeleted )

#ENDIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³SP8FlgAponta    ³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retira o Flag de Apontamento do SP8      				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SP8FlgAponta( dPerIni , dPerFim , aRecnos , aTabPadrao )

Local aTabCalend	:= {}
Local cSvAlias		:= Alias()
Local cAlias		:= "SPC"
Local cAliasQuery	:= cAlias
Local cAliasSP8		:= "SP8"
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cFilMat		:= ( cFil + cMat )
Local dLstData		:= Ctod("//")
Local lExistApont	:= .F.
Local lQueryOpened	:= .F.
Local lSP8QryOpened	:= .F.
Local nPosCalend	:= 0.00

#IFDEF TOP
	Local aSp8Recnos		:= {}
	Local aSpcFields		:= ( "SPC" )->( dbStruct() )
	Local cIniData	 		:= ""
	Local cFimData			:= ""
	Local cQuery	 		:= ""
	Local cQuerySP8			:= ""
	Local cRetSqlName		:= InitSqlName( cAlias )
	Local cSp8RetSqln		:= InitSqlName( cAliasSP8 )
	Local cSp8IndexKey		:= SqlOrder( ( cAliasSP8 )->( IndexKey() ) )
	Local cCpoRecno			:= ""
	Local cDataBase			:= ""
	Local nSpcFields 		:= Len( aSpcFields )
	Local nRecno			:= 0.00
	Local nRecnos			:= 0.00
	Local nX
#ENDIF

aRecnos := {}

#IFNDEF TOP

	( cAliasQuery )->( dbSeek( cFilMat  , .F. ) )

#ELSE

	IF ( !( lExInAs400 ) .and. !( __lFkInUse ) )
	
		cIniData	:= Dtos( dPerIni )
		cFimData	:= Dtos( dPerFim )
		cCpoRecno	:= IF( lExInAs400 , "RRN("+cRetSqlName+")", "R_E_C_N_O_" )
		cDataBase	:= IF( lExInAs400 , GetDataBase() , "" )
	
		IF ( lExistApont := ( CountDele(cAlias,"PC_",cFil,cMat,cIniData,cFimData,cRetSqlName) > 0.00 ) ) 
			cAliasQuery := ( "__Q" + cAliasQuery + "QRY" )
			cQuery := "SELECT "
			For nX := 1 To nSpcFields
				cQuery += aSpcFields[ nX , 01 ] + ", "
			Next nX
			cQuery += "R_E_C_N_O_ RECNO "
			cQuery += " FROM " + cRetSqlName
			cQuery += " WHERE "
			cQuery += "PC_FILIAL='"+cFil+"'"
			cQuery += " AND "
			cQuery += "PC_MAT='"+cMat+"'"
			cQuery += " AND "
			cQuery += " ( "
			cQuery += 		"PC_DATA>='"+cIniData+"'"
			cQuery += 		" AND "
			cQuery += 		"PC_DATA<='"+cFimData+"'"
			cQuery += " ) "
			cQuery += "ORDER BY " + SqlOrder( (cAlias)->( IndexKey() ) )
			cQuery := ChangeQuery( cQuery )
			IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.T.,.T.) )
				For nX := 1 To nSpcFields
					IF !( aSpcFields[ nX , 02 ] == "C" )
						TcSetField(cAliasQuery,aSpcFields[nX,01],aSpcFields[nX,02],aSpcFields[nX,03],aSpcFields[nX,04])
					EndIF
				Next nX
				cQuery := ""
			EndIF
		EndIF

	EndIF

	IF !( lQueryOpened )
		cAliasQuery	:= cAlias
		( cAliasQuery )->( dbSeek( cFilMat , .F. ) )
	EndIF	
	
#ENDIF

#IFNDEF TOP
	lExistApont := ( cAliasQuery )->( Found() )
#ELSE
	IF !( lQueryOpened )
		lExistApont := ( cAliasQuery )->( Found() )
	Else
		lExistApont := ( cAliasQuery )->( !Eof() )
	EndIF
#ENDIF

IF ( lExistApont )
	
	CriaCalend(dPerIni,dPerFim,SRA->RA_TNOTRAB,SRA->RA_SEQTURN,@aTabPadrao,@aTabCalend,cFil,NIL,NIL,NIL,NIL,NIL,.F.)

	dPerIni -= 2
	dPerFim += 2
	
	#IFDEF TOP

		IF ( lQueryOpened )

			cIniData	:= Dtos( dPerIni )
			cFimData	:= Dtos( dPerFim )

		EndIF

	#ENDIF	
	
	While ( cAliasQuery )->( !Eof() .and. cFilMat == PC_FILIAL + PC_MAT )

		#IFNDEF TOP

			IF ( cAliasQuery )->( PC_DATA >= dPerIni .and. PC_DATA <= dPerFim )

		#ENDIF

				IF !( dLstData == ( cAliasQuery )->( PC_DATA ) )
			
					dLstData := ( cAliasQuery )->( PC_DATA )
			
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Retira o Flag de Marcacao Apontada do SP8					  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					IF ( nPosCalend := aScan( aTabCalend , { |x| x[1] == dLstData .and. x[4] == "1E" } ) ) > 0.00

						#IFDEF TOP
						
							IF ( !( lExInAs400 ) .and. !( __lFkInUse ) )
							
								cQuerySP8	:= "SELECT "
								cQuerySP8 	+= "R_E_C_N_O_ RECNO "
								cQuerySP8	+= " FROM "+ cSp8RetSqln
								cQuerySP8	+= " WHERE "
								cQuerySP8	+= "P8_FILIAL='"+cFil+"'"
								cQuerySP8	+= " AND "
								cQuerySP8	+= "P8_MAT='"+cMat+"'"
								cQuerySP8	+= " AND "
								cQuerySP8	+= "P8_ORDEM='"+aTabCalend[ nPosCalend , 02 ]+"'"
								cQuerySP8	+= " AND "
								cQuerySP8	+= " ( "
								cQuerySP8	+= 		"P8_DATA>='"+cIniData+"'"
								cQuerySP8	+= 		" AND "
								cQuerySP8	+= 		"P8_DATA<='"+cFimData+"'"
								cQuerySP8	+= " ) "
								cQuerySP8	+= " AND "
								cQuerySP8	+= "P8_APONTA='S'"
								cQuery		+= "ORDER BY "+cSp8IndexKey
								cQuerySP8	:= ChangeQuery( cQuerySP8 )
					
								cAliasSP8	:= "QRYSP8REC"
					
								IF !( lSP8QryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuerySP8),cAliasSP8,.T.,.T.) )
									cAliasSP8 := "SP8"
								EndIF
							
							EndIF
						
						#ENDIF
						
						IF ( lSP8QryOpened )

							While ( cAliasSP8 )->( !Eof() )
								( cAliasSP8 )->( aAdd( aSp8Recnos , RECNO ) )
								( cAliasSP8 )->( dbSkip() )
							End While
							cQuerySP8 := ""
							( cAliasSP8 )->( dbCloseArea() )
							dbSelectArea( cAliasQuery )
						
						Else
							
							IF ( cAliasSP8 )->( dbSeek( ( cAliasQuery )->( PC_FILIAL + PC_MAT ) + aTabCalend[ nPosCalend , 02 ] ) )
								While ( cAliasSP8 )->( !Eof() .and. P8_FILIAL + P8_MAT + P8_ORDEM == ( cFilMat + aTabCalend[ nPosCalend , 02 ] )  )
									IF ( cAliasSP8 )->( P8_DATA >= dPerIni .and. P8_DATA <= dPerFim )
										IF ( cAliasSP8 )->( RecLock( "SP8" , .F. , .T. ) )
											( cAliasSP8 )->( P8_APONTA ) := "N"
											( cAliasSP8 )->( MsUnLock() )
										EndIF
									EndIF
									( cAliasSP8 )->( dbSkip() )
								End While
							EndIF

		   				EndIF
			
		   			EndIF
			
				EndIF

				#IFNDEF TOP

					aAdd( aRecnos , ( cAliasQuery )->( Recno() ) )

				#ELSE

					IF !( lQueryOpened )

						aAdd( aRecnos , ( cAliasQuery )->( Recno() ) )

					Else

						aAdd( aRecnos , ( cAliasQuery )->( RECNO ) )

					EndIF	

				#ENDIF

		#IFNDEF TOP				

			EndIF

		#ENDIF	

		( cAliasQuery )->( dbSkip() )

	End While

	#IFDEF TOP

		nRecnos := Len( aSp8Recnos )
		For nRecno := 1 To nRecnos 
			cQuerySP8 := "UPDATE "
			IF ( lExInAs400 )
				cQuerySP8 += cDataBase+"/"+cSp8RetSqln
			Else
				cQuerySP8 += cSp8RetSqln
			EndIF
			cQuerySP8 += " SET P8_APONTA='N' "
			cQuerySP8 += " WHERE " 
			cQuerySP8 += cCpoRecno + "=" + AllTrim( Str( aSp8Recnos[ nRecno ] , 18 , 0 ) )
			TcSqlExec( cQuerySP8 )
		Next nRecno
		IF ( lQueryOpened )
			( cAliasQuery )->( dbCloseArea() )
		EndIF

	#ENDIF	

EndIF

dbSelectArea( cSvAlias )

Return( lExistApont )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³SPCClearAbono   ³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Limpa os Abonos do SPC                   				    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SPCClearAbono( dPerIni , dPerFim , cLimpaMotAbo , aRecnos )

Local cSvAlias			:= Alias()
Local cAlias			:= "SPK"
Local cAliasQuery		:= cAlias
Local cAliasSPC			:= "SPC"
Local cFil				:= SRA->RA_FILIAL
Local cMat				:= SRA->RA_MAT
Local cChave    		:= ""
Local cChave1   		:= ""
Local lExistAbono		:= .F.
Local lSPCQryOpened		:= .F.

#IFDEF TOP
	Local aSpcRecnos		:= {}
	Local aSpkFields		:= ( "SPK" )->( dbStruct() )
	Local cIniData	 		:= ""
	Local cFimData			:= ""
	Local cQuery	 		:= ""
	Local cQuerySPC			:= ""
	Local cCpoRecno			:= ""
	Local cRetSqlName		:= InitSqlName( cAlias )
	Local cSpcRetSqln		:= InitSqlName( cAliasSPC )
	Local cSpcIndexKey		:= SqlOrder( ( cAliasSPC )->( IndexKey() ) )
	Local lQueryOpened		:= .F.
	Local nSpkFields 		:= Len( aSpkFields )
	Local nRecno			:= 0.00
	Local nRecnos			:= 0.00
	Local nX
#ENDIF

aRecnos := {}

#IFNDEF TOP

	( cAliasQuery )->( dbSeek( cChave , .F. ) )

#ELSE

	IF ( !( lExInAs400 ) .and. !( __lFkInUse ) )
		cIniData	:= Dtos( dPerIni )
		cFimData	:= Dtos( dPerFim )
		cCpoRecno	:= IF( lExInAs400 , "RRN("+cRetSqlName+")", "R_E_C_N_O_" )
	
		IF ( lExistAbono := ( CountDele(cAlias,"PK_",cFil,cMat,cIniData,cFimData,cRetSqlName) > 0.00 ) ) 
			cAliasQuery := ( "__Q" + cAliasQuery + "QRY" )
			cQuery := "SELECT "
			For nX := 1 To nSpkFields
				cQuery += aSpkFields[ nX , 01 ] + ", "
			Next nX
			cQuery += "R_E_C_N_O_ RECNO "
			cQuery += " FROM "
			cQuery += cRetSqlName
			cQuery += " WHERE "
			cQuery += "PK_FILIAL='"+cFil+"'"
			cQuery += " AND "
			cQuery += "PK_MAT='"+cMat+"'"
			cQuery += " AND "
			cQuery += " ( "
			cQuery += 		"PK_DATA>='"+cIniData+"'"
			cQuery +=		" AND "
			cQuery += 		"PK_DATA<='"+cFimData+"'"
			cQuery += " ) "
			cQuery += "ORDER BY " + SqlOrder( (cAlias)->( IndexKey() ) )
			cQuery := ChangeQuery( cQuery )
			IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.T.,.T.) )
				For nX := 1 To nSpkFields
					IF !( aSpkFields[ nX , 02 ] == "C" )
						TcSetField(cAliasQuery,aSpkFields[nX,01],aSpkFields[nX,02],aSpkFields[nX,03],aSpkFields[nX,04])
					EndIF
				Next nX
				cQuery := ""
			EndIF
		EndIF

	EndIF
	
	IF !( lQueryOpened )
		cAliasQuery		:= cAlias
		( cAliasQuery )->( dbSeek( cChave , .F. ) )
	EndIF
	
#ENDIF

#IFNDEF TOP
	lExistAbono := ( cAliasQuery )->( Found() )
#ELSE
	IF !( lQueryOpened )
		lExistAbono := ( cAliasQuery )->( Found() )
	Else
		lExistAbono := ( cAliasQuery )->( !Eof() )		
	EndIF
#ENDIF

IF ( lExistAbono )

	cChave	:= ( cFil + cMat )

	While ( cAliasQuery )->( !Eof() .and. cChave == (PK_FILIAL + PK_MAT) )

		IF ( cAliasQuery )->( PK_DATA >= dPerIni .And. PK_DATA <= dPerFim )
			
			#IFDEF TOP

			IF ( !( lExInAs400 ) .and. !( __lFkInUse ) )

					cQuerySPC	:= "SELECT "
					cQuerySPC 	+= "R_E_C_N_O_ RECNO "
					cQuerySPC	+= " FROM "+cSpcRetSqln
					cQuerySPC	+= " WHERE "
					cQuerySPC	+= "PC_FILIAL='"+cFil+"'"
					cQuerySPC	+= " AND "
					cQuerySPC	+= "PC_MAT='"+cMat+"'"
					cQuerySPC	+= " AND "
					cQuerySPC	+= "PC_ABONO='"+(cAliasQuery)->(PK_CODABO)+"'"
					cQuerySPC	+= " AND "
					cQuerySPC	+= "PC_DATA='"+Dtos((cAliasQuery)->(PK_DATA))+"'"
					cQuerySPC	+= " AND "
					cQuerySPC	+= "PC_CC='"+(cAliasQuery)->(PK_CC)+"'"
					cQuerySPC	+= " AND "
					cQuerySPC	+= "PC_TPMARCA='"+(cAliasQuery)->(PK_TPMARCA)+"'"
					cQuery		+= "ORDER BY "+cSpcIndexKey
					cQuerySPC	:= ChangeQuery( cQuerySPC )
				   
					cAliasSPC	:= "QRYSPCREC"
					
					IF !( lSPCQryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuerySPC),cAliasSPC,.T.,.T.) )
						cAliasSPC	:= "SPC"
					EndIF
					
	            EndIF
            
            #ENDIF
                
			IF ( lSPCQryOpened )

				While ( cAliasSPC )->( !Eof() )
					( cAliasSPC )->( aAdd( aSpcRecnos , RECNO ) )
					( cAliasSPC )->( dbSkip() )
				End While
				cQuerySPC := ""
				( cAliasSPC )->( dbCloseArea() )
				dbSelectArea( cAliasQuery )
				
			Else				

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Zera o Abono e Limpa o Motivo								   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				cChave1 := ( cAliasQuery )->( cChave + Dtos(PK_DATA)+ PK_CODEVE + PK_TPMARCA + PK_CC )
				IF ( cAliasSPC )->( dbSeek( cChave1 ) )
					IF ( cAliasSPC )->( RecLock( "SPC" , .F. ) )
						( cAliasSPC )->( PC_QTABONO	)	:= 0.00
	               		( cAliasSPC )->( PC_ABONO	)	:= cLimpaMotAbo
						( cAliasSPC )->( MsUnLock() )
					EndIF
				EndIF

			EndIF
			
			#IFNDEF TOP
				aAdd( aRecnos , ( cAliasQuery )->( Recno() ) )
			#ELSE
				IF !( lQueryOpened )
					aAdd( aRecnos , ( cAliasQuery )->( Recno() ) )
				Else
					aAdd( aRecnos , ( cAliasQuery )->( RECNO ) )
				EndIF	
			#ENDIF	
		
		EndIF
        
		( cAliasQuery )->( dbSkip() )
		
	End While

	#IFDEF TOP

		nRecnos := Len( aSpcRecnos )
		For nRecno := 1 To nRecnos
			cQuerySPC := "UPDATE "
			IF ( lExInAs400 )
				cQuerySPC += cDataBase+"/"+cSpcRetSqln
			Else
				cQuerySPC += cSpcRetSqln
			EndIF
			cQuerySPC += " SET "
			cQuerySPC += "PC_QTABONO=0 , "
			cQuerySPC += "PC_ABONO='" + cLimpaMotAbo + "'"
			cQuerySPC += " WHERE "
			cQuerySPC += cCpoRecno + "=" + AllTrim( Str( aSpcRecnos[ nRecno ] , 18 , 0 ) )
			TcSqlExec( cQuerySPC )
		Next nRecno
		IF ( lQueryOpened )
			( cAliasQuery )->( dbCloseArea() )
		EndIF

	#ENDIF	

EndIF

dbSelectArea( cSvAlias )

Return( lExistAbono )


#IFDEF TOP

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
	³Fun‡…o    ³CountDele	    ³Autor³Marinaldo de Jesus ³ Data ³28/01/2003³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
	³Descri‡…o ³Conta Registros para ver se deve haver delecao				³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Sintaxe   ³<Vide Parametros Formais>									³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Parametros³<Vide Parametros Formais>									³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³ Uso      ³PONM050 													³
	ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Static Function CountDele(	cAlias		,;
								cPrefixo	,;
								cFil		,;
								cMat		,;
								cIniData	,;
								cFimData	,;
								cRetSqlName	 ;
							 )
	
	Local cSvAlias	 := Alias()	
	Local nCountDele := 0.00

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica o Total de Registros a Serem Processados            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cQuery := "SELECT COUNT(*) NCOUNTDELE "
	cQuery += " FROM "
	cQuery += cRetSqlName
	cQuery += " WHERE "
	cQuery += cPrefixo+"FILIAL='"+cFil+"'"
	cQuery += " AND "  
	cQuery += cPrefixo+"MAT='"+cMat+"'"
	cQuery += " AND "  
	cQuery += " ( "
	cQuery += 		cPrefixo+"DATA>='"+cIniData+"'"
	cQuery += 		" AND "  
	cQuery += 		cPrefixo+"DATA<='"+cFimData+"'"
	cQuery += " ) "
	cQuery := ChangeQuery(cQuery)
	IF MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"__RECSDELE")
		nCountDele := __RECSDELE->NCOUNTDELE
		__RECSDELE->( dbCloseArea() )
	EndIF

	dbSelectArea( cSvAlias )
	
	Return( nCountDele )

#ENDIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³RetTipoExclu    ³Autor³Marinaldo de Jesus ³ Data ³02/04/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retorna o Tipo para Exclusao                  				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONM050 													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function RetTipoExclu( nMvPar )
Return( IF(nMvPar==1,"G",IF(nMvPar==2,"I",IF(nMvPar==3,"E",IF(nMvPar==4,"M","A")))) )

#IFDEF TOP

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
	³Fun‡…o	   ³ReOpenFiles   ³Autor³Equipe Advanded RH   ³ Data ³11/03/2004³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
	³Descri‡…o ³Reabre os Arquivos em Modo Compartilhado					³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Sintaxe   ³<Vide parametros Formais>                                   ³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Parametros³<Vide parametros Formais>                                   ³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³ Uso	   ³PONM090   												    ³
	ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Static Function ReOpenFiles( aFilesReOpen )
	
	Local nLoop
	Local nLoops
	
	nLoops := Len( aFilesReOpen )
	For nLoop := 1 To nLoops
	    ( aFilesReOpen[ nLoop ] )->( dbCloseArea() )
	    ChkFile( aFilesReOpen[ nLoop ] )
	Next nLoop
	
	Return( NIL )

#ENDIF
/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DeleTopApont   ³ Autor ³Mauricio MR        ³ Data ³03/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deleta as marcacoes conforme o periodo informado		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³DeleTopApont()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametro ³															 ³
³          ³dPerIni  		-> Data Inicial			                     ³
³          ³dPerFim  		-> Data Final			         		     ³
³          ³dPerIni   	-> Inicio Periodo de Apontamento				 ³
³          ³               Retornado.                               	 ³
³          ³dPerFim   	-> Final do Periodo de Apontamento				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponm050			                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function DeleTopApont( lSP8, lSPG, dPerIni , dPerFim, cLastFil, nLimpa, cTipo)

Local aPeriodos		:= {}
Local aMarcacoes	:= {}
Local aTabCalend	:= {}
Local aTabPadrao	:= {}
Local aTurnos		:= {}
Local cOrdem	
Local cTurno		:= ""
Local cSeq			:= ""   
Local dData
Local dDataApo		:= Ctod("//")
Local dMarcIni   	:= Ctod("//")	//-- Data Inicial a Considerar para Recuperar as Marcacoes
Local dMarcFim   	:= Ctod("//")	//-- Data Final a Considerar para Recuperar as Marcacoes
Local dPerCorrIni
Local dPerCorrFim
Local lImpAcum   	:= .F.  
Local cMsgErr		:= ""   
Local nDia
Local nDias
Local nMarc  
Local nPosMarc
Local nTab
Local nX  

oPeriodo:dDataIni := dPerIni
oPeriodo:dDataFim := dPerFim

//Faz a eliminacao duas vezes, primeiro do acumulado e depois do movimento, com o periodo completo.
//Se faz necessario o processamento desta forma pois, se for informado uma data inicial e final que englobe
//varios periodos, nao sera possivel saber qual e aberto e qual e fechado pois os periodos nao sao continuos.
For nX := 1 To 2
   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se eh Acumulado e a Eliminacao NAO eh de Acumulado	  ³
	³Verifica se NAO eh Acumulado e a Eliminacao NAO eh do Mes Aberto ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	
	If nX == 1
		lImpAcum := .T.
	Else
		lImpAcum := .F.
	EndIf

	If lImpAcum .and. ( !lSPG )
	   Loop
	ElseIf ( !lImpAcum ) .and. ( !lSP8 )
	   Loop
	Endif   
    
    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Retorna Turno/Sequencia das Marca‡”es Acumuladas			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( lImpAcum ) 
	    cAlias:= "SPG"
		IF SPF->( dbSeek( SRA->( RA_FILIAL + RA_MAT ) + Dtos( dPerIni) ) ) .and. !Empty(SPF->PF_SEQUEPA)
			cTurno	:= SPF->PF_TURNOPA
			cSeq	:= SPF->PF_SEQUEPA
		Else
    		/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Tenta Achar a Sequencia Inicial utilizando RetSeq()³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !RetSeq(cSeq,@cTurno,dPerIni,dPerFim,dDataBase,aTabPadrao,@cSeq) .or. Empty( cSeq )
    			/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Tenta Achar a Sequencia Inicial utilizando fQualSeq()		  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				cSeq := fQualSeq( NIL , aTabPadrao , dPerIni , @cTurno )
			EndIF
		EndIF
	Else
	    cAlias:= "SP8"
   			/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Considera a Sequencia e Turno do Cadastro            		  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cTurno	:= SRA->RA_TNOTRAB
		cSeq	:= SRA->RA_SEQTURN
	EndIF

    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega Arrays com as Marca‡”es do Periodo (aMarcacoes), com³
	³o Calendario de Marca‡”es do Periodo (aTabCalend) e com    as³	
	³Trocas de Turno do Funcionario (aTurnos)					  ³	
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	( aMarcacoes := {} , aTabCalend := {} , aTurnos := {} )   
    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Importante: 												  ³
	³ O periodo fornecido abaixo para recuperar as marcacoes   cor³
	³ respondente ao periodo de apontamentoo Calendario de 	 Marca³	
	³ ‡”es do Periodo ( aTabCalend ) e com  as Trocas de Turno  do³	
	³ Funcionario ( aTurnos ) integral afim de criar o  calendario³	
	³ com as ordens correspondentes as gravadas nas marcacoes	  ³	
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !GetMarcacoes(	@aMarcacoes					,;	//Marcacoes dos Funcionarios
						@aTabCalend					,;	//Calendario de Marcacoes
						@aTabPadrao					,;	//Tabela Padrao
						@aTurnos					,;	//Turnos de Trabalho
						dPerIni 			   		,;	//Periodo Inicial
						dPerFim						,;	//Periodo Final
						SRA->RA_FILIAL				,;	//Filial
						SRA->RA_MAT					,;	//Matricula
						cTurno						,;	//Turno
						cSeq						,;	//Sequencia de Turno
						SRA->RA_CC					,;	//Centro de Custo
						IF(lImpAcum,"SPG","SP8")	,;	//Alias para Carga das Marcacoes
						.T.							,;	//Se carrega Recno em aMarcacoes
						NIL							,;	//Se considera Apenas Ordenadas
					    .T.    						,;	//Se Verifica as Folgas Automaticas
					  	.F.    			 			,;	//Se Grava Evento de Folga Automatica Periodo Anterior 
				  	  	NIL							,;
					 	NIL							,;
					 	NIL							,;
					  	.F.							,;
					  	NIL							,;
					  	.T.							,;  //Se considera data de apontamento
					  	.T.							;	//Se considera data inicial						  	
				 )
		Loop
	EndIF					 

	nDias := ( dPerFim - dPerIni )
	For nDia := 0 To nDias
		//-- Reinicializa Variaveis.
		dData  := dPerIni + nDia		
		//-- o Array aTabcalend ‚ setado para a 1a Entrada do dia em quest„o.
		IF ( nTab := aScan(aTabCalend, {|x| x[1] == dData .And. x[4] == '1E' }) ) == 0.00
			Loop
		EndIF
        
		//-- o Array aMarcacoes ‚ setado para a 1a Marca‡„o do dia em quest„o.
//		cOrdem  	:= aTabCalend[nTab, CALEND_POS_ORDEM]
		dDataApo  	:= aTabCalend[nTab, CALEND_POS_DATA_APO]
//		If ( ( nPosMarc 	:= aScan( aMarcacoes, { |x| x[ AMARC_ORDEM  ] == cOrdem } ) ) > 0 )
		If ( ( nPosMarc 	:= aScan( aMarcacoes, { |x| x[ AMARC_DATAAPO  ] == dDataApo } ) ) > 0 )
			For nMarc:= nPosMarc To Len(aMarcacoes)
//			    If aMarcacoes[nMarc, AMARC_ORDEM ] ==  cOrdem
			    If aMarcacoes[nMarc, AMARC_DATAAPO ] ==  dDataApo 
			    	If nLimpa == 1 .or.  aMarcacoes[nMarc, AMARC_FLAG ] == cTipo
				        (cAlias)->(dbGoto( aMarcacoes[nMarc, AMARC_RECNO ] ) )
						RecLock( cAlias , .F. ) 
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
						( cAlias )->( MsUnLock() ) 
					Endif
			    Else
			       Exit
			    Endif   
			Next nMarc
		Endif
    Next nDia
Next nX
Return	