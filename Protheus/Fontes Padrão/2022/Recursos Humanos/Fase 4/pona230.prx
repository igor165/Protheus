#INCLUDE "PONA1230.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"

Static lPnaCel := ExistBlock( "PNA230CEL" )
Static lPnaGrv := ExistBlock( "PNA230GRV" )
    
/*                                               
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ PONA230  ³ Autor ³ Marinaldo de Jesus    ³ Data ³11/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³ Manutencao de Marca‡”es Diarias por Centro de Custo        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ Generico                                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Marinaldo   ³28/01/02³Melhor³Inclusao das Variaveis bSet15 e bSet24  pa³
³            ³        ³      ³ra o Controle das Teclas de Atalho  Ctrl-O³
³            ³        ³      ³e Ctrl-X									³
³Marinaldo   ³29/01/02³Melhor³Ao consultar o Calendario fazer com que  o³
³            ³        ³      ³foco seja dado na Data/Ordem  Corresponden³
³            ³        ³      ³te a Consulta								³
³Marinaldo   ³29/01/02³Melhor³Utilizacao de SetaPilha() antes e   depois³
³            ³        ³      ³de Montar o Dialog Box para   padronizacao³
³            ³        ³      ³de Codigo								    ³
³Marinaldo   ³30/01/02³Melhor³Inclusao de Freeze na Visualizacao do   Ca³
³            ³        ³      ³lendario 								    ³
³Marinaldo   ³30/01/02³Acerto³Verificacao do Retorno de Todas as  Teclas³
³            ³        ³      ³de Atalho quando vai de um Dialogo para ou³
³            ³        ³      ³tro salvando e restaurando os estados   de³
³            ³        ³      ³SetKey()								    ³
³Marinaldo   ³30/01/02³Melhor³Redefinicao dos Parametros de fMostraApo()³
³Marinaldo   ³04/02/02³Melhor³Utilizacao de GetMarcacoes() para Retornar³
³            ³        ³      ³as Marcacoes do Funcionario.              ³
³            ³        ³      ³Utilizacao de PutMarcAuto() para a Geracao³
³            ³        ³      ³de Marcacoes Automaticas  compatibilizando³
³            ³        ³      ³o Programa com a Rotina de Leitura e  Apon³
³            ³        ³      ³tamento de Marcacoes						³
³Marinaldo   ³05/02/02³Melhor³Inclusao do Parametro MV_MCAUTMM que servi³
³            ³        ³      ³ra para Definir se nas Manutencoes de  Mar³
³            ³        ³      ³cacoes ou Manutencao de Marcacoes por  Cen³
³            ³        ³      ³tro de Custo deverao ser geradas Marcacoes³
³            ³        ³      ³Automaticas								³
³Marinaldo   ³19/02/02³Melhor³Substituicao da Funcao TamSX3() por  Len()³
³            ³        ³      ³para obter o Tamanho de Campo caracter   e³
³            ³        ³      ³Permitir Marcacoes Duplicadas de    acordo³
³            ³        ³      ³com o Parametro MV_MCIGUAL				³
³Marinaldo   ³20/02/02³Melhor³Inclusao do arquivo de Cabecalho "PONCALEN³
³            ³        ³      ³.CH" que sera utilizado para definir a  es³
³            ³        ³      ³trutura do calendario de marcacoes		³
³Marinaldo   ³19/03/02³Acerto³Substituicao da Variaval bConInc pela vari³
³            ³        ³      ³bGerMarAll								³
³Marinaldo   ³19/03/02³Acerto³Acerto em Pn230GeraMarc() para aumentar  o³
³            ³        ³      ³numero de Linhas da GetDados de acordo com³
³            ³        ³      ³o numero de Marcacoes que o funcionario po³
³            ³        ³      ³dera ter na data							³
³Marinaldo   ³28/03/02³Acerto³Nao permitir que os minutos aleatorios  se³
³            ³        ³      ³jam definidos como Negativos     		    ³
³Marinaldo   ³03/04/02³Melhor³Salvar e Restauras as Teclas de Atalho  em³
³            ³        ³      ³GetLegendCalend()							³
³Marinaldo   ³03/04/02³Melhor³Limitar a Data de Geracao de Marcacoes  Au³
³            ³        ³      ³tomaticas, para funcionarios demitidos,  a³
³            ³        ³      ³data Base do Sistema quando esta for menor³
³            ³        ³      ³que a Data de Demissao 					³
³Marinaldo   ³10/04/02³Melhor³Possibilitar a visualizacao dos  Apontamen³
³            ³        ³      ³tos tambem na Opcao de Visualizacao de Acu³
³            ³        ³      ³mulados									³
³Marinaldo   ³06/05/02³Acerto³Qdo. MV_MCAUTMM estava com "S" ocorria  ge³
³            ³        ³      ³racao de Marcacoes para Dia em que   havia³
³            ³        ³      ³sido Apontado Falta sistema Apos o  Aponta³
³            ³        ³      ³mento mantinha as Faltas idevidamente		³
³Marinaldo   ³17/05/02³Acerto³Acerto nas Variaveis de Filtro de Browse  ³
³Marinaldo   ³03/06/02³Melhor³Dimensionamento Automatico do Dialogo    e³
³            ³--------³------³da GetDados								³
³Marinaldo   ³08/06/02³Melhor³Alterada GetCalendListBox() para   Mostrar³
³            ³--------³------³Help Quando Admissao do Funcionario for su³
³            ³--------³------³prior ao Periodo de Apontamento em aberto ³ 
³MauricioMR  ³23/07/02³Melhor³A)Alteradas as Funcoes de Linhaok e TudoOk³
³            ³--------³------³das marcacoes para uso com Pona280. Moveu-³
³            ³--------³------³se as constantes para exibicao do calenda-³  
³            ³--------³------³rio para o PonCalen.ch.                   ³
³            ³--------³------³B)Alterada a Pn230GeraMarc para receber   ³
³            ³--------³------³parametro lDlgRefresh a fim de repintar os³   
³            ³--------³------³objetos visuais de solicitado.            ³   
³Marinaldo   ³12/08/02³Melhor³Quando acumulado permitir a selecao do  pe³
³            ³        ³      ³riodo para Consulta/Alteracao/Exclusao  in³
³            ³        ³      ³dependente da Data Base					³
³Marinaldo   ³29/08/02³Melhor³Redefinicao da Funcao RetFalListBox()   de³
³            ³        ³      ³forma a considerar um intervalo de valores³
³            ³        ³      ³para a obtencao do fator de  Multiplicacao³
³            ³        ³      ³das Dimensoes do objeto ListBox           ³
³Marinaldo   ³27/05/03³Melhor³Passagem de novo parametro para a   funcao³
³            ³        ³      ³GetCalendListBox. Esse novo parametro  ira³
³            ³        ³      ³identificar se o calendario utilizado  nas³
³            ³        ³      ³consultas sera montado por funcionario  ou³
³            ³        ³      ³nao ( generico para um determinado turno )³ 
³MauricioMR  ³10/07/03³Acerto³ Se nao existir lancamento no dia, adi-   ³
³            ³        ³      ³ ciona faixas no array principal.         ³
|Marinaldo   ³21/04/04³Melhor³Tratamento nos Lock dos Registros e Delete|
³Luiz Gustavo|09/01/07³------³ Inclusao da funcao MenuDef() para        ³  
³      	     ³--------³------³ versao 9.12                              ³ 
³Pedro Eloy  ³16/01/07³109651³Ajuste para o tratamento do WalkThru      ³ 
³Mauricio MR ³30/03/07³Melhor³Ajuste na implementacao do Menu Funcional.³
³Leandro DR  ³31/10/07³Melhor³Inclusao dos campos processo, posto, perio|
³            ³        ³      ³do, num. pagto e roteiro. Separacao do pro³
³            ³        |      ³cessamento da montagem de tela, processos ³
³            ³        |      ³agrupado na funcao pn230montagetdados()   ³
³Leandro DR  ³15/02/08³Melhor³Alteracao para que ordenacao seja feita   |
³            ³        ³      ³pelo campo DATAAPO e nao ORDEM.			³
³Erika K.    ³02/06/08³------³Alteracao de CH para integracao de diciona|
³            ³        ³      ³rios Mexico e R 1.2.                      ³
³Leandro DR  ³29/06/09³Melhor³Ajuste na funcao ListBoxCalend para que   |
³            ³        ³      ³a tela seja exibida corretamente de acordo|
³            ³        ³      ³com o CALENBMP.CH.                        |
³			 ³--------³------³ 11.5                      				³
³Emerson Camp³30/12/10³29591/³Ajuste para nova interface 11. Com a      ³
³			 ³--------³--2010³aplicação do parametro MV_ECMFTPP que     ³
³            ³--------³------³afirma ser a versão 11.5 do Protheus      ³
³Glaucia C.  ³16/06/11³014420³Readequacao das telas para diversas       ³ 
³Messina     ³        ³2011  ³resolucoes. SDRCGE                        ³
³Leandro Dr. ³18/11/11³TDYLS6³Inclusao das funcoes P8DataApoInit e      ³ 
³            ³        ³      ³PGDataApoInit que estavam no PONA040 para ³
³            ³        ³      ³compatibilizar com a fase normal.         ³ 
³A.Shibao    ³23/12/13³THWPKA³Funcao fValHrs100 para validar existencias³
³			 ³		  ³      ³dos eventos(SP9) e parametros MV_POHEFIN  ³
³            ³        ³      ³MV_POHE50 , MV_POHE100, MV_POHEFNO no calc³
³            ³        ³      ³das Hrs Extras no Sabado apos as 13 - Arg ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Function PONA230() 
Private aRotina	:= MenuDef()
NewPONA230("PONA230")
Return(Nil)      

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ NewPona230()	³Autor³                   ³ Data ³30/03/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³ Programa principal separado para tratamento da funcao      ³
³          ³ MenuDef().                                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230, PONA240                                            ³       
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Function NewPONA230(cChamada)
Local aArea			:= GetArea()
Local aAreaSP8		:= {}
Local aAreaSPG		:= {}
Local aIndex		:= {}
Local cFiltra		:= "" 

Private aTabPadrao  := {}
Private aDatas		:= {}
Private bFiltraBrw	:= { || NIL }
Private cProg		:= IF( cChamada == NIL , FunName() , cChamada )
Private cCond		:= ''
Private cCadastro   := ""
Private cApoCla     := ""
Private dPerIni     := Ctod("//")
Private dPerFim     := Ctod("//")
Private dDataIni	:= CtoD("//")
Private dDataFim	:= CtoD("//")
Private lPona240	:= fContemStr( cProg , "PONA240" , .T. )
Private lPeriodo    := .T.
Private nColPro     := 0
Private oPeriodo  	:= RHPERIODO():New()
Private oCalendError

IF !( lPona240 )

		aAreaSP8 := SP8->( GetArea() )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Declara Variaveis que Serao Utilizadas no Apontamento       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cCadastro   := OemToAnsi( STR0001 ) //"Manuten‡„o das Marca‡”es Por Centro de Custo"
		cApoCla     := SuperGetMV( "MV_APOCLA" , NIL , "S" , cFilAnt )
		cCond		:= '1'  //Pesquisa de Periodos Abertos na GPRCHFiltro

Else

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Declara Variaveis que Serao Utilizadas no Acumulado         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aAreaSPG	:= SPG->( GetArea() )	
		cCadastro   := OemToAnsi( STR0057  ) //"Manuten‡„o Acumulado de Marca‡”es Por Centro de Custo"
		cCond		:= '2'  //Pesquisa de Periodos Fechados na GPRCHFiltro

EndIF	       		

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Valida criacao dos parametros e eventos para Argentina RHUPDMOD - 35³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If cPaisLoc == "ARG" .And. FindFunction( "fValHrs100" ) .And. !fValHrs100()
	Return( NIL )
EndIf


/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se o Modo de Acesso do SPB e SRA foram iguais e se este  ulti³
³mo nao estiver vazio e Se o Periodo Estiver em Aberto.                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( ValidArqPon() .and. ChkVazio("SRA") )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cFiltra		:= ChkRh( cProg , "SRA" , "1" )
	bFiltraBrw 	:= { || FilBrowse( "SRA" , @aIndex , @cFiltra ) }
	Eval( bFiltraBrw )
	
	If lPona240
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se deve imprimir por Periodo ou Por Datas           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If fSetPerData(@nColPro, STR0057,;      //"Manuten‡„o Acumulado de Marca‡”es Por Centro de Custo"
							     NIL	,;
					   		     NIL    ,;
					   		     NIL 	 ;
					  ) == 0 
			Return
		EndIf
		If !( nColPro == 1 )
			lPeriodo := .F.
			aDatas := {oPeriodo:dDataIni,oPeriodo:dDataFim}
		EndIf
	EndIf	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Chamada a mBrowse														 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	mBrowse( 6, 1,22,75,"SRA",,,,,,fCriaCor() )

    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	EndFilBrw( "SRA" , aIndex )

	IF !lPona240
		RestArea( aAreaSP8 )
	Else
		RestArea( aAreaSPG )
	EndIF	

EndIF

RestArea( aArea )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Pn230Atu  ³ Autor ³Marinaldo de Jesus     ³ Data ³11/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Atu(ExpC1,ExpN1,ExpN2)                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ ExpC1 = Alias do arquivo                                   ³
³          ³ ExpN1 = Numero do registro                                 ³
³          ³ ExpN2 = Numero da opcao selecionada                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ Pona130                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230Atu(cAlias,nReg,nOpcX)

Local aAreaSRA			:= SRA->( GetArea() )
Local aRecno			:= {}
Local aNotFields		:= {"P8_FILIAL","P8_MAT","PG_FILIAL","PG_MAT"}
Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjSize			:= {}
Local aObjCoords		:= {}

Local aAdv1Size			:= {}
Local aInfo1AdvSize		:= {}
Local aObj1Size			:= {}
Local aObj1Coords		:= {}

Local aAdv2Size			:= {}
Local aInfo2AdvSize		:= {}
Local aObj2Size			:= {}
Local aObj2Coords		:= {}

Local aAdv3Size			:= {}
Local aInfo3AdvSize		:= {}
Local aObj3Size			:= {}
Local aObj3Coords		:= {}

Local aAdv4Size			:= {}
Local aInfo4AdvSize		:= {}
Local aObj4Size			:= {}
Local aObj4Coords		:= {}    

Local aAdv5Size			:= {}
Local aInfo5AdvSize		:= {}
Local aObj5Size			:= {}
Local aObj5Coords		:= {}

Local aGdCoord			:= {}
Local aGdCoords			:= {}
Local aGpLboxCoords		:= {}
Local aGpGdCoords		:= {}
Local aKeys				:= GetKeys()
Local aPesqIdx 			:= {}
Local aPesqOrd			:= {}
Local bSet15			:= { ||nopcA:=1,IF(oGet:TudoOk(),(Pn230GetaCols(@aCols,@aArrayMain,aNotFields,,,nOpcX,.T.),oDlg:End()),(nOpcA:=0,.T.))}
Local bSet24			:= { ||oDlg:End() }
Local bSvSet15			:= { || NIL }
Local bSvSet24			:= { || NIL }
Local bNIL				:= { || NIL }
Local bFreeLocks	    := {|| FreeLocks(IF( lPona240 , "SPG" , "SP8" ) , NIL , .T. ), .T.}
Local cMat				:= SRA->RA_MAT
Local cNome				:= SRA->RA_NOME
Local cPesqCampo		:= space(40)
Local cPesqOrd
Local lValPer		    := .T.
Local lAxPesqui			:=.F.
Local lSeeAll			:= .T.
Local nX				:= 0
Local nLenX				:= 0
Local nCnt		  		:= 0
Local nOpcA				:= 0
Local nPosFlag			:= 0
Local nPosApon			:= 0
Local nFatLstBox		:= 0
Local _lGrava			:= .T.
Local oDlg
Local oGet
Local oFont
Local oLinhas
Local oGroup
Local oPesqCbx
Local oPesqGet
Local oPer
Local oDtIni
Local oDtFim
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Blocos de Codigo                                            ³
//³================                                            ³
//³Serao utilizados na acao do botoes de movimentacao, "Avanca"³
//³"Retrocede", "Avanca Todos" e "Retrocede Todos".            ³
//³O Bloco "bFica" sera utilizado quando forem alterados os    ³
//³campos data de referencia, semana e tipo de lancamento.     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local bRetrocOne := {|| Pn230VerGrava(nOpcX,@oGet,@aRecno,@oDlg), nRegAnt:=SRA->(Recno()), SRA->(dbskip(-1)),   Pn230MntGd(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.T.), oGet:oBrowse:Refresh(),oDLG:Refresh()}
Local bRetrocAll := {|| Pn230VerGrava(nOpcX,@oGet,@aRecno,@oDlg), nRegAnt:=SRA->(Recno()), SRA->( dbGoTop()),   Pn230MntGd(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.T.), oGet:oBrowse:Refresh(),oDLG:Refresh()}
Local bAvancaOne := {|| Pn230VerGrava(nOpcX,@oGet,@aRecno,@oDlg), nRegAnt:=SRA->(Recno()), SRA->(dbskip()),     If( SRA->(! EOF()),aCols:= {},.T.), Pn230MntGd(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.T.), oGet:oBrowse:Refresh(),oDLG:Refresh()}
Local bAvancaAll := {|| Pn230VerGrava(nOpcX,@oGet,@aRecno,@oDlg), nRegAnt:=SRA->(Recno()), SRA->(dbGoBottom()), Pn230MntGd(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.T.), oGet:oBrowse:Refresh(),oDLG:Refresh()}
Local bFica      := {||                                           				    					 Pn230MntGd(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.T.),If(lDaRefresh,(oGet:oBrowse:Refresh(),oDLG:Refresh()),.t.)}

Local bAguarde   := {|| Eval( bChangePer ) }			
Local bChangePer := {|| If(		(lDaRefresh := PonChangePer()),;
								MsAguarde( { || ;
								(Pn230VerGrava(nOpcX, @oGet, @aRecno, @oDlg, .F.),nRegAnt:=SRA->(Recno()),;
				 				 Pn230MntGd(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.F.),;
								 oLBox:nFreeze := 2,;
								 oLBox:SetArray(aListBox),;
								 oLBox:bLine:={ || LineLstBox( oLBox ) },;
								 oLBox:Refresh())} ),;
								.T.;
							),;
					}					

Private aArrayMain			:= {}
Private aArrayAnt			:= {}
Private aArrayClone			:= {}
Private aLastApo			:= {}
Private aElem				:= {}
Private aListBox			:= {}
Private aVirtual			:= {}
Private aVisual				:= {}
Private aHeader				:= Array( 0 )
Private aCols				:= {}
Private aTabCalend  		:= {}
Private aMarcacoes			:= {}
Private aResult				:= {}
Private aRecsMarcAutDele	:= {}
Private aGdAlter			:= {}
Private cPerAponta			:= ""
Private cProcesso			:= SRA->RA_PROCES
Private cPosto 				:= SRA->RA_POSTO
Private cPeriodo
Private cNumPagto			:= ""
Private cAntNumPagto		:= Nil
Private cAntPeriodo			:= Nil
Private cAntRoteiro			:= Nil
Private cAntProcesso		:= Nil
Private cRot				:= ""
Private cPrefix				:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Private cDatas
Private Continua			:= .F.
Private lGeraAuto			:= .F.
Private lP8PGIniCa			:= .T.
Private lAPOLock			:= .F.
Private lDaRefresh 			:= .F.
Private nUsado				:= 0
Private nRegAnt				:= 0
Private nSvUsado			:= 0
Private nSvnAt				:= 1 
Private olBox				:= NIL
Private aLboxCoords		:= {}
Private bChange			:= { || NIL }
DEFAULT lPnaCel	:= ExistBlock( "PNA230CEL" )
DEFAULT lPnaGrv	:= ExistBlock( "PNA230GRV" )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd( aObjCoords , { 000 , 025 , .T. , .F. } ) //1-Linha -Dados Funcionario
	aAdd( aObjCoords , { 000 , 030 , .T. , .F. } )	//2-Periodo 
	aAdd( aObjCoords , { 000 , 005 , .T. , .F. } )	//3-Cabec-Calendario-Marcacoes
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )	//4-Calendario-Marcacao
	aAdd( aObjCoords , { 000 , 027 , .T. , .F. } )	//5-Rodape
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
	
	//Divisao da 1. linha em 5 colunas
	aAdv1Size		:= aClone(aObjSize[1])
	aInfo1AdvSize	:= { aAdv1Size[2] , aAdv1Size[1] , aAdv1Size[4] , aAdv1Size[3] , 1.25 , 1.25 }
	aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } ) 	//1-Mat
	aAdd( aObj1Coords , { 000 , 000 , .T. , .T. } )	//2-Nome
	aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } )	//3-Adm
	aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } )	//4-Proc
	aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } )	//5- Posto 
	aObj1Size		:= MsObjSize( aInfo1AdvSize , aObj1Coords,,.T. )
	
	//Divisao da 2. linha em 4 colunas
	aAdv2Size		:= aClone(aObjSize[2])
	aInfo2AdvSize	:= { aAdv2Size[2] , aAdv2Size[1] , aAdv2Size[4] , aAdv2Size[3] , 1.25 , 1.25 }
	aAdd( aObj2Coords , { 000 , 000 , .T. , .T. } ) 	//1-Per
	aAdd( aObj2Coords , { 000 , 000 , .T. , .T. } )	//2-Pagto
	aAdd( aObj2Coords , { 000 , 000 , .T. , .T. } )	//3-Procedim
	aAdd( aObj2Coords , { 000 , 000 , .T. , .T. } )	//4-Periodos
	aObj2Size		:= MsObjSize( aInfo2AdvSize , aObj2Coords,,.T. )
	
	//Divisao da 3. linha em 2 colunas
	aAdv3Size		:= aClone(aObjSize[3])
	aInfo3AdvSize	:= { aAdv3Size[2] , aAdv3Size[1] , aAdv3Size[4] , aAdv3Size[3] , 1.25 , 1.25 }
	aAdd( aObj3Coords , { 000 , 000 , .T. , .T. } ) 	//1-Cabec Calendario
	aAdd( aObj3Coords , { 003 , 000 , .F. , .T. } )	//2-Espaco central
	aAdd( aObj3Coords , { 000 , 000 , .T. , .T. } )	//3-Cabec Marcacao
	aObj3Size		:= MsObjSize( aInfo3AdvSize , aObj3Coords,,.T. )	

	//Divisao da 4. linha em 2 colunas
	aAdv4Size		:= aClone(aObjSize[4])
	aInfo4AdvSize	:= { aAdv4Size[2] , aAdv4Size[1] , aAdv4Size[4] , aAdv4Size[3] , 1.25 , 1.25}
	aAdd( aObj4Coords , { 000 , 000 , .T. , .T. , .T.} ) 	//1-Calendario
	aAdd( aObj4Coords , { 003 , 000 , .F. , .T. } )		//2-Espaco central
	aAdd( aObj4Coords , { 000 , 000 , .T. , .T. } )		//3-Marcacao
	
	aObj4Size		:= MsObjSize( aInfo4AdvSize , aObj4Coords,,.T. )	
	
	
	//Divisao da 5. linha em 6 colunas
	aAdv5Size		:= aClone(aObjSize[5])
	aInfo5AdvSize	:= { aAdv5Size[2] , aAdv5Size[1] , aAdv5Size[4] , aAdv5Size[3] , 10 , 10}
	aAdd( aObj5Coords , { 000 , 000 , .T. , .T. } )
	aAdd( aObj5Coords , { 090 , 000 , .F. , .T. } )
	aAdd( aObj5Coords , { 090 , 000 , .F. , .T. } )
	aAdd( aObj5Coords , { 090 , 000 , .F. , .T. } )
	aAdd( aObj5Coords , { 025 , 000 , .F. , .T. } )
	aAdd( aObj5Coords , { 000 , 000 , .T. , .T. } )	
	aObj5Size		:= MsObjSize( aInfo5AdvSize , aObj5Coords,,.T. )	
		


/*	aGpLboxCoords	:= { aObjSize[3,1] + 5,aObjSize[3,2],aObjSize[3,4]/3,aObjSize[3,3]}
	aGpGdCoords		:= { aObjSize[3,1] + 5,aObjSize[3,4]/3+1,aObjSize[3,3],aObjSize[3,4]}
	nFatLstBox		:= RetFatListBox( aGpLboxCoords[4] * 0.5)
	aLboxCoords		:= { aGpLboxCoords[1]+7,aGpLboxCoords[2],aGpLboxCoords[3],((aGpLboxCoords[4] - 26.5)/100*nFatLstBox)-10}

	aGdCoords		:= { aGpGdCoords[1]+7,aGpGdCoords[2],aGpGdCoords[3],aGpGdCoords[4]}
	aGdCoord		:= { (aObjSize[3,1]-25), (aObjSize[3,2]+5), (((aObjSize[3,3])/100)*70), (((aObjSize[3,4])/100)*98) }	//1,3 Vertical /1,4 Horizontal
*/	

Begin Sequence

  
	If !pn230MontaGetDados(@aRecno,aNotFields,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.T.)
		Return(.F.)
	Else
		cAntProcesso := cProcesso
		cAntPeriodo  := cPeriodo
		cAntNumPagto := cNumPagto
		cAntRoteiro  := cRot		
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Mostra Tela de Apontamentos por Centro de Custo             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
    DEFINE MSDIALOG oDlg TITLE cCadastro From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL
	
		@ aObj1Size[1,1],aObj1Size[1,2]	GROUP oGroup TO aObj1Size[1,3],aObj1Size[1,4]	LABEL OemToAnsi(STR0010) OF oDlg PIXEL	// "Matricula:"
		oGroup:oFont:= oFont
		
		@ aObj1Size[2,1],aObj1Size[2,2] 	GROUP oGroup TO aObj1Size[2,3],aObj1Size[2,4]	LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "Nome:"
		oGroup:oFont:= oFont
		
		@ aObj1Size[3,1],aObj1Size[3,2] 	GROUP oGroup TO aObj1Size[3,3],aObj1Size[3,4]	LABEL OemToAnsi(STR0060) OF oDlg PIXEL	// "Admiss„o:"
		oGroup:oFont:= oFont
		
		@ aObj1Size[4,1],aObj1Size[4,2]	GROUP oGroup TO aObj1Size[4,3],aObj1Size[4,4]	LABEL OemToAnsi(STR0174) OF oDlg PIXEL 	// "Processo:"
		oGroup:oFont:= oFont
		
		@ aObj1Size[5,1],aObj1Size[5,2] 	GROUP oGroup TO aObj1Size[5,3],aObj1Size[5,4]	LABEL OemToAnsi(STR0175) OF oDlg PIXEL 	// "Posto:"
		oGroup:oFont:= oFont
		
		@ aObj1Size[1,1]+10,aObj1Size[1,2]+5	SAY StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT))	SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObj1Size[2,1]+10,aObj1Size[2,2]+5	SAY OemToAnsi(SRA->RA_NOME) 					SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ aObj1Size[3,1]+10,aObj1Size[3,2]+5	SAY Dtoc(fDtaAdmis()) 							SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObj1Size[4,1]+10,aObj1Size[4,2]+5	SAY OemToAnsi(SRA->RA_PROCES) 					SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObj1Size[5,1]+10,aObj1Size[5,2]+5	SAY OemToAnsi(SRA->RA_POSTO)					SIZE 050,10 OF oDlg PIXEL FONT oFont		


	 If lPeriodo
		 /*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	       ³ Codigo do Periodo, Numero de Pagamento, Roteiro, Data Inicio e Data Fim do periodo ³
		   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			@ aObj2Size[1,1],aObj2Size[1,2]	GROUP oGroup TO aObj2Size[1,3],aObj2Size[1,4]  	LABEL OemToAnsi(STR0176) OF oDlg PIXEL	// Codigo do Periodo
			oGroup:oFont:= oFont 
			
			@ aObj2Size[2,1],aObj2Size[2,2]	GROUP oGroup TO aObj2Size[2,3],aObj2Size[2,4] 	LABEL OemToAnsi(STR0177) OF oDlg PIXEL	// Numero de Pagamento
			oGroup:oFont:= oFont
			
			@ aObj2Size[3,1],aObj2Size[3,2]	GROUP oGroup TO aObj2Size[3,3],aObj2Size[3,4] 	LABEL OemToAnsi(STR0178) OF oDlg PIXEL // Roteiro
			oGroup:oFont:= oFont
			
			@ aObj2Size[4,1],aObj2Size[4,2]	GROUP oGroup TO aObj2Size[4,3],aObj2Size[4,4]	LABEL OemToAnsi(STR0078) OF oDlg PIXEL	// Periodos
			oGroup:oFont:= oFont
			
	
			@ aObj2Size[1,1]+10,aObj2Size[1,2]+5 ;
				MSGET 	oPer Var cPeriodo ;
				PICTURE GetSx3Cache( "RCH_PER" , "X3_PICTURE" ) F3 "RCH" ;
				WHEN lPona240 ;
		  	 	VALID  	ExistCpo( "RCH", cProcesso + cPeriodo, 2) .AND. ;
		  		Eval(bAguarde);
		    	SIZE 	050,10 OF oDlg PIXEL HASBUTTON
		   
			@ aObj2Size[2,1]+10,aObj2Size[2,2]+5;
				MSGET 	oNrPagto Var cNumPagto ;
				PICTURE GetSx3Cache( "RCH_NUMPAG" , "X3_PICTURE" ) F3 "RCH01" ;
				WHEN lPona240;
		  	 	VALID  	ExistCpo( "RCH", cProcesso + cPeriodo + cNumPagto, 3) .AND.;
		  		Eval(bAguarde);
		      	SIZE 	050,10 OF oDlg PIXEL HASBUTTON
			
			@ aObj2Size[3,1]+12,aObj2Size[3,2]+5 SAY	oRoteiro Var cRot SIZE	060,10 OF oDlg PIXEL FONT oFont
	
			@ aObj2Size[4,1]+12,aObj2Size[4,2]+5 SAY	oDatas Var cDatas SIZE	060,10 OF oDlg PIXEL FONT oFont
	Else
			@ aObj2Size[1,1],aObj2Size[1,2]	GROUP oGroup TO aObj2Size[2,3],aObj2Size[2,4]	LABEL OemToAnsi(STR0182) OF oDlg PIXEL	// Data Inicial
			oGroup:oFont:= oFont
			@ aObj2Size[3,1],aObj2Size[3,2]	GROUP oGroup TO aObj2Size[4,3],aObj2Size[4,4]	LABEL OemToAnsi(STR0183) OF oDlg PIXEL	// Data Final
			oGroup:oFont:= oFont

			@ aObj2Size[1,1]+10,aObj2Size[1,2]+5 ;
				MSGET 	oDtIni Var dDataIni ;
				VALID ( !Empty( dDataIni ) .AND. ( dDataIni <= dDataFim ) ) .AND.;
		  		Eval(bAguarde);
		    	SIZE 	050,10 OF oDlg PIXEL HASBUTTON
		    	
			@ aObj2Size[3,1]+10,aObj2Size[3,2]+5 ;
				MSGET 	oDtFim Var dDataFim ;
				VALID ( !Empty( dDataFim ) .and. ( dDataIni <= dDataFim ) ) .AND.;
		  		Eval(bAguarde);
		      	SIZE 	050,10 OF oDlg PIXEL HASBUTTON
	EndIF


	
		@ aObj3Size[1,1],aObj3Size[1,2]	SAY OemToAnsi(STR0021)	SIZE 146,10 OF oDlg PIXEL FONT oFont															// "Calend rio"
		@ aObj3Size[3,1],aObj3Size[3,2]	SAY OemToAnsi(STR0022)	SIZE 146,10 OF oDlg PIXEL FONT oFont															// "Marca‡”es"
		
		@ aObj3Size[3,1],(aObj3Size[3,4]-26)	SAY oLinhas VAR StrZero(IF(Type("n")!="U",n,0),4)+"/"+StrZero(Len(aCols),4) SIZE 146,10 OF oDlg PIXEL FONT oFont
		
		bChange := { ||  ( IF(IF(nOpcX==3.or.nOpcX==4,Pn230LinOK(NIL,.T.),.T.),;
																				 Pn230GetaCols(	@aCols		,;
																				 				@aArrayMain	,;
																				 				aNotFields 	,;
																				 				@oDlg		,;
																				 				@oGet		,;
																				 				nOpcX ) 	,;
																			 	 ( oLbox:nAt := nSvnAt		,;
																			 	   oLbox:Refresh() )		 ;
																			  ),;
																		   oLinhas:Refresh();
																		  );
					}																	  	 

		 
		ListBoxCalend( aObj4Size[1] , @oDlg , aListBox , @oLBox , bChange  )
		    
		oGet := MsGetDados():New(aObj4Size[3,1],aObj4Size[3,2],aObj4Size[3,3],aObj4Size[3,4],nOpcX,"Pn230LinOK","Pn230TudOK","",IF(nOpcX==2.Or.nOpcX==5,NIL,.T.),aGdAlter,1)
		oGet:oBrowse:bChange := { || oLinhas:Refresh() } 


	/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	  ³ Define grupo do rodape          ³
	  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		@ aObjSize[5,1] , aObjSize[5,2]+1.25	GROUP oGroup TO aObjSize[5,3], aObjSize[5,4]-1.25	LABEL OemToAnsi(STR0180) OF oDlg PIXEL	 //"Pesquisar Funcionarios"
		oGroup:oFont:= oFont 

	/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	  ³ Lista Botoes de posicionamento do funcionario ³
	  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		@ aObj5Size[2,1], aObj5Size[2,2] 		BUTTON oBtnPgPrev 	PROMPT OemToAnsi("<<")	 SIZE 021.5, 009 DESIGN ACTION Eval(bRetrocAll) OF oDlg PIXEL
		@ aObj5Size[2,1], aObj5Size[2,2]+21.5	BUTTON oBtnPrev		PROMPT OemToAnsi("<")	 SIZE 021.5, 009 DESIGN ACTION Eval(bRetrocOne) OF oDlg PIXEL
		@ aObj5Size[2,1], aObj5Size[2,2]+43	BUTTON oBntNext 	PROMPT OemToAnsi(">")	 SIZE 021.5, 009 DESIGN ACTION Eval(bAvancaOne) OF oDlg PIXEL
		@ aObj5Size[2,1], aObj5Size[2,2]+63.5	BUTTON oBtnPgNext 	PROMPT OemToAnsi(">>")	 SIZE 021.5, 009 DESIGN ACTION Eval(bAvancaALL) OF oDlg PIXEL

    	AxPesqOrd("SRA",@aPesqIdx,,lSeeAll,@aPesqOrd)
    	cPesqOrd := aPesqOrd[1]

		@ aObj5Size[3,1], aObj5Size[3,2]	COMBOBOX oPesqCbx 	VAR cPesqOrd ITEMS aPesqOrd SIZE 100,36 	PIXEL OF oDlg ON CHANGE If(lAxPesqui,(DbSelectArea(cAlias),DbSetOrder(aPesqIdx[oPesqCbx:nAt][1]), MbrSetAllCols(cAlias,aIdxCol,,__oObjBrow),__oObjBrow:Refresh()),)
 		@ aObj5Size[4,1], aObj5Size[4,2]	MSGET    oPesqGet 	VAR cPesqCampo 				SIZE 100,09 	PIXEL OF oDlg 
    	@ aObj5Size[5,1], aObj5Size[5,2]	BUTTON   "Ok" 									SIZE 021.5,009 	PIXEL OF oDlg ACTION (Pn230VerGrava(nOpcX,@oGet,@aRecno,@oDlg),nRegAnt:=SRA->(Recno()),AxPesqSeek("SRA",.F.,cPesqCampo,,aPesqIdx,oPesqCbx:nAt,lSeeAll,),Gp640Movimenta(bFica))
		
		oDlg:bSet15 := { || nOpca := 1 , oDlg:End() }
		bSvSet15 := SetKey( 15 , oDlg:bSet15 )
		oDlg:bSet24 := { || nOpca := 0 , oDlg:End() }
		bSvSet24 := SetKey( 24 , oDlg:bSet24 )				
		
		aButtons := Pn230ChoiBar( @oDlg , @oGet , nOpcX , aNotFields , cProg , .T. )
	ACTIVATE MSDIALOG oDlg ON INIT (  EnchoiceBar(oDlg, bSet15, bSet24, Nil, aButtons), oDlg:Refresh() ) CENTERED

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Exclusao                                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpcX != 5 )
		IF ( ( nOpcA == 1 ) .and. ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Prepara e Aponta as Marcacoes                                 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( !( lPona240 ) .and. ( cApoCla == "S" ) )
				Pn230Aponta()
			EndIF
	        Begin Transaction
	        	/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Seta o Flag de Marcacoes Apontadas                            ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( !( lPona240 ) .and. ( cApoCla == "S" ) )
					PutFlagMarc( @aArrayMain , aMarcacoes )
				EndIF	
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Ponto de Entrada para permite ou não a gravacao			   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF ( lPnaGrv )
					IF ( ValType( lRet := ExecBlock("PNA230GRV",.F.,.F.,{ cAlias, cPrefix, nOpcX } ) ) == "L" )
						_lGrava := lRet
						lRet	:= NIL
					EndIF
				EndIF
				
				If _lGrava 
	            /*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Grava as Marcacoes                                            ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	        	Pn230Grava(aArrayMain,aRecno,aHeader,nOpcX,@oGet,@oDlg)
		       	/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Processa Gatilhos                                             ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		        EvalTrigger()
		        EndIf
			End Transaction
		EndIF
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se for Exclusao                                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ElseIF ( ( nOpcA == 1 ) .and. ( nOpcX == 5 ) )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Ponto de Entrada para permite ou não a gravacao			   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( lPnaGrv )
			IF ( ValType( lRet := ExecBlock("PNA230GRV",.F.,.F.,{ cAlias, cPrefix, nOpcX } ) ) == "L" )
				_lGrava := lRet
				lRet	:= NIL
			EndIF
		EndIF

		If _lGrava 
		   	Pn230Dele(aRecno)
		EndIf
	EndIF

End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Libera Locks						                           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
FreeLocks( IF( lPona240 , "SPH" , "SPC" ) , NIL , .T. ) 
FreeLocks( IF( lPona240 , "SPG" , "SP8" ) , NIL , .T. )
FreeLocks( "SPK" , NIL , .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SetKey( 15	, IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
SetKey( 24	, IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )



/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura os Dados de Entrada								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aAreaSRA )
RestKeys( aKeys ) 

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230aCols	³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Array com a Estrutura do aCols                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230aCols(aArrayMain,aRecno,aNotFields,nOpcX,lVazio,lCount) ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                    	     ³
³          ³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nMarcacoes                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230aCols(aArrayMain,aRecno,aNotFields,nOpcX,lVazio,lCount)

Local aArea			:= GetArea()
Local aMarcacoes	:= {}
Local aCloneMarc	:= {}
Local cAlias		:= IF( lPona240 , "SPG" , "SP8" )
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local dPerIGeA		:= dPerIni
Local dPerFGeA		:= Min( dPerFim , dDataBase )
Local lMarcAuto		:= .F.
Local lMvMcAutMm	:= ( SuperGetMv( "MV_MCAUTMM" , NIL , "N" , cFilAnt ) == "S" )
Local lGetMarcAuto	:= ( SuperGetMv( "MV_GETMAUT" , NIL , "S" , cFilAnt ) == "S" )
Local nX			:= 0
Local nMarcacoes	:= 0
Local nField 		:= 0
Local nFields		:= Len( aHeader )

DEFAULT aArrayMain	:= {}
DEFAULT aRecno		:= {}
DEFAULT aNotFields	:= {}
DEFAULT nOpcX		:= 3 
DEFAULT lVazio		:= .F.
DEFAULT lCount		:= .F.

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Monta aArrayMain que Contem Todas as Marcacoes do Funcionario³
	³mas Possui a Estrutura do aCols							  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( !( lVazio ) .or. ( lCount ) )
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se Deve Carregar as Marcacoes Automaticas.         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !( lGetMarcAuto )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Apenas Quando nao For Exclusao/Visualizacao, Nao Provir   de³
			³ Acumulados e se o parametro MV_MCAUTMM estiver com "S"	  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( ( nOpcX == 5 ) .or. ( lPona240 ) .or. !( lMvMcAutMm ) )
				lGetMarcAuto := .T.
			EndIF
		EndIF
	
		oCalendError:= PONERROR():New() 
		oCalendError:InitLogErrors(LoadCalError()) //Carrega tabela de erros	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega as Marcacoes do Funcionario                         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !GetMarcacoes(	@aMarcacoes			,;	//01 -> Marcacoes dos Funcionarios
							@aTabCalend			,;	//02 -> Calendario de Marcacoes (Podera ser Modificado em fDiasFolga()
							@aTabPadrao			,;	//03 -> Tabela Padrao
							NIL              	,;	//04 -> Turnos de Trabalho
							@dPerIni 			,;	//05 -> Periodo Inicial
							dPerFim				,;	//06 -> Periodo Final
							SRA->RA_FILIAL		,;	//07 -> Filial
							SRA->RA_MAT			,;	//08 -> Matricula
							SRA->RA_TNOTRAB		,;	//09 -> Turno
							SRA->RA_SEQTURN		,;	//10 -> Sequencia de Turno
							SRA->RA_CC			,;	//11 -> Centro de Custo
							cAlias				,;	//12 -> Alias para Carga das Marcacoes
							.T.					,;	//13 -> Se carrega Recno em aMarcacoes
							.T.		 		 	,;	//14 -> Se considera Apenas Ordenadas
							NIL					,;  //15 -> Verifica as Folgas Automaticas
							NIL  				,;  //16 -> Se Grava Evento de Folga Mes Anterior
							lGetMarcAuto	 	,;	//17 -> Se Carrega as Marcacoes Automaticas
							@aRecsMarcAutDele	,;	//18 -> Registros de Marcacoes Automaticas que deverao ser Deletados
					   		NIL					,;  //19 -> Bloco para avaliar as Marcacoes Automaticas que deverao ser Desprezadas
							lPona240			;   //20 -> Se Considera o Periodo de Apontamento das Marcacoes - Se for acumulado, ira considerar, do contrario nao.							
					  	)
			nMarcacoes := -1
			oCalendError:ShowErrors()
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apenas Quando nao For Exclusao e  Nao Provir de Acumulados  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( !( nOpcX == 5 ) .and. !( lPona240 ) .and. ( lMvMcAutMm ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Define o Periodo para a Geracao das Marcacoes Automaticas   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( fDtaAdmis() > dPerIni .and. fDtaAdmis() <= dPerFim )
				dPerIGeA := fDtaAdmis()
			EndIF
			IF SRA->( RA_DEMISSA < dPerFim .and. !Empty( RA_DEMISSA ) )
				dPerFGeA := SRA->RA_DEMISSA
			EndIF
			dPerIGeA	:= Max( dPerIGeA , dPerIni  )
			dPerFGeA	:= Min( dPerFGeA , Min( dDataBase , dPerFim ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Salva Conteudo de aMarcacoes para Verificar Havera  Reaponta³
			³ Mento														  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			aCloneMarc	:= aClone( aMarcacoes )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Gera marca‡oes Autom ticas.                                 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			PutMarcAuto( aTabCalend , @aMarcacoes , dPerIGeA , dPerFGeA , SRA->RA_FILIAL )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Compara aMarcacoes com aConeMarc para ver se Havera Reaponta³
			³ tamento													  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	    	lGeraAuto := !fCompArray( aMarcacoes , aCloneMarc )
		EndIF

/*		For nMarcacoes:= 1 to Len(aMarcacoes)
			aMarcacoes[nMarcacoes][Len(aMarcacoes[nMarcacoes])-1]	:= cAlias
			aMarcacoes[nMarcacoes][Len(aMarcacoes[nMarcacoes])]		:= aMarcacoes[nMarcacoes][AMARC_RECNO]
		Next	*/
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica o Numero de Registros de aMarcacoes	              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nMarcacoes	:= Len( aMarcacoes )
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta o aCols Baseado em aMarcacoes 			              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !lCount
			For nX := 1 To nMarcacoes
				IF !( lMarcAuto := Empty( aMarcacoes[ nX , AMARC_RECNO ] ) )
					( cAlias )->( dbGoto( aMarcacoes[ nX , AMARC_RECNO ] ) )
					aAdd( aRecno , aMarcacoes[ nX , AMARC_RECNO ] )
				EndIF
				nUsado	:= 0
				For nField := 1 To nFields
			    	nUsado++
					IF ( aScan( aVirtual , aHeader[ nField , 02 ] ) > 0 )
						aArrayMain[nX,nUsado] := CriaVar( aHeader[ nField , 02 ], .T. )
				    Else
						IF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DATA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_DATA ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"HORA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_HORA ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ORDEM" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_ORDEM ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FLAG" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_FLAG ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TURNO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_TURNO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FUNCAO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_FUNCAO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"GIRO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_GIRO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CC" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_CC ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DEPTO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_DEPTO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"POSTO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_POSTO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PROCES" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_PROCESSO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PERIODO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_PERIODO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ROTEIR" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_ROTEIRO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"NUMPAG" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_NUM_PAGTO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CODFUNC" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_CODFUNC ]																																																	
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"APONTA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_APONTA ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"RELOGIO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_RELOGIO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TPMARCA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_TIPOMARC ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PAPONTA" , .T. )
							aArrayMain[nX,nUsado] := IF( Empty( aMarcacoes[ nX , AMARC_PERAPONTA ] ) , cPerAponta , aMarcacoes[ nX , AMARC_PERAPONTA ] )
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DATAAPO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_DATAAPO ]
						// Carregando o campo para o WalkThru
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ALI_WT" , .T. )
							aArrayMain[nX,nUsado] := cAlias
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"REC_WT" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_RECNO ]	
						Else
							IF ( lMarcAuto )
								IF ( aHeader[ nField , 08 ] == "C" )
									IF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CC" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"CC"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"POSTO" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"POSTO"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DEPTO" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"DEPTO"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PROCES" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"PROCES"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PERIODO" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"PERIODO"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ROTEIR" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"ROTEIR"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"NUMPAG" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"NUMPAG"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CODFUNC" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"CODFUNC"  )																																																												
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FLAG" , .T. )
										aArrayMain[nX,nUsado] := "I"
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ORDEM" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"ORDEM"  )
					                ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TURNO" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"TURNO"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DATAAPO" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"DATAAPO"  )										
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PAPONTA" , .T. )
										aArrayMain[nX,nUsado] := cPerAponta
									Else
										aArrayMain[nX,nUsado] := Space( aHeader[ nField , 04 ] )
									EndIF
								ElseIF ( aHeader[ nField , 08 ] == "N" )
										aArrayMain[nX,nUsado] := 0
								ElseIF ( aHeader[ nField , 08 ] == "D" )
									aArrayMain[nX,nUsado] := Ctod("//")
								Else
									aArrayMain[nX,nUsado] := .F.
								EndIF
							Else
								aArrayMain[nX,nUsado] := (cAlias)->&( aHeader[ nField , 02 ] )
							EndIF	
						EndIF
					EndIF
				Next nField
				IF nOpcX != 2 .and. nOpcX != 5 //Visualizacao ou Exclusao
					aArrayMain[nX,nUsado+1] := .F.
				EndIF
			Next nX
		EndIF
	EndIF
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Array do 1§ Elemento Vazio. 	   					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !( lCount )
		IF ( ( nMarcacoes == 0 ) .or. ( lVazio ) )
			nMarcacoes := 1 
			aArrayMain := Array( nMarcacoes , nSvUsado )
			nUsado	:= 0
			For nField := 1 To nFields
				nUsado++
				IF ( aHeader[ nField , 08 ] == "C" )
					IF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CC" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"CC"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DEPTO" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"DEPTO"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"POSTO" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"POSTO"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PROCES" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"PROCES"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PERIODO" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"PERIODO"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ROTEIR" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"ROTEIR"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"NUMPAG" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"NUMPAG"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CODFUNC" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"CODFUNC"  )																																				
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FLAG" , .T. )
						aArrayMain[nMarcacoes,nUsado] := "I"
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ORDEM" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"ORDEM"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TURNO" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"TURNO"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PAPONTA" , .T. )
						aArrayMain[nMarcacoes,nUsado] := cPerAponta
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DATAAPO" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"DATAAPO"  )
					// Inicializando o campo do WalkThru
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ALI_WT" , .T. )
						aArrayMain[nMarcacoes,nUsado] := cAlias   
					Else
						aArrayMain[nMarcacoes,nUsado] := CriaVar( aHeader[ nField , 02 ], .T. )
					EndIF		
			  	ElseIF ( aHeader[ nField , 08 ] == "N" )
			  		// Inicializando o campo do WalkThru
					IF fContemStr( aHeader[ nField , 02 ] , cPrefix+"REC_WT" , .T. )
						aArrayMain[nMarcacoes,nUsado] := 0
					Else 
						aArrayMain[nMarcacoes,nUsado] := CriaVar( aHeader[ nField , 02 ], .T. )
					Endif   
			   	ElseIF ( aHeader[ nField , 08 ] == "D" )
					aArrayMain[nMarcacoes,nUsado] :=CriaVar( aHeader[ nField , 02 ], .T. )
				Else
					aArrayMain[nMarcacoes,nUsado] := .F.
				EndIF
			Next nField
			IF nOpcX != 2 .and. nOpcX != 5 //Visualizacao ou Exclusao
				aArrayMain[nMarcacoes,nUsado+1] := .F.
			EndIF	
			nMarcacoes := 0
		EndIF
	EndIF

End Sequence
		
RestArea( aArea )

Return( nMarcacoes )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230LinOk	³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida a Linha Digitada na GetDados                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230LinOk                                     			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³loListBox - Identifica se a Validacao esta sendo Feita `a par³
³          ³            tir do ListBox.                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230LinOk(oGet,loListBox)

Local cHelp			:= ""
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8"  ) ) + "_" )
Local dDataApo		:= CtoD("//")
Local nDataApo		:= 0
Local lRet			:= .T.
Local lMcIgual		:= ( SuperGetMv( "MV_MCIGUAL" , NIL , "N" , cFilAnt ) == "S" )
Local nPosData		:= GdFieldPos(cPrefix+"DATA")
Local nPosHora		:= GdFieldPos(cPrefix+"HORA")
Local nPosOrdem 	:= GdFieldPos(cPrefix+"ORDEM")
Local nPosCC		:= GdFieldPos(cPrefix+"CC")
Local nPosDepto	  	:= GdFieldPos(cPrefix+'DEPTO')
Local nPosPosto	  	:= GdFieldPos(cPrefix+'POSTO')
Local nPosProces  	:= GdFieldPos(cPrefix+'PROCES')
Local nPosPer	  	:= GdFieldPos(cPrefix+'PERIODO')
Local nPosRot	  	:= GdFieldPos(cPrefix+'ROTEIR')
Local nPosNrPag	  	:= GdFieldPos(cPrefix+'NUMPAG')
Local nPosFun	  	:= GdFieldPos(cPrefix+'CODFUNC')
Local nPosDataApo	:= GdFieldPos(cPrefix+'DATAAPO')
Local nCount		:= 0
Local nX			:= 0
Local nFornX		:= 0
Local nY			:= 0
Local nFornY		:= 0
Local nTamP8Ordem	:= ( TamSx3("P8_ORDEM")[1] )

loListBox := IF( loListBox == NIL .or. ValType( loListBox ) != "L" , .F. , loListBox )

IF !aCols[ n , nSvUsado ] 

	Begin Sequence
	
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Na Validacao do aCols, o Primeiro Elemento sempre estara    OK³
			³Quando for Montado Vazio e Quando Estiver Sendo Validado  Pelo³
			³Objeto ListBox.                                               ³			
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF Len( aCols ) == 1 .and. Empty( aCols[ n , nPosData ] ) .and. loListBox
				Break
			EndIF
	
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³So verifica Itens Duplicados se MV_MCIGUAL nao for igual a "S"³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !lMcIgual
				aEval( aCols , { |x,y| IF( x[ nPosData  ] == aCols[ n , nPosData  ] .and.;
									  	   x[ nPosHora  ] == aCols[ n , nPosHora  ] .and.;
										   x[ nPosDataApo ] == aCols[ n , nPosDataApo] .and.;
									  	   !x[nSvUsado] .and. y != n,;
										   nCount++,;
										   NIL;
									      );
							    };
					  )
			EndIF					  
			
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se Existem Itens Duplicados no aCols e se a Data, Cen³
			³tro de Custo ou DataApo Estao Vazios.                           ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !( lRet := ( nCount == 0 .and. !Empty( aCols[ n , nPosData  ] ) ;
				   						   .and. !Empty( aCols[ n , nPosCC    ] ) ;
									 	   .and. !Empty( aCols[ n , nPosDataApo ] ) ;
						   );
				 )
				IF !lMcIgual .and. nCount > 0
					cHelp := STR0025	//"Data e Hora Duplicadas"
				ElseIF Empty( aCols[ n , nPosData  ] )
					cHelp := STR0026	//"Data N„o Foi Preenchida"
				ElseIF Empty( aCols[ n , nPosCC    ] ) 
					cHelp := STR0027	//"Centro de Custo N„o Foi Preenchido"	
				ElseIF Empty( aCols[ n , nPosDataApo ] )
					cHelp := STR0028	//"Data de Apontamento N„o Foi Preenchida"
			    EndIF
				Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			EndIF
			
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se a Data de APontamento Digitada Consta no Calendario de Marcacoes³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF lRet .And. aCols[n,nPosDataApo] >= SRA->RA_ADMISSA .And. !( lRet := !( aScan( aListBox , { |x| x[CALEND_ELEM_DATA_APO] == aCols[n,nPosDataApo] } ) == 0 ) )
				cHelp := STR0029	//"Data de Apontamento N„o Existe na Tabela"
				Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			EndIF
		
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se o Item digitado nao Existe nos Outros Dias.  Neste³
			³Caso a Busca e' feita no aArrayMain que contem as Marcacoes de³
			³Todos os Dias apenas quando o Paramentro MV_MCIGUAL for   dife³
			³rente de "S"												   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !lMcIgual .and. lRet
				nFornX := Len( aArrayMain )
				For nX := 1 To nFornX
					IF nX > nFornX
						Exit
					EndIF	
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica se a Marcacao ja Existe em Outro Dia.                ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					IF ( aArrayMain[ nX , nPosData  ] == aCols[ n , nPosData  ] .and.;
						 aArrayMain[ nX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
						 aArrayMain[ nX , nPosDataApo ] == aCols[ n , nPosDataApo ] .and.;
						 !aArrayMain[ nX , nSvUsado ]  ) .or.;
					   ( aArrayMain[ nFornX , nPosData  ] == aCols[ n , nPosData  ] .and.;
					     aArrayMain[ nFornX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
					     aArrayMain[ nFornX , nPosDataApo ] == aCols[ n , nPosDataApo ] .and.;
					     !aArrayMain[ nFornX , nSvUsado ] )
						nFornY := Len( aElem )
						/*
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Se for um Elemento que ja' Existia e Foi Alterado.            ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						IF n <= nFornY
							For nY := 1 To nFornY
								IF n == nY
									IF aArrayMain[ nX , nPosData  ] == aCols[ n , nPosData  ] .and.;
									   aArrayMain[ nX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
									   aArrayMain[ nX , nPosDataApo ] == aCols[ n , nPosDataApo ] .and.;
									   aElem[ nY ] != nX
										lRet := .F.
										Exit
									ElseIF aArrayMain[ nFornX , nPosData  ] == aCols[ n , nPosData  ] .and.;
									       aArrayMain[ nFornX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
									       aArrayMain[ nFornX , nPosDataApo ] == aCols[ n , nPosDataApo ] .and.;
									   	   aElem[ nY ] != nFornX
											lRet := .F.
											cHelp := STR0030	//"J  Existe Marca‡„o Cadastrada Para o Dia"
											Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
											Exit
									EndIF
								EndIF
							Next nY
							IF !lRet
								Exit
							EndIF
						Else
							/*
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Neste Caso e' um Novo Elemento e esta' Inconsistente          ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
							lRet := .F.
							Exit
						EndIF
					EndIF
					--nFornX
				Next nX
				IF !lRet
					cHelp := STR0030	//"J  Existe Marca‡„o Cadastrada Para o Dia"
					Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
				EndIF
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se a Marcacao e Menor que a Ultima Marcacao do Dia An³
			³terior e Maior que a Primeira Marcacao do Dia Posterior.      ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
            IF lRet
				nOrdem := Val( aCols[ n , nPosOrdem ] ) 
				If nOrdem > 1
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica a Ultima Marcacao do Dia Anterior.          		   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					cOrdem := StrZero( (nOrdem - 1) , nTamP8Ordem )
					IF ( nX := aScan( aArrayMain , { |x| x[nPosOrdem] == cOrdem } ) ) > 0
						nFornX := Len( aArrayMain )
						For nX := nX To nFornX
							IF ( aArrayMain[ nX , nPosOrdem ] != cOrdem )
								Exit
							EndIF
						Next nX
						IF ( ( --nX <= nFornX ) .and. nX > 0 )
							IF DataHora2Str( aCols[ n , nPosData ] , aCols[ n , nPosHora ] ) < ;
							   DataHora2Str( aArrayMain[ nX , nPosData ] , aArrayMain[ nX , nPosHora ] )
								lRet := .F.
								cHelp := STR0053	//"Marca‡„o Menor que a £ltima Marca‡„o do Dia Anterior"
								Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
							EndIF
						EndIF
					EndIF	
				Endif	
        		/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica a Primeira Marcacao do Dia Posterior.                ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF lRet
					If !(nOrdem == Val(aArrayMain[Len(aArrayMain),nPosOrdem]))
						cOrdem := StrZero( (nOrdem + 1)  , nTamP8Ordem )
						IF ( nX := aScan( aArrayMain , { |x| x[nPosOrdem] == cOrdem } ) ) > 0
							IF DataHora2Str( aCols[ n , nPosData ] , aCols[ n , nPosHora ] ) > ;
							   DataHora2Str( aArrayMain[ nX , nPosData ] , aArrayMain[ nX , nPosHora ] )
								lRet := .F.
								cHelp := STR0054	//"Marca‡„o Maior que a primeira Marca‡„o do Pr¢ximo Dia"
								Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
							EndIF
						EndIF
					Endif	
				EndIF
            EndIF
	
	End Sequence
		
EndIF
	
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230TudOk	³ Autor ³Marinaldo de Jesus    ³ Data ³20/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida Todos os Itens da GetDados                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230TudOk()                                   			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³VOID                                                	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230TudOk(oGet)

Local aOrdImpar		:= {}
Local cHelp			:= ""
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8"  ) ) + "_" )
Local lRet			:= .T.
Local lMsgMcImpar	:= ( SuperGetMv( "MV_MSGMIMP" , NIL , "N" , cFilAnt ) == "S" )
Local nCount		:= 0
Local nPosData		:= GdFieldPos(cPrefix+"DATA")

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Se desejar Mostrar Aviso de Marcacoes Impares                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( lMsgMcImpar )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se Existem Marcacoes Impares ( no Dia )              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aEval( aCols , { |x| IF( !Empty(x[nPosData]) .and. !x[nSvUsado],;
							   nCount++,;
							   NIL;
						      );
				    };
		  )
	IF ( ( nCount % 2 ) != 0 )
		cHelp := STR0052	//"Existem Marca‡”es Impares para o Dia"
		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
		nCount := 0
	EndIF
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se Existem Marcacoes Impares (Todos os Dias)         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aEval( aArrayMain, { |x| IF( !Empty(x[nPosData]) .and. !x[nSvUsado],;
							   nCount++,;
							   NIL;
						      );
				    };
		  )
	IF ( ( nCount % 2 ) != 0 )
		cHelp := STR0040	//"Existe(m) Dia(s) com Marca‡”es Impares"
		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
	EndIF
	
EndIF

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230Grava  ³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Grava Informacoes no SP8 ou SPG                              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Grava(aArrayMain,aRecno,aHeader,nOpcX,oGet,oDlg)    	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aArray  -> Array com as Informacoes a serem Gravadas 	     ³
³          ³aRecno  -> Registros Existentes no SP8 ou SPG         		 ³
³          ³aHeader -> Array com os Campos                      		 ³
³          ³nOpcX   -> Tipo de Operacao: 3 = Inclusao , 4 = Alteracao	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230Grava(aArrayMain,aRecno,aHeader,nOpcX,oGet,oDlg)

Local aArea			:= GetArea()
Local aNotFields	:= {"P8_FILIAL","P8_MAT","PG_FILIAL","PG_MAT"}
Local cAlias		:= IF( lPona240 , "SPG" , "SP8" )
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cChave		:= ""
Local cMsgErr		:= ""
Local nArray		:= 0
Local nForArray		:= Len( aArrayMain )
Local nRecno		:= 0
Local nForRecno		:= Len( aRecno )
Local nHeader		:= 0
Local nForHeader	:= Len( aHeader )
Local nPosData		:= GdFieldPos(cPrefix+"DATA") 
Local nPosHora		:= GdFieldPos(cPrefix+"HORA")
Local lAppend		:= .F.

(cAlias)->( dbSetOrder( RetOrdem(cAlias) ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Deleta os Registros de Marcacoes Automaticas que foram  recar³
³ regadas													   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
PonDelRecnos( cAlias , aRecsMarcAutDele )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Grava as Marcacoes                                            ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF nOpcX == 3 // Inclusao
	For nArray := 1 To nForArray
		IF !aArrayMain[ nArray , nSvUsado ] //Nao Grava Registros Deletados
			cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosData ] ) +  Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
			lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
			IF !RecLock(cAlias,!lAppend)
				Loop
			EndIF
			(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
			(cAlias)->(&(cPrefix+"MAT"))	:= cMat
			For nHeader := 1 To nForHeader
				IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
					(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
				EndIF
			Next nHeader
			( cAlias )->( MsUnLock() )
		EndIF
	Next nArray
ElseIF nOpcX == 4 //Alteracao
	IF nForRecno == nForArray
		For nArray := 1 To nForArray
			IF !( lAppend := Empty( aRecno[ nArray ] ) )
				(cAlias)->( dbGoto( aRecno[ nArray ] ) )
			EndIF	
			IF !aArrayMain[ nArray , nSvUsado ]
				IF !RecLock(cAlias,lAppend)
					Loop
				EndIF
				(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
				(cAlias)->(&(cPrefix+"MAT"))	:= cMat
				For nHeader := 1 To nForHeader
					IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
						(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
					EndIF
				Next nHeader
				( cAlias )->( MsUnLock() )
			ElseIF !lAppend
				IF !RecLock(cAlias,lAppend)
					Loop
				EndIF
				IF !( cAlias )->( FkDelete( @cMsgErr ) )
					( cAlias )->( RollBackDelTran( cMsgErr ) )
				EndIF
				( cAlias )->( MsUnLock() )
			EndIF
		Next nArray
	ElseIF nForRecno < nForArray
		For nRecno := 1 To nForRecno
			IF !( lAppend := Empty( aRecno[ nRecno ] ) )
				(cAlias)->( dbGoto( aRecno[ nRecno ] ) )
			EndIF
			IF !aArrayMain[ nRecno , nSvUsado ]
				IF !RecLock(cAlias,lAppend)
					Loop
				EndIF
				(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
				(cAlias)->(&(cPrefix+"MAT"))	:= cMat
				For nHeader := 1 To nForHeader
					IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
						(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nRecno , nHeader ] ) )
					EndIF
				Next nHeader
			ElseIF !lAppend
				IF !RecLock(cAlias,lAppend)
					Loop
				EndIF
				IF !( cAlias )->( FkDelete( @cMsgErr ) )
					( cAlias )->( RollBackDelTran( cMsgErr ) )
				EndIF
			EndIF
			( cAlias )->( MsUnLock() )
		Next nForRecno
        For nArray := nRecno To nForArray
			IF !aArrayMain[ nArray , nSvUsado ] //Nao Grava Registros Deletados
				cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosData ] ) +  Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
				lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
				IF !RecLock(cAlias,!lAppend)
					Loop
				EndIF
				(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
				(cAlias)->(&(cPrefix+"MAT"))	:= cMat
				For nHeader := 1 To nForHeader
					IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
						(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
					EndIF
				Next nHeader
				( cAlias )->( MsUnLock() )
			EndIF
		Next nArray
	EndIF
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura os Dados de Entrada                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aArea )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230Dele   ³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deleta as Marcacoes do SP8 ou SPG                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Dele( aRecno )                                   		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aRecno -> Array com os Registros a Serem Deletados		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230Dele( aRecno )

Local cAlias 		:= IF( lPona240 , "SPG" , "SP8" )
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cFilMat		:= ( cFil + cMat )
Local lSPCDelInfo	:= .F.

//"Excluir, alˆm dos apontamentos calculados pelo sistema, os apontamentos informados pelo usu rio?"
IF ( cAlias == "SP8" )
	IF ( SPC->( dbSeek( cFilMat , .F. ) ) )
		lSPCDelInfo := MsgNoYes( OemToAnsi( STR0079 ) , cCadastro ) 
	EndIF
EndIF

CursorWait()
	Begin Transaction
		IF ( cAlias == "SP8" )
			IF ( SPC->( MsSeek( cFilMat , .F. ) ) )
				SP8DelSPC( dPerIni , dPerFim , cFil , cMat , lSPCDelInfo )
			EndIF
		EndIF
		PonDelRecnos( cAlias , aRecno )
	End Transaction
CursorArrow()
	
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230GetaCols³Autor ³Marinaldo de Jesus    ³ Data ³23/05/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Monta o aCols Dia a Dia de Acordo com a DataApo do Calendario³
³          ³de Marcacoes e Salva as Alteracoes Efetuadas em aArrayMain.  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230GetaCols()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230GetaCols(	aCols		,; //Array da GetDados
								aArrayMain	,; //Array com Todas as Informacoes de Marcacoes
								aNotFields	,; //Campos Que Nao Constarao no aHeader
								oDlg		,; //Objeto de Dialogo
								oGet		,; //Objeto GetDados
								nOpcX		,; //Opcao do aRotina
								lTudoOk 	 ; //Se montado a partir de TudoOk
							  )

Local aDataApo	  := {}
Local cPrefix	  := ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local dDataApo	  := CalendRetCpo( cPrefix+"DATAAPO")
Local nX		  := 0
Local nLenX 	  := 0
Local nY		  := 0
Local nLenY		  := 0
Local nPosDataApo := 0
Local nPosData	  := 0
Local nPosHora	  := 0
Local nPosFlag	  := 0
Local nPosApon	  := 0
Local lManutenc	  := .F.
Local lPrimeira   := ( PCount() == 0 )

Static aColsStatic

DEFAULT nOpcX	:= 3 
DEFAULT lTudoOk := .F.

IF lPrimeira
	aColsStatic := NIL
Else
	nLenX 		:= Len( aArrayMain )
	nPosDataApo := GdFieldPos(cPrefix+"DATAAPO")
	nPosData	:= GdFieldPos(cPrefix+"DATA")
	nPosHora	:= GdFieldPos(cPrefix+"HORA")
	nPosFlag	:= GdFieldPos(cPrefix+"FLAG")
	nPosApon	:= GdFieldPos(cPrefix+"APONTA")
	IF aColsStatic != NIL .and. !fCompArray( aColsStatic , aCols )
		nLenY := Len( aElem )
		For nY := 1 To nLenY
			IF !fCompArray( aArrayMain[ aElem[ nY ] ] , aCols[ nY ] )
				lManutenc := .T.
				aArrayMain[ aElem[ nY ] ] := aClone( aCols[ nY ] )
				aAdd( aDataApo , aCols[ nY , nPosDataApo ] )
				aArrayMain[ aElem[ nY ] , nPosFlag ] := "M"
				aArrayMain[ aElem[ nY ] , nPosApon ] := "N"
			EndIF
		Next nY
		IF Len( aCols ) > Len( aColsStatic )
			IF nLenX == 1  .and. Empty( aArrayMain[ nLenX , nPosData ] )
				aArrayMain := {}
			EndIF
			nLenY := Len( aCols )
			For nY := nY To nLenY
				IF !Empty( aCols[ nY , nPosData ] ) .and. !aCols[nY , nSvUsado ]
					aAdd( aArrayMain , aClone( aCols[ nY ] ) )
				EndIF	
			Next nY
		ElseIF nLenY == 0 .and.( ( ( nLenY := Len( aCols ) ) == Len( aColsStatic ) ) .and. nLenY == 1  )
			IF Len( aArrayMain ) == nLenY .AND. !Empty(aElem)
				aArrayMain[ nLenY ] := aClone( aCols[ nLenY ] )
			Else
				aAdd( aArrayMain , aClone( aCols[ nLenY ] ) )
			EndIF	
		EndIF
		aSort( aArrayMain ,,, { |x,y|;
								 DataHora2Str(x[nPosData],x[nPosHora])+DtoS(x[nPosDataApo]);
								 <;
								 DataHora2Str(y[nPosData],y[nPosHora])+DtoS(y[nPosDataApo]);
						   };
			  )
		IF lManutenc
			nLenY := Len( aDataApo )
			nLenX := Len( aArrayMain )
			For nY := 1 To nLenY
				IF ( nX := aScan( aArrayMain , { |x| x[ nPosDataApo ] == aDataApo[ nY ] } ) ) > 0
					For nX := nX To nLenX
						IF aArrayMain[ nX , nPosDataApo ] == aDataApo[ nY ]
							aArrayMain[ nX , nPosApon ] := "N"
						Else
							Exit
						EndIF
					Next nX
				EndIF
			Next nY	
			aDataApo		:= {} 	
			lManutenc	:= .F.
		EndIF
	EndIF

	nSvnAt	:= oLBox:nAt
	
	IF !lTudoOk
		
		aCols  := {} ; aElem := {}
		IF ( nX := aScan( aArrayMain , { |x| x[ nPosDataApo ] == dDataApo } ) ) > 0
			nLenX := Len( aArrayMain )
			For nX := nX To nLenX
				IF aArrayMain[ nX , nPosDataApo ] == dDataApo
					aAdd( aCols , aClone( aArrayMain[ nX ] ) )
					aAdd( aElem, nX  )
				EndIF
			Next nX
		Else
			Pn230Acols(@aCols,,aNotFields,nOpcX,.T.)
		EndIF	
		aColsStatic := aClone( aCols )
		
		n := 1 
		oGet:ForceRefresh()
		oGet:oBrowse:nAt := n
		oGet:oBrowse:Refresh()
		oGet:Refresh()
		oDlg:Refresh()

	EndIF

EndIF
	
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³CalendRetCpo³ Autor ³Marinaldo de Jesus    ³ Data ³23/05/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna o Conteudo da Tabela de Horario conforme Campo       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³CalendRetCpo( cCampo , lOrdem , oListBox, cPref )			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cCampo  -> Campo a ser verificado                 		     ³ 
³          ³lOrdem  -> .T. Retorna a coluna da posicao do Campo no array ³ 
³          ³           .F. Retorna o conteudo do campo no array          ³
³          ³oListBox->  Objeto List que retornara a linha do conteudo    ³
³          ³cPref   ->  Prefixo do Alias a Ser Pesquisado                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Inicializador Padrao do Campo P8_ORDEM                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function CalendRetCpo( cCampo , lOrdem , oListBox , cPref  )

Local cPrefix	:= IF( cPref == NIL , IF( ValType( cCampo ) == "C" .and. SubStr( cCampo , 1 , 2 ) == "P8" , "P8" , "PG" ) , cPref )
Local cAlias	:= IF( ( cPrefix == "P8" ) , "SP8" , If (( cPrefix == "PG" ),"SPG", "SPT") )
Local lObject	:= .F.
Local lNoInit	:= If( (cPrefix <> "PT" ),( ( Type( "lP8PGIniCa" ) <> "L" ) .or. ( ( Type( "lP8PGIniCa" ) == "L" ) .and. !( lP8PGIniCa ) ) ), .F.)
Local uRet

DEFAULT lOrdem := .F.

Begin Sequence

	IF ( lNoInit )
		Break
	EndIF
                 
	IF ( ( Type( "lPona240" ) != "U" .and. lPona240 )  .or. ( Type( "lPona180" ) != "U" .and. lPona180 ) )
		cAlias	:= "SPG"
		cPrefix	:= ( PrefixoCpo( cAlias ) + "_" )
	EndIF
	
	cPrefix += IF( !( SubStr( Alltrim( cPrefix ) , -1 ) == "_" ) , "_" , "" )
	
	IF !( lObject := ( Type( "oLBox" ) == "O" ) )
		IF ( lObject := ( Type( "oListBox" ) == "O" ) )
			oLBox := oListBox
		EndIF
	EndIF
	
	IF lObject
		IF fContemStr( cCampo , "OBJETO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_BITMAP
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_BITMAP]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"DATA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DATA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DATA]
			EndIF			
		ElseIF fContemStr( cCampo , "DIASEMANA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DIA_SEMANA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DIA_SEMANA]
			EndIF			
		ElseIF fContemStr( cCampo , cPrefix+"HORA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORA
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORA] )
		    EndIF
		ElseIF fContemStr( cCampo , "TIPOMARC" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_TIPO_MARCACAO
			Else
				uRet := Substr( aListBox[oLBox:nAt,CALEND_ELEM_TIPO_MARCACAO] , 1 , 2 )
		    EndIF
		ElseIF fContemStr( cCampo , cPrefix+"TURNO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_TURNO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_TURNO] ) , SRA->RA_TNOTRAB , aListBox[oLBox:nAt,CALEND_ELEM_TURNO] )
			EndIF
		ElseIF fContemStr( cCampo , "SEQUENCIA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_SEQUENCIA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_SEQUENCIA]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"ORDEM" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_ORDEM
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_ORDEM]
			EndIF
		ElseIF fContemStr( cCampo , "REGRA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_REGRA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_REGRA]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"CC" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_CENTRO_DE_CUSTO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_CENTRO_DE_CUSTO] ) , SRA->RA_CC , aListBox[oLBox:nAt,CALEND_ELEM_CENTRO_DE_CUSTO] )
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"DEPTO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DEPTO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_DEPTO] ) , SRA->RA_DEPTO , aListBox[oLBox:nAt,CALEND_ELEM_DEPTO] )
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"POSTO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_POSTO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_POSTO] ) , SRA->RA_POSTO , aListBox[oLBox:nAt,CALEND_ELEM_POSTO] )
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"PROCES" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_PROCESSO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_PROCESSO] ) , SRA->RA_PROCES , aListBox[oLBox:nAt,CALEND_ELEM_PROCESSO] )
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"PERIODO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_PERIODO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_PERIODO] ) , ""			 , aListBox[oLBox:nAt,CALEND_ELEM_PERIODO] )
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"ROTEIR" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_ROTEIRO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_ROTEIRO] ) , ""			 , aListBox[oLBox:nAt,CALEND_ELEM_ROTEIRO] )
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"NUMPAG" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_NUM_PAGTO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_NUM_PAGTO] ) , ""			 , aListBox[oLBox:nAt,CALEND_ELEM_NUM_PAGTO] )
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"CODFUNC" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_FUNCAO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_FUNCAO] ) , ""			 , aListBox[oLBox:nAt,CALEND_ELEM_FUNCAO] )
			EndIF			
		ElseIF fContemStr( cCampo , "DATALIMITE" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DATA_LIMITE
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DATA_LIMITE]
			EndIF
		ElseIF fContemStr( cCampo , "HORALIMITE" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORA_LIMITE
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORA_LIMITE] )
			EndIF
		ElseIF fContemStr( cCampo , "HORASTRAB" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORAS_TRABALHADAS
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORAS_TRABALHADAS] )
			EndIF
		ElseIF fContemStr( cCampo , "HORASINTE" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORAS_INTERVALO
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORAS_INTERVALO] )
			EndIF
		ElseIF fContemStr( cCampo , "EXCECAO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_EXCECAO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_EXCECAO]
			EndIF
		ElseIF fContemStr( cCampo , "AFASTACOD" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_AFASTADO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_AFASTADO]
			EndIF
		ElseIF fContemStr( cCampo , "AFASTADES" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DESC_AFASTAMENTO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DESC_AFASTAMENTO]
			EndIF 
		ElseIF fContemStr( cCampo , cPrefix+"DATAAPO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DATA_APO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DATA_APO]
			EndIF			
		EndIF
	Else
		IF !lOrdem
			IF fContemStr( cCampo , cPrefix+"DATA" , .T. )
				uRet := dDataBase
			ElseIF fContemStr( cCampo , cPrefix+"HORA" , .T. )
				uRet := 0
			ElseIF fContemStr( cCampo , cPrefix+"TURNO" , .T. )
				uRet := SRA->RA_TNOTRAB
			ElseIF fContemStr( cCampo , cPrefix+"ORDEM" , .T. )
				uRet := ""
			ElseIF fContemStr( cCampo , cPrefix+"CC" , .T. )
				uRet := SRA->RA_CC
			ElseIF fContemStr( cCampo , cPrefix+"DEPTO" , .T. )
				uRet := SRA->RA_DEPTO
			ElseIF fContemStr( cCampo , cPrefix+"POSTO" , .T. )
				uRet := SRA->RA_POSTO
			ElseIF fContemStr( cCampo , cPrefix+"PROCES" , .T. )
				uRet := SRA->RA_PROCES
			ElseIF fContemStr( cCampo , cPrefix+"PERIODO" , .T. )
				uRet := ""
			ElseIF fContemStr( cCampo , cPrefix+"ROTEIR" , .T. )
				uRet := ""
			ElseIF fContemStr( cCampo , cPrefix+"NUMPAG" , .T. )
				uRet := ""
			ElseIF fContemStr( cCampo , cPrefix+"CODFUNC" , .T. )
				uRet := SRA->RA_CODFUNC	 
			ElseIF fContemStr( cCampo , cPrefix+"DATAAPO" , .T. )
				uRet := dDataBase																															
			EndIF
		Else
			uRet := CALEND_ELEM_ORDEM
		EndIF
	EndIF

End Sequence

IF ( lNoInit )
	IF ( ( cAlias )->( FieldPos( cCampo ) ) > 0 )
		PutFileInEof( cAlias )
		uRet := ( cAlias )->( FieldGet( FieldPos ( cCampo ) ) )
	ElseIF ( Type( ReadVar() ) <> "U" )
		uRet := &( ReadVar() )
	EndIF
EndIF
		
Return( uRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230BitMaps³ Autor ³Marinaldo de Jesus    ³ Data ³18/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Permuta de BitMaps                                           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230BitMaps												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³VOID                                               		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³oBmp                                                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230BitMaps( aBmp , cOrdem , cTipoDia , cExcecao , lFeriado , cTrabFer )

Local oBmp

Static cStaticOrdemBmp

IF ( PCount() == 0 )
	cStaticOrdemBmp := NIL
ElseIF cStaticOrdemBmp == NIL .or. cOrdem != cStaticOrdemBmp
	cTipoDia := IF( lFeriado .and. cTrabFer != "S" , "F" , cTipoDia )
	cStaticOrdemBmp := cOrdem
	IF cExcecao != "E"
		IF cTipoDia == "S"
			oBmp := aBmp[01]
		ElseIF cTipoDia == "D"
			oBmp := aBmp[02]
    	ElseIF cTipoDia == "N"
 	   		oBmp := aBmp[03]
    	ElseIF cTipoDia == "C"
	    	oBmp := aBmp[04]
		ElseIF cTipoDia == "F"
			oBmp := aBmp[05]
		EndIF
	ElseIF cExcecao == "E"
		IF cTipoDia == "S"
			oBmp := aBmp[06]
		ElseIF cTipoDia == "D"
			oBmp := aBmp[07]
    	ElseIF cTipoDia == "N"
 	   		oBmp := aBmp[08]
    	ElseIF cTipoDia == "C"
	    	oBmp := aBmp[09]
		ElseIF cTipoDia == "F"
			oBmp := aBmp[10]
		EndIF
	EndIF
EndIF

Return( oBmp )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230ChoiBar³ Autor ³Marinaldo de Jesus    ³ Data ³19/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Monta Button Bar                                             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230ChoiBar												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230 e PONA240                                            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230ChoiBar( oDlg , oGet , nOpcX , aNotFields , cProg , lSetKey )

Local aKeys			:= GetKeys()
Local bSvSet15		:= { || NIL }
Local bSvSet24		:= { || NIL }
Local bLegend		:= { || NIL }
Local bCalend		:= { || NIL }
Local bColDel		:= { || NIL }
Local bGerMarOne	:= { || NIL }
Local bGerMarAll	:= { || NIL }
Local bGerAleOne	:= { || NIL }
Local bGerAleAll	:= { || NIL }
Local bAponMarc		:= { || NIL }
Local bReaponMarc	:= { || NIL }
Local nMinMax		:= Abs( SuperGetMv( "MV_MCALEAT" , NIL , 0  , cFilAnt ) )
Local aButtons 		:= {}

DEFAULT lSetKey := .F.

IF !( nOpcX == 5 )
	bLegend		:= { || GetLegendCalend() }
	bCalend		:= { || IF(oGet:TudoOk(),(	Pn230GetaCols(	@aCols		,;
												  			@aArrayMain	,;
															aNotFields	,;
															@oDlg		,;
															@oGet		,;
															nOpcX		 ;
											      	 	),;
											f_Alt_H(	oGet				,;
														aClone(aArrayMain)	,;
														nSvUsado			,;
														aHeader				,;
														lPona240			 ;
													);
									 	),;
									 	NIL;
					 		);
			 		}
EndIF

IF !( ( nOpcX == 2 ) .or. ( nOpcX == 5 ) )
	bColDel		:= { || Pn230ModSetaCols( @oDlg , @oGet ) }
	bGerMarOne	:= { || Pn230GeraMarc( @oDlg , @oGet ) }
	bGerMarAll	:= { || Pn230GeraMarc( @oDlg , @oGet , .T. ) }
	IF nMinMax > 0
		bGerAleOne	:= { || Pn230GeraMarc( @oDlg , @oGet , .F. , nMinMax ) }
		bGerAleAll	:= { || Pn230GeraMarc( @oDlg , @oGet , .T. , nMinMax ) }
	EndIF	
	IF !( lPona240 )
		bAponMarc	:= { || IF(oGet:TudoOk(),(;
												Pn230GetaCols(	@aCols		,;
																@aArrayMain	,;
																aNotFields	,;
																@oDlg		,;
																@oGet		,;
																nOpcX	 	 ;
															  ),;
												Pn230Aponta( oGet , nOpcX );
											  ),;
											 NIL;
								);												
						 }
		bReaponMarc	:= { ||IF(oGet:TudoOk(),(;
												Pn230GetaCols(	@aCols		,;
																@aArrayMain	,;
																aNotFields	,;
																@oDlg		,;
																@oGet		,;
																nOpcX		 ;
															  ),;
												Pn230Aponta( oGet , nOpcX , .T. ) ;
											 ),;
											 NIL;
							 );												
						}
	EndIF
ElseIF ( nOpcX == 2 )
	bAponMarc	:= { || Pn230Aponta( oGet , nOpcX ) }
EndIF

IF nOpcX != 5	
	aAdd(aButtons, {"BMPVISUAL", {|| Eval(bLegend)},OemToAnsi(STR0045)})	// "Legenda do Calend rio..."
	SetKey( VK_F4 , bLegend )
	aAdd(aButtons, {"S4SB014N", {|| Eval(bCalend)},OemToAnsi(STR0069)})	//"Consulta de Hor rios...<F5>"
	SetKey( VK_F5 , bCalend )
	
	IF nOpcX != 2
		aAdd(aButtons, {"SDUZAP", {|| Eval(bColDel)},OemToAnsi(STR0068)})	// "Apagar/Restaurar Marca‡”es do Dia..."
		SetKey( VK_F6 , bColDel )
		aAdd(aButtons, {"CLOCK01", {|| Eval(bGerMarOne)},OemToAnsi(STR0038)})	// "Gera Marca‡„o..."
		SetKey( VK_F7 , bGerMarOne )
		aAdd(aButtons, {"SDUFIELDS", {|| Eval(bGerMarAll)},OemToAnsi(STR0055)})// "Gera Todas as Marca‡”es Para o Dia..."
		SetKey( VK_F8 , bGerMarAll )
		
		IF !( nMinMax == 0 )
			aAdd(aButtons, {"NEXT", {|| Eval(bGerAleOne)},OemToAnsi(STR0058)})// "Gera Marca‡„o Aleat¢ria..."
			SetKey( VK_F9 , bGerAleOne )
			aAdd(aButtons, {"PGNEXT", {|| Eval(bGerAleAll)},OemToAnsi(STR0059)})	// "Gera Marca‡”es Aleat¢rias Para o Dia..."
			SetKey( VK_F10 , bGerAleAll )
		EndIf
	EndIf
	
	IF !lPona240
		aAdd(aButtons, {"COLTOT", {|| Eval(bAponMarc)},OemToAnsi(STR0039)})	// "Aponta Marca‡”es..."
		SetKey( VK_F11 , bAponMarc )
	EndIf
	
	IF nOpcX != 2
		IF !lPona240
			aAdd(aButtons, {"RECALC", {|| Eval(bReaponMarc)},OemToAnsi(STR0073)})	// "For‡a o Reapontamento das Marca‡”es..."
			SetKey( VK_F12 , bReaponMarc )
		EndIf
	EndIf
EndIf
Return( aButtons )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230GeraMarc³ Autor ³Marinaldo de Jesus   ³ Data ³19/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Gerar Valores no aCols conforme o ListBox                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230GeraMarc(oDlg,oGet,lTodas,nMinMax,lDlgRefresh)			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pona230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230GeraMarc( oDlg , oGet , lTodas , nMinMax , lDlgRefresh )

Local cHelp			:= ""
Local cOrdem		:= ""
Local dDataApo		:= CtoD("//")
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local cTipo			:= ""
Local dNewData		:= Ctod("//")
Local lLinhaOk		:= .T.
Local lInterv		:= .F.
Local nInterv		:= 0
Local nHrTrab		:= 0
Local nAleato		:= 0
Local nNewMarc		:= 0
Local nPosData		:= GdFieldPos( cPrefix+"DATA"  	)
Local nPosHora		:= GdFieldPos( cPrefix+"HORA"  	)
Local nPosOrdem		:= GdFieldPos( cPrefix+"ORDEM" 	)
Local nPosDataApo	:= GdFieldPos( cPrefix+"DATAAPO")
Local nPosCC		:= GdFieldPos( cPrefix+"CC"    	)
Local nPosDepto	  	:= GDFieldPos( cPrefix+'DEPTO'  )
Local nPosPosto	  	:= GDFieldPos( cPrefix+'POSTO'  )
Local nPosProces  	:= GDFieldPos( cPrefix+'PROCES' )
Local nPosPer	  	:= GDFieldPos( cPrefix+'PERIODO')
Local nPosRot	  	:= GDFieldPos( cPrefix+'ROTEIR' )
Local nPosNrPag	  	:= GDFieldPos( cPrefix+'NUMPAG' )
Local nPosFun	  	:= GDFieldPos( cPrefix+'CODFUNC')
Local nPosFlag		:= GdFieldPos( cPrefix+"FLAG"  	)
Local nPosTurno		:= GdFieldPos( cPrefix+"TURNO" 	)
Local nPosApont		:= GdFieldPos( cPrefix+"APONTA"	)
Local nPosTpMarc	:= GdFieldPos( cPrefix+"TPMARCA")
Local nLenaCols		:= Len( aCols )
Local nElementos	:= 0
Local nDeletados	:= 0
Local nElem			:= 0
Local nSvnAt		:= 0

DEFAULT lTodas		:= .F.
DEFAULT nMinMax		:= 0  
DEFAULT lDlgRefresh := .T.


/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³A instrucao abaixo foi incluida sob aconselhamento do Fabio MR³
³para evitar que linhas geradas sejam consideradas como linhas ³
³sem conteudo e, assim, desconsideradas. 05/03/05			   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
oGet:lNewline	:= .F.

IF !( lTodas )
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Gera Marcacao Dia a Dia                                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF nLenaCols == 1 .and. Empty( aCols[ nLenaCols , nPosData ] )	.or. ;
	   nLenaCols > 1  .and. Empty( aCols[ n , nPosData ] )			.or. ;
	   ( aEval( aCols , { |x| IF( x[nSvUsado] , nDeletados++ , NIL ) } ) , nDeletados == nLenaCols )
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Atribui o valor do Primeiro elemento ao n 					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		n := IF( nDeletados == nLenaCols , n := 1 , n )
		
		IF nMinMax > 0 //Marcacao Aleatoria
			cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
			³da Tabela.                                                    ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
				IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
				    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
				ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
					nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
				EndIF
			EndIF
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
			³Tabela.                                                       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
				IF ( CalendRetCpo( "HORASTRAB" ) > 0 )
				    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
				ElseIF ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) >  0 )
					nHrTrab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
				EndIF
			EndIF
			dNewData := CalendRetCpo( cPrefix+"DATA"  )
			IF lInterv
				nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
			Else
				nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
			EndIF
			aCols[ n , nPosData  ] := dNewData
			aCols[ n , nPosHora  ] := nNewMarc
		Else
			aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
			aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
		EndIF
		aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"     )
		aCols[ n , nPosDepto 	] := CalendRetCpo( cPrefix+"DEPTO"  )
		aCols[ n , nPosPosto 	] := CalendRetCpo( cPrefix+"POSTO"  )
		aCols[ n , nPosProces 	] := CalendRetCpo( cPrefix+"PROCES" )
		aCols[ n , nPosPer	 	] := CalendRetCpo( cPrefix+"PERIODO")
		aCols[ n , nPosRot	 	] := CalendRetCpo( cPrefix+"ROTEIR" )
		aCols[ n , nPosNrPag 	] := CalendRetCpo( cPrefix+"NUMPAG" )
		aCols[ n , nPosFun	 	] := CalendRetCpo( cPrefix+"CODFUNC")
		aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO"  )
		aCols[ n , nPosDataApo  ] := CalendRetCpo( cPrefix+"DATAAPO")
		aCols[ n , nSvUsado  	] := .F.
		aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
	Else
		IF MsgYesNo( OemToAnsi( STR0043 ) , OemToAnsi( STR0044 ) )	//"J  Existe Marca‡„o. Incluir Nova?"###"Aten‡„o"
	    	aAdd( aCols , aClone( aCols[ n ] ) )
	    	n := ++nLenaCols 
			aCols[ n , nPosFlag  ] := "I"
		Else
			aCols[ n , nPosFlag  ] := "M"
	    EndIF
		aCols[ n , nPosApont ] := "N"
		IF nMinMax > 0 //Marcacao Aleatoria
			cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
			³da Tabela.                                                    ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
				IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
				    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
				ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
					nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
				EndIF
			EndIF
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
			³Tabela.                                                       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
				IF ( CalendRetCpo( "HORASTRAB" ) > 0 )
				    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
				ElseIF ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) > 0 )
					nHrTrab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
				EndIF
			EndIF
			dNewData := CalendRetCpo( cPrefix+"DATA"  )
			IF lInterv
				nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
			Else
				nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
			EndIF
			aCols[ n , nPosData  ] := dNewData
			aCols[ n , nPosHora  ] := nNewMarc
		Else
			aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
			aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
		EndIF
		aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"    )
		aCols[ n , nPosDepto 	] := CalendRetCpo( cPrefix+"DEPTO"  )
		aCols[ n , nPosPosto 	] := CalendRetCpo( cPrefix+"POSTO"  )
		aCols[ n , nPosProces 	] := CalendRetCpo( cPrefix+"PROCES" )
		aCols[ n , nPosPer	 	] := CalendRetCpo( cPrefix+"PERIODO")
		aCols[ n , nPosRot	 	] := CalendRetCpo( cPrefix+"ROTEIR" )
		aCols[ n , nPosNrPag 	] := CalendRetCpo( cPrefix+"NUMPAG" )
		aCols[ n , nPosFun	 	] := CalendRetCpo( cPrefix+"CODFUNC")		
		aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO" )
		aCols[ n , nPosDataApo  ] := CalendRetCpo( cPrefix+"DATAAPO")
		aCols[ n , nPosApont 	] := "N"
		aCols[ n , nSvUsado  	] := .F.
		aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
	EndIF
Else
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Gera Todas as Marcacoes para o Dia Conforme Tabela            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF nLenaCols == 1 .and. ( Empty( aCols[ nLenaCols , nPosData ] ) .or. ;
	   !Empty( aCols[ nLenaCols , nPosData ] ) .and. aCols[ nLenaCols , nSvUsado ] ) .or.;
	   ( aEval( aCols , { |x| IF( x[nSvUsado] , nDeletados++ , NIL ) } ) , nDeletados == nLenaCols )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Atribui o valor do Primeiro elemento ao n 					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		n := IF( nDeletados == nLenaCols , n := 1 , n )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Retorna a Ordem do Dia                                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cOrdem := CalendRetCpo( cPrefix+"ORDEM" )
		IF ValType( aListBox[oLBox:nAt,CalendRetCpo( "OBJETO" , .T. ) ] ) != "O"
			oLBox:nAt := aScan( aListBox , { |x| x[CalendRetCpo(cPrefix+"ORDEM",.T.)] == cOrdem .and. ValType(x[CalendRetCpo("OBJETO",.T.)]) == "O"  } )
		EndIF
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica o Numero de Marcacoes para o dia conforme Tabela     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		dDataApo := CalendRetCpo( cPrefix+"DATAAPO" )
		aEval( aListBox , { |x| IF( x[CalendRetCpo(cPrefix+"DATAAPO",.T.)] == dDataApo , nElementos++ , NIL ) } )
		IF nMinMax > 0 //Marcacao Aleatoria
			cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
			³da Tabela.                                                    ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
				IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
				    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
				ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
					nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
				EndIF
			EndIF
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
			³Tabela.                                                       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
				IF ( CalendRetCpo( "HORASTRAB" ) > 0 )
				    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
				ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) > 0 ) )
					nHrTrab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
				EndIF
			EndIF
			dNewData := CalendRetCpo( cPrefix+"DATA"  )
			IF lInterv
				nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
			Else
				nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
			EndIF
			aCols[ n , nPosData  ] := dNewData
			aCols[ n , nPosHora  ] := nNewMarc
		Else
			aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
			aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
		EndIF
		aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"    )
		aCols[ n , nPosDepto 	] := CalendRetCpo( cPrefix+"DEPTO"  )
		aCols[ n , nPosPosto 	] := CalendRetCpo( cPrefix+"POSTO"  )
		aCols[ n , nPosProces 	] := CalendRetCpo( cPrefix+"PROCES" )
		aCols[ n , nPosPer	 	] := CalendRetCpo( cPrefix+"PERIODO")
		aCols[ n , nPosRot	 	] := CalendRetCpo( cPrefix+"ROTEIR" )
		aCols[ n , nPosNrPag 	] := CalendRetCpo( cPrefix+"NUMPAG" )
		aCols[ n , nPosFun	 	] := CalendRetCpo( cPrefix+"CODFUNC")		
		aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO" )
		aCols[ n , nPosDataApo  ] := CalendRetCpo( cPrefix+"DATAAPO")
		aCols[ n , nPosFlag  	] := "I"
		aCols[ n , nPosApont 	] := "N"
		aCols[ n , nSvUsado  	] := .F.
		aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
		nSvnAt := oLBox:nAt
		IF nSvnAt != 1
			nElementos+= ( nSvnAt - 1 )
		EndIF
		For nElem := nSvnAt + 1 To nElementos
			oLBox:nAt := nElem
			++n
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Carrega um Novo Elemento no aCols							   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !( nDeletados == nLenaCols ) .or. n > nLenaCols
				aAdd( aCols , aClone( aCols[ Min( n , nLenaCols ) ] ) )
			EndIF
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Se for Marcacao Aleatoria        							   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF nMinMax > 0 //Marcacao Aleatoria
				cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
				³da Tabela.                                                    ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
					IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
					    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
					ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
						nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
				³Tabela.                                                       ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
					IF (  CalendRetCpo( "HORASTRAB" ) > 0 )
					    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
					ElseIF ( VAl( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) > 0 )
						nHrTRab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				dNewData := CalendRetCpo( cPrefix+"DATA"  )
				IF lInterv
					nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
				Else
					nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
				EndIF
				aCols[ n , nPosData  ] := dNewData
				aCols[ n , nPosHora  ] := nNewMarc
				lInterv := .F.
			Else
				aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
				aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
			EndIF
			aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"     )
			aCols[ n , nPosDepto 	] := CalendRetCpo( cPrefix+"DEPTO"  )
			aCols[ n , nPosPosto 	] := CalendRetCpo( cPrefix+"POSTO"  )
			aCols[ n , nPosProces 	] := CalendRetCpo( cPrefix+"PROCES" )
			aCols[ n , nPosPer	 	] := CalendRetCpo( cPrefix+"PERIODO")
			aCols[ n , nPosRot	 	] := CalendRetCpo( cPrefix+"ROTEIR" )
			aCols[ n , nPosNrPag 	] := CalendRetCpo( cPrefix+"NUMPAG" )
			aCols[ n , nPosFun	 	] := CalendRetCpo( cPrefix+"CODFUNC")			
			aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO" )
			aCols[ n , nPosDataApo  ] := CalendRetCpo( cPrefix+"DATAAPO")
			aCols[ n , nPosFlag  	] := "I"
			aCols[ n , nPosApont 	] := "N"
			aCols[ n , nSvUsado  	] := .F.
			aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
		Next nElem
		oLBox:nAt := nSvnAt
	Else
		cHelp := STR0056	//"Utilize Esta Op‡„o Apenas Quando n„o Houver Marca‡”es na Data"
		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
	EndIF
EndIF
	
lLinhaOk := Pn230LinOk(NIL,.T.)

IF ( lDlgRefresh )
	oGet:ForceRefresh()
EndIF

IF !( lLinhaOk )
	oGet:oBrowse:nAt := ( n := nLenaCols )
EndIF	

IF ( lDlgRefresh )
   oGet:oBrowse:Refresh()
   oDlg:Refresh()
EndIF
	
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230Aponta  ³ Autor ³Marinaldo de Jesus   ³ Data ³19/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Efetuar o Apontamento das Marcacoes                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Aponta()										 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pn230ChoiBar                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230Aponta(oGet,nOpcX,lForceApont)

Local aLastMarca	:= {}
Local lGrava		:= .T.
Local lClassifica	:= ( PCount() != 0 )
Local lApHeDtm		:= ( SuperGetMv( "MV_APHEDTM" , NIL , "N" , cFilAnt ) == "S" )
Local lReaponta		:= .F.

DEFAULT lForceApont	:= .F.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Efetua o Apontamento Apenas Quando nao For Visualizacao       ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( nOpcX == 2 )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega Apontamentos Anteriores                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !lApHeDtm
		IF !lForceApont .and. Empty( aLastApo ) //So Carrega a Primeira vez.
			aLastApo := GetLastApo( dPerIni , dPerFim , IF( lPona240 , "SPH" , "SPC" ) )
		ElseIF lForceApont
			aLastApo := {}
		EndIF
	Else
		aLastApo := {}
	EndIF
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Salva aMarcacoes pois se nao Houver diferencas entre os   valo³
	³res Atuais e Anteriores de aCols (aArrayMain e aArrayAnt) este³
	³nao sera carregado Novamente								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aLastMarca	:= aClone( aMarcacoes )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reinicializa aMarcacoes e aResult sempre que for efetuar     o³
	³Apontamento e se Existirem Diferencas nos Dados               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aMarcacoes	:= {}
	IF lClassifica 
		IF !fCompArray(aArrayMain,aArrayAnt) .or. lGeraAuto
			aResult		:= {}
			aArrayAnt	:= aClone( aArrayMain )
		EndIF
		lGrava	:= .F.
	EndIF
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Prepara, Aponta as Marcacoes e Grava os Apontamentos          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	PreparaCla(	@aMarcacoes																									,;	//Array de Marcacoes
				@aResult																									,;	//Array de Marcacoes
				NIL																											,;	//Numero de Colunas de Marcacoes
				( lGrava .and. Len( aLastApo ) == 0 ) 																		,;	//Gravar ou Nao o Apontamento
				( lReaponta := ( lForceApont .or. !fCompArray(aArrayMain,aArrayAnt) .or. Empty(aResult) .or. lGeraAuto) )	,;	//Reprocessar Apontamento
				aArrayMain																									,;	//Array com as Marcacoes do SP8
				aHeader																										,;	//Array com o Cabecalho de aArrayMain
				nSvUsado															 										,;	//Indice do Elemento Logico de aArrayMain
				( lApHeDtm .or. lForceApont )										 						 			 	 ;	//Forca o Reapontamento
			  )
	
	IF Len( aLastApo ) > 0 
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Remonta aResult                                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF lReaponta
			GetNewResult(@aResult,aLastApo,aArrayMain,aArrayClone,aTabCalend)
		EndIF
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Caso, PreparaCla apenas Grava o Apontamento             ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		PreparaCla(	@aMarcacoes											,;	//Array de Marcacoes
					@aResult											,;	//Array de Resultados
					NIL													,;	//Numero de Colunas de Marcacoes
					lGrava												,;	//Gravar ou Nao o Apontamento
					.F.													,;	//Reapontar as Marcacoes
					aArrayMain											,;	//Array com as Marcacoes do SP8
					aHeader												,;	//Array com o Cabecalho de aArrayMain
					nSvUsado											 ;	//Indice do Elemento Logico de aArrayMain
				  )
	EndIF
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Restaura aMarcacoes para Poder Estar Gravando o Flag de Aponta³
	³mento														   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF Empty( aMarcacoes )
		aMarcacoes := aClone( aLastMarca )
	EndIF	

EndIF
	
IF ( lClassifica .or. ( nOpcX == 2 ) )
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Mostra o Resultado dos Apontamentos                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpcX == 2 )
		IF Empty( aLastApo )
			aResult := GetLastApo( dPerIni , dPerFim , IF( lPona240 , "SPH" , "SPC" ) )
		Else
			aResult	:= aClone( aLastApo )
		EndIF	
	EndIF	
	IF !Empty( aResult )
		fMostraApo(nOpcX,aResult,oGet,.T.,lPona240)
	Else
		MsgAlert( OemToAnsi( STR0071 ) , STR0072 )	//"N„o Existem Apontamentos Para o Funcion rio"###"Aviso"
	EndIF
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Salva o Conteudo de aArrayMain para verificar se sera  preciso³
³estar reprocessando o Apontamento.(Apenas Qdo. Nao Visualizar)³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( nOpcX == 2 )
	aArrayAnt := aClone( aArrayMain )
Else
	aResult := {}
EndIF	

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Neste Ponto lGeraAuto deve ser Setado como .F. para que nao ha³
³ja Apontamento Desnecessario								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
lGeraAuto := .F.
	
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetLegendCalend³ Autor ³Marinaldo de Jesus ³ Data ³19/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Mostra Legenda das Cores do ListBox                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetLegendCalend()									 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pn230ChoiBar                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GetLegendCalend(aBitMaps,aAdicLeg, nLeg)

Local aKeys := GetKeys()
Local aLeg

Static aBmp
Static aBmpLegend

IF aBmp == NIL
	aBmp := Array(10)
	aBmp[01] := LoadBitmap( GetResources() , "BR_VERDE"		)
	aBmp[02] := LoadBitmap( GetResources() , "BR_VERMELHO"	)
	aBmp[03] := LoadBitmap( GetResources() , "BR_PRETO"		)
	aBmp[04] := LoadBitmap( GetResources() , "BR_AZUL"		)
	aBmp[05] := LoadBitmap( GetResources() , "BR_AMARELO"	)
	aBmp[06] := LoadBitmap( GetResources() , "LIGHTBLU"		)
	aBmp[07] := LoadBitmap( GetResources() , "BR_PINK"		)
	aBmp[08] := LoadBitmap( GetResources() , "BR_MARRON"	)
	aBmp[09] := LoadBitmap( GetResources() , "br_branco"		)
	aBmp[10] := LoadBitmap( GetResources() , "BR_LARANJA"	)
EndIF

IF aBmpLegend == NIL
 	aBmpLegend := Array(10,02)
	aBmpLegend[01,01] := "BR_VERDE"		; aBmpLegend[01,02] := OemToAnsi(STR0046)	//"Trabalhado"
	aBmpLegend[02,01] := "BR_VERMELHO"	; aBmpLegend[02,02] := OemToAnsi(STR0047)	//"DSR"
	aBmpLegend[03,01] := "BR_PRETO"		; aBmpLegend[03,02] := OemToAnsi(STR0048)	//"N„o Trabalhado"
	aBmpLegend[04,01] := "BR_AZUL"		; aBmpLegend[04,02] := OemToAnsi(STR0049)	//"Compensado"
	aBmpLegend[05,01] := "BR_AMARELO"	; aBmpLegend[05,02] := OemToAnsi(STR0050)	//"Feriado"
	aBmpLegend[06,01] := "LIGHTBLU"		; aBmpLegend[06,02] := OemToAnsi(STR0063)	//"Exce‡„o Trabalhado" 
	aBmpLegend[07,01] := "BR_PINK"		; aBmpLegend[07,02] := OemToAnsi(STR0064)	//"Exce‡„o DSR"
	aBmpLegend[08,01] := "BR_MARRON"	; aBmpLegend[08,02] := OemToAnsi(STR0065)	//"Exce‡„o N„o Trabalhado"
	aBmpLegend[09,01] := "br_branco"		; aBmpLegend[09,02] := OemToAnsi(STR0066)	//"Exce‡„o Compensado"
	aBmpLegend[10,01] := "BR_LARANJA"	; aBmpLegend[10,02] := OemToAnsi(STR0067)	//"Exce‡„o Feriado"
	aLeg:={Aclone(aBmpLegend)} 
	IF aAdicLeg <> Nil  
	   aSize(aLeg,Len(aLeg)+1)
	   aIns(aLeg,2)
	   aLeg[2]:=Aclone(aBmpLegend) 
	   Aeval(aAdicLeg,{|x| AADD(aLeg[2], x ) } ) 
	Endif
	 aBmpLegend:=aClone(aLeg) 
EndIF
	
IF PCount() == 0  .OR. nLeg <> NIL
	If nLeg == NIL
		BrwLegenda( OemToAnsi(STR0045),OemToAnsi(STR0051),aBmpLegend[1]) //"Legenda do Calend rio..."###"Aten‡„o"
    Else 
		BrwLegenda( OemToAnsi(STR0045),OemToAnsi(STR0051),aBmpLegend[nLeg]) //"Legenda do Calend rio..."###"Aten‡„o"    
    Endif
Else
	aBitMaps := aClone( aBmp )
EndIF

RestKeys( aKeys )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230ModSetaCols³Autor ³Marinaldo de Jesus ³ Data ³08/08/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deletar/Restaurar as Marcacoes do Dia                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230ModSetaCols( @oDlg , @oGet )							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³oDlg - Objeto de Dialogo para Refresh     					 ³
³          ³oGet - Objeto GetDados para Refresh      					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pn230ChoiBar                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230ModSetaCols( oDlg , oGet )

Local nX		:= 0
Local nLenaCols := Len( aCols )

For nX := 1 To nLenaCols
	aCols[ nX , nSvUsado ] := !aCols[ nX , nSvUsado ]
Next nX

oGet:ForceRefresh()
oDlg:Refresh()

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetNewResult³ Autor ³Marinaldo de Jesus     ³ Data ³31/07/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Remontar aResult                                              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetNewResult(aResult,aLastApo,aArrayMain,aArrayAnt,aTabCalend)³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aResult		-> Array com os Resultados Dia a Dia			  ³
³          ³aLastApo	-> Array com os Resultados Dia a Dia Ja Apontados ³
³          ³aArraY   	-> Dados Atuais Baseados em aCols                 ³
³          ³aArraYAnt  	-> Dados Anteriores Baseados no 1o. aCols         ³
³          ³aTabCalend 	-> Calendario de Marcacoes                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function GetNewResult(aResult,aLastApo,aArrayMain,aArrayAnt,aTabCalend)

Local aDataApo		:= {}
Local bAsc			:= { || NIL }
Local bSrt			:= { | x , y | Dtos( x[1] ) + x[2] < Dtos( y[1] ) + y[2] }
Local dDtApoIni		:= aTabCalend[ 01 , CALEND_POS_DATA_APO ]
Local dDtApoFim		:= aTabCalend[ Len( aTabCalend ) , CALEND_POS_DATA_APO ]
Local dDataApo		:= dDtApoIni
Local nDataApo		:= 0
Local nForDataApo	:= dDtApoFim - dDtApoIni
Local nPos			:= 0
Local nPos1			:= 0
Local nPos2			:= 0
Local nX			:= 0
Local nY			:= 0
Local nFornX		:= Len( aLastApo )
Local nPosDataApo	:= GdFieldPos("P8_DATAAPO")
Local nArray		:= Len( aArrayMain )
Local nArrayAnt		:= Len( aArrayAnt )

IF ( nFornX > 0 )

	aDataApo := Array( nForDataApo+1 , 3 )
	For nY := nDataApo To nForDataApo
		If Empty(nY)
			nPos2 := 1
		Else
			nPos2++
		EndIf
		dDataApo := dDtApoIni + nY
		aDataApo[ nPos2 , 01 ] := dDataApo
		aDataApo[ nPos2 , 02 ] := {}
		aDataAPo[ nPos2 , 03 ] := {}
		IF ( nPos := aScan( aArrayMain , { |x| x[nPosDataApo] == dDataApo } ) ) > 0
			For nX := nPos To nArray
				IF aArrayMain[ nX , nPosDataApo ] == dDataApo
					aAdd( aDataApo[ nPos2 , 02 ] , aClone( aArrayMain[ nX ] ) )
				Else
					Exit
				EndIF
			Next nX
		EndIF
		IF ( nPos := aScan( aArrayAnt ,	{ |x| x[nPosDataApo] == dDataApo } ) ) > 0
			For nX := nPos To nArrayAnt
				IF aArrayAnt[ nX , nPosDataApo ] == dDataApo
					aAdd( aDataApo[ nPos2 , 03 ] , aClone( aArrayAnt[ nX ] ) )
				Else
					Exit	
				EndIF
			Next nX
		EndIF
	Next nY

	bAsc :=	{ |x|	x[01] == aLastApo[nX,01] .and. ;	//Data da Geracao
					x[02] == aLastApo[nX,02] .and. ;	//Codigo do Evento
					x[04] == aLastApo[nX,04] .and. ;	//Centro de Custo
					x[05] == aLastApo[nX,05] 	   ;	//Tipo de Marcacao
			 }

	For nY := nDataAPo To nForDataApo
		If Empty(nY)
			nPos2 := 1
		Else
			nPos2++
		EndIf
		dDataApo := dDataApo + nY	
		IF fCompArray( aDataApo[ nPos2 , 02 ] , aDataApo[ nPos2 , 03 ] )
			IF( nPos := aScan( aTabCalend , { |x| x[CALEND_POS_DATA_APO] == aDataApo[ nPos2 , 01 ] .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0
				IF ( nPos1 := aScan( aLastApo , { |x| x[01] == aTabCalend[ nPos , CALEND_POS_DATA ] } ) ) > 0
					For nX := nPos1 To nFornX
						IF aLastApo[ nX , 01 ] == aTabCalend[ nPos , CALEND_POS_DATA ] .and. aScan( aResult , bAsc ) == 0
							aAdd( aResult , aClone( aLastApo[ nX ] ) )
						Else
							Exit
						EndIF
					Next nX
				EndIF
			EndIF
		EndIF
	Next nY

	aSort( aResult ,,, bSrt  )

EndIF
	
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PutFlagMarc ³ Autor ³Marinaldo de Jesus    ³ Data ³01/08/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Setar o Flag de Marcacao Apontada                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PutFlagMarc( aArrayMain , aMarcacoes )                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aArrayMain  -> Array com a Estrutura do Acols contendo  Todas³
³          ³              Marcacoes do Funcionario                       ³
³          ³aMarcacoes -> Array utilzado para o Apontamento              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function PutFlagMarc( aArrayMain , aMarcacoes )

Local nArray		:= 0
Local nForArray		:= Len( aArrayMain )
Local nPos			:= 0
Local nPosData		:= GdFieldPos("P8_DATA") 
Local nPosHora		:= GdFieldPos("P8_HORA")
Local nPosDataApo	:= GdFieldPos("P8_DATAAPO")
Local nPosAponta	:= GdFieldPos("P8_APONTA")
Local nPosTpMarc	:= GdFieldPos("P8_TPMARCA")

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Carrega o Flag de Apontamento nas Marcacoes                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
For nArray := 1 To nForArray
	IF ( nPos := aScan( aMarcacoes , { |x|	x[AMARC_DATA]	== aArrayMain[ nArray , nPosData  ] .and.	;
				 							x[AMARC_HORA]	== aArrayMain[ nArray , nPosHora  ] .and.	;
											x[AMARC_DATAAPO] == aArrayMain[ nArray , nPosDataApo ]		;
							 		  };
					   );
		) > 0
		aArrayMain[ nArray , nPosAponta ] := aMarcacoes[ nPos , AMARC_APONTA	]
		aArrayMain[ nArray , nPosTpMarc ] := aMarcacoes[ nPos , AMARC_TIPOMARC	]
	EndIF
Next nArray

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetCalendListBox ³Autor³Marinaldo de Jesus   ³Data³12/11/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retornar Array com Calendario que sera Utilizado no ListBox  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetCalendListBox(@aListBox,aTabCalend,aSintetico)            ³ 
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aListBox   -> Array que sera Utilizado no ListBox contendo  o³
³          ³              Calendario do Funcionario                      ³
³          ³aTabCalend -> Calendario de Marcacoes do Funcionario         ³
³          ³aSintetico -> Array Sem Linhas Repetidas					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA280/PONA240                                              ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GetCalendListBox( aListBox , aTabCalend , aSintetico , lCalendFunc, aAdicLeg )

Local aBmp			:= {}
Local aLinhaCalend  := {} 
Local cFilSPA		:= ""
Local cOrdem		:= ""
Local cOrdAntAdm	:= ""
Local cSpaceExce	:= Space( Len( SP2->P2_MOTIVO ) )
Local cSpaceDscAfa	:= Space( 25 )
Local lRet			:= .T.
Local lOrdemRepete	:= ( aSintetico == NIL )
Local nX			:= 0
Local nLenX			:= 0

DEFAULT	aSintetico	:= {}
DEFAULT lCalendFunc	:= .T.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define a Filial do SPA                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cFilSPA := xFilial( "SPA" , SRA->RA_FILIAL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega Array com as Legendas de Cores                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
GetLegendCalend(@aBmp,aAdicLeg)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta o ListBox de Acordo com o Calendario de Marcacoes     ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nLenX	 	:= Len( aTabCalend )
aListBox 	:= {}

For nX := 1 To nLenX
	IF (;
			(;
				( aTabCalend[ nX , CALEND_POS_DATA ] >= fDtaAdmis() ) .or.;
				!( lCalendFunc ) .and. ;
			 	( cOrdAntAdm != aTabCalend[ nX , CALEND_POS_ORDEM ] ) ;
			 );	
		)	 
	  
	    /*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	    ³ Posiciona da Regra de Apontamento do Funcionario de   Acordo³
	    ³com o Calendario de Marcacoes								  ³
	    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lCalendFunc )
			SPA->( MsSeek( cFilSPA + aTabCalend[ nX , CALEND_POS_REGRA ] , .F. ) )
		Else
			PutFileInEof("SPA")
		EndIF	
	    /*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	    ³ Atualiza o aListBox com as Informacoes do Calendario		  ³
	    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	  	
	  	/*
		 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		 ³Carrega os Elementos do Calendario						   ³
		 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	  	 aLinhaCalend := Array( ELEMENTOS_DO_CALENDARIO  ) 
	   	
		
		 aLinhaCalend[  CALEND_ELEM_BITMAP				 ] := Pn230BitMaps(	aBmp										,;
																			aTabCalend[ nX , CALEND_POS_ORDEM		]	,;
																			aTabCalend[ nX , CALEND_POS_TIPO_DIA	]	,;
																			aTabCalend[ nX , CALEND_POS_EXCECAO		]	,;
																			aTabCalend[ nX , CALEND_POS_FERIADO		]	,;
																			SPA->PA_FERIADO						 		 ;
																  )
																  																									//BitMap
	   	aLinhaCalend[  CALEND_ELEM_DATA				     ] := aTabCalend[ nX , CALEND_POS_DATA ]																				//Data
		aLinhaCalend[  CALEND_ELEM_DIA_SEMANA			 ] := DiaSemana( aTabCalend[ nX , CALEND_POS_DATA ]     )																//Dia Semana
    	aLinhaCalend[  CALEND_ELEM_HORA				 	 ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_HORA ] , "@R 99.99" ), " ","0")									//Hora
    	aLinhaCalend[  CALEND_ELEM_TIPO_MARCACAO		 ] := aTabCalend[ nX , CALEND_POS_TIPO_MARC ] + " - " + GetDescMarc( aTabCalend[ nX , CALEND_POS_TIPO_MARC ] )			//Tipo Marcacao
		aLinhaCalend[  CALEND_ELEM_TURNO				 ] := aTabCalend[ nX , CALEND_POS_TURNO ]																				//Turno
    	aLinhaCalend[  CALEND_ELEM_SEQUENCIA			 ] := aTabCalend[ nX , CALEND_POS_SEQ_TURNO ]																			//Sequencia
		aLinhaCalend[  CALEND_ELEM_ORDEM				 ] := aTabCalend[ nX , CALEND_POS_ORDEM ]																				//Ordem
		aLinhaCalend[  CALEND_ELEM_REGRA				 ] := aTabCalend[ nX , CALEND_POS_REGRA ]																				//Regra de Apontamento
		aLinhaCalend[  CALEND_ELEM_CENTRO_DE_CUSTO 	 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_CC 	  ]),SRA->RA_CC		,aTabCalend[ nX , CALEND_POS_CC 	 ])				//Centro de Custo
		aLinhaCalend[  CALEND_ELEM_FUNCAO 			 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_CODFUNC ]),SRA->RA_CODFUNC,aTabCalend[ nX , CALEND_POS_CODFUNC  ])				//Funcao
		aLinhaCalend[  CALEND_ELEM_DEPTO 			 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_DEPTO  ]),SRA->RA_DEPTO	,aTabCalend[ nX , CALEND_POS_DEPTO   ])				//Depto
		aLinhaCalend[  CALEND_ELEM_POSTO			 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_POSTO  ]),SRA->RA_POSTO	,aTabCalend[ nX , CALEND_POS_POSTO   ])				//Posto
		aLinhaCalend[  CALEND_ELEM_PROCESSO 		 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_PROCESSO ]),SRA->RA_PROCES	,aTabCalend[ nX , CALEND_POS_PROCESSO  ])				//Processo
		aLinhaCalend[  CALEND_ELEM_PERIODO			 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_PERIODO    ]),""				,aTabCalend[ nX , CALEND_POS_PERIODO ])					//Periodo
		aLinhaCalend[  CALEND_ELEM_ROTEIRO 			 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_ROTEIRO     ]),""				,aTabCalend[ nX , CALEND_POS_ROTEIRO  ])					//Roteiro
		aLinhaCalend[  CALEND_ELEM_NUM_PAGTO		 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_NUM_PAGTO ]),""				,aTabCalend[ nX , CALEND_POS_NUM_PAGTO  ])				//Num. Pagto
 
		IF aTabCalend[ nX , CALEND_POS_TIPO_MARC ] == "1E"
			aLinhaCalend[ CALEND_ELEM_DATA_LIMITE 		 ] := Dtoc( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO , 01] )															//Data Limite
			aLinhaCalend[ CALEND_ELEM_HORA_LIMITE 	     ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO, 02 ] , "@R 99.99" )," ","0")							//Hora Limite
    	ElseIF aTabCalend[ nX , CALEND_POS_TIPO_MARC 	 ] != "1E" .and. !Empty(aTabCalend[ nX , CALEND_POS_LIM_MARCACAO , 01])
			aLinhaCalend[ CALEND_ELEM_DATA_LIMITE 	     ] := Dtoc( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO , 01] )															//Data Limite
			aLinhaCalend[ CALEND_ELEM_HORA_LIMITE 	     ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO, 02 ] , "@R 99.99" )," ","0")							//Hora Limite
    	Else
			aLinhaCalend[ CALEND_ELEM_DATA_LIMITE 	     ] := ""
			aLinhaCalend[ CALEND_ELEM_HORA_LIMITE 	     ] := ""
		EndIF
	
		aLinhaCalend[ CALEND_ELEM_HORAS_TRABALHADAS	 	 ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_HRS_TRABA ] , "@R 99.99" ), " ","0")								//Horas Trabalhadas
		aLinhaCalend[ CALEND_ELEM_HORAS_INTERVALO		 ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_HRS_INTER ] , "@R 99.99" ), " ","0")								//Horas de Intervalo
		aLinhaCalend[ CALEND_ELEM_EXCECAO				 ] := IF( Empty(aTabCalend[ nX , CALEND_POS_MOT_EXECAO ]) , cSpaceExce , aTabCalend[ nX , CALEND_POS_MOT_EXECAO ] )		//Excecao
		aLinhaCalend[ CALEND_ELEM_AFASTADO				 ] := IF( !aTabCalend[ nX , CALEND_POS_AFAST ] , STR0076 , STR0075 )													//Afastado - Nao###Sim
		aLinhaCalend[ CALEND_ELEM_DESC_AFASTAMENTO		 ] := IF( !aTabCalend[ nX , CALEND_POS_AFAST ] , cSpaceDscAfa , fDescAfast( aTabCalend[ nX , CALEND_POS_TIP_AFAST ] ) )	//Descricao do Afastamento
		aLinhaCalend[ CALEND_ELEM_DATA_APO				 ] := aTabCalend[ nX , CALEND_POS_DATA_APO ]		
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Adiciona o Elemento ao aListBox							  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aAdd( aListBox , aClone( aLinhaCalend ) )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Se Nao Deve Existir Ordens Repetidas						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    	IF !( lOrdemRepete )
		    IF !( cOrdem == aLinhaCalend[ CALEND_ELEM_ORDEM ] )
				cOrdem := aLinhaCalend[ CALEND_ELEM_ORDEM ]
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Guarda no ultimo Elemento do Calend Sintetico a referencia  a³
				³a linha do Calendario completo 							  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				aAdd( aLinhaCalend , Len(aListBox) )
				aAdd( aSintetico , aClone( aLinhaCalend ) )
            EndIF
        EndIF
    Else                                                                                        
    	cOrdAntAdm := aTabCalend[ nX , CALEND_POS_ORDEM ]
    EndIF
Next nX
    
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Quando aListBox estiver vazio Admissao Maior que o   Periodo³
³ de Apontamento.                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( lRet := !Empty( aListBox ) )
	IF ( lCalendFunc )
		Help(" ",1,"PONA230ADM")
	EndIF
EndIF

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ListBoxCalend³ Autor ³Marinaldo de Jesus   ³ Data ³29/01/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Montar ListBox do Calendario de Marcacoes                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³ListBoxCalend( aCords , oDlg , aListBox , oLBox , bChange  ) ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aCords 		-> Array contendo as Coordenadas da Janela       ³
³          ³oDlg    	-> Objeto de Dialogo onde sera criado o LisBox 	 ³
³          ³aListBox    -> Array com os Conteudos do ListBox             ³
³          ³oListBox    -> Objeto ListBox a Ser Passado Por Referencia 	 ³
³          ³bChange     -> Bloco a Ser Executado                       	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230 E PONA040                                            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function ListBoxCalend( aCords , oDlg , aListBox , oListBox , bChange  )
Local aCabec	:= {}
Local aColSizes	:= {}

DEFAULT aCords			:= {030,005,310,140}
DEFAULT aListBox		:= {}
DEFAULT bChange			:= { || .T. }

aCabec:= {;							 
									 ""									 								,;	//01 - BitMap
									 OemToAnsi( STR0012 )									 			,;	//02 - "Data Ref."
									 OemToAnsi( STR0024 )									 			,;	//03 - "Dia Sem."
									 OemToAnsi( STR0013 )									 			,;	//04 - "Hora"
									 OemToAnsi( STR0014 )									 			,;	//05 - "Marca‡„o Tipo"
									 OemToAnsi( STR0015 )									 			,;	//06 - "Turno" 
									 OemToAnsi( STR0016 )									 			,;	//07 - "Seq."
									 OemToAnsi( STR0017 )									 			,;	//08 - "Ordem"
									 OemToAnsi( STR0070 )									 			,;	//09 - "Regra"
									 OemToAnsi( STR0018 )									 			,;	//10 - "Centro de Custo"
									 OemToAnsi( STR0019 )									 			,;	//11 - "Data Lim."
									 OemToAnsi( STR0020 )								 	  			,;	//12 - "Hora Lim."
									 OemToAnsi( STR0061 )								 	  			,;	//13 - "Hrs.Trab"
									 OemToAnsi( STR0062 )								 	  			,;	//14 - "Hrs.Inter"
									 OemToAnsi( STR0023 )								 	  			,;	//15 - "Exce‡„o"
									 OemToAnsi( STR0074 )								 	  			,;	//16 - "Afastado"
									 OemToAnsi( STR0077 )								 	  			,;	//17 - "Motivo do Afastamento"
									 OemToAnsi( STR0170 )									 			,;	//18 - "Funcao"
									 OemToAnsi( STR0181 )												,;  //19 - "Depto"
									 OemToAnsi( STR0175 )												,;  //20 - "Posto"
									 OemToAnsi( STR0174 )								 	  			,;	//21 - "Processo"
									 OemToAnsi( STR0176 )								 	  			,;	//22 - "Periodo"
									 OemToAnsi( STR0178 )								 	  			,;	//23 - "Roteiro"
									 OemToAnsi( STR0177 )								 	  			;	//24 - "Num. Pagto"
		}

aColSizes:={;
									 GetTextWidth(0,Replicate("I",04))							  		,;	//01 - BitMap
									 GetTextWidth(0,Replicate("B",Len(Dtoc(dDatabase))))	 			,;	//02 - "Data Ref."
									 GetTextWidth(0,Replicate("B",10))						 			,;	//03 - "Dia Sem."
									 GetTextWidth(0,Replicate("B",05))						 			,;	//04 - "Hora"
									 GetTextWidth(0,Replicate("B",10))						 			,;	//05 - "Marca‡„o Tipo"
									 GetTextWidth(0,Replicate("B",Max(Len(SP8->P8_TURNO),05)))			,;	//06 - "Turno" 
									 GetTextWidth(0,Replicate("B",Max(Len(SRA->RA_SEQTURN),05)))		,;	//07 - "Seq."
									 GetTextWidth(0,Replicate("B",Max(Len(SP8->P8_ORDEM),05)))			,;	//08 - "Ordem"
									 GetTextWidth(0,Replicate("B",Max(Len(SRA->RA_REGRA),05)))			,;	//09 - "Regra"
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_CC)))					,;	//10 - "Centro de Custo"
									 GetTextWidth(0,Replicate("B",Max(Len(Dtoc(dDatabase)),09)))		,;	//11 - "Data Lim."
									 GetTextWidth(0,Replicate("B",12))					 	  			,;	//12 - "Hora Lim."
									 GetTextWidth(0,Replicate("B",12))					 	  			,;	//13 - "Hrs.Trab"
									 GetTextWidth(0,Replicate("B",12))					 	  			,;	//14 - "Hrs.Inter"
									 GetTextWidth(0,Replicate("B",Len(SP2->P2_MOTIVO)))				,;	//15 - "Exce‡„o"
									 GetTextWidth(0,Replicate("B",05))									,;	//16 - "Afastado"
									 GetTextWidth(0,Replicate("B",25))			 						,;	//17 - "Motivo do Afastamento"
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_CODFUNC)))				,;	//18 - "Funcao"	
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_DEPTO)))					,;	//19 - "Depto"	
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_POSTO)))					,;	//20 - "Posto"
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_PROCES)))				,;	//21 - "Processo"
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_PERIODO)))				,;	//22 - "Periodo"
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_ROTEIR)))				,;	//23 - "Roteiro"
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_NUMPAG)))				;	//24 - "Num. Pagto"
			}

												 
oListBox := TWBrowse():New( aCords[1],aCords[2],aCords[3],aCords[4],,aCabec,aColSizes,oDlg,,,,bChange,,,,,,,,.F.,,.T.,,.F.,,,)												 

oListBox:nFreeze := 2
oListBox:SetArray(aListBox)
oListBox:bLine:={ || LineLstBox( oListBox ) }

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pona230Locks    ³Autor³Mauricio MR         ³ Data ³14/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Lancamentos de Marcacoes /Apont/Abonos		         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pona230Locks( nOpc , cAlias, aRecnos )

Local lLocks	:= .T.
Local aRecAux	:= {}

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Visualizacao             	 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( nOpc == 2 ) 
		Break
	EndIF

	aEval( aRecnos , { |x| IF( !Empty( x ) , aAdd( aRecAux , x ) , NIL ) } )

	IF !( lLocks := WhileNoLock( cAlias , aRecAux , { SRA->RA_FILIAL + SRA->RA_MAT } , 1 , 1 , .T. , NIL ) )
		Break
	EndIF

End Sequence

Return( lLocks )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³pn230MontaGetDados ³ Autor ³ Leandro Drumond       ³ Data ³30/10/2007							   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Montar a GetDados 																				   |
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³
³Sintaxe   ³pn230MontaGetDados(aRecno,aNotFIelds,nOpcX,nOpcA,nPosFlag,nPosApon,oDlg,oGet,lEntrada)             |
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA230                                                            							       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function pn230MontaGetDados(aRecno,aNotFIelds,nOpcX,nOpcA,nPosFlag,nPosApon,oDlg,oGet,lPriVez)

Local nX				:= 0
Local nLenX				:= 0
Local nCnt		  		:= 0
Local lRet				:= .T.

DEFAULT lPriVez 	:= .F.

// Inicializacao das variaveis private
aTabCalend			:= {}
aArrayMain			:= {}
aLastApo			:= {}
aElem				:= {}
aVirtual			:= {}
aVisual				:= {}
aMarcacoes			:= {}
aResult				:= {}
aRecsMarcAutDele	:= {}
aRecno				:= {}

Begin Sequence
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Obtem Periodo de Apontamento conforme o Processo do  ³
	³ funcionario										   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/ 
	cProcesso  	       := SRA->RA_PROCES
	oPeriodo:cProcesso := cProcesso
  	  		
    If !(fGetPeriodo( oPeriodo , lPriVez))
    	lRet := .F.
    	Break
    EndIf
    
  	cRot	 		:= "PON"
	cPeriodo  		:= oPeriodo:cPeriodo
	cNumPagto 		:= oPeriodo:cNumPagto
	//Se exibicao for por periodo
	If lPeriodo
		dPerIni    		:= oPeriodo:dDataIni
		dPerFim    		:= oPeriodo:dDataFim
		cDatas			:= ( DTOC(dPerIni) + " - "  + DTOC(dPerFim))
	Else
		dPerIni           := aDatas[1]
		dPerFim			  := aDatas[2]
		dDataIni		  := dPerIni
		dDataFim		  := dPerFim
		dAntIni 		  := oPeriodo:dDataIni
		dAntFim			  := oPeriodo:dDataFim
		oPeriodo:dDataIni := dPerIni
		oPeriodo:dDataFim := dPerFim
	EndIf
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas de Marcacoes do Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !(;
			Pona230Locks( nOpcX , IF( lPona240 , "SPG" , "SP8" ) , {} );
			.and.;
	   		Pona230Locks( nOpcX , IF( lPona240 , "SPH" , "SPC" ) , {} );
	   		.and.;
	   		Pona230Locks( nOpcX , "SPK" , {} );
	   	)	
    	lRet := .F.
    	Break
    EndIF    
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa as Statics dos Objetos Bmp e Carrega os BitMaps³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230BitMaps()
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa aColsStatic a Cada Funcionario                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230GetaCols()
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega os Apontamentos Anteriores                          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aLastApo := GetLastApo( dPerIni , dPerFim , IF( lPona240 , "SPH" , "SPC" ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega a String de Periodo de Apontamento                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cPerAponta := ( Dtos( dPerIni ) + Dtos( dPerFim ) )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se existe algum dado no arquivo                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nCnt := Pn230aCols(NIL,NIL,NIL,nOpcX,NIL,.T.) ) > 0  .and. nOpcX == 3	//--Quando Inclusao e existir Registro
		Help(" ",1,"Pn230Exist")
			lRet := .F.
			Break
	ElseIF ( nCnt == -1 )														//Nao Foi Possivel Criar o Calendario de Marcacoes
		lRet := .F.
		Break
	ElseIF ( nCnt == 0 .and. nOpcX != 3 .and. Empty( aLastApo ) )				//--Quando Nao for Inclusao e nao existir Registro
		Help(" ",1,"Pn230NoLan")
			lRet := .F.
			Break
	EndIF
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o cabecalho                                            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aHeader := GdMontaHeader( @nUsado , @aVirtual , @aVisual , IF( lPona240 , "SPG" , "SP8" ) , aNotFields, .F., .T., .T. )
	// Criacao dos dois elementos para o uso no WalkThru
	ADHeadRec(IF( lPona240 , "SPG" , "SP8" ),aHeader)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Quando for Inclusao criar com 1 elemento					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nCnt 		:= IF(nOpcX == 3,1,nCnt)
	nSvUsado	:= nUsado+IF(nOpcX==2.or.nOpcX==5,2,3)		//0,1)
	aArrayMain	:= Array(nCnt,nSvUsado)
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gerar o array aCols com os Todos os Apontamentos            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nCnt   := 0 ; nUsado := 0
	Pn230Acols(@aArrayMain,@aRecno,aNotFields,nOpcX)
	aArrayClone := aClone(aArrayMain)
    
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Houve Geracao de Marcacoes Automaticas e  Altera³
	³ Flag para Forcar o Reapontamento e a Remontagem do Resultado³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF lGeraAuto
		nPosFlag := GdFieldPos(cPrefix+"FLAG")
		nPosApon := GdFieldPos(cPrefix+"APONTA")
		aEval( @aArrayClone , { |x| IF( x[ nPosFlag ] == "A" .and. x[ nPosApon ] != "S" , x[ nPosFlag ] := "M" , NIL ) } )
	EndIF
	    
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gera aCols com 1 Elemento para a GetDados                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230Acols(@aCols,,aNotFields,nOpcX,.T.)
	    
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o aListBox de Acordo com o Calendario de Marcacoes    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !GetCalendListBox( @aListBox , aTabCalend )
		Break
	EndIF
   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa nOpcA											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nOpcA := 0

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define os Campos Alteraveis								  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    aAdd( aVisual , cPrefix+"ORDEM"	  )
    aAdd( aVisual , cPrefix+"PAPONTA" )
	nLenX := Len( aHeader )
    For nX := 1 To nLenX
    	IF (;
    			aScan( aVisual  , aHeader[ nX , 02 ] ) == 0 .and. ;
    			aScan( aVirtual , aHeader[ nX , 02 ] ) == 0 	  ;
    		)
    		aAdd( aGdAlter , aHeader[ nX , 02 ] )
    	EndIF		
    Next nX

	// atualiza a getdados
	If !(oGet == nil)
		Pn230GetaCols(	@aCols,@aArrayMain,aNotFields,@oDlg,@oGet,nOpcX )
		oGet:Refresh()
	EndIf	

	If !Empty(RCH->RCH_ROTEIR)
		cRoteiro := RCH->RCH_ROTEIR
	EndIf  
	
End Sequence
	
Return (lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao  Pn230VerGrava  ºAutor  ³Leandro Drumond     º Data ³  30/10/07   º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.   ³ Caso exista alteracao nas marcacoes ou apontamentos, pergunta  º±±
±±º		   |se deseja grava-las.	        								º±±
±±ÌÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso     ³ PONA230                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function Pn230VerGrava(nOpcX,oGet,aRecno,oDlg,lApaga)

Local aNotFields := {"P8_FILIAL","P8_MAT","PG_FILIAL","PG_MAT"}

DEFAULT lApaga := .T.

Pn230GetaCols(	@aCols,@aArrayMain,aNotFields,@oDlg,@oGet,nOpcX )

If !fCompArray(aArrayMain,aArrayClone) .or. (!Empty( aResult ) .and. !fCompArray(aResult,aLastApo))
	If !MsgYesNo( OemToAnsi( STR0179 ) )   //"Abandona Alteracoes Realizadas?"
		IF ( nOpcX == 3 ) .or. ( nOpcX == 4 )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Prepara e Aponta as Marcacoes                                 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( !( lPona240 ) .and. ( cApoCla == "S" ) )
				Pn230Aponta()
			EndIF
	        Begin Transaction
	        	/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Seta o Flag de Marcacoes Apontadas                            ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( !( lPona240 ) .and. ( cApoCla == "S" ) )
					PutFlagMarc( @aArrayMain , aMarcacoes )
				EndIf   
				
	            /*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Grava as Marcacoes                                            ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	        	Pn230Grava(aArrayMain,aRecno,aHeader,nOpcX,@oGet,@oDlg)
		       	/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Processa Gatilhos                                             ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		        EvalTrigger()
			End Transaction
		EndIF
	EndIF
EndIF

FreeLocks( IF( lPona240 , "SPH" , "SPC" ) , NIL , .T. ) 
FreeLocks( IF( lPona240 , "SPG" , "SP8" ) , NIL , .T. )
FreeLocks( "SPK" , NIL , .T. )

If lApaga
	cPeriodo  := ""
	cNumPagto := ""
	oPeriodo:cPeriodo := cPeriodo
	oPeriodo:cNumPagto := cNumPagto

EndIf

Return ( NIL )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ PonChangePer	³Autor³Equipe Advanced RH ³ Data ³16/11/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Controla a alteracao da chave de busca de Periodos 		    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA040                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function PonChangePer()

Local lDaRefresh := .F.

DEFAULT cRot := "PON"

If ( ( cProcesso + cPeriodo + cNumPagto + cRot ) <> ( cAntProcesso + cAntPeriodo + cAntNumPagto + cAntRoteiro ) )
	
	If cPeriodo <> cAntPeriodo .and. cNumPagto == cAntNumPagto
		cAntNumPagto := cNumPagto
		cNumPagto    := ""
	EndIf
    
	oPeriodo:cPeriodo  := cPeriodo
	oPeriodo:cProcesso := cProcesso
	oPeriodo:cNumPagto := cNumPagto
	oPeriodo:cRoteiro  := cRot
   	lDaRefresh	 	   := .T.
Else
	If !lPeriodo
		If ( ( dDataIni <> dPerIni ) .or. ( dDataFim <> dPerFim ) )
			oPeriodo:cPeriodo  := cPeriodo
			oPeriodo:cProcesso := cProcesso
			oPeriodo:cNumPagto := cNumPagto
			oPeriodo:cRoteiro := cRot
		   	lDaRefresh	 := .T.
		   	dPerIni := dDataIni
		   	dPerFim := dDataFim
		   	aDatas := { dPerIni , dPerFim }
		 EndIf
	EndIf	
Endif

Return (lDaRefresh)  


/*/   
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fGetPeriodo   ³ Autor ³ Equipe Advanced RH³ Data ³26/11/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Obtem o periodo de apontamento							    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Exemplo   ³oPeriodo:=RHPERIODO:New()       //Criacao do Obj            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fGetPeriodo( oPeriodo )											    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fGetPeriodo( oPeriodo, lPriVez)

Local aArea 		:= GetArea()
Local lRet 			:= .T.

DEFAULT lPriVez := .F.

Begin Sequence      
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem Informacoes do Periodo Solicitado					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	//Se não for acumulado, irá sempre verificar períodos vazios
	If !lPona240
		oPeriodo:PerSel()
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Mostra Advertencia de Periodo Fechado p/ Manutencao de Perio ³
		³dos Abertos.												  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
		//Se lpona240 for .f., somente podera ser visualizado periodos que estejam abertos (rch_dtfecha vazio) 		
		If oPeriodo:lFechado 
			MsgInfo( OemToAnsi( oPeriodo:cMsgClosedPer ) )    //"Período de Apontamento Fechado. Selecione ou informe um Período Aberto."
			lRet		:= .F.
			Break
		EndIf	 
	Else
		If lPriVez
			oPeriodo:PerUltFech()
		Else		
			oPeriodo:GetPer("!EMPTY(RCH_DTFECH)")
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Mostra Advertencia de Periodo Aberto para Manutencao de Perio³
		³dos Fechados.												  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
	 	If oPeriodo:lAberto
			MsgInfo( OemToAnsi( oPeriodo:cMsgOpenedPer ) )    //"Período de Apontamento Aberto. Selecione ou informe um Período Fechado."
	 		lRet		:= .F.
	 		Break
	 	EndIf
	EndIf

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Mostra Advertencia para Periodo Nao Encontrado				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If !oPeriodo:lFound
 		lRet		:= .F. 
		MsgInfo( OemToAnsi( oPeriodo:cMsgNotFoundPer ) )	//"Período de Apontamento Não Encontrado."
 		Break
	Endif	
	
End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Recupera Valores do Periodo antes da Troca de Periodo 		  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
If !lRet
	oPeriodo:RollBack()
Endif

RestArea( aArea )

Return( lRet )


/*/   
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    |Pn230MntGd    ³ Autor ³ Leandro Drumond   ³ Data ³14/12/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³monta a get e caso exista problema, monta novamente com 	|
|		   |com dados anteriores										|
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230MontaGd(cAlias, nOpcX, aColsRec, aAPOCols)				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA230                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn230MntGd(aRecno,aNotFIelds,nOpcX,nOpcA,nPosFlag,nPosApon,oDlg,oGet,lPriVez)

If !pn230MontaGetDados(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,lPriVez)
	SRA->(DbGoto(nRegAnt)) 
	cPeriodo  := ""
	cNumPagto := ""
	pn230MontaGetDados(@aRecno,aNotFIelds,nOpcX,@nOpcA,@nPosFlag,@nPosApon,@oDlg,@oGet,.T.)
Else
	cAntProcesso	:= cProcesso
	cAntPeriodo		:= cPeriodo
	cAntNumPagto	:= cNumPagto
	cAntRoteiro     := cRot
EndIf

Return(NIL)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ P8DataApoInit³Autor³Equipe Advanced RH ³ Data ³31/01/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador padrao do campo P8_DATAAPO				  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8DataApoInit()											  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³dDataApo												  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function P8DataApoInit()

Local dDataApo := Ctod('//')

If !( Type("lPona180") <> "U" )
	If ( Type("aTabcalend") <> "U" )
		If !( Type("n") <> "U" ) .or. Empty(n)
			n := 1
		EndIf
		//Sera utilizado caso chamada seja do PONA280, linha selecionada na ListBox
		If ( ( Type("oLBox") <> "U" ) .and. IsInCallStack("PONA280") )
			n := olBox:nAt                           
			dDataApo := aTabCalend[n,CALEND_POS_DATA_APO]
		Else
		   dDataApo := CalendRetCpo( "P8_DATAAPO",,,"P8_"  )
		EndIf
	Else
	   //-- Obtem a Data Corrente do Calendario
	   dDataApo := CalendRetCpo( "P8_DATAAPO",,,"P8_"  )
	EndIf
Else
   dDataApo := aCols1[n,3,19]
EndIF

Return( dDataApo )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ PGDataApoInit³Autor³Equipe Advanced RH ³ Data ³31/01/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador padrao do campo PG_DATAAPO				  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PGDataApoInit()											  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³dDataApo												  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function PGDataApoInit()

Local dDataApo := Ctod('//')
                                   
If !( Type("lPona180") <> "U" )
	If ( Type("aTabcalend") <> "U" )  
		If !( Type("n") <> "U" ) .or. Empty(n)
			n := 1
		EndIf
		//Sera utilizado caso chamada seja do PONA280, linha selecionada na ListBox
		If ( ( Type("oLBox") <> "U" ) .and. IsInCallStack("PONA280") )
			n := olBox:nAt
			dDataApo := aTabCalend[n,CALEND_POS_DATA_APO]			
		Else
			dDataApo := CalendRetCpo( "PG_DATAAPO",,,"PG_"  )		
		EndIf
		
	Else
	   //-- Obtem a Data Corrente do Calendario
	   dDataApo := CalendRetCpo( "PG_DATAAPO",,,"PG_"  )
	EndIf
Else                     
   dDataApo := aCols1[n,3,19]
EndIF

Return( dDataApo )   

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Almeida     ³ Data ³09/01/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MenuDef()

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Array contendo as Rotinas a executar do programa      ³
	³ ----------- Elementos contidos por dimensao ------------     ³
	³ 1. Nome a aparecer no cabecalho                              ³
	³ 2. Nome da Rotina associada                                  ³
	³ 3. Usado pela rotina                                         ³
	³ 4. Tipo de Transa‡„o a ser efetuada                          ³
	³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	³    2 - Simplesmente Mostra os Campos                         ³
	³    3 - Inclui registros no Bancos de Dados                   ³
	³    4 - Altera o registro corrente                            ³
	³    5 - Remove o registro corrente do Banco de Dados          ³
	³    6 - Legenda                                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local aRotina := {}	

		aRotina := {	{ STR0002 , "PesqBrw"	 	, 0 , 1 , ,.F.},;	//"Pesquisar"
						{ STR0003 , "Pn230Atu" 		, 0 , 2 },;			//"Visualizar"
						{ STR0004 , "Pn230Atu" 		, 0 , 4 },;			//"Incluir"
						{ STR0005 , "Pn230Atu" 		, 0 , 4 },;			//"Alterar"
						{ STR0006 , "Pn230Atu" 		, 0 , 5 },;			//"Excluir"
						{ STR0007 , "gpLegend" 		, 0 , 6, ,.F. };	//"Legenda"
					}
Return aRotina
