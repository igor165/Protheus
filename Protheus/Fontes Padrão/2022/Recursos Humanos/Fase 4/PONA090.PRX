#INCLUDE "PONA090.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"
/*   
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONA090  ³ Autor ³ Fernando Joly Siquini ³ Data ³ 05/05/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Cadastro de Exce‡oes.                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA090()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Marinaldo   ³05/03/01³Melhor³Alteracao na Funcao fPN090TdOk(), foi   in³±± 
±±³            ³--------³------³cluida a Totalizacao dos Campos de Horas e³±± 
±±³            ³--------³------³habilitacao do Campo P2_HRSTRAB.          ³±± 
±±³Marinaldo   ³06/11/01³010922³Tratamento de Troca de Regra de  Apontamen³±±
±±³            ³--------³------³to.    									  ³±±
±±³Marinaldo   ³21/02/02³Acerto³Exclusao da Funcao AcertaSX3() e de  todas³±±
±±³            ³--------³------³as referencias a ela. Essa funcao   estava³±±
±±³            ³--------³------³sendo utilizada para alterar a   validacao³±±
±±³            ³--------³------³de alguns campos no SX3. Considerando  que³±±
±±³            ³--------³------³essas validacoes ja foram incluidas no SX3³±±
±±³            ³--------³------³para a versao 7.10 essa funcao nao     tem³±±
±±³            ³--------³------³mais utilidade							  ³±±
±±³Marinaldo   ³26/07/02³Melhor³Inclusao de Novo Botao para retornar  Hora³±±
±±³            ³--------³------³rios Baseados na Tabela					  ³±±
±±³Marinaldo   ³26/09/03³Acerto³ Alterada fPN090TdOk() para nao   permitir³±±
±±³            ³--------³------³ que o horario termine em uma saida de  in³±±
±±³            ³--------³------³ tervalo								  ³±±
±±³Marinaldo   ³11/02/04³Acerto³Inclusao de nova funcao de validacao  para³±±
±±³            ³--------³------³o campo P2_TIPODIA						  ³±±
±±|Marinaldo   ³29/04/04³Melhor³Melhoria na performance para a montagem da|±± 
±±³            ³--------³------³do SPJ                 					  ³±± 
±±³Mauricio MR ³28/05/04³Acerto³Verificado a Validacao do P2_TIPODIA na   ³±±
±±³            ³001935  ³ QNC  ³confirmacao da rotina.  				  ³±±
±±³Mauricio MR ³16/06/04³Acerto³Verificado a Validacao do P2_TIPODIA na   ³±±
±±³            ³002077  ³ QNC  ³confirmacao da rotina.  				  ³±± 
±±³Luiz Gustavo³21/11/06³Melhor³Inclusao da funcao MenuDef() para versao  ³±±
±±³			   ³--------³------³ 9.12                      				  ³±± 
±±³Marcos Kato ³08/07/08|Acerto|Alterado na funcao SPJExceConPad a atri-  ³±± 
±±³            ³--------³------³buicao da Variavel cPrefRf2 nas duas si-  ³±± 
±±³            ³--------³------³tuacoes possiveis(Utiliza a tabela SPJ ou ³±± 
±±³            ³--------³------³nao). Bops 149644                         ³±± 
±±³Leandro Dr. ³21/12/11³TE5389³Ajuste para pegar o periodo selecionado   ³±±
±±³			   ³--------³------³ quando for informado matricula.		  ³±±
±±³Leandro Dr. ³28/12/11³TEGHX8³Ajuste para nao permitir horarios vazios  ³±±
±±³			   ³--------³------³ se a excecao nao herdar horas da tabela  ³±±
±±³Eduardo Fer. ³13/02/17³MRH-6628³ Retirar referência aos campos listados³±± 
±±³	que não são mais utilizados:P2_JNDADC1/P2_JNDADC2/P2_JNDADC3/P2_JNDADC4³±±
±±³			   ³--------³------³ se a excecao nao herdar horas da tabela  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±± 
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONA090

Local cFiltraSP2				
Local aIndexSP2	:= {}			
Local nPos := 0

Private aButtons := {; 
						{	"S4SB014N"					,;
	    	    			{ || SPJExceConPad(1) }		,;
	        				OemToAnsi( STR0011 )	 	,;	//"Gerar Horas..."
	        				OemToAnsi( STR0019 )	 	 ;	//"Horas"
	            		};
					}
Private bFiltraBrw	:= {|| NIL }	
Private cCalc		:= "SP2"
Private aAcho		:= {}
Private cCadastro	:= OemToAnsi(STR0009 ) // 'Cadastro de Exce‡oes'
Private aRotina		:= MenuDef()
Private oPerAtu		:= RHPERIODO():New()   // Objeto Periodo - periodo atual do funcionario 
Private oPerFch		:= RHPERIODO():New()   // Objeto Periodo - ultimo periodo fechado do funcionario
Private lUseSPJ		:= ( SuperGetMv("MV_USESPJ",NIL,"0")  == "1" )
Private lUseCalFis	:= ( SuperGetMv("MV_CALFIS",NIL,"0")  == "0" )

//Variaveis para gravacao do ID no calendario
Private nRecCal
Private cFilCal
Private dIniCal
Private dFimCal
Private cTpExce
Private lModifica := .F.
Private lGravaNew := .F.
Private lAltFunc  := .F.

Private dDataIni := Ctod("//")
Private dDataFim := Ctod("//")

Private dNewDtIni := Ctod("//")
Private dNewDtFim := Ctod("//")

Private aCposSp2
Private aStrSp2   := SP2->(dbStruct())
Private aCposTela := {}

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se a Validacao dos Modos de Acesso Estiverem OK              ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ValidArqPon()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Seleciona os campos no arquivo SP2                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAcho 	:= fSP2Cpos()
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cFiltraRh := CHKRH("PONA090","SP2","1")
	bFiltraBrw 	:= {|| FilBrowse("SP2",@aIndexSP2,@cFiltraRH) }
	Eval(bFiltraBrw)
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Endereca a funcao de BROWSE                                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	dbSelectArea('SP2')
	dbGoTop()
	mBrowse(6, 1, 22, 75, 'SP2')
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	EndFilBrw("SP2",aIndexSP2)

	dbSelectArea('SP2')
	dbSetOrder(3)

EndIF
	
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fMainExc	 ³Autor ³  Igor Franzoi	       ³ Data ³10/03/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executa as funcoes principais conforme parametro passado	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fMainExc( nOpc )										 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes Por Periodo							 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fMain090( nOpc )

Local nRecAnt 	:= 0
Local nRetDel 	:= 0
Local cFilSP2 	:= xFilial("SP2")
Local lValid	:= .T.
Local aExcecoes := {}

Local bValidInc		:= {||Nil}
Local bLoadData		:= {||Nil}
Local bRecordData	:= {||Nil}
Local bGeraCalend	:= {||Nil}

cFilCal  := cFilSP2
dDataIni := SP2->P2_DATA
dDataFim := SP2->P2_DATAATE

If !Empty(SP2->P2_MAT)
	fLoadPerClo(@oPerFch,'SRA')
EndIf

bValidInc	:= {|| lValid := fPn090Valid(nOpc)  }
bLoadData	:= {|| fLoadSp2(SP2->(Recno()))  }

Begin Transaction

If ( nOpc == 3 )   //Incluir

	bGeraCalend	:= {|| GeraCal090(cFilSP2,M->P2_MAT,aExcecoes,M->P2_DATA,M->P2_DATAATE,nOpc) }
	AxInclui(SP2->(Alias()),SP2->(Recno()),3,aAcho,,aAcho,"fPN090TdOk(3)",,,aButtons,{bLoadData,bValidInc,{||Nil},bGeraCalend})
	
ElseIf ( nOpc == 4 ) //Alterar

	bRecordData := {|| If( lValid, fRecordExc(SP2->(Recno()),M->P2_MAT), Nil ) }
	bGeraCalend	:= {|| GeraCal090(cFilSP2,M->P2_MAT,aExcecoes,M->P2_DATA,M->P2_DATAATE,nOpc) }		
	AxAltera(SP2->(Alias()),SP2->(Recno()),4,aAcho,aAcho,,,"fPN090TdOk(4)",,,aButtons,{bLoadData,bValidInc,bRecordData,bGeraCalend})
	
ElseIf ( nOpc == 5 ) //Excluir

	bValidInc	:= {|| lValid := fPn090Valid(nOpc,@nOpcA)  }
	bRecordData := {|| If( lValid, fRecordExc(SP2->(Recno()),SP2->P2_MAT,nOpc), Nil ) }
	bGeraCalend	:= {|| GeraCal090(cFilSP2,SP2->P2_MAT,aExcecoes,dIniCal,dFimCal,nOpc) }
	AxDeleta(SP2->(Alias()),SP2->(Recno()),5,,aAcho,,{bLoadData,bValidInc,bRecordData,bGeraCalend})
			
EndIf

End Transaction

Return ( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fPn090Valid ³Autor ³  Igor Franzoi	       ³ Data ³29/05/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executa as funcoes principais conforme parametro passado	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fPn090Valid()										 	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Valida a excecao conforme os parametros selecionados		 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fPn090Valid(nOpc,nOpcA)

Local lRet := .T.
Local cFil := ""
Local cMat := ""
Local cTno := ""
Local cCc  := ""

Local dData		:= Ctod("//")
Local dDataAte  := Ctod("//")

If ( nOpc != 5 )

	cFil 	:= M->P2_FILIAL
	cMat 	:= M->P2_MAT
	cTno 	:= M->P2_TURNO
	cCc	 	:= M->P2_CC
	dData	:= M->P2_DATA
	dDataAte:= M->P2_DATAATE

	//Verifica se a excecao foi alterada
	If ( lModifica := fCompSp2(nOpc) )

		//Se existir matricula, valida o ultimo periodo fechado do ponto no SRA
		If !Empty(cMat)
		    	
			If ( nOpc == 3 ) 

				//Carrega o ultimo periodo fechado do ponto para o funcionario			
				fLoadPerClo(@oPerFch,'SRA')
							
				If ( dData <= oPerFch:dDataFim )
					lRet := .F.
					MsgInfo( OemToAnsi(STR0021), OemToAnsi(STR0009) ) //Não é possível alterar exceções que compreendam períodos FECHADOS!				
				EndIf
				
			ElseIf ( nOpc == 4 )
				
				If ( dDataIni == dDataFim .and. dDataIni <= oPerFch:dDataFim )
					lRet := .F.
					MsgInfo( OemToAnsi(STR0021), OemToAnsi(STR0009) ) //Não é possível alterar exceções que compreendam períodos FECHADOS!
				Else
					If ( dDataAte <= oPerFch:dDataFim )
						lRet := .F.
						MsgInfo( OemToAnsi(STR0021), OemToAnsi(STR0009) ) //Não é possível alterar exceções que compreendam períodos FECHADOS!					
			   		Else
						If ( dDataIni > oPerFch:dDataFim )
							lGravaNew := .F.
							lModifica := .F.
						Else
							//Indica se ira gravar nova excecao
							lGravaNew		:= .T.
			
							//Troca datas, p/ gravar excecao atual ate a data do ultimo periodo fechado
							//apos isto sera gerada nova excecao
							dNewDtIni 		:= (oPerFch:dDataFim+1)
							dNewDtFim 		:= M->P2_DATAATE
							//Carrega as variaveis de tela com os valores da SP2
							fReturnSp2()
							M->P2_DATA		:= dDataIni
							M->P2_DATAATE 	:= If( dDataFim > oPerFch:dDataFim, oPerFch:dDataFim, dDataFim )
						EndIf
					EndIf
				EndIf
				
			EndIf
					
		Else
			lGravaNew := .F.
			dNewDtIni := M->P2_DATA
			dNewDtFim := M->P2_DATAATE
		EndIf
	
	EndIf

Else

	cFil 	:= SP2->P2_FILIAL
	cMat 	:= SP2->P2_MAT
	cTno 	:= SP2->P2_TURNO
	cCc	 	:= SP2->P2_CC
	dData	:= SP2->P2_DATA
	dDataAte:= SP2->P2_DATAATE
	
	If !Empty(cMat)
		If ( dDataAte <= oPerFch:dDataFim )
			lRet := .F.
			MsgInfo( OemToAnsi(STR0021), OemToAnsi(STR0009) ) //Não é possível alterar exceções que compreendam períodos FECHADOS!
		Else	
			If ( dData <= oPerFch:dDataFim )
				//nOpcA 	  := 4
				lModifica := .T.
				lGravaNew := .F.
				//Troca datas, p/ gravar excecao atual ate a data do ultimo periodo fechado
				//apos isto sera gerada nova excecao
				dNewDtIni 		:= SP2->P2_DATA
				dNewDtFim 		:= If( dDataFim > oPerFch:dDataFim, oPerFch:dDataFim, dDataFim )
				dIniCal			:= (oPerFch:dDataFim+1)
				dFimCal			:= dDataAte
			Else
				dIniCal			:= dData
				dFimCal			:= dDataAte
			EndIf
		EndIf
	Else
		dIniCal			:= dData
		dFimCal			:= dDataAte	
		lGravaNew := .F.
	EndIf

EndIf

Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fMainExc	 ³Autor ³  Igor Franzoi	       ³ Data ³10/03/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executa as funcoes principais conforme parametro passado	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fMainExc( nOpc )										 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes Por Periodo							 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function GeraCal090( cFilCal, cMat, aExcecoes, dIniCal, dFimCal, nOpc )

Local lRet 		:= .T. 

	SP2->(dbCommit())
	If ( nOpc == 5 .and. !Empty(cMat) .and. lModifica )
		DbRecall()
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Coloca o ponteiro do cursor em estado de espera               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	CursorWait()
	
	//Se diferente, ocorreu inclusao - validar os calendarios registrados
	If lUseCalFis
		//Pega a excecao do dia e grava para o funcionario
		Proc2BarGauge( { || 	fExcUpdRf6( aExcecoes, cFilCal, cMat, dIniCal, dFimCal , nOpc , STR0023) } , STR0022 , NIL , '' , .F. , .T. , .F. )
	EndIf
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Restaura o ponteiro do cursor                                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	CursorArrow()
	
Return (lRet)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fRecordExc  ³Autor ³  Igor Franzoi	       ³ Data ³29/05/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Grava a nova excecao 										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fRecordExc()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Valida a excecao conforme os parametros selecionados		 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fRecordExc(nRecno, cMat, nOpc, cAlias)

Local lRet  := .T.
Local lNew  := .T.
Local nCpos := 0

Local cNumId := 0

If !lGravaNew
	lNew 		:= .F.
	lGravaNew 	:= .T.
	SP2->(dbGoTo(nRecno))
	cNumId 		:= SP2->P2_ID	
Else
	cNumId := GetSx8Num("SP2","P2_ID")
EndIf

If lModifica

	RecLock( "SP2" , lNew )
		
	If !lAltFunc

		If ( nOpc == 5 )

			SP2->P2_DATA	:= dNewDtIni
			SP2->P2_DATAATE	:= dNewDtFim

		Else

			fLoadVarM()						
			SP2->P2_FILIAL	:= cFilCal
			SP2->P2_MAT		:= cMat
			SP2->P2_MOTIVO  := M->P2_MOTIVO
			SP2->P2_DATA	:= dNewDtIni
			SP2->P2_DATAATE	:= dNewDtFim
			SP2->P2_TURNO	:= M->P2_TURNO
			SP2->P2_CC		:= M->P2_CC
			SP2->P2_TRABA	:= M->P2_TRABA
			SP2->P2_TIPODIA	:= M->P2_TIPODIA
			SP2->P2_NONAHOR	:= M->P2_NONAHOR
			SP2->P2_CODHEXT	:= M->P2_CODHEXT
			SP2->P2_CODHNOT	:= M->P2_CODHNOT
			SP2->P2_CODREF	:= M->P2_CODREF
			SP2->P2_INIHNOT	:= M->P2_INIHNOT
			SP2->P2_FIMHNOT := M->P2_FIMHNOT
			SP2->P2_MINHNOT	:= M->P2_MINHNOT
			SP2->P2_HNOTTAB	:= M->P2_HNOTTAB
			SP2->P2_HNOTTBI	:= M->P2_HNOTTBI
			SP2->P2_ENTRA1	:= M->P2_ENTRA1
			SP2->P2_SAIDA1	:= M->P2_SAIDA1
			SP2->P2_ENTRA2	:= M->P2_ENTRA2
			SP2->P2_SAIDA2	:= M->P2_SAIDA2
			SP2->P2_ENTRA3	:= M->P2_ENTRA3
			SP2->P2_SAIDA3	:= M->P2_SAIDA3
			SP2->P2_ENTRA4	:= M->P2_ENTRA4
			SP2->P2_SAIDA4	:= M->P2_SAIDA4
			SP2->P2_HORMENO	:= M->P2_HORMENO
			SP2->P2_HORMAIS	:= M->P2_HORMAIS
			SP2->P2_JND1CON	:= M->P2_JND1CON
			SP2->P2_JND2CON	:= M->P2_JND2CON
			SP2->P2_JND3CON	:= M->P2_JND3CON
			SP2->P2_JND4CON	:= M->P2_JND4CON
			SP2->P2_INTERV1	:= M->P2_INTERV1
			SP2->P2_INTERV2	:= M->P2_INTERV2
			SP2->P2_INTERV3	:= M->P2_INTERV3
			SP2->P2_HRINTV1	:= M->P2_HRINTV1
			SP2->P2_HRINTV2	:= M->P2_HRINTV2
			SP2->P2_HRINTV3	:= M->P2_HRINTV3
			SP2->P2_HRSTRAB	:= M->P2_HRSTRAB
			SP2->P2_HRSTRA2	:= M->P2_HRSTRA2
			SP2->P2_HRSTRA3	:= M->P2_HRSTRA3
			SP2->P2_HRSTRA4	:= M->P2_HRSTRA4
			SP2->P2_TOTHORA	:= M->P2_TOTHORA
			SP2->P2_CCPER01	:= M->P2_CCPER01
			SP2->P2_CCPER02	:= M->P2_CCPER02
			SP2->P2_CCPER03	:= M->P2_CCPER03
			SP2->P2_CCPER04	:= M->P2_CCPER04
			SP2->P2_REGRA	:= M->P2_REGRA
			SP2->P2_HERDHOR	:= M->P2_HERDHOR
			SP2->P2_POSTO1	:= M->P2_POSTO1
			SP2->P2_POSTO2	:= M->P2_POSTO2
			SP2->P2_POSTO3	:= M->P2_POSTO3
			SP2->P2_POSTO4	:= M->P2_POSTO4
			SP2->P2_DEPTO1	:= M->P2_DEPTO1
			SP2->P2_DEPTO2	:= M->P2_DEPTO2
			SP2->P2_DEPTO3	:= M->P2_DEPTO3
			SP2->P2_DEPTO4	:= M->P2_DEPTO4
			SP2->P2_CODFUN1	:= M->P2_CODFUN1
			SP2->P2_CODFUN2 := M->P2_CODFUN2
			SP2->P2_CODFUN3	:= M->P2_CODFUN3
			SP2->P2_CODFUN4	:= M->P2_CODFUN4
			SP2->P2_ID		:= cNumId
			SP2->P2_TPEXCE	:= If ( Empty(M->P2_MAT), "P", "F" )				

		EndIf

	Else
	
			For nCpos := 1 To Len(aStrSp2)
				SP2->&(aStrSp2[nCpos,01]) := aCposSp2[nCpos]
			Next
			
			SP2->P2_MAT		:= (cAlias)->RA_MAT
			SP2->P2_DATA	:= dNewDtIni
			SP2->P2_DATAATE	:= dNewDtFim
  			SP2->P2_ID		:= cNumId
			SP2->P2_TPEXCE	:= "F"

	EndIf

	SP2->( MsUnlock() )

EndIf

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fExcUpdRf6	 ³Autor ³  Igor Franzoi	       ³ Data ³10/03/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executa as funcoes principais conforme parametro passado	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fMainExc( nOpc )										 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes Por Periodo							 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fExcUpdRf6( aExcecoes, cFilPrc, cMat, dDtaIni, dDtaFim , nOpc , cMsgBar)

Local aInfo		 := {}
Local cMatAnt	 := ""
Local cAliasRf6	 := "RF6"
Local cQryMain	 := "_QRY"
Local cRf6Scope  := ""
Local cTimeIni   := Time()
Local aExcDay	 := {}
Local nRecsBarG	 := 0.00
Local nIncPercG1 := 0.00
Local nX		 := 0.00

#IFDEF TOP

	Local nCpos		:= 0
	Local cJoin		:= ""
	Local cExpWhr	:= ""
	
	Local aStrRf6	:= {}
	
	Local aSraCpo	:= { "RA_FILIAL"	,;
						 "RA_MAT"		,;
						 "RA_DEMISSA"	,;
						 "RA_CC"		,;
						 "RA_TNOTRAB"	,;
						 "RA_PRCFCH"	,;
						 "RA_PERFCH"	,;
						 "RA_ROTFCH"	,;
						 "RA_NUPFCH"		}
	
	//Carrega os campos da query do RF6
	aStrRf6 := (cAliasRf6)->(dbStruct())
	
	cCpos := "%"
	For nCpos := 1 To Len(aStrRf6)
		If	(nCpos == 1)
			cCpos += "RF6."+aStrRf6[nCpos,01]
		Else	
			cCpos += ", RF6."+aStrRf6[nCpos,01]
		EndIf
	Next
	If !Empty(cCpos)
		cCpos += ","
	EndIf
	For nCpos := 1 To Len(aSraCpo)
		If	( (nCpos == 1) .and. !Empty(cCpos) )
			cCpos += "SRA."+aSraCpo[nCpos]
		Else	
			cCpos += ", SRA."+aSraCpo[nCpos]
		EndIf
	Next
	cCpos += "%"
	
	//Constroi a expressao do utilizado no Join
	cJoin := "% RF6.RF6_FILIAL  = SRA.RA_FILIAL "
	cJoin += " AND RF6.RF6_MAT = SRA.RA_MAT	%"
	
	//Constroi a expressao do Where utilizada na Query
	cExpWhr := "%"
	If !Empty(cFilPrc)
		cExpWhr	+= " RF6.RF6_FILIAL = '"+cFilPrc+"' AND "
	EndIf
	If !Empty(cMat)
		cExpWhr	+= " RF6.RF6_MAT = '"+cMat+"' AND "
		cExpWhr	+= " SRA.RA_MAT = '"+cMat+"' AND "			
	EndIf
	cExpWhr += " SRA.RA_DEMISSA = '' "
	cExpWhr += " AND RF6.RF6_DATA >= '"+Dtos(dDtaIni)+"' "
	cExpWhr += " AND RF6.RF6_DATA <= '"+Dtos(dDtaFim)+"' "
	If Empty(cMat)
		cExpWhr += " AND RF6_TPEXCE <> 'F' "
	EndIf
	cExpWhr	+= "%"
	
	cAliasRf6 := GetNextAlias()

	BeginSql Alias cQryMain
		column RF6_DATA as Date, RA_DEMISSA as Date
	   	%NoParser%
		SELECT
			%Exp:cCpos%
		FROM 
			%Table:RF6% RF6
		INNER JOIN
			%Table:SRA% SRA
		ON 
			%Exp:cJoin%		
		WHERE 
			%Exp:cExpWhr% AND
			RF6.%NotDel% AND
			SRA.%NotDel%
		ORDER BY 
			%Order:RF6%
	EndSql

	cRf6Scope := " { || ( DTOS(RF6_DATA) >= '" + DtoS(dDtaIni) + "' "
	cRf6Scope += " .and. DTOS(RF6_DATA) <= '" + DtoS(dDtaFim) + "' "

	If !Empty(cFilPrc)
		cRf6Scope	+= " .and. RF6_FILIAL = '"+cFilPrc+"' "
	EndIf

	If !Empty(cMat)
		cRf6Scope	+= " .and. RF6_MAT = '"+cMat+"' "
	Else
		cRf6Scope += " .and. RF6_TPEXCE <> 'F' "	
	EndIf
	
	cRf6Scope += " ) } " 
	cRf6Scope := &( cRf6Scope )
	
	CREATE SCOPE aInfo FOR ( Eval( cRf6Scope ) )
	
	//Inicializa bargauges com o mesmo conteudo, ambas vao se mover paralelamente
	BarGauge1Set( ( nRecsBarG := RF6->( ScopeCount( aInfo ) ) ) )
	BarGauge2Set( nRecsBarG )	
	
	While (cQryMain)->( !Eof() )

		nX++
						
		If ( (cQryMain)->(RF6_MAT) != cMatAnt )

			//Seleciona o ultimo periodo fechado do PONTO no SRA
        	If Empty(cMat)
				fLoadPerClo(@oPerFch,cQryMain)
				//Se for diferente de inclusao e primeira data do calendario for menor ou igual data final do periodo fechado
				//Monta nova excecao para o funcionario.
				If ( ( nOpc != 3 ) .and. ( (cQryMain)->(RF6_DATA) <= oPerFch:dDataFim ) )
					lAltFunc := .T.
					If ( dDtaFim <= oPerFch:dDataFim )
						lGravaNew := .T.
						lModifica := .T.
						dNewDtIni := If ( (cQryMain)->(RF6_DATA) > dDtaIni, (cQryMain)->(RF6_DATA), dDtaIni )
						dNewDtFim := dDtaFim
						fRecordExc(Nil, cMat, nOpc, cQryMain)
			   		Else
						If ( dDtaIni <= oPerFch:dDataFim )
							lGravaNew := .T.
							lModifica := .T.
							dNewDtIni := If ( (cQryMain)->(RF6_DATA) > dDtaIni, (cQryMain)->(RF6_DATA), dDtaIni )
							dNewDtFim := oPerFch:dDataFim
							fRecordExc(Nil, cMat, nOpc, cQryMain)
						EndIf
					EndIf
				EndIf
			Else
				If	( (cQryMain)->(RF6_DATA) <= oPerFch:dDataFim )
					(cQryMain)->(dbSkip())
					Loop
				EndIf
			EndIf
			
			cMatAnt := (cQryMain)->(RF6_MAT)
	
			//Carrega as excecoes do periodo
			GetExceTop( (cQryMain)->(RA_FILIAL)			,;
						(cQryMain)->(RA_MAT)			,;
						(cQryMain)->(RA_CC)				,;
						{ { (cQryMain)->(RA_TNOTRAB) } },;
						(cQryMain)->(RF6_DATA)			,;
						(cQryMain)->(RF6_DATA)			,;
						@aExcecoes 					 	 )
		EndIf
		
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Obtem o % de Incremento da 2a. BarGauge					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nIncPercG1 := ( (nX * 100) / nRecsBarG )
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Incrementa as Barras de Gauge 								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IncPrcG1Time( cMsgBar , nRecsBarG , cTimeIni , .T. , 1 , nIncPercG1 )
		
		IncPrcG2Time( ""	  , nRecsBarG , cTimeIni , .F. , 2 , nIncPercG1 )			
				
		//Carrega a excecao do dia
		aExcDay := {}
		If ( GetExcecoes( @aExcDay				,; // 01 - Array a ser Carregado com as Exce‡oes
						(cQryMain)->(RA_TNOTRAB),; // 02 - Turno de Trabalho do Funcion rio
						(cQryMain)->(RA_CC)		,; // 03 - Centro de Custo do Funcion rio
						(cQryMain)->(RA_FILIAL)	,; // 04 - Filial do Funcionario
						(cQryMain)->(RA_MAT)	,; // 05 - Matricula do Funcion rio
						(cQryMain)->(RF6_DATA)	,; // 06 - Data a ser pesquisada
						(cQryMain)->(RF6_TIPOD)	,; // 07 - Tipo do Dia Para a Excecao
						aExcecoes 				 ; // 08 - Array com Todas as Exce‡oes do Periodo
						);
				)
        
			//So regrava o ID caso a excecao seja diferente daquela existente
			If ( (cQryMain)->(RF6_P2ID) != aExcDay[01,59] )
			
				fUpdCal( (cQryMain)->(RF6_FILIAL)		 ,; //Filial do funcionario
						 (cQryMain)->(RF6_MAT) 			 ,; //Matricula
						 ""		 			   			 ,; //Processo para o qual o funcionario sera transf.
						 ""		 			   			 ,; //Centro de Custo
						 ""		 			   			 ,; //Roteiro
						 ""		 			   			 ,; //Periodo
						 ""		 			   			 ,; //Num. de Pagamento
						 ""		 			   			 ,; //Departamento
						 ""		 			   			 ,; //Posto
						 ""		 			   			 ,; //Cod. da Funcao
						 Dtos((cQryMain)->(RF6_DATA))	 ,; //Data inicio do calendario ja existente
						 Dtos((cQryMain)->(RF6_DATA))	 ,; //Data fim do calendario existente
						 .T.	 			   			 ,; //Efetua Update no RF6 com os campos/dados passados
						 .F.	 		 	   			 ,; //Efetua Update no RF7 com os campos/dados passados
						 {aExcDay[01,59],aExcDay[01,60]} ,; //Dados para update, na mesma ordem dos campos RF6
						 {}		 			   			 ,; //Dados para update, na mesma ordem dos campos RF7
						 {"P2ID","TPEXCE"}			   	 ,; //Campos utilizados para Update RF6
						 {} 	  	 					  ) //Campos utilizados para Update RF7
				
			EndIf
			
		Else

				fUpdCal( (cQryMain)->(RF6_FILIAL)		 ,; //Filial do funcionario
						 (cQryMain)->(RF6_MAT) 			 ,; //Matricula
						 ""		 			   			 ,; //Processo para o qual o funcionario sera transf.
						 ""		 			   			 ,; //Centro de Custo
						 ""		 			   			 ,; //Roteiro
						 ""		 			   			 ,; //Periodo
						 ""		 			   			 ,; //Num. de Pagamento
						 ""		 			   			 ,; //Departamento
						 ""		 			   			 ,; //Posto
						 ""		 			   			 ,; //Cod. da Funcao
						 Dtos((cQryMain)->(RF6_DATA))	 ,; //Data inicio do calendario ja existente
						 Dtos((cQryMain)->(RF6_DATA))	 ,; //Data fim do calendario existente
						 .T.	 			   			 ,; //Efetua Update no RF6 com os campos/dados passados
						 .F.	 		 	   			 ,; //Efetua Update no RF7 com os campos/dados passados
						 {"",""} 						 ,; //Dados para update, na mesma ordem dos campos RF6
						 {}		 			   			 ,; //Dados para update, na mesma ordem dos campos RF7
						 {"P2ID","TPEXCE"}			   	 ,; //Campos utilizados para Update RF6
						 {} 	  	 					  ) //Campos utilizados para Update RF7				

		EndIf
		    		
		(cQryMain)->(dbSkip())
				
	EndDo
	
	(cQryMain)->(dbCloseArea())
		
#ELSE

	Local cKey		:= ""
	Local nOrdRf6	:= RetOrdem("RF6","RF6_FILIAL+RF6_MAT+RF6_DATA+RF6_TURNO")
	Local nOrdRf7	:= RetOrdem("RF7","RF7_FILIAL+RF7_MAT+RF7_DATA+RF7_DEPTO+RF7_POSTO")
	
    aInfo		:= {}
	cQryMain 	:= ""
	cRf6Scope	:= ""
	CTIMEINI	:= ""
	NINCPERCG1	:= 0
	NRECSBARG	:= 0
	NX			:= 0

	dbSelectArea(cAliasRf6)
	(cAliasRf6)->(dbSetOrder(nOrdRf6))
	
	While (cAliasRf6)->( RF6_FILIAL = cFilPrc .and. RF6_DATA >= dDtaIni .and. RF6_DATA <= dDtaFim )

		//Se excecao diferente de F, nao tem excecao do funcionario
		//refaz as excecoes do periodo
		If ( (cAliasRf6)->(RF6_TPEXCE) != "F" )
							    			
			//Monta chave de pesquisa para o RF7
			cKey := (cAliasRf6)->(RF6_FILIAL)+(cAliasRf6)->(RF6_MAT)+(cAliasRF6)->(RF6_DATA)
			dbSelectArea(cAliasRf7)
			(cAliasRf7)->(dbSetOrder(nOrdRf7))
			(cAliasRf7)->(dbSeek(cKey))
			
			If ( (cAliasRf6)->(RF6_MAT) != cMatAnt )
				cMatAnt := (cAliasRf6)->(RF6_MAT)				
				//Carrega as excecoes do periodo
				GetExceTop( (cAliasRf6)->(RF6_FILIAL),;
							(cAliasRf6)->(RF6_MAT),;
							(cAliasRf7)->(RF7_CC),;
							{ { (cAliasRf6)->(RF6_TURNO) } },;
							(cAliasRf6)->(RF6_DATA),;
							(cAliasRf6)->(RF6_DATA),;
							@aExcecoes )
			EndIf
			
			//Carrega a excecao do dia
			aExcDay := {}
			If ( GetExcecoes( @aExcDay				,; // 01 - Array a ser Carregado com as Exce‡oes
						(cAliasRf6)->(RF6_TURNO)	,; // 02 - Turno de Trabalho do Funcion rio
						(cAliasRf7)->(RF7_CC)		,; // 03 - Centro de Custo do Funcion rio
						(cAliasRf6)->(RF6_FILIAL)	,; // 04 - Filial do Funcionario
						(cAliasRf6)->(RF6_MAT)		,; // 05 - Matricula do Funcion rio
						(cAliasRf6)->(RF6_DATA)		,; // 06 - Data a ser pesquisada
						(cAliasRf6)->(RF6_TIPOD)	,; // 07 - Tipo do Dia Para a Excecao
						aExcecoes 				 ) 	 ; // 08 - Array com Todas as Exce‡oes do Periodo
						)
						
				//So regrava o ID caso a excecao seja diferente daquela existente
				If ( (cAliasRf6)->(RF6_P2ID) != aExcDay[01,59] )
				
					fUpdCal( (cAliasRf6)->(RF6_FILIAL)		 ,; //Filial do funcionario
							 (cAliasRf6)->(RF6_MAT) 		 ,; //Matricula
							 ""		 			   			 ,; //Processo para o qual o funcionario sera transf.
							 ""		 			   			 ,; //Centro de Custo
							 ""		 			   			 ,; //Roteiro
							 ""		 			   			 ,; //Periodo
							 ""		 			   			 ,; //Num. de Pagamento
							 ""		 			   			 ,; //Departamento
							 ""		 			   			 ,; //Posto
							 ""		 			   			 ,; //Cod. da Funcao
							 Dtos((cAliasRf6)->(RF6_DATA))	 ,; //Data inicio do calendario ja existente
							 Dtos((cAliasRf6)->(RF6_DATA))	 ,; //Data fim do calendario existente
							 .T.	 			   			 ,; //Efetua Update no RF6 com os campos/dados passados
							 .F.	 		 	   			 ,; //Efetua Update no RF7 com os campos/dados passados
							 {aExcDay[01,59],aExcDay[01,60]} ,; //Dados para update, na mesma ordem dos campos RF6
							 {}		 			   			 ,; //Dados para update, na mesma ordem dos campos RF7
							 {"P2ID","TPEXCE"}			   	 ,; //Campos utilizados para Update RF6
							 {} 	  	 					  ) //Campos utilizados para Update RF7

				EndIf
			Else

					fUpdCal( (cAliasRf6)->(RF6_FILIAL)		 ,; //Filial do funcionario
							 (cAliasRf6)->(RF6_MAT) 			 ,; //Matricula
							 ""		 			   			 ,; //Processo para o qual o funcionario sera transf.
							 ""		 			   			 ,; //Centro de Custo
							 ""		 			   			 ,; //Roteiro
							 ""		 			   			 ,; //Periodo
							 ""		 			   			 ,; //Num. de Pagamento
							 ""		 			   			 ,; //Departamento
							 ""		 			   			 ,; //Posto
							 ""		 			   			 ,; //Cod. da Funcao
							 Dtos((cAliasRf6)->(RF6_DATA))	 ,; //Data inicio do calendario ja existente
							 Dtos((cAliasRf6)->(RF6_DATA))	 ,; //Data fim do calendario existente
							 .T.	 			   			 ,; //Efetua Update no RF6 com os campos/dados passados
							 .F.	 		 	   			 ,; //Efetua Update no RF7 com os campos/dados passados
							 {"",""} 						 ,; //Dados para update, na mesma ordem dos campos RF6
							 {}		 			   			 ,; //Dados para update, na mesma ordem dos campos RF7
							 {"P2ID","TPEXCE"}			   	 ,; //Campos utilizados para Update RF6
							 {} 	  	 					  ) //Campos utilizados para Update RF7				
			
		  	Endif
	
		EndIf			
		
		(cAliasRf6)->(dbSkip())
			
	EndDo
	
#ENDIF

Return ( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fLoadSp2	 ³Autor ³  Igor Franzoi	       ³ Data ³11/03/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega o conteudo do Sp2 no array							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fLoadSp2()										 	 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes Por Periodo							 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fLoadSp2()

Local nCpos	  := 0

//Inicializa o array para o campos
aCposSp2 := {}

//Insere o conteudo do registro atual no array para comparativo
For nCpos := 1 To Len(aStrSp2)
	aAdd( aCposSp2, SP2->&(aStrSp2[nCpos,01]))
Next

Return ( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fCompSp2	 ³Autor ³  Igor Franzoi	       ³ Data ³10/03/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executa as funcoes principais conforme parametro passado	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fCompSp2()										 	 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes Por Periodo							 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fCompSp2(nOpc)

Local lRet 	  := .F.
Local nCpos   := 0

For	nCpos := 1 To Len(aStrSp2)
	If ( aCposSp2[nCpos] != If(nOpc != 5, M->&(aStrSp2[nCpos,01]), SP2->&(aStrSp2[nCpos,01])) )
		lRet  := .T.
		nCpos := Len(aStrSp2)
	EndIf	
Next

Return ( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fReturnSp2	 ³Autor ³  Leandro Drumond     ³ Data ³05/06/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega as variaveis da tela com os valores da SP2			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fReturnSp2()									 	 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes Por Periodo							 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fReturnSp2()

Local nCpos	  := 0

aCposTela := {}

//Insere o conteudo do registro atual nos campos da tela
For nCpos := 1 To Len(aStrSp2)
	aAdd( aCposTela, M->&(aStrSp2[nCpos,01]))
	M->&(aStrSp2[nCpos,01]) := SP2->&(aStrSp2[nCpos,01])
Next

Return ( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fLoadVarM	 ³Autor ³  Leandro Drumond     ³ Data ³05/06/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega campos da tela com valores alterados pelo usuario	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fLoadVarM()										 	 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes Por Periodo							 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fLoadVarM()

Local nCpos	  := 0

//Insere o conteudo alterado pelo usuario nos campos da tela.
//Operacao ocorrera apenas quando existir conteudo em AcposTela, ou seja,
//quando usuario efetuou alteracao em excecao cuja data inicial era menor ou 
//igual a data final do ultimo periodo fechado e a data final da excecao era
//maior que a data final do ultimo periodo fechado.
For nCpos := 1 To Len(aCposTela)
	M->&(aStrSp2[nCpos,01]) := aCposTela[nCpos]
Next

Return ( Nil )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fPN090TdOk³ Autor ³ Fernando Joly Siquini ³ Data ³ 08/05/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Consiste a Digita‡„o de Datas para Exce‡oes                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fPN090TdOk(NEXP)                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parƒmetros³ NEXP = 3 se Inclus„o ou 4 se Altera‡„o                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA090                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fPN090TdOk(nOpc)

Local aAreaSP2 := SP2->( GetArea() )
Local aHeader  	:= {}
Local aHorarios	:= Array( 8 )
Local aTnoMat	:= {}
Local cMsgInfo 	:= ''
Local cSeq		:= ''
Local cString  	:= ''
Local cNumId   	:= ''
Local cFile    	:= "LogExc.LOG"
Local cMask    	:= "Arquivos Texto (*.TXT) |*.txt|"
Local cFil	   	:= xFilial("SP2")	
Local cMat     	:= M->P2_MAT
Local cCC      	:= M->P2_CC
Local cTurno   	:= M->P2_TURNO
Local cTipoDia 	:= M->P2_TIPODIA
Local __cFileLog
Local dDataDe  	:= M->P2_DATA
Local dDataAte 	:= If(!Empty(M->P2_DATAATE),M->P2_DATAATE,M->P2_DATA)
Local dLimInf  	:= CtoD('')
Local dLimSup  	:= CtoD('')
Local dDiaIni	:= CtoD('')
Local nContHor 	:= 0
Local nLen		:= 0
Local nX		:= 0
Local nHorMeno 	:= M->P2_HORMENO
Local nHorMais 	:= M->P2_HORMAIS
Local nRecno   	:= aAreaSP2[3]
Local nFimCalend
Local nIniCalend
Local nSerIni
Local nSerFim
Local nHorIni
Local nHorFim
Local nMaxInf
Local nMaxLim	:= 24
Local nMinLim	:= 24
Local nMaxSup
Local nLimSup
Local nLimInf
Local lOnly1   	:= If(Empty(M->P2_DATAATE),.T.,.F.)
Local lRet     	:= .T.
Local lLogErro	:= .F.
Local oFont
Local oDlg
Local oMemo

Private aTabCalend  	:= {}
Private aTabPadrao 	:= {}
Private aTurnos			:= {}
Private aExcePer		:= {}
Private oPeriodo 		:= Nil
Private oCalendError	:= Nil

Begin Sequence
	
	If !Empty(cMat)
		oPeriodo := RHPERIODO():New()   // Objeto Periodo Atual do Funcionario
		oPeriodo:cProcesso := cMat
		oPeriodo:PerSel()
		If !( oPeriodo:lFound)
			oCalendError := PONERROR():New()
			oCalendError:InitLogErrors(LoadCalError()) //Carrega tabela de erros
			oCalendError:SendError('04',Nil, .T.) 
			oCalendError:ShowErrors()
			lRet := .F.
			Break
		EndIF
	EndIf
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Processa Valida‡„o no Registro Atual.                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !Empty(dDataAte) .And. dDataAte < dDataDe
		Help(' ',1,'INTERINVAL')
		lRet := .F.
		Break
	EndIF
	
	IF !P2TipoDiaOk(cTipoDia) 
		lRet := .F.
		Break
	EndIF
	
	SP2->( dbSetOrder(3) , dbGoBottom() )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se a Data Ate Estiver Vazia, assume a Data Inicial          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	M->P2_DATAATE := IF( Empty( M->P2_DATAATE ) , M->P2_DATA , M->P2_DATAATE )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Pesquisando Mat + CC + Turno                       		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF SP2->(dbSeek( (cString := ( cFil + cMat + cCC + cTurno )) + Dtos(dDataDe), .F.)) .or. ;
		SP2->(dbSeek( (cString := ( cFil + cMat + cCC + cTurno )), .F.))
		While SP2->( !Eof() .and. P2_FILIAL + P2_MAT + P2_CC + P2_TURNO == cString )
			IF SP2->( dDataDe == P2_DATA .and. P2_TIPODIA == cTipoDia .or. ;
				dDataAte == IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe >= P2_DATA .and. dDataAte <= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. !lOnly1 .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe <= P2_DATA .and. dDataAte >= P2_DATA .and. !lOnly1 .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe <= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. dDataAte >= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. !lOnly1 .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe <= P2_DATA .and. dDataAte >= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. !lOnly1 .and. P2_TIPODIA == cTipoDia )
				IF nOpc == 4 .and. SP2->(Recno()) == nRecno
					SP2->( dbSkip() )
					Loop
				Else
					lRet := .F.
					Help(' ',1,'INTERJACAD')
					Break
				EndIF
			Else
				SP2->(dbSkip())
			EndIF
		EndDo
	EndIF
	
	//Calculando os Horarios
	M->P2_HRINTV1 := fHrsTrabGat("I","SP2","MB","1")
	M->P2_HRINTV2 := fHrsTrabGat("I","SP2","MB","2")
	M->P2_HRINTV3 := fHrsTrabGat("I","SP2","MB","3")
	M->P2_HRSTRAB := fHrsTrabGat("H","SP2","MB","1")
	M->P2_HRSTRA2 := fHrsTrabGat("H","SP2","MB","2")
	M->P2_HRSTRA3 := fHrsTrabGat("H","SP2","MB","3")
	M->P2_HRSTRA4 := fHrsTrabGat("H","SP2","MB","4")
	M->P2_TOTHORA := fHrsTrabGat("T","SP2","MB")
	   

	//Verifica se os Horarios foram digitados para dias trabalhados
	IF ( ( Empty( M->P2_TOTHORA ) .and. (M->P2_HERDHOR <> 'S') ) )
		cMsgInfo := STR0032  //"Para exceçoes que não herdam as horas da tabela de horário padrão, é necessário o preenchimento dos horários."
		lRet := .F.
		Break
	EndIF	

	//Carrega os Campos para obtencao da descricao
	aHeader := SP2->(;
						GdMontaHeader(	NIL		,;	//01 -> Por Referencia contera o numero de campos em Uso
										NIL		,;	//02 -> Por Referencia contera os Campos do Cabecalho da GetDados que sao Virtuais
										NIL		,;	//03 -> Por Referencia contera os Campos do Cabecalho da GetDados que sao Visuais
										"SP2"	,;	//04 -> Opcional, Alias do Arquivo Para Montagem do aHeader
										NIL		,;	//05 -> Opcional, Campos que nao Deverao constar no aHeader
										.T.		,;	//06 -> Opcional, Carregar Todos os Campos
										.F.		,;	//07 -> Nao Carrega os Campos Virtuais
										.F.		,;	//08 -> Carregar Coluna Fantasma
										.F.		,;	//09 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
										.F.		,;	//10 -> Verifica se Deve verificar se o campo eh usado
										.F.		 ;	//11 -> Verifica se Deve verificar o nivel do usuario
					   				 );
					)

	//Verifica se Existe Saida de Intervalo sem Entrada correspondente
	IF ( ( ( M->P2_HRINTV1 <> 0 ) .or. ( M->P2_INTERV1 == "S" ) ) .and. ( M->P2_HRSTRA2 == 0.00 ) )
		lRet		:= .F.
		cMsgInfo	:= STR0013  //"Os Horarios n„o podem terminar com uma saida de intervalo"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0014	//"O intervalo: "
		cMsgInfo	+= " 1 "
		cMsgInfo	+= STR0015  //"Nao possui a entrada correspondente"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0016  //"Altere o conteudo do campo: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_INTERV1' , aHeader ) , 01 ]
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo    += STR0017	//"ou informe Hor rio nos campos: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_ENTRA2' , aHeader ) , 01 ]
		cMsginfo	+= " / " 
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_SAIDA2' , aHeader ) , 01 ]
		Break		
	EndIF
	//Verifica se Existe Saida de Intervalo sem Entrada correspondente
	IF ( ( ( M->P2_HRINTV2 <> 0 ) .or. ( M->P2_INTERV2 == "S" ) ) .and. ( M->P2_HRSTRA3 == 0.00 ) )
		lRet		:= .F.
		cMsgInfo	:= STR0013  //"Os Horarios n„o podem terminar com uma saida de intervalo"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0014	//"O intervalo: "
		cMsgInfo	+= " 2 "
		cMsgInfo	+= STR0015  //"Nao possui a entrada correspondente"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0016  //"Altere o conteudo do campo: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_INTERV2' , aHeader ) , 01 ]
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo    += STR0017	//"ou informe Hor rio nos campos: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_ENTRA3' , aHeader ) , 01 ]
		cMsginfo	+= " / " 
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_SAIDA3' , aHeader ) , 01 ]
		Break		
	EndIF
	//Verifica se Existe Saida de Intervalo sem Entrada correspondente
	IF ( ( ( M->P2_HRINTV3 <> 0 ) .or. ( M->P2_INTERV3 == "S" ) ) .and. ( M->P2_HRSTRA4 == 0.00 ) )
		lRet		:= .F.
		cMsgInfo	:= STR0013  //"Os Horarios n„o podem terminar com uma saida de intervalo"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0014	//"O intervalo: "
		cMsgInfo	+= " 3 "
		cMsgInfo	+= STR0015  //"Nao possui a entrada correspondente"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0016  //"Altere o conteudo do campo: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_INTERV3' , aHeader ) , 01 ]
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo    += STR0017	//"ou informe Hor rio nos campos: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_ENTRA4' , aHeader ) , 01 ]
		cMsginfo	+= " / " 
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_SAIDA4' , aHeader ) , 01 ]
		Break		
	EndIF
	//Caso exista turno ou matricula, monta calendario para verificacao dos limites
	If (M->P2_HERDHOR <> 'S')

		aHorarios[ 1 ]	:= M->P2_ENTRA1
		aHorarios[ 2 ]	:= M->P2_SAIDA1
		aHorarios[ 3 ]	:= M->P2_ENTRA2
		aHorarios[ 4 ]	:= M->P2_SAIDA2 
		aHorarios[ 5 ]	:= M->P2_ENTRA3
		aHorarios[ 6 ]	:= M->P2_SAIDA3
		aHorarios[ 7 ]	:= M->P2_ENTRA4
		aHorarios[ 8 ]	:= M->P2_SAIDA4
					
		//Se for informado centro de custo ou matrícula e turno, monta query para obter todos os turnos que serão comparados
		If (  !Empty(cCc) )
			aTnoMat := aClone(MntQrySRA(cFil,cMat,cTurno,cCc))
		Else
			If !Empty(cMat) .and. Empty(cTurno)
				SRA->(DbSeek(xFilial("SRA")+cMat))
				cTurno := SRA->RA_TNOTRAB
				cSeq   := SRA->RA_SEQTURN
			EndIf
				
			If !Empty(cMat) .or. !Empty(cTurno)
				aAdd(aTnoMat, {cMat,cSeq,cTurno,cCc} ) 
			EndIf
		EndIf
		
		nLen := Len(aTnoMat)
		
		For nX := 1 to nLen		
		
			CriaCalend(		dDataDe-1		,; //01 -> Data Inicial do Periodo
					 		dDataAte+1		,; //02 -> Data Final do Periodo
							aTnoMat[nx,03]	,; //03 -> Turno Para a Montagem do Calendario
							aTnoMat[nx,02]	,; //04 -> Sequencia Inicial para a Montagem Calendario
							@aTabPadrao		,; //05 -> Array Tabela de Horario Padrao
							@aTabCalend		,; //06 -> Array com o Calendario de Marcacoes
							NIL				,; //07 -> Filial para a Montagem da Tabela de Horario
							aTnoMat[nx,01]	,; //08 -> Matricula para a Montagem da Tabela de Horario
							aTnoMat[nx,04]	,; //09 -> Centro de Custo para a Montagem da Tabela
							@aTurnos		,; //10 -> Array com as Trocas de Turno
							@aExcePer		,; //11 -> Array com Todas as Excecoes do Periodo
							NIL	 			,; //12 -> Se executa Query para a Montagem da Tabela Padrao
							.F.				,; //13 -> Se executa a funcao se sincronismo do calendario
							.T.				,; //14 -> Se Forca a Criacao de Novo Calendario
							NIL  			,; //15 -> Array com marcacoes para tratamento de Turnos Opcionais
							.F.  			,; //16 -> .T. Determina a Criacao/Carga do Calendario Fisico
							NIL				,; //17 -> .T. Caso exista calendario fisico 
							NIL				,; //18 -> Data inicial do calendario fisico
							NIL				,; //19 -> Data final do calendario fisico 
							.F.				,; //20 -> .T. determina que o calendario sera gravado no caso de nao existir
							.F.		 	 	; //21 -> .T. determina que a rotina chamadora eh a Geracao de Calendarios (PONM400)						
						)
						
			If !Empty(aTabCalend)
				dDiaIni := dDataDe
				
				While dDiaIni <= dDataAte
				
					nFimCalend := aScan( aTabCalend , { |x| x[CALEND_POS_DATA] == (dDiaIni-1) .and. x[CALEND_POS_TIPO_MARC] == "1E" } )
					nIniCalend := aScan( aTabCalend , { |x| x[CALEND_POS_DATA] == (dDiaIni+1) .and. x[CALEND_POS_TIPO_MARC] == "1E" } )
					nSerIni	   := 0
					nSerFim	   := 0
		
					If nFimCalend > 0 .and. nIniCalend > 0
						nSerIni := __fDhtoNS( aTabCalend[ nIniCalend , CALEND_POS_LIM_MARCACAO , 1 ], aTabCalend[ nIniCalend, CALEND_POS_LIM_MARCACAO , 2 ] )
						nHorIni := aTabCalend[ nIniCalend, CALEND_POS_LIM_MARCACAO , 2 ]
						nIniCalend := aScan( aTabCalend , { |x| x[CALEND_POS_DATA] == dDiaIni .and. x[CALEND_POS_TIPO_MARC] == "1E" } )
						nIniCalend --
						While nIniCalend > nFimCalend
							If !Empty(aTabCalend[ nIniCalend , CALEND_POS_HORA ])
								nSerFim := __fDhtoNS( aTabCalend[nIniCalend,CALEND_POS_LIM_MARCACAO,1] , aTabCalend[nIniCalend,CALEND_POS_LIM_MARCACAO,2] )
								nHorFim := aTabCalend[nIniCalend,CALEND_POS_LIM_MARCACAO,2]
								Exit
							EndIf
							nIniCalend--
						EndDo
						
						If M->P2_ENTRA1 < nHorMeno
							nLimInf := SubHoras( 24 , (nHorMeno - M->P2_ENTRA1))
						Else
							nLimInf := SubHoras( M->P2_ENTRA1 , nHorMeno )
						EndIf
						
						If nLimInf > M->P2_ENTRA1
							dLimInf := dDiaIni - 1
						Else
							dLimInf := dDiaIni
						EndIf
						
						nContHor 	:= 8
						
						//Obtem a ultima batida do calendario
						While nContHor > 0
							If !Empty(aHorarios[nContHor])
								nLimSup := SomaHoras( aHorarios[nContHor] , nHorMais )
								If nLimSup > 24
									nLimSup := nLimSup - 24
									dLimSup := dDiaIni + 1
								Else
									If aHorarios[nContHor] < aHorarios[1]
										dLimSup := dDiaIni + 1
									Else
										dLimSup := dDiaIni
									EndIf
								EndIf
								Exit
							EndIf
							nContHor--
						EndDo
						
						If nSerIni > 0 .and. ( ( nMaxInf := __fDhtoNS( dLimSup , nLimSup ) ) >= nSerIni )
							//Se centro de custo foi informado faz a gravacao e gera log com erro
							If !Empty(cCc) .and. ( Empty(cMat) .and. Empty(cTurno) )
								cMsgInfo 	+= CHR(13) + CHR(10)
								cMsgInfo	+= STR0024  //"El limite superior del dia "
								cMsgInfo	+= DtoC(dDiaIni)
								cMsgInfo    += STR0025	//" sobrepasa el limite inferior del dia siguiente."
								cMsgInfo 	+= CHR(13) + CHR(10)
								cMsgInfo 	+= STR0026 + aTnoMat[nX,01] + " - " + STR0027 + aTnoMat[nX,03] /*"Funcionário: " ... "Turno: "   */
								nMaxLim 	:= If(nMaxLim <= (SubHoras(SubHoras( nHorMais , SubHoras( nLimSup , nHorIni )),0.01)) , nMaxLim , (SubHoras(SubHoras( nHorMais , SubHoras( nLimSup , nHorIni )),0.01)) )
								lLogErro 	:= .T.
							//Se centro de custo nao foi informado, sendo uma excecao especifica, bloqueia inclusao
							Else
								lRet 		:= .F.
								cMsgInfo	:= STR0024  //"El limite superior del dia "
								cMsgInfo	+= DtoC(dDiaIni)
								cMsgInfo    += STR0025	//" sobrepasa el limite inferior del dia siguiente ."
								cMsgInfo 	+= CRLF
								cMsgInfo 	+= CRLF
								cMsgInfo    += STR0028 + AllTrim(Str(SubHoras(SubHoras( nHorMais , SubHoras( nLimSup , nHorIni )),0.01))) + "." //" Limite superior no puede sobrepasar las "
								Break
							EndIf
						EndIf
						
						If nSerFim > 0 .and. ( ( nMaxSup := __fDhtoNS( dLimInf , nLimInf ) )  <= nSerFim )
							//Se centro de custo foi informado faz a gravacao e gera log com erro
							If !Empty(cCc) .and. ( Empty(cMat) .and. Empty(cTurno) )
								cMsgInfo 	+= CHR(13) + CHR(10)
								cMsgInfo	+= STR0029  //"El limite inferior del dia "
								cMsgInfo	+= DtoC(dDiaIni)
								cMsgInfo    += STR0030	//" sobrepasa el limite superior del dia anterior ."
								cMsgInfo 	+= CHR(13) + CHR(10)
								cMsgInfo 	+= STR0026 + aTnoMat[nX,01] + " - " + STR0027 + aTnoMat[nX,03]
								nMinLim 	:= If(nMinLim <= (SubHoras(SubHoras( nHorMeno , SubHoras( nHorFim , nLimInf  )),0.01)) , nMinLim , (SubHoras(SubHoras( nHorMeno , SubHoras( nHorFim , nLimInf )),0.01)) )
								lLogErro 	:= .T.
							//Se centro de custo nao foi informado, sendo uma excecao especifica, bloqueia inclusao
							Else
								lRet 		:= .F.
								cMsgInfo	:= STR0029  //"El limite inferior del dia "
								cMsgInfo	+= DtoC(dDiaIni)
								cMsgInfo    += STR0030	//" sobrepasa el limite superior del dia anterior."
								cMsgInfo 	+= CRLF
								cMsgInfo 	+= CRLF
								cMsgInfo    += STR0031	+ AllTrim(Str(SubHoras(SubHoras( nHorMeno , SubHoras( nHorFim , nLimInf )),0.01))) + "." //" Limite inferior no puede sobrepasar las "
								Break
							EndIf
						EndIf
					EndIf
					dDiaIni := dDiaIni + 1
				EndDo
			EndIf
		Next nX
	EndIf
End Sequence

IF !( lRet)
	IF !Empty( cMsgInfo )
		//"Existe inconsistˆncias na Exce‡„o"
		MsgInfo( OemToAnsi( cMsgInfo ) , OemToAnsi( STR0012 ) )
	EndIF
Else
	//Se tudo ok, carrega as variaveis para reformulacao dos calendarios
	cFilCal := M->P2_FILIAL
	dIniCal	:= M->P2_DATA
	dFimCal := M->P2_DATAATE
	
	//Carrega o ID da excecao	
	If Empty(M->P2_ID)	
		cNumId   := GetSx8Num("SP2","P2_ID")
		M->P2_ID := cNumId
	EndIf
	
	//Carrega origem da excecao
	If ( Empty(M->P2_TPEXCE) .and. Empty(M->P2_MAT) )
		cTpExce 	 := "P"
		M->P2_TPEXCE := cTpExce
	ElseIf ( !Empty(M->P2_MAT) )
		cTpExce 	 := "F"
		M->P2_TPEXCE := cTpExce		
	EndIf
	
EndIF
	
RestArea( aAreaSP2 )

If lRet .and. lLogErro
	If nMaxLim < 24
			cMsgInfo 	+= CHR(13) + CHR(10)								
			cMsgInfo    += STR0028	+ AllTrim(Str(nMaxLim)) + "." //" Limite superior no puede soprepasar las "
	EndIf
	If nMinLim < 24
			cMsgInfo 	+= CHR(13) + CHR(10)								
			cMsgInfo    += STR0031	+ AllTrim(Str(nMinLim)) + "." //" Limite inferior no puede soprepasar las "
	EndIf	
	__cFileLog := MemoWrite(Criatrab(,.F.)+".LOG",cMsgInfo)
	DEFINE FONT oFont NAME "Mono AS" SIZE 5,12   //6,15
	DEFINE MSDIALOG oDlg TITLE STR0012 From 3,0 to 340,417 PIXEL       //"Existe inconsistˆncias na Exce‡„o"
	@ 5,5 GET oMemo  VAR cMsgInfo MEMO SIZE 200,145 OF oDlg PIXEL 
	oMemo:bRClicked := {||AllwaysTrue()}
	oMemo:oFont:=oFont
	
	DEFINE SBUTTON  FROM 153,175 TYPE 1 ACTION oDlg:End() ENABLE OF oDlg PIXEL //Apaga
	DEFINE SBUTTON  FROM 153,145 TYPE 13 ACTION (cFile:=cGetFile(cMask,""),If(cFile="",.T.,MemoWrite(cFile,cMsgInfo))) ENABLE OF oDlg PIXEL //Salva e Apaga //"Salvar Como..."
	
	
	ACTIVATE MSDIALOG oDlg CENTER		
EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fLoadPerClo ³Autor ³  Igor Franzoi	       ³ Data ³29/05/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executa as funcoes principais conforme parametro passado	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   |fLoadPerClo()										 	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Valida a excecao conforme os parametros selecionados		 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fLoadPerClo(oPerFch,cAlias)
	oPerFch:cProcesso 	:= (cAlias)->(RA_PRCFCH)
	oPerFch:cPeriodo	:= (cAlias)->(RA_PERFCH)
	oPerFch:cRoteiro	:= (cAlias)->(RA_ROTFCH)
	oPerFch:cNumPagto	:= (cAlias)->(RA_NUPFCH)
	oPerFch:GetPer()
Return (NIL)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SPJExceConPad³Autor ³Marinaldo de Jesus    ³ Data ³26/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Consulta padrao do SPJ/RF3 para retorno de Horarios        	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³SPJExceConPad( nOpc )										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes / Trocas de Turno                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function SPJExceConPad( nOpc , nLine , aHeaderPastPar , aColsPastPar , lReadVar, aTabCalend )
         
Local aCpos		:= Array(3,27)
Local nCont		:= 0
Local nCpos		:= 0
Local cPref		:= ""
Local cType		:= ""
Local lConPadOk := .F.

Private lSPJConPadFilt	:= .F.
Private aUniqueSPJConP	:= {}

If lUseSPJ
	nCpos  := 2
	cPref  := "PJ_"
	cAlias := "SPJ"
	cPrefRf2	:= "PJ"//cPref
	cAliasRf2	:= cAlias	
Else
	nCpos  := 3
	cPref  := "RF3_"
	cAlias := "RF3"
	cPrefRf2  := "RF2"//"RF2_"
	cAliasRf2 := "RF2"
EndIf
        
DEFAULT nOpc := 0
DEFAULT aTabCalend := {}

IF !( ( cType := ValType( nOpc ) ) == "N"  )
	IF ( cType == "C"	 )
		nOpc := Val( nOpc )
	Else
		nOpc := 0
	EndIF
EndIF

aFill( aCpos[1], Space(1) )

aCpos[1]	:= { 	"P2_ENTRA1"	 ,;	// 01 - Primeira Entrada
					"P2_SAIDA1"	 ,;	// 02 - Primeira Saida
					"P2_ENTRA2"	 ,;	// 03 - Segunda Entrada
					"P2_SAIDA2"	 ,;	// 04 - Segunda Saida
					"P2_ENTRA3"	 ,;	// 05 - Terceira Entrada
					"P2_SAIDA3"	 ,;	// 06 - Terceira Saida
					"P2_ENTRA4"	 ,;	// 07 - Quarta Entrada
					"P2_SAIDA4"	 ,;	// 08 - Quarta Saida
					"P2_HRSTRAB" ,;	// 09 - Numero de Horas Trabalhadas 1a. Jornada
					"P2_HRSTRA2" ,;	// 10 - Numero de Horas Trabalhadas	2a. Jornada
					"P2_HRSTRA3" ,;	// 11 - Numero de Horas Trabalhadas 3a. Jornada
					"P2_HRSTRA4" ,;	// 12 - Numero de Horas Trabalhadas 4a. Jornada
					"P2_TOTHORA" ,;	// 13 - Total de Horas Trabalhadas
					"P2_HRINTV1" ,;	// 14 - Numero de Horas 1o. Intervalo
					"P2_HRINTV2" ,;	// 15 - Numero de Horas 2o. Intervalo
					"P2_HRINTV3" ,;	// 16 - Numero de Horas 3o. Intervalo
					"P2_INTERV1" ,;	// 17 - 1º Intervalo S/N
					"P2_INTERV2" ,;	// 18 - 2º Intervalo S/N
					"P2_INTERV3" ,; // 19 - 3º Intervalo S/N
					"P2_CODEXT"	 ,; // 20 - Tipo de Extra Normal
					"P2_CODHNOT" ,;	// 21 - Tipo de Extra Noturna
					"P2_HORMENO" ,;	// 22 - Limite de Horario Inicial
					"P2_HORMAIS" ,;	// 23 - Limite de Horario Final
					"P2_JND1CON" ,;	// 24 - 1a. Jornada Continua
					"P2_JND2CON" ,;	// 25 - 2a. Jornada Continua
					"P2_JND3CON" ,;	// 26 - 3a. Jornada Continua
					"P2_JND4CON"  ;	// 27 - 4a. Jornada Continua
         }

aFill( aCpos[2], Space(2) )

aCpos[2]	:= { 	"PJ_ENTRA1"	,;	// 01 - Primeira Entrada
					"PJ_SAIDA1"	,;	// 02 - Primeira Saida
					"PJ_ENTRA2"	,;	// 03 - Segunda Entrada
					"PJ_SAIDA2"	,;	// 04 - Segunda Saida
					"PJ_ENTRA3"	,;	// 05 - Terceira Entrada
					"PJ_SAIDA3"	,;	// 06 - Terceira Saida
					"PJ_ENTRA4"	,;	// 07 - Quarta Entrada
					"PJ_SAIDA4"	,;	// 08 - Quarta Saida
					"PJ_HRSTRAB",;	// 09 - Numero de Horas Trabalhadas 1a. Jornada
					"PJ_HRSTRA2",;	// 10 - Numero de Horas Trabalhadas	2a. Jornada
					"PJ_HRSTRA3",;	// 11 - Numero de Horas Trabalhadas 3a. Jornada
					"PJ_HRSTRA4",;	// 12 - Numero de Horas Trabalhadas 4a. Jornada
					"PJ_HRTOTAL",;	// 13 - Total de Horas Trabalhadas
					"PJ_HRSINT1",;	// 14 - Numero de Horas 1o. Intervalo
					"PJ_HRSINT2",;	// 15 - Numero de Horas 2o. Intervalo
					"PJ_HRSINT3",;	// 16 - Numero de Horas 3o. Intervalo
					"PJ_INTERV1",;	// 17 - 1º Intervalo S/N
					"PJ_INTERV2",;	// 18 - 2º Intervalo S/N
					"PJ_INTERV3",;  // 19 - 3º Intervalo S/N
					"PJ_TPEXT"	,;  // 20 - Tipo de Extra Normal
					"PJ_TPEXTN"	,;	// 21 - Tipo de Extra Noturna
					"PJ_HORMENO",;	// 22 - Limite de Horario Inicial
					"PJ_HORMAIS",;	// 23 - Limite de Horario Final
					"PJ_JND1CON",;	// 24 - 1a. Jornada Continua
					"PJ_JND2CON",;	// 25 - 2a. Jornada Continua
					"PJ_JND3CON",;	// 26 - 3a. Jornada Continua
					"PJ_JND4CON" ; 	// 27 - 4a. Jornada Continua
         }
         
aFill( aCpos[3], Space(3) )

aCpos[3]	:= { 	"RF3_ENTRA1"	,;	// 01 - Primeira Entrada
					"RF3_SAIDA1"	,;	// 02 - Primeira Saida
					"RF3_ENTRA2"	,;	// 03 - Segunda Entrada
					"RF3_SAIDA2"	,;	// 04 - Segunda Saida
					"RF3_ENTRA3"	,;	// 05 - Terceira Entrada
					"RF3_SAIDA3"	,;	// 06 - Terceira Saida
					"RF3_ENTRA4"	,;	// 07 - Quarta Entrada
					"RF3_SAIDA4"	,;	// 08 - Quarta Saida
					"RF3_HRTRAB"	,;	// 09 - Numero de Horas Trabalhadas 1a. Jornada
					"RF3_HRTRA2"	,;	// 10 - Numero de Horas Trabalhadas	2a. Jornada
					"RF3_HRTRA3"	,;	// 11 - Numero de Horas Trabalhadas 3a. Jornada
					"RF3_HRTRA4"	,;	// 12 - Numero de Horas Trabalhadas 4a. Jornada
					"RF3_HRSTOT"	,;	// 13 - Total de Horas Trabalhadas
					"RF3_HRINT1"	,;	// 14 - Numero de Horas 1o. Intervalo
					"RF3_HRINT2"	,;	// 15 - Numero de Horas 2o. Intervalo
					"RF3_HRINT3"	,;	// 16 - Numero de Horas 3o. Intervalo
					"RF3_INTER1"	,;	// 17 - 1º Intervalo S/N
					"RF3_INTER2"	,;	// 18 - 2º Intervalo S/N
					"RF3_INTER3"	,;  // 19 - 3º Intervalo S/N
					"'5'"				,;  // 20 - Tipo de Extra Normal
					"'5'"		   		,;	// 21 - Tipo de Extra Noturna
					"RF3_HRMENO"	,;	// 22 - Limite de Horario Inicial
					"RF3_HRMAIS"	,;	// 23 - Limite de Horario Final
					"RF3_JND1CO"	,;	// 24 - 1a. Jornada Continua
					"RF3_JND2CO"	,;	// 25 - 2a. Jornada Continua
					"RF3_JND3CO"	,;	// 26 - 3a. Jornada Continua
					"RF3_JND4CO"	 ; 	// 27 - 4a. Jornada Continua
         }

IF ( nOpc == 3 )
	UniqueKey( NIL , cAlias , lSPJConPadFilt )
	lSPJConPadFilt := .T.
	aUniqueSPJConP := { "PJ_FILIAL" , "PJ_TURNO" , "PJ_SEMANA" , "PJ_TPDIA" }
EndIF

IF ( lConPadOk := ConPad1( NIL , NIL , NIL , cAlias , NIL , NIL , .F. ) )
	IF ( nOpc == 1 ) //Excecao por Periodo ( Enchoice )
	
		For nCont := 1 To Len(aCpos[nCpos])
			M->&(aCpos[01,nCont]) := (cAlias)->&(aCpos[nCpos,nCont])
		Next
		
	ElseIF ( nOpc == 2 )	//Excecao por Funcionario ( GetDados )
	
		For nCont := 1 To Len(aCpos[nCpos])
			GdFieldPut( aCpos[01,nCont], (cAlias)->&(aCpos[nCpos,nCont]), nLine , aHeaderPastPar , aColsPastPar , lReadVar)
		Next
    
	ElseIF ( nOpc == 3 )	//Trocas de Turno( GetDados )
		
		GdFieldPut( "PF_TURNOPA" , (cAliasRf2)->&(cPrefRf2+"_TURNO")	)
		GdFieldPut( "PF_SEQUEPA" , (cAliasRf2)->&(cPrefRf2+"_SEMANA")	)

	EndIF

EndIF

Return( lConPadOk )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SPJConPadFilt³Autor ³Marinaldo de Jesus    ³ Data ³26/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Filtra Consulta padrao do SPJ                          		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³SPJConPadFilt()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Filtro da Consulta padrao do SPJ                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function SPJConPadFilt()

Local aTabTno	:= {}
Local cRet		:= "@#.T.@#"
Local cKeys		:= ""
Local cIndexKey	:= SPJ->( IndexKey() )
Local cFil		:= xFilial( "SPJ" )
Local nSpjRecno	:= SPJ->( Recno() )
Local nTab		:= 0
Local nTabs		:= 0
Local nLoop		:= 0
Local nLoops	:= 0
Local nBytes	:= 0

Begin Sequence

	IF ( Type( "lSPJConPadFilt" ) == "L" .and. ( lSPJConPadFilt ) )
		IF ( Type( "aUniqueSPJConP" ) == "A" )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega os Recnos da Tabela de Horario Padrao							 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			fTabTurno( @aTabTno , cFil , .F. , { || UniqueKey( aUniqueSPJConP ) } )
			nTabs := Len( aTabTno )
			For nTab := 1 To nTabs
				nLoops := Len( aTabTno[ nTab , 03 ] )
				For nLoop := 1 To nLoops
					SPJ->( dbGoto( aTabTno[ nTab , 03 , nLoop , 37 ] ) )
					cKeys	+= SPJ->( &( cIndexKey ) ) + "/"
					nBytes	+= Len( cKeys )
					#IFDEF TOP
						IF ( nBytes > 2000 ) //Filter greater than 2000 bytes
							cKeys := ""
							Break
						EndIF
					#ENDIF	
				Next nLoop
			Next nTab	
			cRet := "@#"+cIndexKey+"$'"+cKeys+"'@#"
		EndIF
	EndIF

End Sequence

SPJ->( MsGoto( nSpjRecno ) )

Return( cRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P2TipoDiaVld ³Autor ³Marinaldo de Jesus    ³ Data ³26/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar o conteudo do campo P2_TIPODIA                 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P2TipoDiaVld()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³X3_VALID do campo P2_TIPODIA                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function P2TipoDiaVld()

Local lP2TipoDiaVld := .T.

Begin Sequence

	IF ( Vazio() )
		Break
	EndIF
	
	IF !(lP2TipoDiaVld := P2TipoDiaOk() )
		Break
	EndIF
	
	IF !( lP2TipoDiaVld := Pertence(" SNDC") )
		Break
	EndIF

End Sequence

Return( lP2TipoDiaVld )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P2TipoDiaOk  ³Autor ³Equipe Advanced RH    ³ Data ³28/05/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar Excecao que se aplica a um Mesmo Dia          		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P2TipoDiaOk()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³P2TipoDiaVld()				                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function P2TipoDiaOk(cTipoDia)

Local lP2TipoDiaOk	:= .T.

DEFAULT cTipoDia := M->P2_TIPODIA

IF (;
		( Type("M->P2_MAT")		== "C" ) .and.;
		( Type("M->P2_DATA")	== "D" ) .and.;
		( Type("M->P2_DATAATE") == "D" )	  ;
	)
	IF ( !Empty( M->P2_MAT ) )
		IF ( M->P2_DATA == M->P2_DATAATE ) .AND. !Empty(cTipoDia)
			//"O campo 'Tipo de Dia' dever  ter o seu conte£do vazio quando a exce‡„o for por funcion rio e referir-se a um £nico dia."
			MsgInfo( OemToAnsi( STR0020 ) , "P2_TIPODIA" )
			lP2TipoDiaOk	:= .F.
		EndIF
	EndIF
EndIF

Return( lP2TipoDiaOk )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fSP2Cpos		³Autor³  Mauricio MR      ³ Data ³13/06/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Obtem nome de campos do SP2								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA090                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aCpos -> Array com os nomes dos campos do SX2				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fSP2Cpos()
Local aArea		:= GetArea()
Local aSX3Area	:= SX3->(GetArea())
Local aCpos 	:= {}                 
Local cAlias	:= 'SP2'                           
Local aNotCpos  := {'P2_FILIAL','P2_ID', 'P2_TPEXCE'}

dbSelectArea("SX3")
dbSetOrder(1)
dbSeek(cAlias)
nUsado := 0
While !EOF() .And. (x3_arquivo == cAlias)
	IF X3USO(x3_usado) .AND. cNivel >= x3_nivel .And. Empty( AScan( aNotCpos, { |x| x == AllTrim(SX3->X3_CAMPO) } ) )
		AADD(aCpos, x3_campo )
	EndIf
	dbSkip()
End            
RestArea(aSX3Area)
RestArea(aArea)

Return aCpos

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MntQrySRA  	³Autor³  Leandro Drumond  ³ Data ³28/07/2011³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega lista de funcionarios/turnos					    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA090                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³cAlias														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MntQrySRA(cFil,cMat,cTno,cCc)
Local aAreaSRA		:= {}
Local aRet			:= {}
Local cQuery 		:= ""
Local cKey			:= ""
Local cAliasQuery	:= "__QSRAQRY"

#IFDEF TOP

	cQuery	:= "SELECT "
	cQuery  += "RA_MAT, RA_CC, RA_TNOTRAB, RA_SEQTURN "
	cQuery	+= " FROM "
	cQuery	+= RetSqlName("SRA")
	cQuery	+= " WHERE "
	cQuery	+= "("
	cQuery	+= 	"("
	
	If !Empty(cMat)
		cQuery	+= 		"("
		cQuery	+= 			"RA_FILIAL='"+cFil+"' AND RA_MAT='"+cMat+"'"
		cQuery	+= 		")"
	EndIf
	If !Empty(cCc)
		If !Empty(cMat)
			cQuery	+= 		" AND "
		EndIf
		cQuery	+= 		"("
		cQuery	+= 			"RA_FILIAL='"+cFil+"' AND RA_CC='"+cCc+"'"
		cQuery	+= 		")"
	EndIf
	If !Empty(cTno)
		If !Empty(cMat) .or. !Empty(cCc)
			cQuery	+= 		" AND "
		EndIf
		cQuery	+= 		"("
		cQuery	+= 			"RA_FILIAL='"+cFil+"' AND RA_TNOTRAB='"+cTno+"'"
		cQuery	+=		")"
	EndIf
	cQuery	+=	")"
	cQuery	+=	" AND "
	cQuery	+= 	"("
	cQuery	+= 	 	"RA_SITFOLH NOT IN( 'D','T')" 
	cQuery	+=		" AND D_E_L_E_T_=' '"
	cQuery	+= 	")"
	cQuery	+= ")"
	cQuery	+= " ORDER BY " + SqlOrder( SRA->( IndexKey() ) )
	
	cQuery	:= ChangeQuery( cQuery )
	
	If Select(cAliasQuery) > 0
		(cAliasQuery)->(dbCloseArea())	
	EndIf
	
	If ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.F.,.T.) )
		While (cAliasQuery)->(!Eof())
			If aScan( aRet , { |x| x[1] == (cAliasQuery)->RA_MAT .and. x[2] == (cAliasQuery)->RA_SEQTURN .and. x[3] == (cAliasQuery)->RA_TNOTRAB .and. x[4] == (cAliasQuery)->RA_CC } ) == 0
				aAdd(aRet, {(cAliasQuery)->RA_MAT,(cAliasQuery)->RA_SEQTURN,(cAliasQuery)->RA_TNOTRAB,(cAliasQuery)->RA_CC} )
			EndIf
			(cAliasQuery)->(dbSkip())
		EndDo	
	Else
		aAdd(aRet, {cMat,'',cTno,cCc} )
	EndIf

#ELSE
	aAreaSRA := SRA->( GetArea() )
	
	SRA->(DbSetOrder(RetOrder("SRA","RA_FILIAL+RA_CC+RA_MAT")))
	
	cKey := cCc + (If(!Empty(cMat),cMat,""))
	
	If SRA->(DbSeek(xFilial("SRA")+cKey))
		While SRA->(!Eof())
			If SRA->RA_CC <> cCc
				Exit
			EndIf
			If !Empty(cMat)
				If SRA->RA_MAT <> cMat
					Exit
				EndIf
			EndIf
			If !Empty(cTno)
				If SRA->RA_TNOTRAB <> cTno
					SRA->(dbSkip())
					Loop
				EndIf
			EndIf
			
			aAdd(aRet, {SRA->RA_MAT,SRA->RA_SEQTURN,SRA->RA_TNOTRAB,SRA->RA_CC} )

			SRA->(DbSkip())
		EndDo
	EndIf
	
	RestArea( aAreaSRA )
#ENDIF

Return aRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Almeida     ³ Data ³21/11/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas blibliotecas Framework da Versao 9.12 .     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA090                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MenuDef()

Local aRotina		:= {	{ STR0004		, 'PesqBrw', 0, 1, ,.F.}	,; // 'Pesquisar'
                    	 	{ STR0005		, 'AxVisual', 0, 2}	,; // 'Visualizar'
                     		{ STR0006		, 'fMain090(3)', 0, 3},; // 'Incluir'
                     		{ STR0007		, 'fMain090(4)', 0, 4},; // 'Alterar'
                     		{ STR0008		, 'fMain090(5)', 0, 5} ,; // 'Excluir'
							{ STR0010		, "PutHrsTab(cCalc)", 0, 3} }  // 'Calcular Horas'
							
Return aRotina