#INCLUDE "PONA160.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FILEIO.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "HEADERGD.CH" 
   
#DEFINE Confirma 1
#DEFINE Abandona 0


Static lPonap160Block

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para Controle de Uso do Calendario Fisico					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static lUseCalFis

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Pona160  ³ Autor ³ Equeipe Advanced RH   ³ Data ³ 18.11.97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Manuten‡„o de Transferencias de Turnos                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Gen‚rico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Marinaldo   ³17/10/01³Melhor³Alteracao na Tela de Transferencia de  Tur³±± 
±±³            ³--------³------³no. 									  ³±± 
±±³            ³--------³------³Alteracao nas Validacoes de Linha Digitada³±± 
±±³            ³--------³------³e de Todo o Conteudo Digitado Incluindo  a³±± 
±±³            ³--------³------³funcao Pn160LinOk()						  ³±± 
±±³            ³--------³------³Inclusao da Funcao Pn160PutTnoSeq() que se³±± 
±±³            ³--------³------³ra utilizada para retornar o Turno e a  Se³±± 
±±³            ³--------³------³quencia atual do Funcionario.			  ³±± 
±±³            ³--------³------³Inclusao da Funcao Pn160VldSeq() que  sera³±± 
±±³            ³--------³------³ra utilizada para validar as Sequencias di³±± 
±±³            ³--------³------³ditadas.								  ³±± 
±±³Marinaldo   ³06/11/01³010922³Tratamento de Troca de Regra de  Apontamen³±±
±±³            ³--------³------³to.    									  ³±±
±±³Mauricio MR ³18/01/02³012616³ Criado Ponto de Entrada para emissao de  ³±± 
±±³            ³        ³------³ documento logo apos a gravacao da troca  ³±±
±±³            ³        ³------³ de turno.                                ³±± 
±±³Marinaldo   ³20/02/02³Acerto³Retirada da Funcao e Referencia a   Funcao³±±
±±³            ³        ³------³AcertaSX3() pois as validacoes e os campos³±± 
±±³            ³        ³------³ja foram atualizados no ATUSX.            ³±± 
±±³            ³        ³------³Retirada da Verificacao de Existencia  dos³±± 
±±³            ³        ³------³Campos PF_REGRADE e PF_REGRAPA pois  esses³±± 
±±³            ³        ³------³Campos ja foram incluidos no ATUSX.		  ³±± 
±±³Marinaldo   ³12/03/02³Acerto³Quando montar o Array aSPF so   considerar³±± 
±±³            ³        ³------³o Elemento que possui todas as informacoes³±± 
±±³Marinaldo   ³03/05/02³Melhor³Verificar a Existencia dos Pontos de Entra³±±
±±³            ³        ³      ³da no Inicio do Programa.                 ³±± 
±±³Mauricio MR ³21/05/02³15597 ³Reinicializada a variavel aTnoGetInfoTab a³±±
±±³            ³        ³      ³cada funcionario. Assim, apos realizarmos ³±± 
±±³            ³        ³      ³1(uma) troca de turno, quando procedemos a³±±
±±³            ³        ³      ³troca de turno para outro funcionario, ga-³±±
±±³            ³        ³      ³rantimos que serao carregadas todas as tro³±±
±±³            ³        ³      ³cas deste funcionario em substituicao as  ³±±
±±³            ³        ³      ³trocas anteriores pertencentes ao funciona³±±
±±³            ³        ³      ³rio que o precedeu.                       ³±±
±±³Marinaldo   ³03/06/02³Melhor³Dimensionamento Automatico do Dialogo    e³±±
±±³            ³--------³------³da GetDados								  ³±±
±±³Marinaldo   ³25/07/02³Melhor³Validar os Turnos e Sequencias   Digitadas³±±
±±³            ³--------³------³em LinhaOk() e TudoOk()					  ³±±
±±³Marinaldo   ³25/07/02³Melhor³Inclusao de Consulta Via Tecla <F3>   para³±±
±±³            ³--------³------³os Campos de Sequencia 					  ³±±
±±³Marinaldo   ³08/08/02³Melhor³Inclusao de Botao para Consulta a   Tabela³±±
±±³            ³--------³------³de Horario             					  ³±± 
±±³MauricioMR  ³25/08/03³------³ Substituicao de Header por Protheus.ch   ³±± 
±±|Marinaldo   ³21/04/04³Melhor³Tratamento nos Lock dos Registros e Delete|±± 
±±³            ³--------³------³e Revisao do codigo    					  ³±± 
±±|Marinaldo   ³29/04/04³Melhor³Melhoria na performance para a montagem da|±± 
±±³            ³--------³------³do SPJ                 					  ³±± 
±±|Marinaldo   ³08/07/04³Melhor³Melhoria nas Validacoes de LinhaOk,TudOk. |±±
±±³Luiz Gustavo|29/11/06³------³ Inclusao da funcao MenuDef() para        ³±±  
±±³      	   ³--------³------³ versao 9.12                              ³±± 
±±³Luiz Gustavo³05/02/07³      ³Retiradas funcoes de ajuste de dicionario.³±±
±±³Pedro Eloy  ³28/03/07³121830³Ajuste no parametro GdMontaCols para WT.  ³±±
±±³Leandro Dr  ³21/08/08³      ³Ajuste na msg de erro p/ quando a primeira³±±
±±³            ³        ³      ³data e diferente da data de admissao.     ³±± 
±±³Christiane V³02/09/11³022823³Ajuste na apresentação de msg de erro na  ³±± 
±±³            ³        ³ /2011³primeira inclusão.                        ³±±
±±³Mohanad Odeh³03/01/12³032121³Inclusão da variável nOpcAuto como parame_³±± 
±±³            ³        ³ /2011³tro da função Pona160()                   ³±±
±±³            ³        ³TEDUCT³                                          ³±±
±±³Aldo Marini ³26/06/12³P11.7 ³REQ152-Inclusao da Transf.de Turno em Lote³±±
±±³M. Silveira ³24/10/13³THVXOF³Ajuste na Pn160LinOK p/ tornar a validacao³±±
±±³            ³        ³      ³dos registros mais eficiente.             ³±±
±±³Alex Hdez.  ³22/07/15³      ³Se inicializaron las variablas enteras a 0³±±
±±³            ³        ³      ³ de la función Pn160Grava()		     ³      ±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³						ATENCAO										  ³
³Foi criado o tratamento para o Parametro de utilizacao do SPJ a 	  ³
³partir da versao 10 MEX (Fase 4), no caso de utilizacao do SPJ deve  ³
³ser alterada a consulta padrao do campo sequencia (PF_SEQUEDE/ 	  ³
³PF_SEQUEATE) no SX3 para chamar a antiga funcao de consulta padrao   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Function Pona160(nOpcAuto)

Local aArea				:= GetArea()
Local aIndexSRA			:= {}
Local cFiltraSRA		:= ""		

Private bFiltraBrw		:= {|| NIL }
Private dPerIni			:= Ctod("//")
Private dPerFim			:= Ctod("//")
Private cCadastro		:= OemToAnsi(STR0011 ) // 'Tranferˆncia de Turno de Trabalho'
Private aRotina	:= MenuDef()
Private oPerFch		:= RHPERIODO():New()   // Objeto que contem os dados do ultimo Periodo Fechado PONTO (SRA)
Private oPeriodo	:= RHPERIODO():New()
Private lPona160Inc := .F. 
Private nPosDif		:= 0
Private cSeq		:= ""
Private cTurno		:= ""
Private dIniCal		:= Ctod("//")
Private dFimCal		:= Ctod("//")
Private lPona160Flt := .F.					//Verifica se havera filtro de Browse para o PONA160
Private aIniPadFun	:= {}
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para Controle de Uso do SPJ 								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Private lUseSPJ := ( SuperGetMv("MV_USESPJ",NIL,"0")  == "1" )
DEFAULT lPonap160Block := ExistBlock('PONAP160')

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para Controle de Uso do SPJ 								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
lUseSPJ := ( SuperGetMv("MV_USESPJ",NIL,"0")  == "1" )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para Controle de Uso do Calendario Fisico					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
lUseCalFis	:= ( SuperGetMv("MV_CALFIS",NIL,"0")  == "0" )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se o Modo de Acesso do SPF e SRA foram iguais e se este  ulti³
³mo nao estiver vazio.                                                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ValidArqPon() .and. ChkVazio('SRA')

	If nOpcAuto <> Nil
		Do Case
			Case nOpcAuto == 3
				INCLUI := .T.
				ALTERA := .F.
			Case nOpcAuto == 4
				INCLUI := .F.
				ALTERA := .T.
			OtherWise	
				INCLUI := .F.
				ALTERA := .F.
		EndCase		
	
		dbSelectArea('SRA')
		nPos := Ascan(aRotina,{|x| x[4]== nOpcAuto})
		If ( nPos <> 0 )
			bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPos,2 ] + "(a,b,c,d,e) }" )
			Eval( bBlock, Alias(), (Alias())->(Recno()),nPos)
		EndIf
	Else		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		dbSelectArea('SRA')
		cFiltraRh	:= ChkRh("PONA160","SRA","1")
		bFiltraBrw 	:= {|| FilBrowse("SRA",@aIndexSRA,@cFiltraRH) }
		Eval( bFiltraBrw )
		lPona160Flt := .T. //Existe Filtro
				
		mBrowse( 6, 1,22,75,"SRA",,,,,,fCriaCor() )
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		EndFilBrw("SRA",aIndexSra)
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura a Integridade do Sistema                            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		dbSelectArea('SPF')
		dbSetOrder(1)
		dbSelectArea('SRA')
	EndIf
EndIF

RestArea( aArea )

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN160Atu  ³ Autor ³ Fernando Joly Siquini ³ Data ³ 18.11.97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Programa de Vis.,Inc.,Alt. e Del. de Transf. de Turnos     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ pn160Atu(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn160Atu(cAlias,nReg,nOpcX)

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local aArea			:= GetArea()
Local aButtons		:= {}
Local aNotFields	:= { "PF_FILIAL", "PF_MAT" }
Local aFields		:= {}
Local aAltera   	:= {}
Local aNaoAltera	:= {}
Local aQueryCond	:= {}
Local oDlg			:= NIL
Local bSet15		:= { || aIniPadFun := Array(0), IF( oGet:TudoOk() , ( nOpcA := Confirma , oDlg:End() ) , nOpcA := Abandona ) }
Local bSet24		:= { || aIniPadFun := Array(0), oDlg:End() }
Local bDialogInit	:= { || EnchoiceBar( oDlg , bSet15 , bSet24 , NIL , aButtons ) , AlignObject(oDlg,{oPanel,oGet:oBrowse} , 1 , 2 , { 040 } ) }
Local cFil			:= xFilial( "SPF" , SRA->RA_FILIAL ) 
Local cMat			:= SRA->RA_MAT
Local cKey			:= ( cFil + cMat )
Local nOpcA			:= Abandona
Local nLoop			:= 0
Local nUsado   		:= 0
Local nPosData		:= 0
Local nPosSeq		:= 0
Local nPosTrn		:= 0
Local oFont
Local oGroup
Local oGet
Local oPanel
Local bSeekWhile	:= {|| SPF->PF_FILIAL + SPF->PF_MAT } 

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Coloca o cursor do Mouse em Estado de Espera				   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CursorWait()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega Array de Campos Alteraveis                           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cAlias := "SPF"

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega Ultimo Periodo Fechado Partir do SRA		   		   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If !Empty(SRA->RA_PRCFCH)
	oPerFch:cProcesso := SRA->RA_PRCFCH
	oPerFch:cPeriodo  := SRA->RA_PERFCH
	oPerFch:cRoteiro  := SRA->RA_ROTFCH
	oPerFch:cNumPagto := SRA->RA_NUPFCH	
	oPerFch:GetPer()
Endif

oPeriodo:cProcesso := SRA->RA_PROCES
oPeriodo:PerSel()	

dPerFim :=oPeriodo:dDataFim
dPerIni :=oPeriodo:dDataIni

Begin Sequence
		
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta a entrada de dados do arquivo                          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Private aColsAnt  		:= {}
	Private aRecnos  		:= {}
	Private aSPF			:= {}
	Private aTnoGetInfoTab	:= {}
	Private aHeader  		:= {}
	Private aCols    		:= {}
	Private aVirtual 		:= {}
	Private aVisual	 		:= {}
	Private aTela			:= {}
	Private aGets			:= {}

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas de Excecoes do Funcionario Antes da   ³
	³montagem do Calendario. Temos que realizar nesse momento pois ³
	³se deixarmos no 2o bloqueio abaixo, o Calendario podera ser di³
	³ferente em virtude de novas excecoes de outra sessao dessa ro ³
	³rotina.                                                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !Pona160Locks( nOpcX , cAlias, {}, ProcName() )
       Break
    EndIF

	dbSelectArea("SPF")
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega os Dados no aCols                                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aCols := GdMontaCols(	@aHeader	,;	//01 -> Array com os Campos do Cabecalho da GetDados
							@nUsado		,;	//02 -> Numero de Campos em Uso
							@aVirtual	,;	//03 -> [@]Array com os Campos Virtuais
							@aVisual	,;	//04 -> [@]Array com os Campos Visuais
							cAlias		,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
							aNotFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
							@aRecnos	,;	//07 -> [@]Array unidimensional contendo os Recnos
							cAlias   	,;	//08 -> Alias do Arquivo Pai
							cKey		,;	//09 -> Chave para o Posicionamento no Alias Filho
							bSeekWhile 	,;	// NIL 10 -> Bloco para condicao de Loop While
							NIL			,;	//11 -> Bloco para Skip no Loop While
							.T.			,;	//12 -> Se Havera o Elemento de Delecao no aCols 
							.F.			,;	//13 -> Se cria variaveis Publicas
							.T.			,;	//14 -> Se Sera considerado o Inicializador Padrao
							NIL			,;	//15 -> Lado para o inicializador padrao
							NIL			,;	//16 -> Opcional, Carregar Todos os Campos
							NIL		 	,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
							aQueryCond	,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
							.F.			,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
							.F.			,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
							.F.			,;	//21 -> Carregar Coluna Fantasma
							.F.			,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
							NIL			,;	//23 -> Verifica se Deve Checar se o campo eh usado
							NIL			,;	//24 -> Verifica se Deve Checar o nivel do usuario
							.T.			,;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
							NIL			,;	//26 -> [@]Array que contera as chaves conforme recnos
							.F.			,;	//27 -> [@]Se devera efetuar o Lock dos Registros
							.F.			,;	//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
							NIL			 ;	//29 -> Numero maximo de Locks a ser efetuado
				)
					
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Armazena a posicao no aCols 								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nPosData := GdFieldPos("PF_DATA")
	nPosSeq  := GdFieldPos("PF_SEQUEDE")
	nPosTrn	 := GdFieldPos("PF_TURNODE")

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Em caso de inclusao do registro muda a data inicio para a data do funcionario³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
	If ( nOpcX == 3 .and. Len(aCols) == 1 )
		aCols[ 01, nPosData ] := SRA->RA_ADMISSA
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Cria as Variaveis de Memoria e Carrega os Dados Conforme o ar³
	³ quivo														   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nLoop := 1 To nUsado
		PutFileInEof( "SPF" )
		aAdd( aFields , aHeader[ nLoop , 02 ] )
		SetMemVar( aHeader[ nLoop , 02 ] , NIL , .T. , .T. , .F. , .T. , NIL )
	Next nLoop

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define os Campos Editaveis								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) )
		nLoops := Len( aVisual )
		For nLoop := 1 To nLoops
			aAdd( aNaoAltera , aVisual[ nLoop ] )
		Next nLoop
		nLoops := Len( aFields )
		For nLoop := 1 To nLoops
			IF ( aScan( aNaoAltera , { |cNaoA| cNaoA == aFields[ nLoop ] } ) == 0 )
				aAdd( aAltera , aFields[ nLoop ] )
			EndIF
		Next nLoop
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inclus„o com Registros											 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( ( nOpcX == 3 ) .and. ( Len(aRecnos) > 0 ) )    
		If lPona160Inc			
			lPona160Inc := .F.	
			Break
		EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura o cursor do Mouse 								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		CursorArrow()
		Help(' ',1,'A160CREG')
		lRet := .F.
		Break
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Visualiza‡„o, Altera‡„o ou Exclus„o sem Registros				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ElseIF (;
				(;
					( nOpcX == 2 );
					.or.;
					( nOpcX == 4 );
					.or.;
					( nOpcX == 5 );
				);
				.and.;
				( Len(aRecnos) == 0 );
			)	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura o cursor do Mouse 								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		CursorArrow()
		Help(' ',1,'A160SREG')
		lRet := .F.
		Break
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas e Registros de Troc.Turno do Funcionario³
	³Depois da Montagem do Calendario.						         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !Pona160Locks( nOpcX , cAlias, aRecnos, ProcName() )
       Break
    EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Button Para Consulta dos Horarios da Tabela           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpcX == 3 .Or. nOpcX == 4 )
		aButtons := {; 
						{	"S4SB014N"					,;
   	    					{ || SPJExceConPad(3) }		,;
       						OemToAnsi( STR0006 )		,;	//'Consultar Turnos...'
       						OemToAnsi( STR0106 )		 ;	//'Consultar'
           				};
					}
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Efetua Copia de aCols para Comparacao na Gravacao            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aColsAnt := aClone( aCols )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aAdd( aObjCoords , { 015 , 020 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Dialogo para Apresentacao das Informacoes              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0011) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL	// 'Transferˆncia de Turno de Trabalho'

		@ 000,000 MSPANEL oPanel OF oDlg
		
		@ 000 , aObjSize[1,2] GROUP oGroup TO 020,( ( aObjSize[1,4]/100*10 - 2 ) )				LABEL OemToAnsi(STR0012) OF oPanel PIXEL	// "Matricula:"
		oGroup:oFont:= oFont
		@ 000 , ( ( aObjSize[1,4]/100*10 ) ) GROUP oGroup TO 020,( aObjSize[1,4]/100*80 - 2 )	LABEL OemToAnsi(STR0013) OF oPanel PIXEL	// "Nome:"
		oGroup:oFont:= oFont
		@ 000 , ( aObjSize[1,4]/100*80 ) GROUP oGroup TO 020, aObjSize[1,4]						LABEL OemToAnsi(STR0015) OF oPanel PIXEL	// "Admiss„o:"
		oGroup:oFont:= oFont
		@ 008 , ( aObjSize[1,2] + 5 )				SAY OemToAnsi(SRA->RA_MAT)						SIZE 050,10 OF oPanel PIXEL FONT oFont
		@ 008 , ( ( aObjSize[1,4]/100*10 ) + 5 )	SAY OemToAnsi(SRA->RA_NOME) 					SIZE 146,10 OF oPanel PIXEL FONT oFont
		@ 008 , ( ( aObjSize[1,4]/100*80 ) + 5 )	SAY Dtoc(fDtaAdmis())	   						SIZE 050,10 OF oPanel PIXEL FONT oFont
	
		oGet := MSGetDados():New(aObjSize[2,1],aObjSize[2,2],aObjSize[2,3],aObjSize[2,4],nOpcX,'Pn160LinOk','Pn160TudOk','',.T.,aAltera,1,NIL,999999999)

	ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Coloca o cursor do Mouse em Estado de Espera				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	CursorWait()

	IF ( ( nOpcA == Confirma ) .and. ( nOpcX # 2 ) )
		IF ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Grava apenas se Houverem Diferencas				 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !fCompArray( aCols , aColsAnt, @nPosDif )

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Guarda Seq/Turno/Primeira/Ultima data e que houve 	 ³
				³modificacao para reconstrucao do calendario fisico	 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				cSeq			:= aCols[ nPosDif, nPosSeq  ]
				cTurno			:= aCols[ nPosDif, nPosTrn  ]
				dIniCal			:= aCols[ nPosDif, nPosData ]
			
									
				Begin Transaction
					//-- Grava‡„o				
					Pn160Grava(cAlias)
					If nOpcx == 3
						lPona160Inc	:= .T.
					EndIf					
					
					If lUseCalFis
						/*
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Funcao de controle do calendario					 ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						//-- Obtem a maior data do calendario do funcionario
						fDatMaxCal( cFil, cMat, @dFimCal) 
						
						//-- Somente verifica e realiza alteracoes de a troca de turno se existir calendario
						//-- na data da troca.
						If !(dFimCal < dIniCal)
							fChgCal( SRA->RA_FILIAL, SRA->RA_MAT, SRA->RA_CC, cSeq, cTurno, dIniCal, dFimCal )
						Endif										
					EndIf
				End Transaction
				
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Executa Ponto de Entrada para a Emissao de Documento³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( lPonap160Block )
					ExecBlock('PONAP160' , .F., .F.)
				EndIF
			EndIF	
		Else
			//-- Exclus„o
			Pn160Exclu(cAlias)
		EndIF
		//--Processa Gatilhos
		EvalTrigger()
	EndIF

End Sequence

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Coloca o cursor do Mouse em Estado de Espera				   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CursorWait()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Libera Retgistros Locados		                               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
FreeLocks( cAlias , NIL , .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura a integridade da janela                             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aArea )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o cursor do Mouse 								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CursorArrow()

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn160Grava³ Autor ³Marinaldo de Jesus     ³ Data ³21/04/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Grava no arquivo de Transferˆncia de Turnos                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pona160                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn160Grava(cAlias)

Local aMestre		:= GdPutIStrMestre( 01 )
Local aItens		:= {}
Local cOpcao		:= "PUT"

#IFDEF TOP
	Local lTopDelItens	:= .T.
	Local lExecSort		:= .F.
#Else
	Local lTopDelItens	:= .F.
	Local lExecSort		:= .T.
#EndIF	

Local aCopyCols
Local nPosData 	:= 0
Local nPosTurnod	:= 0
Local nPosSequed	:= 0
Local nPosRegrad	:= 0
Local nPosTurnop	:= 0
Local nPosSequep	:= 0
Local nPosRegrap	:= 0
Local nDeleted	:= 0
Local nLoop		:= 0
Local nLoops		:= 0

Local nPosTrfUnid	:= GdFieldPos("PF_TRFUNID")
Local nPosTrfObs	:= GdFieldPos("PF_TRFOBS")
Local nNumTRF		:= 0
Local aLogTransf	:= {}
Local aLogXTransf	:= {}
Local aLogTitle		:= {}
Local nX			:= 0
Local bMakeLog 		:= {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega os Itens Apenas se Houveram Alteracoes ou na Exclusao³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aItens := GdPutIStrItens( 01 )

aItens[ 01 , 01 ] := "SPF"
aItens[ 01 , 02 ] := {;
						{ "FILIAL"	, xFilial( "SPF" , xFilial( "SRA" ) ) },;
						{ "MAT"		, SRA->RA_MAT };
					 }
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica se esta no Relase 11.7 e se existe os campos de ID e Observacao³
³ para atualizar o conteudo do Acols                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If GetRpoRelease() >= "R7" .And. SPF->(FieldPos("PF_TRFUNID")) > 0 .And. SPF->(FieldPos("PF_TRFOBS")) > 0

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Gera a numeracao sequencial do lote de transferencia                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+SubStr(Time(),7,2))	// 99:99:99
	SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_TRFUNID" ) ) )
	While SPF->(dbSeek( xFilial("SPF") + Str(nNumTRF) ))
		nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+StrZero(Val(SubStr(Time(),7,2))+1,2) )	// AAAAMMDDHHMMSS
	Enddo
	SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_MAT+DTOS(PF_DATA)" ) ) )
		
	aEval( aCols , {|x| IF( Empty(x[nPosTrfUnid]) , ( x[nPosTrfUnid] := nNumTRF ) , NIL ) } )
	aEval( aCols , {|x| IF( Empty(x[nPosTrfObs]) , ( x[nPosTrfObs] := SRA->RA_FILIAL+SRA->RA_MAT ) , NIL ) } )

Endif

aItens[ 01 , 03 ] := aClone( aHeader  )
aItens[ 01 , 04 ] := aClone( aCols    )
aItens[ 01 , 05 ] := aClone( aVirtual )
aItens[ 01 , 06 ] := aClone( aRecnos  )
aItens[ 01 , 07 ] := {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seta a Gravacao ou Exclusao Apenas se Houveram Alteracoes  ou³
³ se foi Selecionada a Exclusao								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aMestre[ 01 , 01 ]	:= "SRA"
aMestre[ 01 , 02 ]	:= SRA->( Recno() )
aMestre[ 01 , 03 ]	:= .F.
aMestre[ 01 , 04 ]	:= {}
aMestre[ 01 , 05 ]	:= {}
aMestre[ 01 , 06 ]	:= {}
aMestre[ 01 , 07 ]	:= aClone( aItens )

Begin Transaction

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Grava as Informacoes                        				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	GdPutInfoData( aMestre , cOpcao , lTopDelItens , lExecSort )

	nPosData	:= GdFieldPos("PF_DATA")
	nPosTurnod	:= GdFieldPos("PF_TURNODE")
	nPosSequed	:= GdFieldPos("PF_SEQUEDE")
	nPosRegrad	:= GdFieldPos("PF_REGRADE")
	nPosTurnop	:= GdFieldPos("PF_TURNOPA")
	nPosSequep	:= GdFieldPos("PF_SEQUEPA")
	nPosRegrap	:= GdFieldPos("PF_REGRAPA")
	nDeleted	:= GdFieldPos("GDDELETED")
	nLoops		:= Len( aCols )

	If GetRpoRelease() >= "R7" .And. SPF->(FieldPos("PF_TRFUNID")) > 0 .And. SPF->(FieldPos("PF_TRFOBS")) > 0

		For nX := 1 To Len(aCols)
			// Data         Turno De   Seq De   Regra De   Turno Para   Seq Para   Regra Para   Num. Id.         Observacao
			// 99/99/9999   999        99       99         999          99         99           99999999999999   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
			If !( aCols[ nX , nDeleted ] )
				aAdd(aLogTransf, Padr(DTOC(aCols[ nX, nPosData]),10) + Space(3) + ;	// Data
								 Padr(aCols[ nX , nPosTurnod ],8) + Space(3) + ;       // Turno de
								 Padr(aCols[ nX , nPosSequed ],6) + Space(3) + ;		// Seq De
								 Padr(aCols[ nX , nPosRegrad ],8) + Space(3) + ;		// Regra De
								 Padr(aCols[ nX , nPosTurnop ],10) + Space(3) + ;		// Turno Para
								 Padr(aCols[ nX , nPosSequep ],8) + Space(3) + ;		// Seq Para
								 Padr(aCols[ nX , nPosRegrap ],10) + Space(3) + ;		// Regra Para
								 StrZero(aCols[ nX , nPosTrfUnid ],14) + Space(3) + ;	// Num.iD
								 aCols[ nX , nPosTrfObs ]  )							// Observacao
			Endif
		Next

	Endif
	
	//-- Grava o Turno no Arquivo do Funcion rio, com base na Data Atual
	aCopyCols := aClone(aCols)
	aSort( aCopyCols , , , { |x,y| DtoS( x[ nPosData ] ) > DtoS( y [ nPosData ] ) } )
	For nLoop := 1 To nLoops
		IF ( !( aCopyCols[ nLoop , nDeleted ] ) .and. aCopyCols[ nLoop , nPosData ] <= dPerFim )

			// Monta log com a atualização no cadastro de funcionario
			If GetRpoRelease() >= "R7" 
				aAdd(aLogTransf, " " )
				aAdd(aLogTransf, STR0145 )	// "Atualização no cadastro do funcionário"
				aAdd(aLogTransf, STR0146 + " " + Padr(SRA->RA_TNOTRAB,3) + STR0147 + " " + Padr(aCopyCols[ nLoop , nPosTurnoP ],3)  )	// "Turno anterior:" ### "Turno atual:"
				aAdd(aLogTransf, STR0148 + " " + Padr(SRA->RA_SEQTURN,3) + STR0149 + " " + Padr(aCopyCols[ nLoop , nPosSequeP ],3)  )	// "Seq.  anterior:" ### "Seq.  atual:"
				aAdd(aLogTransf, STR0150 + " " + Padr(SRA->RA_REGRA,3)   + STR0151 + " " + Padr(aCopyCols[ nLoop , nPosRegraP ],3)  )	// "Regra anterior:" ### "Regra atual:"
			Endif

			IF RecLock("SRA")
				SRA->RA_TNOTRAB	:= aCopyCols[ nLoop , nPosTurnoP ]
				SRA->RA_SEQTURN	:= aCopyCols[ nLoop , nPosSequeP ]
				SRA->RA_REGRA	:= aCopyCols[ nLoop , nPosRegraP ]
				SRA->( MsUnlock() )
			EndIF
			Exit
		Else
			IF ( ( nLoop == 1 ) .and. ( nLoop == nLoops ) )
				// Monta log com a atualização no cadastro de funcionario
				If GetRpoRelease() >= "R7" 
					aAdd(aLogTransf, " " )
					aAdd(aLogTransf, STR0145 )	// "Atualização no cadastro do funcionário"
					aAdd(aLogTransf, STR0146 + " " + Padr(SRA->RA_TNOTRAB,3) + STR0147 + " " + Padr(aCopyCols[ nLoop , nPosTurnoD ],3)  )	// "Turno anterior:" ### "Turno atual:"
					aAdd(aLogTransf, STR0148 + " " + Padr(SRA->RA_SEQTURN,3) + STR0149 + " " + Padr(aCopyCols[ nLoop , nPosSequeD ],3)  )	// "Seq.  anterior:" ### "Seq.  atual:"
					aAdd(aLogTransf, STR0150 + " " + Padr(SRA->RA_REGRA,3)   + STR0151 + " " + Padr(aCopyCols[ nLoop , nPosRegraD ],3)  )	// "Regra anterior:" ### "Regra atual:"
				Endif

				IF RecLock("SRA")
					SRA->RA_TNOTRAB	:= aCopyCols[ nLoop , nPosTurnoD ]
					SRA->RA_SEQTURN	:= aCopyCols[ nLoop , nPosSequeD ]
					SRA->RA_REGRA	:= aCopyCols[ nLoop , nPosRegraD ]
					SRA->( MsUnlock() )
				EndIF
				Exit
			EndIF
		EndIF
	Next nLoop

	//Se Excluiu Todas as Trocas de Turno Retira a Sequencia e a Regra do Cadastro
	SPF->( dbSetOrder( 1 ) )
	IF !SPF->( dbSeek( xFilial( "SRA" ) + SRA->RA_MAT , .F. ) )

		// Monta log com a atualização no cadastro de funcionario
		If GetRpoRelease() >= "R7" 
			aAdd(aLogTransf, STR0152 )	// "Foi excluido o conteudo dos campos de Sequencia de Turno e Regra de Apontamento do funcionario"
		Endif

		IF RecLock("SRA")
			SRA->RA_SEQTURN	:= Space( TamSx3( "RA_SEQTURN" )[1] )
			SRA->RA_REGRA	:= Space( TamSx3( "RA_REGRA" )[1] )
			SRA->( MsUnlock() )
		EndIF
	EndIF

End Transaction

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Grava as Informacoes                        				   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If GetRpoRelease() >= "R7" .And. SPF->(FieldPos("PF_TRFUNID")) > 0 .And. SPF->(FieldPos("PF_TRFOBS")) > 0
	IF !Empty( aLogTransf ) 

		aAdd(aLogTitle, STR0143 ) // "Data        Turno De   Seq De   Regra De   Turno Para   Seq Para   Regra Para Num. Id.        Observacao"
		//                            99/99/9999  999        99       99         999          99         99         99999999999999  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

		aAdd( aLogXTransf,  STR0142 + ": " + SRA->RA_FILIAL + " - " + SRA->RA_MAT + " - " + SRA->RA_NOME  ) // "Funcionario"
		aEval( aLogTransf , {|x| aAdd(aLogXTransf,x) } )
		
		// "Log de Ocorrencias"
		bMakeLog := { || fMakeLog( { aLogXTransf } , aLogTitle,  NIL , .T. , FunName() , NIL , "G" , "L" , NIL , NIL ) }
		MsAguarde( bMakeLog , OemToAnsi( STR0144 ) ) // "Gerando Log de Transferencia de Turno"
	EndIF
Endif

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn160Exclu³ Autor ³ Marinaldo de Jesus    ³ Data ³17/10/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Exclui registros de Transferˆncias de Turnos               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn160Exclu( cAlias )

Begin Transaction
	PonDelRecnos( "SPF" , @aRecnos )
	//Se Excluiu Todas as Trocas de Turno Retira a Sequencia e a Regra do Cadastro
	SPF->( dbSetOrder( 1 ) )
	IF !SPF->( dbSeek( xFilial( "SRA" ) + SRA->RA_MAT , .F. ) )
		IF RecLock("SRA")
			SRA->RA_SEQTURN		:= Space( TamSx3( "RA_SEQTURN" )[1] )
			SRA->RA_REGRA		:= Space( TamSx3( "RA_REGRA" )[1] )
			SRA->( MsUnlock() )
		EndIF
	EndIF
End Transaction

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³                   ROTINAS DE CRITICA DE CAMPOS                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn160LinOK³Autor  ³ Marinaldo de Jesus    ³ Data ³08/07/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica linha digitada                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn160LinOK(o, lTdOk)

Local lLinOk	:= .T.
Local lData		:= .F.
Local lAltInfo	:= .F.
Local nPosData	:= GdFieldPos( "PF_DATA" )
Local nPosTnoDe	:= GdFieldPos( "PF_TURNODE" )
Local nPosSeqDe	:= GdFieldPos( "PF_SEQUEDE" )
Local nPosRegDe	:= GdFieldPos( "PF_REGRADE" )
Local nPosTnoPa	:= GdFieldPos( "PF_TURNOPA" )
Local nPosSeqPa	:= GdFieldPos( "PF_SEQUEPA" )
Local nPosRegPa	:= GdFieldPos( "PF_REGRAPA" )
Local nDelete	:= GdFieldPos( "GDDELETED" )

Local aCposKey
Local nLoop
Local nLoops
Local nLenaSPF
Local bValid

DEFAULT lTdOk := .F. //Chamada atraves da Pn160TudOk()

bValid := { |x| If (	aCols[ n, nPosData ] != aColsAnt[ n, nPosData ] .or.;
						aCols[ n, nPosTnoDe] != aColsAnt[ n, nPosTnoDe] .or.;
						aCols[ n, nPosSeqDe] != aColsAnt[ n, nPosSeqDe] .or.;
						aCols[ n, nPosRegDe] != aColsAnt[ n, nPosRegDe] .or.;
						aCols[ n, nPosTnoPa] != aColsAnt[ n, nPosTnoPa] .or.;
						aCols[ n, nPosSeqPa] != aColsAnt[ n, nPosSeqPa] .or.;
						aCols[ n, nPosRegPa] != aColsAnt[ n, nPosRegPa], .T., .F. ) }

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Caso o periodo esteja fechado nao permite alteracoes		   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/ 

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ A primeira Troca deve ser referente a data de Admissao	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/ 
If n == 1
	If ( lData := ( aCols[ n, nPosData ]  <> SRA->RA_ADMISSA ) )
		MsgInfo( OemToAnsi(STR0109) , OemToAnsi(STR0107) )
		Return(.F.)
	EndIf
Endif             

If !lData
	If ( o:nOpc == 3 )
		lData := ( aCols[ n, nPosData ] <= oPerFch:dDataFim .and. oPerFch:lFechado .and. ( n > Len(aColsAnt) )) 
	
	ElseIf  ( o:nOpc == 4 )
		If !( Len(aCols) > Len(aColsAnt) )
			If lAltInfo := Eval( bValid )
				lData := ( aCols[ n, nPosData ] <= oPerFch:dDataFim .and. oPerFch:lFechado .and. ( n > Len(aColsAnt) ) )
			EndIf
		Else
			lData := ( aCols[ n, nPosData ] <= oPerFch:dDataFim .and. oPerFch:lFechado .and. ( n > Len(aColsAnt) ))
		EndIf
	EndIf
Endif

If ( lData )
	MsgInfo( OemToAnsi(STR0108) , OemToAnsi(STR0107) )
	lLinOk := .F.
Else

	Begin Sequence

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Valida a linha somente na inclusao ou quando houver alteracao de fato ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !( aCols[ n , nDelete ] ) .And. ( lTdOk .Or. lAltInfo .Or. Len(aCols) # Len(aColsAnt) )
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Itens Duplicados na GetDados						   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aCposKey := { "PF_DATA" }
			IF !( lLinOk := GdCheckKey( aCposKey , 4 ) )
				Break
			EndIF
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se o Campos Estao Devidamente Preenchidos		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aAdd( aCposKey , "PF_TURNODE" )
			aAdd( aCposKey , "PF_TURNOPA" )
			aAdd( aCposKey , "PF_SEQUEDE" )
			aAdd( aCposKey , "PF_SEQUEPA" )
			aAdd( aCposKey , "PF_REGRADE" )
			aAdd( aCposKey , "PF_REGRAPA" )
			IF !( lLinOk := GdNoEmpty( aCposKey ) )
		    	Break
			EndIF
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Turno e Sequencia Digitados Sao Validos		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := Pn160VldSeq( aCols[ n , nPosTnoDe ] , aCols[ n , nPosSeqDe ] , .T. ) )
				Break
			EndIF
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Turno e Sequencia Digitados Sao Validos		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := Pn160VldSeq( aCols[ n , nPosTnoPa ] , aCols[ n , nPosSeqPa ] , .T.  ) )
				Break
			EndIF
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Regra Digitada eh Valida						   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := PosSPA( aCols[ n , nPosRegDe ] , xFilial( "SPF" ) , NIL , RetOrdem( "SPA" , "PA_FILIAL+PA_CODIGO" ) , .F. ) )
				Break
			EndIF
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Regra Digitada eh Valida						   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := PosSPA( aCols[ n , nPosRegPa ] , xFilial( "SPF" ) , NIL , RetOrdem( "SPA" , "PA_FILIAL+PA_CODIGO" ) , .F. ) )
				Break
			EndIF

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega as Trocas de Turno do Funcionario           		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aSPF 			:= {}
			aTnoGetInfoTab	:= {}
			nLoops			:= Len( aCols )
			For nLoop := 1 To nLoops
				IF !( aCols[ nLoop , nDelete ] )
					aAdd( aSPF , Array(7) )
					nLenaSPF := Len( aSPF )
					aSPF[nLenaSPF,01] := aCols[ nLoop , nPosTnoDe ]
					aSPF[nLenaSPF,02] := aCols[ nLoop , nPosTnoPa ]
					aSPF[nLenaSPF,03] := aCols[ nLoop , nPosData  ]
					aSPF[nLenaSPF,04] := aCols[ nLoop , nPosSeqDe ]
					aSPF[nLenaSPF,05] := aCols[ nLoop , nPosSeqPA ]
					aSPF[nLenaSPF,06] := aCols[ nLoop , nPosRegDe ]
					aSPF[nLenaSPF,07] := aCols[ nLoop , nPosRegPA ]
				EndIF
			Next nLoop
			fTrocaTno(dPerIni,dPerFim,@aTnoGetInfoTab,aSPF)	

		EndIF
		
	End Sequence
	
EndIf
	
Return( lLinOk )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn160TudOk³ Autor ³ Marinaldo de Jesus    ³ Data ³08/07/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Critica tudo antes de salvar                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn160TudOk( o )

Local lTudoOk	:= .T.
Local nSvn		:= n
Local nLoop
Local nLoops

Begin Sequence

	nLoops := Len( aCols )
	For nLoop := 1 To nLoops
		n := nLoop
		IF !( lTudoOk := Pn160LinOK( o, .T. ) )
			Break
		EndIF
	Next nLoop

End Sequence

n := nSvn

Return( lTudoOk )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn160PutTnoSeq³Autor³ Marinaldo de Jesus  ³ Data ³17/10/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega o Turno ou Sequencia correspondente a data Atual    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn160PutTnoSeq( cPut )										³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponto Eletronico                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³.T. Por se Tratar de Validacao								³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<void>														³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn160PutTnoSeq()

Local aColsClone	:= aClone( aCols )
Local dData			:= &(ReadVar())
Local cTno			:= SRA->RA_TNOTRAB
Local cSeq			:= SRA->RA_SEQTURN
Local nX			:= 0
Local nPosData		:= GdFieldPos("PF_DATA")
Local nPosSeqPa		:= GdFieldPos("PF_SEQUEPA")
Local nPosTnoPa		:= GdFieldPos("PF_TURNOPA")
Local nPosRegPa 	:= GdFieldPos("PF_REGRAPA")
Local nPosSeqDe		:= GdFieldPos("PF_SEQUEDE")
Local nPosTnoDe		:= GdFieldPos("PF_TURNODE")
Local nPosRegDe		:= GdFieldPos("PF_REGRADE")
Local nDelete		:= GdFieldPos("GDDELETED")
Local nLenaCols		:= Len( aCols )
Local nLenaSPF		:= 0
Local uRet			:= Nil

If ( dData <= oPerFch:dDataFim .and. oPerFch:lFechado )
	MsgInfo( OemToAnsi(STR0108) , OemToAnsi(STR0107) )
    Return(.F.)
EndIf

IF dData > dPerFim
	aSort( aColsClone ,,, { |x,y| x[nPosData] > y[nPosData] } )	
	( aSPF := {} , aTnoGetInfoTab := {} )
	For nX := 1 To nLenaCols
		IF !aColsClone[ nX , nDelete ]
			IF (; 
					aColsClone[ nX , nPosData ] <= dData	.and.;
			    	!Empty( aColsClone[ nX , nPosSeqPa ] )	.and.;
			   		!Empty( aColsClone[ nX , nPosTnoPa ] )	.and.;
			    	!Empty( aColsClone[ nX , nPosSeqDe ] )	.and.;
			   		!Empty( aColsClone[ nX , nPosTnoDe ] )	.and.;
			   		!Empty( aColsClone[ nX , nPosRegDe ] )  .and.;
			   		!Empty( aColsClone[ nX , nPosRegPa ] ) 		 ;
			   	)	
				aAdd( aSPF , Array(7) )
				nLenaSPF := Len( aSPF )
				aSPF[nLenaSPF,01] := aColsClone[ nX , nPosTnoDe ]
				aSPF[nLenaSPF,02] := aColsClone[ nX , nPosTnoPa ]
				aSPF[nLenaSPF,03] := aColsClone[ nX , nPosData  ]
				aSPF[nLenaSPF,04] := aColsClone[ nX , nPosSeqDe ]
				aSPF[nLenaSPF,05] := aColsClone[ nX , nPosSeqPa ]
				aSPF[nLenaSPF,06] := aCols[ nX , nPosRegDe ]
				aSPF[nLenaSPF,07] := aCols[ nX , nPosRegPA ]
			EndIF	
		EndIF	
	Next nX	
	IF !Empty( aSPF )
		cTno := aSPF[01,02]
		cSeq := aSPF[01,05]
	EndIF
	fTrocaTno(dPerIni,dData,@aTnoGetInfoTab,aSPF)
	aSort( aTnoGetInfoTab ,,, { |x,y| x[3] > y[3] } )
Else
	( aSPF := {} , aTnoGetInfoTab := {} )
	For nX := 1 To nLenaCols
		IF !aCols[ nX ,nDelete ]
			IF (; 
					!Empty( aCols[ nX , nPosData  ] )	.and.;
			    	!Empty( aCols[ nX , nPosSeqPa ] )	.and.;
			   		!Empty( aCols[ nX , nPosTnoPa ] )	.and.;
			    	!Empty( aCols[ nX , nPosSeqDe ] )	.and.;
			   		!Empty( aCols[ nX , nPosTnoDe ] )	.and.;
			   		!Empty( aCols[ nX , nPosRegDe ] )	.and.;
			   		!Empty( aCols[ nX , nPosRegPa ] )		 ;
			   	)
				aAdd( aSPF , Array(7) )
				nLenaSPF := Len( aSPF )
				aSPF[nLenaSPF,01] := aCols[ nX , nPosTnoDe ]
				aSPF[nLenaSPF,02] := aCols[ nX , nPosTnoPa ]
				aSPF[nLenaSPF,03] := aCols[ nX , nPosData  ]
				aSPF[nLenaSPF,04] := aCols[ nX , nPosSeqDe ]
				aSPF[nLenaSPF,05] := aCols[ nX , nPosSeqPA ]
				aSPF[nLenaSPF,06] := aCols[ nX , nPosRegDe ]
				aSPF[nLenaSPF,07] := aCols[ nX , nPosRegPA ]
			EndIF
		EndIF
	Next nX
	fTrocaTno(dPerIni,dPerFim,@aTnoGetInfoTab,aSPF)
EndIF

GdFieldPut("PF_TURNODE",( If (!Empty(uRet := GetInfoPosTab(14,,dData,,,,,,cTno,cSeq)),uRet,Space(GetSx3Cache("PF_TURNODE","X3_TAMANHO")))))
GdFieldPut("PF_SEQUEDE",( If (!Empty(uRet := GetInfoPosTab(08,,dData,,,,,,cTno,cSeq)),uRet,Space(GetSx3Cache("PF_SEQUEDE","X3_TAMANHO")))))
GdFieldPut("PF_REGRADE",( If (!Empty(uRet := GetInfoPosTab(23,,dData,,,,,,cTno,cSeq)),uRet,Space(GetSx3Cache("PF_REGRADE","X3_TAMANHO")))))
                                      
Return( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn160VldSeq   ³Autor³ Marinaldo de Jesus  ³ Data ³17/10/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar a Sequencia digitada                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn160VldSeq													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponto Eletronico                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³lRet 														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<void>														³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn160VldSeq( cTno , cSeq , lFormalParameters  )

Local cCpo	:= ""

Local lRet	:= .T.
Local cAlias:= If(lUseSPJ, "SPJ", "RF2")
Local cFil	:= xFilial(cAlias)

DEFAULT cTno				:= ""
DEFAULT cSeq				:= ""
DEFAULT lFormalParameters	:= .F.

IF ( !lFormalParameters )
	cCpo	:= ReadVar()
	cSeq	:= &(cCpo)
	IF ( Type( "aHeader" ) == "A" ) .and. ( Type( "aCols" ) == "A" )
		cTno := IF("PF_SEQUEDE" $ cCpo , GdFieldGet("PF_TURNODE") , GdFieldGet("PF_TURNOPA") )
	ElseIF ( IsMemVar( "PF_TURNODE" ) .and. IsMemVar( "PF_TURNOPA" ) )
		cTno := IF("PF_SEQUEDE" $ cCpo , GetMemVar( "PF_TURNODE" ) , GetMemVar( "PF_TURNODE" ) )
	Else
		cTno := SRA->RA_SEQTURN
	EndIF	
EndIF

IF !( lRet := (cAlias)->( MsSeek( cFil + cTno + cSeq ) ) )
	Help( ' ' , 1 , 'PONA160OBR' , , OemToAnsi( STR0021 ) , 5 , 0 ) //Sequencia Nao Cadastrada Para o Turno
EndIF

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pona160F3Seq  ³Autor³ Marinaldo de Jesus  ³ Data ³25/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Filtro para a Consulta <F3> para a Consulta XPJ             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pona160F3Seq()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponto Eletronico                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³cRet 														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<void>														³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pona160F3Seq()

Local aTabTno	:= {}
Local aUnique	:= {"PJ_FILIAL","PJ_TURNO","PJ_SEMANA"}
Local cVar		:= ""
Local cIndexKey	:= SPJ->( IndexKey() )
Local cFil		:= xFilial( "SPJ" )
Local cTno		:= ""
Local cRet 		:= "@#.T.@#"
Local cKeys		:= ""
Local nSpjRecno	:= SPJ->( Recno() )
Local nTab		:= 0
Local nTabs		:= 0
Local nLoop		:= 0
Local nLoops	:= 0
Local nBytes	:= 0

Static __cXPJF3Seq__

Begin Sequence
       
	IF ( ( Type( "aHeader" ) == "A" .and. Type( "aCols" ) == "A" ) )
		cVar := ReadVar()
		IF ( !Empty( __cXPJF3Seq__ ) .and. ( "RA_SEQTURN" $ __cXPJF3Seq__ ) )
			__cXPJF3Seq__ := NIL
		EndIF
		IF ( Empty( cVar ) .and. !Empty( __cXPJF3Seq__ ) )
			cVar := __cXPJF3Seq__
		EndIF
		IF ( "PF_SEQUEDE" $ cVar )
			IF ( !Empty( __cXPJF3Seq__ ) .and. ( "PF_SEQUEPA" $ __cXPJF3Seq__ ) )
				__cXPJF3Seq__ := NIL
			EndIF
			cTno := GdFieldGet( "PF_TURNODE" )
		ElseIF ( "PF_SEQUEPA" $ cVar )
			IF ( !Empty( __cXPJF3Seq__ ) .and. ( "PF_SEQUEDE" $ __cXPJF3Seq__ ) )
				__cXPJF3Seq__ := NIL
			EndIF
			cTno := GdFieldGet( "PF_TURNOPA" )
		EndIF
		DEFAULT __cXPJF3Seq__ := cVar
	ElseIF ( IsMemVar("RA_TNOTRAB") .and. IsMemVar("RA_SEQTURN") )
		cVar := ReadVar()
		IF ( !Empty( __cXPJF3Seq__ ) .and. !( "RA_SEQTURN" $ __cXPJF3Seq__ ) )
			__cXPJF3Seq__ := NIL
		EndIF
		IF ( Empty( cVar ) .and. !Empty( __cXPJF3Seq__ ) )
			IF ( "RA_SEQTURN" $ __cXPJF3Seq__ )
				cVar := __cXPJF3Seq__
			EndIF
		EndIF
		IF ( "RA_SEQTURN" $ cVar )
			cTno := GetMemVar( "RA_TNOTRAB" )
		EndIF
		DEFAULT __cXPJF3Seq__ := cVar
	EndIF
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa __aUniqueKey__ em UniqueKey()							 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	UniqueKey()
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega os Recnos da Tabela de Horario Padrao							 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	fTabPadrao( @aTabTno , cFil , cTno , .F. , { || UniqueKey( aUnique ) } )
	nTabs := Len( aTabTno )
	For nTab := 1 To nTabs
		IF ( ( cFil <> aTabTno[ nTab , 01 ] ) .and. ( cTno <> aTabTno[ nTab , 02 ] ) )
			Loop
		EndIF
		nLoops := Len( aTabTno[ nTab , 03 ] )
		For nLoop := 1 To nLoops
			SPJ->( dbGoto( aTabTno[ nTab , 03 , nLoop , 37 ] ) )
			cKeys	+= SPJ->( &( cIndexKey ) ) + "/"
			nBytes	+= Len( cKeys )
			#IFDEF TOP
				IF ( nBytes > 2000 ) //Filter greater than 2000 bytes
					cKeys := ""
					Break
				EndIF
			#ENDIF
		Next nLoop
		SPJ->( MsGoto( nSpjRecno ) )
	Next nTab

End Sequence

IF !Empty( cTno )
	IF !Empty( cKeys )
		cRet := "@#PJ_TURNO=='"+cTno+"'.and."+cIndexKey+"$'"+cKeys+"'@#"
	Else
		cRet := "@#PJ_TURNO=='"+cTno+"'@#"
	EndIF
EndIF

Return( cRet ) 

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³RF2FilConPad ³Autor ³Igor Franzoi          ³ Data ³21/02/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Consulta padrao do RF2 para retorno de Sequencias			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³RF2FilConPad ( nOpc )										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes / Trocas de Turno                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RF2FilConPad()
         
Local cVar	:= ""
Local cTno	:= ""
Local cRet	:= "@#.T.@#"

Static __cRF2F3Seq__

Begin Sequence

	IF ( ( Type( "aHeader" ) == "A" .and. Type( "aCols" ) == "A" ) )
		cVar := ReadVar()
		IF ( !Empty( __cRF2F3Seq__ ) .and. ( "RA_SEQTURN" $ __cRF2F3Seq__ ) )
			__cRF2F3Seq__ := NIL
		EndIF
		IF ( Empty( cVar ) .and. !Empty( __cRF2F3Seq__ ) )
			cVar := __cRF2F3Seq__
		EndIF
		IF ( "PF_SEQUEDE" $ cVar )
			IF ( !Empty( __cRF2F3Seq__ ) .and. ( "PF_SEQUEPA" $ __cRF2F3Seq__ ) )
				__cRF2F3Seq__ := NIL
			EndIF
			cTno := GdFieldGet( "PF_TURNODE" )
		ElseIF ( "PF_SEQUEPA" $ cVar )
			IF ( !Empty( __cRF2F3Seq__ ) .and. ( "PF_SEQUEDE" $ __cRF2F3Seq__ ) )
				__cRF2F3Seq__ := NIL
			EndIF
			cTno := GdFieldGet( "PF_TURNOPA" )
		EndIF
		DEFAULT __cRF2F3Seq__ := cVar
	ElseIF ( IsMemVar("RA_TNOTRAB") .and. IsMemVar("RA_SEQTURN") )
		cVar := ReadVar()
		IF ( !Empty( __cRF2F3Seq__ ) .and. !( "RA_SEQTURN" $ __cRF2F3Seq__ ) )
			__cRF2F3Seq__ := NIL
		EndIF
		IF ( Empty( cVar ) .and. !Empty( __cRF2F3Seq__ ) )
			IF ( "RA_SEQTURN" $ __cRF2F3Seq__ )
				cVar := __cRF2F3Seq__
			EndIF
		EndIF
		IF ( "RA_SEQTURN" $ cVar )
			cTno := GetMemVar( "RA_TNOTRAB" )
		EndIF
		DEFAULT __cRF2F3Seq__ := cVar
	EndIF
	
End Sequence

IF !Empty( cTno )
		cRet := "@#RF2_TURNO=='"+cTno+"'@#"
EndIF	

Return( cRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pona160Locks    ³Autor³Mauricio MR         ³ Data ³09/03/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Lancamentos de Troca de Turno do Funcionario        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA140                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pona160Locks( nOpc , cAlias, aRecnos, cProcName )

Local lLocks	:= .T.
Local aRecAux	:= {}

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Visualizacao nem Inclusao	 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpc == 2 )
		Break
	EndIF

	aEval( aRecnos , {|x| IF( !Empty(x) , aAdd( aRecAux , x ) , NIL ) } )

	IF !( lLocks := WhileNoLock( cAlias , aRecAux , {xFilial(cAlias)+SRA->RA_MAT+cProcName} , 1 , 1 , .T. , NIL ) )
		Break
	EndIF

End Sequence

Return( lLocks ) 

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fChgCal		    ³Autor³Igor Franzoi        ³ Data ³04/04/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Controla execucao para reconstruir os calendarios			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA140                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fChgCal( cFil, cMat, cCC, cSeqDe, cTrnDe, dDtaIni, dDtaFim )

Begin Transaction

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o calendario do inicio do periodo atual ate o ultimo ³
	³ calendario criado											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/						
	fDelCal( cFil , cMat, dDtaIni )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Efetua criacao do calendario p/ o periodo 				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	lRet := fWriteCal( cFil, cMat, cCC, cSeqDe, cTrnDe, dDtaIni, dDtaFim )

End Transaction

Return ( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Almeida     ³ Data ³29/11/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA160                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function MenuDef()
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define array contendo as Rotinas a executar do programa      ³
³ ----------- Elementos contidos por dimensao ------------     ³
³ 1. Nome a aparecer no cabecalho                              ³
³ 2. Nome da Rotina associada                                  ³
³ 3. Usado pela rotina                                         ³
³ 4. Tipo de Transa‡„o a ser efetuada                          ³
³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
³    2 - Simplesmente Mostra os Campos                         ³
³    3 - Inclui registros no Bancos de Dados                   ³
³    4 - Altera o registro corrente                            ³
³    5 - Remove o registro corrente do Banco de Dados          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local aRotina := {}

If GetRpoRelease() >= "R7"
	aRotina :=       {	{ STR0004 , 'PesqBrw'	, 0 , 1, ,.F. },;	// 'Pesquisar'
					{ STR0005 , 'Pn160Atu'	, 0 , 2 },; 		// 'Visualizar'
					{ STR0007 , 'Pn160Atu'	, 0 , 3,,,.T. },;	// 'Incluir'
					{ STR0009 , 'Pn160Atu'	, 0 , 4 },; 		// 'Alterar'
					{ STR0010 , 'Pn160Atu'	, 0 , 5 },;			// 'Excluir'
					{ STR0110 , 'Pona160Lot', 0 , 6 },;			// 'Troca em Lote'
					{ STR0014 , 'GpLegend'	, 0 , 6 , , .F.} }	// 'Legenda'
Else
	aRotina :=       {	{ STR0004 , 'PesqBrw'	, 0 , 1, ,.F. },;	// 'Pesquisar'
						{ STR0005 , 'Pn160Atu'	, 0 , 2 },; 		// 'Visualizar'
						{ STR0007 , 'Pn160Atu'	, 0 , 3,,,.T. },;	// 'Incluir'
						{ STR0009 , 'Pn160Atu'	, 0 , 4 },; 		// 'Alterar'
						{ STR0010 , 'Pn160Atu'	, 0 , 5 },;			// 'Excluir'
						{ STR0014 , 'GpLegend'	, 0 , 6 , , .F.} }	// 'Legenda'
Endif

Return aRotina

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160Lot³ Autor ³ IP RH Inovacao        ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Faz a transferencia dos funcionarios em lote               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160Lot(ExpC1,ExpN1,ExpN2)                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pona160Lot(cAlias,nReg,nOpcx)

Local cTitulo
Local lMarca
Local lLock
Local bInRange
Local bStart	
Local bLDblClick
Local bAllMark
Local bAllUnMark
Local bpona160Cnf
Local bBeforeFiltro
Local bFiltra
Local bFiltro
Local nOpcA
Local nSvReg	:= nReg
Local oDlg
Local aFieldsBrowse	:={} 
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}

//Variaveis para manipulacao dos botoes da enchoice
Local bSet15		:= { || .T. }
Local bSet24		:= { || .T. }

Private aTransfHeader	:= {} 
Private aTransfCols		:= {}
Private aTransf1Header	:= {} 
Private aTransf1Cols	:= {}
Private aLogTransf		:= {}
Private aModTraj	    := {}
Private oMsSelect		//# Alterado para private para dar refresh na funcao Pona160Flt()

Begin Sequence

	IF ( SRA->( FieldPos( "RA_OKTRANS" ) ) == 0 ) 
		Break 
	EndIF

	Private aNewIndexSRA  	:= {}
	Private bNewFiltroBrw 	:= {|| NIL }
	Private cMarkTransf		:= GetMark()
	Private cRaOkTransSpc	:= Space( TamSx3( "RA_OKTRANS" )[1] )
	Private lAbortPrint		:= .F. 

	cTitulo  		:= STR0111 // "Transferencias em Lote"
	lMarca   		:= .T.
	lLock			:= .F. 
		
	bStart			:= { || SRA->(MsGoTo(nReg)) , oMsSelect:oWnd:Refresh(),oMsSelect:oBrowse:Refresh() } 	
	bLDblClick		:= { || Pona160Mrk( "SRA" , NIL , .T. , SRA->( !IsMark( "RA_OKTRANS" , cMarkTransf ) ) ) } 
	bAllMark		:= { || Pona160MkAll( @lMarca , .T. , .F. ) } 
	bAllUnMark		:= { || Pona160MkAll( .F. , .T. , .F. ) , lMarca := .T. , oMsSelect:oBrowse:Refresh() } 
	bPona160Cnf		:= { || Pona160Cnf() , lMarca := .T. } 
	bBeforeFiltro	:= { || IF( Len( __aMrkRecnos__ ) > 0, Proc2BarGauge( bAllUnMark , OemToAnsi( STR0112 ) , NIL , NIL , .T. , .T. , .F. , .F. ) , .T. ) }	//"Retirando a Sele‡„o"
	bFiltra			:= { || Pona160Flt( bBeforeFiltro ) } 
	bSelecID		:= { || Pona160ID(), oMsSelect:oWnd:Refresh(),oMsSelect:oBrowse:Refresh() } 
	nOpcA			:= 0 	
	__aMrkRecnos__	:= {} 
	__aMrkKeys__	:= {} 
	
	/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	  ³ Monta Botoes no final do dialogo...                                      ³
	  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	bSet15	:= {|| nOpcA := 1 , Eval( bPona160Cnf ) , oDlg , .T. }
	bSet24	:= {|| nOpcA := 2 , oDlg:End() , oDlg , .T. } 		
	                 
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Campos da MarkBrowse                                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	                    //Campo      ,     ,Titulo              , Picture 
	aFieldsBrowse := {	{"RA_OKTRANS", 	"", OemToAnsi ("OK")    	,	""},;
						{"RA_MAT"    , 	"", TitSx3("RA_MAT")[1] 	,	""},;
						{"RA_NOME"   ,	"", TitSx3("RA_NOME")[1] 	,	""},;
						{"RA_TNOTRAB" ,	"", TitSx3("RA_TNOTRAB")[1] , 	""},;
						{"RA_SEQTURN", 	"", TitSx3("RA_SEQTURN")[1]	, 	""},;
						{"RA_REGRA"  , 	"", TitSx3("RA_REGRA")[1]	, 	""}	}

	dbSelectArea("SRA") 
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta Dialog...                                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAdvSize		:= MsAdvSize(,.T.,380)
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }					 
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize	:= MsObjSize( aInfoAdvSize , aObjCoords )
	

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD 
	DEFINE MSDIALOG oDlg TITLE OemToAnsi(cTitulo) FROM aAdvSize[7], 0 TO aAdvSize[6], aAdvSize[5] OF GetWndDefault() PIXEL
	
		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta MarkBrowse...                                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oMsSelect := MsSelect():New(;
										"SRA"				,;	//Alias	do Arquivo de Filtro
										"RA_OKTRANS"		,;	//Campo para controle do mark
										NIL					,;	//Condicao para o Mark
										aFieldsBrowse		,;	//Array com os Campos para o Browse
										NIL					,;	//?
										cMarkTransf			,;	//Conteudo a Ser Gravado no campo de controle do Mark
										{aObjSize[1,1],aObjSize[1,2],aObjSize[1,3],aObjSize[1,4]}	,;	//Coordenadas do Objeto  
										NIL					,;  //?
										NIL					,;	//?	
										oDlg				 ;	//Objeto Dialog 
									)
		oMsSelect:oBrowse:lHasMark    	:=.T.
		oMsSelect:oBrowse:lCanAllMark 	:=.T.
		oMsSelect:oBrowse:bLDblClick	:= bLDblClick 
		oMsSelect:oBrowse:lAllMark		:= .F.
		oMsSelect:oWnd:bStart			:= bStart
		
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ativa o Dialogo...                                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                      
		aButtons	:=	{;
						{"PESQUISA" ,{|| SRA->( PesqBrw( "SRA" , SRA->( Recno() ) , bNewFiltroBrw ) ) , oMsSelect:oBrowse:Refresh() } ,STR0004,STR0004},;	//"Pesquisar"
						{"SELECAO" 	,{|| Proc2BarGauge( bAllMark , OemToAnsi( IF( lMarca , STR0113 , STR0112 ) ) , NIL , NIL , .T. , .T. , .F. , .F. ) } , STR0114,STR0114 },;	//"Selecionando Funcion rios"###"Retirando a Seleção" ### "Marca/Desm.Todos"
						{"FILTRO" 	,{|| MsAguarde( bFiltra , STR0116 ) }  ,STR0115,STR0115},; //"Filtro      "###Filtrando Funcion rios"
						{"SELECAO" 	,{|| MsAguarde( bSelecID , OemToAnsi( STR0113 )) } , STR0134,STR0134 };	//"Selecionando Funcion rios"###"Selec.ID Transf."
						}	

	ACTIVATE DIALOG oDlg ON INIT EnchoiceBar(oDlg,bSet15,bSet24, Nil , aButtons )  CENTERED 
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Fim da Rotina Principal                                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	IF ( ( nOpcA <> 2 ) .And. ( Len( __aMrkRecnos__ ) > 0  ) )
		IF ( Len( __aMrkRecnos__ ) > 0  )
			Proc2BarGauge( { || Pona160MkAll( .F. , .F. , .F. ) } , OemToAnsi( STR0112 ) , NIL , NIL , .T. , .T. , .F. , .F. )
			__aMrkRecnos__	:= {}
			__aMrkKeys__	:= {}
			If ValType(oMsSelect:oBrowse) == "O"
				oMsSelect:oBrowse:Refresh()
			EndIf
		EndIF 
	EndIF
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Finaliza Filtro da Transfrencia Em Lote                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	EndFilBrw( "SRA" , aNewIndexSRA )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Restaura Filtro de Entrada                                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	IF ( lPona160Flt )
		Eval( bFiltraBrw )
	EndIF

	// Posiciona o SRA no Inicio
	SRA->(dbGoTop())	

End Sequence 
	
Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160Flt³ Autor ³ IP RH Inovacao        ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Filtra os funcionarios do MarkBrowse                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160Lot(ExpC1,ExpN1,ExpN2)                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpB1 = CodeBloco da expressao do filtro                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pona160Flt( bBeforeFiltro )

Local cFiltro
Local lExecFiltro

Static cFiltroRet

cFiltro := cFiltroRet
IF GpFltBldExp( "SRA" , NIL , @cFiltro , NIL )
	lExecFiltro := ( !Empty( cFiltro ) .and. ( cFiltro <> cFiltroRet ) )
EndIF
cFiltroRet	:= cFiltro

IF ( lPona160Flt )
	IF !Empty( cFiltraRh )
		EndFilBrw( "SRA" , aIndexSRA )
		IF !( lExecFiltro )
			cFiltro	:= cFiltraRh
		Else
			cFiltro	:= ( cFiltraRh + " .and. " + cFiltro )
		EndIF
	EndIF
EndIF

IF ( lExecFiltro )
	Eval( bBeforeFiltro )
EndIF

EndFilBrw( "SRA" , aNewIndexSRA )
aNewIndexSRA	:= {}
bNewFiltroBrw	:= { || FilBrowse( "SRA" , @aNewIndexSRA , @cFiltro ) }
SRA->( Eval( bNewFiltroBrw ) )

oMsSelect:oBrowse:Refresh()

Return( lExecFiltro )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160MkAll³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Marca/Desmarca todos os elementos do browse                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160MkAll(ExpL1,ExpL2,ExpL3)                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = variavel de controle de marcar/desmarcar           ³±±
±±³          ³ ExpL2 = variavel de controle de apresentacao de msg        ³±±
±±³          ³ ExpL3 = variavel de controle de tentar marcar o registro   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pona160MkAll( lMarca , lShowMsg , lInsiste )

Local aNoLocks		:= {}
Local bWhile		:= { |cWhile| &( cWhile ) } 
Local cFilSra		:= xFilial("SRA")
Local cMsg			:= ""
Local cSraFilter	:= SRA->( dbFilter() )
Local cTimeIni		:= Time()
Local lChkMrk		:= .T.
Local lUseCode		:= lMarca
Local lMaxAdsLckRec	:= .F.
Local nRecno		:= SRA->( Recno() )
Local nLocks		:= 0
Local nPosRec		:=	GdfieldPos("RA_REC_WT",aTransfHeader)
Local nPosRec1		:=	GdfieldPos("RA_REC_WT",aTransf1Header)
Local nX			:= 0
Local nLoop
Local nLoops
Local nNoLock
Local nLastSize
Local nProcRegua

DEFAULT lShowMsg	:= .T.
DEFAULT lInsiste	:= .T.

CursorWait()

IF !( lMarca )
	IF !( lAbortPrint )
		cSraFilter += IF( !Empty( cSraFilter ) , " .and. IsMark('RA_OKTRANS','"+cMarkTransf+"')" , "IsMark('RA_OKTRANS','"+cMarkTransf+"')" )
	EndIF	
EndIF
IF ( !Empty( cSraFilter ) )
	cSraFilter += " .and. RA_FILIAL == '" + cFilSra + "'"
Else
	cSraFilter += "RA_FILIAL == '" + cFilSra + "'"
EndIF	
CREATE SCOPE aScopeCount FOR &( cSraFilter )
nProcRegua := SRA->( RecCount() )
RstTimeRemaining() //Reinicializa o Contador de Tempos em Proc2BarGauge()
BarGauge1Set( nProcRegua )

CursorArrow()
lAbortPrint := .F.
SRA->( dbSeek( cFilSra , .F. ) )
While SRA->( !Eof() )
	IncPrcG1Time( NIL , nProcRegua , cTimeIni , .T. , NIL , 1 )
	IF ( lAbortPrint )
		Exit
	EndIF

	If !Eval( bWhile , cSraFilter )
		SRA->( dbSkip() )  
		Loop
	EndIf
	SRA->( Pona160Mrk( "SRA" , lMarca , lInsiste , lUseCode ) )

	SRA->( dbSkip() )
End While

SRA->( MsGoto( nRecno ) )
IF ( lChkMrk )
	lMarca := !( lMarca )
EndIF

Return( lChkMrk )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160Mrk  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Marca/Desmarca um elemento do browse                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160Mrk(ExpC1,ExpL1,ExpL2,ExpL3)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = alias da tabela ser alterada-marcada               ³±±
±±³          ³ ExpL1 = variavel de controle de marcar todos               ³±±
±±³          ³ ExpL2 = variavel de controle de apresentacao de msg        ³±±
±±³          ³ ExpL3 = variavel de controle de lock de registro           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pona160Mrk( cAlias , lAll , lShowHelp , lUseCode ) 

Local aRec		:= Array( 1 )
Local aKey		:= Array( 1 )
Local lLock		:= .F.
Local bMark_	:= { || ExecMark( lAll ) }

Local bLock
Local cMsg
Local nPos

DEFAULT cAlias		:= Alias()
DEFAULT lShowHelp	:= .T. 	

Begin Sequence

	IF !( cAlias == "SRA" )
	    Break
	EndIF

	aRec[1]	:= SRA->( Recno() )
	aKey[1]	:= SRA->( RA_FILIAL+RA_MAT )

	IF ( lShowHelp )
		//"O Registro "###" está reservado para outro usuário."
		cMsg := OemToAnsi( STR0122 + " " + AllTrim( Str( aRec[1] ) ) + " " + STR0123 )
		bLock := { || Pona160TLocks(	aRec , aKey , cMsg , .T. , lUseCode ) }
	Else
		bLock := { || LockRegsCode( "SRA" , aRec , aKey , 0 , 0 , lUseCode , NIL ) }
	EndIF 

	IF !( lLock := SRA->( Eval( bLock ) ) )
		Break 
	EndIF

	lLock := SRA->( Eval( bMark_ ) )

End Sequence

Return( lLock )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ExecMark    ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Marca/Desmarca um elemento do browse                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExecMark(ExpL1)                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = variavel de controle de marcar todos               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function ExecMark( lAll )

Local lIsMark 	:= SRA->( IsMark( "RA_OKTRANS" , cMarkTransf ) )
Local lIsLocked	:= IsLocked( "SRA" , SRA->( Recno() ) )

IF ( lIsLocked )
	IF ( lAll == NIL )	//Inverte
		IF ( lIsMark )
	    	SRA->RA_OKTRANS := cRaOkTransSpc
			AddRmvMrk( .T. )
		Else
			SRA->RA_OKTRANS := cMarkTransf
			AddRmvMrk( .F. )
		EndIF
	Else
		IF ( lAll )
	    	SRA->RA_OKTRANS := cMarkTransf
			AddRmvMrk( .F. )
		ElseIF ( lIsMark )
	    	SRA->RA_OKTRANS := cRaOkTransSpc
	    	AddRmvMrk( .T. )
		EndIF
	EndIF
EndIF

Return( lIsLocked )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³AddRmvMrk   ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Reserva/Liberacao do(s) Recno(s) e Chave(s) qdo Mark/UnMark³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ AddRmvMrk(ExpL1)                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = variavel de controle de liberacao de registros     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function AddRmvMrk( lRmv )

Local nRec  	:= SRA->( Recno() )
Local cKey  	:= SRA->( RA_FILIAL + RA_MAT )
Local nPos		:= aScan( __aMrkRecnos__ , { |x| ( x == nRec ) } )
Local nLastSize

DEFAULT lRmv := .F.

IF ( lRmv )
	IF ( IsLocked( "SRA" , nRec ) )
		Pona160FreeLocks( nRec , cKey )
	EndIF
	IF ( nPos > 0 )
		nLastSize := Len( __aMrkRecnos__ )
		aDel( __aMrkRecnos__ 	, nPos )
		aDel( __aMrkKeys__	 	, nPos )
		aSize( __aMrkRecnos__	, ( nLastSize - 1 ) )
		aSize( __aMrkKeys__		, ( nLastSize - 1 ) )
	EndIF
Else
	IF ( nPos == 0 )
		aAdd( __aMrkRecnos__ , nRec )
		aAdd( __aMrkKeys__	 , cKey )
	EndIF
EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160TLocks³ Autor ³ IP RH Inovacao     ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Lock dos Registros                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160TLocks(aRecnos,aKeys,cMsg1,lUseCode )               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = array com os registros a serem bloqueados          ³±±
±±³          ³ ExpA2 = variavel de controle das chaves dos registros      ³±±
±±³          ³ ExpC1 = variavel de controle da mensagem                   ³±±
±±³          ³ ExpL1 = variavel de controle de liberacao de registros     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pona160TLocks( aRecnos , aKeys , cMsg1 , lUseCode )

Local lLocks		:= .T.

Local aQueryCond
Local aFieldsLock
Local bSkip
Local bLock 
Local cFilSRA    
Local cSraFilter

DEFAULT __aMrkRecnos__	:= {}
DEFAULT __aMrkKeys__	:= {}
DEFAULT aRecnos 		:= __aMrkRecnos__
DEFAULT aKeys			:= __aMrkKeys__
DEFAULT cMsg1			:= STR0124	//"Não foi possivel reservar todos os registros para transferência"
DEFAULT lUseCode		:= .T.

Begin Sequence 

	IF ( Empty( aRecnos ) .and. Empty( aKeys ) )
		cFilSRA := xFilial( "SRA" )
		#IFDEF TOP
			aQueryCond		:= Array( 05 )
			aQueryCond[01]	:= "RA_FILIAL='"+cFilSRA+"'"
			aQueryCond[02]	:= " AND "
			aQueryCond[03]	:= "RA_OKTRANS='"+cMarkTransf+"'"
			aQueryCond[04]	:= " AND "
			//aQueryCond[05]	:= "RA_SITFOLH <> 'D' " 
			//aQueryCond[06]	:= " AND "                       
			aQueryCond[05]	:= "D_E_L_E_T_=' ' "
		#ENDIF
		aFieldsLock		:= { "RA_FILIAL" , "RA_MAT" , "RA_OKTRANS" }
		IF Empty( cSraFilter := SRA->( dbFilter() ) )
			bSkip	:= { || !IsMark( "RA_OKTRANS" , cMarkTransf ) }
		Else
			bSkip	:= { || !IsMark( "RA_OKTRANS" , cMarkTransf ) .or. !( &( cSraFilter ) ) }
		EndIF	
		aKeys 	:= {}
		aRecnos := {}
		bLock 	:= { |lLock,lExclu|	lLock 	:= .T.	,;
									lExclu	:= .T.	,;
									GdMontaCols(NIL				,;	//01 -> Array com os Campos do Cabecalho da GetDados
													NIL				,;	//02 -> Numero de Campos em Uso
													NIL				,;	//03 -> [@]Array com os Campos Virtuais
													NIL    			,;	//04 -> [@]Array com os Campos Visuais
													"SRA" 			,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
													aFieldsLock		,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
													@aRecnos		,;	//07 -> [@]Array unidimensional contendo os Recnos
													"SRA"		   	,;	//08 -> Alias do Arquivo Pai
													cFilSRA			,;	//09 -> Chave para o Posicionamento no Alias Filho
													NIL  			,;	//10 -> Bloco para condicao de Loop While
 													bSkip			,;	//11 -> Bloco para Skip no Loop While
													.F.     		,;	//12 -> Se Havera o Elemento de Delecao no aCols 
													.F.     		,;	//13 -> Se cria variaveis Publicas
													.F.     		,;	//14 -> Se Sera considerado o Inicializador Padrao
													NIL  			,;	//15 -> Lado para o inicializador padrao
													.F.       		,;	//16 -> Opcional, Carregar Todos os Campos
													.T.         	,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
													aQueryCond		,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
													.F.				,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
													.T.				,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
													.F.				,;	//21 -> Carregar Coluna Fantasma
													.T.				,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
													.F.				,;	//23 -> Verifica se Deve verificar se o campo eh usado
													.F.				,;	//24 -> Verifica se Deve verificar o nivel do usuario
													.F.				,;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
													@aKeys			,;	//26 -> [@]Array que contera as chaves conforme recnos
													@lLock			,;	//27 -> [@]Se devera efetuar o Lock dos Registros
													@lExclu			 ;	//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
											    ),;
									( lLock .and. lExclu );
					}
		__aMrkRecnos__	:= aClone( aRecnos )
		__aMrkKeys__	:= aClone( aKeys   )
	Else
		bLock := { || LockRegsCode( "SRA" , aRecnos , aKeys , 0 , 0 , lUseCode , NIL ) }
	EndIF 

	IF !( lLocks := WhileYesNoWait(;
										bLock															,;	//Bloco a Ser Executando Enquando ( Devera Retornar Valor Logico )
										5																,;	//Numero de Tentativas
										.T.																,;	//Se podera Encerrar as as Tentativas ( Button Cancel Enabled )
										OemToAnsi( cMsg1 )												,;	//Mensagem de Corpo para a MsgInfo
										cCadastro														,;	//Titulo para a MsgInfo 
										OemToAnsi( STR0125 ) /*"Tentar novamente?"*/					,;	//Mensagem de Corpo para a MsgYesNo
										cCadastro														,;	//Titulo para a MsgYesNo 
										OemToAnsi( STR0126 ) /*"Tentando reservar o(s) registro(s)."*/	,;	//Mensagem de corpo para a ProcWaiting 
										cCadastro												 		 ;	//Titulo para a ProcWaiting 
								  ); 
		) 
		Break 
	EndIF 

End Sequence 

Return( lLocks ) 

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160FreeLocks³ Autor ³ IP RH Inovacao  ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Libera os Locks dos Registros                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160FreeLocks(nRecnos,cUseCode )            			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpN1 = Numero do registro a ser bloqueado                 ³±±
±±³          ³ ExpC1 = Codigo do funcionario a ser bloqueado              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pona160FreeLocks( nRecno , cUsedCod )
Return( FreeLocks( "SRA" , nRecno , .T. , cUsedCod ) )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160ID   ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Seleciona os funcionarios atraves dos ID gerados           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160ID() 								        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pona160ID()
Local aArea			:= GetArea()
Local cAliasQry		:= GetNextAlias()
Local cAliasSRA		:= GetNextAlias()
Local cWhere		:= ""
Local cTrfID		:= ""
Local cTrfIDTipo	:= ""
Local cPesq 		:= Space(20)
Local nOpt			:= 0
Local oDlg5
Local oUso 
Local bSeek			:= { || fPesquisa( oUso, oUso:nAT, cPesq ) }
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local aLstLote		:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busca as transferencias de funcionario                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cWhere := "% SRE.D_E_L_E_T_ = ' ' AND SRE.RE_FILIALP = '" + xFilial("SPF") + "' AND SRE.RE_TRFUNID <> 0 %"
BeginSql alias cAliasQry
   	SELECT SRE.RE_TRFUNID, SRE.RE_TRFOBS
	FROM %table:SRE% SRE 
	WHERE %exp:cWhere%
	GROUP BY RE_TRFUNID, RE_TRFOBS
	ORDER BY RE_TRFUNID, RE_TRFOBS
EndSql

If (cAliasQry)->( !Eof() )
	While (cAliasQry)->( !Eof() ) 
		aAdd(aLstLote, { STR0135 , (cAliasQry)->RE_TRFUNID, (cAliasQry)->RE_TRFOBS }) // "Funcionário"
		(cAliasQry)->( dbSkip() )
	Enddo
Endif

dbSelectArea(cAliasQry)
dbCloseArea()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busca as transferencias de turno                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cWhere := "% SPF.D_E_L_E_T_ = ' ' AND SPF.PF_FILIAL = '" + xFilial("SPF") +  "' AND SPF.PF_TRFUNID <> 0 %"
BeginSql alias cAliasQry
   	SELECT SPF.PF_TRFUNID, SPF.PF_TRFOBS
	FROM %table:SPF% SPF
	WHERE %exp:cWhere%
	GROUP BY PF_TRFUNID, PF_TRFOBS
	ORDER BY PF_TRFUNID, PF_TRFOBS
EndSql

If (cAliasQry)->( !Eof() )
	While (cAliasQry)->( !Eof() ) 
		aAdd(aLstLote, { STR0107 , (cAliasQry)->PF_TRFUNID, (cAliasQry)->PF_TRFOBS }) // "Troca de Turno"
		(cAliasQry)->( dbSkip() )
	Enddo
Endif

If Len(aLstLote) > 0

	aSort( aLstLote , , , { |x,y| x[ 2 ] > y [ 2 ] } )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define o cabecalho da tela de atualizacoes                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oOk := LoadBitmap( GetResources(), "ENABLE" )
	oNo := LoadBitmap( GetResources(), "LBNO" )
	
	SETAPILHA()              
	
	aAdvSize		:= MsAdvSize(,.T.,390)
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }  
	aAdd(aObjCoords, { 000, 000, .T., .T., .T.} )     		//2-Group ListBox
	aObjSize		:= MsObjSize(aInfoAdvSize , aObjCoords) 
	
	DEFINE MSDIALOG oDlg5 FROM aAdvSize[7], 0 TO aAdvSize[6], aAdvSize[5]  TITLE OemToAnsi(STR0127) PIXEL	//"Selecao de Id de Transferencias"
	
	oDlg5:lEscClose := .F.

	@ aObjSize[1,1],aObjSize[1,2] LISTBOX oUso ;
			FIELDS HEADER STR0128,STR0129,STR0130;  // "Tipo Transf." ### "ID Transf." ### "Observação" 
			SIZE aObjSize[1,3],aObjSize[1,4] ;
			OF oDlg5 PIXEL  CENTERED
			oUso:SetArray(aLstLote)
			oUso:bLine := { || {aLstLote[oUso:nAt,1],aLstLote[oUso:nAt,2],aLstLote[oUso:nAt,3]}}
			oUso:Refresh()
   
	ACTIVATE MSDIALOG oDlg5 ON INIT EnchoiceBar(oDlg5,{||nOpt:=1 , A160TrfID(oUso,aLstLote,@cTrfID,@cTrfIDTipo), oDlg5:End() },;
													 {|| oDlg5:End() } ) ;
													 CENTERED 
	SETAPILHA()
		
	If nOpt == 1 

		If cTrfIDTipo == STR0135	// "Funcionário"
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Marca todos os funcionarios do ID selecionado - Tipo Funcionario        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cWhere := "% SRE.D_E_L_E_T_ = ' '"
			cWhere += " AND SRE.RE_TRFUNID = " + cTrfID
			cWhere += " AND SRE.RE_EMPP = '" + cEmpAnt + "'"  
			cWhere += " AND SRA.RA_FILIAL = SRE.RE_FILIALP"
			cWhere += " AND SRA.RA_MAT = SRE.RE_MATP"
			cWhere += " AND SRA.RA_CC = SRE.RE_CCP"
			cWhere += " AND SRA.RA_POSTO = SRE.RE_POSTOP"
			cWhere += " AND SRA.RA_PROCES = SRE.RE_PROCESP"
	
			cWhere += " %"
	
			BeginSql alias cAliasSRA
			   	SELECT SRA.R_E_C_N_O_ AS RECNOSRA
				FROM %table:SRE% SRE, %table:SRA% SRA
				WHERE %exp:cWhere%
				ORDER BY RE_TRFUNID,RE_FILIALP,RE_MATP
			EndSql
		Else
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Marca todos os funcionarios do ID selecionado - Tipo Troca de Turno     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cWhere := "% SPF.D_E_L_E_T_ = ' '"
			cWhere += " AND SPF.PF_FILIAL = '" + xFilial("SPF") + "'"
			cWhere += " AND SPF.PF_TRFUNID = " + cTrfID
			cWhere += " AND SRA.RA_FILIAL = SPF.PF_FILIAL"
			cWhere += " AND SRA.RA_MAT = SPF.PF_MAT"
			cWhere += " %"
	
			BeginSql alias cAliasSRA
			   	SELECT SRA.R_E_C_N_O_ AS RECNOSRA
				FROM %table:SPF% SPF, %table:SRA% SRA
				WHERE %exp:cWhere%
				ORDER BY PF_TRFUNID,PF_FILIAL,PF_MAT
			EndSql
		Endif

		If (cAliasSRA)->( !Eof() )
			While (cAliasSRA)->( !Eof() ) 
				SRA->(dbGoTo( (cAliasSRA)->( RECNOSRA ) ))
				Pona160Mrk( "SRA" , .T. , .T. , SRA->( !IsMark( "RA_OKTRANS" , cMarkTransf ) ) )
				(cAliasSRA)->( dbSkip() )
			Enddo
		Endif

		dbSelectArea(cAliasSRA)
		dbCloseArea()

	Endif 
Else

	MsgAlert( OemToAnsi(STR0131),OemToAnsi(STR0132) )  // "Não existe ID de transferência para ser selecionado" ### "Atencao"
	  
Endif

dbSelectArea(cAliasQry)
dbCloseArea()
RestArea(aArea)


Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³A160TrfID   ºAutor³IP RH Inovacao         ºData³ 21/05/2012 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna o codigo do lote de transferencia                   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PONA160                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static function A160TrfID(oUso,aLstLote,cTrfID,cTrfIDTipo)

cTrfIDTipo := aLstLote[oUso:nAt,1]
cTrfID 	   := AllTrim(Str(aLstLote[oUso:nAt,2]))

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fPesquisa ºAutor  ³Microsiga           º Data ³  03/04/08   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Efetua pesquisa de campo/titulo de campo na config.campos   º±±
±±º          ³complementares                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static function fPesquisa(oUso,nEstou, cPesq)

Local lRetOk:= .F. 	
Local nPos 	:= 0 

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta o Dialogo de pesquisa                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nPos	:= ascan(aDicioW, {|x| UPPER( ALLTRIM(x[1]) )  = ALLTRIM(cPesq)  } )		//-- Nome Campo 
If nPos	= 0 
	nPos := ascan(aDicioW, {|x|ALLTRIM(x[3])= ALLTRIM(cPesq) } ) 					//-- Titulo do campo 
Endif 

If nPos > 0 
	oUso:nAt	:= nPos 
Else 
	MsgAlert( OemToAnsi(STR0133) ,;				// Campo ou titulo nao localizado. 
			  OemToAnsi(STR0132) ) 				// "Atencao"
	lRetOk		:= .F. 
	oUso:nAT 	:= nEstou 
Endif 

oUso:Refresh() 

Return(lRetOk) 	


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160Cnf  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Monta tela de campos de Informacoes de Destino Unico       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160Cnf() 							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pona160Cnf()

Local bLock	 		:= { || CursorWait() , lLocksOk := Pona160TLocks() , CursorArrow() , lLocksOk } 
Local bUnLock		:= { || CursorWait() , Pona160FreeLocks() , CursorArrow() } 
Local lLocksOk		:= .T. 
Local nOpcA			:= 0
Local bSet15		:= { || IF( Pona160VDU() , ( nOpcA := Confirma , oDlg:End() ) , nOpcA := Abandona ) }
Local bSet24		:= { || nOpca := 2, oDlg:End() }
Local oDlg			:= NIL
Local oFont			:= NIL
Local oGet1
Local oGet2
Local oGet3
Local oGet4
Local oGet5
Local oGet6
Local oGet7

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaração de arrays para dimensionar tela		             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}

Private dDataTra 	:= dDataBase
Private cTurno 		:= Space(TAMSX3("PF_TURNOPA")[1])
Private cSeqIni 	:= Space(TAMSX3("PF_SEQUEPA")[1])
Private cRegra 		:= Space(TAMSX3("PF_REGRAPA")[1])
Private cObserv 	:= Space(TAMSX3("PF_TRFOBS")[1])

//Local oPeriodo := RHPERIODO:New()
//oPeriodo:cProcesso := SRA->RA_PROCES
//oPeriodo:GetPer()
    
Begin Sequence 

	MsAguarde( bLock , OemToAnsi( STR0136 ) ) //"Reservando os Registros para Transferˆncia"
	IF !( lLocksOk )
		Break
	EndIF

	IF Empty( __aMrkRecnos__ )
		MsgInfo( OemToAnsi( STR0137 ) )				//"Não existem funcionários a serem transferidos"
		Break
	EndIF
	
	RstTimeRemaining()								//Reinicializa o Contador de Tempos em Proc2BarGauge()
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Dialogo para Apresentacao das Informacoes              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize()
	aAdvSize[5]	:=	370	//horizontal
	aAdvSize[6]	:=  240	//Vertical
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }					 
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	
	aObjSize	:= MsObjSize( aInfoAdvSize , aObjCoords )
	
	DEFINE MSDIALOG oDlg FROM aAdvSize[7], 0 TO aAdvSize[6], aAdvSize[5] TITLE OemToAnsi(STR0140) OF oMainWnd PIXEL //"Informações de Destino Único"
		
		@ aObjSize[1][1],aObjSize[1][2] SAY TITSX3("PF_DATA")[1]		SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[1][1],aObjSize[1][2]+35 MSGET oGet1 VAR dDataTra	PICTURE "@D" VALID Pona160DUV(1) SIZE 50,10 OF oDlg PIXEL HASBUTTON
	
		@ aObjSize[2][1],aObjSize[2][2] SAY TITSX3("PF_TURNOPA")[1]		SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[2][1],aObjSize[2][2]+35 MSGET oGet2 VAR cTurno	PICTURE "@!" VALID Pona160DUV(2) F3 "SR6" SIZE 18,10 OF oDlg PIXEL HASBUTTON

		@ aObjSize[3][1],aObjSize[3][2] SAY TITSX3("PF_SEQUEPA")[1]	SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[3][1],aObjSize[3][2]+35 MSGET oGet4 VAR cSeqIni	PICTURE "@!" VALID Pona160DUV(3) F3 SIZE 15,10 OF oDlg PIXEL HASBUTTON
	
		@ aObjSize[4][1],aObjSize[4][2] SAY TITSX3("PF_REGRAPA")[1]	SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[4][1],aObjSize[4][2]+35 MSGET oGet5 VAR cRegra	PICTURE "@!" VALID Pona160DUV(4) F3 "SPA" SIZE 15,10 OF oDlg PIXEL HASBUTTON
	
		@ aObjSize[5][1],aObjSize[5][2] SAY TITSX3("PF_TRFOBS")[1]		SIZE 50,10 OF oDlg PIXEL
		@ aObjSize[5][1],aObjSize[5][2]+35 MSGET oGet7 VAR cObserv	 PICTURE "@!" SIZE 100,10 OF oDlg PIXEL HASBUTTON
	
	
	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg, bSet15, bSet24) CENTERED
		

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa a troca de turno em lote                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nOpcA == 1
		Proc2BarGauge( { || Pona160TRFAll() } , OemToAnsi( STR0141 ) , NIL , NIL , .T. , .T. , .F. , .F. ) //"Realizando a Transferencia em Lote"
	Endif

	MsAguarde( bUnLock , OemToAnsi( STR0138 ) )	// "Liberando os Registros"

End Sequence

IF ( ( nOpcA <> 2 ) .And. ( Len( __aMrkRecnos__ ) > 0  ) )
	IF ( Len( __aMrkRecnos__ ) > 0  )
		Proc2BarGauge( { || Pona160MkAll( .F. , .F. , .F. ) } , OemToAnsi( STR0112 ) , NIL , NIL , .T. , .T. , .F. , .F. ) //"Retirando a Seleção"
		__aMrkRecnos__	:= {}
		__aMrkKeys__	:= {}
	EndIF
EndIF	

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160DUV  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Validacao dos campos de Informacoes de Destino Unico       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160DUV() 							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nExpN1 - numero conteudo o numero do campo a ser validado  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pona160DUV(nOpValid)
Local lRet	:= .T.
Local cMsg	:= ""

If nOpValid == 1		// Validacao da data

	If Empty(dDataTra) .Or. dDataTra < dDataBase
		lRet := .F.
		cMsg := STR0139 // "Data de Transferência Inválida!"
	Endif

ElseIf nOpValid == 2	// Validacao da Turno

	lRet := ExistCpo( "SR6", cTurno )

ElseIf nOpValid == 3	// Validacao da Sequencia

	lRet := Pn160VldSeq( cTurno , cSeqIni , .T.  )

ElseIf nOpValid == 4	// Validacao da Regra

	lRet := ExistCpo("SPA", cRegra)

Endif

If !lRet .And. !Empty(cMsg)
	MsgAlert( OemToAnsi(cMsg),OemToAnsi(STR0132) )  //  ### "Atencao"
Endif

Return lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160VDU  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Validacao de todos os campos da tela de Destino Unico      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160VDU() 							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pona160VDU()
Local lRet	:= .F.

If Pona160DUV(1) .And. Pona160DUV(2) .And.Pona160DUV(3) .And.Pona160DUV(4)
	If MsgYesNo(STR0163+Chr(13)+Chr(10)+STR0164+Chr(13)+Chr(10)+STR0165+Chr(13)+Chr(10)+STR0166,STR0159)
		lRet := .T.
	Endif
Endif

Return ( lRet )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pona160TRFAll³ Autor ³ IP RH Inovacao     ³ Data ³ 12.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Executa a troca de turno em lote                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pona160TRFAll()							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pona160TRFAll()
 Local aNoLocks		:= {}
Local bWhile		:= { |cWhile| &( cWhile ) } 
Local cFilSra		:= xFilial("SRA")
Local cMsg			:= ""
Local cSraFilter	:= SRA->( dbFilter() )
Local cTimeIni		:= Time()
Local nRecno		:= SRA->( Recno() )
Local nLastSize
Local nProcRegua
Local aLogTransf	:= {}
Local aLogXTransf	:= {}
Local aLogSRATransf	:= {}
Local aLogTitle		:= {}
Local aUltTroca		:= array(3)
Local lAtuSRA 		:= .F.
Local nNumTrf		:= 0
Local nY			:= 0

Private dPerIni		:= Ctod("//")
Private dPerFim		:= Ctod("//")
Private oPerFch		:= RHPERIODO():New()   // Objeto que contem os dados do ultimo Periodo Fechado PONTO (SRA)
Private oPeriodo	:= RHPERIODO():New()

CursorWait()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Gera a numeracao sequencial do lote de transferencia                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+SubStr(Time(),7,2))	// 99:99:99
SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_TRFUNID" ) ) )
While SPF->(dbSeek( xFilial("SPF") + Str(nNumTRF) ))
	nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+StrZero(Val(SubStr(Time(),7,2))+1,2) )	// AAAAMMDDHHMMSS
Enddo
SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_MAT+DTOS(PF_DATA)" ) ) )

IF !( lAbortPrint )
	cSraFilter += IF( !Empty( cSraFilter ) , " .and. IsMark('RA_OKTRANS','"+cMarkTransf+"')" , "IsMark('RA_OKTRANS','"+cMarkTransf+"')" )
EndIF	

IF ( !Empty( cSraFilter ) )
	cSraFilter += " .and. RA_FILIAL == '" + cFilSra + "'"
Else
	cSraFilter += "RA_FILIAL == '" + cFilSra + "'"
EndIF	
CREATE SCOPE aScopeCount FOR &( cSraFilter )
nProcRegua := SRA->( RecCount() )
RstTimeRemaining() //Reinicializa o Contador de Tempos em Proc2BarGauge()
BarGauge1Set( nProcRegua )

CursorArrow()
lAbortPrint := .F.
SRA->( dbSeek( cFilSra , .F. ) )
While SRA->( !Eof() )
	IncPrcG1Time( NIL , nProcRegua , cTimeIni , .T. , NIL , 1 )
	IF ( lAbortPrint )
		Exit
	EndIF

	If !Eval( bWhile , cSraFilter )
		SRA->( dbSkip() )  
		Loop
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega Ultimo Periodo Fechado Partir do SRA		   		   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	oPerFch:cProcesso := SRA->RA_PRCFCH
	oPerFch:cPeriodo  := SRA->RA_PERFCH
	oPerFch:cRoteiro  := SRA->RA_ROTFCH
	oPerFch:cNumPagto := SRA->RA_NUPFCH	
	oPerFch:GetPer()
	
	oPeriodo:cProcesso := SRA->RA_PROCES
	oPeriodo:PerSel()	
	
	dPerFim :=oPeriodo:dDataFim
	dPerIni :=oPeriodo:dDataIni

	lAtuSRA := .F.
	
	// Verifica a troca de turno referente a data digitada para buscar as informacoes de origem
	If Pn160SPFQry(dDataTra,@aLogSRATransf,@aUltTroca)
	
		// Excluir os lancamentos com data igual e superior a data de transferencia
		dbSelectArea("SPF")
	  	SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_MAT+DTOS(PF_DATA)" ) ) )
		If SPF->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT) )
			While !SPF->(Eof()) .And. SPF->PF_FILIAL + SPF->PF_MAT == SRA->RA_FILIAL + SRA->RA_MAT
				If dDataTra <= SPF->PF_DATA
					// "Funcionario                            Data        Turno De  Seq De  Regra De  Turno Para  Seq Para  Regra Para  Cad.Funcion.    Tp.Atualiz."
					//  999999-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  99/99/9999  xxx       xx      xx        xxx         xx        xx          xxxxxxxxxxxxxxx xxxxxxxxxxxxxxx
					//  999999-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
					aAdd(aLogTransf,SRA->RA_MAT+"-"+Padr(SRA->RA_NOME,30) + Space(2) + ;
                                                                                Padr(DTOC(SPF->PF_DATA),10) + Space(2) + ;
																				Padr(SPF->PF_TURNODE,8) + Space(2) + ;
																				Padr(SPF->PF_SEQUEDE,6) + Space(2) + ;
																				Padr(SPF->PF_REGRADE,8) + Space(2) + ;
																				Padr(SPF->PF_TURNOPA,10) + Space(2) + ;
																				Padr(SPF->PF_SEQUEPA,8) + Space(2) + ;
																				Padr(SPF->PF_REGRAPA,10) + Space(2) + ;
																				Space(16) + ;
																				STR0156 )	// "Exclusão"
																				
					RecLock("SPF",.F.)
					dbDelete()
					MsUnLock()
				Endif
				SPF->(dbSkip())			
			Enddo
		Endif
		
		RecLock("SPF",.T.)
		SPF->PF_FILIAL	:= SRA->RA_FILIAL
		SPF->PF_MAT		:= SRA->RA_MAT
		SPF->PF_DATA	:= dDataTra
		SPF->PF_TURNODE	:= aUltTroca [ 1 ]
		SPF->PF_SEQUEDE	:= aUltTroca [ 2 ]
		SPF->PF_REGRADE	:= aUltTroca [ 3 ]
		SPF->PF_TURNOPA	:= cTurno
		SPF->PF_SEQUEPA	:= cSeqIni
		SPF->PF_REGRAPA	:= cRegra
		SPF->PF_TRFUNID	:= nNumTRF
		SPF->PF_TRFOBS	:= cObserv		
		MsUnLock()
		
		IF dDataTra <= dPerFim
			lAtuSRA := .T.
			IF RecLock("SRA" , .F. )
				SRA->RA_TNOTRAB	:= cTurno
				SRA->RA_SEQTURN	:= cSeqIni
				SRA->RA_REGRA	:= cRegra
				SRA->( MsUnlock() )
			EndIF
		Endif

		aAdd(aLogTransf,SRA->RA_MAT+"-"+Padr(SRA->RA_NOME,30) + Space(2) + ;
																	Padr(DTOC(SPF->PF_DATA),10) + Space(2) + ;
																	Padr(SPF->PF_TURNODE,8) + Space(2) + ;
																	Padr(SPF->PF_SEQUEDE,6) + Space(2) + ;
																	Padr(SPF->PF_REGRADE,8) + Space(2) + ;
																	Padr(SPF->PF_TURNOPA,10) + Space(2) + ;
																	Padr(SPF->PF_SEQUEPA,8) + Space(2) + ;
																	Padr(SPF->PF_REGRAPA,10) + Space(2) + ;
																	Padr(If(lAtuSRA,STR0153,STR0154),14) + Space(2) + ;	// "Atualizado" ### "Não Atualizado"
																	STR0155 )	// "Inclusao"

	Else

		If Len(aLogSRATransf) > 0
			For nY :=1 to Len(aLogSRATransf)
				aAdd(aLogTransf, SRA->RA_MAT + "-" + SRA->RA_NOME + Space(2) + Padr( aLogSRATransf[ nY ] ,90) + STR0158 )	// "Inconsistencia"
    		Next
		Endif
	Endif

	dbSelectArea("SRA")
	SRA->( dbSkip() )
End While


IF !Empty( aLogTransf ) 

	aAdd(aLogTitle, STR0157 ) // "Funcionario                            Data      Turno De  Seq De  Regra De  Turno Para  Seq Para  Regra Para  Cad.Funcion.    Tp.Atualiz."

	// "Transferencia - Data: 99/99/9999 - Turno: xxx - Seq.Turno: 99 - Regra: 99 - Id.Transf.: 99999999999999 - Observacao: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
	aAdd( aLogXTransf,  STR0159 + " - " + AllTrim(TITSX3("PF_DATA")[1])+ ": " + DTOC(dDataTra)+ " - " +;
										   AllTrim(TITSX3("PF_TURNOPA")[1])+ ": " + cTurno + " - " +;
										   AllTrim(TITSX3("PF_SEQUEPA")[1]) + ": " + cSeqIni  + " - " +;
										   AllTrim(TITSX3("PF_REGRAPA")[1]) + ": " + cRegra  + " - " +;
										   STR0129 + ": " + StrZero(nNumTrf,14) + " - " +;
										   AllTrim(TITSX3("PF_TRFOBS")[1]) + ": " + cObserv  ) 
	aEval( aLogTransf , {|x| aAdd(aLogXTransf,x) } )

	// "Log de Ocorrencias"
	bMakeLog := { || fMakeLog( { aLogXTransf } , aLogTitle,  NIL , .T. , FunName() , NIL , "G" , "L" , NIL , NIL ) }
	MsAguarde( bMakeLog , OemToAnsi( STR0144 ) ) // "Gerando Log de Transferencia de Turno"
EndIF

SRA->( MsGoto( nRecno ) )

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn160SPFQry  ³ Autor ³ IP RH Inovacao     ³ Data ³ 12.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Executa a troca de turno em lote                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pn160SPFQry()							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpD1 - Data da transferencia em Lote                      ³±±
±±³          ³ ExpA1 - Array do Log de Transferencia                      ³±±
±±³          ³ ExpA2 - Array contendo a ultima Troca de Turno             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona160                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn160SPFQry(dData,aLogTransf,aUltTroca)

Local cAliasQry		:= GetNextAlias()   	
Local cOrder 		:= ""
Local cWhere 		:= ""
Local lRet 			:= .T. 

Default aUltTroca	:= array(3)

aLogTransf	:= {}

If AllTrim(SRA->RA_SITFOLH) $ "D,T"
	aAdd(aLogTransf,STR0162)   // "Transferência não efetuada devido o funcionário estar demitido/transferido."
    lRet := .F.
EndIf

If ( dData <= oPerFch:dDataFim .and. oPerFch:lFechado )
	aAdd(aLogTransf,STR0108)   // "Não é possível manipular Trocas de Turno para períodos FECHADOS !"
    lRet := .F.
EndIf

If lRet
	cOrder := "% PF_DATA %"
	cWhere := "% SPF.PF_FILIAL = '" + SRA->RA_FILIAL +"' AND "
	cWhere += "SPF.PF_MAT = '" + SRA->RA_MAT + "' AND "
	cWhere += "SPF.PF_DATA < '" + DTOS(dData) + "'%"
	
	BeginSql alias cAliasQry			
		SELECT SPF.*
		FROM %table:SPF% SPF                                     
		WHERE %exp:cWhere% AND SPF.%NotDel%
		ORDER BY %exp:cOrder% DESC
	EndSql
	
	If !(cAliasQry)->(Eof())
		If (cAliasQry)->PF_TURNOPA == cTurno .And. (cAliasQry)->PF_SEQUEPA == cSeqIni .And. (cAliasQry)->PF_REGRAPA == cRegra
			aAdd(aLogTransf,STR0161)   // "Funcionario possui os mesmos dados de origem/destino da ultima transferencia."
		    lRet := .F.
		Else
			aUltTroca[1] := (cAliasQry)->PF_TURNOPA 
			aUltTroca[2] := (cAliasQry)->PF_SEQUEPA
			aUltTroca[3] := (cAliasQry)->PF_REGRAPA                                       
        Endif
	Else
		lRet := .F.
		aAdd(aLogTransf,STR0160)	// "Não foi possível carregar as trocas de turno para este funcionario!"
	Endif
	
	(cAliasQry)->(dbCloseArea())
Endif

Return( lRet )