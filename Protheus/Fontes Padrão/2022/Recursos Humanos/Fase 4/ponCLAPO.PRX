#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "PON1CLAPO.CH" 


/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁBegin Constantes Manifestas para o aApo					  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
#DEFINE ELEMENTOS_MATRIZ_APONTAMENTOS		41  //-- Constante numero de Elementos na Matriz de Apontamento
/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁEnd Constantes Manifestas para o aApo						  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁConstantes Manifestas para o Array de Tolerancias Diarias    Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
#DEFINE ELEMENTOS_DO_ATOLERANCIA_DIARIA	06
 
#DEFINE TOLERANCIA_DE_ATRASO			01
#DEFINE TOLERANCIA_DE_SAIDA				02
#DEFINE TOLERANCIA_DE_ADN_NOT			03
#DEFINE TOLERANCIA_DE_ADN_NOT_HE		04
#DEFINE TOLERANCIA_DE_FALTAS			05
#DEFINE TOLERANCIA_DE_HE_PERIODO		06

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁConstantes Manifestas para o Array de Arredondamentos DiariosЁ
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
#DEFINE ELEMENTOS_DO_ARRED_DIARIO	07

#DEFINE ARRED_ATRASO				01
#DEFINE ARRED_DSR					02
#DEFINE ARRED_FALTAS				03
#DEFINE ARRED_HE					04
#DEFINE ARRED_NOTURNO				05
#DEFINE ARRED_SAIDA					06
#DEFINE ARRED_9_HORA				07

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁPograma   ЁPONCLAPO    Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁBiblioteca de Classes utilizadas no Apontamento das MarcacoesЁ
цддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё         ATUALIZACOES SOFRIDAS DESDE A CONSTRU─AO INICIAL.              Ё
цддддддддддддбддддддддбддддддбддддддддддддддддддддддддддддддддддддддддддд╢
ЁProgramador Ё Data   Ё BOPS Ё  Motivo da Alteracao                      Ё
цддддддддддддеддддддддеддддддеддддддддддддддддддддддддддддддддддддддддддд╢
ЁErika K.    Ё02/06/08Ё------ЁAlteracao de CH para integracao de diciona |
Ё            Ё        Ё      Ёrios Mexico e R 1.2.                       |
юддддддддддддаддддддддаддддддаддддддддддддддддддддддддддддддддддддддддддды/*/

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁPonClaApo   Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o Ёmain?                              				 			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ё                                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function PonClaApo()
Return( NIL )

/*/
зддддддддддбддддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁInPonClapoExecЁAutor ЁMarinaldo de Jesus   Ё Data Ё24/08/2004Ё
цддддддддддеддддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁExecutar Funcoes Dentro de PONCLAPO                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁInPonClapoExec( cExecIn , aFormParam )						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                 	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 													 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function InPonClapoExec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= &( cExecIn )
EndIF

Return( uRet )

//Begin Class PonVarApon

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁClass     ЁPonVarApon  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁClasse com as Variaveis e Metodos utilizado no Apontamento deЁ
Ё          Ёmarcacoes													 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := PonVarApon():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ё                                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
class PonVarApon

	data aAbonos
	data aAbonosPer
	data aApo
	data aApoHr 	
	data aArreds
	data aArred_A
	data aArred_D
	data aArred_F
	data aArred_H
	data aArred_N
	data aArred_S
	data aArred_9
	data aFaixasHe
	data aHeAutoDia
	data aHeAutoAnt
	data aPreAbo
	data aPreAboDia
	data aHoras
	data aHorasTot
	data aHrTrab
	data aTabExtra
	data aAllTabExtra
	data aHorasAnt
	data aTabCalend
	data aTabClone
	data aMarClone
	data aResClone
	data aNona
	data aLastLog
	data aChkTolArr
	data aSiglaMarc
	data aResult
	data aResAbo
	data aProcessad
	data aLstChkMvInt
	data aAfasta
	data aTransf

	data bSortaHoras
	data bSortaHrTrab
	data bSortaResult

	data cFilRegLst
	data cFilTnoLst

	data cFilSP6
	data cHrMovel
	data cInMovel
	data cAjustIn
	data cChkTMov
	data cChkTMvi
	data cTipoMarc
	data cTipoDia
	data cTolHex
	data cPerAnot
	data cPgIntNTrb
	data cPgNotINTrb
	data cCodHe
	data cPagHext
	data cHrNorm
	data cPgHeDnt
	data cPagInt
	data cPagNotInt
	data cIntFalt
	data cAdNot
	data cAdNotEx
	data cFaltas
	data cSaiAnt
	data cPerSaiA
	data cPerAtra
	data cTolaSai
	data cAtrasos
	data cSaiExpe
	data cCustoGrv
	data cFuncaoGrv
    data cDepto
    data cPosto
	data cProcesso
	data cPeriodo
	data cRoteiro
	data cNumPagto
	data cRegra
	data cTnoCalend
	data cFilSPA
	data cFilSR6
	data cTpHeInter
	data cInterNt
	data cPerHmov
	data cDsr
	data cPerHext
	data cInicJornada
	data cOrdem
	data dDataApo	

	data cIdsAtras
	data cIdsSaida
	data cIdsNotur
	data cIdsNotHe
	data cIdsFalta
	data cIdsExtra
	data cLstChkMvInt

	data dData
	data dDtPesq
	data dIniAfas
	data dFimAfas
	data dDataGravar
	data dPerIni
	data dPerFim
	data dUltDia
	data dSvdIni
	data dSvdFim

	data lAcreNot
	data lIdAcreNot

	data lHnotTab
	data lHnotTbI
	data lHnotFal
	data lHnotAtr
	data lHnotSai
	data lMovelFree
	data lIntMovFree
	data lExtNot
	data lFaixaHE
	data lRF0ChkTable
	data lIntNtrab
	data lModFil
	data lApTpMar
	data lChkTolArr
	data lAbonosPer
	data lApontaTpTrab
	data lPaAjustEJ
	data lPagIntN
    data lAdHeDia
    data lPaPrimDom
    data lPaDescLab
    data lPaFestLab
	data lPrimDom
    data lDescLab
    data lFestLab
        
        
	data lfTabHeAut
	data lfTabPreAbo
	data lApontaOk
	data lTransfEmp

	data nLenHoras
	data nElem
	data nStartnN
	data nProcessad
	data nMarcTab
	data nTotMarcTab
	data nPosAux
	data nDiaIni
	data nDiaFim
	data nPosCalend
	data nIndice
	data nCountOrd
	data nLenMarc
	data nInicJornada
	data nProxJornada
	data nChkTolArr
	data nLenRes
	data nErrorNumber
	data nSiglaMarc
	data nJornadasAp
	data nTamP8Ordem

	data nPosOrdMarc

	data nTHrTab
	data nIntTab
	data nAntMove
	data nPosMove
	data nMovAint
	data nMovPint
	data nIniHnot
	data nFimHnot
	data nMinHnot
	data nTolNtHe
	data nTolHePe
	data nTolFalt
	data nTolNotu
	data nTolSaia
	data nTolAtra
	data nHrsDsr
	data nNonaHor
	data nNonaHorAut
	data nHrInterJd
	data nHeInterA
	data nHeInterN
    data nHrsPgs

            
	data oProcessad
	data oaApo
	data oSpaFields
	data oSr6Fields
	


	method New() constructor

	method ZeraApo( aNotZeraApo )

	method ZeraApoHr()

	method ZeraHrTab( lApHeDtm )

	method SortaHoras( bSort , aHoras )

	method SortaHrTrab( bSort , aHrTrab )

	method SortaResult( bSort , aResult )

	method AddHrTrab( 	dData	,;	//01 -> Data Para Comparacao
						nHoras	,;	//02 -> Horas Para Comparacao
						cTpMarc	,;	//03 -> Tipo da Marcacao
						cCusto	,;	//04 -> Centro de Custo da Marcacao
						cFlag	,;	//05 -> Flag da Marcacao 
						lDuplic	 ;	//06 -> Permite a Duplicacao da Marcacao
					  )

	method ChkMarcDup()

	method ChkHrTDupl()

	method ChkApoAfas()
	
	method ChkAdmDem()

	method RmkWorkHrs()
	
	method RmkIntHrs( aHrTab )

	method ChkMarcImpar()

	method SetaProcessad( lSet , cKey , nPos )

	method PosaProcessad( cKey )

	method GetSetTnoC( aTabCalend )

	method GetSetRegra( aTabCalend )

	method FilRegLstInit()

	method FilTnoLstInit()

	method FilRegCompare()

	method FilTnoCompare()

	method GetSetOrdem( nOrdem )

	method GetSetDataApo( dDataApo )

	method GetSetSPAFil()

	method GetSetSP6Fil()

	method GetSetSR6Fil()

	method GetTabArred()

	method GetTabExtra()

	method GetCfgNot()

	method GetAbonos()

	method GetAbonosPer( aAbonosPer , cFilSRA , cMatSRA )

	method SpaGetSetCpos( aTabCalend )

	method Sr6GetSetCpos( aTabCalend )

	method PosSr6( uCpo , lMsGoto , nOrder )

	method PosSpa( uCpo , lMsGoto , nOrder , lSetRegra )

	method InitChkArr()
	
	method AddDtChkArr()

	method FlgChkArr( lFlag )

	method PutTolArrChkArr()

	method InitProcJorn()

	method ChkTolArr( aEvesIds , lMvArrInte )	//Array com os Eventos x Identificadores do Ponto

	method RstlChkTolArr()

	method ChkRegra( cFilSRA , cMatSRA )    //Filial e Matricula do Funcionario

	method fTabHeAut(	cFilSRA		,;  	//Filial do Funcionario
						cMat 		,;  	//Matricula do Funcionario
						dPerIni 	,;  	//Data Inicial do Periodo de Apontamento
						dPerFim		 ;  	//Data Final do Periodo de Apontamento
		  		     )

	method fTolDiaria(	dData		,;		//Data para Verificacao da Tolerancia
						aEvesIds	,;		//Array com os Eventos x Identificadores do Ponto
						aTolDiaria	 ;		//Array com Todas as Tolerancias do Dia
					  )

	method fAvalTol( dData , cEventos , nTolerancia )

	method fArrDiario(	dData			,;	//Data para Verificacao dos Arredondamentos
						aArredDiario	,;	//Array com as Tabelas de Arredondamento por Dia
						lMvArrInte		 ;	//Se o Arredondamento das Horas e de forma Integral
					  )

	method ChkInMvFree( lReapEj )			//Se realmente ira forcar o Reapontamento desde a Entrada de Jornada

	method ChkHrMovel(	cTipo 			,;	//01 -> "EJ"(Entra da de Jornada), "SI"(Saida de Intervalo) ou "SE" (Sai.Exp.)
						nPosM			,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
						cSiglaMarc		 ;	//03 -> Tipo da Marcacao ( 1E, 1S, 2E, 2S ... )
					 )

	method TabPreAbo(	cFilSRA		,;  	//01 -> Filial do Funcionario
						cMat 		,;  	//02 -> Matricula do Funcionario
						dPerIni 	,;  	//03 -> Data Inicial do Periodo de Apontamento
						dPerFim		 ;  	//04 -> Data Final do Periodo de Apontamento
		  		     )  
                      
	method InitPreAbo( aTabCalend, cFilSRA, cMatSRA ) 

	method AddPerHr(    nIdDiaApo	,;  //01 -> Identificador do Elemento Diurno no Apo
	                    nIdNotApo	,;  //02 -> Identificador do Elemento Noturno no Apo
	                    nPosElem	,;  //03 -> Posicao no Elemento do Identificador
	                    aApoHr		,;  //04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
	                    dDt1		,;	//05 -> Data 1
						nHr1		,;	//06 -> Hora 1
						dDt2		,;	//07 -> Data 2
						nHr2		,;	//08 -> Hora 2
						nHoras		,;	//09 -> <@>Horas Normais Apontadas
						nHorasNot	,;	//10 -> <@>Horas Noturnas Apontadas
						lNoturno	,;	//11 -> Apontar Horas Noturnas
						dDtIni		,;	//12 -> Data Inicial Para a Hora Noturna
						nHrAcNot	,;	//13 -> <@>Horas de Acrescimo Noturno
						nIniHnot	,;	//14 -> Inicio do Horario Noturno
						nFimHnot	,;	//15 -> Final do Horario Noturno
						nMinHnot	,;	//16 -> Minutos do Horario Noturno
						lAcreNot	,;	//17 -> Apenas Acrescimo Noturno
						aPerNot		,;	//18 -> Periodo Horario Noturno
						aPerDia		,;	//19 -> Periodo Horario Diurno 
						lSoma		,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
						lNewAddHor	;   //21 -> Adiciona Periodo como Novo Elemento   
					  )	   
					  	  		                         
	method CalcPerHr(	dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2		,;	//04 -> Hora 2
						nHoras		,;	//05 -> <@>Horas Normais Apontadas
						nHorasNot	,;	//06 -> <@>Horas Noturnas Apontadas
						lNoturno	,;	//07 -> Apontar Horas Noturnas
						dDtIni		,;	//08 -> Data Inicial Para a Hora Noturna
						nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno 
						nIniHnot	,;	//10 -> Inicio do Horario Noturno
						nFimHnot	,;	//11 -> Final do Horario Noturno
						nMinHnot	,;	//12 -> Minutos do Horario Noturno
						lAcreNot	,;	//13 -> Apenas Acrescimo Noturno
						aPerNot		,;	//14 -> Periodo Horario Noturno 
						aPerDia		;	//15 -> Periodo Horario Diurno
				  )	
	 			    				  				  
	method GetPerDia(   dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2		,;	//04 -> Hora 2				
						aPerNot		,;	//05 -> Periodo da Hora Noturna
						aPerDia		 ;	//06 -> Periodo da Hora Diurna
					  )
					     
					 
  	method PutPer(	nIdApo		,;  //01 -> Identificador do Elemento no Apo
               		nPosElem	,;  //02 -> Posicao no Elemento do Identificador
               		aPer		,;	//04 -> Array de Periodos Diurno e/ou Noturno
               		lNewAdd		;   //05 -> Adiciona Periodo ao aApoHr
               	 )
                	
   	method AlocaPer(    nIdOrigem	,; //01 -> Identificador de Origem
   						nItOrigem	,; //02 -> Item de Origem
   						nIdDestino	,; //03 -> Identificador de Destino
   						nItDestino	,; //04 -> Item Destino
   						lAddNew		;  //05 -> Adiciona Periodo
   					) 

	method IdPreAbo(  	dDtGer				,;	//01 -> Data da Geracao
						nIdentificador		,;  //02 -> Elemento do Apontamento
						nIndice				,;  //03 -> Item do Elemento
						cEvento				,;	//04 -> Codigo do Evento
						cCustoGrv			,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc			,;	//06 -> Tipo de Marcacao
						lAcumula			,;	//07 -> True para Acumular as Horas
						cPerApur			,;	//08 -> Periodo de Apuracao
						nTolera				,;	//09 -> Tolerancia
						cTipoArred			,;	//10 -> Tipo de Arredondamento a Ser Utilizado  
						cFuncaoGrv			,;  //11 -> Funcao a ser Gravada 
						cDepto				,;  //12 -> Depto a ser gravado
						cPosto				,;  //13 -> Posto a ser gravado	
						cProcesso			,;  //14 -> Processo a ser gravado
						cPeriodo			,;  //15 -> Periodo  a ser gravado
						cRoteiro 			,;  //16 -> Roteiro  a ser gravado
						cNumPagto			 ;  //17 -> NumPagto a ser gravado
					)             
	  
	  
     method SaidaAntPreAbo()

endclass

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁNew       	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁConstrutor da Classe PonVarApon								 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := PonVarApon():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method New() class PonVarApon

	::aAbonos		:= {}
	::aAbonosPer	:= {}
	::aApo			:= {}
	::aApoHr		:= {}
	::aArreds		:= {}
	::aArred_A		:= {}
	::aArred_D		:= {}
	::aArred_F		:= {}
	::aArred_H		:= {}
	::aArred_N		:= {}
	::aArred_S		:= {}
	::aArred_9		:= {}
	::aFaixasHe		:= {}
	::aHeAutoDia	:= {}
	::aHeAutoAnt	:= {}
	::aPreAbo		:= {}
	::aPreAboDia	:= {}
	::aHoras		:= {}
	::aHorasTot		:= {}
	::aHrTrab		:= {}
	::aTabExtra		:= {}
	::aAllTabExtra	:= {}
	::aHorasAnt		:= {}
	::aTabCalend	:= {}
	::aTabClone		:= {}
	::aMarClone		:= {}
	::aResClone		:= {}
	::aNona			:= {}
	::aLastLog		:= {}
	::aChkTolArr	:= {}
	::aSiglaMarc	:= {}
	::aResult		:= {}
	::aResAbo		:= {}
	::aProcessad	:= {}
	::aLstChkMvInt	:= {}
	::aAfasta		:= {}
	::aTransf		:= {}

	::bSortaHoras	:= { |x,y|	(;
										x[17] + x[03]; 	//-- Data e Hora da Marcacao + Tipo da Marcacao
										<;
										y[17] + y[03];	//-- Data e Hora da Marcacao + Tipo da Marcacao
								 );
						}

	::bSortaHrTrab	:= { |x,y|	(;
									x[09] + x[03]; 	//-- Data e Hora da Marcacao + Tipo da Marcacao
									<;
									y[09] + y[03];	//-- Data e Hora da Marcacao + Tipo da Marcacao
								);
						}

	::bSortaResult := { |x,y|	x[ARESULT_DTOS_DATA]	+	;
	    			  			x[ARESULT_EVENTO]		+	;
	                    		x[ARESULT_TPMARCA]			;
	                    		<;
	                    		y[ARESULT_DTOS_DATA]	+	;
	                    		y[ARESULT_EVENTO]		+	;
	                    		y[ARESULT_TPMARCA]			;
				 	  }

	::cFilRegLst	:= ::FilRegLstInit()
	::cFilTnoLst	:= ::FilTnoLstInit()

	::cFilSP6		:= ""
	::cHrMovel		:= ""
	::cInMovel		:= ""
	::cAjustIn		:= ""
	::cChkTMov		:= ""
	::cChkTMvi		:= ""
	::cTipoMarc		:= ""
	::cTipoDia		:= ""
	::cTolHex		:= ""
	::cPerAnot		:= ""
	::cPgIntNTrb	:= ""
	::cPgNotINTrb	:= ""
	::cCodHe		:= ""
	::cPagHext		:= ""
	::cHrNorm		:= ""
	::cPgHeDnt		:= ""
	::cPagInt		:= ""
	::cPagNotInt	:= ""
	::cIntFalt		:= ""
	::cAdNot		:= ""
	::cAdNotEx		:= ""
	::cFaltas		:= ""
	::cSaiAnt		:= ""
	::cPerSaiA		:= ""
	::cPerAtra		:= ""
	::cTolaSai		:= ""
	::cAtrasos		:= ""
	::cSaiExpe		:= ""
	::cCustoGrv		:= ""
	::cFuncaoGrv	:= ""
	::cDepto		:= "" 
	::cPosto		:= ""
	::cProcesso		:= ""
	::cPeriodo		:= ""
	::cRoteiro		:= ""
	::cNumPagto		:= "" 
	::cRegra		:= ""
	::cFilRegLst	:= ""
	::cTnoCalend  	:= ""
	::cFilTnoLst	:= ""
	::cFilSPA	  	:= ""
	::cFilSR6		:= ""
	::cTpHeInter	:= ""
	::cInterNt		:= ""
	::cPerHmov		:= ""
	::cDsr			:= ""
	::cPerHext		:= ""
	::cInicJornada	:= ""
	::cOrdem		:= ""
	::dDataApo		:= Ctod("")

	::cIdsAtras		:= "011N*012A"
	::cIdsSaida		:= "013N*014A*019N*020A"
	::cIdsNotur		:= "003N*004A*"
	::cIdsNotHe		:= "027N*028A"
	::cIdsFalta		:= "007N*008A*009N*010A*033N*032A*035N*034A"
	::cIdsExtra		:= "029A.038N" 
	::cLstChkMvInt	:= "__cLstChkMvInt__"

	::dData			:= Ctod("//")
	::dDtPesq		:= Ctod("//")
	::dIniAfas		:= Ctod("//")
	::dFimAfas		:= Ctod("//")
	::dDataGravar	:= Ctod("//")
	::dPerIni		:= Ctod("//")
	::dPerFim		:= Ctod("//")
	::dUltDia		:= Ctod("//")
	::dSvdIni		:= Ctod("//")
	::dSvdFim		:= Ctod("//")

	::lAcreNot		:= .F.
	::lIdAcreNot	:= .F.
	::lHnotTab		:= .F.
	::lHnotTbI		:= .F.
	::lHnotFal		:= .F.
	::lHnotAtr		:= .F.
	::lHnotSai		:= .F.
	::lMovelFree	:= .F.	
	::lIntMovFree	:= .F.
	::lExtNot		:= .F.
	::lFaixaHE		:= .F.
	::lRF0ChkTable	:= .F.
	::lIntNtrab		:= .F.
	::lModFil		:= .F.
	::lApTpMar		:= .F.
	::lChkTolArr	:= .F.
	::lAbonosPer	:= .F.
	::lApontaTpTrab	:= .F.
	::lPaAjustEJ	:= .F.
	::lPagIntN		:= .F.
	::lAdHeDia		:= .F.
	::lPAPrimDom	:= .F.
	::lPAFestLab	:= .F.
	::lPADescLab	:= .F.
	::lPrimDom		:= .F.
	::lFestLab		:= .F.
	::lDescLab		:= .F.

				
	::lfTabHeAut	:= .T.
	::lfTabPreAbo	:= .T.
	::lApontaOk    	:= .T.
	::lTransfEmp	:= .F.

	::nLenHoras		:= 0
	::nElem			:= 0
	::nStartnN		:= 0
	::nProcessad	:= 0
	::nMarcTab		:= 0
	::nTotMarcTab	:= 0
	::nPosAux		:= 0
	::nDiaIni		:= 0
	::nDiaFim		:= 0
	::nPosCalend	:= 0
	::nIndice		:= 0
	::nCountOrd		:= 0
	::nLenMarc		:= 0
	::nInicJornada	:= 0
	::nProxJornada	:= 0
	::nChkTolArr	:= 0
	::nLenRes		:= 0
	::nErrorNumber	:= 0
	::nSiglaMarc	:= 0
	::nJornadasAp	:= 0
	::nTamP8Ordem	:= 0

	::nPosOrdMarc	:= 1

	::nTHrTab		:= 0
	::nIntTab		:= 0
	::nAntMove		:= 0
	::nPosMove		:= 0
	::nMovAint		:= 0
	::nMovPint		:= 0
	::nIniHnot		:= 0
	::nFimHnot		:= 0
	::nMinHnot		:= 0
	::nTolNtHe		:= 0
	::nTolHePe		:= 0
	::nTolFalt		:= 0
	::nTolNotu		:= 0
	::nTolSaia		:= 0
	::nTolAtra		:= 0
	::nHrsDsr		:= 0
	::nNonaHor		:= 0
	::nNonaHorAut	:= 0
	::nHrInterJd	:= 0
	::nHeInterA		:= 0
	::nHeInterN		:= 0
	::nHrsPgs		:= 0

	
	::nSiglaMarc	:= TabMarc( "SPJ" , ::aSiglaMarc )
	::nJornadasAp	:= ( ::nSiglaMarc / 2 )
	::nTamP8Ordem	:= GetSx3Cache( "P8_ORDEM" , "X3_TAMANHO" )

	::oProcessad	:= ApoElemPrc():New( ::aProcessad )
	::oaApo			:= StructaApo():New()
	::oSpaFields	:= SpaFields():New()
	::oSr6Fields	:= Sr6Fields():New()
                
return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁZeraApo		Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁInicializa o Array aApo										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ZeraApo( aNotZeraApo )									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ZeraApo( aNotZeraApo ) class PonVarApon

	Local nNotZera
	
	IF Empty( ::aApo )
		::aApo := ( Array( ELEMENTOS_MATRIZ_APONTAMENTOS , ::nSiglaMarc ) )
	EndIF

	aEval( ::aApo , { |uArr,nZera| nNotZera := nZera , IF( aScan( aNotZeraApo , nNotZera ) == 0 , aFill( ::aApo[ nZera ] , 0 ) , NIL ) } )

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁZeraHrTab	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё03/07/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁZera Horario da Tabela em Dias Nao Trabalhados				 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ZeraApo()           									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ZeraHrTab( lApHeDtm ) class PonVarApon

	Local nX
	Local nW
	Local nFornW
	Local nIntTab
	Local lPreIntNTrab
   
	/*
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁVerifica as Horas de Intervalo para a Jornada em Questao	  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды*/
	
	nIntTab := 0.00 
			
	For nW:= ::nPosCalend to Len(::aTabCalend)
	    If ::aTabCalend[nW,CALEND_POS_DATA_APO] == ::dDataApo
   		   nIntTab := SomaHoras( nIntTab , ::aTabCalend[nW, CALEND_POS_HRS_INTER] )
	    Else
	       Exit
	    Endif
	Next nW   

	/*
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁVerifica Se paga Intervalo em Dias Nao Trabalhados           Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
   	lPreIntNTrab	:= (;
   							( ::aTabCalend[ ::nPosCalend , CALEND_POS_TIPO_DIA ] != "S" );
					 		.and.;
					 		( nIntTab > 0 );
					 		.and.;
					 		( ::lPagIntN );
					 		.and.;
					 		!( ::aTabCalend[ ::nPosCalend , CALEND_POS_TRAB_FERIADO ] );
					 	)	

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe a apuracao das Horas Extras for de Acordo com a Data    daЁ
	ЁMarcacao zera os Horarios da Tabela para Dias Nao TrabalhadosЁ
	ЁBOPS 000015491												  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF (;
			( lApHeDtm );
			.and.;
			!( lPreIntNtrab );
			.and.;
			(;
				(;
					( ::aTabCalend[ ::nPosCalend , CALEND_POS_TIPO_DIA ] != "S" );
					.or.;
					(;
						( ::aTabCalend[ ::nPosCalend , CALEND_POS_FERIADO ] );
						.and.;
						!( ::aTabCalend[ ::nPosCalend , CALEND_POS_TRAB_FERIADO ] );
					);
				);
				.and.;
				( ::aTabCalend[ ::nPosCalend , CALEND_POS_EXCECAO ] != "E" );
			 );
		)
		nX := 0
		nW := Len( ::aTabClone )
		IF ( ( nFornW := aScan( ::aTabClone , { |x| x[ CALEND_POS_DATA_APO ] == ::dDataApo } ) ) > 0 )
			While (;
						( nFornW <= nW );
						.and.;
						( nW > 0 );
						.and.;
						( ::aTabClone[ nFornW , CALEND_POS_DATA_APO ] == ::dDataApo );
					)	
				IF ( ++nX <= 2 )
					::aTabClone[ nFornW , CALEND_POS_DATA		] := ::dData
		  			::aTabClone[ nFornW , CALEND_POS_HORA		] := 23.5958
					::aTabClone[ nFornW , CALEND_POS_HRS_TRABA	] := 0
	   				::aTabClone[ nFornW , CALEND_POS_HRS_INTER	] := 0
				Else
					( aDel( @::aTabClone , nFornW ) , aSize( @::aTabClone , --nW  ) , --nFornW )
				EndIF
				++nFornW
			End While	
		EndIF 
	EndIF

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁSortaHoras	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSorteia o Array aHoras										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:SortaHoras( [ bSort ] , [ aHoras ] )					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method SortaHoras( bSort , aHoras ) class PonVarApon

	DEFAULT bSort := ::bSortaHoras
	IF ( ValType( aHoras ) == "A" )
		aSort( aHoras , NIL , NIL , bSort )
	Else
		aSort( ::aHoras , NIL , NIL , bSort )
	EndIF	

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁSortaHrTrab	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSorteia o Array aHrTrab 									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:SortaHrTrab( [ bSort ] , [ aHrTrab ] )					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method SortaHrTrab( bSort , aHrTrab ) class PonVarApon

	DEFAULT bSort := ::bSortaHrTrab
	IF ( ValType( aHrTrab ) == "A" )
		aSort( aHrTrab , NIL , NIL , bSort )
	Else
		aSort( ::aHrTrab , NIL , NIL , bSort )
	EndIF

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁSortaResult	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSorteia o Array aResult  									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:SortaResult( [ bSort ] , [ aResult ] )					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method SortaResult( bSort , aResult ) class PonVarApon

	DEFAULT bSort := ::bSortaResult
	IF ( ValType( aResult ) == "A" )
		aSort( aResult , NIL , NIL , bSort )
	Else
		aSort( ::aResult , NIL , NIL , bSort )
	EndIF

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁAddHrTrab	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega o Array aHrTrab com as Horas para o Calculo de  HorasЁ
Ё          ЁTrabalhadas													 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:AddHrTrab( ... )										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method AddHrTrab( dData , nHoras , cTpMarc , cCusto , cFlag , lDuplic ) class PonVarApon

	DEFAULT cFlag	:= ""
	DEFAULT lDuplic := .F.

	IF (;
			( lDuplic );
			.or.;
			( aScan( ::aHrTrab , { |x| ( ( x[01] == dData ) .and. ( x[02] == nHoras ) ) } ) == 0 );
		)
		aAdd( ::aHrTrab ,;
							{;
	 							dData							,;	//01 - Data da Marcacao
								nHoras							,;	//02 - Hora da Marcacao
								cTpMarc							,;	//03 - Tipo da Marcacao
								cCusto							,;	//04 - Centro de Custo da Marcacao
								0								,;	//05 - Valor Auxiliar Horas Normais
								0								,;	//06 - Valor Auxiliar Horas Noturnas
								0								,;	//07 - Valor Auxiliar Adicional Noturno
								cFlag							,;	//08 - Marcacao ou Tabela
								DataHora2Str( dData , nHoras )   ;	//09 - String de Data Para Sorteio do aHrTrab
							};
			)
	EndIF

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkHrTDupl	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se Existem Flags de Tipo de Marcacao Duplicados  priЁ
Ё          Ёorizando a Marcacao em Detrimento da Tabela					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ChkHrTDupl()        									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkHrTDupl() class PonVarApon
       
	Local nChk := 0
	Local nDup := 0
	
	Begin Sequence

		::nLenHoras := Len( ::aHrTrab )
		IF ( ( ::nLenHoras % 2 ) == 0 )
			Break
		EndIF
	
		For nChk := 1 To ::nLenHoras
			For nDup := ( nChk + 1 ) To ::nLenHoras
				IF ( ::aHrTrab[ nChk , 03 ] == ::aHrTrab[ nDup , 03 ] )
					IF !( ::aHrTrab[ nChk , 08 ] == "M" )
						( aDel( ::aHrTrab , nChk ) , aSize( ::aHrTrab , --::nLenHoras  ) )
						Break
					ElseIF !( ::aHrTrab[ nDup , 08 ] == "M" )
						( aDel( ::aHrTrab , nDup ) , aSize( ::aHrTrab , --::nLenHoras  ) )
						Break
					EndIF
				EndIF
			Next nDup
		Next nChk
	
	End Sequence

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkApoAfas	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё03/07/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se Deve Efetuar Apontamento para Funcionario AfstadoЁ
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ChkApoAfas()        									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkApoAfas() class PonVarApon

	Local lApontaAfas := .T.
	Local nPosData

	::dIniAfas := ::aTabCalend[ ::nPosCalend , CALEND_POS_INI_AFAST ]
	::dFimAfas := ::aTabCalend[ ::nPosCalend , CALEND_POS_FIM_AFAST ]
	IF (;
			( ::aTabCalend[ ::nPosCalend , CALEND_POS_AFAST ] );
			.and.;
			(;
				( ::dData >= ::dIniAfas );
				.and.;
				( ::dData <= IF( Empty( ::dFimAfas ) , ::dData , ::dFimAfas ) );
			 );
		)
		lApontaAfas := ::aTabCalend[ ::nPosCalend , CALEND_POS_APON_FERIAS ]
		IF !( lApontaAfas )
			IF ( ( nPosData := aScan( ::aResult , { |x| x[ ARESULT_DATA ] == ::dData } ) ) > 0 )
				aEval( ::aResult , { |x| x[ ARESULT_HORAS ] := 0 } )
			EndIF
			::dData++
		EndIF
	EndIF

return( lApontaAfas )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkAdmDem	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё20/08/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica Admissao e Demissao do Funcionario                  Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ChkAdmDem()        									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkAdmDem(cFilSRA , cMatSRA, aAfasta ) class PonVarApon

Local aRetSitucao
Local lChkAdmDem
Local nPosData
Local lTransfEmp   

If aAfasta <> NIL
   ::aAfasta:=aClone(aAfasta)
Endif                        

Begin Sequence

	IF !( lChkAdmDem := ( ::dData >= fDtaAdmis() ) )
		Break
	EndIF

    aRetSitucao := SRA->( PonRetSit( cFilSRA , cMatSRA  , ::dData, ::aAfasta, ::aTransf, ::lTransfEmp  ))

	IF ( lChkAdmDem := ( aRetSitucao[1] <> "D" ) )
		Break
	EndIF

	IF ( lChkAdmDem := Empty( aRetSitucao[4] ) )
		Break
	EndIF

	IF !( lChkAdmDem := ( ::dData <= aRetSitucao[4] ) )
		Break
	EndIF

End Sequence

IF !( lChkAdmDem )
	IF ( ( nPosData := aScan( ::aResult , { |x| x[ ARESULT_DATA ] == ::dData } ) ) > 0 )
		aEval( ::aResult , { |x| x[ ARESULT_HORAS ] := 0 } )
	EndIF
	::dData++
EndIF

return( lChkAdmDem )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁRmkWorkHrs  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё16/08/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRemonta Horas Trabalhadas no ::aApo				 			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:RmkWorkHrs()        									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method RmkWorkHrs() class PonVarApon

	Local aHrTab	:= {}
	Local nInc		:= 0
	Local nIncPlus1	:= 0
	Local nIncs		:= 0
	Local nHrsNor	:= 0
	Local nHrsNot	:= 0
	Local nPos		:= 0
	
	aEval( ::aHoras ,{ |y| IF( ( y[3] != "M" ) , aAdd( aHrTab , aClone( y ) ) , NIL ) } )
	
	nIncs := Len( aHrTab )
	For nInc := 1 To nIncs Step 2
		nIncPlus1 := ( nInc + 1 )
		IF ( ( nPos := aScan( ::aSiglaMarc , { |x| ( x == aHrTab[ nInc , 3 ] ) } ) ) > 0 )
			nHrsNor := nHrsNot := 0
			fCalHoras(	aHrTab[ nInc , 1 ]			,;	//01 -> Data 1
						aHrTab[ nInc , 2 ]			,;	//02 -> Hora 1
						aHrTab[ nIncPlus1   , 1 ]	,;	//03 -> Data 2
						aHrTab[ nIncPlus1   , 2 ]	,;	//04 -> Hora 2
						@nHrsNor					,;	//05 -> <@>Horas Normais Apontadas
						@nHrsNot					,;	//06 -> <@>Horas Noturnas Apontadas
						.T.							,;	//07 -> Apontar Horas Noturnas
						::dData						,;	//08 -> Data Inicial Para a Hora Noturna
						NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
						::nIniHnot					,;	//10 -> Inicio do Horario Noturno
						::nFimHnot					,;	//11 -> Final do Horario Noturno
						::nMinHnot					,;	//12 -> Minutos do Horario Noturno
						NIL     					,;	//13 -> Apenas Acrescimo Noturno
						NIL							 ;	//14 -> Periodo da Hora Noturna
					  )
	    	::aApo[ ::oaApo:HrTrbTabel , nPos ]	:= nHrsNor
	    	::aApo[ ::oaApo:HrTrbNotTb , nPos ]	:= nHrsNot
	    	
	    	nHrsNor := nHrsNot := 0
    		fCalHoras(	aHrTab[ nInc , 1 ]			,;	//01 -> Data 1
						aHrTab[ nInc , 2 ]			,;	//02 -> Hora 1
						aHrTab[ nIncPlus1   , 1 ]	,;	//03 -> Data 2
						aHrTab[ nIncPlus1   , 2 ]	,;	//04 -> Hora 2
						@nHrsNor					,;	//05 -> <@>Horas Normais Apontadas
						Nil							,;	//06 -> <@>Horas Noturnas Apontadas
						.F.							,;	//07 -> Apontar Horas Noturnas
						::dData						,;	//08 -> Data Inicial Para a Hora Noturna
						NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
						::nIniHnot					,;	//10 -> Inicio do Horario Noturno
						::nFimHnot					,;	//11 -> Final do Horario Noturno
						::nMinHnot					,;	//12 -> Minutos do Horario Noturno
						NIL     					,;	//13 -> Apenas Acrescimo Noturno
						NIL							 ;	//14 -> Periodo da Hora Noturna
					  ) 
			IF !( ::lHnotFal ) //Se Nao Considerar o Horario Noturno Para Desconto das Faltas
			  	::aApo[ ::oaApo:HrTrabTbNN , nPos ]	:= nHrsNor
			Endif
			  	
		EndIF
	Next nInc

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁRemonta Horas de Intervalo no ::aApo em funcao das Alteracoes	  no	Ё
	Ё::aHoras																Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	::RmkIntHrs( aHrTab )

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁRmkIntHrs   Ё Autor ЁMarinaldo de Jesus    Ё Data Ё19/07/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRemonta Horas de Intervalo no ::aApo				 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:RmkWorkHrs()        									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method RmkIntHrs( aHrTab ) class PonVarApon

Local aIntervalos
Local baScan
Local nLoop
Local nLoop1
Local nLoops
Local nIntNor
Local nIntNot
Local nIntTab

Begin Sequence

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁBloco para Pesquisa no Calendario de Marcacoes    		  	  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	baScan	:= { |x|;
						( x[ CALEND_POS_DATA_APO ] == ::dDataApo );
						.and.;
						( "S" $ x[ CALEND_POS_TIPO_MARC ] );
						.and.;
						( x[ CALEND_POS_HRS_INTER ] > 0 );
				 }
	
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁPosicao Inicial em aTabCalend                        		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	nIntTab := ::nPosCalend

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁProcura os Intervalos no Calendario de Marcacoes    		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aIntervalos := {}
	While ( ( nIntTab := aScan( ::aTabCalend , baScan , nIntTab ) ) > 0 )
		aAdd( aIntervalos , ::aTabCalend[ nIntTab , CALEND_POS_TIPO_MARC ] )
		++nIntTab
	End While	

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁZero as Horas que serao Recalculadas    					  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aFill( ::aApo[ ::oaApo:HrIntTabel ] , 0 )
	aFill( ::aApo[ ::oaApo:HrIntNotTb ] , 0 )
	aFill( ::aApo[ ::oaApo:HrIntTbNNt ] , 0 )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe nao Existirem Intervalos, Abandono  					  Ёs
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF Empty( aIntervalos )
		Break
	EndIF

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCarrego Apenas as Informacoes da Tabela					  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF Empty( aHrTab )
		aHrTab := {}
		aEval( ::aHoras , { |aElem| IF( ( aElem[ 3 ] != "M" ) , aAdd( aHrTab , aClone( aElem ) ) , NIL ) } )
	EndIF
	
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe nao Existirem Informacoes de Tabela, Abandono			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF ( ( nLoops := Len( aHrTab ) ) == 0 )
		Break
	EndIF

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁBloco para Pesquisa em aIntervalos							  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	baScan	:= { |cFlag| ( cFlag == aHrTab[ nLoop , 03 ] ) }

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializo o Loop em 2 pois corresponde aa Primeira Saida	  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	For nLoop := 2 To nLoops Step 2

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁAbandono aqui para evitar erro no Subcrito do Array          Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( nLoop >= nLoops )
		   Exit
		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁApenas se Tiver Horario de Intervalo                         Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( aScan( aIntervalos , baScan  ) == 0 )
			Loop
		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁObtenho o Proximo Indice do Array                            Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		nLoop1 := ( nLoop + 1 )
			
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁReinicializando as Variaveis que Armazenarao o Conteudo   dasЁ
		ЁHoras														  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		nIntNor	:= 0
		nIntNot	:= 0

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCalculando Horas Considerando o Adicional Noturno			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		fCalHoras(	aHrTab[ nLoop	, 1 ]		,;	//01 -> Data 1
					aHrTab[ nLoop	, 2 ]		,;	//02 -> Hora 1
					aHrTab[ nLoop1	, 1 ]		,;	//03 -> Data 2
					aHrTab[ nLoop1	, 2 ]		,;	//04 -> Hora 2
					@nIntNor					,;	//05 -> <@>Horas Normais Apontadas
					@nIntNot					,;	//06 -> <@>Horas Noturnas Apontadas
					.T.							,;	//07 -> Apontar Horas Noturnas
					::dData						,;	//08 -> Data Inicial Para a Hora Noturna
					NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
					::nIniHnot					,;	//10 -> Inicio do Horario Noturno
					::nFimHnot					,;	//11 -> Final do Horario Noturno
					::nMinHnot					,;	//12 -> Minutos do Horario Noturno
					::lAcreNot					,;	//13 -> Apenas Acrescimo Noturno
					NIL			 				 ;	//14 -> Periodo da Hora Noturna
				 )	

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrego o Novo Valor de Intervalo Normal                     Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::aApo[ ::oaApo:HrIntTabel , nLoop ] := nIntNor
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrego o Novo Valor de Intervalo Noturno                    Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::aApo[ ::oaApo:HrIntNotTb , nLoop ] := nIntNot
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁReinicializando as Variaveis que Armazenarao o Conteudo   dasЁ
		ЁHoras														  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		nIntNor	:= 0
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCalculando Horas Nao Considerando o Adicional Noturno		  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		fCalHoras(	aHrTab[ nLoop	, 1 ]		,;	//01 -> Data 1
					aHrTab[ nLoop	, 2 ]		,;	//02 -> Hora 1
					aHrTab[ nLoop1	, 1 ]		,;	//03 -> Data 2
					aHrTab[ nLoop1	, 2 ]		,;	//04 -> Hora 2
					@nIntNor					,;	//05 -> <@>Horas Normais Apontadas
					NIL							,;	//06 -> <@>Horas Noturnas Apontadas
					.F.							,;	//07 -> Apontar Horas Noturnas
					::dData						,;	//08 -> Data Inicial Para a Hora Noturna
					NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
					::nIniHnot					,;	//10 -> Inicio do Horario Noturno
					::nFimHnot					,;	//11 -> Final do Horario Noturno
					::nMinHnot					,;	//12 -> Minutos do Horario Noturno
					::lAcreNot					,;	//13 -> Apenas Acrescimo Noturno
					NIL			 				 ;	//14 -> Periodo da Hora Noturna
				 )	

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrego Novo Valor de Intervalo Sem a Hora Noturna           Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::aApo[ ::oaApo:HrIntTbNNt , nLoop ] := nIntNor

	Next nLoop

End Sequence
	
return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkMarcDup  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/03/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁModifica os Minutos das Marcacoes que Estejam Duplicadas     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ChkMarcDup()        									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁvoid   														 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁaHoras                                                 	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkMarcDup() class PonVarApon

	Local aEqualMarc	:= {}
	Local bComp			:= { || .F. }
	Local nX			:= 0
	Local nY			:= 0
	Local nLenHoras		:= 0
	Local nLenEqual		:= 0
	Local nFirstSec		:= 0
	
	DEFAULT ::aHoras	:= {}
	
	#DEFINE __MILISECONDS__		0.00000001
	
	IF ( !Empty( ::aHoras ) )
		nLenHoras	:= Len( ::aHoras )
		bComp		:= { |aE|	( aE[ nY , 01 ] == aE[ nX , 01 ] );	//Data da Marcacao
								.and.;
							 	( aE[ nY , 02 ] == aE[ nX , 02 ] );	//Hora da Marcacao
							 	.and.;
							 	( aE[ nY , 03 ] == "M" );			//Marcacao Efetiva
						}
		For nX := 1 To nLenHoras
			aEqualMarc	:= {}
			nFirstSec	:= __MILISECONDS__
			IF ( ::aHoras[ nX , 03 ] == "M" )
				For nY := nX To nLenHoras
					IF Eval( bComp , ::aHoras )
						aAdd( aEqualMarc , { nY , nFirstSec } )
						nFirstSec += __MILISECONDS__
					Else
						Exit
					EndIF
				Next nY
				IF ( nLenEqual := Len( aEqualMarc ) ) > 1.00
					For nY := 1 To nLenEqual
						::aHoras[ aEqualMarc[ nY , 01 ] , 02 ] += aEqualMarc[ nY , 02 ]
					Next nY
				EndIF
			EndIF
		Next nX
	EndIF

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkMarcImparЁ Autor ЁMarinaldo de Jesus    Ё Data Ё26/03/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRemonta ::aHoras para eliminar Marcacoes Impares    		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ChkMarcImpar()				 			 			 	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁvoid														 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkMarcImpar() class PonVarApon

	Local aHorasNew := {}
	Local aPosTab	:= {}
	Local nDif_01	:= 0
	Local nDif_02	:= 0
	Local nLenHor	:= Len( ::aHoras )
	Local nPosTab	:= 0
	Local nX		:= 0
	
	IF ( ( nLenHor % 2 ) > 0 )
		aPosTab := Array( ::nSiglaMarc , 3 )
		For nX := 1 To ::nSiglaMarc
			aPosTab[ nX , 1 ] := ::aSiglaMarc[ nX ]
			aPosTab[ nX , 2 ] := aScan( ::aHoras , { |x| x[3] == ::aSiglaMarc[ nX ] } )
			IF ( aPosTab[ nX , 2 ] > 0 )
				aPosTab[ nX , 3 ] := ::aHoras[ aPosTab[ nX , 2 ] , 10 ]
			Else
				aPosTab[ nX , 3 ] := ""
			EndIF	
		Next nX 
		For nX := 1 To ::nSiglaMarc
			IF !Empty( aPosTab[ nX , 2 ] )
				// -- Verifica a Entrada de Jornada
				IF ( aPosTab[ nX , 3 ] == "EJ" )
					IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
						IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) , 3 ] == "M" )
							IF !( ::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 3 ] == "M" )
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) ] , NIL )
								Exit
							EndIF	
						EndIF
					ElseIF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
						IF ( nPosTab := aScan( aPosTab, { |x| x[3] == "SI" } ) ) > 0
							nDif_01 := fCalHoras(	::aHoras[ aPosTab[ nX , 2 ], 1 ]						,;
												 	::aHoras[ aPosTab[ nX , 2 ], 2 ]						,;
												 	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 1 ]	,;
												 	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 2 ]	,;
												 	0								 						,; 
												 	0														,;
											 		.F.														 ;
												 )
							nDif_02 := fCalHoras(	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 1 ]	,;
												 	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 2 ]	,;
												 	::aHoras[ aPosTab[ nPosTab , 2 ] , 1 ]					,;
												 	::aHoras[ aPosTab[ nPosTab , 2 ] , 2 ]					,;
												 	0												 		,; 
												 	0														,;
												 	.F.										 				 ;
												 )
							IF ( nDif_01 > nDif_02 )
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) ] , NIL )
								Exit
							EndIF
						EndIF
					EndIF
		       	EndIF
				// -- Verifica a Saida de Intervalo
				IF ( aPosTab[ nX , 1 ] == "SI" )
					IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
						IF(;
								( ( nPosTab := aScan( aPosTab, { |x| x[3] == "EJ" } ) ) > 0 );
								.and.;
								( ::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 3 ] != "M" );
						   )	
							IF ( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1 ) , 3 ] == "M" )
								aFill( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1 ) ] , NIL )
								Exit
							EndIF
						ElseIF ( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
							aFill( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) ] , NIL )
							Exit
						EndIF
					ElseIF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
						//...
					EndIF
		       	EndIF
				// -- Verifica a Entrada de Intervalo
				IF ( aPosTab[ nX , 1 ] == "EI" )
					IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
						IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) , 3 ] == "M" )
							IF ( ::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 3 ] == "M" )
								IF ( ( nPosTab := aScan( aPosTab, { |x| x[3] == "SI" } ) ) > 0 )
									nDif_01 := fCalHoras(	::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 1 ]		,;
														 	::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 2 ]		,;
														 	::aHoras[ aPosTab[ nX , 2 ] , 1 ]						,;
														 	::aHoras[ aPosTab[ nX , 2 ] , 2 ]						,;
														 	0								 						,; 
														 	0														,;
												 			.F.														 ;
														 )
									nDif_02 := fCalHoras(	::aHoras[ aPosTab[ nPosTab , 2 ] , 1 ]					,;
														 	::aHoras[ aPosTab[ nPosTab , 2 ] , 2 ]					,;
															::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 1 ]		,;
														 	::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 2 ]		,;
														 	0												 		,; 
														 	0														,;
														 	.F.										 				 ;
														 )
									IF ( nDif_01 > nDif_02 )
										aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) ] , NIL )
										Exit
									EndIF
								EndIF
							Else
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) ] , NIL )
								Exit
							EndIF
						EndIF
					ElseIF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
						IF (;
								( ( nPosTab := aScan( aPosTab, { |x| x[3] == "SJ" } ) ) > 0 );
								.and.;
								( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) , 3 ] != "M" );
							)	
							IF ( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) ] , NIL )
								Exit
							EndIF
						ElseIF (;
									( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] == "M" );
									.or.;
							   		( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1       ) , 3 ] == "M" );
							   	)	
							IF ( ( nPosTab := aScan( aPosTab, { |x| x[3] == "EJ" } ) ) > 0 )
						   		IF ( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
									aFill( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) ] , NIL )
									Exit
							   	ElseIF ( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] -1 , 1 ) , 3 ] == "M" )
									aFill( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1 ) ] , NIL )
									Exit
							   	EndIF
							EndIF
						EndIF
					EndIF
		       	EndIF
	       	EndIF
		Next nX
			
		nLenHor	:= Len( ::aHoras )
		For nX := 1 To nLenHor
			IF ( ::aHoras[ nX , 1 ] != NIL )
				aAdd( aHorasNew, aClone( ::aHoras[ nX ] ) )
			EndIF
		Next nX
			
		::aHoras := aClone( aHorasNew )
			
		::SortaHoras()
	
	EndIF

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁSetaProcessad ЁAutorЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta os Elementos de ::aProcessad					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:SetaProcessad()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method SetaProcessad( lSet , cKey , nPos ) class PonVarApon

	DEFAULT lSet := .F.
	DEFAULT nPos := 0

	IF Empty( ::aProcessad )
		::aProcessad := Array( 16 , 02 )
	EndIF
	IF ( ( nPos > 0 ) .or. !Empty( cKey ) )
		IF (;
				( nPos > 0 );
				.or.;
				( ( nPos := ::PosaProcessad( cKey ) ) > 0 );
			)
			::aProcessad[ nPos , 02 ] := lSet
		Else
			aEval( ::aProcessad , { |x| aFill( x , .F. , 2 ) } )
		EndIF
	Else
		aEval( ::aProcessad , { |x| aFill( x , lSet , 2 ) } )
	EndIF	

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁPosaProcessad ЁAutorЁMarinaldo de Jesus    Ё Data Ё27/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetorna Posicao conforme chave   					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:PosaProcessad()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnPos                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method PosaProcessad( cKey ) class PonVarApon

	Local nPos := 0
   
	DEFAULT cKey := ""
	
	IF !Empty( ::aProcessad )
		nPos := aScan( ::aProcessad , { |x| x[1] == cKey } )
	EndIF	

return( nPos )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetSetTnoC	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta o Turno que sera Apontado   					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetSetTnoC()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё::cTnoCalend                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetSetTnoC( aTabCalend ) class PonVarApon
	DEFAULT aTabCalend := ::aTabCalend
return( ( ::cTnoCalend := aTabCalend[ ::nPosCalend , CALEND_POS_TURNO ] ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetSetRegra	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta a Regra que sera Apontada   					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetSetRegra()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё::cRegra	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetSetRegra( aTabCalend ) class PonVarApon
	DEFAULT aTabCalend := ::aTabCalend
return( ( ::cRegra := aTabCalend[ ::nPosCalend , CALEND_POS_REGRA ] ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetSetOrdem	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta a Ordem que sera Apontada   					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetSetOrdem()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё::cOrdem	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetSetOrdem( nOrdem , cOrdem  ) class PonVarApon
	DEFAULT nOrdem := ::nCountOrd
return( ( ::cOrdem := IF( Empty( cOrdem ) , StrZero( nOrdem , ::nTamP8Ordem ) , cOrdem ) ) )


/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetSetDataApo ЁAutorЁMauricio MR		   Ё Data Ё13/02/2008Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta a Datade Apontamento		   					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetSetDataApo()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё::dDataApo	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetSetDataApo( dDataApo ) class PonVarApon
return( ( ::dDataApo := IF( Empty( dDataApo ) , ::dDtPesq+(::nCountOrd-1), dDataApo ) ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetSetSPAFil  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta a Filial do SPA             					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetSetSPAFil()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё::cFilSPA	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetSetSPAFil() class PonVarApon
return( ( ::cFilSPA := fFilFunc("SPA") ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetSetSP6Fil  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta a Filial do SP6             					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetSetSP6Fil()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё::cFilSP6	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetSetSP6Fil() class PonVarApon 
return( ( ::cFilSP6 := fFilFunc("SP6") ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetSetSR6Fil  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta a Filial do Sr6             					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetSetSR6Fil()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё::cFilSR6	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetSetSR6Fil() class PonVarApon
return( ( ::cFilSR6 := fFilFunc("SR6")  ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetTabArred   ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega os Arrays com os Arredondamentos					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetTabArred()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL      	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetTabArred( cFilSRA, lFulltable ) class PonVarApon

	Local cFilSPD := xFilial( "SPD" , cFilSRA )
	DEFAULT lFulltable := .F.

	::aArreds	:= GetTabArred( @cFilSPD , ::cTnoCalend , "ADFHNS9", lFulltable )
	::aArred_A	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "A" )
	::aArred_D	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "D" )
	::aArred_F	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "F" )
	::aArred_H	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "H" )
	::aArred_N	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "N" )
	::aArred_S	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "S" )
	::aArred_9	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "9" )

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetTabExtra   ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega os Arrays com os Arredondamentos					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetTabExtra()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL      	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetTabExtra( cFilSRA , lStop , lMvAcmHExt , lNotGetAll ) class PonVarApon

	Local cFilSP4 		:= xFilial( "SP4" , cFilSRA )
	Local lRet			:= .F.
	
	DEFAULT lNotGetAll 	:= .T.
	
    If lNotGetAll
		lRet:=GetTabExtra( @::aTabExtra    , cFilSP4 , ::cTnoCalend , .F. , lStop , lMvAcmHExt , @::nErrorNumber ) 
    Else
       	lRet:=GetTabExtra( @::aAllTabExtra , cFilSP4 , NIL  , .T. , lStop , lMvAcmHExt , @::nErrorNumber )     
    Endif   
return( lRet )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetCfgNot	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega as Configuracoes de Horario Noturno		 			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetCfgNot()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL      	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetCfgNot() class PonVarApon

	::nIniHnot	:= ::aTabCalend[ ::nPosCalend , CALEND_POS_INI_H_NOT ]	//-- Inicio do Horario Noturno
	::nFimHnot	:= ::aTabCalend[ ::nPosCalend , CALEND_POS_FIM_H_NOT ]	//-- Final do Horario Noturno
	::nMinHnot	:= ::aTabCalend[ ::nPosCalend , CALEND_POS_MIN_H_NOT ]	//-- Minutos do Horario Noturno

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetAbonos	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega os Abonos para a Data               	 			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetAbonos()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL      	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetAbonos() class PonVarApon

	::aAbonos := {}

	fAbonos( ::dData , NIL , NIL , @::aAbonos , NIL , NIL , ::aAbonosPer )

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetAbonosPer  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega os Abonos para o Periodo							 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:GetAbonosPer()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL      	                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetAbonosPer( aAbonosPer , cFilSRA , cMatSRA ) class PonVarApon

	IF ( ::lAbonosPer := ( ValType( aAbonosPer ) == "A" ) )
		aAbonosPer	:= {}
		fAbonosPer( @aAbonosPer , ::dPerIni , ::dPerFim , cFilSRA , cMatSRA )
		::aAbonosPer := aClone( aAbonosPer )
	EndIF

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁSpaGetSetCpos ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta as Informacoes do SPA       					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:SpaGetSetCpos()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlGetSetOK  		                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method SpaGetSetCpos( aTabCalend ) class PonVarApon

	Local aSpaInfo
	Local lGetSetOK
	Local nX
	Local nW

	Static lPa_FaixaHE
	Static lPa_AjustEJ

	Begin Sequence

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Seta a Regra Atual										  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::GetSetRegra( aTabCalend )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Verifica se a regra de valida┤└o do funcion═rio ┌ v═lida.   Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF !( lGetSetOK := ::PosSPA() )
			Break
		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё So verifica os Campos das Regras Quando Houver Modificacao  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( ::FilRegCompare() )
			lGetSetOK := .T.
			Break
		Else
			::cFilRegLst := ( ::cFilSPA + ::cRegra )
		ENDIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica a Existencia do campo PA_FAIXAHE                    Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		DEFAULT lPa_FaixaHE		:= ( SPA->( FieldPos( "PA_FAIXAHE" ) ) > 0 )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica a Existencia do campo PA_AJUSTEJ                    Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		DEFAULT lPa_AjustEJ	:= ( SPA->( FieldPos( "PA_AJUSTEJ" ) ) > 0 )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega as Informacoes em Cache do SPA                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		aSpaInfo := ::PosSPA( ::oSpaFields:aSpaFields , .F. )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_HEMOVEL                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cHrMovel		:= aSpaInfo[ ::oSpaFields:nPaHrMovel ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_ANTMOVE                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nAntMove		:= aSpaInfo[ ::oSpaFields:nPaAntMove ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_POSMOVE                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nPosMove		:= aSpaInfo[ ::oSpaFields:nPaPosMove ]
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Verifica se o Horario Movel do Funcionario eh Livre         Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lMovelFree	:= ( ( ::cHrMovel == "S" ) .and. ( ( ::nAntMove + ::nPosMove ) == 0 ) )
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_INMOVEL                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cInMovel		:= aSpaInfo[ ::oSpaFields:nPaInMovel ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_MOVAINT                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nMovAint		:= aSpaInfo[ ::oSpaFields:nPaMovAInt ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_MOVPINT                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nMovPint		:= aSpaInfo[ ::oSpaFields:nPaMovPInt ]
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Verifica se o Intervalo Movel do Funcionario eh Livre       Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lIntMovFree	:= ( ( ::cInMovel == "S" ) .and. ( ( ::nMovAint + ::nMovPint ) == 0 ) )
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_AJUSTIN                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cAjustIn		:= aSpaInfo[ ::oSpaFields:nPaAjustIn ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_CHKTMOV                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cChkTMov		:= aSpaInfo[ ::oSpaFields:nPaChkTMov ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_CHKTMVI                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cChkTMvi		:= aSpaInfo[ ::oSpaFields:nPaChkTMvI ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_FALTAS	                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cFaltas		:= aSpaInfo[ ::oSpaFields:nPaFaltas ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_SAIANT						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cSaiAnt		:= aSpaInfo[ ::oSpaFields:nPaSaiAnt ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_PERSAIA					  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPerSaiA		:= aSpaInfo[ ::oSpaFields:nPaPerSaiA ]
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_TOLSAIA						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nTolSaia		:= IF( ::cPerSaiA == "D" , aSpaInfo[ ::oSpaFields:nPaTolSaiA ] , 0 )
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_TOLASAI					  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cTolaSai		:= aSpaInfo[ ::oSpaFields:nPaTolASai ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_ATRASOS					  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cAtrasos		:= aSpaInfo[ ::oSpaFields:nPaAtrasos ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_PERATRA					  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPerAtra		:= aSpaInfo[ ::oSpaFields:nPaPerAtra ]

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_TOLATRA						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nTolAtra		:= IF( ::cPerAtra == "D" ,  aSpaInfo[ ::oSpaFields:nPaTolAtra ] , 0 )
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_SAIEXPE					  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cSaiExpe		:= aSpaInfo[ ::oSpaFields:nPaSaiExpe ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo PA_SAIEXPE					  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cTolHex		:= aSpaInfo[ ::oSpaFields:nPaTolHex ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carregar Variaveis que subtituiram os MV_'S por Cpos do SPA Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPgHeDnt		:= aSpaInfo[ ::oSpaFields:nPaPgHeDnt ] //-- Tipos de Dias Nao Trabalhados para Apontamento de Horas Extras Autorizadas

		/*
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica Se paga Intervalo em Dias Nao Trabalhados           Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lPagIntN := ( aSpaInfo[ ::oSpaFields:nPaPagIntn ] == "S" )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica Se Paga Intervalo em Dias Nao Trabalhados			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPgIntNTrb	:= aSpaInfo[ ::oSpaFields:nPaPagIntn ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica Qual Intervalo e Pago                    			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPagInt		:= ::aTabCalend[ ::nPosCalend , CALEND_POS_PAGINT ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica Se Paga Intervalo Noturno em Dias Nao Trabalhados	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPgNotINTrb	:= aSpaInfo[ ::oSpaFields:nCpoIntNotNt ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica Qual Intervalo e Pago o Adicional Noturno			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPagNotInt	:= aSpaInfo[ ::oSpaFields:nPaPgAdnIn ]
		DEFAULT ::cPagNotInt := ""
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica o Periodo do Horario Movel               			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPerHmov		:= aSpaInfo[ ::oSpaFields:nPaPerHMov ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica se Desconta Intervalo Quando Falta       			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cIntFalt		:= aSpaInfo[ ::oSpaFields:nPaIntFalt ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica se Apura o DSR                           			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cDsr			:= aSpaInfo[ ::oSpaFields:nPaDsr ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica em Quais Marcacoes Estao Autorizados o Pagamento  deЁ
		ЁHoras Extras												  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPagHext 		:= aSpaInfo[ ::oSpaFields:nPaPagHext ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_ADNOT						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cAdNot		:= aSpaInfo[ ::oSpaFields:nPaAdNot ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_ADNOTEX						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cAdNotEx		:= aSpaInfo[ ::oSpaFields:nPaAdNotEx ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_HRNORM						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cHrNorm 		:= aSpaInfo[ ::oSpaFields:nPaHrNorm ]
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_PERANOT						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPerAnot 		:= aSpaInfo[ ::oSpaFields:nPaPeraNot ]
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_TOLNTHE						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nTolNtHe 		:= IF( ::cPerAnot == "D" , aSpaInfo[ ::oSpaFields:nPaTolNtHe ] , 0 )
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_TOLNOTU						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nTolNotu		:= IF( ::cPerAnot == "D" , aSpaInfo[ ::oSpaFields:nPaTolNotu ] , 0 )
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_PERHEXT						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cPerHext		:= aSpaInfo[ ::oSpaFields:nPaPerHext ]

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_TOLFALT						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nTolFalt		:= aSpaInfo[ ::oSpaFields:nPaTolFalt ]
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_TOLHEPE						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nTolHePe		:= IF( ::cPerHext == "D" , aSpaInfo[ ::oSpaFields:nPaTolHePe ] , 0 )
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_HRSPGS						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nHrsPgs		:=  If( aSpaInfo[ ::oSpaFields:nPaHrsPgs ] == NIL, 0, aSpaInfo[ ::oSpaFields:nPaHrsPgs ] )  	

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_ADHEDIA						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lAdHeDia		:=  If( aSpaInfo[ ::oSpaFields:nPaAdHeDia ] == NIL, .F., aSpaInfo[ ::oSpaFields:nPaAdHeDia ] == "1" )  	
    

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_PRIMDOM						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lPAPrimDom	:=  If( aSpaInfo[ ::oSpaFields:nPaPrimDom ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nPaPrimDom 		] == "1" )  	
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_DESCLAB						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lPADescLab	:=  If( aSpaInfo[ ::oSpaFields:nPaDescLab ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nPaDescLab 		] == "1" )  	
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_FESTLAB						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lPAFestLab	:=  If( aSpaInfo[ ::oSpaFields:nPaFestLab ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nPaFestLab 		] == "1" )  	

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_FAIXAHE						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( lPa_FaixaHE )
			::lFaixaHE	:= ( aSpaInfo[ ::oSpaFields:nPaFaixaHe ] == "S" )
		EndIF	
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Conteudo do Campo PA_AJUSTEJ						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( lPa_AjustEJ )
			IF ( ::lPaAjustEJ := ( aSpaInfo[ ::oSpaFields:nPaAjustEj ] == "S" ) )
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁSe Tiver mais de 1 intervalo para o Dia Seta lPaAjustEJ  comoЁ
				ЁFalse														  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				nX := 0
				For nW := ::nPosCalend To Len( ::aTabCalend )
					IF ( ::dDataApo == ::aTabCalend[ nW , CALEND_POS_DATA_APO ] )
						IF ( "S" $ ::aTabCalend[ nW , CALEND_POS_TIPO_MARC ] )
							IF ( ::aTabCalend[ nW , CALEND_POS_HRS_INTER ] > 0 )
								++nX
							EndIF
						EndIF
					Else
						Exit
					EndIF
				Next nW
				::lPaAjustEJ := ( nX == 1.00 )
			EndIF
		EndIF

	End Sequence
		
return( lGetSetOK )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁSr6GetSetCpos ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeta as Informacoes do SR6       					 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:Sr6GetSetCpos()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlGetSetOK  		                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method Sr6GetSetCpos() class PonVarApon

	Local aSr6Info
	Local lGetSetOK

	Begin Sequence

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Seta o Turno Atual 										  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::GetSetTnoC( aTabCalend )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Verifica se o Turno de Trabalho do funcion═rio ┌ v═lido.	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF !( lGetSetOK := ::PosSR6() )
			Break
		EndIF
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё So verifica os Campos dos Turnos Quando Houver Modificacao  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( ::FilTnoCompare() )
			Break
		Else
			::cFilTnoLst := ( ::cFilSR6 + ::cTnoCalend )
		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega as Informacoes em Cache do SR6                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		aSr6Info := ::PosSr6( ::oSr6Fields:aSr6Fields , .F. )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_INTERNT                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::cInterNt		:= aSr6Info[ ::oSr6Fields:nR6InterNt ]	//-- Tipo de Dia para Geracao Inter-jornada

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_HRINTER                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::nHrInterJd	:= aSr6Info[ ::oSr6Fields:nR6HrInter ]	//-- Numero Minimo de Horas Inter-Jornada

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_APTPMAR                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lApTpMar		:= ( aSr6Info[ ::oSr6Fields:nR6AptpMar ] == "S" )	//-- Gravar Tipo de Marcacao nos Apontamentos

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_HNOTATR                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
 		::lHnotAtr		:= ( aSr6Info[ ::oSr6Fields:nR6HnotAtr ] == "S" )	//-- Considerar a Hora Noturna Para na Apuracao das Saidas Antecipadas/Expediente


 		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_HNOTTAB                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lHnotTab		:= ( aSr6Info[ ::oSr6Fields:nR6HnotTab ] == "S" )	//-- Considerar a Hora Noturna Para Horas Trabalhadas

 		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_HNOTTBI                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lHnotTbI		:= ( aSr6Info[ ::oSr6Fields:nR6HnotTbI ] == "S" )	//-- Considerar a Hora Noturna Para Horas de Intervalo

 		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_HNOTFAL                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lHnotFal		:= ( aSr6Info[ ::oSr6Fields:nR6HnotFal ] == "S" )	//-- Considerar a Hora Noturna Para na Apuracao das Faltas

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_HNOTSAI                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lHnotSai		:= ( aSr6Info[ ::oSr6Fields:nR6HnotSai ] == "S" )	//-- Considerar a Hora Noturna Para na Apuracao das Saidas Antecipadas/Expediente

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_EXTNOT                       Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lExtNot		:= ( aSr6Info[ ::oSr6Fields:nR6ExtNot ] == "S" )	//-- Aponta Hora Noturno considerando as Horas Noturnas Reduzidas

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_ACRENOT                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lAcreNot		:= ( aSr6Info[ ::oSr6Fields:nR6AcreNot ] == "S" )	//-- Se vai considerar Apenas o Acrescimo Noturno

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega o Conteudo do Campo R6_ACRENOT                      Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lIdAcreNot		:= ( aSr6Info[ ::oSr6Fields:nR6IdAcreNot ] == "S" )	//-- Se vai Destacar em Identificador Especifico o Acrescimo Noturno
	End Sequence

return( lGetSetOK )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁPosSr6		  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁPosiciona no SR6 e Retorna Conteudo Conforme Chave/Cpo 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:PosSr6( uCpo )											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method PosSr6( uCpo , lMsGoto , nOrder ) class PonVarApon
	DEFAULT nOrder := 01
return( PosSr6( ::cTnoCalend , ::cFilSR6 , uCpo , nOrder , lMsGoto ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁPosSpa		  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁPosiciona no SPA e Retorna Conteudo Conforme Chave/Cpo 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:PosSpa( uCpo [ , lMsGoto ][ , nOrder ][ , lSetRegra ] ) Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method PosSpa( uCpo , lMsGoto , nOrder , lSetRegra ) class PonVarApon
	
	DEFAULT nOrder		:= 01
	DEFAULT lSetRegra	:= .F.
	
	IF ( lSetRegra )
		::GetSetRegra()
	EndIF

return( PosSpa( ::cRegra , ::cFilSPA , uCpo , nOrder , lMsGoto ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁFilRegLstInit ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁInicializa ::cLastRegra										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:FilRegLstInit()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё"__cLastRegra__"                                       	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method FilRegLstInit() class PonVarApon
return( ( ::cFilRegLst := "__cFilRegLst__" ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁFilTnoLstInit ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁInicializa ::cLastTurno										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:FilTnoLstInit()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё"__cLastTurno__"                                       	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method FilTnoLstInit() class PonVarApon
return( ( ::cFilTnoLst := "__cFilTnoLst__" ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁFilRegCompare ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se Houve Modificacao de Regra						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:FilRegCompare()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё.T. se Regra for Igual, .F., caso contrario            	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method FilRegCompare() class PonVarApon
return(  ::cFilRegLst == ( ::cFilSPA + ::cRegra ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁFilTnoCompare ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se Houve Modificacao de Turno						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:FilTnoCompare()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё.T. se Turno for Igual, .F., caso contrario            	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method FilTnoCompare() class PonVarApon
return( ( ::cFilTnoLst ==  ( ::cFilSR6 + ::cTnoCalend ) ) )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁInitChkArr	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁInicializa ::aChkTolArr										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:InitChkArr()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method InitChkArr() class PonVarApon

	::aChkTolArr	:= {}
	::nChkTolArr	:= 0
	::RstlChkTolArr()

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁAddDtChkArr	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega informacoes da Data em ::aChkTolArr					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:AddDtChkArr()  										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method AddDtChkArr() class PonVarApon

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCarrega em ::aChkTolArr as Informacoes Referentes a Data	  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aAdd( ::aChkTolArr , { ::dData , Array( ::nJornadasAp ) , Array( ELEMENTOS_DO_ATOLERANCIA_DIARIA ) , Array( ELEMENTOS_DO_ARRED_DIARIO , 2 ) } )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem o Numero de Elementos de ::aChkTolArr		  	  	  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	::nChkTolArr := Len( ::aChkTolArr )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa as Jornadas como Nao Apontadas          		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aFill( ::aChkTolArr[ ::nChkTolArr , 02 ] , .F. )

return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁFlgChkArr	  ЁAutorЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁFlega ::aChkTolArr										 	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:FlgChkArr()											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method FlgChkArr( lFlag ) class PonVarApon
return( ::aChkTolArr[ ::nChkTolArr , 02 , ::nInicJornada ] := lFlag )

/*/
зддддддддддбдддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁPutTolArrChkArrЁAutorЁMarinaldo de Jesus   Ё Data Ё28/06/2003Ё
цддддддддддедддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega Tolerancias e Arredondamentos em ::aChkTolArr	 	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:PutTolArrChkArr()										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method PutTolArrChkArr() class PonVarApon

	IF ( ::nInicJornada == 1 )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega as Tolerancias Diarias Conforme a Regra    		  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_ATRASO		] := ::nTolAtra
		::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_SAIDA		] := ::nTolSaia
		::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_ADN_NOT		] := ::nTolNotu
		::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_ADN_NOT_HE	] := ::nTolNtHe
		::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_FALTAS		] := ::nTolFalt
		::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_HE_PERIODO	] := ::nTolHePe
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega os Arredondamentos Diarios Conforme a Data e Turno	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_ATRASO	, 01 ] := "A"
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_ATRASO	, 02 ] := aClone( ::aArred_A )
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_DSR		, 01 ] := "D"
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_DSR		, 02 ] := aClone( ::aArred_D )
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_FALTAS	, 01 ] := "F"
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_FALTAS	, 02 ] := aClone( ::aArred_F )
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_HE		, 01 ] := "H"
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_HE		, 02 ] := aClone( ::aArred_H )
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_NOTURNO	, 01 ] := "N"
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_NOTURNO	, 02 ] := aClone( ::aArred_N )
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_SAIDA  	, 01 ] := "S"
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_SAIDA  	, 02 ] := aClone( ::aArred_S )
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_9_HORA 	, 01 ] := "9"
		::aChkTolArr[ ::nChkTolArr , 04 , ARRED_9_HORA 	, 02 ] := aClone( ::aArred_9 )

	EndIF	
	
return( NIL )

/*/
зддддддддддбдддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkRegra       ЁAutorЁMarinaldo de Jesus   Ё Data Ё28/06/2003Ё
цддддддддддедддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se a Regra eh Valida e carrega Informacoes  	 	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ChkRegra()										 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlChkRegraOk                                            	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkRegra( cFilSRA , cMatSRA ) class PonVarApon

	Local lChkRegraOk := .T.

	
		Begin Sequence
			
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁVerifica se Existe a Regra e Carrega Informacoes dos Campos  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF !( lChkRegraOk := ( ::lApontaOk := ::SpaGetSetCpos() ) )
				Break
			EndIF
			
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁSe foi Criado o campo que ira identificar o uso da Faixa   deЁ
			ЁHe autorizadas												  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF ( lPa_FaixaHE )
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁObtem as Faixas de HE Autorizadas para  Dia				  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				::aHeAutoDia	:= {}
			    /*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁSe a Regra determina a identificacao de HE autorizadas carrega as faixas HEЁ
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				IF ( ::lFaixaHE )
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁApenas Quando estiver vazio e se nao tiver passado pela   funЁ
					Ёcao														  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	  				IF ( Empty( ::aFaixasHE ) .and. ( ::lfTabHeAut ) )
						/*/	
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁArray com Horarios de HE Autorizadas do Funcionario          Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
  						::lfTabHeAut := ::fTabHeAut( cFilSRA , cMatSRA , ::dPerIni , ::dPerFim )
	  				EndIF
					/*/	
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁMonta Tabela de Faixas de HE autorizadas para o dia corrente Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			    	IF ( ::lfTabHeAut )
			    		::fTabHeAut( cFilSRA , cMatSRA , ::dData , ::dData )
			    	EndIF
			    EndIF
			EndIF
		
		End Sequence

	
return( lChkRegraOk )

/*/
зддддддддддбдддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁInitProcJorn   ЁAutorЁMarinaldo de Jesus   Ё Data Ё28/06/2003Ё
цддддддддддедддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁInicializa nProxJornada										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:InitProcJorn()										 	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method InitProcJorn() class PonVarApon
return( ( ::nProxJornada := IF( ( ::nInicJornada == 1 ) , ::nInicJornada , ( ::nTotMarcTab + 1 ) ) ) )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkTolArr   Ё Autor ЁMarinaldo de Jesus    Ё Data Ё28/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁChecar Tolerancias e Arredondamentos Diarios                 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkTolArr( aEvesIds , lMvArrInte ) class PonVarApon

	Local dData		:= Ctod("//")
	Local nStart	:= 0
	
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Ordena aResult para fTolDiaria e para fArrDiario()		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	::SortaResult()
	
	For nStart := 1 To ::nChkTolArr
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Apenas se Passou Pelo Apontamento    						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( aScan( ::aChkTolArr[ nStart , 02 ] , { |x| x } ) > 0 )
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Passou Pelo Apontamento e Deve Grava-lo ou Regrava-lo		  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			::lChkTolArr := .T.
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Obtem a Data                          					  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			dData := ::aChkTolArr[ nStart , 01 ]
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Verifica Todas as Tolerancias Diarias						  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			::fTolDiaria( dData , aEvesIds , ::aChkTolArr[ nStart , 03 ] )
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Verifica Todos os Arredondamentos Diarios					  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			::fArrDiario( dData , ::aChkTolArr[ nStart , 04 ] , lMvArrInte )
		EndIF
	Next nStart
	
Return( ::lChkTolArr )

/*/
зддддддддддбдддддддддддддбддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁRstlChkTolArrЁAutor ЁMarinaldo de Jesus    Ё Data Ё18/09/2003Ё
цддддддддддедддддддддддддаддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁReinicializar o membro ::lChkTolArr                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method RstlChkTolArr() class PonVarApon
       
	::lChkTolArr := .F.

Return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁfTolDiaria  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё04/07/2001Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica Todas as Tolerancias Diarias                        Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      Ё::ChkTolArr()                                                Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method fTolDiaria( dData , aEvesIds , aTolDiaria ) class PonVarApon

	Local cCodAtras	:= ""
	Local cCodSaida := ""
	Local cCodNotur	:= ""
	Local cCodNotHe	:= ""
	Local cCodFalta := ""
	Local cCodExtra := ""
	Local nTolAtras	:= 0
	Local nTolSaidA := 0
	Local nTolNotur	:= 0
	Local nTolNotHe	:= 0
	Local nTolFalta := 0
	Local nTolExtra := 0
	Local nStart	:= 0
	Local nX		:= 0
	
	IF ( ( nStart := aScan( ::aResult , { |x| x[1] == dData } ) ) > 0 )
	
		//Carrega os Eventos de Acordo com os Identificadores do Ponto
		aEval( aEvesIds, { |x|	IF( x[1] $ ::cIdsAtras , cCodAtras+= ( x[2] + "*" ),;
									IF( x[1] $ ::cIdsSaida , cCodSaida+= ( x[2] + "*" ),;
										IF( x[1] $ ::cIdsNotur , cCodNotur+= ( x[2] + "*" ),;
											IF( x[1] $ ::cIdsNotHe , cCodNotHe+= ( x[2] + "*" ),;
												IF( x[1] $ ::cIdsFalta , cCodFalta+= ( x[2] + "*" ),;
													IF( x[1] $ ::cIdsExtra , cCodExtra+= ( x[2] + "*" ),;
														NIL;
													   );
												   );
										   	   );
										   );
									   );
								   );
						 };
			 )
		
		//Carrega os Eventos de Horas Extras
		aEval( ::aAllTabExtra , { |x| aEval( x , { |x| cCodExtra+= ( IF(x[4]$cCodExtra,"",x[4] + "*") + IF(x[5]$cCodExtra,"",x[5] + "*") ) } ) } )
	
		//Carrega as Tolerancias
		nTolAtras	:= aTolDiaria[ TOLERANCIA_DE_ATRASO		]
		nTolSaidA	:= aTolDiaria[ TOLERANCIA_DE_SAIDA		]
		nTolNotur	:= aTolDiaria[ TOLERANCIA_DE_ADN_NOT	]
		nTolNotHe	:= aTolDiaria[ TOLERANCIA_DE_ADN_NOT_HE	]
		nTolFalta	:= aTolDiaria[ TOLERANCIA_DE_FALTAS		]
		nTolExtra	:= aTolDiaria[ TOLERANCIA_DE_HE_PERIODO	]
		
		//Verifica Tolerancia no ::aResult
		For nX := nStart To ::nLenRes
			IF !( dData == ::aResult[ nX , 01 ] )
				Exit //Esta Fora da Data
			EndIF
			IF ( ::aResult[ nX , 3 ] == 0 )
				Loop //Ja Zerou as Horas
			EndIF
			IF ( ( ::aResult[ nX , 2 ] $ cCodAtras ) .and. ( nTolAtras > 0 ) )
				::fAvalTol( dData , cCodAtras , nTolAtras )
			ElseIF ( ( ::aResult[ nX , 2 ] $ cCodSaidA ) .and. ( nTolSaidA > 0 ) )
				::fAvalTol( dData , cCodSaidA , nTolSaidA )
			ElseIF ( ( ::aResult[ nX , 2 ] $ cCodNotur ) .and. ( nTolNotur > 0 ) )
				::fAvalTol( dData , cCodNotur , nTolNotur )
			ElseIF ( ( ::aResult[ nX , 2 ] $ cCodNotHe ) .and. ( nTolNotHe > 0 ) )
				::fAvalTol( dData , cCodNotHe , nTolNotHe )
			ElseIF ( ( ::aResult[ nX , 2 ] $ cCodFalta ) .and. ( nTolFalta > 0 ) )
				::fAvalTol( dData , cCodFalta , nTolFalta )
			ElseIF ( ( ::aResult[ nX , 2 ] $ cCodExtra ) .and. ( nTolExtra > 0 ) )
				::fAvalTol( dData , cCodExtra , nTolExtra )
			EndIF
		Next nX
	EndIF
	
Return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁfAvalTol	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё04/07/2001Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁAvalia as Tolerancias conforme a Data                        Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      Ё::fToldiaria()                                               Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method fAvalTol( dData , cEventos , nTolerancia ) class PonVarApon

	Local nTotHoras		:= 0
	
	IF ( nTolerancia > 0 )
	
		aEval( ::aResult , { |x| IF(  ( x[1] == dData ) .and. ( x[2] $ cEventos )	,;
												nTotHoras := SomaHoras( nTotHoras , x[3] )	,;
							 	   				NIL;
		 				 	      			);
						  			};
			  )
		
		IF ( nTotHoras <= nTolerancia )	//Zera Quando for Menor ou Igual a Tolerancia
			aEval( ::aResult , { |x,y| IF(  ( x[1] == dData ) .and. ( x[2] $ cEventos ) ,;
													::aResult[y,3] := 0,;
										 			NIL;
												);
							 			 };
				  )
		EndIF
	
	EndIF
		
return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfArrDiario  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё30/09/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica Todos os Arredondamentos Diarios por Evento		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ё::ChkTolArr                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method fArrDiario( dData , aArredDiario , lMvArrInte ) class PonVarApon

	Local aArr			:= {}
	Local aDiv			:= {}
	Local aJaproc		:= {}
	Local bJaproc		:= { |x| x[1] == dData .and. x[2] == cEvento }
	Local bPlusRes		:= { || .F. } 
	Local cEvento		:= ""
	Local cArr			:= ""
	Local nX			:= 0
	Local nY			:= 0
	Local nHrs			:= 0
	Local nArr			:= 0
	Local nDif			:= 0
	Local nPlus			:= 0
	Local nCount		:= 0
	Local nStart		:= 0
	Local nPosArr		:= 0
	
	bPlusRes := { |x| IF( x[1] == dData .and. x[2] == cEvento,;
						( nHrs := SomaHoras( nHrs , x[3] ) , ++nPlus ),;
						NIL;
					 );
			 	 }
	
	IF ( ( nStart := aScan( ::aResult , { |x| x[1] == dData } ) ) > 0 )
		For nX := nStart To ::nLenRes
			IF !( dData == ::aResult[ nX , 01 ] )
				Exit
			EndIF
			cEvento := ::aResult[ nX , 02 ]
			cArr	:= ::aResult[ nX , 06 ]
			IF ( aScan( aJaProc , bJaProc ) > 0 )
				Loop
			EndIF
			IF ( ( nPosArr := aScan( aArredDiario , { |x| x[1] == cArr } ) ) > 0 )
				aArr := aArredDiario[ nPosArr , 02 ]
				aAdd( aJaProc , { dData , cEvento } )
				nHrs	:= 0
				nPlus	:= 0
				nStart	:= Max( nStart , nX )
				aEval( ::aResult , bPlusRes , nStart )
				nArr	:= fArredHoras(	nHrs				,;	//01 -> Horas a Serem Arredondadas
										aArr				,;	//02 -> Array com os Arredondamentos
										NIL 				,;	//03 ->	Tipo de Horas a Arredondar:"A"trasos ; "D"SR ; "F"altas ; "H"oras Extras ; "N"Horas Noturnas ; "S"aidas Antecipadas
										NIL					,;	//04 -> Filial Para a Pesquisa no SP5
										NIL					,;	//05 -> Turno  Para a Pesquisa no SP5
										lMvArrInte	 		 ;	//06 -> Se Arredonda as Horas Integralmente
						 		  )
				IF !( ( nDif := SubHoras( nArr , nHrs ) ) == 0 )
					aDiv	:= DistributeRounding( nPlus , nDif )
					nCount	:= 0
					For nY := nX To ::nLenRes
				    	IF !( dData == ::aResult[ nY , 01 ] .and. cEvento == ::aResult[ nY , 02 ] )
							Exit
						EndIF
		    			::aResult[ nY , 03 ] := Max( SomaHoras( ::aResult[ nY , 03 ] , aDiv[ ++nCount ] ) , 0 )
					Next nY
				EndIF
			EndIF
		Next nX
	EndIF
	
Return( NIL )

/*/
зддддддддддбддддддддддддддддддбдддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁDistributeRoundingЁAutorЁMarinaldo de JesusЁ Data Ё01/10/2002Ё
цддддддддддеддддддддддддддддддадддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁDistribui o Arredondamento em n Partes               	 	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁDistributeRounding( nParts , nValParts )					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁnParts     			-> Numero de Partes em que o ArredondamenЁ
Ё          Ё             		   to devera ser Distribuido			 Ё
Ё          ЁnValParts  			-> Valor do Arredondamento a Ser DistibuiЁ
Ё          Ё                  	   do									 Ё
Ё          ЁlHoursDistribute	-> Se referese a Horas ( DEFAULT .T. )   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁaDistribution -> Array com nParts elementos contendo os  valoЁ
Ё          Ё                 res que foram Distribuidos					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁfArrDiario() em ::ChkTolArr									 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function DistributeRounding( nParts , nValParts , lHoursDistribute )
Return( RoundingDistribute( @nParts , @nValParts , @lHoursDistribute ) )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod	   ЁChkInMvFree ЁAutor  ЁMarinaldo de Jesus    Ё Data Ё11/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁSubstitur Horario de Intervalo pela Saida + total de Interv. Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoBoj:ChkInMvFree()										     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ё::PonVarApon                                                 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkInMvFree( lReapEj ) class PonVarApon

	Local lChkMovInt	:= .F.

	Local aMarcId
	Local cTpMarcEJ
	Local cTpMarcSI
	Local cTpMarcEI
	Local cTpMarcSJ
	Local cEJDataHora
	Local cSIDataHora
	Local cEIDataHora
	Local cSJDataHora
	Local cMcDataHora
	Local nPosEJ
	Local nPosSI
	Local nPosEI
	Local nPosSJ
	Local nPosMarc
	Local nPosProxMarc
	Local nPosProcEJ
	Local nDifHrs
	
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁApenas se Tiver Horario de Intervalo									Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF ( ( ::lIntMovFree ) .and. (  ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] > 0 ) )
	
		DEFAULT lReapEj		:= .F.
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁReinicializa as Variaveis												Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		cTpMarcEJ	:= IF( "S" $ ::cTipoMarc , ( SubStr( ::cTipoMarc , 1 , 1 ) + "E" ) , ::cTipoMarc )
		cTpMarcSI	:= IF( "S" $ ::cTipoMarc , ::cTipoMarc , ( SubStr( ::cTipoMarc , 1 , 1 ) + "S" ) )
		cTpMarcEI	:= ( AllTrim( Str( Val( SubStr( cTpMarcSI , 1 , 1 ) ) + 1 ) ) + "E" )
		cTpMarcSJ	:= ( SubStr( cTpMarcEI , 1 , 1 ) + "S" )
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁSe Achou Saida de Intervalo e Entrada de Intervalo	e nao Tiver  PassadoЁ
		Ёpela Verificaca de Horario Movel Livre no Intervalo                    Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF(;
				( ( nPosEJ := aScan( ::aHoras , { |x| x[ 03 ] == cTpMarcEJ } ) ) > 0 );
				.and.;
				( ( nPosSI := aScan( ::aHoras , { |x| x[ 03 ] == cTpMarcSI } ) ) > 0 );
				.and.;
				( ( nPosEI := aScan( ::aHoras , { |x| x[ 03 ] == cTpMarcEI } ) ) > 0 );
				.and.;
				( ( nPosSJ := aScan( ::aHoras , { |x| x[ 03 ] == cTpMarcSJ } ) ) > 0 );
				.and.;
				( !( ::aHoras[ nPosSI , 12 ] ) .and. !( ::aHoras[ nPosSI , 13 ] ) );
		   )	
	
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁVerifica se Passou pela Entrada de Jornada pois a proxima pesquisa seraЁ
			Ёposterior a esta														Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF ( ( nPosMarc := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. x[ 08 ] <> cTpMarcEJ } ) ) <= 1.00 )
				++nPosMarc
			EndIF
		
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁProcura Primeira Marcacao que nao Seja correspondente a Entrada de  JorЁ
			Ёnada e se Tem mais de Uma Marcacao										Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF (;
					( ( nPosMarc	 := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. x[ 08 ] <> cTpMarcEJ } , nPosMarc ) ) > 0 );
					.and.;
			   		( ( nPosProxMarc := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. x[ 08 ] <> cTpMarcEJ } , nPosMarc + 1 ) ) > 0 );
				)			   			
				
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁTransforma as Marcacoes da Tabela em String de Data/Hora               Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				cEJDataHora	:= DataHora2Str( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] )
				cSIDataHora	:= DataHora2Str( ::aHoras[ nPosSI , 01 ] , ::aHoras[ nPosSI , 02 ] )
				cEIDataHora	:= DataHora2Str( ::aHoras[ nPosEI , 01 ] , ::aHoras[ nPosEI , 02 ] )
				cSJDataHora	:= DataHora2Str( ::aHoras[ nPosSJ , 01 ] , ::aHoras[ nPosSJ , 02 ] )
	
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁTransforma a Marcacao Que sera Convertida em Saida de Intervalo em StriЁ
				Ёg de Data/Hora															Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				cMcDataHora := DataHora2Str( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] )
	
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁApenas se a Marcacao de Saida de Intervalo for Maior que a Marcacao  deЁ
				ЁEntrada de Jornada e nao forcar o Reapontamento de Entrada de   JornadaЁ
				Ёem funcao do Intervalo Movel Livre (Sincronismo dos Extremos pelo InterЁ
				Ёvalo)																	Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				IF ( ( cMcDataHora > cEJDataHora ) .and. !( ::lPaAjustEJ ) )
	
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁCarrega Horario Esperado para a Entrada do Intervalo em Funcao da SaidaЁ
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
					aMarcId		:= RetFimTab( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] , ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] )
				  	cEIDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
				    
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁApenas se a Entrada de Intervalo for Menor que a Proxima Saida         Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				  	IF ( cEIDataHora < cSJDataHora )
				  
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁSubstituir no Array ::aHoras o Horario de Saida do Intervalo			Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosSI , 01 ] := ::aHoras[ nPosMarc , 01 ]
						::aHoras[ nPosSI , 02 ] := ::aHoras[ nPosMarc , 02 ]
						::aHoras[ nPosSI , 12 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
						::aHoras[ nPosSI , 17 ] := cMcDataHora
					
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁSubstituir no Array ::aHoras o Horario de Entraa do Intervalo			Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosEI , 01 ] := aMarcId[ 01 ]
						::aHoras[ nPosEI , 02 ] := aMarcId[ 02 ]
						::aHoras[ nPosEI , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
						::aHoras[ nPosEI , 17 ] := cEIDataHora
					
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁOrdena as Marcacoes do Dia com as Marcacoes da Tabela					Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::SortaHoras()
						lChkMovInt := .T.

					Else
					
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁNao altera os Horarios de Intervalo e Flega que ja Passou Pela verificaЁ
						Ёcao de Intervalo Movel Livre											Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosSI , 12 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Saida de Intervalo
						::aHoras[ nPosEI , 13 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Entrada de Intervalo

					EndIF
	
				ElseIF ( ( nPosProcEJ := ::PosaProcessad( ( "lEntraEJ"+cTpMarcEJ ) ) ) > 0 )
				
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁSe nao Forcar o Reapontamento desde a Entrada de Jornada               Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
					IF (;
							!( ::lPaAjustEJ );
							.or.;
							(;
								( nPosProxMarc == 0 );
								.or.;
								( nPosProxMarc == nPosMarc );
							 );
						 )
				
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁNao altera os Horarios de Intervalo e Flega que ja Passou Pela verificaЁ
						Ёcao de Intervalo Movel Livre											Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosSI , 12 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Saida de Intervalo
						::aHoras[ nPosEI , 13 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Entrada de Intervalo
			    	
			    	Else
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁApura a Diferenca de Horas Entre a Entrada de Jornada e a Saida de   InЁ
						Ёtervalo																Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						nDifHrs := fCalHoras(	::aHoras[ nPosEJ , 01 ]	,;	//01 -> Data 1
												::aHoras[ nPosEJ , 02 ]	,;	//02 -> Hora 1
												::aHoras[ nPosSI , 01 ]	,;	//03 -> Data 2
												::aHoras[ nPosSI , 02 ]	,;	//04 -> Hora 2
												NIL						,;	//05 -> <@>Horas Normais Apontadas
												NIL						,;	//06 -> <@>Horas Noturnas Apontadas
												::lHnotAtr				,;	//07 -> Apontar Horas Noturnas
												::dData				 	,;	//08 -> Data Inicial Para a Hora Noturna
												NIL						,;	//09 -> <@>Horas de Acrescimo Noturno
												::nIniHnot				,;	//10 -> Inicio do Horario Noturno
												::nFimHnot				,;	//11 -> Final do Horario Noturno
												::nMinHnot				,;	//12 -> Minutos do Horario Noturno
												::lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
												NIL					 	 ;	//14 -> Periodo da Hora Noturna
		  									)
						
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁCarrega Horario Esperado para a Entrada de Jornada em Funcao da Saida  Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						aMarcId		:= RetIniTab( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] , nDifHrs )
						cEJDataHora	:= DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁModifica Horario de Entrada de Jornada									Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosEJ , 01 ] := aMarcId[ 01 ]
						::aHoras[ nPosEJ , 02 ] := aMarcId[ 02 ]
						::aHoras[ nPosEJ , 17 ] := cEJDataHora
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁSubstituir no Array ::aHoras o Horario de Saida do Intervalo			Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosSI , 01 ] := ::aHoras[ nPosMarc , 01 ]
						::aHoras[ nPosSI , 02 ] := ::aHoras[ nPosMarc , 02 ]
						::aHoras[ nPosSI , 12 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
						::aHoras[ nPosSI , 17 ] := cMcDataHora
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁApura a Diferenca de Horas Entre a Entrada de Intervalo e Saida de  JorЁ
						Ёnada																	Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						nDifHrs := fCalHoras(	::aHoras[ nPosEI , 01 ]	,;	//01 -> Data 1
												::aHoras[ nPosEI , 02 ]	,;	//02 -> Hora 1
												::aHoras[ nPosSJ , 01 ]	,;	//03 -> Data 2
												::aHoras[ nPosSJ , 02 ]	,;	//04 -> Hora 2
												NIL						,;	//05 -> <@>Horas Normais Apontadas
												NIL						,;	//06 -> <@>Horas Noturnas Apontadas
												::lHnotAtr				,;	//07 -> Apontar Horas Noturnas
												::dData				 	,;	//08 -> Data Inicial Para a Hora Noturna
												NIL						,;	//09 -> <@>Horas de Acrescimo Noturno
												::nIniHnot				,;	//10 -> Inicio do Horario Noturno
												::nFimHnot				,;	//11 -> Final do Horario Noturno
												::nMinHnot				,;	//12 -> Minutos do Horario Noturno
												::lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
												NIL					 	 ;	//14 -> Periodo da Hora Noturna
		  									)
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁCarrega Horario Esperado para a Entrada do Intervalo em Funcao da SaidaЁ
						Ёde Intervalo															Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						aMarcId		:= RetFimTab( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] , ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] )
				  		cEIDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁSubstituir no Array ::aHoras o Horario de Entrada do Intervalo			Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosEI , 01 ] := aMarcId[ 01 ]
						::aHoras[ nPosEI , 02 ] := aMarcId[ 02 ]
						::aHoras[ nPosEI , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
						::aHoras[ nPosEI , 17 ] := cEIDataHora
		
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁCarrega Horario Esperado para a Saida de Jornada em Funcao da   EntradaЁ
						Ёde Intervalo															Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						aMarcId		:= RetFimTab( ::aHoras[ nPosEI , 01 ] , ::aHoras[ nPosEI , 02 ] , nDifHrs )
				  		cSJDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁSubstituir no Array ::aHoras o Horario de Entraa do Intervalo			Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosSJ , 01 ] := aMarcId[ 01 ]
						::aHoras[ nPosSJ , 02 ] := aMarcId[ 02 ]
						::aHoras[ nPosSJ , 17 ] := cSJDataHora
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁDesflega a Entrada de Jornada Para forcar o Reapontamento				Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::SetaProcessad( .T. , NIL , nPosProcEJ )
	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁDesflega a Verificacao de Horario Movel nos Extremos     				Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::aHoras[ nPosEJ , 12 ] := .F.
						::aHoras[ nPosSJ , 12 ] := .F.
			    	
						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁOrdena as Marcacoes do Dia com as Marcacoes da Tabela					Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
						::SortaHoras()
						lChkMovInt	:= .T.
			    		lReapEj		:= .T.
			    	
			    	EndIF
				
				EndIF
	
			EndIF
	
		EndIF
	
	EndIF
		
	IF ( lChkMovInt )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁRemonta Horas Trabalhadas no ::aApo em funcao das Alteracoes	  no	Ё
		Ё::aHoras																Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::RmkWorkHrs()
	EndIF
	
Return( lChkMovInt )

/*/
зддддддддддбдддддддддддбдддддддбддддддддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁChkHrMovel ЁAutor  ЁMarinaldo de Jesus     	  	Ё Data Ё23/06/2003Ё
цддддддддддедддддддддддадддддддаддддддддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁTratamento para Horario Movel 									  Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>										  Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>										  Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon												  Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ChkHrMovel( cTipo , nPosM , cSiglaMarc , lRstHrTabInt ) class PonVarApon

	Local lChkMovel		:= .F.
	Local lChkTolMov	:= .F.

	Local aMarcEJ
	Local aMarcSJ
	Local aMarcAntM
	Local aMarcPosM
	Local aMarcSaiI
	Local aMarcEntI
	Local cMarcFun
	Local cMarcPosM
	Local cMarcAntM
	Local cEntAnt
	Local cEntInt
	Local cSaiProx
	Local lHrMovTol
	Local lInMovTol
	Local lAjustInt
	Local lChkAbono
	Local lModEjSj
	Local lForceChkMvInt
	Local nPosEJ
	Local nPosSJ
	Local nPosSI
	Local nPosEI
	Local nHrEjSi
	Local nHrSiEi   

	DEFAULT cSiglaMarc		:= ::cTipoMarc
	DEFAULT lRstHrTabInt	:= .F.
	
	IF (;
			(;
				( lHrMovTol := ( ( "E" $ cSiglaMarc ) .and. ( ::cHrMovel == "S" ) .and. ( ( ::nAntMove + ::nPosMove ) > 0 ) ) );
				.or.;
				( lInMovTol := ( ( "S" $ cSiglaMarc ) .and. ( ::cInMovel == "S" ) .and. ( ( ::nMovAint + ::nMovPint ) > 0 ) ) );
			);
			.and.;
			( nPosM > 0 );
			.and.;
			( ::aHoras[ nPosM , 3 ] == "M" ) ;
		)
        	
			lAjustInt := ( ::cAjustIn == "S" )
			lModEjSj  := .T.

			IF ( ( lHrMovTol ) .and. ( cTipo == "EJ" ) )
		
				IF (;
						( ( nPosEJ := aScan( ::aHoras,{ |x| x[10] == "EJ" } ) ) > 0 );
						.and.;
						( ( nPosSJ := aScan( ::aHoras,{ |x| x[10] == "SJ" } ) ) > 0 );
						.and.;
						!( ::aHoras[ nPosEJ , 12 ] ) .and. !( ::aHoras[ nPosSJ , 12 ] );
				   )

					//--Salva a Marcacao
					aMarcEJ		:= Array( 02 )
					aMarcEJ[1]	:= ::aHoras[ nPosM , 01 ]
					aMarcEJ[2]	:= ::aHoras[ nPosM , 02 ]
		
					//--Obtem o Posicionamento das Tabelas Referente a Intervalo
					nPosSI := aScan( ::aHoras , { |x| x[10] == "SI" } )
					nPosEI := aScan( ::aHoras , { |x| x[10] == "EI" } )

					//-- Modifica o horario de entrada qdo for abonado
					lChkAbono := ChkAboHrMv( @aMarcEJ , ::aHoras[ nPosM , 1 ] , ::aAbonos , ::cFilSP6 )
	
					cMarcFun	:= DataHora2Str( aMarcEJ[1] , aMarcEJ[2] )
					aMarcAntM	:= RetIniTab( ::aHoras[nPosEJ,1] , ::aHoras[nPosEJ,2] , ::nAntMove ) 
					cMarcAntM	:= DataHora2Str( aMarcAntM[1] , aMarcAntM[2] )
					aMarcPosM	:= RetFimTab( ::aHoras[nPosEJ,1] , ::aHoras[nPosEJ,2] , ::nPosMove ) 
					cMarcPosM	:= DataHora2Str( aMarcPosM[1] , aMarcPosM[2] )
	
					IF (;
							(;
								( cMarcFun <= cMarcAntM );
								.or.;
								( cMarcFun >= cMarcPosM );
							);
							.or.;
					   		(;
					   			( cMarcFun < cMarcPosM  );
					   			.and.;
					   			( cMarcFun > cMarcAntM );
					   		);
					   		.or.;
					   		( lChkAbono );
					   	)	
		
						Begin Sequence
						
							//-- Verifica se a Entrada  ┌ Menor que (Tabela - Tolerancia Ant.)
							IF ( cMarcFun <= cMarcAntM )
								//Se marcacao Anterior for Maior que Tolerancia Nao Altera Horario Movel
								IF ( lChkTolMov := ( ( cMarcFun < cMarcAntM ) .and. ( ::cChkTMov $ "AT" ) ) )
									Break
								EndIF
								aMarcEJ[1] := aMarcAntM[1]             
								aMarcEJ[2] := aMarcAntM[2]
							//-- Verifica se a Entrada1 ┌ Maior que (Tabela + Tolerancia Post.)
							ElseIF ( cMarcFun >= cMarcPosM )
								//Se marcacao Posteior for Maior que Tolerancia Nao Altera Horario Movel
								IF ( lChkTolMov := ( ( cMarcFun > cMarcPosM ) .and. ( ::cChkTMov $ "PT" ) ) )
									Break
								EndIF
								aMarcEJ[1] := aMarcPosM[1]
								aMarcEJ[2] := aMarcPosM[2]
							//-- Verifica se a Entrada1 ┌ Esta Entre a Tabela e a Tolerancia Anterior e Posterior
							ElseIF ( ( cMarcFun < cMarcPosM  ) .and. ( cMarcFun > cMarcAntM ) )
								aMarcEJ[1] := ( Str2DataHora( cMarcFun )[1] )
								aMarcEJ[2] := ( Str2DataHora( cMarcFun )[2] )
							EndIF
				
						End Sequence
						
						//--Substituir no Array ::aHoras o Hor═rio de entrada da Tabela
						IF !( lChkTolMov )
							//-- Hor═rio Esperado p/ Saida em Fun┤└o da Entrada
							//aMarcSJ := RetFimTab( aMarcEJ[1] , aMarcEJ[2] , ::nTHrTab , ::nIntTab,.T., aMarcEJ[1], ::nIniHNot,::nFimHNot,::nMinHNot )
							aMarcSJ := RetFimTab( aMarcEJ[1] , aMarcEJ[2] , ::aHoras[nPosEJ,4] , ::nIntTab,.T., aMarcEJ[1], ::nIniHNot,::nFimHNot,::nMinHNot )
							aMarcSJ[2]:= __TimeSum(__TimeSum(	aMarcSJ[2], 0) , 0)
							//-- Se foram Encontradas a Saida e Entrada de Intervalo
						    IF ( ( nPosSI > 0 ) .and. ( nPosEI > 0 ) )
                            	//Verifica se Saida de Jornada nao sera Inferior aos Horarios de Intervalo
                            	IF (;
                            			( DataHora2Str( aMarcSJ[1] , aMarcSJ[2] ) < ::aHoras[nPosSI,17] );
                            			.or.;
                            			( DataHora2Str( aMarcSJ[1] , aMarcSJ[2] ) < ::aHoras[nPosEI,17] )		;
                            		)	
									//So Modifica Entrada de Jornada e Saida de Jornada se Sincronizou Intervalo
									lModEjSj := lAjustInt
                            	EndIF
                            EndIF	
							IF ( lModEjSj )	//Se Modificar Entrada de Jornada e Saida de Jornada
								//--Apura o Numero de Horas para Sincronismo do Intervalo
								IF ( nPosSI > 0 ) .and. ( nPosEI > 0 )
									//Entrada de Jornada e Saida de Intervalo
									nHrEjSi	:= DataHora2Val( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] , ::aHoras[ nPosSI , 01 ] , ::aHoras[ nPosSI , 02 ] , "H" )
									//Saida de Intervalo e Entrada de Intervalo
									nHrSiEi	:= DataHora2Val( ::aHoras[ nPosSI , 01 ] , ::aHoras[ nPosSI , 02 ] , ::aHoras[ nPosEI , 01 ] , ::aHoras[ nPosEI , 02 ] , "H" )
                    			EndIF
                            	//--Ajusta o Horario de Entrada da Tabela
								::aHoras[nPosEJ,01] := aMarcEJ[1]
								::aHoras[nPosEJ,02] := aMarcEJ[2]
								::aHoras[nPosEJ,17] := DataHora2Str( aMarcEJ[1] , aMarcEJ[2] )
								//--Substituir no Array ::aHoras o Hor═rio de Saida Tabela
								::aHoras[nPosSJ,01] := aMarcSJ[1]
								::aHoras[nPosSJ,02] := aMarcSJ[2]
								::aHoras[nPosSJ,17] := DataHora2Str( aMarcSJ[1] , aMarcSJ[2] )
								//-- Verifica se Ajusta (Sincroniza) o Intervalo em funcao da Entrada Movel
								IF ( lAjustInt )
						    		//-- Se foram Encontradas a Saida e Entrada de Intervalo
						    		IF ( ( nPosSI > 0 ) .and. ( nPosEI > 0 ) )
						    			//-- Apura a Diferenca de Horas Entre a Entrada do Expediente e Saida de Intervalo
						    			aMarcSaiI	:= RetFimTab( aMarcEJ[1]	, aMarcEJ[2]	, nHrEjSi )
						    			//-- Apura as Horas de Intervalo
										aMarcEntI	:= RetFimTab( aMarcSaiI[1]	, aMarcSaiI[2]	, nHrSiEi )
                            			//--Ajusta o Horario de Saida Intervalo
										::aHoras[nPosSI,01] := aMarcSaiI[1]
										::aHoras[nPosSI,02] := aMarcSaiI[2]
										::aHoras[nPosSI,17] := DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] )
                            			//--Ajusta o Horario de Entrada Intervalo
										::aHoras[nPosEI,01] := aMarcEntI[1]
										::aHoras[nPosEI,02] := aMarcEntI[2]
										::aHoras[nPosEI,17] := DataHora2Str( aMarcEntI[1] , aMarcEntI[2] )
						    		EndIF
						    	EndIF
								//-- Passou Pelo Horario Movel
								lChkMovel := .T.
							EndIF
						EndIF
						
						//--Ja passou Pelo Horario Movel de Entrada de Jornada
						::aHoras[nPosEJ,12] := .T.
						//--Ja passou Pelo Horario Movel de Saida de Jornada
						::aHoras[nPosSJ,12] := .T.
			
					EndIF
					
				EndIF
		
			ElseIF ( lInMovTol )

				IF ( cTipo $ "SI_EI_SE" )
	
					//-- Sigla de Entrada Anterior
					cEntAnt			:= ( SubStr( cSiglaMarc , 1 , 1 ) + "E" )
					//-- Sigla da Entrada do intervalo
					cEntInt			:= ( Str( Val( SubStr( cSiglaMarc , 1 , 1 ) ) + 1 , 1 ) + "E" )
					//-- Sigla da Proxima Saida
					cSaiProx		:= ( SubStr( cEntInt , 1 , 1 ) + "S" )

					lForceChkMvInt	:=	( ( ( cTipo $ "SI_EI" ) .and. ( ::cLstChkMvInt == "SE" ) ) .or. ( lRstHrTabInt ) )

					IF (;
							( ( nPosEJ := aScan(::aHoras,{ |x| x[3] == cEntAnt		} ) ) > 0 );
							.and.;
							( ( nPosSI := aScan(::aHoras,{ |x| x[3] == cSiglaMarc	} ) ) > 0 );
							.and.;
							( ( nPosEI := aScan(::aHoras,{ |x| x[3] == cEntInt		} ) ) > 0 );
							.and.;
							( ( nPosSJ := aScan(::aHoras,{ |x| x[3] == cSaiProx		} ) ) > 0 );
							.and.;
							(;
								(;
									!( ::aHoras[ nPosSI , 13 ] ) .and. ;
									!( ::aHoras[ nPosEI , 13 ] )	   ;
								 );
								 .or.;
								( lForceChkMvInt );
							);
						 )

						//Guardar o ultimo Flag de Checagem de Intervalo Movel
						::cLstChkMvInt := cTipo

						IF ( ( lForceChkMvInt ) .or. ( lRstHrTabInt ) ) //Se forcar a Verificacao de Intervalo Movel
							IF !Empty( ::aLstChkMvInt )
								//--Restaurar o Horario de Saida Tabela
								::aHoras[nPosSI,01] := ::aLstChkMvInt[1]
								::aHoras[nPosSI,02] := ::aLstChkMvInt[2]
								::aHoras[nPosSI,17] := ::aLstChkMvInt[3]
								//--Restaurar o Horario de Entrada Tabela
								::aHoras[nPosEI,01] := ::aLstChkMvInt[4]
								::aHoras[nPosEI,02] := ::aLstChkMvInt[5]
								::aHoras[nPosEI,17] := ::aLstChkMvInt[6]
								IF ( lRstHrTabInt )
									lChkMovel := .T.
								EndIF	
							EndIF
						EndIF

						IF !( lRstHrTabInt )

							//--Salva a Marcacao
							aMarcSaiI		:= Array( 02 )
							aMarcSaiI[1]	:= ::aHoras[ nPosM , 01 ]
							aMarcSaiI[2]	:= ::aHoras[ nPosM , 02 ]
	
							cMarcFun	:= DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] )
							aMarcAntM	:= RetIniTab( ::aHoras[nPosSI,1] , ::aHoras[nPosSI,2] , ::nMovAint ) 
							cMarcAntM	:= DataHora2Str( aMarcAntM[1] , aMarcAntM[2] )
							aMarcPosM	:= RetFimTab( ::aHoras[nPosSI,1] , ::aHoras[nPosSI,2] , ::nMovPint ) 
							cMarcPosM	:= DataHora2Str( aMarcPosM[1] , aMarcPosM[2] )
				
							IF (;
									(;
										( cMarcFun <= cMarcAntM );
										.or.;
										( cMarcFun >= cMarcPosM );
									);
									.or. ;
							   		(;
							   			( cMarcFun < cMarcPosM  );
							   			.and.;
							   			( cMarcFun > cMarcAntM );
							   		);
							   	)	

								Begin Sequence
								
									//-- Verifica se a Entrada ┌ Menor que (Tabela - Tolerancia Ant.)
									IF ( cMarcFun <= cMarcAntM )
										//Se marcacao Anterior for Maior que Tolerancia Nao Altera Horario Movel
										IF ( lChkTolMov := ( ( cMarcFun < cMarcAntM ) .and. ( ::cChkTMvi $ "AT" ) ) )
											Break
										EndIF
										aMarcSaiI[1] := aMarcAntM[1]
										aMarcSaiI[2] := aMarcAntM[2]
									//-- Verifica se a Entrada ┌ Maior que (Tabela + Tolerancia Post.)
									ElseIF ( cMarcFun >= cMarcPosM )
										//Se marcacao Posterior for Maior que Tolerancia Nao Altera Horario Movel
										IF ( lChkTolMov := ( ( cMarcFun > cMarcPosM ) .and. ( ::cChkTMvi $ "PT" ) ) )
											Break
										EndIF
										aMarcSaiI[1] := aMarcPosM[1]
										aMarcSaiI[2] := aMarcPosM[2]
									//-- Verifica se a Entrada1 ┌ Esta Entre a Tabela e a Tolerancia Anterior e Posterior
									ElseIF ( ( cMarcFun < cMarcPosM  ) .and. ( cMarcFun > cMarcAntM ) )
										aMarcSaiI[1] := ( Str2DataHora( cMarcFun )[1] )
										aMarcSaiI[2] := ( Str2DataHora( cMarcFun )[2] )
									EndIF
						
								End Sequence
	
								IF !( lChkTolMov )
		
									IF (;
											(;
												DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] ) >;
												DataHora2Str( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] );
											);
										)		
		
										aMarcEntI := RetFimTab( aMarcSaiI[1] , aMarcSaiI[2] , ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] ) 

										IF (;
												(;
													DataHora2Str( aMarcEntI[1] , aMarcEntI[2] ) <;
													DataHora2Str( ::aHoras[ nPosSJ , 01 ] , ::aHoras[ nPosSJ , 02 ] );
												);
											)
											
											IF ( cTipo == "SE" )
												::aLstChkMvInt := Array( 06 )
												//--Salvar o Horario de Saida Tabela
												::aLstChkMvInt[1] := ::aHoras[nPosSI,01]
												::aLstChkMvInt[2] := ::aHoras[nPosSI,02]
												::aLstChkMvInt[3] := ::aHoras[nPosSI,17]
												//--Salvar o Horario de Entrada Tabela
												::aLstChkMvInt[4] := ::aHoras[nPosEI,01]
												::aLstChkMvInt[5] := ::aHoras[nPosEI,02]
												::aLstChkMvInt[6] := ::aHoras[nPosEI,17]
											EndIF
										
											//--Substituir no Array ::aHoras o Horario de Saida Tabela
											If ( DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] ) !=  ;
													DataHora2Str( aMarcEntI[1] , aMarcEntI[2] ) ) .and. ;
													( DataHora2Str( aMarcEntI[1] , aMarcEntI[2] )  <= ;
													  DataHora2Str( aMarcPosM[1] , aMarcEntI[2] ) )
												::aHoras[nPosSI,01] := aMarcSaiI[1]
												::aHoras[nPosSI,02] := aMarcSaiI[2]
												::aHoras[nPosSI,17] := DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] )
											EndIf
											//--Substituir no Array ::aHoras o Horario de Entrada Tabela
											::aHoras[nPosEI,01] := aMarcEntI[1]
											::aHoras[nPosEI,02] := aMarcEntI[2]
											::aHoras[nPosEI,17] := DataHora2Str( aMarcEntI[1] , aMarcEntI[2] )
	
											//-- Passou Pelo Horario Movel
											lChkMovel				:= .T.
	
		                                EndIF
		
									EndIF
	
								EndIF
					    
							EndIF
					
						EndIF
						
					EndIF

					IF !( lRstHrTabInt )

						//-- Ja passou Horario Movel Referente ao Intervalo Saida
						::aHoras[ nPosSI , 13 ] := .T.
						//-- Ja passou Horario Movel Referente ao Intervalo Entrada
						::aHoras[ nPosEI , 13 ] := .T.
						
					Else //Garanto que se houver mais de uma Saida no Expediente haja a revisao do Intervalo Movel

						//-- Ja passou Horario Movel Referente ao Intervalo Saida
						::aHoras[ nPosSI , 13 ] := .F.
						//-- Ja passou Horario Movel Referente ao Intervalo Entrada
						::aHoras[ nPosEI , 13 ] := .F.

					EndIF
				
				EndIF
		
			EndIF
		
			IF ( lChkMovel ) 
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁOrdena as Marcacoes do Dia com as Marcacoes da Tabela					Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				::SortaHoras()
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁRemonta Horas Trabalhadas no ::aApo em funcao das Alteracoes	  no	Ё
				Ё::aHoras																Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				::RmkWorkHrs()
			EndIF
	
	EndIF
	
Return( lChkMovel )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁChkAboHrMv  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё30/07/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica os Abonos e Modifica Inicio da Marcacao			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁChkAboHrMv( aMarcFun , dData , aAbonos )			 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁaMarcFun -> Array com a Marcacao do Funcionario              Ё
Ё          ЁdData    -> Data da Marcacao                       		     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёmethod ChkHrMovel() class PonVarApon  						 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function ChkAboHrMv( aMarcFun , dData , aAbonos , cFilSP6 )

Local cMarcFun	:= ""
Local cMarcAbo	:= ""
Local lChkAbono	:= .F.
Local nW		:= 0
Local nFornW	:= 0
Local nPosAbo	:= 0

IF ( ( nFornW := Len( aAbonos ) ) > 0 )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Verifica se Tem Abono na Data								  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF ( ( nPosAbo := aScan( aAbonos , { |x| x[ AABONOS_DATA ] == dData } ) ) > 0 )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁTransforma a Marcacao do Funcionario em String para   comparaЁ
		Ёcao														  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		cMarcFun := DataHora2Str( aMarcFun[1] , aMarcFun[2] )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica Todos os Abonos na Data							  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		For nW := nPosAbo To nFornW
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё O Abono So Ira Influenciar no Horario Movel se Tiver o PerioЁ
			Ё do que foi Abonado (Elemento 03 e 04 de aAbonos )		  	  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF ( SomaHoras( aAbonos[ nW , AABONOS_HORAS_INI ] , aAbonos[ nW , AABONOS_HORAS_FIM ] ) > 0  )
				IF (;
						( aAbonos[ nW , AABONOS_DATA ] == dData );
						.and.;
						( PosSP6( aAbonos[ nW , AABONOS_CODIGO ] , cFilSP6 , "P6_ABHORAS" , 01 ) == "S" );
					)
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁTransforma a Marcacao do Abono em String para   comparacao	  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
					cMarcAbo := DataHora2Str( aAbonos[ nW , AABONOS_DATA ] , aAbonos[ nW , AABONOS_HORAS_INI ] )
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					Ё Se a Marcacao do Abono for menor que a Marcacao do  FuncionaЁ
					Ё rio considera a Marcacao do Abono.               			  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
					IF ( lChkAbono := ( cMarcAbo < cMarcFun ) )
						aMarcFun[1] := aAbonos[ nW , AABONOS_DATA		]
						aMarcFun[2] := aAbonos[ nW , AABONOS_HORAS_INI	]
						Exit
					EndIF
				EndIF
			EndIF
		Next nW
	EndIF
EndIF

Return( lChkAbono )

//End Class PonVarApon

//Begin Class ApoElemPrc
	
/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁClass     ЁApoElemPrc  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁClasse com as Variaveis que Indexarao o array aProcessad   daЁ
Ё          Ёclasse PonVarApon											 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := ApoElemPrc():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
class ApoElemPrc
      
	data nEntraEJ1E
	data nEntraEJ2E
	data nEntraEJ3E
	data nEntraEJ4E
	data nSaidaSI1S
	data nSaidaSI2S
	data nSaidaSI3S
	data nSaidaSI4S
	data nEntraEI1E
	data nEntraEI2E
	data nEntraEI3E
	data nEntraEI4E
	data nSaidaSJ1S
	data nSaidaSJ2S
	data nSaidaSJ3S
	data nSaidaSJ4S

	method New( aProcessad ) constructor
	
endclass	

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁNew         Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁConstrutor da Classe ApoElemPrc						 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := ApoElemPrc():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass ApoElemPrc                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method New( aProcessad ) class ApoElemPrc

	aProcessad := Array( 16 , 02 )

	::nEntraEJ1E	:= 01
	::nEntraEJ2E	:= 02
	::nEntraEJ3E	:= 03
	::nEntraEJ4E	:= 04
	::nSaidaSI1S	:= 05
	::nSaidaSI2S	:= 06
	::nSaidaSI3S	:= 07
	::nSaidaSI4S	:= 08
	::nEntraEI1E	:= 09
	::nEntraEI2E	:= 10
	::nEntraEI3E	:= 11
	::nEntraEI4E	:= 12
	::nSaidaSJ1S	:= 13
	::nSaidaSJ2S	:= 14
	::nSaidaSJ3S	:= 15
	::nSaidaSJ4S	:= 16

	aProcessad[::nEntraEJ1E,01]	:= "lEntraEJ1E"
	aProcessad[::nEntraEJ2E,01]	:= "lEntraEJ2E"
	aProcessad[::nEntraEJ3E,01]	:= "lEntraEJ3E"
	aProcessad[::nEntraEJ4E,01]	:= "lEntraEJ4E"

	aProcessad[::nSaidaSI1S,01]	:= "lSaidaSI1S"
	aProcessad[::nSaidaSI2S,01]	:= "lSaidaSI2S"
	aProcessad[::nSaidaSI3S,01]	:= "lSaidaSI3S"
	aProcessad[::nSaidaSI4S,01]	:= "lSaidaSI4S"

	aProcessad[::nEntraEI1E,01]	:= "lEntraEI1E"
	aProcessad[::nEntraEI2E,01]	:= "lEntraEI2E"
	aProcessad[::nEntraEI3E,01]	:= "lEntraEI3E"
	aProcessad[::nEntraEI4E,01]	:= "lEntraEI4E"

	aProcessad[::nSaidaSJ1S,01]	:= "lSaidaSJ1S"
	aProcessad[::nSaidaSJ2S,01]	:= "lSaidaSJ2S"
	aProcessad[::nSaidaSJ3S,01]	:= "lSaidaSJ3S"
	aProcessad[::nSaidaSJ4S,01]	:= "lSaidaSJ4S"

return( NIL )

//End Class PonVarApon

//Begin Class StructaApo

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁClass     ЁStructaApo  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁClasse com as Variaveis que Indexarao o array aApo da  ClasseЁ
Ё          ЁPonVarApon											 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := StructaApo():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ё                                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
class StructaApo

	data AdicHeNotA
	data AdicHeNotF
	data AdicHeNotN
	data AdicNotAut
	data AdicNotNau 
	data Atrasos

	data Falta
	data FaltaInter
	data FaltaIntNt

	data HeIntNorAu
	data HeIntNorFx
	data HeIntNorNa
	data HeIntNotAu
	data HeIntNotFx
	data HeIntNotNa

	data HeNormal
	data HeNormalFx
	data HeNorNAut
	data HeNotAutor
	data HeNotNaoAu
	data HeNoturnFx
   
	data HrIntEfeti
	data HrIntNotEf
	data HrIntNotTb
	data HrIntTabel
	data HrIntTbNNt
	data HrNorNaoRe
	data HrNotNaoRe
	data HrTrabTbNN
	data HrTrbEfeti
	data HrTrbNotEf
	data HrTrbNotTb
	data HrTrbTabel

	data MeiaFalta

	data PriorityHe

	data SaidaAnte
	data SaidaExpe

	data AcreAuto 	
	data PrimDom 
	data DescLab 
	data FestLab	
	
	method New() constructor
	
endclass

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁNew         Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁConstrutor da Classe StructaApo						 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := StructaApo():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass ApoElemPrc                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method New() class StructaApo

	::AdicHeNotA	:=  1
	::AdicHeNotF	:=  2
	::AdicHeNotN	:=  3
	::AdicNotAut	:=  4
	::AdicNotNau	:=  5  
	::Atrasos		:=  6

	::Falta			:=  7
	::FaltaInter	:=  8
	::FaltaIntNt	:=  9

	::HeIntNorAu	:= 10
	::HeIntNorFx	:= 11
	::HeIntNorNa	:= 12
	::HeIntNotAu	:= 13
	::HeIntNotFx	:= 14
	::HeIntNotNa	:= 15

	::HeNormal		:= 16
	::HeNormalFx	:= 17
	::HeNorNAut		:= 18
	::HeNotAutor	:= 19
	::HeNotNaoAu	:= 20
	::HeNoturnFx	:= 21
   
	::HrIntEfeti	:= 22
	::HrIntNotEf	:= 23
	::HrIntNotTb	:= 24
	::HrIntTabel	:= 25
	::HrIntTbNNt	:= 26
	::HrNorNaoRe	:= 27
	::HrNotNaoRe	:= 28
	::HrTrabTbNN	:= 29
	::HrTrbEfeti	:= 30
	::HrTrbNotEf	:= 31
	::HrTrbNotTb	:= 32
	::HrTrbTabel	:= 33

	::MeiaFalta		:= 34

	::PriorityHe	:= 35

	::SaidaAnte		:= 36	
	::SaidaExpe		:= 37	
    
	::AcreAuto 		:= 38
	
	::PrimDom 		:= 39
	::DescLab 		:= 40
	::FestLab 		:= 41
				
return( NIL )

//End Class StructaApo

//Begin Class SpaFields

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁClass     ЁSpaFields   Ё Autor ЁMarinaldo de Jesus    Ё Data Ё11/10/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁClasse com as Variaveis que Indexarao o array aSpaFields e deЁ
Ё          Ёfinirao os campos da regra (SPA) a ser utilizado			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := SpaFields():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
class SpaFields

	data aSpaFields

	data nPaHrMovel
	data nPaAntMove
	data nPaPosMove
	data nPaInMovel
	data nPaMovAInt
	data nPaMovPInt
	data nPaAjustIn
	data nPaChkTMov
	data nPaChkTMvI
	data nPaFaltas
	data nPaSaiAnt
	data nPaPerSaiA
	data nPaTolSaiA
	data nPaTolASai
	data nPaAtrasos
	data nPaPerAtra
	data nPaTolAtra
	data nPaSaiExpe
	data nPaTolHex
	data nPaPgHeDnt
	data nPaPagIntn
	data nCpoIntNotNt
	data nPaPgAdnIn
	data nPaPerHMov
	data nPaIntFalt
	data nPaDsr
	data nPaPagHext
	data nPaAdNot
	data nPaAdNotEx
	data nPaHrNorm
	data nPaPeraNot
	data nPaTolNtHe
	data nPaTolNotu
	data nPaPerHext
	data nPaTolFalt
	data nPaTolHePe
	data nPaFaixaHe
	data nPaAjustEj
	data nPaHrsPgs
	data nPaAdHeDia
	data nPaPrimdom
	data nPaDescLab
	data nPaFestLab
			
	data nSpaFields

	method New() constructor

endclass	

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁNew         Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁConstrutor da Classe SpaFields						 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := SpaFields():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method New() class SpaFields

	::nPaHrMovel	:= 1
	::nPaAntMove	:= 2
	::nPaPosMove	:= 3
	::nPaInMovel	:= 4
	::nPaMovAInt	:= 5
	::nPaMovPInt	:= 6
	::nPaAjustIn	:= 7
	::nPaChkTMov	:= 8
	::nPaChkTMvI	:= 9
	::nPaFaltas		:= 10
	::nPaSaiAnt		:= 11
	::nPaPerSaiA	:= 12
	::nPaTolSaiA	:= 13
	::nPaTolASai	:= 14
	::nPaAtrasos	:= 15
	::nPaPerAtra	:= 16
	::nPaTolAtra	:= 17
	::nPaSaiExpe	:= 18
	::nPaTolHex		:= 19
	::nPaPgHeDnt	:= 20
	::nPaPagIntn	:= 21
	::nCpoIntNotNt	:= 22
	::nPaPgAdnIn	:= 23
	::nPaPerHMov	:= 24
	::nPaIntFalt	:= 25
	::nPaDsr		:= 26
	::nPaPagHext	:= 27
	::nPaAdNot		:= 28
	::nPaAdNotEx	:= 29
	::nPaHrNorm		:= 30
	::nPaPeraNot	:= 31
	::nPaTolNtHe	:= 32
	::nPaTolNotu	:= 33
	::nPaPerHext	:= 34
	::nPaTolFalt	:= 35
	::nPaTolHePe	:= 36
	::nPaFaixaHe	:= 37
	::nPaAjustEj	:= 38
	::nPaHrsPgs		:= 39
	::nPaAdHeDia	:= 40
	::nPaPrimDom	:= 41		
	::nPaDescLab	:= 42		
	::nPaFestLab	:= 43		
		
	::nSpaFields	:= 43

	::aSpaFields					:= Array( ::nSpaFields )
	::aSpaFields[ ::nPaHrMovel   ]	:= "PA_HRMOVEL"
	::aSpaFields[ ::nPaAntMove   ]	:= "PA_ANTMOVE"
	::aSpaFields[ ::nPaPosMove   ]	:= "PA_POSMOVE"
	::aSpaFields[ ::nPaInMovel   ]	:= "PA_INMOVEL"
	::aSpaFields[ ::nPaMovAInt   ]	:= "PA_MOVAINT"
	::aSpaFields[ ::nPaMovPInt   ]	:= "PA_MOVPINT"
	::aSpaFields[ ::nPaAjustIn   ]	:= "PA_AJUSTIN"
	::aSpaFields[ ::nPaChkTMov   ]	:= "PA_CHKTMOV"
	::aSpaFields[ ::nPaChkTMvI   ]	:= "PA_CHKTMVI"
	::aSpaFields[ ::nPaFaltas    ]	:= "PA_FALTAS"
	::aSpaFields[ ::nPaSaiAnt    ]	:= "PA_SAIANT"
	::aSpaFields[ ::nPaPerSaiA   ] 	:= "PA_PERSAIA"
	::aSpaFields[ ::nPaTolSaiA   ]	:= "PA_TOLSAIA"
	::aSpaFields[ ::nPaTolASai   ]	:= "PA_TOLASAI"
	::aSpaFields[ ::nPaAtrasos   ]	:= "PA_ATRASOS"
	::aSpaFields[ ::nPaPerAtra   ]	:= "PA_PERATRA"
	::aSpaFields[ ::nPaTolAtra   ]	:= "PA_TOLATRA"
	::aSpaFields[ ::nPaSaiExpe   ]	:= "PA_SAIEXPE"
	::aSpaFields[ ::nPaTolHex    ]	:= "PA_TOLHEX"
	::aSpaFields[ ::nPaPgHeDnt   ]	:= "PA_PGHEDNT"
	::aSpaFields[ ::nPaPagIntn   ]	:= "PA_PAGINTN"
	::aSpaFields[ ::nCpoIntNotNt ]	:= "PA_PAGINTN"
	::aSpaFields[ ::nPaPgAdnIn   ]	:= "PA_PGADNIN"
	::aSpaFields[ ::nPaPerHMov	 ]	:= "PA_PERHMOV"
	::aSpaFields[ ::nPaIntFalt   ]	:= "PA_INTFALT"
	::aSpaFields[ ::nPaDsr		 ]	:= "PA_DSR"
	::aSpaFields[ ::nPaPagHext	 ]	:= "PA_PAGHEXT"
	::aSpaFields[ ::nPaAdNot	 ]	:= "PA_ADNOT"
	::aSpaFields[ ::nPaAdNotEx   ]	:= "PA_ADNOTEX"
	::aSpaFields[ ::nPaHrNorm    ]	:= "PA_HRNORM"
	::aSpaFields[ ::nPaPeraNot   ]	:= "PA_PERANOT"
	::aSpaFields[ ::nPaTolNtHe   ]	:= "PA_TOLNTHE"
	::aSpaFields[ ::nPaTolNotu	 ]	:= "PA_TOLNOTU"
	::aSpaFields[ ::nPaPerHext   ]	:= "PA_PERHEXT"
	::aSpaFields[ ::nPaTolFalt   ]	:= "PA_TOLFALT"
	::aSpaFields[ ::nPaTolHePe   ]	:= "PA_TOLHEPE"
	::aSpaFields[ ::nPaFaixaHe   ]	:= "PA_FAIXAHE"
	::aSpaFields[ ::nPaAjustEj	 ]	:= "PA_AJUSTEJ"
	::aSpaFields[ ::nPaHrsPgs	 ]	:= "PA_HRSPGS"
	::aSpaFields[ ::nPaAdHeDia	 ]	:= "PA_ADHEDIA" 
	::aSpaFields[ ::nPaPrimdom	 ]	:= "PA_PRIMDOM" 
	::aSpaFields[ ::nPaDescLab	 ]	:= "PA_DESCLAB" 
	::aSpaFields[ ::nPaFestLab	 ]	:= "PA_FESTLAB" 		

return( NIL )

//End Class SpaFields

//Begin Class Sr6Fields

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁClass     ЁSr6Fields   Ё Autor ЁMarinaldo de Jesus    Ё Data Ё11/10/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁClasse com as Variaveis que Indexarao o array aSr6Fields e deЁ
Ё          Ёfinirao os campos da regra (SR6) a ser utilizado			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := Sr6Fields():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
class Sr6Fields

	data aSr6Fields

	data nR6InterNt
	data nR6HrInter
	data nR6AptpMar
	data nR6HnotAtr
	data nR6HnotTab
	data nR6HnotTbI	
	data nR6HnotFal
	data nR6HnotSai
	data nR6ExtNot
	data nR6AcreNot
	data nR6IdAcreNot
	data nSr6Fields

	method New() constructor

endclass	

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁNew         Ё Autor ЁMarinaldo de Jesus    Ё Data Ё26/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁConstrutor da Classe Sr6Fields						 		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj := Sr6Fields():New()									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ёself                                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass ApoElemPrc                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method New() class Sr6Fields

	::nR6InterNt	:= 1
	::nR6HrInter	:= 2
	::nR6AptpMar	:= 3
	::nR6HnotAtr	:= 4
	::nR6HnotFal	:= 5
	::nR6HnotSai	:= 6
	::nR6ExtNot		:= 7
	::nR6AcreNot	:= 8
	::nR6IdAcreNot	:= 9  
	::nR6HnotTab	:= 10
	::nR6HnotTbI	:= 11
	
	::nSr6Fields	:= 11

	::aSr6Fields					:= Array( ::nSr6Fields )
	::aSr6Fields[ ::nR6InterNt   ]	:= "R6_INTERNT"
	::aSr6Fields[ ::nR6HrInter   ]	:= "R6_HRINTER"
	::aSr6Fields[ ::nR6AptpMar   ]	:= "R6_APTPMAR"
	::aSr6Fields[ ::nR6HnotAtr   ]	:= "R6_HNOTATR"
	::aSr6Fields[ ::nR6HnotFal   ]	:= "R6_HNOTFAL"
	::aSr6Fields[ ::nR6HnotSai   ]	:= "R6_HNOTSAI"
	::aSr6Fields[ ::nR6ExtNot    ]	:= "R6_EXTNOT"
	::aSr6Fields[ ::nR6AcreNot   ]	:= "R6_ACRENOT"
	::aSr6Fields[ ::nR6IdAcreNot ]	:= "R6_IDACREN"
	::aSr6Fields[ ::nR6HnotTab   ]	:= "R6_HNOTTAB"
	::aSr6Fields[ ::nR6HnotTbI   ]	:= "R6_HNOTTBI"
return( NIL )

//End Class Sr6Fields




/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁZeraApoHr	Ё Autor ЁMauricio MR           Ё Data Ё01/06/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁInicializa o Array aApoHr									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:ZeraApoHr()           									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method ZeraApoHr() class PonVarApon

Local nX	:= 0
Local nY	:= 0

IF Empty( ::aApoHr )
	::aApoHr := ( Array( ELEMENTOS_MATRIZ_APONTAMENTOS , ::nSiglaMarc ) )
Endif

For nX:=1 to ELEMENTOS_MATRIZ_APONTAMENTOS
    For nY:=1 to ::nSiglaMarc
    	::aApoHr[nX,nY] := {}
    Next nY
Next nX

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁfTabHeAut   Ё Autor ЁMauricio MR           Ё Data Ё03/10/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega a Tabela de HE autorizadas do Funcionario em Array   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRet                                                  	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/  
method fTabHeAut( cFilSRA , cMat , dPerIni , dPerFim ) class PonVarApon
					
Local cFilSPT			:= ''
Local cFilMat			:= '' 
Local lRet				:= .F.
Local lMemoria			:= IF( ::aHeAutoDia <> NIL , .T. , .F. )
Local nLenaFaixaExtra	:= 0
Local nFaixa			:= 0

Begin Sequence

	DEFAULT cFilSRA		:= SRA->RA_FILIAL
	DEFAULT cMat    	:= SRA->RA_MAT
	DEFAULT dPerIni		:= Ctod("//")
	DEFAULT dPerFim		:= Ctod("//")	 
	
    cFilSPT		:= fFilFunc('SPT')
    cFilMat     := cFilSRA + cMat
	
    //-- Obtem o periodo de Apontamento se nao passada pelo menos uma das datas
	IF Empty( dPerIni ) .or. Empty( dPerFim )
		PerAponta( @dPerIni , @dPerFim )
	EndIF

	//-- Carrega array com as Faixas de HE autorizadas 
	If Empty(::aFaixasHE)
		//-- Procura Tabela (Filial + Matricula corrente + Data Inicial do Periodo)
		//-- ATENCAO: Utilizamos a opcao SoftSeek na pesquisa, de modo que poderemos encontrar uma
		//-- data maior que o final do periodo ou entao um outro funcionario cuja chave filial+mat
		//-- seja superior a filila+funcionario de quem queremos obter informacoes, por isso
		//-- nos preocupamos em tratar a quebra de filial+funcionario e Data.
		SPT->( MsSeek( cFilMat+Dtos(dPerIni) , .T.) )
		While SPT->( !Eof() .and. PT_FILIAL + PT_MAT == cFilMat )
		 	
			If SPT->( PT_DATAREF > dPerFim )
		 	   Exit
		 	Endif
		 	   
		 	IF SPT->( ( PT_DATAREF >= dPerIni ) .and. ( PT_DATAREF <= dPerFim ) )
				SPT->( aAdd( ::aFaixasHE, {;
												PT_DATAREF ,;
												PT_DATA,;
												PT_HORINI,;
				                        		IF( PT_HORINI > PT_HORFIM,PT_DATA + 1 , PT_DATA ) , PT_HORFIM;
				                        	};
				            );
				      )
		 	EndIF 
		 	
		 	SPT->( dbSkip() )
	   
		End While
	
		lRet := !Empty( ::aFaixasHE )
		
	Endif
	
	//-- Carrega Horarios do Periodo em ::aHeAutoDia (Geralmente de um dia) a partir do array ::aFaixasHE
	If ( lMemoria )
	
		::aHeAutoDia	:= {}
		nLenaFaixaExtra			:= Len( ::aFaixasHE )
		nFaixa					:= 1
	   
		//-- Quando for uma data especifica
		If ( dPerIni == dPerFim )
			//-- Localiza a faixa requisitada
			nFaixa := aScan( ::aFaixasHE, { |aFaixa| aFaixa[1] == dPerini } )
		Endif
	   
		//--Percorre todas as Faixas     
		IF ( nFaixa > 0 )
			--nFaixa
			While ( ( ++nFaixa ) <= nLenaFaixaExtra )
		        IF ( ( ::aFaixasHE[ nFaixa , 01 ] >= dPerIni ) .and. ( ::aFaixasHE[ nFaixa , 01 ] <= dPerFim ) )
		           aAdd( ::aHeAutoDia , {;
		           									::aFaixasHE[ nFaixa, 01 ] ,;
		           									::aFaixasHE[ nFaixa, 02 ] ,;
		           									::aFaixasHE[ nFaixa, 03 ] ,;
		                                			::aFaixasHE[ nFaixa, 04 ] ,;
		                                			::aFaixasHE[ nFaixa, 05 ]  ;
		                               			};
		                 ) 
		        EndIF
			End While
		EndIF
		lRet := !Empty( ::aHeAutoDia )
	Endif

End Sequence

return( lRet )

/*/
зддддддддддбддддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁInitPreAbo    ЁAutorЁMauricio MR           Ё Data Ё01/06/2004Ё
цддддддддддеддддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁInicializa as Tabelas de Periodos de Pre-Abonos	 		     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁoObj:InitPreAbo()	    									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNil          		                                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       Ёclass PonVarApon                                             Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method InitPreAbo( cFilSRA , cMatSRA ) class PonVarApon       

//-- Se Existir o arquivo de Pre-Abonos
If ( ::lRF0ChkTable )
   
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁApenas Quando estiver vazio e se nao tiver passado pela   funЁ
	Ёcao														  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
  	IF Empty( ::aPreAbo ) .and. ( ::lfTabPreAbo )
		/*/	
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁArray com Periodos de Pre-Abonos					          Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		::lfTabPreAbo := ::TabPreAbo( cFilSRA , cMatSRA , ::dPerIni , ::dPerFim )
  	EndIF
    //-- Monta Tabela de Periodos de Pre-Abonos para o dia corrente 
    IF ( ::lfTabPreAbo ) 
        ::TabPreAbo( cFilSRA , cMatSRA , ::dData , ::dData )
        
    EndIF	
Endif

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁTabPreAbo   Ё Autor ЁMauricio MR           Ё Data Ё23/04/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarrega a Tabela de Pre-Abonos do Funcionario em Array       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё TabPreAbo(cFilSRA, cMat , dPerIni , dPerFim,  aPreAbono )   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRet e aPreAbono(Por referencia)                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      Ёclass PonVarApon 											 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method TabPreAbo( cFilSRA , cMat , dPerIni , dPerFim ) class PonVarApon

Local cAliasQuery	:= 'RF0'
Local cAlias		:= 'RF0'
Local cFilRF0		:= ''
Local cFilMat		:= '' 
Local dDataApo		:= Ctod("")
Local dDtIni		:= Ctod('')
Local dDtFim		:= Ctod('')
Local lRet			:= .F.
Local lMemoria		:= If(::aPreAboDia <> Nil, .T., .F.)
Local nLenaPreAbo	:= 0
Local nFaixa		:= 0 
Local nHorIni		:= 0
Local nHorFim		:= 0  
Local nRecno		:= 0
Local nPos1			:= 0     
Local nLenTab		:= 0
Local nElem			:= 0

#IFDEF TOP

	Local cQuery	 		:= ""
	Local cSvAlias			:= Alias()
	Local cCpoRecno 		:= ""
	Local lQueryOpened		:= .F.
	Local nX				:= 0 
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁVerifica se a Execucao eh no AS/400                          Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	Local lExInAs400 := ExeInAs400()

	Static aRF0Fields
	Static cQryRF0Fields
	Static nRF0Fields

	Local lExecQryTop	:= .T.

	IF ( lExInAs400 )
		lExecQryTop	:= .F.
	EndIF	

	IF ( lExecQryTop )
		
		DEFAULT aRF0Fields 	:= ( cAlias )->( dbStruct() )
		DEFAULT nRF0Fields 	:= Len( aRF0Fields )

		IF ( cQryRF0Fields == NIL )
			cQryRF0Fields := ""
			For nX := 1 To nRF0Fields
				cQryRF0Fields += aRF0Fields[ nX , 01 ] + ", "
			Next nX
	    EndIF
	EndIF

#ENDIF

DEFAULT cFilSRA		:= SRA->RA_FILIAL
DEFAULT cMat    	:= SRA->RA_MAT
DEFAULT dPerIni		:= Ctod("//")
DEFAULT dPerFim		:= Ctod("//")	 

//-- Numero de Elementos da Tabela Calendario
nLenTab :=Len(aTabCalend)

cFilRF0	:= fFilFunc('RF0')
cFilMat	:= cFilSRA + cMat

//-- Obtem o periodo de Apontamento se nao passado pelo menos uma das datas
IF Empty( dPerIni ) .or. Empty( dPerFim )
	PerAponta( @dPerIni , @dPerFim )
EndIF
    
       
//-- Carrega array com os Periodos de Pre-Abonos
If Empty(::aPreAbo)

	#IFDEF TOP
		IF ( lExecQryTop )
			cCpoRecno	:= IF( lExInAs400 , "RRN("+InitSqlName( cAlias )+")", "R_E_C_N_O_" )
			cAliasQuery := ( "__Q" + cAliasQuery + "QRY" )
			cQuery := "SELECT "
			cQuery += cQryRF0Fields
			cQuery += cCpoRecno + " RECNO "
			cQuery += " FROM "
			cQuery += InitSqlName( cAlias )
			cQuery += " WHERE "
			cQuery += "RF0_FILIAL='"+cFilSRA+"'"
			cQuery += " AND "
			cQuery += "RF0_MAT='"+cMat+"'"
			cQuery += " AND "
			cQuery += "D_E_L_E_T_=' ' "
			cQuery += "ORDER BY " + SqlOrder( (cAlias)->( IndexKey() ) )
			cQuery := ChangeQuery( cQuery )
			IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.F.,.T.) )
				For nX := 1 To nRF0Fields
					IF !( aRF0Fields[ nX , 02 ] == "C" )
						TcSetField(cAliasQuery,aRF0Fields[nX,01],aRF0Fields[nX,02],aRF0Fields[nX,03],aRF0Fields[nX,04])
					EndIF
				Next nX
				lRet := ( cAliasQuery )->( !Eof() )
			Else
				cAliasQuery	:= cAlias
				lRet := ( cAliasQuery )->( MsSeek( cFilMat) )
			EndIF
		Else
			cAliasQuery	:= cAlias
			lRet := ( cAliasQuery )->( MsSeek( cFilMat) )
		EndIF
    #ELSE
		lRet := ( cAliasQuery )->( MsSeek( cFilMat) )
	#ENDIF

	While ( cAliasQuery )->( !Eof() .and. RF0_FILIAL + RF0_MAT == cFilMat )
	 	
		If ( cAliasQuery )->( RF0_DTPREI > dPerFim ) 
	 	   Exit
	 	Endif
	 	   
	 	//-- Descarta Faixas Nao Compreendidas pelo Periodo de Apontamento ou
	 	//-- Jah utilizadas
	 	IF ( cAliasQuery )->(  (RF0_DTPREF < dPerIni ) )
		 	( cAliasQuery )->( dbSkip() )	 	
		 	Loop
	 	Endif
	 	
 		#IFNDEF TOP
			nRecno := ( cAliasQuery )->( Recno() )
		#ELSE
			IF ( ( lExecQryTop ) .and. ( lQueryOpened ) )
				nRecno := ( cAliasQuery )->( RECNO )
			Else
				nRecno := ( cAliasQuery )->( Recno() )
			EndIF
		#EndIF	

	 	/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Para Horas Zeradas assume Horario da Tabela Padrao 		  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	 	//-- Trata data inicial 
 	    dDtIni	:= Max(( cAliasQuery )->RF0_DTPREI, dPerIni) 
 	    nHorIni	:= ( cAliasQuery )->RF0_HORINI
 	    nHorFim	:= ( cAliasQuery )->RF0_HORFIM
 	    //-- Trata Hora Inicial. Para Hora Zerada Assume Tabela.
 	    If Empty(( cAliasQuery )->RF0_HORINI)
 	       IF ( nPos1 := aScan( ::aTabCalend, { |x| x[CALEND_POS_DATA_APO] == dDtIni } ) ) > 0
				nHorIni :=::aTabCalend[ nPos1 , CALEND_POS_HORA ] 
 	       Endif
 	    Endif                                                    
		//-- Trata data final
 	    dDtFim:= Min(( cAliasQuery )->RF0_DTPREF, dPerFim)                     
   	 	//-- Trata Hora final. Para Hora Zerada Assume Tabela.
 	    If Empty(( cAliasQuery )->RF0_HORFIM)
 	      //-- Procura pela Ordem da ultima data do Periodo de PreAbono
 	       IF ( nPos1 := aScan( ::aTabCalend, { |x| x[CALEND_POS_DATA_APO] == dDtFim } ) ) > 0
				nElem	:= nPos1
				For nElem := nPos1 To nLenTab
					If  ( aTabCalend[ nElem, CALEND_POS_DATA_APO ] == dDtFim )
						 //-- Obtem a Ultima marcacao do Dia
			 	        dDtFim	:= 	::aTabCalend[ nElem , CALEND_POS_DATA ] 
			 	        nHorFim :=	::aTabCalend[ nElem , CALEND_POS_HORA ] 		
					Else 
						Exit
					Endif
				Next nElem
			Endif 	   
 	    Endif
            
        //-- Adiciona Periodos de Pre-Abonos 
		( cAliasQuery )->( aAdd( ::aPreAbo, { RF0_CODABO, dDtIni, nHorIni, dDtFim, nHorFim, nRecno } ) )
	 	
	 	( cAliasQuery )->( dbSkip() )
	End While

	#IFDEF TOP
  		IF ( ( lQueryOpened ) .and. ( Select( cAliasQuery ) > 0 ) )
			( cAliasQuery )->( dbCloseArea() )
			dbSelectArea( "RF0" )
			IF ( Select( cSvAlias ) > 0 )
				dbSelectArea( cSvAlias )
			EndIF
		EndIF
   #ENDIF

   lRet := !Empty( ::aPreAbo )
	
Endif

//-- Carrega Horarios do Periodo em aPreAboDia (Geralmente de um dia) a partir do array aPreAbo
If lMemoria      

   ::aPreAboDia		:={}
   nLenaPreAbo		:=Len(::aPreAbo)                    
   
   nFaixa			:=1
   
   //-- Quando for uma data especifica
   If dPerIni == dPerFim
      //-- Localiza a faixa requisitada. A data devera estar entre os dias de um periodo
      nFaixa:= aScan( ::aPreAbo, { |aFaixa| aFaixa[2] <= dPerini .AND. aFaixa[4] >= dPerIni  } )
   Endif
   
   //--Percorre todas as Faixas     
   If !Empty(nFaixa)
   	   Do While nFaixa <= nLenaPreAbo                                                    
   	        //-- Se o Inicio da Faixa for superior ao fim do periodo ou
   	        //-- Se o Fim da Faixa for inferior ao inicio do periodo
   	        //-- Descarta a faixa
	        If ( ::aPreAbo[nFaixa, 02 ] > dPerFim ) .or. ( ::aPreAbo[ nFaixa, 04 ] < dPerIni ) 
	           nFaixa++
	           Loop
	        Endif
	        
	        //-- Armazenas as faixas seleciondas para o periodo solicitado   
            aAdd( ::aPreAboDia, { ::aPreAbo[ nFaixa, 01 ],	::aPreAbo[ nFaixa, 02 ] , ::aPreAbo[ nFaixa, 03 ] ,;
	       						 							::aPreAbo[ nFaixa, 04 ] , ::aPreAbo[ nFaixa, 05 ], ::aPreAbo[ nFaixa, 06 ]  } ) 
	        nFaixa++
	   Enddo
   Endif 

   lRet := !Empty( ::aPreAboDia )    

Endif

return( lRet )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁAddPerHr    Ё Autor ЁMauricio MR           Ё Data Ё26/04/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCalcula Horas e Adiciona Periodo ao Array de Horarios de AponЁ
Ё          Ёtamentos conforme Parametros Informados.                     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁAddPerHr(Parametros)										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRet 								                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method AddPerHr(    nIdDiaApo	,;  //01 -> Identificador do Elemento Diurno no Apo
                    nIdNotApo	,;  //02 -> Identificador do Elemento Noturno no Apo
                    nPosElem	,;  //03 -> Posicao no Elemento do Identificador
                    aApoHr		,;  //04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
                    dDt1		,;	//05 -> Data 1
					nHr1		,;	//06 -> Hora 1
					dDt2		,;	//07 -> Data 2
					nHr2		,;	//08 -> Hora 2
					nHoras		,;	//09 -> <@>Horas Normais Apontadas
					nHorasNot	,;	//10 -> <@>Horas Noturnas Apontadas
					lNoturno	,;	//11 -> Apontar Horas Noturnas
					dDtIni		,;	//12 -> Data Inicial Para a Hora Noturna
					nHrAcNot	,;	//13 -> <@>Horas de Acrescimo Noturno
					nIniHnot	,;	//14 -> Inicio do Horario Noturno
					nFimHnot	,;	//15 -> Final do Horario Noturno
					nMinHnot	,;	//16 -> Minutos do Horario Noturno
					lAcreNot	,;	//17 -> Apenas Acrescimo Noturno
					aPerNot		,;	//18 -> Periodo Horario Noturno
					aPerDia		,;	//19 -> Periodo Horario Diurno 
					lSoma		,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
					lNewAddHor	;   //21 -> Adiciona Periodo como Novo Elemento
				);
	  	class PonVarApon

Local aPer			:= {} 
                       
Local nHorasCalc	:= 0
Local lAcrescPer    := ( ::aApoHr <> Nil  ) 
Local lIdPer		:= ( aPerDia <> Nil )

DEFAULT lSoma 		:= .F.
DEFAULT lNewAddHor 	:= .F.

aPerDia:= If(::lRF0ChkTable, aPerDia, NIL)  

nHorasCalc	:=	::CalcPerHr(	dDt1		,;	//01 -> Data 1
								nHr1		,;	//02 -> Hora 1
								dDt2		,;	//03 -> Data 2
								nHr2		,;	//04 -> Hora 2
								@nHoras		,;	//05 -> <@>Horas Normais Apontadas
								@nHorasNot	,;	//06 -> <@>Horas Noturnas Apontadas
								lNoturno	,;	//07 -> Apontar Horas Noturnas
								dDtIni		,;	//08 -> Data Inicial Para a Hora Noturna
								@nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno 
								nIniHnot	,;	//10 -> Inicio do Horario Noturno
								nFimHnot	,;	//11 -> Final do Horario Noturno
								nMinHnot	,;	//12 -> Minutos do Horario Noturno
								lAcreNot	,;	//13 -> Apenas Acrescimo Noturno
								@aPerNot	,;	//14 -> Periodo Horario Noturno 
								@aPerDia	;	//15 -> Periodo Horario Diurno
					 		)

If ::lRF0ChkTable

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Se nao Identifica Periodos assume o Horario Passado 		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/	
	If !lIdPer
	   aPer:=  		{{	dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2        ,;  //04 -> Hora 2  
						''			;   //05 -> Tipo Periodo ("D"iurno ou "N"oturno)
					}} 
		If lAcrescPer
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Acrescenta Periodos Diurnos e Noturnos no ID Informado	  Ё
			Ё Diurno ou Noturno MUTUAMENTE EXCLUSIVOS					  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/		                 
		       
			If nIdDiaApo <> Nil
				::PutPer(	nIdDiaApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPer		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Else
				::PutPer(	nIdNotApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPer		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Endif					
		Endif	
	Else
	 
	
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Acrescenta Periodos Diurnos e Noturnos nos IDs Informados	  Ё
		Ё Diurno e Noturno SIMULTANEAMENTE							  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/	  
		If lAcrescPer
		                  
		  	If nIdDiaApo <> Nil
				::PutPer(	nIdDiaApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPerDia		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Endif
			
			If nIdNotApo <> Nil		
				::PutPer(	nIdNotApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPerNot		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Endif	
				        	  
	    Endif
	Endif
Endif	
	
/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё ADICIONA as Horas CALCULADAS conforme tipos passados  	  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/	
If lSoma                                   
  
   If nIdDiaApo <> Nil	.AND. nIdNotApo <> Nil	
	  ::aApo[nIdDiaApo, nPosElem]:= SomaHoras(::aApo[nIdDiaApo,nPosElem], nHoras)     
      ::aApo[nIdNotApo, nPosElem]:= SomaHoras(::aApo[nIdNotApo,nPosElem], nHorasNot) 
   ElseIf nIdDiaApo <> Nil 
	      If !lIdPer
	      	 ::aApo[nIdDiaApo, nPosElem]:= SomaHoras(::aApo[nIdDiaApo,nPosElem], nHorasCalc) 							  
	      Else 
		     ::aApo[nIdDiaApo, nPosElem]:= SomaHoras(::aApo[nIdDiaApo,nPosElem], nHoras)     
	      Endif	 
   Else 
	   If !lIdPer
      	  ::aApo[nIdNotApo, nPosElem]:= SomaHoras(::aApo[nIdNotApo,nPosElem], nHorasCalc) 
       Else 
	      ::aApo[nIdNotApo, nPosElem]:= SomaHoras(::aApo[nIdNotApo,nPosElem], nHorasNot) 
       Endif	  
   Endif	
   		
Else 

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё SUBSTITUI as Horas pelas CALCULADAS conforme tipos passados Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/	
   //-- Substitui pelas Horas Calculadas  
   If nIdDiaApo <> Nil	.AND. nIdNotApo <> Nil	
	  ::aApo[nIdDiaApo, nPosElem]:=  nHoras     
      ::aApo[nIdNotApo, nPosElem]:=  nHorasNot
   ElseIf nIdDiaApo <> Nil	
		   If !lIdPer
	      	  ::aApo[nIdDiaApo, nPosElem]:=  nHorasCalc 							  
	       Else 
			  ::aApo[nIdDiaApo, nPosElem]:=  nHoras            
	       Endif	  
   Else 
   	   If !lIdPer
	      ::aApo[nIdNotApo, nPosElem]:=  nHorasCalc
	   Else
	      ::aApo[nIdNotApo, nPosElem]:=  nHorasNot
	   Endif   
   Endif

Endif    							     
              
return( nHorasCalc )
       
/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁCalcPerHr   Ё Autor ЁMauricio MR           Ё Data Ё26/04/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCalcula Horas e Obtem Periodo Diurno					     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁCalcPerHr(Parametros)										 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRet 								                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method CalcPerHr(	dDt1		,;	//01 -> Data 1
					nHr1		,;	//02 -> Hora 1
					dDt2		,;	//03 -> Data 2
					nHr2		,;	//04 -> Hora 2
					nHoras		,;	//05 -> <@>Horas Normais Apontadas
					nHorasNot	,;	//06 -> <@>Horas Noturnas Apontadas
					lNoturno	,;	//07 -> Apontar Horas Noturnas
					dDtIni		,;	//08 -> Data Inicial Para a Hora Noturna
					nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno 
					nIniHnot	,;	//10 -> Inicio do Horario Noturno
					nFimHnot	,;	//11 -> Final do Horario Noturno
					nMinHnot	,;	//12 -> Minutos do Horario Noturno
					lAcreNot	,;	//13 -> Apenas Acrescimo Noturno
					aPerNot		,;	//14 -> Periodo Horario Noturno 
					aPerDia		;	//15 -> Periodo Horario Diurno
				 );
	   class PonVarApon
	  	
Local nHorasCalc

nHorasCalc := fCalHoras(	dDt1				,;	//01 -> Data 1
			  				nHr1				,;	//02 -> Hora 1
							dDt2				,;	//03 -> Data 2
							nHr2				,;	//04 -> Hora 2
							@nHoras				,;	//05 -> <@>Horas Normais Apontadas
							@nHorasNot			,;	//06 -> <@>Horas Noturnas Apontadas
							lNoturno			,;	//07 -> Apontar Horas Noturnas
							dDtIni				,;	//08 -> Data Inicial Para a Hora Noturna  
							@nHrAcNot			,;	//09 -> <@>Horas de Acrescimo Noturno  								
							nIniHnot			,;	//10 -> Inicio do Horario Noturno
	   						nFimHnot			,;	//11 -> Final do Horario Noturno
   							nMinHnot			,;	//12 -> Minutos do Horario Noturno
	   						lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot	 		;	//14 -> Periodo da Hora Noturna
						  )

If aPerDia <> Nil 

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Obtem Periodo Diurno					 			 		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/	
	::GetPerDia(	dDt1		,;	//01 -> Data 1
					nHr1		,;	//02 -> Hora 1
					dDt2		,;	//03 -> Data 2
					nHr2		,;	//04 -> Hora 2				
					aPerNot		,;	//05 -> Periodo da Hora Noturna
					@aPerDia	 ;	//06 -> Periodo da Hora Diurna
			  ) 

Endif

return( nHorasCalc )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁGetPerDia   Ё Autor ЁMauricio MR           Ё Data Ё27/04/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁIdentifica Periodo Diurno de um Horario					     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁGetPerDia(Parametros)			    						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNil 								                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method GetPerDia( dDt1 , nHr1 , dDt2 , nHr2 , aPerNot , aPerDia ) class PonVarApon

Local cIniTurno		:= ''
Local cFimTurno		:= ''
Local cIniNot		:= ''
Local cFimNot		:= ''
Local aHorasCalc	:= {}

DEFAULT aPerDia		:= {}

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Identifica Periodo Diurno							 		  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/	
 //-- Se solicitado registro de horario noturno         
If aPerNot <> Nil     
   cIniTurno := DataHora2Str( dDt1,  nHr1)
   cFimTurno := DataHora2Str( dDt2,  nHr2)
   //-- Se ocorreu horario noturno
   If !Empty(aPerNot) 
      cIniNot	:= DataHora2Str( aPerNot[1,1],  aPerNot[1,2] ) 	      
 	  cFimNot	:= DataHora2Str( aPerNot[1,3],  aPerNot[1,4] ) 	      
      //-- Se horario inicial noturno > de inicio do turno e final noturno == final turno
      //-- Se horario inicial noturno > de inicio do turno e final noturno < final turno
      If ( cIniNot > cIniTurno )
		 If ( cFimNot == cFimTurno )
			 //-- Retorna horario diurno LIMITADO AO INICIO DO NOTURNO
	 	    aHorasCalc	:= RetIniTab( aPerNot[1,1] ,  aPerNot[1,2] , 0.00 )  					         
		    aPerDia		:={{	dDt1						,;	//01 -> Data 1
								nHr1						,;	//02 -> Hora 1
								aHorasCalc[1]				,;	//03 -> Data 2
								aHorasCalc[2]				,;	//04 -> Hora 2 
								cIniTurno					,;
								DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ;						
							};
						   }		
         ElseIf ( cFimNot < cFimTurno )	         
				//-- Retorna horario diurno LIMITADO AO INICIO DO NOTURNO
		        aHorasCalc	:= RetIniTab( aPerNot[1,1] ,  aPerNot[1,2] , 0.00 )  					         
			    aPerDia:=  	{{	dDt1						,;	//01 -> Data 1
								nHr1						,;	//02 -> Hora 1
								aHorasCalc[1]				,;	//03 -> Data 2
								aHorasCalc[2]				,;	//04 -> Hora 2 
								cIniTurno					,;
								DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ;						 
							}}                                            
				//-- Adiciona horario Diurno Complementar ao FINAL DO NOTURNO
				aHorasCalc	:= RetFimTab( aPerNot[1,3] ,  aPerNot[1,4] , 0.01 )  
												 
				aAdd(aPerDia,{	aHorasCalc[1]			,;	//01 -> Data 1
								aHorasCalc[2]			,;	//02 -> Hora 1
								dDt2					,;	//03 -> Data 2
								nHr2					,;	//04 -> Hora 2  
								DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ,;						 
								cFimTurno				;
						     }							;
					)	     
         Endif
      ElseIf ( cIniNot == cIniTurno )
      	  //-- Se horario inicial noturno = ao inicio do turno e final noturno == final turno
		  //-- Se horario inicial noturno = ao inicio do turno e final noturno < final turno
          If ( cFimNot == cFimTurno )	         
              //-- Horario Realizado NOTURNO
        	  aPerDia:= {}
          ElseIf ( cFimNot < cFimTurno )	         
                //-- Retorna horario diurno LIMITADO AO FIM DO NOTURNO
		        aHorasCalc	:= RetIniTab( aPerNot[1,1] ,  aPerNot[1,2] , 0.00 )  					         
				    aPerDia	:= {{	aHorasCalc[1]	,;	//01 -> Data 1
									aHorasCalc[2]	,;	//02 -> Hora 1
									dDt2			,;	//03 -> Data 2
									nHr2			,;	//04 -> Hora 2 
									DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ,;						 
									cFimTurno		; 
							    }} 
          Endif
      Endif    
   Else  
        //-- Retorna horario diurno
	    aPerDia:=  	{{	dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2		,;	//04 -> Hora 2  
						cIniTurno 	,;						
					    cFimTurno 	;
					}}
   Endif
Else
   //-- Retorna horario diurno
   aPerDia:=  	{{	dDt1		,;	//01 -> Data 1
					nHr1		,;	//02 -> Hora 1
					dDt2		,;	//03 -> Data 2
					nHr2		,;	//04 -> Hora 2 
					cIniTurno 	,;						
				    cFimTurno 	; 
				}}
Endif             

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁPutPer      Ё Autor ЁMauricio MR           Ё Data Ё27/04/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁAdiciona ou Substitui Periodos para um Horari			     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁPutPer(Parametros)			    							 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNil 								                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method PutPer( nIdApo , nPosElem , aPer , lNewAdd ) class PonVarApon

Local nI		:= 0
Local nLenaPer	:= Len(aPer)
 
For nI:=1 To nLenaPer
	//-- Se Existir Horario para Acrescentar
	If !Empty(aPer[nI])
		If lNewAdd
			//-- Adiciona Periodo de Horas
			If Empty(::aApoHr[nIdApo,nPosElem])
				::aApoHr[nIdApo,nPosElem] := {aClone( aPer[nI] )} 
			Else
				aAdd(  ::aApoHr[nIdApo,nPosElem], aClone( aPer[nI] )  )  
			Endif	
		Else 
	    	//-- Substitui Periodo de Horas 
	    	::aApoHr[nIdApo,nPosElem] := {aClone( aPer[nI] )} 
		Endif
	Endif
Next nI

return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁAlocaPer    Ё Autor ЁMauricio MR           Ё Data Ё30/04/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁAloca Horarios de Um Apontamento para Outro (Copia)		     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁAlocaPer(Parametros)			   							 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNil 								                   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method AlocaPer(nIdOrigem, nItOrigem, nIdDestino, nItDestino, lAddNew) 	class PonVarApon

//-- UM ou outro ITEM passado serve de padrao para outro
DEFAULT nItOrigem	:= nItDestino
DEFAULT nItDestino	:= nItOrigem

//-- Aloca Horarios de Apontamento entre os Elementos passados 
::PutPer(	nIdDestino								,;  //01 -> Identificador do Elemento no Apo
            nItDestino								,;  //02 -> Posicao no Elemento do Identificador
            aClone(::aApoHr[nIdOrigem, nItOrigem]) ,;
            lAddNew								 	;
        )

return( NIL )    

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
Ёmethod    ЁIdPreAbo	Ё Autor ЁMauricio MR           Ё Data Ё03/05/2004Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁIdentifica os Horarios e Calcula as Horas Abonadas			 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnHorTot (Total de Horas Abonadas)                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method IdPreAbo(  		dDtGer								,;	//01 -> Data da Geracao
						nIdentificador						,;  //02 -> Elemento do Apontamento
						nIndice								,;  //03 -> Item do Elemento
						cEvento								,;	//04 -> Codigo do Evento
						cCustoGrv							,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc							,;	//06 -> Tipo de Marcacao
						lAcumula							,;	//07 -> True para Acumular as Horas
						cPerApur							,;	//08 -> Periodo de Apuracao
						nTolera								,;	//09 -> Tolerancia
						cTipoArred				 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado  
						cFuncaoGrv							,;  //11 -> Funcao a ser Gravada
						cDepto								,;  //12 -> Depto para gravacao
						cPosto								,;  //13 -> Posto para gravacao
						cProcesso							,;  //14 -> Processo para Gravacao
						cPeriodo							,;  //15 -> Periodo para Gravacao
						cRoteiro							,;  //16 -> Processo para Gravacao								
						cNumPagto							 ;  //17 -> NumPagto para Gravacao						
					  );
	   class PonVarApon					  

Local aHoras	:= {} 
Local aHrAbono	:= {}
Local cCodAbo	:= ''
Local cLimIni	:= '' 
Local cLimFim	:= '' 
Local cHorIni	:= ''
Local cHorFim	:= '' 
Local nHoras	:= 0   
Local nHorTot	:= 0   

//-- Controle de Loop
Local nApoHr	:= 0
Local nX		:= 0  
Local nPreAbo	:= 0
Local nY		:= 0 


If (::lRF0ChkTable)

	aHoras 	:= aClone(::aApoHr[nIdentificador, nIndice])
	nApoHr	:=Len(aHoras)
	nPreAbo	:=Len(::aPreAboDia)
	
	//-- Corre todos os Horarios que Geraram o Apontamento
	For nX:=1 To nApoHr 
	
		//-- Converte Limites dos Horarios que geraram o Apontamento
		cHorIni := DataHora2Str( aHoras[nX, 1]  	,  aHoras[nX, 2] )
		cHorFim := DataHora2Str( aHoras[nX, 3]		,  aHoras[nX, 4] )
		
		//-- Corre Todas as Faixas de Pre-Abonos do Dia 
		For nY := 1 to nPreAbo                     
		    //-- Codigo do Abono
		    cCodAbo	:= 	::aPreAboDia[nY, 1]
			//-- Converte Limites dos Horarios de Pre-Abonos
			cLimIni := DataHora2Str( ::aPreAboDia[nY, 2]  	,  ::aPreAboDia[nY, 3] )
			cLimFim := DataHora2Str( ::aPreAboDia[nY, 4]	,  ::aPreAboDia[nY, 5] )
		
			// 1)   Desconsidera Horarios que:
			//	 a) Terminam antes da faixa de Pre-Abono ou
			//   b) Iniciam depois da faixa de Pre-Abono
			If ( (cHorFim <= cLimIni) .OR. (cHorIni >= cLimFim) )
			   Loop
			Endif
				
			// 2) Se o Hora Inicial da Marcacao ocorrer no inicio ou apos o inicio da faixa de horarios
			// Calcula a qtde de horas entre a Hora inicial da Marcacao e a hora final da marcacao ou
			// o fim da faixa de horarios 
			If cHorIni >= cLimIni 
			    // 2.1) Se a Hora Final da Marcacao ocorre  antes do fim ou no fim da faixa de horarios
			    If cHorFim <= cLimFim
			    	// Calcula a Qtde de Horas entre a Hora inicial e Final da Marcacao 
			       nHoras:= fCalHoras(	aHoras[nX, 1]		,;
			         					aHoras[nX, 2]		,;
			         					aHoras[nX, 3]		,;
			         					aHoras[nX, 4]		,;
			         					NIL     			,;	//05 -> <@>Horas Normais Apontadas
										NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
										.T.					,;	//07 -> Apontar Horas Noturnas
										aHoras[nX, 1]		,;	//08 -> Data Inicial Para a Hora Noturna
										NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
										::nIniHnot			,;	//10 -> Inicio do Horario Noturno
										::nFimHnot			,;	//11 -> Final do Horario Noturno
										::nMinHnot			,;	//12 -> Minutos do Horario Noturno
										NIL     			,;	//13 -> Apenas Acrescimo Noturno
										NIL					 ;	//14 -> Periodo da Hora Noturna
									  )  

				   aAdd(aHrAbono,{ cCodAbo, nHoras, aHoras[nX, 1],  aHoras[nX, 2], aHoras[nX, 3], aHoras[nX, 4], ::aPreAboDia[nY, 6] })
				Else
				// 2.2) Se a Hora Final da Marcacao ocorre apos o fim da faixa de horarios
					// Calcula a Qtde de Horas entre aHora Inicial da Marcacao e o fim da Faixa 
				   nHoras:= fCalHoras(	aHoras[nX, 1]		,;
				     					aHoras[nX, 2]		,;
								      	::aPreAboDia[nY, 4]	,;
				      				  	::aPreAboDia[nY, 5]	,;
									   	NIL     			,;	//05 -> <@>Horas Normais Apontadas
										NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
										.T.					,;	//07 -> Apontar Horas Noturnas
										aHoras[nX, 1]		,;	//08 -> Data Inicial Para a Hora Noturna
										NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
										::nIniHnot			,;	//10 -> Inicio do Horario Noturno
										::nFimHnot			,;	//11 -> Final do Horario Noturno
										::nMinHnot			,;	//12 -> Minutos do Horario Noturno
										NIL     			,;	//13 -> Apenas Acrescimo Noturno
										NIL					 ;	//14 -> Periodo da Hora Noturna
									  )   				  
				   
	   			   aAdd(aHrAbono,{ cCodAbo, nHoras, aHoras[nX, 1],  aHoras[nX, 2], ::aPreAboDia[nY, 4], ::aPreAboDia[nY, 5], ::aPreAboDia[nY, 6] })
				Endif  
			// 3) Se a Hora Inicial da Marcacao ocorre antes do Inicio da faixa de horarios
			// Calcula a Qtde de horas entre o inicio da Faixa e a hora final da marcacao ou 
			// o fim da faixa de horarios
			ElseIf (cHorIni < cLimIni) .AND. (cHorFim > cLimIni) 
			    
			    If cHorFim >= cLimFim
				// 3.1) Se a Hora Final da Marcacao ocorre no fim ou apos o fim da faixa de horarios
				//  Calcula a Qtde de Horas entre o inicio da Faixa e o Fim da Faixa
				   nHoras:=fCalHoras(	::aPreAboDia[nY, 2],;
				     					::aPreAboDia[nY, 3],;
				     					::aPreAboDia[nY, 4]	,;
				     					::aPreAboDia[nY, 5],;
				     					NIL     			,;	//05 -> <@>Horas Normais Apontadas
										NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
										.T.					,;	//07 -> Apontar Horas Noturnas
										::aPreAboDia[nY, 2]	,;	//08 -> Data Inicial Para a Hora Noturna
										NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
										::nIniHnot			,;	//10 -> Inicio do Horario Noturno
										::nFimHnot			,;	//11 -> Final do Horario Noturno
										::nMinHnot			,;	//12 -> Minutos do Horario Noturno
										NIL     			,;	//13 -> Apenas Acrescimo Noturno
										NIL					 ;	//14 -> Periodo da Hora Noturna
									  )  

				   aAdd(aHrAbono,{cCodAbo, nHoras, ::aPreAboDia[nY, 2], ::aPreAboDia[nY, 3], ::aPreAboDia[nY, 4], ::aPreAboDia[nY, 5],  ::aPreAboDia[nY, 6] })			       				    
				// 3.2) Se a Hora Final da Marcacao ocorre  antes do fim da faixa de horarios
			    ElseIf cHorFim < cLimFim 
			       // Calcula a Qtde de Horas entre o inicio da Faixa e a Hora Final da Marcacao
			       nHoras:=fCalHoras(	::aPreAboDia[nY, 2]	,;
			        				 	::aPreAboDia[nY, 3],;
			        				 	aHoras[nX, 3]		,;
			        				 	aHoras[nX, 4]		,;
			        				 	NIL     			,;	//05 -> <@>Horas Normais Apontadas
										NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
										.T.					,;	//07 -> Apontar Horas Noturnas
										::aPreAboDia[nY, 2]	,;	//08 -> Data Inicial Para a Hora Noturna
										NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
										::nIniHnot			,;	//10 -> Inicio do Horario Noturno
										::nFimHnot			,;	//11 -> Final do Horario Noturno
										::nMinHnot			,;	//12 -> Minutos do Horario Noturno
										NIL     			,;	//13 -> Apenas Acrescimo Noturno
										NIL					 ;	//14 -> Periodo da Hora Noturna
									  )  
			        				 
				   aAdd(aHrAbono,{cCodAbo, nHoras, ::aPreAboDia[nY, 2], ::aPreAboDia[nY, 3], aHoras[nX, 3],  aHoras[nX, 4], ::aPreAboDia[nY, 6] } )			       
				Endif
			Endif                   
		 			
			//-- Acumula as Horas Calculadas
	        nHorTot		:=SomaHoras( nHorTot	,	nHoras	)
		Next nY
	Next nX	
	
	If !Empty(nHorTot)				  
		fGeraResAbo( 	dDtGer						,;	//01 -> Data da Geracao
						cEvento						,;	//02 -> Codigo do Evento             
						cCustoGrv					,;	//03 -> Centro de Custo a ser Gravado						
						cTipoMarc					,;	//04 -> Tipo de Marcacao 
						cPerApur					,;	//05 -> Periodo de Apuracao  
						nHorTot						,;  //06 -> Total de Horas Abonadas 
						aHrAbono                    ,;  //07 -> Array de Horarios de Abonos
						::aResAbo					,;	//08 -> Array Abonos para Resultados 
						cFuncaoGrv                  ,;  //09 -> Funcao a ser Gravada
						cDepto						,;  //10 -> Depto para gravacao
						cPosto						,;  //11 -> Posto para gravacao
						cProcesso					,;  //12 -> Periodo para Gravacao
						cRoteiro					,;  //13 -> Roteiro  para Gravacao			
						cPeriodo					,;  //14 -> Periodo para Gravacao
						cNumPagto					 ;  //15 -> NumPagto para Gravacao						
					 )
	Endif 

Endif
	   
fGeraRes(	::aResult								,;	//01 -> Array com os Resultados do Dia
			dDtGer									,;	//02 -> Data da Geracao
			::aApo[nIdentificador,nIndice]			,;	//03 -> Numero de Horas Resultantes
			cEvento					  				,;	//04 -> Codigo do Evento
			cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
			cTipoMarc								,;	//06 -> Tipo de Marcacao
			lAcumula								,;	//07 -> True para Acumular as Horas
			cPerApur								,;	//08 -> Periodo de Apuracao
			nTolera									,;	//09 -> Tolerancia
			cTipoArred				 				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
			Nil										,;  //11 -> Substitui a(s) Hora(s) Existente(s)
			cFuncaoGrv								,;  //12 -> Funcao a ser Gravada
			cDepto									,;  //13 -> Depto para gravacao
			cPosto									,;  //14 -> Posto para gravacao
			cProcesso								,;  //15 -> Processo para Gravacao
			cRoteiro								,;  //16 -> Roteiro para Gravacao								
			cPeriodo								,;  //17 -> Periodo para Gravacao
			cNumPagto								;   //18 -> NumPagto para Gravacao	
		 ) 
  	   	 
return( nHorTot )

/*/
зддддддддддбдддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFuncao    ЁfGeraResAbo  ЁAutor ЁEquipe Advanced RH   Ё Data Ё04/05/2004Ё
цддддддддддедддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁGerar Array Abonos do Result 							    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >								  	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >								  	Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function fGeraResAbo(	dDtGer						,;	//01 -> Data da Geracao
								cEvento						,;	//02 -> Codigo do Evento
								cCusto   					,;	//03 -> Centro de Custo a ser Gravado
								cTpMarc						,;	//04 -> Tipo de Marcacao 
								cPeriodo					,;  //05 -> Periodo de Apuracao  
								nHoras						,;  //06 -> Total de Horas Abonadas
								aHrAbono                    ,;  //07 -> Array de Horarios de Abonos 
								aResAbo						,;  //08 -> Array Abonos para Resultados 
								cFuncao						,;  //09 -> Funcao a ser Gravada
								cDepto						,;  //10 -> Depto para gravacao
								cPosto						,;  //11 -> Posto para gravacao
								cProcesso					,;  //12 -> Processo para Gravacao
								cRoteiro					,;  //13 -> Roteiro para Gravacao								
								cPeriodo					,;  //14 -> Periodo para Gravacao
								cNumPagto					 ;  //15 -> NumPagto para Gravacao					
					 		)
Local aAux			:= {}
Local bAsc			:= {||NIL}
Local nRes			:= 0
Local nLenaHrAbonos	:= 0  
Local nLenHorarios	:= 0   
Local nX			:= 0  

DEFAULT cEvento 	:= ""
DEFAULT cPeriodo	:= ""

IF !Empty( nHoras )
 
	DEFAULT dDtGer  	:= dDataBase
	DEFAULT cCusto  	:= Space( TamSx3( "PC_CC     " )[1] )
	DEFAULT cTpMarc		:= Space( TamSx3( "PC_TPMARCA" )[1] )
	DEFAULT cFuncao  	:= Space( GetSx3Cache( "PC_CODFUNC"	, "X3_TAMANHO" ) )
	DEFAULT cDepto   	:= Space( GetSx3Cache( "PC_DEPTO"	, "X3_TAMANHO" ) )
	DEFAULT cPosto   	:= Space( GetSx3Cache( "PC_POSTO"	, "X3_TAMANHO" ) )
	DEFAULT cProcesso	:= Space( GetSx3Cache( "PC_PROCES"  , "X3_TAMANHO" ) )
	DEFAULT cPeriodo 	:= Space( GetSx3Cache( "PC_PERIODO"	, "X3_TAMANHO" ) )
	DEFAULT cRoteiro 	:= Space( GetSx3Cache( "PC_ROTEIRO"	, "X3_TAMANHO" ) )
	DEFAULT cNumPagto 	:= Space( GetSx3Cache( "PC_NUMPAG"  , "X3_TAMANHO" ) )
		
	bAsc	:= { |x| 	x[ARESABO_DATA] == dDtGer 			.and. ;
						x[ARESABO_CODIGO] == cEvento 		.and. ;
						x[ARESABO_CUSTO] == cCusto 			.and. ;
						x[ARESABO_TPMARCA] == cTpMarc 		.and. ;
						x[ARESABO_FUNCAO] == cFuncao 		.and. ;
						x[ARESABO_DEPTO] == cDepto	 		.and. ;						
						x[ARESABO_POSTO] == cPosto	 		.and. ;
						x[ARESABO_PROCESSO] == cProcesso	.and. ;
						x[ARESABO_ROTEIRO] == cRoteiro 		.and. ;						
						x[ARESABO_NUM_PAGTO] == cNumPagto	;						
				}
	nRes	:= 0
    
	//--Obtem o Tamanho do Array de Horarios a acrescentar
	nLenaHrAbonos := Len( aHrAbono ) 
	
	IF  (( nRes := aScan( aResAbo , bAsc  ) ) > 0 )  

		aResAbo[ nRes , ARESABO_HORAS_TOTAIS] := SomaHoras( aResAbo[ nRes , ARESABO_HORAS_TOTAIS ] , nHoras )

   	Else

		//-- Adiciona Novo  Cabecalho de Abonos
		aAdd( aResAbo , Array( ELEMENTOS_PRE_ABONOS ) )
		nRes := Len( aResAbo )

		aResAbo[ nRes , ARESABO_CODIGO		] := cEvento			
		aResAbo[ nRes , ARESABO_DATA 		] := dDtGer	
		aResAbo[ nRes , ARESABO_CUSTO		] := cCusto	 
		aResAbo[ nRes , ARESABO_TPMARCA		] := cTpMarc			
		aResAbo[ nRes , ARESABO_HORAS_TOTAIS] := nHoras  
		aResAbo[ nRes , ARESABO_FUNCAO] 	  := cFuncao 
		aResAbo[ nRes , ARESABO_DEPTO]	 	  := cDepto
		aResAbo[ nRes , ARESABO_POSTO] 		  := cPosto
		aResAbo[ nRes , ARESABO_PROCESSO] 	  := cProcesso
		aResAbo[ nRes , ARESABO_PERIODO] 	  := cPeriodo
		aResAbo[ nRes , ARESABO_ROTEIRO] 	  := cRoteiro
		aResAbo[ nRes , ARESABO_NUM_PAGTO] 	  := cNumPagto
			
 		//-- Cria Elemento para Acrescentar Horarios
		aResAbo[ nRes , ARESABO_ABONOS 		]:= {}
			
	Endif

    //-- Acrescenta Abonos                          
	For nX:= 1 To nLenaHrAbonos 

		aAux := Array( ELEMENTOS_AABONOS + 1) 
		
		aAux[ AABONOS_DATA	 		] := dDtGer	
		aAux[ AABONOS_CODIGO 		] := aHrAbono[ nX, AHRABONO_CODIGO_ABONO ]
		aAux[ AABONOS_HORAS_ABO		] := aHrAbono[ nX, AHRABONO_HORAS_ABONO  ]		
		aAux[ AABONOS_CC			] := cCusto										
		aAux[ AABONOS_TPMARCA		] := cTpMarc									
		aAux[ AABONOS_HORAS_INI		] := aHrAbono[ nX, AHRABONO_HORA_INICIAL ]		
		aAux[ AABONOS_HORAS_FIM		] := aHrAbono[ nX, AHRABONO_HORA_FINAL   ]
		aAux[ AABONOS_CODEVE      	] := cEvento 
		aAux[ AABONOS_RECNO			] := 0
		aAux[ AABONOS_FLAG			] := 'P'
		aAux[ AABONOS_FUNCAO		] := cFuncao		
		aAux[ AABONOS_DEPTO			] := cDepto
		aAux[ AABONOS_POSTO			] := cPosto
		aAux[ AABONOS_PROCESSO		] := cProcesso	
		aAux[ AABONOS_PERIODO		] := cPeriodo
		aAux[ AABONOS_ROTEIRO		] := cRoteiro
		aAux[ AABONOS_NUM_PAGTO		] := cNumPagto
		aAux[ ELEMENTOS_AABONOS + 1	] := aHrAbono[ nX, AHRABONO_RECNO_FAIXA   ] 
		
		
		aAdd(aResAbo[ nRes , ARESABO_ABONOS ] , aAux )
		
	Next nX
EndIF

return( NIL )

/*/
зддддддддддбддддддддддддддддддддддбдддддддбддддддддддддбддддддбдддддддддддд©
Ёmethod    ЁSaidaAntPreAbo		  Ё Autor ЁMauricio MR Ё Data Ё23/04/2004  Ё
цддддддддддеддддддддддддддддддддддадддддддаддддддддддддаддддддадддддддддддд╢
ЁDescri┤└o ЁCalcula Horarios de Saida Antecipada					       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁPreAboSaidaAntecipada(lRF0ChkTable,aApo,aApoHr,nMarcTab,dData) Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                  	   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNil                                                    	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo													  	   Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
method SaidaAntPreAbo() class PonVarApon

Local aHr   	:= {}
Local aHr2   	:= {}

IF ( ::lRF0ChkTable )

	//-- Cria um Unico Array com todos os horarios realizados do Dia
	aEval( ::aApoHr[ ::oaApo:HrTrbEfeti ] , { |x| IF( !Empty( x ) , aAdd( aHr , x ) , NIL ) } ) 
	aEval( ::aApoHr[ ::oaApo:HrTrbNotEf ] , { |x| IF( !Empty( x ) , aAdd( aHr , x ) , NIL ) } ) 

	IF !Empty( aHr )

		//-- Coloca o ultimo horario realizado como o primeiro elemento
		aSort( aHr , NIL , NIL , { |x,y| ( DataHora2Str( x[ 1 , 1 ] , x[ 1 , 2 ] ) > DataHora2Str( y[ 1 , 1 ] , y[ 1 , 2 ] ) ) } )
		
		//-- O Horario de Pre-Abono para a saida antecipada para horario movel sera o ultimo horario realizado
		//-- acrescido das horas nao realizadas.
		aHr2	:= RetFimTab( aHr[ 1 , 1 , 1 ] , aHr[ 1 , 1 , 4 ] , ::aApo[ ::oaApo:SaidaAnte, ::nTotMarcTab ] )
		
		::AddPerHr(;
						::oaApo:SaidaAnte,;
						NIL,;
						::nTotMarcTab,;
						@::aApoHr,;
						aHr[1,1,1],;
						aHr[1,1,4],;
						aHr2[1],;
						aHr2[2],;
						NIL,;
						NIL,;
						NIL,;
						::dData;
					)

		//-- Aponta Saida Antecipada Antes do Intervalo  
		::AddPerHr(	::oaApo:SaidaAnte	,;//01 -> Identificador do Elemento Diurno no Apo
					NIL					,;//02 -> Identificador do Elemento Noturno no Apo
					::nTotMarcTab		,;//03 -> Posicao no Elemento do Identificador
					::aApoHr			,;//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
					aHr[1,1,1]			,;//05 -> Data 1
					aHr[1,1,4]			,;//06 -> Hora 1
					aHr2[1]				,;//07 -> Data 2
					aHr2[2]				,;//08 -> Hora 2
					NIL					,;//09 -> <@>Horas Normais Apontadas
					NIL					,;//10 -> <@>Horas Noturnas Apontadas
					::lHnotSai			,;//11 -> Apontar Horas Noturnas
					::dData				,;//12 -> Data Inicial Para a Hora Noturna
					NIL					,;//13 -> <@>Horas de Acrescimo Noturno
					::nIniHnot			,;//14 -> Inicio do Horario Noturno
					::nFimHnot			,;//15 -> Final do Horario Noturno
					::nMinHnot			,;//16 -> Minutos do Horario Noturno
					::lAcreNot			 ;//17 -> Apenas Acrescimo Noturno
				 )
	EndIF

EndIF

return( NIL )