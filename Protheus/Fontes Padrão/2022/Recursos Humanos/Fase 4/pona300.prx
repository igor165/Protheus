#INCLUDE "PONA300.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"
Static lValid	:= .T.
Static lEncerra	:= .F.

  
  
   
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONA300       ³ Autor ³  Mauricio MR     ³ Data ³26/10/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Manutencao de HE Autorizadas    				 			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Ponm310                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Program.  ³ Data	  ³ BOPS ³  Motivo da Alteracao   				      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³MauricioMR³10/01/03³      ³ Inclusao de chamada a Geracao Coletiva     ³±±
±±³MauricioMR³26/02/03³      ³ Verificacao do Periodo de Apontamento no   ³±±
±±³          ³        ³      ³ carregamento das faixas de horarios.       ³±± 
±±³MauricioMR³08/04/03³      ³ Criada a Funcao AcertaSX3() para incluir,  ³±±
±±³          ³        ³      ³ via sistema, as validacoes que nao podem   ³±±
±±³          ³        ³      ³ ser realizadas pelo configurador.          ³±±
±±³MauricioMR³17/04/03³      ³ Complementacao de validacao do AcertaSX3() ³±±
±±³MauricioMR³18/04/03³      ³ Obtencao das Faixas de Horas pela Data de  ³±±
±±³          ³        ³      ³ referencia.                                ³±± 
±±³MauricioMR³10/07/03³Acerto³ Se nao existir lancamento no dia, adiciona ³±±
±±³          ³        ³      ³ faixas no array principal.                 ³±± 
±±³MauricioMR³25/08/03³------³ Substituicao de Header por Protheus.ch     ³±± 
±±|Marinaldo ³21/04/04³Melhor³Tratamento nos Lock dos Registros e Delete  |±± 
±±º=======================================================================º±± 
±±º                         *** Versao 9.12***                            º±± 
±±º=======================================================================º±± 
±±³Luiz      |30/11/06³Melhor³ Inclusao da funcao MenuDef() para          ³±±  
±±³Gustavo   |--------³------³ versao 9.12                                ³±± 
±±º=======================================================================º±± 
±±º                         *** Versao 11.5***                            º±± 
±±º=======================================================================º±± 
±±ºEmerson   ³31/12/10³29618/³Ajuste para nova interface 11. Com a        º±±
±±ºCampos    ³        ³  2010³aplicação do parametro MV_ECMFTPP que       º±±
±±º          ³        ³      ³afirma ser a versão 11.5 do Protheus        º±±
±±³Glaucia C.³16/06/11³014420³Readequacao das telas para diversas         ³±± 
±±³Messina   ³        ³2011  ³resolucoes. SDRCGE                          ³±± 
±±³Luis Artuso04/07/14³018237³Ajuste na validacao de data inicial/final.  ³±± 
±±³          ³        ³2014  ³                                            ³±± 
±±³Luis		 ³23/07/14³21539 ³Ao incluir uma faixa, a rotina emitia aviso ³±± 
±±³Artuso    ³        ³2014  ³informando que o registro ja existe ao con- ³±±
±±³          ³        ³      ³firmar a inclusao. Rotina ajustada para emi-³±±
±±³          ³        ³      ³tir o aviso apenas ao efetuar alteracao.    ³±±
±±³Renan B.  ³15/02/16³TUHFDX³Ajuste para incluir um lançamento corretamen³±±
±±³          ³        ³      ³te, sem gerar error.log.                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

 
Function PONA300(cChamada) 

Local aArea			:= GetArea()
Local aAreaSPT		:= {}
Local aIndex		:= {}
Local cFiltra		:= "" 
Local dPerIniPar	:= Ctod("//")
Local dPerFimPar	:= Ctod("//")

Private bFiltraBrw	:= { || NIL }
Private cProg		:= IF( cChamada == NIL , FunName() , cChamada )
Private dPerIni     := Ctod("//")
Private dPerFim     := Ctod("//")
Private oCalendError

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Cria objeto para controle de erros					           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
oCalendError:= PONERROR():New() 
oCalendError:InitLogErrors(LoadCalError()) //Carrega tabela de erros

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se o Modo de Acesso do SPB e SRA foram iguais e se este  ulti³
³mo nao estiver vazio e Se o Periodo Estiver em Aberto.                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ValidArqPon() .and. ChkVazio("SRA") .and. CheckPonMes(@dPerIni,@dPerFim,.F.,.T.,.F.)


	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa Variaveis Staticas no Apontamento              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	PonDestroyStatic()
	
	aAreaSPT := SPT->( GetArea() )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Declara Variaveis que Serao Utilizadas no Apontamento       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Private cCadastro   := OemToAnsi( STR0001 ) // "Manuten‡„o de Horas Extras Autorizadas"

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Array contendo as Rotinas a executar do programa      ³
	³ ----------- Elementos contidos por dimensao ------------     ³
	³ 1. Nome a aparecer no cabecalho                              ³
	³ 2. Nome da Rotina associada                                  ³
	³ 3. Usado pela rotina                                         ³
	³ 4. Tipo de Transa‡„o a ser efetuada                          ³
	³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	³    2 - Simplesmente Mostra os Campos                         ³
	³    3 - Inclui registros no Bancos de Dados                   ³
	³    4 - Altera o registro corrente                            ³
	³    5 - Remove o registro corrente do Banco de Dados          ³
	³    6 - Legenda                                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Private aRotina := MenuDef() // ajuste para versao 9.12 - chamada da funcao MenuDef() que contem aRotina

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cFiltra		:= ChkRh( cProg , "SRA" , "1" )
	bFiltraBrw 	:= { || FilBrowse( "SRA" , @aIndex , @cFiltra ) }
	Eval( bFiltraBrw )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Chamada a mBrowse														 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	mBrowse( 6, 1,22,75,"SRA",,,,,,fCriaCor() )

    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	EndFilBrw( "SRA" , aIndex )

	RestArea( aAreaSPT )
	
EndIF

RestArea( aArea )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Pn300Atu  ³ Autor ³Mauricio MR            ³ Data ³26/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300Atu(ExpC1,ExpN1,ExpN2)                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ ExpC1 = Alias do arquivo                                   ³
³          ³ ExpN1 = Numero do registro                                 ³
³          ³ ExpN2 = Numero da opcao selecionada                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ Pona300                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn300Atu(cAlias,nReg,nOpcX)

Local aAreaSRA			:= SRA->( GetArea() )
Local aRecno			:= {}
Local aNotFields		:= {"PT_FILIAL","PT_MAT"}
Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjSize			:= {}
Local aObjCoords		:= {}

Local aAdv1Size			:= {}
Local aInfo1AdvSize		:= {}
Local aObj1Size			:= {}
Local aObj1Coords		:= {}

Local aAdv2Size			:= {}
Local aInfo2AdvSize		:= {}
Local aObj2Size			:= {}
Local aObj2Coords		:= {}

Local aAdv3Size			:= {}
Local aInfo3AdvSize		:= {}
Local aObj3Size			:= {}
Local aObj3Coords		:= {}

Local aKeys				:= GetKeys()
Local bSet15			:= { ||nopcA:=1,IF(oGet:TudoOk(),(Pn300GetaCols(@aCols,@aArrayMain,aNotFields,,,nOpcX,.T.),oDlg:End()),(nOpcA:=0,.T.))}
Local bSet24			:= { ||oDlg:End() }
Local bSvSet15			:= { || NIL }
Local bSvSet24			:= { || NIL }
Local bChange			:= { || NIL }
Local bNIL				:= { || NIL }
Local cMat				:= SRA->RA_MAT
Local cNome				:= SRA->RA_NOME
Local cPrefix			:= ( PrefixoCpo( "SPT" )  + "_" )
Local nX				:= 0.00
Local nLenX				:= 0.00
Local nCnt		  		:= 0.00
Local nOpcA				:= 0.00
Local nPosFlag			:= 0.00
Local nPosApon			:= 0.00
Local nFatLstBox		:= 0.00
Local oDlg
Local oGet
Local oFont
Local oLinhas
Local oGroup
Local aButtons			:= {}

Private aArrayMain		:= {}
Private aArrayAnt		:= {}
Private aArrayClone		:= {}
Private aLastApo		:= {}
Private aElem			:= {}
Private aListBox		:= {}
Private aCaleList		:= {}  //-- Lista Calendario da DataRef do aCols   
Private aVirtual		:= {}
Private aHeader			:= Array( 0 )
Private aHeaderSP8		:= {}
Private aCols			:= {}
Private aCodigos    	:= {}
Private aTabPadrao  	:= {}
Private aTabCalend  	:= {}
Private aTurnos			:= {}
Private aMarcacoes		:= {}
Private aResult			:= {}
Private cFiliAnt		:= ""
Private Continua		:= .F.
Private lGeraAuto		:= .F.
Private lP8PGIniCa		:= .T.
Private nUsadoSP8		:= 0.00
Private nUsado			:= 0.00
Private nSvUsado		:= 0.00
Private nSvnAt			:= 1.00
Private olBox

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Seta o periodo atual											³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Private oPeriodo	:= RHPERIODO():New()

SX3->(dbSetOrder(1))

Begin Sequence    
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas de Excecoes do Funcionario Antes da   ³
	³montagem do Calendario. Temos que realizar nesse momento pois ³
	³se deixarmos no 2o bloqueio abaixo, o Calendario podera ser di³
	³ferente em virtude de novas excecoes de outra sessao dessa ro ³
	³rotina.                                                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pona300Locks( nOpcX , 'SPT', {} )
       Break
    Endif
    
    oPeriodo:cProcesso := SRA->RA_PROCES
	oPeriodo:GetPer() 

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Calendario do Periodo Para o Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If SRA->( !CriaCalend(	dPerIni		,; //01 -> Data Inicial do Periodo
			 				dPerFim		,; //02 -> Data Final do Periodo
							RA_TNOTRAB	,; //03 -> Turno Para a Montagem do Calendario
							RA_SEQTURN	,; //04 -> Sequencia Inicial para a Montagem Calendario
							@aTabPadrao	,; //05 -> Array Tabela de Horario Padrao
							@aTabCalend	,; //06 -> Array com o Calendario de Marcacoes
							RA_FILIAL	,; //07 -> Filial para a Montagem da Tabela de Horario
							RA_MAT		,; //08 -> Matricula para a Montagem da Tabela de Horario
							RA_CC		,; //09 -> Centro de Custo para a Montagem da Tabela
							@aTurnos	,; //10 -> Array com as Trocas de Turno
							NIL			,; //11 -> Array com Todas as Excecoes do Periodo
							NIL	 		,; //12 -> Se executa Query para a Montagem da Tabela Padrao
							.F.			,; //13 -> Se executa a funcao se sincronismo do calendario
							.F.			,; //14 -> Se Forca a Criacao de Novo Calendario
							NIL  		,; //15 -> Array com marcacoes para tratamento de Turnos Opcionais
							.F.  		,; //16 -> .T. Determina a Criacao/Carga do Calendario Fisico
							NIL			,; //17 -> .T. Caso exista calendario fisico 
							NIL			,; //18 -> Data inicial do calendario fisico
							NIL			,; //19 -> Data final do calendario fisico 
							.F.			,; //20 -> .T. determina que o calendario sera gravado no caso de nao existir
							.F.		 	 ; //21 -> .T. determina que a rotina chamadora eh a Geracao de Calendarios (PONM400)
						);
			)			 
		oCalendError:ShowErrors()
		Break
	EndIf		
	
    
    //-- IMPORTANTE: O cabecalho e o acols de Marcacoes serao utilizados para a
    //--             montagem e consulta do Calendario do Periodo de Apontamento 
    //--             em aberto.
    	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o cabecalho de Marcacoes                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aHeaderSP8 := GdMontaHeader( @nUsadoSP8 , NIL , NIL , "SP8"  , {"P8_FILIAL","P8_MAT"} )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta aCols de Marcacoes                                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nUsadoSP8++
	Pn300aMarc(@aMarcacoes,{"P8_FILIAL","P8_MAT"},nOpcx)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa as Statics dos Objetos Bmp e Carrega os BitMaps³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230BitMaps()
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o aListBox de Acordo com o Calendario de Marcacoes    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !GetCalendListBox( @aListBox , aTabCalend )
		Break
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa aColsStatic a Cada Funcionario                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn300GetaCols()
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se existe algum dado no arquivo                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Do Case
	
		Case INCLUI

			If ( lValid )
				nCnt := Pn300aCols(NIL,NIL,NIL,nOpcX,NIL,.T.)
				lValid		:= .F.
				If ( nCnt > 0 )
					lValid		:= .T.
				EndIf
			EndIf
			
			Do Case

				Case lValid					
					Help(" ",1,"Pn230Exist")					
					Break

				Case lEncerra
					lEncerra	:= .F.
					lValid		:= .T.				
					Break

			End Case

		OTHERWISE
		
			nCnt := Pn300aCols(NIL,NIL,NIL,nOpcX,NIL,.T.)
				
			If ( nCnt == 0 )
									
				Help(" ",1,"Pn230NoLan")
				Break

			EndIf		

	End Case
    
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa nOpcA											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nOpcA := 0.00

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd( aObjCoords , { 000 , 025 , .T. , .F. } )		//1-Cabecalho dados funcionario
	aAdd( aObjCoords , { 000 , 001 , .T. , .F. } )		//2-Cabecalho Listbox e MsGetDados
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )		//3-Listbox e MsGetDados
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
	
	//Divisao 1-Cabecalho dados funcionario
	aAdv1Size		:= aClone(aObjSize[1])
	aInfo1AdvSize	:= { aAdv1Size[2] , aAdv1Size[1] , aAdv1Size[4] , aAdv1Size[3] , 5 , 1 }
	aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } )		//1-Matricula
	aAdd( aObj1Coords , { 000 , 000 , .T. , .T. } )		//2-Nome
	aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } )		//3-Admissao
	aObj1Size		:= MsObjSize( aInfo1AdvSize , aObj1Coords,,.T. )
   
	//Divisao 2-Cabecalho Listbox e MsGetDados 
	aAdv2Size		:= aClone(aObjSize[2])
	aInfo2AdvSize	:= { aAdv2Size[2] , aAdv2Size[1] , aAdv2Size[4] , aAdv2Size[3] , 5 , 1 }
	aAdd( aObj2Coords , { 000 , 000 , .T. , .T. } )		//1-Cabec Calendario
	aAdd( aObj2Coords , { 002 , 000 , .F. , .T. } )		//2-Espacamento
	aAdd( aObj2Coords , { 000 , 000 , .T. , .T. } )		//3-Cabec Escalas de Horarios
	aObj2Size		:= MsObjSize( aInfo2AdvSize , aObj2Coords,,.T. )

	//Divisao 3-Listbox e MsGetDados
	aAdv3Size		:= aClone(aObjSize[3])
	aInfo3AdvSize	:= { aAdv3Size[2] , aAdv3Size[1] , aAdv3Size[4] , aAdv3Size[3] , 5 , 5 }
	aAdd( aObj3Coords , { 000 , 000 , .T. , .T. , .T.} )	//1-Calendario
	aAdd( aObj3Coords , { 002 , 000 , .F. , .T. } )		//2-Espacamento
	aAdd( aObj3Coords , { 000 , 000 , .T. , .T. } )		//3-Escalas de Horarios
	aObj3Size		:= MsObjSize( aInfo3AdvSize , aObj3Coords,,.T. )
	
		
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Mostra Tela de Apontamentos por Centro de Custo             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	
	SetaPilha()
		DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	    DEFINE MSDIALOG oDlg TITLE cCadastro From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL
		
		@ aObj1Size[1,1], aObj1Size[1,2] GROUP oGroup TO aObj1Size[1,3], aObj1Size[1,4] LABEL OemToAnsi(STR0010) OF oDlg PIXEL	// "Matricula:"
		oGroup:oFont:= oFont 
		
		@ aObj1Size[2,1], aObj1Size[2,2] GROUP oGroup TO aObj1Size[2,3], aObj1Size[2,4] LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "Nome:"
		oGroup:oFont:= oFont
		
		@ aObj1Size[3,1], aObj1Size[3,2] GROUP oGroup TO aObj1Size[3,3], aObj1Size[3,4] LABEL OemToAnsi(STR0060) OF oDlg PIXEL	// "Admiss„o:"
		oGroup:oFont:= oFont
		
		@ aObj1Size[1,1]+10, aObj1Size[1,2]+5		SAY StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT))	SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObj1Size[2,1]+10, aObj1Size[2,2]+5		SAY OemToAnsi(SRA->RA_NOME) 					SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ aObj1Size[3,1]+10, aObj1Size[3,2]+5		SAY Dtoc(fDtaAdmis())							SIZE 050,10 OF oDlg PIXEL FONT oFont
		
		@ aObj2Size[1,1], aObj2Size[1,2]		SAY OemToAnsi(STR0021)	SIZE 120,10 OF oDlg PIXEL FONT oFont															// "Calend rio"
		@ aObj2Size[3,1], aObj2Size[3,2]		SAY OemToAnsi(STR0022)	SIZE 146,10 OF oDlg PIXEL FONT oFont															// "Faixas de Horarios de Horas Extras Autorizadas"
		@ aObj2Size[3,1], aObj2Size[3,4]-25.5	SAY oLinhas VAR StrZero(IF(Type("n")!="U",n,0),4)+"/"+StrZero(Len(aCols),4) SIZE 100,10 OF oDlg PIXEL FONT oFont
		
		bChange := { ||  ( IF( IF( nOpcX==3.or.nOpcX==4				 ,;
		                            Pn300LinOK(NIL,.T.) 				 ,;
		                            .T.					  		 		  ;
		                          )						 				 ,;
									( aCaleList:= Pn300GetData(aListBox),;  // -- Alimenta Variavel private com todos as E/S da Ordem lida
									   Pn300GetaCols(@aCols		,;
													@aArrayMain	,;
													aNotFields 	,;
													@oDlg		,;
													@oGet		,;
													nOpcX 		;
												  ) 			;
									)							,;
									( oLbox:nAt := nSvnAt		,;
									  oLbox:Refresh() )		 	;
							  )							,;
									 oLinhas:Refresh()			;
						  )												;
					}																	  	 
		
		ListBoxCalend( aObj3Size[1] , @oDlg , aListBox , @oLBox , bChange  )
		    
	    aCaleList:= Pn300GetData(aListBox)
	    
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta o cabecalho do aCols    (Sem campo DataRef)            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aHeader := GdMontaHeader( 	@nUsado 	,;
		 							NIL 		,; //02 -> Por Referencia contera os Campos do Cabecalho da GetDados que sao Virtuais
		  							NIL 		,; //03 -> Por Referencia contera os Campos do Cabecalho da GetDados que sao Visuais
								    "SPT"  		,; //04 -> Opcional, Alias do Arquivo Para Montagem do aHeader
								    aNotFields  ,; //05 -> Opcional, Campos que nao Deverao constar no aHeader
		  							.F.			,; //06 -> Opcional, Carregar Todos os Campos
		  							.T. 		,; //07 -> Nao Carrega os Campos Virtuais
		  							.T. 		,; //08 -> Carregar Coluna Fantasma
		  							NIL 		,; //09 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos		  							
									.T. 		;  //10 -> Verifica se Deve verificar se o campo eh usado		
								)

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Quando for Inclusao criar com 1 elemento					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nCnt 		:= IF(nOpcX == 3,1,nCnt)
		nSvUsado	:= nUsado+IF(nOpcX==2.or.nOpcX==5,0,1)
		aArrayMain	:= Array(nCnt,nSvUsado)
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Gerar o array aCols com Todas as Faixas                     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nCnt   := 0.00 ; nUsado := 0.00
		Pn300Acols(@aArrayMain,@aRecno,aNotFields,nOpcX)
		aArrayClone := aClone(aArrayMain)
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Bloqueia Chaves Logicas e Registros de Troc.Turno do Funcionario³
		³Depois da Montagem do Calendario.						         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If !Pona300Locks( nOpcX , 'SPT', aRecno )
	       Break
	    Endif
			    
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Gera aCols com 1 Elemento para a GetDados                   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		Pn300Acols(@aCols,,aNotFields,nOpcX,.T.)
				
		oGet := MsGetDados():New(aObj3Size[3,1],aObj3Size[3,2],aObj3Size[3,3],aObj3Size[3,4],nOpcX,"Pn300LinOK","Pn300TudOK","",IF(nOpcX==2.Or.nOpcX==5,NIL,.T.),NIL,1) //,,1)
		oGet:oBrowse:bChange := { || oLinhas:Refresh() }
		
		oDlg:bSet15 := { || nOpca := 1 , oDlg:End() }
		bSvSet15 := SetKey( 15 , oDlg:bSet15 )
		oDlg:bSet24 := { || nOpca := 0 , oDlg:End() }
		bSvSet24 := SetKey( 24 , oDlg:bSet24 ) 
		
		aButtons := Pn300ChoiBar( @oDlg , @oGet , nOpcX , aNotFields )
		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg, bSet15, bSet24, Nil, aButtons)/*(  , oDlg:Refresh() )*/ CENTERED
	SetaPilha()
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Exclusao                                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF nOpcX != 5
		IF nOpcA == 1 .and. ( nOpcX == 3 .or. nOpcX == 4 )
		
	        Begin Transaction
	        
	            /*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Grava as Marcacoes                                            ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	        	Pn300Grava(aArrayMain,aRecno,aHeader,nOpcX,{"HORINI","HORFIM"})
		       	/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Processa Gatilhos                                             ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		        EvalTrigger()
			End Transaction
		EndIF
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se for Exclusao                                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ElseIF nOpcA == 1 .and. nOpcX == 5
	   	Pn300Dele(aRecno)
	EndIF

End Sequence

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Libera Retgistros Locados		                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

FreeLocks( 'SPT' , NIL , .T. )
	
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SetKey( 15	, IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
SetKey( 24	, IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )
RestKeys( aKeys )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura os Dados de Entrada								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aAreaSRA )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300aCols	³ Autor ³Mauricio MR           ³ Data ³28/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Array com a Estrutura do aCols                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300aCols(aArrayMain,aRecno,aNotFields,nOpcX,lVazio,lCount) ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                    	     ³
³          ³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nHe                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn300aCols(aArrayMain,aRecno,aNotFields,nOpcX,lVazio,lCount)

Local aArea			:= GetArea()
Local aMarcacoes	:= {}
Local aCloneMarc	:= {}
Local cAlias		:= "SPT" 
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cFilMat		:= SRA->( RA_FILIAL + RA_MAT )  
Local dPerIGeA		:= dPerIni
Local dPerFGeA		:= Min( dPerFim , dDataBase )
Local lMarcAuto		:= .F.
Local nX			:= 0.00
Local nFaixas   	:= 0.00

Local nPosDt		:= GdFieldPos(cPrefix+"DATA")
Local nPosHorini	:= GdFieldPos(cPrefix+"HORINI") 


DEFAULT aArrayMain	:= {}
DEFAULT aRecno		:= {}
DEFAULT aNotFields	:= {}
DEFAULT nOpcX		:= 3.00
DEFAULT lVazio		:= .F.
DEFAULT lCount		:= .F.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Monta aArrayMain que Contem Todas as Faixas de HE Autorizadas³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !lVazio .or. lCount

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega as Tabelas de He Autorizadas                        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nFaixas := 0
	dbSelectArea(cAlias)
	
	If (cAlias)->( dbseek(cFilMat ) )
	    While (cAlias)->( !Eof() .and. &(cPrefix+"FILIAL") + &(cPrefix+"MAT") == cFilMat )
			IF (cAlias)->( !Empty(&(cPrefix+"DATAREF")) .and. &(cPrefix+"DATAREF") >= dPerIni .and. &(cPrefix+"DATAREF") <= dPerFim )	        
	            nFaixas++
	            If !lCount
		            nUsado:=0
		            SX3->(dbSeek( cAlias ))
		            While SX3->(!EOF() .And. X3_ARQUIVO == cAlias)
		               IF ( fContemStr( SX3->X3_CAMPO , cPrefix+"FLAG" , .T. ) .OR. SX3->(x3uso(x3_usado) ) ) .AND. cNivel >= SX3->x3_nivel .and. ASCAN(aNotFields,UPPER(ALLTrim(SX3->x3_campo))) = 0
	                       nUsado++
		                   If sx3->x3_context == "V"
		                       aArrayMain[nFaixas,nUsado] := CriaVar(AllTrim(sx3->x3_campo))
		                       Aadd( aVirtual , AllTrim(sx3->x3_campo) )
		                   Else
		                       aArrayMain[nFaixas][nUsado] := &(cAlias+"->"+SX3->X3_CAMPO)
		                   Endif
		                Endif
		                SX3->(dbSkip())
		            EndDo
		            If nOpcx # 2 .And. nOpcx # 5
		                aArrayMain[nFaixas][nUsado+1] := .F.
		            Endif
		            aAdd(aRecno,{})                                       
		           	aAdd(aRecno[Len(aRecno)], aArrayMain[nFaixas,nPosDt])    //Data        
					aAdd(aRecno[Len(aRecno)], aArrayMain[nFaixas,nPosHorIni])//Hora Inicial
					aAdd(aRecno[Len(aRecno)], (cAlias)->(Recno()))
				Endif 
			Endif	
		    (cAlias)->( dbSkip() )
	    EndDo
		aSort(aArrayMain,,,   { |x,y| Dtos(x[nPosDt])+Str(x[nPosHorIni],5,2) < Dtos(y[nPosDt])+Str(y[nPosHorIni],5,2)})	
		aSort(aRecno,,,{ |x,y| Dtos(x[1])+Str(x[2],5,2) < DtoS(y[1])+Str(y[2],5,2) } )
	Endif

EndIF
	
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta Array do 1§ Elemento Vazio. 	   					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !lCount
	IF  nFaixas == 0.00 .or. lVazio
		aArrayMain 	:= Array( 1 , nSvUsado )   
	    SX3->( MsSeek( cAlias ) )
		nUsado	:= 0.00
		While SX3->( !Eof() .and. (X3_ARQUIVO == cAlias) )
			IF (fContemStr( SX3->X3_CAMPO , cPrefix+"FLAG" , .T. ) .OR. SX3->( X3USO(X3_USADO)) .and. cNivel >= SX3->X3_NIVEL .and. aScan( aNotFields, Upper( AllTrim( SX3->X3_CAMPO ) ) ) == 0.00 )
				nUsado++
				IF SX3->X3_TIPO == "C"
					IF fContemStr( SX3->X3_CAMPO , cPrefix+"FLAG" , .T. )
						aArrayMain[1,nUsado] := "I"
					Else
						aArrayMain[1,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
					EndIF
				ElseIF SX3->X3_TIPO == "N"
					   aArrayMain[1,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
				ElseIF SX3->X3_TIPO == "D"
						IF fContemStr( SX3->X3_CAMPO , cPrefix+"DATA" , .T. )
							aArrayMain[1,nUsado] := CalendRetCpo( cPrefix+"DATA",,,cPrefix  )
						ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"DATAREF" , .T. )
							aArrayMain[1,nUsado] := aCaleList[1,CALEND_ELEM_DATA]  
						Else
							aArrayMain[1,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
						Endif	
				Else
					aArrayMain[1,nUsado] := .F.
				EndIF
	            IF SX3->X3_CONTEXT == "V"
	               aAdd( aVirtual , AllTrim(SX3->X3_CAMPO) )
				EndIF
			EndIF
			SX3->( dbSkip() )
		End While
		IF nOpcX != 2 .and. nOpcX != 5 //Visualizacao ou Exclusao
				aArrayMain[1,nUsado+1] := .F.
		EndIF	
		
		nFaixas := 0.00
	EndIF
EndIF
	
RestArea( aArea )

Return( nFaixas )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300LinOk	³ Autor ³MauricioMR            ³ Data ³28/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida a Linha Digitada na GetDados                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300LinOk                                     			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³loListBox - Identifica se a Validacao esta sendo Feita `a par³
³          ³            tir do ListBox.                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn300LinOk(oGet,loListBox)

Local cHelp			:= ""
Local cPrefix		:= ( PrefixoCpo( "SPT"  )  + "_" )
Local cLimIni		:= ""
Local cLimFim		:= ""
Local cHorIni		:= '' 
Local cHorFim		:= ''
Local lRet			:= .T.
Local dDataRef		:= Ctod('') 
Local dData			:= Ctod('')
Local nPosData		:= GdFieldPos(cPrefix+"DATA")
Local nPosHorIni	:= GdFieldPos(cPrefix+"HORINI")
Local nPosHorFim	:= GdFieldPos(cPrefix+"HORFIM")
Local nPosFlag		:= GdFieldPos(cPrefix+"FLAG")
Local nHorIni		:= 0.00 
Local nHorFim		:= 0.00
Local nCount		:= 0.00
Local nX			:= 0.00
Local nFornX		:= 0.00
Local nY			:= 0.00
Local nFornY		:= 0.00 
Local nLenaCols		:= 0.00


loListBox := IF( loListBox == NIL .or. ValType( loListBox ) != "L" , .F. , loListBox )

nLenaCols:=Len(aCols)

IF !aCols[ n , nSvUsado ] 

	Begin Sequence
	
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Na Validacao do aCols, quando Hora Inicial e Final forem 0    ³		
			³nao valida a linha											   ³		
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF aCols[ n , nPosHorIni ]  == aCols[ n, nPosHorFim ] .and. Empty(aCols[n, nPosHorIni]) .and. loListBox
				Break
			EndIF  
			
			
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica a Existencia de Horas Identicas <> 0				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If  nHorIni  == nHorFim .and.;  
			    (!Empty(nHorIni ) .and. !Empty(nHorFim ) ) 	
			    cHelp := STR0085	// "Horas em Duplicidade para a mesma Data"
			  	Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
				lRet:=.F.
				Break
			Endif        
            

         	/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Consiste se Data+Horarios ultrapassam os limites inicial e final para o dia  		     ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			dData	:= aCols[ n , nPosData   ]
			nHorIni	:= aCols[ n , nPosHorIni ]
			nHorFim	:= aCols[ n , nPosHorFim ]
				
			//-- Calcula Limites para a Ordem
			cLimIni := DataHora2Str( Ctod(aCaleList[1				, CALEND_ELEM_DATA_LIMITE 	])  , Val(aCaleList[1				, CALEND_ELEM_HORA_LIMITE 	])  )
			cLimFim := DataHora2Str( Ctod(aCaleList[Len(aCaleList)	, CALEND_ELEM_DATA_LIMITE 	])  , Val(aCaleList[Len(aCaleList)	, CALEND_ELEM_HORA_LIMITE 	]) )
		
			//-- Converte Data Hora    
			cHorIni := DataHora2Str( dData , nHorIni )
			If ( CTOD(aCaleList[Len(aCaleList), CALEND_ELEM_DATA_LIMITE]) == CTOD(aCaleList[1	, CALEND_ELEM_DATA_LIMITE]) .AND.;
				Val(aCaleList[Len(aCaleList)	, CALEND_ELEM_HORA_LIMITE]) < Val(aCaleList[1	, CALEND_ELEM_HORA_LIMITE]) )								
				cLimFim := DataHora2Str( ++dData , Val(aCaleList[Len(aCaleList)	, CALEND_ELEM_HORA_LIMITE 	]) )
				--dData				
			EndIf	
		  	cHorFim := DataHora2Str( If(nHorIni > nHorFim,dData+1, dData)  , nHorFim )
		    
		    
		    //-- Somente consiste a digitacao de horarios nao nulos simultaneos
			If !Empty(aCols[ n , nPosHorIni]) .OR. !Empty(aCols[ n , nPosHorFim])
              	//-- Nao permite a Digitacao de Data /Hora  fora dos Limites da Ordem 
				If cHorIni < cLimIni   
					cHelp:=STR0080 // "Data e Hora Inicial Inferior ao Limite Inicial para o Dia"
			 		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			   		lRet:= .F.
			   	ElseIf cHorIni > cLimFim   
					cHelp:=STR0081 // "Data e Hora Inicial Superior ao Limite Final para o Dia" 
			 		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			   		lRet:= .F.	
				ElseIf cHorFim<cLimIni 
					cHelp:=STR0082 // "Data e Horario Final Inferior ao Limite Inicial para o Dia"
			 		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			   		lRet:= .F.
				ElseIf cHorFim>cLimFim  
					cHelp:=STR0083 // "Data e Horario Final Superior ao Limite Final para o Dia" 
			 		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			   		lRet:= .F.	   		
				Endif 
					
			Endif
			   
		    If !lRet
               Break
            Endif    
			
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Obtem a Data de Referencia a partir do Calendario 							 		     ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			dDataRef			:= aCaleList[1,CALEND_ELEM_DATA]  //-- aCaleList foi carregada com todos os horarios da Data na mudanca da mesma
															//-- Veja bChange
		
		
	        //-- Corre Cada um dos Horarios do Dia
			For nX:=1 to nLenaCols
			 	//-- Se estiver deletado despreza-o
				If aCols[nX,nSvUsado]
				   Loop
				Endif
			 	
			 	//-- Converte Data Hora  para Criar Limite  
				cLimIni := DataHora2Str( aCols[ nX , nPosData ] , aCols[ nX , nPosHorIni] ) 
				
				//-- Verifica se a hora inicial corresponde a hora do dia anterior
	    		dData:=aCols[ nX , nPosData ]
    			If aCols[ nX , nPosHorIni] > aCols[ nX , nPosHorFim]
    	   			dData++
    			Endif
				
				cLimFim := DataHora2Str( dData , aCols[ nX , nPosHorFim] )
				
			    
			    //-- Corre os Demais Horarios do Dia
				For nY:=1 to nLenaCols
			        //-- Se for o mesmo horario que deu origem ao limite ou se estiver deletado despreza-o
				    If nX==nY .or. aCols[nY,nSvUsado]
				    	Loop
				    Endif
			        //-- Converte a Data+Hora do Horario Lido
					cHorIni := DataHora2Str( aCols[ nY , nPosData ] , aCols[ nY , nPosHorIni] ) 
					
					//-- Verifica se a hora inicial corresponde a hora do dia anterior
		    		dData:=aCols[ nY , nPosData ]
	    			If aCols[ nY , nPosHorIni] > aCols[ nY , nPosHorFim]
	    	   			dData++
	    			Endif
				
					cHorFim := DataHora2Str( dData , aCols[ nY , nPosHorFim] )
				
			        //-- Verifica se o Horario Lido esta contido Total ou Parcial no 
			        //-- Limite criado
					If cHorFim > cLimIni .and. cHorFim <= cLimFim .OR. ; 	// -- Verifica se Hora Final da Faixa esta entre o limite corrente
					   cHorIni > cLimIni .and. cHorFim <= cLimFim .OR.;  	// -- Verifica se a Hora Inicial e Final da Faixa estao entre o limite corrente 
					   cHorIni > cLimIni .and. cHorFim <= cLimFim   		// -- Verifica se a Hora Inicial da Faixa esta entre o limite corrente
                       lRet:=.F.
                       cHelp:= STR0086  // "Existe Sobreposicao de Horarios para o Dia"
                       Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
                       Exit
                    Endif  
                Next nY    
            
                If !lRet
                   Exit
                Endif          
   			    
			Next nX 
			 
			If !lRet
			   Break
			Endif
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica a Existencia de Itens Duplicados <> 0				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	    	aEval( aCols , { |x,y| IF( 	x[ nPosData  ]  == 		dData 				.and.;
							  	        x[ nPosHorIni ] == 		nHorIni 			.and.;  
							  	       ( !Empty(nHorIni ) .or. !Empty(nHorFim) ) 	.and.; 
							  	   		!x[nSvUsado] .and. y != n,;
								   nCount++,;
								   NIL;
							      );
					    };
			  )
						  
	
			IF  nCount > 0.00
				cHelp := STR0084	//"J  Existe Faixa de Horarios Cadastrada Para o Dia"
				Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
				lRet:=.F. 
				Break
	        Endif			  
		
		

	End Sequence
		
EndIF
	
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300TudOk	³ Autor ³MauricioMR            ³ Data ³29/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida Todos os Itens da GetDados                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300TudOk()                                   			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³VOID                                                	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn300TudOk(oGet)

Local lRet			:= .T.

Pn300LinOk(oGet)

lEncerra	:= .F.
If ( (lRet) .AND. (INCLUI .OR. ALTERA) )
	lEncerra	:= .T.
EndIf

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300Grava  ³ Autor ³Mauricio MR           ³ Data ³29/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Grava Informacoes no SPT                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300Grava(aArrayMain,aRecno,aHeader,nOpcX)					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aArray  -> Array com as Informacoes a serem Gravadas 	     ³
³          ³aRecno  -> Registros Existentes no SPT               		 ³
³          ³aHeader -> Array com os Campos                      		 ³
³          ³nOpcX   -> Tipo de Operacao: 3 = Inclusao , 4 = Alteracao	 ³
³          ³aCampos -> Campos p/ verificacao de existencia de lancamento ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn300Grava(aArrayMain,aRecno,aHeader,nOpcX, aCampos)

Local aArea			:= GetArea()
Local cAlias		:= "SPT" 
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cChave		:= ""
Local cMsgErr		:= ""
Local naPosCampo	:= Array(Len(aCampos))
Local nArray		:= 0.00
Local nForArray		:= Len( aArrayMain )
Local nRecno		:= 0.00
Local nForRecno		:= Len( aRecno )
Local nHeader		:= 0.00          
Local nForX         := 0.00
Local nForHeader	:= Len( aHeader )
Local nPosDataRef	:= GdFieldPos(cPrefix+"DATAREF")  
Local nPosData		:= GdFieldPos(cPrefix+"DATA") 
Local nPosHora		:= GdFieldPos(cPrefix+"HORINI") 
Local nPosRecno		:= 3
Local lAppend		:= .F.  
Local lGrava		:= .T.

//-- Verifica a Existencia de Lancamento Valido para Gravacao  
//-- Pois como sempre teremos um lancamento vazio para cada manutencao, na confirmacao da gravacao
//-- sem manutencao, esses lancamentos deverao ser descartados.
If Len(aArrayMain)==1  
    //-- Inicializa todas as posicioes dos campos de consistencia
    aFill(naPosCampo,0.00)                                      
    //-- Define o posicionamento de cada um dos campos de consistencia de integridade
    For nForX:=1 To Len(aCampos)
    	naPosCampo[nForX]	:= GdFieldPos(cPrefix+aCampos[nForX])  
    	//-- Se houver inconsistencia de localizacao de campos no aheader nao grava registros
    	If Empty(naPosCampo[nForx] )
    	   lGrava:= .F.
    	   Exit
    	Endif
    Next nForX 
    
    If lGrava
	    //-- Verifica a Integridade de todos os campos    
	    //-- Altera flag de gravacao para .F. de modo que iremos detectar a ocorrencia de pelo
	    //-- menos uma hora nao nula. Se isso ocorrer, entao temos um horario valido e alteramos
	    //-- o flag de gravacao para permitir a gravacao do item.
	    lGrava:=.F.
	    For nForX:=1 To Len(aCampos)
		    //-- Se os Campos para integridade do lancamento estiverem vazios, nao grava lancamento 
	    	If !Empty( aArrayMain[  1, naPosCampo[nForx] ] ) 
	    	   lGrava:=.T.                                      
	    	   Exit
	    	Endif
	    Next nForX 
    Endif        

Endif     

If lGrava
	(cAlias)->( dbSetOrder( RetOrdem(cAlias) ) )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Grava as Marcacoes                                            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF nOpcX == 3  // Inclusao
		For nArray := 1 To nForArray
			IF !aArrayMain[ nArray , nSvUsado ] //Nao Grava Registros Deletados
			    cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosDataRef ] ) +   Dtos(aArrayMain[ nArray , nPosData ] ) + Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
				lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
				IF !RecLock(cAlias,!lAppend)
					Loop
				EndIF
				(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
				(cAlias)->(&(cPrefix+"MAT"))		:= cMat
				For nHeader := 1 To nForHeader
					IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
						(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
					EndIF
				Next nHeader
				( cAlias )->( MsUnLock() )
			EndIF
		Next nArray
	ElseIF nOpcX == 4 //Alteracao
	    //-- Nao houve inclusao de novos Elementos
		IF nForRecno == nForArray
			//-- Corre todos os Elementos
			For nArray := 1 To nForArray
				//-- Se Existir Registro correspondente ao Elemento (Neste Caso sempre vai existir)
				//-- Posiciona 
				IF !( lAppend := Empty( aRecno[ nArray,nPosRecno ] ) )
					(cAlias)->( dbGoto( aRecno[ nArray,nPosRecno ] ) )
				EndIF	      
				//-- Para Elementos Nao deletados
				IF !aArrayMain[ nArray , nSvUsado ]
				    //-- Cria/Bloqueia Registro
					IF !RecLock(cAlias,lAppend)   
						Loop
					EndIF
					//-- Salva Campos que Nao fizeram parte do aHeader
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))		:= cMat
					//-- Corre todos os campos do aHeader
					For nHeader := 1 To nForHeader      
					    //-- Se o campo foi encontrado (Nao virtual, por exemplo)
					    //-- Grava seu novo conteudo 
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
						EndIF
					Next nHeader   
					//-- Desbloqueia registro
					( cAlias )->( MsUnLock() )
				//-- Se Elemento Deletado e exisitir registro associado, deleta-o	
				ElseIF !lAppend
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					IF !( cAlias )->( FkDelete( @cMsgErr ) )
						( cAlias )->( RollBackDelTran( cMsgErr ) )
					EndIF
					( cAlias )->( MsUnLock() )
				EndIF
			Next nArray  
		//-- Se ocorreu inclusao de novos elementos	
		ElseIF nForRecno < nForArray              
		    //-- Corre todos os registros pre-existentes
			For nRecno := 1 To nForRecno
				//-- Se existir registro associado posiciona
				IF !( lAppend := Empty( aRecno[ nRecno,nPosRecno ] ) )
					(cAlias)->( dbGoto( aRecno[ nRecno,nPosRecno ] ) )
				EndIF                                       
				//-- Se elememento Nao deletado
				IF !aArrayMain[ nRecno , nSvUsado ]
				    //-- Bloqueia/Cria novo registro
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					//-- Atualiza campos que nao fizeram parte do aHeader
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))		:= cMat
					//-- Corre todas as colunas do aHeader
					For nHeader := 1 To nForHeader                      
	                    //-- Se existir o campo (nao eh virtual, por exemplo)
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 ) 
						    //-- Grava novo conteudo
							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nRecno , nHeader ] ) )
						EndIF
					Next nHeader  
				//-- Para Elementos Deletados	
				ElseIF !lAppend             
				    //-- Bloqueia Registro e Deleta-o
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					IF !( cAlias )->( FkDelete( @cMsgErr ) )
						( cAlias )->( RollBackDelTran( cMsgErr ) )
					EndIF
				EndIF
				( cAlias )->( MsUnLock() )
			Next nRecno                        
			
			//-- Corre os novos Elementos
	        nRecno:=If(nRecno == 0.00,1, nRecno) 
	        
	        For nArray := nRecno To nForArray
	            //-- Para Elementos Nao Deletados
				IF !aArrayMain[ nArray , nSvUsado ] //Nao Grava Registros Deletados
				 	cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosDataRef ] ) +   Dtos(aArrayMain[ nArray , nPosData ] ) + Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
					//-- Verifica a Existencia do Elemento
					lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
					//-- Cria/Bloqueia elementos
					IF !RecLock(cAlias,!lAppend) 
						Loop
					EndIF
					//-- Atualiza campos que nao fizeram parte do aHeader
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))		:= cMat
				   	//-- Corre todas as colunas do aHeader
					For nHeader := 1 To nForHeader       
					 //-- Se existir o campo (nao eh virtual, por exemplo)
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
						EndIF
					Next nHeader
					( cAlias )->( MsUnLock() )
				EndIF
			Next nArray
		//-- Se ocorreu Delecao de Elementos
		Else 
			//-- Corre todos os registros pre-existentes
			For nRecno := 1 To nForRecno
				//-- Se existir registro associado posiciona
				IF !( lAppend := Empty( aRecno[ nRecno,nPosRecno ] ) )
					(cAlias)->( dbGoto( aRecno[ nRecno,nPosRecno ] ) )
				EndIF    
				//-- Utiliza Area Lida Antes da Manutencao para Gravar os Apontamentos Atuais
				If nRecno <= nForArray                                   
					//-- Se elememento Nao deletado
					IF !aArrayMain[ nRecno , nSvUsado ]
					    //-- Bloqueia/Cria novo registro
						IF !RecLock(cAlias,lAppend)      
							Loop
						EndIF
						//-- Atualiza campos que nao fizeram parte do aHeader
						(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
						(cAlias)->(&(cPrefix+"MAT"))		:= cMat
						//-- Corre todas as colunas do aHeader
						For nHeader := 1 To nForHeader                      
		                    //-- Se existir o campo (nao eh virtual, por exemplo)
							IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 ) 
							    //-- Grava novo conteudo
								(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nRecno , nHeader ] ) )
							EndIF
						Next nHeader  
					//-- Para Elementos Deletados	
					ElseIF !lAppend             
					    //-- Bloqueia Registro e Deleta-o
						IF !RecLock(cAlias,lAppend)
							Loop
						EndIF
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
					EndIF
					( cAlias )->( MsUnLock() )
				Else 
				    //-- Deleta Elementos do Apontamento anterior a Manutencao
				    IF !RecLock(cAlias,lAppend)
				    	Loop
				    EndIF
					IF !( cAlias )->( FkDelete( @cMsgErr ) )
						( cAlias )->( RollBackDelTran( cMsgErr ) )
					EndIF
					(cAlias )->( MsUnLock() )
				Endif	
			Next nRecno 
		EndIF
	EndIF
Endif	

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura os Dados de Entrada                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aArea )

Return( NIL )
                



/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300Dele   ³ Autor ³Mauricio MR           ³ Data ³29/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deleta as Marcacoes do SPT                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300Dele( aRecno )                                   		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aRecno -> Array com os Registros a Serem Deletados		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn300Dele( aRecno )

Local cMsgErr	:= ""
Local cAlias 	:= "SPT" 
Local lGoto		:= .F.
Local nX	 	:= 0.00
Local nFornX 	:= Len( aRecno )
Local nPosRecno	:= 3

Begin Transaction
	For nX := 1 To nFornX
		IF ( lGoto := !Empty(   aRecno[ nX, nPosRecno ] ) )
			(cAlias)->( dbGoto( aRecno[ nX, nPosRecno ] ) )
			IF !RecLock(cAlias,.F.,.T.)
				Loop
			EndIF
			IF !( cAlias )->( FkDelete( @cMsgErr ) )
				( cAlias )->( RollBackDelTran( cMsgErr ) )
			EndIF
			( cAlias )->( MsUnLock() )
		EndIF
	Next nX
End Transaction

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300GetaCols³Autor ³Mauricio MR           ³ Data ³29/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Monta o aCols Dia a Dia de Acordo com a Ordem do Calendario  ³
³          ³e Salva as Alteracoes Efetuadas em aArrayMain.               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300GetaCols()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn300GetaCols(	aCols		,; //Array da GetDados
								aArrayMain	,; //Array com Todas as Informacoes de Marcacoes
								aNotFields	,; //Campos Que Nao Constarao no aHeader
								oDlg		,; //Objeto de Dialogo
								oGet		,; //Objeto GetDados
								nOpcX		,; //Opcao do aRotina
								lTudoOk 	 ; //Se montado a partir de TudoOk
							  )

Local aOrdem		:= {}
Local cPrefix		:= ( PrefixoCpo( "SPT" ) + "_" )
Local cOrdem		:= CalendRetCpo( cPrefix+"ORDEM",,,cPrefix  )
Local dDataRef		:= Ctod('')
Local nX			:= 0.00
Local nLenX 		:= 0.00
Local nY			:= 0.00
Local nLenY			:= 0.00
Local nPosOrdem		:= 0.00
Local nPosDataRef	:= 0.00 
Local nPosData		:= 0.00
Local nPosHora		:= 0.00
Local nPosFlag		:= 0.00
Local nPosApon		:= 0.00
Local nPosTpMarca   := 0.00
Local lManutenc		:= .F.
Local lPrimeira 	:= ( PCount() == 0 )

Static aColsStatic

DEFAULT nOpcX	:= 3.00
DEFAULT lTudoOk := .F.

IF lPrimeira
	aColsStatic := NIL
Else
	nLenX 		:= Len( aArrayMain )
	nPosDataRef	:= GdFieldPos(cPrefix+"DATAREF"	) 
	nPosData	:= GdFieldPos(cPrefix+"DATA"	)
	nPosHorIni	:= GdFieldPos(cPrefix+"HORINI"	)
	nPosHorFim	:= GdFieldPos(cPrefix+"HORFIM"	)
	nPosFlag	:= GdFieldPos(cPrefix+"FLAG"	)  
	
    //-- Obtem a Data de Referencia do Dia
    dDataRef	:= aCaleList[1,CALEND_ELEM_DATA]
  
	IF aColsStatic != NIL .and. !fCompArray( aColsStatic , aCols )
		nLenY := Len( aElem )
		For nY := 1 To nLenY
			IF !fCompArray( aArrayMain[ aElem[ nY ] ] , aCols[ nY ] )
				lManutenc := .T.
				aArrayMain[ aElem[ nY ] ] := aClone( aCols[ nY ] )
				aArrayMain[ aElem[ nY ] , nPosFlag ] := "M"
			EndIF
		Next nY
		IF Len( aCols ) > Len( aColsStatic )
			IF nLenX == 1.00 .and. Empty( aArrayMain[ nLenX , nPosDataRef ] )
				aArrayMain := {}
			EndIF
			nLenY := Len( aCols )
			For nY := nY To nLenY
				IF !Empty( aCols[ nY , nPosHorIni ] ) .and. !Empty( aCols[ nY , nPosHorFim ] );
				                                        .and. !aCols[nY , nSvUsado ]
					aAdd( aArrayMain , aClone( aCols[ nY ] ) )
				EndIF	
			Next nY
		ElseIF nLenY == 0.00 .and.( ( ( nLenY := Len( aCols ) ) == Len( aColsStatic ) ) .and. nLenY == 1.00 )
			IF Len( aArrayMain ) == nLenY .AND. dDataRef == aCols[nLenY, nPosData] .AND. !Empty(aElem)
				aArrayMain[ nLenY ] := aClone( aCols[ nLenY ] )
			Else
				aAdd( aArrayMain , aClone( aCols[ nLenY ] ) )
			EndIF	
		EndIF
		aSort( aArrayMain ,,, { |x,y|;
								 Dtos(x[nPosDataRef]) + Dtos(x[nPosData]) + Str(x[nPosHorIni],5,2);
								 <;
								 Dtos(y[nPosDataRef]) + Dtos(y[nPosData]) + Str(y[nPosHorIni],5,2);
						   };
			  )
	
	EndIF

	nSvnAt	:= oLBox:nAt
	
	IF !lTudoOk
	
		aCols  := {} ; aElem := {}
		IF ( nX := aScan( aArrayMain , { |x| x[ nPosDataRef ] == dDataRef } ) ) > 0.00
			nLenX := Len( aArrayMain )
			For nX := nX To nLenX
				IF aArrayMain[ nX , nPosDataRef ] == dDataRef 
				   aAdd( aCols , aClone( aArrayMain[ nX ] ) )
				   aAdd( aElem, nX  )
				EndIF
			Next nX
		Else
			Pn300Acols(@aCols,,aNotFields,nOpcX,.T.)
		EndIF	
		aColsStatic := aClone( aCols )
		
		n := 1.00
		oGet:ForceRefresh()
		oGet:oBrowse:nAt := n
		oGet:oBrowse:Refresh()
		oGet:Refresh()
		oDlg:Refresh()

	EndIF

EndIF
	
Return( NIL )



/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300ChoiBar³ Autor ³MauricioMR            ³ Data ³29/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Monta Button Bar                                             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300ChoiBar												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn300ChoiBar( oDlg , oGet , nOpcX , aNotFields)

Local aKeys			:= GetKeys()
Local bLegend		:= { || NIL }
Local bCalend		:= { || NIL }
Local bColDel		:= { || NIL }
Local aButtons		:= {}

Local lOk			:= .F.
Local lEnd			:= .F.

IF !( nOpcX == 5 )
	bLegend		:= { || GetLegendCalend() }
	bCalend		:= { || IF(oGet:TudoOk(),(	Pn300GetaCols(	@aCols		,;
												  			@aArrayMain	,;
															aNotFields	,;
															@oDlg		,;
															@oGet		,;
															nOpcX		 ;
											      	 	),;  
									     	f_Alt_H(	oGet				,;
														aClone(aMarcacoes)	,;
														nUsadoSP8			,;
														aHeaderSP8			,;
														.F.					,;  //-- Para Nao considerar como acumulado
																			,;
														GetnOrdem()			;
									 	            );
									 	),;
									 	NIL;
					 		);
			 		}
	bColDel		:= { || Pn300ModSetaCols( @oDlg , @oGet ) }			 		
EndIF

If nOpcX != 5 
	aAdd( aButtons, {"BMPVISUAL", {|| Eval( bLegend )}, OemToAnsi(STR0045)}) // "Legenda do Calend rio..." 
	SetKey( VK_F4 , bLegend )
	
	aAdd( aButtons, {"S4SB014N", {|| Eval( bCalend )}, OemToAnsi(STR0069)}) //"Consulta de Hor rios...<F5>"
	SetKey( VK_F5 , bCalend )
	
	If nOpcX != 2
		aAdd( aButtons, {"SDUZAP", {|| Eval( bColDel )}, OemToAnsi(STR0068)}) // "Apagar/Restaurar Marca‡”es do Dia..."
   		SetKey( VK_F6 , bColDel )
  	EndIf
EndIf
	
Return( aButtons )     


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300ModSetaCols³Autor ³Mauricio MR        ³ Data ³29/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deletar/Restaurar as Faixas de He do Dia                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300ModSetaCols( @oDlg , @oGet )							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³oDlg - Objeto de Dialogo para Refresh     					 ³
³          ³oGet - Objeto GetDados para Refresh      					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pn300ChoiBar                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn300ModSetaCols( oDlg , oGet )

Local nX		:= 0.00
Local nLenaCols := Len( aCols )

For nX := 1 To nLenaCols
	aCols[ nX , nSvUsado ] := !aCols[ nX , nSvUsado ]
Next nX

oGet:ForceRefresh()
oDlg:Refresh()

Return( NIL )



/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn300aMarc	³ Autor ³Mauricio MR           ³ Data ³30/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Array de Marcacoes com a Estrutura do aCols          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300aMarc(aArrayMain,aNotFields)							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                    	     ³
³          ³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nMarcacoes                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn300aMarc(aArrayMain,aNotFields,nOpcx)

Local aArea			:= GetArea()
Local aMarcacoes	:= {}
Local aRecno		:= {}

Local cAlias		:= "SP8" 
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cFilMat		:= SRA->( RA_FILIAL + RA_MAT )
Local dPerIGeA		:= dPerIni
Local dPerFGeA		:= Min( dPerFim , dDataBase )
Local lMarcAuto		:= .F.
Local nX			:= 0.00
Local nMarcacoes	:= 0.00
Local nUsado		:= 0.00


DEFAULT aNotFields	:= {}



/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Monta aArrayMain que Contem Todas as Marcacoes do Funcionario³
³mas Possui a Estrutura do aCols							  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/


/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega as Marcacoes do Funcionario                         ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If !GetMarcacoes(	@aMarcacoes			,;	//Marcacoes dos Funcionarios
	    			@aTabCalend			,;	//Calendario de Marcacoes (Podera ser Modificado em fDiasFolga()
		    		@aTabPadrao			,;	//Tabela Padrao
			    	aClone( aTurnos )	,;	//Turnos de Trabalho
					dPerIni 			,;	//Periodo Inicial
					dPerFim				,;	//Periodo Final
					SRA->RA_FILIAL		,;	//Filial
					SRA->RA_MAT			,;	//Matricula
					SRA->RA_TNOTRAB		,;	//Turno
					SRA->RA_SEQTURN		,;	//Sequencia de Turno
					SRA->RA_CC			,;	//Centro de Custo
					cAlias				,;	//Alias para Carga das Marcacoes
					.T.					,;	//Se carrega Recno em aMarcacoes
					.T.		 		 	 ;	//Se considera Apenas Ordenadas
				  )
		oCalendError:ShowErrors()
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define o Periodo para a Geracao das Marcacoes Automaticas   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( fDtaAdmis() > dPerIni .and. fDtaAdmis() <= dPerFim )
	dPerIGeA := fDtaAdmis()
EndIF
IF SRA->( RA_DEMISSA < dPerFim .and. !Empty( RA_DEMISSA ) )
	dPerFGeA := SRA->RA_DEMISSA
EndIF
dPerIGeA	:= Max( dPerIGeA , dPerIni  )
dPerFGeA	:= Min( dPerFGeA , Min( dDataBase , dPerFim ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Gera marca‡oes Autom ticas.                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
PutMarcAuto( aTabCalend , @aMarcacoes , dPerIGeA , dPerFGeA , SRA->RA_FILIAL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica o Numero de Registros de aMarcacoes	              ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nMarcacoes	:= Len( aMarcacoes )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta o aCols Baseado em aMarcacoes 			              ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !Empty(nMarcacoes)
	aArrayMain := Array( nMarcacoes , nUsadoSP8 )
	For nX := 1 To nMarcacoes
		IF !( lMarcAuto := Empty( aMarcacoes[ nX , 05 ] ) )
			( cAlias )->( dbGoto( aMarcacoes[ nX , 05 ] ) )
			aAdd( aRecno , aMarcacoes[ nX , 05 ] )
		EndIF
		nUsado	:= 0.00
		SX3->( MsSeek( cAlias ) )
		While SX3->( !Eof() .and. X3_ARQUIVO == cAlias )
			IF SX3->( X3USO(X3_USADO) .and. cNivel >= X3_NIVEL .and. aScan( aNotFields, Upper( AllTrim( X3_CAMPO ) ) ) == 0.00 )
				IF SX3->X3_CONTEXT == "V"
			    	nUsado++
					aArrayMain[nX,nUsado] := CriaVar(AllTrim(SX3->X3_CAMPO))
					aAdd( aVirtual , AllTrim(SX3->X3_CAMPO) )
			    Else
			    	nUsado++
					IF fContemStr( SX3->X3_CAMPO , cPrefix+"DATA" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 01 ]
					ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"HORA" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 02 ]
					ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"ORDEM" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 03 ]
					ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"FLAG" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 04 ]
					ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"TURNO" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 06 ]
					ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"FUNCAO" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 07 ]
					ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"GIRO" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 08 ]
			        ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"CC" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 09 ]
			        ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"APONTA" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 10 ]
			        ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"RELOGIO" , .T. )
						aArrayMain[nX,nUsado] := aMarcacoes[ nX , 11 ]
					Else
						IF lMarcAuto
							IF SX3->X3_TIPO == "C"
								IF fContemStr( SX3->X3_CAMPO , cPrefix+"CC" , .T. )
									aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"CC"  )
								ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"FLAG" , .T. )
									aArrayMain[nX,nUsado] := "I"
								ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"ORDEM" , .T. )
									aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"ORDEM"  )
			                    ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"TURNO" , .T. )
									aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"TURNO"  )
								Else
									aArrayMain[nX,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
								EndIF
							ElseIF SX3->X3_TIPO == "N"
								aArrayMain[nX,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
							ElseIF SX3->X3_TIPO == "D"
								aArrayMain[nX,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
							Else
								aArrayMain[nX,nUsado] := .F.
							EndIF
						Else
							aArrayMain[nX,nUsado] := (cAlias)->( &(SX3->X3_CAMPO) )
						EndIF	
					EndIF
				EndIF
			EndIF
			SX3->( dbSkip() )
		End While
		IF nOpcX != 2 .and. nOpcX != 5 //Visualizacao ou Exclusao
			aArrayMain[nX,nUsado+1] := .F.
		EndIF
	Next nX

	//-- Se Nao Existir Marcacoes para o funcionario Gera um Elemento com as colunas vazias	
Else
	nMarcacoes := 1.00
	aArrayMain := Array( nMarcacoes , nUsadoSP8 )
	SX3->( MsSeek( cAlias ) )
	nUsado	:= 0.00
	While SX3->( !Eof() .and. (X3_ARQUIVO == cAlias) )
		IF SX3->( X3USO(X3_USADO) .and. cNivel >= X3_NIVEL .and. aScan( aNotFields, Upper( AllTrim( X3_CAMPO ) ) ) == 0.00 )
			nUsado++
			IF SX3->X3_TIPO == "C"
				IF fContemStr( SX3->X3_CAMPO , cPrefix+"CC" , .T. )
					aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"CC"  )
				ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"FLAG" , .T. )
					aArrayMain[nMarcacoes,nUsado] := "I"
				ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"ORDEM" , .T. )
					aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"ORDEM"  )
                    ElseIF fContemStr( SX3->X3_CAMPO , cPrefix+"TURNO" , .T. )
					aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"TURNO"  )
				Else
					aArrayMain[nMarcacoes,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
				EndIF
			ElseIF SX3->X3_TIPO == "N"
				aArrayMain[nMarcacoes,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
			ElseIF SX3->X3_TIPO == "D"
				aArrayMain[nMarcacoes,nUsado] := CriaVar(SX3->X3_CAMPO,.T.)
			Else
				aArrayMain[nMarcacoes,nUsado] := .F.
			EndIF
            IF SX3->X3_CONTEXT == "V"
               aAdd( aVirtual , AllTrim(SX3->X3_CAMPO) )
			EndIF
		EndIF
		SX3->( dbSkip() )
	End While
	aArrayMain[nMarcacoes,nUsadoSP8] := .F.

	nMarcacoes := 0.00
EndIF

	
RestArea( aArea )

Return( nMarcacoes )




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn300VHor     ³ Autor ³ Mauricio MR           ³ Data ³ 09/03/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Valida o "Hora Inicial" e "Hora Final"                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PonA300                                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn300VHor()

Local lRet  	:= .T.
Local cVar  	:= ''
Local cPrefix	:= ( PrefixoCpo( "SPT"  ) + "_" )
Local nPosHrIn	:=GdFieldPos(cPrefix+"HORINI")
Local nPosHrFm	:=GdFieldPos(cPrefix+"HORFIM")

Begin Sequence
	//Atualiza Campo Hora Inicial
	If (cVar := ReadVar()) == 'M->PT_HORINI'
	    aCols[n, nPosHrIn]:= M->PT_HORINI
        If !VldHora( M->PT_HORINI )
      		lRet := .F.
			Break
		Endif
	Endif                                               
	
	//Atualiza Campo Hora Final
	If (cVar := ReadVar()) == 'M->PT_HORFIM'
	    aCols[n, nPosHrFm]:= M->PT_HORFIM
	    If !VldHora( M->PT_HORFIM )
       		lRet := .F.
			Break
		Endif
	Endif
	
	If aCols[n, nPosHrIn] - Int(aCols[n, nPosHrIn]) > 0.59 .Or. aCols[n, nPosHrFm] - Int(aCols[n, nPosHrFm]) > 0.59
		//-- Consiste minutos maior que .59
		Help('',1,'PN210VHMIN')
		lRet := .F.
		Break
	Endif
	
End 

Return lRet 



/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pn300VData³ Autor ³ Mauricio MR           ³ Data ³ 31.10.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica a data da linha digitada                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function Pn300VData()
Local lRet 		:= .T. 

Local cPrefix	:= ( PrefixoCpo( "SPT"  ) + "_" )   
Local cVar		:= ''
Local dData		:= Ctod('') 
Local nPosData	:= GdFieldPos(cPrefix+"DATA") 

//-- Verifica qual a variavel ativa
cVar:=ReadVar()

dData	:= aCols[ n , nPosData   ]
If cVar == 'M->PT_DATA'
    dData:= M->PT_DATA
Endif  

If !EMPTY(dData)

	 //-- Validacao somente da Data Digitada.
     If dData <  Ctod( aCaleList[1				, CALEND_ELEM_DATA_LIMITE 	])
        cHelp:= STR0087 // "Data Inferior a Data Limite Inicial do Dia" 
       	Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
	    lRet:=.F.          
     ElseIf dData > Ctod(aCaleList[Len(aCaleList)	, CALEND_ELEM_DATA_LIMITE 	]  )
	    cHelp:= STR0088 // "Data Superior a Data Limite Final do Dia"
    	Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
	    lRet:=.F.          
	 Endif
Else
   lRet:= .F.
Endif   

Return lRet



/*  
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±                  
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pn300GetData    ³ Autor ³ Mauricio MR           ³ Data ³ 31/10/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³A) Cria uma Lista Com todas os Horarios Previstos para uma deter- ³±±
±±³          ³minada ordem.                                                     ³±± 
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Sintaxe  ³ Pn300GetData()                                                   ³±± 
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pona3000             	                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn300GetData() 
//-- Variavel para Arquivo
Local cPrefix		:= ( PrefixoCpo( "SP8"  ) + "_" )
//-- Variavel de Retorno
Local aList			:={}
Local nQtdeHrsTrab  :={}

//-- Variaveis para controle de Loop
Local nX			:= 0.00
Local nLenaListBox  := 0.00
Local nOrdem		:= 0.00
Local cOrdem		:= ""     

cOrdem := CalendRetCpo( cPrefix+"ORDEM" )
nOrdem := Ascan(aListBox,{|x|x[CALEND_ELEM_ORDEM] == cOrdem})

nLenaListBox:=Len(aListBox)

If !Empty(nOrdem)
//-- Corre Todos os Elementos da Lista de Calendario enquanto for a mesma ordem
For nX:=nOrdem To nLenaListBox

  //-- Se mesma Ordem aCrescenta Marcacao
  If aListBox[nX,CALEND_ELEM_ORDEM] == cOrdem 
     AADD(aList,aClone(aListBox[nX]) )
  Else
	 Exit  
  Endif

Next nX  
Endif  
Return aList


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pn300RData³ Autor ³ Mauricio MR           ³ Data ³ 31.10.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Inicializador da Data                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function Pn300RData()
Local cPrefix		:= ( PrefixoCpo( "SPT" ) + "_" )
Return(CalendRetCpo( cPrefix+"DATA",,,cPrefix  ))

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pn300RDtRef   ³ Autor ³ Mauricio MR           ³ Data ³ 02.10.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Inicializador da Data de Referencia                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function Pn300RDtRef()
Local lObject		:= .F.
Local dRet			:= Ctod('//')

//-- Verifica a existencia do Objeto, pois se o arquivo SPT for utilizado em outros
//-- programas a inicializacao desse programa sera a database se nao existir um objeto
//-- listbox que contenha uma listacalendario compativel com a funcao CalendRetCpo. 
lObject := ( Type( "oLBox" ) == "O" ) 

IF lObject
	dRet	:= aCaleList[1,CALEND_ELEM_DATA] //-- Array contendo apenas os horarios do dia 
	                                   //-- baseado no calendario completo
Else
	dRet 	:= dDataBase
EndIF

Return(dRet)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pona140Locks    ³Autor³Mauricio MR         ³ Data ³09/03/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Lancamentos de Excecoes do Funcionario              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA140                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pona300Locks( nOpc , cAlias, aRecnos )

Local lLocks	:= .T.
Local aRecAux	:= {}

Begin Sequence  

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Visualizacao nem Inclusao	 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpc == 2 ) 
		Break
	EndIF

	aEval( aRecnos , { |x| IF( !Empty(x) , aAdd( aRecAux , x[3] ) , NIL ) } )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³IMPORTANTE: a chave de Bloqueio devera ser a mesma da opcao   ³
	³            coletivas.                                        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !( lLocks := WhileNoLock( cAlias , aRecAux , { xFilial(cAlias) + SRA->RA_MAT + 'SPT'} , 1 , 1 , .T. , NIL ) )
		Break
	EndIF

End Sequence

Return( lLocks )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetnOrdem       ³Autor³Mauricio MR         ³ Data ³09/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Obtem a Ordem do Calendario para funcao f_Alt_H              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA300                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function GetnOrdem()                                   

Local nPosCalend	:= 0
Local cPrefix		:= ( PrefixoCpo( "SPT" ) + "_" )
Local cOrdem		:= CalendRetCpo( cPrefix+"ORDEM",,,cPrefix  )

nPosCalend 	:= Ascan(aListBox,{|x|x[CALEND_ELEM_ORDEM] == cOrdem})

Return(nPosCalend)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³PTFuncInit³ Autor ³Lenadro Dr.            ³ Data ³20/05/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Inicializador Padrao do campo codigo de funcao              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn300Atu(ExpC1,ExpN1,ExpN2)                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ Generico													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function PTFuncInit()

Local cPrefix  := ( PrefixoCpo( "PT" ) + "_" )
Local dData    := CalendRetCpo( cPrefix+"DATA",,,cPrefix )
Local nPos     := Ascan(aTabCalend,{|x| x[CALEND_POS_DATA] == dData})
Local cCodFunc := aTabCalend[nPos,CALEND_POS_CODFUNC]

Return ( cCodFunc )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Gustavo     ³ Data ³30/11/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA300	                                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function MenuDef()

	Local  aRotina :=  {	{ STR0002,"PesqBrw"	 , 0 , 1, ,.F.},; 	//"Pesquisar"
							{ STR0003,"Pn300Atu" , 0 , 2},; 		//"Visualizar"
							{ STR0004,"Pn300Atu" , 0 , 3,,,.T.},; 	//"Incluir"
							{ STR0005,"Pn300Atu" , 0 , 4},; 		//"Alterar"
							{ STR0006,"Pn300Atu" , 0 , 5},; 		//"Excluir"
							{ STR0089,"Ponm310"  , 0 , 3},; 		//"Coletivas"
							{ STR0007,"gpLegend" , 0 , 6, ,.F.} ;	//"Legenda"
						}
	Return aRotina