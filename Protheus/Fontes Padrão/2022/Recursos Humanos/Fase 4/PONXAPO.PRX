#INCLUDE "PONXAPO.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH" 
   
   
   
/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁStaticas de Ambiente                                         Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static cFilStatic 								//-- Filial Anterior
/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁStaticas de Retorno dos Mv's do SX6                          Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static lMarcImpar								//-- Tratar Marcacoes Impares na Montagem do aHoras para o Apontamento
Static lApHeDtM									//-- Aponta Horas Extras de Acordo com o Dia
Static lJtHeDtM									//-- Se o Tipo das Horas Extras corresponder ao do Dia Atual Grava no Dia Atual, se nao, no seguinte
Static lMarcIgual								//-- Tratar Marcacoes Duplicadas na Montagem do aHoras para o Apontamento
Static lMvAcmHExt								//-- Considerar Todas as Horas Extras do Dia Para o Escalonamento
Static lMvArrInte								//-- Define se ira considerar o Arredondamento Integral das Horas
Static lMvArrSExp								//-- Define se ira considerar o Arredondamento para Saida no Expediente ("S" eh o padrao e utiliza a Tab.Arred. da S.Antecipada, "N"  nao arredonda, como era feito na versao 508)
/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁStaticas de Eventos x Identificadores do Ponto               Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static aEvesIds									//-- Array com os Eventos/Identificadores do Ponto de Acordo com o SX5
Static cEvesNoDele								//-- Eventos que Nao Podem ser Deletados em GravaSPC
/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁStaticas de Exitencia de Pontos de Entrada                   Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static lPonaPo4Block := ExistBlock( "PONAPO4" )	//-- Verifica a Existencia do Ponto de Entrada PONAPO4
/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁPara Evitar a Chamada a Ctod("//")                           Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static dDateEmpty := Ctod("//")					//Substitui a Chamada a Ctod("//")

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁDefine Objetos que conterao as Variaveis para Apontamento    Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static oAponta
Static oaApo

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁStatic para Verificacao do lPreAbo							  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static lRF0ChkTable

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁConstantes Que Definem a Prioridade das Horas Extras         Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
#DEFINE Priority_Normal_Overtime	0
#DEFINE Priority_Nocturnal_Overtime	1

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁConstantes Manifestas para o Array de Faixas de He Autorizadas Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
#DEFINE DATA_REFERENCIA	01
#DEFINE DATA_INICIAL	02
#DEFINE HORA_INICIAL	03
#DEFINE DATA_FINAL		04
#DEFINE HORA_FINAL		05

/*/
зддддддддддбддддддддддбдддддддбдддддддддддддддддддддддбддддддбдддддддддд©
ЁPrograma  ЁPonxApo   Ё Autor Ё *EQUIPE RH ADVANCED*  Ё Data Ё 02/02/96 Ё
цддддддддддеддддддддддадддддддадддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o Ё Conjunto de fun┤■es de Apontamento utilizadas no SigaPon   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё Void                                                       Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      Ё Gen┌rico                                                   Ё
цддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё                     ATUALIZACOES SOFRIDAS DESDE A CONSTRU─AO INICIAL. Ё
цддддддддддддбддддддддбддддддбддддддддддддддддддддддддддддддддддддддддд╢╢
ЁProgramador Ё Data   Ё BOPS Ё  Motivo da Alteracao                     Ё
цддддддддддддеддддддддеддддддедддддддддддддддддддддддддддддддддддддддддд╢
ЁA.Shibao    Ё23/12/13ЁTHWPKAЁInserida a funcao fPonHE100 onde nos apon Ё
Ё 			 Ё		  Ё 	 Ёtamentos a partir das 13:00 hrs dia SabadoЁ
Ё            Ё        Ё      Ёdeve-se gerar H.Extra 100% conforme lei   Ё
Ё            Ё        Ё      Ё - Argentina                              Ё
Ё			 Ё		  Ё		 ЁInserida a funcao fValHrs100 p/ validacao Ё
Ё 			 Ё		  Ё 	 Ёdos parametros que devem ser criados via  Ё
Ё            Ё        Ё      Ёupd, usada tb nas funcoes PONA040,PONM010,Ё
Ё            Ё        Ё      Ё PONA230, PONA280 - Argentina             Ё
Ё            Ё        Ё         Ё                                           Ё
ЁJonathan GlzЁ01/05/15ЁCREQ-4256Ё Se elimina la funcion AjustaHlp, la cual  Ё
Ё            Ё        Ё         Ё realiza la modificacion al diccionario de Ё
Ё            Ё        Ё         Ё datos(SX1) por motivo de adecuacion de    Ё
Ё            Ё        Ё         Ё nueva estructura de SXs para version 12   Ё
юддддддддддддаддддддддадддддддддаддддддддддддддддддддддддддддддддддддддддддды
/*/
/*/
зддддддддддбддддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁInPonxApoExec ЁAutor ЁMarinaldo de Jesus   Ё Data Ё24/08/2004Ё
цддддддддддеддддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁExecutar Funcoes Dentro de PONXAPO                           Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁInPonxApoExec( cExecIn , aFormParam )						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                 	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 													 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Function InPonxApoExec( cExecIn , aFormParam )

Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= &( cExecIn )
EndIF

Return( uRet )

/*/
зддддддддддбддддддддддбдддддддбдддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    Ё Aponta   Ё Autor Ё Equipe Advanced RH    Ё Data Ё 04/04/96 Ё
цддддддддддеддддддддддадддддддадддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o Ё Efetua o apontamento das marca┤■es.                        Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё Aponta()                                                   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      Ё Generico                                                   Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Function Aponta(	dIni		,;	//01 - Periodo Inicial do Apontamento
					dFim		,;	//02 - Periodo Final do Apontamento
					aMarcacoes	,;	//03 - Array com as Marcacoes do Funcionario
					aTabCalend	,;	//04 - Calendario Padrao
					cFilSRA		,;	//05 - Filial do Funcionario
					cMatSRA		,;	//06 - Maricula do Funcionario
					aCodigos	,;	//07 - Array com os Eventos que possuem Identificadores
					aResult		,;	//08 - Array onde Serao Gravados os Resultados
					lGrava		,;	//09 - Logico, se Ira Gravar ou Nao o Apontamento
					lStop		,;	//10 - lStop, se Permite interrupcao durante o Processamento (HELP)
					aLogFile	,;	//11 - Array com os Logs de Apontamento
					aAbonosPer	 ;	//12 - Array com Todos os Abonos do Periodo (Por Referencia)
				)
Local lAddHorasTotais
Local aSvTabsCal
Local nX
Local nFornX
Local nW

Private aEventos	:= {}	//-- Array a Ser Utilizado no Ponto de Entrada "PONAPO4"

DEFAULT oAponta	:= PonVarApon():New()
DEFAULT oaApo	:= oAponta:oaApo

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁlApontaOk eh sempre True no Inicio do Processo				  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
oAponta:lApontaOk	:= .T.

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁlRF0ChkTable determina o Uso do Pre-Abonos					  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
DEFAULT lRF0ChkTable	:= fVerTabRF0()  	//Verifica a Existencia da Tabela de Pre-Abonos e se a mesm possui registro
oAponta:lRF0ChkTable	:= lRF0ChkTable

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁAtualiza as Variaveis Statics                                Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
IF ( oAponta:lModFil := ( ( cFilStatic == NIL ) .or. ( cFilStatic != cFilSRA ) ) )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSalva Filial Anterior										  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	cFilStatic	:= cFilSRA
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSalva aLogFile que podera ser Modificada em GetEveIdPon()    Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aLastLog := aClone( aLogFile )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa a Variavel __cSvFilAnt caso nao esteja definida  eЁ
	Ёas Variaveis Staticas com os Respectivos MV_'S       		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	DEFAULTFIL lMarcImpar			:= ( SuperGetMv("MV_MCIMPAR",,"N",cFilStatic) == "S" )	//-- Tratar Marcacoes Impares na Montagem do aHoras para o Apontamento
	DEFAULTFIL lApHeDtM				:= ( SuperGetMv("MV_APHEDTM",,"N",cFilStatic) == "S" )	//-- Aponta Horas Extras de Acordo com o Dia
	DEFAULTFIL lJtHeDtM				:= ( SuperGetMv("MV_JTHEDTM",,"S",cFilStatic) == "S" )	//-- Se o Tipo das Horas Extras corresponder ao do Dia Atual Grava no Dia Atual, se nao, no seguinte
	DEFAULTFIL lMarcIgual			:= ( SuperGetMv("MV_MCIGUAL",,"N",cFilStatic) == "S" )	//-- Tratar Marcacoes Duplicadas na Montagem do aHoras para o Apontamento
	DEFAULTFIL oAponta:nHrInterJd	:= ( SuperGetMv("MV_HRINTER",, 0 ,cFilStatic) )			//-- Numero Minimo de Horas Inter-Jornada
	DEFAULTFIL lMvAcmHExt			:= ( SuperGetMv("MV_ACMHEXT",,"N",cFilStatic) == "S" )	//-- Considerar Todas as Horas Extras do Dia Para o Escalonamento
	DEFAULTFIL lMvArrInte			:= ( SuperGetMv("MV_ARRINTE",,"N",cFilStatic) == "S" )	//-- Define se ira considerar o Arredondamento Integral das Horas
	DEFAULTFIL lMvArrSExp			:= ( SuperGetMv("MV_ARRSEXP",,"S",cFilStatic) == "S" )	//-- Define se ira considerar o Arredondamento para Saida no Expediente ("S" eh o padrao e utiliza a Tab.Arred. da S.Antecipada, "N"  nao arredonda, como era feito na versao 508)
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCarrega Array com os Identificadores o nao esteja definida  eЁ
	Ёas Variaveis Staticas com os Respectivos MV_'S       		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	DEFAULTFIL aEvesIds				:= GetEveIdPon( aCodigos , cFilStatic , @aLogFile )		//-- Array com os Eventos/Identificadores do Ponto de Acordo com o SX5
	DEFAULTFIL cEvesNoDele			:= ObtemEveNoDele( aCodigos )							//-- Eventos que Nao Podem ser Deletados em GravaSPC

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁVerifica se Todos os Identificadores Possuem Eventos   CorresЁ
	Ёpondentes													  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:lApontaOk := ArrayCompare( oAponta:aLastLog , aLogFile )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCarrega os Arredondamentos da Filial						  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:GetTabArred( cFilSRA, .T. )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCarrega em aAllTabExtra Todas as Tabelas de Horas Extras paraЁ
	Ёuso em fTolDiaria()										  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:GetTabExtra( cFilSRA , lStop , lMvAcmHExt , .F. )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem a Filial do SPA (Regra)								  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:GetSetSPAFil()
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem a Filial do SP6 (Motivos de Abonos)					  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:GetSetSP6Fil()
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem a Filial do SR6 (Turnos de Trabalho)					  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:GetSetSR6Fil()
Else
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё__cSvFilAnt Agora Tem o Conteudo da Filial Atual			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	__cSvFilAnt := cFilStatic
EndIF

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁInicializa as Datas utilizadas no Apontamento				  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
oAponta:dData	:= dIni
oAponta:dPerIni	:= dIni
oAponta:dPerFim	:= dFim
oAponta:dUltDia	:= oAponta:dPerFim
oAponta:dSvdIni	:= dIni
oAponta:dSvdFim	:= dFim

Begin Sequence

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa oAponta:aChkTolArr a Cada Apontamento			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:InitChkArr()

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe ocorreu alguma Inconsistencia Ate este ponto Aborta		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF !( oAponta:lApontaOk )
		Break
	EndIF

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁAltera o estado de lApontaOk                          		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:lApontaOk := .F.

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCarrega aTabCalend											  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aTabCalend	:= aClone( aTabCalend )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁArray calendario para modificacao pela funcao fMtaTabAp()    Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aTabClone	:= aClone( aTabCalend )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCarrega aResult											  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aResult		:= aClone( aResult )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCopia de aResult para Comparacao Antes da Gravacao			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aResClone	:= aClone( aResult )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa aResAbo em oAponta                      		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aResAbo		:= {}

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁArray c/ marcacoes para modificacao pela funcao fMtaTabAp()  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aMarClone	:= aClone( aMarcacoes )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem o Numero de Elementos de aMarcacoes 					  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:nLenMarc := Len( aMarcacoes )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa nPosOrdMarc a Cada Apontamento					  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:nPosOrdMarc	:= 1

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁReinicializa nDiaIni e nDiaFim a Cada Apontamento			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:nDiaIni	:= 0
	oAponta:nDiaFim	:= 0

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁVerifica qual o dia inicial para o apontamento				  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:dDtPesq 	:= dIni
    oAponta:lApontaOk 	:= .T.
    oAponta:nDiaIni 	:= 1
   	oAponta:nDiaFim 	:= (dFim-dIni)+1

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem os abonos Para o Periodo								  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:GetAbonosPer( @aAbonosPer , cFilSRA , cMatSRA )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa a tabela de Autorizacao de HE					  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aFaixasHe	:= {}
	oAponta:lfTabHeAut	:= .T.

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa a tabela de Pre-abonos para o Funcionario		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aPreAbo		:= {}
	oAponta:lfTabPreAbo	:= .T.

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁReinicializa as Statics em ToScheduleOverTime()			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	RstToScheduleOverTime()

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁReinicializa a Nona a Cada Apontaento          			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aNona		:= {}

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicializa nPosCalend a Cada Apontamento          			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:nPosCalend	:= 0

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁReinicializa a Nona a Cada Apontaento          			  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:lTransfEmp:= PonSitPer( cFilSRA , cMatSRA , oAponta:dPerIni , oAponta:dUltDia, NIL, @oAponta:aTransf )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁProcessa o Apontamento de Acordo com o Numero de Dias		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:nCountOrd := ( oAponta:nDiaIni - 1 )
	While ( ( ++oAponta:nCountOrd ) <=  oAponta:nDiaFim )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁGuarda a Ordem da Tabela									  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:GetSetOrdem()

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁGuarda a Data de Apontamento da Tabela						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:GetSetDataApo()

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega informacoes para a Data no oAponta::aChkTolArr	  	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:AddDtChkArr()

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁPosiciona no Calendario de Marcacoes de Acordo com a Data de Ё
		ЁApontamento											 	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( ( oAponta:nPosCalend := aScan( oAponta:aTabCalend , { |x| x[ CALEND_POS_DATA_APO ] == oAponta:dDataApo } , ++oAponta:nPosCalend ) ) > 0 )

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Guarda a Data do Apontamento                                Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:dData := oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_DATA ]

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Seta o Turno Atual                                          Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:GetSetTnoC()

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁMarca┤└o anterior a Admiss└o ou Marca┤└o posterior a Demiss└oЁ
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF !oAponta:ChkAdmDem(cFilSRA , cMatSRA,;
													 If ( !Empty( oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_INI_AFAST ] ) .or. !Empty( oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_FIM_AFAST ] ) ,;
														 	( { 	{	oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_INI_AFAST ]	,;
														   	  			oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_FIM_AFAST ]	,;
														   				oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_TIP_AFAST ]	,;
														   				oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_R8ID	  ]	;
													   		  	 	};
													   		  };
													  		),;
													  		{};
													  	);
								 )
				Loop
			EndIF

		Else

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Vai para o Proximo dia de Apontamento                       Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			aAdd( aLogFile , STR0016 + oAponta:cOrdem + STR0017 + Dtoc( oAponta:dData ) + STR0018 ) //"- Nao Foi Encontrada a Ordem:"###"- , para a data: "###"no calendario de marcacoes"
			oAponta:dData++
			Loop

		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁObtem os Pre-Abonos										  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:InitPreAbo( cFilSRA , cMatSRA )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica Tabela de Arredondamentos e de Tipos de Horas ExtrasЁ
		ЁApenas quando Houver Mudanca de Filial ou Troca de Turno     Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( ( oAponta:lModFil ) .or. !( oAponta:FilTnoCompare() ) )

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Verifica se o Turno de Trabalho do funcion═rio ┌ v═lido.	  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF !( oAponta:lApontaOk := oAponta:Sr6GetSetCpos() )
				IF ( lStop )
					HELP( " " , 1 , "NOTNOEXIST" , , oAponta:cTnoCalend , 5 , 0 )
				EndIF
				aAdd(aLogFile, STR0001)							// "- Codigo do Turno de Trabalho informado no cadastro"
				aAdd(aLogFile, STR0002)							// "  do funcionario, nao foi localizada no cadastro de Turnos (SR6)"
				aAdd(aLogFile, STR0007+" "+cFilSRA+"/"+cMatSRA)	// "  Filial/Matricula"
				aAdd(aLogFile, STR0008+" "+oAponta:cTnoCalend)	// "  Conteudo: "
				Break
			EndIF

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁCarrega os Arredondamentos de Acordo com o Turno do Calend.  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:GetTabArred( cFilSRA, .T. )

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁCarrega os Tipos de H.E de Acordo com o Turno do Calendario  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF !( oAponta:lApontaOk := oAponta:GetTabExtra( cFilSRA , lStop , lMvAcmHExt ) )
				IF ( oAponta:nErrorNumber == 1 )
				   aAdd(aLogFile, STR0011) // "- Nao foram encontrados os tipos de horas extras para a"
				   aAdd(aLogFile, STR0012+" "+cFilSRA+" "+STR0013+" "+oAponta:cTnoCalend) // "  Filial: "###"Turno: "
				ElseIF ( oAponta:nErrorNumber == 2 )
				   aAdd(aLogFile, STR0014) // "- Nao foram encontrados os tipos de horas extras para a"
				   aAdd(aLogFile, STR0012+" "+cFilSRA+" "+STR0013+" "+oAponta:cTnoCalend) // "  Filial: "###"Turno: "
				EndIF
				Break
			EndIF
    	EndIF

       /*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carregar Configuracoes do Horario Noturno					  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:GetCfgNot()


        /*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Marca┤└o dentro de intervalo de Afastamento.                Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF !( oAponta:ChkApoAfas() )
			Loop
		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁPassou Pelo Apontamento									  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:lApontaOk := .T.

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁObtem os abonos informados para a data apontada			  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:GetAbonos()

	    /*/
		зддддддддддддддддддддддддддддддддддддддд©
		ЁInicializa aHrTrab                     Ё
		юддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:aHrtrab := {}

	    /*/
		зддддддддддддддддддддддддддддддддддддддд©
		ЁInicializa aHorasTot                   Ё
		юддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:aHorasTot := {}

	    /*/
		зддддддддддддддддддддддддддддддддддддддд©
		ЁInicializa o contador de Jornadas      Ё
		юддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:nTotMarcTab := 0

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁInicializa as posicoes da matriz de apontamento como numericaЁ
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:ZeraApo()
		oAponta:ZeraApoHr()

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Carrega Informacoes da Regra de Apontamento                 Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/

		IF !( oAponta:ChkRegra( cFilSRA , cMatSRA ) )
			IF ( lStop )
				HELP( " " , 1 , "REGRANCAD" , , oAponta:cRegra , 5 , 0 )
			EndIF
			aAdd(aLogFile, STR0005)							// "- Codigo da regra de apontamento informado no cadastro"
			aAdd(aLogFile, STR0006)							// "  do funcionario, nao foi localizada no cadastro de regras"
			aAdd(aLogFile, STR0007+" "+cFilSRA+"/"+cMatSRA)	// "  Filial/Matricula"
			aAdd(aLogFile, STR0008+" "+oAponta:cRegra)		// "  Conteudo: "
			Break
		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁSe a apuracao das Horas Extras for de Acordo com a Data    daЁ
		ЁMarcacao zera os Horarios da Tabela para Dias Nao TrabalhadosЁ
		ЁBOPS 000015491												  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( lApHeDtm )
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁApenas se o Intervalo em dias Nao Trabalhados nao for pago   Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/

			oAponta:ZeraHrTab( lApHeDtm )
		EndIF

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁObter o tipo do dia a ser apontado							  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:cTipoDia := oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_TIPO_DIA ]

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica se devem ser apontados os Adicionais Especiais	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		//-- Dia eh domingo e paga-se Prima Dominical
		oAponta:lPrimDom := ( Dow(oAponta:dData) == 1 .and. oAponta:lPaPrimDom )
		//-- Dia eh DSR ( ou se eh Feriado mas originalmente era DSR )e paga-se Descanso Laborado
		oAponta:lDescLab := ( ;
								( 	oAponta:cTipoDia $ "D" .or. ;
									(	oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_TIPO_ORIG_DIA ] $ "D" .and.  ;
										oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_FERIADO ];
									);
								);
								 .and. oAponta:lPaDescLab ;
							 )
		//-- Dia eh Feriado ou
		//-- Dia eh Feriado conforme calendario de Feriados e empregado nao trabalha em feriado
		//-- e paga-se Festivo Laborado
		oAponta:lFestLab :=( ;
								( 	oAponta:cTipoDia $ "F" .or. ;
								 	oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_FERIADO ] ;
								);
								  .and. oAponta:lPaFestLab ;
							)

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁInicializa lApontaTpTrab									  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:lApontaTpTrab := .F.

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁInicializa os Flags de Apontamento							  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:SetaProcessad( .T. )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁInicio do Apontamento de Acordo com o Numero de Jornadas  posЁ
		Ёsiveis														  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
			oAponta:nInicJornada := 0
			While ( ( ++oAponta:nInicJornada ) <= oAponta:nJornadasAp )

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁInicializa aHoras para Apontamento    						  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:aHoras	:= {}
	            lAddHorasTotais	:= .F.
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁMonta a matriz de apontamento.								  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( oAponta:nMarcTab := fMtaTabAp(;
															lMarcImpar						,;	//01 -> Tratamento de Marcacoes Impares na Montagem de aHoras
															( oAponta:nHrInterJd > 0 )		,;	//02 -> Apontar Extras Inter Jornada
															lMarcIgual	 					 ;	//03 -> Tratamento para Maracoes Duplicadas
												   		);
					) < 2

				    /*/
					зддддддддддддддддддддддддддддддддддддддд©
					ЁNao Passou Pelo Apontamento            Ё
					юддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:FlgChkArr( .F. )
					Loop

				Else

				    /*/
					зддддддддддддддддддддддддддддддддддддддд©
					ЁPassou Pelo Apontamento                Ё
					юддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:FlgChkArr( .T. )


					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁCarrega as Tolerancias e Arredondamentos           		  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
				    oAponta:PutTolArrChkArr()

					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
 					ЁInicializa a Variavel nProxJornada							  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:InitProcJorn()

				    /*/
					зддддддддддддддддддддддддддддддддддддддд©
					ЁAcumula o Contador de Jornadas         Ё
					юддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:nTotMarcTab += oAponta:nMarcTab

				    /*/
					зддддддддддддддддддддддддддддддддддддддд©
					ЁGrava Flag de Marcacao ja Apontada     Ё
					юддддддддддддддддддддддддддддддддддддддды
					/*/
					IF ( ( oAponta:nPosOrdMarc := aScan( aMarcacoes , { |x| x[AMARC_DATAAPO] == oAponta:dDataApo } , oAponta:nPosOrdMarc ) ) > 0 )
						For nW := oAponta:nPosOrdMarc To oAponta:nLenMarc
		    				/*/
							зддддддддддддддддддддддддддддддддддддддд©
							ЁFlega a Marcacao como Apontada para   aЁ
							ЁData									Ё
							юддддддддддддддддддддддддддддддддддддддды
							/*/
							IF ( aMarcacoes[ nW , AMARC_DATAAPO ] == oAponta:dDataApo )
								aMarcacoes[ nW , AMARC_APONTA ] := "S" //Marcacao Apontada
							Else
								Exit //Aqui em nW
							EndIF
						Next nW
		    			/*/
						зддддддддддддддддддддддддддддддддддддддд©
						ЁSalva o Inicio da Proxima Data/Ordem   Ё
						юддддддддддддддддддддддддддддддддддддддды
						/*/
						oAponta:nPosOrdMarc := nW
					Else
		    			/*/
						зддддддддддддддддддддддддддддддддддддддд©
						ЁNeste caso nPosOrdMarc eh sempre 1		Ё
						юддддддддддддддддддддддддддддддддддддддды
						/*/
						++oAponta:nPosOrdMarc
					EndIF

				EndIF

   				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁObtem o numero de elementos da matriz de apontamentos  ( TabeЁ
				Ёla + Marcacoes )											  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:nLenHoras	:= Len( oAponta:aHoras )
				oAponta:nElem	    := IF( oAponta:nLenHoras %2 >= 1, oAponta:nLenHoras - 1 , oAponta:nLenHoras )

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁVerifica as Horas de Intervalo para a Jornada em Questao	  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:nIntTab := 0
				aEval( oAponta:aApo[oaApo:HrIntTbNNt] , { |x| oAponta:nIntTab := SomaHoras( oAponta:nIntTab , x ) } )

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁVerifica Se Paga Intervalo em Dias Nao Trabalhados, Tem InterЁ
				Ёvalo na Tabela e eh um dia Nao Trabalhado.					  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:lIntNtrab:= (;
											( oAponta:cTipoDia != "S" );
											.and.;
											( oAponta:nIntTab > 0 );
											.and.;
											( oAponta:cPgIntNTrb == "S");
											.and.;
											!( oAponta:lMovelFree );
									)

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁSe dia Nao Trab ,Horas de Intervalo na Tabela e 			  Ё
				ЁNao Movel Livre, Forca a Regra como Horario Movel			  Ё
			   	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			   	/*/
				IF (;
						( oAponta:lIntNtrab );
				   		.and.;
				   		!( oAponta:lMovelFree );
				   	)
					oAponta:cHrMovel 		:= "S"
					oAponta:cInMovel		:= "S"
					oAponta:nAntMove		:= 15
					oAponta:nPosMove		:= 15
					oAponta:nMovAint		:= 0
					oAponta:nMovPint		:= 0
					oAponta:lIntMovFree		:= .T.
					oAponta:cAjustIn 		:= "S"
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					Ё Reinicializo a Regra Anterior Para que os dados da Regra  seЁ
					Ё jam Recarregados para a Proxima Data. As informacoes  AlteraЁ
					Ё das acima soh servem para o dia atual.					  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:FilRegLstInit()
				EndIF
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				Ё Reve se o Intervalo Movel do Funcionario eh Livre      	  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:lIntMovFree	:= ( ( oAponta:cInMovel == "S" ) .and. ( ( oAponta:nMovAint + oAponta:nMovPint ) == 0 ) )

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁQuando o dia for normal ou se Existir Horario na Tabela  paraЁ
				Ёdias nao trabalhados										  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( oAponta:lApontaTpTrab := (;
													( oAponta:cTipoDia == "S" ) .or.;
													(;
														( oAponta:cTipoDia != "S" ) .and.;
														( oAponta:nIntTab > 0 ) .and.;
														( oAponta:cPgIntNTrb == "S" );
						 							);
							 				 	);
					)

					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁTotal  Horas Trabalhadas do Dia sobre a Tabela				  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					IF ( ( oAponta:nPosAux := aScan( oAponta:aHoras , { |y| y[ 3 ] == "1E" } ) ) > 0 )
						oAponta:nTHrTab := oAponta:aHoras[ oAponta:nPosAux , 04 ]
					EndIF

						/*/
						здддддддддддддддддддддддддддддддддддддддддддддддд©
						Ё Inicio do Processo de Apontamento das MarcacoesЁ
						юдддддддддддддддддддддддддддддддддддддддддддддддды
						здддддддддддддддддддддддддддддддддддддддддддддддд©
						Ё Nao Processa Esse Apontamento Quando Horario MoЁ
						Ё vel Livre										 Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						IF !( oAponta:lMovelFree )

							/*/
							зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁnStartnN aqui eh sempre 1                     			      Ё
							юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							oAponta:nStartnN := 1

							/*/
							зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁDefine o Flag para Inicio das Jornadas      				  Ё
							юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							oAponta:cInicJornada := oAponta:aSiglaMarc[ oAponta:nProxJornada ]

							/*/
							зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁProcessa de Acordo com os Flags de Marcacoes				  Ё
							юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							oAponta:nIndice := ( oAponta:nProxJornada - 1 )
							While ( ( ++oAponta:nIndice ) <= oAponta:nTotMarcTab )

								/*/
								зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
								ЁCarrega os Flags conforme aTipoMarc (1E,1S,2E,2S...)		  Ё
								юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
								/*/
								IF ( oAponta:aSiglaMarc[ oAponta:nIndice ] == oAponta:cInicJornada )
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lEntraEJ"+oAponta:cTipoMarc ) )
									/*/
									здддддддддддддддддддддддддддддддддддддддддддддддд©
									ЁSe ja passou pelo Tipo de Apontamento em QuestaoЁ
									ЁProcura o Proximo Tipo							 Ё
									юдддддддддддддддддддддддддддддддддддддддддддддддды
									/*/
									IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
										Loop //Aqui em oAponta:nIndice
									EndIF
									/*/
									здддддддддддддддддддддддддддддддддддддддддддддддд©
									ЁAponta Todas as Ocorrencias para Entrada de  JorЁ
									Ёnada											 Ё
									юдддддддддддддддддддддддддддддддддддддддддддддддды
									/*/
									ApontaEJ()
								ElseIF ( oAponta:nIndice == oAponta:nTotMarcTab )
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lSaidaSJ"+oAponta:cTipoMarc ) )
									/*/
									здддддддддддддддддддддддддддддддддддддддддддддддд©
									ЁAponta Todas as Ocorrencias para Saida de  JornaЁ
									Ёda  											 Ё
									юдддддддддддддддддддддддддддддддддддддддддддддддды
									/*/
									ApontaSJ()
								ElseIF ( SubStr( oAponta:aSiglaMarc[ oAponta:nIndice ] , -1 ) == "S" )
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lSaidaSI"+oAponta:cTipoMarc ) )
									/*/
									здддддддддддддддддддддддддддддддддддддддддддддддд©
									ЁSe ja passou pelo Tipo de Apontamento em QuestaoЁ
									ЁProcura o Proximo Tipo							 Ё
									юдддддддддддддддддддддддддддддддддддддддддддддддды
									/*/
									IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
										Loop //Aqui em oAponta:nIndice
									EndIF
									/*/
									здддддддддддддддддддддддддддддддддддддддддддддддд©
									ЁAponta Todas as Ocorrencias para Saida de  InterЁ
									Ёvalo											 Ё
									юдддддддддддддддддддддддддддддддддддддддддддддддды
									/*/
									ApontaSI()
								ElseIF ( SubStr( oAponta:aSiglaMarc[ oAponta:nIndice ] , -1 ) == "E" )
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lEntraEI"+oAponta:cTipoMarc ) )
									/*/
									здддддддддддддддддддддддддддддддддддддддддддддддд©
									ЁSe ja passou pelo Tipo de Apontamento em QuestaoЁ
									ЁProcura o Proximo Tipo							 Ё
									юдддддддддддддддддддддддддддддддддддддддддддддддды
									/*/
									IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
										Loop //Aqui em oAponta:nIndice
									EndIF
									/*/
									здддддддддддддддддддддддддддддддддддддддддддддддд©
									ЁAponta Todas as Ocorrencias para Entrada de   InЁ
									Ёtervalo										 Ё
									юдддддддддддддддддддддддддддддддддддддддддддддддды
									/*/
									ApontaEI()
								EndIF

							End While	//oAponta:nIndice

						EndIF


				        lAddHorasTotais:= .T.
				Else	//Para dias Nao Trabalhados
						lAddHorasTotais:= .T.
				EndIF

				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддд©
				Ё Final do Processo de Apontamento das Marcacoes Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддды
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				Ё Recalcula Horas Extras Para Dias Nao Trabalhados        Ё
				Ё com Intervalo na Tabela.							      Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF (oAponta:lIntNtrab) .and. ( !oAponta:lMovelFree )
					oAponta:ZeraApo()
					aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .F. } )
					fExtrasNtrab()

				EndIF

				If lAddHorasTotais
					/*/
					здддддддддддддддддддддддддддддддддддддддддддддддд©
					Ё Armazena o conteudo de aHoras em aHorasTot   deЁ
					Ё Jornadas Apontadas							 Ё
					юдддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					For nX := 1 To Len( oAponta:aHoras )
						aAdd( oAponta:aHorasTot , aClone( oAponta:aHoras[ nX ] ) )
					Next nX
				Endif

			End While //( ( ++oAponta:nInicJornada ) <= oAponta:nJornadasAp )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁFinal  do Apontamento de Acordo com o Numero de Jornadas  posЁ
		Ёsiveis														  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Se Passou Pelo Apontamento ( Inicio )			 Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( aScan( oAponta:aChkTolArr[ oAponta:nChkTolArr , 02 ] , { |x| x } ) > 0 )

				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддд©
				Ё Carrega aHoras com o conteudo de Todas as JornaЁ
				Ё das											 Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:aHoras := aClone( oAponta:aHorasTot )

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁQuando nao For Horario Movel Livre							  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF !( oAponta:lMovelFree )

					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁQuando o dia for normal ou se Existir Horario na Tabela  paraЁ
					Ёdias nao trabalhados										  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					IF ( oAponta:lApontaTpTrab )

						/*/
						здддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁAponta as Horas Trabalhadas e Faltas Integrais    Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						ApontaTrbNoMvFree()

						/*/
						здддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁAponta a Nona Hora                                Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						oAponta:nNonaHor 	:= 0
						oAponta:nNonaHorAut	:= 0
						IF ( oAponta:nPosAux := aScan( oAponta:aTabCalend , { |x| x[1] == oAponta:dData .and. x[CALEND_POS_TIPO_MARC] == "1E" .and. x[CALEND_POS_PG_NONA_HORA] == "S" } ) ) > 0
							fHrsNona()
							IF ( ( oAponta:cTipoDia == "S" ) .or. ( ( oAponta:cTipoDia != "S" ) .and. ( oAponta:nIntTab > 0 ) .and. ( oAponta:cPgIntNTrb == "S" ) ) )
								//-- Se o Apontamento for Pela data da Ocorrencia, deduz Nona Hora so no Proximo Dia em fHrsExDia
								IF ( ( lApHeDtM ) .and. ( ( oAponta:nPosAux := aScan( oAponta:aHoras , { |x| x[ 3 ] == "M" .and. !x[6] } ) ) > 0 ) )
									oAponta:nNonaHor	:= 0
									oAponta:nNonaHorAut	:= 0
								EndIF
							EndIF
						EndIF

					ElseIF !( oAponta:cTipoDia == "S" ) //-- Aponta horas extras para marca┤■es em dias n└o trabalhados

						/*/
						здддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁAponta Horas Extras                               Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						ApontaHeNoMvFree()

					EndIF

				ElseIF ( oAponta:lMovelFree ) // -- Apura Para Horario Movel Livre

					IF ( oAponta:cTipoDia == "S" )	//Dias Trabalhados

						/*/
						здддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁAponta as Horas Trabalhadas e Faltas Integrais    Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						ApontaTrbMvFree()

                    Else // -- Apura Hora Extra Para Horario Movel Livre

						//-- Zera as Horas Extras Apontadas que serao recaculadas pela fHeMovel()
						oAponta:ZeraApo()
						//-- Recalcula as Horas Extras
						fHeMovel(	.T.	,;	//01 -> Ira considerar Horas Trabalhadas da Tabela
									.T.	 ;	//02 -> Considerar o Dia como Sendo Feriado para Nao Carregar as Horas da Tabela
								 )
					EndIF

				EndIF

	           /*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁApuracao do Pagamento do DSR						   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:nHrsDsr	:= 0
				IF ( oAponta:cTipoDia $ "D*F" )
					//-- Aponta Pagamento de D.S.R.
					IF ( oAponta:cDsr == "S" )
						oAponta:nHrsDsr := HrsSem2OneDsr( SRA->RA_HRSEMAN )
					EndIF
					//-- Se funcionario estiver de Ferias nao calcula o DSR
					IF ( oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_APON_FERIAS ] )
						oAponta:nHrsDsr := 0
					EndIF
				EndIF

			           /*/
						зддддддддддддддддддддддддддддддддддддддд©
						ЁInicio da Geracao dos Eventos ApontadosЁ
						юддддддддддддддддддддддддддддддддддддддды
						зддддддддддддддддддддддддддддддддддддддд©
						ЁGerar pagamento de DSR (002A)			Ё
						юддддддддддддддддддддддддддддддддддддддды
						/*/
						IF ( oAponta:nHrsDsr > 0 )
							fGeraRes(	oAponta:aResult			,;	//01 -> Array com os Resultados do Dia
										oAponta:dData			,;	//02 -> Data da Geracao
										oAponta:nHrsDsr			,;	//03 -> Numero de Horas Resultantes
										aEvesIds[ 002 , 02 ]	,;	//04 -> Codigo do Evento
										SRA->RA_CC				,;	//05 -> Centro de Custo a ser Gravado
										NIL						,; //06 -> Tipo de Marcacao
										.F.						,; //07 -> True para Acumular as Horas
										NIL						,; //08 -> Periodo de Apuracao
										NIL						,; //09 -> Tolerancia
										NIL						,; //10 -> Tipo de Arredondamento a Ser Utilizado
										.T.			 			,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
										SRA->RA_CODFUNC         ,;  //12 -> Funcao a ser Gravada
										SRA->RA_DEPTO			,;  //13 -> Depto para gravacao
										SRA->RA_POSTO			,;  //14 -> Posto para gravacao
										SRA->RA_PROCES  		,;  //15 -> Processo para Gravacao
										oAponta:cRoteiro		,;  //16 -> Roteiro para Gravacao
										oAponta:cPeriodo		,;  //17 -> Periodo para Gravacao
										oAponta:cNumPagto		 ;  //18 -> NumPagto para Gravacao
					             )

						EndIF

						/*/
						здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁCarrega o tipo de hora extra a ser apontada para o diaЁ
						Ёconforme tabela de horario padrao.					   Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						oAponta:cCodHe := fTpoExtra( oAponta:dData , aClone( oAponta:aTabCalend ) , oAponta:nPosCalend )

						/*/
						зддддддддддддддддддддддддддддддддддддддд©
						ЁAvalia Apontamento 					Ё
						юддддддддддддддддддддддддддддддддддддддды
						/*/
						AvalAponta()

						/*/
						зддддддддддддддддддддддддддддддддддддддддд©
						ЁCarregando os Apontamentos em aResult	  Ё
						юддддддддддддддддддддддддддддддддддддддддды
						/*/
						PutApontaRes( aEvesIds )	//01 -> Array com os Eventos que possuem Identificadores

				/*/
				зддддддддддддддддддддддддддддддддддддддддд©
				ЁFinal da Geracao dos Eventos Apontado    Ё
				юддддддддддддддддддддддддддддддддддддддддды
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁAponta Hora Extra Inter-Jornada							  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( ( lApHeDtm ) .OR. ( oAponta:nHrInterJd > 0 ) )  .and. ( oAponta:nCountOrd == 1 )
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁSalva o Conteudo do aHoras do Dia Antertior				  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:aHorasAnt	:= aClone( oAponta:aHoras )
					oAponta:aHeAutoAnt	:= aClone( oAponta:aHeAutoDia )
                EndIF

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁAponta Hora Extra Inter-Jornada							  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( oAponta:nHrInterJd > 0 )

					IF ( oAponta:nCountOrd <> 1 )

						/*/
						зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁAponta Hora Extra Inter-Jornada							  Ё
						юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						oAponta:nHeInterA	:= 0
						oAponta:nHeInterN	:= 0
						//Apura as Horas Extras Inter-Jornada
						fHrsInter(	cFilSRA )
						//Gera Hora Extra Inter-Jornada Autorizada
						fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
									oAponta:dDataGravar								,;	//02 -> Data da Geracao
									oAponta:nHeInterA								,;	//03 -> Numero de Horas Resultantes
									aEvesIds[ 029 , 02 ]							,;	//04 -> Codigo do Evento
									oAponta:cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
									oAponta:cTipoMarc								,;	//06 -> Tipo de Marcacao
									.T.												,;	//07 -> True para Acumular as Horas
									""												,;	//08 -> Periodo de Apuracao
									0   											,;	//09 -> Tolerancia
									"H"							     				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
									Nil												,;  //11 -> Substitui a(s) Hora(s) Existente(s)
									oAponta:cFuncaoGrv								,;  //12 -> Funcao
									oAponta:cDepto		   							,;  //13 -> Depto para gravacao
									oAponta:cPosto						   			,;  //14 -> Posto para gravacao
									oAponta:cProcesso								,;  //15 -> Processo para Gravacao
									oAponta:cRoteiro								,;  //16 -> Roteiro para Gravacao
									oAponta:cPeriodo								,;  //17 -> Periodo para Gravacao
									oAponta:cNumPagto								 ;  //18 -> NumPagto para Gravacao
					             )
						//Gera Hora Extra Inter-Jornada Nao Autorizada
						fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
									oAponta:dDataGravar								,;	//02 -> Data da Geracao
									oAponta:nHeInterN								,;	//03 -> Numero de Horas Resultantes
									aEvesIds[ 038 , 02 ]							,;	//04 -> Codigo do Evento
									oAponta:cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
									oAponta:cTipoMarc								,;	//06 -> Tipo de Marcacao
									.T.												,;	//07 -> True para Acumular as Horas
									""												,;	//08 -> Periodo de Apuracao
									0   											,;	//09 -> Tolerancia
									"H"							     				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					            	Nil												,;  //11 -> Substitui a(s) Hora(s) Existente(s)
									oAponta:cFuncaoGrv								,;  //12 -> Funcao
									oAponta:cDepto		   							,;  //13 -> Depto para gravacao
									oAponta:cPosto						   			,;  //14 -> Posto para gravacao
									oAponta:cProcesso								,;  //15 -> Processo para Gravacao
									oAponta:cRoteiro								,;  //16 -> Roteiro para Gravacao
									oAponta:cPeriodo								,;  //17 -> Periodo para Gravacao
									oAponta:cNumPagto								 ;  //18 -> NumPagto para Gravacao
					             )
					EndIF
				EndIF

			    /*
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁAponta Hora Extra Inter-Jornada							  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				*/
				IF ( ( lApHeDtm ) .OR. ( oAponta:nHrInterJd > 0 ) )  .and. ( oAponta:nCountOrd <> 1 )
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁSalva o Conteudo do aHoras do Dia Antertior				  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:aHorasAnt	:= aClone( oAponta:aHoras )
	            EndIF

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁAponta Horas Extras de Acordo com o Dia ( Proximo Dia )	  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( lApHeDtm )
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁNao Calcular Quando For Horario Movel Livre.				  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					IF !( oAponta:lMovelFree )
						fHrsExDia()
					EndIF
				EndIF

				/*/
				зддддддддддддддддддддддддддддддддддддддддд©
				ЁCarrega o Tipo da Marcacao em aMarcacoes Ё
				юддддддддддддддддддддддддддддддддддддддддды
				/*/
		        oAponta:nLenHoras := Len( oAponta:aHoras )
		        For nW := 1 To oAponta:nLenHoras
		        	IF ( oAponta:aHoras[ nW , 03 ] == "M" )
		        		IF (;
		        				oAponta:nPosAux := aScan(;
	        							   	  				aMarcacoes , { |x|;
	        								  							 	x[ AMARC_DATA ] == oAponta:aHoras[ nW , 01 ];
	        								  							 	.and.;
	        								  							  	x[ AMARC_HORA ] == oAponta:aHoras[ nW , 02 ];
				        					  							};
		    			    						 		);
		        			) > 0
		        			aMarcacoes[ oAponta:nPosAux , AMARC_TIPOMARC ] := Padr( oAponta:aHoras[ nW , 08 ] , GetSx3Cache( "P8_TPMARCA" , "X3_TAMANHO" ) )
		        		EndIF
		        	EndIF
		        Next nW

		EndIF
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Se Passou Pelo Apontamento ( Fim )			 Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		зддддддддддддддддддддддддддддддддддддддд©
		ЁPassar para Proximo Dia				Ё
		юддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:dData++

	End While //( ( ++oAponta:nCountOrd ) <=  oAponta:nDiaFim )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe nao passou pelo Apontamento								  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF !( oAponta:lApontaOk )
		Break
	EndIF

    /*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSo Executa se o Parametro estiver preenchido e no Fim do Periodo de Apontamento	 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
    IF ( ( oAponta:nHrInterJd > 0 ) .and. ( oAponta:dData >= dFim ) )

		oAponta:aHorasAnt := aClone( oAponta:aHoras )

		IF !Empty( oAponta:aHorasAnt )

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁInicializa as posicoes da matriz de apontamento como numericaЁ
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:ZeraApo()

		    /*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁCarrega Marcacoes do 1o Dia do Proximo Periodo para apuracao das Horas Inter-JornadaЁ
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:dData := ( dFim + 1 )	//Inicio do Proximo Periodo/Dia

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Salva o Conteudo do Calendario por Turno        			  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			aSvTabsCal := GetTabCal()

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Cria Calendario com as Marcacoes da Data Passada			  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF !( oAponta:lApontaOk := SRA->( CriaCalend(oAponta:dData,oAponta:dData,RA_TNOTRAB,RA_SEQTURN,@aTabPadrao,@oAponta:aTabClone,cFilSRA,cMatSRA,RA_CC) ) )
				aAdd(aLogFile, STR0015) // "- Nao foi possivel criar o Calendario para Apuracao das Horas Extras Inter-Jornada"
				Break
			EndIF

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Procura a Ordem/Data de Apontamento no Calendario			  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF ( ( oAponta:nPosCalend := aScan( oAponta:aTabClone, { |x| x[ CALEND_POS_DATA_APO ] == oAponta:dData  } ) ) == 0 )
				IF ( Len( oAponta:aTabClone ) == 0 )
					aAdd(aLogFile, STR0015) // "- Nao foi possivel criar o Calendario para Apuracao das Horas Extras Inter-Jornada"
					oAponta:lApontaOk := .F.
					Break
				EndIF
				oAponta:nPosCalend	:= 01
				oAponta:GetSetOrdem( oAponta:nPosCalend )
				oAponta:GetSetDataApo( oAponta:aTabClone[oAponta:nPosCalend, CALEND_POS_DATA_APO])
			Else
				oAponta:GetSetOrdem( NIL , oAponta:aTabClone[ oAponta:nPosCalend , CALEND_POS_ORDEM ] )
				oAponta:GetSetDataApo( oAponta:aTabClone[oAponta:nPosCalend, CALEND_POS_DATA_APO])
			EndIF

	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Cria array com as marca┤■es do Periodo para o funcion═rio.  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:aMarClone := {}
			GetMarcacoes(	@oAponta:aMarClone			,;
							oAponta:aTabClone			,;
							NIL							,;
							NIL							,;
							oAponta:dData				,;
							oAponta:dData				,;
							cFilSRA						,;
							cMatSRA						 ;
						 )
	        /*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Ordena as marca┤■es do Proximo dia						  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			PutOrdMarc( @oAponta:aMarClone , oAponta:aTabClone )

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Verifica se a regra de valida┤└o do funcion═rio ┌ v═lida.   Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF !( oAponta:lApontaOk := oAponta:SpaGetSetCpos( oAponta:aTabClone ) )
				IF ( lStop )
					HELP( " " , 1 , "REGRANCAD" , , oAponta:cRegra , 5 , 0 )
				EndIF
				aAdd(aLogFile, STR0005)							// "- Codigo da regra de apontamento informado no cadastro"
				aAdd(aLogFile, STR0006)							// "  do funcionario, nao foi localizada no cadastro de regras"
				aAdd(aLogFile, STR0007+" "+cFilSRA+"/"+cMatSRA)	// "  Filial/Matricula"
				aAdd(aLogFile, STR0008+" "+oAponta:cRegra)		// "  Conteudo: "
				Break
			EndIF

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Verifica se o Turno de Trabalho do funcion═rio ┌ v═lido.	  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF !( oAponta:lApontaOk := oAponta:Sr6GetSetCpos( oAponta:aTabClone ) )
				IF ( lStop )
					HELP( " " , 1 , "NOTNOEXIST" , , oAponta:cTnoCalend , 5 , 0 )
				EndIF
				aAdd(aLogFile, STR0001)							// "- Codigo do Turno de Trabalho informado no cadastro"
				aAdd(aLogFile, STR0002)							// "  do funcionario, nao foi localizada no cadastro de Turnos (SR6)"
				aAdd(aLogFile, STR0007+" "+cFilSRA+"/"+cMatSRA)	// "  Filial/Matricula"
				aAdd(aLogFile, STR0008+" "+oAponta:cTnoCalend)	// "  Conteudo: "
				Break
			EndIF

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Reinicializa aHoras            							  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:aHoras := {}

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Monta a matriz de apontamento								  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF (;
					fMtaTabAp(	lMarcImpar						,;	//01 -> Tratamento de Marcacoes Impares na Montagem de aHoras
			   					( oAponta:nHrInterJd > 0 )		,;	//02 -> Apontar Extras Inter Jornada
								lMarcIgual	 					 ;	//03 -> Tratamento para Maracoes Duplicadas
						 	  ) ;
					> 0 ;
				)
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁAponta Hora Extra Inter-Jornada							  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:nHeInterA	:= 0
				oAponta:nHeInterN	:= 0
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				Ё Aponta Hora Extra Inter-Jornada							  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				fHrsInter( cFilSRA )
				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				Ё Gera Hora Extra Inter-Jornada								  Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( oAponta:nHeInterA + oAponta:nHeInterN ) > 0
					/*/
					зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					Ё Se tiver identidficador cadastrado gera no identificador  caЁ
					Ё so contrario												  Ё
					юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					fGeraRes(	oAponta:aResult																,;	//01 -> Array com os Resultados do Dia
								oAponta:dDataGravar															,;	//02 -> Data da Geracao
								oAponta:nHeInterA															,;	//03 -> Numero de Horas Resultantes
								aEvesIds[ 029 , 02 ]														,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv															,;	//05 -> Centro de Custo a ser Gravado
								IF( oAponta:lApTpMar , oAponta:aSiglaMarc[ oAponta:nTotMarcTab ] , NIL )	,;	//06 -> Tipo de Marcacao
								.T.																			,;	//07 -> True para Acumular as Horas
								""																			,;	//08 -> Periodo de Apuracao
								0   																		,;	//09 -> Tolerancia
								"H"							     											,;	//10 -> Tipo de Arredondamento a Ser Utilizado
				            	Nil																			,;  //11 -> Substitui a(s) Hora(s) Existente(s)
								oAponta:cFuncaoGrv							   								,;  //12 -> Funcao
								oAponta:cDepto		   														,;  //13 -> Depto para gravacao
								oAponta:cPosto						   										,;  //14 -> Posto para gravacao
								oAponta:cProcesso															,;  //15 -> Processo para Gravacao
								oAponta:cRoteiro															,;  //16 -> Roteiro para Gravacao
								oAponta:cPeriodo															,;  //17 -> Periodo para Gravacao
								oAponta:cNumPagto															 ;  //18 -> NumPagto para Gravacao
				             )
					fGeraRes(	oAponta:aResult																,;	//01 -> Array com os Resultados do Dia
								oAponta:dDataGravar															,;	//02 -> Data da Geracao
								oAponta:nHeInterN															,;	//03 -> Numero de Horas Resultantes
								aEvesIds[ 038 , 02 ]														,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv															,;	//05 -> Centro de Custo a ser Gravado
								IF( oAponta:lApTpMar , oAponta:aSiglaMarc[ oAponta:nTotMarcTab ] , NIL )	,;	//06 -> Tipo de Marcacao
								.T.																			,;	//07 -> True para Acumular as Horas
								""																			,;	//08 -> Periodo de Apuracao
								0   																		,;	//09 -> Tolerancia
								"H"							     											,;	//10 -> Tipo de Arredondamento a Ser Utilizado
				             	Nil	   																		,;  //11 -> Substitui a(s) Hora(s) Existente(s)
								oAponta:cFuncaoGrv							   								,;  //12 -> Funcao
								oAponta:cDepto		   														,;  //13 -> Depto para gravacao
								oAponta:cPosto													   			,;  //14 -> Posto para gravacao
								oAponta:cProcesso															,;  //15 -> Processo para Gravacao
								oAponta:cRoteiro															,;  //16 -> Roteiro para Gravacao
								oAponta:cPeriodo															,;  //17 -> Periodo para Gravacao
								oAponta:cNumPagto															 ;  //18 -> NumPagto para Gravacao
				             )
		    	EndIF
			EndIF

			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Restaura o Conteudo do Calendario por Turno        		  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			SetTabCal( aSvTabsCal )

		EndIF

	EndIF

	/*
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Chamada da funГЦo para pagar hrs extras 100% apos as 13:00 de Sabado - ARGENTINAЁ
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	*/
    If cPaisLoc == "ARG"

    	fPonHE100(  aClone( aMarcacoes ) , aClone( oAponta:aTabCalend ) , aClone( aCodigos ) , aClone( aEvesIds )  )

    EndIf

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁPonto de Entrada antes de Gravar o aResult nos Resultados(SPC)Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF ( lPonaPo4Block )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁO Ponto de Entrada PONAPO4 recebera como parametro o ParamIxb que eh um  ArЁ
		Ёray com quatro Elementos,sendo o Primeiro o Clone do Array aMarcacoes, o SeЁ
		Ёgundo o Clone do Array aTabCalend o Terceiro o Clone o Array aCodigos e   oЁ
		ЁQuarto o Clone do Array aEvesIds.											Ё
		Ё													  						Ё
		ЁPara Visualiza-los no Ponto de Entrada proceder da seguinte forma:			Ё
		Ё															  				Ё
		ЁUser Function PonaPo4()									  				Ё
		Ё															  				Ё
		ЁLocal __aMarcacoes := aClone( ParamIxb[1] )				  				Ё
		ЁLocal __aTabCalend := aClone( ParamIxb[2] )				  				Ё
		ЁLocal __aCodigos   := aClone( ParamIxb[3] )				  				Ё
		ЁLocal __aEvesIds   := aClone( ParamIxb[4] )				  				Ё
		ЁLocal __aResult	:= aClone( aEventos )					  				Ё
		ЁLocal dDtGer		:= dDataBase							  				Ё
		ЁLocal nHoras 		:= 0   									  				Ё
		ЁLocal cEvento		:= "999"								  				Ё
		ЁLocal cCusto 		:= SRA->RA_CC							  				Ё
		ЁLocal cTpMarc 		:= ""													Ё
		ЁLocal lSoma		:= .F.													Ё
		ЁLocal cPeriodo		:= ""													Ё
		ЁLocal nTole   		:= 0   													Ё
		ЁLocal cArred		:= ""  													Ё
		ЁLocal lSubstitui	:= .T. 													Ё
		Ё...														  				Ё
		Ё															  				Ё
		ЁfGeraRes(	__aResult	,; //01 -> Array com os Resultados do Dia			Ё
		Ё			dDtGer		,; //02 -> Data da Geracao							Ё
		Ё			nHoras		,; //03 -> Numero de Horas Resultantes				Ё
		Ё			cEvento		,; //04 -> Codigo do Evento           				Ё
		Ё			cCusto		,; //05 -> Centro de Custo a ser Gravado			Ё
		Ё			cTpMarc		,; //06 -> Tipo de Marcacao							Ё
		Ё			lSoma		,; //07 -> True para Acumular as Horas				Ё
		Ё			cPeriodo	,; //08 -> Periodo de Apuracao						Ё
		Ё			nTole		,; //09 -> Tolerancia								Ё
		Ё			cArred		,; //10 -> Tipo de Arredondamento a Ser Utilizado	Ё
		Ё			lSubstitui	,; //11 -> Substitui a(s) Hora(s) Existente(s)		Ё
		Ё			cFuncao		;  //12 -> Funcao 									Ё
		Ё		  )																	Ё
		Ё															  				Ё
		ЁaEventos := aClone( __aResult )							  				Ё
		Ё															  				Ё
		ЁReturn( NIL )								  				  				Ё
		Ё															  				Ё
		ЁPodera visualizar e alterar o Array aEventos que eh uma copia do Array   deЁ
		ЁResultados do Apontamento (aResult). Os Analistas deverao ter cuidado ao MeЁ
		Ёxer no aEventos para nao alterar sua estrutura.Utilizar a Funcao fGeraRes()Ё
		Ё(Conforme Modelo Acima) para gerar novos resultados.						Ё
		Ё                                      					  	  				Ё
		ЁObs.: Entre os Pontos de Entrada PONAPO3 e PONAPO4 este segundo(PONAPO4) ehЁ
		Ё      o mais recomendavel para uso		  	  								Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		( aEventos := {} , aEventos := aClone(oAponta:aResult) )
		ExecBlock(;
					"PONAPO4"							,;
					.F.									,;
					.F.									,;
					{;
						aClone( aMarcacoes )			,;
						aClone( oAponta:aTabCalend )	,;
						aClone( aCodigos )				,;
						aClone( aEvesIds )				 ;
					}									,;
					.F.									 ;
				 )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Verifica se aEventos e um Array e Se Houveram Modificacoes  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( ( ( ValType( aEventos ) == "A" ) .and. !ArrayCompare( aEventos , oAponta:aResult ) ) )
			( oAponta:aResult := {} , oAponta:aResult := aClone( aEventos ) , aEventos := {} )
		EndIF
	EndIF

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem o Numero de Elementos do aResult e Verifica ToleranciasЁ
	Ёe Arredondamentos Diarios									  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:nLenRes := Len( oAponta:aResult )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁChecar Tolerancias e Arredondamentos Diarios				  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:ChkTolArr( aEvesIds , lMvArrInte )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Ajusta as Horas em aResult                                  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	AjustaResult( @oAponta:aResult )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Adiciona os horarios dos Abonos em aResult                  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	AppendaResAbo(  @oAponta:aResult,  oAponta:aResAbo )

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Grava os resultados do funcion═rio no arquivo SPC apenas  seЁ
	Ё houveram novos apontamentos								  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF ( lGrava )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Verifica se Deve Gravar o Apontamento						  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		lGrava := (;
						Empty( oAponta:aResult );
						.or.;
						(;
							( oAponta:lChkTolArr );
							.and.;
							!ArrayCompare( oAponta:aResClone , oAponta:aResult );
						 );
					 )
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Se Houverem Diferencas Entre O que Entrou e o que foi ApontaЁ
		Ё do ou se o aResult Estiver vazio Regrava os Apontamentos    Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( lGrava )
			GravaSPC( oAponta:aResult , cFilSRA , cMatSRA , cEvesNoDele , oAponta:dSvdIni , oAponta:dSvdFim , aAbonosPer )
		EndIF
	EndIF

	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Recarrega aResult para Retorno por Referencia               Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	aResult := aClone( oAponta:aResult )

End Sequence

IF !( oAponta:lApontaOk )
	/*/
	зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Restaura o Conteudo do Calendario por Turno        		  Ё
	юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF ( aSvTabsCal <> NIL )
		SetTabCal( aSvTabsCal )
	EndIF
EndIF

Return( oAponta:lApontaOk )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁRstAponta()		ЁAutorЁMarinaldo de Jesus Ё Data Ё11/03/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁReinicializa as Staticas utilizadas em Aponta()	        	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁGenerico													Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Function RstAponta()

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁReinicializa os Variaveis Staticas de Apontamento            Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
oAponta := NIL
oaApo	:= NIL

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁReinicializa as Variaveis Staticas de Ambiente               Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
aEvesIds			:= NIL																//-- Array com os Eventos/Identificadores do Ponto de Acordo com o SX5
cEvesNoDele 		:= NIL																//-- Eventos que Nao Podem ser Deletados em GravaSPC
cFilStatic			:= NIL																//-- Filial Anterior

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁReinicializa Staticas de Retorno dos Mv's do SX6             Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
lMarcImpar			:= NIL																//-- Tratar Marcacoes Impares na Montagem do aHoras para o Apontamento
lApHeDtM			:= NIL																//-- Aponta Horas Extras de Acordo com o Dia
lJtHeDtM			:= NIL																//-- Se o Tipo das Horas Extras corresponder ao do Dia Atual Grava no Dia Atual, se nao, no seguinte
lMarcIgual			:= NIL																//-- Tratar Marcacoes Duplicadas na Montagem do aHoras para o Apontamento
lMvAcmHExt			:= NIL																//-- Considerar Todas as Horas Extras do Dia Para o Escalonamento
lMvArrInte			:= NIL																//-- Define se ira considerar o Arredondamento Integral das Horas
lMvArrSExp			:= NIL																//-- Define se ira considerar o Arredondamento para Saida no Expediente ("S" eh o padrao e utiliza a Tab.Arred. da S.Antecipada, "N"  nao arredonda, como era feito na versao 508)
lRF0ChkTable		:= NIL

Return( NIL )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApontaEJ		ЁAutorЁMarinaldo de Jesus Ё Data Ё23/04/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAponta as Ocorrencias de Entrada de Jornada    	        	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁAponta()													Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ApontaEJ()

Local lReapEj	:= .F.

Local cKeyProc
Local nN
Local nNPlus1
Local nY
Local nIn

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Incrementa o Indice da Proxima Marcacao        Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁExecuta Enquanto as Marcacoes para o Tipo de MarЁ
	Ёcacao em Questao nao Estiver OK				 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

        /*/
		зддддддддддддддддддддддддддддддд©
		Ё Apontamento Entrada Jornada   Ё
		юддддддддддддддддддддддддддддддды
		/*/
		IF ( oAponta:aHoras[ nN , 10 ] == "EJ" ) //-- Se hor═rio for tabela e inicio de jornada

			//-- Se o Pr╒ximo hor═rio for Marca┤└o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//-- Verifica se Horario M╒vel e altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nNPlus1						,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
										oAponta:aHoras[ nN , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
									 )
					nN -= 2
					Exit
				EndIF

				//-- Aponta atraso na entrada
				oAponta:AddPerHr(	oaApo:Atrasos				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotAtr			,;	//11 -> Apontar Horas Noturnas
									oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ;  //17 -> Apenas Acrescimo Noturno
								 )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nNPlus1 , 01 ]			,;
										oAponta:aHoras[ nNPlus1 , 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nNPlus1 , 14 ]			,;
										oAponta:aHoras[ nNPlus1 , 03 ]			,;
										.T.										;
									)

				//Ja Passou Pela Entrada Em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se o Pr╒ximo hor═rio for tabela tendo como marcacao uma saida
			ElseIF ( oAponta:aHoras[nNPlus1,10] $ "SI_SJ" )

				//--Procura a Marcacao para Submeter ao Horario Movel
				nY	:= ( nN - 1 )
				nIn := 0
				While ( ++nY <= oAponta:nLenHoras )
					nIn := nY
					IF ( oAponta:aHoras[ nIn , 03 ] == "M" )
						nY := 0
						Exit
					EndIF
				End While

				//--Verifica se Horario Movel e Altera Saida da Tabela
				IF ( ( nIn > 0 ) .and. ( nY == 0 ) )
					IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]		,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nIn								,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
											oAponta:aHoras[ nN , 03 ]		 ;	//03 -> Sigla da Marcacao Corrente
										  )
						nN -= 2
						Exit
					EndIF
				EndIF

				/*/
				зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁVerifica se ha horario Movel no Intervalo e forca o Reinicio Ё
				Ёdos Apontamentos                                             Ё
				юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( lReapEj := (;
										oAponta:ChkInMvFree();
										.or.;
										oAponta:ChkHrMovel(	oAponta:aHoras[ nNPlus1 , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
															nIn								,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
															oAponta:aHoras[ nNPlus1 , 03 ]   ;	//03 -> Sigla da Marcacao Corrente
									 			  		   );
								 );
					)
					Exit
				EndIF

				//-- Aponta Falta Meio periodo
				oAponta:AddPerHr(	oaApo:MeiaFalta				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotFal			,;	//11 -> Apontar Horas Noturnas
									oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ; 	//17 -> Apenas Acrescimo Noturno
							 )

				//-- J═ passou pela marcacao de Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				//-- J═ passou pela marcacao de Saida em Questao
				cKeyProc := ( "lSaida"+oAponta:aHoras[nNPlus1,10]+oAponta:aHoras[nNPlus1,03] )
				oAponta:SetaProcessad( .F. , cKeyProc )
				Exit
			EndIF

		//-- Se hor═rio for Marca┤└o e n└o tiver passado pela Entrada
		ElseIF (;
					( oAponta:aHoras[ nN , 03 ] == "M" ) .and. (;
																		( ( oAponta:cTipoMarc == "1E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ1E , 2 ] ) .or. ;
													 					( ( oAponta:cTipoMarc == "2E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ2E , 2 ] ) .or. ;
													 					( ( oAponta:cTipoMarc == "3E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ3E , 2 ] ) .or. ;
													 					( ( oAponta:cTipoMarc == "4E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ4E , 2 ] )      ;
													 			  );
				)

			//-- Se pr╒ximo hor═rio for tabela e inicio de jornada
			IF ( oAponta:aHoras[nNPlus1,10] == "EJ" )

				//--Verifica se Horario Movel e Altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nNPlus1 , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nN								,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
										oAponta:aHoras[ nNPlus1 , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
									 )
					nN -= 2
					Exit
				EndIF

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nNPlus1 , 01 ]			,;
										oAponta:aHoras[ nNPlus1 , 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nN	   , 14 ]			,;
										oAponta:aHoras[ nNPlus1 , 03 ]	 		 ;
									)

				//-- J═ passou pela entrada em questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )

				//-- Aponta Hora Extra na Entrada
				nN += fExtras(	oAponta:aHoras[ nN , 01 ]	,;	//01 -> Data da 1a Marcacao
					  			oAponta:aHoras[ nN , 02 ]	,;	//02 -> Hora da 1a Marcacao
								oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
								oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
								oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
								oAponta:nIndice				,;	//06 -> Indice de aApo
								.T.							,;	//07 -> 1o Dia do Apontamento
								.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
							)
                 Exit
			//-- Se pr╒ximo hor═rio for Marca┤└o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//--Procura a Tabela para Submeter ao Horario Movel
				nY	:= ( nN - 1 )
				nIn := 0
				While ( ++nY <= oAponta:nLenHoras )
					nIn := nY
					IF ( oAponta:aHoras[ nIn , 03 ] != "M" )
						nY := 0
						Exit
					EndIF
				End While

				//-- Verifica se Horario M╒vel e altera Saida da Tabela
				IF ( ( nIn > 0 ) .and. ( nY == 0 ) )
					IF oAponta:ChkHrMovel(	oAponta:aHoras[ nIn , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nN							,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
											oAponta:aHoras[ nIn , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
										 )
						nN -= 2
						Exit
					EndIF
				EndIF

				//-- Aponta Hora Extra Antes da Entrada
				nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
					  			oAponta:aHoras[nN,2] 		,;	//02 -> Hora da 1a Marcacao
								oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
								oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
								oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
								oAponta:nIndice				,;	//06 -> Indice de aApo
								.T.							,;	//07 -> 1o Dia do Apontamento
								.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
							)
				Exit
			EndIF
			Exit
		EndIF

		//Ja Passou Pela Entrada Em Questao
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe ja Passou Pelo Tipo de Marcacao em   Questao,Ё
	Ёposiciona no Proximo Item da Tabela, caso ContraЁ
	Ёrio pega a proxima Marcacao					 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁNeste Ponto nN eh iniciado a Partir de nStartnN Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:nStartnN := ( nN += 2 )
		Exit
	Else
		IF ( lReapEj )
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁForca o Reinicio do Apontamento Desde a  EntradaЁ
			Ёde Jornada em Funcao do Intervalo Movel         Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:nStartnN	:= 1
			nN					:= -1 //( Neste Caso nN sera incrementado pelo For/Next: -1 + 2 = 1 )
			lReapEj				:= .F.
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁInicializa as posicoes da matriz de apontamento como numericaЁ
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:ZeraApo()
			/*/
			зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁRemonta as Horas no oAponta:aApo em funcao do :ZeraApo()	  Ё
			юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:RmkWorkHrs()
	    	/*/
			зддддддддддддддддддддддддддддддддддддддд©
			ЁInicializa aHrTrab                     Ё
			юддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:aHrtrab := {}
			Loop
		Else
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁNeste Ponto nN sera incrementado pelo For       Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			Loop
		EndIF
	EndIF

Next nN

Return( NIL )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApontaSI		ЁAutorЁMarinaldo de Jesus Ё Data Ё23/04/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAponta as Ocorrencias de Saida de Intervalo    	        	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁAponta()													Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ApontaSI()

Local cKeyProc
Local lReapEj	:= .F.

Local cMarcEnt
Local nN
Local nNPlus1
Local nIn

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁInicializa o Flag de Ultimo Tipo de Checagem de Intervalo  MoЁ
Ёvel e o Array que Armazena as Horas de Saida e Entrada de  InЁ
Ёtervalo da Tabela											  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
oAponta:cLstChkMvInt	:= "__cLstChkMvInt__"
oAponta:aLstChkMvInt	:= {}

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Incrementa o Indice da Proxima Marcacao        Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁExecuta Enquanto as Marcacoes para o Tipo de MarЁ
	Ёcacao em Questao nao Estiver OK				 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerifica se o Intervalo Movel eh Livre                    	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( oAponta:ChkInMvFree( @lReapEj ) )
			IF ( ( lReapEj ) .and. ( oAponta:lPaAjustEJ ) )
				nN := 1
			Else
				nN -= 2
			EndIF
			Exit
		EndIF

        /*/
		зддддддддддддддддддддддддддддддд©
		Ё Apontamento Saida Intervalo	Ё
		юддддддддддддддддддддддддддддддды
		/*/
		IF ( oAponta:aHoras[nN,10] == "SI" ) //-- Se hor═rio for tabela e marcacao de saida do intervalo

			//-- Se pr╒ximo hor═rio for marca┤└o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//-- Verifica se ┌ Horario Movel e Altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nNPlus1						,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
										oAponta:aHoras[ nN , 03 ]    ;	//03 -> Sigla da Marcacao Corrente
									 )
					nN -= 2
					Exit
				EndIF

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nN 		, 01 ]			,;
										oAponta:aHoras[ nN 		, 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nNPlus1	, 14 ]			,;
										oAponta:aHoras[ nN		, 03 ] 	 		 ;
									)

				//-- Aponta Hora Extra
				nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
					  			oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
								oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
								oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
								oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
								oAponta:nIndice				,;	//06 -> Indice de aApo
								.T.							,;	//07 -> 1o Dia do Apontamento
								.T.							 ;	//08 -> Hora Extra Intervalo ( Entrada )
						    )

				//Ja passou pela saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se o pr╒ximo hor═rio for tabela e uma entrada
			ElseIF ( oAponta:aHoras[nNPlus1,10] == "EI" )

				//Procura a Proxima Marcacao para checagem do Horario Movel
				IF ( ( nIn := aScan( oAponta:aHoras , { |x| x[ 03 ] == "M" } , nNPlus1 ) ) > 0 )
					//-- Verifica se ┌ Horario Movel e Altera Saida da Tabela
					IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nIn							,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
											oAponta:aHoras[ nN , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
										 )
						nN -= 2
						Exit
					EndIF
				EndIF

				//-- Aponta Hora Extra no Intervalo
				nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
					  			oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
								oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
								oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
								oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
								oAponta:nIndice				,;	//06 -> Indice de aApo
								.T.							,;	//07 -> 1o Dia do Apontamento
								.T.							 ;	//08 -> Hora Extra Intervalo ( Entrada )
							)

				cMarcEnt := ( SubStr( oAponta:cTipoMarc , 1 , ( At( "S" , oAponta:cTipoMarc ) - 1 ) ) + "E" )
				IF ( aScan( oAponta:aHrTrab , { |x| ( x[3] == cMarcEnt ) } ) > 0 )
					//--Adiciona Horas da Tabela no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nN , 01 ]				,;
											oAponta:aHoras[ nN , 02 ]				,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nN , 14 ]				,;
											oAponta:aHoras[ nN , 03 ]	 			 ;
										)

			   		//--Adiciona Horas da Tabela no Array para calulo de horas Trab.
			   		oAponta:AddHrTrab(;
			   								oAponta:aHoras[ nNPlus1 , 01 ]			,;
			   								oAponta:aHoras[ nNPlus1 , 02 ]			,;
			   								oAponta:aHoras[ nNPlus1 , 03 ]			,;
			   								oAponta:aHoras[ nNPlus1 , 14 ]			,;
			   								oAponta:aHoras[ nNPlus1 , 03 ]			 ;
			   							)
				EndIF

			EndIF

			//-- J═ passou pela Saida "nn"
			oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
			//-- J═ passou pela marcacao de Entrada em Questao
			cKeyProc := ( "lEntra"+oAponta:aHoras[nNPlus1,10]+oAponta:aHoras[nNPlus1,03] )
			oAponta:SetaProcessad( .F. , cKeyProc )
			Exit

		//-- Se o hor═rio for de Marca┤└o e n└o tiver passado pela Saida de Intervalo
		ElseIF ( oAponta:aHoras[nN,3] == "M" ) .and. (;
			   												( ( oAponta:cTipoMarc == "1S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSI1S , 2 ] ) .or. ;
			   												( ( oAponta:cTipoMarc == "2S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSI2S , 2 ] ) .or. ;
			   												( ( oAponta:cTipoMarc == "3S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSI3S , 2 ] )      ;
			   							 	 			)

			//-- Se o pr╒ximo hor═rio for de tabela e uma saida do intervalo
			IF ( oAponta:aHoras[nNPlus1,10] == "SI" )

				//-- Verifica se ┌ Horario Movel e Altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nNPlus1 , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nN								,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
										oAponta:aHoras[ nNPlus1 , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
									)
					nN -= 2
					Exit
				EndIF

				//-- Aponta Saida Antecipada Antes do Intervalo
				oAponta:AddPerHr(	oaApo:SaidaAnte				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai			,;	//11 -> Apontar Horas Noturnas
									oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ;	//17 -> Apenas Acrescimo Noturno
							 )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//--Adiciona Marcacoes Reais no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nN , 01 ]				,;
										oAponta:aHoras[ nN , 02 ]				,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nN , 14 ]				,;
										oAponta:aHoras[ nN , 03 ]	 			 ;
									)

				//-- J═ passou pela Saida de Intervalo
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se o pr╒ximo horario for Marca┤└o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )

				IF (;
						( oAponta:aHoras[ nN      , 08 ] == oAponta:aSiglaMarc[ oAponta:nIndice ] ) .and. ;
						( oAponta:aHoras[ nNPlus1 , 08 ] == oAponta:aSiglaMarc[ oAponta:nIndice ] )		  ;
					)
					Exit //Ja passei por este apontamento
				EndIF

				//-- Verifica se ┌ Horario Movel e Altera Saida da Tabela
				IF oAponta:ChkHrMovel( "SE"										,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nN										,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
										oAponta:aSiglaMarc[ oAponta:nIndice ]	 ;	//03 -> Sigla da Marcacao Corrente
									 )
					nN -= 2
					Exit
				EndIF

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN      , 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
				oAponta:aHoras[ nNPlus1 , 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]

				//--Adiciona Marcacoes Reais no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nN 	, 01 ]				,;
										oAponta:aHoras[ nN 	, 02 ]				,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nN	, 14 ]				,;
										oAponta:aHoras[ nN	, 03 ]	 			 ;
									)
				//--Adiciona Marcacoes Reais no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nNPlus1	, 01 ]			,;
										oAponta:aHoras[ nNPlus1	, 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nNPlus1	, 14 ]			,;
										oAponta:aHoras[ nNPlus1	, 03 ]	 		 ;
									)

				//-- Aponta Saida Durante Expediente
				oAponta:AddPerHr(	oaApo:SaidaExpe				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai			,;	//11 -> Apontar Horas Noturnas
									oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
							  		oAponta:lAcreNot			,;	//17 -> Apenas Acrescimo Noturno
						  			Nil    						,;	//18 -> Periodo Horario Noturno
									Nil					 		,;	//19 -> Periodo Horario Diurno
									.T.							,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
									Nil							;   //21 -> Adiciona Periodo como Novo Elemento
							 )

				IF !Empty( oAponta:aLstChkMvInt )
					//-- Restaura os Horarios Originais da Tabela
					IF oAponta:ChkHrMovel( "SE"										,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nN										,;	//02 -> Posi┤└o no Array aHoras da Marca┤└o Atual.
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;	//03 -> Sigla da Marcacao Corrente
											.T.										 ;	//04 -> Apenas Restaurar os Horarios Originais de Intervalo correspontante a Tabela
										 )
						oAponta:aLstChkMvInt := {}
						nN -= 2
						Exit
					EndIF
				EndIF
				Exit
			EndIF
		EndIF

		//-- J═ passou pela Saida de Intervalo
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	IF ( ( lReapEj ) .and. ( oAponta:lPaAjustEJ ) )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁForca o Reinicio do Apontamento Desde a  EntradaЁ
		Ёde Jornada em Funcao do Sincronismo dos ExtremosЁ
		Ёem Relacao ao Horario de Intervalo				 Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:nIndice -= 2
		oAponta:nStartnN := nN
		oAponta:aProcessad[ oAponta:nProcessad , 02 ] := .T.
		oAponta:ZeraApo()
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁRemonta as Horas no oAponta:aApo em funcao do :ZeraApo()	  Ё
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:RmkWorkHrs()
		Exit

	Else

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁSe ja Passou Pelo Tipo de Marcacao em   Questao,Ё
		Ёposiciona no Proximo Item da Tabela, caso ContraЁ
		Ёrio pega a proxima Marcacao					 Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁNeste Ponto nN eh iniciado a Partir de nStartnN Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:nStartnN := ( nN += 2 )
			Exit
		Else
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁNeste Ponto nN sera incrementado pelo For       Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			Loop
		EndIF

	EndIF

Next nN

Return( NIL )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApontaEI		ЁAutorЁMarinaldo de Jesus Ё Data Ё23/04/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAponta as Ocorrencias de Entrada de Intervalo  	        	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁAponta()													Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ApontaEI()

Local cKeyProc
Local nN
//Local nY
Local nIn
Local nNPlus1

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Incrementa o Indice da Proxima Marcacao        Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁExecuta Enquanto as Marcacoes para o Tipo de MarЁ
	Ёcacao em Questao nao Estiver OK				 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

        /*/
		зддддддддддддддддддддддддддддддд©
		Ё Apontamento Entrada Intervalo	Ё
		юддддддддддддддддддддддддддддддды
		/*/
		IF ( oAponta:aHoras[nN,10] == "EI" ) //-- Se horario for tabela e entrada do intervalo

			//-- Se pr╒ximo hor═rio for Marca┤└o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//-- Aponta Atraso no Retorno do Intervalo
				oAponta:AddPerHr(	oaApo:Atrasos				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotAtr			,;	//11 -> Apontar Horas Noturnas
									oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ;	//17 -> Apenas Acrescimo Noturno
								 )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//-- Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nNPlus1 , 01 ]			,;
										oAponta:aHoras[ nNPlus1 , 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nNPlus1 , 14 ]			,;
										oAponta:aHoras[ nNPlus1 , 03 ]			 ;
									)

				//Ja passou pela Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se pr╒ximo hor═rio for tabela e uma saida
			ElseIF ( oAponta:aHoras[nNPlus1,10] $ "SI_SJ" )

				nIn := 0

				//-- Se nao Tiver marcacao posterior a Saida Aponta 1/2 Falta
				IF Empty( nIn )
					//-- Aponta Falta Periodo da Tarde
					oAponta:AddPerHr(	oaApo:MeiaFalta				,;	//01 -> Identificador do Elemento Diurno no Apo
										NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
										oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
										oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
										oAponta:aHoras[nN,1]		,;	//05 -> Data 1
										oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
										oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
										oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
										NIL							,;	//09 -> <@>Horas Normais Apontadas
										NIL							,;	//10 -> <@>Horas Noturnas Apontadas
										oAponta:lHnotFal			,;	//11 -> Apontar Horas Noturnas
										oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
										NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
										oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
										oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
										oAponta:lAcreNot			; 	//17 -> Apenas Acrescimo Noturno
						 			)
				EndIF

				//Ja passou pela Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				//-- J═ passou pela marcacao de Saida em Questao
				cKeyProc := ( "lSaida"+oAponta:aHoras[nNPlus1,10]+oAponta:aHoras[nNPlus1,03] )
				oAponta:SetaProcessad( .F. , cKeyProc )
				Exit

			EndIF

		//-- Se horario for marca┤└o e n└o tiver passado pela Entrada "nn"
		ElseIF ( oAponta:aHoras[nN,3] == "M" ) .and. (;
										 					( ( oAponta:cTipoMarc == "2E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEI2E , 2 ] ) .or. ;
										 					( ( oAponta:cTipoMarc == "3E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEI3E , 2 ] ) .or. ;
										 					( ( oAponta:cTipoMarc == "4E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEI4E , 2 ] )	  ;
										 	 			)

			//-- Se pr╒ximo hor═rio for tabela e uma entrada
			IF ( oAponta:aHoras[nNPlus1,10] == "EI" )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nNPlus1	, 01 ]			,;
										oAponta:aHoras[ nNPlus1	, 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nN		, 14 ]			,;
										oAponta:aHoras[ nNPlus1	, 03 ]			 ;
								   )

				//-- Aponta Hora Extra Retorno Almo┤o
				nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
					  			oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
								oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
								oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
								oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
								oAponta:nIndice				,;	//06 -> Indice de aApo
								.T.							,;	//07 -> 1o Dia do Apontamento
								.T.							 ;	//08 -> Hora Extra Intervalo ( Entrada )
							)

				//Ja passou pela Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//--Se pr╒ximo hor═rio for marca┤└o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//-- Aponta Hora Extra Antes Retorno do Intervalo
				nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
					  			oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
								oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
								oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
								oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
								oAponta:nIndice				,;	//06 -> Indice de aApo
								.T.							,;	//07 -> 1o Dia do Apontamento
								.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
							)
				Exit
			EndIF

			Exit

		EndIF

		//Ja Passou Pela Entrada Em Questao
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe ja Passou Pelo Tipo de Marcacao em   Questao,Ё
	Ёposiciona no Proximo Item da Tabela, caso ContraЁ
	Ёrio pega a proxima Marcacao					 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁNeste Ponto nN eh iniciado a Partir de nStartnN Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:nStartnN := ( nN += 2 )
		Exit
	Else
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁNeste Ponto nN sera incrementado pelo For       Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		Loop
	EndIF

Next nN

Return( NIL )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApontaSJ		ЁAutorЁMarinaldo de Jesus Ё Data Ё23/04/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAponta as Ocorrencias de Saida de Jornada    	        	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁAponta()													Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ApontaSJ()

Local lIncStartnN :=  .F.
Local nN
Local nNPlus1
Local nPosAtu
Local nPosAnt

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Incrementa o Indice da Proxima Marcacao        Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁExecuta Enquanto as Marcacoes para o Tipo de MarЁ
	Ёcacao em Questao nao Estiver OK				 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁSo se passou por este ponto eh que deve incremenЁ
		Ёtar nStartnN. Caso contrario eh apuracao de H.E.Ё
		Ёapos o Expediente								 Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		lIncStartnN := .T.

        /*/
		зддддддддддддддддддддддддддддддд©
		Ё Apontamento Saida Jornada		Ё
		юддддддддддддддддддддддддддддддды
		/*/
		IF ( oAponta:aHoras[nN,10] == "SJ" ) //-- Se horario for tabela e uma saida de jornada

			//-- Se pr╒ximo hor═rio for marca┤└o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nN		, 01 ]			,;
										oAponta:aHoras[ nN		, 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nNPlus1	, 14 ]			,;
										oAponta:aHoras[ nN		, 03 ]	 		 ;
									)

				//-- Aponta Hora Extra na Saida
				nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
					  			oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
								oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
								oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
								oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
								oAponta:nIndice				,;	//06 -> Indice de aApo
								.T.							,;	//07 -> 1o Dia do Apontamento
								.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
						    )

				//Ja Passou Pela Saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			ElseIF ( oAponta:aHoras[nNPlus1,10] == "SJ" )	//Neste Caso Encerrou o Apontamento

				//Ja Passou Pela Saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			EndIF

		//-- Se hor═rio for Marca┤└o e n└o tiver passado pela Saida "nn"
		ElseIF ( oAponta:aHoras[nN,3] == "M" ) .and. (;
															( ( oAponta:cTipoMarc == "1S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ1S , 2 ] ) .or. ;
															( ( oAponta:cTipoMarc == "2S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ2S , 2 ] ) .or. ;
															( ( oAponta:cTipoMarc == "3S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ3S , 2 ] ) .or. ;
															( ( oAponta:cTipoMarc == "4S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ4S , 2 ] )      ;
										 	  			)

			//-- Se pr╒ximo hor═rio for tabela e uma saida de jornada
			IF ( oAponta:aHoras[nNPlus1,10] == "SJ" )

				//-- Aponta Saida Antecipada Antes do Termino do Expediente
				oAponta:AddPerHr(	oaApo:SaidaAnte				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai			,;	//11 -> Apontar Horas Noturnas
									oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ; 	//17 -> Apenas Acrescimo Noturno
								 )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nN , 01 ]				,;
										oAponta:aHoras[ nN , 02 ]				,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nN , 14 ]				,;
										oAponta:aHoras[ nN , 03 ]				,;
										.T.										 ;
									)

				//-- J═ passou pela Saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se pr╒ximo hor═rio for Marca┤└o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN 		, 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
				oAponta:aHoras[ nNPlus1	, 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]

				//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nN , 01 ]				,;
										oAponta:aHoras[ nN , 02 ]				,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nN , 14 ]				,;
										oAponta:aHoras[ nN , 03 ]	 			 ;
									)

				//--Adiciona as Marcacoes Reains no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nNPlus1 , 01 ]			,;
										oAponta:aHoras[ nNPlus1 , 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nNPlus1 , 14 ]			,;
										oAponta:aHoras[ nNPlus1 , 03 ]	 		;
									)

				//-- Aponta Saida Durante Expediente
				oAponta:AddPerHr(	oaApo:SaidaExpe				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai			,;	//11 -> Apontar Horas Noturnas
									oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			,;	//17 -> Apenas Acrescimo Noturno
									Nil							,;	//18 -> Periodo Horario Noturno
									Nil							,;	//19 -> Periodo Horario Diurno
									.T.							,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
									Nil							;   //21 -> Adiciona Periodo como Novo Elemento
								 )
				Exit

			EndIF

		EndIF

		//Ja Passou Pela Saida de Jornada em Questao
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁSe ja Passou Pelo Tipo de Marcacao em   Questao,Ё
	Ёposiciona no Proximo Item da Tabela, caso ContraЁ
	Ёrio pega a proxima Marcacao					 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁNeste Ponto nN eh iniciado a Partir de nStartnN Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( lIncStartnN )
			oAponta:nStartnN := ( nN += 2 )
		EndIF
		Exit
	Else
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁNeste Ponto nN sera incrementado pelo For       Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		Loop
	EndIF

Next nN

/*/
здддддддддддддддддддддддддддддддддддддддддддддддд©
ЁSe passou pelo Apontamento de Saida de Jornada  Ё
юдддддддддддддддддддддддддддддддддддддддддддддддды
/*/
IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁAponta Todas as Horas Extras Apos o Final do  ExЁ
	Ёpediente										 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	For nN := oAponta:nStartnN To oAponta:nElem Step 2

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Incrementa o Indice da Proxima Marcacao        Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

		//-- Aponta hora extra ap╒s expedinte
		nN += fExtras(	oAponta:aHoras[nN,1]				,;	//01 -> Data da 1a Marcacao
						oAponta:aHoras[nN,2]  				,;	//02 -> Hora da 1a Marcacao
						oAponta:aHoras[nNPlus1,1]			,;	//03 -> Data da 2a Marcacao
						oAponta:aHoras[nNPlus1,2]			,;  //04 -> Hora da 2a Marcacao
						oAponta:aSiglaMarc[oAponta:nIndice]	,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
						oAponta:nIndice						,;	//06 -> Indice de aApo
						.T.									,;	//07 -> 1o Dia do Apontamento
						.F.									 ;	//08 -> Hora Extra Intervalo ( Entrada )
					 )
	Next nN

Else

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁAponta 1/2 Falta                                Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	nPosAtu	:= aScan( oAponta:aHoras,{ |x| x[3] == oAponta:aSiglaMarc[oAponta:nIndice] } )
	nPosAnt	:= aScan( oAponta:aHoras , { |x| x[3] == oAponta:aSiglaMarc[ oAponta:nIndice - 1 ] } )
	IF ( ( nPosAtu > 0 ) .and. ( nPosAnt > 0 ) )
			oAponta:AddPerHr(	oaApo:MeiaFalta				,;	//01 -> Identificador do Elemento Diurno no Apo
								NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
								oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
								oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
								oAponta:aHoras[nPosAnt,01]	,;	//05 -> Data 1
								oAponta:aHoras[nPosAnt,02]	,;	//06 -> Hora 1
								oAponta:aHoras[nPosAtu,01]	,;	//07 -> Data 2
								oAponta:aHoras[nPosAtu,02]	,;	//08 -> Hora 2
								NIL							,;	//09 -> <@>Horas Normais Apontadas
								NIL							,;	//10 -> <@>Horas Noturnas Apontadas
								oAponta:lHnotFal			,;	//11 -> Apontar Horas Noturnas
								oAponta:dData				,;	//12 -> Data Inicial Para a Hora Noturna
								NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
								oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
								oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
								oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
								oAponta:lAcreNot			 ;	//17 -> Apenas Acrescimo Noturno
						 )
	EndIF

	//Ja Passou Pela Saida em Questao
	oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )

EndIF

Return( NIL )

/*/
зддддддддддбдддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁApontaTrbNoMvFreeЁAutorЁMarinaldo de Jesus Ё Data Ё17/06/2003Ё
цддддддддддедддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁApontar Horas Trabalhadas e Faltas para Regras sem Horario MoЁ
Ё          Ёvel Livre													 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL															 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ApontaTrbNoMvFree()

Local aPerNot		:= {}
Local aPerDia		:= {}
Local aNewHrTrab	:= {Nil, Nil}
Local aTab			:= {}

Local cTpMarc		:= ""

Local lIntegra		:= .T.

Local nPosM
Local nPosT
Local nO
Local nOPlus1
Local nHr1
Local nHr2
Local nHr3
Local nHoras 		:= 0
Local nHorasTot 	:= 0
Local nHorasTpMarc	:= 0
Local nDifHoras 	:= 0
Local nIndice

/*/
здддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Inicio do Calculo das Horas Trabalhadas        Ё
юдддддддддддддддддддддддддддддддддддддддддддддддды
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁOrdena as Marcacoes do Dia com as Marcacoes da  TaЁ
	Ёbela											   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:SortaHrTrab()

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Totaliza as Horas Trabalhadas                    Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
 	oAponta:ChkHrTDupl()
	oAponta:nElem := IF( ( ( oAponta:nLenHoras%2 ) >= 1 ) , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Ajusta as Horas Trabalhadas em funcao do Minimo  Ё
	Ё a ser pago.									   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	If oAponta:nHrsPgs > 0

		cTpmarc:= 	"!!"
		//-- Corre todas as horas trabalhadas
        lIntegra := .T.
        //-- Obtem as Marcacoes da Tabela a serem Integradas
	 	aEval(oAponta:aHoras, { |x| If( !x[3] == "M", aadd( aTab, x ), Nil ) } )
		For nO := 1 To 	oAponta:nElem  Step 2

			nOPlus1 := ( nO + 1 )
			nHr1 := nHr2 := nHr3 := 0

		   	nHoras := fCalHoras(		oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
						  				oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
										oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
										oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
										@nHr1							,;	//05 -> <@>Horas Normais Apontadas
										@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
										Nil								,;	//07 -> Apontar Horas Noturnas
										oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
										@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
										oAponta:lAcreNot				;	//13 -> Apenas Acrescimo Noturno
								   )

			/*
			здддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁTotaliza as horas trabalhadas 					   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			nHorasTot		:= SomaHoras( nHorasTot	,	nHoras  )
			nHorasTot 		:= __TimeSum( nHorasTot,	0.00000 )
		    nHorasTot 		:= __TimeSum( nHorasTot,	0.00000 )
			//-- Se nao for a primeira vez
			If cTpMarc <> "!!"
			    //-- Confere se o periodo anterior foi realizado integralmente
				If ( oAponta:aApo[oaApo:HrTrbTabel,nIndice] 	>  SomaHoras( nHorasTot, nHorasTpMarc) )
			        //-- Caso contrario Abandona e nao realiza a integracao da jornada
			        lIntegra := .F.
			        Exit
                Endif
			Endif

			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁPara as Horas Trabalhadas Deve-se Sempre  ProcurarЁ
			Ёpela Entrada									   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			nIndice := aScan( oAponta:aSiglaMarc ,;
								IF(;
										( "S" $ oAponta:aHrTrab[ nO , 3 ] ) ,;
										( SubStr( oAponta:aHrTrab[ nO , 3 ] , 1 , 1 ) + "E" ),;
										oAponta:aHrTrab[ nO , 3 ];
								   );
							 )
			/*
			здддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁSe Nao Encontrou Flag Correspondente, assume     aЁ
			ЁEntrada      								       Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддды
			*/
			nIndice := Max( nIndice , 1 )

		    aNewHrTrab[1]	:= oAponta:aHrTrab[nO, 1]
		    aNewHrTrab[2]	:= oAponta:aHrTrab[nO, 2]

		   	//-- Se a Entrada for maior que a entrada da tabela
		   	If (  DataHora2Str( oAponta:aHrTrab[nO,1], oAponta:aHrTrab[nO, 2]	 )  >  aTab[nIndice, 17] )
		   		//-- Calcula a diferenca de horas

			 	nDifHoras:= fCalHoras(		oAponta:aHrTrab[nO,1]		,;	//01 -> Data da 1a Marcacao
											oAponta:aHrTrab[nO, 2]		,;	//02 -> 1a Marcacao
											aTab[nIndice, 1]			,;	//03 -> Data da 2a Marcacao
											aTab[nIndice, 2] 			,;	//04 -> Segunda Marcacao
											0							,;	//05 -> Horas Normais
											0							,;	//06 -> Horas Noturnas
											.T.							,;	//07 -> Considera Hora Noturna
											oAponta:dData				,;	//08 -> Data do Inicio do Adicional Noturno
											NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
											oAponta:nIniHnot			,;	//10 -> Inicio do Horario Noturno
											oAponta:nFimHnot			,;	//11 -> Final do Horario Noturno
											oAponta:nMinHnot			,;	//12 -> Minutos do Horario Noturno
											oAponta:lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
											NIL		 					 ;	//14 -> Periodo da Hora Noturna
									   )
				If !( nDifHoras > fTolerancia( oAponta:cTolaSai, nIndice )   )
				     //-- Limita a Entrada a Entrada da Tabela
				    aNewHrTrab[1]	:= aTab[nIndice, 1]
				    aNewHrTrab[2]	:= aTab[nIndice, 2]
				    nHorasTpMarc	:= SomaHoras( nHorasTpMarc, nDifHoras )
		   		Endif
		   	Endif

		    If nOPlus1 == oAponta:nElem

			   If ( DataHora2Str( aNewHrTrab[1], aNewHrTrab[2]	 )  >  aTab[nIndice, 17] )
	        	  lIntegra:= .F.
			      Exit
			   Endif
            Endif

            //-- Verifica se Ocorreu quebra do Tipo de Marcacao
			If cTpMarc <> oAponta:aHrTrab[nOPlus1	,	3]
			    //- Iguala o tipo de marcacao para posterior verificacao de quebra do mesmo
			    cTpMarc			:= oAponta:aHrTrab[nOPlus1	,3]
		   	Endif

		Next  nO

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Acrescenta as Horas Faltantes no Horario de SaidaЁ
		Ё da ultima marcacao.							   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		If (nHorasTot < oAponta:nHrsPgs)  .AND. !Empty(nHorasTot) .AND. lIntegra

			nDifHoras	:= SubHoras(oAponta:nHrsPgs, nHorasTot )
			dDataIni	:= oAponta:aHrTrab[nOPlus1	,	1]
			nHoraIni    := oAponta:aHrTrab[nOPlus1	,	2]

			//--
		 	nIndice:= ( Ascan(aTab,{|x| x[3] == oAponta:aHrTrab[nOPlus1	,	3] } ) )
				While nDifHoras > 0.00
					aNewHrTrab	:= RetFimTab(  dDataIni 						,;  //01 -> Data
				 	 							nHoraIni						,;  //02 -> Hora
				 	 							nDifHoras			 			,;  //03 -> Horas a Somar
				 	 							0								,;  //04 -> Horas de Intervalo
			 	 								.T.								,;	//05 -> Considera Horas Noturnas
												oAponta:dData					,;	//06 -> Data Inicial Para a Hora Noturna
												oAponta:nIniHnot				,;	//07 -> Inicio do Horario Noturno
												oAponta:nFimHnot				,;	//08 -> Final do Horario Noturno
												oAponta:nMinHnot				,;	//09 -> Minutos do Horario Noturno
												oAponta:lAcreNot				;	//10 -> Apenas Acrescimo Noturno
				 	 						 )

					//-- Se a data/hora calculada for superior ao limite da saМda para o tipo de marcacao
				 	//-- Deve-se limitar a saida da jornada
				 	If ( DataHora2Str( aNewHrTrab[1], aNewHrTrab[2] ) >  aTab[nIndice, 17] )
				 	    //-- Calcula a diferenca de horas a ser novamente integrada
						nDifHoras:= fCalHoras(		aNewHrTrab[1]			,;	//01 -> Data da 1a Marcacao
													aNewHrTrab[2]			,;	//02 -> 1a Marcacao
													aTab[nIndice, 1]		,;	//03 -> Data da 2a Marcacao
													aTab[nIndice, 2]		,;	//04 -> Segunda Marcacao
													0						,;	//05 -> Horas Normais
													0						,;	//06 -> Horas Noturnas
													.T.						,;	//07 -> Considera Hora Noturna
													oAponta:dData			,;	//08 -> Data do Inicio do Adicional Noturno
													NIL						,;	//09 -> <@>Horas de Acrescimo Noturno
													oAponta:nIniHnot		,;	//10 -> Inicio do Horario Noturno
													oAponta:nFimHnot		,;	//11 -> Final do Horario Noturno
													oAponta:nMinHnot		,;	//12 -> Minutos do Horario Noturno
													oAponta:lAcreNot		,;	//13 -> Apenas Acrescimo Noturno
													NIL		 				 ;	//14 -> Periodo da Hora Noturna
												)
				 	    //-- Limita a Saida da ultima marcacao a Saida da Tabela
				 	 	oAponta:aHrTrab[nOPlus1	,	1]	:= aTab[nIndice, 1]
						oAponta:aHrTrab[nOPlus1	,	2]	:= aTab[nIndice, 2]

					    nIndice := Min(nIndice + 2, Len(aTab) )

						//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
						oAponta:AddHrTrab(;
											aTab[ nIndice - 1 , 01 ]		,;
											aTab[ nIndice - 1 , 02 ]		,;
											aTab[ nIndice - 1 , 03 ]		,;
											aTab[ nIndice - 1 , 14 ]		,;
											aTab[ nIndice - 1 , 03 ]		 ;
									)

						oAponta:AddHrTrab(;
											aTab[ nIndice , 01 ]		,;
											aTab[ nIndice , 02 ]		,;
											aTab[ nIndice , 03 ]		,;
											aTab[ nIndice , 14 ]		,;
											aTab[ nIndice , 03 ]	 	;
										)
						dDataIni:= aTab[ nIndice - 1 , 01 ]
						nHoraIni:= aTab[ nIndice - 1 , 02 ]
						nOPlus1 := Len(oAponta:aHrTrab)
					Else
						oAponta:aHrTrab[nOPlus1	,	1]	:= aNewHrTrab[1]
						oAponta:aHrTrab[nOPlus1	,	2]	:= aNewHrTrab[2]
						nDifHoras := 0.00
					Endif

				End While
			  /*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁZera as Faltas, Atrasos e Saidas no Expediente        Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/

				aFill( oAponta:aApo[oaApo:Atrasos]		, 0 )
				aFill( oAponta:aApo[oaApo:MeiaFalta]	, 0 )
				aFill( oAponta:aApo[oaApo:SaidaAnte]	, 0 )
				aFill( oAponta:aApo[oaApo:SaidaExpe]	, 0 )

				IF (oAponta:lRF0ChkTable)
					aFill( oAponta:aApoHr[oaApo:Atrasos]	, {} )
					aFill( oAponta:aApoHr[oaApo:MeiaFalta]	, {} )
					aFill( oAponta:aApoHr[oaApo:SaidaAnte]	, {} )
					aFill( oAponta:aApoHr[oaApo:SaidaExpe]	, {} )
				Endif
		Endif
		oAponta:nLenHoras 	:= Len( oAponta:aHrTrab )
		oAponta:nElem 		:= IF( ( ( oAponta:nLenHoras%2 ) >= 1 ) , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )
	Endif
	For nO := 1 To oAponta:nElem Step 2
		nOPlus1 := ( nO + 1 )
		nHr1 := nHr2 := nHr3 := 0
		oAponta:CalcPerHr(  oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							@nHr1							,;	//05 -> <@>Horas Normais Apontadas
							@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
							NIL								,;	//07 -> Apontar Horas Noturnas
							oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
							@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot						,;	//14 -> Periodo Horario Noturno
							@aPerDia						;	//15 -> Periodo Horario Diurno
						   )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁPara as Horas Trabalhadas Deve-se Sempre  ProcurarЁ
		Ёpela Entrada									   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		nIndice := aScan( oAponta:aSiglaMarc ,;
							IF(;
									( "S" $ oAponta:aHrTrab[ nO , 3 ] ) ,;
									( SubStr( oAponta:aHrTrab[ nO , 3 ] , 1 , 1 ) + "E" ),;
									oAponta:aHrTrab[ nO , 3 ];
							   );
						 )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁSe Nao Encontrou Flag Correspondente, assume     aЁ
		ЁEntrada      								       Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		nIndice := Max( nIndice , 1 )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁApura as Horas Trabalhadas						   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( ( nHr1 > 0 ) .and. ( oAponta:aApo[oaApo:HrTrbTabel,nIndice] > 0 ) )
			nHr1 := Min( oAponta:aApo[oaApo:HrTrbTabel,nIndice] , nHr1 )
			IF ( oAponta:lRF0ChkTable )
				IF ( nHr1 == oAponta:aApo[ oaApo:HrTrbTabel , nIndice ] )
				    oAponta:aApoHr[ oaApo:HrTrbEfeti , nIndice ] := aClone( oAponta:aApoHr[ oaApo:HrTrbTabel , nIndice ] )
				Else
				    oAponta:aApoHr[ oaApo:HrTrbEfeti , nIndice ] := aClone( aPerDia )
				EndIF
			EndIF
		EndIF
		IF ( ( nHr2 > 0 ) .and. ( oAponta:aApo[oaApo:HrTrbNotTb,nIndice] > 0 ) )
			nHr2 := Min( oAponta:aApo[oaApo:HrTrbNotTb,nIndice] , nHr2 )
			IF ( oAponta:lRF0ChkTable )
				IF ( nHr2 == oAponta:aApo[ oaApo:HrTrbNotTb , nIndice ] )
				    oAponta:aApoHr[ oaApo:HrTrbNotEf , nIndice ]	:= aClone( oAponta:aApoHr[ oaApo:HrTrbNotTb , nIndice ] )
				Else
					oAponta:aApoHr[ oaApo:HrTrbNotEf , nIndice ]	:= aClone( aPerNot )
				EndIF
			EndIF
		EndIF
		oAponta:aHrTrab[ nO , 05 ] := nHr1
		oAponta:aHrTrab[ nO , 06 ] := nHr2
		oAponta:aHrTrab[ nO , 07 ] := nHr3
		oAponta:aApo[ oaApo:HrTrbEfeti , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbEfeti , nIndice] , oAponta:aHrTrab[ nO , 5 ] )
		oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbNotEf , nIndice] , oAponta:aHrTrab[ nO , 6 ] )

		//-- Se Existe o Identificador de Acrescimo Noturno e
		//-- Se Destaca o Acrescimo Noturno
		//---- Entao o Adicional Noturno contera o valor integral
		//---- e destacamos o acrescimo no identificador correspondente
		If oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
		   oAponta:aApo[ oaApo:AcreAuto  	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AcreAuto  	, nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
		   oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
		   oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
		Else
			IF ( oAponta:aHrTrab[ nO , 07 ] > 0 )
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
			Else
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
			EndIF
		Endif

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCalcula Prima Dominical, Descanso Laborado,	   Ё
		ЁFestivo Laborado.								   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		If ! ( (oAponta:lIntNtrab) .and. ( !oAponta:lMovelFree ) )
			fAdicionais(	oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							NIL								,;	//05 -> <@>Horas Normais Apontadas
							NIL								,;	//06 -> <@>Horas Noturnas Apontadas
							Nil								,;	//07 -> Apontar Horas Noturnas
							oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
							NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							nIndice							,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
							oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
				  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
				  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
					   )
		Endif
	Next nO

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁTotaliza as Horas de Intervalo.                   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF ( oAponta:cTipoDia == "S" )
		nHr1 := 0
		aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
		aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
		IF ( nHr1 > 0 )
			aEval( oAponta:aApo[oaApo:HrIntTabel],;
					{ |x,y| IF(	( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
								(oAponta:aApo[oaApo:HrIntEfeti,y] := SomaHoras(oAponta:aApo[oaApo:HrIntEfeti,y] , x ),;
								 IF( oAponta:lRF0ChkTable,;
								 	 oAponta:AlocaPer( oaApo:HrIntTabel , y , oaApo:HrIntEfeti , y , .T. ),;
								 	NIL;
								   );
							   	 ),;
								 NIL;
							   );
					  };
				  )

			aEval( oAponta:aApo[oaApo:HrIntNotTb],;
									{ |x,y| IF( ( "I" +  SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
												 (oAponta:aApo[oaApo:HrIntNotEf,y] := SomaHoras(oAponta:aApo[oaApo:HrIntNotEf,y] , x ),;
												  IF( oAponta:lRF0ChkTable,;
												  	 oAponta:AlocaPer( oaApo:HrIntNotTb , y , oaApo:HrIntNotEf , y , .T. ),;
												     NIL;
												     );
										   	     ),;
 	     										NIL;
											   );
									 };
								  )

			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁTotaliza as Horas de Acrescimo Noturno Destacado  Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			If oAponta:lAcreNot
				fAcreNot()
			Else
				aEval( oAponta:aApo[oaApo:HrIntNotEf], { |x,y| oAponta:aApo[oaApo:AdicNotAut,y] := SomaHoras(oAponta:aApo[oaApo:AdicNotAut,y] , x ) } )
			Endif

		EndIF
	EndIF

/*/
здддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Final do Calculo das Horas Trabalhadas         Ё
юдддддддддддддддддддддддддддддддддддддддддддддддды
здддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Totaliza as Horas Trabalhadas                    Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
nHr1 := 0
aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
/*/
здддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Totaliza as Horas Trabalhadas Tabela             Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
nHr2 := 0
aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x| nHr2 := SomaHoras( nHr2 , x ) } )
aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x| nHr2 := SomaHoras( nHr2 , x ) } )

IF ( nHr1 == 0 )  //-- Aponta Falta Integral
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁZera a Matriz de Apontamentos pois neste caso deveЁ
	Ёrao sem apontadas apenas as Faltas.               Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	aFill( oAponta:aApo[oaApo:Atrasos]		, 0 )
	aFill( oAponta:aApo[oaApo:MeiaFalta]	, 0 )
	aFill( oAponta:aApo[oaApo:SaidaAnte]	, 0 )
	aFill( oAponta:aApo[oaApo:SaidaExpe]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNorAu]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNorFx]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNorNa]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNotAu]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNotFx]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNotNa]	, 0 )
	IF (oAponta:lRF0ChkTable)
		aFill( oAponta:aApoHr[oaApo:Atrasos]	, {} )
		aFill( oAponta:aApoHr[oaApo:MeiaFalta]	, {} )
		aFill( oAponta:aApoHr[oaApo:SaidaAnte]	, {} )
		aFill( oAponta:aApoHr[oaApo:SaidaExpe]	, {} )
	Endif
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁNao Zera as Horas Extras pois estas podem ter sidoЁ
	Ёefetuadas Antes ou Depois do Expediente           Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF ( oAponta:lHnotFal ) //--Se Considerar a Hora Noturna Reduzida para a Apuracao das Faltas
		aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
															 		IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbTabel,y,oaApo:Falta,y,.T.),NIL);
			 } )
		aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
										 		       IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbNotTb,y,oaApo:Falta,y,.T.),NIL);
			  } )

	    aEval( oAponta:aApo[oaApo:HrIntTabel],;
				{ |x,y| IF(	( ( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
								   (oAponta:aApo[oaApo:FaltaInter,y] := SomaHoras(oAponta:aApo[oaApo:FaltaInter,y],x),;
								   	IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrIntTabel,y,oaApo:FaltaInter,y,.T.),;
								   	 NIL;
						  );
						),;
					    NIL;
					  );
		    };
		  )

    	aEval( oAponta:aApo[oaApo:HrIntNotTb],;
				{ |x,y| IF(	( 	( "I" + SubStr(oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
									(oAponta:aApo[oaApo:FaltaIntNt,y] := SomaHoras(oAponta:aApo[oaApo:FaltaIntNt,y] , x ),;
									 IF(	oAponta:lRF0ChkTable,;
									 		oAponta:AlocaPer(oaApo:HrIntNotTb,y, oaApo:FaltaIntNt,y,.T.),;
									        NIL;
						     		   );
					      	),;
					      	NIL;
					    	);
		      };
		  )

   	Else

		aEval( oAponta:aApo[oaApo:HrTrabTbNN] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y] , x ) ,;
							 						IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrabTbNN,y,oaApo:Falta,y,.T.),NIL);
							 					 };
 			 )
		aEval( oAponta:aApo[oaApo:HrIntTbNNt],;
				{ |x,y| IF(( ( "I" + SubStr(oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
							(oAponta:aApo[oaApo:FaltaInter,y] := SomaHoras(oAponta:aApo[oaApo:FaltaInter,y] , x),;
							IF( oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrIntTbNNt,y,oaApo:FaltaInter,y,.T.),;
							    NIL;
							  );
							),;
						    NIL;
						  );
			    };
			  )

	EndIF

EndIF

Return( NIL )

/*/
зддддддддддбдддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁApontaHeNoMvFree ЁAutorЁMarinaldo de Jesus Ё Data Ё17/06/2003Ё
цддддддддддедддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁApontar Horas Extras para Dias Nao Trabalhados para    RegrasЁ
Ё          Ёque nao Possuam Horario Movel Livre							 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL															 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ApontaHeNoMvFree()
Local nI
Local nP
Local nPPlus1
Local nIndice
//Local nHorasTot	:= 0
//Local nHorasTrab

oAponta:aHrTrab := {} //Aqui oAponta:aHrTrab tem a Mesma Estrutura de oAponta:aHoras
aEval( oAponta:aHoras , { |y| IF( ( y[3] == "M" ) , aAdd( oAponta:aHrTrab , aClone( y ) ) , NIL ) } )
oAponta:nLenHoras	:= Len( oAponta:aHrTrab )
oAponta:nElem		:= IF( oAponta:nLenHoras %2 >= 1 , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )

For nP := 1 To oAponta:nElem Step 2
	nPPlus1 := ( nP + 1 )
	//-- Indice para a matriz de apontamento oAponta:aApo.
	nIndice := Min( nP , oAponta:nTotMarcTab )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCalcula Prima Dominical, Descanso Laborado,	   Ё
		ЁFestivo Laborado.								   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		fAdicionais(	oAponta:aHrTrab[nP		,	1]	,;	//01 -> Data 1
						oAponta:aHrTrab[nP		,	2]	,;	//02 -> Hora 1
						oAponta:aHrTrab[nPPlus1	,	1]	,;	//03 -> Data 2
						oAponta:aHrTrab[nPPlus1	,	2]	,;	//04 -> Hora 2
						Nil								,;	//05 -> <@>Horas Normais Apontadas
						Nil								,;	//06 -> <@>Horas Noturnas Apontadas
						Nil								,;	//07 -> Apontar Horas Noturnas
						oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
						Nil								,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
						nIndice							,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
						oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
			  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
			  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
				   )

	nP += fExtras(	oAponta:aHrTrab[ nP			,	1 ]	,;	//01 -> Data da 1a Marcacao
					oAponta:aHrTrab[ nP			,	2 ]	,;	//02 -> Hora da 1a Marcacao
					oAponta:aHrTrab[ nPPlus1	,	1 ]	,;	//03 -> Data da 2a Marcacao
					oAponta:aHrTrab[ nPPlus1	,	2 ]	,;  //04 -> Hora da 2a Marcacao
					oAponta:aSiglaMarc[ nIndice ]		,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
					nIndice								,;	//06 -> Indice de oAponta:aApo
					.T.									,;	//07 -> 1o Dia do Apontamento
					.F.									,;	//08 -> Hora Extra Intervalo ( Entrada )
					Nil									,;  //09 -> Forca o Tipo do Dia como Trabalhado
					.F.									;	//10 -> Calcula Adicionais Especiais (Prima Dominical, etc...)
				  )

Next nP

oAponta:aHrTrab := {}

Return( NIL )

/*/
зддддддддддбдддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁApontaTrbMvFree	 ЁAutorЁMarinaldo de Jesus Ё Data Ё17/06/2003Ё
цддддддддддедддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁApontar Horas Trabalhadas, Extras, Saidas Antecipadas para TiЁ
Ё          Ёpo de Dia Trabalhado e Horario Movel Livre					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL															 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ApontaTrbMvFree()

Local aNewHrTrab	:= { Nil, Nil }
Local aPerNot		:= {}
Local aPerDia		:= {}
Local aHENot		:= {}
Local aAdicionais	:= {}

Local nIndice
Local nO
Local nOPlus1
Local nHr1
Local nHr2
Local nHr3
Local nHr4
Local nHr5
Local nHr6
Local nHoras	:=	0
Local nHorasTot := 	0

/*/
здддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Inicio do Calculo das Horas Trabalhadas        Ё
юдддддддддддддддддддддддддддддддддддддддддддддддды
	здддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁMonta o aHrTrab para Regra de Horario Movel   LiЁ
	Ёvre											 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:aHrTrab := {}
	oAponta:nElem := 0
	aEval(	oAponta:aHoras,	{ |x|	IF( x[3] == "M",;
											( ++oAponta:nElem, oAponta:AddHrTrab(	x[1]	 																	,;
																					x[2]	 																	,;
																					IF(oAponta:nElem%2>0,oAponta:aSiglaMarc[01],oAponta:aSiglaMarc[02]),;
																					x[14]																 		 ;
																		 		  );
										 	),;
										 	NIL;
							   			);
					 			};
	    )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁOrdena as Marcacoes do Dia com as Marcacoes da  TaЁ
	Ёbela											   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:SortaHrTrab()

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁPara as Horas Trabalhadas Deve-se Sempre  ProcurarЁ
	Ёpela Entrada									   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	nIndice := 1

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Totaliza as Horas Trabalhadas                    Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:ChkHrTDupl()
	oAponta:nElem := IF( ( ( oAponta:nLenHoras%2 ) >= 1 ) , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Ajusta as Horas Trabalhadas em funcao do Minimo  Ё
	Ё a ser pago.									   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	If oAponta:nHrsPgs > 0

		For nO := 1 To 	oAponta:nElem  Step 2

			nOPlus1 := ( nO + 1 )
			nHr1 	:= nHr2 := nHr3 := 0

		   	nHoras 	:= fCalHoras(		oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
						  				oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
										oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
										oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
										@nHr1							,;	//05 -> <@>Horas Normais Apontadas
										@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
										Nil								,;	//07 -> Apontar Horas Noturnas
										oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
										@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
										oAponta:lAcreNot				;	//13 -> Apenas Acrescimo Noturno
								   )

			/*
			здддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁTotaliza as horas trabalhadas 					   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			nHorasTot		:= SomaHoras( nHorasTot	,	nHoras  )
		Next  nO

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Acrescenta as Horas Faltantes no Horario de SaidaЁ
		Ё da ultima marcacao.							   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		If (nHorasTot < oAponta:nHrsPgs)  .AND. !Empty(nHorasTot)

			nDifHoras	:= SubHoras(oAponta:nHrsPgs, nHorasTot )

			aNewHrTrab	:= RetFimTab(   oAponta:aHrTrab[nOPlus1	,	1]  ,;  //01 -> Data
		 	 							oAponta:aHrTrab[nOPlus1	,	2] 	,;  //02 -> Hora
		 	 							nDifHoras			 			,;  //03 -> Horas a Somar
		 	 							0								,;  //04 -> Horas de Intervalo
	 	 								Nil								,;	//05 -> Considera Horas Noturnas
										oAponta:dData					,;	//06 -> Data Inicial Para a Hora Noturna
										oAponta:nIniHnot				,;	//07 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//08 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//09 -> Minutos do Horario Noturno
										oAponta:lAcreNot				;	//10 -> Apenas Acrescimo Noturno
		 	 						 )
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Substitui as Horas Trabalhadas pelas Calculadas  Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			oAponta:aHrTrab[nOPlus1	,	1]	:= aNewHrTrab[1]
			oAponta:aHrTrab[nOPlus1	,	2]	:= aNewHrTrab[2]
			nDifHoras 						:= 0.00

		Endif
	Endif

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Totaliza as Horas Trabalhadas                    Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	For nO := 1 To oAponta:nElem Step 2
		nOPlus1 := ( nO + 1 )
		nHr1 := nHr2 := nHr3 := 0
		oAponta:CalcPerHr(  oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							@nHr1							,;	//05 -> <@>Horas Normais Apontadas
							@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
							NIL								,;	//07 -> Apontar Horas Noturnas
							oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
							@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot						,;	//14 -> Periodo Horario Noturno
							@aPerDia						;	//15 -> Periodo Horario Diurno
						   )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Para Horario Movel Livre adotaremos ultima saida Ё
		Ё como indice para calculo do adicional noturno    Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		oAponta:aHrTrab[ nO , 05 ] := nHr1
		oAponta:aHrTrab[ nO , 06 ] := nHr2
		oAponta:aHrTrab[ nO , 07 ] := nHr3
		oAponta:aApo[ oaApo:HrTrbEfeti , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbEfeti , nIndice ] , oAponta:aHrTrab[ nO , 5 ] )
		oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
		IF ( oAponta:lRF0ChkTable )
			oAponta:aApoHr[ oaApo:HrTrbEfeti , nIndice ]:= aClone( aPerDia )
			oAponta:aApoHr[ oaApo:HrTrbNotEf , nIndice ]:= aClone( aPerNot )
		EndIF

		//-- Se Existe o Identificador de Acrescimo Noturno
		//-- Se Destaca o Acrescimo Noturno
		//-- Entao o Adicional Noturno contera o valor integral
		//-- e destacamos o acrescimo no identificador correspondente
		If oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
		   oAponta:aApo[ oaApo:AcreAuto  	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AcreAuto	  , nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
		   oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
		   oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
		Else
			IF ( oAponta:aHrTrab[ nO , 7 ] > 0 )
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
			Else
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
			EndIF
		Endif

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCalcula Prima Dominical, Descanso Laborado,	   Ё
		ЁFestivo Laborado.								   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		fAdicionais(	oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
						oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
						oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
						oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
						NIL								,;	//05 -> <@>Horas Normais Apontadas
						NIL								,;	//06 -> <@>Horas Noturnas Apontadas
						Nil								,;	//07 -> Apontar Horas Noturnas
						oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
						NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
						nIndice							,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
						oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
			  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
			  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
				   )

	Next nO

/*/
здддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Final do Calculo das Horas Trabalhadas         Ё
юдддддддддддддддддддддддддддддддддддддддддддддддды
здддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Totaliza as Horas Trabalhadas                    Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
nHr1 := 0
aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
nHr2 := 0
aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr2 := SomaHoras( nHr2 , x ) } )
nHr3 := SomaHoras( nHr1 , nHr2 )
/*/
здддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Totaliza as Horas Trabalhadas Tabela             Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
nHr4 := 0
aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x| nHr4 := SomaHoras( nHr4 , x ) } )
nHr5 := 0
aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x| nHr5 := SomaHoras( nHr5 , x ) } )
nHr6 := SomaHoras( nHr4 , nHr5 )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Apenas Quando o Periodo de Apuracao for Diario   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
IF ( oAponta:cPerHmov == "D" )

	IF ( nHr3 == 0 )//-- Aponta Falta Integral

	 		IF ( oAponta:lHnotFal ) //--Se Considerar a Hora Noturna Reduzida para a Apuracao das Faltas
				aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
															 		IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbTabel,y,oaApo:Falta,y,.T.),NIL);
				 										};
				 )
				aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
															IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbNotTb,y,oaApo:Falta,y,.T.),NIL);
				  										};
					 )
			Else
				aEval( oAponta:aApo[oaApo:HrTrabTbNN] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
								 					   		IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrabTbNN,y,oaApo:Falta,y,.T.),NIL);
		 		   										};
		 		     )
			EndIF

			//Apura as Horas Nao Realizadas
			aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x,y| oAponta:aApo[oaApo:HrNorNaoRe,y] := SomaHoras(oAponta:aApo[oaApo:HrNorNaoRe,y] , x ) } )
			aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x,y| oAponta:aApo[oaApo:HrNotNaoRe,y] := SomaHoras(oAponta:aApo[oaApo:HrNotNaoRe,y] , x ) } )

	ElseIF ( nHr3 > nHr6 )	//-- Aponta Hora Extra ap╒s o expediente

            //-- Preserva o Calculo dos Adicionais
			aAdicionais	:= { aClone( oAponta:aApo[oaApo:PrimDom] ), aClone( oAponta:aApo[oaApo:DescLab] ) , aClone( oAponta:aApo[oaApo:FestLab] ) }

			//-- Zera as Horas Extras Apontadas que serao recaculadas pela fHeMovel()
			oAponta:ZeraApo()

			//-- Apura e Grava as Horas Extras
			fHeMovel(	.T.,;																		//01 -> Ira considerar Horas Trabalhadas da Tabela
						(;
							 oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_FERIADO ];			//02 -> Dia em Questao Corresponde a Feriado
							 .and.;
							!oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_TRAB_FERIADO ];	//( Apenas se Funcionario nao trabalha em Feriado )
						 );
					 )

			//-- Recalcula Adicional Noturno
			aHeNot	:= fAdnMovel()

	    	//-- Se Existe o Identificador de Acrescimo Noturno
			//-- Se Destaca o Acrescimo Noturno
			//-- Entao o Adicional Noturno contera o valor integral

			If  oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
			    oAponta:aApo[oaApo:HrTrbNotEf , oAponta:nTotMarcTab ]	:= aHeNot[1]
			    oAponta:aApo[oaApo:AdicNotAut , oAponta:nTotMarcTab ]	:= oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]
		   		oAponta:aApo[oaApo:AdicNotAut , oAponta:nTotMarcTab]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotAut	, oAponta:nTotMarcTab],aHeNot[2])
			Else
				oAponta:aApo[oaApo:HrTrbNotEf , oAponta:nTotMarcTab ]	:= aHeNot[1]
				oAponta:aApo[oaApo:AdicNotAut , oAponta:nTotMarcTab ]	:= oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]
			EndIF

		    //-- Recalcula Horas Normais
			oAponta:aApo[oaApo:HrTrbEfeti,oAponta:nTotMarcTab]	:= SubHoras( nHr6 , oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab] )

			//-- Restaura o valor original da Prima Dominical
			oAponta:aApo[oaApo:PrimDom]	:= aClone(aAdicionais[1])
			oAponta:aApo[oaApo:DescLab]	:= aClone(aAdicionais[2])
			oAponta:aApo[oaApo:FestLab]	:= aClone(aAdicionais[3])

	ElseIF ( nHr3 < nHr6 ) //-- Aponta Saida Antecipada

		oAponta:aApo[oaApo:SaidaAnte,oAponta:nTotMarcTab ]	:= SubHoras( nHr6 , nHr3 )

		oAponta:SaidaAntPreAbo(oAponta:nTotMarcTab, oAponta:dData)
		//Aponta Horas Normais Nao Realizadas
		oAponta:aApo[oaApo:HrNorNaoRe,oAponta:nTotMarcTab ]	:= Max( SubHoras( nHr4 , nHr1 ) , 0 )
		oAponta:aApo[oaApo:HrNorNaoRe,oAponta:nTotMarcTab ]	:= Min(;
																		oAponta:aApo[ oaApo:SaidaAnte,oAponta:nTotMarcTab ] ,;
																		oAponta:aApo[ oaApo:HrNorNaoRe,oAponta:nTotMarcTab ] ;
													   			   )
		//Aponta Horas Noturnas Nao Realizadas
		oAponta:aApo[oaApo:HrNotNaoRe,oAponta:nTotMarcTab ]	:= Max( SubHoras( nHr5 , nHr2 ) , 0 )
		oAponta:aApo[oaApo:HrNotNaoRe,oAponta:nTotMarcTab ]	:= Min(;
																		oAponta:aApo[ oaApo:SaidaAnte,oAponta:nTotMarcTab ] ,;
																		oAponta:aApo[ oaApo:HrNotNaoRe,oAponta:nTotMarcTab ];
													   			  )

	EndIF

EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁAvalAponta  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё13/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁAvaliar os Apontamentos Efetuados                            Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL															 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function AvalAponta()

Local lAponFer
Local lHeAutoriza

Local nW
Local nPos
Local nPos1
Local nIndice
Local nHr1
Local nHr2
Local nHr3
Local nHr4
Local nHr5
Local nHr6
Local nHrTotNot

/*/
зддддддддддддддддддддддддддддддддддддддддд©
ЁInicio da Apuracao Final das Horas.(OperaЁ
Ёracao Pente Fino).					      Ё
юддддддддддддддддддддддддддддддддддддддддды
/*/
For nW := 1 To oAponta:nTotMarcTab

    /*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem o Total de Horas Noturnas Realizadas consideran Ё
	Ёdo o Acrescimo Noturno.							   Ё
	ЁOBS: Uso exclusivo no calculo de horas nao realizadas.Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/

	nHrTotNot:= oAponta:aApo[ oaApo:HrTrbNotEf	, nW ]

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁVerifica se as Horas Extras sao Autorizadas           Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF ( oAponta:cTipoDia == "S" )
		IF !( lHeAutoriza := ( oAponta:aSiglaMarc[nW] $ oAponta:cPagHext ) )
			IF ( ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 ) .and. oAponta:aSiglaMarc[nW] == "1S" )
				lHeAutoriza := ( "2S" $ oAponta:cPagHext )
			EndIF
		EndIF
	Else
		lHeAutoriza := ( oAponta:cTipoDia $ oAponta:cPgHeDnt )
	EndIF

	//-- Verifica se para funcionario em ferias as horas extras sao autorizadas
	IF( (lAponFer := ( oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_APON_FERIAS ] ) ))
	   lHeAutoriza:= ( oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_HE_AUTO_FER ] )
	Endif

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁInicio da Apuracao Para Dias Nao Trabalhados. Quando oЁ
	ЁTipo do Dia for nao Trabalhado e Tiver passado   Pelo Ё
	ЁApontamento               					   		   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
			IF (;
					( oAponta:cTipoDia != "S" );
					.and.;
					( oAponta:nIntTab > 0 );
					.and.;
					!Empty( oAponta:aHoras );
				 )

	            /*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁZera as Faltas, Atrasos e Saidas no Expediente        Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:aApo[ oaApo:Atrasos		, nW ]	:= 0
				oAponta:aApo[ oaApo:SaidaAnte	, nW ]	:= 0
				oAponta:aApo[ oaApo:SaidaExpe	, nW ]	:= 0
				oAponta:aApo[ oaApo:Falta 		, nW ]	:= 0
				oAponta:aApo[ oaApo:FaltaInter	, nW ]	:= 0
				oAponta:aApo[ oaApo:FaltaIntNt	, nW ]	:= 0
				oAponta:aApo[ oaApo:MeiaFalta	, nW ]	:= 0

				IF !( oAponta:lIntNtrab )

		            /*/
					здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁConsidera as Horas Apontadas como Sendo Horas Extras  Ё
					юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					oAponta:aApo[ oaApo:HeNormal		, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNormal	, nW ]	,;
																				oAponta:aApo[  oaApo:HrTrbEfeti	, nW ]	 ;
																	 		)
					oAponta:aApo[ oaApo:HeNotAutor	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNotAutor	, nW ]	,;
																				oAponta:aApo[  oaApo:HrTrbNotEf	, nW ]   ;
																	 		)
					oAponta:aApo[ oaApo:AdicHeNotA	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:AdicHeNotA 	, nW ]	,;
																				oAponta:aApo[  oaApo:AdicNotAut	, nW ]	 ;
																	 		)
		            /*/
					здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
					ЁVerifica se Paga o Intervalo como Horas Extras em DiasЁ
					ЁNao Trabalhados									   Ё
					юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
					/*/
					IF ( "S" $ oAponta:aSiglaMarc[nW] )

				        /*/
						здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁOrdena aHoras em Ordem Decrescente de Marcacoes   paraЁ
						Ёverificar se a Ultima Marcacao e' maior que o  HorarioЁ
						Ёda Primeira Saida.                                    Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						oAponta:SortaHoras( { |x,y| ( x[17] + x[3] ) > ( y[17] + y[3] ) } )

						nPos	:= aScan( oAponta:aHoras , { |x| x[3] == oAponta:aSiglaMarc[nW] } )
		  				nPos1	:= aScan( oAponta:aHoras , { |x| x[3] == "M" } )

		  				nIndice := Min( nW + 1 , oAponta:nTotMarcTab ) //Indice correspondente a posicao Intervalo em oAponta:aApo

				        /*/
						здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁQuando Pagar Horas Extras No Intervalo em Dias Nao TraЁ
						Ёbalhados e funcionario Tiver Efetuado a marcacao de InЁ
						ЁTervalo                                               Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						IF (;
								( ( ( "I" + SubStr( oAponta:aSiglaMarc[nW] , 01 , 01 ) ) $ oAponta:cPagInt ) .and. ( oAponta:cPgIntNTrb == "S"  ) ) .or.	;
								( ( ( "I" + SubStr( oAponta:aSiglaMarc[nW] , 01 , 01 ) ) $ oAponta:cPagNotInt ) .and. ( oAponta:cPgNotINTrb == "S" ) )	;
							);
						   .and. ( nPos1 > 0 ) .and. ( nPos > 0 ) ;
						   .and. ( oAponta:aHoras[nPos1,17] > oAponta:aHoras[nPos,17] ) .and. ;
						   ( nPos := 0  , aEval( oAponta:aHoras, { |x| IF( x[3] == "M",nPos++,NIL ) } ) , ( nPos > 2 .and. nPos%2 == 0 ) )

					        /*/
							здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁRestaura Ordem do aHoras                              Ё
							юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							oAponta:SortaHoras()

							nHr1 := nHr2 := nHr3 := nHr4 := nHr5 := nHr6 := 0

							nHr1 := SomaHoras( nHr1 , oAponta:aApo[ oaApo:HeIntNorAu	, nW 		] )
							nHr1 := SomaHoras( nHr1 , oAponta:aApo[ oaApo:HeIntNorAu	, nIndice	] )
							nHr2 := SomaHoras( nHr2 , oAponta:aApo[ oaApo:HeIntNotAu	, nW 		] )
							nHr2 := SomaHoras( nHr2 , oAponta:aApo[ oaApo:HeIntNotAu	, nIndice	] )

							nHr3 := SomaHoras( nHr3 , oAponta:aApo[ oaApo:HrIntTabel	, nW 	  	] )
							nHr3 := SomaHoras( nHr3 , oAponta:aApo[ oaApo:HrIntTabel	, nIndice 	] )
							nHr4 := SomaHoras( nHr4 , oAponta:aApo[ oaApo:HrIntNotTb	, nW 	  	] )
							nHr4 := SomaHoras( nHr4 , oAponta:aApo[ oaApo:HrIntNotTb	, nIndice 	] )

				            /*/
							здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁSe nao foram Apontadas Horas Extras de Intervalo consiЁ
							Ёdera as Horas de Intervalo da Tabela				   Ё
							юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							IF ( ( nHr5 := SomaHoras( nHr1 , nHr2 ) ) == 0 )

								oAponta:aApo[  oaApo:HeIntNorAu , nW ]	:=	oAponta:aApo[  oaApo:HrIntTabel	, nW ]
								oAponta:aApo[  oaApo:HeIntNotAu , nW ]	:= 	oAponta:aApo[  oaApo:HrIntNotTb	, nW ]

								/*/
								здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
								ЁApura o Adicional Noturno sobre as Horas de Intervalo Ё
								юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
								/*/
								oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	,;
																						oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	 ;
																		 			)
				            /*/
							здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁCaso Contrario as Horas Extras de Intervalo serao tranЁ
							Ёsformadas em Horas Extras Normais e a Diferenca  entreЁ
							Ёas Horas de Intervalo e as Horas   Extras de IntervaloЁ
							Ёserao pagas como Horas Extras de Intervalo            Ё
							юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							ElseIF ( nHr5 < ( nHr6 := SomaHoras( nHr3 , nHr4 ) ) )

								oAponta:aApo[ oaApo:HeNormal , nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNormal	, nW ]	,;
												   									oAponta:aApo[  oaApo:HeIntNorAu	, nW ]	 ;
																	 			)

								oAponta:aApo[ oaApo:HeNormal , nIndice ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNormal	, nIndice ]	,;
													   										oAponta:aApo[  oaApo:HeIntNorAu	, nIndice ]	 ;
																					 	)

								oAponta:aApo[ oaApo:HeIntNorAu	, nW ]		:= 0
								oAponta:aApo[ oaApo:HeIntNorAu	, nIndice ]	:= 0

								oAponta:aApo[ oaApo:HeIntNorAu	, nW ]	:= Max( SubHoras( nHr3 , nHr1 ) , 0 )

								oAponta:aApo[ oaApo:HeNotAutor	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNotAutor	, nW ]	,;
																						oAponta:aApo[  oaApo:HeIntNotAu	, nW ]   ;
																		 			)

								oAponta:aApo[ oaApo:HeNotAutor	, nIndice ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNotAutor	, nIndice ]	,;
																							oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	 ;
																			 			)

								oAponta:aApo[  oaApo:HeIntNotAu	, nW ]		:= 0
								oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	:= 0

								oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	:= Max( SubHoras( nHr4 , nHr2 ) , 0 )

								/*/
								здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
								ЁApura o Adicional Noturno sobre as Horas de Intervalo Ё
								юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
								/*/
								oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	,;
																						oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	 ;
																		 			)

				            /*/
							здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁMas se as Horas Extras de Intervalo forem maiores   ouЁ
							Ёiguais as Horas da Tabela e porque as Horas foram  corЁ
							Ёridas e neste caso deverao ser Zeradas                Ё
							юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							ElseIF nHr5 >= nHr6
					            /*/
								здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
								ЁSe as Horas Extras do Intervalo forem maiores ou  iguaЁ
								Ёis as Horas de Intervalo, funcionario nao Efetuou  MarЁ
								Ёcacoes. Dessa forma, as Horas Extras Sao Corridas.    Ё
								юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
								/*/
								oAponta:aApo[  oaApo:HeIntNorAu	, nW ]		:= 0
								oAponta:aApo[  oaApo:HeIntNotAu	, nW ]		:= 0
								oAponta:aApo[  oaApo:HeIntNorAu	, nIndice ]	:= 0
								oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	:= 0
							EndIF

						Else

				            /*/
							здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁCaso Contrario Zera as Horas Extras de Intervalo      Ё
							юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
							/*
							oAponta:aApo[  oaApo:HeIntNorAu	, nW ]	:= 0
							oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	:= 0
							oAponta:aApo[  oaApo:HeIntNorAu	, nIndice ]	:= 0
							oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	:= 0
							*/

						EndIF

					EndIF
                Endif
	            /*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁZera as Horas Apontadas pois ja foram Convertidas   emЁ
				ЁHoras Extras 										   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				oAponta:aApo[  oaApo:HrTrbEfeti	, nW ]	:= 0
				oAponta:aApo[  oaApo:HrIntEfeti	, nW ]	:= 0
				oAponta:aApo[  oaApo:HrTrbNotEf	, nW ]	:= 0
				oAponta:aApo[  oaApo:HrIntNotEf	, nW ]	:= 0
				oAponta:aApo[  oaApo:AdicNotNau	, nW ]	:= 0
				oAponta:aApo[  oaApo:AdicNotAut	, nW ]	:= 0
			EndIF

		    /*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁFinal  da Apuracao Para Dias Nao Trabalhados. Quando oЁ
			ЁTipo do Dia for nao Trabalhado e Tiver passado   Pelo Ё
			ЁApontamento               					   		   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
			зддддддддддддддддддддддддддддддддддддддддд©
			ЁInicio da Apuracao dos Adicionais   NoturЁ
			Ёnos									  Ё
			юддддддддддддддддддддддддддддддддддддддддды
			зддддддддддддддддддддддддддддддддддддддддд©
			ЁVerifica se o Adicional Noturno e  AutoriЁ
			Ёzado									  Ё
			юддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF ( oAponta:cAdNot == "N" )
				oAponta:aApo[oaApo:AdicNotNau,nW]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotNau,nW],oAponta:aApo[oaApo:AdicNotAut,nW])
				oAponta:aApo[oaApo:AdicNotAut,nW]	:= 0
			EndIF
			/*/
			зддддддддддддддддддддддддддддддддддддддддд©
			ЁVerifica se o Adicional Noturno Sobre  HoЁ
			Ёras Extras e Autorizado				  Ё
			юддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF ( ( oAponta:cAdNotEx == "N" .or. !( lHeAutoriza ) ) .or. ( oAponta:lFaixaHE ) )
			    //--Calcula e soma total de adic sob He not em adic sobre He not nao
			   	fSomaApoHE(	@oAponta:aApo[oaApo:AdicHeNotN,nW]	,; //Valor Acumulado com HE nao autorizadas
				           	@oAponta:aApo[oaApo:AdicHeNotA,nW]	,; //Valor Integral (Nao zera mas contera o valor autorizado)
				           	@oAponta:aApo[oaApo:AdicHeNotF,nW] 	 ; //Valor Autorizado (sera zerado)
				           )

			EndIF
    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁFinal da Apuracao dos Adicionais NoturnosЁ
	юддддддддддддддддддддддддддддддддддддддддды
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁInicio da Apuracao de Faltas, Atrasos,SaiЁ
	Ёdas Antecipadas/Expediente e Horas Trab. Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/
			//Indice correspondente a posicao Intervalo em oAponta:aApo
			nIndice := Min( nW + 1 , oAponta:nTotMarcTab )
			IF ( nW == ( oAponta:nTotMarcTab - 1 ) )
				//Aqui para verificar qual o Ultimo Intervalo Valido
				nIndice := Max( 1 , oAponta:nTotMarcTab - 2 )
			EndIF
			//-- Se Teve Meia-Falta, zera as Horas de Intervalo correspondente e Gera como Falta Intervalo
			//-- Mas Somente se Nao Gerou He para o Intervalo
			IF ( oAponta:aApo[oaApo:MeiaFalta,nW] > 0 )  			.AND. ;
			   	Empty(oAponta:aApo[oaApo:HeIntNorAu,Min( nIndice + 1 , oAponta:nTotMarcTab )]) 	.AND. ;
			   	Empty(oAponta:aApo[oaApo:HeIntNotAu,Min( nIndice + 1 , oAponta:nTotMarcTab )])
				IF ( oAponta:cIntFalt == "S" ) //So Desconta Quando Definido na Regra de Apontamento
					IF ( oAponta:lHnotFal ) //-- Se considerar a Hora Noturna Reduzida para a Apuracao das Faltas
						oAponta:aApo[oaApo:FaltaInter,nIndice]	:= SomaHoras( oAponta:aApo[oaApo:FaltaInter,nIndice], oAponta:aApo[oaApo:HrIntEfeti,nIndice] )
						oAponta:aApo[oaApo:FaltaIntNt,nIndice]	:= SomaHoras( oAponta:aApo[oaApo:FaltaIntNt,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] )
						IF ( oAponta:lRF0ChkTable )
							oAponta:AlocaPer( oaApo:HrIntEfeti , nIndice , oaApo:FaltaInter , nIndice , .T. )
							oAponta:AlocaPer( oaApo:HrIntNotEf , nIndice , oaApo:FaltaIntNt , nIndice , .T. )
						EndIF
						oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotAut,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] ) , 0 )
						oAponta:aApo[oaApo:AdicNotNau,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotNau,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] ) , 0 )
					Else
						oAponta:aApo[oaApo:FaltaInter,nIndice]	:= SomaHoras( oAponta:aApo[oaApo:FaltaInter,nIndice], oAponta:aApo[oaApo:HrIntTbNNt,nIndice] )
						IF ( oAponta:lRF0ChkTable )
							oAponta:AlocaPer(oaApo:HrIntTbNNt , nIndice , oaApo:FaltaInter , nIndice , .T.)
						EndIF
						oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotAut,nIndice], oAponta:aApo[oaApo:HrIntTbNNt,nIndice] ) , 0 )
						oAponta:aApo[oaApo:AdicNotNau,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotNau,nIndice], oAponta:aApo[oaApo:HrIntTbNNt,nIndice] ) , 0 )
					EndIF
				EndIF
				oAponta:aApo[oaApo:HrIntEfeti,nIndice]	:= 0
				oAponta:aApo[oaApo:HrIntNotEf,nIndice]	:= 0
			EndIF

			//-- Gera Pagamento de Horas Trabalhadas
			IF ( oAponta:cHrNorm == "S" )

				/*/
				зддддддддддддддддддддддддддддддддддддддддд©
				ЁInicio da Apuracao das Horas Nao  RealizaЁ
				Ёdas para Horario Movel Nao Livre		  Ё
				юддддддддддддддддддддддддддддддддддддддддды
				/*/
		            IF ( ( oAponta:cTipoDia == "S" ) .and. !( ( oAponta:cHrMovel == "S" ) .and. ( oAponta:nAntMove + oAponta:nPosMove ) == 0 ) )
			            	/*/
							здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁCalcula Horas Nao Realizadas Normais				   Ё
							юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
			        		oAponta:aApo[ oaApo:HrNorNaoRe , nW ]	:= Max(;
		            															(;
		            																SubHoras(	oAponta:aApo[ oaApo:HrTrbTabel	, nW ],;
		            																		 	oAponta:aApo[ oaApo:HrTrbEfeti	, nW ];
		            																		  );
		            															 ),;
		            															0;
		            														  )
							/*/
							здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
							ЁCalcula Horas Nao Realizadas Noturnas				   Ё
							юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
							/*/
			        	   	oAponta:aApo[ oaApo:HrNotNaoRe , nW ]	:= Max(;
		            															(;
		            		 														SubHoras(	oAponta:aApo[ oaApo:HrTrbNotTb	, nW ],;
		            																		 	nHrTotNot;
		            			 															  );
		            															 ),;
		            				  											0;
		            														  )

		            EndIF
				/*/
   				зддддддддддддддддддддддддддддддддддддддддд©
				ЁFinal da Apuracao das Horas Nao   RealizaЁ
				Ёdas									  Ё
				юддддддддддддддддддддддддддддддддддддддддды
				/*/

			EndIF

	/*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁFinal da Apuracao de Faltas, Atrasos, SaiЁ
	Ёdas Antecipadas/Expediente e Horas Trab. Ё
	юддддддддддддддддддддддддддддддддддддддддды
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁInicio da Apuracao das Horas Extras      Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/
			//-- Para uso de Faixa de Horarios de HE autorizadas
			//-- Desmembramos as Horas "Autorizadas" (pois todas sao a principio)
			//-- em Autorizadas/Nao autorizadas
			IF ( oAponta:lFaixaHE )
				//-- Recalcula os valores de HE
		        // Normal
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNorNAut,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNormal,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNormalFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
				// Noturna
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNotNaoAu,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNotAutor,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNoturnFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
	   		    // Intervalo
	   			fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNorNa,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNorAu,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNorFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
				// Intervalo Noturno
				fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNotNa,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNotAu,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNotFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
			EndIF

			//-- Nona Hora ( Apenas Quando nao for Horario Movel Livre )
			IF !( oAponta:lMovelFree )
				IF (;
						( lHeAutoriza );
						.or.;
						( oAponta:lFaixaHE );
					 )
					IF ( nW == IF( ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 ) .and. oAponta:aSiglaMarc[nW] == "1S" , 2 , 4 ) ) //Horas Extras Autorizadas apos o Expediente
						IF !( oAponta:lFaixaHE )
							//Subtrai a Nona Hora das Horas Extras Noturna ap╒s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNotAutor,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotAutor,nW] >= oAponta:nNonaHor ) )
								oAponta:aApo[oaApo:HeNotAutor,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotAutor,nW] , oAponta:nNonaHor )
								oAponta:nNonaHor					:= 0
							Else
								oAponta:nNonaHor					:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotAutor,nW] )
								oAponta:aApo[oaApo:HeNotAutor,nW]	:= 0
							EndIF
							//Subtrai a Nona Hora das Horas Extras ap╒s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNormal,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNormal,nW] >= oAponta:nNonaHor ) )
								oAponta:aApo[oaApo:HeNormal,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNormal,nW] , oAponta:nNonaHor )
								oAponta:nNonaHor				:= 0
							Else
								oAponta:aApo[oaApo:HeNormal,nW]	:= 0
							EndIF
						Else
							//Subtrai a Nona Hora das Horas Extras Noturna ap╒s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNotAutor,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotAutor,nW] >= oAponta:nNonaHorAut ) )
								//-- Subtrai das Horas Noturnas a Nona Hora Autorizada (Pois so devo pagar a diferenca)
								oAponta:aApo[oaApo:HeNotAutor,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotAutor,nW] , oAponta:nNonaHorAut )
								//-- Subtrai da Nona Hora a Nona Hora Autorizada
								oAponta:nNonaHor	:= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut )
								oAponta:nNonaHorAut	:= 0
							Else
								oAponta:nNonaHorAut	:= SubHoras( oAponta:nNonaHorAut	, oAponta:aApo[oaApo:HeNotAutor,nW] )
								oAponta:nNonaHor   	:= SubHoras( oAponta:nNonaHor		, oAponta:aApo[oaApo:HeNotAutor,nW] )
								oAponta:aApo[oaApo:HeNotAutor,nW] := 0
							EndIF
							//Subtrai a Nona Hora das Horas Extras ap╒s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNormal,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNormal,nW] >= oAponta:nNonaHorAut ) )
								oAponta:aApo[oaApo:HeNormal,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNormal,nW] , oAponta:nNonaHorAut )
								oAponta:nNonaHor				:=  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut )
								oAponta:nNonaHorAut				:= 0
							Else
								oAponta:nNonaHorAut				:= SubHoras( oAponta:nNonaHorAut , oAponta:aApo[oaApo:HeNormal,nW] )
								oAponta:nNonaHor   				:= SubHoras( oAponta:nNonaHor    , oAponta:aApo[oaApo:HeNormal,nW] )
								oAponta:aApo[oaApo:HeNormal,nW]	:= 0
							EndIF
						EndIF
					EndIF
				EndIF
			EndIF

			IF  (;
					!(;
						( lHeAutoriza );
					);
					.or.;
					( oAponta:lFaixaHE );
				 )
			    IF !( oAponta:lFaixaHE )
					oAponta:aApo[oaApo:HeNorNAut,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nW],oAponta:aApo[oaApo:HeNormal,nW])
					oAponta:aApo[oaApo:HeNormal,nW]		:= 0
					oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeNotNaoAu,nW],oAponta:aApo[oaApo:HeNotAutor,nW])
					oAponta:aApo[oaApo:HeNotAutor,nW]	:= 0
					oAponta:aApo[oaApo:HeIntNorNa,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorNa,nW],oAponta:aApo[oaApo:HeIntNorAu,nW])
					oAponta:aApo[oaApo:HeIntNorAu,nW]	:= 0
					oAponta:aApo[oaApo:HeIntNotNa,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNotNa,nW],oAponta:aApo[oaApo:HeIntNotAu,nW])
					oAponta:aApo[oaApo:HeIntNotAu,nW]	:= 0
				EndIF
				IF ( nW == IF( ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 ) .and. oAponta:aSiglaMarc[nW] == "1S" , 2 , 4 ) ) //Horas Extras Nao Autorizadas apos o Expediente
					IF !( oAponta:lFaixaHE )
						//Subtrai a Nona Hora das Horas Extras Noturna ap╒s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNotNaoAu,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotNaoAu,nW] >= oAponta:nNonaHor ) )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotNaoAu,nW] , oAponta:nNonaHor )
							oAponta:nNonaHor					:= 0
						Else
							oAponta:nNonaHor	:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotNaoAu,nW] )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= 0
						EndIF
						//Subtrai a Nona Hora das Horas Extras ap╒s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNorNAut,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNorNAut,nW] >= oAponta:nNonaHor ) )
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNorNAut,nW] , oAponta:nNonaHor )
							oAponta:nNonaHor					:= 0
						Else
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= 0
						EndIF
				    Else
				    	//Subtrai a Nona Hora das Horas Extras Noturna ap╒s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNotNaoAu,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotNaoAu,nW] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) ) )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotNaoAu,nW] , SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
							oAponta:nNonaHor					:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
						Else
							oAponta:nNonaHor					:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotNaoAu,nW] )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= 0
						EndIF
						//Subtrai a Nona Hora das Horas Extras ap╒s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNorNAut,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNorNAut,nW] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut) ) )
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNorNAut,nW] ,  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
							oAponta:nNonaHor					:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
						Else
							oAponta:nNonaHor					:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNorNAut,nW] )
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= 0
						EndIF
					EndIF
				EndIF
			EndIF

			//-- Se Nao Houver Pagamento de Horas Extras Noturnas
			IF SubStr( oAponta:cCodHe , 1 , 1 ) == SubStr( oAponta:cCodHe , 3 , 1 )
				oAponta:aApo[oaApo:HeNormal,nW]  	:= SomaHoras(oAponta:aApo[oaApo:HeNormal,nW],oAponta:aApo[oaApo:HeNotAutor,nW])
				oAponta:aApo[oaApo:HeNotAutor,nW]	:= 0
				oAponta:aApo[oaApo:HeNorNAut,nW] 	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nW],oAponta:aApo[oaApo:HeNotNaoAu,nW])
				oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= 0
				oAponta:aApo[oaApo:HeIntNotAu,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorAu,nW],oAponta:aApo[oaApo:HeIntNorAu,nW])
				oAponta:aApo[oaApo:HeIntNotAu,nW]	:= 0
				oAponta:aApo[oaApo:HeIntNorNa,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorNa,nW],oAponta:aApo[oaApo:HeIntNotNa,nW])
				oAponta:aApo[oaApo:HeIntNotNa,nW]	:= 0
			EndIF

	/*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁFinal da Apuracao das Horas Extras       Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/

Next nW
/*/
зддддддддддддддддддддддддддддддддддддддддд©
ЁFinal da Operacao Pente Fino			  Ё
юддддддддддддддддддддддддддддддддддддддддды
/*/

Return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁPutApontaResЁ Autor ЁMarinaldo de Jesus    Ё Data Ё13/06/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCarregar os Apontamentos em aResult                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL															 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function PutApontaRes( aEvesIds ) //01 -> Array com os Eventos que possuem Identificadores

Local cTpHeIntNr := GetTpExInt( SubStr( oAponta:cCodHe , 3 , 1 ) , .F. )	//Normal
Local cTpHeIntNt := GetTpExInt( SubStr( oAponta:cCodHe , 1 , 1 ) , .T. ) 	//Noturna

Local nW
Local nPos

Local cCustoGrv
Local cFuncaoGrv
Local cDepto
Local cPosto
Local cProcesso
Local cPeriodo
Local cRoteiro
Local cNumPagto
//Assume valores padroes para classificacao do apontamento
If ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_DATA_APO] == oAponta:dDataApo } ) ) > 0 )
	cCustoGrv 	:= oAponta:aTabCalend[ nPos , CALEND_POS_CC 	 	]
	cFuncaoGrv 	:= oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC 	]
	cDepto		:= oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO   	]
	cPosto		:= oAponta:aTabCalend[ nPos , CALEND_POS_POSTO 	 	]
	cProcesso	:= oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO	]
	cPeriodo	:= oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO 	]
	cRoteiro	:= oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO 	]
	cNumPagto	:= oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO 	]
Else
	cCustoGrv 	:= SRA->RA_CC
	cFuncaoGrv 	:= SRA->RA_CODFUNC
	cDepto		:= SRA->RA_DEPTO
	cPosto		:= SRA->RA_POSTO
	cProcesso	:= SRA->RA_PROCES
	cPeriodo	:= oPeriodo:cPeriodo
	cRoteiro	:= oPeriodo:cRoteiro
	cNumPagto	:= oPeriodo:cNumPagto
EndIf
/*/
зддддддддддддддддддддддддддддддддддддддддд©
ЁInicio da Geracao das Horas Apontadas    Ё
юддддддддддддддддддддддддддддддддддддддддды
/*/
For nW := 1 To oAponta:nTotMarcTab
	/*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁVerificacao do Centro de Custo de  AcordoЁ
	Ёcom o Tipo de Marcacao					  Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF (;
			( ( nPos := aScan( oAponta:aHoras , { |x| x[8] == oAponta:aSiglaMarc[ nW ] .and. x[3] == "M" } ) ) == 0 );
			.or.;
			Empty( oAponta:aHoras[ nPos , 14 ] );
		)
		nPos := aScan( oAponta:aHoras , { |x| x[3] == oAponta:aSiglaMarc[ nW ] } )
	EndIF

	//-- Retorna Centro de Custo Para a Gravacao do Apontamento
	IF ( nPos > 0 )

		oAponta:cCustoGrv 	:= oAponta:aHoras[ nPos , 14 ]
		oAponta:cFuncaoGrv 	:= oAponta:aHoras[ nPos , 24 ]
		oAponta:cDepto		:= oAponta:aHoras[ nPos , 23 ]
		oAponta:cPosto		:= oAponta:aHoras[ nPos , 22 ]
		oAponta:cProcesso	:= oAponta:aHoras[ nPos , 18 ]
		oAponta:cPeriodo	:= oAponta:aHoras[ nPos , 19 ]
		oAponta:cRoteiro	:= oAponta:aHoras[ nPos , 20 ]
		oAponta:cNumPagto	:= oAponta:aHoras[ nPos , 21 ]

		IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == oAponta:aSiglaMarc[ nW ] .and. x[CALEND_POS_DATA] == oAponta:aHoras[ nPos , 1 ] } ) ) > 0 )
			IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC )
				oAponta:cCustoGrv 	:= oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
			EndIF
			IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ] ) .and. ( oAponta:cFuncaoGrv == SRA->RA_CODFUNC )
				oAponta:cFuncaoGrv	:= oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ]
			ENDIF
			IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ] ) .and. ( oAponta:cDepto == SRA->RA_DEPTO )
				oAponta:cDepto	:= oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ]
			ENDIF
			IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ] ) .and. ( oAponta:cPosto == SRA->RA_POSTO )
				oAponta:cPosto	:= oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ]
			ENDIF
			IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO ] ) .and. ( oAponta:cProcesso == SRA->RA_PROCES )
				oAponta:cProcesso:= oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO]
			ENDIF
			IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ])
				oAponta:cPeriodo	:= oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ]
			ENDIF
			IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ])
				oAponta:cRoteiro	:= oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ]
			ENDIF
			IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ])
				oAponta:cNumPagto	:= oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ]
			ENDIF
		Endif

	Else

		oAponta:cCustoGrv 	:= cCustoGrv
		oAponta:cFuncaoGrv 	:= cFuncaoGrv
		oAponta:cDepto		:= cDepto
		oAponta:cPosto		:= cPosto
		oAponta:cProcesso	:= cProcesso
		oAponta:cPeriodo	:= cPeriodo
		oAponta:cRoteiro	:= cRoteiro
		oAponta:cNumPagto	:= cNumPagto

	EndIF

    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁObtem o Tipo de Marcacao a ser Gravado   Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:cTipoMarc := IF( oAponta:lApTpMar , oAponta:aSiglaMarc[ nW ] , NIL )

    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁInicio da Geracao dos Adicionais NoturnosЁ
	юддддддддддддддддддддддддддддддддддддддддды
	/*/
			//-- Verifica a existencia do Evento para Acresc.Noturno
			If oAponta:lIdAcreNot
				// Acresc.Noturno Autorizado
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:AcreAuto,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 037 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
							""             						,;	//08 -> Periodo de Apuracao
							0           						,;	//09 -> Tolerancia
							"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							NIL									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto		   				,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
			Endif

			// Adic.Not.Normal Autorizado
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotAut,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 004 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						0           						,;	//09 -> Tolerancia
						"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					 	NIL									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
						oAponta:cFuncaoGrv					,;  //12 -> Funcao
						oAponta:cDepto						,;  //13 -> Depto para gravacao
						oAponta:cPosto			   			,;  //14 -> Posto para gravacao
						oAponta:cProcesso					,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
		             )

			// Adic.Not.H.Extra Autorizado
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotA,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 028 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						0           						,;	//09 -> Tolerancia
						"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						NIL									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
						oAponta:cFuncaoGrv					,;  //12 -> Funcao
						oAponta:cDepto						,;  //13 -> Depto para gravacao
						oAponta:cPosto			   			,;  //14 -> Posto para gravacao
						oAponta:cProcesso					,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
		             )

			// Adic.Not.Normal Nao Autorizado
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotNau,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 003 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						0           						,;	//09 -> Tolerancia
						"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					 	NIL									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
						oAponta:cFuncaoGrv					,;  //12 -> Funcao
						oAponta:cDepto						,;  //13 -> Depto para gravacao
						oAponta:cPosto			   			,;  //14 -> Posto para gravacao
						oAponta:cProcesso					,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
		             )

			//-- Gera Adicional Noturno Nao Autorizado para Horas Extras
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotN,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 027 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						0           						,;	//09 -> Tolerancia
						"N"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						NIL									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
						oAponta:cFuncaoGrv					,;  //12 -> Funcao
						oAponta:cDepto						,;  //13 -> Depto para gravacao
						oAponta:cPosto			   			,;  //14 -> Posto para gravacao
						oAponta:cProcesso					,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
		             )
    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁFinal da Geracao dos Adicionais Noturnos Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/

    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁInicio da Geracao de Faltas, Atrasos, SaiЁ
	Ёdas Antecipadas/Expediente e Horas Trab. Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/
			nPos := IF( oAponta:cFaltas == "N" , 007 , 008 )
			//-- Gera Meia Falta com Arredondamento
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:MeiaFalta						,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	oAponta:cFuncaoGrv					,;  //11 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //12 -> Depto a ser gravado
								oAponta:cPosto						,;  //13 -> Posto a ser gravado
								oAponta:cProcesso					,;  //14 -> Processo a ser gravado
								oAponta:cPeriodo					,;  //15 -> Periodo  a ser gravado
								oAponta:cRoteiro 					,;  //16 -> Roteiro  a ser gravado
								oAponta:cNumPagto					 ;  //17 -> NumPagto a ser gravado
							)

			//-- Saida antecipada
			nPos := IF( oAponta:cSaiAnt == "N" , 013 , 014 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:SaidaAnte						,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								oAponta:cPerSaiA					,;	//08 -> Periodo de Apuracao
								fTolerancia(oAponta:cTolaSai,nW)	,;	//09 -> Tolerancia
								"S"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	oAponta:cFuncaoGrv					,;  //11 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //12 -> Depto a ser gravado
								oAponta:cPosto						,;  //13 -> Posto a ser gravado
								oAponta:cProcesso					,;  //14 -> Processo a ser gravado
								oAponta:cPeriodo					,;  //15 -> Periodo  a ser gravado
								oAponta:cRoteiro 					,;  //16 -> Roteiro  a ser gravado
								oAponta:cNumPagto					 ;  //17 -> NumPagto a ser gravado
							)


			//-- Gera Faltas Intervalo Noturna com Arredondamento
			nPos := IF( oAponta:cFaltas == "N" , 033 , 032 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:FaltaInter					,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	oAponta:cFuncaoGrv					,;  //11 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //12 -> Depto a ser gravado
								oAponta:cPosto						,;  //13 -> Posto a ser gravado
								oAponta:cProcesso					,;  //14 -> Processo a ser gravado
								oAponta:cPeriodo					,;  //15 -> Periodo  a ser gravado
								oAponta:cRoteiro 					,;  //16 -> Roteiro  a ser gravado
								oAponta:cNumPagto					 ;  //17 -> NumPagto a ser gravado
							)

			//-- Gera Faltas Intervalo Noturna com Arredondamento
			nPos := IF( oAponta:cFaltas == "N", 035 , 034 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:FaltaIntNt					,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	oAponta:cFuncaoGrv					,;  //11 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //12 -> Depto a ser gravado
								oAponta:cPosto						,;  //13 -> Posto a ser gravado
								oAponta:cProcesso					,;  //14 -> Processo a ser gravado
								oAponta:cPeriodo					,;  //15 -> Periodo  a ser gravado
								oAponta:cRoteiro 					,;  //16 -> Roteiro  a ser gravado
								oAponta:cNumPagto					 ;  //17 -> NumPagto a ser gravado
							)

			//-- Gera Faltas com Arredondamento
			nPos := IF( oAponta:cFaltas == "N", 009 , 010 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:Falta							,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	oAponta:cFuncaoGrv					,;  //11 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //12 -> Depto a ser gravado
								oAponta:cPosto						,;  //13 -> Posto a ser gravado
								oAponta:cProcesso					,;  //14 -> Processo a ser gravado
								oAponta:cPeriodo					,;  //15 -> Periodo  a ser gravado
								oAponta:cRoteiro 					,;  //16 -> Roteiro  a ser gravado
								oAponta:cNumPagto					 ;  //17 -> NumPagto a ser gravado
							)

			//-- Atrasos
			nPos := IF( oAponta:cAtrasos == "N", 011 , 012 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:Atrasos						,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								oAponta:cPerAtra					,;	//08 -> Periodo de Apuracao
								fTolerancia(oAponta:cTolaSai,nW)	,;	//09 -> Tolerancia
								"A"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	oAponta:cFuncaoGrv					,;  //11 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //12 -> Depto a ser gravado
								oAponta:cPosto						,;  //13 -> Posto a ser gravado
								oAponta:cProcesso					,;  //14 -> Processo a ser gravado
								oAponta:cPeriodo					,;  //15 -> Periodo  a ser gravado
								oAponta:cRoteiro 					,;  //16 -> Roteiro  a ser gravado
								oAponta:cNumPagto					 ;  //17 -> NumPagto a ser gravado
							)

			//-- Saida durante o expediente
			nPos := IF( oAponta:cSaiExpe == "N", 019 , 020 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:SaidaExpe						,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								oAponta:cPerSaiA					,;	//08 -> Periodo de Apuracao
								fTolerancia(oAponta:cTolaSai,nW)	,;	//09 -> Tolerancia
								If (lMvArrSExp,"S", "") 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	oAponta:cFuncaoGrv					,;  //11 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //12 -> Depto a ser gravado
								oAponta:cPosto						,;  //13 -> Posto a ser gravado
								oAponta:cProcesso					,;  //14 -> Processo a ser gravado
								oAponta:cPeriodo					,;  //15 -> Periodo  a ser gravado
								oAponta:cRoteiro 					,;  //16 -> Roteiro  a ser gravado
								oAponta:cNumPagto					 ;  //17 -> NumPagto a ser gravado
							)
            			//-- Gera Pagamento de Horas Trabalhadas
			IF ( oAponta:cHrNorm == "S" )
				//-- Quando Existir o Evento Intervalo Normal Noturno
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrIntNotEf,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 031 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				            Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
				//-- Gera Pagamento de Horas Trabalhadas Intervalo (030A)
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrIntEfeti,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 030 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				          	Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
				//-- Gera Pagamento de Horas Trabalhadas Noturnas
				//-- Quando Existir o Evento Horas Normais Noturnas
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrTrbNotEf,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 026 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
					        Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
				//-- Gera Pagamento de Horas Trabalhadas (001A)
				//-- Quando Existir o Evento Horas Normais
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrTrbEfeti,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 001 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				       		Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
				//-- Gera as Horas Normais Nao Realizadas
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrNorNaoRe,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 005 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				       		Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
				//-- Gera as Horas Noturnas Nao Realizadas
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrNotNaoRe,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 006 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				       		Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
			EndIF

			//-- Gera Pagamento de Prima Dominical
			IF ( oAponta:lPrimDom  )
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:PrimDom,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 039 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				       		Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
			EndIF

			//-- Gera Pagamento de Descanso Laborado
			IF ( oAponta:lDescLab  )
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:DescLab,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 040 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				       		Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
			EndIF

			//-- Gera Pagamento de Festivo Laborado
			IF ( oAponta:lFestLab  )
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:FestLab,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 041 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				       		Nil									,;  //08 -> Periodo de Apuracao
							Nil									,;  //09 -> Tolerancia
							Nil									,;  //10 -> Tipo de Arredondamento a Ser Utilizado
							Nil									,;  //11 -> Substitui a(s) Hora(s) Existente(s)
							oAponta:cFuncaoGrv					,;  //12 -> Funcao
							oAponta:cDepto						,;  //13 -> Depto para gravacao
							oAponta:cPosto			   			,;  //14 -> Posto para gravacao
							oAponta:cProcesso					,;  //15 -> Processo para Gravacao
							oAponta:cRoteiro					,;  //16 -> Roteiro para Gravacao
							oAponta:cPeriodo					,;  //17 -> Periodo para Gravacao
							oAponta:cNumPagto					 ;  //18 -> NumPagto para Gravacao
			             )
			EndIF

    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁFinal  da Geracao de Faltas, Atrasos, SaiЁ
	Ёdas Antecipadas/Expediente e Horas Trab. Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/

    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁInicio da Geracao das Horas Extras       Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/
			IF ( oAponta:aApo[oaApo:PriorityHe,nW] == Priority_Nocturnal_Overtime ) //Verifica Prioridade
					//-- Gera Horas Extras Noturnas
					fGeraExtra(	oAponta:aTabExtra			  		,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 1 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNotAutor,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNotNaoAu,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL     							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								Nil									,;	//14 -> Se Substitui as Horas Existentes
								oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )
					//-- Gera Horas Extras Noturnas Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNt							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNotAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNotNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
   								Nil									,;	//14 -> Se Substitui as Horas Existentes
								oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )
					//-- Gera Horas Extras Normais
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 3 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNormal,nW]		,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNorNAut,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
							 	Nil									,;	//14 -> Se Substitui as Horas Existentes
								oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )
					//-- Gera Horas Extras do Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNr							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNorAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNorNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					         	Nil									,;	//14 -> Se Substitui as Horas Existentes
								oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )
			Else
					//-- Gera Horas Extras Normais
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 3 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNormal,nW]		,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNorNAut,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
							 	Nil									,;	//14 -> Se Substitui as Horas Existentes
								oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )
					//-- Gera Horas Extras do Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNr							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNorAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNorNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					         	Nil									,;	//14 -> Se Substitui as Horas Existentes
								oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )
					//-- Gera Horas Extras Noturnas
					fGeraExtra(	oAponta:aTabExtra			  		,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 1 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNotAutor,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNotNaoAu,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					         	Nil									,;	//14 -> Se Substitui as Horas Existentes
						   		oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )
					//-- Gera Horas Extras Noturnas Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNt							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNotAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNotNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
   								Nil									,;	//14 -> Se Substitui as Horas Existentes
								oAponta:cFuncaoGrv					,;  //15 -> Funcao a ser Gravada
								oAponta:cDepto						,;  //16 -> Depto para gravacao
								oAponta:cPosto			   			,;  //17 -> Posto para gravacao
								oAponta:cProcesso					,;  //18 -> Processo para Gravacao
								oAponta:cRoteiro					,;  //19 -> Roteiro para Gravacao
								oAponta:cPeriodo					,;  //20 -> Periodo para Gravacao
								oAponta:cNumPagto					 ;  //21 -> NumPagto para Gravacao
				             )

			EndIF //Fim da Verificacao de Prioridade

    /*/
	зддддддддддддддддддддддддддддддддддддддддд©
	ЁFinal da Geracao das Horas Extras        Ё
	юддддддддддддддддддддддддддддддддддддддддды
	/*/

Next nW

Return( NIL )

/*/
зддддддддддбдддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁfExtras      ЁAutor ЁEquipe Advanced RH   Ё Data Ё01/04/1997Ё
цддддддддддедддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁApurar Horas Extras entre Horarios                          Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fExtras(	dDt1		,; //01 -> 1a. Data
							nHr1		,; //02 -> 1o. Horario
							dDt2		,; //03 -> 2a. Data
							nHr2		,; //04 -> 2o. Horario
							cTipo		,; //05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
							nIn			,; //06 -> Indice em aApo
							lPrimeiro	,; //07 -> Horas Extras do Primeiro Dia
							lIntervalo	,; //08 -> Apuracao Corresponde a Intervalo
							lForceTrab	,; //09 -> Forca o Tipo do Dia como Trabalhado
							lCalc		;  //10 -> Calcula Adicionais Especiais (Prima Dominical, Descanso e Festivo Laborados).
					    )




Local aPerNot		:= {}

Local nIncLoop		:= 0
Local nEx			:= 0
Local nExNot		:= 0
Local nTolHExt		:= 0
Local nExAdn		:= 0
Local nExAut		:= 0
Local nExNotAut 	:= 0
Local nExAdnAut 	:= 0
Local nExDiaAdn 	:= 0
Local nExDiaAutAdn	:= 0


//-- Para HE nao destaca Acrescimo quando existir identificador para tal e solicitado
//-- o destaque do acrescimo noturno.
Local lAcreNot	:= If( (oAponta:lIdAcreNot  .AND. oAponta:lAcreNot), .F., oAponta:lAcreNot )

DEFAULT lCalc	:= .T.

If lCalc

    /*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCalcula Prima Dominical, Descanso Laborado,	   Ё
	ЁFestivo Laborado.								   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/

	fAdicionais(	@dDt1							,;	//01 -> 1a. Data
					@nHr1							,;	//02 -> 1o. Horario
					@dDt2							,;	//03 -> 2a. Data
					@nHr2							,;	//04 -> 2o. Hora
					Nil								,;	//05 -> <@>Horas Normais Apontadas
					Nil								,;	//06 -> <@>Horas Noturnas Apontadas
					Nil								,;	//07 -> Apontar Horas Noturnas
					oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
					Nil								,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
					oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
					oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
					nIn								,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
					oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
		  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
		  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
			   )

EndIF

Begin Sequence

	IF (;
			( dDt1 == dDt2 );
			.and.;
			( Round( nHr1 , 02 ) == Round( nHr2 , 02 ) );
		)
		Break
	EndIF

	DEFAULT lIntervalo	:= .F.

	//-- Se o Apontamento for por Dia Assume o Limite de Hrs. para o Dia
	IF !ExtrasHeDtm(;
						@dDt1		,;	//01 -> 1a. Data
						@nHr1		,;	//02 -> 1o. Horario
						@dDt2		,;	//03 -> 2a. Data
						@nHr2		,;	//04 -> 2o. Hora
						@cTipo		,;	//05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
						@lPrimeiro	,;	//06 -> Horas Extras do Primeiro Dia
						@lIntervalo	,;	//07 -> Apuracao Corresponde a Intervalo
						@nIncLoop	 ;	//08 -> Incremento para o Loop no processo de Apontamento
					 )
		Break
	EndIF

	DEFAULT lForceTrab  := .F.
	//-- Define qual a toler┐ncia de hora extra a ser utilizada.
	IF (;
			( oAponta:cTipoDia == "S" );
			.or.;
			( lForceTrab );
		)
		nTolHExt  := fTolerancia( oAponta:cTolHex , nIn )
	EndIF

	//--Apura as Horas Extras
	fCalHoras(	dDt1				,;	//01 -> Data 1
				nHr1				,;	//02 -> Hora 1
				dDt2				,;	//03 -> Data 2
				nHr2				,;	//04 -> Hora 2
				@nEx				,;	//05 -> <@>Horas Normais Apontadas
				@nExNot				,;	//06 -> <@>Horas Noturnas Apontadas
				.T.					,;	//07 -> Apontar Horas Noturnas
				oAponta:dData		,;	//08 -> Data Inicial Para a Hora Noturna
				@nExAdn				,;	//09 -> <@>Horas de Acrescimo Noturno
				oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
				oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
				oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
				lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
				@aPerNot	 		 ;	//14 -> Periodo da Hora Noturna
			 )
	//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
	If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
		fAdnDiurno(	dDt1				,;	//01 -> Data 1
					nHr1				,;	//02 -> Hora 1
					dDt2				,;	//03 -> Data 2
					nHr2				,;	//04 -> Hora 2
			  		@nExDiaAdn			,;	//05 -> <@>Horas Normais Apontadas
					0					,;	//06 -> <@>Horas Noturnas Apontadas
			  		.T.					,;	//07 -> Apontar Horas Noturnas
					oAponta:dData		,;	//08 -> Data Inicial Para a Hora Noturna
					0					,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
					oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
					lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
		  		  )
	Endif

	//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
	IF ( oAponta:lFaixaHE )
		fHeAutoriz(	dDt1			,;	//01 -> Data 1
					nHr1			,;	//02 -> Hora 1
					dDt2			,;	//03 -> Data 2
					nHr2			,;	//04 -> Hora 2
					@nExAut			,;	//05 -> <@>Horas Normais Apontadas
					@nExNotAut		,;	//06 -> <@>Horas Noturnas Apontadas
					.T.				,;	//07 -> Apontar Horas Noturnas
					oAponta:dData	,;	//08 -> Data Inicial Para a Hora Noturna
					@nExAdnAut		,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nMinHnot,;	//10 -> Minutos do Horario Noturno
					lAcreNot		,;	//11 -> Apenas Acrescimo Noturno
			  		@nExDiaAutAdn	;	//12 -> <@>Horas Normais Apontadas como Noturnas
				  )
	EndIF

	//--Verifica se Deve Pagar Extra Not. a 52.50 e Calcula sem Adic. Noturno
	IF ( !( oAponta:lExtNot ) )
		IF ( nExAdn == 0 )
			nExAdn 		:= nExNot
			nExAdnAut	:= nExNotAut
		EndIF

		nEx    		:= 0
		nExNot 		:= 0
		nExAut 		:= 0
		nExNotAut	:= 0

		fCalHoras(	dDt1				,;	//01 -> Data 1
					nHr1				,;	//02 -> Hora 1
					dDt2				,;	//03 -> Data 2
					nHr2				,;	//04 -> Hora 2
					@nEx				,;	//05 -> <@>Horas Normais Apontadas
					@nExNot				,;	//06 -> <@>Horas Noturnas Apontadas
					.T.					,;	//07 -> Apontar Horas Noturnas
					oAponta:dData		,;	//08 -> Data Inicial Para a Hora Noturna
					NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
					60					,;	//12 -> Minutos do Horario Noturno ( Aqui For┤ado como 60 )
					NIL					,;	//13 -> Apenas Acrescimo Noturno
					NIL					 ;	//14 -> Periodo da Hora Noturna
				  )
		IF ( oAponta:lFaixaHE )
			fHeAutoriz(	dDt1			,;	//01 -> Data 1
						nHr1			,;	//02 -> Hora 1
						dDt2			,;	//03 -> Data 2
						nHr2			,;	//04 -> Hora 2
						@nExAut			,;	//05 -> <@>Horas Normais Apontadas
						@nExNotAut		,;	//06 -> <@>Horas Noturnas Apontadas
						.T.				,;	//07 -> Apontar Horas Noturnas
						oAponta:dData	,;	//08 -> Data Inicial Para a Hora Noturna
						NIL				,;  //09 -> <@>Horas de Acrescimo Noturno
						60				 ;	//10 -> Minutos do Horario Noturno ( Aqui For┤ado como 60 )
					  )
		EndIF
	Else
		IF ( nExAdn == 0 )
			nExAdn 		:= nExNot
	    	//-- HE autorizadas conforme faixas
			nExAdnAut	:= nExNotAut
		EndIF
	EndIF

	//-- N└o Pagar H.Extra Para Hor═rio M╒vel Livre
	IF (;
			(;
					( oAponta:cTipoDia == "S" );
					.or.;
					( lForceTrab );
			 );
			 .and.;
			 ( oAponta:lMovelFree );
		)
		nEx    		:= 0
		nExNot 		:= 0
		nExAdn 		:= 0
		nExDiaAdn   := 0
	    //-- HE autorizadas conforme faixas
		nExAut    	:= 0
		nExNotAut 	:= 0
		nExAdnAut 	:= 0
		nExDiaAutAdn:= 0
	EndIF


	//-- Hora Extra - Somar se For Maior que Toler┐ncia de Hora Extra
	IF ( SomaHoras( nEx , nExNot ) > nTolHExt )
		IF !( lIntervalo )
			oAponta:aApo[oaApo:HeNormal,nIn] 	:= SomaHoras(oAponta:aApo[oaApo:HeNormal,nIn],nEx)
			oAponta:aApo[oaApo:HeNotAutor,nIn]	:= SomaHoras(oAponta:aApo[oaApo:HeNotAutor,nIn],nExNot)
			IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
				oAponta:aApo[oaApo:HeNormalFx ,nIn]	:= SomaHoras(oAponta:aApo[oaApo:HeNormalFx ,nIn],nExAut)
				oAponta:aApo[oaApo:HeNoturnFx,nIn]	:= SomaHoras(oAponta:aApo[oaApo:HeNoturnFx,nIn],nExNotAut)
			EndIF
		Else
			oAponta:aApo[oaApo:HeIntNorAu,nIn]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorAu,nIn],nEx)
			oAponta:aApo[oaApo:HeIntNotAu,nIn]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNotAu,nIn],nExNot)
			IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
				oAponta:aApo[oaApo:HeIntNorFx ,nIn]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorFx ,nIn],nExAut)
				oAponta:aApo[oaApo:HeIntNotFx,nIn]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNotFx,nIn],nExNotAut)
			EndIF
		EndIF
		//-- Verifica a Prioridade Para a Geracao das Horas Extras
		IF !Empty( aPerNot )
			oAponta:aApo[oaApo:PriorityHe,nIn] := PriorityOvertime( dDt1 , nHr1 , aPerNot )
		EndIF
	EndIF

	//-- Acrescenta o Adicional Noturno sobre horas extras diurnas realizadas em continuacao a jornada noturna
	nExAdn		:= SomaHoras( nExAdn		, nExDiaAdn )

	IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
		nExAdnAut	:= SomaHoras( nExAdnAut 	, nExDiaAutAdn )
	Endif

	//-- Adicional Noturno Sobre Horas Extras
	IF (;
			( oAponta:cPerAnot # "D" );
			.or.;
			(;
				( oAponta:cPerAnot == "D" );
				.and.;
				( nExAdn > oAponta:nTolNtHe );
			 );
		)


		oAponta:aApo[oaApo:AdicHeNotA,nIn]		:= SomaHoras(oAponta:aApo[oaApo:AdicHeNotA	,nIn],nExAdn)
		IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
			oAponta:aApo[oaApo:AdicHeNotF,nIn]	:= SomaHoras(oAponta:aApo[oaApo:AdicHeNotF	,nIn],nExAdnAut)
		EndIF

	EndIF

End Sequence

Return( nIncLoop )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁExtrasHeDtm		ЁAutorЁEquipe Advanced RH Ё Data Ё06/10/2004Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Por Referencia a Data e Hora Para Apuracao das HE   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function ExtrasHeDtm(;
								dDt1		,;	//01 -> 1a. Data
								nHr1		,;	//02 -> 1o. Horario
								dDt2		,;	//03 -> 2a. Data
								nHr2		,;	//04 -> 2o. Hora
								cTipo		,;	//05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
								lPrimeiro	,;	//06 -> Horas Extras do Primeiro Dia
								lIntervalo	,;	//07 -> Apuracao Corresponde a Intervalo
								nIncLoop	 ;	//08 -> Incremento para o Loop no processo de Apontamento
					 )

Local lContinua	:= .T.

Local cFlagMar
Local dDataPri
Local nPos
Local nPosHr1
Local nPosHr2

Begin Sequence

	DEFAULT lPrimeiro	:= .F.

	//-- Se o Apontamento for por Dia Assume o Limite de Hrs. para o Dia
	IF !(;
			( lApHeDtM );
			.and.;
			( lPrimeiro );
			.and.;
			(;
				!( lIntervalo );
				.or.;
				( oAponta:lIntNtrab );
			 );
		 )
		Break
	EndIF

	Do Case
		Case cTipo == "I"											;	cFlagMar := "1S"
		Case cTipo $ "A*E*S" .or. SubStr( cTipo , -1 ) $ "A*E*S"	;	cFlagMar := "1E"
	EndCase

	//Procura a Data da Primeira Marcacao
	IF ( ( nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == dDt1 .and. x[3] == cFlagMar } ) ) == 0 )
		IF ( ( nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == ( dDt1 - 1 ) .and. x[3] == cFlagMar } ) ) == 0 )
			nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == ( dDt1 + 1 ) .and. ( x[3] == cFlagMar ) } )
		EndIF
    EndIF

	IF ( nPos > 0 )
		dDataPri	:= oAponta:aHoras[ nPos , 1 ]
	Else
		dDataPri	:= dDt1
	EndIF

	IF !( oAponta:lIntNtrab )

 		If !Empty( aScan( oAponta:aHoras ,{ |x| ! Empty( x[7] ) } ) )
			//--Incrementa a variavel nIncLoop para nao apontar
	   		nIncLoop	:= Len( oAponta:aHoras )
			lContinua	:= .F.
 		   Break
 		Endif
		//Salva Posicao da nHr2 no a Horas
		nPosHr2	:= aScan( oAponta:aHoras , { |x| x[1] == dDt2 .and. x[ 2 ] == nHr2 } )
		//Salva Posicao da nHr2 no a Horas
		nPosHr1	:= aScan( oAponta:aHoras ,{ |x| x[1] == dDt1 .and. x[ 2 ] == nHr1 } )
		IF !( DataHora2Str( dDataPri , 23.5959 ) < oAponta:aHoras[ nPosHr2 , 17 ] )
			//Seta as Marcacoes Como Apontadas Ate a Marcacao em Questao
		   	aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , nPosHr2 )
			Break
		EndIF

		//Verifica se Saida da Tabela e" superior a 23.59 e assume Tabela
		IF ( ( nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == dDt1 .and. x[3] $ "1S*2S*3S*4S" } ) ) == 0 )
			nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == dDt2 .and. x[3] $ "1S*2S*3S*4S" } )
	    EndIF

    	//Verifica se Tabela passa de um dia para outro
    	IF (;
    			( nPos > 0 );
    			.and.;
    			( oAponta:aHoras[nPos,17] > DataHora2Str(dDataPri,23.5959) );
    		)

	    	nPos := 0
	    	//Verifica Qual o Ultimo Horario da Tabela
	    	aEval( oAponta:aHoras , { |x,y| IF( !( x[3] == "M" ) , nPos := y , NIL ) } )
	    	IF !(;
	    			( nPos > 0 );
	    			.and.;
	    			( oAponta:aHoras[nPos,17] <= DataHora2Str(dDt2,nHr2) );
	    		)
		    	//Seta as Marcacoes Como Apontadas Ate a Marcacao em Questao Qdo. Tabela for Maior que Limite
		    	aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , nPosHr2 )
				Break
			EndIF

		    //Se a Primeira Marcacao for maior que a Tabela assume a Primeira
		    IF ( DataHora2Str(dDt1,nHr1) > oAponta:aHoras[nPos,17] )
		    	//Armazena a Ultima Marcacao do Dia Anterior
			    oAponta:aHoras[ nPosHr1 -1 , 7 ] := { oAponta:aHoras[ nPosHr1 -1, 1] , oAponta:aHoras[ nPosHr1 -1, 2] }
			    //Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
			    aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , (  nPosHr1 - 2 ) )
	    	  	//--Incrementa a variavel nIncLoop para nao apontar
		   		nIncLoop	:= Len( oAponta:aHoras )
				lContinua	:= .F.
    		Else //Limita o Horario ao Horario da Tabela
		    	dDt2 := oAponta:aHoras[nPos,1]
    			nHr2 := oAponta:aHoras[nPos,2]
   				//Armazena a Ultima Marcacao do Dia Anterior
				oAponta:aHoras[ nPosHr2 , 7 ] := { dDt2 , nHr2 }
			    //Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
			    aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr2 - 1 ) )
    		EndIF

	    ElseIF ( nPosHr2 > 0 )

	    	IF ( ( nIncLoop := Len( oAponta:aHoras ) ) <= nPosHr2 )
	    		nIncLoop := 0
	    	EndIF

   	    	//Limita o Horario ao Limite Maximo
		    //Se a Primeira Marcacao for maior que a Tabela assume a Primeira
		    IF (oAponta:aHoras[nPosHr1,17] < DataHora2Str(dDataPri,23.5959) )

	   	    	dDt2 := dDataPri
	    		nHr2 := 23.5959
		    	//Armazena a Ultima Marcacao do Dia Anterior
		    	oAponta:aHoras[ nPosHr2 , 7 ] := { dDt2 , nHr2 }
		    Else
				dDt2 := oAponta:aHoras[nPosHr1,1]
				nHr2 := oAponta:aHoras[nPosHr1,2]
		    	//Armazena a Ultima Marcacao do Dia Anterior
		    	oAponta:aHoras[ nPosHr2 , 7 ] := { dDt2 , nHr2 }
		    	lContinua	:= .F.
		    Endif
	     //Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
	    	aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr2 - 1 ) )

	    EndIF

		Break

	EndIF

	//Salva Posicao da nHr2 no a Horas
	nPosHr1	:= aScan( oAponta:aHoras ,{ |x| x[3] == "M" .and. x[1] == dDt1 .and. x[ 2 ] == nHr1 } )
	IF ( nPosHr1 == 0 )
		Break
	EndIF

   	nPosHr2	:= aScan( oAponta:aHoras ,{ |x| x[3] == "M" .and. x[1] == dDt2 .and. x[ 2 ] == nHr2 } )
	//-- Verifica se a Primeira Marcacao do Par passado ultrapassa o limite do dia
	IF ( DataHora2Str( dDt1 , nHr1 ) > DataHora2Str( dDataPri , 23.5959 ) )

		IF Empty( aScan( oAponta:aHoras, { |x| !Empty( x[ 7 ] ) } ) )
   			//Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
   			aEval( oAponta:aHoras , { |x,y|oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr1 - 1 ) )
   		EndIF

   		//--Incrementa a variavel nIncLoop para nao apontar
   		nIncLoop	:= Len( oAponta:aHoras )
   		lContinua	:= .F.
   		Break

	EndIF

    //--  Verifica se a Segunda marcacao passada ultrapassa o limite do dia
	IF !( DataHora2Str( dDt2 , nHr2 ) > DataHora2Str( dDataPri , 23.5959 ) )
		Break
	EndIF

	IF ( nPosHr2 > 0 )
		//Limita o Horario ao Limite Maximo
		dDt2 := dDataPri
   		nHr2 := 23.5959
   		oAponta:aHoras[ nPosHr2 , 7 ] := { { dDt2 , nHr2 , lIntervalo , cTipo } }
		//Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
    	aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr2 - 1 ) )

	Else
		//-- Obtem a Proxima Marcacao e Armazena as Horas de Intervalo a serem
		//-- Consideradas no proximo dia (ver FhrsExdia)
		IF ( ( nPosHr2 := aScan( oAponta:aHoras ,{ |x| x[3] == "M" }, nPosHr1+1) ) > 0 )
			oAponta:aHoras[ nPosHr2 , 7 ] := {{dDataPri,23.5959},{dDt2, nHr2},lIntervalo,cTipo}
		EndIF

		//Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
		aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr1) )

		//Limita o Horario ao Limite Maximo
		dDt2 := dDataPri
		nHr2 := 23.5959

	EndIF

End Sequence

Return( lContinua )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁPriorityOvertimeЁAutorЁMarinaldo de Jesus Ё Data Ё15/07/2002Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁVerificar a Prioridade Para a Geracao das Horas Extras      Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function PriorityOvertime(	dDt1		,;	//Primira Data
								 	nHr1		,;	//Primeira Hora
								 	aPerNot 	 ;	//Periodo da Hora Noturna
								 )

Local nPriority := Priority_Normal_Overtime			//Prioridade Para Extras Normais

Local cDtHrPer
Local cDtHr1

IF !Empty( aPerNot )
	oAponta:SortaHoras( { |x,y| ( x[5] < y[5] ) } , @aPerNot )
	cDtHrPer	:= aPerNot[ 01 , 05 ]
	cDtHr1	    := DataHora2Str( dDt1 , nHr1 )
	IF ( cDtHrPer <= cDtHr1 )
		nPriority := Priority_Nocturnal_Overtime	//Prioridade Para Extras Noturnas
	EndIF
EndIF

Return( nPriority )

/*/
зддддддддддбдддддддддддбдддддддбдддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁfMtaTabAp  Ё Autor Ё Equipe Advanced RH    Ё Data Ё 27/01/00 Ё
цддддддддддедддддддддддадддддддадддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o Ё Monta Array com marcacoes e Tabela para apontamento         Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnMarcTab -> Numero de Marcacoes da Tabela de Horario		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fMtaTabAp(	lMarcImpar	,;	//01 -> Tratamento de Marcacoes Impares na Montagem de aHoras
							lHeInJor    ,;	//02 -> Apontar Extras Inter Jornada
							lMarcIgual	 ;  //03 -> Tratamento para Maracoes Duplicadas
						  )

Local aPerNot		:= {}
Local aPerDia		:= {}
Local aLimite		:= {}
Local aLimInf		:= {}

Local lJaProc		:= .F.
Local lPulaMarc		:= .F.

Local nLenMar		:= Len( oAponta:aMarClone )
Local nMarcTab		:= 0
Local nCtPos		:= 0
Local nHrsNor   	:= 0
Local nHrsNot   	:= 0
Local nMarcReal		:= 0

Local cTip
Local cLimite
Local cLimInf
Local cMarca
Local cMarcInf
Local cMarcSup
Local cFlagMarc

Local nPos
Local nPosSub1
Local nPosIni
Local nPosTab
Local nPosInt
Local nMarcTSub1
Local nX
Local nLenTab
Local nLimite
Local nIndice
Local nIndiceaApo
Local nSub1IndaApo

IF ( nPos := aScan( oAponta:aMarClone , { |x| x[AMARC_DATAAPO] == oAponta:dDataApo } ) ) > 0
	For nX := nPos To nLenMar
		IF ( oAponta:aMarClone[ nX , AMARC_DATAAPO ] == oAponta:dDataApo )
			IF !( lJaProc := ( oAponta:aMarClone[ nX , AMARC_APONTA ] == "S" ) )
				Exit
			EndIF
		Else
			Exit
		EndIF
	Next nX
EndIF

IF ( nPos := aScan( oAponta:aTabClone, { |x| x[CALEND_POS_DATA_APO] == oAponta:dDataApo } ) ) == 0 .or. ;
	IF( ( ( lApHeDtm ) .or. ( lHeInJor ) ) ,  .F.  , lJaProc )
	Return( nMarcTab ) //nMarcTab, aqui, e Zero( 0 ). Nao Reaponta as Marcacoes Uma vez que ja foram apontadas
EndIF

//-- Salva a posicao inicial do Array para Elimina-la
nPosIni := nPos

nLenTab := Len( oAponta:aTabClone )
While (;
			( nPos <= nLenTab );
			.and.;
			( oAponta:dDataApo == oAponta:aTabClone[ nPos , CALEND_POS_DATA_APO ] );
		)
	IF ( oAponta:aTabClone[ nPos , CALEND_POS_APON_FERIAS ] )
		For nX := 1 To 2
			aAdd( oAponta:aHoras											,;
						{					  			 			 		 ;
							oAponta:aTabClone[ nPos , CALEND_POS_DATA ]		,; // 01 - Data da Marcacao
							23.59											,; // 02 - Hora da Marcacao
							IF( nX == 1 , "1E" , "1S" )						,; // 03 - Tipo de Marcacao
							0												,; // 04 - Total de Horas Trabalhadas Conf. Tabela (Normal + Noturna )
							oAponta:aTabClone[ nPos , CALEND_POS_TIPO_DIA ]	,; // 05 - Tipo do Dia
							.F.												,; // 06 - Se ja Apontou a Marcacao
							{}												,; // 07 - Data/Hora da Ultima Marcacao Anterior
							""												,; // 08 - Atualiza Marcacao Qdo. Ja Passou Pela Tabela (Tipo de Marcacao)
							0												,; // 09 - Horas de Intervalo da Tabela (Normal + Noturna )
							IF( nX == 1 , "EJ" , "SJ" )						,; // 10 - Tipo de Marcacao (Jornada)
							nX												,; // 11 - Indice Para oAponta:aApo
							.F.												,; // 12 - Ja Alterou Horario Movel Entrada/Saida
							.F.												,; // 13 - Ja Alterou Horario Movel Intervalo
							SRA->RA_CC										,; // 14 - Centro de Custo do Cadastro
							oAponta:aTabClone[ nPos , CALEND_POS_EXCECAO ]	,; // 15 - Flag Indicador de Excecao <=> "E"
							0				 		 		  				,; // 16 - Horas Trabalhadas sem Adicional
							""										 		,; // 17 - String de Data e Hora ( DataHora2Str() ) para aSort()
							SRA->RA_PROCES									,; // 18 - Processo do funcionario
							oAponta:aTabClone[ nPos , CALEND_POS_PERIODO ]  ,; // 19 - Periodo
							oAponta:aTabClone[ nPos , CALEND_POS_ROTEIRO ]  ,; // 20 - Roteiro
							oAponta:aTabClone[ nPos , CALEND_POS_NUM_PAGTO] ,; // 21 - Numero de Pagamento
							SRA->RA_POSTO									,; // 22 - Posto
							SRA->RA_DEPTO									,; // 23 - Depto
							SRA->RA_CODFUNC									 ; // 24 - Cod. Funcao
						};
				 )
		Next nX
		nMarcTab := 2
		Exit
	Else
		nMarcTab++
		//-- Obtem o tipo da marcacao 1E/1S.. para armazenar em oAponta:aTabClone
		IF ( oAponta:aTabClone[ nPos , CALEND_POS_TIPO_MARC ] == "1E" )
			cTip := "EJ"
		ElseIF ( SubStr( oAponta:aTabClone[ nPos , CALEND_POS_TIPO_MARC ] , -1 ) == "E" )
			nPosSub1 := ( nPos - 1 )
			cTip := IF( oAponta:aTabClone[ Max( nPosSub1 , 1 ) , CALEND_POS_HRS_INTER ] > 0, "EI" , "EJ" )
		ElseIF ( oAponta:aTabClone[ nPos , CALEND_POS_HRS_INTER ] > 0 )
			cTip := "SI"
		Else
			cTip := "SJ"
		EndIF
		cFlagMarc	 := oAponta:aTabClone[ nPos , CALEND_POS_TIPO_MARC ]
		nIndiceaApo  := aScan( oAponta:aSiglaMarc , { |x| ( x == cFlagMarc ) } )
		nSub1IndaApo := ( nIndiceaApo - 1 )
		aAdd( oAponta:aHoras											,;
					  {	                    	 			 		 	 ;
					  	oAponta:aTabClone[ nPos , CALEND_POS_DATA	]	,; // 01 - Data da Marcacao
					  	oAponta:aTabClone[ nPos , CALEND_POS_HORA	]	,; // 02 - Hora da Marcacao
					  	cFlagMarc										,; // 03 - Tipo de Marcacao
						0												,; // 04 - Total de Horas Trabalhadas Conf. Tabela ( Normal + Noturna )
						oAponta:aTabClone[ nPos , CALEND_POS_TIPO_DIA ]	,; // 05 - Tipo do Dia
						.F.												,; // 06 - Se ja Apontou a Marcacao
						{}												,; // 07 - Data/Hora da Ultima Marcacao Anterior
						""												,; // 08 - Atualiza Marcacao Qdo. Ja Passou Pela Tabela (Tipo de Marcacao)
						oAponta:aTabClone[ nPos ,CALEND_POS_HRS_INTER ]	,; // 09 - Horas de Intervalo da Tabela
						cTip											,; // 10 - Tipo de Marcacao (Jornada)
						nIndiceaApo										,; // 11 - Indice Para oAponta:aApo
						.F.												,; // 12 - Ja Alterou Horario Movel Entrada/Saida
						.F.					 							,; // 13 - Ja Alterou Horario Movel Intervalo
						oAponta:aTabClone[ nPos , CALEND_POS_CC ]	    ,; // 14 - Centro de Custo do Cadastro
						oAponta:aTabClone[ nPos , CALEND_POS_EXCECAO ]	,; // 15 - Flag Indicador de Excecao <=> "E"
						0				 	 							,; // 16 - Horas Trabalhadas sem Adicional
						""										 		,; // 17 - String de Data e Hora ( DataHora2Str() ) para aSort()
						oAponta:aTabClone[ nPos , CALEND_POS_PROCESSO ]	,; // 18 - Processo do funcionario
						oAponta:aTabClone[ nPos , CALEND_POS_PERIODO ]  ,; // 19 - Periodo
						oAponta:aTabClone[ nPos , CALEND_POS_ROTEIRO ]  ,; // 20 - Roteiro
						oAponta:aTabClone[ nPos , CALEND_POS_NUM_PAGTO] ,; // 21 - Numero de Pagamento
						oAponta:aTabClone[ nPos , CALEND_POS_POSTO ]	,; // 22 - Posto
						oAponta:aTabClone[ nPos , CALEND_POS_DEPTO ]	,; // 23 - Depto
						oAponta:aTabClone[ nPos , CALEND_POS_CODFUNC]	 ; // 24 - Cod. Funcao
					   };
			 )

		//-- Retorna Posicao em oAponta:aTabClone Referente a 1a Entrada para a Data do Adicional Noturno
		nPosTab := aScan( oAponta:aTabClone , { |x| x[CALEND_POS_DATA] == oAponta:dData .and. x[CALEND_POS_TIPO_MARC] == "1E" } )

		//-- Quando for uma marcacao de saida.
		IF ( SubStr( cFlagMarc , - 1 ) == "S" )
			//-- Calcula as horas trabalhadas.
			nHrsNor		:= nHrsNot := 0
			aPerNot		:= {}
			aPerDia		:= {}
			nMarcTSub1	:= ( nMarcTab - 1 )
			//-- Aponta Falta Meio periodo
			oAponta:AddPerHr(	oaApo:HrTrbTabel								,;	//01 -> Identificador do Elemento Diurno no Apo
								oaApo:HrTrbNotTb								,;	//02 -> Identificador do Elemento Noturno no Apo
								nSub1IndaApo									,;	//03 -> Posicao no Elemento do Identificador
								oAponta:aApoHr									,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
								oAponta:aHoras[nMarcTSub1,1]					,;	//05 -> Data 1
								oAponta:aHoras[nMarcTSub1,2]					,;	//06 -> Hora 1
								oAponta:aHoras[nMarcTab,1]						,;	//07 -> Data 2
								oAponta:aHoras[nMarcTab,2]						,;	//08 -> Hora 2
								@nHrsNor										,;	//09 -> <@>Horas Normais Apontadas
								@nHrsNot										,;	//10 -> <@>Horas Noturnas Apontadas
								NIL												,;	//11 -> Apontar Horas Noturnas
								oAponta:aTabClone[ nPosTab , CALEND_POS_DATA ]	,;	//12 -> Data Inicial Para a Hora Noturna
								NIL												,;	//13 -> <@>Horas de Acrescimo Noturno
								oAponta:nIniHnot								,;	//14 -> Inicio do Horario Noturno
								oAponta:nFimHnot								,;	//15 -> Final do Horario Noturno
								oAponta:nMinHnot								,;	//16 -> Minutos do Horario Noturno
								oAponta:lAcreNot								 ;	//17 -> Apenas Acrescimo Noturno
						 )

			//-- Alimenta a matriz de apontamento com as horas trabalhadas
			nHrsNor					:= SomaHoras(oAponta:aApo[oaApo:HrTrbTabel,nSub1IndaApo],oAponta:aApo[oaApo:HrTrbNotTb,nSub1IndaApo])
			oAponta:aHoras[01,04]	:= __TimeSum(__TimeSum(SomaHoras( oAponta:aHoras[01,04] , nHrsNor ), 0 ), 0 )
			nHrsNor					:= 0
			//Calcula as Horas Sem Considerar o Adicional Noturno
			fCalHoras(	oAponta:aHoras[nMarcTSub1,1]	,;	//01 -> Data 1
						oAponta:aHoras[nMarcTSub1,2]	,;	//02 -> Hora 1
						oAponta:aHoras[nMarcTab,1]		,;	//03 -> Data 2
						oAponta:aHoras[nMarcTab,2]		,;	//04 -> Hora 2
						@nHrsNor						,;	//05 -> <@>Horas Normais Apontadas
						NIL								,;	//06 -> <@>Horas Noturnas Apontadas
						.F.								,;	//07 -> Apontar Horas Noturnas
						NIL								,;	//08 -> Data Inicial Para a Hora Noturna
						NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
						NIL		 						 ;	//14 -> Periodo da Hora Noturna
					  )
			oAponta:aHoras[01,16]	:= SomaHoras( oAponta:aHoras[01,16] , nHrsNor )
			IF !( oAponta:lHnotFal ) //Se Nao Considerar o Horario Noturno Para Desconto das Faltas
				oAponta:aApo[oaApo:HrTrabTbNN,nSub1IndaApo]	:= SomaHoras(oAponta:aApo[oaApo:HrTrabTbNN,nSub1IndaApo], nHrsNor )
				IF ( oAponta:lRF0ChkTable )
					oAponta:PutPer(		oaApo:HrTrabTbNN,;						//01 -> Identificador do Elemento no Apo
					                 	nMarcTSub1,;							//02 -> Posicao no Elemento do Identificador
					                 	{;										//04 -> Array de Periodos Diurno e/ou Noturno
					                 		{;
					                 			oAponta:aHoras[nMarcTSub1,1],;
												oAponta:aHoras[nMarcTSub1,2],;
												oAponta:aHoras[nMarcTab,1],;
												oAponta:aHoras[nMarcTab,2],;
											};
										};
	                )
                EndIF
			EndIF
		EndIF
		//-- Quando a saida se referir a fim de jornada, encerra loop
		IF (;
				( SubStr( cFlagMarc , -1 ) == "S" );
				.and.;
				( oAponta:aTabClone[ nPos , CALEND_POS_HRS_INTER ] == 0 );
			)
			nPos++
			nPosSub1 := ( nPos - 1 )
			//-- Quando existir uma proxima marcacao de entrada
			IF ( ( nPos <= nLenTab ) .and. ( oAponta:dDataApo == oAponta:aTabClone[ nPos , CALEND_POS_DATA_APO ] ) )
				nLimite := DataHora2Val(	oAponta:aTabClone[ nPos     , CALEND_POS_DATA ]	,;
											oAponta:aTabClone[ nPos     , CALEND_POS_HORA ]	,;
											oAponta:aTabClone[ nPosSub1 , CALEND_POS_DATA ]	,;
											oAponta:aTabClone[ nPosSub1 , CALEND_POS_HORA ]	,;
											"H";
										)
				//-- Obtem o horario de entrada para limite das marcacoes reais
				nLimite := ( __Hrs2Min( nLimite ) / 2 )
				nLimite := Round( __Min2Hrs( nLimite ) , 2 )
				aLimite := RetIniTab( oAponta:aTabClone[nPos,CALEND_POS_DATA] , oAponta:aTabClone[nPos,CALEND_POS_HORA] , nLimite )
				cLimite	:= DataHora2Str( aLimite[1] , aLimite[2] )
			EndIF
			Exit
			//-- Quando a saida se referir a intervalo
		ElseIF (;
					( SubStr( cFlagMarc , -1 ) == "S" );
					.and.;
					( oAponta:aTabClone[nPos,CALEND_POS_HRS_INTER] != 0 );
				 )
			//-- Calcula as horas de intervalo e alimenta a matriz de apontamento.
			nHrsNor		:= nHrsNot := 0
			aPerNot		:= {}
			aPerDia		:= {}
			nIndice		:= Min( nLenTab , nPos + 1 )
			oAponta:AddPerHr(	oaApo:HrIntTabel								,;	//01 -> Identificador do Elemento Diurno no Apo
								oaApo:HrIntNotTb								,;	//02 -> Identificador do Elemento Noturno no Apo
								nIndiceaApo										,;	//03 -> Posicao no Elemento do Identificador
								oAponta:aApoHr									,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
								oAponta:aTabClone[ nPos    , CALEND_POS_DATA ]	,;	//05 -> Data 1
								oAponta:aTabClone[ nPos    , CALEND_POS_HORA ]	,;	//06 -> Hora 1
								oAponta:aTabClone[ nIndice , CALEND_POS_DATA ]	,;	//07 -> Data 2
								oAponta:aTabClone[ nIndice , CALEND_POS_HORA ]	,;	//08 -> Hora 2
								@nHrsNor										,;	//09 -> <@>Horas Normais Apontadas
								@nHrsNot										,;	//10 -> <@>Horas Noturnas Apontadas
								NIL												,;	//11 -> Apontar Horas Noturnas
								oAponta:aTabClone[ nPosTab , CALEND_POS_DATA ]	,;	//12 -> Data Inicial Para a Hora Noturna
								NIL												,;	//13 -> <@>Horas de Acrescimo Noturno
								oAponta:nIniHnot								,;	//14 -> Inicio do Horario Noturno
								oAponta:nFimHnot								,;	//15 -> Final do Horario Noturno
								oAponta:nMinHnot								,;	//16 -> Minutos do Horario Noturno
								oAponta:lAcreNot								,;	//17 -> Apenas Acrescimo Noturno
								@aPerNot										,;	//18 -> Periodo Horario Noturno
								@aPerDia										,;	//19 -> Periodo Horario Diurno
								.T.												,;	//20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
								.T.												 ; 	//21 -> Adiciona Periodo como Novo Elemento
						  	 )

			nHrsNor := 0
			//Calcula as Horas Sem Considerar o Adicional Noturno
			fCalHoras(	oAponta:aTabClone[ nPos    , CALEND_POS_DATA ]	,;	//01 -> Data 1
						oAponta:aTabClone[ nPos    , CALEND_POS_HORA ]	,;	//02 -> Hora 1
						oAponta:aTabClone[ nIndice , CALEND_POS_DATA ]	,;	//03 -> Data 2
						oAponta:aTabClone[ nIndice , CALEND_POS_HORA ]	,;	//04 -> Hora 2
						@nHrsNor										,;	//05 -> <@>Horas Normais Apontadas
						NIL												,;	//06 -> <@>Horas Noturnas Apontadas
						.F.												,;	//07 -> Apontar Horas Noturnas
						NIL												,;	//08 -> Data Inicial Para a Hora Noturna
						NIL												,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot								,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot								,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot								,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot								,;	//13 -> Apenas Acrescimo Noturno
						NIL		 									 	 ;	//14 -> Periodo da Hora Noturna
					  )
			oAponta:aApo[oaApo:HrIntTbNNt,nIndiceaApo]	:= SomaHoras( oAponta:aApo[oaApo:HrIntTbNNt,nIndiceaApo] , nHrsNor )
			IF ( oAponta:lRF0ChkTable )
				oAponta:PutPer(	    oaApo:HrIntTbNNt							     	,;  //01 -> Identificador do Elemento no Apo
				                 	nMarcTab											,;  //02 -> Posicao no Elemento do Identificador
				                 	{;														//04 -> Array de Periodos Diurno e/ou Noturno
				                 		{;
				                 			oAponta:aTabClone[ nPos    , CALEND_POS_DATA ],;
											oAponta:aTabClone[ nPos    , CALEND_POS_HORA ],;
											oAponta:aTabClone[ nIndice , CALEND_POS_DATA ],;
											oAponta:aTabClone[ nIndice , CALEND_POS_HORA ],;
										};
									};
                )
			EndIF
		EndIF
		nPos++
	EndIF
End While

//-- Nao monta oAponta:aHoras novamente para esta ordem eliminando os ele-
//-- mentos de oAponta:aTabClone cuja ordem seja igual a oAponta:cOrdem.
nPos --

If cPaisLoc == 'MEX'
	aLimInf := {}
	For nPosInt := nPosIni to nPos
		If nPosInt <> 1 .and. ( SubStr( oAponta:aTabClone[ nPosInt , CALEND_POS_TIPO_MARC ] , -1 ) == "E" ).and. ( oAponta:dDataApo == oAponta:aTabClone[ nPosInt , CALEND_POS_DATA_APO ] )

			nLimite := DataHora2Val(	oAponta:aTabClone[ nPosInt  , CALEND_POS_DATA ]	,;
										oAponta:aTabClone[ nPosInt  , CALEND_POS_HORA ]	,;
										oAponta:aTabClone[ nPosInt-1, CALEND_POS_DATA ]	,;
										oAponta:aTabClone[ nPosInt-1, CALEND_POS_HORA ]	,;
										"H";
									)
			//-- Obtem o horario de entrada para limite das marcacoes reais
			nLimite := ( __Hrs2Min( nLimite ) / 2 )
			nLimite := Round( __Min2Hrs( nLimite ) , 2 )
			aLimite := RetIniTab( oAponta:aTabClone[nPosInt,CALEND_POS_DATA] , oAponta:aTabClone[nPosInt,CALEND_POS_HORA] , nLimite )
			cLimInf	:= DataHora2Str( aLimite[1] , aLimite[2] )
			aAdd(aLimInf, cLimInf )
		EndIf
	Next nPosInt
EndIf

For nX := nPosIni To nPos
	oAponta:aTabClone[ nX , CALEND_POS_ORDEM ] 		:= "ZZ"
	oAponta:aTabClone[ nX , CALEND_POS_DATA_APO ] 	:= CtoD("01/01/50")
Next nX

//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
//Ё Verifica numero de marcacoes do dia                         Ё
//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
IF ( ( nPos := aScan( oAponta:aMarClone,{ |x| x[AMARC_DATAAPO] == oAponta:dDataApo } ) ) > 0 )
	nPosIni := nPos
	nCtPos	:= 0
	nLenMar := Len( oAponta:aMarClone )
	While (;
				( nPos <= nLenMar );
				.and.;
				( oAponta:dDataApo == oAponta:aMarClone[ nPos,AMARC_DATAAPO ] );
		 )
		//-- Quando a marcacao for maior ou igual a entrada da proxima
		//-- jornada a marcacao faz parte da jornada atual.
		IF !Empty( cLimite )
			cMarca := DataHora2Str( oAponta:aMarClone[ nPos  , AMARC_DATA ] , oAponta:aMarClone[ nPos , AMARC_HORA ] )
			If ( cMarca >= cLimite )
	   		   	If ( cMarca = cLimite .and. nPos > 1)
			   		++nCtPos
			   	EndIf
				Exit
			EndIf
		EndIf
		++nCtPos
		++nPos
	End While

	//-- Se o numero de marcacoes forem impares, nao aponta.
	IF (;
			!( lMarcImpar );
			.or.;
			( nCtPos == 1 );
		) //Tratamento para Marcacoes Impares
		IF ( ( nCtPos % 2 ) > 0 )
			--nCtPos
		EndIF
    EndIF

	//-- So carrega as marcacoes se for >= 2 marcacoes
	IF ( nCtPos >= 2 )
		//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		//Ё Carrega as marca┤■es do dia.                                Ё
		//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
		nMarcReal	:= nCtPos
		nCtPos		:= 0
		nPos   		:= nPosIni
		While (;
					( nPos <= nLenMar );
					.and.;
					( oAponta:dDataApo == oAponta:aMarClone[ nPos , AMARC_DATAAPO ] );
					.and.;
					( ( ++nCtPos ) <= nMarcReal );
				)
			//--Tratamento para apontamento em pares solicitado pelo Mexico.
			If !Empty(aLimInf) .and. ( ( nMarcReal % 2 ) > 0 )
				lPulaMarc := .F.

				If nPos > 1
                	cMarcInf := DataHora2Str( oAponta:aMarClone[ nPos-1  , AMARC_DATA ] , oAponta:aMarClone[ nPos-1 , AMARC_HORA ] )
    			Else
    				cMarcInf := ''
    			EndIf

				cMarca := DataHora2Str( oAponta:aMarClone[ nPos  , AMARC_DATA ] , oAponta:aMarClone[ nPos , AMARC_HORA ] )

                If nPos+1 <= nLenMar
					cMarcSup := DataHora2Str( oAponta:aMarClone[ nPos+1  , AMARC_DATA ] , oAponta:aMarClone[ nPos+1 , AMARC_HORA ] )
				Else
					cMarcSup := ''
				EndIf

				For nPosInt := 1 to Len(aLimInf)
					If nPosInt == 1
						If Len(aLimInf) == 1
							If cMarca >= aLimInf[nPosInt] .and. cMarcSup > aLimInf[nPosInt]
								lPulaMarc := .T.
								Exit
							EndIf
						Else
							If cMarca < aLimInf[nPosInt] .and. cMarcSup <= aLimInf[nPosInt]
								lPulaMarc := .T.
								Exit
							EndIf
						EndIf
					Else
						If ( cMarcInf < aLimInf[nPosInt] .and. cMarca <= aLimInf[nPosInt] ) .and. ( cMarcInf >= aLimInf[nPosInt-1] .and. cMarca > aLimInf[nPosInt-1] )
							lPulaMarc := .T.
							Exit
						ElseIf !Empty(cMarcSup) .and. ( cMarca < aLimInf[nPosInt] .and. cMarcSup <= aLimInf[nPosInt] ) .and. ( cMarca >= aLimInf[nPosInt-1] .and. cMarcSup > aLimInf[nPosInt-1] )
							lPulaMarc := .T.
							Exit
						ElseIf Len(aLimInf) == nPosInt .and. ( ( !Empty(cMarcSup) .and. cMarca >= aLimInf[nPosInt] .and. cMarcSup > aLimInf[nPosInt] ) .or. ( cMarcInf >= aLimInf[nPosInt] .and. cMarca > aLimInf[nPosInt] ) )
							lPulaMarc := .T.
							Exit
						EndIf

					EndIf

				Next nPosInt

				If !lPulaMarc
					nPos++
					Loop
				EndIf
			EndIf

			aAdd(oAponta:aHoras											,;
						{	oAponta:aMarClone[ nPos , AMARC_DATA ]		,; // 01 - Data da Marcacao
							oAponta:aMarClone[ nPos , AMARC_HORA ]		,; // 02 - Hora da Marcacao
							"M"											,; // 03 - Tipo de Marcacao
							0											,; // 04 - Total de Horas Trabalhadas Conf. Tabela Normal + Noturna
							""											,; // 05 - Tipo do Dia
							.F.											,; // 06 - Se ja Apontou a Marcacao
							{}											,; // 07 - Data/Hora da Ultima Marcacao Anterior
							""											,; // 08 - Atualiza Marcacao Qdo. Ja Passou Pela Tabela (Tipo de Marcacao)
							0											,; // 09 - Horas de Intervalo da Tabela (Normal + Noturna )
							""											,; // 10 - Tipo de Marcacao (Jornada)
							0											,; // 11 - Indice Para oAponta:aApo ( Apenas para Tabela. Marcacoes nao Tem Indice )
							.F.											,; // 12 - Ja Alterou Horario Movel Entrada/Saida
							.F.										   	,; // 13 - Ja Alterou Horario Movel Intervalo
							oAponta:aMarClone[ nPos , AMARC_CC ]       	,; // 14 - Centro de Custo da Marcacao
							""										   	,; // 15 - Flag Indicador de Excecao <=> "E"
							0 										   	,; // 16 - Horas Trabalhadas sem Adicional
							""							 			   	,; // 17 - String de Data e Hora ( DataHora2Str() ) para aSort()
							oAponta:aMarClone[ nPos , AMARC_PROCESSO ] 	,; // 18 - Processo do funcionario
							oAponta:aMarClone[ nPos , AMARC_PERIODO ]  	,; // 19 - Periodo
							oAponta:aMarClone[ nPos , AMARC_ROTEIRO ]  	,; // 20 - Roteiro
							oAponta:aMarClone[ nPos , AMARC_NUM_PAGTO] 	,; // 21 - Numero de Pagamento
							oAponta:aMarClone[ nPos , AMARC_POSTO ]	   	,; // 22 - Posto
							oAponta:aMarClone[ nPos , AMARC_DEPTO ]	   	,; // 23 - Depto
							oAponta:aMarClone[ nPos , AMARC_CODFUNC]     ; // 24 - Cod. Funcao
						  }						 		 		 ;
				 )
			nPos++
		End While
		//-- Elimina as marcacoes utilizadas evitando reuso na mesma ordem
		nPos --
		For nX := nPosIni To nPos
			oAponta:aMarClone[nX,	AMARC_ORDEM			] 	:= "ZZ"
			oAponta:aMarClone[nX, 	AMARC_DATAAPO 		] 	:= CtoD("01/01/50")
		Next nX
	EndIF
EndIF

//Carrega a String de Horas Para o aSort.
For nX := 1 To Len( oAponta:aHoras )
	oAponta:aHoras[ nX , 17 ] := DataHora2Str( oAponta:aHoras[ nX , 01 ] , oAponta:aHoras[ nX , 02 ] )
Next nX

//-- Ordena as Marcacoes do Dia com as Marcacoes da Tabela
oAponta:SortaHoras()

//Verifica e Modifica as Marcacoes Duplicadas
//Deve ser Feito Apos a Ordenacao do oAponta:aHoras
IF ( lMarcIgual )
	oAponta:ChkMarcDup()
EndIF

//Quando nao for Horario Movel Livre.
IF !( oAponta:lMovelFree )
	//-- Tratamento para Marcacoes Impares
	IF ( ( lMarcImpar ) .and. !Empty( oAponta:aHoras ) )
		oAponta:ChkMarcImpar()
	EndIF
EndIF

//Verifica se Devera ou Nao Apontar as Marcacoes
nMarcTab := IF(;
					(;
						( lJaProc );	//Se ja Tiver Apontada
						.and.;
						!( lApHeDtm );	//E as Horas Extras nao forem pela Data de Marcacao
						.and.;
						!( lHeInJor );	//E nao for Apontar Inter-Jornada
					),;
					0,;					//Nao Reaponta as Marcacoes uma vez que ja foram apontadas
						IF(;
							(;
								( lJaProc  );	//Se ja Tiver Apontada
								.and.;
								( lHeInJor );	//E for Apontar Inter-Jornada
								.and.;
								!( lApHeDtm );	//E as Horas Extras nao forem pela Data de Marcacao
					  		),;
							0,;					//Nao Reaponta as Marcacoes uma vez que ja foram apontadas
							nMarcTab;			//Caso contario, passa o numero de Marcacoes a serem apontadas
						   );
				)

Return( nMarcTab )

/*/
зддддддддддбддддддддддддбдддддддбдддддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfHrsInter   Ё Autor ЁMarinaldo de Jesus   	  Ё Data Ё28/09/2000Ё
цддддддддддеддддддддддддадддддддадддддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁAponta Horas Extras Inter Jornada                           	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>										Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>										Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                   	    	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      			Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                		Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fHrsInter( cFil )

Local dDiaAtu		:= dDateEmpty						//-- Data da Marcacao do dia Anterior
Local dDiaAnt		:= dDateEmpty						//-- Data da Marcacao do Dia Atual

Local lUltMarc		:= .F.								//-- Encontrou a ultima marcacao do dia anterior
Local lHeAutoriza	:= .F.								//-- Verifica se Horas Extras Sao Autorizadas
Local lPriMarc		:= .F.								//-- Encontrou a primeira marcacao do dia atual
Local lFeriado		:= .F.								//-- Verifica se o Dia em Questao e" um Feriado

Local nUltMarc		:= 0								//-- Ultima Marcacao do Dia Anterior
Local nPriMarc		:= 0								//-- Primeira Marcacao do Dia Atual
Local nHrsInter		:= 0								//-- Diferenca de Horas Entre uma Jornada e Outra
Local nIndAtu		:= 0								//-- Indice Auxiliar para Retorno da Marcacao Anterior
Local nIndAnt		:= 0								//-- Indice Auxiliar para Retorno da Marcacao Atual
Local nTipoDia		:= 0								//-- Verifica o Tipo do Dia para pagamento da Inter Jornada
Local nLenaHrs		:= 0								//-- Tamanho de oAponta:aHoras
Local nHeInterAutFx := 0								//-- Horas Interjornada Autorizadas segundo faixa de HE autorizadas

//Aponta Hora Extra Inter-Jornada
IF !Empty( oAponta:aHorasAnt )
	nLenaHrs	:= Len( oAponta:aHorasAnt )
	nIndAnt		:= nLenaHrs
	nTipoDia	:= aScan( oAponta:aHorasAnt , { |x| x[ 3 ] == "1E" } )
	While ( nIndAnt > 0 )
		//Retorna ultima marcacao do dia anterior
		IF ( oAponta:aHorasAnt[ nIndAnt , 3 ] == "M" )
			oAponta:dDataGravar	:= oAponta:aHorasAnt[    1    , 1 ]				//Dia da 1a. Marcacao Anterior
			dDiaAnt					:= oAponta:aHorasAnt[ nIndAnt , 1 ]			//Data da Efetiva Marcacao Anterior
			nUltMarc				:= oAponta:aHorasAnt[ nIndAnt , 2 ]			//Ultima Marcacao do Dia Anterior
			lFeriado				:= fFeriado(cFil,dDiaAnt)
			oAponta:cCustoGrv  		:= oAponta:aHorasAnt[ nIndAnt , 14 ]
			oAponta:cFuncaoGrv 		:= oAponta:aHorasAnt[ nIndAnt , 24 ]
			oAponta:cDepto			:= oAponta:aHorasAnt[ nIndAnt , 23 ]
			oAponta:cPosto			:= oAponta:aHorasAnt[ nIndAnt , 22 ]
			oAponta:cProcesso		:= oAponta:aHorasAnt[ nIndAnt , 18 ]
			oAponta:cPeriodo		:= oAponta:aHorasAnt[ nIndAnt , 19 ]
			oAponta:cRoteiro		:= oAponta:aHorasAnt[ nIndAnt , 20 ]
			oAponta:cNumPagto		:= oAponta:aHorasAnt[ nIndAnt , 21 ]
			IF ( nTipoDia > 0 .and. IF( lFeriado , "F" , oAponta:aHorasAnt[ nTipoDia , 5 ] ) $ oAponta:cInterNt )
				lUltMarc := .T.
			EndIF
			Exit
		EndIF
		nIndAnt--
	End While
	nIndAtu		:= 1
	nLenaHrs	:= Len( oAponta:aHoras )
	nTipoDia	:= aScan( oAponta:aHoras , { |x| x[ 3 ] == "1E" } )
	While ( nIndAtu <= nLenaHrs )
		//Retorna primeira marcacao do dia atual
		IF ( oAponta:aHoras[ nIndAtu , 3 ] == "M" )
			dDiaAtu		:= oAponta:aHoras[ nIndAtu , 1 ]							//Data da Marcacao Atual
			nPriMarc	:= oAponta:aHoras[ nIndAtu , 2 ]							//Primeira Marcacao do Dia Atual
			lFeriado	:= fFeriado(cFil,dDiaAtu)
			IF ( nTipoDia > 0 .and. IF( lFeriado , "F" , oAponta:aHoras[ nTipoDia , 5 ] ) $ oAponta:cInterNt )
				lPriMarc := .T.
			EndIF
			Exit
		EndIF
		nIndAtu++
	End While
	//Calcula Hora Extra Inter Jornada
	IF ( ( lUltMarc ) .and. ( lPriMarc ) .and. ( oAponta:nHrInterJd > 0 ) )	//Parametro Configurador
		IF ( ( nHrsInter := DataHora2Val( dDiaAnt , nUltMarc , dDiaAtu , nPriMarc , "H" ) ) < oAponta:nHrInterJd )
			IF ( ( dDiaAnt == dDiaAtu ) .and. ( nPriMarc < nUltMarc ) )
      	    	oAponta:nHeInterA := oAponta:nHrInterJd
   	    	Else
   	    		oAponta:nHeInterA := Abs( SubHoras( oAponta:nHrInterJd , nHrsInter ) )
           	EndIF
       	    //-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
			IF ( oAponta:lFaixaHE )
       			nHeInterAutFx:=	fHeAutoriz(	dDiaAnt		,;	//01 -> Data 1
											nUltMarc	,;	//02 -> Hora 1
											dDiaAtu 	,;	//03 -> Data 2
											nPriMarc	,;	//04 -> Hora 2
											NIL			,;	//05 -> <@>Horas Normais Apontadas
											NIL			,;	//06 -> <@>Horas Noturnas Apontadas
											.F.			,;	//07 -> Apontar Horas Noturnas
											dDiaAtu		,;	//08 -> Data Inicial Para a Hora Noturna
											NIL			 ;	//09 -> <@>Horas de Acrescimo Noturno
										  )
            	oAponta:nHeInterN :=  SubHoras( oAponta:nHeInterA , nHeInterAutFx )
   	        	oAponta:nHeInterA := nHeInterAutFx
            Else
	            /*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁVerifica se as Horas Extras sao Autorizadas           Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( aScan( oAponta:aHorasAnt, { |x| x[ 3 ] == "4S" } ) == 0 )
					IF ( aScan( oAponta:aHorasAnt, { |x| x[ 3 ] == "3S" } ) == 0 )
						IF ( aScan( oAponta:aHorasAnt, { |x| x[ 3 ] == "2S" } ) == 0 )
							lHeAutoriza := ( "1S" $ oAponta:cPagHext )
						Else
							lHeAutoriza := ( "2S" $ oAponta:cPagHext )
						Endif
					Else
						lHeAutoriza := ( "3S" $ oAponta:cPagHext )
					Endif
				Else
					lHeAutoriza := ( "4S" $ oAponta:cPagHext )
				EndIF
				IF !( lHeAutoriza )
	   	        	oAponta:nHeInterN := oAponta:nHeInterA
	   	        	oAponta:nHeInterA := 0
	       	    EndIF
	       	EndIF
		EndIF
	EndIF
EndIF

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁSe nao Achou Centro de Custo Assume o do Cadastro     Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
IF Empty( oAponta:cCustoGrv )
	oAponta:cCustoGrv := SRA->RA_CC
EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfHrsExDia	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё28/09/2000Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁAponta e Gera Horas Extras de Acordo com o Dia				 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fHrsExDia()

Local lUltMarc		:= .F.	//Encontrou a ultima marcacao do dia anterior
Local lPriMarc		:= .F.	//Encontrou a primeira marcacao do dia atual
Local lPrimeiro		:= .F.	//Se a Hora Extra Corresponde ao Primeiro Dia
Local lNextDay		:= .F.	//Flag sinalizando que Marcacao Passa de Um Dia a Outro
Local lAponFer		:= .F.	//Se Executa o Apontamento Quando Afastamento em Ferias
Local lTemSubArray	:= .F. //Se Tem o 7 elemento na aHoras para calcular HE pela data da marcacao

Local bExtras

Local cTpoExtra				//Tipo de Hora Extra para a Data
Local cTipoMar				//Tipo da Marcacao para Hora Extra

Local dDiaAnt				//Data da Primeira Marcacao do Dia Anterior
Local dDiaAtu				//Data da Ultima   Marcacao do dia Anterior
Local dSvDiaAnt				//Salva a Data Data da Primeira Marcacao do Dia Anterior

Local nUltMarc				//Ultima Marcacao do Dia Anterior
Local nPriMarc				//Primeira Marcacao do Dia Atual
Local nIndAtu				//Indice Auxiliar para Retorno da Marcacao Anterior
Local nIndAnt				//Indice Auxiliar para Retorno da Marcacao Atual
Local nIndApo				//Indice para o Array oAponta:aApo
Local nPos					//Variavel Temporaria para aScan
Local nPosInt				//Variavel Temporaria para aScan
Local nPosInt2				//Variavel Temporaria para aScan
Local nPosInt3				//Variavel Temporaria para aScan
Local nX					//Variavel Temporaria para Loop For/Next
Local nXPlus1				//Variavel Temporaria para Loop For/Next
Local nXPlus2				//Variavel Temporaria para Loop For/Next
Local nLenaHoras			//Tamanho de aHoras
Local nUltSaida				//Indice Ultima Saida da Tabela

Local cTpHeIntNr 			//Tipo de H Extra Intervalo Normal
Local cTpHeIntNt 			//Tipo de H Extra Intervalo Noturna

//Nao Calcular Quando For Horario Movel Livre.
IF ( oAponta:lMovelFree )
	Return( NIL )
EndIF

bExtras := { |lintervalo| fExtras(;
									dDiaAnt			,;	//01 -> Data da 1a Marcacao
									nPriMarc 		,;	//02 -> Hora da 1a Marcacao
									dDiaAtu			,;	//03 -> Data da 2a Marcacao
									nUltMarc		,;  //04 -> Hora da 2a Marcacao
									"S"				,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									nIndApo			,;	//06 -> Indice de aApo
									lPrimeiro		,;	//07 -> 1o Dia do Apontamento
									lIntervalo		,;	//08 -> Apuracao Corresponde a Intervalo
									NIL			 	,;  //09 -> Forca o Dia Como Trabalhado
									.F.				;   //10 -> Calcula Adicionais Especiais (Prima Dominical, etc...)
							 	);
           }

oAponta:ZeraApo()

IF !Empty( oAponta:aHorasAnt )
	nLenaHoras  := Len( oAponta:aHorasAnt )
	nIndAtu 	:= ( nLenaHoras + 1 )
	nPos 	:= aScan( oAponta:aHorasAnt ,{ |x| x[3] == "1E" })
	cTipoDia:= oAponta:aHorasAnt[nPos,5]
	dData1E	:= oAponta:aHorasAnt[nPos,1]
    cTipoMarc:=oAponta:aHorasAnt[nPos,3]
	While ( ( --nIndAtu ) > 0 )
		IF (;
				( oAponta:aHorasAnt[ nIndAtu , 3 ] == "M" );
				.and.;
				!( lUltMarc );
			)
			dDiaAtu				:= oAponta:aHorasAnt[ nIndAtu , 01 ]	//Data da Marcacao Anterior
			nUltMarc			:= oAponta:aHorasAnt[ nIndAtu , 02 ]	//Ultima Marcacao do Dia Anterior
			lUltMarc			:= .T.								//Achou a Ultima Marcacao do Dia Anterior
			oAponta:cCustoGrv	:= oAponta:aHorasAnt[ nIndAtu , 14 ]	//Retorna Centro de Custo Para a Gravacao do Apontamento
			oAponta:cFuncaoGrv 	:= oAponta:aHorasAnt[ nIndAtu , 24 ]
			oAponta:cDepto		:= oAponta:aHorasAnt[ nIndAtu , 23 ]
			oAponta:cPosto		:= oAponta:aHorasAnt[ nIndAtu , 22 ]
			oAponta:cProcesso	:= oAponta:aHorasAnt[ nIndAtu , 18 ]
			oAponta:cPeriodo	:= oAponta:aHorasAnt[ nIndAtu , 19 ]
			oAponta:cRoteiro	:= oAponta:aHorasAnt[ nIndAtu , 20 ]
			oAponta:cNumPagto	:= oAponta:aHorasAnt[ nIndAtu , 21 ]
		EndIF
		IF (;
				( oAponta:aHorasAnt[ nIndAtu , 3 ] != "M" );
				.and.;
				Empty( nIndApo );
			 )
			nIndApo		:= oAponta:aHorasAnt[ nIndAtu , 11 ]			//Indice para oAponta:aApo
			cTipoMarc	:= oAponta:aHorasAnt[ nIndAtu , 03 ]			//Tipo de Marcacao para Hora Extra

			IF Empty( oAponta:cCustoGrv )
				oAponta:cCustoGrv := oAponta:aHorasAnt[ nIndAtu , 14 ]	//-- Retorna Centro de Custo Para a Gravacao do Apontamento
			EndIF
			IF Empty(oAponta:cFuncaoGrv)
				oAponta:cFuncaoGrv	:= oAponta:aHorasAnt[ nIndAtu , 24 ]
			ENDIF
			IF Empty(oAponta:cDepto)
				oAponta:cDepto	:= oAponta:aHorasAnt[ nIndAtu , 23 ]
			ENDIF
			IF Empty(oAponta:cPosto)
				oAponta:cPosto	:= oAponta:aHorasAnt[ nIndAtu , 22 ]
			ENDIF
			IF Empty(oAponta:cProcesso)
				oAponta:cProcesso:= oAponta:aHorasAnt[ nIndAtu , 18 ]
			ENDIF
			IF Empty(oAponta:cPeriodo)
				oAponta:cPeriodo	:= oAponta:aHorasAnt[ nIndAtu , 19 ]
			ENDIF
			IF Empty(oAponta:cRoteiro)
				oAponta:cRoteiro	:= oAponta:aHorasAnt[ nIndAtu , 20 ]
			ENDIF
			IF Empty(oAponta:cNumPagto)
				oAponta:cNumPagto	:= oAponta:aHorasAnt[ nIndAtu , 21 ]
			ENDIF

			IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA] == dDiaAtu } ) ) > 0 )
				IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC ) )
					oAponta:cCustoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
				EndIF
				IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ] ) .and. ( oAponta:cFuncaoGrv == SRA->RA_CODFUNC ) )
					oAponta:cFuncaoGrv	:= oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ]
				ENDIF
				IF ( !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ] ) .and. ( oAponta:cDepto == SRA->RA_DEPTO ) )
					oAponta:cDepto	:= oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ]
				ENDIF
				IF ( !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ] ) .and. ( oAponta:cPosto == SRA->RA_POSTO ) )
					oAponta:cPosto	:= oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ]
				ENDIF
				IF ( !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO ] ) .and. ( oAponta:cProcesso == SRA->RA_PROCES ) )
					oAponta:cProcesso:= oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ])
					oAponta:cPeriodo	:= oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ])
					oAponta:cRoteiro	:= oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ])
					oAponta:cNumPagto	:= oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ]
				ENDIF
			EndIF
		EndIF
		IF (;
				!Empty( nIndApo );
				.and.;
				( lUltMarc );
			 )
			Exit
		EndIF
	End While
	nIndAnt := 0
	While ( ( ++nIndAnt ) <= nLenaHoras )
		IF ( oAponta:aHorasAnt[ nIndAnt , 03 ] == "M" )
			nPriMarc	:= 23.59               							//Limite de Marcacao do Dia Anterior
			lPriMarc	:= .T.                                          //Achous a 1a. Marcacao do Dia Anterior
		ElseIF ( oAponta:aHorasAnt[ nIndAnt , 10 ] == "EJ" )
			dDiaAnt		:= oAponta:aHorasAnt[ nIndAnt , 1 ]				//Data da Marcacao Atual
		EndIF
		IF (;
				( lPriMarc );
				.and.;
				!Empty( dDiaAnt );
			 )
			Exit
		EndIF
	End While
	IF (;
			( lUltMarc );
			.and.;
			( lPriMarc );
		)
		IF !( oAponta:lIntNtrab )
			IF ( ( nPos := aScan( oAponta:aHorasAnt , { |x| x[ 1 ] == dDiaAtu .and. x[10] == "SJ" } ) ) == 0 )
				 nPos := aScan( oAponta:aHorasAnt ,{ |x| x[ 1 ] == dDiaAnt .and. x[10] == "SJ" } )
	    	EndIF
	   		IF ( nPos > 0 )
	   			IF ( oAponta:aHorasAnt[ nPos , 17 ] > DataHora2Str( dDiaAnt , nPriMarc ) )
		       		dSvDiaAnt	:= dDiaAnt						//Salva data Anterior
		       		dDiaAnt		:= oAponta:aHorasAnt[ nPos , 1 ]	//Altera a Data Anterior
	        		nPriMarc	:= oAponta:aHorasAnt[ nPos , 2 ]	//Altera o Limite Anterior
	    		EndIF
	    	EndIF
	    	lNextDay := ( DataHora2Str( dDiaAnt , nPriMarc ) < DataHora2Str( dDiaAtu , nUltMarc ) )
	    Else
        	dSvDiaAnt		:= dDiaAnt	//Salva data Anterior
			aHoras			:= aClone(oAponta:aHorasAnt)
			oAponta:aHorasAnt	:={}
			aEval( aHoras , { |x| IF( x[3] == "M" , aAdd(oAponta:aHorasAnt,x) , NIL ) } )
			nLenaHoras  := Len( oAponta:aHorasAnt )
			nUltSaida	:= IF( nLenaHoras %2 >= 1 , ( nLenaHoras - 1 ) , nLenaHoras )
			IF ( nPos := aScan( oAponta:aHorasAnt , { |x| !x[6] } ) ) > 0
			   	IF !Empty( oAponta:aHorasAnt[ nPos , 7 ] )
			    	IF ( Len(oAponta:aHorasAnt[nPos,7]) == 1  )
			    		dDiaAnt 	:= oAponta:aHorasAnt[ nPos , 07, 01, 01 ]
						nPriMarc	:= oAponta:aHorasAnt[ nPos , 07, 01, 02 ]
					EndIF
				Else
					dDiaAnt		:= oAponta:aHorasAnt[ nPos , 1 ]
					nPriMarc	:= oAponta:aHorasAnt[ nPos , 2 ]
				EndIF
			EndIF
			lNextDay := ( DataHora2Str( dData1E , 23.5959 ) < DataHora2Str( dDiaAtu , nUltMarc ) )
	    EndIF
		IF ( lNextDay )

			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁVerifica se as Horas Extras sao Autorizadas           Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF !( lHeAutoriza := ( cTipoMarc $ oAponta:cPagHext ) )
				IF ( ( nPos := aScan( oAponta:aHorasAnt , { |x| x[ 10 ] == "SJ" } ) ) > 0 )
	 				lHeAutoriza := ( oAponta:aHorasAnt[ nPos , 03 ] $ oAponta:cPagHext )
				EndIF
			EndIF

	        /*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁCarrega o tipo de hora extra a ser apontada para o diaЁ
			Ёconforme tabela de horario padrao.					   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			cTpoExtra := fTpoExtra( dDiaAtu , aClone( oAponta:aTabCalend ) )
		   	oAponta:dDataGravar :=  IF( lApHeDtM , IF( dDiaAtu <= oAponta:dUltDia , dDiaAtu , oAponta:dUltDia ) , oAponta:dData )
			IF ( lJtHeDtm ) //Grava H.E. No Dia da 1a. Marcacao Se o Tipo do Dia Seguinte for igual
			    /*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁCompara o Tipo de Horas Extras para Saber em que   diaЁ
				Ёdevera Gravar as Horas Extras.    					   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
				/*/
				IF ( cTpoExtra == fTpoExtra( dDiaAnt , aClone( oAponta:aTabCalend ) ) )
					oAponta:dDataGravar := IF( !Empty( dSvDiaAnt ) , dSvDiaAnt , dDiaAnt )
					dSvDiaAnt	:= dDateEmpty
				Else
					cTipoMarc := "1E"
				EndIF
			Else
				cTipoMarc := "1E"
			EndIF

		    /*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁTipo de Hora Extra para Intervalo					   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			cTpHeIntNr := GetTpExInt( SubStr( cTpoExtra , 3 , 1 ) , .F. )	//Normal
			cTpHeIntNt := GetTpExInt( SubStr( cTpoExtra , 1 , 1 ) , .T. ) 	//Noturna

			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁVerifica se Deve Gravar o Tipo da Marcacao			   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA] == oAponta:dDataGravar } ) ) > 0 )

				IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ] ) )
					oAponta:cFuncaoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ]
				Else
					oAponta:cFuncaoGrv := SRA->RA_CODFUNC
				EndIF

				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ])
					oAponta:cDepto	:= oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ]
				Else
					oAponta:cDepto	:= SRA->RA_DEPTO
				EndIF

				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ])
					oAponta:cPosto	:= oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ]
				Else
					oAponta:cPosto	:= SRA->RA_POSTO
				EndIF

				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO ])
					oAponta:cProcesso:= oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO]
				Else
					oAponta:cProcesso:= RCH->RCH_PROCES
				EndIF

				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ])
					oAponta:cPeriodo	:= oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ]
				Else
					oAponta:cPeriodo	:= RCH->RCH_PER
				EndIF

				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ])
					oAponta:cRoteiro	:= oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ]
				Else
					oAponta:cRoteiro	:= RCH->RCH_ROTEIR
				EndIF

				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ])
					oAponta:cNumPagto	:= oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ]
				Else
					oAponta:cNumPagto	:= RCH->RCH_NUMPAG
				EndIF

			EndIF

		    /*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁVerifica se Deve Gravar o Tipo da Marcacao			   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
			/*/
			cTipoMarc := IF( oAponta:lApTpMar , cTipoMarc , NIL )

			//Retorna a Posicao da Ultima Marcacao nao Apontada
			IF ( ( nPos := aScan( oAponta:aHorasAnt , { |x| x[ 3 ] == "M" .and. !x[6] } ) ) > 0 )

				//Aponta Todas as Horas Extras para o Dia Seguinte
				For nX := nPos To nLenaHoras Step 2
				 	IF ( oAponta:lIntNtrab )
		               	nXPlus1 := Min( nX + 1 , nLenaHoras )
	                   	IF !Empty( oAponta:aHorasAnt[ nX , 7 ] )
				    		IF ( Len(oAponta:aHorasAnt[ nX , 7 ] ) == 1.00 )
				    			dDiaAnt 	:= oAponta:aHorasAnt[ nX , 07, 01, 01 ]

								If (oAponta:aHorasAnt[ nX , 07, 01, 02 ] == 23.5959)
									dDiaAnt 	:= dDiaAnt + 1
									nPriMarc	:= 0
								Else
									nPriMarc	:= oAponta:aHorasAnt[ nX , 07, 01, 02 ]
								Endif

								dDiaAtu		:= oAponta:aHorasAnt[ nX ,01 ]
								nUltMarc	:= oAponta:aHorasAnt[ nX ,02 ]
  								Eval(bExtras,oAponta:aHorasAnt[ nX , 07, 01,03 ])
							Else
								dDiaAnt 	:= oAponta:aHorasAnt[ nX , 07, 01, 01 ]

								If (oAponta:aHorasAnt[ nX , 07, 01, 02 ] == 23.5959)
									dDiaAnt 	:= dDiaAnt + 1
									nPriMarc	:= 0
								Else
									nPriMarc	:= oAponta:aHorasAnt[ nX , 07, 01, 02 ]
								Endif

								dDiaAtu		:= oAponta:aHorasAnt[ nX , 07, 02, 01 ]
								nUltMarc	:= oAponta:aHorasAnt[ nX , 07, 02, 02 ]
								Eval(bExtras, oAponta:aHorasAnt[ nX , 07, 03 ])
							EndIF
						Else
							IF ( nX == nXPlus1 )
						   		--nX
							EndIF
						EndIF
						/*/
				   		здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
						ЁQuando Pagar Horas Extras No Intervalo em Dias Nao TraЁ
						Ёbalhados e funcionario Tiver Efetuado a marcacao de InЁ
						ЁTervalo                                               Ё
						юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
						/*/
						nLenMarc 	:= Len( oAponta:aHorasAnt )
						nElem 		:= IF( nLenMarc %2 >= 1 , ( nLenMarc - 1 ) , nLenMarc )
						nXPlus2		:= Min(nX,nElem)
						IF SubStr( oAponta:aHorasAnt[ nXPlus2 ,08 ]  , -1 ) == "S" .and. nX < nUltSaida

							IF ( ("I" + SubStr( oAponta:aHorasAnt[ nXPlus2 ,08 ]  , 01 , 01 ) $ oAponta:cPagInt ) )

					  		  	//-- Procuro pela Saida nas Horas de Intervalo Realizadas
								nPosInt		:= aScan( oAponta:aHorasAnt , { |x| x[08] == oAponta:aHorasAnt[ nXPlus2 ,08 ]  } )
								nPosInt1	:= nPosInt+1
								nPosInt3	:= aScan(aHoras,{|x| x[3] == oAponta:aHorasAnt[nPosInt,8] .and. x[10] == "SI" } )

								//-- Nao calcula Extras para a Mesma Data+hora
								IF (;
										( nPosInt > 0 );
										.and.;
										( nPosInt3 > 0 );
										.and.;
										( nPosInt <> nPosInt1 );
									 )

									 //-- Obtem a Hora de Retorno do Intervalo conforme a Saida do Funcionario + as as Horas de Intervalo
								 	 aHrIntTab	:= RetFimTab( oAponta:aHorasAnt[nPos,1] , oAponta:aHorasAnt[nPosInt,2] , aHoras[nPosInt3,09] )
		 							 dDiaAnt 	:= oAponta:aHorasAnt[nPosInt,1]
									 nPriMarc	:= oAponta:aHorasAnt[nPosInt,2]
									 dDiaAtu	:= aHrIntTab[1]
									 nUltMarc	:= aHrIntTab[2]
									 IF ( DataHora2Str( aHrIntTab[1] , aHrIntTab[2] ) > DataHora2Str( oAponta:aHorasAnt[nPosInt1,1] , oAponta:aHorasAnt[nPosInt1,2] ) )
									    dDiaAtu		:= oAponta:aHorasAnt[nPosInt1,1]
					   				    nUltMarc	:= oAponta:aHorasAnt[nPosInt1,2]
									 EndIF
									 nIndApoAux	:=	nIndApo
									 Eval(bExtras,.T.)
									 nIndApo	:=	nIndApoAux
								EndIF
							EndIF
						Else
							dDiaAnt		:= oAponta:aHorasAnt[ nX ,01 ]
							nPriMarc	:= oAponta:aHorasAnt[ nX ,02 ]
							dDiaAtu		:= oAponta:aHorasAnt[ nXPlus1  ,01 ]
							nUltMarc	:= oAponta:aHorasAnt[ nXPlus1  ,02 ]
							Eval(bExtras)
						EndIF
		            Else
						nXPlus1 := ( nX + 1 )
						IF !( nX == nPos )
							dDiaAnt 	:= oAponta:aHorasAnt[ nX , 01 ]
							nPriMarc	:= oAponta:aHorasAnt[ nX , 02 ]
							dDiaAtu		:= oAponta:aHorasAnt[ Min( nXPlus1 , nLenaHoras ) , 01 ]
							nUltMarc	:= oAponta:aHorasAnt[ Min( nXPlus1 , nLenaHoras ) , 02 ]
	                    Else
				    		lTemSubArray := If( !Empty( oAponta:aHorasAnt[ nX , 7] ), ( Valtype(oAponta:aHorasAnt[ nX , 7, 1 ] ) == "D" ), .F. )

				    		IF ( lTemSubArray )
				    			dDiaAtu		:= oAponta:aHorasAnt[ nX , 01 ]
								nUltMarc	:= oAponta:aHorasAnt[ nX , 02 ]
				    			dDiaAnt 	:= oAponta:aHorasAnt[ nX , 07, 01 ]
								nPriMarc	:= oAponta:aHorasAnt[ nX , 07, 02 ]
								--nX
							Else
								dDiaAtu		:= oAponta:aHorasAnt[ nX , 01 ]
								nUltMarc	:= oAponta:aHorasAnt[ nX , 02 ]
								--nX
							EndIF
						EndIF
			  			Eval(bExtras)
					EndIF
				Next nX
			EndIF

			//-- Verifica se para funcionario em ferias as horas extras sao autorizadas
			IF ( (lAponFer :=  GetInfoPosTab(CALEND_POS_APON_FERIAS,"1E",oAponta:dDataGravar,oAponta:aTabCalend) ) )
			   lHeAutoriza:= ( GetInfoPosTab(CALEND_POS_HE_AUTO_FER,"1E",oAponta:dDataGravar,oAponta:aTabCalend) )
			Endif

			IF ( oAponta:cAdNot == "N" ) //Verifica se o Adicional Noturno e Autorizado
				oAponta:aApo[oaApo:AdicNotNau,nIndApo]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotNau,nIndApo],oAponta:aApo[oaApo:AdicNotAut,nIndApo] )
				oAponta:aApo[oaApo:AdicNotAut,nIndApo]	:= 0
			EndIF

			IF (;
					(;
						( oAponta:cAdNotEx == "N" );
						.or.;
						!( lHeAutoriza );
					);
					.or.;
					( oAponta:lFaixaHE );
				) //Verifica se o Adicional Sobre Horas Extras e Autorizado
			    //--Calcula e soma total de adic sob He not em adic sobre He not nao
				fSomaApoHE(	@oAponta:aApo[oaApo:AdicHeNotN,nIndApo]	,; //Valor Acumulado com HE nao autorizadas
					       	@oAponta:aApo[oaApo:AdicHeNotA,nIndApo]	,; //Valor Integral (Nao zera mas contera o valor autorizado)
					       	@oAponta:aApo[oaApo:AdicHeNotF,nIndApo]	 ; //Valor Autorizado (sera zerado)
					       )

			EndIF

			// Adic.Not.Normal Autorizado
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotAut,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 004 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						0           							,;	//09 -> Tolerancia
						"N"						 				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						NIL										,;  //11 -> Substitui a(s) Hora(s) Existente(s) em aResult
						oAponta:cFuncaoGrv						,;  //12 -> Funcao
						oAponta:cDepto							,;  //13 -> Depto para gravacao
						oAponta:cPosto			   				,;  //14 -> Posto para gravacao
						oAponta:cProcesso						,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro						,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo						,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto						 ;  //18 -> NumPagto para Gravacao
		             )

			// Adic.Not.H.Extra Autorizado
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotA,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 028 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						0           							,;	//09 -> Tolerancia
						"N"						 				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						NIL										,;  //11 -> Substitui a(s) Hora(s) Existente(s) em aResult
						oAponta:cFuncaoGrv						,;  //12 -> Funcao
						oAponta:cDepto							,;  //13 -> Depto para gravacao
						oAponta:cPosto			   				,;  //14 -> Posto para gravacao
						oAponta:cProcesso						,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro						,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo						,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto						 ;  //18 -> NumPagto para Gravacao
		             )

			// Adic.Not.Normal Nao Autorizado
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotNau,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 003 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						0           							,;	//09 -> Tolerancia
						"N"						 				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						NIL										,;  //11 -> Substitui a(s) Hora(s) Existente(s) em aResult
						oAponta:cFuncaoGrv						,;  //12 -> Funcao
						oAponta:cDepto							,;  //13 -> Depto para gravacao
						oAponta:cPosto			   				,;  //14 -> Posto para gravacao
						oAponta:cProcesso						,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro						,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo						,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto						 ;  //18 -> NumPagto para Gravacao
		             )

			//-- Gera Adicional Noturno Nao Autorizado para Horas Extras
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotN,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 027 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						0           							,;	//09 -> Tolerancia
						"N"						 				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						NIL										,;  //11 -> Substitui a(s) Hora(s) Existente(s) em aResult
						oAponta:cFuncaoGrv						,;  //12 -> Funcao
						oAponta:cDepto							,;  //13 -> Depto para gravacao
						oAponta:cPosto			   				,;  //14 -> Posto para gravacao
						oAponta:cProcesso						,;  //15 -> Processo para Gravacao
						oAponta:cRoteiro						,;  //16 -> Roteiro para Gravacao
						oAponta:cPeriodo						,;  //17 -> Periodo para Gravacao
						oAponta:cNumPagto						 ;  //18 -> NumPagto para Gravacao
		             )
           //-- Aloca os valores de HE conforme Autorizadas/Nao autorizadas
			IF ( oAponta:lFaixaHE )
				//-- Recalcula os valores de HE
		        // Normal
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNorNAut,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNormal,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNormalFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
				// Noturna
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNotAutor,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNoturnFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
	   		    // Intervalo
	   			fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNorNa,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNorAu,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNorFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
				// Intervalo Noturno
				fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNotNa,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNotAu,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNotFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
			EndIF

			//-- Verifica se Pagou Nona Hora na Data
			IF ( ( nPos := aScan( oAponta:aResult , { |x| x[ 1 ] == dData1E .and. x[ 2 ] == aEvesIds[ 025 , 02 ] } ) ) > 0 )
				IF ( ( nPos := aScan( oAponta:aNona , { |x| x[ 1 ] == dData1E .and. x[ 3 ] == 0 } ) ) > 0 )
					oAponta:nNonaHor		:= oAponta:aNona[ nPos , 2 ]
					oAponta:nNonaHorAut	:= oAponta:aNona[ nPos , 5 ]
					oAponta:aNona[ nPos , 3 ]++
					IF !( oAponta:lFaixaHE )
						//Subtrai a Nona Hora das Horas Extras Noturna ap╒s Expediente
						IF ( ( oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] > 0 ) .and. ( oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] >= oAponta:nNonaHor ) )
							oAponta:aApo[ oaApo:HeNotAutor , nIndApo ]	:= SubHoras( oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] , oAponta:nNonaHor )
							oAponta:nNonaHor							:= 0
						Else
							oAponta:nNonaHor							:= SubHoras( oAponta:nNonaHor , oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] )
							oAponta:aApo[ oaApo:HeNotAutor , nIndApo ]	:= 0
						EndIF
						//Subtrai a Nona Hora das Horas Extras ap╒s Expediente
						IF ( ( oAponta:aApo[ oaApo:HeNormal , nIndApo ] > 0 ) .and. ( oAponta:aApo[ oaApo:HeNormal , nIndApo ] >= oAponta:nNonaHor ) )
							oAponta:aApo[ oaApo:HeNormal , nIndApo ]	:= SubHoras( oAponta:aApo[ oaApo:HeNormal , nIndApo ] , oAponta:nNonaHor )
							oAponta:nNonaHor							:= 0
						Else
							oAponta:aApo[ oaApo:HeNormal , nIndApo ]	:= 0
						EndIF
					Else
						//Subtrai a Nona Hora das Horas Extras Noturna ap╒s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNotAutor,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotAutor,nIndApo] >= oAponta:nNonaHorAut ) )
							//-- Subtrai das Horas Noturnas a Nona Hora Autorizada (Pois so devo pagar a diferenca)
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	:= SubHoras( oAponta:aApo[oaApo:HeNotAutor,nIndApo] , oAponta:nNonaHorAut )
							//-- Subtrai da Nona Hora a Nona Hora Autorizada
							oAponta:nNonaHor	:= SubHoras( nNonaHor, oAponta:nNonaHorAut )
							oAponta:nNonaHorAut	:= 0
						Else
							oAponta:nNonaHorAut						:= SubHoras( oAponta:nNonaHorAut , oAponta:aApo[oaApo:HeNotAutor,nIndApo] )
							oAponta:nNonaHor   						:= SubHoras( oAponta:nNonaHor    , oAponta:aApo[oaApo:HeNotAutor,nIndApo] )
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	:= 0
						EndIF

						//Subtrai a Nona Hora das Horas Extras ap╒s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNormal,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNormal,nIndApo] >= oAponta:nNonaHorAut ) )
							oAponta:aApo[oaApo:HeNormal,nIndApo] 	:= SubHoras( oAponta:aApo[oaApo:HeNormal,nIndApo] , oAponta:nNonaHorAut )
							oAponta:nNonaHor						:=  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut )
							oAponta:nNonaHorAut						:= 0
						Else
							oAponta:nNonaHorAut						:= SubHoras( oAponta:nNonaHorAut , oAponta:aApo[oaApo:HeNormal,nIndApo] )
							oAponta:nNonaHor  						:= SubHoras( oAponta:nNonaHor    , oAponta:aApo[oaApo:HeNormal,nIndApo] )
							oAponta:aApo[oaApo:HeNormal,nIndApo]	:= 0
						EndIF
					EndIF
               	EndIF
            EndIF

			IF ( !( lHeAutoriza )  .and. !( oAponta:lFaixaHE ) )
				oAponta:aApo[ oaApo:HeNorNAut	, nIndApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNorNAut , nIndApo ] , oAponta:aApo[ oaApo:HeNormal , nIndApo ]  )
				oAponta:aApo[ oaApo:HeNormal	, nIndApo ]	:= 0
				oAponta:aApo[ oaApo:HeNotNaoAu	, nIndApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNotNaoAu , nIndApo ] , oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] )
				oAponta:aApo[ oaApo:HeNotAutor	, nIndApo ]	:= 0
			Else
				IF ( oAponta:lFaixaHE )
					//Subtrai a Nona Hora das Horas Extras Noturna ap╒s Expediente
					IF ( ( oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) ) )
						oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	:= SubHoras( oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] , SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
						oAponta:nNonaHor	:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
					Else
						oAponta:nNonaHor	:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] )
						oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	:= 0
					EndIF
					//Subtrai a Nona Hora das Horas Extras ap╒s Expediente
					IF ( ( oAponta:aApo[oaApo:HeNorNAut,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNorNAut,nIndApo] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) ) )
						oAponta:aApo[oaApo:HeNorNAut,nIndApo]	:= SubHoras( oAponta:aApo[oaApo:HeNorNAut,nIndApo] ,  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
						oAponta:nNonaHor						:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
					Else
						oAponta:nNonaHor						:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNorNAut,nIndApo] )
						oAponta:aApo[oaApo:HeNorNAut,nIndApo]	:= 0
					EndIF
				EndIF
			EndIF

			IF SubStr( cTpoExtra , 1 , 1 ) == SubStr( cTpoExtra , 3 , 1 )
				oAponta:aApo[oaApo:HeNormal,nIndApo]  	:= SomaHoras(oAponta:aApo[oaApo:HeNormal,nIndApo],oAponta:aApo[oaApo:HeNotAutor,nIndApo])
				oAponta:aApo[oaApo:HeNotAutor,nIndApo]	:= 0
				oAponta:aApo[oaApo:HeNorNAut,nIndApo] 	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nIndApo],oAponta:aApo[oaApo:HeNotNaoAu,nIndApo])
				oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	:= 0
			EndIF

			IF ( oAponta:aApo[oaApo:PriorityHe,nIndApo] == Priority_Nocturnal_Overtime ) //Verifica Prioridade
				//-- Gera horas extras noturnas
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 1 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.					 					,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
							Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )

				//-- Gera Horas Extras Noturnas Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNt								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNotAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNotNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"			   						,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
							Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )

				//-- Gera Horas Extras Normais
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 3 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNormal,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNorNAut,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
							Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )

				//-- Gera Horas Extras do Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNr								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNorAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNorNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							NIL										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt							 	,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
				           	Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )

			Else
				//-- Gera Horas Extras Normais
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 3 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNormal,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNorNAut,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        	   							,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
						   	Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )

					//-- Gera Horas Extras do Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNr								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNorAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNorNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							NIL										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt							 	,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
				           	Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )

				//-- Gera horas extras noturnas
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 1 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.					 					,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacaoc
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
						   	Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )

				//-- Gera Horas Extras Noturnas Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNt								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNotAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNotNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"			   						,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
				           	Nil										,;	//14 -> Se Substitui as Horas Existentes
							oAponta:cFuncaoGrv						,;  //15 -> Funcao a ser Gravada
							oAponta:cDepto							,;  //16 -> Depto para gravacao
							oAponta:cPosto			  	 			,;  //17 -> Posto para gravacao
							oAponta:cProcesso						,;  //18 -> Processo para Gravacao
							oAponta:cRoteiro						,;  //19 -> Roteiro para Gravacao
							oAponta:cPeriodo						,;  //20 -> Periodo para Gravacao
							oAponta:cNumPagto						 ;  //21 -> NumPagto para Gravacao
			             )
			EndIF
		EndIF
		//-- Retorna ao conteudo anterior
		If 	( oAponta:lIntNtrab )
			oAponta:aHorasAnt	:=aClone(aHoras)
		Endif
	EndIF
EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfHrsNona    Ё Autor ЁMarinaldo de Jesus	   Ё Data Ё28/09/2000Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁAponta e Gera Nona Hora                             		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnNonaHor -> Quantidade de Nona Hora Calculada 	   		  	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fHrsNona()

Local lUltHTab	:= .F.	//Encontrou Ultima Marcacao da Tabela
Local lUltMarc	:= .F.	//Encontrou Ultima Marcacao Efetiva

Local nMaxNona	:= 1	//Numero Maximo de Horas correspondente a Nona-Hora
Local nUltHTab	:= 0	//Ultima Marcacao da Tabela
Local nUltMarc	:= 0	//Ultima Marcacao Efetiva

Local dDataTab			//Data da Marcacao Correspondente a Tabela
Local dDataMar			//Data da Efetiva Marcacao

Local cCusto			//Centro de Custo para Gravacao
Local cTipoMarc			//Tipo de Marcacao
Local cFuncao           //Funcao
Local cDepto			//Depto
Local cPosto			//Posto
Local cProcesso	   		//Processo
Local cPeriodo			//Periodo
Local cRoteiro			//Roteiro
Local cNumPagto			//NumPagto

Local lElemImp			//aHoras possui Elementos Impares

Local nIndMarc   		//Indice para pesquisa em aHoras
Local nPos  			//Variavel Temporario para Indice de Array
Local nTolHExt			//Numero de Horas Correspondente a Tolerancia de H.E. na Saida
Local nPosTole			//Posicionamento da Toleracia

//Verifica o Numero de Elementos do oAponta:aHoras
//Se oAponta:aHoras Contiver Elementos Impares, Decrementa
IF ( lElemImp := ( ( ( nIndMarc := Len( oAponta:aHoras ) ) % 2 ) > 0 ) )
	--nIndMarc
EndIF

IF ( nIndMarc > 0 )
	While ( nIndMarc > 0 )
		//Retorna Horario da Tabela
		IF (;
				( nUltHTab == 0 );
				.and.;
				( oAponta:aHoras[ nIndMarc , 3 ] != "M" );
				.and.;
				!Empty( oAponta:aHoras[ nIndMarc , 03 ] );
			)
			dDataTab	:=	oAponta:aHoras[ nIndMarc , 01 ]	//Data da Tabela
			nUltHTab	:=	oAponta:aHoras[ nIndMarc , 02 ]	//Ultimo Horario da Tabela
			cTipoMarc	:=	oAponta:aHoras[ nIndMarc , 03 ]	//Tipo de Marcacao
			lUltHTab	:=	.T.								//Achou Ultimo Horario Tabela

			IF Empty( cCusto )
				cCusto	:=	oAponta:aHoras[ nIndMarc , 14 ]	//Se nao Achou Centro de Custo na Marcacao
			EndIF
			IF Empty(oAponta:cFuncaoGrv)
				cFuncaoGrv	:= SRA->RA_CODFUNC
			ENDIF
				IF Empty(oAponta:cDepto)
				cDepto	:= SRA->RA_DEPTO
			ENDIF
			IF Empty(oAponta:cPosto)
				cPosto	:= SRA->RA_POSTO
			ENDIF
			IF Empty(oAponta:cProcesso)
				cProcesso:= RCH->RCH_PROCES
			ENDIF
			IF Empty(oAponta:cPeriodo)
				cPeriodo	:= RCH->RCH_PER
			ENDIF
			IF Empty(oAponta:cRoteiro)
				cRoteiro	:= RCH->RCH_ROTEIR
			ENDIF
			IF Empty(oAponta:cNumPagto)
				cNumPagto	:= RCH->RCH_NUMPAG
			ENDIF

			IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA] == dDataTab } ) ) > 0 )
				IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( cCusto == SRA->RA_CC ) )
					cCusto	:= oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
				EndIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ])
					cFuncao	:= oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ])
					cDepto	:= oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ])
					cPosto	:= oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO ])
					cProcesso:= oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ])
					cPeriodo	:= oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ])
					cRoteiro	:= oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ]
				ENDIF
				IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ])
					cNumPagto	:= oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ]
				ENDIF
			EndIF
		EndIF
		//Retorna ultima marcacao do dia anterior
		IF (;
				( nUltMarc == 0 );
				.and.;
				( oAponta:aHoras[ nIndMarc , 3 ] == "M" );
			)
			dDataMar	:=	oAponta:aHoras[ nIndMarc , 01 ]	//Data da Marcacao
			nUltMarc	:=	oAponta:aHoras[ nIndMarc , 02 ]	//Ultima Marcacao Efetuada
			cCusto		:=	oAponta:aHoras[ nIndMarc , 14 ]	//Centro de Custo Onde foi Efetuada a Nona Hora
			lUltMarc	:=	.T.								//Achou ultima Marcacao Efetiva
		EndIF
		//Sai do While Quando Encontrar Marcacao e Tabela
		IF (;
				( lUltHTab );
				.and.;
				( lUltMarc );
			)
			Exit
		EndIF
		--nIndMarc
	End While
	IF (;
			( lUltHTab );
			.and.;
			( lUltMarc );
		)
		//Se Marcacao for Maior que Horario da Tabela
		IF (;
				DataHora2Str( dDataTab , nUltHTab );
				<;
				DataHora2Str( dDataMar , nUltMarc );
			)
			//Apura a Quantidade de Horas correspondente a Nona Hora ( Considerando a Hora Reduzida )
			oAponta:nNonaHor := Min(;
							   			 fCalHoras(	dDataTab							,;	//01 -> Data 1
								 					nUltHTab							,;	//02 -> Hora 1
										 			dDataMar							,;	//03 -> Data 2
										 			nUltMarc							,;	//04 -> Hora 2
										 			NIL									,;	//05 -> <@>Horas Normais Apontadas
										 			NIL									,;	//06 -> <@>Horas Noturnas Apontadas
										 			.T.									,;	//07 -> Apontar Horas Noturnas
										 			oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
													NIL									,;	//09 -> <@>Horas de Acrescimo Noturno
													oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
													oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
													oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
													oAponta:lAcreNot					,;	//13 -> Apenas Acrescimo Noturno
													NIL		 	 						 ;	//14 -> Periodo da Hora Noturna
										 		  ),;
										 nMaxNona;
									)
			//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
			IF ( oAponta:lFaixaHE )
				oAponta:nNonaHorAut	:=Min( fHeAutoriz( 	dDataTab							,;	//01 -> Data 1
															nUltHTab						,;	//02 -> Hora 1
															dDataMar						,; 	//03 -> Data 2
															nUltMarc						,;	//04 -> Hora 2
															NIL								,;	//05 -> <@>Horas Normais Apontadas
															NIL								,;	//06 -> <@>Horas Noturnas Apontadas
															.T.								,;	//07 -> Apontar Horas Noturnas
															oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
															NIL								 ;	//09 -> <@>Horas de Acrescimo Noturno
													 	),;
												nMaxNona;
										 )
            EndIF

            IF ( ( nPosTole := aScan( oAponta:aSiglaMarc , { |x| x == cTipoMarc } ) ) > 0 )
	            //Submete a Nona Hora a Toler┐ncia de H.E. Saida
				nTolHExt := fTolerancia( oAponta:cTolHex , nPosTole )
			EndIF
			//Gera a Nona Hora so" Qdo. Existir o Identificador
			oAponta:dDataGravar := oAponta:dData
			fGeraRes(	oAponta:aResult															,; //01 -> Array com os Resultados do Dia
					 	oAponta:dDataGravar														,; //02 -> Data da Geracao
					 	oAponta:nNonaHor														,; //03 -> Numero de Horas Resultantes
					 	aEvesIds[ 025 , 02 ]													,; //04 -> Codigo do Evento
						cCusto                   												,; //05 -> Centro de Custo a ser Gravado
						IF( oAponta:lApTpMar , cTipoMarc , NIL )								,; //06 -> Tipo de Marcacao
					 	IF( lApHeDtM , IF( dDataMar > oAponta:dDataGravar , .T. , .F. ) , .F. )	,; //07 -> True para Acumular as Horas
						oAponta:cPerHext														,; //08 -> Periodo de Apuracao
						nTolHExt							 									,; //09 -> Tolerancia
						"9"						 												,; //10 - Tabela de Arredondamento
						NIL																		,; //11 -> Substitui a(s) Hora(s) Existente(s) em aResult
						cFuncaoGrv																,; //12 -> Funcao
						cDepto								   									,; //13 -> Depto para gravacao
						cPosto																	,; //14 -> Posto para gravacao
						cProcesso																,; //15 -> Periodo para Gravacao
						cRoteiro																,; //16 -> Roteiro  para Gravacao
						cPeriodo																,; //17 -> Periodo para Gravacao
						cNumPagto																 ; //18 -> NumPagto para Gravacao
				 	 )
			//Carrega o Array aNona
			IF ( aScan( oAponta:aNona , { |x| x[ 1 ] == oAponta:dDataGravar } ) == 0 )
				aAdd( oAponta:aNona , { oAponta:dDataGravar , oAponta:nNonaHor , 0 , cCusto , oAponta:nNonaHorAut } )
			EndIF
		EndIF
	EndIF
EndIF

Return( oAponta:nNonaHor )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfHeMovel	Ё Autor ЁMarinaldo de Jesus    Ё Data Ё20/10/2000Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁApura He para Horario Movel Livre							 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fHeMovel(	lHTrab	 		,;	//02 -> Considera Horas Trabahadas
						  	lFeriado		 ;	//03 -> Dia Corresponde a um Feriado
						 )

Local aPerNot		:= {}
Local aHorasNew		:= {}
Local aHorasAdic	:= {}
Local aOnlyMarkings	:= {}
Local aMarcIdeal	:= {}

Local cTipoMarc		:= ""

Local lAponFer		:= .F.
Local lHeAutoriza	:= .F.

Local nHorasCalc	:= 0
Local nHorasSalv 	:= 0
Local nHorasTrab	:= 0
Local nPosHrsTab	:= 0
Local nX			:= 0
Local nXPlus1		:= 0
Local nFornX		:= 0
Local nY			:= 0
Local nEx    	    := 0
Local nExNot    	:= 0
Local nTolHExt  	:= 0
Local nExAdn		:= 0
Local nExAut       	:= 0
Local nExNotAut    	:= 0
Local nExAdnAut		:= 0
Local nExDiaAdn		:= 0
Local nExDiaAutAdn	:= 0
Local nIndiceaApo	:= Max( oAponta:nTotMarcTab , 1 )
Local nPos			:= 0
//-- Para HE nao destaca Acrescimo quando existir identificador para tal e solicitado
//-- o destaque do acrescimo noturno.
Local lAcreNot		:= If( (oAponta:lIdAcreNot  .AND. oAponta:lAcreNot), .F., oAponta:lAcreNot )

// Considera Horas da Tabela Apenas Para Dias Trabalhados
DEFAULT	lHTrab		:= .F.
DEFAULT lFeriado	:= .F.

// Verifica o Total de Horas Que deveriam ser Trabahadas no Dia em Questao
IF ( ( nPosHrsTab := aScan( oAponta:aHoras, { |x| !Empty( x[ 04 ] ) } ) ) > 0 )
	IF !( lFeriado )
	    aEval( oAponta:aHoras , { |x| nHorasTrab := SomaHoras( nHorasTrab , x[ 04 ] ) } , nPosHrsTab )
	EndIF
Else
	IF !( lHTrab )
		Return( NIL )
	EndIF
EndIF

// Carrega apenas as Marcacoes
nFornX := Len( oAponta:aHoras )
For nX := 1 To nFornX
	IF ( oAponta:aHoras[ nX , 3 ] == "M" )
		aAdd( aOnlyMarkings , aClone( oAponta:aHoras[ nX ] ) )
	EndIF
Next nX

// Se as Marcacoes forem Impar, duplica a utima Marcacao
IF ( ( nX := Len( aOnlyMarkings ) ) % 2 != 0 )
	aAdd( aOnlyMarkings , aClone( aOnlyMarkings[ nX ] ) )
EndIF


// Monta aHorasNew apenas com as Horas que serao Consideradas para H.E.
nFornX := Len( aOnlyMarkings )
For nX := 1 To nFornX  Step 2
	nXPlus1 := ( nX + 1 )
	IF ( nHorasCalc < nHorasTrab )
		IF ( nHorasCalc := __TimeSum(SomaHoras( nHorasCalc									,;
	 	  	  						 fCalHoras(	aOnlyMarkings[ nX		, 1 ]		,;	//01 -> Data da 1a Marcacao
									 			aOnlyMarkings[ nX		, 2 ]		,;	//02 -> 1a Marcacao
												aOnlyMarkings[ nXPlus1	, 1 ]		,;	//03 -> Data da 2a Marcacao
												aOnlyMarkings[ nXPlus1	, 2 ]		,;	//04 -> Segunda Marcacao
												0								,;	//05 -> Horas Normais
												0								,;	//06 -> Horas Noturnas
												.T.									,;	//07 -> Considera Hora Noturna
												oAponta:dData						,;	//08 -> Data do Inicio do Horario Noturno
												NIL									,;	//09 -> <@>Horas de Acrescimo Noturno
												oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
												oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
												oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
												lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
												NIL		 					 		 ;	//14 -> Periodo da Hora Noturna
											   )							 		 ;
								     ),0)									 		 ;
		   ) <= nHorasTrab
			nHorasSalv := nHorasCalc
			IF ( nHorasCalc == nHorasTrab )
				Loop
			EndIF
		EndIF
	EndIF
	IF ( ( nHorasSalv > 0 ) .and. ( nHorasSalv  < nHorasTrab ) .and. ( nHorasCalc > nHorasTrab ) )
		IF Empty( aHorasNew )
			aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]				,;	//Data da Marcacao
									 aOnlyMarkings[ nX , 2 ]   				,;	//Marcacao
									 SubHoras( nHorasTrab, nHorasSalv )	,;  //Horas Faltantes
									 0										,;	//Horas de Intervalo
									 .T.									,;	//Considera Hora Noturna
									 oAponta:dData							,;	//Data Para Inicio de Apuracao da Hora Noturna
								  	 oAponta:nIniHnot						,;	//Inicio do Horario Noturno
								 	 oAponta:nFimHnot						,;	//Final do Horario Noturno
								 	 oAponta:nMinHnot						 ;	//Minutos do Horario Noturno
								   )
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nX     ] ) )										//Adiciona 1a Marcacao
			aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]										//Altera Data da 1a Marcacao
			aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]										//Altera 1a Marcacao
			aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aMarcIdeal[ 01 ] , aMarcIdeal[ 02 ] )	//Altera a String de Data/Hora
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )										//Adiciona Proxima Marcacao
		Else
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )				//Adiciona 1a Marcacao
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )				//Adiciona 2a Marcacao
		EndIF
	ElseIF ( nHorasCalc > nHorasTrab )
		IF Empty( aHorasNew )
			aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]		,;		//Data da Marcacao
									 aOnlyMarkings[ nX , 2 ]   		,;		//Marcacao
									 nHorasTrab						,;  	//Horas Faltantes
									 0								,;		//Horas de Intervalo
									 .T.							,;		//Considera Hora Noturna
									 oAponta:dData					,;		//Data Para Inicio de Apuracao da Hora Noturna
									 oAponta:nIniHnot				,;		//Inicio do Horario Noturno
								 	 oAponta:nFimHnot				,;		//Final do Horario Noturno
								 	 oAponta:nMinHnot				 ;		//Minutos do Horario Noturno
								   )
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nX     ] ) )										//Adiciona 1a Marcacao
			aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]										//Altera Data da 1a Marcacao
			aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]										//Altera 1a Marcacao
			aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aMarcIdeal[ 01 ] , aMarcIdeal[ 02 ] )	//Altera a String de Data/Hora
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )										//Adiciona 2a Marcacao
		Else
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )				//Adiciona 1a Marcacao
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )				//Adiciona 2a Marcacao
		EndIF
	ElseIF ( nHorasCalc == nHorasTrab )
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )				//Adiciona 1a Marcacao
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )				//Adiciona 2a Marcacao
	EndIF
Next nX

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁPreserva Horas Originais para calculo dos adicio- Ё
Ёnais especiais.								   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
aHorasAdic:=aClone(aHorasNew)

// Separa as Marcacoes Por Data
IF ( lApHeDtM )
	nFornX := Len( aHorasNew )
	For nX := 1 To nFornX Step 2
		nXPlus1 := ( nX + 1 )
		IF ( DataHora2Str(aHorasNew[nX,1],23.59) < aHorasNew[nXPlus1,17] )
			For nY := 1 To 2
				aAdd( aHorasNew , aClone( aHorasNew[ nX ] ) )
				aHorasNew[ Len( aHorasNew ) , 02 ] := 23.59
				aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aHorasNew[ Len( aHorasNew ) , 01 ] , 23.59 )
			Next nY
			oAponta:SortaHoras( NIL , @aHorasNew )
			Exit
		EndIF
	Next nX
EndIF

// Aponta e Grava Horas Extras e Adicionais
nFornX := Len( aHorasNew )
For nX := 1 To nFornX Step 2

	nXPlus1 := ( nX + 1 )

	//-- Zera a Matriz de Apontamento
	oAponta:ZeraApo()

	//-- Define qual a toler┐ncia de hora extra a ser utilizada.
	IF ( oAponta:cTipoDia == "S" )
		nTolHExt  := fTolerancia( oAponta:cTolHex , 2 )
	EndIF

    /*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁVerifica se as Horas Extras sao Autorizadas           Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 )
		lHeAutoriza := ( "1S" $ oAponta:cPagHext )
		cTipoMarc := IF( oAponta:lApTpMar , "1S" , NIL )
	Else
		lHeAutoriza := ( "2S" $ oAponta:cPagHext )
		cTipoMarc := IF( oAponta:lApTpMar , "2S" , NIL )
	EndIF

     /*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDetermina a funcao para as horas extras         	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF Empty(oAponta:cFuncaoGrv)
			oAponta:cFuncaoGrv	:= SRA->RA_CODFUNC
	ENDIF
	IF Empty(oAponta:cDepto)
			oAponta:cDepto	:= SRA->RA_DEPTO
	ENDIF
	IF Empty(oAponta:cPosto)
			oAponta:cPosto	:= SRA->RA_POSTO
	ENDIF
	IF Empty(oAponta:cProcesso)
			oAponta:cProcesso:= RCH->RCH_PROCES
	ENDIF
	IF Empty(oAponta:cPeriodo)
			oAponta:cPeriodo	:= RCH->RCH_PER
	ENDIF
	IF Empty(oAponta:cRoteiro)
			oAponta:cRoteiro	:= RCH->RCH_ROTEIR
	ENDIF
	IF Empty(oAponta:cNumPagto)
			oAponta:cNumPagto	:= RCH->RCH_NUMPAG
	ENDIF

	IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA] == oAponta:dData } ) ) > 0 )
		IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ])
			oAponta:cFuncaoGrv	:= oAponta:aTabCalend[ nPos , CALEND_POS_CODFUNC ]
		ENDIF
		IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ])
			oAponta:cDepto	:= oAponta:aTabCalend[ nPos , CALEND_POS_DEPTO ]
		ENDIF
		IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ])
			oAponta:cPosto	:= oAponta:aTabCalend[ nPos , CALEND_POS_POSTO ]
		ENDIF
		IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO ])
			oAponta:cProcesso:= oAponta:aTabCalend[ nPos , CALEND_POS_PROCESSO]
		ENDIF
		IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ])
			oAponta:cPeriodo	:= oAponta:aTabCalend[ nPos , CALEND_POS_PERIODO ]
		ENDIF
		IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ])
			oAponta:cRoteiro	:= oAponta:aTabCalend[ nPos , CALEND_POS_ROTEIRO ]
		ENDIF
		IF !Empty(oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ])
			oAponta:cNumPagto	:= oAponta:aTabCalend[ nPos , CALEND_POS_NUM_PAGTO ]
		ENDIF
	EndIF
	//-- Reinicializa Variaveis
	aPerNot	:= {}
	nEx		:= 0
	nExNot	:= 0
	nExAdn	:= 0

	//-- Calcula Horas
	fCalHoras(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data 1
				aHorasNew[ nX		, 2 ]	,;	//02 -> Hora 1
				aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
				aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
				@nEx						,;	//05 -> <@>Horas Normais Apontadas
				@nExNot						,;	//06 -> <@>Horas Noturnas Apontadas
				.T.							,;	//07 -> Apontar Horas Noturnas
				oAponta:dData				,;	//08 -> Data Inicial Para a Hora Noturna
				@nExAdn						,;	//09 -> <@>Horas de Acrescimo Noturno
				oAponta:nIniHnot			,;	//10 -> Inicio do Horario Noturno
				oAponta:nFimHnot			,;	//11 -> Final do Horario Noturno
				oAponta:nMinHnot			,;	//12 -> Minutos do Horario Noturno
				lAcreNot					,;	//13 -> Apenas Acrescimo Noturno
				@aPerNot					 ;	//14 -> Periodo da Hora Noturna
			 )

	//-- Reinicializa Variaveis
	nExDiaAdn	:= 0
   	//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
	If ( oAponta:lAdHeDia )  .and. 	( oAponta:cTipoDia == "S" )

		fAdnDiurno(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data 1
					aHorasNew[ nX		, 2 ]	,;	//02 -> Hora 1
					aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
					aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
			  		@nExDiaAdn			,;	//05 -> <@>Horas Normais Apontadas
					0					,;	//06 -> <@>Horas Noturnas Apontadas
			  		.T.					,;	//07 -> Apontar Horas Noturnas
					oAponta:dData		,;	//08 -> Data Inicial Para a Hora Noturna
					0					,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
					oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
					lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
					aHorasNew			;   //14 -> aHoras modificado
		  		  )
	Endif

	//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
	nExAut		:= 0
	nExNotAut	:= 0
	nExAdnAut	:= 0
	nExDiaAutAdn:= 0
	IF ( oAponta:lFaixaHE )
		fHeAutoriz(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data 1
					aHorasNew[ nX		, 2 ]	,;	//02 -> Hora 1
					aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
					aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
					@nExAut						,;	//05 -> <@>Horas Normais Apontadas
					@nExNotAut					,;	//06 -> <@>Horas Noturnas Apontadas
					.T.							,;	//07 -> Apontar Horas Noturnas
					oAponta:dData				,;	//08 -> Data Inicial Para a Hora Noturna
					@nExAdnAut					,;  //09 -> <@>Horas de Acrescimo Noturno
					oAponta:nMinHnot			,;	//10 -> Minutos do Horario Noturno
					lAcreNot					,;	//11 -> Se Destaca Acrescimo das Horas Noturnas
			  		@nExDiaAutAdn				;	//12 -> <@>Horas Normais Apontadas
	  			 )
	EndIF

	//--Verifica de Deve Pagar Extra Not. a 52.50 e Calcula sem Adic. Noturno
	IF ( !( oAponta:lExtNot ) )
		IF ( nExAdn == 0 )
			nExAdn	:= nExNot
		EndIF
		nEx		:= 0
		nExNot	:= 0
		fCalHoras(	aHorasNew[ nX 		, 1 ]	,;	//01 -> Data 1
					aHorasNew[ nX 		, 2 ]	,;	//02 -> Hora 1
					aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
					aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
					@nEx						,;	//05 -> <@>Horas Normais Apontadas
					@nExNot						,;	//06 -> <@>Horas Noturnas Apontadas
					.T.							,;	//07 -> Apontar Horas Noturnas
					oAponta:dData				,;	//08 -> Data Inicial Para a Hora Noturna
					NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot			,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot			,;	//11 -> Final do Horario Noturno
					60							,;	//12 -> Minutos do Horario Noturno ( Aqui For┤ado como 60 )
					NIL							,;	//13 -> Apenas Acrescimo Noturno
					NIL			 				 ;	//14 -> Periodo da Hora Noturna
				  )

		//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
	    nExAut		:= 0
	    nExNotAut	:= 0
		IF ( oAponta:lFaixaHE )
		   fHeAutoriz(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data 1
						aHorasNew[ nX		, 2 ]	,;	//02 -> Hora 1
						aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
						aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
						@nExAut						,;	//05 -> <@>Horas Normais Apontadas
						@nExNotAut					,;	//06 -> <@>Horas Noturnas Apontadas
						.T.							,;	//07 -> Apontar Horas Noturnas
						oAponta:dData				,;	//08 -> Data Inicial Para a Hora Noturna
						NIL							,;  //09 -> <@>Horas de Acrescimo Noturno
						60							 ;	//10 -> Minutos do Horario Noturno ( Aqui For┤ado como 60 )
					 )
		EndIF

	Else
		IF ( nExAdn == 0 )
			nExAdn := nExNot
			//-- HE autorizadas conforme faixas
			nExAdnAut := nExNotAut
		EndIF
	EndIF

	//-- Hora Extra - Somar se For Maior que Toler┐ncia de Hora Extra
	IF SomaHoras( nEx , nExNot ) > nTolHExt
		oAponta:aApo[ oaApo:HeNormal	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNormal 	, nIndiceaApo ] , nEx		)
		oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ] , nExNot	)
		IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
			oAponta:aApo[ oaApo:HeNormalFx  , nIndiceaApo]	:= SomaHoras( oAponta:aApo[ oaApo:HeNormalFx , nIndiceaApo ] , nExAut	)
			oAponta:aApo[ oaApo:HeNoturnFx	, nIndiceaApo]	:= SomaHoras( oAponta:aApo[ oaApo:HeNoturnFx	, nIndiceaApo ] , nExNotAut	)
		EndIF
		//-- Verifica a Prioridade Para a Geracao das Horas Extras
		oAponta:aApo[ oaApo:PriorityHe , nIndiceaApo ]	:= PriorityOverTime( aHorasNew[nX,1] , aHorasNew[nX,2] , aPerNot )
	EndIF

	//-- Acrescenta o Adicional Noturno sobre horas extras diurnas realizadas em continuacao a jornada noturna
	nExAdn:= SomaHoras( nExAdn, nExDiaAdn )

	IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
		nExAdnAut:= SomaHoras( nExAdnAut, nExDiaAutAdn )
	Endif

	//-- Adicional Noturno Sobre Horas Extras
	IF ( ( oAponta:cPerAnot # "D" ) .or. ( oAponta:cPerAnot == "D" ) .and. ( nExAdn > oAponta:nTolNtHe ) )

		oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo]		:= SomaHoras(oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo],nExAdn)

		IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas

			oAponta:aApo[oaApo:AdicHeNotF,nIndiceaApo]	:= SomaHoras(oAponta:aApo[oaApo:AdicHeNotF,nIndiceaApo], nExAdnAut )

		EndIF
	EndIF

    /*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁRetorna Data Para a Gravacao das Horas Extras e  CarreЁ
	Ёga o Tipo de Hora Extra a Ser Considerado para o   DiaЁ
	ЁConforme Tabela de Horario Padrao.					   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	oAponta:dDataGravar := IF( lApHeDtM , IF( aHorasNew[ nXPlus1 , 1 ] <= oAponta:dUltDia , aHorasNew[ nXPlus1 , 1 ] , oAponta:dUltDia ) , oAponta:dData )
	cTpoExtra	:= fTpoExtra( oAponta:dDataGravar , aClone(oAponta:aTabCalend) )

	//-- Data Para a Gravacao das Horas Extras
	IF ( lJtHeDtM ) //Grava a Hora Extra na Data da 1a. Marcacao se Tipo for Equivalente
	    /*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCompara o Tipo de Horas Extras para Saber em que   diaЁ
		Ёdevera Gravar as Horas Extras.    					   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		IF ( cTpoExtra == fTpoExtra( oAponta:dData , aClone( oAponta:aTabCalend ) ) )
			oAponta:dDataGravar	:= oAponta:dData
		EndIF
	EndIF

	//-- Verifica se para funcionario em ferias as horas extras sao autorizadas
	IF ( (lAponFer :=  GetInfoPosTab(CALEND_POS_APON_FERIAS,"1E",oAponta:dDataGravar,oAponta:aTabCalend) ) )
		   lHeAutoriza:= ( GetInfoPosTab(CALEND_POS_HE_AUTO_FER,"1E",oAponta:dDataGravar,oAponta:aTabCalend) )
	Endif

	IF ( oAponta:cAdNot == "N" )
		oAponta:aApo[ oaApo:AdicNotNau , nIndiceaApo ] := SomaHoras(oAponta:aApo[oaApo:AdicNotNau,nIndiceaApo],oAponta:aApo[oaApo:AdicNotAut,nIndiceaApo])
		oAponta:aApo[ oaApo:AdicNotAut , nIndiceaApo ] := 0
	EndIF

	IF ( ( ( oAponta:cAdNotEx == "N" ) .or. !( lHeAutoriza ) ) .or. ( oAponta:lFaixaHE ) )
		//--Calcula e soma total de adic sob He not em adic sobre He not nao
		fSomaApoHE(	@oAponta:aApo[oaApo:AdicHeNotN,nIndiceaApo]	,; //Valor Acumulado com HE nao autorizadas
		           	@oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo]	,; //Valor Integral (Nao zera mas contera o valor autorizado)
		           	@oAponta:aApo[oaApo:AdicHeNotF,nIndiceaApo]	 ; //Valor Autorizado (sera zerado)
		           )

	EndIF

	// Adic.Not.Normal Autorizado
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dDataGravar							,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicNotAut,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 004 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				0           								,;	//09 -> Tolerancia
				"N"						 					,;	//10 -> Tipo de Arredondamento a Ser Utilizado
															,;
				oAponta:cFuncaoGrv							,;  //12 -> Funcao
				oAponta:cDepto								,;  //13 -> Depto para gravacao
				oAponta:cPosto			  		 			,;  //14 -> Posto para gravacao
				oAponta:cProcesso							,;  //15 -> Processo para Gravacao
				oAponta:cRoteiro							,;  //16 -> Roteiro para Gravacao
				oAponta:cPeriodo							,;  //17 -> Periodo para Gravacao
				oAponta:cNumPagto							 ;  //18 -> NumPagto para Gravacao
             )
	// Adic.Not.H.Extra Autorizado
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dDataGravar							,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 028 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				0           								,;	//09 -> Tolerancia
				"N"								 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
			 												,;
				oAponta:cFuncaoGrv							,;  //12 -> Funcao
				oAponta:cDepto								,;  //13 -> Depto para gravacao
				oAponta:cPosto			  		 			,;  //14 -> Posto para gravacao
				oAponta:cProcesso							,;  //15 -> Processo para Gravacao
				oAponta:cRoteiro							,;  //16 -> Roteiro para Gravacao
				oAponta:cPeriodo							,;  //17 -> Periodo para Gravacao
				oAponta:cNumPagto							 ;  //18 -> NumPagto para Gravacao
             )

	// Adic.Not.Normal Nao Autorizado
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dData								,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicNotNau,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 003 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				0           								,;	//09 -> Tolerancia
				"N"						 					,;	//10 -> Tipo de Arredondamento a Ser Utilizado
			 												,;
				oAponta:cFuncaoGrv							,;  //12 -> Funcao
				oAponta:cDepto								,;  //13 -> Depto para gravacao
				oAponta:cPosto			  		 			,;  //14 -> Posto para gravacao
				oAponta:cProcesso							,;  //15 -> Processo para Gravacao
				oAponta:cRoteiro							,;  //16 -> Roteiro para Gravacao
				oAponta:cPeriodo							,;  //17 -> Periodo para Gravacao
				oAponta:cNumPagto							 ;  //18 -> NumPagto para Gravacao
             )

	//-- Gera Adicional Noturno Nao Autorizado para Horas Extras
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dData								,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicHeNotN,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 027 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				0           								,;	//09 -> Tolerancia
				"N"						 			 		,;	//10 -> Tipo de Arredondamento a Ser Utilizado
			 												,;
				oAponta:cFuncaoGrv							,;  //12 -> Funcao
				oAponta:cDepto								,;  //13 -> Depto para gravacao
				oAponta:cPosto			  		 			,;  //14 -> Posto para gravacao
				oAponta:cProcesso							,;  //15 -> Processo para Gravacao
				oAponta:cRoteiro							,;  //16 -> Roteiro para Gravacao
				oAponta:cPeriodo							,;  //17 -> Periodo para Gravacao
				oAponta:cNumPagto							 ;  //18 -> NumPagto para Gravacao
             )
	IF ( oAponta:lFaixaHE )
		//-- Recalcula os valores de HE
        // Normal
		fSomaApoHE(	@oAponta:aApo[ oaApo:HeNorNAut	,	nIndiceaApo ]	,; // Valor acumulador
		           	@oAponta:aApo[ oaApo:HeNormal	,	nIndiceaApo ]	,; // Valor integral (que passara a ter o valor autorizado)
				   	@oAponta:aApo[ oaApo:HeNormalFx	,	nIndiceaApo ]	 ; // Valor autorizado (que sera zerado)
				   )
		// Noturna
		fSomaApoHE(	@oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	,; // Valor acumulador
		           	@oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	,; // Valor integral (que passara a ter o valor autorizado)
				   	@oAponta:aApo[oaApo:HeNoturnFx,nIndiceaApo]	 ; // Valor autorizado (que sera zerado)
				   )
	EndIF

	//Verifica se Hora Extra e" ou nao autorizada
	IF ( !( lHeAutoriza ).and. !( oAponta:lFaixaHE ) )
		oAponta:aApo[ oaApo:HeNorNAut	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNorNAut , nIndiceaApo ] , oAponta:aApo[ oaApo:HeNormal , nIndiceaApo ] )
		oAponta:aApo[ oaApo:HeNormal	, nIndiceaApo ]	:= 0
		oAponta:aApo[ oaApo:HeNotNaoAu	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNotNaoAu , nIndiceaApo ] ,oAponta:aApo[ oaApo:HeNotAutor , nIndiceaApo ] )
		oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ]	:= 0
	EndIF

	IF SubStr( cTpoExtra , 1 , 1 ) == SubStr( cTpoExtra , 3 , 1 )
		oAponta:aApo[oaApo:HeNormal,nIndiceaApo]  	:= SomaHoras(oAponta:aApo[oaApo:HeNormal,nIndiceaApo],oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo])
		oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	:= 0
		oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo] 	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo],oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo])
		oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	:= 0
	EndIF

	IF ( oAponta:aApo[oaApo:PriorityHe,nIndiceaApo] == Priority_Nocturnal_Overtime ) //Verifica Prioridade
		//-- Gera horas extras noturnas
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 1 , 1 )					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL         								,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.					 						,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt							 		,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
																,;
					oAponta:cFuncaoGrv							,;  //15 -> Funcao a ser Gravada
					oAponta:cDepto								,;  //16 -> Depto para gravacao
					oAponta:cPosto			  		 			,;  //17 -> Posto para gravacao
					oAponta:cProcesso							,;  //18 -> Processo para Gravacao
					oAponta:cRoteiro							,;  //19 -> Roteiro para Gravacao
					oAponta:cPeriodo							,;  //20 -> Periodo para Gravacao
					oAponta:cNumPagto							 ;  //21 -> NumPagto para Gravacao
	             )
		//-- Gera Horas Extras Normais
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 3 , 1)					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNormal,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt							 		,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
																,;
					oAponta:cFuncaoGrv					   		,;  //15 -> Funcao a ser Gravada
					oAponta:cDepto								,;  //16 -> Depto para gravacao
					oAponta:cPosto			  		 			,;  //17 -> Posto para gravacao
					oAponta:cProcesso							,;  //18 -> Processo para Gravacao
					oAponta:cRoteiro							,;  //19 -> Roteiro para Gravacao
					oAponta:cPeriodo							,;  //20 -> Periodo para Gravacao
					oAponta:cNumPagto							 ;  //21 -> NumPagto para Gravacao
	             )
	Else
		//-- Gera Horas Extras Normais
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 3 , 1)					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNormal,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult						   		,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt							 		,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
																,;
					oAponta:cFuncaoGrv					   		,;  //15 -> Funcao a ser Gravada
					oAponta:cDepto								,;  //16 -> Depto para gravacao
					oAponta:cPosto			  		 			,;  //17 -> Posto para gravacao
					oAponta:cProcesso							,;  //18 -> Processo para Gravacao
					oAponta:cRoteiro							,;  //19 -> Roteiro para Gravacao
					oAponta:cPeriodo							,;  //20 -> Periodo para Gravacao
					oAponta:cNumPagto							 ;  //21 -> NumPagto para Gravacao
	             )
		//-- Gera horas extras noturnas
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 1 , 1 )					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.					 						,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt							 		,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
																,;
					oAponta:cFuncaoGrv					   		,;  //15 -> Funcao a ser Gravada
					oAponta:cDepto								,;  //16 -> Depto para gravacao
					oAponta:cPosto			  		 			,;  //17 -> Posto para gravacao
					oAponta:cProcesso							,;  //18 -> Processo para Gravacao
					oAponta:cRoteiro							,;  //19 -> Roteiro para Gravacao
					oAponta:cPeriodo							,;  //20 -> Periodo para Gravacao
					oAponta:cNumPagto							 ;  //21 -> NumPagto para Gravacao
	             )
	EndIF

Next nX

//-- Zera a Matriz de Apontamento
oAponta:ZeraApo()


/*/
здддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁCalcula Adicionais Especiais					   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
//-- Se for domingo e se a regra determina o calculo da Prima Dominical
//-- ou se calcula o Descanso Laborado ou Festivo Laborado
//-- Transfere as horas efetivamente trabalhadas para o calculo dos adicionais.
IF oAponta:lPrimDom .OR. oAponta:lDescLab .OR. oAponta:lFestLab

	// Aponta e Grava Horas Extras e Adicionais
	nFornX := Len( aHorasAdic )
	For nX := 1 To nFornX Step 2

		nXPlus1 := ( nX + 1 )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCalcula Prima Dominical, Descanso Laborado,	   Ё
		ЁFestivo Laborado.								   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/

		fAdicionais(	aHorasAdic[nX		,	1] 		,;	//01 -> Data 1
		  				aHorasAdic[nX		,	2]		,;	//02 -> Hora 1
						aHorasAdic[nXPlus1	,	1]		,;	//03 -> Data 2
						aHorasAdic[nXPlus1	,	2]		,;	//04 -> Hora 2
						Nil								,;	//05 -> <@>Horas Normais Apontadas
						Nil								,;	//06 -> <@>Horas Noturnas Apontadas
						Nil								,;	//07 -> Apontar Horas Noturnas
						oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
						Nil								,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
						nIndiceaApo						,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
						oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
			  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
			  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
				   )


	Next nFonX
EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfAdnMovel   Ё Autor ЁMarinaldo de Jesus    Ё Data Ё24/10/2000Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCalcula Adicional Noturno para Horario Movel	             Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnHrNoturna  ( Horas Normais Noturnas )                       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁApontamento                                                  Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fAdnMovel()	//01 -> Array com as Marcacoes x Tabela

Local aHorasNew		:= {}
Local aOnlyMarkings	:= {}
Local aMarcIdeal	:= {}

Local nHorasSalv 	:= 0
Local nHrNoturna	:= 0
Local nHrAcresc		:= 0
Local nHorasCalc	:= 0

Local nHorasTrab	:= 0
Local nPosHrsTab	:= 0
Local nHrNotCalc	:= 0
Local nHrAcreCalc	:= 0
Local nX			:= 0
Local nXPlus1		:= 0
Local nFornX		:= 0

// Verifica o Total de Horas Que deveriam ser Trabahadas no Dia em Questao
IF ( ( nPosHrsTab := aScan( oAponta:aHoras, { |x| !Empty( x[ 04 ] ) } ) ) > 0 )
	nHorasTrab	:= oAponta:aHoras[ nPosHrsTab , 4 ]
Else
	Return( {0,0} )
EndIF

// Carrega Apenas as Marcacoes
nFornX := Len( oAponta:aHoras )
For nX := 1 To nFornX
	IF oAponta:aHoras[ nX , 3 ] == "M"
		aAdd( aOnlyMarkings , aClone( oAponta:aHoras[ nX ] ) )
	EndIF
Next nX

// Se as Marcacoes forem Impar, duplica a utima Marcacao
IF ( nX := Len( aOnlyMarkings ) ) % 2 != 0
	aAdd( aOnlyMarkings , aClone( aOnlyMarkings[ nX ] ) )
EndIF

// Monta aHorasNew apenas com as Horas que serao Consideradas para Adicional Noturno
nFornX := Len( aOnlyMarkings )
For nX := 1 To nFornX Step 2
	nXPlus1 := ( nX + 1 )
	IF ( nHorasCalc := __TimeSum(SomaHoras( nHorasCalc								,;
 	  	  						 fCalHoras(	aOnlyMarkings[ nX		, 1 ]	,;	//01 -> Data da 1a Marcacao
								 			aOnlyMarkings[ nX		, 2 ]	,;	//02 -> 1a Marcacao
											aOnlyMarkings[ nXPlus1	, 1 ]	,;	//03 -> Data da 2a Marcacao
											aOnlyMarkings[ nXPlus1	, 2 ]	,;	//04 -> Segunda Marcacao
											0								,;	//05 -> Horas Normais
											0								,;	//06 -> Horas Noturnas
											.T.								,;	//07 -> Considera Hora Noturna
											oAponta:dData					,;	//08 -> Data do Inicio do Adicional Noturno
											NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
											oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
											oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
											oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
											oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
											NIL		 						 ;	//14 -> Periodo da Hora Noturna
										   )								 ;
							     ),0)										 ;
	   ) <= nHorasTrab
   		aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )					//Adiciona 1a Marcacao
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )					//Adiciona Proxima Marcacao
		nHorasSalv := nHorasCalc
	ElseIF ( ( nHorasSalv > 0 ) .and. ( nHorasSalv < nHorasCalc ) )
		aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]				,;		//Data da Marcacao
								 aOnlyMarkings[ nX , 2 ]   				,;		//Marcacao
								 SubHoras( nHorasTrab, nHorasSalv )	,;		//Horas Faltantes
								 0										,;		//Horas de Intervalo
								 .T.									,;		//Considera Hora Noturna
								 oAponta:dData							,;		//Data do Inicio do Adicional Noturno
 								 oAponta:nIniHnot						,;		//Inicio do Horario Noturno
								 oAponta:nFimHnot						,;		//Final do Horario Noturno
								 oAponta:nMinHnot						 ;		//Minutos do Horario Noturno
							   )
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )					//Adiciona 1a Marcacao
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )					//Adiciona Proxima Marcacao
		aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]					//Altera Data da 2a Marcacao
		aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]					//Altera 2a Marcacao
		Exit
	Else
		aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]			,;		//Data da Marcacao
								 aOnlyMarkings[ nX , 2 ]			,;		//Marcacao
								 nHorasTrab                        	,;		//Horas Faltantes
								 0									,;		//Horas de Intervalo
								 .T.								,;		//Considera Hora Noturna
								 oAponta:dData						,;		//Data do Inicio do Adicional Noturno
								 oAponta:nIniHnot					,;		//Inicio do Horario Noturno
								 oAponta:nFimHnot					,;		//Final do Horario Noturno
								 oAponta:nMinHnot					 ;		//Minutos do Horario Noturno
							   )
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )				//Adiciona 1a Marcacao
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )				//Adiciona Proxima Marcacao
		aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]				//Altera Data da 2a Marcacao
		aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]				//Altera 2a Marcacao
		Exit
	EndIF

Next nX

// Calcula o Adicional Noturno
nFornX := Len( aHorasNew )
For nX := 1 To nFornX  Step 2
	nXPlus1 := ( nX + 1 )
	fCalHoras(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data da 1a Marcacao
	 			aHorasNew[ nX		, 2 ]	,;	//02 -> 1a Marcacao
				aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data da 2a Marcacao
				aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Segunda Marcacao
				0							,;	//05 -> Horas Normais
				@nHrNotCalc					,;	//06 -> Horas Noturnas
				.T.							,;	//07 -> Considera Hora Noturna
				oAponta:dData				,;	//08 -> Data do Inicio do Adicional Noturno
				@nHrAcreCalc				,;	//09 -> <@>Horas de Acrescimo Noturno
				oAponta:nIniHnot			,;	//10 -> Inicio do Horario Noturno
				oAponta:nFimHnot			,;	//11 -> Final do Horario Noturno
				oAponta:nMinHnot			,;	//12 -> Minutos do Horario Noturno
				oAponta:lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
				NIL		 					 ;	//14 -> Periodo da Hora Noturna
			   )

	nHrNoturna := SomaHoras( nHrNoturna , nHrNotCalc )	//Soma as Horas Noturnas
	nHrNotCalc := 0										//Reinicializa Variavel

	nHrAcresc  := SomaHoras( nHrAcresc , nHrAcreCalc )	//Soma as Horas de Acrescimo Noturno
    nHrAcreCalc:= 0

Next nX

Return( { nHrNoturna, nHrAcresc } )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfExtrasNtrabЁ Autor ЁMauricio MR           Ё Data Ё03/10/2003Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCalcula Horas Extras inclusive Intervalo, para dias nao trabaЁ
Ё          Ёlhados desde que se tenha horario de intervalo na tabela e   Ё
Ё          Ёpaga-se intervalo em dias nao trabalhados.					 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >								 	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL        								               	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fExtrasNtrab()

Local aHrTrab 	:= 	{} //Aqui aHrTrab tem a Mesma Estrutura de aHoras
Local aHrIntTab :=	{}

Local nLenHoras
Local nElem
Local nP
Local nPlus1
Local nPos
Local nPos1
Local nIndice

aEval(oAponta:aHoras,{ |y| IF( ( y[3] == "M" ) , aAdd( aHrTrab , aClone( y ) ) , NIL ) } )
nLenHoras 	:= Len( aHrTrab )
nElem 		:= IF( nLenHoras %2 >= 1 , ( nLenHoras - 1 ) , nLenHoras )

For nP := 1 To nElem Step 2
	//-- Indice para a matriz de apontamento aApo.
	nIndice := Min( nP , oAponta:nTotMarcTab )

	nP += fExtras(	aHrTrab[nP,1]					,;	//01 -> Data da 1a Marcacao
		  			aHrTrab[nP,2]					,;	//02 -> Hora da 1a Marcacao
					aHrTrab[nP+1,1]					,;	//03 -> Data da 2a Marcacao
					aHrTrab[nP+1,2]					,;  //04 -> Hora da 2a Marcacao
					oAponta:aSiglaMarc[ nIndice ]	,;	//05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
					nIndice							,;	//06 -> Indice de aApo
					.T.								,;	//07 -> Horas Extras do Primeiro Dia
					.F.								,;	//08 -> Apuracao Corresponde a Intervalo
					NIL								,;	//09 -> Forca o Tipo do Dia como Trabalhado
					.T.								;	//10 -> Calcula Adicionais Especiais (Prima Dominical, etc)
				)

	nPlus1:=Min(nP+1,oAponta:nSiglaMarc)

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁQuando Pagar Horas Extras No Intervalo em Dias Nao TraЁ
	Ёbalhados e funcionario Tiver Efetuado a marcacao de InЁ
	ЁTervalo                                               Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF (;
			( SubStr( oAponta:aSiglaMarc[ nPlus1 ] , -1 ) == "S" );
			.and.;
			oAponta:lIntNtrab;
			.and.;
			( nPlus1 < nElem );
		)

		IF ( ( "I" + SubStr( oAponta:aSiglaMarc[nPlus1] , 01 , 01 ) ) $ oAponta:cPagInt )

  		  	//-- Procuro pela Saida nas Horas de Intervalo Realizadas
			nPos	:= aScan( aHrTrab , { |x| x[08] == aHrTrab[nPlus1,8] } )
			nPos1	:= nPos+1

			//-- Obtem a Posicao da Marcacao na Tabela correspondente a Saida de Intervalo
			//-- Analisada
			nPosInt	:= aScan(oAponta:aHoras,{|x| x[3] == aHrTrab[nPos,8] .and. x[10] == "SI" } )

			//-- Nao calcula Extras para a Mesma Data+hora
			IF (;
					( nPos > 0 );
					.and.;
					( nPosInt > 0 );
					.and.;
					( nPos <> nPos1 );
				)

				 //-- Obtem a Hora de Retorno do Intervalo conforme a Saida do Funcionario +  as
				 //-- as Horas de Intervalo
			 	 aHrIntTab	:= RetFimTab( aHrTrab[nPos,1] , aHrTrab[nPos,2] , oAponta:aHoras[nPosInt,09] )

				 //-- Se a Hora de Retorno de Intervalo baseada na Tabela for maior que
				 //-- a Hora de Retorno Efetivamente Realizada, entao assume retorno realizado
				 //-- caso contrario assume da tabela
				 IF (;
				 		DataHora2Str( aHrIntTab[ 1 ] , aHrIntTab[ 2 ] );
				 		>;
				 		DataHora2Str( aHrTrab[ nPos1 , 1 ] , aHrTrab[ nPos1 , 2 ] );
				 	)

				    aHrIntTab[1] := aHrTrab[ nPos1 , 1 ]

   				    aHrIntTab[2] := aHrTrab[ nPos1 , 2 ]

				 EndIF

				 fExtras(	aHrTrab[nPos,1]					,;	//01 -> Data da 1a Marcacao
				  			aHrTrab[nPos,2]					,;	//02 -> Hora da 1a Marcacao
							aHrIntTab[1]					,;	//03 -> Data da Entrada da Marcacao Prevista conforme Horas de Intervalo
							aHrIntTab[2]					,;  //04 -> Hora da Entrada da Marcacao Prevista conforme Horas de Intervalo
							oAponta:aSiglaMarc[ nPlus1 ]	,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
							nPlus1							,;	//06 -> Indice de aApo
							.T.								,;	//07 -> Horas Extras do Primeiro Dia
				   			.T.								,;	//08 -> Apuracao Corresponde a Intervalo
				   			NIL								,;  //09 -> Forca o Tipo do Dia como Trabalhado
				   			.F.								;   //10 -> Calcula Adicionais Especiais (Prima Dominical, etc...)
				)

			EndIF

		EndIF

	EndIF

Next nP

aHrTrab := {}

Return NIL

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfHeAutoriz  Ё Autor ЁMauricio MR           Ё Data Ё03/10/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetorna a Qtde de HE autorizadas conforme Horarios definidos Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnHorTot (Total de Horas Autorizadas                    	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fHeAutoriz(	dDataHI		,;	//01 -> Data da Hora Inicial
							nHI			,;	//02 -> Hora Inicial
					  		dDataHF		,;	//03 -> Data da Hora Final
					  		nHF			,;	//04 -> Hora Final
					  		nHoras		,;	//05 -> <@>Horas Extras Diurnas Autorizadas
					  		nHorasNot	,;	//06 -> <@>Horas Extras Noturnas Autorizadas
					  		lNoturno	,;	//07 -> Apontar Horas Noturnas
					  		dData		,;	//08 -> Data do Apontamento
					  		nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno
					  		nMinHNot	,;	//10 -> Minutos para a Hora Noturna
					  		lAcreNot	,;  //11 -> Se destaca o Acrescimo noturno das Horas Noturnas
					  		nExDiaAdn	;   //12 -> Calculo do Adicional Noturno para Horas diurnas extras em continuidade da jornada noturna
				  		  )

Local cLimIni	:= 0
Local cLimFim	:= 0
Local cHorIni	:= 0
Local cHorFim	:= 0
//-- Variaveis para calculo
Local nHorTot	:= 0
//-- Variaveis de retorno por referencia
Local nEx       := 0
Local nExNot    := 0
Local nExAdn	:= 0
//-- Controle de Loop
Local nFaixas	:= 0
Local nX		:= 0

DEFAULT dDataHI		:= Ctod("//")
DEFAULT nHI			:= 0
DEFAULT dDataHF		:= Ctod("//")
DEFAULT nHF			:= 0
DEFAULT lAcreNot	:= oAponta:lAcreNot

IF !( dDataHI == dDataHF .and. nHI == nHF )

	DEFAULT nHoras		:= 0
	DEFAULT nHorasNot	:= 0
	DEFAULT lNoturno	:= .T.
	DEFAULT dData		:= dDataHI
	DEFAULT nHrAcNot	:= 0
	DEFAULT nMinHNot	:= oAponta:nMinHnot

	//-- Converte Datas e Horas das Marcacoes para String
	cHorIni := DataHora2Str( dDataHI , nHI )
	cHorFim := DataHora2Str( dDataHF , nHF )

	nFaixas := Len( oAponta:aFaixasHE )
	//-- Corre todas as Faixas de HE autorizadas
	For nX := 1 To nFaixas
	    //-- Zera Variaveis auxiliares de HE diurnas/noturnas e adicional noturno
		nEx       	:= 0
		nExNot    	:= 0
		nExAdn		:= 0
		//-- Converte Limites da Faixa para String
		cLimIni := DataHora2Str( oAponta:aFaixasHE[ nX , DATA_INICIAL	] , oAponta:aFaixasHE[ nX , HORA_INICIAL	] )
		cLimFim := DataHora2Str( oAponta:aFaixasHE[ nX , DATA_FINAL		] , oAponta:aFaixasHE[ nX , HORA_FINAL		] )

		// 1)   Desconsidera Horarios que:
		//	 a) Terminam antes da faixa de HE autorizadas
		//   b) Iniciam depois da faixa de HE autorizadas
		IF !( (cHorFim <= cLimIni) .or. (cHorIni >= cLimFim) )

				// 2) Se o Hora Inicial da Marcacao ocorrer no inicio ou apos o inicio da faixa de horarios
				// Calcula a qtde de horas entre a Hora inicial da Marcacao e a hora final da marcacao ou
				// o fim da faixa de horarios
				IF ( cHorIni >= cLimIni )
				    // 2.1) Se a Hora Final da Marcacao ocorre  antes do fim ou no fim da faixa de horarios
				    IF ( cHorFim <= cLimFim )
				    	// Calcula a Qtde de Horas entre a Hora inicial e Final da Marcacao
				        fCalHoras(	dDataHI								,;	//01 -> Data 1
									nHI									,;	//02 -> Hora 1
									dDataHF								,;	//03 -> Data 2
									nHF									,;	//04 -> Hora 2
									@nEx								,;	//05 -> <@>Horas Normais Apontadas
									@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
									lNoturno							,;	//07 -> Apontar Horas Noturnas
									dData								,;	//08 -> Data Inicial Para a Hora Noturna
									@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
									oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
									nMinHNot							,;	//12 -> Minutos do Horario Noturno
									lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
								 )

						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno(	dDataHI				,;	//01 -> Data 1
										nHI					,;	//02 -> Hora 1
										dDataHF				,;	//03 -> Data 2
										nHF	   				,;	//04 -> Hora 2
								  		@nExDiaAdn			,;	//05 -> <@>Horas Normais Apontadas
										0					,;	//06 -> <@>Horas Noturnas Apontadas
								  		.T.					,;	//07 -> Apontar Horas Noturnas
										oAponta:dData		,;	//08 -> Data Inicial Para a Hora Noturna
										0					,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
										lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
							  		  )
						Endif

					Else
					// 2.2) Se a Hora Final da Marcacao ocorre apos o fim da faixa de horarios
						// Calcula a Qtde de Horas entre aHora Inicial da Marcacao e o fim da Faixa
					    fCalHoras(	dDataHI								,; 	//01 -> Data 1
					     			nHI									,;	//02 -> Hora 1
					     			oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
					       			oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
					              	@nEx								,;	//05 -> <@>Horas Normais Apontadas
					              	@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
					              	lNoturno							,;	//07 -> Apontar Horas Noturnas
					              	dData								,;	//08 -> Data Inicial Para a Hora Noturna
					              	@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
					              	oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
									oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
									nMinHNot							,;	//12 -> Minutos do Horario Noturno
									lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
					             )
						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno(	dDataHI								,;	//01 -> Data 1
										nHI									,;	//02 -> Hora 1
										oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
										oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
									  	@nExDiaAdn							,;	//05 -> <@>Horas Normais Apontadas
										0									,;	//06 -> <@>Horas Noturnas Apontadas
									  	.T.									,;	//07 -> Apontar Horas Noturnas
										oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
										0									,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
										lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
								  	  )
						Endif
					EndIF
				// 3) Se a Hora Inicial da Marcacao ocorre antes do Inicio da faixa de horarios
				// Calcula a Qtde de horas entre o inicio da Faixa e a hora final da marcacao ou
				// o fim da faixa de horarios
				ElseIF ( cHorIni < cLimIni )
				    // 3.1) Se a Hora Final da Marcacao ocorre  antes do fim da faixa de horarios
				    IF ( cHorFim <= cLimFim )
				       // Calcula a Qtde de Horas entre o inicio da Faixa e a Hora Final da Marcacao
				       fCalHoras(oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
				       			 oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
				                 dDataHF			 				,;	//03 -> Data 2
				                 nHF				 				,;	//04 -> Hora 2
				                 @nEx								,;	//05 -> <@>Horas Normais Apontadas
					             @nExNot							,;	//06 -> <@>Horas Noturnas Apontadas
					             lNoturno							,;	//07 -> Apontar Horas Noturnas
					             dData								,;	//08 -> Data Inicial Para a Hora Noturna
					             @nExAdn							,;	//09 -> <@>Horas de Acrescimo Noturno
			                 	 oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
								 oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
								 nMinHNot							,;	//12 -> Minutos do Horario Noturno
								 lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
				                 )
						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno( oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
						       			oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
						                dDataHF			 					,;	//03 -> Data 2
						                nHF				 					,;	//04 -> Hora 2
									  	@nExDiaAdn							,;	//05 -> <@>Horas Normais Apontadas
										0									,;	//06 -> <@>Horas Noturnas Apontadas
									  	.T.									,;	//07 -> Apontar Horas Noturnas
										oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
										0									,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
										lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
								  	  )
						Endif
					Else
						// 3.2) Se a Hora Final da Marcacao ocorre no fim ou apos o fim da faixa de horarios
						//  Calcula a Qtde de Horas entre o inicio da Faixa e o Fim da Faixa
					    fCalHoras(	oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
					      			oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
					              	oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
					              	oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
									@nEx								,;	//05 -> <@>Horas Normais Apontadas
					             	@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
					             	lNoturno							,;	//07 -> Apontar Horas Noturnas
					             	dData								,;	//08 -> Data Inicial Para a Hora Noturna
					             	@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
					             	oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
								 	oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
								 	nMinHNot							,;	//12 -> Minutos do Horario Noturno
								 	lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
					              	)
						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno(	oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
					      				oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
					              		oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
					              		oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
									  	@nExDiaAdn							,;	//05 -> <@>Horas Normais Apontadas
										0									,;	//06 -> <@>Horas Noturnas Apontadas
									  	.T.									,;	//07 -> Apontar Horas Noturnas
										oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
										0									,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
										lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
								  	  )
						Endif
					EndIF
				EndIF
		EndIF
		//-- Acumula as Horas Extras diurnas/noturnas e adicional
        nHoras		:= SomaHoras( nHoras	,	nEx		)
        nHorasNot	:= SomaHoras( nHorasNot	,	nExNot	)
        nHrAcNot	:= SomaHoras( nHrAcNot	,   nExAdn 	)
	Next nX
	nHorTot	:= SomaHoras( nHorTot , SomaHoras( SomaHoras( nHoras , nHorasNot ) , nHrAcNot  ) )
EndIF

Return( nHorTot )

/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfSomaApoHE  Ё Autor ЁMauricio MR           Ё Data Ё03/10/2002Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁfSoma Valores de Eventos de HE e zera o valor a somar        Ё
Ё          ЁRecebe os valores supostamente autorizados (nValorIntegral)  Ё
Ё          ЁSubtrai os valores autorizados pelas faixas de autorizacao deЁ
Ё          ЁHE (nValorAut). O resultado atualiza os valores nao autoriza Ё
Ё          Ёdos (nEveAcum). Os valores autorizados pela faixa de HE sao  Ё
Ё          Ёtransferidos para os valores autorizados correspondentes.    Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnEveAcum/nValor (Por referencia)                	     	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fSomaApoHE(	nEveAcum			,;
							nValorIntegral		,;
							nValorAut			,;
							lSomaNaoAutorizados	 ;
						   )

Local nValor	:= 0

DEFAULT nValorAut     		:= 0
DEFAULT lSomaNaoAutorizados	:= .T.

//-- Se utiliza faixa de horas extras para identificar HE autorizadas
IF ( oAponta:lFaixaHE )
    //-- Calcula valor nao autorizado (padrao) ou considera o valor autorizado de HE informado
    nValor			:= IF( lSomaNaoAutorizados , SubHoras( nValorIntegral , nValorAut	) , nValorAut )
    nEveAcum		:= SomaHoras( nEveAcum , nValor )
    nValorIntegral	:= IF( lSomaNaoAutorizados , nValorAut , nValorIntegral )
    nValorAut		:= 0
Else
	nEveAcum		:= SomaHoras( nEveAcum , nValorIntegral )
	nValorIntegral	:= 0
EndIF

Return( NIL )

/*/
зддддддддддбдддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁAppendaResAboЁAutor ЁMauricio MR          Ё Data Ё04/05/2004Ё
цддддддддддедддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAdiciona Abonos em aResult	 							    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >								  	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >								  	Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function AppendaResAbo( aResult , aResAbo )

Local bAsc

Local nRes

Local nLoop
Local nLoops

bAsc   := { |x|;
					x[ ARESABO_DATA ]		== aResult[ nLoop	, ARESULT_DATA		];
					.and.;
					x[ ARESABO_CODIGO ]		== aResult[ nLoop	, ARESULT_EVENTO	];
					.and.;
					x[ ARESABO_CUSTO ]		== aResult[ nLoop	, ARESULT_CC		];
					.and.;
					x[ ARESABO_TPMARCA ]	== aResult[ nLoop	, ARESULT_TPMARCA	];
					.and.;
					x[ ARESABO_FUNCAO ]		== aResult[ nLoop	, ARESULT_FUNCAO	];
				 	.and.;
					x[ ARESABO_DEPTO	] 	== aResult[ nLoop	,  ARESULT_DEPTO	] ;
					.and.;
					x[ ARESABO_POSTO	] 	== aResult[ nLoop	, ARESULT_POSTO 	];
					.and.;
					x[ ARESABO_PROCESSO	] 	== aResult[ nLoop	, ARESULT_PROCESSO	];
					.and.;
					x[ ARESABO_PERIODO	] 	== aResult[ nLoop	, ARESULT_PERIODO	];
					.and.;
					x[ ARESABO_ROTEIRO	] 	== aResult[ nLoop	, ARESULT_ROTEIRO	];
					.and.;
					x[ ARESABO_NUM_PAGTO ] 	== aResult[ nLoop	, ARESULT_NUM_PAGTO	];
		  }


nLoops := Len( aResult )
For nLoop := 1 To nLoops
	IF ( ( nRes := aScan( aResAbo , bAsc ) ) > 0 )
		aResult[ nLoop , ARESULT_RESULT_APO  ]	:= aClone( aResAbo[ nRes , ARESABO_ABONOS ] )
		aResult[ nLoop , ARESULT_NUM_ABO_HRS ]	:= aResAbo[ nRes , ARESABO_HORAS_TOTAIS ]
   	EndIF
Next nLoop

Return( NIL )


/*/
зддддддддддбдддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁfAcreNot     ЁAutor ЁMauricio MR          Ё Data Ё23/03/2005Ё
цддддддддддедддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁApura Acrescimo Noturno para os Intervalos Pagos		    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё< Vide Parametros Formais >								  	Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >								  	Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fAcreNot()
Local aPerNot		:= {}
Local aPerDia		:= {}

Local nO
Local nOPlus1
Local nHr1
Local nHr2
Local nHr3
Local nIndice

/*/
здддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Inicio do Calculo das Horas Trabalhadas        Ё
юдддддддддддддддддддддддддддддддддддддддддддддддды
/*/

For nO := 2 To oAponta:nElem Step 2
        If ((nOPlus1 := ( nO + 1 ))) >= oAponta:nElem
         	Exit
        Endif

		nHr1 := nHr2 := nHr3 := 0
		oAponta:CalcPerHr(  oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							@nHr1							,;	//05 -> <@>Horas Normais Apontadas
							@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
							NIL								,;	//07 -> Apontar Horas Noturnas
							oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
							@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot						,;	//14 -> Periodo Horario Noturno
							@aPerDia						;	//15 -> Periodo Horario Diurno
						   )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁPara as Horas Trabalhadas Deve-se Sempre  ProcurarЁ
		Ёpela Entrada									   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		nIndice := aScan( oAponta:aSiglaMarc ,;
							IF(;
									( "S" $ oAponta:aHrTrab[ nO , 3 ] ) ,;
									( SubStr( oAponta:aHrTrab[ nO , 3 ] , 1 , 1 ) + "E" ),;
									oAponta:aHrTrab[ nO , 3 ];
							   );
						 )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁSe Nao Encontrou Flag Correspondente, assume     aЁ
		ЁEntrada      								       Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
		nIndice := Max( nIndice , 1 )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁApura Acrescimo Noturno para Intervalos Pagos	   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддды
		/*/
	     IF ( nHr3 > 0 )   .AND. ( Substr(oAponta:aHrTrab[ nO , 3 ],1,1) $ oAponta:cPagNotInt )
			//-- Se Existe o Identificador de Acrescimo Noturno
			//-- Se Destaca o Acrescimo Noturno
			//-- Entao o Adicional Noturno contera o valor integral
			//-- e destacamos o acrescimo no identificador correspondente
			If oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
			   oAponta:aApo[ oaApo:AcreAuto 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AcreAuto  	, nIndice ] , nHr3 )
			   aEval( oAponta:aApo[oaApo:HrIntNotEf], { |x,y| oAponta:aApo[oaApo:AdicNotAut,y] := SomaHoras(oAponta:aApo[oaApo:AdicNotAut,y] , x ) } )
			   oAponta:aApo[ oaApo:AdicNotAut  , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut	, nIndice ] , nHr3 )
			Else
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ] , nHr3 )
			EndIF

		 Endif

	Next nO
Return (Nil)



/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfAdnDiurno  Ё Autor ЁMauricio MR           Ё Data Ё30/05/2006Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCalcula as Horas para Adicional s/ H.Extras Diurnas  		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁnHorTot (Total de Horas para o Adicional Diurno 	   	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fAdnDiurno(	dDataHI		,;	//01 -> Data da Hora Inicial
							nHI			,;	//02 -> Hora Inicial
					  		dDataHF		,;	//03 -> Data da Hora Final
					  		nHF			,;	//04 -> Hora Final
					  		nHoras		,;	//05 -> <@>Horas Extras Diurnas Autorizadas
					  		nHorasNot	,;	//06 -> <@>Horas Extras Noturnas Autorizadas
					  		lNoturno	,;	//07 -> Apontar Horas Noturnas
					  		dData		,;	//08 -> Data do Apontamento
					  		nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno
				  			nIniHnot	,;	//10 -> Inicio do Horario Noturno
							nFimHnot	,;	//11 -> Final do Horario Noturno
							nMinHnot	,;	//12 -> Minutos do Horario Notur
					  		lAcreNot	,;  //13 -> Se destaca o Acrescimo noturno das Horas Noturnas
					  		aHorasTemp	;   //14 -> aHoras a ser utilizado
				  		  )
Local aHoras	:= {}
Local aNoturno	:= {}
Local aPerNot	:= {}

//-- Variaveis para calculo
Local nHorTot	:= 0
Local nPos		:= 0
Local dDataEJ
Local nHoraEJ
Local dDataSJ
Local nHoraSJ
Local dDtAuxHI
Local nHAuxI

Local cEJ		:= ""
Local cSJ		:= ""
Local cHI		:= ""
Local cHF    	:= ""

//-- Variaveis de retorno por referencia
Local nEx       := 0
Local nExNot    := 0
Local nExAdn	:= 0

DEFAULT dDataHI		:= Ctod("//")
DEFAULT nHI			:= 0
DEFAULT dDataHF		:= Ctod("//")
DEFAULT nHF			:= 0
DEFAULT lAcreNot	:= oAponta:lAcreNot

aHorasTemp	:=If(aHorasTemp == Nil, oAponta:aHoras, aHorasTemp)

Begin Sequence

	IF ( dDataHI == dDataHF .and. nHI == nHF )
	   Break
	Endif

	DEFAULT nHoras		:= 0
	DEFAULT nHorasNot	:= 0
	DEFAULT lNoturno	:= .T.
	DEFAULT dData		:= dDataHI
	DEFAULT nHrAcNot	:= 0
	DEFAULT	nIniHnot	:= oAponta:nIniHnot
	DEFAULT	nFimHnot	:= oAponta:nFimHnot
	DEFAULT nMinHNot	:= oAponta:nMinHnot

    nPos		:= Ascan(oAponta:aHoras 	,{ |x| x[10] == "EJ" } )
    cEJ			:= DataHora2Str( oAponta:aHoras[nPos,1], oAponta:aHoras[nPos,2] )
    nPos		:= Ascan(oAponta:aHoras 	,{ |x| x[10] == "SJ" } )
    cSJ			:= DataHora2Str( oAponta:aHoras[nPos,1], oAponta:aHoras[nPos,2] )
    cHI			:= DataHora2Str( dDataHI, nHI )
    cHF    		:= DataHora2Str( dDataHF, nHF )

	//-- Obtem a data e hora da entrada/saida de jornada

	//-- Marcacoes antes da SJ
    If  ( cHI <=cSJ .and. cHF <= cSJ )
        Break
    Endif

	nPos 		:= aScan( oAponta:aHoras ,{ |x|  x[10] == "EJ"  } )
	dDataEJ		:= oAponta:aHoras[ nPos , 1 ]
	nHoraEJ		:= oAponta:aHoras[ nPos , 2 ]
	nPos 		:= aScan( oAponta:aHoras ,{ |x|  x[10] == "SJ" } )
 	dDataSJ		:= oAponta:aHoras[ nPos , 1 ]
	nHoraSJ		:= oAponta:aHoras[ nPos , 2 ]

	//-- Verifica se a jornada ocorre durante o horario noturno
	aNoturno 		:= DataHora2Not( dDataEJ , nHoraEJ  , dDataSJ, nHoraSJ, dDataEJ , nIniHnot , nFimHnot , nMinHnot , @aPerNot )
	lTemHorNoturno	:= !Empty( Somahoras( aNoturno[1], aNoturno[2] ) )

	IF lTemHorNoturno

		If DataHora2Str( dDataSJ , nHoraSJ ) >= DataHora2Str( dDataSJ , nFimHnot )
		   dDtAuxHI	:= 	dDataSJ
		   nHAuxI	:=	nHoraSJ
		Else
		   dDtAuxHI	:= 	dDataSJ
		   nHAuxI	:=	nFimHnot
		Endif

		If DataHora2Str( dDtAuxHI , nHAuxI ) >= DataHora2Str( dDataHI , nHI )
		   dDataHI	:= 	dDtAuxHI
		   nHI		:=	nHAuxI
		Endif

		// Calcula a Qtde de Horas entre Fim do Horario Padrao e a ultima Marcacao
        fCalHoras(	dDataHI								,;	//01 -> Data 1
					nHI									,;	//02 -> Hora 1
					dDataHF								,;	//03 -> Data 2
					nHF									,;	//04 -> Hora 2
					@nEx								,;	//05 -> <@>Horas Normais Apontadas
					@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
					lNoturno							,;	//07 -> Apontar Horas Noturnas
					dData								,;	//08 -> Data Inicial Para a Hora Noturna
					@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
					nIniHNot							,;	//10 -> Inicio do Horario Noturno
					nFimHNot							,;	//11 -> Final do Horario Noturno
					nMinHNot							,;	//12 -> Minutos do Horario Noturno
					lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
				 )
	EndIF

	//-- Acumula as Horas Extras diurnas/noturnas e adicional
    nHoras		:= SomaHoras( nHoras	,	nEx		)
    nHorasNot	:= SomaHoras( nHorasNot	,	nExNot	)
    nHrAcNot	:= SomaHoras( nHrAcNot	,   nExAdn 	)

	nHorTot		:= SomaHoras( nHorTot , SomaHoras( SomaHoras( nHoras , nHorasNot ) , nHrAcNot  ) )

End Sequence

Return( nHorTot )



/*/
зддддддддддбддддддддддддбдддддддбддддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfAdicionais Ё Autor ЁMauricio MR       	     Ё Data Ё13/12/2006Ё
цддддддддддеддддддддддддадддддддаддддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁCalcula Adicionais para Dias Especiais (DSR, Feriado e Domingo Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 						 			   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>                                  	   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                	   	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁPonxApo														   Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
Static Function fAdicionais(	dDt1				,;	//01 -> Data 1
								nHr1				,;	//02 -> Hora 1
								dDt2				,;	//03 -> Data 2
								nHr2				,;	//04 -> Hora 2
								nHoras				,;	//05 -> <@>Horas Extras Diurnas Autorizadas
					  			nHorasNot			,;	//06 -> <@>Horas Extras Noturnas Autorizadas
					  			lNoturno			,;	//07 -> Apontar Horas Noturnas
					  			dData				,;	//08 -> Data do Apontamento
					  			nHrAcNot			,;	//09 -> <@>Horas de Acrescimo Noturno
				  				nIniHnot			,;	//10 -> Inicio do Horario Noturno
								nFimHnot			,;	//11 -> Final do Horario Noturno
								nMinHnot			,;	//12 -> Minutos do Horario Notur
					  			lAcreNot			,;  //13 -> Se destaca o Acrescimo noturno das Horas Noturnas
					  			nIndice				,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
					  			lPrima				,;  //15 -> Determina o calculo da Prima Dominical
					  			lDescLab			,;  //16 -> Determina o calculo da Descanso Laborado
					  			lFestLab			;   //17 -> Determina o calculo da Festivo Laborado
						   )


DEFAULT nHoras		:= 0
DEFAULT nHorasNot	:= 0
DEFAULT lNoturno	:= .T.
DEFAULT dData		:= oAponta:dData
DEFAULT nHrAcNot	:= 0
DEFAULT	nIniHnot	:= oAponta:nIniHnot
DEFAULT	nFimHnot	:= oAponta:nFimHnot
DEFAULT nMinHNot	:= oAponta:nMinHnot

DEFAULT lPrima		:= ( oAponta:lPrimDom )
DEFAULT lDescLab	:= ( oAponta:lDescLab )
DEFAULT lFestLab	:= ( oAponta:lFestLab )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁCalcula Prima Dominical, Descanso Laborado,	   Ё
ЁFestivo Laborado.								   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
//-- Transfere as horas efetivamente trabalhadas para o calculo da Prima Dominical, Descanso Laborado e
//-- Festivo Laborado.
IF 	lPrima  .OR. lDescLab .OR. lFestLab

	nHoras 	:= fCalHoras(	dDt1							,;	//01 -> 1a. Data
							nHr1							,;	//02 -> 1o. Horario
							dDt2							,;	//03 -> 2a. Data
							nHr2							,;	//04 -> 2o. Hora
							Nil								,;	//05 -> <@>Horas Normais Apontadas
							Nil								,;	//06 -> <@>Horas Noturnas Apontadas
							Nil								,;	//07 -> Apontar Horas Noturnas
							dData							,;	//08 -> Data Inicial Para a Hora Noturna
							Nil								,;	//09 -> <@>Horas de Acrescimo Noturno
							nIniHnot						,;	//10 -> Inicio do Horario Noturno
							nFimHnot						,;	//11 -> Final do Horario Noturno
							nMinHnot						,;	//12 -> Minutos do Horario Noturno
							lAcreNot						;	//13 -> Apenas Acrescimo Noturno
						)

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCalcula Prima Dominical						   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	//-- Se for domingo e se a regra determina o calculo da Prima Dominical
	IF 	lPrima
		oAponta:aApo[ oaApo:PrimDom , nIndice ]	:= SomaHoras(oAponta:aApo[ oaApo:PrimDom , nIndice ], nHoras )
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCalcula Descanso Laborado						   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF lDescLab
		oAponta:aApo[ oaApo:DescLab , nIndice ]	:= SomaHoras(oAponta:aApo[ oaApo:DescLab , nIndice ], nHoras )
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁCalcula Festivo Laborado						   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддды
	/*/
	IF 	lFestLab
		oAponta:aApo[ oaApo:FestLab , nIndice ]	:= SomaHoras(oAponta:aApo[ oaApo:FestLab , nIndice ], nHoras )
	EndIF

EndIF

Return (Nil)

/*
эээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
╠╠иммммммммммяммммммммммкмммммммяммммммммммммммммммммкммммммяммммммммммммм╩╠╠
╠╠╨Programa  ЁfPonHE100 ╨Autor  Ё A.Shibao           ╨ Data Ё  07/11/13   ╨╠╠
╠╠лммммммммммьммммммммммймммммммоммммммммммммммммммммйммммммоммммммммммммм╧╠╠
╠╠╨Desc.     ЁFuncao para gerar Hr Extra 100% apos as 13:00 do Sabado     ╨╠╠
╠╠╨          Ё                                                            ╨╠╠
╠╠лммммммммммьмммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╧╠╠
╠╠╨Uso       Ё AP                                                         ╨╠╠
╠╠хммммммммммомммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╪╠╠
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ
*/
Static Function fPonHE100( __aMarcacoes, __aTabCalend, __aCodigos, __aEvesIds )


Local aArea			:= GetArea()
Local cAliasQry		:= GetNextAlias()
Local cCusto 	  	:= SRA->RA_CC
Local cPeriodo	  	:= ""
Local cNumPagto	  	:= ""
Local cTurno 		:= SRA->RA_TNOTRAB
Local n100			:= 0.00
Local n50			:= 0.00
Local nAux1			:= 1	//Controle de horario
Local nAux2			:= 0.00
Local dDatAux		:= cToD("  /  /  ")
Local nCont1		:= 0
Local nHIni	 		:= 0.00
Local nHIni1		:= 0.00
Local nHFim			:= 0.00
Local nHFim1		:= 0.00
Local nHorNot		:= 0.00
Local nHEnt			:= 0.00 //Horario de Entrada no sАbado
Local nHSai		    := 0.00 //HorАrio de saМda no sАbado
Local nQtdHN		:= 0
Local nQtdHNSab	 	:= 0
Local nQtdHNotSab 	:= 0
Local nQtdHNor		:= 0
Local nQtdHNot		:= 0
Local nPos			:= 0
Local nY	 		:= 0
Local x		 		:= 0
Local y		 		:= 0

Local cEvenFInt		:= SuperGetMv("MV_POHEFIN",,"") 	// Falta Integral    409
Local cEvenFNot		:= SuperGetMv("MV_POHEFNO",,"") 	// Falta Noturna     410
Local cEvenHE50		:= SuperGetMv("MV_POHE50" ,,"")		// H.E.  50% AUT     106
Local cEvenHE100	:= SuperGetMv("MV_POHE100",,"") 	// H.E. 100% AUT     107
Local __aResult	  	:= {}


( aEventos := {} , aEventos := aClone(oAponta:aResult) )
__aResult  := aClone( aEventos )

/*
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Identifica o horАrio que o funcionАrio cumpre no sАbado  Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
*/
cQuery := "SELECT F2.RF2_TURNO, F4.RF4_DIA, F2.RF2_HOR, F4.RF4_JORN, F3.RF3_ENTRA1, F3.RF3_SAIDA1 "
cQuery += "FROM "+RetSqlName('RF2')+" F2 "
cQuery += "INNER JOIN "+ RetSqlName('RF4')+" F4 "
cQuery +=  "ON F2.RF2_HOR = F4.RF4_HOR "
cQuery += "INNER JOIN "+RetSqlName('RF3')+" F3 "
cQuery +=  "ON F4.RF4_JORN = F3.RF3_JORN AND F2.RF2_TURNO = '"+cTurno+"' AND (F4.RF4_DIA = '7' OR F4.RF4_DIA = '6') "
cQuery += "ORDER BY F2.RF2_TURNO"

cQuery := ChangeQuery(cQuery)
dbUseArea(.T., "TOPCONN", TCGenQry(,,cQuery), cAliasQry, .T., .T.)

While !(cAliasQry)->(EOF())
	If (cAliasQry)->RF4_DIA == '7'
		nHIni := (cAliasQry)->RF3_ENTRA1
		nHFim := (cAliasQry)->RF3_SAIDA1
	Else //A entrada e saМda abaixo serА utilizada para controlar Horas de Enfermedad caso haja falta no dia.
		nHIni1 := (cAliasQry)->RF3_ENTRA1
		nHFim1 := (cAliasQry)->RF3_SAIDA1
	EndIf
	(cAliasQry)->(DBSKIP())
EndDo

(cAliasQry)->(dbCloseArea())

For x:=1 to LEN(__aMarcacoes)
	If DOW(__aMarcacoes[x][1]) == 7  .And. __aMarcacoes[x][13] == .T.

		 //Controla caso nЦo haja batida de saМda ou a segunda batida e seja outro dia;
		 //deixando assim a variАvel HSad zerada.
		If dDatAux <> cTod("//") .And. dDatAux <> __aMarcacoes[x][1] .And. nAux1 == 2
			nAux1 := 1
		EndIf

		If nAux1 == 1
			nHEnt 		:= __aMarcacoes[x][2]
			dDatAux 	:= __aMarcacoes[x][1]
			nAux1 		+= 1
			cPeriodo	:= __aMarcacoes[x][20]
			cNumPagto	:= __aMarcacoes[x][21]
		ElseIf nAux1 == 2
			nHSai  := __aMarcacoes[x][2]
			nAux1  := 1 //Reinicializa a variАvel para novo dia.
		EndIf

		If nHEnt <> 0.00 .And. nHSai <> 0.00
			/*
			зддддддддддддддддддддддддддддддддддддд©
			Ё Regra de hora extra do sabado		  Ё
			Ё Ate as 13hs - Hora Extra a 50%	  Ё
			Ё Apos 13hs - Hora Extra a 100%		  Ё
			юддддддддддддддддддддддддддддддддддддды
			*/

			If nHini == 0.00 .And. nHFim == 0.00 //Quer dizer que o funcionАrio nЦo trabalha no sАbado.
		  		If nHSai > 13
		  			n100 := nHSai - 13
			  		n50	 := (13 - nHEnt) - 0.4 // 0.4 И para transformar as horas em sexagesimal.
			  	EndIf
			EndIf

  		  	If nHini <> 0.00 .And. nHFim <> 0.00 //Quer dizer que o funcionАrio trabalha no sАbado.

	  		  	If nHSai > 13 .And. nHIni < 13
		  			n100 := nHSai - 13
		  			n50	 := 13 - nHini
		   		Elseif	nHIni > 13
		  	       If nHSai > nHIni
		  	   	   		n100 := nHSai - nHIni
		  	       		n50	:= 0
		  	       Else
		  	       // Saida no dia seguinte
   		  	   	   		n100 := 24 - nHIni
		  	       		n50	:= 0
		  	       Endif
                Endif
			EndIf
		EndIf

		If n100 <> 0.00 .Or. n50 <> 0.00
	  		// horas ja' estao em minutos

			If n100 > 0
				//Caso todas as horas sejam convertidas a 100% e exista o evento a 50%, grava o evento
				// com zero para poder limpА-lo do __aResult
    			If n50 <= 0
                     For y := 1 to LEN(__aRESULT)
						If __aResult[y][1] == dDatAux
						     __aResult[y][3] := 0
						EndIf
                     Next
				EndIf

				fGeraRes(__aResult, dDatAux, n100, cEvenHE100, cCusto,,.F.,cPeriodo,0,"",.T.)

 				//AtualizaГЦo dos campos abaixo, porque a rotina nЦo estА fazendo.
				nY := LEN(__aResult)
				__aResult[nY][6] := "H"
				__aResult[nY][10] := AllTrim(SRA->RA_CODFUNC)
				__aResult[nY][11] := SRA->RA_DEPTO
				__aResult[nY][13] := AllTrim(SRA->RA_PROCES)
				__aResult[nY][14] := cPeriodo
				__aResult[nY][15] := 'PON'
				__aResult[nY][16] := cNumPagto
				n100  := 0.00
				nHEnt := 0.00
				nHSai := 0.00
			EndIf
			If n50 > 0
				fGeraRes(__aResult, dDatAux, n50, cEvenHE50, cCusto,,.F.,cPeriodo,0,"",.T.)
				nY := LEN(__aResult)
				__aResult[nY][6] := "H"
				__aResult[nY][10] := AllTrim(SRA->RA_CODFUNC)
				__aResult[nY][11] := SRA->RA_DEPTO
				__aResult[nY][13] := AllTrim(SRA->RA_PROCES)
				__aResult[nY][14] := cPeriodo
				__aResult[nY][15] := 'PON'
				__aResult[nY][16] := cNumPagto
				n50	  := 0.00
				nHEnt := 0.00
				nHSai := 0.00
			EndIf
		EndIf

	EndIf

	//Verifica se a saida foi no domingo para calcular das 13 hrs do sabado ate a saida de domingo.
	If DOW(__aMarcacoes[x][1]) == 1  .And. __aMarcacoes[x][13] == .T.  .And.  __aMarcacoes[x][25] + 1 == __aMarcacoes[x][1]

		If !Empty(nHEnt)
			//Quer dizer que o funcionАrio trabalhou de sabado p/ domingo
			If nAux1 == 2
				nHSai  := __aMarcacoes[x][2]
				nAux1  := 1 //Reinicializa a variАvel para novo dia.
			Endif

			If nHEnt <> 0.00 .And. nHSai <> 0.00
			/*
			зддддддддддддддддддддддддддддддддддддд©
			Ё Regra de hora extra do sabado		  Ё
			Ё Ate as 13hs - Hora Extra a 50%	  Ё
			Ё Apos 13hs - Hora Extra a 100%		  Ё
			юддддддддддддддддддддддддддддддддддддды
			*/

	  		  	If nHini == 0.00 .And. nHFim == 0.00
			  		If nHEnt > 13
				  		n50  := 0
				  		n100 := 24 - nHEnt + nHSai
			  		Else
			  			n50  := 13 - nHEnt
   						n100 := 11 + nHSai
			  		EndIF
	  	        Endif
             Endif
		EndIf

		If n100 <> 0.00 .Or. n50 <> 0.00
      		// horas ja' estao em minutos

			If n100 > 0
				//Caso todas as horas sejam convertidas a 100% e exista o evento a 50%, grava o evento
				// com zero para poder limpА-lo do __aResult
    			If n50 <= 0
                     For y := 1 to LEN(__aRESULT)
						If __aResult[y][1] == dDatAux
						     __aResult[y][3] := 0
						EndIf
                     Next
				EndIf

				fGeraRes(__aResult, dDatAux, n100, cEvenHE100, cCusto,,.F.,cPeriodo,0,"",.T.)

 				//AtualizaГЦo dos campos abaixo, porque a rotina nЦo estА fazendo.
				nY := LEN(__aResult)
				__aResult[nY][6] := "H"
				__aResult[nY][10] := AllTrim(SRA->RA_CODFUNC)
				__aResult[nY][11] := AllTrim(SRA->RA_DEPTO)
				__aResult[nY][13] := AllTrim(SRA->RA_PROCES)
				__aResult[nY][14] := cPeriodo
				__aResult[nY][15] := 'PON'
				__aResult[nY][16] := cNumPagto
				n100  := 0.00
				nHEnt := 0.00
				nHSai := 0.00
			EndIf
			If n50 > 0
				fGeraRes(__aResult, dDatAux, n50, cEvenHE50, cCusto,,.F.,cPeriodo,0,"",.T.)
				nY := LEN(__aResult)
				__aResult[nY][6] := "H"
				__aResult[nY][10] := AllTrim(SRA->RA_CODFUNC)
				__aResult[nY][11] := AllTrim(SRA->RA_DEPTO)
				__aResult[nY][13] := AllTrim(SRA->RA_PROCES)
				__aResult[nY][14] := cPeriodo
				__aResult[nY][15] := 'PON'
				__aResult[nY][16] := cNumPagto
				n50	  := 0.00
				nHEnt := 0.00
				nHSai := 0.00
			EndIf
		EndIf

	Endif

Next

//Busca o evento - Falta integral para verificar se И necessАrio distribuir em Horas Normais e Noturnas
If SRA->RA_CATFUNC <> 'M' .And. nHIni1 < 06.00 .Or. nHFim1 > 21.00

	If nHFim1 > 21
		nHorNot := nHFim1 - 21
	EndIf
	If nHIni1 < 6 //.and. nHIni1 > 21
		If nHFim1 > 6
			nHorNot := 6
			nHorNor := nHFim1 - 6
		Else
			nHorNot := nHFim1 - nHIni1
		EndIf
	EndIf
	If nHorNot > 0 .And. (nHorNot - INT(nHorNot) = 0.59) //Para arredondar a hora.
		nHorNot := INT(nHorNot) + 1
	EndIf

	If nHIni > 0 //Quer dizer que o funcionАrio trabalha no sАbado
		If nHFim > 21
			nQtdHNSab := nHFim - 21
		EndIf
		If nHIni < 6 //.and. nHIni > 21
			If nHFim > 6
				nQtdHNotSab := 6
				nQtdHNSab 	:= nHFim - 6
			Else
				nQtdHNotSab := nHFim1 - nHIni1
			EndIf
		EndIf
	EndIf

	If nQtdHNSab > 0 .And. (nQtdHNSab - INT(nQtdHNSab) = 0.59) //Para arredondar a hora.
		nQtdHNSab := INT(nQtdHNSab) + 1
	EndIf


	aSort(__aResult,,,{|aReg1,aReg2| aReg1[2] < aReg2[2]})
	nPos := Ascan(__aResult, {|d| d[2] == cEvenFInt } )

	If nPos > 0
		For x := nPos to LEN(__aResult)

			nCont1 := (LEN(__aResult) + 1) //Para ter a quantidade atual do array

			If __aResult[x][2] <> cEvenFint
				EXIT
			EndIf
			If DOW(__aResult[x][1]) <> 7
				nQtdHNor := __aResult[x][3] - nHorNot
				nQtdHNot := __aResult[x][3] - nQtdHNor

				If nQtdHNor > 0
					__aResult[x][3] := nQtdHNor
				EndIf
				If nQtdHNot > 0
					fGeraRes(__aResult, __aResult[x][1], nQtdHNot, cEvenFNot, cCusto,,.F.,cPeriodo,0,"",.T.)
					__aResult[nCont1][6]  := __aResult[x][6]
					__aResult[nCont1][10] := __aResult[x][10]
					__aResult[nCont1][11] := __aResult[x][11]
					__aResult[nCont1][13] := __aResult[x][13]
					__aResult[nCont1][14] := __aResult[x][14]
					__aResult[nCont1][15] := __aResult[x][15]
					__aResult[nCont1][16] := __aResult[x][16]
				EndIf

			ElseIf DOW(__aResult[x][1]) == 7
				nQtdHNor := (__aResult[x][3] - nQtdHNSab) - 0.4
				nQtdHNot := (__aResult[x][3] - nQtdHNor) - 0.4

				If nQtdHNor > 0
					__aResult[x][3] := nQtdHNor
				EndIf
				If nQtdHNot > 0
					fGeraRes(__aResult, __aResult[x][1], nQtdHNot, cEvenFNot, cCusto,,.F.,cPeriodo,0,"",.T.)
					__aResult[nCont1][6]  := __aResult[x][6]
					__aResult[nCont1][10] := __aResult[x][10]
					__aResult[nCont1][11] := __aResult[x][11]
					__aResult[nCont1][13] := __aResult[x][13]
					__aResult[nCont1][14] := __aResult[x][14]
					__aResult[nCont1][15] := __aResult[x][15]
					__aResult[nCont1][16] := __aResult[x][16]
				EndIf

			EndIf

			nQtdHNor := 0
			nQtdHNot := 0

		Next
	EndIf
EndIf

aEventos := aClone(__aResult)

/*
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Verifica se aEventos e um Array e Se Houveram Modificacoes  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
/*/
IF ( ( ( ValType( aEventos ) == "A" ) .and. !ArrayCompare( aEventos , oAponta:aResult ) ) )
	( oAponta:aResult := {} , oAponta:aResult := aClone( aEventos ) , aEventos := {} )
EndIF

RestArea(aArea)

Return


/*
эээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
╠╠иммммммммммяммммммммммкмммммммяммммммммммммммммммммкммммммяммммммммммммм╩╠╠
╠╠╨Programa  ЁfValHrs100╨Autor  ЁA.Shibao            ╨ Data Ё  07/11/13   ╨╠╠
╠╠лммммммммммьммммммммммймммммммоммммммммммммммммммммйммммммоммммммммммммм╧╠╠
╠╠╨Desc.     ЁValida a existencias dos parametros e eventos(SP9)          ╨╠╠
╠╠╨          ЁMV_POHEFIN , MV_POHEFNO, MV_POHE50 , MV_POHE100             ╨╠╠
╠╠лммммммммммьмммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╧╠╠
╠╠╨Uso       Ё AP                                                         ╨╠╠
╠╠хммммммммммомммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╪╠╠
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ
*/
Function fValHrs100()

	Local aAreaSP9	:= SP9->( GetArea() )
	Local cFilSP9	:= FwxFilial("SP9")
	Local lRet		:= .T.
	Local nTamEven	:= Len("P9_CODIGO")

	Local cEvenFInt	:= SuperGetMv("MV_POHEFIN", NIL , " " ) 	// Falta Integral
	Local cEvenFNot	:= SuperGetMv("MV_POHEFNO", NIL , " " ) 	// Falta Noturna
	Local cEvenHE50	:= SuperGetMv("MV_POHE50" , NIL , " " )		// H.E.  50% AUT
	Local cEvenHE100:= SuperGetMv("MV_POHE100", NIL , " " ) 	// H.E. 100% AUT

	dbSelectArea("SP9")
	dbSetOrder(1)

    If !DbSeek( cFilSP9 + Padr(cEvenHE100,nTamEven)) .Or. ;
    	!DbSeek( cFilSP9 + Padr(cEvenHE50,nTamEven)) .Or. ;
    	!DbSeek( cFilSP9 + Padr(cEvenFInt,nTamEven)) .Or. ;
    	!DbSeek( cFilSP9 + Padr(cEvenFNot,nTamEven))
	     HELP( " ",1,"PONVAL100" )
		 lRet := .F.
	EndIf

		RestArea(aAreaSP9)

Return(lRet)
