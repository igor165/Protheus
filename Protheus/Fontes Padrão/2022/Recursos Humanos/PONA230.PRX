#INCLUDE "PONA230.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"

Static lPnaCel := ExistBlock( "PNA230CEL" )
Static lPnaGrv := ExistBlock( "PNA230GRV" )
Static lPnopcx := ExistBlock( "PONOPCX2" )
Static __lCpoDataAlt
Static __lCpoUsuaAlt
Static lPort1510 	:= Port1510() 	//Verifica se Portaria 1510/2009 esta em vigor.
Static lValidDel	:= .T.

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONA230  ³ Autor ³ Marinaldo de Jesus             ³ Data ³11/06/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Descri‡„o ³ Manutencao de Marca‡”es Diarias por Centro de Custo                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³ Uso      ³ Generico                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Programador ³    Data   ³ FNC/Chamado ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³±±
±±³Leandro Dr. ³13/04/2014 ³      		 ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³           ³      		 ³que nao serao utilizados na P12.		    ³±±
±±³Christiane V³11/04/2014 ³   M_RH003/  ³Inclusão de parâmetro para a leitura da   ³±±
±±³			   ³           ³    003252   ³função fDescAfast.                        ³±±
±±³Matheus M.  ³12/08/2016 ³   TVUPM1	 ³Ajustes para não gerar error.log ao lançar³±±
±±³            ³           ³      		 ³marcação somente para segunda batida.	    ³±±
±±³Renan Borges³17/01/2017 ³   MRH-3465  ³Ajuste para lançar e apontar marcações cor³±±
±±³            ³           ³             ³retamente quando for alterada a regra de  ³±±
±±³            ³           ³             ³apontamento do funcionário, de saida para ³±±
±±³            ³           ³             ³entrada.                                  ³±±
±±³Renan Borges³01/06/2017 ³ DRHPONTP-776³Ajuste que botão de exclusão de apontamen-³±±
±±³            ³           ³             ³tos não exclua os apontamentos gerados pe-³±±
±±³            ³           ³             ³lo sistema, e para que não seja permitido ³±±
±±³            ³           ³             ³o preenchimento de datas de marcações fora³±±
±±³            ³           ³             ³ do periodo de apontamento.               ³±±
±±³M. Silveira ³29/09/2017 ³DRHPONTP-1916³Ajuste na Pna230RecRFE para nao restaurar ³±±
±±³            ³           ³             ³marcacoes que foram desconsideradas.      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/


Function PONA230()
Private aRotina	:= MenuDef()

// - Valida se o usuário tem acesso
If BloqPer()

	Return (Nil)

EndIf

NewPONA230("PONA230")

Return(Nil)
/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ NewPona230()	³Autor³                   ³ Data ³30/03/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³ Programa principal separado para tratamento da funcao      ³
³          ³ MenuDef().                                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230, PONA240                                            ³        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Function NewPONA230(cChamada)
Local aArea			:= GetArea()
Local aAreaSP8		:= {}
Local aAreaSPG		:= {}
Local aIndex		 := {}
Local cFiltra		:= ""

Private aTabPadrao  := {}
Private bFiltraBrw	:= { || NIL }
Private cProg		:= IF( cChamada == NIL , FunName() , cChamada )
Private dPerIni     := Ctod("//")
Private dPerFim     := Ctod("//")
Private lPona240	:= fContemStr( cProg , "PONA240" , .T. )
Private cCadastro   := ""
Private cApoCla     := ""

DEFAULT __lCpoDataAlt	:= IF(lPort1510, .T., ( IF( ( ( SP8->(FIELDPOS( "P8_DATAALT" )) != 0 ) .and. ( SPG->(FIELDPOS( "PG_DATAALT" )) != 0 ) .and. ( SuperGetMv("MV_PONLOG",NIL,"N") == "S" ) ) ,.T. , .F. ) ) )  //Mantido fieldpos pois no momento só existe para o Brasil - P12
DEFAULT __lCpoUsuaAlt	:= IF(lPort1510, .T., ( IF( ( ( SP8->(FIELDPOS( "P8_USUARIO" )) != 0 ) .and. ( SPG->(FIELDPOS( "PG_USUARIO" )) != 0 ) .and. ( SuperGetMv("MV_PONLOG",NIL,"N") == "S" ) ) ,.T. , .F. ) ) )  //Mantido fieldpos pois no momento só existe para o Brasil - P12

IF !( lPona240 )

		aAreaSP8 := SP8->( GetArea() )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Declara Variaveis que Serao Utilizadas no Apontamento       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cCadastro   := OemToAnsi( STR0001 ) //"Manuten‡„o das Marca‡”es Por Centro de Custo"
		cApoCla     := SuperGetMV( "MV_APOCLA" , NIL , "S" , cFilAnt )

Else

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Declara Variaveis que Serao Utilizadas no Acumulado         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aAreaSPG	:= SPG->( GetArea() )
		cCadastro   := OemToAnsi( STR0057  ) //"Manuten‡„o Acumulado de Marca‡”es Por Centro de Custo"

EndIF

If lPort1510
	cCadastro += fPortTit() //Complementa titulo da tela com dizeres referente a portaria.
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se o Modo de Acesso do SPB e SRA foram iguais e se este  ulti³
³mo nao estiver vazio e Se o Periodo Estiver em Aberto.                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( ValidArqPon() .and. ChkVazio("SRA") )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cFiltra		:= ChkRh( cProg , "SRA" , "1" )
	bFiltraBrw 	:= { || FilBrowse( "SRA" , @aIndex , @cFiltra ) }
	Eval( bFiltraBrw )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Chamada a mBrowse														 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	mBrowse( 6, 1,22,75,"SRA",,,,,,fCriaCor() )

    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	EndFilBrw( "SRA" , aIndex )

	IF !lPona240
		RestArea( aAreaSP8 )
	Else
		RestArea( aAreaSPG )
	EndIF

EndIF

RestArea( aArea )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Pn230Atu  ³ Autor ³Marinaldo de Jesus     ³ Data ³11/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Atu(ExpC1,ExpN1,ExpN2)                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ ExpC1 = Alias do arquivo                                   ³
³          ³ ExpN1 = Numero do registro                                 ³
³          ³ ExpN2 = Numero da opcao selecionada                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ Pona130                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230Atu(cAlias,nReg,nOpcX)

Local aAreaSRA			:= SRA->( GetArea() )
Local aKeys				:= GetKeys()
Local aRecno			:= {}
Local aNotFields		:= {"P8_FILIAL","P8_MAT","PG_FILIAL","PG_MAT"}
Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjSize			:= {}
Local aObjCoords		:= {}

Local aInfoAdvSize2		:= {}
Local aObjSize2			:= {}
Local aObjCoords2		:= {}

Local aLboxCoords		:= {}
Local aGdCoords			:= {}
Local aGpLboxCoords		:= {}
Local aGpGdCoords		:= {}
Local aGdAlter			:= {}
Local bSet15			:= { ||nopcA:=1,IF(oGet:TudoOk(),(Pn230GetaCols(@aCols,@aArrayMain,aNotFields,,,nOpcX,.T.),oDlg:End()),(nOpcA:=0,.T.))}
Local bSet24			:= { ||oDlg:End() }
Local bSvSet15			:= { || NIL }
Local bSvSet24			:= { || NIL }
Local bChange			:= { || NIL }
Local bNIL				:= { || NIL }
Local cMat				:= SRA->RA_MAT
Local cNome				:= SRA->RA_NOME
Local cPrefix			:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local dPerIniPar		:= Ctod("//")
Local dPerFimPar		:= Ctod("//")
Local nX				:= 0
Local nLenX				:= 0
Local nCnt		  		:= 0
Local nOpcA				:= 0
Local nPosFlag			:= 0
Local nPosApon			:= 0
Local nFatLstBox		:= 0
Local _lGrava			:= .T.
Local oDlg
Local oGet
Local oFont
Local oLinhas
Local oGroup
Local bLegend		:= { || NIL }
Local bCalend		:= { || NIL }
Local bColDel		:= { || NIL }
Local bGerMarOne	:= { || NIL }
Local bGerMarAll	:= { || NIL }
Local bGerAleOne	:= { || NIL }
Local bGerAleAll	:= { || NIL }
Local bAponMarc		:= { || NIL }
Local bReaponMarc	:= { || NIL }
Local bConfirma		:= { || NIL }
Local bCancela		:= { || NIL }
Local nMinMax		:= Abs( SuperGetMv( "MV_MCALEAT" , NIL , 0  , cFilAnt ) )
Local aButtons  	:= {}
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.
Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca	:= {}

Private aArrayMain			:= {}
Private aArrayAnt			:= {}
Private aArrayClone			:= {}
Private aLastApo			:= {}
Private aElem				:= {}
Private aListBox			:= {}
Private aVirtual			:= {}
Private aVisual				:= {}
Private aHeader				:= Array( 0 )
Private aCols				:= {}
Private aTabCalend  		:= {}
Private aMarcacoes			:= {}
Private aResult				:= {}
Private aRecsMarcAutDele	:= {}
Private cPerAponta			:= ""
Private Continua			:= .F.
Private lGeraAuto			:= .F.
Private lP8PGIniCa			:= .T.
Private nUsado				:= 0
Private nSvUsado			:= 0
Private nSvnAt				:= 1
Private olBox				:= NIL


DEFAULT lPnaCel	:= ExistBlock( "PNA230CEL" )
DEFAULT lPnaGrv	:= ExistBlock( "PNA230GRV" )
DEFAULT lPnopcx := ExistBlock( "PONOPCX2" )

//Quando portaria estiver ativa, acumulado nao podera mais sofrer alteracoes
If lPort1510 .and. lPona240
	nOpcx := 2
EndIf

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Quando For Acumulado Verifica o Periodo que foi previamente  Selecionado³
	³pelo Usuario													 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( lPona240 )
		dPerIni := SPO->PO_DATAINI
		dPerFim := SPO->PO_DATAFIM
		IF ( Empty( dPerIni ) .or. Empty( dPerFim ) )
			Help( "" , 1 , "SPONOTPERC" )
			Break
		EndIF
	Else
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Caso Contrario Verifica se o Periodo eh Valido atraves de CheckPonmes() ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !( CheckPonMes( @dPerIni , @dPerFim , .F. , .T. , !lPona240 ) )
			Break
		EndIF
	EndIF

   	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³  Ponto-de-Entrada troca a opção no dialogo					³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPnopcx )
		If ( ValType( nRet := ExecBlock("PONOPCX2",.F.,.F., { nOpcx } ) ) == "N" )
			nOpcx	 := nRet
		EndIf
	EndIF
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Valida o Periodo de Apontamento para Digitacao das Informacoes          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !(;
			GetPonMesDat( @dPerIniPar , @dPerFimPar );
			.and.;
			ValidPonData(dPerIni,"P",dPerIniPar,dPerFimPar,lPona240,.T.);
		 )
		Break
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas de Marcacoes do Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !(;
			Pona230Locks( nOpcX , IF( lPona240 , "SPH" , "SPC" ) , {} );
			.or.;
	   		Pona230Locks( nOpcX , IF( lPona240 , "SPG" , "SP8" ) , {} );
	   		.or.;
	   		Pona230Locks( nOpcX , "SPK" , {} );
	   	)
       Break
    EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa as Statics dos Objetos Bmp e Carrega os BitMaps³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230BitMaps()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa aColsStatic a Cada Funcionario                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230GetaCols()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega os Apontamentos Anteriores                          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aLastApo := GetLastApo( dPerIni , dPerFim , IF( lPona240 , "SPH" , "SPC" ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega a String de Periodo de Apontamento                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cPerAponta := ( Dtos( dPerIni ) + Dtos( dPerFim ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se existe algum dado no arquivo                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nCnt := Pn230aCols(NIL,NIL,NIL,nOpcX,NIL,.T.) ) > 0  .and. nOpcX == 3	//--Quando Inclusao e existir Registro
		Help(" ",1,"Pn230Exist")
	 	Break
	ElseIF ( nCnt == -1 )	//Nao Foi Possivel Criar o Calendario de Marcacoes
		Break
	ElseIF ( nCnt == 0 .and. nOpcX != 3 .and. Empty( aLastApo ) )			//--Quando Nao for Inclusao e nao existir Registro
		Help(" ",1,"Pn230NoLan")
		Break
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o cabecalho                                            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aHeader := GdMontaHeader( @nUsado , @aVirtual , @aVisual , IF( lPona240 , "SPG" , "SP8" ) , aNotFields, .F., .T., .T. )
	// Criacao dos dois elementos para o uso no WalkThru
	ADHeadRec(IF( lPona240 , "SPG" , "SP8" ),aHeader)

	nUsado:= Len(aHeader)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Quando for Inclusao criar com 1 elemento					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nCnt 		:= IF(nOpcX == 3,1,nCnt)
	nSvUsado	:= nUsado+IF(nOpcX==2.or.nOpcX==5,0,1)
	aArrayMain	:= Array(nCnt,nSvUsado)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gerar o array aCols com os Todos os Apontamentos            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nCnt   := 0 ; nUsado := 0
	Pn230Acols(@aArrayMain,@aRecno,aNotFields,nOpcX)
	aArrayClone := aClone(aArrayMain)
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada inclusao de novos campos					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPnaCel )
		IF ( ValType( uRet := ExecBlock("PNA230CEL",.F.,.F.,{ aArrayMain } ) ) == "A" )
			aArrayMain := aClone(uRet)
			uRet	   := NIL
		EndIF
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Houve Geracao de Marcacoes Automaticas e  Altera³
	³ Flag para Forcar o Reapontamento e a Remontagem do Resultado³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF lGeraAuto
		nPosFlag := GdFieldPos(cPrefix+"FLAG")
		nPosApon := GdFieldPos(cPrefix+"APONTA")
		aEval( @aArrayClone , { |x| IF( x[ nPosFlag ] == "A" .and. x[ nPosApon ] != "S" , x[ nPosFlag ] := "M" , NIL ) } )
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gera aCols com 1 Elemento para a GetDados                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230Acols(@aCols,,aNotFields,nOpcX,.T.)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o aListBox de Acordo com o Calendario de Marcacoes    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !GetCalendListBox( @aListBox , aTabCalend )
		Break
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa nOpcA											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nOpcA := 0

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define os Campos Alteraveis								  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    aAdd( aVisual , cPrefix+"ORDEM"	  )
    aAdd( aVisual , cPrefix+"PAPONTA" )
	nLenX := Len( aHeader )
    For nX := 1 To nLenX
    	IF (;
    			aScan( aVisual , { |x| x == aHeader[ nX , 02 ] } ) == 0 .and. ;
    			aScan( aVirtual , { |x| x == aHeader[ nX , 02 ] } ) == 0 	  ;
    		)
    		aAdd( aGdAlter , aHeader[ nX , 02 ] )
    	EndIF
    Next nX

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd( aObjCoords , { 000 , 020 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 007, .T. , .F. } )
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. , .T.} )
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords)

	aGpLboxCoords	:= { aObjSize[3,1],aObjSize[3,2],(aObjSize[3,3])/3.15,(aObjSize[3,4]*2)+5}

	aGdCoords		:= { aObjSize[3,1],((aObjSize[3,3])/3),aObjSize[4,3],aObjSize[4,4]}

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca 	:= FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Mostra Tela de Apontamentos por Centro de Custo             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
    DEFINE MSDIALOG oDlg TITLE cCadastro From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL

		@ aObjSize[1,1] , aObjSize[1,2] GROUP oGroup TO ( aObjSize[1,3] ),(( aObjSize[1,4])*0.18 ) LABEL OemToAnsi(STR0010) OF oDlg PIXEL				// "Matricula:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1] , (( aObjSize[1,4])*0.185 ) GROUP oGroup TO aObjSize[1,3],((aObjSize[1,4])*0.87) LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "Nome:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1] , ((aObjSize[1,4])*0.875) GROUP oGroup TO  aObjSize[1,3] ,aObjSize[1,4]  LABEL OemToAnsi(STR0060) OF oDlg PIXEL						// "Admiss„o:"
		oGroup:oFont:= oFont

		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,2]) * 2.5)	SAY StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT))	SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.2)	SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME))	SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ ((aObjSize[1,1]) +10) , ((aObjSize[1,4]) * 0.89)	SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

		@ aObjSize[2,1], aObjSize[2,2]		SAY OemToAnsi(STR0021)	SIZE 146,10 OF oDlg PIXEL FONT oFont															// "Calend rio"
		@ aObjSize[2,1],((aObjSize[3,3])/3)	SAY OemToAnsi(STR0022)	SIZE 146,10 OF oDlg PIXEL FONT oFont															// "Marca‡”es"
		@ aObjSize[2,1],(aGdCoords[4]-25.5)	SAY oLinhas VAR StrZero(IF(Type("n")!="U",n,0),4)+"/"+StrZero(Len(aCols),4) SIZE 146,10 OF oDlg PIXEL FONT oFont

		bChange := { ||  ( IF(IF(nOpcX==3.or.nOpcX==4,Pn230LinOK(NIL,.T.),.T.),;
																				 Pn230GetaCols(	@aCols		,;
																				 				@aArrayMain	,;
																				 				aNotFields 	,;
																				 				@oDlg		,;
																				 				@oGet		,;
																				 				nOpcX ) 	,;
																			 	 ( oLbox:nAt := nSvnAt		,;
																			 	   oLbox:Refresh() )		 ;
																			  ),;
																		   oLinhas:Refresh();
																		  );
					}

		ListBoxCalend( 	aGpLboxCoords , @oDlg , aListBox , @oLBox , bChange  )

		oGet := MsGetDados():New(aGdCoords[1],aGdCoords[2],aGdCoords[3],aGdCoords[4],nOpcX,"Pn230LinOK","Pn230TudOK","",IF(nOpcX==2.Or.nOpcX==5,NIL,.T.),aGdAlter,1,,,,,,If(lPort1510,"fDelMarc()",oDld))

		oGet:oBrowse:bChange := { || oLinhas:Refresh() }

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta os Botoes para a EnchoiceBar             			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

		bLegend		:= { || GetLegendCalend() }
		bCalend		:= { || IF(oGet:TudoOk(),(	Pn230GetaCols(	@aCols		,;
													  			@aArrayMain	,;
																aNotFields	,;
																@oDlg		,;
																@oGet		,;
																nOpcX		 ;
												      	 	),;
												f_Alt_H(	oGet				,;
															aClone(aArrayMain)	,;
															nSvUsado			,;
															aHeader				,;
															lPona240			 ;
														);
										 	),;
										 	NIL;
						 		);
				 		}
		bColDel		:= { || Pn230ModSetaCols( @oDlg , @oGet ) }
		bGerMarOne	:= { || Pn230GeraMarc( @oDlg , @oGet ) }
		bGerMarAll	:= { || Pn230GeraMarc( @oDlg , @oGet , .T. ) }
		bRecRFE		:= { || ;
						IF(	Pna230RecRFE(oGet,@aRecno),;
							(;
								oGet:ForceRefresh(),;
								oGet:oBrowse:Refresh(),;
								oDlg:Refresh();
							),;
							NIL;
						   );
					 	}
		bReaponMarc	:= { ||IF(oGet:TudoOk(),(;
												Pn230GetaCols(	@aCols		,;
																aArrayMain	,;
																aNotFields	,;
																@oDlg		,;
																@oGet		,;
																nOpcX		 ;
															  ),;
												Pn230Aponta( oGet , nOpcX , .T. ) ;
											 ),;
											 NIL;
							 );
						}

		IF !( lPona240 )
			bAponMarc	:= { || IF(oGet:TudoOk(),(;
													Pn230GetaCols(	@aCols		,;
																	@aArrayMain	,;
																	aNotFields	,;
																	@oDlg		,;
																	@oGet		,;
																	nOpcX	 	 ;
																  ),;
													Pn230Aponta( oGet , nOpcX );
												  ),;
												 NIL;
									);
							 }
		EndIF
		bGerAleOne	:= { || Pn230GeraMarc( @oDlg , @oGet , .F. , nMinMax ) }
		bAponMarc	:= { || Pn230Aponta( oGet , nOpcX ) }
		bGerAleAll	:= { || Pn230GeraMarc( @oDlg , @oGet , .T. , nMinMax ) }

		IF ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) )
			aAdd(aButtons, { 'LEGENDA' , { || Eval(bLegend) } , OemToAnsi(STR0045) } )  	// 'Legenda do calendario - <F4>'
			aAdd(aButtons, { 'HORARIO' , { || Eval(bCalend) } , OemToAnsi(STR0069) } )  	// 'Consulta de horarios - <F5>'
			aAdd(aButtons, { 'APAGAR' , { || Eval(bColDel) } , OemToAnsi(STR0068) } )		// 'Apagar/Restaurar Marcacoes do Dia... - <F6>'
			aAdd(aButtons, { 'CLOCK01' , { || Eval(bGerMarOne) } , OemToAnsi(STR0038) } )	// 'Gera Marcacao... - <F7>'
			aAdd(aButtons, { 'SDUFIELDS' , { || Eval(bGerMarAll) } , OemToAnsi(STR0055) } )	// 'Gera Todas as Marcacoes Para o Dia... - <F8>'
			aAdd(aButtons, { 'NEXT' , { || Eval(bGerAleOne) } , OemToAnsi(STR0058) } )		// 'Gera Marcacao Aleat¢ria... - <F9>'
			aAdd(aButtons, { 'PGNEXT' , { || Eval(bGerAleAll) } , OemToAnsi(STR0059) } )	// 'Gera Marcacoes Aleatorias Para o Dia... - <F10>'
			aAdd(aButtons, { 'COLTOT' , { || Eval(bAponMarc) } , OemToAnsi(STR0039) } )		// 'Aponta Marcacoes... - <F11>'
			aAdd(aButtons, { 'RECALC' , { || Eval(bReaponMarc) } , OemToAnsi(STR0073) } )	// 'Forca o Reapontamento das Marcacoes... - <F12>'

			SetKey(VK_F4,bLegend)
			SetKey(VK_F5,bCalend)
			SetKey(VK_F6,bColDel)
			SetKey(VK_F7,bGerMarOne)
			SetKey(VK_F8,bGerMarAll)
			SetKey(VK_F9,bGerAleOne)
			SetKey(VK_F10,bGerAleAll)
			SetKey(VK_F11,bAponMarc)
			SetKey(VK_F12,bReaponMarc)
		EndIf

	If lPort1510 .and. !lPona240 .and. nOpcX == 4
		aAdd(aButtons, { 'DEVOLNF' , { || Eval(bRecRFE) } , OemToAnsi(STR0176) } )		// 'Aponta Marcacoes... - <F11>'
		SetKey( K_ALT_R , bRecRFE )
	EndIf

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg, bSet15 , bSet24 , Nil , aButtons ) CENTERED

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Exclusao                                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpcX != 5 )
		IF ( ( nOpcA == 1 ) .and. ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Prepara e Aponta as Marcacoes                                 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( !( lPona240 ) .and. ( cApoCla == "S" ) )
				Pn230Aponta()
			EndIF
	        Begin Transaction
	        	/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Seta o Flag de Marcacoes Apontadas                            ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( !( lPona240 ) .and. ( cApoCla == "S" ) )
					PutFlagMarc( @aArrayMain , aMarcacoes )
				EndIF
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Ponto de Entrada para permite ou não a gravacao			   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF ( lPnaGrv )
					IF ( ValType( lRet := ExecBlock("PNA230GRV",.F.,.F.,{ cAlias, cPrefix, nOpcX } ) ) == "L" )
						_lGrava := lRet
						lRet	:= NIL
					EndIF
				EndIF

				If _lGrava
		            /*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Grava as Marcacoes                                            ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		        	Pn230Grava(aArrayMain,aRecno,aHeader,nOpcX)
			       	/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Processa Gatilhos                                             ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			        EvalTrigger()
		        EndIf
			End Transaction
		EndIF
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se for Exclusao                                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ElseIF ( ( nOpcA == 1 ) .and. ( nOpcX == 5 ) )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Ponto de Entrada para permite ou não a gravacao			   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( lPnaGrv )
			IF ( ValType( lRet := ExecBlock("PNA230GRV",.F.,.F.,{ cAlias, cPrefix, nOpcX } ) ) == "L" )
				_lGrava := lRet
				lRet	:= NIL
			EndIF
		EndIF

		If _lGrava
		   	Pn230Dele(aRecno)
		EndIf
	EndIF

	Restkeys(aKeys)
End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Libera Locks						                           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
FreeLocks( IF( lPona240 , "SPH" , "SPC" ) , NIL , .T. )
FreeLocks( IF( lPona240 , "SPG" , "SP8" ) , NIL , .T. )
FreeLocks( "SPK" , NIL , .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
SetKey( 15	, IF( Empty( bSvSet15 ) , bNIL , bSvSet15 ) )
SetKey( 24	, IF( Empty( bSvSet24 ) , bNIL , bSvSet24 ) )
RestKeys( aKeys )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura os Dados de Entrada								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aAreaSRA )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230aCols	³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Array com a Estrutura do aCols                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230aCols(aArrayMain,aRecno,aNotFields,nOpcX,lVazio,lCount) ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                    	     ³
³          ³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nMarcacoes                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230aCols(aArrayMain,aRecno,aNotFields,nOpcX,lVazio,lCount)

Local aArea			:= GetArea()
Local aMarcacoes	:= {}
Local aCloneMarc	:= {}
Local cAlias		:= IF( lPona240 , "SPG" , "SP8" )
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local dPerIGeA		:= dPerIni
Local dPerFGeA		:= Min( dPerFim , dDataBase )
Local lMarcAuto		:= .F.
Local lMvMcAutMm	:= ( SuperGetMv( "MV_MCAUTMM" , NIL , "N" , cFilAnt ) == "S" )
Local lGetMarcAuto	:= ( SuperGetMv( "MV_GETMAUT" , NIL , "S" , cFilAnt ) == "S" )
Local nX			:= 0
Local nMarcacoes	:= 0
Local nField 		:= 0
Local nFields		:= Len( aHeader )

DEFAULT aArrayMain	:= {}
DEFAULT aRecno		:= {}
DEFAULT aNotFields	:= {}
DEFAULT nOpcX		:= 3
DEFAULT lVazio		:= .F.
DEFAULT lCount		:= .F.

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Monta aArrayMain que Contem Todas as Marcacoes do Funcionario³
	³mas Possui a Estrutura do aCols							  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( !( lVazio ) .or. ( lCount ) )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se Deve Carregar as Marcacoes Automaticas.         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !( lGetMarcAuto )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Apenas Quando nao For Exclusao/Visualizacao, Nao Provir   de³
			³ Acumulados e se o parametro MV_MCAUTMM estiver com "S"	  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( ( nOpcX == 5 ) .or. ( lPona240 ) .or. !( lMvMcAutMm ) )
				lGetMarcAuto := .T.
			EndIF
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega as Marcacoes do Funcionario                         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !GetMarcacoes(	@aMarcacoes			,;	//01 -> Marcacoes dos Funcionarios
							@aTabCalend			,;	//02 -> Calendario de Marcacoes (Podera ser Modificado em fDiasFolga()
							@aTabPadrao			,;	//03 -> Tabela Padrao
							NIL              	,;	//04 -> Turnos de Trabalho
							dPerIni 			,;	//05 -> Periodo Inicial
							dPerFim				,;	//06 -> Periodo Final
							SRA->RA_FILIAL		,;	//07 -> Filial
							SRA->RA_MAT			,;	//08 -> Matricula
							SRA->RA_TNOTRAB		,;	//09 -> Turno
							SRA->RA_SEQTURN		,;	//10 -> Sequencia de Turno
							SRA->RA_CC			,;	//11 -> Centro de Custo
							cAlias				,;	//12 -> Alias para Carga das Marcacoes
							.T.					,;	//13 -> Se carrega Recno em aMarcacoes
							.T.		 		 	,;	//14 -> Se considera Apenas Ordenadas
							NIL					,;  //15 -> Verifica as Folgas Automaticas
							NIL  				,;  //16 -> Se Grava Evento de Folga Mes Anterior
							lGetMarcAuto	 	,;	//17 -> Se Carrega as Marcacoes Automaticas
							@aRecsMarcAutDele	 ;	//18 -> Registros de Marcacoes Automaticas que deverao ser Deletados
					  	)
			nMarcacoes := -1
			Help(" ",1,"TPADNCAD")
			Break
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apenas Quando nao For Exclusao e  Nao Provir de Acumulados  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( !( nOpcX == 5 ) .and. !( lPona240 ) .and. ( lMvMcAutMm ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Define o Periodo para a Geracao das Marcacoes Automaticas   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF SRA->( RA_ADMISSA > dPerIni .and. RA_ADMISSA <= dPerFim )
				dPerIGeA := SRA->RA_ADMISSA
			EndIF
			IF SRA->( RA_DEMISSA < dPerFim .and. !Empty( RA_DEMISSA ) )
				dPerFGeA := SRA->RA_DEMISSA
			EndIF
			dPerIGeA	:= Max( dPerIGeA , dPerIni  )
			dPerFGeA	:= Min( dPerFGeA , Min( dDataBase , dPerFim ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Salva Conteudo de aMarcacoes para Verificar Havera  Reaponta³
			³ Mento														  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			aCloneMarc	:= aClone( aMarcacoes )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Gera marca‡oes Autom ticas.                                 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			PutMarcAuto( aTabCalend , @aMarcacoes , dPerIGeA , dPerFGeA , SRA->RA_FILIAL )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Compara aMarcacoes com aConeMarc para ver se Havera Reaponta³
			³ tamento													  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	    	lGeraAuto := !fCompArray( aMarcacoes , aCloneMarc )
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica o Numero de Registros de aMarcacoes	              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nMarcacoes	:= Len( aMarcacoes )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta o aCols Baseado em aMarcacoes 			              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !lCount
			For nX := 1 To nMarcacoes
				IF !( lMarcAuto := Empty( aMarcacoes[ nX , AMARC_RECNO ] ) )
					( cAlias )->( dbGoto( aMarcacoes[ nX , AMARC_RECNO ] ) )
					aAdd( aRecno , aMarcacoes[ nX , AMARC_RECNO ] )
				EndIF
				nUsado	:= 0
				For nField := 1 To nFields
			    	nUsado++
					IF ( aScan( aVirtual , aHeader[ nField , 02 ] ) > 0 )
						aArrayMain[nX,nUsado] := CriaVar( aHeader[ nField , 02 ], .T. )
				    Else
						IF fContemStr( aHeader[ nField , 02 ] , cPrefix+"DATA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_DATA ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"HORA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_HORA ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ORDEM" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_ORDEM ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FLAG" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_FLAG ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TURNO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_TURNO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FUNCAO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_FUNCAO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"GIRO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_GIRO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CC" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_CC ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"APONTA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_APONTA ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"RELOGIO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_RELOGIO ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TPMARCA" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_TIPOMARC ]
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PAPONTA" , .T. )
							aArrayMain[nX,nUsado] := IF( Empty( aMarcacoes[ nX , AMARC_PERAPONTA ] ) , cPerAponta , aMarcacoes[ nX , AMARC_PERAPONTA ] )
						// Carregando o campo para o WalkThru
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ALI_WT" , .T. )
							aArrayMain[nX,nUsado] := cAlias
						ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"REC_WT" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_RECNO ]
						ElseIF lPort1510 .and. fContemStr( aHeader[ nField , 02 ] , cPrefix+"DATAAPO" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_DATAAPO ]
						ElseIF lPort1510 .and. fContemStr( aHeader[ nField , 02 ] , cPrefix+"NUMREP" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_NUMREP ]
						ElseIF lPort1510 .and. fContemStr( aHeader[ nField , 02 ] , cPrefix+"TPMCREP" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_TPMCREP ]
						ElseIF lPort1510 .and. fContemStr( aHeader[ nField , 02 ] , cPrefix+"TIPOREG" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_TIPOREG ]
						ElseIF lPort1510 .and. fContemStr( aHeader[ nField , 02 ], cPrefix+"MOTIVRG" , .T. )
							aArrayMain[nX,nUsado] := aMarcacoes[ nX , AMARC_MOTIVRG ]
						Else
							IF ( lMarcAuto )
								IF ( aHeader[ nField , 08 ] == "C" )
									IF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CC" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"CC"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FLAG" , .T. )
										aArrayMain[nX,nUsado] := "I"
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ORDEM" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"ORDEM"  )
					                ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TURNO" , .T. )
										aArrayMain[nX,nUsado] := CalendRetCpo( cPrefix+"TURNO"  )
									ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PAPONTA" , .T. )
										aArrayMain[nX,nUsado] := cPerAponta
									Else
										aArrayMain[nX,nUsado] := Space( aHeader[ nField , 04 ] )
									EndIF
								ElseIF ( aHeader[ nField , 08 ] == "N" )
										aArrayMain[nX,nUsado] := 0
								ElseIF ( aHeader[ nField , 08 ] == "D" )
									aArrayMain[nX,nUsado] := Ctod("//")
								Else
									aArrayMain[nX,nUsado] := .F.
								EndIF
							Else
								aArrayMain[nX,nUsado] := (cAlias)->&( aHeader[ nField , 02 ] )
							EndIF
						EndIF
					EndIF
				Next nField
				IF nOpcX != 2 .and. nOpcX != 5 //Visualizacao ou Exclusao
					aArrayMain[nX,nUsado+1] := .F.
				EndIF
			Next nX
		EndIF
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Array do 1§ Elemento Vazio. 	   					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !( lCount )
		IF ( ( nMarcacoes == 0 ) .or. ( lVazio ) )
			nMarcacoes := 1
			aArrayMain := Array( nMarcacoes , nSvUsado )
			nUsado	:= 0
			For nField := 1 To nFields
				nUsado++
				IF ( aHeader[ nField , 08 ] == "C" )
					IF fContemStr( aHeader[ nField , 02 ] , cPrefix+"CC" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"CC"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"FLAG" , .T. )
						aArrayMain[nMarcacoes,nUsado] := "I"
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ORDEM" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"ORDEM"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"TURNO" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"TURNO"  )
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"PAPONTA" , .T. )
						aArrayMain[nMarcacoes,nUsado] := cPerAponta
					// Inicializando o campo do WalkThru
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"ALI_WT" , .T. )
						aArrayMain[nMarcacoes,nUsado] := cAlias
					ElseIf lPort1510 .and. fContemStr(aHeader[ nField , 02 ] , cPrefix+"TPMCREP" , .T. )
						aArrayMain[nMarcacoes,nUsado] := Space(1)
					ElseIf lPort1510 .and. fContemStr(aHeader[ nField , 02 ] , cPrefix+"TIPOREG" , .T. )
						aArrayMain[nMarcacoes,nUsado] := "I"
					ElseIf lPort1510 .and. fContemStr(aHeader[ nField , 02 ] , cPrefix+"MOTIVRG" , .T. )
						aArrayMain[nMarcacoes,nUsado] := Space(100)
					Else
						aArrayMain[nMarcacoes,nUsado] := CriaVar( aHeader[ nField , 02 ], .T. )
					EndIF
				ElseIF ( aHeader[ nField , 08 ] == "N" )
					If lPort1510 .and. fContemStr(aHeader[ nField , 02 ] , cPrefix+"NUMREP" , .T. )
						aArrayMain[nMarcacoes,nUsado] := 0
					// Inicializando o campo do WalkThru
					ElseIF fContemStr( aHeader[ nField , 02 ] , cPrefix+"REC_WT" , .T. )
						aArrayMain[nMarcacoes,nUsado] := 0
					Else
						aArrayMain[nMarcacoes,nUsado] := CriaVar( aHeader[ nField , 02 ], .T. )
					Endif
				ElseIF ( aHeader[ nField , 08 ] == "D" )
					IF lPort1510 .and. fContemStr( aHeader[ nField , 02 ] , cPrefix+"DATAAPO" , .T. )
						aArrayMain[nMarcacoes,nUsado] := CalendRetCpo( cPrefix+"DATAAPO"  ,.F., olBox)
					Else
						aArrayMain[nMarcacoes,nUsado] :=CriaVar( aHeader[ nField , 02 ], .T. )
					EndIf
				Else
					aArrayMain[nMarcacoes,nUsado] := .F.
				EndIF
			Next nField
			IF nOpcX != 2 .and. nOpcX != 5 //Visualizacao ou Exclusao
				aArrayMain[nMarcacoes,nUsado+1] := .F.
			EndIF
			nMarcacoes := 0
		EndIF
	EndIF

End Sequence

RestArea( aArea )

Return( nMarcacoes )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230LinOk	³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida a Linha Digitada na GetDados                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230LinOk                                     			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³loListBox - Identifica se a Validacao esta sendo Feita `a par³
³          ³            tir do ListBox.                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230LinOk(oGet,loListBox)

Local cHelp			:= ""
Local cOrdem		:= ""
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8"  ) ) + "_" )
Local cMotivo		:= ""
Local nOrdem		:= 0
Local lRet			:= .T.
Local lMcIgual		:= ( SuperGetMv( "MV_MCIGUAL" , NIL , "N" , cFilAnt ) == "S" )
Local lMotivo		:= .F.
Local nPosData		:= GdFieldPos(cPrefix+"DATA")
Local nPosHora		:= GdFieldPos(cPrefix+"HORA")
Local nPosOrdem 	:= GdFieldPos(cPrefix+"ORDEM")
Local nPosCC		:= GdFieldPos(cPrefix+"CC")
Local nPosRec		:= GdFieldPos(cPrefix+"REC_WT")
Local nCount		:= 0
Local nX			:= 0
Local nFornX		:= 0
Local nY			:= 0
Local nFornY		:= 0
Local nTipoReg      := 0
Local nMotiVrg		:= 0
Local nTpmCrep      := 0
Local nPosDataApo	:= 0
Local nTamP8Ordem	:= ( TamSx3("P8_ORDEM")[1] )

loListBox := IF( loListBox == NIL .or. ValType( loListBox ) != "L" , .F. , loListBox )

//Se registro for original, nao permite alteracao
If lPort1510
	nTipoReg    := GdFieldPos( "P8_TIPOREG" )
	nMotiVrg	:= GdFieldPos( "P8_MOTIVRG" )
	nTpmCrep	:= GdFieldPos(cPrefix+"TPMCREP" )
	nPosDataApo	:= GdFieldPos( "P8_DATAAPO" )
	If ( nX := aScan( aArrayMain , { |x| x[nPosRec] == aCols[ n , nPosRec ] } ) ) > 0
	   If ( !( aCols[ n , nPosData ] == aArrayMain [nX , nPosData] ) .or. !( aCols[ n , nPosHora ] == aArrayMain [nX , nPosHora] ) )
			If aCols[n,nTipoReg] == "O"
				MsgAlert( STR0174 , STR0044 ) //"Marcacões originais não podem ser alteradas" ### Atenção
				aCols[ n , nPosHora ] := aArrayMain [nX , nPosHora]
				lRet := .F.
				Return(lRet)
			EndIf
		EndIf
	EndIf
EndIf

IF !aCols[ n , nSvUsado ]

	Begin Sequence

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Na Validacao do aCols, o Primeiro Elemento sempre estara    OK³
			³Quando for Montado Vazio e Quando Estiver Sendo Validado  Pelo³
			³Objeto ListBox.                                               ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF Len( aCols ) == 1 .and. Empty( aCols[ n , nPosData ] ) .and. loListBox
				Break
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³So verifica Itens Duplicados se MV_MCIGUAL nao for igual a "S"³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !lMcIgual
				aEval( aCols , { |x,y| IF( x[ nPosData  ] == aCols[ n , nPosData  ] .and.;
									  	   x[ nPosHora  ] == aCols[ n , nPosHora  ] .and.;
										   x[ nPosOrdem ] == aCols[ n , nPosOrdem ] .and.;
									  	   !x[nSvUsado] .and. y != n,;
										   nCount++,;
										   NIL;
									      );
							    };
					  )
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se Existem Itens Duplicados no aCols e se a Data, Cen³
			³tro de Custo ou Ordem Estao Vazios.                           ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !( lRet := ( nCount == 0 .and. !Empty( aCols[ n , nPosData  ] ) ;
				   						   .and. !Empty( aCols[ n , nPosCC    ] ) ;
									 	   .and. !Empty( aCols[ n , nPosOrdem ] ) ;
						   );
				 )
				IF !lMcIgual .and. nCount > 0
					cHelp := STR0025	//"Data e Hora Duplicadas"
				ElseIF Empty( aCols[ n , nPosData  ] )
					cHelp := STR0026	//"Data N„o Foi Preenchida"
				ElseIF Empty( aCols[ n , nPosCC    ] )
					cHelp := STR0027	//"Centro de Custo N„o Foi Preenchido"
				ElseIF Empty( aCols[ n , nPosOrdem ] )
					cHelp := STR0028	//"Ordem N„o Foi Preenchida"
			    EndIF
				Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se a Data Digitada Consta no Calendario de Marcacoes³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If lRet .and. !( lRet := (aListBox[1][CALEND_ELEM_DATA] - 1 <= aCols[n,nPosData] .AND.  aListBox[Len(aListBox)][CALEND_ELEM_DATA] + 1 >= aCols[n,nPosData] ))
				cHelp := STR0178 	//"Data inválida para o período em questão."
				Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se a Ordem Digitada Consta no Calendario de Marcacoes³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF lRet .and. !( lRet := !( aScan( aListBox , { |x| x[CALEND_ELEM_ORDEM] == aCols[n,nPosOrdem] } ) == 0 ) )
				cHelp := STR0029	//"Ordem N„o Existe na Tabela"
				Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se o Item digitado nao Existe nos Outros Dias.  Neste³
			³Caso a Busca e' feita no aArrayMain que contem as Marcacoes de³
			³Todos os Dias apenas quando o Paramentro MV_MCIGUAL for   dife³
			³rente de "S"												   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !lMcIgual .and. lRet
				nFornX := Len( aArrayMain )
				For nX := 1 To nFornX
					IF nX > nFornX
						Exit
					EndIF
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica se a Marcacao ja Existe em Outro Dia.                ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					IF ( aArrayMain[ nX , nPosData  ] == aCols[ n , nPosData  ] .and.;
						 aArrayMain[ nX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
						 aArrayMain[ nX , nPosOrdem ] == aCols[ n , nPosOrdem ] .and.;
						 !aArrayMain[ nX , nSvUsado ]  ) .or.;
					   ( aArrayMain[ nFornX , nPosData  ] == aCols[ n , nPosData  ] .and.;
					     aArrayMain[ nFornX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
					     aArrayMain[ nFornX , nPosOrdem ] == aCols[ n , nPosOrdem ] .and.;
					     !aArrayMain[ nFornX , nSvUsado ] )
						nFornY := Len( aElem )
						/*
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Se for um Elemento que ja' Existia e Foi Alterado.            ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						IF n <= nFornY
							For nY := 1 To nFornY
								IF n == nY
									IF aArrayMain[ nX , nPosData  ] == aCols[ n , nPosData  ] .and.;
									   aArrayMain[ nX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
									   aArrayMain[ nX , nPosOrdem ] == aCols[ n , nPosOrdem ] .and.;
									   aElem[ nY ] != nX
										lRet := .F.
										Exit
									ElseIF aArrayMain[ nFornX , nPosData  ] == aCols[ n , nPosData  ] .and.;
									       aArrayMain[ nFornX , nPosHora  ] == aCols[ n , nPosHora  ] .and.;
									       aArrayMain[ nFornX , nPosOrdem ] == aCols[ n , nPosOrdem ] .and.;
									   	   aElem[ nY ] != nFornX
											lRet := .F.
											cHelp := STR0030	//"J  Existe Marca‡„o Cadastrada Para o Dia"
											Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
											Exit
									EndIF
								EndIF
							Next nY
							IF !lRet
								Exit
							EndIF
						Else
							/*
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Neste Caso e' um Novo Elemento e esta' Inconsistente          ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
							lRet := .F.
							Exit
						EndIF
					EndIF
					--nFornX
				Next nX
				IF !lRet
					cHelp := STR0030	//"J  Existe Marca‡„o Cadastrada Para o Dia"
					Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
				EndIF
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se a Marcacao e Menor que a Ultima Marcacao do Dia An³
			³terior e Maior que a Primeira Marcacao do Dia Posterior.      ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
            IF lRet
				nOrdem := Val( aCols[ n , nPosOrdem ] )
				If nOrdem > 1
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica a Ultima Marcacao do Dia Anterior.          		   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					cOrdem := StrZero( (nOrdem - 1) , nTamP8Ordem )
					IF ( nX := aScan( aArrayMain , { |x| x[nPosOrdem] == cOrdem } ) ) > 0
						nFornX := Len( aArrayMain )
						For nX := nX To nFornX
							IF ( aArrayMain[ nX , nPosOrdem ] != cOrdem )
								Exit
							EndIF
						Next nX
						IF ( ( --nX <= nFornX ) .and. nX > 0 )
							IF DataHora2Str( aCols[ n , nPosData ] , aCols[ n , nPosHora ] ) < ;
							   DataHora2Str( aArrayMain[ nX , nPosData ] , aArrayMain[ nX , nPosHora ] )
								lRet := .F.
								cHelp := STR0053	//"Marca‡„o Menor que a £ltima Marca‡„o do Dia Anterior"
								Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
							EndIF
						EndIF
					EndIF
				Endif
        		/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica a Primeira Marcacao do Dia Posterior.                ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF lRet
					If !(nOrdem == Val(aArrayMain[Len(aArrayMain),nPosOrdem]))
						cOrdem := StrZero( (nOrdem + 1)  , nTamP8Ordem )
						IF ( nX := aScan( aArrayMain , { |x| x[nPosOrdem] == cOrdem } ) ) > 0
							IF DataHora2Str( aCols[ n , nPosData ] , aCols[ n , nPosHora ] ) > ;
							   DataHora2Str( aArrayMain[ nX , nPosData ] , aArrayMain[ nX , nPosHora ] )
								lRet := .F.
								cHelp := STR0054	//"Marca‡„o Maior que a primeira Marca‡„o do Pr¢ximo Dia"
								Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
							EndIF
						EndIF
					Endif
				EndIF
            EndIF

			If lRet
				If lPort1510
					If ( nX := aScan( aArrayMain , { |x| x[nPosRec] == aCols[ n , nPosRec ] } ) ) > 0
					   	If !fCompArray( aCols[ n ] , aArrayMain [nX] )
							lMotivo := .T.
						EndIf
					Else
						lMotivo := .T.
					EndIf
					If ( ( ( aCols[ n , nTipoReg ] == "I" ) .or. ( aCols[ n , nTpmCrep ] == "D" ) ) .and. lMotivo .and. !( Empty(aCols[ n , nPosData ]) ) )
						aCols[ n , nTpmCrep ] := Space(1)
						aCols[ n , nTipoReg ] := "I"
						IF ( Empty(aCols[n,nMotiVrg]) )
							MsgAlert( STR0175 , STR0044 ) //"Campo motivo deve ser preenchido para todas as marcações informadas ou desconsideradas"###Atenção
							Return(.F.)
						EndIf
					EndIf
				EndIf
			EndIf

	End Sequence

EndIF

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230TudOk	³ Autor ³Marinaldo de Jesus    ³ Data ³20/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida Todos os Itens da GetDados                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230TudOk()                                   			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³VOID                                                	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230TudOk(oGet)

Local aOrdImpar		:= {}
Local aMainAux		:= aClone(aArrayMain)
Local aElemAux		:= aClone(aElem)
Local aColsAux		:= aClone(aCols)
Local cHelp			:= ""
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8"  ) ) + "_" )
Local lRet			:= .T.
Local lMsgMcImpar	:= ( SuperGetMv( "MV_MSGMIMP" , NIL , "N" , cFilAnt ) == "S" )
Local nCount		:= 0
Local nPosData		:= GdFieldPos(cPrefix+"DATA")
Local nPosHora		:= GdFieldPos(cPrefix+"HORA")
Local nPosRec		:= GdFieldPos(cPrefix+"REC_WT")
Local nX			:= 0
Local nForX			:= 0
Local nTipoReg      := 0
Local nMotiVrg		:= 0
Local nTpmCrep      := 0
Local nPosDataApo	:= 0

If lPort1510
	nTipoReg    := GdFieldPos( "P8_TIPOREG" )
	nMotiVrg	:= GdFieldPos( "P8_MOTIVRG" )
	nTpmCrep	:= GdFieldPos(cPrefix+"TPMCREP" )
	nPosDataApo := GdFieldPos( "P8_DATAAPO" )

	nForX := Len(aCols)
	For nX := 1 to nForX
		IF ( !aCols[nX,nSvUsado] .and. ( aCols[nX,nTpmCrep] == "D" .or. aCols[nX,nTipoReg] == "I" ) .and. ( Empty(aCols[nX,nMotiVrg]) ) .and. !( Empty(aCols[nX,nPosData]) ) )
			MsgAlert( STR0175 , STR0044 ) //"Campo motivo deve ser preenchido para todas as marcações informadas ou desconsideradas" ### Atenção
			Return(.F.)
		EndIf
	Next
EndIf
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Se desejar Mostrar Aviso de Marcacoes Impares                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( lMsgMcImpar )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se Existem Marcacoes Impares ( no Dia )              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aEval( aCols , { |x| IF( !Empty(x[nPosData]) .and. !x[nSvUsado],;
							   nCount++,;
							   NIL;
						      );
				    };
		  )
	IF ( ( nCount % 2 ) != 0 )
		cHelp := STR0052	//"Existem Marca‡”es Impares para o Dia"
		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
		nCount := 0
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se Existem Marcacoes Impares (Todos os Dias)         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aEval( aArrayMain, { |x| IF( !Empty(x[nPosData]) .and. !x[nSvUsado],;
							   nCount++,;
							   NIL;
						      );
				    };
		  )
	IF ( ( nCount % 2 ) != 0 )
		cHelp := STR0040	//"Existe(m) Dia(s) com Marca‡”es Impares"
		Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
	EndIF

	aArrayMain 	:= aClone(aMainAux)
	aElem		:= aClone(aElemAux)
	aCols		:= aClone(aColsAux)

EndIF

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230Grava  ³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Grava Informacoes no SP8 ou SPG                              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Grava(aArrayMain,aRecno,aHeader,nOpcX)					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aArray  -> Array com as Informacoes a serem Gravadas 	     ³
³          ³aRecno  -> Registros Existentes no SP8 ou SPG         		 ³
³          ³aHeader -> Array com os Campos                      		 ³
³          ³nOpcX   -> Tipo de Operacao: 3 = Inclusao , 4 = Alteracao	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230Grava(aArrayMain,aRecno,aHeader,nOpcX)

Local aArea			:= GetArea()
Local cAlias		:= IF( lPona240 , "SPG" , "SP8" )
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cChave		:= ""
Local cMsgErr		:= ""
Local cSpaceIdOrg   := ""
Local nArray		:= 0
Local nForArray		:= Len( aArrayMain )
Local nRecno		:= 0
Local nForRecno		:= Len( aRecno )
Local nHeader		:= 0
Local nForHeader	:= Len( aHeader )
Local nPosData		:= GdFieldPos(cPrefix+"DATA")
Local nPosHora		:= GdFieldPos(cPrefix+"HORA")
Local lAppend		:= .F.
Local lAlterado		:= .F.

(cAlias)->( dbSetOrder( RetOrdem(cAlias) ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Deleta os Registros de Marcacoes Automaticas que foram  recar³
³ regadas													   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
PonDelRecnos( cAlias , aRecsMarcAutDele )

If lPort1510
	nTipoReg    := GdFieldPos( cPrefix + "TIPOREG"	, aHeader )
	nMotiVrg	:= GdFieldPos( cPrefix + "MOTIVRG"	, aHeader )
	cSpaceIdOrg := Space(GetSx3Cache( "P8_IDORG" , "X3_TAMANHO" ) )
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Grava as Marcacoes                                            ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF nOpcX == 3 // Inclusao
	For nArray := 1 To nForArray
		If !( EMPTY(aArrayMain[nArray , 1]) )
			IF !aArrayMain[ nArray , nSvUsado ] //Nao Grava Registros Deletados
				cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosData ] ) +  Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
				lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
				IF !RecLock(cAlias,!lAppend)
					Loop
				EndIF
				(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
				(cAlias)->(&(cPrefix+"MAT"))	:= cMat
				For nHeader := 1 To nForHeader
					IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
						// Grava
						If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT"
							(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						ElseIf aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
							(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
						ElseIf lPort1510 .and. aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
							(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
						ElseIf lPort1510 .and. aHeader[ nHeader , 2 ] == cPrefix+"IDORG"
							(cAlias)->(&(cPrefix+"IDORG"  ))	:= cSpaceIdOrg
						Else

							If aHeader[ nHeader , 2 ] == cPrefix+"DATAAPO" .And. Empty(aArrayMain[ nArray , nHeader ])
								// - Caso o campo DATAAPO estiver sem conteúdo
								// - atribui o valor da data P8_DATA.
								aArrayMain[ nArray , nHeader ] := aArrayMain[ nArray , 1 ]
							EndIf

							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
						EndIf
					EndIF
				Next nHeader
				( cAlias )->( MsUnLock() )
			EndIF
		EndIf
	Next nArray
ElseIF nOpcX == 4 //Alteracao
	IF nForRecno == nForArray
		For nArray := 1 To nForArray
			If !( EMPTY(aArrayMain[nArray , 1]) )
							IF !( lAppend := Empty( aRecno[ nArray ] ) )
					(cAlias)->( dbGoto( aRecno[ nArray ] ) )
				EndIF
				IF !aArrayMain[ nArray , nSvUsado ]
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))	:= cMat
					For nHeader := 1 To nForHeader
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							// verifica se exite alguma alterção do apontamento
							If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
								Loop
							ElseIf lPort1510 .and. aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
								Loop
							ElseIF aArrayMain[nArray,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
								lAlterado = .T.
							EndIf

							If aHeader[ nHeader , 2 ] == cPrefix+"DATAAPO" .And. Empty(aArrayMain[ nArray , nHeader ])
								// - Caso o campo DATAAPO estiver sem conteúdo
								// - atribui o valor da data P8_DATA.
								aArrayMain[ nArray , nHeader ] := aArrayMain[ nArray , 1 ]
							EndIf

							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
						EndIF
					Next nHeader
					// Grava Quando o registro for alterado
					If lAlterado .And. __lCpoDataAlt .And. __lCpoUsuaAlt
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					EndIf
					If lPort1510 .and. lAlterado
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
					EndIf
					lAlterado := .F.
					( cAlias )->( MsUnLock() )
				ElseIF !lAppend
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					If lPort1510 .and. aArrayMain[nArray,nTipoReg] == "O"
						(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
						(cAlias)->(&(cPrefix+"MOTIVRG"))	:= (cAlias)->( FieldPut( FieldPos ( aHeader[ nMotiVrg , 2 ] ) , aArrayMain[ nArray , nMotiVrg ] ) )
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					Else
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
					EndIf
					( cAlias )->( MsUnLock() )
				EndIF
			EndIf
		Next nArray
	ElseIF nForRecno < nForArray
		For nRecno := 1 To nForRecno
			If !( EMPTY(aArrayMain[nRecno , 1]) )
				IF !( lAppend := Empty( aRecno[ nRecno ] ) )
					(cAlias)->( dbGoto( aRecno[ nRecno ] ) )
				EndIF
				IF !aArrayMain[ nRecno , nSvUsado ]
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))	:= cMat
					For nHeader := 1 To nForHeader
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							// verifica se exite alguma alterção do apontamento
							If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
								Loop
							ElseIf lPort1510 .and. aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
								Loop
							ElseIF aArrayMain[nRecno,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
								lAlterado = .T.
							EndIf

							If aHeader[ nHeader, 2 ] == cPrefix + "DATAAPO" .And. Empty(aArrayMain[ nRecno, nHeader ])
								// - Caso o campo DATAAPO estiver sem conteúdo
								// - atribui o valor da data P8_DATA.
								aArrayMain[ nRecno, nHeader ] := aArrayMain[ nRecno, 1 ]
							EndIf

							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nRecno , nHeader ] ) )
						EndIF
					Next nHeader
					// Grava Quando o registro for alterado
					If lAlterado .And. __lCpoDataAlt .And. __lCpoUsuaAlt
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					EndIf
					If lPort1510 .and. lAlterado
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
					EndIf
					lAlterado := .F.
				ElseIF !lAppend
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					If lPort1510 .and. aArrayMain[nRecno,nTipoReg] == "O"
						(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
						(cAlias)->(&(cPrefix+"MOTIVRG"))	:= (cAlias)->( FieldPut( FieldPos ( aHeader[ nMotiVrg , 2 ] ) , aArrayMain[ nRecno , nMotiVrg ] ) )
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					Else
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
					EndIf
				EndIF
				( cAlias )->( MsUnLock() )
			EndIf
		Next nForRecno
        For nArray := nRecno To nForArray
			If !( EMPTY(aArrayMain[nRecno , 1]) )
				IF !aArrayMain[ nArray , nSvUsado ] //Nao Grava Registros Deletados
					cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosData ] ) +  Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
					lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
					IF !RecLock(cAlias,!lAppend)
						Loop
					EndIF
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))	:= cMat
					For nHeader := 1 To nForHeader
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							// verifica se exite alguma alterção do apontamento
							If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
								Loop
							ElseIf lPort1510 .and. aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
								Loop
							ElseIF aArrayMain[nArray,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
								lAlterado = .T.
							EndIf

							If aHeader[ nHeader , 2 ] == cPrefix+"DATAAPO" .And. Empty(aArrayMain[ nArray , nHeader ])
								// - Caso o campo DATAAPO estiver sem conteúdo
								// - atribui o valor da data P8_DATA.
								aArrayMain[ nArray , nHeader ] := aArrayMain[ nArray , 1 ]
							EndIf

							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
						EndIF
					Next nHeader
					// Grava Quando o registro for alterado
					If lAlterado .And. __lCpoDataAlt .And. __lCpoUsuaAlt
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					EndIf
					If lPort1510 .and. lAlterado
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
					EndIf
					lAlterado := .F.
					( cAlias )->( MsUnLock() )
				EndIF
			EndIf
		Next nArray
	EndIF
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura os Dados de Entrada                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aArea )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230Dele   ³ Autor ³Marinaldo de Jesus    ³ Data ³12/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deleta as Marcacoes do SP8 ou SPG                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Dele( aRecno )                                   		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aRecno -> Array com os Registros a Serem Deletados		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230Dele( aRecno )
Local aRecnoAux		:= {}
Local cAlias 		:= IF( lPona240 , "SPG" , "SP8" )
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cFilMat		:= ( cFil + cMat )
Local lSPCDelInfo	:= .F.
Local nRecno 		:= 0

//"Excluir, alˆm dos apontamentos calculados pelo sistema, os apontamentos informados pelo usu rio?"
IF ( cAlias == "SP8" )
	IF ( SPC->( dbSeek( cFilMat , .F. ) ) )
		lSPCDelInfo := MsgNoYes( OemToAnsi( STR0079 ) , cCadastro )
	EndIF
EndIF

CursorWait()
	Begin Transaction
		IF ( cAlias == "SP8" )
			IF ( SPC->( MsSeek( cFilMat , .F. ) ) )
				SP8DelSPC( dPerIni , dPerFim , cFil , cMat , lSPCDelInfo )
			EndIF
		EndIF
		If lPort1510
			//Sera excluido apenas os registros que nao forem originais
			For nRecno := 1 To Len(aRecno)
				(cAlias)->( dbGoto( aRecno[ nRecno ] ) )
				If !(cAlias)->(P8_TIPOREG) == "O"
					aAdd(aRecnoAux , aRecno[nRecno])
				EndIf
			Next nRecno
			aRecno := aClone(aRecnoAux)
		EndIf
		PonDelRecnos( cAlias , aRecno )
	End Transaction
CursorArrow()

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230GetaCols³Autor ³Marinaldo de Jesus    ³ Data ³23/05/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Monta o aCols Dia a Dia de Acordo com a Ordem do   Calendario³
³          ³de Marcacoes e Salva as Alteracoes Efetuadas em aArrayMain.  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230GetaCols()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230GetaCols(	aCols		,; //Array da GetDados
								aArrayMain	,; //Array com Todas as Informacoes de Marcacoes
								aNotFields	,; //Campos Que Nao Constarao no aHeader
								oDlg		,; //Objeto de Dialogo
								oGet		,; //Objeto GetDados
								nOpcX		,; //Opcao do aRotina
								lTudoOk 	 ; //Se montado a partir de TudoOk
							  )

Local aOrdem	:= {}
Local cPrefix	:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local cOrdem	:= CalendRetCpo( cPrefix+"ORDEM" )
Local nX		:= 0
Local nLenX 	:= 0
Local nY		:= 0
Local nLenY		:= 0
Local nPos		:= 0
Local nPosOrdem	:= 0
Local nPosData	:= 0
Local nPosHora	:= 0
Local nPosFlag	:= 0
Local nPosApon	:= 0
Local nTpmCrep	:= 0
Local lManutenc	:= .F.
Local lPrimeira := ( PCount() == 0 )

Static aColsStatic

DEFAULT nOpcX	:= 3
DEFAULT lTudoOk := .F.

IF lPrimeira
	aColsStatic := NIL
Else
	nLenX 		:= Len( aArrayMain )
	nPosOrdem	:= GdFieldPos(cPrefix+"ORDEM")
	nPosData	:= GdFieldPos(cPrefix+"DATA")
	nPosHora	:= GdFieldPos(cPrefix+"HORA")
	nPosFlag	:= GdFieldPos(cPrefix+"FLAG")
	nPosApon	:= GdFieldPos(cPrefix+"APONTA")
	IF aColsStatic != NIL .and. !fCompArray( aColsStatic , aCols )
		nLenY := Len( aElem )
		For nY := 1 To nLenY
			IF !fCompArray( aArrayMain[ aElem[ nY ] ] , aCols[ nY ] )
				lManutenc := .T.
				aArrayMain[ aElem[ nY ] ] := aClone( aCols[ nY ] )
				aAdd( aOrdem , aCols[ nY , nPosOrdem ] )
				aArrayMain[ aElem[ nY ] , nPosFlag ] := "M"
				aArrayMain[ aElem[ nY ] , nPosApon ] := "N"
			EndIF
		Next nY

		IF Len( aCols ) > Len( aColsStatic )
			IF nLenX == 1  .and. Empty( aArrayMain[ nLenX , nPosData ] )
				aArrayMain := {}
			EndIF
			nLenY := Len( aCols )
			For nY := nY To nLenY
				IF !Empty( aCols[ nY , nPosData ] ) .and. !aCols[nY , nSvUsado ]
					aAdd( aArrayMain , aClone( aCols[ nY ] ) )
				EndIF
			Next nY
		//ElseIF nLenY == 0 .and.( ( ( nLenY := Len( aCols ) ) == Len( aColsStatic ) ) .and. nLenY == 1  )
		ElseIF  ( nLenY := Len( aCols )) == Len( aColsStatic )

			If (nLenY == 1)
				IF Len( aArrayMain ) == (nLenY) //.AND. //!Empty(aElem)
					aArrayMain[ nLenY ] := aClone( aCols[ nLenY ] )
				//Else
				//	aAdd( aArrayMain , aClone( aCols[ nLenY ] ) )
				EndIF
			Endif

		EndIF
		If !lPort1510 //-- Se portaria estiver ativa nao faz sort pois deve ser mantida a ordem para que registros originais nao sejam apagados
			aSort( aArrayMain ,,, { |x,y|;
									 DataHora2Str(x[nPosData],x[nPosHora])+x[nPosOrdem];
											 <;
									 DataHora2Str(y[nPosData],y[nPosHora])+y[nPosOrdem];
							   };
				  )
		EndIf
		IF lManutenc
			nLenY := Len( aOrdem )
			nLenX := Len( aArrayMain )
			For nY := 1 To nLenY
				IF ( nX := aScan( aArrayMain , { |x| x[ nPosOrdem ] == aOrdem[ nY ] } ) ) > 0
					For nX := nX To nLenX
						IF aArrayMain[ nX , nPosOrdem ] == aOrdem[ nY ]
							aArrayMain[ nX , nPosApon ] := "N"
						Else
							Exit
						EndIF
					Next nX
				EndIF
			Next nY
			aOrdem		:= {}
			lManutenc	:= .F.
		EndIF
	EndIF

	nSvnAt	:= oLBox:nAt

	If lPort1510
		nTpmCrep	:= GdFieldPos(cPrefix+"TPMCREP" )
	EndIf

	IF !lTudoOk

		aCols  := {} ; aElem := {}
		IF ( nX := aScan( aArrayMain , { |x| x[ nPosOrdem ] == cOrdem } ) ) > 0
			nLenX := Len( aArrayMain )
			For nX := nX To nLenX
				IF aArrayMain[ nX , nPosOrdem ] == cOrdem
					aAdd( aCols , aClone( aArrayMain[ nX ] ) )
					aAdd( aElem, nX  )
					//Ajusta Sequencia e tipo de marcacao de acordo com a hora de entrada.
					If lPort1510
						nPos := Len(aCols)
						aCols[ nPos , nTpmCrep ] := Space(1)
					EndIf
				EndIF
			Next nX
		Else
			Pn230Acols(@aCols,,aNotFields,nOpcX,.T.)
		EndIF
		aColsStatic := aClone( aCols )

		n := 1
		oGet:ForceRefresh()
		oGet:oBrowse:nAt := n
		oGet:oBrowse:Refresh()
		oGet:Refresh()
		oDlg:Refresh()

	EndIF

EndIF

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³CalendRetCpo³ Autor ³Marinaldo de Jesus    ³ Data ³23/05/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna o Conteudo da Tabela de Horario conforme Campo       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³CalendRetCpo( cCampo , lOrdem , oListBox, cPref )			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cCampo  -> Campo a ser verificado                 		     ³
³          ³lOrdem  -> .T. Retorna a coluna da posicao do Campo no array ³
³          ³           .F. Retorna o conteudo do campo no array          ³
³          ³oListBox->  Objeto List que retornara a linha do conteudo    ³
³          ³cPref   ->  Prefixo do Alias a Ser Pesquisado                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Inicializador Padrao do Campo P8_ORDEM                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function CalendRetCpo( cCampo , lOrdem , oListBox , cPref  )

Local cPrefix	:= IF( cPref == NIL , IF( ValType( cCampo ) == "C" .and. SubStr( cCampo , 1 , 2 ) == "P8" , "P8" , "PG" ) , cPref )
Local cAlias	:= IF( ( cPrefix == "P8" ) , "SP8" , If (( cPrefix == "PG" ),"SPG", "SPT") )
Local lObject	:= .F.
Local lNoInit	:= If( (cPrefix <> "PT" ),( ( Type( "lP8PGIniCa" ) <> "L" ) .or. ( ( Type( "lP8PGIniCa" ) == "L" ) .and. !( lP8PGIniCa ) ) ), .F.)
Local uRet

DEFAULT lOrdem := .F.

Begin Sequence

	IF ( lNoInit )
		Break
	EndIF

	IF ( ( Type( "lPona240" ) != "U" .and. lPona240 )  .or. ( Type( "lPona180" ) != "U" .and. lPona180 ) )
		cAlias	:= "SPG"
		cPrefix	:= ( PrefixoCpo( cAlias ) + "_" )
	EndIF

	cPrefix += IF( !( SubStr( Alltrim( cPrefix ) , -1 ) == "_" ) , "_" , "" )

	IF !( lObject := ( Type( "oLBox" ) == "O" ) )
		IF ( lObject := ( Type( "oListBox" ) == "O" ) )
			oLBox := oListBox
		EndIF
	EndIF

	IF lObject
		IF fContemStr( cCampo , "OBJETO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_BITMAP
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_BITMAP]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"DATA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DATA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DATA]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"DATAAPO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DATA_APO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DATA_APO]
			EndIF
		ElseIF fContemStr( cCampo , "DIASEMANA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DIA_SEMANA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DIA_SEMANA]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"HORA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORA
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORA] )
		    EndIF
		ElseIF fContemStr( cCampo , "TIPOMARC" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_TIPO_MARCACAO
			Else
				uRet := Substr( aListBox[oLBox:nAt,CALEND_ELEM_TIPO_MARCACAO] , 1 , 2 )
		    EndIF
		ElseIF fContemStr( cCampo , cPrefix+"TURNO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_TURNO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_TURNO] ) , SRA->RA_TNOTRAB , aListBox[oLBox:nAt,CALEND_ELEM_TURNO] )
			EndIF
		ElseIF fContemStr( cCampo , "SEQUENCIA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_SEQUENCIA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_SEQUENCIA]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"ORDEM" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_ORDEM
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_ORDEM]
			EndIF
		ElseIF fContemStr( cCampo , "REGRA" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_REGRA
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_REGRA]
			EndIF
		ElseIF fContemStr( cCampo , cPrefix+"CC" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_CENTRO_DE_CUSTO
			Else
				uRet := IF( Empty( aListBox[oLBox:nAt,CALEND_ELEM_CENTRO_DE_CUSTO] ) , SRA->RA_CC , aListBox[oLBox:nAt,CALEND_ELEM_CENTRO_DE_CUSTO] )
			EndIF
		ElseIF fContemStr( cCampo , "DATALIMITE" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DATA_LIMITE
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DATA_LIMITE]
			EndIF
		ElseIF fContemStr( cCampo , "HORALIMITE" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORA_LIMITE
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORA_LIMITE] )
			EndIF
		ElseIF fContemStr( cCampo , "HORASTRAB" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORAS_TRABALHADAS
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORAS_TRABALHADAS] )
			EndIF
		ElseIF fContemStr( cCampo , "HORASINTE" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_HORAS_INTERVALO
			Else
				uRet := Val( aListBox[oLBox:nAt,CALEND_ELEM_HORAS_INTERVALO] )
			EndIF
		ElseIF fContemStr( cCampo , "EXCECAO" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_EXCECAO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_EXCECAO]
			EndIF
		ElseIF fContemStr( cCampo , "AFASTACOD" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_AFASTADO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_AFASTADO]
			EndIF
		ElseIF fContemStr( cCampo , "AFASTADES" , .T. )
			IF lOrdem
				uRet := CALEND_ELEM_DESC_AFASTAMENTO
			Else
				uRet := aListBox[oLBox:nAt,CALEND_ELEM_DESC_AFMENTO]
			EndIF
		EndIF
	Else
		IF !lOrdem
			IF fContemStr( cCampo , cPrefix+"DATA" , .T. )
				uRet := dDataBase
			ElseIF fContemStr( cCampo , cPrefix+"HORA" , .T. )
				uRet := 0
			ElseIF fContemStr( cCampo , cPrefix+"TURNO" , .T. )
				uRet := SRA->RA_TNOTRAB
			ElseIF fContemStr( cCampo , cPrefix+"ORDEM" , .T. )
				uRet := ""
			ElseIF fContemStr( cCampo , cPrefix+"CC" , .T. )
				uRet := SRA->RA_CC
			EndIF
		Else
			uRet := CALEND_ELEM_ORDEM
		EndIF
	EndIF

End Sequence

IF ( lNoInit )
	IF ( ( cAlias )->( FieldPos( cCampo ) ) > 0 )
		PutFileInEof( cAlias )
		uRet := ( cAlias )->( FieldGet( FieldPos ( cCampo ) ) )
	ElseIF ( Type( ReadVar() ) <> "U" )
		uRet := &( ReadVar() )
	EndIF
EndIF

Return( uRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230BitMaps³ Autor ³Marinaldo de Jesus    ³ Data ³18/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Permuta de BitMaps                                           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230BitMaps												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³VOID                                               		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³oBmp                                                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230BitMaps( aBmp , cOrdem , cTipoDia , cExcecao , lFeriado , cTrabFer )

Local oBmp

Static cStaticOrdemBmp

IF ( PCount() == 0 )
	cStaticOrdemBmp := NIL
ElseIF cStaticOrdemBmp == NIL .or. cOrdem != cStaticOrdemBmp
	cTipoDia := IF( lFeriado .and. cTrabFer != "S" , "F" , cTipoDia )
	cStaticOrdemBmp := cOrdem
	IF cExcecao != "E"
		IF cTipoDia == "S"
			oBmp := aBmp[01]
		ElseIF cTipoDia == "D"
			oBmp := aBmp[02]
    	ElseIF cTipoDia == "N"
 	   		oBmp := aBmp[03]
    	ElseIF cTipoDia == "C"
	    	oBmp := aBmp[04]
		ElseIF cTipoDia == "F"
			oBmp := aBmp[05]
		EndIF
	ElseIF cExcecao == "E"
		IF cTipoDia == "S"
			oBmp := aBmp[06]
		ElseIF cTipoDia == "D"
			oBmp := aBmp[07]
    	ElseIF cTipoDia == "N"
 	   		oBmp := aBmp[08]
    	ElseIF cTipoDia == "C"
	    	oBmp := aBmp[09]
		ElseIF cTipoDia == "F"
			oBmp := aBmp[10]
		EndIF
	EndIF
EndIF

Return( oBmp )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230GeraMarc³ Autor ³Marinaldo de Jesus   ³ Data ³19/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Gerar Valores no aCols conforme o ListBox                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230GeraMarc(oDlg,oGet,lTodas,nMinMax,lDlgRefresh)			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pona230/280                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn230GeraMarc( oDlg , oGet , lTodas , nMinMax , lDlgRefresh )

Local aColsDel		:= {}
Local aColsAux		:= {}
Local cHelp			:= ""
Local cOrdem		:= ""
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local cTipo			:= ""
Local cMotivo		:= ""
Local dNewData		:= Ctod("//")
Local lLinhaOk		:= .T.
Local lInterv		:= .F.
Local nInterv		:= 0
Local lSumIntAleat  := SuperGetMv("MV_SUMINTA",NIL,2) == 1
Local nHrTrab		:= 0
Local nAleato		:= 0
Local nNewMarc		:= 0
Local nPosData		:= GdFieldPos( cPrefix+"DATA"  	)
Local nPosHora		:= GdFieldPos( cPrefix+"HORA"  	)
Local nPosOrdem		:= GdFieldPos( cPrefix+"ORDEM" 	)
Local nPosCC		:= GdFieldPos( cPrefix+"CC"    	)
Local nPosFlag		:= GdFieldPos( cPrefix+"FLAG"  	)
Local nPosTurno		:= GdFieldPos( cPrefix+"TURNO" 	)
Local nPosApont		:= GdFieldPos( cPrefix+"APONTA"	)
Local nPosTpMarc	:= GdFieldPos( cPrefix+"TPMARCA")
Local nPosRecno		:= GdFIeldPos( cPrefix+"REC_WT")
Local nPosDataApo	:= 0
Local nPosTipoReg   := 0
Local nPosMotiVrg	:= 0
Local nPosTpmCrep   := 0
Local nPosEmpOrg   	:= 0
Local nPosFilOrg   	:= 0
Local nPosMatOrg   	:= 0
Local nPosDHOrg   	:= 0
Local nPosIDOrg   	:= 0
Local nPosDataAlt  	:= 0
Local nPosHoraAlt  	:= 0
Local nPosUsuario  	:= 0
Local nPosLatitu  	:= GdFieldPos( cPrefix+"LATITU")
Local nPosLongit  	:= GdFieldPos( cPrefix+"LONGIT")
Local nLenaCols		:= Len( aCols )
Local nElementos	:= 0
Local nDeletados	:= 0
Local nElem			:= 0
Local nSvnAt		:= 0
Local nX			:= 0
Local lAlistSint	:=	( IsInCallStack("PONA280") ) .OR. ( TYPE("aListSint") == "A" )

DEFAULT lTodas		:= .F.
DEFAULT nMinMax		:= 0
DEFAULT lDlgRefresh := .T.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³A instrucao abaixo foi incluida sob aconselhamento do Fabio MR³
³para evitar que linhas geradas sejam consideradas como linhas ³
³sem conteudo e, assim, desconsideradas. 05/03/05			   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
oGet:lNewline	:= .F.

Begin Sequence

	If lPort1510
		nPosDataApo	:= GdFieldPos( cPrefix+"DATAAPO")
		nPosTipoReg	:= GdFieldPos( cPrefix+"TIPOREG")
		nPosMotiVrg	:= GdFieldPos( cPrefix+"MOTIVRG")
		nPosTpmCrep	:= GdFieldPos( cPrefix+"TPMCREP")
		nPosEmpOrg  := GdFieldPos( cPrefix+"EMPORG")
		nPosFilOrg  := GdFieldPos( cPrefix+"FILORG")
		nPosMatOrg  := GdFieldPos( cPrefix+"MATORG")
		nPosDHOrg   := GdFieldPos( cPrefix+"DHORG")
		nPosIDOrg   := GdFieldPos( cPrefix+"IDORG")
		nPosDataAlt := GdFieldPos( cPrefix+"DATAALT")
		nPosHoraAlt := GdFieldPos( cPrefix+"HORAALT")
		nPosUsuario := GdFieldPos( cPrefix+"USUARIO")
		If !fGetMotivo(@cMotivo, @cHelp, 1)
			MsgAlert( cHelp , STR0044 ) //cHelp###Atenção
			Break
		EndIf
	EndIf

	IF !( lTodas )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Gera Marcacao Dia a Dia                                       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( nLenaCols == 1 .and. Empty( aCols[ nLenaCols , nPosData ] )	.or. ;
		     nLenaCols > 1  .and. Empty( aCols[ n , nPosData ] )			.or. ;
		     ( aEval( aCols , { |x| IF( x[nSvUsado] , nDeletados++ , NIL ) } ) , nDeletados == nLenaCols ) ) .and.;
		     (!lPort1510 .or. (lPort1510 .and. Empty( aCols[ nLenaCols , nPosData ] )) )

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Atribui o valor do Primeiro elemento ao n 					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			n := IF( nDeletados == nLenaCols , n := 1 , n )

			IF nMinMax > 0 //Marcacao Aleatoria
				cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
				³da Tabela.                                                    ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
					IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
					    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
					ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
						nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
				³Tabela.                                                       ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
					IF ( CalendRetCpo( "HORASTRAB" ) > 0 )
					    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
					ElseIF ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) >  0 )
						nHrTrab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				dNewData := CalendRetCpo( cPrefix+"DATA"  )
				If cTipo == "E"
					IF lInterv
						If lSumIntAleat
							nNewMarc := CalendRetCpo( cPrefix+"HORA"  ) + ( aCols[n-1,2] - Val(aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( cPrefix+"HORA" , .T. ) ]) )
							nNewMarc := DataHora2Ale( @dNewData , nNewMarc , nInterv , @nAleato , "S" )
						Else
							nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
						EndIf

					Else
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
					EndIF
				Else
					If lInterv
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
					Else
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
					EndIf
				EndIf

				aCols[ n , nPosData  ] := dNewData
				aCols[ n , nPosHora  ] := nNewMarc
			Else
				aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
				aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
			EndIF
			aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"    )
			aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO" )
			aCols[ n , nSvUsado  	] := .F.
			aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
			If lPort1510
				If ( lAlistSint )
					aCols[ n , nPosDataApo  ] := aListSint[olBoxSint:nAt, 1 + If(lCalendDiverg, 25, 24)]
				Else
					aCols[ n , nPosDataApo  ] := aCols[ n , nPosDataApo  ]
				EndIf

				aCols[ n , nPosTipoReg 	] := "I"
				aCols[ n , nPosMotiVrg 	] := cMotivo
				aCols[ n , nPosTpmCrep 	] := Space(1)
				aCols[ n , nPosEmpOrg 	] := ""
				aCols[ n , nPosFilOrg 	] := ""
				aCols[ n , nPosMatOrg 	] := ""
				aCols[ n , nPosDHOrg 	] := ""
				aCols[ n , nPosIDOrg 	] := ""
				aCols[ n , nPosDataAlt 	] := ""
				aCols[ n , nPosHoraAlt 	] := ""
				aCols[ n , nPosUsuario 	] := ""
			EndIf
			If nPosLatitu > 0
				aCols[ n , nPosLatitu 	] := ""
			EndIf
			If nPosLongit > 0
				aCols[ n , nPosLongit 	] := ""
			EndIf
		Else
			IF MsgYesNo( OemToAnsi( STR0043 ) , OemToAnsi( STR0044 ) )	//"J  Existe Marca‡„o. Incluir Nova?"###"Aten‡„o"
		    	aAdd( aCols , aClone( aCols[ n ] ) )
		    	n := ++nLenaCols
				aCols[ n , nPosFlag  ] := "I"
			Else
				If lPort1510
					If aCols[ n , nPosTipoReg] == "O"
						MsgAlert( STR0174 , STR0044 ) //"Marcações originais nao podem ser alteradas"###Atenção
						Break
					EndIf
				EndIf
				aCols[ n , nPosFlag  ] := "M"
		    EndIF
			aCols[ n , nPosApont ] := "N"
			IF nMinMax > 0 //Marcacao Aleatoria
				cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
				³da Tabela.                                                    ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
					IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
					    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
					ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
						nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
				³Tabela.                                                       ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
					IF ( CalendRetCpo( "HORASTRAB" ) > 0 )
					    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
					ElseIF ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) > 0 )
						nHrTrab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				dNewData := CalendRetCpo( cPrefix+"DATA"  )
				If cTipo == "E"
					IF lInterv
						If lSumIntAleat
							nNewMarc := CalendRetCpo( cPrefix+"HORA"  ) + ( aCols[n-1,2] - Val(aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( cPrefix+"HORA" , .T. ) ]) )
							nNewMarc := DataHora2Ale( @dNewData , nNewMarc , nInterv , @nAleato , "S" )
						Else
							nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
						EndIf

					Else
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
					EndIF
				Else
					If lInterv
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
					Else
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
					EndIf
				EndIf

				aCols[ n , nPosData  ] := dNewData
				aCols[ n , nPosHora  ] := nNewMarc
			Else
				aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
				aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
			EndIF
			aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"    )
			aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO" )
			aCols[ n , nPosApont 	] := "N"
			aCols[ n , nSvUsado  	] := .F.
			aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
			If lPort1510
				If ( lAlistSint )
					aCols[ n , nPosDataApo  ] := aListSint[olBoxSint:nAt, 1 + If(lCalendDiverg, 25, 24)]
				Else
					aCols[ n , nPosDataApo  ] := aCols[ n , nPosDataApo  ]
				EndIf

				aCols[ n , nPosTipoReg 	] := "I"
				aCols[ n , nPosMotiVrg 	] := cMotivo
				aCols[ n , nPosTpmCrep 	] := Space(1)
				aCols[ n , nPosEmpOrg 	] := ""
				aCols[ n , nPosFilOrg 	] := ""
				aCols[ n , nPosMatOrg 	] := ""
				aCols[ n , nPosDHOrg 	] := ""
				aCols[ n , nPosIDOrg 	] := ""
				aCols[ n , nPosDataAlt 	] := ""
				aCols[ n , nPosHoraAlt 	] := ""
				aCols[ n , nPosUsuario 	] := ""
			EndIf
			If nPosLatitu > 0
				aCols[ n , nPosLatitu 	] := ""
			EndIf
			If nPosLongit > 0
				aCols[ n , nPosLongit 	] := ""
			EndIf
		EndIF
	Else
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Gera Todas as Marcacoes para o Dia Conforme Tabela            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF nLenaCols == 1 .and. ( Empty( aCols[ nLenaCols , nPosData ] ) .or. ;
		   !Empty( aCols[ nLenaCols , nPosData ] ) .and. aCols[ nLenaCols , nSvUsado ] ) .or.;
		   ( aEval( aCols , { |x| IF( x[nSvUsado] , nDeletados++ , NIL ) } ) , nDeletados == nLenaCols )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Atribui o valor do Primeiro elemento ao n 					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			n := IF( nDeletados == nLenaCols , n := 1 , n )

			//Se registro for original, guarda pois nao podera retirar do array
			If lPort1510 .and. aCols[ n , nSvUsado ]
		    	aAdd( aColsDel , {} )
		    	aColsDel[Len(aColsDel)] := aClone(aCols[ n ])
			EndIf
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Retorna a Ordem do Dia                                        ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			cOrdem := CalendRetCpo( cPrefix+"ORDEM" )
			IF ValType( aListBox[oLBox:nAt,CalendRetCpo( "OBJETO" , .T. ) ] ) != "O"
				oLBox:nAt := aScan( aListBox , { |x| x[CalendRetCpo(cPrefix+"ORDEM",.T.)] == cOrdem .and. ValType(x[CalendRetCpo("OBJETO",.T.)]) == "O"  } )
			EndIF
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica o Numero de Marcacoes para o dia conforme Tabela     ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			aEval( aListBox , { |x| IF( x[CalendRetCpo(cPrefix+"ORDEM",.T.)] == cOrdem , nElementos++ , NIL ) } )

			IF nMinMax > 0 //Marcacao Aleatoria
				cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
				³da Tabela.                                                    ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
					IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
					    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
					ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
						nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
				³Tabela.                                                       ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
					IF ( CalendRetCpo( "HORASTRAB" ) > 0 )
					    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
					ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) > 0 ) )
						nHrTrab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
					EndIF
				EndIF
				dNewData := CalendRetCpo( cPrefix+"DATA"  )
				If cTipo == "E"
					IF lInterv
						If lSumIntAleat
							nNewMarc := CalendRetCpo( cPrefix+"HORA"  ) + ( aCols[n-1,2] - Val(aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( cPrefix+"HORA" , .T. ) ]) )
							nNewMarc := DataHora2Ale( @dNewData , nNewMarc , nInterv , @nAleato , "S" )
						Else
							nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
						EndIf

					Else
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
					EndIF
				Else
					If lInterv
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
					Else
						nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
					EndIf
				EndIf

				aCols[ n , nPosData  ] := dNewData
				aCols[ n , nPosHora  ] := nNewMarc
			Else
				aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
				aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
			EndIF
			aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"    )
			aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO" )
			aCols[ n , nPosFlag  	] := "I"
			aCols[ n , nPosApont 	] := "N"
			aCols[ n , nSvUsado  	] := .F.
			aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
			If lPort1510
				If ( lAlistSint )
					aCols[ n , nPosDataApo  ] := aListSint[olBoxSint:nAt, 1 + If(lCalendDiverg, 25, 24)]
				Else
					aCols[ n , nPosDataApo  ] := aCols[ n , nPosDataApo  ]
				EndIf

				aCols[ n , nPosTipoReg 	] := "I"
				aCols[ n , nPosMotiVrg 	] := cMotivo
				aCols[ n , nPosTpmCrep 	] := Space(1)
				aCols[ n , nPosRecno    ] := 0
			EndIf
			nSvnAt := oLBox:nAt
			IF nSvnAt != 1
				nElementos+= ( nSvnAt - 1 )
			EndIF
			For nElem := nSvnAt + 1 To nElementos
				oLBox:nAt := nElem
				++n

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Carrega um Novo Elemento no aCols							   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF !( nDeletados == nLenaCols ) .or. n > nLenaCols
					aAdd( aCols , aClone( aCols[ Min( n , nLenaCols ) ] ) )
				EndIF

				//Se registro for original, guarda pois nao podera retirar do array
				If lPort1510 .and. n <= nLenaCols .and. aCols[ n , nSvUsado ]
			    	aAdd( aColsDel , {} )
			    	aColsDel[Len(aColsDel)] := aClone(aCols[ n ])
				EndIf

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Se for Marcacao Aleatoria        							   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF nMinMax > 0 //Marcacao Aleatoria
					cTipo := Substr( CalendRetCpo( "TIPOMARC" ) , -1 )
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica se os Minutos Nao ultrapassam o Horario de  Intervalo³
					³da Tabela.                                                    ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					IF ( CalendRetCpo( "HORASINTE" ) > 0 .or. cTipo == "E" )
						IF ( lInterv := ( CalendRetCpo( "HORASINTE" ) > 0 ) )
						    nInterv := Min( ( __Hrs2Min( CalendRetCpo( "HORASINTE" ) ) / 2 ) , nMinMax )
						ElseIF ( lInterv := ( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) > 0 ) )
							nInterv := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASINTE" , .T. ) ] ) ) / 2 ) , nMinMax )
						EndIF
					EndIF
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica se os Minutos Nao ultrapassam as Horas de Trabalho da³
					³Tabela.                                                       ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					IF ( CalendRetCpo( "HORASTRAB" ) > 0 .or. cTipo == "S" )
						IF (  CalendRetCpo( "HORASTRAB" ) > 0 )
						    nHrTrab := Min( ( __Hrs2Min( CalendRetCpo( "HORASTRAB" ) ) / 2 ) , nMinMax )
						ElseIF ( VAl( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) > 0 )
							nHrTRab := Min( ( __Hrs2Min( Val( aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( "HORASTRAB" , .T. ) ] ) ) / 2 ) , nMinMax )
						EndIF
					EndIF
					dNewData := CalendRetCpo( cPrefix+"DATA"  )
					If cTipo == "E"
						IF lInterv
							If lSumIntAleat
								nNewMarc := CalendRetCpo( cPrefix+"HORA"  ) + ( aCols[n-1,2] - Val(aListBox[ Max( 1 , oLBox:nAt - 1 ) , CalendRetCpo( cPrefix+"HORA" , .T. ) ]) )
								nNewMarc := DataHora2Ale( @dNewData , nNewMarc , nInterv , @nAleato , "S" )
							Else
								nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
							EndIf

						Else
							nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
						EndIF
					Else
						If lInterv
							nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nInterv , @nAleato , cTipo )
						Else
							nNewMarc := DataHora2Ale( @dNewData , CalendRetCpo( cPrefix+"HORA"  ) , nHrTrab , @nAleato , cTipo )
						EndIf
					EndIf
					aCols[ n , nPosData  ] := dNewData
					aCols[ n , nPosHora  ] := nNewMarc
					lInterv := .F.
				Else
					aCols[ n , nPosData  ] := CalendRetCpo( cPrefix+"DATA"  )
					aCols[ n , nPosHora  ] := CalendRetCpo( cPrefix+"HORA"  )
				EndIF
				aCols[ n , nPosCC	 	] := CalendRetCpo( cPrefix+"CC"    )
				aCols[ n , nPosTurno 	] := CalendRetCpo( cPrefix+"TURNO" )
				aCols[ n , nPosFlag  	] := "I"
				aCols[ n , nPosApont 	] := "N"
				aCols[ n , nSvUsado  	] := .F.
				aCols[ n , nPosTpMarc	] := SubStr( CalendRetCpo( "TIPOMARC" ) , 1 , 2 )
				If lPort1510
					If ( lAlistSint )
						aCols[ n , nPosDataApo  ] := aListSint[olBoxSint:nAt, 1 + If(lCalendDiverg, 25, 24)]
					Else
						aCols[ n , nPosDataApo  ] := aCols[ n , nPosDataApo  ]
					EndIf

					aCols[ n , nPosTipoReg  ] := "I"
					aCols[ n , nPosMotiVrg  ] := cMotivo
					aCols[ n , nPosTpmCrep  ] := Space(1)
					aCols[ n , nPosRecno    ] := 0
					aCols[ n , nPosEmpOrg 	] := ""
					aCols[ n , nPosFilOrg 	] := ""
					aCols[ n , nPosMatOrg 	] := ""
					aCols[ n , nPosDHOrg 	] := ""
					aCols[ n , nPosIDOrg 	] := ""
					aCols[ n , nPosDataAlt 	] := ""
					aCols[ n , nPosHoraAlt 	] := ""
					aCols[ n , nPosUsuario 	] := ""
				EndIf
				If nPosLatitu > 0
					aCols[ n , nPosLatitu 	] := ""
				EndIf
				If nPosLongit > 0
					aCols[ n , nPosLongit 	] := ""
				EndIf
			Next nElem
			//Restaura os valores originais deletados
			If lPort1510 .and. !Empty(aColsDel)
				aColsAux := aClone(aCols)
				aCols := {}
				For nX:=1 To Len(aColsDel)
			    	aAdd( aCols , aClone( aColsDel[nX] ) )
			 	Next nX
				For nX:=1 To Len(aColsAux)
			    	aAdd( aCols , aClone( aColsAux[nX] ) )
			 	Next nX
			EndIf
			oLBox:nAt := nSvnAt
		Else
			cHelp := STR0056	//"Utilize Esta Op‡„o Apenas Quando n„o Houver Marca‡”es na Data"
			Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
		EndIF
	EndIF

End Sequence

lLinhaOk := Pn230LinOk(NIL,.T.)

IF ( lDlgRefresh )
	oGet:ForceRefresh()
EndIF

IF !( lLinhaOk )
	oGet:oBrowse:nAt := ( n := nLenaCols )
EndIF

IF ( lDlgRefresh )
   oGet:oBrowse:Refresh()
   oDlg:Refresh()
EndIF

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230Aponta  ³ Autor ³Marinaldo de Jesus   ³ Data ³19/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Efetuar o Apontamento das Marcacoes                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230Aponta()										 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pn230ChoiBar                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230Aponta(oGet,nOpcX,lForceApont)

Local aLastMarca	:= {}
Local lGrava		:= .T.
Local lClassifica	:= ( PCount() != 0 )
Local lApHeDtm		:= ( SuperGetMv( "MV_APHEDTM" , NIL , "N" , cFilAnt ) == "S" )
Local lReaponta		:= .F.

DEFAULT lForceApont	:= .F.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Efetua o Apontamento Apenas Quando nao For Visualizacao       ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( nOpcX == 2 )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega Apontamentos Anteriores                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !lApHeDtm
		IF !lForceApont .and. Empty( aLastApo ) //So Carrega a Primeira vez.
			aLastApo := GetLastApo( dPerIni , dPerFim , IF( lPona240 , "SPH" , "SPC" ) )
		ElseIF lForceApont
			aLastApo := {}
		EndIF
	Else
		aLastApo := {}
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Salva aMarcacoes pois se nao Houver diferencas entre os   valo³
	³res Atuais e Anteriores de aCols (aArrayMain e aArrayAnt) este³
	³nao sera carregado Novamente								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aLastMarca	:= aClone( aMarcacoes )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reinicializa aMarcacoes e aResult sempre que for efetuar     o³
	³Apontamento e se Existirem Diferencas nos Dados               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aMarcacoes	:= {}
	IF lClassifica
		IF !fCompArray(aArrayMain,aArrayAnt) .or. lGeraAuto
			aResult		:= {}
			aArrayAnt	:= aClone( aArrayMain )
		EndIF
		lGrava	:= .F.
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Prepara, Aponta as Marcacoes e Grava os Apontamentos          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	PreparaCla(	@aMarcacoes																									,;	//Array de Marcacoes
				@aResult																									,;	//Array de Marcacoes
				NIL																											,;	//Numero de Colunas de Marcacoes
				( lGrava .and. Len( aLastApo ) == 0 ) 																		,;	//Gravar ou Nao o Apontamento
				( lReaponta := ( lForceApont .or. !fCompArray(aArrayMain,aArrayAnt) .or. Empty(aResult) .or. lGeraAuto) )	,;	//Reprocessar Apontamento
				aArrayMain																									,;	//Array com as Marcacoes do SP8
				aHeader																										,;	//Array com o Cabecalho de aArrayMain
				nSvUsado															 										,;	//Indice do Elemento Logico de aArrayMain
				( lApHeDtm .or. lForceApont )										 						 			 	 ;	//Forca o Reapontamento
			  )

	IF Len( aLastApo ) > 0

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Remonta aResult                                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF lReaponta
			GetNewResult(@aResult,aLastApo,aArrayMain,aArrayClone,aTabCalend)
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Caso, PreparaCla apenas Grava o Apontamento             ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		PreparaCla(	@aMarcacoes											,;	//Array de Marcacoes
					@aResult											,;	//Array de Resultados
					NIL													,;	//Numero de Colunas de Marcacoes
					lGrava												,;	//Gravar ou Nao o Apontamento
					.F.													,;	//Reapontar as Marcacoes
					aArrayMain											,;	//Array com as Marcacoes do SP8
					aHeader												,;	//Array com o Cabecalho de aArrayMain
					nSvUsado											 ;	//Indice do Elemento Logico de aArrayMain
				  )
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Restaura aMarcacoes para Poder Estar Gravando o Flag de Aponta³
	³mento														   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF Empty( aMarcacoes )
		aMarcacoes := aClone( aLastMarca )
	EndIF

EndIF

IF ( lClassifica .or. ( nOpcX == 2 ) )
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Mostra o Resultado dos Apontamentos                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpcX == 2 )
		IF Empty( aLastApo )
			aResult := GetLastApo( dPerIni , dPerFim , IF( lPona240 , "SPH" , "SPC" ) )
		Else
			aResult	:= aClone( aLastApo )
		EndIF
	EndIF
	IF !Empty( aResult )
		fMostraApo(nOpcX,aResult,oGet,.T.,lPona240)
	Else
		MsgAlert( OemToAnsi( STR0071 ) , STR0072 )	//"N„o Existem Apontamentos Para o Funcion rio"###"Aviso"
	EndIF
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Salva o Conteudo de aArrayMain para verificar se sera  preciso³
³estar reprocessando o Apontamento.(Apenas Qdo. Nao Visualizar)³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( nOpcX == 2 )
	aArrayAnt := aClone( aArrayMain )
Else
	aResult := {}
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Neste Ponto lGeraAuto deve ser Setado como .F. para que nao ha³
³ja Apontamento Desnecessario								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
lGeraAuto := .F.

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetLegendCalend³ Autor ³Marinaldo de Jesus ³ Data ³19/06/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Mostra Legenda das Cores do ListBox                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetLegendCalend()									 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                   		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pn230ChoiBar                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GetLegendCalend(aBitMaps,aAdicLeg, nLeg)

Local aKeys := GetKeys()
Local aLeg

Static aBmp
Static aBmpLegend

IF aBmp == NIL
	aBmp := Array(10)
	aBmp[01] := LoadBitmap( GetResources() , "BR_VERDE"		)
	aBmp[02] := LoadBitmap( GetResources() , "BR_VERMELHO"	)
	aBmp[03] := LoadBitmap( GetResources() , "BR_PRETO"		)
	aBmp[04] := LoadBitmap( GetResources() , "BR_AZUL"		)
	aBmp[05] := LoadBitmap( GetResources() , "BR_AMARELO"	)
	aBmp[06] := LoadBitmap( GetResources() , "LIGHTBLU"		)
	aBmp[07] := LoadBitmap( GetResources() , "BR_PINK"		)
	aBmp[08] := LoadBitmap( GetResources() , "BR_MARRON"	)
	aBmp[09] := LoadBitmap( GetResources() , "br_branco"		)
	aBmp[10] := LoadBitmap( GetResources() , "BR_LARANJA"	)
EndIF

IF aBmpLegend == NIL
 	aBmpLegend := Array(10,02)
	aBmpLegend[01,01] := "BR_VERDE"		; aBmpLegend[01,02] := OemToAnsi(STR0046)	//"Trabalhado"
	aBmpLegend[02,01] := "BR_VERMELHO"	; aBmpLegend[02,02] := OemToAnsi(STR0047)	//"DSR"
	aBmpLegend[03,01] := "BR_PRETO"		; aBmpLegend[03,02] := OemToAnsi(STR0048)	//"N„o Trabalhado"
	aBmpLegend[04,01] := "BR_AZUL"		; aBmpLegend[04,02] := OemToAnsi(STR0049)	//"Compensado"
	aBmpLegend[05,01] := "BR_AMARELO"	; aBmpLegend[05,02] := OemToAnsi(STR0050)	//"Feriado"
	aBmpLegend[06,01] := "LIGHTBLU"		; aBmpLegend[06,02] := OemToAnsi(STR0063)	//"Exce‡„o Trabalhado"
	aBmpLegend[07,01] := "BR_PINK"		; aBmpLegend[07,02] := OemToAnsi(STR0064)	//"Exce‡„o DSR"
	aBmpLegend[08,01] := "BR_MARRON"	; aBmpLegend[08,02] := OemToAnsi(STR0065)	//"Exce‡„o N„o Trabalhado"
	aBmpLegend[09,01] := "br_branco"		; aBmpLegend[09,02] := OemToAnsi(STR0066)	//"Exce‡„o Compensado"
	aBmpLegend[10,01] := "BR_LARANJA"	; aBmpLegend[10,02] := OemToAnsi(STR0067)	//"Exce‡„o Feriado"
	aLeg:={Aclone(aBmpLegend)}
	IF aAdicLeg <> Nil
	   aSize(aLeg,Len(aLeg)+1)
	   aIns(aLeg,2)
	   aLeg[2]:=Aclone(aBmpLegend)
	   Aeval(aAdicLeg,{|x| AADD(aLeg[2], x ) } )
	Endif
	 aBmpLegend:=aClone(aLeg)
EndIF

IF PCount() == 0  .OR. nLeg <> NIL
	If nLeg == NIL
		BrwLegenda( OemToAnsi(STR0045),OemToAnsi(STR0051),aBmpLegend[1]) //"Legenda do Calend rio..."###"Aten‡„o"
    Else
		BrwLegenda( OemToAnsi(STR0045),OemToAnsi(STR0051),aBmpLegend[nLeg]) //"Legenda do Calend rio..."###"Aten‡„o"
    Endif
Else
	aBitMaps := aClone( aBmp )
EndIF

RestKeys( aKeys )

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn230ModSetaCols³Autor ³Marinaldo de Jesus ³ Data ³08/08/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deletar/Restaurar as Marcacoes do Dia                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pn230ModSetaCols( @oDlg , @oGet )							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³oDlg - Objeto de Dialogo para Refresh     					 ³
³          ³oGet - Objeto GetDados para Refresh      					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Pn230ChoiBar                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn230ModSetaCols( oDlg , oGet )
Local cMotivo     := ""
Local cHelp		  := ""
Local nX		  := 0
Local nLenaCols   := Len( aCols )
Local nPosTipoReg := 0
Local nPosMotiVrg := 0
Local nPosTpmCrep := 0

If lPort1510
	nPosTipoReg	:= GdFieldPos( "P8_TIPOREG")
	nPosMotiVrg	:= GdFieldPos( "P8_MOTIVRG")
	nPosTpmCrep	:= GdFieldPos( "P8_TPMCREP")
	For nX := 1 To nLenaCols
		If !aCols[ nX , nSvUsado ] .and. aCols[ nX , nPosTipoReg ] == "O"
			If !fGetMotivo(@cMotivo, @cHelp, 3)
				MsgAlert( cHelp , STR0044 ) //cHelp###Atenção
				Return( NIL )
			Else
				Exit
			EndIf
		EndIf
	Next nX
EndIf

For nX := 1 To nLenaCols
	If ( lPort1510 .and. aCols[ nX , nPosTipoReg ] == "O" )
		If !aCols[ nX , nSvUsado ]
			aCols[ nX , nPosMotiVrg ] := cMotivo
			aCols[ nX , nPosTpmCrep ] := "D"
		Else
			aCols[ nX , nPosMotiVrg ] := Space(100)
			aCols[ nX , nPosTpmCrep ] := Space(1)
		EndIf
	EndIf
	aCols[ nX , nSvUsado ] := !aCols[ nX , nSvUsado ]
Next nX

oGet:ForceRefresh()
oDlg:Refresh()

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetNewResult³ Autor ³Marinaldo de Jesus     ³ Data ³31/07/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Remontar aResult                                              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetNewResult(aResult,aLastApo,aArrayMain,aArrayAnt,aTabCalend)³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aResult		-> Array com os Resultados Dia a Dia			  ³
³          ³aLastApo	-> Array com os Resultados Dia a Dia Ja Apontados ³
³          ³aArraY   	-> Dados Atuais Baseados em aCols                 ³
³          ³aArraYAnt  	-> Dados Anteriores Baseados no 1o. aCols         ³
³          ³aTabCalend 	-> Calendario de Marcacoes                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                       ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function GetNewResult(aResult,aLastApo,aArrayMain,aArrayAnt,aTabCalend)

Local aOrdem		:= {}
Local bAsc			:= { || NIL }
Local bSrt			:= { | x , y | Dtos( x[1] ) + x[2] < Dtos( y[1] ) + y[2] }
Local cOrdem		:= ""
Local nOrdIni		:= Val( aTabCalend[ 01 , CALEND_POS_ORDEM ] )
Local nOrdFim		:= Val( aTabCalend[ Len( aTabCalend ) , CALEND_POS_ORDEM ] )
Local nPos			:= 0
Local nPos1			:= 0
Local nX			:= 0
Local nFornX		:= Len( aLastApo )
Local nPosOrdem		:= GdFieldPos("P8_ORDEM")
Local nArray		:= Len( aArrayMain )
Local nArrayAnt		:= Len( aArrayAnt )
Local nTamP8Ordem	:= ( TamSx3("P8_ORDEM")[1] )

IF ( nFornX > 0 )

	aOrdem := Array( nOrdFim , 3 )
	For nOrdIni := nOrdIni To nOrdFim
		cOrdem := StrZero( nOrdIni , nTamP8Ordem )
		aOrdem[ nOrdIni , 01 ] := cOrdem
		aOrdem[ nOrdIni , 02 ] := {}
		aOrdem[ nOrdIni , 03 ] := {}
		IF ( nPos := aScan( aArrayMain , { |x| x[nPosOrdem] == cOrdem } ) ) > 0
			For nX := nPos To nArray
				IF aArrayMain[ nX , nPosOrdem ] == cOrdem
					aAdd( aOrdem[ nOrdIni , 02 ] , aClone( aArrayMain[ nX ] ) )
				Else
					Exit
				EndIF
			Next nX
		EndIF
		IF ( nPos := aScan( aArrayAnt ,	{ |x| x[nPosOrdem] == cOrdem } ) ) > 0
			For nX := nPos To nArrayAnt
				IF aArrayAnt[ nX , nPosOrdem ] == cOrdem
					aAdd( aOrdem[ nOrdIni , 03 ] , aClone( aArrayAnt[ nX ] ) )
				Else
					Exit
				EndIF
			Next nX
		EndIF
	Next nOrdIni

	bAsc :=	{ |x|	x[01] == aLastApo[nX,01] .and. ;	//Data da Geracao
					x[02] == aLastApo[nX,02] .and. ;	//Codigo do Evento
					x[04] == aLastApo[nX,04] .and. ;	//Centro de Custo
					x[05] == aLastApo[nX,05] 	   ;	//Tipo de Marcacao
			 }

	nOrdIni := Val( aTabCalend[ 01 , CALEND_POS_ORDEM ] )

	For nOrdIni := nOrdIni To nOrdFim
		IF fCompArray( aOrdem[ nOrdIni , 02 ] , aOrdem[ nOrdIni , 03 ] )
			IF( nPos := aScan( aTabCalend , { |x| x[CALEND_POS_ORDEM] == aOrdem[ nOrdIni , 01 ] .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0
				IF ( nPos1 := aScan( aLastApo , { |x| x[01] == aTabCalend[ nPos , CALEND_POS_DATA ] } ) ) > 0
					For nX := nPos1 To nFornX
						IF aLastApo[ nX , 01 ] == aTabCalend[ nPos , CALEND_POS_DATA ] .and. aScan( aResult , bAsc ) == 0
							aAdd( aResult , aClone( aLastApo[ nX ] ) )
						Else
							Exit
						EndIF
					Next nX
				EndIF
			EndIF
		EndIF
	Next nOrdIni

	aSort( aResult ,,, bSrt  )

EndIF

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PutFlagMarc ³ Autor ³Marinaldo de Jesus    ³ Data ³01/08/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Setar o Flag de Marcacao Apontada                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PutFlagMarc( aArrayMain , aMarcacoes )                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aArrayMain  -> Array com a Estrutura do Acols contendo  Todas³
³          ³              Marcacoes do Funcionario                       ³
³          ³aMarcacoes -> Array utilzado para o Apontamento              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function PutFlagMarc( aArrayMain , aMarcacoes )

Local nArray		:= 0
Local nForArray		:= Len( aArrayMain )
Local nPos			:= 0
Local nPosData		:= GdFieldPos("P8_DATA")
Local nPosHora		:= GdFieldPos("P8_HORA")
Local nPosOrdem		:= GdFieldPos("P8_ORDEM")
Local nPosAponta	:= GdFieldPos("P8_APONTA")
Local nPosTpMarc	:= GdFieldPos("P8_TPMARCA")

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Carrega o Flag de Apontamento nas Marcacoes                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
For nArray := 1 To nForArray
	IF ( nPos := aScan( aMarcacoes , { |x|	x[AMARC_DATA]	== aArrayMain[ nArray , nPosData  ] .and.	;
				 							x[AMARC_HORA]	== aArrayMain[ nArray , nPosHora  ] .and.	;
											x[AMARC_ORDEM]	== aArrayMain[ nArray , nPosOrdem ]		;
							 		  };
					   );
		) > 0
		aArrayMain[ nArray , nPosAponta ] := aMarcacoes[ nPos , AMARC_APONTA	]
		aArrayMain[ nArray , nPosTpMarc ] := aMarcacoes[ nPos , AMARC_TIPOMARC	]
	EndIF
Next nArray

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GetCalendListBox ³Autor³Marinaldo de Jesus   ³Data³12/11/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retornar Array com Calendario que sera Utilizado no ListBox  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetCalendListBox(@aListBox,aTabCalend,aSintetico)            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aListBox   -> Array que sera Utilizado no ListBox contendo  o³
³          ³              Calendario do Funcionario                      ³
³          ³aTabCalend -> Calendario de Marcacoes do Funcionario         ³
³          ³aSintetico -> Array Sem Linhas Repetidas					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA280/PONA240                                              ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GetCalendListBox( aListBox , aTabCalend , aSintetico , lCalendFunc, aAdicLeg,lDiaApo )

Local aBmp			:= {}
Local aLinhaCalend  := {}
Local cFilSPA		:= ""
Local cOrdem		:= ""
Local cOrdAntAdm	:= ""
Local cSpaceExce	:= Space( Len( SP2->P2_MOTIVO ) )
Local cSpaceDscAfa	:= Space( 25 )
Local lRet			:= .T.
Local lOrdemRepete	:= ( aSintetico == NIL )
Local nX			:= 0
Local nLenX			:= 0

DEFAULT	aSintetico	:= {}
DEFAULT lCalendFunc	:= .T.
DEFAULT lDiaApo  := .F.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define a Filial do SPA                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cFilSPA := xFilial( "SPA" , SRA->RA_FILIAL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega Array com as Legendas de Cores                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
GetLegendCalend(@aBmp,aAdicLeg)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta o ListBox de Acordo com o Calendario de Marcacoes     ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nLenX	 	:= Len( aTabCalend )
aListBox 	:= {}

For nX := 1 To nLenX
	IF (;
			(;
				( aTabCalend[ nX , CALEND_POS_DATA ] >= SRA->RA_ADMISSA ) .or.;
				!( lCalendFunc );
			 ) .and. ;
			 ( cOrdAntAdm != aTabCalend[ nX , CALEND_POS_ORDEM ] ) ;
		)

	    /*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	    ³ Posiciona da Regra de Apontamento do Funcionario de   Acordo³
	    ³com o Calendario de Marcacoes								  ³
	    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF ( lCalendFunc )
			SPA->( MsSeek( cFilSPA + aTabCalend[ nX , CALEND_POS_REGRA ] , .F. ) )
		Else
			PutFileInEof("SPA")
		EndIF

	  	/*
		 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		 ³Carrega os Elementos do Calendario						   ³
		 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	  	 aLinhaCalend := Array( ELEMENTOS_DO_CALENDARIO  )


		 aLinhaCalend[  CALEND_ELEM_BITMAP				 ] := Pn230BitMaps(	aBmp										,;
																			aTabCalend[ nX , CALEND_POS_ORDEM		]	,;
																			aTabCalend[ nX , CALEND_POS_TIPO_DIA	]	,;
																			aTabCalend[ nX , CALEND_POS_EXCECAO		]	,;
																			aTabCalend[ nX , CALEND_POS_FERIADO		]	,;
																			SPA->PA_FERIADO						 		 ;
																  )
																  																									//BitMap
	   	aLinhaCalend[  CALEND_ELEM_DATA				     ] := aTabCalend[ nX , CALEND_POS_DATA]																			//Data
		aLinhaCalend[  CALEND_ELEM_DIA_SEMANA			 ] := If(lDiaApo,DiaSemana( aTabCalend[ nX , CALEND_POS_DATA_APO ] ),DiaSemana( aTabCalend[ nX , CALEND_POS_DATA ] ))																//Dia Semana
    	aLinhaCalend[  CALEND_ELEM_HORA				 	 ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_HORA ] , "@R 99.99" ), " ","0")									//Hora
    	aLinhaCalend[  CALEND_ELEM_TIPO_MARCACAO		 ] := aTabCalend[ nX , CALEND_POS_TIPO_MARC ] + " - " + GetDescMarc( aTabCalend[ nX , CALEND_POS_TIPO_MARC ] )			//Tipo Marcacao
		aLinhaCalend[  CALEND_ELEM_TURNO				 ] := aTabCalend[ nX , CALEND_POS_TURNO ]																				//Turno
    	aLinhaCalend[  CALEND_ELEM_SEQUENCIA			 ] := aTabCalend[ nX , CALEND_POS_SEQ_TURNO ]																			//Sequencia
		aLinhaCalend[  CALEND_ELEM_ORDEM				 ] := aTabCalend[ nX , CALEND_POS_ORDEM ]																				//Ordem
		aLinhaCalend[  CALEND_ELEM_REGRA				 ] := aTabCalend[ nX , CALEND_POS_REGRA ]																				//Regra de Apontamento
		aLinhaCalend[  CALEND_ELEM_CENTRO_DE_CUSTO 	 	 ] := IF(Empty(aTabCalend[ nX , CALEND_POS_CC ]),SRA->RA_CC,aTabCalend[ nX , CALEND_POS_CC ])							//Centro de Custo
		IF aTabCalend[ nX , CALEND_POS_TIPO_MARC ] == "1E"
			aLinhaCalend[ CALEND_ELEM_DATA_LIMITE 		 ] := Dtoc( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO , 01] )															//Data Limite
			aLinhaCalend[ CALEND_ELEM_HORA_LIMITE 	     ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO, 02 ] , "@R 99.99" )," ","0")							//Hora Limite
    		aLinhaCalend[CALEND_ELEM_DATA_APO		     ] := aTabCalend[ nX , CALEND_POS_DATA_APO ]
    	ElseIF aTabCalend[ nX , CALEND_POS_TIPO_MARC 	 ] != "1E" .and. !Empty(aTabCalend[ nX , CALEND_POS_LIM_MARCACAO , 01])
			aLinhaCalend[ CALEND_ELEM_DATA_LIMITE 	     ] := Dtoc( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO , 01] )															//Data Limite
			aLinhaCalend[ CALEND_ELEM_HORA_LIMITE 	     ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_LIM_MARCACAO, 02 ] , "@R 99.99" )," ","0")							//Hora Limite
    	Else
			aLinhaCalend[ CALEND_ELEM_DATA_LIMITE 	     ] := ""
			aLinhaCalend[ CALEND_ELEM_HORA_LIMITE 	     ] := ""
		EndIF
		aLinhaCalend[ CALEND_ELEM_HORAS_TRABALHADAS	 	 ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_HRS_TRABA ] , "@R 99.99" ), " ","0")								//Horas Trabalhadas
		aLinhaCalend[ CALEND_ELEM_HORAS_INTERVALO		 ] := StrTran(Transform( aTabCalend[ nX , CALEND_POS_HRS_INTER ] , "@R 99.99" ), " ","0")								//Horas de Intervalo
		aLinhaCalend[ CALEND_ELEM_EXCECAO				 ] := IF( Empty(aTabCalend[ nX , CALEND_POS_MOT_EXECAO ]) , cSpaceExce , aTabCalend[ nX , CALEND_POS_MOT_EXECAO ] )		//Excecao
		aLinhaCalend[ CALEND_ELEM_AFASTADO				 ] := IF( !aTabCalend[ nX , CALEND_POS_AFAST ] , STR0076 , STR0075 )													//Afastado - Nao###Sim
		aLinhaCalend[ CALEND_ELEM_DESC_AFASTAMENTO		 ] := IF( !aTabCalend[ nX , CALEND_POS_AFAST ] , cSpaceDscAfa , fDescAfast( aTabCalend[ nX , CALEND_POS_TIP_AFAST ], Nil, Nil, SRA->( RA_SITFOLH == 'D' .and. aTabCalend[ nX , CALEND_POS_DATA ] > RA_DEMISSA ), aTabCalend[ nX , CALEND_POS_R8ID ] ) )	//Descricao do Afastamento
		aLinhaCalend[CALEND_ELEM_FUNCAO					 ] := ""
		aLinhaCalend[CALEND_ELEM_DEPTO			         ] := ""
		aLinhaCalend[CALEND_ELEM_POSTO			         ] := ""
		aLinhaCalend[CALEND_ELEM_PROCESSO		         ] := ""
		aLinhaCalend[CALEND_ELEM_PERIODO			     ] := ""
		aLinhaCalend[CALEND_ELEM_ROTEIRO			     ] := ""
		aLinhaCalend[CALEND_ELEM_NUM_PAGTO		         ] := ""

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Adiciona o Elemento ao aListBox							  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aAdd( aListBox , aClone( aLinhaCalend ) )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Se Nao Deve Existir Ordens Repetidas						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    	IF !( lOrdemRepete )
		    IF !( cOrdem == aLinhaCalend[ CALEND_ELEM_ORDEM ] )
				cOrdem := aLinhaCalend[ CALEND_ELEM_ORDEM ]
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Guarda no ultimo Elemento do Calend Sintetico a referencia  a³
				³a linha do Calendario completo 							  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				aAdd( aLinhaCalend , Len(aListBox) )
				aAdd( aSintetico , aClone( aLinhaCalend ) )
            EndIF
        EndIF
    Else
    	cOrdAntAdm := aTabCalend[ nX , CALEND_POS_ORDEM ]
    EndIF
Next nX

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Quando aListBox estiver vazio Admissao Maior que o   Periodo³
³ de Apontamento.                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( lRet := !Empty( aListBox ) )
	IF ( lCalendFunc )
		Help(" ",1,"PONA230ADM")
	EndIF
EndIF

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ListBoxCalend³ Autor ³Marinaldo de Jesus   ³ Data ³29/01/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Montar ListBox do Calendario de Marcacoes                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³ListBoxCalend( aCords , oDlg , aListBox , oLBox , bChange  ) ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aCords 		-> Array contendo as Coordenadas da Janela       ³
³          ³oDlg    	-> Objeto de Dialogo onde sera criado o LisBox 	 ³
³          ³aListBox    -> Array com os Conteudos do ListBox             ³
³          ³oListBox    -> Objeto ListBox a Ser Passado Por Referencia 	 ³
³          ³bChange     -> Bloco a Ser Executado                       	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230 E PONA040                                            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function ListBoxCalend( aCords , oDlg , aListBox , oListBox , bChange  )
Local aCabec	:= {}
Local aColSizes	:= {}

DEFAULT aCords			:= {030,005,310,140}
DEFAULT aListBox		:= {}
DEFAULT bChange			:= { || .T. }


aCabec:= {;
									 ""									 								,;	//01 - BitMap
									 OemToAnsi( STR0012 )									 			,;	//02 - "Data Ref."
									 OemToAnsi( STR0024 )									 			,;	//03 - "Dia Sem."
									 OemToAnsi( STR0013 )									 			,;	//04 - "Hora"
									 OemToAnsi( STR0014 )									 			,;	//05 - "Marca‡„o Tipo"
									 OemToAnsi( STR0015 )									 			,;	//06 - "Turno"
									 OemToAnsi( STR0016 )									 			,;	//07 - "Seq."
									 OemToAnsi( STR0017 )									 			,;	//08 - "Ordem"
									 OemToAnsi( STR0070 )									 			,;	//09 - "Regra"
									 OemToAnsi( STR0018 )									 			,;	//10 - "Centro de Custo"
									 OemToAnsi( STR0019 )									 			,;	//11 - "Data Lim."
									 OemToAnsi( STR0020 )								 	  			,;	//12 - "Hora Lim."
									 OemToAnsi( STR0061 )								 	  			,;	//13 - "Hrs.Trab"
									 OemToAnsi( STR0062 )								 	  			,;	//14 - "Hrs.Inter"
									 OemToAnsi( STR0023 )								 	  			,;	//15 - "Exce‡„o"
									 OemToAnsi( STR0074 )								 	  			,;	//16 - "Afastado"
									 OemToAnsi( STR0077 )								 	  			 ;	//17 - "Motivo do Afastamento"
		}

aColSizes:={;
									 GetTextWidth(0,Replicate("I",04))							  		,;	//01 - BitMap
									 GetTextWidth(0,Replicate("B",Len(Dtoc(dDatabase))))	 			,;	//02 - "Data Ref."
									 GetTextWidth(0,Replicate("B",10))						 			,;	//03 - "Dia Sem."
									 GetTextWidth(0,Replicate("B",05))						 			,;	//04 - "Hora"
									 GetTextWidth(0,Replicate("B",10))						 			,;	//05 - "Marca‡„o Tipo"
									 GetTextWidth(0,Replicate("B",Max(Len(SP8->P8_TURNO),05)))			,;	//06 - "Turno"
									 GetTextWidth(0,Replicate("B",Max(Len(SRA->RA_SEQTURN),05)))		,;	//07 - "Seq."
									 GetTextWidth(0,Replicate("B",Max(Len(SP8->P8_ORDEM),05)))			,;	//08 - "Ordem"
									 GetTextWidth(0,Replicate("B",Max(Len(SRA->RA_REGRA),05)))			,;	//09 - "Regra"
									 GetTextWidth(0,Replicate("B",Len(SP8->P8_CC)))					,;	//10 - "Centro de Custo"
									 GetTextWidth(0,Replicate("B",Max(Len(Dtoc(dDatabase)),09)))		,;	//11 - "Data Lim."
									 GetTextWidth(0,Replicate("B",12))					 	  			,;	//12 - "Hora Lim."
									 GetTextWidth(0,Replicate("B",12))					 	  			,;	//13 - "Hrs.Trab"
									 GetTextWidth(0,Replicate("B",12))					 	  			,;	//14 - "Hrs.Inter"
									 GetTextWidth(0,Replicate("B",Len(SP2->P2_MOTIVO)))			 	,;	//15 - "Exce‡„o"
									 GetTextWidth(0,Replicate("B",05))									,;	//16 - "Afastado"
									 GetTextWidth(0,Replicate("B",25))			 						 ;	//17 - "Motivo do Afastamento"
			}


oListBox := TWBrowse():New( aCords[1],aCords[2],aCords[3],aCords[4],,aCabec,aColSizes,oListBox,,,,bChange,,,,,,,,.F.,,.T.,,.F.,,,)

oListBox:SetArray(aListBox)
oListBox:bLine:={ || LineLstBox( oListBox ) }

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pona230Locks    ³Autor³Mauricio MR         ³ Data ³14/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Lancamentos de Marcacoes /Apont/Abonos		         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pona230Locks( nOpc , cAlias, aRecnos )

Local lLocks	:= .T.
Local aRecAux	:= {}

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Visualizacao 				 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpc == 2 )
		Break
	EndIF

	aEval( aRecnos , {|x| IF( !Empty(x) , aAdd( aRecAux , x ) , NIL ) } )

	IF !( lLocks := WhileNoLock( cAlias , aRecAux , {xFilial(cAlias)+SRA->RA_MAT} , 1 , 1 , .T. , NIL ) )
		Break
	EndIF

End Sequence

Return( lLocks )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fDelMarc    ³ Autor ³Leandro Drumond       ³ Data ³09/10/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida delecao da marcacao.                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fDelMarc()	   						                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fDelMarc(lVldDel)

Local lRet			:= .T.
Local cHelp			:= ""
Local cMotivo		:= ""
Local nPosTipoReg	:= 0
Local nPosMotiVrg	:= 0
Local nPosTpmCrep	:= 0

DEFAULT lVldDel := .F.

If lVldDel
	lValidDel := lVldDel
EndIf

If lPort1510
	If lValidDel //lVldDel sera falso na segunda validação
		nPosTipoReg	:= GdFieldPos( "P8_TIPOREG")
		nPosMotiVrg	:= GdFieldPos( "P8_MOTIVRG")
		nPosTpmCrep	:= GdFieldPos( "P8_TPMCREP")

		//--Somente Permite a eliminacao de marcacoes originais se for informado um motivo
		If aCols[n,nPosTipoReg] == "O"
			lValidDel	:= .F.
			If !aCols[ n , nSvUsado ]
				If Empty(aCols[n,nPosMotiVrg])
					If !fGetMotivo(@cMotivo, @cHelp, 2 )
						MsgAlert( cHelp , STR0044 ) //cHelp###Atenção
						Return(.F.)
					EndIf
					aCols[ n , nPosMotiVrg ] := cMotivo
				EndIf
				aCols[ n , nPosTpmCrep ] := "D"
			Else
				aCols[ n , nPosMotiVrg ] := Space(100)
				aCols[ n , nPosTpmCrep ] := Space(1)
			EndIf
		EndIf
	Else
		lValidDel := .T.
	EndIf
EndIf

Return lRet

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pna230RecRFE ³Autor ³Leandro Drumond       ³ Data ³23/10/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Recarrega marcacoes originais da RFE.                		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Pna230RecRFE(oGet,aRecno                      		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³                                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Pna230RecRFE( oGet , aRecno )

Local aArea			:= GetArea()
Local aAreaCols		:= {}
Local aKeys			:= GetKeys()
Local cAlias		:= "SP8"
Local cKeySeek		:= ""
Local nSvColPos		:= oGet:oBrowse:nColPos
Local cCod			:= SRA->RA_MAT
Local bSeekWhile	:= {||  }
Local bSkip			:= {||  }
Local nSPZCOrd		:= 0
Local dDataPesq
Local nPosData		:= GdFieldPos( "P8_DATA")
Local nPosHora		:= GdFieldPos( "P8_HORA")
Local nPosFlag		:= GdFieldPos( "P8_FLAG")
Local nPosTurno		:= GdFieldPos( "P8_TURNO")
Local nPosCC		:= GdFieldPos( "P8_CC")
Local nPosRelogio	:= GdFieldPos( "P8_RELOGIO")
Local nPosTpMarca	:= GdFieldPos( "P8_TPMARCA")
Local nPosDataApo	:= GdFieldPos( "P8_DATAAPO")
Local nPosNumRep 	:= GdFieldPos( "P8_NUMREP")
Local nPosTpmCrep	:= GdFieldPos( "P8_TPMCREP")
Local nPosTipoReg	:= GdFieldPos( "P8_TIPOREG")
Local nPosMotiVrg	:= GdFieldPos( "P8_MOTIVRG")
Local nPosRecno  	:= GdFieldPos( "P8_REC_WT")
Local nPos			:= 0
Local nX			:= 0
Local nLenaCols		:= Len(aCols)

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Salva Area do Alias de aCols								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aAreaCols := ( cAlias )->( GetArea() )

	dDataPesq := CalendRetCpo( "P8_DATA"  )

	//Apaga todos os registros existentes
	For nX := 1 To nLenaCols
		If !Empty(aCols[ nX , nPosHora    ])
			aCols[ nX , nSvUsado ] := .T.
		EndIf
	Next nX

	DbSelectArea("SP8")
	nSPZCOrd	:= RetOrdem( "SP8" , "P8_FILIAL+P8_MAT+DTOS(P8_DATAAPO)+DTOS(P8_DATA)+STR(P8_HORA,5,2)" )
	DbSetOrder(nSPZCOrd)
	nSvColPos := 3
	cKeySeek := xFilial("SP8")+cCod+DtoS(dDataPesq)
	If DbSeek(cKeySeek)
		While SP8->( !Eof() .and. P8_FILIAL + P8_MAT + DtoS(P8_DATAAPO) == cKeySeek )
			If !SP8->P8_TIPOREG == "O" .Or. SP8->P8_TPMCREP == 'D'
				DbSkip()
				Loop
			EndIf
            //Se marcacao ja existia apenas desmarca como deletada
			IF ( nPos := aScan( aCols , { |x|	x[nPosRecno] == Recno() } ) ) > 0
            	aCols[ nPos , nSvUsado ] := .F.
            	DbSkip()
            	Loop
			EndIf
			If !Empty(aCols[ nLenaCols , nPosHora    ])
				aAdd( aCols , aClone(aCols[nLenaCols]) )
				nLenaCols++
			EndIf
			aCols[ nLenaCols , nPosData    ] := SP8->P8_DATA
			aCols[ nLenaCols , nPosHora    ] := SP8->P8_HORA
			aCols[ nLenaCols , nPosFlag    ] := SP8->P8_FLAG
			aCols[ nLenaCols , nPosTurno   ] := SP8->P8_TURNO
			aCols[ nLenaCols , nPosCC      ] := SP8->P8_CC
			aCols[ nLenaCols , nPosRelogio ] := SP8->P8_RELOGIO
			aCols[ nLenaCols , nPosTpMarca ] := SP8->P8_TPMARCA
			aCols[ nLenaCols , nPosDataApo ] := SP8->P8_DATAAPO
			aCols[ nLenaCols , nPosNumRep  ] := SP8->P8_NUMREP
			aCols[ nLenaCols , nPosTpmCrep ] := Space(1)
			aCols[ nLenaCols , nPosTipoReg ] := SP8->P8_TIPOREG
			aCols[ nLenaCols , nPosMotiVrg ] := Space(100)
			aCols[ nLenaCols , nPosRecno   ] := Recno()
			aCols[ nLenaCols , nSvUsado    ] := .F.
			If ValType(aRecno[Len(aRecno)]) == "A"
				aAdd( aRecno , { aCols[ nLenaCols , nPosRecno ] , Len(aRecno) + 1 } )
			Else
				aAdd( aRecno , aCols[ nLenaCols , nPosRecno ] )
			EndIf
			DbSkip()
		End While
	EndIf
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura Area do Alias de aCols							   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	RestArea( aAreaCols )

End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura Teclas de Atalho e Ponteiros de Entrada			   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestKeys( aKeys )
RestArea( aArea )

Return( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ P8DataApoInit³Autor³Leandro Drumond    ³ Data ³21/12/2009³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador padrao do campo P8_DATAAPO				  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P8DataApoInit()											  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³dDataApo												  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function P8DataApoInit()

Local dDataApo := Ctod('')

If !( Type("lPona180") <> "U" )
	   //-- Obtem a Data Corrente do Calendario
	dDataApo := CalendRetCpo( "P8_DATAAPO",,,"P8_"  )
Else
    dDataApo := aCols1[n,3,19]
EndIF
	 //--Garantir que data nunca seja enviada como NIL
	DEFAULT dDataApo := CtoD('')

Return( dDataApo )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ PGDataApoInit³Autor³Equipe Advanced RH ³ Data ³31/01/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador padrao do campo PG_DATAAPO				  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PGDataApoInit()											  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³dDataApo												  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function PGDataApoInit()

Local dDataApo := Ctod('')

If !( Type("lPona180") <> "U" )
   	If ( Type("aTabcalend") <> "U" )
  	  	dDataApo := CalendRetCpo( "PG_DATAAPO",,,"PG_"  )
   	Else
	   //-- Obtem a Data Corrente do Calendario
	   dDataApo := CalendRetCpo( "PG_DATAAPO",,,"PG_"  )
	EndIf
Else
   dDataApo := aCols1[n,3,19]
EndIF

Return( dDataApo )



/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Almeida     ³ Data ³09/01/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA230                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MenuDef()

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Array contendo as Rotinas a executar do programa      ³
	³ ----------- Elementos contidos por dimensao ------------     ³
	³ 1. Nome a aparecer no cabecalho                              ³
	³ 2. Nome da Rotina associada                                  ³
	³ 3. Usado pela rotina                                         ³
	³ 4. Tipo de Transa‡„o a ser efetuada                          ³
	³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	³    2 - Simplesmente Mostra os Campos                         ³
	³    3 - Inclui registros no Bancos de Dados                   ³
	³    4 - Altera o registro corrente                            ³
	³    5 - Remove o registro corrente do Banco de Dados          ³
	³    6 - Legenda                                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local aRotina := {}

		aRotina := {	{ STR0002 , "PesqBrw"	 	, 0 , 1 , ,.F.},;	//"Pesquisar"
						{ STR0003 , "Pn230Atu" 		, 0 , 2 },;			//"Visualizar"
						{ STR0004 , "Pn230Atu" 		, 0 , 4 },;			//"Incluir"
						{ STR0005 , "Pn230Atu" 		, 0 , 4 },;			//"Alterar"
						{ STR0006 , "Pn230Atu" 		, 0 , 5 },;			//"Excluir"
						{ STR0007 , "gpLegend" 		, 0 , 6, ,.F. };	//"Legenda"
					}
Return aRotina
