#INCLUDE "GPEXCVLD.CH" 
#INCLUDE "PROTHEUS.CH"

/*/{Protheus.doc} GpProcVld()
- Função responsável por buscar inconsistências na geração da DIRF.
@author: Leandro Drumond
@since:  01/01/2017
/*/
Function GpProcVld(oSelf, lClose)

Private lTab01  := .F.
Private lTab02  := .F.
Private lTab03  := .F.
Private lTab04  := .F.
Private lTab05  := .F.
Private lTab06  := .F.
Private lTabSel := .F.
Private cAno:= AllTrim(Str(Year(dDataBase)))

	oWizard := APWizard():New(	STR0036			,; // "Diagnóstico de dados da DIRF"
								STR0037			,; // "Valida os dados qeu serão utilizados na geração da DIRF"
								STR0038			,; // "Efetuando diagnóstico"
								STR0039			,; // "Selecione os itens para análise na próxima tela"
								{||.T.} 		,;
								{||.T.}			,;
								.F.				,;
								Nil				,;
								{||.T.}			,;
								Nil				,;
								{00,00,450,600})
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Painel 2 - Seleção das tabelas		                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oWizard:NewPanel(	STR0040				,; //"Itens para análise"
						STR0041				,; //"Selecione os itens para análise"
						{||.T.}				,; //<bBack>
						{||.T.}			  	,; //<bNext>
						{||.F.}				,; //<bFinish>
						.T. 				,; //<.lPanel.>
						{|| GetItensDiag()})   //<bExecute>
						
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Painel 3 - Acompanhamento do Processo               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oWizard:NewPanel(	STR0042							,; //"Executando diagnóstico de dados da DIRF"
						STR0043							,; //"Após gerar o log clique em finalizar para encerrar a operação."
						{||.F.}							,; //<bBack>
						{||.F.} 						,; //<bNext>
						{||.T.}							,; //<bFinish>
						.T. 							,; //<.lPanel.>
						{| lEnd| GpDiagExec(@lEnd)})	   //<bExecute>
	
	
	oWizard:Activate( .T.,{||oWizard := Nil, .T.},{||.T.},	{||.T.})
	
	If lClose
		//Fecha tNEwProces
		oSelf:oWnd:End()
	EndIf
	
Return Nil

/*/{Protheus.doc} GetItensDiag()
- Itens para diagnóstico
@author: Leandro Drumond
@since:  01/01/2017
/*/
Static Function GetItensDiag()

Local aRetcoords:= {}
Local oPanel	:= oWizard:oMPanel[oWizard:nPanel]
Local lTabSel	:= .F.
Private oChkTeste
Private oCheck2
Private oCheck3

aRetcoords := RetCoords(1,9,150,15,2,,,,{0,0,oPanel:oWnd:nTop*0.92,oPanel:oWnd:nLeft*0.88})

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Marca os parametros que serao utilizados	                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
TcheckBox():New(aRetcoords[01][1], aRetcoords[01][2],STR0001	,{|| lTab01 },oPanel, 300,10,,{|| lTab01:=!lTab01 },,,,,,.T.,,,) //"Avaliar inconsistências na SRD (Histórico de Movimento)"
TcheckBox():New(aRetcoords[02][1], aRetcoords[02][2],STR0002	,{|| lTab02 },oPanel, 300,10,,{|| lTab02:=!lTab02 },,,,,,.T.,,,) //"Avaliar inconsistências na SRV (Cadastro de Verbas)"
TcheckBox():New(aRetcoords[03][1], aRetcoords[03][2],STR0003	,{|| lTab03 },oPanel, 300,10,,{|| lTab03:=!lTab03 },,,,,,.T.,,,) //"Avaliar inconsistências nos cadastros de Plano de Saúde"
TcheckBox():New(aRetcoords[04][1], aRetcoords[04][2],STR0004	,{|| lTab04 },oPanel, 300,10,,{|| lTab04:=!lTab04 },,,,,,.T.,,,) //"Avaliar inconsistências na SRE (Transferências)"
TcheckBox():New(aRetcoords[05][1], aRetcoords[05][2],STR0005	,{|| lTab05 },oPanel, 300,10,,{|| lTab05:=!lTab05 },,,,,,.T.,,,) //"Avaliar inconsistências nos cálculos de Plano de Saúde"
TcheckBox():New(aRetcoords[06][1], aRetcoords[06][2],STR0045	,{|| lTab06 },oPanel, 300,10,,{|| lTab06:=!lTab06 },,,,,,.T.,,,) //"Avaliar inconsistências no registro de pagamento de verbas de férias (SRH e SRD)"
TGet():New( aRetcoords[07][1], aRetcoords[07][1], { | u | If( PCount() == 0, cAno, cAno := u ) },oPanel, 030, 010, "!@",{||!Empty(cAno)}, 0, 16777215,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,,"cAno",,,,.F.,,,STR0006  ) //"Ano Base"

TcheckBox():New(aRetcoords[09][1], aRetcoords[09][2],STR0007	,{|| lTabSel },oPanel, 300,10,,{|| fInverte(@lTabSel)},,,,,,.T.,,,) //"Inverter Seleção"

lNextPanel := .F.

Return

/*/{Protheus.doc} GpDiagExec()
- Executa diagnóstico.
@author: Leandro Drumond
@since:  01/01/2017
/*/
Static Function GpDiagExec(lEnd,lProcessa)
Local aProcAUx	 := {}
Local aTitle	 := {}
Local aLogErr	 := {}
Local cWhere	 := ""
Local cAliasTmp	 := ""
Local nProcRegua := 0
Local nX		 := 0
Local nY		 := 0
Local nPos		 := 0

DEFAULT lProcessa := .F.

If !lProcessa

	// Executa o processamento dos arquivos
	oProcess:=	MsNewProcess():New( {|lEnd| GpDiagExec(lEnd,.T.) } , STR0008 , STR0008 )     //"Executando diagnóstico de dados da DIRF"
	
	oProcess:Activate()
Else
	If lTab01
		aAdd(aProcAux,1)
		nProcRegua++
	EndIf
	If lTab02
		aAdd(aProcAux,2)
		nProcRegua++
	EndIf
	If lTab03
		aAdd(aProcAux,3)
		nProcRegua++
	EndIf
	If lTab04
		aAdd(aProcAux,4)
		nProcRegua++
	EndIf
	If lTab05
		aAdd(aProcAux,5)
		nProcRegua++
	EndIf
	If lTab06
		aAdd(aProcAux,6)
		nProcRegua++
	EndIf
	
	If nProcRegua > 0
	
		cPerDe		:= cAno + "01"
		cPerAte		:= cAno + "13"

		cAliasTmp := GetNextAlias()
	
		oProcess:SetRegua1(nProcRegua)
		
		For nX := 1 to Len(aProcAux)
			If aProcAux[nX] == 1
				oProcess:IncRegua1(STR0009) //"Avaliando inconsistências no Histórico de Movimento"
				
				cWhere := "%"
				cWhere += " SRD.RD_DATARQ >= '" + cPerDe + "' AND "
				cWhere += " SRD.RD_DATARQ <= '" + cPerAte + "' AND ("
				cWhere += " SRD.RD_PROCES = '' "
				cWhere += " OR SRD.RD_PERIODO = '' "
				cWhere += " OR SRD.RD_SEMANA = '' "
				cWhere += " OR SRD.RD_ROTEIR = '') "
				cWhere += "%"

				BeginSQL ALIAS cAliasTmp
					SELECT RD_FILIAL, RD_MAT, RD_CC, RD_ITEM, RD_CLVL, RD_DATARQ, RD_PD, RD_SEQ, RD_PROCES, RD_PERIODO, RD_SEMANA, RD_ROTEIR, RD_DTREF, SRD.R_E_C_N_O_ NRECNO
					FROM 
					%Table:SRD% SRD
					WHERE %exp:cWhere% AND
						SRD.%NotDel%
					ORDER BY RD_FILIAL, RD_MAT, RD_DATARQ
				EndSQL
				
				If !(cAliasTmp)->(Eof())
					aAdd(aTitle,STR0010) //"Inconsistências no histórico de movimento"
					aAdd( aLogErr,{} )
					aAdd( aLogErr[Len(aLogErr)], "" )
					aAdd( aLogErr[Len(aLogErr)], PadR(STR0016,FwGetTamFilial) + " " + STR0011 + " " + STR0012 + " " + STR0013 + " " + Padr(STR0014,20) + " " + STR0015 )
					While (cAliasTmp)->(!Eof())
						If Empty((cAliasTmp)->RD_PROCES)
							aAdd( aLogErr[Len(aLogErr)], (cAliasTmp)->RD_FILIAL + " " + Padr((cAliasTmp)->RD_MAT,10) + Padr((cAliasTmp)->RD_PD,6) + Padr((cAliasTmp)->RD_DATARQ,8) + StrZero((cAliasTmp)->NRECNO,20) + STR0017 + "RD_PROCES" + STR0018) //"Campo " ### " esta vazio."
						EndIf
						If Empty((cAliasTmp)->RD_PERIODO)
							aAdd( aLogErr[Len(aLogErr)], (cAliasTmp)->RD_FILIAL + " " + Padr((cAliasTmp)->RD_MAT,10) + Padr((cAliasTmp)->RD_PD,6) + Padr((cAliasTmp)->RD_DATARQ,8) + StrZero((cAliasTmp)->NRECNO,20) + STR0017 + "RD_PERIODO" + STR0018)
						EndIf
						If Empty((cAliasTmp)->RD_SEMANA)
							aAdd( aLogErr[Len(aLogErr)], (cAliasTmp)->RD_FILIAL + " " + Padr((cAliasTmp)->RD_MAT,10) + Padr((cAliasTmp)->RD_PD,6) + Padr((cAliasTmp)->RD_DATARQ,8) + StrZero((cAliasTmp)->NRECNO,20) + STR0017 + "RD_SEMANA" + STR0018)
						EndIf
						If Empty((cAliasTmp)->RD_ROTEIR)
							aAdd( aLogErr[Len(aLogErr)], (cAliasTmp)->RD_FILIAL + " " + Padr((cAliasTmp)->RD_MAT,10) + Padr((cAliasTmp)->RD_PD,6) + Padr((cAliasTmp)->RD_DATARQ,8) + StrZero((cAliasTmp)->NRECNO,20) + STR0017 + "RD_ROTEIR" + STR0018)
						EndIf
						(cAliasTmp)->(DbSkip())
					EndDo
				EndIf
			ElseIf aProcAux[nX] == 2
				oProcess:IncRegua1(STR0019) //"Avaliando inconsistências no Cadastro de Verbas"
				
				cWhere := "%"
				cWhere += " SRV.RV_IR = 'S' "
				cWhere += " AND SRV.RV_DIRF IN ('N','I1','I','', ' ') "
				cWhere += "%"

				BeginSQL ALIAS cAliasTmp
					SELECT RV_COD, RV_DESC, RV_IR, RV_DIRF
					FROM 
					%Table:SRV% SRV
					WHERE %exp:cWhere% AND
						SRV.%NotDel%
					ORDER BY RV_FILIAL, RV_COD
				EndSQL
				
				If !(cAliasTmp)->(Eof())
					aAdd(aTitle,STR0020) //"Inconsistências no Cadastro de Verbas"
					aAdd( aLogErr,{} )
					aAdd( aLogErr[Len(aLogErr)], "" )
					aAdd( aLogErr[Len(aLogErr)], STR0012 + " " + Space(21) + STR0015 )
					While (cAliasTmp)->(!Eof())
						aAdd( aLogErr[Len(aLogErr)], PadR((cAliasTmp)->RV_COD,6) + PadR((cAliasTmp)->RV_DESC,21) + STR0021) //"Verba com incidência de IR mas sem configuração para DIRF."
						(cAliasTmp)->(DbSkip())
					EndDo
				EndIf
			ElseIf aProcAux[nX] == 3
				oProcess:IncRegua1(STR0022) //"Avaliando inconsistências nos Cadastros de Plano de Saúde"
				
				BeginSQL ALIAS cAliasTmp
					SELECT COUNT(*) CONTRHK 
					FROM 
					%Table:RHK% RHK
					WHERE RHK.%NotDel%
				EndSQL
				
				If (cAliasTmp)->CONTRHK == 0 
					aAdd(aTitle,STR0023) //"Inconsistências no Cadastro de Plano de Saúde"
					aAdd( aLogErr,{} )
					aAdd( aLogErr[Len(aLogErr)], "" )
					aAdd( aLogErr[Len(aLogErr)], STR0024 )
				EndIf
			ElseIf aProcAux[nX] == 4
				oProcess:IncRegua1(STR0025) //"Avaliando inconsistências no Histórico de Transferências"

				BeginSQL ALIAS cAliasTmp
					SELECT RE_EMPD, RE_FILIALD, RE_MATD, RE_CCD, RE_DEPTOD, RE_POSTOD, RE_ITEMD, RE_CLVLD, RE_PROCESD, RE_EMPP, RE_FILIALP, RE_MATP, RE_CCP, RE_DEPTOP, RE_POSTOP, RE_ITEMP, RE_CLVLP, RE_PROCESP, RE_DATA
					FROM
					%Table:SRE% SRE
					WHERE SRE.%NotDel%
					ORDER BY RE_FILIAL, RE_DATA
				EndSQL
				
				lPrimeira := .T.
				aTransf	  := {}
				
				If !(cAliasTmp)->(Eof())
					While (cAliasTmp)->(!Eof())
						If (nPos := aScan( aTransf, { |X| X[1] == (cAliasTmp)->RE_EMPP + (cAliasTmp)->RE_FILIALP + (cAliasTmp)->RE_MATP + (cAliasTmp)->RE_CCP + (cAliasTmp)->RE_DEPTOP + (cAliasTmp)->RE_POSTOP + (cAliasTmp)->RE_PROCESP + (cAliasTmp)->RE_DATA .OR. X[2] == (cAliasTmp)->RE_EMPD + (cAliasTmp)->RE_FILIALD + (cAliasTmp)->RE_MATD + (cAliasTmp)->RE_CCD + (cAliasTmp)->RE_DEPTOD + (cAliasTmp)->RE_POSTOD + (cAliasTmp)->RE_PROCESD + (cAliasTmp)->RE_DATA } )) == 0
							aAdd(aTransf,{(cAliasTmp)->RE_EMPP + (cAliasTmp)->RE_FILIALP + (cAliasTmp)->RE_MATP + (cAliasTmp)->RE_CCP + (cAliasTmp)->RE_DEPTOP + (cAliasTmp)->RE_POSTOP + (cAliasTmp)->RE_PROCESP + (cAliasTmp)->RE_DATA, (cAliasTmp)->RE_EMPD + (cAliasTmp)->RE_FILIALD + (cAliasTmp)->RE_MATD + (cAliasTmp)->RE_CCD + (cAliasTmp)->RE_DEPTOD + (cAliasTmp)->RE_POSTOD + (cAliasTmp)->RE_PROCESD + (cAliasTmp)->RE_DATA, {}})
							(cAliasTmp)->(aAdd(aTransf[Len(aTransf)][3],{RE_EMPD, RE_FILIALD, RE_MATD, RE_CCD, RE_DEPTOD, RE_POSTOD, RE_ITEMD, RE_CLVLD, RE_PROCESD, RE_EMPP, RE_FILIALP, RE_MATP, RE_CCP, RE_DEPTOP, RE_POSTOP, RE_ITEMP, RE_CLVLP, RE_PROCESP, RE_DATA}))
						Else
							(cAliasTmp)->(aAdd(aTransf[nPos][3],{RE_EMPD, RE_FILIALD, RE_MATD, RE_CCD, RE_DEPTOD, RE_POSTOD, RE_ITEMD, RE_CLVLD, RE_PROCESD, RE_EMPP, RE_FILIALP, RE_MATP, RE_CCP, RE_DEPTOP, RE_POSTOP, RE_ITEMP, RE_CLVLP, RE_PROCESP, RE_DATA}))
						EndIf	
						(cAliasTmp)->(DbSkip())
					EndDo				
				EndIf
				
				For nPos := 1 to Len(aTransf)
					cTrfPara := ""
					For nY := 1 to Len(aTransf[nPos,3])
						If Empty(cTrfPara)
							cTrfPara := aTransf[nPos,3,nY,10] + aTransf[nPos,3,nY,11] + aTransf[nPos,3,nY,12] + aTransf[nPos,3,nY,13] + aTransf[nPos,3,nY,14] + aTransf[nPos,3,nY,15] + aTransf[nPos,3,nY,16] + aTransf[nPos,3,nY,17] +aTransf[nPos,3,nY,18] 
						Else
							If cTrfPara <> aTransf[nPos,3,nY,1] + aTransf[nPos,3,nY,2] + aTransf[nPos,3,nY,3] + aTransf[nPos,3,nY,4] + aTransf[nPos,3,nY,5] + aTransf[nPos,3,nY,6] + aTransf[nPos,3,nY,7] + aTransf[nPos,3,nY,8] +aTransf[nPos,3,nY,9]
								If lPrimeira
									aAdd(aTitle,STR0026) //"Inconsistências no Histórico de Transferências"
									aAdd( aLogErr,{} )
									aAdd( aLogErr[Len(aLogErr)], "" )
									aAdd( aLogErr[Len(aLogErr)], STR0027 + " " + STR0028 + " " + STR0029 + " " + STR0015)
								EndIf
								aAdd( aLogErr[Len(aLogErr)], PadR(aTransf[nPos,3,nY,1] + "/" + aTransf[nPos,3,nY,2] + "/" + aTransf[nPos,3,nY,3],32) + PadR(aTransf[nPos,3,nY,10] + "/" + aTransf[nPos,3,nY,11] + "/" + aTransf[nPos,3,nY,12],33) +  PadR(DtoC(StoD(aTransf[nPos,3,nY,19])),14) + "Existe divergência entre os dados de origem com os dados de destino da transferência anterior. Analisar.")									
								lPrimeira := .F.
								cTrfPara := aTransf[nPos,3,nY,10] + aTransf[nPos,3,nY,11] + aTransf[nPos,3,nY,12] + aTransf[nPos,3,nY,13] + aTransf[nPos,3,nY,14] + aTransf[nPos,3,nY,15] + aTransf[nPos,3,nY,16] + aTransf[nPos,3,nY,17] +aTransf[nPos,3,nY,18]
							Else
								cTrfPara := aTransf[nPos,3,nY,10] + aTransf[nPos,3,nY,11] + aTransf[nPos,3,nY,12] + aTransf[nPos,3,nY,13] + aTransf[nPos,3,nY,14] + aTransf[nPos,3,nY,15] + aTransf[nPos,3,nY,16] + aTransf[nPos,3,nY,17] +aTransf[nPos,3,nY,18]
							EndIf
						EndIf
					Next nY
				Next nPos
			ElseIf aProcAux[nX] == 5
				oProcess:IncRegua1(STR0030) //"Avaliando inconsistências nos Cálculos de Plano de Saúde"

				cWhere := "%"
				cWhere += " SRD.RD_DATARQ >= '" + cPerDe + "' AND "
				cWhere += " SRD.RD_DATARQ <= '" + cPerAte + "' "
				cWhere += "%"
				
				BeginSQL ALIAS cAliasTmp
					SELECT DISTINCT RD_FILIAL, RD_MAT, RD_PD, RD_DATARQ,
					(SELECT SUM(RHS_VLRFUN) RHS_VLRFUN FROM  %Table:RHS% RHS2 WHERE RD_FILIAL = RHS2.RHS_FILIAL AND RD_MAT = RHS2.RHS_MAT AND RHS2.RHS_COMPPG = RD_DATARQ AND RHS2.RHS_PD = RD_PD AND  RHS.%NotDel%) AS RHS_VLRFUN,
					(SELECT SUM(RD_VALOR) RD_VALOR FROM %Table:SRD% SRD2 WHERE SRD.RD_FILIAL = SRD2.RD_FILIAL AND SRD.RD_MAT = SRD2.RD_MAT AND SRD2.RD_DATARQ = SRD.RD_DATARQ AND SRD2.RD_PD = SRD.RD_PD AND SRD.%NotDel%) AS RD_VALOR
					FROM 
					%Table:SRD% SRD
					INNER JOIN %Table:RHS% RHS
					ON RD_FILIAL = RHS_FILIAL AND RD_MAT = RHS_MAT AND RHS_COMPPG = RD_DATARQ AND RHS_PD = RD_PD
					WHERE %exp:cWhere% AND SRD.%NotDel% AND RHS.%NotDel%
					ORDER BY RD_FILIAL, RD_MAT, RD_DATARQ, RD_PD
				EndSQL
				
				lPrimeira := .T.
								
				If !(cAliasTmp)->(Eof())
					
					While (cAliasTmp)->(!Eof())
						If (cAliasTmp)->RD_VALOR <> (cAliasTmp)->RHS_VLRFUN
							If lPrimeira
								aAdd(aTitle,STR0031) //"Inconsistências no Cálculo de Plano de Saúde"
								aAdd( aLogErr,{} )
								aAdd( aLogErr[Len(aLogErr)], "" )
								aAdd( aLogErr[Len(aLogErr)], PadR(STR0016,FwGetTamFilial) + " " + STR0011 + " " + STR0012 + " " + STR0013 + " " + STR0032 + Space(7) + STR0033 + Space(7) + STR0015 )
								lPrimeira := .F.
							EndIf
							aAdd( aLogErr[Len(aLogErr)], (cAliasTmp)->RD_FILIAL + " " + Padr((cAliasTmp)->RD_MAT,10) + Padr((cAliasTmp)->RD_PD,6) + Padr((cAliasTmp)->RD_DATARQ,8) + PADR(Transform((cAliasTmp)->RD_VALOR,'@E 999,999,999.99'),16) + PADR(Transform((cAliasTmp)->RHS_VLRFUN,'@E 999,999,999.99'),16) + STR0034) //"Valor do histórico de movimento não confere com valor do histórico de plano de saúde"
						EndIf					
						(cAliasTmp)->(DbSkip())
					EndDo 
				EndIf				
			ElseIf aProcAux[nX] == 6
				oProcess:IncRegua1( STR0044 ) //"Avaliando inconsistências no registro de pagamento de verbas de férias (SRH e SRD)"


				aAdd( aLogErr, {} )
				fVldVrbFer(@aLogErr[Len(aLogErr)], , @aTitle, cAno)
	
			EndIf
			
			If SELECT(cAliasTmp) > 0
				(cAliasTmp)->(DbCloseArea())
			EndIf
						
		Next nX
		
		If Empty(aTitle)

			aAdd( aTitle,  "Inconsistências encontradas:" )
			aAdd( aLogErr, {} )
			aAdd( aLogErr[Len(aLogErr)], "Não foram encontradas inconsistências" )
			
		Endif		
		
		MsAguarde( { || fMakeLog( aLogErr , aTitle , NIL  , .T. , "GPEM550" , NIL , NIL, NIL, NIL, .F. ) } ,  STR0035 ) //"Resultado do Diagnóstico"
		
	EndIf
EndIf

Return

/*/{Protheus.doc} fInverte()
- Inverte seleção
@author: Leandro Drumond
@since:  01/01/2017
/*/
Static Function fInverte(lRet)

lTab01 := !lTab01
lTab02 := !lTab02
lTab03 := !lTab03
lTab04 := !lTab04
lTab05 := !lTab05
lTab06 := !lTab06

oWizard:RefreshButtons()

Return !lRet
