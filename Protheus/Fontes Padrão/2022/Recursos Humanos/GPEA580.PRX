#INCLUDE "PROTHEUS.CH"
#INCLUDE "GPEA1090.CH"

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GPEA580   ³Autor³Tatiane Vieira Matias    ³ Data ³17/05/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Lancamentos por Periodo - RGB						        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico                                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL           ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Programador ³Data      ³BOPS 	    ³Motivo da Alteracao                ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Leandro Dr.³ 21/11/13 ³			³Unificacao da Folha			    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea580(nOpcAuto, xAutoCab, xAutoItens, nOpc, nModo, cId)

	Local aSvRotSetOpc	:= {}
	Local aArea			:= GetArea()
	Local lGestPubl:= IIF(ExistFunc("fUsaGFP"), fUsaGFP(), .F.)
	Local cFiltraRH     := ""
    Local oBrowse
	Local nPosFil	:= 0
	Local nPosMat	:= 0
	
	Default nModo := 1

	Private aArray		:= {}
	Private cLancAlias  := "RGB"
	Private lSetF3		:= .F.		//VARIAVEL PARA SABER SE PASSOU NO F3 DA MATRICULA
	Private cLancDemi	:= Upper( AllTrim( GetMv("MV_DEMISRC") ) )
	Private cNumId		:= IIf( cId=Nil, "", cId ) //Usado para Consignado / Techfin (GPEA090)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ DEFINE ARRAY CONTENDO AS ROTINAS A EXECUTAR DO PROGRAMA      ³
	//³ ----------- ELEMENTOS CONTIDOS POR DIMENSAO ------------     ³
	//³ 1. NOME A APARECER NO CABECALHO                              ³
	//³ 2. NOME DA ROTINA ASSOCIADA                                  ³
	//³ 3. USADO PELA ROTINA                                         ³
	//³ 4. TIPO DE TRANSA‡„O A SER EFETUADA                          ³
	//³    1 - PESQUISA E POSICIONA EM UM BANCO DE DADOS             ³
	//³    2 - SIMPLESMENTE MOSTRA OS CAMPOS                         ³
	//³    3 - INCLUI REGISTROS NO BANCOS DE DADOS                   ³
	//³    4 - ALTERA O REGISTRO CORRENTE                            ³
	//³    5 - REMOVE O REGISTRO CORRENTE DO BANCO DE DADOS          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Private aRotina		:= MenuDef() // ajuste para versao 9.12 - chamada da funcao MenuDef() que contem aRotina
	Private lGp580Auto	:= ( xAutoCab<>Nil )
	Private aAutoCab	:= Nil
	Private aAutoItens	:= Nil
	Private lNoShowFunc := .F.  //variavel para não possibilitar navegacao entre funcionarios na chamada da rotina a partir da rescisao
	Private nModAuto 	:= nModo
	Private cProcesso	:= ""
	
	If (Type( "lResM2" ) <> "U" .And. lResM2) //Tratamento para chamada da rotina atraves de tela de rescisão (Modelo 2)
		Private lAltRGB:= .F.

		lNoShowFunc := .T.
		If FWChkFuncAccess( "GPEA580", 4, .T.)
			Gpea090Mnt( "SRA" , 1 , 4 ) //, , , , , lAltRGB )
		Elseif FWChkFuncAccess( "GPEA580", 2, .T.)
			Aviso( STR0040, STR0058, {STR0059}) //"Anteção" ## "Permissão somente de visualização dos registros." ## "OK"
			Gpea090Mnt( "SRA" , 1 , 2 )//, , , , , lAltRGB )
		Else
			Aviso( STR0040, STR0050, {STR0059}) //"Anteção" ## "O usuário não tem permissão de acesso a esta rotina." ## "OK"
		Endif
		lNoShowFunc := .F.
	Endif

	If cPaisLoc == "RUS"
		cCadastro := OemToAnsi(STR0090)  //"Additional Payment"
	Else
		cCadastro := OemToAnsi(STR0009)  //"Lancamentos Por Periodo"
	EndIf

	If nOpcAuto <> Nil
		If FunName() == "GPEM030"
			RGB->(DbSetOrder(1))
			If RGB->(DbSeek(SRA->RA_FILIAL + SRA->RA_MAT))
				nOpcAuto := 4
			Else
				nOpcAuto := 3
			EndIf
			lNoShowFunc := .T.
		EndIf
		aSvRotSetOpc := aRotSetOpc( NIL , NIL , nOpcAuto )
		dbSelectArea('SRA')
		nPos := Ascan(aRotina,{|x| x[4]== nOpcAuto})
		If ( nPos <> 0 )
			bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPos,2 ] + "(a,b,c,d,e) }" )
			Eval( bBlock, Alias(), (Alias())->(Recno()),nPos)
		EndIf
		aRotReSetOpc( aSvRotSetOpc )

	Elseif (Type( "lResM2" ) == "U" .Or. !lResM2)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se o Arquivo Esta Vazio                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lGp580Auto
			aAutoCab := xAutoCab
			aAutoItens := xAutoItens

			mBrowseAuto(nOpc, aAutoCab, "SRA")
		Else
			If !lGestPubl
				If !ChkVazio("SRA")
					Return( NIL )
				Endif

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Inicializa o filtro utilizando a funcao FilBrowse, Faltara um filtro   ³
				//³ da tabela SRC que sera executado depois do dbSetOrder pois o dbSetOrder|
				//³ elimina o filtro do FilBrowse                                          |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			  	aArray := {"SRA", "SRV", "RGB" }
				ffiltro("GPEA580",aArray,2)//2- Cria as variaveis
				ffiltro("GPEA580",aArray,1,1)//1- Executa os Filtros

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Endereca a funcao de BROWSE                                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("SRA")
				mBrowse( 6, 1,22,75,"SRA",,,,,,fCriaCor() )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Deleta o filtro utilizando a funcao FilBrowse                     	   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				ffiltro("GPEA580",aArray,0)//0- Limpa os filtros
			Else
				oBrowse := FWMBrowse():New()
				oBrowse:SetAlias('SRA')
				oBrowse:SetDescription(STR0009) ////"Lancamentos Por Periodo"
				GpLegend(@oBrowse,.T.) //Cria legenda
				oBrowse:SetMenuDef( 'GPEA580' )
				oBrowse:SetChgAll(.F.)

				//------------------------------------------
				//Busca o filtro a ser utilizado no Browse
				//------------------------------------------
				cFiltraRh 	:= CHKRH("GPEA580","SRA","1")
				cFiltraRh += IF(!Empty(cFiltraRh),' .and. ','')
		    	If cModulo $ "GFP*VDF"
		    		cFiltraRh += " (SRA->RA_REGIME == '2' ) "
		    	ElseIf cModulo == "GPE"
		    	 	cFiltraRh += " (SRA->RA_REGIME == '1' .OR. Empty(SRA->RA_REGIME) ) "
		    	EndIf

				//Filtro padrao do Browse conforme tabela SRW (Controle de Restricoes de Usuarios)
				oBrowse:SetFilterDefault(cFiltraRh)
				oBrowse:Activate()
			EndIf
		Endif
	EndIf

RestArea(aArea)
If Type( "lResM2" ) <> "U" .And. lResM2 .And. Type( "lAltRGB" ) <> "U"  //Tratamento para chamada da rotina atraves de tela de rescisão (Modelo 2)
	Return(lAltRGB)
Else
	Return ()
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Tatiane Matias   ³ Data ³17/05/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA580                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function MenuDef()
	Local aRotina :=  {}

	aAdd(aRotina, { STR0004, "PesqBrw",		0, 1 } ) //"Pesquisar"
	aAdd(aRotina, { STR0005, "Gpea090Mnt",	0, 2 } ) //"Visualizar"
	aAdd(aRotina, { STR0006, "Gpea090Mnt",	0, 3 } ) //"Incluir"
	aAdd(aRotina, { STR0007, "Gpea090Mnt",	0, 4 } ) //"Alterar"
	aAdd(aRotina, { STR0008, "Gpea090Mnt",	0, 5 } ) //"Excluir"
	If SX1->(DbSeek("GPEA580"))
		aAdd(aRotina, { STR0106, "Gpea580Lot",	0, 5 } ) //"Excluir em Lote"
	EndIf
	If cPaisLoc == 'RUS'
		aAdd(aRotina, { STR0031, "GPEA58001",	0, 6 , NIL, .F. } ) //"Legenda"
	Else
		aAdd(aRotina, { STR0031, "GpLegend",	0, 6 , NIL, .F. } ) //"Legenda"
	EndIf

Return aRotina

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fValAcRgb		     ºAutor  ³Equipe RH     º Data ³ 25/09/17 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao usada para validar controle de acesso de usuário     º±±
±±º          ³na tabela RGB                                               º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ GPEA580 - Lancamentos por Periodo				          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fValAcRgb()

Local cFiltro := ""
Local nPos:= 0
cFiltro	:= ChkRH("GPEA580","RGB","1")

nPos := At("-",cFiltro)
cFiltro := "(M" + Substr(cFiltro,nPos)

If !&(cFiltro)
	MSGALERT(STR0085,STR0084) //Controle de acesso # Usuário sem permissão para essa operação.
EndIf

Return &(cFiltro)

/*{Protheus.doc} GPEA58001
	(long_description)
	@type  Function
	@author Din Whitechurch
	@since 2018-08-26
	@version version
	@param param, param_type, param_descr
	@return return, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	*/
 Function GPEA58001( )
 Local aLegend as Array
	aLegend := { 	{ "BR_VERDE", STR0093 } ,;
					{ "BR_VERMELHO", STR0094 } }

	BrwLegenda ( STR0093, STR0094, aLegend )

Return ( .T. )


Function GpPDRusVld(cChave)
	Local lRetorno := .T.
	Local aArea As Array
	Local aAreaSRV As Array
	Default cChave := M->RGB_PD

	aArea := GetArea()
	aAreaSRV := SRV->(GetArea())
	dbSelectArea( "SRV" )
	PosSRV( cChave, XFilial("SRV") , "RV_COD" )

	If (cPaisLoc == "RUS" .AND. SRV->RV_LEEINC =="2")
		lRetorno := .F.
		Help(,,,STR0040,STR0061,1,0)
	EndIf

	RestArea(aAreaSRV)
	RestArea(aArea)

Return (lRetorno)
/*/{Protheus.doc} Gpea580Lot
Exclusão de lançamentos em Lote
@author Leandro Drumond
@since 30/04/2019
@type function
/*/
Function Gpea580Lot()

Local aSays			:= {}
Local aButtons		:= {}
Local cPerg			:= "GPEA580"
Local nOpcA			:= 0.00

Private cTabela		:= ""
Private cCadastro	:= STR0100 //"Exclusão de Lançamentos em Lote"
Private cFilRCJ 	:= ""

aAdd(aSays,OemToAnsi(STR0101) ) //"Este programa exclui as verbas do lançamentos mensais."
aAdd(aSays,OemToAnsi(STR0102) ) //"Informe o tipo de lançamento e as verbas para exclusão ou digite [*] ( Asterisco ) "
aAdd(aSays,OemToAnsi(STR0103) ) //"para excluir todas as verbas do tipo escolhido."
aAdd(aSays,OemToAnsi(STR0104) )	//"Verbas integradas não serão excluídas, para estas utilize "
aAdd(aSays,OemToAnsi(STR0105) )	//"a rotina de cancelamento de integração. "
aAdd(aButtons, { 5,.T.,{|| Pergunte(cPerg,.T. ) } } )
aAdd(aButtons, { 1,.T.,{|o| nOpcA := 1,IF(gpconfOK(),FechaBatch(),nOpcA:=0) }} )
aAdd(aButtons, { 2,.T.,{|o| FechaBatch() }} )

cFilant := FWPesqSM0("M0_CODFIL",cEmpAnt) //Escolher a filial para exclusão em Lote

FormBatch( cCadastro, aSays, aButtons )

If nOpcA == 1
	Processa({|lEnd| GPA580Processa( cPerg ),STR0100})  //"Exclusão de Lançamentos em Lote"
EndIf

Return Nil

/*/{Protheus.doc} Gpa580Processa
Exclusão de lançamentos em Lote
@author Leandro Drumond
@since 30/04/2019
@type function
/*/
Static Function Gpa580Processa( cPerg )
Local cCanPro	 := ""
Local cCanRot	 := ""
Local cCanPer	 := ""
Local cCanNpg	 :=	""
Local cFilDe     := ""
Local cFilAte    := ""
Local cCcDe      := ""
Local cCcAte     := ""
Local cMatDe     := ""
Local cMatAte    := ""
Local cCategoria := ""
Local cSituacao  := ""
Local cCanVrb	 := ""
Local cWhere	 := ""
Local cCodigo    := ""
Local cSitQuery	 := ""
Local cCatQuery	 := ""
Local cMatDel	 := ""
Local cAcessaSRA := &( " { || " + IF( Empty( cAcessaSRA := ChkRH( "GPEA580" , "SRA" , "2" ) ) , ".T." , cAcessaSRA ) + " } " )
Local cFilAnter	 := "_cFilAnter"
Local nTipLanc   := 0
Local nX		 := 0.00
Local lCanTod	 := .F.
Local lAvisoBlq  := .T.
Local lFilValid  := .T.
Local lValidar	 := .T.
Local lExcluiu	 := .F.
Local aOfusca	 := If(FindFunction('ChkOfusca'), ChkOfusca(), { .T., .F. }) //[2]Ofuscamento
Local aFldRel	 := If(aOfusca[2], FwProtectedDataUtil():UsrNoAccessFieldsInList( {"RA_NOME"} ), {})
Local lOfusca	 := Len(aFldRel) > 0

Private cFilRCJ 	:= ""

// VerIFica as perguntas selecionadas
Pergunte( cPerg , .F. )

// Carregando as Perguntas
cCanPro	  	:= 	mv_par01	//Processo
cCanRot	  	:= 	mv_par02	//Roteiro
cCanPer	  	:= 	mv_par03	//Periodo
cCanNpg	  	:=	mv_par04	//Numero de Pagamento
nTipLanc    := 	mv_par05	//Tipo de Lançamento - 1-Informado/2-Gerado/3-Ambos
cCodigo     :=  mv_par06	//Informe as verbas
cFilDe      :=  mv_par07	//Filial De
cFilAte     :=  mv_par08	//Filial Ate
cMatDe      :=  mv_par09	//Matricula De
cMatAte     :=  mv_par10	//Matricula Ate
cCcDe       :=  mv_par11	//Centro de Custo De
cCcAte      :=  mv_par12	//Centro de Custo Ate
cCategoria  :=  mv_par13 	//Categorias
cSituacao   :=  mv_par14 	//Situacoes

If Empty(cCanPro) .or. Empty(cCanRot) .or. Empty(cCanPer) .or. Empty(cCanNpg)
	Help(, , STR0040, , OemToAnsi(STR0109), 1, 0, , , , , , { STR0110 }) //"Atenção" ### "As perguntas processo, roteiro, período e número de pagamento são de preenchimento obrigatório." ### "Preencha as perguntas."
	Return(.F.)
EndIf

// Monta String para Testar as Verbas
For nX = 1 To 30 Step 3
	cCanVrb += SubStr(cCodigo,nX,3)
	cCanVrb += "/"
Next nX

If "*" $ cCanVrb
	lCanTod := .T.
Else
	cCanVrb := STRTRAN(cCanVrb, "   /", NIL)
	cCanVrb := Substr(cCanVrb, 1, Len(cCanVrb) -1 )
	cCanVrb := STRTRAN(cCanVrb, "/", "','")
EndIf

cSitQuery	:= ""
For nX:=1 to Len(cSituacao)
	cSitQuery += "'"+Subs(cSituacao,nX,1)+"'"
	If ( nX+1 ) <= Len(cSituacao)
		cSitQuery += ","
	Endif
Next nX

cCatQuery	:= ""
For nX:=1 to Len(cCategoria)
	cCatQuery += "'"+Subs(cCategoria,nX,1)+"'"
	If ( nX+1 ) <= Len(cCategoria)
		cCatQuery += ","
	Endif
Next nX

cSitQuery	:= "%" + cSitQuery + "%"
cCatQuery	:= "%" + cCatQuery + "%"

cFilAux := "% "
cFilAux += " SRA.RA_PROCES = '" + cCanPro + "' AND "
cFilAux += " SRA.RA_FILIAL >= '" + cFilDe + "' AND "
cFilAux += " SRA.RA_FILIAL <= '" + cFilAte + "' AND "
cFilAux += " SRA.RA_CC >= '" + cCcDe + "' AND "
cFilAux += " SRA.RA_CC <= '" + cCcAte + "' AND "
cFilAux += " SRA.RA_MAT >= '" + cMatDe + "' AND "
cFilAux += " SRA.RA_MAT <= '" + cMatAte + "' %"

BeginSql alias "CNTSRA"
	SELECT COUNT(*) AS CONTADOR
	FROM %table:SRA% SRA
	WHERE %exp:cFilAux% AND
			SRA.RA_SITFOLH IN (%exp:Upper(cSitQuery)%) AND
			SRA.RA_CATFUNC IN (%exp:Upper(cCatQuery)%) AND
			SRA.%NotDel%
EndSql

// Carrega Regua Processamento
ProcRegua( CNTSRA->(CONTADOR) )

CNTSRA->( dbCloseArea() )

BeginSql alias "SRAAUX"
	SELECT RA_FILIAL, RA_MAT
	FROM %table:SRA% SRA
	WHERE %exp:cFilAux% AND
			SRA.RA_SITFOLH IN (%exp:Upper(cSitQuery)%) AND
			SRA.RA_CATFUNC IN (%exp:Upper(cCatQuery)%) AND
			SRA.%NotDel%
	ORDER BY SRA.RA_FILIAL, SRA.RA_MAT
EndSql

SRA->(DbSetOrder(1))

DbSelectArea("RGB")
DbSetOrder(RetOrder("RGB","RGB_FILIAL+RGB_PROCES+RGB_PERIOD+RGB_SEMANA+RGB_ROTEIR+RGB_MAT+RGB_PD+RGB_SEQ"))

While SRAAUX->( !Eof() )

	SRA->(DbSeek(SRAAUX->(RA_FILIAL+RA_MAT)))

	If cFilAnter != SRA->RA_FILIAL
		cFilAnter := SRA->RA_FILIAL
		lValidar  := .T.
	EndIf

	If lValidar
		lValidar  := .F.
		lFilValid := .T.
		If !( SRA->RA_FILIAL $ fValidFil() ) .or. !Eval( cAcessaSRA )
			lFilValid := .F.
			SRAAUX->( dbSkip() )
			IncProc()
			Loop
		EndIf
	    //Verifica se o calculo esta Liberado
		If !( lFilValid := fVldAccess( SRA->RA_FILIAL, Stod( cCanPer + "01" ), cCanNpg, lAvisoBlq, cCanRot, "2" ) )
		    lAvisoBlq := .F.
		    SRAAUX->( dbSkip() )
			IncProc()
			Loop
		EndIf
	ElseIf !lFilValid
		 lAvisoBlq := .F.
		 SRAAUX->( dbSkip() )
		 IncProc()
		 Loop
	EndIf

	cKeyRGB := SRA->RA_FILIAL+cCanPro+cCanPer+cCanNpg+cCanRot+SRA->RA_MAT

	If RGB->(MsSeek(cKeyRGB))
		While RGB->(!Eof() .and. RGB_FILIAL+RGB_PROCES+RGB_PERIOD+RGB_SEMANA+RGB_ROTEIR+RGB_MAT == cKeyRGB)
			If ( ( nTipLanc == 1 .and. RGB_TIPO2 <> "I" ) .or. (nTipLanc == 2 .and. RGB_TIPO2 <> "G") )
				RGB->(DbSKip())
				Loop
			EndIf

			If !lCanTod .and. !(RGB->RGB_PD $ cCanVrb)
				RGB->(DbSKip())
				Loop
			EndIf

			If !Empty(RGB->RGB_ROTORI)
				RGB->(DbSKip())
				Loop
			EndIf

			RecLock("RGB",.F.)
			RGB->(DbDelete())
			RGB->(MsUnLock())
			lExcluiu := .T.

			RGB->(DbSKip())
		EndDo
	EndIf

	// Incrementa Regua Processamento
	IncProc(SRA->RA_FILIAL+" - "+SRA->RA_MAT+" - "+ If(lOfusca, Replicate('*',15), SRA->RA_NOME) )

	// Proximo Funcionario
	SRAAUX->( dbSkip() )

End While

SRAAUX->( dbCloseArea() )

If lExcluiu
	MsgInfo(STR0107) //"Verbas excluídas com êxito."
Else
	MsgInfo(STR0108) //"Nenhuma verba atende os filtros informados."
EndIf

Return( NIL )

/*/{Protheus.doc} Gp580VldPer
Valida filtro de período de excllusão de lançamentos
@author Leandro Drumond
@since 02/05/2019
@type function
/*/
Function Gp580VldPer(cChave, lCarrega)
Local aArea		:= GetArea()
Local aPerAtual := {}
Local cFilRCH 	:= xFilial("RCH")
Local lRet 		:= Vazio()

DEFAULT lCarrega := .F.

DbSelectArea("RCH")
DbSetOrder(4) //RCH_FILIAL+RCH_PROCES+RCH_ROTEIR+RCH_PER+RCH_NUMPAG

If RCH->(DbSeek(cFilRCH + cChave))
	lRet := .T.
	If lCarrega
		If fGetPerAtual( @aPerAtual, cFilRCJ, RCH->RCH_PROCES, RCH->RCH_ROTEIR )
			SetMVValue("GPEA580","MV_PAR01",RCH->RCH_PROCES)
			SetMVValue("GPEA580","MV_PAR02",RCH->RCH_ROTEIR)
			SetMVValue("GPEA580","MV_PAR03",aPerAtual[1,1])
			SetMVValue("GPEA580","MV_PAR04",aPerAtual[1,2])
			//Grava as alteracoes
			Pergunte("GPEA580",.F.)
		EndIf
	EndIf
EndIf

RestArea(aArea)

Return lRet
