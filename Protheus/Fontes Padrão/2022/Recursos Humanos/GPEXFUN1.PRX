#INCLUDE "PROTHEUS.CH" 
#INCLUDE "GPEX1FUN.CH"

Static lTsRep	:= GetMvRH("MV_TSREP", Nil, .F.)
Static __oSt1
Static __oStSal
Static __oStTit
Static __cEmpAux
Static __lRCMCong
Static lGestPubl:= IIF(ExistFunc("fUsaGFP"), fUsaGFP(), .F.)
Static lGpeMater
Static oTmpMED
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³			ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.			  			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data	³ BOPS/FNC		 ³  Motivo da Alteracao 					³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³07/11/12³M12RH01_RQ0008  |Unificacao da folha. Funcoes RGBValidPd e ³±±
±±³            ³        ³                |MontaF3SRV movidas do GPEA520(obsoleto).  ³±±
±±³Renata      ³29/04/14³TPKANK          ³Incluido retorno do campo Desc.Cont.Sind. ³±±
±±³            ³        ³				 ³do tipo de ausencia na funcao fBuscaAfast,³±± 
±±³            ³        ³			     ³e na funcao fChkAfas, incluido parametro  ³±± 
±±³            ³        ³			     ³para este retorno. Ele e utilizado na fun-³±± 
±±³            ³        ³			     ³cao Sindical()							³±± 
±±³Christiane V³08/05/14³TPMJR2          ³Alteração na função fBuscaAfast para que o³±±
±±³            ³        ³                ³campo RCM_CODRAI seja atualizado no array ³±±
±±             ³        ³                ³aAfast. Inclusão do R8_DPAGOS no aAfast e ³±±
±±³            ³        ³                ³inclusão de funções (requisito MANAD).    ³±±
±±³Cecilia Car.³13/05/14³TPIII1          ³Alteração na função fTransf para que seja ³±±
±±³            ³        ³                ³trazido o registro da tabela SRE na visua-³±±
±±             ³        ³                ³lizacao.                                  ³±±
±±³Antonio Car.³24/06/14³TPJZP8          ³Réplicas V11 para V12 rotinas do Manad.   ³±±
±±³Cecilia Car.³02/07/14³TPY658          ³Alteração na função MontaF3SRV para que os³±±
±±³            ³        ³                ³registros de SRM sejam trazidos quando a- ³±±
±±             ³        ³                ³cinada a consulta padrao do campo RGB_PD  ³±±
±±             ³        ³                ³(MEX).                                    ³±±
±±³Esther      ³21/08/14³M_RH003_294903  ³Limpeza no fonte: Troca do uso da tabela  ³±±
±±³  Viveiro   ³        ³                ³SI3 para usar a table CTT.                ³±±
±±³Gustavo M.  ³22/09/14³TQPFB5          ³Ajuste na funcao fgrpverba, copia da Fase4³±±
±±³Renan Borges³13/10/14³TQPEX4          ³Ajuste para imprimir corretamente descri- ³±±
±±³            ³        ³                ³ção quando o campo possui 30 caracteres e ³±±
±±³            ³        ³                ³está dentro do limite para utilização sem ³±±
±±³            ³        ³                ³afetar os relatórios.                     ³±±
±±³Wag Mobile  ³21/01/15³TRIIKI          ³Ajuste para imprimir corretamente descri- ³±±
±±³Allyson M   ³19/02/15³TRNGHC          ³Ajuste na busca das transferencias 		³±±
±±³Allyson M   ³04/06/15³TSHXNY          ³Correcao na funcao RetSituacao, declarando³±±
±±³            ³        ³                ³variavel quando ha integracao com TSA. 	³±±
±±³Allyson M   ³24/06/15³TSEUGU          ³Ajuste em fBuscaAfast() p/ quando for     ³±±
±±³            ³        ³                ³verificacao dos dias de ferias em dobro 	³±±
±±³            ³        ³                ³p/ trazer a continuacao do afastamento que³±±
±±³            ³        ³                ³esteja com data superior ao da pesquisa   ³±±
±±³            ³        ³                ³(conceito da versao P11)					³±±
±±³Luis Artuso ³03/07/15³TSGNVO          ³Melhorias no processo de integração do TSA³±±
±±³Luis Artuso ³15/09/15³TTIP56          ³Corrigido errorlog devido erro na inicia- ³±±
±±³            ³        ³                ³lizacao da variavel lAtuRHEXP.			³±±
±±³Allyson M.  ³16/10/15³TTPMJ1   	     ³Ajuste p/ integracao com TSA p/ executar  ³±±
±±³            ³        ³   		  	 ³metodo WSNatural() antes de WsUser()      ³±±
±±³Allyson M.  ³08/12/15³TTU588  	     ³Ajuste em fRetAfasBra() p/ validar os dias³±±
±±³            ³        ³   		  	 ³de licenca maternidade corretamente       ³±±
±±³M. Silveira ³27/01/16³TUHCMG  	     ³Ajuste em fRetAfas para fazer a carga dos ³±±
±±³            ³        ³   		  	 ³Mnemonicos antes de chamar a fRetAfasBra. ³±±
±±³Allyson M.  ³10/02/16³TUJQLJ   	  	 ³Ajuste na quantidade de dias pagos no     ³±±
±±³            ³        ³   		  	 ³afastamento p/ verificar o parametro      ³±±
±±³            ³        ³   		  	 ³MV_DIASPER quando nao for ferias		    ³±±
±±³Raquel Hager ³19/02/16³TUKE03   	     ³Ajuste na quantidade de dias pagos no     ³±±
±±³             ³        ³   		  	 ³afastamento - descontar do afastamento e  ³±±
±±³             ³        ³   		  	 ³não dos dias de salario, exceto para      ³±±
±±³             ³        ³   		  	 ³RCM_TIPOAF = 4.							³±±
±±³Raquel Hager³01/03/16³TUPOEE   	     ³Ajuste na quantidade de dias afastados    ³±±
±±³            ³        ³   		  	 ³para mes de Fevereiro.                    ³±±
±±³Raquel Hager³03/03/16³TUPOEE   	     ³Ajuste no uso da variavel correta para    ³±±
±±³            ³        ³   		  	 ³comparacao dos dias.						³±±
±±³Marcia Moura³04/03/16³TUOODZ   	     ³Gravacao da qquantidade de dias a pagar   ³±±
±±³            ³        ³   		  	 ³pela empresa originalmente (15/30)  		³±±
±±³Gustavo M.  ³30/03/16³TUVWVG   	     ³Melhoria de performance no calculo de fol ³±±
±±³Raquel Hager³07/04/16³TUQU95   	     ³Ajuste para afastamentos em Fevereiro que ³±±
±±³            ³        ³   		  	 ³ultrapassam o periodo em aberto.    		³±±
±±|Renan Borges|10/05/16|TUUGR8      	 |Ajuste para que ao ser realizada a transfe³±±
±±|            |        |        		 |rência entre Filiais, seja gravado correta³±±
±±|            |        |        		 |mente o campo RA_AFASFGT.Ajuste para visua³±±
±±|            |        |        		 |lização de funcionários demitidos, sem per³±±
±±|            |        |        		 |mitir transferi-los.                      ³±±
±±³Renan Borges³20/05/16³TUZGS1  	     ³Ajuste para que em Fevereiro seja propor- ³±±
±±³            ³        ³   		  	 ³cionalizado pelos dias do periodo quando  ³±±
±±³            ³        ³   		  	 ³funcionário for admitido no mes, demitido ³±±
±±³            ³        ³   		  	 ³possuir afastamento, ou férias.           ³±±
±±³Raquel Hager³07/06/16³TVCF61  	     ³Ajuste para atualizar situação do funcio- ³±±
±±³            ³        ³   		  	 ³nário apenas para afastamentos cuja dura- ³±±
±±³            ³        ³   		  	 ³ção for maior que os dias pagos pela emp. ³±±
±±³Allyson M.  ³13/06/16³TVFLHE   	  	 ³Ajuste em fBuscaAfast() p/ refazer query  ³±±
±±³            ³        ³   		  	 ³quando tiver busca especifica por tipo de ³±±
±±³            ³        ³   		  	 ³afastamento 								³±±
±±³Renan Borges³14/06/16³TVIGQD  	     ³Criação do Mnemonico P_PGSALFEV para que  ³±±
±±³            ³        ³   		  	 ³seja possível definir se em fevereiro será³±±
±±³            ³        ³   		  	 ³utilizado os dias do mês (Art. 64 a CLT)  ³±±
±±³            ³        ³   		  	 ³ou 30 dias.                               ³±±
±±³Gabriel A.  ³28/06/16³TVJS63          ³Ajuste na busca de transferências.        ³±±
±±³Allyson M.  ³06/07/16³TVOPSQ   	  	 ³Ajuste em fRetAfasBra() quando verificar  ³±±
±±³            ³        ³   		  	 ³afastamento p/ 13o na rescisao      		³±±
±±³Matheus M.  ³12/07/16³TVJFUR   	  	 ³Ajuste no tratamento da query na função   ³±±
±±³            ³        ³   		  	 ³fBuscaAfast quando a tabela RCM for compar³±±
±±³            ³        ³   		  	 ³tilhada e o database for Oracle.     		³±±
±±³ M.Camargo  ³15/06/16³TVOXVG          ³Tratamiento finiquitos para Republica Domi³±±
±±³            ³        ³	             ³nicana modificación funcion RetSituacao(  ³±±
±±³Renan Borges³10/06/16³TVLTB7          ³Ajuste na impressão da folha de pagamento ³±±
±±³            ³        ³	             ³quando funcionário possuir dissidio retroa³±±
±±³            ³        ³	             ³tivo, seja impresso corretamente o salário³±±
±±³            ³        ³	             ³da época, de acordo com a data de calculo ³±±
±±³            ³        ³	             ³do dissidio do histórico salarial.        ³±±
±±³Allyson M.  ³15/08/16³TVUEAY  	     ³Ajuste para atualizar situação do funcio- ³±±
±±³            ³        ³   		  	 ³nário quando incluso afastamento que não é³±±
±±³            ³        ³   		  	 ³por acidente/doença 						³±±
±±³ M.Camargo  ³28/07/16³TVOXVG        ³Tratamiento finiquitos para Republica Domini³±±
±±³            ³        ³	           ³cana modificación funcion RetSituacao()     ³±±
±±³            ³        ³	           ³que actualice SRA->RA_TIPOFIN:=RG_TIPORES   ³±±
±±³Allyson M.  ³20/09/16³TVUGMX  	     ³Ajuste p/ tratar corretamente os afasta-  ³±±
±±³            ³        ³   		  	 ³mentos com dias pagos pela empresa com du-³±±
±±³            ³        ³   		  	 ³ração menor que os dias pagos pela empresa³±±
±±³Allyson M.  ³18/10/16³TWGFHX  	     ³Ajuste p/ tratar corretamente os afasta-  ³±±
±±³            ³        ³   		  	 ³mentos sem data final preenchida			³±±
±±³M. Camargo  ³10/11/16³TSSERMI01-58    ³Modificación RetSituacao  por Localizacion³±±
±±³            ³        ³                ³ Chile                                    ³±±
±±³Jonathan Glz³23/11/16³MMI-32  	     ³Cambio funcion fBuscaSal bifurcacion en el³±±
±±³            ³        ³   		  	 ³campo R3_DTCDISS, campo solo para brasil  ³±±
±±³Matheus M.  ³03/11/16³TWJO78  	     ³Ajuste para que ao relacionar um funcioná-³±±
±±³            ³        ³   		  	 ³rio a sua situação contratual continue    ³±±
±±³            ³        ³   		  	 ³íntegra.							        ³±±
±±³Gabriel A.  ³03/11/16³MRH-395         ³Ajuste na contagem dos avos de            ³±±
±±³            ³        ³                ³afastamentos com sequência.               ³±±
±±³Renan Borges³13/01/17³MRH-4426        ³Ajuste para calcular provisão corretamente³±±
±±³            ³        ³                ³sem estar posicionado na filial do funcio-³±±
±±³            ³        ³                ³nário.                                    ³±±
±±³Gabriel A.  ³31/01/17³MRH-5416        ³Ajuste na contagem dos avos de            ³±±
±±³            ³        ³                ³afastamentos com sequência quando há      ³±±
±±³            ³        ³                ³quebra de ano entre os lançamentos.       ³±±
±±³M. Silveira ³22/06/16³DRHPONTP-986    ³Ajuste na RetSituacao para guardar a data ³±±
±±³            ³        ³                ³do periodo ao executar o relacionamento da³±±
±±³            ³        ³                ³SRA/RD0 para melhoria de performance.     ³±±
±±³Paulo  O.   ³29/06/17³DRHPAG-2608     ³Criação das funções fSFiltrSQL e          ³±±
±±³Inzonha     ³        ³                ³fMontInSQL para conversão de filtros ADVPL³±±
±±³            ³        ³                ³em instruções SQL.                        ³±±
±±³Isabel N.   ³18/08/17³DRHPAG-2815     ³Proteção p/campo RCM_CSIND (país: Brasil).³±±
±±³M.Camargo   ³19/09/19³DMINA-7192      ³Adecuaciones para rescición función       ³±± 
±±³            ³        ³                ³RetSituacao PARA mexY  col                ³±±
±±³M.Camargo   ³28/10/19³DMINA-7758      ³Corrección por variable cPais por cPaisLoc³±± 
±±³            ³        ³                ³RetSituacao para MI                       ³±±
±±³M.Camargo   ³11/11/19³DMINA-7670      ³Modificación RetSituacao para grabar otros³±± 
±±³            ³        ³                ³campos en SR para rescisiones en MX.      ³±±
±±³M.Camargo   ³27/11/19³DMINA-7850      ³Modificación RetSituacao validad si existe³±± 
±±³            ³        ³                ³campos rg_tipoafa para rescisiones en MX  ³±±
±±³Alf. Medrano³12/02/20³DMINA-8402      ³En fun RetSituacao, se excluyen las ausen-³±± 
±±³            ³        ³                ³cias (FUNNAME() != "GPEA240") del proceso ³±± 
±±³            ³        ³                ³de rescisión(finiquito) MEX               ³±± 
±±³Alf. Medrano³19/02/20³DMINA-8402      ³En fun RetSituacao, se excluyen el cierre ³±± 
±±³            ³        ³                ³lNoRutina del proceso de rescisión MEX    ³±± 
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ Cria_Trp	³ Autor ³ R.H. -	            ³ Data ³ 11.03.97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Criar Arquivo de Trabalho para calculo de Medias			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ CRIA_TRP(cArqDbf,cArqNtx) 								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cArqDbf 	- Arquivo a ser Criado 					 		  ³±±
±±³			 ³ cArqNtx  - Incide a Ser criado 							  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
FUNCTION Cria_Trp()

Local aFields

aFields := {}
AADD(aFields,{"RP_FILIAL" ,"C",FWGETTAMFILIAL,0})
AADD(aFields,{"RP_MAT"    ,"C",TamSX3('RA_MAT')[1],0})
AADD(aFields,{"RP_TIPO"   ,"C",01,0})
AADD(aFields,{"RP_DATARQ" ,"C",06,0})
AADD(aFields,{"RP_PD"     ,"C",03,0})
AADD(aFields,{"RP_HORAS"  ,"N",09,2})
AADD(aFields,{"RP_VALOR"  ,"N",12,2})
AADD(aFields,{"RP_VALATU" ,"N",12,2})
AADD(aFields,{"RP_TIPO1"  ,"C",01,0})
AADD(aFields,{"RP_ADIC"   ,"N",06,2})
AADD(aFields,{"RP_DATPGT" ,"D",08,0})
AADD(aFields,{"RP_MESMEDI","N",02,0})
AADD(aFields,{"RP_HEXTRA" ,"C",01,0})

If Type("cTBLXMED") == "U"
	Public cTBLXMED := "TRP"
	If GetRpoRelease() >= "12.1.025"
		cTBLXMED := "TBLXMED"
	EndIf
EndIf

fDelTMPMED()

oTmpMED := FWTemporaryTable():New(cTBLXMED,aFields)
oTmpMED:AddIndex( "SFPAUX1", {"RP_FILIAL","RP_MAT","RP_TIPO","RP_PD","RP_DATARQ"} )
oTmpMED:Create()

Return( Nil )

/*/{Protheus.doc} fDelTMPMED
//Fecha tabela temporaria e apaga
@author flavio.scorrea
@since 01/03/2019
/*/
Function fDelTMPMED()
If Select(cTBLXMED) > 0
	(cTBLXMED)->(dbCloseArea())
EndIf
If oTmpMED <> Nil
	oTmpMED:Delete()
	oTmpMED := Nil
EndIf
Return .T.

/*/{Protheus.doc} fGetTMPMED
//Retorna obje da tabela temporaria
@author flavio.scorrea
@since 01/03/2019
/*/
function fGetTMPMED()
Return oTmpMED


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fRetAfast	³ Autor ³ Mauro Sergio			³ Data ³ 07.08.98 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta Periodo ou dias de Afastamento						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ dDtPesq1 = Data Inicio do periodo a ser pesquisado         ³±±
±±³			 ³ dDtPesq2 = Data final do periodo a ser pesquisado		  ³±±
±±³			 ³ cTipoPesq= Qual tipo de calculo sera pesquisado 			  ³±±
±±³			 ³ 			 'F'    - Ferias 			                      ³±±
±±³			 ³           '13'   - Decimo terceiro 			              ³±±
±±³			 ³           'PRFE' - Provisao de ferias   					  ³±±
±±³			 ³           'PRFE' - Provisao de 130 			              ³±±
±±³			 ³ nAvosAf  = Quantidade de avos de afastamento do periodo	  ³±±
±±³			 ³ nDiasAf	= Quantidade de dias de afastamento do periodo    ³±±
±±³			 ³ cTipoAfas= Informa os tipos de afastamento que serao pes-  ³±±
±±³			 ³            quisados.                                    	  ³±±
±±³			 ³ aAfast  	= Array de retorno.                    			  ³±±
±±³			 ³            [01] Avos por linha de afastamento           	  ³±±
±±³			 ³ 			  [02] nDias Afas.por linha de afastamento		  ³±±
±±³			 ³ 			  [03] Data de inicio do afastamento			  ³±±
±±³			 ³ 			  [04] Data final do afastamento				  ³±±
±±³			 ³ 			  [05] Situacao do funcionario					  ³±±
±±³			 ³ 			  [06] Codigo de afastamento da Rais 			  ³±±
±±³			 ³ 			  [07] Codigo de tratamento de ferias			  ³±±
±±³			 ³ 			  [08] Codigo de tratamento de 13o				  ³±±
±±³			 ³ 			  [09] Codigo de tratamento de provisao de ferias ³±±
±±³			 ³ 			  [10] Codigo de tratamento de provisao de 13o    ³±±
±±³			 ³ 			  [11] Durcao do Afastamento                      ³±±
±±³			 ³ 			  [12] VERBA                                      ³±±
±±³			 ³ cVbTpAfas= Informa as verbas dos tipos de afastamento que  ³±±
±±³			 ³            serao pesquisadas.                              ³±±
±±³			 ³ l13Sal   = Afastamento para 13o. salario                   ³±±
±±³			 ³ lSoma15  = Utilizado na RAIS (Brasil). DEFAULT .T.         ³±±
±±³			 ³ lTodosAf = Todos os afastamentos. (Apenas RAIS)            ³±±
±±³			 ³ lRescisao= Executado pela rotina de rescisao?              ³±±
±±³			 ³ nFaltas13= Faltas apuradas na rescisao                     ³±±
±±³			 ³ lIsGPEM030= Executado pela rotina de ferias                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Gen‚rico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fRetAfas(dDtPesq1,dDtPesq2,cTipoPesq,nAvosAf,nDiasAf,cTipoAfas,aAfast,cVbTpAfas,l13Sal,lSoma15,lTodosAf,lRescisao,nFaltas13,lIsGPEM030,lBusSeq,lAglutSeq)
Local aArea		:= GetArea()
Local cSitFunc	:= ""
Local nI		:= 1                  
Local aAfast1	:= {}

DEFAULT cTipoPesq	:= ""

If cPaisLoc == "BRA"

	//Se for cálculo de primeira parcela, o ano de admissão for menor que o ano de cálculo (data de referência)
	//e a pergunta sobre a data de referência indicar que a data deve ser considerada apenas para admitidos no ano, altera referência para o último dia do ano.
	If Type("cTipoRot") <> "U" .And. cTipoRot == "5" .and. Year(SRA->RA_ADMISSA) < Year(dDtPesq2) .and. Len(aPergunte) >= 9 .and. aPergunte[9,3] == 2
		dDtPesq2 := CtoD("31/12/"+StrZero(Year(dDtPesq2),4))
	EndIf	
	
	//Carrega os mnemonicos se nao tiverem sido carregados
	If Type("P_QTDIAMES") == "U"
		SetMnemonicos(NIL,NIL,.T.)	
	EndIf
	fRetAfasBra(dDtPesq1, dDtPesq2,cTipoPesq,@nAvosAf,@nDiasAf,cTipoAfas,@aAfast,cVbTpAfas,l13Sal,lSoma15,lTodosAf,lRescisao,nFaltas13,lIsGPEM030,lBusSeq,lAglutSeq)
	Return
EndIf

DEFAULT dDtPesq1 := dDataBase
DEFAULT dDtPesq2 := dDataBase

nAvosAf := 0
nDiasAf := 0
aAfast  := {}

fBuscaAfast(dDtPesq1,dDtPesq2,@aAfast1,@cSitFunc,cTipoAfas,,cVbTpAfas,cTipoPesq)

For nI := 1 to Len( aAfast1 )

	dDataIni	:= aAfast1[nI,1]
	dDataFim	:= aAfast1[nI,2]
                               
	nDiasEmp	:= aAfast1[nI,9] //Dias pagos pela empresa
	// --Se a empresa pagar dias afastados e o afastamento for continuacao de outro, nao somar dias da empresa	
	If aAfast1[nI,10]	== "1"  //Continuacao de outro afastamento
		dDtIni := dDataIni
	Else
		dDtIni := dDataIni + If(nDiasEmp # 999, nDiasEmp, 0)
	EndIf	

	nAvosTot := 0
	nDiasAf  := 0
	
	cCpoFer := aAfast1[nI,5]     
	cCpoDec := aAfast1[nI,6]	
	 
	//-- Se afastamento iniciou-se antes do periodo, atualizar 
	//-- avos totais de afastamento ate o inicio do periodo.

	If dDtIni < dDtPesq1	
	
		dDtFim := dDtPesq1		
		cDtIni := MesAno(dDtIni)
		cDtFim := MesAno(dDtFim)		
		
		// -- Nao incluir mes de inicio do periodo no processo ...		
		While cDtIni < cDtFim
		
			nDiasA := 0
			nDiasT := 0
			If MesAno(dDtIni) == MesAno(dDtFim)
				nDiasA := ( Day(dDtFim) - Day(dDtIni) ) + 1
				nDiasT := f_UltDia(dDtIni) - nDiasA
			ElseIf MesAno(dDtIni) == cDtIni
				nDiasA := (f_UltDia(dDtIni) - Day(dDtIni) ) + 1
				nDiasT := f_UltDia(dDtIni) - nDiasA
			ElseIf MesAno(dDtFim) == cDtIni
			   	nDiasA := Day(dDtFim)
				nDiasT := (f_UltDia(dDtFim) - nDiasA)
			Else
				nDiasA := f_UltDia(Ctod("01/"+Subs(cDtIni,5,2)+"/"+Subs(cDtIni,1,4),"DDMMYY"))
				nDiasT := 0
			EndIf          
			
			If nDiasT < If(cPaisLoc == "BRA", 15, 0)
				If cTipoPesq =="F" .or. cTipoPesq == "PRFE"
					If cCpoFer $ If(cPaisLoc=="ARG"," 1","1#2")  //Ferias
						nAvosTot ++
					EndIf
				ElseIf cTipoPesq == "13" .or. cTipoPesq == "PR13"	
					If cCpoDec $ "1"		//Decimo terceiro
						nAvosTot ++
					EndIf
				EndIf
			EndIf
			
			If Val(Subs(cDtIni,5,2)) + 1 > 12
				cDtIni := StrZero(Val(Subs(cDtIni,1,4))+1 ,4) + "01"
			Else
				cDtIni := Subs(cDtIni,1,4)+StrZero( Val(Subs(cDtIni,5,2))+1,2)
			EndIf
			
		Enddo
				
		// Atualizar data de inicio para o inicio do periodo
		dDtIni := dDtPesq1		
		
	EndIf
	
	// -- Obtem avos e dias de afastamento do periodo
	
	dDtFim := If ( dDataFim > dDtPesq2 .Or. Empty(dDataFim) , dDtPesq2 , dDataFim )
	cDtIni := MesAno(dDtIni)
	cDtFim := MesAno(dDtFim)
	
	While cDtIni <= cDtFim
	
		nDiasA := 0
		nDiasT := 0
		If MesAno(dDtIni) == MesAno(dDtFim)
			nDiasA := ( Day(dDtFim) - Day(dDtIni) ) + 1
			nDiasT := f_UltDia(dDtIni) - nDiasA
		ElseIf MesAno(dDtIni) == cDtIni
			nDiasA := (f_UltDia(dDtIni) - Day(dDtIni) ) + 1
			nDiasT := f_UltDia(dDtIni) - nDiasA
		ElseIf MesAno(dDtFim) == cDtIni
		   	nDiasA := Day(dDtFim)
			nDiasT := (f_UltDia(dDtFim) - nDiasA)
		Else
			nDiasA := f_UltDia(Ctod("01/"+Subs(cDtIni,5,2)+"/"+Subs(cDtIni,1,4),"DDMMYY"))
			nDiasT := 0
		EndIf          
		
		If nDiasT < If(cPaisLoc == "BRA", 15, 0)
			If cTipoPesq =="F" .or. cTipoPesq == "PRFE"
				If cCpoFer $ If(cPaisLoc=="ARG","1","1#2")  //Ferias
					nAvosTot ++
					nAvosAf ++
				EndIf
			ElseIf cTipoPesq == "13" .or. cTipoPesq == "PR13"	
				If cCpoDec $ "1"		//Decimo terceiro
					nAvosTot ++
					nAvosAf ++ 
				EndIf
			EndIf
		EndIf
		
		nDiasAf += nDiasA
	
		If Val(Subs(cDtIni,5,2)) + 1 > 12
			cDtIni := StrZero(Val(Subs(cDtIni,1,4))+1 ,4) + "01"
		Else
			cDtIni := Subs(cDtIni,1,4)+StrZero( Val(Subs(cDtIni,5,2))+1,2)
		EndIf
		
	Enddo

	//-- Se afastamento estendeu-se ao periodo, atualizar avos totais
	//-- de afastamento do fim do periodo ao fim do afastamento.
             
	If dDataFim > dDtPesq2
	
		// -- Nao atualizar variavel cDtIni por ja ter sido manipulada no While anterior e
		// -- estar com o conteudo correto (mes imediatamente posterior ao fim do periodo).
		dDtFim := dDataFim
		cDtFim := MesAno(dDtFim)
		
		nAvosTot ++                                            
		
		While cDtIni <= cDtFim
		
			nDiasA := 0
			nDiasT := 0
			If MesAno(dDtIni) == MesAno(dDtFim)
				nDiasA := ( Day(dDtFim) - Day(dDtIni) ) + 1
				nDiasT := f_UltDia(dDtIni) - nDiasA
			ElseIf MesAno(dDtIni) == cDtIni
				nDiasA := (f_UltDia(dDtIni) - Day(dDtIni) ) + 1
				nDiasT := f_UltDia(dDtIni) - nDiasA
			ElseIf MesAno(dDtFim) == cDtIni
			   	nDiasA := Day(dDtFim)
				nDiasT := (f_UltDia(dDtFim) - nDiasA)
			Else
				nDiasA := f_UltDia(Ctod("01/"+Subs(cDtIni,5,2)+"/"+Subs(cDtIni,1,4),"DDMMYY"))
				nDiasT := 0
			EndIf          
			
			If nDiasT < If(cPaisLoc == "BRA", 15, 0)
				If cTipoPesq =="F" .or. cTipoPesq == "PRFE"
					If cCpoFer $ If(cPaisLoc=="ARG","1","1#2")  //Ferias
						nAvosTot ++
					EndIf
				ElseIf cTipoPesq == "13" .or. cTipoPesq == "PR13"	
					If cCpoDec $ "1"		//Decimo terceiro
						nAvosTot ++
					EndIf
				EndIf
			EndIf
			
			If Val(Subs(cDtIni,5,2)) + 1 > 12
				cDtIni := StrZero(Val(Subs(cDtIni,1,4))+1 ,4) + "01"
			Else
				cDtIni := Subs(cDtIni,1,4)+StrZero( Val(Subs(cDtIni,5,2))+1,2)
			EndIf
			
		Enddo		
	
	EndIf
	
	If RCM->(Type("RCM_DAUSPR")) # "U" .And. ;
		aAfast1[nI,14] $ " 1"		//RCM_DAUSPR = Branco ou Sim
		
		Aadd(aAfast,{	nAvosAf			,;	//01
						nDiasAf			,;	//02
						dDataIni		,;	//03
						dDataFim		,;	//04
						aAfast1[nI,4]	,;	//05-Tipo do afastamento
			 			aAfast1[nI,3]	,;	//06-Codigo de afastamento da Rais 
						aAfast1[nI,5]	,;	//07-codigo de tratamento de ferias
						aAfast1[nI,6]	,;	//08-Codigo de tratamento de 130
						aAfast1[nI,7]	,;	//09-Codigo de tratamento de provisao de ferias
						aAfast1[nI,8]	,;	//10-Codigo de tratamento de provisao de 130   
						aAfast1[nI,11]	,;	//11-duracao do afastamento    
						aAfast1[nI,12]	,;	//12-verba
						aAfast1[nI,13]	,;	//13-rcm->tipo -> codigo da ausencia
						nAvosTot		;	//14
			 			})
			 			
	ElseIf RCM->(Type("RCM_DAUSPR")) = "U"
		
		Aadd(aAfast,{	nAvosAf			,;
						nDiasAf			,;
						dDataIni		,;
						dDataFim		,;
						aAfast1[nI,4]	,; //Tipo do afastamento
			 			aAfast1[nI,3]	,; //Codigo de afastamento da Rais 
						aAfast1[nI,5]	,; //codigo de tratamento de ferias
						aAfast1[nI,6]	,; //Codigo de tratamento de 130
						aAfast1[nI,7]	,; //Codigo de tratamento de provisao de ferias
						aAfast1[nI,8]	,; //Codigo de tratamento de provisao de 130   
						aAfast1[nI,11] ,; //duracao do afastamento    
						aAfast1[nI,12] ,; //verba
						aAfast1[nI,13] ,; //rcm->tipo -> codigo da ausencia
						nAvosTot		;
			 			})
	ElseIf !( RCM->(Type("RCM_DECIMO")) == "U" )
		If ( ( cPaisLoc == "ARG" ) .and. ( RCM->RCM_DECIMO == "1" ) .and. ( cTipoPesq = "13" ) )
			Aadd(aAfast,{	nAvosAf			,;
							nDiasAf			,;
							dDataIni		,;
							dDataFim		,;
							aAfast1[nI,4]	,; //Tipo do afastamento
				 			aAfast1[nI,3]	,; //Codigo de afastamento da Rais 
							aAfast1[nI,5]	,; //codigo de tratamento de ferias
							aAfast1[nI,6]	,; //Codigo de tratamento de 130
							aAfast1[nI,7]	,; //Codigo de tratamento de provisao de ferias
							aAfast1[nI,8]	,; //Codigo de tratamento de provisao de 130   
							aAfast1[nI,11] ,; //duracao do afastamento    
							aAfast1[nI,12] ,; //verba
							aAfast1[nI,13] ,; //rcm->tipo -> codigo da ausencia
							nAvosTot		;
				 			})
		EndIf	
	EndIf
		
	nDiasAf := 0
		
Next nI

RestArea( aArea )
Return       

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fStructArq  ³ Autor ³Marinaldo de Jesus   ³ Data ³17/08/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Atualiza a Estrutura dos Arquivos de Movimentos Fechados    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fStructArq(aStruct_1,cAliasComp,cNomeArqMov,aOrdBag,...		³
³          ³           ...lProcessa, lDisplay )							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aStruct_1   -> Estrutura do Arquivo Original 				³
³          ³cAliasComp  -> Alias do Arquivo a Ser Comparado             ³
³          ³cNomeArqMov -> Nome Fisico do Arquivo a Ser Comparado       ³
³          ³aOrdBag		-> Array com as Bolsas de Ordem  				³
³          ³lProcessa	-> Executar a Processa                          ³
³          ³lDisplay	-> Se tera saida de Tela						³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico  -> .T. Se conseguiu Abrir o arquivo, .F. c.c. 	    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fStructArq( aStruct_1 , cAliasComp , cNomeArqMov , aOrdBag , lProcessa , lDisplay )

Local aStruct_2 	:= {}
Local aOrigStru 	:= {}
Local aFieldPos1    := {}
Local aFieldPos2	:= {}
Local bSort			:= { |x,y| x[ 1 ] < y[ 1 ] }
Local cArqTemp		:= ""
Local cArqShow		:= ""
Local cObtemCpo 	:= ""
Local cAlias		:= cAliasComp + "TMP"
Local cSvAlias		:= Alias()
Local lRet			:= .F.
Local nPosCpo		:= 0
Local nCpos			:= 0
Local nX			:= 0

DEFAULT lProcessa	:= .F.
DEFAULT lDisplay	:= .F.

If ( ( lProcessa ) .and. !( lDisplay ) )
	Processa( { || lRet := fStructArq( aStruct_1 , cAliasComp , cNomeArqMov , aOrdBag ) } , STR0074 )  //"Aguarde..."
	Return( lRet )
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carregando a Estrutura dos Arquivos                          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
( aOrigStru := aClone( aStruct_1 ) , aSort( aStruct_1 ,,, bSort ) )
( aStruct_2 := ( cAliasComp )->(  dbStruct() ) , aSort( aStruct_2 ,,, bSort ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Verifica se Existem Diferencas na Estrutura dos Arquivos      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If !( lRet := fCompArray( aStruct_1 , aStruct_2 ) )

	lRet := .T.

	cArqTemp := AllTrim( "T" + SubStr( cNomeArqMov , 2 ) )
	cArqShow := cNomeArqMov

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se Existe o Arquivo Temporario e Apaga-o             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If MsFile( cArqTemp )
		If ( Select( cAlias ) > 0 )
			( cAlias )->( dbCloseArea() )
		EndIf
		lRet := MsErase( cArqTemp )
	EndIf

	If ( lRet )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Cria e Abre o Arquivo com a Nova Estrutura                    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		MsCreate( cArqTemp , aOrigStru , __cRdd )
		MsOpenDbf( .T. , __cRDD , cArqTemp , cAlias , .T. , .F. )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se o Arquivo foi Aberto									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If ( lRet := ( Select( cAlias ) > 0 ) )

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Seleciona o Arquivo Antigo para Buscar os Dados               ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			( dbSelectArea( cAliasComp  ) , ( cAliasComp )->( dbGotop() ) )
	
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega Elementos na Regua de Processamento                  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If !( lDisplay )
				( ProcRegua( RecCount() ) , nX := 0 )
			EndIf	

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Obtem o Posicionamento dos Campos                             ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			aFieldPos1	:= {}
			aFieldPos2	:= {}
			nCpos := Len( aStruct_2 )
			For nPosCpo := 1 To nCpos
     			aAdd( aFieldPos1 , ( cAliasComp )->( FieldPos ( aStruct_2[ nPosCpo , 1 ] ) ) )
     			aAdd( aFieldPos2 , ( cAlias )->( FieldPos ( aStruct_2[ nPosCpo , 1 ] ) ) )
			Next nPosCpo 
	
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Percorre Todos os Registros do Arquivo                        ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			While ( cAliasComp )->( !Eof() )
		
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Incrementa Regua de Processamento                             ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				If !( lDisplay )
					IncProc( STR0076 + cArqShow + "/ Recno:" + StrZero( ++nX , 10 ) ) //"Atualizando Estrutura: ": 
				EndIf	
		                                                           
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Carrega os Dados no Novo Arquivo                              ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				If RecLock( cAlias , .T. , .F. )
					nCpos := Len( aFieldPos1 )
					For nPosCpo := 1 To nCpos
		     			If ( aFieldPos2[ nPosCpo ] > 0 )
		     				( cAliasComp )->( cObtemCpo := FieldGet( aFieldPos1[ nPosCpo ] ) )
							( cAlias )->( FieldPut( aFieldPos2[ nPosCpo ] , cObtemCpo ) )
						EndIf
					Next nPosCpo
					( cAlias )->( MsUnLock() )
				EndIf	
				
				( cAliasComp )->( dbSkip() )
			
			End While

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Fecha os Indices 											   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			( cAlias )->( dbClearIndex() )
			( cAliasComp )->( dbClearIndex() )
		
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Fecha os Arquivos para Poder Renomea-los                     ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			( cAlias )->( dbCloseArea() )
			( cAliasComp )->( dbCloseArea() )

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Exclui os Indices para que possam ser Recriados              ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If ( lRet := fFimArqMov( cAliasComp , aOrdBag , cNomeArqMov , .T. , lDisplay , .T. ) )
	
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Fecha os Arquivos para Poder Renomea-los                     ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				If ( Select( cAlias ) > 0 )
					( cAlias )->( dbCloseArea() )
				EndIf	
				If ( Select( cAliasComp ) > 0 )
					( cAliasComp )->( dbCloseArea() )
				EndIf	

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Substitui o Arquivo Antigo pelo com a Nova Estrutura          ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				MsRename( cArqTemp , cNomeArqMov )
				
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Seleciona o Novo Arquivo                                     ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				MsOpenDbf( .T. , __cRDD , cNomeArqMov , cAliasComp , .T. , .F. )
			
				lRet := ( Select( cAliasComp ) > 0 )
			
			EndIf

		EndIf
	
	EndIf
	
EndIf

If !Empty( cSvAlias )
	dbSelectArea( cSvAlias )
EndIf	

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fFimArqMov  ³ Autor ³Marinaldo de Jesus   ³ Data ³17/08/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Restaura os Arquivos de Movimento Mensal e 13o. Salario     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fFimArqMov( cAlias , aOrdBag )                         		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cAlias		-> Alias do Arquivo a Ser Restaurado			³
³          ³aOrdBag		-> Bolsa de Indices a serem Deletados			³
³          ³cArqMov		-> Nome do Arquivo de Movimento Anterior		³
³          ³lDropIndex	-> Apenas Dropar os Indices						³
³          ³lDisplay 	-> Se tera saida de Tela	   					³
³          ³lRename  	-> Se o Arquivo Sera Renomeado					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lFinal                                                	    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fFimArqMov( cAlias , aOrdBag , cArqMov , lDropIndex , lDisplay , lRename )

Local cSvAlias			:= Alias()
Local lFinal			:= .T.

Local cQuery		:= ""
Local cTcGetDb		:= ""
Local cTcSrvType	:= ""
Local nBag			:= 0
Local nLenBag		:= 0

DEFAULT lDropIndex	:= .F.
DEFAULT lDisplay	:= .T.	
DEFAULT lRename		:= .F.

If !( lDropIndex )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Seleciona e Fecha o Arquivo("RI ou RC") para que ChkFile() rea³
	³bra os arquivos de Movimento Mensal						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	( dbSelectArea( cAlias ) , ( cAlias )->( dbCloseArea() ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Restaura os Arquivos de Movimento ("SRI ou SRC")              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ChkFile( cAlias , .F. )

ElseIf ( lDropIndex .and. !Empty( aOrdBag ) )

	Begin Sequence

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Fecha os Indices 											   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If ( Select( cAlias ) > 0 )
			( cAlias )->( dbClearIndex() )
		EndIf	
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Dropar/Excluir os Indices                                    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		#IFDEF BTV
			If ( lRename )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Qdo Betrieve nao Precisa Excluir os Indices uma vez que os in³
				³ dices sao internos e serao refeitos quando o arquivo for reno³
				³ meado														   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				Break
			Else
				lFinal := MsErase( cArqMov , cBagName )
			EndIf	
		#ELSE
			#IFDEF CTREE
				If ( lRename )
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Qdo Ctree nao Precisa Excluir os Indices uma vez que os  indi³
					³ ces sao internos e serao refeitos quando o arquivo for renome³
					³ ado														   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					Break
				Else
					lFinal := MsErase( cArqMov , cBagName )
				EndIf
			#ELSE
				nLenBag 	:= Len( aOrdBag )
				cTcGetDb	:= Upper( AllTrim( TcGetDb() ) )
				cTcSrvType	:= Upper( AllTrim( TcSrvType() ) )
				For nBag := 1 To nLenBag
					If TcCanOpen( cArqMov , aOrdBag[ nBag , 2 ] )
   						If !( cTcGetDb $ "ORACLE/INFORMIX" )
   							cQuery := ( "Drop Index "+ cArqMov + "." + aOrdBag[ nBag , 2 ] )
    					Else
   							cQuery := ( "Drop Index " + aOrdBag[ nBag , 2 ] )
	    				EndIf
		       			lFinal := ( TcSqlExec( cQuery ) == 0 )
		    		EndIf
    			Next nBag
			#EndIf
		#EndIf	

	End Sequence
	
EndIf

If !Empty( cSvAlias )
	dbSelectArea( cSvAlias )
EndIf	

Return( lFinal )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³RetSituacao()      ³Autor³Marinaldo de Jesus³Data³14/11/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Atualiza o Cadastro de Funcionarios com a Atual Situacao  do³
³          ³Funcionario e o Codigo de Afastamento do FGTS				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³RetSituacao( cFil , cMat , lAtualiza , dDataRef )			³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cFil		-> Filial do Funcionario						³
³          ³cMat   		-> Matricula do Funcionario						³
³          ³lAtualiza	-> Se Atualiza o Cadastro de Funcionarios		³
³          ³dDataRef 	-> Data para Referencia							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL 														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RetSituacao( cFil , cMat , lAtualiza , dDataRef , lExcluResc , lChkTrf , lTrfMesAnoChk, dDataIni, aAfast , lGravaFer, nTipFin, nOpcFin, lGpem120, lGPER040, aTrfEmp )

Local aArea				:= GetArea()
Local aAreaSRA			:= SRA->( GetArea() )
Local aAreaSRH			:= SRH->(GetArea())
Local aBuscaAf			:= {}
Local aTransf			:= {}
Local aTransfEmp		:= {}
Local aReturn			:= Array( 4 )
Local aIncRes			:= {}
Local aPerOrd			:= {}

Local bAscanTrf			:= { || NIL }
Local bAscanRTrf		:= { || NIL }

Local cMesAno			:= ""
Local cDemissa  		:= ""
Local cRescrais			:= ""
Local cAfasfgts			:= ""
Local cSRHChave			:= ""
Local cPerFolha			:= AnoMes(Date())
Local cSvFilAnt			:= cFilAnt

Local dDtPesq1			:= Ctod("//")
Local dDtPesq2			:= Ctod("//")
Local dDataFim			:= Ctod("//")

Local lRetNormal 		:= .F.
Local lFindFunc 		:= .F.
Local lIsLocked			:= .F.
Local lSraMsBlQl		:= ( SRA->( FieldPos( "RA_MSBLQL" ) ) > 0 )
Local lTransf			:= .F.
Local lTransfEmp		:= .F.
Local lTransfFil		:= .F.

Local nX				:= 0
Local nLenX				:= 0
Local nRegSRG			:= 0
Local nPosTransf		:= 0
Local nPosRTransf		:= 0
Local nPosFerias		:= 0
Local lAtuTsRep			:= .T.
Local lAtuRHEXP			:= .F.
Local nOrdRCM			:= 1
Local nMaxRecTrf		:= 0
Local lNoRutina			:= FunName() $ "GPEA240|GPEM120" 

DEFAULT cFil			:= SRA->RA_FILIAL
DEFAULT cMat			:= SRA->RA_MAT
DEFAULT lAtualiza		:= .T.
DEFAULT dDataRef		:= Ctod("//")
DEFAULT lExcluResc		:= .F.
DEFAULT lChkTrf			:= .T.
DEFAULT lTrfMesAnoChk   := .F.
DEFAULT dDataIni		:= Ctod("//")
DEFAULT aAfast			:= {}
DEFAULT lGravaFer		:= .F.
DEFAULT nTipFin 		:= 1
DEFAULT nOpcFin 		:= 1
DEFAULT lGpem120 		:= .F.
DEFAULT lGPER040 		:= .F.

//
//
//
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Buscar a data final do Periodo corrente.                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If Empty( dDataRef )
	aPerOrd := GpGetPerOrd()
	If Empty(aPerOrd)
		Return( aReturn )
	EndIf
	dDataFim := aPerOrd[1,7]
	If Empty( dDataIni)
		dDataIni := aPerOrd[1,6]
	EndIf
Else
	dDataFim := dDataRef
EndIf

//Guarda periodos verificados ao processar o relacionamento SRA x RD0 (APDA020)
If !( Type("aPerUpdRd0") == "U" ) .And. aScan( aPerUpdRd0,{ |x| x[1] == SRA->RA_FILIAL + SRA->RA_PROCES } ) == 0
	aAdd( aPerUpdRd0, { SRA->RA_FILIAL + SRA->RA_PROCES, dDataFim } )
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Determina o Mes/Ano para Verificacao                          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cMesAno		:= MesAno( dDataBase )
cMesAno		:= If( Empty( dDataRef ) , cMesAno , MesAno( dDataRef ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Inicializa os Valores DEFAULT para o aReturn                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If cPaisLoc $ "CHI|DOM|MEX|COL|PAR"
	aReturn := Array( 5 )
	aReturn[5]	:= IIF(cPaisLoc <> "COL",Space( Len( SRA->RA_TIPOFIN )),Space( Len( SRA->RA_TIPFIN) ))
EndIf
aReturn[1]	:= Space( Len( SRA->RA_SITFOLH ) )
aReturn[2]	:= Space( Len( SRA->RA_AFASFGT ) )
aReturn[3]	:= Space( Len( SRA->RA_RESCRAI ) )
aReturn[4]	:= Ctod("//")

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Atualiza cFilAnt Conforme Filial do Funcionario               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cFilAnt		:= If( !Empty( cFil ) , cFil , cFilAnt )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Posiciona no Funcionario                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If !( lFindFunc := ( SRA->( RA_FILIAL + RA_MAT ) == cFil + cMat ) )
	lFindFunc := SRA->( dbSeek( cFil + cMat , .F. ) )
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Retorna a Atual Situacao do Funcionario                       ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If ( lFindFunc )

	lIsLocked := IsLocked( "SRA" , SRA->( Recno() ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Data para Pesquisa									 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
	dDtPesq1 := SRA->RA_ADMISSA
	dDtPesq2 := dDataFim

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega os Afastamentos									 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	fBuscaAfast(dDtPesq1,dDtPesq2,@aBuscaAf)
	
	AEVAL( aBuscaAf , { |X| X[2] := If(Empty(X[2]),dDatafim,X[2]) } )	  //Se o registro nao possuir data fim, preenche com data fim do periodo para ordenar corretamente

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ordena o Array pela data do Fim do Ultimo Afastamento      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
	aSort( aBuscaAf , NIL , NIL , { |x,y| x[2] > y[2] } )
	If !Empty( nLenX := Len( aBuscaAf ) )
		For nX := 1 To nLenX
			If (aBuscaAf[nx,1] <= dDataFim .And. Empty( aBuscaAf[ nX , 2 ] )) .or. ;
				(aBuscaAf[nx,1] >= dDataIni .And. aBuscaAf[ nx , 1 ] <= dDataFim) .or. ;
				(aBuscaAf[nX,1] >= dDataIni .And. aBuscaAf[ nX , 2 ] <= dDataFim) .or. ;
				(aBuscaAf[nX,1] >= dDataIni .And. aBuscaAf[nX,1] <= dDataFim .And. aBuscaAf[ nX , 2 ] >= dDataFim) .or. ;
				(aBuscaAf[nX,1] <= dDataIni .And. aBuscaAf[ nX , 2 ] >= dDataIni) 				
				//Se não for brasil ou se for brasil e código de SEFIP vazio ou código de SEFIP diferente de doença/acidente
				//ou código de doença e acidente e R8_DURACAO > R8_DIASEMP => Duração do Afastamento > Dias Pagos pela Empresa
				If cPaisLoc != "BRA" .Or. Empty(aBuscaAf[ nX , 19 ]) .Or. !(SubStr(aBuscaAf[ nX , 19 ], 1, 1) $ "O*P") .Or. (SubStr(aBuscaAf[ nX , 19 ], 1, 1) $ "O*P" .And. aBuscaAf[ nX , 11 ]  > aBuscaAf[ nX , 21 ])
					If AllTrim( aBuscaAf[ nX , 4 ] ) == "F" .And. If(cPaisLoc == "ARG",If(!Empty(aBuscaAf[nX,15]), .T. ,.F.),.T.)
						aReturn[1] := Iif(IsIncallStack("APDA020") .And. dDataBase > dDataFim, SRA->RA_SITFOLH, "F") 
					ElseIf AllTrim( aBuscaAf[ nX , 4 ] ) == "A" 
						aReturn[1] := Iif(IsIncallStack("APDA020") .And. dDataBase > dDataFim, SRA->RA_SITFOLH, "A")
					EndIf
				EndIf
				
				IF (cPaisLoc == "BRA")
					aReturn[2] := AllTrim( aBuscaAf[ nX , 19 ] )
				EndIf
				
				lRetNormal := .F.
				If SRA->RA_SITFOLH <> "F" .Or. aReturn[1] <> Space( Len( SRA->RA_SITFOLH ) )
					Exit
				EndIf
			ElseIf AllTrim( aBuscaAf[nX,4] ) $ "F/A" .And.  SRA->RA_SITFOLH $ "A/F"		// Se a situacao for de F ou A, retornar para Normal
				aReturn[1] := Space( GetSx3Cache( "RA_SITFOLH", "X3_TAMANHO" ) )
				aReturn[2] := Space( GetSx3Cache( "RA_AFASFGT", "X3_TAMANHO" ) )
				aReturn[3] := Space( GetSx3Cache( "RA_RESCRAI", "X3_TAMANHO" ) )
				aReturn[4] := SRA->RA_DEMISSA
				lRetNormal := .T.
			EndIf
		Next nX
	ElseIf !lExcluResc 
			If SRA->RA_SITFOLH == "T" 
				aReturn[1] := SRA->RA_SITFOLH
			ElseIf SRA->RA_SITFOLH == "D"	
				aReturn[1] := SRA->RA_SITFOLH
				aReturn[2] := SRA->RA_AFASFGT
				aReturn[3] := SRA->RA_RESCRAI
				aReturn[4] := SRA->RA_DEMISSA
			ElseIf SRA->RA_SITFOLH $ "F" .And. cPaisLoc == "ANG"
				lRetNormal := .T.		
			EndIf	
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se Funcionario Demitido Procura Afastamento do FGTS no SRG ³
	³ e Codigo Rescisao para a RAIS								 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If cPaisLoc <> "MEX"  .OR. (cPaisLoc == "MEX" .And. Empty(aReturn[1]) .AND. !lNoRutina)   //Mexico utiliza a rotina gpem040 - diferentemente de todos paises modelo 2 GPEM042
		if !lGpem120
			If SRG->( dbSeek( cFil + cMat ) )
				While SRG->( !Eof() .and. RG_FILIAL + RG_MAT == cFil + cMat )
	
					
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Apenas Rescisoes Efetivadas								      ³
					³ O campo RG_EFETIVA para o modelo 2 possui conteudo "12345'      ³
					³ O campo RG_EFETIVA para o modelo 1 e outros possui conteudo "SN'³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					If (MV_MODFOL != "2" .AND. !( SRG->RG_EFETIVA == "N" )) .OR. (MV_MODFOL == "2" .AND. ( SRG->RG_EFETIVA == "2" ))
						nRegSRG := SRG->( Recno() )
					EndIf
	
					SRG->( dbSkip() )
				End While
	
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Posiciona no Cabecalho da Rescisao						 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
				If ( nRegSRG > 0.00 )
	
					SRG->( dbGoto( nRegSRG ) )
					cDemissa := MesAno( SRG->RG_DATADEM )
					If SRG->RG_DATADEM <= dDataFim
						fIncRes(SRA->RA_FILIAL,SRG->RG_TIPORES,@aIncRes,0.00,@cRescrais,@cAfasfgts,"")
	
						aReturn[1] := "D"
						aReturn[2] := cAfasfgts
						aReturn[3] := cRescrais
	       				aReturn[4] := SRG->RG_DATADEM
		       			If cPaisLoc $ "CHI|DOM|MEX|PAR"
		       				aReturn[5] := SRG->RG_TIPORES
			       		EndIf
	       			EndIf
	        	EndIf
	        EndIf
		EndIf
	ElseIf cPaisLoc == "MEX" .And. aReturn[1] == "D" 
		aReturn[2] := SRA->RA_AFASFGT
		aReturn[3] := SRA->RA_RESCRAI
		aReturn[4] := SRA->RA_DEMISSA	
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Funcionario foi Transferido De Empresa ou de Fi³
	³ lial														 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
	If (;
			( lChkTrf );
			.and.;
			!( aReturn[1] == "D" );
		)
		lTransfEmp := fTransfEmp( @aTransfEmp, Nil, Nil, Nil, lGPER040, @aTransf )
		If !lGPER040
			lTransfFil := fTransfFil( @aTransf )
		Else
			lTransfFil := !Empty( @aTransf )
		EndIf

		For nX := 1 to Len(aTransfEmp)
			aAdd(aTransf, aTransfEmp[nX])
		Next nX

		If lTransfEmp .and. lTransfFil //Reeordena o array
			nMaxRecTrf := Len( AllTrim( Str( aTransf[Len(aTransf),13] ) ) ) //Obtendo o Tamanho para StrZero()
			aSort( aTransf , NIL , NIL , { |x,y| DtoS( x[7] ) + StrZero( x[13] , nMaxRecTrf ) < ( Dtos( y[7] ) + StrZero( x[13] , nMaxRecTrf ) ) } )
		EndIf

		If ( lTransf := (;
							( lTransfEmp );
							.or.;
							( lTransfFil ) ;
						);
			)

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Monta Bloco para Busca da Transferencia                    ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
			bAscanTrf := { |x|;
								( x[01] == cEmpAnt );		//Empresa de Origem igual a cEmpAnt
								.and.;
								( x[08] == cFilAnt );		//Filial de Origem igual a cFilAnt
								.and.;
								If( Empty( dDataRef ),;
									( x[12] <= cMesAno  ),;	//Mes/Ano da Transferencia menor ou igual Mes/Ano de Referencia
									( x[07] <= dDataRef );	//Data da Transferencia igual Data de Referencia
								  );
						 }
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Procura o Indice da ultima Transferencia                   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
			nPosTransf := aScan( aTransf , bAscanTrf )
			nX		   := nPosTransf
			While ( ( nX := aScan( aTransf , bAscanTrf , ++nX ) ) > 0 )
				nPosTransf := nX
			End While

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ So considera a Transferencia se funcionario nao Retornou   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If ( nPosTransf > 0 )

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Monta Bloco para Buca da Transferencia                     ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
				bAscanRTrf := { |x|;
									( x[04] == cEmpAnt );					//Empresa de Destino igual a cEmpAnt
									.and.;
									( x[10] == cFilAnt );					//Filial de Destino igual a cFilAnt
									.and.;
									( x[07] >= aTransf[ nPosTransf , 7 ] );	//Retorno de Transferencia
								}
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Verifica Se Teve Transferencia Posterior a Referencia      ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				nPosRTransf := aScan( aTransf , bAscanRTrf )

				If (;
						( nPosRTransf == 0 );
						.and.;
						If( lTrfMesAnoChk ,; 
												( MesAno( aTransf[ nPosTransf , 7 ] ) == If( Empty( dDataRef ) , cMesAno , MesAno( dDataRef ) ) ),;
												.T.;
						  );
					)	

					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ So Atualiza se Nao Teve Retorno e Se a Transferencia    for³
					³ Dentro da Referencia										 ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
					aReturn[1] := "D"
					aReturn[2] := If( lTransfEmp , "N2" , "N1" )
					aReturn[3] := "31"
					aReturn[4] := aTransf[ nPosTransf , 07 ] //A Demissao é a Data de Transferencia
				EndIf
			EndIf
		EndIf
	ElseIf Empty( aReturn[1] ) .and. !lRetNormal 

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Considera a Situacao do Proprio Cadastro                   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aReturn[1] := SRA->RA_SITFOLH
		aReturn[2] := SRA->RA_AFASFGT
		aReturn[3] := SRA->RA_RESCRAI
		aReturn[4] := SRA->RA_DEMISSA
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se Funcionario foi Transferido a Situacao esta como de Demi³
	³ tido e Devera Ser Mantida. Caso a Data de Demissao   esteja³
	³ preenchida e Funcionario Esteja com Situacao Diferente   De³
	³ Demitido Atualiza a Situacao do Funcionario				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
	If !( lExcluResc ) .and. cPaisLoc <> "MEX" 
		If !( aReturn[1] == "D" )
			If !Empty( SRA->RA_DEMISSA )
				cDemissa := MesAno( SRA->RA_DEMISSA )
				If SRA->RA_DEMISSA <= dDataFim
					aReturn[1] := "D"
					aReturn[2] := SRA->RA_AFASFGT
					aReturn[3] := SRA->RA_RESCRAI
					aReturn[4] := SRA->RA_DEMISSA
				EndIf
			EndIf
		EndIf
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Atualiza a Situacao e Afastamento do FGTS no SRA           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
	If ( lAtualiza )
	
		If ( lTsRep ) .And. ( SRA->RA_SITFOLH $ "D,T" )
			lAtuRHEXP := .T.
		Endif
		
		If !( lIsLocked )
			RecLock("SRA",.F.)
		EndIf
		If cPaisLoc == "CHI" 
			IF nTipFin == 2 // Deshacer Finiquito (nTipFin = 2)
			 	If nOpcFin == 1 //Modificar Situacion del Empleado (nOpcFin == 1)
					SRA->RA_SITFOLH  := aReturn[1]
				EndIf
			ElseIf nTipFin == 1 //Aplicar Finiquito
				SRA->RA_SITFOLH  := aReturn[1]
			EndIf
			SRA->RA_TIPOFIN := aReturn[5]
		Else
			SRA->RA_SITFOLH  := aReturn[1]
			SRA->RA_AFASFGT  := aReturn[2]
		EndIf
		SRA->RA_RESCRAI	 := aReturn[3]
		SRA->RA_DEMISSA	 := aReturn[4]
		If cPaisLoc $ "DOM|PAR" .Or. (cPaisLoc $ "MEX" .And. !lNoRutina)
			SRA->RA_TIPOFIN := SRG->RG_TIPORES
			If cPaisLoc == "MEX"
				If SRG->(ColumnPos("RG_TIPOAFA")) > 0
					SRA->RA_TIPOAFA := SRG->RG_TIPOAFA
				EndIf
				SRA->RA_DTBIMSS := aReturn[4]
			EndIf				
		ElseIf cPaisLoc $ "COL|PER"
			SRA->RA_TIPFIN := SRG->RG_TIPORES
		EndIf

		If ( lSraMsBlQl )
			If ( GetMvRH("MV_MSBLQL",Nil,.T.) )	
			//Se deseja alimentar controle de Funcionarios e Pessoas Ativos x Inativos
				If ( aReturn[1] == "D" )
					SRA->RA_MSBLQL := "1"	//Inativo
				Else
					SRA->RA_MSBLQL := "2"	//Ativo
				EndIf
			Else 
				SRA->RA_MSBLQL	:=	"2"		//Ativo
			EndIf
		EndIf
		If !( lIsLocked )
			SRA->( MsUnLock() )
		EndIf
        
        /*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Realiza a gravacao do responsavel no arquivo utilizado  |
		|pelos modulos do Quality Celerina, caso haja integracao.|
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		QA_QUALITY()

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Integracao SIGAPON X TSREP                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF ( lTsRep )
			dbSelectArea("RCM")
			nOrdRCM := RCM->(IndexOrd())
			nLenAfast	:= Len(aAfast)

			If Type("cPeriodo") == "U"
				If !Empty(aPerOrd)
					cPerFolha := aPerOrd[1,1]
				EndIf
			Else
				cPerFolha := cPeriodo
			EndIf

			oObjREP := PTSREPOBJ():New()

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se o status e Ferias para fazer Integracao SIGAPON X TSREP ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If SRA->RA_SITFOLH == "F"
				
				IF SX5->( dbSeek( xFilial("SX5", SRA->RA_FILIAL) + "31" + SRA->RA_SITFOLH ) )					
					
					If ( nLenAfast > 0 )  // Fechamento mensal
						DbSelectArea("RCM")
						RCM->(DbSetOrder(3))
						RCM->(DbSeek(FwxFilial("RCM") + fGetCodFol("0072")))
					
						For nX := 1 TO nLenAfast
						
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³ Verifica se o periodo de afastamento esta presente ou futuro para envio ao TSA ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
							// Verifica se a data de Inicio for maior/igual que a data de hoje
							// Verifica se nao existe data final de afastamento
							// Verifica se a data final for maior/igual que a data de hoje
							// Foi utilizado o Date() ao inves do dDataBase para pegar a data do computador
							If ( aAfast[nX , nPosDtIni] >= Date() .Or. aAfast[nX , nPosDtFim] >= Date() )

								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³ Executa o WebServices TSA - Situacao de Afastamento          ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
								If oObjREP:WSAbsenceReason( 7 , , aAfast[nX , nPosDtIni] , aAfast[nX , nPosDtFim])

									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³ Grava o ontrole de exportacao para o TSA - Situacao de Afastamento ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
									oObjRep:WSUpdRHExp( "SRH" )

								Endif

							ElseIf lAtuRHEXP

								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³ Executa o WebServices TSA - Cadastro de Funcionarios/Usuarios³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
								If oObjREP:WSNatural( 1 ) .And. oObjREP:WSUser( 1 )
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³ Grava o ontrole de exportacao para o TSA - Usuarios                ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
									oObjRep:WSUpdRHExp( "SRA" )

								Endif
							EndIf	
						
						Next nX

					
					Else // Calculo de ferias
					
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³ Verifica se o periodo de afastamento esta presente ou futuro para envio ao TSA ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						// Verifica se a data de Inicio for maior/igual que a data de hoje
						// Verifica se nao existe data final de afastamento
						// Verifica se a data final for maior/igual que a data de hoje
						// Foi utilizado o Date() ao inves do dDataBase para pegar a data do computador
						If !Empty(aBuscaAf)
							nPosFerias := aScan(aBuscaAf, {|x| AnoMes(x[1]) > cPerFolha})

							If nPosFerias > 0
								cSRHChave := cFil + cMat + dToS(aBuscaAf[nPosFerias,1])
							Else
								cSRHChave := cFil + cMat
							EndIf
							
							DbSelectArea("SRH")
							SRH->(DbSetOrder(2))
							SRH->(DbSeek(cSRHChave))
						EndIf

						If Empty(SRH->RH_RHEXP) .AND. AnoMes(SRH->RH_DATAINI) >= cPerFolha .Or. Empty(SRH->RH_DATAFIM) .Or. (!Empty(SRH->RH_DATAFIM);
							.And. AnoMes(SRH->RH_DATAFIM) >= cPerFolha)
							
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³ Executa o WebServices TSA - Situacao de Afastamento          ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
							If ( !Empty(SRH->RH_DATAINI) .AND. !Empty(SRH->RH_DATAFIM) )
								
								/* 	Nao devem ser enviados para integracao registros com campo data em branco.
									Isto, gera o erro 'Unmarshling error'
								*/
								DbSelectArea("RCM")
								RCM->(DbSetOrder(3))
								RCM->(DbSeek(FwxFilial("RCM") + fGetCodFol("0072")))
								If oObjREP:WSAbsenceReason( 7 , , SRH->RH_DATAINI , SRH->RH_DATAFIM)						
	
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³ Grava o ontrole de exportacao para o TSA - Situacao de Afastamento ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
									oObjRep:WSUpdRHExp( "SRH" )
	
								Endif
								
							EndIf

						ElseIf lAtuRHEXP

							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³ Executa o WebServices TSA - Cadastro de Funcionarios/Usuarios³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
							If oObjREP:WSNatural( 1 ) .And. oObjREP:WSUser( 1 )
								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³ Grava o ontrole de exportacao para o TSA - Usuarios                ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
								oObjRep:WSUpdRHExp( "SRA" )

							Endif
						EndIf				
					EndIf
				EndIf	

			ElseIf SRA->RA_SITFOLH $ "D,T" .Or. Empty(SRA->RA_SITFOLH)

				IF SX5->( dbSeek( xFilial("SX5", SRA->RA_FILIAL) + "31" + SRA->RA_SITFOLH ) )
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Executa o WebServices TSA - Cadastro de Funcionarios/Usuarios³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

					lAtuTsRep	:=	.T.						
					If ( IsInCallStack("GPEM120") .AND. ( (Empty(SRA->RA_RHEXP) ) .OR. Empty(SRA->RA_SITFOLH)) ) //SE NÃO ESTIVER DEMITIDO, NO FECHAMENTO, NÃO ATUALIZA INTEGRAÇÃO
 						/*So envia para integracao Protheus x TSA funcionarios demitidos que em algum momento foram integrados ao TSA.
						Com isto, evita-se geracao de mensagem indevida no fechamento mensal. No TSA, e' gerado o alerta de erro a cada 
						funcionario nao encontrado. */
					
						lAtuTsRep	:= 	.F.
						
					EndIf						
					
					If lAtuTsRep .And. oObjREP:WSNatural( 1 ) .And. oObjREP:WSUser( 1 )

						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³ Grava o ontrole de exportacao para o TSA - Usuarios                ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						oObjRep:WSUpdRHExp( "SRA" )
					Endif
					
				EndIf	

				If ( lGravaFer )
					
					// Insercao de Ferias programadas, calculada pelo GPEM030
					If SX5->( dbSeek( xFilial("SX5", SRA->RA_FILIAL) + "31" + "F" ) )
														DbSelectArea("RCM")
						DbSelectArea("RCM")
						RCM->(DbSetOrder(3))
						RCM->(DbSeek(FwxFilial("RCM") + fGetCodFol("0072")))
				
						If oObjREP:WSAbsenceReason( 7 , , SRH->RH_DATAINI , SRH->RH_DATAFIM)
							
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³ Grava o ontrole de exportacao para o TSA - Situacao de Afastamento ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
							oObjRep:WSUpdRHExp( "SRH" )

						Endif
						
					EndIf
					
				EndIf
			Else

				//Posiciona no Registro da tabela SR8
				If SR8->( DbSeek( SRA->RA_FILIAL + SRA->RA_MAT ) )

					While SR8->(!Eof()) .And. SRA->RA_FILIAL + SRA->RA_MAT == SR8->R8_FILIAL + SR8->R8_MAT


						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³ Verifica se o periodo de afastamento esta presente ou futuro para envio ao TSA ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						// Verifica se a data de Inicio for maior/igual que a data de hoje
						// Verifica se nao existe data final de afastamento
						// Verifica se a data final for maior/igual que a data de hoje
						// Foi utilizado o Date() ao inves do dDataBase para pegar a data do computador
						If SR8->R8_DATAINI >= Date() .Or. Empty(SR8->R8_DATAFIM) .Or. (!Empty(SR8->R8_DATAFIM) .And. SR8->R8_DATAFIM >= Date())
							DbSelectArea("RCM")
							RCM->(DbSetOrder(1))
							If Empty(SR8->R8_RHEXP) .And. RCM->( dbSeek( xFilial("RCM") + SR8->R8_TIPOAFA ) ) .And. RCM->RCM_TIPOAF <> "4"   //Ferias

								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³ Executa o WebServices TSA - Situacao de Afastamento          ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
								If oObjREP:WSAbsenceReason( 5 , , SR8->R8_DATAINI, SR8->R8_DATAFIM )
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³ Grava o ontrole de exportacao para o TSA - Situacao de Afastamento ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
									oObjRep:WSUpdRHExp( "SR8" )

								Endif

							Endif

						ElseIf lAtuRHEXP

							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³ Executa o WebServices TSA - Cadastro de Funcionarios/Usuarios³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
							If oObjREP:WSNatural( 1 ) .And. oObjREP:WSUser( 1 )
								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³ Grava o ontrole de exportacao para o TSA - Usuarios                ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
								oObjRep:WSUpdRHExp( "SRA" )

							Endif

						Endif

						SR8->(dbSkip())

					Enddo

				Endif

			Endif
			RCM->(dbSetOrder(nOrdRCM))
		EndIf

	EndIf

EndIf

If lGPER040
	aTrfEmp := aClone(aTransfEmp)
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura Dados de Entrada									 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cFilAnt := cSvFilAnt
RestArea(aAreaSRA)
RestArea(aAreaSRH)
RestArea(aArea)

Return( aReturn )


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fBuscaAfast³ Autor ³ Mauricio T. Takakura ³ Data ³ 04.08.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Retorna todos os afastamentos e ferias do funcionario	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                    					 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fBuscaAfast												  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Gen‚rico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fBuscaAfast(dDtPesq1,dDtPesq2,aAfast,cSitFunc,cTipAfas,cVrbExcep,cVbTpAfas,cTipoPesq)
Local aArea		 := GetArea()
Local cTipoSR8 	 := Space(1)
Local cAliasSr8	 := "SR8"
Local cMesAnoDt1 := ""
Local cMesAnoDt2 := ""
Local cQuery	 := ""
Local lDiasDobra := .F.
Local nX		 := 0
Local lcTipoRot	 := If(Type("cTipoRot") <> "U", .T., .F.)
Local cTipo 	 := If(lcTipoRot .and. cTipoRot == "4" , SuperGetMV("MV_AVISAFA",,"") , "" )
Local lfAnosAfas := .F.

Static aStruSr8
Static aStruRCM
Static lCpoAvis
Static lRCMABatav	

DEFAULT aStruSr8 := {}
DEFAULT aStruRCM := {}

DEFAULT cTipAfas 	:= ""
DEFAULT cVrbExcep	:= ""
DEFAULT cVbTpAfas	:= ""
DEFAULT cTipoPesq	:= ""
DEFAULT lCpoAvis 	:= RCM->(ColumnPos( "RCM_ABATAV" )) > 0
DEFAULT __lRCMCong  := RCM->(ColumnPos( "RCM_CONGAF" )) > 0
DEFAULT lRCMABatav 	:= If(lCpoAvis, ValType(RCM->RCM_ABATAV) == "N", .F.)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica se foram passados os parametros se nao cria vazio ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
dDtPesq1 := If(dDtPesq1 = Nil , dDataBase , dDtPesq1)
dDtPesq2 := If(dDtPesq2 = Nil , dDataBase , dDtPesq2)
aAfast   := {}

cMesAnoDt1 := MesAno(dDtPesq1)
cMesAnoDt2 := MesAno(dDtPesq2)

DbSelectArea("SR8")
DbSetOrder(1)

If DbSeek(SRA->RA_FILIAL + SRA->RA_MAT) //Apenas monta a query se houver registro de afastamento - Melhoria de Performance para autonomos e funcionários sem afastamento.

	cAliasSR8 := "QSR8"
	If ( Select( cAliasSR8 ) > 0 )
		( cAliasSR8 )->( dbCloseArea() )
	EndIf 

	dbSelectArea("RCM")
	
	aStruSR8   := If(Empty(aStruSR8),SR8->(dbStruct()),aStruSR8)
	aStruRCM   := If(Empty(aStruRCM),RCM->(dbStruct()),aStruRCM)
	
	lfAnosAfas := IsInCallStack("fAnosAfas")
		
	If __oSt1 == Nil .or. ( __cEmpAux == Nil .or. __cEmpAux <> cEmpAnt )
	
		lDiasDobra 	:= IsInCallStack( "fDiasDobra")
	
		__cEmpAux := cEmpAnt
	
		__oSt1 := FWPreparedStatement():New()	 
	
		If cPaisLoc == "BRA"
			cQuery := " SELECT R8_DATAINI, R8_DATAFIM, R8_PD, R8_DURACAO, R8_CONTAFA, R8_SEQ, R8_DIASEMP, R8_SDPAGAR, R8_DPAGOS, R8_DPAGAR, RCM_TIPOAF, RCM_PD, RCM_CODRAI, RCM_CSIND,"
			cQuery += " RCM_FERIAS, RCM_DECIMO, RCM_PROVFE, RCM_PROV13, RCM_DIASEM, RCM_TIPO, RCM_PLR, RCM_DEPFGT, RCM_ENCEMP, RCM_REINCI, RCM_CODSEF, RCM_DESCRI, RCM_DIAS13, RCM_DIASPL, RCM_DIASFE, RCM_TPEFD "
			If __lRCMCong
				cQuery += ", RCM_CONGAF "
			EndIf
			If lCpoAvis
				cQuery += ", RCM_ABATAV "
			EndIf
		Else
			cQuery := "SELECT * "
		EndIf
		cQuery += "FROM " + RetSqlName("SR8") + " SR8 "
		cQuery += "INNER JOIN " + RetSqlName("RCM") + " RCM "
		cQuery += "ON RCM_FILIAL =  ?  AND "
		cQuery +=    "RCM_TIPO = R8_TIPOAFA "
		cQuery +=    "AND RCM_TIPOAF <> '3' ""
		cQuery += "WHERE SR8.R8_FILIAL= ? AND "
		cQuery += "SR8.R8_MAT= ? AND "
		cQuery += "SR8.R8_DATAINI>= ?  AND " //Para inibir erros ocasionados por base inconsistente
		cQuery += "( ( SR8.R8_DATAINI >= ? AND SR8.R8_DATAINI <= ? ) OR "
		cQuery +=  " ( SR8.R8_DATAFIM >= ? AND SR8.R8_DATAFIM <= ? ) OR "
		cQuery +=  " ( SR8.R8_DATAINI <= ? AND SR8.R8_DATAFIM >= ? ) OR "
		cQuery +=  " ( SR8.R8_DATAFIM = ' ' AND SR8.R8_DATAINI <= ? ) 
	
	
		If lDiasDobra
			cQuery +=  " OR ( SR8.R8_CONTAFA <> '' ) "
			cQuery +=  "  )  AND "
		Else
			cQuery +=  "  )  AND "
		EndIf
		
		If cPaisLoc == "BOL"
			cQuery += " SR8.R8_DATAFIM >= ?  AND "
		EndIf
		
		cQuery += " *TIPOPESQ* "
			
		cQuery += "SR8.D_E_L_E_T_ = ' ' AND RCM.D_E_L_E_T_ = ' ' "
		cQuery += "ORDER BY "+SqlOrder(SR8->(IndexKey()))
		cQuery := ChangeQuery(cQuery)
		__oSt1:SetQuery(cQuery)
	
	Endif	
	
	__oSt1:SetString(1,xFilial("RCM",SRA->RA_FILIAL))
	__oSt1:SetString(2,SRA->RA_FILIAL)
	__oSt1:SetString(3,SRA->RA_MAT)
	__oSt1:SetString(4,DtoS(SRA->RA_ADMISSA))
	__oSt1:SetString(5,DtoS(dDtPesq1))
	__oSt1:SetString(6,DtoS(dDtPesq2))
	__oSt1:SetString(7,DtoS(dDtPesq1))
	__oSt1:SetString(8,DtoS(dDtPesq2))
	__oSt1:SetString(9,DtoS(dDtPesq1))
	__oSt1:SetString(10,DtoS(dDtPesq2))
	__oSt1:SetString(11,DtoS(dDtPesq2))
	
	If cPaisLoc == "BOL"
		__oSt1:SetString(12,DtoS(dDtPesq1))
	EndIf
	
	cQuery := __oSt1:getFixQuery()
	
	If cTipoPesq == "F"
		cQuery := Replace(cQuery,'*TIPOPESQ*',"RCM.RCM_FERIAS <> '4' AND " ) 
	ElseIf cTipoPesq == "13"
		cQuery := Replace(cQuery,'*TIPOPESQ*', "RCM.RCM_DECIMO <> '2' AND ")
	ElseIf cTipoPesq == "PLR"
		cQuery := Replace(cQuery,'*TIPOPESQ*',"RCM.RCM_PLR <> '2' AND ")
	ElseIf cTipoPesq == "PRFE"
		cQuery := Replace(cQuery,'*TIPOPESQ*',"RCM.RCM_PROVFE <> '1' AND ")
	ElseIf cTipoPesq == "PR13"
		cQuery := Replace(cQuery,'*TIPOPESQ*', "RCM.RCM_PROV13 <> '2' AND ")
	Else
		cQuery := Replace(cQuery,'*TIPOPESQ*'," ")
	EndIf
	
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSR8,.T.,.T.)
		
	For nX := 1 To Len(aStruSR8)
		If ( aStruSR8[nX][2] <> "C" )
			TcSetField(cAliasSR8,aStruSR8[nX][1],aStruSR8[nX][2],aStruSR8[nX][3],aStruSR8[nX][4])
		EndIf
	Next nX
	
	For nX := 1 To Len(aStruRCM)
		If ( aStruRCM[nX][2] <> "C" )
			TcSetField(cAliasSR8,aStruRCM[nX][1],aStruRCM[nX][2],aStruRCM[nX][3],aStruRCM[nX][4])
		EndIf
	Next nX
	
	While !(cAliasSR8)->(Eof())
		cTipoSR8 := " "
		If !Empty(cTipAfas) .and. !((cAliasSR8)->RCM_TIPOAF $ cTipAfas)
			dbSelectArea(cAliasSr8)
			dbSkip()
			Loop
	  	EndIf
	        
	    If !Empty(cVbTpAfas) .and. !((cAliasSR8)->RCM_PD $ cVbTpAfas)
			dbSelectArea(cAliasSr8)
			dbSkip()
			Loop
	  	EndIf 
	  	
	  	// Se existir o campo
	  	If lCpoAvis .and. lctipoRot
	  		// Se o campo RCM_ABATAV for diferente 1 (SIM) e for roteiro de rescisão, não considerar para abater.
	  	 	If ( ( cTipoRot == "4" .or. cTipoRot == "" ) .and. lfAnosAfas .and. if(lRCMABatav,(cAliasSR8)->RCM_ABATAV <> 1 ,(cAliasSR8)->RCM_ABATAV <> "1" ))
	  	 		dbSelectArea(cAliasSr8)
				dbSkip()
				Loop
			EndIf
		//Caso o campo ainda não exista, verificar o parametro MV_AVISAFA
		Else
		  	If (!Empty(cTipo) .and. !((cAliasSR8)->RCM_TIPO $ cTipo) .and. lfAnosAfas) .or. (Empty(cTipo) .and. lfAnosAfas)  
				dbSelectArea(cAliasSr8)
				dbSkip()
				Loop
			EndIf
		EndIf  
	        
		If !Empty(cVrbExcep)
	   		If (cAliasSr8)->R8_PD $ cVrbExcep
	   	   		dbSelectArea(cAliasSr8)
				dbSkip()
				Loop
	   		EndIf
	   	EndIf

	    If (cAliasSR8)->RCM_TIPOAF == "4"
	    	cTipoSR8 := "F"
	   		If cPaisLoc == "MEX" .And. (cAliasSR8)->RCM_TPIMSS == "1" // Faltas
	       		cTipoSR8 := " "	
	       	ElseIf cPaisLoc == "MEX" .And. (cAliasSR8)->RCM_TPIMSS == "2"
	       		cTipoSR8 := "A"	
	       	EndIf
	    ElseIf (cAliasSR8)->RCM_TIPOAF == "1"
	    	cTipoSR8 := "A"

		ElseIf (cAliasSR8)->RCM_TIPOAF == "2" .And. cPaisLoc == "BRA" .And. (cAliasSR8)->RCM_TPEFD = "37" //Suspesão de contrato
			cTipoSR8 := "A"
	    EndIf
	
	    If cPaisLoc == "CHI" .And. (cAliasSR8)->RCM_TPIMSS $ "03|06" // “Orden de Reposo”, ley decreto supremo Nº 73 Nº 16.744 
	    	cTipoSR8 := "A"
	    EndIf

		If cPaisLoc == "MEX" .AND. SRA->RA_SITFOLH == "D"  // Respeta la situacion del empelado si está despedido
			cTipoSR8 := SRA->RA_SITFOLH
		EndIf
	
		If cPaisLoc $ "BRA|PAR"
	
			aAdd(aAfast,{	(cAliasSr8)->R8_DATAINI		,;	//01
							(cAliasSr8)->R8_DATAFIM		,;	//02
							If(cPaisLoc == "BRA",(cAliasSR8)->RCM_CODRAI,"  "), ;	//03
							cTipoSR8					,;	//04
							(cAliasSR8)->RCM_FERIAS		,;	//05
							(cAliasSR8)->RCM_DECIMO		,;	//06
							(cAliasSR8)->RCM_PROVFE		,;	//07
							(cAliasSR8)->RCM_PROV13		,;	//08
							(cAliasSR8)->RCM_DIASEM 	,;	//09
							(cAliasSr8)->R8_CONTAFA		,;	//10
							(cAliasSr8)->R8_DURACAO		,;	//11
							(cAliasSR8)->RCM_PD			,;	//12
							(cAliasSR8)->RCM_TIPO		,;	//13
							If(cPaisLoc == "BRA",(cAliasSR8)->RCM_PLR, "")		,;  //14
							(cAliasSR8)->R8_SEQ			,;	//15
							If(cPaisLoc == "BRA",(cAliasSR8)->RCM_DEPFGT, "")	,; 	//16
							If(cPaisLoc == "BRA",(cAliasSR8)->RCM_ENCEMP, "")		,;	//17
							If(cPaisLoc == "BRA",(cAliasSR8)->RCM_REINCI, 0)		,; 	//18
							(cAliasSR8)->RCM_CODSEF		,;	//19
							(cAliasSR8)->RCM_TIPOAF		,;	//20
							(cAliasSR8)->R8_DIASEMP		,;	//21
							(cAliasSR8)->R8_SDPAGAR		,;	//22
							(cAliasSR8)->R8_DPAGOS		,;	//23
							(cAliasSR8)->R8_DPAGAR		,;	//24
							(cAliasSR8)->RCM_DESCRI		,;  //25
							(cAliasSR8)->RCM_CODSEF		,;	//26
							(cAliasSR8)->RCM_DIAS13		,;	//27
							(cAliasSR8)->RCM_DIASPL		,;	//28
							(cAliasSR8)->RCM_DIASFE		,;	//29	
							If(cPaisLoc == "BRA", (cAliasSR8)->RCM_CSIND, ""),;	//30
							If(cPaisLoc == "BRA" .And. __lRCMCong, (cAliasSR8)->RCM_CONGAF, " ") })	//31	
	
	
		ElseIf cPaisLoc $ "ANG"
			
			aAdd(aAfast,{	(cAliasSr8)->R8_DATAINI		,;
							(cAliasSr8)->R8_DATAFIM		,;
							"  "                        ,;
							cTipoSR8					,;
							(cAliasSR8)->RCM_FERIAS		,;
							(cAliasSR8)->RCM_DECIMO		,;
							(cAliasSR8)->RCM_PROVFE		,;
							(cAliasSR8)->RCM_PROV13		,;
							(cAliasSR8)->RCM_DIASEM 	,;
							(cAliasSr8)->R8_CONTINU		,;
							(cAliasSr8)->R8_DURACAO		,;
							(cAliasSR8)->RCM_PD			,;
							(cAliasSR8)->RCM_TIPO     	,;
							(cAliasSR8)->RCM_CONVFE})
		
		ElseIf (cAliasSR8)->(Type("RCM_DAUSPR")) # "U"  //Usado somente na Argentina
	
	
			aAdd(aAfast,{	(cAliasSr8)->R8_DATAINI		,;	//01
							(cAliasSr8)->R8_DATAFIM		,;	//02
							"  "						, ;	//03
							cTipoSR8					,;	//04
							(cAliasSR8)->RCM_FERIAS		,;	//05
							(cAliasSR8)->RCM_DECIMO		,;	//06
							(cAliasSR8)->RCM_PROVFE		,;	//07
							(cAliasSR8)->RCM_PROV13		,;	//08
							(cAliasSR8)->RCM_DIASEM 	,;	//09
							(cAliasSr8)->R8_CONTINU		,;	//10
							(cAliasSr8)->R8_DURACAO		,;	//11
							(cAliasSR8)->RCM_PD			,;	//12
							(cAliasSR8)->RCM_TIPO		,;	//13
							(cAliasSR8)->RCM_DAUSPR		,;  //14
							If(Type("R8_VALOR") <> "U",(cAliasSr8)->R8_VALOR," " )})				//15
		
		ElseIf cPaisLoc == "EQU"
	            
			aAdd(aAfast,{	(cAliasSr8)->R8_DATAINI		,;
							(cAliasSr8)->R8_DATAFIM		,;
							"  "                        ,;
							cTipoSR8					,;
							(cAliasSR8)->RCM_FERIAS		,;
							(cAliasSR8)->RCM_DECIMO		,;
							(cAliasSR8)->RCM_PROVFE		,;
							(cAliasSR8)->RCM_PROV13		,;
							(cAliasSR8)->RCM_DIASEM 	,;
							(cAliasSr8)->R8_CONTINU		,;
							(cAliasSr8)->R8_DURACAO		,;
							(cAliasSR8)->RCM_PD			,;
							(cAliasSR8)->RCM_TIPO      	,;
							(cAliasSR8)->RCM_CUARTA		,;
							(cAliasSR8)->RCM_PLR})
		
		ElseIf cPaisLoc == "VEN"
		
			aAdd(aAfast,{	(cAliasSr8)->R8_DATAINI		,;
							(cAliasSr8)->R8_DATAFIM		,;
							"  "                        ,;
							cTipoSR8					,;
							(cAliasSR8)->RCM_FERIAS		,;
							(cAliasSR8)->RCM_DECIMO		,;
							(cAliasSR8)->RCM_PROVFE		,;
							(cAliasSR8)->RCM_PROV13		,;
							(cAliasSR8)->RCM_DIASEM 	,;
							(cAliasSr8)->R8_CONTINU		,;
							(cAliasSr8)->R8_DURACAO		,;
							(cAliasSR8)->RCM_PD			,;
							(cAliasSR8)->RCM_ANTIG})
		Else
	
			aAdd(aAfast,{	(cAliasSr8)->R8_DATAINI		,;	//01
							(cAliasSr8)->R8_DATAFIM		,;	//02
							"  "						,;	//03
							cTipoSR8					,;	//04
							(cAliasSR8)->RCM_FERIAS		,;	//05
							(cAliasSR8)->RCM_DECIMO		,;	//06
							(cAliasSR8)->RCM_PROVFE		,;	//07
							(cAliasSR8)->RCM_PROV13		,;	//08
							(cAliasSR8)->RCM_DIASEM 	,;	//09
							(cAliasSr8)->R8_CONTINU		,;	//10
							(cAliasSr8)->R8_DURACAO		,;	//11
							(cAliasSR8)->RCM_PD			,;	//12
							(cAliasSR8)->RCM_TIPO})			//13
		EndIf
	
		dbSelectArea(cAliasSr8)
		dbSkip()
	
	EndDo
	
	dbSelectArea(cAliasSR8)
	dbCloseArea()
	dbSelectArea("SR8")
	
EndIf

cSitFunc := cTipoSr8

RestArea(aArea)

Return(cSitFunc)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GpGetPerOrd		   ³Autor³Mauricio Takakura ³Data³19/01/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Pegar o Periodo Ordinario em Aberto    						³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                      					³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GpGetPerOrd()

Local aArea		:= GetArea()
Local aPerOrd	:= {}
Local cRotOrd	:= ""

If !lGestPubl 
	cRotOrd := If (SRA->RA_CATFUNC $ "P*A", fGetCalcRot("9"),fGetRotOrdinar())
Else
	cRotOrd := fGetRotOrdinar( ,,If(SRA->RA_REGIME == "2", "GFP","GPE" ) )
Endif	

If Empty( cRotOrd )
	Help(" ",1,"M120ROTORD")	// Nenhum Roteiro definido como Ordinario! - Solucao: Defina um Roteiro como Ordinario no Cadastro de Roteiro de Cálculo. 
	Return( Nil )
EndIf

DbSelectArea( "RCH" )
DbSetOrder( RetOrder( "RCH", "RCH_FILIAL+RCH_PROCES+RCH_ROTEIR+RCH_PER+RCH_NUMPAG" ) )
DbSeek( xFilial( "RCH" ) + SRA->RA_PROCES + cRotOrd, .F. )
If Eof()
	cRotOrd	:= Space( GetSx3Cache( "RCH_ROTEIR", "X3_TAMANHO" ) )
	DbSeek( xFilial( "RCH" ) + SRA->RA_PROCES + cRotOrd, .F. )
EndIf
While !Eof() .And. RCH->( RCH_FILIAL + RCH_PROCES + RCH_ROTEIR ) == xFilial( "RCH" ) + SRA->RA_PROCES + cRotOrd
	If Empty( RCH->RCH_DTFECH )
		aAdd( aPerOrd, { RCH->RCH_PER, RCH->RCH_NUMPAG, RCH->RCH_PROCES, RCH->RCH_MES, RCH->RCH_ANO, RCH->RCH_DTINI, RCH->RCH_DTFIM } )
		Exit
	EndIf
	RCH->( DbSkip() )
EndDo

RestArea( aArea )

Return( aPerOrd )

/* 
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fBuscaSal ³ Autor ³ R.H. - Priscila       ³ Data ³ 19.08.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Carrega todos os aumentos Salariais dentro do Periodo Solici³±±
±±³          ³tado.									                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fBuscaSal(nSalario,cMesAnoDe,cMesAnoAte,aSalario)          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³nSalario 		- Carrega o ultimo Salario do Periodo         ³±±
±±³          ³cMesAnoDe 	- Mes e Ano Inic. do Periodo de Aumento Solic.³±±
±±³          ³cMesAnoAte	- Mes e Ano Final do Periodo de Aumento Solic.³±±
±±³          ³aSalario		- Carrega Array com os Aumentos Salariais.    ³±±
±±³          ³lincorpora	- .F. Salario Base , .T. Salario Incorporado  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/ 
Function fBuscaSal(dDataDe,dDataAte,aSalario,lIncorpora,lPortal) 

Local aAuxSala	:= {}
Local cSeq      := ""
Local cTipo     := ""
Local nSalario 	:= 0.00
Local nPosAux 	:= 0.00
Local dDtAum	:= CTOD("")
Local dtHistSal	:= CTOD("")
Local dtDiss	:= CTOD("//")
Local dUltDis	:= CTOD("//")
Local lRetTotal	:= .T.
Local cUltAtu	:= "!!"
Local cUltDis	:= "!!"
Local nP
//--Variaveis para Query SRD             
Local lQuery    := .F. 		// Indica se a query foi executada
Local cAliasSR3 := "SR3" 	//Alias da Query
Local cQuery    := "" 		//Expressao da Query
Local nCont
Local nX
Local cCateg	:= ""
Local cUltCat	:= ""

Static aStruSr3

DEFAULT aStruSr3 := {}
DEFAULT lPortal	:= .F.
aSalario 	:= {}

//--Variavel para salario Incorporado ou base .F.  Base  , .T. Total com Verbas que incorporam
lincorpora  := If (lIncorpora = Nil, .T. , lIncorpora)

If dDataAte == NIL .Or. dDataAte < dDataDe  //Caso a Data Ate nao seja definida
   dDataAte := dDataDe                      // a funcao retornara somente o ultimo 
   lRetTotal:= .F.                          // aumento Salarial.
EndIf	
dDataAtu := dDataDe     

aStruSr3  := If(Empty(aStruSr3),SR3->(dbStruct()),aStruSr3)

lQuery := .T.
cAliasSR3 := "QSR3"

If __oStSal == Nil .or. ( __cEmpAux == Nil .or. __cEmpAux <> cEmpAnt )
	__cEmpAux := cEmpAnt
	__oStSal := FWPreparedStatement():New()	 
	cQuery := "SELECT * "
	cQuery += "FROM "+RetSqlName("SR3")+" SR3 "
	cQuery += "JOIN "+RetSqlName("SR7")+" SR7 ON "
	cQuery += "SR3.R3_FILIAL = SR7.R7_FILIAL AND "
	cQuery += "SR3.R3_MAT = SR7.R7_MAT AND "
	cQuery += "SR3.R3_TIPO = SR7.R7_TIPO AND "
	cQuery += "SR3.R3_DATA = SR7.R7_DATA AND "
	cQuery += "SR3.R3_SEQ = SR7.R7_SEQ "
	cQuery += "WHERE SR3.R3_FILIAL= ? AND "
	cQuery += "SR3.R3_MAT= ? AND "
	cQuery += "SR3.D_E_L_E_T_ = ' ' AND "
	cQuery += "SR7.D_E_L_E_T_ = ' ' "
	cQuery += "ORDER BY R3_FILIAL,R3_MAT,R3_DATA,R3_SEQ "

	cQuery := ChangeQuery(cQuery)

	__oStSal:SetQuery(cQuery)
Endif	

__oStSal:SetString(1,SRA->RA_FILIAL)
__oStSal:SetString(2,SRA->RA_MAT)

cQuery := __oStSal:getFixQuery()

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSR3,.T.,.T.)
	
For nX := 1 To Len(aStruSR3)
	If ( aStruSR3[nX][2] <> "C" )
		TcSetField(cAliasSR3,aStruSR3[nX][1],aStruSR3[nX][2],aStruSR3[nX][3],aStruSR3[nX][4])
	EndIf
Next nX

//--Monta array com a quantidade de meses do periodo solicitado
// Quando houver alteracoes salariais
If ! Eof() .And. (cAliasSr3)->R3_FILIAL+(cAliasSr3)->R3_MAT == SRA->RA_FILIAL+SRA->RA_MAT

	While dDataAtu <= dDataAte

		Aadd(aSalario, { "",0.00,MesAno(dDataAtu) })

		dDataAtu := CTOD( "01/" + If( Month( dDataAtu )+1 > 12,;
					  "01/"+StrZero(Year(dDataAtu)+1,4),;
					  StrZero(Month(dDataAtu)+1,2)+"/"+StrZero(Year(dDataAtu),4)),;
	                  "DDMMYY" )
	Enddo

	//-- Somar Salario da mesma data de aumento.
	While !Eof() .And. (cAliasSr3)->R3_FILIAL+(cAliasSr3)->R3_MAT == SRA->RA_FILIAL+SRA->RA_MAT
		cSeq		:= (cAliasSr3)->R3_SEQ
		cTipo		:= (cAliasSr3)->R3_TIPO
		dDtAum		:= IIF( cPaisLoc == "BRA" , If(!Empty( (cAliasSr3)->R3_DTCDISS ) , (cAliasSr3)->R3_DTCDISS , (cAliasSr3)->R3_DATA ) ,(cAliasSr3)->R3_DATA )
		dtHistSal	:= (cAliasSr3)->R3_DATA
		If SR3->(ColumnPos("R3_DTCDISS")) > 0
			dtDiss		:= (cAliasSr3)->R3_DTCDISS
		EndIf
		cCateg		:= (cAliasSr3)->R7_CATFUNC
		nSalario	:= 0.00
		nPosAux++
		//--Somar salario da mesma data e tipo de aumento.
		While !Eof() .And. (cAliasSr3)->R3_FILIAL+(cAliasSr3)->R3_MAT == SRA->RA_FILIAL+SRA->RA_MAT .And.;
			dtHistSal ==   (cAliasSr3)->R3_DATA .and. ;
			dDtAum == IIF( cPaisLoc == "BRA" , If(!Empty( (cAliasSr3)->R3_DTCDISS ) , (cAliasSr3)->R3_DTCDISS , (cAliasSr3)->R3_DATA ) ,(cAliasSr3)->R3_DATA ) .And.;
			cTipo == (cAliasSr3)->R3_TIPO .And.;
			cSeq == (cAliasSr3)->R3_SEQ
			//--Verifica se Salario Incorporado ou Base
			If (!lIncorpora  .And. (cAliasSr3)->R3_PD = "000") .Or. lIncorpora
				nSalario += (cAliasSr3)->R3_VALOR
			EndIf
			dbSelectArea(cAliasSR3)
			dbSkip()
		Enddo
		aAdd(aAuxSala, {dDtAum, iif(dDtAum < dtHistSal, dtHistSal,dDtAum), cTipo, nSalario, cCateg, nPosAux, dtDiss })
	Enddo
	
	aSort(aAuxSala, Nil, Nil, { |x,y| DTos(x[2])+DTos(x[1])+StrZero(x[6],3) < DTos(y[2])+DTos(y[1])+StrZero(y[6],3) })
	
	For nCont := 1 To Len(aAuxSala)
		nAtu := 0
		//--Atualizar Array de retorno
		If MesAno(aAuxSala[nCont,1]) <= aSalario[1,3]
			If (cUltAtu <= MesAno(aAuxSala[nCont,1]) .And. cUltDis <= MesAno(aAuxSala[nCont,2]) .And. !(cUltCat == aAuxSala[nCont,5] .And. Empty(dUltDis) .And. !Empty(aAuxSala[nCont,7]) .And. aSalario[1,2] > aAuxSala[nCont,4] ) ) .Or. (cUltAtu == MesAno(aAuxSala[nCont,1]) .And. aAuxSala[nCont,4] > aSalario[1,2] );
			.Or. (cUltDis <= MesAno(aAuxSala[nCont,1]) .And. aAuxSala[nCont,4] > aSalario[1,2] ) .Or. (cUltAtu >= MesAno(aAuxSala[nCont,1]) .And. cUltDis <= MesAno(aAuxSala[nCont,2]) .And. cUltCat <> aAuxSala[nCont,5])
			   aSalario[1,2] := aAuxSala[nCont,4]
		       aSalario[1,1] := aAuxSala[nCont,3]
		       nATu 		 := 1
		       cUltAtu		 := MesAno(aAuxSala[nCont,1]) // cUltAtu 	-> data do cálculo do dissídio R3_DTCDISS se preenchido
		       cUltDis		 := MesAno(aAuxSala[nCont,2]) // dtHistSal	-> R3_DATA
		       cUltCat		 := aAuxSala[nCont,5]
		       dUltDis		 := aAuxSala[nCont,7]
		    EndIf
	    ElseIf	(nPos:= Ascan(aSalario,{ |x| x[3] == MesAno(aAuxSala[nCont,1])})) > 0
			nAtu := nPos
			If nPos > 0
				If nSalario > aSalario[nPos,2]
			       aSalario[nPos,2] := aAuxSala[nCont,4]
			       aSalario[nPos,1] := aAuxSala[nCont,3]
			    EndIf
			EndIf
		EndIf
		If nAtu # 0
			For nP:= nAtu To Len(aSalario)
				aSalario[nP,2] := aAuxSala[nCont,4]
			Next nP
		EndIf
	Next nCont
EndIf
If ( lQuery )
	dbSelectARea(cAliasSR3)
	dbCloseArea()
	dbSelectArea("SR3")
EndIf

If !lRetTotal
	If ( nPos := Ascan(aSalario,{ |x| x[3] = MesAno(dDataDe)}) ) > 0
		Return(aSalario[nPos,2])
	Else
		Return( SRA->RA_SALARIO )
	EndIf
Else	
	Return(aSalario)
EndIf	
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao   ³fPgMater() ºAutor  ³Emerson Rosa        º Data ³  02/09/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.    ³ Verifica quando devera ser pago em folha o aux. maternidade º±±
±±ÌÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso      ³ SIGAGPE                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fPgMater(dIniAfas,cTipAfas)
Local aArea := GetArea()

Private cRetPgMater := ""  // Sera alterada no Ponto de Entrada

DEFAULT lGpeMater := ExistBlock("GPEMATER")

dIniAfas := If( dIniAfas == Nil, CTOD(""), dIniAfas )
cTipAfas := If( cTipAfas == Nil, "", 	    cTipAfas )

//CONTEUDO PADRAO DO PARAMETRO DE ACORDO COM O SX6
cRetPgMater := GetMvRH("MV_PGSALMA")

If !( cRetPgMater $ "S*N" ) .And. ( SRA->RA_CATFUNC $ cRetPgMater )
	cRetPgMater := "N" // Trata as categorias informadas no MV_PGSALMA como "N"
ElseIf cTipAfas $ "Q4|Q5|Q6"  .Or. !(SRA->RA_CATEG $ "  |01|03|04|07|12|19|20|21|26") //?-Trabalhador Avulso
	cRetPgMater := "N" // Licenca por adocao
Else
	cRetPgMater := "S"
EndIf

//PONTO DE ENTRADA P/ ALTERAR CONTEUDO DA VARIAVEL cRetPgMater
If lGpeMater
	ExecBlock("GPEMATER",.F.,.F.)
EndIf

RestArea( aArea )

Return cRetPgMater

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³fBuscaSituacaoºAutor  ³Andreia dos Santos  º Data ³ 09/11/03º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Busca a situacao do funcionario em determinada data         º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fBuscaSituacao(cCodFilial,cCodMatr,dData,dDtPqIni,dDtPqFim,dAdmissao,lDissidio)
Local cSituacao := Space(01)
Local aTransfAdm:= {}
Local nPos		:= 0
Local nPosterior:= 0
Local nAnterior := 0

DEFAULT lDissidio	:= .F.
DEFAULT dAdmissao	:= SRA->RA_ADMISSA

fChkAfas(cCodFilial,cCodMatr,dData,,,@cSituacao,dDtPqIni,dDtPqFim)
If ! Empty(SRA->RA_DEMISSA) .And. MesAno(SRA->RA_DEMISSA)<= MesAno(dData)
	cSituacao := "D"
ElseIf cSituacao # "F" .And. ! Empty(cSituacao)
	cSituacao := "A"
EndIf	

//-- Encontra a data de admissao do funcionario que entrou por transferencia nesta filial
If lDissidio .And. substr(SRA->RA_TIPOADM,2,1) == "C"
	fTransfAll( @aTransfAdm,,,.T.)
	If len(aTransfAdm) > 0
		//-- Pesquisa a empresa/filial/matricula corrente e mes e ano igual a data de referencia
		nPos := Ascan(aTransfAdm,{|X|	MesAno(X[7]) == MesAno(dData) .And. cEmpAnt == X[4] ;
										.And. SRA->(RA_FILIAL+RA_MAT) == X[5] })
		If nPos > 0
			dAdmissao	:= aTransfAdm[nPos,7]
		Else
			//-- Pesquisa a empresa/filial/matricula corrente e mes e ano igual a data de referencia
			nPos := Ascan(aTransfAdm,{|X|	MesAno(X[7]) == MesAno(dData)})
			If nPos > 0
				//-- Houve transferencia no mes corrente e para empresa/filial/matricula diferente
				//-- Forcando data de admissao maior que a data base para nao processar o funcionario
				dAdmissao	:= MonthSum(dData,1)
			Else
				//-- Pesquisa a primeira transferencia "Para" posterior a data de referencia
				nPosterior	:= Ascan(aTransfAdm,{|X|	MesAno(X[7]) > MesAno(dData)})

				If nPosterior > 0
					//-- Houve transferencia posterior para empresa/filial/matricula diferente
					//-- Forcando data de admissao maior que a data base para nao processar o funcionario
					If cEmpAnt+SRA->(RA_FILIAL+RA_MAT) <> aTransfAdm[nPosterior,1]+aTransfAdm[nPosterior,2]
						dAdmissao	:= aTransfAdm[nPosterior,7]
					Endif
				Else
					//-- Houve transferencia anterior para empresa/filial/matricula diferente
					//-- Forcando data de admissao maior que a data base para nao processar o funcionario
					nAnterior	:= len(aTransfAdm)
					If cEmpAnt+SRA->(RA_FILIAL+RA_MAT) <> aTransfAdm[nAnterior,4]+aTransfAdm[nAnterior,5]
						dAdmissao	:= MonthSum(dData,1)
					Endif
				Endif
			Endif
		Endif
	Endif
	If AnoMes(dAdmissao) > AnoMes(dData)
		cSituacao := "T"
	EndIf
Endif

Return( cSituacao )



/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³InGpexFun1Exec³Autor ³Marinaldo de Jesus   ³ Data ³24/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executar Funcoes Dentro de GPEXFUN1                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³InGpexFun1Exec( cExecIn , aFormParam )						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico 													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function InGpexFun1Exec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

If !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= &( cExecIn )
EndIf

Return( uRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fBusHisFun   ºAutor  ³R.H. - Reginaldo G.Rº Data ³  01/10/09   º±±
±±º			 ³fBusHisFun   ºAutor  ³Igor Franzoi V. II  º Data ³  16/12/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Busca informação his´torica do funcionario                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ cFilial=>     filial Corrente para efetuar a busca			 º±± 
±±º			 ³ cMat=>        Matricula do funcionario p/ efetuar a busca     º±±
±±º			 ³ dDataRef=>    Data de Referencia para busca                   º±±
±±º			 ³ nTipoInf:=1=> busca o codigo da função e a descrição da funcãoº±±
±±º          ³ nTipoInf:=2=> busca cod centro custo e a descrição do CC      º±±
±±º          ³ nTipoInf:=3=> busca Cod do departamento e a descriçãpo        º±±
±±º          ³ nTipoInf:=4=> busca o valor do salario diario                 º±±
±±º          ³ nTipoInf:=5=> busca o valor do salario diario integral        º±±
±±º          ³ nTipoInf:=6=> busca local Cod e descrição do local de pagto   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Generico                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fBusHisFun(cfilial, cMat, dDataRef, nTipoInf, nTypeRet, lFormat, lUsaData)

Local cAliasQry		:= ""
Local cCodigo		:= ""
Local cDescricao	:= ""
Local cRet			:= ""
Local cSalDia		:= ""
Local cSalDii		:= "" 
Local aArea			:= {}
Local cIndexKey     := ""
Local cFilter		:= ""
Local cOrdRcp		:= ""

Local nPosInf		:= 0

Local lQuery		:= .T.
Local cMes          := IIf(Month(dDataRef) > 9,Str(Month(dDataRef),2),"0" + Str(Month(dDataRef),1))
Local cAno          := Str(Year(dDataRef),4)
Local cDia          := Str(F_UltDia(dDataRef),2)
Local dDtRef        := CToD("")

Static _SRAInfBus	:= { "", "", {} }
Static _Salarios	:= { 0, 0 }
Static _RGCInfBus	:= { { "", "" } }
 
DEFAULT lFormat		:= .F. //se = .F. retorna Codigo + Descricao / se = .T. retorna apenas uma das opcoes
DEFAULT nTypeRet	:= 1	//se = 1 retorna Codigo / se diferente de 1 retorna a descricao
DEFAULT lUsaData 	:= .T.

If ( !(_SRAInfBus[01] == cfilial) .or. !(_SRAInfBus[02] == cMat) )
	_SRAInfBus := { cfilial, cMat, { { ctod("//"),"","" },;
									{ ctod("//"),"","" },;
									{ ctod("//"),"","" },;
									{ ctod("//"),"","" },;
									{ ctod("//"),"","" } } }
	_Salarios := { 0, 0 }
Else
	If !( nTypeRet == 1 )
		If ( !(nTipoInf == 4) .and. !(nTipoInf == 5) )
			If ( nTipoInf == 1 )
				If ( _SRAInfBus[03,01,01] <= dDataRef )
                	lQuery		:= .F.
                	cCodigo		:= _SRAInfBus[03,01,02]
                	cDescricao	:= _SRAInfBus[03,01,03]
				EndIf				
			ElseIf ( nTipoInf == 2 )
				If ( _SRAInfBus[03,02,01] <= dDataRef )
                	lQuery		:= .F.
                	cCodigo		:= _SRAInfBus[03,02,02]
                	cDescricao	:= _SRAInfBus[03,02,03]
				EndIf
			ElseIf ( nTipoInf == 3 )				
				If ( _SRAInfBus[03,03,01] <= dDataRef )
                	lQuery		:= .F.
                	cCodigo		:= _SRAInfBus[03,03,02]
                	cDescricao	:= _SRAInfBus[03,03,03]
				EndIf
			ElseIf ( nTipoInf == 7 )
				If ( _SRAInfBus[03,04,01] <= dDataRef )
                	lQuery		:= .F.
                	cCodigo		:= _SRAInfBus[03,04,02]
                	cDescricao	:= _SRAInfBus[03,04,03]
				EndIf
			ElseIf ( nTipoInf == 8 )
				If ( _SRAInfBus[03,05,01] <= dDataRef )
                	lQuery		:= .F.
                	cCodigo		:= _SRAInfBus[03,05,02]
                	cDescricao	:= _SRAInfBus[03,05,03]
				EndIf
			EndIf
		EndIf
	EndIf
EndIf
 
If SRA->(indexkey()) != "RA_FILIAL+RA_MAT" 
	aArea  := GetArea()
	cIndexKey  := SRA->(indexkey())	
	SRA->(DbSetOrder( RetOrder( "SRA", "RA_FILIAL+RA_MAT" ) ))
EndIf
 
nRecno := SRA->(Recno())	
 
SRA->(dbSeek(cfilial+cMat))
	
If cPaisLoc == "MEX" 
	cSalDia			:=	SRA->RA_SALDIA
	cSalDii			:=	SRA->RA_SALINT
EndIf	
			
If !( ValType(dDataRef) == "D" )
	CtoD(dDataRef)
EndIf
	
If lQuery

	If ( nTipoInf == 1)			//busca função	 
	
		fBuscaFunc(dDataRef, @cCodigo, @cDescricao)		
		
		_SRAInfBus[03,01,01] := dDataRef
		_SRAInfBus[03,01,02] :=	 cCodigo
		_SRAInfBus[03,01,03] :=	 cDescricao
			
	ElseIf (nTipoInf == 2)		// Busca Centro de Custo
	
		fBuscaCC(dDataRef, @cCodigo, @cDescricao, If(lUsaData,dDataRef,Nil), .F. , .T. )
		
		_SRAInfBus[03,02,01] := dDataRef
		_SRAInfBus[03,02,02] :=	 cCodigo
		_SRAInfBus[03,02,03] :=	 cDescricao
	
	ElseIf (nTipoInf == 3)		//busca Departamento
		
		cAliasQry := "SREQ"
		
		dDtRef := CToD(cDia + "/" + cMes + "/" + cAno)
		
		If ( SELECT(cAliasQry) > 0 )
			(cAliasQry)->(dbCloseArea())
		EndIf
		
		cFilter := "% SRE.RE_MATD = '"+SRA->RA_MAT+"' AND "
		If FunName() $ "GPER106*GPER040"
			cFilter += " SRE.RE_DATA > '"+Dtos(dDtRef)+"' AND "
		Else
			cFilter += " SRE.RE_DATA >= '"+Dtos(dDataRef)+"' AND "
		EndIf
		cFilter += " SRE.RE_DEPTOD <> SRE.RE_DEPTOP %"
					
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Geracao da Query com os Registros a serem processados        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		BeginSql alias cAliasQry
			SELECT SRE.RE_DEPTOD
			FROM %table:SRE% SRE
			WHERE %exp:cFilter%
			and SRE.%NotDel%
		    ORDER BY SRE.RE_EMPD, SRE.RE_FILIALD, SRE.RE_MATD, SRE.RE_DATA
		EndSql	

		cCodigo	:=	(cAliasQry)->RE_DEPTOD
   		
   		(cAliasQry)->(dbCloseArea())
			
		If Empty(cCodigo)
			cCodigo	:=	AllTrim(SRA->RA_DEPTO)
		EndIf
		
		If ! Empty(cCodigo) 
			cDescricao	:=	LEFT(FDesc("SQB", cCodigo, "QB_DESCRIC",,cfilial),40)
		EndIf
		
		_SRAInfBus[03,03,01] := dDataRef
		_SRAInfBus[03,03,02] :=	 cCodigo
		_SRAInfBus[03,03,03] :=	 cDescricao
		
	ElseIf (nTipoInf == 4) 		//busca valor salario Dia
	
		If ( _Salarios[01] == 0 )
		
			cAliasQry := "RCPQ"
			
			If ( SELECT(cAliasQry) > 0 )
				(cAliasQry)->(dbCloseArea())
			EndIf
			
			cFilter := "% RCP.RCP_FILIAL = '"+cfilial+"' AND "
			cFilter += " RCP.RCP_MAT = '"+SRA->RA_MAT+"' AND "
			cFilter += " RCP.RCP_DTMOV <= '"+Dtos(dDataRef)+"' %"
			
			cOrdRcp := "% RCP.RCP_FILIAL, RCP.RCP_MAT, RCP.RCP_DTMOV DESC %"
						
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Geracao da Query com os Registros a serem processados        ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			BeginSql alias cAliasQry
				SELECT RCP.RCP_SALDIA
				FROM %table:RCP% RCP
				WHERE %exp:cFilter%
				and RCP.%NotDel%
			    ORDER BY %exp:cOrdRcp%
			EndSql	
	
			cSalDia	:=	(cAliasQry)->RCP_SALDIA
	   		
	   		(cAliasQry)->(dbCloseArea())
		   		
			_Salarios[01] := cSalDia
			
		Else
			cSalDia := _Salarios[01]
		EndIf		
	
		cRet	:=	cSalDia 		
	
	ElseIf (nTipoInf == 5)		//busca valor salario Dia integral
	       	
	   	If ( _Salarios[02] == 0 )
	   	
			cAliasQry := "RCPQ2"
			
			If ( SELECT(cAliasQry) > 0 )
				(cAliasQry)->(dbCloseArea())
			EndIf
			
			cFilter := "% RCP.RCP_FILIAL = '"+cfilial+"' AND "
			cFilter += " RCP.RCP_MAT = '"+SRA->RA_MAT+"' AND "
			cFilter += " RCP.RCP_DTMOV <= '"+Dtos(dDataRef)+"' %"
			
			cOrdRcp := "% RCP.RCP_FILIAL, RCP.RCP_MAT, RCP.RCP_DTMOV DESC %"
						
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Geracao da Query com os Registros a serem processados        ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			BeginSql alias cAliasQry
				SELECT RCP.RCP_SALDII
				FROM %table:RCP% RCP
				WHERE %exp:cFilter%
				and RCP.%NotDel%
   				    ORDER BY %exp:cOrdRcp%
			EndSql	
	
			cSalDii	:=	(cAliasQry)->RCP_SALDII
	   		
	   		(cAliasQry)->(dbCloseArea())
		   				   	
		 	_Salarios[02] := cSalDii
		 
		 Else
		 	cSalDii := _Salarios[02]
	     EndIf
	     
		cRet	:=	cSalDii
	
	ElseIf (nTipoInf == 6)		//busca cod e descrição local de pagamento
	
		dbSelectArea("SR9")
		dbSetOrder(1)
	
		cCodigo := gpRetSR9( "SR9", dDataRef, "RA_KEYLOC" )
		If Empty(cCodigo)
		
			If dbSeek(cfilial+cMat+"RA_KEYLOC")
				cCodigo	:=	SR9->R9_DESC
			Else
				cCodigo	:=	SRA->RA_KEYLOC
			EndIf
		EndIf
	
		If ( ( nPosInf := aScan( _RGCInfBus, { |x| AllTrim(x[01]) == AllTrim(cCodigo) } ) ) > 0 )
			cDescricao := _RGCInfBus[nPosInf,02]
		Else
			
			cAliasQry := "RGCQ"
			
			If ( SELECT(cAliasQry) > 0 )
				(cAliasQry)->(dbCloseArea())
			EndIf
			
			cFilter := "% RGC.RGC_FILIAL = '"+xFilial("RGC")+"' AND "
			cFilter += " RGC.RGC_KEYLOC = '"+cCodigo+"' %"
						
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Geracao da Query com os Registros a serem processados        ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			BeginSql alias cAliasQry
				SELECT RGC.RGC_DESLOC
				FROM %table:RGC% RGC
				WHERE %exp:cFilter%
				and RGC.%NotDel%
			    ORDER BY RGC.RGC_FILIAL, RGC.RGC_KEYLOC
			EndSql	
	
			cDescricao	:=	(cAliasQry)->RGC_DESLOC
	   		
	   		(cAliasQry)->(dbCloseArea())
		   					
			aAdd( _RGCInfBus, { cCodigo, cDescricao } )
			
		EndIf
		
	ElseIf (nTipoInf == 7)		//busca cod e descrição Item Contábil
		fBuscaItem(dDataRef, @cCodigo, @cDescricao, dDataRef, .F. , .T. )
		
		_SRAInfBus[03,04,01] := dDataRef
		_SRAInfBus[03,04,02] :=	 cCodigo
		_SRAInfBus[03,04,03] :=	 cDescricao
		
	ElseIf (nTipoInf == 8)		//busca cod e descrição Classe de Valor
		fBuscaCLVL(dDataRef, @cCodigo, @cDescricao, dDataRef, .F. , .T. )
		
		_SRAInfBus[03,05,01] := dDataRef
		_SRAInfBus[03,05,02] :=	 cCodigo
		_SRAInfBus[03,05,03] :=	 cDescricao
				
	EndIf

EndIf

If ( !(nTipoInf == 4) .and. !(nTipoInf == 5) )
	If !(lFormat)
		cRet		:=	AllTrim(cCodigo) + " - " + AllTrim(cDescricao)
	Else
		If ( nTypeRet == 1 )
			cRet	:=	RTrim(cCodigo)
		Else
			cRet	:=	AllTrim(cDescricao)
		EndIf
	EndIf
EndIf

If Len(aArea) > 0
	RestArea( aArea )
	SRA->(DbSetOrder( RetOrder( "SRA", 	cIndexKey ) ))
EndIf
          
SRA->(dbGoto(nRecno))
    
Return(cRet)
      
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³fDTrabPer ºAutor  ³Ademar Fernandes    º Data ³ 11/08/2010  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Calcula os Dias Trabalhados em um periodo considerando os  º±±
±±º          ³ afastamento validos (RCM_DAUSPR $ " 1")                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Localizacao Argentina                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fDTrabPer(cANOMES, nMESES, lMESATUAL)
Local aPerAber := {}
Local aPerFech := {}
Local cPeriodo := ""
Local cNrPagto := ""
Local cAno := ""
Local cMes := ""
Local cRotAux := FGETCALCROT("1")
Local nDTrab := 0
Local nDNTrab := 0
Local nDiasDSR := 0
Local nHrsDSR := 0
Local nHrsTrab := 0
Local xDtRef, nAux, nX

//# Inicializa variaveis
If !Empty(cANOMES)
	cAno := SubStr(cANOMES,1,4)
	cMes := SubStr(cANOMES,5,2)
Else
	xDtRef := Iif(DDATAREF == NIL, DDATABASE, DDATAREF)
	xDtRef := AnoMes(dDtRef)
	
	cAno := SubStr(dDtRef,1,4)
	cMes := SubStr(dDtRef,5,2)
EndIf

//# Altera variaveis pro Mes/Ano inicial
nAux := (Val(cMes) - nMeses) + Iif(lMESATUAL, 1, 0)
If nAux <= 0
	nAux := 12 + nAux
	cAno := StrZero(Val(SubStr(cAnoMes,1,4))-1,4)
EndIf
cMes := StrZero(nAux,2)

For nX=1 to nMeses

	//# Carrega o periodo
	FRETPERCOMP(cMes , cAno , NIL , SRA->RA_PROCES, NIL, @aPerAber, @aPerFech)
	Asort( aPerAber,,, { |x,y| x[1] + x[2] < y[1] + y[2] } )
	Asort( aPerFech,,, { |x,y| x[1] + x[2] < y[1] + y[2] } )
	
	If !Empty(aPerAber)
		cPeriodo := aPerAber[1,1]
		cNrPagto := aPerAber[1,2]
	
	ElseIf !Empty(aPerFech)
		cPeriodo := aPerFech[1,1]
		cNrPagto := aPerFech[1,2]		
	EndIf
	
	//# Busca os Dias Trabalhados
	FTRABCALEN( cPeriodo, @nDTrab, @nDNTrab, @nDiasDSR, , , , @nHrsDSR, @nHrsTrab, , , , cNrPagto, .T., , , cRotAux)
	
	//# Altera variaveis pro Mes seguinte
	If cMes == "12"
		cAno := soma1(cAno)
		cMes := "01"
	Else
   		cMes := soma1(cMes)
	EndIf	

Next nX

Return(nDTrab)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fRetAfasBra³ Autor ³ Mauro Sergio			³ Data ³ 10.07.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta Periodo ou dias de Afastamento						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ 															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Gen‚rico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fRetAfasBra(dDtPesq1,dDtPesq2,cTipoPesq,nAvosAf,nDiasAf,cTipoAfas,aAfast,cVbTpAfas,l13Sal,lSoma15,lTodosAf,lRescisao,nFaltas13,lIsGPEM030,lBusSeq,lAglutSeq)

Local aArea		:= GetArea()
Local aAfast1	:= {}
Local cSitFunc	:= ""
Local cMesAnoFim:= ""
Local cSeqAux	:= ""
Local cTotSeq	:= ""
Local cDtIni	:= ""
Local cDtFim	:= ""
Local cDtAuxIni	:= ""
Local dDtIniAux	:= CtoD("")
Local dIniAfa	:= CtoD("")
Local dFimAfa	:= CtoD("")
Local dDtAuxIni	:= CtoD("")
Local dDtAuxFim	:= CtoD("")
Local lTemSeq 	:= .T.
Local lOutPer	:= .F.
Local lAvoAfa	:= .F.
Local nDiasAfa 	:= 0
Local nDiasEmp	:= 0
Local nDiasFer	:= 0
Local nAvosAp	:= 0
Local nAfaCnt	:= 0
Local nX		:= 0
Local nPos		:= 0
Local nLenAfa	:= 0
Local nDiasAux	:= 0
Local nDiaUltAf	:= 0
Local nDiasPeriodo	:= If(GetMvRH("MV_DIASPER",,"1") == "1",nDiasP,(If(SRA->RA_TIPOPGT =="M", P_QTDIAMES, P_NTOTDIAS)))
Local nAuxDias	:= 0
Local nDiasATmp	:= 0
Local nAuxEnt	:= 0
Local lDtDem 	:= Type("dDataDem") # "U"
Local lCalcFer  := IsInCallStack("GPEM030")
Local lFecPer	:= FwIsInCallStack("GPEM120")
Local nDiasPgAux:= 0

DEFAULT dDtPesq1 	:= aPeriodo[nPosSem,3] //Data inicial do periodo de calculo
DEFAULT dDtPesq2 	:= aPeriodo[nPosSem,4] //Data final do periodo de calculo
DEFAULT cTipoAfas 	:= ""
DEFAULT cVbTpAfas	:= ""
DEFAULT l13Sal   	:= .T.
DEFAULT lSoma15  	:= .T.
DEFAULT lTodosAf 	:= .F.
DEFAULT lIsGPEM030 	:= .F.
DEFAULT nFaltas13 	:= 0
DEFAULT lBusSeq		:= .T. //Define se deve buscar as sequencias de afastamentos anteriores ou utilizar apenas os afastamentos do mês
DEFAULT lAglutSeq	:= .T. //Se falso, não aglutina os afastamentos sequenciais em uma única posição do array aAfast

fBuscaAfast(dDtPesq1,dDtPesq2,@aAfast1,@cSitFunc,cTipoAfas,,cVbTpAfas,cTipoPesq)

If Len(aAfast1) > 0 .And. lBusSeq .and. ( !( Empty(aAfast1[1,10]) ) .or. lFecPer )
	DbSelectArea("SR8")
	SR8->( DbSetOrder(2) )
	dDtAuxIni := dDtPesq1
	dDtAuxFim := dDtPesq2
	If !Empty(aAfast1[1,10])
		If MsSeek(SRA->RA_FILIAL + SRA->RA_MAT + aAfast1[1,10])
			dDtAuxIni := SR8->R8_DATAINI
		EndIf
	EndIf
	If lFecPer //Se estiver efetuando o fechamento do período, verifica se existe outros afastamentos com sequencia do primeiro para o caso de perda de prescrição de período
		If MsSeek(SRA->RA_FILIAL + SRA->RA_MAT)
		 	While SR8->(!Eof() .and. R8_FILIAL + R8_MAT == SRA->RA_FILIAL + SRA->RA_MAT )
		 		If SR8->R8_CONTAFA == aAfast1[Len(aAfast1),15]
		 			dDtAuxFim := SR8->R8_DATAINI + 1
		 		EndIf
		 		SR8->(DbSkip())
		 	EndDo 
		EndIf
	EndIf
	If dDtAuxIni <> dDtPesq1 .or. dDtAuxFim <> dDtPesq2
		fBuscaAfast(dDtAuxIni,dDtAuxFim,@aAfast1,@cSitFunc,cTipoAfas,,cVbTpAfas,cTipoPesq)
	EndIf
	dDtAuxIni	:= CtoD("")
	dDtAuxFim	:= CtoD("")
EndIf

aAfast  	:= {}
cMesAnoFim 	:= MesAno(dDtPesq2)
nAvosAf 	:= 0
nDiasAf 	:= 0
nAvosTot	:= 0
nAvosMat	:= 0	//Avos de licenca maternidade
nAvosInss	:= 0
nDiasMat	:= 0	//Dias de licenca maternidade
nAvoEnc		:= 0	//Avos correspondentes aos encargos da empresa
nAvoFGTS	:= 0	//Avos referentes ao FGTS (RCM_DEPFGT)
nLenAfa		:= Len(aAfast1)

If Type("nAvosTot") == "U"
	nAvosTot := 0
EndIf

// Verificacao das Rotinas de Rescisao e Rescisao Coletiva
// Caso a chamada de fRetAfas tenha sido originada por algumas destas rotinas
// a var lRescisao sempre sera .T. para calcular corretamente os avos referentes
// ao afastamento do funcionario
If IsInCallStack( "GPEM040" ) .Or. IsInCallStack( "GPEM630" ) .Or. FunName() == "GPEM040"
	lRescisao := .T.
Else
	lRescisao := If( lRescisao = Nil, .F., lRescisao )
EndIf

If lRescisao .And. nDiasC == 0 .and. Len(aPeriodo) > 0
	nDiasC := If(aPeriodo[nPosSem,16]=="02" .And. !P_PGSALFEV .And. (!Empty(SRA->RA_SITFOLH) .Or. (Day(SRA->RA_ADMISSA) > 01 .And. (Month(SRA->RA_ADMISSA)==2 .And. Year(SRA->RA_ADMISSA) == Val(aPeriodo[nPosSem,15])))),aPeriodo[nPosSem,18], aPeriodo[nPosSem,20])
EndIf

For nX := 1 to nLenAfa
	lTemSeq 	:= .T.
	nDiasAfa 	:= 0
	nDiasAP 	:= 0
	nAvosAP 	:= 0
	nDiasEmp	:= 0	
	cSeqAux 	:= aAfast1[nX,15]
	dIniAfa		:= aAfast1[nX,1]
	dFimAfa		:= aAfast1[nX,2]
	
	If nX > 1
		If !( MesAno(aAfast1[nX-1,2]) == MesAno(dIniAfa) )
			nAfaCnt := 0
		EndIf
	EndIf
	
	If aAfast1[nX,15] $ cTotSeq
		Loop
	Else
		cTotSeq += cSeqAux + "*"
	EndIf

	If cPaisLoc == "BRA" .And. fSuspDisc( aClone( aAfast1[nX] ) )
		Loop
	EndIf

	nPos := nX
	
	nDiasAux := 0
	
	//Guarda o numero de dias de inicio do PLR, Ferias ou 13.
	If (cTipoPesq == "F" .Or. cTipoPesq == "PRFE").and. aAfast1[nPos,29] > 1
		nDiasAux := aAfast1[nPos,29] //RCM_DIASFE
	ElseIf cTipoPesq == "PLR" .and. aAfast1[nPos,28] > 1
		nDiasAux := aAfast1[nPos,28] //RCM_DIASPL
	ElseIf (cTipoPesq == "13" .Or. cTipoPesq == "PR13").and. aAfast1[nPos,27] > 1
		nDiasAux := aAfast1[nPos,27] //RCM_DIAS13
	EndIf

	While lTemSeq
		dDtIni	:= aAfast1[nPos,1]
		dDtFim	:= aAfast1[nPos,2]
		
		nDiasA	:= 0
		
		If Empty(nAuxDias)
			nDiasPgAux += aAfast1[nPos,23]
		EndIf

		dDtIniAux := CtoD("")
		
		//So adiciona ao inicio do afastamento uma quantidade que não seja superior ao termino do afastamento.
		If !Empty(dDtFim) .And. ( dDtIni + Max( (nDiasAux - nAuxDias), 0 ) ) > dDtFim
			nDiasAux -= dDtFim - dDtIni + 1
			dDtIni := dDtIni + ( dDtFim - dDtIni + 1 )			
		Else
			dDtIniAux  := dDtIni
		 	dDtIni 	   := dDtIni + Max( (nDiasAux - nAuxDias), 0 )
		 	nDiasAux := 0
		EndIf

		If lCalcFer .Or. ( aAfast1[nPos,31] != "2" .or. Empty(cTipoPesq) ) .Or. cTipoPesq $ "13*PR13*PLR" //RCM_CONGAF: 1=Período aquisitivo / 2=Afastamento
			dDtIni := If (dDtIni < dDtPesq1 ,dDtPesq1,dDtIni )
		EndIf		
		
		If dDtFim > dDtPesq2 .Or. Empty(dDtFim)			
			lOutPer := .T. // Indica que afastamento esta fora do periodo ou em branco (devera contar ate dias de calculo)			
			dDtFim := dDtPesq2
		EndIf
		
		cDtIni := MesAno(dDtIni)
		cDtFim := MesAno(dDtFim)
		
		If Mesano(dDtAuxFim) < cDtIni
			nDiaUltAf := 0
		EndIf  

		If cDtIni == cDtFim
			If dDtFim >= dDtIni
				If dDtFim >= dDtPesq2
					If (GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dDtFim) == 31 .And. nDiasC == 30 .And. SRA->RA_CATFUNC = "M") 
						nDiasA	 := ( Day(dDtFim) - Day(dDtIni) )
						nDiasAfa += (nDiasA + 1) //SOma 1 para gravar a quantidade total de dias do afastamento
					Else
						If P_PGSALFEV .AND. lOutPer				
							nDiasA	 := If(Day(dDtFim) <= 29 .And. nDiasC == 30  ,If(Day(dDtFim) == 28,( Day(dDtFim) - Day(dDtIni) ) + 3,( Day(dDtFim) - Day(dDtIni) ) + 2) ,( Day(dDtFim) - Day(dDtIni) ) + 1)	
						Else	
							nDiasA   := ( Day(dDtFim) - Day(dDtIni) ) + 1							
						EndIf
						nDiasAfa += nDiasA
					EndIf	
				Else
					nDiasA   := Max( ( Day(dDtFim) - Day(dDtIni) ) + 1,0 )
					nDiasAfa += nDiasA
				EndIf
		 		
				nAfaCnt += nDiasA
				
				If aAfast1[nPos,19] $ "Q1*Q3" //Soma dias licenca maternidade
					nDiasMat += nDiasA
				EndIf
				
				If aAfast1[nPos,13] == "001" //Soma dias ferias
					nDiasFer += nDiasA
				EndIf

				lAvoAfa := .F.
	
				If nPos+1 > nLenAfa .or. MesAno(aAfast1[nPos+1,1]) >= cDtIni
					If lRescisao .And. cDtFim == cMesAnoFim
						nDiasT := Iif((dDtPesq2 - dDtIni) + 1 >= 15, (dDtPesq2 - dDtIni) + 1 - nAfaCnt, nDiasC)
					ElseIf nDiasC == 30 .And. !(cTipoRot $ "5*6")
						nDiasT := nDiasC - ( If((nDiasPgAux > 0 .And. nDiasPgAux < 15) .And. nAfaCnt <= 15 , nAfaCnt - nDiasPgAux, nAfaCnt) + nDiaUltAf )
					Else 
						nDiasT := f_UltDia(dDtIni) - ( If( nDiasPgAux >= 0 .And. nDiasPgAux < 15 .And. nAfaCnt <= 15 .And. nDiaUltAf == 0, 0, nAfaCnt) + nDiaUltAf )
					EndIf
					
					nDiaUltAf := 0
				
					If nDiasT - (If(nFaltas13 < 15,nFaltas13,0)) < 15
					
						nAvosAP ++
						nAvosAf ++
						lAvoAfa := .T.
						
						If aAfast1[nPos,19] $ "Q1*Q3" .AND. aAfast1[nPos,9] > 0 //Soma avos licenca maternidade
							nAvosMat ++
						ELSEIF aAfast1[nPos,19] $ "Q1*Q3" .AND. aAfast1[nPos,9] == 0 
					   		nAvosInss ++
						EndIf
						
						If aAfast1[nPos,16] == "1" //Soma avos FGTS quando for calculo integral
							nAvoFGTS++
						EndIf  
						
						If aAfast1[nPos,17] == "1" //Soma avos de Encargo da empresa  quando for calculo integral
							nAvoEnc++
						EndIf
						
						//-- Nao conta o avo de afastamento no mes da rescisao de contrato para o 13o salario somente
						//-- se a data de demissao ocorrer antes do dia 15 do mes.
						//-- Caso a demissao seja apos o 15o dia, verificaremos se a quantidade de dias de afastamentos
						//-- e' inferior a 15 dias, o que indica que o tempo de afastamento e' encargo da empresa.
						If	lRescisao .And. ;
							cDtIni == cDtFim .And. ;
							MesAno(dDtFim) == MesAno(If( lDtDem, dDataDem, (cTBLXPROV)->PR_DEMISSA )) .And. ;
							( Day(If( lDtDem, dDataDem, (cTBLXPROV)->PR_DEMISSA )) < 15 .Or.;
							  ( ( Day( If( lDtDem, dDataDem, (cTBLXPROV)->PR_DEMISSA ) ) - nFaltas13 ) < 15 ) .Or. ( lDtDem .And. aAfast1[nPos,19] $ "Q1*Q3" .And. Day(dDataDem) - nDiasA < 15 ) )//Avo ja abatido em fAvos13() na rescisao
							nAvosAP --
							nAvosAf --
							If aAfast1[nPos,19] $ "Q1*Q3" //Soma avos licenca maternidade
								nAvosMat --
							EndIf
						Else
							If cTipoPesq =="F" .and. aAfast1[nPos,5] $ "1*2"
								nAvosTot++
							ElseIf cTipoPesq == "PRFE"  .and. aAfast1[nPos,7] $ "2*3"
								nAvosTot++
							ElseIf ( cTipoPesq == "13" .and. aAfast1[nPos,6] == "1" ) .or. ( cTipoPesq == "PR13" .and. aAfast1[nPos,8] == "1" ) 
								nAvosTot ++
							EndIf
						EndIf
						nAfaCnt := 0
					EndIf
				EndIf
				
				nDiasAf += nDiasA
				nDiasAP += nDiasA
				If cTipoPesq == "F" .And. aAfast1[nPos,5] == "2" .And. nAvosTot == 0 .And. nDiasAf >= 30
					nAvosAP := 1
					nAvosAf := 1
				EndIf
			EndIf
						
			If Empty(cSeqAux) .or. ( nPos := aScan( aAfast1,{|x|x[10] == cSeqAux}) ) == 0 .or. !lAglutSeq
				lTemSeq  := .F.
				nAuxDias := 0
				nAfaCnt  := 0
			Else
				cSeqAux := aAfast1[nPos,15]
				cTotSeq += cSeqAux + "*"
				dFimAfa	:= aAfast1[nPos,2]
				nDiasAux := If( nPos <= nLenAfa .And. !Empty(aAfast1[nPos,15]), nDiasAux, 0 )
				nAuxDias := nDiasA
				If !Empty(dDtIniAux) .and. AnoMes(dDtIniAux) <> AnoMes(dDtIni) .and. nPos > 1 .and. !Empty(aAfast1[nPos,10])
					If !lAvoAfa
						nDiaUltAf += nDiasA
					EndIf
					dDtIniAux := CtoD("")
					dDtAuxFim := aAfast1[nPos,1]
				EndIf
				nDiasPgAux += aAfast1[nPos,23]
				If  aAfast1[nx, 11] < aAfast1[nx, 21] .And. IsInCallStack( "GPEM500") .And. aAfast1[nPos, 21] > 0
					dIniAfa := aAfast1[nPos,1] - aAfast1[nPos, 9] + aAfast1[nPos, 21]
				Endif
				nAfaCnt := If(nAfaCnt > 0 .And. AnoMes(aAfast1[nPos,1]) > cDtFim, 0, nAfaCnt)
			EndIf			
		Else
			If dDtFim >= dDtIni
				cDtAuxIni := cDtIni
				dDtAuxIni := dDtIni
				dDtAuxFim := StoD(cDtAuxIni+StrZero(f_UltDia(CtoD("01/"+Subs(cDtAuxIni,5,2)+"/"+Subs(cDtAuxIni,1,4),"DDMMYY")),2))
				While cDtAuxIni <= cDtFim
					nAuxEnt += 1
					If lRescisao .and. cTipoPesq == "F"
						nDiasA   := Min( If((GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dDtAuxFim) == 31) .and. nDiasC == 30, ( dDtAuxFim - dDtAuxIni ), ( dDtAuxFim - dDtAuxIni ) + 1) , nDiasC)
						nDiasAfa += nDiasA
					Else
						If GetMvRH("MV_DIASPER",,"1") == "2" .AND. Day(dDtAuxFim) == 31 .and. nDiasC == 30 .And. (!(cTipoRot $ "5*6") .And. f_UltDia(dDtAuxFim) == 31)
							nDiasA := Day(dDtAuxFim) - Day(dDtAuxIni)
							nDiasAfa += (nDiasA + 1) //Soma 1 para gravar a quantidade total de dias do afastamento
						Else
							//Se o loop estiver passando pelo mês de fevereiro
							If Month(dDtAuxFim) == 2
								//Verifico se o mnemonico está ativado. Caso esteja, quer dizer que são utilizados 30 dias para pagamento em fevereiro.
								If Day(dDtAuxFim) >= 28 .And. P_PGSALFEV .AND. !IsIncallStack("GPEM500")
									//Caso o dia final de fevereiro seja 28, acrescento 3 dias ao término para completar 30 dias
									If Day(dDtAuxFim) == 28
										nDiasA := If(nDiasC == 30 , Day(dDtAuxFim) - Day(dDtAuxIni) + 3, ( Day(dDtAuxFim) - Day(dDtAuxIni) ) + 1)
									//Caso o dia final seja 29, acrescento 2 dias.
									Else
										nDiasA := If(nDiasC == 30 , Day(dDtAuxFim) - Day(dDtAuxIni) + 2, ( Day(dDtAuxFim) - Day(dDtAuxIni) ) + 1)
									EndIf
								Else
									//Caso o mnemonico não esteja ativado, quer dizer que utiliza o mês de fevereiro sobre os dias do mês.
									nDiasA := Day(dDtAuxFim) - Day(dDtAuxIni) + 1
								EndIf
							Else
								//Caso não seja fevereiro, soma-se 1 dia ao final do período para a correta contagem do afastamento.
								nDiasA := Day(dDtAuxFim) - Day(dDtAuxIni) + 1
							EndIf
							nDiasAfa += nDiasA
						EndIf
					EndIf
					
					nAfaCnt += nDiasA
					
					If aAfast1[nPos,19] $ "Q1*Q3" //Soma dias licenca maternidade
						nDiasMat += nDiasA
					EndIf

					lAvoAfa := .F.
					
					If nPos+1 > nLenAfa .or. MesAno(aAfast1[nPos+1,1]) >= cDtAuxIni					
						If lRescisao .And. cDtAuxIni == cDtFim .And. AnoMes(dDtPesq2) == cDtFim // Último mês da pesquisa
							nDiasT := If((dDtPesq2 - dDtAuxIni) + 1 >= 15, (dDtPesq2 - dDtAuxIni) + 1 - nAfaCnt, nDiasC)
						ElseIf nDiasC == 30 .And. (!(cTipoRot $ "5*6") .Or. f_UltDia(dDtAuxFim) < 30)
							nDiasT := nDiasC - ( If((nDiasPgAux > 0 .And. nDiasPgAux < 15) .And. nAfaCnt <= 15 , nAfaCnt - nDiasPgAux, nAfaCnt) + nDiaUltAf )
						Else	
							nDiasT := f_UltDia(dDtAuxFim)  - ( If((nDiasPgAux >= 0 .And. nDiasPgAux < 15) .And. nAfaCnt <= 15 , nAfaCnt - nDiasPgAux, nAfaCnt) + nDiaUltAf )
						EndIf
						
						nDiaUltAf := 0  
						nAfaCnt := 0
						
						If nDiasT < 15  
							lAvoAfa := .T.
							nAvosAP ++
							nAvosAf ++
							
							If aAfast1[nPos,19] $ "Q1*Q3"  .AND. aAfast1[nPos,9] > 0 //Soma avos licenca maternidade
								nAvosMat ++ 
							ELSEIF aAfast1[nPos,19] $ "Q1*Q3" .AND. aAfast1[nPos,9] == 0 
					   			nAvosInss ++
							EndIf           
							
							If aAfast1[nPos,16] == "1" //Soma avos FGTS quando for calculo integral
								nAvoFGTS++
							EndIf
							
							If aAfast1[nPos,17] == "1" //Soma avos de Encargo da empresa  quando for calculo integral
								nAvoEnc++
							EndIf
							
							If	lRescisao .And. ;
								cDtAuxIni == cDtFim .And. ;
								MesAno(dDtFim) == MesAno(If( lDtDem, dDataDem, (cTBLXPROV)->PR_DEMISSA )) .And. ;
								( Day(If( lDtDem, dDataDem, (cTBLXPROV)->PR_DEMISSA )) < 15 .Or.;
								  ( ( Day( If( lDtDem, dDataDem, (cTBLXPROV)->PR_DEMISSA ) ) - nFaltas13 ) < 15 ) .Or. ( lDtDem .And. aAfast1[nPos,19] $ "Q1*Q3" .And. Day(dDataDem) - nDiasA < 15 ) )//Avo ja abatido em fAvos13() na rescisao
								nAvosAP --
								nAvosAf --
								If aAfast1[nPos,19] $ "Q1*Q3" //Soma avos licenca maternidade
									nAvosMat --
								EndIf
							Else
								If cTipoPesq =="F" .and. aAfast1[nPos,5] $ "1*2"
									nAvosTot++
								ElseIf cTipoPesq == "PRFE"  .and. aAfast1[nPos,7] $ "2*3"
									nAvosTot++
								ElseIf ( cTipoPesq == "13" .and. aAfast1[nPos,6] == "1" ) .or. ( cTipoPesq == "PR13" .and. aAfast1[nPos,8] == "1" ) 
									nAvosTot ++
								EndIf
							EndIf
						EndIf
					EndIf
		
					dDtAuxIni := dDtAuxFim+1 //Soma um dia no ultimo dia do mes para obter o primeiro do proximo mes
					
					//--Montar Data do Mes Seguinte
					If Val(Subs(cDtAuxIni,5,2)) + 1 > 12
						cDtAuxIni := StrZero(Val(Subs(cDtAuxIni,1,4))+1 ,4) + "01"
					Else
						cDtAuxIni := Subs(cDtAuxIni,1,4)+StrZero( Val(Subs(cDtAuxIni,5,2))+1,2)
					EndIf
					
					dDtAuxFim := StoD(cDtAuxIni+StrZero(f_UltDia(CtoD("01/"+Subs(cDtAuxIni,5,2)+"/"+Subs(cDtAuxIni,1,4),"DDMMYY")),2))				
					dDtAuxFim := Min(dDtFim,dDtAuxFim)
					
					//Quando o afastamento ultrapassa 1 mes o saldo dos dias afastados no mes de término do afastamento deve ser 
					//considerado ao avaliar os dias de afastamento do proximo registro, caso esteja no mesmo mes/ano e seja continuacao
					If cDtAuxIni > cDtFim .And. nDiasA > 0 .And. nPos+1 <= nLenAfa
						If !Empty(aAfast1[nPos+1,15]) .And. MesAno(aAfast1[nPos+1,1] + Max( (nDiasAux - nAuxDias),0)) == cDtFim .and. !lAvoAfa
							nDiaUltAf := nDiasA
						EndIf
					EndIf 
					
					If nDiaUltAf == 0 .And. MesAno(dDtIni) < MesAno(dDtFim) .And. nDiasA > 0 .And. nPos <= nLenAfa .And. cRot == "FER"
						If !Empty(aAfast1[nPos,15]) .And. MesAno(aAfast1[nPos,2] + Max( (nDiasAux - nAuxDias),0)) == cDtFim .And. !lAvoAfa
							nDiaUltAf := nDiasA
						EndIf
					Endif

					nDiasAf   += nDiasA
					nDiasAP   += nDiasA
					If cTipoPesq == "F" .And. aAfast1[nPos,5] == "2" .And. nAvosTot == 0 .And. nDiasAf >= 30
						nAvosAP := 1
						nAvosAf := 1
					EndIf
					nDiasATmp += nDiasA
					nDiasA    := 0
					nDiasT    := 0
				EndDo
	
				nDiasEmp += aAfast1[nPos,21]
	
				If nAuxEnt == 0
					nDiasATmp := aAfast1[nPos,11]
				Else
					nAuxEnt := 0
				EndIf
			EndIf
			
			If (Empty(cSeqAux) .Or. ( nPos := aScan( aAfast1,{|x|x[10] == cSeqAux}) ) == 0 .Or. !lAglutSeq) .Or. (IsInCallStack("GPEM500") .And. nPos > 0 .And. aAfast1[nPos, 1] > aAfast1[nX, 2] + 1)
				lTemSeq   := .F.
				nAuxDias  := 0
				nDiasATmp := 0
			Else
				cSeqAux := aAfast1[nPos,15]
				cTotSeq += cSeqAux + "*"
				dFimAfa	:= aAfast1[nPos,2]
				nAuxDias += nDiasATmp
				nDiasATmp:= 0
			EndIf		
		EndIf
		
	EndDo

	If cTipoPesq == "F" .And. aAfast1[nX,5] == '2' .And. nDiasAfa <= 30 .And. nAvosAP > 1
		nAvosAP := 1
	EndIf
	                  
	aAdd(aAfast,{	nAvosAP,; 			//1 - Avos afastados
					nDiasAP,;			//2 - Dias afastados
					dIniAfa,;			//3 - Início do afastamento
					dFimAfa,;			//4 - Fim do afastamento
					aAfast1[nX,4],;		//5 - Tipo do afastamento
					aAfast1[nX,3],;		//6 - Código RAIS
					aAfast1[nX,5],;		//7 - Tratamento de Férias
					aAfast1[nX,6],;		//8 - Tratamento de 13º Salário
					aAfast1[nX,7],;		//9 - Tratamento Provisão de Férias
					aAfast1[nX,8],;		//10- Tratamento de Provisão de 13º Salário
					nDiasAfa,;			//11- Duração do afastamento
					aAfast1[nX,12],;	//12- Verba
					aAfast1[nX,13],;	//13- Tipo da ausência (código)
					nAvosTot,;			//14- nAvosTot
					nDiasEmp,;			//15- Dias pagos pela empresa (RCM_DIASEM)
					aAfast1[nX,19],;	//16- Código Sefip (RCM_CODSEF)
					aAfast1[nX,16],;	//17- FGTS  (RCM_DEPFGT)
					aAfast1[nX,17],;	//18- Encargos (RCM_ENCEMP)
					nDiasPgAux,;	    //19- Dias Pagos (R8_DPAGOS) - Usado na RAIS
					aAfast1[nX,21],;	//20- Dias responsabilidade empresa  (R8_DIASEMP) - Usado na RAIS
					aAfast1[nX,11],;    //21- Dias afastados, para tratamento de congelamento 13º apenas
					aAfast1[nX,27]	})  //22- Qtde de dias limite para congelamento 13º apenas //elo
		
	nDiasPgAux := 0
Next nX 

If !(SRA->RA_CATFUNC $ "D*H*T*G")
	//?-Tratamento para diminuir o Afastamento de Maternidade quando no mesmo mes que Ferias
	If (nDiasFer + nDiasMat + nDPrgSalMa) > nDiasPeriodo  
		IF nDPrgSalMa > 0                           
			nDPrgSalMa -= Max(((nDiasFer + nDiasMat + nDPrgSalMa) - nDiasPeriodo), 0)
		Else
			nDiasMat -= ((nDiasFer + nDiasMat) - nDiasPeriodo)
		Endif	
	EndIf
EndIf

RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³RhGetFuncInfo³ Autor ³ Leandro Drumond	³ Data ³ 19.03.14 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Obtem informacoes do funcionario logado no Fluig			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ 															  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Gen‚rico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function RhGetFuncInfo(cEmp,cFil,cMat,cDepto,cRecno,cCPF,cFilMatEst,lEstrut)
Local aArea	  	:= GetArea()
Local aRetAux 	:= {}
Local aChvItem	:= {}
Local cStrAux 	:= ""
Local cVisao	:= ""
Local cItem		:= ""
Local cFilRD4 	:= ""
Local cFilSQB 	:= ""
Local cFilSRA 	:= ""
Local cDptoAux	:= ""
Local cChaveItem:= ""
Local cDeptos	:= ""
Local cDeptoAnt	:= ""
Local cRD4Alias	:= GetNextAlias()
Local cAuxAlias1:= GetNextAlias()
Local cSQBAlias	:= ""
Local cFilResp	:= ""
Local cOrgCfg 	:= GetMvRH("MV_ORGCFG", NIL, "0" )	//-- Controlde de Postos : 0-não usa Sigaorg;1-Tem controle de postos; 2- não tem  controle de postos 
Local lQryResp	:= .F.
Local lContinua	:= .T.
Local nTamMat 	:= TAMSX3("RA_MAT")[1]
Local nPosItem	:= 0

DEFAULT lEstrut 	:= .T.
DEFAULT cFilMatEst 	:= ""

//Posiciona no usuario logado
PswSeek(__cUserId)

//Obtem os dados do usuario logado
aRetAux := PswRet(1)

//Obtem a Empresa, Filial e Matricula do usuario logado
cStrAux := RTrim(aRetAux[1][22])

cEmp := Left(aRetAux[1][22],2) 				//--Empresa
cMat := Right(cStrAux,nTamMat) 				   	//--Matricula
cFil := SubStr(cStrAux,3,At(cMat,cStrAux)-3) + Space(12)
cFil := Substr(cFil, 1, FwSizeFilial(cEmp) ) 	//--Filial

DbSelectArea("SRA")
DbSetOrder(1)
DbSeek(cFil+cMat)
cCpf := SRA->RA_CIC
cDptoAux	:= SRA->RA_DEPTO

DbSetOrder(RetOrder("SRA","RA_CIC+RA_FILIAL+RA_MAT")) //Busca todos os vinculos do funcionario
DbSeek(cCpf)
While SRA->(!Eof() .and. RA_CIC == cCpf)
	If !(RA_FILIAL + RA_MAT $ cFilMatEst)
		cFilMatEst += RA_FILIAL + RA_MAT + "*"
	EndIf
	DbSkip()
EndDo

//Retorna apenas informacoes do usuario logado, nao obtem estrutura hierarquica
If !lEstrut
	Return Nil
EndIf

If cOrgCfg $ "1*2"
	DbSelectArea("RDZ")
	DbSetOrder(1) //RDZ_FILIAL+RDZ_EMPENT+RDZ_FILENT+RDZ_ENTIDA+RDZ_CODENT+RDZ_CODRD0
	If DbSeek(xFilial("RDZ") + cEmp + cFil + "SRA" + cFil + cMat)
		DbSelectArea("RDE")
		DbSetOrder(1)
		If DbSeek(xFilial("RDE")+RDZ->RDZ_CODRD0)
			cVisao := RDE_CODVIS
		EndIf
	EndIf
EndIf

If cOrgCfg == "1"

	BeginSql alias cRD4Alias
	
		SELECT RD4.RD4_ITEM, RD4.RD4_TREE, RD4.RD4_CHAVE
		FROM %table:RD4% RD4
		INNER JOIN %table:RDK% RDK ON RD4.RD4_FILIAL = RDK.RDK_FILIAL   AND
		   							  RD4.RD4_CODIGO = RDK.RDK_CODIGO
		WHERE RD4.RD4_CODIGO = %exp:cVisao% AND
		      RD4.RD4_FILIAL = %xfilial:RD4% AND
		      RD4.RD4_CODIDE = %exp:cDptoAux% AND
		      RDK.RDK_HIERAR = '1'          AND
		      RDK.RDK_TIPO   = '1'          AND
		      RDK.%notDel%			      AND
		      RD4.%notDel%
	EndSql
	
	If !(cRD4Alias)->( Eof() )
		cItem  := (cRD4Alias)->RD4_ITEM
	EndIf
	
	(cRD4Alias)->( DbCloseArea() )
	
	BEGINSQL ALIAS cRD4Alias
		SELECT 
			SRA.R_E_C_N_O_ AS RECNO, SRA.RA_FILIAL, SRA.RA_MAT
		FROM %table:RD4% RD4
		INNER JOIN %table:RCX% RCX ON RCX.RCX_POSTO = RD4.RD4_CODIDE
		INNER JOIN %table:SRA% SRA ON RCX.RCX_FILFUN = SRA.RA_FILIAL	AND
									  RCX.RCX_MATFUN = SRA.RA_MAT
		LEFT JOIN %table:RDZ% RDZ  ON RDZ.RDZ_CODENT = SRA.RA_FILIAL || SRA.RA_MAT AND
		 							  RDZ.RDZ_FILIAL = %xfilial:RDZ%    AND
		 							  RDZ.RDZ_EMPENT = %exp:cEmp%    AND					
		 							  RDZ.%notdel%
		LEFT JOIN %table:RD0% RD0  ON RD0.RD0_CODIGO = RDZ.RDZ_CODRD0   AND
									  RD0.RD0_FILIAL = %xfilial:RD0%    AND
									  RD0.%notdel%
		WHERE RCX.RCX_SUBST  = '2'				 AND
			  RCX.RCX_TIPOCU = '1'               AND
		      RCX.RCX_FILIAL = %xfilial:RCX%     AND
			  RD4.RD4_TREE   = %exp:cItem%       AND
		      RD4.RD4_CODIGO = %exp:cVisao%     AND
		      RD4.RD4_FILIAL = %xfilial:RD4%     AND
		      RD4.%notDel%                       AND
		      SRA.%notDel%                       AND
		      RCX.%notDel%
		ORDER BY RD4.RD4_CHAVE
	EndSql                            

	While (cRD4Alias)->( !Eof() ) 
		If (cRD4Alias)->RA_FILIAL + (cRD4Alias)->RA_MAT <> cFil + cMat
			If !Empty(cRecno)
				cRecno += ","
			EndIf
			cRecno += AllTrim(Str((cRD4Alias)->RECNO))
			If !((cRD4Alias)->RA_FILIAL + (cRD4Alias)->RA_MAT $ cFilMatEst)
				cFilMatEst += (cRD4Alias)->RA_FILIAL + (cRD4Alias)->RA_MAT + "*"
			EndIf
		EndIf
		(cRD4Alias)->( DbSkip() )
	EndDo
	
	(cRD4Alias)->(DbCloseArea())
ElseIf cOrgCfg == "2"
	//Faz validacao do modo de acesso do Departamento
	//Compartilhado: nao faz filtro da filial do SRA e traz funcionarios do departamento
	//Exclusivo: faz filtro da filial do SRA de acordo com a filial do responsavel do departamento
	If Empty( xFilial("SQB") )
		cFilRD4 := "%%"
		cFilSQB := "%'" + xFilial("SQB") + "'%"
		cFilSRA := "%%"
	Else
		cFilRD4 := "%RD4.RD4_FILIDE = '" + xFilial( 'SQB', cFil ) + "' AND%"
		cFilSQB := "%'" + xFilial( 'SQB', cFil ) + "'%"
		cFilSRA := "%SRA.RA_FILIAL  = '" + xFilial( "SRA", cFil ) + "' AND%"
	EndIf
	
	//Busca as chaves dos departamentso que o funcionario e' responsavel para verificar
	//todos os departamentos abaixo do nivel hierarquico da chave
	
    BeginSQL ALIAS cRD4Alias
		SELECT RD4.RD4_ITEM 
		FROM %table:SQB% SQB
		INNER JOIN %table:RD4% RD4 ON RD4.RD4_CODIDE = SQB.QB_DEPTO
		WHERE RD4.RD4_CODIGO = %exp:cVisao% AND
	      	  RD4.RD4_FILIAL = %xfilial:RD4% AND
		      %exp:cFilRD4%
	      	  SQB.QB_FILRESP = %exp:cFil% 	AND 
	      	  SQB.QB_MATRESP = %exp:cMat% 	AND
	      	  SQB.QB_FILIAL  = %exp:cFilSQB% 	AND
	      	  RD4.%notDel%                   AND
	      	  SQB.%notDel%            
    EndSQL
	            
    //Monta o filtro da instrucao Like de todos os departamentos que o funcionario e' o responsavel
	//Se nao for responsavel por nenhum, nao ira trazer de nenhum departamento
    While (cRD4Alias)->( !Eof() ) 
    	If aScan( aChvItem, { |aChvItem| aChvItem[1] == AllTrim( (cRD4Alias)->RD4_ITEM ) } ) == 0
            aAdd( aChvItem, { AllTrim( (cRD4Alias)->RD4_ITEM ) } )
        EndIf
        lQryResp	:= .T.
        (cRD4Alias)->( dbSkip() )
	End While
 	If lQryResp
  		cChaveItem := "% RD4.RD4_ITEM IN ("
   		For nPosItem := 1 To Len(aChvItem)
   			cChaveItem += "'" + aChvItem[nPosItem, 1] + "' ,"
   		Next nPosItem
		cChaveItem := SubStr( cChaveItem, 1, Len(cChaveItem) - 2 )
  		cChaveItem += ") %"
   	Else
   		cChaveItem := "% RD4.RD4_ITEM = 'ZZZZZZ' %"
   	EndIf
	(cRD4Alias)->( dbCloseArea() )
	
	lContinua := .T.

	While .T.
		//Selecionar todos os departamentos que o funcionario logado é responsável
		BEGINSQL ALIAS cRD4Alias                  			
			SELECT 
				SRA.R_E_C_N_O_ AS RECNO, SRA.RA_FILIAL, SRA.RA_MAT
			FROM %table:SQB% SQB
			INNER JOIN %table:RD4% RD4 ON RD4.RD4_CODIDE = SQB.QB_DEPTO
			INNER JOIN %table:SRA% SRA ON SRA.RA_FILIAL  = SQB.QB_FILRESP AND 
										  SRA.RA_MAT = SQB.QB_MATRESP
			LEFT JOIN %table:RDZ% RDZ  ON RDZ.RDZ_CODENT = SRA.RA_FILIAL || SRA.RA_MAT AND
		 	   							  RDZ.RDZ_FILIAL = %xfilial:RDZ%    		  AND
		 	   							  RDZ.RDZ_EMPENT = %exp:cEmp%    		  AND					
		 	   							  RDZ.%notdel%
			LEFT JOIN %table:RD0% RD0  ON RD0.RD0_CODIGO = RDZ.RDZ_CODRD0   		  AND
			   							  RD0.RD0_FILIAL = %xfilial:RD0%    		  AND
										  RD0.%notdel%
			WHERE RD4.RD4_CODIGO = %exp:cVisao%  AND
			      RD4.RD4_FILIAL = %xfilial:RD4%  AND
			      RD4.RD4_TREE IN (SELECT RD4SUP.RD4_ITEM 
									FROM %table:SQB% SQB
									INNER JOIN %table:RD4% RD4SUP ON RD4SUP.RD4_CODIDE = SQB.QB_DEPTO
									WHERE RD4SUP.RD4_CODIGO = %exp:cVisao% AND
								      	  RD4SUP.RD4_FILIAL = %xfilial:RD4% AND
								      	  SQB.QB_FILRESP = %exp:cFil% 	AND 
								      	  SQB.QB_MATRESP = %exp:cMat% 	AND
								      	  SQB.QB_FILIAL  = %exp:cFilSQB% 	AND
								      	  RD4SUP.%notDel%                   AND
								      	  SQB.%notDel%) AND
			      SQB.QB_FILIAL  = %exp:cFilSQB% AND
			      RD4.%notdel%                   AND
			      SQB.%notdel%
			UNION
			SELECT 
				SRA.R_E_C_N_O_ AS RECNO, SRA.RA_FILIAL, SRA.RA_MAT
			FROM %table:RD4% RD4
			INNER JOIN %table:SRA% SRA ON %exp:cFilSRA%      		  				  
			      						  SRA.RA_DEPTO = RD4.RD4_CODIDE
			LEFT JOIN %table:RDZ% RDZ  ON RDZ.RDZ_CODENT = SRA.RA_FILIAL || SRA.RA_MAT AND
		 	   							  RDZ.RDZ_FILIAL = %xfilial:RDZ%    		  AND
		 	   							  RDZ.RDZ_EMPENT = %exp:cEmp%    		  AND					
		 	   							  RDZ.%notdel%
			LEFT JOIN %table:RD0% RD0  ON RD0.RD0_CODIGO = RDZ.RDZ_CODRD0   		  AND
			   							  RD0.RD0_FILIAL = %xfilial:RD0%    		  AND
										  RD0.%notdel%
			WHERE RD4.RD4_CODIGO = %exp:cVisao%   	AND
			      %exp:cFilRD4%
			      RD4.RD4_FILIAL = %xfilial:RD4%  	AND
			      %exp:cChaveItem%  				AND
			      SRA.%notDel%                    	AND
				  RD4.%notDel%     				  
		
		EndSql
		
		cChaveItem := ""
		
		While (cRD4Alias)->( !Eof() ) 
			If (cRD4Alias)->RA_FILIAL + (cRD4Alias)->RA_MAT <> cFil + cMat
				If !Empty(cRecno)
					cRecno += ","
				EndIf
				cRecno += AllTrim(Str((cRD4Alias)->RECNO))
				If !((cRD4Alias)->RA_FILIAL + (cRD4Alias)->RA_MAT $ cFilMatEst)
					cFilMatEst += (cRD4Alias)->RA_FILIAL + (cRD4Alias)->RA_MAT + "*"
				EndIf
			EndIf
			
			If lContinua		
		        BeginSQL ALIAS cAuxAlias1
					SELECT RD4.RD4_ITEM
					FROM %table:SQB% SQB
					INNER JOIN %table:RD4% RD4 ON RD4.RD4_CODIDE = SQB.QB_DEPTO
					WHERE RD4.RD4_CODIGO = %exp:cVisao% AND
				      	  RD4.RD4_FILIAL = %xfilial:RD4% AND
					      %exp:cFilRD4%
				      	  SQB.QB_FILRESP = %exp:(cRD4Alias)->RA_FILIAL% 	AND 
				      	  SQB.QB_MATRESP = %exp:(cRD4Alias)->RA_MAT% 	AND
				      	  SQB.QB_FILIAL  = %exp:cFilSQB% 	AND
				      	  RD4.%notDel%                   AND
				      	  SQB.%notDel%            
		        EndSQL
				
		        While (cAuxAlias1)->( !Eof() )
		        	cChaveItem += "'" + (cAuxAlias1)->RD4_ITEM + "' ,"
		        	(cAuxAlias1)->( dbSkip() )	        		
		        EndDo
	        
	        	(cAuxAlias1)->(DbCloseArea())
	        EndIf
	        
			(cRD4Alias)->( DbSkip() )
		EndDo
		
		(cRD4Alias)->(DbCloseArea())
		
        If Empty(cChaveItem)
        	Exit
        Else
        	cChaveItem := "% RD4.RD4_ITEM IN (" + SubStr( cChaveItem, 1, Len(cChaveItem) - 2 ) + ") %"
        	lContinua := .F.
        EndIf
	EndDo

Else
	If !Empty(cFil) .and. !Empty(cMat)
		DbSelectArea("SRA")
		DbSetOrder(1)
		DbSeek(cFil + cMat)

		cDptoAux := cDepto 	:= SRA->RA_DEPTO
		cDeptos := "%('"+cDepto+"')%"
		cFilResp:= "%'" + xFilial( "SQB", cFil ) + "'%"
		cFilSQB := "% " + FWJoinFilial("SRA", "SQB") + " %" 
		cSQBAlias := "QSQB"

		SQB->(DbSetOrder(1))
		SQB->(DbSeek(xFilial( "SQB", cFil ) + cDepto))

		If SQB->QB_FILRESP == cFil .and. SQB->QB_MATRESP == cMat
			lContinua := .T.
		Else
			lContinua := .F.
		EndIf
		
		While lContinua
			
			BeginSql alias cSQBAlias
							
				SELECT RA_FILIAL, RA_MAT, QB_DEPTO,SRA.R_E_C_N_O_ AS RECNO
				FROM %table:SQB% SQB  
				INNER JOIN %table:SRA% SRA
				ON  %exp:cFilSQB% AND
				    SQB.QB_DEPTO  = SRA.RA_DEPTO     AND
				    SRA.%notDel%
				LEFT JOIN %table:RDZ% RDZ    
				ON  RDZ.RDZ_CODENT = SRA.RA_FILIAL || SRA.RA_MAT AND
				 	RDZ.RDZ_FILIAL = %xfilial:RDZ%    AND
				 	RDZ.RDZ_EMPENT = %exp:cEmp%    AND
				 	RDZ.%notdel%
				LEFT JOIN %table:RD0% RD0    
				ON  RD0.RD0_CODIGO = RDZ.RDZ_CODRD0  AND
					RD0.RD0_FILIAL = %xfilial:RD0%    AND
					RD0.%notdel%
				WHERE ( SQB.QB_DEPSUP IN %exp:cDeptos%  OR SQB.QB_DEPTO = %exp:cDptoAux% ) AND
					  SQB.QB_FILIAL = %exp:cFilResp%  AND
			    	  SQB.%notDel%     
		
			EndSql

			cDeptos := ""
			nChave  := 0
			While (cSQBAlias)->( !Eof() )
				If !( "'" + Alltrim((cSQBAlias)->QB_DEPTO) + "'" $ cDeptoAnt )
					If !( "'" + Alltrim((cSQBAlias)->QB_DEPTO) + "'" $ cDeptos )
						cDeptos += "'" + Alltrim((cSQBAlias)->QB_DEPTO) + "',"
					EndIf
				EndIf
				If !Empty(cRecno)
					cRecno += ","
				EndIf
				cRecno += AllTrim(Str((cSQBAlias)->RECNO))
				If !((cSQBAlias)->RA_FILIAL + (cSQBAlias)->RA_MAT $ cFilMatEst)
					cFilMatEst += (cSQBAlias)->RA_FILIAL + (cSQBAlias)->RA_MAT + "*"
				EndIf				
                            
				(cSQBAlias)->( dbSkip() )
			EndDo         
		         
			If !(Empty(cDeptos))
				cDeptoAnt += cDeptos
				cDeptos := "%(" + substr(cDeptos, 1, Len(cDeptos)-1)+ ")%"
				cDptoAux := ""
			Else
				lContinua := .F.
			EndIf

			(cSQBAlias)->( dbCloseArea() )
	   	EndDo
	EndIf
EndIf

If !Empty(cFilMatEst)
	cFilMatEst := SubStr(cFilMatEst,1,Len(cFilMatEst)-1)
EndIf

RestArea(aArea)

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³ChkMovto  ºAutor  ³Ricardo Duarte Costaº Data ³  30/05/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Verifica se existe movimento no periodo informado na tabelaº±±
±±º          ³ de acumulados, SRD.                                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MANAD                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ChkMovto(cParFil,cParMat,cParTeste,dDataIni,dDataFim)
Local aArea		:= GetArea()
Local aAreaSRD	:= SRD->(GetArea())
Local lRet		:= .T.
Local cAliasQ  	:= "QSRDNEW"
Local cDtIni	   := MesAno(dDataIni)
Local cDtFim	   := MesAno(dDataFim)

BeginSql Alias cAliasQ
	SELECT COUNT(RD_MAT) AS QTDELCTO
	FROM %table:SRD% SRD
	WHERE
	SRD.RD_FILIAL = %exp:cParFil% AND
	SRD.RD_MAT = %exp:cParMat% AND
	SRD.RD_DATARQ BETWEEN %Exp:cDtIni% AND %Exp:cDtFim% AND
	SRD.%NotDel%
EndSql

//-- Verifica se existe lancamento para um matricula dentro do periodo informado
lRet	:= (cAliasQ)->QTDELCTO > 0

//-- Se nao encontrou nenhum registro para a matricula, executa a validacao padrao
If !lRet .and. !Empty( SRA->RA_DEMISSA )
	lRet	:= &(cParTeste)
Endif

//-- Finaliza e retorna a area
(cAliasQ)->(DbCloseArea())
RestArea(aAreaSRD)
RestArea(aArea)
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fBusIns   ºAutor  ³Antonio D'Carmo     º Data ³  11/07/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Função para buscar a verba de insuficiência de saldo dentro º±±
±±º          ³do movimento mensal da folha.                               º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Geração do Manad linha k250                               º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function fBusIns(cFilRD, cMatRD, dDatArq, cCodPd, lAdto)
Local cAliasQ := "SRDTMP"
Local dDtAux  	:= CtoD("//")
Local lRet	  	:= .F.

Default lAdto := .F.

If lAdto
	dDtAux := SRD->RD_DATPGT
EndIf

//tem que abrir a SRD com outro nome porque a SRD está aberta como query e sem indice.
If ( Select( cAliasQ ) <= 0 )
	EmpOpenFile(cAliasQ,"SRD",1,.t.,cEmpAnt,FWModeAccess("SRD"))
EndIf

If (cAliasQ)->( dbSeek( cFilRD + cMatRD + dDatArq + cCodPd ) ) .And. ( !lAdto .Or. ( lAdto .And. AnoMes( dDtAux ) == AnoMes( (cAliasQ)->RD_DATPGT ) ) )
	lRet := .T.
EndIf

dbSelectArea("SRD")

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³fLoadReciSRG³ Autor ³ Jordan Lazarine       ³ Data ³19/01/11  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Identifica se existe rescisao complementar para o funcionario³±±
±±³          ³ no mês de calculo da Folha para totalizacao.                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fDifPensaoSM( cFil, cMat, dDtPesq )                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cFil     = Filial do funci. a verificar                      ³±±
±±³          ³ cMat     = Matricula do funci. a verificar                   ³±±
±±³          ³ dDtPesq  = Data referencia para verificacao                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fLoadReciSRG(cFil, cMat, dDtPesq, dDtLim)

Local aArea		:= GetArea()
Local _aAreaSRG := SRG->(GetArea())
Local cChave 	:= ""
Local cFilPsq	:= ""
Local cMatPsq	:= ""
Local nCompl	:= 0
Local lComplmes := .F.
Local lRet	    := .F.
Local cQuery		:= ""	// Variavel p/ montagem da query
Local cAliasSRG		:= ""	// Alias da query para cabecalho de rescisao
	
//Logicas
cFilPsq := Iif( cFil == NIL, xFilial("SRG", SRA->RA_FILIAL), cFil )
cMatPsq := Iif( cMat == NIL, SRA->RA_MAT, cMat )
cChave  := cFilPsq + cMatPsq //+ DtoS(MV_PAR01)

// Verifica Todos os Registros do Funcionario no "SRG"
dbSelectArea("SRG")

// Implementado tratamento para Top Connect
cAliasSRG  := GetNextAlias()
	cQuery := " SELECT "
	cQuery += "		RG_DTGERAR, RG_DATAHOM, RG_MAT"
	cQuery += " FROM "
	cQuery += "		" + RetSqlName("SRG") + " SRG "
	cQuery += " WHERE "
	cQuery += "		SRG.RG_FILIAL  = '" + cFilPsq + "' AND "
	cQuery += "		SRG.RG_MAT	   = '" + cMatPsq + "' AND "
	cQuery += "		SRG.RG_EFETIVA = 'S' AND "
	cQuery += "		SRG.D_E_L_E_T_ = ' ' "
	cQuery := ChangeQuery(cQuery)
	
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSRG)
	                        
	(cAliasSRG)->(dbGoTop()) 
	
  	If ValType(dDtLim)=="U"  
		While !(cAliasSRG)->(Eof())
			lComplmes := If (MesAno( StoD((cAliasSRG)->RG_DTGERAR)) == MesAno(dDtPesq), .T., .F. ) // rescisao complementar mesmo mes
			If lComplMes 															// se for rescisao complementar ultimo mes, utilizar somente o da ultima rescisao
				nCompl++
			EndIf
			(cAliasSRG)->(dbSkip())
		EndDo
	Else 
	    dbSelectArea("SRG")      
	    dbSetOrder(1)     
	    While dDtPesq <= dDtLim .and. nCompl < 1    
			dDtPesq:=dToS(dDtPesq)           
			If dbSeek(cFil+cMat+dDtPesq)
 	 			nCompl++										
 			EndIf  
 			dDtPesq:=SToD(dDtPesq)
  	 		dDtPesq ++ 
  	 	Enddo   
 	 Endif	
	
	(cAliasSRG)->(dbCloseArea())

	lRet := Iif( nCompl > 0, .T., .F. )

	RestArea(_aAreaSRG)
	RestArea(aArea)

Return(lRet)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³fSFiltrSQL³ Autor ³ Paulo O Inzonha         ³ Data ³29/06/17  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Transforma uma instrução do super filtro em instrução SQL    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fSFiltrSQL( cFiltADVPL )                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cFiltADVPL     = Filtro ADVPL                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fSFiltrSQL (cFiltADVPL)

local cSqlFiltro := cFiltADVPL

cSqlFiltro := fMontInSQL(cSqlFiltro, '.AND.')
cSqlFiltro := fMontInSQL(cSqlFiltro, '.OR.')

cSqlFiltro := STRTRAN(cSqlFiltro,"DTOS","")
cSqlFiltro := STRTRAN(cSqlFiltro,"DDATABASE","'" + DTOS(DDATABASE) + "'") 

cSqlFiltro := STRTRAN(cSqlFiltro,"==","=")
cSqlFiltro := STRTRAN(cSqlFiltro,"!=","<>")
cSqlFiltro := STRTRAN(cSqlFiltro,"->",".")
cSqlFiltro := STRTRAN(cSqlFiltro,'"',"'")

return cSqlFiltro

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³fMontInSQL³ Autor ³ Paulo O Inzonha         ³ Data ³29/06/17  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Monta uma instrução in do sql a partir de um operador $ advpl³±±
±±³Quebra a instrução por operador logico para ser possivel identificar a   ³±±
±±³qual instrução pertence a negação(!).                                    ³±± 
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fMontInSQL(cFiltADVPL, cOperador)                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cFiltADVPL     = Filtro ADVPL   								³±±
±±³            cOperador      = Operador logico advpl: .AND. ou .OR.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Complemento da função fSFiltrSQL                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fMontInSQL(cFiltADVPL, cOperador)
local nX 
local aOperador := {}
local cFiltroSQL := ""

	
	aOperador := SEPARA(cFiltADVPL,cOperador)
	
	FOR nX := 1 TO LEN(aOperador) STEP 1 
		if !empty(cFiltroSQL)
			cFiltroSQL += STRTRAN(cOperador,"."," ")
		endIf
		if AT('$', aOperador[nX]) > 0
		
			if AT('!',aOperador[nX]) > 0
				aOperador[nX] := STRTRAN(aOperador[nX],"$","NOT IN (")
				aOperador[nX] := STRTRAN(aOperador[nX],"!","")
			else
				aOperador[nX] := STRTRAN(aOperador[nX],"$","IN (")
			endIf
			
			aOperador[nX] := STRTRAN(aOperador[nX],"/","','")
			aOperador[nX] := SUBSTR(aOperador[nX],1, AT(")", aOperador[nX])) + ")" + SUBSTR(aOperador[nX],AT( ")", aOperador[nX]) + 1)
						
		endIf
		cFiltroSQL += aOperador[nX] 			
	NEXT


return cFiltroSQL

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³MontaNewTMP ºAutor  ³Marcelo Silveira  º Data ³  17/04/15   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Seleciona informacoes do SRD e inclui no arquivo temporario º±±
±±º          ³para posterior utilizacao no MANAD.                         º±±
±±º          ³Novo conceito para composicao do Bloco K250 a partir de     º±±
±±º          ³todas as verbas e nao somente das bases.                    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MontaNewTMP(cPerIni,cPerFim,lNorma89)
Local cTpFolha	:= 	""
Local cMesFinal := 	""
Local cCargo	:= 	""   
Local cCargoDesc:=  ""
Local dCompIni	:=	""
Local cDatarq	:= 	"!!!!!!"   
Local dCompPesq	:=	cTod('')          
Local dDataPgto	:=	cTod('//')
Local aFolha	:= {}
Local nI		:= 1
Local nValorIr	:= 0
Local nValorSrd	:= 0
Local lBaseIr13	:= .F.    
Local lSomaI	:= .F.
Local lSomaP	:= .F.
Local nDepIR	:= 0 //numero de dependesntes PARA IR
Local nDepSalFam:= 0 //numero de dependesntes PARA Salario famia

DEFAULT lNorma89 := .F.

#IFNDEF TOP
	SRD->(MsSeek (SRA->RA_FILIAL+SRA->RA_MAT))
#ENDIF
	
While SRD->( !Eof() ).and. SRD->RD_FILIAL+SRD->RD_MAT == SRA->RA_FILIAL+SRA->RA_MAT .and. SRD->RD_DATARQ >= cPerIni .and. SRD->RD_DATARQ <= cPerFim
	
	//Nao considera lanctos de base e desconto de IR de mes anterior
	If SRD->RD_PD == _aTotal[013,318,1]
		// A verba '318' foi retirada, conforme definicao da equipe: Sustentacao/RH.
		SRD->( dbSkip())
		Loop
	EndIf
	If cDatarq != SRD->RD_DATARQ
		cDatarq		:= SRD->RD_DATARQ
		dDataPgto	:= cTod('//')
	EndIf
	cMesFinal 	:= Iif(substr(SRD->RD_DATARQ ,5,2)="13","12",substr(SRD->RD_DATARQ ,5,2))
	dCompIni 	:= cToD("01/"+cMesFinal+"/"+substr(SRD->RD_DATARQ ,1,4))
	
	If !lNorma89	
		If dCompPesq # dCompIni
			fBuscaFunc(dCompIni, @cCargo, @cCargoDesc   ) 
			dCompPesq := dCompIni
		EndIf	
	EndIf
	nBInssFl	:= 0
	nBInss13	:= 0
	cTpFolha	:= ""
	nDepIR		:= 0 //numero de dependentes PARA IR
	nDepSalFam	:= 0 //numero de dependentes PARA Salario famia
	lSomaI 		:= .F.
	lSomaP 		:= .F.
	
	SRV->(MsSeek (xFilial("SRV")+SRD->RD_PD ))

	nValorSrd := SRD->RD_VALOR

	If !lNorma89
		//-- Verbas de Base de Ir e Base de Inss a serem considerados no registro K250
		If SRD->RD_PD $	_aTotal[013,015,1]+"/"+_aTotal[013,027,1]+"/"+_aTotal[013,016,1]+"/"+ iif(SRD->RD_DATARQ < "201301",_aTotal[013,151,1]+"/","")+;
						_aTotal[013,013,1]+"/"+_aTotal[013,014,1]+"/"+_aTotal[013,221,1]+"/"+_aTotal[013,225,1]+"/"+_aTotal[013,019,1]+"/"+;
						_aTotal[013,020,1]+"/"+_aTotal[013,218,1]+"/"+_aTotal[013,338,1]+"/"+_aTotal[013,399,1]
			cTpFolha	:= "1"
			If SRD->RD_ROTEIR == "132"	//13o salario
		    	cTpFolha	:= "2"
				If SRD->RD_PD $ _aTotal[013,019,1]+"/"+ _aTotal[013,020,1] //Base de INSS 13o
			    	nBInss13 	:= SRD->RD_VALOR
			 	EndIf
		 	Else
				If SRD->RD_PD $ _aTotal[013,013,1]+"/"+_aTotal[013,014, 1]+"/"+_aTotal[013,019,1]+"/"+ _aTotal[013,020,1]+"/"+_aTotal[013,338,1]+"/"+ _aTotal[013,399,1] //Base de INSS Folha e 13o salario e Dif Dissidio Folha e 13o.
			    	nBInssFl 	:= SRD->RD_VALOR
				Endif
				//Caso seja a verba de Autonomo
				If SRD->RD_PD == _aTotal[013,218,1]
					//Caso funcionario seja autonomo carreteiro considera o valor na base de INSS
					If SRA->RA_CATFUNC == "A" .And. SRA->RA_CATEG == "15"
						nBInssFl 	:= SRD->RD_VALOR
					EndIf
				EndIf
				//Caso seja a verba de Base Inss Aut./Pro-Labore e nao seja autonomo carreteiro considera o valor como INSS
				If SRD->RD_PD $ _aTotal[013,221,1]+"/"+_aTotal[013,225,1] .And. !( SRA->RA_CATFUNC == "A" .And. SRA->RA_CATEG == "15" )
					nBInssFl 	:= SRD->RD_VALOR
				EndIf	
			Endif
		//-- Outras verbas existentes no movimento que indicam que houve movimento no mes porem nao houve base para
		//-- a previdencia social
		ElseIf SRD->RD_PD $	_aTotal[013,028,1]+"/"+_aTotal[013,152,1]+"/"+_aTotal[013,126,1]+"/"+_aTotal[013,029,1]+"/"+;
							_aTotal[013,045,1]+"/"+;
							_aTotal[013,030,1]+"/"+_aTotal[013,043,1]+"/"+_aTotal[013,026,1]+"/"+_aTotal[013,022,1]
	    	If SRD->RD_ROTEIR == "132"
		    	cTpFolha	:= "2"
		    ElseIf SRD->RD_ROTEIR == "PLR"
		    	cTpFolha	:= "6"
		    Else	
		    	cTpFolha	:= "1"
			Endif    		
		//-- Salvo valor do Fgts do Mes porem nao considero como ocorrencia de movimento para o K250
		//-- a previdencia social
		ElseIf SRD->RD_PD == _aTotal[013,018,1]	//Base de Fgts
			_aTotal[014]	:= SRD->RD_VALOR
		ElseIf SRD->RD_PD $ _aTotal[013, 059,1] //Dependente de IR					
		 	nDepIR := SRD->RD_HORAS 
	    	If SRD->RD_ROTEIR == "132"
		    	cTpFolha	:= "2"
		    Else	
		    	cTpFolha	:= "1"
			Endif    		
		ElseIf SRD->RD_PD $ _aTotal[013, 034,1] //Dependente de Salario Familia
			nDepSalFam := SRD->RD_HORAS
	    	If SRD->RD_ROTEIR == "132"
		    	cTpFolha	:= "2"
		    Else	
		    	cTpFolha	:= "1"
			Endif    		
		ElseIf SRD->RD_PD == _aTotal[013,100,1]
	    	cTpFolha	:= "1"
		ElseIf SRD->RD_PD == _aTotal[013,167,1]
	    	cTpFolha	:= "1"
		ElseIf SRD->RD_PD == _aTotal[013,168,1]
	    	cTpFolha	:= "1"
		ElseIf SRD->RD_PD == _aTotal[013,169,1]
	    	If SRD->RD_ROTEIR == "132"
		    	cTpFolha	:= "2"
		    Else	
		    	cTpFolha	:= "1"
			Endif
		ElseIf SRD->RD_PD == _aTotal[013,010,1]
			cTpFolha := "1"
		ElseIf SRD->RD_PD == _aTotal[013,007,1] .And. SRD->RD_IR == "S"
	    	cTpFolha	:= "1"
		ElseIf SRD->RD_PD $ _aTotal[013,88,1]+"/"+_aTotal[013,89,1]+"/"+_aTotal[013,90,1]+"/"+_aTotal[013,91,1]+"/"+_aTotal[013,96,1]+"/"+_aTotal[013,97,1]+"/"+_aTotal[013,98,1]+"/"+_aTotal[013,838,1]//Diferenca de ferias##Diferenca de medias/outros adicionais
	    	cTpFolha	:= "1"
		ElseIf !(SRD->RD_PD $ _aTotal[013,106,1]+"/"+_aTotal[013,107,1])
	    	If SRD->RD_ROTEIR == "132"
		    	cTpFolha	:= "2"
		    ElseIf SRD->RD_ROTEIR == "PLR"
		    	cTpFolha	:= "6"
		    Else	
		    	cTpFolha	:= "1"
			Endif 		
		Endif
	Else
	    If SRD->RD_PD $ _aTotal[013, 15,1] //Base IR Folha
	    	cTpFolha	:= "1"
		ElseIf SRD->RD_PD $ _aTotal[013, 27,1] .and. ( SRD->RD_ROTEIR == "132" .Or. fTipo2RD( SRD->RD_FILIAL, SRD->RD_MAT, SRD->RD_DATARQ, SRD->RD_PD ) == "R" )	//Base IR 13o
	    	cTpFolha	:= "2"
		ElseIf SRD->RD_PD $ _aTotal[013, 16,1]	//Base IR Ferias
	    	cTpFolha	:= "3"
		ElseIf SRD->RD_PD $ _aTotal[013,19,1]+"/"+ _aTotal[013,20,1] .and. substr(SRD->RD_DATARQ,5,2) =="12" //Base de INSS 13o Complementar
	    	cTpFolha	:= "5"
	    	nBInss13 	:= SRD->RD_VALOR  
		ElseIf SRD->RD_PD $ _aTotal[013,151,1]+"/"+_aTotal[013,152,1]	//Base IR Distribuicao de Lucros
	    	cTpFolha	:= "6"
		ElseIf SRD->RD_PD $ _aTotal[013, 13,1]+"/"+_aTotal[013,14, 1]+"/"+_aTotal[013,221,1]+"/"+_aTotal[013,225, 1] //Base de INSS Folha
	    	cTpFolha	:= "1"
	    	nBInssFl 	:= SRD->RD_VALOR
		ElseIf SRD->RD_PD $ _aTotal[013,19,1]+"/"+ _aTotal[013,20,1] .and. SRD->RD_ROTEIR == "132" //Base de INSS 13o
	    	cTpFolha	:= "2"
	    	nBInss13 	:= SRD->RD_VALOR
		ElseIf SRD->RD_PD == _aTotal[013, 18, 1]
			_aTotal[014] := SRD->RD_VALOR   
	    ElseIf  (SRD->RD_PD $ _aTotal[013, 27,1] .and. fTipo2RD( SRD->RD_FILIAL, SRD->RD_MAT, SRD->RD_DATARQ, SRD->RD_PD ) # "R" .and. substr(SRD->RD_DATARQ,5,2) == "12") .OR.;    //Complementar de 13o
				(SRV->RV_REF13 =="S" .and. fTipo2RD( SRD->RD_FILIAL, SRD->RD_MAT, SRD->RD_DATARQ, SRD->RD_PD ) # "R" .and. substr(SRD->RD_DATARQ,5,2) == "12")
	    	cTpFolha	:= "5"                                                                          
	    	lBaseIr13	:= (SRD->RD_PD == _aTotal[013, 27,1])
	    Elseif Empty(cTpFolha)
	    	If SRD->RD_ROTEIR == "132"
		    	cTpFolha	:= "2"
		    ElseIf SRD->RD_ROTEIR == "PLR"
		    	cTpFolha	:= "6"
		    Else	
		    	cTpFolha	:= "1"
			Endif    		
		EndIf
	Endif
	                          
	If lNorma89 .and. (cTpFolha$"5#6")
		cTpFolha := "4"
	EndIf
	
	//Alteracao da composicao do valor do bloco K250 para atender ao validador SVA versao 3.2.2
	//O valores agora sao compostos da seguinte maneira:
	//BASE IR = Soma das verbas de Provento Base Tipo 1/2 e Deducao das verbas de Desconto Base Tipo 1/2
	//BASE PS = Soma das verbas de Provento Base Tipo 1/2/5 e Deducao das verbas de Desconto Base Tipo 7
	If nBInssFl == 0 .Or. nBInss13 == 0

		cTpFolha := If( Empty(cTpFolha), If(SRD->RD_ROTEIR == "132", "2", "1"), cTpFolha )

		If VER_PD (SRD->RD_PD) == "P" 
			lSomaI   := GPEVerTpBase("BIRRF",.T.) $ "1|2"		//Soma na Base IR
			lSomaP   := GPEVerTpBase("BINSS",.T.) $ "1|2|5"	//Soma na Base Previdencia
			nBInssFl := If( lSomaP .And. cTpFolha $ "1", 	nValorSrd, 0 )
			nBInss13 := If( lSomaP .And. cTpFolha $ "2|5", nValorSrd, 0 )

		ElseIf VER_PD (SRD->RD_PD) == "D" 
			lSomaI := GPEVerTpBase("BIRRF",.T.) $ "1|2" 	//Deduz da Base IR
			lSomaP := GPEVerTpBase("BINSS",.T.) $ "7"		//Deduz da Base PS
			If SRD->RD_PD == _aTotal[013, 164,1]
				nValorSrd := fNewValPd(2)
			EndIf
			nValorSrd := nValorSrd * -1
			nBInssFl := If( lSomaP .And. cTpFolha $ "1",	nValorSrd, 0 )
			nBInss13 := If( lSomaP .And. cTpFolha $ "2|5",	nValorSrd, 0 )
		EndIf		
	Else
		nBInssFl := 0 
		nBInss13 := 0	
	EndIf

	nPos := Ascan(aFolha,{|x|x[1]+x[2]+x[6]==SRD->RD_DATARQ+cTpFolha+SRD->RD_CC})
	nElem := If( nPos > 0, nPos, len(aFolha) +1 )
	If nPos == 0 .and. !empty(cTpFolha) 
		If cTpFolha == "1"
			dDataPgto := fDatPgt( SRD->RD_FILIAL, SRD->RD_MAT, SRD->RD_DATARQ, _aTotal[013, 318, 1] )
		EndIf 
		Aadd( aFolha, {	SRD->RD_DATARQ						,;//01) Periodo
					cTpFolha								,;//02)	Tipo de Folha
					If(Empty(dDataPgto),SRD->RD_DATPGT,dDataPgto),;//03)	Data de pagamento
					cCargo									,;//04)	Cargo
					cCargoDesc								,;//05)	Descricao do Cargo
					SRD->RD_CC								,;//06)	Centro de Custo
					If(cTpFolha == "1" .and. lSomaI, nValorSrd,0),;//07) Base IR Folha
					If(cTpFolha == "2" .and. lSomaI, nValorSrd,0),;//08) Base IR 13o
					If(cTpFolha == "3" .and. nBInssFl==0 .and. nBInss13==0,nValorSrd,0),;//09) Base IR Ferias
					If(cTpFolha == "5" .and. nBInssFl==0 .and. nBInss13==0 .and. lBaseIr13,nValorSrd,0),;//10) Base IR Folha complementar 13o
					If(cTpFolha == "6" .and. nBInssFl==0 .and. nBInss13==0 .And. lSomaI,nValorSrd,0),;//11) Base IR Distribuicao de Lucros
					nBInssFl								,;//12)	Base Inss folha
					nBInss13								,;//13) Base Inss 13o
					If(cTpFolha == "4" .and. lNorma89 ,nValorSrd,0) ,;//14)Base Ir IN 89 outros
					nDepIR									,;//15) numero de dependentes PARA IR
					nDepSalFam								; //16) numero de dependentes PARA Salario familia
					})
	Else 
		If cTpFolha == "1"
			aFolha[nElem,07]	+= If(lSomaI,nValorSrd,0)	//Base IR Folha
			aFolha[nElem,12]	+= If(lSomaP,nBInssFl,0)	//Base Inss folha       
			aFolha[nElem,15]	:= If( nDepIR#0 , nDepIr, aFolha[nElem,15] )		//numero de dependentes PARA IR
			aFolha[nElem,16]	:= If( nDepSalFam # 0,nDepSalFam,aFolha[nElem,16])	//numero de dependentes PARA Salario Familia
		ElseIf cTpFolha == "2"             
			aFolha[nElem,08]	+= If(lSomaI,nValorSrd,0)	//Base IR 13o
			aFolha[nElem,13]	+= If(lSomaP,nBInss13,0)	//Base Inss 13o
			aFolha[nElem,15]	:= If( nDepIR#0 , nDepIr, aFolha[nElem,15] )		//numero de dependentes PARA IR
			aFolha[nElem,16]	:= If( nDepSalFam # 0,nDepSalFam,aFolha[nElem,16])	//numero de dependentes PARA Salario Familia
		ElseIf cTpFolha == "3"
			aFolha[nElem,09]	+= nValorSrd	//Base IR Ferias
			aFolha[nElem,15]	:= If( nDepIR#0 , nDepIr, aFolha[nElem,15] )		//numero de dependentes PARA IR
			aFolha[nElem,16]	:= If( nDepSalFam # 0,nDepSalFam,aFolha[nElem,16])	//numero de dependentes PARA Salario Familia
		ElseIf cTpFolha == "5" .and. !lNorma89
			aFolha[nElem,10]	+= If( lBaseIr13 , nValorSrd,0)	//Base IR Folha complementar 13o
			aFolha[nElem,13]	+= nBInss13						//Base Inss 13o
			aFolha[nElem,15]	:= If( nDepIR#0 , nDepIr, aFolha[nElem,15] )		//numero de dependentes PARA IR
			aFolha[nElem,16]	:= If( nDepSalFam # 0,nDepSalFam,aFolha[nElem,16])	//numero de dependentes PARA Salario Familia
		ElseIf cTpFolha == "6" .and. !lNorma89
			aFolha[nElem,11]	+= If(lSomaI,nValorSrd,0)  	//Base IR Distribuicao de Lucros
			aFolha[nElem,15]	:= If( nDepIR#0 , nDepIr, aFolha[nElem,15] )		//numero de dependentes PARA IR
			aFolha[nElem,16]	:= If( nDepSalFam # 0,nDepSalFam,aFolha[nElem,16])	//numero de dependentes PARA Salario Familia
		ElseIf cTpFolha =="4" .and. lNorma89	
			aFolha[nElem,14]	+= nValorSrd  	//Base IR IN89 Outras 
    	EndIF
	Endif
	If fBusIns(SRD->RD_FILIAL,SRD->RD_MAT,SRD->RD_DATARQ,_aTotal[013, 045, 1]) .And. !fBusIns( SRD->RD_FILIAL, SRD->RD_MAT, SRD->RD_DATARQ, _aTotal[013, 015, 1] ) .And. nElem <= Len(aFolha)
		aFolha[nElem,07] := 0
	EndIf
	SRD->( dbSkip())   
	lBaseIr13 := .F.
EndDo

For nI := 1 to Len(aFolha)
	nValorIr	:= 0
	cMesFinal 	:= Iif(substr(aFolha[nI,1],5,2)="13","12",substr(aFolha[nI,1],5,2))
	dCompIni 	:= cToD("01/"+cMesFinal+"/"+substr(aFolha[nI,1],1,4))
	
	If !empty(aFolha[nI,7])			//Base IR Folha
	 	nValorIr 	:= 	aFolha[nI,07]
	ElseIf !empty(aFolha[nI,08])		//Base IR 13o
	 	nValorIr 	:= 	aFolha[nI,08]
	ElseIf !empty(aFolha[nI,09])		//Base IR Ferias
	 	nValorIr 	:= 	aFolha[nI,09]
	ElseIf !empty(aFolha[nI,10])		//Base IF Folha complementar 13o
	 	nValorIr 	:= 	aFolha[nI,10]
	ElseIf !empty(aFolha[nI,11])	//Base IR Distribuicao de Lucros
	 	nValorIr 	:= 	aFolha[nI,11]
	ElseIf !empty(aFolha[nI,14])	//Base IR IN89(Outras folhas)
	 	nValorIr 	:= 	aFolha[nI,14]
	EndIf
	
	RecLock("TMP",.T.)
	TMP->TMP_FILIAL	:= SRA->RA_FILIAL
	TMP->TMP_CNPJ	:= AllTrim (SM0->M0_CGC)
	TMP->TMP_INDFL	:= aFolha[nI,2]
	TMP->TMP_LCT	:= aFolha[nI,6]
	TMP->TMP_MAT	:= SRA->RA_MAT
	TMP->TMP_COMP	:= aFolha[nI,1]
	TMP->TMP_PGTO	:= DataInt(aFolha[nI,3])
	TMP->TMP_CBO	:=	"0"+fCodCBO (SRA->RA_FILIAL,aFolha[nI,4], dCompIni, .T.)
	TMP->TMP_CARGO 	:= aFolha[nI,5]
	TMP->TMP_DEP_IR	:= aFolha[nI,15]
	TMP->TMP_DEP_SF	:= aFolha[nI,16]
	TMP->TMP_BS_IR	:= STRTRAN(TRANSFORM(ABS(nValorIr),"@R 99999999999999.99"),".",",")                                      
	If SRA->RA_AFASFGT == "6" .And. nValorIr == 0
		TMP->TMP_BS_PS	:= STRTRAN(TRANSFORM(ABS(0),"@R 99999999999999.99"),".",",")  
	Else
		TMP->TMP_BS_PS	:= STRTRAN(TRANSFORM(If(aFolha[nI,2] =="1",Max(0, aFolha[nI,12]),If(aFolha[nI,2] $"2#4#5",Max(0, aFolha[nI,13]),0)),"@R 99999999999999.99"),".",",")
	EndIf
	If TYPE("SRA->RA_OCORREN") # "U"
		If !Empty(SRA->RA_OCORREN)
			TMP->TMP_OCORR := SRA->RA_OCORREN
		Else
			TMP->TMP_OCORR := "00"
		EndIf
	Else
		TMP->TMP_OCORR	:= "01"
	EndIf	
	MsUnlock()
Next nI

_aTotal[085] := aFolha

Return .T.

/*{Protheus.doc} fBusPensao

Função de busca da verba como pensão alimentícia
 
@author Allyson Mesashi
@since 04/06/2014
@version P11 R8
@Param cFilRD Filial do funcionario
@Param cMatRD Matrícula do funcionario
@Param cDatArq Competência de pagamento da verba
@Param cCodPd Código da verba
@Param cTpBase Tipo da Base (1 = Folha; 2 = 13º Salário)
@Return lRet Retorna se encontrou a verba nos beneficiários
*/
Function fBusPensao(cFilRD, cMatRD, cDatArq, cCodPd, cTpBase)
Local aArea		:= GetArea()
Local aAreaRD	:= SRD->( GetArea() )
Local cDtArq	:= cDatArq + "01"
Local cRet		:= cTpBase

If SRQ->( dbSeek( cFilRD + cMatRD ) )
	While SRQ->( !EoF() .And. SRQ->RQ_FILIAL + SRQ->RQ_MAT == cFilRD + cMatRD )
		If cDtArq >= dToS( SRQ->RQ_DTINI ) .AND. ( Empty(SRQ->RQ_DTFIM) .Or. cDtArq <= dToS( SRQ->RQ_DTFIM ) )
			If SRQ->RQ_VERBFER == cCodPd .And. ( RetValSRV(cCodPd, SRD->RD_FILIAL, "RV_REFFER") != "S" .Or. !fBusIns(cFilRD, cMatRD, cDatArq, _aTotal[013, 016, 1]) )
				cRet := "3"
				Exit
			ElseIf SRQ->RQ_VERB131 == cCodPd
				cRet := "3"
				Exit
			ElseIf SRQ->RQ_VERB132 == cCodPd .And. ( RetValSRV(cCodPd, SRD->RD_FILIAL, "RV_REF13") != "S" .Or. !fBusIns(cFilRD, cMatRD, cDatArq, _aTotal[013, 027, 1]) )
				cRet := "3"
				Exit
			ElseIf SRQ->RQ_VERBPLR == cCodPd .And. fBusIns(cFilRD, cMatRD, cDatArq, _aTotal[013, 151, 1])
				cRet := "9"
				Exit
			ElseIf SRQ->RQ_VERBADT == cCodPd
				cRet := "3"
				Exit
			EndIf				
		EndIf
		SRQ->( dbSkip() )
	End While
EndIf	           

RestArea( aArea )
RestArea( aAreaRD )

Return(cRet)

/*{Protheus.doc} fDatPgt

Função de busca da data de pagamento de uma verba
 
@author Allyson Mesashi
@since 14/01/2015
@version P11 R8
@Param cFilRD Filial do funcionario
@Param cMatRD Matrícula do funcionario
@Param cDatArq Competência de pagamento da verba
@Param cCodPd Código da verba
@Return dData Retorna data de pagamento da verba
*/
Function fDatPgt(cFilRD, cMatRD, dDatArq, cCodPd)

Local cAliasQ := "SRDTMP"
Local dData	:= cToD("//") 

//tem que abrir a SRD com outro nome porque a SRD está aberta como query e sem indice.
If ( Select( cAliasQ ) <= 0 )
	EmpOpenFile(cAliasQ,"SRD",1,.t.,cEmpAnt,FWModeAccess("SRD"))
EndIf
If (cAliasQ)->( dbSeek( cFilRD + cMatRD + dDatArq + cCodPd ) ) 
	dData := (cAliasQ)->RD_DATPGT
EndIf	             

dbSelectArea("SRD")
Return(dData)

/*{Protheus.doc} fTipo2RD

Função de busca do campo Tipo 2 de uma verba
 
@author Allyson Mesashi
@since 13/02/2015
@version P11 R8
@Param cFilRD Filial do funcionario
@Param cMatRD Matrícula do funcionario
@Param cDatArq Competência de pagamento da verba
@Param cCodPd Código da verba
@Return cTipo2 Retorna o conteudo do campo tipo 2
*/
Function fTipo2RD(cFilRD, cMatRD, dDatArq, cCodPd)

Local cAliasQ := "SRDTMP"
Local cTipo2	:= ""

//tem que abrir a SRD com outro nome porque a SRD está aberta como query e sem indice.
If ( Select( cAliasQ ) <= 0 )
	EmpOpenFile(cAliasQ,"SRD",1,.t.,cEmpAnt,FWModeAccess("SRD"))
EndIf
If (cAliasQ)->( dbSeek( cFilRD + cMatRD + dDatArq + cCodPd ) ) 
	cTipo2 := (cAliasQ)->RD_TIPO2
EndIf             

dbSelectArea("SRD")
Return(cTipo2)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ TpFolha  ³ Autor ³ Andreia Santos        ³ Data ³ 17.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Retorna o Tipo de movimento na folha                       ³±±
±±³          ³   1 = Folha Normal                                         ³±±
±±³          ³   2 = Folha de 13o Salario                                 ³±±
±±³          ³   3 = Folha de Ferais                                      ³±±
±±³          ³   4 = Folha complementar a normal                          ³±±
±±³          ³   5 = Folha complementar ao 13o                            ³±±
±±³          ³   6 = Outras Folhas                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ TpFolha(cCodPd)                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GENERICO                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function fNewTp_Folha(cCodPD,cInstr)

Local cTpFolha	:=" "                   
Local nRecSRD	:= SRD->( recno())
Local cPD13		:= ""
Local cAlias	:= "SRV"                              
DEFAULT cInstr 	:= ""

If (cInstr == "MANAD" .or. cInstr == "IN86")
	cAlias := "SRD"
Else	         
	cAlias := "SRV"
EndIf	

cTpFolha	:= "1"
                  
If cInstr # "IN86"                  
	cPD13	:= _aTotal[013, 27,1]+"#"+_aTotal[013, 62,1]+"#"+_aTotal[013,108,1]+"#"+_aTotal[013,109,1]+"#"+_aTotal[013,129,1]
	cPd13 	+= "#"+_aTotal[013,163,1]+"#"+_aTotal[013,169,1]+"#"+_aTotal[013,299,1]
EndIf

If cInstr == "MANAD"
	cTpFolha	:= "1"
	If SRD->RD_ROTEIR == '132'	//Base IR 13o
	   	cTpFolha	:= "2"
	ElseIf SRD->RD_ROTEIR == 'FER'	//Base IR Ferias
	   	cTpFolha	:= "3"
	ElseIf SRD->RD_ROTEIR == 'PLR'	//Base IR PLR
	   	cTpFolha	:= "6"
	Endif

ElseIf cInstr == "IN86"
	If  (cAlias)->RV_REFFER = "S"
		cTipFol := '3'
	Elseif  (cAlias)->RV_REF13 = "S" .Or. SRD->RD_ROTEIR == "132"
		cTipFol := '2'
	Else
		cTipFol := '1'
	Endif
else
	If cCodPD $ _aTotal[013, 15,1] //Base IR Folha
		cTpFolha	:= "1"
	ElseIf cCodPD $ _aTotal[013, 16,1] .Or. (cAlias)->RV_REFFER == "S" .Or.  cCodPD == _aTotal[013, 22,1]	//Base IR Ferias ou Verbas que referem-se a ferias
		//TMP_FILIAL+TMP_CNPJ+TMP_MAT+TMP_COMP+TMP_INDFL
	    //Antes de alterar o tipo de registro para Ferias verifico de existe K250 gravado para modificar a informaçao
	    If TMP->(Dbseek(SRA->RA_FILIAL+SM0->M0_CGC+SRA->RA_MAT+SRD->RD_DATARQ+"3"))
	       	cTpFolha	:= "3"
	    Endif
	ElseIf (SRD->RD_TIPO2 #"R" .and. substr(SRD->RD_DATARQ,5,2) =="12" .AND. (cAlias)->RV_REF13 == "S") .OR.;  //Complementar de 13o
	          (SRD->RD_PD $ cPd13 .and. SRD->RD_TIPO2 #"R" .and. substr(SRD->RD_DATARQ,5,2) =="12")     //Complementar de 13o
	 	cTpFolha	:= "5"
	ElseIf cCodPD $ _aTotal[013, 27,1]	.Or. SubStr(SRD->RD_DATARQ,5,2) == '13' .or. ( (cAlias)->RV_REF13 == "S" .And. !(cCodPD $_aTotal[013, 22,1]+"*"+_aTotal[013, 163,1]) ) //Base IR 13o
			//TMP_FILIAL+TMP_CNPJ+TMP_MAT+TMP_COMP+TMP_INDFL
	    	//Antes de alterar o tipo de registro para 13o salário verifico de existe K250 gravado para modificar a informaçao
	   	If TMP->(Dbseek(SRA->RA_FILIAL+SM0->M0_CGC+SRA->RA_MAT+SRD->RD_DATARQ+"2"))
	    	cTpFolha	:= "2"
	    Endif
	ElseIf cCodPD $ _aTotal[013,151,1]+"/"+_aTotal[013,152,1]	//Base IR Distribuicao de Lucros
	   	cTpFolha	:= "6"
	ElseIf cCodPD $ _aTotal[013, 13,1]+"/"+_aTotal[013,14, 1]+"/"+_aTotal[013,221,1]+"/"+_aTotal[013,225, 1] //Base de INSS Folha
	   	cTpFolha	:= "1"
	ElseIf cCodPD $ _aTotal[013, 19,1]+"/"+ _aTotal[013,20,1] .and. SubStr(SRD->RD_DATARQ,5,2) == '13'//Base de INSS 13o
	   	cTpFolha	:= "2"
	EndIf
EndIf

If cInstr # "MANAD" .and. !(cTpFolha$"1#2#3")
	cTpFolha := '4'
EndIf

SRD->( dbGoto(nRecSRD) )

Return(cTpFolha)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³VerValPd  ºAutor  ³Allyson Mesashi     º Data ³  21/12/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna o valor da verba           						  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fNewValPd(nTipo)

Local aAreaSRD	:= SRDTMP->( GetArea() )
Local cAliasSRD	:= "MANADSRD"
Local cCposQry	:= ""
Local cDatArq	:= ""
Local cDInssFm	:= SuperGetMV("MV_DINSSFM",,SRD->RD_FILIAL)
Local cPdSub	:= _aTotal[013, 205, 1] + _aTotal[013, 206, 1] + _aTotal[013, 207, 1] + _aTotal[013, 208, 1] + _aTotal[013, 232, 1] +;
					_aTotal[013, 633, 1] + _aTotal[013, 634, 1] + _aTotal[013, 635, 1] + _aTotal[013, 1313, 1] + _aTotal[013, 1315, 1] +;
					_aTotal[013, 1317, 1] + _aTotal[013, 1319, 1] + _aTotal[013, 1321, 1] + _aTotal[013, 1323, 1] + _aTotal[013, 1325, 1] +;
					_aTotal[013, 1327, 1] + _aTotal[013, 1409, 1] + _aTotal[013, 1410, 1] + _aTotal[013, 1418, 1] + _aTotal[013, 1419, 1]
Local nValor	:= 0
Local nVal0232	:= 0
Local nValAbo	:= 0

DEFAULT nTipo := 1

If nTipo == 1
	//Se nao for a verba de ferias pagas mes anterior, pega o valor do lancamento
	If SRD->RD_PD != _aTotal[013, 164, 1]
		nValor := SRD->VALOR
	Else
		cPdSub	:= fSqlIn(cPdSub, 3)
		//Guarda o valor da competencia anterior
		cDatArq := SubMesAno( SRD->RD_DATARQ )
		//Guarda o valor das ferias pagas mes anterior
		nValor := SRD->VALOR
		//Busca o abono e o 1/3 de abono pecuniario
		If ( Select( cAliasSRD ) > 0 )
			( cAliasSRD )->( dbCloseArea() )
		EndIf 
		cCposQry += "% SRD.RD_FILIAL, SRD.RD_MAT, SRD.RD_CC, SRD.RD_DATARQ, SRD.RD_PD, SRD.RD_VALOR,SRD.RD_ROTEIR %"
		cWhere		:=	" ( SRD.RD_FILIAL = '" + SRD->RD_FILIAL + "' AND SRD.RD_MAT = '" + SRD->RD_MAT + "' AND " +;
						" SRD.RD_DATARQ = '" + cDatArq + "' AND SRD.RD_CC = '" + SRD->RD_CC + "' AND " +;
						" SRD.RD_PD IN (" + cPdSub + " ) ) "
		cWhere		:= "%" + cWhere + "%"
		//Faz a query
		BeginSql alias cAliasSRD
			SELECT %exp:cCposQry%
			FROM %table:SRD% SRD
			WHERE  %exp:cWhere%
	  				AND SRD.%notDel%
		EndSql
	    //Subtrai o valor referente o abono mes seguinte e o 1/3 de abono pecuniario mes seguinte 
		While ( cAliasSRD )->( !Eof() )
			If (cAliasSRD)->RD_PD == _aTotal[013, 232, 1]
				nVal0232 += (cAliasSRD)->RD_VALOR
			Else
				nValAbo  += (cAliasSRD)->RD_VALOR
			EndIf
			( cAliasSRD )->( dbSkip() )
		End While

		nValor += nVal0232		
		If Len(_aTotal[013]) < 1449 .Or. !SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + SRD->RD_DATARQ + _aTotal[013, 1449, 1] ) )
			nValor -= nValAbo	
		EndIf
	EndIf
ElseIf nTipo == 2
	cDatArq := SubMesAno( SRD->RD_DATARQ )
	nValor := SRD->RD_VALOR
	//Somente desconta os valores de abono se não tiver sido gerado a verba de desconto do abono do mês anterior
	If Len(_aTotal[013]) < 1449 .Or. !SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + SRD->RD_DATARQ + _aTotal[013, 1449, 1] ) )
		//Subtrai o valor referente o abono mes seguinte 
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 205, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente 1/3 de abono pecuniario mes seguinte 
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 206, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor SRD a diferenca do abono mes seguinte
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 207, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a diferenca de 1/3 de abono pecuniario mes seguinte 
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 208, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Media Horas sobre Abono Mes seguinte 
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 633, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Media valor sobre Abono Mes seguinte 
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 634, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Adicionais sobre Abono Mes Seguinte
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 635, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a ATS Abono Mês Seg.
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1313, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a ATS Abono Mês Seg. s/verbas
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1315, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Periculosidade Abono Mês Seg.
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1317, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Periculosidade Abono Mês Seg. s/verbas
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1319, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Insalubridade Abono Mês Seg.
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1321, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Insalubridade Abono Mês Seg. s/verbas
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1323, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Adic. Cargo Confiança Abono Mês Seg.
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1325, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Adic. Transferencia Abono Mês Seg.
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1327, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Pagto Peric. Sobre Medias Abono Mes Seguinte
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1409, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Pagto Insalub. Sobre Medias Abono Mes Seguinte
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1410, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Dif Media Horas sobre Abono Mes seg.
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1418, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf
		//Subtrai o valor referente a Dif Media valor sobre Abono Mes seg.
		If SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 1419, 1] ) )
			nValor -= SRDTMP->RD_VALOR
		EndIf	
	EndIf
	//Soma o valor referente INSS de ferias
	If cDInssFm != "N" .And. SRDTMP->( dbSeek( SRD->RD_FILIAL + SRD->RD_MAT + cDatArq + _aTotal[013, 232, 1] ) )
		nValor += SRDTMP->RD_VALOR	
	EndIf
EndIf

RestArea( aAreaSRD )

Return( nValor )
//------------------------------------------------------------------------------
/*/{Protheus.doc} fRetSR7()
Função que retorna a categoria do funcionário no periodo
@author	    Flavio Correa
@since		08/02/19
@version	P12
/*/
//------------------------------------------------------------------------------
Function fRetSR7(dIni,dFim,lHist)
Local aArea     := GetArea()
Local cCat  	:= SRA->RA_CATFUNC
Local cAliasTmp	

Default dIni   	:= FirstDay(dDataBase)
Default dFim   	:= LastDay(dDataBase)
Default lHist 	:= .F.

If lHist
	cAliasTmp := GetNextAlias()
	BeginSql alias cAliasTmp
		SELECT SR7.R7_CATFUNC
		FROM %table:SR7% SR7
		WHERE  SR7.R7_FILIAL = %exp:SRA->RA_FILIAL% 
		AND  SR7.R7_MAT = %exp:SRA->RA_MAT% 
		AND  SR7.R7_DATA <= %exp:dtos(dFim)%
		AND SR7.%NotDel%
	    ORDER BY R7_DATA DESC, R7_SEQ DESC
	EndSql
	
	If !(cAliasTmp)->(Eof())
		cCat  	:= (cAliasTmp)->R7_CATFUNC
	EndIf
	(cAliasTmp)->(DbCloseArea())
EndIf

RestArea( aArea )

Return cCat

/*/{Protheus.doc} fSuspDisc()
Função que verifica se o afastamento é uma suspensão disciplinar
Obs.: será desprezada da validação porque suspensão disciplinar deve ser tratado como falta
@author	    Allyson Mesashi
@since		05/11/2021
@version	P12
/*/
Static Function fSuspDisc( aAfastam )

Local aArea		:= GetArea()
Local cAliasTit	:= GetNextAlias()
Local cQrySt	:= ""
Local lRet 		:= .F.

If __oStTit == Nil
	__oStTit := FWPreparedStatement():New()
	cQrySt := "SELECT TIT_FILIAL,TIT_MAT,TIT_DATA"
	cQrySt += "FROM " + RetSqlName('TIT') + " TIT "
	cQrySt += "WHERE TIT.TIT_FILIAL = ? AND "
	cQrySt += 		"TIT.TIT_MAT = ? AND "
	cQrySt += 		"TIT.TIT_TIPO = '1' AND "
	cQrySt += 		"TIT.TIT_AFASTA = '1' AND "
	cQrySt += 		"TIT.TIT_RCMSUS = ? AND "
	cQrySt += 		"TIT.TIT_DATA = ? AND "
	cQrySt += 		"TIT.D_E_L_E_T_ = ' '"
	cQrySt := ChangeQuery(cQrySt)
	__oStTit:SetQuery(cQrySt)
EndIf

__oStTit:SetString(1, SRA->RA_FILIAL)
__oStTit:SetString(2, SRA->RA_MAT)
__oStTit:SetString(3, aAfastam[13])
__oStTit:SetString(4, dToS(aAfastam[1]))

cQrySt := __oStTit:getFixQuery()

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQrySt),cAliasTit,.T.,.T.)

While (cAliasTit)->( !EoF() )
	lRet := .T.
	Exit
End

(cAliasTit)->(dbCloseArea())

RestArea(aArea)

Return lRet

/*/{Protheus.doc} fVlFerS137()
Função valida campos de férias da tabela S137
@author	    Allyson Mesashi
@since		21/01/2022
@version	P12
/*/
Function fVlFerS137( cCodFerM, cCodFerMS, cCodFolM, cCodFolMS )

Local lRet 			:= .T.
Local nPosVbFol		:= GdFieldPos("CODVERBFOL", aHeader)
Local nPosVbRes		:= GdFieldPos("CODVERBRES", aHeader)
Local nPosFerM		:= GdFieldPos("CDVBFERM", aHeader)
Local nPosFerMS		:= GdFieldPos("CDVBFERMS", aHeader)
Local nPosFolM		:= GdFieldPos("CDCORFOLM", aHeader)
Local nPosFolMS		:= GdFieldPos("CDCORFOLMS", aHeader)

Default cCodFerM	:= ""
Default cCodFerMS	:= ""
Default cCodFolM	:= ""
Default cCodFolMS	:= ""

If nPosFerM > 0 .And. nPosFerMS > 0 .And. nPosFolM > 0 .And. nPosFolMS > 0
	If ( !Empty(cCodFerM) .And. cCodFerM $ (aCols[n, nPosVbFol]+"/"+aCols[n, nPosVbRes]+"/"+aCols[n, nPosFerMS]+"/"+aCols[n, nPosFolM]+"/"+aCols[n, nPosFolMS]) ) .Or.;
		( !Empty(cCodFerMS) .And. cCodFerMS $ (aCols[n, nPosVbFol]+"/"+aCols[n, nPosVbRes]+"/"+aCols[n, nPosFerM]+"/"+aCols[n, nPosFolM]+"/"+aCols[n, nPosFolMS]) ) .Or.;
		( !Empty(cCodFolM) .And. cCodFolM $ (aCols[n, nPosVbFol]+"/"+aCols[n, nPosVbRes]+"/"+aCols[n, nPosFerM]+"/"+aCols[n, nPosFerMS]+"/"+aCols[n, nPosFolMS]) ) .Or.;
		( !Empty(cCodFolMS) .And. cCodFolMS $ (aCols[n, nPosVbFol]+"/"+aCols[n, nPosVbRes]+"/"+aCols[n, nPosFerM]+"/"+aCols[n, nPosFerMS]+"/"+aCols[n, nPosFolM]) )
		lRet := .F.
	EndIf
EndIf

Return lRet
