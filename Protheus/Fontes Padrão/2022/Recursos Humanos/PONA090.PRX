#INCLUDE "PONA090.CH"
#INCLUDE "PROTHEUS.CH"

//-- Variavel usada para verificar se a integração por EAI pode ser realizada
Static lIntegDef := FindFunction("GETROTINTEG") .And. FindFunction("FWHASEAI")

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONA090  ³ Autor ³ Fernando Joly Siquini ³ Data ³ 05/05/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Cadastro de Exce‡oes.                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA090()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³14/04/14³      ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³        ³      ³que nao serao utilizados na P12.		  ³±±
±±³Allyson M   ³16/10/15³TTPMJ1³Ajuste p/ integracao com o TSA p/ somente ³±±
±±³            ³        ³      ³considerar os funcionario integrados.  	  ³±±
±±³Oswaldo L   ³06/09/17³DRHPON³Ajuste p/ integracao com o TSA qdo deixar ³±±
±±³            ³        ³TP1282³campos mat/c.custo e turno em branco   	  ³±±
±±³            ³        ³      ³(somente funcionarios da mesma filial)	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±± 
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONA090(aRotAuto,nOpcAuto)

Local cFiltraSP2				
Local aIndexSP2	:= {}			
Local nPos := 0

DEFAULT aRotAuto := {}
DEFAULT nOpcAuto := 3

Private aButtons := {; 
						{	"S4SB014N"					,;
	    	    			{ || SPJExceConPad(1) }		,;
	        				OemToAnsi( STR0011 )	 	,;	//"Gerar Horas..."
	        				OemToAnsi( STR0019 )	 	 ;	//"Horas"
	            		};
					}
Private bFiltraBrw	:= {|| NIL }	
Private cCalc		:= "SP2"
//Private aAlter[SP2->(fCount())]
//Private aAcho[SP2->(fCount())]
Private cCadastro	    := OemToAnsi(STR0009 ) // 'Cadastro de Exce‡oes'
Private aRotina		:= MenuDef()
Private lPon090AUT 	:= .F.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se a Validacao dos Modos de Acesso Estiverem OK              ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If Len(aRotAuto) > 0
	lMsErroAuto = .F.
	lPon090AUT := .T.

	PRIVATE aAutoCab	:= Aclone(aRotAuto)
	PRIVATE nAutoOpc	:= nOpcAuto

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se enviou os campos necessarios para o ExecAuto     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If Pn090AutoPos(aAutoCab,.F.)
		MBrowseAuto(nAutoOpc,aAutoCab,"SP2")
	Else
		Help(,,'PONA090OBG',, STR0033,1,0) // "Não foram enviados todos os campos obrigatórios"
	Endif
Else  

	IF ValidArqPon()
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Seleciona os campos no arquivo SP2                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aAcho 	:= fSP2Cpos()
		//IF ( nPos := aScan(aAlter, {|x| 'P2_FILIAL' $ Upper(x)}) ) > 0
		//	aDel(aAlter, nPos)		
		//	aSize(aAlter, Len(aAlter)-1)
		//EndIF
		//aAcho := aClone(aAlter)
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cFiltraRh := CHKRH("PONA090","SP2","1")
		bFiltraBrw 	:= {|| FilBrowse("SP2",@aIndexSP2,@cFiltraRH) }
		Eval(bFiltraBrw)
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Endereca a funcao de BROWSE                                  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		dbSelectArea('SP2')
		dbGoTop()
		mBrowse(6, 1, 22, 75, 'SP2')
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		EndFilBrw("SP2",aIndexSP2)
	
		dbSelectArea('SP2')
		dbSetOrder(3)
	
	EndIF
Endif
	
Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fPN090TdOk³ Autor ³ Fernando Joly Siquini ³ Data ³ 08/05/97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Consiste a Digita‡„o de Datas para Exce‡oes                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fPN090TdOk(NEXP)                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parƒmetros³ NEXP = 3 se Inclus„o ou 4 se Altera‡„o                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA090                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fPN090TdOk(nOpc)

Local aAreaSP2 := SP2->( GetArea() )
Local aHeader  := {}	
Local cMsgInfo := ""	
Local dDataDe  := M->P2_DATA
Local dDataAte := If(!Empty(M->P2_DATAATE),M->P2_DATAATE,M->P2_DATA)
Local nRecno   := aAreaSP2[3]
Local lOnly1   := If(Empty(M->P2_DATAATE),.T.,.F.)
Local lRet     := .T.
Local cFil	   := xFilial("SP2")	
Local cMat     := M->P2_MAT
Local cCC      := M->P2_CC
Local cTurno   := M->P2_TURNO
Local cTipoDia := M->P2_TIPODIA	
Local cString  := ''
Local aUsers 	:= {}
Local lTSREP	:= SuperGetMv( "MV_TSREP" , NIL , .F. )
Private oObjREP	:= Nil

Begin Sequence
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Processa Valida‡„o no Registro Atual.                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !Empty(dDataAte) .And. dDataAte < dDataDe
		Help(' ',1,'INTERINVAL')
		lRet := .F.
		Break
	EndIF
	
	IF !P2TipoDiaOk(cTipoDia) 
		lRet := .F.
		Break
	EndIF
	
	SP2->( dbSetOrder(3) , dbGoBottom() )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se a Data Ate Estiver Vazia, assume a Data Inicial          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	M->P2_DATAATE := IF( Empty( M->P2_DATAATE ) , M->P2_DATA , M->P2_DATAATE )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Pesquisando Mat + CC + Turno                       		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF SP2->(dbSeek( (cString := ( cFil + cMat + cCC + cTurno )) + Dtos(dDataDe), .F.)) .or. ;
		SP2->(dbSeek( (cString := ( cFil + cMat + cCC + cTurno )), .F.))
		While SP2->( !Eof() .and. P2_FILIAL + P2_MAT + P2_CC + P2_TURNO == cString )
			IF SP2->( dDataDe == P2_DATA .and. P2_TIPODIA == cTipoDia .or. ;
				dDataAte == IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe >= P2_DATA .and. dDataAte <= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. !lOnly1 .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe <= P2_DATA .and. dDataAte >= P2_DATA .and. !lOnly1 .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe <= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. dDataAte >= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. !lOnly1 .and. P2_TIPODIA == cTipoDia .or. ;
				dDataDe <= P2_DATA .and. dDataAte >= IF(!Empty(P2_DATAATE),P2_DATAATE,P2_DATA) .and. !lOnly1 .and. P2_TIPODIA == cTipoDia )
				IF nOpc == 4 .and. SP2->(Recno()) == nRecno
					SP2->( dbSkip() )
					Loop
				Else
					lRet := .F.
					Help(' ',1,'INTERJACAD')
					Break
				EndIF
			Else
				SP2->(dbSkip())
			EndIF
		EndDo
	EndIF
	
	//Calculando os Horarios
	M->P2_HRINTV1 := fHrsTrabGat("I","SP2","MB","1")
	M->P2_HRINTV2 := fHrsTrabGat("I","SP2","MB","2")
	M->P2_HRINTV3 := fHrsTrabGat("I","SP2","MB","3")
	M->P2_HRSTRAB := fHrsTrabGat("H","SP2","MB","1")
	M->P2_HRSTRA2 := fHrsTrabGat("H","SP2","MB","2")
	M->P2_HRSTRA3 := fHrsTrabGat("H","SP2","MB","3")
	M->P2_HRSTRA4 := fHrsTrabGat("H","SP2","MB","4")
	M->P2_TOTHORA := fHrsTrabGat("T","SP2","MB")
    
	//Verifica se os Horarios foram digitados para dias trabalhados
	IF ( ( M->P2_TRABA == "S" ) .and. ( Empty( M->P2_TOTHORA ) .and. (M->P2_HERDHOR <> 'S') ) )
		cMsgInfo := STR0018  //"Para Dias Trabalhados ser  necess rio o preenchimento dos hor rios"
		lRet := .F.
		Break
	EndIF

	//Carrega os Campos para obtencao da descricao
	aHeader := SP2->(;
						GdMontaHeader(	NIL		,;	//01 -> Por Referencia contera o numero de campos em Uso
										NIL		,;	//02 -> Por Referencia contera os Campos do Cabecalho da GetDados que sao Virtuais
										NIL		,;	//03 -> Por Referencia contera os Campos do Cabecalho da GetDados que sao Visuais
										"SP2"	,;	//04 -> Opcional, Alias do Arquivo Para Montagem do aHeader
										NIL		,;	//05 -> Opcional, Campos que nao Deverao constar no aHeader
										.T.		,;	//06 -> Opcional, Carregar Todos os Campos
										.F.		,;	//07 -> Nao Carrega os Campos Virtuais
										.F.		,;	//08 -> Carregar Coluna Fantasma
										.F.		,;	//09 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
										.F.		,;	//10 -> Verifica se Deve verificar se o campo eh usado
										.F.		 ;	//11 -> Verifica se Deve verificar o nivel do usuario
					   				 );
					)

	//Verifica se Existe Saida de Intervalo sem Entrada correspondente
	IF ( ( ( M->P2_HRINTV1 <> 0 ) .or. ( M->P2_INTERV1 == "S" ) ) .and. ( M->P2_HRSTRA2 == 0.00 ) )
		lRet		:= .F.
		cMsgInfo	:= STR0013  //"Os Horarios n„o podem terminar com uma saida de intervalo"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0014	//"O intervalo: "
		cMsgInfo	+= " 1 "
		cMsgInfo	+= STR0015  //"Nao possui a entrada correspondente"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0016  //"Altere o conteudo do campo: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_INTERV1' , aHeader ) , 01 ]
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo    += STR0017	//"ou informe Hor rio nos campos: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_ENTRA2' , aHeader ) , 01 ]
		cMsginfo	+= " / " 
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_SAIDA2' , aHeader ) , 01 ]
		Break		
	EndIF
	//Verifica se Existe Saida de Intervalo sem Entrada correspondente
	IF ( ( ( M->P2_HRINTV2 <> 0 ) .or. ( M->P2_INTERV2 == "S" ) ) .and. ( M->P2_HRSTRA3 == 0.00 ) )
		lRet		:= .F.
		cMsgInfo	:= STR0013  //"Os Horarios n„o podem terminar com uma saida de intervalo"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0014	//"O intervalo: "
		cMsgInfo	+= " 2 "
		cMsgInfo	+= STR0015  //"Nao possui a entrada correspondente"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0016  //"Altere o conteudo do campo: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_INTERV2' , aHeader ) , 01 ]
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo    += STR0017	//"ou informe Hor rio nos campos: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_ENTRA3' , aHeader ) , 01 ]
		cMsginfo	+= " / " 
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_SAIDA3' , aHeader ) , 01 ]
		Break		
	EndIF
	//Verifica se Existe Saida de Intervalo sem Entrada correspondente
	IF ( ( ( M->P2_HRINTV3 <> 0 ) .or. ( M->P2_INTERV3 == "S" ) ) .and. ( M->P2_HRSTRA4 == 0.00 ) )
		lRet		:= .F.
		cMsgInfo	:= STR0013  //"Os Horarios n„o podem terminar com uma saida de intervalo"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0014	//"O intervalo: "
		cMsgInfo	+= " 3 "
		cMsgInfo	+= STR0015  //"Nao possui a entrada correspondente"
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0016  //"Altere o conteudo do campo: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_INTERV3' , aHeader ) , 01 ]
		cMsgInfo	+= CRLF
		cMsgInfo	+= CRLF
		cMsgInfo    += STR0017	//"ou informe Hor rio nos campos: "
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_ENTRA4' , aHeader ) , 01 ]
		cMsginfo	+= " / " 
		cMsgInfo	+= aHeader[ GdFieldPos( 'P2_SAIDA4' , aHeader ) , 01 ]
		Break		
	EndIF

End Sequence

IF !( lRet)
	IF !Empty( cMsgInfo )
		//"Existe inconsistˆncias na Exce‡„o"
		MsgInfo( OemToAnsi( cMsgInfo ) , OemToAnsi( STR0012 ) )
	EndIF
EndIF
	
RestArea( aAreaSP2 )

If lRet .And. lTSREP

	// Verifica se o tipo da excecao eh dia nao trabalhado e se nao for funcionario
	If SP2->P2_TRABA <> "N"

		// Caso seja alteracao executa a exclusao dos registros no TSA se houver integracao
		If ALTERA
	
			// Verifica se a excecao eh por funcionario
			If !Empty(SP2->P2_MAT)
		
				SRA->(dbSetOrder(1))
				If SRA->(dbSeek( SP2->P2_FILIAL + SP2->P2_MAT )) .And. !Empty(SRA->RA_RHEXP)
					aUsers := { SP2->P2_MAT }
				EndIf	
				
			// Realiza o envio por Centro de Custo
			ElseIf !Empty(SP2->P2_CC)
		
				SRA->(dbSetOrder(2))
				If SRA->(dbSeek( SP2->P2_FILIAL + SP2->P2_CC ))
		
					While SRA->(!Eof()) .And. SP2->P2_FILIAL + SP2->P2_CC == SRA->RA_FILIAL + SRA->RA_CC
		
						// Verifica se o turno foi preenchido e seleciona os funcionarios
						If Empty(SRA->RA_RHEXP) .Or. ( !Empty(SP2->P2_TURNO) .And. SRA->RA_TNOTRAB <> SP2->P2_TURNO )
							SRA->(dbSkip())
							Loop
						Endif
		
						aAdd(aUsers, SRA->RA_MAT )
						
						SRA->(dbSkip())
					Enddo
		
				Endif
			
			// Realiza o envio por Turno de Trabalho
			ElseIf !Empty(SP2->P2_TURNO)
		
				SRA->(dbSetOrder(4))
				If SRA->(dbSeek( SP2->P2_FILIAL + SP2->P2_TURNO ))
		
					While SRA->(!Eof()) .And. SP2->P2_FILIAL + SP2->P2_TURNO == SRA->RA_FILIAL + SRA->RA_TNOTRAB
		
						// Verifica se o centro de custo foi preenchido e seleciona os funcionarios
						If Empty(SRA->RA_RHEXP) .Or. ( !Empty(SP2->P2_CC) .And. SRA->RA_CC <> SP2->P2_CC )
							SRA->(dbSkip())
							Loop
						Endif
		
						aAdd(aUsers, SRA->RA_MAT )				
		
						SRA->(dbSkip())
					Enddo
		
				Endif
			Else
				SRA->(dbGoTop())
				
				While SRA->(!Eof()) 
		
					//desconsidera funcionários não integrados 
					If Empty(SRA->RA_RHEXP) .or. SP2->P2_FILIAL != SRA->RA_FILIAL
						SRA->(dbSkip())
						Loop
					Endif
		
					aAdd(aUsers, SRA->RA_MAT )				
		
					SRA->(dbSkip())
				Enddo
			Endif	
			
			If Len(aUsers) > 0
		
				//-- Inicializa a integracao via WebServices TSA
				oObjREP := PTSREPOBJ():New()	
		
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Executa o WebServices TSA - Excecoes por Centro de Custo     ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				oObjREP:WSException( 3 , aUsers )
		
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Grava o Log do controle de exportacao WebServices TSA        ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				oObjRep:WSUpdRHExp( "SP2" , .T. )	
		
			Endif

		Endif	

	Endif

Endif

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SPJExceConPad³Autor ³Marinaldo de Jesus    ³ Data ³26/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Consulta padrao do SPJ para retorno de Horarios        		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³SPJExceConPad( nOpc )										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T.                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Cadastros de Excecoes / Trocas de Turno                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function SPJExceConPad( nOpc , nLine , aHeaderPastPar , aColsPastPar , lReadVar )
         
Local cType		:= ""
Local lConPadOk := .F.

Private lSPJConPadFilt	:= .F.
Private aUniqueSPJConP	:= {}
        
DEFAULT nOpc := 0

IF !( ( cType := ValType( nOpc ) ) == "N"  )
	IF ( cType == "C"	 )
		nOpc := Val( nOpc )
	Else
		nOpc := 0
	EndIF
EndIF

IF ( nOpc == 3 )
	UniqueKey( NIL , "SPJ" , lSPJConPadFilt )
	lSPJConPadFilt := .T.
	aUniqueSPJConP := { "PJ_FILIAL" , "PJ_TURNO" , "PJ_SEMANA" , "PJ_TPDIA" }
EndIF

IF ( lConPadOk := ConPad1( NIL , NIL , NIL , "SPJ" , NIL , NIL , .F. ) )
	IF ( nOpc == 1 ) //Excecao por Periodo ( Enchoice )
		
		M->P2_ENTRA1 := SPJ->PJ_ENTRA1
		M->P2_SAIDA1 := SPJ->PJ_SAIDA1

		M->P2_ENTRA2 := SPJ->PJ_ENTRA2
		M->P2_SAIDA2 := SPJ->PJ_SAIDA2
		
		M->P2_ENTRA3 := SPJ->PJ_ENTRA3
		M->P2_SAIDA3 := SPJ->PJ_SAIDA3
		
		M->P2_ENTRA4 := SPJ->PJ_ENTRA4
		M->P2_SAIDA4 := SPJ->PJ_SAIDA4
		
		M->P2_HORMENO := SPJ->PJ_HORMENO
		M->P2_HORMAIS := SPJ->PJ_HORMAIS
		
		M->P2_INTERV1 := SPJ->PJ_INTERV1
		M->P2_INTERV2 := SPJ->PJ_INTERV2
		M->P2_INTERV3 := SPJ->PJ_INTERV3
		
		M->P2_CODEXT  := SPJ->PJ_TPEXT
		M->P2_CODHNOT := SPJ->PJ_TPEXTN
		
		M->P2_HRINTV1 := SPJ->PJ_HRSINT1
		M->P2_HRINTV2 := SPJ->PJ_HRSINT2
		M->P2_HRINTV3 := SPJ->PJ_HRSINT3

		M->P2_JND1CON := SPJ->PJ_JND1CON
		M->P2_JND2CON := SPJ->PJ_JND2CON
		M->P2_JND3CON := SPJ->PJ_JND3CON
		M->P2_JND4CON := SPJ->PJ_JND4CON
		
		M->P2_HRSTRAB := SPJ->PJ_HRSTRAB
		M->P2_HRSTRA2 := SPJ->PJ_HRSTRA2
		M->P2_HRSTRA3 := SPJ->PJ_HRSTRA3
		M->P2_HRSTRA4 := SPJ->PJ_HRSTRA4
		M->P2_TOTHORA := SPJ->PJ_HRTOTAL
		
	ElseIF ( nOpc == 2 )	//Excecao por Funcionario ( GetDados )

		GdFieldPut( "P2_ENTRA1" , SPJ->PJ_ENTRA1 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_SAIDA1" , SPJ->PJ_SAIDA1 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
                                                 	
		GdFieldPut( "P2_ENTRA2" , SPJ->PJ_ENTRA2 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_SAIDA2" , SPJ->PJ_SAIDA2 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		
		GdFieldPut( "P2_ENTRA3" , SPJ->PJ_ENTRA3 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_SAIDA3" , SPJ->PJ_SAIDA3 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		
		GdFieldPut( "P2_ENTRA4" , SPJ->PJ_ENTRA4 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_SAIDA4" , SPJ->PJ_SAIDA4 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		
		GdFieldPut( "P2_HORMENO" , SPJ->PJ_HORMENO	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_HORMAIS" , SPJ->PJ_HORMAIS	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		
		GdFieldPut( "P2_INTERV1" , SPJ->PJ_INTERV1 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_INTERV2" , SPJ->PJ_INTERV2 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_INTERV3" , SPJ->PJ_INTERV3 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		
		GdFieldPut( "P2_CODEXT"  , SPJ->PJ_TPEXT 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_CODHNOT" , SPJ->PJ_TPEXTN 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
	
		GdFieldPut( "P2_HRINTV1" , SPJ->PJ_HRSINT1 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_HRINTV2" , SPJ->PJ_HRSINT2 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_HRINTV3" , SPJ->PJ_HRSINT3 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )

		GdFieldPut( "P2_JND1CON" , SPJ->PJ_JND1CON 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_JND2CON" , SPJ->PJ_JND2CON 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_JND3CON" , SPJ->PJ_JND3CON 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_JND4CON" , SPJ->PJ_JND4CON 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		                                           	
		GdFieldPut( "P2_HRSTRAB" , SPJ->PJ_HRSTRAB 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_HRSTRA2" , SPJ->PJ_HRSTRA2 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_HRSTRA3" , SPJ->PJ_HRSTRA3 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_HRSTRA4" , SPJ->PJ_HRSTRA4 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
		GdFieldPut( "P2_TOTHORA" , SPJ->PJ_HRTOTAL 	, nLine , aHeaderPastPar , aColsPastPar , lReadVar )
    
	ElseIF ( nOpc == 3 )	//Trocas de Turno( GetDados )
	
		GdFieldPut( "PF_TURNOPA" , SPJ->PJ_TURNO	)
		GdFieldPut( "PF_SEQUEPA" , SPJ->PJ_SEMANA	)

	EndIF

EndIF

Return( lConPadOk )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SPJConPadFilt³Autor ³Marinaldo de Jesus    ³ Data ³26/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Filtra Consulta padrao do SPJ                          		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³SPJConPadFilt()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Filtro da Consulta padrao do SPJ                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function SPJConPadFilt()

Local aTabTno	:= {}
Local cRet		:= "@#.T.@#"
Local cKeys		:= ""
Local cIndexKey	:= SPJ->( IndexKey() )
Local cFil		:= xFilial( "SPJ" )
Local nSpjRecno	:= SPJ->( Recno() )
Local nTab		:= 0
Local nTabs		:= 0
Local nLoop		:= 0
Local nLoops	:= 0
Local nBytes	:= 0

Begin Sequence

	IF ( Type( "lSPJConPadFilt" ) == "L" .and. ( lSPJConPadFilt ) )
		IF ( Type( "aUniqueSPJConP" ) == "A" )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega os Recnos da Tabela de Horario Padrao							 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			fTabTurno( @aTabTno , cFil , .F. , { || UniqueKey( aUniqueSPJConP ) } )
			nTabs := Len( aTabTno )
			For nTab := 1 To nTabs
				nLoops := Len( aTabTno[ nTab , 03 ] )
				For nLoop := 1 To nLoops
					SPJ->( dbGoto( aTabTno[ nTab , 03 , nLoop , 37 ] ) )
					cKeys	+= SPJ->( &( cIndexKey ) ) + "/"
					nBytes	+= Len( cKeys )
					IF ( nBytes > 2000 ) //Filter greater than 2000 bytes
						cKeys := ""
						Break
					EndIF
				Next nLoop
			Next nTab	
			cRet := "@#"+cIndexKey+"$'"+cKeys+"'@#"
		EndIF
	EndIF

End Sequence

SPJ->( MsGoto( nSpjRecno ) )

Return( cRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P2TipoDiaVld ³Autor ³Marinaldo de Jesus    ³ Data ³26/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar o conteudo do campo P2_TIPODIA                 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P2TipoDiaVld()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³X3_VALID do campo P2_TIPODIA                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function P2TipoDiaVld()

Local lP2TipoDiaVld := .T.

Begin Sequence

	IF ( Vazio() )
		Break
	EndIF
	
	IF !(lP2TipoDiaVld := P2TipoDiaOk() )
		Break
	EndIF
	
	IF !( lP2TipoDiaVld := Pertence(" SNDC") )
		Break
	EndIF

End Sequence

Return( lP2TipoDiaVld )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³P2TipoDiaOk  ³Autor ³Equipe Advanced RH    ³ Data ³28/05/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar Excecao que se aplica a um Mesmo Dia          		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³P2TipoDiaOk()												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                     		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³P2TipoDiaVld()				                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function P2TipoDiaOk(cTipoDia)

Local lP2TipoDiaOk	:= .T.

DEFAULT cTipoDia := M->P2_TIPODIA

IF (;
		( Type("M->P2_MAT")		== "C" ) .and.;
		( Type("M->P2_DATA")	== "D" ) .and.;
		( Type("M->P2_DATAATE") == "D" )	  ;
	)
	IF ( !Empty( M->P2_MAT ) )
		IF ( M->P2_DATA == M->P2_DATAATE ) .AND. !Empty(cTipoDia)
			//"O campo 'Tipo de Dia' dever  ter o seu conte£do vazio quando a exce‡„o for por funcion rio e referir-se a um £nico dia."
			MsgInfo( OemToAnsi( STR0020 ) , "P2_TIPODIA" )
			lP2TipoDiaOk	:= .F.
		EndIF
	EndIF
EndIF

Return( lP2TipoDiaOk )                                                                       

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fSP2Cpos		³Autor³  Mauricio MR      ³ Data ³13/06/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Obtem nome de campos do SP2								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA090                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aCpos -> Array com os nomes dos campos do SX2				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fSP2Cpos()

Local aArea		:= GetArea()
Local aSX3Area	:= SX3->(GetArea())
Local aCpos 	:= {}                 
Local cAlias	:= 'SP2'                           
Local aNotCpos  := {'P2_FILIAL','P2_ID', 'P2_TPEXCE'}

dbSelectArea("SX3")
dbSetOrder(1)
dbSeek(cAlias)
nUsado := 0
While !EOF() .And. (x3_arquivo == cAlias)
	IF X3USO(x3_usado) .AND. cNivel >= x3_nivel .And. Empty( AScan( aNotCpos, { |x| x == AllTrim(SX3->X3_CAMPO) } ) )
		AADD(aCpos, x3_campo )
	EndIf
	dbSkip()
End            
RestArea(aSX3Area)
RestArea(aArea)

Return aCpos

/*
	ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
	³Fun‡„o    ³ MenuDef		³Autor³  Luiz Almeida     ³ Data ³21/11/2006³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
	³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
	³          ³ser lidas pelas blibliotecas Framework da Versao 9.12 .     ³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Sintaxe   ³< Vide Parametros Formais >									³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³ Uso      ³PONA090                                                     ³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³ Retorno  ³aRotina														³
	ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
	³Parametros³< Vide Parametros Formais >									³
	ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function MenuDef()

Local aRotina		:= {	{ STR0004		, 'PesqBrw', 0, 1, ,.F.}	,; // 'Pesquisar'
                    	 	{ STR0005		, 'AxVisual', 0, 2}	,; // 'Visualizar'
                     		{ STR0006		, 'Pn090Mnt(SP2->(Alias()),SP2->(Recno()),3)', 0, 3},; // 'Incluir'
                     		{ STR0007		, 'Pn090Mnt(SP2->(Alias()),SP2->(Recno()),4)', 0, 4},; // 'Alterar'
                     		{ STR0008		, 'Pn090Mnt(SP2->(Alias()),SP2->(Recno()),5)', 0, 5} ,; // 'Excluir'
							{ STR0010		, "PutHrsTab(cCalc)", 0, 3} }  // 'Calcular Horas'
Return aRotina


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Pn090Mnt ³ Autor ³ IPRH - Inovacao       ³ Data ³ 05/07/11 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Programa para realizar manutencao nas Excecoes por Periodo ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pn090Mnt(cAlias,nRecno,nOpc)                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parƒmetros³ cAlias = alias atual da tabela ser feita manutencao        ³±±
±±³          ³ nRecno = recno atual do alias                              ³±±
±±³          ³ nOpc = opcao do cadastro                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA090                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn090Mnt(cAlias,nRecno,nOpc)
Local nOpcA 		:= 0
Local aArea			:= GetArea()
Local aSRAArea		:= SRA->(GetArea())
Local aUsers		:= {}
Local lTSREP		:= SuperGetMv( "MV_TSREP" , NIL , .F. )
Local dP2_DATAATE	:= SP2->P2_DATAATE
Local dP2_DATA		:= SP2->P2_DATA
Local cP2_TURNO		:= SP2->P2_TURNO
Local cP2_CC		:= SP2->P2_CC
Local cP2_TRABA		:= SP2->P2_TRABA

Private oObjREP	:= Nil

If lPon090AUT
	nOpcA := 0
	If nAutoOpc == 3
		nOpcA := AxInclui(cAlias,nRecno,3,,,,"fPN090TdOk(3)",,,,,aAutoCab) // 'Incluir'
	ElseIf nAutoOpc == 4
		If Pn090AutoPos(aAutoCab)
			nOpcA := AxAltera(cAlias,SP2->(Recno()),4,,,,,"fPN090TdOk(4)",,,,,aAutoCab)
		Endif
	ElseIf nAutoOpc == 5
		If Pn090AutoPos(aAutoCab)
			nOpcA := AxDeleta(cAlias,SP2->(Recno()),5,,,,,aAutoCab)
		Endif
	Endif
	If lIntegDef .And. nOpcA == 1
		FwIntegDef("PONA090")
		
		If nAutoOpc <> 5 .And. !PI090GetStatus()[1]  // somente espera retorno/erro quando não for exclusão
			Help(,,'Pn090Mnt',, PI090GetStatus()[2],1,0)
		EndIf
	EndIf
Else
	If nOpc == 3
		nOpcA := AxInclui(cAlias,nRecno,3,aAcho,,aAcho,"fPN090TdOk(3)",,,aButtons) // 'Incluir'
	ElseIf nOpc == 4
		nOpcA := AxAltera(cAlias,nRecno,4,aAcho,aAcho,,,"fPN090TdOk(4)",,,aButtons)
	ElseIf nOpc == 5
		nOpcA := AxDeleta(cAlias,nRecno,5)
	Endif  
	//-- Chamada manual da IntegDef
	If lIntegDef .And. nOpcA == 1
		FwIntegDef("PONA090")
		
		If nOpc <> 5 .And. !PI090GetStatus()[1]  // somente espera retorno/erro quando não for exclusão
			Help(,,'Pn090Mnt',, PI090GetStatus()[2],1,0)
		EndIf
	EndIf
Endif

If (((nOpc == 3 .Or. nOpc == 4 ) .And. nOpcA == 1) .Or. (nOpc == 5 .And. nOpcA == 2)) .And. lTSREP

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se o periodo de excecao esta presente ou futuro para envio ao TSA     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	// Verifica se a data de Inicio for maior/igual que a data de hoje
	// Verifica se nao existe data final de afastamento				
	// Verifica se a data final for maior/igual que a data de hoje
	// Se for exclusao executa o metodo remove independente da data
	// Foi utilizado o Date() ao inves do dDataBase para pegar a data do computador
	If (SP2->P2_DATA >= Date() .Or. Empty(SP2->P2_DATAATE) .Or. (!Empty(SP2->P2_DATAATE) .And. SP2->P2_DATAATE >= Date())) .Or. ;
		(nOpc == 5 .And. nOpcA == 2)	

		// Verifica se o tipo da excecao eh dia nao trabalhado e se nao por funcionario
		If SP2->P2_TRABA == "N" .And. Empty(SP2->P2_MAT)
	
			//-- Inicializa a integracao via WebServices TSA
			oObjREP := PTSREPOBJ():New()	
	
	
			If (nOpc == 4 .And. ;
				( dP2_DATAATE <> SP2->P2_DATAATE .Or. ;
				dP2_DATA <> SP2->P2_DATA .Or. ;
				cP2_TURNO <> SP2->P2_TURNO .Or. ;
				cP2_CC <> SP2->P2_CC .Or. ;
				cP2_TRABA <> SP2->P2_TRABA ) )

				oObjREP:WSDayNotWorked( 5 , , { dP2_DATA, dP2_DATAATE, cP2_TURNO, cP2_CC, cP2_TRABA } )

			Endif

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Executa o WebServices TSA - Dias nao trabalhados             ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If oObjREP:WSDayNotWorked( If(nOpc == 3 .Or. nOpc == 4,4,5) )
		
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Grava o Log do controle de exportacao WebServices TSA        ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				oObjRep:WSUpdRHExp( "SP2" )
	
			Endif
		Endif	
	
		// Verifica se a excecao eh por funcionario
		If !Empty(SP2->P2_MAT)
	
			SRA->(dbSetOrder(1))
			If SRA->(dbSeek( SP2->P2_FILIAL + SP2->P2_MAT )) .And. !Empty(SRA->RA_RHEXP)
				aUsers := { SP2->P2_MAT }
			EndIf	
			
		// Realiza o envio por Centro de Custo
		ElseIf !Empty(SP2->P2_CC)
	
			SRA->(dbSetOrder(2))
			If SRA->(dbSeek( SP2->P2_FILIAL + SP2->P2_CC ))
	
				While SRA->(!Eof()) .And. SP2->P2_FILIAL + SP2->P2_CC == SRA->RA_FILIAL + SRA->RA_CC
	
					// Verifica se o turno foi preenchido e seleciona os funcionarios
					If Empty(SRA->RA_RHEXP) .Or. ( !Empty(SP2->P2_TURNO) .And. SRA->RA_TNOTRAB <> SP2->P2_TURNO ) 
						SRA->(dbSkip())
						Loop
					Endif
	
					aAdd(aUsers, SRA->RA_MAT )
					
					SRA->(dbSkip())
				Enddo
	
			Endif
		
		// Realiza o envio por Turno de Trabalho
		ElseIf !Empty(SP2->P2_TURNO)
	
			SRA->(dbSetOrder(4))
			If SRA->(dbSeek( SP2->P2_FILIAL + SP2->P2_TURNO ))
	
				While SRA->(!Eof()) .And. SP2->P2_FILIAL + SP2->P2_TURNO == SRA->RA_FILIAL + SRA->RA_TNOTRAB
	
					// Verifica se o centro de custo foi preenchido e seleciona os funcionarios
					If Empty(SRA->RA_RHEXP) .Or. ( !Empty(SP2->P2_CC) .And. SRA->RA_CC <> SP2->P2_CC )
						SRA->(dbSkip())
						Loop
					Endif
	
					aAdd(aUsers, SRA->RA_MAT )				
	
					SRA->(dbSkip())
				Enddo
	
			Endif
		
		Else
				
			SRA->(dbGoTop())
			While SRA->(!Eof()) 
				//desconsidera funcionários não integrados
				If Empty(SRA->RA_RHEXP) .or. SP2->P2_FILIAL != SRA->RA_FILIAL 
					SRA->(dbSkip())
					Loop
				Endif
		
				aAdd(aUsers, SRA->RA_MAT )
				
				SRA->(dbSkip())
			Enddo
		
		Endif	
		
		If Len(aUsers) > 0
	
			//-- Inicializa a integracao via WebServices TSA
			oObjREP := PTSREPOBJ():New()	
	
			If (nOpc == 4 .And. ;
				( dP2_DATAATE <> SP2->P2_DATAATE .Or. ;
				dP2_DATA <> SP2->P2_DATA .Or. ;
				cP2_TURNO <> SP2->P2_TURNO .Or. ;
				cP2_CC <> SP2->P2_CC .Or. ;
				cP2_TRABA <> SP2->P2_TRABA ) )

				oObjREP:WSException( 3 , aUsers , { dP2_DATA, dP2_DATAATE, cP2_TURNO, cP2_CC, cP2_TRABA } )

			Endif

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Executa o WebServices TSA - Excecoes por Centro de Custo     ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			oObjREP:WSException( If(nOpc == 3 .Or. nOpc == 4,1,3) , aUsers )
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Grava o Log do controle de exportacao WebServices TSA        ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			oObjRep:WSUpdRHExp( "SP2" )	
	
		Endif
	Endif
Endif

RestArea(aSRAArea)
RestArea(aArea)

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Pn090AutoPos ³ Autor ³ IPRH - Inovacao   ³ Data ³ 16/01/13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Programa para posicionar no registro para execauto         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Pn090AutoPos(aAutoCab)  				                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parƒmetros³ ExpA1 = array com os campos e conteudos a serem posicionado³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA090                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn090AutoPos(aAutoCab,lSeek)
Local nPosFilial 	:= 0
Local nPosMatr		:= 0
Local nPosData		:= 0
Local nPosTurno		:= 0
Local nPosCCusto	:= 0
Local nPosTpdia		:= 0
Local lRet 			:= .F.

DEFAULT lSeek	:= .T.

If Len(aAutoCab) > 0
	nPosFilial	:= AScan( aAutoCab, { |x| x[1] == "P2_FILIAL" } )
	nPosMatr	:= AScan( aAutoCab, { |x| x[1] == "P2_MAT" } )
	nPosCCusto	:= AScan( aAutoCab, { |x| x[1] == "P2_CC" } )
	nPosTurno	:= AScan( aAutoCab, { |x| x[1] == "P2_TURNO" } )
	nPosData	:= AScan( aAutoCab, { |x| x[1] == "P2_DATA" } )
	nPosTpDia	:= AScan( aAutoCab, { |x| x[1] == "P2_TIPODIA" } )
	
	If nPosFilial > 0 .And. ;
		nPosMatr > 0 .And. ;
		nPosCCusto > 0 .And. ;
		nPosTurno > 0 .And. ;
		nPosData > 0 .And. ;
		nPosTpDia > 0
		lRet := .T.
		If lSeek
			lRet := .F.
			dbSelectArea("SP2")
			dbSetOrder(RetOrdem("SP2","P2_FILIAL+P2_MAT+P2_CC+P2_TURNO+DTOS(P2_DATA)+P2_TIPODIA"))
			If dbSeek( aAutoCab[nPosFilial,2] + ;
						aAutoCab[nPosMatr,2] + ;
						aAutoCab[nPosCCusto,2] + ;
						aAutoCab[nPosTurno,2] + ;
						DTOS(aAutoCab[nPosData,2]) + ;
						aAutoCab[nPosTpDia,2]  )
				lRet := .T.
			Else
				Help(,,'PONA090ALT',, STR0034,1,0) // "Registro não identificado para alteração ou exclusão"
			Endif
		Endif
	Endif
Endif

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} IntegDef
	Funcao de integracao com o adapter EAI para envio e recepção
 Exceção por Funcionário

@param   cXML          Variavel com conteudo xml para envio/recebimento.
@param   nTypeTrans    Tipo de transacao. (Envio/Recebimento)
@param   cTypeMessage  Tipo de mensagem. (Business Type, WhoIs, etc)
@param   cVersaoMsg    Versão da mensagem em transação

@version P11
@since   18/10/2012
@return  aRet - Array contendo o resultado da execucao e a mensagem Xml de retorno.
			aRet[1] - (boolean) Indica o resultado da execução da função
			aRet[2] - (caracter) Mensagem Xml para envio
/*/
//-------------------------------------------------------------------
Static Function IntegDef( cXML, nTypeTrans, cTypeMessage, cVersaoMsg )

Local aRet := {} 

aRet:= PONI090 ( cXml, nTypeTrans, cTypeMessage, cVersaoMsg )
                
Return aRet