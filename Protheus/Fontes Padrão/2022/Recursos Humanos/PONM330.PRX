#Include 'PONM330.CH'
#Include 'PROTHEUS.CH'
#Include "MSGRAPHI.CH"
#INCLUDE "PONCALEN.CH"

#DEFINE LINHA 					01
#DEFINE AREA  					02
#DEFINE PONTOS 					03
#DEFINE BARRAS 					04
#DEFINE PIRAMIDE 				05
#DEFINE CILINDRO 				06
#DEFINE BARRAS_HORIZONTAIS 		07
#DEFINE PIRAMIDE_VERTICAL 		08
#DEFINE CILINDRO_HORIZONTAL 	09
#DEFINE PIZZA 					10
#DEFINE FORMA 					11
#DEFINE LINHA_RAPIDA 			12
#DEFINE FLEXAS 					13
#DEFINE GANTT   				14
#DEFINE BOLHAS 					15  

#DEFINE POSIDENTIFICACAO		03
#DEFINE POSDADO					02

Static lPnm330CposBlock		:= ExistBlock("PNM330CPOS")

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ Ponm330	³ Autor ³ Mauricio MR           ³ Data ³ 26/03/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Grafico de Eventos										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ FNC  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³14/04/14³      ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³        ³      ³que nao serao utilizados na P12.		  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Ponm330()  

Local aArea			:= GetArea()
Local aIndexSPU		:= {}
Local aAdvSize		:= MsAdvSize() 

DEFAULT lPnm330CposBlock := ExistBlock("PNM330CPOS")

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³So Executa se o Modo de Acesso dos Arquivos do Ponto Estiverem³
	³OK															   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !ValidArqPon()
		Break
	EndIF
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define Array contendo as Rotinas a executar do programa      ³
	//³ ----------- Elementos contidos por dimensao ------------     ³
	//³ 1. Nome a aparecer no cabecalho                              ³
	//³ 2. Nome da Rotina associada                                  ³
	//³ 3. Usado pela rotina                                         ³
	//³ 4. Tipo de Transa‡„o a ser efetuada                          ³
	//³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	//³    2 - Simplesmente Mostra os Campos                         ³
	//³    3 - Inclui registros no Bancos de Dados                   ³
	//³    4 - Altera o registro corrente                            ³
	//³    5 - Remove o registro corrente do Banco de Dados          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Private aRotina := { 	{ STR0001, 'AxPesqui'	, 0, 1}	 ,;	//'Pesquisar'
							{ STR0003, 'Ponm330Gra'	, 0, 3} } 	//'Grafico'


	Private bFiltraBrw	:= { || NIL }
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define o cabecalho da tela de atualizacoes                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Private cCadastro := OemtoAnsi(STR0004) //'Evolucao de Eventos Apontados'

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	cFiltraRh 	:= ChkRh( FunName() , "SPU" , "1" )
	bFiltraBrw 	:= {|| FilBrowse( "SPU" , @aIndexSPU , @cFiltraRH ) }
	Eval(bFiltraBrw)
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Endereca a funcao de BROWSE                                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	dbSelectArea('SPU')
	dbGoTop()
	mBrowse( aAdvSize[7] , 0 , aAdvSize[6] , aAdvSize[5] , 'SPU' )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	EndFilBrw("SPU",aIndexSpU)

End Sequence

RestArea( aArea )

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ponm330Gra³ Autor ³ Mauricio MR			³ Data ³ 26/06/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Rotina Principal do Grafico.						          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Ponm330Gra()						                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = N£mero do registro                                 ³±±
±±³          ³ ExpN2 = N£mero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Ponm330                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Ponm330Gra(cAlias, nReg, nOpcX)

Local aSvKeys		:= GetKeys()   
Local cCodGraf 	:= SPU->PU_CODIGO
Local cTitulo	 := SPU->PU_TITULO
Local cTituloX	:= SPU->PU_TITX
Local cTituloY	:= SPU->PU_TITY
Local cTipo		:= SPU->PU_TIPO
Local cArqDados := SPU->PU_ALIAS
Local cCampo	:= SPU->PU_CAMPO
Local cKeyAgrup := SPU->PU_CHAVE 			//-- Chave para Agrupamento
Local aDados	:= {}
Local aEstrutura:= {POSIDENTIFICACAO,POSDADO}
Local aHeaderTab:= {}
Local aColsTab	:= {}
Local aLegenda	:= {}
Local aSerie	:= {}
Local aTabela	:= {} 
Local aPosObj	:= { 360, 1300, 2100 }
Local aPosGrh	:= { 360, 2100, 1700 }
Local aSays 	:= {}
Local aButtons	:= {}
Local nOpca		:= 0 
Local oDlgGraph    

Private oGraphic, nSerie
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica se deve Mostrar Calculo de Tempo nas BarGauge			 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Private lBarG1ShowTm := ( SuperGetMv("MV_PNSWTG1",NIL,"N") == "S" )
Private lBarG2ShowTm := ( SuperGetMv("MV_PNSWTG2",NIL,"S") == "S" )      

AADD(aSays,OemToAnsi(STR0005) )  //"O Grafico Evolucao de Eventos Apontados mostra a ocorrencia"
AADD(aSays,OemToAnsi(STR0006) )  //"de eventos apontados durante um periodo de tempo."

AADD(aButtons, { 5,.T.,{|| Pergunte('PNM330',.T.) } } )
AADD(aButtons, { 1,.T.,{|o| nOpca := 1,FechaBatch()}} )
AADD(aButtons, { 2,.T.,{|o| nOpca := 0,FechaBatch()}} )
	
FormBatch( cCadastro, aSays, aButtons )

If nOpca == 1
    Proc2BarGauge( { |lEnd|Ponm330Ger(cCodGraf,@aDados,@aLegenda,@aSerie,@aTabela, cTitulo, cArqDados, cCampo, cKeyAgrup, @aHeaderTab, @aColsTab) },OemtoAnsi(STR0004),OemtoAnsi(STR0010),OemtoAnsi(STR0010),.T.     ,lBarG1ShowTm,lBarG2ShowTm) //"Aguarde..."###"Montando tela de Registro Coletivo de Faixas de Horarios"
	If Len(aDados) > 0
    	Processa({|lEnd|PonGrfBar(@oDlgGraph,Val(cTipo), aDados, aEstrutura, aLegenda,aSerie,STR0008, cTitulo,cTituloX,cTituloY,aTabela,aPosObj, aPosGrh, aHeaderTab, aColsTab,{FLEXAS,GANTT,BOLHAS}) },STR0010+STR0018)//"Aguarde...'+'Gerando Grafico ...
	Else
		AVISO(STR0027,STR0028,{"Ok"})	//"Atencao"###"Nao Foram Encontrados Lancamentos Conforme Parametros Informados."
	EndIf

EndIf                     

RestKeys( aSvKeys , .T. ) 

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Ponm330Ger³ Autor ³ Mauricio MR           ³ Data ³ 26/06/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Gera Dados para Grafico.							          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Ponm330Ger()						                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Ver Abaixo				                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Ponm330                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Ponm330Ger(	cCodGraf	,;	//01 - Codigo do Grafico
							aDados		,;	//02 - Array com os Dados do Grafico
							aLegenda	,;	//03 - Array para Legenda
							aSerie		,;	//04 - Array com as Series do Grafico
							aTabela		,;	//05 - Array com a tabela
							cTitulo		,;	//06 - Titulo do Codigo
							cAliasDados	,;	//07 - Alias do Grafico
							cCampo		,;	//08 - Campo do Alias para o Grafico
							cKeyAgrup	,;	//09 - Chave para Agrupamento do Grafico 
							aHeaderTab	,;	//10 - Cabec para Dados do Grafico
							aColsTab	;	//11 - Detalhe de Dados do Grafico
						  )

Local aAbonosPer	:= {}
Local achave		:= {}
Local aDescChave	:= {}
Local aEventos		:= {} 
Local aTotais		:= {}
Local cAcessaSRA 	:= &("{ || " + ChkRH("PONM330","SRA","2") + "}")   
Local cChave		:= ""
Local cEventos		:= ""
Local cMat			:= ""

Local cFormatado	:= ""
Local cConteudo		:= ""
Local lExisteDados	:= .F. 
Local lRet			:= .T. 
Local lQueryOpened	:= .F.   
Local nI			:= 0.00
Local nTamChave		:= 0.00  

//-- Variaveis para tratamento de Barra Progressiva 
Local aAreaSRA	 	:= SRA->( GetArea() )
Local aInfo			:= {}
Local nRecsBarG		:= 0.00
Local cMsgBarG1		:= ""
Local nIncPercG1	:= 0.00
Local nIncPercG2	:= 0.00  
Local nX			:= 0
Local nY			:= 0

//-- Variaveis para Exibicao de mensagens sobre o processamento
Local cTimeIni	 	:= Time()  
Local cLastFil		:= "__cLastFil__"
Local nLastRec		:= 0.00  
Local cQuery	 := ""
Local cSP_Query	 := ""
Local aStruSRA	 := {}
Local aCposSRA	 := {}  
Local aTempSRA	 := SRA->( dbStruct() )
Local nLenStruSRA:= 0.00
Local uRet

Local cChaveFil		:= ""
Local cChaveMat		:= ""
Local cNomeMat		:= ""
Local lTemFilMat  	:= .F.
Local nFilIni		:= 0
Local nFilFim		:= 0
Local nMatIni		:= 0
Local nMatFim		:= 0

Private nOrdem   	:= 0
Private nCodigos 	:= 0
Private cFilDe   	:= ''
Private cFilAte  	:= ''
Private cCCDe    	:= ''
Private cCCAte   	:= ''
Private cMatDe   	:= ''
Private cMatAte  	:= ''
Private cNome		:= ""
Private cSit	 	:= ''
Private cCat	 	:= '' 
Private dDataIni 	:= cTOD('')
Private dDataFim 	:= cTOD('')  
Private lPerCorrido 	:= .T.
Private lTrataApo 	:= .T.
Private NomDe	 	:= ''
Private NomAte	 	:= ''
Private TurDe	 	:= ''
Private TurAte	 	:= ''

Private aCabecFile	:= {} 
Private aPeriodos  	:= {}
Private dPerIni  	:= Ctod("//")
Private dPerFim  	:= Ctod("//")
Private dIniCale   	:= Ctod("//")	//-- Data Inicial a considerar para o Calendario
Private dFimCale   	:= Ctod("//")	//-- Data Final a considerar para o calendario
Private dIniPonMes 	:= Ctod("//")	//-- Data Inicial do Periodo em Aberto 
Private dFimPonMes 	:= Ctod("//")	//-- Data Final do Periodo em Aberto 
Private lImpAcum   	:= .F.
Private lAbortPrint	:= .F.

Pergunte('PNM330',.F.)
 
nOrdem   := 1
cFilDe	 := mv_par01
cFilAte  := mv_par02
cCCDe    := mv_par03
cCCAte   := mv_par04
cTurDe	 := mv_par05		
cTurAte	 := mv_par06		
cMatDe   := mv_par07
cMatAte  := mv_par08
cNomDe	 := mv_par09		
cNomAte	 := mv_par10 
cRegDe 	 := mv_par11 
cRegAte	 := mv_par12 		
cSit	 := mv_par13		
cCat	 := mv_par14		
dDataIni := mv_par15
dDataFim := mv_par16  
lPerCorrido := If(mv_par17 ==1, .T., .F.)  //Tipo de Periodo 1- Corrido 2 - Apontamento
lTrataApo	:= If(mv_par18 ==1, .T., .F.)  //Trata Apontamentos como no Espelho do Ponto

//-- Obtem Cabec do Alias para Identificacao da Chave de Agrupamento                                                                  
AADD( aCabecFile, GdMontaHeader( NIL , NIL , NIL , cAliasDados , NIL , NIL,.T. ) )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega os Eventos			                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
fGetEventos(xFilial('SPX'),xFilial('SPV')	, cCodGraf, cAliasDados,  @aEventos, @cEventos)

//-- Bloco para Obter o Acumulado Correspondente
bAliasAcum:={|cAliasDados| If (cAliasDados == "SPB"				,; 
				    				cAliasDados:= 'SPL'			,;
				    				If(cAliasDados =='SPC' 		,;
				   		  					cAliasDados:= "SPH" ,;
				   		  					cAliasDados			;
				   		  			  )							;
				   		  		)								;
			 }	   		  			  
				   		  					


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Procura primeiro funcionario                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DbSelectArea('SRA')            


/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Verifica o Tipo de Periodo. Se corrido as datas iguala as da- ³
³tas para apontamento.										   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
dPerini:= dDataIni
dPerFim:= dDataFim

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Como a Cada Periodo Lido reinicializamos as Datas Inicial e Fi³
³nal preservamos-as nas variaveis: dCaleIni e dCaleFim.		   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
dIniCale   := dPerIni   //-- Data Inicial a considerar para o Calendario
dFimCale   := dPerFim   //-- Data Final a considerar para o calendario

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Atualiza a Mensagem para a IncProcG1() (Cadastro de Empresas)³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CREATE SCOPE aInfo FOR ( M0_CODIGO == cEmpAnt )
BarGauge1Set( ( nRecsBarG := SM0->( ScopeCount( aInfo ) ) ) )

dbSelectArea('SRA')
    
SRA->( dbSetOrder( nOrdem ) )
SRA->( dbGoTop() )
 
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seta apenas os Campos do SRA que serao Utilizados           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nContField	:= Len(aTempSRA)
aAdd( aCposSRA , "RA_FILIAL"	)
aAdd( aCposSRA , "RA_MAT" 		)	
aAdd( aCposSRA , "RA_NOME"		)
aAdd( aCposSRA , "RA_CC"		)
aAdd( aCposSRA , "RA_TNOTRAB"	)
aAdd( aCposSRA , "RA_SEQTURN"	)
aAdd( aCposSRA , "RA_REGRA"  	)
aAdd( aCposSRA , "RA_ADMISSA"  	)
aAdd( aCposSRA , "RA_DEMISSA"  	)
aAdd( aCposSRA , "RA_SITFOLH"  	)
aAdd( aCposSRA , "RA_CATFUNC"  	)
aAdd( aCposSRA , "RA_SITFOLH"  	)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Verifica e Seta os campos a mais incluidos no Mex             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/				
fAdCpoSra(aCposSra)	

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Ponto de Entrada para Campos do Usuario                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF ( lPnm330CposBlock )
	IF ( ValType( uRet := ExecBlock("PNM330CPOS",.F.,.F.,aCposSRA) ) == "A" )
		IF Len( uRet ) >= Len( aCposSRA )
			aCposSRA := aClone(uRet)
			uRet	 := NIL
		EndIF
	EndIF
EndIF		

For nX := 1 To nContField
	IF aScan( aCposSRA , { |x| x == AllTrim( aTempSRA[ nX , 1 ] ) } ) > 0.00
		aAdd( aStruSRA , aClone( aTempSRA[ nX ] ) )
	EndIF
Next nX 

aCposSRA	:=  NIL
nLenStruSRA	:= Len( aStruSRA )
cQuery := "SELECT "
For nX := 1 To nLenStruSRA
	cQuery += aStruSRA[ nX , 1 ] + ", "
Next nX
cQuery := SubStr( cQuery , 1 , Len( cQuery ) - 2 )
cQuery += "FROM "+RetSqlName("SRA")+" SRA "
cQuery += "WHERE ( SRA.RA_DEMISSA='"+Space(Len(Dtos(dPerIni)))+"' OR "
cQuery += "SRA.RA_DEMISSA>='"+Dtos(dPerIni)+"' ) AND "
cQuery += "SRA.RA_ADMISSA<='"+Dtos(dPerFim)+"' AND "
cQuery += "SRA.RA_FILIAL>='"+cFilDe+"' AND "
cQuery += "SRA.RA_FILIAL<='"+cFilAte+"' AND "
cQuery += "SRA.RA_CC>='"+cCCDe+"' AND "
cQuery += "SRA.RA_CC<='"+cCCAte+"' AND "
cQuery += "SRA.RA_MAT>='"+cMatDe+"' AND "
cQuery += "SRA.RA_MAT<='"+cMatAte+"' AND "
cQuery += "SRA.RA_REGRA>='"+cRegDe+"' AND "
cQuery += "SRA.RA_REGRA<='"+cRegAte+"' AND "
cQuery += "SRA.RA_TNOTRAB>='"+cTurDe+"' AND "
cQuery += "SRA.RA_TNOTRAB<='"+cTurAte+"' AND "
cQuery += "SRA.D_E_L_E_T_=' ' "
cQuery += "ORDER BY "+SqlOrder( SRA->( IndexKey() ) )
cQuery := ChangeQuery(cQuery)
( dbSelectArea("SRA") , dbCloseArea() ) //Fecha o SRA para uso da Query
IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"SRA",.T.,.T.) )
	For nX := 1 To nLenStruSRA
		IF ( aStruSRA[nX,2] <> "C" )
		   	TcSetField("SRA",aStruSRA[nX,1],aStruSRA[nX,2],aStruSRA[nX,3],aStruSRA[nX,4])
		EndIF
	Next nX       
	
  	  cQuery := "SELECT COUNT(*) NLASTREC "
	  cQuery += "FROM "+RetSqlName("SRA")+" SRA "
	  cQuery += " WHERE "
	  cQuery += "SRA.RA_FILIAL>='"+cFilDe+"'"
	  cQuery += " AND " 
	  cQuery += "SRA.RA_FILIAL<='"+cFilAte+"'"
	  cQuery += " AND " 
	  cQuery += "SRA.RA_TNOTRAB>='"+cTurDe+"'" 
	  cQuery += " AND " 
	  cQuery += "SRA.RA_TNOTRAB<='"+cTurAte+"'"
	  cQuery += " AND " 
	  cQuery += "SRA.RA_MAT>='"+cMatDe+"'"
	  cQuery += " AND " 
	  cQuery += "SRA.RA_MAT<='"+cMatAte+"'"
	  cQuery += " AND " 
	  cQuery += "SRA.RA_NOME>='"+cNomDe+"'" 
	  cQuery += " AND " 
	  cQuery += "SRA.RA_NOME<='"+cNomAte+"'"
	  cQuery += " AND "  
	  cQuery += "SRA.RA_CC>='"+cCCDe+"'"
	  cQuery += " AND " 
	  cQuery += "SRA.RA_CC<='"+cCCAte+"'"
	  cQuery += " AND "
	  cQuery += "SRA.D_E_L_E_T_=' ' "
	  cQuery := ChangeQuery(cQuery)
	  IF ( MsOpenDbf(.T.,"TOPCONN",TcGenQry(,,cQuery),"__QRYCOUNT",.T.,.T.) )
	   	  nLastRec := __QRYCOUNT->NLASTREC
	   	  __QRYCOUNT->( dbCloseArea() )
	  Else
	   	  MsAguarde( { || SRA->( dbEval( { || ++nLastRec } ) ) } , STR0010 + STR0011 )	//'Aguarde...'###'Selecionando Funcionarios'
	   	  SRA->( dbGotop() )
	  EndIF
Endif

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se nao abriu a Query										  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If (!lQueryOpened)
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura Arquivo Padrao e Ordem                             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ChkFile( "SRA" )
	SRA->( dbSetOrder( nOrdem ) )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica o Total de Registros a Serem Processados            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nLastRec := SRA->( RecCount() )
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Procura e posiciona no primeiro funcion rio.                ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	SRA->( MsSeek( cFilDe+ cMatDe , .T. ) )
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicializa a Mensagem para a IncProcG2() ( Funcionarios )	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IncProcG2( OemToAnsi( STR0015 ) , .F. )	 //'Processando...'

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicia regua de processamento.                               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
BarGauge2Set( nLastRec )


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Looping no Arquivo de Funcion rios (SRA)                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
While SRA->( !Eof() .and. RA_FILIAL <= cFilAte)
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Aborta o Calculo, caso seja pressionado Alt + B   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lAbortPrint
		Break
	Endif
	
	 //-- Verifica a quebra de Filial e atualiza o Gauge de Filial
	IF !( cLastFil == SRA->RA_FILIAL ) 
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Atualiza o Filial Anterior								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cLastFil := SRA->RA_FILIAL  
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Alimenta as variaveis com o conteudo dos MV_'S correspondetes³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/		
		lMvAbosEve	:= ( Upper(AllTrim(SuperGetMv("MV_ABOSEVE",NIL,"N",cLastFil))) == "S" )	//--Verifica se Deduz as horas abonadas das horas do evento Sem a necessidade de informa o Codigo do Evento no motivo de abono que abona horas
		lMvSubAbAp	:= ( Upper(AllTrim(SuperGetMv("MV_SUBABAP",NIL,"N",cLastFil))) == "S" )	//--Verifica se Quando Abono nao Abonar Horas e Possuir codigo de Evento, se devera Gera-lo em outro evento e abater suas horas das Horas Calculadas
	     
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Obtem Periodo de Apontamento								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		 If ! lPerCorrido
		    /*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega periodo de Apontamento Aberto						  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !CheckPonMes( @dPerIni , @dPerFim , .F. , .T. , .F. , cLastFil )
				Exit
			EndIF
		
	    	/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem datas do Periodo em Aberto							  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			GetPonMesDat( @dIniPonMes , @dFimPonMes , cLastFil )    
		 Endif
		 
		/*	
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega as Filiais dos Arquivoss                             ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cFilSP6 	:= fFilFunc("SP6")
		cFilSP9 	:= fFilFunc("SP9")   
		cFilAlias	:= fFilFunc(cAliasDados)
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Obtem o % de Incremento da 2a. BarGauge					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nIncPercG1 := SuperGetMv( "MV_PONINC1" , NIL , 5 , cLastFil )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Obtem o % de Incremento da 2a. BarGauge					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nIncPercG2 := SuperGetMv( "MV_PONINCP" , NIL , 5 , cLastFil )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Incrementa a Barra de Gauge      					     	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/ 
		fInfo( @aInfo , cLastFil )
		//"Filial:"###
		cMsgBarG1 := STR0016 + " " + cLastFil+ " - " + AllTrim( aInfo[3] )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inicializa Mensagem na 1a BarGauge                           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IncProcG1( cMsgBarG1 , .F.  )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Incrementa a Barra de Gauge referente a Filial				   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IncPrcG1Time( cMsgBarG1 , nRecsBarG , cTimeIni , .F. , 1 , nIncPercG1 )      
	Endif
    
    /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Incrementa a Regua de Processamento                          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IncPrcG2Time( OemToAnsi( STR0017 ) , nLastRec , cTimeIni , .T. , 2 , nIncPercG2 )	//"Funcionarios: "

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Consiste controle de acessos e filiais validas				 |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If !(SRA->RA_FILIAL $ fValidFil()) .Or. !Eval(cAcessaSRA)
       SRA->(dbSkip())
       Loop
    EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Consiste filtro do intervalo De / Ate.                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If  (!lQueryOpened)
   		If (SRA->RA_Filial	 	< cFilDe		) .Or. (SRA->RA_Filial 		> cFilAte	) .Or. ;
			(SRA->RA_NOME 		< cNomDe		) .Or. (SRA->RA_NOME 		> cNomAte	) .Or. ;
			(SRA->RA_Regra 		< cRegDe		) .Or. (SRA->RA_Regra 		> cRegAte	) .Or. ;
			(SRA->RA_Mat 		< cMatDe		) .Or. (SRA->RA_Mat 		> cMatAte	) .Or. ;
			(SRA->RA_CC 		< cCCDe			) .Or. (SRA->RA_CC 			> cCCAte	) .Or. ;
			(SRA->RA_TNOTRAB	< cTurDe		) .Or. (SRA->RA_TNOTRAB 	> cTurAte	) 

			SRA->(dbSkip())
			Loop

		Endif 

		//-- Desconsidera Funcionarios Demitidos  anteriormente ao periodo de apontamento corrente
		If ( !Empty(SRA->RA_DEMISSA) .AND. DTOS(SRA->RA_DEMISSA) < DTOS(dPerIni) )
			SRA->(dbSkip())
			Loop
		Endif 	
	EndIf	
       	
    //-- Consiste Categoria e Situcao Selecionadas
    If  SRA->(!(RA_SITFOLH $ cSit)  .Or. !(RA_CATFUNC $ cCat) )
		SRA->(dbSkip())
		Loop
    Endif
	   
	cMat	:= SRA->RA_MAT   
	cNome	:= SUBSTR(SRA->RA_NOME,1,20)
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Retorna Periodos de Apontamentos Selecionados				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aPeriodos:={}
	If ! Monta_per( dIniCale , dFimCale , cLastFil , SRA->RA_MAT , dPerIni , dPerFim,lPerCorrido, @aPeriodos )
		Help( "" , 1 , "SPONOTPERC" )
	    lRet:= .F.
	    Exit
	Endif	
   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Corre Todos os Periodos 									  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	naPeriodos := Len( aPeriodos )   

	
	For nX := 1 To naPeriodos

   		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Reinicializa as Datas Inicial e Final a cada Periodo Lido.	  ³
		³Os Valores de dPerIni e dPerFim foram preservados nas   varia³
		³veis: dCaleIni e dCaleFim.									  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
        dPerIni		:= aPeriodos[ nX , 1 ]
        dPerFim		:= aPeriodos[ nX , 2 ] 

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Reinicializa os Arrays aToais e aAbonados					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		( aAbonados := {} )  
		lExisteDados:= .F.
	   
     
         /*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega os Abonos Conforme Periodo       					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		fAbonosPer( @aAbonosPer , dPerIni , dPerFim , cLastFil , SRA->RA_MAT )
        
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Obtem os Dados do Arquivos do Mes/Acumulados Correspondentes ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
   		If lPerCorrido                                                                         
            lImpAcum:= .F.
   		    For nI:= 1 TO 2

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Prepara Chave de Agrupamento                                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				cChave:=fPrepChave(cAliasDados, cKeyAgrup)                                 
		 	
				If fGetDados(cEventos, aEventos, @aTotais , @aAbonados , aAbonosPer, lMvAbosEve, lMvSubAbAp, cFilAlias, cMat, dPerIni, dPerFim, nX, cAliasDados, cCampo, lTrataApo, cChave ) 	    		
                   lExisteDados:=.T.
				   Exit
				Else
				   
				   //-- Se nao encontrou procura em acumulados
				   If cAliasDados == 'SPI'
				   	  Exit
				   Endif                                
				   
				   //-- Obtem o Acumulado Correspondente
				   Eval(bAliasAcum,cAliasDados)		  
				   
				Endif
			Next nI	   	  			   	
   		Else             
   		
	   		/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se a informacao esta em acumulados				  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If (lImpAcum := ( dPerFim < dIniPonMes ) )
			   //-- Obtem o Acumulado Correspondente
			   Eval(bAliasAcum,cAliasDados)		  
		    Endif
            
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Prepara Chave de Agrupamento                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cChave:=fPrepChave(cAliasDados, cKeyAgrup)
  			
			 /*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Carrega os Totais de Horas e Abonos.						  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/ 

			If fGetDados(cEventos, aEventos, @aTotais , @aAbonados , aAbonosPer, lMvAbosEve, lMvSubAbAp, cFilAlias, cMat, dPerIni, dPerFim, nX, cAliasDados, cCampo, lTrataApo, cChave) 	
			   lExisteDados:=.T.
            endif
        Endif 
	Next nX
	
	//-- Obtem Proximo Funcionario
	SRA->( dbSkip() )
	
End While

If (lQueryOpened)
	( dbSelectArea( "SRA" ) , dbCloseArea() , ChkFile( "SRA" ) ) //Restaura o SRA Padrao
Endif	

RestArea( aAreaSRA ) 

If lRet
	aDados:=aClone(aTotais)
	
	If !Empty(aDados)  
		aSort(aDados,,,{|x,y| x[4] < y[4] } )
		For nY:=1 To Len(aEventos)
			AADD(aLegenda,{aEventos[nY,1], aEventos[nY,1]+'-'+aEventos[nY,2]} )
			AADD(aSerie,aEventos[nY,1])
		Next nY	                                  
		//-- Cria array de formatacao dos campos chaves
		fPrepChave(cAliasDados, cKeyAgrup, @aDescChave, @lTemFilMat, @nFilIni, @nFilFim, @nMatIni, @nMatFim)       		

		aChave:={STR0012} 			//-- 	"Periodo"   
		AADD(aChave,	STR0014	) 	//-- 	"Descricao" 
		AADD(aChave, 	STR0013	)	//--	"Quantidade"
		
	
		
		//--Cria Cabecalho (1a Linha) da Tabela
		AADD(aTabela, aClone(aChave))

		//-- Corre Todo os Dados para montagem da Tabela Consulta de Amostra
		nLenaChave:= Len(aDescChave)
		//--Obtem o Tamanho da Chave
		aEval(aDescChave, {|aCampo| nTamChave+=aCampo[5] } )
		cImpAnterior:=''
		For nY:=1 To Len(aDados) 
		    
		    
		    cChave		:= Substr( aDados[nY,5], 3, nTamChave)  
		    
	        cFormatado	:= ALLTRIM(aDados[nY,5])+' - '
	                        
			//--*** Campos da Chave
			//-- Corre todos os campos e extrai da string chave
			For nX:=1 To  nLenaChave
			   
			   cConteudo   := Eval(aDescChave[nX,4],cChave) 
			   cConteudo   := Eval(aDescChave[nX,3],cConteudo)
			   If lTemFilMat .And. aDescChave[nX,1] == "MAT"
					cChaveFil := SubStr( cChave, nFilIni, nFilFim )
					cChaveMat := SubStr( cChave, nMatIni, nMatFim )
					cNomeMat  := SubStr( fDesc( "SRA", cChaveMat, "RA_NOME", , cChaveFil, 1 ), 1, 20 )
			   EndIf
			   cFormatado  += aDescChave[nX,2] + ': '+ cConteudo + ' '+ if( !Empty(aDescChave[nX,6]),(' '+ aDescChave[nX,6]),cNomeMat)
			   cNomeMat	   := ""
			   			
			Next nX
			

			If cImpAnterior <> cFormatado
			   cImpanterior:=cFormatado     
			   //-- *** Periodo
		       AADD(aTabela,{ '['+Substr( aDados[nY,5], 1 , 2) +']'+Dtoc(aDados[nY,6])+' - '+Dtoc(aDados[nY,7])} )          
   			   AADD( aTabela[ Len(aTabela)], cFormatado 	)
			   AADD( aTabela[ Len(aTabela)], ' ' 			) 			   
			   
 			   AADD(aColsTab, aClone(aTabela[ Len(aTabela)]))
   			   
   			   AADD( aTabela, {" "} 	) 
			Else
			   //-- *** Periodo
			   AADD(aTabela,{" " } )          				
			Endif   

			cFormatado   := aLegenda[ Ascan(aLegenda,{|x| x[1] == aDados[nY,1]}),2] 
   			AADD( aTabela[Len(aTabela)], cFormatado		) 
   			
   			//-- *** Quantidade
			AADD(aTabela[ Len(aTabela)],transform(aDados[nY,2], '999999.99' ))
			AADD(aColsTab, aClone(aTabela[ Len(aTabela)]))
		Next nY	
		
		//--Cria Cabecalho do GetDados a Partir da 1a e 2a.linha da Tabela
		nX			:=0
		aHeaderTab	:={}
		Aeval(aTabela[1],{|x|++nX,fMontaCabec(@aHeaderTab,x,('Campo'+STRZERO(nX,2)),'@!','C',Len(aTabela[2,nX]) ) })
	Endif                

Endif
		
Return Nil



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fGetDados ³ Autor ³ EQUIPE DE RH          ³ Data ³ 08/08/96 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Obtem os lancamentos do alias especificado.                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fGetDados()                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONM330	                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fGetDados( 	cEventos	,; //01 - Codigos de Eventos 
							aEventos	,; //02 - Array com os Eventos
 							aTotal	 	,; //03 - Array com os Valores Totalzados
 		 					aAbonados 	,; //04 - Array de Abonados
   							aAbonosPer	,; //05 - Array com os Periodos
							lMvAbosEve	,; //06 - Parametro para Abonar Eventos idem 609
							lMvSubAbAp	,; //07 - Parametro para Subtrair Abonos e locar em Outro Evento
							cFilAlias	,; //08 - Filial do alias
							cMat		,; //09 - Matricula
							dDataIni	,; //10 - Data inicial
							dDataFim	,; //11 - Data Final
							nPeriodo	,; //12 - Numero do Periodo Corrente
							cAliasDados	,; //13 - Alias do Arquivo
							cCampo		,; //14 - Campo a Considerar para totalizacao
							lTrataApo	,; //15 - Realiza os tratamentos conforme parametros passados
							cKeyAgrup	; //16 - Chave da ordem de agrupamento
            			) 
  	                       

Local bAcessa		:= &("{ || " + ChkRH("PONM330",cAliasDados,"2") + "}")
Local lRet			:= .F.
Local cPeriodo		:= STRZERO(nPeriodo,2)



if ( cAliasDados $ 'SPB' )
	//Totaliza Codigos a partir do Resultado	          

	lRet:=fTotalSPB(;
			    cEventos		,;
			    aEventos		,;
				@aTotal			,;
				cFilAlias		,;
				cMat			,;  
				dDataIni		,;
				dDataFim		,; 
				cPeriodo		,;
				bAcessa			,;
				cAliasDados		,;
				cCampo			,;
				cKeyAgrup		; 
              )

ElseIf (cAliasDados $ 'SPC') 
	//Totaliza Codigos a partir do Movimento
	lRet:=fTotaliza(;
			    cEventos		,;
   			    aEventos		,;
				@aTotal			,;
				cFilAlias		,;
				cMat			,;    
				dDataIni		,;
				dDataFim		,; 
				cPeriodo		,;
				bAcessa			,;
				cAliasDados		,;
				aAbonosPer		,;
				lMvAbosEve		,;
				lMvSubAbAp		,;
				lTrataApo		,;
				cCampo			,;
				cKeyAgrup		; 
		 	)
ElseIf (cAliasDados $ 'SPI') 
	//Totaliza Codigos a partir do Movimento 
	lRet:=fTotalSPI(;
			    cEventos		,;
			    aEventos		,;
				@aTotal			,;
				cFilAlias		,;
				cMat			,; 
				dDataIni		,;
				dDataFim		,;
				cPeriodo		,;
				bAcessa			,;
				cAliasDados		,;
				cCampo			,;
				cKeyAgrup		; 
		 	)
Endif



Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fTotaliza ³ Autor ³ Mauricio MR           ³ Data ³ 27/05/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Totalizar as Verbas do SPC (Apontamentos) /SPH (Acumulado) ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fTotaliza( ;
						    cEventos	,;
					    	aEventos	,;
							aTotais		,;
							cFil		,;
							cMat		,; 
							dDataIni	,;
							dDataFim	,;
							cPeriodo	,;
							bAcessa 	,;
							cAlias		,;
							aAbonosPer	,;
							lMvAbosEve	,;
							lMvSubAbAp 	,;
							lTrataApo	,;
							cCampo		,;
							cKeyAgrup	;	
						 )
                           
Local aArea			:= GetArea() 
Local aAreaAlias    :=(cAlias)->(GetArea())
Local aJustifica	:= {} 
Local bKeyAgrup		:= {||}
Local cCodigo		:= ""
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cEveABO		:= ""
Local cPD			:= ""
Local cPDI			:= ""
Local cCC			:= ""
Local cTPMARCA		:= ""
Local lAbHoras		:= .T.  
Local lRet			:= .F. 
Local lQueryOpened	:= .F.   
Local nQuaSpc		:= 0.00
Local nX			:= 0.00 
Local nEfetAbono	:= 0.00
Local nQUANTC		:= 0.00
Local nQuanti		:= 0.00
Local nQTABONO		:= 0.00
Local nQuant		:= 0.00    

//-- Variaveis para Tratamento de Query  
Local cAliasQuery	:= cAlias                                             
DEFAULT lTrataAPo	:= .T.  

(cAlias)->(DbSetOrder(2))      
//-- Bloco para recuperacao dos Campos do Alias
bKeyAgrup:= &('{||'+cAliasQuery+'->('+cKeyAgrup+')}')
 
aSp_Fields := ( cAlias )->( dbStruct() )
nSp_Fields := Len( aSp_Fields )  

cAliasQuery:= '__SP_'
cQuery := "SELECT "
For nX := 1 To nSp_Fields
	cQuery += aSp_Fields[ nX , 01 ] + ", "
Next nX        
cQuery += "R_E_C_N_O_ RECNO "
cQuery += " FROM " + RetSqlName( cAlias ) + " " + cAlias + " "
cQuery += "WHERE " 
cQuery += cAlias + "." + cPrefix + "FILIAL='" 	+ cFIL 	+ "' AND "
cQuery += cAlias + "." + cPrefix + "MAT='"		+ cMat	+ "' AND "  
cQuery += cAlias + "." + cPrefix + "DATA>='"	+Dtos(dDataIni)+"' AND "
cQuery += cAlias + "." + cPrefix + "DATA<='"	+Dtos(dDataFim)+"'"
cQuery += " AND " 		+ cAlias + "." 			+"D_E_L_E_T_=' ' "
cQuery += "ORDER BY " 	+ SqlOrder( (cAlias)->( IndexKey() ) )

IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.T.,.T.) )
	For nX := 1 To nSp_Fields
		IF !( aSp_Fields[ nX , 02 ] == "C" )
			TcSetField(cAliasQuery,aSp_Fields[nX,01],aSp_Fields[nX,02],aSp_Fields[nX,03],aSp_Fields[nX,04])
		EndIF
	Next nX  
	//-- Cria Bloco para Recuperacao dos Campos da Query
	bKeyAgrup:= &('{||'+cAliasQuery+'->('+cKeyAgrup+')}')
Endif
	

IF !( lQueryOpened )      
    cAliasQuery	:= cAlias		
EndIF

IF !( lQueryOpened )
	(cAliasQuery)->( dbSeek( cFil + cMat + Dtos(dDataIni)  , .T. ) )
EndIF

//-- Obtem os lancamentos do funcionario para o periodo 
While (cAliasQuery)->( !Eof() .and. cFil+cMat == &(cPrefix+"FILIAL")+&(cPrefix+"MAT") )
        
	dData	:= (cAliasQuery)->(&(cPrefix+"DATA"))  	//-- Data do Apontamento
	cPD		:= (cAliasQuery)->(&(cPrefix+"PD"))    	//-- Codigo do Evento
	cPDI	:= (cAliasQuery)->(&(cPrefix+"PDI"))     	//-- Codigo do Evento Informado
	nQUANTC	:= (cAliasQuery)->(&(cPrefix+"QUANTC"))  	//-- Quantidade Calculada pelo Apontamento
	nQuanti	:= (cAliasQuery)->(&(cPrefix+"QUANTI"))  	//-- Quantidade Informada
	nQTABONO:= (cAliasQuery)->(&(cPrefix+"QTABONO")) 	//-- Quantidade Abonada
	cTPMARCA:= (cAliasQuery)->(&(cPrefix+"TPMARCA")) 	//-- Tipo da Marcacao
	cCC		:= (cAliasQuery)->(&(cPrefix+"CC")) 		//-- Centro de Custos
	
	nQuant	:= (cAliasQuery)->(&(cCampo))      //-- Campo para Totalizacao

	If (dData < dDataIni) .or. (dData > dDataFim )
		(cAliasQuery)->( dbSkip() )
		Loop
	Endif
	
	If (cAliasQuery)->( !Eval(bAcessa) )
		(cAliasQuery)->( dbSkip() )
		Loop
	EndIf
	
	//-- Obtem o Codigo do Evento  (Informado ou Calculado)
    cCodigo:= If(!Empty(cPDI) , cPDI, cPD ) 
        
    If  !(cPD$cEventos)
		(cAliasQuery)->( dbSkip() )
		Loop
	EndIf

	 /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Obtem TODOS os ABONOS do Evento							   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ/*/
    //-- Trata a Qtde de Abonos
    aJustifica 	:= {} //-- Reinicializa aJustifica
    nEfetAbono	:=	0.00
	If nQuanti == 0 .and. fAbonos( dData , cPD , NIL , @aJustifica , cTPMARCA , cCC , aAbonosPer ) > 0
            
            //-- Corre Todos os Abonos
		For nX := 1 To Len(aJustifica)
		    
		   /*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Cria Array Analitico de Abonos com horas Convertidas.		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			//-- Obtem a Quantidade de Horas Abonadas
			nQuaSpc := aJustifica[nX,2] //_QtAbono
			           
			
			
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Trata das Informacoes sobre o Evento Associado ao Motivo corrente ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/ 
			//-- Obtem Evento Associado
			cEveABO := PosSP6( aJustifica[nX,1] , cFil , "P6_EVENTO" , 01 )
			If ( lAbHoras := ( PosSP6( aJustifica[nX,1] , cFil , "P6_ABHORAS" , 01 ) $ " S" ) )
			    //-- Se o motivo abona Horas
				If Empty( cEveABO )
						/*
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³ A T E N C A O: Neste Ponto deveriamos tratar o paramentro MV_ABOSEVE  ³
						³                no entanto, como ja havia a deducao abaixo e caso al-  ³
						³                guem migra-se da versao 609 com o cadastro de motivo   ³
						³                de abonos abonando horas mas sem o codigo, deixariamos ³
						³                de tratar como antes e o cliente argumentaria alteracao³
						³                de conceito.											³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ */
					    //-- Se o motivo  nao possui abono associado
					    //-- Calcula o total de horas a abonar efetivamente
					    nEfetAbono:= __TimeSum(nEfetAbono, aJustifica[nX,2] ) //_QtAbono
				EndIf
				
			Else	
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Se Motivo de Abono Nao Abona Horas e o Codigo do Evento Relaci³
				³onado ao Abono nao Estiver Vazio, Eh como se fosse uma  altera³
				³racao do Codigo de Evento. Ou seja, Vai para os Totais      as³
				³Horas do Abono que serao subtraidas das Horas Calculadas (  Po³
				³deriamos Chamar esta operacao de "Informados via Abono" ).	   ³
				³Para que esse processo seja feito o Parametro MV_SUBABAP  deve³
				³ra ter o Conteudo igual a "S"								   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( ( lMvSubAbAp ) .and. !Empty( cEveABO ) )
				   //-- O total de horas acumulado em nEfetAbono sera deduzido do 
				   //-- total de horas apontadas.
				   nEfetAbono:= __TimeSum(nEfetAbono, aJustifica[nX,2] ) //_QtAbono
				Endif
			EndIf
				
		Next nX 
	Endif
        
	//-- Trata Quantidade Calculada Conforme tratamento do Espelho de Ponto                       
	If lTrataApo .AND. cCampo='QUANTC'
	   nQuant:=If(nQuanti>0, 0, __TimeSub(nQUANTC,nEfetAbono))
	Endif    
	
	If nQuant > 0.00    
	    
	    fTotDado(aEventos, @aTotais, cCodigo, nQuant,bKeyAgrup,cPeriodo,dDataIni,dDataFim )		    

           lRet:=.T.
    Endif
     
	(cAliasQuery)->( dbSkip() )
End While

IF ( lQueryOpened )
	( cAliasQuery )->( dbCloseArea() )
	lQueryOpened := .F.
EndIF
                  
RestArea( aAreaAlias ) 
RestArea( aArea ) 

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fPrepChave³ Autor ³ Mauricio MR           ³ Data ³ 24/07/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Prepara Campos da chave conforme prefixodo alias a que per-³±±
±±³          ³ tencenm.                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fPrepChave(cAliasDados, cChave, aDescChave)	              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONM330	                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/                 
Static Function fPrepChave(cAliasDados, cChave, aDescChave, lTemFilMat, nFilIni, nFilFim, nMatIni, nMatFim)   
Local cComplemento	:= ''
Local cKey			:= ""
Local cPrefAlias	:= ( PrefixoCpo( cAliasDados ) + "_" )
Local nChave		:= Len(cChave)
Local nPosMais		:= 0
Local nTamChaveAnt	:= 0
Local nX			:= 0 

//-- Corre Caracter a Caracter da Chave
For nX:=1 to nChave

    nPosMais:=At('+',cChave)
    nPosMais:=If(Empty(nPosMais),Len(cChave)+1,nPosMais)
    cCampo:= Alltrim(UPPER(Substr(cChave,1,nPosMais-1)))
    cKey+=If(!Empty(cKey),'+','')+cPrefAlias+cCampo 
    
    //-- Se o bloco de titulo foi passado monta-o
    If aDescChave <> Nil   
       If (nElem	:=	Ascan(aCabecFile[1],{|x| Alltrim(UPPER(x[2])) == (cPrefAlias+cCampo) })) > 0
		  
		  //-- Obtem o complemnto da Descricao do Campo
		  cComplemento:= ''
		  
		  AADD(aDescChave,{	cCampo												,; //-- Campo
		  					ALLTRIM(aCabecFile[1,nElem,1])						,; //-- Titulo
		  					&( '{|X|ALLTRIM(TRANSFORM(X,"'	+ aCabecFile[1,nElem,3]+'"))}')	,; //-- Bloco para Recuperacao Conteudo do Campo Formatado
		  				 	&( '{|X|SUBSTR(X,'		+ STRZERO(nTamChaveAnt+1,0) +','+STRZERO(aCabecFile[1,nElem,4])+')}'),;
							aCabecFile[1,nElem,4]								 ,;//-- Tamanho do Campo		  				 	                    
							cComplemento										 ; //-- Complemento 	
		  				  }														 ;
		      )
		      
			If cCampo == 'MAT'
				nMatIni		:= nTamChaveAnt+1
				nMatFim		:= aCabecFile[1,nElem,4]
			EndIf
			nTamChaveAnt	+=aCabecFile[1,nElem,4]
	    ElseIf cCampo == 'FILIAL'
			AADD(aDescChave,{	cCampo												,; //-- Campo
							cCampo													,; //-- Titulo
							&( '{|X|ALLTRIM(TRANSFORM(X,"@!"))}')					,; //-- Bloco para Recuperacao Conteudo do Campo Formatado
							&( '{|X|SUBSTR(X,'		+ STRZERO(nTamChaveAnt+1,0) +','+STRZERO(FwGetTamFilial)+')}'),;
							FwGetTamFilial											,;//-- Tamanho do Campo		  				 	                    
							cComplemento										 	; //-- Complemento 	
							}														 ;
				)
				
			nFilIni			:= nTamChaveAnt+1
			nFilFim			:= FwGetTamFilial
			nTamChaveAnt	+= FwGetTamFilial
	    EndIf

    Endif
    
    If nPosMais > nChave
       Exit
    Endif
    
    cChave:=Substr(cChave,nPosMais+1)
    nChave:=Len(cChave)
    nX:=1

Next nX

If !Empty(aDescChave)
	lTemFilMat := (!Empty(nFilIni) .And. !Empty(nMatIni))
EndIf

Return cKey



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTotDado  ³ Autor ³ Mauricio MR           ³ Data ³ 24/07/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Totaliza Eventos conforme Grupo de Dados a que pertencem   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fTotDado(aEventos, aTotais, cCodigo, nQuant)               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Ver abaixo    		 	                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONM330	                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fTotDado(	aEventos	,;
 							aTotais		,;
  							cCodigo		,;
   							nQuant		,;
   							bKeyAgrup	,;
    						cPeriodo	,; 
    						dDataIni	,;
    						dDataFim	;
    					)
Local nPosGrupo	:= 0
Local nPos		:=	0 
Local cKeyAGrup := ALLTRIM(Eval(bkeyAgrup))
Local lExiste	:= .F.
Local aAuxTotais:= {}

//-- Obtem a Posicao do Grupo
nPosGrupo := aScan(aEventos,{|x| cCodigo $ x[3] })  

//-- Procura em aTotais pelo Acumulado do Grupo Lido
If ( nPos := aScan(aTotais,{|x| x[1] == aEventos[nPosGrupo,1] .AND. x[5] == (cPeriodo+cKeyAgrup)}) ) > 0    
   	aTotais[nPos,2] := __TimeSum(aTotais[nPos,2],nQUANT) 
	aTotais[nPos,3] :=cPeriodo+'/'+cKeyAgrup+'/'+aEventos[nPosGrupo,1]
Else 
   //-- Verificar a Existencia de alguma ocorrencia da chave no periodo
   If !(	lExiste:=( ( nPos := aScan(aTotais,{|x| x[5] == (cPeriodo+cKeyAgrup)}) ) > 0 ))
       //-- Senao existir criaremos todos os grupos para a chave no periodo com qtde zerada
       //-- para que seja exibida as colunas na posicao correta  
       
       aEval(aEventos,{|xGrupo|If( xGrupo[1] <> aEventos[nPosGrupo,1]				,;
       				   				AADD(aAuxTotais									,;
       				   						       {	xGrupo[1]					,;
       										   			0.00						,;
       										   		   	(cPeriodo+'/'+cKeyAgrup+'/'+xGrupo[1])							,;
       										   			(cPeriodo+cKeyAgrup+xGrupo[1]) 	,;
       										   			(cPeriodo+cKeyAgrup)		,;
       										   			dDataIni					,;
       										   			dDataFim					;
       										  		}								; 
       						     		  )									   		,;
       						     Nil)												;
       				 }																;
       		 )
         
   Endif

   //-- Adiciona Grupo ao Acumulados
   aAdd(aTotais,{ aEventos[nPosGrupo,1], nQUANT,cPeriodo+'/'+cKeyAgrup+'/'+aEventos[nPosGrupo,1],(cPeriodo+cKeyAgrup+aEventos[nPosGrupo,1] ), (cPeriodo+cKeyAgrup),dDataIni,dDataFim})
   If !Empty(aAuxTotais)
      aEval(aAuxTotais,{|aElem| AADD(aTotais,aElem)})
   Endif 	
Endif

ReTurn Nil


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fGetEventos ³ Autor ³ EQUIPE DE RH          ³ Data ³ 27/06/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Obtem os lancamentos do alias especificado. 		            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fGetEventos()           	                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Ver abaixo              	                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONM330	       		                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function fGetEventos(cFilSPX,cFilSPV, cCodGraf, cAliasDados, aEventos, cTodosEve)
Local aInfoEventos	:=	{}                           
Local cVarDesc		:=	""
Local cCodigo		:= 	""
Local cGrupo		:= 	""
Local cEventos		:=  ""

//-- Obtem Informacoes da tabela de codigos do alias correspondente
aInfoEventos:= fGetInfoTab(cAliasDados) 

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega Eventos											  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/           
SPX->( dbSeek( cFilSPX+cCodGraf , .T. ) )
While SPX->( !Eof() .and.cFilSPX == PX_FILIAL .and.cCodGraf == PX_CODIGO) 
	
	cGrupo:= SPX->PX_GRUPO
	
	If SPV->( dbSeek( cFilSPV+cCodGraf+cGrupo , .T. ) )
		aAdd(aEventos, {cGrupo,SPX->PX_DESC, '', {}})
	Endif	                                 
	
	cEventos:= ''
	
	While SPV->( !Eof() .and. ( (cFilSPV+cCodGraf+cGrupo) == (PV_FILIAL+PV_CODIGO+PV_GRUPO) ) )
	    cCodigo:= SPV->PV_DADO
		SPV->( fPn320EveDesc( aInfoEventos, cCodigo, 	@cVarDesc ) )
		SPV->( aAdd( aEventos[Len(aEventos),4], {cCodigo,(cCodigo+'-'+cVarDesc ),SUBSTR(ALLTRIM(cVarDesc),1,2)} ) ) 
		cEventos+= (cCodigo+'.')
		SPV->( dbSkip() )
	End While                     
	
	aEventos[ Len( aEventos ), 3 ]:= cEventos 
	
	cTodosEve+=cEventos
	
	SPX->( dbSkip() )
End While
Return .T.


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fTotalSPB ³ Autor ³ EQUIPE DE RH		    ³ Data ³ 05/06/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Totaliza eventos a partir do SPB.                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fTotalSPB()             	                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Ver abaixo              	                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fTotalSPB(	cEventos	,;
							aEventos	,;
							aTotais		,;
							cFil		,;
							cMat		,;
							dDataIni	,;
							dDataFim	,;
							cPeriodo	,;
							bAcessa		,;
							cAlias		,;
							cCampo		,;
							cKeyAgrup	;
						  )
                         
Local aArea			:= GetArea()  
Local bKeyAgrup		:= {||}
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cPd			:= ""
Local dData			:= Ctod('')
Local lRet			:= .F.  
Local lQueryOpened	:= .F.   
Local nCampo		:= 0.00

//-- Variaveis para Tratamento de Query
Local cAliasQuery	:= cAlias                                             
Local nX

//-- Bloco para Recuperacao dos campos do Alias
bKeyAgrup:= &('{||'+cAliasQuery+'->('+cKeyAgrup+')}')

 
aSp_Fields := ( cAlias )->( dbStruct() )
nSp_Fields := Len( aSp_Fields )  

cAliasQuery:= '__SP_'
cQuery := "SELECT "
For nX := 1 To nSp_Fields
	cQuery += aSp_Fields[ nX , 01 ] + ", "
Next nX        
cQuery += "R_E_C_N_O_ RECNO "
cQuery += " FROM " + RetSqlName( cAlias ) + " " + cAlias + " "
cQuery += "WHERE " 
cQuery += cAlias + "." + cPrefix + "FILIAL='" 	+ cFIL 	+ "' AND "
cQuery += cAlias + "." + cPrefix + "MAT='"		+ cMat	+ "' AND "  
cQuery += cAlias + "." + cPrefix + "DATA>='"	+Dtos(dDataIni)+"' AND "
cQuery += cAlias + "." + cPrefix + "DATA<='"	+Dtos(dDataFim)+"'"
cQuery += " AND " 		+ cAlias + "." 			+"D_E_L_E_T_=' ' "
cQuery += "ORDER BY " 	+ SqlOrder( (cAlias)->( IndexKey() ) )

IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.T.,.T.) )
		For nX := 1 To nSp_Fields
			IF !( aSp_Fields[ nX , 02 ] == "C" )
				TcSetField(cAliasQuery,aSp_Fields[nX,01],aSp_Fields[nX,02],aSp_Fields[nX,03],aSp_Fields[nX,04])
			EndIF
		Next nX  
		//-- Cria Bloco para Recuperacao dos Campos da Query
		bKeyAgrup:= &('{||'+cAliasQuery+'->('+cKeyAgrup+')}')
Endif       


If !( lQueryOpened )
    cAliasQuery	:= cAlias		
EndIF

IF !( lQueryOpened )
	(cAliasQuery)->( dbSeek( cFil + cMat + Dtos(dDataIni)  , .T. ) )
EndIF

//-- Obtem os lancamentos do funcionario para o periodo 
While (cAliasQuery)->( !Eof() .and. cFil+cMat == &(cPrefix+"FILIAL")+&(cPrefix+"MAT") )

	dData	:= (cAliasQuery)->(&(cPrefix+"DATA"))  	//-- Data do Apontamento

	If 	(dData < dDataIni) .or. (dData > dDataFim )
		(cAliasQuery)->( dbSkip() )
		Loop
	Endif
                
        cPD		:= (cAliasQuery)->(&(cPrefix+"PD"))    	//-- Codigo do Evento
        nCampo	:= (cAliasQuery)->( &(cCampo) )
        
	If (cAliasQuery)->( !Eval(bAcessa) ) .OR. (!(cPd )$cEventos)
		(cAliasQuery)->( dbSkip() )
		Loop
	EndIf
        

	If !EMPTY(nCampo)
	    
	    fTotDado(aEventos, @aTotais, cPD, nCampo, bKeyAgrup,cPeriodo, dDataIni,dDataFim)		    
				
		lRet:=.T.      
	Endif
	(cAliasQuery)->( dbSkip() )

End While
 
IF ( lQueryOpened )
	( cAliasQuery )->( dbCloseArea() )
	lQueryOpened := .F.
EndIF

RestArea( aArea ) 

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fTotalSPI ³ Autor ³ EQUIPE DE RH		    ³ Data ³ 26/06/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Totaliza eventos a partir do SPI.                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fTotalSPI(cEventos, aEventos, aTotais,cFil,cMat,dDataIni,dDataFim,cPeriodo,bAcessa,cAlias, cCampo, cKeyAgrup)

Local aArea			:= GetArea()      
Local bKeyAgrup 	:= {||}
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cPD			:= ""
Local dData			:= Ctod('')
Local lRet			:= .F.
Local lQueryOpened	:= .F.   
Local nCampo		:= 0.00

//-- Variaveis para Tratamento de Query
Local cAliasQuery	:= cAlias                                             
Local nX

//-- Cria Bloco para Recuperacao dos Campos do Alias
bKeyAgrup:= &('{||'+cAliasQuery+'->('+cKeyAgrup+')}')
 
aSp_Fields := ( cAlias )->( dbStruct() )
nSp_Fields := Len( aSp_Fields )  

cAliasQuery:= '__SP_'
cQuery := "SELECT "
For nX := 1 To nSp_Fields
	cQuery += aSp_Fields[ nX , 01 ] + ", "
Next nX        
cQuery += "R_E_C_N_O_ RECNO "
cQuery += " FROM " + RetSqlName( cAlias ) + " " + cAlias + " "
cQuery += "WHERE " 
cQuery += cAlias + "." + cPrefix + "FILIAL='" 	+ cFIL 	+ "' AND "
cQuery += cAlias + "." + cPrefix + "MAT='"		+ cMat	+ "' AND "  
cQuery += cAlias + "." + cPrefix + "DATA>='"	+Dtos(dDataIni)+"' AND "
cQuery += cAlias + "." + cPrefix + "DATA<='"	+Dtos(dDataFim)+"'"
cQuery += " AND " 		+ cAlias + "." 			+"D_E_L_E_T_=' ' "
cQuery += "ORDER BY " 	+ SqlOrder( (cAlias)->( IndexKey() ) )
IF ( lQueryOpened := MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),cAliasQuery,.T.,.T.) )
		For nX := 1 To nSp_Fields
			IF !( aSp_Fields[ nX , 02 ] == "C" )
				TcSetField(cAliasQuery,aSp_Fields[nX,01],aSp_Fields[nX,02],aSp_Fields[nX,03],aSp_Fields[nX,04])
			EndIF
		Next nX                                               
		//-- Cria Bloco para Recuperacao dos Campos da Query
		bKeyAgrup:= &('{||'+cAliasQuery+'->('+cKeyAgrup+')}')
Endif       
    
If !( lQueryOpened)
    cAliasQuery	:= cAlias		
EndIF

IF !( lQueryOpened )
	(cAliasQuery)->( dbSeek( cFil + cMat + Dtos(dDataIni)  , .T. ) )
EndIF

//-- Obtem os lancamentos do funcionario para o periodo 
While (cAliasQuery)->( !Eof()) .and. (cAliasQuery)->( (cFil+cMat) == (&(cPrefix+"FILIAL")+&(cPrefix+"MAT")) )

	dData	:= (cAliasQuery)->(&(cPrefix+"DATA"))  	//-- Data do Apontamento
	If 	( dData < dDataIni ) .or. ( dData > dDataFim )
		(cAliasQuery)->( dbSkip() )
		Loop
	Endif

	If (cAliasQuery)->( !Eval(bAcessa)  .OR. !( ( &(cPrefix+"PD") ) $ cEventos ))
		(cAliasQuery)->( dbSkip() )
		Loop
	EndIf  
	
	//-- Desconsidera Lancamentos j  baixados
	IF (cAliasQuery)->(&(cPrefix+"STATUS")) == "B"
 			(cAliasQuery)->( dbSkip() )
		Loop
	EndIF
        
       	cPD		:= (cAliasQuery)->(&(cPrefix+"PD"))    	//-- Codigo do Evento
        nCampo	:= (cAliasQuery)->(&(cCampo) )
        If !EMPTY(nCampo)
  		   			
	    fTotDado(aEventos, @aTotais, cPD, nCampo, bKeyAgrup, cPeriodo, dDataIni, dDataFim)		    
	
		lRet:= .T.			  
	Endif

	(cAliasQuery)->( dbSkip() )
End While

IF ( lQueryOpened )
	( cAliasQuery )->( dbCloseArea() )
	lQueryOpened := .F.
EndIF

RestArea( aArea ) 

Return lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Monta_Per³ Autor ³Equipe Advanced RH     ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Cria Array com os Periodos conforme o tipo passado         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Monta_Per(dDataIni,dDataFim,cFil,cMat,dIniAtu,dFimAtu,     ³±±
±±³          ³           lPerCorrido )                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Ver abaixo 				                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/                                                                           

Static Function Monta_Per( dDataIni , dDataFim , cFil , cMat , dIniAtu , dFimAtu, lPerCorrido, aPeriodos )

Local cFilSPO	:= xFilial( "SPO" , cFil )
Local dAdmissa	:= SRA->RA_ADMISSA
Local dPerIni   := Ctod("//")
Local dPerFim   := Ctod("//")
Local dData		:= dDataIni
local lRet		:= .T.

If !lPerCorrido
	SPO->( dbSetOrder( 1 ) )
	SPO->( dbSeek( cFilSPO , .F. ) )
	IF ( Empty(  SPO->PO_DATAINI) .or. Empty( SPO->PO_DATAFIM ) )
			lRet:= .F.				
	Endif       
	
	While SPO->( !Eof() .and. PO_FILIAL == cFilSPO )
	                       
	    dPerIni := SPO->PO_DATAINI
	    dPerFim := SPO->PO_DATAFIM
	
	

		IF !( dPerFim < dDataIni .OR.  dPerIni > dDataFim )
		    //-- Somente Considera Periodos de Apontamentos com Data Final Superior a Data de Admissao
		    IF ( dPerFim >= dAdmissa )
		       aAdd( aPeriodos , { dPerIni , dPerFim , Max( dPerIni , dDataIni ) , Min( dPerFim , dDataFim ) } )
			Else
				Exit
			EndIF
		EndIF	
	
		SPO->( dbSkip() )
	
	End While  

	IF ( aScan( aPeriodos , { |x| x[1] == dIniAtu .and. x[2] == dFimAtu } ) == 0.00 )
		dPerIni := dIniAtu
		dPerFim	:= dFimAtu 
		IF !( dPerFim < dDataIni .OR. dPerIni > dDataFim )
			IF ( dPerFim >= dAdmissa )
				aAdd(aPeriodos, { dPerIni, dPerFim, Max(dPerIni,dDataIni), Min(dPerFim,dDataFim) } )
			Endif
		EndIF
	EndIF

Else
	While .T.
	
		PerCorrido(@dPerIni,@dPerFim, dData)
		
	                       
	    //-- Somente Considera Periodos com Data Final Superior a Data de Admissao
	    If dPerFim>=dAdmissa
	       Aadd(aPeriodos, { dPerIni, dPerFim, Max(dPerIni,dDataIni), Min(dPerFim,dDataFim) })
		Endif
	
		If dDataFim > dPerFim
			dData := dPerFim + 1
			Else
			Exit
		Endif
	
	Enddo
Endif



Return( lRet )	
                                   

Function Percorrido(dIni, dFim, dDataini) 
Local lRet	:= 	.T.
Local nMes	:=	0
Local nAno	:=	0

dIni	:=	dDataIni
nMes	:=	Month(dDataIni)+1
nAno	:=	Year(dDataIni)

If nMes>12
   nMes:= 1
   nAno++           
Endif

dFim:=Ctod('01/'+strzero(nmes,2)+'/'+strzero(nAno,4) )-1

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fMontaCabec ³ Autor ³Equipe Advanced RH     ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Cria Array para Cabecalho do GetDados			             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fMontaCabec(aHeader,cTitulo,cCampo,cPicture,cTipo)            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Ver abaixo 				                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/   
Static Function fMontaCabec(aHeader,cTitulo,cCampo,cPicture,cTipo,nTamanho)                     
aAdd(aHeader,{OemToAnsi(cTitulo)	, cCampo  	, cPicture	, nTamanho		,0	,''	,CHR(251)	, cTipo ,"",""})
Return(.T.)
