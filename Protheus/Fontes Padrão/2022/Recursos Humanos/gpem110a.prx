#INCLUDE "Protheus.ch"
#INCLUDE "GPEM110A.CH"

#DEFINE __TiposValidos__ 			( "FL*13*PR*PF*PD" )

#DEFINE __Elementos_aSrvReturn__	09	

#DEFINE __aSrvReturn_TudoOK__		01
#DEFINE __aSrvReturn_aCols__ 		02
#DEFINE __aSrvReturn_aHeader__		03
#DEFINE __aSrvReturn_aRecnos__		04
#DEFINE __aSrvReturn_nPosFil__		05
#DEFINE __aSrvReturn_nPosPD__		06
#DEFINE __aSrvReturn_nPosLctop__ 	07
#DEFINE __aSrvReturn_aRecLctop__	08
#DEFINE __aSrvReturn_cAliasLctop__	09

#DEFINE __Elementos_aSRZzs__		04

#DEFINE __aSzs_Pos_Fil__			01
#DEFINE __aSzs_Pos_Cc__				02
#DEFINE __aSzs_Pos_Mat__			03
#DEFINE __aSzs_Pos_Pd__				04

Static lGpem110ExecInRemote

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ GPEM110A ³ Autor ³ Sistemas R.H.         		   ³ Data ³ 01/08/05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Contabiliza‡ao da Folha                                    			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ GEPM110()                                                  			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS 		      ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±|Cecilia C.  |24/12/13|Req. 194403     |Alterado o parametro FWCODEMP para cEmpAnt³±±
±±|            |        |                |na Funcao Gpem110FilCar                   ³±±
±±|Esther V.   |22/04/14|M_RH003         |Replica V11 para V12. Tratamento do para- ³±±
±±|            |        |                |metro MV_ITMCLVL para aceitar '3', nao    ³±±
±±|            |        |                |obrigando o preenchimento dos campos.     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GPEM110A()

Local aArea		:= GetArea()
Local aSays		:= {}
Local aButtons	:= {}
Local cSvFilAnt := cFilAnt
Local nOpca		:= 0.00

Private aRotina := {;
						{ STR0005 , "GPE110Par" , 0 , 1},;	//"Parƒmetros"
                  	{ STR0006 , "GPE110Con" , 0 , 4} ;//"Autom tica"
                    } 
Private cCadastro	:= OemToAnsi(STR0007) //"Contabiliza‡„o da Folha"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas na Pergunte                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private cTipoCont
Private cRoteiro
Private cProcesso

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta Tela de Entrada para a Selecao dos Parametros          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aAdd(aSays,OemToAnsi(STR0008) )  //"Este programa reprocessara a contabilizacao da folha de pagamento "
aAdd(aSays,OemToAnsi(STR0009) )  //"gerando dados para a geracao do registro K200 do MANAD."
aAdd(aSays,OemToAnsi(STR0010) )  //"So devera ser utilizada para o periodo solicitado pela Fiscalizacao"

aAdd(aButtons, { 5,.T.,{|| Gpem111Pergunte() } } )
aAdd(aButtons, { 1,.T.,{|o| nOpca := 1,IF(gpconfOK(),FechaBatch(),nOpca:=0) }} )
aAdd(aButtons, { 2,.T.,{|o| FechaBatch() }} )
	
FormBatch( cCadastro , aSays , aButtons )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para parametros                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF ( nOpca == 1 )
	Gpem111Processa( .T. , .T. )
EndIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a Filial de Entrada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cFilAnt := cSvFilAnt

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura os Ponteiros de Entrada                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea( aArea )
Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao ³Gpem111PergunteºAutor  ³Kelly Soares       º Data ³ 19/04/07   º±±
±±ÌÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.  ³ Apresenta grupo de perguntas.                                 º±±
±±ÌÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso    ³ AP                                                            º±±
±±ÈÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Gpem111Pergunte()

Local lOk    

lOk := Pergunte("GP111A",.T. )

If lOk 
	cTipoCont := MV_PAR01
	If cTipoCont == 1		
		Pergunte("GP111B",.T. )
	Elseif cTipoCont == 2
		Pergunte("GP111C",.T. )
	Else
		Pergunte("GP111B",.T. )
		Pergunte("GP111C",.T. )
	Endif
EndIf

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao ³Gpem111ProcessaºAutor  ³Equipe Advanced RH º Data ³ 21/09/05   º±±
±±ÌÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.  ³ Reprocessa a Contabilizacao do Modulo SIGAGPE, e armazena     º±±
±±º       ³ os dados na tabela RCZ.                                       º±±
±±ÌÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso    ³ AP                                                            º±±
±±ÈÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Gpem111Processa( lShowProc , lExecInRemote  )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ As variaveis Locais de Ambiente devem Ser Declaradas e Inicia³
//³ lizadas Aqui                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aArea			:= GetArea()
Local aAreaSRZ		:= SRZ->( GetArea() )
Local aAreaSRA		:= SRA->( GetArea() )
Local aAreaSM0		:= SM0->( GetArea() )
Local cSvFilAnt		:= cFilAnt
Local cMvCPosSrv	   := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ As variaveis Locais do corpo do programa devem ser Aqui Decla³
//³ radas mas  inicializa das Abaixo. GOTO :INIT LOCAL           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aSrvLanc
Local aCT5
Local aPadrao
Local aFiliais
Local aLogIncon
Local aLogTitle
Local aFilContab
Local aSRZzs
Local aModuloReSet
Local bSrvLancAsc
Local bTotal
Local cInconsist
Local cSrvPds
Local cArquivo
Local cMesAnoDe
Local cMesAnoAte
Local cAliasCc
Local cZzsInRZFil
Local cZzsInRZCc
Local cZzsInRZMat
Local cZzsInRZPd
Local cFilReplace
Local cFilContab
Local cFilRCH
Local lGerouFol
Local lGerou13s
Local lSrzCompart
Local lSrvCompart
Local lCt5Compart
Local lMvCPosSrv
Local lMvCPosLcp
Local lSrvLancOk
Local lCtbInUse
Local nContador
Local nPosPadrao
Local nFilial
Local nFiliais
Local nVerba
Local nVerbas
Local nLastRec
Local nCont	  := 0
Local nMesDif	  := 0
Local cPerg    := ""
Local lContFech := GetMvRH("MV_GPCTAFM",,.F.)   //Parametro se deve contabilizar somente apos fechamento
Local aSrzFields
Local cQuery
Local cQueryPds
Local cQueryOrd
Local cSrzQuery
Local cQueryTmp
Local cSrzFields
Local cRetSqlName
Local cSRZIndexKey
Local lSelectPds
Local nSrzFields
Local nField
Local lCtbInTran	:= .F.

Private lProvFer := .F.
private lProv13o := .F.
Private lErpLogix  := GetMvRH("MV_ERPLOGI",,"2") == "1"

Private lCtabBxaFer := .F.
Private lCtabBxaRes := .F.
Private lDrop      := .F.

Private cMesCont   := GetMvRH("MV_GPMESCT",,"")  //Parametro que armazena o ultimo mes contabilizado, atualizado apos a contabilizacao.
Private dProximoMes := ctod("")
Private aPerAberto  := {}
Private aPerFechado := {}

Private cFilConDe
Private cFilConAte

DEFAULT lShowProc   := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o Processo de Contabilizacao esta sendo Executado³
//³ via Remote												               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Gpem110InRemote( @lExecInRemote )

Begin Sequence
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Chamada Recursiva com Barra de Processamento                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	IF ( ( lShowProc ) .and. ( lGpem110ExecInRemote ) )
		Processa( {|lEnd| Gpem111Processa( .F. , lGpem110ExecInRemote ) , STR0011 } )  //"Contabiliza‡„o da Folha"
		Break
	EndIF

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ :INIT LOCAL												               ³
	//³ Aqui eh que as variaveis Locais que serao utilizadas no corpo³
	//³ do progama deverao ser Inicializadas						         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aSrvLanc		:= {}
	aCT5			:= {}
	aPadrao			:= {}
	aFiliais		:= {}
	aLogIncon		:= {}
	aLogTitle		:= {}
	aFilContab		:= {}
	aSRZzs			:= SRZzs()
	bSrvLancAsc		:= { || NIL }
	bTotal			:= { || NIL }
	cInconsist		:= ""
	cSrvPds			:= ""
	cArquivo		:= ""
	cFilConDe		:= Space(FWGETTAMFILIAL)
	cFilConAte		:= cFilConDe
	cAliasCc    	:= ""
	cZzsInRZFil		:= aSRZzs[__aSzs_Pos_Fil__]
	cZzsInRZCc		:= aSRZzs[__aSzs_Pos_Cc__ ]
	cZzsInRZMat		:= aSRZzs[__aSzs_Pos_Mat__]
	cZzsInRZPd		:= aSRZzs[__aSzs_Pos_Pd__ ]
	cFilReplace		:= Space(FWGETTAMFILIAL)
	cFilContab		:= Space(FWGETTAMFILIAL)
	lGerouFol		:= .F. 
	lGerou13s 		:= .F.
	lSrzCompart		:= FWModeAccess("SRZ",3)<>'E' 
	lSrvCompart		:= FWModeAccess("SRV",3)<>'E'
	lCt5Compart		:= ( ( Select("CT5") > 0.00 ) .and. FWModeAccess("CT5",3)<>'E' )
	lMvCPosSrv		:= .F.
	lMvCPosLcp		:= .F.
	lSrvLancOk		:= .F.
	lCtbInUse		:= CtbInUse()
	nContador		:= 0.00
	nPosPadrao		:= 0.00
	nFilial			:= 0.00
	nFiliais		:= 0.00
	nVerba			:= 0.00
	nVerbas			:= 0.00
	nLastRec		:= 0.00

   	aSrzFields		:= SRZ->( dbStruct() )
	cQuery			:= ""
	cQueryPds		:= ""
	cQueryOrd   	 := ""
	cSrzQuery 		:= ""
	cQueryTmp		:= ""
	cSrzFields		:= ""
	cRetSqlName		:= InitSqlName( "SRZ" )
	cSRZIndexKey	:= ""
	lSelectPds		:= .T.
	nSrzFields		:= Len( aSrzFields	)
	nField			:= 0.00

	Private Inclui		:= .T.
	Private cLote		:= ""
	Private cPadrao		:= ""	
	Private dDataLanc	:= dDataBase
	Private nTotRegs 	:= 0.00
	Private nTotal   	:= 0.00
	// Verificar contabilizacao por item contabil e classe de valor
	Private lItemClVl   := GetMvRH( "MV_ITMCLVL", .F., "2" ) $ "1*3"	
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Algum Lugar Esta Zerando nModulo, Entao Aqui garantimos   que³
	//³ Tenha o Conteudo correspondente ao Modulo SIGAGPE            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	IF ( ( Type("nModulo") == "U" ) .or. ( ( Type("nModulo") == "N" ) .and. ( nModulo == 0.00 ) ) )
		aModuloReSet := SetModulo( "SIGAGPE" , "GPE" )
	EndIF

	//--------------------------------------------------------------------------------------------
	// verifica o parametro de date de a data ate de contabilizacao e roda o periodo todo.
	//--------------------------------------------------------------------------------------------
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Carrega as Perguntas										            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Pergunte( "GP111A" , .F. )
	cPerg     := "GP111A"
	cTipoCont := 	mv_par01
	cMesAnoDe	:= mv_par02
	cMesAnoAte	:= mv_par03
	cFilConDe	:= mv_par04			// Filial De
	cFilConAte	:= mv_par05			// Filial Ate
	If CtoD("01/"+substr(MV_PAR02,1,2)+"/"+substr(MV_PAR02,3,4)) > CtoD("01/"+substr(MV_PAR03,1,2)+"/"+SUBSTR(MV_PAR03,3,4))
		Aviso( STR0042, STR0054,{STR0055})
		Return
	EndIf

	If cTipoCont == 1 .Or. cTipoCont == 3
		Pergunte( "GP111B" , .F. )		
		cPerg     := "GP111B"
		cProcesso	:= mv_par01
		cRoteiro	:= mv_par02
	Endif
	
	If cTipoCont == 2 .Or. cTipoCont == 3
		Pergunte( "GP111C" , .F. )
		cPerg     := "GP111C"
		lProvFer    := ( mv_par01 == 1 .or. mv_par01 == 3 ) // Provisao de Ferias
		lProv13o    := ( mv_par01 == 2 .or. mv_par01 == 3 )	// Provisao de 13o. Salario
		lCtabBxaFer := ( mv_par02 == 1 )                    // Cont.Bx.Ferias.Prov:1-Sim;2-Nao
		lCtabBxaRes := ( mv_par03 == 1 )                    // Cont.Bx.Res.Prov:1-Sim;2-Nao
	EndIf	
	
	nMesDif	:= Month(CtoD("01/"+Substr(cMesAnoAte,1,2)+"/"+Substr(cMesAnoAte,3,4)) ) - Month(CtoD("01/"+Substr(cMesAnoDe,1,2)+"/"+Substr(cMesAnoDe,3,4)) )

	If Substr(cMesAnoDe,3,4) < Substr(cMesAnoAte,3,4)
		nMesAnoDIf	:= 12 - Val(Substr(cMesAnoDe,1,2)) 
		If nMesAnoDIf == 0
			nMesAnoDIf	:= 1
		Endif
		nMesAnoDIf	:= nMesAnoDIf + Val(Substr(cMesAnoAte,1,2)) 
	Endif
	
	Iif(nMesDif=0,nMesDif:=1,Iif(nMesDif<0,nMesDif:=nMesAnoDIf,nMesDif:=nMesDif+1))
	
	For nCont:= 1 to nMesDif
		If nCont > 1
			If ( ( Month(dProximoMes)+1 )>12)
				dProximoMes := CtoD("01/01/"+Alltrim(Str(Val(Substr(cMesAnoDe,3,4))+1)))
			Else
				dProximoMes := CtoD("01/"+Alltrim(Str(Month(dProximoMes)+1))+"/"+Substr(cMesAnoDe,3,4))
			EndIf
		Else
			dProximoMes	:= CtoD("01/"+Substr(cMesAnoDe,1,2)+"/"+Substr(cMesAnoDe,3,4))
		Endif

		cMesAnoCtab  := Substr(Dtos(dProximoMes),5,2)+Substr(Dtos(dProximoMes),1,4)
		lDigita     := .F.									// Mostra Lancamentos:1-Sim;2-Nao
		lAglut      := .F.									// Aglutina Lancamentos:1-Sim;2-Nao
		lDrop		:= .F.
				                                      	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carregar os periodos abertos (aPerAberto) e/ou os periodos   ³
		//³ fechados (aPerFechado), de acordo com uma determinada compe- ³
		//³ tencia. 													               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aPerAberto  := {}
		aPerFechado := {}
		fRetPerComp( SubStr( cMesAnoCtab, 1, 2 ), SubStr( cMesAnoCtab, 3, 4 ), Nil, Nil, Nil, @aPerAberto, @aPerFechado)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ VERIFICA SE DEVE CONTABILIZAR SOMENTE APOS FECHAMENTO CONFORME PARAMETRO ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lContFech .And. Len( aPerFechado ) == 0
			MsgInfo(  STR0043, STR0042 ) //Aviso#Fechamento do mes nao foi processado
		   Return
		Endif 
	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica parametros contabilizacao						   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If FindFunction("CTBINTRAN")
			lCtbInTran := CtbInTran( 0, lDigita )
		EndIf		
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gerar arquivo SRZ com os lancamentos contabeis			      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTipoCont != 2
			lGerouFol := fGeraFolSRZ(1, {1,2},cMesAnoCtab,aPerAberto,aPerFechado)
		EndIF
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa as constantes e chama a funcao xfGeraProvSrz()	   |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF ( ( lProvFer ) .or. ( lProv13o ) )	// "Geracao de Lancamentos - Provisao"
			GpeProvisao(STR0023,cMesAnoCtab,,,6,,,cRetSqlName)
		EndIF
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Posiciona arquivos na Ordem 1 para a contabilizacao 		   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SRA->( dbSetOrder( 01 ) )
			
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Define o Alias do arquivo de Centro de Custo e Seleciona a or³
		//³ dem														               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cAliasCc := "CTT"
		(cAliasCc)->( dbSetOrder( 01 ) )
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Seleciona a Ordem 1 para o arquivo de Lancamentos Padroes    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		CT5->( dbSetOrder( 01 ) )
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta Bloco para o aScan no aSrvLanc                		   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		bSrvLancAsc	:= { |x|;
						  		(;
						  			( x[ aSrvLanc[ __aSrvReturn_nPosFil__ ] ] == xFilial("SRV", RZ_FILIAL) ) .or. ;
						  			( Empty( x[ aSrvLanc[ __aSrvReturn_nPosFil__ ] ] ) );
						  		) .and. ;
						  		( x[ aSrvLanc[ __aSrvReturn_nPosPD__ ] ] == RZ_PD );
						}
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega as Filiais que serao utilizadas para a Contabilizacao³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aFiliais := Gpem110FilCar( cEmpAnt , cFilConDe , cFilConAte  )
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Redefine o Conteudo das variavels cFilConDe e cFilConAte quan³
		//³do modo de acesso do SRZ for compartilhado					      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF ( lSrzCompart )
			cFilConDe	:= xFilial( "SRZ" , cFilConDe 	)
			cFilConAte	:= xFilial( "SRZ" , cFilConAte	)
		EndIF
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Acertar valores do SRZ antes da contabilizacao               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega Regua de Processamento                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF ( lGpem110ExecInRemote )
			ProcRegua( ( SRZ->( RecCount() ) + 1 ) )
		EndIF	
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Define o Bloco para totalizacao                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		bTotal := { || ;
		  				RodaProva(nHdlPrv,nTotal) ,;
		  				cA100Incl(cArquivo,nHdlPrv,3,cLote,lDigita,lAglut);
		  		  }
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Percorre Todas as Filiais Selecionadas nos Parametros De/Ate ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nFiliais := Len( aFiliais )
		For nFilial := 1 To nFiliais
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Altera o Conteudo de cFilAnt                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF !Empty( cFilContab )
				cFilAnt := cFilContab
			Else
				cFilAnt := aFiliais[ nFilial , 01 ]
			EndIF	
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Carrega conteudo dos parametros                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
			lMvCPosSrv	:= ( GetMvRH("MV_CPOSSRV",NIL,"S") == "S" )
			lMvCPosLcp	:= ( GetMvRH("MV_CPOSLCP",NIL,"S") == "S" )
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Reincializa aCT5 a Cada Filial                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF !( lCt5Compart )
				aCT5 := {}
			EndIF
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Reincializa aPadrao a Cada Filial                            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF ( !( lCt5Compart ) )
				aPadrao := {}			
			EndIF
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Posiciona o SM0 na Filial Corrente                           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SM0->( MsGoto( aFiliais[ nFilial , 02 ] ) )
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Carrega Regua de Processamento                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF ( Empty( aSrvLanc ) .or. !( lSrvCompart ) )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Carrega as Verbas Vs Lancamentos Padroes. Se nao Existir,  Ge³
				//³ ra Log													               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				IF !( lSrvLancOk := ( aSrvLanc := ( Gpem110SrvLanc( cFilAnt , cFilAnt , @aPadrao , lCtbInUse ) ) )[__aSrvReturn_TudoOK__] )
					cInconsist := ( STR0025 + cFilAnt )	//" - Nao Existem Verbas a serem contabilizadas na filial: "
					cInconsist += STR0026				//" - Verifique se os Lancamentos Padroes estao definidos."
					aAdd( aLogIncon , cInconsist )				
					Loop
				Else
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Reinicializa lSelectPds									            ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					lSelectPds := .T.
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Monta String Com as Verbas que serao Utilizadas na  Contabili³
					//³ zacao														               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cSrvPds := ""
					nVerbas := Len( aSrvLanc[ __aSrvReturn_aCols__ ] )
					For nVerba := 1 To nVerbas
						cSrvPds += ( "'" + aSrvLanc[ __aSrvReturn_aCols__ , nVerba , aSrvLanc[ __aSrvReturn_nPosPD__ ] ] + "'," )
					Next nVerba
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Retira a Ultima Virgula									            ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cSrvPds := SubStr( cSrvPds , 1 , Len( cSrvPds ) - 1 )
				EndIF
			EndIF
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Se nao Conseguiu Carregar as Verbas x Lancamentos Padroes para³
			//³a Filial pesquisa a proxima								            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF !( lSrvLancOk )
				cInconsist := ( STR0025 + cFilAnt )	//" - Nao Existem Verbas a serem contabilizadas na filial: "
				cInconsist += STR0026				//" - Verifique se os Lancamentos Padroes estao definidos."
				IF ( aScan( aLogIncon , { |x| ( x == cInconsist ) } ) == 0.00 )
					aAdd( aLogIncon , cInconsist )
				EndIF
				Loop
			EndIF
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Carrega o Numero do Lote Contabil                            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF Empty( cLote := Gpem110LoteCont( "GPE" , cFilAnt ) )
				cInconsist := ( STR0027 + cFilAnt )		//" - Nao Existe o Lote Contabil GPE para a Filial: "
				cInconsist += STR0028					//" - Verifique no SX5 (Tabelas:Tabela 09) a Existencia do Lote."
				aAdd( aLogIncon , cInconsist )				
				Loop
			EndIF
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto Entrada Apos carregar o Numero do Lote contabil        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
			If ExistBlock("GP110ANL")
			   EXECBLOCK("GP110ANL",.F.,.F.)
			Endif
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inicializa Variaveis                                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nContador := 0
			nTotal    := 0
			nHdlPrv   := 0
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Percorre todos os Registros do SRZ para a Filial corrente	   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( "SRZ" )
			SRZ->( dbSeek( IF( !( lSrzCompart ) , cFilAnt , cFilConDe ) , .T. ) )
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inicializa a Mensagem da Regua de Processamento			      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF ( lGpem110ExecInRemote )
				IncProc( OemToAnsi( STR0018 + cFilAnt ) ) //"Processando a Contabilizacao para a Filial: "
			EndIF	
			
			Begin Transaction
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Percorre todos os Registros do SRZ para a Filial corrente	   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			While SRZ->( !Eof() .and. ( RZ_FILIAL == IF( lSrzCompart , cFilConDe , cFilAnt ) ) )
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Movimentando Regua de Processamento                          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				IF ( lGpem110ExecInRemote )
					IncProc()
				EndIF	
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Despreza os RZ_MAT com 'zz..'                       		    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			   	IF ( ( SRZ->RZ_MAT $ cZzsInRZMat ) )
			   		SRZ->( dbskip() )
			      	Loop
			   EndIF
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Posicona SRA na Matricula que esta sendo processada		      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		      	SRA->( MsSeek( SRZ->( RZ_FILIAL + RZ_MAT ) ) )
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Nao Contabiliza para Filial, CC e PD iguais a zz... 		   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				IF SRZ->( ( RZ_FILIAL $ cZzsInRZFil ) .or. ( RZ_CC $ cZzsInRZCc ) .or. ( RZ_PD $ cZzsInRZPd ) )
					SRZ->( dbskip() )
					Loop
				EndIF
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Se Nao Solicitou a Geracao da Folha, ou Se Solicitou e nao con³
				//³segui Gerar a Folha										            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ( cTipoCont != 1 .or. ( cTipoCont = 1 .and. !( lGerouFol ) ) )
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Despreza Todos os Lancamentos para o Tipo Folha "FL"          ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					IF ( SRZ->RZ_TIPO == "FL" )
						SRZ->( dbskip() )
						Loop
					EndIF
				EndIF	
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se Gerou as Provisoes de Ferias               	      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				IF !( lProvFer ) 
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Despreza Todos os Lancamentos para Provisao de Ferias "PD"    ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					IF ( SRZ->RZ_TIPO == "PF" )
						SRZ->( dbskip() )
						Loop
					EndIF
				EndIF
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se Gerou as Provisoes de 13o. Salario         	      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		      IF !( lProv13o )
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Despreza Todos os Lancamentos para Provisao 13o.Salario "PD"  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		       	IF ( SRZ->RZ_TIPO == "PD" )
						SRZ->( dbskip() )
						Loop
		        	EndIF
		      EndIF
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Carrega o Lancamento Padrao da Verba						         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				cCodPadrao	:=  ""
				dbSelectArea("SRV")
				SRV->( dbSetOrder(1) )
				If SRV->(MsSeek(xFilial("SRV",SRZ->RZ_FILIAL) + SRZ->RZ_PD))   
					If !Empty(SRV->RV_LCTOP)
						cCodPadrao := SRV->RV_LCTOP
					EndIf
				EndIf		
			
				IF !Empty(cCodPadrao)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Verifica se deve Posicionar o SRV. O posisionamento eh  desne³
					//³ cessario uma vez que ja se obteve o Lancamento Padrao para  a³
					//³ verba. Foi mantido apenas para compatibilidade               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				    IF ( lMvCPosSrv )	
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Posiciona no SRV                    						         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					    SRV->( MsSeek( xFilial("SRV",SRZ->RZ_FILIAL) + SRZ->RZ_PD ) )
					EndIF
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Verifica se Deve Posicionar o Lancamento Padrao. O  Posiciona³
					//³ mento no Lancamento Padrao eh Garantido pela Funcao DetProva.³
					//³ Sendo assim, aqui ele se torna descecessario. Foi mantido ape³
					//³ nas para compatibilidade.									         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					IF ( lMvCPosLcp )	
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Posiciona no Lancamento Padrao      						         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						CT5->( MsSeek( xFilial("CT5",SRZ->RZ_FILIAL) + cCodPadrao ) )
					EndIF
				Else
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Nao Contabiliza Verbas sem Lancamento Padrao				      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					SRZ->( dbskip() )
					Loop
				EndIF
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Posicona Centro de Custo que esta sendo processado    	      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   	  	IF !( ( cAliasCc )->( MsSeek( SRZ->( xFilial( cAliasCc , RZ_FILIAL ) + RZ_CC ) , .F. ) ) )
					cInconsist := STR0029 + SRZ->RZ_CC + STR0030 + cFilAnt + STR0031 + cAliasCc +"."	//" - O Centro de Custo: "###" da Filial: "###" nao foi encontrado no: "
					cInconsist += STR0032	//" - Devera ser Cadastrado para que possa ocorrer a contabiliacao."
					IF ( aScan( aLogIncon , { |x| ( x == cInconsist ) } ) == 0.00 )
						aAdd( aLogIncon , cInconsist )
					EndIF
					SRZ->( dbskip() )
					Loop
		   	  	EndIF
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Incrementa o Contador de Lancamentos        				      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				IF ( ( ++nContador ) == 1 )
					nHdlPrv := HeadProva(cLote,"GPEM110",Substr(cUsuario,7,6),@cArquivo)
				EndIF
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Chamada a DetProva                          				      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea( "SRZ" )
				nTotal += ManadDetProva(nHdlPrv,cCodPadrao,"GPEM110",cLote,,,,,,@aCT5)
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Proximo Lancamento                          				      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				SRZ->( dbskip() )
		
			EndDo
		
			If lCtbInTran // Contabiliza na Transacao (param.contabeis ok e perg. exibir tela = Nao)
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Totalizadores                               				   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( nTotal > 0 )
			  		IF ( lGpem110ExecInRemote )
			  			MsAguarde( bTotal , STR0038 + cFilAnt ) // "Totalizando a Filial: "
					Else
						Eval( bTotal )
					EndIF
				EndIF
			EndIF
		
			End Transaction

			If ! lCtbInTran // Nao contabiliza na Transacao (param.contabeis nao configurados para Transacao e/ou perg. exibir tela = Sim)
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Totalizadores                               				   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( nTotal > 0 )
			  		IF ( lGpem110ExecInRemote )
			  			MsAguarde( bTotal , STR0038 + cFilAnt ) // "Totalizando a Filial: "
					Else
						Eval( bTotal )
					EndIF
				EndIF
			EndIF
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Restaura o SRZ padrao										         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF ( Select("SRZ") > 0.00 )
				SRZ->( dbCloseArea() )
				ChkFile( "SRZ" )
				RestArea( aAreaSRZ )
			EndIF
	
			IF ! lSrzCompart
				//--GRAVA NO PARAMETRO O MES CONTABILIZADO
				//utilizado GETMV para checar se o parametro existe, por isso não utilizado o GETMVRH
				If GetMv("MV_GPMESCT",.T.) .And. cMesCont < Right(cMesAnoCtab,4)+Left(cMesAnoCtab,2) 
					PutMv("MV_GPMESCT", Right(cMesAnoCtab,4)+Left(cMesAnoCtab,2) )
				Endif	
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se o SRZ for compartilhjado, ja processou tudo na 1a. Vez	   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF ( lSrzCompart )		// ja processou tudo na primeira vez
				Exit
			EndIF
			
		Next nFilial

	Next // fechando o loop para varrer todo o periodo de lancamento contabil

End Sequence
		
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Gera o Log de Inconsistencias								         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF !Empty( aLogIncon )
	//"Foram Encontradas Inconsistencias na Contabilizacao."
	aAdd( aLogTitle , STR0033 )
	fMakeLog( { aLogIncon } , aLogTitle , cPerg , lGpem110ExecInRemote )
EndIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a Filial de Entrada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cFilAnt := cSvFilAnt

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura o Modulo de Entrada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF !Empty( aModuloReSet )
	ReSetModulo( aModuloReSet )
EndIF	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Recupera a Integridade dos dados                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea( aAreaSRA )
RestArea( aAreaSRZ )
RestArea( aAreaSM0 )
RestArea( aArea    )
Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Gpem110LoteCont³Autor³Marinaldo de Jesus  ³ Data ³29/05/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna o Numero do Lote da Folha no SX5					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Gpem110LoteCont( cChave , cFil )							  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	 	 ³GPEM110     												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Gpem110LoteCont( cChave , cFil )
DEFAULT cChave	:= "GPE"
DEFAULT cFil	:= cFilAnt
Return( fDesc( "SX5" , "09"+AllTrim(cChave) , "X5Descri()" , 06 , cFil , 01 ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Gpem110SrvLanc ³Autor³Marinaldo de Jesus  ³ Data ³29/05/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Carrega Array das Verbas Vs Lancamentos Padroes			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³<Vide Parametros Formais>              				  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	     ³GPEM110     												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Gpem110SrvLanc( cSrvFilDe , cSrvFilAte , aPadrao , lCtbInUse )

Local aSrvReturn	 := Array( __Elementos_aSrvReturn__ )
Local aSrvCols	 := {}
Local aSrvHeader	 := {}
Local aSrvRecnos	 := {}
Local aSrvFields	 := { "RV_FILIAL", "RV_COD" , "RV_LCTOP" }
Local aSrvQuery 	 := {}
Local aRecLctop	 := {}
Local bSrvWhile	 := { |cKey,cFil| ( ( cFil := RV_FILIAL ) >= cSrvFilDe ) .and. ( cFil <= cSrvFilAte ) }
Local bSrvSkip	 := { || NIL }
Local cAliasLctop := "CT5"
Local cCpoLctop	 := "CT5_LANPAD"
Local cFilLctop	 := xFilial( cAliasLctop )
Local cPrefixLctop:= ( PrefixoCpo( cAliasLctop ) + "_" )
Local lTudoOk		 := .F.
Local nPosFil		 := 0.00
Local nPosPd		 := 0.00
Local nPosLctop	 := 0.00
Local nRecnoLctop := 0.00
Local lEqualFil	 := .F.
Local cSpcLctop	 := Space( TamSx3("RV_LCTOP")[1] )

DEFAULT cSrvFilDe	:= cFilAnt
DEFAULT cSrvFilAte	:= cSrvFilDe
DEFAULT aPadrao		:= {}
DEFAULT lCtbInUse	:= CtbInUse()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine as Filiais De/Ate                   				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cSrvFilDe	:= xFilial( "SRV" , cSrvFilDe  )
cSrvFilAte	:= xFilial( "SRV" , cSrvFilAte )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Anula bSrvWhile caso as Filiais sejam Iguais				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF ( lEqualFil := ( cSrvFilDe == cSrvFilAte ) )
	bSrvWhile := NIL
EndIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine bSrvSkip Quando TOP                 				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSrvSkip := { |lVerPadrao|	( lVerPadrao := ( MyVerPadrao( RV_LCTOP , @nRecnoLctop , @aPadrao , cAliasLctop , cFilLctop , cCpoLctop , cPrefixLctop ) ) ) ,;
							IF(;
								( lVerPadrao ) ,;
								aAdd( aRecLctop , nRecnoLctop ),;
								 NIL;
							   ),;
							 !( lVerPadrao );
			}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Condicao da Query Para Carga das Informacoes do SRV		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvQuery	  := Array( 09 )
aSrvQuery[01] := "("
aSrvQuery[02] := 	"RV_FILIAL>='"+cSrvFilDe+"'"
aSrvQuery[03] := 	" AND "
aSrvQuery[04] := 	"RV_FILIAL<='"+cSrvFilAte+"'"
aSrvQuery[05] := ")"
aSrvQuery[06] := " AND "
aSrvQuery[07] := "RV_LCTOP<>'"+cSpcLctop+"'"
aSrvQuery[08] := " AND "
aSrvQuery[09] := "D_E_L_E_T_=' ' "

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega as Informacoes do SRV                				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvCols := GdMontaCols(;
							@aSrvHeader	,;	//01 -> Array com os Campos do Cabecalho da GetDados
							NIL			,;	//02 -> Numero de Campos em Uso
							NIL			,;	//03 -> [@]Array com os Campos Virtuais
							NIL			,;	//04 -> [@]Array com os Campos Visuais
							"SRV"		,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
							aSrvFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
							@aSrvRecnos	,;	//07 -> [@]Array unidimensional contendo os Recnos
							"SRV"   	,;	//08 -> Alias do Arquivo Pai
							cSrvFilDe	,;	//09 -> Chave para o Posicionamento no Alias Filho
							bSrvWhile	,;	//10 -> Bloco para condicao de Loop While
							bSrvSkip	,;	//11 -> Bloco para Skip no Loop While
							.F.			,;	//12 -> Se Havera o Elemento de Delecao no aCols 
							.F.			,;	//13 -> Se cria variaveis Publicas
							.F.			,;	//14 -> Se Sera considerado o Inicializador Padrao
							NIL			,;	//15 -> Lado para o inicializador padrao
							.F.			,;	//16 -> Opcional, Carregar Todos os Campos
							.T. 		,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
							aSrvQuery	,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
							.F.			,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
							.T.			,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
							.F.			,;	//21 -> Carregar Coluna Fantasma
							.T.			,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
							.F.			,;	//23 -> Verifica se Deve verificar se o campo eh usado
							.F.			,;	//24 -> Verifica se Deve verificar o nivel do usuario
							.F.	 		 ;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
					)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se carregou as Verbas Vs Lancamentos                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF ( lTudoOk := ( Len( aSrvRecnos ) > 0.00 ) )
	nPosFil		:= GdFieldPos( "RV_FILIAL"	, aSrvHeader )
	nPosPd		:= GdFieldPos( "RV_COD"		, aSrvHeader )
	nPosLctop	:= GdFieldPos( "RV_LCTOP"	, aSrvHeader )
EndIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Alimenta o aSrvReturn                        				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvReturn[ __aSrvReturn_TudoOK__ 		] := lTudoOk
aSrvReturn[ __aSrvReturn_aCols__		] := aClone( aSrvCols )
aSrvReturn[ __aSrvReturn_aHeader__		] := aClone( aSrvHeader )
aSrvReturn[ __aSrvReturn_aRecnos__		] := aClone( aSrvRecnos )
aSrvReturn[ __aSrvReturn_nPosFil__		] := nPosFil
aSrvReturn[ __aSrvReturn_nPosPD__		] := nPosPd
aSrvReturn[ __aSrvReturn_nPosLctop__	] := nPosLctop
aSrvReturn[ __aSrvReturn_aRecLctop__	] := aClone( aRecLctop )
aSrvReturn[ __aSrvReturn_cAliasLctop__	] := cAliasLctop

Return( aClone( aSrvReturn ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Gpem110FilCar  ³Autor³Marinaldo de Jesus  ³ Data ³29/05/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Carrega Array com as Filiais que serao contabilizadas		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³<Vide Parametros Formais>              				  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	     ³GPEM110     												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Gpem110FilCar( cEmp , cFilDe , cFilAte  )
Return( GetFilRecnos( cEmp , cFilDe , cFilAte ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³DeleteSrzXbs	 ³Autor³RH                  ³ Data ³29/05/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Deletar Registros no SRZ para ambientes em TOP			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³<Vide Parametros Formais>              				  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	     ³GPEM110     												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function DeleteSrzXbs(	cTpc			,;	//Conteudo para comparar com RZ_TPC
								cTipoLanc		,;	//Tipo de Lancamento a comparar com RZ_TIPO
								lLimpaSRZ		,;	//Se Limpa Todos os Tipos do SRZ
								lProvisoes		,;	//Se se refere a Provisoes
								lShowDele		 ;	//Se mostra Dialogo dom barra de evolucao
							 )
                
Local cTiposVld			:= __TiposValidos__
Local cSpaceRZTPC   	:= Space( TamSx3("RZ_TPC")[1] )
Local lDeleteSRZ		   := .F.
Local nProcRegua		   := 0.00

DEFAULT cTpc			   := cSpaceRZTPC
DEFAULT cTipoLanc		:= ""
DEFAULT lLimpaSRZ		:= .F.
DEFAULT lProvisoes		:= .F.
DEFAULT lShowDele		:= .F.

IF ( !( lShowDele ) .and. ( lGpem110ExecInRemote ) )
	////"Preparando SRZ para a Contabiliza‡„o"
	Processa( { || DeleteSrzXbs(	cTpc			,;	//Conteudo para comparar com RZ_TPC
									cTipoLanc		,;	//Tipo de Lancamento a comparar com RZ_TIPO
									lLimpaSRZ		,;	//Se Limpa Todos os Tipos do SRZ
									lProvisoes		,;	//Se se refere a Provisoes
									.T.				 ;	//Se mostra Dialogo dom barra de evolucao
							 );
               },;
               OemToAnsi( STR0037 );
             )
	Return( NIL )
EndIF

IF ( lGpem110ExecInRemote )
	ProcRegua( ( nProcRegua := SRZ->( RecCount() ) ) )
EndIF	

SRZ->( dbGoTop() )
While SRZ->( !Eof() )
	IF ( lGpem110ExecInRemote )
		IncProc()
	EndIF	
	IF !( lProvisoes )
		lDeleteSRZ := SRZ->(;
								(;
									( RZ_TPC == cTpc ) .or. ;
									( RZ_TPC == cSpaceRZTPC ) ;
								) .and. ;
								(;
									( lLimpaSRZ )			 .or. ;
									( RZ_TIPO == cTipoLanc ) .or. ;
									!( RZ_TIPO $ cTiposVld )      ; 
								);
	   					    )
	Else
		lDeleteSRZ := ( SRZ->RZ_TIPO $ cTipoLanc )
	EndIF
	IF ( lDeleteSRZ )
		SRZ->( RecLock( "SRZ" , .F. , .T. ) )
		SRZ->( dbdelete() )
		SRZ->( MsUnlock() )
	EndIF
	SRZ->( dbSkip() )
EndDo

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³MyVerPadrao  ³ Autor ³Marinaldo de Jesus   ³ Data ³05/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verificar a Existencia do Lancamento Padrao   				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lLctopOk                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM110  													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MyVerPadrao(	cPadrao 		,;	//Codigo do Lancamento Padrao
								nRecnoLctop		,;	//Recno do Lancamento Padrao ( Por Referencia)
								aPadrao 		,;	//Array com os Codigos vs Recnos ( Por Referencia )
								cAliasLctop		,;	//Alias do arquivo para pesquisa 
								cFilLctop		,;	//Filial do arquivo para pesquisa ( Apenas Quando TOP )
								cCpoLctop		,;	//Campo do arquivo para pesquisa ( Apenas Quando TOP )
								cPrefixLctop	 ;	//Prefixo do campo do arquivo para pesquisa ( Apenas Quando TOP )
							)

Local cSvAlias		:= Alias()
Local cQuery		   := ""
Local lLctopOk		:= .T.
Local nPosLctop		:= 0.00

nRecnoLctop := 0.00

IF !( lLctopOk := !( ( nPosLctop := aScan( aPadrao , { |x| x[1] == cPadrao } ) ) == 0.00 ) )
	cQuery	:= "SELECT "
	cQuery	+= ( cPrefixLctop+"FILIAL" )
	cQuery	+= ", "
	cQuery	+= cCpoLctop
	cQuery	+= ", "
	cQuery	+= "R_E_C_N_O_ RECNO"
	cQuery	+= " FROM "
	cQuery	+= InitSqlName( cAliasLctop )
	cQuery	+= " "
	cQuery	+= cAliasLctop
	cQuery	+= " WHERE "
	cQuery	+= ( ( cAliasLctop+"."+cPrefixLctop+"FILIAL='" ) + cFilLctop + "'" )
	cQuery	+= " AND "
	cQuery	+= ( ( cAliasLctop+"."+cCpoLctop+"='" ) + cPadrao + "'" )
	cQuery	+= " AND "
	cQuery	+= ( cAliasLctop + ".D_E_L_E_T_=' ' " )
	cQuery	+= "ORDER BY " + SqlOrder( (cAliasLctop)->( IndexKey() ) )
	cQuery  := ChangeQuery( cQuery )
	IF MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),"MyVerLctop",.T.,.T.)
		IF ( lLctopOk := ( MyVerLctop->( !Eof() ) ) )
			nRecnoLctop := MyVerLctop->RECNO
		EndIF
		MyVerLctop->( dbCloseArea() )
	EndIF
   aAdd( aPadrao , { cPadrao , nRecnoLctop } )
Else
	nRecnoLctop := aPadrao[ nPosLctop , 02 ]
EndIF

dbSelectArea( cSvAlias )

lLctopOk := ( nRecnoLctop > 0.00 )

Return( lLctopOk  )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SRZzs()      ³ Autor ³Marinaldo de Jesus   ³ Data ³05/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna Array com os zz..s. possiveis para o SRZ			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM110                   								     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SRZzs()

Local aSRZzs		:= Array( __Elementos_aSRZzs__ )
Local cZzsInRZFil	:= ""
Local cZzsInRZCc	:= ""
Local cZzsInRZMat	:= ""
Local cZzsInRZPd	:= ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_FILIAL		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZFil	:= ( "'" + Replicate( "z" , FWGETTAMFILIAL ) + "'," )
cZzsInRZFil	+= ( "'" + Padr( Replicate( "z" , FWGETTAMFILIAL ) , TamSx3( "RZ_FILIAL")[1] ) + "'," )
cZzsInRZFil	+= ( "'" + Replicate( "z" , TamSx3( "RZ_FILIAL" )[1] ) + "'," )
cZzsInRZFil	+= ( "'" + Replicate( "Z" , FWGETTAMFILIAL ) + "'," )
cZzsInRZFil	+= ( "'" + Padr( Replicate( "Z" , FWGETTAMFILIAL ) , TamSx3( "RZ_FILIAL")[1] ) + "'," )
cZzsInRZFil	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_FILIAL" )[1] ) + "'" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_CC			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZCc	:= ( "'" + Replicate( "z" , 9 ) + "'," )
cZzsInRZCc	+= ( "'" + Padr( Replicate( "z" , 9 ) , TamSx3( "RZ_CC" )[1] ) + "'," )
cZzsInRZCc	+= ( "'" + Replicate( "z" , TamSx3( "RZ_CC" )[1] ) + "'" )
cZzsInRZCc	+= ( "'" + Replicate( "Z" , 9 ) + "'," )
cZzsInRZCc	+= ( "'" + Padr( Replicate( "Z" , 9 ) , TamSx3( "RZ_CC" )[1] ) + "'," )
cZzsInRZCc	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_CC" )[1] ) + "'" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_PD			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZPd	:= ( "'" + Replicate( "z" , 3 ) + "'," )
cZzsInRZPd	+= ( "'" + Padr( Replicate( "z" , 3 ) , TamSx3( "RZ_PD" )[1] ) + "'," )
cZzsInRZPd	+= ( "'" + Replicate( "z" , TamSx3( "RZ_PD" )[1] ) + "'" )
cZzsInRZPd	+= ( "'" + Replicate( "Z" , 3 ) + "'," )
cZzsInRZPd	+= ( "'" + Padr( Replicate( "Z" , 3 ) , TamSx3( "RZ_PD" )[1] ) + "'," )
cZzsInRZPd	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_PD" )[1] ) + "'" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_MAT			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZMat	:= ( "'" + Replicate( "z" , 6 ) + "'," )
cZzsInRZMat	+= ( "'" + Padr( Replicate( "z" , 6 ) , TamSx3( "RZ_MAT" )[1] ) + "'," )
cZzsInRZMat	+= ( "'" + Replicate( "z" , TamSx3( "RZ_MAT" )[1] ) + "'" )
cZzsInRZMat	+= ( "'" + Replicate( "Z" , 6 ) + "'," )
cZzsInRZMat	+= ( "'" + Padr( Replicate( "Z" , 6 ) , TamSx3( "RZ_MAT" )[1] ) + "'," )
cZzsInRZMat	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_MAT" )[1] ) + "'" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega o Array                                 		         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSRZzs[__aSzs_Pos_Fil__] := cZzsInRZFil
aSRZzs[__aSzs_Pos_Cc__ ] := cZzsInRZCc
aSRZzs[__aSzs_Pos_Mat__] := cZzsInRZMat
aSRZzs[__aSzs_Pos_Pd__ ] := cZzsInRZPd

Return( aClone( aSRZzs ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpem110InRemote³Autor³Marinaldo de Jesus   ³ Data ³24/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se o Processo de Contabilizacao esta sendo Executado³
³          ³via Remote													 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM110                   								     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpem110InRemote( lExecInRemote )

DEFAULT lExecInRemote := .T.

lGpem110ExecInRemote := lExecInRemote
IF ( ( Type("__cInternet") <> "U" ) .and. ( __cInternet == "AUTOMATICO" ) )
	lGpem110ExecInRemote := .F.
EndIF

Return( NIL )

// extraido do MATXFUNA.PRX

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³DetProva  ³Autor  ³ Pilar Sanchez         ³ Data ³           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de contabilizacao das linhas detalhes da tabela de    ³±±
±±³          ³Contra-Prova                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Handle do arquivo de Contra-Prova                     ³±±
±±³          ³ExpC2: Codigo do lancamento padrao                           ³±±
±±³          ³ExpC3: Nome da rotina de origem                              ³±±
±±³          ³ExpC4: Numero do lote de contabilizacao                      ³±±
±±³          ³ExpN5:                                                       ³±±
±±³          ³ExpL6:                                                       ³±±
±±³          ³ExpC7:                                                       ³±±
±±³          ³ExpL8: Indica contabilizacao do rateio do ctas a pagar  (OPC)³±±
±±³          ³ExpC9: Otimizacao da chave de busca do relacionamento   (OPC)³±±
±±³          ³       Se informada evita a pesquisa da chave de integracao  ³±±
±±³          ³       entre as tabelas contabilizadas e a tabela de contabi-³±±
±±³          ³       lizacao                                               ³±±
±±³          ³ExpAA: Otimizacao dos lancamentos padronizados.         (OPC)³±±
±±³          ³       Array conteudo os dados da tabela de regras de contabi³±±
±±³          ³       lizacao na seguinte estrutura:                        ³±±
±±³          ³       [x][y][z]                                             ³±±
±±³          ³       [x] Array com os codigos de lancamento padronizados   ³±±
±±³          ³       [y] Array com as linhas detalhes da tabela de regras  ³±±
±±³          ³           de contabilizacao                                 ³±±
±±³          ³       [z][1] Nome do campo da tabela de regras de contabili-³±±
±±³          ³              zacao ( CT5 ).                                 ³±±
±±³          ³       [z][2] Conteudo do campo da tabela de regras de conta-³±±
±±³          ³              bilizacao ( CT5 ).                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1: Valor contabilizado                                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar a tabela de contra-  ³±±
±±³          ³prova com os dados gerados a partir das regras de contabili- ³±±
±±³          ³zacao.                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function ManadDetProva(nHdlPrv,cPadrao,cPrograma,cLote,nLinha,lExecuta,cCriterio,lRateio,;
			cChaveBusca,aCT5,lPosiciona)


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas na contabilizacao via CTB               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aArea      := GetArea()
Local aStruCT5   := CT5->(dbStruct())
Local aStruCTK   := CTK->(dbStruct())
Local aVlrCT5    := {}
Local cAliasCT5  := "CT5"
Local cQuery     := ""
Local cSeqChave  := ""
Local cCampoCTK  := ""
Local cCampoCT5  := ""
Local cValor     := ""
Local cHistorico := ""
Local cHist      := ""
Local lQuery     := .F.
Local nContador  := 0
Local nValor     := 0
Local nTotal     := 0
Local nPosCtk    := 0
Local nPosCt5    := 0
Local nPLanpad   := 0
Local nPSequen   := 0
Local nPSbLote   := 0
Local nPHist     := 0
Local nPTpSald	 := 0
Local nPMoedLC	 := 0
Local nPOrigem	 := 0
Local nX         := 0
Local nY         := 0
Local nZ         := 0
Local nLen       := 0
Local nPosDC	 := 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas na contabilizacao via SIGACON           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aContas    := Array(30)
Local RetcProva  := {}
Local j          := 0
Local n          := 0
Local cSet       := ""
Local cValor1    := ""
Local cValor2    := ""
Local cValor3    := ""
Local cValor4    := ""
Local cValor5    := ""
Local cNitInt    := ""
Local nCont		:= 1

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o arquivo de de contra-prova foi criado correta- ³
//³ mente.                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//If __HeadProva[5] == -1
//	Return(0)
//EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inicializa os parametros default's da funcao                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFAULT lRateio	 := .F.
DEFAULT lExecuta := .T.
DEFAULT cCriterio:= Space(8)
DEFAULT nLinha   := 0
DEFAULT aCT5     := {}
PUBLIC LanceiCtb := .F.

//If ( __lHasCTKSxe == NIL )
//	__lHasCTKSxe := FindFunction('HASCTKSXE')
//EndIf

//If __Ct105Ctk = Nil
//	__Ct105CTK := ExistBlock("CT105CTK")
//Endif

cPrograma := PadR(AllTrim(UPPER(cPrograma)),10)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica qual o metodo de contabilizacao deve ser feito:     ³
//³ CTB ou CON.                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	//ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
	//  Fun‡„o de DETALHE no m¢dulo SIGACTB -> Contabilidade Gerencial
	//  Grava‡„o dos dados na tabela CTK
	//ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
	DEFAULT cPrograma := FunName()
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a tabelas do SIGACTB estao disponiveis           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Select("CTK") == 0
		ChkFile("CTK")
	EndIf	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Arquivos de regras para drill down                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cChaveBusca == Nil
		cChaveBusca := CtRelation(cPadrao,lPosiciona)
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Pesquisa os lancamentos padroes a serem executados           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nX := aScan(aCT5,{|x| x[1] == cPadrao})
	If nX == 0
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa o array de otimizacao dos lancamentos padronizados³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aadd(aCT5,{cPadrao,{}})
		nX := Len(aCT5)
		
		DbSelectArea("CT5")
		dbSetOrder(1)
		
		lQuery   := .T.
		cAliasCT5:= "DETPROVA"
				
		cQuery := ""
		
		For nY := 1 To Len(aStruCT5)
			cQuery += ","+aStruCT5[nY][1]
		Next nY
		
		cQuery := "SELECT "+SubStr(cQuery,2)+" "
		cQuery += "FROM "+RetSqlName("CT5")+" CT5 "
		cQuery += "WHERE CT5.CT5_FILIAL='"+xFilial("CT5")+"' AND "
		cQuery += "CT5.CT5_LANPAD='"+cPadrao+"' AND "
		cQuery += "CT5.D_E_L_E_T_=' ' "
		cQuery += "ORDER BY "+SqlOrder(CT5->(IndexKey()))
				
		cQuery := ChangeQuery(cQuery)
				
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasCT5,.T.,.T.)
				
		For nY := 1 To Len(aStruCT5)
			If aStruCT5[nY][2] <> "C"
				TcSetField(cAliasCT5,aStruCT5[nY][1],aStruCT5[nY][2],aStruCT5[nY][3],aStruCT5[nY][4])
			EndIf
		Next nY
		
		nZ := 0

		While !Eof() .And. (cAliasCT5)->CT5_FILIAL == xFilial("CT5") .And. cPadrao == (cAliasCT5)->CT5_LANPAD
			nZ++
			aadd(aCT5[nX][2],{})			
			For nY := 1 To (cAliasCT5)->(FCount())
				aadd(aCT5[nX][2][nZ],{(cAliasCT5)->(FieldName(nY)),(cAliasCT5)->(FieldGet(nY))})
			Next nY
			
			dbSelectArea(cAliasCT5)
			dbSkip()
		EndDo

		If lQuery
			dbSelectArea(cAliasCT5)
			dbCloseArea()
			dbSelectArea("CT5")
		EndIf
	EndIf
	
	//Essa condicao foi incluida, porque quando o arquivo CT5 estava em branco, sem
	//nenhum lancamento padrao cadastrado, ocorria erro de "Array out of bound"	
	If Len(aCt5[nX,2]) > 0
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Execucao dos lancamentos padronizados                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nPLanpad   := aScan(aCT5[nX,2][1],{|x| x[1] == "CT5_LANPAD"})
		nPSequen   := aScan(aCT5[nX,2][1],{|x| x[1] == "CT5_SEQUEN"})
		nPSbLote   := aScan(aCT5[nX,2][1],{|x| x[1] == "CT5_SBLOTE"})
		nPHist     := aScan(aCT5[nX,2][1],{|x| x[1] == "CT5_HIST"})
		nPMoedLC   := aScan(aCT5[nX,2][1],{|x| x[1] == "CT5_MOEDLC"})
		nPTpSald   := aScan(aCT5[nX,2][1],{|x| x[1] == "CT5_TPSALD"})	
		nPOrigem   := aScan(aCT5[nX,2][1],{|x| x[1] == "CT5_ORIGEM"})			
		
		aVlrCT5 := Array(__nQuantas)
		//Se nao existir moeda cadastrada no SIGACTB.		
		If Len(aVlrCT5) = 0
			MsgAlert(STR0051)	//Nao existe nenhuma moeda cadastrada no modulo SIGACTB.		                                             
			Return(0)		
		EndIf

		For nY := 1 To Len(aCT5[nX,2])
			
			aVlrCT5   := AFill(aVlrCT5,0)
			nContador := 0
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se nao for continuacao de historico                          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nPosCT5 := aScan(aCT5[nX,2][nY],{|x| x[1] == "CT5_DC"})
			If aCT5[nX,2][nY][nPosCT5][2] <> "4"
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se existem valores a serem contabilizados.          ³
				//³                                                              ³			
				//³ Como os valores podem ser expressoes complexas estes sao     ³
				//³ armazenados na variavel aVlrCt5 para que nao haja necessidade³
				//³ de serem executados novamente.                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				For nZ := 1 To __nQuantas
					nValor    := 0
					cCampoCT5 := "CT5_VLR"+StrZero(nZ,2)
					nPosCT5 := aScan(aCT5[nX,2][nY],{|x| x[1] == cCampoCT5 })
					If nPosCT5 > 0
						cValor := AllTrim(aCT5[nX,2][nY][nPosCT5][2])
						nValor := &(cValor)
						If Empty(nValor) .Or. nValor == 0
							nContador++
						Else
							aVlrCT5[nZ] := nValor
							nTotal += nValor
						EndIf
					EndIf
				Next nZ
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se houver valores para contabilizar                          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nContador <> __nQuantas
				For nPosCtk := 1 To CTK->(FCount())
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Obtem o nome do campo de destino na tabela CTK               ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cCampoCTK := CTK->(FieldName(nPosCTK))
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Obtem o nome do campo de origem na tabela CT5                ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cCampoCT5 := "CT5_" + SubStr(cCampoCTK,5)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Transfere os valores do campo                                ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					nPosCT5 := aScan(aCT5[nX,2][nY],{|x| x[1] == cCampoCT5 })
					If nPosCT5 > 0
						Do Case
						Case SubStr(cCampoCT5,1,7)=="CT5_VLR"
							nValor := Val(SubStr(cCampoCT5,8,2))								
						Case aStruCTK[nPosCTK][2] == "N"
							cValor	:= AllTrim(aCT5[nX,2][nY][nPosCT5][2])
							If !Empty(cValor)
								nValor := &(cValor)
							EndIf
						Case aStruCTK[nPosCTK][2] == "C"
							If !(cCampoCT5 $ "CT5_USERGI/CT5_USERGA")
								If 	cCampoCT5 $ "CT5_DEBITO"
									cValorDeb := TransLcta(aCT5[nX,2][nY][nPosCT5][2],aStruCTK[nPosCTK][3])
								ElseIf cCampoCT5 $ "CT5_CREDIT"
									cValorCred := TransLcta(aCT5[nX,2][nY][nPosCT5][2],aStruCTK[nPosCTK][3])
									//////////////////////////////////////                                       
									/// CODIGO DA CONTA D/C , CCUSTO D/C
									//////////////////////////////////////
								ElseIf cCampoCT5 $ "CT5_CCD"	
									cCustoDeb	:= TransLcta(aCT5[nX,2][nY][nPosCT5][2],aStruCTK[nPosCTK][3])
								ElseIf cCampoCT5 $ "CT5_CCC"	
									cCustoCred	:= TransLcta(aCT5[nX,2][nY][nPosCT5][2],aStruCTK[nPosCTK][3])
								Endif
							EndIf
						EndCase
					EndIf
				Next nPosCTK
				LanceiCtb := .T.
			EndIf
		
			//////////////////////////////////////////////////////////////////////////////////////////
			////SE TIVER VALOR (DETALHE é necessário verificar todas as posições do array valores
			//// aVlrCT5
			//////////////////////////////////////////////////////////////////////////////////////////
			lGravaRCZ := .F.
			For nCont:= 1 to Len(aVlrCT5)
				If aVlrCT5[nCont] > 0
					lGravaRCZ := .T.
					Exit
				EndiF                                       
			Next
		          
			If lGravaRCZ  
		
				cValorDeb := Iif(TamSx3("RCZ_CONTA")[1]-Len(Alltrim(cValorDeb)) > 0, cValorDeb := cValorDeb+Space(TamSx3("RCZ_CONTA")[1]-Len(Alltrim(cValorDeb))),cValorDeb)
				cValorCred := Iif(TamSx3("RCZ_CONTA")[1]-Len(Alltrim(cValorCred)) > 0, cValorCred := cValorCred+Space(TamSx3("RCZ_CONTA")[1]-Len(Alltrim(cValorCred))),cValorCred)
	
	 			If !Empty(cValorCred)                                                                                                                     			
					dbSelectArea("RCZ")
					dbSetOrder(1)	// Filial + Verba + Centro Custo + Conta Contabil + Dtos ( Data de Lançamento )
					If !dbSeek(xFilial("SRZ")+SRZ->RZ_PD+cCustoCred+cValorCred,.F.) //Dtos(dProximoMes)
		            	RecLock("RCZ",.T.)
							RCZ->RCZ_FILIAL	:= 	SRZ->RZ_FILIAL
							RCZ->RCZ_PD		:=	SRZ->RZ_PD
							RCZ->RCZ_CCUSTO	:=	cCustoCred
							RCZ->RCZ_CONTA	:=	cValorCred		// Conta Contabil
							RCZ->RCZ_DTATUA	:=	dProximoMes		
						MsUnLock()
		    		Endif
	            Endif
	            If !Empty(cValorDeb)
					dbSelectArea("RCZ")
					dbSetOrder(1)	// Filial + Verba + Centro Custo + Conta Contabil + Dtos( Data de Lançamento )
					If !dbSeek(xFilial("SRZ")+SRZ->RZ_PD+cCustoDeb+cValorDeb,.f.) //+Dtos(dProximoMes)
		            	RecLock("RCZ",.T.)
							RCZ->RCZ_FILIAL	:= 	SRZ->RZ_FILIAL
							RCZ->RCZ_PD		:=	SRZ->RZ_PD
							RCZ->RCZ_CCUSTO	:=	cCustoDeb
							RCZ->RCZ_CONTA	:=	cValorDeb		// Conta Contabil
							RCZ->RCZ_DTATUA	:=	dProximoMes			//CtoD("01/"+Substr(cMesCont,5,2)+"/"+Substr(cMesCont,1,4))
						MsUnLock()
		    		Endif
	            Endif
			EndIf
			cValorDeb:=cValorCred:=""
		Next nY
	EndIf

RestArea(aArea)
Return(nTotal)

*/
//-------------------------------------------------------------------
/*/{Protheus.doc} fFilManRH
Função responsável por avaliar o criterio de geracao o preregistro do bloco K150. 
Valida tambem a existencia da  verba, garantindo que nao haja duplicidade.
@param	
@return	lRet
@author	raquel.andrade
@since		19/04/2021
/*/
//-----------------------------------------------------------------
Function fFilManRH(cFilSRV)

	Local nPos		:= 0
	Local lRet		:= .F.
	Local cFilBusca	:=	""
	Local lFilDeAte	:= !Empty(_aTotal[009][1][8]) .And. !Empty(_aTotal[009][1][9])

	DEFAULT cFilSrv	:= xFilial("SRV")

	nPos	:=	aScan(aCodLido , SM0->M0_CGC + SRV->RV_COD)

	If ( nPos == 0 )
		cFilSrv := AllTrim(cFilSRV)
		nPos := aScan(aFilsCalc , {|x| cFilSRV $ x[2] } )

		If ( !( nPos == 0 ) .And. ( aFilsCalc[ nPos , 1 ] ) ) .Or. Empty(cFilSRV) .Or. If(lFilDeAte, (cFilSRV >= _aTotal[009][1][8] .And.  cFilSRV<= _aTotal[009][1][9]),.F.)
			cFilBusca	:= If (Empty(cFilSRV),_aTotal[009][1][8],cFilSRV)
			lRet := If( !Empty(SRV->RV_FILIAL), SRV->RV_FILIAL >= xFilial("SRV", cFilBusca ) .And. SRV->RV_FILIAL <= If(Empty(_aTotal[009][1][9]), Replicate("Z",FWSizeFilial()), xFilial("SRV",_aTotal[009][1][9])) ,.T.)
			If lRet
				aAdd(aCodLido , SM0->M0_CGC + SRV->RV_COD)
			EndIf
		EndIf
	EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} fPdManad
Monta condição de INNER JOIN no select com a tabela SRD na geração
do evento K-300 Itens da Folha de Pagamento
@return	aRetorno
@author	raquel.andrade
@since	19/04/2021
/*/
//-------------------------------------------------------------------
Function fPdManad()

	Local cFilSRV	:= xFilial("SRV",xFilial("SRD")) 
	Local aRetorno	:= {"SRV",  "'" + cFilSRV + "'" + " || RD_PD = RV_FILIAL || RV_COD"}

Return aRetorno
