#INCLUDE "PROTHEUS.CH"
#INCLUDE "GPEA190.CH"
#INCLUDE "FONT.CH"
#INCLUDE "COLORS.CH"

#DEFINE Confirma 1
#DEFINE Redigita 2
#DEFINE Abandona 3

//Variáveis Robô
Static lAutomato	:= IsBlind()
Static aDadRobo		:= {}
Static dDatIni		:= Space(08)
Static dDatFin		:= Space(08)
Static sOpTarefa	:= ""

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ gpea190  ³ Autor ³ M. Stiefano               ³ Data ³  07.12.95  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cadastro Valores de Tarefas                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³             ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data    ³ BOPS/FNC  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Mohanad Odeh|07/06/13 |M12RH01    |Unificacao dos fontes V12                 ³±±
±±³            |         |     RQ3006| modelo de Folha                          ³±±
±±³Emerson Camp|24/07/14 |     TQAIU5| No Incluir, alterar e visualizar o campo ³±±
±±³            |         |           |RO_SEQ havia sido removido, porém ele é   ³±±
±±³            |         |           |necessário no momneto de efetuar a replica³±±
±±³Sidney O.   |27/08/14 |     TQEYAG| Criado mecanismo para, ao cancelar a     ³±±
±±³            |         |           |gravacao dos dados, que os valores        ³±±
±±³            |         |           |digitados em tela sejam descartados       ³±±
±±³WinstonCosta|22/11/18 |           |Automacao do Fonte para execução do Robô  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Function GPEA190(nOpcAuto, aRetAuto, dPerIni, dPerFin, sOpTar)

Local cFiltraSRA											//Variavel para filtro
Local aIndexSRA		:= {}									//Variavel Para Filtro
Local aKeys			:= GetKeys()

Private bFiltraBrw	:= {|| Nil}							 	// Variavel para Filtro de Browse
Private bFilterTar	:= { || .T. }						 	// Filtro de tarefas por periodo
Private bBtnTar		:= { || fGPA190Cpy() } 					// Bloco para copia de linha
Private bNewProf	:= &('{ || SRA->(RA_CATFUNC $ "I*J")}') // Bloco para filtro de funcionalidades para professores
Private aGP190Btn	:= {} 									// Botao apra replica de tarefas
Private aSROSeq	 	:= {} 									// Array contendo todas as sequencias dos lancamentos da tabela SRO
Private aCpyCols	:= {} 									// Array contendo copia do aCols a ser replicado
Private cUltSeq		:= StrZero(0, 5)						// Sequencia incremental dos lancamentos
Private lItemClVl	:= SuperGetMv("MV_ITMCLVL", .F., "2") $ "13"
Private aPerAtual	:= {}
Private dDataIni	:= CTOD("//")
Private dDataFim	:= CTOD("//")

Private lCanAlter 	:= .F. //Informa se houve o cancelamento da acao de alteracao das informacoes do formulario

If lAutomato
	aDadRobo  := aRetAuto	//Variável para funcionamento do Robô
	sOpTarefa := sOpTar

	IF sOpTarefa == 2
		dDatIni	  := IIF(!EMPTY(dPerIni) , GRAVADATA(dPerIni,.F.,5) , Space(08))
		dDatFin	  := IIF(!EMPTY(dPerFin) , GRAVADATA(dPerFin,.F.,5) , Space(08))
	Endif
Endif

// BOTAO PARA REPLICA DE TAREFAS
aAdd(aGP190Btn, {"DESTINOS_OCEAN", bBtnTar, OemToAnsi(STR0022 + STR0023), OemToAnsi(STR0024)}) // "Replicar" ### "...<F2>" ### "Replic."

PRIVATE aRotina := MenuDef() // ajuste para versao 9.12 - chamada da funcao MenuDef() que contem aRotina

cCadastro := OemToAnsi(STR0009)  //"Cadastro de Tarefas"

If nOpcAuto <> Nil
	Do Case
		Case nOpcAuto == 3
			INCLUI := .T.
			ALTERA := .F.
		Case nOpcAuto == 4
			INCLUI := .F.
			ALTERA := .T.
		OtherWise
			INCLUI := .F.
			ALTERA := .F.
	EndCase

	dbSelectArea('SRA')
	nPos := Ascan(aRotina,{|x| x[4]== nOpcAuto})
	If ( nPos <> 0 )
		bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPos,2 ] + "(a,b,c,d,e) }" )
		Eval( bBlock, Alias(), (Alias())->(Recno()),nPos)
	EndIf
Else
	// VERIFICA SE O ARQUIVO ESTA VAZIO
	If !ChkVazio("SRA")
		Return
	EndIf
	// INICIALIZA O FILTRO UTILIZANDO A FUNCAO FILBROWSE
	cFiltraRh 	:= CHKRH("GPEA190","SRA","1")
	bFiltraBrw 	:= {|| FilBrowse("SRA",@aIndexSRA,@cFiltraRH) }
	Eval(bFiltraBrw)
	// ENDERECA A FUNCAO DE BROWSE
	SetBrwCHGAll(.T.)
	dbSelectArea("SRA")
	mBrowse(6, 1,22,75,"SRA",,,,,,fCriaCor())
	// DELETA O FILTRO UTILIZANDO A FUNCAO FILBROWSE
	EndFilBrw("SRA",aIndexSra)
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp190Vis  ³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de visualizacao Valores de Tarefas                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ gp190Vis(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ gpea190                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190Vis(cAlias, nReg, nOpcx)

Local aNoFields 	:= {}
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local aArea			:= GetArea()
Local bKey			:= { || SRO->RO_FILIAL + SRO->RO_MAT }
Local bAfterHeader	:= { || }
Local bSet15		:= { || NIL }
Local bSet24		:= { || NIL }
Local  aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T. , .F.}) //[1] Acesso; [2]Ofusca
Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 	:= {}
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

Local cFil      	:= SRA->RA_FILIAL
Local cMat      	:= SRA->RA_MAT
Local cKey			:= cFil + cMat
Local cPicture		:= ""
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.
Local nSROOrd		:= RetOrdem("SRO" , "RO_FILIAL+RO_MAT+DTOS(RO_DATA)+RO_CODTAR")
Local oDlg
Local oFont
Local oGroup

// FILTRO DE CAMPOS DEMONSTRADOS NA GET
aNoFields := {"RO_FILIAL","RO_MAT"}

If !lItemClVl
	aAdd(aNoFields, "RO_ITEM")
	aAdd(aNoFields, "RO_CLVL")
EndIf

If !Eval(bNewProf)
	//aAdd(aNoFields, "RO_SEQ"	)  //Este campo é necessário no momento de executar a replica, sem ele gera error log
	aAdd(aNoFields, "RO_CONTSEQ")
	aAdd(aNoFields, "RO_TPALT")
	aAdd(aNoFields, "RO_HRSEXT")
	aAdd(aNoFields, "RO_HRSFAL")
	aAdd(aNoFields, "RO_QTDSEM")
	aAdd(aNoFields, "RO_TIPO")
EndIf

cAlias := "SRO"
DbSelectArea(cAlias)
// TELA PARA SELECAO DAS TAREFAS DEMONSTRADAS
If !SelPer()
	RestArea(aArea)
	Return(.F.)
EndIf

// ALTERA PICTURE DO CAMPO RO_QUANT P/ NAO ESTOURAR NO RC_HORAS
cPicture	:= GetSx3Cache("RC_HORAS" , "X3_PICTURE")
bAfterHeader:= {|| If((nPosSRO := aScan(aHeader, {|x| x[1] == "RC_HORAS"})) > 0, aHeader[nPosSRO][3] := cPicture,)}
// MONTA A ENTRADA DE DADOS DO ARQUIVO
Private aTela[ 0, 0 ], aGets[ 0 ], aHeader, aCols

// MONTA ACOLS, AHEADER E PREENCHE A GETDADOS
FillGetDados(	nOpcx				,; //1-nOpcx - numero correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
				cAlias				,; //2-cAlias - area a ser utilizada;
				nSROOrd				,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
				cKey				,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
				bKey				,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
				bFilterTar			,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
				aNoFields			,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
				Nil					,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
				Nil					,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
				Nil					,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
				Nil					,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
				Nil					,; //12-lEmpty
				aHeader				,; //13-aHeaderAux
				Nil					,; //14-aColAux
				Nil					,; //15-bAfterCols - Bloco de codigo a ser executado após a inclusão de uma linha no Acols
				Nil					,; //16-bBeforeCols - Bloco de codigo contendo expressão para sair do While, é executado antes de inserir nova linha no aCols
				Nil					,; //17-bAfterHeader - Bloco de codigo a ser executado após o preenchimento do aheader com os campos padrão e antes de incluir os campos reservados para o WalkThru. Ex: {|aHeader| AlterHeader(aHeader) }
				Nil					,; //18-cAliasQry
				Nil					 ; //19-bCriaVar
			)

// QUANDO A FILLGETDADOS RETORNA APENAS 1 ELEMENTO S/ DATA, NAO HA DADOS NO ARQUIVO
If Len(aCols) == 1 .And. Empty(aCols[1][GdFieldPos("RO_DATA")])
	Help(" ", 1, "A190SLANC")
	RestArea(aArea)
	Return(.F.)
EndIf

//MONTA AS DIMENSOES DOS OBJETOS
aAdvSize		:= MsAdvSize()
aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
aAdd(aObjCoords , { 000 , 020 , .T. , .F. })
aAdd(aObjCoords , { 000 , 000 , .T. , .T. })
aObjSize		:= MsObjSize(aInfoAdvSize , aObjCoords)

//Tratamento dados sensíveis
If aOfusca[2]
	aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
	IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
		lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
	ENDIF
	IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
		lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
	ENDIF
EndIf


// MOSTRA O CORPO DO CADASTRO DE VALORES DE TAREFAS
nOpca := 0
DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) FROM aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL  //"Valores de Tarefas"

	@ aObjSize[1,1], aObjSize[1,2]       GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.18 LABEL OemToAnsi(STR0011) OF oDlg PIXEL				// "Matricula:"
	oGroup:oFont:= oFont
	@ aObjSize[1,1], aObjSize[1,4]*0.185 GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.87 LABEL OemToAnsi(STR0012) OF oDlg PIXEL	// "Nome:"
	oGroup:oFont:= oFont
	@ aObjSize[1,1], aObjSize[1,4]*0.875 GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]      LABEL OemToAnsi(STR0015) OF oDlg PIXEL						// "Admiss„ao:"
	oGroup:oFont:= oFont

	@ aObjSize[1,1]+10 , aObjSize[1,2]* 2.5  SAY StrZero(Val(SRA->RA_MAT),TamSx3("RA_MAT    ")[1]) 			SIZE 050,10 OF oDlg PIXEL FONT oFont
	@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.2  SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME)) 	SIZE 146,10 OF oDlg PIXEL FONT oFont
	@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.89 SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

	oGet := MSGetDados():New(aObjSize[2,1],aObjSize[2,2],aObjSize[2,3],aObjSize[2,4],nOpcx,,,"",.F.,,2)
	oGet:nMax	:=	999999

	bSet15 := {||nopca:=1,oDlg:End()}
	bSet24 := {||oDlg:End()}

ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg , bSet15  , bSet24)

// RESTAURA A INTEGRIDADE DA JANELA
RestArea(aArea)

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ gp190Inc ³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao de inclusao de Valores de Tarefas                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ gp190Inc(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do Arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Opcao selecionada                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190Inc(cAlias, nReg, nOpcx)

Local aNoFields		:= {}
Local aVirtual		:= {}
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T. , .F.}) //[1] Acesso; [2]Ofusca
Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 	:= {}
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

Local aArea			:= GetArea()
Local aKeys			:= GetKeys()
Local bKey			:= { || SRO->RO_FILIAL + SRO->RO_MAT }
Local bAfterHeader	:= { || }
Local bSet15		:= { || NIL }
Local bSet24		:= { || NIL }
Local cFil      	:= SRA->RA_FILIAL
Local cMat      	:= SRA->RA_MAT
Local cKey			:= cFil + cMat
Local cPicture		:= ""
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.
Local nSROOrd		:= RetOrdem("SRO" , "RO_FILIAL+RO_MAT+DTOS(RO_DATA)+RO_CODTAR")
Local oDlg
Local oFont
Local oGroup
Local nX, nY, nT	:= 0

Private lTemItem	:= SRO->(FieldPos("RO_ITEM") # 0)
Private lTemClVl	:= SRO->(FieldPos("RO_CLVL") # 0)
Private aColsAnt	:= {}
Private oGet


If (Type("lGPEA011") <> "U" .And. lGPEA011) .Or. Type("lGPEA011") == "U"
	nOpcx := 3
	lGPEA011 := .F.
Else
	nOpcx := 4
	GP190Alt(cAlias, nReg, nOpcx)
	Return(.F.)
Endif

// ROTINA PARA VALIDAR A CRIACAO DE NOVOS CAMPOS GERAR SEQUENCIA
If !fGPA190Atu(Eval(bNewProf))
	RestArea(aArea)
	Return
EndIf

aSROSeq := {}
cUltSeq	:= StrZero(0, 5)

// FILTRO DE CAMPOS DEMONSTRADOS NA GET
aNoFields := {"RO_FILIAL","RO_MAT"}

If !lItemClVl
	aAdd(aNoFields, "RO_ITEM")
	aAdd(aNoFields, "RO_CLVL")
EndIf

If !Eval(bNewProf)
	//aAdd(aNoFields, "RO_SEQ")  //Este campo é necessário no momento de executar a replica, sem ele gera error log
	aAdd(aNoFields, "RO_CONTSEQ")
	aAdd(aNoFields, "RO_TPALT")
	aAdd(aNoFields, "RO_HRSEXT")
	aAdd(aNoFields, "RO_HRSFAL")
	aAdd(aNoFields, "RO_QTDSEM")
	aAdd(aNoFields, "RO_TIPO")
EndIf

cAlias := "SRO"

dbSelectArea(cAlias)

// ALTERA PICTURE DO CAMPO RO_QUANT P/ NAO ESTOURAR NO RC_HORAS
cPicture	:= GetSx3Cache("RC_HORAS" , "X3_PICTURE")
bAfterHeader:= { || If((nPosSRO := aScan(aHeader, { |x| x[1] == "RC_HORAS" })) > 0, aHeader[ nPosSRO ][ 3 ] := cPicture,) }

// MONTA A ENTRADA DE DADOS DO ARQUIVO
Private aTela[0,0], aGets[0], aHeader, aCols

// VERIFICA SE EXISTEM LANCAMENTOS
If SRO->(dbSeek(cFil + cMat))
	Help(" ", 1, "A040CLANC")
	RestArea(aArea)
	Return(.F.)
EndIf

// MONTA ACOLS, AHEADER E PREENCHE A GETDADOS
FillGetDados(	nOpcx				,; //1-nOpcx - numero correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
				cAlias				,; //2-cAlias - area a ser utilizada;
				nSROOrd				,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
				cKey				,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
				bKey				,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
				bFilterTar			,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
				aNoFields			,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
				Nil					,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
				Nil					,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
				Nil					,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
				Nil					,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
				Nil					,; //12-lEmpty
				aHeader				,; //13-aHeaderAux
				Nil					,; //14-aColAux
				Nil					,; //15-bAfterCols - Bloco de codigo a ser executado após a inclusão de uma linha no Acols
				Nil					,; //16-bBeforeCols - Bloco de codigo contendo expressão para sair do While, é executado antes de inserir nova linha no aCols
				bAfterHeader		,; //17-bAfterHeader - Bloco de codigo a ser executado após o preenchimento do aheader com os campos padrão e antes de incluir os campos reservados para o WalkThru. Ex: {|aHeader| AlterHeader(aHeader) }
				Nil					,; //18-cAliasQry
				Nil					 ; //19-bCriaVar
			)

// CRIA ARRAY DE CAMPOS VIRTUAIS
aEval(aHeader, { |x| If(x[ 10 ] == "V", aAdd(aVirtual, x[ 1 ]) ,) })

// CRIA ATALHO VIA F2 P/ COPIAR LANCAMENTO DE TAREFA
SetKey(VK_F2 , bBtnTar)

Begin Sequence

	IF !(GpeLocks(nOpcx, cAlias, , 2, .T., cFil + cMat))
       Break
    EndIF

	//MONTA AS DIMENSOES DOS OBJETOS
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd(aObjCoords , { 000 , 020 , .T. , .F. })
	aAdd(aObjCoords , { 000 , 000 , .T. , .T. })
	aObjSize		:= MsObjSize(aInfoAdvSize , aObjCoords)

	// MOSTRA O CORPO DOS VALORES VARIAVEIS
	nOpca := 0

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot) // CAMPOS SEM ACESSO
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
	EndIf

	If !lAutomato
		DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
		DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) FROM aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL //"Valores de Tarefas"

		@ aObjSize[1,1], aObjSize[1,2] 			GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.18 	LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "Matricula:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1], aObjSize[1,4]*0.185 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.87 	LABEL OemToAnsi(STR0012) OF oDlg PIXEL	// "Nome:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1], aObjSize[1,4]*0.875 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4] 		LABEL OemToAnsi(STR0015) OF oDlg PIXEL	// "Admissão:"
		oGroup:oFont:= oFont

		@ aObjSize[1,1]+10 , aObjSize[1,2]* 2.5	 SAY StrZero(Val(SRA->RA_MAT),TamSx3("RA_MAT")[1]) 				SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.2	 SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME))	SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.89 SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

		oGet := MSGetDados():New(aObjSize[2,1],aObjSize[2,2],aObjSize[2,3],aObjSize[2,4],nOpcx,"gp190LinOk","gp190TudOk","+RO_DATA",.T.,,1)
		oGet:nMax	:=	999999

		bSet15 := {||nOpca:=1,If(oGet:TudoOk(),oDlg:End(),nOpca:=0)}
		bSet24 := {||oDlg:End()}

		// ATIVA CLIQUE DIREITO DO MOUSE PARA HABILITAR MENU
		oGet:oBrowse:bRClicked	:= { |o,nX,nY| oMenu:Activate(nX,nY,oGet:oBrowse) }

		// MONTA OPCOES DE MENU "COPIAR" E "COLAR"
		MENU oMenu POPUP
			MENUITEM oemToAnsi(STR0025)	Action GPA190MCp() //"COPIAR"
			MENUITEM oemToAnsi(STR0026)	Action GPA190MPs() //"COLAR"
		ENDMENU

		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg , bSet15 , bSet24, Nil, aGP190Btn)
	Else
		If MsGetDAuto(aDadRobo,"gp190LinOk","gp190TudOk",,5)
			nOpcA := Confirma
		EndIf
	EndIf

	If nOpcA == 1 .AND. !lCanAlter
		If lAutomato
			For nY := 1 To Len(aHeader)
				If ExistTrigger(Trim(aHeader[nY,2])) // Verifica se existe trigger para este campo
					For nT:=1 To Len(aCols)
						RunTrigger(2,nT,nil,,Trim(aHeader[nY,2]))
						IF !GPA190Blq(aCols[nT,nY])
							Return()
						Endif

						IF !GP190Tar(nT)
							Return()
						Endif
					Next nT
				Endif
			Next nY
		Endif

		Begin Transaction
			GP190Grava(cAlias,aVirtual)
			//Processa Gatilhos
			EvalTrigger()
		End Transaction
	Else
		lCanAlter := .F.
	Endif
End Sequence

FreeLocks(cAlias , NIL , .T.)

// RESTAURA A INTEGRIDADE DA JANELA
RestKeys(aKeys, .T.)
RestArea(aArea)
MBrChgLoop(.F.)

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp190Alt  ³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de alteracao de Valores de Tarefas                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ gp190Alt(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do Arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Opcao selecionada no menu                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190Alt(cAlias, nReg, nOpcx)

Local aNoFields 	:= {}
Local aVirtual   	:= {}
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local  aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T. , .F.}) //[1] Acesso; [2]Ofusca
Local aFldRot 		:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 	:= {}
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

Local aArea			:= GetArea()
Local aKeys			:= GetKeys()
Local bKey			:= { || SRO->RO_FILIAL + SRO->RO_MAT }
Local bAfterHeader	:= { || }
Local bSet15		:= { || NIL }
Local bSet24		:= { || NIL }
Local cFil      	:= SRA->RA_FILIAL
Local cMat      	:= SRA->RA_MAT
Local cKey			:= cFil + cMat
Local cPicture		:= ""

Local nSROOrd		:= RetOrdem("SRO" , "RO_FILIAL+RO_MAT+DTOS(RO_DATA)+RO_CODTAR")
Local oDlg
Local oFont
Local oGroup
Local uSeekFor

Private lTemItem	:= SRO->(FieldPos("RO_ITEM") # 0)
Private lTemClVl	:= SRO->(FieldPos("RO_CLVL") # 0)
Private aRegAlt		:= {}
Private aColsAnt	:= {}
Private oGet

// ROTINA PARA VALIDAR A CRIACAO DE NOVOS CAMPOS GERAR SEQ
If !fGPA190Atu(Eval(bNewProf))
	RestArea(aArea)
	Return
EndIf

aSROSeq := {}
cUltSeq	:= StrZero(0, 5)

// FILTRO DE CAMPOS DEMONSTRADOS NA GET
aNoFields := { "RO_FILIAL","RO_MAT" }

If !lItemClVl
	aAdd(aNoFields, "RO_ITEM"		)
	aAdd(aNoFields, "RO_CLVL"		)
EndIf

If !Eval(bNewProf)
	//aAdd(aNoFields, "RO_SEQ")   //Este campo é necessário no momento de executar a replica, sem ele gera error log
	aAdd(aNoFields, "RO_CONTSEQ"	)
	aAdd(aNoFields, "RO_TPALT")
	aAdd(aNoFields, "RO_HRSEXT")
	aAdd(aNoFields, "RO_HRSFAL")
	aAdd(aNoFields, "RO_QTDSEM")
	aAdd(aNoFields, "RO_TIPO")
EndIf


cAlias := "SRO"

dbSelectArea(cAlias)

// TELA PARA SELECAO DAS TAREFAS DEMONSTRADAS
If !SelPer()
	RestArea(aArea)
	Return(.F.)
EndIf

dbSelectArea(cAlias)

// ALTERA PICTURE DO CAMPO RO_QUANT P/ NAO ESTOURAR NO RC_HORAS
cPicture	:= GetSx3Cache("RC_HORAS" , "X3_PICTURE")
bAfterHeader:= { || If((nPosSRO := aScan(aHeader, { |x| x[1] == "RC_HORAS" })) > 0, aHeader[ nPosSRO ][ 3 ] := cPicture,) }

// ARMAZENA SEQUENCIA DE TODOS OS LANCAMENTOS DO SRO P/ CALCULO
uSeekFor	:= GetCBSource(bFilterTar)

If Eval(bNewProf) .And. cPaisLoc == "BRA"
	uSeekFor	:= StrTran(uSeekFor, "{|| ", "{|| aAdd(aSROSeq, SRO->RO_SEQ), ")
EndIf

uSeekFor	:= &(uSeekFor)

// MONTA A ENTRADA DE DADOS DO ARQUIVO
Private aTela[0,0], aGets[0], aHeader, aCols

// MONTA ACOLS, AHEADER E PREENCHE A GETDADOS
FillGetDados(	nOpcx				,; //1-nOpcx - numero correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
				cAlias				,; //2-cAlias - area a ser utilizada;
				nSROOrd				,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
				cKey				,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
				bKey				,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
				uSeekFor			,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
				aNoFields			,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
				Nil					,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
				Nil					,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
				Nil					,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
				Nil					,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
				Nil					,; //12-lEmpty
				aHeader				,; //13-aHeaderAux
				Nil					,; //14-aColAux
				Nil					,; //15-bAfterCols - Bloco de codigo a ser executado após a inclusão de uma linha no Acols
				Nil					,; //16-bBeforeCols - Bloco de codigo contendo expressão para sair do While, é executado antes de inserir nova linha no aCols
				bAfterHeader		,; //17-bAfterHeader - Bloco de codigo a ser executado após o preenchimento do aheader com os campos padrão e antes de incluir os campos reservados para o WalkThru. Ex: {|aHeader| AlterHeader(aHeader) }
				Nil					,; //18-cAliasQry
				Nil					 ; //19-bCriaVar
			)

// CRIA ARRAY DE CAMPOS VIRTUAIS
aEval(aHeader, { |x| If(x[ 10 ] == "V", aAdd(aVirtual, x[ 1 ]) ,) })

// QUANDO A FILLGETDADOS RETORNA APENAS 1 ELEMENTO S/ DATA, NAO HA DADOS NO ARQUIVO
If Len(aCols) == 1 .And. Empty(aCols[ 1 ][ GdFieldPos("RO_DATA") ])
	Help(" ", 1, "A190SLANC")
	RestArea(aArea)
	Return(.F.)
EndIf

// ORDENA SEQ. EM ORDEM DECRESCENTE E ARMAZENA MAIOR VALOR
If !Empty(aSROSeq)
	aSort(aSROSeq,,, {|x,y| x > y})
	cUltSeq	:= aSROSeq[1]
EndIf

// MONTA ARRAY DE REGISTROS ALTERADOS
aEval(aCols, {|x| aAdd(aRegAlt, x[GdFieldPos("RO_REC_WT")])})

// CRIA ATALHO VIA F2 P/ COPIAR LANCAMENTO DE TAREFA
SetKey(VK_F2, bBtnTar)

Begin Sequence
	IF !(GpeLocks(nOpcx, cAlias,aRegAlt, 2,.F.,cFil + cMat))
	   Break
    EndIF

	// CRIA VETOR ACOLSANT COMO CLONE DO ACOLS PARA USO EM VALIDACAO
	aColsAnt := aClone(aCols)

	//MONTA AS DIMENSOES DOS OBJETOS
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd(aObjCoords , { 000 , 020 , .T. , .F. })
	aAdd(aObjCoords , { 000 , 000 , .T. , .T. })
	aObjSize		:= MsObjSize(aInfoAdvSize , aObjCoords)

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
	EndIf

	// MOSTRA O CORPO DOS VALORES VARIAVEIS
	nOpca := 0
	If !lAutomato
		DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
		DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) FROM aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL //"VALORES DE TAREFAS"

		@ aObjSize[1,1], aObjSize[1,2] 			GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.18 	LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "MATRICULA:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1], aObjSize[1,4]*0.185 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.87 	LABEL OemToAnsi(STR0012) OF oDlg PIXEL	// "NOME:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1], aObjSize[1,4]*0.875 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4] 		LABEL OemToAnsi(STR0015) OF oDlg PIXEL	// "ADMISSAO:"
		oGroup:oFont:= oFont

		@ aObjSize[1,1]+10 , aObjSize[1,2]* 2.5		SAY StrZero(Val(SRA->RA_MAT),TamSx3("RA_MAT")[1]) 				SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.2		SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME))	SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.89	SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

		oGet := MSGetDados():New(aObjSize[2,1],aObjSize[2,2],aObjSize[2,3],aObjSize[2,4],nOpcx,"gp190LinOk","gp190TudOk","+RO_DATA",.T.,,)
		oGet:nMax	:=	999999

		bSet15 := {||nOpca:=1,If(oGet:TudoOk(),oDlg:End(),nOpca:=0)}
		bSet24 := {||oDlg:End()}

		// ATIVA CLIQUE DIREITO DO MOUSE PARA HABILITAR MENU
		oGet:oBrowse:bRClicked	:= {|o,nX,nY| oMenu:Activate(nX,nY,oGet:oBrowse)}

		// MONTA OPCOES DE MENU "COPIAR" E "COLAR"
		MENU oMenu POPUP
			MENUITEM OemToAnsi(STR0025)	Action GPA190MCp() //"COPIAR"
			MENUITEM OemToAnsi(STR0026)	Action GPA190MPs() //"COLAR"
		ENDMENU

		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg, bSet15, bSet24, Nil, aGP190Btn)
	Else
		If MsGetDAuto( aDadRobo, "gp190LinOk", "gp190TudOk", , 5)
			nOpcA := Confirma
		EndIf
	EndIf

	If nOpcA == 1
		Begin Transaction
			GP190Grava(cAlias,aVirtual,aRegAlt)
			//Processa Gatilhos
			EvalTrigger()
		End Transaction
	Endif

End Sequence

FreeLocks(cAlias, NIL, .T.)

// RESTAURA A INTEGRIDADE DA JANELA
cAlias := "SRA"
dbSelectArea(cAlias)
RestKeys(aKeys, .T.)
nOpca := 0

Return(nOpca)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ gp190Del ³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de exclusao de Valores de Tarefas                 ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ gp190Del(ExpC1,ExpN1)                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do Arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190Del(cAlias, nReg, nOpcx)

Local aNoFields 		:= {}
Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjSize			:= {}
Local aObjCoords		:= {}
Local aOfusca	 		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T. , .F.}) //[1] Acesso; [2]Ofusca
Local aFldRot 			:= {'RA_NOME', 'RA_ADMISSA'}
Local aFldOfusca 		:= {}
Local lOfuscaNom		:= .F.
Local lOfuscaAdm		:= .F.

Local aArea				:= GetArea()
Local aRegExc 			:= {}
Local aKeys				:= GetKeys()
Local bKey				:= { || SRO->RO_FILIAL + SRO->RO_MAT }
Local bAfterHeader		:= { || }
Local bSet15			:= { || NIL }
Local bSet24			:= { || NIL }
Local cFil      		:= SRA->RA_FILIAL
Local cMat      		:= SRA->RA_MAT
Local cKey				:= cFil + cMat
Local cPicture			:= ""
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.
Local nSROOrd			:= RetOrdem("SRO" , "RO_FILIAL+RO_MAT+DTOS(RO_DATA)+RO_CODTAR")
Local oDlg
Local oFont
Local oGroup
Local nx				:= 0
Local cTarBloq			:= OemToAnsi(STR0054) //"Alguma(s) Tarefa(s) está(ão) bloqueada(s) para este periodo! Contate o responsavel do RH! Data(s): "
Local lBlq 				:= .F.
Local cRot				:= fGetRotOrdinar()

// FILTRO DE CAMPOS DEMONSTRADOS NA GET
aNoFields := {"RO_FILIAL","RO_MAT"}

If !lItemClVl
	aAdd(aNoFields, "RO_ITEM")
	aAdd(aNoFields, "RO_CLVL")
EndIf

If !Eval(bNewProf)
	//aAdd(aNoFields, "RO_SEQ") //Este campo é necessário no momento de executar a replica, sem ele gera error log
	aAdd(aNoFields, "RO_CONTSEQ")
	aAdd(aNoFields, "RO_TPALT")
	aAdd(aNoFields, "RO_HRSEXT")
	aAdd(aNoFields, "RO_HRSFAL")
	aAdd(aNoFields, "RO_QTDSEM")
	aAdd(aNoFields, "RO_TIPO")
EndIf

cAlias := "SRO"

dbSelectArea(cAlias)

// TELA PARA SELECAO DAS TAREFAS DEMONSTRADAS
If !SelPer()
	RestArea(aArea)
	Return(.F.)
EndIf

dbSelectArea(cAlias)

// ALTERA PICTURE DO CAMPO RO_QUANT P/ NAO ESTOURAR NO RC_HORAS
cPicture	:= GetSx3Cache("RC_HORAS", "X3_PICTURE")
bAfterHeader:= {|| If((nPosSRO := aScan(aHeader, {|x| x[1] == "RC_HORAS"})) > 0, aHeader[nPosSRO][3] := cPicture,)}

// MONTA A ENTRADA DE DADOS DO ARQUIVO
Private aTela[0,0], aGets[0], aHeader, aCols

// MONTA ACOLS, AHEADER E PREENCHE A GETDADOS
FillGetDados(	nOpcx				,; //1-nOpcx - numero correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
				cAlias				,; //2-cAlias - area a ser utilizada;
				nSROOrd				,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
				cKey				,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
				bKey				,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
				bFilterTar			,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
				aNoFields			,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
				Nil					,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
				Nil					,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
				Nil					,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
				Nil					,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
				Nil					,; //12-lEmpty
				aHeader			,; //13-aHeaderAux
				Nil					,; //14-aColAux
				Nil					,; //15-bAfterCols - Bloco de codigo a ser executado após a inclusão de uma linha no Acols
				Nil					,; //16-bBeforeCols - Bloco de codigo contendo expressão para sair do While, é executado antes de inserir nova linha no aCols
				bAfterHeader		,; //17-bAfterHeader - Bloco de codigo a ser executado após o preenchimento do aheader com os campos padrão e antes de incluir os campos reservados para o WalkThru. Ex: {|aHeader| AlterHeader(aHeader) }
				Nil					,; //18-cAliasQry
				Nil					 ; //19-bCriaVar
			)

// QUANDO A FILLGETDADOS RETORNA APENAS 1 ELEMENTO S/ DATA, NAO HA DADOS NO ARQUIVO
If Len(aCols) == 1 .And. Empty(aCols[1][GdFieldPos("RO_DATA")])
	Help(" ", 1, "A190SLANC")
	RestArea(aArea)
	Return(.F.)
EndIf

//BLOQUEIO NA EXCLUSAO
For nx := 1 To Len(aCols)
	If !Empty(aCols[nx])
		If !fVldAccess(SRA->RA_FILIAL, aCols[nx][GdFieldPos("RO_DATA")],  Space(TamSx3("RC_SEMANA")[1]), .F., cRot)
			cTarBloq += If(lBlq, " ," + DTOS(aCols[nx][GdFieldPos("RO_DATA")]), DTOS(aCols[nx][GdFieldPos("RO_DATA")]))
			lBlq := .T.
		Else
			//MONTA ARRAY DE REGISTROS QUE SERAO EXCLUIDOS
			aAdd(aRegExc, aCols[nx][GdFieldPos("RO_REC_WT")])
		EndIf
	EndIf
Next nx

Begin Sequence
	IF !(GpeLocks(nOpcx, cAlias,aRegExc, 2, .F., cFil + cMat))
		Break
	EndIF

	// MONTA AS DIMENSOES DOS OBJETOS
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= {aAdvSize[1], aAdvSize[2], aAdvSize[3], aAdvSize[4], 5, 5}
	aAdd(aObjCoords , {000, 020, .T., .F.})
	aAdd(aObjCoords , {000, 000, .T., .T.})
	aObjSize		:= MsObjSize(aInfoAdvSize , aObjCoords)

	// MOSTRA O CORPO DOS VALORES VARIAVEIS
	nOpca := 0

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca := FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot ) // CAMPOS SEM ACESSO
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
	EndIf

	If !lAutomato
		DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
		DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) FROM aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL //"VALORES DE TAREFAS"

		@ aObjSize[1,1], aObjSize[1,2] 			GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.18  	LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "MATRICULA:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1], aObjSize[1,4]*0.185 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.87  	LABEL OemToAnsi(STR0012) OF oDlg PIXEL	// "NOME:"
		oGroup:oFont:= oFont
		@ aObjSize[1,1], aObjSize[1,4]*0.875 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4] 		LABEL OemToAnsi(STR0015) OF oDlg PIXEL	// "ADMISSAO:"
		oGroup:oFont:= oFont

		@ aObjSize[1,1]+10 , aObjSize[1,2]* 2.5		SAY StrZero(Val(SRA->RA_MAT),TamSx3("RA_MAT    ")[1]) 			SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.2		SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME)) 	SIZE 146,10 OF oDlg PIXEL FONT oFont
		@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.89	SAY If(lOfuscaAdm,Replicate('*',10),Dtoc(SRA->RA_ADMISSA))		SIZE 050,10 OF oDlg PIXEL FONT oFont

		oGet := MSGetDados():New(aObjSize[2,1],aObjSize[2,2],aObjSize[2,3],aObjSize[2,4],nOpcx,,,"",.F.,,2)
		oGet:nMax	:=	999999

		bSet15 := {||nopca:=1,oDlg:End()}
		bSet24 := {||oDlg:End()}

		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg, bSet15, bSet24)
	Else
		If MsGetDAuto( aDadRobo, , , , 5)
			nOpcA := Confirma
		EndIf
	EndIf

	If nOpcA == 1
		Begin Transaction
			If lBlq
				MsgInfo(cTarBloq,OemToAnsi(STR0042))
			EndIf
			dbSelectArea(cAlias)
			PonDelRecnos(cAlias, aRegExc)
		End Transaction
	Endif
End Sequence

FreeLocks(cAlias, NIL, .T.)

RestArea(aArea)
Return

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp190Grava³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Grava no arquivo de Valores de Tarefas                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ gp190Grava                                                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190Grava(cAlias, aVirtual, aRegAlt)
Local nX			:= 0
Local nY			:= 0
Local nCntDel		:= 0
Local lTudoIgual

Begin Transaction
	dbSelectArea(cAlias)
	If aRegAlt # Nil
		For nX := 1 to Len(aRegAlt)
			lTudoIgual := .T.
			For nY := 1 To Len(aHeader)
				If aCols[nX,nY] # aColsAnt[nX,nY]
					lTudoIgual := .F.
					Exit
				Endif
			Next nY
			If lTudoIgual .And. !GdDeleted(nX)
				Loop
			Endif
			Go aRegAlt[nX]
			RecLock(cAlias,.F.,.T.)

			If GdDeleted(nX)
				nCntDel ++
				dbDelete()
			Else
				For nY := 1 To Len(aHeader)
					cCampo := Trim(aHeader[nY,2])
					If Ascan(aVirtual,cCampo) # 0
						Loop
					Endif

					If lAutomato
						If ExistTrigger(Trim(aHeader[nY,2])) // Verifica se existe trigger para este campo
							RunTrigger(2,nX,nil,,Trim(aHeader[nY,2]))
						Endif
					Endif

					xConteudo := aCols[nX,nY]
					Replace    &cCampo With xConteudo
				Next nY
				If !(SRA->RA_CATFUNC $ "I*J")
					Replace SRO->RO_TIPO WITH "2"
				EndIf
			Endif
		Next nX
		If Len(aCols) > Len(aRegAlt)  // SE TRATA DE INCLUSAO DE ITENS
			gp190GRINC(cAlias, aVirtual, Len(aRegAlt)+1)
		Endif
	Else
		gp190GRINC(cAlias, aVirtual, 1)
	Endif

	If nCntDel > 0
		WRITESX2(cAlias,nCntDel)
	Endif

End Transaction

Return(.T.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp190GRINC³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Grava os registros Incluidos na GetDados                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GPA190GRAVA                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function gp190GRINC(cAlias, aVirtual, nIniciar)
Local nX	:= 0
Local nY	:= 0

For nX := nIniciar to Len(aCols)
	If !GdDeleted(nX)
		RecLock(cAlias,.T.)
		Replace SRO->RO_FILIAL		WITH SRA->RA_FILIAL
		Replace SRO->RO_MAT			WITH SRA->RA_MAT
		Replace SRO->RO_CC			WITH SRA->RA_CC
		If lTemItem
			Replace SRO->RO_ITEM	WITH SRA->RA_ITEM
		Endif
		If lTemClVl
			Replace SRO->RO_CLVL	WITH SRA->RA_CLVL
		Endif
		If !(SRA->RA_CATFUNC $ "I*J")
			Replace SRO->RO_TIPO WITH "2"
		EndIf
		For nY := 1 To Len(aHeader)
			cCampo := Trim(aHeader[nY,2])

			If Ascan(aVirtual,cCampo) # 0
				Loop
			Endif

			xConteudo := aCols[nX,nY]
			Replace &cCampo With xConteudo
		Next nY
	Endif
Next nX
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp190LinOk³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica linha digitada                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190LinOk(o)

Local nx			:= 0
Local nPosDat		:= 0
Local nPosCod		:= 0
Local nPosCC		:= 0
Local nPosItem		:= 0
Local nPosClVl		:= 0
Local i				:= 0
Local lRet 			:= .T.
Local lTarFix		:= .F.
Local nPosDtDe		:= GdFieldPos("RO_DATA")
Local nPosDtAte		:= GdFieldPos("RO_DATAATE")
Local cSemDig		:= GdFieldGet("RC_SEMANA")

Local bFltCols		:= {|| .T.}
Local dFolMes		:= aCols[oGet:oBrowse:nAt,nPosDtDe]
Local nPosHrsEx		:= GdFieldPos("RO_HRSEXT")
Local nPosHrsFl		:= GdFieldPos("RO_HRSFAL")
Local nPosQtd		:= GdFieldPos("RO_QUANT")
Local nPosAul		:= GdFieldPos("RO_QTDSEM")
Local nPosTipo		:= GdFieldPos("RO_TIPO")
Local nPosCodCC 	:= GdFieldPos("RO_CC")
Local nPosTpAum		:= GdFieldPos("RO_TPALT")
Local nPosQt		:= GdFieldPos("RO_QUANT")
Local lNewFld		:= nPosHrsEx * nPosHrsFl > 0
Local aCposKey		:= {}
Local aColsTmp  	:= aClone(aCols)
Local aAux			:= aClone(aCols)
Local nPosVTotal	:= GdFieldPos("RO_VALTOT")

nCont := 0

If !Empty(aCols[n, nPosDtDe]) .AND. (aCols[n, nPosDtDe] < SRA->RA_ADMISSA)
	Alert(aHeader[nPosDtDe,1] + OemToAnsi(STR0053)) //"NAO PODE SER MENOR DO QUE DATA DE ADMISSAO"
	Return(.F.)
EndIf

If !Empty(aCols[n, nPosDtDe]) .AND. aCols[n, nPosDtDe] < dDataIni .AND. (EMPTY(aCols[n][nPosDtAte]) .OR.  aCols[n][nPosDtAte] >= dDataIni) .AND.;
	aCols[n][GdFieldPos("RO_REC_WT")] == 0 .AND. !GdDeleted()
	Aviso(STR0017, STR0019, {STR0018})	// "ALERTA"###"O PERIODO INFORMADO ESTA ENCERRADO!"###"OK"
	Return(.F.)
EndIf

If lItemClVl
	aCposKey := {"RO_FILIAL", "RO_MAT", "RO_DATA", "RO_CODTAR", "RO_CC", "RO_ITEM", "RO_CLVL"}
Else
	aCposKey := {"RO_FILIAL", "RO_MAT", "RO_DATA", "RO_CODTAR", "RO_CC"}
EndIf

If !(GDVALIDGET(aCposKey, 4))
	Return .F.
EndIf

//VERIFICA SE HOUVE ALTERACAO E SE O LANCAMENTO ESTA LIBERADO
If GdDeleted() .And. oGet:oBrowse:nAt > Len(aColsAnt)
	Return(.T.)
EndIf

If GdDeleted() .AND. (aCols[n, nPosDtDe] < dDataIni .AND. aCols[n][nPosDtAte] < dDataIni) .AND. aCols[n][GdFieldPos("RO_REC_WT")] <> 0
	Aviso(STR0017, STR0055, {STR0018})	// "ALERTA"###"NAO E POSSIVEL EXCLUIR LANCAMENTOS ENCERRADOS!"###"OK"
	Return(.F.)
EndIf

If oGet:oBrowse:nAt > Len(aColsAnt) .Or. !fCompArray(aColsAnt[oGet:oBrowse:nAt] , aCols[oGet:oBrowse:nAt])
	If !fVldAccess(SRA->RA_FILIAL, dFolMes , , .T., fGetRotOrdinar())
		Return(.F.)
	EndIf
EndIf

//VALIDA PERIODO NA MANUTENCAO DE TAREFAS NAS OPCOES 'ENCERRADAS' OU 'VIGENTES'
bFltCols := GetCBSource(bFilterTar)
bFltCols := StrTran(bFltCols, "SRO->RO_DATAATE", "aCols[n][nPosDtAte]")
bFltCols := StrTran(bFltCols, "SRO->RO_DATA", "aCols[n][nPosDtDe]")
bFltCols := &(bFltCols)

If !Eval(bFltCols)
	Aviso(STR0017, OemToAnsi(STR0027), {STR0018}) // "ALERTA" ### "O PERIODO DE VIGENCIA DA TAREFA E INVALIDO DE ACORDO COM O FILTRO SELECIONADO. INFORME UM NOVO PERIODO." ### "OK"
	Return(.F.)
EndIf

If !GdDeleted()
	// VERIFICA SE ESTA CADASTRANDO A VERBA EM DUPLICIDADE
	nPosDat := Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_DATA" })
	nPosCod := Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_CODTAR" })
	nPosCC  := Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_CC" })

	If lTemItem .And. lTemCLVL
		nPosItem:= Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_ITEM" })
		nPosClVl:= Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_CLVL" })
	EndIf

	If nPosDat > 0 .And. nPosCod > 0 .And. nPosCC > 0 .And. Iif(lTemItem, nPosItem > 0,.T.) .And. Iif(lTemClVl, nPosClVl > 0,.T.)
		Aeval(aCols,{ |X| If(X[nPosDat] = aCols[N,nPosDat] .And.;
							 X[nPosCod] = aCols[N,nPosCod] .And.;
							 X[nPosCC]  = aCols[N,nPosCC]  .And.;
							 Iif(lTemItem, X[nPosItem]  = aCols[N,nPosItem],.T.) .And.;
							 Iif(lTemClVl, X[nPosClVl]  = aCols[N,nPosClVl],.T.) , nCont ++ , nCont) })
	EndIf

	If nCont > 1
		Help(" ",1,"A190CCODIG")
		Return(.F.)
	Endif

	For nx = 1 To Len(aHeader)
		If Empty(aCols[n,nx])
			If Trim(aHeader[nx,2]) == "RO_DATA" .and. lRet
				Help(" ",1,"A190SDATAS") //DATA DA TAREFA EM BRANCO
				lRet := .F.
				Exit
			Endif
			If Trim(aHeader[nx,2]) == "RO_CODTAR" .and. lRet
				If !lAutomato
					Help(" ",1,"A190SCODIG") //CODIGO DA TAREFA NAO CADASTRADO OU NAO INFORMADO.
				Endif
				lRet := .F.
				Exit
			Endif
			If Trim(aHeader[nx,2]) == "RO_QUANT" .and. lRet
				If !lNewFld .or. (lNewFld .and. (aCols[n,nPosHrsEx] + aCols[n,nPosHrsFl]) == 0)
					Help(" ",1,"A190SQUANT") //QUANTIDADE DE TAREFA ZERADO.
					lRet := .F.
					Exit
				Endif
			Endif
		Endif
	Next nx

	If n <= Len(aColsAnt) .And. (aCols[n,nPosQtd]  # aColsAnt[n,nPosQtd] .Or.;
		 If (Eval(bNewProf), (aCols[n,nPosAul]  # aColsAnt[n,nPosAul]), .F.) ) .And.;
		 !Empty(aCols[n,nPosDtDe]) .And. (DTOS(aCols[n,nPosDtAte]) >= DTOS(dDataFim) .Or. Empty(aCols[n,nPosDtAte]))
		If !(MsgNoYes(OemToAnsi(STR0028))) //"Deseja confirmar alteração da quantidade da tarefa ativa? É recomendável a inclusão de novo lançamento."
			lCanAlter := .T.

			If Eval(bNewProf)
				aCols[n,nPosAul] 	:= aColsAnt[n,nPosAul]
				aCols[n,nPosVTotal]	:= aColsAnt[n,nPosVTotal]
				aCols[n,nPosQtd]	:= aColsAnt[n,nPosQtd]
				oGet:Refresh()
				lRet := .T.
			Else
				aCols[n,nPosQtd] 	:= aColsAnt[n,nPosQtd]
				aCols[n,nPosVTotal]	:= aColsAnt[n,nPosVTotal]
				oGet:Refresh()
				lRet := .T.
			EndiF
		EndIf
	EndIf

	If !Empty(aCols[n][nPosDtAte]) .And. (aCols[n][nPosDtDe] > aCols[n][nPosDtAte]) .And. lRet
		Help(" ",1,"A190SDtAte")
		lRet := .F.
	EndIf

	If lNewFld .and. aCols[n,nPosQtd] > 0 .and. (aCols[n,nPosHrsEx] + aCols[n,nPosHrsFl] # 0)
		IF !lAutomato
			Help(" ",1,"A190NOHEFL") // Horas-extras e horas faltas devem ser informadas em lctos. separados das tarefas (quantidade zerada), devido ao dissidio retroativo
		Endif
		lRet := .F.
	EndIf

	If SRA->RA_CATFUNC == "I"
		lTarFix := aColsTmp[n][nPosTipo] == "1"
	EndIf

	If SRA->RA_CATFUNC == "I" .And. !lTarFix
		If !(MsgNoYes(OemToAnsi(STR0031))) //"Não existem tarefas fixas vigentes para o professor mensalista! Deseja continuar mesmo assim?"
			Return(.F.)
		EndIf
	EndIf

	aSort(aColsTmp,,, {|x,y| x[nPosDtDe] < y[nPosDtDe]})
	aSort(aAux,,, {|x,y| x[nPosDtDe] < y[nPosDtDe]})

	For i := 1 To Len(aColsTmp)
		// Tratamento necessario apenas devido a copia de tarefas que cria elemento sem data de inicio
		If GdDeleted(i, , aColsTmp)
			Loop
		EndIf

		//CONTROLE DE DUPLICIDADE
		nQtde := 0
		For nx := 1 To Len(aAux)
			If aColsTmp[i][nPosCod] == aAux[nx,nPosCod] .AND. aColsTmp[i][nPosCodCC] == aAux[nx,nPosCodCC] .AND. !GdDeleted(i, ,aColsTmp) .AND.;
				If(lItemClVl, aColsTmp[i][nPosItem] == aAux[nx,nPosItem] .AND.  aColsTmp[i][nPosClVl] == aAux[nx,nPosClVl], .T.)
				If (!Empty(aColsTmp[i][nPosDtDe]) .And. (DTOS(aColsTmp[i][nPosDtAte]) >=  DTOS(dDataFim) .Or.;
					Empty(DTOS(aColsTmp[i][nPosDtAte])))) //SO VALIDA OS PERIODOS VIGENTES
					If DTOS(aColsTmp[i][nPosDtDe]) >= DTOS(aAux[nx,nPosDtDe])
						If !Empty(aColsTmp[i][nPosDtAte])
							If DTOS(aColsTmp[i][nPosDtAte]) <= DTOS(aAux[nx,nPosDtAte]) .OR. DTOS(aColsTmp[i][nPosDtDe]) <= DTOS(aAux[nx,nPosDtAte])
								nQtde++
							EndIf
						Else
							If !Empty(DTOS(aAux[nx,nPosDtAte]))
								If DTOS(aColsTmp[i][nPosDtDe]) <= DTOS(aAux[nx,nPosDtAte])
									nQtde++
								EndIf
							ElseIf i == nx //CONTABILIZA SE FOR O PROPRIO E POR TER CONTEMPLADO OS CRITERIOS ANTERIORES
								nQtde++
							EndIF
						EndIf
					ElseIf Empty(DTOS(aColsTmp[i][nPosDtAte])) //CONTABILIZA SE DATA INICIAL FOR MENOR DO COMPARADO E A DATA FIM ESTIVER EM BRANCO
						nQtde++
					EndIf
					If !Eval(bNewProf) .And. (nQtde > 1) //SE NAO FOR PROFESSOR NAO IMPEDE MULTIPLOS LANCAMENTOS
						Alert(STR0020 + aColsTmp[i][nPosCod] + STR0021)//"EXISTEM REGISTROS DA TAREFA "#" QUE ESTAO LANÇADOS PARA O MESMO PERIODO."
						lRet := .F.
						i := Len(aColsTmp)
						Exit
					EndIf
				EndIf
			EndIf
		Next nx

	Next i

	// PONTO DE ENTRADA QUE PERMITE VALIDAR A INCLUSAO OU NAO DA TAREFA. O RETORNO DEVE SER LOGICO (.T. OU .F.)
	If ExistBlock("Gp190VPE") .and. lRet
		lRet := ExecBlock("Gp190VPE",.F.,.F.)
	Endif
Endif

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp190TudOk³ Autor ³ M. Stiefano           ³ Data ³ 07.12.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190TudOk(o)

	Local nPosDtDe	:= GdFieldPos("RO_DATA")
	Local nx 		:= 0
	Local lRet		:= .T.

	For nx := 1 to Len(aCols)
		If Empty(aCols[nx][nPosDtDe])
			If !lAutomato
				Aviso(STR0017, OemToAnsi(STR0029), { STR0018 })  //"Alerta" ### "Existem tarefas sem data de início!" ### "Ok"
			Endif

			lRet := .F.
		EndIf

	Next nx

	// PONTO DE ENTRADA QUE PERMITE VALIDAR A INCLUSAO OU NAO DA TAREFA.
	// O RETORNO DEVE SER LOGICO (.T. OU .F.)
	If lRet .And. ExistBlock("GP190TOK")
		lRet := ExecBlock("GP190TOK", .F., .F.)
	Endif

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Gp190Tar  ³ Autor ³ RH - Natie            ³ Data ³ 18/04/05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Efetuar calculo do valor total qdo troca tarefa             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190Tar(nLinha)

Local cCodTar
Local nPosColQuant	:= GdFieldPos("RO_QUANT")
Local nPosColVlr	:= GdFieldPos("RO_VALOR")
Local nPosColTot	:= GdFieldPos("RO_VALTOT")
Local nPosDesTar	:= GdFieldPos("RO_DESTAR")
Local nPosVerba		:= GdFieldPos("RO_VERBA")
Local nVlrUnit		:= 0
Local nPos			:= 0

IF lAutomato
	N := nLinha
	cCodTar	:= acols[N,GdFieldPos("RO_CODTAR")]
Else
	cCodTar := &(ReadVar())
Endif

nPOS := fPosTab("S070", cCodTar, "==", 04)

If nPos == 0
	Alert(OemToAnsi(STR0056)) //"Código da Tarefa não cadastrado!"
	Return .F.
EndIf

nVlrUnit := Val(fDescRCC("S070", cCodTar, 1, 3, 34, 12))
aCols[n,nPosVerba]	:= fTabela("S070",nPOS,07)
aCols[n,nPosDesTar] := fDescRCC("S070", cCodTar, 1, 3, 4, 30)

If (nVlrUnit) > 0
	aCols[n,nPosColVlr] := ROUND(nVlrUnit,4)
	aCols[n,nPosColTot] := ROUND(aCols[n,nPosColQuant] * nVlrUnit,4)
Else
	aCols[n,nPosColTot] := ROUND(aCols[n,nPosColQuant] * aCols[n,nPosColVlr],4)
Endif

Return(.T.)


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³RcPostoInit		³Autor³ ABEL RIBEIRO       ³ Data ³20/12/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador Padrao para o Campo RO_POSTO                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Codigo do Posto para o RO_POSTO                              ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_RELACAO do campo RO_POSTO                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RoPostoInit()
Local cRoPostoInit

IF (GetRotExec() == "__cRotInExec")
	cRoPostoInit := Space(GetSx3Cache("RO_POSTO" , "X3_TAMANHO"))
Else
	cRoPostoInit := SRA->RA_POSTO
EndIF

// RETORNA O POSTO QUE ESTA CADASTRADO NO FUNCIONARIO OU RETORNA BRANCO
Return(cRoPostoInit)
/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³RoPostoInit		³Autor³ ABEL RIBEIRO       ³ Data ³20/12/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador Padrao para o Campo RO_DEPTO                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Codigo Departamento  para o RO_depto                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_RELACAO do campo RO_depto                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function RoDeptoInit()

Return(SRA->RA_DEPTO)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SelPer     		³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Montagem de filtro das tarefas dos professores               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SelPer()

Local aSvKeys			:= GetKeys()
Local bSet15			:= { || NIL }
Local bSet24			:= { || NIL }
Local cFil				:= SRA->RA_FILIAL
Local cMat				:= SRA->RA_MAT
Local cKey				:= ((cFil + cMat))
Local cCompDe			:= Space(08) // Data inicial do periodo para importacao do Ponto
Local cCompAte			:= Space(08) // Data final do periodo para importacao do Ponto
Local cCompAux			:= Ctod("//")
Local lRet				:= .F.
Local nOpcA				:= 0
Local oFont
Local oDlg
Local oRadio
Local oGroup
Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjSize			:= {}
Local aObjCoords		:= {}

Private nOpcTar			:= 1 //Opcao para filtro de tarefas: 1-Vigentes;2-Encerradas;3-Todas
Private ocCompDe
Private ocCompAte

bFilterTar	:= { || .T. }

aAdvSize		:= MsAdvSize(, .T., 50)
aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
aAdd(aObjCoords , { 000 , 020 , .T. , .F. })
aAdd(aObjCoords , { 000 , 020 , .T. , .F. })
aAdd(aObjCoords , { 000 , 000 , .T. , .T. })
aObjSize	:= MsObjSize(aInfoAdvSize , aObjCoords)

If !lAutomato
	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg FROM  aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] TITLE OemToAnsi(STR0032) PIXEL 									//"Filtro para os lançamentos de tarefas"

		@ aObjSize[1,1],aObjSize[1,2]	GROUP oGroup TO aObjSize[3,3],aObjSize[3,4] LABEL OemToAnsi(STR0033) OF oDlg PIXEL				//"Informações para filtro das tarefas:"
		oGroup:oFont:=oFont

		@ aObjSize[2,1], aObjSize[2,2]+10 			SAY OemToAnsi(STR0034)	   		SIZE 146,10 OF oDlg PIXEL FONT oFont 				//"Per. Inicial"
		@ aObjSize[2,1], aObjSize[2,2]+50 	   		MSGET ocCompDe VAR cCompDe 	  	SIZE 050,10 OF oDlg PIXEL PICTURE "@R 99/99/9999"
		@ aObjSize[2,1], aObjSize[2,4]*0.50 		SAY OemToAnsi(STR0035)		 	SIZE 146,10 OF oDlg PIXEL FONT oFont 				//"Per. Final"
		@ aObjSize[2,1], (aObjSize[2,4]*0.50)+40 	MSGET ocCompAte VAR cCompAte	SIZE 050,10 OF oDlg PIXEL PICTURE "@R 99/99/9999"

		@ aObjSize[3,1], aObjSize[3,2]+10 		SAY OemToAnsi(STR0036)			SIZE 146,15 OF oDlg PIXEL FONT oFont 	//"Opções p/ filtrar tarefas:"
		@ aObjSize[3,1], aObjSize[3,2]+95	RADIO oRadio VAR nOpcTar ITEMS	OemToAnsi(STR0037)	,;						//"1-Vigentes"
																			OemToAnsi(STR0038)	,;						//"2-Encerradas"
																			OemToAnsi(STR0039) 	;						//"3-Todas"
					SIZE 050,010 OF oDlg PIXEL ON CHANGE (fOpcTar())

 		If nOpcTar == 2
			ocCompDe:Enable()
			ocCompAte:Enable()
		Else
			ocCompDe:Disable()
			ocCompAte:Disable()
		EndIf

		bSet15		:= { || If(nOpcTar # 2 .Or. fGPA190VFl(cCompDe, cCompAte), (nOpcA := 1 , lRet := .T., oDlg:End()), Nil) }
		bSet24		:= { || oDlg:End() }

		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.

	ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar(oDlg , bSet15 , bSet24)
Else
	lRet  		:= .T.
	nOpcA 		:= 1
	nOpcTar 	:= sOpTarefa
	IF sOpTarefa == 2
		cCompDe		:= dDatIni //DDMMAAAA
		cCompAte 	:= dDatFin //DDMMAAAA
		IF !fGPA190VFl(cCompDe, cCompAte)
			Return(.F.)
		Endif
	Endif
EndIf

RestKeys(aSvKeys , .T.)

If At(cCompAte, "/") == 0 .AND. Len(cCompAte) == 8 .AND. Valtype(cCompAte) == "C"
	cCompAte := SUBSTR(cCompAte,1,2) + "/" + SUBSTR(cCompAte,3,2) + "/" + SUBSTR(cCompAte,5,4)
EndIf

cCompAux := If(Valtype(cCompAte) == "C",CTOD(cCompAte),cCompAte)

If cCompAux >= dDataFim
	cCompAux := dDataFim
EndIf

If At(cCompDe, "/") == 0 .AND. Len(cCompDe) == 8 .AND. Valtype(cCompDe) == "C"
	cCompDe := SUBSTR(cCompDe,1,2) + "/" + SUBSTR(cCompDe,3,2) + "/" + SUBSTR(cCompDe,5,4)
EndIf

If nOpcA == 1
	If nOpcTar == 1
		bFilterTar := &("{ || !Empty(SRO->RO_DATA) .And. (AnoMes(SRO->RO_DATAATE) >= '" + AnoMes(dDataFim) + "' .Or. Empty(SRO->RO_DATAATE)) }")
	ElseIf nOpcTar = 2
		bFilterTar := &("{ || SRO->RO_DATA >= CTOD('" + cCompDe + "') .And. !Empty(SRO->RO_DATAATE) .And. SRO->RO_DATAATE <= CTOD('" + DTOC(cCompAux) + "') }")
	EndIf
EndIf

Return(lRet)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fOpcTar    		³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Montagem de filtro das tarefas dos professores               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fOpcTar()

If nOpcTar == 2
	ocCompDe:Enable()
	ocCompAte:Enable()
Else
	ocCompDe:Disable()
	ocCompAte:Disable()
EndIf

ocCompDe:Refresh()
ocCompAte:Refresh()

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fGPA190Cpy 		³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Copia tarefa para facilitar cadastro.                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGPA190Cpy()
Local nElem 		:= 0
Local nPosDIni		:= Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_DATA" })
Local nPosDFim		:= Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_DATAATE" })
Local nPosSeq		:= Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_SEQ" })
Local nLast		:= 0
Local aNewCols		:= aClone(aCols)
Local cNewSeq		:= StrZero(0, 5)

If GdDeleted() .Or. Empty(aNewCols[ n, nPosDIni ])
	Aviso(STR0017, OemToAnsi(STR0040), {STR0018}) //"Alerta" ### "Não é possível copiar elementos excluídos ou com data de início em branco." ### "Ok"
	Return
Else
	If !MsgYesNo(OemToAnsi(STR0041), OemToAnsi(STR0042))  //"Deseja incluir nova linha, para continuidade do lançamento da tarefa?" ### "Atenção!"
		Return
	EndIf
EndIf

cNewSeq := fGPA190Seq(nPosSeq, .F.) // CALCULA PROXIMA SEQ. DO LCTO.

aAdd(aNewCols, {})

// ALIMENTA CAMPOS DA NOVA LINHA CRIADA
For nElem := 1 To Len(aNewCols[n])
	aAdd(aNewCols[Len(aNewCols)], aNewCols[n, nElem])
Next

nLast := Len(aNewCols)

// Limpa datas de inicio e fim da tarefa copiada e atualiza aCols
aNewCols[ nLast, nPosDIni	]	:= Ctod("//")
aNewCols[ nLast, nPosDFim	]	:= Ctod("//")
aNewCols[ nLast, nPosSeq	]	:= cNewSeq
aCols := aClone(aNewCols)
oGet:oBrowse:nAT := Len(aCols) //Atualiza no. de elementos do aCols
oGet:ForceRefresh() //FORCA REFRESH PARA DEMONSTRACAO EM TELA DE TODOS OS ELEMENTOS

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fGPA190Seq	 	³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula seq. do proximo lancamento.                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGPA190Seq(nPosSeq, lMnuCpy)
Local aSeqCols	:= aClone(aCols)
Local nPosCols	:= 0
Local cNewSeq	:= StrZero(0, 5)

DEFAULT nPosSeq	:= Ascan(aHeader, { |X| AllTrim(X[2]) == "RO_SEQ" })
DEFAULT lMnuCpy	:= .T.

If lMnuCpy
	aDel(aSeqCols, Len(aSeqCols))
	aSize(aSeqCols, Len(aSeqCols) - 1)
EndIf

nPosCols	:= Len(aSeqCols)

If !Empty(aSeqCols)
	aSort(aSeqCols,,, { |x,y| x[ nPosSeq ] < y[ nPosSeq ] })
EndIf

If Empty(aSeqCols) .Or. cUltSeq > aSeqCols[ nPosCols, nPosSeq ]
	cNewSeq := Soma1(cUltSeq)
Else
	cNewSeq := Soma1(aSeqCols[ nPosCols, nPosSeq ])
EndIf

Return(cNewSeq)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GPA190MCp       ³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Copia linha posicionada no aCols.                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function GPA190MCp()
Local nPosDIni	:= Ascan(aHeader, {|X| AllTrim(X[2]) == "RO_DATA"})

If GdDeleted() .Or. Empty(aCols[n, nPosDIni])
	Aviso(STR0017,OemToAnsi(STR0040) , {STR0018}) //"Alerta" ### "Não é possível copiar elementos excluídos ou com data de início em branco." ### "Ok"
Else
	aCpyCols := aClone(aCols[n])
EndIf

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GPA190MPs       ³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Cola linha posicionada no aCols.                             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function GPA190MPs()
Local cSvSeqAnt	:= ""

IF !Empty(aCpyCols)
	if cPaisLoc=="BRA"
		cSvSeqAnt	:= GdFieldGet("RO_SEQ")
		GdFieldPut("RO_SEQ", cSvSeqAnt)
	EndIf
	aCols[n] 	:= aClone(aCpyCols)
	GdFieldPut("RO_DATA", Ctod("//"))
	GdFieldPut("RO_DATAATE", Ctod("//"))
	GdFieldPut("RO_CONTSEQ", "")
	GdFieldPut("RO_TPALT", "")
	GdFieldPut("RO_HRSEXT", 0.00)
	GdFieldPut("RO_HRSFAL", 0.00)

	oGet:oBrowse:nAT := Len(aCols) //Atualiza no. de elementos do aCols
	oGet:Refresh() //FORCA REFRESH PARA DEMONSTRACAO EM TELA DE TODOS OS ELEMENTOS
EndIF

Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fGPA190VFl		³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida periodo informado para tarefas encerradas.            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGPA190VFl(cCompDe, cCompAte)
Local lRet		:= .T.
Local nI		:= 0
Local cPeriod	:= Space(10)

Begin Sequence
	For nI := 1 To 2
		cPeriod := If(nI == 1, cCompDe, cCompAte)
		If Len(cPeriod) == 8
			cPeriod := SUBSTR(cPeriod,1,2) + "/" + SUBSTR(cPeriod,3,2) + "/" + SUBSTR(cPeriod,5,4)
		EndIf
		If Len(cCompDe) == 8
			cCompDe := SUBSTR(cCompDe,1,2) + "/" + SUBSTR(cCompDe,3,2) + "/" + SUBSTR(cCompDe,5,4)
		EndIf
		If Len(cCompAte) == 8
			cCompAte := SUBSTR(cCompAte,1,2) + "/" + SUBSTR(cCompAte,3,2) + "/" + SUBSTR(cCompAte,5,4)
		EndIf

		// PERIODOS DEVEM SER INFORMADOS
		IF !(lRet := !Empty(Alltrim(STRTRAN(cPeriod,"/",""))))
    		If !lAutomato
    			Aviso(STR0017, OemToAnsi(STR0043) , {STR0018}) //"Alerta" ### "Os períodos devem ser informados na busca de tarefas encerradas. Informe os períodos para busca das tarefas." ### "Ok"
	    	Endif
	    	Break
		EndIF

		// PERIODOS DEVEM SER NO FORMATO DD/MM/AAAA
		IF !(lRet := Len(AllTrim(cPeriod)) == 10)
	    	Aviso(STR0017, OemToAnsi(STR0044) + cPeriod + OemToAnsi(STR0045), {STR0018}) //"Alerta" ### "O período " ### " é inválido. Informe um novo período no formato DD/MM/AAAA." ### "Ok"
	    	Break
		EndIF

		// PERIODOS DEVEM SER VALIDOS
		IF !(lRet := SUBSTR(cPeriod,4,2) $ "01*02*03*04*05*06*07*08*09*10*11*12")
			Aviso(STR0017, OemToAnsi(STR0046) + SUBSTR(cPeriod,3,2) + OemToAnsi(STR0047), {STR0018}) //"Alerta" ### "O mês informado " ### " é inválido. Informe um novo mês." ### "Ok"
	    	Break
		EndIF
	Next

	// PERIODO FINAL DEVE SER SUPERIOR AO PERIODO INICIAL
	IF !(lRet := (CTOD(cCompAte) >= CTOD(cCompDe)))
		Aviso(STR0017, OemToAnsi(STR0048) , {STR0018}) //"Alerta" ### "O período inicial deve ser igual ou inferior ao período final. Informe um novo período." ### "Ok"
    	Break
	EndIF

End Sequence

Return(lRet)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fGPA190Atu		³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se novos campos foram criados e atualiza sequencias ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGPA190Atu(lProf)

Local nSeq 		:= 0
Local aSROFlds	:= {}
Local aArea		:= GetArea()
Local aSROArea	:= SRO->(GetArea())
Static lChkFld	:= .T.

If !lProf
	Return(.T.)
EndIf

dbSelectArea("SRO")

If lChkFld
	aAdd(aSROFlds, FieldPos("RO_SEQ"))
	aAdd(aSROFlds, FieldPos("RO_CONTSEQ"))
	aAdd(aSROFlds, FieldPos("RO_TPALT"))
	aAdd(aSROFlds, FieldPos("RO_HRSEXT"))
	aAdd(aSROFlds, FieldPos("RO_HRSFAL"))
	If aScan(aSROFlds, 0) > 0
		MsgAlert(OemToAnsi(STR0049)) //"E NECESSARIO CRIAR OS NOVOS CAMPOS PARA O LANCAMENTO DE TAREFAS. VERIFICAR BOLETIM TECNICO CORRESPONDENTE."
		RestArea(aArea)
		Return(.F.)
	EndIf
	lChkFld := .F.
EndIf

SRO->(dbSetOrder(1))
SRO->(dbSeek(SRA->(RA_FILIAL + RA_MAT)))

If Empty(SRO->RO_SEQ)
	While SRO->(!Eof()) .And. SRO->(RO_FILIAL + RO_MAT) == SRA->(RA_FILIAL + RA_MAT)
		nSeq ++
		If RecLock("SRO", .F.)
			SRO->RO_SEQ 	:= StrZero(nSeq, 5)
			SRO->(MsUnlock())
		EndIf
		SRO->(dbSkip())
	EndDo
EndIf

RestArea(aSROArea)
RestArea(aArea)

Return(.T.)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GPA190Blq       ³Autor³ Jonatas A. T. Alves³ Data ³01/05/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica codigo de tarefa bloqueada.                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GPA190Blq(nCodTarefa)
Local cDataBlq		:= ""
Local cCodBlq		:= ""
Local nx			:= 0

If lAutomato
	nx := fPosTab("S070", nCodTarefa,"=", 4)
Else
	nx := fPosTab("S070", M->RO_CODTAR,"=", 4)
Endif

If nx > 0
	cDataBlq := fTabela("S070", nx, 11)
	cCodBlq :=  fTabela("S070", nx, 12)
	If cDataBlq <= DDATABASE .AND. !Empty(AllTrim(cCodBlq))
		If !lAutomato
			Aviso(STR0017, OemToAnsi(STR0050)  + CRLF + OemToAnsi(STR0051), {STR0018}) //"Alerta" ### "O codigo de tarefa informado esta bloqueado para uso." ### " Utilize outra tarefa para lancamento." ### "Ok"
		Endif
		Return(.F.)
	EndIf
EndIf

Return(.T.)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funca‡„o    ³GPA190VLD       ³Autor³ MOHANAD ODEH       ³ Data ³04/10/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descrica‡„o ³Verifica codigo de tarefa bloqueada.                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GPA190VLD(dDataDe)
Local lRet 		:= .T.
Local nPosDtAte	:= GdFieldPos("RO_DATAATE")

If aCols[n][GdFieldPos("RO_REC_WT")] <> 0
	If dDataDe < dDataIni .AND. (EMPTY(aCols[n][nPosDtAte]) .OR.  aCols[n][nPosDtAte] >= dDataIni)
		Aviso(STR0017, STR0019, {STR0018})	// "ALERTA"###"O PERIODO INFORMADO ESTA ENCERRADO!"###"OK"
		lRet := .F.
	EndIf
EndIf

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funca‡„o    ³GP190PicOut     ³Autor³ MOHANAD ODEH       ³ Data ³10/10/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descrica‡„o ³Verifica se picture do campo Valor Total estourou           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GP190PicOut(cQuant)
Local cPicture
Local nPosColVlr	:= GdFieldPos("RO_VALOR")
Local nQuant		:= &(ReadVar(cQuant))
Local nVal			:= 0
Local lRet 		:= .T. //PICTURE NAO ESTOURADA

nVal := Round(nQuant * Acols[n][nPosColVlr], 4)

cPicture := GetSx3Cache("RO_VALTOT", "X3_PICTURE")
If SubStr(TransForm(nVal , cPicture), 1,1) == "*"
	Aviso(STR0017, STR0057, {STR0018}) //"ALERTA"### "Valor total excedeu seu limite permitido! Verifique a quantidade preenchida!"
	lRet := .F.
EndIf

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funca‡„o    ³GP190PicOut     ³Autor³ MOHANAD ODEH       ³ Data ³10/10/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descrica‡„o ³Verifica se picture do campo Valor Total estourou           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Logico                                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA190                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GP190HRSEXT(cCampo)
Local lRet 	:= .T.
Local nPos		:= 0
Local nPosCodTar := GdFieldPos("RO_CODTAR")

If !Empty(&(ReadVar(cCampo)))

	If cCampo == "M->RO_HRSEXT"
		nPos := fPosTab("S070", aCols[n, nPosCodTar], "==", 04)
		If nPos > 0
			If Empty(fTabela("S070", nPos, 09))
				Alert(OemToAnsi(STR0058)) //"NAO FOI INFORMADA A VERBA DE HORAS EXTRAS NO CADASTRO DE TAREFAS (TABELA S070)"
				lRet := .F.
			EndIf
		EndIf
	ElseIf cCampo == "M->RO_HRSFAL"
		nPos := fPosTab("S070", aCols[n, nPosCodTar], "==", 04)
		If nPos > 0
			If Empty(fTabela("S070", nPos, 10))
				Alert(OemToAnsi(STR0059)) //"NAO FOI INFORMADA A VERBA DE FALTAS NO CADASTRO DE TAREFAS (TABELA S070)"
				lRet := .F.
			EndIf
		EndIf
	EndIf

EndIf

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef        ³Autor³  Luiz Gustavo     ³ Data ³06/12/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >                                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA190                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MenuDef()

Local aRotina :=  { { STR0004 ,"PesqBrw"	,	0 , 1					,,.F. },;	//"Pesquisar"
					{ STR0005 	,"GP190Aux",	0 , 2 						  },;  	//"Visualizar"
					{ STR0006 	,"GP190Aux",	0 , If(IsBlind(),3,4)	,,,.T.},;	//"Incluir"
					{ STR0007 	,"GP190Aux",	0 , 4						  },;  	//"Alterar"
					{ STR0008 	,"GP190Aux",	0 , 5						  },;  	//"Excluir"
					{ STR0014	,"GPER160"	,	0 , 6					,,,.F.},;	//"Imprimir"
					{ STR0016 	,"GpLegend",	0 , 7					,, .F.}}	//"Legenda"

Return(aRotina)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funca‡…o    ³ gp190Aux ³ Autor ³ MOHANAD ODEH          ³ Data ³09.10.2013³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrica‡…o ³ Funcao auxiliar para direcionar as funcoes apos carregar   ³±±
±±³          ³ o periodo em aberto                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ gp190Aux(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = ALIAS DO ARQUIVO                                   ³±±
±±³          ³ ExpN1 = NUMERO DO REGISTRO                                 ³±±
±±³          ³ ExpN2 = NUMERO DA OPCAO SELECIONADA                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GP190Aux(cAlias, nReg, nOpcx)

fGetPerAtual(@aPerAtual, xFilial("RCH"), SRA->RA_PROCES, fGetRotOrdinar()) //ENCONTRA O PERIODO EM ABERTO
If !Empty(aPerAtual)
	dDataIni := aPerAtual[1][6] // RCH_DTINI
	dDataFim := aPerAtual[1][7] // RCH_DTFIM
Else
	Aviso(STR0017, STR0060, {STR0018})	// "ALERTA"###"Não há período cadastrado! Verifique!"###"OK"
	Return
EndIf

If nOpcx == 2 //VISUALIZAR
	GP190VIS(cAlias, nReg, nOpcx)
ElseIf nOpcx == 3 //INCLUIR
	GP190Inc(cAlias, nReg, nOpcx)
ElseIf nOpcx == 4 //ALTERAR
	GP190Alt(cAlias, nReg, nOpcx)
ElseIf nOpcx == 5 //EXCLUIR
	GP190Del(cAlias, nReg, nOpcx)
EndIf

Return Nil


Function fCbROTIPO()

Local lProf := SRA->( RA_CATFUNC $ "I*J" )
Local cRet := ""

If lProf
	cRet := STR0061//"1=Fixa;2=Variavel;3=Adit. Fixo;4=Adit. Var."
Else
	cRet := STR0062//"1=Fixa;2=Variavel"
EndIf

return cRet