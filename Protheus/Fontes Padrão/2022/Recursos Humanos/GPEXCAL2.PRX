#INCLUDE "GPEXCAL2.CH" 
#INCLUDE "FWADAPTEREAI.CH"  
#INCLUDE "PROTHEUS.CH"

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ FNC      ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³10/01/13³M12RH01   ³Unificacao das Folhas. Projeto Versao 12  ³±±
±±³            ³        ³REQ.:04_01³                                          ³±±
±±³Tiago Malta ³04/11/13³RQ1848   ³Unificacao da Folha. 1a Parc. do 13o sal. ³±±
±±³Cecilia Car.³11/04/14³M_RH003  ³Na funcao fAssMed, tirar mensagem para exe³±±
±±³            ³        ³002974   ³cutar procedimentos do boletim tecnico caso³±±
±±³            ³        ³RQ1848   ³o campo RA_TIPAMED nao exista na base.    ³±±
±±³Flavio Corr ³17/07/14³TPZRZK   ³Alterada a função SemanaMes para receber o ³±±
±±³            ³        ³002974   ³cperiodo como parametro -chamada na S_TABELAS³±±
±±³Claudinei S.³25/11/14³TQVPV8    ³Ajustada a funcao Calc_IRPLR p/ considerar³±±
±±³            ³        ³          ³tambem os valores de IR/PLR pagos em      ³±±
±±³            ³        ³          ³outras filiais em caso de transferencias. ³±±
±±³Allyson M.  ³05/01/15³TQMFVF    ³Ajuste p/ calculo de dissidio validar se  ³±±
±±³            ³        ³          ³houve pagamento de adicional de confianca/³±±
±±³            ³        ³          ³transferencia no mes original.			  ³±±
±±³Flavio Corr.³04/02/15³PCDEF11847³Ajuste para valorização de adicionais qdo ³±±
±±³            ³        ³          ³chamado do roteiro INC					  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³CalCustoFunºAutor ³Andreia dos Santos  º Data ³  23/11/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Calcula o custo do funcionario                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºSintaxe   ³Exp1 => Filial                                              º±±
±±º          ³Exp2 => Matricula                                           º±±
±±º          ³Exp3 => Considera provisoes no calculo                      º±±
±±º          ³Exp4 => Considera encargos da empresa no calculo            º±±
±±º          ³Exp5 => Periodo inicial                                     º±±
±±º          ³Exp6 => Periodo final                                       º±±
±±º          ³Exp7 => Centro de Custo                                     º±±
±±º          ³Exp8 => array com valores do PIS                            º±±
±±º          ³Exp9 => array com valores do INSS                           º±±
±±º          ³Exp10=> array com valores de Acidente de Trabalho           º±±
±±º          ³Exp11=> array com valores de Pro Labore                     º±±
±±º          ³Exp12=> array com valores de Autonomo                       º±±
±±º          ³Exp13=> array com valores de Provisao                       º±±
±±º          ³Exp14=> array com valores das demais Verbas                 º±±
±±º          ³Exp15=> array com valores do FGTS                           º±±
±±º          ³Exp16=> array com valores da Contribuicao Social            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP5                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function CalCustoFun(cFil,cMatricula,lProvisao,lEncargos,dDtIni,dDtFim,cCusto,;
							aPIS,aINSS,aAcidente,aLabore,aAutonomo,aProvisao,aVerbas,aFGTS,aContSoc,lGeraLog,aLog,aAddVerb,cLogPath)

Local aArea		:= GetArea()
Local cCodFol 	:= ""
Local nValCusto	:= 0	// Valor do Custo 
Local nBInss013	:= 0 	// Base Salario Contr. ate limite base
Local nBInss014	:= 0 	// Base Salario Contr. acima limite base
Local nBInss019	:= 0 	// Base Inss ate Limite para 13§ Salario
Local nBInss020	:= 0 	// Base Inss acima Limite para 13§ Salario
Local nBInss221	:= 0 	// Base Inss Pro-Labore 
Local nBInss225	:= 0	// Base Inss Autonomo
Local nBaseINSS := 0   	// Base do INSS	
Local nBasePIs	:= 0	// Base PIS
Local nBaseAci	:= 0	// Base Acidente de Trabalho
Local nBFGTS017	:= 0	// Base FGTS
Local nBFGTS018	:= 0	// FGTS Deposito
Local nBFGTS108	:= 0	// Base FGTS 13§ Salario
Local nBFGTS109 := 0	// Valor FGTS 13§ Salario

//--Contribuicao Social
Local aContS295 := array(2)	// Contrib. 0.5% s/Rescisao
Local aContS296 := array(2)	// Contrib. 0.5% s/13o. Rescisao
Local aContS297 := array(2)	// Contrib. 10% s/Montante Dep. Fgts Rescisao
Local aContS298 := array(2)	// Contrib. 0.5% s/Rem. Folha.
Local aContS299 := array(2)	// Contrib. 0.5% s/Rem. 13o. Folha 

//-- Valores
Local nValPIS    := 0	// Valor do PIS
Local nValACI	 := 0	// Valor de Acidente de Trabalho
Local nValPRO	 := 0	// Valor Pro-Labore
Local nValAut	 := 0	// Valor Autonomo
Local nBasFGTS	 := 0	// Base do FGTS
Local nInssEmpr  := 0   // Valor do INSS Empresa (Verba id 0148)
//-- Valores da Provisao
Local nPrFerV	:= 0	// Provisao Ferias Vencidas
Local nPrFerP	:= 0 	// Provisao Ferias Proporcionais
Local nPr13Sal	:= 0	// Provisao 13o Salario
Local nPr14Sal	:= 0	// Provisao 14o Salario
Local aBases[09]
Local aValINSS[23][2]  
Local cMesAnt
Local dDataRef
Local nDia
Local nPos		:= 0
Local nTpc	
Local nx		:= 1
Local nY		:= 1

//--Variaveis para Query SRD             
Local cQuery    := "" 		//Expressao da Query
Local lQuery    := .F. 	// Indica se a query foi executada
Local cAliasSRD := "SRD" 	//Alias da Query
Local aStruSRD  := {}      //Estrutura da Query
Local cVbEnc    := "" 

DEFAULT aLog			:= {}
DEFAULT aAddVerb	:= {}
DEFAULT lGeraLog	:= .F.

lGeraLog	:=	lGeraLog .And. !Empty(cLogPath)
cLogPath	:=	Alltrim(cLogPath)
cLogPath	:=	IIf(Right(cLogPath,1) $ "\/",Substr(cLogPath,1,Len(cLogPath)-1),cLogPath)
cCusto	:= if( cCusto == Nil,"",cCusto)
aPIS	:= if( aPIS == NIL,{},aPis)
aINSS	:= if( aINSS== NIL,{},aINSS)
aAcidente:=if(aAcidente==NIl,{},aAcidente)
aLabore	:= if(aLabore == NIL,{},aLabore)
aAutonomo:=if(aAutonomo==NIL,{},aAutonomo)
aProvisao:=if(aProvisao==Nil,{},aProvisao)
aVerbas	:= if(aVerbas == NIL,{},aVerbas)
aFGTS	:= if(aFGTS == NIL,{},aFGTS)
aContSoc:= If(aContSoc== Nil,{},aContSoc)
aCodFol := {}

If FP_CODFOL(@aCodFol,SRA->RA_FILIAL)
	// Encargos Empresa
	cVbEnc:= aCodFol[148,1] + "/" + aCodFol[149,1] + "/" + aCodFol[150,1] + "/" +;
			 aCodFol[184,1] + "/" + aCodFol[185,1] + "/" + aCodFol[186,1] + "/" +;
			 aCodFol[187,1] + "/" + aCodFol[188,1] + "/" + aCodFol[189,1] + "/" +;
			 aCodFol[190,1] + "/" + aCodFol[191,1] + "/" + aCodFol[192,1] + "/" +;
			 aCodFol[193,1] + "/" + aCodFol[200,1] + "/" + aCodFol[201,1] + "/" +;
			 aCodFol[204,1] + "/" + aCodFol[782,1]	
EndIf

//Posiciona no funcionario
SRA->(dbSeek(cFil+cMatricula))
nTpc	:= val(If(Empty(SRA->RA_TPCONTR),"1",SRA->RA_TPCONTR))
                                                    
lQuery := .T.
cAliasSRD := "QSRD"
aStruSRD  := If(Empty(aStruSRD),SRD->(dbStruct()),aStruSRD)
cQuery := "SELECT * "
cQuery += "FROM "+RetSqlName("SRD")+" SRD "
cQuery += "WHERE SRD.RD_FILIAL='"+cFil+"' AND "
cQuery += "SRD.RD_MAT='"+cMatricula+"' AND "
cQuery += "SRD.RD_DATARQ>='"+MesAno(dDtIni)+"' AND "			
cQuery += "SRD.RD_DATARQ<='"+MesAno(dDtFim)+"' AND "			
if !Empty(cCusto)
	cQuery += "SRD.RD_CC='"+cCusto+"' AND "
EndIf	
cQuery += "SRD.D_E_L_E_T_=' ' "
cQuery += "ORDER BY "+SqlOrder(SRD->(IndexKey()))
cQuery := ChangeQuery(cQuery)
dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSRD,.T.,.T.)
	
For nX := 1 To Len(aStruSRD)
	If ( aStruSRD[nX][2] <> "C" )
		TcSetField(cAliasSRD,aStruSRD[nX][1],aStruSRD[nX][2],aStruSRD[nX][3],aStruSRD[nX][4])
	EndIf
Next nX

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Guarda o Mes               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cMesAnt	:= (cAliasSRD)->RD_DATARQ
aContS295[2] := 0
aContS296[2] := 0
aContS297[2] := 0
aContS298[2] := 0
aContS299[2] := 0

While (cAliasSRD)->(!EOF()) .AND. (cAliasSRD)->RD_MAT==cMatricula .and.;
	 (cAliasSRD)->RD_DATARQ >= MesAno(dDtIni) .AND.(cAliasSRD)->RD_DATARQ <= MesAno(dDtFim)
		
	If !empty(cCusto) .and. (cAliasSRD)->RD_CC <> cCusto
  		(cAliasSRD)->(dbskip())
  		Loop	
  	EndIf	                                   
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Verifica as verbas                               ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If PosSrv((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") $ "13" //Provento;Base
		nBaseINSS 	+= IIf( RetValSrv((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_INSS") == "S", (cAliasSRD)->RD_VALOR, 0)
		//Calculo do PIS
		nBasePis += IIf( RetValSrv((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_PIS") == "S",(cAliasSRD)->RD_VALOR,0)
		
	ElseIf PosSrv((cAliasSRD)->RD_PD,(cAliasSRD)->RD_FILIAL,"RV_TIPOCOD") == "2" //Desconto
		nBaseINSS 	-= IIf( RetValSrv((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_INSS") == "S", (cAliasSRD)->RD_VALOR, 0)
		//Calculo do PIS
		nBasePis -= IIf( RetValSrv((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_PIS") == "S",(cAliasSRD)->RD_VALOR,0)
	EndIf                                              
		
	cCodFol  := RetValSrv((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_CODFOL")
    
    If cCodFol $ "0013#0014#0019#0020#0221#0225#0017#0018#0108#0109#0295#0296#0297#0298#0299#0148"   
		nBInss013 += if(cCodFol=="0013",(cAliasSRD)->RD_VALOR,0)  // Salario Contr. ate limite base
		nBInss014 += if(cCodFol=="0014",(cAliasSRD)->RD_VALOR,0)  // Salario Contr. acima limite base
		nBInss019 += if(cCodFol=="0019",(cAliasSRD)->RD_VALOR,0)  // Base Inss ate Limite para 13§ Salario
		nBInss020 += if(cCodFol=="0020",(cAliasSRD)->RD_VALOR,0)  // Base Inss acima Limite para 13§ Salario
		nBInss221 += if(cCodFol=="0221",(cAliasSRD)->RD_VALOR,0)  // Base Inss Pro-Labore 15%
		nBInss225 += if(cCodFol=="0225",(cAliasSRD)->RD_VALOR,0)  // Base Inss Autonomo 20%
		//FGTS
		nBFGTS017 += if(cCodFol=="0017",(cAliasSRD)->RD_VALOR,0)  // Base FGTS
		nBFGTS018 += if(cCodFol=="0018",(cAliasSRD)->RD_VALOR,0)  // FGTS Deposito
		nBFGTS108 += if(cCodFol=="0108",(cAliasSRD)->RD_VALOR,0)  // Base FGTS 13§ Salario
		nBFGTS109 += if(cCodFol=="0109",(cAliasSRD)->RD_VALOR,0)  // Valor FGTS 13§ Salario
		// INSS Empresa - Busca o valor da Verba gerada, pois pode haver casos de desoneração, e o valor gerado não é 20% da base do INSS.
		nInssEmpr += if(cCodFol=="0148",(cAliasSRD)->RD_VALOR,0) // Inss Empresa.
		//--Contribuicao Social
		If cCodFol=="0295"
			aContS295[1] := (cAliasSRD)->RD_PD				
			aContS295[2] += (cAliasSRD)->RD_VALOR
		ElseIf cCodFol=="0296"
			aContS296[1] := (cAliasSRD)->RD_PD				
			aContS296[2] += (cAliasSRD)->RD_VALOR
		ElseIf cCodFol=="0297"
			aContS297[1] := (cAliasSRD)->RD_PD				
			aContS297[2] += (cAliasSRD)->RD_VALOR
		ElseIf cCodFol=="0298"
			aContS298[1] := (cAliasSRD)->RD_PD				
			aContS298[2] += (cAliasSRD)->RD_VALOR
		ElseIf cCodFol=="0299"
			aContS299[1] := (cAliasSRD)->RD_PD				
			aContS299[2] += (cAliasSRD)->RD_VALOR
		EndIf
		//Base para Acidente de Trabalho
		nBaseAci+= if( cCodFol $ "0013#0014#0019#0020",(cAliasSRD)->RD_VALOR,0)
	Else
	    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica as verbas que estao definidas com "S"   ³
		//³ para o calculo do custo do funcionario           ³
	    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	    If RetValSrv((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_CUSTEMP") == "1" 
			If RetValSrv((cAliasSRD)->RD_PD, (cAliasSRD)->RD_FILIAL, "RV_TIPOCOD") == "2" //Desconto
				aaDD(aVerbas,{(cAliasSRD)->RD_PD,0,(cAliasSRD)->RD_VALOR*(-1)})
			Else
				aaDD(aVerbas,{(cAliasSRD)->RD_PD,0,(cAliasSRD)->RD_VALOR})
			EndIf
		EndIf          
	EndIf
	                                                          
	(cAliasSRD)->(dbSkip())
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Se quebrar o mes, calcula os valores  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	if cMesAnt <> (cAliasSRD)->RD_DATARQ
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Calcula os valores atraves das bases passadas     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aFill(aBases,0)
		aEval(aValInss,{|x|aFill(x,0)})
		
		aBases[01]	:= 	nBaseInss 	// Base Inss
		aBases[02]	:= 	nBasePis  	// Base PIS
		aBases[03]	:= 	nBaseAci  	// Base Acidente de Trabalho
		aBases[04]	:=	nBInss013 	// Salario Contr. ate limite base
		aBases[05]	:=	nBInss014 	// Salario Contr. acima limite base
		aBases[06]	:=	nBInss019	// Base Inss ate Limite para 13§ Salario
		aBases[07]	:=	nBInss020	// Base Inss acima Limite para 13§ Salario
		aBases[08]	:= 	nBInss221	// Base Inss Pro-Labore 15%
		aBases[09]	:=	nBInss225  	// Base Inss Autonomo 20%
		
		FCalcEnc(aBases,cFil,cMatricula,@nValPIS,@nValACI,@nValPRO,@nValAut,@aValINSS,cCusto,cMesAnt) 
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Armazena nos arrays os valores calculados no mes     ³
		//³ 1a.Coluna - Mes/ANO                                  ³
		//³ 2a.Coluna Base de calculo                            ³
  		//³ 3a.Coluna Valor                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		AADD(aPIS,{cMesAnt,nBasePis,nValPis}) 	
		AADD(aAcidente,{cMesAnt,nBaseAci,nValAci})
		AADD(aLabore,{cMesAnt,nBInss221,nValPRO}) 
		AADD(aAutonomo,{cMesAnt,nBInss225,nValAut}) 
 		//--FGTS    
		nBasFGTS:= nBFGTS017+nBFGTS108
		nValFGTS:= nBFGTS018+nBFGTS109
		aaDD(aFGTS,{cMesAnt,nBasFGTS, nValFGTS})	// FGTS

		//--Contribuicao Social
		AADD(aContSoc,{cMesAnt,aContS295,aContS296,aContS297,aContS298,acontS299})
		//-- Zera os array de Contribuicao Social
		aContS295		:=	array(2)
		aContS295[2] 	:= 	0
		aContS296		:=	array(2)
		aContS296[2] 	:= 	0
		aContS297    	:=	array(2)
		aContS297[2] 	:= 	0
		aContS298		:=	array(2)
		aContS298[2] 	:= 	0
		acontS299		:=	array(2)
		aContS299[2] 	:= 	0
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Armazena no array os valores calculados ³
		//³ no mes ref. a INSS. Colunas:            ³
  		//³ 1 - Valor Inss Emp.                     ³
		//³ 2 - Terceiros                           ³
		//³ 9 - Sal.Educ.                           ³
		//³10 - Incra                               ³
		//³11 - Senai                               ³
		//³12 - Sesi                                ³
		//³13 - Senac                               ³
		//³14 - Sesc                                ³
		//³15 - Sebrae                              ³
		//³16 - Dpc                                 ³
		//³17 - Faer                                ³
		//³18 - Senab                               ³
		//³19 - Seconc                              ³
		//³22 - Sest                                ³
		//³23 - Senat                               ³
		//³24 - Mes/aNO                             ³
		//³25 - Base de calculo                     ³
		//³ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ³
		//³A chave deste array sera a coluna 24     ³
		//³ MES/ANO                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nValBasINSS := nBInss013+nBInss014+nBInss019+nBInss020
		AADD(aINSS,array(25))
		npos := len(aINSS)     
		
		aINSS[nPos,24] := cMesAnt      		// 24 - Mes/aNO
		aInss[nPos,25] := nValBasINSS 		// 25 - Base de calculo
		aInss[nPos,01] := nInssEmpr			// 01 - Valor Inss Emp.
		aInss[nPos,02] := aValINSS[02,nTpc]	// 02 - Terceiros
		aInss[nPos,09] := aValINSS[09,nTpc]	// 09 - Sal.Educ.
		aInss[nPos,10] := aValINSS[10,nTpc]	// 10 - Incra 
		aInss[nPos,11] := aValINSS[11,nTpc]	// 11 - Senai
		aInss[nPos,12] := aValINSS[12,nTpc]	// 12 - Sesi
		aInss[nPos,13] := aValINSS[13,nTpc]	// 13 - Senac
		aInss[nPos,14] := aValINSS[14,nTpc]	// 14 - Sesc
		aInss[nPos,15] := aValINSS[15,nTpc]	// 15 - Sebrae
		aInss[nPos,16] := aValINSS[16,nTpc]	// 16 - Dpc
		aInss[nPos,17] := aValINSS[17,nTpc]	// 17 - Faer
		aInss[nPos,18] := aValINSS[18,nTpc]	// 18 - Senab
		aInss[nPos,19] := aValINSS[19,nTpc]	// 19 - Seconc
		aInss[nPos,22] := aValINSS[22,nTpc]	// 22 - Sest 
		aInss[nPos,23] := aValINSS[23,nTpc]	// 23 - Senat
		 
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Guarda o Mes               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cMesAnt	:= (cAliasSRD)->RD_DATARQ

		nBaseINSS	:= 0
		nBasePis	:= 0
		nBInss013	:= 0
		nBInss014	:= 0
		nBInss019	:= 0
		nBInss020	:= 0
		nBInss221	:= 0
		nBInss225	:= 0
		nBFGTS017	:= 0
		nBFGTS018	:= 0
		nBFGTS108	:= 0
		nBFGTS109	:= 0
		nInssEmpr	:= 0
		nBaseAci	:= 0
	EndIf		
EndDo               

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calculo das Provisoes                                    ³
//³ Traz os valores de aFerVenc, aFerProp, a13Salar, a14Salar³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if lProvisao
	dDataRef := dDtIni
	
	While dDataRef <= dDtFim
		FcalcProv(cFil,cMatricula,SRA->RA_CC,dDataRef,@nPrFerV,@nPrFerP,@nPr13Sal,@nPr14Sal)
		AADD(aProvisao,{MesAno(dDataRef),0,nPrFerV,nPrFerP,nPr13Sal,nPr14Sal}) 
        
		nDia	:= F_UltDia(dDataRef)
		dDataRef := cTod(strzero(ndia,2)+"/"+Substr(MesAno(dDataRef),5,2)+"/"+Substr(MesAno(dDataRef),1,4))+1
	EndDo
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula o Custo    		 			 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//--PIS
aAdd(aLog,"PIS")

For nX := 1 to len(aPIS)
	nValCusto += aPIS[nX,3]
	aAdd(aLog,STR(aPIS[nX,3],8,2))
Next	
//--Acidente de Trabalho
aAdd(aLog,"Acidente de trabalho")
For nX := 1 to len(aAcidente)
	nValCusto += aAcidente[nX,3]
	aAdd(aLog,STR(aAcidente[nX,3],8,2))
Next	
//-- Pro Labore
aAdd(aLog,"Prolabore")
For nX := 1 to len(aLabore)
	nValCusto += aLabore[nX,3]
	aAdd(aLog,STR(aLabore[nX,3],8,2))
Next	       
//-- Autonomo
aAdd(aLog,"Autonomo")
For nX := 1 to len(aAutonomo)
	nValCusto += aAutonomo[nX,3]
	aAdd(aLog,STR(aAutonomo[nX,3],8,2))
Next	
//-- Demais verbas
aAdd(aLog,"Verbas")
For nX := 1 to len(aVerbas)
	If !aVerbas[nx,1] $ cVbEnc
		nValCusto += aVerbas[nX,3]
		aAdd(aLog,aVerbas[nx,1]+":"+STR(aVerbas[nX,3],8,2))
		nPosVerb := aScan(aAddVerb,{|x| x[1] == aVerbas[nx,1] })
		If nPosVerb > 0
			aAddVerb[nPosVerb,2] += aVerbas[nX,3]
		Else
			aAdd(aAddVerb,{aVerbas[nX,1],aVerbas[nX,3]})
		EndIf
	EndIf	
Next	
//-- Contribuicao Social
aAdd(aLog,"Contribuicao Social")
For nX := 1 to len(aContSoc)   
	For nY := 2 to 6
		if aContSoc[nX,nY,2] <> nil
			nValCusto += aContSoc[nX,nY,2]
			aAdd(aLog,STr(aContSoc[nX,nY,2],10,2))
		EndIf	
	Next	
Next	

If lEncargos
	aAdd(aLog,"Encargos")
	For nX := 1 to len(aINSS)
		nValCusto+= aInss[nX,01]	// Inss Empresa
		nValCusto+= aInss[nX,02]	// Terceiros
		nValCusto+= aInss[nX,09] 	// Sal. Educ.
		nValCusto+= aInss[nX,10] 	// INCRA
		nValCusto+= aInss[nX,11] 	// SENAI
		nValCusto+= aInss[nX,12] 	// SESI
		nValCusto+= aInss[nX,13] 	// SENAC
		nValCusto+= aInss[nX,14] 	// SESC
		nValCusto+= aInss[nX,15] 	// SEBRAE
		nValCusto+= aInss[nX,16] 	// DPC
		nValCusto+= aInss[nX,17] 	// FAER
		nValCusto+= aInss[nX,18] 	// SENAB
		nValCusto+= aInss[nX,19] 	// SECOND
		nValCusto+= aInss[nX,22] 	// SEST
		nValCusto+= aInss[nX,23] 	// SENAT
		aAdd(aLog,"INSS Empresa : "+STr(aInss[nx,1],10,2))
		aAdd(aLog,"Terceiros : "+STr(aInss[nx,2],10,2))
		aAdd(aLog,"Sal. Educ. : "+STr(aInss[nx,9],10,2))
		aAdd(aLog,"INCRA : "+STr(aInss[nx,10],10,2))
		aAdd(aLog,"SENAI : "+STr(aInss[nx,11],10,2))
		aAdd(aLog,"SESI : "+STr(aInss[nx,12],10,2))
		aAdd(aLog,"SENAC : "+STr(aInss[nx,13],10,2))
		aAdd(aLog,"SESC : "+STr(aInss[nx,14],10,2))
		aAdd(aLog,"SEBRAE : "+STr(aInss[nx,15],10,2))
		aAdd(aLog,"DPC : "+STr(aInss[nx,16],10,2))
		aAdd(aLog,"FAER : "+STr(aInss[nx,17],10,2))
		aAdd(aLog,"SENAB : "+STr(aInss[nx,18],10,2))
		aAdd(aLog,"SECONB : "+STr(aInss[nx,19],10,2))
		aAdd(aLog,"SEST : "+STr(aInss[nx,22],10,2))
		aAdd(aLog,"SENAT : "+STr(aInss[nx,13],10,2))
	Next	
	For nX := 1 to len(aFGTS)
		aAdd(aLog,"FGTS Empresa : "+STr(aFGTS[nX,3],10,2))
		nValCusto+= aFGTS[nX,3]	// FGTS
	Next
EndIf	

If lProvisao
	aAdd(aLog,"Provisao")
	For nX := 1 to Len(aProvisao)
		nValCusto+= aProvisao[nX,3]
		nValCusto+= aProvisao[nX,4]
		nValCusto+= aProvisao[nX,5]
		nValCusto+= aProvisao[nX,6]
		aAdd(aLog,aProvisao[nx,1]+Str(aProvisao[nx,3],10,2)+Str(aProvisao[nx,4],10,2)+Str(aProvisao[nx,5],10,2)+Str(aProvisao[nx,6],10,2))
	Next	
EndIf

aAdd(aLog,"CUSTO FUNCIONARIO :"+Str(nValcusto,10,2))
If lGeraLog
	cWrite := ""
	For nx := 1 to Len(aLog)
		cWrite += aLog[nx] + CHR(13)+CHR(10)
	Next
	If cLogPath == "\" .Or. cLogPath == "/"
		cLogPath := ""
	Else	
		MAKEDIR(cLogPath)
	EndIf
	MemoWrite(cLogPath+"\"+AllTrim(cMatricula)+".pms",cWrite)
EndIf

dbSelectArea(cAliasSRD)
dbCloseArea()

RestArea(aArea)
Return( nValCusto ) 

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³FcalcProv ºAutor  ³Andreia dos Santos  º Data ³  30/11/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Calcula provisoes na data de referencia.                   º±±
±±º          ³ Na funcao chamadora desta rotina deverao ser declaradas    º±±
±±º          ³ como private as seguintes variaveis:                       º±±
±±º          ³ dDataRef, aFerVenc, aFerProp, a13Salar, a14Salar,cFilAtu   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºSintaxe   ³aExp1 => Filila                                             º±±
±±º          ³aExp2 => Matricula                                          º±±
±±º          ³aExp3 => Centro de Custo                                    º±±
±±º          ³aExp4 => Data de referencia                                 º±±
±±º          ³aExp5 => Valor da Provisao Ferias vencidas                  º±±
±±º          ³aExp6 => Valor da Provisao Ferias proporcionais             º±±
±±º          ³aExp7 => Valor da Provisao 13o salario                      º±±
±±º          ³aExp8 => Valor da Provisao 14o Salario                      º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP5                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FcalcProv(cFil,cMatricula,cCusto,dDataRef,nPrFerV,nPrFerP,nPr13Sal,nPr14Sal)
Local noldOrder	:= SRT->(INDEXORD())
Local cChave
Local cVbBaixa	:= ""
Local cVbBxFer	:= ""
Local nPos   
Local lPMS		:= cModulo == "PMS" .Or. IsInCallStack("PMSA400")
Local nBxFerAnt := 0

Private dDataAtu
Private dDataAnt                                        

Private aTransf		:= {}

Private nPrFerVAnt	:=0 
Private nPrFerPAnt	:=0
Private nPr13SalAnt	:=0
Private nPr13SalPos	:=0
Private nPr14SalAnt	:=0
Private nPr14SalPos	:=0
Private nPrFerVPos	:=0 
Private nPrFerPPos	:=0

//Variaves utilizadas no ponto de entrada
Private nProvFeV	:=0
Private nProv13S  	:=0
Private nProvFeP   	:=0
Private	nProv14S   	:=0
Private lVlrNeg    := If(SuperGetMv("MV_PROVNEG",,"N") == "S", .T., .F.) 	// Gerar Valor Negativo

// Verbas de baixa de provisao
If !Empty(aCodFol)
	cVbBaixa := aCodFol[268,1] + "/" + aCodFol[334,1]
	cVbBxFer := aCodFol[233,1] + "/" + aCodFol[234,1] + "/" + aCodFol[235,1] + "/" + aCodFol[239,1] + "/" +;
				 aCodFol[240,1] + "/" + aCodFol[241,1] + "/" + aCodFol[258,1] + "/" + aCodFol[259,1] + "/" +;
				 aCodFol[260,1] + "/" + aCodFol[261,1] + "/" + aCodFol[262,1] + "/" + aCodFol[263,1] + "/" +;
				 aCodFol[418,1] + "/" + aCodFol[419,1] + "/" + aCodFol[420,1]
EndIf

dDataAtu := dDataRef
dDataAnt := FirstDay(FirstDay(dDataRef)-1)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta Matriz com os Funcionarios Transferidos No Mes     |
//| Conteudo da Matriz :                                     |
//| 01-Empresa De                                            |
//| 02-Filial+Matricula De                                   |
//| 03-Centro de Custo De                                    |
//| 04-Empresa Para                                          |
//| 05-Filial+Matricula Para                                 |
//| 06-Centro ce Custo Para						             |
//| 07-Data da Transferencia                                 |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//aAuxArea	:= SRA->(GetArea())
//fTransf( @aTransf, mesano(dDataAtu),.T.,.T.,.T. )
//nPos	:= Ascan( aTransf,{|x| MesAno(x[7]) == MesAno(dDataAtu)})
//SRA->(dbSetOrder(1))
//SRA->(dbSeek(aTransf[nPos,2]))
//aTrans := {}
fTransf( @aTransf, mesano(dDataAtu),.F.,.F.,.F. )
//RestArea(aAuxARea)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica as transferencias do mes anterior        |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if len(aTransf) >0         
	nPos	:= Ascan( aTransf,{|x| MesAno(x[7]) == MesAno(dDataAtu)})
	if nPos > 0
		cChave	:= aTransf[nPos,2]+aTransf[nPos,3]+MesAno(dDataAnt)
	EndIf	                                                        
Else
	cChave	:= cFil+cMatricula+cCusto+MesAno(dDataAnt)
EndIf	

SRT->(dbSetOrder(1))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula valor do mes anterior a data de refencia  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SRT->( dbSeek(cChave))
While SRT->(!EOF()) .and. SRT->RT_FILIAL+SRT->RT_MAT+SRT->RT_CC+mesAno( SRT->RT_DATACAL) == cChave 
	//-- Nao envia ao PMS as verbas referente baixa de provisao
	If !lPMS .Or. ( lPMS .And. !(SRT->RT_VERBA $ cVbBaixa) )
		if SRT->RT_TIPPROV == "1"		
			nPrFerVAnt+=SRT->RT_VALOR
		ElseIf SRT->RT_TIPPROV == "2"		
			nPrFerPAnt+=SRT->RT_VALOR
		ElseIf SRT->RT_TIPPROV == "3"		
			nPr13SalAnt+=SRT->RT_VALOR
		ElseIf SRT->RT_TIPPROV == "4"		
			nPr14SalAnt+=SRT->RT_VALOR
		EndIf	
		If SRT->RT_VERBA $ cVbBxFer
			nBxFerAnt += SRT->RT_VALOR
		EndIf
	EndIf
	SRT->(dbskip())
EndDo

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica as transferencias do mes atual           |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if len(aTransf) >0         
	nPos	:= Ascan( aTransf,{|x| MesAno(x[7]) == MesAno(dDataAtu)})
	If nPos > 0
		cChave	:= aTransf[nPos,5]+aTransf[nPos,6]+MesAno(aTransf[nPos,7])
	Else
		cChave	:= cFil+cMatricula+cCusto+MesAno(dDataAtu)			
	EndIf	                                                        
Else
	cChave	:= cFil+cMatricula+cCusto+MesAno(dDataAtu)
EndIf	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula valor do mes referente a data de refencia |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SRT->( dbSeek(cChave))
While SRT->(!EOF()) .and. SRT->RT_FILIAL+SRT->RT_MAT+SRT->RT_CC+mesAno( SRT->RT_DATACAL) == cChave 
	//-- Nao envia ao PMS as verbas referente baixa de provisao
	If !lPMS .Or. !( lPMS .And. SRT->RT_VERBA $ cVbBaixa )
		if SRT->RT_TIPPROV == "1"		
			nPrFerVPos+=SRT->RT_VALOR
		ElseIf SRT->RT_TIPPROV == "2"		
			nPrFerPPos+=SRT->RT_VALOR
		ElseIf SRT->RT_TIPPROV == "3"		
			nPr13SalPos+=SRT->RT_VALOR
		ElseIf SRT->RT_TIPPROV == "4"		
			nPr14SalPos+=SRT->RT_VALOR
		EndIf	
	EndIf
	SRT->(dbskip())
EndDo

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula valor da provisao |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lVlrNeg
	nPrFerV	:= Max((nPrFerVPos + nPrFerPPos) - (nPrFerVAnt + nPrFerPAnt - nBxFerAnt) ,0)
	nPrFerP	:= 0
	nPr13Sal:= If(month(dDataAtu) == 01,nPr13SalPos,Max(nPr13SalPos - nPr13SalAnt,0)) //no mes 01, utilizar apenas o saldo atual
	nPr14Sal:= Max(nPr14SalPos - nPr14SalAnt,0)
Else
	nPrFerV	:= (nPrFerVPos + nPrFerPPos) - (nPrFerVAnt + nPrFerPAnt - nBxFerAnt)
	nPrFerP	:= 0
	nPr13Sal:= If(month(dDataAtu) == 01,nPr13SalPos,nPr13SalPos - nPr13SalAnt) //no mes 01, utilizar apenas o saldo atual
	nPr14Sal:= nPr14SalPos - nPr14SalAnt
EndIf	

If ExistBlock("GPEPMSPRV")
	EXECBLOCK("GPEPMSPRV",.F.,.F.)
	nPrFerV	 := nProvFeV   
	nPr13Sal := nProv13S
	nPrFerP	 := nProvFeP
	nPr14Sal := nProv14S 
EndIf
SRT->(dbSetOrder(nOldOrder))	

Return




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³IntegDef ºAutor  ³Totvs        º Data ³ 25/06/2013          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Mensagem Única                                              º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ GPEA010                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function IntegDef(cXML, nTypeTrans, cTypeMessage)
Local aRet

// Chama a rotina que trata a parte principal
aRet := GPEICAL2(cXML, nTypeTrans, cTypeMessage)

Return aRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³FCalcEnc  ºAutor  ³Andreia dos Santos  º Data ³  27/11/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Calcula os valores de PIS, INSS, Pro-labore, Autonomo e Aci-º±±
±±º          ³dente de trabalho, de acordo com as bases informadas        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºSintaxe   ³aExp1 => Bases de calculo: [01] Base do INSS                º±±
±±º          ³                           [02] Base PIS                    º±±
±±º          ³                           [03] Base Acidente de Trabalho   º±±
±±º          ³						     [04] Base Sal Contr. Ate Lim.Baseº±±
±±º          ³                           [05] Bs. Sal Contr.Acima Lim.Baseº±±
±±º          ³                           [06] Base Inss Ate Lim p/13o.Sal.º±±
±±º          ³                           [07] Base Inss Aci Lim p/13o.Sal.º±±
±±º          ³                           [08] Base Inss Pro-Labore 15%    º±±
±±º          ³                           [09] Base Inss Autonomo  20%     º±±
±±º          ³Exp2 => Filial                                              º±±
±±º          ³Exp3 => Matricula do Funcionario                            º±±
±±º          ³Exp4 => Valor do PIS a ser calculado                        º±±
±±º          ³Exp5 => Valor de Acidente de Trabalho a ser calculado       º±±
±±º          ³Exp6 => Valor Pro-Labore a ser calculado                    º±±
±±º          ³Exp7 => Valor Autonomo a ser calculado                      º±±
±±º          ³Exp8 => array com Valores do INSS a ser calculado ( array   º±±
±±º          ³        com 23 elementos e 2 colunas                        º±±
±±º          ³Exp9 => Centro de Custo                                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP5                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FCalcEnc(aBases,cFil,cMatricula,nValPIS,nValACI,nValPRO,nValAut,aValINSS,cCusto,cAnoMes)

Local nValBas 	:= 0 // Base do Inss da Empresa 
Local nPercPis	:= 0
Local nPercAci	:= 0
Local nPercPro 	:= 0
Local nPercAut 	:= 0
Local cTpc		:= ""
Local nPercFPAS	:= 0 
Local lCct		:= if(!empty(cCusto),.T.,.F.)
Local nPerc		:= 0
Local nDed		:= 0
                       
Static cFilFun
Static aCodFol
Static aInssEmp

//Posiciona no funcionario
SRA->(dbSeek(cFil+cMatricula))
cTpc	:= If (Empty(SRA->RA_TPCONTR) , "1",SRA->RA_TPCONTR)

//Verifica Quebra de Filial para carregar parametros
If cFilFun=Nil .Or. cFilFun # cFil 

	aCodFol := {}
	aInssEmp:= Array(23,2)  
	//--Carrega Identificadores de Calculo
	If !FP_CODFOL(@aCodFol,cFil)
		Return
	EndIf

	//Carrega Parametro Encargos Inss Empresa
	If !fInssEmp(cFIL,@aInssEmp,,cAnoMes)
		Return
	EndIf
	cFilFun := cFil
EndIf
		
//Calculo do PIS
If aBases[02] > 0
	nPercPis  := PosSrv( aCodFol[229,1],cFil,"RV_PERC") / 100
	nValPis   := aBases[02] * nPercPis
EndIf
//Calculo Acidente de Trabalho
//-- Calculo do % Acid. de Trabalho Por Funcionario / C.Custo ou Filial
if aBases[03] > 0
	nPercAci := aInssEmp[3,Val(cTpc)]  //-- Ac.Trab.
	If Type("SRA->RA_PERCSAT") # "U" .And. SRA->RA_PERCSAT > 0
		nPercAci := SRA->RA_PERCSAT / 100
	Else
		//-- Verifica o % de Acidente do C.Custo
		dbSelectArea("CTT")
		If ( cFil # Nil .And. Empty(cFilial) ) .Or. cFil == Nil
			cFil := cFilial
		EndIf
		If dbSeek( cFil + cCusto ) .And. CTT->CTT_PERCAC > 0
			nPercAci := CTT->CTT_PERCAC / 100
		EndIf
	EndIf                 
	nValAci := Round(aBases[03] * nPercAci,2)
EndIf	

//Calculo Pro-Labore
If aBases[08] > 0
	If aCodfol[221,1] # Space(3)
		nPercPro := PosSrv( aCodFol[221,1],cFil,"RV_PERC") / 100
		If nPercPro = 1.00 .Or. nPercPro = 0.00
			nPercPro := 0.15
		EndIf
		nValPro := Round(aBases[08] * nPercPro,2)
	EndIf
EndIf

//Calculo Autonomo
If aBases[09] > 0
	If aCodFol[225,1] # Space(3)
		nPercAut	 := PosSrv( aCodFol[225,1],cFil,"RV_PERC") / 100
		If nPercAut = 1.00 .Or. nPercAut = 0.00
			nPercAut := 0.20
		EndIf
		nValAut := Round(aBases[09] * nPercAut,2)
	EndIf
EndIf
	
// Verifica o % de Acidente do C.Custo
If lCct
	dbSelectArea("CTT")
	If ( cFil # Nil .And. Empty(cFilial) ) .Or. cFil == Nil
		cFil := cFilial
	EndIf
	nPercFPAS := 0
	If dbSeek( cFil + cCusto )
		nPercFPAS    := CTT->CTT_PERFPA / 100
	EndIf
	
	If nPercFPAS > 0
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Deducao do percentual pago por convenios                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nDed := 0
		For nPerc := 9 TO 19
			nDed += aInssEmp[nPerc,Val(cTpc)]
		Next
		
		nDed += aInssEmp[22,Val(cTpc)] // % Sest
		nDed += aInssEmp[23,Val(cTpc)] // % Senat
		
		nPercFPAS -= nDed
	EndIf
	
EndIf

//-- Calcular Inss Empresa                    
nValBas := aBases[04]+aBases[05]+aBases[06]+aBases[07]
If nValBas > 0.00
	aValInss[01,Val(cTpc)] := Round(nValBas * aInssemp[01,Val(cTpc)],2)  // Inss Emp.
	aValInss[02,Val(cTpc)] := Round(nValBas * If (nPercFPAS > 0, nPercFPAS ,aInssemp[2,Val(cTpc)]),2) // Terceiros
	aValInss[09,Val(cTpc)] := Round(nValBas * aInssemp[09,Val(cTpc)],2)  // Sal.Educ.
	aValInss[10,Val(cTpc)] := Round(nValBas * aInssemp[10,Val(cTpc)],2)  // Incra
	aValInss[11,Val(cTpc)] := Round(nValBas * aInssemp[11,Val(cTpc)],2)  // Senai
	aValInss[12,Val(cTpc)] := Round(nValBas * aInssemp[12,Val(cTpc)],2)  // Sesi
	aValInss[13,Val(cTpc)] := Round(nValBas * aInssemp[13,Val(cTpc)],2)  // Senac
	aValInss[14,Val(cTpc)] := Round(nValBas * aInssemp[14,Val(cTpc)],2)  // Sesc
	aValInss[15,Val(cTpc)] := Round(nValBas * aInssemp[15,Val(cTpc)],2)  // Sebrae
	aValInss[16,Val(cTpc)] := Round(nValBas * aInssemp[16,Val(cTpc)],2)  // Dpc
	aValInss[17,Val(cTpc)] := Round(nValBas * aInssemp[17,Val(cTpc)],2)  // Faer
	aValInss[18,Val(cTpc)] := Round(nValBas * aInssemp[18,Val(cTpc)],2)  // Senab
	aValInss[19,Val(cTpc)] := Round(nValBas * aInssemp[19,Val(cTpc)],2)  // Seconc
	aValInss[22,Val(cTpc)] := Round(nValBas * aInssemp[22,Val(cTpc)],2)  // Sest
	aValInss[23,Val(cTpc)] := Round(nValBas * aInssemp[23,Val(cTpc)],2)  // Senat
EndIf

Return
