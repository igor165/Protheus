#INCLUDE "PROTHEUS.CH"

/*/
зддддддддддбддддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁInRhLibStrExecЁAutor ЁMarinaldo de Jesus   Ё Data Ё14/05/2003Ё
цддддддддддеддддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁExecutar Funcoes Dentro de RHLIBSTR                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁInRhLibStrExec( cExecIn , aFormParam )						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                 	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 													 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function InRhLibStrExec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= __ExecMacro( cExecIn )
EndIF

Return( uRet )

/*/
зддддддддддбддддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁfContemStr    Ё Autor ЁMarinaldo de Jesus    Ё Data Ё16/05/2001Ё
цддддддддддеддддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se uma Expressao de Caracter Esta Contida em Outro  ouЁ
Ё          ЁVice e Versa.                                                  Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁfContemStr( cStr1 , cStr2 , lExato )               			   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ                                         					   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRet -> True Se uma Expressao Estiver contida em Outra.        Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerica                                                       Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function fContemStr( cStr1 , cStr2 , lExato )

Local lRet := .F.

DEFAULT cStr1  := ""
DEFAULT cStr2  := ""
DEFAULT lExato := .F.

cStr1 := StrTran( Upper( Alltrim( cStr1  ) ) , " " , "" )
cStr2 := StrTran( Upper( Alltrim( cStr2  ) ) , " " , "" )

lRet := IF( lExato , ( cStr1 == cStr2 ) ,   ( ( cStr1 $ cStr2 ) .or. ( cStr2 $ cStr1 ) ) )

Return( lRet )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁStrToArray		ЁAutorЁMarinaldo de Jesus Ё Data Ё19/05/2004Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetornar Array com o Parser de Uma String Concatenada       Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                  	                                Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function StrToArray( cString , cConcat , bAddParser )
	Local aParser	:= {}
	Local cParser
	Local nParser
	Local nSize
	
	DEFAULT cConcat		:= "+"
	DEFAULT bAddParser	:= { || .T. }
	
	IF ( ( nParser := At( cConcat , cString ) ) > 0 )
		nSize := Max( ( Len( cConcat ) - 1 ) , 0 )
		
		While ( ( nParser := At( cConcat , cString ) ) > 0 )
			IF ( nParser > 1 )
				cParser := AllTrim( SubStr( cString , 1 , nParser - 1 ) )
				IF Eval( bAddParser , @cParser )
					aAdd( aParser , cParser )
				EndIF
			EndIF
	
			cString := SubStr( cString , ( ( nParser + nSize ) + 1 ) )
		End While
		
		IF ( !Empty( cString ) )
			cParser := AllTrim( cString )
			IF Eval( bAddParser , @cParser )
				aAdd( aParser , cParser ) 
			EndIF
		EndIF
	Else
		cParser := AllTrim( cString )
		IF Eval( bAddParser , @cParser )
			aAdd( aParser , cParser )
		EndIF
	EndIF
Return aParser

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁStrDelChr		ЁAutorЁMarinaldo de Jesus Ё Data Ё23/07/2004Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁExcluir o Conteudo de uma String conforme aChrDelStr        Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                  	                                Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function StrDelChr( cStrDelChr , aChrDelStr )

Local nChar
Local nChars

nChars := Len( aChrDelStr )
For nChar := 1 To nChars
	cStrDelChr := StrTran( cStrDelChr , aChrDelStr[ nChar ] , "" )
Next nChar

Return( cStrDelChr )

/*/
зддддддддддбддддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁDataHora2Str  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё04/01/2001Ё
цддддддддддеддддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁConverter Data + Hora em String             	               Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁDataHora2Str( dExp1 , nExp2 )								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁdExp1 -> Data                                      		       Ё
Ё          ЁnExp2 -> Hora                                      		       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁConcatenacao das Strings de Data e Hora              		   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁComparacao Entre Datas										   Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function DataHora2Str( dExp1 , nExp2 )

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Variaveis que serao inicializadas no Corpo da Funcao		  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Local cStrRet
Local nMinuts
Local uExpAux

IF ( ValType( dExp1 ) == "N" ) .and. ( ValType( nExp2 ) == "D" )
	uExpAux := nExp2
	nExp2	:= dExp1
	dExp1	:= uExpAux
EndIF
	
nMinuts := __Hrs2Min( nExp2 )
cStrRet	:= ( ( Dtos( dExp1 ) + StrZero( nMinuts , 10 ) ) )

Return( cStrRet )

/*/
зддддддддддбддддддддддддддбдддддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁStr2DataHora  Ё Autor ЁMarinaldo de Jesus    Ё Data Ё17/12/2001Ё
цддддддддддеддддддддддддддадддддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁConverter String de Data/Minutos em Data + Hora                Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁDataHora2Str( cString )										   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁcString -> String de Data Hora Criado pela DataHora2Str()	   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁArray Unidimensional contendo dois elementos:aReturn[1] -> DataЁ
Ё          Ё                                             aReturn[2] -> HoraЁ
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                  									   Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function Str2DataHora( cString )

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Variaveis de Inicializacao Obrigatoria					  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Local aReturn	:= Array( 02 )

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Variaveis que serao inicializadas no Corpo da Funcao		  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Local cData

cData := SubStr( cString , 1 , 10 )
cHora := SubStr( cString , 11 )

aReturn[1] := Stod( cData )
aReturn[2] := __Min2Hrs( Val( cHora ) )

Return( aClone( aReturn ) )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁRetPictVal		Ё Autor ЁMarinaldo de JesusЁ Data Ё10/11/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetorna a Picture para Campo Numerico Conforme Valor         Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                  	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function RetPictVal( nVal )

Local cPict
Local uInt
Local uDec

IF ( ValType( nVal ) == "N" )
	uInt	:= Int( nVal )
	uDec	:= ( nVal - uInt )
	uDec	:= AllTrim( Str( uDec ) )
	uDec	:= SubStr( uDec , At( "." , uDec ) + 1 )
	uDec	:= Len( uDec )
	uInt	:= Len( AllTrim( Str( uInt ) ) )
	cPict	:= ( Replicate( "9" , uInt ) + "." + Replicate( "9" , uDec ) )
EndIF

Return( cPict )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁChkAddVar		Ё Autor ЁMarinaldo de JesusЁ Data Ё18/11/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se a Variavel obtida pela ParseVar() pode ser criadaЁ
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlChkAddVar                                             	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ChkAddVar( cVar )

Local lChkAddVar := .T.

Local cVarAux
Local nPadr
Local aSaveArea := GetArea()

Begin Sequence

	IF !( lChkAddVar := !Empty( cVar ) )
		Break
	EndIF

	IF !( lChkAddVar := ( ValType( cVar ) == "C" ) )
		Break
	EndIF

	cVar := Upper( AllTrim( cVar ) )

	IF !( lChkAddVar := ( Type( cVar ) == "U" ) )
		Break
	EndIF

	IF !( lChkAddVar := !Empty( StrTran( cVar , "_" , "" ) ) )
		Break
	EndIF

	IF !( lChkAddVar := !ReservedWords( cVar ) )
		Break
	EndIF

	IF !( lChkAddVar := !IsFunction( cVar ) )
		Break
	EndIF

	nPadr := GetCache( "SX3" , "RCA_MNEMON" , NIL , "X3_TAMANHO" , 2 , .F. )
	IF PosAlias( "RCA", Padr( cVar , nPadr ) , xFilial( "RCA" ) , NIL , RetOrdem( "RCA" , "RCA_FILIAL+RCA_MNEMON" ) , .F. )
		cVarAux := AllTrim( PosAlias( "RCA" , Padr( cVar , nPadr ) , xFilial( "RCA" ) , "RCA_MNEMON" , RetOrdem( "RCA" , "RCA_FILIAL+RCA_MNEMON" ) , .F. ) )
		IF !( lChkAddVar := !( cVar == cVarAux ) )
			Break
		EndIF
	EndIF

	nPadr := 3
	IF ( GetCache( "SX2" , Padr( cVar , nPadr ) , NIL , NIL , 1 , .F. ) )
		cVarAux := AllTrim( GetCache( "SX2" , Padr( cVar , nPadr ) , NIL , "X2_CHAVE", 1 , .F. ) )
		IF !( lChkAddVar := !( cVar == cVarAux ) )
			Break
		EndIF
	EndIF

	nPadr := 10
	IF ( GetCache( "SX3" , Padr( cVar , nPadr ) , NIL , NIL , 2 , .F. ) )
		cVarAux := AllTrim( GetCache( "SX3" , Padr( cVar , nPadr ) , NIL , "X3_CAMPO" , 2 , .F. ) )
		IF !( lChkAddVar := !( cVar == cVarAux ) )
			Break
		EndIF
	EndIF

	//Verifica Verbas cadastradas
	dbSelectArea("SRV")
	dbSetOrder(1)
	If !( lChkAddVar := !dbSeek(xFilial("SRV")+cVar) )
		Break
	EndIf
	
	IF !( lChkAddVar := ChkAsc( cVar ) )
		Break
	EndIF

End Sequence

RestArea(aSaveArea)
Return( lChkAddVar )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁChkAsc			Ё Autor ЁMarinaldo de JesusЁ Data Ё30/11/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerificar os Caracteres AscII de uma variavel ou Funcao		 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlChkAsc                                           	     	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ChkAsc( cVar , lChkFirst )

Local lChkAsc

Local nAsc
Local nChar
Local nChars

DEFAULT lChkFirst := .T.

Begin Sequence

	IF ( lChkFirst )
		IF !( lChkAsc := ChkFirstAsc( cVar ) )
			Break
		EndIF
	EndIF

	nChar	:= 0
	nChars	:= Len( cVar )
	While ( ( ++nChar ) <= nChars )
		nAsc		:= Asc( SubStr( cVar , nChar , 1 ) )
		lChkAsc		:= (;
							( ( nAsc >= 48 ) .and. ( nAsc <= 57 ) );	//0123456789
							.or.;
							( ( nAsc >= 65 ) .and. ( nAsc <= 90 ) );	//ABCDEFGHIJKLMNOPQRSTUVWXYZ
							.or.;
							( nAsc == 95 );								//_
							.or.;
							( ( nAsc >= 97 ) .and. ( nAsc <= 122 ) );	//abcdefghijklmnopqrstuvwxyz
						)	
		IF !( lChkAsc )
			Break
		EndIF
	End While

End Sequence

Return( lChkAsc )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁChkFirstAsc		Ё Autor ЁMarinaldo de JesusЁ Data Ё30/11/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerificar o Primeiro Caracter AscII de uma variavel ou FuncaoЁ
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlChkFirstAsc                                           	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ChkFirstAsc( cVar )

Local lChkFirstAsc

Begin Sequence

	nAsc := Asc( SubStr( cVar , 1 , 1 ) )
	IF !( lChkFirstAsc := !( ( nAsc >= 48 ) .and. ( nAsc <= 57 ) ) ) //0123456789
		Break
	EndIF

End Sequence

Return( lChkFirstAsc )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁParseVar		Ё Autor ЁMarinaldo de JesusЁ Data Ё09/11/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁParse de Expressao de Formula para Encontrar Variaveis nao DeЁ
Ё          Ёclaradas 												  	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁaParse                                                	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ParseVar( cExpr )

Local aParseVar	:= {}
Local aOperator := { ":=" , "+=" , "-=" , "/=" , "*=" , "--" , "++" , "%=" , "<=" , ">=" , "," , ")" , "[" , "]" , "==" , "=" , "+" }

Local cVar
Local cAux
Local cPart
Local cUpper
Local cExpress
Local cOperator

Local nI
Local nIs
Local nAt
Local nSizeOp
Local nOperator
Local nOperators

Begin Sequence

	IF Empty( cExpr )
		Break
	EndIF

	cUpper		:= Upper( StrTran( cExpr , " " , "" ) )
	nOperators	:= Len( aOperator )
	For nOperator := 1 To nOperators
		cExpress	:= cUpper
		cOperator	:= aOperator[ nOperator ]
		nSizeOp		:= Len( cOperator )
		While ( cOperator $ cExpress )
			cPart	:= SubStr( cExpress , 1 , At( cOperator , cExpress ) - 1 )
			cVar	:= ""
			nIs		:= Len( cPart )
			For nI := nIs To 1 Step - 1
				IF ( ( cAux := SubStr( cPart , nI , 1 ) ) $ "ZWYXVUTSRQPONMLKJIHGFEDCBA_9876543210" )
					cVar := ( cAux + cVar )
				Else
					Exit
				EndIF
			Next nI
			IF !Empty( cVar )
				IF (;
						( aScan( aParseVar , { |x| ( x == cVar ) } ) == 0 );
						.and.;
						ChkAddVar( cVar );
					)	
					aAdd( aParseVar , cVar )
				EndIF
			EndIF	
			cExpress := SubStr( cExpress , At( cOperator , cExpress ) + nSizeOp )
		End While
	Next nOperator

	aOperator	:= { "--" , "++" , "@" , "(" , "==" , "=" , "+" }
	nOperators	:= Len( aOperator )
	For nOperator := 1 To nOperators
		cExpress	:= cUpper
		cOperator	:= aOperator[ nOperator ]
		nSizeOp		:= Len( cOperator )
		While ( ( nAt := At( cOperator , cExpress ) ) > 0 )
			cVar	:= ""
			nAt		+= nSizeOp
			cPart	:= SubStr( cExpress , nAt )
			nIs		:= Len( cPart )
			For nI := 1 To nIs
				cAux := SubStr( cPart , nI , 1 )
				IF ( ChkAsc( cAux , .F. ) )
					cVar += cAux
				Else
					Exit
				EndIF
			Next nI
			IF !Empty( cVar )
				IF (;
						( aScan( aParseVar , { |x| ( x == cVar ) } ) == 0 );
						.and.;
						ChkAddVar( cVar );
					)
					aAdd( aParseVar , cVar )
				EndIF
			EndIF
			nAt += Len( cVar )
			cExpress := SubStr( cExpress , nAt )
		End While
	Next nOperator

End Sequence

Return( aParseVar )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁParseFun		Ё Autor ЁMarinaldo de JesusЁ Data Ё17/11/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁParse de Expressao de Fomula Para Encontrar Funcoes          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁaParseFun                                                	 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ParseFun( cExpr )

Local aParseFun := {}

Local aParseVar
Local aParseMne

Local cVar
Local cAux
Local cPart
Local cExpress
Local cOperator

Local nI
Local nIs
Local nAt
Local nSizeOp
Local nOperator
Local nOperators

Begin Sequence

	IF Empty( cExpr )
		Break
	EndIF

	cExpress	:= Upper( StrTran( cExpr , " " , "" ) )
	aParseVar	:= ParseVar( cExpress )
	aParseMne	:= ParseMnemo( cExpress )
	cOperator	:= "("
	nSizeOp		:= 1
	While ( cOperator $ cExpress )
		cPart	:= SubStr( cExpress , 1 , At( cOperator , cExpress ) - 1 )
		cVar	:= ""
		nIs		:= Len( cPart )
		For nI := nIs To 1 Step - 1                     
			cAux := SubStr( cPart , nI , 1 )
			IF ( ChkAsc( cAux , .F. ) )
				cVar := ( cAux + cVar )
			ElseIF ( Len( cVar ) > 0 ) .Or. nI == nIs
				Exit
			EndIF
		Next nI
		IF !Empty( cVar )
			IF (;
					ChkAsc( cVar );
					.and.;
					( aScan( aParseFun , { |x| ( x == cVar ) } ) == 0 );
					.and.;
					( aScan( aParseVar , { |x| ( x == cVar ) } ) == 0 );
					.and.;
					( aScan( aParseMne , { |x| ( x == cVar ) } ) == 0 );
				)
				aAdd( aParseFun , cVar )
			EndIF
		EndIF
		cExpress := SubStr( cExpress , At( cOperator , cExpress ) + nSizeOp )
	End While

End Sequence

Return( aParseFun )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁParseMnemo		Ё Autor ЁMarinaldo de JesusЁ Data Ё03/11/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁObtem os Mnemonicos da Expressao               				 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                  	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ParseMnemo( cVar )

Local aParseMne
Local aMnemonicos

Local cMnemonico

Local nLoop
Local nLoops

IF (;
		!Empty( cVar );
		.and.;
		( ValType( cVar ) == "C" );
	)
	SetMnemonicos( xFilial( "RCA" ) , @aMnemonicos , .F. , NIL , .F. )
	aParseMne	:= {}
	cVar		:= Upper( AllTrim( cVar ) )
	nLoops		:= Len( aMnemonicos )
	For nLoop := 1 To nLoops
		cMnemonico := Upper( AllTrim( aMnemonicos[ nLoop , 1 ] ) )
		IF ( cMnemonico $ cVar )
			aAdd( aParseMne , cMnemonico )
		EndIF
	Next nLoop
EndIF

Return( aParseMne )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁGetStrSeq		Ё Autor ЁMarinaldo de JesusЁ Data Ё16/12/2004Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁObtem o Sequenciamento Numerico de Uma String  				 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                                                  	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                     Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetStrSeq( cStr , lSeq )

Local aSeqStr	:= { "1" , "2" , "3" , "4" , "5" , "6" , "7" , "8" , "9" , "0" }
Local cSeqStr	:= ""
Local cMult		:= ""

Local nStr
Local nMult
Local nSeqStr
Local nSeqsStr

DEFAULT lSeq := .T.

nStr 		:= Len( cStr )
nSeqsStr	:= IF( lSeq , 10 , 9 )
nMult		:= 1
While ( Len( cSeqStr ) < nStr )
	nSeqStr := 0
	IF !( lSeq )
		nMult *= 10
		IF ( nMult > 1000000000 )
			Exit
		EndIF
	EndIF
	While ( ++nSeqStr <= nSeqsStr )
		IF ( lSeq )
			cSeqStr += aSeqStr[ nSeqStr ]
		ElseIF ( Len( cSeqStr ) < nStr )
			cMult	:= AllTrim( Str( ( Val( aSeqStr[ nSeqStr ] ) * nMult ) ) )
			cMult	:= PadL( cMult , 10 )
			cSeqStr += cMult
		EndIF	
	End While
End While

Return( cSeqStr )

/*/
зддддддддддбддддддддддддддддбдддддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁRHALLChar       Ё Autor ЁMarcelo Faria     Ё Data Ё07/02/2013Ё
цддддддддддеддддддддддддддддадддддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁTransforma qualquer tido de dado em caracter                 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/

Function RHAllChar( CpoConver )
Local cRet  := NIL
Local cTipo := ''

cTipo := ValType( CpoConver )

If     cTipo == 'C'  // Tipo Caracter
    cRet := CpoConver
ElseIf cTipo == 'N'  // Tipo Numerico
    cRet := AllTrim( Str( CpoConver ) )
ElseIf cTipo == 'L'  // Tipo Logico
    cRet := IIf( CpoConver, '.T.', '.F.' )
ElseIf cTipo == 'D'  // Tipo Data
    cRet := DToC( CpoConver )
ElseIf cTipo == 'M'  // Tipo Memo
    cRet := 'MEMO'
ElseIf cTipo == 'A'  // Tipo Array
    cRet := 'ARRAY[' + AllTrim( Str( Len( CpoConver ) ) ) + ']'
ElseIf cTipo == 'U'  // Indefinido
    cRet := 'NIL'
EndIf

Return(cRet)

