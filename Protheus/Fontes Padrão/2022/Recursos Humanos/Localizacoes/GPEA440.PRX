#INCLUDE "GPEA440.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FONT.CH"
#INCLUDE "COLORS.CH"

#DEFINE Confirma 1
#DEFINE Redigita 2
#DEFINE Abandona 3    

Static lIncluir:= .F.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ Gpea440  ³ Autor ³ Silvia Taguti              ³ Data ³ 22.03.05   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cadastramento de Trajetoria de Trabalho                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador   ³ Data   ³ BOPS/FNC  ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Mauricio Taka ³17/05/06³Mexico     ³A validacao da gravacao trayectoria labo- ³±±
±±³              ³        ³           ³devera permitir data duplicada para demis-³±±
±±³              ³        ³           ³sao com admissao e reingresso juntos.     ³±±
±±³Mauricio Taka ³12/07/06³Mexico     ³Quando e efetuado a importacao de registro³±±
±±³              ³        ³           ³s errado (2 registros com mesma data) o   ³±±
±±³              ³        ³           ³gerava um erro e saia do sistema. Com a al³±±
±±³              ³        ³           ³teracao realizada, acessa o sistema e most³±±
±±³              ³        ³           ³ra o erro na gravacao do func. ou da traj.³±±
±±³Mauricio T.   ³28/08/06³           ³Ajuste para permitir modificacion de sala-³±± 
±±³              ³        ³           ³rio e baixa no mesmo dia.                 ³±±
±±³Mauricio T.   ³12/09/06³           ³O tipo de trajetoria correto eh: 20 e dep-³±± 
±±³              ³        ³           ³ois 02. Estava o contrario. Somente Mexico³±± 
±±³Mauricio T.   ³22/10/06³           ³Erro na inclusao de Registro Patronal com ³±± 
±±³              ³        ³           ³Modificacao de Salario ao mesmo tempo. Foi³±± 
±±³              ³        ³           ³inserido validacao para nao gerar erro -  ³±± 
±±³              ³        ³           ³Somente para Mexico.                      ³±± 
±±³Luiz Gustavo  |08/01/07³Melhor     ³Inclusao da funcao MenuDef() para versao  ³±± 
±±³      	     ³        ³           ³9.12.                                     ³±±
±±³Rogerio R.    |26/09/08³154604     ³Inclusao de parametro cFilSRA nas funcoes ³±± 
±±³      	     ³        ³           ³GpValTraj() e GpValTGer(), pois estava    ³±± 
±±³      	     ³        ³           ³desposicionando a tabela SRA ao chamar uma³±± 
±±³      	     ³        ³           ³dessas funcoes                            ³±± 
±±³Rogerio R.    ³08/10/08³           ³Inclusao da funcao setBrwCHGAll( .F. )    ³±±
±±³              ³        ³           ³antes da mBrowse,para nao apresentar a    ³±±
±±³              ³        ³           ³tela de inclusao de filial ao incluir no- ³±±
±±³              ³        ³           ³vo Registro.                              ³±±
±±³Valdeci Lira  ³18/05/09³           ³Alteracao no fonte para que na validacao  ³±±
±±³              ³        ³           ³de linOk e tudOk as possiveis linhas      ³±±
±±³              ³        ³           ³ocultadas clusao de filial ao incluir no- ³±±
±±³Valdeci Lira  ³21/07/09³018114/2009³Verifica a existencia da variavel aRCPSFIL³±±
±±³              ³        ³           ³antes de verificar as linhas coniderar por³±±
±±³              ³        ³           ³SuperFiltro.                              ³±±
±±³Marcelo       ³23/10/09³025928/2009³Criacao da funcao Gp440CpoSal() e ajustes ³±±
±±³              ³        ³           ³em GpValTraj() para avaliar o valor do    ³±±
±±³              ³        ³           ³salario conforme Aviso do SUA - Mexico.   ³±±
±±³Marcelo       ³26/10/09³026155/2009³Ajuste para nao adicionar zeros a esquerda³±±
±±³              ³        ³           ³no campo matricula.                       ³±±
±±³Marcelo       ³02/02/10³000965/2010³Ajuste em GpValTraj para corrigir o acols ³±±
±±³              ³        ³           ³que esta sendo avaliado.                  ³±±
±±ºMauricio T.   ³06/09/11³021231/2011³Implementacao da Trajetoria Laboral para aº±± 
±±º              ³        ³           ³Costa Rica.                               º±± 
±±ºChristiane V. ³04/01/12³029048/2011³Alteração das strings usadas na mensagem  º±± 
±±ºMohanad Odeh  ³15/05/12³007484/2012³COS: Ajuste para Trajetória Laboral.		 º±±
±±º              ³        ³     TESFXP³Campo RA_DATAALT é Virtual        		 º±±
±±³R.Berti       ³19/06/12³TFCI72     ³MEX: Ajuste no X3_CBOX do campo RCP_TPMOV,³±±
±±³              ³        ³           ³(restaurando)codigos 06,07,20 p/ o Mexico.³±±
±±³Gustavo M.    ³22/08/12³TFOVBR 	  |Ajuste para permitir que seja alterado	 ³±±
±±³			     ³	      ³	          |um registro da filial nao corrente.   	 ³±±
±±³Alfredo Med.  ³30/09/13³Prj.:COL11.8_RH³-MEX-Validaciones Para Colombia		 ³±±
±±³              ³        ³Req.:175404    ³                                      ³±± 
±±³M.Camargo     ³19/03/14³TPAT24     ³sE MODIFICA FUNCIÓN GPVALTRAJ ya que al   ³±±
±±³              ³        ³           ³Tener dos movimientos seguidos tipo 05    ³±±
±±³              ³        ³           ³ocasionaba error.						 ³±±  
±±³Esther Viveiro³30/06/14³TPXL14     ³Limpeza do fonte para uso na V12. Retirada³±±
±±³              ³        ³           ³da funcao AjustaSX3().  				     ³±±
±±³Christiane V. ³16/07/14³TQAYJA     ³Correção da montagem da tela.             ³±±
±±ºM. Camargo    ³07/07/16³TVOXVG     ³Ajustes Localización Republica Dominicana ³±±
±±ºM. Camargo    ³19/09/19³DMINA-7192 ³Ajustes MEX|COL                           ³±± 
±±Cristian Franc ³18/12/19³DMICNS-7516 ³Localización Paraguay                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß */
Function Gpea440(nOpcAuto)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis locais         					     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cFiltraSRA					//Variavel para filtro
Local aIndexSRA		:= {}	   	    //Variavel Para Filtro
Local aRegs		 	:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis privadas       					     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local bFiltraBrw 	:= {|| Nil}		//Variavel para Filtro
	
Private aRotina := MenuDef() // ajuste para versao 9.12 - chamada da funcao MenuDef() que contem aRotina
	
cCadastro := OemToAnsi(STR0009)  //"Cadastro de Trajetoria"
	
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o Arquivo Esta Vazio                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !ChkVazio("SRA")
	Return
Endif                               

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inclui novos codigos de Afastamento de acordo com a versao 5.0 da SEFIP  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If nOpcAuto <> Nil
	Do Case
		Case nOpcAuto == 3
			INCLUI := .T.
			ALTERA := .F.
		Case nOpcAuto == 4
			INCLUI := .F.
			ALTERA := .T.
		OtherWise	
			INCLUI := .F.
			ALTERA := .F.
	EndCase		
	
	dbSelectArea('SRA')
	nPos := Ascan(aRotina,{|x| x[4]== nOpcAuto})
	If ( nPos <> 0 )
		bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPos,2 ] + "(a,b,c,d,e) }" )
		Eval( bBlock, Alias(), (Alias())->(Recno()),nPos)
	EndIf
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cFiltraRh 	:= CHKRH("GPEA440","SRA","1")
	bFiltraBrw 	:= {|| FilBrowse("SRA",@aIndexSRA,@cFiltraRH) }
	Eval(bFiltraBrw)
		
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Endereca a funcao de BROWSE                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SetBrwCHGAll( .T. ) 
	dbSelectArea("SRA")
	mBrowse( 6, 1,22,75,"SRA",,,,,,fCriaCor() )
		
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Deleta o filtro utilizando a funcao FilBrowse                     	   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	EndFilBrw("SRA",aIndexSra)
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp440Atu  ³ Autor ³ Silvia Taguti         ³ Data ³ 22.03.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Programa de (Vis.,Inc.,Alt. e Del. de Trajetoria           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ gp440Atu(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GPEA440                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß */
Function gp440Atu(cAlias,nReg,nOpcx)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis locais         					     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local nCnt								//Armazena a quantidade de registros de um determinado funcionario. Utilizada para verificar se usuario podera "Incluir" ou "Alterar".
Local cMat  	 	:= SRA->RA_MAT     	//Armazena a matricula. Utilizada como chave de pesquisa.
Local aArea 	 	:= GetArea()
Local aAdvSize		:= {}				// Variavel para controle de coordenadas da janela.
Local aInfoAdvSize	:= {}				// Variavel para controle de coordenadas da janela.
Local aObjCoords	:= {}				// Variavel para controle de coordenadas da janela.
Local aObjSize		:= {}				// Variavel para controle de coordenadas da janela.
Local oDlg								// Variavel do tipo objetos
Local oFont								// Variavel do tipo objetos
Local oGroup							// Variavel do tipo objetos
Local cKey			:= ''				// variavel com os valores das chaves. (variavel para getdados da tabela RCP)
Local aRCPNotFields	:= {}				// vetor com os campos que nao seria visualizados. (variavel para getdados da tabela RCP)
Local aRCPVirtGd	:= {}				// vetor com os campos virtuais. (variavel para getdados da tabela RCP)
Local aRCPVisualGD	:= {} 				// vetor com os campos visuais. (variavel para getdados da tabela RCP)
Local bSet15		:= { || NIL }		// Bloco com as validacoes do botao OK. (variavel da janela)
Local bSet24		:= { || NIL }		// Bloco com as validacoes do botao Cancelar. (variavel da janela)
Local aRCPCols		:= {}
Local cFieldOK 		:= If( cPaisLoc=="MEX", "Gp440CpoSal()", Nil)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis privadas       					     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private cPeriodo		:= ""
Private cCond			:= "1"
Private cRot			:= ""

Private aRCPColsRec	:= {}				// vetor que contem os Recnos da tabela. (variavel para getdados da tabela RCP)
Private aHeaderRCP	:= {}					// vetor com o cabecalho da GetDados RCP. (variavel para getdados da tabela RCP)
Private nRCPUsado	:= 0.00 			// variavel que retorna a quantidade de campos da tabela. (variavel para getdados da tabela RCP)
Private cProcesso   := SRA->RA_PROCES  	// Armazena o processo do funcionario. Utilizada para o periodo e o numero de pagamento atual (SX3).
Private cCategoria  := SRA->RA_CATFUNC 	// Armazena a categoria do funcionario. Utilizada para a validacao do numero de pagamento.
Private oGet							// Variavel do tipo objetos
Private aRCPColsAnt	:= {}				// vetor com as colunas da GetDados RCP. (variavel para getdados da tabela RCP)
Private aRcpSFil	:= {}
Private cMsgSua		:= ""

If lIncluir
	nOpcx := 3
	lIncluir :=.F.
Endif 

_SetOwnerPrvt( "nOpcNewGd", IF( nOpcX == 2 .or. nOpcX == 5 , 0 , GD_INSERT + GD_UPDATE + GD_DELETE))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta as Dimensoes dos Objetos         					     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aAdvSize		:= MsAdvSize()
aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
aAdd( aObjCoords , { 015 , 020 , .T. , .F. } )
aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )       

cAlias := "RCP"

If cPaisLoc == "MEX"
	cMsgSua := OemToAnsi( STR0042 ) + CRLF 	   		//"O movimento pode não ser procedente, o qual deverá ser enviado aos "
	cMsgSua += OemToAnsi( STR0043 ) + CRLF 	   		//"Serviços de Afiliação e Vigência para possibilitar a aplicação da fração III"
	cMsgSua += OemToAnsi( STR0044 ) + CRLF 			//"do Artigo 50 do Regulamento da Lei do Seguro Social, para Afialiação,"
	cMsgSua += OemToAnsi( STR0045 ) + CRLF 			//"Classificação de Empresas, Arrecadação e Fiscalização."
	cMsgSua += OemToAnsi( STR0046 ) + CRLF 			//"De ser procedente o movimento, se aceitará mediante a apresentação do"
	cMsgSua += OemToAnsi( STR0047 ) + CRLF + CRLF	//"aviso AFIL-03."
	cMsgSua += OemToAnsi( STR0048 ) 				//"Aceitar os valores informados ?"
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Localizar o Roteiro Ordinario para o filtro da Consulta      ³
³ Padrao de Periodos.                                          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cRot := fGetRotOrdinar()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Se o cliente estiver trabalhando com Roteiro em branco no cad³
³ astro de Periodos, trazer somente os periodos com roteiro " "³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
DbSelectArea( "RCH" )
DbSetOrder( 4 )
DbSeek( xFilial( "RCH" ) + cProcesso + cRot, .F. ) 
If Eof()
	cRot := Space( GetSx3Cache( "RCH_ROTEIR", "X3_TAMANHO" ) )
EndIf

While .T.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se existe algum dado no arquivo                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea( cAlias )
	dbSeek( cFilial + cMat )
	nCnt := 0
	While !EOF() .And.RCP_FILIAL + RCP_MAT == cFilial + cMat
		nCnt++
		dbSkip()
	EndDo

	If nCnt > 0  .And. nOpcx = 3    //--Quando Inclusao e existir Registro
		//Help(" ",1,"A440CTRAJ")
		Help( " " , 1 , "GPEATRAJL" , , OemToAnsi(STR0037)+CRLF+OemtoAnsi(STR0038)+" "+OemtoAnsi(STR0007) ,1 , 0 )
		Exit
	Elseif nCnt = 0 .And. nOpcx # 3  //--Quando Nao for Inclusao e nao existir Registro
	 	//Help(" ",1,"A440STRAJ")
	 	Help( " " , 1 , "GPEATRAJL" , , OemToAnsi(STR0039)+CRLF+OemtoAnsi(STR0038)+" "+OemtoAnsi(STR0006) ,1 , 0 )
		Exit
	Endif
	
	nOpca := 0
		
	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0010) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL	//"Afastamentos"
		
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta os Dados para a GetDados do RCP						 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		
	// campos que nao serao visualizados na getdados
	aAdd( aRCPNotFields , "RCP_FILIAL" )
	aAdd( aRCPNotFields , "RCP_MAT"    )
		                                     
	cKey	 := ( cFilial + cMat )
	
	If FindFunction("RCPSPFILTER")
	    /*****************************************************
	    	Sera gerado um aCols do RCP sem filtro algum, 
	    	portanto completo, para que na verificao
	    	da duplicidade de linhas em linOk o Filtro seja
	    	desconsiderado garantindo a integridade das inform.
	    	mesmo que elas nao sejam vistas pelo usuario
	    ******************************************************/ 
	    //Desliga o Filtro
	   	SPFilTerOff( { "RCP" } )		
	   	
	   	//Cria o ACols
		aRCPSFil := RCP->( GdMontaCols(	@aHeaderRCP		,; 	//01 -> Array com os Campos do Cabecalho da GetDados
								  		@nRCPUsado		,;	//02 -> Numero de Campos em Uso
								  		@aRCPVirtGd		,;	//03 -> [@]Array com os Campos Virtuais
								  		@aRCPVisualGd	,;	//04 -> [@]Array com os Campos Visuais
		                          		"RCP"			,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
								  		aRCPNotFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
								  		@aRCPColsRec	,;	//07 -> [@]Array unidimensional contendo os Recnos
								  		"SRA"			,;	//08 -> Alias do Arquivo Pai
								  		cKey			,;	//09 -> Chave para o Posicionamento no Alias Filho
					 			  		NIL				,;	//10 -> Bloco para condicao de Loop While
		  			 					NIL				,;	//11 -> Bloco para Skip no Loop While
		  			 					.T.				,;	//12 -> Se Havera o Elemento de Delecao no aCols
		  			 					NIL				,;	//13 -> Se cria variaveis Publicas
		  			 					NIL				,;	//14 -> Se Sera considerado o Inicializador Padrao
		  			 					NIL				,;	//15 -> Lado para o inicializador padrao
		  			 					NIL				,;	//16 -> Opcional, Carregar Todos os Campos
		  			 					NIL				,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
					 					NIL				,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
					 					NIL				,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
					 					NIL				,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
					 					.T.				,;	//21 -> Carregar Coluna Fantasma
										NIL				,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
										NIL				,;	//23 -> Verifica se Deve Checar se o campo eh usado
										NIL				,;	//24 -> Verifica se Deve Checar o nivel do usuario
										NIL				,;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
										NIL				,;	//26 -> [@]Array que contera as chaves conforme recnos
										NIL				,;	//27 -> [@]Se devera efetuar o Lock dos Registros
										NIL				,;	//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
							        	NIL				,;	//29 -> Numero maximo de Locks a ser efetuado
										.T.				 ;	//30 -> Utiliza Numeracao na GhostCol				 				
								  );
								)
		//Liga o Filtro						
		SPFilTerOff( { "RCP" }, .F. )
		/*****************************************************************
			Fim da criacao do ACols completo
		*****************************************************************/
	EndIf 
	
	//Gera o acols usado pela GetDados
	aRCPCols := RCP->( GdMontaCols(	@aHeaderRCP		,; 	//01 -> Array com os Campos do Cabecalho da GetDados
							  		@nRCPUsado		,;	//02 -> Numero de Campos em Uso
							  		@aRCPVirtGd		,;	//03 -> [@]Array com os Campos Virtuais
							  		@aRCPVisualGd	,;	//04 -> [@]Array com os Campos Visuais
	                          		"RCP"			,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
							  		aRCPNotFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
							  		@aRCPColsRec	,;	//07 -> [@]Array unidimensional contendo os Recnos
							  		"SRA"			,;	//08 -> Alias do Arquivo Pai
							  		cKey			,;	//09 -> Chave para o Posicionamento no Alias Filho
				 			  		NIL				,;	//10 -> Bloco para condicao de Loop While
	  			 					NIL				,;	//11 -> Bloco para Skip no Loop While
	  			 					.T.				,;	//12 -> Se Havera o Elemento de Delecao no aCols
	  			 					NIL				,;	//13 -> Se cria variaveis Publicas
	  			 					NIL				,;	//14 -> Se Sera considerado o Inicializador Padrao
	  			 					NIL				,;	//15 -> Lado para o inicializador padrao
	  			 					NIL				,;	//16 -> Opcional, Carregar Todos os Campos
	  			 					NIL				,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
				 					NIL				,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
				 					NIL				,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
				 					NIL				,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
				 					.T.				,;	//21 -> Carregar Coluna Fantasma
									NIL				,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
									NIL				,;	//23 -> Verifica se Deve Checar se o campo eh usado
									NIL				,;	//24 -> Verifica se Deve Checar o nivel do usuario
									NIL				,;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
									NIL				,;	//26 -> [@]Array que contera as chaves conforme recnos
									NIL				,;	//27 -> [@]Se devera efetuar o Lock dos Registros
									NIL				,;	//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
						        	NIL				,;	//29 -> Numero maximo de Locks a ser efetuado
									.T.				 ;	//30 -> Utiliza Numeracao na GhostCol				 				
							  );
							)								// funcao em PONXFUN.PRX

	aRCPColsAnt := aClone( aRCPCols )
	
	
	If ArrayCompare(aRCPCols, aRCPSFil) .OR. !FindFunction("RCPSPFILTER")
		//Se os dois acols for igual entao 
		//significa que o aCols da getDados e completo
		//e por isso nao precisa do complementar
		aRCPSFil := {}			
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reorganiza o array para o tratamento de datas duplicadas     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	fReorgCols(@aRCPCols)

    @ aObjSize[1,1], aObjSize[1,2] 			GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.18 	LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "Matricula:"
	oGroup:oFont:= oFont
	@ aObjSize[1,1], aObjSize[1,4]*0.185 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4]*0.87 	LABEL OemToAnsi(STR0012) OF oDlg PIXEL	// "Nome:"
	oGroup:oFont:= oFont
	@ aObjSize[1,1], aObjSize[1,4]*0.875 	GROUP oGroup TO aObjSize[1,3], aObjSize[1,4] 		LABEL OemToAnsi(STR0014) OF oDlg PIXEL	// "Admiss„o:"
	oGroup:oFont:= oFont
			
	@ aObjSize[1,1]+10 , aObjSize[1,2]* 2.5		SAY OemToAnsi(SRA->RA_MAT)		SIZE 050,10 OF oDlg PIXEL FONT oFont
	@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.2		SAY OemToAnsi(SRA->RA_NOME) 	SIZE 146,10 OF oDlg PIXEL FONT oFont
	@ aObjSize[1,1]+10 , aObjSize[1,4]* 0.89	SAY Dtoc(SRA->RA_ADMISSA)		SIZE 050,10 OF oDlg PIXEL FONT oFont 
		

	oGet := MsNewGetDados():New(aObjSize[2,1],;		// nTop
								 aObjSize[2,2],;   	// nLelft
								 aObjSize[2,3],;	// nBottom
	                      		 aObjSize[2,4],;	// nRright
								 nOpcNewGd,;		// controle do que podera ser realizado na GetDado - nstyle
								 "gpLinok",;		// funcao para validar a edicao da linha - ulinhaOK
								 "GpTudook",;		// funcao para validar todas os registros da GetDados - uTudoOK
								 NIL,;				// cIniCPOS
								 NIL,;				// aAlter
								 0,; 				// nfreeze
								 99999,;  			// nMax
								 cFieldOK,;	 		// cFieldOK
								 NIL,;				// usuperdel
								 If(nOpcx=2.Or.nOpcx=5,Nil,.T.),;		// udelOK
								 @oDlg,;        	// objeto de dialogo - oWnd
								 @aHeaderRCP,;		// Vetor com Colunas - AparHeader
								 @aRCPCols;			// Vetor com Header - AparCols
								)
	
	oGet:oBrowse:nAT := Len(aRCPCols)
	oGet:oBrowse:Refresh()
									
	bSet15	:= {|| nOpca:= (IF(nOpcx=5,2,1)), IF(oGet:TudoOk(),oDlg:End(),nOpca:=0)}
	bSet24	:= {|| oDlg:End()} 
	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 )

	//--Se nao for Exclusao
	If nOpcx # 5
	   IF nOpcA == Redigita
	   	LOOP
		ELSEIF nOpcA == Confirma .And. nOpcx # 2
	 		Begin Transaction
	  	    	//--Gravacao
				gp440Grava(cAlias, nOpcx)
		  		//--Processa Gatilhos
	  			EvalTrigger()
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Monta Array com  os dados para envio de e-mail              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				fMontaMail("018")
			End Transaction
		Endif
		//--Se for Exclusao
	Elseif nOpca = 2 .And. nOpcx = 5
		Begin Transaction
			gp440Dele()
	  	End Transaction
	Endif
	
	Exit
EndDo

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a integridade da janela                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea( aArea )
	
If nOpcx == 3
	MBrChgLoop(.F.)
EndIf	
	
/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp440Grava³ Autor ³ Silvia Taguti         ³ Data ³ 22.03.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Grava no arquivo de Trajetoria                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ gp440Grava                                                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß */
Function gp440Grava(cAlias, nOpc)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis locais         					     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aRCPCols  := (oGet:aCols)	
Local ny		:= 0.00									// Contador de colunas.
Local n			:= 1									// Contador de linhas.
Local nMaxArray	:= Len( aHeaderRCP )					// Quantidade de colunas da RCP.
Local nAcols	:= Len( aRCPCols    )					// Quantidade de linhas da RCP.
Local nAcolsRec := Len( aRCPColsRec )
Local nPosGhost	:= GdFieldPos( "GHOSTCOL", aHeaderRCP )
Local nPosDtImss  	:= GdFieldPos( "RCP_DTIMSS", aHeaderRCP )

dbSelectArea(cAlias)
For n:=1 TO nAcols

	nRecno := Val(aRCPCols[n, nPosGhost])
	If nRecno <= nAcolsRec
		dbGoto(aRCPColsRec[n])
		RecLock(cAlias,.F.,.T.)
		//--Verifica se esta deletado
		If aRCPCols[n,nRCPUsado+1]  # .F.
			(cAlias)->( dbDelete() )
			Loop
		Endif
	Else
		//--Verifica se Nao esta Deletado no aCols
		If aRCPCols[n,nRCPUsado+1]  = .F.
			RecLock(cAlias,.T.,.T.)
			RCP->RCP_FILIAL		:= cFilial
			RCP->RCP_MAT		:= SRA->RA_MAT
		Else
			Loop
		Endif
	Endif
	For ny := 1 To nMaxArray
		cCampo    := Trim(aHeaderRCP[ny][2])
		xConteudo := aRCPCols[n,ny]
		&cCampo := xConteudo
	Next ny
	
	( cAlias )->( MsUnlock() )
Next n

Return( NIL )

/*
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gp440Dele ³ Autor ³ Silvia Taguti         ³ Data ³ 22.03.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Deleta os Registro de Trajetoria de Trabalho               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ gp440Dele                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß */
Static Function gp440Dele()

Local cAlias	:= "RCP"
Local nX		:= 0			//Quantidade de linhas da RCP.
Local aRCPCols 	:= (oGet:aCols)
	
nCnt := 0  

For nx := 1 to Len(aRCPCols)
    dbSeek(SRA->RA_FILIAL+SRA->RA_MAT)
    RecLock(cAlias,.F.,.T.)
    dbDelete( )
    MsUnlock()
    nCnt++
Next nx
	
Return( NIL )
            

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPLinOk   ºAutor  ³Silvia Taguti       º Data ³  03/31/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Critica Linha Digitada                                     º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GpLinok()

Local aRCPCols	  	:= (oGet:aCols)
Local lRet			:= .T.

	If !GpValTraj(@aRCPCols,n)
		lRet:= .F.
	Endif

Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gpCOSValTraj³ Autor ³ Mauricio Takakura   ³ Data ³ 29.08.11 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica linha digitada                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄDÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function gpCOSValTraj(aRCPColsOrig, nLine, lGeraLog, cFilSRA)
	Local nAcols	  	:= Len( aRCPColsOrig )
	Local nPosTipo  	:= GdFieldPos( "RCP_TPMOV" , aHeaderRCP )	
	Local nPosDtMov 	:= GdFieldPos( "RCP_DTMOV" , aHeaderRCP )	
	Local nPosDtImss  	:= GdFieldPos( "RCP_DTIMSS", aHeaderRCP )
	Local nPosCPat     	:= GdFieldPos( "RCP_CODRPA", aHeaderRCP )
	Local nPosSalMes   	:= GdFieldPos( "RCP_SALMES", aHeaderRCP )
	Local nPosSalDia   	:= GdFieldPos( "RCP_SALDIA", aHeaderRCP )
	Local nPosTJrnIMSS 	:= GdFieldPos( "RCP_TJRNDA", aHeaderRCP )
	Local nPosPer      	:= GdFieldPos( "RCP_PERMOV", aHeaderRCP )
	Local nPosNumPagto 	:= GdFieldPos( "RCP_NPGMOV", aHeaderRCP )
	Local nPosGhost	 	:= GdFieldPos( "GHOSTcol"  , aHeaderRCP )
	Local nPosMat		:= GdFieldPos( "RCP_MAT", aHeaderRCP )
	Local nSalMes		:= 0
	Local nSalDia		:= 0
	Local nHorasDia		:= 0
	Local nLinha
	Local nLinAnt
	Local lRet		  	:= .T.									
	Local cHelp		  	:= ""
	Local cLog 			:= ""
	Local aArea
	Local nI			:= 0	
	Local nJ			:= 0  
	Local nFound		:= 0
	Local aRcpCols		:= aClone(aRCPColsOrig)
	Local cGhostCol		:= aRcpCols[nLine, nPosGhost]
	nCont := 0
	          
	Default cFilSRA:= xFilial("SRA")
	Default lGeraLog := .F.

	//Adiciona as linhas que foram retiradas atraves do superfiltro
	//para poder realizar a validacao corretamente 
	If !(Type("aRCPSFIL") == "U")
		If Len(aRCPSFil) > 0 .and. !(ArrayCompare(aRCPCols, aRCPSFil))
			nFound := 0
			For nI := 1 to Len(aRCPSFil)
				lFound := .F.
				For nJ := 1 to Len(aRCPCols)
					If !lFound .AND. ArrayCompare(aRCPCols[nJ], aRCPSFil[nI]) 
						lFound := .T.
					EndIf
				Next
				If !lFound
					aAdd( aRCPCols, aRCPSFil[nI])
					nFound ++ 
					aRCPCols[Len(aRcpCols),nPosGhost] := "ADD" + Str(nFound)
				EndIf
			Next
			
			If nFound > 0
				//Organiza por data todas colunas
				aSort( aRCPCols , , , { |x,y| x[nPosDtMov ] < y[nPosDtMov ] } )	
				//Reposiciona a linha de validacao 
				nLine := aScan( aRcpCols	, { |x| x[nPosGhost] == cGhostCol })
			EndIf
		EndIf
	EndIf
	
	If nLine <= 0 .Or. nLine > Len(aRCPCols)
		cHelp := OemToAnsi( STR0023 )//"Sequencia dos tipos de movimentos invalida"
		Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Return(.F.)
	EndIf

	If nLine <= Len(aRCPColsAnt) 
	
		If nPosGhost > 0 .and. !Empty(aRCPCols[nLine, nPosGhost])
			nLinAnt := Val(aRCPCols[nLine,nPosGhost])
		Else
			nLinAnt := nLine
		EndIf
		If !fCompArray( aRCPColsAnt[nLinAnt],aRCPCols[nLine]) .And. !aRCPCols[nLine,nRCPUsado+1]
			If !Empty(aRCPCols[nLine,nPosDtImss] )
			  If lGeraLog
				lLog := .T.
				If aTotRegs[1]== 0
					cLog := STR0022 //"Archivo ya enviado al Seguro Social"
					Aadd(aTitle,cLog)
					Aadd(aLog,{})
					aTotRegs[1] := len(aLog)
	 		  	Endif
		  		aArea 	 	:= GetArea()
	      		dbSelectArea("SRA")
	            dbSetOrder(1)
			    If SRA->(dbSeek(cFilSRA+aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
				Endif
				RestArea( aArea)
	         Else
				cHelp := OemToAnsi( STR0022 )//"Archivo ya enviado al Seguro Social"
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			 Endif	
				lRet := .F.
		   Endif
		Endif
	Endif
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se esta cadastrando em duplicidade         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet
		nPosTp := Ascan( aHeaderRCP, { |X| AllTrim( X[2] ) == "RCP_TPMOV" } ) 
		nPosDt := Ascan( aHeaderRCP, { |X| AllTrim( X[2] ) == "RCP_DTMOV" } )

		If nPosTp > 0 .And. nPosDt > 0 
			Aeval(aRCPCols,{ |X| If(X[nPosTp] = aRCPCols[nLine,nPosTp] .And.;
									X[nPosDt] = aRCPCols[nLine,nPosDt]  .And.;
									!X[nRCPUsado+1]	, nCont ++ , nCont ) } )
		EndIf
		If nCont > 1
			If lGeraLog
				lLog := .T.
				If aTotRegs[3] == 0
					cLog := STR0016 		//"Datas Duplicadas"
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[3] := len(aLog)
	  		   	Endif
	  			aArea 	 	:= GetArea()
	     		dbSelectArea("SRA")
	         	dbSetOrder(1)
		      	If SRA->(dbSeek(cFilSRA+aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
				Endif
				RestArea( aArea)
			Else
				cHelp := OemToAnsi( STR0016 )					//Datas Duplicadas
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			Endif	
			Return( .F. )
		Endif
	Endif
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Para inclusao do tipo Admissao, verifica se houve uma baixa anterior        ³
	//³e se for inclusao do tipo Demissao, verificar se houve uma admissao anterior³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet 
		For nLinha := nLine-1 to  1 Step -1      
		   //Se tiver uma admissao ou reingresso, devera ter uma baixa anterior com datas diferentes
			If aRCPCols[nLine,nPosTipo]	== "01" .And. lRet
				If !Empty(aRCPCols[nLine,nPosDtImss] )
					If lGeraLog
						lLog := .T.
						If aTotRegs[1]== 0
							cLog := STR0022 			////Registro ja enviado ao Seguro Social
							Aadd(aTitle,cLog)  
							Aadd(aLog,{})
							aTotRegs[1] := len(aLog)
			  		   	Endif
			  			aArea 	 	:= GetArea()
			     		dbSelectArea("SRA")
	      		   		dbSetOrder(1)
				      	If SRA->(dbSeek(cFilSRA+aRCPCols[1,nPosMat]))
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
	   					Endif
	   					RestArea(aArea)
	            	Else
						cHelp := OemToAnsi( STR0022 )         //Registro ja enviado ao Seguro Social
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
				   	Endif	
			   		lRet := .F.
			   	Endif	
			Endif
					  
			If !aRCPCols[nLinha,nRCPUsado+1]
				If aRCPCols[nLine,nPosTipo]	$ "03" .And. lRet
					If aRCPCols[nLinha,nPosTipo] $ "02³04"
						If aRCPCols[nLine,nPosDtMov] == aRCPCols[nLinha,nPosDtMov] .And. Empty(aRCPCols[nLInha,nPosDtImss] )
							If lGeraLog
								lLog := .T.
								If aTotRegs[3]== 0
									cLog := STR0016 ////Datas Duplicadas
									Aadd(aTitle,cLog)  
									Aadd(aLog,{})
									aTotRegs[3] := len(aLog)
					  		   	Endif
	  		   	  				aArea 	 	:= GetArea()
		  		        		dbSelectArea("SRA")
					         	dbSetOrder(1)
						      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
									Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
	   							Endif
	   							RestArea(aArea)
	                  		Else
								cHelp := OemToAnsi( STR0016 )     	//Datas Duplicadas
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
							Endif	
							lRet := .F.
						Endif
						Exit
					ElseIf aRCPCols[nLinha,nPosTipo] $ "01³03³05"
						If lGeraLog
							lLog := .T.
							If aTotRegs[4]== 0
								cLog := STR0017 		////Existe uma Admissao/Reingresso ja Cadastrado
								Aadd(aTitle,cLog)  
								Aadd(aLog,{})
								aTotRegs[4] := len(aLog)
				  		   	Endif             
				  			aArea 	 	:= GetArea()
				     		dbSelectArea("SRA")
				         	dbSetOrder(1)
					      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
								Aadd(aLog[aTotRegs[4]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
	   						Endif
	   						RestArea(aArea)
	          	   		Else
							cHelp := OemToAnsi( STR0017 )        	//Existe uma Admissao/Reingresso ja Cadastrado
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						Endif	
						lRet := .F.
					Endif
				Endif	

				//Se tiver uma baixa, devera ter uma admissao anterior com datas diferentes
				If aRCPCols[nLine,nPosTipo]	$ "02³04" .And. lRet
					If aRCPCols[nLinha,nPosTipo] $ "01|03"
						If aRCPCols[nLine,nPosDtMov] == aRCPCols[nLinha,nPosDtMov] .and. aRCPCols[nLine,nPosTipo] == aRCPCols[nLinha,nPosTipo]
							If lGeraLog
								lLog := .T.
								If aTotRegs[3]== 0
									cLog := STR0016 		////Datas Duplicadas
									Aadd(aTitle,cLog)  
									Aadd(aLog,{})
									aTotRegs[3] := len(aLog)
					  		   	Endif       
					  			aArea 	 	:= GetArea()
					   			dbSelectArea("SRA")
					         	dbSetOrder(1)
						      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
									Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
								Endif
								RestArea(aArea)	
	   	           			Else
								cHelp := OemToAnsi( STR0016 ) 		//Datas Duplicadas
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
							Endif	
							lRet := .F.
						Endif
						Exit
					ElseIf aRCPCols[nLinha,nPosTipo] $ "02³04" 
						If lGeraLog
							lLog := .T.
							If aTotRegs[5]== 0
								cLog := STR0018 		////Existe uma Demissao ja Cadastrada
								Aadd(aTitle,cLog)  
								Aadd(aLog,{})
								aTotRegs[5] := len(aLog)
				  		   	Endif
				  			aArea 	 	:= GetArea()
				     		dbSelectArea("SRA")
				         	dbSetOrder(1)
					      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
								Aadd(aLog[aTotRegs[5]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
							Endif
							RestArea(aArea)	
	   					Else
							cHelp := OemToAnsi( STR0018 )				//Existe uma Demissao ja Cadastrada
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						Endif	
						lRet := .F.
					Endif
				Endif	

				//Se tiver uma Modificacao de Salario nao pode ter uma baixa anterior
				If aRCPCols[nLine,nPosTipo]	== "05" .And. lRet
					If aRCPCols[nLinha,nPosTipo] $ "01³03"
						If aRCPCols[nLine,nPosDtMov] == aRCPCols[nLinha,nPosDtMov] .And. Empty(aRCPCols[nLInha,nPosDtImss] )
							If lGeraLog
								lLog := .T.
								If aTotRegs[3]== 0
									cLog := STR0016 		//Datas Duplicadas
									Aadd(aTitle,cLog)
									Aadd(aLog,{})
									aTotRegs[3] := len(aLog)
								Endif
					  			aArea 	 	:= GetArea()
					     		dbSelectArea("SRA")
					         	dbSetOrder(1)
						      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
									Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
								Endif
								RestArea(aArea)	
	                  		Else
								cHelp := OemToAnsi( STR0016 )    	//Datas Duplicadas
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
							Endif	
							lRet := .F.
						Endif
						Exit
					ElseIf aRCPCols[nLinha,nPosTipo] $ "02³04" .and. aRCPCols[nLinha,nPosDtMov] <> aRCPCols[nLine,nPosDtMov]
						If lGeraLog
							lLog := .T.
							If aTotRegs[5]== 0
								cLog := STR0018 		////Existe uma Demissao ja Cadastrada
								Aadd(aTitle,cLog)  
								Aadd(aLog,{})
								aTotRegs[5] := len(aLog)
				  		   	Endif
				  			aArea 	 	:= GetArea()
				     		dbSelectArea("SRA")
				         	dbSetOrder(1)
					      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
								Aadd(aLog[aTotRegs[5]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
							Endif
							RestArea(aArea)	
	               		Else
							cHelp := OemToAnsi( STR0018 )       	//Existe uma Demissao ja Cadastrada
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						Endif
						lRet := .F.
					ElseIf aRCPCols[nLinha,nPosTipo] $ "05"
						If Type("aCols") == "A"
						    If  lRet .And. ( ;                                   
							    aRCPCols[nLinha,nPosSalMes] > aRCPCols[nLine,nPosSalMes] .Or. ;
							    aRCPCols[nLinha,nPosSalDia] > aRCPCols[nLine,nPosSalDia])
								lRet := MsgYesNo( OemToAnsi( STR0060 ) ;
												  + CRLF + CRLF +;
												  OemToAnsi( STR0061 ) )	// "O salario Informado é menor que o salario anterior!"
							EndIf
						ElseIf IsInCallStack("GPEA010") .and. lRet
							If fSalario_COS(SRA->RA_FILIAL, SRA->RA_MAT, @nSalMes, @nSalDia, GetMemVar("RA_DATAALT"), @nHorasDia )
								If ( 	aRCPCols[nLinha,nPosSalMes] > nSalMes .or.;
										aRCPCols[nLinha,nPosSalDia] > nSalDia )
										lRet := MsgYesNo( OemToAnsi( STR0060 ) ;
														  + CRLF + CRLF;
														  + OemToAnsi( STR0061 ) )	// "O salario Informado é menor que o salario anterior!"
								EndIf
							Else
								lRet := .F.
							EndIf
						EndIf
					Endif	
				Endif	
			EndIf
		Next nLinhA
	Endif

	//O primeiro registro da trajetoria laboral deve ser sempre um admissao
	If aRCPCols[1,nPosTipo] <> "01" .And. lRet
		If lGeraLog
			lLog := .T.
			If aTotRegs[6] == 0
				cLog := STR0021 		////Obrigatorio uma Admissao Anterior
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[6] := len(aLog)
		   	Endif
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
		    If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[6]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0021 )                 	//Obrigatorio uma Admissao Anterior
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif  	
	  	lRet := .F.
	EndIf
	
	//Tipo de movimento Obrigatorio
	If Empty(aRCPCols[nLine,nPosTipo]) .and. lRet      	//Tipo de movimento obrigatorio
		If lGeraLog
			lLog := .T.
			If aTotRegs[7]== 0
				cLog := STR0019 		//"Tipo de movimento obrigatorio"
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[7] := len(aLog)
		   	Endif          
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
		    If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[7]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
			Endif
			RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0019 )	// "Tipo de movimiento obligatorio"
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif  	
	  	lRet := .F.
	EndIf
	
	//Data do movimento Obrigatorio
	If Empty(aRCPCols[nLine,nPosDtMov]) .and. lRet
		If lGeraLog
			lLog := .T.
			If aTotRegs[8]== 0
				cLog := STR0020 		////Data do movimento Obrigatorio
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[8] := len(aLog)
		   	Endif          
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
	      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[8]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
	 	Else
			cHelp := OemToAnsi( STR0020 )                   //Data do movimento obrigatorio
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		EndIf
	 	lRet := .F.
	Endif

	//Codigo Patronal Obrigatorio
	If Empty(aRCPCols[nLine,nPosCPat]) .and. lRet
		If lGeraLog
			lLog := .T.
			If aTotRegs[9]== 0
				cLog := STR0026 		////Codigo Patronal obrigatorio
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[9] := len(aLog)
		   	Endif
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
	      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[9]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0026 )                   //Codigo Patronal obrigatorio
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif  	
	  	lRet := .F.
	EndIf
	
	//Tipo de Jornada IMSS Obrigatorio
	If Empty(aRCPCols[nLine,nPosTJrnIMSS]) .and. lRet
		If lGeraLog
			lLog := .T.
			If aTotRegs[11]== 0
				cLog := STR0028 		////Tipo de Jornada obrigatorio
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[11] := len(aLog)
		   	Endif
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
	      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[11]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)
		Else
			cHelp := OemToAnsi( STR0028 )                   //Tipo de Jornada obrigatorio
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif
	  	lRet := .F.
	EndIf

	//Periodo Obrigatorio
	If Empty(aRCPCols[nLine,nPosPer]) .and. lRet
		If lGeraLog
			lLog := .T.
			If aTotRegs[14]== 0
				cLog := STR0031 		//Periodo obrigatorio
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[14] := len(aLog)
		   	Endif
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
	      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[14]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0031 )                   //Periodo obrigatorio
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif  	
	  	lRet := .F.
	EndIf

Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³gpValTraj³ Autor ³ Silvia Taguti         ³ Data ³ 22.03.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica linha digitada                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄDÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function gpValTraj(aRCPColsOrig, n, lGeraLog, cFilSRA)
	Local nAcols	  	:= Len( aRCPColsOrig )
	Local nPosTipo  	:= GdFieldPos( "RCP_TPMOV" , aHeaderRCP )
	Local nPosDtMov 	:= GdFieldPos( "RCP_DTMOV" , aHeaderRCP )	
	Local nPosDtImss  	:= GdFieldPos( "RCP_DTIMSS", aHeaderRCP )
	Local nPosCPat     := GdFieldPos( "RCP_CODRPA", aHeaderRCP )
	Local nPosSalDiI   := IIF (cPaisLoc <> "PAR",GdFieldPos( "RCP_SALDII", aHeaderRCP ),GdFieldPos( "RCP_SALDIA", aHeaderRCP ))
	Local nPosSalMes   := GdFieldPos( "RCP_SALMES", aHeaderRCP )
	Local nPosSalDia   := GdFieldPos( "RCP_SALDIA", aHeaderRCP )
	Local nPosTJrnIMSS 	:= GdFieldPos( "RCP_TJRNDA", aHeaderRCP )
	Local nPosTEmpIMSS 	:= GdFieldPos( "RCP_TEIMSS", aHeaderRCP )
	Local nPosTSalIMSS 	:= GdFieldPos( "RCP_TSIMSS", aHeaderRCP )
	Local nPosPer		:= GdFieldPos( "RCP_PERMOV", aHeaderRCP )
	Local nPosNumPagto 	:= GdFieldPos( "RCP_NPGMOV", aHeaderRCP )
	Local nPosCausaBx	:= IIF(!(cPaisLoc $ "DOM|MEX"),GdFieldPos( "RCP_CBIMSS", aHeaderRCP ),GdFieldPos( "RCP_TIPFIN", aHeaderRCP ) )
	Local nPosGhost	 	:= GdFieldPos( "GHOSTcol"  , aHeaderRCP )
	Local nPosMat		:= GdFieldPos( "RCP_MAT", aHeaderRCP )
	Local nLinha
	Local nLinAnt
	Local lRet		  	:= .T.									
	Local cHelp		  	:= ""
	Local cLog 			:= ""
	Local aArea
	Local nI			:= 0	
	Local nJ			:= 0  
	Local nFound		:= 0
	Local aRcpCols		:= aClone(aRCPColsOrig)
	Local cGhostCol		:= aRcpCols[n, nPosGhost]
	nCont := 0
	      
	Default cFilSRA:= xFilial("SRA")
	Default lGeraLog := .F.
	
	// Validaçao Costa Rica //
	If cPaisLoc == "COS"
		lRet := gpCOSValTraj(aRCPColsOrig, n, lGeraLog, cFilSRA)
		Return( lRet )
	EndIf
	
	// Validacao Mexico //
	If Type("cMsgSua") == "U"	
		_SetOwnerPrvt( "cMsgSua", "")	
		
		cMsgSua := OemToAnsi( STR0042 ) + CRLF 	   		//"O movimento pode não ser procedente, o qual deverá ser enviado aos "
		cMsgSua += OemToAnsi( STR0043 ) + CRLF 	   		//"Serviços de Afiliação e Vigência para possibilitar a aplicação da fração III"
		cMsgSua += OemToAnsi( STR0044 ) + CRLF 			//"do Artigo 50 do Regulamento da Lei do Seguro Social, para Afialiação,"
		cMsgSua += OemToAnsi( STR0045 ) + CRLF 			//"Classificação de Empresas, Arrecadação e Fiscalização."
		cMsgSua += OemToAnsi( STR0046 ) + CRLF 			//"De ser procedente o movimento, se aceitará mediante a apresentação do"
		cMsgSua += OemToAnsi( STR0047 ) + CRLF + CRLF	//"aviso AFIL-03."
		cMsgSua += OemToAnsi( STR0048 ) 				//"Aceitar os valores informados ?"	
	EndIf
	
	//Adiciona as linhas que foram retiradas atraves do superfiltro
	//para poder realizar a validacao corretamente 
	If !(Type("aRCPSFIL") == "U")
		If Len(aRCPSFil) > 0 .and. !(ArrayCompare(aRCPCols, aRCPSFil))
			nFound := 0
			For nI := 1 to Len(aRCPSFil)
				lFound := .F.
				For nJ := 1 to Len(aRCPCols)
					If !lFound .AND. ArrayCompare(aRCPCols[nJ], aRCPSFil[nI]) 
						lFound := .T.				
					EndIf
				Next
				If !lFound		             
					aAdd( aRCPCols, aRCPSFil[nI])                           
					nFound ++ 
					aRCPCols[Len(aRcpCols),nPosGhost] := "ADD" + Str(nFound)
				EndIf
			Next          
			
			If nFound > 0
				//Organiza por data todas colunas
				aSort( aRCPCols , , , { |x,y| x[nPosDtMov ] < y[nPosDtMov ] } )	
				//Reposiciona a linha de validacao 
				n := aScan( aRcpCols	, { |x| x[nPosGhost] == cGhostCol })		
			EndIf
		EndIf             
	EndIf		
	If n <= 0 .Or. n > Len(aRCPCols)
		cHelp := OemToAnsi( STR0023 )//"Sequencia dos tipos de movimentos invalida"
		Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Return(.F.)
	EndIf 
	If n <= Len(aRCPColsAnt) 
	
		If nPosGhost > 0 .and. !Empty(aRCPCols[n,nPosGhost])
			nLinAnt := Val(aRCPCols[n,nPosGhost])
		Else
			nLinAnt := n
		EndIf
		If !fCompArray( aRCPColsAnt[nLinAnt],aRCPCols[n]) .And. !aRCPCols[n,nRCPUsado+1] .and. cPaisLoc <> "DOM|PAR"
			If !Empty(aRCPCols[n,nPosDtImss] )  
			  If lGeraLog
				lLog := .T.
				If aTotRegs[1]== 0
					cLog := STR0022 //"Archivo ya enviado al IMSS"
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[1] := len(aLog)
	 		  	Endif
		  		aArea 	 	:= GetArea()
	      		dbSelectArea("SRA")
	            dbSetOrder(1)
			    If SRA->(dbSeek(cFilSRA+aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
				Endif
				RestArea( aArea)
	         Else
				cHelp := OemToAnsi( STR0022 )//"Archivo ya enviado al IMSS"
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			 Endif	
				lRet := .F.
		   Endif
		Endif
	Endif
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se esta cadastrando em duplicidade         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	If lRet
		nPosTp := Ascan( aHeaderRCP, { |X| AllTrim( X[2] ) == "RCP_TPMOV" } ) 
		nPosDt := Ascan( aHeaderRCP, { |X| AllTrim( X[2] ) == "RCP_DTMOV" } )
	
		If nPosTp > 0 .And. nPosDt > 0 
			Aeval(aRCPCols,{ |X| If(X[nPosTp] = aRCPCols[N,nPosTp] .And.;
									X[nPosDt] = aRCPCols[N,nPosDt]  .And.;
									!X[nRCPUsado+1]	, nCont ++ , nCont ) } )
		EndIf	
		If nCont > 1   
			If lGeraLog
				lLog := .T.
				If aTotRegs[3]== 0
					cLog := STR0016 		//"Datas Duplicadas"
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[3] := len(aLog)
	  		   	Endif
	  			aArea 	 	:= GetArea()
	     		dbSelectArea("SRA")
	         	dbSetOrder(1)
		      	If SRA->(dbSeek(cFilSRA+aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
				Endif	
				RestArea( aArea)
			Else
				cHelp := OemToAnsi( STR0016 )					//Datas Duplicadas
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			Endif	
			Return( .F. )
		Endif
	Endif
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Para inclusao do tipo Admissao, verifica se houve uma baixa anterior        ³
	//³e se for inclusao do tipo Demissao, verificar se houve uma admissao anterior³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	If lRet 
		For nLinha := n-1 to  1 Step -1      
		   //Se tiver uma admissao ou reingresso, devera ter uma baixa anterior com datas diferentes
			If aRCPCols[n,nPosTipo]	== "01" .And. lRet
				If !Empty(aRCPCols[n,nPosDtImss] )
					If lGeraLog
						lLog := .T.
						If aTotRegs[1]== 0
							cLog := STR0022 			////Registro ja enviado ao IMSS
							Aadd(aTitle,cLog)  
							Aadd(aLog,{})
							aTotRegs[1] := len(aLog)
			  		   	Endif
			  			aArea 	 	:= GetArea()
			     		dbSelectArea("SRA")
	      		   		dbSetOrder(1)
				      	If SRA->(dbSeek(cFilSRA+aRCPCols[1,nPosMat]))
							Aadd(aLog[aTotRegs[1]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
	   					Endif
	   					RestArea(aArea)
	            	Else
						cHelp := OemToAnsi( STR0022 )         //Registro ja enviado ao IMSS
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
				   	Endif	
			   		lRet := .F.
			   	Endif	
			Endif

		  
			If !aRCPCols[nLinha,nRCPUsado+1]
				If aRCPCols[n,nPosTipo]	$ "03³06" .And. lRet
					If aRCPCols[nLinha,nPosTipo] $ "02³04"
						If aRCPCols[n,nPosDtMov] == aRCPCols[nLinha,nPosDtMov] .And. Empty(aRCPCols[nLInha,nPosDtImss] )
							If lGeraLog
								lLog := .T.
								If aTotRegs[3]== 0
									cLog := STR0016 ////Datas Duplicadas
									Aadd(aTitle,cLog)  
									Aadd(aLog,{})
									aTotRegs[3] := len(aLog)
					  		   	Endif
	  		   	  				aArea 	 	:= GetArea()
		  		        		dbSelectArea("SRA")
					         	dbSetOrder(1)
						      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
									Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
	   							Endif
	   							RestArea(aArea)
	                  		Else
								cHelp := OemToAnsi( STR0016 )     	//Datas Duplicadas
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
							Endif	
							lRet := .F.
						Endif
						Exit
					ElseIf aRCPCols[nLinha,nPosTipo] $ "01³03³05³06"
						If lGeraLog
							lLog := .T.
							If aTotRegs[4]== 0
								cLog := STR0017 		////Existe uma Admissao/Reingresso ja Cadastrado
								Aadd(aTitle,cLog)  
								Aadd(aLog,{})
								aTotRegs[4] := len(aLog)
				  		   	Endif             
				  			aArea 	 	:= GetArea()
				     		dbSelectArea("SRA")
				         	dbSetOrder(1)
					      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
								Aadd(aLog[aTotRegs[4]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
	   						Endif
	   						RestArea(aArea)
	          	   		Else
							cHelp := OemToAnsi( STR0017 )        	//Existe uma Admissao/Reingresso ja Cadastrado
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						Endif	
						lRet := .F.
					Endif
				Endif	
				
				
				//Se tiver uma baixa, devera ter uma admissao ou reingresso anterior com datas diferentes
				If aRCPCols[n,nPosTipo]	$ "02³04" .And. lRet
					If aRCPCols[nLinha,nPosTipo] $ "01|03³06"
						If aRCPCols[n,nPosDtMov] == aRCPCols[nLinha,nPosDtMov] .and. aRCPCols[n,nPosTipo] == aRCPCols[nLinha,nPosTipo]
							If lGeraLog
								lLog := .T.
								If aTotRegs[3]== 0
									cLog := STR0016 		////Datas Duplicadas
									Aadd(aTitle,cLog)  
									Aadd(aLog,{})
									aTotRegs[3] := len(aLog)
					  		   	Endif       
					  			aArea 	 	:= GetArea()
					   			dbSelectArea("SRA")
					         	dbSetOrder(1)
						      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
									Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
								Endif
								RestArea(aArea)	
	   	           			Else
								cHelp := OemToAnsi( STR0016 ) 		//Datas Duplicadas
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
							Endif	
							lRet := .F.
						Endif
						Exit
					ElseIf  aRCPCols[nLinha,nPosTipo] $"02" .OR. (aRCPCols[nLinha,nPosTipo] $ "04" .and. cPaisLoc <> "COL")
					    
							If lGeraLog
								lLog := .T.
								If aTotRegs[5]== 0
									cLog := STR0018 		////Existe uma Demissao ja Cadastrada
									Aadd(aTitle,cLog)  
									Aadd(aLog,{})
									aTotRegs[5] := len(aLog)
					  		   	Endif
					  			aArea 	 	:= GetArea()
					     		dbSelectArea("SRA")
					         	dbSetOrder(1)
						      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
									Aadd(aLog[aTotRegs[5]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
								Endif
								RestArea(aArea)	
		   					Else
								cHelp := OemToAnsi( STR0018 )				//Existe uma Demissao ja Cadastrada
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
							Endif	
							lRet := .F.
						
					Endif
				Endif	
				//Se tiver uma Modificacao de Salario nao pode ter uma baixa anterior
				If aRCPCols[n,nPosTipo]	== "05" .And. lRet
					If aRCPCols[nLinha,nPosTipo] $ "01³03³06"
						If aRCPCols[n,nPosDtMov] == aRCPCols[nLinha,nPosDtMov] .And. Empty(aRCPCols[nLInha,nPosDtImss] )
							If lGeraLog
								lLog := .T.
								If aTotRegs[3]== 0
									cLog := STR0016 		//Datas Duplicadas
									Aadd(aTitle,cLog)
									Aadd(aLog,{})
									aTotRegs[3] := len(aLog)
								Endif
					  			aArea 	 	:= GetArea()
					     		dbSelectArea("SRA")
					         	dbSetOrder(1)
						      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
									Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
								Endif
								RestArea(aArea)	
	                  		Else
								cHelp := OemToAnsi( STR0016 )    	//Datas Duplicadas
								Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
							Endif	
							lRet := .F.
						Endif
						Exit
					ElseIf aRCPCols[nLinha,nPosTipo] $ "02³04" .and. aRCPCols[nLinha,nPosDtMov] <> aRCPCols[n,nPosDtMov]
						If lGeraLog
							lLog := .T.
							If aTotRegs[5]== 0
								cLog := STR0018 		////Existe uma Demissao ja Cadastrada
								Aadd(aTitle,cLog)  
								Aadd(aLog,{})
								aTotRegs[5] := len(aLog)
				  		   	Endif
				  			aArea 	 	:= GetArea()
				     		dbSelectArea("SRA")
				         	dbSetOrder(1)
					      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
								Aadd(aLog[aTotRegs[5]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
							Endif
							RestArea(aArea)	
	               		Else
							cHelp := OemToAnsi( STR0018 )       	//Existe uma Demissao ja Cadastrada
							Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						Endif
						lRet := .F.
					ElseIf aRCPCols[nLinha,nPosTipo] $ "05"	
						If !(cPaisLoc $ "COL|PER")
							If Type("aCols") == "A"
							    If  lRet .And. !Empty(cMsgSua) .And. ( ;                                   
								    aRCPCols[nLinha,nPosSalDiI] > aRCPCols[n,nPosSalDiI] .Or. ;
								    aRCPCols[nLinha,nPosSalMes] > aRCPCols[n,nPosSalMes] .Or. ;
								    aRCPCols[nLinha,nPosSalDia] > aRCPCols[n,nPosSalDia])
									lRet := MsgYesNo( AllTrim(cMsgSua) )
								EndIf						
							ElseIf IsInCallStack("GPEA010") .and. lRet .and. !Empty(cMsgSua) .and.;
									( 	aRCPCols[nLinha,nPosSalDiI] > M->RA_SALINT .or.;
										aRCPCols[nLinha,nPosSalMes] > M->RA_SALMES .or.;
										aRCPCols[nLinha,nPosSalDia] > M->RA_SALDIA )
									lRet := MsgYesNo( AllTrim(cMsgSua) )
							EndIf
						EndIf
					Endif	
				Endif	
			EndIf
		Next nLinhA
	Endif 
	
	//O primeiro registro da trajetoria laboral deve ser sempre um admissao
	If aRCPCols[1,nPosTipo] <> "01" .And. lRet
		If lGeraLog
			lLog := .T.
			If aTotRegs[6]== 0
				cLog := STR0021 		////Obrigatorio uma Admissao Anterior
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[6] := len(aLog)
		   	Endif
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
		    If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[6]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0021 )                 	//Obrigatorio uma Admissao Anterior
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif  	
	  	lRet := .F.
	EndIf
	
	//Tipo de movimento Obrigatorio
	If Empty(aRCPCols[n,nPosTipo]) .and. (lRet)      	//Tipo de movimento obrigatorio
		If lGeraLog
			lLog := .T.
			If aTotRegs[7]== 0
				cLog := STR0019 		//"Tipo de movimento obrigatorio"
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[7] := len(aLog)
		   	Endif          
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
		    If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[7]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0019 )	// "Tipo de movimiento obligatorio"
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif  	
	  	lRet := .F.
	EndIf
	
	//Data do movimento Obrigatorio
	If Empty(aRCPCols[n,nPosDtMov]) .and. (lRet)
		If lGeraLog
			lLog := .T.
			If aTotRegs[8]== 0
				cLog := STR0020 		////Data do movimento Obrigatorio
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[8] := len(aLog)
		   	Endif          
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
	      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[8]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
	 	Else
			cHelp := OemToAnsi( STR0020 )                   //Data do movimento obrigatorio
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		EndIf
	 	lRet := .F.
	Endif
	
	IF !(cPaisLoc $ "COL|DOM|PER|PAR")
	
		//Codigo Patronal Obrigatorio
		If Empty(aRCPCols[n,nPosCPat]) .and. (lRet)
			If lGeraLog
				lLog := .T.
				If aTotRegs[9]== 0
					cLog := STR0026 		////Codigo Patronal obrigatorio
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[9] := len(aLog)
			   	Endif
				aArea 	 	:= GetArea()
		  		dbSelectArea("SRA")
		      	dbSetOrder(1)
		      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[9]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
				Endif
				RestArea(aArea)	
			Else
				cHelp := OemToAnsi( STR0026 )                   //Codigo Patronal obrigatorio
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			Endif  	
		  	lRet := .F.
		EndIf
	
		//Salario Diario Integrado Obrigatorio
		If Empty(aRCPCols[n,nPosSalDiI]) .and. (lRet)
			If lGeraLog
				lLog := .T.
				If aTotRegs[10]== 0
					cLog := STR0027 		////Salario Diario Integrado Obrigatorio
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[10] := len(aLog)
			   	Endif
				aArea 	 	:= GetArea()
		  		dbSelectArea("SRA")
		      	dbSetOrder(1)
		      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[10]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)
				Endif
				RestArea(aArea)	
			Else
				cHelp := OemToAnsi( STR0027 )                   //Salario Diario Integrado obrigatorio
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			Endif  	
		  	lRet := .F.
		EndIf
		
		//Tipo de Jornada IMSS Obrigatorio
		If Empty(aRCPCols[n,nPosTJrnIMSS]) .and. (lRet)
			If lGeraLog
				lLog := .T.
				If aTotRegs[11]== 0
					cLog := STR0028 		////Tipo de Jornada IMSS obrigatorio
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[11] := len(aLog)
			   	Endif
				aArea 	 	:= GetArea()
		  		dbSelectArea("SRA")
		      	dbSetOrder(1)
		      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[11]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
				Endif
				RestArea(aArea)	
			Else
				cHelp := OemToAnsi( STR0028 )                   //Tipo de Jornada IMSS obrigatorio
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			Endif  	
		  	lRet := .F.
		EndIf
		
		//Tipo de Empregado do IMSS Obrigatorio
		If Empty(aRCPCols[n,nPosTEmpIMSS]) .and. (lRet)
			If lGeraLog
				lLog := .T.
				If aTotRegs[12]== 0
					cLog := STR0029 		//Tipo de Empregado do IMSS obrigatorio
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[12] := len(aLog)
			   	Endif
				aArea 	 	:= GetArea()
		  		dbSelectArea("SRA")
		      	dbSetOrder(1)
		      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[12]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
				Endif
				RestArea(aArea)	
			Else
				cHelp := OemToAnsi( STR0029 )                   //Tipo de Empregado do IMSS obrigatorio
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			Endif  	
		  	lRet := .F.
		EndIf
		
		//Tipo de Salario IMSS Obrigatorio
		If Empty(aRCPCols[n,nPosTSalIMSS]) .and. (lRet)
			If lGeraLog
				lLog := .T.
				If aTotRegs[13]== 0
					cLog := STR0030 			//Tipo de Salario IMSS obrigatorio
					Aadd(aTitle,cLog)  
					Aadd(aLog,{})
					aTotRegs[13] := len(aLog)
			   	Endif
				aArea 	 	:= GetArea()
		  		dbSelectArea("SRA")
		      	dbSetOrder(1)
		      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
					Aadd(aLog[aTotRegs[13]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
				Endif
				RestArea(aArea)	
			Else
				cHelp := OemToAnsi( STR0030 )                   //Tipo de Salario IMSS obrigatorio
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
			Endif  	
		  	lRet := .F.
		EndIf
	End If
		
	//Periodo Obrigatorio
	If Empty(aRCPCols[n,nPosPer]) .and. (lRet)
		If lGeraLog
			lLog := .T.
			If aTotRegs[14]== 0
				cLog := STR0031 		//Periodo obrigatorio
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[14] := len(aLog)
		   	Endif
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
	      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[14]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
			Endif
			RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0031 )                   //Periodo obrigatorio
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif  	
	  	lRet := .F.
	EndIf
	
	//Se o Tipo de movimento for uma movimentacao de baixa, a Causa da Baixa e obrigatorio
	If Empty(aRCPCols[n,nPosCausaBx]) .and. (aRCPCols[n,nPosTipo] $ "02*04") .and. (lRet) .and. cPaisLoc <> "COL"
		If lGeraLog
			lLog := .T.
			If aTotRegs[15]== 0
				cLog := STR0032 //Causa da Baixa obrigatorio
				Aadd(aTitle,cLog)  
				Aadd(aLog,{})
				aTotRegs[15] := len(aLog)
		   	Endif
			aArea 	 	:= GetArea()
	  		dbSelectArea("SRA")
	      	dbSetOrder(1)
	      	If SRA->(dbSeek(cFilSRA +aRCPCols[1,nPosMat]))
				Aadd(aLog[aTotRegs[15]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME)  
		  	Endif
		 	RestArea(aArea)	
		Else
			cHelp := OemToAnsi( STR0032 ) //Causa da Baixa obrigatorio
			Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
		Endif	  	
	  	lRet := .F.
	EndIf 
		
Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPTudook  ºAutor  ³Silvia Taguti       º Data ³  03/31/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function GpTudook()

Local aRCPCols	  	:= (oGet:aCols)

lRet := GpValTGer(@aRCPCols)


Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPVALTGER ºAutor  ³Microsiga           º Data ³  03/30/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Critica todas as Linhas do Acols                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GpValTGer(aRCPCols,lGeraLog, cFilSRA)

Local lRet		:= .T.
Local aTabTraj 	:= {}
Local nPosTipo  := GdFieldPos("RCP_TPMOV",	aHeaderRCP)	
Local nPosDtMov := GdFieldPos("RCP_DTMOV",	aHeaderRCP)
Local nPosDtImss:= GdFieldPos("RCP_DTIMSS",	aHeaderRCP)
Local nPosMat	:= GdFieldPos("RCP_MAT", 	aHeaderRCP)
Local cTipo		:= ""
Local cTipoProx := ""
Local nPos 		:= 0
Local nx		:= 0
Local ny		:= 0
Local dData     := Ctod("//")
Local dDataProx	:= Ctod("//")
Local aColsCop	:= aClone( aRCPCols )
Local aArea
Local aSvColsCop
Local nItens
Local nZ
Local nI
Local nJ
Local lFound

Default lGeraLog  := .F.
Default cFilSRA := xFilial("SRA")

If cPaisLoc == "MEX"
	Aadd(aTabTraj,{"01","02*04*05*07*11*12*20"})
	Aadd(aTabTraj,{"02","03*06*11*12"})
	Aadd(aTabTraj,{"03","02*04*05*07*11*12*20"})
	Aadd(aTabTraj,{"04","03*06*07*11*12*20"})
	Aadd(aTabTraj,{"05","02*04*05*07*11*12*20"})
	Aadd(aTabTraj,{"06","02*04*05*07*11*12*20"})
	Aadd(aTabTraj,{"07","02*03*04*05*06*07*11*12*20"})
	Aadd(aTabTraj,{"20","02*03*06*11*12"})
ElseIf cPaisLoc == "COS"
	Aadd(aTabTraj,{"01","02*04*05*11*12*21*22*23"})
	Aadd(aTabTraj,{"02","03"})
	Aadd(aTabTraj,{"03","02*04*05*11*12*21*22*23"})
	Aadd(aTabTraj,{"04","03"})
	Aadd(aTabTraj,{"05","02*04*05*11*12*21*22*23"})
ElseIf cPaisLoc == "COL"
	Aadd(aTabTraj,{"01","02*04*05*08*11*12*13"})
	Aadd(aTabTraj,{"02","03*04*08*09"})
	Aadd(aTabTraj,{"03","02*04*05**08*11*12*13"})
	Aadd(aTabTraj,{"04","03*04*08"})
	Aadd(aTabTraj,{"05","02*04*05*08*11*12*13"})
	Aadd(aTabTraj,{"08","04*08*09"})
ElseIf cPaisLoc == "PER"
	Aadd(aTabTraj,{"01","02*04*05*08*11*12*13"})
	Aadd(aTabTraj,{"02","03*04*08*09"})
	Aadd(aTabTraj,{"03","02*04*05*11*12*13"})
	Aadd(aTabTraj,{"04","03"})
	Aadd(aTabTraj,{"05","02*04*05*08*11*12*13"})
	Aadd(aTabTraj,{"08","09"})
EndIf	

If !(Type("aRCPSFIL") == "U")
	//Adiciona as linhas que foram retiradas atraves do superfiltro
	//para poder realizar a validacao corretamente                                      
	If Len(aRCPSFil) > 0 .and. !(ArrayCompare(aColsCop, aRCPSFil))
		For nI := 1 to Len(aRCPSFil)
			lFound := .F.
			For nJ := 1 to Len(aColsCop)			
				If !lFound .AND. ArrayCompare(aColsCop[nJ], aRCPSFil[nI]) 
					lFound := .T.				
				EndIf
			Next
			If !lFound		
				aAdd( aColsCop, aRCPSFil[nI])	
			EndIf
		Next
	EndIf
EndIf	
//Orderna Acols
aSort( aColsCop , , , { |x,y| x[nPosDtMov ] < y[nPosDtMov ] } )
aSvColsCop 	:= aClone( aColsCop )
nItens 		:= Len(aColsCop)
nPosOrdem 	:= Len(aColsCop[1])
For nX := 1 To nItens
	dData := aColsCop[nx,nPosDtMov]
	For nZ := nX To nItens
		cTipo 		:= aColsCop[nZ,nPosTipo]
		If aColsCop[nZ,nRCPUsado + 1]
			aAdd( aColsCop[nZ], "  ")
			Loop
		EndIf
		If aColsCop[nZ,nPosDtMov] <> dData
			If Len(aColsCop[nZ]) <= nPosOrdem
				aAdd( aColsCop[nZ], "  ")
			EndIf
			Exit
		EndIf
		
		If aColsCop[nZ,nPosDtMov] == dData .and. cTipo $ "01/06/05"
			If Len(aColsCop[nZ]) <= nPosOrdem
				aAdd( aColsCop[nZ], "01")
			Else
				aColsCop[nZ, nPosOrdem+1] := "01"
			EndIf
		ElseIf aColsCop[nZ,nPosDtMov] == dData .and. cTipo $ "02"
			If Len(aColsCop[nZ]) <= nPosOrdem
				aAdd( aColsCop[nZ], "02")
			Else
				aColsCop[nZ, nPosOrdem+1] := "02"
			EndIf
		Else
			If Len(aColsCop[nZ]) <= nPosOrdem
				aAdd( aColsCop[nZ], "  ")
			EndIf
		EndIf
	Next nZ
	If nZ -1 <> nX +1
		nX := nZ-1
	EndIf
Next nX

nPosOrdem := Len(aColsCop[1])
aSort( aColsCop , , , { |x,y| Dtos(x[nPosDtMov]) + x[nPosOrdem] < Dtos(y[nPosDtMov]) + y[nPosOrdem] } )

For nx := 1 to nItens
	If !aColsCop[nx,nRCPUsado + 1]
		cTipo 		:= aColsCop[nx,nPosTipo]
		dData 		:= aColsCop[nx,nPosDtMov]
		For ny := nx+1 to (Len(aColsCop))
			If !aColsCop[ny,nRCPUsado + 1]
				Exit
			EndIf
		Next ny  
		If cPaisLoc $ "COL|PER" //cPaisLoc == "COL"
			If nx == nItens
				/*If cTipo $ "04" .AND. !EMPTY(GetMemVar( "RA_CODRPAT" ))
						cHelp := OemToAnsi( STR0064 ) // "Debe capturarse el Traslado A otra EPS"      
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						lRet := .F.
				Endif
				If cTipo $ "08"
						cHelp := OemToAnsi ( STR0063 ) //"Debe capturarse el Traslado A otra AFP"     
						Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
						lRet := .F.
				Endif*/
			End If
		End If
		If ny > (Len(aColsCop))
			Loop
		EndIf
		cTipoProx 	:= aColsCop[ny,nPosTipo]
		dDataProx	:= aColsCop[ny,nPosDtMov]
		
		nPos := Ascan(aTabTraj,{|x| x[1]== cTipo})
		If nPos > 0		
			If !(cTipoProx $ aTabTraj[nPos,2]) .And. !Empty(cTipoProx)
				If lGeraLog
					lLog := .T.
					If aTotRegs[16]== 0
						cLog := STR0023 //"Hay una secuencia de los tipos de movimientos invalida
						Aadd(aTitle,cLog)  
						Aadd(aLog,{})
						aTotRegs[16] := len(aLog)
					Endif	
					aArea 	 	:= GetArea()
           	   		dbSelectArea("SRA")
           	   		dbSetOrder(1)
           	   		
               		If SRA->(dbSeek(cFilSRA + aColsCop[ny,nPosMat]))
						Aadd(aLog[aTotRegs[16]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME+" - "+SRA->RA_CODRPAT+" "+STR0033+" "+cTipo+"  "+STR0034+" "+cTipoProx)  
					Endif
					RestArea( aArea)
				Else
					cHelp := OemToAnsi( STR0023 )                   //"Hay una secuencia de los tipos de movimientos invalida"
					Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
				Endif
				lRet := .F.
			Endif
			If dData == dDataProx .and. !(( cTipo $ "01/06/05" .and. cTipoProx $ "02") .or. (cTipo $ "02" .and. cTipoProx $ "01/06/05"))
				If lGeraLog 
					lLog := .T.
					If aTotRegs[3]== 0
						cLog := STR0016 //"Datas Duplicadas                             
						Aadd(aTitle,cLog)  
						Aadd(aLog,{})
						aTotRegs[3] := len(aLog)
					Endif	   
					aArea 	 	:= GetArea()
            	    dbSelectArea("SRA")
               		dbSetOrder(1)
               		If SRA->(dbSeek(cFilSRA + aColsCop[ny,nPosMat]))
						Aadd(aLog[aTotRegs[3]],Space(10)+SRA->RA_MAT + "-" + SRA->RA_NOME+" - "+SRA->RA_CODRPAT +" "+STR0035+" "+dtoc(dData)+"  "+STR0036+" "+Dtoc(dDataProx))  
					Endif                  
					RestArea( aArea)
				Else
					cHelp := OemToAnsi( STR0016 )					//Datas Duplicadas
					Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
				Endif
				lRet := .F.
			Endif
		Endif
	Else
		If cPaisLoc $ "COL|PER" //cPaisLoc == "COL"
			If !Empty(aColsCop[nx,nPosDtImss])
				cHelp := OemToAnsi( STR0062 )			//No se puede eliminar el registro, cuenta con una fecha de envío		
				Help( ' ' , 1 , "GPEATRAJL" , , cHelp , 1 , 0 )
				lRet := .F.
			End IF
		End IF
	Endif
Next nx


aColsCop := aClone( aSvColsCop )

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fReorgColsºAutor  ³Microsiga           º Data ³  03/30/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Reorganiza os itens do acols caso tenha datas duplicadas    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fReorgCols(aRCPCols)

Local aNewCols
Local cTipo
Local cGhost
Local dData

Local lRepeatDate

Local nX
Local nZ
Local nItens
Local nPosReg
Local nPosOrdem
Local nPosTipo
Local nPosDtMov
Local nPosGhostCol

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Foi necessario a inclusao da reordenacao dos itens devido ao ³
³ a necessidade de permitir que o usuario tenha 2 datas iguais ³
³ para o tipo de Ingreso, Reingreso e demissao.                ³
³ Foi solicitado a inclusao de Modif. Salario e Baixa com a  ³
³ mesma data.                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ O FOR abaixo foi inserido apenas para efetuar trocas quando  ³
³ houver datas duplicadas.                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nPosDtMov	:= GdFieldPos( "RCP_DTMOV" , aHeaderRCP )
nPosTipo  	:= GdFieldPos( "RCP_TPMOV" , aHeaderRCP )
nItens 		:= Len(aRCPCols)
nPosOrdem 	:= Len(aRCPCols[1])
dData := Ctod("//")
lRepeatDate := .F.
For nX := 1 To nItens
	If aRCPCols[nx,nPosDtMov] == dData
		lRepeatDate := .T.
		Exit
	EndIf
	dData := aRCPCols[nx,nPosDtMov]
Next nX

If lRepeatDate
	For nX := 1 To nItens
		dData := aRCPCols[nx,nPosDtMov]
		For nZ := nX To nItens
			cTipo := aRCPCols[nZ,nPosTipo]
			If aRCPCols[nZ,nPosDtMov] <> dData
				If Len(aRCPCols[nZ]) <= nPosOrdem
					aAdd( aRCPCols[nZ], "  ")
				EndIf
				Exit
			EndIf
			If aRCPCols[nZ,nPosDtMov] == dData .and. cTipo $ "01/06/05"
				If Len(aRCPCols[nZ]) <= nPosOrdem
					aAdd( aRCPCols[nZ], "01")
				Else
					aRCPCols[nZ, nPosOrdem+1] := "01"
				EndIf
			ElseIf aRCPCols[nZ,nPosDtMov] == dData .and. cTipo $ "02"
				If Len(aRCPCols[nZ]) <= nPosOrdem
					aAdd( aRCPCols[nZ], "02")
				Else
					aRCPCols[nZ, nPosOrdem+1] := "02"
				EndIf
			Else
				If Len(aRCPCols[nZ]) <= nPosOrdem
					aAdd( aRCPCols[nZ], "  ")
				EndIf
			EndIf
		Next nZ
		If nZ -1 <> nX +1
			nX := nZ-1
		EndIf
	Next nX
	nPosOrdem := Len(aRCPCols[1])
	aSort( aRCPCols , , , { |x,y| Dtos(x[nPosDtMov]) + x[nPosOrdem] < Dtos(y[nPosDtMov]) + y[nPosOrdem] } )
	
	nPosGhostCol := GdFieldPos( "GHOSTCOL", aHeaderRCP )
	aNewCols := aClone(aRCPCols)
	aRCPCols := {}
	For nX := 1 To nItens
		cGhost 	:= aNewCols[nX, nPosGhostCol]
		nPosReg := Ascan( aRCPColsAnt, { |X| AllTrim( X[nPosGhostCol] ) == AllTrim(cGhost) } )
		aAdd(aRCPCols, aClone(aRCPColsAnt[nPosReg]) )
	Next nX
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Gp440CpoSal  ºAutor  ³Marcelo Silveira º Data ³  23/10/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Na alteracao verifica se o valor de reajuste informado eh   º±±
±±º          ³menor que o ultimo valor de salario cadastrado.             º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ GPEA440                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Gp440CpoSal()

Local lRet			:= .T. 

Local cCampoAtu		:= ReadVar()
Local nPosCpoAtu	:= 0
Local cCpoAtual		:= ""
Local nPosTpMov   	:= GdFieldPos( "RCP_TPMOV", aHeaderRCP )
 
	cCpoAtual := SubStr( cCampoAtu, 4, 10 )
	
	If aCols[n][nPosTpMov] == "05" .And. ( Len( aRCPColsAnt ) >= Len( aCols ) )
		If cCpoAtual $ "RCP_SALDII#RCP_SALMES#RCP_SALDIA"
			nPosCpoAtu    := GdFieldPos( cCpoAtual, aHeaderRCP )
			If nPosCpoAtu > 0
				If 	aRCPColsAnt[n][nPosCpoAtu] > &cCampoAtu
					lRet := MsgYesNo( cMsgSua )
				EndIf
			EndIf
		EndIf
	EndIf

Return( lRet )

/*                                	
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Gustavo     ³ Data ³08/01/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA440                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/   

Static Function MenuDef()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define array contendo as Rotinas a executar do programa      ³
//³ ----------- Elementos contidos por dimensao ------------     ³
//³ 1. Nome a aparecer no cabecalho                              ³
//³ 2. Nome da Rotina associada                                  ³
//³ 3. Usado pela rotina                                         ³
//³ 4. Tipo de Transa‡„o a ser efetuada                          ³
//³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
//³    2 - Simplesmente Mostra os Campos                         ³
//³    3 - Inclui registros no Bancos de Dados                   ³
//³    4 - Altera o registro corrente                            ³
//³    5 - Remove o registro corrente do Banco de Dados          ³
//³    6 - Legenda das Cores do Browse                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local aRotina	:=	{;
							{ STR0004	 , "PesqBrw"	, 0 , 1},;	//"Pesquisar"
							{ STR0005	 , "gp440Atu"	, 0 , 2},; 	//"Visualizar"
							{ STR0006	 , "gp440Aux"	, 0 , 4},;	//"Incluir"  
							{ STR0007	 , "gp440Atu"	, 0 , 4},;	//"Alterar"  
							{ STR0008	 , "gp440Atu"	, 0 , 5},;	//"Excluir"  
							{ STR0015	 , "gpLegend"	, 0 , 6 , ,.F.} }	//"Legenda"

Return aRotina

/*                                	
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fValidDate  	³Autor³  Mauricio Takakura³ Data ³30/08/2011³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validacao do Campo Data                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA440                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/   
Function fValidDate()
Local dDateCot 

Local nSalMes		:= 0
Local nSalDia		:= 0
Local nHorasDia		:= 0
Local nPosSalMes 	:= GdFieldPos("RCP_SALMES", aHeaderRCP)
Local nPosSalDia 	:= GdFieldPos("RCP_SALDIA", aHeaderRCP)
Local nPosHrsDia 	:= GdFieldPos("RCP_HRSDIA", aHeaderRCP)

dDateCot := M->RCP_DTMOV	// Data da Cotacao para Dolares
If dDateCot > Date()
	dDateCot := Date()
EndIf

fSalario_COS(SRA->RA_FILIAL, SRA->RA_MAT, @nSalMes, @nSalDia, dDateCot, @nHorasDia )

If nSalMes > 0
	oGet:aCols[n, nPosSalMes] := nSalMes
EndIf
If nSalDia > 0
	oGet:aCols[n, nPosSalDia] := nSalDia
EndIf
If nHorasDia > 0 
	oGet:aCols[n, nPosHrsDia] := nHorasDia
EndIf

Return( .T. )

/*                                	
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ Box_RcpTpMov  	³Autor³  Mauricio Takakura³ Data ³30/08/2011³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Itens do ComboBox - RCP_TPMOV                               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA440                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/   
Function BoxRcp_TpMov()
Local cOpcBox := ""

cOpcBox := ( "01=" + STR0049 + ";" )	//"Admissão"
cOpcBox += ( "02=" + STR0050 + ";" )	//"Demissão"
cOpcBox += ( "03=" + STR0051 + ";" )	//"Admissão Registro Patronal"
cOpcBox += ( "04=" + STR0052 + ";" )	//"Baixa Registro Patronal"
cOpcBox += ( "05=" + STR0053 + ";" )	//"Modificação de Salário"
cOpcBox += ( "11=" + STR0054 + ";" )	//"Modificação de Função"
cOpcBox += ( "12=" + STR0055 + ";" )	//"Modificação de Cargo"
cOpcBox += ( "20=" + STR0059 + ";" )	//"Baixa da Folha"
cOpcBox += ( "21=" + STR0056 + ";" )	//"Modificação Classe Seguro"
cOpcBox += ( "22=" + STR0057 + ";" )	//"Modificação Nro. Identificação"
cOpcBox += ( "23=" + STR0058 + ";" )	//"Modificação Jornada Trabalho"

Return( cOpcBox )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ gp440Aux		³Autor³  Gustavo M.	      ³ Data ³22/08/2012³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Utilizada para identificar quando é selecionado a opçao de  ³
³          ³incluir    													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA440                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³Gp440Atu													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function gp440Aux(cAlias,nReg,nOpcX)

lGPEA011 := IF(Type("lGPEA011")== "U",.F.,lGPEA011)

If lGPEA011
	lIncluir := .T.   
	lGPEA011 := .F.
ElseIF IsInCallStack("GPEA011") 
	nOpcX := 4
Endif

Return(Gp440Atu(cAlias,nReg,nOpcX))  

