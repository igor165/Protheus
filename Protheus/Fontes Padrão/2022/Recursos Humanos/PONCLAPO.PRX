#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "PONCLAPO.CH"
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Begin Constantes Manifestas para o aApo					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
#DEFINE ELEMENTOS_MATRIZ_APONTAMENTOS		44  //-- Constante numero de Elementos na Matriz de Apontamento
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³End Constantes Manifestas para o aApo						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Constantes Manifestas para o Array de Tolerancias Diarias    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
#DEFINE ELEMENTOS_DO_ATOLERANCIA_DIARIA	07

#DEFINE TOLERANCIA_DE_ATRASO			01
#DEFINE TOLERANCIA_DE_SAIDA				02
#DEFINE TOLERANCIA_DE_ADN_NOT			03
#DEFINE TOLERANCIA_DE_ADN_NOT_HE		04
#DEFINE TOLERANCIA_DE_FALTAS			05
#DEFINE TOLERANCIA_DE_HE_PERIODO		06
#DEFINE TOLERANCIA_HR_N_REALIZADO		07

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Constantes Manifestas para o Array de Arredondamentos Diarios³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
#DEFINE ELEMENTOS_DO_ARRED_DIARIO	07

#DEFINE ARRED_ATRASO				01
#DEFINE ARRED_DSR					02
#DEFINE ARRED_FALTAS				03
#DEFINE ARRED_HE					04
#DEFINE ARRED_NOTURNO				05
#DEFINE ARRED_SAIDA					06
#DEFINE ARRED_9_HORA				07

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Constantes Manifestas para o Array de Arredondamentos Diarios³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
#DEFINE	G_HEADER  		01//-- 01 aHeader
#DEFINE	G_ABO			03//-- 03 aSvtree Abonos
#DEFINE G_MAIN			04//-- 04 Array PRINCIPAL com TODAS as linhas do GetDados
#DEFINE	G_NSVUSADO		14//-- 14 nUsado

//-- Campos da tabela SPC para atendimento a portaria 1.510
Static __lCpoTurno
Static __lCpoSemana
Static lPa_TolHeMe		:= SPA->( FieldPos( "PA_TOLHEME" ) ) > 0

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o	 ³ PONCLAPO ³ Autor ³ Marinaldo de Jesus    ³ Data ³26/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Biblioteca de Classes utilizadas no Apontamento dE Marcacoes³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGAPON                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Leandro Dr. ³13/04/14³      ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³        ³      ³que nao serao utilizados na P12.		  ³±±
±±³Luis Artuso ³02/02/15³TQVIPM³ Ajuste na verificacao do pre-abono no    ³±±
±±³            ³        ³      ³ horario movel livre.		 	  		  ³±±
±±³Luis Artuso ³22/06/15³TSPD59³Ajuste para validar tolerancia por marca- ³±±
±±³            ³        ³      ³cao ou por periodo, conforme artigo 58.   ³±±
±±³Luis Artuso ³31/07/15³TSYWKY³Ajuste p/ atualizar os eventos de hora ex-³±±
±±³            ³        ³      ³tra autorizada/nao autorizada quando hou- ³±±
±±³            ³        ³      ³ver quebra de filial. 					  ³±±
±±³Renan Borges³09/09/15³TSYWKY³Ajuste p/ apurar horas extras corretamente³±±
±±³            ³        ³      ³de acordo com o  artigo 58 da CLT, respei-³±±
±±³            ³        ³      ³tando as tolerâncias por marcações e por  ³±±
±±³            ³        ³      ³períodos.                                 ³±±
±±³Renan Borges³02/10/15³TTLGAW³Ajuste na apuração de hora extra para não ³±±
±±³            ³        ³      ³gerar horas negativas ou apontamento de ho³±±
±±³            ³        ³      ³ra extra indevido.                        ³±±
±±³Renan Borges³07/12/15³TTTSI7³Ajuste para calcular horas extras não-auto³±±
±±³            ³        ³      ³rizadas corretamente, respeitando os limi-³±±
±±³            ³        ³      ³tes de tolerância do art. 58              ³±±
±±³Leandro Dr. ³01/03/16³TUHR93³Ajuste na apuração de hora extra para não ³±±
±±³            ³        ³      ³gerar horas negativas ou apontamento de ho³±±
±±³            ³        ³      ³ra extra indevido. Réplica TUAWUR         ³±±
±±³Renan Borges³12/04/16³TUWK79³Ajuste gerar hora extra noturna quando for³±±
±±³            ³        ³      ³ decorrente de trabalho noturno e possuir ³±±
±±³            ³        ³      ³o campo de prorrogação como "Sim" na regra³±±
±±³            ³        ³      ³de apontamento.                           ³±±
±±³Renan Borges³13/05/16³TVEQZX³Ajuste para não gerar horas extras negati-³±±
±±³            ³        ³      ³vas.                                      ³±±
±±³Matheus M.  ³26/07/16³TVJRFW³Ajuste para apresentar a  quantidade de   ³±±
±±³            ³        ³      ³horas abonadas corretamente.              ³±±
±±³Matheus M.  ³22/08/16³TVSHZS³Ajuste para apurar a quantidade de saída  ³±±
±±³            ³        ³      ³antecipada corretamente.	              ³±±
±±³Matheus M.  ³24/10/16³TVN921³Ajuste para abrir a tabela SPA corretamen-³±±
±±³            ³        ³      ³te e verificar se o campo PA_TPAONT existe³±±
±±³Allyson M.  ³29/12/16³MRH-  ³Ajuste na validação da tolerância de atra-³±±
±±³            ³        ³1226  ³so e saída antecipada p/ desconsiderar os ³±±
±±³            ³        ³      ³abonos 				  					  ³±±
±±³Renan Borges³09/05/17³DRHPON³Ajuste para realizar apontamento correto  ³±±
±±³            ³        ³TP-312³quando houver abono em atrasos/saídas ante³±±
±±³            ³        ³      ³cipadas. O abono é utilizado no momento do³±±
±±³            ³        ³      ³cálculo mensal e não no apontamento das   ³±±
±±³            ³        ³      ³marcações, pois é necessário que os aponta³±±
±±³            ³        ³      ³mentos sejam apresentados, para histórico ³±±
±±³            ³        ³      ³por exemplo.                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PonClaApo   ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³main?                              				 			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³                                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function PonClaApo()

Return( NIL )
/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³InPonClapoExec³Autor ³Marinaldo de Jesus   ³ Data ³24/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executar Funcoes Dentro de PONCLAPO                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³InPonClapoExec( cExecIn , aFormParam )						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico 													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function InPonClapoExec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	 := &( cExecIn )
EndIF

Return( uRet )
//Begin Class PonVarApon

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Class     ³PonVarApon  ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Classe com as Variaveis e Metodos utilizado no Apontamento de³
³          ³marcacoes													 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := PonVarApon():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³                                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
class PonVarApon

	data aAbonos
	data aAbonosPer
	data aApo
	data aApoHr 	
	data aArreds
	data aArred_A
	data aArred_D
	data aArred_F
	data aArred_H
	data aArred_N
	data aArred_S
	data aArred_9
	data aFaixasHe
	data aHeAutoDia
	data aHeAutoAnt
	data aPreAbo
	data aPreAboDia
	data aHoras
	data aHorasTot
	data aHrTrab
	data aTabExtra
	data aAllTabExtra
	data aHorasAnt
	data aTabCalend
	data aTabClone
	data aMarClone
	data aResClone
	data aNona
	data aLastLog
	data aChkTolArr
	data aSiglaMarc
	data aResult
	data aHrNReal
	data aResAbo
	data aProcessad
	data aLstChkMvInt
	data aAfasta
	data aTransf
	data aSvtree

	data bSortaHoras
	data bSortaHrTrab
	data bSortaResult

	data cFilRegLst
	data cFilTnoLst

	data cFilSP6
	data cHrMovel
	data cInMovel
	data cAjustIn
	data cAjustEj
	data cChkTMov
	data cChkTMvi
	data cTipoMarc
	data cTipoDia
	data cTipoDiaAt
	data cTolHex
	data cPerAnot
	data cPgIntNTrb
	data cPgNotINTrb
	data cCodHe
	data cPagHext
	data cHrNorm
	data cPgHeDnt
	data cPagInt
	data cPagNotInt
	data cIntFalt
	data cAdNot
	data cAdNotEx
	data cFaltas
	data cSaiAnt
	data cPerSaiA
	data cPerAtra
	data cTolaSai
	data cAtrasos
	data cSaiExpe
	data cCustoGrv
	data cRegra
	data cTnoCalend    
	data cSeqTno    
	data cFilSPA
	data cFilSR6
	data cTpHeInter
	data cInterNt
	data cPerHmov
	data cDsr
	data cPerHext
	data cInicJornada
	data cOrdem

	data cIdsAtras
	data cIdsSaida
	data cIdsNotur
	data cIdsNotHe
	data cIdsFalta
	data cIdsExtra
	data cLstChkMvInt
    data cTpJorn

	data dData
	data dDtPesq
	data dIniAfas
	data dFimAfas
	data dDataGravar
	data dPerIni
	data dPerFim
	data dPerNotIni
	data dUltDia
	data dSvdIni
	data dSvdFim

	data lAcreNot
	data lIdAcreNot
	data lSepAcrNot
	data lHrNr

	data lHnotTab
	data lHnotTbI
	data lHnotFal
	data lHnotAtr
	data lHnotSai
	data lMovelFree
	data lIntMovFree
	data lExtNot
	data lFaixaHE
	data lRF0ChkTable
	data lIntNtrab
	data lModFil
	data lApTpMar
	data lChkTolArr
	data lAbonosPer
	data lApontaTpTrab
	data lPaAjustEJ
	data lPagIntN
    data lAdHeDia
    data lPaPrimDom
    data lPaDescLab
    data lPaFestLab
	data lPrimDom
    data lDescLab
    data lFestLab
    data lAdNtPro
    data lApoSaida
    data lPerpadn
    data lPaPgInTot
    data lErroApon        
        
	data lfTabHeAut
	data lfTabPreAbo
	data lApontaOk
	data lTransfEmp
	data lAponHeAfa
	data lAponHrAfa
	data lAtestMed

	data nLenHoras
	data nElem
	data nStartnN
	data nProcessad
	data nMarcTab
	data nTotMarcTab
	data nPosAux
	data nDiaIni
	data nDiaFim
	data nPosCalend
	data nIndice
	data nCountOrd
	data nLenMarc
	data nInicJornada
	data nProxJornada
	data nChkTolArr
	data nLenRes
	data nErrorNumber
	data nSiglaMarc
	data nJornadasAp
	data nTamP8Ordem

	data nPosOrdMarc

	data nTHrTab
	data nIntTab
	data nAntMove
	data nPosMove
	data nMovAint
	data nMovPint
	data nIniHnot
	data nFimHnot
	data nMinHnot
	data nTolNtHe
	data nTolHePe
	data nTolFalt
	data nTolNotu
	data nTolSaia
	data nTolAtra
	data nTolHrNR
	data nHrsDsr
	data nNonaHor
	data nNonaHorAut
	data nHrInterJd
	data nHeInterA
	data nHeInterN
    data nHrsPgs

            
	data oProcessad
	data oaApo
	data oSpaFields
	data oSr6Fields

	method New() constructor

	method ZeraApo( aNotZeraApo )

	method ZeraApoHr()

	method ZeraHrTab( lApHeDtm )

	method SortaHoras( bSort , aHoras )

	method SortaHrTrab( bSort , aHrTrab )

	method SortaResult( bSort , aResult )

	method AddHrTrab( 	dData	,;	//01 -> Data Para Comparacao
						nHoras	,;	//02 -> Horas Para Comparacao
						cTpMarc	,;	//03 -> Tipo da Marcacao
						cCusto	,;	//04 -> Centro de Custo da Marcacao
						cFlag	,;	//05 -> Flag da Marcacao 
						lDuplic	 ;	//06 -> Permite a Duplicacao da Marcacao
					  )

	method ChkMarcDup()

	method ChkHrTDupl()

	method ChkApoAfas()
	
	method ChkAdmDem()

	method RmkWorkHrs()
	
	method RmkIntHrs( aHrTab )

	method ChkMarcImpar()

	method SetaProcessad( lSet , cKey , nPos )

	method PosaProcessad( cKey )

	method GetSetTnoC( aTabCalend )

	method GetSetRegra( aTabCalend )

	method FilRegLstInit()

	method FilTnoLstInit()

	method FilRegCompare()

	method FilTnoCompare()

	method GetSetOrdem( nOrdem )

	method GetSetSPAFil()

	method GetSetSP6Fil()

	method GetSetSR6Fil()

	method GetTabArred()

	method GetTabExtra()

	method GetCfgNot()

	method GetAbonos()

	method GetAbonosPer( aAbonosPer , cFilSRA , cMatSRA )

	method SpaGetSetCpos( aTabCalend )

	method Sr6GetSetCpos( aTabCalend )

	method PosSr6( uCpo , lMsGoto , nOrder )

	method PosSpa( uCpo , lMsGoto , nOrder , lSetRegra )

	method InitChkArr()
	
	method AddDtChkArr()

	method FlgChkArr( lFlag )

	method PutTolArrChkArr()

	method InitProcJorn()

	method ChkTolArr( aEvesIds , lMvArrInte )	//Array com os Eventos x Identificadores do Ponto

	method RstlChkTolArr()

	method ChkRegra( cFilSRA , cMatSRA )    //Filial e Matricula do Funcionario

	method fTabHeAut(	cFilSRA		,;  	//Filial do Funcionario
						cMat 		,;  	//Matricula do Funcionario
						dPerIni 	,;  	//Data Inicial do Periodo de Apontamento
						dPerFim		 ;  	//Data Final do Periodo de Apontamento
		  		     )

	method fTolDiaria(	dData		,;		//Data para Verificacao da Tolerancia
						aEvesIds	,;		//Array com os Eventos x Identificadores do Ponto
						aTolDiaria	 ;		//Array com Todas as Tolerancias do Dia
					  )

	method fAvalTol( dData , cEventos , nTolerancia, lVerHrNr, cTpHrExt )
	

	method fArrDiario(	dData			,;	//Data para Verificacao dos Arredondamentos
						aArredDiario	,;	//Array com as Tabelas de Arredondamento por Dia
						lMvArrInte		 ;	//Se o Arredondamento das Horas e de forma Integral
					  )

	method ChkInMvFree( lReapEj )			//Se realmente ira forcar o Reapontamento desde a Entrada de Jornada

	method ChkHrMovel(	cTipo 			,;	//01 -> "EJ"(Entra da de Jornada), "SI"(Saida de Intervalo) ou "SE" (Sai.Exp.)
						nPosM			,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
						cSiglaMarc		 ;	//03 -> Tipo da Marcacao ( 1E, 1S, 2E, 2S ... )
					 )

	method TabPreAbo(	cFilSRA		,;  	//01 -> Filial do Funcionario
						cMat 		,;  	//02 -> Matricula do Funcionario
						dPerIni 	,;  	//03 -> Data Inicial do Periodo de Apontamento
						dPerFim		 ;  	//04 -> Data Final do Periodo de Apontamento
		  		     )  
                      
	method InitPreAbo( aTabCalend, cFilSRA, cMatSRA ) 

	method AddPerHr(    nIdDiaApo	,;  //01 -> Identificador do Elemento Diurno no Apo
	                    nIdNotApo	,;  //02 -> Identificador do Elemento Noturno no Apo
	                    nPosElem	,;  //03 -> Posicao no Elemento do Identificador
	                    aApoHr		,;  //04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
	                    dDt1		,;	//05 -> Data 1
						nHr1		,;	//06 -> Hora 1
						dDt2		,;	//07 -> Data 2
						nHr2		,;	//08 -> Hora 2
						nHoras		,;	//09 -> <@>Horas Normais Apontadas
						nHorasNot	,;	//10 -> <@>Horas Noturnas Apontadas
						lNoturno	,;	//11 -> Apontar Horas Noturnas
						dDtIni		,;	//12 -> Data Inicial Para a Hora Noturna
						nHrAcNot	,;	//13 -> <@>Horas de Acrescimo Noturno
						nIniHnot	,;	//14 -> Inicio do Horario Noturno
						nFimHnot	,;	//15 -> Final do Horario Noturno
						nMinHnot	,;	//16 -> Minutos do Horario Noturno
						lAcreNot	,;	//17 -> Apenas Acrescimo Noturno
						aPerNot		,;	//18 -> Periodo Horario Noturno
						aPerDia		,;	//19 -> Periodo Horario Diurno 
						lSoma		,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
						lNewAddHor	;   //21 -> Adiciona Periodo como Novo Elemento   
					  )	   
					  	  		                         
	method CalcPerHr(	dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2		,;	//04 -> Hora 2
						nHoras		,;	//05 -> <@>Horas Normais Apontadas
						nHorasNot	,;	//06 -> <@>Horas Noturnas Apontadas
						lNoturno	,;	//07 -> Apontar Horas Noturnas
						dDtIni		,;	//08 -> Data Inicial Para a Hora Noturna
						nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno 
						nIniHnot	,;	//10 -> Inicio do Horario Noturno
						nFimHnot	,;	//11 -> Final do Horario Noturno
						nMinHnot	,;	//12 -> Minutos do Horario Noturno
						lAcreNot	,;	//13 -> Apenas Acrescimo Noturno
						aPerNot		,;	//14 -> Periodo Horario Noturno 
						aPerDia		;	//15 -> Periodo Horario Diurno
				  )	
	 			    				  				  
	method GetPerDia(   dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2		,;	//04 -> Hora 2				
						aPerNot		,;	//05 -> Periodo da Hora Noturna
						aPerDia		 ;	//06 -> Periodo da Hora Diurna
					  )
					     
					 
  	method PutPer(	nIdApo		,;  //01 -> Identificador do Elemento no Apo
               		nPosElem	,;  //02 -> Posicao no Elemento do Identificador
               		aPer		,;	//04 -> Array de Periodos Diurno e/ou Noturno
               		lNewAdd		;   //05 -> Adiciona Periodo ao aApoHr
               	 )
                	
   	method AlocaPer(    nIdOrigem	,; //01 -> Identificador de Origem
   						nItOrigem	,; //02 -> Item de Origem
   						nIdDestino	,; //03 -> Identificador de Destino
   						nItDestino	,; //04 -> Item Destino
   						lAddNew		;  //05 -> Adiciona Periodo
   					) 

	method IdPreAbo(  	dDtGer								,;	//01 -> Data da Geracao
						nIdentificador						,;  //02 -> Elemento do Apontamento
						nIndice								,;  //03 -> Item do Elemento
						cEvento								,;	//04 -> Codigo do Evento
						cCustoGrv							,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc							,;	//06 -> Tipo de Marcacao
						lAcumula							,;	//07 -> True para Acumular as Horas
						cPerApur							,;	//08 -> Periodo de Apuracao
						nTolera								,;	//09 -> Tolerancia
						cTipoArred				 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					   	cFuncao								,;  //11 -> Funcao a ser Gravada 
					    cDepto								,;  //12 -> Depto a ser gravado
						cPosto								,;  //13 -> Posto a ser gravado	
						cProcesso			  				,;  //14 -> Processo a ser gravado
						cPeriodo							,;  //15 -> Periodo  a ser gravado
						cRoteiro 							,;  //16 -> Roteiro  a ser gravado
						cNumPagto							,;  //17 -> NumPagto a ser gravado
						cTnoCalend							,;  //18 -> Turno de Trabalho
						cSeqTno								,;  //19 -> Semana/Sequencia do Turno
						lHrNr								,;	//20 -> Horas nao realizadas (atrado/saida antecipada)
						aHrNReal                            ;  //21 -> Array com as horas nao realizadas
						)					
	
    method SaidaAntPreAbo()

endclass

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³New       	³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Construtor da Classe PonVarApon								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := PonVarApon():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method New() class PonVarApon

	::aAbonos		:= {}
	::aAbonosPer	:= {}
	::aApo			:= {}
	::aApoHr		:= {}
	::aArreds		:= {}
	::aArred_A		:= {}
	::aArred_D		:= {}
	::aArred_F		:= {}
	::aArred_H		:= {}
	::aArred_N		:= {}
	::aArred_S		:= {}
	::aArred_9		:= {}
	::aFaixasHe		:= {}
	::aHeAutoDia	:= {}
	::aHeAutoAnt	:= {}
	::aPreAbo		:= {}
	::aPreAboDia	:= {}
	::aHoras		:= {}
	::aHorasTot		:= {}
	::aHrTrab		:= {}
	::aTabExtra		:= {}
	::aAllTabExtra	:= {}
	::aHorasAnt		:= {}
	::aTabCalend	:= {}
	::aTabClone		:= {}
	::aMarClone		:= {}
	::aResClone		:= {}
	::aNona			:= {}
	::aLastLog		:= {}
	::aChkTolArr	:= {}
	::aSiglaMarc	:= {}
	::aResult		:= {}
	::aHrNReal		:= {}
	::aResAbo		:= {}
	::aProcessad	:= {}
	::aLstChkMvInt	:= {}
	::aAfasta		:= {}
	::aTransf		:= {}
	::aSvtree		:= {}

	::bSortaHoras	:= { |x,y|	(;
										x[17] + x[03]; 	//-- Data e Hora da Marcacao + Tipo da Marcacao
										<;
										y[17] + y[03];	//-- Data e Hora da Marcacao + Tipo da Marcacao
								 );
						}

	::bSortaHrTrab	:= { |x,y|	(;
									x[09] + x[03]; 	//-- Data e Hora da Marcacao + Tipo da Marcacao
									<;
									y[09] + y[03];	//-- Data e Hora da Marcacao + Tipo da Marcacao
								);
						}

	::bSortaResult := { |x,y|	x[ARESULT_DTOS_DATA]	+	;
	    			  			x[ARESULT_EVENTO]		+	;
	                    		x[ARESULT_TPMARCA]			;
	                    		<;
	                    		y[ARESULT_DTOS_DATA]	+	;
	                    		y[ARESULT_EVENTO]		+	;
	                    		y[ARESULT_TPMARCA]			;
				 	  }

	::cFilRegLst	:= ::FilRegLstInit()
	::cFilTnoLst	:= ::FilTnoLstInit()

	::cFilSP6		:= ""
	::cHrMovel		:= ""
	::cInMovel		:= ""
	::cAjustIn		:= ""
	::cAjustEj		:= ""
	::cChkTMov		:= ""
	::cChkTMvi		:= ""
	::cTipoMarc		:= ""
	::cTipoDia		:= ""
	::cTipoDiaAt	:= ""
	::cTolHex		:= ""
	::cPerAnot		:= ""
	::cPgIntNTrb	:= ""
	::cPgNotINTrb	:= ""
	::cCodHe		:= ""
	::cPagHext		:= ""
	::cHrNorm		:= ""
	::cPgHeDnt		:= ""
	::cPagInt		:= ""
	::cPagNotInt	:= ""
	::cIntFalt		:= ""
	::cAdNot		:= ""
	::cAdNotEx		:= ""
	::cFaltas		:= ""
	::cSaiAnt		:= ""
	::cPerSaiA		:= ""
	::cPerAtra		:= ""
	::cTolaSai		:= ""
	::cAtrasos		:= ""
	::cSaiExpe		:= ""
	::cCustoGrv		:= ""
	::cRegra		:= ""
	::cFilRegLst	:= ""
	::cTnoCalend  	:= ""
	::cSeqTno		:= ""    
	::cFilTnoLst	:= ""
	::cFilSPA	  	:= ""
	::cFilSR6		:= ""
	::cTpHeInter	:= ""
	::cInterNt		:= ""
	::cPerHmov		:= ""
	::cDsr			:= ""
	::cPerHext		:= ""
	::cInicJornada	:= ""
	::cOrdem		:= ""

	::cIdsAtras		:= "011N*012A"
	::cIdsSaida		:= "013N*014A*019N*020A"
	::cIdsNotur		:= "003N*004A*"
	::cIdsNotHe		:= "027N*028A"
	::cIdsFalta		:= "007N*008A*009N*010A*033N*032A*035N*034A"
	::cIdsExtra		:= "029A.038N" 
	::cLstChkMvInt	:= "__cLstChkMvInt__"
	::cTpJorn		:= ""

	::dData			:= Ctod("//")
	::dDtPesq		:= Ctod("//")
	::dIniAfas		:= Ctod("//")
	::dFimAfas		:= Ctod("//")
	::dDataGravar	:= Ctod("//")
	::dPerIni		:= Ctod("//")
	::dPerFim		:= Ctod("//")
	::dPerNotIni	:= Ctod("//")
	::dUltDia		:= Ctod("//")
	::dSvdIni		:= Ctod("//")
	::dSvdFim		:= Ctod("//")

	::lAcreNot		:= .F.
	::lIdAcreNot	:= .F.
	::lSepAcrNot	:= .F.
	::lHnotTab		:= .F.
	::lHnotTbI		:= .F.
	::lHnotFal		:= .F.
	::lHnotAtr		:= .F.
	::lHnotSai		:= .F.
	::lMovelFree	:= .F.	
	::lIntMovFree	:= .F.
	::lExtNot		:= .F.
	::lFaixaHE		:= .F.
	::lRF0ChkTable	:= .F.
	::lIntNtrab		:= .F.
	::lModFil		:= .F.
	::lApTpMar		:= .F.
	::lChkTolArr	:= .F.
	::lAbonosPer	:= .F.
	::lApontaTpTrab	:= .F.
	::lPaAjustEJ	:= .F.
	::lPagIntN		:= .F.
	::lAdHeDia		:= .F.
	::lPAPrimDom	:= .F.
	::lPAFestLab	:= .F.
	::lPADescLab	:= .F.
	::lPrimDom		:= .F.
	::lFestLab		:= .F.
	::lAdNtPro		:= .F.
	::lPerpadn		:= .F.
	::lApoSaida		:= .F.
	::lDescLab		:= .F.
	::lPaPgInTot	:= .F.
	::lErroApon		:= .F.

				
	::lfTabHeAut	:= .T.
	::lfTabPreAbo	:= .T.
	::lApontaOk    	:= .T.
	::lTransfEmp	:= .F.
	::lAponHeAfa	:= SuperGetMv('MV_APONTAF',.F.,.F.)
	::lAponHrAfa	:= SuperGetMv('MV_APOHRAF',.F.,.F.)
	::lAtestMed		:= .F.

	::nLenHoras		:= 0
	::nElem			:= 0
	::nStartnN		:= 0
	::nProcessad	:= 0
	::nMarcTab		:= 0
	::nTotMarcTab	:= 0
	::nPosAux		:= 0
	::nDiaIni		:= 0
	::nDiaFim		:= 0
	::nPosCalend	:= 0
	::nIndice		:= 0
	::nCountOrd		:= 0
	::nLenMarc		:= 0
	::nInicJornada	:= 0
	::nProxJornada	:= 0
	::nChkTolArr	:= 0
	::nLenRes		:= 0
	::nErrorNumber	:= 0
	::nSiglaMarc	:= 0
	::nJornadasAp	:= 0
	::nTamP8Ordem	:= 0

	::nPosOrdMarc	:= 1

	::nTHrTab		:= 0
	::nIntTab		:= 0
	::nAntMove		:= 0
	::nPosMove		:= 0
	::nMovAint		:= 0
	::nMovPint		:= 0
	::nIniHnot		:= 0
	::nFimHnot		:= 0
	::nMinHnot		:= 0
	::nTolNtHe		:= 0
	::nTolHePe		:= 0
	::nTolFalt		:= 0
	::nTolNotu		:= 0
	::nTolSaia		:= 0
	::nTolAtra		:= 0
	::nTolHrNR		:= 0
	::nHrsDsr		:= 0
	::nNonaHor		:= 0
	::nNonaHorAut	:= 0
	::nHrInterJd	:= 0
	::nHeInterA		:= 0
	::nHeInterN		:= 0
	::nHrsPgs		:= 0

	::nSiglaMarc	:= TabMarc( "SPJ" , ::aSiglaMarc )
	::nJornadasAp	:= ( ::nSiglaMarc / 2 )
	::nTamP8Ordem	:= GetSx3Cache( "P8_ORDEM" , "X3_TAMANHO" )

	::oProcessad	:= ApoElemPrc():New( ::aProcessad )
	::oaApo			:= StructaApo():New()
	::oSpaFields	:= SpaFields():New()
	::oSr6Fields	:= Sr6Fields():New()

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ZeraApo		³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa o Array aApo										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ZeraApo( aNotZeraApo )									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ZeraApo( aNotZeraApo ) class PonVarApon

	Local nNotZera
	
	IF Empty( ::aApo )
		::aApo := ( Array( ELEMENTOS_MATRIZ_APONTAMENTOS , ::nSiglaMarc ) )
	EndIF

	aEval( ::aApo , { |uArr,nZera| nNotZera := nZera , IF( aScan( aNotZeraApo , nNotZera ) == 0 , aFill( ::aApo[ nZera ] , 0 ) , NIL ) } )

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ZeraHrTab	³ Autor ³Marinaldo de Jesus    ³ Data ³03/07/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Zera Horario da Tabela em Dias Nao Trabalhados				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ZeraApo()           									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ZeraHrTab( lApHeDtm ) class PonVarApon

	Local nX
	Local nW
	Local nFornW
	Local nIntTab
	Local lPreIntNTrab
   
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica as Horas de Intervalo para a Jornada em Questao	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	
	nIntTab := 0.00 
			
	For nW:= ::nPosCalend to Len(::aTabCalend)
	    If ::aTabCalend[nW,CALEND_POS_ORDEM] == ::cOrdem
		   nIntTab := SomaHoras( nIntTab , ::aTabCalend[nW, CALEND_POS_HRS_INTER] )
	    Else
	       Exit
	    Endif
	Next nW   

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica Se paga Intervalo em Dias Nao Trabalhados           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
   	lPreIntNTrab	:= (;
   							( ::aTabCalend[ ::nPosCalend , CALEND_POS_TIPO_DIA ] != "S" );
					 		.and.;
					 		( nIntTab > 0 );
					 		.and.;
					 		( ::lPagIntN );
					 		.and.;
					 		!( ::aTabCalend[ ::nPosCalend , CALEND_POS_TRAB_FERIADO ] );
					 	)	

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se a apuracao das Horas Extras for de Acordo com a Data    da³
	³Marcacao zera os Horarios da Tabela para Dias Nao Trabalhados³
	³BOPS 000015491												  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF (;
			( lApHeDtm );
			.and.;
			!( lPreIntNtrab );
			.and.;
			(;
				(;
					( ::aTabCalend[ ::nPosCalend , CALEND_POS_TIPO_DIA ] != "S" );
					.or.;
					(;
						( ::aTabCalend[ ::nPosCalend , CALEND_POS_FERIADO ] );
						.and.;
						!( ::aTabCalend[ ::nPosCalend , CALEND_POS_TRAB_FERIADO ] );
					);
				);
				.and.;
				( ::aTabCalend[ ::nPosCalend , CALEND_POS_EXCECAO ] != "E" );
			 );
		)
		nX := 0
		nW := Len( ::aTabClone )
		IF ( ( nFornW := aScan( ::aTabClone , { |x| x[ CALEND_POS_ORDEM ] == ::cOrdem } ) ) > 0 .And. !::lAponHeAfa)
			While (;
						( nFornW <= nW );
						.and.;
						( nW > 0 );
						.and.;
						( ::aTabClone[ nFornW , CALEND_POS_ORDEM ] == ::cOrdem );
					)	
				IF ( ++nX <= 2 )
					::aTabClone[ nFornW , CALEND_POS_DATA		] := ::dData
		  			::aTabClone[ nFornW , CALEND_POS_HORA		] := 23.5958
					::aTabClone[ nFornW , CALEND_POS_HRS_TRABA	] := 0
	   				::aTabClone[ nFornW , CALEND_POS_HRS_INTER	] := 0
				Else
					( aDel( @::aTabClone , nFornW ) , aSize( @::aTabClone , --nW  ) , --nFornW )
				EndIF
				++nFornW
			End While	
		EndIF 
	EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³SortaHoras	³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Sorteia o Array aHoras										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:SortaHoras( [ bSort ] , [ aHoras ] )					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method SortaHoras( bSort , aHoras ) class PonVarApon

	DEFAULT bSort := ::bSortaHoras
	IF ( ValType( aHoras ) == "A" )
		aSort( aHoras , NIL , NIL , bSort )
	Else
		aSort( ::aHoras , NIL , NIL , bSort )
	EndIF	

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³SortaHrTrab	³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Sorteia o Array aHrTrab 									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:SortaHrTrab( [ bSort ] , [ aHrTrab ] )					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method SortaHrTrab( bSort , aHrTrab ) class PonVarApon

	DEFAULT bSort := ::bSortaHrTrab
	IF ( ValType( aHrTrab ) == "A" )
		aSort( aHrTrab , NIL , NIL , bSort )
	Else
		aSort( ::aHrTrab , NIL , NIL , bSort )
	EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³SortaResult	³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Sorteia o Array aResult  									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:SortaResult( [ bSort ] , [ aResult ] )					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method SortaResult( bSort , aResult ) class PonVarApon

	DEFAULT bSort := ::bSortaResult
	IF ( ValType( aResult ) == "A" )
		aSort( aResult , NIL , NIL , bSort )
	Else
		aSort( ::aResult , NIL , NIL , bSort )
	EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³AddHrTrab	³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega o Array aHrTrab com as Horas para o Calculo de  Horas³
³          ³Trabalhadas													 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:AddHrTrab( ... )										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method AddHrTrab( dData , nHoras , cTpMarc , cCusto , cFlag , lDuplic ) class PonVarApon

	DEFAULT cFlag	:= ""
	DEFAULT lDuplic := .F.

	IF (;
			( lDuplic );
			.or.;
			( aScan( ::aHrTrab , { |x| ( ( x[01] == dData ) .and. ( x[02] == nHoras ) .and. ( x[03] == cTpMarc ) ) } ) == 0 );
		)
		aAdd( ::aHrTrab ,;
							{;
	 							dData							,;	//01 - Data da Marcacao
								nHoras							,;	//02 - Hora da Marcacao
								cTpMarc							,;	//03 - Tipo da Marcacao
								cCusto							,;	//04 - Centro de Custo da Marcacao
								0								,;	//05 - Valor Auxiliar Horas Normais
								0								,;	//06 - Valor Auxiliar Horas Noturnas
								0								,;	//07 - Valor Auxiliar Adicional Noturno
								cFlag							,;	//08 - Marcacao ou Tabela
								DataHora2Str( dData , nHoras )  ,;	//09 - String de Data Para Sorteio do aHrTrab
								::dPerNotIni					 ;	//10 - Data Inicial do Horário Noturno.
							};
			)
	EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkHrTDupl	³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se Existem Flags de Tipo de Marcacao Duplicados  pri³
³          ³orizando a Marcacao em Detrimento da Tabela					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ChkHrTDupl()        									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkHrTDupl() class PonVarApon
       
	Local nChk := 0
	Local nDup := 0
	
	Begin Sequence

		::nLenHoras := Len( ::aHrTrab )
		IF ( ( ::nLenHoras % 2 ) == 0 )
			Break
		EndIF
	
		For nChk := 1 To ::nLenHoras
			For nDup := ( nChk + 1 ) To ::nLenHoras
				IF ( ::aHrTrab[ nChk , 03 ] == ::aHrTrab[ nDup , 03 ] )
					IF !( ::aHrTrab[ nChk , 08 ] == "M" )
						( aDel( ::aHrTrab , nChk ) , aSize( ::aHrTrab , --::nLenHoras  ) )
						Break
					ElseIF !( ::aHrTrab[ nDup , 08 ] == "M" )
						( aDel( ::aHrTrab , nDup ) , aSize( ::aHrTrab , --::nLenHoras  ) )
						Break
					EndIF
				EndIF
			Next nDup
		Next nChk
	
	End Sequence

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkApoAfas	³ Autor ³Marinaldo de Jesus    ³ Data ³03/07/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se Deve Efetuar Apontamento para Funcionario Afstado³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ChkApoAfas()        									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkApoAfas() class PonVarApon

	Local lRet 			:= .T.
	Local lApontaFer	:= .F.
	Local lTemMarc		:= .F.
	Local nPosData

	::dIniAfas := ::aTabCalend[ ::nPosCalend , CALEND_POS_INI_AFAST ]
	::dFimAfas := ::aTabCalend[ ::nPosCalend , CALEND_POS_FIM_AFAST ]
	IF (;
			( ::aTabCalend[ ::nPosCalend , CALEND_POS_AFAST ] );
			.and.;
			(;
				( ::dData >= ::dIniAfas );
				.and.;
				( ::dData <= IF( Empty( ::dFimAfas ) , ::dData , ::dFimAfas ) );
			 );
		)
		lApontaFer := ::aTabCalend[ ::nPosCalend , CALEND_POS_APON_FERIAS ]
		
		lTemMarc := aScan(::aMarClone , {|x| x[AMARC_DATAAPO] == ::dData}) > 0

		IF !( lApontaFer ) .And. !lTemMarc
			IF ( ( nPosData := aScan( ::aResult , { |x| x[ ARESULT_DATA ] == ::dData } ) ) > 0 )
				aEval( ::aResult , { |x| x[ ARESULT_HORAS ] := 0 } )
			EndIF
			::dData++
			::aHorasAnt := {}
			lRet := .F.
		ElseIf lApontaFer .And. lTemMarc 
			lRet := .T.
		ElseIf (::lAponHeAfa .Or. ::lAponHrAfa) .And. lTemMarc
			::lAtestMed := .T.
			lRet := .T.
		Else
			lRet := .F.
		EndIF
	EndIF

return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkAdmDem	³ Autor ³Marinaldo de Jesus    ³ Data ³20/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica Admissao e Demissao do Funcionario                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ChkAdmDem()        									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkAdmDem(cFilSRA , cMatSRA, aAfasta ) class PonVarApon

Local aRetSitucao
Local lChkAdmDem
Local nPosData

If aAfasta <> NIL
   ::aAfasta:=aClone(aAfasta)
Endif                        

Begin Sequence

	IF !( lChkAdmDem := (::dData >= SRA->RA_ADMISSA))
		Break
	EndIF

    aRetSitucao := SRA->( PonRetSit( cFilSRA , cMatSRA  , ::dData, ::aAfasta, ::aTransf, ::lTransfEmp  ))

	IF ( lChkAdmDem := ( aRetSitucao[1] <> "D" ) )
		Break
	EndIF

	IF ( lChkAdmDem := Empty( aRetSitucao[4] ) )
		Break
	EndIF

	If !( lChkAdmDem := (::dData <= aRetSitucao[4]))
		Break
	EndIf

End Sequence

IF !( lChkAdmDem )
	IF ( ( nPosData := aScan( ::aResult , { |x| x[ ARESULT_DATA ] == ::dData } ) ) > 0 )
		aEval( ::aResult , { |x| x[ ARESULT_HORAS ] := 0 } )
	EndIF
	::dData++
EndIF

return( lChkAdmDem )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³RmkWorkHrs  ³ Autor ³Marinaldo de Jesus    ³ Data ³16/08/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Remonta Horas Trabalhadas no ::aApo				 			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:RmkWorkHrs()        									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method RmkWorkHrs() class PonVarApon

	Local aHrTab	:= {}
	Local nInc		:= 0
	Local nIncPlus1	:= 0
	Local nIncs		:= 0
	Local nHrsNor	:= 0
	Local nHrsNot	:= 0
	Local nPos		:= 0
	
	aEval( ::aHoras ,{ |y| IF( ( y[3] != "M" ) , aAdd( aHrTab , aClone( y ) ) , NIL ) } )
	
	nIncs := Len( aHrTab )
	For nInc := 1 To nIncs Step 2
		nIncPlus1 := ( nInc + 1 )
		IF ( ( nPos := aScan( ::aSiglaMarc , { |x| ( x == aHrTab[ nInc , 3 ] ) } ) ) > 0 )
			nHrsNor := nHrsNot := 0
			fCalHoras(	aHrTab[ nInc , 1 ]			,;	//01 -> Data 1
						aHrTab[ nInc , 2 ]			,;	//02 -> Hora 1
						aHrTab[ nIncPlus1   , 1 ]	,;	//03 -> Data 2
						aHrTab[ nIncPlus1   , 2 ]	,;	//04 -> Hora 2
						@nHrsNor					,;	//05 -> <@>Horas Normais Apontadas
						@nHrsNot					,;	//06 -> <@>Horas Noturnas Apontadas
						.T.							,;	//07 -> Apontar Horas Noturnas
						::dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
						NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
						::nIniHnot					,;	//10 -> Inicio do Horario Noturno
						::nFimHnot					,;	//11 -> Final do Horario Noturno
						::nMinHnot					,;	//12 -> Minutos do Horario Noturno
						NIL     					,;	//13 -> Apenas Acrescimo Noturno
						NIL							 ;	//14 -> Periodo da Hora Noturna
					  )
	    	::aApo[ ::oaApo:HrTrbTabel , nPos ]	:= nHrsNor
	    	::aApo[ ::oaApo:HrTrbNotTb , nPos ]	:= nHrsNot
	    	
	    	nHrsNor := nHrsNot := 0
    		fCalHoras(	aHrTab[ nInc , 1 ]			,;	//01 -> Data 1
						aHrTab[ nInc , 2 ]			,;	//02 -> Hora 1
						aHrTab[ nIncPlus1   , 1 ]	,;	//03 -> Data 2
						aHrTab[ nIncPlus1   , 2 ]	,;	//04 -> Hora 2
						@nHrsNor					,;	//05 -> <@>Horas Normais Apontadas
						Nil							,;	//06 -> <@>Horas Noturnas Apontadas
						.F.							,;	//07 -> Apontar Horas Noturnas
						::dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
						NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
						::nIniHnot					,;	//10 -> Inicio do Horario Noturno
						::nFimHnot					,;	//11 -> Final do Horario Noturno
						::nMinHnot					,;	//12 -> Minutos do Horario Noturno
						NIL     					,;	//13 -> Apenas Acrescimo Noturno
						NIL							 ;	//14 -> Periodo da Hora Noturna
					  ) 
			IF !( ::lHnotFal ) //Se Nao Considerar o Horario Noturno Para Desconto das Faltas
			  	::aApo[ ::oaApo:HrTrabTbNN , nPos ]	:= nHrsNor
			Endif
			  	
		EndIF
	Next nInc

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Remonta Horas de Intervalo no ::aApo em funcao das Alteracoes	  no	³
	³::aHoras																³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	::RmkIntHrs( aHrTab )

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³RmkIntHrs   ³ Autor ³Marinaldo de Jesus    ³ Data ³19/07/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Remonta Horas de Intervalo no ::aApo				 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:RmkWorkHrs()        									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method RmkIntHrs( aHrTab ) class PonVarApon

Local aTipo			:= { "1E" , "1S" , "2E" , "2S" , "3E" , "3S" , "4E" , "4S" }
Local aIntervalos
Local baScan
Local nLoop
Local nLoop1
Local nLoops
Local nIntNor
Local nIntNot
Local nIntTab
Local nPosMarc

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloco para Pesquisa no Calendario de Marcacoes    		  	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	baScan	:= { |x|;
						( x[ CALEND_POS_ORDEM ] == ::cOrdem );
						.and.;
						( "S" $ x[ CALEND_POS_TIPO_MARC ] );
						.and.;
						( x[ CALEND_POS_HRS_INTER ] > 0 );
				 }
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Posicao Inicial em aTabCalend                        		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nIntTab := ::nPosCalend

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Procura os Intervalos no Calendario de Marcacoes    		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aIntervalos := {}
	While ( ( nIntTab := aScan( ::aTabCalend , baScan , nIntTab ) ) > 0 )
		aAdd( aIntervalos , ::aTabCalend[ nIntTab , CALEND_POS_TIPO_MARC ] )
		++nIntTab
	End While	

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao Existirem Intervalos, Abandono  					  ³s
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF Empty( aIntervalos )
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrego Apenas as Informacoes da Tabela					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF Empty( aHrTab )
		aHrTab := {}
		aEval( ::aHoras , { |aElem| IF( ( aElem[ 3 ] != "M" ) , aAdd( aHrTab , aClone( aElem ) ) , NIL ) } )
	EndIF
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao Existirem Informacoes de Tabela, Abandono			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( ( nLoops := Len( aHrTab ) ) == 0 )
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloco para Pesquisa em aIntervalos							  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	baScan	:= { |cFlag| ( cFlag == aHrTab[ nLoop , 03 ] ) }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializo o Loop em 2 pois corresponde aa Primeira Saida	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nLoop := 2 To nLoops Step 2

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Abandono aqui para evitar erro no Subcrito do Array          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( nLoop >= nLoops )
		   Exit
		EndIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Apenas se Tiver Horario de Intervalo                         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( aScan( aIntervalos , baScan  ) == 0 )
			Loop
		EndIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Obtenho o Proximo Indice do Array                            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nLoop1 := ( nLoop + 1 )
			
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Reinicializando as Variaveis que Armazenarao o Conteudo   das³
		³Horas														  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nIntNor	:= 0
		nIntNot	:= 0

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Calculando Horas Considerando o Adicional Noturno			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		fCalHoras(	aHrTab[ nLoop	, 1 ]		,;	//01 -> Data 1
					aHrTab[ nLoop	, 2 ]		,;	//02 -> Hora 1
					aHrTab[ nLoop1	, 1 ]		,;	//03 -> Data 2
					aHrTab[ nLoop1	, 2 ]		,;	//04 -> Hora 2
					@nIntNor					,;	//05 -> <@>Horas Normais Apontadas
					@nIntNot					,;	//06 -> <@>Horas Noturnas Apontadas
					.T.							,;	//07 -> Apontar Horas Noturnas
					::dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
					NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
					::nIniHnot					,;	//10 -> Inicio do Horario Noturno
					::nFimHnot					,;	//11 -> Final do Horario Noturno
					::nMinHnot					,;	//12 -> Minutos do Horario Noturno
					::lAcreNot					,;	//13 -> Apenas Acrescimo Noturno
					NIL			 				 ;	//14 -> Periodo da Hora Noturna
				 )	

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrego o Novo Valor de Intervalo Normal                     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

		nPosMarc := aScan(aTipo,aHrTab[ nLoop , 3 ]) 

		::aApo[ ::oaApo:HrIntTabel , nPosMarc ] := nIntNor
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrego o Novo Valor de Intervalo Noturno                    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::aApo[ ::oaApo:HrIntNotTb , nPosMarc ] := nIntNot
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Reinicializando as Variaveis que Armazenarao o Conteudo   das³
		³Horas														  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nIntNor	:= 0
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Calculando Horas Nao Considerando o Adicional Noturno		  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		fCalHoras(	aHrTab[ nLoop	, 1 ]		,;	//01 -> Data 1
					aHrTab[ nLoop	, 2 ]		,;	//02 -> Hora 1
					aHrTab[ nLoop1	, 1 ]		,;	//03 -> Data 2
					aHrTab[ nLoop1	, 2 ]		,;	//04 -> Hora 2
					@nIntNor					,;	//05 -> <@>Horas Normais Apontadas
					NIL							,;	//06 -> <@>Horas Noturnas Apontadas
					.F.							,;	//07 -> Apontar Horas Noturnas
					::dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
					NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
					::nIniHnot					,;	//10 -> Inicio do Horario Noturno
					::nFimHnot					,;	//11 -> Final do Horario Noturno
					::nMinHnot					,;	//12 -> Minutos do Horario Noturno
					::lAcreNot					,;	//13 -> Apenas Acrescimo Noturno
					NIL			 				 ;	//14 -> Periodo da Hora Noturna
				 )	

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrego Novo Valor de Intervalo Sem a Hora Noturna           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::aApo[ ::oaApo:HrIntTbNNt , nPosMarc ] := nIntNor

	Next nLoop

End Sequence
	
return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkMarcDup  ³ Autor ³Marinaldo de Jesus    ³ Data ³26/03/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Modifica os Minutos das Marcacoes que Estejam Duplicadas     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ChkMarcDup()        									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void   														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³aHoras                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkMarcDup() class PonVarApon

	Local aEqualMarc	:= {}
	Local bComp			:= { || .F. }
	Local nX			:= 0
	Local nY			:= 0
	Local nLenHoras		:= 0
	Local nLenEqual		:= 0
	Local nFirstSec		:= 0
	
	DEFAULT ::aHoras	:= {}
	
	#DEFINE __MILISECONDS__		0.00000001
	
	IF ( !Empty( ::aHoras ) )
		nLenHoras	:= Len( ::aHoras )
		bComp		:= { |aE|	( aE[ nY , 01 ] == aE[ nX , 01 ] );	//Data da Marcacao
								.and.;
							 	( aE[ nY , 02 ] == aE[ nX , 02 ] );	//Hora da Marcacao
							 	.and.;
							 	( aE[ nY , 03 ] == "M" );			//Marcacao Efetiva
						}
		For nX := 1 To nLenHoras
			aEqualMarc	:= {}
			nFirstSec	:= __MILISECONDS__
			IF ( ::aHoras[ nX , 03 ] == "M" )
				For nY := nX To nLenHoras
					IF Eval( bComp , ::aHoras )
						aAdd( aEqualMarc , { nY , nFirstSec } )
						nFirstSec += __MILISECONDS__
					Else
						Exit
					EndIF
				Next nY
				IF ( nLenEqual := Len( aEqualMarc ) ) > 1.00
					For nY := 1 To nLenEqual
						::aHoras[ aEqualMarc[ nY , 01 ] , 02 ] += aEqualMarc[ nY , 02 ]
					Next nY
				EndIF
			EndIF
		Next nX
	EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkMarcImpar³ Autor ³Marinaldo de Jesus    ³ Data ³26/03/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Remonta ::aHoras para eliminar Marcacoes Impares    		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ChkMarcImpar()				 			 			 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³void														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkMarcImpar() class PonVarApon

	Local aHorasNew := {}
	Local aPosTab	:= {}
	Local nDif_01	:= 0
	Local nDif_02	:= 0
	Local nLenHor	:= Len( ::aHoras )
	Local nPosTab	:= 0
	Local nX		:= 0
	
	IF ( ( nLenHor % 2 ) > 0 )
		aPosTab := Array( ::nSiglaMarc , 3 )
		For nX := 1 To ::nSiglaMarc
			aPosTab[ nX , 1 ] := ::aSiglaMarc[ nX ]
			aPosTab[ nX , 2 ] := aScan( ::aHoras , { |x| x[3] == ::aSiglaMarc[ nX ] } )
			IF ( aPosTab[ nX , 2 ] > 0 )
				aPosTab[ nX , 3 ] := ::aHoras[ aPosTab[ nX , 2 ] , 10 ]
			Else
				aPosTab[ nX , 3 ] := ""
			EndIF	
		Next nX 
		For nX := 1 To ::nSiglaMarc
			IF !Empty( aPosTab[ nX , 2 ] )
				// -- Verifica a Entrada de Jornada
				IF ( aPosTab[ nX , 3 ] == "EJ" )
					IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
						IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) , 3 ] == "M" )
							IF !( ::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 3 ] == "M" )
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) ] , NIL )
								Exit
							EndIF	
						EndIF
					ElseIF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
						IF ( nPosTab := aScan( aPosTab, { |x| x[3] == "SI" } ) ) > 0
							nDif_01 := fCalHoras(	::aHoras[ aPosTab[ nX , 2 ], 1 ]						,;
												 	::aHoras[ aPosTab[ nX , 2 ], 2 ]						,;
												 	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 1 ]	,;
												 	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 2 ]	,;
												 	0								 						,; 
												 	0														,;
											 		.F.														 ;
												 )
							nDif_02 := fCalHoras(	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 1 ]	,;
												 	::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 2 ]	,;
												 	::aHoras[ aPosTab[ nPosTab , 2 ] , 1 ]					,;
												 	::aHoras[ aPosTab[ nPosTab , 2 ] , 2 ]					,;
												 	0												 		,; 
												 	0														,;
												 	.F.										 				 ;
												 )
							IF ( nDif_01 > nDif_02 )
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) ] , NIL )
								Exit
							EndIF
						EndIF
					EndIF
		       	EndIF
				// -- Verifica a Saida de Intervalo
				IF ( aPosTab[ nX , 1 ] == "SI" )
					IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
						IF(;
								( ( nPosTab := aScan( aPosTab, { |x| x[3] == "EJ" } ) ) > 0 );
								.and.;
								( ::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 3 ] != "M" );
						   )	
							IF ( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1 ) , 3 ] == "M" )
								aFill( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1 ) ] , NIL )
								Exit
							EndIF
						ElseIF ( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
							aFill( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) ] , NIL )
							Exit
						EndIF
					ElseIF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
						//...
					EndIF
		       	EndIF
				// -- Verifica a Entrada de Intervalo
				IF ( aPosTab[ nX , 1 ] == "EI" )
					IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
						IF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) , 3 ] == "M" )
							IF ( ::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 3 ] == "M" )
								IF ( ( nPosTab := aScan( aPosTab, { |x| x[3] == "SI" } ) ) > 0 )
									nDif_01 := fCalHoras(	::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 1 ]		,;
														 	::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 2 ]		,;
														 	::aHoras[ aPosTab[ nX , 2 ] , 1 ]						,;
														 	::aHoras[ aPosTab[ nX , 2 ] , 2 ]						,;
														 	0								 						,; 
														 	0														,;
												 			.F.														 ;
														 )
									nDif_02 := fCalHoras(	::aHoras[ aPosTab[ nPosTab , 2 ] , 1 ]					,;
														 	::aHoras[ aPosTab[ nPosTab , 2 ] , 2 ]					,;
															::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 1 ]		,;
														 	::aHoras[ Max( aPosTab[ nX , 2 ] - 1 , 1  ) , 2 ]		,;
														 	0												 		,; 
														 	0														,;
														 	.F.										 				 ;
														 )
									IF ( nDif_01 > nDif_02 )
										aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) ] , NIL )
										Exit
									EndIF
								EndIF
							Else
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) ] , NIL )
								Exit
							EndIF
						EndIF
					ElseIF ( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
						IF (;
								( ( nPosTab := aScan( aPosTab, { |x| x[3] == "SJ" } ) ) > 0 );
								.and.;
								( ::aHoras[ Min( aPosTab[ nX , 2 ] + 2 , nLenHor ) , 3 ] != "M" );
							)	
							IF ( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] != "M" )
								aFill( ::aHoras[ Min( aPosTab[ nX , 2 ] + 1 , nLenHor ) ] , NIL )
								Exit
							EndIF
						ElseIF (;
									( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] == "M" );
									.or.;
							   		( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1       ) , 3 ] == "M" );
							   	)	
							IF ( ( nPosTab := aScan( aPosTab, { |x| x[3] == "EJ" } ) ) > 0 )
						   		IF ( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) , 3 ] == "M" )
									aFill( ::aHoras[ Min( aPosTab[ nPosTab , 2 ] + 1 , nLenHor ) ] , NIL )
									Exit
							   	ElseIF ( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] -1 , 1 ) , 3 ] == "M" )
									aFill( ::aHoras[ Max( aPosTab[ nPosTab , 2 ] - 1 , 1 ) ] , NIL )
									Exit
							   	EndIF
							EndIF
						EndIF
					EndIF
		       	EndIF
	       	EndIF
		Next nX
			
		nLenHor	:= Len( ::aHoras )
		For nX := 1 To nLenHor
			IF ( ::aHoras[ nX , 1 ] != NIL )
				aAdd( aHorasNew, aClone( ::aHoras[ nX ] ) )
			EndIF
		Next nX
			
		::aHoras := aClone( aHorasNew )
			
		::SortaHoras()
	
	EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³SetaProcessad ³Autor³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta os Elementos de ::aProcessad					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:SetaProcessad()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method SetaProcessad( lSet , cKey , nPos ) class PonVarApon

	DEFAULT lSet := .F.
	DEFAULT nPos := 0

	IF Empty( ::aProcessad )
		::aProcessad := Array( 24 , 02 )
	EndIF
	IF ( ( nPos > 0 ) .or. !Empty( cKey ) )
		IF (;
				( nPos > 0 );
				.or.;
				( ( nPos := ::PosaProcessad( cKey ) ) > 0 );
			)
			::aProcessad[ nPos , 02 ] := lSet
		Else
			aEval( ::aProcessad , { |x| aFill( x , .F. , 2 ) } )
		EndIF
	Else
		aEval( ::aProcessad , { |x| aFill( x , lSet , 2 ) } )
	EndIF	

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³PosaProcessad ³Autor³Marinaldo de Jesus    ³ Data ³27/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna Posicao conforme chave   					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:PosaProcessad()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nPos                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method PosaProcessad( cKey ) class PonVarApon

	Local nPos := 0
   
	DEFAULT cKey := ""
	
	IF !Empty( ::aProcessad )
		nPos := aScan( ::aProcessad , { |x| x[1] == cKey } )
	EndIF	

return( nPos )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetSetTnoC	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta o Turno/Sequencia que sera Apontado  			 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetSetTnoC()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³::cTnoCalend                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetSetTnoC( aTabCalend ) class PonVarApon
	DEFAULT aTabCalend := ::aTabCalend
::cSeqTno := aTabCalend[ ::nPosCalend , CALEND_POS_SEQ_TURNO ] 
return( ( ::cTnoCalend := aTabCalend[ ::nPosCalend , CALEND_POS_TURNO ] ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetSetRegra	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta a Regra que sera Apontada   					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetSetRegra()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³::cRegra	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetSetRegra( aTabCalend ) class PonVarApon
	DEFAULT aTabCalend := ::aTabCalend
return( ( ::cRegra := aTabCalend[ ::nPosCalend , CALEND_POS_REGRA ] ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetSetOrdem	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta a Ordem que sera Apontada   					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetSetOrdem()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³::cOrdem	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetSetOrdem( nOrdem , cOrdem ) class PonVarApon
	DEFAULT nOrdem := ::nCountOrd
return( ( ::cOrdem := IF( Empty( cOrdem ) , StrZero( nOrdem , ::nTamP8Ordem ) , cOrdem ) ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetSetSPAFil  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta a Filial do SPA             					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetSetSPAFil()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³::cFilSPA	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetSetSPAFil() class PonVarApon
return( ( ::cFilSPA := fFilFunc("SPA") ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetSetSP6Fil  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta a Filial do SP6             					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetSetSP6Fil()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³::cFilSP6	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetSetSP6Fil() class PonVarApon 
return( ( ::cFilSP6 := fFilFunc("SP6") ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetSetSR6Fil  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta a Filial do Sr6             					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetSetSR6Fil()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³::cFilSR6	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetSetSR6Fil() class PonVarApon
return( ( ::cFilSR6 := fFilFunc("SR6")  ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetTabArred   ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega os Arrays com os Arredondamentos					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetTabArred()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL      	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetTabArred( cFilSRA, lFulltable ) class PonVarApon

	Local cFilSPD := xFilial( "SPD" , cFilSRA )
	DEFAULT lFulltable := .F.

	::aArreds	:= GetTabArred( @cFilSPD , ::cTnoCalend , "ADFHNS9", lFulltable )
	::aArred_A	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "A" )
	::aArred_D	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "D" )
	::aArred_F	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "F" )
	::aArred_H	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "H" )
	::aArred_N	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "N" )
	::aArred_S	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "S" )
	::aArred_9	:= RetTabArred( ::aArreds , cFilSPD , ::cTnoCalend , "9" )

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetTabExtra   ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega os Arrays com os Arredondamentos					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetTabExtra()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL      	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetTabExtra( cFilSRA, lStop, lMvAcmHExt, lNotGetAll, cFilCCT, cCodCCT ) class PonVarApon
	
	Local cFilSP4 		:= xFilial( "SP4" , cFilSRA )
	Local lRet			:= .F.
	
	DEFAULT lNotGetAll 	:= .T.
	DEFAULT cFilCCT 	:= ""
	DEFAULT cCodCCT 	:= ""
	
    If lNotGetAll
		lRet:=GetTabExtra( @::aTabExtra, cFilSP4, ::cTnoCalend, .F., lStop, lMvAcmHExt, @::nErrorNumber,,, cFilCCT, cCodCCT)
    Else
		lRet:=GetTabExtra( @::aAllTabExtra , cFilSP4 , NIL  , .T. , lStop , lMvAcmHExt , @::nErrorNumber , NIL ,  .T. )
    Endif   
return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetCfgNot	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega as Configuracoes de Horario Noturno		 			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetCfgNot()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL      	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetCfgNot(lPeriodo, dReferencia) class PonVarApon
	Local nPosMarc 	:= 0
	Local nPosFim  	:= 0
	Local nI		:= 0
	Local nLenAuxMar:= 0
	Local cDtHrMarc	:= ""
	Local cDtHrUltM := ""
	Local cDtHrUltC := ""
	Local cHrNotIni	:= ""
	Local cNotIniAnt:= ""
	Local cHrNotFim	:= ""
	Local cNotFimAnt:= ""
	Local aMarcs	:= {}
	
	Default lPeriodo := .T.
	Default dReferencia := ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA_APO ]
	
	::nIniHnot		:= ::aTabCalend[ ::nPosCalend , CALEND_POS_INI_H_NOT ]	//-- Inicio do Horario Noturno
	::nFimHnot		:= ::aTabCalend[ ::nPosCalend , CALEND_POS_FIM_H_NOT ]	//-- Final do Horario Noturno
	::nMinHnot		:= ::aTabCalend[ ::nPosCalend , CALEND_POS_MIN_H_NOT ]	//-- Minutos do Horario Noturno
	::dPerNotIni	:= ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ]		//-- Data que inicia o Horario Noturno
	
	//Se campo PA_ADNTPRO estiver definido como "SIM" (Paga adicional noturno prorrogado) e 
	//Se horário de trabalho iniciou antes do começo do horário noturno (22:00 em geral) e foi finalizado após o fim do período noturno (05:00 em geral)
	//Todo período deve ser contado como horário noturno de acordo com o parecer da consultoria tributária (Chamado THDGJA)
	//Baseado no entendimento da Súmula nº 60 e do artigo 73, $5 da CLT
	//Exemplo 1: Funcionário trabalha das 22:00 até as 07:00 - Todo período deve contar como hora noturna, não apenas o período das 22:00 até as 05:00
	//Exemplo 2: Funcionário trabalha das 23:00 até as 07:00 - Apenas o período entre as 23:00 até as 05:00 deve ser contado como horário noturno.
	// Se o Campo PA_PERPADN estiver definido com "SIM" o exemplo 2 será prorrogado até às 07:00
	//Exemplo 2: Funcionário trabalha das 23:00 até as 07:00 - Todo período deve contar como hora noturna, 23:00 até às 07:00
	
	// Verifica se o Adicional Noturno será prorrogado pelo array aAuxMarc ou o oAponta:aHoras.
	If lPeriodo
		nPosMarc := aScan( aAuxMarc, { |x| x[25] == dReferencia })
		If nPosMarc > 0
			nI := nPosMarc
			nLenAuxMar := Len(aAuxMarc)
			While nI <= nLenAuxMar .And. aAuxMarc[nI,25] == dReferencia
				aAdd(aMarcs,{aAuxMarc[nI,1],aAuxMarc[nI,2],aAuxMarc[nI,25]})
				nI++
			EndDo
			nI := 0
			nLenAuxMar := 0
		EndIf
	Else
		nPosMarc := aScan( ::aHoras, { |x| x[28] == dReferencia } )
		If nPosMarc > 0
			nI := nPosMarc
			nLenAuxMar := Len(::aHoras)
			While nI <= nLenAuxMar .And. ::aHoras[nI,28] == dReferencia
				If ::aHoras[nI,3] == "M"
					aAdd(aMarcs,{::aHoras[nI,1],::aHoras[nI,2],::aHoras[nI,28]})
					nI++
				Else
					nI++
					Loop
				EndIf
			EndDo
			nI := 0
			nLenAuxMar := 0
		EndIf
	EndIf
	
	If Len(aMarcs) > 0
		nPosMarc := 1
		If ::lAdNtPro .and. nPosMarc > 0 .and. ::aTabCalend[ ::nPosCalend , CALEND_POS_TIPO_MARC ] == "1E";
			.and. ( (::lPerpadn .and. (aMarcs[nPosMarc,1] <= ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] .OR. (aMarcs[nPosMarc,1] > ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] .AND. aMarcs[nPosMarc,2] < ::nFimHnot)) );
						.OR. ( aMarcs[nPosMarc,1] <= ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] .AND. (aMarcs[nPosMarc,2] <= ::nIniHnot)) ) 
			nPos := 0
			nPos := aScan( ::aTabCalend, { |x| x[CALEND_POS_DATA] == ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] + 1 .and. x[CALEND_POS_TIPO_MARC] == "1E" } )
			If nPos == 0
				nPos := Len(::aTabCalend)
			Else
				nPos -= 1
			EndIf
			
			//Ultima marcação do dia de apontamento
			nPosFim := Len(aMarcs)
			
			cDtHrMarc := DataHora2Str(aMarcs[ nPosMarc , 1 ],aMarcs[ nPosMarc , 2 ]) //-- Data hora da primeira marcação
			cDtHrUltM := DataHora2Str(aMarcs[ nPosFim , 1 ],aMarcs[ nPosFim , 2 ]) //-- Data hora da última marcação
			
			cNotIniAnt := DataHora2Str(::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] - 1, ::nIniHnot) // Data hora do inicio do horário noturno
			cNotFimAnt := DataHora2Str(::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] , ::nFimHnot) // Data hora do inicio do horário noturno
			
			//Se o funcionário iniciou o turno durante o período noturno(22 até às 5 do dia seguinte), o campo PA_PERPADN estiver com sim
			//e a última marcação ultrapassar o limite do horário noturno, será prorrogado o adicional noturno.
			If ::nIniHnot >= ::nFimHnot .And. aMarcs[ nPosMarc , 1 ] <= aMarcs[ nPosFim , 1 ] .And. cDtHrMarc <= cNotFimAnt
				cHrNotIni := DataHora2Str(::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] - 1, ::nIniHnot) //-- Data hora do inicio do horário noturno			
				cHrNotFim := DataHora2Str(::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] , ::nFimHnot ) //-- Data hora do fim do horário noturno
				cDtHrUltC := DataHora2Str(::aTabCalend[ nPos , CALEND_POS_DATA ] - 1,::aTabCalend[ nPos , CALEND_POS_HORA ]) //-- Data hora do final do horário da tabela de horário padrão
				::dPerNotIni := ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] - 1 // Data do inicio do Adicional Noturno
			Else
				cHrNotIni := DataHora2Str(::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] , ::nIniHnot) //-- Data hora do inicio do horário noturno
				cHrNotFim := DataHora2Str(::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] + 1 , ::nFimHnot ) //-- Data hora do fim do horário noturno
				cDtHrUltC := DataHora2Str(::aTabCalend[ nPos , CALEND_POS_DATA ],::aTabCalend[ nPos , CALEND_POS_HORA ]) //-- Data hora do final do horário da tabela de horário padrão
				::dPerNotIni := ::aTabCalend[ ::nPosCalend , CALEND_POS_DATA ] // Data do inicio do Adicional Noturno
			EndIf
			
			If ( cDtHrUltM >= cHrNotFim ) .And.;
				( ::lAdNtPro .And. cDtHrMarc <= cHrNotIni ) .Or.;
				( ::lPerpadn .And. ( cDtHrMarc >= cHrNotIni .And. cDtHrMarc <= cHrNotFim ) ) 
				
				If cDtHrUltM >= cHrNotFim .And. cDtHrUltM >= cDtHrUltC
					::nFimHnot := aMarcs[nPosFim,2]
				Else
					If cDtHrUltC >= cHrNotFim
						::nFimHnot := ::aTabCalend[ nPos , CALEND_POS_HORA ]
					Else
						::nFimHnot := ::aTabCalend[ nPos , CALEND_POS_FIM_H_NOT ]
					EndIf
				EndIf
			Else
				If cDtHrUltM >= cHrNotFim
					::dPerNotIni := ::aTabCalend[ nPos , CALEND_POS_DATA ]
				EndIf
				::nFimHnot := ::aTabCalend[ nPos , CALEND_POS_FIM_H_NOT ]
			EndIf
		EndIf
	EndIf
	
return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetAbonos	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega os Abonos para a Data               	 			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetAbonos()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL      	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetAbonos() class PonVarApon
	::aAbonos := {}

	fAbonos( ::dData , NIL , NIL , @::aAbonos , NIL , NIL , ::aAbonosPer )

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetAbonosPer  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega os Abonos para o Periodo							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:GetAbonosPer()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL      	                                           	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetAbonosPer( aAbonosPer , cFilSRA , cMatSRA ) class PonVarApon

	IF ( ::lAbonosPer := ( ValType( aAbonosPer ) == "A" ) )
		aAbonosPer	:= {}
		fAbonosPer( @aAbonosPer , ::dPerIni , ::dPerFim , cFilSRA , cMatSRA )
		::aAbonosPer := aClone( aAbonosPer )
	EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³SpaGetSetCpos ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta as Informacoes do SPA       					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:SpaGetSetCpos()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lGetSetOK  		                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method SpaGetSetCpos( aTabCalend ) class PonVarApon

	Local aSpaInfo
	Local lGetSetOK
	Local nX
	Local nW
	
	Begin Sequence

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Seta a Regra Atual										  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::GetSetRegra( aTabCalend )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se a regra de valida‡„o do funcion rio ‚ v lida.   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !( lGetSetOK := ::PosSPA() )
			Break
		EndIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ So verifica os Campos das Regras Quando Houver Modificacao  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( ::FilRegCompare() )
			lGetSetOK := .T.
			Break
		Else
			::cFilRegLst := ( ::cFilSPA + ::cRegra )
		ENDIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega as Informacoes em Cache do SPA                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aSpaInfo := ::PosSPA( ::oSpaFields:aSpaFields , .F. )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_HEMOVEL                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cHrMovel		:= aSpaInfo[ ::oSpaFields:nPaHrMovel ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_ANTMOVE                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nAntMove		:= aSpaInfo[ ::oSpaFields:nPaAntMove ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_POSMOVE                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nPosMove		:= aSpaInfo[ ::oSpaFields:nPaPosMove ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_INMOVEL                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cInMovel		:= aSpaInfo[ ::oSpaFields:nPaInMovel ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_MOVAINT                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nMovAint		:= aSpaInfo[ ::oSpaFields:nPaMovAInt ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_MOVPINT                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nMovPint		:= aSpaInfo[ ::oSpaFields:nPaMovPInt ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se o Intervalo Movel do Funcionario eh Livre       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lIntMovFree	:= ( ( ::cInMovel == "S" ) .and. ( ( ::nMovAint + ::nMovPint ) == 0 ) )
		
		// Verifica se o Horário Móvel do Funcionário é Livre
		::lMovelFree	:= ( ( ::cHrMovel == "S" ) .and. ( ( ::nAntMove + ::nPosMove ) == 0 ) )
		
		// Se o horário for livre e o intervalo não, o horário deixa de ser livre 
		If(::lMovelFree .And. ! ::lIntMovFree)
			::lMovelFree := .F.
			::nAntMove := ::nPosMove := 23
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_AJUSTIN                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cAjustIn		:= aSpaInfo[ ::oSpaFields:nPaAjustIn ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_AJUSTEJ                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cAjustEj		:= aSpaInfo[ ::oSpaFields:nPaAjustEj ]

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_CHKTMOV                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cChkTMov		:= aSpaInfo[ ::oSpaFields:nPaChkTMov ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_CHKTMVI                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cChkTMvi		:= aSpaInfo[ ::oSpaFields:nPaChkTMvI ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_FALTAS	                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cFaltas		:= aSpaInfo[ ::oSpaFields:nPaFaltas ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_SAIANT						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cSaiAnt		:= aSpaInfo[ ::oSpaFields:nPaSaiAnt ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_PERSAIA					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPerSaiA		:= aSpaInfo[ ::oSpaFields:nPaPerSaiA ]
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_TOLSAIA						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nTolSaia		:= IF( ::cPerSaiA == "D" , aSpaInfo[ ::oSpaFields:nPaTolSaiA ] , 0 )
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_TOLASAI					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cTolaSai		:= aSpaInfo[ ::oSpaFields:nPaTolASai ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_ATRASOS					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cAtrasos		:= aSpaInfo[ ::oSpaFields:nPaAtrasos ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_PERATRA					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPerAtra		:= aSpaInfo[ ::oSpaFields:nPaPerAtra ]

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_TOLATRA						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nTolAtra		:= IF( ::cPerAtra == "D" ,  aSpaInfo[ ::oSpaFields:nPaTolAtra ] , 0 )
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_TOLHRNR					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nTolHrNR		:= IF( ::cPerAtra == "D" .And. ::cPerSaiA == "D", aSpaInfo[ ::oSpaFields:nPaTolHrNr ], 0 )
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_SAIEXPE					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cSaiExpe		:= aSpaInfo[ ::oSpaFields:nPaSaiExpe ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo PA_SAIEXPE					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cTolHex		:= aSpaInfo[ ::oSpaFields:nPaTolHex ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carregar Variaveis que subtituiram os MV_'S por Cpos do SPA ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPgHeDnt		:= aSpaInfo[ ::oSpaFields:nPaPgHeDnt ] //-- Tipos de Dias Nao Trabalhados para Apontamento de Horas Extras Autorizadas

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Se paga Intervalo em Dias Nao Trabalhados           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lPagIntN := ( aSpaInfo[ ::oSpaFields:nPaPagIntn ] == "S" )
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Se paga Adicional Noturno Prorrogado.               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/		
		::lAdNtPro := ( aSpaInfo[ ::oSpaFields:nAdNtPro ] == "1" )
		
		/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Se Sempre paga Adicional Noturno Prorrogado.               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/		
		::lPerpadn := If( aSpaInfo[ ::oSpaFields:nPerpadn ] == NIL, .F. ,aSpaInfo[::oSpaFields:nPerpadn ] == "1" )
		
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Se efetua apontamento pela batida de saída.         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/		
		::lApoSaida	:=  If( aSpaInfo[ ::oSpaFields:nTpApont ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nTpApont 		] == "2" )
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Se Paga Intervalo em Dias Nao Trabalhados			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPgIntNTrb	:= aSpaInfo[ ::oSpaFields:nPaPagIntn ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Qual Intervalo e Pago                    			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPagInt		:= ::aTabCalend[ ::nPosCalend , CALEND_POS_PAGINT ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Se Paga Intervalo Noturno em Dias Nao Trabalhados	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPgNotINTrb	:= aSpaInfo[ ::oSpaFields:nCpoIntNotNt ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Qual Intervalo e Pago o Adicional Noturno			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPagNotInt	:= aSpaInfo[ ::oSpaFields:nPaPgAdnIn ]
		DEFAULT ::cPagNotInt := ""
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica o Periodo do Horario Movel               			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPerHmov		:= aSpaInfo[ ::oSpaFields:nPaPerHMov ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se Desconta Intervalo Quando Falta       			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cIntFalt		:= aSpaInfo[ ::oSpaFields:nPaIntFalt ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se Apura o DSR                           			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cDsr			:= aSpaInfo[ ::oSpaFields:nPaDsr ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica em Quais Marcacoes Estao Autorizados o Pagamento  de³
		³Horas Extras												  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPagHext 		:= aSpaInfo[ ::oSpaFields:nPaPagHext ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_ADNOT						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cAdNot		:= aSpaInfo[ ::oSpaFields:nPaAdNot ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_ADNOTEX						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cAdNotEx		:= aSpaInfo[ ::oSpaFields:nPaAdNotEx ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_HRNORM						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cHrNorm 		:= aSpaInfo[ ::oSpaFields:nPaHrNorm ]
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_PERANOT						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPerAnot 		:= aSpaInfo[ ::oSpaFields:nPaPeraNot ]
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_TOLNTHE						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nTolNtHe 		:= IF( ::cPerAnot == "D" , aSpaInfo[ ::oSpaFields:nPaTolNtHe ] , 0 )
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_TOLNOTU						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nTolNotu		:= IF( ::cPerAnot == "D" , aSpaInfo[ ::oSpaFields:nPaTolNotu ] , 0 )
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_PERHEXT						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cPerHext		:= aSpaInfo[ ::oSpaFields:nPaPerHext ]

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_TOLFALT						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nTolFalt		:= aSpaInfo[ ::oSpaFields:nPaTolFalt ]
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_TOLHEPE						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nTolHePe		:= IF( ::cPerHext == "D" , aSpaInfo[ ::oSpaFields:nPaTolHePe ] , Iif(lPa_TolHeMe, aSpaInfo[ ::oSpaFields:nPaTolHeMe ], 0) )
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_HRSPGS						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nHrsPgs		:=  If( aSpaInfo[ ::oSpaFields:nPaHrsPgs ] == NIL, 0, aSpaInfo[ ::oSpaFields:nPaHrsPgs ] )  	

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_ADHEDIA						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lAdHeDia		:=  If( aSpaInfo[ ::oSpaFields:nPaAdHeDia ] == NIL, .F., aSpaInfo[ ::oSpaFields:nPaAdHeDia ] == "1" )  	
    

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_PRIMDOM						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lPAPrimDom	:=  If( aSpaInfo[ ::oSpaFields:nPaPrimDom ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nPaPrimDom 		] == "1" )  	
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_DESCLAB						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lPADescLab	:=  If( aSpaInfo[ ::oSpaFields:nPaDescLab ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nPaDescLab 		] == "1" )  	
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_FESTLAB						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lPAFestLab	:=  If( aSpaInfo[ ::oSpaFields:nPaFestLab ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nPaFestLab 		] == "1" )  	

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_PGINTOT						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lPAPgInTot	:=  If( aSpaInfo[ ::oSpaFields:nPaPgInTot ] 		== NIL, .F., aSpaInfo[ ::oSpaFields:nPaPgInTot 		] == "1" )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_FAIXAHE						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lFaixaHE	:= ( aSpaInfo[ ::oSpaFields:nPaFaixaHe ] == "S" )
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o Conteudo do Campo PA_AJUSTEJ						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ( ::lPaAjustEJ := ( aSpaInfo[ ::oSpaFields:nPaAjustEj ] == "S" .And. aSpaInfo[ ::oSpaFields:nPaMovAInt ] == 0 .And. aSpaInfo[ ::oSpaFields:nPaMovPInt ] == 0) )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Se Tiver mais de 1 intervalo para o Dia Seta lPaAjustEJ  como³
			³False														  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nX := 0
			For nW := ::nPosCalend To Len( ::aTabCalend )
				IF ( ::cOrdem == ::aTabCalend[ nW , CALEND_POS_ORDEM ] )
					IF ( "S" $ ::aTabCalend[ nW , CALEND_POS_TIPO_MARC ] )
						IF ( ::aTabCalend[ nW , CALEND_POS_HRS_INTER ] > 0 )
							++nX
						EndIF
					EndIF
				Else
					Exit
				EndIF
			Next nW
			::lPaAjustEJ := ( nX == 1.00 )
		EndIF

	End Sequence
		
return( lGetSetOK )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³Sr6GetSetCpos ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Seta as Informacoes do SR6       					 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:Sr6GetSetCpos()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lGetSetOK  		                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method Sr6GetSetCpos() class PonVarApon

	Local aSr6Info
	Local lGetSetOK

	Begin Sequence

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Seta o Turno Atual 										  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::GetSetTnoC( aTabCalend )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se o Turno de Trabalho do funcion rio ‚ v lido.	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !( lGetSetOK := ::PosSR6() )
			Break
		EndIF
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ So verifica os Campos dos Turnos Quando Houver Modificacao  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( ::FilTnoCompare() )
			Break
		Else
			::cFilTnoLst := ( ::cFilSR6 + ::cTnoCalend )
		EndIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega as Informacoes em Cache do SR6                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aSr6Info := ::PosSr6( ::oSr6Fields:aSr6Fields , .F. )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_INTERNT                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cInterNt		:= aSr6Info[ ::oSr6Fields:nR6InterNt ]	//-- Tipo de Dia para Geracao Inter-jornada

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_HRINTER                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::nHrInterJd	:= aSr6Info[ ::oSr6Fields:nR6HrInter ]	//-- Numero Minimo de Horas Inter-Jornada

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_APTPMAR                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lApTpMar		:= ( aSr6Info[ ::oSr6Fields:nR6AptpMar ] == "S" )	//-- Gravar Tipo de Marcacao nos Apontamentos

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_HNOTATR                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
 		::lHnotAtr		:= ( aSr6Info[ ::oSr6Fields:nR6HnotAtr ] == "S" )	//-- Considerar a Hora Noturna Para na Apuracao das Saidas Antecipadas/Expediente


 		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_HNOTTAB                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lHnotTab		:= ( aSr6Info[ ::oSr6Fields:nR6HnotTab ] == "S" )	//-- Considerar a Hora Noturna Para Horas Trabalhadas

 		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_HNOTTBI                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lHnotTbI		:= ( aSr6Info[ ::oSr6Fields:nR6HnotTbI ] == "S" )	//-- Considerar a Hora Noturna Para Horas de Intervalo

 		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_HNOTFAL                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lHnotFal		:= ( aSr6Info[ ::oSr6Fields:nR6HnotFal ] == "S" )	//-- Considerar a Hora Noturna Para na Apuracao das Faltas

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_HNOTSAI                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lHnotSai		:= ( aSr6Info[ ::oSr6Fields:nR6HnotSai ] == "S" )	//-- Considerar a Hora Noturna Para na Apuracao das Saidas Antecipadas/Expediente

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_EXTNOT                       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lExtNot		:= ( aSr6Info[ ::oSr6Fields:nR6ExtNot ] == "S" )	//-- Aponta Hora Noturno considerando as Horas Noturnas Reduzidas

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_ACRENOT                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lAcreNot		:= ( aSr6Info[ ::oSr6Fields:nR6AcreNot ] == "S" )	//-- Se vai considerar Apenas o Acrescimo Noturno

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_ACRENOT                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lIdAcreNot		:= ( aSr6Info[ ::oSr6Fields:nR6IdAcreNot ] == "S" )	//-- Se vai Destacar em Identificador Especifico o Acrescimo Noturno
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_SPADNOT                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If SR6->(ColumnPos("R6_SPADNOT")) > 0
			::lSepAcrNot	:= ( aSr6Info[ ::oSr6Fields:nR6SpAcNot ] == "S" )	//-- Se irá separar o acréscimo noturno da hora noturna
		Else
			::lSepAcrNot	:= .F.
		EndIf
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Conteudo do Campo R6_TPJORN                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::cTpJorn		:= aSr6Info[ ::oSr6Fields:nR6TpJorn ]	//-- Tipo de jornada do turno (Descontinuado, Horário diário e folga fixa, 12x36, Horário diário fixo e folga variável e Demais tipos de jornada)

	End Sequence

return( lGetSetOK )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³PosSr6		  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Posiciona no SR6 e Retorna Conteudo Conforme Chave/Cpo 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:PosSr6( uCpo )											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method PosSr6( uCpo , lMsGoto , nOrder ) class PonVarApon
	DEFAULT nOrder := 01
return( PosSr6( ::cTnoCalend , ::cFilSR6 , uCpo , nOrder , lMsGoto ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³PosSpa		  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Posiciona no SPA e Retorna Conteudo Conforme Chave/Cpo 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:PosSpa( uCpo [ , lMsGoto ][ , nOrder ][ , lSetRegra ] ) ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method PosSpa( uCpo , lMsGoto , nOrder , lSetRegra ) class PonVarApon
	
	DEFAULT nOrder		:= 01
	DEFAULT lSetRegra	:= .F.
	
	IF ( lSetRegra )
		::GetSetRegra()
	EndIF

return( PosSpa( ::cRegra , ::cFilSPA , uCpo , nOrder , lMsGoto ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³FilRegLstInit ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa ::cLastRegra										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:FilRegLstInit()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³"__cLastRegra__"                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method FilRegLstInit() class PonVarApon
return( ( ::cFilRegLst := "__cFilRegLst__" ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³FilTnoLstInit ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa ::cLastTurno										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:FilTnoLstInit()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³"__cLastTurno__"                                       	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method FilTnoLstInit() class PonVarApon
return( ( ::cFilTnoLst := "__cFilTnoLst__" ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³FilRegCompare ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se Houve Modificacao de Regra						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:FilRegCompare()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T. se Regra for Igual, .F., caso contrario            	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method FilRegCompare() class PonVarApon
return(  ::cFilRegLst == ( ::cFilSPA + ::cRegra ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³FilTnoCompare ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se Houve Modificacao de Turno						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:FilTnoCompare()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T. se Turno for Igual, .F., caso contrario            	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method FilTnoCompare() class PonVarApon
return( ( ::cFilTnoLst ==  ( ::cFilSR6 + ::cTnoCalend ) ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³InitChkArr	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa ::aChkTolArr										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:InitChkArr()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method InitChkArr() class PonVarApon

	::aChkTolArr	:= {}
	::nChkTolArr	:= 0
	::RstlChkTolArr()

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³AddDtChkArr	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega informacoes da Data em ::aChkTolArr					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:AddDtChkArr()  										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method AddDtChkArr() class PonVarApon

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega em ::aChkTolArr as Informacoes Referentes a Data	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aAdd( ::aChkTolArr , { ::dData , Array( ::nJornadasAp ) , Array( ELEMENTOS_DO_ATOLERANCIA_DIARIA ) , Array( ELEMENTOS_DO_ARRED_DIARIO , 2 ) } )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem o Numero de Elementos de ::aChkTolArr		  	  	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	::nChkTolArr := Len( ::aChkTolArr )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa as Jornadas como Nao Apontadas          		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aFill( ::aChkTolArr[ ::nChkTolArr , 02 ] , .F. )

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³FlgChkArr	  ³Autor³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Flega ::aChkTolArr										 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:FlgChkArr()											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method FlgChkArr( lFlag ) class PonVarApon
return( ::aChkTolArr[ ::nChkTolArr , 02 , ::nInicJornada ] := lFlag )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³PutTolArrChkArr³Autor³Marinaldo de Jesus   ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Tolerancias e Arredondamentos em ::aChkTolArr	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:PutTolArrChkArr()										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method PutTolArrChkArr() class PonVarApon

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega as Tolerancias Diarias Conforme a Regra    		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_ATRASO		] := ::nTolAtra
	::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_SAIDA		] := ::nTolSaia
	::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_ADN_NOT		] := ::nTolNotu
	::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_ADN_NOT_HE	] := ::nTolNtHe
	::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_FALTAS		] := ::nTolFalt
	::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_DE_HE_PERIODO	] := ::nTolHePe
	::aChkTolArr[ ::nChkTolArr , 03 , TOLERANCIA_HR_N_REALIZADO	] := ::nTolHrNR
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega os Arredondamentos Diarios Conforme a Data e Turno	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_ATRASO	, 01 ] := "A"
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_ATRASO	, 02 ] := aClone( ::aArred_A )
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_DSR		, 01 ] := "D"
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_DSR		, 02 ] := aClone( ::aArred_D )
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_FALTAS	, 01 ] := "F"
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_FALTAS	, 02 ] := aClone( ::aArred_F )
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_HE		, 01 ] := "H"
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_HE		, 02 ] := aClone( ::aArred_H )
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_NOTURNO	, 01 ] := "N"
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_NOTURNO	, 02 ] := aClone( ::aArred_N )
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_SAIDA  	, 01 ] := "S"
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_SAIDA  	, 02 ] := aClone( ::aArred_S )
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_9_HORA 	, 01 ] := "9"
	::aChkTolArr[ ::nChkTolArr , 04 , ARRED_9_HORA 	, 02 ] := aClone( ::aArred_9 )


	
return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkRegra       ³Autor³Marinaldo de Jesus   ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se a Regra eh Valida e carrega Informacoes  	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ChkRegra()										 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lChkRegraOk                                            	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkRegra( cFilSRA , cMatSRA ) class PonVarApon

	Local lChkRegraOk := .T.

	
		Begin Sequence
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se Existe a Regra e Carrega Informacoes dos Campos  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lChkRegraOk := ( ::lApontaOk := ::SpaGetSetCpos() ) )
				Break
			EndIF
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Se foi Criado o campo que ira identificar o uso da Faixa   de³
			³He autorizadas												  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Obtem as Faixas de HE Autorizadas para  Dia				  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			::aHeAutoDia	:= {}
		    /*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Se a Regra determina a identificacao de HE autorizadas carrega as faixas HE³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF ( ::lFaixaHE )
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Apenas Quando estiver vazio e se nao tiver passado pela   fun³
				³cao														  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
  				IF ( Empty( ::aFaixasHE ) .and. ( ::lfTabHeAut ) )
					/*/	
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Array com Horarios de HE Autorizadas do Funcionario          ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
  						::lfTabHeAut := ::fTabHeAut( cFilSRA , cMatSRA , ::dPerIni , ::dPerFim )
  				EndIF
				/*/	
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Monta Tabela de Faixas de HE autorizadas para o dia corrente ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		    	IF ( ::lfTabHeAut )
		    		::fTabHeAut( cFilSRA , cMatSRA , ::dData , ::dData )
		    	EndIF
		    EndIF
		
		End Sequence

	
return( lChkRegraOk )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³InitProcJorn   ³Autor³Marinaldo de Jesus   ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa nProxJornada										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:InitProcJorn()										 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method InitProcJorn() class PonVarApon
return( ( ::nProxJornada := IF( ( ::nInicJornada == 1 ) , ::nInicJornada , ( ::nTotMarcTab + 1 ) ) ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkTolArr   ³ Autor ³Marinaldo de Jesus    ³ Data ³28/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Checar Tolerancias e Arredondamentos Diarios                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkTolArr( aEvesIds , lMvArrInte ) class PonVarApon

	Local dData		:= Ctod("//")
	Local nStart	:= 0
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ordena aResult para fTolDiaria e para fArrDiario()		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	::SortaResult()
	
	For nStart := 1 To ::nChkTolArr
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apenas se Passou Pelo Apontamento    						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( aScan( ::aChkTolArr[ nStart , 02 ] , { |x| x } ) > 0 )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Passou Pelo Apontamento e Deve Grava-lo ou Regrava-lo		  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			::lChkTolArr := .T.
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem a Data                          					  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			dData := ::aChkTolArr[ nStart , 01 ]
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Todas as Tolerancias Diarias						  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			::fTolDiaria( dData , aEvesIds , ::aChkTolArr[ nStart , 03 ] )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Todos os Arredondamentos Diarios					  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			::fArrDiario( dData , ::aChkTolArr[ nStart , 04 ] , lMvArrInte )
		EndIF
	Next nStart
	
Return( ::lChkTolArr )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³RstlChkTolArr³Autor ³Marinaldo de Jesus    ³ Data ³18/09/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Reinicializar o membro ::lChkTolArr                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method RstlChkTolArr() class PonVarApon
       
	::lChkTolArr := .F.

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³fTolDiaria  ³ Autor ³Marinaldo de Jesus    ³ Data ³04/07/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica Todas as Tolerancias Diarias                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³::ChkTolArr()                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method fTolDiaria( dData , aEvesIds , aTolDiaria ) class PonVarApon

	Local cCodAtras	:= ""
	Local cCodSaida := ""
	Local cCodNotur	:= ""
	Local cCodNotHe	:= ""
	Local cCodFalta := ""
	Local cCodExtra := ""
	Local nTolAtras	:= 0
	Local nTolSaidA := 0
	Local nTolNotur	:= 0
	Local nTolNotHe	:= 0
	Local nTolFalta := 0
	Local nTolExtra := 0
	Local nStart	:= 0
	Local nX		:= 0
	Local nTolHrNR	:= 0
	
	IF ( ( nStart := aScan( ::aResult , { |x| x[1] == dData } ) ) > 0 )
	
		//Carrega os Eventos de Acordo com os Identificadores do Ponto
		aEval( aEvesIds, { |x|	IF( x[1] $ ::cIdsAtras , cCodAtras+= ( x[2] + "*" ),;
									IF( x[1] $ ::cIdsSaida , cCodSaida+= ( x[2] + "*" ),;
										IF( x[1] $ ::cIdsNotur , cCodNotur+= ( x[2] + "*" ),;
											IF( x[1] $ ::cIdsNotHe , cCodNotHe+= ( x[2] + "*" ),;
												IF( x[1] $ ::cIdsFalta , cCodFalta+= ( x[2] + "*" ),;
													IF( x[1] $ ::cIdsExtra , cCodExtra+= ( x[2] + "*" ),;
														NIL;
													   );
												   );
										   	   );
										   );
									   );
								   );
						 };
			 )
		
		//Carrega os Eventos de Horas Extras
		aEval( ::aAllTabExtra , { |x| aEval( x , { |x| cCodExtra+= ( IF(x[4]$cCodExtra,"",x[4] + "*") + IF(x[5]$cCodExtra,"",x[5] + "*") ) } ) } )
	
		//Carrega as Tolerancias
		nTolAtras	:= aTolDiaria[ TOLERANCIA_DE_ATRASO		]
		nTolSaidA	:= aTolDiaria[ TOLERANCIA_DE_SAIDA		]
		nTolNotur	:= aTolDiaria[ TOLERANCIA_DE_ADN_NOT	]
		nTolNotHe	:= aTolDiaria[ TOLERANCIA_DE_ADN_NOT_HE	]
		nTolFalta	:= aTolDiaria[ TOLERANCIA_DE_FALTAS		]
		nTolExtra	:= aTolDiaria[ TOLERANCIA_DE_HE_PERIODO	]
		nTolHRNR	:= aTolDiaria[ TOLERANCIA_HR_N_REALIZADO]
		
		//Se nao existir o campo PA_TOLHRNR, zero o valor
		If !(ValType(nTolHRNR) == "N")
			nTolHRNR := 0
		EndIf		
		
		//Verifica Tolerancia no ::aResult
		For nX := nStart To ::nLenRes
			IF !( dData == ::aResult[ nX , 01 ] )
				Exit //Esta Fora da Data
			EndIF
			IF ( ::aResult[ nX, 3 ] == 0 )
				Loop //Ja Zerou as Horas
			EndIF
			//Se campo PA_TOLHRNR estiver preenchido e os campos PA_TOLSAIA e PA_TOLATRA estiverem zerados, usa tolerancia de horas nao realizadas
			IF ( (nTolAtras == 0 .and. nTolSaidA == 0 .and. nTolHRNR > 0 ) .And. ( ::aResult[ nX, 2 ] $ cCodAtras .OR. ::aResult[ nX, 2 ] $ cCodSaidA ))
				::fAvalTol( dData, cCodAtras + "*" + cCodSaidA, nTolHRNR, .T. )
			ElseIF ( ( ::aResult[ nX, 2 ] $ cCodAtras ) .and. (( nTolAtras > 0 )))
				::fAvalTol( dData, cCodAtras, nTolAtras, .T., "A" )
			ElseIF ( ( ::aResult[ nX, 2 ] $ cCodSaidA ) .and. (( nTolSaidA > 0 )))
				::fAvalTol( dData, cCodSaidA, nTolSaidA, .T., "S" )
			ElseIF ( ( ::aResult[ nX, 2 ] $ cCodNotur ) .and. ( nTolNotur > 0 ))
				::fAvalTol( dData, cCodNotur, nTolNotur )
			ElseIF ( ( ::aResult[ nX, 2 ] $ cCodNotHe ) .and. ( nTolNotHe > 0 ))
				::fAvalTol( dData, cCodNotHe, nTolNotHe )
			ElseIF ( ( ::aResult[ nX, 2 ] $ cCodFalta ) .and. ( nTolFalta > 0 ))
				::fAvalTol( dData, cCodFalta, nTolFalta, , , .T.)
			ElseIF ( ( ::aResult[ nX, 2 ] $ cCodExtra ) .and. (( nTolExtra > 0 )))
				::fAvalTol( dData, cCodExtra, nTolExtra, , "E" )
			EndIF
		Next nX
	EndIF
	
Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³fAvalTol	³ Autor ³Marinaldo de Jesus    ³ Data ³04/07/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Avalia as Tolerancias conforme a Data                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³::fToldiaria()                                               ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method fAvalTol( dData, cEventos, nTolerancia, lVerHrNr, cTpHrExt, lFalta) class PonVarApon
	
	Local nTotHoras		:= 0
	Local nX			:= 0
	Local nI			:= 0
	Local aVerHrEx		:= {}
	Local nPos			:= 0
	Local nPosSI		:= 0
	Local nPosEI		:= 0
	Local nPosSIMarc	:= 0
	Local nResultDiv	:= 0
	Local aMarcDia		:= {}
	Local lGeraExt		:= .F.
	Local dDataAnt		:= sToD("")		
	Local cTotHoras		:= ""
	Local aClonTabPd	:= aClone( ::aTabCalend )
	
	Default lVerHrNr 	:= .F.
	Default cTpHrExt 	:= ""
	Default lFalta		:= .F.
	
	IF ( nTolerancia > 0 )
		
		If lVerHrNr .and. !Empty(::aHrNReal)
			aEval( ::aHrNReal, { |x| IF(( x[1] == dData ) .and. ( x[2] $ cEventos ), nTotHoras := SomaHoras( nTotHoras, x[3] ), NIL)})		
		Else
			aEval( ::aResult, { |x| IF(( x[1] == dData ) .and. ( x[2] $ cEventos ), nTotHoras := SomaHoras( nTotHoras, x[3] ), NIL)})
		EndIf
		
		cTotHoras := cValtoChar(nTotHoras)
		nTotHoras := val(substr(cTotHoras, 1, at(".", cTotHoras) + 2)) //truncando na marra 2 casas decimais
		IF ( nTotHoras <= nTolerancia )
			
			If lVerHrNr .and. !Empty(::aHrNReal)
				For nX := 1 to Len(::aHrNReal)
					If !::aHrNReal[nX, 4] .and. ::aHrNReal[nX, 1] == dData
						aEval( ::aResult, { |x, y| If( ::aHrNReal[nX, 2] $ cEventos .And.  ( x[1] == ::aHrNReal[nX, 1]) .and. ( x[2] == ::aHrNReal[nX, 2] ) .and. ( If(!Empty(x[5]), x[5] == ::aHrNReal[nX, 6], .T. )), ::aResult[y, 3] := ::aHrNReal[nX, 5], NIL)})						
					EndIf
				Next nX
			ElseIf !(Empty(cTpHrExt))
				aEval( ::aMarClone, { |x| If(x[25] == dData, aadd(aMarcDia, aClone(x)), Nil)})				
				For nX := 1 To Len(aMarcDia)
					If (cTpHrExt == "S" .And. ! "S" $ aMarcDia[nX][12]) .Or. (cTpHrExt == "A" .And. ! "E" $ aMarcDia[nX][12])
						LOOP
					EndIf
					
					If (nPosTabCalend := aScan( ::aTabCalend, { |x| x[1] == aMarcDia[nX, 1] .And. x[4] == aMarcDia[nX, 12]})) > 0
	
						// Se for intervalo móvel, altero o valor da saida entrada de intervalo para comparar futuramente com a tolerância
						If ::lIntMovFree
							nResultDiv := (Len(aMarcDia)/2)-1
							If dDataAnt <> aMarcDia[nX, 25]
								For nI:=1 To nResultDiv
									nPosSI := aScan( aClonTabPd, {|x| x[1] == aMarcDia[nX, 1] .And. x[4] == cValToChar(nI)+"S"} )
									nPosEI := aScan( aClonTabPd, {|x| x[1] == aMarcDia[nX, 1] .And. x[4] == cValToChar(nI+1)+"E"} )
									
									nPosSIMarc := aScan( aMarcDia, {|x| x[1] == aMarcDia[nX, 1] .And. x[12] == cValToChar(nI)+"S"} )
									
									If nPosSIMarc > 0 .And. nPosEI > 0 .And. nPosSI > 0
										aClonTabPd[nPosSI,3] := aMarcDia[nPosSIMarc,2] 
										aClonTabPd[nPosEI,3] := SomaHoras(aMarcDia[nPosSIMarc,2],aClonTabPd[nPosSI,9]) 
									EndIf
								Next
								dDataAnt := aMarcDia[nX, 25]
							EndIf
							nMinDif := fCalHoras(aClonTabPd[nPosTabCalend, 1], aClonTabPd[nPosTabCalend, 3], aMarcDia[nX, 1], aMarcDia[nX, 2])
						Else
							If cTpHrExt == "E" .And. ::aTabCalend[nPosTabCalend, 9] > 0 .And. ( nX < Len(aMarcDia) .And. ::aTabCalend[nPosTabCalend, 9] < fCalHoras(aMarcDia[nX, 1], aMarcDia[nX, 2], aMarcDia[nX+1, 1], aMarcDia[nX+1, 2]))
								nMinDif := 0
								nX++
							Else
								nMinDif := fCalHoras(::aTabCalend[nPosTabCalend, 1], ::aTabCalend[nPosTabCalend, 3], aMarcDia[nX, 1], aMarcDia[nX, 2])
							EndIf
						EndIf
						
						If fTolerancia( If(cTpHrExt == "E", ::cTolHex, ::cTolaSai), nX, 2, dData ) > 0 .And. nMinDif > fTolerancia( If(cTpHrExt == "E", ::cTolHex, ::cTolaSai), nX, 2, dData )
							lGeraExt := .T.
							Exit
						EndIf
					EndIf
				Next nX
				
				If !(lGeraExt)
					aEval( ::aResult, { |x, y| IF(( x[1] == dData ) .and. ( x[2] $ cEventos ), ::aResult[y, 3] := 0, NIL)})
				EndIf
			ElseIf lFalta
				IF ( Empty(aVerHrEx) )
					// Zera Quando for Menor ou Igual a Tolerancia, e Nao Existir Marcacao excedendo sua tolerancia.
					aEval( ::aResult, { |x, y| IF(  ( x[1] == dData ) .and. ( x[2] $ cEventos ), ::aResult[y, 3] := 0, NIL)})
				EndIf
			EndIf
		EndIf
	EndIf
	
return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fArrDiario  ³ Autor ³Marinaldo de Jesus    ³ Data ³30/09/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica Todos os Arredondamentos Diarios por Evento		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³::ChkTolArr                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method fArrDiario( dData , aArredDiario , lMvArrInte ) class PonVarApon

	Local aArr			:= {}
	Local aDiv			:= {}
	Local aJaproc		:= {}
	Local bJaproc		:= { |x| x[1] == dData .and. x[2] == cEvento }
	Local bPlusRes		:= { || .F. } 
	Local cEvento		:= ""
	Local cArr			:= ""
	Local nX			:= 0
	Local nY			:= 0
	Local nHrs			:= 0
	Local nArr			:= 0
	Local nDif			:= 0
	Local nPlus			:= 0
	Local nCount		:= 0
	Local nStart		:= 0
	Local nPosArr		:= 0
	
	bPlusRes := { |x| IF( x[1] == dData .and. x[2] == cEvento,;
						( nHrs := SomaHoras( nHrs , x[3] ) , ++nPlus ),;
						NIL;
					 );
			 	 }
	
	IF ( ( nStart := aScan( ::aResult , { |x| x[1] == dData } ) ) > 0 )
		For nX := nStart To ::nLenRes
			IF !( dData == ::aResult[ nX , 01 ] )
				Exit
			EndIF
			cEvento := ::aResult[ nX , 02 ]
			cArr	:= ::aResult[ nX , 06 ]
			IF ( aScan( aJaProc , bJaProc ) > 0 )
				Loop
			EndIF
			IF ( ( nPosArr := aScan( aArredDiario , { |x| x[1] == cArr } ) ) > 0 )
				aArr := aArredDiario[ nPosArr , 02 ]
				aAdd( aJaProc , { dData , cEvento } )
				nHrs	:= 0
				nPlus	:= 0
				nStart	:= Max( nStart , nX )
				aEval( ::aResult , bPlusRes , nStart )
				nArr	:= fArredHoras(	nHrs				,;	//01 -> Horas a Serem Arredondadas
										aArr				,;	//02 -> Array com os Arredondamentos
										NIL 				,;	//03 ->	Tipo de Horas a Arredondar:"A"trasos ; "D"SR ; "F"altas ; "H"oras Extras ; "N"Horas Noturnas ; "S"aidas Antecipadas
										NIL					,;	//04 -> Filial Para a Pesquisa no SP5
										NIL					,;	//05 -> Turno  Para a Pesquisa no SP5
										lMvArrInte	 		 ;	//06 -> Se Arredonda as Horas Integralmente
						 		  )
				IF !( ( nDif := SubHoras( nArr , nHrs ) ) == 0 )
					aDiv	:= DistributeRounding( nPlus , nDif )
					nCount	:= 0
					For nY := nX To ::nLenRes
				    	IF !( dData == ::aResult[ nY , 01 ] .and. cEvento == ::aResult[ nY , 02 ] )
							Exit
						EndIF
		    			::aResult[ nY , 03 ] := Max( SomaHoras( ::aResult[ nY , 03 ] , aDiv[ ++nCount ] ) , 0 )
					Next nY
				EndIF
			EndIF
		Next nX
	EndIF
	
Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DistributeRounding³Autor³Marinaldo de Jesus³ Data ³01/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Distribui o Arredondamento em n Partes               	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³DistributeRounding( nParts , nValParts )					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³nParts     			-> Numero de Partes em que o Arredondamen³
³          ³             		   to devera ser Distribuido			 ³
³          ³nValParts  			-> Valor do Arredondamento a Ser Distibui³
³          ³                  	   do									 ³
³          ³lHoursDistribute	-> Se referese a Horas ( DEFAULT .T. )   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³aDistribution -> Array com nParts elementos contendo os  valo³
³          ³                 res que foram Distribuidos					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³fArrDiario() em ::ChkTolArr									 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function DistributeRounding( nParts , nValParts , lHoursDistribute )
Return( RoundingDistribute( @nParts , @nValParts , @lHoursDistribute ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method	   ³ChkInMvFree ³Autor  ³Marinaldo de Jesus    ³ Data ³11/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Substitur Horario de Intervalo pela Saida + total de Interv. ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oBoj:ChkInMvFree()										     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³::PonVarApon                                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkInMvFree( lReapEj , nPosM ) class PonVarApon

	Local lChkMovInt	:= .F.

	Local aMarcId
	Local cTpMarcEJ
	Local cTpMarcSI
	Local cTpMarcEI
	Local cTpMarcSJ
	Local cEJDataHora
	Local cSIDataHora
	Local cEIDataHora
	Local cSJDataHora
	Local cSIDtHr2
	Local cEIDtHr2
	Local cSIDtHr3
	Local cEIDtHr3
	Local cMcDataHora
	Local cMcDtHr2
	Local cMcDtHr3
	Local lInt2         //Dois intervalos?
	Local lInt3         //Tres intervalos?
	Local nPosEJ		//Entrada jornada
	Local nPosSJ		//Saida jornada
	Local nPosSI		//1a. saida intervalo
	Local nPosSI2		//2a. saida intervalo
	Local nPosEI2		//2a. entrada intervalo
	Local nPosSI3		//3a. saida intervalo
	Local nPosEI3		//3a. entrada intervalo
	Local nPosMarc
	Local nPosMar2
	Local nPosLastMar
	Local nCont
	Local nPosProxMarc
	Local nPosPMarc2
	Local nPosProcEJ
	Local nDifIntHrs
	Local nDifHrs
	Local cTpMarcOk
	Local _nX
	Local nIndInt	 :=	2 // Indice que sera utilizado para indicar o periodo de intervalo (substitui ::nIndice)
	Local nSubHoras
	Local nHoraMarc
	Local cLimIntAnt := ""
	Local cLimIntPos := ""
	Local cLimIntAt2 := ""
	Local cLimIntPs2 := ""
	Local lMovIntFre := ::nMovAInt == 0 .And. ::nMovPInt == 0
	Local lAlterInt1 := .T.
	Local nMarcInt1
	Local nMarcInt2
	Local nInt1Dif
	Local nInt2Dif
	Local nTotMarc		:= 0
	Local nTotMarTab	:= 0
	
	Default nPosM := 0
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Apenas se Tiver Horario de Intervalo									³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( ( ::cInMovel == "S" ) .and. (  ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] > 0 ) )
		
		DEFAULT lReapEj		:= .F.
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Reinicializa as Variaveis												³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		cTpMarcEJ	:= IF( "S" $ ::cTipoMarc , ( SubStr( ::cTipoMarc , 1 , 1 ) + "E" ) , ::cTipoMarc )
		cTpMarcSI	:= IF( "S" $ ::cTipoMarc , ::cTipoMarc , ( SubStr( ::cTipoMarc , 1 , 1 ) + "S" ) )
		cTpMarcEI	:= ( AllTrim( Str( Val( SubStr( cTpMarcSI , 1 , 1 ) ) + 1 ) ) + "E" )
		cTpMarcSJ	:= ( SubStr( cTpMarcEI , 1 , 1 ) + "S" )
		
		If Val( SubStr(::cTipoMarc, 1, 1) ) > 1 //Controle de Multiplos Intervalos.
			cTpMarcOk := ""
			For _nX := 1 to Val( SubStr(::cTipoMarc, 1, 1) )
				cTpMarcOk += cValtoChar(_nX) + "E," + ;
				             cValtoChar(_nX) + Iif(_nX == Val( SubStr(::cTipoMarc, 1, 1) ), "S", "S,")
			Next
		Else //Controle Intervalo Unico.
			cTpMarcOk := cTpMarcEJ
		EndIf
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se Achou Saida de Intervalo e Entrada de Intervalo	e nao Tiver  Passado³
		³pela Verificaca de Horario Movel Livre no Intervalo                    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF(;
				( ( nPosEJ := aScan( ::aHoras , { |x| x[ 10 ] == "EJ" } ) ) > 0 );
				.and.;
				( ( nPosSI := aScan( ::aHoras , { |x| x[ 03 ] == cTpMarcSI } ) ) > 0 );
				.and.;
				( ( nPosEI := aScan( ::aHoras , { |x| x[ 03 ] == cTpMarcEI } ) ) > 0 );
				.and.;
				( ( nPosSJ := aScan( ::aHoras , { |x| x[ 10 ] == "SJ" } ) ) > 0 );
				.and.;
				( !( ::aHoras[ nPosSI , 13 ] ) .and. !( ::aHoras[ nPosEI , 13 ] ) );
		   )	
	
			nPosSI2 := aScan( ::aHoras , { |x| x[10] == "SI" }, nPosSI+1 )
			nPosEI2 := aScan( ::aHoras , { |x| x[10] == "EI" }, nPosEI+1 )
			nPosSI3 := aScan( ::aHoras , { |x| x[10] == "SI" }, nPosSI2+1 )
			nPosEI3 := aScan( ::aHoras , { |x| x[10] == "EI" }, nPosEI2+1 )
   			
            //--Verifica quantidade de intervalos
            lInt2 := If( nPosSI2 > 0 .and. nPosEI2 > 0, .T., .F. )
			lInt3 := If( lInt2 .And. nPosSI3 > 0 .and. nPosEI3 > 0, .T., .F. )
			/*
			
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se Passou pela Entrada de Jornada pois a proxima pesquisa sera³
			³posterior a esta														³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			
			If nPosM == 0 
				IF ( ( nPosMarc := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. !( x[ 08 ] $ cTpMarcOk ) }, nPosEJ + 1 ) ) <= 1.00 )
					++nPosMarc
				EndIF
			ElseIf nPosM > nPosEI
				nPosMarc := 0
			Else
				nPosMarc := nPosM
			EndIf
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Procura Primeira Marcacao que nao Seja correspondente a Entrada de  Jor³
			³nada e se Tem mais de Uma Marcacao										³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF (;
					( nPosMarc > 0 );
					.and.;
			   		( ( nPosProxMarc := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. !( x[ 08 ] $ cTpMarcOk ) } , nPosMarc + 1 ) ) > 0 );
				)			   			
				
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Transforma as Marcacoes da Tabela em String de Data/Hora               ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				cEJDataHora	:= DataHora2Str( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] )
				cSIDataHora	:= DataHora2Str( ::aHoras[ nPosSI , 01 ] , ::aHoras[ nPosSI , 02 ] )
				cEIDataHora	:= DataHora2Str( ::aHoras[ nPosEI , 01 ] , ::aHoras[ nPosEI , 02 ] )
				cSJDataHora	:= DataHora2Str( ::aHoras[ nPosSJ , 01 ] , ::aHoras[ nPosSJ , 02 ] )
				IF ( lInt2 )
					cSIDtHr2	:= DataHora2Str( ::aHoras[ nPosSI2 , 01 ] , ::aHoras[ nPosSI2 , 02 ] )
					cEIDtHr2	:= DataHora2Str( ::aHoras[ nPosEI2 , 01 ] , ::aHoras[ nPosEI2 , 02 ] )					
				EndIf
				IF ( lInt3 )
					cSIDtHr3	:= DataHora2Str( ::aHoras[ nPosSI3 , 01 ] , ::aHoras[ nPosSI3 , 02 ] )
					cEIDtHr3	:= DataHora2Str( ::aHoras[ nPosEI3 , 01 ] , ::aHoras[ nPosEI3 , 02 ] )					
				EndIf
				
				// Obtem a posição da última marcação
				For nCont := Len(::aHoras) To nPosMarc Step -1
					If ::aHoras[nCont][3] == "M" .And. !( ::aHoras[nCont][8] $ cTpMarcOk)
						nPosLastMar := nCont
						EXIT
					EndIf
				Next
				
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Transforma a Marcacao Que sera Convertida em Saida de Intervalo em Stri³
				³g de Data/Hora															³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				cMcDataHora := DataHora2Str( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] )
				IF ( lInt2 )
					nMarcInt1	:= Abs( fDHtoNS( ::aHoras[ nPosSI , 01 ],::aHoras[ nPosSI , 02 ] ) - fDHtoNS( ::aHoras[ nPosProxMarc , 01 ],::aHoras[ nPosProxMarc , 02 ] ) )
					nMarcInt2	:= Abs( fDHtoNS( ::aHoras[ nPosSI2 , 01 ],::aHoras[ nPosSI2 , 02 ] ) - fDHtoNS( ::aHoras[ nPosProxMarc , 01 ],::aHoras[ nPosProxMarc , 02 ] ) )
					nInt1Dif	:= Abs(fDHtoNS(Self:aHoras[nPosEI, 1],Self:aHoras[nPosEI, 2]) - fDHtoNS(Self:aHoras[nPosMarc, 1],Self:aHoras[nPosMarc, 2]))
					nInt2Dif	:= Abs(fDHtoNS(Self:aHoras[nPosSI2, 1],Self:aHoras[nPosSI2, 2]) - fDHtoNS(Self:aHoras[nPosMarc, 1],Self:aHoras[nPosMarc, 2]))

					aEval(::aHoras, {|x| If(x[3] == "M",nTotMarc++,nTotMarTab++)})

					If nInt1Dif <= nInt2Dif .Or. (nInt1Dif >= nInt2Dif .And. nTotMarc == nTotMarTab)
						If nMarcInt2 < nMarcInt1 .And. nPosProxMarc > 6
							nPosMar2 := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. !( x[ 08 ] $ cTpMarcOk ) } , nPosMarc + 1 )
						Else
							nPosMar2 := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. !( x[ 08 ] $ cTpMarcOk ) } , nPosProxMarc + 1 )
						EndIf

						If !( nPosMar2 == 0 )
							cMcDtHr2 := DataHora2Str( ::aHoras[ nPosMar2 , 01 ] , ::aHoras[ nPosMar2 , 02 ] )
						EndIf	
						nPosPMarc2 := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. !( x[ 08 ] $ cTpMarcOk ) } , nPosMar2 + 1 )
					Else
						If nPosMarc > 0
							nPosMar2 := nPosMarc
							cMcDtHr2 := DataHora2Str(::aHoras[nPosMar2 ,1], ::aHoras[nPosMar2 , 2])
							nPosPMarc2 := aScan(::aHoras , { |x| x[3] == "M" .and. !( x[8] $ cTpMarcOk)}, nPosMar2 + 1)
							lAlterInt1 := .F.
						EndIf
					EndIf
				EndIf
				IF ( lInt3 )
					If nPosPMarc2 > 0
						nPosMar3 := aScan( ::aHoras , { |x| x[ 03 ] == "M" .and. !( x[ 08 ] $ cTpMarcOk ) } , nPosPMarc2+1, nPosLastMar - (nPosPMarc2+1) )
						If !( nPosMar3  == 0 )
							cMcDtHr3 := DataHora2Str( ::aHoras[ nPosMar3 , 01 ] , ::aHoras[ nPosMar3 , 02 ] )
						EndIf					
					Else
						nPosMar3 := 0
					EndIf
				EndIf
	
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Apenas se a Marcacao de Saida de Intervalo for Maior igual que a       ³
				³Marcacao  de Entrada de Jornada e nao forcar o Reapontamento de 		³
				³Entrada de Jornadaem funcao do Intervalo Movel Livre (Sincronismo dos  ³
				³Extremos pelo Intervalo)												³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF ( ( ( cMcDataHora >= cEJDataHora ) .or. ( ::cHrMovel <> "S" )) .and. !( ::lPaAjustEJ ) )
	
				  	If cMcDataHora < cEJDataHora
				  		//Obtem a quantidade de horas da primeira marcação
				  		nDifIntHrs := DataHora2Val( ::aHoras[ nPosMarc , 01 ]  , ::aHoras[ nPosMarc , 02 ]  , ::aHoras[ nPosProxMarc, 01 ]  , ::aHoras[ nPosProxMarc, 02 ]  , "H" ) 
				  		
				  		::aHoras[ nPosMarc , 01 ] := ::aHoras[ nPosSI , 01 ]
						::aHoras[ nPosMarc , 02 ] := ::aHoras[ nPosSI , 02 ]
						::aHoras[ nPosMarc , 17 ] := cMcDataHora := DataHora2Str( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] )
						
						aMarcId		:= RetFimTab( ::aHoras[ nPosSI , 01 ] , ::aHoras[ nPosSI , 02 ] , nDifIntHrs )
						
						::aHoras[ nPosProxMarc , 01 ] := aMarcId[1]
						::aHoras[ nPosProxMarc , 02 ] := aMarcId[2]
						::aHoras[ nPosProxMarc , 17 ] := DataHora2Str( ::aHoras[ nPosProxMarc , 01 ] , ::aHoras[ nPosProxMarc , 02 ] )
				  		
				  		If ( ( nPosProcEJ := ::PosaProcessad( ( "lEntraEJ"+cTpMarcEJ ) ) ) > 0 )
				  			/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Desflega a Entrada de Jornada Para forcar o Reapontamento				³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							::SetaProcessad( .T. , NIL , nPosProcEJ )
		
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Desflega a Verificacao de Horario Movel nos Extremos     				³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							::aHoras[ nPosEJ , 12 ] := .F.
							::aHoras[ nPosSJ , 12 ] := .F.
				    	
				    		lReapEj		:= .T.
				    		::lPaAjustEJ := .T.
				  		EndIf
				  	EndIf

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Carrega Horario Esperado para a Entrada do Intervalo em Funcao da Saida³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					aMarcId		:= RetFimTab( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] , ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] )
					cEIDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
					
					// Defini os limites de horário para o intevarlo móvel com mobilidade
					If !lMovIntFre
						nHoraMarc	:= fDHtoNS( Self:aHoras[ nPosSI, 01 ], Self:aHoras[ nPosSI, 02 ] )
						
						nSubHoras	:= fHtoNS( Self:nMovAInt )
						cLimIntAnt	:= DataHora2Str( fNStoDH(nHoraMarc - nSubHoras, "D"), fNStoDH(nHoraMarc - nSubHoras, "H"))
						
						nSubHoras	:= fHtoNS( Self:nMovPInt )
						cLimIntPos	:= DataHora2Str( fNStoDH(nHoraMarc + nSubHoras, "D"), fNStoDH(nHoraMarc + nSubHoras, "H"))

						If lInt2
							nHoraMarc	:= fDHtoNS( Self:aHoras[ nPosSI2, 01 ], Self:aHoras[ nPosSI2, 02 ] )
							cLimIntAt2	:= DataHora2Str( fNStoDH(nHoraMarc - nSubHoras, "D"), fNStoDH(nHoraMarc - nSubHoras, "H"))
							cLimIntPs2	:= DataHora2Str( fNStoDH(nHoraMarc + nSubHoras, "D"), fNStoDH(nHoraMarc + nSubHoras, "H"))
						EndIf
					EndIf
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Apenas se a Entrada de Intervalo for Menor que a Proxima Saida         ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					If ( cEIDataHora <= cSJDataHora .And. lMovIntFre )  .Or. ( !lMovIntFre .And. ( cLimIntAnt <= cMcDataHora .And. cLimIntPos >= cMcDataHora ) .And. ( cMcDataHora > cEJDataHora .And. cMcDataHora < cSJDataHora ) )
						If lAlterInt1
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Substituir no Array ::aHoras o Horario de Saida do Intervalo			³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							::aHoras[nPosSI, 01] := ::aHoras[nPosMarc, 01]
							::aHoras[nPosSI, 02] := ::aHoras[nPosMarc, 02]
							::aHoras[nPosSI, 17] := cMcDataHora
							
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Substituir no Array ::aHoras o Horario de Entraa do Intervalo			³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							::aHoras[nPosEI, 01] := aMarcId[01]
							::aHoras[nPosEI, 02] := aMarcId[02]
							::aHoras[nPosEI, 17] := cEIDataHora
						EndIf
						
						::aHoras[nPosSI, 12] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
						::aHoras[nPosEI, 13] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo

						IF ( lInt2 )
							If !( nPosMar2 == 0 ) .And. !( nPosPMarc2 == 0 )
								nIndInt		+=2
								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³Substituir no Array ::aHoras o Horario de Entrada e saida do Intervalo	³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
								
								cSIDataHr2 := DataHora2Str( Self:aHoras[nPosMar2,1] , Self:aHoras[nPosMar2,2] )
								cSIDtHrPad := DataHora2Str( Self:aHoras[nPosSI2,1] , Self:aHoras[nPosSI2,2] )
								
								If (lMovIntFre .And. cSIDataHr2 <= cSIDtHrPad) .Or. (!lMovIntFre .And. !Empty(cLimIntAt2) .And. !Empty(cLimIntPs2) .And. (cLimIntAt2 <= cMcDtHr2 .And. cLimIntPs2 >= cMcDtHr2) .And. (cMcDtHr2 > cEJDataHora .And. cMcDtHr2 < cSJDataHora))
									aMarcId		:= RetFimTab( ::aHoras[ nPosMar2 , 01 ] , ::aHoras[ nPosMar2 , 02 ] , ::aApo[ ::oaApo:HrIntTbNNt , nIndInt ] )
									
									cEIDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
									
									::aHoras[ nPosSI2 , 01 ] := ::aHoras[ nPosMar2 , 01 ]
									::aHoras[ nPosSI2 , 02 ] := ::aHoras[ nPosMar2 , 02 ]
										
									::aHoras[ nPosSI2 , 12 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
									::aHoras[ nPosSI2 , 17 ] := cMcDtHr2							
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Substituir no Array ::aHoras o Horario de Entraa do Intervalo			³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									::aHoras[ nPosEI2 , 01 ] := aMarcId[ 01 ]
									::aHoras[ nPosEI2 , 02 ] := aMarcId[ 02 ]
									::aHoras[ nPosEI2 , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
									::aHoras[ nPosEI2 , 17 ] := cEIDataHora
								ElseIf !lMovIntFre .And. cLimIntAt2 > cMcDtHr2
									::aHoras[ nPosSI2 , 12 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
									::aHoras[ nPosEI2 , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
								Else
									nSubHoras := DataHora2Val( Self:aHoras[nPosSI2,1],Self:aHoras[nPosSI2,2],Self:aHoras[nPosMar2,1],Self:aHoras[nPosMar2,2],"H" )
									
									::aHoras[ nPosSI2 , 12 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
									::aHoras[ nPosEI2 , 13 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
									
									::aHoras[ nPosMar2 , 01 ] := ::aHoras[ nPosSI2 , 01 ]
									::aHoras[ nPosMar2 , 02 ] := ::aHoras[ nPosSI2 , 02 ]
									::aHoras[ nPosMar2 , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
									::aHoras[ nPosMar2 , 17 ] := DataHora2Str( ::aHoras[ nPosMar2 , 01 ] , ::aHoras[ nPosMar2 , 02 ])
									
									nHoraMarc := fDHtoNS(Self:aHoras[ nPosPMarc2 , 01 ],Self:aHoras[ nPosPMarc2 , 02 ])
									nSubHoras := fHtoNS(nSubHoras)
									
									::aHoras[ nPosPMarc2 , 01 ] := fNStoDH(nHoraMarc - nSubHoras,"D")
									::aHoras[ nPosPMarc2 , 02 ] := fNStoDH(nHoraMarc - nSubHoras,"H")
									::aHoras[ nPosPMarc2 , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
									::aHoras[ nPosPMarc2 , 17 ] :=  DataHora2Str( ::aHoras[ nPosPMarc2 , 01 ] , ::aHoras[ nPosPMarc2 , 02 ])
								EndIf
							EndIf
						EndIf						
						IF ( lInt3 )
							If !( nPosMar3 == 0 )
								nIndInt		+=2
								aMarcId		:= RetFimTab( ::aHoras[ nPosMar3 , 01 ] , ::aHoras[ nPosMar3 , 02 ] , ::aApo[ ::oaApo:HrIntTbNNt , nIndInt ] )
								
								cEIDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
								
								::aHoras[ nPosSI3 , 01 ] := ::aHoras[ nPosMar3 , 01 ]
								::aHoras[ nPosSI3 , 02 ] := ::aHoras[ nPosMar3 , 02 ]
								::aHoras[ nPosSI3 , 12 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
								::aHoras[ nPosSI3 , 17 ] := cMcDtHr3
								
								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³Substituir no Array ::aHoras o Horario de Entraa do Intervalo			³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
								::aHoras[ nPosEI3 , 01 ] := aMarcId[ 01 ]
								::aHoras[ nPosEI3 , 02 ] := aMarcId[ 02 ]
								::aHoras[ nPosEI3 , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
								::aHoras[ nPosEI3 , 17 ] := cEIDataHora
							EndIf
						EndIf
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Ordena as Marcacoes do Dia com as Marcacoes da Tabela					³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::SortaHoras()
						lChkMovInt := .T.
						
					ElseIf lInt2 .And. !Empty(cLimIntAt2) .And. !Empty(cLimIntPs2) .And. nTotMarc == nTotMarTab .And. cMcDataHora >= cLimIntAt2 .And. cMcDataHora <= cLimIntPs2 .And. cMcDataHora >= cEJDataHora .And. cMcDataHora < cSJDataHora
						// Se o funcionário possuir todas as marcações, o primeiro intervalo estiver fora da mobilidade 
						// e estiver coincidindo com o 2º intervalo altero o horário da marcação para que seja apontado corretamente
						
						nDifIntHrs := DataHora2Val(Self:aHoras[nPosMarc,01], Self:aHoras[nPosMarc,02], Self:aHoras[nPosProxMarc,01], Self:aHoras[nPosProxMarc,02], "H")
						nHoraMarc := fDHtoNS(Self:aHoras[nPosEI,01],Self:aHoras[nPosEI,02])
						
						Self:aHoras[nPosMarc,01] := Self:aHoras[nPosEI,01]
						Self:aHoras[nPosMarc,02] := Self:aHoras[nPosEI,02]
							
						Self:aHoras[nPosMarc,12] := .T.
						Self:aHoras[nPosMarc,17] := DataHora2Str(Self:aHoras[nPosMarc,01], Self:aHoras[nPosMarc,02])

						Self:aHoras[nPosProxMarc,01] := fNStoDH(nHoraMarc + fHtoNS(nDifIntHrs),"D")
						Self:aHoras[nPosProxMarc,02] := fNStoDH(nHoraMarc + fHtoNS(nDifIntHrs),"H")
							
						Self:aHoras[nPosProxMarc,12] := .T.
						Self:aHoras[nPosProxMarc,17] := DataHora2Str(Self:aHoras[nPosProxMarc,01], Self:aHoras[nPosProxMarc,02])
						
						Self:aHoras[nPosSI, 12] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
						Self:aHoras[nPosEI, 13] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo

						Self:SortaHoras()
						lChkMovInt := .T.
					Else
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Nao altera os Horarios de Intervalo e Flega que ja Passou Pela verifica³
						³cao de Intervalo Movel Livre											³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						If lMovIntFre
							::aHoras[ nPosSI , 12 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Saida de Intervalo
							::aHoras[ nPosEI , 13 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Entrada de Intervalo
						EndIf
					EndIF
					
				ElseIF ( ( nPosProcEJ := ::PosaProcessad( ( "lEntraEJ"+cTpMarcEJ ) ) ) > 0 )
					
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Se nao Forcar o Reapontamento desde a Entrada de Jornada               ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF (;
							!( ::lPaAjustEJ );
							.or.;
							(;
								( nPosProxMarc == 0 );
								.or.;
								( nPosProxMarc == nPosMarc );
							 );
						 )
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Nao altera os Horarios de Intervalo e Flega que ja Passou Pela verifica³
						³cao de Intervalo Movel Livre											³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						If lMovIntFre
							::aHoras[ nPosSI , 12 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Saida de Intervalo
							::aHoras[ nPosEI , 13 ]	:= .T. //Ja Passou pela verificacao de Horario Movel de Entrada de Intervalo
						EndIf
			    	Else
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Apura a Diferenca de Horas Entre a Entrada de Jornada e a Saida de   In³
						³tervalo																³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						nDifHrs := fCalHoras(	::aHoras[ nPosEJ , 01 ]	,;	//01 -> Data 1
												::aHoras[ nPosEJ , 02 ]	,;	//02 -> Hora 1
												::aHoras[ nPosSI , 01 ]	,;	//03 -> Data 2
												::aHoras[ nPosSI , 02 ]	,;	//04 -> Hora 2
												NIL						,;	//05 -> <@>Horas Normais Apontadas
												NIL						,;	//06 -> <@>Horas Noturnas Apontadas
												::lHnotAtr				,;	//07 -> Apontar Horas Noturnas
												::dPerNotIni		 	,;	//08 -> Data Inicial Para a Hora Noturna
												NIL						,;	//09 -> <@>Horas de Acrescimo Noturno
												::nIniHnot				,;	//10 -> Inicio do Horario Noturno
												::nFimHnot				,;	//11 -> Final do Horario Noturno
												::nMinHnot				,;	//12 -> Minutos do Horario Noturno
												::lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
												NIL					 	 ;	//14 -> Periodo da Hora Noturna
		  									)
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Carrega Horario Esperado para a Entrada de Jornada em Funcao da Saida  ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						aMarcId		:= RetIniTab( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] , nDifHrs )
						cEJDataHora	:= DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Modifica Horario de Entrada de Jornada									³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::aHoras[ nPosEJ , 01 ] := aMarcId[ 01 ]
						::aHoras[ nPosEJ , 02 ] := aMarcId[ 02 ]
						::aHoras[ nPosEJ , 17 ] := cEJDataHora
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Substituir no Array ::aHoras o Horario de Saida do Intervalo			³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::aHoras[ nPosSI , 01 ] := ::aHoras[ nPosMarc , 01 ]
						::aHoras[ nPosSI , 02 ] := ::aHoras[ nPosMarc , 02 ]
						::aHoras[ nPosSI , 12 ] := .T. //Ja Alterou Horario Movel de Saida de Intervalo
						::aHoras[ nPosSI , 17 ] := cMcDataHora
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Apura a Diferenca de Horas Entre a Entrada de Intervalo e Saida de  Jor³
						³nada																	³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						nDifHrs := fCalHoras(	::aHoras[ nPosEI , 01 ]	,;	//01 -> Data 1
												::aHoras[ nPosEI , 02 ]	,;	//02 -> Hora 1
												::aHoras[ nPosSJ , 01 ]	,;	//03 -> Data 2
												::aHoras[ nPosSJ , 02 ]	,;	//04 -> Hora 2
												NIL						,;	//05 -> <@>Horas Normais Apontadas
												NIL						,;	//06 -> <@>Horas Noturnas Apontadas
												::lHnotAtr				,;	//07 -> Apontar Horas Noturnas
												::dPerNotIni		 	,;	//08 -> Data Inicial Para a Hora Noturna
												NIL						,;	//09 -> <@>Horas de Acrescimo Noturno
												::nIniHnot				,;	//10 -> Inicio do Horario Noturno
												::nFimHnot				,;	//11 -> Final do Horario Noturno
												::nMinHnot				,;	//12 -> Minutos do Horario Noturno
												::lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
												NIL					 	 ;	//14 -> Periodo da Hora Noturna
		  									)
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Carrega Horario Esperado para a Entrada do Intervalo em Funcao da Saida³
						³de Intervalo															³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						aMarcId		:= RetFimTab( ::aHoras[ nPosMarc , 01 ] , ::aHoras[ nPosMarc , 02 ] , ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] )
				  		cEIDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Substituir no Array ::aHoras o Horario de Entrada do Intervalo			³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::aHoras[ nPosEI , 01 ] := aMarcId[ 01 ]
						::aHoras[ nPosEI , 02 ] := aMarcId[ 02 ]
						::aHoras[ nPosEI , 13 ] := .T. //Ja Alterou Horario Movel de Entrada de Intervalo
						::aHoras[ nPosEI , 17 ] := cEIDataHora
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Carrega Horario Esperado para a Saida de Jornada em Funcao da   Entrada³
						³de Intervalo															³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						aMarcId		:= RetFimTab( ::aHoras[ nPosEI , 01 ] , ::aHoras[ nPosEI , 02 ] , nDifHrs )
				  		cSJDataHora := DataHora2Str( aMarcId[ 01 ] , aMarcId[ 02 ] )
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Substituir no Array ::aHoras o Horario de Entraa do Intervalo			³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::aHoras[ nPosSJ , 01 ] := aMarcId[ 01 ]
						::aHoras[ nPosSJ , 02 ] := aMarcId[ 02 ]
						::aHoras[ nPosSJ , 17 ] := cSJDataHora
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Desflega a Entrada de Jornada Para forcar o Reapontamento				³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::SetaProcessad( .T. , NIL , nPosProcEJ )
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Desflega a Verificacao de Horario Movel nos Extremos     				³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::aHoras[ nPosEJ , 12 ] := .F.
						::aHoras[ nPosSJ , 12 ] := .F.
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Ordena as Marcacoes do Dia com as Marcacoes da Tabela					³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						::SortaHoras()
						lChkMovInt	:= .T.
						lReapEj		:= .T.
						
					EndIF
					
				EndIF
				
			EndIF
			
		EndIF
		
	EndIF
	
	IF ( lChkMovInt )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Remonta Horas Trabalhadas no ::aApo em funcao das Alteracoes	  no	³
		³::aHoras																³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::RmkWorkHrs()
	EndIF
	
Return( lChkMovInt )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ChkHrMovel ³Autor  ³Marinaldo de Jesus     	  	³ Data ³23/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Tratamento para Horario Movel 									  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>										  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>										  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon												  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ChkHrMovel( cTipo, nPosM, cSiglaMarc, lRstHrTabInt ) class PonVarApon
	
	Local lChkMovel		:= .F.
	Local lChkTolMov	:= .F.
	
	Local aMarcEJ
	Local aMarcSJ
	Local aMarcAntM
	Local aMarcPosM
	Local aMarcSaiI
	Local aMarcEntI
	Local aMarcAux
	Local cMarcAux
	Local cMarcFun
	Local cMarcPosM
	Local cMarcAntM
	Local cEntAnt
	Local cEntInt
	Local cSaiProx
	Local lHrMovTol
	Local lInMovTol
	Local lAjustInt
	Local lChkAbono
	Local lModEjSj
	Local lForceChkMvInt
	Local nPosEJ
	Local nPosSJ
	Local nPosSI
	Local nPosEI
	Local nPosSI2
	Local nPosEI2
	Local nPosSI3
	Local nPosEI3
	Local nHrEjSi
	Local nHrSiEi
	Local nHrEJNov
	Local nHrEJOld
	Local aNovHrInt
	Local nX
	Local nHInter := 0
	
	DEFAULT cSiglaMarc		:= ::cTipoMarc
	DEFAULT lRstHrTabInt	:= .F.
	
	IF ((( lHrMovTol := ( ( "E" $ cSiglaMarc ) .and. ( ::cHrMovel == "S" ) .and. ( ( ::nAntMove + ::nPosMove ) > 0 ) ) ) .or.;
			( lInMovTol := ( ( "S" $ cSiglaMarc ) .and. ( ::cInMovel == "S" ) .and. ( ( ::nMovAint + ::nMovPint ) > 0 ) ) )) .and.;
			( nPosM > 0 ) .and. ( ::aHoras[ nPosM , 3 ] == "M" ) )
		
		lAjustInt := ( ::cAjustIn == "S" )
		lModEjSj  := .T.
		
		IF ( ( lHrMovTol ) .and. ( cTipo == "EJ" ) )
			
			IF ((( nPosEJ := aScan( ::aHoras,{ |x| x[10] == "EJ" } ) ) > 0 ) .and.;
				( ( nPosSJ := aScan( ::aHoras,{ |x| x[10] == "SJ" } ) ) > 0 ) .and.;
				!( ::aHoras[ nPosEJ , 12 ] ) .and. !( ::aHoras[ nPosSJ , 12 ] ))
				
				//--Salva a Marcacao
				aMarcEJ		:= Array( 02 )
				aMarcEJ[1]	:= ::aHoras[ nPosM , 01 ]
				aMarcEJ[2]	:= ::aHoras[ nPosM , 02 ]
				
				//--Obtem o Posicionamento das Tabelas Referente a Intervalo
				nPosSI := aScan( ::aHoras , { |x| x[10] == "SI" } )
				nPosEI := aScan( ::aHoras , { |x| x[10] == "EI" } )
				
				//-- Modifica o horario de entrada qdo for abonado
				lChkAbono := ChkAboHrMv( @aMarcEJ, ::aHoras[ nPosM, 1 ], ::aAbonos, ::cFilSP6, ::aPreAboDia)
				
				cMarcFun	:= DataHora2Str( aMarcEJ[1] , aMarcEJ[2] )
				aMarcAntM	:= RetIniTab( ::aHoras[nPosEJ,1] , ::aHoras[nPosEJ,2] , ::nAntMove ) 
				cMarcAntM	:= DataHora2Str( aMarcAntM[1] , aMarcAntM[2] )
				aMarcPosM	:= RetFimTab( ::aHoras[nPosEJ,1] , ::aHoras[nPosEJ,2] , ::nPosMove ) 
				cMarcPosM	:= DataHora2Str( aMarcPosM[1] , aMarcPosM[2] )
				
				//Quando existir um par de marcações antes da entrada de jornada, ajusta entrada para que não gere atraso
				If ( ( (nPosM + 2) == nPosEJ ) )
					cMarcFun := DataHora2Str( ::aHoras[nPosEJ+1,1] , ::aHoras[nPosEJ+1,2] )
				EndIf
				
				IF ((( cMarcFun <= cMarcAntM ) .or. ( cMarcFun >= cMarcPosM )) .or. (( cMarcFun < cMarcPosM  ) .and. ( cMarcFun > cMarcAntM )) .or. ( lChkAbono ))	
					
					Begin Sequence
						
						//-- Verifica se a Entrada  ‚ Menor que (Tabela - Tolerancia Ant.)
						IF ( cMarcFun <= cMarcAntM )
							//Se marcacao Anterior for Maior que Tolerancia Nao Altera Horario Movel
							IF ( lChkTolMov := ( ( cMarcFun < cMarcAntM ) .and. ( ::cChkTMov $ "AT" ) ) )
								Break
							EndIF
							aMarcEJ[1] := aMarcAntM[1]             
							aMarcEJ[2] := aMarcAntM[2]
						//-- Verifica se a Entrada1 ‚ Maior que (Tabela + Tolerancia Post.)
						ElseIF ( cMarcFun >= cMarcPosM )
							//Se marcacao Posteior for Maior que Tolerancia Nao Altera Horario Movel
							IF ( lChkTolMov := ( ( cMarcFun > cMarcPosM ) .and. ( ::cChkTMov $ "PT" ) ) )
								Break
							EndIF
							aMarcEJ[1] := aMarcPosM[1]
							aMarcEJ[2] := aMarcPosM[2]
						//-- Verifica se a Entrada1 ‚ Esta Entre a Tabela e a Tolerancia Anterior e Posterior
						ElseIF ( ( cMarcFun < cMarcPosM  ) .and. ( cMarcFun > cMarcAntM ) )
							aMarcEJ[1] := ( Str2DataHora( cMarcFun )[1] )
							aMarcEJ[2] := ( Str2DataHora( cMarcFun )[2] )
						EndIF
						
					End Sequence
					
					//--Substituir no Array ::aHoras o Hor rio de entrada da Tabela
					IF !( lChkTolMov )
						//Considera hora de intervalo sem o horário noturno
						aEval( ::aApo[::oaApo:HrIntTbNNt], { |x| nHInter := SomaHoras( nHInter, x ) } )
						//-- Horário Esperado para a Saída em Função da Entrada
						aMarcSJ := RetFimTab( aMarcEJ[1], aMarcEJ[2] , ::aHoras[nPosEJ,16], nHInter, .F., aMarcEJ[1], ::nIniHNot, ::nFimHNot, ::nMinHNot, ::lAcreNot )
						aMarcSJ[2]:= __TimeSum(__TimeSum(	aMarcSJ[2], 0) , 0)
						//-- Se foram Encontradas a Saida e Entrada de Intervalo
						IF ( ( nPosSI > 0 ) .and. ( nPosEI > 0 ) )
                        	//Verifica se Saida de Jornada nao sera Inferior aos Horarios de Intervalo
							IF (( DataHora2Str( aMarcSJ[1] , aMarcSJ[2] ) < ::aHoras[nPosSI,17] ) .or. ( DataHora2Str( aMarcSJ[1] , aMarcSJ[2] ) < ::aHoras[nPosEI,17] ))	
								//So Modifica Entrada de Jornada e Saida de Jornada se Sincronizou Intervalo
								lModEjSj := lAjustInt
							EndIF
                        EndIF	
						IF ( lModEjSj )	//Se Modificar Entrada de Jornada e Saida de Jornada
							//--Apura o Numero de Horas para Sincronismo do Intervalo
							IF ( nPosSI > 0 ) .and. ( nPosEI > 0 )
								//Entrada de Jornada e Saida de Intervalo
								nHrEjSi	:= DataHora2Val( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] , ::aHoras[ nPosSI , 01 ] , ::aHoras[ nPosSI , 02 ] , "H" )
								nHrEJOld := fDHtoNS( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] )
								//Saida de Intervalo e Entrada de Intervalo
								nHrSiEi	:= DataHora2Val( ::aHoras[ nPosSI , 01 ] , ::aHoras[ nPosSI , 02 ] , ::aHoras[ nPosEI , 01 ] , ::aHoras[ nPosEI , 02 ] , "H" )
							EndIF
                        	//--Ajusta o Horario de Entrada da Tabela
							::aHoras[nPosEJ,01] := aMarcEJ[1]
							::aHoras[nPosEJ,02] := aMarcEJ[2]
							::aHoras[nPosEJ,17] := DataHora2Str( aMarcEJ[1] , aMarcEJ[2] )
							//--Substituir no Array ::aHoras o Hor rio de Saida Tabela
							::aHoras[nPosSJ,01] := aMarcSJ[1]
							::aHoras[nPosSJ,02] := aMarcSJ[2]
							::aHoras[nPosSJ,17] := DataHora2Str( aMarcSJ[1] , aMarcSJ[2] )
							//-- Verifica se Ajusta (Sincroniza) o Intervalo em funcao da Entrada Movel
							IF ( lAjustInt )
					    		//-- Se foram Encontradas a Saida e Entrada de Intervalo
								IF ( ( nPosSI > 0 ) .and. ( nPosEI > 0 ) )									
									nPosSI2 := aScan( ::aHoras , { |x| x[10] == "SI" }, nPosSI+1 )
									nPosEI2 := aScan( ::aHoras , { |x| x[10] == "EI" }, nPosEI+1 )
									
					    			//-- Apura a Diferenca de Horas Entre a Entrada do Expediente e Saida de Intervalo
									aMarcSaiI	:= RetFimTab( aMarcEJ[1]	, aMarcEJ[2]	, nHrEjSi )
					    			//-- Apura as Horas de Intervalo
									aMarcEntI	:= RetFimTab( aMarcSaiI[1]	, aMarcSaiI[2]	, nHrSiEi )
                        			//--Ajusta o Horario de Saida Intervalo
									::aHoras[nPosSI,01] := aMarcSaiI[1]
									::aHoras[nPosSI,02] := aMarcSaiI[2]
									::aHoras[nPosSI,17] := DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] )
                        			//--Ajusta o Horario de Entrada Intervalo
									::aHoras[nPosEI,01] := aMarcEntI[1]
									::aHoras[nPosEI,02] := aMarcEntI[2]
									::aHoras[nPosEI,17] := DataHora2Str( aMarcEntI[1] , aMarcEntI[2] )
								EndIF
								
								If !Empty(nPosSI2) .And. !Empty(nPosEI2) .And. nPosSI2 > 0 .And. nPosEI2 > 0
									nPosSI3 := aScan( ::aHoras , { |x| x[10] == "SI" }, nPosSI2 + 1 )
									nPosEI3 := aScan( ::aHoras , { |x| x[10] == "EI" }, nPosEI2 + 1 )
									nHrEJNov := fDHtoNS( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] )
									
									aNovHrInt := fGerNvInt(::aHoras,nHrEJNov,nHrEJOld,nPosSI2,nPosEI2)
									
									::aHoras[nPosSI2,01] := aNovHrInt[1]
									::aHoras[nPosSI2,02] := aNovHrInt[2]
									::aHoras[nPosSI2,17] := DataHora2Str( aNovHrInt[1] , aNovHrInt[2] )
									
									::aHoras[nPosEI2,01] := aNovHrInt[3]
									::aHoras[nPosEI2,02] := aNovHrInt[4]
									::aHoras[nPosEI2,17] := DataHora2Str( aNovHrInt[3] , aNovHrInt[4] )
									
									If nPosSI3 > 0 .And. nPosEI3 > 0
										aNovHrInt := fGerNvInt(::aHoras,nHrEJNov,nHrEJOld,nPosSI3,nPosEI3)
										
										::aHoras[nPosSI3,01] := aNovHrInt[1]
										::aHoras[nPosSI3,02] := aNovHrInt[2]
										::aHoras[nPosSI3,17] := DataHora2Str( aNovHrInt[1] , aNovHrInt[2] )
										
										::aHoras[nPosEI3,01] := aNovHrInt[3]
										::aHoras[nPosEI3,02] := aNovHrInt[4]
										::aHoras[nPosEI3,17] := DataHora2Str( aNovHrInt[3] , aNovHrInt[4] )
									EndIf
								EndIf
							EndIF
							//-- Passou Pelo Horario Movel
							lChkMovel := .T.
						EndIF
					EndIF
					
					//--Ja passou Pelo Horario Movel de Entrada de Jornada
					::aHoras[nPosEJ,12] := .T.
					//--Ja passou Pelo Horario Movel de Saida de Jornada
					::aHoras[nPosSJ,12] := .T.
					
				EndIF
			EndIF
				
		ElseIF ( lInMovTol )
				
			IF ( cTipo $ "SI_EI_SE" )
				
				//-- Sigla de Entrada Anterior
				cEntAnt			:= ( SubStr( cSiglaMarc , 1 , 1 ) + "E" )
				//-- Sigla da Entrada do intervalo
				cEntInt			:= ( Str( Val( SubStr( cSiglaMarc , 1 , 1 ) ) + 1 , 1 ) + "E" )
				//-- Sigla da Proxima Saida
				cSaiProx		:= ( SubStr( cEntInt , 1 , 1 ) + "S" )
				
				lForceChkMvInt	:=	( ( ( cTipo $ "SI_EI" ) .and. ( ::cLstChkMvInt == "SE" ) ) .or. ( lRstHrTabInt ) )
				
				IF ((( nPosEJ := aScan(::aHoras,{ |x| x[3] == cEntAnt		} ) ) > 0 ) .and.;
					(( nPosSI := aScan(::aHoras,{ |x| x[3] == cSiglaMarc	} ) ) > 0 ) .and.;
					(( nPosEI := aScan(::aHoras,{ |x| x[3] == cEntInt		} ) ) > 0 ) .and.;
					(( nPosSJ := aScan(::aHoras,{ |x| x[3] == cSaiProx		} ) ) > 0 ) .and.;
					((!( ::aHoras[ nPosSI , 13 ] ) .and. !( ::aHoras[ nPosEI , 13 ] )) .or. ( lForceChkMvInt )))
					
					//Guardar o ultimo Flag de Checagem de Intervalo Movel
					::cLstChkMvInt := cTipo
					
					IF ( ( lForceChkMvInt ) .or. ( lRstHrTabInt ) ) //Se forcar a Verificacao de Intervalo Movel
						IF !Empty( ::aLstChkMvInt )
							//--Restaurar o Horario de Saida Tabela
							::aHoras[nPosSI,01] := ::aLstChkMvInt[1]
							::aHoras[nPosSI,02] := ::aLstChkMvInt[2]
							::aHoras[nPosSI,17] := ::aLstChkMvInt[3]
							//--Restaurar o Horario de Entrada Tabela
							::aHoras[nPosEI,01] := ::aLstChkMvInt[4]
							::aHoras[nPosEI,02] := ::aLstChkMvInt[5]
							::aHoras[nPosEI,17] := ::aLstChkMvInt[6]
							IF ( lRstHrTabInt )
								lChkMovel := .T.
							EndIF	
						EndIF
					EndIF
					
					IF !( lRstHrTabInt )
						
						//--Salva a Marcacao
						aMarcSaiI		:= Array( 02 )
						aMarcSaiI[1]	:= ::aHoras[ nPosM , 01 ]
						aMarcSaiI[2]	:= ::aHoras[ nPosM , 02 ]
						
						cMarcFun	:= DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] )
						aMarcAntM	:= RetIniTab( ::aHoras[nPosSI,1] , ::aHoras[nPosSI,2] , ::nMovAint ) 
						cMarcAntM	:= DataHora2Str( aMarcAntM[1] , aMarcAntM[2] )
						aMarcPosM	:= RetFimTab( ::aHoras[nPosSI,1] , ::aHoras[nPosSI,2] , ::nMovPint ) 
						cMarcPosM	:= DataHora2Str( aMarcPosM[1] , aMarcPosM[2] )
						
						IF ((( cMarcFun <= cMarcAntM ) .or. ( cMarcFun >= cMarcPosM )) .or. (( cMarcFun < cMarcPosM) .and. ( cMarcFun > cMarcAntM )))	
							
							Begin Sequence
								
								//-- Verifica se a Entrada ‚ Menor que (Tabela - Tolerancia Ant.)
								IF ( cMarcFun < cMarcAntM )
									//Se marcacao Anterior for Maior que Tolerancia Nao Altera Horario Movel
									IF ( lChkTolMov := ( ( cMarcFun < cMarcAntM ) .and. ( ::cChkTMvi $ "AT" ) ) )
										Break
									EndIf
									aMarcAux := {}
									cMarcInt := DataHora2Str(::aHoras[nPosSI,1] , ::aHoras[nPosSI,2])
									For nX := nPosM+1 to Len(::aHoras)
										If ::aHoras[nX,3] == "M" .and. SubStr(::aHoras[nX-1,3],2,1) == "S"
											cMarcAux := DataHora2Str( ::aHoras[nX,1] , ::aHoras[nX,2] ) 
											If cMarcAux >= cMarcAntM .and. cMarcAux <= cMarcPosM
												aAdd(aMarcAux,{::aHoras[nX,1], ::aHoras[nX,2], cMarcAux})
											EndIf 
										EndIf
									Next nX
									If Len(aMarcAux) > 0 //Encontrou marcações no período de intervalo, neste caso a primeira saída é antecipada (saída expediente)
										If Len(aMarcAux) > 1
											nMarcAux := 0
											nIntAux  := 0
											For nX:= 1 to Len(aMarcAux)
												If aMarcAux[nX,3] == cMarcInt
													nMarcAux := nX
													Exit
												ElseIf aMarcAux[nX,3] < cMarcInt
													If nIntAux == 0
														nIntAux := SubHoras( ::aHoras[nPosSI,2] , aMarcAux[nX,2] )
														nMarcAux := nX
													Else
														If nIntAux > SubHoras( ::aHoras[nPosSI,2] , aMarcAux[nX,2] )
															nIntAux := SubHoras( ::aHoras[nPosSI,2] , aMarcAux[nX,2] )
															nMarcAux := nX
														EndIf
													EndIf
												Else
													If nIntAux == 0
														nIntAux := SubHoras( aMarcAux[nX,2], ::aHoras[nPosSI,2] )
														nMarcAux := nX
													Else
														If nIntAux > SubHoras( aMarcAux[nX,2], ::aHoras[nPosSI,2] )
															nIntAux := SubHoras( aMarcAux[nX,2], ::aHoras[nPosSI,2] )
															nMarcAux := nX
														EndIf
													EndIf
												EndIf
											Next nX
											aMarcSaiI[1] := aMarcAux[nMarcAux,1]
											aMarcSaiI[2] := aMarcAux[nMarcAux,2]
										Else
											aMarcSaiI[1] := aMarcAux[1,1]
											aMarcSaiI[2] := aMarcAux[1,2]
										EndIf
									Else
										aMarcSaiI[1] := aMarcAntM[1]
										aMarcSaiI[2] := aMarcAntM[2]
									EndIf
								//-- Verifica se a Entrada ‚ Maior que (Tabela + Tolerancia Post.)
								ElseIF ( cMarcFun >= cMarcPosM )
									//Se marcacao Posterior for Maior que Tolerancia Nao Altera Horario Movel
									IF ( lChkTolMov := ( ( cMarcFun > cMarcPosM ) .and. ( ::cChkTMvi $ "PT" ) ) )
										Break
									EndIF
									aMarcSaiI[1] := aMarcPosM[1]
									aMarcSaiI[2] := aMarcPosM[2]
								//-- Verifica se a Entrada1 ‚ Esta Entre a Tabela e a Tolerancia Anterior e Posterior
								ElseIF ( ( cMarcFun < cMarcPosM  ) .and. ( cMarcFun > cMarcAntM ) )
									aMarcSaiI[1] := ( Str2DataHora( cMarcFun )[1] )
									aMarcSaiI[2] := ( Str2DataHora( cMarcFun )[2] )
								EndIF
								
							End Sequence
							
							IF !( lChkTolMov )
								
								IF ((DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] ) > DataHora2Str( ::aHoras[ nPosEJ , 01 ] , ::aHoras[ nPosEJ , 02 ] )))		
									
									aMarcEntI := RetFimTab( aMarcSaiI[1] , aMarcSaiI[2] , ::aApo[ ::oaApo:HrIntTbNNt , ::nIndice ] ) 
									
									IF ((DataHora2Str( aMarcEntI[1] , aMarcEntI[2] ) < DataHora2Str( ::aHoras[ nPosSJ , 01 ] , ::aHoras[ nPosSJ , 02 ] ) ))
										
										IF ( cTipo == "SE" )
											::aLstChkMvInt := Array( 06 )
											//--Salvar o Horario de Saida Tabela
											::aLstChkMvInt[1] := ::aHoras[nPosSI,01]
											::aLstChkMvInt[2] := ::aHoras[nPosSI,02]
											::aLstChkMvInt[3] := ::aHoras[nPosSI,17]
											//--Salvar o Horario de Entrada Tabela
											::aLstChkMvInt[4] := ::aHoras[nPosEI,01]
											::aLstChkMvInt[5] := ::aHoras[nPosEI,02]
											::aLstChkMvInt[6] := ::aHoras[nPosEI,17]
										EndIF
										
										//--Substituir no Array ::aHoras o Horario de Saida Tabela
										If ( DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] ) != DataHora2Str( aMarcEntI[1] , aMarcEntI[2] ) ) .and. ;
											( DataHora2Str( aMarcEntI[1] , aMarcEntI[2] ) <= DataHora2Str( aMarcPosM[1] , aMarcEntI[2] ) )
											::aHoras[nPosSI,01] := aMarcSaiI[1]
											::aHoras[nPosSI,02] := aMarcSaiI[2]
											::aHoras[nPosSI,17] := DataHora2Str( aMarcSaiI[1] , aMarcSaiI[2] )
										EndIf
										//--Substituir no Array ::aHoras o Horario de Entrada Tabela
										::aHoras[nPosEI,01] := aMarcEntI[1]
										::aHoras[nPosEI,02] := aMarcEntI[2]
										::aHoras[nPosEI,17] := DataHora2Str( aMarcEntI[1] , aMarcEntI[2] )
										
										//-- Passou Pelo Horario Movel
										lChkMovel				:= .T.
										
									EndIF
								EndIF
							EndIF
						EndIF
					EndIF
				EndIF
				
				IF !( lRstHrTabInt )
					
					//-- Ja passou Horario Movel Referente ao Intervalo Saida
					::aHoras[ nPosSI , 13 ] := .T.
					//-- Ja passou Horario Movel Referente ao Intervalo Entrada
					::aHoras[ nPosEI , 13 ] := .T.
					
				Else //Garanto que se houver mais de uma Saida no Expediente haja a revisao do Intervalo Movel
					
					//-- Ja passou Horario Movel Referente ao Intervalo Saida
					::aHoras[ nPosSI , 13 ] := .F.
					//-- Ja passou Horario Movel Referente ao Intervalo Entrada
					::aHoras[ nPosEI , 13 ] := .F.
					
				EndIF
			EndIF
		EndIF
			
		IF ( lChkMovel ) 
			//Ordena as Marcacoes do Dia com as Marcacoes da Tabela
			::SortaHoras()
			
			// Remonta Horas Trabalhadas no ::aApo em funcao das Alteracoes no ::aHoras																³
			::RmkWorkHrs()
		EndIF
	EndIF
	
Return( lChkMovel )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ChkAboHrMv  ³ Autor ³Marinaldo de Jesus    ³ Data ³30/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica os Abonos e Modifica Inicio da Marcacao			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³ChkAboHrMv( aMarcFun , dData , aAbonos )			 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aMarcFun -> Array com a Marcacao do Funcionario              ³
³          ³dData    -> Data da Marcacao                       		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³method ChkHrMovel() class PonVarApon  						 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ChkAboHrMv( aMarcFun, dData, aAbonos, cFilSP6, aPreAbonos )
	
	Local cMarcFun	:= ""
	Local cMarcAbo	:= ""
	Local cMarcFAbo	:= ""
	Local lChkAbono	:= .F.
	Local nW		:= 0
	Local nPosAbo	:= 0
	
	Default aPreAbonos := {}

	If !Empty(aAbonos)
		// Verifica se Tem Abono na Data
		IF ( ( nPosAbo := aScan( aAbonos , { |x| x[ AABONOS_DATA ] == dData } ) ) > 0 )
			// Transforma a Marcação do Funcionário em String para comparação
			cMarcFun := DataHora2Str( aMarcFun[1] , aMarcFun[2] )
			//Verifica Todos os Abonos na Data
			For nW := nPosAbo To Len(aAbonos)
				// O Abono só irá Influenciar no Horário Móvel se Tiver o Periodo que foi Abonado (Elemento 03 e 04 de aAbonos )
				IF ( SomaHoras( aAbonos[ nW , AABONOS_HORAS_INI ] , aAbonos[ nW , AABONOS_HORAS_FIM ] ) > 0  )
					IF (( aAbonos[ nW, AABONOS_DATA ] == dData ) .and. ( PosSP6( aAbonos[ nW, AABONOS_CODIGO ], cFilSP6, "P6_ABHORAS", 01 ) == "S" ))
						//Transforma a Marcação do Abono em String para comparação
						cMarcAbo	:= DataHora2Str( aAbonos[ nW, AABONOS_DATA ], aAbonos[ nW, AABONOS_HORAS_INI ])
						
						If aAbonos[nW, AABONOS_HORAS_FIM] <= aAbonos[nW, AABONOS_HORAS_INI]
							cMarcFAbo := DataHora2Str(aAbonos[nW, AABONOS_DATA ] + 1, aAbonos[nW, AABONOS_HORAS_FIM])
						Else
							cMarcFAbo := DataHora2Str(aAbonos[nW, AABONOS_DATA ], aAbonos[nW, AABONOS_HORAS_FIM])
						EndIf
						// Se a Marcação do Abono for menor que a Marcação do  Funcionário considera a Marcação do Abono.
						IF ( lChkAbono := ( cMarcAbo < cMarcFun ) )
							//Abona o periodo inteiro
							If ( cMarcFAbo >= cMarcFun )
								aMarcFun[1] := aAbonos[ nW, AABONOS_DATA		]
								aMarcFun[2] := aAbonos[ nW, AABONOS_HORAS_INI	]
							Else
								//Abona somente a quantidade de horas informadas
								aMarcFun[1] := aAbonos[ nW, AABONOS_DATA		]
								aMarcFun[2] := SubHoras(aMarcFun[2], SubHoras( aAbonos[ nW, AABONOS_HORAS_FIM ], aAbonos[ nW, AABONOS_HORAS_INI	]))
							EndIf
							Exit
						EndIF
					EndIF
				EndIF
			Next nW
		EndIF
	ElseIf !Empty(aPreAbonos)
		// Verifica se Tem Abono na Data
		If ( ( nPosAbo := aScan( aPreAbonos , { |x| x[2] == dData })) > 0 )
			// Transforma a Marcação do Funcionário em String para comparação
			cMarcFun := DataHora2Str( aMarcFun[1] , aMarcFun[2] )
			//Verifica Todos os Abonos na Data
			For nW := nPosAbo To Len(aPreAbonos)
				// O Abono só irá Influenciar no Horário Móvel se Tiver o Periodo que foi Abonado (Elemento 03 e 05 de aPreAbonos )
				If ( SomaHoras( aPreAbonos[ nW, 3], aPreAbonos[ nW, 5 ]) > 0  )
					If (( aPreAbonos[ nW, 2 ] == dData ) .And. ( PosSP6( aPreAbonos[ nW, 1 ], cFilSP6, "P6_ABHORAS", 01 ) == "S" ))
						//Transforma a Marcação do Abono em String para comparação
						cMarcAbo := DataHora2Str( aPreAbonos[ nW, 2 ], aPreAbonos[ nW, 3 ])
						If aPreAbonos[nW, 5] <= aPreAbonos[nW, 3]
							cMarcFAbo := DataHora2Str(aPreAbonos[nW, 4] + 1, aPreAbonos[nW, 5])
						Else
							cMarcFAbo := DataHora2Str(aPreAbonos[nW, 4], aPreAbonos[nW, 5])
						EndIf
						
						// Se a Marcação do Abono for menor que a Marcação do  Funcionário considera a Marcação do Abono.
						IF ( lChkAbono := ( cMarcAbo < cMarcFun ))
							// Abona o periodo inteiro
							If cMarcFAbo >= cMarcFun
								aMarcFun[1] := aPreAbonos[ nW, 2 ]
								aMarcFun[2] := aPreAbonos[ nW, 3 ]
							Else
								//Abona somente a quantidade de horas informadas
								aMarcFun[1] := aPreAbonos[ nW, 2 ]
								aMarcFun[2] := SubHoras(aMarcFun[2], SubHoras( aPreAbonos[ nW, 5 ], aPreAbonos[ nW, 3 ]))
							EndIf
							Exit
						EndIF
					EndIF
				EndIF
			Next nW
		EndIF
	EndIf
	
Return( lChkAbono )

//End Class PonVarApon

//Begin Class ApoElemPrc
	
/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Class     ³ApoElemPrc  ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Classe com as Variaveis que Indexarao o array aProcessad   da³
³          ³classe PonVarApon											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := ApoElemPrc():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
class ApoElemPrc
      
	data nEntraEJ1E
	data nEntraEJ2E
	data nEntraEJ3E
	data nEntraEJ4E
	data nEntraEJ5E
	data nEntraEJ6E
	data nSaidaSI1S
	data nSaidaSI2S
	data nSaidaSI3S
	data nSaidaSI4S
	data nSaidaSI5S
	data nSaidaSI6S
	data nEntraEI1E
	data nEntraEI2E
	data nEntraEI3E
	data nEntraEI4E
	data nEntraEI5E
	data nEntraEI6E
	data nSaidaSJ1S
	data nSaidaSJ2S
	data nSaidaSJ3S
	data nSaidaSJ4S
	data nSaidaSJ5S
	data nSaidaSJ6S

	method New( aProcessad ) constructor
	
endclass	

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³New         ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Construtor da Classe ApoElemPrc						 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := ApoElemPrc():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class ApoElemPrc                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method New( aProcessad ) class ApoElemPrc

	aProcessad := Array( 24 , 02 )

	::nEntraEJ1E	:= 01
	::nEntraEJ2E	:= 02
	::nEntraEJ3E	:= 03
	::nEntraEJ4E	:= 04
	::nEntraEJ5E	:= 05
	::nEntraEJ6E	:= 06
	::nSaidaSI1S	:= 07
	::nSaidaSI2S	:= 08
	::nSaidaSI3S	:= 09
	::nSaidaSI4S	:= 10
	::nSaidaSI5S	:= 11
	::nSaidaSI6S	:= 12
	::nEntraEI1E	:= 13
	::nEntraEI2E	:= 14
	::nEntraEI3E	:= 15
	::nEntraEI4E	:= 16
	::nEntraEI5E	:= 17
	::nEntraEI6E	:= 18
	::nSaidaSJ1S	:= 19
	::nSaidaSJ2S	:= 20
	::nSaidaSJ3S	:= 21
	::nSaidaSJ4S	:= 22
	::nSaidaSJ5S	:= 23
	::nSaidaSJ6S	:= 24


	aProcessad[::nEntraEJ1E,01]	:= "lEntraEJ1E"
	aProcessad[::nEntraEJ2E,01]	:= "lEntraEJ2E"
	aProcessad[::nEntraEJ3E,01]	:= "lEntraEJ3E"
	aProcessad[::nEntraEJ4E,01]	:= "lEntraEJ4E"
	aProcessad[::nEntraEJ5E,01]	:= "lEntraEJ5E"
	aProcessad[::nEntraEJ6E,01]	:= "lEntraEJ6E"

	aProcessad[::nSaidaSI1S,01]	:= "lSaidaSI1S"
	aProcessad[::nSaidaSI2S,01]	:= "lSaidaSI2S"
	aProcessad[::nSaidaSI3S,01]	:= "lSaidaSI3S"
	aProcessad[::nSaidaSI4S,01]	:= "lSaidaSI4S"
	aProcessad[::nSaidaSI5S,01]	:= "lSaidaSI5S"
	aProcessad[::nSaidaSI6S,01]	:= "lSaidaSI6S"

	aProcessad[::nEntraEI1E,01]	:= "lEntraEI1E"
	aProcessad[::nEntraEI2E,01]	:= "lEntraEI2E"
	aProcessad[::nEntraEI3E,01]	:= "lEntraEI3E"
	aProcessad[::nEntraEI4E,01]	:= "lEntraEI4E"
	aProcessad[::nEntraEI5E,01]	:= "lEntraEI5E"
	aProcessad[::nEntraEI6E,01]	:= "lEntraEI6E"

	aProcessad[::nSaidaSJ1S,01]	:= "lSaidaSJ1S"
	aProcessad[::nSaidaSJ2S,01]	:= "lSaidaSJ2S"
	aProcessad[::nSaidaSJ3S,01]	:= "lSaidaSJ3S"
	aProcessad[::nSaidaSJ4S,01]	:= "lSaidaSJ4S"
	aProcessad[::nSaidaSJ5S,01]	:= "lSaidaSJ5S"
	aProcessad[::nSaidaSJ6S,01]	:= "lSaidaSJ6S"

return( NIL )

//End Class PonVarApon

//Begin Class StructaApo

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Class     ³StructaApo  ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Classe com as Variaveis que Indexarao o array aApo da  Classe³
³          ³PonVarApon											 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := StructaApo():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³                                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
class StructaApo

	data AdicHeNotA
	data AdicHeNotF
	data AdicHeNotN
	data AdicNotAut
	data AdicNotNau 
	data Atrasos

	data Falta
	data FaltaInter
	data FaltaIntNt

	data HeIntNorAu
	data HeIntNorFx
	data HeIntNorNa
	data HeIntNotAu
	data HeIntNotFx
	data HeIntNotNa

	data HeNormal
	data HeNormalFx
	data HeNorNAut
	data HeNotAutor
	data HeNotNaoAu
	data HeNoturnFx
   
	data HrIntEfeti
	data HrIntNotEf
	data HrIntNotTb
	data HrIntTabel
	data HrIntTbNNt
	data HrNorNaoRe
	data HrNotNaoRe
	data HrTrabTbNN
	data HrTrbEfeti
	data HrTrbNotEf
	data HrTrbNotTb
	data HrTrbTabel

	data MeiaFalta

	data PriorityHe

	data SaidaAnte
	data SaidaExpe

	data AcreAuto 	
	data PrimDom 
	data DescLab 
	data FestLab

	data HrAcrNotHe
	data AcrAdiNot
	data AcNotHeInt
	
	method New() constructor
	
endclass

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³New         ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Construtor da Classe StructaApo						 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := StructaApo():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class ApoElemPrc                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method New() class StructaApo

	::AdicHeNotA	:=  1
	::AdicHeNotF	:=  2
	::AdicHeNotN	:=  3
	::AdicNotAut	:=  4
	::AdicNotNau	:=  5  
	::Atrasos		:=  6

	::Falta			:=  7
	::FaltaInter	:=  8
	::FaltaIntNt	:=  9

	::HeIntNorAu	:= 10
	::HeIntNorFx	:= 11
	::HeIntNorNa	:= 12
	::HeIntNotAu	:= 13
	::HeIntNotFx	:= 14
	::HeIntNotNa	:= 15

	::HeNormal		:= 16
	::HeNormalFx	:= 17
	::HeNorNAut		:= 18
	::HeNotAutor	:= 19
	::HeNotNaoAu	:= 20
	::HeNoturnFx	:= 21
   
	::HrIntEfeti	:= 22
	::HrIntNotEf	:= 23
	::HrIntNotTb	:= 24
	::HrIntTabel	:= 25
	::HrIntTbNNt	:= 26
	::HrNorNaoRe	:= 27
	::HrNotNaoRe	:= 28
	::HrTrabTbNN	:= 29
	::HrTrbEfeti	:= 30
	::HrTrbNotEf	:= 31
	::HrTrbNotTb	:= 32
	::HrTrbTabel	:= 33

	::MeiaFalta		:= 34

	::PriorityHe	:= 35

	::SaidaAnte		:= 36	
	::SaidaExpe		:= 37	
    
	::AcreAuto 		:= 38
	
	::PrimDom 		:= 39
	::DescLab 		:= 40
	::FestLab 		:= 41
	
	::HrAcrNotHe	:= 42
	::AcrAdiNot		:= 43
	::AcNotHeInt	:= 44
				
return( NIL )

//End Class StructaApo

//Begin Class SpaFields

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Class     ³SpaFields   ³ Autor ³Marinaldo de Jesus    ³ Data ³11/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Classe com as Variaveis que Indexarao o array aSpaFields e de³
³          ³finirao os campos da regra (SPA) a ser utilizado			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := SpaFields():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
class SpaFields

	data aSpaFields

	data nPaHrMovel
	data nPaAntMove
	data nPaPosMove
	data nPaInMovel
	data nPaMovAInt
	data nPaMovPInt
	data nPaAjustIn
	data nPaChkTMov
	data nPaChkTMvI
	data nPaFaltas
	data nPaSaiAnt
	data nPaPerSaiA
	data nPaTolSaiA
	data nPaTolASai
	data nPaAtrasos
	data nPaPerAtra
	data nPaTolAtra
	data nPaTolHrNr
	data nPaSaiExpe
	data nPaTolHex
	data nPaPgHeDnt
	data nPaPagIntn
	data nCpoIntNotNt
	data nPaPgAdnIn
	data nPaPerHMov
	data nPaIntFalt
	data nPaDsr
	data nPaPagHext
	data nPaAdNot
	data nPaAdNotEx
	data nPaHrNorm
	data nPaPeraNot
	data nPaTolNtHe
	data nPaTolNotu
	data nPaPerHext
	data nPaTolFalt
	data nPaTolHePe
	data nPaFaixaHe
	data nPaAjustEj
	data nPaHrsPgs
	data nPaAdHeDia
	data nPaPrimdom
	data nPaDescLab
	data nPaFestLab
	data nAdNtPro
	data nTpApont
	data nPerpadn
	data nPaPgInTot
	data nPaTolHeMe
			
	data nSpaFields

	method New() constructor

endclass	

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³New         ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Construtor da Classe SpaFields						 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := SpaFields():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method New() class SpaFields

	::nPaHrMovel	:= 1
	::nPaAntMove	:= 2
	::nPaPosMove	:= 3
	::nPaInMovel	:= 4
	::nPaMovAInt	:= 5
	::nPaMovPInt	:= 6
	::nPaAjustIn	:= 7
	::nPaChkTMov	:= 8
	::nPaChkTMvI	:= 9
	::nPaFaltas		:= 10
	::nPaSaiAnt		:= 11
	::nPaPerSaiA	:= 12
	::nPaTolSaiA	:= 13
	::nPaTolASai	:= 14
	::nPaAtrasos	:= 15
	::nPaPerAtra	:= 16
	::nPaTolAtra	:= 17
	::nPaSaiExpe	:= 18
	::nPaTolHex		:= 19
	::nPaPgHeDnt	:= 20
	::nPaPagIntn	:= 21
	::nCpoIntNotNt	:= 22
	::nPaPgAdnIn	:= 23
	::nPaPerHMov	:= 24
	::nPaIntFalt	:= 25
	::nPaDsr		:= 26
	::nPaPagHext	:= 27
	::nPaAdNot		:= 28
	::nPaAdNotEx	:= 29
	::nPaHrNorm		:= 30
	::nPaPeraNot	:= 31
	::nPaTolNtHe	:= 32
	::nPaTolNotu	:= 33
	::nPaPerHext	:= 34
	::nPaTolFalt	:= 35
	::nPaTolHePe	:= 36
	::nPaFaixaHe	:= 37
	::nPaAjustEj	:= 38
	::nPaHrsPgs		:= 39
	::nPaAdHeDia	:= 40
	::nPaPrimDom	:= 41		
	::nPaDescLab	:= 42		
	::nPaFestLab	:= 43		
	::nPaTolHrNr	:= 44
	::nAdNtPro		:= 45
	::nTpApont		:= 46		
	::nPaPgInTot	:= 47
	::nPerpadn		:= 48		
	::nPaTolHeMe	:= 49
	
	::nSpaFields	:= 49
	 
	::aSpaFields					:= Array( ::nSpaFields )
	::aSpaFields[ ::nPaHrMovel   ]	:= "PA_HRMOVEL"
	::aSpaFields[ ::nPaAntMove   ]	:= "PA_ANTMOVE"
	::aSpaFields[ ::nPaPosMove   ]	:= "PA_POSMOVE"
	::aSpaFields[ ::nPaInMovel   ]	:= "PA_INMOVEL"
	::aSpaFields[ ::nPaMovAInt   ]	:= "PA_MOVAINT"
	::aSpaFields[ ::nPaMovPInt   ]	:= "PA_MOVPINT"
	::aSpaFields[ ::nPaAjustIn   ]	:= "PA_AJUSTIN"
	::aSpaFields[ ::nPaChkTMov   ]	:= "PA_CHKTMOV"
	::aSpaFields[ ::nPaChkTMvI   ]	:= "PA_CHKTMVI"
	::aSpaFields[ ::nPaFaltas    ]	:= "PA_FALTAS"
	::aSpaFields[ ::nPaSaiAnt    ]	:= "PA_SAIANT"
	::aSpaFields[ ::nPaPerSaiA   ] 	:= "PA_PERSAIA"
	::aSpaFields[ ::nPaTolSaiA   ]	:= "PA_TOLSAIA"
	::aSpaFields[ ::nPaTolASai   ]	:= "PA_TOLASAI"
	::aSpaFields[ ::nPaAtrasos   ]	:= "PA_ATRASOS"
	::aSpaFields[ ::nPaPerAtra   ]	:= "PA_PERATRA"
	::aSpaFields[ ::nPaTolAtra   ]	:= "PA_TOLATRA"
	::aSpaFields[ ::nPaSaiExpe   ]	:= "PA_SAIEXPE"
	::aSpaFields[ ::nPaTolHex    ]	:= "PA_TOLHEX"
	::aSpaFields[ ::nPaPgHeDnt   ]	:= "PA_PGHEDNT"
	::aSpaFields[ ::nPaPagIntn   ]	:= "PA_PAGINTN"
	::aSpaFields[ ::nCpoIntNotNt ]	:= "PA_PAGINTN"
	::aSpaFields[ ::nPaPgAdnIn   ]	:= "PA_PGADNIN"
	::aSpaFields[ ::nPaPerHMov	 ]	:= "PA_PERHMOV"
	::aSpaFields[ ::nPaIntFalt   ]	:= "PA_INTFALT"
	::aSpaFields[ ::nPaDsr		 ]	:= "PA_DSR"
	::aSpaFields[ ::nPaPagHext	 ]	:= "PA_PAGHEXT"
	::aSpaFields[ ::nPaAdNot	 ]	:= "PA_ADNOT"
	::aSpaFields[ ::nPaAdNotEx   ]	:= "PA_ADNOTEX"
	::aSpaFields[ ::nPaHrNorm    ]	:= "PA_HRNORM"
	::aSpaFields[ ::nPaPeraNot   ]	:= "PA_PERANOT"
	::aSpaFields[ ::nPaTolNtHe   ]	:= "PA_TOLNTHE"
	::aSpaFields[ ::nPaTolNotu	 ]	:= "PA_TOLNOTU"
	::aSpaFields[ ::nPaPerHext   ]	:= "PA_PERHEXT"
	::aSpaFields[ ::nPaTolFalt   ]	:= "PA_TOLFALT"
	::aSpaFields[ ::nPaTolHePe   ]	:= "PA_TOLHEPE"
	::aSpaFields[ ::nPaFaixaHe   ]	:= "PA_FAIXAHE"
	::aSpaFields[ ::nPaAjustEj	 ]	:= "PA_AJUSTEJ"
	::aSpaFields[ ::nPaHrsPgs	 ]	:= "PA_HRSPGS"
	::aSpaFields[ ::nPaAdHeDia	 ]	:= "PA_ADHEDIA" 
	::aSpaFields[ ::nPaPrimdom	 ]	:= "PA_PRIMDOM" 
	::aSpaFields[ ::nPaDescLab	 ]	:= "PA_DESCLAB" 
	::aSpaFields[ ::nPaFestLab	 ]	:= "PA_FESTLAB"
	::aSpaFields[ ::nPaTolHrNr	 ]	:= "PA_TOLHRNR"
	::aSpaFields[ ::nAdNtPro	 ]	:= "PA_ADNTPRO"
	::aSpaFields[ ::nTpApont	 ]	:= "PA_TPAPONT" 
	::aSpaFields[ ::nPaPgInTot	 ]	:= "PA_PGINTOT"
	::aSpaFields[ ::nPerpadn	 ]	:= "PA_PERPADN" 
	::aSpaFields[ ::nPaTolHeMe	 ]	:= "PA_TOLHEME" 

return( NIL )

//End Class SpaFields

//Begin Class Sr6Fields

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Class     ³Sr6Fields   ³ Autor ³Marinaldo de Jesus    ³ Data ³11/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Classe com as Variaveis que Indexarao o array aSr6Fields e de³
³          ³finirao os campos da regra (SR6) a ser utilizado			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := Sr6Fields():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
class Sr6Fields

	data aSr6Fields

	data nR6InterNt
	data nR6HrInter
	data nR6AptpMar
	data nR6HnotAtr
	data nR6HnotTab
	data nR6HnotTbI	
	data nR6HnotFal
	data nR6HnotSai
	data nR6ExtNot
	data nR6AcreNot
	data nR6IdAcreNot
	data nR6SpAcNot
	data nR6TpJorn
	data nSr6Fields

	method New() constructor

endclass	

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³New         ³ Autor ³Marinaldo de Jesus    ³ Data ³26/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Construtor da Classe Sr6Fields						 		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj := Sr6Fields():New()									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³self                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class ApoElemPrc                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method New() class Sr6Fields

	::nR6InterNt	:= 1
	::nR6HrInter	:= 2
	::nR6AptpMar	:= 3
	::nR6HnotAtr	:= 4
	::nR6HnotFal	:= 5
	::nR6HnotSai	:= 6
	::nR6ExtNot		:= 7
	::nR6AcreNot	:= 8
	::nR6IdAcreNot	:= 9  
	::nR6HnotTab	:= 10
	::nR6HnotTbI	:= 11
	::nR6SpAcNot	:= 12
	::nR6TpJorn		:= 13
	
	::nSr6Fields	:= 13

	::aSr6Fields					:= Array( ::nSr6Fields )
	::aSr6Fields[ ::nR6InterNt   ]	:= "R6_INTERNT"
	::aSr6Fields[ ::nR6HrInter   ]	:= "R6_HRINTER"
	::aSr6Fields[ ::nR6AptpMar   ]	:= "R6_APTPMAR"
	::aSr6Fields[ ::nR6HnotAtr   ]	:= "R6_HNOTATR"
	::aSr6Fields[ ::nR6HnotFal   ]	:= "R6_HNOTFAL"
	::aSr6Fields[ ::nR6HnotSai   ]	:= "R6_HNOTSAI"
	::aSr6Fields[ ::nR6ExtNot    ]	:= "R6_EXTNOT"
	::aSr6Fields[ ::nR6AcreNot   ]	:= "R6_ACRENOT"
	::aSr6Fields[ ::nR6IdAcreNot ]	:= "R6_IDACREN"
	::aSr6Fields[ ::nR6HnotTab   ]	:= "R6_HNOTTAB"
	::aSr6Fields[ ::nR6HnotTbI   ]	:= "R6_HNOTTBI"
	::aSr6Fields[ ::nR6SpAcNot	 ]	:= "R6_SPADNOT"
	::aSr6Fields[ ::nR6TpJorn	 ]	:= "R6_TPJORN"
return( NIL )

//End Class Sr6Fields

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³ZeraApoHr	³ Autor ³Mauricio MR           ³ Data ³01/06/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa o Array aApoHr									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:ZeraApoHr()           									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method ZeraApoHr() class PonVarApon

Local nX	:= 0
Local nY	:= 0

IF Empty( ::aApoHr )
	::aApoHr := ( Array( ELEMENTOS_MATRIZ_APONTAMENTOS , ::nSiglaMarc ) )
Endif

For nX:=1 to ELEMENTOS_MATRIZ_APONTAMENTOS
    For nY:=1 to ::nSiglaMarc
    	::aApoHr[nX,nY] := {}
    Next nY
Next nX

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³fTabHeAut   ³ Autor ³Mauricio MR           ³ Data ³03/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega a Tabela de HE autorizadas do Funcionario em Array   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/  
method fTabHeAut( cFilSRA , cMat , dPerIni , dPerFim ) class PonVarApon
					
Local cFilSPT			:= ''
Local cFilMat			:= '' 
Local lRet				:= .F.
Local lMemoria			:= IF( ::aHeAutoDia <> NIL , .T. , .F. )
Local nLenaFaixaExtra	:= 0
Local nFaixa			:= 0

Begin Sequence

	DEFAULT cFilSRA		:= SRA->RA_FILIAL
	DEFAULT cMat    	:= SRA->RA_MAT
	DEFAULT dPerIni		:= Ctod("//")
	DEFAULT dPerFim		:= Ctod("//")	 
	
    cFilSPT		:= fFilFunc('SPT')
    cFilMat     := cFilSRA + cMat
	
    //-- Obtem o periodo de Apontamento se nao passada pelo menos uma das datas
	IF Empty( dPerIni ) .or. Empty( dPerFim )
		PerAponta( @dPerIni , @dPerFim )
	EndIF

	//-- Carrega array com as Faixas de HE autorizadas 
	If Empty(::aFaixasHE)
		//-- Procura Tabela (Filial + Matricula corrente + Data Inicial do Periodo)
		//-- ATENCAO: Utilizamos a opcao SoftSeek na pesquisa, de modo que poderemos encontrar uma
		//-- data maior que o final do periodo ou entao um outro funcionario cuja chave filial+mat
		//-- seja superior a filila+funcionario de quem queremos obter informacoes, por isso
		//-- nos preocupamos em tratar a quebra de filial+funcionario e Data.
		SPT->( MsSeek( cFilMat+Dtos(dPerIni) , .T.) )
		While SPT->( !Eof() .and. PT_FILIAL + PT_MAT == cFilMat )
		 	
			If SPT->( PT_DATAREF > dPerFim )
		 	   Exit
		 	Endif
		 	   
		 	IF SPT->( ( PT_DATAREF >= dPerIni ) .and. ( PT_DATAREF <= dPerFim ) )
				SPT->( aAdd( ::aFaixasHE, {;
												PT_DATAREF ,;
												PT_DATA,;
												PT_HORINI,;
				                        		IF( PT_HORINI > PT_HORFIM,PT_DATA + 1 , PT_DATA ) , PT_HORFIM;
				                        	};
				            );
				      )
		 	EndIF 
		 	
		 	SPT->( dbSkip() )
	   
		End While
	
		lRet := !Empty( ::aFaixasHE )
		
	Endif
	
	//-- Carrega Horarios do Periodo em ::aHeAutoDia (Geralmente de um dia) a partir do array ::aFaixasHE
	If ( lMemoria )
	
		::aHeAutoDia	:= {}
		nLenaFaixaExtra			:= Len( ::aFaixasHE )
		nFaixa					:= 1
	   
		//-- Quando for uma data especifica
		If ( dPerIni == dPerFim )
			//-- Localiza a faixa requisitada
			nFaixa := aScan( ::aFaixasHE, { |aFaixa| aFaixa[1] == dPerini } )
		Endif
	   
		//--Percorre todas as Faixas     
		IF ( nFaixa > 0 )
			--nFaixa
			While ( ( ++nFaixa ) <= nLenaFaixaExtra )
		        IF ( ( ::aFaixasHE[ nFaixa , 01 ] >= dPerIni ) .and. ( ::aFaixasHE[ nFaixa , 01 ] <= dPerFim ) )
		           aAdd( ::aHeAutoDia , {;
		           									::aFaixasHE[ nFaixa, 01 ] ,;
		           									::aFaixasHE[ nFaixa, 02 ] ,;
		           									::aFaixasHE[ nFaixa, 03 ] ,;
		                                			::aFaixasHE[ nFaixa, 04 ] ,;
		                                			::aFaixasHE[ nFaixa, 05 ]  ;
		                               			};
		                 ) 
		        EndIF
			End While
		EndIF
		lRet := !Empty( ::aHeAutoDia )
	Endif

End Sequence

return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³InitPreAbo    ³Autor³Mauricio MR           ³ Data ³01/06/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa as Tabelas de Periodos de Pre-Abonos	 		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³oObj:InitPreAbo()	    									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil          		                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³class PonVarApon                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method InitPreAbo( cFilSRA , cMatSRA ) class PonVarApon       

//-- Se Existir o arquivo de Pre-Abonos
If ( ::lRF0ChkTable )
   
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Apenas Quando estiver vazio e se nao tiver passado pela   fun³
	³cao														  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
  	IF Empty( ::aPreAbo ) .and. ( ::lfTabPreAbo )
		/*/	
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Array com Periodos de Pre-Abonos					          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		::lfTabPreAbo := ::TabPreAbo( cFilSRA , cMatSRA , ::dPerIni , ::dPerFim )
  	EndIF
    //-- Monta Tabela de Periodos de Pre-Abonos para o dia corrente 
    IF ( ::lfTabPreAbo ) 
        ::TabPreAbo( cFilSRA , cMatSRA , ::dData , ::dData )
        
    EndIF	
Endif

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³TabPreAbo   ³ Autor ³Mauricio MR           ³ Data ³23/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega a Tabela de Pre-Abonos do Funcionario em Array       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³ TabPreAbo(cFilSRA, cMat , dPerIni , dPerFim,  aPreAbono )   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet e aPreAbono(Por referencia)                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³class PonVarApon 											 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method TabPreAbo( cFilSRA , cMat , dPerIni , dPerFim ) class PonVarApon

Local cAliasQuery	:= 'RF0'
Local cAlias		:= 'RF0'
Local cFilRF0		:= ''
Local cFilMat		:= '' 
Local cOrdem		:= ''
Local dDtIni		:= Ctod('')
Local dDtFim		:= Ctod('')
Local lRet			:= .F.
Local lMemoria		:= If(::aPreAboDia <> Nil, .T., .F.)
Local nLenaPreAbo	:= 0
Local nFaixa		:= 0 
Local nHorIni		:= 0
Local nHorFim		:= 0  
Local nRecno		:= 0
Local nPos1			:= 0     
Local nLenTab		:= 0
Local nTab			:= 0
Local nX			:= 0 

DEFAULT cFilSRA		:= SRA->RA_FILIAL
DEFAULT cMat    	:= SRA->RA_MAT
DEFAULT dPerIni		:= Ctod("//")
DEFAULT dPerFim		:= Ctod("//")	 

//-- Numero de Elementos da Tabela Calendario
nLenTab :=Len(aTabCalend)

cFilRF0	:= fFilFunc('RF0')
cFilMat	:= cFilSRA + cMat

//-- Obtem o periodo de Apontamento se nao passado pelo menos uma das datas
If Empty( dPerIni ) .or. Empty( dPerFim )
	PerAponta( @dPerIni , @dPerFim )
EndIf
       
//-- Carrega array com os Periodos de Pre-Abonos
If Empty(::aPreAbo)

	cAliasQuery	:= cAlias
	
	lRet := ( cAliasQuery )->( MsSeek( cFilMat) )

	While ( cAliasQuery )->( !Eof() .and. RF0_FILIAL + RF0_MAT == cFilMat )
	 	
		If ( cAliasQuery )->( RF0_DTPREI > dPerFim ) 
	 	   Exit
	 	EndIf
	 	   
	 	//-- Descarta Faixas Nao Compreendidas pelo Periodo de Apontamento ou
	 	//-- Jah utilizadas
	 	If ( cAliasQuery )->(  (RF0_DTPREF < dPerIni ) )
		 	( cAliasQuery )->( dbSkip() )	 	
		 	Loop
	 	EndIf
	 	
		nRecno := ( cAliasQuery )->( Recno() )

	 	/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Para Horas Zeradas assume Horario da Tabela Padrao 		  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	 	//-- Trata data inicial 
 	    dDtIni	:= Max(( cAliasQuery )->RF0_DTPREI, dPerIni) 
 	    nHorIni	:= ( cAliasQuery )->RF0_HORINI
 	    nHorFim	:= ( cAliasQuery )->RF0_HORFIM
 	    //-- Trata Hora Inicial. Para Hora Zerada Assume Tabela.
 	     If Empty(( cAliasQuery )->RF0_HORINI) .and. !(::lMovelFree)
 	       IF ( nPos1 := aScan( ::aTabCalend, { |x| x[CALEND_POS_DATA] == dDtIni .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0
				nHorIni :=::aTabCalend[ nPos1 , CALEND_POS_HORA ] 
 	       EndIf
 	    EndIf
		//-- Trata data final
 	    dDtFim:= ( cAliasQuery )->RF0_DTPREF                     
   	 	//-- Trata Hora final. Para Hora Zerada Assume Tabela.
 	    If Empty(( cAliasQuery )->RF0_HORFIM) .and. !(::lMovelFree)
 	       //-- Procura pela Ordem da ultima data do Periodo de PreAbono
				If ( nPos1 := aScan( ::aTabCalend, { |x| x[CALEND_POS_DATA] == dDtFim .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0
					cOrdem  := ::aTabCalend[ nPos1 , CALEND_POS_ORDEM ] 
					nPos1 	:= aScan(::aTabCalend , { |x|;
														( x[ CALEND_POS_ORDEM ] == cOrdem );
														.and.;
														!Empty( x[ CALEND_POS_LIM_MARCACAO , 01 ] );
														.and.;
														( x[ CALEND_POS_TIPO_MARC ] <> "1E" );
													},;
													++nPos1;
												)
					//-- Obtem a Ultima marcacao do Dia
					If nPos1 > 0
						dDtFim	:= ::aTabCalend[ nPos1 , CALEND_POS_DATA ] 
						nHorFim := ::aTabCalend[ nPos1 , CALEND_POS_HORA ]
					EndIf
				EndIf 
			EndIf
        
        //-- Adiciona Periodos de Pre-Abonos 
		( cAliasQuery )->( aAdd( ::aPreAbo, { RF0_CODABO, dDtIni, nHorIni, dDtFim, nHorFim, nRecno } ) )
	 	
	 	( cAliasQuery )->( dbSkip() )
	End While

	lRet := !Empty( ::aPreAbo )
	
EndIf

//-- Carrega Horarios do Periodo em aPreAboDia (Geralmente de um dia) a partir do array aPreAbo
If lMemoria      

   ::aPreAboDia		:={}
   nLenaPreAbo		:=Len(::aPreAbo)                    
   
   nFaixa			:=1
   
   //-- Quando for uma data especifica
   If dPerIni == dPerFim
      //-- Localiza a faixa requisitada. A data devera estar entre os dias de um periodo
      nFaixa:= aScan( ::aPreAbo, { |aFaixa| aFaixa[2] <= dPerini .AND. aFaixa[4] >= dPerIni  } )
   EndIf
   
   //--Percorre todas as Faixas     
   If !Empty(nFaixa)
   	   Do While nFaixa <= nLenaPreAbo                                                    
   	        //-- Se o Inicio da Faixa for superior ao fim do periodo ou
   	        //-- Se o Fim da Faixa for inferior ao inicio do periodo
   	        //-- Descarta a faixa
	        If ( ::aPreAbo[nFaixa, 02 ] > dPerFim ) .or. ( ::aPreAbo[ nFaixa, 04 ] < dPerIni ) 
	           nFaixa++
	           Loop
	        EndIf
	        
	        //-- Armazenas as faixas seleciondas para o periodo solicitado   
            aAdd( ::aPreAboDia, { ::aPreAbo[ nFaixa, 01 ],	::aPreAbo[ nFaixa, 02 ] , ::aPreAbo[ nFaixa, 03 ] ,;
	       						 							::aPreAbo[ nFaixa, 04 ] , ::aPreAbo[ nFaixa, 05 ], ::aPreAbo[ nFaixa, 06 ]  } ) 
	        nFaixa++
	   Enddo
   EndIf

   lRet := !Empty( ::aPreAboDia )    

EndIf

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³AddPerHr    ³ Autor ³Mauricio MR           ³ Data ³26/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula Horas e Adiciona Periodo ao Array de Horarios de Apon³
³          ³tamentos conforme Parametros Informados.                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³AddPerHr(Parametros)										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet 								                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method AddPerHr(    nIdDiaApo	,;  //01 -> Identificador do Elemento Diurno no Apo
                    nIdNotApo	,;  //02 -> Identificador do Elemento Noturno no Apo
                    nPosElem	,;  //03 -> Posicao no Elemento do Identificador
                    aApoHr		,;  //04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
                    dDt1		,;	//05 -> Data 1
					nHr1		,;	//06 -> Hora 1
					dDt2		,;	//07 -> Data 2
					nHr2		,;	//08 -> Hora 2
					nHoras		,;	//09 -> <@>Horas Normais Apontadas
					nHorasNot	,;	//10 -> <@>Horas Noturnas Apontadas
					lNoturno	,;	//11 -> Apontar Horas Noturnas
					dDtIni		,;	//12 -> Data Inicial Para a Hora Noturna
					nHrAcNot	,;	//13 -> <@>Horas de Acrescimo Noturno
					nIniHnot	,;	//14 -> Inicio do Horario Noturno
					nFimHnot	,;	//15 -> Final do Horario Noturno
					nMinHnot	,;	//16 -> Minutos do Horario Noturno
					lAcreNot	,;	//17 -> Apenas Acrescimo Noturno
					aPerNot		,;	//18 -> Periodo Horario Noturno
					aPerDia		,;	//19 -> Periodo Horario Diurno 
					lSoma		,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
					lNewAddHor	;   //21 -> Adiciona Periodo como Novo Elemento
				) class PonVarApon

Local aPer			:= {} 
                       
Local nHorasCalc	:= 0
Local lAcrescPer    := ( ::aApoHr <> Nil  ) 
Local lIdPer		:= ( aPerDia <> Nil )

DEFAULT lSoma 		:= .F.
DEFAULT lNewAddHor 	:= .F.

aPerDia:= If(::lRF0ChkTable, aPerDia, NIL)  

nHorasCalc	:=	::CalcPerHr(	dDt1		,;	//01 -> Data 1
								nHr1		,;	//02 -> Hora 1
								dDt2		,;	//03 -> Data 2
								nHr2		,;	//04 -> Hora 2
								@nHoras		,;	//05 -> <@>Horas Normais Apontadas
								@nHorasNot	,;	//06 -> <@>Horas Noturnas Apontadas
								lNoturno	,;	//07 -> Apontar Horas Noturnas
								dDtIni		,;	//08 -> Data Inicial Para a Hora Noturna
								@nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno 
								nIniHnot	,;	//10 -> Inicio do Horario Noturno
								nFimHnot	,;	//11 -> Final do Horario Noturno
								nMinHnot	,;	//12 -> Minutos do Horario Noturno
								lAcreNot	,;	//13 -> Apenas Acrescimo Noturno
								@aPerNot	,;	//14 -> Periodo Horario Noturno 
								@aPerDia	;	//15 -> Periodo Horario Diurno
					 		)

If ::lRF0ChkTable

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se nao Identifica Periodos assume o Horario Passado 		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
	If !lIdPer
	   aPer:=  		{{	dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2        ,;  //04 -> Hora 2  
						''			;   //05 -> Tipo Periodo ("D"iurno ou "N"oturno)
					}} 
		If lAcrescPer
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Acrescenta Periodos Diurnos e Noturnos no ID Informado	  ³
			³ Diurno ou Noturno MUTUAMENTE EXCLUSIVOS					  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/		                 
		       
			If nIdDiaApo <> Nil
				::PutPer(	nIdDiaApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPer		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Else
				::PutPer(	nIdNotApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPer		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Endif					
		Endif	
	Else
	 
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Acrescenta Periodos Diurnos e Noturnos nos IDs Informados	  ³
		³ Diurno e Noturno SIMULTANEAMENTE							  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	  
		If lAcrescPer
		                  
		  	If nIdDiaApo <> Nil
				::PutPer(	nIdDiaApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPerDia		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Endif
			
			If nIdNotApo <> Nil		
				::PutPer(	nIdNotApo	,;  //01 -> Identificador do Elemento no Apo
				            nPosElem	,;  //02 -> Posicao no Elemento do Identificador
				            aPerNot		,;	//04 -> Array de Periodos 
				            lNewAddHor   ;  //05 -> Adiciona Periodos em aApoHr
				       ) 
			Endif	
				        	  
	    Endif
	Endif
Endif	
	
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ ADICIONA as Horas CALCULADAS conforme tipos passados  	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
If lSoma
	If nIdDiaApo <> Nil	.AND. nIdNotApo <> Nil	
		If (!Empty(aPerNot) .And. Empty(aPerDia)) .Or. (DataHora2Str( dDt2 , nFimHnot ) >= DataHora2Str( dDt2 , nHr2 ))
			If ::lSepAcrNot .And. !::lMovelFree
				::aApo[nIdNotApo, nPosElem] := SomaHoras(::aApo[nIdNotApo,nPosElem], nHorasNot)
			Else
				::aApo[nIdNotApo, nPosElem] := SomaHoras(::aApo[nIdNotApo,nPosElem], (nHrAcNot + If(nHorasNot == 0, nHoras,nHorasNot)))
			EndIf
		Else
			::aApo[nIdDiaApo, nPosElem]:= SomaHoras(::aApo[nIdDiaApo,nPosElem], nHoras)
		EndIf
	ElseIf nIdDiaApo <> Nil 
		If !lIdPer
			::aApo[nIdDiaApo, nPosElem]:= SomaHoras(::aApo[nIdDiaApo,nPosElem], nHorasCalc) 							  
		Else 
			::aApo[nIdDiaApo, nPosElem]:= SomaHoras(::aApo[nIdDiaApo,nPosElem], nHoras)     
		Endif	 
	Else 
		If !lIdPer
			::aApo[nIdNotApo, nPosElem]:= SomaHoras(::aApo[nIdNotApo,nPosElem], nHorasCalc) 
		Else 
			::aApo[nIdNotApo, nPosElem]:= SomaHoras(::aApo[nIdNotApo,nPosElem], (nHorasNot + If(nHrAcNot <> NIL, nHrAcNot, 0)))
		Endif	  
	Endif	
   		
Else 

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ SUBSTITUI as Horas pelas CALCULADAS conforme tipos passados ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
   //-- Substitui pelas Horas Calculadas  
	If nIdDiaApo <> Nil	.AND. nIdNotApo <> Nil	
		::aApo[nIdDiaApo, nPosElem]:=  nHoras     
		If ::lSepAcrNot  .And. !::lMovelFree
			::aApo[nIdNotApo, nPosElem]:=  nHorasNot
		Else
			::aApo[nIdNotApo, nPosElem]:=  nHorasNot + If(nHrAcNot <> NIL, nHrAcNot, 0)
		EndIf
	ElseIf nIdDiaApo <> Nil	
		If !lIdPer
			::aApo[nIdDiaApo, nPosElem]:=  nHorasCalc 							  
		Else 
			::aApo[nIdDiaApo, nPosElem]:=  nHoras            
		Endif	  
	Else 
		If !lIdPer
			::aApo[nIdNotApo, nPosElem]:=  nHorasCalc
		Else
			::aApo[nIdNotApo, nPosElem]:=  nHorasNot + If(nHrAcNot <> NIL, nHrAcNot, 0)
		Endif   
	Endif

Endif    							     
              
return( nHorasCalc )
       
/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³CalcPerHr   ³ Autor ³Mauricio MR           ³ Data ³26/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula Horas e Obtem Periodo Diurno					     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³CalcPerHr(Parametros)										 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet 								                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method CalcPerHr(	dDt1		,;	//01 -> Data 1
					nHr1		,;	//02 -> Hora 1
					dDt2		,;	//03 -> Data 2
					nHr2		,;	//04 -> Hora 2
					nHoras		,;	//05 -> <@>Horas Normais Apontadas
					nHorasNot	,;	//06 -> <@>Horas Noturnas Apontadas
					lNoturno	,;	//07 -> Apontar Horas Noturnas
					dDtIni		,;	//08 -> Data Inicial Para a Hora Noturna
					nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno 
					nIniHnot	,;	//10 -> Inicio do Horario Noturno
					nFimHnot	,;	//11 -> Final do Horario Noturno
					nMinHnot	,;	//12 -> Minutos do Horario Noturno
					lAcreNot	,;	//13 -> Apenas Acrescimo Noturno
					aPerNot		,;	//14 -> Periodo Horario Noturno 
					aPerDia		;	//15 -> Periodo Horario Diurno
				 ) class PonVarApon
	  	
Local nHorasCalc

nHorasCalc := fCalHoras(	dDt1				,;	//01 -> Data 1
			  				nHr1				,;	//02 -> Hora 1
							dDt2				,;	//03 -> Data 2
							nHr2				,;	//04 -> Hora 2
							@nHoras				,;	//05 -> <@>Horas Normais Apontadas
							@nHorasNot			,;	//06 -> <@>Horas Noturnas Apontadas
							lNoturno			,;	//07 -> Apontar Horas Noturnas
							dDtIni				,;	//08 -> Data Inicial Para a Hora Noturna  
							@nHrAcNot			,;	//09 -> <@>Horas de Acrescimo Noturno  								
							nIniHnot			,;	//10 -> Inicio do Horario Noturno
	   						nFimHnot			,;	//11 -> Final do Horario Noturno
   							nMinHnot			,;	//12 -> Minutos do Horario Noturno
	   						lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot	 		;	//14 -> Periodo da Hora Noturna
						  )

If aPerDia <> Nil 

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Obtem Periodo Diurno					 			 		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
	::GetPerDia(	dDt1		,;	//01 -> Data 1
					nHr1		,;	//02 -> Hora 1
					dDt2		,;	//03 -> Data 2
					nHr2		,;	//04 -> Hora 2				
					aPerNot		,;	//05 -> Periodo da Hora Noturna
					@aPerDia	 ;	//06 -> Periodo da Hora Diurna
			  ) 

Endif

return( nHorasCalc )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³GetPerDia   ³ Autor ³Mauricio MR           ³ Data ³27/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Identifica Periodo Diurno de um Horario					     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GetPerDia(Parametros)			    						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil 								                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method GetPerDia( dDt1 , nHr1 , dDt2 , nHr2 , aPerNot , aPerDia ) class PonVarApon

Local cIniTurno		:= ''
Local cFimTurno		:= ''
Local cIniNot		:= ''
Local cFimNot		:= ''
Local aHorasCalc	:= {}

DEFAULT aPerDia		:= {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Identifica Periodo Diurno							 		  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
 //-- Se solicitado registro de horario noturno         
If aPerNot <> Nil     
   cIniTurno := DataHora2Str( dDt1,  nHr1)
   cFimTurno := DataHora2Str( dDt2,  nHr2)
   //-- Se ocorreu horario noturno
   If !Empty(aPerNot) 
      cIniNot	:= DataHora2Str( aPerNot[1,1],  aPerNot[1,2] ) 	      
 	  cFimNot	:= DataHora2Str( aPerNot[1,3],  aPerNot[1,4] ) 	      
      //-- Se horario inicial noturno > de inicio do turno e final noturno == final turno
      //-- Se horario inicial noturno > de inicio do turno e final noturno < final turno
      If ( cIniNot > cIniTurno )
		 If ( cFimNot == cFimTurno )
			 //-- Retorna horario diurno LIMITADO AO INICIO DO NOTURNO
	 	    aHorasCalc	:= RetIniTab( aPerNot[1,1] ,  aPerNot[1,2] , 0.00 )  					         
		    aPerDia		:={{	dDt1						,;	//01 -> Data 1
								nHr1						,;	//02 -> Hora 1
								aHorasCalc[1]				,;	//03 -> Data 2
								aHorasCalc[2]				,;	//04 -> Hora 2 
								cIniTurno					,;
								DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ;						
							};
						   }		
         ElseIf ( cFimNot < cFimTurno )	         
				//-- Retorna horario diurno LIMITADO AO INICIO DO NOTURNO
		        aHorasCalc	:= RetIniTab( aPerNot[1,1] ,  aPerNot[1,2] , 0.00 )  					         
			    aPerDia:=  	{{	dDt1						,;	//01 -> Data 1
								nHr1						,;	//02 -> Hora 1
								aHorasCalc[1]				,;	//03 -> Data 2
								aHorasCalc[2]				,;	//04 -> Hora 2 
								cIniTurno					,;
								DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ;						 
							}}                                            
				//-- Adiciona horario Diurno Complementar ao FINAL DO NOTURNO
				aHorasCalc	:= RetFimTab( aPerNot[1,3] ,  aPerNot[1,4] , 0.01 )  
												 
				aAdd(aPerDia,{	aHorasCalc[1]			,;	//01 -> Data 1
								aHorasCalc[2]			,;	//02 -> Hora 1
								dDt2					,;	//03 -> Data 2
								nHr2					,;	//04 -> Hora 2  
								DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ,;						 
								cFimTurno				;
						     }							;
					)	     
         Endif
      ElseIf ( cIniNot == cIniTurno )
      	  //-- Se horario inicial noturno = ao inicio do turno e final noturno == final turno
		  //-- Se horario inicial noturno = ao inicio do turno e final noturno < final turno
          If ( cFimNot == cFimTurno )	         
              //-- Horario Realizado NOTURNO
        	  aPerDia:= {}
          ElseIf ( cFimNot < cFimTurno )	         
                //-- Retorna horario diurno LIMITADO AO FIM DO NOTURNO
		        aHorasCalc	:= RetIniTab( aPerNot[1,1] ,  aPerNot[1,2] , 0.00 )  					         
				    aPerDia	:= {{	aHorasCalc[1]	,;	//01 -> Data 1
									aHorasCalc[2]	,;	//02 -> Hora 1
									dDt2			,;	//03 -> Data 2
									nHr2			,;	//04 -> Hora 2 
									DataHora2Str(aHorasCalc[1],	aHorasCalc[2]) ,;						 
									cFimTurno		; 
							    }} 
          Endif
      Endif    
   Else  
        //-- Retorna horario diurno
	    aPerDia:=  	{{	dDt1		,;	//01 -> Data 1
						nHr1		,;	//02 -> Hora 1
						dDt2		,;	//03 -> Data 2
						nHr2		,;	//04 -> Hora 2  
						cIniTurno 	,;						
					    cFimTurno 	;
					}}
   Endif
Else
   //-- Retorna horario diurno
   aPerDia:=  	{{	dDt1		,;	//01 -> Data 1
					nHr1		,;	//02 -> Hora 1
					dDt2		,;	//03 -> Data 2
					nHr2		,;	//04 -> Hora 2 
					cIniTurno 	,;						
				    cFimTurno 	; 
				}}
Endif             

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³PutPer      ³ Autor ³Mauricio MR           ³ Data ³27/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Adiciona ou Substitui Periodos para um Horari			     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PutPer(Parametros)			    							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil 								                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method PutPer( nIdApo , nPosElem , aPer , lNewAdd ) class PonVarApon

Local nI		:= 0
Local nLenaPer	:= Len(aPer)
 
For nI:=1 To nLenaPer
	//-- Se Existir Horario para Acrescentar
	If !Empty(aPer[nI])
		If lNewAdd
			//-- Adiciona Periodo de Horas
			If Empty(::aApoHr[nIdApo,nPosElem])
				::aApoHr[nIdApo,nPosElem] := {aClone( aPer[nI] )} 
			Else
				aAdd(  ::aApoHr[nIdApo,nPosElem], aClone( aPer[nI] )  )  
			Endif	
		Else 
	    	//-- Substitui Periodo de Horas 
	    	::aApoHr[nIdApo,nPosElem] := {aClone( aPer[nI] )} 
		Endif
	Endif
Next nI

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³AlocaPer    ³ Autor ³Mauricio MR           ³ Data ³30/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Aloca Horarios de Um Apontamento para Outro (Copia)		     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³AlocaPer(Parametros)			   							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil 								                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method AlocaPer(nIdOrigem, nItOrigem, nIdDestino, nItDestino, lAddNew) 	class PonVarApon

//-- UM ou outro ITEM passado serve de padrao para outro
DEFAULT nItOrigem	:= nItDestino
DEFAULT nItDestino	:= nItOrigem

//-- Aloca Horarios de Apontamento entre os Elementos passados 
::PutPer(	nIdDestino								,;  //01 -> Identificador do Elemento no Apo
            nItDestino								,;  //02 -> Posicao no Elemento do Identificador
            aClone(::aApoHr[nIdOrigem, nItOrigem]) ,;
            lAddNew								 	;
        )

return( NIL )    

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³method    ³IdPreAbo	³ Autor ³Mauricio MR           ³ Data ³03/05/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Identifica os Horarios e Calcula as Horas Abonadas			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais> 									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nHorTot (Total de Horas Abonadas)                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method IdPreAbo(  		dDtGer								,;	//01 -> Data da Geracao
						nIdentificador						,;  //02 -> Elemento do Apontamento
						nIndice								,;  //03 -> Item do Elemento
						cEvento								,;	//04 -> Codigo do Evento
						cCustoGrv							,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc							,;	//06 -> Tipo de Marcacao
						lAcumula							,;	//07 -> True para Acumular as Horas
						cPerApur							,;	//08 -> Periodo de Apuracao
						nTolera								,;	//09 -> Tolerancia
						cTipoArred				 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					   	cFuncao								,;  //11 -> Funcao a ser Gravada 
					    cDepto								,;  //12 -> Depto a ser gravado
						cPosto								,;  //13 -> Posto a ser gravado	
						cProcesso			  				,;  //14 -> Processo a ser gravado
						cPeriodo							,;  //15 -> Periodo  a ser gravado
						cRoteiro 							,;  //16 -> Roteiro  a ser gravado
						cNumPagto							,;  //17 -> NumPagto a ser gravado
						cTnoCalend							,;  //18 -> Turno de Trabalho
						cSeqTno								,;  //19 -> Semana/Sequencia do Turno
						lHrNr								,;	//20 -> Horas nao realizadas (atrado/saida antecipada)
						aHrNReal                            ,;  //21 -> Array com as horas nao realizadas
						cIdentPont                          ,;  //22 -> Identificador do ponto
						aSvtree                        	     ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
					  ) class PonVarApon					  

Local aHoras	:= {} 
Local aHrAbono	:= {}
Local cCodAbo	:= ''
Local cLimIni	:= '' 
Local cLimFim	:= '' 
Local cHorIni	:= ''
Local cHorFim	:= '' 
Local cHrIniInt	:= '' 
Local cHrFimInt	:= '' 
Local cHrIniAbo	:= '' 
Local cHrFimAbo	:= '' 
Local nHoras	:= 0   
Local nHorasM	:= 0   
Local nHorTot	:= 0 
Local nTolhEvt	:= 0
Local nPosSvTre	:= 0
Local nPosResAbo:= 0
Local nPosSI1	:= 0
Local nPosSI2	:= 0
Local nPosSI3	:= 0
Local nPosEI1	:= 0
Local nPosEI2	:= 0
Local nPosEI3	:= 0


//-- Controle de Loop
Local nApoHr	:= 0
Local nX		:= 0  
Local nPreAbo	:= 0
Local nY		:= 0
Local nI		:= 0
Local nZ		:= 0
Local lSubstitui:= .F.
Local lTemTolSai:= .F.
Local lInt1		:= .F.
Local lInt2		:= .F.
Local lInt3		:= .F.
Local nPosPKDat	:= 0

DEFAULT lHrNr		:= .F.
DEFAULT cIdentPont	:= ""
DEFAULT	aSvtree		:= {}

If (::lRF0ChkTable)
	
	aHoras 	:= aClone(::aApoHr[nIdentificador, nIndice])
	nApoHr	:=Len(aHoras)
	nPreAbo	:=Len(::aPreAboDia)
	
	//-- Corre todos os Horarios que Geraram o Apontamento
	For nX:=1 To nApoHr 
		
		//-- Converte Limites dos Horarios que geraram o Apontamento
		cHorIni := DataHora2Str( aHoras[nX, 1], aHoras[nX, 2] )
		cHorFim := DataHora2Str( aHoras[nX, 3], aHoras[nX, 4] )
		
		//-- Corre Todas as Faixas de Pre-Abonos do Dia 
		For nY := 1 to nPreAbo                   
		    //-- Codigo do Abono
			cCodAbo	:= 	::aPreAboDia[nY, 1]
			//-- Converte Limites dos Horarios de Pre-Abonos
			cLimIni := DataHora2Str( ::aPreAboDia[nY, 2], ::aPreAboDia[nY, 3] )
			cLimFim := DataHora2Str( ::aPreAboDia[nY, 4], ::aPreAboDia[nY, 5] )
			
			If(::lMovelFree) .AND. ::aPreAboDia[nY,3] == 0 .AND. ::aPreAboDia[nY,5] == 0
				// Calcula a Qtde de Horas entre a Hora inicial e Final da Marcacao 
				nHoras:= fCalHoras(	aHoras[nX, 1]		,;
										aHoras[nX, 2]		,;
										aHoras[nX, 3]		,;
										aHoras[nX, 4]		,;
										NIL     			,;	//05 -> <@>Horas Normais Apontadas
										NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
										::lHnotFal			,;	//07 -> Apontar Horas Noturnas
										aHoras[nX, 1]		,;	//08 -> Data Inicial Para a Hora Noturna
										NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
										::nIniHnot			,;	//10 -> Inicio do Horario Noturno
										::nFimHnot			,;	//11 -> Final do Horario Noturno
										::nMinHnot			,;	//12 -> Minutos do Horario Noturno
										NIL     			,;	//13 -> Apenas Acrescimo Noturno
										NIL					 ;	//14 -> Periodo da Hora Noturna
									)  
				
				aAdd(aHrAbono,{ cCodAbo, nHoras, aHoras[nX, 1],  aHoras[nX, 2], aHoras[nX, 3], aHoras[nX, 4], ::aPreAboDia[nY, 6] })
				
			ElseIf (::lMovelFree)
				
				nPosSI1 := aScan(::aHoras, {|x| x[10] == "SI"})
				nPosEI1 := aScan(::aHoras, {|x| x[10] == "EI"})
				
				lInt1 := If( nPosSI1 > 0 .and. nPosEI1 > 0, .T., .F. )
				
				If lInt1
					nPosSI2 := aScan(::aHoras, {|x| x[10] == "SI"},nPosSI1+1)
					nPosEI2 := aScan(::aHoras, {|x| x[10] == "EI"},nPosEI1+1)
					nPosSI3 := aScan(::aHoras, {|x| x[10] == "SI"},nPosSI2+1)
					nPosEI3 := aScan(::aHoras, {|x| x[10] == "EI"},nPosEI2+1)
				EndIf
				
				//--Verifica quantidade de intervalos
				lInt2 := If( nPosSI2 > 0 .and. nPosEI2 > 0, .T., .F. )
				lInt3 := If( lInt2 .And. nPosSI3 > 0 .and. nPosEI3 > 0, .T., .F. )
				
				nHoras := fCalHoras(::aPreAboDia[nY, 2],;
									::aPreAboDia[nY, 3],;
									::aPreAboDia[nY, 4]	,;
									::aPreAboDia[nY, 5],;
									NIL     			,;	//05 -> <@>Horas Normais Apontadas
									NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
									::lHnotFal			,;	//07 -> Apontar Horas Noturnas
									::aPreAboDia[nY, 2]	,;	//08 -> Data Inicial Para a Hora Noturna
									NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
									::nIniHnot			,;	//10 -> Inicio do Horario Noturno
									::nFimHnot			,;	//11 -> Final do Horario Noturno
									::nMinHnot			,;	//12 -> Minutos do Horario Noturno
									NIL     			,;	//13 -> Apenas Acrescimo Noturno
									NIL					 ;	//14 -> Periodo da Hora Noturna
								)
				
				cHrIniAbo := DataHora2Str(::aPreAboDia[nY, 2],::aPreAboDia[nY, 3])
				cHrFimAbo := DataHora2Str(::aPreAboDia[nY, 4],::aPreAboDia[nY, 5])
				
				If lInt1
					cHrIniInt := DataHora2Str(::aHoras[nPosSI1, 1],::aHoras[nPosSI1, 2])
					cHrFimInt := DataHora2Str(::aHoras[nPosEI1, 1],::aHoras[nPosEI1, 2])
					If (cHrIniInt >= cHrIniAbo .And. cHrIniInt <= cHrFimAbo) .And. (cHrFimInt >= cHrIniAbo .And. cHrFimInt <= cHrFimAbo)
						nHoras := SubHoras(nHoras,::aHoras[nPosSI1, 9])
					EndIf
				EndIf
				
				If lInt2
					cHrIniInt := DataHora2Str(::aHoras[nPosSI2, 1],::aHoras[nPosSI2, 2])
					cHrFimInt := DataHora2Str(::aHoras[nPosEI2, 1],::aHoras[nPosEI2, 2])
					If (cHrIniInt >= cHrIniAbo .And. cHrIniInt <= cHrFimAbo) .And. (cHrFimInt >= cHrIniAbo .And. cHrFimInt <= cHrFimAbo)
						nHoras := SubHoras(nHoras,::aHoras[nPosSI2, 9])
					EndIf
				EndIf
				
				If lInt3
					cHrIniInt := DataHora2Str(::aHoras[nPosSI3, 1],::aHoras[nPosSI3, 2])
					cHrFimInt := DataHora2Str(::aHoras[nPosEI3, 1],::aHoras[nPosEI3, 2])
					If (cHrIniInt >= cHrIniAbo .And. cHrIniInt <= cHrFimAbo) .And. (cHrFimInt >= cHrIniAbo .And. cHrFimInt <= cHrFimAbo)
						nHoras := SubHoras(nHoras,::aHoras[nPosSI3, 9])
					EndIf
				EndIf
				
				// Calcula a Qtde de Horas entre a Hora inicial e Final da Marcacao 
				nHorasM := fCalHoras(	aHoras[nX, 1]		,;
										aHoras[nX, 2]		,;
										aHoras[nX, 3]		,;
										aHoras[nX, 4]		,;
										NIL     			,;	//05 -> <@>Horas Normais Apontadas
										NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
										::lHnotFal			,;	//07 -> Apontar Horas Noturnas
										aHoras[nX, 1]		,;	//08 -> Data Inicial Para a Hora Noturna
										NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
										::nIniHnot			,;	//10 -> Inicio do Horario Noturno
										::nFimHnot			,;	//11 -> Final do Horario Noturno
										::nMinHnot			,;	//12 -> Minutos do Horario Noturno
										NIL     			,;	//13 -> Apenas Acrescimo Noturno
										NIL					 ;	//14 -> Periodo da Hora Noturna
									)
				
				// Adicionar uma nova posição no ::aPreAboDia para controlar o quando do abono já foi "Gasto"
				If Len(::aPreAboDia[nY]) < 7
					aEval(::aPreAboDia, {|x| Aadd(x, 0) })
				EndIf
				
				// Adicionar uma nova posição no aHoras para controlar o quando do evento já foi abonado
				If Len(aHoras[nX]) < 6 
					aEval( aHoras, {|x| Aadd(x, 0) })
				EndIf
				
				If !Empty(::aPreAboDia[nY, 7]) // Se o abono já foi utilizado
					nHoras := SubHoras(nHoras, ::aPreAboDia[nY, 7]) // abate as horas utilizadas
				EndIf
				
				If !Empty(aHoras[nX, 6]) // Se o evento já foi abonado parcialmente ou total
					nHorasM := SubHoras(nHorasM, aHoras[nX, 6]) // abate as horas abonadas
				EndIf
				
				// As horas abonadas não podem ser maiores que as horas do evento
				nHoras := Min(nHoras, nHorasM)
				
				If nHoras > 0
					// Atualiza as horas que foram abonadas
					::aPreAboDia[nY, 7] := SomaHoras(::aPreAboDia[nY, 7], nHoras)
					aHoras[nX, 6] := SomaHoras(aHoras[nX, 6], nHoras)
				Else
					LOOP // O abono já foi completamente utilizado ou o evento já foi completamente abonado
				EndIf
				
				aAdd(aHrAbono, {cCodAbo, nHoras, aHoras[nX, 1],  aHoras[nX, 2], aHoras[nX, 3], aHoras[nX, 4], ::aPreAboDia[nY, 6] })
				
			ElseIf !::lMovelFree .AND. ::aPreAboDia[nY,3] == 0 .AND. ::aPreAboDia[nY,5] == 0
				// Calcula a Qtde de Horas entre a Hora inicial e Final da Marcacao 
				nHoras:= fCalHoras(	aHoras[nX, 1]		,;
										aHoras[nX, 2]		,;
										aHoras[nX, 3]		,;
										aHoras[nX, 4]		,;
										NIL     			,;	//05 -> <@>Horas Normais Apontadas
										NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
										::lHnotFal			,;	//07 -> Apontar Horas Noturnas
										aHoras[nX, 1]		,;	//08 -> Data Inicial Para a Hora Noturna
										NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
										::nIniHnot			,;	//10 -> Inicio do Horario Noturno
										::nFimHnot			,;	//11 -> Final do Horario Noturno
										::nMinHnot			,;	//12 -> Minutos do Horario Noturno
										NIL     			,;	//13 -> Apenas Acrescimo Noturno
										NIL					 ;	//14 -> Periodo da Hora Noturna
									)  
				
				aAdd(aHrAbono,{ cCodAbo, nHoras, aHoras[nX, 1],  aHoras[nX, 2], aHoras[nX, 3], aHoras[nX, 4], ::aPreAboDia[nY, 6] })
			Else
				
				// 1)   Desconsidera Horarios que:
				//	 a) Terminam antes da faixa de Pre-Abono ou
				//   b) Iniciam depois da faixa de Pre-Abono
				//   c) Foram deletados na tela de abonos
				
				If !Empty(aSvtree)
					If ( nPosPKDat := aScan( aSvtree[G_ABO, G_HEADER], { |x| AllTrim(x[2]) == "PK_DATA" } ) ) > 0
						nPosSvTre := aScan(aSvtree[G_ABO , G_MAIN] , {|x| x[nPosPKDat] >= ::aPreAboDia[nY, 2] .And. x[nPosPKDat] <= ::aPreAboDia[nY, 4] .And. x[aSvtree[G_ABO,G_NSVUSADO]] .And. x[nPosPKDat] == aHoras[nX,1] } )
					EndIf
				EndIf
				
				If ( (cHorFim <= cLimIni) .OR. (cHorIni >= cLimFim) ) .Or. (nPosSvTre > 0)  
					Loop
				Endif
				
				// 2) Se o Hora Inicial da Marcacao ocorrer no inicio ou apos o inicio da faixa de horarios
				// Calcula a qtde de horas entre a Hora inicial da Marcacao e a hora final da marcacao ou
				// o fim da faixa de horarios 
				If cHorIni >= cLimIni 
					// 2.1) Se a Hora Final da Marcacao ocorre  antes do fim ou no fim da faixa de horarios
					If cHorFim <= cLimFim
						// Calcula a Qtde de Horas entre a Hora inicial e Final da Marcacao 
						nHoras:= fCalHoras(	aHoras[nX, 1]		,;
											aHoras[nX, 2]		,;
											aHoras[nX, 3]		,;
											aHoras[nX, 4]		,;
											NIL     			,;	//05 -> <@>Horas Normais Apontadas
											NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
											::lHnotFal			,;	//07 -> Apontar Horas Noturnas
											aHoras[nX, 1]		,;	//08 -> Data Inicial Para a Hora Noturna
											NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
											::nIniHnot			,;	//10 -> Inicio do Horario Noturno
											::nFimHnot			,;	//11 -> Final do Horario Noturno
											::nMinHnot			,;	//12 -> Minutos do Horario Noturno
											NIL     			,;	//13 -> Apenas Acrescimo Noturno
											NIL					 ;	//14 -> Periodo da Hora Noturna
										)  
						
						aAdd(aHrAbono,{ cCodAbo, nHoras, aHoras[nX, 1],  aHoras[nX, 2], aHoras[nX, 3], aHoras[nX, 4], ::aPreAboDia[nY, 6] })
					Else
					// 2.2) Se a Hora Final da Marcacao ocorre apos o fim da faixa de horarios
						// Calcula a Qtde de Horas entre aHora Inicial da Marcacao e o fim da Faixa 
						nHoras:= fCalHoras(	aHoras[nX, 1]		,;
											aHoras[nX, 2]		,;
											::aPreAboDia[nY, 4]	,;
											::aPreAboDia[nY, 5]	,;
											NIL     			,;	//05 -> <@>Horas Normais Apontadas
											NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
											::lHnotFal			,;	//07 -> Apontar Horas Noturnas
											aHoras[nX, 1]		,;	//08 -> Data Inicial Para a Hora Noturna
											NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
											::nIniHnot			,;	//10 -> Inicio do Horario Noturno
											::nFimHnot			,;	//11 -> Final do Horario Noturno
											::nMinHnot			,;	//12 -> Minutos do Horario Noturno
											NIL     			,;	//13 -> Apenas Acrescimo Noturno
											NIL					 ;	//14 -> Periodo da Hora Noturna
										)   				  
						
						aAdd(aHrAbono,{ cCodAbo, nHoras, aHoras[nX, 1],  aHoras[nX, 2], ::aPreAboDia[nY, 4], ::aPreAboDia[nY, 5], ::aPreAboDia[nY, 6] })
					Endif  
				// 3) Se a Hora Inicial da Marcacao ocorre antes do Inicio da faixa de horarios
				// Calcula a Qtde de horas entre o inicio da Faixa e a hora final da marcacao ou 
				// o fim da faixa de horarios
				ElseIf (cHorIni < cLimIni) .AND. (cHorFim > cLimIni) 
					


					If cHorFim >= cLimFim
					// 3.1) Se a Hora Final da Marcacao ocorre no fim ou apos o fim da faixa de horarios
						//  Calcula a Qtde de Horas entre o inicio da Faixa e o Fim da Faixa
						nHoras:=fCalHoras(	::aPreAboDia[nY, 2],;
											::aPreAboDia[nY, 3],;
											::aPreAboDia[nY, 4]	,;
											::aPreAboDia[nY, 5],;
											NIL     			,;	//05 -> <@>Horas Normais Apontadas
											NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
											::lHnotFal			,;	//07 -> Apontar Horas Noturnas
											::aPreAboDia[nY, 2]	,;	//08 -> Data Inicial Para a Hora Noturna
											NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
											::nIniHnot			,;	//10 -> Inicio do Horario Noturno
											::nFimHnot			,;	//11 -> Final do Horario Noturno
											::nMinHnot			,;	//12 -> Minutos do Horario Noturno
											NIL     			,;	//13 -> Apenas Acrescimo Noturno
											NIL					 ;	//14 -> Periodo da Hora Noturna
										)  
					
						aAdd(aHrAbono,{cCodAbo, nHoras, ::aPreAboDia[nY, 2], ::aPreAboDia[nY, 3], ::aPreAboDia[nY, 4], ::aPreAboDia[nY, 5],  ::aPreAboDia[nY, 6] })			       				    
					// 3.2) Se a Hora Final da Marcacao ocorre  antes do fim da faixa de horarios
					ElseIf cHorFim < cLimFim 
						// Calcula a Qtde de Horas entre o inicio da Faixa e a Hora Final da Marcacao
						nHoras:=fCalHoras(	::aPreAboDia[nY, 2]	,;
											::aPreAboDia[nY, 3],;
											aHoras[nX, 3]		,;
											aHoras[nX, 4]		,;
											NIL     			,;	//05 -> <@>Horas Normais Apontadas
											NIL      			,;	//06 -> <@>Horas Noturnas Apontadas
											::lHnotFal			,;	//07 -> Apontar Horas Noturnas
											::aPreAboDia[nY, 2]	,;	//08 -> Data Inicial Para a Hora Noturna
											NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
											::nIniHnot			,;	//10 -> Inicio do Horario Noturno
											::nFimHnot			,;	//11 -> Final do Horario Noturno
											::nMinHnot			,;	//12 -> Minutos do Horario Noturno
											NIL     			,;	//13 -> Apenas Acrescimo Noturno
											NIL					 ;	//14 -> Periodo da Hora Noturna
										)  
										
						aAdd(aHrAbono,{cCodAbo, nHoras, ::aPreAboDia[nY, 2], ::aPreAboDia[nY, 3], aHoras[nX, 3],  aHoras[nX, 4], ::aPreAboDia[nY, 6] } )			       
					Endif
				Endif 
			Endif                  
			
			//-- Acumula as Horas Calculadas
			nHorTot := SomaHoras( nHorTot, nHoras )
			
		Next nY
	Next nX	
	
	If !Empty(nHorTot)
		
		fGeraResAbo( 	dDtGer						,;	//01 -> Data da Geracao
						cEvento						,;	//02 -> Codigo do Evento
						cCustoGrv  					,;	//03 -> Centro de Custo a ser Gravado
						cTipoMarc					,;	//04 -> Tipo de Marcacao 
						cPerApur					,;	//05 -> Periodo de Apuracao  
						nHorTot						,;  //06 -> Total de Horas Abonadas 
						aHrAbono                    ,;  //07 -> Array de Horarios de Abonos
						::aResAbo					,;	//08 -> Array Abonos para Resultados 
					    /*cFuncao     */            ,;  //09 -> Funcao a ser Gravada
						/*cDepto	  */			,;  //10 -> Depto para gravacao
						/*cPosto	  */			,;  //11 -> Posto para gravacao
						/*cProcesso	  */			,;  //12 -> Periodo para Gravacao
						/*cRoteiro	  */			,;  //13 -> Roteiro  para Gravacao			
						/*cPeriodo	  */			,;  //14 -> Periodo para Gravacao
						/*cNumPagto	  */			;  //15 -> NumPagto a ser gravado
					)
	Endif 
	
Endif

If cIdentPont $ "011N|012A|021N|022A" // Identificadores do ponto referente a atrasos
	nTolhEvt := ::nTolAtra
	lSubstitui := If(!lHrNr .And. ::nTolAtra > 0, .T.,  .F.)
	lTemTolSai := Val(StrTran(::cTolaSai,"-","")) > 0
ElseIf cIdentPont $ "013N|014A|019N|020A" // Identificadores do ponto referente saida antecipada
	nTolhEvt :=	::nTolSaia
	lSubstitui := If(!lHrNr .And. ::nTolSaia > 0, .T.,  .F.)
	lTemTolSai := Val(StrTran(::cTolaSai,"-","")) > 0
EndIf

If ::nTolHrNr > 0
	nTolhEvt := ::nTolHrNr
EndIf

fGeraRes(	::aResult								,;	//01 -> Array com os Resultados do Dia
			dDtGer									,;	//02 -> Data da Geracao
			::aApo[nIdentificador,nIndice]			,;	//03 -> Numero de Horas Resultantes
			cEvento					  				,;	//04 -> Codigo do Evento
			cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
			cTipoMarc								,;	//06 -> Tipo de Marcacao
			lAcumula								,;	//07 -> True para Acumular as Horas
			cPerApur								,;	//08 -> Periodo de Apuracao
			nTolera									,;	//09 -> Tolerancia
			cTipoArred				 				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
	   		lSubstitui								,;  //11 -> Substitui a(s) Hora(s) Existente(s)
			/*cFuncao		*/						,;  //12 -> Funcao a ser Gravada
			/*cDepto		*/						,;  //13 -> Depto para gravacao
			/*cPosto		*/						,;  //14 -> Posto para gravacao
			/*cProcesso		*/						,;  //15 -> Processo para Gravacao
			/*cRoteiro		*/						,;  //16 -> Roteiro para Gravacao								
			/*cPeriodo		*/						,;  //17 -> Periodo para Gravacao
			/*cNumPagto		*/		   				,;  //18 -> NumPagto a ser gravado
			cTnoCalend								,;  //19 -> Turno de Trabalho
			cSeqTno									,;  //20 -> Semana/Sequencia do Turno
			/*cTipoHE		*/						,;  //21 -> Tipo de Hora Extra
			/*nPercent		*/						,;  //22 -> Percentual de Valorizacao
			lHrNr									,;  //23 -> Horas nao realizadas (atrado/saida antecipada)
			@aHrNReal								,;  //24 -> Array com as Horas nao realizadas (atrado/saida antecipada)
			/*cQtdAbono		*/						,;	//25 -> Quantidade de horas de Abono
			nTolhEvt								,;	//26 -> Tolerância do Evento do ponto (Atrado/Saida antecipada)	
			lTemTolSai								 ;	//27 -> A tolerância por marcação para Atraso/Saida está preenchida
		)
		
return( nHorTot )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³fGeraResAbo  ³Autor ³Equipe Advanced RH   ³ Data ³04/05/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Gerar Array Abonos do Result 							    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >								  	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fGeraResAbo(	dDtGer						,;	//01 -> Data da Geracao
								cEvento						,;	//02 -> Codigo do Evento
								cCusto   					,;	//03 -> Centro de Custo a ser Gravado
								cTpMarc						,;	//04 -> Tipo de Marcacao 
								cPeriodo					,;  //05 -> Periodo de Apuracao  
								nHoras						,;  //06 -> Total de Horas Abonadas
								aHrAbono                    ,;  //07 -> Array de Horarios de Abonos 
								aResAbo						,;  //08 -> Array Abonos para Resultados 
								cFuncao						,;  //09 -> Funcao a ser Gravada
								cDepto						,;  //10 -> Depto para gravacao
								cPosto						,;  //11 -> Posto para gravacao
								cProcesso					,;  //12 -> Processo para Gravacao
								cRoteiro					,;  //13 -> Roteiro para Gravacao								
								cPeriodo					,;  //14 -> Periodo para Gravacao
								cNumPagto					;  //15 -> NumPagto a ser gravado
							)
Local aAux			:= {}
Local bAsc			:= {||NIL}
Local nRes			:= 0
Local nLenaHrAbonos	:= 0  
Local nX			:= 0
Local nPos			:= 0
Local nPosAbo		:= 0

DEFAULT cEvento 	:= ""
DEFAULT cPeriodo	:= ""

IF !Empty( nHoras )
 
	DEFAULT dDtGer  	:= dDataBase
	DEFAULT cCusto  	:= Space( TamSx3( "PC_CC     " )[1] )
	DEFAULT cTpMarc		:= Space( TamSx3( "PC_TPMARCA" )[1] )
	
	bAsc	:= { |x| x[ARESABO_DATA] == dDtGer .and. x[ARESABO_CODIGO] == cEvento .and. x[ARESABO_CUSTO] == cCusto .and. x[ARESABO_TPMARCA] == cTpMarc}
	nRes	:= 0
    
	//--Obtem o Tamanho do Array de Horarios a acrescentar
	nLenaHrAbonos := Len( aHrAbono ) 
	
	IF  (( nRes := aScan( aResAbo , bAsc  ) ) > 0 )  
		
		aResAbo[ nRes , ARESABO_HORAS_TOTAIS] := SomaHoras( aResAbo[ nRes , ARESABO_HORAS_TOTAIS ] , nHoras )
		
	Else
		
		//-- Adiciona Novo  Cabecalho de Abonos
		aAdd( aResAbo , Array( ELEMENTOS_PRE_ABONOS ) )
		nRes := Len( aResAbo )
		
		aResAbo[ nRes , ARESABO_CODIGO		] := cEvento			
		aResAbo[ nRes , ARESABO_DATA 		] := dDtGer	
		aResAbo[ nRes , ARESABO_CUSTO		] := cCusto	 
		aResAbo[ nRes , ARESABO_TPMARCA		] := cTpMarc			
		aResAbo[ nRes , ARESABO_HORAS_TOTAIS] := nHoras  
        
		//-- Cria Elemento para Acrescentar Horarios
		aResAbo[ nRes , ARESABO_ABONOS 		]:= {}
		
	Endif
	
    //-- Acrescenta Abonos                          
	For nX:= 1 To nLenaHrAbonos 
		
		aAux := Array( ELEMENTOS_AABONOS + 1) 
		
		aAux[ AABONOS_DATA	 		] := dDtGer	
		aAux[ AABONOS_CODIGO 		] := aHrAbono[ nX, AHRABONO_CODIGO_ABONO ]
		aAux[ AABONOS_HORAS_ABO		] := aHrAbono[ nX, AHRABONO_HORAS_ABONO  ]		
		aAux[ AABONOS_CC			] := cCusto										
		aAux[ AABONOS_TPMARCA		] := cTpMarc									
		aAux[ AABONOS_HORAS_INI		] := aHrAbono[ nX, AHRABONO_HORA_INICIAL ]		
		aAux[ AABONOS_HORAS_FIM		] := aHrAbono[ nX, AHRABONO_HORA_FINAL   ]
		aAux[ AABONOS_CODEVE      	] := cEvento 
		aAux[ AABONOS_RECNO			] := 0
		aAux[ AABONOS_FLAG			] := 'P'
		aAux[ ELEMENTOS_AABONOS + 1	] := aHrAbono[ nX, AHRABONO_RECNO_FAIXA   ]
		
		nPos := aScan(aResAbo, {|x| x[ARESABO_DATA] == aAux[AABONOS_DATA] .And. x[ARESABO_CODIGO] == aAux[AABONOS_CODEVE]})
		
		If nPos > 0
			If !Empty(aResAbo[nPos,ARESABO_ABONOS])
				
				If (nPosAbo := aScan(aResAbo[nPos,ARESABO_ABONOS], {|x| x[AHRABONO_CODIGO_ABONO] == aAux[AHRABONO_CODIGO_ABONO] .And. x[AABONOS_TPMARCA] == aAux[AABONOS_TPMARCA]})) > 0
					aResAbo[nPos, ARESABO_ABONOS,nPosAbo, AABONOS_HORAS_FIM]	:=	aHrAbono[nX, AHRABONO_HORA_FINAL]
					aResAbo[nPos, ARESABO_ABONOS,nPosAbo, AABONOS_HORAS_ABO]	:=	SomaHoras(aResAbo[nPos, ARESABO_ABONOS, nPosAbo, AABONOS_HORAS_ABO], aAux[AABONOS_HORAS_ABO])
				Else
					aAdd(aResAbo[nRes, ARESABO_ABONOS], aAux)
				EndIf
			Else
				aAdd(aResAbo[nRes, ARESABO_ABONOS], aAux)
			EndIf
		EndIf	
	Next nX
EndIF

return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿
³method    ³SaidaAntPreAbo		  ³ Autor ³Mauricio MR ³ Data ³23/04/2004  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula Horarios de Saida Antecipada					       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PreAboSaidaAntecipada(lRF0ChkTable,aApo,aApoHr,nMarcTab,dData) ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                  	   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Nil                                                    	       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo													  	   ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
method SaidaAntPreAbo() class PonVarApon

Local aHr   	:= {}
Local aHr2   	:= {}
Local aAreaF0	:= {}
Local cFilRF0	:= xFilial("RF0")
Local cMatSRA	:= SRA->RA_MAT
Local lRF0ChkAnt:= ::lRF0ChkTable

//Verifica Pré-Abono para a Matricula e Data em exec.
aAreaF0 := RF0->(GetArea())
RF0->(DbSetOrder(1))
If !( RF0->(DbSeek( cFilRF0 + cMatSRA + DtoS(::dData) )) )
	::lRF0ChkTable := .F.
EndIf
RestArea(aAreaF0)

IF ( ::lRF0ChkTable )

	//-- Cria um Unico Array com todos os horarios realizados do Dia
	aEval( ::aApoHr[ ::oaApo:HrTrbEfeti ] , { |x| IF( !Empty( x ) , aAdd( aHr , x ) , NIL ) } ) 
	aEval( ::aApoHr[ ::oaApo:HrTrbNotEf ] , { |x| IF( !Empty( x ) , aAdd( aHr , x ) , NIL ) } ) 

	IF !Empty( aHr )

		//-- Coloca o ultimo horario realizado como o primeiro elemento
		aSort( aHr , NIL , NIL , { |x,y| ( DataHora2Str( x[ 1 , 1 ] , x[ 1 , 2 ] ) > DataHora2Str( y[ 1 , 1 ] , y[ 1 , 2 ] ) ) } )
		
		//-- O Horario de Pre-Abono para a saida antecipada para horario movel sera o ultimo horario realizado
		//-- acrescido das horas nao realizadas.
		aHr2	:= RetFimTab( aHr[ 1 , 1 , 1 ] , aHr[ 1 , 1 , 4 ] , ::aApo[ ::oaApo:SaidaAnte, ::nTotMarcTab ] )
		
		::AddPerHr(;
						::oaApo:SaidaAnte,;
						NIL,;
						::nTotMarcTab,;
						@::aApoHr,;
						aHr[1,1,1],;
						aHr[1,1,4],;
						aHr2[1],;
						aHr2[2],;
						NIL,;
						NIL,;
						NIL,;
						::dData;
					)

		//-- Aponta Saida Antecipada Antes do Intervalo  
		::AddPerHr(	::oaApo:SaidaAnte	,;//01 -> Identificador do Elemento Diurno no Apo
					NIL					,;//02 -> Identificador do Elemento Noturno no Apo
					::nTotMarcTab		,;//03 -> Posicao no Elemento do Identificador
					::aApoHr			,;//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
					aHr[1,1,1]			,;//05 -> Data 1
					aHr[1,1,4]			,;//06 -> Hora 1
					aHr2[1]				,;//07 -> Data 2
					aHr2[2]				,;//08 -> Hora 2
					NIL					,;//09 -> <@>Horas Normais Apontadas
					NIL					,;//10 -> <@>Horas Noturnas Apontadas
					::lHnotSai			,;//11 -> Apontar Horas Noturnas
					::dData				,;//12 -> Data Inicial Para a Hora Noturna
					NIL					,;//13 -> <@>Horas de Acrescimo Noturno
					::nIniHnot			,;//14 -> Inicio do Horario Noturno
					::nFimHnot			,;//15 -> Final do Horario Noturno
					::nMinHnot			,;//16 -> Minutos do Horario Noturno
					::lAcreNot			 ;//17 -> Apenas Acrescimo Noturno
				 )
	EndIF

EndIF 

::lRF0ChkTable := lRF0ChkAnt

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    fGerNvInt			 ³Autor³ Marco Nakazawa³ Data ³17/03/2020³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Cria o novo horário de intervalo para sincronizar com a EJ	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³DistributeRounding( nParts , nValParts )					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aHoras     			-> Array com as marcações e tab pardao   ³
³          ³nValParts  			-> Valor do Arredondamento a Ser Distibui³
³          ³                  	   do									 ³
³          ³lHoursDistribute	-> Se referese a Horas ( DEFAULT .T. )   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³aDistribution -> Array com nParts elementos contendo os  valo³
³          ³                 res que foram Distribuidos					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³fArrDiario() em ::ChkTolArr									 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fGerNvInt (aHoras,nHrIntNov,nHrIntOld,nPosSI,nPosEI)
Local nHrDif
Local nHrIntIni
Local nHrIntFim
Local aNovHrInt := Array( 4 )

If !Empty( aHoras ) .And. !Empty( nHrIntNov ) .And. !Empty( nHrIntOld ) .And. !Empty( nPosSI ) .And. !Empty( nPosEI )
	If nHrIntNov > nHrIntOld
		nHrDif := nHrIntNov - nHrIntOld
		nHrIntIni := fDHtoNS( aHoras[ nPosSI , 1 ] , aHoras[ nPosSI , 2 ] )
		nHrIntFim := fDHtoNS( aHoras[ nPosEI , 1 ] , aHoras[ nPosEI , 2 ] )

		aNovHrInt[1] := fNStoDH( nHrIntIni + nHrDif , "D" )
		aNovHrInt[2] := fNStoDH( nHrIntIni + nHrDif , "H" )
		aNovHrInt[3] := fNStoDH( nHrIntFim + nHrDif , "D" )
		aNovHrInt[4] := fNStoDH( nHrIntFim + nHrDif , "H" )
	Else
		nHrDif := nHrIntOld - nHrIntNov
		nHrIntIni := fDHtoNS( aHoras[ nPosSI , 1 ] , aHoras[ nPosSI , 2 ] )
		nHrIntFim := fDHtoNS( aHoras[ nPosEI , 1 ] , aHoras[ nPosEI , 2 ] )

		aNovHrInt[1] := fNStoDH( nHrIntIni - nHrDif , "D" )
		aNovHrInt[2] := fNStoDH( nHrIntIni - nHrDif , "H" )
		aNovHrInt[3] := fNStoDH( nHrIntFim - nHrDif , "D" )
		aNovHrInt[4] := fNStoDH( nHrIntFim - nHrDif , "H" )
	EndIf
EndIf
Return (aNovHrInt)
