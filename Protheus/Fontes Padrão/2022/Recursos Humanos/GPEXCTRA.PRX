#INCLUDE "PROTHEUS.CH" 
#INCLUDE "GPEX1FUN.CH"

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³			ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.			  			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data	³ FNC			 ³  Motivo da Alteracao 					³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Flavio Corre³25/02/15³PCREQ-2898      ³Inclusao fonte							³±±
±±³Allyson M   ³19/02/15³TRNGHC          ³Ajuste na busca das transferencias 		³±±
±±³M. Silveira ³01/09/15³TT4501          ³Ajuste em fTransf para permitir receber a ³±±
±±³            ³        ³                ³filial e matricula que sera pesquisada.   ³±±
±±³Gabriel A.  ³27/06/16³TVDL06          ³Alteração realizada apenas para atualizar ³±±
±±³            ³        ³                ³o D-1 com o fonte correto.                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfAll³ Autor ³ Marinaldo de Jesus    ³ Data ³30/08/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Todas as Transferencias no SRE                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfAll( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , NIL , NIL , NIL , NIL , lNoRept , lOrigem, NIL , NIL , NIL, NIL ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfEmp³ Autor ³ Marinaldo de Jesus    ³ Data ³30/08/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Empresas no SRE                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfEmp( aTransf, uData, lNoRept, lOrigem, lVerEmpFil, aTransfFil )
DEFAULT lNoRept 	:= .F.
DEFAULT lOrigem		:= .T.
DEFAULT lVerEmpFil	:= .F.
Return( fTransf( @aTransf, @uData, .T., .F., .F., .F., lNoRept, lOrigem, .F., .F., .F., .F., Nil, Nil, lVerEmpFil, aTransfFil ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfFil³ Autor ³ Marinaldo de Jesus    ³ Data ³30/08/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Filiais no SRE                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfFil( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .T. , .F. , .F. , lNoRept , lOrigem, .F., .F. , .F. , .F. ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfCc ³ Autor ³ Marinaldo de Jesus    ³ Data ³30/08/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Centros de Custo no SRE         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfCc( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .F. , .T. , .F. , lNoRept , lOrigem, .F. , .F. , .F. , .F. ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfItem ³ Autor ³ Christiane Vieira   ³ Data ³09/04/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Item Contábil no SRE            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfItem( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .F. , .T. , .F. , lNoRept , lOrigem, .F. , .F. , .F. , .T. ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfCLVL ³ Autor ³ Christiane Vieira   ³ Data ³09/04/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Classe de Valor no SRE          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfCLVL( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .F. , .T. , .F. , lNoRept , lOrigem, .F. , .F. , .F. , .T. ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfProc³ Autor ³ Mauricio Takakura    ³ Data ³15/05/2007³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Processos no SRE                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfProc( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .F. , .F. , .F. , lNoRept , lOrigem, .T., .F. , .F. , .F. ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfMat³ Autor ³ Marinaldo de Jesus    ³ Data ³30/08/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Matricula no SRE         		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfMat( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .F. , .F. , .T. , lNoRept , lOrigem, .F. , .F. , .F., .F. ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfDep³ Autor ³ Natie Sugahara        ³ Data ³02/04/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Departamento no SRE      		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfDep( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .F. , .F. , .F. , lNoRept , lOrigem, .F. , .T. , .F. ,.F.) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfPos³ Autor ³ Natie Sugahara        ³ Data ³02/04/2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de posto no SRE          		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfPos( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T.
Return( fTransf( @aTransf , uData , .F. , .F. , .F. , .F. , lNoRept , lOrigem, .F. , .F. , .T.,.F. ) )



/*/{Protheus.doc} fTrfAnt
//TODO Busca transferencias do fim para o inicio.
@author flavio.scorrea
@since 24/12/2018
@version P12
@return return, return_description
@example
(examples)
@see (links_or_references)
/*/
Static Function fTrfAnt(cFilTrf,cMatTrf,cEmpTrf,dDtTrf,aRecTrf)

Local cAliasTmp := GetNextAlias()
Local lRet		:= .F.
Local cQuery	:= ""
Local cDtTrf    := "99999999"

Static __oSt1
Static __cEmpAux

If __oSt1 == Nil .or. __cEmpAux == Nil .or. __cEmpAux <> cEmpAnt
	__oSt1    := FWPreparedStatement():New()
	__cEmpAux := cEmpAnt

	cQuery := "SELECT R_E_C_N_O_ AS RECNO "
	cQuery += "FROM " + RetSqlName("SRE")+ " SRE "
	cQuery += "WHERE SRE.RE_MATP = ? AND "  //1 - Matrícula Para
	cQuery += " SRE.RE_FILIALP = ? AND "	//2 - Filial Para
	cQuery += " SRE.RE_EMPP = ? AND "		//3 - Empresa Para
	cQuery += " SRE.RE_DATA < ? AND "		//4 - Data
	cQuery += " SRE.D_E_L_E_T_ = ' ' "
	cQuery += " ORDER BY RE_DATA DESC "

	cQuery := ChangeQuery(cQuery)

	__oSt1:SetQuery(cQuery)

EndIf

If !Empty(dDtTrf)
	cDtTrf := DtoS(dDtTrf)
EndIf

__oSt1:SetString(1,cMatTrf)
__oSt1:SetString(2,SubStr(cFilTrf+Space(12),1,12))
__oSt1:SetString(3,cEmpTrf)
__oSt1:SetString(4,cDtTrf)

cQuery := __oSt1:getFixQuery()

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasTmp)

If !(cAliasTmp)->(Eof())
	TcSetField( cAliasTmp, "RECNO", "N", 10, 0 ) 
	SRE->(dbGoto((cAliasTmp)->RECNO))
	SRE->( Aadd(aRecTrf, { Recno() , ( RE_EMPP + RE_FILIALP + RE_MATP ) , RE_DATA } ) )
	lRet := .T.
Endif

(cAliasTmp)->(dbCloseArea())

Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fTransf  ³ Autor ³ Marinaldo de Jesus    ³ Data ³28/04/2000³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Pesquisar Transferencias no SRE                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.  ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas³±±
±±³          ³               as Transferencias naquela Data.              ³±±
±±³          ³ lEmp       =  Apenas Transferencias de Empresa.            ³±±
±±³          ³ lFil       =  Apenas Transferencias de Filial.             ³±±
±±³          ³ lCct       =  Apenas Transferencias de Cent. de Custo.     ³±±
±±³          ³ lMat       =  Apenas Transferencias de Matricula.          ³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                   ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem     ³±±
±±³          ³ lProc	  =  Apenas Transferencias de Processo		      ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio³±±
±±³          ³       nario.                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransf( aTransf, uData, lEmp, lFil, lCct, lMat, lNoRept, lOrigem, lProc, lDepto, lPosto, lItmClvl, cFil, cMat, lVerEmpFil, aTransfFil )

Local aLastTrf 		:= If( ( ValType( aTransf ) == "A" ) , aClone( aTransf ) , {} )
Local aRecTrf		:= {}
Local aArea			:= {}

Local cChave    	:= ""
Local cChaveAux 	:= ""
Local cEmp			:= cEmpAnt

Local nSreSvOrder   := SRE->( IndexOrd() )
Local nMaxRecTrf	:= 0

Local nRecTrf
Local nRecsTrf
Local nSreOrder

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Bloco Para Verificar Item ja Adicionado                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local bIgual  := { || aScan( aTransf, { |x|	x[1]; 			   // Empresa De
											+;
	  							            x[2]; 			// Filial + Matricula De
                                           	+;
                                           	x[3]; 			// Centro de Custo De
                                           	+;
                                           	x[4]; 			// Empresa Para
                                           	+;
                                           	x[5]; 			// Filial + Matricula Para
                                           	+;
                                           	x[6]; 			// Centro ce Custo Para
                                           	+;
                                           	Dtos(x[7]);	// Data da Transferencia
                                           	+;
                                           	x[14];			// Processo De
                                           	+;
                                           	x[15];			// Processo Para
                                           	+;
                                           	x[16];			// Depto De 
                                           	+;
                                           	x[17];			// Depto para
                                           	+;
                                           	x[18];			// Posto De
                                           	+;
                                           	x[19];			// Posto Para
                                           	+;
                                           	If(lItemClvl,;
           									   x[20]+;    //Item De
           										x[21]+;    //Item Para
           										x[22]+;    //Classe de Valor De
           										x[23],;    //Classe de Valor Para
           										"");
                                            ==;
                                            RE_EMPD;		// Empresa De
                                           	+;
                                           	Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) ;	// Filial
                                           	+;
                                           	RE_MATD; 		// Matricula De
                                           	+;
                                           	RE_CCD; 		// Centro de Custo De
                                           	+;
                                           	RE_EMPP; 		// Empresa Para
                                           	+;
                                           	Substr(RE_FILIALP,1,FWSizeFilial(RE_EMPP)); 	// Filial
                                           	+;
                                           	RE_MATP; 		// Matricula Para
                                           	+;
                                           	RE_CCP; 		// Centro ce Custo Para
                                           	+;
                                           	Dtos(RE_DATA);	// Data da Transferencia
                                           	+;
                                           	RE_PROCESD;		// Processo De
                                           	+;
                                           	RE_PROCESP;		// Processo Para
                                           	+;
                                           	RE_DEPTOD;		// Depto De
                                           	+;
                                           	RE_DEPTOP;		// Depto Para
                                           	+;
                                           	RE_POSTOD;		// Posto De
                                           	+;
                                           	RE_POSTOP;      // Posto Para
                                           	+;		
                                           	If(lItemClvl,;
                                           				 RE_ITEMD+;	//Item De
                                           				 RE_ITEMP+; //Item Para
                                           				 RE_CLVLD+; //Classe de Valor De
                                           				 RE_CLVLP,;  //Classe de Valor Para
                                           				 "");		
                                          };
                              ) == 0;
                  }
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Bloco Para Verificar Data                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local bData   := { ||	If(ValType(uData) == "L"								, .T. ,	; // Todas as Transferencias Independente da Data
                      	If(ValType(uData) == "C" .and. MesAno(RE_DATA) == uData	, .T. ,	; // Todas as Transferencias Em Determinado Mes/Ano
                      	If(ValType(uData) == "D" .and. RE_DATA == uData        	, .T. ,	; // Todas as Transferencias Em Determinada Data
                      	.F.) ) ) }

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Bloco Para Verificar Itens Iguais                            ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local bE      := { || If(lNoRept, aScan( aTransf, { |x| x[1]                          							== RE_EMPD                                    									} ) == 0 , .T. ) }

Local bF      := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],1,FWSizeFilial(RE_EMPD))         			== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD))                             		} ) == 0 , .T. ) } 
Local bEF     := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],1,FWSizeFilial(RE_EMPD))        	== RE_EMPD    + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD))        				} ) == 0 , .T. ) }

Local bP      := { || If(lNoRept, aScan( aTransf, { |x| x[14]                          						== RE_PROCESD                                     								} ) == 0 , .T. ) }
Local bEP     := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[14]                   						== RE_EMPD    + RE_PROCESD                        								} ) == 0 , .T. ) }

Local bFP     := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[14]       	== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_PROCESD                 	} ) == 0 , .T. ) }
Local bEFP    := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[14]  == RE_EMPD    + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD + RE_PROCESD} ) == 0 , .T. ) }
Local bEFDP   := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[16]+x[14]==RE_EMPD  + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_DEPTOD	+ RE_PROCESD} ) == 0 , .T. ) }

Local bD      := { || If(lNoRept, aScan( aTransf, { |x| x[16]                          						== RE_DEPTOD                                     								} ) == 0 , .T. ) }
Local bED     := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[16]                   						== RE_EMPD    + RE_DEPTOD                            							} ) == 0 , .T. ) }
Local bFD     := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[16]        	== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_DEPTOD                      } ) == 0 , .T. ) }
Local bEFD    := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],1,FWSizeFilial(RE_EMPD))+ x[16]   == RE_EMPD + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_DEPTOD			} ) == 0 , .T. ) }
Local bEFCD   := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],1,FWSizeFilial(RE_EMPD))+ x[3]+ x[16]	== RE_EMPD + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_CCD 	+ RE_DEPTOD} ) == 0 , .T. ) }

Local bC      := { || If(lNoRept, aScan( aTransf, { |x| x[3]                          							== RE_CCD                                     									} ) == 0 , .T. ) }
Local bEC     := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[3]                   							== RE_EMPD + RE_CCD                        										} ) == 0 , .T. ) }
Local bFC     := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[3]        	== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_CCD                      	} ) == 0 , .T. ) }
Local bEFC    := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[3]	== RE_EMPD + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_CCD  				} ) == 0 , .T. ) }

Local bT      := { || If(lNoRept, aScan( aTransf, { |x| x[18]                          						== RE_POSTOD                                     								} ) == 0 , .T. ) }
Local bET     := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[18]                   						== RE_EMPD     + RE_POSTOD                        								} ) == 0 , .T. ) }
Local bFT     := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],1,FWSizeFilial(RE_EMPD))+ x[18]         == Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_POSTOD                     } ) == 0 , .T. ) }
Local bEFT    := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[18] == RE_EMPD + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) +  RE_POSTOD		    } ) == 0 , .T. ) }

Local bECM    := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],FWSizeFilial(RE_EMPD)+1) + x[3] 	== RE_EMPD    + RE_MATD    + RE_CCD           									} ) == 0 , .T. ) }
Local bEPM    := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],FWSizeFilial(RE_EMPD)+1) + x[14]	== RE_EMPD    + RE_MATD    + RE_PROCESD        									} ) == 0 , .T. ) }
Local bEM     := { || If(lNoRept, aScan( aTransf, { |x| x[1] + SubStr(x[2],FWSizeFilial(RE_EMPD)+1)        	== RE_EMPD    + RE_MATD                       									} ) == 0 , .T. ) } 
Local bFCM    := { || If(lNoRept, aScan( aTransf, { |x| x[2] + x[3]                   						== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD    + RE_CCD 			} ) == 0 , .T. ) }
Local bFPM    := { || If(lNoRept, aScan( aTransf, { |x| x[2] + x[14]                   						== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD    + RE_PROCESD       	} ) == 0 , .T. ) }
Local bFM     := { || If(lNoRept, aScan( aTransf, { |x| x[2]                          						== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD               			} ) == 0 , .T. ) }
Local bEFCM   := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[2] + x[3]             						== RE_EMPD + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD + RE_CCD 	} ) == 0 , .T. ) }
Local bEFDM   := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[2] + x[16]        							== RE_EMPD + Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD + RE_DEPTOD 	} ) == 0 , .T. ) }
Local bCM     := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],FWSizeFilial(RE_EMPD)+1) + x[3]         == RE_MATD    + RE_CCD                        									} ) == 0 , .T. ) } 
Local bPM     := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],FWSizeFilial(RE_EMPD)+1) + x[14]        == RE_MATD    + RE_PROCESD                        								} ) == 0 , .T. ) } 
Local bM      := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],FWSizeFilial(RE_EMPD)+1)               	== RE_MATD                                    									} ) == 0 , .T. ) }
lOCAL bIV
lOCAL bEFIV
lOCAL bFIV 
Local cFilTrf,cMatTrf,cEmpTrf,dDtTrf
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Bloco Para Adicionar itens em aTransf                        ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local bAddTrf := { || aAdd( aTransf,; 
										{;
											RE_EMPD              									,; // 01 - Empresa De
                                     		Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD 	,; // 02 - Filial  De + Matricula De
                                    		RE_CCD               									,; // 03 - Centro de Custo De
		                               		RE_EMPP              									,; // 04 - Empresa Para
        		                       		Substr(RE_FILIALP,1,FWSizeFilial(RE_EMPP)) + RE_MATP	,; // 05 - Filial  Para + Matricula Para
                		               		RE_CCP               									,; // 06 - Centro de Custo Para
                        		            RE_DATA				 									,; // 07 - Data da Transferencia
                                		    Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD))				,; // 08 - Filial de Origem
                                     		RE_MATD				 									,; // 09 - Matricula de Origem
		                                    Substr(RE_FILIALP,1,FWSizeFilial(RE_EMPP))			 	,; // 10 - Filial de Destino
        		                            RE_MATP				 									,; // 11 - Matricula de Destino
        		                            MesAno( RE_DATA )	 									,; // 12 - Mes/Ano ( Ano/Mes ) da Transferencia 	
        		                            Recno()				 									,; // 13 - Recno() da Transferencia
        		                            RE_PROCESD			 									,; // 14 - Processo De
        		                            RE_PROCESP			 									,; // 15 - Processo Para
        		                            RE_DEPTOD			 									,; // 16 - Depto de
        		                            RE_DEPTOP			 									,; // 17 - Depto Para
        		                            RE_POSTOD			 									,; // 18 - Posto De
        		                            RE_POSTOP			 ,; // 19 - Posto Para
        		                            If (lItemclvl, RE_ITEMD,""),;// 20 - Item De
                                     		If (lItemClvl, RE_ITEMP,""),;// 21 - Item Para
                                     		If (lItemClvl, RE_CLVLD,""),;// 22 - Classe de Valor De
                                     		If (lItemClvl, RE_CLVLP,""),; // 23 - Classe de Valor Para
                                     		If (SRE->(FieldPos("RE_TRFUNID"))>0, RE_TRFUNID,""),; // 24 - ID de Transferencia
                                     		If (SRE->(FieldPos("RE_TRFOBS"))>0, RE_TRFOBS,""); // 25 - Observacao da Transferencia
                		                 };
                           			);
                   }
Local bAddTrf2 := { || aAdd( aTransfFil,; 
										{;
											RE_EMPD              									,; // 01 - Empresa De
                                     		Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD 	,; // 02 - Filial  De + Matricula De
                                    		RE_CCD               									,; // 03 - Centro de Custo De
		                               		RE_EMPP              									,; // 04 - Empresa Para
        		                       		Substr(RE_FILIALP,1,FWSizeFilial(RE_EMPP)) + RE_MATP	,; // 05 - Filial  Para + Matricula Para
                		               		RE_CCP               									,; // 06 - Centro de Custo Para
                        		            RE_DATA				 									,; // 07 - Data da Transferencia
                                		    Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD))				,; // 08 - Filial de Origem
                                     		RE_MATD				 									,; // 09 - Matricula de Origem
		                                    Substr(RE_FILIALP,1,FWSizeFilial(RE_EMPP))			 	,; // 10 - Filial de Destino
        		                            RE_MATP				 									,; // 11 - Matricula de Destino
        		                            MesAno( RE_DATA )	 									,; // 12 - Mes/Ano ( Ano/Mes ) da Transferencia 	
        		                            Recno()				 									,; // 13 - Recno() da Transferencia
        		                            RE_PROCESD			 									,; // 14 - Processo De
        		                            RE_PROCESP			 									,; // 15 - Processo Para
        		                            RE_DEPTOD			 									,; // 16 - Depto de
        		                            RE_DEPTOP			 									,; // 17 - Depto Para
        		                            RE_POSTOD			 									,; // 18 - Posto De
        		                            RE_POSTOP			 ,; // 19 - Posto Para
        		                            If (lItemclvl, RE_ITEMD,""),;// 20 - Item De
                                     		If (lItemClvl, RE_ITEMP,""),;// 21 - Item Para
                                     		If (lItemClvl, RE_CLVLD,""),;// 22 - Classe de Valor De
                                     		If (lItemClvl, RE_CLVLP,""),; // 23 - Classe de Valor Para
                                     		If (SRE->(FieldPos("RE_TRFUNID"))>0, RE_TRFUNID,""),; // 24 - ID de Transferencia
                                     		If (SRE->(FieldPos("RE_TRFOBS"))>0, RE_TRFOBS,""); // 25 - Observacao da Transferencia
                		                 };
                           			);
                   }

DEFAULT cFil 		:= SRA->RA_FILIAL
DEFAULT cMat 		:= SRA->RA_MAT
DEFAULT lVerEmpFil 	:= .F.
DEFAULT aTransfFil 	:= {}

Static nSreOrder1
Static nSreOrder2
Static lItemClVl

DEFAULT nSreOrder1 := RetOrdem( "SRE" , "RE_EMPP+RE_FILIALP+RE_MATP" )
DEFAULT nSreOrder2 := RetOrdem( "SRE" , "RE_EMPD+RE_FILIALD+RE_MATD+DTOS(RE_DATA)" , .T. )
DEFAULT lItemClVl  := GetMvRH("MV_ITMCLVL ",NIL,"2") $ "1*3"

If nSreOrder2 == 0
	nSreOrder2 := RetOrdem( "SRE" , "RE_EMPD+RE_FILIALD+RE_MATD" )
EndIf

If lItemClvl
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Bloco Para Verificar Itens Iguais do Item e classe de valor  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/	
	bIV     := { || If(lNoRept, aScan( aTransf, { |x| x[20]+ x[22]                    	 								== RE_ITEMD+RE_CLVLD                               			} ) == 0 , .T. ) }
	bEIV    := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[20]+x[22]             									== RE_EMPD    + RE_ITEMD   +RE_CLVLD                      	} ) == 0 , .T. ) }
	bFIV    := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],1,FWSizeFilial(RE_EMPD)) + x[20]+x[22]   				== RE_FILIALD + RE_ITEMD   +RE_CLVLD                       	} ) == 0 , .T. ) }
	bEFIV   := { || If(lNoRept, aScan( aTransf, { |x| x[1]+SubStr(x[2],1,FWSizeFilial(RE_EMPD))+x[20]+x[22] 			== RE_EMPD    + RE_FILIALD + RE_ITEMD+RE_CLVLD  			} ) == 0 , .T. ) }
	bCIV	:= { || If(lNoRept, aScan( aTransf, { |x| x[3] + x[20]+x[22]             									== RE_CCD     + RE_ITEMD   +RE_CLVLD  		             	} ) == 0 , .T. ) }
	bECIV   := { || If(lNoRept, aScan( aTransf, { |x| x[1] + x[3]+ x[20]+x[22]       									== RE_EMPD    + RE_CCD     + RE_ITEMD+RE_CLVLD            	} ) == 0 , .T. ) }
	bFCIV   := { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],1,FWSizeFilial(RE_EMPD))+X[3]+ x[20]+x[22]			== RE_FILIALD + RE_CCD     + RE_ITEMD+RE_CLVLD            	} ) == 0 , .T. ) }
	bEFCIV  := { || If(lNoRept, aScan( aTransf, { |x| x[1]+SubStr(x[2],1,FWSizeFilial(RE_EMPD))+X[3]+x[20]+x[22]		== RE_EMPD    + RE_FILIALD + RE_CCD  + RE_ITEMD+RE_CLVLD  	} ) == 0 , .T. ) }
	bMIV	:= { || If(lNoRept, aScan( aTransf, { |x| SubStr(x[2],FWSizeFilial(RE_EMPD)+1)+x[20]+x[22]					== RE_MATD    + RE_ITEMD   +RE_CLVLD  		             	} ) == 0 , .T. ) }
	bEMIV	:= { || If(lNoRept, aScan( aTransf, { |x| x[1]+x[22]+SubStr(x[2],FWSizeFilial(RE_EMPD)+1)+x[20]+x[22]		== RE_EMPD    + RE_MATD    + RE_ITEMD+RE_CLVLD          	} ) == 0 , .T. ) }
	bFMIV	:= { || If(lNoRept, aScan( aTransf, { |x| x[2]+x[20]+x[22]													== Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD))+ RE_MATD    + RE_ITEMD+RE_CLVLD          	} ) == 0 , .T. ) }
	bEFMIV	:= { || If(lNoRept, aScan( aTransf, { |x| x[1]+x[2]+x[20]+x[22]												== RE_EMPD    +Substr(RE_FILIALD,1,FWSizeFilial(RE_EMPD)) + RE_MATD +RE_ITEMD+RE_CLVLD	} ) == 0 , .T. ) }
EndIf
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicializa os Parametros com os valores DEFAULT              ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aTransf := {}
uData   := If( ( uData		== NIL ) .or. !( ValType(uData ) $ "C_D" )	, .F. , uData	)
lEmp    := If( ( lEmp 		== NIL ) .or. ValType(lEmp) 		!= "L"  , .F. , lEmp	)
lFil    := If( ( lFil		== NIL ) .or. ValType(lFil) 		!= "L"  , .F. , lFil	)
lCct    := If( ( lCct		== NIL ) .or. ValType(lCct) 		!= "L"  , .F. , lCct	)
lMat    := If( ( lMat		== NIL ) .or. ValType(lMat) 		!= "L"  , .F. , lMat	)
lNoRept := If( ( lNoRept	== NIL ) .or. ValType(lNoRept)		!= "L"  , .F. , lNoRept	)
lOrigem := If( ( lOrigem	== NIL ) .or. ValType(lOrigem)		!= "L"  , .F. , lOrigem	)
lProc	:= If( ( lProc		== NIL ) .or. ValType(lProc) 		!= "L"  , .F. , lProc	)
lDepto	:= If( ( lDepto		== NIL ) .or. ValType(lDepto) 		!= "L"  , .F. , lDepto	)
lPosto	:= If( ( lPosto		== NIL ) .or. ValType(lPosto) 		!= "L"  , .F. , lPosto	)
lItmClvl:= If( ( lItmClvl	== NIL ) .or. ValType(lItmClvl)		!= "L"  , .F. , lItmClvl)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta Chave com a Situacao Atual do Funcionario              ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cChave	:=	( cEmp + Substr(cFil+Space(12),1,12) + cMat )
//cChave	:=	( cEmp + cFil + cMat )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seleciona o Arquivo de Transferencias, Ordem (2) Para que   a³
³ Procura seja Feita a Partir da Transferencia "Para".         ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nSreOrder := nSreOrder1
SRE->( dbSetOrder( nSreOrder ) )

cFilTrf := cFil
cMatTrf := cMat
cEmpTrf := cEmp

aArea := GetArea()

While fTrfAnt(cFilTrf,cMatTrf,cEmpTrf,dDtTrf,@aRecTrf)
	cFilTrf := SRE->RE_FILIALD
	cMatTrf := SRE->RE_MATD
	cEmpTrf := SRE->RE_EMPD
	dDtTrf	:= SRE->RE_DATA
EndDo

RestArea(aArea)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Se for Selecionada a Pesquisa, Tambem, Pela Origem           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If ( lOrigem )
	
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Ordena o Array aRecTrf em Ordem Crescente de Data             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aSort( aRecTrf , NIL , NIL , { |x,y| x[3] < y[3] } )

	nRecsTrf := Len( aRecTrf )
	For nRecTrf := 0 To nRecsTrf
		
		 /*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta Chave para pesquisa na "Origem"                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If ( nRecTrf == 0 )
			cChave	:=	( cEmp + Substr(cFil+Space(12),1,12) + cMat )
			//cChave	:=	( cEmp + cFil + cMat )
		Else
			cChave	:=	aRecTrf[ nRecTrf ,2 ]
        EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Seleciona o Arquivo de Transferencias, Ordem (1) Para que   a³
		³ Procura seja Feita a Partir da Transferencia "De".           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nSreOrder := nSreOrder2

		SRE->( dbSetOrder( nSreOrder ) )

		If SRE->( dbSeek( cChave , .F. ) )

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Comecar historico de transferencia pela Origem ate o Para    ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			While SRE->( !Eof() .and. ( ( RE_EMPD + RE_FILIALD + RE_MATD ) == cChave ) )

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Grava o Registro ja Pesquisado.                              ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				If ( SRE->( aScan( aRecTrf , { |x| x[1] == Recno() } ) )  > 0 )
					SRE->( dbSkip() )
				    Loop
				Else
					SRE->( Aadd(aRecTrf, { Recno() , ( RE_EMPP + RE_FILIALP + RE_MATP ) , RE_DATA } ) )
				EndIf
		
				If SRE->( ( ( RE_EMPD + RE_FILIALD + RE_MATD ) == cChave ) )
			
					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Montar chave da proxima Pesquisa do registro "De"	     	   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		            cChave    	:= SRE->( RE_EMPP + RE_FILIALP + RE_MATP )
    		        cChaveAux	:= SRE->( RE_EMPD + RE_FILIALD + RE_MATD )                                        

					/*
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Procura a Proxima Transferencia "Para"o SRE                   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    		        SRE->( dbSkip() )
        		    If ( SRE->( RE_EMPD + RE_FILIALD + RE_MATD ) == cChaveAux )
	        			/*
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Posiciona sempre no Ultimo Registro da Sequencia              ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	        			While SRE->(;
	        							(;
	        								( RE_EMPD + RE_FILIALD + RE_MATD );
	        								==;
	        								cChaveAux;
	        							);
	        							.and.;
	        							( aScan( aRecTrf , Recno() ) == 0 );
	        						)	
							SRE->( dbSkip() )
				       		If ( SRE->( RE_EMPD + RE_FILIALD + RE_MATD ) == cChaveAux )
						       	cChave := SRE->( RE_EMPP + RE_FILIALP + RE_MATP )
			       		    EndIf
				       	End While
			        EndIf
    		        SRE->( dbSeek( cChave , .F. ) )
				Else
					SRE->( dbSkip() )
				EndIf
			End While
		EndIf
	Next nRecTrf
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Carregando as Transferencias.                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If ( ( nRecsTrf := Len( aRecTrf ) ) > 0 )

	For nRecTrf := 1 To nRecsTrf

		/*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Posiciona no Registro                                          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		SRE->( dbGoto( aRecTrf[ nRecTrf , 1 ] ) )

		/*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Armazena o Maior Recno para o aSort                            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nMaxRecTrf := Max( nMaxRecTrf , aRecTrf[ nRecTrf , 1 ] )

		/*
	    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Empresas fTransf(aTransf,,lEmp)  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If (;
				( lEmp );	//Transferencia de Empresa
				.and.;
				!( lFil );	//Nao Transferencia de Filial
				.and.;
				!( lCct );	//Nao Transferencia de Centro de Custo
				.and.;
				!( lMat );	//Nao Transferencia de Matricula
				.and.;
				!( lProc );	//Nao Transferencia de Processos
				.and.;
				!( ldepto);	//Nao Transferencia de Departamentos
				.and.;
				!( lPosto);	//Nao Transferencia de Postos
				.and.;
				SRE->(;
						!( RE_EMPD == RE_EMPP );
						.and.;
						Eval( bIgual );
					);
			)
			If SRE->( Eval( bData ) .and. Eval( bE ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Filiais na Mesma Empresa fTransf(aTransf,,lEmp,lFil)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processos
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval(bIgual);
						  );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEF ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Centros de Custo na Mesma Empresa e Filial fTransf(aTransf,,lEmp,lFil,lCct)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processos
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;					
					SRE->(;
								!( RE_CCD == RE_CCP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
						 );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFC ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Departamentos na Mesma Empresa e Filial fTransf(aTransf,,lEmp,lFil,lCct)   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processos
					.and.;
					( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;					
					SRE->(;
						!( RE_DEPTOD == RE_DEPTOP );
						.and.;
						( RE_EMPD == RE_EMPP );
						.and.;
						( RE_FILIALD == RE_FILIALP );
						.and.;
						Eval( bIgual );
				 );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFD ) )
				SRE->( Eval( bAddTrf ) )
			EndIf	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Departamentos na Mesma Empresa, Filial e Cc fTransf(aTransf,,lEmp,lFil,lCct) ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ */
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					 ( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processos
					.and.;
					( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;					
					SRE->(;
								!( RE_DEPTOD == RE_DEPTOP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								Eval( bIgual );
						 );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFCD ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Postos na Mesma Empresa e Filial fTransf(aTransf,,lEmp,lFil,lCct)          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processos
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					( lPosto );	//Nao Transferencia de Postos
					.and.;					
					SRE->(;
								!( RE_POSTOD == RE_POSTOP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
						 );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFT ) )
				SRE->( Eval( bAddTrf ) )
			EndIf	

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Empresa, Filial e Centro de Custo fTransf(aTransf,,lEmp,lFil,lCct,lMat) ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processos
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!(RE_MATD == RE_MATP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFCM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Empresa, Filial e Departamento fTransf(aTransf,,lEmp,lFil,lCct,lMat)    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (; 
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processos
					.and.;
					( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!(RE_MATD == RE_MATP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_DEPTOD = RE_DEPTOP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFDM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Processo na Mesma Empresa, Filial e Centro de Custo fTransf(aTransf,,lEmp,lFil,lCct,lMat,lProc)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					( lProc );	//Nao Transferencia de Processos
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_PROCESD == RE_PROCESP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
						 );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFP ) )
				SRE->( Eval( bAddTrf ) )
			EndIf 
			
   		/* 
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Processo na Mesma Empresa, Filial e Departamento fTransf(aTransf,,lEmp,lFil,lCct,lMat,lProc)   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					( lProc );	//Nao Transferencia de Processos
					.and.;
					( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_PROCESD == RE_PROCESP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_DEPTOD == RE_DEPTOP );
								.and.;
								Eval( bIgual );
						 );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFDP ) )
				SRE->( Eval( bAddTrf ) )
			EndIf    

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Centros de Custo na Mesma Empresa fTransf(aTransf,,lEmp,,lCct)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_CCD == RE_CCP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bEC ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Departamentos na Mesma Empresa fTransf(aTransf,,lEmp,,lCct)   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_DEPTOD == RE_DEPTOP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bED ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

	/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Postos na Mesma Empresa fTransf(aTransf,,lEmp,,lCct)          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_POSTOD == RE_POSTOP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bET ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
	/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Postos na Mesma Filial fTransf(aTransf,,lEmp,,lCct)           ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_POSTOD == RE_POSTOP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;								
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bFT ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
			
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Postos               FTransf(aTransf,,lEmp,,lCct)             ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
							!( RE_POSTOD == RE_POSTOP );
							.and.;							
							Eval( bIgual );
						);
				)	
			If SRE->( Eval( bData ) .and. Eval( bT ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

	
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Processos na Mesma Empresa fTransf(aTransf,,lEmp,,lCct)    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					( lProc );	//Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_PROCESD == RE_PROCESP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bEP ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Empresa e Centro de Custo fTransf(aTransf,,lEmp,,lCct,lMat)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Empresa
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								Eval( bIgual );
						  );
				)	
			If SRE->( Eval( bData ) .and. Eval( bECM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Empresa e Processo fTransf(aTransf,,lEmp,,lCct,lMat)		 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Empresa
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					( lProc );	//Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_PROCESD == RE_PROCESP );
								.and.;
								Eval( bIgual );
						  );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEPM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Empresa fTransf(aTransf,,lEmp,,,lMat)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc ); //Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!(RE_MATD == RE_MATP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
				)			
			If SRE->( Eval( bData ) .and. Eval( bEM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Filiais fTransf(aTransf,,,lFil)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					( !( lEmp ) .Or. lVerEmpFil );	//Nao Transferencia de Empresa
					.and.;
					( lFil .Or. lVerEmpFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc ); //Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;					
					SRE->(;
								!( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
						  );
				)
			If SRE->( Eval( bData ) .and. Eval( bF ) )
				If !lVerEmpFil
					SRE->( Eval( bAddTrf ) )
				Else
					SRE->( Eval( bAddTrf2 ) )
				EndIf
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Centros de Custo na Mesma Filial fTransf(aTransf,,,lFil,lCct)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc ); //Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_CCD == RE_CCP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bFC ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Departamentos  na Mesma Filial fTransf(aTransf,,,lFil,lCct)  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc ); //Nao Transferencia de Processo
					.and.;
					( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_DEPTOD == RE_DEPTOP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bFD ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Departamentos                                                ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc ); //Nao Transferencia de Processo
					.and.;
					( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_DEPTOD == RE_DEPTOP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bD ) )
				SRE->( Eval( bAddTrf ) )
			EndIf


		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Processo na Mesma Filial fTransf(aTransf,,,lFil,lCct)		³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					( lProc ); 	//Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_PROCESD == RE_PROCESP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bFP ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Filial e Centro de Custo fTransf(aTransf,,,lFil,lCct,lMat)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc ); //Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								Eval( bIgual );
							);
				)			
			If SRE->( Eval( bData ) .and. Eval( bFCM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Filial e Processo fTransf(aTransf,,,lFil,lCct,lMat)	³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					( lProc ); 	//Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_PROCESD == RE_PROCESP );
								.and.;
								Eval( bIgual );
							);
				)			
			If SRE->( Eval( bData ) .and. Eval( bFPM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula na Mesma Filial fTransf(aTransf,,,lFil,,lMat)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc ); //Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
							);
				)			
			If SRE->( Eval( bData ) .and. Eval( bFM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Centros de Custo fTransf(aTransf,,,,lCct)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_CCD == RE_CCP );
								.and.;
								Eval( bIgual );
						  );
				)		  
			If SRE->( Eval( bData ) .and. Eval( bC ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Processos fTransf(aTransf,,,,lCct)		³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					( lProc );	//Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_PROCESD == RE_PROCESP );
								.and.;
								Eval( bIgual );
						  );
				)		  
			If SRE->( Eval( bData ) .and. Eval( bP ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula no Mesmo Centro de Custo fTransf(aTransf,,,,lCct,lMat)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								Eval( bIgual );
						  );
				)	
			If SRE->( Eval( bData ) .and. Eval( bCM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula no Mesmo processo fTransf(aTransf,,,,lCct,lMat )      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					( lProc );	//Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								( RE_PROCESD == RE_PROCESP );
								.and.;
								Eval( bIgual );
						  );
				)	
			If SRE->( Eval( bData ) .and. Eval( bPM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Matricula fTransf(aTransf,,,,,lMat)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc ); //Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					SRE->(;
								!( RE_MATD == RE_MATP );
								.and.;
								Eval( bIgual );
						 );
				)		 	
			If SRE->( Eval( bData ) .and. Eval( bM ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias                                        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf SRE->(;
						!( lEmp );			//Nao Transferencia de Empresa
						.and.;
						!( lFil );			//Nao Transferencia de Filial
						.and.;
						!( lCct );			//Nao Transferencia de Centro de Custo
						.and.;
						!( lMat );			//Nao Transferencia de Matricula
						.and.;
						!( lProc );			//Nao Transferencia de Processo
						.and.;
						!( lDepto );	//Nao Transferencia de Deptos
						.and.;
						!( lPosto );	//Nao Transferencia de Postos
						.and.;
						Eval( bIgual );
						.and.;
						Eval( bData );
						.and.;
						Eval( bFM );
					 )
				SRE->( Eval( bAddTrf ) )
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item Contabil e Classe de Valor  fTransf(aTransf,,,,lItmClvl) ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil e Classe de Valor
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								Eval( bIgual );
						  );
				)		  
			If SRE->( Eval( bData ) .and. Eval( bIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor na Mesma Empresa fTransf(aTransf,,lEmp,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf ( lItemClvl;
					.and.;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil e Classe de Valor
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP) );
								.and.;
								!( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bEIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor na Mesma Filial fTransf(aTransf,,lFil,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								!( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
							);
				)	
			If SRE->( Eval( bData ) .and. Eval( bFIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor na Mesma Empresa e Filial fTransf(aTransf,,lEmp,lFil,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );	//Nao Transferencia de Deptos
					.and.;
					!( lPosto );	//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
                           );
				)	
			If SRE->( Eval( bData ) .and. Eval( bEFIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
			
			/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor no Mesmo Centro de Custo fTransf(aTransf,,lCct,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								Eval( bIgual );
							);	
					)	
			If SRE->( Eval( bData ) .and. Eval( bCIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
			
						/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor da Mesma Empresa e Centro Custo fTransf(aTransf,lEmp,,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
					)			
			If SRE->( Eval( bData ) .and. Eval( bECIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor da Mesma Filial e Centro Custo fTransf(aTransf,,lFil,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
							);
					)			
			If SRE->( Eval( bData ) .and. Eval( bFCIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor da Mesma Empresa, Filial e Centro Custo fTransf(aTransf,,,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					( lCct );	//Transferencia de Centro de Custo
					.and.;
					!( lMat );	//Nao Transferencia de Empresa
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_CCD == RE_CCP );
								.and.;
								( RE_FILIALD == RE_FILIALP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
					)			
			If SRE->( Eval( bData ) .and. Eval( bEFCIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor da Mesma Matricula fTransf(aTransf,lMat,,,lItmClvl)  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_MATD == RE_MATP );
								.and.;
								Eval( bIgual );
							);
					)			
			If SRE->( Eval( bData ) .and. Eval( bMIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf						
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor da Mesma Empresa e Matricula fTransf(aTransf,lEmp,lMat,,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					( lEmp );	//Transferencia de Empresa
					.and.;
					!( lFil );	//Nao Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_MATD == RE_MATP );
								.and.;
								( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
					)			
			If SRE->( Eval( bData ) .and. Eval( bEMIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor da Mesma Filial e Matricula fTransf(aTransf,lFil,lMat,,,lItmClvl)³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					!( lEmp );	//Nao Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_MATD == RE_MATP );
								.and.;
								!( RE_FILIALD == RE_FILIALP );
								.and.;
								Eval( bIgual );
							);
					)			
			If SRE->( Eval( bData ) .and. Eval( bFMIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
					/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Todas as Transferencias entre Item e Classe Valor da Mesma Empresa, Filial e Matricula fTransf(aTransf,lFil,lMat,,,lItmClvl)  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		ElseIf (lItemClvl;
					.and.;
					( lEmp );	//Transferencia de Empresa
					.and.;
					( lFil );	//Transferencia de Filial
					.and.;
					!( lCct );	//Nao Transferencia de Centro de Custo
					.and.;
					( lMat );	//Transferencia de Matricula
					.and.;
					!( lProc );	//Nao Transferencia de Processo
					.and.;
					!( lDepto );//Nao Transferencia de Deptos
					.and.;
					!( lPosto );//Nao Transferencia de Postos
					.and.;
					(lItmClvl); //Transferencia de Item Contabil
					.and.;
					SRE->(;
								(!( RE_ITEMD == RE_ITEMP );
								.Or.;
								!( RE_CLVLD == RE_CLVLP ));
								.and.;
								( RE_MATD == RE_MATP );
								.and.;
								!( RE_FILIALD == RE_FILIALP );
								.and.;
								!( RE_EMPD == RE_EMPP );
								.and.;
								Eval( bIgual );
							);
					)			
			If SRE->( Eval( bData ) .and. Eval( bEFMIV ) )
				SRE->( Eval( bAddTrf ) )
			EndIf
		EndIf
	
	Next nRecTrf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Ordena o Array aTransf em Ordem Crescente de Data e Recno()   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nMaxRecTrf := Len( AllTrim( Str( nMaxRecTrf ) ) ) //Obtendo o Tamanho para StrZero()
	aSort( aTransf , NIL , NIL , { |x,y| Dtos( x[7] ) + StrZero( x[13] , nMaxRecTrf ) < ( Dtos( y[7] ) + StrZero( x[13] , nMaxRecTrf ) ) } )

EndIf

SRE->( dbSetOrder( nSreSvOrder ) )

If Empty( aTransf )
	aTransf := aClone( aLastTrf )
EndIf

Return( !Empty( aTransf ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTransfItcl ³ Autor ³Reginaldo Gomes Ribeiro³ Data ³25/01/2010³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Pesquisar Transferencias de Item Contabil e Classe Valor      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTransf    =  Array com as Transferencias do Funcionario.    ³±±
±±³          ³ uData      =  Apenas Transferencias na Data Selecionada. Se  ³±±
±±³          ³               for Passada como "String" de Mes/Ano ira   Re  ³±±
±±³          ³               tornar Todas as Transferencias desse  Periodo  ³±±
±±³          ³               mas, se for como "Data", ira retornar  apenas  ³±±
±±³          ³ lNoRept    =  Nao Armazena Itens Iguais.                     ³±±
±±³          ³ lOrigem    =  Executar, tambem, a Pesquisa pela Origem       ³±±
±±³          ³ Obs.: Se Nenhum dos Parametros Logicos ou de Data For passa  ³±±
±±³          ³       do o Array contera todas as Transferencias do  Funcio  ³±±
±±³          ³       nario.                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fTransfItcl( aTransf , uData , lNoRept , lOrigem )
DEFAULT lNoRept := .F.
DEFAULT lOrigem	:= .T. 
Return( fTransf( @aTransf , uData , .F. , .F. , .F. , .F. , lNoRept , lOrigem, .F. , .F. , .F.,.T. ) )
