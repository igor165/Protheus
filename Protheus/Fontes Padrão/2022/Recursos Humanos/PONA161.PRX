#INCLUDE "PONA160.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "FILEIO.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "HEADERGD.CH"

#DEFINE Confirma 1
#DEFINE Abandona 0

Static lPonap160Block
Static lIntTAF		:= ((SuperGetMv("MV_RHTAF",, .F.,cFilAnt) == .T.) .AND. Val(SuperGetMv("MV_FASESOC",/*lHelp*/,' ',cFilAnt)) >= 2 )
Static cVersEnvio	:= ""
Static lDel         := .T.
Static aRecDel      := {}
Static lMiddleware	:= If( cPaisLoc == 'BRA' .AND. Findfunction("fVerMW"), fVerMW(), .F. )
Static lCpoIntTaf
Static aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[2]Ofuscamento
Static lOfuscaNom	:= If(aOfusca[2], Len(FwProtectedDataUtil():UsrNoAccessFieldsInList({"RA_NOME"})) > 0, .F.) // CAMPOS SEM ACESSO
Static lUseCalFis	//Variavel para Controle de Uso do Calendario Fisico

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ PONA161  ³ Autor ³ Equeipe Advanced RH   ³ Data ³ 18.11.97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Manuten‡„o de Transferencias de Turnos                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Gen‚rico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Marinaldo   ³17/10/01³Melhor³Alteracao na Tela de Transferencia de  Tur³±±
±±³            ³--------³------³no. 									  ³±±
±±³            ³--------³------³Alteracao nas Validacoes de Linha Digitada³±±
±±³            ³--------³------³e de Todo o Conteudo Digitado Incluindo  a³±±
±±³            ³--------³------³funcao PN161LinOk()						  ³±±
±±³            ³--------³------³Inclusao da Funcao PN161PutTnoSeq() que se³±±
±±³            ³--------³------³ra utilizada para retornar o Turno e a  Se³±±
±±³            ³--------³------³quencia atual do Funcionario.			  ³±±
±±³            ³--------³------³Inclusao da Funcao PN161VldSeq() que  sera³±±
±±³            ³--------³------³ra utilizada para validar as Sequencias di³±±
±±³            ³--------³------³ditadas.								  ³±±
±±³Marinaldo   ³06/11/01³010922³Tratamento de Troca de Regra de  Apontamen³±±
±±³            ³--------³------³to.    									  ³±±
±±³Mauricio MR ³18/01/02³012616³ Criado Ponto de Entrada para emissao de  ³±±
±±³            ³        ³------³ documento logo apos a gravacao da troca  ³±±
±±³            ³        ³------³ de turno.                                ³±±
±±³Marinaldo   ³20/02/02³Acerto³Retirada da Funcao e Referencia a   Funcao³±±
±±³            ³        ³------³AcertaSX3() pois as validacoes e os campos³±±
±±³            ³        ³------³ja foram atualizados no ATUSX.            ³±±
±±³            ³        ³------³Retirada da Verificacao de Existencia  dos³±±
±±³            ³        ³------³Campos PF_REGRADE e PF_REGRAPA pois  esses³±±
±±³            ³        ³------³Campos ja foram incluidos no ATUSX.		  ³±±
±±³Marinaldo   ³12/03/02³Acerto³Quando montar o Array aSPF so   considerar³±±
±±³            ³        ³------³o Elemento que possui todas as informacoes³±±
±±³Marinaldo   ³03/05/02³Melhor³Verificar a Existencia dos Pontos de Entra³±±
±±³            ³        ³      ³da no Inicio do Programa.                 ³±±
±±³Mauricio MR ³21/05/02³15597 ³Reinicializada a variavel aTnoGetInfoTab a³±±
±±³            ³        ³      ³cada funcionario. Assim, apos realizarmos ³±±
±±³            ³        ³      ³1(uma) troca de turno, quando procedemos a³±±
±±³            ³        ³      ³troca de turno para outro funcionario, ga-³±±
±±³            ³        ³      ³rantimos que serao carregadas todas as tro³±±
±±³            ³        ³      ³cas deste funcionario em substituicao as  ³±±
±±³            ³        ³      ³trocas anteriores pertencentes ao funciona³±±
±±³            ³        ³      ³rio que o precedeu.                       ³±±
±±³Marinaldo   ³03/06/02³Melhor³Dimensionamento Automatico do Dialogo    e³±±
±±³            ³--------³------³da GetDados								  ³±±
±±³Marinaldo   ³25/07/02³Melhor³Validar os Turnos e Sequencias   Digitadas³±±
±±³            ³--------³------³em LinhaOk() e TudoOk()					  ³±±
±±³Marinaldo   ³25/07/02³Melhor³Inclusao de Consulta Via Tecla <F3>   para³±±
±±³            ³--------³------³os Campos de Sequencia 					  ³±±
±±³Marinaldo   ³08/08/02³Melhor³Inclusao de Botao para Consulta a   Tabela³±±
±±³            ³--------³------³de Horario             					  ³±±
±±³MauricioMR  ³25/08/03³------³ Substituicao de Header por Protheus.ch   ³±±
±±|Marinaldo   ³21/04/04³Melhor³Tratamento nos Lock dos Registros e Delete|±±
±±³            ³--------³------³e Revisao do codigo    					  ³±±
±±|Marinaldo   ³29/04/04³Melhor³Melhoria na performance para a montagem da|±±
±±³            ³--------³------³do SPJ                 					  ³±±
±±|Marinaldo   ³08/07/04³Melhor³Melhoria nas Validacoes de LinhaOk,TudOk. |±±
±±³Luiz Gustavo|29/11/06³------³ Inclusao da funcao MenuDef() para        ³±±
±±³      	   ³--------³------³ versao 9.12                              ³±±
±±³Luiz Gustavo³05/02/07³      ³Retiradas funcoes de ajuste de dicionario.³±±
±±³Pedro Eloy  ³28/03/07³121830³Ajuste no parametro GdMontaCols para WT.  ³±±
±±³Leandro Dr  ³21/08/08³      ³Ajuste na msg de erro p/ quando a primeira³±±
±±³            ³        ³      ³data e diferente da data de admissao.     ³±±
±±³Christiane V³02/09/11³022823³Ajuste na apresentação de msg de erro na  ³±±
±±³            ³        ³ /2011³primeira inclusão.                        ³±±
±±³Mohanad Odeh³03/01/12³032121³Inclusão da variável nOpcAuto como parame_³±±
±±³            ³        ³ /2011³tro da função PONA161()                   ³±±
±±³            ³        ³TEDUCT³                                          ³±±
±±³Aldo Marini ³26/06/12³P11.7 ³REQ152-Inclusao da Transf.de Turno em Lote³±±
±±³M. Silveira ³24/10/13³THVXOF³Ajuste na PN161LinOK p/ tornar a validacao³±±
±±³            ³        ³      ³dos registros mais eficiente.             ³±±
±±³Nivia Ferre ³19/08/13³M_RH001³Inclusão da Jornada de Trabalho          ³±±
±±                      ³002086 ³30,35 ou 40hs                            ³±±
±±³Marcos Perei³28/04/14³M_RH001³Ajustes de validações                    ³±±
±±                      ³002085 ³                                         ³±±
±±³Oswaldo L   ³17/08/17³DRHPON ³Liberar troca turno em Lote + Intg.TSA   ³±±
±±³            ³        ³TP-1515³                                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³						ATENCAO										  ³
³Foi criado o tratamento para o Parametro de utilizacao do SPJ a 	  ³
³partir da versao 10 MEX (Fase 4), no caso de utilizacao do SPJ deve  ³
³ser alterada a consulta padrao do campo sequencia (PF_SEQUEDE/ 	  ³
³PF_SEQUEATE) no SX3 para chamar a antiga funcao de consulta padrao   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
/*/
Function PONA161(nOpcAuto)

Local aArea				:= GetArea()
Local aIndexSRA			:= {}

Private lGestPubl 	:= fUsaGFP()	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

Private bFiltraBrw	:= {|| NIL }
Private dPerIni		:= Ctod("//")
Private dPerFim		:= Ctod("//")
Private cCadastro		:= OemToAnsi(STR0011 ) // 'Tranferencia de Turno de Trabalho'
Private aRotina		:= MenuDef()
Private oPerFch		:= RHPERIODO():New()   // Objeto que contem os dados do ultimo Periodo Fechado PONTO (SRA)
Private oPeriodo	:= RHPERIODO():New()
Private lPONA161Inc := .F.
Private nPosDif		:= 0
Private cSeq		:= ""
Private cTurno		:= ""
Private dIniCal		:= Ctod("//")
Private dFimCal		:= Ctod("//")
Private lPONA161Flt := .F.					//Verifica se havera filtro de Browse para o PONA161
Private aIniPadFun	:= {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para Controle de Uso do SPJ 								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Private lUseSPJ := ( SuperGetMv("MV_USESPJ",NIL,"0")  == "1" )
DEFAULT lPonap160Block := ExistBlock('PONAP160')

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para Controle de Uso do SPJ 								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
lUseSPJ := ( SuperGetMv("MV_USESPJ",NIL,"0")  == "1" )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para Controle de Uso do Calendario Fisico					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
lUseCalFis	:= ( SuperGetMv("MV_CALFIS",NIL,"0")  == "0" )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se o Modo de Acesso do SPF e SRA foram iguais e se este  ulti³
³mo nao estiver vazio.                                                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ValidArqPon() .and. ChkVazio('SRA')

	If nOpcAuto <> Nil
		Do Case
			Case nOpcAuto == 3
				INCLUI := .T.
				ALTERA := .F.
			Case nOpcAuto == 4
				INCLUI := .F.
				ALTERA := .T.
			OtherWise
				INCLUI := .F.
				ALTERA := .F.
		EndCase

		dbSelectArea('SRA')
		nPos := Ascan(aRotina,{|x| x[4]== nOpcAuto})
		If ( nPos <> 0 )
			bBlock := &( "{ |a,b,c,d,e| " + aRotina[ nPos,2 ] + "(a,b,c,d,e) }" )
			Eval( bBlock, Alias(), (Alias())->(Recno()),nPos)
		EndIf
	Else
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		dbSelectArea('SRA')
		cFiltraRh	:= ChkRh("PONA161","SRA","1")
		bFiltraBrw 	:= {|| FilBrowse("SRA",@aIndexSRA,@cFiltraRH) }
		Eval( bFiltraBrw )
		lPONA161Flt := .T. //Existe Filtro

		mBrowse( 6, 1,22,75,"SRA",,,,,,fCriaCor() )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		EndFilBrw("SRA",aIndexSra)

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura a Integridade do Sistema                            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		dbSelectArea('SPF')
		dbSetOrder(1)
		dbSelectArea('SRA')
	EndIf
EndIF

RestArea( aArea )

Return( NIL )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161Verif³ Autor ³ Nivia Ferreira ³        Data ³ 19.08.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Verifica se foi chamado pelo portal                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PN161Verif(ExpC1,ExpN1,ExpN2)                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Filial                                             ³±±
±±³          ³ ExpC2 = Matricula                                          ³±±
±±³          ³ ExpC3 = Data da Alteração                                  ³±±
±±³          ³ ExpC4 = Jornada de Trabalho 30,35 ou 40 hs                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161Verif(cPar1,cPar2,cPar3,cPar4)
Local nVerif	:= 1
Private bHistorico := .F.
Private dDataTra   := dDataBase
Private cFilialFun := ''
Private cMatric    := ''
Private cJornad    := (Space( TamSX3("RA_JORNRED")[1] ))

If IsInCallStack("TCFA040")//Portal
	// filial,matricula,data alt, op jornada (30,35 ou 40hs)
	cFilialFun  := cPar1
	cMatric     := cPar2
	cJornad     := cPar4
	dDataTra    := stod(cPar3)
	bHistorico  := .T.

	oPerFch	  := RHPERIODO():New()   // Objeto que contem os dados do ultimo Periodo Fechado PONTO (SRA)
	oPeriodo	  := RHPERIODO():New()

	PN161Inc("P")
Else
	cFilialFun := RA_FILIAL
	cMatric    := RA_MAT
	cJornad    := strzero(RA_JORNRED,2)

	Pn161Atu('SRA',Recno(),2,.t.,nVerif)
Endif

Return( NIL )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161Inc³ Autor ³ Nivia Ferreira ³          Data ³ 20.08.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Tela de inclusão da jornada de trabalho                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PN161Inc()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161Inc(Tipo)

Local bOk      := {|| If(ValidaTur(Val(cComb2)), (lRet := .T.,oDlg:End()),)}
Local bCancel  := {||oDlg:End()}
Local aButtons := {}
Local aComb2   := {}
Local aComb3   := {"","1-Anual","2-Semestral"}
Local aComb4   := {"","1-Matutino","2-Vespertino","3-Noturno","4-Integral",""}
Local cAnoSem  := Space(TAMSX3("RA_ANOSEME")[1])
Local nJornada := 0
Local lRet     := .F.
Local lLock	   := .F.


Local oDlg
Local oGet1
Local oGet2
Local oGet4
Local oGet5
Local oComb2
Local oComb3
Local oComb4
Local cComb2	:= ""
Local cComb3	:= ""
Local cComb4	:= ""

Private cTurno 	:= Space(TAMSX3("PF_TURNOPA")[1])
Private cSeqIni 	:= Space(TAMSX3("PF_SEQUEPA")[1])
Private cRegra 	:= Space(TAMSX3("PF_REGRAPA")[1])
Private c_TipoI 	:= Tipo //E-estudante, P-portal ou T-turno

dbSelectArea("SRA")
DbSetOrder(1)
DbSeek( cFilialFun + RTrim(cMatric) )

If AllTrim(SRA->RA_SITFOLH) $ "D,T"
	MsgInfo( OemToAnsi(STR0162)) //"Transferência não efetuada devido o funcionário estar demitido/transferido."
	Return
Endif

If (c_TipoI == 'E') .And. (!SRA->RA_CATFUNC $ "2,3,6") 	//Horario especial para estudante
															  	//2=Efetivo 3=Efeito em comissao 6=Comissionado
	MsgInfo( OemToAnsi(STR0168))							//'Servidor não pode ser alterado.'
	Return
Endif

cTurno := RA_TNOTRAB
cRegra := RA_REGRA
cSeqIni:= RA_SEQTURN

If 	c_TipoI == 'E'
	cAnoSem := RA_ANOSEME

	aComb3 := {}
	If  RA_TPCUEST == '1'
		aComb3:= {STR0195,STR0196,""} //"1-Anual","2-Semestral"
	Else
		aComb3:= {STR0196,STR0195,""} //"2-Semestral","1-Anual"
	Endif

	If RA_PERESTU == '1'
		aComb4[1]:= STR0197  //"1-Matutino"
	ElseIf 	RA_PERESTU == '2'
			aComb4[1]:= STR0198 //"2-Vespertino"
	ElseIf 	RA_PERESTU == '3'
			aComb4[1]:= STR0199 //"3-Noturno"
	ElseIf 	RA_PERESTU == '4'
			aComb4[1]:= STR0200 //"4-Integral"
	Endif

Endif

If bHistorico
	Aadd(aButtons,{OemToAnsi(STR0169), {|| PONA161(2)}, OemToAnsi(STR0169)})  //'Historico' //'Historico'
	Aadd(aComb2,cJornad)
Else
	If cJornad == '30'
		aComb2:= {cJornad,"35","40"}
	ElseIf cJornad == '35'
		aComb2:= {cJornad,"30","40"}
	Else
		aComb2:= {"40","30","35"}
	EndIf
Endif

Begin Sequence
If c_TipoI == 'E'
	DEFINE MSDIALOG oDlg TITLE STR0011 FROM 9,0 TO 41,55 OF oMainWnd   //Transferência de Turno de Trabalho
Else
	DEFINE MSDIALOG oDlg TITLE STR0011 FROM 9,0 TO 32,55 OF oMainWnd   //Transferência de Turno de Trabalho
Endif

		@ 020,005 SAY STR0201+OemToAnsi(STR0012)    PIXEL //'Filial/','Matricula'
		@ 020,045 SAY RA_FILIAL +'/'+ RA_MAT PIXEL

		@ 033,005 SAY OemToAnsi(STR0013) OF oDlg PIXEL
		@ 033,045 SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME))  PIXEL

		@ 046,005 SAY OemToAnsi(STR0015) PIXEL
		@ 046,045 SAY Dtoc(SRA->RA_ADMISSA) PIXEL

		@ 056,000 SAY "_____________________________________________________________________________" PIXEL

		@ 069,005 SAY OemToAnsi(STR0170) PIXEL    //'Data da Alteração:'
		@ 069,080 MSGET oGet1 VAR dDataTra PICTURE "@D" SIZE 45,8 OF oDlg PIXEL HASBUTTON

		@ 090,045 SAY OemToAnsi(STR0171)  PIXEL     		//'De'
		@ 090,080 SAY OemToAnsi(STR0172)  PIXEL     		//'Para'

		@ 100,005 SAY OemToAnsi(STR0173)    OF oDlg PIXEL 	//'Turno'
		@ 100,045 SAY RA_TNOTRAB  OF oDlg PIXEL
		@ 100,080 MSGET oGet2 VAR cTurno  PICTURE "@!" VALID PONA161DUV(2) F3 "SR6" SIZE 20,3 OF oDlg PIXEL HASBUTTON
		@ 100,120 MSGET Alltrim(POSICIONE("SR6",1,XFILIAL("SR6")+cTurno,"R6_DESC")) VALID {|| ,oDlg:Refresh()} SIZE 90,8  OF oDlg Pixel WHEN .F.

		@ 113,005 SAY OemToAnsi(STR0174)    OF oDlg PIXEL 	//'Regra'
		@ 113,045 SAY RA_REGRA    OF oDlg PIXEL
		@ 113,080 MSGET Get5 VAR cRegra	PICTURE "@!" VALID PONA161DUV(4) F3 "SPA"  SIZE 20,3 OF oDlg PIXEL HASBUTTON
		@ 113,120 MSGET Alltrim(POSICIONE("SPA",1,XFILIAL("SPA")+cRegra,"PA_DESC")) VALID {|| ,oDlg:Refresh()} SIZE 90,8  OF oDlg Pixel WHEN .F.

		@ 126,005 SAY OemToAnsi(STR0175) OF oDlg PIXEL 	//'Sequencia'
		@ 126,045 SAY RA_SEQTURN   OF oDlg PIXEL
		@ 126,080 MSGET oGet4 VAR cSeqIni	PICTURE "@!" VALID PONA161DUV(3) F3 "XPJ" SIZE 20,3 OF oDlg PIXEL HASBUTTON
		@ 126,120 MSGET Alltrim(fDesc("SR6",cTurno,"R6_DESC",,xFilial("SPJ"),1)) VALID {|| ,oDlg:Refresh()} SIZE 90,8  OF oDlg Pixel WHEN .F.

		@ 139,005 SAY OemToAnsi(STR0176)   OF oDlg PIXEL   //'Jornada'
		@ 139,045 SAY RA_JORNRED   OF oDlg PIXEL
		@ 139,080 MSCOMBOBOX oComb2 VAR cComb2 ITEMS aComb2 SIZE 30,8 OF oDlg PIXEL

		If c_TipoI == 'E'

			@ 149,000 SAY "_____________________________________________________________________________" PIXEL
			@ 160,050 SAY OemToAnsi(STR0177)  PIXEL 				//'Horário Especial de Estudante'

			@ 178,005 SAY OemToAnsi(STR0178) OF oDlg PIXEL 		//'Tipo Curso'
			@ 179,080 MSCOMBOBOX oComb3 VAR cComb3 ITEMS aComb3 SIZE 50,8 OF oDlg PIXEL

			@ 191,005 SAY OemToAnsi(STR0179) OF oDlg PIXEL 	 	//'Ano/Semestre'
			@ 191,080 MSGET oGet5 VAR cAnoSem	PICTURE "@E 99" F3 SIZE 15,8 OF oDlg PIXEL HASBUTTON

			@ 204,005 SAY OemToAnsi(STR0180) OF oDlg PIXEL       //'Período'
			@ 204,080 MSCOMBOBOX oComb4 VAR cComb4 ITEMS aComb4 SIZE 50,8 OF oDlg PIXEL

		Endif

	ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar(oDlg,bOk,bCancel,nil,aButtons)

End Sequence


If lRet

	If	Empty(SRA->RA_SEQTURN) .Or. Empty(SRA->RA_REGRA)
		If	!MsgYesNo(STR0205) //"Regra e/ou sequencia inicial está em branco no cadastro do servidor. O novo dado informado (Para) será utilizado também como inicial (De). Confirma ?""
			MsgInfo(STR0206) //"Transferência não efetuada, atualize a Regra e Seq Inicial no cadastro do Servidor."
			Return( NIL )
		Endif
	Endif

	Begin Transaction
	nJornada := Val(cComb2)


    //Inclusão - Transferencia de Turno
    //IF cTurno <> SRA->RA_TNOTRAB .Or. cRegra <> SRA->RA_REGRA .Or. cSeqIni <> SRA->RA_SEQTURN .Or. nJornada <> SRA->RA_JORNRED
	dbSelectArea("SPF")
	dbSetOrder(1)
	IF dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+Dtos(dDataTra))
		lLock := RecLock("SPF",.F.,.T.)
	Else
		lLock := RecLock("SPF",.T.,.T.)
	Endif
	IF ( lLock )
		PF_FILIAL  := SRA->RA_FILIAL
		PF_MAT     := SRA->RA_MAT
		PF_DATA    := dDataTra
		PF_TURNODE := SRA->RA_TNOTRAB
		If	Empty(SRA->RA_SEQTURN)
			PF_SEQUEDE := cSeqIni
		Else
			PF_SEQUEDE := SRA->RA_SEQTURN
		Endif
		IF	Empty(SRA->RA_REGRA)
			PF_REGRADE := cRegra
		Else
			PF_REGRADE := SRA->RA_REGRA
		Endif

		PF_JORNADE := SRA->RA_JORNRED
		PF_TURNOPA := cTurno
		PF_SEQUEPA := cSeqIni
		PF_REGRAPA := cRegra
		PF_JORNAPA := nJornada
		SPF->( MsUnLock() )
		SPF->( FKCOMMIT() )
 	Endif

	If c_TipoI == 'E'
       If SRA->RA_TPCUEST <> Substring(cComb3,1,1)
          GravaSR9(SRA->RA_FILIAL,SRA->RA_MAT,dDatabase,"RA_TPCUEST",Alltrim(Substring(cComb3,1,1)))
       Endif
       If SRA->RA_PERESTU <> Substring(cComb4,1,1)
          GravaSR9(SRA->RA_FILIAL,SRA->RA_MAT,dDatabase,"RA_PERESTU",Alltrim(Substring(cComb4,1,1)))
       Endif
       If SRA->RA_ANOSEME <> cAnoSem
          GravaSR9(SRA->RA_FILIAL,SRA->RA_MAT,dDatabase,"RA_ANOSEME",Alltrim(Str(cAnoSem)))
       Endif
       If SRA->RA_DTHREST <> dDataTra
          GravaSR9(SRA->RA_FILIAL,SRA->RA_MAT,dDatabase,"RA_DTHREST",DTOC(dDataTra))
       Endif
	Endif

    //Atualiza - Cadastro do Servidor
	RecLock("SRA",.F.)
	RA_TNOTRAB := cTurno
	RA_SEQTURN := cSeqIni
	RA_REGRA   := cRegra
	If (RA_JORNRED <> nJornada) .And. (!RA_CATFUNC $ "2/3/6") //Se alterou a jornada e servidor <> efetivo, efetivo em comissao e comissionado
	    RA_HRSEMAN := nJornada
	    RA_HRSMES  := nJornada / 0.2
	Endif
	RA_JORNRED := nJornada

	If c_TipoI == 'E'
       RA_TPCUEST := cComb3
       RA_PERESTU := cComb4
       RA_ANOSEME := cAnoSem
       	If empty(RA_TPCUEST) .and. empty(RA_PERESTU) .and. empty(RA_ANOSEME)
	       RA_DTHREST := ctod("//")
		Else
	       RA_DTHREST := dDataTra
	 	EndIf
	Endif
	SRA->(MsUnLock())

	End Transaction


	If RA_CATFUNC $ "2/3/6"  //2=Serv.Efetivo, 3=Serv.Efetivo em Comissão e 6=Servidor Comissionado
		//Chama rotina de publicação.
      	VDFA060({'PONA161',SRA->RA_MAT,SRA->RA_CATFUNC,DtoS(dDataTra),SRA->RA_FILIAL,SRA->RA_CIC,'SPF',dDataTra,'1'})
	Endif

   If c_TipoI == 'P'
      oReturn := 0
   Endif

Endif
Return( lRet )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GravaSR9  ³ Autor ³ Nivia Ferreira ³       Data ³ 23.08.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Grava tabela SR9                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GravaSR9                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GravaSR9(c_Filial,c_Mat,d_DataAl,c_Campo,c_Desc)
Local aArea    := GetArea()

  RecLock("SR9",.T.)
  R9_FILIAL := c_Filial
  R9_MAT    := c_Mat
  R9_DATA   := d_DataAl
  R9_CAMPO  := c_Campo
  R9_DESC   := c_Desc
  SR9->(MsUnLock())

RestArea( aArea )
Return()


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ValidaTur  ³ Autor ³ Nivia Ferreira ³       Data ³ 21.08.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Valida se ja foi efetuado a transferencia de turno         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ ValidaTur                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function ValidaTur(nJornada)
Local lRet	 	 := .T.
Local nX 		 := ''
Local aArea    := GetArea()
Local aAreaSPF := SPF->( GetArea() )
Local aAreaSRA := SRA->( GetArea() )

Local aPerAb   := {}
Local aPerFech := {}
Local aPerTodos:= {}


    If cTurno <> SRA->RA_TNOTRAB .Or. cRegra <> SRA->RA_REGRA .Or. cSeqIni <> SRA->RA_SEQTURN .Or. nJornada <> SRA->RA_JORNRED
		dbSelectArea("SPF")
		DbSetOrder(1)
	    If  (SPF->(DbSeek(SRA->(RA_FILIAL+RA_MAT)+DtoS(dDataTra),.t.)))
			MsgInfo( OemToAnsi(STR0181) , OemToAnsi(STR0107) )   //'Transferencia de Turno já cadastrada para essa data'
    	    lRet := .F.
   		ElseIf SPF->(PF_FILIAL+PF_MAT) == SRA->(RA_FILIAL+RA_MAT)
			MsgInfo( OemToAnsi(STR0204) , OemToAnsi(STR0107) )   //'A transferência tem que ser com data posterior à ultima já existente.'
    	    lRet := .F.
	    Endif
	Else
	    If cTurno == SRA->RA_TNOTRAB .And. cRegra == SRA->RA_REGRA .And. cSeqIni == SRA->RA_SEQTURN .And. nJornada == SRA->RA_JORNRED
    	   If c_TipoI == 'E'	//E-estudante, P-portal ou T-turno
			   If MsgYesNo(OemToAnsi(STR0167)) //'Transferencia de Turno não foi alterado. Confirma a alteração do horário especial para estudante?"
			      lRet := .T.
			   Else
			      lRet := .F.
			   Endif
		   Else
	   		   MsgAlert(OemToAnsi(STR0182),OemToAnsi(STR0183)) //'Transferencia de Turno não foi alterado' //'Atenção !!!'
 		       lRet := .F.
		   Endif
		Endif
    Endif

    If lRet
		//-aAdd(aPerAberto, RCH->({ 1-RCH_PER, 2-RCH_NUMPAG, 3-RCH_MES, 4-RCH_ANO, 5-RCH_DTINI, 6-RCH_DTFIM, 7-RCH_PROCES, 8-RCH_ROTEIR, 9-RCH_DTPAGO, 10-RCH_DTCORT}))
		fRetPerComp(Strzero(month(dDataTra),2) , Alltrim(Str(year(dDataTra))) , ,SRA->RA_PROCES ,fGetRotOrdinar() , @aPerAb , @aPerFech , @aPerTodos )

		If Len(aPerAb) == 0 .And. Len(aPerFech) == 0
			MsgInfo( OemToAnsi(STR0184)+' '+DtoC(dDataTra)+". "+ OemToAnsi(STR0185)  , '' )  //'Não existe Período de Pagamento criado para operação na data informada ' //'Processo não será efetivado. Criar período e processar novamente.'
			lRet := .F.

		ElseIf len(aPerAb) > 0
			For nX:= 1 to Len(aPerAb)
				If 	dDataTra >= aPerAb[nX][5] .And. dDataTra <= aPerAb[nX][6]
					If dDataTra > aPerAb[nX,10]
    	    			If 	c_TipoI == 'P'	//E-estudante, P-portal ou T-turno
    	    				lRet := .F.
			   				If MsgYesNo(OemToAnsi(STR0188)) //'Usuário devera recalcular a folha desse servidor. Confirma a efetivação?'
								 lRet := .T.
							EndIf

							Exit
	           			Endif
    	    		Endif
				Endif
			Next

		ElseIf len(aPerFech) > 0
			For nX:= 1 to Len(aPerFech)
				If 	dDataTra >= aPerFech[nX][5] .And. dDataTra <= aPerFech[nX][6]
					MsgInfo( OemToAnsi(STR0203)+' '+ OemToAnsi(STR0185)  , '' )  //'Período ja foi fechado.' //'Processo não será efetivado.'
   			   		lRet := .F.
    			Endif
			Next
	   Endif
	Endif

RestArea( aAreaSPF )
RestArea( aAreaSRA )
RestArea( aArea )
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161Atu  ³ Autor ³ Fernando Joly Siquini ³ Data ³ 18.11.97 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Programa de Vis.,Inc.,Alt. e Del. de Transf. de Turnos     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PN161ATU(ExpC1,ExpN1,ExpN2)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161ATU(cAlias,nReg,nOpcX,lManut,nVerif)

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local aArea			:= GetArea()
Local aButtons		:= {}
Local aNotFields	:= { "PF_FILIAL", "PF_MAT" }
Local aFields		:= {}
Local aAltera   	:= {}
Local aNaoAltera	:= {}
Local aQueryCond	:= {}
Local oDlg			:= NIL
Local bSet15		:= { || aIniPadFun := Array(0), IF( oGet:TudoOk() , ( nOpcA := Confirma , IIf( fVldDelGFP(aHeader,aCols),oDlg:End(), ) ) , nOpcA := Abandona ) }
Local bSet24		:= { || nOpcA := Abandona, aRecDel := {}, aIniPadFun := Array(0), oDlg:End() }
Local bDialogInit	:= { || EnchoiceBar( oDlg , bSet15 , bSet24 , NIL , aButtons ) , AlignObject(oDlg,{oPanel,oGet:oBrowse} , 1 , 2 , { 040 } ) }
Local cFil			:= xFilial( "SPF" , SRA->RA_FILIAL )
Local cMat			:= SRA->RA_MAT
Local cKey			:= ( cFil + cMat )
Local nOpcA			:= Abandona
Local nLoop			:= 0
Local nUsado   		:= 0
Local nPosData		:= 0
Local nPosSeq		:= 0
Local nPosTrn		:= 0
Local oFont
Local oGroup
Local oGet
Local oPanel
Local bSeekWhile	:= {|| SPF->PF_FILIAL + SPF->PF_MAT }
Local nDelete		:=  0
Local nRecAcol		:=  0
Local aRecAt		:= {}

Public aFields		:= {}

Default nVerif		:= 0
Default lManut		:= .f.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Coloca o cursor do Mouse em Estado de Espera				   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CursorWait()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega Array de Campos Alteraveis                           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cAlias := "SPF"

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega Ultimo Periodo Fechado Partir do SRA		   		   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If !Empty(SRA->RA_PRCFCH)
	oPerFch:cProcesso := SRA->RA_PRCFCH
	oPerFch:cPeriodo  := SRA->RA_PERFCH
	oPerFch:cRoteiro  := SRA->RA_ROTFCH
	oPerFch:cNumPagto := SRA->RA_NUPFCH
	oPerFch:GetPer()
Endif

oPeriodo:cProcesso := SRA->RA_PROCES
oPeriodo:PerSel()

dPerFim :=oPeriodo:dDataFim
dPerIni :=oPeriodo:dDataIni

Begin Sequence
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta a entrada de dados do arquivo                          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Private aColsAnt  		:= {}
	Private aRecnos  		:= {}
	Private aSPF			:= {}
	Private aTnoGetInfoTab	:= {}
	Private aHeader  		:= {}
	Private aCols    		:= {}
	Private aVirtual 		:= {}
	Private aVisual	 		:= {}
	Private aTela			:= {}
	Private aGets			:= {}

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas de Excecoes do Funcionario Antes da   ³
	³montagem do Calendario. Temos que realizar nesse momento pois ³
	³se deixarmos no 2o bloqueio abaixo, o Calendario podera ser di³
	³ferente em virtude de novas excecoes de outra sessao dessa ro ³
	³rotina.                                                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !PONA161Locks( nOpcX , cAlias, {}, ProcName() )
		Break
	EndIF

	dbSelectArea("SPF")
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega os Dados no aCols                                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aCols := GdMontaCols(	@aHeader	,;	//01 -> Array com os Campos do Cabecalho da GetDados
							@nUsado		,;	//02 -> Numero de Campos em Uso
							@aVirtual	,;	//03 -> [@]Array com os Campos Virtuais
							@aVisual	,;	//04 -> [@]Array com os Campos Visuais
							cAlias		,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
							aNotFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
							@aRecnos	,;	//07 -> [@]Array unidimensional contendo os Recnos
							cAlias   	,;	//08 -> Alias do Arquivo Pai
							cKey		,;	//09 -> Chave para o Posicionamento no Alias Filho
							bSeekWhile 	,;	// NIL 10 -> Bloco para condicao de Loop While
							NIL			,;	//11 -> Bloco para Skip no Loop While
							.T.			,;	//12 -> Se Havera o Elemento de Delecao no aCols
							.F.			,;	//13 -> Se cria variaveis Publicas
							.T.			,;	//14 -> Se Sera considerado o Inicializador Padrao
							NIL			,;	//15 -> Lado para o inicializador padrao
							NIL			,;	//16 -> Opcional, Carregar Todos os Campos
							NIL		 	,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
							aQueryCond	,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
							.F.			,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
							.F.			,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
							.F.			,;	//21 -> Carregar Coluna Fantasma
							.F.			,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
							NIL			,;	//23 -> Verifica se Deve Checar se o campo eh usado
							NIL			,;	//24 -> Verifica se Deve Checar o nivel do usuario
							.T.			,;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
							NIL			,;	//26 -> [@]Array que contera as chaves conforme recnos
							.F.			,;	//27 -> [@]Se devera efetuar o Lock dos Registros
							.F.			,;	//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
							NIL			 ;	//29 -> Numero maximo de Locks a ser efetuado
				)

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Armazena a posicao no aCols 								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nPosData := GdFieldPos("PF_DATA")
	nPosSeq  := GdFieldPos("PF_SEQUEDE")
	nPosTrn	 := GdFieldPos("PF_TURNODE")

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Em caso de inclusao do registro muda a data inicio para a data do funcionario³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( nOpcX == 3 .and. Len(aCols) == 1 )
		aCols[ 01, nPosData ] := SRA->RA_ADMISSA
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Cria as Variaveis de Memoria e Carrega os Dados Conforme o ar³
	³ quivo														   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nLoop := 1 To nUsado
		PutFileInEof( "SPF" )
		aAdd( aFields , aHeader[ nLoop , 02 ] )
		SetMemVar( aHeader[ nLoop , 02 ] , NIL , .T. , .T. , .F. , .T. , NIL )
	Next nLoop

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define os Campos Editaveis								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) )
		nLoops := Len( aVisual )
		For nLoop := 1 To nLoops
			aAdd( aNaoAltera , aVisual[ nLoop ] )
		Next nLoop
		nLoops := Len( aFields )
		For nLoop := 1 To nLoops
			IF ( aScan( aNaoAltera , { |cNaoA| cNaoA == aFields[ nLoop ] } ) == 0 )
				aAdd( aAltera , aFields[ nLoop ] )
			EndIF
		Next nLoop
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inclus„o com Registros											 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( ( nOpcX == 3 ) .and. ( Len(aRecnos) > 0 ) )
		If lPONA161Inc
			lPONA161Inc := .F.
			Break
		EndIf
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura o cursor do Mouse 								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		CursorArrow()
		Help(' ',1,'A160CREG')
		lRet := .F.
		Break
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Visualiza‡„o, Altera‡„o ou Exclus„o sem Registros				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	ElseIF (;
				(;
					( nOpcX == 2 );
					.or.;
					( nOpcX == 4 );
					.or.;
					( nOpcX == 5 );
				);
				.and.;
				( Len(aRecnos) == 0 );
			)
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Restaura o cursor do Mouse 								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If !lGestPubl 		// Gestao Publica
			CursorArrow()
			Help(' ',1,'A160SREG')
			lRet := .F.
			Break
		Endif
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas e Registros de Troc.Turno do Funcionario³
	³Depois da Montagem do Calendario.						         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !PONA161Locks( nOpcX , cAlias, aRecnos, ProcName() )
		Break
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Button Para Consulta dos Horarios da Tabela           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpcX == 3 .Or. nOpcX == 2 )

		If  lGestPubl .and. lManut	// Gestao Publica
			aButtons := {;
					{STR0007,{ || IIf( PN161Inc("T"),oDlg:End(), ) } , STR0007,STR0190 },; //"Incluir", "Incluir Troca de Trurno"
					{STR0191,{ || IIf( PN161Inc("E"),oDlg:End(), ) } , STR0191,STR0192 };  //"Estudante","Horario Espec. Estudante"
					}
		Else
			aButtons := {;
						{	"S4SB014N"					,;
						{ || SPJExceConPad(3) }		,;
							OemToAnsi( STR0006 )		,;	//'Consultar Turnos...'
							OemToAnsi( STR0106 )		 ;	//'Consultar'
						};
						}
		Endif
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Efetua Copia de aCols para Comparacao na Gravacao            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aColsAnt := aClone( aCols )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aAdd( aObjCoords , { 015 , 020 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Dialogo para Apresentacao das Informacoes              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0011) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL	// 'Transferencia de Turno de Trabalho'

		@ 000,000 MSPANEL oPanel OF oDlg

		@ 000 , aObjSize[1,2] GROUP oGroup TO 020,( ( aObjSize[1,4]/100*10 - 2 ) )				LABEL OemToAnsi(STR0012) OF oPanel PIXEL	// "Matricula:"
		oGroup:oFont:= oFont
		@ 000 , ( ( aObjSize[1,4]/100*10 ) ) GROUP oGroup TO 020,( aObjSize[1,4]/100*80 - 2 )	LABEL OemToAnsi(STR0013) OF oPanel PIXEL	// "Nome:"
		oGroup:oFont:= oFont
		@ 000 , ( aObjSize[1,4]/100*80 ) GROUP oGroup TO 020, aObjSize[1,4]						LABEL OemToAnsi(STR0015) OF oPanel PIXEL	// "Admiss„o:"
		oGroup:oFont:= oFont
		@ 008 , ( aObjSize[1,2] + 5 )				SAY OemToAnsi(SRA->RA_MAT)										SIZE 050,10 OF oPanel PIXEL FONT oFont
		@ 008 , ( ( aObjSize[1,4]/100*10 ) + 5 )	SAY If(lOfuscaNom,Replicate('*',15),OemToAnsi(SRA->RA_NOME))	SIZE 146,10 OF oPanel PIXEL FONT oFont
		@ 008 , ( ( aObjSize[1,4]/100*80 ) + 5 )	SAY Dtoc(SRA->RA_ADMISSA)										SIZE 050,10 OF oPanel PIXEL FONT oFont

		oGet := MSGetDados():New(aObjSize[2,1],aObjSize[2,2],aObjSize[2,3],aObjSize[2,4],nOpcX,'PN161LinOk','PN161TudOk','',.T.,aAltera,1,NIL,999999999)

	ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Coloca o cursor do Mouse em Estado de Espera				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	CursorWait()

	IF ( ( nOpcA == Confirma ) .and. ( nOpcX # 2  .Or. nVerif > 0) )
		IF ( ( nOpcX == 3 ) .or. ( nOpcX == 4 ) )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Grava apenas se Houverem Diferencas				 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF !fCompArray( aCols , aColsAnt, @nPosDif )

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Guarda Seq/Turno/Primeira/Ultima data e que houve 	 ³
				³modificacao para reconstrucao do calendario fisico	 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				cSeq			:= aCols[ nPosDif, nPosSeq  ]
				cTurno			:= aCols[ nPosDif, nPosTrn  ]
				dIniCal			:= aCols[ nPosDif, nPosData ]


				Begin Transaction
					//-- Grava‡„o
					PN161Grava(cAlias)
					If nOpcx == 3
						lPONA161Inc	:= .T.
					EndIf

					If lUseCalFis
						/*
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Funcao de controle do calendario					 ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
						//-- Obtem a maior data do calendario do funcionario
						fDatMaxCal( cFil, cMat, @dFimCal)

						//-- Somente verifica e realiza alteracoes de a troca de turno se existir calendario
						//-- na data da troca.
						If !(dFimCal < dIniCal)
							fChgCal( SRA->RA_FILIAL, SRA->RA_MAT, SRA->RA_CC, cSeq, cTurno, dIniCal, dFimCal )
						Endif
					EndIf
				End Transaction


				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Executa Ponto de Entrada para a Emissao de Documento³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF ( lPonap160Block )
					ExecBlock('PONAP160' , .F., .F.)
				EndIF
			EndIF
		Else
			nDelete:= GdFieldPos( "GDDELETED"	, aHeader )
			nRecAcol:= GdFieldPos( "PF_REC_WT"	, aHeader )

			If Len(aRecDel) == 0
				//-- Exclusao
				aEval(aCols,{ |x,y| IF( x[nDelete] , aAdd( aRecDel , x[nRecAcol] ) , IF(!x[nDelete] , aAdd( aRecAt , x[nRecAcol] ), nil) ) } )
			Else
				aEval(aCols,{ |x,y| IF(!x[nDelete] , aAdd( aRecAt , x[nRecAcol] ), nil) } )
			EndIf

			PN161Exclu(cAlias,aRecDel,aRecAt)
		EndIF
		//--Processa Gatilhos
		EvalTrigger()
	EndIF

	lDel    := .T.
	aRecDel := {}
End Sequence

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Coloca o cursor do Mouse em Estado de Espera				   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CursorWait()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Libera Retgistros Locados		                               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
FreeLocks( cAlias , NIL , .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura a integridade da janela                             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aArea )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o cursor do Mouse 								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
CursorArrow()

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161Grava³ Autor ³Marinaldo de Jesus     ³ Data ³21/04/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Grava no arquivo de Transferˆncia de Turnos                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA161                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161Grava(cAlias)

Local aMestre		:= GdPutIStrMestre( 01 )
Local aItens		:= {}
Local cOpcao		:= "PUT"

#IFDEF TOP
	Local lTopDelItens	:= .T.
	Local lExecSort		:= .F.
#Else
	Local lTopDelItens	:= .F.
	Local lExecSort		:= .T.
#EndIF

Local aCopyCols
Local nPosData
Local nPosTurnod
Local nPosSequed
Local nPosRegrad
Local nPosTurnop
Local nPosSequep
Local nPosRegrap
Local nDeleted
Local nLoop
Local nLoops

Local nPosTrfUnid	:= GdFieldPos("PF_TRFUNID")
Local nPosTrfObs	:= GdFieldPos("PF_TRFOBS")
Local nNumTRF		:= 0
Local aLogTransf	:= {}
Local aLogXTransf	:= {}
Local aLogTitle		:= {}
Local nX			:= 0
Local bMakeLog 		:= {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Carrega os Itens Apenas se Houveram Alteracoes ou na Exclusao³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aItens := GdPutIStrItens( 01 )

aItens[ 01 , 01 ] := "SPF"
aItens[ 01 , 02 ] := {;
						{ "FILIAL"	, xFilial( "SPF" , xFilial( "SRA" ) ) },;
						{ "MAT"		, SRA->RA_MAT };
					 }
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica se esta no Relase 11.7 e se existe os campos de ID e Observacao³
³ para atualizar o conteudo do Acols                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If GetRpoRelease() >= "R7" .And. SPF->(FieldPos("PF_TRFUNID")) > 0 .And. SPF->(FieldPos("PF_TRFOBS")) > 0

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Gera a numeracao sequencial do lote de transferencia                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+SubStr(Time(),7,2))	// 99:99:99
	SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_TRFUNID" ) ) )
	While SPF->(dbSeek( xFilial("SPF") + Str(nNumTRF) ))
		nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+StrZero(Val(SubStr(Time(),7,2))+1,2) )	// AAAAMMDDHHMMSS
	Enddo
	SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_MAT+DTOS(PF_DATA)" ) ) )

	aEval( aCols , {|x| IF( Empty(x[nPosTrfUnid]) , ( x[nPosTrfUnid] := nNumTRF ) , NIL ) } )
	aEval( aCols , {|x| IF( Empty(x[nPosTrfObs]) , ( x[nPosTrfObs] := SRA->RA_FILIAL+SRA->RA_MAT ) , NIL ) } )

Endif

aItens[ 01 , 03 ] := aClone( aHeader  )
aItens[ 01 , 04 ] := aClone( aCols    )
aItens[ 01 , 05 ] := aClone( aVirtual )
aItens[ 01 , 06 ] := aClone( aRecnos  )
aItens[ 01 , 07 ] := {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Seta a Gravacao ou Exclusao Apenas se Houveram Alteracoes  ou³
³ se foi Selecionada a Exclusao								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aMestre[ 01 , 01 ]	:= "SRA"
aMestre[ 01 , 02 ]	:= SRA->( Recno() )
aMestre[ 01 , 03 ]	:= .F.
aMestre[ 01 , 04 ]	:= {}
aMestre[ 01 , 05 ]	:= {}
aMestre[ 01 , 06 ]	:= {}
aMestre[ 01 , 07 ]	:= aClone( aItens )

Begin Transaction

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Grava as Informacoes                        				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	GdPutInfoData( aMestre , cOpcao , lTopDelItens , lExecSort )

	nPosData	:= GdFieldPos("PF_DATA")
	nPosTurnod	:= GdFieldPos("PF_TURNODE")
	nPosSequed	:= GdFieldPos("PF_SEQUEDE")
	nPosRegrad	:= GdFieldPos("PF_REGRADE")
	nPosTurnop	:= GdFieldPos("PF_TURNOPA")
	nPosSequep	:= GdFieldPos("PF_SEQUEPA")
	nPosRegrap	:= GdFieldPos("PF_REGRAPA")
	nDeleted	:= GdFieldPos("GDDELETED")
	nLoops		:= Len( aCols )

	If GetRpoRelease() >= "R7" .And. SPF->(FieldPos("PF_TRFUNID")) > 0 .And. SPF->(FieldPos("PF_TRFOBS")) > 0

		For nX := 1 To Len(aCols)
			// Data         Turno De   Seq De   Regra De   Turno Para   Seq Para   Regra Para   Num. Id.         Observacao
			// 99/99/9999   999        99       99         999          99         99           99999999999999   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
			If !( aCols[ nX , nDeleted ] )
				aAdd(aLogTransf, Padr(DTOC(aCols[ nX, nPosData]),10) + Space(3) + ;	// Data
								 Padr(aCols[ nX , nPosTurnod ],8) + Space(3) + ;       // Turno de
								 Padr(aCols[ nX , nPosSequed ],6) + Space(3) + ;		// Seq De
								 Padr(aCols[ nX , nPosRegrad ],8) + Space(3) + ;		// Regra De
								 Padr(aCols[ nX , nPosTurnop ],10) + Space(3) + ;		// Turno Para
								 Padr(aCols[ nX , nPosSequep ],8) + Space(3) + ;		// Seq Para
								 Padr(aCols[ nX , nPosRegrap ],10) + Space(3) + ;		// Regra Para
								 StrZero(aCols[ nX , nPosTrfUnid ],14) + Space(3) + ;	// Num.iD
								 aCols[ nX , nPosTrfObs ]  )							// Observacao
			Endif
		Next

	Endif

	//-- Grava o Turno no Arquivo do Funcion rio, com base na Data Atual
	aCopyCols := aClone(aCols)
	aSort( aCopyCols , , , { |x,y| DtoS( x[ nPosData ] ) > DtoS( y [ nPosData ] ) } )
	For nLoop := 1 To nLoops
		IF ( !( aCopyCols[ nLoop , nDeleted ] ) .and. aCopyCols[ nLoop , nPosData ] <= dPerFim )

			// Monta log com a atualização no cadastro de funcionario
			If GetRpoRelease() >= "R7"
				aAdd(aLogTransf, " " )
				aAdd(aLogTransf, STR0145 )	// "Atualização no cadastro do funcionário"
				aAdd(aLogTransf, STR0146 + " " + Padr(SRA->RA_TNOTRAB,3) + STR0147 + " " + Padr(aCopyCols[ nLoop , nPosTurnoP ],3)  )	// "Turno anterior:" ### "Turno atual:"
				aAdd(aLogTransf, STR0148 + " " + Padr(SRA->RA_SEQTURN,3) + STR0149 + " " + Padr(aCopyCols[ nLoop , nPosSequeP ],3)  )	// "Seq.  anterior:" ### "Seq.  atual:"
				aAdd(aLogTransf, STR0150 + " " + Padr(SRA->RA_REGRA,3)   + STR0151 + " " + Padr(aCopyCols[ nLoop , nPosRegraP ],3)  )	// "Regra anterior:" ### "Regra atual:"
			EndIf

			IF RecLock("SRA")
				SRA->RA_TNOTRAB	:= aCopyCols[ nLoop , nPosTurnoP ]
				SRA->RA_SEQTURN	:= aCopyCols[ nLoop , nPosSequeP ]
				SRA->RA_REGRA	:= aCopyCols[ nLoop , nPosRegraP ]
				SRA->( MsUnlock() )
			EndIF
			Exit
		Else
			IF ( ( nLoop == 1 ) .and. ( nLoop == nLoops ) )
				// Monta log com a atualização no cadastro de funcionario
				If GetRpoRelease() >= "R7"
					aAdd(aLogTransf, " " )
					aAdd(aLogTransf, STR0145 )	// "Atualização no cadastro do funcionário"
					aAdd(aLogTransf, STR0146 + " " + Padr(SRA->RA_TNOTRAB,3) + STR0147 + " " + Padr(aCopyCols[ nLoop , nPosTurnoD ],3)  )	// "Turno anterior:" ### "Turno atual:"
					aAdd(aLogTransf, STR0148 + " " + Padr(SRA->RA_SEQTURN,3) + STR0149 + " " + Padr(aCopyCols[ nLoop , nPosSequeD ],3)  )	// "Seq.  anterior:" ### "Seq.  atual:"
					aAdd(aLogTransf, STR0150 + " " + Padr(SRA->RA_REGRA,3)   + STR0151 + " " + Padr(aCopyCols[ nLoop , nPosRegraD ],3)  )	// "Regra anterior:" ### "Regra atual:"
				EndIf

				IF RecLock("SRA")
					SRA->RA_TNOTRAB	:= aCopyCols[ nLoop , nPosTurnoD ]
					SRA->RA_SEQTURN	:= aCopyCols[ nLoop , nPosSequeD ]
					SRA->RA_REGRA	:= aCopyCols[ nLoop , nPosRegraD ]
					SRA->( MsUnlock() )
				EndIF
				Exit
			EndIF
		EndIF
	Next nLoop

	//Se Excluiu Todas as Trocas de Turno Retira a Sequencia e a Regra do Cadastro
	SPF->( dbSetOrder( 1 ) )
	IF !SPF->( dbSeek( xFilial( "SRA" ) + SRA->RA_MAT , .F. ) )
		If GetRpoRelease() >= "R7"
			// Monta log com a atualização no cadastro de funcionario
			aAdd(aLogTransf, STR0152 )	// "Foi excluido o conteudo dos campos de Sequencia de Turno e Regra de Apontamento do funcionario"
		EndIf

		IF RecLock("SRA")
			SRA->RA_SEQTURN	:= Space( TamSx3( "RA_SEQTURN" )[1] )
			SRA->RA_REGRA	:= Space( TamSx3( "RA_REGRA" )[1] )
			SRA->( MsUnlock() )
		EndIF
	EndIF

End Transaction

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Grava as Informacoes                        				   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If GetRpoRelease() >= "R7" .And. SPF->(FieldPos("PF_TRFUNID")) > 0 .And. SPF->(FieldPos("PF_TRFOBS")) > 0
	IF !Empty( aLogTransf )

		aAdd(aLogTitle, STR0143 ) // "Data        Turno De   Seq De   Regra De   Turno Para   Seq Para   Regra Para Num. Id.        Observacao"
		//                            99/99/9999  999        99       99         999          99         99         99999999999999  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

		aAdd( aLogXTransf,  STR0142 + ": " + SRA->RA_FILIAL + " - " + SRA->RA_MAT + If(lOfuscaNom,''," - " + SRA->RA_NOME)  ) // "Funcionario"
		aEval( aLogTransf , {|x| aAdd(aLogXTransf,x) } )

		// "Log de Ocorrencias"
		bMakeLog := { || fMakeLog( { aLogXTransf } , aLogTitle,  NIL , .T. , FunName() , NIL , "G" , "L" , NIL , NIL ) }
		MsAguarde( bMakeLog , OemToAnsi( STR0144 ) ) // "Gerando Log de Transferencia de Turno"
	EndIF
Endif

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161Exclu³ Autor ³ Marinaldo de Jesus    ³ Data ³17/10/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Exclui registros de Transferˆncias de Turnos               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161Exclu( cAlias, aRecD ,aRecAt )

Local aRecBKP	:= {}
Local nX        := 0

Default aRecD   := {}
Default aRecAt	:= {}

Begin Transaction
	aRecBKP:= aClone(aRecnos)

	If( Len(aRecD)>0 )
		aRecnos:= aClone(aRecD)
	Else
		lDel := .F.
	EndIf

	If lGestPubl .And. cModulo $ 'GFP*VDF' .And. lDel
		For nX := 1 To Len(aRecD)
			SPF->( MsGoto( aRecnos[nX] ) )

			If QueryRI6( DToS(SPF->PF_DATA),SRA->RA_FILIAL,SRA->RA_MAT,"SPF" ) == "NP"
				ExcluiRI6()
			EndIf
		Next nX
	EndIf

	If lDel
		PonDelRecnos( "SPF" , @aRecnos)
		//Se Excluiu Todas as Trocas de Turno Retira a Sequencia e a Regra do Cadastro
		SPF->( dbSetOrder( 1 ) )
		IF !SPF->( dbSeek( xFilial( "SRA" ) + SRA->RA_MAT , .F. ) )
			IF RecLock("SRA")
				SRA->RA_SEQTURN		:= Space( TamSx3( "RA_SEQTURN" )[1] )
				SRA->RA_REGRA		:= Space( TamSx3( "RA_REGRA" )[1] )
				SRA->( MsUnlock() )
			EndIF
		Else
			SPF->( MsGoto( aRecAt[Len(aRecAt)] ) )
			IF RecLock("SRA")
				SRA->RA_TNOTRAB	:= SPF->PF_TURNOPA
				SRA->RA_SEQTURN	:= SPF->PF_SEQUEPA
				SRA->RA_REGRA	:= SPF->PF_REGRAPA
				SRA->( MsUnlock() )
			EndIF
		EndIF
	EndIf
End Transaction

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³                   ROTINAS DE CRITICA DE CAMPOS                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161LinOK³Autor  ³ Marinaldo de Jesus    ³ Data ³08/07/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Critica linha digitada                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161LinOK(o, lTdOk)

Local lLinOk	:= .T.
Local lData		:= .F.
Local lAltInfo	:= .F.
Local nPosData	:= GdFieldPos( "PF_DATA" )
Local nPosTnoDe	:= GdFieldPos( "PF_TURNODE" )
Local nPosSeqDe	:= GdFieldPos( "PF_SEQUEDE" )
Local nPosRegDe	:= GdFieldPos( "PF_REGRADE" )
Local nPosTnoPa	:= GdFieldPos( "PF_TURNOPA" )
Local nPosSeqPa	:= GdFieldPos( "PF_SEQUEPA" )
Local nPosRegPa	:= GdFieldPos( "PF_REGRAPA" )
Local nDelete	:= GdFieldPos( "GDDELETED" )

Local aCposKey
Local nLoop
Local nLoops
Local nLenaSPF
Local bValid

DEFAULT lTdOk := .F. //Chamada atraves da PN161TudOk()

bValid := { |x| If (	aCols[ n, nPosData ] != aColsAnt[ n, nPosData ] .or.;
						aCols[ n, nPosTnoDe] != aColsAnt[ n, nPosTnoDe] .or.;
						aCols[ n, nPosSeqDe] != aColsAnt[ n, nPosSeqDe] .or.;
						aCols[ n, nPosRegDe] != aColsAnt[ n, nPosRegDe] .or.;
						aCols[ n, nPosTnoPa] != aColsAnt[ n, nPosTnoPa] .or.;
						aCols[ n, nPosSeqPa] != aColsAnt[ n, nPosSeqPa] .or.;
						aCols[ n, nPosRegPa] != aColsAnt[ n, nPosRegPa], .T., .F. ) }

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Caso o periodo esteja fechado nao permite alteracoes		   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ A primeira Troca deve ser referente a data de Admissao	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If n == 1
	If ( lData := ( aCols[ n, nPosData ]  <> SRA->RA_ADMISSA ) )
		MsgInfo( OemToAnsi(STR0109) , OemToAnsi(STR0107) )
		Return(.F.)
	EndIf
Endif

If !lData
	If ( o:nOpc == 3 )
		lData := ( aCols[ n, nPosData ] <= oPerFch:dDataFim .and. oPerFch:lFechado .and. ( n > Len(aColsAnt) ))

	ElseIf  ( o:nOpc == 4 )
		If !( Len(aCols) > Len(aColsAnt) )
			If lAltInfo := Eval( bValid )
				lData := ( aCols[ n, nPosData ] <= oPerFch:dDataFim .and. oPerFch:lFechado .and. ( n > Len(aColsAnt) ) )
			EndIf
		Else
			lData := ( aCols[ n, nPosData ] <= oPerFch:dDataFim .and. oPerFch:lFechado .and. ( n > Len(aColsAnt) ))
		EndIf
	EndIf
Endif

If ( lData )
	MsgInfo( OemToAnsi(STR0108) , OemToAnsi(STR0107) )
	lLinOk := .F.
Else

	Begin Sequence

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Valida a linha somente na inclusao ou quando houver alteracao de fato ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !( aCols[ n , nDelete ] ) .And. ( lTdOk .Or. lAltInfo .Or. Len(aCols) # Len(aColsAnt) )

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Itens Duplicados na GetDados						   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aCposKey := { "PF_DATA" }
			IF !( lLinOk := GdCheckKey( aCposKey , 4 ) )
				Break
			EndIF

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se o Campos Estao Devidamente Preenchidos		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aAdd( aCposKey , "PF_TURNODE" )
			aAdd( aCposKey , "PF_TURNOPA" )
			aAdd( aCposKey , "PF_SEQUEDE" )
			aAdd( aCposKey , "PF_SEQUEPA" )
			aAdd( aCposKey , "PF_REGRADE" )
			aAdd( aCposKey , "PF_REGRAPA" )
			IF !( lLinOk := GdNoEmpty( aCposKey ) )
		    	Break
			EndIF

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Turno e Sequencia Digitados Sao Validos		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := PN161VldSeq( aCols[ n , nPosTnoDe ] , aCols[ n , nPosSeqDe ] , .T. ) )
				Break
			EndIF

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Turno e Sequencia Digitados Sao Validos		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := PN161VldSeq( aCols[ n , nPosTnoPa ] , aCols[ n , nPosSeqPa ] , .T.  ) )
				Break
			EndIF

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Regra Digitada eh Valida						   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := PosSPA( aCols[ n , nPosRegDe ] , xFilial( "SPF" ) , NIL , RetOrdem( "SPA" , "PA_FILIAL+PA_CODIGO" ) , .F. ) )
				Break
			EndIF

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Se Regra Digitada eh Valida						   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lLinOk := PosSPA( aCols[ n , nPosRegPa ] , xFilial( "SPF" ) , NIL , RetOrdem( "SPA" , "PA_FILIAL+PA_CODIGO" ) , .F. ) )
				Break
			EndIF

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega as Trocas de Turno do Funcionario           		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aSPF 			:= {}
			aTnoGetInfoTab	:= {}
			nLoops			:= Len( aCols )
			For nLoop := 1 To nLoops
				IF !( aCols[ nLoop , nDelete ] )
					aAdd( aSPF , Array(7) )
					nLenaSPF := Len( aSPF )
					aSPF[nLenaSPF,01] := aCols[ nLoop , nPosTnoDe ]
					aSPF[nLenaSPF,02] := aCols[ nLoop , nPosTnoPa ]
					aSPF[nLenaSPF,03] := aCols[ nLoop , nPosData  ]
					aSPF[nLenaSPF,04] := aCols[ nLoop , nPosSeqDe ]
					aSPF[nLenaSPF,05] := aCols[ nLoop , nPosSeqPA ]
					aSPF[nLenaSPF,06] := aCols[ nLoop , nPosRegDe ]
					aSPF[nLenaSPF,07] := aCols[ nLoop , nPosRegPA ]
				EndIF
			Next nLoop
			fTrocaTno(dPerIni,dPerFim,@aTnoGetInfoTab,aSPF)

		EndIF

	End Sequence

EndIf

Return( lLinOk )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161TudOk³ Autor ³ Marinaldo de Jesus    ³ Data ³08/07/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Critica tudo antes de salvar                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161TudOk( o )

Local lTudoOk	:= .T.
Local nSvn		:= n
Local nLoop
Local nLoops

Begin Sequence

	nLoops := Len( aCols )
	For nLoop := 1 To nLoops
		n := nLoop
		IF !( lTudoOk := PN161LinOK( o, .T. ) )
			Break
		EndIF
	Next nLoop

End Sequence

n := nSvn

Return( lTudoOk )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PN161PutTnoSeq³Autor³ Marinaldo de Jesus  ³ Data ³17/10/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega o Turno ou Sequencia correspondente a data Atual    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PN161PutTnoSeq( cPut )										³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponto Eletronico                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³.T. Por se Tratar de Validacao								³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<void>														³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function PN161PutTnoSeq()

Local aColsClone	:= aClone( aCols )
Local dData			:= &(ReadVar())
Local cTno			:= SRA->RA_TNOTRAB
Local cSeq			:= SRA->RA_SEQTURN
Local nX			:= 0
Local nPosData		:= GdFieldPos("PF_DATA")
Local nPosSeqPa		:= GdFieldPos("PF_SEQUEPA")
Local nPosTnoPa		:= GdFieldPos("PF_TURNOPA")
Local nPosRegPa 	:= GdFieldPos("PF_REGRAPA")
Local nPosSeqDe		:= GdFieldPos("PF_SEQUEDE")
Local nPosTnoDe		:= GdFieldPos("PF_TURNODE")
Local nPosRegDe		:= GdFieldPos("PF_REGRADE")
Local nDelete		:= GdFieldPos("GDDELETED")
Local nLenaCols		:= Len( aCols )
Local nLenaSPF		:= 0
Local uRet			:= Nil

If ( dData <= oPerFch:dDataFim .and. oPerFch:lFechado )
	MsgInfo( OemToAnsi(STR0108) , OemToAnsi(STR0107) )
    Return(.F.)
EndIf

IF dData > dPerFim
	aSort( aColsClone ,,, { |x,y| x[nPosData] > y[nPosData] } )
	( aSPF := {} , aTnoGetInfoTab := {} )
	For nX := 1 To nLenaCols
		IF !aColsClone[ nX , nDelete ]
			IF (;
					aColsClone[ nX , nPosData ] <= dData	.and.;
			    	!Empty( aColsClone[ nX , nPosSeqPa ] )	.and.;
			   		!Empty( aColsClone[ nX , nPosTnoPa ] )	.and.;
			    	!Empty( aColsClone[ nX , nPosSeqDe ] )	.and.;
			   		!Empty( aColsClone[ nX , nPosTnoDe ] )	.and.;
			   		!Empty( aColsClone[ nX , nPosRegDe ] )  .and.;
			   		!Empty( aColsClone[ nX , nPosRegPa ] ) 		 ;
			   	)
				aAdd( aSPF , Array(7) )
				nLenaSPF := Len( aSPF )
				aSPF[nLenaSPF,01] := aColsClone[ nX , nPosTnoDe ]
				aSPF[nLenaSPF,02] := aColsClone[ nX , nPosTnoPa ]
				aSPF[nLenaSPF,03] := aColsClone[ nX , nPosData  ]
				aSPF[nLenaSPF,04] := aColsClone[ nX , nPosSeqDe ]
				aSPF[nLenaSPF,05] := aColsClone[ nX , nPosSeqPa ]
				aSPF[nLenaSPF,06] := aCols[ nX , nPosRegDe ]
				aSPF[nLenaSPF,07] := aCols[ nX , nPosRegPA ]
			EndIF
		EndIF
	Next nX
	IF !Empty( aSPF )
		cTno := aSPF[01,02]
		cSeq := aSPF[01,05]
	EndIF
	fTrocaTno(dPerIni,dData,@aTnoGetInfoTab,aSPF)
	aSort( aTnoGetInfoTab ,,, { |x,y| x[3] > y[3] } )
Else
	( aSPF := {} , aTnoGetInfoTab := {} )
	For nX := 1 To nLenaCols
		IF !aCols[ nX ,nDelete ]
			IF (;
					!Empty( aCols[ nX , nPosData  ] )	.and.;
			    	!Empty( aCols[ nX , nPosSeqPa ] )	.and.;
			   		!Empty( aCols[ nX , nPosTnoPa ] )	.and.;
			    	!Empty( aCols[ nX , nPosSeqDe ] )	.and.;
			   		!Empty( aCols[ nX , nPosTnoDe ] )	.and.;
			   		!Empty( aCols[ nX , nPosRegDe ] )	.and.;
			   		!Empty( aCols[ nX , nPosRegPa ] )		 ;
			   	)
				aAdd( aSPF , Array(7) )
				nLenaSPF := Len( aSPF )
				aSPF[nLenaSPF,01] := aCols[ nX , nPosTnoDe ]
				aSPF[nLenaSPF,02] := aCols[ nX , nPosTnoPa ]
				aSPF[nLenaSPF,03] := aCols[ nX , nPosData  ]
				aSPF[nLenaSPF,04] := aCols[ nX , nPosSeqDe ]
				aSPF[nLenaSPF,05] := aCols[ nX , nPosSeqPA ]
				aSPF[nLenaSPF,06] := aCols[ nX , nPosRegDe ]
				aSPF[nLenaSPF,07] := aCols[ nX , nPosRegPA ]
			EndIF
		EndIF
	Next nX
	fTrocaTno(dPerIni,dPerFim,@aTnoGetInfoTab,aSPF)
EndIF

GdFieldPut("PF_TURNODE",( If (!Empty(uRet := GetInfoPosTab(14,,dData,,,,,,cTno,cSeq)),uRet,Space(GetSx3Cache("PF_TURNODE","X3_TAMANHO")))))
GdFieldPut("PF_SEQUEDE",( If (!Empty(uRet := GetInfoPosTab(08,,dData,,,,,,cTno,cSeq)),uRet,Space(GetSx3Cache("PF_SEQUEDE","X3_TAMANHO")))))
GdFieldPut("PF_REGRADE",( If (!Empty(uRet := GetInfoPosTab(23,,dData,,,,,,cTno,cSeq)),uRet,Space(GetSx3Cache("PF_REGRADE","X3_TAMANHO")))))

Return( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PN161VldSeq   ³Autor³ Marinaldo de Jesus  ³ Data ³17/10/2001³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Validar a Sequencia digitada                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PN161VldSeq													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponto Eletronico                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³lRet 														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<void>														³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function PN161VldSeq( cTno , cSeq , lFormalParameters  )

Local cCpo	:= ""

Local lRet	:= .T.
Local cAlias:= If(lUseSPJ, "SPJ", "RF2")
Local cFil	:= xFilial(cAlias)

DEFAULT cTno				:= ""
DEFAULT cSeq				:= ""
DEFAULT lFormalParameters	:= .F.

IF ( !lFormalParameters )
	cCpo	:= ReadVar()
	cSeq	:= &(cCpo)
	IF ( Type( "aHeader" ) == "A" ) .and. ( Type( "aCols" ) == "A" )
		cTno := IF("PF_SEQUEDE" $ cCpo , GdFieldGet("PF_TURNODE") , GdFieldGet("PF_TURNOPA") )
	ElseIF ( IsMemVar( "PF_TURNODE" ) .and. IsMemVar( "PF_TURNOPA" ) )
		cTno := IF("PF_SEQUEDE" $ cCpo , GetMemVar( "PF_TURNODE" ) , GetMemVar( "PF_TURNODE" ) )
	Else
		cTno := SRA->RA_SEQTURN
	EndIF
EndIF

IF !( lRet := (cAlias)->( MsSeek( cFil + cTno + cSeq ) ) )
	Help( ' ' , 1 , 'PONA161OBR' , , OemToAnsi( STR0021 ) , 5 , 0 ) //Sequencia Nao Cadastrada Para o Turno
EndIF

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PONA161F3Seq  ³Autor³ Marinaldo de Jesus  ³ Data ³25/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Filtro para a Consulta <F3> para a Consulta XPJ             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³PONA161F3Seq()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ponto Eletronico                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³cRet 														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<void>														³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function PONA161F3Seq()

Local aTabTno	:= {}
Local aUnique	:= {"PJ_FILIAL","PJ_TURNO","PJ_SEMANA"}
Local cVar		:= ""
Local cIndexKey	:= SPJ->( IndexKey() )
Local cFil		:= xFilial( "SPJ" )
Local cTno		:= ""
Local cRet 		:= "@#.T.@#"
Local cKeys		:= ""
Local nSpjRecno	:= SPJ->( Recno() )
Local nTab		:= 0
Local nTabs		:= 0
Local nLoop		:= 0
Local nLoops	:= 0
Local nBytes	:= 0

Static __cXPJF3Seq__

Begin Sequence

	IF ( ( Type( "aHeader" ) == "A" .and. Type( "aCols" ) == "A" ) )
		cVar := ReadVar()
		IF ( !Empty( __cXPJF3Seq__ ) .and. ( "RA_SEQTURN" $ __cXPJF3Seq__ ) )
			__cXPJF3Seq__ := NIL
		EndIF
		IF ( Empty( cVar ) .and. !Empty( __cXPJF3Seq__ ) )
			cVar := __cXPJF3Seq__
		EndIF
		IF ( "PF_SEQUEDE" $ cVar )
			IF ( !Empty( __cXPJF3Seq__ ) .and. ( "PF_SEQUEPA" $ __cXPJF3Seq__ ) )
				__cXPJF3Seq__ := NIL
			EndIF
			cTno := GdFieldGet( "PF_TURNODE" )
		ElseIF ( "PF_SEQUEPA" $ cVar )
			IF ( !Empty( __cXPJF3Seq__ ) .and. ( "PF_SEQUEDE" $ __cXPJF3Seq__ ) )
				__cXPJF3Seq__ := NIL
			EndIF
			cTno := GdFieldGet( "PF_TURNOPA" )
		EndIF
		DEFAULT __cXPJF3Seq__ := cVar
	ElseIF ( IsMemVar("RA_TNOTRAB") .and. IsMemVar("RA_SEQTURN") )
		cVar := ReadVar()
		IF ( !Empty( __cXPJF3Seq__ ) .and. !( "RA_SEQTURN" $ __cXPJF3Seq__ ) )
			__cXPJF3Seq__ := NIL
		EndIF
		IF ( Empty( cVar ) .and. !Empty( __cXPJF3Seq__ ) )
			IF ( "RA_SEQTURN" $ __cXPJF3Seq__ )
				cVar := __cXPJF3Seq__
			EndIF
		EndIF
		IF ( "RA_SEQTURN" $ cVar )
			cTno := GetMemVar( "RA_TNOTRAB" )
		EndIF
		DEFAULT __cXPJF3Seq__ := cVar
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa __aUniqueKey__ em UniqueKey()							 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	UniqueKey()
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega os Recnos da Tabela de Horario Padrao							 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	fTabPadrao( @aTabTno , cFil , cTno , .F. , { || UniqueKey( aUnique ) } )
	nTabs := Len( aTabTno )
	For nTab := 1 To nTabs
		IF ( ( cFil <> aTabTno[ nTab , 01 ] ) .and. ( cTno <> aTabTno[ nTab , 02 ] ) )
			Loop
		EndIF
		nLoops := Len( aTabTno[ nTab , 03 ] )
		For nLoop := 1 To nLoops
			SPJ->( dbGoto( aTabTno[ nTab , 03 , nLoop , 37 ] ) )
			cKeys	+= SPJ->( &( cIndexKey ) ) + "/"
			nBytes	+= Len( cKeys )
			#IFDEF TOP
				IF ( nBytes > 2000 ) //Filter greater than 2000 bytes
					cKeys := ""
					Break
				EndIF
			#ENDIF
		Next nLoop
		SPJ->( MsGoto( nSpjRecno ) )
	Next nTab

End Sequence

IF !Empty( cTno )
	IF !Empty( cKeys )
		cRet := "@#PJ_TURNO=='"+cTno+"'.and."+cIndexKey+"$'"+cKeys+"'@#"
	Else
		cRet := "@#PJ_TURNO=='"+cTno+"'@#"
	EndIF
EndIF

Return( cRet )


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PONA161Locks    ³Autor³Mauricio MR         ³ Data ³09/03/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Lancamentos de Troca de Turno do Funcionario        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA140                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function PONA161Locks( nOpc , cAlias, aRecnos, cProcName )

Local lLocks	:= .T.
Local aRecAux	:= {}

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao For Visualizacao nem Inclusao	 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nOpc == 2 )
		Break
	EndIF

	aEval( aRecnos , {|x| IF( !Empty(x) , aAdd( aRecAux , x ) , NIL ) } )

	IF !( lLocks := WhileNoLock( cAlias , aRecAux , {xFilial(cAlias)+SRA->RA_MAT+cProcName} , 1 , 1 , .T. , NIL ) )
		Break
	EndIF

End Sequence

Return( lLocks )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fChgCal		    ³Autor³Igor Franzoi        ³ Data ³04/04/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Controla execucao para reconstruir os calendarios			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet														 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA140                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fChgCal( cFil, cMat, cCC, cSeqDe, cTrnDe, dDtaIni, dDtaFim )


Begin Transaction

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Deleta o calendario do inicio do periodo atual ate o ultimo ³
	³ calendario criado											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	fDelCal( cFil , cMat, dDtaIni )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Efetua criacao do calendario p/ o periodo 				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	lRet := fWriteCal( cFil, cMat, cCC, cSeqDe, cTrnDe, dDtaIni, dDtaFim )

End Transaction

Return ( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Almeida     ³ Data ³29/11/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA161                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function MenuDef()
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define array contendo as Rotinas a executar do programa      ³
³ ----------- Elementos contidos por dimensao ------------     ³
³ 1. Nome a aparecer no cabecalho                              ³
³ 2. Nome da Rotina associada                                  ³
³ 3. Usado pela rotina                                         ³
³ 4. Tipo de Transa‡„o a ser efetuada                          ³
³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
³    2 - Simplesmente Mostra os Campos                         ³
³    3 - Inclui registros no Bancos de Dados                   ³
³    4 - Altera o registro corrente                            ³
³    5 - Remove o registro corrente do Banco de Dados          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local aRotina := {}
Local lGestPubl 	:= fUsaGFP()	//Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

If  lGestPubl // Gestao Publica
	aRotina :=    {{STR0004 , 'PesqBrw'	, 0 , 1, ,.F. },;		// 'Pesquisar'
					{ STR0005 , 'PN161ATU'	, 0 , 2 },; 		// 'Visualizar'
  					{ STR0189 , 'PN161Verif', 0 , 4 },;			// 'Manutenção'
  					{ STR0193 , 'VDFR030'	, 0 , 6 },;			// 'Relatorio Horario Estud.'
					{ STR0014 , 'GpLegend'	, 0 , 6 , , .F.} }	// 'Legenda'

ElseIf GetRpoRelease() >= "R7"

		aRotina :=    {{ STR0004 , 'PesqBrw'	, 0 , 1, ,.F. },;	// 'Pesquisar'
						{ STR0005 , 'PN161ATU'	, 0 , 2 },; 		// 'Visualizar'
						{ STR0007 , 'PN161ATU'	, 0 , 3,,,.T. },;	// 'Incluir'
						{ STR0009 , 'PN161ATU'	, 0 , 4 },; 		// 'Alterar'
						{ STR0010 , 'PN161ATU'	, 0 , 5 },;			// 'Excluir'
						{ STR0110 , 'PONA161Lot', 0 , 6 },;			// 'Troca em Lote'
						{ STR0014 , 'GpLegend'	, 0 , 6 , , .F.} }	// 'Legenda'
Else
	aRotina :=       {	{ STR0004 , 'PesqBrw'	, 0 , 1, ,.F. },;// 'Pesquisar'
					{ STR0005 , 'PN161ATU'	, 0 , 2 },; 		// 'Visualizar'
					{ STR0007 , 'PN161ATU'	, 0 , 3,,,.T. },;	// 'Incluir'
					{ STR0009 , 'PN161ATU'	, 0 , 4 },; 		// 'Alterar'
					{ STR0010 , 'PN161ATU'	, 0 , 5 },;			// 'Excluir'
					{ STR0014 , 'GpLegend'	, 0 , 6 , , .F.} }	// 'Legenda'
Endif

Return aRotina

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161Lot³ Autor ³ IP RH Inovacao        ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Faz a transferencia dos funcionarios em lote               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161Lot(ExpC1,ExpN1,ExpN2)                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONA161Lot(cAlias,nReg,nOpcx,aRotauto)

Local cTitulo
Local lMarca
Local lLock
Local bStart
Local bLDblClick
Local bAllSelec
Local bAllMark
Local bAllUnMark
Local bPONA161Cnf
Local bBeforeFiltro
Local bFiltra
Local nOpcA
Local oDlg
Local aFieldsBrowse	:={}
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
//Variaveis para manipulacao dos botoes da enchoice
Local bSet15		:= { || .T. }
Local bSet24		:= { || .T. }

Private aTransfHeader	:= {}
Private aTransfCols		:= {}
Private aTransf1Header	:= {}
Private aTransf1Cols	:= {}
Private aLogTransf		:= {}
Private aModTraj	    := {}
Private oMsSelect		//# Alterado para private para dar refresh na funcao PONA161Flt()

Default aRotauto := {}

if len(aRotauto) > 0
	PON160lot(aRotAuto)
else
	Begin Sequence

	IF ( SRA->( FieldPos( "RA_OKTRANS" ) ) == 0 )
		Break
	EndIF

	Private aNewIndexSRA  	:= {}
	Private bNewFiltroBrw 	:= {|| NIL }
	Private cMarkTransf		:= GetMark()
	Private cRaOkTransSpc	:= Space( TamSx3( "RA_OKTRANS" )[1] )
	Private lAbortPrint		:= .F.

	cTitulo  		:= STR0111 // "Transferencias em Lote"
	lMarca   		:= .T.
	lLock			:= .F.

	bStart			:= { || SRA->(MsGoTo(nReg)) , oMsSelect:oWnd:Refresh(),oMsSelect:oBrowse:Refresh() }
	bLDblClick		:= { || PONA161Mrk( "SRA" , NIL , .T. , SRA->( !IsMark( "RA_OKTRANS" , cMarkTransf ) ) ), oMsSelect:oWnd:Refresh(),oMsSelect:oBrowse:Refresh() }
	bAllSelec		:= { || Proc2BarGauge( bAllMark , OemToAnsi( IF( lMarca , STR0113 , STR0112 ) ) , NIL , NIL , .T. , .T. , .F. , .F. ) }
	bAllMark		:= { || PONA161MkAll( @lMarca , .T. , .F. ) }
	bAllUnMark		:= { || PONA161MkAll( .F. , .T. , .F. ) , lMarca := .T. , oMsSelect:oBrowse:Refresh() }
	bPONA161Cnf		:= { || PONA161Cnf() , lMarca := .T. }
	bBeforeFiltro	:= { || IF( Len( __aMrkRecnos__ ) > 0, Proc2BarGauge( bAllUnMark , OemToAnsi( STR0112 ) , NIL , NIL , .T. , .T. , .F. , .F. ) , .T. ) }	//"Retirando a Sele‡„o"
	bFiltra			:= { || PONA161Flt( bBeforeFiltro ) }
	bSelecID		:= { || PONA161ID(), oMsSelect:oWnd:Refresh(),oMsSelect:oBrowse:Refresh() }
	nOpcA			:= 0
	__aMrkRecnos__	:= {}
	__aMrkKeys__	:= {}

	/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	  ³ Monta Botoes no final do dialogo...                                      ³
	  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	bSet15	:= {|| nOpcA := 1 , Eval( bPONA161Cnf ) , oDlg , .T. }
	bSet24	:= {|| nOpcA := 2 , oDlg:End() , oDlg , .T. }

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Campos da MarkBrowse                                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	                    //Campo      ,     ,Titulo              , Picture
	aFieldsBrowse := {	{"RA_OKTRANS", 	"", OemToAnsi ("OK")    	,	""},;
						{"RA_MAT"    , 	"", TitSx3("RA_MAT")[1] 	,	""},;
						{"RA_NOME"   ,	"", TitSx3("RA_NOME")[1] 	,	""},;
						{"RA_TNOTRAB" ,	"", TitSx3("RA_TNOTRAB")[1] , 	""},;
						{"RA_SEQTURN", 	"", TitSx3("RA_SEQTURN")[1]	, 	""},;
						{"RA_REGRA"  , 	"", TitSx3("RA_REGRA")[1]	, 	""}	}

		dbSelectArea("SRA")

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta Dialog...                                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aAdvSize		:= MsAdvSize(,.T.,380)
		aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
		aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
		aObjSize	:= MsObjSize( aInfoAdvSize , aObjCoords )


		DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
		DEFINE MSDIALOG oDlg TITLE OemToAnsi(cTitulo) FROM aAdvSize[7], 0 TO aAdvSize[6], aAdvSize[5] OF GetWndDefault() PIXEL

			oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Monta MarkBrowse...                                                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			oMsSelect := MsSelect():New(;
											"SRA"				,;	//Alias	do Arquivo de Filtro
											"RA_OKTRANS"		,;	//Campo para controle do mark
											NIL					,;	//Condicao para o Mark
											aFieldsBrowse		,;	//Array com os Campos para o Browse
											NIL					,;	//?
											cMarkTransf			,;	//Conteudo a Ser Gravado no campo de controle do Mark
											{aObjSize[1,1],aObjSize[1,2],aObjSize[1,3],aObjSize[1,4]}	,;	//Coordenadas do Objeto
											NIL					,;  //?
											NIL					,;	//?
											oDlg				 ;	//Objeto Dialog
										)
			oMsSelect:oBrowse:lHasMark    	:=.T.
			oMsSelect:oBrowse:lCanAllMark 	:=.T.
			oMsSelect:oBrowse:bLDblClick	:= bLDblClick
			oMsSelect:oBrowse:lAllMark		:= .F.
			oMsSelect:oBrowse:bAllMark		:= bAllSelec
			oMsSelect:oWnd:bStart			:= bStart

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ativa o Dialogo...                                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aButtons	:=	{;
							{"PESQUISA" ,{|| SRA->( PesqBrw( "SRA" , SRA->( Recno() ) , bNewFiltroBrw ) ) , oMsSelect:oBrowse:Refresh() } ,STR0004,STR0004},;	//"Pesquisar"
							{"SELECAO" 	,{|| Proc2BarGauge( bAllMark , OemToAnsi( IF( lMarca , STR0113 , STR0112 ) ) , NIL , NIL , .T. , .T. , .F. , .F. ) } , STR0114,STR0114 },;	//"Selecionando Funcion rios"###"Retirando a Seleção" ### "Marca/Desm.Todos"
							{"FILTRO" 	,{|| MsAguarde( bFiltra , STR0116 ) }  ,STR0115,STR0115},; //"Filtro      "###Filtrando Funcion rios"
							{"SELECAO" 	,{|| MsAguarde( bSelecID , OemToAnsi( STR0113 )) } , STR0134,STR0134 };	//"Selecionando Funcion rios"###"Selec.ID Transf."
							}

		ACTIVATE DIALOG oDlg ON INIT EnchoiceBar(oDlg,bSet15,bSet24, Nil , aButtons )  CENTERED

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Fim da Rotina Principal                                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF ( ( nOpcA <> 2 ) .And. ( Len( __aMrkRecnos__ ) > 0  ) )
			IF ( Len( __aMrkRecnos__ ) > 0  )
				Proc2BarGauge( { || PONA161MkAll( .F. , .F. , .F. ) } , OemToAnsi( STR0112 ) , NIL , NIL , .T. , .T. , .F. , .F. )
				__aMrkRecnos__	:= {}
				__aMrkKeys__	:= {}
				If ValType(oMsSelect:oBrowse) == "O"
					oMsSelect:oBrowse:Refresh()
				EndIf
			EndIF
		EndIF

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Finaliza Filtro da Transfrencia Em Lote                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		EndFilBrw( "SRA" , aNewIndexSRA )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Restaura Filtro de Entrada                                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF ( lPONA161Flt )
			Eval( bFiltraBrw )
		EndIF

		// Posiciona o SRA no Inicio
		SRA->(dbGoTop())

	End Sequence
Endif
Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161Flt³ Autor ³ IP RH Inovacao        ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Filtra os funcionarios do MarkBrowse                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161Flt(ExpC1,ExpN1,ExpN2)                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpB1 = CodeBloco da expressao do filtro                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function PONA161Flt( bBeforeFiltro )

Local cFiltro
Local lExecFiltro

Static cFiltroRet

cFiltro := cFiltroRet
IF GpFltBldExp( "SRA" , NIL , @cFiltro , NIL )
	lExecFiltro := ( !Empty( cFiltro ) .and. ( cFiltro <> cFiltroRet ) )
EndIF
cFiltroRet	:= cFiltro

IF ( lPONA161Flt )
	IF !Empty( cFiltraRh )
		EndFilBrw( "SRA" , {} )
		IF !( lExecFiltro )
			cFiltro	:= cFiltraRh
		Else
			cFiltro	:= ( cFiltraRh + " .and. " + cFiltro )
		EndIF
	EndIF
EndIF

IF ( lExecFiltro )
	Eval( bBeforeFiltro )
EndIF

EndFilBrw( "SRA" , aNewIndexSRA )
aNewIndexSRA	:= {}
bNewFiltroBrw	:= { || FilBrowse( "SRA" , @aNewIndexSRA , @cFiltro ) }
SRA->( Eval( bNewFiltroBrw ) )

oMsSelect:oBrowse:Refresh()

Return( lExecFiltro )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161MkAll³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Marca/Desmarca todos os elementos do browse                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161MkAll(ExpL1,ExpL2,ExpL3)                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = variavel de controle de marcar/desmarcar           ³±±
±±³          ³ ExpL2 = variavel de controle de apresentacao de msg        ³±±
±±³          ³ ExpL3 = variavel de controle de tentar marcar o registro   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function PONA161MkAll( lMarca , lShowMsg , lInsiste )

Local bWhile		:= { |cWhile| &( cWhile ) }
Local cFilSra		:= xFilial("SRA")
Local cSraFilter	:= SRA->( dbFilter() )
Local cTimeIni		:= Time()
Local lChkMrk		:= .T.
Local lUseCode		:= lMarca
Local nRecno		:= SRA->( Recno() )
Local nProcRegua

DEFAULT lShowMsg	:= .T.
DEFAULT lInsiste	:= .T.

CursorWait()

IF !( lMarca )
	IF !( lAbortPrint )
		cSraFilter += IF( !Empty( cSraFilter ) , " .and. IsMark('RA_OKTRANS','"+cMarkTransf+"')" , "IsMark('RA_OKTRANS','"+cMarkTransf+"')" )
	EndIF
EndIF
IF ( !Empty( cSraFilter ) )
	cSraFilter += " .and. RA_FILIAL == '" + cFilSra + "'"
Else
	cSraFilter += "RA_FILIAL == '" + cFilSra + "'"
EndIF

CREATE SCOPE aScopeCount FOR &( cSraFilter )
nProcRegua := SRA->( RecCount() )
RstTimeRemaining() //Reinicializa o Contador de Tempos em Proc2BarGauge()
BarGauge1Set( nProcRegua )

CursorArrow()
lAbortPrint := .F.
SRA->(dbgotop())
SRA->( dbSeek( cFilSra , .F. ) )
While SRA->( !Eof() )
	IncPrcG1Time( NIL , nProcRegua , cTimeIni , .T. , NIL , 1 )
	IF ( lAbortPrint )
		Exit
	EndIF

	If !Eval( bWhile , cSraFilter )
		SRA->( dbSkip() )
		Loop
	EndIf
	SRA->( PONA161Mrk( "SRA" , lMarca , lInsiste , lUseCode ) )

	SRA->( dbSkip() )
End While

SRA->( MsGoto( nRecno ) )
IF ( lChkMrk )
	lMarca := !( lMarca )
EndIF

Return( lChkMrk )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161Mrk  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Marca/Desmarca um elemento do browse                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161Mrk(ExpC1,ExpL1,ExpL2,ExpL3)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = alias da tabela ser alterada-marcada               ³±±
±±³          ³ ExpL1 = variavel de controle de marcar todos               ³±±
±±³          ³ ExpL2 = variavel de controle de apresentacao de msg        ³±±
±±³          ³ ExpL3 = variavel de controle de lock de registro           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function PONA161Mrk( cAlias , lAll , lShowHelp , lUseCode )

Local aRec		:= Array( 1 )
Local aKey		:= Array( 1 )
Local lLock		:= .F.
Local bMark_	:= { || ExecMark( lAll ) }

Local bLock
Local cMsg

DEFAULT cAlias		:= Alias()
DEFAULT lShowHelp	:= .T.

Begin Sequence

	IF !( cAlias == "SRA" )
	    Break
	EndIF

	aRec[1]	:= SRA->( Recno() )
	aKey[1]	:= SRA->( RA_FILIAL+RA_MAT )

	IF ( lShowHelp )
		//"O Registro "###" está reservado para outro usuário."
		cMsg := OemToAnsi( STR0122 + " " + AllTrim( Str( aRec[1] ) ) + " " + STR0123 )
		bLock := { || PONA161TLocks(	aRec , aKey , cMsg , lUseCode ) }
	Else
		bLock := { || LockRegsCode( "SRA" , aRec , aKey , 0 , 0 , lUseCode , NIL ) }
	EndIF

	IF !( lLock := SRA->( Eval( bLock ) ) )
		Break
	EndIF

	lLock := SRA->( Eval( bMark_ ) )

End Sequence

Return( lLock )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ExecMark    ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Marca/Desmarca um elemento do browse                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExecMark(ExpL1)                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = variavel de controle de marcar todos               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function ExecMark( lAll )

Local lIsMark 	:= SRA->( IsMark( "RA_OKTRANS" , cMarkTransf ) )
Local lIsLocked	:= IsLocked( "SRA" , SRA->( Recno() ) )

IF ( lIsLocked )
	IF ( lAll == NIL )	//Inverte
		IF ( lIsMark )
	    	SRA->RA_OKTRANS := cRaOkTransSpc
			AddRmvMrk( .T. )
		Else
			SRA->RA_OKTRANS := cMarkTransf
			AddRmvMrk( .F. )
		EndIF
	Else
		IF ( lAll )
	    	SRA->RA_OKTRANS := cMarkTransf
			AddRmvMrk( .F. )
		ElseIF ( lIsMark )
	    	SRA->RA_OKTRANS := cRaOkTransSpc
	    	AddRmvMrk( .T. )
		EndIF
	EndIF
EndIF

Return( lIsLocked )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³AddRmvMrk   ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Reserva/Liberacao do(s) Recno(s) e Chave(s) qdo Mark/UnMark³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ AddRmvMrk(ExpL1)                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = variavel de controle de liberacao de registros     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function AddRmvMrk( lRmv )

Local nRec  	:= SRA->( Recno() )
Local cKey  	:= SRA->( RA_FILIAL + RA_MAT )
Local nPos		:= aScan( __aMrkRecnos__ , { |x| ( x == nRec ) } )
Local nLastSize

DEFAULT lRmv := .F.

IF ( lRmv )
	IF ( IsLocked( "SRA" , nRec ) )
		PONA161FreeLocks( nRec , cKey )
	EndIF
	IF ( nPos > 0 )
		nLastSize := Len( __aMrkRecnos__ )
		aDel( __aMrkRecnos__ 	, nPos )
		aDel( __aMrkKeys__	 	, nPos )
		aSize( __aMrkRecnos__	, ( nLastSize - 1 ) )
		aSize( __aMrkKeys__		, ( nLastSize - 1 ) )
	EndIF
Else
	IF ( nPos == 0 )
		aAdd( __aMrkRecnos__ , nRec )
		aAdd( __aMrkKeys__	 , cKey )
	EndIF
EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161TLocks³ Autor ³ IP RH Inovacao     ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Lock dos Registros                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161TLocks(aRecnos,aKeys,cMsg1,lUseCode )               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = array com os registros a serem bloqueados          ³±±
±±³          ³ ExpA2 = variavel de controle das chaves dos registros      ³±±
±±³          ³ ExpC1 = variavel de controle da mensagem                   ³±±
±±³          ³ ExpL1 = variavel de controle de liberacao de registros     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function PONA161TLocks( aRecnos , aKeys , cMsg1 , lUseCode )

Local lLocks		:= .T.

Local aQueryCond
Local aFieldsLock
Local bSkip
Local bLock
Local cFilSRA
Local cSraFilter

DEFAULT __aMrkRecnos__	:= {}
DEFAULT __aMrkKeys__	:= {}
DEFAULT aRecnos 		:= __aMrkRecnos__
DEFAULT aKeys			:= __aMrkKeys__
DEFAULT cMsg1			:= STR0124	//"Não foi possivel reservar todos os registros para transferência"
DEFAULT lUseCode		:= .T.

Begin Sequence

	IF ( Empty( aRecnos ) .and. Empty( aKeys ) )
		cFilSRA := xFilial( "SRA" )
		#IFDEF TOP
			aQueryCond		:= Array( 05 )
			aQueryCond[01]	:= "RA_FILIAL='"+cFilSRA+"'"
			aQueryCond[02]	:= " AND "
			aQueryCond[03]	:= "RA_OKTRANS='"+cMarkTransf+"'"
			aQueryCond[04]	:= " AND "
			//aQueryCond[05]	:= "RA_SITFOLH <> 'D' "
			//aQueryCond[06]	:= " AND "
			aQueryCond[05]	:= "D_E_L_E_T_=' ' "
		#ENDIF
		aFieldsLock		:= { "RA_FILIAL" , "RA_MAT" , "RA_OKTRANS" }
		IF Empty( cSraFilter := SRA->( dbFilter() ) )
			bSkip	:= { || !IsMark( "RA_OKTRANS" , cMarkTransf ) }
		Else
			bSkip	:= { || !IsMark( "RA_OKTRANS" , cMarkTransf ) .or. !( &( cSraFilter ) ) }
		EndIF
		aKeys 	:= {}
		aRecnos := {}
		bLock 	:= { |lLock,lExclu|	lLock 	:= .T.	,;
									lExclu	:= .T.	,;
									GdMontaCols(NIL				,;	//01 -> Array com os Campos do Cabecalho da GetDados
													NIL				,;	//02 -> Numero de Campos em Uso
													NIL				,;	//03 -> [@]Array com os Campos Virtuais
													NIL    			,;	//04 -> [@]Array com os Campos Visuais
													"SRA" 			,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
													aFieldsLock		,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
													@aRecnos		,;	//07 -> [@]Array unidimensional contendo os Recnos
													"SRA"		   	,;	//08 -> Alias do Arquivo Pai
													cFilSRA			,;	//09 -> Chave para o Posicionamento no Alias Filho
													NIL  			,;	//10 -> Bloco para condicao de Loop While
 													bSkip			,;	//11 -> Bloco para Skip no Loop While
													.F.     		,;	//12 -> Se Havera o Elemento de Delecao no aCols
													.F.     		,;	//13 -> Se cria variaveis Publicas
													.F.     		,;	//14 -> Se Sera considerado o Inicializador Padrao
													NIL  			,;	//15 -> Lado para o inicializador padrao
													.F.       		,;	//16 -> Opcional, Carregar Todos os Campos
													.T.         	,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
													aQueryCond		,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
													.F.				,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
													.T.				,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
													.F.				,;	//21 -> Carregar Coluna Fantasma
													.T.				,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
													.F.				,;	//23 -> Verifica se Deve verificar se o campo eh usado
													.F.				,;	//24 -> Verifica se Deve verificar o nivel do usuario
													.F.				,;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
													@aKeys			,;	//26 -> [@]Array que contera as chaves conforme recnos
													@lLock			,;	//27 -> [@]Se devera efetuar o Lock dos Registros
													@lExclu			 ;	//28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
											    ),;
									( lLock .and. lExclu );
					}
		__aMrkRecnos__	:= aClone( aRecnos )
		__aMrkKeys__	:= aClone( aKeys   )
	Else
		bLock := { || LockRegsCode( "SRA" , aRecnos , aKeys , 0 , 0 , lUseCode , NIL ) }
	EndIF

	IF !( lLocks := WhileYesNoWait(;
										bLock															,;	//Bloco a Ser Executando Enquando ( Devera Retornar Valor Logico )
										5																,;	//Numero de Tentativas
										.T.																,;	//Se podera Encerrar as as Tentativas ( Button Cancel Enabled )
										OemToAnsi( cMsg1 )												,;	//Mensagem de Corpo para a MsgInfo
										cCadastro														,;	//Titulo para a MsgInfo
										OemToAnsi( STR0125 ) /*"Tentar novamente?"*/					,;	//Mensagem de Corpo para a MsgYesNo
										cCadastro														,;	//Titulo para a MsgYesNo
										OemToAnsi( STR0126 ) /*"Tentando reservar o(s) registro(s)."*/	,;	//Mensagem de corpo para a ProcWaiting
										cCadastro												 		 ;	//Titulo para a ProcWaiting
								  );
		)
		Break
	EndIF

End Sequence

Return( lLocks )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161FreeLocks³ Autor ³ IP RH Inovacao  ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Libera os Locks dos Registros                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161FreeLocks(nRecnos,cUseCode )            			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpN1 = Numero do registro a ser bloqueado                 ³±±
±±³          ³ ExpC1 = Codigo do funcionario a ser bloqueado              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function PONA161FreeLocks( nRecno , cUsedCod )
Return( FreeLocks( "SRA" , nRecno , .T. , cUsedCod ) )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161ID   ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Seleciona os funcionarios atraves dos ID gerados           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161ID() 								        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function PONA161ID()
Local aArea			:= GetArea()
Local cAliasQry		:= GetNextAlias()
Local cAliasSRA		:= GetNextAlias()
Local cWhere		:= ""
Local cTrfID		:= ""
Local cTrfIDTipo	:= ""
Local nOpt			:= 0
Local oDlg5
Local oUso
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}
Local aLstLote		:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busca as transferencias de funcionario                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cWhere := "% SRE.D_E_L_E_T_ = ' ' AND SRE.RE_FILIALP = '" + xFilial("SPF") + "' AND SRE.RE_TRFUNID <> 0 %"
BeginSql alias cAliasQry
   	SELECT SRE.RE_TRFUNID, SRE.RE_TRFOBS
	FROM %table:SRE% SRE
	WHERE %exp:cWhere%
	GROUP BY RE_TRFUNID, RE_TRFOBS
	ORDER BY RE_TRFUNID, RE_TRFOBS
EndSql

If (cAliasQry)->( !Eof() )
	While (cAliasQry)->( !Eof() )
		aAdd(aLstLote, { STR0135 , (cAliasQry)->RE_TRFUNID, (cAliasQry)->RE_TRFOBS }) // "Funcionário"
		(cAliasQry)->( dbSkip() )
	Enddo
Endif

dbSelectArea(cAliasQry)
dbCloseArea()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busca as transferencias de turno                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cWhere := "% SPF.D_E_L_E_T_ = ' ' AND SPF.PF_FILIAL = '" + xFilial("SPF") +  "' AND SPF.PF_TRFUNID <> 0 %"
BeginSql alias cAliasQry
   	SELECT SPF.PF_TRFUNID, SPF.PF_TRFOBS
	FROM %table:SPF% SPF
	WHERE %exp:cWhere%
	GROUP BY PF_TRFUNID, PF_TRFOBS
	ORDER BY PF_TRFUNID, PF_TRFOBS
EndSql

If (cAliasQry)->( !Eof() )
	While (cAliasQry)->( !Eof() )
		aAdd(aLstLote, { STR0107 , (cAliasQry)->PF_TRFUNID, (cAliasQry)->PF_TRFOBS }) // "Troca de Turno"
		(cAliasQry)->( dbSkip() )
	Enddo
Endif

If Len(aLstLote) > 0

	aSort( aLstLote , , , { |x,y| x[ 2 ] > y [ 2 ] } )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define o cabecalho da tela de atualizacoes                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oOk := LoadBitmap( GetResources(), "ENABLE" )
	oNo := LoadBitmap( GetResources(), "LBNO" )

	SETAPILHA()

	aAdvSize		:= MsAdvSize(,.T.,390)
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd(aObjCoords, { 000, 000, .T., .T., .T.} )     		//2-Group ListBox
	aObjSize		:= MsObjSize(aInfoAdvSize , aObjCoords)

	DEFINE MSDIALOG oDlg5 FROM aAdvSize[7], 0 TO aAdvSize[6], aAdvSize[5]  TITLE OemToAnsi(STR0127) PIXEL	//"Selecao de Id de Transferencias"

	oDlg5:lEscClose := .F.

	@ aObjSize[1,1],aObjSize[1,2] LISTBOX oUso ;
			FIELDS HEADER STR0128,STR0129,STR0130;  // "Tipo Transf." ### "ID Transf." ### "Observação"
			SIZE aObjSize[1,3],aObjSize[1,4] ;
			OF oDlg5 PIXEL  CENTERED
			oUso:SetArray(aLstLote)
			oUso:bLine := { || {aLstLote[oUso:nAt,1],aLstLote[oUso:nAt,2],aLstLote[oUso:nAt,3]}}
			oUso:Refresh()

	ACTIVATE MSDIALOG oDlg5 ON INIT EnchoiceBar(oDlg5,{||nOpt:=1 , A160TrfID(oUso,aLstLote,@cTrfID,@cTrfIDTipo), oDlg5:End() },;
													 {|| oDlg5:End() } ) ;
													 CENTERED
	SETAPILHA()

	If nOpt == 1

		If cTrfIDTipo == STR0135	// "Funcionário"
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Marca todos os funcionarios do ID selecionado - Tipo Funcionario        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cWhere := "% SRE.D_E_L_E_T_ = ' '"
			cWhere += " AND SRE.RE_TRFUNID = " + cTrfID
			cWhere += " AND SRE.RE_EMPP = '" + cEmpAnt + "'"
			cWhere += " AND SRA.RA_FILIAL = SRE.RE_FILIALP"
			cWhere += " AND SRA.RA_MAT = SRE.RE_MATP"
			cWhere += " AND SRA.RA_CC = SRE.RE_CCP"
			cWhere += " AND SRA.RA_POSTO = SRE.RE_POSTOP"
			cWhere += " AND SRA.RA_PROCES = SRE.RE_PROCESP"

			cWhere += " %"

			BeginSql alias cAliasSRA
			   	SELECT SRA.R_E_C_N_O_ AS RECNOSRA
				FROM %table:SRE% SRE, %table:SRA% SRA
				WHERE %exp:cWhere%
				ORDER BY RE_TRFUNID,RE_FILIALP,RE_MATP
			EndSql
		Else
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Marca todos os funcionarios do ID selecionado - Tipo Troca de Turno     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cWhere := "% SPF.D_E_L_E_T_ = ' '"
			cWhere += " AND SPF.PF_FILIAL = '" + xFilial("SPF") + "'"
			cWhere += " AND SPF.PF_TRFUNID = " + cTrfID
			cWhere += " AND SRA.RA_FILIAL = SPF.PF_FILIAL"
			cWhere += " AND SRA.RA_MAT = SPF.PF_MAT"
			cWhere += " %"

			BeginSql alias cAliasSRA
			   	SELECT SRA.R_E_C_N_O_ AS RECNOSRA
				FROM %table:SPF% SPF, %table:SRA% SRA
				WHERE %exp:cWhere%
				ORDER BY PF_TRFUNID,PF_FILIAL,PF_MAT
			EndSql
		Endif

		If (cAliasSRA)->( !Eof() )
			While (cAliasSRA)->( !Eof() )
				SRA->(dbGoTo( (cAliasSRA)->( RECNOSRA ) ))
				PONA161Mrk( "SRA" , .T. , .T. , SRA->( !IsMark( "RA_OKTRANS" , cMarkTransf ) ) )
				(cAliasSRA)->( dbSkip() )
			Enddo
		Endif

		dbSelectArea(cAliasSRA)
		dbCloseArea()

	Endif
Else

	MsgAlert( OemToAnsi(STR0131),OemToAnsi(STR0132) )  // "Não existe ID de transferência para ser selecionado" ### "Atencao"

Endif

dbSelectArea(cAliasQry)
dbCloseArea()
RestArea(aArea)


Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFuncao    ³A160TrfID   ºAutor³IP RH Inovacao         ºData³ 21/05/2012 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna o codigo do lote de transferencia                   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PONA161                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static function A160TrfID(oUso,aLstLote,cTrfID,cTrfIDTipo)

cTrfIDTipo := aLstLote[oUso:nAt,1]
cTrfID 	   := AllTrim(Str(aLstLote[oUso:nAt,2]))

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fPesquisa ºAutor  ³Microsiga           º Data ³  03/04/08   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Efetua pesquisa de campo/titulo de campo na config.campos   º±±
±±º          ³complementares                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static function fPesquisa(oUso,nEstou, cPesq)

Local lRetOk:= .F.
Local nPos 	:= 0

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta o Dialogo de pesquisa                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nPos	:= ascan(aDicioW, {|x| UPPER( ALLTRIM(x[1]) )  = ALLTRIM(cPesq)  } )		//-- Nome Campo
If nPos	= 0
	nPos := ascan(aDicioW, {|x|ALLTRIM(x[3])= ALLTRIM(cPesq) } ) 					//-- Titulo do campo
Endif

If nPos > 0
	oUso:nAt	:= nPos
Else
	MsgAlert( OemToAnsi(STR0133) ,;				// Campo ou titulo nao localizado.
			  OemToAnsi(STR0132) ) 				// "Atencao"
	lRetOk		:= .F.
	oUso:nAT 	:= nEstou
Endif

oUso:Refresh()

Return(lRetOk)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161Cnf  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Monta tela de campos de Informacoes de Destino Unico       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161Cnf() 							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONA161Cnf()

Local bLock	 		:= { || CursorWait() , lLocksOk := PONA161TLocks() , CursorArrow() , lLocksOk }
Local bUnLock		:= { || CursorWait() , PONA161FreeLocks() , CursorArrow() }
Local lLocksOk		:= .T.
Local nOpcA			:= 0
Local bSet15		:= { || IF( PONA161VDU() , ( nOpcA := Confirma , oDlg:End() ) , nOpcA := Abandona ) }
Local bSet24		:= { || nOpca := 2, oDlg:End() }
Local oDlg			:= NIL
Local oGet1
Local oGet2
Local oGet4
Local oGet5
Local oGet7

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaração de arrays para dimensionar tela		             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}

Private dDataTra 	:= dDataBase
Private cTurno 		:= Space(TAMSX3("PF_TURNOPA")[1])
Private cSeqIni 	:= Space(TAMSX3("PF_SEQUEPA")[1])
Private cRegra 		:= Space(TAMSX3("PF_REGRAPA")[1])
Private cObserv 	:= Space(TAMSX3("PF_TRFOBS")[1])

//Local oPeriodo := RHPERIODO:New()
//oPeriodo:cProcesso := SRA->RA_PROCES
//oPeriodo:GetPer()

Begin Sequence

	MsAguarde( bLock , OemToAnsi( STR0136 ) ) //"Reservando os Registros para Transferˆncia"
	IF !( lLocksOk )
		Break
	EndIF

	IF Empty( __aMrkRecnos__ )
		MsgInfo( OemToAnsi( STR0137 ) )				//"Não existem funcionários a serem transferidos"
		Break
	EndIF

	RstTimeRemaining()								//Reinicializa o Contador de Tempos em Proc2BarGauge()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Dialogo para Apresentacao das Informacoes              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos         					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aAdvSize		:= MsAdvSize()
	aAdvSize[5]	:=	370	//horizontal
	aAdvSize[6]	:=  300	//Vertical
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )
	aAdd( aObjCoords , { 000 , 015 , .T. , .F. } )

	aObjSize	:= MsObjSize( aInfoAdvSize , aObjCoords )

	DEFINE MSDIALOG oDlg FROM aAdvSize[7], 0 TO aAdvSize[6], aAdvSize[5] TITLE OemToAnsi(STR0140) OF oMainWnd PIXEL //"Informações de Destino Único"

		@ aObjSize[1][1],aObjSize[1][2] SAY TITSX3("PF_DATA")[1]		SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[1][1],aObjSize[1][2]+35 MSGET oGet1 VAR dDataTra	PICTURE "@D" VALID PONA161DUV(1) SIZE 50,10 OF oDlg PIXEL HASBUTTON

		@ aObjSize[2][1],aObjSize[2][2] SAY TITSX3("PF_TURNOPA")[1]		SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[2][1],aObjSize[2][2]+35 MSGET oGet2 VAR cTurno	PICTURE "@!" VALID PONA161DUV(2) F3 "SR6" SIZE 18,10 OF oDlg PIXEL HASBUTTON

		@ aObjSize[3][1],aObjSize[3][2] SAY TITSX3("PF_SEQUEPA")[1]	SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[3][1],aObjSize[3][2]+35 MSGET oGet4 VAR cSeqIni	PICTURE "@!" VALID PONA161DUV(3) F3 SIZE 15,10 OF oDlg PIXEL HASBUTTON

		@ aObjSize[4][1],aObjSize[4][2] SAY TITSX3("PF_REGRAPA")[1]	SIZE 050,10 OF oDlg PIXEL
		@ aObjSize[4][1],aObjSize[4][2]+35 MSGET oGet5 VAR cRegra	PICTURE "@!" VALID PONA161DUV(4) F3 "SPA" SIZE 15,10 OF oDlg PIXEL HASBUTTON

		@ aObjSize[5][1],aObjSize[5][2] SAY TITSX3("PF_TRFOBS")[1]		SIZE 50,10 OF oDlg PIXEL
		@ aObjSize[5][1],aObjSize[5][2]+35 MSGET oGet7 VAR cObserv	 PICTURE "@!" SIZE 100,10 OF oDlg PIXEL HASBUTTON


	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg, bSet15, bSet24) CENTERED


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Executa a troca de turno em lote                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nOpcA == 1
		Proc2BarGauge( { || PONA161TRFAll() } , OemToAnsi( STR0141 ) , NIL , NIL , .T. , .T. , .F. , .F. ) //"Realizando a Transferencia em Lote"
	Endif

	MsAguarde( bUnLock , OemToAnsi( STR0138 ) )	// "Liberando os Registros"

End Sequence

IF ( ( nOpcA <> 2 ) .And. ( Len( __aMrkRecnos__ ) > 0  ) )
	IF ( Len( __aMrkRecnos__ ) > 0  )
		Proc2BarGauge( { || PONA161MkAll( .F. , .F. , .F. ) } , OemToAnsi( STR0112 ) , NIL , NIL , .T. , .T. , .F. , .F. ) //"Retirando a Seleção"
		__aMrkRecnos__	:= {}
		__aMrkKeys__	:= {}
	EndIF
EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161DUV  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Validacao dos campos de Informacoes de Destino Unico       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161DUV() 							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nExpN1 - numero conteudo o numero do campo a ser validado  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONA161DUV(nOpValid)
Local lRet		:= .T.
Local cMsg		:= ""
Local aRetPEDt	:= {}

If nOpValid == 1		// Validacao da data

	If ExistBlock("PN161ValDt")
		aRetPEDt := ExecBlock("PN161ValDt", .F., .F., {dDataTra})
		If !Empty(aRetPEDt) .And. ValType(aRetPEDt[1]) == "L"
			lRet := aRetPEDt[1]
			If !lRet
				cMsg := aRetPEDt[2]
			EndIf
		EndIf
	EndIf

	If Empty(dDataTra) //Permitir lançar data inferior, assim como no fonte PONA160!  Por isto, removemos: .Or. dDataTra < dDataBase
		lRet := .F.
		cMsg := STR0139 // "Data de Transferência Inválida!"
	Endif

ElseIf nOpValid == 2	// Validacao da Turno

	lRet := ExistCpo( "SR6", cTurno )

ElseIf nOpValid == 3	// Validacao da Sequencia
	If	Empty(cSeqIni)
		lRET := .F.
	Endif
	If	lRet
		lRet := PN161VldSeq( cTurno , cSeqIni , .T.  )
	Endif

ElseIf nOpValid == 4	// Validacao da Regra
	If	Empty(cRegra)
		lRET := .F.
	Endif
	If	lRet
		lRet := ExistCpo("SPA", cRegra)
	Endif

Endif

If !lRet .And. !Empty(cMsg)
	MsgAlert( OemToAnsi(cMsg),OemToAnsi(STR0132) )  //  ### "Atencao"
Endif

Return lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PONA161VDU  ³ Autor ³ IP RH Inovacao      ³ Data ³ 04.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Validacao de todos os campos da tela de Destino Unico      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA161VDU() 							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONA161VDU()
Local lRet	:= .F.

If PONA161DUV(1) .And. PONA161DUV(2) .And.PONA161DUV(3) .And.PONA161DUV(4)
	If MsgYesNo(STR0163+Chr(13)+Chr(10)+STR0164+Chr(13)+Chr(10)+STR0165+Chr(13)+Chr(10)+STR0166,STR0159)
		lRet := .T.
	Endif
Endif

Return ( lRet )

/*/{Protheus.doc} PONA161TRFAll
Executa a troca de turno em lote
@type  Function
@author IP RH Inovacao
@since 12/07/2012
@see Ponto de entrada PONAP160 https://tdn.totvs.com/x/589c
@see Ponto de entrada PONAP161 https://tdn.totvs.com/x/kQ_eI
@history 28/04/2020, Cícero Alves, Inclusão do ponto de entrada PONAP161
/*/
Function PONA161TRFAll()
Local bWhile		:= { |cWhile| &( cWhile ) }
Local cFilSra		:= xFilial("SRA")
Local cSraFilter	:= SRA->( dbFilter() )
Local cTimeIni		:= Time()
Local cTafKey		:= ""
Local nRecno		:= SRA->( Recno() )
Local nProcRegua
Local aLogTransf	:= {}
Local aLogXTransf	:= {}
Local aErros		:= {}
Local aLogSRATransf	:= {}
Local aLogTitle		:= {}
Local aUltTroca		:= array(3)
Local lAtuSRA 		:= .F.
Local nNumTrf		:= 0
Local nY			:= 0
Local nX			:= 0
Local cVersGPE		:= ""
Local lAtuTaf		:= .F.
Local l160PonapBloc := ExistBlock('PONAP160')
Local lPONAP161		:= ExistBlock('PONAP161')
Local lAtuSeq		:= .F.

Private aTpAlt 		:= {.F.,.F.} // indica o tipo de integracao com eSocial
Private dPerIni		:= Ctod("//")
Private dPerFim		:= Ctod("//")
Private oPerFch		:= RHPERIODO():New()   // Objeto que contem os dados do ultimo Periodo Fechado PONTO (SRA)
Private oPeriodo	:= RHPERIODO():New()

Private lTSREP		:= SuperGetMv( "MV_TSREP" , NIL , .F. )
Private oObjREP
Private cDtIniTSREP   := ''
Private cDtFimTSREP   := ''
Private nOpTSREP      := 0
Private cAuxDtIniTSREP:= ''
Private cAuxDtFimTSREP:= ''
Private cRegAntDtFim  := ''
Private lDtsInferiores:= .F.

DEFAULT lCpoIntTaf	:= (ChkFile("SPF") .And. SPF->( ColumnPos("PF_INTGTAF") ) > 0)

CursorWait()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Gera a numeracao sequencial do lote de transferencia                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+SubStr(Time(),7,2))	// 99:99:99
SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_TRFUNID" ) ) )
While SPF->(dbSeek( xFilial("SPF") + Str(nNumTRF) ))
	nNumTRF := Val(DTOS(Date())+SubStr(Time(),1,2)+SubStr(Time(),4,2)+StrZero(Val(SubStr(Time(),7,2))+1,2) )	// AAAAMMDDHHMMSS
Enddo
SPF->( dbSetOrder( RetOrdem( "SPF" , "PF_FILIAL+PF_MAT+DTOS(PF_DATA)" ) ) )

IF !( lAbortPrint )
	cSraFilter += IF( !Empty( cSraFilter ) , " .and. IsMark('RA_OKTRANS','"+cMarkTransf+"')" , "IsMark('RA_OKTRANS','"+cMarkTransf+"')" )
EndIF

IF ( !Empty( cSraFilter ) )
	cSraFilter += " .and. RA_FILIAL == '" + cFilSra + "'"
Else
	cSraFilter += "RA_FILIAL == '" + cFilSra + "'"
EndIF
CREATE SCOPE aScopeCount FOR &( cSraFilter )
nProcRegua := SRA->( RecCount() )
RstTimeRemaining() //Reinicializa o Contador de Tempos em Proc2BarGauge()
BarGauge1Set( nProcRegua )

CursorArrow()
lAbortPrint := .F.
SRA->(DBGOTOP())
SRA->( dbSeek( cFilSra , .F. ) )
While SRA->( !Eof() )
	IncPrcG1Time( NIL , nProcRegua , cTimeIni , .T. , NIL , 1 )
	IF ( lAbortPrint )
		Exit
	EndIF

	If !Eval( bWhile , cSraFilter )
		SRA->( dbSkip() )
		Loop
	EndIf
	Begin Transaction
		If cPaisLoc != "BRA"
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega Ultimo Periodo Fechado Partir do SRA		   		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			oPerFch:cProcesso := SRA->RA_PRCFCH
			oPerFch:cPeriodo  := SRA->RA_PERFCH
			oPerFch:cRoteiro  := SRA->RA_ROTFCH
			oPerFch:cNumPagto := SRA->RA_NUPFCH
			oPerFch:GetPer()

			oPeriodo:cProcesso := SRA->RA_PROCES
			oPeriodo:PerSel()

			dPerFim :=oPeriodo:dDataFim
			dPerIni :=oPeriodo:dDataIni
		Else
			GetPonMesDat( @dPerIni, @dPerFim, SRA->RA_FILIAL )
		EndIf

		lAtuSRA := .F.
		lAtuSeq := .F.

		// Ponto de entrada
		If lPONAP161
			ExecBlock("PONAP161", .F., .F., {dDataTra})
		EndIf

		// Verifica a troca de turno referente a data digitada para buscar as informacoes de origem
		If PN161SPFQry(dDataTra,@aLogSRATransf,@aUltTroca)

			lDtsInferiores 	:= .F.
			cTafKey			:= ""
			dbSelectArea("SPF")
			//removemos o trecho que excluia lançamentos futuros na SPF. Para deixar o funcionamento semelhante ao PONA160

			RecLock("SPF",.T.)
			SPF->PF_FILIAL	:= SRA->RA_FILIAL
			SPF->PF_MAT		:= SRA->RA_MAT
			SPF->PF_DATA	:= dDataTra
			SPF->PF_TURNODE	:= aUltTroca [ 1 ]
			SPF->PF_SEQUEDE	:= aUltTroca [ 2 ]
			SPF->PF_REGRADE	:= aUltTroca [ 3 ]
			SPF->PF_TURNOPA	:= cTurno
			SPF->PF_SEQUEPA	:= cSeqIni
			SPF->PF_REGRAPA	:= cRegra
			SPF->PF_TRFUNID	:= nNumTRF
			SPF->PF_TRFOBS	:= cObserv
			MsUnLock()
			
			If SPF->PF_TURNODE == cTurno .And. SPF->PF_REGRADE ==cRegra .And. SPF->PF_SEQUEDE <> cSeqIni
				lAtuSeq := .T.
			Endif
			If lTSREP
				IntgTSA()
			EndIF
			
			IF dDataTra <= dPerFim .Or. Empty(dPerFim) 
				lAtuSRA := .T.
				IF RecLock("SRA" , .F. )
					SRA->RA_TNOTRAB	:= cTurno
					SRA->RA_SEQTURN	:= cSeqIni
					SRA->RA_REGRA	:= cRegra
					SRA->( MsUnlock() )
				EndIF
			Endif
			
			If lTSREP .And. oObjREP <> Nil
				FreeObj(oObjREP)
				oObjREP := Nil
			EndIf
			aErros:= {}
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Executa Ponto de Entrada para a Emissao de Documento³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( l160PonapBloc )
				ExecBlock('PONAP160' , .F., .F.)
			EndIF
			If (lIntTAF .Or. lMiddleware) .And. !lCpoIntTaf .And. dDataTra > DDATABASE
				aAdd(aErros, "Não é permitida troca de turno futura.")
				lAtuSRA	:= .F.
			EndIf

			If (lIntTAF .Or. lMiddleware) .And. dDataTra <= DDATABASE .And. !lAtuSeq
				If lCpoIntTaf
					cTafKey := Substr(FWUUId(SRA->RA_FILIAL + SRA->RA_MAT + dToS(dDataTra)), 1, 60)
					If RecLock("SPF",.F.)
						SPF->PF_INTGTAF	:= dDatabase
						SPF->PF_TAFKEY	:= cTafKey
						MsUnLock()
					EndIf
				EndIf
				RegToMemory("SRA")
				VerifAlt()
				If aTpAlt[1]
					aAdd(aErros, "O evento S-2200 não foi enviado para o TAF.")
				ElseIf aTpAlt[2]
					If FindFunction("fVersEsoc")
						fVersEsoc( "S2206", .F., /*aRetGPE*/, /*aRetTAF*/, @cVersEnvio, @cVersGPE )
					EndIf
					lAtuTaf:= fInt2206("SRA",, 3,"S2206",,,cTurno,cRegra,cSeqIni,,cVersEnvio,,dDataTra,,,aErros, .F., .T., Nil, Nil, Nil, Nil, cTafKey)
				Endif
				lAtuSRA	:= lAtuTaf
			Endif
			aAdd(aLogTransf,SRA->RA_MAT+"-"+If(lOfuscaNom,Replicate('*',15),Padr(SRA->RA_NOME,30)) + Space(2) + ;
																		Padr(DTOC(SPF->PF_DATA),10) + Space(2) + ;
																		Padr(SPF->PF_TURNODE,8) + Space(2) + ;
																		Padr(SPF->PF_SEQUEDE,6) + Space(2) + ;
																		Padr(SPF->PF_REGRADE,8) + Space(2) + ;
																		Padr(SPF->PF_TURNOPA,10) + Space(2) + ;
																		Padr(SPF->PF_SEQUEPA,8) + Space(2) + ;
																		Padr(SPF->PF_REGRAPA,10) + Space(2) + ;
																		Padr(If(lAtuSRA,STR0153,STR0154),14) + Space(2) + ;	// "Atualizado" ### "Não Atualizado"
																		STR0155 )	// "Inclusao"
			If (lIntTAF .Or. lMiddleware) .And. !lAtuTAF	.And. !lAtuSRA
				For nX:= 1 To Len(aErros)
					aAdd(aLogTransf, aErros[nX])
				Next nX
				DisarmTransaction()
			Else
				aLogTransf[Len(aLogTransf)]:= aLogTransf[Len(aLogTransf)]+ " Registro Integrado Com Sucesso"
			Endif
		Else

			If Len(aLogSRATransf) > 0
				For nY :=1 to Len(aLogSRATransf)
					aAdd(aLogTransf, SRA->RA_MAT + If(lOfuscaNom,'',"-" + SRA->RA_NOME) + Space(2) + Padr( aLogSRATransf[ nY ] ,90) + STR0158 )	// "Inconsistencia"
				Next
			Endif
		Endif
	End Transaction
	dbSelectArea("SRA")
	SRA->( dbSkip() )
End While


IF !Empty( aLogTransf )

	aAdd(aLogTitle, STR0157 ) // "Funcionario                            Data      Turno De  Seq De  Regra De  Turno Para  Seq Para  Regra Para  Cad.Funcion.    Tp.Atualiz."

	// "Transferencia - Data: 99/99/9999 - Turno: xxx - Seq.Turno: 99 - Regra: 99 - Id.Transf.: 99999999999999 - Observacao: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
	aAdd( aLogXTransf,  STR0159 + " - " + AllTrim(TITSX3("PF_DATA")[1])+ ": " + DTOC(dDataTra)+ " - " +;
										   AllTrim(TITSX3("PF_TURNOPA")[1])+ ": " + cTurno + " - " +;
										   AllTrim(TITSX3("PF_SEQUEPA")[1]) + ": " + cSeqIni  + " - " +;
										   AllTrim(TITSX3("PF_REGRAPA")[1]) + ": " + cRegra  + " - " +;
										   STR0129 + ": " + StrZero(nNumTrf,14) + " - " +;
										   AllTrim(TITSX3("PF_TRFOBS")[1]) + ": " + cObserv  )
	aEval( aLogTransf , {|x| aAdd(aLogXTransf,x) } )

	// "Log de Ocorrencias"
	bMakeLog := { || fMakeLog( { aLogXTransf } , aLogTitle,  NIL , .T. , FunName() , NIL , "G" , "L" , NIL , NIL ) }
	MsAguarde( bMakeLog , OemToAnsi( STR0144 ) ) // "Gerando Log de Transferencia de Turno"
EndIF

SRA->( MsGoto( nRecno ) )

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PN161SPFQry  ³ Autor ³ IP RH Inovacao     ³ Data ³ 12.07.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Executa a troca de turno em lote                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PN161SPFQry()							        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpD1 - Data da transferencia em Lote                      ³±±
±±³          ³ ExpA1 - Array do Log de Transferencia                      ³±±
±±³          ³ ExpA2 - Array contendo a ultima Troca de Turno             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PN161SPFQry(dData,aLogTransf,aUltTroca)

Local cAliasQry		:= GetNextAlias()
Local cOrder 		:= ""
Local cWhere 		:= ""
Local lRet 			:= .T.

Default aUltTroca	:= array(3)

aLogTransf	:= {}

If AllTrim(SRA->RA_SITFOLH) $ "D,T"
	aAdd(aLogTransf,STR0162)   // "Transferência não efetuada devido o funcionário estar demitido/transferido."
    lRet := .F.
EndIf

If lRet .And. ( dData <= oPerFch:dDataFim .and. oPerFch:lFechado )
	aAdd(aLogTransf,STR0108)   // "Não é possível manipular Trocas de Turno para períodos FECHADOS !"
    lRet := .F.
EndIf

If lRet .And. dData < SRA->RA_ADMISSA
	aAdd(aLogTransf,OemToAnsi(STR0229))// "A troca de turno deve ser igual ou superior a data de admissão"
    lRet := .F.
EndIf

If lRet
	cOrder := "% PF_DATA %"
	cWhere := "% SPF.PF_FILIAL = '" + SRA->RA_FILIAL +"' AND "
	cWhere += "SPF.PF_MAT = '" + SRA->RA_MAT + "' AND "

	cWhere += "SPF.PF_DATA < '" + DTOS(dData) + "'%"

	DbselectArea("SPF")
	SPF->(DbSetOrder(1))
	SPF->(DbSeek(SRA->RA_FILIAL + SRA->RA_MAT + dtos(dData) ))

	If SPF->(!Eof())
		aAdd(aLogTransf,STR0212)
		lRet := .F.
	Else
		BeginSql alias cAliasQry
			SELECT SPF.*
			FROM %table:SPF% SPF
			WHERE %exp:cWhere% AND SPF.%NotDel%
			ORDER BY %exp:cOrder% DESC
		EndSql

		If !(cAliasQry)->(Eof())
			If (cAliasQry)->PF_TURNOPA == cTurno .And. (cAliasQry)->PF_SEQUEPA == cSeqIni .And. (cAliasQry)->PF_REGRAPA == cRegra
				aAdd(aLogTransf,STR0161)   // "Funcionario possui os mesmos dados de origem/destino da ultima transferencia."
				lRet := .F.
			Else
				aUltTroca[1] := (cAliasQry)->PF_TURNOPA
				aUltTroca[2] := (cAliasQry)->PF_SEQUEPA
				aUltTroca[3] := (cAliasQry)->PF_REGRAPA
			Endif
		Else

			aUltTroca[1] := SRA->RA_TNOTRAB
			aUltTroca[2] := SRA->RA_SEQTURN
			aUltTroca[3] := SRA->RA_REGRA

			//alteramos o PONA161 para deixar efetuar troca de turno para um funcionário que não possuia nenhum registro na SPF ainda (semelhante ao PONA160)
		Endif

		(cAliasQry)->(dbCloseArea())
	EndIf

Endif

Return( lRet )
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ProxDt       ³ Autor ³ Oswaldo L          ³ Data ³ 12.08.17 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Localiza proxima troca com data superior ao nosso registro ³±±
±±³            e refaz data fim. O Mesmo com datas inferiores             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ProxDt()	    						        		      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function ProxDt (lSup)
Local cAliasTrb := GetNextAlias()
Local cData     := ctod('//')
Local dDtProx   := ctod('//')
Local cWhere    := "% SPF.D_E_L_E_T_ = ' '  AND SPF.PF_MAT = '" + SPF->PF_MAT + "'  AND SPF.PF_FILIAL = '" + SPF->PF_FILIAL +  "' AND SPF.PF_DATA >= '" + dtos(dPerIni) + "' AND SPF.PF_DATA <= '" + dtos(dPerFim) + "' "

If lSup
	cWhere += " AND SPF.PF_DATA > '" + dtos(SPF->PF_DATA) + "' ORDER BY SPF.PF_DATA %"
Else
	cWhere += " AND SPF.PF_DATA < '" + dtos(SPF->PF_DATA) + "' ORDER BY SPF.PF_DATA DESC%"
EndIf

BeginSql Alias cAliasTrb
		SELECT	SPF.*
		FROM	%table:SPF% SPF
		WHERE %exp:cWhere%
EndSql

If lSup
	dDtProx     := stod('20491231')

	If (cAliasTrb)->(!Eof())
		dDtProx := stod((cAliasTrb)->(PF_DATA))
		dDtProx -= 1
	EndIf
	cData       := dtos(dDtProx)
Else
	If (cAliasTrb)->(!Eof())
		dDtProx   := SPF->PF_DATA
		dDtProx   -= 1
		cData     := dtos(dDtProx)
		SPF->(DbGoTo( (cAliasTrb)->(R_E_C_N_O_) ))
	EndIf
EndIf

(cAliasTrb)->(DbCloseArea())

return cData


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³IntgTSA    ³ Autor ³ Oswaldo Leite        ³ Data ³ 12.08.17 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Integracao turno TSA - regras do PONA160                   ³±±
±±             A estrutura do codigo esta diferente do PONA160 q usa aCols³±±
±±             ja este fonte veio da Fase4 e le direto o SPF. Mas as  re- ³±±
±±             gras foram implementadas observando funcionamento  PONA160 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ IntgTSA()							        		      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Function IntgTSA ()
Local cFrmtSPF  := ''

oObjREP         := PTSREPOBJ():New()

cDtIniTSREP	    := DTOS(SRA->RA_ADMISSA)
cDtIniTSREP     := SubStr(cDtIniTSREP,1,4)+"-"+SubStr(cDtIniTSREP,5,2)+"-"+SubStr(cDtIniTSREP,7,2)

cAuxDtIniTSREP	:= DTOS(SPF->PF_DATA)
cAuxDtFimTSREP  := ProxDt(.T.)

nOpTSREP := 4 // Inclusao no TSA

If STOD(cAuxDtIniTSREP) < Date()

	lDtsInferiores := .T.
	/*
		Este trecho contempla a seguinte situação:
		Suponha que a data atual seja 16-08-17. Então, o usuário insere um novo registro na SPF com data inferior 11-08-17 trocando o turno para X
		Feito isto, o sistema deverá apagar um registro TSA referente a 16-08-17(olhar Date e não dDataBase).
		Após apagá-lo do TSA, voltamos a data antiga de 11-08-17 e efetuamos um comando de inclusão de registro no TSA.
		Internamente, apesar de passarmos 11-08-17 no comando de inserir o TSA gera um registro com data de 16-08-17 e com turno X.
	*/

	nOpTSREP       := 5
	cAuxDtIniTSREP := dtos(Date())
	cDtIniTSREP	   := SubStr(cAuxDtIniTSREP,1,4)+"-"+SubStr(cAuxDtIniTSREP,5,2)+"-"+SubStr(cAuxDtIniTSREP,7,2)

	oObjREP:WSUser( 5 , cDtIniTSREP,,,SPF->PF_TURNOPA,,, SPF->PF_SEQUEPA )
	FreeObj(oObjREP)
	oObjREP         := Nil

	cAuxDtIniTSREP	:= DTOS(SPF->PF_DATA) //conforme a explicação anterior, retornar a data antiga editada pelo usuário
	//===============================================================================
	oObjREP  := PTSREPOBJ():New()
	nOpTSREP := 4
EndIf

cDtIniTSREP	:= SubStr(cAuxDtIniTSREP,1,4)+"-"+SubStr(cAuxDtIniTSREP,5,2)+"-"+SubStr(cAuxDtIniTSREP,7,2)
cDtFimTSREP	:= SubStr(cAuxDtFimTSREP,1,4)+"-"+SubStr(cAuxDtFimTSREP,5,2)+"-"+SubStr(cAuxDtFimTSREP,7,2)

If oObjREP:WSUser( nOpTSREP , cDtIniTSREP,,,cTurno,,cDtFimTSREP,cSeqini)
	If SPF->(dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + cAuxDtIniTSREP))
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grava o controle de exportacao para o TSA - Turno            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oObjRep:WSUpdRHExp( "SPF" )
	Endif
Endif

If !lDtsInferiores
	cRegAntDtFim := ProxDt(.F.)

	//caso haja um reg anterior ao recem incluido, a data final dele no TSA deve ser re-calculada
	If !Empty(cRegAntDtFim)

		FreeObj(oObjREP)
		oObjREP  := Nil


		//=============== Exclusão lançamento no Tsa ====================================
		oObjREP  := PTSREPOBJ():New()
		nOpTSREP := 5

		cAuxDtFimTSREP := '20491231'  // como esta rotina exclui todos os lançamentos superiores a database na qual fora executada. Então, no inicio
		                              //desta rotina, assim que os movtos futuros foram excluidos, o respectivo registro ficou com data fim '20491231'
		                              //e após isto ainda inserimos o nosso novo registro de troca de turno. Entao, apago o registro anterior ao nosso
		                              //e o re-crio modificando a data final dele (que não será mais  '20491231'e sim a "data da nossa troca de turno - 1"

		//como as datas devem ser formatadas antes de passá-las como parâmetro
		cAuxDtIniTSREP := dtos(SPF->PF_DATA)
		cDtIniTSREP	   := SubStr(cAuxDtIniTSREP,1,4)+"-"+SubStr(cAuxDtIniTSREP,5,2)+"-"+SubStr(cAuxDtIniTSREP,7,2)
		cDtFimTSREP	   := SubStr(cAuxDtFimTSREP,1,4)+"-"+SubStr(cAuxDtFimTSREP,5,2)+"-"+SubStr(cAuxDtFimTSREP,7,2)

		oObjREP:WSUser( 5 , cDtIniTSREP,,,SPF->PF_TURNOPA,,, SPF->PF_SEQUEPA )

		FreeObj(oObjREP)
		oObjREP := Nil


		//=============== Inclusão lançamento no Tsa ====================================
		oObjREP        := PTSREPOBJ():New()
		nOpTSREP       := 4 // Re-incluir o mesmo registro com data final ajustada

        //como as datas devem ser formatadas antes de passá-las como parâmetro
		cAuxDtIniTSREP := dtos(SPF->PF_DATA)
		cAuxDtFimTSREP := cRegAntDtFim
		cDtIniTSREP	   := SubStr(cAuxDtIniTSREP,1,4)+"-"+SubStr(cAuxDtIniTSREP,5,2)+"-"+SubStr(cAuxDtIniTSREP,7,2)
		cDtFimTSREP	   := SubStr(cAuxDtFimTSREP,1,4)+"-"+SubStr(cAuxDtFimTSREP,5,2)+"-"+SubStr(cAuxDtFimTSREP,7,2)

		If oObjREP:WSUser( nOpTSREP , cDtIniTSREP,,,SPF->PF_TURNOPA,,cDtFimTSREP, SPF->PF_SEQUEPA)
			If SPF->(dbSeek(SRA->RA_FILIAL + SRA->RA_MAT + cAuxDtIniTSREP))

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Grava o controle de exportacao para o TSA - Turno            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				oObjRep:WSUpdRHExp( "SPF" )

			Endif
		Endif
		//===============================================================================

	EndIf
Else
    cFrmtSPF := dtos(Date())
	cFrmtSPF := substr(cFrmtSPF,7,2) + substr(cFrmtSPF,5,2)  + substr(cFrmtSPF,3,2)
	DesmarcaRhExp(cFrmtSPF)
EndIf

return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³DesmarcaRhExp ³ Autor ³ Oswaldo Leite     ³ Data ³ 12.08.17 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³  Ajusta flag RHEXP dos registros, caso existam varios lança³±±
±±              mentos em um mesmo dia                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ DesmarcaRhExp()					        		          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PONA161                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

static Function DesmarcaRhExp(cFrmtSPF)
Local cAliasTrb := GetNextAlias()
Local cOld      := ''
Local lPrimeiro := .T.
Local cInicDt   := ''
Local cWhere    := "% SPF.D_E_L_E_T_ = ' '  AND SPF.PF_MAT = '" + SPF->PF_MAT + "'  AND SPF.PF_FILIAL = '" + SPF->PF_FILIAL +  "' AND SPF.PF_DATA >= '" + dtos(dPerIni) + "' AND SPF.PF_DATA <= '" + dtos(dPerFim) + "' "

cWhere += " AND SPF.PF_RHEXP = '" + cFrmtSPF + "' ORDER BY SPF.PF_DATA DESC %"

BeginSql Alias cAliasTrb
		SELECT	SPF.*
		FROM	%table:SPF% SPF
		WHERE %exp:cWhere%
EndSql

While (cAliasTrb)->(!Eof())

	If !lPrimeiro
		FreeObj(oObjREP)
		oObjREP  := Nil

		oObjREP  := PTSREPOBJ():New()
		cOld     := (cAliasTrb)->(PF_DATA)
		cOld     := dtos(Date())
		cInicDt	 := SubStr(cOld,1,4)+"-"+SubStr(cOld,5,2)+"-"+SubStr(cOld,7,2)

		oObjREP:WSUser( 5 , cInicDt,,,(cAliasTrb)->(PF_TURNOPA),,, (cAliasTrb)->(PF_SEQUEPA) )
	EndIf

	lPrimeiro := .F.//ordem decresc. - descarta primeiro registro pois este sempre fica com rhexp marcado

	(cAliasTrb)->(DbSkip())
End

(cAliasTrb)->(DbCloseArea())

return


Function VerifAlt()

Local cTrabVincu	:= fCatTrabEFD("TCV") //"101|102|103|104|105|106|111|301|302|303|306|309" //Trabalhador com vinculo
Local cCPF 	:= ""
Local cStat1 	:= ""
Local cStatus := ""

aTpAlt := {.F.,.F.}
if (lIntTAF .Or. lMiddleware) .AND. SRA->RA_CATEFD $ cTrabVincu
	If !lMiddleware
		cCPF	:= AllTrim(SRA->RA_CIC) + ";" + ALLTRIM(SRA->RA_CODUNIC)
		cStat1	:= cStatus := TAFGetStat( "S-2200", cCPF )

		If cStatus == " " .and.  cStat1 <> " " // o funcionario foi inserido no esocial pelo registro 2100
			aTpAlt := {.F.,.T.} // Gerar O 2206
		elseIf cStatus == "4" .or.  cStat1 == "4" // o funcionario foi inserido no esocial pelo registro 2100
			aTpAlt := {.F.,.T.} // Gerar O 2206
		elseif val(cStatus) < 2 .and.  cStatus <> "2" // registro 2200 ainda nao enviado ao RET
			aTpAlt := {.T.,.F.} // Gerar O 2200 novamente
		Endif
	Else
		cCPF	:= AllTrim(SRA->RA_CIC) + ALLTRIM(SRA->RA_CODUNIC)
		cStatus := "-1"
		fPosFil(cEmpAnt, SRA->RA_FILIAL)
		aInfoC   := fXMLInfos()

		If Len(aInfoC) >= 4
			cTpInsc		:= aInfoC[1]
			cIdXml		:= aInfoC[3]
			lAdmPubl	:= aInfoC[4]
			cNrInsc		:= Padr(Iif(!lAdmPubl .And. cTpInsc == "1", SubStr(aInfoC[2], 1, 8), aInfoC[2]), 14)
		Else
			cTpInsc		:= ""
			lAdmPubl	:= .F.
			cNrInsc		:= Padr(Iif(!lAdmPubl .And. cTpInsc == "1", SubStr("0", 1, 8), "0"), 14)
			cId			:= ""
		EndIf

		cChaveMid	:= cTpInsc + cNrInsc + "S2200" + Padr(SRA->RA_CODUNIC, 36, " ")
		cStatus 	:= "-1"

		//RJE_TPINSC+RJE_INSCR+RJE_EVENTO+RJE_KEY+RJE_INI
		GetInfRJE(2, cChaveMid, @cStatus)

		If cStatus == "1"
			aTpAlt := {.F., .F.} // Gerar O 2206

		ElseIf cStatus == "4" .or.  cStat1 == "4" // o funcionario foi inserido no esocial pelo registro 2100
			aTpAlt := {.F., .T.} // Gerar O 2206

		ElseIf val(cStatus) < 2 .and.  cStatus <> "2" // registro 2200 ainda nao enviado ao RET
			aTpAlt := {.T., .F.} // Gerar O 2200 novamente
		EndIf
	EndIf
Endif

Return( .T. )

/*/{Protheus.doc} fVldDelGFP
Valida deleção das publicações
@author gabriel.almeida
@since 27/10/2019
@param aHeader, array, Header do GRID da SPF
@param aCols  , array, aCols do GRID das SPF
@return lDel  , lógico, retorna se pode encerrar a tela ou não
/*/
Static Function fVldDelGFP(aHeader,aCols)
	Local nDelete  := GdFieldPos( "GDDELETED"	, aHeader )
	Local nRecAcol := GdFieldPos( "PF_REC_WT"	, aHeader )
	Local nX       := 0

	aRecDel := {}

	If lGestPubl .And. cModulo $ 'GFP*VDF'
		aEval(aCols,{ |x,y| IF( x[nDelete] , aAdd( aRecDel , x[nRecAcol] ) , ) } )

		For nX := 1 To Len(aRecDel)
			SPF->( MsGoto( aRecDel[nX] ) )

			If QueryRI6( DToS(SPF->PF_DATA),SRA->RA_FILIAL,SRA->RA_MAT,"SPF" ) == "P"
				lDel := .F.
				MsgAlert(STR0220 + AllTrim( STR(nX) ) + STR0221) //O item X não pode ser excluído, pois já foi publicado
				Exit
			EndIf
		Next nX
	EndIf
Return lDel
