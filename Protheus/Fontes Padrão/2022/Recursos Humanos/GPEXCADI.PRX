#INCLUDE "GPEXCALC.CH" 
#INCLUDE "PROTHEUS.CH"


Static __lMemCalc
Static lPropDiaSt := .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³			ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.			  			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data	³ FNC			 ³  Motivo da Alteracao 					³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Flavio Corre³25/02/15³PCREQ-2898      ³Inclusao fonte							³±±
±±³M. Silveira ³02/07/15³TSQWF2          ³Ajuste fBuscaRG4 para permitir pesquisar o³±±
±±³            ³        ³                ³na RG4 o periodo conforme a data passada. ³±±
±±³Allyson M.  ³24/07/15³TSYCMT          ³Ajuste em fCalAdt() p/ nao gravar a verba ³±±
±±³            ³        ³                ³no movimento caso seja roteiro de ADI e   ³±±
±±³            ³        ³                ³verba incorpora ao salario.  				³±±
±±³Allyson M.  ³15/12/15³TUAVQN          ³Ajuste no calculo dos adicionais para     ³±±
±±³            ³        ³                ³verificar se e' roteiro FOL e demitido p/ ³±±
±±³            ³        ³                ³nao calcular o adicional na folha.		³±±
±±³Allyson M.  ³05/01/16³TUCOAO          ³Ajuste no calculo dos adicionais para     ³±±
±±³            ³        ³                ³verificar o campo de limite de percentual ³±±
±±³Raquel Hager³26/02/16³TUNDYY          ³Ajuste no calculo do salario hora ref a   ³±±
±±³            ³        ³                ³periculosidade.							³±±
±±³Raquel Hager³04/03/16³TUKV34          ³Ajuste no calculo de periculosidade sobre ³±±
±±³            ³        ³                ³verbas, impressao das horas de cadastro.  ³±±
±±³Renan Borges³24/05/16³TVGAWA          ³Ajuste para não somar as verbas de abono  ³±±
±±³            ³        ³                ³no pagamento de 1/3 pois já há a verba de ³±±
±±³            ³        ³                ³1/3 específica para abono.                ³±±
±±³            ³        ³                ³Ajuste para calcular periculosidade corre-³±±
±±³            ³        ³                ³tamente quando dias de calculo estiver    ³±±
±±³            ³        ³                ³igual a 31.                               ³±±
±±³            ³        ³                ³Removido proporcionalização incorreta de  ³±±
±±³            ³        ³                ³insalubridade.                            ³±±
±±³João Balbino³        ³                ³Ajuste para calculo do adicional por tempo³±±
±±³            ³        ³                ³de serviço, apenas na fórmula GRVADI13.   ³±±
±±³Allyson M.  ³13/06/16³TUV837          ³Ajuste p/ não gerar o adicional por tempo ³±±
±±³            ³        ³                ³de servico se for adiantamento            ³±±
±±³Allyson M.  ³13/06/16³TVEX43          ³Ajuste p/ não proporcionalizar a base dos ³±±
±±³            ³        ³                ³adicionais quando for 1a. parcela do 13o. ³±±
±±³            ³        ³                ³pois o valor do adicional ja sera propor- ³±±
±±³            ³        ³                ³cionalizado em S_GRVADI13 				³±±
±±³Raquel Hager³14/06/16³TVAV88          ³Incluido na função fCalAdt tratamento para³±±
±±³            ³        ³                ³calculo proporcional de adicionais.       ³±±
±±³Raquel Hager³21/06/16³TVAV88          ³Ajuste na funcao fCalAdt p/ tratamento no ³±±
±±³            ³        ³                ³calculo proporcional de adicionais.       ³±±
±±³Allyson M.  ³29/06/16³TUV837          ³Ajuste p/ zerar o valor dos adicionais    ³±±
±±³            ³        ³                ³quando adiantamento e verba não incorporar³±±
±±ºClaudinei S.³08/07/16³TVP136/TUQEKD   ³Criada a função fCalcAbo para calcular o  ³±±
±±º            ³        ³                ³abono do PPE - Prog. Proteção ao Emprego. ³±±
±±º            ³        ³                ³Merge da 12.1.12.                         ³±±
±±³Allyson M.  ³12/07/16³TVNTY4          ³Ajuste em Pericul() p/ não considerar as  ³±±
±±³            ³        ³                ³verbas de ferias quando calcular a folha  ³±±
±±³Allyson M.  ³28/07/16³TVNTY4          ³Ajuste em Pericul() p/ quando for sobre   ³±±
±±³            ³        ³                ³verbas p/ somente proporcionalizar o sala-³±±
±±³            ³        ³                ³rio conforme dias trabalhados pois estava ³±±
±±³            ³        ³                ³proporcionalizando o salario e as verbas  ³±±
±±³Allyson M.  ³29/07/16³TVLPAL          ³Ajuste em Pericul() p/ quando for sobre   ³±±
±±³            ³        ³                ³verbas na proporcionalizacao p/ considerar³±±
±±³            ³        ³                ³os dias de FGTS 							³±±
±±³Allyson M.  ³29/08/16³TVVVXU          ³Ajuste em Insalub() p/ gerar valor de     ³±±
±±³            ³        ³                ³insalubridade mensal corretamente (0672)  ³±±
±±³Raquel Hager³07/10/16³TWBMAZ          ³Ajuste para cálculo correto de Insalubrida³±±
±±³            ³        ³                ³de Sobre Verbas.                          ³±±
±±³Claudinei S.³02/12/16³TWHBG3/MRH-855  ³Ajuste em fCalAdt() para que o cálculo dos³±±
±±³            ³        ³                ³adicionais por tempo de serviço considere ³±±
±±³            ³        ³                ³as verbas do grupo 0 para os horistas com ³±±
±±³            ³        ³                ³jornada variável.                         ³±±
±±³Gabriel A.  ³13/12/16³97049           ³Ajuste para que as bases de ATS, pericul. ³±±
±±³            ³        ³MRH-305         ³e insalub. sejam incorporadas no salário  ³±±
±±³            ³        ³                ³quando o funcionário está o mês inteiro   ³±±
±±³            ³        ³                ³de férias.                                ³±±
±±³Claudinei S.³03/01/16³TVJDLP / MRH-540³Ajuste em Insalub() p/ abater os dias de  ³±±
±±³            ³        ³                ³falta corretamente, quando a base for por ³±±
±±³            ³        ³                ³salário minimo+verbas e a verba de falta  ³±±
±±³            ³        ³                ³estiver com incidência para insalubridade.³±±
±±³Raquel Hager³04/01/17³MRH-4141        ³Ajuste em fCalAdt() para que o cálculo dos³±±
±±³            ³        ³                ³adicionais por tempo de serviço considere ³±±
±±³            ³        ³                ³Salario do func. Horista com Jord. Varl.  ³±±
±±³            ³        ³                ³no cálculo da 2ª Parc. 13º salário.       ³±±
±±³Raquel Hager³09/01/17³MRH-2970        ³Ajuste em fCalAdt para gravação da coluna ³±±
±±³            ³        ³                ³Valor Base corretamente.                  ³±±
±±³Eduardo K.  ³09/05/17³MPRIMESP-9931   ³Ajuste no calculo de insalubridade caso   ³±±
±±³            ³        ³                ³existam faltas informadas em horas.       ³±±
±±³Gabriel A.  ³28/06/17³DRHPAG-3621     ³Inclusão de tratamento para a opção 3 dos ³±±
±±³            ³        ³                ³campos que definem o acúmulo do ATS.      ³±±
±±³Eduardo K.  ³30/11/17³MPRIMESP-12272  ³Ajuste no calculo de insalubridade para   ³±±
±±³            ³        ³                ³licença maternidade.				        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ fCAdConf ºAutor  ³ Mauricio MR        º Data ³ 29/06/2012  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Calculo de Adicional Cargo de Confianca					  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P10                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function fCAdConf(aCodfol,cGrava,SalMes,lRegrava,nBaseAdc,cCodConf,nPerConf,nAdcConf,lPropDia)

Local cCodMes	:= aCodFol[1324, 1]
Local cCodMS	:= aCodFol[1325, 1]
Local lDiasPer	:= (GetMVRH("MV_DIASPER",,"1") == "1")
Local lFlagInc	:= .F.
Local nDiasPerMS:= 0
Local nHrsAdc	:= 0
Local nPosPDV 	:= 0
Local nPosSB  	:= 0
Local nPosVbApd	:= 0
Local nPercAux	:= nPerConf

Static __lCodMPA

DEFAULT nBaseAdc	:= 0
DEFAULT lPropDia	:= .F.
DEFAULT __lMemCalc	:= cPaisLoc == "BRA" .And. fMemCalc() // Memória de Cálculo
DEFAULT __lCodMPA 	:= SRV->(ColumnPos( "RV_CODMPA" )) > 0

If Empty(cCodConf)
	CMSGLOG := FMSGFORM({92}) + " -> " + GetStackFormula() + " - " + fDesc("RC2",Substr( GetStackFormula(), 3 , 15 ),"RC2_DESC",,,2)        
	S_MSGLOG()      
	FINALCALC()
	Return()
Else
	If __lMemCalc
		fAddMemLog("Verba Insalubridade  : " + cCodConf + " - " +  RetValSRV(cCodConf,SRA->RA_FILIAL,"RV_DESC") ,1,1)
	EndIf
EndIf

//se adicional foi informado, nao calcular novamente.
If (nPosVbApd := Ascan(aPd, { |X| X[1] = cCodConf .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0
	nAdcConf := aPd[nPosVbApd][5]
	Return()
Endif

If !lDissidio .And. !(SRA->RA_RESCRAI$'30/31') .And. cSitFolh == "D" .And. cTipoRot == "1" .And. (Type("lSalInco")=="U" .or. !lSalInco)
	Return()
EndIf

If lRegrava == NIL
	lRegrava := .F.
EndIf

If RetValSrv(cCodConf,SRA->RA_FILIAL,"RV_BASCAL") <> "2"
	nBaseAdc := (SALARIO)
	If __lMemCalc
		fAddMemLog("Base de cálculo com salário base: " + cValToChar( nBaseAdc ),1,1)
	EndIf
Else
	nBaseAdc := SALMES
	If __lMemCalc
		fAddMemLog("Base de cálculo com salário incorporado: " + cValToChar( nBaseAdc ),1,1)
	EndIf
EndIf

If __lMemCalc
	fAddMemLog("Calculo via dissídio ? " + If(lDissidio,"Sim","Não")  ,1,1)
EndIf

//Se dissidio, verifica se houve pagamento de adicional de confianca
If lDissidio .And. !(cTipoRot $ "4*3*6")
	SR9->(DbSetOrder(1))
	If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "RA_ADCCONF"))
		While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_ADCCONF" $ SR9->R9_CAMPO)
			If SR9->R9_DATA <= dDataAte
				nPerConf := Val(StrTran(SR9->R9_DESC,",","."))
				If __lMemCalc
					fAddMemLog("Percentual cargo de confiança: " + cValToChar( AllTrim( Transform(nPerConf,"@E 999,999,999.99") ) ) ,1,1)
				EndIf
			Else
				Exit
			EndIf	
		SR9->( dbSkip() )
		EndDo
	EndIf
	If nPerConf == 0 .and. nPercAux > 0
		aEval( aPdOld, { |X| If( X[1] $ cCodConf + "/" + aCodFol[1294,1] + "/" + aCodFol[1308,1] + "/" + aCodFol[1309,1] + "/" + aCodFol[1421,1], nHrsAdc += X[5], 0 ) } )
		nPerConf := If(nHrsAdc == 0, 0, nPercAux)
		If __lMemCalc
			fAddMemLog("Percentual não encontrado no histórico." ,1,1)
			fAddMemLog("Percentual pago analisando folha da época: " + cValToChar( AllTrim( Transform(nPerConf,"@E 999,999,999.99") ) ) ,1,1)
		EndIf	
	EndIf
ElseIf __lMemCalc
	fAddMemLog("Percentual cargo de confiança: " + cValToChar( nPerConf ),1,1)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula apenas para empregados com adicional a calcular			³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty(nPerConf) .and. !Empty(cCodConf)

   	nAdcConf  :=  ( nBaseAdc * (nPerConf/100) )

	If __lMemCalc
		fAddMemLog("Resultado adicional (base * percentual) : " + cValToChar( nAdcConf ) ,1,1)
	EndIf
   	
   	fIncide(cCodConf)
			
	nPosPDV := aScan(aPdv, { |Y| Y[1] = cCodConf })
   	lFlagInc:= RetValSRV(FGETCODFOL("0984"), SRA->RA_FILIAL, "RV_INCORP") == "S"
   	// Verifica se a verba gerada na folha incorpora o salário, se sim incorpora o valor integral do adicional
	If nPosPDV > 0 .And. RetValSRV(FGETCODFOL("0984"), SRA->RA_FILIAL, "RV_INCORP") == "S" .And. ;
		( cTipoRot $ "2*3*5*6" .Or. (cTipoRot == "1" .And. cSitFolh == "F" .And. DiasTrab == 0) )
		IncorpSal(nAdcConf)
		lFlagInc	:= .F.
	ElseIf cTipoRot == "2" .and. aPdv[nPosPDV,18] != "S"//Não considera no adiantamento se não incorporar
		nAdcConf := 0
	EndIf
	
	If fGetTipoRot(GETROTEXEC()) == "G" .And. nAdcConf > 0 .And. nPosPDV > 0
		FMatriz(cCodConf,nAdcConf, , , ,'V', , , , ,.T.)
	EndIf
	
	If cTipoRot == "3"
		nDiasPerMS	:= nDiasPerF2
		If SRA->RA_CATFUNC $ "H*G" .And. lDiasPer
			nDiasPerMS	:= nDiasPerF1
		EndIf
		fGeraVerba(cCodConf, Round(( nAdcConf / nDiasPerF1) * nDiasFM, 2), nDiasFM, cSemana,,,,,,,11,If(nDiasPerF1 == nDiasFM + nDiasFMS, Nil, nAdcConf), Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, lFlagInc)
		If nDiasFMS > 0
			If nDiasFMS1 > 0
				fGeraVerba(aCodFol[1309,1], Round((nAdcConf / nDiasPerF2) * nDiasFMS, 2), nDiasFMS, cSemana,,,,,,,,,,"1")
                fGeraVerba(aCodFol[1309,1], Round((nAdcConf / nDiasPerF1) * nDiasFMS1, 2), nDiasFMS1, cSemana,,,,,,,,,,"2")
			Else
				fGeraVerba(aCodFol[1309,1], Round((nAdcConf / nDiasPerMS) * nDiasFMS, 2), nDiasFMS, cSemana,,,,,,,,If(nDiasPerF1 == nDiasFM + nDiasFMS, Nil, nAdcConf), Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, lFlagInc)
			EndIf
		EndIf
		If __lCodMPA .And. !Empty(P_DINIADI) .And. !Empty(P_DFIMADI) .And. GetMemVar("RH_DATAINI") >= P_DINIADI .And. GetMemVar("RH_DATAINI") <= P_DFIMADI
			If !Empty(RetValSrv( aCodFol[1324,1], SRA->RA_FILIAL, "RV_CODMPA"))
				cCodMes	:= RetValSrv( aCodFol[1324,1], SRA->RA_FILIAL, "RV_CODMPA")
			EndIf
			If !Empty(RetValSrv( aCodFol[1325,1], SRA->RA_FILIAL, "RV_CODMPA"))
				cCodMS	:= RetValSrv( aCodFol[1325,1], SRA->RA_FILIAL, "RV_CODMPA")
			EndIf
		EndIf
		If nDiasAbM > 0
			fGeraVerba(cCodMes, Round(( nAdcConf / nDiasPerF1) * nDiasAbM, 2), nDiasAbM, cSemana,,,,,,,,, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, lFlagInc)
		EndIf
		If nDiasAbMS > 0
			If ( nDiasAbMS1 > 0 )
    	        fGeraVerba(cCodMS, Round((nAdcConf / nDiasPerF2) * nDiasAbMS, 2), nDiasAbMS,cSemana,,,,,,,,,,"1")
                fGeraVerba(cCodMS, Round((nAdcConf / nDiasPerF1) * nDiasAbMS1, 2), nDiasAbMS1,cSemana,,,,,,,,,,"2")
            Else
				fGeraVerba(cCodMS, Round((nAdcConf / nDiasPerMS) * nDiasAbMS, 2), nDiasAbMS, cSemana,,,,,,,,, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil, lFlagInc)
			EndIf
		EndIf
	EndIf
	
	If ( nPosSB := aScan(aSalBase, { |X| X[1] == cCodConf } ) ) == 0
		nOrdGrPd++
		aAdd(aSalBase,{cCodConf + "*" + aCodFol[1309,1],nBaseAdc,nOrdGrPd})
	Else
		aSalBase[nPosSB,2] := nBaseAdc
		aSalBase[nPosSB,3] := nOrdGrPd
	EndIf
 
EndIf	

Return (.T.)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ fCAdTrf  ºAutor  ³ Mauricio MR        º Data ³ 31/08/2012  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Calculo de Adicional de Transferencia					  º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ P11                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/                                                       

Function fCAdTrf(aCodfol,cGrava,SalMes,lRegrava,nBaseAdc,cCodPd,nPerAdTrf,nAdcTrf,lPropDia) 

Local nHrsAdc	:= 0
Local nPosPDV	:= 0
Local nPosVbApd	:= 0

DEFAULT nBaseAdc:= 0
DEFAULT lPropDia:= .F.

DEFAULT __lMemCalc := cPaisLoc == "BRA" .And. fMemCalc() // Memória de Cálculo

//se adicional foi informado, nao calcular novamente.
If !Empty(cCodPd) .and. (nPosVbApd := Ascan(aPd, { |X| X[1] = cCodPd .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0
	nAdcTrf := aPd[nPosVbApd][5]
	If __lMemCalc
		fAddMemLog("Adicional de transferência informado :" + Transform(nAdcTrf,"@E 999,999,999.99"),1,1)
	EndIf
	Return()
Endif

If !lDissidio .And. !(SRA->RA_RESCRAI$'30/31') .And. cSitFolh == "D" .And. cTipoRot == "1" .And. (Type("lSalInco")=="U" .or. !lSalInco)
	Return()
EndIf

If __lMemCalc
	If !Empty(cCodPd)
		fAddMemLog("Verba Adicional de transferência  : " + cCodPd + " - " +  RetValSRV(cCodPd,SRA->RA_FILIAL,"RV_DESC") ,1,1)
	EndIf
	fAddMemLog("Percentual de Transferência atual  : " + Transform(nPerAdTrf,"@E 999,999,999.99")+ " %",1,1) 
EndIf


If lRegrava == NIL
	lRegrava := .F.
EndIf

If __lMemCalc
	fAddMemLog("Calculo via dissídio ? " + If(lDissidio,"Sim","Não")  ,1,1)
EndIf

//Se dissidio, verifica se houve pagamento de adicional de transferencia
If lDissidio .And. !(cTipoRot $ "4*3*6")
	SR9->(DbSetOrder(1))
	If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "RA_ADCTRF"))
		While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_ADCTRF" $ SR9->R9_CAMPO)
			If SR9->R9_DATA <= dDataAte
				nPerAdTrf := Val(StrTran(SR9->R9_DESC,",","."))
				If __lMemCalc
					fAddMemLog("Percentual de Transferência  em " + dtoc(SR9->R9_DATA) +  Transform(nPerAdTrf,"@E 999,999,999.99") + " %"  ,1,1)
				EndIf
			Else
				Exit
			EndIf	
		SR9->( dbSkip() )
		EndDo
	EndIf
	If nPerAdTrf == 0 //Se não encontrou na SR9 nem no cadastro de funcionário, verifica se houve pagamento
		aEval( aPdOld, { |X| If( X[1] $ cCodPd + "/" + aCodFol[1295,1] + "/" + aCodFol[1310,1] + "/" + aCodFol[1311,1] + "/" + aCodFol[1422,1], nHrsAdc += X[5], 0 ) } )
		If nHrsAdc > 0 .and. nPerAdTrf == 0
			nPerAdTrf := (100/(nSalario/nHrsAdc))
			If __lMemCalc
				fAddMemLog("Percentual não achado no histórico" ,1,1)
				fAddMemLog("Percentual pago analisando folha da época : " +Transform(nPerAdTrf,"@E 999,999,999.99") ,1,1)
			EndIf
		Else
			nPerAdTrf := If(nHrsAdc == 0, 0, nPerAdTrf)
		EndIf
	EndIf
EndIf

If nPerAdTrf > 0 .and. Empty(cCodPd)
	CMSGLOG := FMSGFORM({92}) + " -> " + GetStackFormula() + " - " + fDesc("RC2",Substr( GetStackFormula(), 3 , 15 ),"RC2_DESC",,,2)        
	S_MSGLOG()      
	FINALCALC()
	Return()
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Calcula apenas para empregados com adicional a calcular			³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty(nPerAdTrf) .and. !Empty(cCodPd)

	If RetValSRV(cCodPd,SRA->RA_FILIAL,"RV_BASCAL") <> "2"
		nBaseAdc := (SALARIO)
		If __lMemCalc
			fAddMemLog("Base de calculo com salário base : " + Transform(SALARIO,"@E 999,999,999.99") ,1,1)
		EndIf
	Else
		nBaseAdc := SALMES
		If __lMemCalc
			fAddMemLog("Base de calculo com salário incorporado : " + Transform(SALMES,"@E 999,999,999.99") ,1,1)
		EndIf
	EndIf
   	nAdcTrf  :=  ( nBaseAdc * (nPerAdTrf/100) )

	If __lMemCalc
		fAddMemLog("Resultado adicional(Base * percentual) : " + Transform(nAdcTrf,"@E 999,999,999.99") ,1,1)
	EndIf
   	
   	fIncide(cCodPd)
			
	nPosPDV := aScan(aPdv, { |Y| Y[1] = cCodPd })
   	
	If nPosPDV > 0 .And. aPdv[nPosPDV,18] == "S" .And. ;
	( cTipoRot $ "2*3*5*6"  .Or. (cTipoRot == "1" .And. cSitFolh == "F" .And. DiasTrab == 0) )
		IncorpSal(nAdcTrf)
	ElseIf cTipoRot == "2" .and. aPdv[nPosPDV,18] != "S"//Não considera no adiantamento se não incorporar
		nAdcTrf := 0
	EndIf
	
	If fGetTipoRot(GETROTEXEC()) == "G" .And. nAdcTrf > 0 .And. nPosPDV > 0
		FMatriz(cCodPd,nAdcTrf, , , ,'V', , , , ,.T.)
	EndIf
	
	
	If ( nPosSB := aScan(aSalBase, { |X| X[1] == cCodPd } ) ) == 0
		nOrdGrPd++
		aAdd(aSalBase,{cCodPd + "*" + aCodFol[1311,1] + aCodFol[1326,1] + aCodFol[1327,1],nBaseAdc,nOrdGrPd})
	Else
		aSalBase[nPosSB,2] := nBaseAdc
		aSalBase[nPosSB,3] := nOrdGrPd
	EndIf
 
EndIf

Return (.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fATServico³ Autor ³ Equipe RH             ³ Data ³ 10/04/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Selecionar adicional por tempo de servico     			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fATServico() 											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fATServico(l1Elem)

Local cTitulo:=""
Local MvPar
Local MvParDef:=""
Local lRet := .T.

Static nVezAdt := 0

Private aSit:={}

l1Elem := If (l1Elem = Nil , .F. , .T.)

If Alltrim(ReadVar() )= "M->RA_ADTPOSE" .AND. (nVezAdt = Nil .OR. nVezAdt < 1)


	lGp010Auto  := If (Type("lGp010Auto") =="U",.F.,lGp010Auto)
	
	If lGp010Auto//Execucao automatica (msExecAuto)
		Return(lRet)                   
	EndIf
	
    nVezAdt ++
	
	cAlias := Alias() 					 // Salva Alias Anterior
	MvPar:=&(Alltrim(ReadVar()))		 // Carrega Nome da Variavel do Get em Questao
	mvRet:=Alltrim(ReadVar())			 // Iguala Nome da Variavel ao Nome variavel de Retorno
	dbSelectArea("SX5")
	If dbSeek(FWxFilial("SX5")+"0032")
      cTitulo := Alltrim(Left(X5Descri(),20))
	EndIf
	If dbSeek(FWxFilial("SX5")+"32")
		CursorWait()
			While !Eof() .AND. SX5->X5_Tabela == "32"
				Aadd(aSit,Left(SX5->X5_Chave,1) + " - " + Alltrim(X5Descri()))
				MvParDef+=Left(SX5->X5_Chave,1)
				dbSkip()
			Enddo
		CursorArrow()
	Else
		Help(" ",1, "GPEXATSDEF") // Estou usando situacao Default, nao achei tabela
		Return .F.
	EndIf
	IF f_Opcoes(@MvPar,cTitulo,aSit,MvParDef,12,49,l1Elem)  // Chama funcao f_Opcoes
		&MvRet := mvpar										   // Devolve Resultado
	EndIf
	lRet := .F.
	dbSelectArea(cAlias) 								   // Retorna Alias
	
ElseIf nVezAdt >= 1
	nVezAdt := 0	
	lRet := .T.
EndIf
Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³fATServico³ Autor ³ Equipe RH             ³ Data ³ 10/04/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Selecionar adicional por tempo de servico     			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fATServico() 											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß/*/
Function fSXBServ(l1Elem)

Local cTitulo:=""
Local MvPar
Local MvParDef:=""
Local lRet := .T.

Private aSit:={}

l1Elem := If (l1Elem = Nil , .F. , .T.)

If Alltrim(ReadVar() )= "M->RA_ADTPOSE" 


	lGp010Auto  := If (Type("lGp010Auto") =="U",.F.,lGp010Auto)
	
	If lGp010Auto//Execucao automatica (msExecAuto)
		Return(lRet)                   
	EndIf
	
	cAlias := Alias() 					 // Salva Alias Anterior
	MvPar:=&(Alltrim(ReadVar()))		 // Carrega Nome da Variavel do Get em Questao
	mvRet:=Alltrim(ReadVar())			 // Iguala Nome da Variavel ao Nome variavel de Retorno
	VAR_IXB 	:= MvRet
	dbSelectArea("SX5")
	If dbSeek(FWxFilial("SX5")+"0032")
      cTitulo := Alltrim(Left(X5Descri(),20))
	EndIf
	If dbSeek(FWxFilial("SX5")+"32")
		CursorWait()
			While !Eof() .AND. SX5->X5_Tabela == "32"
				Aadd(aSit,Left(SX5->X5_Chave,1) + " - " + Alltrim(X5Descri()))
				MvParDef+=Left(SX5->X5_Chave,1)
				dbSkip()
			Enddo
		CursorArrow()
	Else
		Help(" ",1, "GPEXATSDEF") // Estou usando situacao Default, nao achei tabela
		Return .F.
	EndIf
	IF f_Opcoes(@MvPar,cTitulo,aSit,MvParDef,12,49,l1Elem)  // Chama funcao f_Opcoes
		&MvRet := mvpar										   // Devolve Resultado
		VAR_IXB := mvPar
	Else
		lRet := .F.
	EndIf
	dbSelectArea(cAlias) 								   // Retorna Alias
EndIf
Return(lRet)

/*/{Protheus.doc} fCalAdt
Calcula adicional por tempo de Serviço
@author Equipe de RH
@since 29/03/1995
@param aCodfol, array, Array com as informações das verbas
@param nAdtServ, numeric, variavél que irá guardar o valor do adicional (mnemônico)
@param cGrava, characters, Se gera a verba de adicional no aPd "S" - sim
@param SalMes, numeric, Salario do mês (mnemônico)
@param lRegrava, logical, Se deve regravar a verba
@param cAdicInteg, characters, Se o adicional será calculado integralmente (mnemônico P_ADCINTEG)
@param cCodAdt, characters, Código da verba para a geração do ATS
@param cAdtPoSer, characters, Tipo do ATS A - Anuênio; B - Biênio...
@param cTpCaAts, characters, Tipo de cálculo 1 - Percentual; 2 - Percentual + valor fixo; 3 -Valor fixo
@param cBCalATS, characters, 1 - Salário; 2 - Salário + verbas; 3 - Piso do sindicato; 4 - Salário mínimo
@param lPropDia, logical, Indica se o cálculo deve ser proporcionalizado (mnemônico)
@param lAglutAdt, logical, Se aglutina os adicionais em uma única verba (mnemônico)
@example
FCALADT(ACODFOL,@NADTSERV,"S",SALMES,,P_ADCINTEG, CCODADT, CADTPOSER, CTPCAATS, CBCALATS, LPROPDIA)
/*/
Function fCalAdt(aCodfol, nAdtServ, cGrava, nSalMes, lRegrava, cAdicInteg, cCodAdt, cAdtPoSer, cTpCaAts, cBCalATS, lPropDia, lAglutAdt)
	
	Local aArea			:= GetArea()
	Local dDtLimite		:= CtoD("")
	Local lGravaAdt		:= ( cGrava # Nil .And. cGrava = "S" )
	Local cVerbas_Aux	:= ""
	Local cAtsAux		:= ""
	Local cFil			:= xFilial("SRV")
	Local cAuxAdts		:= "" 
	Local nVlAuxADT		:= 0
	Local i				:= 0 
	Local nVb			:= 0
	Local nPosVbApd		:= 0
	Local nAdTs			:= 0
	Local nPosPDV		:= 0
	Local nPosSB		:= 0 
	Local nLimAnu		:= 0  
	Local nLimBie		:= 0  
	Local nLimTri		:= 0  
	Local nLimQua		:= 0  
	Local nLimQui		:= 0  
	Local l1Per			:= .F.
	Local lSaldoSal		:= .T.
	Local lPerAdiBas	:= P_RESADISB .And. cTipoRot == "4" //Calcula adicional sobre Salario Base na rescisao
	Local lIncorp080	:= !(IsInCallStack("GPER080") .And. Type("lSalInco") <> "U" .And. lSalInco .And. (RCE->RCE_BASCAT == "2") )
	Local lAdicInteg	:= .F.
	Local lDiasPer		:= (GetMVRH("MV_DIASPER",,"1") == "1")
	Local nDiasFer		:= 0 
	Local nDiasTrab		:= 0 
	Local nBaseFull		:= 0
	Local ValATSFull	:= 0
	Local lRecal		:= .F.
	Local lIncideAdt	:= .T.
	Local lPropBase		:= .F.
		
	Private nCarencia 	:= 0
	
	Static __lLimPer
	Static __lHorJova
	Static lChgAnoFim
	
	DEFAULT __lHorJova	:= SRA->(ColumnPos( "RA_HOJORVA" )) > 0
	DEFAULT lChgAnoFim  := ExistBlock("CHGANOFIN")
	DEFAULT cAdtPoSer	:= ""  
	DEFAULT lAglutAdt	:= .F. // Variavel para gravação da verba de adicional em uma unica verba.
	DEFAULT lRegrava	:= .F.
	DEFAULT __lMemCalc  := cPaisLoc == "BRA" .And. fMemCalc() // Memória de Cálculo	

	If __lMemCalc
		If !IsInCallStack("EXECROT")
			fAddMemLog("Função :" + Funname()+ " - " + ProcName(1),1,1)
		EndIf
	EndIf
	
	If cTipoRot == "4" .and. "3" $ cAdicInteg
		lAdicInteg := .T.
	EndIf
	
	If lAdicInteg .Or. nDiasMat > 0 .Or. nDPrgSalMa > 0
		If lDissidio
			aEval(aPdOld,{|x| if(x[1] == aCodfol[072,1],ndiasFer+=x[4],nil)})
		Else
			aEval(aPd,{|x| if(x[1] == aCodfol[072,1],ndiasFer+=x[4],nil)})
		EndIf
	EndIf

	lPropDiaSt := nBaseAdt == 0 .Or. lPropDiaSt
	lPropDia   := IIf( lAdicInteg .And. cTipoRot == "4",.F.,lPropDia .And. lPropDiaSt )

	If Empty(cCodAdt)
		CMSGLOG := FMSGFORM({92}) + " -> " + GetStackFormula() + " - " + fDesc("RC2",Substr( GetStackFormula(), 3 , 15 ),"RC2_DESC",,,2)        
		S_MSGLOG()      
		FINALCALC()
		Return()
	EndIf
	
	If __lMemCalc .and. cTipoRot $ "3*5*6"
		Do Case
			Case cAdtPoSer == "A"
				fAddMemLog("Adicional calculado : Anuênio",1,0)
			Case cAdtPoSer == "B"
				fAddMemLog("Adicional calculado : Biênio",1,0)
			Case cAdtPoSer == "T"
				fAddMemLog("Adicional calculado : Triênio",1,0)
			Case cAdtPoSer == "D"
				fAddMemLog("Adicional calculado : Quadriênio",1,0)
			Case cAdtPoSer == "Q"
				fAddMemLog("Adicional calculado : Quinquênio",1,0)
		EndCase
	EndIf

	If !lDissidio .And. !(SRA->RA_RESCRAI$'30/31') .And. cSitFolh == "D" .And. cTipoRot == "1" .And. (Type("lSalInco")=="U" .or. !lSalInco)
		Return()
	EndIf

	//se adicional foi informado, nao calcular novamente.
	If (nPosVbApd := Ascan(aPd, { |X| X[1] = cCodAdt .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0 .Or.;
		( (nPosVbApd := Ascan(aPd, { |X| X[1] = cCodAdt .And. X[9] # "D" .And. X[3] = cSemana})) > 0 .and. GetRotExec() == fGetCalcRot("G") ) //Não recalcula se for roteiro INC
		nVlAuxADT := aPd[nPosVbApd][5]
		nAdtServ := aPd[nPosVbApd][5]
		
		If cTipoRot == "3" .and. RetValSrv(aPd[nPosVbApd][1], SRA->RA_FILIAL, "RV_INCORP") == "S"
			IncorpSal(nVlAuxADT)
			nAdtServ := 0
		EndIf
		
		If __lMemCalc
			fAddMemLog("Adicional informado manualmente: " + Transform(nAdtServ,"@E 999,999,999.99"),1,2)
		EndIf		
		
		Return()
	Endif
	//Se dissidio, verifica se houve pagamento de adicional por tempo de servico
	If lDissidio .And. !(cTipoRot $ "4*3*6")
		//aEval( aPdOld, { |X| If( X[1] $ aCodFol[1,1] + "/" + aCodFol[2,1] + "/" + aCodFol[3,1] + "/" + aCodFol[4,1] + "/" + aCodFol[5,1] + "/" + aCodFol[1283,1] + "/" + aCodFol[1284,1] + "/" + aCodFol[1285,1] + "/" + aCodFol[1286,1] + "/" + aCodFol[1287,1] + "/" + aCodFol[1288,1] + "/" + aCodFol[1289,1] + "/" + aCodFol[1296,1] + "/" + aCodFol[1297,1] + "/" + aCodFol[1298,1] + "/" + aCodFol[1299,1], nAdTs += X[5], 0 ) } )
		aEval( aPdOld, { |X| If( X[1] $ cCodAdt + "/" + aCodFol[1338,1], nAdTs += X[5], 0 ) } ) //somente calcula se a verba esta no aPdOld
		If nAdTs == 0
			cAtsAux := aCodFol[1,1] + "/" + aCodFol[2,1] + "/" + aCodFol[3,1] + "/" + aCodFol[4,1] + "/" + aCodFol[5,1] + "/" + aCodFol[1283,1] + "/" + aCodFol[1284,1] + "/" + aCodFol[1285,1] + "/" + aCodFol[1286,1] + "/" + aCodFol[1287,1]
			//Se não possui nenhum ATS e possuí base de ATS, indica que gozou férias o mês inteiro. Deve efetuar cálculo para obter base para eventual incorporação.
			If !( ( aScan( aPdOld, { |X| X[1] $ cAtsAux})) == 0 .and. ( aScan( aPdOld, { |X| X[1] $ aCodFol[671,1] + "/" + aCodFol[1296,1] } ) ) > 0 ) 
				Return( .T. )
			EndIf
		EndIf
	EndIf
	
	If __lMemCalc
		fAddMemLog("Código da verba do adicional : " + cCodAdt + " - " +  RetValSRV(cCodAdt,SRA->RA_FILIAL,"RV_DESC") ,1,2)
		fAddMemLog("Base da verba : " + If(RetValSRV(cCodAdt,SRA->RA_FILIAL,"RV_BASCAL") == "2", "Salário Incorporado", "Salário Base") ,1,2)
		fAddMemLog("Código do sindicato : " + SRA->RA_SINDICA ,1,2)
		fAddMemLog("Tipo de cálculo : " + If(cTpCaAts == "1", "Percentual", If(cTpCaAts == "2", "Percentual + Valor Fixo", "Valor Fixo")) ,1,2)
		fAddMemLog("Base de cálculo : " + If(cBCalATS == "1", "Salário", If(cBCalATS == "2", "Salário + Verbas", If(cBCalATS == "3", "Piso do sindicato", "Salário Mínimo"))) ,1,2)
		fAddMemLog("Salário Base  : " + Transform((SALARIO),"@E 999,999,999.99") ,1,2)
		fAddMemLog("Salário Incorporado  : " + Transform(SALMES,"@E 999,999,999.99") ,1,2)
	EndIf
	
	dbSelectArea("RCE")
	
	DEFAULT __lLimPer 	:= RCE->(ColumnPos( "RCE_LIMPAN" )) > 0
	
	cAuxAdts := cAdtPoSer 
	
	For i:=1 To Len(cAuxAdts)
		
		cAdtPoSer := Substr( cAuxAdts , i , 1 )
		nCarencia := 0
		
		If cAdtPoSer == "A"
			
			If cTpCaAts == "1" // Percentual
				PER_ANU := If(lDissidio,fBuscaRG4("RCE_PERAN",dDataAte,.T.,.T.,.T.),RCE->RCE_PERAN)
				VAL_ANU := 0
			ElseIf cTpCaAts == "2" // Percentual + Valor Fixo
				PER_ANU := If(lDissidio,fBuscaRG4("RCE_PERAN",dDataAte,.T.,.T.,.T.),RCE->RCE_PERAN)
				VAL_ANU := If(lDissidio,fBuscaRG4("RCE_VLRAN",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRAN)
			ElseIf cTpCaAts == "3" // Valor Fixo
				VAL_ANU := If(lDissidio,fBuscaRG4("RCE_VLRAN",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRAN)
				PER_ANU := 0
			EndIf
			
			LIM_ANU := If(lDissidio,fBuscaRG4("RCE_LIMAN",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMAN)
			DTB_ANU := If(lDissidio,fBuscaRG4("RCE_DTIAN",dDataAte,.T.,.T.,.T.),RCE->RCE_DTIAN)
			DTF_ANU := If(lDissidio,fBuscaRG4("RCE_DTFAN",dDataAte,.T.,.T.,.T.),RCE->RCE_DTFAN)
			ACU_ANU := If(If(lDissidio,fBuscaRG4("RCE_ACUAN",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUAN)=="1","S",If(If(lDissidio,fBuscaRG4("RCE_ACUAN",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUAN) == "2","N","SR"))
			CAR_ANU := If(lDissidio,fBuscaRG4("RCE_CARAN",dDataAte,.T.,.T.,.T.),RCE->RCE_CARAN)
			If __lLimPer
				nLimAnu := If(lDissidio,fBuscaRG4("RCE_LIMPAN",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMPAN)
			EndIf
			If ACU_ANU == "SR"
				nCarencia := CAR_ANU
			EndIf
			
			If __lMemCalc
				If cTpCaAts $ "1*2"
					fAddMemLog("Percentual do adicional  : " + Transform(PER_ANU,"@E 999.99") ,1,2)
				EndIf
				If cTpCaAts $ "2*3"
					fAddMemLog("Valor Fixo do adicional  : " + Transform(VAL_ANU,"@E 999,999,999.99") ,1,2)
				EndIf
				fAddMemLog("Limite do adicional  : " + Transform(LIM_ANU,"@E 999,999,999.99") ,1,2)
				fAddMemLog("Dt. Inicial para cálculo do adicional (Sindicato) : " + DtoC(DTB_ANU) ,1,2)
				fAddMemLog("Dt. Final para cálculo do adicional  : " + DtoC(DTF_ANU) ,1,2)
				fAddMemLog("Acumula adicional  : " + If(ACU_ANU == "S","A partir da admissão", If(ACU_ANU == "SR","A partir da carência","Não acumula")) ,1,2)
				fAddMemLog("Carência para pagamento do adicional : " + AllTrim(Str(nCarencia)) + " anos "  ,1,2)
				If nLimAnu > 0
					fAddMemLog("Percentual limite do adicional : " + Transform(nLimAnu,"@E 999.99") ,1,2)
				EndIf
			EndIf			
			
		ElseIf cAdtPoSer == "B"
			
			If cTpCaAts == "1" // Percentual
				PER_BIE := If(lDissidio,fBuscaRG4("RCE_PERBI",dDataAte,.T.,.T.,.T.),RCE->RCE_PERBI)
				VAL_BIE := 0
			ElseIF cTpCaAts == "2" // Percentual + Valor Fixo
				PER_BIE := If(lDissidio,fBuscaRG4("RCE_PERBI",dDataAte,.T.,.T.,.T.),RCE->RCE_PERBI)
				VAL_BIE := If(lDissidio,fBuscaRG4("RCE_VLRBI",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRBI)
			ElseIF cTpCaAts == "3" // Valor Fixo
				PER_BIE := 0
				VAL_BIE := If(lDissidio,fBuscaRG4("RCE_VLRBI",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRBI)
			EndIf
			
			LIM_BIE := If(lDissidio,fBuscaRG4("RCE_LIMBI",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMBI)
			DTB_BIE := If(lDissidio,fBuscaRG4("RCE_DTIBI",dDataAte,.T.,.T.,.T.),RCE->RCE_DTIBI)
			DTF_BIE := If(lDissidio,fBuscaRG4("RCE_DTFBI",dDataAte,.T.,.T.,.T.),RCE->RCE_DTFBI)
			ACU_BIE := If(If(lDissidio,fBuscaRG4("RCE_ACUBI",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUBI)=="1","S",If(If(lDissidio,fBuscaRG4("RCE_ACUBI",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUBI) == "2","N","SR"))
			CAR_BIE := If(lDissidio,fBuscaRG4("RCE_CARBI",dDataAte,.T.,.T.,.T.),RCE->RCE_CARBI)
			If __lLimPer
				nLimBie := If(lDissidio,fBuscaRG4("RCE_LIMPBI",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMPBI)
			EndIf
			If ACU_BIE == "SR"
				nCarencia := CAR_BIE
			EndIf
			
			If __lMemCalc
				If cTpCaAts $ "1*2"
					fAddMemLog("Percentual do adicional  : " + Transform(PER_BIE,"@E 999.99") ,1,2)
				EndIf
				If cTpCaAts $ "2*3"
					fAddMemLog("Valor Fixo do adicional  : " + Transform(VAL_BIE,"@E 999,999,999.99") ,1,2)
				EndIf
				fAddMemLog("Limite do adicional  : " + Transform(LIM_BIE,"@E 999,999,999.99") ,1,2)
				fAddMemLog("Dt. Inicial para cálculo do adicional (Sindicato) : " + DtoC(DTB_BIE) ,1,2)
				fAddMemLog("Dt. Final para cálculo do adicional  : " + DtoC(DTF_BIE) ,1,2)
				fAddMemLog("Acumula adicional  : " + If(ACU_BIE == "S","A partir da admissão", If(ACU_BIE == "SR","A partir da carência","Não acumula")) ,1,2)
				fAddMemLog("Carência para pagamento do adicional : " + AllTrim(Str(nCarencia)) + " anos "  ,1,2)
				If nLimBie > 0
					fAddMemLog("Percentual limite do adicional : " + Transform(nLimBie,"@E 999.99") ,1,2)
				EndIf
			EndIf
	
		ElseIF cAdtPoSer == "T"
		
			If cTpCaAts == "1" // Percentual
				PER_TRI := If(lDissidio,fBuscaRG4("RCE_PERTR",dDataAte,.T.,.T.,.T.),RCE->RCE_PERTR)
				VAL_TRI := 0
			ElseIF cTpCaAts == "2" // Percentual + Valor Fixo
				PER_TRI := If(lDissidio,fBuscaRG4("RCE_PERTR",dDataAte,.T.,.T.,.T.),RCE->RCE_PERTR)
				VAL_TRI := If(lDissidio,fBuscaRG4("RCE_VLRTR",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRTR)
			ElseIF cTpCaAts == "3" // Valor Fixo
				PER_TRI := 0
				VAL_TRI := If(lDissidio,fBuscaRG4("RCE_VLRTR",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRTR)
			EndIf
			
			LIM_TRI := If(lDissidio,fBuscaRG4("RCE_LIMTR",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMTR)
			DTB_TRI := If(lDissidio,fBuscaRG4("RCE_DTITR",dDataAte,.T.,.T.,.T.),RCE->RCE_DTITR)
			DTF_TRI := If(lDissidio,fBuscaRG4("RCE_DTFTR",dDataAte,.T.,.T.,.T.),RCE->RCE_DTFTR)
			ACU_TRI := If(If(lDissidio,fBuscaRG4("RCE_ACUTR",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUTR)=="1","S",If(If(lDissidio,fBuscaRG4("RCE_ACUTR",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUTR) == "2","N","SR"))
			CAR_TRI := If(lDissidio,fBuscaRG4("RCE_CARTR",dDataAte,.T.,.T.,.T.),RCE->RCE_CARTR)
			If __lLimPer
				nLimTri := If(lDissidio,fBuscaRG4("RCE_LIMPTR",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMPTR)
			EndIf
			If ACU_TRI == "SR"
				nCarencia := CAR_TRI
			EndIf
			
			If __lMemCalc
				If cTpCaAts $ "1*2"
					fAddMemLog("Percentual do adicional  : " + Transform(PER_TRI,"@E 999.99") ,1,2)
				EndIf
				If cTpCaAts $ "2*3"
					fAddMemLog("Valor Fixo do adicional  : " + Transform(VAL_TRI,"@E 999,999,999.99") ,1,2)
				EndIf
				fAddMemLog("Limite do adicional  : " + Transform(LIM_TRI,"@E 999,999,999.99") ,1,2)
				fAddMemLog("Dt. Inicial para cálculo do adicional (Sindicato) : " + DtoC(DTB_TRI) ,1,2)
				fAddMemLog("Dt. Final para cálculo do adicional  : " + DtoC(DTF_TRI) ,1,2)
				fAddMemLog("Acumula adicional  : " + If(ACU_TRI == "S","A partir da admissão", If(ACU_TRI == "SR","A partir da carência","Não acumula")) ,1,2)
				fAddMemLog("Carência para pagamento do adicional : " + AllTrim(Str(nCarencia)) + " anos "  ,1,2)
				If nLimTri > 0
					fAddMemLog("Percentual limite do adicional : " + Transform(nLimTri,"@E 999.99") ,1,2)
				EndIf
			EndIf
			
		ElseIf cAdtPoSer == "D"
			
			If cTpCaAts == "1" // Percentual
				PER_QUA := If(lDissidio,fBuscaRG4("RCE_PERQR",dDataAte,.T.,.T.,.T.),RCE->RCE_PERQR)
				VAL_QUA := 0
			ElseIF cTpCaAts == "2" // Percentual + Valor Fixo
				PER_QUA := If(lDissidio,fBuscaRG4("RCE_PERQR",dDataAte,.T.,.T.,.T.),RCE->RCE_PERQR)
				VAL_QUA := If(lDissidio,fBuscaRG4("RCE_VLRQR",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRQR)
			ElseIF cTpCaAts == "3" // Valor Fixo
				PER_QUA := 0
				VAL_QUA := If(lDissidio,fBuscaRG4("RCE_VLRQR",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRQR)
			EndIf
			
			LIM_QUA := If(lDissidio,fBuscaRG4("RCE_LIMQR",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMQR)
			DTB_QUA := If(lDissidio,fBuscaRG4("RCE_DTIQR",dDataAte,.T.,.T.,.T.),RCE->RCE_DTIQR)
			DTF_QUA := If(lDissidio,fBuscaRG4("RCE_DTFQR",dDataAte,.T.,.T.,.T.),RCE->RCE_DTFQR)
			ACU_QUA := If(If(lDissidio,fBuscaRG4("RCE_ACUQR",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUQR)=="1","S",If(If(lDissidio,fBuscaRG4("RCE_ACUQR",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUQR) == "2","N","SR")) 
			CAR_QUA := If(lDissidio,fBuscaRG4("RCE_CARQR",dDataAte,.T.,.T.,.T.),RCE->RCE_CARQR)
			If __lLimPer
				nLimQua := If(lDissidio,fBuscaRG4("RCE_LIMPQR",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMPQR)
			EndIf
			If ACU_QUA == "SR"
				nCarencia := CAR_QUA
			EndIf
			
			If __lMemCalc
				If cTpCaAts $ "1*2"
					fAddMemLog("Percentual do adicional  : " + Transform(PER_QUA,"@E 999.99") ,1,2)
				EndIf
				If cTpCaAts $ "2*3"
					fAddMemLog("Valor Fixo do adicional  : " + Transform(VAL_QUA,"@E 999,999,999.99") ,1,2)
				EndIf
				fAddMemLog("Limite do adicional  : " + Transform(LIM_QUA,"@E 999,999,999.99") ,1,2)
				fAddMemLog("Dt. Inicial para cálculo do adicional (Sindicato) : " + DtoC(DTB_QUA) ,1,2)
				fAddMemLog("Dt. Final para cálculo do adicional  : " + DtoC(DTF_QUA) ,1,2)
				fAddMemLog("Acumula adicional  : " + If(ACU_QUA == "S","A partir da admissão", If(ACU_QUA == "SR","A partir da carência","Não acumula")) ,1,2)
				fAddMemLog("Carência para pagamento do adicional : " + AllTrim(Str(nCarencia)) + " anos "  ,1,2)
				If nLimQua > 0
					fAddMemLog("Percentual limite do adicional : " + Transform(nLimQua,"@E 999.99") ,1,2)
				EndIf
			EndIf
						
		ElseIF cAdtPoSer == "Q"
			
			If cTpCaAts == "1" // Percentual
				PER_QUI := If(lDissidio,fBuscaRG4("RCE_PERQN",dDataAte,.T.,.T.,.T.),RCE->RCE_PERQN)
				VAL_QUI := 0
			ElseIF cTpCaAts == "2" // Percentual + Valor Fixo
				PER_QUI := If(lDissidio,fBuscaRG4("RCE_PERQN",dDataAte,.T.,.T.,.T.),RCE->RCE_PERQN)
				VAL_QUI := If(lDissidio,fBuscaRG4("RCE_VLRQN",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRQN)
			ElseIF cTpCaAts == "3" // Valor Fixo
				PER_QUI := 0
				VAL_QUI := If(lDissidio,fBuscaRG4("RCE_VLRQN",dDataAte,.T.,.T.,.T.),RCE->RCE_VLRQN)
			EndIf
			
			LIM_QUI := If(lDissidio,fBuscaRG4("RCE_LIMQN",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMQN)
			DTB_QUI := If(lDissidio,fBuscaRG4("RCE_DTIQN",dDataAte,.T.,.T.,.T.),RCE->RCE_DTIQN)
			DTF_QUI := If(lDissidio,fBuscaRG4("RCE_DTFQN",dDataAte,.T.,.T.,.T.),RCE->RCE_DTFQN)
			ACU_QUI := If(If(lDissidio,fBuscaRG4("RCE_ACUQN",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUQN)=="1","S",If(If(lDissidio,fBuscaRG4("RCE_ACUQN",dDataAte,.T.,.T.,.T.),RCE->RCE_ACUQN) == "2","N","SR")) 
			CAR_QUI := If(lDissidio,fBuscaRG4("RCE_CARQN",dDataAte,.T.,.T.,.T.),RCE->RCE_CARQN)
			If __lLimPer
				nLimQui := If(lDissidio,fBuscaRG4("RCE_LIMPQN",dDataAte,.T.,.T.,.T.),RCE->RCE_LIMPQN)
			EndIf
			If ACU_QUI == "SR"
				nCarencia := CAR_QUI
			EndIf
			
			If __lMemCalc
				If cTpCaAts $ "1*2"
					fAddMemLog("Percentual do adicional  : " + Transform(PER_QUI,"@E 999.99") ,1,2)
				EndIf
				If cTpCaAts $ "2*3"
					fAddMemLog("Valor Fixo do adicional  : " + Transform(VAL_QUI,"@E 999,999,999.99") ,1,2)
				EndIf
				fAddMemLog("Limite do adicional  : " + Transform(LIM_QUI,"@E 999,999,999.99") ,1,2)
				fAddMemLog("Dt. Inicial para cálculo do adicional (Sindicato) : " + DtoC(DTB_QUI) ,1,2)
				fAddMemLog("Dt. Final para cálculo do adicional  : " + DtoC(DTF_QUI) ,1,2)
				fAddMemLog("Acumula adicional  : " + If(ACU_QUI == "S","A partir da admissão", If(ACU_QUI == "SR","A partir da carência","Não acumula")) ,1,2)
				fAddMemLog("Carência para pagamento do adicional : " + AllTrim(Str(nCarencia)) + " anos "  ,1,2)
				If nLimQui > 0
					fAddMemLog("Percentual limite do adicional : " + Transform(nLimQui,"@E 999.99") ,1,2)
				EndIf
			EndIf
			
		EndIf
		
		If cAdtPoSer $ "A_B_T_D_Q"
			
			//A data base vai depender se paga o retroativo após a carência ou não
			d_DtBase := CToD( SubStr(DtoC(SRA->RA_ADMISSA),1,6) + AllTrim( Str( Year(SRA->RA_ADMISSA) + nCarencia ) ) )
			
			If cAdtPoSer == "A" .AND. !EMPTY(DTB_ANU) .AND. d_DtBase < DTB_ANU
				d_DtBase	:= DTB_ANU
				dDtLimite	:= DTF_ANU
			ElseIF cAdtPoSer == "B" .AND. !EMPTY(DTB_BIE) .AND. d_DtBase < DTB_BIE
				d_DtBase	:= DTB_BIE
				dDtLimite	:= DTF_BIE
			ElseIF cAdtPoSer == "T" .AND. !EMPTY(DTB_TRI) .AND. d_DtBase < DTB_TRI
				d_DtBase	:= DTB_TRI
				dDtLimite	:= DTF_TRI
			ElseIF cAdtPoSer == "D" .AND. !EMPTY(DTB_QUA) .AND. d_DtBase < DTB_QUA
				d_DtBase	:= DTB_QUA
				dDtLimite 	:= DTF_QUA
			ElseIF cAdtPoSer == "Q" .AND. !EMPTY(DTB_QUI) .AND. d_DtBase < DTB_QUI
				d_DtBase	:= DTB_QUI
				dDtLimite 	:= DTF_QUI
			EndIf
			
			If cSitFolh $ "E_T"
				Return .T.
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Utiliza a data de demissao p/data limite de calculo do adicional³
			//³ senao, podera pagar adicional sem o funcionario ter direito		³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If Empty(dDtLimite)
				dDtLimite := If(!Empty(SRA->RA_DEMISSA) .and.(SRA->RA_DEMISSA<dDataAte),SRA->RA_DEMISSA,If(cTipoRot == '4' .And. M->RG_DATADEM<dDataAte, M->RG_DATADEM,If(cTipoRot == '3' .And. lCalcFol .And. !lDissidio, If(Type("dPerFim") == "D", dPerFim, dDataAte) , dDataAte)))
			Else
				dDtLimite := If(!Empty(SRA->RA_DEMISSA) .and.(SRA->RA_DEMISSA<dDtLimite),SRA->RA_DEMISSA,If(cTipoRot == '4' .And. M->RG_DATADEM<dDtLimite, M->RG_DATADEM, dDtLimite))
			EndIf
			
			//se aviso prévio indenizado, verifica se tem direito ao adicional com base na data projetada 
			If cTipoRot == '4' .And. aIncRes[2] $ "I"
				If fAnosCasa(M->RG_DTAVISO + M->RG_DAVISO, M->RG_DTAVISO - 365) > 0
					dDtLimite := M->RG_DTPROAV
				EndIf
			EndIf
			
			AnoFin := Max(Year(dDtLimite) - Year(d_DtBase),0)
			If Month(d_DtBase) > Month(dDtLimite) .Or. (cTipoRot == '4' .And. MesDia(d_DtBase) > MesDia(dDtLimite))
				AnoFin --
			EndIf

			lMesAcuAts := Month(d_DtBase) == Month(dDtLimite)
			
			If lChgAnoFim
				ANOFIN := EXECBLOCK("CHGANOFIN",.F.,.F.,AnoFin)
			EndIf
			
			If cBCalATS == "1" .and. !l1Per	// Salario
				// SE JORNADA VARIAVEL, BUSCA O VALOR DO SALÁRIO DAS VERBAS DO GRUPO 0
				If SRA->RA_CATFUNC = "H" .And. __lHorJova .And. SRA->RA_HOJORVA = "1"
					nBaseAdt := 0
					//Busca as verbas que estão no grupo 0, campo RV_GRPVERB = 0
					GP140GrpVerb(cFil,@cVerbas_Aux,"0",.T.)
					For nVb := 1 To Len(cVerbas_Aux) Step 3
						If lSaldoSal .And. aCodFol[0032,1] $ SubStr(cVerbas_Aux,nVb,3)
							lSaldoSal := .F.
							nBaseAdt 	:= fBuscaPd(aCodFol[0048,1],"V")
						Endif
						If (nPosVbApd := Ascan(aPd, { |X| X[1] = SubStr(cVerbas_Aux,nVb,3) .And. X[9] # "D"})) > 0
							//Verifica o tipo da verba para saber se ela será somada ou subtraída da base de cálculo.
							If RetValSRV(aPd[nPosVbApd,1],SRA->RA_FILIAL,"RV_TIPOCOD") == "2"
								nBaseAdt -= aPd[nPosVbApd,5]
							Else
								nBaseAdt += aPd[nPosVbApd,5]
							Endif
						EndIf
					Next nVb
					If cTipoRot $ "5*6" .And. nBaseAdt == 0
						If RetValSRV(cCodAdt,SRA->RA_FILIAL,"RV_BASCAL") <> "2"
							nBaseAdt := (SALARIO)
						Else
							nBaseAdt := nSalMes
						EndIf
					EndIf
				Else
					If RetValSRV(cCodAdt, SRA->RA_FILIAL, "RV_BASCAL") != "2"
						If SRA->RA_CATFUNC $ "H*G"
							If P_LDSRHRSP
								nBaseAdt := (SalHor * ( NPonTrab + NPonDesc))
							Else
								nBaseAdt := (SalHor * iif((cTipoRot $ "5/6") .Or. (cTipoRot == "3" .And. !lDiasPer) ,SRA->RA_HRSMES,NHrsCal))
							EndIf
						Else
							nBaseAdt := (SALARIO)
						EndIf
					Else
						nBaseAdt := nSalMes
					EndIf
				EndIf
			ElseIF cBCalATS == "2" // Salario + Verbas
				nBaseAdt := 0
				If cTipoRot != "1"
					Aeval( aPd ,{ |X| SomaInc(X, 19, @nBaseAdt, , , , , , ,aCodFol,,,,,If(cTipoRot == "3",19,5)) })
				Else
					Aeval( aPd ,{ |X| SomaInc(X, 19, @nBaseAdt, 11, "N", 12, "N", , ,aCodFol,,,,,5) })
				EndIf
				lIncideAdt := ( nBaseAdt <> 0 )

				//Se calculo de 13º para comissionado puro e não possui verbas, busca as verbas de média com incidência de ATS para o cálculo
				If cTipoRot $ "3*5*6"
					If cTipoRot == "3" .or. ( cTipoRot $ "5/6" .And. nBaseAdt == 0 .Or. (SRA->RA_CATFUNC $ "C/J/I" .and. SRA->RA_SALARIO == 0 .and. nBaseAdt == 0 ))
						fMedATS(@nBaseAdt,'3')
					EndIf
				EndIf
				
				// SE JORNADA VARIAVEL, BUSCA O VALOR DO SALÁRIO DAS VERBAS DO GRUPO 0
				If SRA->RA_CATFUNC = "H" .And. __lHorJova .And. SRA->RA_HOJORVA = "1"
					//Busca as verbas que estão no grupo 0, campo RV_GRPVERB = 0
					GP140GrpVerb(cFil,@cVerbas_Aux,"0",.T.)
					For nVb := 1 To Len(cVerbas_Aux) Step 3
						If lSaldoSal .And. aCodFol[0032,1] $ SubStr(cVerbas_Aux,nVb,3)
							lSaldoSal := .F.
							nBaseAdt 	:= fBuscaPd(aCodFol[0048,1],"V")
						Endif
						If (nPosVbApd := Ascan(aPd, { |X| X[1] = SubStr(cVerbas_Aux,nVb,3) .And. X[9] # "D"})) > 0
							//Se a verba já compor a base de cálculo de adicional por tempo de serviço não será considerada.
							If RetValSRV(aPd[nPosVbApd,1],SRA->RA_FILIAL,"RV_ADICTS") <> "S"
								//Verifica o tipo da verba para saber se ela será somada ou subtraída da base de cálculo.
								If RetValSRV(aPd[nPosVbApd,1],SRA->RA_FILIAL,"RV_TIPOCOD") == "2"
									nBaseAdt -= aPd[nPosVbApd,5]
								Else
									nBaseAdt += aPd[nPosVbApd,5]
								Endif
							Endif
						EndIf
					Next nVb
					//Se estiver calculando férias e a verba de férias compor o ATS sobre salário + verbas, soma na base
					If cTipoRot == "3" .and. RetValSRV(aCodFol[72,1], SRA->RA_FILIAL, "RV_ADICTS") == "S"
						nBaseAdt += SALARIO
					EndIf
				Else					
					If RetValSRV(cCodAdt,SRA->RA_FILIAL,"RV_BASCAL") <> "2" 
						If SRA->RA_CATFUNC $ "H*G"
							If P_LDSRHRSP
								nBaseAdt += (SalHor * ( NPonTrab + NPonDesc))
							Else
								nBaseAdt += (SalHor * iif((cTipoRot $ "5/6") .Or. (cTipoRot == "3" .And. !lDiasPer) ,SRA->RA_HRSMES,NHrsCal))
							EndIf
						Else
							nBaseFull  += nBaseAdt + SALARIO
							nBaseAdt   += If(lPropDia, SALARIO / nDiasC * If(lAdicInteg .Or. nDiasMat > 0, (nDiasC - nDiasMat - nDiasFer), (DiasTrab + nDiasPg)), SALARIO ) 
							lPropBase  := lPropDia .and. nBaseAdt <> nBaseFull
							lPropDia   := .F.
							lPropDiaSt := .F.
							lRecal     := .T.
						EndIf						
					Else
						nBaseFull  += nBaseAdt + nSalMes
						nBaseAdt   += If(lPropDia, nSalMes / nDiasC * If(lAdicInteg .Or. nDiasMat > 0, (nDiasC - nDiasMat - nDiasFer), (DiasTrab + nDiasPg)), nSalMes ) 
						lPropBase  := lPropDia .and. nBaseAdt <> nBaseFull
						lPropDia   := .F.
						lPropDiaSt := .F.
						lRecal     := .T.
					EndIf
				EndIf

			ElseIF cBCalATS == "3" .and. !l1Per //Piso Sindicato 
				nBaseAdt := RCE->RCE_PISO
			ElseIF cBCalATS == "4" .and. !l1Per //Salario Minimo
				nBaseAdt := VAL_SALMIN			
			EndIf 
			
			fIncide(cCodAdt)
			
			nOrdGrPd++
			If ( nPosSB := aScan(aSalBase, { |X| X[1] = cCodAdt } ) ) == 0
				aAdd(aSalBase,{cCodAdt + "*" + aCodFol[1299,1] + "*" + aCodFol[1297,1],nBaseAdt,nOrdGrPd})
			Else
				aSalBase[nPosSB,2] := nBaseAdt
				aSalBase[nPosSB,3] := nOrdGrPd
			EndIf
			
			nPosPDV := aScan(aPdv, { |Y| Y[1] = cCodAdt })
			
			If __lMemCalc
				fAddMemLog("Dt. Base para cálculo do adicional  : " + DtoC(d_DtBase) ,1,2)
				fAddMemLog("Base de cálculo do adicional  : " + Transform(nBaseAdt,"@E 999,999,999.99") ,1,2)
			EndIf 			
			
			If cAdtPoSer == "A"
				
				If lRecal
					ValATSFull := VAL_ANU
					VAL_ANU := VAL_ANU / nDiasC * (DiasTrab + If( nDiasFgts > 0, nDiasFgts, nDaPaPg))
				EndIf
				
				nVlAuxADT := Calc_adic( cCodAdt, VAL_ANU, PER_ANU, CAR_ANU, LIM_ANU, 1, "", ACU_ANU, nBaseAdt, nLimAnu)
				
				If __lMemCalc
					If ACU_ANU <> "N"
						fAddMemLog("Fator multiplicador do adicional : " + Transform(AnoFin,"@E 999.99") ,1,2)
					EndIf
					fAddMemLog("Valor integral do adicional  : " + Transform(nVlAuxADT,"@E 999,999,999.99") ,1,2)					
				EndIf
				
				aAdd( aAdtServ, { cCodAdt , nBaseAdt, nVlAuxADT, cAdtPoSer } )  
			
			ElseIF cAdtPoSer == "B"
				
				If lRecal
					ValATSFull := VAL_BIE
					VAL_BIE := VAL_BIE / nDiasC * (DiasTrab + If( nDiasFgts > 0, nDiasFgts, nDaPaPg))
				EndIf
				
				nVlAuxADT := Calc_adic( cCodAdt ,VAL_BIE,PER_BIE,CAR_BIE,LIM_BIE,2,"",ACU_BIE,nBaseAdt,nLimBie)
				
				If __lMemCalc
					If ACU_BIE <> "N"
						fAddMemLog("Fator multiplicador do adicional : " + Transform(Int(AnoFin/2),"@E 999.99") ,1,2)
					EndIf
					fAddMemLog("Valor integral do adicional  : " + Transform(nVlAuxADT,"@E 999,999,999.99") ,1,2)
				EndIf
				
				aAdd( aAdtServ, { cCodAdt, nBaseAdt, nVlAuxADT, cAdtPoSer } )
				
			ElseIF cAdtPoSer == "T"
				
				If lRecal
					ValATSFull := VAL_TRI
					VAL_TRI := VAL_TRI / nDiasC * (DiasTrab + If( nDiasFgts > 0, nDiasFgts, nDaPaPg))
				EndIf
				
				nVlAuxADT := Calc_adic( cCodAdt ,VAL_TRI,PER_TRI,CAR_TRI,LIM_TRI,3,"",ACU_TRI,nBaseAdt,nLimTri)
				
				If __lMemCalc
					If ACU_TRI <> "N"
						fAddMemLog("Fator multiplicador do adicional : " + Transform(Int(AnoFin/3),"@E 999.99") ,1,2)
					EndIf
					fAddMemLog("Valor integral do adicional  : " + Transform(nVlAuxADT,"@E 999,999,999.99") ,1,2)
				EndIf
				
				aAdd( aAdtServ, { cCodAdt, nBaseAdt, nVlAuxADT, cAdtPoSer } )
				
			ElseIF cAdtPoSer == "D"
				
				If lRecal
					ValATSFull := VAL_QUA
					VAL_QUA := VAL_QUA / nDiasC * (DiasTrab + If( nDiasFgts > 0, nDiasFgts, nDaPaPg))
				EndIf
				
				nVlAuxADT := Calc_adic( cCodAdt ,VAL_QUA,PER_QUA,CAR_QUA,LIM_QUA,4,"",ACU_QUA,nBaseAdt,nLimQua)
				
				If __lMemCalc
					If ACU_QUA <> "N"
						fAddMemLog("Fator multiplicador do adicional : " + Transform(Int(AnoFin/4),"@E 999.99") ,1,2)
					EndIf
					fAddMemLog("Valor integral do adicional  : " + Transform(nVlAuxADT,"@E 999,999,999.99") ,1,2)
				EndIf
				
				aAdd( aAdtServ, { cCodAdt, nBaseAdt, nVlAuxADT, cAdtPoSer } )
				
			ElseIF cAdtPoSer == "Q"
				
				If lRecal
					ValATSFull := VAL_QUI
					VAL_QUI := VAL_QUI / nDiasC * (DiasTrab + If( nDiasFgts > 0, nDiasFgts, nDaPaPg))
				EndIf
				
				nVlAuxADT := Calc_adic( cCodAdt ,VAL_QUI,PER_QUI,CAR_QUI,LIM_QUI,5,"",ACU_QUI,nBaseAdt,nLimQui)
				
				If __lMemCalc
					If ACU_QUI <> "N"
						fAddMemLog("Fator multiplicador do adicional : " + Transform(Int(AnoFin/5),"@E 999.99") ,1,2)
					EndIf
					fAddMemLog("Valor integral do adicional  : " + Transform(nVlAuxADT,"@E 999,999,999.99") ,1,2)
				EndIf
				
				aAdd( aAdtServ, { cCodAdt, nBaseAdt, nVlAuxADT, cAdtPoSer } ) 

			EndIf

			If lGravaAdt .And. !(cTipoRot == "4" .And. aIncRes[15] == "N" .And. !(aIncRes[2] $ "T/I"))
				If nPosPDV > 0 .And. aPdv[nPosPDV,18] == "S" .And. ;
				( cTipoRot $ "2*3*5*6" .Or. (cTipoRot == "1" .And. cSitFolh == "F" .And. DiasTrab + nDiasPg == 0) .Or. ;
				( cTipoRot == "1" .And. cSitFolh == "A" .And. DiasTrab + nDiasPg == 0) )
					IncorpSal(nVlAuxADT)
				ElseIf cTipoRot == "2" .and. aPdv[nPosPDV,18] != "S"//Não considera no adiantamento se não incorporar
					nVlAuxADT := 0
				ElseIf !lAglutAdt .And. cTipoRot != "2"	
					If DiasTrab + IIf( !P_PGATSAFA,0, IIF(nDaPaPg > 0, nDaPaPg - nDiasMat, nDiasPg - nDiasMat)) > 0
						nDiasPgCpy	:= nDiasPg
						nVAuxADTCp := nVlAuxADT							
						If nDaPaPg > 0
							nDiasPg := nDaPaPg
						Else
							nDiasPg  := 0
							//Soma os dias de férias/abono
							aEval(aPd,{|x| If(x[1] $ aCodfol[072,1] + "/" + aCodfol[074,1],nDiasPg+=x[4],nil)})
							//Se tem férias não proporcionaliza, pois já foi propocionalizado
							//Se lPropBase estiver .T., base já foi proporcionalizada.
							If cBCalATS == "2"  .And. !lIncideAdt .and. nDiasPg == 0 .and. !lAdicInteg .and. !lPropBase
								lPropDia := .T.
							Else
								nDiasPg  := 0
							EndIf							
						EndIf										
						nDiasTrab := (nDiasC - nDiasMat - nDPrgSalMa - nDiasFer)
						If (nDiasMat > 0 .Or. nDPrgSalMa > 0) .And. lPropDia
							If cTipoRot == "4"
								nDiasTrab := DiasTrab
							EndIf
							nVlAuxADT := (nVlAuxADT / nDiasC) * (nDiasTrab)
							lPropDia := .F.
						EndIf	
						FMatriz(cCodAdt,nVlAuxADT,If(lAdicInteg .Or. nDiasMat > 0 .Or. nDPrgSalMa > 0, nDiasTrab, DiasTrab+nDiasPg), , ,'V', , , , ,lRegrava,,,,,,,,,lPropDia,,,,lIncorp080)
						nVlAuxADT := nVAuxADTCp
						nDiasPg := nDiasPgCpy
					EndIf
				EndIf
			EndIf

			If lRecal .or.  ( lGravaAdt .and. lPerAdiBas )
				If cAdtPoSer == "A"
					nVlAuxADT := Calc_adic( cCodAdt ,If(lRecal,ValATSFull,VAL_ANU),PER_ANU,CAR_ANU,LIM_ANU,1,"",ACU_ANU,If(lRecal,nBaseFull,SALARIO),nLimAnu)
				EndIf
				If cAdtPoSer == "B"
					nVlAuxADT := Calc_adic( cCodAdt ,If(lRecal,ValATSFull,VAL_BIE),PER_BIE,CAR_BIE,LIM_BIE,2,"",ACU_BIE,If(lRecal,nBaseFull,SALARIO),nLimBie)
				EndIf
				If cAdtPoSer == "T"
					nVlAuxADT := Calc_adic( cCodAdt ,If(lRecal,ValATSFull,VAL_TRI),PER_TRI,CAR_TRI,LIM_TRI,3,"",ACU_TRI,If(lRecal,nBaseFull,SALARIO),nLimTri)
				EndIf
				If cAdtPoSer == "D"
					nVlAuxADT := Calc_adic( cCodAdt ,If(lRecal,ValATSFull,VAL_QUA),PER_QUA,CAR_QUA,LIM_QUA,4,"",ACU_QUA,If(lRecal,nBaseFull,SALARIO),nLimQua)
				EndIf
				If cAdtPoSer == "Q"
					nVlAuxADT := Calc_adic( cCodAdt ,If(lRecal,ValATSFull,VAL_QUI),PER_QUI,CAR_QUI,LIM_QUI,5,"",ACU_QUI,If(lRecal,nBaseFull,SALARIO),nLimQui)
				EndIf
			EndIf

			nADTSERV += nVlAuxADT
		EndIf
	Next i
	
	If !lGravaAdt .and. lAglutAdt
		If nPosPDV > 0 .And. aPdv[nPosPDV,18] == "S" .And. ;
		( cTipoRot $ "2*3*5*6"  .Or. (cTipoRot == "1" .And. cSitFolh == "F" .And. DiasTrab == 0) )
			IncorpSal(nVlAuxADT)
		ElseIf cTipoRot == "2" .and. aPdv[nPosPDV,18] != "S"//Não considera no adiantamento se não incorporar
			nAdtServ := 0		
		Else
			If DiasTrab > 0 .And. cTipoRot != "2"
				FMatriz(cCodAdt,nAdtServ, , , ,'V', , , , ,lRegrava,,,,,,,,,,,,,lIncorp080)
			EndIf
		EndIf				
	EndIf
	
	If __lMemCalc .and. SALMES > nSalMes //Houve incorporação do salário
		fAddMemLog("Salário incorporado ao final do cálculo  : " + Transform(SALMES,"@E 999,999,999.99") ,1,2)
	EndIf
	
	RestArea( aArea )

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ CALC_ADIC³ Autor ³ Equipe de RH          ³ Data ³ 01/03/95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Calculo de Adicional tempo de Servico                      ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Calc_Adic(cCodigo,Val_Ano,Per_Ano,Car_Ano,Lim_Ano,Var,Sal_Ca,Acu_Ats,Sal_adts,nLimP)
Local Adic_Sal := 0

Default nLimP := 0

If cCodigo # Space(3) .And. ( Val_Ano # 0 .Or. Per_Ano # 0 )
	If AnoFin + nCarencia >= Car_Ano
		Adic_Sal := 0
		If Val_Ano # 0
			Adic_Sal := Val_Ano
			If Acu_Ats != "N"
				Adic_Sal := Adic_Sal * Int(AnoFin/Var)
			EndIf
		EndIf
		If Per_Ano # 0
			If Acu_Ats != "N"
				Per_Ano := Per_Ano * Int(AnoFin/Var)
				If nLimP > 0 .And. Per_Ano > nLimP
					Per_Ano := nLimP
				EndIf
			EndIf		
			Adic_Sal := Adic_Sal + ( Sal_adts * (Per_Ano/100) )
		EndIf
		If Lim_Ano == 0
			Lim_Ano := 999999999.99
		EndIf
		If Adic_Sal > Lim_Ano
			Adic_Sal := Lim_Ano
		EndIf
	EndIf
EndIf
Return(Adic_Sal)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ Insalub  ³ Autor ³ Mauro                 ³ Data ³ 23.03.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calculo da Insalubridade                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cCod       =  Codigo da Insalubridade                      ³±±
±±³          ³ nValmin    =  Valor do Salario Minimo                      ³±±
±±³          ³ nInsalub   =  Retorno do valor calculado Passar como Ref.  ³±±
±±³          ³ nProp      =  Calc. Prop. .T. ou .F.                       ³±±
±±³          ³ dData      =  Data para Calculo Proporcional Caso Rescisao ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/ 
Function Insalub( aCodfol, nValMin, nInsalub, cGrava, SalHora, lAdicInteg, cCodIns, nHrsInsal, cBCalIns, nPerc_Ins, cTipoIns, nHoraInsa, lPropDia) 
  
Local aAuxFal	:= {}

Local bHorasProp:= {||}
Local nMinHora  := 0.00
Local nMinDia   := 0.00
Local nHrsMin	:= 0
Local nHrsMed	:= 0
Local nHrsMax	:= 0
Local nInsMin	:= 0
Local nInsMed	:= 0
Local nInsMax	:= 0

Local nVlr13o   := 0
Local nVlrFer   := 0
Local nVlrMin   := 0
Local nVlrMed   := 0
Local nVlrMax   := 0
Local nHrsMes   := 0        

Local nValAux	:= 0
Local nInsMinSR9:= 0
Local nInsMedSR9:= 0
Local nInsMaxSR9:= 0
Local nIntHoras	:= 0

Local nFatorInsal	:= 0    	
Local nValMinAnt	:= nValMin
Local nBaseSal		:= 0 
Local nBsInsal		:= 0
Local cRefAux		:= "N"
Local nCond			:= 11
Local SalMes_Ins 	:= 0
Local SalRes_Ins	:= 0  //Salario base para calculo de adicionais do horista na rescisao
Local SalHora_Ins	:= 0
Local nPosv			:= 0
Local nPosSB		:= 0
Local nTpINS		:= 0  
Local nHorasMes		:= nHrsCal + iif(SRA->RA_TPCONTR=="3",nHorasDsr,0)   
Local Sal_minEst	:= 0 
Local cUf			:= ""
Local lMdt 			:= GetMvRH("MV_MDTADIC",,.F.)
Local nValorMdt		:= 0
Local nRefFaltas	:= 0
Local nValFaltas	:= 0
Local nSaldoAux 	:= 0
Local nDsrAux		:= 0
Local cTipoFalta	:= ""
Local nPosVbApd		:= 0
Local nPosBase		:= 0
Local cFaltas		:= aCodfol[54,1]+"/"+aCodfol[242,1]+"/"+aCodfol[244,1]+"/"+aCodfol[55,1]+"/"+aCodfol[243,1]+"/"+aCodfol[245,1]
Local nPosFalPd		:= 1
Local nPosAfaMt		:= 0
Local nBaseInsal	:= 0
Local lINSALVH		:= GetMvRH("MV_INSALVH") == 'H'
Local lPerAdiBas	:= If( Type("P_RESADISB") == "U", .F., P_RESADISB ) .And. cTipoRot == "4"	//Calcula adicional sobre Salario Base na rescisao
Local lIncorp080    := !(IsInCallStack("GPER080") .And. Type("lSalInco") <> "U" .And. lSalInco .And. (RCE->RCE_BCALIN == "2") )
Local lDiasPer		:= (GetMVRH("MV_DIASPER",,"1") == "1")
Local lPdInfo		:= .F.
Local lInsalInt		:= ("1" $ P_ADCINTEG)
Local lPerins		:= If( Type("P_PERINS") == "U", .T., P_PERINS )

DEFAULT nHrsInsal	:= 0
DEFAULT __lMemCalc	:= cPaisLoc == "BRA" .And. fMemCalc() // Memória de Cálculo

lPropDia := If(lAdicInteg .and. cTipoRot == "4",.F.,lPropDia)

Insalub_b := 0.00
bHorasProp	:= {|nHorApd,nHorHist| If (nHorHist<>999.99,If ( DiasTrab <> nDiasP ,nHorApd,nHorHist), nHorHist) }

If cPaisLoc == "BRA"
	fChkInsGes(@cCodInsGes, @nDiasGest, @lMesTodo)
EndIf

If Empty(cCodIns)
	CMSGLOG := FMSGFORM({92}) + " -> " + GetStackFormula() + " - " + fDesc("RC2",Substr( GetStackFormula(), 3 , 15 ),"RC2_DESC",,,2)        
	S_MSGLOG()      
	FINALCALC()
	Return()
Else
	If __lMemCalc
		fAddMemLog("Verba insalubridade: " + cCodIns + " - " +  RetValSRV(cCodIns,SRA->RA_FILIAL,"RV_DESC") ,1,1)
	EndIf
EndIf

If !lDissidio .And. !(SRA->RA_RESCRAI$'30/31') .And. cSitFolh == "D" .And. cTipoRot == "1" .And. (Type("lSalInco")=="U" .or. !lSalInco)
	Return()
EndIf

If ((nPosVbApd := Ascan(aPd, { |X| X[1] = cCodInsGes .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0) 
	//se verba insalubridade gestante informada, acata seus valores para os mnemonicos
	nDiasGest  := aPd[nPosVbApd][4]
	nInsalGest := aPd[nPosVbApd][5]
	lMesTodo   := .F.
Endif

//se adicional foi informado, juntamente com a base, nao calcular novamente.
If ((nPosVbApd := Ascan(aPd, { |X| X[1] = cCodIns .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0)
	lPdInfo  := .T.
	If ( nPosBase := Ascan(aPd, { |X| X[1] = aCodFol[672,1] .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0
		nInsalub := aPd[nPosVbApd][5]
		nIntInsal:= aPd[nPosBase][5]
		//se verba insalubridade informada e nao existe insalubridade gestante, nao gera verba insalubridade gestante.
		If (nInsalGest == 0)
			nDiasGest := 0
			cCodInsGes := ""
			lMesTodo := .F.
		EndIf
		Return()
	EndIf
EndIf
//busca percentural de insalubridade no SIGAMDT
If lMdt .AND. nPerc_Ins == 0
	nValorMdt := RHmdtPeri(1,.F.) //2=periculosidade/1=insalubridade 
	If nValorMdt > 0
		nPerc_Ins := nValorMdt
	EndIf
EndIf

If __lMemCalc
	fAddMemLog("Percentual insalubridade: " + cValToChar( nPerc_Ins ) + "%" ,1,1)
EndIf

If FIncide(cCodIns)
	        
	nPosv := ASCAN(aPdv, { |Y| Y[1] = cCodIns })
	
	//Se não há pagamento de insalubridade no cadastro de funcionários, mas existiu no histórico, assume histórico
	If nHrsInsal == 0 .and. lDissidio .and. aScan(aPdOld,{|X| X[1] == cCodIns }) > 0
		If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "RA_INSMAX"))
			While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
									SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_INSMAX" $ SR9->R9_CAMPO)
					If SR9->R9_DATA <= dDataAte
						nHrsInsal := Val(StrTran(SR9->R9_DESC,",","."))
					Else
						Exit
					EndIf	
			SR9->( dbSkip() )
			EndDo
		EndIf
		If 	nHrsInsal == 0
			Return()
		EndIf
	EndIf	
	
	// Para intermitente faz sempre com as horas do mês, será proporcionalizado depois de acordo com a convocação
	If SRA->RA_HRSMES == nHrsInsal .Or. ( SRA->RA_TPCONTR == "3" .And. nHrsInsal > 0 )   
		nHrsInsal := nHorasMes
	EndIf
	
	cValAux := fBuscaRG4("RCE_BCALIN",dDataAte,.T.)
	
	If !Empty(cValAux)
		cBCalIns := AllTrim(cValAux)
	EndIf
	
	//Pega valore de faltas em casao de salario min, sal min estadual e piso sindicato + verbas para descontar
	If cBCalIns $ "4*7*8"
		nValDia := NoRound((SRA->RA_HRSMES / 30),2) //valor de horas por dia
	
		For nPosFalPd := 1 To Len(aPd)
			If aPd[nPosFalPd,1] $ cFaltas	
				If Ascan(aPdv, { |X| X[1] = aPd[nPosFalPd,1] .And. X[10] = "S"}) > 0
					cTipoFalta := aPd[nPosFalPd,6]
					If !lINSALVH
						If cTipoFalta == "H" .And. aPd[nPosFalPd,4] > 0				
							nRefFaltas += (aPd[nPosFalPd,4]/nValDia)
						Else
							nRefFaltas += aPd[nPosFalPd,4]
						EndIf
					EndIf
					If cBCalIns == "8" .Or. cTipoRot != "4"
						nValFaltas	+= aPd[nPosFalPd,5]
					EndIf
					If lINSALVH .And. aPd[nPosFalPd,6] == "D" .And. cBCalIns $ "4*7" 
						aAdd( aAuxFal, { nPosFalPd, aPd[nPosFalPd,4] } )
						aPd[nPosFalPd,6] := "H"
						aPd[nPosFalPd,4] := SRA->RA_HRSDIA * aPd[nPosFalPd,4] 
					EndIf
				Endif
			EndIf
		Next nPosFalPd
	EndIf
	
	If cBCalIns $ "1*4*5*7"  	//Calculo Pelo Salario Minimo
		If cBCalIns $ "5/7" 
			cValAux := fBuscaRG4("RCE_UF",dDataAte,.T.)
			cUf := RCE->RCE_UF
			If !Empty(cValAux)
				cUf := Alltrim(cValAux)
			EndIf
			
			//buscar salario minimo estadual
			Sal_minEst := Sal_MinEst(AnoMes(dDataAte),cUf)
			
			If Sal_minEst <= 0
				FINALCALC()
				If __lMemCalc
					fAddMemLog("Salário minimo estadual não encontrado." ,1,1)
				EndIf
				Return()
			EndIf
			nValMinAnt	:= Sal_minEst
			nValMin		:= Sal_minEst
					
			If __lMemCalc
				fAddMemLog("Salário minimo estadual: " + cValToChar( AllTrim( Transform( nValMin,"@E 999,999,999.99") ) ) ,1,1)
			EndIf
		EndIf
		nFatorInsal	:= 1
	    If !Empty(SRA->RA_FTINSAL) //Tratamento para o fator multiplicador do sal.minimo na insalubridade (radiologista).
	    	nFatorInsal	:= SRA->RA_FTINSAL
	    EndIf
		
	    If cBCalIns $ "4*7" .And. ( nRefFaltas ) <> 0 
			If !lINSALVH
				If nValFaltas > 0
					nValMin := Max(nValMin - nValFaltas, 0 )
				EndIf
			Else
				nValMin := (nValMin / nDiasc) * (nDiasc - ( nRefFaltas ))
			EndIf
		Endif
		
		SalMes_Ins 	:= Round( (nValMin  * nFatorInsal)  , 2)
		SalHora_Ins	:= SalMes_Ins / nHrsInsal
		nMinDia		:= SalMes_Ins / nDiasC
		
		If __lMemCalc
			If nRefFaltas > 0
				fAddMemLog("Salário Base descontando faltas ((Salario mês / Dias Mês) * (Dias Mês - Faltas)): " + cValToChar( AllTrim( Transform( nValMin,"@E 999,999,999.99") ) ) ,1,1)
			Else
				fAddMemLog("Salário Base: " + cValToChar( AllTrim( Transform( nValMin,"@E 999,999,999.99") ) ) ,1,1)
			EndIf
			
			fAddMemLog("Fator Multiplicador: " + cValToChar( nFatorInsal ) ,1,1)
			fAddMemLog("Resultado salário mês (Salário * Fator multiplicador): " + cValToChar( AllTrim( Transform( SalMes_Ins,"@E 999,999,999.99") ) ) ,1,1)
		EndIf
		
	ElseIf cBCalIns $ "6/8"  	//Piso sindicato
		SalMes_Ins 	:= RCE->RCE_PISO
		
		cValAux := fBuscaRG4("RCE_PISO",dDataAte,.T.)
		
		If !Empty(cValAux)
			SalMes_Ins := val(cValAux)
		EndIf
		
		If __lMemCalc
			fAddMemLog("Piso sindicato: " + cValToChar( AllTrim( Transform( SalMes_Ins,"@E 999,999,999.99") ) ) ,1,1)
		EndIf
		
		If cBCalIns == "8" .And. nRefFaltas > 0 
			SalMes_Ins := (SalMes_Ins / nDiasc) * (nDiasc - nRefFaltas)
			If __lMemCalc
				fAddMemLog("Salário Base descontando faltas ((Salario mês / Dias Mês) * (Dias Mês - Faltas)): " + cValToChar( AllTrim( Transform( SalMes_Ins,"@E 999,999,999.99") ) ) ,1,1)
			EndIf
		Else
			If __lMemCalc
				fAddMemLog("Salário Base: " + cValToChar( AllTrim( Transform( SalMes_Ins,"@E 999,999,999.99") ) ) ,1,1)
			EndIf
		Endif
		
		SalHora_Ins	:= SalMes_Ins / nHrsInsal
		nMinDia		:= SalMes_Ins / nDiasC
	Else
		If !( aPdv[nPosv,34] == "2" )
			If SRA->RA_CATFUNC $ "H*G" .And. cTipoRot  == "4"
				If SRA->RA_CATEG == "07" .And. LMAPRENDIZ
					SalMes_Ins  := SalHora * Round((SRA->RA_HRSDIA * nDiasC),2)
					If __lMemCalc
						fAddMemLog("Salário hora: " + cValToChar( AllTrim( Transform( SalHora,"@E 999,999,999.99") ) ) ,1,1)
					EndIf
				ElseIf !lInsalInt .And. SRA->RA_TPCONTR == "3" 
					CalcConvoc(@nSaldoAux , 0, @nDsrAux , NIL , NIL, .F.)
					SalMes_Ins	:= nSaldoAux + nDsrAux
				Else
					SalMes_Ins  := (SalHor * Round((SRA->RA_HRSDIA * nDiasC),2))
					If __lMemCalc
						fAddMemLog("Salário hora: " + cValToChar( AllTrim( Transform( SalHor,"@E 999,999,999.99") ) ) ,1,1)
					EndIf
				EndIf
				If !lDiasPer .And. P_DIASRES == 2 
					SalRes_Ins := (SalHor * SRA->RA_HRSMES)
					If __lMemCalc
						fAddMemLog("Horas mês: " + cValToChar( SRA->RA_HRSMES ) ,1,1)
					EndIf
				Else
					If __lMemCalc
						fAddMemLog("Horas mês (Horas dia * Quantidade dias): " + cValToChar( Round((SRA->RA_HRSDIA * nDiasC),2) ) ,1,1)
					EndIf
				EndIf
				If __lMemCalc
					fAddMemLog("Resultado salário base ( Salário Hora * Horas mês ): " + cValToChar( AllTrim( Transform( SalMes_Ins,"@E 999,999,999.99") ) ) ,1,1)
				EndIf
			ElseIf SRA->RA_CATFUNC $ "H*G" .And. !lDiasPer .And. cTipoRot == "3"
				SalMes_Ins  := (SalHor * SRA->RA_HRSMES)
			Else
				SalMes_Ins  := (SALARIO + iif(SRA->RA_TPCONTR=="3",nDsrInt,0))
			EndIf    
			SalHora_Ins := SALHOR
		Else
			SalMes_Ins 	:= SALMES
   			SalHora_Ins := SALHORA
			If __lMemCalc
				fAddMemLog("Salário Base: " + cValToChar( AllTrim( Transform( SalMes_Ins,"@E 999,999,999.99") ) ) ,1,1)
			EndIf
        EndIf
		nMinDia			:= SalMes_Ins / nDiasC
	EndIf	
	
	If cTipoRot == "3" // Ferias
		cRefAux	:= "S"
		nCond	:= 11
	ElseIf cTipoRot $"5*6"  // 1 e 2.parcela 
		cRefAux  := "S"
		nCond    := 12
	EndIf
	
	lDissidio  := If(lDissidio == Nil,.F.,lDissidio) 
	
	If __lMemCalc
		fAddMemLog("Calculo via dissídio ? " + If(lDissidio,"Sim","Não")  ,1,1)
	EndIf

	If lDissidio .and. !(cTipoRot $ "3/4/6")// Se o calculo for dissidio, pegar hrs e valor do mes\ano de calculo
		Aeval( aPdOld, {|X| If(X[1] == aCodFol[37,1] , (nHrsMin += X[4]	, nVlrMin += X[5]), 0 ) }) 
		Aeval( aPdOld, {|X| If(X[1] == aCodFol[38,1] , (nHrsMed += X[4]	, nVlrMed += X[5]), 0 ) })	
		Aeval( aPdOld, {|X| If(X[1] == aCodFol[39,1] , (nHrsMax += X[4]	, nVlrMax += X[5]), 0 ) })
		Aeval( aPdOld, {|X| If(X[1] $ aCodFol[1282,1] + "/" + aCodFol[1292,1] + "/" + aCodFol[1293,1] , nVlr13o += X[5], 0 ) })
		Aeval( aPdOld, {|X| If(X[1] $ aCodFol[1304,1] + "/" + aCodFol[1305,1] + "/" + aCodFol[1306,1] + "/" + aCodFol[1307,1] , nVlrFer += X[5], 0 ) })
		Aeval( aPdOld, {|X| If(X[1] == aCodFol[318,1], (nBaseSal += X[5])	, 0 ) })
		Aeval( aPdOld, {|X| If(X[1] == aCodFol[672,1], (nBsInsal += X[5])	, 0 ) })

		//Se houve pagamento de insalubridade
		If nHrsMin + nHrsMed + nHrsMax > 0 .OR. nHrsInsal > 0
		    //PEGAR A QTD DE HORAS MES DO SR9
			If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_HRSMES "))
				While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
											SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_HRSMES" $ SR9->R9_CAMPO)
		
						If SR9->R9_DATA <= dDataAte						
							nHrsMes:= val( SR9->R9_DESC )
						Else
							Exit
						EndIf	
			
					SR9->( dbSkip() )
				EndDo
			EndIf
			
		    //PEGAR SE A INSALUBRIDAE ERA MINIMA,MEDIA OU MAXIMA DO SR9
		    nTpINS := Val(SRA->RA_ADCINS)
			If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_ADCINS "))
				While SR9->( !Eof() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
											SR9->R9_FILIAL+SR9->R9_MAT .and. ("RA_ADCINS" $ SR9->R9_CAMPO)
		
						If SR9->R9_DATA <= dDataAte						
							nTpINS:= Val( SR9->R9_DESC )
						Else
							Exit
						EndIf	
			
					SR9->( dbSkip() )
				EndDo
			EndIf
		
		 	//QTD DE HORAS INSALABIDADE MINIMA DO SR9
			If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_INSMIN"))
				While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
											SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_INSMIN" $ SR9->R9_CAMPO)
		
						If SR9->R9_DATA <= dDataAte						
							nInsMinSR9:= Val(StrTran(SR9->R9_DESC,",","."))
						Else
							Exit
						EndIf	
		
					SR9->( dbSkip() )
				EndDo								
			EndIf
			If lMdt .AND. nPerc_Ins == 0
				nValorMdt := RHmdtPeri(1,.T.) //2=periculosidade/1=insalubridade 
				If nValorMdt > 0
					nPerc_Ins := nValorMdt
				EndIf
			Else
	
				If nTpINS == 2		
					nValAux := Val(fBuscaRG4("RCE_PINSMI",dDataAte,.T.))
				
					If nValAUx > 0
						nPerc_Ins := nValAux
					EndIf
				EndIf
		
		 		//QTD DE HORAS INSALABIDADE MEDIA DO SR9
				If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_INSMED"))
					While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
												SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_INSMED" $ SR9->R9_CAMPO)
		
							If SR9->R9_DATA <= dDataAte						
								nInsMedSR9:= Val(StrTran(SR9->R9_DESC,",","."))
							Else
								exit
							EndIf	
		
						SR9->( dbSkip() )
					EndDo								
				EndIf
	        
				If nTpINS == 3		
					nValAux := Val(fBuscaRG4("RCE_PINSME",dDataAte,.T.))
				
					If nValAUx > 0
						nPerc_Ins := nValAux
					EndIf
				EndIf
		
				//QTD DE HORAS INSALABIDADE MAXIMA DO SR9
				If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_INSMAX"))
					While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
												SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_INSMAX" $ SR9->R9_CAMPO)
		
							If SR9->R9_DATA <= dDataAte						
								nInsMaxSR9:= Val(StrTran(SR9->R9_DESC,",","."))
							Else
								exit
							EndIf	
		
						SR9->( dbSkip() )
					EndDo								
				EndIf
	
				If nTpINS == 4
					nValAux := Val(fBuscaRG4("RCE_PINSMA",dDataAte,.T.))
				
					If nValAUx > 0
						nPerc_Ins := nValAux
					EndIf
				EndIf
			Endif
		    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		    //| Tratamento para o fator multiplicador do sal.minimo na insalubridade (radiologista).				   |
		    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
			If ( cBCalIns $ "1*4*5" )   
				nFatorInsal	:= 1
				//Fator multiplicador do salario minimo para calulo da insalubridade (radiologista)
				If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_FTINSAL"))
					While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
												SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_FTINSAL" $ SR9->R9_CAMPO)
		
							If SR9->R9_DATA <= dDataAte						
								nFatorInsal:= Val(StrTran(SR9->R9_DESC,",","."))
							Else
								exit
							EndIf	
		
						SR9->( dbSkip() )
					EndDo								
				EndIf
			   	nValMin	  	:=	Round( ( nValMinAnt *nFatorInsal)  , 2)
				nMinHora  	:= Round((nValMin/SRA->RA_HRSMES),4) 
				nMinDia   	:= (nValMin  / nDiasC)
			EndIf
		
		    nMinHora  := If( nHrsMes==0 , nMinHora ,(nValMin / nHrsMes) )
		
			nInsMin	:= If ((nHrsMin + nInsMinSR9) > 0 , If (nInsMinSR9 > 0, Eval(bHorasProp,nHrsMin,nInsMinSR9), If (Int(nMinHora * nHrsMin) == Int(nVlrMin), 999.99, nHrsMin) ), 0)
			nInsMed	:= If ((nHrsMed + nInsMedSR9) > 0 , If (nInsMedSR9 > 0, Eval(bHorasProp,nHrsMed,nInsMedSR9), If (Int(nMinHora * nHrsMed) == Int(nVlrMed), 999.99, nHrsMed) ), 0) 
			nInsMax	:= If ((nHrsMax + nInsMaxSR9) > 0 , If (nInsMaxSR9 > 0, Eval(bHorasProp,nHrsMax,nInsMaxSR9), If (Int(nMinHora * nHrsMax) == Int(nVlrMax), 999.99, nHrsMax) ), 0)
		
		    If nInsMinSR9 + nInsMedSR9 + nInsMaxSR9 + nInsMin + nInsMed + nInsMax + nVlr13o + nVlrFer == 0
				If nBsInsal == 0 //A existencia da base indica que houve o calculo da insalubridade e por isso deve ser calculada no dissidio
					nHrsInsal := 0
				EndIf				
			Else
			    //-- Calcula as horas integrais da insalubridade
			    //-- Se existir historico assume este, caso contrario assume do cadastro
			    //-- Premissa: somente um dos niveis de insalubridade estara presente
			    nIntHoras:= nInsMinSR9 + nInsMedSR9 + nInsMaxSR9
			
				If Empty(nIntHoras)
					If !Empty(SRA->RA_SINDICA) .and. Val(SRA->RA_ADCINS) > 1
						If RCE->(DbSeek(xFilial("RCE")+SRA->RA_SINDICA))
							If SRA->RA_ADCINS == "2"
								nIntHoras:= RCE->RCE_PINSMI
							ElseIf SRA->RA_ADCINS == "3"
								nIntHoras:= RCE->RCE_PINSME
							ElseIf SRA->RA_ADCINS == "4"
								nIntHoras:= RCE->RCE_PINSMA
							EndIf
						EndIf
					EndIf			
				EndIf
				If __lMemCalc
					fAddMemLog("Horas integrais insalubridade: " + cValToChar(nIntHoras) ,1,1)
				EndIf
			EndIf 
		Else
			nHrsInsal := 0
			If __lMemCalc
				fAddMemLog("Horas insalubridade: " + cValToChar(nHrsInsal) ,1,1)
			EndIf
		EndIf
		If __lMemCalc
			fAddMemLog("Horas pagas insalubridade mínima: " + cValToChar(nInsMinSR9) ,1,1)
			fAddMemLog("Horas pagas insalubridade média: " + cValToChar(nInsMedSR9) ,1,1)
			fAddMemLog("Horas pagas insalubridade máxima: " + cValToChar(nInsMaxSR9) ,1,1)
		EndIf
	EndIf 
	
	nPos :=  Ascan(aPd, { |X| X[1] = cCodIns .And. X[3] = cSemana .And. X[9] # "D" .And. X[7] # "C" })
	
	If nPos > 0 .and. aPd[nPos,4] > 0
		nHoras   := aPd[nPos,4]
		cTip     := aPd[nPos,6]
	Else
		nHoras := nHrsInsal
		cTip   := "H"
	EndIf
	
	If Empty(nIntHoras)
		nIntHoras:= nHoras
	EndIf 
	
	If cTip = "H"
		If cBCalIns $ "3*4*7*8"
			Insalub_b := 0.00
			
			// Somar Incidencia para Insalubridade
			If !( IsInCallStack("GPEM070") .or. IsInCallStack( "GPM070GRD" ) )
				If ! lDissidio
					Aeval( aPd ,{ |X|  SomaInc(X,10,@Insalub_b,nCond,cRefAux,,,,.F. ,aCodFol,SalHora_Ins,,,,19) })
				Else
					If nCond == Nil
						Aeval( aPd ,{ |X|  SomaInc(X,10,@Insalub_b,11,"N",12,"N",,.F. ,aCodFol,SalHora_Ins,,,,19) })
						Aeval( aPd ,{ |X|  SomaInc(X,10,@Insalub_b,12,"N",11,"N",,.F. ,aCodFol,SalHora_Ins,,,,19) })
					Else
						Aeval( aPd ,{ |X|  SomaInc(X,10,@Insalub_b,nCond,cRefAux,,,,.F. ,aCodFol,SalHora_Ins,,,,19) })
					EndIf
				
				EndIf
			EndIf
			If ( (!lINSALVH .And. cBCalIns $ "4*7") .Or. (cBCalIns == "8")) .And. ( nValFaltas ) <> 0
				Insalub_b += nValFaltas
			Endif
			Insalub_b += SalMes_Ins 
			nIntInsal	:= Insalub_b 

			If ( cTipoRot == "1" .And. cSitFolh != " " .And. !lAdmissao .And. ndiasFgts == 0) .Or. cTipoRot == "4" 
				Insalub_b -= SalMes_Ins
				If (nPosAfaMt := aScan( aDetAfas, {|x| x[1] == aCodFol[40,1]} ) ) > 0
					nDaPaPg -= aDetAfas[nPosAfaMt,2]
				EndIf
				Insalub_b += ( SalMes_Ins / nDiasC * (DiasTrab +nDaPaPg))
				If __lMemCalc
					fAddMemLog("Horista: Sim" ,1,1)
					fAddMemLog("Dias mês: " + cValToChar( nDiasC ) ,1,1)
					fAddMemLog("Dias trabalhados: " + cValToChar( DiasTrab ) ,1,1)
					fAddMemLog("Dias a pagar de afastamento: " + cValToChar( nDaPaPg ) ,1,1)
					fAddMemLog("Resultado salário base ( (Salário mês / Dias mês) * ( Dias Trabalhados + Dias a Pagar Afastamento ) ): " + cValToChar( AllTrim( Transform( Insalub_b,"@E 999,999,999.99") ) ) ,1,1)
				EndIf
			ElseIf !lINSALVH .And. cBCalIns == '4' .And. nValFaltas == 0
				SalMes_Ins := Insalub_b
			EndIf
			
			SalHora_Ins := ( Insalub_b / nHorasMes )
			
			If SalRes_Ins > 0
				nIntResIns := ( SalRes_Ins / nHorasMes) * nHoras		
				If __lMemCalc
					fAddMemLog("Horas mês: " + cValToChar(nHorasMes) ,1,1)
					fAddMemLog("Horas trabalhadas: " + cValToChar(nHoras) ,1,1)
					fAddMemLog("Salário base recisão: " + cValToChar(SalRes_Ins) ,1,1)			
					fAddMemLog("Resultado salário base recisão (Salário mês recisão / Horas mês) * Horas: " + cValToChar( AllTrim( Transform( Insalub_b,"@E 999,999,999.99") ) ) ,1,1)
				EndIf		
			EndIf
		Else 
			
			nIntInsal := Insalub_b	:= ( SalMes_Ins / nHorasMes) * nHoras 
			
			If SalRes_Ins > 0
				nIntResIns := ( SalRes_Ins / nHorasMes) * nHoras				
			EndIf
			
		EndIf
		
	ElseIf cTip = "D"
		Insalub_b := (nMinDia * nHoras )
		nIntInsal:=  (nMinDia * nIntHoras)
		
		If SalRes_Ins > 0
			nIntResIns:=  ( (SalRes_Ins / Int(SRA->RA_HRSMES/SRA->RA_HRSDIA)) * nIntHoras)
		EndIf
		
	EndIf 
	
	//Calculo da Insalubridade
	nInsalub	:= (Insalub_b * nPerc_Ins) / 100 
	nBaseInsal	:= nIntInsal
	nIntInsal	:= (nIntInsal * nPerc_Ins) / 100
	
	// Contrato intermitente proporcionaliza pelas horas trabalhadas na convocação quando a insalubridade não for sobre o salário
	If SRA->RA_TPCONTR == "3" .And. ! cBCalIns $ "2*3"
		nInsalub  := ( nInsalub  / Max( aConvocacao[7] * Max(nDiasC, aConvocacao[5]), (Normal + Descanso))) * (Normal + Descanso)
		nIntInsal := ( nIntInsal / Max( aConvocacao[7] * Max(nDiasC, aConvocacao[5]), (Normal + Descanso))) * (Normal + Descanso)
	EndIf
	
	//Insalubridade para horista - na rescisao sempre deve ser sob o salario base para ferias e 13o    
	If SalRes_Ins > 0 .And. nIntResIns > 0
		If __lMemCalc
			fAddMemLog("Salário base recisão: " + cValToChar( AllTrim( Transform( nIntResIns,"@E 999,999,999.99") ) ) ,1,1)
		EndIf
		nIntResIns := (nIntResIns * nPerc_Ins) / 100
	EndIf
	
	If __lMemCalc
		fAddMemLog("Resultado ( (Salário * Percentual) / 100): " + cValToChar( AllTrim( Transform( nInsalub,"@E 999,999,999.99") ) ) ,1,1)
	EndIf

	If SalHora_Ins > 0  
  		nHoras 		:=  Insalub_b / SalHora_Ins // Qtd de Horas Insalubr.
		nHoraInsa   :=  nInsalub / SalHora_Ins // Qtd quando calculo for pelas verbas 
	EndIf
	
	If lDissidio 
		If !(cTipoRot $ "1*3*6") // Folha/Ferias
			nInsalub := (nInsalub / nDiasC) * diasTrab 
			nHoraInsa := SRA->RA_HRSDIA * diasTrab
		EndIf
	EndIf
	
	If nInsalub > 0
		//Para Ferias, 13.Salario ou Folha no caso de férias o mês todo, nao gravar a verba, apenas atualizar o salmes caso incorpore salario.
		If aPdv[nPosv,18] == "S" .And. ;
		( cTipoRot $ "2*3*5*6"  .Or. (cTipoRot == "1" .And. cSitFolh == "F" .And. DiasTrab + nDiasPg == 0) )
			IncorpSal(nInsalub)
		ElseIf cTipoRot == "2" .and. aPdv[nPosv,18] != "S"//Não considera no adiantamento se não incorporar
			nInsalub := 0
		EndIf
		
		If fGetTipoRot(GETROTEXEC()) == "G" .And. nPosv > 0
			FMatriz(cCodIns,nInsalub, , , ,'V', , , , ,.T.,,,,,,,,,,,,,lIncorp080)
		EndIf	

		If lPerAdiBas
			fGeraVerba(cCodIns,nInsalub, nHoraInsa,,,,,,,,,,,,,.T.,,,,,,lIncorp080)
			nIntInsal := nInsalub := SALARIO * (nPerc_Ins / 100)
		EndIf 
		
		nOrdGrPd++
		If ( nPosSB := aScan(aSalBase, { |X| X[1] == cCodIns } ) ) == 0
			aAdd(aSalBase,{cCodIns + "*" + aCodFol[1305,1] + "*" + aCodFol[1307,1] + "*" + aCodFol[192,1] + "*" + aCodFol[1692,1] + "*" + aCodFol[1693,1] + "*" + aCodFol[1694,1] + "*" + aCodFol[1695,1] + "*" + aCodFol[1696,1] + "*" + aCodFol[1697,1], nBaseInsal, nOrdGrPd})
		Else
			aSalBase[nPosSB,2] := nBaseInsal
			aSalBase[nPosSB,3] := nOrdGrPd
		EndIf		
	EndIf
	
	If !(cBCalIns $ "4*7*8")
		nHoraInsa := nHoras
	EndIf
	
	If nHoraInsa == 0 .And. cBCalIns == "3"
		nHoraInsa := DiasTrab
	Endif
	
	If lPdInfo
		If ((nPosVbApd := Ascan(aPd, { |X| X[1] = cCodIns .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0)
			nInsalub := aPd[nPosVbApd][5]
			//se verba insalubridade informada e nao existe insalubridade gestante, nao gera verba insalubridade gestante.
			If (nInsalGest == 0)
				nDiasGest := 0
				cCodInsGes := ""
				lMesTodo := .F.
			EndIf
		EndIf
	EndIf
	
	If lINSALVH .And. cBCalIns $ "4*7" .And. !Empty(aAuxFal)
		For nPosFalPd := 1 To Len(aAuxFal) 
			aPd[aAuxFal[nPosFalPd, 1], 4] := aAuxFal[nPosFalPd, 2]
			aPd[aAuxFal[nPosFalPd, 1], 6] := "D"
		Next nPosFalPd
	EndIf

EndIf

If cTipoRot == "4" .And. aIncRes[15] == "N" .And. aIncRes[2] <> "T"
	nInsalub := 0
EndIf

If !lPerins
	FPerIns() //Compara Insalubridade x Periculosidade e considera maior valor
EndIf

Return( Nil )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ Pericul  ³ Autor ³ Mauro                 ³ Data ³ 23.03.95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calculo da Periculosidade                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cCod       =  Codigo da Insalubridade                      ³±±
±±³          ³ nPeric     =  Retorno do valor calculado Passar como Ref.  ³±±
±±³          ³ nProp      =  Calc. Prop. .T. ou .F.                       ³±±
±±³          ³ dData      =  Data para Calculo Proporcional Caso Rescisao ³±±
±±³          ³ cTip       =  Tipo de Calculo (A = adinat. )               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/          
Function Pericul(aCodfol,nPeric,nSalMes,SalHora,cGrava,lAdicInteg,nHoraPer,cCodPd,nHrsPeri,cBCalPer,nPerc_Peri,lPropDia) 

Local bHorasProp	:= {||}
Local nValAux		:= 0
Local nHrsPerSR9    := 0
Local nIntHoras		:= 0
Local nInt13Fer		:= 0
Local cRefAux		:= "N"
Local cValAux		:= ""
Local nCond			:= 11
Local nPosv			:= 0
Local nPosSB		:= 0
Local nTpPeric		:= 0
Local nHorasMes		:= Iif(SRA->RA_TPCONTR=="3", Normal + Descanso, nHrsCal )
Local nFatorInsal	:= 0    
Local nValMin		:= VAL_SALMIN
Local nValMinAnt	:= nValMin
Local nDiasPAux		:= 0
Local nDiasAfPag    := 0
Local Sal_minEst	:= 0
Local lMdt 			:= GetMvRH("MV_MDTADIC",,.F.)
Local nValorMdt		:= 0
Local nPosVbApd		:= 0
Local nT			:= 0
Local nDiasAux		:= 0
Local nSaldoAux		:= 0
Local nDsrAux		:= 0
Local lDiasPer		:= (GetMVRH("MV_DIASPER",,"1") == "1")
Local lPerAdiBas 	:= P_RESADISB .And. cTipoRot == "4"  //Calcula adicional sobre Salario Base na rescisao
Local lIncorp080    := !((RCE->RCE_BCALPE == "2") .and. IsInCallStack("GPER080") .And. Type("lSalInco") <> "U" .And. lSalInco ) 
Local aBsPeric      := RetSx3Box( Posicione("SX3", 2, "RCE_BCALPE", "X3CBox()" ),,, 1 )
Local lPericInt		:= ("2" $ P_ADCINTEG)
Local lGPEM070		:= IsInCallStack("GPEM070") .or. IsInCallStack( "GPM070GRD" )
Local lPerins		:= If( Type("P_PERINS") == "U", .T., P_PERINS )

Private nPeric_b	:= 0    
Private SalMes_Per	:= 0 //SalHora
Private SalHora_Per	:= 0 //SalHora
Private SalRes_Per	:= 0 //Salario base para calculo de adicionais do horista na rescisao

Static lCalcPeric

DEFAULT nPerc_Peri	:= 0
DEFAULT lCalcPeric  := ExistBlock("CALCPERIC")

DEFAULT __lMemCalc 	:= cPaisLoc == "BRA" .And. fMemCalc() // Memória de Cálculo
DEFAULT __lHorJova	:= SRA->(ColumnPos( "RA_HOJORVA" )) > 0

lPropDia := If(lAdicInteg .and. cTipoRot == "4",.F.,lPropDia)

If __lMemCalc
	fAddMemLog("Calculo via dissídio ? " + If(lDissidio,"Sim","Não")  ,1,1)
	If !Empty(cCodPd)
		fAddMemLog("Verba Periculosidade  : " + cCodPd + " - " +  RetValSRV(cCodPd,SRA->RA_FILIAL,"RV_DESC") ,1,1)
	EndIf
	If !Empty(CCODPERM) .And. CTIPOROT $ "5*6" 
		fAddMemLog("Verba Periculosidade Mat. 13 : " + CCODPERM + " - " +  RetValSRV(CCODPERM,SRA->RA_FILIAL,"RV_DESC") ,1,1)
	EndIf
	If Len(aBsPeric) > 0
		fAddMemLog("Tipo Periculosidade : " +   AllTrim( aBsPeric[ Ascan( aBsPeric, { |x| x[ 2 ] == cBCalPer} ), 3 ])	 ,1,1)
	EndIf
	fAddMemLog("Horas Periculosidade cadastro : " +  cvaltochar(nHrsPeri) ,1,1)
	fAddMemLog("Percentual Periculosidade sindicato : " +  Transform(nPerc_Peri,"@E 999,999,999.99") + " %" ,1,1)
	fAddMemLog("Sindicato : " +  SRA->RA_SINDICA + " - " + Posicione("RCE",1,xFilial("RCE")+SRA->RA_SINDICA,"RCE_DESCRI"),1,1)
	fAddMemLog("Horas mês : " +  cvaltochar(nHorasMes) ,1,1)
	If cTipoRot == "4"
		fAddMemLog("Calculo proporcial ao dia ? " +  if(!("2" $ P_ADCINTEG),"Sim","Não") ,1,1)
		fAddMemLog("Calcula adicional sobre Salario Base na rescisao ? " +  if(lPerAdiBas,"Sim","Não") ,1,1)
	EndIf
	fAddMemLog("Calculo proporcial a admissão ? " +  if(LADMISSAO .And. P_CPERICPR == "S" ,"Sim","Não") ,1,1)
	If NDIASMAT > 0
		fAddMemLog("Dias Maternidade : " +  cvaltochar(NDIASMAT) ,1,1)
	EndIf 
	If NDPRGSALMA > 0
		fAddMemLog("Dias Prorrogação Maternidade : " +  cvaltochar(NDPRGSALMA) ,1,1)
	EndIf 
EndIf

If Empty(cCodPd)
	CMSGLOG := FMSGFORM({92}) + " -> " + GetStackFormula() + " - " + fDesc("RC2",Substr( GetStackFormula(), 3 , 15 ),"RC2_DESC",,,2)        
	S_MSGLOG()      
	FINALCALC()
	Return()
EndIf

If !lDissidio .And. !(SRA->RA_RESCRAI$'30/31') .And. cSitFolh == "D" .And. cTipoRot == "1" .And. (Type("lSalInco")=="U" .or. !lSalInco)
	Return()
EndIf

//busca percentural de periculosidade no SIGAMDT
If __lMemCalc
	fAddMemLog("Integração com SIGAMDT " + if(lMdt, "ATIVADA","DESATIVADA") ,1,1)
Endif
If lMdt .AND. nPerc_Peri == 0 
	nValorMdt := RHmdtPeri(2,.F.) //2=periculosidade/1=insalubridade 
	If nValorMdt > 0
		nPerc_Peri := nValorMdt
		If __lMemCalc
			fAddMemLog("Percentual Periculosidade vindo da Integração MDT : " +  Transform(nPerc_Peri,"@E 999,999,999.99") + " %" ,1,1)
		EndIf
	EndIf
EndIf

//se adicional foi informado, nao calcular novamente.
If CTIPOROT != "4" .And. (nPosVbApd := Ascan(aPd, { |X| X[1] = cCodPd .And. X[9] # "D" .And. X[7] == "I" .And. X[3] = cSemana})) > 0
	nPeric := nIntPercul := aPd[nPosVbApd][5]
	If __lMemCalc
		fAddMemLog("Adicional informado, não será recalculado : " +  Transform(nPeric,"@E 999,999,999.99")  ,1,1)
	EndIf
	Return()
Endif

If FIncide(cCodPd)
	
	nPosv := ASCAN(aPdv, { |Y| Y[1] = cCodPd })
	
	//Se não há pagamento de periculosidade no cadastro, mas existiu no histórico, assume histórico
	If nHrsPeri == 0 .And. lDissidio .And. ( aScan(aPdOld,{|X| X[1] == cCodPd }) > 0 .Or. cPaisLoc == "BRA" .And. aScan(aPdOldAux,{|X| X[1] == cCodPd }) > 0 )
		If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT + "RA_PERICUL"))
			While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
									SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_PERICUL" $ SR9->R9_CAMPO)
					If SR9->R9_DATA <= dDataAte
						nHrsPeri := Val(StrTran(SR9->R9_DESC,",","."))
					Else
						Exit
					EndIf	
			SR9->( dbSkip() )
			EndDo
		EndIf
		If 	nHrsPeri == 0
			If __lMemCalc
				fAddMemLog("Horas de Periculosidade não encontrada no histórico, calculo não realizado"  ,1,1)
			EndIf
			Return()
		Else
			If __lMemCalc
				fAddMemLog("Horas Periculosidade Histórico : " +  cvaltochar(nHrsPeri) ,1,1)
			EndIf
		EndIf
	ElseIf lDissidio .and. cTipoRot == "6" .and. aScan(aPdOld,{|X| X[1] == cCodPd }) == 0	//Se não existiu pagamento de periculosidade no 13º, não paga diferença.
		If __lMemCalc
			fAddMemLog("Não existiu pagamento de periculosidade no 13º, não paga diferença."  ,1,1)
		EndIf
		Return()
	EndIf
	
	If SRA->RA_HRSMES == nHrsPeri .Or. SRA->RA_TPCONTR=="3"
		nHrsPeri :=  nHorasMes
	EndIf
	
	If cBCalPer $ "3*4*6*7"  	//Calculo Pelo Salario Minimo
		If cBCalPer $ "4*7" 
			cValAux := fBuscaRG4("RCE_UF",dDataAte,.T.)
			cUf := RCE->RCE_UF
			If !Empty(cValAux)
				cUf := Alltrim(cValAux)
			EndIf
			If __lMemCalc
				fAddMemLog("Estado para busca de Piso estadual : " + cUf ,1,1)
			EndIf
			//buscar salario minimo estadual
			Sal_minEst := Sal_MinEst(AnoMes(dDataAte),cUf)
			
			If __lMemCalc
				fAddMemLog("Salário mínimo estadual : " + Transform(Sal_minEst,"@E 999,999,999.99") ,1,1)
			EndIf
			
			If Sal_minEst <= 0
				FINALCALC()
				Return()
			EndIf
			nValMinAnt	:= Sal_minEst
			nValMin		:= Sal_minEst
		Else
			If __lMemCalc
				fAddMemLog("Salário mínimo : " + Transform(nValMin,"@E 999,999,999.99") ,1,1)
			EndIf
		EndIf
		
		nFatorInsal	:= 1
		If !Empty(SRA->RA_FTINSAL) //Tratamento para o fator multiplicador do sal.minimo na insalubridade (radiologista).
			nFatorInsal	:= SRA->RA_FTINSAL
		EndIf
		If __lMemCalc
			fAddMemLog("Fator multiplicador do sal.minimo : " + cvaltochar(nFatorInsal) ,1,1)
		EndIf
		SalMes_Per 	:= Round( (nValMin  * nFatorInsal)  , 2)
		SalHora_Per	:= SalMes_Per / nHrsPeri
		
		If __lMemCalc
			fAddMemLog("Salario mínimo com fator aplicado : " + Transform(SalMes_Per,"@E 999,999,999.99") ,1,1)
		EndIf
	ElseIf cBCalPer $ "5*8"  	//Piso sindicato
		SalMes_Per 	:= RCE->RCE_PISO
		
		cValAux := fBuscaRG4("RCE_PISO",dDataAte,.T.)
		
		If !Empty(cValAux)
			SalMes_Per := val(cValAux)
		EndIf
		SalHora_Per := SalMes_Per / nHrsPeri
		If __lMemCalc
			fAddMemLog("Piso do sindicato : " + Transform(SalMes_Per,"@E 999,999,999.99") ,1,1)
		EndIf
	Else
		If !( aPdv[nPosv,34] == "2" )
			SalHora_Per := SALHOR
			If SRA->RA_CATFUNC $ "H*G" .And. cTipoRot  == "4"
				If SRA->RA_CATEG == "07" .AND. LMAPRENDIZ
					SalMes_Per  := Salhora * Round((SRA->RA_HRSDIA * nDiasC),2)
				//Calcula Proporcional
				ElseIf !lPericInt .And. SRA->RA_TPCONTR == "3" 
					CalcConvoc(@nSaldoAux , 0, @nDsrAux , NIL , NIL, .F.)
					Salmes_Per	:= nSaldoAux + nDsrAux
				Else
					SalMes_Per  := (SalHor * Round((SRA->RA_HRSDIA * nDiasC),2))
				EndIf
				If !lDiasPer .And. P_DIASRES == 2 
					SalRes_Per := (SalHor * SRA->RA_HRSMES)
				EndIf
			ElseIf SRA->RA_CATFUNC $ "H*G" .And. !lDiasPer .And. cTipoRot == "3" .And. !(SRA->RA_CATFUNC == "H" .And. __lHorJova .And. SRA->RA_HOJORVA == "1")
				SalMes_Per  := (SalHor * SRA->RA_HRSMES)
			Else
				
				If SRA->RA_TPCONTR == "3"
					// Tratamento necessário para quando houver apenas horas de DSR
					SalMes_Per := ( (Normal + Descanso) * aConvocacao[4] )
				Else
					SalMes_Per  := ( SALARIO )
				EndIf
				
			EndIf 
			If __lMemCalc
				fAddMemLog("Verba Periculosidade configurada para base de calculo : Salario base" ,1,1)
				fAddMemLog("Salario Mês Periculosidade : " + Transform(SalMes_Per,"@E 999,999,999.99") ,1,1)
				fAddMemLog("Salario Hora Periculosidade : " + Transform(SalHora_Per,"@E 999,999,999.99") ,1,1)
			EndIf
		Else
			SalHora_Per := SALHORA
			SalMes_Per 	:= nSalMes
			If __lMemCalc
				fAddMemLog("Verba Periculosidade configurada para base de calculo : Salario Incorporado" ,1,1)
				fAddMemLog("Salario Mês Periculosidade : " + Transform(SalMes_Per,"@E 999,999,999.99") ,1,1)
				fAddMemLog("Salario Hora Periculosidade : " + Transform(SalHora_Per,"@E 999,999,999.99") ,1,1)
			EndIf
		EndIf	
	EndIf	
		
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ajusta a referencia a somar no movimento para formar a base     ³
	//³ de Periculosidade                                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cTipoRot == "3"
		cRefAux	:= "S"
		nCond	:= 11
	ElseIf cTipoRot $"5*6"
		cRefAux	:= "S"
		nCond	:= 12
	EndIf
	
	bHorasProp	:= {|nHorApd,nHorHist| if (nHorHist<>999.99,If ( DiasTrab <> nDiasP ,nHorApd,nHorHist), nHorHist) }
	
	lDissidio  := If(lDissidio == Nil,.F.,lDissidio) 
	
	If lDissidio .and. !(cTipoRot $ "4/6")// Se o calculo for dissidio, pegar hrs do mes\ano de calculo  
	
		//Se houve pagamento de periculosidade
		If nHrsPeri > 0 	    
			If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_HRSMES "))
				While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
										SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_HRSMES" $ SR9->R9_CAMPO)
		
						If SR9->R9_DATA <= dDataAte						
							nHrsMes:= val( SR9->R9_DESC )
						Else
							Exit
						EndIf	
		
				SR9->( dbSkip() )
				EndDo								
			EndIf
			
		    //PEGAR SE A INSALUBRIDAE ERA MINIMA,MEDIA OU MAXIMA DO SR9
		    nTpPeric := Val(SRA->RA_ADCPERI)
			If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_ADCPERI"))
				While SR9->( !Eof() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
											SR9->R9_FILIAL+SR9->R9_MAT .and. ("RA_ADCPERI" $ SR9->R9_CAMPO)
		
						If SR9->R9_DATA <= dDataAte						
							nTpPeric:= Val( SR9->R9_DESC )
						Else
							Exit
						EndIf	
			
					SR9->( dbSkip() )
				EndDo
			EndIf
		
			If SR9->( dbSeek( SRA->RA_FILIAL + SRA->RA_MAT+"RA_PERICUL"))
				While SR9->( !EOF() ) .and. SRA->RA_FILIAL + SRA->RA_MAT  == ;
										SR9->R9_FILIAL+SR9->R9_MAT .AND. ("RA_PERICUL" $ SR9->R9_CAMPO)
						If SR9->R9_DATA <= dDataAte						
							nHrsPerSR9:= Val(StrTran(SR9->R9_DESC,",","."))
						Else
							Exit
						EndIf	
				SR9->( dbSkip() )
				EndDo
			EndIf
	
			If nTpPeric == 2
				cValAux := fBuscaRG4("RCE_BCALPE",dDataAte,.T.)
		
				If !Empty(cValAux)
					cBCalPer := cValAux
				EndIf
				If __lMemCalc
					If Len(aBsPeric) > 0
						fAddMemLog("Tipo Periculosidade histórico : " +   AllTrim( aBsPeric[ Ascan( aBsPeric, { |x| x[ 2 ] == cBCalPer} ), 3 ])	 ,1,1)
					EndIf
				EndIf
				If lMdt .AND. nPerc_Peri == 0
					nValorMdt := RHmdtPeri(2,.T.) //2=periculosidade/1=insalubridade 
					If nValorMdt > 0
						nPerc_Peri := nValorMdt
						If __lMemCalc
							fAddMemLog("Percentual Periculosidade vindo da Integração MDT : " +  Transform(nPerc_Peri,"@E 999,999,999.99") + " %" ,1,1)
						EndIf
					EndIf
				Else
					nValAux := Val(fBuscaRG4("RCE_PERPE",dDataAte,.T.))
					
					If nValAux > 0
						nPerc_Peri := nValAux
						If __lMemCalc
							fAddMemLog("Percentual Periculosidade histórico do sindicato : " +  Transform(nPerc_Peri,"@E 999,999,999.99") + " %" ,1,1)
						EndIf
					EndIf
				EndIf
			EndIf
			
			//-- Calcula as horas integrais da periculosidade
			//-- Se existir historico assume este
			//-- caso contrario assume do cadastro
			nIntHoras:= nHrsPerSR9
			
			If Empty(nIntHoras)
				Aeval( aPdOld, {|X| If(X[1] == aCodFol[36,1] , (nIntHoras += X[4]), 0 ) })
				Aeval( aPdOld, {|X| If(X[1] $ aCodFol[1281,1] + "/" + aCodFol[1290,1] + "/" + aCodFol[1291,1] + "/" + aCodFol[1300,1] + "/" + aCodFol[1301,1] + "/" + aCodFol[1302,1] + "/" + aCodFol[1303,1] , (nInt13Fer += X[5]), 0 ) })
				If nIntHoras + nInt13Fer == 0 //Não foi encontrado periculosidade no histórico de alterações do funcionário nem no histórico de movimento
					nHrsPeri := 0
				EndIF
			EndIf 
		EndIf
	EndIf
	
	nPeric_b := 0.00

	If nHrsPeri == 0 .And. SRA->RA_PERICUL <> 0
		nHrsPeri := fBuscaPeri()
	Endif		
	
	If nHrsPeri > 0.00
		
		If cBCalPer $ "2*6*7*8" //Calculo Salario + Verbas
			
			If !lGPEM070
				// Soma Incidencia para Periculosidade
				Aeval( aPd ,{ |X|  SomaInc(X,9,@nPeric_b,nCond,cRefAux,,, ,.F., aCodFol,SalHora_Per,,,,5)})
				If __lMemCalc
					fAddMemLog("Base de verbas que incidem para Periculosidade : " +  Transform(nPeric_b,"@E 999,999,999.99") ,1,1)
				EndIf
			EndIf

			// Inclui médias que incidem para Periculosidade
			If cTipoRot $ "3" .And. nPeric_b == 0
				fMedATS(@nPeric_b,'3',cTipoRot)
			EndIf

			// Verifica se o adicional de cargo de confiança incide para Periculosidade
			If cTipoRot $ "5*6" .And. RetValSrv(aCodFol[1294,1], SRA->RA_FILIAL, "RV_PERICUL") == "S"
				nPeric_b += NADCCONF
			EndIf
			
			nPeric_b 	+= SalMes_Per			
			SalHora_per := nPeric_b / nHrsPeri
			nIntHoras	:= nHrsPeri
			
			If (cTipoRot == "1" .And. cSitFolh != " " .and. nDiasMat == 0) .Or. ;
				(cTipoRot == "1" .And. cSitFolh == " " .and. DiasTrab < 30) .Or. ;
				(cTipoRot == "4")

				For nT := 1 To Len (aDetAfas)
					//Se for auxilio doença ou acidente de trabalho ou a verba tiver incidencia para periculosidade 
					If RetValSrv(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_REFFER") != "S" .and. RetValSrv(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_PERICUL") == "S"
						nDiasAux := aDetAfas[nT,2]
					EndIf
					nPeric_b += nDiasAux * SalDor
					If __lMemCalc
						fAddMemLog("Base de verbas referente a dias afastados : " +  Transform(nDiasAux * SalDor,"@E 999,999,999.99") ,1,1)
					EndIf
				Next nT

				If Len(aDetAfas) > 0 .and. SRA->RA_CATFUNC == "H" .and. nDaPaPg > 0 .and. ( aScan(aDetAfas, {|X| x[7] $ "O1*P1" .and. !(RetValSrv(X[1], SRA->RA_FILIAL, "RV_PERICUL") == "S") }) ) > 0
					nPeric_b += nDaPaPg * SalDor
					If __lMemCalc
						fAddMemLog("Base de verbas referente a dias afastados : " +  Transform(nDaPaPg * SalDor,"@E 999,999,999.99") ,1,1)
					EndIf
				EndIf					
				
				nPeric_b -= SalMes_Per
				
				If SRA->RA_CATFUNC == "H" .And. cTipoRot <> "4" .And. !lGPEM070
					If Len(aDetAfas) == 0 .And. cSitFolh == "F"
						nPeric_b := 0
						Aeval( aPd, { |X| SomaInc(X, 9, @nPeric_b, nCond, cRefAux,,,, .F., aCodFol, SalHora_Per )})
					EndIf
					aEval( aPd, { |x| If( x[1] $ aCodFol[32,1]+"/"+aCodFol[33,1] .and. x[3] == cSemana, nPeric_b += x[5], Nil ) } )
					SalHora_per := nPeric_b / nHrsPeri
				Else
					//Tratativa que constava na formula S_GRVPERV para o mnemonico P_CPERICPR. A tratativa foi inserida no fonte, pois já havia proporcionalização dentro do fonte.
					//Caso a tratativa também ficasse na formula, seria proporcionalizado 2x.
					If lAdmissao
						If P_CPERICPR == "S"
							nPeric_b += ( SalMes_Per / nDiasC * (DiasTrab+If( nDiasFgts > 0 , nDiasFgts, nDaPaPg)) )
							If __lMemCalc
								fAddMemLog("Proporcionalização salario periculosidade : " +  Transform(( SalMes_Per / nDiasC * (DiasTrab+If( nDiasFgts > 0 , nDiasFgts, nDaPaPg)) ),"@E 999,999,999.99") ,1,1)
							EndIf
						Else
							nPeric_b += SalMes_Per
						EndIf
					Else
						nPeric_b += ( SalMes_Per / nDiasC * (DiasTrab + nDaPaPg) )
						If __lMemCalc
							fAddMemLog("Proporcionalização salario periculosidade : " +  Transform(( SalMes_Per / nDiasC * (DiasTrab + If( nDiasFgts > 0 , nDiasFgts, nDaPaPg) )  ),"@E 999,999,999.99") ,1,1)
						EndIf
					EndIf
				EndIf
			Else
				For nT := 1 To Len (aDetAfas)
					//Se for auxilio doença ou acidente de trabalho ou a verba tiver incidencia para periculosidade 
					If RetValSrv(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_REFFER") != "S" .and. ( ( aDetAfas[nT,7] $ "O1*P1" .and. SRA->RA_CATFUNC == "H")  .or. RetValSrv(aDetAfas[nT,1], SRA->RA_FILIAL, "RV_PERICUL") == "S" )
						nDiasAfPag += aDetAfas[nT,2]						
					EndIf
				Next nT			
			EndIf
			If __lMemCalc
				fAddMemLog("Base de calculo Periculosidade : " +  Transform(nPeric_b,"@E 999,999,999.99") ,1,1)
			EndIf
		ElseIf cBCalPer $ "1/3/4/5"   
	   		nPeric_b 	:= ( SalMes_Per / nHorasMes) * nHrsPeri
			SalHora_per := nPeric_b / nHrsPeri
			nIntHoras	:= nHrsPeri
			If __lMemCalc
				fAddMemLog("Base de calculo Periculosidade = (salario / Horas Mes) * Horas Periculosidade : " +  Transform(nPeric_b,"@E 999,999,999.99") ,1,1)
			EndIf
	    EndIf
	
		If lCalcPeric
			EXECBLOCK("CALCPERIC",.F.,.F.)
		EndIf 
		
		nHPeric := nHrsPeri
		
		nPeric := ( nPeric_b * nPerc_Peri ) / 100
		If __lMemCalc
			fAddMemLog("Resultado (base Periculosidade * Percentual Periculosidade) : " +  Transform(nPeric,"@E 999,999,999.99") ,1,1)
		EndIf
				
		If int(SalHora_Per) > 0 // Nao gravar o numero de horas, caso salhora seja zero.
	  		nHPeric :=  nPeric_b / SalHora_Per
			nHoraPer	:= nPeric / SalHora_Per
		EndIf           
		
		If !(cTipoRot == "4" .And. P_DIASRES == 1 .And. nDiasC != 30 .And. SRA->RA_CATFUNC == "H")
			nIntPercul :=  Round(((SalHora_Per * nIntHoras) * nPerc_Peri) / 100, 2)
		Else
			nIntPercul :=  Round(((nPeric_b - SalMes_Per + Salario) * nPerc_Peri) / 100, 2)
		EndIf
		//Periculosidade para horista - na rescisao sempre deve ser sob o salario base para ferias e 13o
		If SalRes_Per > 0
			nIntResPer :=  Round( ( ((SalRes_Per/nHrsPeri) * nIntHoras) * nPerc_Peri) / 100, 2)
			If __lMemCalc
				fAddMemLog("Periculosidade para horista - na rescisao sempre deve ser sob o salario base para ferias e 13o" ,1,1)
				fAddMemLog("Resultado (salario rescisao / horas periculosidade) *  horas periculosidade * Percentual " +  Transform(nIntResPer,"@E 999,999,999.99") ,1,1)
			EndIf
		EndIf
		
		If nPeric > 0   
			//Para Ferias, 13.Salario ou Folha no caso de férias o mês todo, nao gravar a verba, apenas atualizar o salmes caso incorpore salario.
			 If aPdv[nPosv,18] == "S" .And. ;
			 ( cTipoRot $ "2*3*5*6"  .Or. (cTipoRot == "1" .And. cSitFolh == "F" .And. DiasTrab + nDiasPg == 0) )
			 	 IncorpSal(nPeric)
				 If __lMemCalc
				 	fAddMemLog("Valor da periculosidade incorporado no salário, verba não será gerada" ,1,1)
				 EndIf
			ElseIf cTipoRot == "2" .and. aPdv[nPosv,18] != "S"//Não considera no adiantamento se não incorporar
				nPeric := 0
				If __lMemCalc
					fAddMemLog("Verba de periculosidade nao configurada para incorporar salário, verba não será gerada e/ou incorporada" ,1,1)
				EndIf
			EndIf
		
			If nPeric > 0 .and. nPosv > 0 .and. fGetTipoRot(GETROTEXEC()) == "G"
				FMatriz(cCodPd,nPeric, , , ,'V', , , , ,.T.,,,,,,,,,,,,,lIncorp080)
			EndIf
			
			If lPerAdiBas //.And. aPdv[nPosv,18] != "S"
				// Quando os adicionais são calculados sobre salario + verbas, o adicional não deve incorporar ao salário.
				fGeraVerba(cCodPd,nPeric, nHPeric,,,,,,,,,,,,,.F.,,,,,,.F.)
				nIntPercul := nPeric := Salario * (nPerc_Peri / 100)
			EndIf 

			If cTipoRot == "1" .And. cBCalPer $ "1*2*6*7*8" .And. nDiasMat > 0 .And. cSitFolh != "F" 
				If DiasTrab > 0 .and. nDiasMat >= nDiasAfas
					fGeraVerba(cCodPd,Round((nPeric / nDiasC) * DiasTrab,2), Round((nHPeric / nDiasC ) * DiasTrab,2))
				ElseIf DiasTrab > 0 .or. nDaPaPg > nDiasMat
					If ( DiasTrab > 0 .and. nDiasAfas == nDiasMat ) .or. nDaPaPg > nDiasMat
						fGeraVerba(cCodPd,Round((nPeric / nDiasC) * ( DiasTrab + nDiasAfas - nDiasMat - nDPrgSalMa ) ,2), Round((nHPeric / nDiasC ) * ( DiasTrab + nDiasAfas - nDiasMat - nDPrgSalMa ),2))
					ElseIf cBCalPer $ "2*6*7*8"
						//Subtrai nDiasPg
						nDiasPAux := nDiasPg
						nDiasPg := nDiasPg - ( nDiasPg - nDiasMat + nDiasAfPag ) //Subtrai os dias de afastamento que não devem incidir no cálculo
						fGeraVerba(cCodPd, nPeric, nDiasC,,,,,,,,,,,,,If(cTipoRot=="4",!("2" $ P_ADCINTEG),SRA->RA_TPCONTR<>"3"))
						nDiasPg := nDiasPAux
					EndIf
				EndIf
			EndIf
		
			nOrdGrPd++
			If ( nPosSB := aScan(aSalBase, { |X| X[1] == cCodPd } ) ) == 0
				aAdd(aSalBase,{cCodPd + "*" + aCodFol[1301,1] + "*" + aCodFol[1303,1],nPeric_b,nOrdGrPd})
			Else
				aSalBase[nPosSB,2] := nPeric_b
				aSalBase[nPosSB,3] := nOrdGrPd
			EndIf
		EndIf
		If lPerAdiBas
			nIntPercul := Salario * (nPerc_Peri / 100)
		EndIf
		nHoraPer := nHPeric	
		
	EndIf
EndIf

If cTipoRot == "4" .And. aIncRes[15] == "N" .And. aIncRes[2] <> "T"
	nPeric := 0
EndIf

If !lPerins
	FPerIns() //Compara Insalubridade x Periculosidade e considera maior valor
EndIf

Return( Nil )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fBuscaRG4 ³ Autor ³ Leandro Drumond       ³ Data ³ 11.06.14³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao para buscar historico do campo na RG4               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fBuscaRG4(cCampo,dData,lPerData,lInicPad,lConverte)
Local cRet		:= ""
Local cKeyRG4	:= xFilial("RG4") + SRA->RA_SINDICA + "2" + Padr(cCampo,10)
Local cTipo		:= ""

DEFAULT lPerData  := .F. //Pesquisa pelo mes/ano da data passada no parametro
DEFAULT lInicPad  := .F. //Inicializa campo com conteúdo atual - Utilizado nas fórmulas
DEFAULT lConverte := .F. //Converte cRet conforme o tipo do campo na tabela RCE.	

If lInicPad
	cRet		:= &("RCE->"+cCampo)
EndIf

If lConverte
	cTipo		:= valtype(&("RCE->"+cCampo))
EndIf

DbSelectArea("RG4")
DbSetOrder(RetOrder("RG4","RG4_FILIAL+RG4_CODIGO+RG4_TIPO+RG4_CAMPO+DtoS(RG4_DATA)"))

If DbSeek(cKeyRG4)
	While RG4->(!Eof() .and. RG4_FILIAL + RG4_CODIGO + RG4_TIPO + RG4_CAMPO == cKeyRG4)
		If (RG4_DATA > dData )
			cRet := AllTrim(RG4_CONTEU)
			If lConverte .And. cTipo <> "C"
				If cTipo == "N"
					cRet := val(cRet)
				ElseIf cTipo == "D"
					cRet := CTOD(cRet)
				EndIf
			EndIf
			If AnoMes(RG4_DATA) > AnoMes(dData) 
				Exit
			EndIf
		EndIf
		RG4->(DbSkip())
	EndDo
EndIf

Return cRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ Sal_MinEst ³ Autor ³ Flavio Correa        ³ Data ³ 11.05.16³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Minimo estadual                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Sal_MinEst(cAnoMes,cUf)
	
Local cTab		:= "S118"
Local nPosTab	:= 0
Local nSalEst	:= 0

nPosTab := fPosTab( cTab,cAnoMes,">=",4,cAnoMes,"<=",5,,,,,,cUf,"==",6)

If nPosTab > 0
	nSalEst := fTabela(cTab,nPosTab,7)
Else
	Set Device To Screen
	If GetRemoteType() == -1
		MsgLogGrid( Ap5GetHelp(STR0046), .F. ) // "Tabela de Salário Minimo estadual (Tabela S118) não cadastrada."
	Else
		If IsInCallStack( "EXECROT" ) //Se estiver executando roteiro de calculo
			AddLogExecRot( STR0046 )	// "Tabela de Salário Minimo estadual (Tabela S118) não cadastrada."
		Else 
			Help(" ",1,STR0046)
		EndIf		
	EndIf
	Return ( 0 )
EndIf

Return nSalEst

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ RHmdtPeri  ³ Autor ³ Flavio Correa        ³ Data ³ 11.05.16³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Busca periculosidade SIGAMDT                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function RHmdtPeri(nTipo,lDis)
Local aArea			:=  GetArea()
Local aAreaSRA		:=  SRA->(GetArea())
Local aMdt 			:= {}
Local cDepto		:= ""
Local cCC			:= ""
Local cFunc			:= ""
Local cDescricao	:= ""
Local nValor 		:= 0

DEFAULT lDis := .F.

If lDis
	fBuscaCC(dDataAte, @cCC, @cDescricao, dDataAte, .F. , .T. )
	fBuscaFunc(dDataAte,@cFunc, @cDescricao )
	fBuscaDepto(dDataAte, @cDepto, @cDescricao, dDataAte, .F. , .T. )
	aMdt := MDTRiscPerc(SRA->RA_MAT,dDataAte,cCC,Alltrim(cFunc),cDepto,SRA->RA_FILIAL) // função da NG
Else
	aMdt := MDTRiscPerc(SRA->RA_MAT,,SRA->RA_CC,SRA->RA_CODFUNC,SRA->RA_DEPTO,SRA->RA_FILIAL)// função da NG
EndIf

If aMdt[1] == nTipo
	nValor := aMdt[2]
EndIf
RestArea(aAreaSRA)
RestArea(aArea)
Return nValor

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ fCalcAbo ³ Autor ³ Renata                ³ Data ³ 10.08.15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calcula o Abono PPE                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ fCalcAbo(SalMes,Salhora,Saldia,nValRed)                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fCalcAbo(nValRed)
	
	Local cCod	:= space(3)
	Local nRef	:= nPerRed * 0.7
	
	// Não gera o abono para funcionários aposentados
	If SRA->RA_AFASFGT $ "U1*U3" .Or. SRA->RA_EAPOSEN == "1"
		Return
	EndIf
	
	Private nVlrAbon := 0
	
	If Len(aCodFol) > 1396
		cCod := aCodfol[1398,1]
	EndIf
	
	If nValRed > 0 .And. !Empty(cCod)
		
		nTetoPPE := If( Type("nTetoPPE" ) == "U", 0, nTetoPPE)
		nVlrAbon :=  Min( nValRed * 0.7, nTetoPPE) 
		
		If nVlrAbon > 0 
			fGeraVerba(cCod,nVlrAbon,nRef)
		EndIf
		
	Endif
	
Return

/*-------------------------*/
Function fChkInsGes(cCodInsGes, nDiasGest, lMesTodo)
Local lRefTrab	 := FindFunction("fRefTrab") .And. fRefTrab("I")
Local lRet := .T. 
Local lAtivo  := .F. //indica se ha periodo de gestacao valido
Local aPerAtual := {}
Local aArea := GetArea()

Default cCodInsGes := ""

	If lRefTrab .AND. (SRA->RA_SEXO == 'F')
		cCodInsGes := FGETCODFOL('1423')
		If Empty(cCodInsGes)
			lAtivo := .F. //nao possui verba cadastrada
		Else
			fPerAtual( @aPerAtual , fGetCalcRot('1') ) 
			DbSelectArea("SGZ")
			SGZ->(DbSetOrder(1))
			SGZ->(DbSeek(SRA->(RA_FILIAL+RA_MAT)))
			While SGZ->(!Eof()) .AND. SGZ->(GZ_FILIAL+GZ_MAT) == SRA->(RA_FILIAL+RA_MAT)
				If (SGZ->GZ_DATAINI <= aPerAtual[1,6]) .AND. (Empty(SGZ->GZ_DATAFIM) .OR. (SGZ->GZ_DATAFIM >= aPerAtual[1,7]))
					lMesTodo := .T.
					lAtivo := .T.
				ElseIf (SGZ->GZ_DATAINI > aPerAtual[1,6]) .AND. (Empty(SGZ->GZ_DATAFIM) .OR. (SGZ->GZ_DATAFIM >= aPerAtual[1,7]))
					lMesTodo := .F.
					lAtivo := .T. 
					nDiasGest := DateDiffDay( If(Day(aPerAtual[1,7])==31,aPerAtual[1,7],aPerAtual[1,7]+1), (SGZ->GZ_DATAINI) )
				ElseIf (SGZ->GZ_DATAINI < aPerAtual[1,6]) .AND. (Empty(SGZ->GZ_DATAFIM) .OR. ((SGZ->GZ_DATAFIM > aPerAtual[1,6]) .AND. (SGZ->GZ_DATAFIM < aPerAtual[1,7])))
					lMesTodo := .F.
					lAtivo := .T.
					nDiasGest := DateDiffDay( If(Day(aPerAtual[1,6])==31,aPerAtual[1,7],aPerAtual[1,7]+1), (SGZ->GZ_DATAFIM)) 
				ElseIf (SGZ->GZ_DATAINI >= aPerAtual[1,6]) .AND. (SGZ->GZ_DATAFIM < aPerAtual[1,7])
					lMesTodo := .F.
					lAtivo := .T.
					nDiasGest := DateDiffDay( (SGZ->GZ_DATAFIM)+1, (SGZ->GZ_DATAINI))
				EndIf 
				SGZ->(DbSkip())
			EndDo
			SGZ->(DbCloseArea())
		EndIf
	EndIf
	If !lAtivo
		cCodInsGes := "" //limpa verba pois nao tem periodo valido
		nDiasGest := 0
	EndIf

RestArea(aArea)

Return lRet

/*/{Protheus.doc} fMedATS
	CAlcula a base de ATS sobre médias
@author Leandro Drumond
@since 21/11/2018
@version P12.1.17
@return Total de médias com incidência para ATS
/*/
Static Function fMedATS(nMedATS,cTipMed,cTipTot)
Local aPerFOL	:= {}
Local nMedATSM	:= 0
Local lProp     := .F.

DEFAULT cTipTot := '99MD'

If ( cTipoRot == "5" )
    DREFMED := APERGUNTE[7,3]
Else
    If ( P_CCOMP13 == 'S' .AND. lCalcFol .AND. Month(dDataAte) == 12 )
        DREFMED := dDataAte
    EndIf

    If ( !lCalcFol ) .and. cTipoRot <> '3'
		DREFMED := aPergunte[3,3]
    EndIf
EndIf

If cTipoRot == "3" .and. ;
	 (( RetValSRV(aCodFol[75,1],SRA->RA_FILIAL,"RV_ADICTS") == "S" .OR. RetValSRV(aCodFol[82,1],SRA->RA_FILIAL,"RV_ADICTS") == "S" ) .Or.;
	 	( RetValSRV(aCodFol[75,1],SRA->RA_FILIAL,"RV_PERICUL") == "S" .OR. RetValSRV(aCodFol[82,1],SRA->RA_FILIAL,"RV_PERICUL") == "S" ))
	If P_DTMDFER == "1"
		FGetPerAtual(@aPerFOL,xFilial( "RCH",SRA->RA_FILIAL),SRA->RA_PROCES,fGetCalcRot("1"))
	EndIf
	If !lCalcFol
		If MesAno(GetMemVar("RH_DATAINI")) <= MesAno(GetMemVar("RH_DBASEAT"))
			lProp := .T.
		ElseIf P_DTMDFER == "1"
			If Len(aPerFOL) > 0 .And. MesAno(GetMemVar("RH_DBASEAT")) == MesAno(aPerFOL[1][6])
				lProp := .T.
			EndIf
		EndIf
		GPEXMED(GETMEMVAR("RH_DATABAS") ,CTOD("") ,GETMEMVAR("RH_DATAINI"), CTOD("") , IF(P_DTMDFER=="2",GETMEMVAR("RH_DATAINI"),IF(LEN(APERFOL)>0,APERFOL[1][6],GETMEMVAR("RH_DATAINI"))) , SALHORA , VAL_SALMIN , ACODFOL , LMESATU,.T.,.F.)
	Else
		If MesAno(SRH->RH_DATAINI) <= MesAno(SRH->RH_DBASEAT)
			lProp := .T.
		ElseIf P_DTMDFER == "1"
			If Len(aPerFOL) > 0 .And. MesAno(SRH->RH_DBASEAT) == MesAno(aPerFOL[1][6])
				lProp := .T.
			EndIf
		EndIf
		GPEXMED(SRH->RH_DATABAS, CTOD("//"), SRH->RH_DATAINI, CTOD("//"), IF(P_DTMDFER=="2" .AND. !LMEDMP927,SRH->RH_DATAINI,IF(LEN(APERFOL)>0,APERFOL[1][6],SRH->RH_DATAINI)), SALHORA, VAL_SALMIN, ACODFOL, IF(SRH->RH_MEDATU == 'S', .T. , .F. ), .T., .F.)
	EndIf

	//Média férias valor
	If RetValSRV(aCodFol[75,1],SRA->RA_FILIAL,"RV_ADICTS") == "S" .Or.  RetValSRV(aCodFol[75,1],SRA->RA_FILIAL,"RV_PERICUL") == "S"
		If lProp
			If (cTBLXMED)->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+"2"+"999"+If(cMedDir == "S", "9799", "97MD")))
				nMedATS += (cTBLXMED)->RP_VALATU
			EndIf
		Else
			If (cTBLXMED)->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+"1"+"999"+"97MD"))   // Outros Adic.
				nMedATS += (cTBLXMED)->RP_VALATU
			EndIf
		EndIf
	EndIf

	//Média férias horas
	If RetValSRV(aCodFol[82,1],SRA->RA_FILIAL,"RV_ADICTS") == "S" .Or.  RetValSRV(aCodFol[82,1],SRA->RA_FILIAL,"RV_PERICUL") == "S"
		If lProp
			If (cTBLXMED)->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+"2"+"999"+"9899"))
				nMedATS += (cTBLXMED)->RP_VALATU
			EndIf
		Else
			If (cTBLXMED)->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+"1"+"999"+"9899"))   // Outros Adic.
				nMedATS += (cTBLXMED)->RP_VALATU
			EndIf
		EndIf
	EndIf

	(cTBLXMED)->(DbCloseArea())
Else
	fMedia13()

	If (cTBLXMED)->(dbSeek(SRA->RA_FILIAL+SRA->RA_MAT+cTipMed))
		While (cTBLXMED)->(!Eof() .And. SRA->RA_FILIAL+SRA->RA_MAT+cTipMed == (cTBLXMED)->RP_FILIAL+(cTBLXMED)->RP_MAT+(cTBLXMED)->RP_TIPO)
			If (cTBLXMED)->RP_PD > "900"
				(cTBLXMED)->(dbSkip())
				Loop
			EndIf
			// Verifica se e o registro de total de medias
			If (cTBLXMED)->RP_DATARQ = cTipTot
				// Verifica Incidencia Para ATS
				If RetValSRV((cTBLXMED)->RP_PD,SRA->RA_FILIAL,"RV_ADICTS") == "S"
					nMedATS += (cTBLXMED)->RP_VALATU
					nMedATSM += (cTBLXMED)->RP_VALATU
				EndIf
			EndIf
			(cTBLXMED)->(dbSkip())
		Enddo
		If nMedATSM > 0 
			GRA_TOT(SRA->RA_MAT,cTipMed,"999","8891",0,nMedATSM,nMedATSM,"N",0)
		EndIf
	EndIf

	(cTBLXMED)->(DbCloseArea())

EndIf

Return Nil
/*/{Protheus.doc} fBuscaPeri
	Busca verba de periculosidade de ferias nos acumulados
@author Fernando Guilherme
@since 11/11/2020
@version P12.1.27
@return Hotas para calculo da Periculosidade de ferias
/*/

Static Function fBuscaPeri ()
local nHPeri := 0
aAreaSRD := SRD->(GetArea())

dbSelectArea("SRD")
DbSetOrder(3)
If SRD->( dbSeek( xFilial("SRD") + SRA->RA_MAT + MesAno(dDataAte)))
	While SRD->RD_FILIAL = SRA->RA_FILIAL .And. SRD->RD_MAT = SRA->RA_MAT .And. SRD->RD_PERIODO = MesAno(dDataAte)
		If SRD->RD_PD == aCodFol[1300,1]
			nHPeri:=SRA->RA_PERICUL
		EndIf
		SRD->(DbSkip())
	EndDo
EndIf

RestArea(aAreaSRD)
Return nHPeri


 /*/{Protheus.doc} FPerIns()
	(Compara Insalubridade x Periculosidade e considera maior valor)
	@type  Function
	@author Emerson Grassi Rocha
	@since 09/08/2022
	@version version
	@param param_name, param_type, param_descr
	@return return_var, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/
Static Function FPerIns()
     
	Local aVerbas 	:= {}
	Local nPos 		:= 0
	Local nX		:= 0

	If nPeric > nInsalub .Or. nIntPercul > nIntInsal
		nInsalub := nIntInsal := 0
		aVerbas := {;
			"0037", ;	//INSALUBRIDADE MINIMA
			"0038", ;	//INSALUBRIDADE MEDIA 
			"0039", ;	//INSALUBRIDADE MAXIMA
			"0672", ;	//BS ADIC.INSALUB MES 
			"1282", ;	//INSAL SOBRE VERBAS  	
			"1292", ;	//INSALUBRIDADE 13.SAL	
			"1293", ;	//INSALUBRIDADE 13.SAL	
			"1304", ;	//INSALUBRIDADE FERIAS
			"1305", ;	//INSALUB FERIAS M.S. 
			"1306", ;	//INSALUBRIDADE FERIAS
			"1307", ;	//INSALUBRIDADE FERIAS
			"1320", ;	//INSALUBRIDADE ABONO 
			"1321", ;	//INSALUBRIDADE ABONO 	
			"1322", ;	//INSALUBRIDADE ABONO 	
			"1323", ;	//INSALUBRIDADE ABONO 	
			"1339", ;	//INSALUBRIDADE MATERN	
			"1352", ;	//PRORROGACAO - INSALU
			"1442", ;	//INSAL 13º MATER     	
			"1443", ;	//INSAL 13º S VERBA MA	
			"1645", ;	//INS 13 SAL MAT 1P   	
			"1646", ;	//INS 13 S. VBS MAT 1P	
			"1692", ;	//INSAL FER INDENIZ   	
			"1693", ;	//INSAL FER PROPPORC  	
			"1694", ;	//INSAL FER S/ AV. PRE	
			"1695", ;	//INSAL AVISO PREVIO  	
			"1696", ;	//INSAL 13 INDENIZ    	
			"1697", ;	//INSAL 13 S/ AV. PREV	
			"1698", ;	//INSAL S/ MED FER IND	
			"1699", ;	//INSAL S/ MED FER PRO	
			"1700", ;	//INSAL MED FER S/ AVI	
			"1701", ;	//INSAL MED S/ AV. PRE	
			"1702", ;	//INSAL MED 13 INDENIZ	
			"1703" ;	//INSAL MED 13 S/ AV.P	
			}
      
	Else
		nPeric := nIntPercul := 0
		aVerbas := {;
			"0036", ;	//	PERICULOSIDADE      	
			"0673", ;	//	BS ADIC.PERICUL.MES			
			"1281", ;	//	PERICUL SOBRE VERBAS	
			"1290", ;	//	PERICULOSIDADE 13.SA	
			"1291", ;	//	PERICULOSIDADE 13.SA	
			"1300", ;	//	PERICULOSIDADE FERIA	
			"1301", ;	//	PERICULOSIDADE FERIA	
			"1302", ;	//	PERICULOSIDADE FERIA	
			"1303", ;	//	PERICULOSIDADE FERIA	
			"1316", ;	//	PERICULOSIDADE ABONO
			"1317", ;	//	PERICULOSIDADE ABONO
			"1318", ;	//	PERICULOSIDADE ABONO
			"1319", ;	//	PERICULOSIDADE ABONO
			"1340", ;	//	PERICULOSIDADE MATER
			"1353", ;	//  PRORROGACAO - PERICU	
			"1440", ;	//	PERIC 13º MATER     	
			"1441", ;	//	PERIC 13º S VERBA MA	
			"1643", ;	//	PERIC 13 SAL MAT 1P 	
			"1644", ;	//	PER 13 S. VBS MAT 1P	
			"1680", ;	//	PERIC FER INDENIZ   	
			"1681", ;	//	PERIC FER PROPORC   	
			"1682", ;	//	PERIC FER S/ AVIS PR	
			"1683", ;	//	PERIC S/ AVISO PREV 	
			"1684", ;	//	PERIC 13 NIDENIZADO 	
			"1685", ;	//	PERIC 13 S/ AVISO PR	
			"1686", ;	//	PERIC MED FER INDENI	
			"1687", ;	//	PERIC S/ MED FER PRO	
			"1688", ;	//	PERIC S/ MED AV. PRE	
			"1689", ;	//	PERIC MED AVISO PREV	
			"1690", ;	//	PERIC MED 13 INDENIZ	
			"1691" ;	//	PERIC MED 13 S/ AV.P	
			}

    EndIf

	//Deletar verba do APD
	For nX := 1 To Len(aVerbas)
		If ( nPos := aScan(aPd,{|x| x[1] == FGetCodFol(aVerbas[nX]) } )) > 0 

			//Verifica se Incorpora Salario e abate valor
			If RetValSRV( aPd[nPos][01], SRA->RA_FILIAL, "RV_INCORP" ) == "S"
				IncorpSal(aPd[nPos][05], , .T.)
			EndIf
		
			aDel(aPd, nPos)	
			aSize(aPd,Len(aPd)-1)
		EndIf
	Next nX
Return 
