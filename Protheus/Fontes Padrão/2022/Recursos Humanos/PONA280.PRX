#INCLUDE "PONA280.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "PROTHEUS.CH"

//Estas  Constantes Fazem Parte do Siga por Default, aqui colocamos apenas para consulta
//#define GD_INSERT	1
//#define GD_UPDATE	2
//#define GD_DELETE	4

//-- Estas Constantes sao utilizadas para fazer refrencia ao array aSvtree
#DEFINE	 G_HEADER  		01//-- 01 aHeader
#DEFINE	 G_ACOLS    	02//-- 02 aCols
#DEFINE	 G_N       		03//-- 03 n
#DEFINE	 G_MAIN    		04//-- 04 Array PRINCIPAL com TODAS as linhas do GetDados
#DEFINE	 G_CLONE_MAIN 	05//-- 05 Array Clone do Principal para Verificar alteracoes no Main ao Sair do Sistema
#DEFINE	 G_ELEM			06//-- 06 Array com Numeros correspondentes as Linhas do ArrayMain
#DEFINE	 G_VIRTUAL		07//-- 07 Array de Campos Virtuais
#DEFINE	 G_ALTER		08//-- 08 Array de Campos NAO ALTERAVEIS
#DEFINE	 G_RECNO		09//-- 09 Array de Numero de Registros Fisicamente Gravados
#DEFINE	 G_CABEC		10//-- 10 Array de Cabec de Todos os Campos do Arquivo segundo o SX3
#DEFINE	 G_CPOS			11//-- 11 Array de Campos do Arquivo
#DEFINE	 G_FIELDS		12//-- 12 Array de Campos Nao Exibiveis
#DEFINE	 G_NUSADO		13//-- 13 nUsado
#DEFINE	 G_NSVUSADO		14//-- 14 nSvUsado OBS: Se o valor desta contastante for alterada, alterar no fonte PONCLAPO
#DEFINE	 G_NCNT			15//-- 15 nCnt
#DEFINE	 G_BRANCOFIELD	16//-- 16 Array com Campos Que podem Ficar Vazios
#DEFINE	 G_CLONE_ACOLS  17//-- 17 Array com Copia do aCols ao Carrega-lo. Importante para ser utilizado para compararmos
                              //--    conteudo original com o corrente.
#DEFINE	 G_CLONE_RECNO  18//-- 18 Array com Copia do aRecno ao Carrega-lo. Importante para ser utilizado para compararmos
                			  //--    conteudo original com o corrente.

#DEFINE G_MARC         01// MARCACOES
#DEFINE G_APO          02// APONTAMENTOS
#DEFINE G_ABO          03// ABONOS

#DEFINE G_MARCREG      01// Posicao do no. do registro no array aRecno de MARCACOES
#DEFINE G_APOREG       04// Posicao do no. do registro no array aRecno de APONTAMENTOS
#DEFINE G_ABOREG       03// Posicao do no. do registro no array aRecno de ABONOS

//-- Estas constantes sao Utilizadas pela Funcao fMuda()
#DEFINE CARREGA		.T.
#DEFINE DESCARREGA	.F.

Static lRF0ChkTable
Static lPna280Bar	:= ExistBlock( "PNA280BAR" )
Static lPna280Div	:= ExistBlock( "PNA280DIV" )
Static lPna280Pos	:= ExistBlock( "PNA280POS" )
Static lPnaGrv 		:= ExistBlock( "PNA280GRV" )
Static lPnopcx		:= ExistBlock( "PONOPCX3" )
Static lPnaApoSrc   := ExistBlock( "PNAPOSPC" )
Static lPna280Lin	:= ExistBlock( "PNA280LIN" )
Static __lCpoDataAlt
Static __lCpoUsuaAlt
Static __lChkTnoOpc
Static lValidDel    := .T.
Static lPort1510 	:= Port1510() 	//Verifica se Portaria 1510/2009 esta em vigor.
Static lIncluir		:= .F.
Static lCpoCCT

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PONA280   ºAutor  ³Microsiga           º Data ³ 03/05/2002  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Manutencao Integrada de Lancamentos Por C.Custo            º±±
±±º          ³ (Marcacoes / Apontamentos e Abonos)                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP7                                                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º             ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.         º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºProgramador ³ Data   ³ BOPS ³  Motivo da Alteracao                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±³Leandro Dr. ³13/04/14³      ³Retirada de ajustes, database e FieldPos  ³±±
±±³            ³        ³      ³que nao serao utilizados na P12.		  ³±±
±±³Luis Artuso ³24/11/14³TQZAFC³Ajuste para corrigir errorlog ao reapontar³±±
±±³			   ³		³	   ³marcacoes em periodo de afastamento. 	  ³±±
±±³Luis Artuso ³11/02/15³TRCDC1³Valida abert.arqs.do Fecham.: Pn090Open() ³±±
±±³Luis Artuso ³28/08/15³TTCO30³Ajuste para corrigir duplicidade de apon- ³±±
±±³            ³        ³      ³tamentos.                                 ³±±
±±³Renan Borges³07/12/15³TTTSI7³Correcao de errorlog ao excluir/recuperar ³±±
±±³            ³        ³      ³marcacoes originais.                      ³±±
±±³Matheus M.  ³28/01/16³TUJERC³Realizado criação de botão para reordenar ³±±
±±³            ³        ³      ³marcações.			                      ³±±
±±³Renan Borges³13/05/16³TVEQZX³Ajuste para excluir os registros de forma ³±±
±±³            ³        ³      ³correta.				                  ³±±
±±³Matheus M.  ³12/07/16³TVGUOR³Realizado ajuste para respeitar o filtro  ³±±
±±³            ³        ³      ³do browse ao utilizar o param MV_P280MOV. ³±±
±±³Renan Borges³17/01/17³MRH-  ³Ajuste para lançar e apontar marcações cor³±±
±±³            ³        ³3465  ³retamente quando for alterada a regra de  ³±±
±±³            ³        ³      ³apontamento do funcionário, de saida para ³±±
±±³            ³        ³      ³entrada.                                  ³±±
±±³Isabel N.   ³13/04/17³DRHPONTP³Ajuste na Pn280LoadList() p/apontar p/o ³±±
±±³            ³        ³-48     ³array original e carregar as imagens das³±±
±±³            ³        ³        ³divergências no momento certo.          ³±±
±±³Renan Borges³07/06/17³DRHPON³Ajuste para que quando haja alteração de  ³±±
±±³            ³        ³TP-914³marcações e seja alterado de funcionário, ³±±
±±³            ³        ³/975  ³as marcações não sejam transportadas para ³±±
±±³            ³        ³      ³a matricula atual.                        ³±±
±±ÈÍÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
											D O C U M E N T A C A O
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
Programa: Pona280
Objetivo: Manutencao de Marcacoes, Apontamentos e Abonos
Descricao: O programa proposto permite a manutencao dos arquivos, descritos acima, como se fosse uma
planilha do Excel. Lemos uma vez os arquivos e a partir dai trabalhamos com arrays. Ao final do programa,
salvamos ou nao a manutencao em disco. Como o usuario escolhe o dia desejado, temos que carregar as marcacoes
e apontamentos respectivos. As alteracoes realizadas devem ser refletidas no array principal aArrayMain apos
as validacoes necessarias. Somente os aArrays principais de cada manutencao serao gravados.
As funcoes fconfMarc,fConfApo e fConfAbo sao responsaveis pela carga inicial. Elas irao acionar as  funcoes
P280MarcCols,P280ApoCols e P280AboCols que leem os respectivos arquivos e carregam em arrays Main.
Quando o usuario escolhe uma data, as funcoes P280MarcGet, P280ApoGet e P280AboGet gerenciam a troca
de dados entre os arrays aArrayMain e aCols, carregando e descarregandos as informacoes do dia escolhido.


// Arrays Fixos
Aheaders -- Nomes das colunas do aCols
aVirtual -- Campos Virtuais
aField  -- Campos que Nao devem ser mostrados
aAlter   -- No  inicio da manutencao: Campos que Nao devem ser alterados. A funcao P280Head altera o conteudo original para campos
            que podem ser alterados, ficando assim ate o final da manutencao
aBrancoFields -- Campos que podem ser deixados vazios.

aCabec   -- SX3 do Alias
aCpos    -- Todos Campos do Alias

// Arrays Disco
aArrayClone  -- Linhas de dados correspondentes ao conteudo em disco
aRecno       -- Identificacao das linhas de dados em disco.Obrigatoriamente conte o numero do registro,
                mas pode ter informacoes adicionais como chaves de pesquisa.

// Arrays Manutencao
* Gerais
  aArrayMain-- Contem as linhas de dados de todos os dias.

* Dia
  aCols     -- Linhas de Dados do dia corrente, sofre delecoes,alteracoes e inclusoes
  aElem     -- Contem os identificadores das linhas de aArrayMain. Esse array eh utilizado
               para atualizacao dos dados em aArrayMain. Sempre que transferirmos um elemento do
               aArrayMain para o aCols, devemos incluir um elemento com a linha corespondente.

  aColsAnt  -- Copia das Linhas de Dados antes da primeira alteracao de cada dia. Utilizada
               para recuperar informacoes originais do dia sem a necessidade de carregar os dados
               do aArrayMain.Possui o mesmo conteudo da variavel a???Static  nas funcoes P280????Get
               no entanto podemos ter acesso as informacoes e qualquer chamada de funcoes.
               Importante: Somente deve ser atualizada qdo o conteudo do aCols for inicializado
               para cada dia carregado. Sobre esse aspecto ela difere da a???Static.

A) APONTAMENTO
   No apontamento, obtemos os aArrayMains "atualizados" das marcacoes e dos abonos,
   apontamos e procuramos no aArrayMain de Apontamentos a chave data+codigo+tipo de marcacao+C.C.
   Se encontrarmos, substituimos o conteudo gerado pelo anterior para no caso, por exemplo, de
   termos algum abono relacionado reestabelecermos esta ligacao.
   IMPORTANTE: As alteracoes nos abonos em decorrencia de mundanca de apontamento somente
   sera consolidadas na perda de foco para outro objeto, excecao feita a tela de abonos.
B) ABONOS
   Para utilizarmos a funcao fAbonos com a leitura de abonos na memoria, necessitamos informar
   um bloco de codigo exportador da matriz/variavel (bAboCols) que contem os abonos a serem
   consultados ao inves de ler um arquivo(ex.SPK).
   IMPORTANTE: As informacoes relacionadas ao respectivo apontamento somente refletirao nos
   abonos qdo o apontamento perder o foco.

ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
	Uso da Nova GetDados (aHeader e aCols internos) com funcoes compartilhadas com  a Antiga GetDados
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
	aHeader,aCols e n privates)

	NOVAS PROPRIEDADES
	Os arrays aHeader e aCols passam a ser propriedades do objeto Get. Pode-se recuperar seu conteudo
	como fazemos com outras propriedades. Ex. aCols:=oGet:aCols

	Variável "n"
	A variável não é atualizada pela GetDados, na verdade deixa de existir. Temos que recuperar o con
	teudo do oGet:nAt (Estranhamente temos tambem, oGet:oBrowse:nAt). Abaixo explico como podemos
	atualiza-lo.

	LINHAOK TUDOOK e outras funções
	Todas as funcoes (como LinhaOK e TudoOk) chamadas a partir do objeto poderao fazer referencia as
	variaveis aCols e aHeader, pois a MsNewGetDados as cria como Private.


	TRATAMENTO DO AHEADER e ACOLS
	aHeader --> Existe um tratamento interno que inviabiliza a sobreposisao de seu conteudo apos a
	criacao do objeto.
	aCols  --> ultima coluna destinada a Delecao da Linha passa a ser obrigatoria (costumamos  nao
	inclui-la qdo a opcao de manutencao eh visualizacao ou exclusao).

	Para utilizarmos simultanamente com as funcoes criadas para a antiga GetDados,temos que recuperar
	os valores das propriedades correspondentes do NewGetDados. Lembre-se que isso se faz necessario
	somente se chamamos essas funcoes independente do GetDados. A variavel "n" deixa de ser atualiza
	da pelo objeto o que nos obriga a recuperar o conteudo de oGet:nAT /oGet:obrowse:nAT.
	Resumindo: Se alteramos o conteudo de aCols e "n" temos que atualizar as propridades oGet:aCols e
	oGet:nAt. O mesmo nao se aplica a oGet:aHeader. Para novas implementacoes evite utilizar essas
	variaveis e passe a consultar as propriedades citadas.


	NOVA PROPRIEDADE STYLE
	Essa nova propriedade, passada via parrametro, substitui a passagem da variavel nOpcx.

	0 --> Coloque zero qdo a opcao de manutencao for exclusao.
	GD_INSERT + GD_INSERT + GD_DELETE --> Utilize a soma das opcoes disponiveis para criar a flexibi
	lidade que voce deseja dar ao Getdados.

	 SINTAXE da Nova GetDados:
	 MsNewGetDados(nTop, nLeft, nBottom, nRight, nStyle, uLinhaOk, uTudoOk, cIniCpos, aAlter, nFreeze, nMax, cFieldOk, uSuperDel, uDelOk, oWnd, aParHeader, aParCols)


	Parametros:

	  nStyle -> GD_INSERT
	            GD_UPDATE
	            GD_DELETE
	  aParHeader -> aHeader
	  aParCols -> aCols


	Propriedades:
	  <objeto>:aHeader
	  <objeto>:aCols
	  <objeto>:nAt

ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
*** Fim Documentacao
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Pona280   ³ Autor ³ Mauricio MR          ³ Data ³ 03/05/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Rotina Inicial                       					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA280(cChamada)                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³ Pona280                                      			  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PONA280()

Private aFldRot 	:= {'RA_NOME', 'RA_ADMISSA'}
Private aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T. , .F.}) //[1] Acesso; [2]Ofusca
Private aFldOfusca 	:= {}

//Se Portaria estiver ativada, verifica se base esta OK
If lPort1510
	If !fVerBasePort()
		Return
	EndIf
EndIf

// - Valida se o usuário tem acesso
If !BloqPer()

	NewPONA280("PONA280")

EndIf

Return(Nil)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Pona280   ³ Autor ³ Mauricio MR          ³ Data ³ 03/05/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Rotina Inicial                       					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PONA280(cChamada)                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³ Pona280                                      			  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function NewPONA280(cChamada)

//-- Posicionamento das Areas e Pesquisa
Local aArea			:= GetArea()
Local aAreaSP8		:= {}
Local aAreaSPG		:= {}
Local aCodigos		:= {}
Local bParametros	:= {||Nil}
Local oBrwSRA

Local dPerIniPar	:= Ctod("//")
Local dPerFimPar	:= Ctod("//")

//-- Posicionamento em Array
Local nPos			:= 0

//-- Altera o modulo para uso do modulo "SIGAAPON"
If nModulo == 75
   cModulo := 'PON'
   nModulo := 16
Endif

Private bFiltraBrw	:= { || NIL }
Private cProg		:= IF( cChamada == NIL , FunName() , cChamada )


Private dPerIni     := Ctod("//")
Private dPerFim     := Ctod("//")

Private lPona240	:= fContemStr( cProg , "PONA240" , .T. )
Private lPona190 	:= fContemStr( cProg , "PONA190" , .T. )
Private lPona280 	:= .T.

Private cFilSPA 	:= IF(Len(AllTrim(xFilial("SPA"))) < FwGetTamFilial,xFilial("SPA"),SRA->RA_FILIAL)
Private cCod036N	:= ''
Private cEvesNoDele := ''

Private cPerAponta	:= ""
Private cCadastro	:= ""
Private cApoCla		:= ""
Private lMovimenta	:= .F.
Private nOpcxAnt	:= 0
Private aTabPadrao  := {}          	//-- Tabela Padrao de Horarios
Private nLinAnt  := 1

Private lP8PGIniCa	:= .T.

Private cAcessaSRA

//Data da marcacao "pendente"
Private dDataPend

Private lFirTim := .T.
Private _lGrava			:= .T.
DEFAULT lPna280Bar		:= ExistBlock( "PNA280BAR" )
DEFAULT lPna280POS		:= ExistBlock( "PNA280POS" )
DEFAULT __lCpoDataAlt	:= IF(lPort1510, .T., ( IF( ( ( SP8->(FIELDPOS( "P8_DATAALT" )) != 0 ) .and. ( SPG->(FIELDPOS( "PG_DATAALT" )) != 0 ) .and. ( SuperGetMv("MV_PONLOG",NIL,"N") == "S" ) ) ,.T. , .F. ) ) ) //Mantido fieldpos pois no momento só existe para o Brasil - P12
DEFAULT __lCpoUsuaAlt	:= IF(lPort1510, .T., ( IF( ( ( SP8->(FIELDPOS( "P8_USUARIO" )) != 0 ) .and. ( SPG->(FIELDPOS( "PG_USUARIO" )) != 0 ) .and. ( SuperGetMv("MV_PONLOG",NIL,"N") == "S" ) ) ,.T. , .F. ) ) ) //Mantido fieldpos pois no momento só existe para o Brasil - P12

DEFAULT __lChkTnoOpc	:= ( SuperGetMv("MV_TNOOPC",NIL,"N") == "S" )

//-- Carrega Identificadores de Codigos para a Filial
IF !fCargaId(@aCodigos,cFilAnt)
	Return( NIL )
EndIF

//-- Evento de DSR Ultima Semana Periodo Anterior
IF (nPos := aScan(aCodigos,{|x|x[2]== "036N" })) > 0
   cCod036N := aCodigos[nPos,1]
EndIF

//Obtem os Eventos que nao podem ser Deletados do Resultado pois pertencem ao Periodo Anterior
cEvesNoDele := ObtemEveNoDele( aCodigos )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³So executa se o Modo de Acesso do SPB e SRA foram iguais e se este  ulti³
³mo nao estiver vazio e Se o Periodo Estiver em Aberto.                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF (;
		ValidArqPon();
		.and.;
		ChkVazio("SRA");
		.and.;
		CheckPonMes(@dPerIni,@dPerFim,.F.,.T.,!lPona240);
   	)

	IF !( lPona240 )


		aAreaSP8 := SP8->( GetArea() )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Declara Variaveis que Serao Utilizadas no Apontamento       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		cCadastro   := OemToAnsi( STR0001 ) //"Manuten‡„o das Marca‡”es Por Centro de Custo"
		cApoCla     := SuperGetMV( "MV_APOCLA" , NIL , "S" , cFilAnt )

	Else


		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Declara Variaveis que Serao Utilizadas no Acumulado         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		aAreaSPG := SPG->( GetArea() )
		cCadastro   := OemToAnsi( STR0057  ) //"Manuten‡„o Acumulado de Marca‡”es Por Centro de Custo"

	EndIF

	If lPort1510
		cCadastro += fPortTit() //Complementa titulo da tela com dizeres referente a portaria.
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Movimenta entre os registros da Base		      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	lMovimenta     := ( SuperGetMV( "MV_P280MOV" , NIL , "N" , cFilAnt ) == "S" )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Array contendo as Rotinas a executar do programa      ³
	³ ----------- Elementos contidos por dimensao ------------     ³
	³ 1. Nome a aparecer no cabecalho                              ³
	³ 2. Nome da Rotina associada                                  ³
	³ 3. Usado pela rotina                                         ³
	³ 4. Tipo de Transa‡„o a ser efetuada                          ³
	³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
	³    2 - Simplesmente Mostra os Campos                         ³
	³    3 - Inclui registros no Bancos de Dados                   ³
	³    4 - Altera o registro corrente                            ³
	³    5 - Remove o registro corrente do Banco de Dados          ³
	³    6 - Legenda                                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Private aRotina := MenuDef() // ajuste para versao 9.12 - chamada da funcao MenuDef() que contem aRotina
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa o browse utilizando a funcao BrowseDef                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	 oBrwSRA := BrowseDef()
	 oBrwSRA:Activate()

	IF !lPona240
		RestArea( aAreaSP8 )
	Else
		RestArea( aAreaSPG )
	EndIF

EndIF

RestArea( aArea )

//-- Elimina variaveis Estaticas
Pn280GetEventos()
Pn280Movimenta()

Return( NIL )

/*/{Protheus.doc} BrowseDef()
Definicao do browse.
@author		raquel.andrade
@since		09/06/2020
@version	1.0
@return		oBrwSRA, browse definido
/*/
Static Function BrowseDef()
Local oBrwSRA
Local cFiltraRh		:= ""

	oBrwSRA := FWmBrowse():New()
	oBrwSRA:SetAlias( 'SRA' )
	oBrwSRA:SetDescription(cCadastro)
	GpLegend(oBrwSRA,.T.)

	cFiltraRh	:= CHKRH(FunName(),"SRA","1")
	oBrwSRA:SetFilterDefault(cFiltraRh)

Return oBrwSRA 


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pn280Atu  ³ Autor ³Mauricio MR            ³ Data ³03/05/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280Atu(ExpC1,ExpN1,ExpN2)                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Numero da opcao selecionada                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona130                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pn280Atu(cAlias,nReg,nOpcao)
/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³                       Variavieis LOCAIS                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local aKeys				:= GetKeys()
Local aCposAlteraveis	:= {}
Local  aButtons			:= {}
//-- Variaveis Arquivos/Campos
Local aAreaSRA			:= SRA->( GetArea() )
Local bCond				:= {||Nil}
Local bFiltro			:= {||Nil}

//-- Variaveis Teclas Confirma/Abandona Dialogo (Ctrl+O/Ctrl+X)
Local bSet15			:= { || NIL }
Local bSet24			:= { || NIL }


Local aAjusteMovimenta
Local nOpcA				:= 0

//-- Variaveis Blocos de Operacao do Dialogo
Local bChange			:= { || NIL }
Local bMyChange			:= { || NIL }

//-- Variaveis Objetos do Dialogo
Local oGroup,oSay

//-- Variaveis para Visualizacao de Mensagens Informativas de Processamento
Local cMensagem,cTitulo := ''
Local nX				:= 0
Local nLenX				:= 0

Local aAdicLeg        	:= { {"BPMSEDT1A",OemToAnsi(STR0197)}		,;	//"Divergencia Pendente"
							  {"BPMSEDT3A"	,OemToAnsi(STR0198)}  	 ;	//"Divergencia Analisada"
                            }

Local aObject		:= {}
Local oMat
Local oNome
Local oAdmissao

Local cMatVar
Local cNomeVar
Local dAdmissaoVar
Local dPerIniPar	:= Ctod("//")
Local dPerFimPar	:= Ctod("//")

Local bPrimeiro	:= {|lGrava|( If(lGrava, Pn280GrvFunc(nOpcA, nOpcX), NIL)	, nOpcx:= nOpcxAnt, Pn280Movimenta('_PRIMEIRO'	, @cMatVar, @cNomeVar, @dAdmissaoVar,, bChange), oDLG:Refresh() ) }
Local bAnterior	:= {|lGrava|( If(lGrava, Pn280GrvFunc(nOpcA, nOpcX), NIL)	, nOpcx:= nOpcxAnt, Pn280Movimenta('_ANTERIOR'	, @cMatVar, @cNomeVar, @dAdmissaoVar,, bChange), oDLG:Refresh() ) }
Local bProximo	:= {|lGrava|( If(lGrava, Pn280GrvFunc(nOpcA, nOpcX), NIL)	, nOpcx:= nOpcxAnt, Pn280Movimenta('_PROXIMO'	, @cMatVar, @cNomeVar, @dAdmissaoVar,, bChange), oDLG:Refresh() ) }
Local bUltimo	:= {|lGrava|( If(lGrava, Pn280GrvFunc(nOpcA, nOpcX), NIL)	, nOpcx:= nOpcxAnt, Pn280Movimenta('_ULTIMO'	, @cMatVar, @cNomeVar, @dAdmissaoVar,, bChange), oDLG:Refresh() ) }
Local bFica		:= {||( Pn280Movimenta('_NADA'	  	, @cMatVar, @cNomeVar, @dAdmissaoVar,, bChange), oDLG:Refresh()) }

Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

Local aPesqIdx 		:= {}
Local aPesqOrd		:= {}
Local lSeeAll		:= .T.
Local cPesqOrd
Local cPesqCampo	:= space(40)

Local oBtnPgNext
Local oBtnPgPrev
Local oBntNext
Local oBntPrev
Local oPesqCbx
Local oPesqGet

Local aAdvSize		:= {}
Local aInfoAdvSize	:= {}
Local aObjSize		:= {}
Local aObjCoords	:= {}

Local aAdv1Size		:= {}
Local aInfo1AdvSize	:= {}
Local aObj1Size		:= {}
Local aObj1Coords	:= {}

Local aAdv2Size		:= {}
Local aInfo2AdvSize	:= {}
Local aObj2Size		:= {}
Local aObj2Coords	:= {}

Local aAdv3Size		:= {}
Local aInfo3AdvSize	:= {}
Local aObj3Size		:= {}
Local aObj3Coords	:= {}

Local aAdv4Size		:= {}
Local aInfo4AdvSize	:= {}
Local aObj4Size		:= {}
Local aObj4Coords	:= {}
Local cMsg			:= ""
Local cAviso		:= ""
Local lBloqOk		:= .F.

//-- Bloco Utilizado para Processamento em MsAguarde
bBlocMsg				:={|| NIL }

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³                       Variavieis Privates  GERAIS            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
//-- Variaveis para Divergencias
Private lCalendDiverg := (( SuperGetMv( "MV_DIVMNIN" , NIL , "N" , cFilAnt ) == "S" ) )

//-- Variaveis Objetos do Dialogo
Private oDlg , oDlg1 , oDlg2
Private o1Panel,o2Panel
Private oFont
Private oMarcLinhas,oApoLinhas, oAboLinhas
Private olBox , olBoxSint,o2LBox
Private o1Get, o2Get, o3Get,oGet
Private o1Group1, o2Group1
Private oObjPendente



//-- Botoes da Barra de Ferramentas Principal
Private oBtLeg
Private oBtCon
Private oBtSai
Private oBtCan

//-- Botoes da Barra de Ferramentas da Marcacao
Private oBtMarcDel
Private oBtMarcGer
Private oBtMarcGe1
Private oBtMarcGaL
Private oBtMarcGa1Dia
Private oBtMarcApo
Private oBtMarcRea
Private oBtMarcPrev
Private oBtMarcProx
Private oBtRFE
Private oBtReordMarc

//-- Botoes da Barra de Ferramentas do Apontamento
Private oBtApoDel
Private oBtApoAb

//-- Botoes da Barra de Ferramentas do Abono
Private oBtAboOk
Private oBtAboCan
Private oBtAboDel

//-- Botoes da Barra de Ferramentas dos Tipos de Marcacoes
Private oBtTpOk
Private oBtTpCan

//-- Variaveis Gerais que serao alternados com os arrays/variaveis especificos dos GetDados
Private aHeader			:= Array( 0 )  	//-- Cabecalho do GetDados
Private aCols			:= {}          	//-- Linhas Detalhes do GetDados
Private n      			:= 0          	//-- Linha  Atual do GetDados
Private aArrayMain		:= {}          	//-- Array PRINCIPAL com TODAS as linhas do GetDados
Private aArrayAnt		:= {}          	//-- Copia do aArrayMain para Verificacao de Reapontamento
Private aField			:= {}          	//-- Campos que NAO deverao ser Exibidos no GetDados
Private aBrancoField	:= {}          	//-- Campos que Podem ser Deixados Vazios
Private a210BrancoField	:= {}          	//-- Campos que Podem ser Deixados Vazios (Variavel para compatibilizacao de chamadas de funcoes externas)
Private aArrayClone		:= {}          	//-- Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
Private aElem			:= {}          	//-- Array com Numeros correspondentes as Linhas do ArrayMain
Private aVirtual		:= {}		   	//-- Array de Campos Virtuais
Private aAlter			:= {}          	//-- Array de Campos NAO ALTERAVEIS
Private aRecno			:= {}          	//-- Array de Numero de Registros Fisicamente Gravados
Private aCabec			:= {} 			//-- Array com Cabec (SX3) de Todos os Campos do Arquivo
Private aCpos			:= {}   		//-- Array com Campos Nao Exibiveis

//-- Variaveis Numericas  que serao alternados com os arrays/variaveis especificos dos GetDados
Private nUsado			:= 0
Private nSvUsado		:= 0
Private nCnt	 		:= 0

//-- Variaveis de Gerenciamento de GetDados
Private aSvtree			:= {}          //-- Array Container de GetDados
Private cEstou			:= "1"         //-- Get/Pasta Atual
Private cIndo			:= ""          //-- Get/Pasta Destino

//--Array com Informacoes do Calendario Visualizado
Private aListBox		:= {}          	//-- Datas do Calendario
Private aListSint		:= {}			//-- Datas Sintetizadas do Calendario (Somente 1a.Marcacao)
Private baColunas		:= {||{CALEND_ELEM_BITMAP, CALEND_ELEM_DATA,CALEND_ELEM_DIA_SEMANA}	}	//-- Colunas que comporao o calendario para navegacao de datas
Private aColunas		:= {} //-- Colunas que comporao o calendario para navegacao de datas
Private aListBoxCol		:= {}          	//-- Datas do Calendario para 1 unica ordem



//-- Arrays com informacoes Calendario para Apontamento
Private aTabCalend  	:= {}          	//-- Calendario do Periodo
Private aMarcacoes		:= {}        	//-- Marcacoes do Periodo
Private aResult			:= {}         	//-- Resultado do Apontamento do Periodo
Private aLastApo		:= {}        	//-- Ultimo Resultado do Apontamento

//-- Logicos Gerais
Private lGeraAuto		:= .F.       	//-- Flag Para Geracao de Marcacoes Automaticas

//-- Numericos Gerais
Private nSvnAt			:= 1.00
Private nOpcx			:= nOpcao

Private cEveMesA 		:= ""

//-- Variaveis para Tratamento de Abonos em Funcoes Externas
Private lMemoria	:= .T.
Private aAboHeader	:= {}
Private bAboCols	:= {} //-- Variavel utilizada para ler abonos em Memoria
Private nLenRF0		:= 0
Private nPosData	:= 0
Private nPosCodA	:= 0
Private nPosMotA	:= 0
Private nPosHrIn	:= 0
Private nPosHrFm	:= 0
Private nPosHrAb	:= 0
Private nPosFlag	:= 0
Private nPosCODEVE	:= 0
Private nPosCC      := 0
Private nPosTpMarca := 0
Private cEvento		:= ''
Private cTpMarca	:= ''
Private cCCSPC	    := ''
Private dDataSPC	:= Ctod('')
Private lChamadaNIL := .F.
Private aColsAnt	:=	{}
Private aColsRec    := 	{}   //--Array que contem o Recno() dos registros da aCols
Private aRecnoClone := 	{}   //--Array que contem o Recno() dos registros da aArrayMain
Private aRF0Faixa	:=  {}


Private cPrefix		:= ( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" )
Private bSort		:= { |x,y|	DtoS(x[nPosData])			+ ;
									StrZero(x[nPosHrFm],5,2)	+ ;
									StrZero(x[nPosHrAb],5,2)	+ ;
								 	StrZero(x[nPosHrIn],5,2)	< ;
									DtoS(y[nPosData])			+ ;
									StrZero(y[nPosHrFm],5,2)	+ ;
									StrZero(y[nPosHrAb],5,2)	+ ;
									StrZero(y[nPosHrIn],5,2)	  ;
							 }
Private nHrsEve		:= 0

//-- Blocos de Codigos para Carregar/Tratar dados dos GetDados
Private bTrataMarc:={||Nil}
Private bTrataApo :={||Nil}
Private bTrataAbo :={||Nil}
Private bMarcLisT :={||Nil}
Private bApoLisT  :={||Nil}
Private bAboLisT  :={||Nil}

//-- Bloco para Tratar Apontamento das Marcacoes
Private bAponMarc	:= { || NIL }
Private bReAponMarc	:= { || NIL }

//-- Variaveis Resolucao de Tela
Private aAdv33Size		:= {}
Private aInfo33AdvSize	:= {}
Private aObj33Size		:= {}
Private aObj33Coords	:= {}

Private nFatLstBox		:= 0

Private aRecsMarcAutDele	:= {}

Private aAuxHeader
Private aAuxSize
Private lPnaMrc	:= IF (ExistBlock("PNA280MRC"), Execblock("PNA280MRC"), .F.)

DEFAULT lPnaGrv	:= ExistBlock( "PNA280GRV" )
DEFAULT lPnopcx	:= ExistBlock( "PONOPCX3" )

If lIncluir
	nOpcx := 3
	lIncluir :=.F.
Endif

//Quando portaria estiver ativa, acumulado nao podera mais sofrer alteracoes
If lPort1510 .and. lPona240
	nOpcx := 4
EndIf

If !lPona240
	//-- Verifica se foi possivel abrir os arquivos sem exclusividade
	If ! Pn090Open(@cMsg, @cAviso,.T.,DtoS(dPerIni) + DtoS(dPerFim))
		MsgStop( cMsg, cAviso )
		Return (.F.)
	Else
		lBloqOk := .T.
	EndIf
EndIf

//-- Verifica se deve alterar dPerIni e dPerFim para o período de apontamento do funcionário selecionado
//-- e depois valida se a data base está dentro do período de apontamento do funcinário selecionado.
If GetPonMesDat(@dPerIniPar,@dPerFimPar, cFilAnt) .And. dDataBase < dPerIniPar
	If !ValidPonData(dDataBase,"P",dPerIniPar,dPerFimPar,,.T., cFilAnt)
		Return (.F.)
	EndIf
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Ajusta os Objetos de Tela em funcao da Opcao de movimentacao     ³
³ estar ativada (MV_P280MOV = "S").								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If lMovimenta .And. !nOpcx == 3
   aAjusteMovimenta:= {-5,-10,-112,-16,0}
Else
   aAjusteMovimenta:= { 0, 0, -112, 0, 0 }
Endif

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Armazena o valor incial da Opcao de Manutencao das Informacoes   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
nOpcxAnt		:= nOpcao

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta as Dimensoes dos Objetos         					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aAdvSize		:= MsAdvSize()
aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 5 , 5 }
aAdd( aObjCoords , { 000 , 025 , .T. , .F. } )				//1-Cabecalho Dados Funcionario
aAdd( aObjCoords , { 000 , 003 , .T. , .F. } )				//2-Cabecalho Calendario - Marcacao/Apont
aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )				//3-Calendario - Marcacao/Apont

If lMovimenta .And. !nOpcx == 3
	aAdd( aObjCoords , { 000 , 018 , .T. , .F. } )				//4-Rodape - p/ MV_P280MOV='N' espaco vazio - caso 'S' movimenta cad. func
Endif

aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

//Divisao em colunas Linha 1-Cabecalho Dados Funcionario
aAdv1Size		:= aClone(aObjSize[1])
aInfo1AdvSize	:= { aAdv1Size[2] , aAdv1Size[1] , aAdv1Size[4] , aAdv1Size[3] , 5 , 1 }
aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } )			//1-Matricula
aAdd( aObj1Coords , { 000 , 000 , .T. , .T. } )			//2-Nome
aAdd( aObj1Coords , { 040 , 000 , .F. , .T. } )			//3-Admissao
aObj1Size		:= MsObjSize( aInfo1AdvSize , aObj1Coords,,.T. )


//Divisao em colunas Linha 2-Cabecalho Calendario - Marcacao/Apont
aAdv2Size		:= aClone(aObjSize[2])
aInfo2AdvSize	:= { aAdv2Size[2] , aAdv2Size[1] , aAdv2Size[4] , aAdv2Size[3] , 5 , 1 }
aAdd( aObj2Coords , { 160 , 000 , .F. , .T. } )			//1-Cabec Calendario
aAdd( aObj2Coords , { 005 , 000 , .F. , .T. } )			//2-Espacamento coluna do meio
aAdd( aObj2Coords , { 000 , 000 , .T. , .T. } )			//3-Cabec Marcacao/Apont
aObj2Size		:= MsObjSize( aInfo2AdvSize , aObj2Coords,,.T. )

//Divisao em colunas Linha //3-Calendario - Marcacao/Apont
aAdv3Size		:= aClone(aObjSize[3])
aInfo3AdvSize	:= { aAdv3Size[2] , aAdv3Size[1] , aAdv3Size[4] , aAdv3Size[3] , 5 , 1 }
aAdd( aObj3Coords , { 160 , 000 , .F. , .T. , .T. } )		//1-Calendario - ListBox
aAdd( aObj3Coords , { 005 , 000 , .F. , .T. } )			//2-Espacamento coluna do meio
aAdd( aObj3Coords , { 000 , 000 , .T. , .T. } )			//3-Marcacao/Apont
aObj3Size		:= MsObjSize( aInfo3AdvSize , aObj3Coords,,.T. )

//Divisao em linhas da  3-Calendario x Coluna3  Marcacao/Apont
aAdv33Size		:= aClone(aObj3Size[3])
aInfo33AdvSize	:= { aAdv33Size[2] , aAdv33Size[1] , aAdv33Size[4] , aAdv33Size[3] , 1 , 1 }
aAdd( aObj33Coords , { 000 , 015 , .T. , .F. , .T. } )		//1-Panel Marcacoes
aAdd( aObj33Coords , { 000 , 000 , .T. , .T. } )			//2-Marcacoes
aAdd( aObj33Coords , { 000 , 002 , .T. , .F. } )			//3-Espacamento coluna do meio
aAdd( aObj33Coords , { 000 , 015 , .T. , .F. , .T.} )		//4-Panel Apontamentos
aAdd( aObj33Coords , { 000 , 000 , .T. , .T. } )			//5-Marcacao/Apont
aObj33Size		:= MsObjSize( aInfo33AdvSize , aObj33Coords )

If lMovimenta .And. !nOpcx == 3
	//Divisao da 4. linha em 6 colunas
	aAdv4Size		:= aClone(aObjSize[4])
	aInfo4AdvSize	:= { aAdv4Size[2] , aAdv4Size[1] , aAdv4Size[4] , aAdv4Size[3] , 10 , 4 }
	aAdd( aObj4Coords , { 000 , 000 , .T. , .T. } )
	aAdd( aObj4Coords , { 090 , 000 , .F. , .T. } )
	aAdd( aObj4Coords , { 090 , 000 , .F. , .T. } )
	aAdd( aObj4Coords , { 090 , 000 , .F. , .T. } )
	aAdd( aObj4Coords , { 025 , 000 , .F. , .T. } )
	aAdd( aObj4Coords , { 000 , 000 , .T. , .T. } )
	aObj4Size		:= MsObjSize( aInfo4AdvSize , aObj4Coords,,.T. )
EndIf


/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa Bloco de Posionamento de Apontamentos e Marcacoes ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

bChange := {|bBloco|fChange(bBloco)}

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa Varialvel Estatica para Controle de Movimentacao  ³
	³ de Registros de Funcionarios sem Lancamentos				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Pn280Movimenta(,,,, .T.)

Begin Sequence
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem Identificacao do Funcionario				 			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    Pn280LoadIdFunc(@cMatVar, @cNomeVar, @dAdmissaoVar)

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca 	:= FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot) // CAMPOS SEM ACESSO
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0 
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0 
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
		cNomeVar	:= If(lOfuscaNom,Replicate('*',15),cNomeVar)
		dAdmissaoVar:= If(lOfuscaAdm,Replicate('*',10),dAdmissaoVar)
	EndIf

 	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Prepara Ambiente Calendario para o Funcionario 			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pn280PrepCalend()
	   Break
   	Endif

 	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Prepara Ambiente Tela para o Funcionario 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pn280PrepTela()
	   Break
   	Endif

	cPerAponta := ( Dtos( dPerIni ) + Dtos( dPerFim ) )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa as Statics dos Objetos Bmp e Carrega os BitMaps³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn230BitMaps()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Tela de Manutencoes Integradas de Lancamentos         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	SetaPilha()
	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD


    //-- Cria Dialogo
	DEFINE MSDIALOG oDlg TITLE cCadastro From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL

	@ aObj1Size[1,1] , aObj1Size[1,2] GROUP oGroup TO aObj1Size[1,3], aObj1Size[1,4] LABEL OemToAnsi(STR0010) OF oDlg PIXEL	// "Matricula:"
	oGroup:oFont:= oFont

	@ aObj1Size[2,1] , aObj1Size[2,2] GROUP oGroup TO aObj1Size[2,3], aObj1Size[2,4] LABEL OemToAnsi(STR0011) OF oDlg PIXEL	// "Nome:"
	oGroup:oFont:= oFont

	@ aObj1Size[3,1] , aObj1Size[3,2] GROUP oGroup TO aObj1Size[3,3], aObj1Size[3,4]  LABEL OemToAnsi(STR0060) OF oDlg PIXEL	// "Admiss„o:"
	oGroup:oFont:= oFont

  	@ aObj1Size[1,1]+10 , aObj1Size[1,2]+5	SAY oMat 		Var cMatVar				SIZE 050,10 OF oDlg PIXEL FONT oFont
	@ aObj1Size[2,1]+10 , aObj1Size[2,2]+5	SAY oNome 		Var OemToAnsi(cNomeVar)	SIZE 146,10 OF oDlg PIXEL FONT oFont
	@ aObj1Size[3,1]+10 , aObj1Size[3,2]+5	SAY oAdmissao 	Var dAdmissaoVar		SIZE 050,10 OF oDlg PIXEL FONT oFont


	@ aObj2Size[1,1] , aObj2Size[1,2]	SAY OemToAnsi(STR0021)	SIZE 146,10 OF oDlg PIXEL FONT oFont															// "Calend rio"
	@ aObj2Size[3,1] , aObj2Size[3,2]	SAY OemToAnsi(STR0022)	SIZE 146,10 OF oDlg PIXEL FONT oFont															// "Marca‡”es"


	/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	  ³ Verifica se Habilita funcao de Movimentacao  entre os Registros    ³
	  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If lMovimenta .And. !nOpcx == 3
		/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		  ³ Lista Botoes de posicionamento do funcionario ³
		  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		@ aObjSize[4,1], aObjSize[4,2]+5	GROUP oGroup TO aObjSize[4,3], aObjSize[4,4]-5 LABEL "" OF oDlg PIXEL

		@ aObj4Size[2,1], aObj4Size[2,2]		BUTTON oBtnPgPrev 	PROMPT OemToAnsi("<<")	 SIZE 021.5,009 DESIGN ACTION Pn280VerMove(nOpcx, bChange, bPrimeiro, bSet15) 	OF oDlg PIXEL
		@ aObj4Size[2,1], aObj4Size[2,2]+21.5	BUTTON oBtnPrev		PROMPT OemToAnsi("<")	 SIZE 021.5,009 DESIGN ACTION Pn280VerMove(nOpcx, bChange, bAnterior, bSet15) 	OF oDlg PIXEL
		@ aObj4Size[2,1], aObj4Size[2,2]+43	BUTTON oBntNext 	PROMPT OemToAnsi(">")	 SIZE 021.5,009 DESIGN ACTION Pn280VerMove(nOpcx, bChange, bProximo , bSet15) 	OF oDlg PIXEL
		@ aObj4Size[2,1], aObj4Size[2,2]+63.5	BUTTON oBtnPgNext 	PROMPT OemToAnsi(">>")	 SIZE 021.5,009 DESIGN ACTION Pn280VerMove(nOpcx, bChange, bUltimo  , bSet15) 	OF oDlg PIXEL


		AxPesqOrd("SRA",@aPesqIdx,,lSeeAll,@aPesqOrd)
		cPesqOrd := aPesqOrd[1]

		@ aObj4Size[3,1], aObj4Size[3,2] COMBOBOX oPesqCbx VAR cPesqOrd ITEMS aPesqOrd SIZE 100,36 PIXEL OF oDlg
		
	  	@ aObj4Size[4,1], aObj4Size[4,2] MSGET oPesqGet VAR cPesqCampo SIZE 100,09 PIXEL OF oDlg

	    @ aObj4Size[5,1], aObj4Size[5,2] BUTTON "Ok" SIZE 021.5,009 PIXEL OF oDlg ;     //"Pesquisar"
			      ACTION (AxPesqSeek("SRA",.F.,cPesqCampo,,aPesqIdx,oPesqCbx:nAt,lSeeAll,),Pn280VerMove(nOpcx, bChange, bFica, bSet15))


   Endif

   	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³  Ponto-de-Entrada 											³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPnopcx )
		If ( ValType( nRet := ExecBlock("PONOPCX3",.F.,.F., { nOpcx } ) ) == "N" )
			nOpcx	 := nRet
			nOpcxAnt := nOpcx
		EndIf
	EndIF

	//-- Cria Lista do Calendario "NAO Visivel" para consultas completas das informacoes
  	ListCalend( aListBox,,,@aAuxHeader, @aAuxSize)

	oLBox := TWBrowse():New( aObj3Size[1,1] ,aObj3Size[1,2],aObj3Size[1,3],aObj3Size[1,4]	,							,aAuxHeader			,aAuxSize			,oDlg		,				,			,			,,										,									,				,			,				,				,			,.F.			,			,.T.		,			,.F.		,		,				,					)

	Pn280LoadList(oLBox, aListBox, .F.)
	oLbox:lVisibleControl:=.F.

	//-- Cria Bloco para Mudanca de Data do Calendario
    Pn280Bloco(bChange, @bMyChange)


	//-- Cria Calendario Sintetico "Visivel" para Navegacao entre Datas
 	aColunas:=Eval(baColunas)
 	ListCalend( @aListSint,aColunas,lCalendDiverg, @aAuxHeader, @aAuxSize)

	oLBoxSint := TWBrowse():New( aObj3Size[1,1] ,aObj3Size[1,2],aObj3Size[1,3],aObj3Size[1,4],,aAuxHeader,aAuxSize,oDlg,,,,bMyChange,,,,,,,,.F.,,.T.,,.F.,,,)
	Pn280LoadList(oLBoxSint, aListSint, .F.,.T.)
	
	//-- Get Dados das Marcacoes
	fMuda(1,,.F.)
	//-- Carrega campos alteraveis
	aCposAlteraveis	:= {}
	aCposAlteraveis:=fCamposVis(aAlter,aHeader)

	o1Get:= MsNewGetDados():New(aObj33Size[2,1] ,aObj33Size[2,2],aObj33Size[2,3],aObj33Size[2,4],IF(nOpcX==2.Or.nOpcX==5.Or.lPnaMrc,0,GD_INSERT+GD_UPDATE+GD_DELETE	),"fChamaFunc('1',{||lRet:=.T., if(lRet, Pn230LinOk(Nil,.T.), lRet)})"	,"fChamaFunc('1',{||Pn230TudOk()})"	,"",If(!Empty(aCposAlteraveis),aCposAlteraveis,Nil),0,,,,If(lPort1510,"fDelMarc(.T.)",NIL),@oDlg,aClone(aSvTree[G_MARC,G_HEADER]),aClone(aSvTree[G_MARC,G_ACOLS]))

	o1Get:oBrowse:bGotFocus		:={|| fMarcGotFocus(@oObjPendente,bChange)}

    o1Get:oBrowse:bLostFocus	:={|| fMarcLostFocus(@oObjPendente,bChange)}
	
	o1Get:oBrowse:cName:='o1Get'

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Barra de Botoes para Marcacoes                        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

    Pn280MarcBar(bChange,@aRecno)

	//-- Get Dados dos Apontamentos
	fMuda(2,,.F.)   //VER ESTA PARADA ACOLS
	//-- Carrega campos alteraveis
	aCposAlteraveis	:= {}
	aCposAlteraveis:=fCamposVis(aAlter,aHeader)
	o2Get:= MsNewGetDados():New(aObj33Size[5,1] ,aObj33Size[5,2],aObj33Size[5,3],aObj33Size[5,4],IF(nOpcX==2.Or.nOpcX==5,0,GD_INSERT+GD_UPDATE+GD_DELETE	),"P280ApoLin"         ,"PApoTudOk()" 						,""         ,If(!Empty(aCposAlteraveis),aCposAlteraveis,Nil)     ,0			,    	,    		,          		, "fDelAponta()", oDlg	,aClone(aSvTree[G_APO,G_HEADER])	,aClone(aSvTree[G_APO,G_ACOLS]))

	//-- Posiciona Inicialmente na Coluna do Codigo do Evento Informado ou Abono
    Pn130PosCursor(o2Get:oBrowse)

    o2Get:oBrowse:bGotFocus		:={||fApoGotFocus(@oObjPendente,bChange) }

    o2Get:oBrowse:bLostFocus	:={||fApoLostFocus(@oObjPendente,bChange)  }

	o2Get:oBrowse:cName:='o2Get'

   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Barra de Botoes para Apontamentos                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    Pn280ApoBar(bChange)

	//-- Blocos de Codigos para Confirmar e Abandonar o Dialogo
  	bSet15	:= { |lSai| fSAi15(@oObjPendente,bChange,@nOpca, lSai), RestKeys(aKeys,.T.)}

    //-- Ao Cancelar a manutencao verifica a ocorrencia de alteracoes nos dados
    //-- Pede confirmacao de abono em caso positivo
	bSet24 := { || fSAi24( bChange, @nOpca), RestKeys(aKeys,.T.) }

    //-- Reposiciona
    fMuda(1)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Alimenta a Coluna do Calendario com as Divergencias		   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    Pn280LoadDiv()

	//-- EXIBE TELA Dialogo

   // Aadd(aObject, oLBoxSint:olistbox)
    Aadd(aObject, o1Get:oBrowse)
    Aadd(aObject, o2Get:oBrowse)

	//Conversao da funcao PN280Choibar em EnchoiceBar

	IF !( nOpcX == 5 )
	    //--  Se Identifica Divergencias
	    If lCalendDiverg
			bLegend		:= { || GetLegendCalend(,,2) }
	    Else
	    	bLegend		:= { || GetLegendCalend() }
	    Endif

		bCalend		:= { ||cClonecEstou:=cEstou, fMuda(1),;
	                   	f_Alt_H(o1Get	,;
								aClone(aArrayMain)	,;
								nSvUsado			,;
								aHeader				,;
								lPona240			 ;
													),;
						fMuda(Val(cClonecEstou))			;
			 		}
  		//bAgenda		:= { || Agenda() }

    	AADD( aButtons, {NIL, bLegend, OemToAnsi(STR0045),OemToAnsi(STR0045),{|| .T.}} )
	    AADD( aButtons, {NIL, bCalend, OemToAnsi(STR0069),OemToAnsi(STR0069),{|| .T.}} )
	    //AADD (aButtons, {NIL, bAgenda, OemToAnsi(STR0035),OemToAnsi(STR0035),{|| .T.}}) -- Botao nao serve pra nada.

	EndIF


/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada para Adicao de Botoes na Barra Principal   ³
	³ A T E N C A O: O bloco de codigo da acao do objeto devera   ³
	³ ser criado como tal para encapsular o nome do dialogo (oDLG)³
	³ Pois ao ser acionado deve-se preservar o dialogo anterior.  ³
	³ Isso nao ocorre quando chamamos uma manutencao com um dialo ³
	³ go de mesmo nome.											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF lPna280Bar

	   	If ( VALTYPE( uRet := ExecBlock( "PNA280BAR" , .F. , .F. , {nOpcX} ) ) ="A" )
   		   For nX:= 1 To  Len(uRet)
	   	    	AADD( aButtons, {NIL, &("{||oDlgAux:=oDLG,"+ uRet[nX, 4] +", oDlg:=oDlgAux}"), uRet[nX, 5],uRet[nX, 5],{|| .T.}} )
	   	   Next nX
   		Endif

	Endif

	ACTIVATE MSDIALOG oDlg ON INIT (EnchoiceBar (oDlg,bSet15, bSet24, , aButtons ,,  ), fInicia() ) CENTERED

	SetaPilha()


	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada para permitir gravacao/exclusao             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPnaGrv .And. nOpcA == 1 )
		IF ( ValType( lRet := ExecBlock("PNA280GRV",.F.,.F.,{ cAlias, cPrefix, aHeader, nOpcX } ) ) == "L" ) // G_MAIN,G_CLONE_MAIN,G_MARC,G_APO,G_ABO
			_lGrava := lRet
			lRet	:= NIL
		EndIF
	EndIF

	If (INCLUI .OR. ALTERA .Or. nOpcX == 5) .AND. (_lGrava)
		//-- Grava as Informacoes da Manutencao
		Pn280GrvFunc(nOpcA, nOpcX)
    EndIf

	_lGrava	:=	.T.

End Sequence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Ponto de Entrada PNAPOSPC que não é executado no PONXFUN     ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If ( nOpcX == 4 .and. lPnaApoSrc )
	ExecBlock( "PNAPOSPC" , .F. , .F. , { cFilAnt , cMatVar } , .F. )
EndIf

//Exclui registro de bloqueio lógico
If lBloqOk
	Pnm090UnlockPer( SRA->RA_FILIAL, .F., DtoS(dPerIni) + DtoS(dPerFim), SRA->RA_MAT )
EndIf

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Encerra Ambiente para o Funcionario 					       ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Pn280FimFunc()


/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado das Teclas de Atalho conforme Entrada 	  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
//-- Desabilita as teclas utilizadas na rotina
fProgTeclas("0",.F.)
fProgTeclas("1",.F.)
fProgTeclas("2",.F.)
fProgTeclas("3",.F.)
fProgTeclas("4",.F.)
//-- Restaura as teclas antes da entrada na rotina
RestKeys( aKeys,.T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura os Dados de Entrada								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

RestArea( aAreaSRA )

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fInicia   ³ Autor ³ Mauricio MR          ³ Data ³ 09/06/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Rotina Inicializacao dos GetDados   						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fInicia()       		                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³ Pona280                                      			  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fInicia()

//-- Carrega Apontamentos
fMuda(2)
//-- Ativa Apontamentos
o2Get:aCols:=aClone(aCols)
o2Panel:lReadOnly			:=	.T.        	//-- Desabilita  Painel
oGet:=o2Get                                	//-- Inicialia Variavel Get padrao
o2Get:Show()                               	//-- Exibe Get
o2Get:oBrowse:Show()                       	//-- Exibe Browse do Get correspondente
o2Get:Refresh(.T.)                        	//-- Refresh o Get
o2Get:ForceRefresh()

//-- Carrega Marcacoes
fMuda(1)
//-- Ativa Marcacoes
o1Panel:lReadOnly			:=	If(nOpcX != 2 .and. nOpcX != 5, .F., o1Panel:lReadOnly ) //Visualizacao ou Exclusao         //-- Habilita Painel
o1Get:aCols:=aClone(aCols)
oGet:=o1Get                                 //-- Inicialia Variavel Get padrao
o1Get:Show()								//-- Exibe Get
o1Get:oBrowse:Show()						//-- Exibe Browse do Get correspondente
o1Get:Refresh(.T.)         					//-- Refresh o Get
o1Get:oBrowse:SetFocus()					//-- Foca o Get

fProgTeclas("0")  							//-- Habilita Teclas da Janela Principal
fProgTeclas("1")  							//-- Habilita Teclas Abono

//-- Para opcao de Alteracao ou Visualização realiza a verificacao de apontamento
//-- Foi alterado para realizar a verificacao tambem na opcao de visualizacao pois nesta opcao
//-- os apontamentos abonados nao eram trazidos na get.
If  ( nOpcX==4  .And. !lPona240 )
	//-- Aponta as marcacoes garantido que teremos apontados todos os dias ate a database
 //	Eval( bAponMarc )
Endif

o2Get:oBrowse:SetFocus()					//-- Foca o Get
o1Get:oBrowse:SetFocus()					//-- Foca o Get
Return .T.


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³  fPrincipal      ³ Autor ³ Mauricio MR   ³ Data ³ 06.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao principal que controla mudanca de arquivo           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³    fPrincipal(oExp01,oExpO2,bExpO1)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ PONA280       ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fPrincipal(oObjList ,oObjGet	,oObjPanel	,oObjDlg	,bChange	,cIndo	,lTudoOK,lList)

Local n1		:= 0
Local nGet  	:= Val(cIndo)
Local aRet		:= {Nil,Nil}

DEFAULT lTudoOK	:=	.F.
DEFAULT lList	:=	.T.

//Descarrega o Dados do Acols Ativo

fMuda(Val(cEstou),DESCARREGA)

//-- Para Abono Desabilita a List de Calendario pois a data obedecida devera estar de acordo
//-- com o apontamento escolhido
If cEstou == '3'
   fProgTeclas(cEstou,.F.)  //-- Desabilita Teclas Abono
Elseif cEstou == '1'
	o1Panel:lReadOnly			:=.T.
    fProgTeclas(cEstou,.F.) //-- Desabilita Teclas Abono
Elseif cEstou == '2'
	o2Panel:lReadOnly			:=.T.
   fProgTeclas(cEstou,.F.) //-- Desabilita Teclas Abono
EndIf

If cIndo == '3'
	//-- Mostra  o Dialogo
	oObjDlg:Show()
  	fProgTeclas(cIndo)  //-- Habilita Teclas Abono
Elseif cEstou == '1'
    fProgTeclas(cIndo)  //-- Habilita Teclas Abono
Elseif cEstou == '2'
   	fProgTeclas(cIndo)  //-- Habilita Teclas Abono
EndIf
//-- Nao Alterar o posicionamento dessa linha pois a variavel "cestou" deve estar atualizada
//-- com o conteudo de "cindo" antes de fazer referencia ao bloco de codigo bChange.
cEstou := cIndo

fMuda(nGet)

//-- Mostra e Habilita Painel
oObjPanel:lReadOnly	:=If((nOpcX != 2 .and. nOpcX != 5 ).OR. (nOpcX = 5 .AND. cEstou =='2'), .F.,	 .T. ) //Visualizacao ou Exclusao

If lPnaMrc .and. cEstou == '1'
	oObjPanel:lReadOnly	:= .T.
Endif

oObjPanel:Show()

//-- Mostra GetDados
oObjGet:Show()
oObjGet:oBrowse:Show()
oObjGet:oBrowse:nAt	:= 1
oGet				:=oObjGet


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cria aCols e aHeader com dados especificos³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


Eval(bChange,{||{.T.,lTudoOK,lList}})


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Refresh no Objeto GetDados    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oObjGet:oBrowse:Refresh(.T.)
oObjGet:Refresh()

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³  fMuda           ³ Autor ³ Mauricio MR   ³ Data ³ 06.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao que Alterna o Conteudo das Variaveis Gerais entre os³±±
±±³          ³ GetDados para poderem ser focalizados num mesmo dialogo.    ±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ fMuda(nGet,lCarrega)                                       ³±±
±±³          ³ nGet     -> Identificador do Get.                          ³±±
±±³          ³ lCarrega -> .T. --> Carrega as informacoes especifas do Get³±±
±±³          ³                     para as Variveis Genericas.            ³±±
±±³          ³             .F. --> Descarrega Inf.Genericas para variaveis³±±
±±³          ³                     especificas.                           ³±±
±±³          ³ lGet     -> .T. --> Carrega aHeader a partir do Get        ³±±
±±³          ³             .F. --> Carrega aHeader a aprtir de variavel   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ PONA280       ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fMuda(nGet,lCarrega,lGet)
Local oGet:=&('o'+Alltrim(str(nGet,0))+'Get')

DEFAULT lCarrega:= .T.
DEFAULT lGet	:= .T.

If lCarrega

    aHeader			:= If(lGet, aClone(oGet:aHeader), aClone(aSvtree[nGet][G_HEADER]) )
    aCols			:= Aclone(aSvtree[nGet][G_ACOLS])
	n				:= aSvtree[nGet][G_N]
	aArrayMain		:= Aclone(aSvtree[nGet][G_MAIN])
	aArrayClone		:= Aclone(aSvtree[nGet][G_CLONE_MAIN])
	aElem			:= Aclone(aSvtree[nGet][G_ELEM])
	aVirtual		:= Aclone(aSvtree[nGet][G_VIRTUAL])
	aAlter			:= Aclone(aSvtree[nGet][G_ALTER])
	aRecno			:= Aclone(aSvtree[nGet][G_RECNO])
	aCabec			:= Aclone(aSvtree[nGet][G_CABEC])
	aCpos			:= Aclone(aSvtree[nGet][G_CPOS])
	aField 			:= Aclone(aSvtree[nGet][G_FIELDS])
	nUsado			:= aSvtree[nGet][G_NUSADO]
	nSvUsado		:= aSvtree[nGet][G_NSVUSADO]
	nCnt			:= aSvtree[nGet][G_NCNT]
	aBrancofield	:= Aclone(aSvtree[nGet][G_BRANCOFIELD] )
    a210BrancoField	:= aBrancoField
    aColsAnt		:= Aclone(aSvtree[nGet][G_CLONE_ACOLS])
    aRecnoClone     := aClone(aRecno)
Else//-- Salva as Informacoes do GetDados
	aSvtree[nGet][G_HEADER] 		:= If( lGet, aClone(oGet:aHeader), aClone(aHeader) )
	aSvtree[nGet][G_ACOLS] 			:= aClone(aCols)
  	aSvtree[nGet][G_N] 				:= n
	aSvtree[nGet][G_MAIN] 			:= aClone(aArrayMain)		   	//-- Array PRINCIPAL com TODAS as linhas do GetDados
	aSvtree[nGet][G_CLONE_MAIN]		:= aClone(aArrayClone)	       	//-- Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
	aSvtree[nGet][G_ELEM] 			:= aClone(aElem)			        //-- Array com Numeros correspondentes as Linhas do ArrayMain
  	aSvtree[nGet][G_VIRTUAL] 		:= aClone(aVirtual)		   		//-- Array de Campos Virtuais
	aSvtree[nGet][G_ALTER] 			:= aClone(aAlter)			    //-- Array de Campos NAO ALTERAVEIS
	aSvtree[nGet][G_RECNO] 			:= aClone(aRecno)			    //-- Array de Numero de Registros Fisicamente Gravados
	aSvtree[nGet][G_CABEC] 			:= aCabec							//-- Array com Cabec (SX3) de Todos os Campos do Arquivo
	aSvtree[nGet][G_CPOS] 			:= aCpos							//-- Array com Todos os Campos do Arquivo
	aSvtree[nGet][G_FIELDS] 		:= aClone(aField)				//-- Array com Campos Nao Exibiveis
	aSvtree[nGet][G_NUSADO] 		:= nUsado
	aSvtree[nGet][G_NSVUSADO] 		:= nSvUsado
	aSvtree[nGet][G_NCNT] 		  	:= nCnt
 	aSvtree[nGet][G_BRANCOFIELD] 	:= Aclone(aBrancoField)
	aSvtree[nGet][G_CLONE_ACOLS] 	:= Aclone(aColsAnt)
	aSvtree[nGet][G_CLONE_RECNO] 	:= Aclone(aRecnoClone)

Endif

nUsado			:= aSvtree[nGet][G_NUSADO]

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³  P280ApoLin      ³ Autor ³ Mauricio MR   ³ Data ³ 23.07.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica a linha Digitada somente se ocorreu alteracao do  ³±±
±±³          ³ conteudo original.										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ PONA280       ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function P280ApoLin()

Local lRet		:= .T.
Local cVar		:= ReadVar()
Local cAlias	:= IF( lPona190 , "SPH" , "SPC" )
Local cPrefix	:= ( PrefixoCpo( cAlias ) + "_" )
Local cPrefMarc	:= ( PrefixoCpo(iF( lPona240 , "SPG" , "SP8" ) ) + "_" )

//-- Numericos -- Posicionamento dos campos em aHeader
Local nPosData  := GdFieldPos( cPrefix + "DATA"		,o2Get:aHeader )
Local nPosHrCalc:= GdFieldPos( cPrefix + "QUANTC"	,o2Get:aHeader )
Local nPosHrInf := GdFieldPos( cPrefix + "QUANTI"	,o2Get:aHeader )
Local nPosDesc	:= GdFieldPos( cPrefix + "DESC" 	,o2Get:aHeader)
Local nPosPD	:= GdFieldPos( cPrefix + "PD" 		,o2Get:aHeader)
Local nPosPDI	:= GdFieldPos( cPrefix + "PDI" 		,o2Get:aHeader)
Local nPosFlag	:= GdFieldPos( cPrefix + "FLAG" 	,o2Get:aHeader)

//-- Linha Atual do Apontamento na GetDados
Local nElem		:= o2Get:oBrowse:nAt

If oGet:oBrowse:cName <> o2Get:oBrowse:cName
   Return(.F.)
Endif
//-- Se Houve Alteracao Na Linha Digitada Realiza Consistencias
fVarGet(@o2Get, @aHeader,@aCols,@n, DESCARREGA)

//-- A) Se o apontamento for gerado e nao possui codigo de evento significa que se trata
//-- de um apontamento referente a um dia que nao devera ser apontado (nao trabalhado e sem marcacoes),
//-- nesse caso especifico, nao consistimos a linha em questao.
//-- B) Lancamentos Onde a Data Existe  e os Demais campos estao em branco, siginifica que as
//-- marcacoes para o dia nao geraram apontamento (nao se aponta horas normais, por exemplo).
//-- Nesse caso deixaremos de consistir o lancamento.
If !(Empty( aCols[ nElem,nPosPd ] ) .AND. (aCols[nElem, nPosFlag] <> "I" ))   .AND. ;
   !( !Empty(aCols[ nElem,nPosData ]) .AND. Empty(aCols[ nElem,nPosHrCalc]) 	.AND. ;
       Empty(aCols[ nElem,nPosPD]) 	.AND.  Empty(aCols[ nElem,nPosHrInf]) .AND. Empty(aCols[ nElem,nPosPDI]) ;
     )
   nUsado:= aSvtree[2][G_NUSADO]
   lRet:=Apont130Ok()
Endif

//-- Se nao houveram inconsistencias
If lRet  .AND. !Empty(nPosHrCalc) .AND. !Empty(nPosPD)  .AND. !Empty(nPosDesc);
        .AND. !Empty(nPosHrInf)  .AND. !Empty(nPosPDI)  .AND. !Empty(nPosFlag)
   //-- Verifica a Variavel Ativa no momento da saida da linha
   //-- e atualiza conteudo do aCols correspondente
   If cVar==("M->"+cPrefix+"QUANTI") .AND. !Empty(nPosHrInf) .AND. TYPE(cVar) <> "U"
      aCols[nElem, nPosHrInf]:= M->(&(cPrefix+"QUANTI"))
   Endif
   If cVar==("M->"+cPrefix+"PDI") .AND. !Empty(nPosPDI) .AND. TYPE(cVar) <> "U"
      aCols[nElem, nPosPDI]:= M->(&(cPrefix+"PDI"))
   Endif

   //-- Limpa Cod.Evento, Descricao e Quantidade para Apontamento Informado se o funcionario
   //-- nao informar o codigo ou a quantidade
   If Empty(aCols[nElem, nPosPDI]) .AND. ( aCols[nElem, nPosFlag] == "I" )
      aCols[nElem, nPosHrCalc]:= aCols[nElem, nPosHrInf]
 	  aCols[nElem, nPosPD]    := aCols[nElem, nPosPDI]
 	  aCols[nElem, nPosDESC]  := DescPdPon( aCols[nElem, nPosPD] )
   ElseIf Empty(aCols[nElem, nPosHrInf]) .AND. ( aCols[nElem, nPosFlag] == "I" )
   	  aCols[nElem, nPosHrCalc]:= aCols[nElem, nPosHrInf]
   Endif

   //-- Verifica se Codigo ou Quantidade foram Informadas
   If !Empty( aCols[nElem, nPosHrInf] ) .OR. !Empty( aCols[nElem, nPosPDI])
      //-- Iguala Qtde Caculada e Codigo do evento conforme dados informados se estiverem vazios os correspodentes
      aCols[nElem, nPosHrCalc]:= If( !Empty(  aCols[nElem, nPosHrInf] ) .AND. ( aCols[nElem, nPosFlag] == "I" ) 	,  aCols[nElem, nPosHrInf] ,  aCols[nElem, nPosHrCalc] )
 	  aCols[nElem, nPosPD]    := If( !Empty(  aCols[nElem, nPosPDI]   ) .AND. ( aCols[nElem, nPosFlag] == "I" )  ,  aCols[nElem, nPosPDI]   ,  aCols[nElem, nPosPD]     )
 	  aCols[nElem, nPosDESC]  := DescPdPon( aCols[nElem, nPosPD] )
   Endif
   //-- Carrega Possiveis alteracoes do aCols para oGet de Apontamento
   fVarGet(@o2Get, @aHeader,@aCols,@n, CARREGA)

   lRet:=PApoTudOk()

Endif

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Program   ³  P280ApoTudOK    ³ Autor ³ Mauricio MR   ³ Data ³ 13.08.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica inconsistencias nas Linhas Digitadas              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ PONA280       ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PApoTudOk()
Local lRet		:= .T.
Local nX		:= 0
Local nPosPD	:= GdFieldPos( cPrefix + "PD" 	 	,o2Get:aHeader)
Local nPosFlag	:= GdFieldPos( cPrefix + "FLAG"		,o2Get:aHeader)
Local nLenaCols := 0
If oGet:oBrowse:cName <> o2Get:oBrowse:cName
   Return(.F.)
Endif
//-- Se Houve Alteracao Na Linha Digitada Realiza Consistencias
fVarGet(@o2Get, @aHeader,@aCols,@n, DESCARREGA)
nLenaCols:=Len(aCols)

//-- Corre Todas as Linhas de Apontamentos
For nX:=1 To nLenaCols
    //-- Verifica Cada Linha, pois se houve apontamento e a quantidade abonada for maior que a
    //-- Qtde Apontada Anuncia inconsistencia e torna processamento pendente.

   //-- OBSERVACAO:
   //-- Se o apontamento for gerado e nao possui codigo de evento significa que se trata
   //-- de um apontamento referente a um dia que nao devera ser apontado (nao trabalhado e sem marcacoes),
   //-- nesse caso especifico, nao consistimos a linha em questao.
   If !Empty( aCols[ nX,nPosPd ] ) .AND. (aCols[nX, nPosFlag] <> "I" )
      nUsado:= aSvtree[2][G_NUSADO]
      lRet:=Apont130Ok()
      //-- Se nao houveram inconsistencias
      If !lRet
         Exit
      Endif
   Endif

Next nX

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280Grava  ³ Autor ³Mauricio MR           ³ Data ³12/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Grava Informacoes no SP8 ou SPG                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280Grava(aArrayMain,aRecno,nPosREcno,aHeader,nOpcX,cAlias, ³±±
±±³          ³           bChave,bParametros,cCampo)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aArray  -> Array com as Informacoes a serem Gravadas 	       ³±±
±±³          ³aRecno  -> Registros Existentes no SP8 ou SPG         	   ³±±
±±³          ³nPosRecno -> Posicao do Array que contem os nos. dos Reg.    ³±±
±±³          ³aHeader -> Array com os Campos                      		   ³±±
±±³          ³nOpcX   -> Tipo de Operacao: 3 = Inclusao , 4 = Alteracao	   ³±±
±±³          ³cAlias  -> Alias do Arquivo a ser Gravado  				   ³±±
±±³          ³bChave  -> Bloco que contem a chave de campos de pesquisa	   ³±±
±±³          ³bParametros-> Bloco que contem a chave de variaveis para	   ³±±
±±³          ³              comparacao de conteudo com a chave de campos   ³±±
±±³          ³cCampo  -> Campo para verificacao de existencia de lancamento³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280Grava(aArrayMain,aRecno,nPosRecno,aHeader,nOpcX,cAlias,bChave,bParametros, cCampo, bKeyOrdem, bFiltro, bCond)
//-- Variaveis de Arquivos
Local aArea			:= GetArea()
Local aArg			:= {}
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cSpaceIdOrg   := ""

//-- Variaveis para Pesquisa
Local cCompar		:= ""
Local cCond			:= ""
Local cFil			:= SRA->RA_FILIAL
Local cMat			:= SRA->RA_MAT
Local cChave		:= ""
Local nPosCampo		:= GdFieldPos(cPrefix+cCampo)
Local nTipoReg		:= 0
Local nMotiVrg	    := 0

//-- Numericos para Loops
Local nArray		:= 0
Local nForArray		:= Len( aArrayMain )

Local nRecno		:= 0
Local nForRecno		:= Len( aRecno )

Local nHeader		:= 0
Local nForHeader	:= Len( aHeader )

//-- Logico para Apendar/Gravar
Local lAppend		:= .F.
Local lGrava		:= .T.
Local lChaveExata   := .T.
Local lChkSP8		:= (cAlias == "SP8")

Local cMsgErr
Local lAlterado		:= .F.
Local lMainClone    := .F.
Local lMainReslt    := .F.

If lPort1510 .and. lChkSP8
	nTipoReg    := GdFieldPos( cPrefix + "TIPOREG"	, aHeader )
	nMotiVrg	:= GdFieldPos( cPrefix + "MOTIVRG"	, aHeader )
	cSpaceIdOrg := Space(GetSx3Cache( "P8_IDORG" , "X3_TAMANHO" ) )
EndIf

//Busca diferencas para definir necessidade de gravacao ou nao.
lMainClone := fCompArray( aArrayMain , aArrayClone )
lMainReslt := fCompArray( aArrayMain , aResult )
//-- Verifica a Existencia de Lancamento Valido para Gravacao
//-- Pois como sempre teremos um lancamento vazio para cada manutencao, na confirmacao da gravacao
//-- sem manutencao, esses lancamentos deverao ser descartados.
If Len(aArrayMain)==1
   //-- Se o Campo para integridade do lancamento estiver vazio, nao grava lancamento
   If Empty(aArrayMain[1,nPosCampo]) .AnD. (lMainClone .or. lMainReslt)
       lGrava:=.F.
   Endif
Endif

If lGrava
	(cAlias)->( dbSetOrder( RetOrdem(cAlias, If( bKeyOrdem <> Nil,Eval(bKeyOrdem,cPrefix),Nil)) ) )
	//-- Obtem as posicoes dos campos

    aArg:=Eval(bParametros,cAlias,cPrefix)
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Grava as Marcacoes                                            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF nOpcX == 3  // Inclusao
		For nArray := 1 To nForArray
			IF !aArrayMain[ nArray , nSvUsado ] .AND. ; //Nao Grava Registros Deletados
   				!Empty(aArrayMain[nArray,nPosCampo])    //Se o Campo para integridade do lancamento estiver vazio, nao grava lancamento
				//cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosData ] ) +  Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
				cChave := Eval(bChave,aArg)
				//-- Procura Pela Chave
				lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
				//-- Verifica a Existencia do Elemento Condicao
				//-- Se encontrou a chave verfica se de fato o lancamento corresponde ao procurado
				If bCond <> Nil  .AND. lAppend
				   //-- Corre enquanto for a mesma chave
		           lChaveExata:= .F.
				   While (cAlias)->( !EOF() .AND. Eval(bCond,cChave,cAlias,cPrefix) )
					      //-- Se filtro valido
					      If Eval(bFiltro,aArg,cAlias,cPrefix)
					         lChaveExata:= .T.
					         Exit
					      Endif
					      (cAlias)->(DBSkip())
	   			   Enddo
	   			   lAppend:= If(lChaveExata,.T.,.F.)
				Endif
				IF !RecLock(cAlias,!lAppend)
					Loop
				EndIF
				(cAlias)->( &(cPrefix+"FILIAL"))	:= cFil
				(cAlias)->( &(cPrefix+"MAT") )		:= cMat
				For nHeader := 1 To nForHeader
					IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
						// verifica se exite alguma alterção do apontamento
						If lPort1510 .and. lChkSP8
							If aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
								(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
								Loop
							ElseIf aHeader[ nHeader , 2 ] == cPrefix+"IDORG"
								(cAlias)->(&(cPrefix+"IDORG"  ))	:= cSpaceIdOrg
								Loop
							EndIf
						EndIf
						If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
							Loop
						ElseIF aArrayMain[nArray,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
							lAlterado = .T.
						EndIf
						If ( !lPort1510 .and. aHeader[ nHeader , 2 ] $ (cPrefix+"DATAAPO|"+cPrefix+"NUMREP|"+cPrefix+"TPMCREP|"+cPrefix+"TIPOREG|"+cPrefix+"MOTIVRG") )
							Loop
						EndIf
						(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
					EndIF
				Next nHeader
				If __lCpoDataAlt .And. __lCpoUsuaAlt .And. lAlterado
					(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
					(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
				EndIf
				lAlterado := .F.
				( cAlias )->( MsUnLock() )
			EndIF
		Next nArray
	ElseIF nOpcX == 4 //Alteracao
	    //-- Nao houve inclusao de novos Elementos
		IF nForRecno == nForArray
			//-- Corre todos os Elementos
			For nArray := 1 To nForArray
				//-- Se Existir Registro correspondente ao Elemento (Neste Caso sempre vai existir)
				//-- Posiciona
				IF !( lAppend := Empty( aRecno[ nArray,nPosRecno ] ) )
					(cAlias)->( dbGoto( aRecno[ nArray,nPosRecno ] ) )
				EndIF
				//-- Para Elementos Nao deletados
				IF !aArrayMain[ nArray , nSvUsado ] .AND. ; //Nao Grava Registros Deletados
   				   !Empty(aArrayMain[nArray,nPosCampo]) 	 //Se o Campo para integridade do lancamento estiver vazio, nao grava lancamento
				    //-- Cria/Bloqueia Registro
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					//-- Salva Campos que Nao fizeram parte do aHeader
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))	:= cMat
					//-- Corre todos os campos do aHeader
					For nHeader := 1 To nForHeader
					    //-- Se o campo foi encontrado (Nao virtual, por exemplo)
					    //-- Grava seu novo conteudo
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							If lPort1510 .and. lChkSP8
								If aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
									Loop
								EndIf
							EndIf
							// verifica se exite alguma alterção do apontamento
							If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
								Loop
							ElseIF aArrayMain[nArray,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
								lAlterado = .T.
							EndIf
							If ( !lPort1510 .and. aHeader[ nHeader , 2 ] $ (cPrefix+"DATAAPO|"+cPrefix+"NUMREP|"+cPrefix+"TPMCREP|"+cPrefix+"TIPOREG|"+cPrefix+"MOTIVRG") )
								Loop
							EndIf
							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
						EndIF
					Next nHeader
					//-- Desbloqueia registro
					If __lCpoDataAlt .And. __lCpoUsuaAlt .And. lAlterado
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					EndIf
					If lPort1510 .and. lChkSP8 .and. lAlterado
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
					EndIf
					lAlterado := .F.
					( cAlias )->( MsUnLock() )
				//-- Se Elemento Deletado e existir registro associado, deleta-o
				ElseIF !lAppend
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					If lPort1510 .and. lChkSP8 .and. aArrayMain[nArray,nTipoReg] == "O"
						(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
						(cAlias)->(&(cPrefix+"MOTIVRG"))	:= (cAlias)->( FieldPut( FieldPos ( aHeader[ nMotiVrg , 2 ] ) , aArrayMain[ nArray , nMotiVrg ] ) )
					   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					Else
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
					EndIf
					( cAlias )->( MsUnLock() )
				EndIF
			Next nArray
		//-- Se ocorreu inclusao de novos elementos
		ElseIF nForRecno < nForArray
		    //-- Corre todos os registros pre-existentes
			For nRecno := 1 To nForRecno
				//-- Se existir registro associado posiciona
				IF !( lAppend := Empty( aRecno[ nRecno,nPosRecno ] ) )
					(cAlias)->( dbGoto( aRecno[ nRecno,nPosRecno ] ) )
				EndIF
				//-- Se elememento Nao deletado
				IF !aArrayMain[ nRecno , nSvUsado ] .AND. ; //Nao Grava Registros Deletados
   				   !Empty(aArrayMain[nRecno,nPosCampo]) 	 //Se o Campo para integridade do lancamento estiver vazio, nao grava lancamento
				    //-- Bloqueia/Cria novo registro
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					//-- Atualiza campos que nao fizeram parte do aHeader
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))		:= cMat
					//-- Corre todas as colunas do aHeader
					For nHeader := 1 To nForHeader
	                    //-- Se existir o campo (nao eh virtual, por exemplo)
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							If lPort1510 .and. lChkSP8
								If aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
									Loop
								EndIf
							EndIf
							// verifica se exite alguma alterção do apontamento
							If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
								Loop
							ElseIF aArrayMain[nRecno,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
								lAlterado = .T.
							EndIf
							If ( !lPort1510 .and. aHeader[ nHeader , 2 ] $ (cPrefix+"DATAAPO|"+cPrefix+"NUMREP|"+cPrefix+"TPMCREP|"+cPrefix+"TIPOREG|"+cPrefix+"MOTIVRG") )
								Loop
							EndIf
						    //-- Grava novo conteudo
							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nRecno , nHeader ] ) )
	   					EndIF
					Next nHeader
					If __lCpoDataAlt .And. __lCpoUsuaAlt .And. lAlterado
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					EndIf
					If lPort1510 .and. lChkSP8 .and. lAlterado
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
					EndIf
					lAlterado := .F.
				//-- Para Elementos Deletados
				ElseIF !lAppend
				    //-- Bloqueia Registro e Deleta-o
					IF !RecLock(cAlias,lAppend)
						Loop
					EndIF
					If lPort1510 .and. lChkSP8 .and. nRecno <= nForArray .and. aArrayMain[nRecno,nTipoReg] == "O"
						(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
						(cAlias)->(&(cPrefix+"MOTIVRG"))	:= (cAlias)->( FieldPut( FieldPos ( aHeader[ nMotiVrg , 2 ] ) , aArrayMain[ nRecno , nMotiVrg ] ) )
					   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					Else
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
					EndIf
				EndIF
				( cAlias )->( MsUnLock() )
			Next nForRecno

			//-- Corre os novos Elementos
	        nRecno:=If(nRecno == 0,1, nRecno)

	        For nArray := nRecno To nForArray
	            //-- Para Elementos Nao Deletados
	            IF !aArrayMain[ nArray , nSvUsado ] .AND. ; //Nao Grava Registros Deletados
  				   !Empty(aArrayMain[nArray,nPosCampo]) 	 //Se o Campo para integridade do lancamento estiver vazio, nao grava lancamento
				   //	cChave := cFil + cMat + Dtos(aArrayMain[ nArray , nPosData ] ) +  Str( aArrayMain[ nArray , nPosHora ] , 5 , 2 )
		   			cChave := Eval(bChave,aArg)
					//-- Verifica a Existencia do Elemento
					lAppend := ( (cAlias)->( MsSeek( cChave , .F. ) ) )
			    	//-- Verifica a Existencia do Elemento Condicao
					//-- Se encontrou a chave verfica se de fato o lancamento corresponde ao procurado
					If bCond <> Nil  .AND. lAppend
					   //-- Corre enquanto for a mesma chave
			           lChaveExata:= .F.
					   While (cAlias)->( !EOF() .AND. Eval(bCond,cChave,cAlias,cPrefix) )
						      //-- Se filtro valido
						      If Eval(bFiltro,aArg,cAlias,cPrefix)
						         lChaveExata:= .T.
						         Exit
						      Endif
						      (cAlias)->(DBSkip())
		   			   Enddo
		   			   lAppend:= If(lChaveExata,.T.,.F.)
					Endif
					//-- Cria/Bloqueia elementos
					IF !RecLock(cAlias,!lAppend)
						Loop
					EndIF
					//-- Atualiza campos que nao fizeram parte do aHeader
					(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
					(cAlias)->(&(cPrefix+"MAT"))		:= cMat
				   	//-- Corre todas as colunas do aHeader
					For nHeader := 1 To nForHeader
						If lPort1510 .and. lChkSP8
							If aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
								Loop
							EndIf
						EndIf
					// verifica se exite alguma alterção do apontamento
						If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
							Loop
						ElseIF aArrayMain[nArray,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
							lAlterado = .T.
						EndIf
					 //-- Se existir o campo (nao eh virtual, por exemplo)
						If ( !lPort1510 .and. aHeader[ nHeader , 2 ] $ (cPrefix+"DATAAPO|"+cPrefix+"NUMREP|"+cPrefix+"TPMCREP|"+cPrefix+"TIPOREG|"+cPrefix+"MOTIVRG") )
							Loop
						EndIf
						IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
							(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nArray , nHeader ] ) )
						EndIF
					Next nHeader
					If __lCpoDataAlt .And. __lCpoUsuaAlt .And. lAlterado
						(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					EndIf
					If lPort1510 .and. lChkSP8 .and. lAlterado
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
					EndIf
					lAlterado := .F.
					( cAlias )->( MsUnLock() )
				EndIF
			Next nArray
		//-- Se ocorreu Delecao de Elementos
		Else
			//-- Corre todos os registros pre-existentes
			For nRecno := 1 To nForRecno
				//-- Se existir registro associado posiciona
				IF !( lAppend := Empty( aRecno[ nRecno,nPosRecno ] ) )
					(cAlias)->( dbGoto( aRecno[ nRecno,nPosRecno ] ) )
				EndIF
				//-- Utiliza Area Lida Antes da Manutencao para Gravar os Apontamentos Atuais
				If nRecno <= nForArray
		            IF !aArrayMain[ nRecno  , nSvUsado ] .AND. ; //Nao Grava Registros Deletados
  					   !Empty(aArrayMain[nRecno ,nPosCampo]) 	 //Se o Campo para integridade do lancamento estiver vazio, nao grava lancamento
					    //-- Bloqueia/Cria novo registro
						IF !RecLock(cAlias,lAppend)
							Loop
						EndIF
						//-- Atualiza campos que nao fizeram parte do aHeader
						(cAlias)->(&(cPrefix+"FILIAL"))	:= cFil
						(cAlias)->(&(cPrefix+"MAT"))		:= cMat
						//-- Corre todas as colunas do aHeader
						For nHeader := 1 To nForHeader
		                    //-- Se existir o campo (nao eh virtual, por exemplo)
							IF (cAlias)->( FieldPos ( aHeader[ nHeader , 2 ] ) > 0 )
								If lPort1510 .and. lChkSP8
									If aHeader[ nHeader , 2 ] == cPrefix+"HORAALT"
										Loop
									EndIf
								EndIf
								    // verifica se exite alguma alterção do apontamento
								If aHeader[ nHeader , 2 ] == cPrefix+"DATAALT" .Or. aHeader[ nHeader , 2 ] == cPrefix+"USUARIO"
									Loop
								ElseIF aArrayMain[nRecno,nHeader] != (cAlias)->(FieldGet(FieldPos(aHeader[nHeader,2])))
									lAlterado = .T.
								EndIf
							    //-- Grava novo conteudo
								If ( !lPort1510 .and. aHeader[ nHeader , 2 ] $ (cPrefix+"DATAAPO|"+cPrefix+"NUMREP|"+cPrefix+"TPMCREP|"+cPrefix+"TIPOREG|"+cPrefix+"MOTIVRG") )
									Loop
								EndIf
								(cAlias)->( FieldPut( FieldPos ( aHeader[ nHeader , 2 ] ) , aArrayMain[ nRecno , nHeader ] ) )
							EndIF
						Next nHeader
						If __lCpoDataAlt .And. __lCpoUsuaAlt
							(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
							(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
						EndIf
						If lPort1510 .and. lChkSP8 .and. lAlterado
							(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
						EndIf
						lAlterado = .F.
					//-- Para Elementos Deletados
					ElseIF !lAppend
					    //-- Bloqueia Registro e Deleta-o
						IF !RecLock(cAlias,lAppend)
							Loop
						EndIF
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
					EndIF
					( cAlias )->( MsUnLock() )
				Else
				    //-- Deleta Elementos do Apontamento anterior a Manutencao
				    IF !RecLock(cAlias,lAppend)
				    	Loop
				    EndIF
					If lPort1510 .and. lChkSP8 .and. aArrayMain[nRecno,nTipoReg] == "O"
						(cAlias)->(&(cPrefix+"TPMCREP"))	:= "D"
						(cAlias)->(&(cPrefix+"MOTIVRG"))	:= (cAlias)->( FieldPut( FieldPos ( aHeader[ nMotiVrg , 2 ] ) , aArrayMain[ nRecno , nMotiVrg ] ) )
					   	(cAlias)->(&(cPrefix+"DATAALT"))	:= MsDate()
						(cAlias)->(&(cPrefix+"HORAALT"))	:= SUBSTR(Time(),1,2) + SUBSTR(Time(),4,2) + SUBSTR(Time(),7,2)
						(cAlias)->(&(cPrefix+"USUARIO"))	:= __cUserId
					Else
						IF !( cAlias )->( FkDelete( @cMsgErr ) )
							( cAlias )->( RollBackDelTran( cMsgErr ) )
						EndIF
					EndIf
					(cAlias )->( MsUnLock() )
				Endif
			Next nForRecno
		EndIF
	EndIF
Endif

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura os Dados de Entrada                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
RestArea( aArea )

Return( NIL )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280Dele   ³ Autor ³Mauricio MR           ³ Data ³01/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Deleta Registros                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280Dele( cAlias,aRecno,nPosRecno )                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³cAlias -> Alias do Arquivo que contem os registros 	       ³±±
±±³          ³aRecno -> Array com os Registros a Serem Deletados		   ³±±
±±³          ³nPosRecno -> Posicao do Array que contem os nos. dos Reg.    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280Dele( cAlias,aRecno,nPosRecno )

Local lGoto			:= .F.
Local nX	 		:= 0
Local nFornX 		:= Len( aRecno )
Local lDelInfUsu    := .T.
Local lChkDelInf	:= ( Upper( AllTrim( cAlias ) ) $ "SPC_SPH" )
Local lChkMarc		:= (cAlias == "SP8")
Local cPrefixoCpo	:= ( PrefixoCpo( Upper( AllTrim( cAlias ) ) ) + "_" )
Local cMsgErr

IF ( lChkDelInf )
	//"Excluir, alˆm dos apontamentos calculados pelo sistema, os apontamentos informados pelo usu rio?"
	lDelInfUsu := MsgNoYes( OemToAnsi( STR0196 ) , cCadastro )
EndIF

For nX := 1 To nFornX
	IF ( lGoto := !Empty( aRecno[ nX,nPosRecno ] ) )
		(cAlias)->( dbGoto( aRecno[nX,nPosRecno ] ) )
		IF RecLock(cAlias,.F.,.T.)
			IF ( lChkDelInf )
				IF ( !Empty( (cAlias)->( &(cPrefixoCpo+"PDI" ) ) ) .and. !( lDelInfUsu ) )
					(cAlias)->( &(cPrefixoCpo+"PD"		) )	:= (cAlias)->( &(cPrefixoCpo+"PDI" ) )
					(cAlias)->( &(cPrefixoCpo+"QUANTC"	) )	:= 0
					(cAlias)->( &(cPrefixoCpo+"FLAG"	) )	:= "I"
					If __lCpoDataAlt .And. __lCpoUsuaAlt
							(cAlias)->(&(cPrefixoCpo+"DATAALT"))	:= MsDate()
							(cAlias)->(&(cPrefixoCpo+"USUARIO"))	:= __cUserId
					EndIf
					(cAlias)->( MsUnlock() )
					Loop
				EndIF
			EndIF
			If lPort1510 .and. lChkMarc
				If ( (cAlias)->(&(cPrefixoCpo+"TIPOREG")) == "O" )
					Loop
				EndIf
			EndIf
			IF !( cAlias )->( FkDelete( @cMsgErr ) )
				( cAlias )->( RollBackDelTran( cMsgErr ) )
			EndIF
			( cAlias )->( MsUnLock() )
		EndIF
	EndIF
Next nX

Return( NIL )


/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
//                          F U N C O E S   C A L E N D A R I O
/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280ChoiBar³ Autor ³Mauricio MR           ³ Data ³19/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Monta Button Bar                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280ChoiBar												   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                   		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280 e PONA240                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280ChoiBar( oDlg , bOk        , bCancel    , nOpcX , cProg  , bChange, lCalendDiverg)

//-- Retorno de Ponto de Entrada
Local uRet
Local nX

//-- Blocos de Chamadas de Funcoes
Local bLegend		:= { || NIL }
Local bCalend		:= { || NIL }
Local bColDel		:= { || NIL }
Local bButton		:= { || NIL }

//-- Botoes de Ferramentas
Local oBar
Local oBtOk
Local oBtCan
Local oBtRec
Local oBtCop
Local oBtCol
Local oBtCal
Local oBtAge
Local oBtSpo
Local oBtHlp

DEFINE BUTTONBAR oBar SIZE 25,25 3D TOP OF oDlg

IF !( nOpcX == 5 )
    //--  Se Identifica Divergencias
    If lCalendDiverg
		bLegend		:= { || GetLegendCalend(,,2) }
    Else
    	bLegend		:= { || GetLegendCalend() }
    Endif

	bCalend		:= { ||cClonecEstou:=cEstou, fMuda(1),;
	                   	f_Alt_H(o1Get	,;
								aClone(aArrayMain)	,;
								nSvUsado			,;
								aHeader				,;
								lPona240			 ;
													),;
						fMuda(Val(cClonecEstou))			;
			 		}
EndIF

DEFINE BUTTON oBtRec RESOURCE "S4WB005N"  OF oBar  ACTION NaoDisp()					TOOLTIP OemToAnsi(STR0031)	// "Recortar..."
oBtRec:cTitle:= OemToAnsi(STR0131)	// "s4wb006n"
DEFINE BUTTON oBtCop RESOURCE "S4WB006N"  OF oBar  ACTION NaoDisp()					TOOLTIP OemToAnsi(STR0032)	// "Copiar..."
oBtCop:cTitle:= OemToAnsi(STR0132)	// "Copiar"
DEFINE BUTTON oBtCol RESOURCE "S4WB007N"  OF oBar  ACTION NaoDisp()					TOOLTIP OemToAnsi(STR0033)	// "Colar..."
oBtCol:cTitle:= OemToAnsi(STR0133)	// "Colar"
DEFINE BUTTON oBtCal RESOURCE "S4WB008N"  OF oBar GROUP ACTION Calculadora() 		TOOLTIP OemToAnsi(STR0034)	// "Calculadora..."
oBtCal:cTitle:= OemToAnsi(STR0134)	// "Calc"
DEFINE BUTTON oBtAge RESOURCE "S4WB009N"  OF oBar GROUP ACTION Agenda()      		TOOLTIP OemToAnsi(STR0035)	// "Agenda..."
oBtAge:cTitle:= OemToAnsi(STR0135)	// "s4wb009n"
DEFINE BUTTON oBtSpo RESOURCE "S4WB010N"  OF oBar GROUP ACTION OurSpool()    		TOOLTIP OemToAnsi(STR0036)	// "Gerenciador de Impress„o..."
oBtSpo:cTitle:= OemToAnsi(STR0136)	// "Gerencia"
DEFINE BUTTON oBtHlp RESOURCE "S4WB016N"  OF oBar GROUP ACTION HelProg()     		TOOLTIP OemToAnsi(STR0037)	// "Help de Programa..."
oBtHlp:cTitle:= OemToAnsi(STR0137)	// "Help"
DEFINE BUTTON oBtLeg RESOURCE "BMPVISUAL" OF oBar GROUP ACTION Eval( bLegend )		TOOLTIP OemToAnsi(STR0045)	// "Legenda do Calend rio..."
oBtLeg:cTitle:= OemToAnsi(STR0145)	// "Legenda"
DEFINE BUTTON oBtCon RESOURCE "S4SB014N"  OF oBar GROUP ACTION Eval( bCalend )		TOOLTIP OemToAnsi(STR0069)	//"Consulta de Hor rios...<F5>"
oBtCon:cTitle:= OemToAnsi(STR0169)	// "Horarios"
DEFINE BUTTON oBtOk  RESOURCE "OK" 		  OF oBar GROUP ACTION Eval( bOK )			TOOLTIP OemToAnsi(STR0041)  // "Ok - <Ctrl-O>"
oBtOk:cTitle:= OemToAnsi(STR0141)	// "Ok"
DEFINE BUTTON oBtCan RESOURCE "CANCEL"	  OF oBar GROUP	ACTION Eval( bCancel )		TOOLTIP OemToAnsi(STR0042)  // "Cancelar - <Ctrl-X>"
oBtCan:cTitle:= OemToAnsi(STR0142)	// "Cancelar"

/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada para Adicao de Botoes na Barra Principal   ³
	³ A T E N C A O: O bloco de codigo da acao do objeto devera   ³
	³ ser criado como tal para encapsular o nome do dialogo (oDLG)³
	³ Pois ao ser acionado deve-se preservar o dialogo anterior.  ³
	³ Isso nao ocorre quando chamamos uma manutencao com um dialo ³
	³ go de mesmo nome.											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF lPna280Bar
    bButton:= {|oBtn,cResName1, cToolTip, bAction, cPrompt| oBtn:= TBtnBmp():NewBar( cResName1,       , , , cToolTip, bAction ,    ,oBar,,, cPrompt) }

   	If ( VALTYPE( uRet := ExecBlock( "PNA280BAR" , .F. , .F. , {nOpcX} ) ) ="A" )
   	   For nX:= 1 To  Len(uRet)
   	        Eval(bButton, uRet[nX, 1],uRet[nX, 2],uRet[nX, 3],&("{||oDlgAux:=oDLG,"+ uRet[nX, 4] +", oDlg:=oDlgAux}"),uRet[nX, 5] )
   	   Next nX
   	Endif

Endif

oBar:bRClicked 	:= {|| AllwaysTrue() }

oBtRec:Disable()
oBtCop:Disable()
obtCol:Disable()



IF ( ( nOpcX == 2 ) .or. ( nOpcX == 5 ) )
	oBtCal:Disable()
	oBtAge:Disable()
	oBtSpo:Disable()
	oBtHlp:Disable()

  	IF ( nOpcX == 5 )
		oBtLeg:Disable()
		oBtCon:Disable()
	EndIF
EndIF

oDlg:bset15:=bOK
oDlg:bset24:=bCancel

Return( NIL )

/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
//                    F U N C O E S     M A R C A C O E S
/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fConfMarc   ³ Autor ³Mauricio MR           ³ Data ³01/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Configura Janela de Marcacoes                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fConfMarc()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³															   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fConfMarc()
//-- Variaveis Retorno da Funcoes
Local aRetorno:={} , nRet:=0

//-- Variaveis Arquivos
Local cAlias		:= IF( lPona240 , "SPG" , "SP8" )
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local nCont			:= 1
/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³               Variavieis Privates para MARCACOES             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
//-- Arrays Marcacoes
Private aCabec			:= {}
Private aCpos			:= {}
Private aBrancoField	:= {}
Private aField			:= {cPrefix+"FILIAL",cPrefix+"MAT"}	//-- Campos NAO Exibidos no GetDados
Private aHeader			:= Array( 0 )              				//-- Cabecalho do GetDados
Private aCols			:= {}                     				//-- Linhas Detalhes do GetDados
Private aArrayMain		:= {}                      				//-- Array PRINCIPAL com TODAS as linhas do GetDados
Private aArrayClone		:= {}                      				//-- Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
Private aElem			:= {}                      				//-- Array com Numeros correspondentes as Linhas do ArrayMain
Private aVirtual		:= {}     				   				//-- Array de Campos Virtuais
Private aAlter			:= {cPrefix+"ORDEM", cPrefix+"PAPONTA"}//-- Array de Campos NAO ALTERAVEIS
Private aRecno			:= {}                      				//-- Array de Numero de Registros Fisicamente Gravados
//-- Numericos Marcacoes
Private nUsado			:= 0
Private nSvUsado		:= 0
Private nCnt	 		:= 0
Private n   			:= 0

Begin Sequence

	bTrataMarc:={|lTudOk| P280MarcGet(@aCols,@aArrayMain,aField,@oDlg,@o1Get,nOpcX,lTudOK) }	//Atualiza aMarcMain, aColStatic, aMarcElem... baseados no aMarcCols

	bApoList:=;
	 {|x|;
		 fMuda(1,DESCARREGA),;  			//-- Salva as Informacoes das Marcacoes em Matriz Auxiliar
		 fMuda(2),;  						//-- Carrega Informacoes dos Apontamentos
		 Eval(bTrataApo,.F.),;          	//-- Atualiza Apontamentos
		 fMuda(2,DESCARREGA),;  			//-- Salva as Informacoes dos Apontamentos em Matriz Auxiliar
		 fMuda(1);  						//-- Recarrega as Informacoes das Marcacoes
	 }


	bf_Alt_H  :={||f_Alt_H(o1Get,aClone(aArrayMain),nSvUsado,aHeader,lPona240)}
	/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Reinicializa aColsStatic a Cada Funcionario                 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	P280MarcGet()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Recupera o cabecalho de marcacoes anteriormente gerado      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !Empty(aSvtree[G_MARC][G_HEADER] )
		aHeader		:=aClone(aSvtree[G_MARC][G_HEADER] )
		nUsado		:= Len(aHeader)
		nSvUsado	:= nUsado+1
		aVirtual	:= aClone(aSvtree[G_MARC][G_VIRTUAL])
		aAlter		:= aSvtree[G_MARC][G_ALTER]
	Endif

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se existe algum dado no arquivo                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( nCnt := P280MarcCols(NIL	,NIL		,NIL	,NIL	,nOpcX,NIL		,.T.) ) > 0  .and. nOpcX == 3	//--Quando Inclusao e existir Registro
		nRet:=1
		nSvUsado:= Len(aHeader)+1
		nCnt 		:= IF(nOpcX == 3,1,nCnt)
		aArrayMain	:= Array(nCnt,nSvUsado)

	    Break
	ElseIF ( nCnt == -1 )	//Não Foi possivel Criar o Calendario
		nSvUsado:= Len(aHeader)+1
		nCnt 		:= IF(nOpcX == 3,1,nCnt)
		aArrayMain	:= Array(nCnt,nSvUsado)

		Break
	ElseIF nCnt == 0 .and. nOpcX != 3										//--Quando Nao for Inclusao e nao existir Registro
		nRet:=2
	EndIF

	nSvUsado:= Len(aHeader)+1

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Quando for Inclusao criar com 1 elemento					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nCnt 		:= IF(nOpcX == 3,1,nCnt)
	aArrayMain	:= Array(nCnt,nSvUsado)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Marcacoes do Funcionario                          	     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cTitulo 	:= OemToAnsi(STR0082)   	//"Configurando Ambiente"
	cMensagem	:= OemToAnsi(STR0083)		//"Carregando Marca‡”es..."
	bBlocMsg	:={|| P280MarcCols(aHeader,@aArrayMain ,@aRecno,aField,nOpcX) }

	MsAguarde(bBlocMsg,cTitulo,cMensagem,.F.)

	aArrayClone := aClone(aArrayMain)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Houve Geracao de Marcacoes Automaticas e  Altera³
	³ Flag para Forcar o Reapontamento e a Remontagem do Resultado³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF lGeraAuto
		nPosFlag := GdFieldPos(cPrefix+"FLAG")
		nPosApon := GdFieldPos(cPrefix+"APONTA")
		aEval( @aArrayClone , { |x| IF( x[ nPosFlag ] == "A" .and. x[ nPosApon ] != "S" , x[ nPosFlag ] := "M" , NIL ) } )
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gera aCols com 1 Elemento para a GetDados                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	P280MarcCols(aHeader,@aCols,			 ,aField,nOpcX,.T.)

	aSvtree[G_MARC][G_HEADER] 		:= aClone(aHeader)
	aSvtree[G_MARC][G_ACOLS] 		:= aClone(aCols)
	aSvtree[G_MARC][G_N] 			:= Len(aCols)
	aSvtree[G_MARC][G_MAIN] 		:= aClone(aArrayMain)		     	//-- Array PRINCIPAL com TODAS as linhas do GetDados
	aSvtree[G_MARC][G_CLONE_MAIN] 	:= aClone(aArrayClone)	           	//-- Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
	aSvtree[G_MARC][G_ELEM] 		:= aClone(aElem)			        //-- Array com Numeros correspondentes as Linhas do ArrayMain
	aSvtree[G_MARC][G_VIRTUAL] 		:= aClone(aVirtual)		     		//-- Array de Campos Virtuais
	aSvtree[G_MARC][G_ALTER] 		:= aClone(aAlter)			        //-- Array de Campos NAO ALTERAVEIS
	aSvtree[G_MARC][G_RECNO] 		:= aClone(aRecno)			        //-- Array de Numero de Registros Fisicamente Gravados
	aSvtree[G_MARC][G_CABEC] 		:= aClone(aCabec)					//-- Array com Cabec (SX3) de Todos os Campos do Arquivo
	aSvtree[G_MARC][G_CPOS] 		:= aClone(aCpos)					//-- Array com Todos os Campos do Arquivo
	aSvtree[G_MARC][G_FIELDS] 		:= aClone(aField)					//-- Array com Campos Nao Exibiveis
	aSvtree[G_MARC][G_NUSADO] 		:= nUsado
	aSvtree[G_MARC][G_NSVUSADO] 	:= nSvUsado
	aSvtree[G_MARC][G_NCNT] 		:= nCnt
	aSvtree[G_MARC][G_BRANCOFIELD] 	:= aClone(aBrancoField)
	aSvtree[G_MARC][G_CLONE_ACOLS] 	:= aClone(aCols)
	aSvtree[G_MARC][G_CLONE_RECNO] 	:= aClone(aRecno)

End Sequence

Return nRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280MarcBar³ Autor ³Mauricio MR           ³ Data ³18/04/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Monta Button Bar                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280MarcBar												   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                   		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280 e PONA240                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280MarcBar(bChange,aRecno)
//-- Blocos de Chamadas de Funcoes
Local bCancel		:= { ||oDlg:End()}
Local bColDel		:= { || NIL }
Local bGerMarOne	:= { || NIL }
Local bGerMarAll	:= { || NIL }
Local bGerAleOne	:= { || NIL }
Local bGerAleAll	:= { || NIL }
Local bMarcPrev		:= { || NIL }
Local bMarcProx		:= { || NIL }
Local bRecRFE		:= { || NIL }
Local bReordMarc	:= { || NIL }

Local nMinMax		:= Abs( SuperGetMv( "MV_MCALEAT" , NIL , 0  , cFilAnt ) )

//-- Variaveis Objetos
Local oBar
Local oTitulo

Local nPosicao

IF !( ( nOpcX == 2 ) .or. ( nOpcX == 5 ) )
	bColDel		:= { ||  Pn280ModSetaCols( @oDlg , @o1Get, @o1Get:aCols, ,.T. ), fVarGet(@o1Get, @aHeader,@aCols,@n, DESCARREGA,1)}
	bGerMarOne	:= { ||  Pn280TelaTpMarc(@oDlg , @o1Get,,,bChange),o1Get:oBrowse:SetFocus() }
	bGerMarAll	:= { ||  Pn280TelaTpMarc( @oDlg , @o1Get , .T.,,bChange), o1Get:oBrowse:SetFocus() }

	bRecRFE		:= { || ;
					IF(	Pna230RecRFE(o1Get,@aRecno),;
						(;
							fVarGet(@o1Get, @aHeader,@aCols,@n),;
							o1Get:ForceRefresh(),;
							o1Get:oBrowse:Refresh(),;
							oDlg:Refresh();
						),;
						NIL;
					   );
				 	}
	IF nMinMax > 0
		bGerAleOne	:= { ||  Pn280TelaTpMarc( @oDlg , @o1Get , .F. , nMinMax,bChange),o1Get:oBrowse:SetFocus()}
		bGerAleAll	:= { ||  Pn280TelaTpMarc( @oDlg , @o1Get , .T. , nMinMax,bChange ), o1Get:oBrowse:SetFocus() }
	EndIF

	bMarcPrev		:= { ||  If( Pn280MovMarc( @oDlg , aHeader, @o1Get, .F.),;
	                                 ( Eval(bReaponMarc), o1Get:oBrowse:SetFocus() ),;
	                                 Nil;
	                            )       ;
	                   }
 	bMarcProx		:= { ||  if( Pn280MovMarc( @oDlg , aHeader, @o1Get, .T.),;
 									 ( Eval(bReaponMarc), o1Get:oBrowse:SetFocus() ),;
 									 Nil;
 								)		;
 						}

	IF !( lPona240 )
           bAponMarc	:= { ||fObjOnOFF(.F.),; //Desabilita Get e Listbox
           						fVarGet(@o1Get, @aHeader,@aCols,@n, DESCARREGA,1),;//-- Atualiza o aCols
           						IF( o1Get:TudoOk(),;
                           		 ( Eval(bTrataMarc,.T.),;	     	//-- Atualiza aMarcMain, aColStatic, aMarcElem... baseados no aMarcCols
                           		   Pn280Aponta(o1Get,nOpcX),; 	    //-- Realiza o apontamento
                           		   P280MarcGet() ,;					//-- Reinicializa aCols Static Marcacoes
                           		   Eval(bTrataMarc,.F.),;          //-- Atualiza aCols a partir do aArrayMain (Flag Aponta)
                           		   fMuda(1,DESCARREGA),;  			//-- Salva as Informacoes das Marcacoes em Matriz Auxiliar
                       		   	   o1Get:Refresh(),;
                           		   fMuda(2),;  						//-- Carrega Informacoes do Apontamento
                           		   P280ApoCols(aHeader, @aArrayMain, @aRecno, aField, @aVirtual, nOpcX, .F., .F.,.T.),;  //-- Carrega Resultado do Apontamento no aApoMain(Apontamentos)
                           		   P280ApoGet(),;					//-- Reinicializa aCols Static Apontamento
								   P280AboGet(),;					//-- Reinicializa aCols Static Abonos
                           		   Eval(bTrataApo,.F.),;          	//-- Atualiza aApoCols baseado no ApoMain
                           		   fMuda(2,DESCARREGA),;  			//-- Salva as Informacoes dos Apontamentos em Matriz Auxiliar
	                   		   	   fMuda(1),;  						//-- Recarrega as Informacoes das Marcacoes
	                   		   	   Pn280RefresholBoxSint();			//-- Verifica Divergencias
                                ),;
                                   Nil;
                              ),;
                              (fObjOnOFF(.T.),; //Habilita Get e Listbox
                              Pn280RefresholBoxSint());			//-- Verifica Divergencias
                       }


		bReaponMarc	:=   { || fObjOnOFF(.F.),; //Desabilita Get e Listbox
							  fVarGet(@o1Get, @aHeader,@aCols,@n, DESCARREGA,1),;
		                      IF( o1Get:TudoOk(),;
                           		 ( PonDestroyStatic(),;				//-- Reinicializa as Staticas quando forca o Reapontamento
                           		   Eval(bTrataMarc,.T.),;	     	//-- Atualiza aMarcMain, aColStatic, aMarcElem... baseados no aMarcCols
                           		   Pn280Aponta(o1Get,nOpcX,.T.),; 	//-- Realiza o apontamento
                           		   P280MarcGet() ,;                	//-- Reinicializa aCols Static Marcacoes
                           		   Eval(bTrataMarc,.F.),;          	//-- Atualiza aCols a partir do aArrayMain (Flag Aponta)
                           		   fMuda(1,DESCARREGA),;  			//-- Salva as Informacoes das Marcacoes em Matriz Auxiliar
                       		   	   o1Get:Refresh(),;
                           		   fMuda(2),;  						//-- Carrega Informacoes do Apontamento
                           		   P280ApoCols(aHeader, @aArrayMain, @aRecno, aField, @aVirtual, nOpcX, .F., .F.,.T.),;  //-- Carrega Resultado do Apontamento no aApoMain(Apontamentos)
                           		   P280ApoGet(),;					//-- Reinicializa aCols Static Apontamento
								   P280AboGet(),;					//-- Reinicializa aCols Static Abonos
                           		   Eval(bTrataApo,.F.),;          	//-- Atualiza aApoCols baseado no ApoMain
                           		   fMuda(2,DESCARREGA),;  			//-- Salva as Informacoes dos Apontamentos em Matriz Auxiliar
                           		   fMuda(3,,.F.),;					//-- Mudo para fazer a leitura dos abonos
                           		   P280AboGet(@aCols,@aArrayMain,aField,,,,.F.),;
                           		   xaHeader	:=aClone(aSvTree[G_ABO,G_HEADER]),;
                           		   P280AboGet(@aCols,@aArrayMain,aField,,,,.F.),;
                           		   fMuda(3,.F.,.F.),;				//-- Força a atualização das informações do aSvtree e Arraymain
	                   		   	   fMuda(1),;  						//-- Recarrega as Informacoes das Marcacoes
							 	   o1Get:Refresh(),;
   	                   		   	   Pn280RefresholBoxSint();			//-- Verifica Divergencias
                                ),;
                                   Nil;
                              ),;
                       		  fObjOnOFF(.T.); //Habilita Get e Listbox;
                       }

	EndIF
ElseIF ( nOpcX == 2 ) .Or. lPnaMrc
	bAponMarc	:= { ||fObjOnOFF(.F.),; //Desabilita Get e Listbox
					   fVarGet(@o1Get, @aHeader,@aCols,@n, DESCARREGA,1),;
	                   IF( o1Get:TudoOk(),;
                           		 ( Eval(bTrataMarc,.T.),;	     	//-- Atualiza aMarcMain, aColStatic, aMarcElem... baseados no aMarcCols
                           		   Pn280Aponta(o1Get,nOpcX),; 		//-- Realiza o apontamento
                           		   P280MarcGet() ,;                //-- Reinicializa aCols Static Marcacoes
                           		   Eval(bTrataMarc,.F.),;          //-- Atualiza aCols a partir do aArrayMain (Flag Aponta)
                           		   fMuda(1,DESCARREGA),;  			//-- Salva as Informacoes das Marcacoes em Matriz Auxiliar
                           		   fMuda(2),;  						//-- Carrega Informacoes do Apontamento
                           		   P280ApoCols(aHeader, @aArrayMain, @aRecno, aField, @aVirtual, nOpcX, .F., .F.,.T.),;  //-- Carrega Resultado do Apontamento no aApoMain(Apontamentos)
                           		   P280ApoGet(),;					//-- Reinicializa aCols Static
   								   P280AboGet(),;					//-- Reinicializa aCols Static Abonos
                           		   Eval(bTrataApo,.F.),;          	//-- Atualiza aApoCols baseado no ApoMain
                           		   fMuda(2,DESCARREGA),;  			//-- Salva as Informacoes dos Apontamentos em Matriz Auxiliar
                           		   fMuda(1),;  						//-- Recarrega as Informacoes das Marcacoes
   	                   		   	   Pn280RefresholBoxSint();			//-- Verifica Divergencias
                                ),;
                                   Nil;
                              ),;
                              fObjOnOFF(.T.); //Habilita Get e Listbox
                       }
EndIF

//-- Cria Painel
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta GetDados de Marcacoes                                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

o1Panel:= TPanel():New(aObj33Size[1,1],aObj33Size[1,2],,oDlg,,,,,,aObj33Size[1,3],aObj33Size[1,4],.F.,.F.)

DEFINE BUTTONBAR oBar SIZE 50,50 3D TOP OF o1Panel

o1Panel:lShowHint 	:= .T.

//-- Acrescenta Botoes. As coordenadas do primeiro botao servem como referencia para
//-- os demais.

DEFINE BUTTON oBtMarcDel RESOURCE "SDUZAP"   ACTION (Eval(bColDel), Eval(bReaponMarc))	 OF oBar
oBtMarcDel:Align := CONTROL_ALIGN_LEFT
oBtMarcDel:cToolTip	:= OemToAnsi(STR0068)	// "Apagar/Restaurar Marca‡”es do Dia..."
oBtMarcDel:cTitle	:= ""

DEFINE BUTTON oBtMarcGer RESOURCE "SDUFIELDS"   OF oBar GROUP ACTION Eval( bGerMarOne )
oBtMarcGer:Align := CONTROL_ALIGN_LEFT
oBtMarcGer:cToolTip	:= OemToAnsi(STR0038)	// "Gera Marca‡„o..."
oBtMarcGer:cTitle	:= ""

DEFINE BUTTON oBtMarcGe1 RESOURCE "CLOCK01" 	  OF oBar GROUP ACTION Eval( bGerMarAll )
oBtMarcGe1:Align := CONTROL_ALIGN_LEFT
oBtMarcGe1:cToolTip	:= OemToAnsi(STR0055)	// "Gera Todas as Marca‡”es Para o Dia..."
oBtMarcGe1:cTitle	:= ""

DEFINE BUTTON oBtMarcGaL RESOURCE "NEXT"  	  OF oBar GROUP ACTION Eval( bGerAleOne )
oBtMarcGaL:Align := CONTROL_ALIGN_LEFT
oBtMarcGaL:cToolTip	:=OemToAnsi(STR0058)	// "Gera Marca‡„o Aleat¢ria..."
oBtMarcGaL:cTitle	:=""

DEFINE BUTTON oBtMarcGa1Dia RESOURCE "PGNEXT"	  OF oBar GROUP ACTION Eval( bGerAleAll )
oBtMarcGa1Dia:Align := CONTROL_ALIGN_LEFT
oBtMarcGa1Dia:cToolTip	:= OemToAnsi(STR0059)	// "Gera Marca‡”es Aleat¢rias Para o Dia..."
oBtMarcGa1Dia:cTitle	:= ""

If lPort1510 .and. nOpcX == 4
	DEFINE BUTTON oBtRFE RESOURCE "DEVOLNF"   OF oBar GROUP  ACTION	Eval( bRecRFE )
	oBtRFE:cToolTip	:= OemToAnsi(STR0209)	// 'Recarrega Marcações Originais'
	oBtRFE:cTitle:= ""
EndIf

DEFINE BUTTON oBtMarcApo RESOURCE "COLTOT"  OF oBar ACTION Eval( bAponMarc  )
oBtMarcApo:Align := CONTROL_ALIGN_LEFT
oBtMarcApo:cToolTip	:=	OemToAnsi(STR0039)	// "Aponta Marca‡”es..."
oBtMarcApo:cTitle	:=	""

DEFINE BUTTON oBtMarcRea RESOURCE "RECALC"  OF oBar GROUP ACTION Eval( bReaponMarc )
oBtMarcRea:Align := CONTROL_ALIGN_LEFT
oBtMarcRea:cToolTip:=OemToAnsi(STR0073)	// "For‡a o Reapontamento das Marca‡”es..."
oBtMarcRea:cTitle  :=""

DEFINE BUTTON oBtMarcPrev RESOURCE "PMSSETAUP"   OF oBar GROUP ACTION Eval( bMarcPrev )
oBtMarcPrev:Align := CONTROL_ALIGN_LEFT
oBtMarcPrev:cToolTip:=OemToAnsi(STR0095)	// "Move a Marca‡„o para o Dia Anterior..."
oBtMarcPrev:cTitle  :=""

DEFINE BUTTON oBtMarcProx RESOURCE "PMSSETADOWN"   OF oBar GROUP ACTION Eval( bMarcProx )
oBtMarcProx:Align := CONTROL_ALIGN_LEFT
oBtMarcProx:cToolTip:=OemToAnsi(STR0094)	// "Move a Marca‡„o para o Proximo Dia..."
oBtMarcProx:cTitle  :=""

bReordMarc := { || ReordMarc(o1Get) }
DEFINE BUTTON oBtReordMarc RESOURCE "ALTERA"   OF oBar GROUP ACTION Eval( bReordMarc )
oBtReordMarc:Align := CONTROL_ALIGN_LEFT
oBtReordMarc:cToolTip:= OemToAnsi(STR0214) // "Reordene as marcações"
oBtReordMarc:cTitle  :=""

//-- Titulo Marcacao
oTitulo:= tSay():New(000,125,{||OemToAnsi(STR0078)},oBar,,,,,,.T.,,,50,20)
oTitulo:oFont:= oFont

n:=o1Get:oBrowse:nAt

IF ( nMinMax == 0 )
	oBtMarcGaL:Disable()
	oBtMarcGa1:Disable()
EndIF

IF lPona240
	IF !( nOpcX == 2 )
		obtMarcApo:Disable()
	EndIF
	obtMarcRea:Disable()
EndIF

IF ( ( nOpcX == 2 ) .or. ( nOpcX == 5 ) ) .Or. lPnaMrc
	o1Panel:lReadOnly 			:= .T.
EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fDelAponta()    ³Autor ³Mauricio MR        ³ Data ³18/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Liberacao de Delecao de Apontamento                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fDelAponta()												   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³										 					   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pn280ChoiBar                                                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*
*/
Function fDelAponta()
Local lRet		:= .T.
Local nPosFlag	:= GdFieldPos(( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" ) + "FLAG")

//--Somente Permite a eliminacao de apontamentos digitados pelo usuario
lRet:=If( "I" == aCols[n,nPosFlag], .T. , .F. )

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280ModSetaCols³Autor ³Mauricio MR        ³ Data ³08/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Deletar/Restaurar as Marcacoes/Apontamentos do Dia           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280ModSetaCols( @oDlg , @oGet, aCols, bBlocoCond )		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³oDlg - Objeto de Dialogo para Refresh     				   ³±±
±±³          ³oGet - Objeto GetDados para Refresh      					   ³±±
±±³          ³aCols- Array de Elementos									   ³±±
±±³          ³bBlocoCond - Condicao que Valida a Operacao				   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pn280ChoiBar                                                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280ModSetaCols( oDlg , oGet ,aCols,bBlocoCond,lMarc)

Local cMotivo	  := ""
Local cHelp		  := ""
Local nX		  := 0
Local nLenaCols   := Len( aCols )
Local nPosTipoReg := 0
Local nPosMotiVrg := 0
Local nPosTpmCrep := 0

DEFAULT bBlocoCond:={|nX|.T.}
DEFAULT lMarc := .F.

If lPort1510 .and. lMarc
	nPosTipoReg	:= GdFieldPos( "P8_TIPOREG")
	nPosMotiVrg	:= GdFieldPos( "P8_MOTIVRG")
	nPosTpmCrep	:= GdFieldPos( "P8_TPMCREP")
	For nX := 1 To nLenaCols
		If !aCols[ nX , nSvUsado ] .and. aCols[ nX , nPosTipoReg ] == "O"
			If !fGetMotivo(@cMotivo, @cHelp, 2)
				MsgAlert( cHelp , STR0044 ) //cHelp###Atenção
				Return( NIL )
			Else
				Exit
			EndIf
		EndIf
	Next nX
EndIf

For nX := 1 To nLenaCols
	If ( lPort1510 .and. lMarc .and. aCols[ nX , nPosTipoReg ] == "O" )
		If !aCols[ nX , nSvUsado ]
			aCols[ nX , nPosMotiVrg ] := cMotivo
			aCols[ nX , nPosTpmCrep ] := "D"
		Else
			aCols[ nX , nPosMotiVrg ] := Space(100)
			aCols[ nX , nPosTpmCrep ] := Space(1)
		EndIf
	EndIf
		aCols[ nX , nSvUsado ] := !aCols[ nX , nSvUsado ]
Next nX

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³GetNewResult³ Autor ³Mauricio MR            ³ Data ³31/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Remontar aResult                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³GetNewResult(aResult,aLastApo,aArrayMain,aArrayAnt,aTabCalend)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aResult	 -> Array com os Resultados Dia a Dia		    	³±±
±±³          ³aLastApo	 -> Array com os Resultados Dia a Dia Ja Apontados  ³±±
±±³          ³aArraY   	 -> Dados Atuais Baseados em aCols                  ³±±
±±³          ³aArraYAnt  -> Dados Anteriores Baseados no 1o. aCols          ³±±
±±³          ³aTabCalend -> Calendario de Marcacoes                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function GetNewResult(aResult,aLastApo,aArrayMain,aArrayAnt,aTabCalend,lForceApont)

Local aOrdem		:= {}
Local bAsc			:= { || NIL }
Local bSrt			:= { | x , y | Dtos( x[1] ) + x[2] < Dtos( y[1] ) + y[2] }
Local cOrdem		:= ""
Local nOrdIni		:= Val( aTabCalend[ 01 , CALEND_POS_ORDEM ] )
Local nOrdFim		:= Val( aTabCalend[ Len( aTabCalend ) , CALEND_POS_ORDEM ] )
Local nPos			:= 0
Local nPos1			:= 0
Local nX			:= 0
Local nFornX		:= Len( aLastApo )
Local nPosOrdem		:= GdFieldPos("P8_ORDEM")
Local nArray		:= Len( aArrayMain )
Local nArrayAnt		:= Len( aArrayAnt )
Local nTamP8Ordem	:= ( TamSx3("P8_ORDEM")[1] )

//-- Variaveis para Posicionamento no Arquivo
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
nPosApon 			:= GdFieldPos(cPrefix+"APONTA",aSvTree[G_MARC,G_HEADER])

IF ( nFornX > 0 )

	aOrdem := Array( nOrdFim , 3 )
	For nOrdIni := nOrdIni To nOrdFim
		cOrdem := StrZero( nOrdIni , nTamP8Ordem )
		aOrdem[ nOrdIni , 01 ] := cOrdem
		aOrdem[ nOrdIni , 02 ] := {}
		aOrdem[ nOrdIni , 03 ] := {}
		IF ( nPos := aScan( aArrayMain , { |x| x[nPosOrdem] == cOrdem } ) ) > 0
			For nX := nPos To nArray
				IF aArrayMain[ nX , nPosOrdem ] == cOrdem
					aAdd( aOrdem[ nOrdIni , 02 ] , aClone( aArrayMain[ nX ] ) )
					aOrdem[ nOrdIni , 02 , Len( aOrdem[ nOrdIni , 02 ] ), nPosApon]:= 	IF( lForceApont,"N",aArrayMain [ nX , nPosApon])		//10 - Flag de Apontamento
				Else
					Exit
				EndIF
			Next nX
		EndIF
		IF ( nPos := aScan( aArrayAnt ,	{ |x| x[nPosOrdem] == cOrdem } ) ) > 0
			For nX := nPos To nArrayAnt
				IF aArrayAnt[ nX , nPosOrdem ] == cOrdem
					aAdd( aOrdem[ nOrdIni , 03 ] , aClone( aArrayAnt[ nX ] ) )
				Else
					Exit
				EndIF
			Next nX
		EndIF
	Next nOrdIni

	bAsc :=	{ |x|	x[01] == aLastApo[nX,01] .and. ;	//Data da Geracao
					x[02] == aLastApo[nX,02] .and. ;	//Codigo do Evento
					x[04] == aLastApo[nX,04] .and. ;	//Centro de Custo
					x[05] == aLastApo[nX,05] 	   ;	//Tipo de Marcacao
			 }

	nOrdIni := Val( aTabCalend[ 01 , CALEND_POS_ORDEM ] )

	For nOrdIni := nOrdIni To nOrdFim
		IF fCompArray( aOrdem[ nOrdIni , 02 ] , aOrdem[ nOrdIni , 03 ] )
			IF( nPos := aScan( aTabCalend , { |x| x[CALEND_POS_ORDEM] == aOrdem[ nOrdIni , 01 ] .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0
				IF ( nPos1 := aScan( aLastApo , { |x| x[01] == aTabCalend[ nPos , CALEND_POS_DATA_APO ] } ) ) > 0
					For nX := nPos1 To nFornX
						IF aLastApo[ nX , 01 ] == aTabCalend[ nPos , CALEND_POS_DATA_APO ] .and. aScan( aResult , bAsc ) == 0
							aAdd( aResult , aClone( aLastApo[ nX ] ) )
						Else
							Exit
						EndIF
					Next nX
				EndIF
			EndIF
		EndIF
	Next nOrdIni

	aSort( aResult ,,, bSrt  )

EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PutFlagMarc ³ Autor ³Mauricio MR           ³ Data ³01/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Setar o Flag de Marcacao Apontada e atualiza o código do	   ³±±
±±³turno do apontamento												  	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³PutFlagMarc( aArrayMain , aMarcacoes )                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aArrayMain  -> Array com a Estrutura do Acols contendo  Todas³±±
±±³          ³              Marcacoes do Funcionario                       ³±±
±±³          ³aMarcacoes -> Array utilzado para o Apontamento              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PutFlagMarc( aArrayMain , aMarcacoes )

Local nArray		:= 0
Local nForArray		:= Len( aArrayMain )

//-- Variaveis Posicao dos Campos no aHeader
Local nPos			:= 0
Local nPosData		:= GdFieldPos("P8_DATA")
Local nPosHora		:= GdFieldPos("P8_HORA")
Local nPosOrdem		:= GdFieldPos("P8_ORDEM")
Local nPosAponta	:= GdFieldPos("P8_APONTA")
Local nPosTpMarc	:= GdFieldPos("P8_TPMARCA")
Local nPosTurno		:= GdFieldPos("P8_TURNO")
Local nPosDel		:= aSvtree[G_MARC,G_NSVUSADO]

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Carrega o Flag de Apontamento nas Marcacoes                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
For nArray := 1 To nForArray
	IF ( nPos := aScan( aMarcacoes , { |x|	x[AMARC_DATA]  == aArrayMain[ nArray , nPosData  ] .and.	;
				 							x[AMARC_HORA]  == aArrayMain[ nArray , nPosHora  ] .and.	;
											x[AMARC_ORDEM] == aArrayMain[ nArray , nPosOrdem ]		;
							 		  };
					   );
		) > 0
		aArrayMain[ nArray , nPosAponta ]	:= aMarcacoes[ nPos , AMARC_APONTA ]
		aArrayMain[ nArray , nPosTpMarc ]	:= aMarcacoes[ nPos , AMARC_TIPOMARC ]
		aArrayMain[ nArray , nPosTurno ]	:= aMarcacoes[ nPos , AMARC_TURNO ]
	//-- Para Marcacoes Deletadas Considera como Apontadas
	ElseIf aArrayMain[ nArray , nPosDel ]
	       aArrayMain[ nArray , nPosAponta ] := "S"
	EndIF
Next nArray

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ListCalend   ³ Autor ³Mauricio MR          ³ Data ³19/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Montar ListBox do Calendario de Marcacoes                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ListCalend(aListBox , aColunas, lDivergencias,aAuxHeader     ³±±
±±³          ³               aAuxSize)  			                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aListBox    -> Array com os Conteudos do ListBox             ³±±
±±³          ³aColunas    -> Array com Colunas Selecionadas                ³±±
±±³          ³lDivergencias -> Monta Coluna para Divergencias de Apon/Marc.³±±
±±³          ³aAuxHeader  -> Array de Cabecalho 						   ³±±
±±³          ³aAuxSize    -> Array Tamanho das Colunas do Cabecalho        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA040                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
STATIC Function ListCalend( aListBox ,aColunas,lDivergencias, aAuxHeader, aAuxSize)

Local aSinaliza		:= {}

// Variaveism Arrays Auxiliares
Local aLine			:= {}

Local  aListHeaders:={ ""													 			,;	//01 - BitMap
					  OemToAnsi( STR0012 )									 			,;	//02 - "Data Ref."
					  OemToAnsi( STR0024 )									 			,;	//03 - "Dia Sem."
					  OemToAnsi( STR0013 )									 			,;	//04 - "Hora"
					  OemToAnsi( STR0014 )									 			,;	//05 - "Marca‡„o Tipo"
					  OemToAnsi( STR0015 )									 			,;	//06 - "Turno"
					  OemToAnsi( STR0016 )									 			,;	//07 - "Seq."
					  OemToAnsi( STR0017 )									 			,;	//08 - "Ordem"
					  OemToAnsi( STR0070 )									 			,;	//09 - "Regra"
					  OemToAnsi( STR0018 )									 			,;	//10 - "Centro de Custo"
					  OemToAnsi( STR0019 )									 			,;	//11 - "Data Lim."
					  OemToAnsi( STR0020 )								 	  			,;	//12 - "Hora Lim."
					  OemToAnsi( STR0061 )								 	  			,;	//13 - "Hrs.Trab"
					  OemToAnsi( STR0062 )								 	  			,;	//14 - "Hrs.Inter"
 					  OemToAnsi( STR0023 )								 	  			,;	//15 - "Exce‡„o"
 					  OemToAnsi( STR0074 )								 	  			,;	//16 - "Afastado"
					  OemToAnsi( STR0077 )	 } 												//17 - "Motivo do Afastamento"

Local aListCols:= 	{ 	    GetTextWidth(0,Replicate("I",04))							  		,;	//01 - BitMap
							GetTextWidth(0,Replicate("B",Len(Dtoc(dDatabase))))	 			,;	//03 - "Data Ref."
							GetTextWidth(0,Replicate("A",10))						 			,;	//04 - "Dia Sem."
							GetTextWidth(0,Replicate("B",05))						 			,;	//05 - "Hora"
							GetTextWidth(0,Replicate("B",10))						 			,;	//06 - "Marca‡„o Tipo"
							GetTextWidth(0,Replicate("B",Max(Len(SP8->P8_TURNO),05)))			,;	//07 - "Turno"
							GetTextWidth(0,Replicate("B",Max(Len(SRA->RA_SEQTURN),05)))		,;	//08 - "Seq."
							GetTextWidth(0,Replicate("B",Max(Len(SP8->P8_ORDEM),05)))			,;	//09 - "Ordem"
							GetTextWidth(0,Replicate("B",Max(Len(SRA->RA_REGRA),05)))			,;	//10 - "Regra"
							GetTextWidth(0,Replicate("B",Len(SP8->P8_CC)))						,;	//11 - "Centro de Custo"
							GetTextWidth(0,Replicate("B",Max(Len(Dtoc(dDatabase)),09)))		,;	//12 - "Data Lim."
							GetTextWidth(0,Replicate("B",12))					 	  			,;	//13 - "Hora Lim."
							GetTextWidth(0,Replicate("B",12))					 	  			,;	//14 - "Hrs.Trab"
							GetTextWidth(0,Replicate("B",12))					 	  			,;	//15 - "Hrs.Inter"
							GetTextWidth(0,Replicate("B",Len(SP2->P2_MOTIVO)))			 		,;	//16- "Exce‡„o"
							GetTextWidth(0,Replicate("B",05))									,;	//17 - "Afastado"
 							GetTextWidth(0,Replicate("B",25))			 						 ;	//18 - "Motivo do Afastamento"
						}

Local nX

DEFAULT aListBox	:= {}
DEFAULT aListSint	:= {}
DEFAULT aColunas	:= {CALEND_ELEM_BITMAP, CALEND_ELEM_DATA,CALEND_ELEM_DIA_SEMANA,CALEND_ELEM_HORA,CALEND_ELEM_TIPO_MARCACAO,CALEND_ELEM_TURNO,;
						CALEND_ELEM_SEQUENCIA,CALEND_ELEM_ORDEM,CALEND_ELEM_REGRA,CALEND_ELEM_CENTRO_DE_CUSTO,CALEND_ELEM_DATA_LIMITE,;
						CALEND_ELEM_HORA_LIMITE,CALEND_ELEM_HORAS_TRABALHADAS,CALEND_ELEM_HORAS_INTERVALO,CALEND_ELEM_EXCECAO, CALEND_ELEM_AFASTADO,;
						CALEND_ELEM_DESC_AFASTAMENTO}

DEFAULT lDivergencias:= .F.

//-- Sizes
If lDivergencias
   aSize(aColunas,Len(aColunas)+1)
   aIns(aColunas, 1)
   aColunas[1]:=0
   For nX:=1 to Len(aColunas)
       aColunas[nX]++
   Next nX

   aSize(aListCols,Len(aListCols)+1)
   aIns(aListCols, 1)
   aListCols[1]:= 	GetTextWidth(0,"W")

   aSize(aListHeaders,Len(aListHeaders)+1)
   aIns(aListHeaders, 1)
   aListHeaders[1]:=""

   For nX:=1 to Len(aListBox)
       aSize(aListBox[nX],Len(aListBox[nX])+1)
       aIns(aListBox[nX], 1)
   	   aListBox[nX,1]:=.F.
   Next nX

   aAuxSize:={}
   Aeval(aColunas,{|nElem|AADD(aAuxSize,aListCols[nElem])})

   aAuxHeader:={}
   Aeval(aColunas,{|nElem|AADD(aAuxHeader ,aListHeaders[nElem])})

Else
	aAuxSize	:= 	aClone(aListCols)
	aAuxHeader	:=	aClone(aListHeaders)
Endif

Return( NIL )

Static Function Pn280LoadList(oListBox, aListBox, lScrollHoriz, lMudaData)

DEFAULT aListBox	:= {}
DEFAULT lScrollHoriz:=.T.
DEFAULT lMudaData:=.F.

oListBox:lHScroll:=lScrollHoriz  //Habilita/Desabilita barra de rolagem horizontal para nao mostrar as demais colunas
If lMudaData
	Aeval(aListBox,{|x| If(!Empty(x[25]),x[2] := x[25], nil)})
EndIf
oListBox:SetArray(aListBox)

oListBox:bLine	:={ || LineLstBox( oListBox ) }

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280MarcCols   ³ Autor ³Mauricio MR               ³ Data ³12/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carrega Array com a Estrutura do aCols                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280MarcCols(aCabFile,aArrayMain,aRecno,aField,nOpcX,lVazio,lCount)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                         	     	  ³±±
±±³          ³                                                   		          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³nMarcacoes                                               	     	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                         	     	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                          	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function P280MarcCols(aCabFile,aArrayMain,aRecno,aField,nOpcX,lVazio,lCount)
//-- Variaveis Arquivos
Local aArea				:= GetArea()
Local cAlias			:= IF( lPona240 , "SPG" , "SP8" )
Local cPrefix			:= ( PrefixoCpo( cAlias ) + "_" )

//-- Variaveis Pesquisa em arquivo
Local cFilMat			:= SRA->( RA_FILIAL + RA_MAT )

//-- Variaveis para Geracao de Marcacoes
Local dPerIGeA			:= dPerIni
Local dPerFGeA			:= Min( dPerFim , dDataBase )
Local lMarcAuto			:= .F.

//-- Variaveis para controle de Loop
Local nX				:= 0
Local nMarcacoes		:= 0
Local nY				:= 0
Local nLenCpos			:= Len(aCpos)

//-- Variaveis posicao dos campos no aHeader
Local nPosSX3Uso		:= fPosColField("X3_USADO"		,aCabec)
Local nPosSX3Nivel		:= fPosColField("X3_NIVEL"		,aCabec)
Local nPosSX3Campo		:= fPosColField("X3_CAMPO"		,aCabec)
Local nPosSX3Context	:= fPosColField("X3_CONTEXT"	,aCabec)
Local nPosSX3Tamanho	:= fPosColField("X3_TAMANHO"	,aCabec)
Local nPosSX3Tipo		:= fPosColField("X3_TIPO"		,aCabec)

Local nPosDt			:= GdFieldPos(cPrefix+"DATA")
Local nPosAponta		:= GdFieldPos(cPrefix+"APONTA")

Local lMvMcAutMm		:= ( SuperGetMv( "MV_MCAUTMM" , NIL , "N" , cFilAnt ) == "S" )
Local lGetMarcAuto		:= ( SuperGetMv( "MV_GETMAUT" , NIL , "S" , cFilAnt ) == "S" )

Local nCpo				:= 0

// variaveis utilizadas no FillGetDados
Local bMontCols			:= {|| }
Local lRetor280			:= .t.
Local aNoFields 		:= {cPrefix+"MAT",cPrefix+"NOME"}
Local bSeekWhile		:= {||  SP8->P8_FILIAL+SP8->P8_MAT }				//(cAlias)->cPrefix+"FILIAL" + (cAlias)->cPrefix+"MAT" }
Local nOrdcAlias		:= RetOrdem( cAlias , (cAlias)->(cPrefix+"FILIAL"+cPrefix+"MAT"+cPrefix+"ORDEM"+Dtos(ctod(cPrefix+"DATA"))+Str(Val(cPrefix+"HORA") ,5,2) ) )
//---------------------------------------------------

DEFAULT aArrayMain		:= {}
DEFAULT aRecno			:= {}
DEFAULT aField			:= {}
DEFAULT nOpcX			:= 3.00
DEFAULT lVazio			:= .F.
DEFAULT lCount			:= .F.

Begin Sequence

	aField			:= {cPrefix+"FILIAL",cPrefix+"MAT"}
	aCpos	:= {}
	aAux	:= {}
	aCabec	:= {}
	nLenEstrut	:= 0

	//Carrega a Estrutura do SX3
	aCabec	:=	SX3->(Dbstruct())
	nLenEstrut	:=	Len(aCabec)

	SX3->( DbSetOrder(1) )
	SX2->( MsSeek( cAlias ) )
	SX3->( MsSeek( cAlias ) )

	While SX3->( !Eof() .and. Upper( AllTrim( X3_ARQUIVO ) ) == cAlias )
		//-- Carrega Todos os Campos do Alias de acordo com a estrutura lida acima
		For nX:=1 To nLenEstrut
		   If fContemStr(aCabec[nX,01] , "X3_TITULO",.T.)
		       SX3->( aAdd( aAux, AllTrim( X3Titulo() ) ) )
		   ElseIf fContemStr(aCabec[nX,01] , "X3_USADO",.T.)
		       SX3->( aAdd( aAux,x3uso(x3_usado)))
		   Else
		       SX3->( aAdd( aAux, &(aCabec[nX,01]) ) )
		   Endif
		Next nX
		aAdd(aCpos,aAux)
		SX3->( dbSkip() )
		aAux	:= {}
	End While

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Monta aArrayMain que Contem Todas as Marcacoes do Funcionario³
	³mas Possui a Estrutura do aCols							  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF ( !( lVazio ) .or. ( lCount ) )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega as Marcacoes apenas quando estiver vazio            ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If Empty(aMarcacoes)

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica se Deve Carregar as Marcacoes Automaticas.         ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			If !( lGetMarcAuto )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Apenas Quando nao For Exclusao/Visualizacao, Nao Provir   de³
				³ Acumulados e se o parametro MV_MCAUTMM estiver com "S"	  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				If ( ( nOpcX == 5 ) .or. ( lPona240 ) .or. !( lMvMcAutMm ) )
					lGetMarcAuto := .T.
				EndIf
			EndIf

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega as Marcacoes do Funcionario                         ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			bMontCols	:= {|| lRetor280	:= GetMarcacoes(	@aMarcacoes			,;	//01 -> Marcacoes dos Funcionarios
								@aTabCalend			,;	//02 -> Calendario de Marcacoes (Podera ser Modificado em fDiasFolga()
								@aTabPadrao			,;	//03 -> Tabela Padrao
								NIL              	,;	//04 -> Turnos de Trabalho
								dPerIni 			,;	//05 -> Periodo Inicial
								dPerFim				,;	//06 -> Periodo Final
								SRA->RA_FILIAL		,;	//07 -> Filial
								SRA->RA_MAT			,;	//08 -> Matricula
								SRA->RA_TNOTRAB		,;	//09 -> Turno
								SRA->RA_SEQTURN		,;	//10 -> Sequencia de Turno
								SRA->RA_CC			,;	//11 -> Centro de Custo
								cAlias				,;	//12 -> Alias para Carga das Marcacoes
								.T.					,;	//13 -> Se carrega Recno em aMarcacoes
								.T.		 		 	,;	//14 -> Se considera Apenas Ordenadas
								NIL					,;  //15 -> Verifica as Folgas Automaticas
								NIL  				,;  //16 -> Se Grava Evento de Folga Mes Anterior
								lGetMarcAuto	 	,;	//17 -> Se Carrega as Marcacoes Automaticas
								@aRecsMarcAutDele    ;	//18 -> Registros de Marcacoes Automaticas que deverao ser Deletados
							   ) }

			aHeader	:= {}

			// Carregando a GetMarcações para carregar o aCols
			FillGetDados(nOpcx					 ,; //1-nOpcx - número correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
						 cAlias				 	 ,; //2-cAlias - area a ser utilizada;
						 nOrdcAlias				 ,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
						 cFilMat 	 			 ,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
						 bSeekWhile				 ,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
						 NIL					 ,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
						 aNoFields		   	     ,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
						 NIL					 ,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
						 NIL					 ,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
						 NIL					 ,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
						 bMontCols			     ,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
						 If(nOpcx=3,.t.,.f.)    ,; //12-lEmpty
						 aHeader				 )  //13-aHeaderAux

			nUsado	:= Len(aHeader)
			nSvUsado:= nUsado + 1

			If !lRetor280
				nMarcacoes := -1
				Help(' ',1,'TPADNCAD')
				Break
			EndIF

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Apenas Quando nao For Exclusao e  Nao Provir de Acumulados  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( !( nOpcX == 5 ) .and. !( lPona240 ) .and. ( lMvMcAutMm ) )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Define o Periodo para a Geracao das Marcacoes Automaticas   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				IF SRA->( RA_ADMISSA > dPerIni .and. RA_ADMISSA <= dPerFim )
					dPerIGeA := SRA->RA_ADMISSA
				EndIF
				IF SRA->( RA_DEMISSA < dPerFim .and. !Empty( RA_DEMISSA ) )
					dPerFGeA := SRA->RA_DEMISSA
				EndIF
				dPerIGeA	:= Max( dPerIGeA , dPerIni  )
				dPerFGeA	:= Min( dPerFGeA , Min( dDataBase , dPerFim ) )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Salva Conteudo de aMarcacoes para Verificar Havera  Reaponta³
				³ Mento														  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				aCloneMarc	:= aClone( aMarcacoes )
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Gera marca‡oes Autom ticas.                                 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				PutMarcAuto( aTabCalend , @aMarcacoes , dPerIGeA , dPerFGeA , SRA->RA_FILIAL )

				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Compara aMarcacoes com aConeMarc para ver se Havera Reaponta³
				³ tamento													  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		    	lGeraAuto := !fCompArray( aMarcacoes , aCloneMarc )
			EndIF
		EndIf

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica o Numero de Registros de aMarcacoes	              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		nMarcacoes	:= Len( aMarcacoes )

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta o aCols Baseado em aMarcacoes 			              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF !lCount
			For nX := 1 To nMarcacoes
				IF !( lMarcAuto := Empty( aMarcacoes[ nX , 05 ] ) )
					( cAlias )->( dbGoto( aMarcacoes[ nX , 05 ] ) )
					aAdd( aRecno , {aMarcacoes[ nX , 05 ],nX} )

				EndIF
				nCpo	:= 0

				For nY:=1 To nLenCpos
	                IF aCpos[nY,nPosSX3Uso] .AND. cNivel >= aCpos[nY,nPosSX3Nivel] .and. ASCAN(aField,Trim(aCpos[nY,nPosSX3Campo])) = 0
						If aCpos[nY,nPosSX3Context] == "V"
						   	nCpo++
							aArrayMain[nX,nCpo] := CriaVar(AllTrim(aCpos[nY,nPosSX3Campo]),Nil, Nil, aCabec, aCpos)
							aAdd( aVirtual , AllTrim(aCpos[nY,nPosSX3Campo]) )
					    Else
					    	nCpo++
							IF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"DATA" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_DATA ]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"HORA" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_HORA ]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"ORDEM" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_ORDEM ]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"FLAG" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_FLAG ]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo], cPrefix+"TURNO" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_TURNO ]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"FUNCAO" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_FUNCAO]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"GIRO" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_GIRO]
					        ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"CC" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_CC ]
					        ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"APONTA" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_APONTA ]
					        ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"RELOGIO" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_RELOGIO ]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"TPMARCA" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_TIPOMARC ]
							ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"PAPONTA" , .T. )
								aArrayMain[nX,nCpo] := IF( Empty( aMarcacoes[ nX , AMARC_PERAPONTA ] ) , cPerAponta , aMarcacoes[ nX , AMARC_PERAPONTA ] )
							ElseIF lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"DATAAPO" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_DATAAPO ]
							ElseIF lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"NUMREP" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_NUMREP ]
							ElseIF lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"TPMCREP" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_TPMCREP ]
							ElseIF lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"TIPOREG" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_TIPOREG ]
							ElseIF lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo], cPrefix+"MOTIVRG" , .T. )
								aArrayMain[nX,nCpo] := aMarcacoes[ nX , AMARC_MOTIVRG ]
							Else
								IF lMarcAuto
									IF aCpos[nY,nPosSX3Tipo] == "C"
										IF fContemStr(aCpos[nY,nPosSX3Campo] , cPrefix+"CC" , .T. )
											aArrayMain[nX,nCpo] := CalendRetCpo( cPrefix+"CC"  )
										ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"FLAG" , .T. )
											aArrayMain[nX,nCpo] := "I"
										ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"ORDEM" , .T. )
											aArrayMain[nX,nCpo] := CalendRetCpo( cPrefix+"ORDEM"  )
					                    ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"TURNO" , .T. )
											aArrayMain[nX,nCpo] := CalendRetCpo( cPrefix+"TURNO"  )
										ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"PAPONTA" , .T. )
											aArrayMain[nX,nCpo] := cPerAponta
										Else
											aArrayMain[nX,nCpo] := Space(aCpos[nY,nPosSX3Tamanho] )
										EndIF
									ElseIF aCpos[nY,nPosSX3Tipo] == "N"
										aArrayMain[nX,nCpo] := 0
									ElseIF aCpos[nY,nPosSX3Tipo] == "D"
										aArrayMain[nX,nCpo] := Ctod("//")
									Else
										aArrayMain[nX,nCpo] := .F.
									EndIF
								Else
									aArrayMain[nX,nCpo] := (cAlias)->( &(aCpos[nY,nPosSX3Campo]) )
								EndIF
							EndIF
						EndIF
					EndIF
				Next nLenCpos

				// Atribuindo o cAlias e Recno para ser utilizado no WT
				aArrayMain[nX,nUsado-1] :=	cAlias
				aArrayMain[nX,nUsado]   :=	aMarcacoes[ nX , AMARC_RECNO ]
				aArrayMain[nX,nUsado+1] := 	.F.

			Next nX
			aRecnoClone:=aClone(aRecno)
			aArrayAnt := aClone( aArrayMain )
		EndIF
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta Array do 1§ Elemento Vazio. 	   					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !lCount
		IF nMarcacoes == 0 .or. lVazio
			nMarcacoes := 1.00
			aArrayMain := Array( nMarcacoes , nSvUsado )
			nCpo	:= 0

			For nY:=1 To nLenCpos
	            IF aCpos[nY,nPosSX3Uso] .AND. cNivel >= aCpos[nY,nPosSX3Nivel] .and. ASCAN(aField,Trim(aCpos[nY,nPosSX3Campo])) = 0
					nCpo++
					IF aCpos[nY,nPosSX3Tipo] == "C"
						IF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"CC" , .T. )
							aArrayMain[nMarcacoes,nCpo] := CalendRetCpo( cPrefix+"CC"  )
						ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"FLAG" , .T. )
							aArrayMain[nMarcacoes,nCpo] := "I"
						ElseIF fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"ORDEM" , .T. )
							aArrayMain[nMarcacoes,nCpo] := CalendRetCpo( cPrefix+"ORDEM"  )
	                    ElseIF fContemStr(aCpos[nY,nPosSX3Campo] , cPrefix+"TURNO" , .T. )
							aArrayMain[nMarcacoes,nCpo] := CalendRetCpo( cPrefix+"TURNO"  )
	                    ElseIF fContemStr(aCpos[nY,nPosSX3Campo] , cPrefix+"PAPONTA" , .T. )
							aArrayMain[nMarcacoes,nCpo] := cPerAponta
						ElseIf lPort1510 .and. fContemStr(aCpos[nY,nPosSX3Campo] , cPrefix+"TPMCREP" , .T. )
							aArrayMain[nMarcacoes,nCpo] := Space(1)
						ElseIf lPort1510 .and. fContemStr(aCpos[nY,nPosSX3Campo] , cPrefix+"TIPOREG" , .T. )
							aArrayMain[nMarcacoes,nCpo] := "I"
						ElseIf lPort1510 .and. fContemStr(aCpos[nY,nPosSX3Campo] , cPrefix+"MOTIVRG" , .T. )
							aArrayMain[nMarcacoes,nCpo] := Space(100)
						Else
							aArrayMain[nMarcacoes,nCpo] := CriaVar( aCpos[nY,nPosSX3Campo], .T. )
						EndIF
					ElseIF aCpos[nY,nPosSX3Tipo] == "N"
						If lPort1510 .and. fContemStr(aCpos[nY,nPosSX3Campo] , cPrefix+"NUMREP" , .T. )
							aArrayMain[nMarcacoes,nCpo] := 0
						Else
							aArrayMain[nMarcacoes,nCpo] := CriaVar( aCpos[nY,nPosSX3Campo], .T. )
						EndIf
					ElseIF aCpos[nY,nPosSX3Tipo] == "D"
						IF lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"DATAAPO" , .T. )
							aArrayMain[nMarcacoes,nCpo] := CalendRetCpo( cPrefix+"DATAAPO"  ,.F., olBoxSint)
						Else
							aArrayMain[nMarcacoes,nCpo] := Ctod("//")
						EndIf
					Else
						aArrayMain[nMarcacoes,nCpo] := .F.
					EndIF
		            IF aCpos[nY,nPosSX3Context] == "V"
		               aAdd( aVirtual , AllTrim(aCpos[nY,nPosSX3Campo]) )
					EndIF
				EndIF

			Next nLenCpos

            // Montagem do aArrayMain para WT
			aArrayMain[1,Len(aArrayMain[1])-2] 	:=	"" 	// alias()
			aArrayMain[1,Len(aArrayMain[1])-1] 	:=	0 	// Recno()
			aArrayMain[1,Len(aArrayMain[1])] 	:= .F.

			nMarcacoes := 0
		EndIF
	EndIF

End Sequence

RestArea( aArea )

Return( nMarcacoes )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280MarcGet  ³Autor ³Mauricio MR           ³ Data ³23/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Monta o aCols Dia a Dia de Acordo com a Ordem do   Calendario³±±
±±³          ³de Marcacoes e Salva as Alteracoes Efetuadas em aArrayMain.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280MarcGet()												   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³< Vide Parametros Formais >								   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Apontamento                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function P280MarcGet(    aCols		,; //Array da GetDados
								aArrayMain	,; //Array com Todas as Informacoes de Marcacoes
								aField		,; //Campos Que Nao Constarao no aHeader
								oDlg		,; //Objeto de Dialogo
								oGet		,; //Objeto GetDados
								nOpcX		,; //Opcao do aRotina
								lTudoOk 	; //Se montado a partir de TudoOk
							  )

//-- Variaveis para Posicionamento no Arquivo
Local cPrefix	:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
//-- Variaveis para controle da Ordem da Marcacao
Local aOrdem	:= {}
Local cOrdem	:= ""

//-- Variaveis para posicao dos campos no aHeader
Local nPosOrdem	:= 0
Local nPosData	:= 0
Local nPosHora	:= 0
Local nPosFlag	:= 0
Local nPosApon	:= 0

//-- Variaveis para controle de Loop
Local nX		:= 0
Local nLenX 	:= 0
Local nY		:= 0
Local nLenY		:= 0

//-- Variaveis para controle de Processamento
Local lManutenc	:= .F.
Local lPrimeira := ( PCount() == 0 )

Static aMarcStatic

DEFAULT nOpcX	:= 3.00
DEFAULT lTudoOk := .F.

IF lPrimeira
	aMarcStatic := NIL
Else
    nPosOrdem	:= GdFieldPos(cPrefix+"ORDEM")
    nPosData	:= GdFieldPos(cPrefix+"DATA")
    nPosHora	:= GdFieldPos(cPrefix+"HORA")
    nPosFlag	:= GdFieldPos(cPrefix+"FLAG")
    nPosApon	:= GdFieldPos(cPrefix+"APONTA")
	nLenX 		:= Len( aArrayMain )

	cOrdem		:= CalendRetCpo( cPrefix+"ORDEM" )

	IF aMarcStatic != NIL .and. !fCompArray( aMarcStatic , aCols )
		nLenY := Len( aElem )
		For nY := 1 To nLenY
			If nY <= Len(aCols)
				IF !fCompArray( aArrayMain[ aElem[ nY ] ] , aCols[ nY ] )
					lManutenc := .T.
					aArrayMain[ aElem[ nY ] ] := aClone( aCols[ nY ] )
					aAdd( aOrdem , aCols[ nY , nPosOrdem ] )
					aArrayMain[ aElem[ nY ] , nPosFlag ] := "M"
					aArrayMain[ aElem[ nY ] , nPosApon ] := Space(01)
				EndIF
			EndIF
		Next nY

		IF Len( aCols ) > Len( aMarcStatic )
			IF nLenX == 1.00 .and. Empty( aArrayMain[ nLenX , nPosData ] )
				aArrayMain := {}
			EndIF
			nLenY := Len( aCols )
			For nY := nY To nLenY
				IF !Empty( aCols[ nY , nPosData ] ) .and. !aCols[nY , nSvUsado ]
					aAdd( aArrayMain , aClone( aCols[ nY ] ) )
				EndIF
			Next nY
		ElseIF nLenY == 0 .and.( ( ( nLenY := Len( aCols ) ) == Len( aMarcStatic ) ) .and. nLenY == 1.00 )
			IF Len( aArrayMain ) == nLenY    .and. !Empty(aElem)
				aArrayMain[ nLenY ] := aClone( aCols[ nLenY ] )
			Else
				aAdd( aArrayMain , aClone( aCols[ nLenY ] ) )
			EndIF
		EndIF
		If !lPort1510 //-- Se portaria estiver ativa nao faz sort pois deve ser mantida a ordem para que registros originais nao sejam apagados
			aSort( aArrayMain ,,, { |x,y|;
									 DataHora2Str(x[nPosData],x[nPosHora])+x[nPosOrdem];
									 <;
									 DataHora2Str(y[nPosData],y[nPosHora])+y[nPosOrdem];
							   };
				  )
		EndIf
		IF lManutenc
			nLenY := Len( aOrdem )
			nLenX := Len( aArrayMain )
			For nY := 1 To nLenY
				IF ( nX := aScan( aArrayMain , { |x| x[ nPosOrdem ] == aOrdem[ nY ] } ) ) > 0
					For nX := nX To nLenX
						IF aArrayMain[ nX , nPosOrdem ] == aOrdem[ nY ]
							aArrayMain[ nX , nPosApon ] := Space(01)
						Else
							Exit
						EndIF
					Next nX
				EndIF
			Next nY
			aOrdem		:= {}
			lManutenc	:= .F.
		EndIF
		//-- Iguala arrays de apontamentos para futura comparacao de alteracao de conteudo
		aMarcStatic := aClone( aCols )
	EndIF

	nSvnAt	:= oLBoxSint:nAt

	IF !lTudoOk

		aCols  := {} ; aElem := {}
		IF ( nX := aScan( aArrayMain , { |x| x[ nPosOrdem ] == cOrdem } ) ) > 0
			nLenX := Len( aArrayMain )
			For nX := nX To nLenX
				IF aArrayMain[ nX , nPosOrdem ] == cOrdem
					aAdd( aCols , aClone( aArrayMain[ nX ] ) )
					aAdd( aElem, nX  )
				EndIF
			Next nX
		Else
			P280MarcCols(aHeader,@aCols,,aField,nOpcX,.T.)
		EndIF
		//-- Iguala arrays de apontamentos para futura comparacao de alteracao de conteudo
	   	aMarcStatic := aClone( aCols )
		aColsAnt 	:= aClone( aCols )
		n := 1.00
	    oGet:aCols:=aClone(aCols)
	    oGet:ForceRefresh()
		oGet:oBrowse:Refresh()
		oGet:Refresh()
		oGet:oBrowse:nAt := n

	EndIF

EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280Aponta  ³ Autor ³Mauricio MR          ³ Data ³19/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Efetuar o Apontamento das Marcacoes                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280Aponta(oGet,nOpcX,lForceApont)	  		 		       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oGet   		-->Objeto GetDados                     		   ³±±
±±³          ³ nOpcx  		-->Opcao de Manutencao da Rotina       		   ³±±
±±³          ³ lForceApont 	-->.T. Forca o Reapontamento           		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pn280ChoiBar                                                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280Aponta(oGet,nOpcX,lForceApont)

Local aLastMarca	:= {}
Local lGrava		:= .F.
//-- Variaveis para controle de Processamento
Local lClassifica	:= ( PCount() != 0 )
Local lReaponta		:= .F.
Local aArrayAux		:= {}
Local nPosData		:= GdFieldPos("P8_DATA")
Local nPosHora		:= GdFieldPos("P8_HORA")
Local dPerIniAux    := CtoD('')
Local dPerFimAux    := CtoD('')
Local lMudaData		:= .F.
Local lProcessa		:= .F.

DEFAULT lForceApont	:= 	.F.
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³lRF0ChkTable determina o Uso do Pre-Abonos					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
DEFAULT lRF0ChkTable	:= fVerTabRF0()  	//Verifica a Existencia da Tabela de Pre-Abonos e se a mesm possui registro

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Efetua o Apontamento Apenas Quando nao For Visualizacao       ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( nOpcX == 2 ) .And. !lPnaMrc
    //-- Carregar Sempre o ultimo Resultado
    aLastApo:=aClone( P280PrepRes( aSvTree[G_APO,G_HEADER], aSvTree[G_APO,G_MAIN], @aLastApo, aSvTree[G_ABO, G_MAIN], aSvTree[G_ABO,G_HEADER] ,lRF0ChkTable))

    //-- Carrega Sempre o ultimo Resultado
    aResult:=aClone(aLastApo)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Salva aMarcacoes pois se nao Houver diferencas entre os   valo³
	³res Atuais e Anteriores de aCols (aArrayMain e aArrayAnt) este³
	³nao sera carregado Novamente								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	aLastMarca	:= aClone( aMarcacoes )

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reinicializa aMarcacoes e aResult sempre que for efetuar     o³
	³Apontamento e se Existirem Diferencas nos Dados               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	aMarcacoes	:= {}
	IF lClassifica
		IF ( !fCompArray(aArrayMain,aArrayAnt) ) .or. lGeraAuto
			aResult		:= {}
			aArrayAnt	:= aClone( aArrayMain )
			If !lForceApont
				dPerIniAux  := dPerIni
				dPerFimAux  := dPerFim
				lMudaData   := .T.
				dPerIni 	:= aCols[1,nPosData]
				dPerFim     := aCols[1,nPosData]
			EndIf
		EndIF
		lGrava	:= .F.
	EndIF

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Prepara, Aponta as Marcacoes e Grava os Apontamentos          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF( lForceApont , aLastApo := {} , NIL )

	//Reordenada array por data e hora se portaria estiver ativada,
	//pois pode estar fora de ordem devido a utilização da função
	//para recarregar marcacoes originais
	If lPort1510
		aArrayAux := aClone(aArrayMain)
		aSort( aArrayMain ,,, { |x,y|;
							 DataHora2Str(x[nPosData],x[nPosHora]);
							 <;
							 DataHora2Str(y[nPosData],y[nPosHora]);
					   };
		  )
	EndIf

	lProcessa	:= ( lGrava .and. Len( aLastApo ) == 0 )

	If ( _lGrava )
		_lGrava	:= PreparaCla(	@aMarcacoes																						,;	//Array de Marcacoes
					@aResult																									,;	//Array de Marcacoes
					NIL																											,;	//Numero de Colunas de Marcacoes
					lProcessa							 																		,;	//Gravar ou Nao o Apontamento
					( lReaponta := ( lForceApont .or. Empty(aResult) .or. lGeraAuto) )											,;	//Reprocessar Apontamento	--			( lReaponta := ( lForceApont .or. !fCompArray(aArrayMain,aArrayAnt).or.Empty(aResult) .or. lGeraAuto) )	,;	Reprocessar Apontamento
					aArrayMain																									,;	//Array com as Marcacoes do SP8
					aHeader																										,;	//Array com o Cabecalho de aArrayMain
					nSvUsado															 								   		,;	//Indice do Elemento Logico de aArrayMain
					( lForceApont )														 						 				,;	//Forca o Reapontamento
					.T.																	 						 				,;	//Chamada do PONA280(desabilita MsAguarde da funcao Aponta())
					aSvTree																 						 				 ;	//Array com informações do acols da SPC, SP8 e SPK
				  )
	EndIf

	If lMudaData
		dPerIni 	:= dPerIniAux
		dPerFim 	:= dPerFimAux
		lMudaData 	:= .F.
	EndIf

	IF Len( aLastApo ) > 0

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Remonta aResult                                               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		IF lReaponta
			GetNewResult(@aResult,aLastApo,aArrayMain,aArrayClone,aTabCalend, lForceApont)
		EndIF

		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Caso, PreparaCla apenas Grava o Apontamento             ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
		If (_lGrava)
			_lGrava	:= PreparaCla(	@aMarcacoes											,;	//Array de Marcacoes
						@aResult											,;	//Array de Resultados
						NIL													,;	//Numero de Colunas de Marcacoes
						lGrava												,;	//Gravar ou Nao o Apontamento
						.F.													,;	//Reapontar as Marcacoes
						aArrayMain											,;	//Array com as Marcacoes do SP8
						aHeader												,;	//Array com o Cabecalho de aArrayMain
						nSvUsado									     	,;	//Indice do Elemento Logico de aArrayMain
						NIL													,;
						.T.			 						 				 ;	//Chamada do PONA280(desabilita MsAguarde da funcao Aponta())
					  )
		EndIf

	EndIF

	//Restaura a ordem original do ArrayMain
	If lPort1510
		aArrayMain := aClone( aArrayAux )
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Restaura aMarcacoes para Poder Estar Gravando o Flag de Aponta³
	³mento														   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF Empty( aMarcacoes )
		aMarcacoes := aClone( aLastMarca )
	EndIF

	If lRF0ChkTable
		fMuda(1,DESCARREGA,.F.)
		fMuda(3,,.F.)
		AtualAbo(aResult, @aSvTree[G_APO, G_MAIN], aSvTree[G_APO,G_HEADER], @aSvTree[G_ABO, G_MAIN], aSvTree[G_ABO,G_HEADER])
		fMuda(3,,.F.)
		P280AboGet(@aCols,@aArrayMain,aField,,,,.T.)          //Atualiza aAboCols/AboMain
		fMuda(3,DESCARREGA,.F.)
		fMuda(1,,.F.)
    Endif

EndIF

//-- Apos o Apontamento Atualiza Flag das Marcacoes indicando que foram apontadas
//-- e atualiza o código do Turno
PutFlagMarc( @aArrayMain , aMarcacoes)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Salva o Conteudo de aArrayMain para verificar se sera  preciso³
³estar reprocessando o Apontamento.(Apenas Qdo. Nao Visualizar)³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !( nOpcX == 2 ) // Sava o arraymain mesmo quando for visualizacao para exibir todos os dados dos apontamentos
	aArrayAnt := aClone( aArrayMain )
Else
	aResult := {}
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Neste Ponto lGeraAuto deve ser Setado como .F. para que nao ha³
³ja Apontamento Desnecessario								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
lGeraAuto := .F.

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³AtualAbo	 ³Autor ³Equipe Advanced RH   ³ Data ³06/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Atualiza o array de abonos  							    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >								  	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function AtualAbo(aResult, aSPC, aHeaderSPC, aSPK, aHeaderSPK)

Local aAbonos		:= {}
Local aNewaCols		:= {}
Local aInfAbonos	:= {}
Local aPreAbonos 	:= {}
Local bAsc			:= {||NIL}
Local bAscNew		:= {||NIL}
Local cCodAbono
Local cPrefix		:= ( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" )
Local dData			:= CalendRetCpo( cPrefix+"DATA",,,cPrefix )
Local nLine			:= 0
Local nFornX		:= 0
Local nX			:= 0
Local nY			:= 0
Local nFornY		:= 0
Local nPos			:= 0
Local nPosData		:= GdFieldPos(cPrefix+"DATA"		,	aHeaderSPC)
Local nPosPD		:= GdFieldPos(cPrefix+"PD"			,	aHeaderSPC)
Local nPosPDI		:= GdFieldPos(cPrefix+"PDI"			,	aHeaderSPC)
Local nPosCC		:= GdFieldPos(cPrefix+"CC"			,	aHeaderSPC)
Local nPosTP		:= GdFieldPos(cPrefix+"TPMARCA"		,	aHeaderSPC)
Local nPosAbono		:= GdFieldPos(cPrefix+"ABONO"		,	aHeaderSPC)
Local nPosQTAbono   := GdFieldPos(cPrefix+"QTABONO"		,	aHeaderSPC)
Local nPosQuantC	:= GdFieldPos(cPrefix+"QUANTC"		,	aHeaderSPC)
Local nPosDelete	:= aSvTree[G_APO, G_NSVUSADO]
Local nPosPkData	:= GdFieldPos("PK_DATA",aHeaderSPK)
Local nPosPkTpMa	:= GdFieldPos("PK_TPMARCA",aHeaderSPK)
Local nPosPkCod		:= GdFieldPos("PK_CODABO",aHeaderSPK)

bAsc   := { |x|	x[nPosData	] == aResult[ nX , ARESULT_DATA		] .and. ;
				x[nPosPD	] == aResult[ nX , ARESULT_EVENTO	] .and. ;
				x[nPosCC	] == aResult[ nX , ARESULT_CC		] .and. ;
				x[nPosTP	] == aResult[ nX , ARESULT_TPMARCA	] .and. ;
				!x[nPosDelete];
		  }
bAscNew:= { |x| x[AABONOS_DATA		] == aPreAbonos[nY, AABONOS_DATA  		] .and. ;
				x[AABONOS_CODEVE	] == aPreAbonos[nY, AABONOS_CODEVE		] .and. ;
				x[AABONOS_CC		] == aPreAbonos[nY, AABONOS_CC			] .and. ;
				x[AABONOS_TPMARCA	] == aPreAbonos[nY, AABONOS_TPMARCA		] .and. ;
				x[AABONOS_HORAS_ABO	] == aPreAbonos[nY, AABONOS_HORAS_ABO	] .and. ;
				x[AABONOS_FLAG] == 'P';
		  }
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³lRF0ChkTable determina o Uso do Pre-Abonos						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
DEFAULT lRF0ChkTable	:= fVerTabRF0()  	//Verifica a Existencia da Tabela de Pre-Abonos e se a mesm possui registro

nFornX:= Len(aResult)

For nX:= 1 to nFornX
	nHrsAbono	:=0
	nHrsAbono	:= fAbonos( aResult[ nX , ARESULT_DATA ] , aResult[ nX , ARESULT_EVENTO ] , NIL , @aAbonos , aResult[ nX , ARESULT_TPMARCA ] , aResult[ nX , ARESULT_CC ] , aSPK )
	fFiltAbo( aAbonos , { |x| x[ AABONOS_FLAG ] == "P" } , { |x| x[ AABONOS_FLAG ] <> "P" } , @aInfAbonos )
	cCodAbono	:= IF( !Empty( aInfAbonos ) , aInfAbonos[ 01 , AABONOS_CODIGO ] , "" )
    aNewAbonos	:= {}
    aPreAbonos	:= {}

    IF ( ( lRF0ChkTable ) .and. Empty( aInfAbonos ) )

			aNewAbonos	:= aResult[ nX , ARESULT_RESULT_APO ]
			nHrsPreAbono:= fFiltAbo( aAbonos , { |x| x[ AABONOS_FLAG ] <> "P"} , { |x| x[ AABONOS_FLAG ] == "P"} , @aPreAbonos )

		    nHrsAbono	:= __TimeSub( nHrsAbono , nHrsPreAbono )

		    nHrsAbono	:= __TimeSum( nHrsAbono ,  aResult[ nX , ARESULT_NUM_ABO_HRS]) //01 -> Array com as Horas Abonadas para o Evento do Dia (Evento + Tipo Marc + C.Custo)

			cCodAbono	:= IF( !Empty( aInfAbonos ) , aInfAbonos[ 01 , AABONOS_CODIGO ] , IF( !Empty( aResult[ nX , ARESULT_RESULT_APO] ) , aResult[ nX , ARESULT_RESULT_APO, 01 , AABONOS_CODIGO ] , "" ) )
    EndIF

   	IF ( ( nPos := aScan( aSPC , bAsc ) ) > 0 )
		IF (( aSPC[ nPos, nPosQuantC ] <> aResult[ nX, ARESULT_HORAS ] ) .or. ( aSPC[ nPos, nPosAbono ] <> cCodAbono ) .or.( aSPC[ nPos, nPosQTAbono ] <> nHrsAbono ))
			GdFieldPut( "PC_QUANTC" 	, aResult[ nX , ARESULT_HORAS  	]		,nPos		, aHeaderSPC, @aSPC)
			GdFieldPut( "PC_QTABONO" 	, Min(nHrsAbono,aResult[ nX , ARESULT_HORAS  	]) 							,nPos		, aHeaderSPC, @aSPC)
			GdFieldPut( "PC_ABONO" 		, cCodAbono 							,nPos		, aHeaderSPC, @aSPC)

		EndIF
	EndIF

	//-- Deleta Pre-Abono
	If !Empty(aPreAbonos)
		//-- Elimina Pre-Abonos Anteriores
		nFornY := Len( aPreAbonos )
		For nY := 1 To nFornY
	    	If (nPos := aScan( aNewAbonos , bAscNew ) ) == 0
	           aSPK[ aPreAbonos[ nY , AABONOS_RECNO ], aSvTree[G_ABO,G_NUSADO+1] ]:= .T.
	        Else
	           aNewAbonos[nPos, AABONOS_FLAG]:='$'
	        Endif
		Next nY
		aPreAbonos	:= {}
    Endif

	//-- Transfere Horarios dos Novos Pre-Abonos
	If !Empty(aNewAbonos)
		//-- Corre novos Horarios
		nFornY := Len( aNewAbonos )

		For nY := 1 To nFornY
			If (aNewAbonos[nY, AABONOS_FLAG] == '$')
			   Loop
			Endif

			If Len(aSPK)==1 .AND. Empty(aSPK[1,nPosPkData ])
			   nLine:=1
			   //aAdd(aSPK,aNewAbonos[nY,5])
			Else
			    P280AboCols(aHeaderSPK,@aNewaCols  	,, aSvTree[G_ABO, G_FIELDS],,,.T.)
				
				If ( (Empty(aNewaCols[1,nPosPkCod]) .And. !Empty(aNewAbonos[nY,AABONOS_CODIGO])) .Or. (!Empty(aNewaCols[1,nPosPkCod]) .And. aNewAbonos[nY,AABONOS_CODIGO] == aNewaCols[1,nPosPkCod] ) )
					aNewaCols[1,nPosPkData] := aNewAbonos[nY,AABONOS_DATA]
					aNewaCols[1,nPosPkCod] := aNewAbonos[nY,AABONOS_CODIGO]
					aNewaCols[1,nPosPkTpMa] := aNewAbonos[nY,AABONOS_TPMARCA]
				EndIf
				
				If aScan(aSPK , {|x| (x[nPosPkData] == aNewaCols[1,nPosPkData]) .And. (x[nPosPkTpMa] == aNewaCols[1,nPosPkTpMa]) .And. (x[nPosPkCod] == aNewaCols[1,nPosPkCod])}) == 0
					AADD(aSPK,aNewaCols[1])
				EndIf
				nLine:=Len(aSPK)
			Endif
			GdFieldPut( "PK_CODABO" , aNewAbonos[ nY, AABONOS_CODIGO ] 				,nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_CODEVE" , aResult[ nX , ARESULT_EVENTO]					,nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_MOTABO" , fDesc("SP6",aNewAbonos[ nY, AABONOS_CODIGO ]	,"P6_DESC"	,TamSx3("P6_DESC")[1] )	,nLine, aHeaderSPK, @aSPK)
		    GdFieldPut( "PK_DATA"   , aResult[ nX , ARESULT_DATA]					,nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_CC"		, aResult[ nX , ARESULT_CC]						,nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_HRSABO" , Round(aNewAbonos[ nY, AABONOS_HORAS_ABO	],2),nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_HORINI" , aNewAbonos[ nY, AABONOS_HORAS_INI	] 			,nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_HORFIM" , aNewAbonos[ nY, AABONOS_HORAS_FIM	] 			,nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_TPMARCA", aResult[ nX , ARESULT_TPMARCA]				,nLine		, aHeaderSPK, @aSPK)
			GdFieldPut( "PK_FLAG" 	, 'P'											,nLine		, aHeaderSPK, @aSPK)

			//-- Adiciona numero registro da Faixa de Abonos
			If ( Len(aNewAbonos[ nY]) >=  (ELEMENTOS_AABONOS + 1 ) )
			   	If (aScan(aRF0Faixa,{|x| x == aNewAbonos[ nY , ELEMENTOS_AABONOS + 1 ] }) == 0 )
					AADD(aRF0Faixa, aNewAbonos[ nY , ELEMENTOS_AABONOS + 1 ] )
				Endif
			Endif
		Next nY
		aNewAbonos	:= {}
	Endif
Next nX

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Pn280TelaTpMarc ³ Autor ³ Mauricio MR           ³ Data ³ 25/06/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³A) Cria Tela para Escolha de um horario entre todos os horarios   ³±±
±±³          ³previstos para determinada Data (uma unica Marcacao).             ³±±
±±³          ³B) Atualiza Marcacao da Janela principal com a marcacao Aletatoria³±±
±±³          ³gerada a partir de determinado horario da tabela padrao.          ³±±
±±³          ³C) Atualiza Todas as Marcacoes da Janela Principal numa determina-³±±
±±³          ³da Data com Marcacoes Aleatorias Geradas a Partir dos horarios da ³±±
±±³          ³tabela de horario padrao.                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Sintaxe  ³ Pn280TelaTpMarc(oDlg , oGet , lTodas , nMinMax,bChange)          ³±±
±±³          ³ oDlg        --> Janela Principal                                 ³±±
±±³          ³ oGet        --> Get a ser atualizado                             ³±±
±±³          ³ lTodas      --> Gera Marcacoes aleatorias p/todo o dia corrente  ³±±
±±³          ³                 sem exibir a tela para escolha de marcacoes.     ³±±
±±³          ³ nMinMax     --> Minima e Maxima valor da Marcacao a ser Gerada.  ³±±
±±³          ³ bChange     --> Bloco para Atualizacao de Objetos                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pona280              	                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280TelaTpMarc(oDlg , oGet , lTodas , nMinMax,bChange)

//-- Variaveis para Retorno da Funcao
Local nOpcA				:= 	0
Local lRet				:= .T.
Local aKeys				:= GetKeys()

Local aAdv10Size		:= {}
Local aInfo10AdvSize	:= {}
Local aObj10Coords 		:= {}
Local aObj10Size		:= {}

//-- Variaveis Teclas Confirma/Abandona Dialogo (Ctrl+O/Ctrl+X)
Local bSet15			:= { || NIL }
Local bSet24			:= { || NIL }

//-- Variaveis Teclas Confirma/Abandona Dialogo (Ctrl+O/Ctrl+X)
Local aColunas	:= {CALEND_ELEM_BITMAP, CALEND_ELEM_DIA_SEMANA,CALEND_ELEM_HORA,CALEND_ELEM_TIPO_MARCACAO,CALEND_ELEM_TURNO,;
					CALEND_ELEM_SEQUENCIA,CALEND_ELEM_ORDEM,CALEND_ELEM_REGRA,CALEND_ELEM_CENTRO_DE_CUSTO,CALEND_ELEM_DATA_LIMITE,;
					CALEND_ELEM_HORA_LIMITE,CALEND_ELEM_HORAS_TRABALHADAS,CALEND_ELEM_HORAS_INTERVALO,CALEND_ELEM_EXCECAO, CALEND_ELEM_AFASTADO,;
					CALEND_ELEM_DESC_AFASTAMENTO}
Local nCalend	:= ELEMENTOS_DO_CALENDARIO


//-- Cria Lista do Calendario para 1 unica Data
aListBoxCol		:= Aclone(P280GetData())

//-- Descarrega Get Dados para Variaveis
fVarGet(@oGet, @aHeader, @aCols, @n, DESCARREGA)
oGet:oBrowse:SetFocus()
If ! lTodas
	//-- Cria Dialogo de Calendario de uma Data

	aAdv10Size		:= MsAdvSize(,.T.,370)
	aInfo10AdvSize	:= { aAdv10Size[1] , aAdv10Size[2] , aAdv10Size[3] , aAdv10Size[4] , 5 , 5 }
	aAdd( aObj10Coords , { 000 , 000 , .T. , .T. , .T. } )		//1-ListBox
	aObj10Size		:= MsObjSize( aInfo10AdvSize , aObj10Coords )


	oDlg2 			:= MSDIALOG():Create()
	oDlg2:cName 	:= "oDlg2"
	oDlg2:cCaption 	:= OemToAnsi(STR0021)
	oDlg2:nLeft 	:= 0
	oDlg2:nTop 		:= 0
	oDlg2:nWidth 	:= aAdv10Size[5]
	oDlg2:nHeight 	:= aAdv10Size[6]
	oDlg2:lShowHint := .T.
	oDlg2:lCentered := .F.

	ListCalend( aListBoxCol,aColunas,,@aAuxHeader, @aAuxSize)
	o2LBox := TWBrowse():New( aObj10Size[1,1],aObj10Size[1,2],aObj10Size[1,3],aObj10Size[1,4],,aAuxHeader,aAuxSize,oDlg2,,,, ,,,,,,,,.F.,,.T.,,.F.,,,)
	Pn280LoadList(o2LBox, aListBoxCol, .F.)
	o2LBox:lHScroll := .T.  //Habilita barra de rolagem horizontal para mostrar as demais colunas
	o2LBox:nFreeze  := 0

	//-- Blocos de Codigos para Confirmar e Abandonar o Dialogo
	//-- Ao confirmar  geracao da marcacao, posicionamos o Calendario Completo de acordo com a marcacao
	//-- escolhida
	bSet15	:= { || nOpcA := 1, olBox:nAt:=( (aListSint[olBoxSint:nAt,nCalend + If(lCalendDiverg,2,1) ] - 1) + o2Lbox:nAt), RestKeys(aKeys, .T.), oDlg2:End()  }

	//-- Antes de Fechar o dialogo alterar setar nOpca para 3 senao realizamos a pergunta de abandono 2 vezes
	bSet24 	:= { || nOpca := 3, RestKeys(aKeys, .T.), oDlg2:End(),.T. }


	ACTIVATE MSDIALOG oDlg2  ON  INIT (	EnchoiceBar (oDlg2, bSet15, bSet24, NIL),fProgTeclas('4')) Valid (If(nOpca == 0 ,Eval(oDlg2:bSet24) ,.T.))

	//-- Confirmou Operacao
	If nOpcA==1
	   Pn230GeraMarc( @oDlg , @oGet , lTodas , nMinMax,.F. )

	   fVarGet(@oGet, @aHeader,@aCols,@n)

	   oGet:ForceRefresh()
   	   oGet:oBrowse:Refresh()
       oDlg:Refresh()

	   olBox:nAt:= aListSint[olBoxSint:nAt,nCalend + If(lCalendDiverg,2,1) ]
	Else
	    //-- Aborta operacao
	    lRet:=.F.
	Endif
Else
	//Gera Marcacoes para Todas os Horarios do Dia
    //-- Posiciona no Elemento do Calendario completo
    olBox:nAt:= aListSint[olBoxSint:nAt,nCalend + If(lCalendDiverg,2,1) ]
    Pn230GeraMarc( @oDlg , @oGet , lTodas , nMinMax, .F. )

 	fVarGet(@oGet, @aHeader,@aCols,@n)

	oGet:ForceRefresh()
   	oGet:oBrowse:Refresh()
    oDlg:Refresh()
    olBox:nAt:= aListSint[olBoxSint:nAt,nCalend + If(lCalendDiverg,2,1)]

EndIf

//-- Restaura programacao de Teclas para Janela Principal e Marcacoes
fProgTeclas('0')
fProgTeclas('1')

RestKeys(aKeys,.T.)

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³P280GetData     ³ Autor ³ Mauricio MR           ³ Data ³ 25/06/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³A) Cria uma Lista Com todas os Horarios Previstos para uma deter- ³±±
±±³          ³minada ordem.                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Sintaxe  ³ P280GetData()                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pona280              	                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function P280GetData(cOrdem)
//-- Variavel para Arquivo
Local cPrefix		:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
//-- Variavel de Retorno
Local aList			:={}
Local nQtdeHrsTrab  :={}

//-- Variaveis para controle de Loop
Local nX			:= 0
Local nLenaListBox  := 0
Local nInicio		:= olBoxSint:nAt
Local nPosOrdem		:= 0
Local nCalend		:= ELEMENTOS_DO_CALENDARIO

If !(cOrdem == NIL)
   nInicio:=Ascan(aListSint,{|X| x[CALEND_ELEM_ORDEM] == cOrdem})
Endif

DEFAULT cOrdem := CalendRetCpo( cPrefix+"ORDEM" )

nLenaListBox:=Len(aListBox)

//-- Corre Todos os Elementos da Lista de Calendario enquanto for a mesma ordem
For nX:=aListSint[nInicio,nCalend + If(lCalendDiverg,2,1) ] To nLenaListBox

	//-- Se mesma Ordem aCrescenta Marcacao
	If aListBox[nX,CALEND_ELEM_ORDEM] == cOrdem
     	AADD(aList,aClone(aListBox[nX]) )
  	Else
		Exit
  	Endif

Next nX

Return aList

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280TpTelaBar ³ Autor ³Mauricio MR           ³ Data ³20/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Monta Button Bar de Tipos de Marcacoes                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280TpTelaBar( oDlg , bOk  , bCancel    , nOpcX )                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oDlg    --> Janela dos Tipos de Marcacao           		         ³±±
±±³          ³ bOk     --> Bloco para Confirmacao da Escolha do Tipo de Marcacao ³±±
±±³          ³ bCancel --> Bloco para Cancelamento da Escolha do Tipo de Marcacao³±±
±±³          ³ nOpcx   --> Opcao de Manutencao                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280TpTelaBar( oDlg , bOk  , bCancel    , nOpcX )

//-- Variaveis Objetos
Local oTitulo,oPanel

//-- Cria Painel
oPanel:= TPanel():New(35,67,,oDlg,,,,,,245,12,.F.,.F.)

DEFINE BUTTONBAR oBar SIZE 50,50 3D TOP OF oDlg

oPanel:nLeft 		:= 00
oPanel:nTop 		:= 00
oPanel:nWidth 		:= 636
oPanel:nHeight 		:= 24
oPanel:lShowHint 	:= .T.

//-- Acrescenta Botoes. As coordenadas do primeiro botão servem como referencia para
//-- os demais.

DEFINE BUTTON  oBtTpOk  RESOURCE "OK" 	ACTION Eval( bOK )	OF oBar
oBtTpOk:Align := CONTROL_ALIGN_LEFT
oBtTpOk:cToolTip	:= OemToAnsi(STR0041)  // "Ok - <Ctrl-O>"
oBtTpOk:cTitle		:= OemToAnsi(STR0141)  // "Ok"
DEFINE BUTTON  oBtTpCan RESOURCE "CANCEL" ACTION Eval( bCancel )	OF oBar
oBtTpCan:Align := CONTROL_ALIGN_LEFT
oBtTpCan:cToolTip	:= OemToAnsi(STR0042)  // "Cancelar - <Ctrl-X>"
oBtTpCan:cTitle		:= OemToAnsi(STR0142)  // "Cancelar"
//-- Titulo Calendario
oTitulo:= tSay():New(000,125,{||OemToAnsi(STR0021)},oBar,,,,,,.T.,,,50,20)
oTitulo:oFont:= oFont
oTitulo:Align := CONTROL_ALIGN_LEFT

oDlg:bSet15:=bOk
oDlg:bSet24:=bCancel

Return( NIL )

/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
//                    F U N C O E S     A P O N T A M E N T O S
/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fConfApo    ³ Autor ³Mauricio MR           ³ Data ³01/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Configura Janela de Apontamentos                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fConfApo()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³              											   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fConfApo()

Local nRet:= 0

//-- Variaveis Arquivos
Local cAlias		:= IF( lPona190 , "SPH" , "SPC" )
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cFilMat		:= SRA->( RA_FILIAL + RA_MAT )
Local nOrdcAlias	:= RetOrdem( cAlias , (cAlias)->(cPrefix+"FILIAL"+cPrefix+"MAT"+cPrefix+"PD"+Dtos(ctod(cPrefix+"DATA"))+cPrefix+"TPMARCA"+cPrefix+"CC" ) )
Local bSeekWhile	:= {|| }
Local bSeekFor		:= {|| }
Local aNoFields 	:= { cPrefix + "MAT", cPrefix + "NOME" }

//-- Arrays Apontamentos
Private aCabec		:= {}
Private aCpos		:= {}
Private aField 		:= {cPrefix+"FILIAL",cPrefix+"MAT"}  	//-- Campos NAO Exibidos no GetDados
Private aBrancoField:= {}
Private aHeader		:= Array( 0 )     			//-- Cabecalho do GetDados
Private aCols		:= {}						//-- Linhas Detalhes do GetDados
Private aArrayMain	:= {}						//-- Array PRINCIPAL com TODAS as linhas do GetDados
Private aArrayClone	:= {}                      	//-- *** A VERIFICAR *** Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
Private aElem		:= {}						//-- Array com Numeros correspondentes as Linhas do ArrayMain
Private aVirtual	:= {}						//-- Array de Campos Virtuais
Private aAlter		:= {cPrefix+"DATA",cPrefix+"PD"}	//-- Array de Campos NAO ALTERAVEIS
Private aRecno		:= {}						//-- Array de Numero de Registros Fisicamente Gravados

//-- Numericos Apontamentos
Private nUsado		:= 0
Private nSvUsado	:= 0
Private nCnt		:= 0
Private n   		:= 0

Begin Sequence

bTrataApo:={|lTudOk|P280ApoGet(@aCols,@aArrayMain,aField,@oDlg,@o2Get,nOpcX,lTudOK)}          //Atualiza aApoCols baseado no ApoMain
bMarcList:=;
 {|x|;
	 fMuda(2,DESCARREGA),;  			//-- Salva as Informacoes dos Apontamentos em Matriz Auxiliar
	 fMuda(1),;  						//-- Carrega Informacoes das Marcacoes
	 Eval(bTrataMarc,.F.),;          	//-- Atualiza Marcacoes
	 fMuda(1,DESCARREGA),;  			//-- Salva as Informacoes das Marcacoes em Matriz Auxiliar
	 fMuda(2);  						//-- Recarrega as Informacoes dos Apontamentos
 }

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta o cabecalho, retorna estrutura dos arquivos            ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aRetorno:=P280Head(aField,@aHeader,cAlias,@nUsado,.T.)

bSeekWhile	:= {|| (cAlias)->( &(cPrefix+"FILIAL") + &(cPrefix+"MAT") ) }
bSeekFor	:= {|| (cAlias)->( &(cPrefix+"FILIAL") + &(cPrefix+"MAT") ) == cFilMat .and. (cAlias)->( !Empty( &(cPrefix+"DATA") ) .and. &(cPrefix+"DATA") >= dPerIni .and. &(cPrefix+"DATA") <= dPerFim ) }

aHeader	:= {}
aCols	:= {}

FillGetDados(	nOpcx				,; //1-nOpcx - numero correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
				cAlias				,; //2-cAlias - area a ser utilizada;
				nOrdcAlias			,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
				cFilMat				,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
				bSeekWhile			,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
				bSeekFor			,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
				aNoFields			,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
				NIL					,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
				NIL					,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
				NIL					,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
				NIL					,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
				( nOpcx == 3 )		,; //12-lEmpty
				aHeader				,; //13-aHeaderAux
				NIL					,; //14-aColAux
				NIL					,; //15-bAfterCols - Bloco de codigo a ser executado após a inclusão de uma linha no Acols
				NIL					;  //16-bBeforeCols - Bloco de codigo contendo expressão para sair do While, é executado antes de inserir nova linha no aCols
			)

aCols := {}

aCabec 	:= Aclone(aRetorno[1])
aCpos  	:= Aclone(aRetorno[2])


//--  Calcula a Quantidade de Colunas do Array de Apontamentos
nUsado	:= Len(aHeader)
nSvUsado:= nUsado + 1

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica se existe algum dado no arquivo                     ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( nCnt := P280ApoCols(NIL		,NIL		,NIL	,NIL	, NIL	,nOpcX,NIL		,.T.) ) > 0  .and. nOpcX == 3	//--Quando Inclusao e existir Registro
	nRet:= 1
	Break
ElseIF nCnt == 0 .and. nOpcX != 3										//--Quando Nao for Inclusao e nao existir Registro
	nRet:= 2
EndIF

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Reinicializa aColsStatic a Cada Funcionario                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
P280ApoGet()

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Gerar o array aCols com os Todos os Apontamentos            ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
cTitulo 	:= OemToAnsi(STR0082)   	//"Configurando Ambiente"
cMensagem	:= OemToAnsi(STR0084)		//"Carregando Apontamentos..."
bBlocMsg	:={||P280ApoCols(aHeader	,@aArrayMain	,@aRecno	,aField	,@aVirtual	,nOpcX)}


MsAguarde(bBlocMsg,cTitulo,cMensagem,.F.)

aArrayClone := aClone(aArrayMain)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Gera aCols com 1 Elemento para a GetDados                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
P280ApoCols(aHeader,@aCols  	,		,aField , 				,nOpcX,.T.)


//-- Alimenta o Acols com os apontamentos do primeiro dia do calendario
P280ApoGet(@aCols  ,@aArrayMain,aField,		,			   ,nOpcx)

aSvtree[G_APO][G_HEADER] 		:= aClone(aHeader)
aSvtree[G_APO][G_ACOLS] 		:= aClone(aCols)
aSvtree[G_APO][G_N] 			:= Len(aCols)
aSvtree[G_APO][G_MAIN] 			:= aClone(aArrayMain)		     	//-- Array PRINCIPAL com TODAS as linhas do GetDados
aSvtree[G_APO][G_CLONE_MAIN] 	:= aClone(aArrayClone)	           	//-- Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
aSvtree[G_APO][G_ELEM] 			:= aClone(aElem)			        //-- Array com Numeros correspondentes as Linhas do ArrayMain
aSvtree[G_APO][G_VIRTUAL] 		:= aClone(aVirtual)		     		//-- Array de Campos Virtuais
aSvtree[G_APO][G_ALTER] 		:= aClone(aAlter)			        //-- Array de Campos NAO ALTERAVEIS
aSvtree[G_APO][G_RECNO] 		:= aClone(aRecno)			        //-- Array de Numero de Registros Fisicamente Gravados
aSvtree[G_APO][G_CABEC] 		:= aClone(aCabec)					//-- Array com Cabec (SX3) de Todos os Campos do Arquivo
aSvtree[G_APO][G_CPOS] 			:= aClone(aCpos)					//-- Array com Todos os Campos do Arquivo
aSvtree[G_APO][G_FIELDS] 		:= aClone(aField)					//-- Array com Campos Nao Exibiveis
aSvtree[G_APO][G_NUSADO] 		:= nUsado
aSvtree[G_APO][G_NSVUSADO] 		:= nSvUsado
aSvtree[G_APO][G_NCNT] 			:= nCnt
aSvtree[G_APO][G_BRANCOFIELD] 	:= aClone(aBrancoField)
aSvtree[G_APO][G_CLONE_ACOLS] 	:= aClone(aCols)
aSvtree[G_APO][G_CLONE_RECNO] 	:= aClone(aRecno)

End Sequence

Return nRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280ApoBar ³ Autor ³Mauricio MR           ³ Data ³18/04/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Monta Button Bar                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280ApoBar										     	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                   		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280 e PONA240                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function Pn280ApoBar(bchange)

//-- Variaveis Objetos
Local oTitulo
Local oBar
//-- Variavel posicionamento dos campos no aHeader
Local nPosFlag 		:= GdFieldPos(( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" )+ "FLAG")

//-- Cria Painel
o2Panel:= TPanel():New(aObj33Size[4,1],aObj33Size[4,2],,oDlg,,,,,,aObj33Size[4,3],aObj33Size[4,4],.F.,.F.)


DEFINE BUTTONBAR oBar SIZE 50,50 3D TOP OF o2Panel

o2Panel:lShowHint 	:= .T.

//-- Acrescenta Botoes. As coordenadas do primeiro botao servem como referencia para
//-- os demais.
DEFINE BUTTON oBtApoDel RESOURCE "SDUZAP"  	OF oBar ACTION Eval(  { ||  Pn280ModSetaCols( @oDlg , @o2Get, @o2Get:aCols, &('{ |nX| If( "I" == aCols[nX,' + Strzero(nPosFlag,6) +  '], .T. , .F. )}'), fVarGet(@o2Get, @aHeader,@aCols,@n, DESCARREGA,2) ) })
oBtApoDel:Align := CONTROL_ALIGN_LEFT
oBtApoDel:cToolTip 	:= OemToAnsi(STR0079)	// "Apagar/Restaurar Apontamentos do Dia..."
oBtApoDel:cTitle 	:= ""
//-- Chama manutencao de abonos
DEFINE BUTTON oBtApoAb RESOURCE 'note'   OF oBar ACTION  FchamaAbo(bChange)
oBtApoAb:Align := CONTROL_ALIGN_LEFT
oBtApoAb:cToolTip	:= OeMToAnsi(STR0089)  // 'Abonar/Justificar'
oBtApoAb:cTitle		:= ""
//-- Titulo Apontamento
oTitulo:= tSay():New(000,125,{||OemToAnsi(STR0081)},oBar,,,,,,.T.,,,50,20)
oTitulo:oFont:= oFont

n:=o2Get:oBrowse:nAt

IF ( ( nOpcX == 2 ) .or. ( nOpcX == 5 ) )
	obtApoDel:Disable()
EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280ApoGet   ³Autor ³Mauricio MR           ³ Data ³26/04/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Monta o aCols de Apontamento Dia a Dia de Acordo com a Data  ³±±
±±³          ³das Marcacoes e Salva as Alteracoes Efetuadas em aApoMain.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280ApoGet()												   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³< Vide Parametros Formais >								   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Apontamento                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function P280ApoGet(		aCols		,; //Array da GetDados
								aArrayMain	,; //Array com Todas as Informacoes de Apontamentos
								aField		,; //Campos Que Nao Constarao no aHeader
								oDlg		,; //Objeto de Dialogo
								oGet		,; //Objeto GetDados
								nOpcX		,; //Opcao do aRotina
								lTudoOk 	; //Se montado a partir de TudoOk
						  )

//-- Variaveis Arquivos
Local cPrefix	:= ( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" )

//-- Variaveis Controle de Datas dos Apontamentos
Local aData		:= {}
Local dData		:= cTOD('')

//-- Variaveis Controle de Loop
Local nX		:= 0
Local nLenX 	:= 0
Local nY		:= 0
Local nLenY		:= 0

//-- Variaveis posicionamento de campos em aHeader
Local nPosData	:= 0
Local nPosPD	:= 0
Local nPosPDI	:= 0
Local nPosCC	:= 0
Local nPosTP	:= 0
Local nPosFlag  := 0

//-- Variaveis Controle de Processamento
Local lManutenc	:= .F.
Local lPrimeira := ( PCount() == 0 )

Local nSvnAT	:= 0


Static aApoStatic

DEFAULT nOpcX	:= 3.00
DEFAULT lTudoOk := .F.

IF lPrimeira
	//-- Na Primeira vez Inicializa o array aApoStatic -- Array com o aCols de Apontamento de 1 dia qualquer
	aApoStatic := NIL
Else
    //-- Se nao for a Primeira Vez
	nLenX 		:= Len( aArrayMain )
	nPosData	:= GdFieldPos(cPrefix+"DATA")
	nPosPD		:= GdFieldPos(cPrefix+"PD")
	nPosPDI		:= GdFieldPos(cPrefix+"PDI")
	nPosCC		:= GdFieldPos(cPrefix+"CC")
	nPosTP		:= GdFieldPos(cPrefix+"TPMARCA")
	nPosFlag	:= GdFieldPos(cPrefix+ "FLAG")

	//-- Verifica se houve alteracao nos Apontamentos Originais do Dia Corrente
	IF aApoStatic != NIL .and. !fCompArray( aApoStatic , aCols )

		//-- Executa Gatilhos
		MyTrigger( "S"+Substr(cPrefix,1,2), aHeader, @aCols, oGet )

		nLenY := Len( aElem )
		//-- Registra Apontamentos com Alteracoes
		For nY := 1 To nLenY
			//-- Constatada Alteracao no Dia Providencia a Atualizacao do Array Principal
			IF !fCompArray( aArrayMain[ aElem[ nY ] ] , aCols[ nY ] )
				lManutenc := .T.
				aArrayMain[ aElem[ nY ] ] := aClone( aCols[ nY ] )
				//-- Armazena a Data do Dia com apontamentos Alterados
				aAdd( aData , aCols[ nY , nPosData ]  )
			EndIF
		Next nY
		//-- Verifica Novos Apontamentos
		IF Len( aCols ) > Len( aApoStatic )
		    //-- Se Existir Um apontamento mas originalmente naquela data nao havia nada apontando
			IF nLenX == 1.00 .and. Empty( aArrayMain[ nLenX , nPosData ] )
				//-- Inicializa o Array Principal de Apontamento
				aArrayMain := {}
			EndIF
			//-- Corre Todos os Apontamentos
			nLenY := Len( aCols )
			For nY := nY To nLenY
			    //-- Adiciona Novos Apontamentos Nao Deletados na Matriz Principal de Apontametno
				IF !Empty( aCols[ nY , nPosData ] ).and. (!Empty( aCols[ nY , nPosPD ] ) .OR. !Empty( aCols[ nY , nPosPDI ] ) ) .and. !aCols[nY , nSvUsado ]
					aAdd( aArrayMain , aClone( aCols[ nY ] ) )
				EndIF
			Next nY
		//-- Se foi Digitado um Apontamento
		ElseIF nLenY == 0 .and.( ( ( nLenY := Len( aCols ) ) == Len( aApoStatic ) ) .and. nLenY == 1.00 )
			IF Len( aArrayMain ) == nLenY .and. !Empty(aElem)
				aArrayMain[ nLenY ] := aClone( aCols[ nLenY ] )
			Else
				aAdd( aArrayMain , aClone( aCols[ nLenY ] ) )
			EndIF
		EndIF
        //-- Reordena os Apontamentos por Data+Codigo+Tipo de Marcacao e Centro de Custo
		aSort( aArrayMain ,,, { |x,y|;
								 DataHora2Str(x[nPosData],x[nPosPD]+x[nPosTP]+x[nPosCC]);
								 <;
								 DataHora2Str(y[nPosData],y[nPosPD]+y[nPosTP]+y[nPosCC]);
						   };
			  )
        //-- Se Algum Apontamento anterior sofreu Manutencao (Alteracao)
		IF lManutenc
			nLenY := Len( aData )
			nLenX := Len( aArrayMain )
			//-- Corre Todas as Datas com Alteracao de Apontamento
			For nY := 1 To nLenY
				IF ( nX := aScan( aArrayMain , { |x| x[ nPosData ] == aData[ nY ] } ) ) > 0
					For nX := nX To nLenX
						IF aArrayMain[ nX , nPosData ] == aData[ nY ]
						   //	aArrayMain[ nX , nPosApon ] := Space(01)
						Else
							Exit
						EndIF
					Next nX
				EndIF
			Next nY

			aData		:= {}
			lManutenc	:= .F.
		EndIF

		//-- Iguala arrays de apontamentos para futura comparacao de alteracao de conteudo
	   	aApoStatic := aClone( aCols )
	   //	aColsAnt   := aClone( aCols )

	EndIF

	IF !lTudoOk
  	    //-- Obtem o Dia Corrente de Acordo com o Calendario
  	    dData:= CalendRetCpo( cPrefix+"DATAAPO",,,cPrefix )
  	    //-- Inicialiaza aCols do GetDados e o array com os numeros das linhas correspondentes
  	    aCols  := {} ; aElem := {}
		//-- Localiza o inicio dos Apontamentos do Dia no array Principal
		IF ( nX := aScan( aArrayMain , { |x| x[ nPosData ] == dData } ) ) > 0
			nLenX := Len( aArrayMain )
			//-- Carrega os Apontamentos e os numeros das linhas correspondentes nos respectivos arrays
			For nX := nX To nLenX
			    //-- Qdo Data for Diferente do Dia Abandona Loop
			    If aArrayMain[ nX , nPosData ] <> dData
			       Exit
			    Endif
			    //-- So acrescenta elementos Nao Deletados  ou  Deletados desde que tenham sejam Informados
				IF (!aArrayMain[nX , nSvUsado ] .OR. ( aArrayMain[nX , nSvUsado ] .AND. "I" <> aArrayMain[nX , nPosFlag] ) )
					aAdd( aCols , aClone( aArrayMain[ nX ] ) )
					aAdd( aElem, nX  )
				EndIF
			Next nX

			If Empty(aCols)
			 	//-- Se nao Existir Apontamento para o Dia Carrega Todos os Apontamentos
				P280ApoCols(aHeader	,@aCols		,		,aField,			,nOpcX,.T.)
			Endif
		Else
		    //-- Se nao Existir Apontamento para o Dia Carrega Todos os Apontamentos
			P280ApoCols(aHeader	,@aCols		,		,aField,			,nOpcX,.T.)
		EndIF
		//-- Iguala arrays de apontamentos para futura comparacao de alteracao de conteudo

		aApoStatic := aClone( aCols )
		aColsAnt   := aClone( aCols )
		//-- Redesenha GetDados de Apontamento
		n := 1.00

	EndIF

    If oGet<>Nil

    	nSvnAt	:= oGet:oBrowse:nAt
 		oGet:aCols:=aClone(aCols)
		oGet:ForceRefresh()
		oGet:Refresh()
		oGet:oBrowse:Refresh()
		//-- Ao termos menos eventos apontados que anteriormente
		//-- garante que sempre seja referenciado o menor valor para a variavel 'n'
		//-- de modo a evitar Array out of bounds
		oGet:oBrowse:nAt :=n:= If( (n > nSvnAt) , nSvnAt, n )


    Endif

EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³MyTrigger		 ³ Autor ³Mauricio MR                       ³ Data ³23/08/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Executa Gatilhos 														   	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³MyTrigger( cAlias, aHeader, @aCols, oGet )							   	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³cAlias     --> Alias			      	                                      ³±±
±±³          ³aHeader    --> Array aHeader				     		     	       	 	  ³±±
±±³          ³aCols      --> Array aCols											 	  ³±±
±±³          ³oGet       --> Objeto Get					     		     	       	 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ 						                                  	      		      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	           	   	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	    		  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function MyTrigger( cAlias, aHeader, aCols, oGet )
	Local aArea	:= GetArea()
	Local aAliasArea:=(cAlias)->(GetArea())
	Local nLenX 	:= 0
	Local nLenY 	:= 0
	Local nX		:= 0
	Local nY		:= 0
	Local cCpo		:= ""
    DbSelectArea(cAlias)
 	nLenY	:= Len(aHeader)
    nLenX	:= Len(aCols)
    For nX:=1 To nLenX
      	For nY:=1 To nLenY
      		PutFileInEof( "SP6" )
      		cCpo	:= Padr(aHeader[ nY , 2 ],Len(SX3->X3_CAMPO))
      	//	M->&(aHeader[nY, 2]) := aCols[nX, nY]
   			RunTrigger(2,nX,,oGet,cCpo)
	  	Next nY
	Next nX
	RestArea(aAliasArea)
	RestArea(aArea)

Return(NIL)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280ApoCols    ³ Autor ³Mauricio MR                       ³ Data ³29/04/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carrega Apontamentos a Partir de Arquivo ou Array de Resultados       	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280ApoCols(aCabFile,aArrayMain,aRecno,aField,aVirtual,nOpcX,lVazio,lCount)³±±
±±³          ³            lArray)                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aCabFile      --> Array aHeader                                             ³±±
±±³          ³aArrayMain    --> Array com todas as Marcacoes     		     	       	  ³±±
±±³          ³aRecno        --> Array com informacoes das Marcacoes gravadas em disco 	  ³±±
±±³          ³aField       --> Campos Nao Visiveis no Get       		     	       	  ³±±
±±³          ³aVirtual      --> Campos Inexistentes Fisicamente na Estrutura do Arquivo   ³±±
±±³          ³nOpcx         --> Opcao de Manutencao da Rotina    		     	       	  ³±±
±±³          ³lVazio        --> .T. Cria elemento vazio com conteudo padroes se houver    ³±±
±±³          ³lCount        --> .T. Conta a quantidade de registros fisicos    	       	  ³±±
±±³          ³lArray        --> .T. Monta aCols a partir de Array Resultados     	      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³nApontamentos                                         	      		      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	           	   	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	    		  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function P280ApoCols(aCabFile,aArrayMain,aRecno,aField,aVirtual,nOpcX,lVazio,lCount,lArray)
//-- Variaveism Arquivos
Local aArea			:= GetArea()
Local cAlias		:= IF( lPona190 , "SPH" , "SPC" )
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
//-- Variaveis pesquisa
Local cFilMat		:= SRA->( RA_FILIAL + RA_MAT )

//-- Variavel de Posicionamento em Array
Local nPos			:= 0

//-- Variavel de Retorno
Local nApontamentos	:= 0
Local nCpo			:= 0

//-- Variaveis posicao dos campos no aHeader
Local nPosDt			:= GdFieldPos(cPrefix+"DATA"		,aCabFile)
Local nPosPd			:= GdFieldPos(cPrefix+"PD"			,aCabFile)
Local nPosPdI			:= GdFieldPos(cPrefix+"PDI"			,aCabFile)
Local nPosQuantC		:= GdFieldPos(cPrefix+"QUANTC"		,aCabFile)
Local nPosQuantI		:= GdFieldPos(cPrefix+"QUANTI"		,aCabFile)
Local nPosTp			:= GdFieldPos(cPrefix+"TPMARCA"		,aCabFile)
Local nPosCC			:= GdFieldPos(cPrefix+"CC"			,aCabFile)
Local nPosFlag			:= GdFieldPos(cPrefix+"FLAG"		,aCabFile)
Local nPosAbono			:= GdFieldPos(cPrefix+"ABONO"		,aCabFile)
Local nPosQTAbono	    := GdFieldPos(cPrefix+"QTABONO"		,aCabFile)
Local nPosDescApo		:= GdFieldPos(cPrefix+"DESC"		,aCabFile)
Local nPosDescAux		:= ""
Local nPosDtAB			:= 0
Local nUsadoSPK			:= 0

Local nPosSX3Uso       := fPosColField("X3_USADO"		,aCabec)
Local nPosSX3Nivel     := fPosColField("X3_NIVEL"		,aCabec)
Local nPosSX3Campo     := fPosColField("X3_CAMPO"		,aCabec)
Local nPosSX3Context   := fPosColField("X3_CONTEXT"	    ,aCabec)
Local nPosSX3Tamanho   := fPosColField("X3_TAMANHO"	    ,aCabec)
Local nPosSX3Tipo      := fPosColField("X3_TIPO"		,aCabec)
Local nPosSX3Relacao   := fPosColField("X3_RELACAO"		,aCabec)
Local nPosSX3Propri    := fPosColField("X3_PROPRI"		,aCabec)

//-- Variaveis controle de loop
Local nX			:= 0
Local nY			:= 0
Local nLenCpos		:= Len(aCpos)
Local nLenResult    := 0
Local nElem			:= 0
Local nLenArrayMain := 0
Local nLenArrayAnt  := 0
Local nPosArMain	:= 0

Local aArrayAnt		:= {}
Local aAbonos		:= {}
Local aLinhaArray	:= {}
Local aDataApo		:= {}
Local aPropri		:= {}

Local dDataLida     := Ctod('')
Local dData         := Ctod('')
Local nAbonos		:= 0


//---------------------variaveis
Local bSeekWhile	:= {|| }
Local bSeekFor		:= {|| }
Local aNoFields 	:= {cPrefix+"MAT",cPrefix+"NOME"}
Local nOrdcAlias	:= RetOrdem( cAlias , (cAlias)->(cPrefix+"FILIAL"+cPrefix+"MAT"+cPrefix+"PD"+Dtos(ctod(cPrefix+"DATA"))+cPrefix+"TPMARCA"+cPrefix+"CC" ) )
local nCont			:= 0
Local dDataRecno 	:= date()
Local lApHeDtM		:= ( SuperGetMv("MV_APHEDTM",,"N") == "S" )	//-- Aponta Horas Extras de Acordo com o Dia
Local nPosPkData	:= 0
Local nPosPkHrAb	:= 0
Local nPosPkCdAb	:= 0
Local nPosPkCdEv	:= 0
Local nPosPkTpMa	:= 0
DEFAULT lCpoCCT	   :=  SP4->(ColumnPos("P4_CODCCT") > 0)

DEFAULT aArrayMain	:= {}
DEFAULT aRecno		:= {}
DEFAULT aField		:= {}
DEFAULT aVirtual    := {}
DEFAULT nOpcX		:= 3.00
DEFAULT lVazio		:= .F.
DEFAULT lCount		:= .F.
DEFAULT lArray    	:= .F.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Monta Array com os Campos de Usuario para posterior          ³
³recuperacao de seu conteudo.								  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aEval(aCpos, {|x| nCpo++, If( x[nPosSX3Propri] $ "Uu", AADD(aPropri, x[nPosSX3Campo] ), Nil ) } )

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Monta Array com os Campos de Usuario para posterior          ³
³Monta aArrayMain que Contem Todos os Aponamentos  Funcionario³
³mas Possui a Estrutura do aCols							  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

IF lPona190
	bSeekWhile	:= {||SPH->PH_FILIAL + SPH->PH_MAT }
Else
	bSeekWhile	:= {||SPC->PC_FILIAL + SPC->PC_MAT }
EndIf


If !lArray
	IF !lVazio .or. lCount

		dbSelectArea( cAlias )

	    nApontamentos := 0

	   	/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Monta o aCols a partir dos Apontamentos 		              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

		If (cAlias)->( dbseek(cFilMat)  )
		    While (cAlias)->( !Eof() .and. &(cPrefix+"FILIAL") + &(cPrefix+"MAT") == cFilMat )
		        IF (cAlias)->( !Empty(&(cPrefix+"DATA")) .and. &(cPrefix+"DATA") >= dPerIni .and. &(cPrefix+"DATA") <= dPerFim )
		            nApontamentos++

	            	//-- Cria Linha de Registro de Apontamento
	            	aLinhaArray	:= Array(nSvUsado)

		            If !lCount

						// bloco utilizado na funcao FillGet para tratar os registros validados.
						bSeekFor	:= {||	(cAlias)->( &(cPrefix+"FILIAL")+&(cPrefix+"MAT") ) == cFilMat .and. (cAlias)->( !Empty(&(cPrefix+"DATA")) .and. &(cPrefix+"DATA") >= dPerIni .and. &(cPrefix+"DATA") <= dPerFim ) }

			            nCpo:=0
						nApontamentos	:= 0
						aHeader	:= {}
						aCols	:= {}

						// Montagem do aCols e aHeader
						dbSelectArea( cAlias )

						FillGetDados(	nOpcx				,; //1-nOpcx - numero correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
										cAlias				,; //2-cAlias - area a ser utilizada;
										nOrdcAlias			,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
										cFilMat				,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
										bSeekWhile			,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
										bSeekFor			,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
										aNoFields			,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
										NIL					,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
										NIL					,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
										NIL					,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
										NIL					,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
										( nOpcx == 3 )		,; //12-lEmpty
										aHeader				,; //13-aHeaderAux
										NIL					,; //14-aColAux
										NIL			 		; //15-bAfterCols - Bloco de codigo a ser executado após a inclusão de uma linha no Acols
									)

						For nY:=1 To nLenCpos
							IF aCpos[ nY, nPosSX3Uso ] .AND. cNivel >= aCpos[ nY, nPosSX3Nivel ] .and. aScan( aField, Trim( aCpos[ nY, nPosSX3Campo ] ) ) = 0
								If aCpos[ nY, nPosSX3Context ] == "V"
									If Trim( aCpos[ nY, nPosSX3Campo ] ) == cPrefix + "DESC"
										aEval( aCols, { |x| x[nPosDescApo] := DescPdPon( x[nPosPd] ) } )
									Else
										nPosDescAux	:= GdFieldPos( Trim( aCpos[ nY, nPosSX3Campo ] ), aCabFile )
										aEval( aCols, { |x| x[nPosDescAux] := CriaVar( AllTrim( aCpos[ nY, nPosSX3Campo ] ), Nil, Nil, aCabec, aCpos ) } )
									Endif
								Endif
							Endif
						Next nY

						//aEval(aCols, {|x| nApontamentos++, !Empty(aCols[x]) } )
						For nCont:= 1 to len(aCols)
							If !Empty(aCols[nCont][1])
						  		nApontamentos++
						 	Endif
						Next
						nCpo	:= nApontamentos
						aLinhaArray	:= aCols
						nSvUsado	:= Len(aHeader)+1
						nUsado		:= Len(aHeader)

			            //-- Adiciona a linha montada ao array principal onde estarao todos os
			            //-- apontamentos do funcionario naquele periodo solicitado
			            //Aadd(aArrayMain, aLinhaArray)
						aArrayMain	:=  aLinhaArray
						nPosDt		:=	GdfieldPos(cPrefix+"DATA")
						nPosPd		:=	GdfieldPos(cPrefix+"PD")
						nPosTp		:=	GdfieldPos(cPrefix+"TPMARCA")
						nPosCC		:=	GdfieldPos(cPrefix+"CC")
				        nPosRec		:=	GdfieldPos(cPrefix+"REC_WT")

				         For nCont:= 1 to len(aLinhaArray)
				            aAdd(aRecno,{})
							aAdd(aRecno[Len(aRecno)], aArrayMain[nCont,nPosDt]) //Data
							aAdd(aRecno[Len(aRecno)], aArrayMain[nCont,nPosPd]) //Evento
							aAdd(aRecno[Len(aRecno)], aArrayMain[nCont,nPosTp]) //Tipo de Marcacao
							aAdd(aRecno[Len(aRecno)], aArrayMain[nCont,nPosRec]) // Recno()
							aAdd(aRecno[Len(aRecno)], aArrayMain[nCont,nPosCC]) //C.Custo
							aAdd(aRecno[Len(aRecno)], nCont)
						 Next

					 Exit	// Sai fora do While, tem todos os registros.
				    Endif

				Endif

		        (cAlias)->( dbSkip() )
		    EndDo

		    If !lCount
				aSort(aArrayMain,,,{ |x,y| DtoS(x[nPosDt])+x[nPosPd]+x[nPosTp] < DtoS(y[nPosDt])+y[nPosPd]+y[nPosTp] })
				aSort(aRecno,,,{ |x,y| DtoS(x[1])+x[2]+x[3] < DtoS(y[1])+y[2]+y[3] } )
		    Endif

		Endif


	EndIF
Endif

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta Array a Partir de Resultados. 	   					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If lArray

   nLenResult		:= Len(aResult)
   nApontamentos 	:= 0
   aAbonos	        := {}
   aCloneAbonos		:= aClone(aSvTree[G_ABO,G_MAIN])
   nUsadoSPK		:= aSvTree[G_ABO, G_NSVUSADO]
   aArrayAnt		:= aClone(aArrayMain)
   nLenArrayAnt		:= Len(aArrayAnt)
   aArrayMain 		:= Array( nLenResult, nSvUsado )

   nPosPkData		:= GdfieldPos("PK_DATA", aSvTree[G_ABO,G_HEADER])
   nPosPkHrAb		:= GdfieldPos("PK_HRSABO", aSvTree[G_ABO,G_HEADER])
   nPosPkCdAb		:= GdfieldPos("PK_CODABO", aSvTree[G_ABO,G_HEADER])
   nPosPkCdEv		:= GdfieldPos("PK_CODEVE", aSvTree[G_ABO,G_HEADER])
   nPosPkTpMa		:= GdfieldPos("PK_TPMARCA", aSvTree[G_ABO,G_HEADER])

   //--Marca Como Deletados Todos os Abonos (Desliga relacionamento entre apontamentos e abonos
   //Aeval(aCloneAbonos,{|aAbo,y| aAbo[aSvTree[G_ABO,G_NUSADO] + 1]:=.T.})
   //-- Variavel Private. Bloco para exportar a fAbonos para recuperacao da matriz a ser consultada
   bAboCols:={||aSvtree[G_ABO,G_MAIN]}

   //-- Corre Todos os Novos Apontamentos vindos de aResult
   For nX:=1 To nLenResult
       nApontamentos++
       nCpo:=0

       For nY:=1 To nLenCpos
           IF aCpos[nY,nPosSX3Uso] .AND. cNivel >= aCpos[nY,nPosSX3Nivel] .and. ASCAN(aField,Trim(aCpos[nY,nPosSX3Campo])) = 0
       		  // *** Estrutura array aResultados
       		  //01 - Data da Geracao
			  //02 - Codigo do Evento
			  //03 - Horas
			  //04 - Centro de Custo
			  //05 - Tipo da Marcacao

              If aCpos[nY,nPosSX3Context] == "V"
                 nCpo++

                 If fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"DESC",.T.)
                    aArrayMain[nApontamentos,nCpo] := DescPdPon(aResult[nX,02])
                 Else
                    aArrayMain[nApontamentos,nCpo] := CriaVar(AllTrim(aCpos[nY,nPosSX3Campo]),Nil,Nil,aCabec,aCpos)
                 Endif
                 Aadd( aVirtual , AllTrim(aCpos[nY,nPosSX3Campo]) )
              Else
			     nCpo++

			     If fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"DATA",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_DATA]
			        dDataRecno	:=  aResult[nX,ARESULT_DATA]
			     ElseIf fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"PD",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_EVENTO]
			        cEventoRecno	:= aResult[nX,ARESULT_EVENTO]
	             ElseIf fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"QUANTC",.T.)
		            aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_HORAS]
			     ElseIf fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"CC",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_CC]
			     ElseIf fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"TPMARCA",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_TPMARCA]
			        cTpMarcaRecno	:= aResult[nX,ARESULT_TPMARCA]
			     Elseif fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"FLAG",.T.)
			        aArrayMain[nApontamentos][nCpo] := " "
			     ElseIf lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"TURNO",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_TURNO]
			     ElseIf lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"SEMANA",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_SEMANA]
			     ElseIf lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"TIPOHE",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_TIPOHE]
			     ElseIf lPort1510 .and. fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"PERCENT",.T.)
			        aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_PERCENT]
				 ElseIf lCpoCCT .And. fContemStr( aCpos[nY, nPosSX3Campo], cPrefix + "FILCCT", .T.)
					aArrayMain[nApontamentos][nCpo] := If(!Empty(aResult[ nX, ARESULT_FILCCT]), aResult[ nX, ARESULT_FILCCT], "" ) 
				 ElseIf lCpoCCT .And. fContemStr( aCpos[nY, nPosSX3Campo], cPrefix + "CODCCT", .T.)
					aArrayMain[nApontamentos][nCpo] := If(!Empty(aResult[ nX, ARESULT_CODCCT]), aResult[ nX, ARESULT_CODCCT], "" ) 
				 Elseif fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"ABONO",.T.) .And.;
			     !Empty(aResult[nX,ARESULT_RESULT_APO])
				    		aArrayMain[nApontamentos][nCpo] := aResult[nX,ARESULT_RESULT_APO, 1,ARESABO_CODIGO]
			     Elseif fContemStr( aCpos[nY,nPosSX3Campo] , cPrefix+"QTABONO",.T.)
					If !Empty(aCloneAbonos)
				    	aArrayMain[nApontamentos][nCpo] := 0
						aEval(aCloneAbonos, {|x| if(!Empty(x[nPosPkCdAb]);
							.And. !x[nUsadoSPK];
							.And. x[nPosPkData] == aArrayMain[nApontamentos,nPosDt];
							.And. x[nPosPkCdEv] == aArrayMain[nApontamentos,nPosPd];
							.And. x[nPosPkTpMa] == aArrayMain[nApontamentos,nPosTp],;
							aArrayMain[nApontamentos,nCpo] := SomaHoras(aArrayMain[nApontamentos,nCpo],x[nPosPkHrAb]),;
							Nil)})
						
						If aArrayMain[nApontamentos,nCpo] > aArrayMain[nApontamentos,nPosQuantC]
							aArrayMain[nApontamentos,nCpo] := aArrayMain[nApontamentos,nPosQuantC]
						EndIf
					Else
						aArrayMain[nApontamentos][nCpo] := __TimeSum( aResult[nX,ARESULT_NUM_ABO_HRS], 0 )
					EndIf
			     Else
			     	aArrayMain[nApontamentos][nCpo] := CriaVar(AllTrim(aCpos[nY,nPosSX3Campo]), Nil, Nil, aCabec, aCpos)
			     Endif

		      Endif
		   Endif
	   Next nY

   		// buscando o Recno no array aRecno para gravar no aArrayMain com as chaves = data + evento + tipo marcacao
	   nElemRec := aScan( aRecno , { |x| Dtos(x[1]) == Dtos(dDataRecno) .And. x[2] == cEventoRecno .And. x[3] == cTpMarcaRecno })
	   If nOpcx # 2 .And. nOpcx # 5
		// Gravando o alias e o recno para utilizar o WalkThru
	   	If nElemRec > 0
	      aArrayMain[nApontamentos][nUsado-1] 	:= cAlias
	      aArrayMain[nApontamentos][nUsado] 	:= aRecno[nElemRec][4]
	    Endif
	      aArrayMain[nApontamentos][nUsado+1] 	:= .F.
	   Endif
       	//-- Verifica em ArrayAnt apontamentos anteriormente gerados e obtem informacoes complementares,
       	//-- como cod.Abono por Exemplo.
		IF ( nElem := aScan( aArrayAnt , { |x| 	x[ nPosDt]	== aArrayMain[nApontamentos,nPosDt] 	.AND. ;
		             							x[ nPosPd] 	== aArrayMain[nApontamentos,nPosPd] 	.AND. ;
		    						       		x[ nPosTp] 	== aArrayMain[nApontamentos,nPosTp] 	.AND. ;
		  					               		x[ nPosCC] 	== aArrayMain[nApontamentos,nPosCC]     ;
		  					              } )  ) > 0
		//	Retirada essa verificacao para recuperar o estado deletado original do lancamento
		//										  ! x[ nUsado+1 ]   } )  ) > 0


	        //-- Se Apontamento era Abonado
	        If !Empty(aArrayAnt[nElem, nPosAbono] )

				aArrayMain[nApontamentos, nPosAbono] := aArrayAnt[nElem, nPosAbono]

				//-- Atualiza a Quantidade Abonada
				If (!Empty(aArrayMain[nApontamentos, nPosQuantI]))
					aArrayMain[nApontamentos, nPosQtAbono]	:= aArrayMain[nApontamentos, nPosQuantI]
				ElseIf (!Empty(aArrayMain[nApontamentos, nPosQtAbono]))
					aArrayMain[nApontamentos, nPosQtAbono] := aArrayMain[nApontamentos, nPosQtAbono]
				Else
					aAbonos:={}
					nAbonos:=fAbonos(aArrayMain[nApontamentos,nPosDt],aArrayMain[nApontamentos,nPosPd],,@aAbonos,aArrayMain[nApontamentos,nPosTp],aArrayMain[nApontamentos,nPosCC])
					aArrayMain[nApontamentos, nPosQtAbono]	:= Min(__TimeSum( nAbonos, 0 ), aArrayMain[nApontamentos, nPosQuantC])
				EndIf

				aArrayMain[nApontamentos, nPosFlag]		:= aArrayAnt[nElem, nPosFlag]
    		Else
			    //-- Para Apontamento Nao Abonado Verifica a Existencia de Codigo e/ou Qtde Informada
			    If !Empty(aArrayAnt[nElem, nPosPDI]) .OR. !Empty(aArrayAnt[nElem, nPosQuantI]    )
			        //-- Iguala Qtde Caculada e Codigo do evento conforme dados informados originalmente
            		aArrayMain[nApontamentos, nPosPDI]		:= aArrayAnt[nElem, nPosPDI]
            		aArrayMain[nApontamentos, nPosQuantI] 	:= aArrayAnt[nElem, nPosQuantI]
       				aArrayMain[nApontamentos, nPosFlag]		:= aArrayAnt[nElem, nPosFlag]
        	    Else
        	    	IF !Empty( aArrayAnt[nElem, nPosFlag] )
        	    		aArrayMain[nApontamentos, nPosFlag] := aArrayAnt[nElem, nPosFlag]
        	    	EndIF
        	    Endif
			Endif

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Recupera conteudo de Campos de Usuario 				      ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			aEval(aPropri,{|x| If ( (nCpo:= GdFieldPos( x, aCabFile)) > 0 , aArrayMain[nApontamentos][nCpo] :=  aArrayAnt[nElem][nCpo]    , Nil ) } )
        Else

        	//-- Apontamentos Gerados Tem o Flag Em Branco
       		aArrayMain[nApontamentos, nPosFlag] := " "

        Endif

        //-- Registra os Dias que Foram Apontados
        Aadd(aDataApo,aArrayMain[nApontamentos, nPosDt])

   Next nX

   //-- Obtem o Dia Corrente de Acordo com o Calendario
   dData:= CalendRetCpo( cPrefix+"DATA",,,cPrefix )

   //-- Corre Todos os Apontamentos Anteriores em busca de algum remanescente
   For nY:=1 To nLenArrayAnt
       If  aArrayAnt[nY][nUsado+1]
           Loop
       Endif

		//-- Se o Apontamento Possui Qtde Informada
		//-- Mantem como Apontamento Valido
		If !Empty(aArrayAnt[nY, nPosQuantI])
			nPosArMain := aScan(aArrayMain,{|x| x[nPosDt] == aArrayAnt[nY, nPosDt] .And. x[nPosPD] == aArrayAnt[nY,nPosPD] .And. x[nPosTp] == aArrayAnt[nY,nPosTp]})
			
			If nPosArMain > 0
				aArrayMain[nPosArMain,nPosQuantI] := aArrayAnt[nY,nPosQuantI]
			Else
				aAdd(aArrayMain,aClone(aArrayAnt[ny]))
			EndIf
			
			nApontamentos++
			Loop
		EndIf

       //-- Se o Apontamento Possui Evento do Periodo Anterior
       //-- Mantem como Apontamento Valido
       If  aArrayAnt[nY, nPosPD] $ cEvesNoDele
           aAdd(aArrayMain,aClone(aArrayAnt[ny]))
           nApontamentos++
           Loop
       Endif

       //-- Adiciona os Demais Resultados de Dias que Nao foram Apontandos nesse processo.
       //-- IMPORTANTE:
       //-- a) Para a Data Atual. Se na regra nao se apontava Horas Normais, por exemplo, e o funcionario cumpriu
       //--    o expediente todo, o resultado nao tera nenhum apontamento para esse dia.
       //--    Supondo que no apontamento anterior, o funcionario apresentava um atraso. Esse apontamento nao
       //--    devera ser considerado.

       If !Empty(aArrayAnt[nY,nPosDt]) .AND. Empty( Ascan( aDataApo, {|dDatalida|dDatalida == aArrayAnt[nY,nPosDt]} ) );
          .AND. IIf(lApHeDtM, Empty( Ascan( aDataApo, {|dDatalida|dDatalida == aArrayAnt[nY,nPosDt]-1} ) ),.T.);
          .AND. (Iif(!Empty(aResult), aScan( aResult, { |x| x[1] == aArrayAnt[nY,nPosDt] } ) > 0,.T.))
          aAdd(aArrayMain,aClone(aArrayAnt[nY]))
          nApontamentos++
          Loop
       Endif

       //-- Sobraram Apontamentos que Serao Desprezados. Entao, devemos marcar como deletados os
       //-- abonos relacionados, se existirem.
       //-- Se Apontamento era Abonado
	   If !Empty(aArrayAnt[nY, nPosAbono] )

	      //-- Obtem os Abonos do Apontamento
		  aAbonos:={}
		  nAbonos:=fAbonos(aArrayAnt[nY, nPosDt],aArrayAnt[nY,nPosPd],,@aAbonos,aArrayAnt[nY,nPosTp],aArrayAnt[nY,nPosCC])

		  //-- O Elemento 8 do aAbonos representa a linha dos abonos em aArrayMain de Abonos
		  //-- Marcamos como Deletados os Abonos Relacionados ao apontamento
		 // Aeval(aAbonos,{|aAbo| aCloneAbonos[ aAbo[8],aSvTree[G_ABO,G_NUSADO]+1  ] :=.T. })
	   Endif

   Next nY

   //-- Atualiza os Abonos ficando Validos somente abonos relacionados com os novos apontamentos
   aSvTree[G_ABO,G_MAIN] :=aClone(aCloneAbonos)


   aSort(aArrayMain,,,{ |x,y| DtoS(x[nPosDt])+x[nPosPd]+x[nPosTp] < DtoS(y[nPosDt])+y[nPosPd]+y[nPosTp] })

Endif
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta Array do 1§ Elemento Vazio. 	   					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !lCount
	IF nApontamentos == 0 .or. lVazio
		nApontamentos := 1.00
		aArrayMain := Array( nApontamentos , nSvUsado )

		nCpo	:= 0
	    For nY:=1 To nLenCpos
           IF aCpos[nY,nPosSX3Uso] .AND. cNivel >= aCpos[nY,nPosSX3Nivel] .and. ASCAN(aField,Trim(aCpos[nY,nPosSX3Campo])) = 0
				nCpo++
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Monta Array do 1§ Elemento Vazio. Se Inclusao                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


			   	If ExistIni(aCpos[nY,nPosSX3Campo],aCAbec,aCpos)  //-- Verifica se o campo contem inicializador padrao
	   			   aArrayMain[1][nCpo] := InitPad(aCpos[nY,nPosSX3Relacao])
			   	   IF aCpos[nY,nPosSX3Tipo] == "C"
				      aArrayMain[1][nCpo] := PADR(aArrayMain[1][nCpo],aCpos[nY,nPosSX3Tamanho])
			   	   Endif
			   	Else
		   			IF aCpos[nY,nPosSX3Tipo] == "C"
						aArrayMain[1][nCpo] := CriaVar( aCpos[nY,nPosSX3Campo], .T. )
					ELSEIF aCpos[nY,nPosSX3Tipo] == "N"
						aArrayMain[1][nCpo] := CriaVar(aCpos[nY,nPosSX3Campo], .T. )
					ELSEIF aCpos[nY,nPosSX3Tipo] == "D"
						aArrayMain[1][nCpo] := CriaVar( aCpos[nY,nPosSX3Campo], .T. )
					ELSE
						aArrayMain[1][nCpo] := .F.
					Endif
		        Endif

	            If aCpos[nY,nPosSX3Context] == "V"
	               Aadd( aVirtual , AllTrim(aCpos[nY,nPosSX3Campo]) )
				Endif
			Endif
		Next nLenCpos

		aArrayMain[nApontamentos,nUsado+1] := .F.

		nApontamentos:= 0

	EndIF
EndIF

RestArea( aArea )

Return( nApontamentos )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280PrepRes    ³ Autor ³Mauricio MR                       ³ Data ³06/09/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carrega a Result a partir dos Apontamentos                            	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280PrepRes(aArrayMain,aResult)											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aArrayMain    --> Array com todos os Apontamentos                           ³±±
±±³          ³aResult 	    --> Array destino dos Apontamentos    		     	       	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³aResult		                                         	      		      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	           	   	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	    		  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function P280PrepRes(aHeaderSPC,aArrayMain,aResult, aSPK, aHeaderSPK, lRF0ChkTable)

//-- Variaveis posicao dos campos no aHeader
Local cAlias			:= IF( lPona190 , "SPH" , "SPC" )
Local cPrefix			:= ( PrefixoCpo( cAlias ) + "_" )
Local cTurno            := NIL
Local cSemana			:= NIL
Local cTipoHe			:= NIL
Local cPercent			:= NIL

Local nPosDt			:= GdFieldPos(cPrefix+"DATA"		,aHeaderSPC)
Local nPosPd			:= GdFieldPos(cPrefix+"PD"			,aHeaderSPC)
Local nPosQuantC		:= GdFieldPos(cPrefix+"QUANTC"		,aHeaderSPC)
Local nPosTp			:= GdFieldPos(cPrefix+"TPMARCA"		,aHeaderSPC)
Local nPosCC			:= GdFieldPos(cPrefix+"CC"			,aHeaderSPC)
Local nPosQTAbono   	:= GdFieldPos(cPrefix+"QTABONO"		,aHeaderSPC)
Local nPosTurno			:= GdFieldPos(cPrefix+"TURNO"		,aHeaderSPC)
Local nPosSemana		:= GdFieldPos(cPrefix+"SEMANA"		,aHeaderSPC)
Local nPosPercent 		:= GdFieldPos(cPrefix+"PERCENT"		,aHeaderSPC)
Local nPosTipoHe		:= GdFieldPos(cPrefix+"TIPOHE"		,aHeaderSPC)

Local nSPKData        	:= GdFieldPos("PK_DATA"		    ,aHeaderSPK)
Local nSPKPD			:= GdFieldPos("PK_CODEVE"		,aHeaderSPK)
Local nSPKCC			:= GdFieldPos("PK_CC"			,aHeaderSPK)
Local nSPKTP			:= GdFieldPos("PK_TPMARCA"		,aHeaderSPK)
Local nSPKCodA			:= GdFieldPos("PK_CODABO" 		,aHeaderSPK)
Local nSPKMotA			:= GdFieldPos("PK_MOTABO" 		,aHeaderSPK)
Local nSPKHrIn			:= GdFieldPos("PK_HORINI" 		,aHeaderSPK)
Local nSPKHrFm			:= GdFieldPos("PK_HORFIM"		,aHeaderSPK)
Local nSPKHrAb			:= GdFieldPos("PK_HRSABO"		,aHeaderSPK)
Local nSPKFlag			:= GdFieldPos("PK_FLAG" 		,aHeaderSPK)
Local nPosSPKDel		:= aSVTREE[G_ABO, G_NSVUSADO]


//-- Variaveis controle de loop
Local nLenArrayMain 	:= Len(aArrayMain)
Local nLenSPK		 	:= Len(aSPK)
Local nX				:= 0
Local nY				:= 0
Local nPos				:= 0
Local aLinha			:= {}
Local nLenResult		:= 0

Local bAsc   			:= { |x|	x[nSPKData	] == aResult[ nX , ARESULT_DATA		] .and. ;
									x[nSPKPD	] == aResult[ nX , ARESULT_EVENTO	] .and. ;
									x[nSPKCC	] == aResult[ nX , ARESULT_CC		] .and. ;
									x[nSPKTP	] == aResult[ nX , ARESULT_TPMARCA	] .and. ;
									!x[nPosSPKDel] ;
					  		}
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Monta aResult que Contem Todos os Aponamentos     Funcionario³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aResult:= {}
//-- Corre Todos os Apontamentos e monta aResult
For nX:=1 To nLenArrayMain

	If lPort1510
		cTurno		:= aArrayMain[nX,nPosTurno  ]
		cSemana		:= aArrayMain[nX,nPosSemana ]
		cTipoHe		:= aArrayMain[nX,nPosTipoHe ]
		cPercent	:= aArrayMain[nX,nPosPercent]
	EndIf

	fGeraRes(	@aResult					,;	//01 -> Array com os Resultados do Dia
				aArrayMain[nX,nPosDt	]	,;	//02 -> Data da Geracao
				aArrayMain[nX,nPosQuantC]	,;	//03 -> Numero de Horas Resultantes
				aArrayMain[nX,nPosPD	]	,;	//04 -> Codigo do Evento
				aArrayMain[nX,nPosCC	]	,;	//05 -> Centro de Custo a ser Gravado
				aArrayMain[nX,nPosTp	]	,;	//06 -> Tipo de Marcacao
				/*	lSoma		*/			,;	//07 -> True para Acumular as Horas
				/*	cPeriodo	*/			,;	//08 -> Periodo de Apuracao
				/*	nTole		*/			,;	//09 -> Tolerancia
				/*	cArred		*/			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
				/*	lSubstitui	*/			,;	//11 -> Substitui a(s) Hora(s) Existente(s)
				/*	cFuncao		*/			,;	//12 -> Funcao
  				/*	cDepto		*/			,;	//13 -> Depto para gravacao
				/*	cPosto		*/			,;	//14 -> Posto para gravacao
				/*	cProcesso	*/			,;	//15 -> Periodo para Gravacao
				/*	cRoteiro	*/			,;	//16 -> Processo para Gravacao
				/*	cPerApo		*/			,;	//17 -> Periodo para Gravacao
				/*	cNumPagto	*/			,;	//18 -> NumPagto para Gravacao
				cTurno 						,;	//19 -> Turno de Trabalho
				cSemana						,;	//20 -> Semana/Sequencia do Turno
				cTipoHe						,;	//21 -> Tipo de Hora Extra
				cPercent					,;	//22 -> Percentual de Valorizacao
				/*lTolHrNReal	*/			,;	//23
				/*aHrNReal		*/			,;	//24
				aArrayMain[nX,nPosQTAbono]	,;	//25 -> Quantidade de horas de Abono
			)
/*
******************************************************************************
*RETIRADO ESTE CONTROLE POIS ESTAVA GRAVANDO APENAS O PRE-ABONO DO ULTIMO DIA*
******************************************************************************
   //-- Se existir algum lancamento como Evento nao existente
   //-- Deixa de verificar se existe abono (no caso da data for maior que a database
   //-- por exemplo.
   IF	nLenArrayMain > Len(aResult)
        Loop
   Endif
*/
   IF lRF0ChkTable	 .AND. !EMPTY(aResult)
   	   nLenResult	:= Len(aResult)
	   IF ( ( (nX <= nLenResult) .AND.  (nPos := aScan( aSPK , bAsc ))  > 0 ) )
			aResult[ nX , ARESULT_NUM_ABO_HRS	] := aArrayMain[nX,nPosQTAbono]	//08 - Qtde Horas Abonadas do Evento
		    aLinha:=Array(ELEMENTOS_AABONOS)

			For nY:=nPos To nLenSPK
			    If Eval(bAsc, aSPK[nY])
					aLinha[AABONOS_CODIGO	]	:=  aSPK[nY, nSPKCodA		]
					aLinha[AABONOS_HORAS_ABO]	:=  __TimeSum( aSPK[nY, nSPKHrAb		], 0 )
					aLinha[AABONOS_HORAS_INI]	:=  aSPK[nY, nSPKHrIn		]
					aLinha[AABONOS_HORAS_FIM] 	:=	aSPK[nY, nSPKHrFm		]
					aLinha[AABONOS_DATA		]	:=	aSPK[nY, nSPKData		]
					aLinha[AABONOS_CC		]	:=  aSPK[nY, nSPKCC			]
					aLinha[AABONOS_TPMARCA  ]	:=	aSPK[nY, nSPKTP			]
					aLinha[AABONOS_RECNO	]	:=	nY
					aLinha[AABONOS_CODEVE	]	:=	aSPK[nY, nSPKPD			]
					aLinha[AABONOS_FLAG    	]	:=	aSPK[nY, nSPKFlag		]
					aadd(aResult[ nX , ARESULT_RESULT_APO	], aClone(aLinha) ) 				//09 - Array de Horarios Abonados para o Evento
			     Endif
			Next nY

	   EndIF
   Endif
Next nX

Return( aResult )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fChamaAbo      ³ Autor ³Mauricio MR           ³ Data ³31/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Trata Chamada de Janela de Abonos                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fChamaAbo(bChange)                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ bChange --> Bloco de Codigo para Atualizacao de Obejtos/Arrays    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fChamaAbo(bChange)
//-- Variavel Retorno
Local lRetLin	:=.T.
//-- Variavel posicionamento do campo no aHeader
Local nPosPD
Local nPosPDI
Local nPosHrInf
Local nPosHrCalc
Local nPosHrAbono

//-- Variavel posicao do apontamento na getdados
Local nElem

//-- Descarrega o conteudo do Get para as variaveis
fVarGet(@o2Get, @aHeader,@aCols,@n,DESCARREGA,2)


//-- Variavel posicionamento do campo no aHeader
nPosPD		:=  GdFieldPos(( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" ) + "PD")
nPosPDI		:=	GdFieldPos(( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" ) + "PDI")
nPosHrInf	:=	GdFieldPos(( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" ) + "QUANTI")
nPosHrCalc	:=	GdFieldPos(( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" ) + "QUANTC")
nPosHrAbono	:=	GdFieldPos(( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" ) + "QTABONO")
nElem		:=o2Get:oBrowse:nAt

//-- Trata Retorno da Consistencia de Linha
lRetLin:= P280ApoLin(o2Get)
If !lRetLin
   //-- Libera a Chamada da Tela de Abonos, mesmo que inconsistente, somente para os casos:
   //-- a) Qtde Abonada > Qtde Calculada
   If aCols[n, nPosHrAbono] > aCols[n, nPosHrCalc]
   	  lRetLin:=.T.
   EndIf
Else
    If Empty( aCols[ n,nPosPd ] )
	    lRetLin:=.F.
    Endif
Endif

If !aCols[ nElem , nSvUsado ] .AND. lRetLin .AND. Empty(aCols[ nElem , nPosPDI ]) //Nao Permite Abonar Apontamentos Deletados, Invalidos ou com Codigo Informado
	fTelaAbono(bchange)
	bAboCols:={||aSvtree[G_ABO,G_ACOLS]}
	fPrincipal(olBoxSint,@o2Get,@o2Panel,oDlg,bChange,"2",.T.,.F.)
	bAboCols  :={||aSvtree[G_ABO][G_MAIN]} 	//-- Variavel utilizada para ler abonos em memoria
Else
    //-- Se Deletado
    If aCols[ nElem , nSvUsado ]
	   Help(' ',1,'P280ACESAB')

	   //-- A)A Linha OK Consiste Hr.Informadas quando se realiza abono rapido. Para nao ser exibida 2x a mesma mensagem
	   //-- Abono Rapido / Hr.Inform. verificamos se a linha ok ja exibiu a mensagem
	ElseIf lRetLin
	   		//-- B)Se a Quantidade de Horas Informadas estiver preenchida nao permite abonar o apontamento
	   		If !Empty(aCols[ nElem , nPosHrInf ])
   	   			Help(' ', 1, 'A130INFABO')
   	   		Else
	            //-- C)Se a o codigo do evento foi informado nao permite abonar
	            If !Empty(aCols[ nElem , nPosPDI ])
					cHelp := STR0093 //'N„o se pode Abonar Apontamento com Codigo de Evento Informado.'
			        Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
   	   		    Endif
   	   		Endif
    Endif
Endif

//-- Restaura Programacao de Teclas dos Botoes da Janela Principal e de Apontamento
fProgTeclas('0')
fProgTeclas('2')

Return( NIL )

/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
//                    F U N C O E S     A B O N O S
/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³             Variavieis Privates para ABONOS                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fConfAbo    ³ Autor ³Mauricio MR           ³ Data ³01/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Configura Janela de Abonos                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fConfAbo()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ 	 												           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß	*/
Static Function fConfAbo()
Local cAlias		:= "SPK"
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cFilMat		:= SRA->( RA_FILIAL + RA_MAT )
Local nOrdcAlias	:= RetOrdem( cAlias , (cAlias)->(cPrefix+"FILIAL"+cPrefix+"MAT"+cPrefix+"PD"+Dtos(ctod(cPrefix+"DATA"))+cPrefix+"TPMARCA"+cPrefix+"CC" ) )
Local bSeekWhile	:= {|| }
Local bSeekFor		:= {|| }
Local aNoFields 	:= { cPrefix + "MAT", cPrefix + "NOME" }
//-- Arrays Abonos
Private aCabec		:= {}
Private aCpos		:= {}
Private aField 		:= {cPrefix+"FILIAL",cPrefix+"MAT"}  	//-- Campos NAO Exibidos no GetDados
Private aBrancoField := {cPrefix+"HORINI",cPrefix+"HORFIM",cPrefix+"FLAG",cPrefix+"CODEVE",cPrefix+"TPMARCA"}
Private aHeader		:= Array( 0 )     			//-- Cabecalho do GetDados
Private aCols		:= {}						//-- Linhas Detalhes do GetDados
Private aArrayMain	:= {}						//-- Array PRINCIPAL com TODAS as linhas do GetDados
Private aArrayClone	:= {}                      	//-- *** A VERIFICAR *** Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
Private aElem		:= {}						//-- Array com Numeros correspondentes as Linhas do ArrayMain
Private aVirtual	:= {}						//-- Array de Campos Virtuais
Private aAlter		:= {cPrefix+"DATA",cPrefix+"CC",cPrefix+"CODEVE",cPrefix+"TPMARCA",cPrefix+"FLAG"}	//-- Array de Campos NAO ALTERAVEIS
Private aRecno		:= {}						//-- Array de Numero de Registros Fisicamente Gravados
//-- Numericos Abonos
Private nUsado		:= 0
Private nSvUsado	:= 0
Private nCnt		:= 0
Private n   		:= 0

bTrataAbo:={|lTudOk|P280AboGet(@aCols,@aArrayMain,aField,@oDlg,@o3Get,nOpcX,lTudOK)}          //Atualiza aApoCols baseado no ApoMain

bAboList:=;
 {|x|;
	 fMuda(3,DESCARREGA),;  			//-- Salva as Informacoes dos Abonos em Matriz Auxiliar
	 fMuda(2),;  						//-- Carrega Informacoes dos Apontamentos
	 Eval(bTrataApo,.T.),;          	//-- Atualiza Apontamentos
	 fMuda(2,DESCARREGA),;  			//-- Salva as Informacoes dos Apontamentos em Matriz Auxiliar
	 fMuda(3);  						//-- Recarrega as Informacoes dos Abonos
 }

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reinicializa aColsStatic a Cada Funcionario                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	P280AboGet()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o cabecalho, retorna estrutura dos arquivos            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	aRetorno:=P280Head(aField,@aHeader,cAlias,@nUsado,.T.)

	bSeekWhile	:= {|| (cAlias)->( &(cPrefix+"FILIAL") + &(cPrefix+"MAT") ) }
	bSeekFor	:= {|| (cAlias)->( &(cPrefix+"FILIAL") + &(cPrefix+"MAT") ) == cFilMat .and. (cAlias)->( !Empty( &(cPrefix+"DATA") ) .and. &(cPrefix+"DATA") >= dPerIni .and. &(cPrefix+"DATA") <= dPerFim ) }

	aHeader	:= {}
	aCols	:= {}

	FillGetDados(	nOpcx				,; //1-nOpcx - numero correspondente à operação a ser executada, exemplo: 3 - inclusão, 4 alteração e etc;
					cAlias				,; //2-cAlias - area a ser utilizada;
					nOrdcAlias			,; //3-nOrder - ordem correspondente a chave de indice para preencher o  acols;
					cFilMat				,; //4-cSeekKey - chave utilizada no posicionamento da area para preencher o acols;
					bSeekWhile			,; //5-bSeekWhile - bloco contendo a expressão a ser comparada com cSeekKey na condição  do While.
					bSeekFor			,; //6-uSeekFor - pode ser utilizados de duas maneiras:1- bloco-de-código, condição a ser utilizado para executar o Loop no While;2º - array bi-dimensional contendo N.. condições, em que o 1º elemento é o bloco condicional, o 2º é bloco a ser executado se verdadeiro e o 3º é bloco a ser executado se falso, exemplo {{bCondicao1, bTrue1, bFalse1}, {bCondicao2, bTrue2, bFalse2}.. bCondicaoN, bTrueN, bFalseN};
					aNoFields			,; //7-aNoFields - array contendo os campos que não estarão no aHeader;
					NIL					,; //8-aYesFields - array contendo somente os campos que estarão no aHeader;
					NIL					,; //9-lOnlyYes - se verdadeiro, exibe apenas os campos de usuário;
					NIL					,; //10-cQuery - query a ser executada para preencher o acols(Obs. Nao pode haver MEMO);
					NIL					,; //11-bMontCols - bloco contendo função especifica para preencher o aCols; Exmplo:{|| MontaAcols(cAlias)}
					( nOpcx == 3 )		,; //12-lEmpty
					aHeader				,; //13-aHeaderAux
					NIL					,; //14-aColAux
					NIL					,; //15-bAfterCols - Bloco de codigo a ser executado após a inclusão de uma linha no Acols
					NIL					;  //16-bBeforeCols - Bloco de codigo contendo expressão para sair do While, é executado antes de inserir nova linha no aCols
				)

	aCols  := {}

    aCabec := Aclone(aRetorno[1])
	aCpos  := Aclone(aRetorno[2])

    //--  Calcula a Quantidade de Colunas do Array de Apontamentos
	//nSvUsado	:= nUsado+IF(nOpcX==2,0,1)
	nUsado		:= Len(aHeader)
	nSvUsado	:= nUsado+1

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gerar o array aCols com os Todos os Apontamentos            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nCnt   := 0.00
	aVirtual:={}; aRecno:={}
	cTitulo 	:= OemToAnsi(STR0082)   	//"Configurando Ambiente"
	cMensagem	:= OemToAnsi(STR0085)		//"Carregando Abonos..."

	bBlocMsg	:={|| nCnt:=P280AboCols(aHeader	,@aArrayMain	,@aRecno	,aField	,@aVirtual	,nOpcX)}
	MsAguarde(bBlocMsg,cTitulo,cMensagem,.F.)


	aArrayClone := aClone(aArrayMain)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gera aCols com 1 Elemento para a GetDados                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	P280AboCols(aHeader,@aCols  	,		,aField , 				,nOpcX,.T.)

    //-- Alimenta o Acols com os abonos do primeiro dia do calendario
	P280AboGet(@aCols  ,@aArrayMain,aField,		,				,nOpcx,,aHeader)

	aSvtree[G_ABO][G_HEADER] 		:= aClone(aHeader)
	aSvtree[G_ABO][G_ACOLS] 		:= aClone(aCols)
	aSvtree[G_ABO][G_N] 			:= Len(aCols)
	aSvtree[G_ABO][G_MAIN] 			:= aClone(aArrayMain)		     	//-- Array PRINCIPAL com TODAS as linhas do GetDados
	aSvtree[G_ABO][G_CLONE_MAIN] 	:= aClone(aArrayClone)	           	//-- Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
	aSvtree[G_ABO][G_ELEM] 			:= aClone(aElem)			        //-- Array com Numeros correspondentes as Linhas do ArrayMain
	aSvtree[G_ABO][G_VIRTUAL] 		:= aClone(aVirtual)		     		//-- Array de Campos Virtuais
	aSvtree[G_ABO][G_ALTER] 		:= aClone(aAlter)			        //-- Array de Campos NAO ALTERAVEIS
	aSvtree[G_ABO][G_RECNO] 		:= aClone(aRecno)			        //-- Array de Numero de Registros Fisicamente Gravados
	aSvtree[G_ABO][G_CABEC] 		:= aClone(aCabec)					//-- Array com Cabec (SX3) de Todos os Campos do Arquivo
	aSvtree[G_ABO][G_CPOS] 			:= aClone(aCpos)					//-- Array com Todos os Campos do Arquivo
	aSvtree[G_ABO][G_FIELDS] 		:= aClone(aField)					//-- Array com Campos Nao Exibiveis
	aSvtree[G_ABO][G_NUSADO] 		:= nUsado
	aSvtree[G_ABO][G_NSVUSADO] 		:= nSvUsado
	aSvtree[G_ABO][G_NCNT] 			:= nCnt
	aSvtree[G_ABO][G_BRANCOFIELD] 	:= aClone(aBrancoField)
	aSvtree[G_ABO][G_CLONE_ACOLS] 	:= aClone(aCols)
	aSvtree[G_ABO][G_CLONE_RECNO] 	:= aClone(aRecno)
	//-- Relaciona as Variaveis de Memoria para Tratamento de Abonos as
	//-- Variaveis que contem os valores atualizados.
	aAboHeader:=aSvtree[G_ABO][G_HEADER]
	bAboCols  :={||aSvtree[G_ABO][G_MAIN]} 	//-- Variavel utilizada para ler abonos em memoria
Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fTelaAbono  ³ Autor ³ Mauricio MR           ³ Data ³ 24/06/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Ativa Tela de Abonos/Justificativas                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Sintaxe  ³ fTelaAbono()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fTelaAbono(bChange)

Local aKeys				:= GetKeys()
Local aCposAlteraveis	:= {}
//-- Variavel Retorno
Local lRet				:= .T.

Local nOpcA				:= 	0
Local lGRAVA_EM_ARQUIVO	:=	.F.


//-- Variaveis Auxiliares para Exportar aHeader e aCols
Local xaCols			:= {}
Local xaHeader			:= {}
Local lDeletado			:= .F.

//-- Variaveis para tratamento de tela
Local aAdv40Size		:= MsAdvSize(,.T.,380 )
Local aInfo40AdvSize	:= { aAdv40Size[1] , aAdv40Size[2] , aAdv40Size[3], aAdv40Size[4] , 5 , 5 }
Local aObj40Coords    	:= {}
Local aObj40Size     	:= {}
Local oDlg1

aAdd( aObj40Coords , { 100 , 100 , .T. , .T. } )
aObj40Size		:= MsObjSize( aInfo40AdvSize , aObj40Coords)



//-- Cria Dialogo de Abonos
DEFINE MSDIALOG oDlg1 TITLE OemToAnsi( STR0090 ) From aAdv40Size[7],0 TO aAdv40Size[6],aAdv40Size[5] OF oMainWnd PIXEL

//--------------------------------------------------------------------------------------------
//***                                        A B O N O S                                   ***
//--------------------------------------------------------------------------------------------
//-- Get Dados dos Abonos

//-- Descarrega informacoes dos apontamentos
fMuda(2,DESCARREGA)

fProgTeclas('2',.F.) //-- Desabilita Teclas Apontamento

//-- Carrega Informacoes dos Abonos
fMuda(3,,.F.)
//-- Carrega campos alteraveis
aCposAlteraveis:=fCamposVis(aAlter,aHeader)

//-- Atualiza a variavel cEstou forcando posicionando no Get de Abonos. Geralmente, utilizamos
//-- a funcao fPrincipal, mas como o get em questao nao pertence a mesma tela que os demais
//-- somos obrigados a realizar o posicionamento manualmente.
cEstou:='3'

//Atualiza aCols com dados do dia
P280AboGet(@aCols,@aArrayMain,aField,,,,.F.)

xaHeader	:=aClone(aSvTree[G_ABO,G_HEADER])
xaCols		:=aCols

o3Get:= MsNewGetDados():New( aObj40Size[1,1],aObj40Size[1,2],aObj40Size[1,3],aObj40Size[1,4],IF(nOpcX==2.Or.nOpcX==5,0,GD_INSERT+GD_UPDATE+GD_DELETE	),"aPont210Ok"    						,"pn210TudOk" 						,"",If(!Empty(aCposAlteraveis),aCposAlteraveis,Nil),0,,,,,@oDlg1,Aclone(xaHeader)				  ,aClone(xaCols))
//o3Get:aCols[1,nUsado+1]:=lDeletado

//-- Carrega as Variaveis para o Get de Abonos
fVarGet(@o3Get, @aHeader,@aCols,@n,,3)

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta Barra de Botoes para  Abonos                          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

//-- Blocos de Codigos para Confirmar e Abandonar o Dialogo
//-- Se Nao Houver Incosnistencias, Descarrega informacoes de abono
bSet15	:= { || nOpcA := IF( nOpcX == 3 , nOpcX , 1 ),fVarGet(@o3Get, @aHeader,@aCols,@n, DESCARREGA,3) ,;
                                                                      IF( oGet:TudoOk()  ,;
																		 (lGRAVA_EM_ARQUIVO:=.F.,;
																		  pn210Grava('SPK',nOpcx,aElem,aSVTREE[G_APO,G_HEADER],@aSVTREE[G_APO,G_ACOLS],@aSVTREE[G_APO,G_N],Nil,cEvento,cCCSPC,cTpMarca,cPrefix,IF( lPona190 , "SPH" , "SPC" ),lGRAVA_EM_ARQUIVO),;
																		  Eval(bTrataAbo,.T.),;
																		  fMuda(3,DESCARREGA),;
																		  nOpcA := 1 ,;
																		  oDlg1:End() ) , ;
																		  ( nOpcA := 0 , .F. ) ),;
																		  RestKeys(aKeys,.T.);
				   }
//-- Antes de Fechar o dialogo alterar setar nOpca para 3 senao realizamos a pergunta de abandono 2 vezes
bSet24 	:= { ||fVarGet(@o3Get, @aHeader,@aCols,@n, DESCARREGA,3),If( fSai280({{aSVTREE[G_ABO,G_ACOLS],aCols}}),( nOpca := 3,oDlg1:End(),.T.),.F.) ,RestKeys(aKeys,.T.)}

ACTIVATE MSDIALOG oDlg1 ON  INIT (EnchoiceBar (oDlg1,bSet15, bSet24)) CENTERED


//-- Confirmou Abonos Digitados
If nOpcA==1
   lRet:=.T.
Else
    //-- Aborta operacao e Recupera as informacoes dos Abonos
    fMuda(3)
    lRet:=.F.
Endif

//-- Desprograma Teclas de Botoes do Abono
fProgTeclas('3',.F.)
RestKeys(aKeys,.T.)

RETURN lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280AboGet   ³Autor ³Mauricio MR           ³ Data ³16/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Monta o aCols de Apontamento Dia a Dia de Acordo com a Data  ³±±
±±³          ³dos Apontamentos e Salva as Alteracoes Efetuadas em aABoMain.³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280AboGet()												   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³< Vide Parametros Formais >								   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Abonos                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function P280AboGet(		aCols		,; //Array da GetDados
								aArrayMain	,; //Array com Todas as Informacoes de Abonos
								aField		,; //Campos Que Nao Constarao no aHeader
								oDlg		,; //Objeto de Dialogo
								oGet		,; //Objeto GetDados
								nOpcX		,; //Opcao do aRotina
								lTudoOk 	,; //Se montado a partir de TudoOk
								aAuxHeader	;  // aHeader
						  )

//-- Variaveis Arquivos
 Local cAlias	:= "SPK"

//-- ATENCAO: Variavel com Referencia ao arquivo de Apontamento
Local cPrefix	:= ( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" )

//-- Variaveis Controle de Loop
Local nX		:= 0
Local nLenX 	:= 0
Local nY		:= 0
Local nLenY		:= 0

//-- Variavel para controle de Abonos da Data
Local dData		:= cTOD('')
Local aData		:= {}
Local lDeletados:= .T.

//-- Variaveis Controle de Processamento
Local lManutenc	:= .F.
Local lPrimeira := ( PCount() == 0 )

//-- Variaveis atualizacao de celulas em Getdados
Local aNewaCols	:= {}
Local cAbono	:= ''
Local nHoras	:= 0

Local nSvnAt	:= 0  //-- Contem o numero n anterior dalnget
Local nPos 		:= 0
Static aAboStatic

DEFAULT nOpcX	:= 3.00
DEFAULT lTudoOk := .F.
DEFAULT aAuxHeader	:= aSVTREE[G_ABO,G_HEADER]

nPosData	:= 0
nPosCodA	:= 0
nPosMotA	:= 0
nPosHrIn	:= 0
nPosHrFm	:= 0
nPosHrAb	:= 0
nPosFlag	:= 0
nPosCODEVE  := 0
nPosTpMarca := 0
nPosCC		:= 0

IF lPrimeira
	//-- Na Primeira vez Inicializa o array aApoStatic -- Array com o aCols de Abonos de 1 dia qualquer
	aAboStatic := NIL
Else
    //-- Se nao for a Primeira Vez
    nPosData	:= GdFieldPos( "PK_DATA"   	,aAuxHeader	)
	nPosCodA	:= GdFieldPos( "PK_CODABO" 	,aAuxHeader	)
	nPosMotA	:= GdFieldPos( "PK_MOTABO" 	,aAuxHeader	)
	nPosHrIn	:= GdFieldPos( "PK_HORINI" 	,aAuxHeader	)
    nPosHrFm	:= GdFieldPos( "PK_HORFIM" 	,aAuxHeader	)
    nPosHrAb	:= GdFieldPos( "PK_HRSABO" 	,aAuxHeader	)
    nPosFlag	:= GdFieldPos( "PK_FLAG" 	,aAuxHeader	)
    nPosCODEVE	:= GdFieldPos( "PK_CODEVE" 	,aAuxHeader	)
    nPosTpMarca := GdFieldPos( "PK_TPMARCA"	,aAuxHeader	)
    nPosCC 		:= GdFieldPos( "PK_CC"		,aAuxHeader	)
    //-- Se o Apontamento for NOVO (n > Qtde apontamentos originais)
    If Len(aSVTREE[G_APO,G_CLONE_ACOLS])>= aSVTREE[G_APO,G_N]
	    //-- Posicao no Apontamento (Vale o conteudo do aColsAnt, pois, se o usuario alterou o
	    //-- CC no aCols dos apontamentos, nao iremos encontrar abonos que estarao com o CC
	    //-- original do apontamento).
	    cEvento   := aSVTREE[G_APO,G_CLONE_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'PD'		,aSVTREE[G_APO,G_HEADER])]
	    cTpMarca  := aSVTREE[G_APO,G_CLONE_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'TPMARCA'	,aSVTREE[G_APO,G_HEADER])]
	    cCCSPC    := aSVTREE[G_APO,G_CLONE_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'CC'		,aSVTREE[G_APO,G_HEADER])]
	    dDataSPC  := aSVTREE[G_APO,G_CLONE_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'DATA'		,aSVTREE[G_APO,G_HEADER])]
	    nHoras	  := aSVTREE[G_APO,G_CLONE_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'QUANTC'	,aSVTREE[G_APO,G_HEADER])]    //-- Qtde Horas Calculadas do Apontamento
        nHrsEve	  := nHoras   //-- Armazena valor do apontamento
    Else
        //-- Vale conteudo do aCols de apontamento
	    cEvento   := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'PD'			,aSVTREE[G_APO,G_HEADER])]
	    cTpMarca  := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'TPMARCA'		,aSVTREE[G_APO,G_HEADER])]
	    cCCSPC    := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'CC'			,aSVTREE[G_APO,G_HEADER])]
	    dDataSPC  := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'DATA'		,aSVTREE[G_APO,G_HEADER])]
	    nHoras	  := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'QUANTC'	    ,aSVTREE[G_APO,G_HEADER])]    //-- Qtde Horas Calculadas do Apontamento
        nHrsEve	  := nHoras   //-- Armazena valor do apontamento
    Endif
    //-- Obtem o Abono em Apontamento. Podera ser utilizado para atualizar o cod.abono em Abonos
    //-- Qdo tivermos apenas um abono cadastrado.
    nUsado := Len(aHeader)
    cAbono    := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefix+'ABONO'		,aSVTREE[G_APO,G_HEADER])]
	//-- Verifica se houve alteracao nos Abonos Originais do Dia Corrente
	IF aAboStatic != NIL
		nLenY := Len( aElem )
		//-- Registra Abonos com Alteracoes
		For nY := 1 To nLenY
			//-- Constatada Alteracao no Dia Providencia a Atualizacao do Array Principal
			If (nPos := ascan(aArrayMain,{|x| x[nPosData] == aCols[ nY ,nPosdata]})) > 0
				IF !fCompArray( aArrayMain[ nPos ] , aCols[ nY ] )
					lManutenc := .T.
					aArrayMain[ aElem[ nY ] ] := aClone( aCols[ nY ] )
					//-- Armazena a Data do Dia com abonos Alterados
					aAdd( aData , aCols[ nY , nPosData ]  )
				EndIF
			EndIf
		Next nY
		//-- Verifica Novos Abonos
		IF Len( aCols ) > Len( aAboStatic )
		    //-- Se Existir Um abono mas originalmente naquela data nao havia nada abonado
		    nLenX:=Len(aArrayMain)
			IF nLenX == 1.00 .and. (Empty( aArrayMain[ nLenX , nPosData ]) .OR. Empty(aArrayMain[ nLenX , nPosCodA ]))
				//-- Inicializa o Array Principal de Abono
				aArrayMain := {}
			EndIF
			//-- Corre Todos os Abonos
			nLenY := Len( aCols )
			For nY := nY To nLenY
			    //-- Adiciona Novos Abonos na Matriz Principal de Abono
				IF !Empty( aCols[ nY , nPosData ] ) .AND. !Empty( aCols[ nY , nPosCodA ] )
					aAdd( aArrayMain , aClone( aCols[ nY ] ) )
					aAdd( aElem, Len(aArrayMain)  )
				EndIF
			Next nY
		//-- Se foi Digitado um Abono
		ElseIF nLenY == 0 .and.( ( ( nLenY := Len( aCols ) ) == Len( aAboStatic ) ) .and. nLenY == 1.00 )

			IF Len( aArrayMain ) == nLenY  .and. !Empty(aElem)
				aArrayMain[ nLenY ] := aClone( aCols[ nLenY ] )
			Else
				aAdd( aArrayMain , aClone( aCols[ nLenY ] ) )
			EndIF
		EndIF

        //-- Reordena os Abonos por Data + Hora Fim + Hora Abono + Hora Inicial
		aSort( aArrayMain ,,, bSort )

        //-- Se Algum Abono anterior sofreu Manutencao (Alteracao)
		IF lManutenc
			nLenY := Len( aData )
			nLenX := Len( aArrayMain )
			//-- Corre Todas as Datas com Alteracao de Abonos
			For nY := 1 To nLenY
				IF ( nX := aScan( aArrayMain , { |x| x[ nPosData ] == aData[ nY ] } ) ) > 0
					For nX := nX To nLenX
						IF aArrayMain[ nX , nPosData ] == aData[ nY ]
						   //	aArrayMain[ nX , nPosApon ] := Space(01)
						Else
							Exit
						EndIF
					Next nX
				EndIF
			Next nY

			aData		:= {}
			lManutenc	:= .F.
		EndIF
   		//-- Iguala arrays de apontamentos para futura comparacao de alteracao de conteudo
	   	aAboStatic := aClone( aCols )
		//aColsAnt 	:= aClone( aCols )
	EndIF

	IF !lTudoOk
  	    //-- Obtem o Dia Corrente de Acordo com o Calendario
  	    //dData:=aListSint[oLBoxSint:nAt,CALEND_ELEM_DATA]
  	    //-- Inicialiaza aCols do GetDados e o array com os numeros das linhas correspondentes
  	    aCols  := {} ; aElem := {}
		//-- Localiza o inicio dos Abonos do Dia no array Principal
		IF ( nX := aScan( aArrayMain , { |x| 	x[ nPosData   ] == dDataSPC .AND. ;
		             							x[ nPosCODEVE ] == cEvento 	.AND. ;
		    						        	x[ nPosTPMARCA] == cTpMarca 	.AND. ;
		  					                	x[ nPosCC     ] == cCCSPC   } ) ) > 0
			nLenX := Len( aArrayMain )
			//-- Carrega os Abonos e os numeros das linhas correspondentes nos respectivos arrays
			lDeletados	:= .T.
			For nX := nX To nLenX
		        IF   aArrayMain[ nX , nPosData   ] # dDataSPC  	.or. ;
		             aArrayMain[ nX , nPosCODEVE ] # cEvento 	.or. ;
		             aArrayMain[ nX , nPosTPMARCA] # cTpMarca 	.or. ;
		             aArrayMain[ nX , nPosCC     ] # cCCSPC
                     Loop
                Endif
               	aAdd( aCols , aClone( aArrayMain[ nX ] ) )
   	           	aAdd( aElem, nX  )
   	           	lDeletados:= If( aArrayMain[ nX, nUsado + 1 ], lDeletados, .F.)
			Next nX

			//-- Quando Houver Abono Rapido  e abonos deletados ou apenas um abono digitado e nao houve abonos deletados
			If  !Empty(cAbono) .AND. ( (lDeletados ).or. ( !lDeletados .AND. ( Len(aCols)==1 ) ) )
				If lDeletados
					aNewaCols:= {}
				    P280AboCols(aHeader,@aNewaCols  	,, aField,,,.T.)
			    	aAdd(aCols, aClone(aNewaCols[1]) )
				    aCols[Len(aCols),nPosHrAb] := nHoras
				Endif
				aCols[Len(aCols), nUsado + 1 ] := .F.
				aCols[Len(aCols),nPosCodA]		:= cAbono
				If aCols[Len(aCols),nPosHrAb] == 0
					aCols[Len(aCols),nPosHrAb]		:= nHoras
				EndIf
		    	//-- Preenche campo virtual "Descricao do motivo de abono"
		    	If SP6->(dbSeek(fFilFunc('SP6')+aCols[1,nPosCodA]))
			       aCols[Len(aCols),nPosMotA] := SP6->P6_DESC
			    Else
			    	aCols[Len(aCols),nPosMotA] := STR0087 //'*** NAO CADASTRADO ***'
			    Endif
			Endif
		Else
		    //-- Se nao Existir Abono para o Dia Carrega Todos os Abonos
			P280AboCols(aHeader	,@aCols		,		,aField,			,nOpcX,.T.)
	 		If !Empty(dDataSPC)
				aAdd( aArrayMain , aClone( aCols[ 1 ] ) )
			EndIf
           	aAdd( aElem, Len(aArrayMain)  )
		EndIF

		//-- Iguala arrays de abonos para futura comparacao de alteracao de conteudo
		aAboStatic := aClone( aCols )
	    aColsAnt   := aClone( aCols )
		//-- Redesenha GetDados de Abono
		n := 1.00

	EndIF

    If oGet<>Nil
    	nSvnAt	:= oGet:oBrowse:nAt
	    oGet:aCols:=aClone(aCols)
		oGet:ForceRefresh()
		oGet:oBrowse:Refresh()
		oGet:Refresh()
		oGet:oBrowse:nAt := n:=nSvnAt
    Endif

EndIF

Return( NIL )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280AboCols    ³ Autor ³Mauricio MR                       ³ Data ³17/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carrega ABonos a partir do disco                                       	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280AboCols(aCabFile,aArrayMain,aRecno,aField,aVirtual,nOpcX,lVazio,lCount)³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                                       	  ³±±
±±³          ³                                                   		     	       	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³nAbonos                                                	      		      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	           		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	    		  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function P280AboCols(aCabFile,aArrayMain,aRecno,aField,aVirtual,nOpcX,lVazio,lCount)
//-- Variaveis Arquivos
Local aArea			:= GetArea()
Local cAlias		:= "SPK"
Local cPrefix		:= ( PrefixoCpo( cAlias ) + "_" )
Local cPrefAPO		:= ( PrefixoCpo( IF( lPona190 , "SPH" , "SPC" ) ) + "_" )
//-- Variavel Pesquisa
Local cFilMat		:= SRA->( RA_FILIAL + RA_MAT )

//-- Variavel de Retorno
Local nAbonos		:= 0
Local nCpo			:= 0

//-- Variaveis posicao dos campos no aHeader
Local nPosAbono     := GdFieldPos(cPrefAPO+'ABONO'		,aSVTREE[G_APO,G_HEADER])
Local nPosDtApo   	:= GdFieldPos(cPrefAPO+'DATA'		,aSVTREE[G_APO,G_HEADER])
Local nPosHEve      := GDFieldPos(cPrefAPO+'QUANTC'		,aSVTREE[G_APO,G_HEADER])

Local nPosSX3Uso       := fPosColField("X3_USADO"		,aCabec)
Local nPosSX3Nivel     := fPosColField("X3_NIVEL"		,aCabec)
Local nPosSX3Campo     := fPosColField("X3_CAMPO"		,aCabec)
Local nPosSX3Context   := fPosColField("X3_CONTEXT"	    ,aCabec)
Local nPosSX3Tamanho   := fPosColField("X3_TAMANHO"	    ,aCabec)
Local nPosSX3Tipo      := fPosColField("X3_TIPO"		,aCabec)
Local nPosSX3Relacao   := fPosColField("X3_RELACAO"		,aCabec)

Local nHoras		:= 0
Local dData     	:= Ctod('  /  /  ')

//-- Variaveis Controle de Loop
Local nY			   := 0
Local nLenCpos		   := Len(aCpos)
Local aLinhaArray	   := {}

//-- Variaveis para tratamento de Horario Noturno
Local aRetHrNot	:= {}
Local nIniHnot 	:= 0
Local nFimHnot 	:= 0
Local nMinHnot 	:= 0

 //-- Se nao for a Primeira Vez
Private nPosData	:= GdFieldPos( "PK_DATA"   	)
Private nPosCodA	:= GdFieldPos( "PK_CODABO" 	)
Private nPosMotA	:= GdFieldPos( "PK_MOTABO" 	)
Private nPosHrIn	:= GdFieldPos( "PK_HORINI" 	)
Private nPosHrFm	:= GdFieldPos( "PK_HORFIM" 	)
Private nPosHrAb	:= GdFieldPos( "PK_HRSABO" 	)
Private nPosFlag	:= GdFieldPos( "PK_FLAG" 	)
Private nPosCODEVE	:= GdFieldPos( "PK_CODEVE" 	)
Private nPosTpMarca := GdFieldPos( "PK_TPMARCA"	)
Private nPosCC 		:= GdFieldPos( "PK_CC"		)

DEFAULT aArrayMain	:= {}
DEFAULT aRecno		:= {}
DEFAULT aField		:= {}
DEFAULT aVirtual    := {}
DEFAULT nOpcX		:= 3.00
DEFAULT lVazio		:= .F.
DEFAULT lCount		:= .F.

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Monta aArrayMain que Contem Todos os Abonos  Funcionario     ³
³mas Possui a Estrutura do aCols							  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/


//-- Posicao no Apontamento
cEvento   := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefAPO+'PD'		,aSVTREE[G_APO,G_HEADER])]
cTpMarca  := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefAPO+'TPMARCA'	,aSVTREE[G_APO,G_HEADER])]
cCCSPC    := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],GdFieldPos(cPrefAPO+'CC'		,aSVTREE[G_APO,G_HEADER])]
dDataSPC  := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],nPosDtApo]   //-- Data do Apontamento
nHoras	  := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],nPosHEve]    //-- Qtde Horas Calculadas do Apontamento
nUsado	  := If (Len(aSvtree[G_ABO,G_HEADER]) > 0, Len(aSvtree[G_ABO,G_HEADER]) , nUsado)
nHrsEve	  := nHoras   //-- Armazena valor do apontamento

IF !lVazio .or. lCount

	dbSelectArea( cAlias )

   	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o aCols a partir dos Abonos      		              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	If (cAlias)->( dbseek(cFilMat)  )
	    nAbonos := 0
	    While (cAlias)->( !Eof() .and. &(cPrefix+"FILIAL") + &(cPrefix+"MAT") == cFilMat )
	        IF (cAlias)->( &(cPrefix+"DATA") < dPerIni .or. &(cPrefix+"DATA") > dPerFim )
				(cAlias)->( dbSkip() )

				Loop
			EndIF
            nAbonos++

            //-- Cria Linha de Registro de Apontamento
           	aLinhaArray	:= Array(nSvUsado)

            If !lCount
	            nCpo:=0
	            For nY:=1 To nLenCpos
	           		IF aCpos[nY,nPosSX3Uso] .AND. cNivel >= aCpos[nY,nPosSX3Nivel] .and. ASCAN(aField,Trim(aCpos[nY,nPosSX3Campo])) = 0
			           nCpo++

			           If aCpos[nY,nPosSX3Context] == "V"
	                       If AllTrim(aCpos[nY,nPosSX3Campo]) == 'PK_MOTABO'
	                       	  If SP6->(dbSeek(fFilFunc('SP6')+SPK->PK_CODABO))
								 M->PK_MOTABO := SP6->P6_DESC
							  Else
								 M->PK_MOTABO := STR0087 //'*** NAO CADASTRADO ***'
							  Endif
	                          	aLinhaArray[nCpo] := M->PK_MOTABO
	                       ElseIf AllTrim(aCpos[nY,nPosSX3Campo]) == 'PK_HRSABO'

                       	   	    /*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³ Obtem a Hora Noturna de Acordo com o Turno                  ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
								aRetHrNot:= RetHrNot(aLinhaArray[nPosData])
								nIniHnot := aRetHrNot[1]	// Inicio da Hora Noturna
								nFimHnot := aRetHrNot[2]	// Final da Hora Noturna
								nMinHnot := aRetHrNot[3]	// Minutos da Hora Noturna
								lNoturno := fHorNot(aRetHrNot)

							    dData  := If(aLinhaArray[nAbonos,nPosHrFm] < aLinhaArray[nPosHrIn],dData + 1, 	aLinhaArray[nPosData])
                       	   	    aLinhaArray[nCpo]:= Round(fCalHoras(dData, M->PK_HORFIM, aCols[n,nPosData], aCols[n,nPosHrIn], Nil, Nil, lNoturno, aCols[n,nPosData],Nil,	nIniHnot, 	nFimHnot, nMinHnot), 2)
	                       Endif
	                       Aadd( aVirtual , AllTrim(aCpos[nY,nPosSX3Campo]) )
	                   Else
	                       aLinhaArray[nCpo] := &(cAlias+"->"+aCpos[nY,nPosSX3Campo])
	                   Endif

	                Endif
	            Next nLenCpos


				// Gravando o alias e o recno para utilizar o WalkThru
		        aLinhaArray[nUsado-1] 	:= cAlias
		        aLinhaArray[nUsado] 	:= Recno()
		        aLinhaArray[nUsado+1] 	:= .F.


	            //-- Adiciona a linha montada ao array principal onde estarao todos os
			    //-- abonos do funcionario naquele periodo solicitado
			    Aadd(aArrayMain, aLinhaArray)

	            aAdd(aRecno,{})
				aAdd(aRecno[Len(aRecno)], aArrayMain[nAbonos,nPosData]) //Data
				aAdd(aRecno[Len(aRecno)], aArrayMain[nAbonos,nPosCODEVE]) //Evento
				aAdd(aRecno[Len(aRecno)], Recno())
				aAdd(aRecno[Len(aRecno)], nAbonos)
            Endif

		    (cAlias)->( dbSkip() )

	    EndDo

	Endif

EndIF


/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta Array do 1§ Elemento Vazio. 	   					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF !lCount
	IF nAbonos == 0 .or. lVazio
		nAbonos := 1.00
		aArrayMain := Array( nAbonos, nSvUsado )
        nCpo	:= 0
		For nY:=1 To nLenCpos
           	IF aCpos[nY,nPosSX3Uso] .AND. cNivel >= aCpos[nY,nPosSX3Nivel] .and. ASCAN(aField,Trim(aCpos[nY,nPosSX3Campo])) = 0
			 	nCpo++
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Monta Array do 1§ Elemento Vazio. Se Inclusao                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ExistIni(aCpos[nY,nPosSX3Campo],aCabec,aCpos)  //-- Verifica se o campo contem inicializador padrao
	   			   aArrayMain[nAbonos][nCpo] := InitPad(aCpos[nY,nPosSX3Relacao])
			   	   IF aCpos[nY,nPosSX3Tipo] == "C"
				      aArrayMain[nAbonos][nCpo] := PADR(aArrayMain[1][nCpo],aCpos[nY,nPosSX3Tamanho])
			   	   Endif
			   	Else
		   			IF aCpos[nY,nPosSX3Tipo] == "C"
						aArrayMain[nAbonos][nCpo] := SPACE(aCpos[nY,nPosSX3Tamanho])
					ELSEIF aCpos[nY,nPosSX3Tipo] == "N"
						aArrayMain[nAbonos][nCpo] := 0
					ELSEIF aCpos[nY,nPosSX3Tipo] == "D"
						aArrayMain[nAbonos][nCpo] := CTOD("  /  /  ")
					ELSE
						aArrayMain[nAbonos][nCpo] := .F.
					Endif
		        Endif

	            If aCpos[nY,nPosSX3Context] == "V"
	               Aadd( aVirtual , AllTrim(aCpos[nY,nPosSX3Campo]) )
				Endif
			Endif
		Next nLenCpos

		aArrayMain[nAbonos,nUsado+1] := .F.


  	    //Preenche Campos (Data /Evento   identicos ao Apontamento)
		//				   Flag sugere-se tipo Informado "I"
		//				   Abono sugere-se o Abono "rapido" se existir no Apontamento

		//Obrigatoriamente Garante que Data do Abono seja igual a Data do Apontamento
		If nPosDATA > 0
		   aArrayMain[nAbonos, nPosData] :=  dDataSPC
		EndIf

	    // Preenche Flag de Tipo de Abono (Informado/Gerado) com informado "I"
		If nPosFLAG > 0
			aArrayMain[nAbonos, nPosFlag] := "I"
		EndIf

		// Preenche Codigo do Evento a partir do Apontamento
		If nPosCODEVE > 0
			aArrayMain[nAbonos, nPosCODEVE] := cEvento
		EndIf
		// Preenche Tipo de Marcacao a partir do Apontamento
		If nPosTpMarca > 0
			aArrayMain[nAbonos, nPosTpMarca] := cTpMarca
		EndIf
		// Preenche Codigo do CC a partir do Apontamento
		If nPosCC > 0
			aArrayMain[nAbonos, nPosCC] := cCCSPC
		EndIf

	 	// Preenche Motivo de Abono a Partir do SPC
		If nPosAbono > 0
			//Cod.Abono em SPK:=Cod.Abono em SPC
			aArrayMain[nAbonos,nPosCodA] := aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],nPosAbono]

		    //-- Se o usuario digitou abono "rapido"
		    If !Empty(aArrayMain[nAbonos,nPosCodA])
		    	//-- Preenche campo virtual "Descricao do motivo de abono"
		    	If SP6->(dbSeek(fFilFunc('SP6')+aArrayMain[nAbonos,nPosCodA]))
			       aArrayMain[nAbonos,nPosMotA] := SP6->P6_DESC
			    Else
			    	aArrayMain[nAbonos,nPosMotA] := STR0087 //'*** NAO CADASTRADO ***'
			    Endif
			Else
			   //Sem abono "rapido" digitado
			   aArrayMain[nAbonos,nPosMotA] := STR0087 //'*** NAO CADASTRADO ***'
			Endif

		Endif


		//Calcula Saldo de Horas a Abonar
		If  !Empty(nPosHrAb)

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem a Hora Noturna de Acordo com o Turno                  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aRetHrNot:= RetHrNot(dDataSPC)
			nIniHnot := aRetHrNot[1]	// Inicio da Hora Noturna
			nFimHnot := aRetHrNot[2]	// Final da Hora Noturna
			nMinHnot := aRetHrNot[3]	// Minutos da Hora Noturna
			lNoturno := fHorNot(aRetHrNot)

		  	aArrayMain[nAbonos, nPosHrAb] := Max(0,__TimeSub(aSVTREE[G_APO,G_ACOLS,aSVTREE[G_APO,G_N],nPosHEve],PnTotAbo(aArrayMain,aHeader,nUsado+1)))

			//Se Existir +1 abono Calcula Horas Inicial e Final para o Abono a ser Informado
			If nAbonos>1  .AND. !Empty(aArrayMain[nAbonos, nPosHrAb])
				//Sugere Hora Inicial do Abono
				If !Empty(nPosHrIn)
				    //Calcula Hora Inicial para o Abono  (Hora_Fim_Abono_Anterior)
					aArrayMain[nAbonos, nPosHrIn] :=	aArrayMain[nAbonos-1, nPosHrFm]
				Endif
				//Calcula e Sugere Hora Final do Abono (Hora Inicial + Saldo de Horas a Abonar)
				If !Empty(nPosHrFm)
					aArrayMain[nAbonos, nPosHrFm] := RetFimTab(aArrayMain[nAbonos, nPosData]  , aArrayMain[nAbonos, nPosHrIn] , aArrayMain[nAbonos, nPosHrAb] , NIL, lNoturno, aArrayMain[nAbonos, nPosData], 	nIniHnot, nFimHnot,  nMinHnot  )[2]
				Endif
			Elseif nAbonos==1.AND. !Empty(	aArrayMain[nAbonos, nPosHrAb])
					//-- Sugere Horas a Abonar e Horarios Quando Nao Existirem Abonos
					//-- Cadastrados e horas a Abonar DIGITADAS.

					//Obtem a Posicao do Primeiro Elemento com Data Igual do Apontamento e
				    //a primeira entrada de acordo com a ordem.
				    //OBSERVACAO: Para Horarios Noturnos ele pode nao corresponder a primeira Entrada (Entrou as 22 do dia anterior)
				    //O que nos forca a obter a Ordem do elemento e assim posicionar na 1a Entrada
				    //de acordo com a Data.
					If (nPosTab := Ascan(aTabCalend, { |x| x[1] == dDataSPC }) ) > 0
						cOrdem  := aTabCalend[nPosTab,2]
						nPosOrdem:= Ascan(aTabCalend, { |x| x[2] == cOrdem })
					Else
						cOrdem		:= Space(3)
						nPosOrdem	:= 0
					Endif

					If  nPosHrIn  > 0
						If nPosOrdem > 0
						 	aArrayMain[nAbonos, nPosHrIn] := If(nHoras > 0, aTabCalend[nPosOrdem,3],0)
						Endif
					EndIf

					If nPosHrAb > 0
						aArrayMain[nAbonos, nPosHrAb] := nHoras
					EndIf

					If  nPosHrFm > 0
						If nPosOrdem > 0
							aArrayMain[nAbonos, nPosHrFm] := RetFimTab(aArrayMain[nAbonos, nPosData]  , aArrayMain[nAbonos, nPosHrIn] , aArrayMain[nAbonos, nPosHrAb] , NIL, lNoturno, aArrayMain[nAbonos, nPosData], 	nIniHnot, nFimHnot,  nMinHnot  )[2]
						Endif
					EndIf
			EndIf
		EndIf

		nAbonos:= 0
	EndIF
EndIF

//-- Ordena os lancamentos de abono por Horarios
aSort(aArrayMain,,, bSort )

RestArea( aArea )

Return( nAbonos )

/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
//            F U N C O E S     A B A N D O N O     D E     P R O G R A M A
/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fSai15         ³ Autor ³Mauricio MR           ³ Data ³29/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Trata Saida do Programa com Confirmacao da Operacao                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fSai15(oObjPendente,bChange,nOpcao)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oObjPendente --> Objeto com inconsistencias                       ³±±
±±³          ³ bChange      --> Bloco para Atualizacao / Reposicionamento de Ob- ³±±
±±³          ³                 jetos e variaveis                                 ³±±
±±³          ³ nOpcao       --> Opcao de Manutencao                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fSai15(oObjPendente,bChange,nOpcao, lSai)
Local lRet:=.T.

DEFAULT lSai:= .T.

If oObjPendente == Nil
	nOpcao := IF( nOpcX == 3 , nOpcX , 1 )

	//-- Avalia o Ultimo Browse Ativo
    If (Eval(oGet:oBrowse:bLostFocus))
        //-- Para opcoes de Inclusao ou Alteracao realiza a verificacao de apontamento
		If  (nOpcX==3 .Or. nOpcX==4) .And. !lPona240
			cEstou:='1'
			Eval(bChange,{||.T.})
		    Eval(bReaponMarc,{||.T.})
		Endif
		nOpcao := 1
		lRet:=.T.
		If lSai
			oDlg:End()
		Endif
	Else
	   nOpcao := 0
	   lRet:=.F.
	Endif
Else
   nOpcao := 0
   lRet:=.F.
   oObjPendente:oBrowse:SetFocus()
Endif
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fSai24         ³ Autor ³Mauricio MR           ³ Data ³06/08/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Prepara Atualizacao de Arrays para verificacao a posteriori        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fSai24(bChange,nOpcao)					                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ bChange      --> Bloco para Atualizacao / Reposicionamento de Ob- ³±±
±±³          ³                 jetos e variaveis                                 ³±±
±±³          ³ nOpcao       --> Opcao de Manutencao                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fSai24(bChange,nOpcao)
Local lRet:=.T.


//-- Se Inclusao ou Alteracao
If  nOpcx==3 .OR. nOpcx==4
    //-- Descarrega o conteudo do Get para as variaveis aCols, aHeader e n
    fVarGet( @oGet, @aHeader, @aCols, @n, DESCARREGA)
    //-- Nao Carrega aCols,Descarrega aCols em aArrayMain e nao atualiza get oposto.
    Eval(bChange,{|| {.F.,.T.,.F.} } )
    //-- Atualiza Arrays aSvtree
    fMuda( Val(cEstou), DESCARREGA)
	//-- Verifica Alteracoes realizadas em Marcacoes, Apontamentos e Abonos
	If  fSai280(  {{aSVTREE[G_MARC,G_MAIN],aSVTREE[G_MARC,G_CLONE_MAIN]},;
	 	     	   {aSVTREE[G_APO,G_MAIN],aSVTREE[G_APO,G_CLONE_MAIN]},;
				   {aSVTREE[G_ABO,G_MAIN],aSVTREE[G_ABO,G_CLONE_MAIN]}};
  	           )
        nOpcao := 3
        oDlg:End()
    Else
      lRet:=.F.
    Endif
Else
   nOpcao := 3
   oDlg:End()
Endif

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fSai280   ³ Autor ³ Mauricio MR           ³ Data ³ 27/06/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica Abandono de Manutencao                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fSai280(aMatrizes)	     		                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aMatrizes   --> Array com Pares de Matrizes a Serem compara³±±
±±³          ³                 das                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                  	     	      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function fSai280(aMatrizes)
Local lRet		:=	.T.

//-- Verifica Alteracoes no Array original e o aCols corrente
aRet:=fAlt280(aMatrizes)

//-- Se Ocorreram novas informacoes
If aRet[1]
    //-- Verifica Se NAO Abandona
	If !MsgYesNo(OemtoAnsi(STR0092),OemtoAnsi(STR0091)) //#"Abandona Alteracoes Realizadas?" #"Aten‡„o"
	   lRet:=.F.
	Endif
Endif
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fAlt280   ³ Autor ³ Mauricio MR           ³ Data ³ 03/07/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica Alteracao de Array                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Sintaxe  ³ fAlt280(aMatrizes) --> {lAlterado,aElem Alterados}         ³±±
±±³          ³ aMatrizes  --> Pares de Matrizes a serem comparadas        ³±±
±±³          ³ lAterado   --> .T. Houve Ateracao / .F. Nao Houve          ³±±
±±³          ³ aElem      --> numerico Identificador dos Pares Alterados  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Pona280                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fAlt280(aMatrizes)
Local lAlterado	:=	.F.
Local aElem		:= {}
//-- Verifica Alteracoes no Array original e o aCols corrente
Aeval(aMatrizes,{|aMat,y|If( !fCompArray( aMat[1] , aMat[2] ),(lAlterado:=.T.,AADD(aElem,y)),Nil )})

Return {lAlterado,aElem}

/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
//   F U N C O E S       P E R D A       E      G A N H O      D E      F O C O
/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fChange(bBloco)³ Autor ³Mauricio MR           ³ Data ³31/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Trata Chamadas de Rotinas para Atualizacoes de Objetos/Arrays      ³±±
±±³          ³Reposiciona Marcacoes / Apontamentos / Abonos / Calendario.        ³±±
±±³          ³De Acordo com o Get Ativo/Operacoes e Situacaoes especificas       ³±±
±±³          ³ora temos que carregar informacoes de um get, ora atualizar varia- ³±±
±±³          ³veis de um get e ora exibir informacoes do get NAO corrente e re-  ³±±
±±³          ³tornar ao get que chamou.                                          ³±±
±±³          ³                                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fChange(bBloco)                                                    ³±±
±±³          ³bBloco eh um bloco de acoes opcional. Se nao for passado, sera assu³±±
±±³          ³mido o valor logico .F.para lMuda e .T. p/ lTrata e a funcao fMuda ³±±
±±³          ³deixarah de ser executada. Se for passado um bloco, este sera avali³±±
±±³          ³ado e retornara (xRet) um valor que podera ser logico ou um array. ³±±
±±³          ³No caso de ser array, o primeiro elemento deverah ser obrigatoriame³±±
±±³          ³nte um logico para a execucao de fMuda. O segundo parametro sera um³±±
±±³          ³valor logico para o bloco bTrata???. O terceiro um logico para atua³±±
±±³          ³lizar o get oposto ao corrente.                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ bBloco --> Opcional. Bloco que retornara uma matriz de Logicos.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Static Function fChange(bBloco)
Local lRet	:= .T.

Local lMuda	:= .F.
Local lTrata:= .F.
Local lList	:= .T.
Local xRet

If bBloco<>Nil
   xRet:=Eval(bBloco)
   If  ValType(xRet)=="L"
		lMuda	:= xRet
		lTrata	:= .F.
		lList	:= .T.
   Else
       lMuda	:=xRet[1]
       lTrata	:=xRet[2]
       lList	:=xRet[3]

   Endif
Endif

If cEstou=='1'
   If lMuda
      fMuda(1)
   Endif
   Eval(bTrataMarc,lTrata)
   If lList
      Eval(bApoList)
   Endif
ElseIf cEstou=='2'
  	   If lMuda
  	      fMuda(2)
  	   Endif
  	   Eval(bTrataApo,lTrata)
  	   If lList
  	      Eval(bMarcList)
  	   Endif
Else
   	If lMuda
   	   fMuda(3)
   	Endif
   	Eval(bTrataAbo,lTrata)
   	Eval(bAboList)
Endif

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fMarcGotFocus  ³ Autor ³Mauricio MR           ³ Data ³29/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Trata Recebimento de Foco pelo Get de Marcacoes                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fMarcGotFocus(oObjPendente,bChange)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oObjPendente --> Objeto com inconsistencias                       ³±±
±±³          ³ bChange      --> Bloco para Atualizacao / Reposicionamento de Ob- ³±±
±±³          ³                 jetos e variaveis                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fMarcGotFocus(oObjPendente,bChange)
Local lRet		:= .T.
Local lLinEdit	:= .T.

If oObjPendente <> Nil .AND. oObjPendente:oBrowse:Hwnd <> o1Get:oBrowse:Hwnd

   o1Panel:lReadOnly:=If(nOpcX != 2 .and. nOpcX != 5, .T.,	 o1Panel:lReadOnly ) //Visualizacao ou Exclusao.T.

   oObjPendente:oBrowse:SetFocus()

Else

	If oObjPendente == Nil
       fPrincipal(olBoxSint,@o1Get,@o1Panel,oDlg,bChange,"1",,.F.)
    Else
       oObjPendente:= Nil
       o1Panel:lReadOnly	:=If(nOpcX != 2 .and. nOpcX != 5 , .F.,	 .T. ) //Visualizacao ou Exclusao
       fProgTeclas("1")  //-- Habilita Teclas
	EndIf

	dDataPend := CalendRetCpo( cPrefix+"DATA",,,cPrefix )

	If lPna280Lin
		lLinEdit := ExecBlock("PNA280LIN",.F.,.F., { dDataPend } )

		If !lLinEdit
			//Impede que a linha seja editada
			o1Get:lInsert := .F.
			o1Get:lUpdate := .F.
		Else
			o1Get:lInsert := .T.
			o1Get:lUpdate := .T.
		EndIf
	EndIf
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fMarcLostFocus ³ Autor ³Mauricio MR           ³ Data ³29/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Trata Perda  de Foco pelo Get de Marcacoes                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fMarcLostFocus(oObjPendente,bChange)                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oObjPendente --> Objeto com inconsistencias                       ³±±
±±³          ³ bChange      --> Bloco para Atualizacao / Reposicionamento de Ob- ³±±
±±³          ³                 jetos e variaveis                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fMarcLostFocus(oObjPendente,bChange)

Local nPosAponta	:= 0
Local nPosDt		:= 0
Local lAponta		:= .F.
Local cPrefMarc 	:= ( PrefixoCpo(iF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local lRet			:= .T.

If oObjPendente == Nil
   fVarGet(@o1Get, @aHeader,@aCols,@n,DESCARREGA,1)
   If !o1Get:TudoOK()
	  oObjPendente:=o1Get
	  o1Panel:lReadOnly:=If(nOpcX != 2 .and. nOpcX != 5 .and. !lPnaMrc, .T., o1Panel:lReadOnly ) //Visualizacao ou Exclusao

      lRet:= .F.
   Else
       o1Panel:lReadOnly:= If(nOpcX != 2 .and. nOpcX != 5 .and. !lPnaMrc, .T.,	 o1Panel:lReadOnly ) //Visualizacao ou Exclusao.T.
       //-- Verifica a Necessidade de Apontar as Marcacoes
       nPosAponta		:= GdFieldPos(cPrefMarc+"APONTA")
	   nPosDt			:= GdFieldPos(cPrefMarc+"DATA")
       aEval(aCols,{|aMarc|If( aMarc[nPosAponta] <> "S" .AND. !Empty(aMarc[nPosDt]), lAponta:=.T., Nil ) } )

	   //-- Para opcoes de Inclusao ou Alteracao realiza a verificacao de apontamento
	   If  (nOpcX==3 .Or. nOpcX==4) .And. !lPona240
		   If lAponta .OR. !fCompArray( aCols , aColsAnt )
	          Eval(bTrataMarc,.T.)
	          P280MarcGet()                  //-- Reinicializa aCols Static Marcacoes
	          Eval(bTrataMarc,.F.)          //-- Atualiza aCols a partir do aArrayMain (Flag Aponta)
		      fMuda(1,DESCARREGA)
	 	      o1Get:Refresh()
	          fMuda(2)
	  	      P280ApoCols(aHeader, @aArrayMain, @aRecno, aField, @aVirtual, nOpcX, .F., .F.,.T.) //-- Atualiza Apontamentos Baseado no aRetult
	 	      P280ApoGet()					//-- Reinicializa aCols Static Apontamento
			  P280AboGet()					//-- Reinicializa aCols Static Abonos
	 	      Eval(bTrataApo,.F.)
	          fMuda(2,DESCARREGA)
	          fMuda(1)
  	   		  Pn280RefresholBoxSint()		//-- Verifica Divergencias
	       Endif
       Endif

	Endif
Else
   o1Panel:lReadOnly:=If(nOpcX != 2 .and. nOpcX != 5 .and. !lPnaMrc, .T., o1Panel:lReadOnly ) //Visualizacao ou Exclusao
   lRet:= .F.
Endif

ReTurn  lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fApoGotFocus   ³ Autor ³Mauricio MR           ³ Data ³29/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Trata Recebimento de Foco pelo Get de Apontamento                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fApoGotFocus(oObjPendente,bChange)                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oObjPendente --> Objeto com inconsistencias                       ³±±
±±³          ³ bChange      --> Bloco para Atualizacao / Reposicionamento de Ob- ³±±
±±³          ³                 jetos e variaveis                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fApoGotFocus(oObjPendente,bChange)
Local lRet := .T.
If oObjPendente <> Nil .AND. oObjPendente:oBrowse:Hwnd <> o2Get:oBrowse:Hwnd
   o2Panel:lReadOnly:=If(nOpcX != 2 .and. nOpcX != 5, .T.,	 o2Panel:lReadOnly ) //Visualizacao ou Exclusao

   oObjPendente:oBrowse:SetFocus()

Else
   //bAboCols:={||aSvtree[G_ABO,G_ACOLS]}  		// 3,2
   bAboCols  :={||aSvtree[G_ABO][G_MAIN]} 	//--  3 , 4  Variavel utilizada para ler abonos em memoria

   If oObjPendente == Nil
      fPrincipal(olBoxSint,@o2Get,@o2Panel,oDlg,bChange,"2",,.F.)

   Else
      oObjPendente:= Nil
      o2Panel:lReadOnly	:=If((nOpcX != 2 .and. nOpcX != 5 ), .F.,	 .T. ) //Visualizacao ou Exclusao
      fProgTeclas("2")  //-- Habilita Teclas
   Endif

   //-- Posiciona Inicialmente na Coluna do Codigo do Evento Informado ou Abono
   Pn130PosCursor(oGet:oBrowse)

Endif
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fApoLostFocus  ³ Autor ³Mauricio MR           ³ Data ³29/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Trata Perda de Foco pelo Get de Apontamento                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fApoLostFocus(oObjPendente,bChange)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oObjPendente --> Objeto com inconsistencias                       ³±±
±±³          ³ bChange      --> Bloco para Atualizacao / Reposicionamento de Ob- ³±±
±±³          ³                 jetos e variaveis                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fApoLostFocus(oObjPendente,bChange)
Local aColsMarcAnt:= {}
Local cAlias	:= IF( lPona190 , "SPH" , "SPC" )
Local nX		:= 0
Local nLenaCols	:= 0
Local cPrefMarc := ( PrefixoCpo(iF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local nPosAponta:= 0
Local nPosDt	:= 0
Local lAponta	:= .F.
Local lRet		:= .T.

If  oObjPendente == Nil
    fVarGet(@o2Get, @aHeader,@aCols,@n, DESCARREGA,2)
	If  !o2Get:TudoOK()
        oObjPendente:=o2Get
        o2Panel:lReadOnly:=If(nOpcX != 2 .and. nOpcX != 5, .T.,	 o2Panel:lReadOnly ) //Visualizacao ou Exclusao.T.
   	    lRet:= .F.
    Else

        o2Panel:lReadOnly:=If(nOpcX != 2 .and. nOpcX != 5, .T.,	 o2Panel:lReadOnly ) //Visualizacao ou Exclusao.T.

        //-- Realiza Copia das Marcacoes do Dia para Posterior Verificacao de alteracao de conteudo
        aColsMarcAnt:=Aclone(aSVTREE[G_MARC,G_ACOLS])


        //-- Realiza a Gravacao "em memoria" dos apontamentos", marca como deletados os abonos sem apontamento,m
        //-- cria novos abonos e altera o flag das marcacoes para forcar novo apontamento se necessario
        pn130Grava(cAlias,nOpcx,@aSVTREE[G_APO,G_MAIN],@aSVTREE[G_APO,G_ELEM],@aSVTREE[G_ABO,G_HEADER],@aSVTREE[G_ABO,G_MAIN],@aSVTREE[G_ABO,G_ACOLS],@aSVTREE[G_MARC,G_HEADER],@aSVTREE[G_MARC,G_ACOLS],.F.)
        Eval(bTrataApo,.T.)    //-- Atualiza aArrayMain, aElem
		fMuda(2,DESCARREGA)		//-- Transfere o conteudo dos Arrays para arrays historicos (aCols->aSvTree)
		bAboCols:={||aSvTree[G_ABO,G_MAIN]}

	    //-- Para opcoes de Inclusao ou Alteracao realiza a verificacao de apontamento
		If  (nOpcX==3 .Or. nOpcX==4) .And. !lPona240

		    //-- Verifica a Necessidade de Apontar as Marcacoes
	       	nPosAponta := GdFieldPos(cPrefMarc+"APONTA",aSVTREE[G_MARC,G_HEADER])
	       	nPosDt     := GdFieldPos(cPrefMarc+"DATA",aSVTREE[G_MARC,G_HEADER])

	        aEval(aSVTREE[G_MARC,G_ACOLS],{|aMarc|If( aMarc[nPosAponta] <> "S" .AND. !Empty(aMarc[nPosDt]), lAponta:=.T., Nil ) } )
		    //-- Se Ocorreu Alteracao nas Marcacoes
		    If lAponta .OR. !fCompArray(aSVTREE[G_MARC,G_ACOLS],aColsMarcAnt)
		        //-- Inicializa aColsStatic de Marcacoes
		        //-- Para Posterior Atualizacao do ArrayMain
		        fMuda(1)
				P280MarcGet()
			    //-- Obtem o Total de Marcacoes
		        nLenaCols:=Len(aSVTREE[G_MARC,G_ACOLS])

			    //-- Corre Todas as Marcacoes
			    For nX:=1 To nLenaCols

				    If  aSVTREE[G_MARC,G_ACOLS,nX, nPosAponta] <> "S"
						//-- Aponta Marcacoes Novamente
					    Eval(bTrataMarc,.T.) 		//-- Recupera as marcacoes do Dia
	           		    P280MarcGet()               //-- Reinicializa aCols Static Marcacoes
	                    Eval(bTrataMarc,.F.)       //-- Atualiza aCols a partir do aArrayMain (Flag Aponta)
				     	fMuda(1,DESCARREGA)        //-- Descarrega as Marcacoes
				 	    o1Get:Refresh()            //-- Reexibe o Get de Marcacoes
				        fMuda(2)                   //-- Carrega os apontamentos
				  	    P280ApoCols(aHeader, @aArrayMain, @aRecno, aField, @aVirtual, nOpcX, .F., .F.,.T.) //-- Transfere o Resultado do Reapontamento para array de apontamento
				 	    P280ApoGet()					//-- Reinicializa aCols Static Apontamento
				  		P280AboGet()					//-- Reinicializa aCols Static Abonos
				 	    Eval(bTrataApo,.F.)            //-- Atualiza arrays de apontamento
				        fMuda(2,DESCARREGA)            //-- Descarrega conteudo de apontamento
           		   	    Pn280RefresholBoxSint() 		//-- Verifica Divergencias
		  	       		Exit
				    Endif

				Next nX
				fMuda(2)
			Else
				//-- Verifica a existencia de divergencias
				Pn280RefresholBoxSint(aSVTREE[G_MARC,G_ACOLS], aSVTREE[G_APO,G_ACOLS], .T.)
			Endif
		Endif

	Endif
Else
 	o2Panel:lReadOnly:=If(nOpcX != 2 .and. nOpcX != 5, .T.,	 o2Panel:lReadOnly ) //Visualizacao ou Exclusao.T.
    lRet:= .F.
Endif

Return  lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ fChamaFunc   ³ Autor ³ Mauricio MR           ³ Data ³		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Executa a chamada de uma funcao de validacao de get de acordo  ³±±
±±³          ³ com o get corrente.                                 		      ³±±
±±³          ³ Quando um Get perde foco ele irah realizar as validacoes de    ³±±
±±³          ³ LinhaOK e TudoOk. No Entanto, quando temos um Get Pendente, nao³±±
±±³          ³ podemos alternar para o aCols e o aHeader correspondente e con ³±±
±±³          ³ sequentemente nao devemos realizar validacoes nesse Get.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ fChamaFunc(cGet,bBloco)              					      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cGet   -->  Caracter numero do Get corrente                    ³±±
±±³			 ³ bBloco -->  Bloco de chamda da funcao                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 										    		  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function fChamaFunc(cGet,bBloco)
Local lRet:= .T.

If cEstou == cGet
   lRet:=Eval(bBloco)
Endif

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fVarGet        ³ Autor ³Mauricio MR           ³ Data ³06/08/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carrega/Descarrega Variaveis aHeader, aCols e n de um GetDados     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fVarGet(oGet,aHeader,aCols, n, lCarrega,nGet)                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oGet        --> Objeto GetDados  			                     ³±±
±±³          ³ aHeader     --> Array aHeader  do Get                             ³±±
±±³          ³ aCols       --> Array aCols do Get                                ³±±
±±³          ³ n           --> n do Get                                          ³±±
±±³          ³ lCarrega    --> .T. - Carrega Variaveis para o Get                ³±±
±±³          ³ nGet        --> Indice do Get no aSvTree                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fVarGet(oGet,aHeader,aCols, n, lCarrega, nGet)
DEFAULT lCarrega:= CARREGA
DEFAULT nGet:= Val(cEstou)

If lCarrega
   oGet:aCols  := aClone(aCols)
   oGet:nAt    := n
Else
   aHeader	:= aClone(oGet:aHeader)
   aCols	:= aClone(oGet:aCols)
   n   		:= oGet:oBrowse:nAt
Endif

Return Nil

/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
//                    F U N C O E S     G E N E R I C A S
/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³P280Head    ³ Autor ³MauricioMR            ³ Data ³12/06/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Carrega Array com a Estrutura do aHeader                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³P280Head(aField,aHeader,cAlias,nUsado,lEstrut,aAlter)	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³aField -> Fornecido. Array com os Campos que Nao serao Exi- ³±±
±±³          ³           bidos (Carregados) no GetDados.                   ³±±
±±³          ³aHeader -> Retornado.Array com Campos Cabecalho.             ³±±
±±³          ³cAlias  -> Fornecido. Variavel com o Alias solicitado    	   ³±±
±±³          ³nUsado  -> Retornado. Variavel com a quantida de colunas 	   ³±±
±±³          ³           do GetDados                                       ³±±
±±³          ³lEstrut -> Fornecido. .T. Retorna Array com:				   ³±±
±±³          ³           [1] Campos do Sx3.                  			   ³±±
±±³          ³           [2] Campos do cAlias                              ³±±
±±³          ³aAlter  -> Fornecido e Alterado.Array com os Campos que nao  ³±±
±±³          ³           serao alterados. A funcao substituira o seu con-  ³±±
±±³          ³           teudo pelos campos Alterados para uso na GetDados.³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                  	       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                      	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function P280Head(aField, aHeader,cAlias,nUsado,lEstrut,aAlter)

Local aAreaSX2	:= SX2->( GetArea() )
Local aAreaSX3  := SX3->( GetArea() )
Local aEstrutura:= {}
Local aCampos	:= {}
Local cCampo	:= ''
Local aAux      := {}
Local nX		:= 0
Local nLenEstrut:= 0
Local laHeader  := If(aField == Nil .or. aHeader == Nil, .F., .T.)

Local laAlter   := If(aAlter == Nil , .F., .T.)
Local aAuxAlter :={}

Default nUsado	:=	0
Default lEstrut	:=	.F.
Default aAlter	:= 	{}

nUsado := 0

SX2->( MsSeek( cAlias ) )
SX3->( MsSeek( cAlias ) )

If lEstrut
   //Carrega a Estrutura do SX3
   aEstrutura	:=	SX3->(Dbstruct())
   nLenEstrut	:=	Len(aEstrutura)
Endif


While SX3->( !Eof() .and. Upper( AllTrim( X3_ARQUIVO ) ) == cAlias )
	//-- Carrega Todos os Campos do Alias de acordo com a estrutura lida acima
	IF lEstrut
	    aAux	:=	{}
	    For nX:=1 To nLenEstrut
	        If fContemStr(aEstrutura[nX,01] , "X3_TITULO",.T.)
	           SX3->( aAdd( aAux, AllTrim( X3Titulo() ) ) )
	        ElseIf fContemStr(aEstrutura[nX,01] , "X3_USADO",.T.)
	            SX3->( aAdd( aAux,x3uso(x3_usado)))
	    	Else
	    	    SX3->( aAdd( aAux, &(aEstrutura[nX,01]) ) )
	    	Endif
	    Next nX
	    aAdd(aCampos,aAux)
	EndIf
	//-- Se o aHeader foi passado carrega-o
	If laHeader
  	    cCampo:=Upper( AllTrim( SX3->X3_CAMPO ) )
		//-- Monta aHeader com campos selecionados
		IF SX3->( X3USO(X3_USADO) .and. cNivel >= X3_NIVEL .and. aScan( aField, cCampo ) == 0 )
			nUsado++
			SX3->( aAdd( aHeader,{	AllTrim( X3Titulo() )	,;
		  							cCampo					,;	//Campo
								  	X3_PICTURE				,;	//Picture
								  	X3_TAMANHO				,;	//Tamanho
								  	X3_DECIMAL				,;	//Decimal
								  	X3_VALID				,;	//Validacao
								  	""						,;	//Reservado
								  	X3_TIPO					,;	//Tipo
								  	""						,;	//Reservado
								  	""						 ;	//Reservado
								  }							 ;
						)									 ;
				  )


			//-- Se o aAlter foi passado carrega-o
			If laAlter
			    If  Ascan(aAlter,ALLTRIM(SX3->X3_CAMPO)) == 0
				    aAdd(aAuxAlter,ALLTRIM(SX3->X3_CAMPO))
				Endif
			Endif
		EndIF
    Endif
	SX3->( dbSkip() )
End While

nUsado := nUsado + 2 //Inclusao dos campos utilizados no Walk Thru

( RestArea( aAreaSX2 ) , RestArea( aAreaSX3 ) )

Return( {aEstrutura,aCampos} )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fPosColField   ³ Autor ³Mauricio MR         	    ³ Data ³20/05/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Retorna Posicao de um campo em um array                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fPosColField(cCampo,aHead, nColPesq)                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                         	     	  ³±±
±±³          ³                                                   		          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³nRet                                                     	     	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                                                         	     	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                          	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fPosColField( cCampo, aHead, nColPesq )

LOCAL nRet := 0

DEFAULT nColPesq:=1

cCampo := AllTrim( cCampo )
nRet   := AScan( aHead, { |x| AllTrim( x[nColPesq] ) == cCampo } )

Return( nRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³CriaVar        ³ Autor ³Mauricio MR           ³ Data ³29/07/2002   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Cria Conteudo de uma variavel baseada no campo correspondente a    ³±±
±±³          ³partir do SX3 ou de arrays (aHeaderSx3, aCposSX3 )                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³CriaVar( cCampo, lInitPad, cLado, aHeaderSx3, aCposSX3 )           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cCampo    --> Campo a ser pesquisado                              ³±±
±±³          ³ lInitPad  --> .T. Carrega o conteudo conforme inicializador padrao³±±
±±³          ³               .F. Nao carrega o conteudo conforme inicial. padrao ³±±
±±³          ³ cLado     --> Alinhamento de Campo Caracter                       ³±±
±±³          ³               "C" Centralizado.                                   ³±±
±±³          ³               "L" a Esquerda                                      ³±±
±±³          ³               "R" a Direita                                       ³±±
±±³          ³ aHeaderSx3 --> Array com o Cabecalho dos Campos a Pesquisar       ³±±
±±³          ³ aCposSX3   --> Array com Campos a Pesquisar                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function CriaVar( cCampo, lInitPad, cLado, aHeaderSx3, aCposSX3 )
Local aArea   	:=GetArea()
Local aAreaSX3	:=SX3->(GetArea())
Local xConteudo
Local lInicializador

Local lArquivo		:= If(aHeaderSx3==Nil,.T.,.F.)
Local nPosSX3		:= 0
Local nPosSX3Campo	:= 0

Local SX3_X3_CAMPO
Local SX3_X3_TIPO
Local SX3_X3_RELACAO
Local SX3_X3_TAMANHO
Local SX3_X3_CONTEXT

cLado				:= Iif( cLado == Nil, "L", cLado )
lInitPad 			:= Iif( lInitPad == Nil, .T., lInitPad )

//-- Verifica a Existencia do Campo no Array SX3 se este foi passado
If !lArquivo
    nPosSX3  		:= fPosColField("X3_CAMPO"		, aHeaderSx3)
	nPosSX3Campo	:= fPosColField(cCampo			, aCposSX3	, nPosSX3)

    If Empty(nPosSX3Campo)
	   Help(" ", 1, "NOCPOSX3",,"Field -> "+cCampo,5,0)
	   Return ""
	End
Endif

//-- Carrega Caracteristicas do Campo a partir de Array SX3 ou Arquivo SX3

SX3_X3_CAMPO	:= If(lArquivo, SX3->X3_CAMPO	, aCpos[nPosSX3Campo, fPosColField("X3_CAMPO"	, aHeaderSx3)])
SX3_X3_TIPO     := If(lArquivo, SX3->X3_TIPO 	, aCpos[nPosSX3Campo, fPosColField("X3_TIPO"	, aHeaderSx3)])
SX3_X3_RELACAO  := If(lArquivo, SX3->X3_RELACAO	, aCpos[nPosSX3Campo, fPosColField("X3_RELACAO"	, aHeaderSx3)])
SX3_X3_TAMANHO  := If(lArquivo, SX3->X3_TAMANHO	, aCpos[nPosSX3Campo, fPosColField("X3_TAMANHO"	, aHeaderSx3)])
SX3_X3_CONTEXT  := If(lArquivo, SX3->X3_CONTEXT	, aCpos[nPosSX3Campo, fPosColField("X3_CONTEXT"	, aHeaderSx3)])

If At( ">", cCampo ) != 0
	cCampo := AllTrim(SubStr( cCampo, 1+At( ">", cCampo) , 10 ) )
End
If Len(cCampo) < Len(SX3_X3_CAMPO)
	cCampo += Space(Len(SX3_X3_CAMPO)-Len(cCampo))
EndIf

//-- Procura o Campo no Arquivo SX3
If lArquivo
	DbSelectArea( "SX3" )
	DbSetOrder( 2 )
	If ! ( DbSeek( Upper( cCampo ) ) )
		Help(" ", 1, "NOCPOSX3",,"Field -> "+cCampo,5,0)
		RestArea(aAreaSX3)
		RestArea(aArea)
		Return ""
	End

	//-- Carrega Caracteristicas do Campo a partir de Array SX3 ou Arquivo SX3
	SX3_X3_CAMPO	:= SX3->X3_CAMPO
	SX3_X3_TIPO     := SX3->X3_TIPO
	SX3_X3_RELACAO  := SX3->X3_RELACAO
	SX3_X3_TAMANHO  := SX3->X3_TAMANHO
	SX3_X3_CONTEXT  := SX3->X3_CONTEXT

Endif

//-- Obtem tipo do Campo
If SX3_X3_TIPO == "C"
	xConteudo := Space( SX3_X3_TAMANHO )
ElseIf SX3_X3_TIPO == "N"
	xConteudo :=	0
ElseIf SX3_X3_TIPO == "D"
	xConteudo := CtoD("  /  /  ")
ElseIf SX3_X3_TIPO == "L"
	xConteudo := .F.
ElseIf SX3_X3_TIPO == "M"
	xConteudo := ""
End

//-- Verifica a Existencia do Inicializador Padrao para o Campo e retorna conteudo se Solicitado
If lInitPad
	lInicializador := ExistIni( cCampo, If(lArquivo,Nil,aHeaderSx3), If(lArquivo,Nil, aCposSX3 ) )
	If lInicializador
		xConteudo := InitPad( Sx3_X3_RELACAO )
		If SX3_X3_TIPO == "C"
			xConteudo += Space( SX3_X3_TAMANHO - Len ( xConteudo ) )
			If cLado == "L"
				xConteudo := PadL( xConteudo, SX3_X3_TAMANHO )
			ElseIf cLado == "C"
				xConteudo := PadC( xConteudo, SX3_X3_TAMANHO )
			Else
				xConteudo := PadR( xConteudo, SX3_X3_TAMANHO )
			EndIf
		EndIf
	EndIf
EndIf

//-- Trata Campo Virtual
If SX3_X3_CONTEXT == "V"
	cVar := SX3_X3_CAMPO
	Public &cVar := xConteudo
EndIf

RestArea(aAreaSX3)
RestArea(aArea)

Return( xConteudo )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ ExistIni ³ Autor ³ Mauricio MR           ³ Data ³		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica se campo tem inicializador padrao a partir do SX3 ³±±
±±³          ³ ou de arrays                                        		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ ExpL1 := ExistIni(ExpC2,ExpA1,ExpA2)						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = Retorna .t. se existir							  ³±±
±±³			 ³ ExpC2 = Campo a ser verIficado							  ³±±
±±³			 ³ ExpA1 = Array com a Estrutura do Sx3 do Alias Desejado 	  ³±±
±±³			 ³ ExpA2 = Array com os Campos Tratados do SX3				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function ExistIni(cCpo,aHeaderSx3,aCposSX3)
Local cSavAlias := Alias(), lRet := .F.
Local nPosSX3Relacao:=0
Local nPosSX3Campo :=0
Local nPosSX3Init :=0

If aHeaderSx3 == Nil
   DbSelectArea("SX3")
   DbSetOrder(2)
   If DbSeek(PadR(cCpo,Len(X3_CAMPO)),.F.)
   	  lRet := If(Empty(X3_RELACAO),.f.,.t.)
   EndIf
   DbSetOrder(1)
   DbSelectArea(cSavAlias)

Else
   nPosSX3Relacao := fPosColField("X3_RELACAO"	,aHeaderSx3	)
   nPosSX3Campo   := fPosColField("X3_CAMPO"	,aHeaderSx3	)
   nPosSX3Init	  := fPosColField(cCpo			,aCposSX3	, nPosSX3Campo)
   If !Empty(nPosSX3Relacao) .AND. !Empty(nPosSX3Init)
	   lRet := If(Empty(aCpos[nPosSX3Init,nPosSX3Relacao]),.f.,.t.)
   Else
       lRet:=.F.
   EndIf

Endif

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fValData     ³ Autor ³ Mauricio MR           ³ Data ³09/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Funcao Validadora da Data/Hora da Marcacao                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona280                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fValData()

Local lRet 		:= .T.
Local aMarcList	:= {}
Local cPrefix	:= ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local nPosData	:= GdFieldPos(cPrefix+"DATA")
Local nPosHora	:= GdFieldPos(cPrefix+"HORA")
Local nPosOrdem	:= GdFieldPos(cPrefix+"ORDEM")

IF !aCols[ n , nSvUsado ] .AND. !(Len( aCols ) == 1 .and. Empty( aCols[ n , nPosData ] ))
	//-- Cria Lista do Calendario para 1 unica Ordem
	aMarcList:= P280GetData(aCols[ n , nPosOrdem ] )

	//-- Calcula Limites para a Ordem
	cLimIni:= DataHora2Str( CtoD(aMarcList[1					, CALEND_ELEM_DATA_LIMITE 	])  , Val(aMarcList[1				, CALEND_ELEM_HORA_LIMITE 	])  )
	cLimFim:= DataHora2Str( CtoD(aMarcList[Len(aMarcList)		, CALEND_ELEM_DATA_LIMITE 	])  , Val(aMarcList[Len(aMarcList)	, CALEND_ELEM_HORA_LIMITE 	])  )

	//-- Converte Data Hora
	cMarc := DataHora2Str( aCols[ n , nPosData ] , aCols[ n , nPosHora] )

	//-- Nao permite a Digitacao de Data /Hora  fora dos Limites da Ordem
	If cMarc<cLimIni .OR. cMarc>cLimFim
   		Help(' ',1,'PNAOUTORD')
   		lRet:= .F.
	Endif

Endif

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fProgTeclas  ³ Autor ³ Mauricio MR           ³ Data ³12/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Funcao Programadora de Teclas do Painel Ativo                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona280                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fProgTeclas(cEstou,lOn)
Local bNIL	:= { || NIL }

DEFAULT lOn := .T.

//-- Marcacoes
If cEstou == '1' .And. !lPnaMrc
	SetKey( VK_F6, 			If(lOn, oBtMarcDel:bAction, bNil )) 		// "Apagar/Restaurar Marca‡”es do Dia..."
	SetKey( VK_F7, 			If(lOn, oBtMarcGer:bAction, bNil )) 		// "Gera Marca‡„o..."
	SetKey( VK_F8, 			If(lOn, oBtMarcGe1:bAction, bNil )) 		// "Gera Todas as Marca‡”es Para o Dia..."
	SetKey( VK_F9, 			If(lOn, oBtMarcGal:bAction, bNil ))    		// "Gera Marca‡„o Aleat¢ria..."
	SetKey( VK_F10, 		If(lOn, oBtMarcGa1Dia:bAction, bNil ))  	// "Gera Marca‡”es Aleat¢rias Para o Dia..."
    SetKey( VK_F11, 		If(lOn, oBtMarcApo:bAction, bNil ))        // "Aponta o Dia..."
	SetKey( VK_F12, 		If(lOn, oBtMarcRea:bAction, bNil ))			// "For‡a o Reapontamento das Marca‡”es..."
	SetKey( K_ALT_R, 		If(lOn .And. lPort1510 .and. nOpcX == 4, oBtRFE:bAction, bNil ))             // "Restaura Marcacao..."

//-- Apontamentos
Elseif cEstou == '2'
	SetKey( VK_F6, If(lOn, oBtApoDel:bAction, bNil )) 			// "Apagar/Restaurar Apontamentos do Dia..."
	SetKey( VK_F7, If(lOn, oBtApoAb:bAction, bNil ))	   		// "Abonar/Justificar - <F7>"
Endif

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280MovMarc ³ Autor ³ Mauricio MR           ³ Data ³12/08/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Move Marcacoes para Dia Posterior ou Anterior                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona280                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280MovMarc( oDlg , aHeader, o1Get, lMoveProx)
Local aColsClone	:= aClone(aCols )
Local aCloneArray	:= {}
Local cHelp			:= ''
Local cOrdOrigem	:= ''
Local cOrdDestino	:= ''
Local nLenaListBox	:= Len(aListBox)
Local lRet			:= .T.
Local nPosOrdem		:= GdFieldPos("P8_ORDEM")
Local nPosFlag 		:= GdFieldPos("P8_FLAG")
Local nPosAponta	:= GdFieldPos("P8_APONTA")
Local nPosDataApo
Local nTamP8Ordem	:= ( TamSx3("P8_ORDEM")[1] )
Local nTipoReg		:= 0
Local nSavN			:= n

DEFAULT lMoveProx:= .T.

//-- Descarrega as alteracoes do oGet para o aCols de Marcacoes
fVarGet(@o1Get, @aHeader,@aCols,@n, DESCARREGA,1)
cOrdemOrigem	:= aCols[ n,nPosOrdem]

If lPort1510
	nPosDataApo	:= GdFieldPos("P8_DATAAPO")
EndIf

//-- Se a Linha Estiver OK e Marcacao Nao Deletada
If (lRet:=( fChamaFunc('1',{||lRet:=.T., if(lRet, Pn230LinOk(Nil,.T.), lRet)}) .AND. !aCols[ n , nSvUsado ] ) )
	//-- Verifica se a movimentacao ultrapassa os limites das Ordens do Periodo
	If lMoveProx
	   //-- Testa Ultima Ordem do Calendario
	   If   cOrdemOrigem < aListBox[nLenaListBox,CALEND_ELEM_ORDEM ]
	   		cOrdemDestino:=STRZERO(Val(cOrdemOrigem)+1,nTamP8Ordem)
	   		aCols[ n ,nPosOrdem]	:= cOrdemDestino
			Aeval( aCols, {|x| x[nPosAponta]:= 'N'})
	   If lPort1510
		    aCols[ n ,nPosDataApo]	:= aCols[ n ,nPosDataApo] + 1
	   Endif
	   Else
	      lRet:= .F.
	   Endif
	Else
		//-- Testa a Primeira Ordem do Calendario
	   If cOrdemOrigem > aListBox[1,CALEND_ELEM_ORDEM ]
	   		cOrdemDestino:=STRZERO(Val(cOrdemOrigem)-1,nTamP8Ordem)
			aCols[ n ,nPosOrdem]	:= cOrdemDestino
			Aeval( aCols, {|x| x[nPosAponta]:= 'N'})
	   If lPort1510
			aCols[ n ,nPosDataApo]	:= aCols[ n ,nPosDataApo]- 1
	   EndIf
	   Else
	      lRet:= .F.
	   Endif
	Endif

	//-- Restaura aCols
	If !lRet
	    If !lRet
	    	cHelp := STR0096	//"N„o se pode mover a Marca‡„o para além do Período de Apontamento"
			Help( ' ' , 1 , 'PN230INCON' , , OemToAnsi( cHelp ) , 5 , 0 )
	    Endif
    	aCols:=aClone(aColsClone)
	Else
	 	If ! Pn230LinOk(Nil,.T.)
	      	lRet:= .F.
	     	aCols:=aClone(aColsClone)
	    Else
	    	n:=1
			//-- Descarrega as alteracoes do oGet para o aCols de Marcacoes
			fVarGet(@o1Get, @aHeader,@aCols,@n, CARREGA,1)
        Endif
	Endif
Endif

Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fBotoesOnOFF ³ Autor ³ Mauricio MR           ³ Data ³27/09/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Desliga e LigaObjetos para evitar qdo varios "clicks" do mouse³±±
±±³          ³ sao ativados durante o apontamento e montagem de tela.		 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpL1 = .T. --> Ativa Botoes		 						     ³±±
±±³			 ³         .F. --> Desativa Botoes		   					     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Pona280                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fObjOnOFF(lAtiva)

If lAtiva
	oLbox:Enable()
	o1Get:oBrowse:lDisablePaint := .f.
	o2Get:oBrowse:lDisablePaint := .f.
Else
	oLbox:Disable()
	o1Get:oBrowse:lDisablePaint := .T.
	o2Get:oBrowse:lDisablePaint := .T.
Endif

Return Nil

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pona280Locks    ³Autor³Mauricio MR         ³ Data ³14/04/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Lancamentos de Marcacoes /Apont/Abonos		         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA280                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pona280Locks( nOpc , cAlias, aRecnos )

Local lLocks	:= .T.
Local aRecAux	:= {}

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Se nao For Visualizacao nem Inclusao	 					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( nOpc <> 2 )

	Begin Sequence

		aEval( aRecnos , { |x| IF( !Empty(x) , aAdd( aRecAux , x ) , NIL ) } )
		IF !( lLocks := WhileNoLock( cAlias , aRecAux , {xFilial(cAlias)+SRA->RA_MAT} , 1 , 1 , .T. , NIL ) )
			Break
		EndIF

	End Sequence

EndIF

Return( lLocks )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280Diverge    ³Autor³Mauricio MR         ³ Data ³13/04/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Alimenta o Calendario com as Divergencias       	         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA280                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn280Diverge(aMarc, aApo, aListSint, lApenas_o_Dia)
Local aEventos		:= {}
Local cOrdem
Local nPosSP8Data	:= GdFieldPos("P8_DATA"				, o1Get:aHeader)
Local nPosSPCData	:= GdFieldPos(cPrefix+"DATA"		, o2Get:aHeader)
Local nPosSPCPD		:= GdFieldPos(cPrefix+"PD"			, o2Get:aHeader)
Local nPosSPCPDI	:= GdFieldPos(cPrefix+"PDI"			, o2Get:aHeader)
Local nPosSPCQuantI	:= GdFieldPos(cPrefix+"QUANTI"		, o2Get:aHeader)
Local nPosSPCAbono	:= GdFieldPos(cPrefix+"ABONO"		, o2Get:aHeader)
Local nPosSPCQtAbono:= GdFieldPos(cPrefix+"QTABONO"		, o2Get:aHeader)
Local nPosSPCCC		:= GdFieldPos(cPrefix+"CC"			, o2Get:aHeader)
Local nPosSPCTP		:= GdFieldPos(cPrefix+"TPMARCA"		, o2Get:aHeader)
Local nX

DEFAULt lApenas_o_Dia	:= .F.
DEFAULT lPna280Div		:= ExistBlock( "PNA280DIV" )

//-- Obtem Eventos que Nao sao Divergencias
Pn280GetEventos(@aEventos, lCalendDiverg)

//-- Se portaria estiver ativa nao faz sort pois deve ser mantida a ordem para que registros originais nao sejam apagados
IF !lPort1510
	If ( Len( aMarc ) > 0 )
		aSort( aMarc ,,, { |x,y|;
										 DataHora2Str(x[AMARC_DATA],x[AMARC_HORA])+x[AMARC_ORDEM];
										 <;
										 DataHora2Str(y[AMARC_DATA],y[AMARC_HORA])+y[AMARC_ORDEM];
								   };
					  )
	Endif
EndIf

If ( Len( aApo )> 0 )

	//-- Reordena os Apontamentos por Data+Codigo+Tipo de Marcacao e Centro de Custo
	aSort( aApo ,,, { |x,y|;
									 DataHora2Str(x[nPosSPCData],x[nPosSPCPD]+x[nPosSPCTP]+x[nPosSPCCC]);
									 <;
									 DataHora2Str(y[nPosSPCData],y[nPosSPCPD]+y[nPosSPCTP]+y[nPosSPCCC]);
				     };
		 )
Endif

//-- Busca por Divergencias apenas para o Dia
If lApenas_o_Dia
   cOrdem			:= CalendRetCpo( ( PrefixoCpo( IF( lPona240 , "SPG" , "SP8" ) ) + "_" ) + "ORDEM" )
   nX				:= Ascan(aListSint,{|x| ( x[CALEND_ELEM_ORDEM+1] == cOrdem ) } )
   aListSint[nX,1]	:= Pn280IdDiverge(aEventos, aMarc, aApo, nPosSPCPD, nPosSPCData, nPosSPCQuantI, nPosSPCAbono, nPosSPCQtAbono, nPosSP8Data, aListSint[nX,CALEND_ELEM_DATA+1], aListSint[nX,CALEND_ELEM_ORDEM+1] )
Else
	///-- Verifica a existencia de Divergencias para todas as datas do Calendario Sintetico
	For nX:=1 to Len(aListSint)
	    aListSint[nX,1]:= Pn280IdDiverge(aEventos, aMarc, aApo, nPosSPCPD, nPosSPCData, nPosSPCQuantI, nPosSPCAbono, nPosSPCQtAbono,  nPosSP8Data, aListSint[nX,CALEND_ELEM_DATA+1], aListSint[nX,CALEND_ELEM_ORDEM+1] )
	Next nX
Endif

//-- Ponto de entrada para alterar o bitmap das divergencias
If lPna280Div
	ExecBlock( "PNA280DIV", .F., .F. )
EndIf

Return ( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280GetEventos ³Autor³Mauricio MR         ³ Data ³13/04/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Obtem os Eventos Nao Divergentes			       	         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA280                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn280GetEventos(aParEventos, lCalendDiverg)

Static aEventos

Begin Sequence
    //-- Se nao verificar divergencias ou se o campo P9_DIVERGE nao existir
    //-- nao carrega eventos
    If !lCalendDiverg
       Break
    Endif

	IF ( Pcount() == 0 )
	    aEventos 	:= Nil
	Else
		If Empty(aEventos)
		 	/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica Divergencias do Funcionario                       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			MsAguarde(		{||	aEventos:= Pn280LoadEventos( xFilial("SP9") , xFilial("SRV") ) },;
							OemToAnsi(STR0082) 	,;//"Configurando Ambiente"
							OemToAnsi(STR0200)	,;//"Carregando Eventos..."
					        .F.;
					 )
		Endif

        //-- Carrega Eventos
	    aParEventos	:= aClone(aEventos)

	Endif

End Sequence

Return ( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280IdDiverge  ³Autor³Mauricio MR         ³ Data ³13/04/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Identifica as Divergencias para uma Data	       	         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA280                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn280IdDiverge( aEventos, aMarc, aApo, nPosSPCPD, nPosSPCData, nPosSPCQuantI, nPosSPCAbono, nPosSPCQtAbono, nPosSP8Data, ddataDiv, cOrdem)
Local aNew
Local aNewMarc := {}
Local aNewApo  := {}
Local nPosOrdem	:= GdFieldPos("P8_ORDEM", 	o1Get:aHeader)
Local nPosX
Local nLenArray
Local nX
Local oAnalisada:= LoadBitmap( GetResources(), "BPMSEDT3A" )
Local oOk		:= LoadBitmap( GetResources(), "NADA" )
Local oPendente	:= LoadBitmap( GetResources(), "BPMSEDT1A" )
Local oRet

oRet	:= oOk

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Obtem as Marcacoes para a Ordem Lida	 					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aNew 		:= 	{}
If !Empty((nLenArray	:=	Len( aMarc )))

	IF ( nPosX := aScan( aMarc , { |x| x[ nPosOrdem ] == cOrdem } ) ) > 0
		For nX := nPosX To nLenArray
			IF aMarc[ nX , nPosOrdem ] == cOrdem
				If ! aMarc[nX, aSvtree[G_MARC,G_NSVUSADO] ]
					aAdd( aNew , aClone( aMarc[ nX ] ) )
				Endif
			Else
				Exit
			EndIF
		Next nX
	EndIF
	aNewMarc := aClone( aNew )
Else
	aNewMarc := {}
Endif
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Obtem os Apontamentos para a Ordem Lida	 				   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
aNew 		:= {}

If !Empty((nLenArray	:= Len( aApo )))
	If ( nPosX := Ascan( aApo, { |x| x[ nPosSPCData ] == dDatadiv }) ) > 0
		For nX := nPosX To nLenArray
		    IF aApo[nX, nPosSPCData] == dDatadiv .AND. ! aApo[nX, aSvtree[G_APO,G_NSVUSADO] ]
				aAdd( aNew , {aApo[ nX,nPosSPCPD ], aApo[ nX,nPosSPCQuantI], aApo[ nX, nPosSPCAbono], aApo[ nX,nPosSPCQtAbono]} )
			Else
				Exit
			EndIF
		Next nX
	Endif
	aNewApo:=aClone(aNew)
Endif

Begin Sequence
	//-- Verifica Marca‡”es Impares
	If !Empty(aNewMarc) .and. Len(aNewMarc)%2 > 0
	    If !Empty(aNewMarc[1, nPosSP8Data])
			oRet:=oPendente
			Break
        Endif

	EndIf

	//-- Verifica a ocorrencia de Apontamentos Divergentes
    nLenArray :=Len(aNewApo)

    For nX:=1 TO nLenArray
        If !Empty(Ascan( aEventos, {|y| y == aNewApo[nX, 1] } ) )
           If !( EMPTY(aNewApo[ nX, 2 ] ) .AND. EMPTY(aNewApo[ nX, 3 ] ) .AND. EMPTY(aNewApo[ nX, 4 ] ) )
           		oRet:= oAnalisada
           Else
  				oRet:= oPendente
  				Break
           Endif
        Endif
    Next nX


End Sequence

Return ( oRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280RefresholBoxSint ³Autor³Mauricio MR   ³ Data ³13/04/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Refaz a Identificacao das Divergencias				         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide parametros formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL		                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³PONA280                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Pn280RefresholBoxSint(aMarc, aApo, lApenas_o_Dia)
Local nX

DEFAULT  aMarc 			:= aSvTree[G_MARC	, G_MAIN]
DEFAULT  aApo 			:= aSvTree[G_APO	, G_MAIN]
DEFAULT  lApenas_o_Dia	:= .F.

If lCalendDiverg
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Alimenta Coluna de Divergencias do Calendario				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn280Diverge(aMarc, aApo, @aListSint, lApenas_o_Dia)

   	olBoxSint:SetArray(aListSint)
	nX				:= olBoxSint:nAt
	olBoxSint:bLine	:= { || LineLstBox( olBoxSint ) }
	olBoxSint:Refresh()
	olBoxSint:nAt:=nX


Endif

Return ( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280LoadEventos ³ Autor ³Mauricio MR         ³ Data ³19/04/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carregar os Eventos do SP9 conforme Filial                    	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cFilSP9 - Filial do SP9											³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³aEventos - Array com todos os Eventos Selecionados			    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280LoadEventos( cFilSP9 , cFilSRV )

Local aArea		:= GetArea()
Local aQuery	:= {}
Local aEventos	:= {}
Local bSkip		:= { ||  IF( 	( SP9->P9_DIVERGE = 'S' ),;
						 		( aAdd( aEventos , SP9->P9_CODIGO ), .F. ),;
							  	.T.;
					   		);
					}
Begin Sequence

	aQuery		:= Array( 03 )
	aQuery[01]	:= "P9_FILIAL='"+cFilSP9+"'"
	aQuery[02]	:= " AND "
	aQuery[03]	:= "D_E_L_E_T_=' ' "

	SP9->( GdBuildCols(;
						Nil				,;	//01 -> Array com os Campos do Cabecalho da GetDados
						NIL				,;	//02 -> Numero de Campos em Uso
						NIL				,;	//03 -> [@]Array com os Campos Virtuais
						NIL				,;	//04 -> [@]Array com os Campos Visuais
						NIL				,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
						{				 ;
							"P9_FILIAL"	,;
							"P9_DESC"	 ;
						}				,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
						NIL				,;	//07 -> [@]Array unidimensional contendo os Recnos
						"SP9"			,;	//08 -> Alias do Arquivo Pai
						cFilSP9			,;	//09 -> Chave para o Posicionamento no Alias Filho
						NIL				,;	//10 -> Bloco para condicao de Loop While
						bSkip			,;	//11 -> Bloco para Skip no Loop While
						.F.				,;	//12 -> Se Havera o Elemento de Delecao no aCols
						.F.				,;	//13 -> Se Sera considerado o Inicializador Padrao
						.F.				,;	//14 -> Opcional, Carregar Todos os Campos
						.F.				,;	//15 -> Opcional, Nao Carregar os Campos Virtuais
						aQuery			,;	//16 -> Opcional, Utilizacao de Query para Selecao de Dados
						.F.				,;	//17 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
						.T.				,;	//18 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
						.F.				,;	//19 -> Carregar Coluna Fantasma e/ou BitMap ( Logico ou Array )
						.F.				,;	//20 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
						.F.				,;	//21 -> Verifica se Deve Checar se o campo eh usado
						.F.				,;	//22 -> Verifica se Deve Checar o nivel do usuario
						.F.				 ;	//23 -> Verifica se Deve Carregar o Elemento Vazio no aCols
					   );
		  )

End Sequence

RestArea( aArea )

Return( aClone( aEventos ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280PrepCalend  ³ Autor ³Mauricio MR         ³ Data ³13/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carregar ambiente para um funcionario 	 '	                   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³																³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280PrepCalend()
Local cMensagem	:= ''
Local cTitulo 	:= ''
Local lRet		:= .T.

Local aAdicLeg        	:= { {"BPMSEDT1A",OemToAnsi(STR0197)}		,;	//"Divergencia Pendente"
							  {"BPMSEDT3A"	,OemToAnsi(STR0198)}  	 ;	//"Divergencia Analisada"
                            }

aSvtree			:= {}

Begin Sequence

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Calendario do Periodo Para o Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pn280PrepLock()
	   lRet:=  .F.
       Break
    Endif
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Calendario do Periodo Para o Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pn280LoadCalend()
	   lRet:=  .F.
       Break
    Endif

	If lCalendDiverg
		bBlocMsg	:={||GetCalendListBox( @aListBox , aTabCalend ,@aListSint,, aAdicLeg,.T.  )}
    Else
		bBlocMsg	:={||GetCalendListBox( @aListBox , aTabCalend ,@aListSint,,,.T.  )}
    Endif


   	/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
    //                  T R A T A      C A L E N D A R I O
	/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o aListBox de Acordo com o Calendario de Marcacoes    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    cTitulo 	:= OemToAnsi(STR0082)   	//"Configurando Ambiente"
	cMensagem  	:= OemToAnsi(STR0086)		//"Carregando Calend rio..."
    MsAguarde(bBlocMsg,cTitulo,cMensagem,.F.)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Quando aListBox estiver vazio Admissao Maior que o   Periodo³
	³ de Apontamento.                                             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF Empty( aListBox )
		Help(" ",1,"PONA230ADM")
		lRet:=  .F.
		Break
	EndIF

End Sequence

Return ( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280PrepTela    ³ Autor ³Mauricio MR         ³ Data ³13/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carregar ambiente para um funcionario 	 '	                   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³																³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Static Function Pn280PrepTela(oList1, oList2)
Local lRet		:= .T.
Local nRetMarc	:= 0
Local nRetApo	:= 0

Private oLBox
Private olBoxSint

aSvtree			:= {}

Begin Sequence
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicia Tela de Apontamentos por Centro de Custo             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	nOpcA := 0

	/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/
    //     M O N T A G E M    E    E X I B I C A O    D A    T E L A
	/*şşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşşş*/

    //*** MONTAGEM


	//-- Inicializa aSvtree
	//-- 01 aHeader
	//-- 02 aCols
	//-- 03 n
	//-- 04	Array PRINCIPAL com TODAS as linhas do GetDados
	//-- 05	Array Clone do Principal para Comparacao Posterior afim de Adicionar novos Apontamentos em aResult
	//-- 06	Array com Numeros correspondentes as Linhas do ArrayMain
	//-- 07 Array de Campos Virtuais
	//-- 08	Array de Campos NAO ALTERAVEIS
	//-- 09	Array de Numero de Registros Fisicamente Gravados
	//-- 10 Array de Cabec de Todos os Campos do Arquivo segundo o SX3
	//-- 11 Array de Campos do Arquivo
    //-- 12 Array de Campos Nao Exibiveis
	//-- 13 nUsado
	//-- 14	nSvUsado
	//-- 15 nCnt
	//-- 16 Array com Campos Que podem Ficar Vazios
	//-- 17 Array com Copia do aCols ao Carrega-lo. Importante para ser utilizado para compararmos
	//--    conteudo original com o corrente.
	//-- 18 Array com Copia do aRecno ao Carrega-lo. Importante para ser utilizado para compararmos
    //--    conteudo original com o corrente.

	//-----------  01  02  03   04  05  06   07  08   09  10  11   12  13  14   15  16  17  18
	Aadd(aSvtree,{{}, {}, 01, {}, {}, {}, {}, {}, {}, {}, {}, {}, 01, 01, 01, {}, {},	}) //-- Marcacoes
	Aadd(aSvtree,{{}, {}, 01, {}, {}, {}, {}, {}, {}, {}, {}, {}, 01, 01, 01,	{}, {},	}) //-- Apontamentos
	Aadd(aSvtree,{{}, {}, 01, {}, {}, {}, {}, {}, {}, {}, {}, {}, 01, 01, 01,	{}, {},	{}}) //-- ABonos


    If !lMovimenta .Or. ( lMovimenta .And. nOpcx == 3 )
	    //-- Configura Janela Marcacoes
	    nRetMarc:= fConfMarc()

	    //-- Se Ja Existirem Marcacoes e For Opcao de Inclusao
	    If nRetMarc == 1
	       Help(" ",1,"Pn230Exist")
	       lRet:= .F.
	       Return .f. //Break
	    Endif

	    //-- Configura Janela Apontamentos
	    nRetApo	:= fConfApo()

	    //-- Se Ja Existirem Apontamentos For Opcao de Inclusao
	    If nRetApo == 1
	       Help(" ",1,"Pn230Exist")
	       lRet:= .F.
    	   Return .f. //Break
	    Endif

	    //-- Se nao Existirem Lancamentos de Marcacoes/Apontamentos e For Opcao diferente de Inclusao
	    If nRetMarc == 2  .AND. nRetApo == 2
	   		Help(" ",1,"Pn230NoLan")
  	        lRet:= .F.
	   		Break
	    Endif

		 //-- Configura Janela Abonos
    	fConfAbo()

	Else
	    nRetMarc:= fConfMarc()

	    //-- Se Ja Existirem Marcacoes e For Opcao de Inclusao
	    If nRetMarc == 1
	       Help(" ",1,"Pn230Exist")
	       lRet:= .F.
	       Return .f. //Break
	    Endif

	    //-- Configura Janela Apontamentos
	    nRetApo	:= fConfApo()

	    //-- Se Ja Existirem Apontamentos For Opcao de Inclusao
	    If nRetApo == 1
	       Help(" ",1,"Pn230Exist")
	       lRet:= .F.
    	   Return .f. //Break
	    Endif


	    //---------------------------------------------------------------------------------------------
	    //-- Verifica a possibilidade de realizar a operacao de manutencao ou
	    //-- altera a operacao se tratar de modo de movimentacao de registros
	    VerOperacao( {|| fConfMarc() }, @nOpcx )

	    nOpcx := If(nOpcx <> nOpcxAnt, 4, nOpcx)

	    //-- Verifica a possibilidade de realizar a operacao de manutencao ou
	    //-- altera a operacao se tratar de modo de movimentacao de registros
	    //-- desde que a operacao ja nao tenha sido alterada.
		VerOperacao( {|| fConfApo() }, @nOpcx  )

	    nOpcx := If(nOpcx <> nOpcxAnt, 4, nOpcx)

	    //-- Configura Janela Abonos
	    fConfAbo()
	Endif

End Sequence

Return ( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³VerOperacao      ³ Autor ³Mauricio MR         ³ Data ³16/06/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica e realiza a mudanca da operacao de manutencao se neces-³
³          ³sario.                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³																³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lRet															³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function VerOperacao(bLanc, nOpcx)
Local nRetorno

While .T.
	//-- Configura Janela Marcacoes/Apontamentos
    nRetorno:= Eval(bLanc)

	If ( nRetorno == 1 .AND. nOpcx == 3)
	    //-- Se Ja Existirem Lancamentos e For Opcao de Inclusao
	    //-- Forca Modulo de Alteracao para movimentacao de registros

		If INCLUI .And. nRetorno >= 1
		       Help(" ",1,"Pn230Exist")
		       Break
		Endif

	    nOpcx:= 4
    ElseIf  (nRetorno == 2 .AND. nOpcx == 4)
	    //-- Se for Alteracao e Nao existem registros
		//-- Forca Modulo de Inclusao para movimentacao de registros
        nOpcx:= 3
    Else
        //-- Prossegue o processamento
		Exit
    Endif

End While

Return

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280PrepLock    ³ Autor ³Mauricio MR         ³ Data ³13/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Bloqueia Funcionario    					                   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³																³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280PrepLock()
Local lRet:= .T.
/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Bloqueia Chaves Logicas de Marcacoes do Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF !(;
			Pona280Locks( nOpcX , IF( lPona190 , "SPH" , "SPC" ) , {} );
			.or.;
	   		Pona280Locks( nOpcX , IF( lPona240 , "SPG" , "SP8" ) , {} );
	   		.or.;
	   		Pona280Locks( nOpcX , "SPK" , {} );
	   	)
       lRet:=  .F.
    EndIF

Return(lRet)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280LoadCalend  ³ Autor ³Mauricio MR         ³ Data ³13/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Calendario do Funcionario    					                   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³																³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280LoadCalend()
Local lRet:= .T.

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrega o Calendario do Periodo Para o Funcionario           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	IF SRA->( !CriaCalend(	dPerIni		,;	//01 -> Periodo Inicial
							dPerFim		,;	//02 -> Periodo Final
							RA_TNOTRAB	,;	//03 -> Turno de Trabalho
							RA_SEQTURN	,;	//04 -> Sequencia de Turno
							@aTabPadrao	,;	//05 -> Tabela de Horario Padrao
							@aTabCalend	,;	//06 -> Calendario de Marcacoes
							RA_FILIAL	,;	//07 -> Filial
							RA_MAT		,;	//08 -> Matricula
							RA_CC		,;	//09 -> Centro de Custo
					   		NIL			,;	//10 -> Array com as Trocas de Turno
							NIL			,;	//11 -> Array com Todas as Excecoes do Periodo
							NIL			,;	//12 -> Se executa Query para a Montagem da Tabela Padrao
							.T.			;	//13 -> Se executa a funcao se sincronismo do calendario
						  );
			 )
		Help(' ',1,'TPADNCAD')
        lRet:=  .F.
	EndIF

Return ( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280Bloco       ³ Autor ³Mauricio MR         ³ Data ³17/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Cria Bloco de Acoes para Mudanca de Data do Calendario        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³Pn280Bloco(bChange, bMyChange)									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280Bloco(bChange, bMyChange)

//--  Variaveis Caracter para montagem de objeto
Local bBloco		:={||.T.}
Local cIdObjList	:= ''

//-- Obtem a identificacao do objeto na Janela
cIdObjList	:= 'oDlg:Acontrols[' + STRZERO( Len(oDlg:aControls), 6) + ']'

//-- Bloco Para Reposicionamento da Lista
bBloco:= &( '{||' + cIdObjList +':nAt:=nSvnAt,' + cIdObjList + ':Refresh()}')


bMyChange  :={||oLBox:Disable(),;
						If(oObjPendente <> Nil ,;
						   ( fAcertData(), Eval(bBloco),fAcertData(.T.), oObjPendente:oBrowse:SetFocus()),;
	                       ( Iif(fValMotMan(), ( olBox:nAt:=aListSint[olBoxSint:nAt,ELEMENTOS_DO_CALENDARIO + If(lCalendDiverg,2,1)], Eval(bChange) ), ""));
                          ),;
                       oLBox:Enable();
                     }


Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fAcertData       ³ Autor ³Mauricio MR         ³ Data ³14/07/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Sincroniza os calendarios Sintetico e Completo.					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³fAcertData(lAcao)												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fAcertData(lAcao)

Local cOrdem
Local cPrefApo	:= ( PrefixoCpo(iF( lPona240 , "SPH" , "SPC" ) ) + "_" )
Local cPrefMarc	:= ( PrefixoCpo(iF( lPona240 , "SPG" , "SP8" ) ) + "_" )
Local dData
Local nPosData  := GdFieldPos( cPrefApo + "DATA"		,o2Get:aHeader )
Local nPosDt
Local nPosOrdem := GdFieldPos( cPrefMarc + "ORDEM"		,o1Get:aHeader )
Local nPosOrd	:= 0


DEFAULT lAcao := .F.

//-- Sincroniza as ListBoxes do Calendario de modo a garantir que na adicao de uma linha de marcacao
//-- a Data seja a do apontamento correspondente
cOrdem  := aCols[n, nPosOrdem]
If Empty(cOrdem)
   If n >1
   		cOrdem:=aCols[n-1, nPosOrdem]
   Endif
   If Empty(cOrdem)
        If nPosData > 0
          nPosOrd := aScan(oLBoxSint:aArray,{|x| x[CALEND_ELEM_DATA+ If(lCalendDiverg,1,0)] == o2Get:aCols[1, nPosData] .and. "1E"$ x[CALEND_ELEM_TIPO_MARCACAO+ If(lCalendDiverg,1,0)]  } )
        Endif
   Endif
Endif

If Empty(nPosOrd)
	nPosOrd			:= aScan(oLBoxSint:aArray,{|x| x[CALEND_ELEM_ORDEM + If(lCalendDiverg,1,0)] == cOrdem } )
Endif
oLBoxSint:nAt	:= If(nPosOrd > 0, nPosOrd, 	oLBoxSint:nAt )
nSvnAt			:= oLBoxSint:nAt
olBox:nAt		:= aListSint[olBoxSint:nAt,ELEMENTOS_DO_CALENDARIO + If(lCalendDiverg,2,1)]

If lAcao
  	//-- Apos o retorno a GetMarcacoes sincroniza novamente o calendario
  	//-- pois a situacao anterior pode ter ficado pendente e a data do calendario
  	//-- pode nao corresponder a data da marcacao.
	nX				:= olBoxSint:nAt
  	olBoxSint:SetArray(aListSint)
	olBoxSint:bLine	:= { || LineLstBox( olBoxSint ) }
	olBoxSint:Refresh()
	olBoxSint:nAt:=nX

Endif

Return (NIL)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280LoadDiv     ³ Autor ³Mauricio MR         ³ Data ³17/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Alimenta a Coluna de Divergencias no  Calendario	        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³Pn280LoadDiv()													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280LoadDiv()
Local cTitulo
Local cMensagem
Local bBlocMsg
//-- Alimenta Coluna de Divergencia
If lCalendDiverg
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica Divergencias do Funcionario                       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cTitulo 	:= OemToAnsi(STR0082)   	//"Configurando Ambiente"
	cMensagem	:= OemToAnsi(STR0199)		//"Verficando Divergencias..."
	bBlocMsg	:={|| Pn280Diverge(aSvTree[G_MARC, G_MAIN], aSvTree[G_APO, G_MAIN], @aListSint) }
	MsAguarde(bBlocMsg,cTitulo,cMensagem,.F.)
EndIf

Return ( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280GrvFunc     ³ Autor ³Mauricio MR         ³ Data ³13/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Grava as informacoes para um funcionario 		              	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³																³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Static Function Pn280GrvFunc(nOpcA, nOpcX)
Local nX
Local nPosSPKDt
Local nPosSPKHrI
Local nPosSPKHrF
Local nPosSPKRec
Local aArea

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Se nao For Exclusao                                           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF nOpcX != 5
	IF nOpcA == 1 .and. ( nOpcX == 3 .or. nOpcX == 4 )

        Begin Transaction

			//-- Grava Marcacoes
    		fMuda(G_MARC)
    		bChave :={|aArg| cFil + cMat + Dtos(aArrayMain[ nArray , aArg[1] ] ) +  Str( aArrayMain[ nArray , aArg[2] ] , 5 , 2 ) }
    		bParametros:={|cAlias,cPrefix|{(cAlias)->(GdFieldPos(cPrefix+"DATA")), (cAlias)->(GdFieldPos(cPrefix+"HORA"))}}
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Deleta os Registros de Marcacoes Automaticas que foram  recar³
			³ regadas													   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			PonDelRecnos( IF( lPona240 , "SPG" , "SP8" ) , aRecsMarcAutDele )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Efetua a Gravacao											   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    		Pn280Grava(aArrayMain,aRecno,G_MARCREG,aHeader,nOpcX,IF( lPona240 , "SPG" , "SP8" ),bChave,bParametros,"DATA")

    		//-- Grava Apontamentos
    		fMuda(G_APO)
    		bChave :={|aArg| cFil + cMat + Dtos(aArrayMain[ nArray , aArg[1] ] ) + aArrayMain[ nArray , aArg[2]] + aArrayMain[ nArray , aArg[3]] + aArrayMain[ nArray , aArg[4]]}
    			bParametros:={|cAlias,cPrefix|{(cAlias)->(GdFieldPos(cPrefix+"DATA")),(cAlias)->(GdFieldPos(cPrefix+"PD")), (cAlias)->(GdFieldPos(cPrefix+"TPMARCA")),(cAlias)->(GdFieldPos(cPrefix+"CC"))}}
    	   	Pn280Grava(aArrayMain,aRecno,G_APOREG,aHeader,nOpcX,IF( lPona190 , "SPH" , "SPC" ),bChave,bParametros,"PD")

			//-- Grava Abonos
		    //-- Carrega Informacoes dos Abonos
			fMuda(3,,.F.)
    		bChave 		:=	{|aArg| cFil + cMat + Dtos(aArrayMain[ nArray , aArg[1] ] )+aArrayMain[ nArray , aArg[2]]+ Str( aArrayMain[ nArray , aArg[3] ] , 5 , 2 ) +aArrayMain[ nArray , aArg[4]]}
    			bParametros:={|cAlias,cPrefix|{(cAlias)->(GdFieldPos(cPrefix+"DATA")),(cAlias)->(GdFieldPos(cPrefix+"CODEVE")), (cAlias)->(GdFieldPos(cPrefix+"HORINI")),(cAlias)->(GdFieldPos(cPrefix+"CC")),(cAlias)->(GdFieldPos(cPrefix+"TPMARCA"))}}
    		    bCond		:= 	{|cChave,cAlias,cPrefix|(cAlias)->( &(cPrefix+"FILIAL")	+&(cPrefix+"MAT")	+Dtos(&(cPrefix+"DATA"))				+&(cPrefix+"CODEVE")			+ STR(&(cPrefix+"HORINI"),5,2)				+ &(cPrefix+"CC") ) ==  ( cChave);
    		                    }
   		    bFiltro		:=	{|aArg,cAlias,cPrefix|(cAlias)->( &(cPrefix+"FILIAL") 	+&(cPrefix+"MAT")	+Dtos(&(cPrefix+"DATA"))				+&(cPrefix+"CODEVE")			+&(cPrefix+"CC")				+ &(cPrefix+"TPMARCA") ) == ;
   		                            			   (cFil			   				+cMat				+Dtos(aArrayMain[ nArray , aArg[1]])	+aArrayMain[ nArray , aArg[2]]	+aArrayMain[ nArray , aArg[4]] + aArrayMain[ nArray , aArg[5]] );
   		                    }
   		    Pn280Grava(aArrayMain,aRecno,G_ABOREG,aHeader,nOpcX,"SPK",bChave,bParametros,"CODABO",{|cPrefix|cPrefix+"FILIAL+"+cPrefix+"MAT+Dtos("+cPrefix+"DATA)+"+cPrefix+"CODEVE"} , bFiltro, bCond)

    		/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Pre-Abonos: Grava Uso de faixa                                ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    		If lRF0ChkTable
	    		/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Altera Flag da Faixa de Pre-Abono							  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				nLenRF0:= Len(aRF0Faixa)
				For nX:= 1 to nLenRF0
					RF0->( dbgoto( aRF0Faixa[ nX ] ) )
					If	RF0->RF0_ABONA <> 'S'
						IF RecLock( 'RF0' , .F. , .T. )
						   RF0->RF0_ABONA := 'S'
						   RF0->( MsUnLock() )
				        Endif
					Endif
				Next nX
				/*
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Altera Flag da Faixa de Pre-Abono para não utilizado		  ³
				³ quando o abono foi exlcuído		  						  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
				aArea := GetArea()

				dbSelectArea("RF0")
				RF0->(dbSetOrder( 1 ))

				nPosSPKDt	:= SPK->(GdFieldPos("PK_DATA"))
				nPosSPKHrI	:= SPK->(GdFieldPos("PK_HORINI"))
				nPosSPKHrF	:= SPK->(GdFieldPos("PK_HORFIM"))
				nPosSPKRec	:= SPK->(GdfieldPos("PK_"+"REC_WT"))

				For nX := 1 To Len(aSvtree[G_ABO,G_ACOLS])
					If aSvtree[G_ABO,G_ACOLS,nX,aSvtree[G_ABO,G_NSVUSADO]]
						If RF0->( dbSeek( xFilial("RF0",SRA->RA_FILIAL) + SRA->RA_MAT ) )
							While RF0->(!Eof())
								If aScan(aSvtree[G_ABO,G_MAIN] , {|x| x[nPosSPKDt] >= RF0->RF0_DTPREI .And. x[nPosSPKDt] <= RF0->RF0_DTPREF .And. !x[aSvtree[G_ABO,G_NSVUSADO]] .And. !Empty(x[nPosSPKRec] ) } ) == 0
									If RecLock( 'RF0' , .F. , .T. )
										RF0->RF0_ABONA := 'N'
										RF0->( MsUnLock() )
									EndIf
								EndIf
								RF0->(dbskip())
							EndDo
						EndIf
					EndIf
				Next

				RestArea(aArea)
				
    		Endif

	       	/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Processa Gatilhos                                             ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	        EvalTrigger()

		End Transaction

	EndIF
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se for Exclusao                                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
ElseIF nOpcA == 1 .and. nOpcX == 5
    //-- Substitui o conteudo do aCols e aHeader pelo Especifico
        Begin Transaction
   			//-- Deleta Marcacoes
		fMuda(G_MARC)
    	Pn280Dele(IF( lPona240 , "SPG" , "SP8" ),aRecno,G_MARCREG)

    		//-- Deleta Apontamentos
		fMuda(G_APO)
    	Pn280Dele(IF( lPona190 , "SPH" , "SPC" ),aRecno,G_APOREG)

    		//-- Deleta Abonos
		//-- Carrega Informacoes dos Abonos
		fMuda(3,,.F.)
    	Pn280Dele("SPK" ,aRecno,G_ABOREG)

	End Transaction

EndIF

Return ( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280FimFunc     ³ Autor ³Mauricio MR         ³ Data ³13/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Desbloqueia Funcionario    					                   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³																³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280FimFunc()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Libera Locks						                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
FreeLocks( IF( lPona190 , "SPH" , "SPC" ) , NIL , .T. )
FreeLocks( IF( lPona240 , "SPG" , "SP8" ) , NIL , .T. )
FreeLocks( "SPK" , NIL , .T. )

Return ( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn28Movimenta    ³ Autor ³Mauricio MR         ³ Data ³17/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executa acoes necessarias p/recriar o ambiente do funcionario  	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³Pn280Movimenta(cAcao,cMatVar,cNomeVar,dAdmissaoVar,lInicializa)	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280Movimenta(cAcao, cMatVar, cNomeVar, dAdmissaoVar, lInicializa, bChange)
Local lRet:= .T.
Local aArea:=GetArea()

Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), {.T.,.F.}) //[1] Acesso; [2]Ofusca
Local lOfuscaNom	:= .F.
Local lOfuscaAdm	:= .F.

Static nRegAntes

If nRegAntes == NIL .OR. lInicializa
	DEFAULT nRegAntes:=SRA->(Recno())
Endif

Begin Sequence

    If lInicializa
       Break
    Endif

	If Pcount() == 0
	   nRegAntes:= NIl
	   Break
	Endif

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ponto de Entrada para Selecao/Tratamento de Funcionarios    ³
	³ antes da Movimentacao de registros						  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF lPna280Pos
	   	ExecBlock( "PNA280POS" , .F. , .F. , {{|cAcao|Pn280Posiciona(cAcao) }, cAcao} )
	Else
		/*
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Posiciona no Registro Desejado					 			   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
   		 Pn280Posiciona(cAcao)
	Endif

	 /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem e Verifica o Periodo de Apontamento conforme Filial	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    If !Pn280VerAcesso()
       lRet:= .F.
       Break
    Endif

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem Identificacao do Funcionario				 			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    Pn280LoadIdFunc(@cMatVar, @cNomeVar, @dAdmissaoVar)

	//Tratamento dados sensíveis
	If aOfusca[2]
		aFldOfusca 	:= FwProtectedDataUtil():UsrNoAccessFieldsInList( aFldRot) // CAMPOS SEM ACESSO	
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_NOME" } ) > 0 
			lOfuscaNom	:= FwProtectedDataUtil():IsFieldInList( "RA_NOME" )
		ENDIF
		IF aScan( aFldOfusca , { |x| x:CFIELD == "RA_ADMISSA" } ) > 0 
			lOfuscaAdm := FwProtectedDataUtil():IsFieldInList( "RA_ADMISSA" )
		ENDIF
		cNomeVar	:= If(lOfuscaNom,Replicate('*',15),cNomeVar)
		dAdmissaoVar:= If(lOfuscaAdm,Replicate('*',10),dAdmissaoVar)
	EndIf

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa as variaveis do Proximo registro	 			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	Pn280ZeraVariaveis()

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Prepara Ambiente Calendario para o Funcionario 			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pn280PrepCalend()
	   lRet:= .F.
	   Break
   	Endif

 	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Prepara Ambiente Tela para o Funcionario 					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If !Pn280PrepTela()
	   lRet:= .F.
	   Break
   	Endif

	fMuda(1)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Remonta a Lista referente ao Calendario para o Funcionario    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	//-- Cria Lista do Calendario "NAO Visivel" para consultas completas das informacoes
  	ListCalend( @aListBox,,,aAuxHeader, aAuxSize)

	fObjOnOFF(.F.) //Desabilita Get e Listbox
	Pn280LoadList(oLBox, aListBox, .F.)
	oLbox:lVisibleControl:=.F.
	fObjOnOFF(.T.) //Desabilita Get e Listbox

	//-- Cria Calendario Sintetico "Visivel" para Navegacao entre Datas
 	aColunas:=Eval(baColunas)
 	ListCalend( @aListSint,aColunas,lCalendDiverg, aAuxHeader, aAuxSize)

    fObjOnOFF(.F.) //Desabilita Get e Listbox
	Pn280LoadList(oLBoxSint, aListSint, .F.)
	fObjOnOFF(.T.) //Desabilita Get e Listbox

	//-- Reposiciona as GetDados na Data do Calendario.
	olBoxSint:nAt:= Min(olBoxSint:nAt,Len(aListSint))
    Eval(oLBoxSint:bChange)

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se for habilitada a funcionalidade de movimentacao entre os registros	   ³
	³Forcamos o reapontamento quando a operacao original foi alterada		   ³
	³para atualizacao geral das divergencias						   		   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    If lMovimenta .And. !nOpcx == 3 .AND. nOpcx <> nOpcxAnt

    	//-- Aponta as marcacoes garantido que teremos apontados todos os dias ate a database
		Eval( bReaponMarc )
	Endif

	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Alimenta a Coluna do Calendario com as Divergencias		   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
    Pn280LoadDiv()
	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa os Objetos com as Informacoes do Funcionario       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
   	fObjOnOFF(.F.) //Desabilita Get e Listbox
   	fInicia()
	fObjOnOFF(.T.) //Desabilita Get e Listbox

End Sequence

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura os Dados de Entrada se nao foi possivel movimentar   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
If !lRet
	RestArea( aArea )
	SRA->(DbGoto(nRegAntes))

	Pn280Movimenta('_NADA', @cMatVar, @cNomeVar, @dAdmissaoVar,, bChange)
Else
    nRegAntes:=SRA->(Recno())
Endif

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura a Opcao do aRotina para Manutencao das Informacoes   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
//nOpcx:= nOpcxAnt

Return ( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280LoadIdFunc  ³ Autor ³Mauricio MR         ³ Data ³17/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega as Informacoes do Funcionario 						   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³Pn280LoadIdFunc(cMatVar, cNomeVar, dAdmissaoVar)				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280LoadIdFunc(cMatVar, cNomeVar, dAdmissaoVar)

cMatVar		:=StrZero(Val(SRA->RA_MAT),Len(SRA->RA_MAT))
cNomeVar	:=SRA->RA_NOME
dAdmissaoVar:=Dtoc(SRA->RA_ADMISSA)

Return ( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280Posiciona   ³ Autor ³Mauricio MR         ³ Data ³17/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Posiciona no registro do Funcionario conforme acao repassada   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³Pn280Posiciona(cAcao)											³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280Posiciona(cAcao)

Local oBrwAux 		:= GetMBrowse()
Local oFilAux 		:= oBrwAux:FwFilter()
Local cFilterMov	:= oFilAux:GetExprADVPL()

If !Empty(cFilterMov)
	DbSelectArea("SRA")
	DbSetFilter({||&cFilterMov},cFilterMov)
EndIf

If cAcao == "_PRIMEIRO"
   SRA->(DbGoTop())
ELSEIF cACAO= "_ANTERIOR"
		SRA->(DbSkip(-1))
ELSEIF cACAO= "_PROXIMO"
		SRA->(DBSkip())
ELSEIF cACAO= "_ULTIMO"
		SRA->(DbGoBottom())
Else
	SRA->(DbGoto(Recno()))
Endif

Return ( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280ZeraVariaveis ³ Autor ³Mauricio MR       ³ Data ³17/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa as variaveis do proximo Funcionario 				   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³Pn280ZeraVariaveis()											³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280ZeraVariaveis()

/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³                       Variavieis Privates  GERAIS            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
//-- Variaveis Gerais que serao alternados com os arrays/variaveis especificos dos GetDados
aHeader			:= Array( 0 )  	//-- Cabecalho do GetDados
aCols			:= {}          	//-- Linhas Detalhes do GetDados
n      			:= 0          	//-- Linha  Atual do GetDados
aArrayMain		:= {}          	//-- Array PRINCIPAL com TODAS as linhas do GetDados
aArrayAnt		:= {}          	//-- Copia do aArrayMain para Verificacao de Reapontamento
aElem			:= {}          	//-- Array com Numeros correspondentes as Linhas do ArrayMain
aRecno			:= {}          	//-- Array de Numero de Registros Fisicamente Gravados

//-- Variaveis Numericas  que serao alternados com os arrays/variaveis especificos dos GetDados
nUsado			:= 0
nSvUsado		:= 0
nCnt	 		:= 0

//-- Variaveis de Gerenciamento de GetDados
aSvtree			:= {}          //-- Array Container de GetDados
cEstou			:= "1"         //-- Get/Pasta Atual
cIndo			:= ""          //-- Get/Pasta Destino

//--Array com Informacoes do Calendario Visualizado
aListBox		:= {}          	//-- Datas do Calendario
aListSint		:= {}			//-- Datas Sintetizadas do Calendario (Somente 1a.Marcacao)
aListBoxCol		:= {}          	//-- Datas do Calendario para 1 unica ordem

//-- Arrays com informacoes Calendario para Apontamento
aTabCalend  	:= {}          	//-- Calendario do Periodo
aMarcacoes		:= {}        	//-- Marcacoes do Periodo
aResult			:= {}         	//-- Resultado do Apontamento do Periodo
aLastApo		:= {}        	//-- Ultimo Resultado do Apontamento

//-- Numericos Gerais
nSvnAt		:= 1.00
nLenRF0		:= 0
cEvento		:= ''
cTpMarca	:= ''
cCCSPC	    := ''
dDataSPC	:= Ctod('')
//lChamadaNIL := .F.
aColsAnt	:=	{}
aColsRec    := 	{}   //--Array que contem o Recno() dos registros da aCols
aRecnoClone := 	{}   //--Array que contem o Recno() dos registros da aArrayMain
aRF0Faixa	:=  {}
nHrsEve		:= 0

Return(NIL)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Pn280VerAcesso     ³ Autor ³Mauricio MR       ³ Data ³19/05/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica a Permissao de Acesso aos dados Funcionario 		   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³Pn280VerAcesso()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³																³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Pn280VerAcesso()
Local cLastFil
Local dPerIniPar	:= Ctod("//")
Local dPerFimPar	:= Ctod("//")
Local lRet			:= .T.

Begin Sequence
	  /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Atualiza a Filial Corrente           						  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	cLastFil := SRA->RA_FILIAL

     /*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Checa e Obtem o Periodo de Apontamento conforme a Filial	  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

	IF !(;
		CheckPonMes(@dPerIni,@dPerFim,.F.,.T.,!lPona240, cLastFil);
		.OR.;
   		GetPonMesDat(@dPerIniPar,@dPerFimPar, cLastFil);
   		.OR.;
   		ValidPonData(dPerIni,"P",dPerIniPar,dPerFimPar,lPona240,.T., cLastFil);
   	   )
   	   lRet:= .F.
   	   Break
   Endif

End Sequence

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³Pn280VerMove   ³ Autor ³Mauricio MR           ³ Data ³19/05/2005   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Prepara a  Movimentacao de Registros							     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Pn280VerMove(nOpcX,bChange,bMove, bSet15)                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ bChange      --> Bloco para Atualizacao / Reposicionamento de Ob- ³±±
±±³          ³                 jetos e variaveis                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³NIL                                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observa‡„o³                        	                           	     	     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PONA280                                                      	     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Pn280VerMove(nOpcX,bChange,bMove, bSet15)
Local lRet:=.T.

//-- Se Inclusao ou Alteracao
If  nOpcx==3 .OR. nOpcx==4
    //-- Descarrega o conteudo do Get para as variaveis aCols, aHeader e n
    fVarGet( @oGet, @aHeader, @aCols, @n, DESCARREGA)
    //-- Nao Carrega aCols,Descarrega aCols em aArrayMain e nao atualiza get oposto.
    Eval(bChange,{|| {.F.,.T.,.F.} } )
    //-- Atualiza Arrays aSvtree
    fMuda( Val(cEstou), DESCARREGA)
	//-- Verifica Alteracoes realizadas em Marcacoes, Apontamentos e Abonos
	//-- .T. - Abandona as alteracoes
	//-- .F. - Nao abandona as alteracoes
	If  fSai280(  {{aSVTREE[G_MARC,G_MAIN],aSVTREE[G_MARC,G_CLONE_MAIN]},;
	 	     	   {aSVTREE[G_APO,G_MAIN],aSVTREE[G_APO,G_CLONE_MAIN]},;
				   {aSVTREE[G_ABO,G_MAIN],aSVTREE[G_ABO,G_CLONE_MAIN]}};
  	           )
          //-- .T. -> Grava Alteracao/Inclusao
  	    Eval(bMove, .F.)
   Else
      //-- Verifica Pendencias e/ou Aponta
      If (Eval(bSet15,.F.))
          //-- .T. -> Grava Alteracao/Inclusao
          Eval(bMove, .T.)
      Else
          lRet:= .F.
      Endif
   Endif
Else
    //-- .F. -> Somente Movimenta (NAO Grava)
	Eval(bMove, .F.)
Endif

If lRet
	o1Get:oBrowse:SetFocus()
endif

Return lRet

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ fValMotMan		³Autor³  Alceu Pereira    ³ Data ³05/08/2010³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida marcacao 	                                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA280                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³lRet														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fValMotMan()

Local lRet 	   := .T.
Local lOne	   := .T.
Local nCont    := 0
Local nLenCols := 0
Local cHelp	   := ""
Local cMotivo  := ""
Local nPosMot  := GdFieldPos( "P8_MOTIVRG", o1Get:aHeader )
Local nPosDta  := GdFieldPos( "P8_DATA"	  , o1Get:aHeader )
Local nPosDel  := GdFieldPos( "GDDELETED" , o1Get:aHeader )
Local nPosFlg  := GdFieldPos( "P8_TIPOREG", o1Get:aHeader )

If cPaisLoc == "BRA"

	Aeval(o1Get:aCols, {|x,nLinha| If( !GdDeleted(nLinha, o1Get:aHeader, o1Get:aCols) , nLenCols++ , " " ) } )

	If ( Len(aCols) > 0 .and. !Empty(aCols[ Len(aCols), nPosDta ]))
		For nCont := 1 To nLenCols
				If ( Empty(o1Get:aCols[nCont, nPosMot]) .and. (o1Get:aCols[nCont, nPosFlg] != "O" .and. !Empty(o1Get:aCols[nCont, nPosDta])) )
				lRet := .F.
				oLBoxSint:nAt := nLinAnt
				oLBoxSint:Refresh()
				Exit
			EndIf
		Next
	EndIf

	nLinAnt := Iif(lRet, oLBoxSint:nAt, nLinAnt)

EndIf

Return(lRet)


/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Gustavo     ³ Data ³30/11/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA280                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/

Static Function MenuDef()

 Local aRotina :=      {	{ STR0002,"PesqBrw"	 , 0 , 1, ,.F.},; 		//"Pesquisar"
							{ STR0003,"Pn280Atu" , 0 , 2},; 			//"Visualizar"
							{ STR0004,"Pn280Aux" , 0 , 4,,,.T.},;		//"Incluir"
							{ STR0005,"Pn280Atu" , 0 , 4},; 			//"Alterar"
							{ STR0006,"Pn280Atu" , 0 , 5},; 			//"Excluir"
							{ STR0007,"gpLegend" , 0 , 6 , ,.F.} ;		//"Legenda"
						}

// Ponto de entrada p/ inclusao de novas opcoes em aRotina
If ExistBlock("PNA280ROT")
	aRotina := ExecBlock( "PNA280ROT" ,.F.,.F.,{aRotina}, .F. )
Endif

Return aRotina



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PONA280   ºAutor  ³Pedro Eloy          º Data ³  04/11/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³  Rotina para passar somente os campos alteraveis           º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fCamposVis(aAlter,aHeader)

Local cNaoCampo		:= ""
Local aAltera		:= {}
Local nCont			:= 1

For nCont:= 1 to Len(aAlter)
 	cNaoCampo	:= cNaoCampo + aAlter[nCont]+"/"
Next

For nCont:= 1 to Len(aHeader)
    If !(Alltrim(aHeader[nCont][2]) $ cNaoCampo)
		Aadd(aAltera,aHeader[nCont][2])
	Endif
Next

Return(aAltera)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ Pn280Aux		³Autor³  Gustavo M.	      ³ Data ³22/08/2012³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Utilizada para identificar quando é selecionado a opçao de  ³
³          ³incluir    													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PONA280                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³Pn280Atu													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Pn280Aux(cAlias,nReg,nOpcX)

lGPEA011 := IF(Type("lGPEA011")== "U",.F.,lGPEA011)

If lGPEA011
	lIncluir := .T.
	lGPEA011 := .F.
ElseIF IsInCallStack("GPEA011")
	nOpcX := 4
Endif

Return(Pn280Atu(cAlias,nReg,nOpcX))

/*/{Protheus.doc} ReordMarc
- @author: Matheus Bizutti
- @since: 27/01/2016
- @param: o1Get - Get que contém as marcações, através dele é alterado o seu aCols e efetuado o Refresh em tela.
/*/

Static Function ReordMarc(o1Get)

Local nPosData		:= GdFieldPos("P8_DATA")
Local nPosHora		:= GdFieldPos("P8_HORA")
Local nPosTpMarc		:= GdFieldPos("P8_TPMARCA")

	aSort( o1Get:aCols ,,, { |x,y|;
								DataHora2Str(x[nPosData],x[nPosHora])+x[nPosTpMarc];
								<;
								DataHora2Str(y[nPosData],y[nPosHora])+y[nPosTpMarc];
						   };
		  )

	If  o1Get <> Nil
			o1Get:ForceRefresh()
			o1Get:Refresh()
			o1Get:oBrowse:Refresh()
    Endif

Return ( Nil )

Function fExprFil(cFiltraRh)

Local nX 		  
Local aFiltraRh := {}
Local cQuery := cFiltraRh

aAdd(aFiltraRh , {Chr(34), Chr(39)})
aAdd(aFiltraRh , {"SRA->", ""})
aAdd(aFiltraRh , {"==", "="})
aAdd(aFiltraRh , {".", " "})
aAdd(aFiltraRh , {"$", "LIKE"})

For nX := 1 To Len(aFiltraRh)		
	cQuery := strTran(cQuery, aFiltraRh[nX][1], aFiltraRh[nX][2])	
Next nX 

Return cQuery
