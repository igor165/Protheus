#INCLUDE "PONXAPO.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Staticas de Ambiente                                         ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static cFilStatic 								//-- Filial Anterior
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Staticas de Retorno dos Mv's do SX6                          ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static lMarcImpar								//-- Tratar Marcacoes Impares na Montagem do aHoras para o Apontamento
Static lApHeDtM									//-- Aponta Horas Extras de Acordo com o Dia
Static lJtHeDtM									//-- Se o Tipo das Horas Extras corresponder ao do Dia Atual Grava no Dia Atual, se nao, no seguinte
Static lMarcIgual								//-- Tratar Marcacoes Duplicadas na Montagem do aHoras para o Apontamento
Static lMvAcmHExt								//-- Considerar Todas as Horas Extras do Dia Para o Escalonamento
Static lMvArrInte								//-- Define se ira considerar o Arredondamento Integral das Horas
Static lMvArrSExp								//-- Define se ira considerar o Arredondamento para Saida no Expediente ("S" eh o padrao e utiliza a Tab.Arred. da S.Antecipada, "N"  nao arredonda, como era feito na versao 508)
Static lDSRHorista 								//-- Define se o apontamento de DSR de horistas sera apurado conforme horas trabalhadas/apontadas
Static lDSRTab
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Staticas de Eventos x Identificadores do Ponto               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static aEvesIds									//-- Array com os Eventos/Identificadores do Ponto de Acordo com o SX5
Static cEvesNoDele								//-- Eventos que Nao Podem ser Deletados em GravaSPC
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Staticas de Exitencia de Pontos de Entrada                   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static lPonaPo4Block := ExistBlock( "PONAPO4" )	//-- Verifica a Existencia do Ponto de Entrada PONAPO4
Static lPonaPo9Block := ExistBlock( "PONAPO9" )	//-- Verifica a Existencia do Ponto de Entrada PONAPO9
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Variavel para manipulacao da tabela de horas extras		  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static lPnmTabHe 	:= ExistBlock( "PNMTABHE" )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Para Evitar a Chamada a Ctod("//")                           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static dDateEmpty := Ctod("//")					//Substitui a Chamada a Ctod("//")

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Define Objetos que conterao as Variaveis para Apontamento    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static oAponta
Static oaApo
Static __lTolHrNReal

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Static para Verificacao do lPreAbo							  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static lRF0ChkTable

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Static para informar marcaçãoes que devem gerar a sumula 437 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static aIntMins 	:= {}
Static lGeraSuml 	:= .F.

Static cFilCCT		:= ""
Static cCodCCT		:= ""

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Constantes Que Definem a Prioridade das Horas Extras         ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
#DEFINE Priority_Normal_Overtime	0
#DEFINE Priority_Nocturnal_Overtime	1

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Constantes Manifestas para o Array de Faixas de He Autorizadas ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
#DEFINE DATA_REFERENCIA	01
#DEFINE DATA_INICIAL	02
#DEFINE HORA_INICIAL	03
#DEFINE DATA_FINAL		04
#DEFINE HORA_FINAL		05

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Programa  ³PonxApo   ³ Autor ³ *EQUIPE RH ADVANCED*  			³ Data ³ 02/02/96 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³ Conjunto de fun‡”es de Apontamento utilizadas no SigaPon 			  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³ Void                                                   			  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Gen‚rico                                                  			  ³
ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³                     ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL. 		  ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Programador ³ Data   ³ FNC			   ³  Motivo da Alteracao                     ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Mauricio MR ³14/10/09³000000256232009 ³ Alteracao das chamadas das funcoes abaixo³
³            ³        ³                ³ para atender a portaria 1.510 - MTE (BRA)³
³            ³        ³                ³ - GravaSPC - Gravacao do Turno/Semana e  ³
³            ³        ³                ³              Tipo de HE.                 ³
³            ³        ³                ³ - fMtaTabAp             Tipo de HE.      ³
³Allyson M.  ³04/07/11³000000161112011 ³ Ajustes em ApontaSI() p/ controlar a     ³
³            ³        ³                ³ mobilidade de todos os intervalos permi- ³
³            ³        ³                ³ tidos pelo sistema (tres intervalos) 	  ³
³Leandro Dr. ³09/11/11³000000289582011 ³ Ajuste no calculo de adicional noturno   ³
³            ³        ³                ³ quando utilizado horario movel livre.    ³
³Gustavo M.  ³17/01/12³00000000359/2012³ Ajuste no apontamento para atender ao    ³
³            ³        ³                ³  Art . 58 CLT § 1						  ³
³Leandro Dr. ³10/05/12³          TEYXT6³ Ajuste para considerar o novo campo      ³
³            ³        ³                ³ PA_TOLHRNR na tolerancia de atrasos e    ³
³            ³        ³                ³ saida antecipada.                        ³
³Allyson M.  ³07/08/12³          TFNTQJ³ Ajustes em Aponta() p/ evitar error log  ³
³            ³        ³                ³quando o campo R8_NUMID e' utilizado (SLA)³
³Allyson M.  ³10/05/13³          THCHF1³ Ajustes em Aponta() p/ tratar geracao de ³
³            ³        ³                ³horas de DSR de forma diferenciada para   ³
³            ³        ³                ³horistas. O DSR sera gerado de acordo com ³
³            ³        ³                ³as horas que sao trabalhadas em um dia    ³
³            ³        ³                ³normal.									  ³
³Gustavo M.  ³10/05/13³          TGXYNI³ Ajuste para corrigir travamento devido   ³
³            ³        ³                ³ a diferenca de segundos na comparacao    ³
³            ³        ³                ³ de horarios.							  ³
³Allyson M.  ³15/08/13³          THP329³Ajustes na execucao do PE PNMTABHE.       ³
³Luis Artuso ³19/08/13³          THSCLB³Ajuste para informar corretamente a tole- ³
³            ³        ³                ³rancia,quando utilizar o campo PA_TOLHRNR ³
³Luis Artuso ³12/09/13³          THSNJ6³Corrigida a validacao da tolerancia de ho-³
³            ³        ³                ³ra extra,quando utilizar o campo		  ³
³            ³        ³                ³PA_TOLHRNR.								  ³
³Gustavo M.  ³17/09/13³          THEPNU³ Ajuste para apontamento de DSR feriado   ³
³            ³        ³                ³ em dia trabalhado.						  ³
³Luis Artuso ³23/09/13³          THSOMQ³Ajuste para verificar o intervalo que eh  ³
³            ³        ³                ³permitido o pagamento de hora extra.	  ³
³Antonio C.  ³01/10/13³          THSPAE³ Corrigida a validação do adicional sobre ³
³            ³        ³                ³ hora extra no adicional noturno, quando  ³
³            ³        ³                ³ o parâmetro MV_APHEDTM está como sim ele ³
³            ³        ³                ³ bloqueava de acordo a tolerancia.        ³
³Luis Artuso ³04/10/13³          THSGVR³ Ajuste para validar tolerancia de hora   ³
³            ³        ³                ³ extra.                               	  ³
³Luis Artuso ³05/11/13³          THYQQO³ Ajuste para validar verificar atrasos,   ³
³            ³        ³                ³ quando houver intervalo movel e falta de ³
³            ³        ³                ³ 1/2 periodo.                	  		  ³
³Luis Artuso ³02/12/13³          THXIFW³ Ajuste para corrigir errorlog ao efetuar ³
³            ³        ³                ³ o reapontamento de funcionario em ferias.³
³Luis Artuso ³12/12/13³          TIGHAO³ Ajuste no calculo de hora extra ao utili-³
³            ³        ³                ³ zar horario/intervalo movel livre.       ³
³Luis Artuso ³18/02/14³          THOUEK³ Ajuste no calculo de hora extra ao consi-³
³            ³        ³                ³ derar a hora noturna reduzida(R6_HNOTTAB)³
³Luis Artuso ³11/03/14³          TIITL4³ Ajuste para exibicao dos totais do adicio³
³            ³        ³                ³ nal noturno, ao exibir os eventos separa-³
³            ³        ³                ³ damente.								  ³
³Luis Artuso ³16/07/14³          TQADG7³Ajuste na apuracao de atraso/saida anteci-³
³            ³        ³                ³pada em horario movel livre.		      ³
³Renan Borges³29/07/14³          TQBLTO³Criação do ponto de entrada PONFERHE para ³
³            ³        ³                ³alterar a apuração de hora extra quando   ³
³            ³        ³                ³for feriado. Replica do chamado TPZZT2.   ³
³Luis Artuso ³11/08/14³          TQGSV0³Criada a rotina fHrsIntAnt, que permite   ³
³            ³        ³                ³apurar hora extra de inter jornada entre  ³
³            ³        ³                ³periodos.                                 ³
³Luis Artuso ³02/09/14³          TQK175³Ajuste para gerar corretamente os minutos ³
³            ³        ³                ³do acrescimo noturno.                     ³
³Luis Artuso ³08/09/14³          TQJOUB³Ajuste para considerar o campo R6_EXTNOT  ³
³            ³        ³                ³na apuracao da hora extra em horario movel³
³            ³        ³                ³livre.                                    ³
³Luis Artuso ³08/09/14³          TQHUQA³Ajuste efetuado para nao gerar evento inde³
³            ³        ³                ³vido de hora extra inter-jornada, quando  ³
³            ³        ³                ³efetuar o apontamento em dia 'especifico'.³
³            ³        ³                ³ex.: (01/08 a 01/08).                     ³
³Luis Artuso ³13/10/14³          TQTGAU³Ajuste para gerar o evento de saida ante- ³
³            ³        ³                ³cipada, quando regra movel livre.         ³
³Luis Artuso ³08/12/14³          TQZURW³Ajuste em AvalAponta() para corrigir error³
³            ³        ³                ³log ao efetuar a leitura/apontamento.	  ³
³Renan Borges³26/02/15³          TQYM02³Ajuste para calcular corretamente o acres-³
³            ³        ³                ³cimo noturno e do adicional noturno haven-³
³            ³        ³                ³do ou não intervalo pago e ajuste para cal³
³            ³        ³                ³cular corretamente o adicional noturno de ³
³            ³        ³                ³horas extras quando horário é móvel.      ³
³Luis Artuso ³22/06/15³          TSPD59³Ajuste para validar tolerancia por marca- ³
³            ³        ³                ³cao ou por periodo, conforme artigo 58.   ³
³Allyson M.  ³23/06/15³          TSCXNI³Ajuste p/ gerar o C.C. no resultado do    ³
³            ³        ³                ³apontamento conforme o C.C. da marcacao   ³
³            ³        ³                ³quando for horario movel livre.    		  ³
³Renan Borges³09/09/15³          TSVNH1³Ajuste p/ apurar horas não realizadas e   ³
³            ³        ³                ³horas extras corretamente, de acordo com o³
³            ³        ³                ³ artigo 58 da CLT, respeitando as tolerân-³
³            ³        ³                ³cias por marcações e por períodos.        ³
³Renan Borges³02/10/15³          TTLGAW³Ajuste na apuração de hora extra para não ³
³            ³        ³                ³gerar horas negativas ou apontamento de ho³
³            ³        ³                ³ra extra indevido.                        ³
³            ³        ³                ³Ajuste para ao possuir intervalo móvel com³
³            ³        ³                ³ interjornada não seja gerada hora duplica³
³            ³        ³                ³da para o intervalo do primeiro dia.      ³
³Renan Borges³07/12/15³          TTTSI7³Ajuste para calcular horas extras não-auto³
³            ³        ³                ³rizadas corretamente, respeitando os limi-³
³            ³        ³                ³tes de tolerância do art. 58              ³
³            ³        ³                ³Ajuste para corrigir calculo de hora extra³
³            ³        ³                ³quando solicitado destaque do acrescimo no³
³            ³        ³                ³turno.                                    ³
³Renan Borges³28/12/15³          TUBIOH³Ajuste para utilizar a configuração de    ³
³            ³        ³                ³“Prorrogação do Adicional noturno” correta³
³            ³        ³                ³mente.                                    ³
³Renan Borges³08/01/16³          TUDTQO³Ajuste para em dias não trabalhados que   ³
³            ³        ³                ³possuam uma pausa que não seja referente  ³
³            ³        ³                ³a um intervalo, sistema apure as horas ex-³
³            ³        ³                ³tras corretamente e ajuste para calcular  ³
³            ³        ³                ³horas extras noturnas quando possuir acres³
³            ³        ³                ³cimo noturno corretamente.                ³
³Renan Borges³13/05/16³          TVEQZX³Ajuste para não gerar horas extras negati-³
³            ³        ³                ³Ajuste para gravar tipo de marcação corre-³
³            ³        ³                ³tamente quando regra possuir horário móvel³
³Renan Borges³04/08/16³		     TVTHKK³Criação do ponto de entrada PNMTOLALT para³
³			 ³		  ³			       ³alterar a tolerância conforme a data da   ³
³			 ³		  ³			       ³marcação, por exemplo no sábado a tolerân-³
³			 ³		  ³			       ³cia é diferente do que nos outros dias.   ³
³Renan Borges³06/01/17³        MRH-1224³Ajuste para realizar apontamento correta- ³
³            ³        ³                ³mente quando funcionário começar expedien-³
³            ³        ³                ³te na hora do intervalo ou após o interva-³
³            ³        ³                ³lo e o intervalo seja móvel.              ³
³Renan Borges³17/01/17³          TVWKLE³Ajuste para lançar e apontar marcações cor³
³            ³        ³                ³retamente quando for alterada a regra de  ³
³            ³        ³                ³apontamento do funcionário, de saida para ³
³            ³        ³                ³entrada.                                  ³
³Renan Borges³29/12/16³        MRH-3465³Ajuste para apontar os tipos de marcações ³
³            ³        ³                ³corretamente quando existir mais apontamen³
³            ³        ³                ³tos que o da tabela de horario padrão.    ³
³Paulo O     ³27/03/17³        MRH-7333³Correção de erro log por estouro do array ³
³Inzonha     ³        ³                ³oAponta:aSiglaMarc. Criado novo array     ³
³            ³        ³                ³aTpMarc com o tamanho igual das marcações ³
³M. Silveira ³24/05/17³    DRHPONTP-583³Ajuste p/ nao gerar HE incorretas quando  ³
³            ³        ³                ³existe HE em dias nao trabalhados.        ³
³M. Silveira ³19/06/17³    DRHPONTP-975³Ajuste p/nao gerar HE interjonada indevida³
³            ³        ³                ³quando nao houver marcacao no dia.        ³
³Eduardo K.  ³28/06/17³  MPRIMESP-10552³Ajuste p/ reordenar o array de marcações  ³
³            ³        ³                ³após ordenação por ordem decrescente.     ³
³M. Silveira ³14/07/17³   DRHPONTP-1062³Ajuste p/ gravar o centro de custo correto³
³            ³        ³                ³no apontamento quando houver transferencia³
³Oswaldo L   ³01-08-17³   DRHPONTP-1415³Baixar Interj inovacao 12.1.18 p/ 12.1.17 ³
³Renan Borges³03/08/17³   DRHPONTP-1380³Ajuste para que o sistema faça a leitura  ³
³            ³        ³                ³e apontamento corretamente quando for sele³
³            ³        ³                ³cionado somente parte do período de aponta³
³            ³        ³                ³mento.                                    ³
³Esther V.   ³08/08/17³   DRHPONTP-1337³Inclusao do parametro MV_APDSRCC para defi³
³            ³        ³                ³nir a qual CC ira pertencer o DSR. Se sera³
³            ³        ³                ³pelo historico de transferencias (.T.) ou ³
³            ³        ³                ³se utilizara o RA_CC (.F. - padrao).      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³InPonxApoExec ³Autor ³Marinaldo de Jesus   ³ Data ³24/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executar Funcoes Dentro de PONXAPO                           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³InPonxApoExec( cExecIn , aFormParam )						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico 													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function InPonxApoExec( cExecIn , aFormParam )

Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	 := &( cExecIn )
EndIF

Return( uRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³ Aponta   ³ Autor ³ Equipe Advanced RH    ³ Data ³ 04/04/96 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Efetua o apontamento das marca‡”es.                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³ Aponta()                                                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³ Generico                                                   ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Aponta(	dIni		,;	//01 - Periodo Inicial do Apontamento
					dFim		,;	//02 - Periodo Final do Apontamento
					aMarcacoes	,;	//03 - Array com as Marcacoes do Funcionario
					aTabCalend	,;	//04 - Calendario Padrao
					cFilSRA		,;	//05 - Filial do Funcionario
					cMatSRA		,;	//06 - Maricula do Funcionario
					aCodigos	,;	//07 - Array com os Eventos que possuem Identificadores
					aResult		,;	//08 - Array onde Serao Gravados os Resultados
					lGrava		,;	//09 - Logico, se Ira Gravar ou Nao o Apontamento
					lStop		,;	//10 - lStop, se Permite interrupcao durante o Processamento (HELP)
					aLogFile	,;	//11 - Array com os Logs de Apontamento
					aAbonosPer	,;	//12 - Array com Todos os Abonos do Periodo (Por Referencia)
					lApoSaida	,;	//13 - Indica que foi chamada recursivamente pelo apontamento pela saída
					aSvtree		,;	//14 - Array com informações do acols da SPC, SP8 e SPK
					lLimitaDtF 	 ;	//15 - Se limita os apontamentos utilizando a database do sistema (Obs: quando for Scheduler)
				)
Local aDSRFerias	:= {}
Local aRetPe
Local aSvTabsCal
Local cCodAtras		:= ""
Local dDataAux		:= CtoD("")
Local lAddHorasTotais
Local lHorista 		:= ( SRA->RA_CATFUNC == "H" )
Local nCont			:= 0
Local nDiasUt		:= 0
Local nX
Local nPosCalCC		:= 0
Local nHorasTrab	:= 0
Local nUmDSR		:= 0
Local nW
Local nHorasFer		:= 0
Local lPonFerHe		:= ExistBlock( "PONFERHE" )
Local lPFerHeVal
Local cCcTrf		:= ""
Local lExecutou		:= .F.
Local lGeraInter	:= .F.
Local lApDsrCC		:= SuperGetMV("MV_APDSRCC",,.F.)
Local nPosX			:= 0
Local nPosDiaAnt	:= 0
Local nI			:= 0
Local lNovaOrdem	:= .F.
Local lAntAjusEJ	 
Local nTpMarc		:= 0
Local aTpMarc		:= {}

Local aLastHoras	:= {}
Local aLastAutoDia	:= {}

Local nPosMarc		:= 0
Local cLastCCT		:= ""
Local lRestHE		:= .F.

Private lHrExMar	:= .F.
Private nHrExMar	:= 0
Private aEventos	:= {}	//-- Array a Ser Utilizado no Ponto de Entrada "PONAPO4"
Private aHrExMar	:= {}
Private aNotRealInt	:= {}
Private aSobreAviso := {}
Private aAuxMarc	:= aClone(aMarcacoes)
Private nMarcReal 	:= 0
Private nCredInterJ := 0
Private nIntPriEntradPadrao := 0

DEFAULT oAponta		:= PonVarApon():New()
DEFAULT oaApo		:= oAponta:oaApo
DEFAULT lPnmTabHe	:= ExistBlock( "PNMTABHE" )
DEFAULT lApoSaida	:= .F.
DEFAULT	lLimitaDtF	:= .F.
DEFAULT	aSvtree		:= {}

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³lApontaOk eh sempre True no Inicio do Processo				  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
oAponta:lApontaOk	:= .T.

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³lRF0ChkTable determina o Uso do Pre-Abonos					  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
DEFAULT lRF0ChkTable	:= fVerTabRF0()  	//Verifica a Existencia da Tabela de Pre-Abonos e se a mesm possui registro
oAponta:lRF0ChkTable	:= lRF0ChkTable
oAponta:aSvtree			:= aSvtree

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Atualiza as Variaveis Statics                                ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF ( oAponta:lModFil := ( ( cFilStatic == NIL ) .or. ( cFilStatic != cFilSRA ) ) )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Salva Filial Anterior										  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cFilStatic	:= cFilSRA
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Salva aLogFile que podera ser Modificada em GetEveIdPon()    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aLastLog := aClone( aLogFile )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa a Variavel __cSvFilAnt caso nao esteja definida  e³
	³as Variaveis Staticas com os Respectivos MV_'S       		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	lMarcImpar			:= ( SuperGetMv("MV_MCIMPAR",,"N",cFilStatic) == "S" )	//-- Tratar Marcacoes Impares na Montagem do aHoras para o Apontamento
	lApHeDtM			:= ( SuperGetMv("MV_APHEDTM",,"N",cFilStatic) == "S" )	//-- Aponta Horas Extras de Acordo com o Dia
	lJtHeDtM			:= ( SuperGetMv("MV_JTHEDTM",,"S",cFilStatic) == "S" )	//-- Se o Tipo das Horas Extras corresponder ao do Dia Atual Grava no Dia Atual, se nao, no seguinte
	lMarcIgual			:= ( SuperGetMv("MV_MCIGUAL",,"N",cFilStatic) == "S" )	//-- Tratar Marcacoes Duplicadas na Montagem do aHoras para o Apontamento
	oAponta:nHrInterJd	:= ( SuperGetMv("MV_HRINTER",, 0 ,cFilStatic) )			//-- Numero Minimo de Horas Inter-Jornada
	lMvAcmHExt			:= ( SuperGetMv("MV_ACMHEXT",,"N",cFilStatic) == "S" )	//-- Considerar Todas as Horas Extras do Dia Para o Escalonamento
	lMvArrInte			:= ( SuperGetMv("MV_ARRINTE",,"N",cFilStatic) == "S" )	//-- Define se ira considerar o Arredondamento Integral das Horas
	lMvArrSExp			:= ( SuperGetMv("MV_ARRSEXP",,"S",cFilStatic) == "S" )	//-- Define se ira considerar o Arredondamento para Saida no Expediente ("S" eh o padrao e utiliza a Tab.Arred. da S.Antecipada, "N"  nao arredonda, como era feito na versao 508)
	lDSRHorista			:= SuperGetMv("MV_DSRHORI",,.F.,cFilStatic) 			//-- Define se o apontamento de DSR de horistas sera apurado conforme horas trabalhadas/apontadas
	lDSRTab    			:= SuperGetMv("MV_DSRTAB",,.F.,cFilStatic)
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega Array com os Identificadores o nao esteja definida  e³
	³as Variaveis Staticas com os Respectivos MV_'S       		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aEvesIds			:= GetEveIdPon( aCodigos , cFilStatic , @aLogFile )		//-- Array com os Eventos/Identificadores do Ponto de Acordo com o SX5
	cEvesNoDele			:= ObtemEveNoDele( aCodigos )							//-- Eventos que Nao Podem ser Deletados em GravaSPC

	oAponta:nHrInterJd := SR6->R6_HRINTER

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se Todos os Identificadores Possuem Eventos   Corres³
	³pondentes													  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:lApontaOk := ArrayCompare( oAponta:aLastLog , aLogFile )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega os Arredondamentos da Filial						  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:GetTabArred( cFilSRA, .T. )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega em aAllTabExtra Todas as Tabelas de Horas Extras para³
	³uso em fTolDiaria()										  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:lApontaOk := oAponta:GetTabExtra( cFilSRA , lStop , lMvAcmHExt , .F. )

	If lPnmTabHe
		If( ValType( aRetPe := ExecBlock( "PNMTABHE", .F., .F., {.T., oAponta:aAllTabExtra} ) ) == "A" )
			oAponta:aAllTabExtra := aClone(aRetPe)
		EndIf
	EndIf
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem a Filial do SPA (Regra)								  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:GetSetSPAFil()
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem a Filial do SP6 (Motivos de Abonos)					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:GetSetSP6Fil()
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem a Filial do SR6 (Turnos de Trabalho)					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:GetSetSR6Fil()
Else
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³__cSvFilAnt Agora Tem o Conteudo da Filial Atual			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	__cSvFilAnt := cFilStatic
EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Inicializa as Datas utilizadas no Apontamento				  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
oAponta:dData	:= dIni
oAponta:dPerIni	:= dIni
oAponta:dPerFim	:= dFim
oAponta:dUltDia	:= oAponta:dPerFim
oAponta:dSvdIni	:= dIni
oAponta:dSvdFim	:= dFim

aSobreAviso		:= If( Len(aEvesIds) >= 44 .and. !Empty(aEvesIds[ 044 , 02 ]), GetHrsSAvi(dIni, dFim, aTabCalend), {}) //-Obtem as horas de sobre aviso cadastradas

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Obtem o Real Periodo de Apontamento						  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF ( ( lApHeDtM ) .or. ( oAponta:nHrInterJd > 0 ) )
	PerAponta( @oAponta:dPerIni , @oAponta:dUltDia , NIL , lStop , cFilSRA )
	IF ( dIni == dFim .or. dIni < dFim )
		IF ( dIni > oAponta:dPerIni )
			--dIni //Retrocede Para Apontar um Dia Antes
		EndIF
	EndIF
EndIF

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa oAponta:aChkTolArr a Cada Apontamento			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:InitChkArr()

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se ocorreu alguma Inconsistencia Ate este ponto Aborta		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( oAponta:lApontaOk )
		Break
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Altera o estado de lApontaOk                          		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:lApontaOk := .F.

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega aTabCalend											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aTabCalend	:= aClone( aTabCalend )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Array calendario para modificacao pela funcao fMtaTabAp()    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aTabClone	:= aClone( aTabCalend )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Carrega aResult											  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aResult		:= aClone( aResult )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Copia de aResult para Comparacao Antes da Gravacao			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aResClone	:= aClone( aResult )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa aResAbo em oAponta                      		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aResAbo		:= {}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Array c/ marcacoes para modificacao pela funcao fMtaTabAp()  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aMarClone	:= aClone( aMarcacoes )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem o Numero de Elementos de aMarcacoes 					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:nLenMarc := Len( aMarcacoes )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa nPosOrdMarc a Cada Apontamento					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:nPosOrdMarc	:= 1

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reinicializa nDiaIni e nDiaFim a Cada Apontamento			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:nDiaIni	:= 0
	oAponta:nDiaFim	:= 0
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica qual o dia inicial para o apontamento				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:dDtPesq := dIni
	While ( .T. )
		IF ( oAponta:lApontaOk := ( ( oAponta:nPosAux := aScan( oAponta:aTabCalend , { |x| x[CALEND_POS_DATA_APO] == oAponta:dDtPesq .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0 ) )
			oAponta:nDiaIni := Val( oAponta:aTabCalend[ oAponta:nPosAux , CALEND_POS_ORDEM ] )
			Exit
		Else
			IF !( oAponta:lApontaOk := !( ( ++oAponta:dDtPesq ) > dFim ) )
				aAdd(aLogFile, STR0003 ) // '- Nao Foi Encontrado o Periodo no Calendario de Marcacoes. Acerte a Data Base do Sistema'
				Break
			EndIF
		EndIF
	End While

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica qual o dia final para o apontamento				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If lLimitaDtF
		oAponta:dDtPesq := dDataBase
	Else
		oAponta:dDtPesq := dFim
	EndIf

	While ( .T. )
		IF ( oAponta:lApontaOk := ( ( oAponta:nPosAux := aScan( oAponta:aTabCalend , { |x| x[CALEND_POS_DATA_APO] == oAponta:dDtPesq .and. x[CALEND_POS_TIPO_MARC] == "1E" } ) ) > 0 ) )
			oAponta:nDiaFim := Val( oAponta:aTabCalend[ oAponta:nPosAux , CALEND_POS_ORDEM ] )
			Exit
		Else
			IF !( oAponta:lApontaOk := !( ( --oAponta:dDtPesq ) < dIni ) )
				aAdd(aLogFile, STR0003 ) // '- Nao Foi Encontrado o Periodo no Calendario de Marcacoes. Acerte a Data Base do Sistema'
				Break
			EndIF
		EndIF
	End While

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem os abonos Para o Periodo								  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:GetAbonosPer( @aAbonosPer , cFilSRA , cMatSRA )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa a tabela de Autorizacao de HE					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aFaixasHe	:= {}
	oAponta:lfTabHeAut	:= .T.

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa a tabela de Pre-abonos para o Funcionario		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aPreAbo		:= {}
	oAponta:lfTabPreAbo	:= .T.

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reinicializa as Statics em ToScheduleOverTime()			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	RstToScheduleOverTime()

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reinicializa a Nona a Cada Apontaento          			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:aNona		:= {}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicializa nPosCalend a Cada Apontamento          			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:nPosCalend	:= 0

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Reinicializa a Nona a Cada Apontaento          			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:lTransfEmp:= PonSitPer( cFilSRA , cMatSRA , oAponta:dPerIni , oAponta:dUltDia, NIL, @oAponta:aTransf )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Guarda o valor padrão do lPaAjustEJ para ser restaurado	  ³
	³após o processamento de cada apontamento          			  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	lAntAjusEJ := oAponta:lPaAjustEJ
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Processa o Apontamento de Acordo com o Numero de Dias		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:nCountOrd := ( oAponta:nDiaIni - 1 )
	While ( ( ++oAponta:nCountOrd ) <=  oAponta:nDiaFim )

		If oAponta:nHrInterJd > 0
		    oAponta:lRF0ChkTable := .T.
		    lRF0ChkTable		 := .T.

		    oAponta:apreabodia   := Nil
		    oAponta:apreabo      := Nil
		    oAponta:apreabodia   := {}
		    oAponta:apreabo      := {}
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Guarda a Ordem da Tabela									  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:GetSetOrdem()

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega informacoes para a Data no oAponta::aChkTolArr	  	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:AddDtChkArr()

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Posiciona no Calendario de Marcacoes de Acordo com a Ordem	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( ( oAponta:nPosCalend := aScan( oAponta:aTabCalend , { |x| x[ CALEND_POS_ORDEM ] == oAponta:cOrdem } , ++oAponta:nPosCalend ) ) > 0 )

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Carrega Informacoes da Regra de Apontamento                 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

			IF !( oAponta:ChkRegra( cFilSRA , cMatSRA ) )
				IF ( lStop )
					HELP( " " , 1 , "REGRANCAD" , , oAponta:cRegra , 5 , 0 )
				EndIF
				aAdd(aLogFile, STR0005)							// "- Codigo da regra de apontamento informado no cadastro"
				aAdd(aLogFile, STR0006)							// "  do funcionario, nao foi localizada no cadastro de regras"
				aAdd(aLogFile, STR0007+" "+cFilSRA+"/"+cMatSRA)	// "  Filial/Matricula"
				aAdd(aLogFile, STR0008+" "+oAponta:cRegra)		// "  Conteudo: "
				Break
			EndIF
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Se teve alteração no conteúdo da varável lPaAjustEJ         ³
			³ altero o lAntAjusEJ para receber seu novo valor informado   ³
			³ na regra a ser processada									  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If lAntAjusEJ <> oAponta:lPaAjustEJ
				lAntAjusEJ := oAponta:lPaAjustEJ
			EndIf
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Guarda a Data do Apontamento                                ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If oAponta:lApoSaida
				oAponta:dData := oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_DATA_APO ]
			Else
				oAponta:dData := oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_DATA ] 
			EndIf
			
			If lPonFerHe
				If(Valtype(lPFerHeVal := ExecBlock( "PONFERHE", .F.,.F.,{aClone(oAponta:aTabCalend),oAponta:nPosCalend,lApHeDtm} ))== "L")
					lApHeDtm := lPFerHeVal
				EndIf
			EndIf
			
			// Seta o Turno Atual
			oAponta:GetSetTnoC()
			
			// Marcação anterior a Admissão ou Marcação posterior a Demissão
			IF !oAponta:ChkAdmDem(cFilSRA , cMatSRA,;
													 If ( !Empty( oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_INI_AFAST ] ) .or. !Empty( oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_FIM_AFAST ] ) ,;
														 	( { 	{	oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_INI_AFAST ]	,;
														   	  			oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_FIM_AFAST ]	,;
														   				oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_TIP_AFAST ]	,;
														   				oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_R8ID	  ]	;
													   		  	 	};
													   		  };
													  		),;
													  		{};
													  	);
								 )
				Loop
			EndIF

		Else

	        /*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Vai para o Proximo dia de Apontamento                       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aAdd( aLogFile , STR0016 + oAponta:cOrdem + STR0017 + Dtoc( oAponta:dData ) + STR0018 ) //"- Nao Foi Encontrada a Ordem:"###"- , para a data: "###"no calendario de marcacoes"
			oAponta:dData++
			oAponta:lAtestMed := .F.
			Loop
		
		EndIF
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Obtem os Pre-Abonos										  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:InitPreAbo( cFilSRA , cMatSRA )
		
		// Busca a CCT vinculada a marcação
		nPosMarc := aScan( aMarcacoes, { |x| x[3] == oAponta:cOrdem }, oAponta:nPosOrdMarc )
		lRestHE := .F.
		If nPosMarc > 0 .And. Len(aMarcacoes[nPosMarc]) >= 40 .And. aMarcacoes[nPosMarc][AMARC_CODCCT] != NIL
			cFilCCT := aMarcacoes[nPosMarc][AMARC_FILCCT]
			cCodCCT := aMarcacoes[nPosMarc][AMARC_CODCCT]
			If !(cFilCCT + cCodCCT == cLastCCT)
				cLastCCT := cFilCCT + cCodCCT
				lRestHE := .T.
			EndIf
		EndIf
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica Tabela de Arredondamentos e de Tipos de Horas Extras³
		³Apenas quando Houver Mudanca de Filial ou Troca de Turno     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If oAponta:lModFil .Or. !oAponta:FilTnoCompare() .Or. lRestHE
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica se o Turno de Trabalho do funcion rio ‚ v lido.	  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( oAponta:lApontaOk := oAponta:Sr6GetSetCpos() )
				IF ( lStop )
					HELP( " " , 1 , "NOTNOEXIST" , , oAponta:cTnoCalend , 5 , 0 )
				EndIF
				aAdd(aLogFile, STR0001)							// "- Codigo do Turno de Trabalho informado no cadastro"
				aAdd(aLogFile, STR0002)							// "  do funcionario, nao foi localizada no cadastro de Turnos (SR6)"
				aAdd(aLogFile, STR0007+" "+cFilSRA+"/"+cMatSRA)	// "  Filial/Matricula"
				aAdd(aLogFile, STR0008+" "+oAponta:cTnoCalend)	// "  Conteudo: "
				Break
			EndIF
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Carrega os Arredondamentos de Acordo com o Turno do Calend.  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:GetTabArred( cFilSRA, .T. )
			
			// Carrega os Tipos de H.E de Acordo com o Turno do Calendario
			If lRestHE 
				RstGetTabExtra()
			EndIf
			
			IF !( oAponta:lApontaOk := oAponta:GetTabExtra( cFilSRA, lStop, lMvAcmHExt,, cFilCCT, cCodCCT) )
				IF ( oAponta:nErrorNumber == 1 )
				   aAdd(aLogFile, STR0011) // "- Nao foram encontrados os tipos de horas extras para a"
				   aAdd(aLogFile, STR0012+" "+cFilSRA+" "+STR0013+" "+oAponta:cTnoCalend) // "  Filial: "###"Turno: "
				ElseIF ( oAponta:nErrorNumber == 2 )
				   aAdd(aLogFile, STR0014) // "- Nao foram encontrados os tipos de horas extras para a"
				   aAdd(aLogFile, STR0012+" "+cFilSRA+" "+STR0013+" "+oAponta:cTnoCalend) // "  Filial: "###"Turno: "
				EndIF
				Break
			EndIF
		EndIF
		
		If lPnmTabHe
			If( ValType( aRetPe := ExecBlock( "PNMTABHE", .F., .F., {.F., oAponta:aTabExtra} ) ) == "A" )
				oAponta:aTabExtra := aClone(aRetPe)
			EndIf
		EndIf
		
        /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Marca‡„o dentro de intervalo de Afastamento.                ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !( oAponta:ChkApoAfas() )
			If oAponta:dData <= oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_DATA ] 
				oAponta:dData++
			EndIf
			Loop
		EndIF
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Passou Pelo Apontamento									  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:lApontaOk := .T.

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Obtem os abonos informados para a data apontada			  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:GetAbonos()

	    /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicializa aHrTrab                     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:aHrtrab := {}

	    /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicializa aHorasTot                   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:aHorasTot := {}

	    /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicializa o contador de Jornadas      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:nTotMarcTab := 0

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicializa as posicoes da matriz de apontamento como numerica³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:ZeraApo()
		oAponta:ZeraApoHr()
		nCredInterJ         := 0
		nIntPriEntradPadrao := 0

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carregar Configuracoes do Horario Noturno					  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:GetCfgNot(.T.)
				
		__lTolHrNReal 	:= If(ValType(oAponta:nTolHrNr) == "N" .and. (oAponta:nTolHrNr > 0 .Or. oAponta:nTolAtra > 0 .Or. oAponta:nTolSaia > 0), .T., .F.)

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se a apuracao das Horas Extras for de Acordo com a Data    da³
		³Marcacao zera os Horarios da Tabela para Dias Nao Trabalhados³
		³BOPS 000015491												  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( lApHeDtm )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Apenas se o Intervalo em dias Nao Trabalhados nao for pago   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

			oAponta:ZeraHrTab( lApHeDtm )
		EndIF

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Obter o tipo do dia a ser apontado							  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:cTipoDia	:= oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_TIPO_DIA ]
		If oAponta:nPosCalend > 1
			oAponta:cTipoDiaAt	:= oAponta:aTabCalend[ oAponta:nPosCalend-1 , CALEND_POS_TIPO_DIA ]
		EndIf
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Carrega o tipo de hora extra a ser apontada para o dia³
		³conforme tabela de horario padrao.					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:cCodHe := fTpoExtra( oAponta:dData , aClone( oAponta:aTabCalend ) , oAponta:nPosCalend )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se devem ser apontados os Adicionais Especiais	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		//-- Dia eh domingo e paga-se Prima Dominical
		oAponta:lPrimDom := ( Dow(oAponta:dData) == 1 .and. oAponta:lPaPrimDom )
		//-- Dia eh DSR ( ou se eh Feriado mas originalmente era DSR )e paga-se Descanso Laborado
		oAponta:lDescLab := ( ;
								( 	oAponta:cTipoDia $ "D" .or. ;
									(	oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_TIPO_ORIG_DIA ] $ "D" .and.  ;
										oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_FERIADO ];
									);
								);
								 .and. oAponta:lPaDescLab ;
							 )
		//-- Dia eh Feriado ou
		//-- Dia eh Feriado conforme calendario de Feriados e empregado nao trabalha em feriado
		//-- e paga-se Festivo Laborado
		oAponta:lFestLab :=( ;
								( 	oAponta:cTipoDia $ "F" .or. ;
								 	oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_FERIADO ] ;
								);
								  .and. oAponta:lPaFestLab ;
							)

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicializa lApontaTpTrab									  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:lApontaTpTrab := .F.

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicializa os Flags de Apontamento							  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:SetaProcessad( .T. )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicio do Apontamento de Acordo com o Numero de Jornadas  pos³
		³siveis														  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:nInicJornada := 0
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Carrega as Tolerancias e Arredondamentos           		  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		    oAponta:PutTolArrChkArr()

			While ( ( ++oAponta:nInicJornada ) <= oAponta:nJornadasAp )

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Inicializa aHoras para Apontamento    						  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:aHoras	:= {}
	            lAddHorasTotais	:= .F.
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Monta a matriz de apontamento.								  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF ( oAponta:nMarcTab := fMtaTabAp(;
															lMarcImpar						,;	//01 -> Tratamento de Marcacoes Impares na Montagem de aHoras
															( oAponta:nHrInterJd > 0 )		,;	//02 -> Apontar Extras Inter Jornada
															lMarcIgual	 					 ;	//03 -> Tratamento para Maracoes Duplicadas
												   		);
					) < 2

				    /*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Nao Passou Pelo Apontamento            ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:FlgChkArr( .F. )
					Loop

				Else

				    /*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Passou Pelo Apontamento                ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:FlgChkArr( .T. )

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
 					³Inicializa a Variavel nProxJornada							  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:InitProcJorn()

				    /*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Acumula o Contador de Jornadas         ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:nTotMarcTab += oAponta:nMarcTab

				    /*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Grava Flag de Marcacao ja Apontada     ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF ( ( oAponta:nPosOrdMarc := aScan( aMarcacoes , { |x| x[AMARC_ORDEM] == oAponta:cOrdem } , oAponta:nPosOrdMarc ) ) > 0 )
						For nW := oAponta:nPosOrdMarc To oAponta:nLenMarc
		    				/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Flega a Marcacao como Apontada para   a³
							³Ordem									³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							IF ( aMarcacoes[ nW , AMARC_ORDEM ] == oAponta:cOrdem )
								aMarcacoes[ nW , AMARC_APONTA ] := "S" //Marcacao Apontada
								aMarcacoes[ nW , AMARC_DATAAPO ]:= oAponta:dData //Data de apontamento
							Else
								Exit //Aqui em nW
							EndIF
						Next nW
		    			/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Salva o Inicio da Proxima Ordem        ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						oAponta:nPosOrdMarc := nW
					Else
		    			/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Neste caso nPosOrdMarc eh sempre 1		³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						++oAponta:nPosOrdMarc
					EndIF

				EndIF

   							/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Obtem o numero de elementos da matriz de apontamentos  ( Tabe³
				³la + Marcacoes )											  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:nLenHoras	:= Len( oAponta:aHoras )
				oAponta:nElem	    := IF( oAponta:nLenHoras %2 >= 1, oAponta:nLenHoras - 1 , oAponta:nLenHoras )

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica as Horas de Intervalo para a Jornada em Questao	  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:nIntTab := 0
				If oAponta:lHnotTbI
					aEval( oAponta:aApo[oaApo:HrIntNotTb] , { |x| oAponta:nIntTab := SomaHoras( oAponta:nIntTab , x ) } )
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					|Se nao existir intervalo noturno procura por intervalo diurno. |
					|Essa condicao ocorrera somente no caso de turno com sequencias |
					|diurna(s) e noturna(s) e o campo R6_HNOTTBI = 'SIM'.           |
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					If oAponta:nIntTab == 0
						aEval( oAponta:aApo[oaApo:HrIntTbNNt] , { |x| oAponta:nIntTab := SomaHoras( oAponta:nIntTab , x ) } )
					EndIf
				Else
					aEval( oAponta:aApo[oaApo:HrIntTbNNt] , { |x| oAponta:nIntTab := SomaHoras( oAponta:nIntTab , x ) } )
				EndIf

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica Se Paga Intervalo em Dias Nao Trabalhados, Tem Inter³
				³valo na Tabela e eh um dia Nao Trabalhado.					  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:lIntNtrab:= (;
											( oAponta:cTipoDia != "S" );
											.and.;
											( oAponta:nIntTab > 0 );
											.and.;
											( oAponta:cPgIntNTrb == "S");
											.and.;
											!( oAponta:lMovelFree );
									)

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Se dia Nao Trab ,Horas de Intervalo na Tabela e 			  ³
				³Nao Movel Livre, Forca a Regra como Horario Movel			  ³
			   	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF (( oAponta:lIntNtrab ) .And. ! ( oAponta:lMovelFree ))
					oAponta:cHrMovel 		:= "S"
					oAponta:cInMovel		:= "S"
					oAponta:nAntMove		:= 15
					oAponta:nPosMove		:= 15
					oAponta:nMovAint		:= 0
					oAponta:nMovPint		:= 0
					oAponta:lIntMovFree		:= .T.
					oAponta:cAjustIn 		:= "S"
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Reinicializo a Regra Anterior Para que os dados da Regra  se³
					³ jam Recarregados para a Proxima Data. As informacoes  Altera³
					³ das acima soh servem para o dia atual.					  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:FilRegLstInit()
				EndIF
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Reve se o Intervalo Movel do Funcionario eh Livre      	  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:lIntMovFree	:= ( ( oAponta:cInMovel == "S" ) .and. ( ( oAponta:nMovAint + oAponta:nMovPint ) == 0 ) )
				
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Verifica se deve apontar horas normais em dias de atestado	  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				If oAponta:lAtestMed .And. !oAponta:lMovelFree .And. (oAponta:lAponHrAfa .Or. oAponta:lAponHeAfa)
					If oAponta:lAponHeAfa
						If oAponta:nPosCalend > 0
							If oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_FERIADO]
								oAponta:cTipoDia := "F"
							Else
								oAponta:cTipoDia := oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_TIPO_ORIG_DIA]
							EndIf
						Else
							oAponta:cTipoDia := "S"
						EndIf
					ElseIf oAponta:lAponHrAfa .And. !(oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_TIPO_ORIG_DIA] $ "C*D" .Or. oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_FERIADO])
						oAponta:cTipoDia := "S"
					EndIf
				EndIf

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Quando o dia for normal ou se Existir Horario na Tabela  para³
				³dias nao trabalhados										  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF ( oAponta:lApontaTpTrab := (;
													( oAponta:cTipoDia == "S" ) .or.;
													(;
														( oAponta:cTipoDia != "S" ) .and.;
														( oAponta:nIntTab > 0 ) .and.;
														( oAponta:cPgIntNTrb == "S" );
						 							);
							 				 	);
					)

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Total  Horas Trabalhadas do Dia sobre a Tabela				  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF ( ( oAponta:nPosAux := aScan( oAponta:aHoras , { |y| y[ 3 ] == "1E" } ) ) > 0 )
						oAponta:nTHrTab := oAponta:aHoras[ oAponta:nPosAux , 04 ]
					EndIF

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Carregar Configuracoes do Horario Noturno					  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:GetCfgNot(.F.)

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Inicio do Processo de Apontamento das Marcacoes³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³ Nao Processa Esse Apontamento Quando Horario Mo³
						³ vel Livre										 ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						IF !( oAponta:lMovelFree ) //.And. !( oAponta:lIntNtrab )

							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³nStartnN aqui eh sempre 1                     			      ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							oAponta:nStartnN := 1

							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Define o Flag para Inicio das Jornadas      				  ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							oAponta:cInicJornada := oAponta:aSiglaMarc[ oAponta:nProxJornada ]

							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Processa de Acordo com os Flags de Marcacoes				  ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							oAponta:nIndice := ( oAponta:nProxJornada - 1 )
							While ( ( ++oAponta:nIndice ) <= oAponta:nTotMarcTab )

								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³Carrega os Flags conforme aTipoMarc (1E,1S,2E,2S...)		  ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
								IF ( oAponta:aSiglaMarc[ oAponta:nIndice ] == oAponta:cInicJornada ) 
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lEntraEJ"+oAponta:cTipoMarc ) )
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Se ja passou pelo Tipo de Apontamento em Questao³
									³Procura o Proximo Tipo							 ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
										Loop //Aqui em oAponta:nIndice
									EndIF
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Aponta Todas as Ocorrencias para Entrada de  Jor³
									³nada											 ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									ApontaEJ()
								ElseIF ( oAponta:nIndice == oAponta:nTotMarcTab ) 
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lSaidaSJ"+oAponta:cTipoMarc ) )
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Aponta Todas as Ocorrencias para Saida de  Jorna³
									³da  											 ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									ApontaSJ()
								ElseIF ( SubStr( oAponta:aSiglaMarc[ oAponta:nIndice ] , -1 ) == "S" ) 
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lSaidaSI"+oAponta:cTipoMarc ) )
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Se ja passou pelo Tipo de Apontamento em Questao³
									³Procura o Proximo Tipo							 ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
										Loop //Aqui em oAponta:nIndice
									EndIF
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Aponta Todas as Ocorrencias para Saida de  Inter³
									³valo											 ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									ApontaSI()
								ElseIF ( SubStr( oAponta:aSiglaMarc[ oAponta:nIndice ] , -1 ) == "E" ) 
									oAponta:cTipoMarc	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
									oAponta:nProcessad	:= oAponta:PosaProcessad( ( "lEntraEI"+oAponta:cTipoMarc ) )
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Se ja passou pelo Tipo de Apontamento em Questao³
									³Procura o Proximo Tipo							 ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
										Loop //Aqui em oAponta:nIndice
									EndIF
									/*/
									ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									³Aponta Todas as Ocorrencias para Entrada de   In³
									³tervalo										 ³
									ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
									ApontaEI()
								EndIF

							End While	//oAponta:nIndice

						EndIF
						
						// Se foi gerado a Sumula para um intervalo e existem HE de intervalo em outros intervalos,
						// devo gerar a sumula 437 para todos que possuem HE e não foram gerados.
						If lGeraSuml .And. !Empty(aIntMins)
							For nI:=1 To Len(aIntMins)
								If aIntMins[nI,2] > aIntMins[nI,3]
									nTotHr := SubHoras(aIntMins[nI,2],aIntMins[nI,3])
								Else
									nTotHr := SubHoras(aIntMins[nI,3],aIntMins[nI,2])
								EndIf
								oAponta:aApo[oaApo:HeIntNorAu, aIntMins[nI,4]] := nTotHr
							Next
						EndIf
						
						aIntMins := {} // Reseto a variável para ela ser utilizada no próximo dia de apontamento.
						lGeraSuml := .F. // Zero a sumula 437 para o próximo dia
				        lAddHorasTotais:= .T.
				Else	//Para dias Nao Trabalhados
						lAddHorasTotais:= .T.
				EndIF

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Validação para verificar se houve erros     	 ³ 
				³na execução da função fAdnDiurno 				 ³ 
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				If oAponta:lErroApon
					aAdd(aLogFile, STR0019) 						// "- Erro no apontamento. Verificar a tabela de horario padrao do funcionario: "
					aAdd(aLogFile, STR0007+" "+cFilSRA+"/"+cMatSRA)	// "  Filial/Matricula"
					aAdd(aLogFile, STR0020 + dToC(oAponta:dData)) 	// "  Data: "
					oAponta:lErroApon := .F.
					Break				        
				EndIf
		
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Restauro o valor padrão do lPaAjustEJ, para	 ³ 
				³que o próximo dia a ser apontado, faça o		 ³ 
				³processo correto.								 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/				
				oAponta:lPaAjustEJ := lAntAjusEJ

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Final do Processo de Apontamento das Marcacoes ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Recalcula Horas Extras Para Dias Nao Trabalhados        ³
				³ com Intervalo na Tabela.							      ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF (oAponta:lIntNtrab) .and. ( !oAponta:lMovelFree )
					aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .F. } )
					
					For nW := 1 To oAponta:nTotMarcTab

						oAponta:aApo[  oaApo:HeNormal	, nW ] := 0
						oAponta:aApo[  oaApo:HeNormalFx	, nW ] := 0
						oAponta:aApo[  oaApo:HeIntNorAu	, nW ] := 0
						oAponta:aApo[  oaApo:HeIntNorFx	, nW ] := 0
					
						oAponta:aApo[  oaApo:HeIntNotAu	, nW ] := 0
						oAponta:aApo[  oaApo:HeIntNotFx	, nW ] := 0
						oAponta:aApo[  oaApo:HeNotAutor , nW ] := 0
						oAponta:aApo[  oaApo:HeNoturnFx , nW ] := 0
						oAponta:aApo[  oaApo:AdicHeNotA , nW ] := 0
					
					Next nW
										
					fExtrasNtrab()

				EndIF

				If lAddHorasTotais
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Armazena o conteudo de aHoras em aHorasTot   de³
					³ Jornadas Apontadas							 ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					For nX := 1 To Len( oAponta:aHoras )
						aAdd( oAponta:aHorasTot , aClone( oAponta:aHoras[ nX ] ) )
					Next nX
				Endif

			End While //( ( ++oAponta:nInicJornada ) <= oAponta:nJornadasAp )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Final  do Apontamento de Acordo com o Numero de Jornadas  pos³
		³siveis														  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Se Passou Pelo Apontamento ( Inicio )			 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( aScan( oAponta:aChkTolArr[ oAponta:nChkTolArr , 02 ] , { |x| x } ) > 0 )

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Carrega aHoras com o conteudo de Todas as Jorna³
				³ das											 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:aHoras := aClone( oAponta:aHorasTot )

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Quando nao For Horario Movel Livre							  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF !( oAponta:lMovelFree )

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Quando o dia for normal ou se Existir Horario na Tabela  para³
					³dias nao trabalhados										  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF ( oAponta:lApontaTpTrab )

						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Aponta as Horas Trabalhadas e Faltas Integrais    ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						ApontaTrbNoMvFree()
						
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Aponta a Nona Hora                                ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						oAponta:nNonaHor 	:= 0
						oAponta:nNonaHorAut	:= 0
						IF ( oAponta:nPosAux := aScan( oAponta:aTabCalend , { |x| x[1] == oAponta:dData .and. x[CALEND_POS_TIPO_MARC] == "1E" .and. x[CALEND_POS_PG_NONA_HORA] == "S" } ) ) > 0
							fHrsNona()
							IF ( ( oAponta:cTipoDia == "S" ) .or. ( ( oAponta:cTipoDia != "S" ) .and. ( oAponta:nIntTab > 0 ) .and. ( oAponta:cPgIntNTrb == "S" ) ) )
								//-- Se o Apontamento for Pela data da Ocorrencia, deduz Nona Hora so no Proximo Dia em fHrsExDia
								IF ( ( lApHeDtM ) .and. ( ( oAponta:nPosAux := aScan( oAponta:aHoras , { |x| x[ 3 ] == "M" .and. !x[6] } ) ) > 0 ) )
									oAponta:nNonaHor	:= 0
									oAponta:nNonaHorAut	:= 0
								EndIF
							EndIF
						EndIF

					ElseIF !( oAponta:cTipoDia == "S" ) //-- Aponta horas extras para marca‡”es em dias n„o trabalhados
						If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Aponta Horas Extras                               ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							ApontaHeNoMvFree()
						EndIf
					EndIF

				ElseIF ( oAponta:lMovelFree ) // -- Apura Para Horario Movel Livre

					IF ( oAponta:cTipoDia == "S" )	//Dias Trabalhados

						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Aponta as Horas Trabalhadas e Faltas Integrais    ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						ApontaTrbMvFree()

                    Else // -- Apura Hora Extra Para Horario Movel Livre
						If !oAponta:lAtestMed .Or. fGeraApoAf(0)

							If oAponta:lAtestMed .And. oAponta:lAponHrAfa .And. oAponta:lAponHeAfa
								If fGeraApoAf(3)
									If oAponta:cTipoDia == "S"
										ApontaTrbMvFree()
									Else
										//-- Recalcula as Horas Extras
										fHeMovel(	.T.	,;	//01 -> Ira considerar Horas Trabalhadas da Tabela
													.T.	 ;	//02 -> Considerar o Dia como Sendo Feriado para Nao Carregar as Horas da Tabela
												)
									EndIf
								EndIf
							ElseIf oAponta:lAtestMed .And. !oAponta:lAponHrAfa .And. oAponta:lAponHeAfa
								If fGeraApoAf(2)
									//-- Recalcula as Horas Extras
									fHeMovel(	.T.	,;	//01 -> Ira considerar Horas Trabalhadas da Tabela
												.F.	 ;	//02 -> Considerar o Dia como Sendo Feriado para Nao Carregar as Horas da Tabela
											)
								EndIf
							ElseIf oAponta:lAtestMed .And. oAponta:lAponHrAfa .And. !oAponta:lAponHeAfa
								If fGeraApoAf(1)
									ApontaTrbMvFree()
								EndIf
							ElseIf !oAponta:lAtestMed
								//-- Recalcula as Horas Extras
								fHeMovel(	.T.	,;	//01 -> Ira considerar Horas Trabalhadas da Tabela
											.T.	 ;	//02 -> Considerar o Dia como Sendo Feriado para Nao Carregar as Horas da Tabela
										)
							EndIf
						EndIf
					EndIF

				EndIF

	            /*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Apuracao do Pagamento do DSR						   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:nHrsDsr	:= 0
				IF ( oAponta:cTipoDia $ "D*F" )
					//-- Aponta Pagamento de D.S.R.
					IF ( oAponta:cDsr == "S" )
						//-- Se funcionario estiver de Ferias nao calcula o DSR
						IF ( oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_APON_FERIAS ] )
							oAponta:nHrsDsr := 0
							If lHorista .And. lDSRHorista
								aAdd( aDSRFerias, {oAponta:dData} )
							EndIf
						Else
							oAponta:nHrsDsr := HrsSem2OneDsr( SRA->RA_HRSEMAN )
						EndIf
					EndIF
				EndIF

	            /*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Inicio da Geracao dos Eventos Apontados³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Gerar pagamento de DSR (002A)			³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF ( oAponta:nHrsDsr > 0 )

						IF ( ( nPosCalCC := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == "1E" .and. x[CALEND_POS_DATA] == oAponta:dData } ) ) > 0 ) ;
							.AND. ( !Empty(oAponta:aTabCalend[ nPosCalCC , CALEND_POS_CC ]) )
							cCcTrf := oAponta:aTabCalend[ nPosCalCC , CALEND_POS_CC ] //CC da Excecao
						Else
							cCcTrf := SRA->RA_CC
							If lApDsrCC
								//Verifica se houve alteracao de centro de custos por transferencia no periodo
								If Len( oAponta:aTransf ) > 0
									For nX := 1 To Len( oAponta:aTransf )
										If ( ( nPos := aScan( oAponta:aTransf, { |x| oAponta:dData <= x[7] } ) ) > 0 )
											If	oAponta:aTransf[nPos, 3] # SRA->RA_CC
												cCcTrf := oAponta:aTransf[nPos, 3]
											EndIf
										EndIf
									Next nX
								EndIf
							EndIf
						EndIf

						fGeraRes(	oAponta:aResult			,;	//01 -> Array com os Resultados do Dia
									oAponta:dData			,;	//02 -> Data da Geracao
									oAponta:nHrsDsr			,;	//03 -> Numero de Horas Resultantes
									aEvesIds[ 002 , 02 ]	,;	//04 -> Codigo do Evento
									cCcTrf					,;	//05 -> Centro de Custo a ser Gravado
									NIL						,; //06 -> Tipo de Marcacao
									.F.						,; //07 -> True para Acumular as Horas
									NIL						,; //08 -> Periodo de Apuracao
									NIL						,; //09 -> Tolerancia
									"D"						,; //10 -> Tipo de Arredondamento a Ser Utilizado
									.T.			 			,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
									/*cFuncao	*/			,; //12 -> Funcao
									/*cDepto	*/			,; //13 -> Depto para gravacao
									/*cPosto	*/			,; //14 -> Posto para gravacao
									/*cProcesso	*/			,; //15 -> Periodo para Gravacao
									/*cRoteiro	*/			,; //16 -> Processo para Gravacao
									/*cPerApo	*/			,; //17 -> Periodo para Gravacao
									/*cNumPagto	*/ 			,; //18 -> NumPagto para Gravacao
									oAponta:cTnoCalend	    ,; //19 -> Turno de Trabalho
									oAponta:cSeqTno			;  //20 -> Semana/Sequencia do Turno
									)
					EndIF

					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Avalia Apontamento 					³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					AvalAponta()
					
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Final da Geracao dos Eventos Apontado    ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

				// Aponta Hora Extra Inter-Jornada
				IF ( ( lApHeDtm ) .OR. ( oAponta:nHrInterJd > 0 ) )  .and. ( oAponta:nCountOrd == 1 )
					
					// Salva aHoras e aHeAutoDia do dia atual
					aLastHoras := aClone(oAponta:aHoras)
					aLastAutoDia := aClone( oAponta:aHeAutoDia )
					BKPaMarClone := aClone(oAponta:aMarClone)
					BKPaTabClone := aClone(oAponta:aTabClone)
					
					// Carrega as marcações do dia aneterior no aHoras
					fHrsIntAnt( cFilSRA, cMatSRA, oAponta:dData, lExecutou, .T.)
					
					// Copia as marcações do dia anterior para o aHorasAnt e restaura o conteúdo original do aHoras e aHeAutoDia
					oAponta:aHeAutoAnt := aClone( oAponta:aHeAutoDia )
					oAponta:aHoras := aClone( aLastHoras )
					oAponta:aHeAutoDia := aClone( aLastAutoDia )
					oAponta:aMarClone := aClone(BKPaMarClone)
					oAponta:aTabClone := aClone(BKPaTabClone)
					
                EndIF
				
				//Aponta Hora Extra Inter-Jornada
				If ( oAponta:nHrInterJd > 0 )
					
					lGeraInter	:= .T.
					//--Se o apontamento for executado atraves da rotina de leitura/apontamento E os parametros de data: De/ate pertencerem ao mesmo dia
					If ( (IsInCallStack('PONM010')) .AND. (dPerDe == dPerAte) )
						
						//Entao, procura no calendario a ordem referente.
						nPosX := Ascan(oAponta:aTabCalend , {|X| X[CALEND_POS_DATA_APO] == oAponta:aHoras[1,1]})
						
						lNovaOrdem := .F.
						
						If ( nPosX > 0 )
							
							/*Se encontrar, verifica se ha outra ordem referente ao dia do apontamento. Com isto, validamos o seguinte cenario:
								Funcionario iniciou o turno as 16:00 (dia 01) e saiu a 01(dia 02). Se houver entrada as 11:00(dia 02), a variavel
								lNovaOrdem tera seu conteudo alterado para .T. e, a rotina fHrsInter sera executada para geracao do respectivo
								evento de hora extra inter-jornada.
							*/
							
							Do While ( !(lNovaOrdem) .AND.;
										(nPosX <= Len(oAponta:aTabCalend)) .AND.;
										(oAponta:aTabCalend[nPosX , CALEND_POS_DATA_APO] == oAponta:aHoras[1,1] ) )
								
								If !(oAponta:aTabCalend[nPosX , CALEND_POS_ORDEM] == oAponta:cOrdem)
									lNovaOrdem	:= .T.
								Else
									nPosX++
								EndIf
								
							EndDo
							
						EndIf
						
						lGeraInter	:= ( lNovaOrdem )
						
					EndIf
					
					If ( lGeraInter )
						
						//-- Aponta Hora Extra Inter-Jornada --//
						oAponta:nHeInterA	:= 0
						oAponta:nHeInterN	:= 0
						//Apura as Horas Extras Inter-Jornada
						fHrsInter(	cFilSRA )
						//Gera Hora Extra Inter-Jornada Autorizada
						fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
									oAponta:dDataGravar								,;	//02 -> Data da Geracao
									oAponta:nHeInterA								,;	//03 -> Numero de Horas Resultantes
									aEvesIds[ 029 , 02 ]							,;	//04 -> Codigo do Evento
									oAponta:cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
									oAponta:cTipoMarc								,;	//06 -> Tipo de Marcacao
									.T.												,;	//07 -> True para Acumular as Horas
									""												,;	//08 -> Periodo de Apuracao
									0   											,;	//09 -> Tolerancia
									"H"							     				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
									/*lSubstitui*/									,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
									/*cFuncao	*/									,; //12 -> Funcao
									/*cDepto	*/									,; //13 -> Depto para gravacao
									/*cPosto	*/									,; //14 -> Posto para gravacao
									/*cProcesso	*/									,; //15 -> Periodo para Gravacao
									/*cRoteiro	*/									,; //16 -> Processo para Gravacao
									/*cPerApo	*/									,; //17 -> Periodo para Gravacao
									/*cNumPagto	*/ 									,; //18 -> NumPagto para Gravacao
									oAponta:cTnoCalend							    ,; //19 -> Turno de Trabalho
									oAponta:cSeqTno									;  //20 -> Semana/Sequencia do Turno
								)
						//Gera Hora Extra Inter-Jornada Nao Autorizada
						fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
									oAponta:dDataGravar								,;	//02 -> Data da Geracao
									oAponta:nHeInterN								,;	//03 -> Numero de Horas Resultantes
									aEvesIds[ 038 , 02 ]							,;	//04 -> Codigo do Evento
									oAponta:cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
									oAponta:cTipoMarc								,;	//06 -> Tipo de Marcacao
									.T.												,;	//07 -> True para Acumular as Horas
									""												,;	//08 -> Periodo de Apuracao
									0   											,;	//09 -> Tolerancia
									"H"							     				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
									/*lSubstitui*/									,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
									/*cFuncao	*/									,; //12 -> Funcao
									/*cDepto	*/									,; //13 -> Depto para gravacao
									/*cPosto	*/									,; //14 -> Posto para gravacao
									/*cProcesso	*/									,; //15 -> Periodo para Gravacao
									/*cRoteiro	*/									,; //16 -> Processo para Gravacao
									/*cPerApo	*/									,; //17 -> Periodo para Gravacao
									/*cNumPagto	*/ 									,; //18 -> NumPagto para Gravacao
									oAponta:cTnoCalend							    ,; //19 -> Turno de Trabalho
									oAponta:cSeqTno									;  //20 -> Semana/Sequencia do Turno
								)
					EndIf
				EndIF

				If Len(aSobreAviso) > 0
					fGeraSobreAviso(aSobreAviso,aMarcacoes)
				EndIf
				
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Carregando os Apontamentos em aResult	  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				PutApontaRes( aEvesIds, nCredInterJ )	//01 -> Array com os Eventos que possuem Identificadores
				
				If cPaisLoc == "BRA" .And. SR6->(ColumnPos("R6_ABINTJ")) > 0 .And. !Empty(SR6->R6_ABINTJ) .And. oAponta:nHrInterJd > 0 .And. nCredInterJ > 0
					TratIntProAbo()//criação ficticia de preabono devido a intervalo inter jornadas
					Put2ApontaRes( aEvesIds )	//eventos que devem ser tratados após a criação ficticia de preabono devido a intervalo inter jornadas
				EndIf
				
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Aponta Horas Extras de Acordo com o Dia ( Proximo Dia )	  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF ( lApHeDtm )
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Nao Calcular Quando For Horario Movel Livre				  ³
					³ou quando o dia anterior for o ultimo dia do período anteiror³
					³pois as horas já foram calculadas no ultimo dia			  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					nPosDiaAnt := aScan(oAponta:aHorasAnt,{|x| x[3] == "M"})
					
					IF !oAponta:lMovelFree .And. nPosDiaAnt > 0 .And. oAponta:aHorasAnt[nPosDiaAnt,1] >= oAponta:dPerIni 
						fHrsExDia()
					EndIF
				EndIF
				
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Carrega o Tipo da Marcacao em aMarcacoes ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF !( oAponta:lMovelFree )
					oAponta:nLenHoras := Len( oAponta:aHoras )
					aTpMarc := aClone(oAponta:aSiglaMarc)

			        IF(oAponta:nLenHoras > oAponta:nSiglaMarc)
			        	For nW := oAponta:nSiglaMarc + 1 To oAponta:nLenHoras
			        		IF oAponta:aHoras[ nW , 03 ] == "M"
			        			aadd(aTpMarc,IIF((nW > 1 .AND. Mod(nW,2)=0 ), CValToChar(nW / 2) + "S", CValToChar((nW + 1) / 2) + "E"))
				        	EndIf
			        	Next nW
			        EndIf

			        If oAponta:lApoSaida
				        For nW := 1 To oAponta:nLenHoras
				        	IF ( oAponta:aHoras[ nW , 03 ] == "M" )
				        		IF (;
				        				oAponta:nPosAux := aScan(;
			        							   	  				aMarcacoes , { |x|;
			        								  							 	x[ AMARC_DATAAPO ] == oAponta:aHoras[ nW , 01 ];
			        								  							 	.and.;
			        								  							  	x[ AMARC_HORA ] == oAponta:aHoras[ nW , 02 ];
						        					  							};
				    			    						 		);
				        			) > 0
				        			aMarcacoes[ oAponta:nPosAux , AMARC_TIPOMARC ] := Padr( aTpMarc[ ++nTpMarc ] , GetSx3Cache( "P8_TPMARCA" , "X3_TAMANHO" ) )
				        		EndIF
				        	EndIF
				        Next nW
				      Else
				      	 For nW := 1 To oAponta:nLenHoras
				        	IF ( oAponta:aHoras[ nW , 03 ] == "M" )
				        		IF (;
				        				oAponta:nPosAux := aScan(;
			        							   	  				aMarcacoes , { |x|;
			        								  							 	x[ AMARC_DATA ] == oAponta:aHoras[ nW , 01 ];
			        								  							 	.and.;
			        								  							  	x[ AMARC_HORA ] == oAponta:aHoras[ nW , 02 ];
						        					  							};
				    			    						 		);
				        			) > 0
			        				aMarcacoes[ oAponta:nPosAux , AMARC_TIPOMARC ] := Padr(aTpMarc[ ++nTpMarc ] , GetSx3Cache( "P8_TPMARCA" , "X3_TAMANHO" ) )
				        		EndIF
				        	EndIF
				        Next nW
				      EndIf
				EndIf

		EndIF
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Se Passou Pelo Apontamento ( Fim )			 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

        /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Passar para Proximo Dia				³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nTpMarc := 0
		oAponta:dData++
		oAponta:lAtestMed := .F.
		
		// Aponta Hora Extra Inter-Jornada
		IF ( ( lApHeDtm ) .OR. ( oAponta:nHrInterJd > 0 ) )
			// Salva o Conteudo do aHoras do Dia Antertior
			If !(oAponta:nHrInterJd > 23.59 .And. aScan(oAponta:aHoras, {|x| x[3] == "M" }) == 0)
				oAponta:aHorasAnt	:= aClone( oAponta:aHoras )
			EndIf
		EndIF
		
		If oAponta:nCountOrd == oAponta:nDiaFim .And. lApHeDtm
			IF !( oAponta:lMovelFree )
				fHrsExDia()
			EndIF
		EndIf
		
	End While //( ( ++oAponta:nCountOrd ) <=  oAponta:nDiaFim )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se nao passou pelo Apontamento								  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( oAponta:lApontaOk )
		Break
	EndIF
	
    //-- Faz o apontamento de DSR para funcionarios horistas, com base nas horas normais trabalhadas
    If oAponta:cDsr == "S" .And. lHorista .And. (lDSRHorista .Or. lDSRTab)
		//-- Soma as horas normais trabalhadas
		aEval( oAponta:aResult, { |aResult| If( aResult[2] == aEvesIds[ 001 , 02 ] .Or. aResult[2] == aEvesIds[ 026 , 02 ], nHorasTrab := __TimeSum( nHorasTrab, aResult[3] ), NIL ) } )
		//-- Soma os dias uteis (trabalhado e compensado)
		aEval( aTabCalend, { |x| If(x[CALEND_POS_TIPO_MARC] == "1E" .And. x[CALEND_POS_TIPO_DIA] $ "S*C", nDiasUt++, NIL ) } )
		//Horas de um DSR
		nUmDSR := Int( nHorasTrab / nDiasUt )
		nUmDSR += ( ( nHorasTrab / nDiasUt - nUmDSR ) * 60 ) / 100
		//Substitui nos arrays
		If oAponta:lApoSaida
			For nCont := 1 To Len(oAponta:aResult)
				If lDSRTab .And. oAponta:aResult[nCont, 2] == aEvesIds[002, 02] .And. aScan( aDSRFerias, { |aDSRFerias| oAponta:aResult[nCont, 1] == aDSRFerias[1] } ) == 0
					dDataAux := oAponta:aResult[ nCont, CALEND_POS_DATA ]
					nPos := aScan(aTabCalend, { |x| x[CALEND_POS_DATA_APO] == dDataAux .And. x[CALEND_POS_TIPO_ORIG_DIA] == 'S'})
					IF nPos > 0 .and. oAponta:aTabCalend[ nPos, CALEND_POS_FERIADO ]
						aEval( aTabCalend, { |x| If( x[CALEND_POS_DATA_APO] == dDataAux, nHorasFer := __TimeSum( nHorasFer, x[CALEND_POS_HRS_TRABA] ), NIL ) } )
						oAponta:aResult[nCont, 3] := nHorasFer
						nHorasFer := 0
					ElseIf lDSRHorista
						oAponta:aResult[nCont, 3] := nUmDSR
					Endif
				ElseIf lDSRHorista .And. oAponta:aResult[nCont, 2] == aEvesIds[002, 02] .And. aScan( aDSRFerias, { |aDSRFerias| oAponta:aResult[nCont, 1] == aDSRFerias[1] } ) == 0
					oAponta:aResult[nCont, 3] := nUmDSR
				EndIf
			Next nCont
		Else
			For nCont := 1 To Len(oAponta:aResult)
				If lDSRTab  .And. oAponta:aResult[nCont, 2] == aEvesIds[002 , 02] .And. aScan( aDSRFerias, { |aDSRFerias| oAponta:aResult[nCont, 1] == aDSRFerias[1] } ) == 0
					dDataAux:= oAponta:aResult[ nCont	, CALEND_POS_DATA ]
					nPos:= aScan(aTabCalend,{ |x| x[CALEND_POS_DATA] == dDataAux .And. x[CALEND_POS_TIPO_ORIG_DIA] == 'S'})
					IF  nPos > 0 .and. oAponta:aTabCalend[ nPos, CALEND_POS_FERIADO ]
						aEval( aTabCalend, { |x| If( x[CALEND_POS_DATA] == dDataAux, nHorasFer := __TimeSum( nHorasFer, x[CALEND_POS_HRS_TRABA] ), NIL ) } )
						oAponta:aResult[nCont, 3] := nHorasFer
						nHorasFer := 0
					ElseIf lDSRHorista
						oAponta:aResult[nCont, 3] := nUmDSR
					Endif
				ElseIf lDSRHorista .And. oAponta:aResult[nCont, 2] == aEvesIds[002 , 02] .And. aScan( aDSRFerias, { |aDSRFerias| oAponta:aResult[nCont, 1] == aDSRFerias[1] } ) == 0
					oAponta:aResult[nCont, 3] := nUmDSR
				EndIf
			Next nCont
		EndIf
    EndIf

	/*ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³A verificacao da hora de interjornada neste trecho foi desabi-³
	³litada por nao funcionar corretamente. Sera substituida pela  ³
	³funcao fHrsIntAnt.                                            ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Ponto de Entrada antes de Gravar o aResult nos Resultados(SPC)³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lPonaPo4Block )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³O Ponto de Entrada PONAPO4 recebera como parametro o ParamIxb que eh um  Ar³
		³ray com quatro Elementos,sendo o Primeiro o Clone do Array aMarcacoes, o Se³
		³gundo o Clone do Array aTabCalend o Terceiro o Clone o Array aCodigos e   o³
		³Quarto o Clone do Array aEvesIds.											³
		³													  						³
		³Para Visualiza-los no Ponto de Entrada proceder da seguinte forma:			³
		³															  				³
		³User Function PonaPo4()									  				³
		³															  				³
		³Local __aMarcacoes := aClone( ParamIxb[1] )				  				³
		³Local __aTabCalend := aClone( ParamIxb[2] )				  				³
		³Local __aCodigos   := aClone( ParamIxb[3] )				  				³
		³Local __aEvesIds   := aClone( ParamIxb[4] )				  				³
		³Local __aResult	:= aClone( aEventos )					  				³
		³Local dDtGer		:= dDataBase							  				³
		³Local nHoras 		:= 0   									  				³
		³Local cEvento		:= "999"								  				³
		³Local cCusto 		:= SRA->RA_CC							  				³
		³Local cTpMarc 		:= ""													³
		³Local lSoma		:= .F.													³
		³Local cPeriodo		:= ""													³
		³Local nTole   		:= 0   													³
		³Local cArred		:= ""  													³
		³Local lSubstitui	:= .T. 													³
		³...														  				³
		³															  				³
		³fGeraRes(	__aResult	,; //01 -> Array com os Resultados do Dia			³
		³			dDtGer		,; //02 -> Data da Geracao							³
		³			nHoras		,; //03 -> Numero de Horas Resultantes				³
		³			cEvento		,; //04 -> Codigo do Evento           				³
		³			cCusto		,; //05 -> Centro de Custo a ser Gravado			³
		³			cTpMarc		,; //06 -> Tipo de Marcacao							³
		³			lSoma		,; //07 -> True para Acumular as Horas				³
		³			cPeriodo	,; //08 -> Periodo de Apuracao						³
		³			nTole		,; //09 -> Tolerancia								³
		³			cArred		,; //10 -> Tipo de Arredondamento a Ser Utilizado	³
		³			lSubstitui	 ; //11 -> Substitui a(s) Hora(s) Existente(s)		³
		³		  )																	³
		³															  				³
		³aEventos := aClone( __aResult )							  				³
		³															  				³
		³Return( NIL )								  				  				³
		³															  				³
		³Podera visualizar e alterar o Array aEventos que eh uma copia do Array   de³
		³Resultados do Apontamento (aResult). Os Analistas deverao ter cuidado ao Me³
		³xer no aEventos para nao alterar sua estrutura.Utilizar a Funcao fGeraRes()³
		³(Conforme Modelo Acima) para gerar novos resultados.						³
		³                                      					  	  				³
		³Obs.: Entre os Pontos de Entrada PONAPO3 e PONAPO4 este segundo(PONAPO4) eh³
		³      o mais recomendavel para uso		  	  								³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		( aEventos := {} , aEventos := aClone(oAponta:aResult) )
		ExecBlock(;
					"PONAPO4"							,;
					.F.									,;
					.F.									,;
					{;
						aClone( aMarcacoes )			,;
						aClone( oAponta:aTabCalend )	,;
						aClone( aCodigos )				,;
						aClone( aEvesIds )				 ;
					}									,;
					.F.									 ;
				 )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se aEventos e um Array e Se Houveram Modificacoes  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( ( ( ValType( aEventos ) == "A" ) .and. !ArrayCompare( aEventos , oAponta:aResult ) ) )
			( oAponta:aResult := {} , oAponta:aResult := aClone( aEventos ) , aEventos := {} )
		EndIF
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem o Numero de Elementos do aResult e Verifica Tolerancias³
	³e Arredondamentos Diarios									  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:nLenRes := Len( oAponta:aResult )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Checar Tolerancias e Arredondamentos Diarios				  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:ChkTolArr( aEvesIds , lMvArrInte )
	
	//--Quando o adicional noturno é pago no intervalo, existe tolerância de horas não realizadas e existiu atraso no retorno do intervalo, 
	//--se o atraso não for gerado, devido a tolerância, o adicional noturno deverá ser pago.
	If Len(aNotRealInt) > 0
		cCodAtras := ""
		aEval( aEvesIds, { |x|	IF( x[1] $ oAponta:cIdsAtras , cCodAtras+= ( x[2] + "*"), Nil ) } )
		
		For nX := 1 to Len(aNotRealInt)
			nW := aScan(oAponta:aResult,{|x| x[1] == aNotRealInt[nX,1] .and. x[2] $ cCodAtras .and. x[3] > 0 })
			If nW == 0 //Não gerou atraso
				nW := aScan(oAponta:aResult,{|x| x[1] == aNotRealInt[nX,1] .and. x[2] == aEvesIds[ 004 , 02 ] .and. x[3] > 0 })
				If nW > 0 //Soma os minutos de atraso do intervalo que não foram descontados
					oAponta:aResult[nW,3] := SomaHoras(oAponta:aResult[nW,3],aNotRealInt[nX,2])
				EndIf
			EndIf
		Next nX
	EndIf
	
	oAponta:aHrNReal := {}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ajusta as Horas de Adic. Noturno em aResult                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If oAponta:cPagNotInt != "*********"
		AjustaHNot( @oAponta:aResult )
	EndIf
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ajusta as Horas em aResult                                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	AjustaResult( @oAponta:aResult )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Adiciona os horarios dos Abonos em aResult                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	AppendaResAbo(  @oAponta:aResult,  oAponta:aResAbo )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Grava os resultados do funcion rio no arquivo SPC apenas  se³
	³ houveram novos apontamentos								  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( lGrava )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se Deve Gravar o Apontamento						  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		lGrava := (;
						Empty( oAponta:aResult );
						.or.;
						(;
							( oAponta:lChkTolArr );
							.and.;
							!ArrayCompare( oAponta:aResClone , oAponta:aResult );
						 );
					 )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Se Houverem Diferencas Entre O que Entrou e o que foi Aponta³
		³ do ou se o aResult Estiver vazio Regrava os Apontamentos    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( lGrava )
			GravaSPC( oAponta:aResult, cFilSRA, cMatSRA, cEvesNoDele, oAponta:dPerIni, oAponta:dPerFim, aAbonosPer )
		EndIF
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Recarrega aResult para Retorno por Referencia               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aResult := aClone( oAponta:aResult )

End Sequence

IF !( oAponta:lApontaOk )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Restaura o Conteudo do Calendario por Turno        		  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( aSvTabsCal <> NIL )
		SetTabCal( aSvTabsCal )
	EndIF
EndIF

Return( oAponta:lApontaOk )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³RstAponta()		³Autor³Marinaldo de Jesus ³ Data ³11/03/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Reinicializa as Staticas utilizadas em Aponta()	        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function RstAponta()

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Reinicializa os Variaveis Staticas de Apontamento            ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
oAponta := NIL
oaApo	:= NIL

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Reinicializa as Variaveis Staticas de Ambiente               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aEvesIds			:= NIL																//-- Array com os Eventos/Identificadores do Ponto de Acordo com o SX5
cEvesNoDele 		:= NIL																//-- Eventos que Nao Podem ser Deletados em GravaSPC
cFilStatic			:= NIL																//-- Filial Anterior

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Reinicializa Staticas de Retorno dos Mv's do SX6             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
lMarcImpar			:= NIL																//-- Tratar Marcacoes Impares na Montagem do aHoras para o Apontamento
lApHeDtM			:= NIL																//-- Aponta Horas Extras de Acordo com o Dia
lJtHeDtM			:= NIL																//-- Se o Tipo das Horas Extras corresponder ao do Dia Atual Grava no Dia Atual, se nao, no seguinte
lMarcIgual			:= NIL																//-- Tratar Marcacoes Duplicadas na Montagem do aHoras para o Apontamento
lMvAcmHExt			:= NIL																//-- Considerar Todas as Horas Extras do Dia Para o Escalonamento
lMvArrInte			:= NIL																//-- Define se ira considerar o Arredondamento Integral das Horas
lMvArrSExp			:= NIL																//-- Define se ira considerar o Arredondamento para Saida no Expediente ("S" eh o padrao e utiliza a Tab.Arred. da S.Antecipada, "N"  nao arredonda, como era feito na versao 508)
lRF0ChkTable		:= NIL
lDSRHorista			:= NIL                                                           	//-- Define se o apontamento de DSR de horistas sera apurado conforme horas trabalhadas/apontadas

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³ApontaEJ		³Autor³Marinaldo de Jesus ³ Data ³23/04/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Aponta as Ocorrencias de Entrada de Jornada    	        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Aponta()													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ApontaEJ()

Local lReapEj	:= .F.

Local cKeyProc
Local nN
Local nNPlus1
Local nNPlus2
Local nY
Local nIn
Local nMarcCount:= 0
Local nIndice	:= oAponta:nIndice
Local nPosEJ	:= aScan(oAponta:aHoras,{|x| x[10] == "EJ"})
Local nPosEI	:= aScan(oAponta:aHoras,{|x| x[10] == "EI"})
Local nInAux	:= 0

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Incrementa o Indice da Proxima Marcacao        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )
	nNPlus2 := Min( nNPlus1 + 1 , oAponta:nLenHoras )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Executa Enquanto as Marcacoes para o Tipo de Mar³
	³cacao em Questao nao Estiver OK				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

        /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apontamento Entrada Jornada   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( oAponta:aHoras[ nN , 10 ] == "EJ" ) //-- Se hor rio for tabela e inicio de jornada

			//-- Se o Pr¢ximo hor rio for Marca‡„o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//-- Verifica se Horario M¢vel e altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nNPlus1						,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
										oAponta:aHoras[ nN , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
									 )
					nN -= 2
					Exit
				EndIF
				If !oAponta:lAtestMed
					//-- Aponta atraso na entrada
					oAponta:AddPerHr(	oaApo:Atrasos				,;	//01 -> Identificador do Elemento Diurno no Apo
										NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
										oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
										oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
										oAponta:aHoras[nN,1]		,;	//05 -> Data 1
										oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
										oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
										oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
										NIL							,;	//09 -> <@>Horas Normais Apontadas
										NIL							,;	//10 -> <@>Horas Noturnas Apontadas
										oAponta:lHnotAtr			,;	//11 -> Apontar Horas Noturnas
										oAponta:dPerNotIni				,;	//12 -> Data Inicial Para a Hora Noturna
										NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
										oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
										oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
										oAponta:lAcreNot			 ;  //17 -> Apenas Acrescimo Noturno
									)
				EndIf
				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]
				
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nNPlus1 , 01 ]			,;
											oAponta:aHoras[ nNPlus1 , 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nNPlus1 , 14 ]			,;
											oAponta:aHoras[ nNPlus1 , 03 ]			,;
											.T.										;
										)
				EndIf
				//Ja Passou Pela Entrada Em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se o Pr¢ximo hor rio for tabela tendo como marcacao uma saida
			ElseIF ( oAponta:aHoras[nNPlus1,10] $ "SI_SJ" )

				//--Procura a Marcacao para Submeter ao Horario Movel
				If nN == 1
					nY	:= ( nN - 1 )
				ElseIf nN > 1 
					nY	:= ( nN - 2 )
				EndIf
				nIn := 0
				While ( ++nY <= oAponta:nLenHoras )
					nIn := nY
					IF ( oAponta:aHoras[ nIn , 03 ] == "M" )
						If ( oAponta:aHoras[nNPlus1,10] $ "SI" )
							If nMarcReal > 2 //Número de marcações tabela menor ou igual numero de marcações
								If nIn == 2 .And. oAponta:aHoras[ nIn - 1 , 03 ] == "M"
									nMarcCount++
									Loop
								Else
									If !(oAponta:aHoras[nPosEJ , 12]) .And. nPosEI > nIn .And. nIn > 1
										nMarcCount++
										nInAux := nIn
									ElseIf nIn == nInAux 
										Loop
									EndIf
								EndIf
								If nMarcCount > 0
									nY := 0
									Exit
								EndIf
								nMarcCount++
							Else
								nIn:= 0
								nY := 0
								Exit
							EndIf
						Else
							nY := 0
							Exit
						EndIf
					EndIF

				End While

				//--Verifica se Horario Movel e Altera Saida da Tabela
				IF ( ( nIn > 0 ) .and. ( nY == 0 ) )
					IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]		,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nIn								,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
											oAponta:aHoras[ nN , 03 ]		 ;	//03 -> Sigla da Marcacao Corrente
										  )
						nN -= 2
						Exit
					EndIF
				EndIF

				If nMarcCount > 0
					oAponta:nIndice := oAponta:aHoras[nNPlus1,11]
				EndIf

					/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Verifica se ha horario Movel no Intervalo e forca o Reinicio ³
				³dos Apontamentos                                             ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				IF ( lReapEj := (;
										oAponta:ChkInMvFree( NIL , nIn );
										.or.;
										oAponta:ChkHrMovel(	oAponta:aHoras[ nNPlus1 , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
															nIn								,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
															oAponta:aHoras[ nNPlus1 , 03 ]   ;	//03 -> Sigla da Marcacao Corrente
									 			  		   );
								 );
					)
					If nMarcCount > 0
						oAponta:nIndice := nIndice
					EndIf
					Exit
				EndIF

				If nMarcCount > 0
					oAponta:nIndice := nIndice
				EndIf
				If !oAponta:lAtestMed
				//-- Aponta Falta Meio periodo
				oAponta:AddPerHr(	oaApo:MeiaFalta				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotFal			,;	//11 -> Apontar Horas Noturnas
									oAponta:dPerNotIni				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ; 	//17 -> Apenas Acrescimo Noturno
							 )
				EndIf
				//-- J  passou pela marcacao de Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				//-- J  passou pela marcacao de Saida em Questao
				cKeyProc := ( "lSaida"+oAponta:aHoras[nNPlus1,10]+oAponta:aHoras[nNPlus1,03] )
				oAponta:SetaProcessad( .F. , cKeyProc )
				Exit
			EndIF

		//-- Se hor rio for Marca‡„o e n„o tiver passado pela Entrada
		ElseIF (;
					( oAponta:aHoras[ nN , 03 ] == "M" ) .and. (;
																		( ( oAponta:cTipoMarc == "1E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ1E , 2 ] ) .or. ;
													 					( ( oAponta:cTipoMarc == "2E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ2E , 2 ] ) .or. ;
													 					( ( oAponta:cTipoMarc == "3E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ3E , 2 ] ) .or. ;
													 					( ( oAponta:cTipoMarc == "4E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEJ4E , 2 ] )      ;
													 			  );
				)

			//-- Se pr¢ximo hor rio for tabela e inicio de jornada
			IF ( oAponta:aHoras[nNPlus1,10] == "EJ" )

				//--Verifica se Horario Movel e Altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nNPlus1 , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nN								,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
										oAponta:aHoras[ nNPlus1 , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
									 )
					nN -= 2
					Exit
				EndIF

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nNPlus1 , 01 ]			,;
											oAponta:aHoras[ nNPlus1 , 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nN	   , 14 ]			,;
											oAponta:aHoras[ nNPlus1 , 03 ]	 		 ;
										)

				EndIf

				//-- J  passou pela entrada em questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
					//-- Aponta Hora Extra na Entrada
					nN += fExtras(	oAponta:aHoras[ nN , 01 ]	,;	//01 -> Data da 1a Marcacao
									oAponta:aHoras[ nN , 02 ]	,;	//02 -> Hora da 1a Marcacao
									oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
									oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
									oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									oAponta:nIndice				,;	//06 -> Indice de aApo
									.T.							,;	//07 -> 1o Dia do Apontamento
									.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
								)
				EndIf
                Exit
			//-- Se pr¢ximo hor rio for Marca‡„o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//--Procura a Tabela para Submeter ao Horario Movel
				nY	:= ( nN - 1 )
				nIn := 0
				While ( ++nY <= oAponta:nLenHoras )
					nIn := nY
					IF ( oAponta:aHoras[ nIn , 03 ] != "M" )
						nY := 0
						Exit
					EndIF
				End While

				//-- Verifica se Horario M¢vel e altera Saida da Tabela
				IF ( ( nIn > 0 ) .and. ( nY == 0 ) )
					IF oAponta:ChkHrMovel(	oAponta:aHoras[ nIn , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nN							,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
											oAponta:aHoras[ nIn , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
										 )
						nN -= 2
						Exit
					EndIF
				EndIF

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
					//-- Aponta Hora Extra Antes da Entrada
					nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
									oAponta:aHoras[nN,2] 		,;	//02 -> Hora da 1a Marcacao
									oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
									oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
									oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									oAponta:nIndice				,;	//06 -> Indice de aApo
									.T.							,;	//07 -> 1o Dia do Apontamento
									.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
								)	
				EndIF
				Exit
			EndIf
			Exit
		EndIF

		//Ja Passou Pela Entrada Em Questao
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se ja Passou Pelo Tipo de Marcacao em   Questao,³
	³posiciona no Proximo Item da Tabela, caso Contra³
	³rio pega a proxima Marcacao					 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Ponto nN eh iniciado a Partir de nStartnN ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:nStartnN := ( nN += 2 )
		Exit
	Else
		IF ( lReapEj )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Forca o Reinicio do Apontamento Desde a  Entrada³
			³de Jornada em Funcao do Intervalo Movel         ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:nStartnN	:= 1
			nN					:= -1 //( Neste Caso nN sera incrementado pelo For/Next: -1 + 2 = 1 )
			lReapEj				:= .F.
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Inicializa as posicoes da matriz de apontamento como numerica³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:ZeraApo()

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Remonta as Horas no oAponta:aApo em funcao do :ZeraApo()	  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:RmkWorkHrs()
	    	/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Inicializa aHrTrab                     ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:aHrtrab := {}
			Loop
		Else
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Neste Ponto nN sera incrementado pelo For       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			Loop
		EndIF
	EndIF

Next nN

oAponta:nIndice := nIndice

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³ApontaSI		³Autor³Marinaldo de Jesus ³ Data ³23/04/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Aponta as Ocorrencias de Saida de Intervalo    	        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Aponta()													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ApontaSI()

Local cKeyProc
Local lReapEj	:= .F.

Local cMarcEnt
Local nN
Local nNPlus1
Local nIn

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Inicializa o Flag de Ultimo Tipo de Checagem de Intervalo  Mo³
³vel e o Array que Armazena as Horas de Saida e Entrada de  In³
³tervalo da Tabela											  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
oAponta:cLstChkMvInt	:= "__cLstChkMvInt__"
oAponta:aLstChkMvInt	:= {}

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Incrementa o Indice da Proxima Marcacao        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Executa Enquanto as Marcacoes para o Tipo de Mar³
	³cacao em Questao nao Estiver OK				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se o Intervalo Movel eh Livre                    	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( oAponta:ChkInMvFree( @lReapEj ) )
			IF ( ( lReapEj ) .and. ( oAponta:lPaAjustEJ ) )
				nN := 1
			Else
				nN -= 2
			EndIF
			Exit
		EndIF
		
        /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apontamento Saida Intervalo	³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( oAponta:aHoras[nN,10] == "SI" ) //-- Se hor rio for tabela e marcacao de saida do intervalo

			//-- Se pr¢ximo hor rio for marca‡„o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//-- Verifica se ‚ Horario Movel e Altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nNPlus1						,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
										oAponta:aHoras[ nN , 03 ]    ;	//03 -> Sigla da Marcacao Corrente
									 )
					nN -= 2
					Exit
				EndIF

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]
				
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nN 		, 01 ]			,;
											oAponta:aHoras[ nN 		, 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nNPlus1	, 14 ]			,;
											oAponta:aHoras[ nN		, 03 ] 	 		 ;
										)
				EndIf

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
					//-- Aponta Hora Extra
					nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
									oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
									oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
									oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
									oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									oAponta:nIndice				,;	//06 -> Indice de aApo
									.T.							,;	//07 -> 1o Dia do Apontamento
									.T.							 ;	//08 -> Hora Extra Intervalo ( Entrada )
								)
				EndIf
				//Ja passou pela saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se o pr¢ximo hor rio for tabela e uma entrada
			ElseIF ( oAponta:aHoras[nNPlus1,10] $ "EI-SI" )

				//Procura a Proxima Marcacao para checagem do Horario Movel
				IF ( ( nIn := aScan( oAponta:aHoras , { |x| x[03] == "M" .And. x[13] == .F. } , nNPlus1 ) ) > 0 )
					//-- Verifica se ‚ Horario Movel e Altera Saida da Tabela
					IF oAponta:ChkHrMovel(	oAponta:aHoras[ nN , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nIn							,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
											oAponta:aHoras[ nN , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
										 )
						nN -= 2
						Exit
					EndIF
				EndIF

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
					//-- Aponta Hora Extra no Intervalo
					nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
									oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
									oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
									oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
									oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									oAponta:nIndice				,;	//06 -> Indice de aApo
									.T.							,;	//07 -> 1o Dia do Apontamento
									.T.							 ;	//08 -> Hora Extra Intervalo ( Entrada )
								)
				EndIf
				cMarcEnt := ( SubStr( oAponta:cTipoMarc , 1 , ( At( "S" , oAponta:cTipoMarc ) - 1 ) ) + "E" )
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					IF ( aScan( oAponta:aHrTrab , { |x| ( x[3] == cMarcEnt ) } ) > 0 )
						//--Adiciona Horas da Tabela no Array para calulo de horas Trab.
						oAponta:AddHrTrab(;
												oAponta:aHoras[ nN , 01 ]				,;
												oAponta:aHoras[ nN , 02 ]				,;
												oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
												oAponta:aHoras[ nN , 14 ]				,;
												oAponta:aHoras[ nN , 03 ]	 			 ;
											)

						//--Adiciona Horas da Tabela no Array para calulo de horas Trab.
						oAponta:AddHrTrab(;
												oAponta:aHoras[ nNPlus1 , 01 ]			,;
												oAponta:aHoras[ nNPlus1 , 02 ]			,;
												oAponta:aHoras[ nNPlus1 , 03 ]			,;
												oAponta:aHoras[ nNPlus1 , 14 ]			,;
												oAponta:aHoras[ nNPlus1 , 03 ]			 ;
											)
					EndIF
				EndIf
			EndIF

			//-- J  passou pela Saida "nn"
			oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
			//-- J  passou pela marcacao de Entrada em Questao
			cKeyProc := ( "lEntra"+oAponta:aHoras[nNPlus1,10]+oAponta:aHoras[nNPlus1,03] )
			oAponta:SetaProcessad( .F. , cKeyProc )
			Exit

		//-- Se o hor rio for de Marca‡„o e n„o tiver passado pela Saida de Intervalo
		ElseIF ( oAponta:aHoras[nN,3] == "M" ) .and. (;
			   												( ( oAponta:cTipoMarc == "1S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSI1S , 2 ] ) .or. ;
			   												( ( oAponta:cTipoMarc == "2S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSI2S , 2 ] ) .or. ;
			   												( ( oAponta:cTipoMarc == "3S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSI3S , 2 ] )      ;
			   							 	 			)

			//-- Se o pr¢ximo hor rio for de tabela e uma saida do intervalo
			IF ( oAponta:aHoras[nNPlus1,10] == "SI" )

				//-- Verifica se ‚ Horario Movel e Altera Saida da Tabela
				IF oAponta:ChkHrMovel(	oAponta:aHoras[ nNPlus1 , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
										nN								,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
										oAponta:aHoras[ nNPlus1 , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
									)
					nN -= 2
					Exit
				EndIF

				If !oAponta:lAtestMed
				//-- Aponta Saida Antecipada Antes do Intervalo
				oAponta:AddPerHr(	oaApo:SaidaAnte				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai			,;	//11 -> Apontar Horas Noturnas
									oAponta:dPerNotIni				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ;	//17 -> Apenas Acrescimo Noturno
							 )
				EndIf
				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]
				
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//--Adiciona Marcacoes Reais no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nN , 01 ]			,;
											oAponta:aHoras[ nN , 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nN , 14 ]				,;
											oAponta:aHoras[ nN , 03 ]	 		 ;
										)
				EndIf

				//-- J  passou pela Saida de Intervalo
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se o pr¢ximo horario for Marca‡„o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )

				IF (;
						( oAponta:aHoras[ nN      , 08 ] == oAponta:aSiglaMarc[ oAponta:nIndice ] ) .and. ;
						( oAponta:aHoras[ nNPlus1 , 08 ] == oAponta:aSiglaMarc[ oAponta:nIndice ] )		  ;
					)
					Exit //Ja passei por este apontamento
				EndIF

				//Procura o horário de intervalo para checagem do Horario Movel
				If ( ( nIn := aScan( oAponta:aHoras , { |x| x[10] == "SI" .And. x[13] == .T. } , nNPlus1 ) ) > 0 )
					//-- Verifica se altera o horário de saída para intervalo.
					If oAponta:ChkHrMovel(	oAponta:aHoras[ nIn , 10 ]	,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nN							,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
											oAponta:aHoras[ nIn , 03 ]	 ;	//03 -> Sigla da Marcacao Corrente
										 )
						nN -= 2
						Exit
					EndIf
				Else
					//-- Verifica se ‚ Horario Movel e Altera Saida da Tabela
					IF oAponta:ChkHrMovel( "SE"										,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nN										,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
											oAponta:aSiglaMarc[ oAponta:nIndice ]	 ;	//03 -> Sigla da Marcacao Corrente
										)
						nN -= 2
						Exit
					EndIF
				EndIf

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN      , 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
				oAponta:aHoras[ nNPlus1 , 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//--Adiciona Marcacoes Reais no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nN 	, 01 ]				,;
											oAponta:aHoras[ nN 	, 02 ]				,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nN	, 14 ]				,;
											oAponta:aHoras[ nN	, 03 ]	 			 ;
										)
					//--Adiciona Marcacoes Reais no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nNPlus1	, 01 ]			,;
											oAponta:aHoras[ nNPlus1	, 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nNPlus1	, 14 ]			,;
											oAponta:aHoras[ nNPlus1	, 03 ]	 		 ;
										)
				EndIf

				If !oAponta:lAtestMed
				//-- Aponta Saida Durante Expediente
				oAponta:AddPerHr(	oaApo:SaidaExpe				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai			,;	//11 -> Apontar Horas Noturnas
									oAponta:dPerNotIni				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
							  		oAponta:lAcreNot			,;	//17 -> Apenas Acrescimo Noturno
						  			Nil    						,;	//18 -> Periodo Horario Noturno
									Nil					 		,;	//19 -> Periodo Horario Diurno
									.T.							,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
									!Empty(oAponta:aApoHr[oaApo:SaidaExpe,oAponta:nIndice]);   //21 -> Adiciona Periodo como Novo Elemento
							 )
				EndIf

				IF !Empty( oAponta:aLstChkMvInt )
					//-- Restaura os Horarios Originais da Tabela
					IF oAponta:ChkHrMovel( "SE"										,;	//01 -> "EJ" (Entrada de Jornada) "SI" (Saida de Intervalo), "EI" (Entrada de Intervalo) ,"SE"(Saida Expediente)
											nN										,;	//02 -> Posi‡„o no Array aHoras da Marca‡„o Atual.
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;	//03 -> Sigla da Marcacao Corrente
											.T.										 ;	//04 -> Apenas Restaurar os Horarios Originais de Intervalo correspontante a Tabela
										 )
						oAponta:aLstChkMvInt := {}
						nN -= 2
						Exit
					EndIF
				EndIF
				Exit
			EndIF
		EndIF

		//-- J  passou pela Saida de Intervalo
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	IF ( ( lReapEj ) .and. ( oAponta:lPaAjustEJ ) )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Forca o Reinicio do Apontamento Desde a  Entrada³
		³de Jornada em Funcao do Sincronismo dos Extremos³
		³em Relacao ao Horario de Intervalo				 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:nIndice -= 2
		oAponta:nStartnN := nN
		oAponta:aProcessad[ oAponta:nProcessad , 02 ] := .T.
		oAponta:ZeraApo()
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Remonta as Horas no oAponta:aApo em funcao do :ZeraApo()	  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:RmkWorkHrs()
		Exit

	Else

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se ja Passou Pelo Tipo de Marcacao em   Questao,³
		³posiciona no Proximo Item da Tabela, caso Contra³
		³rio pega a proxima Marcacao					 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Neste Ponto nN eh iniciado a Partir de nStartnN ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:nStartnN := ( nN += 2 )
			Exit
		Else
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Neste Ponto nN sera incrementado pelo For       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			Loop
		EndIF

	EndIF

Next nN

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³ApontaEI		³Autor³Marinaldo de Jesus ³ Data ³23/04/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Aponta as Ocorrencias de Entrada de Intervalo  	        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Aponta()													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ApontaEI()

Local cKeyProc
Local nN
//Local nY
Local nIn
Local nNPlus1

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Incrementa o Indice da Proxima Marcacao        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Executa Enquanto as Marcacoes para o Tipo de Mar³
	³cacao em Questao nao Estiver OK				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

        /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apontamento Entrada Intervalo	³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( oAponta:aHoras[nN,10] == "EI" ) //-- Se horario for tabela e entrada do intervalo

			//-- Se pr¢ximo hor rio for Marca‡„o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" ) .AND. (aScan( oAponta:aHoras,{ |x| x[3] == "M" },nNPlus1+1 ) > 0)
					If !oAponta:lAtestMed
						//-- Aponta Atraso no Retorno do Intervalo
						oAponta:AddPerHr(	oaApo:Atrasos				,;	//01 -> Identificador do Elemento Diurno no Apo
											NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
											oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
											oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
											oAponta:aHoras[nN,1]		,;	//05 -> Data 1
											oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
											oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
											oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
											NIL							,;	//09 -> <@>Horas Normais Apontadas
											NIL							,;	//10 -> <@>Horas Noturnas Apontadas
											oAponta:lHnotAtr			,;	//11 -> Apontar Horas Noturnas
											oAponta:dPerNotIni			,;	//12 -> Data Inicial Para a Hora Noturna
											NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
											oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
											oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
											oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
											oAponta:lAcreNot			 ;	//17 -> Apenas Acrescimo Noturno
										)
					EndIf
				//Se paga adicional noturno no intervalo, guarda atraso no array
				If oAponta:aApo[oaApo:Atrasos, oAponta:nIndice] > 0 .and. "I" +  SubStr( oAponta:aSiglaMarc[ oAponta:nIndice ] , 1 , 1 ) $ oaponta:cPagNotInt
					If ( oAponta:aHoras[nN,2] >= oAponta:nIniHnot .or. oAponta:aHoras[nN,2] <= oAponta:nFimHnot ) //Se atraso esta dentro do horário noturno
						aAdd(aNotRealInt,{oAponta:dData,oAponta:aApo[oaApo:Atrasos,oAponta:nIndice]})
					EndIf
				EndIf
				
				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//-- Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nNPlus1 , 01 ]			,;
											oAponta:aHoras[ nNPlus1 , 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nNPlus1 , 14 ]			,;
											oAponta:aHoras[ nNPlus1 , 03 ]			 ;
										)
				EndIf
				//Ja passou pela Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se pr¢ximo hor rio for tabela e uma saida
			ElseIF ( oAponta:aHoras[nNPlus1,10] $ "SI_SJ" )

				nIn := 0


			   	//-- Verifica se Existe Marcacao depois da Jornada
                // Retiramos pois nao apontava 1/2 falta para o horario 08:00 12:00 13:30 17:30 e marcacao 08:00 11:50 18:00 18:20
                If oAponta:aHoras[nNPlus1,10] == "SJ"
					nY	:= ( nNPlus1 - 1 )
					While ( ++nY <= oAponta:nLenHoras )
						IF ( oAponta:aHoras[ nY , 03 ] == "M" )
							nIn := nY
							Exit
						EndIF
					End While
				Endif
				
				//-- Se nao Tiver marcacao posterior a Saida Aponta 1/2 Falta
				IF Empty( nIn ) .Or. ( !Empty(nIn) .And. oAponta:aHoras[ nY , 2 ] >= oAponta:aHoras[ nNPlus1 , 2 ] )
					If !oAponta:lAtestMed
					//-- Aponta Falta Periodo da Tarde
					oAponta:AddPerHr(	oaApo:MeiaFalta				,;	//01 -> Identificador do Elemento Diurno no Apo
										NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
										oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
										oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
										oAponta:aHoras[nN,1]		,;	//05 -> Data 1
										oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
										oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
										oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
										NIL							,;	//09 -> <@>Horas Normais Apontadas
										NIL							,;	//10 -> <@>Horas Noturnas Apontadas
										oAponta:lHnotFal			,;	//11 -> Apontar Horas Noturnas
										oAponta:dPerNotIni				,;	//12 -> Data Inicial Para a Hora Noturna
										NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
										oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
										oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
										oAponta:lAcreNot			; 	//17 -> Apenas Acrescimo Noturno
						 			)
					EndIf
				EndIF

				//Ja passou pela Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				//-- J  passou pela marcacao de Saida em Questao
				cKeyProc := ( "lSaida"+oAponta:aHoras[nNPlus1,10]+oAponta:aHoras[nNPlus1,03] )
				oAponta:SetaProcessad( .F. , cKeyProc )
				Exit

			EndIF

		//-- Se horario for marca‡„o e n„o tiver passado pela Entrada "nn"
		ElseIF ( oAponta:aHoras[nN,3] == "M" ) .and. (;
										 					( ( oAponta:cTipoMarc == "2E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEI2E , 2 ] ) .or. ;
										 					( ( oAponta:cTipoMarc == "3E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEI3E , 2 ] ) .or. ;
										 					( ( oAponta:cTipoMarc == "4E" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nEntraEI4E , 2 ] )	  ;
										 	 			)

			//-- Se pr¢ximo hor rio for tabela e uma entrada
			IF ( oAponta:aHoras[nNPlus1,10] == "EI" )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
				//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
				oAponta:AddHrTrab(;
										oAponta:aHoras[ nN	, 01 ]			,;
										oAponta:aHoras[ nN	, 02 ]			,;
										oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
										oAponta:aHoras[ nN		, 14 ]			,;
										oAponta:aHoras[ nN	, 03 ]			 ;
								   )
				EndIf

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
					//-- Aponta Hora Extra Retorno Almo‡o
					nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
									oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
									oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
									oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
									oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									oAponta:nIndice				,;	//06 -> Indice de aApo
									.T.							,;	//07 -> 1o Dia do Apontamento
									.T.							 ;	//08 -> Hora Extra Intervalo ( Entrada )
								)
				EndIf
				//Ja passou pela Entrada em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//--Se pr¢ximo hor rio for marca‡„o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )
				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
					//-- Aponta Hora Extra Antes Retorno do Intervalo
					nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
									oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
									oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
									oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
									oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									oAponta:nIndice				,;	//06 -> Indice de aApo
									.T.							,;	//07 -> 1o Dia do Apontamento
									.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
								)
				EndIf
				Exit
			EndIF

			Exit

		EndIF

		//Ja Passou Pela Entrada Em Questao
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se ja Passou Pelo Tipo de Marcacao em   Questao,³
	³posiciona no Proximo Item da Tabela, caso Contra³
	³rio pega a proxima Marcacao					 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Ponto nN eh iniciado a Partir de nStartnN ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:nStartnN := ( nN += 2 )
		Exit
	Else
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Ponto nN sera incrementado pelo For       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		Loop
	EndIF

Next nN

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³ApontaSJ		³Autor³Marinaldo de Jesus ³ Data ³23/04/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Aponta as Ocorrencias de Saida de Jornada    	        	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Aponta()													³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ApontaSJ()

Local lIncStartnN :=  .F.
Local nN
Local nNPlus1
Local nPosAtu
Local nPosAnt

For nN := oAponta:nStartnN To oAponta:nElem Step 2

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Incrementa o Indice da Proxima Marcacao        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Executa Enquanto as Marcacoes para o Tipo de Mar³
	³cacao em Questao nao Estiver OK				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	While ( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³So se passou por este ponto eh que deve incremen³
		³tar nStartnN. Caso contrario eh apuracao de H.E.³
		³apos o Expediente								 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		lIncStartnN := .T.

        /*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Apontamento Saida Jornada		³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( oAponta:aHoras[nN,10] == "SJ" ) //-- Se horario for tabela e uma saida de jornada

			//-- Se pr¢ximo hor rio for marca‡„o
			IF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nNPlus1 , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//-- Adiciona as Horas da Tabela no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nN		, 01 ]			,;
											oAponta:aHoras[ nN		, 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nNPlus1	, 14 ]			,;
											oAponta:aHoras[ nN		, 03 ]	 		 ;
										)
				EndIf

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
					//-- Aponta Hora Extra na Saida
					nN += fExtras(	oAponta:aHoras[nN,1]		,;	//01 -> Data da 1a Marcacao
									oAponta:aHoras[nN,2]		,;	//02 -> Hora da 1a Marcacao
									oAponta:aHoras[nNPlus1,1]	,;	//03 -> Data da 2a Marcacao
									oAponta:aHoras[nNPlus1,2]	,;  //04 -> Hora da 2a Marcacao
									oAponta:cTipoMarc			,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									oAponta:nIndice				,;	//06 -> Indice de aApo
									.T.							,;	//07 -> 1o Dia do Apontamento
									.F.							 ;	//08 -> Apuracao Corresponde a Intervalo
								)
				EndIf
				//Ja Passou Pela Saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			ElseIF ( oAponta:aHoras[nNPlus1,10] == "SJ" )	//Neste Caso Encerrou o Apontamento

				//Ja Passou Pela Saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			EndIF

		//-- Se hor rio for Marca‡„o e n„o tiver passado pela Saida "nn"
		ElseIF ( oAponta:aHoras[nN,3] == "M" ) .and. (;
															( ( oAponta:cTipoMarc == "1S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ1S , 2 ] ) .or. ;
															( ( oAponta:cTipoMarc == "2S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ2S , 2 ] ) .or. ;
															( ( oAponta:cTipoMarc == "3S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ3S , 2 ] ) .or. ;
															( ( oAponta:cTipoMarc == "4S" ) .and. oAponta:aProcessad[ oAponta:oProcessad:nSaidaSJ4S , 2 ] )      ;
										 	  			)

			//-- Se pr¢ximo hor rio for tabela e uma saida de jornada
			IF ( oAponta:aHoras[nNPlus1,10] == "SJ" )
				If !oAponta:lAtestMed
				//-- Aponta Saida Antecipada Antes do Termino do Expediente
				oAponta:AddPerHr(	oaApo:SaidaAnte				,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]		,;	//05 -> Data 1
									oAponta:aHoras[nN,2]		,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]	,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]	,;	//08 -> Hora 2
									NIL							,;	//09 -> <@>Horas Normais Apontadas
									NIL							,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai			,;	//11 -> Apontar Horas Noturnas
									oAponta:dPerNotIni				,;	//12 -> Data Inicial Para a Hora Noturna
									NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot			 ; 	//17 -> Apenas Acrescimo Noturno
								 )
				EndIf
				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN , 08 ] := oAponta:aSiglaMarc[ oAponta:nIndice ]

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nN , 01 ]				,;
											oAponta:aHoras[ nN , 02 ]				,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nN , 14 ]				,;
											oAponta:aHoras[ nN , 03 ]				,;
											.T.							 	 		 ;
										)
				EndIf

				//-- J  passou pela Saida em Questao
				oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
				Exit

			//-- Se pr¢ximo hor rio for Marca‡„o
			ElseIF ( oAponta:aHoras[nNPlus1,3] == "M" )

				//--Carrega o Elemento 08 de aHoras com o Tipo de Apontamento
				oAponta:aHoras[ nN 		, 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]
				oAponta:aHoras[ nNPlus1	, 08 ]	:= oAponta:aSiglaMarc[ oAponta:nIndice ]

				If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa)
					//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nN , 01 ]				,;
											oAponta:aHoras[ nN , 02 ]				,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nN , 14 ]				,;
											oAponta:aHoras[ nN , 03 ]	 			 ;
										)

					//--Adiciona as Marcacoes Reains no Array para calulo de horas Trab.
					oAponta:AddHrTrab(;
											oAponta:aHoras[ nNPlus1 , 01 ]			,;
											oAponta:aHoras[ nNPlus1 , 02 ]			,;
											oAponta:aSiglaMarc[ oAponta:nIndice ]	,;
											oAponta:aHoras[ nNPlus1 , 14 ]			,;
											oAponta:aHoras[ nNPlus1 , 03 ]	 		 ;
										)
				EndIf

				If !oAponta:lAtestMed
				//-- Aponta Saida Durante Expediente
				oAponta:AddPerHr(	oaApo:SaidaExpe			  										,;	//01 -> Identificador do Elemento Diurno no Apo
									NIL						   										,;	//02 -> Identificador do Elemento Noturno no Apo
									oAponta:nIndice													,;	//03 -> Posicao no Elemento do Identificador
									oAponta:aApoHr			   										,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
									oAponta:aHoras[nN,1]	   										,;	//05 -> Data 1
									oAponta:aHoras[nN,2]	   										,;	//06 -> Hora 1
									oAponta:aHoras[nNPlus1,1]  										,;	//07 -> Data 2
									oAponta:aHoras[nNPlus1,2]										,;	//08 -> Hora 2
									NIL						  										,;	//09 -> <@>Horas Normais Apontadas
									NIL						 										,;	//10 -> <@>Horas Noturnas Apontadas
									oAponta:lHnotSai												,;	//11 -> Apontar Horas Noturnas
									oAponta:dPerNotIni			 										,;	//12 -> Data Inicial Para a Hora Noturna
									NIL						 										,;	//13 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot		  										,;	//14 -> Inicio do Horario Noturno
									oAponta:nFimHnot		  										,;	//15 -> Final do Horario Noturno
									oAponta:nMinHnot		   										,;	//16 -> Minutos do Horario Noturno
									oAponta:lAcreNot		  										,;	//17 -> Apenas Acrescimo Noturno
									Nil						   										,;	//18 -> Periodo Horario Noturno
									Nil						   										,;	//19 -> Periodo Horario Diurno
									.T.																,;  //20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
									!Empty(oAponta:aApoHr[oaApo:SaidaExpe,oAponta:nIndice])		;   //21 -> Adiciona Periodo como Novo Elemento
								 )
				EndIf
				Exit
			EndIF
		EndIF

		//Ja Passou Pela Saida de Jornada em Questao
		oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )
		Exit

	End While

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Se ja Passou Pelo Tipo de Marcacao em   Questao,³
	³posiciona no Proximo Item da Tabela, caso Contra³
	³rio pega a proxima Marcacao					 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Ponto nN eh iniciado a Partir de nStartnN ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( lIncStartnN )
			oAponta:nStartnN := ( nN += 2 )
		EndIF
		Exit
	Else
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Ponto nN sera incrementado pelo For       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		Loop
	EndIF

Next nN

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Se passou pelo Apontamento de Saida de Jornada  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF !( oAponta:aProcessad[ oAponta:nProcessad , 02 ] )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Aponta Todas as Horas Extras Apos o Final do  Ex³
	³pediente										 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nN := oAponta:nStartnN To oAponta:nElem Step 2

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Incrementa o Indice da Proxima Marcacao        ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nNPlus1 := Min( nN + 1 , oAponta:nLenHoras )

		//-- Aponta hora extra ap¢s expedinte
		nN += fExtras(	oAponta:aHoras[nN,1]				,;	//01 -> Data da 1a Marcacao
						oAponta:aHoras[nN,2]  				,;	//02 -> Hora da 1a Marcacao
						oAponta:aHoras[nNPlus1,1]			,;	//03 -> Data da 2a Marcacao
						oAponta:aHoras[nNPlus1,2]			,;  //04 -> Hora da 2a Marcacao
						oAponta:aSiglaMarc[oAponta:nIndice]	,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
						oAponta:nIndice						,;	//06 -> Indice de aApo
						.T.									,;	//07 -> 1o Dia do Apontamento
						.F.									 ;	//08 -> Hora Extra Intervalo ( Entrada )
					 )
	Next nN

Else

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Aponta 1/2 Falta                                ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nPosAtu	:= aScan( oAponta:aHoras,{ |x| x[3] == oAponta:aSiglaMarc[oAponta:nIndice] } )
	nPosAnt	:= aScan( oAponta:aHoras , { |x| x[3] == oAponta:aSiglaMarc[ oAponta:nIndice - 1 ] } )
	IF ( ( nPosAtu > 0 ) .and. ( nPosAnt > 0 ) )
			oAponta:AddPerHr(	oaApo:MeiaFalta				,;	//01 -> Identificador do Elemento Diurno no Apo
								NIL							,;	//02 -> Identificador do Elemento Noturno no Apo
								oAponta:nIndice				,;	//03 -> Posicao no Elemento do Identificador
								oAponta:aApoHr				,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
								oAponta:aHoras[nPosAnt,01]	,;	//05 -> Data 1
								oAponta:aHoras[nPosAnt,02]	,;	//06 -> Hora 1
								oAponta:aHoras[nPosAtu,01]	,;	//07 -> Data 2
								oAponta:aHoras[nPosAtu,02]	,;	//08 -> Hora 2
								NIL							,;	//09 -> <@>Horas Normais Apontadas
								NIL							,;	//10 -> <@>Horas Noturnas Apontadas
								oAponta:lHnotFal			,;	//11 -> Apontar Horas Noturnas
								oAponta:dPerNotIni				,;	//12 -> Data Inicial Para a Hora Noturna
								NIL							,;	//13 -> <@>Horas de Acrescimo Noturno
								oAponta:nIniHnot			,;	//14 -> Inicio do Horario Noturno
								oAponta:nFimHnot			,;	//15 -> Final do Horario Noturno
								oAponta:nMinHnot			,;	//16 -> Minutos do Horario Noturno
								oAponta:lAcreNot			 ;	//17 -> Apenas Acrescimo Noturno
						 )
	EndIF

	//Ja Passou Pela Saida em Questao
	oAponta:SetaProcessad( .F. , NIL , oAponta:nProcessad )

EndIF

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ApontaTrbNoMvFree³Autor³Marinaldo de Jesus ³ Data ³17/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Apontar Horas Trabalhadas e Faltas para Regras sem Horario Mo³
³          ³vel Livre													 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ApontaTrbNoMvFree()

Local aPerNot		:= {}
Local aPerDia		:= {}
Local aNewHrTrab	:= {Nil, Nil}
Local aTab			:= {}

Local cTpMarc		:= ""

Local lIntegra		:= .T.

Local nO
Local nOPlus1
Local nHr1
Local nHr2
Local nHr3
Local nHoras 		:= 0
Local nHorasTot 	:= 0
Local nHorasTpMarc	:= 0
Local nDifHoras 	:= 0
Local nIndice

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicio do Calculo das Horas Trabalhadas        ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Ordena as Marcacoes do Dia com as Marcacoes da  Ta³
	³bela											   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:SortaHrTrab()

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Totaliza as Horas Trabalhadas                    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
 	oAponta:ChkHrTDupl()
	oAponta:nElem := IF( ( ( oAponta:nLenHoras%2 ) >= 1 ) , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ajusta as Horas Trabalhadas em funcao do Minimo  ³
	³ a ser pago.									   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If oAponta:nHrsPgs > 0

		cTpmarc:= 	"!!"
		//-- Corre todas as horas trabalhadas
        lIntegra := .T.
        //-- Obtem as Marcacoes da Tabela a serem Integradas
	 	aEval(oAponta:aHoras, { |x| If( !x[3] == "M", aadd( aTab, x ), Nil ) } )
		For nO := 1 To 	oAponta:nElem  Step 2

			nOPlus1 := ( nO + 1 )
			nHr1 := nHr2 := nHr3 := 0




		   	nHoras := fCalHoras(		oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
						  				oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
										oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
										oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
										@nHr1							,;	//05 -> <@>Horas Normais Apontadas
										@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
										Nil								,;	//07 -> Apontar Horas Noturnas
										oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
										@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
										oAponta:lAcreNot				;	//13 -> Apenas Acrescimo Noturno
								   )

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Totaliza as horas trabalhadas 					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nHorasTot		:= SomaHoras( nHorasTot	,	nHoras  )
			nHorasTot 		:= __TimeSum( nHorasTot,	0.00000 )
		    nHorasTot 		:= __TimeSum( nHorasTot,	0.00000 )
			//-- Se nao for a primeira vez
			If cTpMarc <> "!!"
			    //-- Confere se o periodo anterior foi realizado integralmente
				If ( oAponta:aApo[oaApo:HrTrbTabel,nIndice] 	>  SomaHoras( nHorasTot, nHorasTpMarc) )
			        //-- Caso contrario Abandona e nao realiza a integracao da jornada
			        lIntegra := .F.
			        Exit
                Endif
			Endif


			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Para as Horas Trabalhadas Deve-se Sempre  Procurar³
			³pela Entrada									   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nIndice := aScan( oAponta:aSiglaMarc ,;
								IF(;
										( "S" $ oAponta:aHrTrab[ nO , 3 ] ) ,;
										( SubStr( oAponta:aHrTrab[ nO , 3 ] , 1 , 1 ) + "E" ),;
										oAponta:aHrTrab[ nO , 3 ];
								   );
							 )
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Se Nao Encontrou Flag Correspondente, assume     a³
			³Entrada      								       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nIndice := Max( nIndice , 1 )


		    aNewHrTrab[1]	:= oAponta:aHrTrab[nO, 1]
		    aNewHrTrab[2]	:= oAponta:aHrTrab[nO, 2]

		   	//-- Se a Entrada for maior que a entrada da tabela
		   	If (  DataHora2Str( oAponta:aHrTrab[nO,1], oAponta:aHrTrab[nO, 2]	 )  >  aTab[nIndice, 17] )
		   		//-- Calcula a diferenca de horas

			 	nDifHoras:= fCalHoras(		oAponta:aHrTrab[nO,1]		,;	//01 -> Data da 1a Marcacao
											oAponta:aHrTrab[nO, 2]		,;	//02 -> 1a Marcacao
											aTab[nIndice, 1]			,;	//03 -> Data da 2a Marcacao
											aTab[nIndice, 2] 			,;	//04 -> Segunda Marcacao
											0							,;	//05 -> Horas Normais
											0							,;	//06 -> Horas Noturnas
											.T.							,;	//07 -> Considera Hora Noturna
											oAponta:dData				,;	//08 -> Data do Inicio do Adicional Noturno
											NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
											oAponta:nIniHnot			,;	//10 -> Inicio do Horario Noturno
											oAponta:nFimHnot			,;	//11 -> Final do Horario Noturno
											oAponta:nMinHnot			,;	//12 -> Minutos do Horario Noturno
											oAponta:lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
											NIL		 					 ;	//14 -> Periodo da Hora Noturna
									   )
				If !( nDifHoras > fTolerancia( oAponta:cTolaSai, nIndice , 1, oAponta:dData )   )
				     //-- Limita a Entrada a Entrada da Tabela
				    aNewHrTrab[1]	:= aTab[nIndice, 1]
				    aNewHrTrab[2]	:= aTab[nIndice, 2]
				    nHorasTpMarc	:= SomaHoras( nHorasTpMarc, nDifHoras )
		   		Endif
		   	Endif


		    If nOPlus1 == oAponta:nElem

			   If ( DataHora2Str( aNewHrTrab[1], aNewHrTrab[2]	 )  >  aTab[nIndice, 17] )
	        	  lIntegra:= .F.
			      Exit
			   Endif
            Endif

            //-- Verifica se Ocorreu quebra do Tipo de Marcacao
			If cTpMarc <> oAponta:aHrTrab[nOPlus1	,	3]
			    //- Iguala o tipo de marcacao para posterior verificacao de quebra do mesmo
			    cTpMarc			:= oAponta:aHrTrab[nOPlus1	,3]
		   	Endif


		Next  nO


		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Acrescenta as Horas Faltantes no Horario de Saida³
		³ da ultima marcacao.							   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If (nHorasTot < oAponta:nHrsPgs)  .AND. !Empty(nHorasTot) .AND. lIntegra

			nDifHoras	:= SubHoras(oAponta:nHrsPgs, nHorasTot )
			dDataIni	:= oAponta:aHrTrab[nOPlus1	,	1]
			nHoraIni    := oAponta:aHrTrab[nOPlus1	,	2]

			//--
		 	nIndice:= ( Ascan(aTab,{|x| x[3] == oAponta:aHrTrab[nOPlus1	,	3] } ) )
				While nDifHoras > 0.00
					aNewHrTrab	:= RetFimTab(  dDataIni 						,;  //01 -> Data
				 	 							nHoraIni						,;  //02 -> Hora
				 	 							nDifHoras			 			,;  //03 -> Horas a Somar
				 	 							0								,;  //04 -> Horas de Intervalo
			 	 								.T.								,;	//05 -> Considera Horas Noturnas
												oAponta:dData					,;	//06 -> Data Inicial Para a Hora Noturna
												oAponta:nIniHnot				,;	//07 -> Inicio do Horario Noturno
												oAponta:nFimHnot				,;	//08 -> Final do Horario Noturno
												oAponta:nMinHnot				,;	//09 -> Minutos do Horario Noturno
												oAponta:lAcreNot				;	//10 -> Apenas Acrescimo Noturno
				 	 						 )



					//-- Se a data/hora calculada for superior ao limite da saída para o tipo de marcacao
				 	//-- Deve-se limitar a saida da jornada
				 	If ( DataHora2Str( aNewHrTrab[1], aNewHrTrab[2] ) >  aTab[nIndice, 17] )
				 	    //-- Calcula a diferenca de horas a ser novamente integrada
						nDifHoras:= fCalHoras(		aNewHrTrab[1]			,;	//01 -> Data da 1a Marcacao
													aNewHrTrab[2]			,;	//02 -> 1a Marcacao
													aTab[nIndice, 1]		,;	//03 -> Data da 2a Marcacao
													aTab[nIndice, 2]		,;	//04 -> Segunda Marcacao
													0						,;	//05 -> Horas Normais
													0						,;	//06 -> Horas Noturnas
													.T.						,;	//07 -> Considera Hora Noturna
													oAponta:dData			,;	//08 -> Data do Inicio do Adicional Noturno
													NIL						,;	//09 -> <@>Horas de Acrescimo Noturno
													oAponta:nIniHnot		,;	//10 -> Inicio do Horario Noturno
													oAponta:nFimHnot		,;	//11 -> Final do Horario Noturno
													oAponta:nMinHnot		,;	//12 -> Minutos do Horario Noturno
													oAponta:lAcreNot		,;	//13 -> Apenas Acrescimo Noturno
													NIL		 				 ;	//14 -> Periodo da Hora Noturna
												)
				 	    //-- Limita a Saida da ultima marcacao a Saida da Tabela
				 	 	oAponta:aHrTrab[nOPlus1	,	1]	:= aTab[nIndice, 1]
						oAponta:aHrTrab[nOPlus1	,	2]	:= aTab[nIndice, 2]

					    nIndice := Min(nIndice + 2, Len(aTab) )

						//--Adiciona as Marcacoes Reais no Array para calulo de horas Trab.
						oAponta:AddHrTrab(;
											aTab[ nIndice - 1 , 01 ]		,;
											aTab[ nIndice - 1 , 02 ]		,;
											aTab[ nIndice - 1 , 03 ]		,;
											aTab[ nIndice - 1 , 14 ]		,;
											aTab[ nIndice - 1 , 03 ]		;
										 )

						oAponta:AddHrTrab(;
											aTab[ nIndice , 01 ]		,;
											aTab[ nIndice , 02 ]		,;
											aTab[ nIndice , 03 ]		,;
											aTab[ nIndice , 14 ]		,;
											aTab[ nIndice , 03 ]	 	;
										)
						dDataIni:= aTab[ nIndice - 1 , 01 ]
						nHoraIni:= aTab[ nIndice - 1 , 02 ]
						nOPlus1 := Len(oAponta:aHrTrab)
					Else
						oAponta:aHrTrab[nOPlus1	,	1]	:= aNewHrTrab[1]
						oAponta:aHrTrab[nOPlus1	,	2]	:= aNewHrTrab[2]
						nDifHoras := 0.00
					Endif

				End While
			  /*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Zera as Faltas, Atrasos e Saidas no Expediente        ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

				aFill( oAponta:aApo[oaApo:Atrasos]		, 0 )
				aFill( oAponta:aApo[oaApo:MeiaFalta]	, 0 )
				aFill( oAponta:aApo[oaApo:SaidaAnte]	, 0 )
				aFill( oAponta:aApo[oaApo:SaidaExpe]	, 0 )

				IF (oAponta:lRF0ChkTable)
					aFill( oAponta:aApoHr[oaApo:Atrasos]	, {} )
					aFill( oAponta:aApoHr[oaApo:MeiaFalta]	, {} )
					aFill( oAponta:aApoHr[oaApo:SaidaAnte]	, {} )
					aFill( oAponta:aApoHr[oaApo:SaidaExpe]	, {} )
				Endif
		Endif
		oAponta:nLenHoras 	:= Len( oAponta:aHrTrab )
		oAponta:nElem 		:= IF( ( ( oAponta:nLenHoras%2 ) >= 1 ) , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )
	Endif
	For nO := 1 To oAponta:nElem Step 2
		nOPlus1 := ( nO + 1 )
		nHr1 := nHr2 := nHr3 := 0
		oAponta:CalcPerHr(  oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							@nHr1							,;	//05 -> <@>Horas Normais Apontadas
							@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
							NIL								,;	//07 -> Apontar Horas Noturnas
							oAponta:aHrTrab[nO,10]			,;	//08 -> Data Inicial Para a Hora Noturna
							@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot						,;	//14 -> Periodo Horario Noturno
							@aPerDia						;	//15 -> Periodo Horario Diurno
						   )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Para as Horas Trabalhadas Deve-se Sempre  Procurar³
		³pela Entrada									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nIndice := aScan( oAponta:aSiglaMarc ,;
							IF(;
									( "S" $ oAponta:aHrTrab[ nO , 3 ] ) ,;
									( SubStr( oAponta:aHrTrab[ nO , 3 ] , 1 , 1 ) + "E" ),;
									oAponta:aHrTrab[ nO , 3 ];
							   );
						 )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se Nao Encontrou Flag Correspondente, assume     a³
		³Entrada      								       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nIndice := Max( nIndice , 1 )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Apura as Horas Trabalhadas						   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( ( nHr1 > 0 ) .and. ( oAponta:aApo[oaApo:HrTrbTabel,nIndice] > 0 ) )
			nHr1 := Min( oAponta:aApo[oaApo:HrTrbTabel,nIndice] , nHr1 )
			IF ( oAponta:lRF0ChkTable )
				IF ( nHr1 == oAponta:aApo[ oaApo:HrTrbTabel , nIndice ] )
				    oAponta:aApoHr[ oaApo:HrTrbEfeti , nIndice ] := aClone( oAponta:aApoHr[ oaApo:HrTrbTabel , nIndice ] )
				Else
				    oAponta:aApoHr[ oaApo:HrTrbEfeti , nIndice ] := aClone( aPerDia )
				EndIF
			EndIF
		EndIF
		IF ( ( nHr2 > 0 ) .and. ( oAponta:aApo[oaApo:HrTrbNotTb,nIndice] > 0 ) )
			nHr2 := Min( oAponta:aApo[oaApo:HrTrbNotTb,nIndice] , nHr2 )
			IF ( oAponta:lRF0ChkTable )
				IF ( nHr2 == oAponta:aApo[ oaApo:HrTrbNotTb , nIndice ] )
				    oAponta:aApoHr[ oaApo:HrTrbNotEf , nIndice ]	:= aClone( oAponta:aApoHr[ oaApo:HrTrbNotTb , nIndice ] )
				Else
					oAponta:aApoHr[ oaApo:HrTrbNotEf , nIndice ]	:= aClone( aPerNot )
				EndIF
			EndIF
		EndIF
		oAponta:aHrTrab[ nO , 05 ] := nHr1
		oAponta:aHrTrab[ nO , 06 ] := nHr2
		oAponta:aHrTrab[ nO , 07 ] := nHr3
		oAponta:aApo[ oaApo:HrTrbEfeti , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbEfeti , nIndice] , oAponta:aHrTrab[ nO , 5 ] )
		oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbNotEf , nIndice] , oAponta:aHrTrab[ nO , 6 ] )		
		
		//-- Se Existe o Identificador de Acrescimo Noturno e
		//-- Se Destaca o Acrescimo Noturno
		//---- Entao o Adicional Noturno contera o valor integral
		//---- e destacamos o acrescimo no identificador correspondente
		If oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
			If oAponta:lSepAcrNot
				oAponta:aApo[ oaApo:AcrAdiNot 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AcrAdiNot 	, nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
				oAponta:aApo[ oaApo:AcreAuto  	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AcreAuto  	, nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
				oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
			Else
				oAponta:aApo[ oaApo:AcreAuto  	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AcreAuto  	, nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
				oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
				oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
			EndIf
		Else
			IF ( oAponta:aHrTrab[ nO , 07 ] > 0 )
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 7 ] )	
			Else
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
			EndIF
		Endif

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Calcula Prima Dominical, Descanso Laborado,	   ³
		³Festivo Laborado.								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ! ( (oAponta:lIntNtrab) .and. ( !oAponta:lMovelFree ) )
			fAdicionais(	oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							NIL								,;	//05 -> <@>Horas Normais Apontadas
							NIL								,;	//06 -> <@>Horas Noturnas Apontadas
							Nil								,;	//07 -> Apontar Horas Noturnas
							oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
							NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							nIndice							,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
							oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
				  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
				  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
					   )
		Endif
	Next nO

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Totaliza as Horas de Intervalo.                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( oAponta:cTipoDia == "S" )
		nHr1 := 0
		aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
		aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
		IF ( nHr1 > 0 )
			aEval( oAponta:aApo[oaApo:HrIntTabel],;
					{ |x,y| IF(	( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
								(oAponta:aApo[oaApo:HrIntEfeti,y] := SomaHoras(oAponta:aApo[oaApo:HrIntEfeti,y] , x ),;
								 IF( oAponta:lRF0ChkTable,;
								 	 oAponta:AlocaPer( oaApo:HrIntTabel , y , oaApo:HrIntEfeti , y , .T. ),;
								 	NIL;
								   );
							   	 ),;
								 NIL;
							   );
					  };
				  )


			aEval( oAponta:aApo[oaApo:HeIntNorAu],;
						{ |x,y| IF( y > 1 .and. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagInt,;
									 (oAponta:aApo[oaApo:HrIntEfeti,y] := SubHoras(oAponta:aApo[oaApo:HrIntEfeti,y] , x ),;
									  IF( oAponta:lRF0ChkTable,;
									  	 oAponta:AlocaPer( oaApo:HrIntTabel , y , oaApo:HrIntEfeti , y , .T. ),;
									     NIL;
									     );
							   	     ),;
									NIL;
								   );
						 };
					  )

			aEval( oAponta:aApo[oaApo:HrIntNotTb],;
									{ |x,y| IF( ( "I" +  SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
												(oAponta:aApo[oaApo:HrIntNotEf,y] := SomaHoras(oAponta:aApo[oaApo:HrIntNotEf,y] , x ),;
												IF( oAponta:lRF0ChkTable,;
													oAponta:AlocaPer( oaApo:HrIntNotTb , y , oaApo:HrIntNotEf , y , .T. ), NIL)),;
												(IF( ( "I" +  SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagNotInt,;
													oAponta:aApo[oaApo:AdicNotAut,y] := SomaHoras(oAponta:aApo[oaApo:AdicNotAut,y] , x ), NIL)))})
			
			
			aEval( oAponta:aApo[oaApo:HeIntNotAu],;
						{ |x,y| IF( y > 1 .And. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagInt,;
									(oAponta:aApo[oaApo:HrIntNotEf,y] := SubHoras(oAponta:aApo[oaApo:HrIntNotEf,y] , x )) , Nil)})
			
			If oAponta:lSepAcrNot
				aEval( oAponta:aApo[oaApo:HrIntNotTb],;
						{ |x,y| IF( y > 1 .And. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagNotInt,;
						(oAponta:aApo[oaApo:AdicNotAut,y] := SomaHoras(oAponta:aApo[oaApo:AdicNotAut,y] , x )) , Nil)})

				aEval( oAponta:aApo[oaApo:HeIntNotAu],;
						{ |x,y| IF( y > 1 .And. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagNotInt,;
						(oAponta:aApo[oaApo:AdicNotAut,y] := SubHoras(oAponta:aApo[oaApo:AdicNotAut,y] , x )) , Nil)})

				aEval( oAponta:aApo[oaApo:AcNotHeInt],;
						{ |x,y| If(y > 1, oAponta:aApo[oaApo:AcrAdiNot,y] := SubHoras(oAponta:aApo[oaApo:AcrAdiNot,y] , x ),;
						oAponta:aApo[oaApo:AcrAdiNot,y] := SubHoras(oAponta:aApo[oaApo:AcrAdiNot,y] , x ))})
			EndIf

			// -- Altero as informações de hora extra de intervalo para entrada antecipada, 
			// -- 2E, 3E e 4E, para as posições anteriores, para que assim seja subtraída
			// -- as Horas Extras sempre na posição onde está o total de horas de intervalo
			For nO := 3 To Len(oAponta:aApo[oaApo:HrIntNotEf]) Step 2 
				oAponta:aApo[oaApo:HrIntNotEf,nO-1] := SomaHoras(oAponta:aApo[oaApo:HrIntNotEf,nO],oAponta:aApo[oaApo:HrIntNotEf,nO-1])
				oAponta:aApo[oaApo:HrIntNotEf,nO] := 0  
			Next

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Totaliza as Horas de Acrescimo Noturno Destacado  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If oAponta:lAcreNot
				fAcreNot()
			Else
				aEval( oAponta:aApo[oaApo:HrIntNotEf], { |x, y| If( "I" +  SubStr( oAponta:aSiglaMarc[ y ], 1, 1 ) $ oAponta:cPagNotInt, oAponta:aApo[oaApo:AdicNotAut,y] := SomaHoras(oAponta:aApo[oaApo:AdicNotAut,y], x ), )  } )
			Endif

		EndIF
	EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Final do Calculo das Horas Trabalhadas         ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Totaliza as Horas Trabalhadas                    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
nHr1 := 0
aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Totaliza as Horas Trabalhadas Tabela             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
nHr2 := 0
aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x| nHr2 := SomaHoras( nHr2 , x ) } )
aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x| nHr2 := SomaHoras( nHr2 , x ) } )

IF nHr1 == 0 .And. !oAponta:lAtestMed  //-- Aponta Falta Integral
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Zera a Matriz de Apontamentos pois neste caso deve³
	³rao sem apontadas apenas as Faltas.               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aFill( oAponta:aApo[oaApo:Atrasos]		, 0 )
	aFill( oAponta:aApo[oaApo:MeiaFalta]	, 0 )
	aFill( oAponta:aApo[oaApo:SaidaAnte]	, 0 )
	aFill( oAponta:aApo[oaApo:SaidaExpe]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNorAu]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNorFx]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNorNa]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNotAu]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNotFx]	, 0 )
	aFill( oAponta:aApo[oaApo:HeIntNotNa]	, 0 )
	IF (oAponta:lRF0ChkTable)
		aFill( oAponta:aApoHr[oaApo:Atrasos]	, {} )
		aFill( oAponta:aApoHr[oaApo:MeiaFalta]	, {} )
		aFill( oAponta:aApoHr[oaApo:SaidaAnte]	, {} )
		aFill( oAponta:aApoHr[oaApo:SaidaExpe]	, {} )
	Endif
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Nao Zera as Horas Extras pois estas podem ter sido³
	³efetuadas Antes ou Depois do Expediente           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	//aFill( oAponta:aApo[oaApo:HeNormal]	, 0 )
	//aFill( oAponta:aApo[oaApo:HeNormalFx]	, 0 )
	//aFill( oAponta:aApo[oaApo:HeNorNAut]	, 0 )
	//aFill( oAponta:aApo[oaApo:HeNotAutor]	, 0 )
	//aFill( oAponta:aApo[oaApo:HeNotNaoAu]	, 0 )
	//aFill( oAponta:aApo[oaApo:HeNoturnFx]	, 0 )
	IF ( oAponta:lHnotFal ) //--Se Considerar a Hora Noturna Reduzida para a Apuracao das Faltas
		aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
															 		IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbTabel,y,oaApo:Falta,y,.T.),NIL);
			 } )
		aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
										 		       IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbNotTb,y,oaApo:Falta,y,.T.),NIL);
			  } )

	    aEval( oAponta:aApo[oaApo:HrIntTabel],;
				{ |x,y| IF(	( ( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
								   (oAponta:aApo[oaApo:FaltaInter,y] := SomaHoras(oAponta:aApo[oaApo:FaltaInter,y],x),;
								   	IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrIntTabel,y,oaApo:FaltaInter,y,.T.),;
								   	 NIL;
						  );
						),;
					    NIL;
					  );
		    };
		  )

    	aEval( oAponta:aApo[oaApo:HrIntNotTb],;
				{ |x,y| IF(	( 	( "I" + SubStr(oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
									(oAponta:aApo[oaApo:FaltaIntNt,y] := SomaHoras(oAponta:aApo[oaApo:FaltaIntNt,y] , x ),;
									 IF(	oAponta:lRF0ChkTable,;
									 		oAponta:AlocaPer(oaApo:HrIntNotTb,y, oaApo:FaltaIntNt,y,.T.),;
									        NIL;
						     		   );
					      	),;
					      	NIL;
					    	);
		      };
		  )

   	Else

		aEval( oAponta:aApo[oaApo:HrTrabTbNN] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y] , x ) ,;
							 						IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrabTbNN,y,oaApo:Falta,y,.T.),NIL);
							 					 };
 			 )
		aEval( oAponta:aApo[oaApo:HrIntTbNNt],;
				{ |x,y| IF(( ( "I" + SubStr(oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
							(oAponta:aApo[oaApo:FaltaInter,y] := SomaHoras(oAponta:aApo[oaApo:FaltaInter,y] , x),;
							IF( oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrIntTbNNt,y,oaApo:FaltaInter,y,.T.),;
							    NIL;
							  );
							),;
						    NIL;
						  );
			    };
			  )

	EndIF

EndIF

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ApontaHeNoMvFree ³Autor³Marinaldo de Jesus ³ Data ³17/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Apontar Horas Extras para Dias Nao Trabalhados para    Regras³
³          ³que nao Possuam Horario Movel Livre							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ApontaHeNoMvFree()
Local nP
Local nPPlus1
Local nIndice
//Local nHorasTot	:= 0
//Local nHorasTrab

If !oAponta:lAtestMed .Or. (oAponta:lAtestMed .And. oAponta:lAponHeAfa)
	oAponta:aHrTrab := {} //Aqui oAponta:aHrTrab tem a Mesma Estrutura de oAponta:aHoras
	aEval( oAponta:aHoras , { |y| IF( ( y[3] == "M" ) , aAdd( oAponta:aHrTrab , aClone( y ) ) , NIL ) } )
EndIf
oAponta:nLenHoras	:= Len( oAponta:aHrTrab )
oAponta:nElem		:= IF( oAponta:nLenHoras %2 >= 1 , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )

For nP := 1 To oAponta:nElem Step 2
	nPPlus1 := ( nP + 1 )
	//-- Indice para a matriz de apontamento oAponta:aApo.
	nIndice := Min( nP , oAponta:nTotMarcTab )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Calcula Prima Dominical, Descanso Laborado,	   ³
	³Festivo Laborado.								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	fAdicionais(	oAponta:aHrTrab[nP		,	1]	,;	//01 -> Data 1
					oAponta:aHrTrab[nP		,	2]	,;	//02 -> Hora 1
					oAponta:aHrTrab[nPPlus1	,	1]	,;	//03 -> Data 2
					oAponta:aHrTrab[nPPlus1	,	2]	,;	//04 -> Hora 2
					Nil								,;	//05 -> <@>Horas Normais Apontadas
					Nil								,;	//06 -> <@>Horas Noturnas Apontadas
					Nil								,;	//07 -> Apontar Horas Noturnas
					oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
					Nil								,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
					oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
					oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
					nIndice							,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
					oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
		  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
		  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
			   )

	nP += fExtras(	oAponta:aHrTrab[ nP			,	1 ]	,;	//01 -> Data da 1a Marcacao
					oAponta:aHrTrab[ nP			,	2 ]	,;	//02 -> Hora da 1a Marcacao
					oAponta:aHrTrab[ nPPlus1	,	1 ]	,;	//03 -> Data da 2a Marcacao
					oAponta:aHrTrab[ nPPlus1	,	2 ]	,;  //04 -> Hora da 2a Marcacao
					oAponta:aSiglaMarc[ nIndice ]		,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
					nIndice								,;	//06 -> Indice de oAponta:aApo
					.T.									,;	//07 -> 1o Dia do Apontamento
					.F.									,;	//08 -> Hora Extra Intervalo ( Entrada )
					Nil									,;  //09 -> Forca o Tipo do Dia como Trabalhado
					.F.									;	//10 -> Calcula Adicionais Especiais (Prima Dominical, etc...)
				  )

Next nP

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Limita a Prima Dominical ao Total de horas Previstas	 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
//-- Se for domingo e se a regra determina o calculo da Prima Dominical
//-- Transfere as horas da tabela para o calculo da Prima Dominical.
/*
IF Dow(oAponta:dData) == 1 .and. oAponta:lPrimDom

    nHorasTrab:= 0

    //-- Obtem o total de Horas trabalhadas
    For nI:= oAponta:nPosCalend To Len(oAponta:aTabCalend)
    	If oAponta:aTabCalend[ nI, CALEND_POS_ORDEM ] <> oAponta:cOrdem
    	   Exit
    	EndIF
    	nHorasTrab:=SomaHoras( nHorasTrab, oAponta:aTabCalend[nI, CALEND_POS_HRS_TRABA ])
	Next nI
    //-- se Existir Horario na Tabela e as Horas Efetivamente trabalhadas superar as horas
    //-- previstas limita as horas previstas
	IF  !Empty(nHorasTrab) .AND. ( nHorasTrab < nHorasTot )
		//
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Zera a Prima Dominical							     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aFill( oAponta:aApo[oaApo:PrimDom]		, 0 )

        //-- Remonta o total de Horas para a Prima Dominical
		aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x,y| oAponta:aApo[oaApo:PrimDom,y]:= SomaHoras(oAponta:aApo[oaApo:PrimDom,y],x) } )
		aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x,y| oAponta:aApo[oaApo:PrimDom,y]:= SomaHoras(oAponta:aApo[oaApo:PrimDom,y],x) } )
	EndIF

EndIF
*/

oAponta:aHrTrab := {}

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ApontaTrbMvFree	 ³Autor³Marinaldo de Jesus ³ Data ³17/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Apontar Horas Trabalhadas, Extras, Saidas Antecipadas para Ti³
³          ³po de Dia Trabalhado e Horario Movel Livre					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ApontaTrbMvFree()

Local aNewHrTrab	:= { Nil, Nil }
Local aPerNot		:= {}
Local aPerDia		:= {}
Local aHENot		:= {}
Local aAdicionais	:= {}

Local nIndice
Local nO
Local nOPlus1
Local nHr1
Local nHr2
Local nHr3
Local nHr4
Local nHr5
Local nHr6
Local nHoras		:=	0
Local nHorasTot		:= 	0
Local dDtApo		:= Ctod('')
Local nPosData		:= 0
Local nLenTab		:= 0
Local nIdxHrTrab	:= 0
Local nTemp			:= 0
Local nMinNot		:= 0
Local nPosAdiNot	:= 0

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicio do Calculo das Horas Trabalhadas        ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Monta o aHrTrab para Regra de Horario Movel   Li³
	³vre											 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If !oAponta:lAtestMed .Or. (!oAponta:lAponHrAfa .And. !oAponta:lAponHeAfa)
		oAponta:aHrTrab := {}
		oAponta:nElem := 0
		aEval(	oAponta:aHoras,	{ |x|	IF( x[3] == "M",;
												( ++oAponta:nElem, oAponta:AddHrTrab(	x[1]	 																	,;
																						x[2]	 																	,;
																						IF(oAponta:nElem%2>0,oAponta:aSiglaMarc[01],oAponta:aSiglaMarc[02]),;
																						x[14]																 		 ;
																					);
												),;
												NIL;
											);
									};
			)
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Ordena as Marcacoes do Dia com as Marcacoes da  Ta³
		³bela											   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:SortaHrTrab()
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Para as Horas Trabalhadas Deve-se Sempre  Procurar³
	³pela Entrada									   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nIndice := 1

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Totaliza as Horas Trabalhadas                    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:ChkHrTDupl()
	oAponta:nElem := IF( ( ( oAponta:nLenHoras%2 ) >= 1 ) , ( oAponta:nLenHoras - 1 ) , oAponta:nLenHoras )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ajusta as Horas Trabalhadas em funcao do Minimo  ³
	³ a ser pago.									   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If oAponta:nHrsPgs > 0

		For nO := 1 To 	oAponta:nElem  Step 2

			nOPlus1 := ( nO + 1 )
			nHr1 	:= nHr2 := nHr3 := 0

		   	nHoras 	:= fCalHoras(		oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
						  				oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
										oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
										oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
										@nHr1							,;	//05 -> <@>Horas Normais Apontadas
										@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
										Nil								,;	//07 -> Apontar Horas Noturnas
										oAponta:dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
										@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
										oAponta:lAcreNot				;	//13 -> Apenas Acrescimo Noturno
								   )

			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Totaliza as horas trabalhadas 					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nHorasTot		:= SomaHoras( nHorasTot	,	nHoras  )
		Next  nO

		If oAponta:lAponHrafa .And. !oAponta:lAponHeAfa .And. oAponta:lAtestMed 
			oAponta:nHrsPgs := nHorasTot
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Acrescenta as Horas Faltantes no Horario de Saida³
		³ da ultima marcacao.							   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If (nHorasTot < oAponta:nHrsPgs)  .AND. !Empty(nHorasTot)

			nDifHoras	:= SubHoras(oAponta:nHrsPgs, nHorasTot )

			aNewHrTrab	:= RetFimTab(   oAponta:aHrTrab[nOPlus1	,	1]  ,;  //01 -> Data
		 	 							oAponta:aHrTrab[nOPlus1	,	2] 	,;  //02 -> Hora
		 	 							nDifHoras			 			,;  //03 -> Horas a Somar
		 	 							0								,;  //04 -> Horas de Intervalo
	 	 								Nil								,;	//05 -> Considera Horas Noturnas
										oAponta:dData					,;	//06 -> Data Inicial Para a Hora Noturna
										oAponta:nIniHnot				,;	//07 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//08 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//09 -> Minutos do Horario Noturno
										oAponta:lAcreNot				;	//10 -> Apenas Acrescimo Noturno
		 	 						 )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Substitui as Horas Trabalhadas pelas Calculadas  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			oAponta:aHrTrab[nOPlus1	,	1]	:= aNewHrTrab[1]
			oAponta:aHrTrab[nOPlus1	,	2]	:= aNewHrTrab[2]
			nDifHoras 						:= 0.00

		Endif
	Endif

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Totaliza as Horas Trabalhadas                    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nO := 1 To oAponta:nElem Step 2
		nOPlus1 := ( nO + 1 )
		nHr1 := nHr2 := nHr3 := 0
		oAponta:CalcPerHr(  oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							@nHr1							,;	//05 -> <@>Horas Normais Apontadas
							@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
							NIL								,;	//07 -> Apontar Horas Noturnas
							oAponta:dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
							@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot						,;	//14 -> Periodo Horario Noturno
							@aPerDia						;	//15 -> Periodo Horario Diurno
						   )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Para Horario Movel Livre adotaremos ultima saida ³
		³ como indice para calculo do adicional noturno    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oAponta:aHrTrab[ nO , 05 ] := nHr1
		oAponta:aHrTrab[ nO , 06 ] := nHr2
		oAponta:aHrTrab[ nO , 07 ] := nHr3
		oAponta:aApo[ oaApo:HrTrbEfeti , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbEfeti , nIndice ] , oAponta:aHrTrab[ nO , 5 ] )
		oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
		
		If ( oAponta:lAcreNot )
			If oAponta:lSepAcrNot
				nMinNot := SomaHoras(nMinNot,oAponta:aHrTrab[nO,07])
				oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ] := SomaHoras(oAponta:aApo[oaApo:HrTrbNotEf,nIndice],oAponta:aHrTrab[nO,07])
			Else
				oAponta:aApo[ oaApo:HrTrbNotEf , nIndice ] := SomaHoras(oAponta:aApo[oaApo:HrTrbNotEf,nIndice],oAponta:aHrTrab[nO,07])
			EndIf
		EndIF
		
		IF ( oAponta:lRF0ChkTable )
			oAponta:aApoHr[ oaApo:HrTrbEfeti , nIndice ]:= aClone( aPerDia )
			oAponta:aApoHr[ oaApo:HrTrbNotEf , nIndice ]:= aClone( aPerNot )
		EndIF

		//-- Se Existe o Identificador de Acrescimo Noturno
		//-- Se Destaca o Acrescimo Noturno
		//-- Entao o Adicional Noturno contera o valor integral
		//-- e destacamos o acrescimo no identificador correspondente
		If oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
			If oAponta:lSepAcrNot
				oAponta:aApo[oaApo:AcrAdiNot,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AcrAdiNot,nIndice],oAponta:aHrTrab[nO,7])
				oAponta:aApo[oaApo:AcreAuto,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AcreAuto,nIndice],oAponta:aHrTrab[nO,7])
				oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotAut,nIndice],oAponta:aHrTrab[nO,6])
			Else
				oAponta:aApo[oaApo:AcreAuto,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AcreAuto,nIndice],oAponta:aHrTrab[nO,7])
				oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotAut,nIndice],oAponta:aHrTrab[nO,7])
				oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotAut,nIndice],oAponta:aHrTrab[nO,6])
			EndIf
		Else
			IF ( oAponta:aHrTrab[ nO , 7 ] > 0 )
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 7 ] )
			Else
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut , nIndice ] , oAponta:aHrTrab[ nO , 6 ] )
			EndIF
		Endif


		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Calcula Prima Dominical, Descanso Laborado,	   ³
		³Festivo Laborado.								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

		fAdicionais(	oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
						oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
						oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
						oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
						NIL								,;	//05 -> <@>Horas Normais Apontadas
						NIL								,;	//06 -> <@>Horas Noturnas Apontadas
						Nil								,;	//07 -> Apontar Horas Noturnas
						oAponta:dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
						NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
						nIndice							,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
						oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
			  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
			  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
				   )

	Next nO
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Totaliza as Horas de Intervalo.                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( oAponta:cTipoDia == "S" )
		nHr1 := 0
		aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
		aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
		IF ( nHr1 > 0 )
			aEval( oAponta:aApo[oaApo:HrIntTabel],;
					{ |x,y| IF(	( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
								(oAponta:aApo[oaApo:HrIntEfeti,y] := SomaHoras(oAponta:aApo[oaApo:HrIntEfeti,y] , x ),;
								 IF( oAponta:lRF0ChkTable,;
								 	 oAponta:AlocaPer( oaApo:HrIntTabel , y , oaApo:HrIntEfeti , y , .T. ),;
								 	NIL;
								   );
							   	 ),;
								 NIL;
							   );
					  };
				  )


			aEval( oAponta:aApo[oaApo:HeIntNorAu],;
						{ |x,y| IF( y > 1 .and. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagInt,;
									 (oAponta:aApo[oaApo:HrIntEfeti,y] := SubHoras(oAponta:aApo[oaApo:HrIntEfeti,y] , x ),;
									  IF( oAponta:lRF0ChkTable,;
									  	 oAponta:AlocaPer( oaApo:HrIntTabel , y , oaApo:HrIntEfeti , y , .T. ),;
									     NIL;
									     );
							   	     ),;
									NIL;
								   );
						 };
					  )

			aEval( oAponta:aApo[oaApo:HrIntNotTb],;
									{ |x,y| IF( ( "I" +  SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
												 (oAponta:aApo[oaApo:HrIntNotEf,y] := SomaHoras(oAponta:aApo[oaApo:HrIntNotEf,y] , x ),;
												  IF( oAponta:lRF0ChkTable,;
												  	 oAponta:AlocaPer( oaApo:HrIntNotTb , y , oaApo:HrIntNotEf , y , .T. ),;
												     NIL;
												     );
										   	     ),;
 	     										NIL;
											   );
									 };
								  )


			aEval( oAponta:aApo[oaApo:HeIntNotAu],;
						{ |x,y| IF( y > 1 .and. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagInt,;
									 (oAponta:aApo[oaApo:HrIntNotEf,y] := SubHoras(oAponta:aApo[oaApo:HrIntNotEf,y] , x ),;
									  IF( oAponta:lRF0ChkTable,;
									  	 oAponta:AlocaPer( oaApo:HrIntNotTb , y , oaApo:HrIntNotEf , y , .T. ),;
									     NIL;
									     );
							   	     ),;
									NIL;
								   );
						 };
					  )

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Totaliza as Horas de Acrescimo Noturno Destacado  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If oAponta:lAcreNot
				fAcreNot()
			Else
				aEval( oAponta:aApo[oaApo:HrIntNotEf], { |x, y| If( y > 1 .And. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ], 1, 1) ) $ oAponta:cPagNotInt,;
				oAponta:aApo[oaApo:AdicNotAut,y] := SomaHoras(oAponta:aApo[oaApo:AdicNotAut,y] , x ),;
				NIL )})
			Endif

		EndIF
	EndIF

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Final do Calculo das Horas Trabalhadas         ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Totaliza as Horas Trabalhadas                    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
nHr1 := 0
aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
nHr2 := 0
aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr2 := SomaHoras( nHr2 , x ) } )
nHr3 := SomaHoras( nHr1 , nHr2 )
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Totaliza as Horas Trabalhadas Tabela             ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
nHr4 := 0
aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x| nHr4 := SomaHoras( nHr4 , x ) } )
nHr5 := 0
aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x| nHr5 := SomaHoras( nHr5 , x ) } )
nHr6 := SomaHoras( nHr4 , nHr5 )

If (oAponta:lAtestMed .And. oAponta:lAponHrAfa .And. oAponta:lAponHeAfa .And. nHr3 < nHr6) .Or. (oAponta:lAtestMed .And. oAponta:lAponHrAfa .And. !oAponta:lAponHeAfa .And. nHr3 < nHr6)
	nHr6 := nHr3
EndIf

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Apenas Quando o Periodo de Apuracao for Diario   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF ( oAponta:cPerHmov == "D" )

	IF ( nHr3 == 0 )//-- Aponta Falta Integral

	 		IF ( oAponta:lHnotFal ) //--Se Considerar a Hora Noturna Reduzida para a Apuracao das Faltas
				aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
															 		IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbTabel,y,oaApo:Falta,y,.T.),NIL);
				 										};
				 )
				aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
															IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrbNotTb,y,oaApo:Falta,y,.T.),NIL);
				  										};
					 )
			    aEval( oAponta:aApo[oaApo:HrIntTabel],;
						{ |x,y| IF(	( ( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
										   (oAponta:aApo[oaApo:FaltaInter,y] := SomaHoras(oAponta:aApo[oaApo:FaltaInter,y],x),;
										   	IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrIntTabel,y,oaApo:FaltaInter,y,.T.),;
										   	 NIL;
								  );
								),;
							    NIL;
							  );
				    };
				  )

		    	aEval( oAponta:aApo[oaApo:HrIntNotTb],;
						{ |x,y| IF(	( 	( "I" + SubStr(oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
											(oAponta:aApo[oaApo:FaltaIntNt,y] := SomaHoras(oAponta:aApo[oaApo:FaltaIntNt,y] , x ),;
											 IF(	oAponta:lRF0ChkTable,;
											 		oAponta:AlocaPer(oaApo:HrIntNotTb,y, oaApo:FaltaIntNt,y,.T.),;
											        NIL;
								     		   );
							      	),;
							      	NIL;
							    	);
				      };
				  )
			Else
				aEval( oAponta:aApo[oaApo:HrTrabTbNN] , { |x,y| oAponta:aApo[oaApo:Falta,y] := SomaHoras(oAponta:aApo[oaApo:Falta,y],x),;
								 					   		IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrTrabTbNN,y,oaApo:Falta,y,.T.),NIL);
		 		   										};
		 		     )
				aEval( oAponta:aApo[oaApo:HrIntTbNNt],;
						{ |x,y| IF(( ( "I" + SubStr(oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" ),;
									(oAponta:aApo[oaApo:FaltaInter,y] := SomaHoras(oAponta:aApo[oaApo:FaltaInter,y] , x),;
									IF( oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrIntTbNNt,y,oaApo:FaltaInter,y,.T.),;
									    NIL;
									  );
									),;
								    NIL;
								  );
					    };
					  )
			EndIF

			//Apura as Horas Nao Realizadas
			aEval( oAponta:aApo[oaApo:HrTrbTabel] , { |x,y| oAponta:aApo[oaApo:HrNorNaoRe,y] := SomaHoras(oAponta:aApo[oaApo:HrNorNaoRe,y] , x ) } )
			aEval( oAponta:aApo[oaApo:HrTrbNotTb] , { |x,y| oAponta:aApo[oaApo:HrNotNaoRe,y] := SomaHoras(oAponta:aApo[oaApo:HrNotNaoRe,y] , x ) } )

	ElseIF ( nHr3 > nHr6 ) .And. (SubHoras(nHr3,nHr6) >= 0.01)	//-- Aponta Hora Extra ap¢s o expediente

            //-- Preserva o Calculo dos Adicionais
			aAdicionais	:= { aClone( oAponta:aApo[oaApo:PrimDom] ), aClone( oAponta:aApo[oaApo:DescLab] ) , aClone( oAponta:aApo[oaApo:FestLab] ), aClone( oAponta:aApo[oaApo:HrIntNotTb]), aClone(oAponta:aApo[oaApo:HrIntTabel] ) }
			
			
			//-- Zera as Horas Extras Apontadas que serao recaculadas pela fHeMovel()
			oAponta:ZeraApo()

			If oAponta:lAtestMed .And. oAponta:lAponHeAfa
				fGeraApoAf(2)
			EndIf

			//-- Apura e Grava as Horas Extras
			fHeMovel(	.T.,;																		//01 -> Ira considerar Horas Trabalhadas da Tabela
						(;
							 oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_TIPO_DIA ] == "F";//02 -> Dia em Questao Corresponde a Feriado
							 .And.;
							!oAponta:aTabCalend[ oAponta:nPosCalend , CALEND_POS_TRAB_FERIADO ];	//( Apenas se Funcionario nao trabalha em Feriado )
						 );
					 )

			//-- Recalcula Adicional Noturno
			aHeNot	:= fAdnMovel()

	    	//-- Se Existe o Identificador de Acrescimo Noturno
			//-- Se Destaca o Acrescimo Noturno
			//-- Entao o Adicional Noturno contera o valor integral
			If oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
				If oAponta:lSepAcrNot
					nMinNot := aHeNot[2]
					oAponta:aApo[oaApo:AcrAdiNot,oAponta:nTotMarcTab]	:= aHeNot[2]
					oAponta:aApo[oaApo:AcreAuto,oAponta:nTotMarcTab]	:= aHeNot[2]
					oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]	:= aHeNot[1]
					oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]	:= SomaHoras(oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab],aHeNot[2])
					oAponta:aApo[oaApo:AdicNotAut,oAponta:nTotMarcTab]	:= aHeNot[1]
				Else
					oAponta:aApo[oaApo:AcreAuto,oAponta:nTotMarcTab]	:= aHeNot[2]
					oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]	:= aHeNot[1]
					oAponta:aApo[oaApo:AdicNotAut,oAponta:nTotMarcTab]	:= oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]
					oAponta:aApo[oaApo:AdicNotAut,oAponta:nTotMarcTab]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotAut,oAponta:nTotMarcTab],aHeNot[2])
				EndIf
			Else
				oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]	:= aHeNot[1]
				oAponta:aApo[oaApo:AdicNotAut,oAponta:nTotMarcTab]	:= oAponta:aApo[oaApo:HrTrbNotEf,oAponta:nTotMarcTab]
			EndIF


		    //-- Recalcula Horas Normais
		    If lGeraSuml
				oAponta:aApo[oaApo:HrTrbEfeti,oAponta:nTotMarcTab]	:= nHr1
		    Else
				If oAponta:lSepAcrNot
					oAponta:aApo[oaApo:HrTrbEfeti,oAponta:nTotMarcTab]	:= SubHoras( Round(nHr6,2) , Round(SomaHoras(oAponta:aApo[oaApo:AdicNotAut , oAponta:nTotMarcTab],nMinNot),2) )
				Else
					oAponta:aApo[oaApo:HrTrbEfeti,oAponta:nTotMarcTab]	:= SubHoras( Round(nHr6,2) , Round(oAponta:aApo[oaApo:AdicNotAut , oAponta:nTotMarcTab],2) )
				EndIf
			EndIf

			//-- Restaura o valor original da Prima Dominical
			oAponta:aApo[oaApo:PrimDom]	:= aClone(aAdicionais[1])
			oAponta:aApo[oaApo:DescLab]	:= aClone(aAdicionais[2])
			oAponta:aApo[oaApo:FestLab]	:= aClone(aAdicionais[3])
			oAponta:aApo[oaApo:HrIntNotTb] := aClone(aAdicionais[4])
			oAponta:aApo[oaApo:HrIntTabel] := aClone(aAdicionais[5])
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Totaliza as Horas de Intervalo.                   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF ( oAponta:cTipoDia == "S" )
				nHr1 := 0
				aEval( oAponta:aApo[oaApo:HrTrbEfeti] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
				aEval( oAponta:aApo[oaApo:HrTrbNotEf] , { |x| nHr1 := SomaHoras( nHr1 , x ) } )
				IF ( nHr1 > 0 )
					aEval( oAponta:aApo[oaApo:HrIntTabel],;
							{ |x,y| IF(	( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
										(oAponta:aApo[oaApo:HrIntEfeti,y] := SomaHoras(oAponta:aApo[oaApo:HrIntEfeti,y] , x ),;
										 IF( oAponta:lRF0ChkTable,;
										 	 oAponta:AlocaPer( oaApo:HrIntTabel , y , oaApo:HrIntEfeti , y , .T. ),;
										 	NIL;
										   );
									   	 ),;
										 NIL;
									   );
							  };
						  )
		
		
					aEval( oAponta:aApo[oaApo:HeIntNorAu],;
								{ |x,y| IF( y > 1 .and. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagInt,;
											 (oAponta:aApo[oaApo:HrIntEfeti,y] := SubHoras(oAponta:aApo[oaApo:HrIntEfeti,y] , x ),;
											  IF( oAponta:lRF0ChkTable,;
											  	 oAponta:AlocaPer( oaApo:HrIntTabel , y , oaApo:HrIntEfeti , y , .T. ),;
											     NIL;
											     );
									   	     ),;
											NIL;
										   );
								 };
							  )
		
					aEval( oAponta:aApo[oaApo:HrIntNotTb],;
											{ |x,y| IF( ( "I" +  SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt,;
														 (oAponta:aApo[oaApo:HrIntNotEf,y] := SomaHoras(oAponta:aApo[oaApo:HrIntNotEf,y] , x ),;
														  IF( oAponta:lRF0ChkTable,;
														  	 oAponta:AlocaPer( oaApo:HrIntNotTb , y , oaApo:HrIntNotEf , y , .T. ),;
														     NIL;
														     );
												   	     ),;
		 	     										NIL;
													   );
											 };
										  )
		
		
					aEval( oAponta:aApo[oaApo:HeIntNotAu],;
								{ |x,y| IF( y > 1 .and. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ] , 1 , 1 ) ) $ oAponta:cPagInt,;
											 (oAponta:aApo[oaApo:HrIntNotEf,y] := SubHoras(oAponta:aApo[oaApo:HrIntNotEf,y] , x ),;
											  IF( oAponta:lRF0ChkTable,;
											  	 oAponta:AlocaPer( oaApo:HrIntNotTb , y , oaApo:HrIntNotEf , y , .T. ),;
											     NIL;
											     );
									   	     ),;
											NIL;
										   );
								 };
							  )
		
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Totaliza as Horas de Acrescimo Noturno Destacado  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					If oAponta:lAcreNot
						fAcreNot()
					Else
						aEval( oAponta:aApo[oaApo:HrIntNotEf], { |x, y| If( y > 1 .And. ( "I" +  SubStr( oAponta:aSiglaMarc[ y - 1 ], 1, 1) ) $ oAponta:cPagNotInt,;
								oAponta:aApo[oaApo:AdicNotAut,y] := SomaHoras(oAponta:aApo[oaApo:AdicNotAut,y] , x ),;
								NIL )})
					Endif
		
				EndIF
			EndIF

	ElseIF ( nHr3 < nHr6 ) .And. (SubHoras(nHr6,nHr3) >= 0.01) //-- Aponta Saida Antecipada

		If !( oAponta:lHnotSai ) .AND. Len( oAponta:aHrTrab ) > 0
			nHr1 := nHr2 := nHr3 := nHr4 := nHr5 := nHr6 := 0
			//Busca até que a data da marcação seja encontrada no aTabCalend (Pode ser que a marcação tenha sido feita no dia anterior)
			Do While(nPosData == 0) .And. nIdxHrTrab < Len(oAponta:aHrTrab)
				nIdxHrTrab++
				dDtApo		:= oAponta:aHrTrab[nIdxHrTrab,1]
				nPosData	:= Ascan(aTabCalend , {|x| x[CALEND_POS_DATA_APO] == dDtApo })
				If nPosData > 0
					If Len(aTabCalend[nPosData, CALEND_POS_LIM_MARCACAO]) > 0
						If aTabCalend[nPosData, CALEND_POS_LIM_MARCACAO,1] >= dDtApo .AND. aTabCalend[nPosData, CALEND_POS_LIM_MARCACAO,2] <= oAponta:aHrTrab[nIdxHrTrab,2]
							nPosData	:= Ascan(aTabCalend , {|x| x[CALEND_POS_DATA_APO] == dDtApo})
						EndIf
					EndIf

					IF nPosData > 0
						If !(aTabCalend[nPosData, CALEND_POS_TIPO_MARC] == "1E")
							dDtApo		:= aTabCalend[nPosData	, CALEND_POS_DATA_APO]
							nPosData	:= Ascan(aTabCalend , {|x| x[CALEND_POS_DATA_APO] == dDtApo})
						EndIf
					EndIf
				Endif
			EndDo
			nHoras		:= 0
			nLenTab		:= Len(aTabCalend)

			If nPosData > 0
				Do While ( (nPosData <= nLenTab) .AND. (dDtApo == aTabCalend[nPosData , CALEND_POS_DATA_APO]) )
					nTemp	:= fCalHoras(	aTabCalend[nPosData+1	, CALEND_POS_DATA] ,;
											aTabCalend[nPosData+1	, CALEND_POS_HORA] ,;
											aTabCalend[nPosData		, CALEND_POS_DATA] ,; 
											aTabCalend[nPosData 	, CALEND_POS_HORA] )				
					nHoras := SomaHoras( nHoras , nTemp )
					nPosData+=2	
				EndDo
			EndIf

			For nO := 1 To oAponta:nElem Step 2
				nOPlus1 := ( nO + 1 )

				fCalHoras(		oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							  				oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
											oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
											oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
											@nHr4							,;	//05 -> <@>Horas Normais Apontadas
											@nHr5							,;	//06 -> <@>Horas Noturnas Apontadas
											NIL								,;	//07 -> Apontar Horas Noturnas
											oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
											@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
											oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
											oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
											60								,;	//12 -> Minutos do Horario Noturno
											oAponta:lAcreNot				;	//13 -> Apenas Acrescimo Noturno
									   )
			Next

			nHr3 := SomaHoras( nHr4 , nHr5 )
			nHr6 := nHoras

			oAponta:aApo[oaApo:SaidaAnte,oAponta:nTotMarcTab ]	:= SubHoras( nHr6 , nHr3 )

			oAponta:SaidaAntPreAbo(oAponta:nTotMarcTab, oAponta:dData)
			//Aponta Horas Normais Nao Realizadas
			oAponta:aApo[oaApo:HrNorNaoRe,oAponta:nTotMarcTab ]	:= Max( SubHoras( nHr4 , nHr1 ) , 0 )
			oAponta:aApo[oaApo:HrNorNaoRe,oAponta:nTotMarcTab ]	:= Min(;
																			oAponta:aApo[ oaApo:SaidaAnte,oAponta:nTotMarcTab ] ,;
																			oAponta:aApo[ oaApo:HrNorNaoRe,oAponta:nTotMarcTab ] ;
														   			   )
			//Aponta Horas Noturnas Nao Realizadas
			oAponta:aApo[oaApo:HrNotNaoRe,oAponta:nTotMarcTab ]	:= Max( SubHoras( nHr5 , nHr2 ) , 0 )
			oAponta:aApo[oaApo:HrNotNaoRe,oAponta:nTotMarcTab ]	:= Min(;
																			oAponta:aApo[ oaApo:SaidaAnte,oAponta:nTotMarcTab ] ,;
																			oAponta:aApo[ oaApo:HrNotNaoRe,oAponta:nTotMarcTab ];
														   			  )
		Else

			oAponta:aApo[oaApo:SaidaAnte,oAponta:nTotMarcTab ]	:= SubHoras( nHr6 , nHr3 )

			oAponta:SaidaAntPreAbo(oAponta:nTotMarcTab, oAponta:dData)
			//Aponta Horas Normais Nao Realizadas
			oAponta:aApo[oaApo:HrNorNaoRe,oAponta:nTotMarcTab ]	:= Max( SubHoras( nHr4 , nHr1 ) , 0 )
			oAponta:aApo[oaApo:HrNorNaoRe,oAponta:nTotMarcTab ]	:= Min(;
																			oAponta:aApo[ oaApo:SaidaAnte,oAponta:nTotMarcTab ] ,;
																			oAponta:aApo[ oaApo:HrNorNaoRe,oAponta:nTotMarcTab ] ;
														   			   )
			//Aponta Horas Noturnas Nao Realizadas
			oAponta:aApo[oaApo:HrNotNaoRe,oAponta:nTotMarcTab ]	:= Max( SubHoras( nHr5 , nHr2 ) , 0 )
			oAponta:aApo[oaApo:HrNotNaoRe,oAponta:nTotMarcTab ]	:= Min(;
																			oAponta:aApo[ oaApo:SaidaAnte,oAponta:nTotMarcTab ] ,;
																			oAponta:aApo[ oaApo:HrNotNaoRe,oAponta:nTotMarcTab ];
														   			  )

		EndIf

		 aEval( oAponta:aApo[oaApo:HrIntTabel],;
						{ |x,y| IF(	( ( "I" + SubStr( oAponta:aSiglaMarc[ y ] , 1 , 1 ) ) $ oAponta:cPagInt .and. oAponta:cIntFalt != "N" .And. y > len(oAponta:aHrTrab)),;
										   (oAponta:aApo[oaApo:FaltaInter,y] := SomaHoras(oAponta:aApo[oaApo:FaltaInter,y],x),;
										   	IF(oAponta:lRF0ChkTable,oAponta:AlocaPer(oaApo:HrIntTabel,y,oaApo:FaltaInter,y,.T.),;
										   	 NIL;
								  );
								),;
							    NIL;
							  );
				    };
				  )
		
	EndIf

EndIF

If oAponta:lSepAcrNot
	If (nPosAdiNot := aScan(oAponta:aApo[oaApo:HrTrbNotEf], {|x| x > 0 })) > 0
		oAponta:aApo[oaApo:HrTrbNotEf,nPosAdiNot] := SubHoras(oAponta:aApo[oaApo:HrTrbNotEf,nPosAdiNot],nMinNot)
	EndIf	
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³AvalAponta  ³ Autor ³Marinaldo de Jesus    ³ Data ³13/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Avaliar os Apontamentos Efetuados                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function AvalAponta( lDiaAnt )

Local lAponFer
Local lHeAutoriza

Local nW
Local nPos
Local nPos1
Local nIndice
Local nHr1
Local nHr2
Local nHr3
Local nHr4
Local nHr5
Local nHr6
Local nHrTotNot
Local nCont

Default lDiaAnt := .F.

nCont :=  If(lDiaAnt, Len(oAponta:aApo[oaApo:HeNormal]), oAponta:nTotMarcTab)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Inicio da Apuracao Final das Horas.(Opera³
³racao Pente Fino).					      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
nHr1:= 0.00
nHr2:= 0.00
nHr3:= 0.00
// Totaliza todas as horas extras realizadas no dia
For nW := 1 To nCont
	
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeNormal	, nW ])
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeNormalFx	, nW ])
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeIntNorAu	, nW ])
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeIntNorFx	, nW ])
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeIntNotAu	, nW ])
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeIntNotFx	, nW ])
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeNotAutor , nW ])
	nHr1 := SomaHoras(nHr1, oAponta:aApo[  oaApo:HeNoturnFx , nW ])
	
	nHr2:=SomaHoras(nHr2, oAponta:aApo[  oaApo:HeIntNotAu	, nW ])
	nHr2:=SomaHoras(nHr2, oAponta:aApo[  oaApo:HeIntNotFx	, nW ])
	nHr2:=SomaHoras(nHr2, oAponta:aApo[  oaApo:HeNotAutor  , nW ])
	nHr2:=SomaHoras(nHr2, oAponta:aApo[  oaApo:HeNoturnFx  , nW ])
	
Next nW

// Verifica se o total de horas extras for igual ou ficar abaixo do limite de tolerancia diario (por exemplo: <=0.10 min)
// Caso tenha superado o limite, todos os apontamentos serão considerados (por exemplo: 1E-0.05 / 2S-0.06, Total: 0.11 serao pagos como HE)
// 0u
// Senao tiver tolerancia por periodo, avalia somente a tolerancia por tipo de marcação.

IF ( (!Empty(nHr1) .And. nHr1 <= oAponta:nTolHePe) .Or. (!Empty(nHr2) .And. nHr2 <= oAponta:nTolNtHe)) .And. (oAponta:cTipoDia == "S" .Or. lApHeDtm)
	//Caso o apontamento de determinado tipo de marcacao for igual ou ficar abaixo da tolerancia para o seu tipo (por exemplo: <=0.05 min)
	//zera o apontamento pois estah dentro do limite.
	For nW := 1 To nCont
		nTolHExt  := fTolerancia( oAponta:cTolHex , nW , 2 , oAponta:dData )
		If (!Empty(nHr1) .And. nHr1 <= oAponta:nTolHePe)
			IF oAponta:aApo[  oaApo:HeNormal   , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeNormal  , nW ] := 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeNormalFx , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeNormalFx, nW ] := 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeIntNorAu , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeIntNorAu, nW ] := 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeIntNorFx , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeIntNorFx, nW ] := 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeIntNotAu , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeIntNotAu, nW ] := 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeIntNotFx , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeIntNotFx, nW ] := 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeNotAutor , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeNotAutor, nW ] := 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeNoturnFx , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeNoturnFx, nW ] := 0.00
			Endif
		EndIf
		If (!Empty(nHr2) .And. nHr2 <= oAponta:nTolNtHe)
			IF oAponta:aApo[  oaApo:HeIntNotAu	, nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeIntNotAu	, nW ]:= 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeIntNotFx	, nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeIntNotFx	, nW ]:= 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeNotAutor  , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeNotAutor  , nW ]:= 0.00
			Endif
			IF oAponta:aApo[  oaApo:HeNoturnFx  , nW ] <= nTolHExt
				oAponta:aApo[  oaApo:HeNoturnFx  , nW ]:= 0.00
			Endif
		EndIf
	Next nW
Endif

For nW := 1 To oAponta:nTotMarcTab

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem o Total de Horas Noturnas Realizadas consideran ³
	³do o Acrescimo Noturno.							   ³
	³OBS: Uso exclusivo no calculo de horas nao realizadas.³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/


	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se as Horas Extras sao Autorizadas           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( oAponta:cTipoDia == "S" )
		IF !( lHeAutoriza := ( oAponta:aSiglaMarc[nW] $ oAponta:cPagHext ) )
			IF ( ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 ) .and. oAponta:aSiglaMarc[nW] == "1S" )
				lHeAutoriza := ( "2S" $ oAponta:cPagHext )
			EndIF
		EndIF
	Else
		lHeAutoriza := ( oAponta:cTipoDia $ oAponta:cPgHeDnt )
	EndIF

	//-- Verifica se para funcionario em ferias as horas extras sao autorizadas
	IF( (lAponFer := ( oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_APON_FERIAS ] ) ))
	   lHeAutoriza:= ( oAponta:aTabCalend[ oAponta:nPosCalend	, CALEND_POS_HE_AUTO_FER ] )
	Endif

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Apuracao Para Dias Nao Trabalhados. Quando o³
	³Tipo do Dia for nao Trabalhado e Tiver passado   Pelo ³
	³Apontamento               					   		   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF (;
					( oAponta:cTipoDia != "S" );
					.and.;
					( oAponta:nIntTab > 0 );
					.and.;
					!Empty( oAponta:aHoras );
				 )

	            /*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Zera as Faltas, Atrasos e Saidas no Expediente        ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:aApo[ oaApo:Atrasos		, nW ]	:= 0
				oAponta:aApo[ oaApo:SaidaAnte	, nW ]	:= 0
				oAponta:aApo[ oaApo:SaidaExpe	, nW ]	:= 0
				oAponta:aApo[ oaApo:Falta 		, nW ]	:= 0
				oAponta:aApo[ oaApo:FaltaInter	, nW ]	:= 0
				oAponta:aApo[ oaApo:FaltaIntNt	, nW ]	:= 0
				oAponta:aApo[ oaApo:MeiaFalta	, nW ]	:= 0

				IF !( oAponta:lIntNtrab )

		            /*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Considera as Horas Apontadas como Sendo Horas Extras  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:aApo[ oaApo:HeNormal		, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNormal	, nW ]	,;
																				oAponta:aApo[  oaApo:HrTrbEfeti	, nW ]	 ;
																	 		)
					oAponta:aApo[ oaApo:HeNotAutor	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNotAutor	, nW ]	,;
																				oAponta:aApo[  oaApo:HrTrbNotEf	, nW ]   ;
																	 		)
					oAponta:aApo[ oaApo:AdicHeNotA	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:AdicHeNotA 	, nW ]	,;
																				oAponta:aApo[  oaApo:AdicNotAut	, nW ]	 ;
																	 		)
		            /*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica se Paga o Intervalo como Horas Extras em Dias³
					³Nao Trabalhados									   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF ( "S" $ oAponta:aSiglaMarc[nW] .AND. oAponta:nHrInterJd == 0 )

				        /*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Ordena aHoras em Ordem Decrescente de Marcacoes   para³
						³verificar se a Ultima Marcacao e' maior que o  Horario³
						³da Primeira Saida.                                    ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						oAponta:SortaHoras( { |x,y| ( x[17] + x[3] ) > ( y[17] + y[3] ) } )

						nPos	:= aScan( oAponta:aHoras , { |x| x[3] == oAponta:aSiglaMarc[nW] } )
		  				nPos1	:= aScan( oAponta:aHoras , { |x| x[3] == "M" } )

		  				nIndice := Min( nW + 1 , oAponta:nTotMarcTab ) //Indice correspondente a posicao Intervalo em oAponta:aApo

				        /*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Quando Pagar Horas Extras No Intervalo em Dias Nao Tra³
						³balhados e funcionario Tiver Efetuado a marcacao de In³
						³Tervalo                                               ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						IF (;
								( ( ( "I" + SubStr( oAponta:aSiglaMarc[nW] , 01 , 01 ) ) $ oAponta:cPagInt ) .and. ( oAponta:cPgIntNTrb == "S"  ) ) .or.	;
								( ( ( "I" + SubStr( oAponta:aSiglaMarc[nW] , 01 , 01 ) ) $ oAponta:cPagNotInt ) .and. ( oAponta:cPgNotINTrb == "S" ) )	;
							);
						   .and. ( nPos1 > 0 ) .and. ( nPos > 0 ) ;
						   .and. ( oAponta:aHoras[nPos1,17] > oAponta:aHoras[nPos,17] ) .and. ;
						   ( nPos := 0  , aEval( oAponta:aHoras, { |x| IF( x[3] == "M",nPos++,NIL ) } ) , ( nPos > 2 .and. nPos%2 == 0 ) )

					        /*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Restaura Ordem do aHoras                              ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							oAponta:SortaHoras()

							nHr1 := nHr2 := nHr3 := nHr4 := nHr5 := nHr6 := 0

							nHr1 := SomaHoras( nHr1 , oAponta:aApo[ oaApo:HeIntNorAu	, nW 		] )
							nHr1 := SomaHoras( nHr1 , oAponta:aApo[ oaApo:HeIntNorAu	, nIndice	] )
							nHr2 := SomaHoras( nHr2 , oAponta:aApo[ oaApo:HeIntNotAu	, nW 		] )
							nHr2 := SomaHoras( nHr2 , oAponta:aApo[ oaApo:HeIntNotAu	, nIndice	] )

							nHr3 := SomaHoras( nHr3 , oAponta:aApo[ oaApo:HrIntTabel	, nW 	  	] )
							nHr3 := SomaHoras( nHr3 , oAponta:aApo[ oaApo:HrIntTabel	, nIndice 	] )
							nHr4 := SomaHoras( nHr4 , oAponta:aApo[ oaApo:HrIntNotTb	, nW 	  	] )
							nHr4 := SomaHoras( nHr4 , oAponta:aApo[ oaApo:HrIntNotTb	, nIndice 	] )

				            /*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Se nao foram Apontadas Horas Extras de Intervalo consi³
							³dera as Horas de Intervalo da Tabela				   ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							IF ( ( nHr5 := SomaHoras( nHr1 , nHr2 ) ) == 0 )

								oAponta:aApo[  oaApo:HeIntNorAu , nW ]	:=	oAponta:aApo[  oaApo:HrIntTabel	, nW ]
								oAponta:aApo[  oaApo:HeIntNotAu , nW ]	:= 	oAponta:aApo[  oaApo:HrIntNotTb	, nW ]

								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³Apura o Adicional Noturno sobre as Horas de Intervalo ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
								oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	,;
																						oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	 ;
																		 			)
				            /*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Caso Contrario as Horas Extras de Intervalo serao tran³
							³sformadas em Horas Extras Normais e a Diferenca  entre³
							³as Horas de Intervalo e as Horas   Extras de Intervalo³
							³serao pagas como Horas Extras de Intervalo            ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							ElseIF ( nHr5 < ( nHr6 := SomaHoras( nHr3 , nHr4 ) ) )

								oAponta:aApo[ oaApo:HeNormal , nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNormal	, nW ]	,;
												   									oAponta:aApo[  oaApo:HeIntNorAu	, nW ]	 ;
																	 			)

								oAponta:aApo[ oaApo:HeNormal , nIndice ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNormal	, nIndice ]	,;
													   										oAponta:aApo[  oaApo:HeIntNorAu	, nIndice ]	 ;
																					 	)

								oAponta:aApo[ oaApo:HeIntNorAu	, nW ]		:= 0
								oAponta:aApo[ oaApo:HeIntNorAu	, nIndice ]	:= 0

								oAponta:aApo[ oaApo:HeIntNorAu	, nW ]	:= Max( SubHoras( nHr3 , nHr1 ) , 0 )

								oAponta:aApo[ oaApo:HeNotAutor	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNotAutor	, nW ]	,;
																						oAponta:aApo[  oaApo:HeIntNotAu	, nW ]   ;
																		 			)

								oAponta:aApo[ oaApo:HeNotAutor	, nIndice ]	:= SomaHoras(	oAponta:aApo[  oaApo:HeNotAutor	, nIndice ]	,;
																							oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	 ;
																			 			)

								oAponta:aApo[  oaApo:HeIntNotAu	, nW ]		:= 0
								oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	:= 0

								oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	:= Max( SubHoras( nHr4 , nHr2 ) , 0 )

								/*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³Apura o Adicional Noturno sobre as Horas de Intervalo ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
								oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	:= SomaHoras(	oAponta:aApo[  oaApo:AdicHeNotA	, nW ]	,;
																						oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	 ;
																		 			)

				            /*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Mas se as Horas Extras de Intervalo forem maiores   ou³
							³iguais as Horas da Tabela e porque as Horas foram  cor³
							³ridas e neste caso deverao ser Zeradas                ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							ElseIF nHr5 >= nHr6
					            /*/
								ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								³Se as Horas Extras do Intervalo forem maiores ou  igua³
								³is as Horas de Intervalo, funcionario nao Efetuou  Mar³
								³cacoes. Dessa forma, as Horas Extras Sao Corridas.    ³
								ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
								oAponta:aApo[  oaApo:HeIntNorAu	, nW ]		:= 0
								oAponta:aApo[  oaApo:HeIntNotAu	, nW ]		:= 0
								oAponta:aApo[  oaApo:HeIntNorAu	, nIndice ]	:= 0
								oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	:= 0
							EndIF

						Else

				            /*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Caso Contrario Zera as Horas Extras de Intervalo      ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
							/*/
							oAponta:aApo[  oaApo:HeIntNorAu	, nW ]	:= 0
							oAponta:aApo[  oaApo:HeIntNotAu	, nW ]	:= 0
							oAponta:aApo[  oaApo:HeIntNorAu	, nIndice ]	:= 0
							oAponta:aApo[  oaApo:HeIntNotAu	, nIndice ]	:= 0*/

						EndIF
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Restaura Ordem do aHoras                              ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					oAponta:SortaHoras()
					EndIF
                Endif
	            /*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Zera as Horas Apontadas pois ja foram Convertidas   em³
				³Horas Extras 										   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				oAponta:aApo[  oaApo:HrTrbEfeti	, nW ]	:= 0
				oAponta:aApo[  oaApo:HrIntEfeti	, nW ]	:= 0
				oAponta:aApo[  oaApo:HrTrbNotEf	, nW ]	:= 0
				oAponta:aApo[  oaApo:HrIntNotEf	, nW ]	:= 0
				oAponta:aApo[  oaApo:AdicNotNau	, nW ]	:= 0
				oAponta:aApo[  oaApo:AdicNotAut	, nW ]	:= 0
			EndIF

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final  da Apuracao Para Dias Nao Trabalhados. Quando o³
	³Tipo do Dia for nao Trabalhado e Tiver passado   Pelo ³
	³Apontamento               					   		   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Apuracao dos Adicionais   Notur³
	³nos									  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
            /*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se o Adicional Noturno e  Autori³
			³zado									  ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF ( oAponta:cAdNot == "N" )
				oAponta:aApo[oaApo:AdicNotNau,nW]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotNau,nW],oAponta:aApo[oaApo:AdicNotAut,nW])
				oAponta:aApo[oaApo:AdicNotAut,nW]	:= 0
			EndIF
			
			//Verifica se o Adicional Noturno Sobre  Horas Extras e Autorizado
			If oAponta:cAdNotEx == "N" .Or. oAponta:lFaixaHE 
			    // Calcula e soma total de adic sob He not em adic sobre He not nao
			   	fSomaApoHE(	@oAponta:aApo[oaApo:AdicHeNotN,nW]	,; //Valor Acumulado com HE nao autorizadas
				           	@oAponta:aApo[oaApo:AdicHeNotA,nW]	,; //Valor Integral (Nao zera mas contera o valor autorizado)
				           	@oAponta:aApo[oaApo:AdicHeNotF,nW] 	 ; //Valor Autorizado (sera zerado)
				           )

			EndIF
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final da Apuracao dos Adicionais Noturnos³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Apuracao de Faltas, Atrasos,Sai³
	³das Antecipadas/Expediente e Horas Trab. ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			//Indice correspondente a posicao Intervalo em oAponta:aApo
			nIndice := Min( nW + 1 , oAponta:nTotMarcTab )
			IF ( nW == ( oAponta:nTotMarcTab - 1 ) )
				//Aqui para verificar qual o Ultimo Intervalo Valido
				nIndice := Max( 1 , oAponta:nTotMarcTab - 2 )
			EndIF
			//-- Se Teve Meia-Falta, zera as Horas de Intervalo correspondente e Gera como Falta Intervalo
			//-- Mas Somente se Nao Gerou He para o Intervalo
			IF ( oAponta:aApo[oaApo:MeiaFalta,nW] > 0 )  			.AND. ;
			   	Empty(oAponta:aApo[oaApo:HeIntNorAu,Min( nIndice + 1 , oAponta:nTotMarcTab )]) 	.AND. ;
			   	Empty(oAponta:aApo[oaApo:HeIntNotAu,Min( nIndice + 1 , oAponta:nTotMarcTab )])
				IF ( oAponta:cIntFalt == "S" ) //So Desconta Quando Definido na Regra de Apontamento
					If nW < nIndice
						IF ( oAponta:lHnotFal ) //-- Se considerar a Hora Noturna Reduzida para a Apuracao das Faltas
							oAponta:aApo[oaApo:FaltaInter,nIndice]	:= SomaHoras( oAponta:aApo[oaApo:FaltaInter,nIndice], oAponta:aApo[oaApo:HrIntEfeti,nIndice] )
							oAponta:aApo[oaApo:FaltaIntNt,nIndice]	:= SomaHoras( oAponta:aApo[oaApo:FaltaIntNt,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] )
							IF ( oAponta:lRF0ChkTable )
								oAponta:AlocaPer( oaApo:HrIntEfeti , nIndice , oaApo:FaltaInter , nIndice , .T. )
								oAponta:AlocaPer( oaApo:HrIntNotEf , nIndice , oaApo:FaltaIntNt , nIndice , .T. )
							EndIF
							oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotAut,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] ) , 0 )
							oAponta:aApo[oaApo:AdicNotNau,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotNau,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] ) , 0 )
						Else
							oAponta:aApo[oaApo:FaltaInter,nIndice]	:= SomaHoras( oAponta:aApo[oaApo:FaltaInter,nIndice], oAponta:aApo[oaApo:HrIntTbNNt,nIndice] )
							IF ( oAponta:lRF0ChkTable )
								oAponta:AlocaPer(oaApo:HrIntTbNNt , nIndice , oaApo:FaltaInter , nIndice , .T.)
							EndIF
							oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotAut,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] ) , 0 )
							oAponta:aApo[oaApo:AdicNotNau,nIndice]	:= Max( SubHoras( oAponta:aApo[oaApo:AdicNotNau,nIndice], oAponta:aApo[oaApo:HrIntNotEf,nIndice] ) , 0 )
						EndIF
					EndIf
				EndIF
				oAponta:aApo[oaApo:HrIntEfeti,nIndice]	:= 0
				oAponta:aApo[oaApo:HrIntNotEf,nIndice]	:= 0
			EndIF

			//-- Gera Pagamento de Horas Trabalhadas
			IF ( oAponta:cHrNorm == "S" )

				nHrTotNot:= SomaHoras( oAponta:aApo[ oaApo:HrTrbNotEf	, nW ] , oAponta:aApo[oaApo:AdicNotAut,nW])
				
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Inicio da Apuracao das Horas Nao  Realiza³
				³das para Horario Movel Nao Livre		  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		            IF ( ( oAponta:cTipoDia == "S" ) .and. !( ( oAponta:cHrMovel == "S" ) .and. ( oAponta:nAntMove + oAponta:nPosMove ) == 0 ) ) .and. !(oAponta:lIntMovFree .and. nHrTotNot == 0 .and. oAponta:aApo[ oaApo:HeNotAutor	, nW ] > 0)
		            
		            

			            	/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Calcula Horas Nao Realizadas Normais				   ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			        		oAponta:aApo[ oaApo:HrNorNaoRe , nW ]	:= Max(;
		            															(;
		            																SubHoras(	oAponta:aApo[ oaApo:HrTrbTabel	, nW ],;
		            																		 	oAponta:aApo[ oaApo:HrTrbEfeti	, nW ];
		            																		  );
		            															 ),;
		            															0;
		            														  )
							/*/
							ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							³Calcula Horas Nao Realizadas Noturnas				   ³
							ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			        	   	oAponta:aApo[ oaApo:HrNotNaoRe , nW ]	:= Max(;
		            															(;
		            		 														SubHoras(	oAponta:aApo[ oaApo:HrTrbNotTb	, nW ],;
		            																		 	Iif( oAponta:lAcreNot, nHrTotNot, oAponta:aApo[ oaApo:HrTrbNotEf, nW ]);
		            			 															  );
		            															 ),;
		            				  											0;
		            														  )

		            EndIF
				/*/
   				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Final da Apuracao das Horas Nao   Realiza³
				³das									  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

			EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final da Apuracao de Faltas, Atrasos, Sai³
	³das Antecipadas/Expediente e Horas Trab. ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Apuracao das Horas Extras      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

			//-- Para uso de Faixa de Horarios de HE autorizadas
			//-- Desmembramos as Horas "Autorizadas" (pois todas sao a principio)
			//-- em Autorizadas/Nao autorizadas
			IF ( oAponta:lFaixaHE )
							//-- Recalcula os valores de HE
		     // Normal
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNorNAut,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNormal,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNormalFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
				// Noturna
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNotNaoAu,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNotAutor,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNoturnFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
	   		    // Intervalo
	   			fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNorNa,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNorAu,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNorFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
				// Intervalo Noturno
				fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNotNa,nW]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNotAu,nW]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNotFx,nW]	 ; // Valor autorizado (que sera zerado)
						   )
			EndIF

			//-- Nona Hora ( Apenas Quando nao for Horario Movel Livre )
			IF !( oAponta:lMovelFree )
				IF (;
						( lHeAutoriza );
						.or.;
						( oAponta:lFaixaHE );
					 )
					IF ( nW == IF( ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 ) .and. oAponta:aSiglaMarc[nW] == "1S" , 2 , 4 ) ) //Horas Extras Autorizadas apos o Expediente
						IF !( oAponta:lFaixaHE )
							//Subtrai a Nona Hora das Horas Extras Noturna ap¢s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNotAutor,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotAutor,nW] >= oAponta:nNonaHor ) )
								oAponta:aApo[oaApo:HeNotAutor,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotAutor,nW] , oAponta:nNonaHor )
								oAponta:nNonaHor					:= 0
							Else
								oAponta:nNonaHor					:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotAutor,nW] )
								oAponta:aApo[oaApo:HeNotAutor,nW]	:= 0
							EndIF
							//Subtrai a Nona Hora das Horas Extras ap¢s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNormal,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNormal,nW] >= oAponta:nNonaHor ) )
								oAponta:aApo[oaApo:HeNormal,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNormal,nW] , oAponta:nNonaHor )
								oAponta:nNonaHor				:= 0
							Else
								oAponta:aApo[oaApo:HeNormal,nW]	:= 0
							EndIF
						Else
							//Subtrai a Nona Hora das Horas Extras Noturna ap¢s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNotAutor,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotAutor,nW] >= oAponta:nNonaHorAut ) )
								//-- Subtrai das Horas Noturnas a Nona Hora Autorizada (Pois so devo pagar a diferenca)
								oAponta:aApo[oaApo:HeNotAutor,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotAutor,nW] , oAponta:nNonaHorAut )
								//-- Subtrai da Nona Hora a Nona Hora Autorizada
								oAponta:nNonaHor	:= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut )
								oAponta:nNonaHorAut	:= 0
							Else
								oAponta:nNonaHorAut	:= SubHoras( oAponta:nNonaHorAut	, oAponta:aApo[oaApo:HeNotAutor,nW] )
								oAponta:nNonaHor   	:= SubHoras( oAponta:nNonaHor		, oAponta:aApo[oaApo:HeNotAutor,nW] )
								oAponta:aApo[oaApo:HeNotAutor,nW] := 0
							EndIF
							//Subtrai a Nona Hora das Horas Extras ap¢s Expediente
							IF ( ( oAponta:aApo[oaApo:HeNormal,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNormal,nW] >= oAponta:nNonaHorAut ) )
								oAponta:aApo[oaApo:HeNormal,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNormal,nW] , oAponta:nNonaHorAut )
								oAponta:nNonaHor				:=  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut )
								oAponta:nNonaHorAut				:= 0
							Else
								oAponta:nNonaHorAut				:= SubHoras( oAponta:nNonaHorAut , oAponta:aApo[oaApo:HeNormal,nW] )
								oAponta:nNonaHor   				:= SubHoras( oAponta:nNonaHor    , oAponta:aApo[oaApo:HeNormal,nW] )
								oAponta:aApo[oaApo:HeNormal,nW]	:= 0
							EndIF
						EndIF
					EndIF
				EndIF
			EndIF

			IF  (;
					!(;
						( lHeAutoriza );
					);
					.or.;
					( oAponta:lFaixaHE );
				 )
			    IF !( oAponta:lFaixaHE )
					oAponta:aApo[oaApo:HeNorNAut,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nW],oAponta:aApo[oaApo:HeNormal,nW])
					oAponta:aApo[oaApo:HeNormal,nW]		:= 0
					oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeNotNaoAu,nW],oAponta:aApo[oaApo:HeNotAutor,nW])
					oAponta:aApo[oaApo:HeNotAutor,nW]	:= 0
					oAponta:aApo[oaApo:HeIntNorNa,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorNa,nW],oAponta:aApo[oaApo:HeIntNorAu,nW])
					oAponta:aApo[oaApo:HeIntNorAu,nW]	:= 0
					oAponta:aApo[oaApo:HeIntNotNa,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNotNa,nW],oAponta:aApo[oaApo:HeIntNotAu,nW])
					oAponta:aApo[oaApo:HeIntNotAu,nW]	:= 0
				EndIF
				IF ( nW == IF( ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 ) .and. oAponta:aSiglaMarc[nW] == "1S" , 2 , 4 ) ) //Horas Extras Nao Autorizadas apos o Expediente
					IF !( oAponta:lFaixaHE )
						//Subtrai a Nona Hora das Horas Extras Noturna ap¢s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNotNaoAu,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotNaoAu,nW] >= oAponta:nNonaHor ) )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotNaoAu,nW] , oAponta:nNonaHor )
							oAponta:nNonaHor					:= 0
						Else
							oAponta:nNonaHor	:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotNaoAu,nW] )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= 0
						EndIF
						//Subtrai a Nona Hora das Horas Extras ap¢s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNorNAut,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNorNAut,nW] >= oAponta:nNonaHor ) )
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNorNAut,nW] , oAponta:nNonaHor )
							oAponta:nNonaHor					:= 0
						Else
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= 0
						EndIF
				    Else
				    	//Subtrai a Nona Hora das Horas Extras Noturna ap¢s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNotNaoAu,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotNaoAu,nW] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) ) )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNotNaoAu,nW] , SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
							oAponta:nNonaHor					:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
						Else
							oAponta:nNonaHor					:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotNaoAu,nW] )
							oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= 0
						EndIF
						//Subtrai a Nona Hora das Horas Extras ap¢s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNorNAut,nW] > 0 ) .and. ( oAponta:aApo[oaApo:HeNorNAut,nW] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut) ) )
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= SubHoras( oAponta:aApo[oaApo:HeNorNAut,nW] ,  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
							oAponta:nNonaHor					:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
						Else
							oAponta:nNonaHor					:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNorNAut,nW] )
							oAponta:aApo[oaApo:HeNorNAut,nW]	:= 0
						EndIF
					EndIF
				EndIF
			EndIF

			//-- Se Nao Houver Pagamento de Horas Extras Noturnas
			IF SubStr( oAponta:cCodHe , 1 , 1 ) == SubStr( oAponta:cCodHe , 3 , 1 )
				oAponta:aApo[oaApo:HeNormal,nW]  	:= SomaHoras(oAponta:aApo[oaApo:HeNormal,nW],oAponta:aApo[oaApo:HeNotAutor,nW])
				oAponta:aApo[oaApo:HeNotAutor,nW]	:= 0
				oAponta:aApo[oaApo:HeNorNAut,nW] 	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nW],oAponta:aApo[oaApo:HeNotNaoAu,nW])
				oAponta:aApo[oaApo:HeNotNaoAu,nW]	:= 0
				oAponta:aApo[oaApo:HeIntNotAu,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorAu,nW],oAponta:aApo[oaApo:HeIntNorAu,nW])
				oAponta:aApo[oaApo:HeIntNotAu,nW]	:= 0
				oAponta:aApo[oaApo:HeIntNorNa,nW]	:= SomaHoras(oAponta:aApo[oaApo:HeIntNorNa,nW],oAponta:aApo[oaApo:HeIntNotNa,nW])
				oAponta:aApo[oaApo:HeIntNotNa,nW]	:= 0
			EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final da Apuracao das Horas Extras       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Next nW
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Final da Operacao Pente Fino			  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³PutApontaRes³ Autor ³Marinaldo de Jesus    ³ Data ³13/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carregar os Apontamentos em aResult                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function PutApontaRes( aEvesIds, nCredInterJ ) //01 -> Array com os Eventos que possuem Identificadores

Local cTpHeIntNr := GetTpExInt( SubStr( oAponta:cCodHe , 3 , 1 ) , .F. )	//Normal
Local cTpHeIntNt := GetTpExInt( SubStr( oAponta:cCodHe , 1 , 1 ) , .T. ) 	//Noturna
Local nTotHrTrab := Len(oAponta:aHrTrab)
Local nW
Local nPos
Local lAbIntJ	 := (cPaisLoc == "BRA" .And. SR6->(ColumnPos("R6_ABINTJ")) > 0 .And. !Empty(SR6->R6_ABINTJ) .And. oAponta:nHrInterJd > 0 .And. nCredInterJ > 0 )
Local nPosAcrHeN := aScan(aEvesIds, {|x| x[1] == "045A"})
Local nPAcrAdiNo := aScan(aEvesIds, {|x| x[1] == "046A"})

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Inicio da Geracao das Horas Apontadas    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
For nW := 1 To oAponta:nTotMarcTab

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verificacao do Centro de Custo de  Acordo³
	³com o Tipo de Marcacao					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If oAponta:lMovelFree
		If nTotHrTrab > 0
			If nW == 1
				oAponta:cCustoGrv := oAponta:aHrTrab[nW, 4]
			ElseIf nW == oAponta:nTotMarcTab
				oAponta:cCustoGrv := oAponta:aHrTrab[nTotHrTrab, 4]
			Else
				If nW%2 == 0 .AND. nTotHrTrab > 1
					oAponta:cCustoGrv := oAponta:aHrTrab[ (nTotHrTrab/2), 4]
				Else
					oAponta:cCustoGrv := oAponta:aHrTrab[ (nTotHrTrab/2)+1, 4]
				EndIf
			EndIf
		Else
			oAponta:cCustoGrv := SRA->RA_CC
		EndIf
	Else
		IF (;
				( ( nPos := aScan( oAponta:aHoras , { |x| x[8] == oAponta:aSiglaMarc[ nW ] .and. x[3] == "M" } ) ) == 0 );
				.or.;
				Empty( oAponta:aHoras[ nPos , 14 ] );
			)
			If ( oAponta:cTipoDia == "S" )
				nPos := aScan( oAponta:aHoras , { |x| x[3] == oAponta:aSiglaMarc[ nW ] } )
			Else
				nPos := aScan( oAponta:aHoras , { |x| x[3] == "M" } )
			EndiF
		EndIF
		//-- Retorna Centro de Custo Para a Gravacao do Apontamento
		IF ( nPos > 0 )
			oAponta:cCustoGrv := oAponta:aHoras[ nPos , 14 ]
			If oAponta:lApoSaida
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == oAponta:aSiglaMarc[ nW ] .and. x[CALEND_POS_DATA] == oAponta:aHoras[ nPos , 1 ] } ) ) > 0 )
					IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC )
						oAponta:cCustoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			Else
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == oAponta:aSiglaMarc[ nW ] .and. x[CALEND_POS_DATA] == oAponta:aHoras[ nPos , 1 ] } ) ) > 0 )
					IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC )
						oAponta:cCustoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			EndIf
		Else
			oAponta:cCustoGrv := SRA->RA_CC
		EndIF
	EndIF

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem o Tipo de Marcacao a ser Gravado   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:cTipoMarc := IF( oAponta:lApTpMar , oAponta:aSiglaMarc[ nW ] , NIL )

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Geracao dos Adicionais Noturnos³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			//-- Verifica a existencia do Evento para Acresc.Noturno
			If oAponta:lIdAcreNot
				// Acresc.Noturno Autorizado
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:AcreAuto,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 037 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
							""             						,;	//08 -> Periodo de Apuracao
							0           						,;	//09 -> Tolerancia
							"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
			             	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
				If oAponta:lSepAcrNot 
					If nPosAcrHeN > 0
						// Acresc.Noturno Sobre Hora Extra
						fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
									oAponta:dData						,;	//02 -> Data da Geracao
									oAponta:aApo[oaApo:HrAcrNotHe,nW]	,;	//03 -> Numero de Horas Resultantes
									aEvesIds[ nPosAcrHeN , 02 ]			,;	//04 -> Codigo do Evento
									oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
									oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
									.T.									,;	//07 -> True para Acumular as Horas
									""             						,;	//08 -> Periodo de Apuracao
									0           						,;	//09 -> Tolerancia
									"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
									/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
									/*cFuncao	*/						,; //12 -> Funcao
									/*cDepto	*/						,; //13 -> Depto para gravacao
									/*cPosto	*/						,; //14 -> Posto para gravacao
									/*cProcesso	*/						,; //15 -> Periodo para Gravacao
									/*cRoteiro	*/						,; //16 -> Processo para Gravacao
									/*cPerApo	*/						,; //17 -> Periodo para Gravacao
									/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
									oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
									oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
								)
					EndIf
					If nPAcrAdiNo > 0
						// Acresc. Adicional Noturno 
						fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
									oAponta:dData						,;	//02 -> Data da Geracao
									oAponta:aApo[oaApo:AcrAdiNot,nW]	,;	//03 -> Numero de Horas Resultantes
									aEvesIds[ nPAcrAdiNo , 02 ]			,;	//04 -> Codigo do Evento
									oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
									oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
									.T.									,;	//07 -> True para Acumular as Horas
									""             						,;	//08 -> Periodo de Apuracao
									0           						,;	//09 -> Tolerancia
									"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
									/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
									/*cFuncao	*/						,; //12 -> Funcao
									/*cDepto	*/						,; //13 -> Depto para gravacao
									/*cPosto	*/						,; //14 -> Posto para gravacao
									/*cProcesso	*/						,; //15 -> Periodo para Gravacao
									/*cRoteiro	*/						,; //16 -> Processo para Gravacao
									/*cPerApo	*/						,; //17 -> Periodo para Gravacao
									/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
									oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
									oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
								)
					EndIf
				EndIf
			Endif

			// Adic.Not.Normal Autorizado
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotAut,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 004 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						oAponta:nTolNotu					,; 	//09 -> Tolerancia					
						"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/						,; //12 -> Funcao
	  					/*cDepto	*/						,; //13 -> Depto para gravacao
						/*cPosto	*/						,; //14 -> Posto para gravacao
						/*cProcesso	*/						,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/						,; //16 -> Processo para Gravacao
						/*cPerApo	*/						,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
						oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
					)

			// Adic.Not.H.Extra Autorizado
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotA,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 028 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						0           						,;	//09 -> Tolerancia
						"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/						,; //12 -> Funcao
						/*cDepto	*/						,; //13 -> Depto para gravacao
						/*cPosto	*/						,; //14 -> Posto para gravacao
						/*cProcesso	*/						,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/						,; //16 -> Processo para Gravacao
						/*cPerApo	*/						,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
						oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
					)

			// Adic.Not.Normal Nao Autorizado
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotNau,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 003 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						0           						,;	//09 -> Tolerancia
						"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/						,; //12 -> Funcao
	  					/*cDepto	*/						,; //13 -> Depto para gravacao
						/*cPosto	*/						,; //14 -> Posto para gravacao
						/*cProcesso	*/						,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/						,; //16 -> Processo para Gravacao
						/*cPerApo	*/						,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
						oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
					)

			//-- Gera Adicional Noturno Nao Autorizado para Horas Extras
			fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
						oAponta:dData						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotN,nW]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 027 , 02 ]				,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
						.T.									,;	//07 -> True para Acumular as Horas
						""             						,;	//08 -> Periodo de Apuracao
						0           						,;	//09 -> Tolerancia
						"N"									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/						,; //12 -> Funcao
	  					/*cDepto	*/						,; //13 -> Depto para gravacao
						/*cPosto	*/						,; //14 -> Posto para gravacao
						/*cProcesso	*/						,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/						,; //16 -> Processo para Gravacao
						/*cPerApo	*/						,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
						oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
					)
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final da Geracao dos Adicionais Noturnos ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Geracao de Faltas, Atrasos, Sai³
	³das Antecipadas/Expediente e Horas Trab. ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ! lAbIntJ // Quanto tiver abono interjornada cadastrado esses eventos serão tratados na função Put2ApontaRes
		nPos := IF( oAponta:cFaltas == "N" , 007 , 008 )
		//-- Gera Meia Falta com Arredondamento
		oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
							oaApo:MeiaFalta						,;  //02 -> Elemento do Apontamento
							nW									,;  //03 -> Item do Elemento
							aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
							""									,;	//08 -> Periodo de Apuracao
							0									,;	//09 -> Tolerancia
							"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
							/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
							/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
							/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
							/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
							/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
							/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
				 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
							oAponta:cSeqTno						,;  //19 -> Semana/Sequencia do Turno
							/*__lTolHrNReal		*/				,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							/*@oAponta:aHrNReal	*/				,;  //21 -> Array com as horas nao realizadas
							/*cIdentPont		*/				,;  //22 -> Identificador do ponto
							oAponta:aSvtree						 ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
						)
		
		//-- Saida antecipada
		nPos := IF( oAponta:cSaiAnt == "N" , 013 , 014 )
		oAponta:IdPreAbo( 	oAponta:dData											,;	//01 -> Data da Geracao
							oaApo:SaidaAnte											,;  //02 -> Elemento do Apontamento
							nW														,;  //03 -> Item do Elemento
							aEvesIds[ nPos , 02 ]									,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv										,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc										,;	//06 -> Tipo de Marcacao
							.T.														,;	//07 -> True para Acumular as Horas
							oAponta:cPerSaiA										,;	//08 -> Periodo de Apuracao
							fTolerancia(oAponta:cTolaSai, nW, 1, oAponta:dData )	,;	//09 -> Tolerancia
							"S"						 								,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							/*oAponta:cFuncaoGrv*/									,;  //11 -> Funcao a ser Gravada
							/*oAponta:cDepto	*/									,;  //12 -> Depto a ser gravado
							/*oAponta:cPosto	*/									,;  //13 -> Posto a ser gravado
							/*oAponta:cProcesso	*/									,;  //14 -> Processo a ser gravado
							/*oAponta:cPeriodo	*/									,;  //15 -> Periodo  a ser gravado
							/*oAponta:cRoteiro 	*/									,;  //16 -> Roteiro  a ser gravado
							/*oAponta:cNumPagto	*/				   					,;  //17 -> NumPagto a ser gravado
							oAponta:cTnoCalend				       					,;  //18 -> Turno de Trabalho
							oAponta:cSeqTno											,;  //19 -> Semana/Sequencia do Turno
							__lTolHrNReal											,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							@oAponta:aHrNReal                                       ,;  //21 -> Array com as horas nao realizadas
							aEvesIds[ nPos , 01 ]                                   ,;  //22 -> Identificador do ponto
							oAponta:aSvtree						 					 ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
						)
		
		//-- Gera Faltas Intervalo Noturna com Arredondamento
		nPos := IF( oAponta:cFaltas == "N" , 033 , 032 )
		oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
							oaApo:FaltaInter					,;  //02 -> Elemento do Apontamento
							nW									,;  //03 -> Item do Elemento
							aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
							""									,;	//08 -> Periodo de Apuracao
							0									,;	//09 -> Tolerancia
							"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
							/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
							/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
							/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
							/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
							/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
							/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
				 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
							oAponta:cSeqTno						,;  //19 -> Semana/Sequencia do Turno
							/*__lTolHrNReal		*/				,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							/*@oAponta:aHrNReal	*/				,;  //21 -> Array com as horas nao realizadas
							/*cIdentPont		*/				,;  //22 -> Identificador do ponto
							oAponta:aSvtree						 ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
						)
		
		//-- Gera Faltas Intervalo Noturna com Arredondamento
		nPos := IF( oAponta:cFaltas == "N", 035 , 034 )
		oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
							oaApo:FaltaIntNt					,;  //02 -> Elemento do Apontamento
							nW									,;  //03 -> Item do Elemento
							aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
							""									,;	//08 -> Periodo de Apuracao
							0									,;	//09 -> Tolerancia
							"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
							/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
							/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
							/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
							/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
							/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
							/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
				 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
							oAponta:cSeqTno						,;  //19 -> Semana/Sequencia do Turno
							/*__lTolHrNReal		*/				,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							/*@oAponta:aHrNReal	*/				,;  //21 -> Array com as horas nao realizadas
							/*cIdentPont		*/				,;  //22 -> Identificador do ponto
							oAponta:aSvtree						 ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
						)
				
		//-- Gera Faltas com Arredondamento
		nPos := IF( oAponta:cFaltas == "N", 009 , 010 )
		//se tiver integração com gestão de serviços verificar se tem suspensão para trocar a falta pelo ID 043A
		If fIntRHGS()
			If fTemSuspGS(SRA->RA_FILIAL,SRA->RA_MAT,dtos(oAponta:dData))
				nPos := 043
			EndIf
		EndIf
		oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
							oaApo:Falta							,;  //02 -> Elemento do Apontamento
							nW									,;  //03 -> Item do Elemento
							aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
							""									,;	//08 -> Periodo de Apuracao
							0									,;	//09 -> Tolerancia
							"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
							/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
							/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
							/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
							/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
							/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
							/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
				 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
							oAponta:cSeqTno						,;  //19 -> Semana/Sequencia do Turno
							/*__lTolHrNReal		*/				,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							/*@oAponta:aHrNReal	*/				,;  //21 -> Array com as horas nao realizadas
							/*cIdentPont		*/				,;  //22 -> Identificador do ponto
							oAponta:aSvtree						 ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
						)
				
		//-- Atrasos
		nPos := IF( oAponta:cAtrasos == "N", 011 , 012 )
		oAponta:IdPreAbo( 	oAponta:dData											,;	//01 -> Data da Geracao
							oaApo:Atrasos						  					,;  //02 -> Elemento do Apontamento
							nW									   					,;  //03 -> Item do Elemento
							aEvesIds[ nPos , 02 ]				   					,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					   					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					   					,;	//06 -> Tipo de Marcacao
							.T.									   					,;	//07 -> True para Acumular as Horas
							oAponta:cPerAtra										,;	//08 -> Periodo de Apuracao
							fTolerancia(oAponta:cTolaSai, nW, 1, oAponta:dData )	,;	//09 -> Tolerancia
							"A"						 			   					,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							/*oAponta:cFuncaoGrv*/				   					,;  //11 -> Funcao a ser Gravada
							/*oAponta:cDepto	*/				   					,;  //12 -> Depto a ser gravado
							/*oAponta:cPosto	*/				  					,;  //13 -> Posto a ser gravado
							/*oAponta:cProcesso	*/				  					,;  //14 -> Processo a ser gravado
							/*oAponta:cPeriodo	*/				  					,;  //15 -> Periodo  a ser gravado
							/*oAponta:cRoteiro 	*/				   					,;  //16 -> Roteiro  a ser gravado
							/*oAponta:cNumPagto	*/				   					,;  //17 -> NumPagto a ser gravado
							oAponta:cTnoCalend				      					,;  //18 -> Turno de Trabalho
							oAponta:cSeqTno											,;  //19 -> Semana/Sequencia do Turno
							__lTolHrNReal											,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							@oAponta:aHrNReal                                       ,;  //21 -> Array com as horas nao realizadas
							@aEvesIds[ nPos , 01 ]                                  ,;  //22 -> Identificador do Ponto
							oAponta:aSvtree						 					 ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
						)
	EndIf
	
	//-- Saida durante o expediente
	nPos := IF( oAponta:cSaiExpe == "N", 019 , 020 )
	oAponta:IdPreAbo( 	oAponta:dData						  					,;	//01 -> Data da Geracao
						oaApo:SaidaExpe						   					,;  //02 -> Elemento do Apontamento
						nW									   					,;  //03 -> Item do Elemento
						aEvesIds[ nPos , 02 ]				   					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv					   					,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc					   					,;	//06 -> Tipo de Marcacao
						.T.														,;	//07 -> True para Acumular as Horas
						oAponta:cPerSaiA										,;	//08 -> Periodo de Apuracao
						fTolerancia(oAponta:cTolaSai,nW , 1,oAponta:dData )		,;	//09 -> Tolerancia
						If (lMvArrSExp,"S", "") 								,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*oAponta:cFuncaoGrv*/				   					,;  //11 -> Funcao a ser Gravada
						/*oAponta:cDepto	*/				   					,;  //12 -> Depto a ser gravado
						/*oAponta:cPosto	*/				   					,;  //13 -> Posto a ser gravado
						/*oAponta:cProcesso	*/				   					,;  //14 -> Processo a ser gravado
						/*oAponta:cPeriodo	*/				  					,;  //15 -> Periodo  a ser gravado
						/*oAponta:cRoteiro 	*/				   					,;  //16 -> Roteiro  a ser gravado
						/*oAponta:cNumPagto	*/									,;  //17 -> NumPagto a ser gravado
						oAponta:cTnoCalend				    					,;  //18 -> Turno de Trabalho
						oAponta:cSeqTno											,;  //19 -> Semana/Sequencia do Turno
						__lTolHrNReal											,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
						@oAponta:aHrNReal                                       ,;  //21 -> Array com as horas nao realizadas
						/*cIdentPont		*/									,;  //22 -> Identificador do ponto
						oAponta:aSvtree											 ;  //23 -> aSvtree (Array com informaçõs do acol da SP8, SPC e SPK)
					)
		
			//-- Gera Pagamento de Horas Trabalhadas
			IF ( oAponta:cHrNorm == "S" )
				//-- Quando Existir o Evento Intervalo Normal Noturno
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrIntNotEf,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 031 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				           	NIL             					,;	//08 -> Periodo de Apuracao
							NIL           						,;	//09 -> Tolerancia
							NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
				//-- Gera Pagamento de Horas Trabalhadas Intervalo (030A)
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrIntEfeti,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 030 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				           	NIL             					,;	//08 -> Periodo de Apuracao
							NIL           						,;	//09 -> Tolerancia
							NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
				//-- Gera Pagamento de Horas Trabalhadas Noturnas
				//-- Quando Existir o Evento Horas Normais Noturnas
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrTrbNotEf,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 026 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				           	NIL             					,;	//08 -> Periodo de Apuracao
							NIL           						,;	//09 -> Tolerancia
							NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
				//-- Gera Pagamento de Horas Trabalhadas (001A)
				//-- Quando Existir o Evento Horas Normais
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:HrTrbEfeti,nW]	,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 001 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				           	NIL             					,;	//08 -> Periodo de Apuracao
							NIL           						,;	//09 -> Tolerancia
							NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
				//-- Gera as Horas Normais Nao Realizadas
				If !oAponta:lAtestMed
					fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
								oAponta:dData						,;	//02 -> Data da Geracao
								oAponta:aApo[oaApo:HrNorNaoRe,nW]	,;	//03 -> Numero de Horas Resultantes
								aEvesIds[ 005 , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								NIL             					,;	//08 -> Periodo de Apuracao
								NIL           						,;	//09 -> Tolerancia
								NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
								/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
								/*cFuncao	*/						,; //12 -> Funcao
								/*cDepto	*/						,; //13 -> Depto para gravacao
								/*cPosto	*/						,; //14 -> Posto para gravacao
								/*cProcesso	*/						,; //15 -> Periodo para Gravacao
								/*cRoteiro	*/						,; //16 -> Processo para Gravacao
								/*cPerApo	*/						,; //17 -> Periodo para Gravacao
								/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
								oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
								oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
							)
					//-- Gera as Horas Noturnas Nao Realizadas
					fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
								oAponta:dData						,;	//02 -> Data da Geracao
								oAponta:aApo[oaApo:HrNotNaoRe,nW]	,;	//03 -> Numero de Horas Resultantes
								aEvesIds[ 006 , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.T.									,;	//07 -> True para Acumular as Horas
								NIL             					,;	//08 -> Periodo de Apuracao
								NIL           						,;	//09 -> Tolerancia
								NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
								/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
								/*cFuncao	*/						,; //12 -> Funcao
								/*cDepto	*/						,; //13 -> Depto para gravacao
								/*cPosto	*/						,; //14 -> Posto para gravacao
								/*cProcesso	*/						,; //15 -> Periodo para Gravacao
								/*cRoteiro	*/						,; //16 -> Processo para Gravacao
								/*cPerApo	*/						,; //17 -> Periodo para Gravacao
								/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
								oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
								oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
							)
				EndIf
			EndIF

			//-- Gera Pagamento de Prima Dominical
			IF ( oAponta:lPrimDom  )
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:PrimDom,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 039 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				           	NIL             					,;	//08 -> Periodo de Apuracao
							NIL           						,;	//09 -> Tolerancia
							NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
			EndIF

			//-- Gera Pagamento de Descanso Laborado
			IF ( oAponta:lDescLab  )
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:DescLab,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 040 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				           	NIL             					,;	//08 -> Periodo de Apuracao
							NIL           						,;	//09 -> Tolerancia
							NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
			EndIF

			//-- Gera Pagamento de Festivo Laborado
			IF ( oAponta:lFestLab  )
				fGeraRes(	oAponta:aResult						,;	//01 -> Array com os Resultados do Dia
							oAponta:dData						,;	//02 -> Data da Geracao
							oAponta:aApo[oaApo:FestLab,nW]		,;	//03 -> Numero de Horas Resultantes
							aEvesIds[ 041 , 02 ]				,;	//04 -> Codigo do Evento
							oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
							oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
							.T.									,;	//07 -> True para Acumular as Horas
				           	NIL             					,;	//08 -> Periodo de Apuracao
							NIL           						,;	//09 -> Tolerancia
							NIL									,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						 	/*lSubstitui*/						,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
							/*cFuncao	*/						,; //12 -> Funcao
		  					/*cDepto	*/						,; //13 -> Depto para gravacao
							/*cPosto	*/						,; //14 -> Posto para gravacao
							/*cProcesso	*/						,; //15 -> Periodo para Gravacao
							/*cRoteiro	*/						,; //16 -> Processo para Gravacao
							/*cPerApo	*/						,; //17 -> Periodo para Gravacao
							/*cNumPagto	*/ 						,; //18 -> NumPagto para Gravacao
							oAponta:cTnoCalend				    ,; //19 -> Turno de Trabalho
							oAponta:cSeqTno						;  //20 -> Semana/Sequencia do Turno
						)
			EndIF

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final  da Geracao de Faltas, Atrasos, Sai³
	³das Antecipadas/Expediente e Horas Trab. ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Geracao das Horas Extras       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF ( oAponta:aApo[oaApo:PriorityHe,nW] == Priority_Nocturnal_Overtime ) //Verifica Prioridade
					//-- Gera Horas Extras Noturnas
					fGeraExtra(	oAponta:aTabExtra			  		,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 1 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNotAutor,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNotNaoAu,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL     							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )
					//-- Gera Horas Extras Noturnas Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNt							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNotAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNotNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )
					//-- Gera Horas Extras Normais
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 3 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNormal,nW]		,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNorNAut,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )
					//-- Gera Horas Extras do Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNr							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNorAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNorNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )
			Else
					//-- Gera Horas Extras Normais
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 3 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNormal,nW]		,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNorNAut,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )
					//-- Gera Horas Extras do Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNr							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNorAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNorNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )
					//-- Gera Horas Extras Noturnas
					fGeraExtra(	oAponta:aTabExtra			  		,;	//01 -> Array contendo os Tipos de Horas Extras
								SubStr( oAponta:cCodHe , 1 , 1 )	,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeNotAutor,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeNotNaoAu,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )
					//-- Gera Horas Extras Noturnas Intervalo
					fGeraExtra(	oAponta:aTabExtra					,;	//01 -> Array contendo os Tipos de Horas Extras
								cTpHeIntNt							,;	//02 -> Tipo de Hora Extra a ser Gerado
								oAponta:aApo[oaApo:HeIntNotAu,nW]	,;	//03 -> Numero de Horas Extras Autorizadas
								oAponta:aApo[oaApo:HeIntNotNa,nW]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
								oAponta:aResult						,;	//05 -> Array com os Resultados do Apontamento do Dia
								NIL        							,;	//06 -> Array com os Totais Apontados por Evento do Dia
								oAponta:dData						,;	//07 -> Data da Gravacao
								"APO"								,;	//08 -> Rotina Chamadora da Funcao
								NIL									,;	//09 -> Periodo de Apuracao
								.T.									,;	//10 -> Soma ao Valor Existente
								oAponta:cCustoGrv					,;	//11 -> Centro de Custo Para Gravacao
								oAponta:cTipoMarc					,;	//12 -> Tipo de Marcacao
								lMvAcmHExt							,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
								oAponta:cTnoCalend		   		    ,;  //22 -> Turno de Trabalho
								oAponta:cSeqTno						;   //23 -> Semana/Sequencia do Turno
					           )

			EndIF //Fim da Verificacao de Prioridade

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final da Geracao das Horas Extras        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Next nW

Return( NIL )

/*/{Protheus.doc} function
Apurar Horas Extras entre Horários  
@author  Equipe Advanced RH
@since   01/04/1997
/*/
Static Function fExtras(	dDt1		,; //01 -> 1a. Data
							nHr1		,; //02 -> 1o. Horario
							dDt2		,; //03 -> 2a. Data
							nHr2		,; //04 -> 2o. Horario
							cTipo		,; //05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
							nIn			,; //06 -> Indice em aApo
							lPrimeiro	,; //07 -> Horas Extras do Primeiro Dia
							lIntervalo	,; //08 -> Apuracao Corresponde a Intervalo
							lForceTrab	,; //09 -> Forca o Tipo do Dia como Trabalhado
							lCalc		,; //10 -> Calcula Adicionais Especiais (Prima Dominical, Descanso e Festivo Laborados).
							nExtraAnt   ;  //11 -> Quantidade de hora extra calculada anteriormente (Somente quando HE for calculada por data de marcacao sera somada para calculo da tolerancia)
					    )

Local aPerNot		:= {}
Local nIncLoop		:= 0
Local nEx			:= 0
Local nExNot		:= 0
Local nTolHExt		:= 0
Local nExAdn		:= 0
Local nExAut		:= 0
Local nExNotAut 	:= 0
Local nExAdnAut 	:= 0
Local nExDiaAdn 	:= 0
Local nExDiaAutAdn	:= 0
Local nHeNotAcr		:= 0
Local lRetHrNot		:= .F.

//-- Para HE nao destaca Acrescimo quando existir identificador para tal e solicitado
	//-- o destaque do acrescimo noturno.
	Local lAcreNot		:= If( (oAponta:lIdAcreNot  .And. oAponta:lAcreNot), .F., oAponta:lAcreNot )
	
	DEFAULT lCalc	  	:= .T.
	DEFAULT nExtraAnt 	:= 0
	
	If lCalc
		
		// Calcula Prima Dominical, Descanso Laborado, Festivo Laborado.
		fAdicionais(	@dDt1					,;	//01 -> 1a. Data
						@nHr1					,;	//02 -> 1o. Horario
						@dDt2					,;	//03 -> 2a. Data
						@nHr2					,;	//04 -> 2o. Hora
						Nil						,;	//05 -> <@>Horas Normais Apontadas
						Nil						,;	//06 -> <@>Horas Noturnas Apontadas
						Nil						,;	//07 -> Apontar Horas Noturnas
						oAponta:dData			,;	//08 -> Data Inicial Para a Hora Noturna
						Nil						,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot		,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot		,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot		,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot		,;	//13 -> Apenas Acrescimo Noturno
						nIn						,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
						oAponta:lPrimDom		,;  //15 -> Determina o calculo da Prima Dominical
						oAponta:lDescLab		,;  //16 -> Determina o calculo da Descanso Laborado
						oAponta:lFestLab		;   //17 -> Determina o calculo da Festivo Laborado
					)

EndIF

Begin Sequence

	If(( dDt1 == dDt2 ) .And. ( Round( nHr1, 02 ) == Round( nHr2, 02 ) ))
		Break
	EndIF

	DEFAULT lIntervalo	:= .F.

	//-- Tratamento quando utilizar calculo de HE por dia, guarde os valores de hora extra
	//-- do proximo dia para validacao correta da tolerancia quando as data das marcacoes
	//-- forem diferentes
	If lApHeDtM .And. dDt1 <> dDt2 .And. dDt2 > dDt1 .And. nExtraAnt == 0
		nExtraAnt := nHr2
	EndIf

	DEFAULT lForceTrab  := .F.
	//-- Define qual a tolerƒncia de hora extra a ser utilizada.
	If (( oAponta:cTipoDia == "S" ) .Or. ( (!Empty(oAponta:dDataGravar)) .And. (oAponta:dData > oAponta:dDataGravar) .And. (oAponta:cTipoDiaAt == "S") ) .Or. ( lForceTrab ))
		nTolHExt := fTolerancia( oAponta:cTolHex, nIn, 2, oAponta:dData )
	EndIf

	//-- Se o Apontamento for por Dia Assume o Limite de Hrs. para o Dia
	If !ExtrasHeDtm(;
						@dDt1		,;	//01 -> 1a. Data
						@nHr1		,;	//02 -> 1o. Horario
						@dDt2		,;	//03 -> 2a. Data
						@nHr2		,;	//04 -> 2o. Hora
						@cTipo		,;	//05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
						@lPrimeiro	,;	//06 -> Horas Extras do Primeiro Dia
						@lIntervalo	,;	//07 -> Apuracao Corresponde a Intervalo
						@nIncLoop	,;	//08 -> Incremento para o Loop no processo de Apontamento
						@nTolHExt	 ;  //09 -> Tolerância de HE
					 )
		Break
	EndIf
	
	If !lPrimeiro .And. lApHeDtM .And. !oAponta:lApoSaida .And. dDt1 <= oAponta:dPerNotIni
		// Busca o horário noturno do dia anterior
		oAponta:GetCfgNot(.T., oAponta:dPerNotIni - 1)
		lRetHrNot := .T.
	EndIf
	
	If oAponta:lSepAcrNot
		lAcreNot := .T.
	EndIf
	
	//--Apura as Horas Extras
	fCalHoras(	dDt1				,;	//01 -> Data 1
				nHr1				,;	//02 -> Hora 1
				dDt2				,;	//03 -> Data 2
				nHr2				,;	//04 -> Hora 2
				@nEx				,;	//05 -> <@>Horas Normais Apontadas
				@nExNot				,;	//06 -> <@>Horas Noturnas Apontadas
				.T.					,;	//07 -> Apontar Horas Noturnas
				oAponta:dPerNotIni	,;	//08 -> Data Inicial Para a Hora Noturna
				@nExAdn				,;	//09 -> <@>Horas de Acrescimo Noturno
				oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
				oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
				oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
				lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
				@aPerNot	 		 ;	//14 -> Periodo da Hora Noturna
			 )

	//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
	If ( oAponta:lAdHeDia ) .And. ( oAponta:cTipoDia == "S" )
		fAdnDiurno(	dDt1				,;	//01 -> Data 1
					nHr1				,;	//02 -> Hora 1
					dDt2				,;	//03 -> Data 2
					nHr2				,;	//04 -> Hora 2
			  		@nExDiaAdn			,;	//05 -> <@>Horas Normais Apontadas
					0					,;	//06 -> <@>Horas Noturnas Apontadas
			  		.T.					,;	//07 -> Apontar Horas Noturnas
					oAponta:dPerNotIni	,;	//08 -> Data Inicial Para a Hora Noturna
					0					,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
					oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
					lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
		  		  )
	Endif

	//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
	IF ( oAponta:lFaixaHE )
		fHeAutoriz(	dDt1				,;	//01 -> Data 1
					nHr1				,;	//02 -> Hora 1
					dDt2				,;	//03 -> Data 2
					nHr2				,;	//04 -> Hora 2
					@nExAut				,;	//05 -> <@>Horas Normais Apontadas
					@nExNotAut			,;	//06 -> <@>Horas Noturnas Apontadas
					.T.					,;	//07 -> Apontar Horas Noturnas
					oAponta:dPerNotIni	,;	//08 -> Data Inicial Para a Hora Noturna
					@nExAdnAut			,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nMinHnot	,;	//10 -> Minutos do Horario Noturno
					lAcreNot			,;	//11 -> Apenas Acrescimo Noturno
			  		@nExDiaAutAdn		 ;	//12 -> <@>Horas Normais Apontadas como Noturnas
				  )
	EndIF

	//--Verifica se Deve Pagar Extra Not. a 52.50 e Calcula sem Adic. Noturno
	IF ( !( oAponta:lExtNot ) )
		IF ( nExAdn == 0 )
			nExAdn 		:= nExNot
			nExAdnAut	:= nExNotAut
		EndIF

		nEx    		:= 0
		nExNot 		:= 0
		nExAut 		:= 0
		nExNotAut	:= 0

		fCalHoras(	dDt1				,;	//01 -> Data 1
					nHr1				,;	//02 -> Hora 1
					dDt2				,;	//03 -> Data 2
					nHr2				,;	//04 -> Hora 2
					@nEx				,;	//05 -> <@>Horas Normais Apontadas
					@nExNot				,;	//06 -> <@>Horas Noturnas Apontadas
					.T.					,;	//07 -> Apontar Horas Noturnas
					oAponta:dPerNotIni	,;	//08 -> Data Inicial Para a Hora Noturna
					NIL					,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
					60					,;	//12 -> Minutos do Horario Noturno ( Aqui For‡ado como 60 )
					NIL					,;	//13 -> Apenas Acrescimo Noturno
					NIL					 ;	//14 -> Periodo da Hora Noturna
				  )
		IF ( oAponta:lFaixaHE )
			fHeAutoriz(	dDt1				,;	//01 -> Data 1
						nHr1				,;	//02 -> Hora 1
						dDt2				,;	//03 -> Data 2
						nHr2				,;	//04 -> Hora 2
						@nExAut				,;	//05 -> <@>Horas Normais Apontadas
						@nExNotAut			,;	//06 -> <@>Horas Noturnas Apontadas
						.T.					,;	//07 -> Apontar Horas Noturnas
						oAponta:dPerNotIni	,;	//08 -> Data Inicial Para a Hora Noturna
						NIL					,;  //09 -> <@>Horas de Acrescimo Noturno
						60					 ;	//10 -> Minutos do Horario Noturno ( Aqui For‡ado como 60 )
					  )
		EndIF
	Else
		IF ( nExAdn == 0 )
			nExAdn 		:= nExNot
	    	//-- HE autorizadas conforme faixas
			nExAdnAut	:= nExNotAut
		EndIF
	EndIF

	//-- Não Pagar H.Extra Para Horário Móvel Livre	
	If((( oAponta:cTipoDia == "S" ) .Or. ( lForceTrab )) .And. ( oAponta:lMovelFree ))
		nEx    		:= 0
		nExNot 		:= 0
		nExAdn 		:= 0
		nExDiaAdn   := 0
		nExtraAnt	:= 0
	    //-- HE autorizadas conforme faixas
		nExAut    	:= 0
		nExNotAut 	:= 0
		nExAdnAut 	:= 0
		nExDiaAutAdn:= 0
	EndIf
	
	IF ( oAponta:nTolHePe == 0 .And. NoRound(SomaHoras( SomaHoras( nEx, nExNot ), nExtraAnt ), 2) > nTolHExt ) .Or. oAponta:nTolHePe > 0
			IF !( lIntervalo )
				oAponta:aApo[oaApo:HeNormal, nIn] := SomaHoras(oAponta:aApo[oaApo:HeNormal, nIn], nEx)
				oAponta:aApo[oaApo:HeNotAutor, nIn] := SomaHoras(oAponta:aApo[oaApo:HeNotAutor, nIn], nExNot)
				IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
					oAponta:aApo[oaApo:HeNormalFx, nIn] := SomaHoras(oAponta:aApo[oaApo:HeNormalFx, nIn], nExAut)
					oAponta:aApo[oaApo:HeNoturnFx, nIn] := SomaHoras(oAponta:aApo[oaApo:HeNoturnFx, nIn], nExNotAut)
				EndIF
			Else
				oAponta:aApo[oaApo:HeIntNorAu, nIn] := SomaHoras(oAponta:aApo[oaApo:HeIntNorAu, nIn], nEx)
				oAponta:aApo[oaApo:HeIntNotAu, nIn] := SomaHoras(oAponta:aApo[oaApo:HeIntNotAu, nIn], nExNot)
				IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
					oAponta:aApo[oaApo:HeIntNorFx, nIn] := SomaHoras(oAponta:aApo[oaApo:HeIntNorFx, nIn], nExAut)
					oAponta:aApo[oaApo:HeIntNotFx, nIn] := SomaHoras(oAponta:aApo[oaApo:HeIntNotFx, nIn], nExNotAut)
				EndIF
			EndIF
			//-- Verifica a Prioridade Para a Geracao das Horas Extras
			IF !Empty( aPerNot )
				oAponta:aApo[oaApo:PriorityHe, nIn] := PriorityOvertime( dDt1, nHr1, aPerNot )
			EndIF
		EndIf
		
		//-- Acrescenta o Adicional Noturno sobre horas extras diurnas realizadas em continuacao a jornada noturna
		nExAdn := SomaHoras( nExAdn, nExDiaAdn )
		
		IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
			nExAdnAut := SomaHoras( nExAdnAut, nExDiaAutAdn )
		Endif
		
		//-- Adicional Noturno Sobre Horas Extras
		//-- Incluído ao valor do Ad.Sobre He. o Valor da
		//-- HE. anterior para validar com a tolerância.
		IF(( oAponta:cPerAnot # "D" ) .Or. (( oAponta:cPerAnot == "D" ) .And. ( SomaHoras(nExAdn, nExtraAnt) > oAponta:nTolNtHe )))
			If oAponta:lSepAcrNot
				nHeNotAcr := SomaHoras(nExNot,nExAdn)
				oAponta:aApo[oaApo:HrAcrNotHe, nIn] := SomaHoras(oAponta:aApo[oaApo:AdicHeNotA, nIn], nExAdn)
				oAponta:aApo[oaApo:AdicHeNotA, nIn] := SomaHoras(oAponta:aApo[oaApo:AdicHeNotA, nIn], nExNot)
				If lIntervalo
					oAponta:aApo[oaApo:AcNotHeInt, nIn] := SomaHoras(oAponta:aApo[oaApo:AcNotHeInt, nIn], nExAdn)
				EndIf
			Else
				oAponta:aApo[oaApo:AdicHeNotA, nIn] := SomaHoras(oAponta:aApo[oaApo:AdicHeNotA, nIn], nExAdn)
			EndIf
			IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
				oAponta:aApo[oaApo:AdicHeNotF, nIn] := SomaHoras(oAponta:aApo[oaApo:AdicHeNotF, nIn], nExAdnAut)
			EndIF
		EndIF
	
	If lRetHrNot
		// Retorna o horário noturno do dia atual
		oAponta:GetCfgNot(.T.)
	EndIf
	
	End Sequence
	
Return( nIncLoop )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³ExtrasHeDtm		³Autor³Equipe Advanced RH ³ Data ³06/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retorna Por Referencia a Data e Hora Para Apuracao das HE   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ExtrasHeDtm(;
								dDt1		,;	//01 -> 1a. Data
								nHr1		,;	//02 -> 1o. Horario
								dDt2		,;	//03 -> 2a. Data
								nHr2		,;	//04 -> 2o. Hora
								cTipo		,;	//05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
								lPrimeiro	,;	//06 -> Horas Extras do Primeiro Dia
								lIntervalo	,;	//07 -> Apuracao Corresponde a Intervalo
								nIncLoop	,;	//08 -> Incremento para o Loop no processo de Apontamento
								nTolHExt	 ;  //09 -> Tolerância de H.E.
					 )

Local lContinua	:= .T.

Local cFlagMar
Local dDataPri
Local nPos
Local nPosHr1
Local nPosHr2
Local nHrsAux
Local nHrDif
Local nTolHr

Begin Sequence
	
	DEFAULT lPrimeiro	:= .F.
	
	//-- Se o Apontamento for por Dia Assume o Limite de Hrs. para o Dia
	IF !(( lApHeDtM ) .and. ( lPrimeiro ) .and. (!( lIntervalo ) .or. ( oAponta:lIntNtrab )))
		Break
	EndIF
	
	Do Case
		Case cTipo == "I"											;	cFlagMar := "1S"
		Case cTipo $ "A*E*S" .or. SubStr( cTipo , -1 ) $ "A*E*S"	;	cFlagMar := "1E"
	EndCase
	
	//Procura a Data da Primeira Marcacao
	IF ( ( nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == dDt1 .and. x[3] == cFlagMar } ) ) == 0 )
		IF ( ( nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == ( dDt1 - 1 ) .and. x[3] == cFlagMar } ) ) == 0 )
			nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == ( dDt1 + 1 ) .and. ( x[3] == cFlagMar ) } )
		EndIF
    EndIF
	
	IF ( nPos > 0 )
		dDataPri	:= oAponta:aHoras[ nPos , 1 ]
	Else
		dDataPri	:= dDt1
	EndIF
	
	IF !( oAponta:lIntNtrab )
		
		If !Empty( aScan( oAponta:aHoras ,{ |x| ! Empty( x[7] ) } ) )
			//--Incrementa a variavel nIncLoop para nao apontar
			nIncLoop	:= Len( oAponta:aHoras )
			lContinua	:= .F.
			Break
		Endif
		//Salva Posicao da nHr2 no a Horas
		nPosHr2	:= aScan( oAponta:aHoras , { |x| x[1] == dDt2 .and. x[ 2 ] == nHr2 } )
		//Salva Posicao da nHr2 no a Horas
		nPosHr1	:= aScan( oAponta:aHoras ,{ |x| x[1] == dDt1 .and. x[ 2 ] == nHr1 } )
		IF !( DataHora2Str( dDataPri , 23.5959 ) < oAponta:aHoras[ nPosHr2 , 17 ] )
			//Seta as Marcacoes Como Apontadas Ate a Marcacao em Questao
			aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , nPosHr2 )
			Break
		EndIF
		
		//Verifica se Saida da Tabela e" superior a 23.59 e assume Tabela
		IF ( ( nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == dDt1 .and. x[3] $ "1S*2S*3S*4S" } ) ) == 0 )
			nPos := aScan( oAponta:aHoras ,{ |x| x[ 1 ] == dDt2 .and. x[3] $ "1S*2S*3S*4S" } )
		EndIF
		
    	//Verifica se Tabela passa de um dia para outro
		IF (( nPos > 0 ) .and. ( oAponta:aHoras[nPos,17] > DataHora2Str(dDataPri,23.5959)))
			
			nPos := 0
	    	//Verifica Qual o Ultimo Horario da Tabela
			aEval( oAponta:aHoras , { |x,y| IF( !( x[3] == "M" ) , nPos := y , NIL ) } )
			IF !(( nPos > 0 ) .and. ( oAponta:aHoras[nPos,17] <= DataHora2Str(dDt2,nHr2)))
		    	//Seta as Marcacoes Como Apontadas Ate a Marcacao em Questao Qdo. Tabela for Maior que Limite
				aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , nPosHr2 )
				Break
			EndIF
			
		    //Se a Primeira Marcacao for maior que a Tabela assume a Primeira
			IF ( DataHora2Str(dDt1,nHr1) > oAponta:aHoras[nPos,17] )
		    	//Armazena a Ultima Marcacao do Dia Anterior
				oAponta:aHoras[ nPosHr1 -1 , 7 ] := { oAponta:aHoras[ nPosHr1 -1, 1] , oAponta:aHoras[ nPosHr1 -1, 2] }
			    //Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
				aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , (  nPosHr1 - 2 ) )
				//--Incrementa a variavel nIncLoop para nao apontar
				nIncLoop	:= Len( oAponta:aHoras )
				lContinua	:= .F.
    		Else //Limita o Horario ao Horario da Tabela
				dDt2 := oAponta:aHoras[nPos,1]
				nHr2 := oAponta:aHoras[nPos,2]
   				//Armazena a Ultima Marcacao do Dia Anterior
				oAponta:aHoras[ nPosHr2 , 7 ] := { dDt2 , nHr2 }
			    //Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
				aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr2 - 1 ) )
			EndIF
			
		ElseIF ( nPosHr2 > 0 )
			
			IF ( ( nIncLoop := Len( oAponta:aHoras ) ) <= nPosHr2 )
				nIncLoop := 0
			EndIF
			
   	    	//Limita o Horario ao Limite Maximo
			
		    //Se a Primeira Marcacao for maior que a Tabela assume a Primeira
			IF (oAponta:aHoras[nPosHr1,17] < DataHora2Str(dDataPri,23.5959) )
				
				nHr2 := 0
		    	//Armazena a Ultima Marcacao do Dia Anterior
				oAponta:aHoras[ nPosHr2 , 7 ] := { dDt2 , nHr2 }
			Else
				dDt2 := oAponta:aHoras[nPosHr1,1]
				nHr2 := oAponta:aHoras[nPosHr1,2]
		    	//Armazena a Ultima Marcacao do Dia Anterior
				oAponta:aHoras[ nPosHr2 , 7 ] := { dDt2 , nHr2 }
				lContinua	:= .F.
			Endif
			//Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
			aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr2 - 1 ) )
			
		EndIF
		
		Break
		
	EndIF
	
	//Salva Posicao da nHr2 no a Horas
	nPosHr1	:= aScan( oAponta:aHoras ,{ |x| x[3] == "M" .and. x[1] == dDt1 .and. x[ 2 ] == nHr1 } )
	IF ( nPosHr1 == 0 )
		Break
	EndIF
	
	nPosHr2	:= aScan( oAponta:aHoras ,{ |x| x[3] == "M" .and. x[1] == dDt2 .and. x[ 2 ] == nHr2 } )
	//-- Verifica se a Primeira Marcacao do Par passado ultrapassa o limite do dia
	IF ( DataHora2Str( dDt1 , nHr1 ) > DataHora2Str( dDataPri , 23.5959 ) )
		
		IF Empty( aScan( oAponta:aHoras, { |x| !Empty( x[ 7 ] ) } ) )
   			//Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
			aEval( oAponta:aHoras , { |x,y|oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr1 - 1 ) )
		EndIF
		
   		//--Incrementa a variavel nIncLoop para nao apontar
		nIncLoop	:= Len( oAponta:aHoras )
		lContinua	:= .F.
		Break
		
	EndIF
	
    //--  Verifica se a Segunda marcacao passada ultrapassa o limite do dia
	IF !( DataHora2Str( dDt2 , nHr2 ) > DataHora2Str( dDataPri , 23.5959 ) )
		Break
	EndIF
	
	IF ( nPosHr2 > 0 )
		
		//Limita o Horario ao Limite Maximo
		dDt2 := dDataPri
		nHr2 := 23.5959
		oAponta:aHoras[ nPosHr2 , 7 ] := { { dDt2 , nHr2 , lIntervalo , cTipo } }
		//Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
		aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr2 - 1 ) )
		
	Else
		
		//-- Obtem a Proxima Marcacao e Armazena as Horas de Intervalo a serem
		//-- Consideradas no proximo dia (ver FhrsExdia)
		IF ( ( nPosHr2 := aScan( oAponta:aHoras ,{ |x| x[3] == "M" }, nPosHr1+1) ) > 0 )
			oAponta:aHoras[ nPosHr2 , 7 ] := {{dDataPri,23.5959},{dDt2, nHr2},lIntervalo,cTipo}
		EndIF
		
		//Seta as Marcacoes Como Apontadas Ate a Marcacao Anterior a em Questao
		aEval( oAponta:aHoras , { |x,y| oAponta:aHoras[y,6] := .T. } , 1 , ( nPosHr1) )
		
		//Limita o Horario ao Limite Maximo
		dDt2 := dDataPri
		nHr2 := 23.5959
		
	EndIF
	
End Sequence

//Tratamento para Sumula 437
//Se estiver calculando intervalo, existir diferença entre as marcações e o campo PA_PGINTOT estiver ativo,
//iguala a segunda marcação com o fim do intervalo para que a hora extra obtida no intervalo seja paga integralmente.
If lIntervalo .and. ( dDt1 <> dDt2 .or. nHr1 <> nHr2 ) .and. oAponta:lPAPgInTot
	If ( ( nPos := aScan( oAponta:aHoras ,{ |x| x[3] == cTipo } ) ) > 0 )
		While ( nPos > 0 .And. nPos <= Len(oAponta:aHoras) )
			If "S" $ cTipo
				nPos++
			Else
				nPos--
			EndIf
			
			If oAponta:aHoras[nPos,3] <> "M" .and. ( ( DataHora2Str( oAponta:aHoras[nPos,1], oAponta:aHoras[nPos,2] ) >= DataHora2Str( dDt2, nHr2 ) .and. "S" $ cTipo ) .or. ( DataHora2Str( oAponta:aHoras[nPos,1], oAponta:aHoras[nPos,2] ) < DataHora2Str( dDt2, nHr2 ) .and. "E" $ cTipo ) )
				// Identifica qual tolerância deve ser utilizada para validar se gera ou não a Sumula 437
				// Se possuir alguma tolerância de marcação cadastrada, utilizo a tolerância da marcação, mesmo que ela seja igual a 0
				// Ex: Tolerância de Marcação: 15-00-00-15-00-00 Se for saída para intervalo (2º marcação), a tolerância a ser considerada será 0
				If Val(StrTran(oAponta:cTolHex,"-","")) > 0
					nTolHr := nTolHExt
				ElseIf oAponta:nTolHePe == 0 .And. nTolHExt == 0
					nTolHr := 0 
				ElseIf oAponta:nTolHePe > 0 .And. nTolHExt == 0
					nTolHr := oAponta:nTolHePe
				EndIf
				
				If "S" $ cTipo
					nHrsAux := nHr2
					nHr2 := oAponta:aHoras[nPos,2]
					nHrDif := SubHoras(nHrsAux,nHr1)
					If nHrDif > nTolHr .Or. lGeraSuml //Se possuía tolerância, soma os minutos acrescidos em nHr2, do contrário a tolerância nunca será verificada.
						nTolHExt := SomaHoras( nTolHExt , SubHoras(nHr2,nHrsAux) )
						If oAponta:nTolHePe > 0 .And. nTolHExt == 0 .Or. oAponta:nTolHePe > 0 .And. nTolHExt > 0
							lGeraSuml := .T.
						Else
							lGeraSuml := .F.
						EndIf
					ElseIf nHrDif > 0
						aAdd(aIntMins,{dDt1,nHr1,nHr2,oAponta:nIndice})
						nHr2 := nHrsAux
					Else
						nHr2 := nHrsAux
					EndIf
				Else
					nHrsAux := nHr1
					dDt1 := oAponta:aHoras[nPos,1]
					nHr1 := oAponta:aHoras[nPos,2]
					nHrDif := fCalHoras(dDt1				,;	//01 -> Data 1
										nHrsAux				,;	//02 -> Hora 1
										dDt2				,;	//03 -> Data 2
										nHr2				,;	//04 -> Hora 2
										0					,;	//05 -> <@>Horas Normais Apontadas
										0					,;	//06 -> <@>Horas Noturnas Apontadas
										.F.					,;	//07 -> Apontar Horas Noturnas
										oAponta:dPerNotIni	,;	//08 -> Data Inicial Para a Hora Noturna
										0					,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
										.F.					,;	//13 -> Apenas Acrescimo Noturno
										{}	 		 		;	//14 -> Periodo da Hora Noturna
								)
					If nHrDif > nTolHr .Or. lGeraSuml //Se possuía tolerância, soma os minutos acrescidos em nHr2, do contrário a tolerância nunca será verificada.
						nTolHExt := SomaHoras( nTolHExt , SubHoras(nHrsAux,nHr1) )
						If oAponta:nTolHePe > 0 .And. nTolHExt == 0 .Or. oAponta:nTolHePe > 0 .And. nTolHExt > 0
							lGeraSuml := .T.
						Else
							lGeraSuml := .F.
						EndIf
					ElseIf nHrDif > 0
						aAdd(aIntMins,{dDt1,nHr1,nHr2,oAponta:nIndice})
						nHr1 := nHrsAux
					Else
						nHr1 := nHrsAux
					EndIf
				EndIf
				Exit
			EndIf
		EndDo
	EndIf
EndIf

Return( lContinua )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³PriorityOvertime³Autor³Marinaldo de Jesus ³ Data ³15/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Verificar a Prioridade Para a Geracao das Horas Extras      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function PriorityOvertime(	dDt1		,;	//Primira Data
								 	nHr1		,;	//Primeira Hora
								 	aPerNot 	 ;	//Periodo da Hora Noturna
								 )

Local nPriority := Priority_Normal_Overtime			//Prioridade Para Extras Normais

Local cDtHrPer
Local cDtHr1
Local dDiaMarc := cToD("//")
Local lRet1 := .T.
Local nPos	:= 0

If ValType(aAuxMarc) == "A" .And. !Empty( aPerNot )
	dDiaMarc:= aPerNot[ 01 , 01 ]
	nPos := aScan( aAuxMarc ,{ |x| x[2] == nHr1 })
	If nPos > 1
		lRet1:= .F.
	Endif
Endif

IF !Empty( aPerNot ) .And. lRet1
	oAponta:SortaHoras( { |x,y| ( x[5] < y[5] ) } , @aPerNot )
	cDtHrPer	:= aPerNot[ 01 , 05 ]
	cDtHr1	    := DataHora2Str( dDt1 , nHr1 )
	IF ( cDtHrPer <= cDtHr1 )
		nPriority := Priority_Nocturnal_Overtime	//Prioridade Para Extras Noturnas
	EndIF
EndIF

Return( nPriority )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³fMtaTabAp  ³ Autor ³ Equipe Advanced RH    ³ Data ³ 27/01/00 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Monta Array com marcacoes e Tabela para apontamento         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nMarcTab -> Numero de Marcacoes da Tabela de Horario		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fMtaTabAp(	lMarcImpar	,;	//01 -> Tratamento de Marcacoes Impares na Montagem de aHoras
							lHeInJor    ,;	//02 -> Apontar Extras Inter Jornada
							lMarcIgual	 ,;  //03 -> Tratamento para Maracoes Duplicadas
							lIgnora	 ;
						  )
/*
	04 ->  lIgnora: Inserido devido a validacao de inter jornada entre periodos.
	Para mais detalhes, verificar chamado: TQECYB. Este parametro sera utilizado somente pela rotina fHrsIntAnt.
*/

Local aPerNot		:= {}
Local aPerDia		:= {}
Local aLimite		:= {}

Local lJaProc		:= .F.

Local nLenMar		:= Len( oAponta:aMarClone )
Local nMarcTab		:= 0
Local nCtPos		:= 0
Local nHrsNor   	:= 0
Local nHrsNot   	:= 0
Local nX   	        := 0

Local cTip
Local cLimite
Local cMarca
Local cFlagMarc
Local cDataHrTab
Local c1EMarc
Local cDtHrInNot
Local cDtHrFmNot

Local nPos
Local nPosSub1
Local nPosIni
Local nPosTab
Local nMarcTSub1
Local nLenTab
Local nLimite
Local nIndice
Local nIndiceaApo
Local nSub1IndaApo
Local nfimHrNot
Local nPos1Marc
DEFAULT lIgnora	:= .F.

nMarcReal	:= 0

IF ( nPos := aScan( oAponta:aMarClone , { |x| x[AMARC_ORDEM] == oAponta:cOrdem } ) ) > 0
	For nX := nPos To nLenMar
		IF ( oAponta:aMarClone[ nX , AMARC_ORDEM ] == oAponta:cOrdem )
			IF !( lJaProc := ( oAponta:aMarClone[ nX , AMARC_APONTA ] == "S" ) )
				Exit
			EndIF
		Else
			Exit
		EndIF
	Next nX
EndIF

IF ( nPos := aScan( oAponta:aTabClone, { |x| x[CALEND_POS_ORDEM] == oAponta:cOrdem } ) ) == 0 .Or. ;
	( ( ( !lApHeDtm .Or. !lHeInJor ) .And. lIgnora ) .Or. lJaProc ) 
	Return( nMarcTab ) //nMarcTab, aqui, e Zero( 0 ). Nao Reaponta as Marcacoes Uma vez que ja foram apontadas
EndIF

//-- Salva a posicao inicial do Array para Elimina-la
nPosIni := nPos

nLenTab := Len( oAponta:aTabClone )
While nPos <= nLenTab .And. oAponta:cOrdem == oAponta:aTabClone[nPos, 2] .And. (oAponta:aTabClone[nPos, CALEND_POS_DATA_APO] == oAponta:dData .Or. oAponta:aTabClone[nPos, CALEND_POS_DATA_APO] == oAponta:dData-1)
	IF ( oAponta:aTabClone[ nPos , CALEND_POS_APON_FERIAS ] )
		For nX := 1 To 2
			aAdd( oAponta:aHoras												,;
						{					  			 			 			 ;
							oAponta:aTabClone[ nPos , CALEND_POS_DATA ]			,; // 01 - Data da Marcacao
							23.59												,; // 02 - Hora da Marcacao
							IF( nX == 1 , "1E" , "1S" )							,; // 03 - Tipo de Marcacao
							0													,; // 04 - Total de Horas Trabalhadas Conf. Tabela (Normal + Noturna )
							oAponta:aTabClone[ nPos , CALEND_POS_TIPO_DIA ]		,; // 05 - Tipo do Dia
							.F.													,; // 06 - Se ja Apontou a Marcacao
							{}													,; // 07 - Data/Hora da Ultima Marcacao Anterior
							""													,; // 08 - Atualiza Marcacao Qdo. Ja Passou Pela Tabela (Tipo de Marcacao)
							0													,; // 09 - Horas de Intervalo da Tabela (Normal + Noturna )
							IF( nX == 1 , "EJ" , "SJ" )							,; // 10 - Tipo de Marcacao (Jornada)
							nX													,; // 11 - Indice Para oAponta:aApo
							.F.													,; // 12 - Ja Alterou Horario Movel Entrada/Saida
							.F.													,; // 13 - Ja Alterou Horario Movel Intervalo
							SRA->RA_CC											,; // 14 - Centro de Custo do Cadastro
							oAponta:aTabClone[ nPos , CALEND_POS_EXCECAO ]		,; // 15 - Flag Indicador de Excecao <=> "E"
							0				 		 		  					,; // 16 - Horas Trabalhadas sem Adicional
							""										 			,; // 17 - String de Data e Hora ( DataHora2Str() ) para aSort()
					   		/*SRA->RA_PROCES*/									,; // 18 - Processo do funcionario
							/*oAponta:aTabClone[ nPos , CALEND_POS_PERIODO ] */	,; // 19 - Periodo
							/*oAponta:aTabClone[ nPos , CALEND_POS_ROTEIRO ] */	,; // 20 - Roteiro
							/*oAponta:aTabClone[ nPos , CALEND_POS_NUM_PAGTO]*/	,; // 21 - Numero de Pagamento
							/*SRA->RA_POSTO									 */	,; // 22 - Posto
							/*SRA->RA_DEPTO									 */	,; // 23 - Depto
							/*SRA->RA_CODFUNC								 */	,; // 24 - Cod. Funcao
							oAponta:aTabClone[ nPos , CALEND_POS_TURNO]			,; // 25 - Semana/Sequencia Turno
							oAponta:aTabClone[ nPos , CALEND_POS_SEQ_TURNO]		,; // 26 - Semana/Sequencia Turno
							.F.													;  // 27 -  .F. - HE Intervalo Normal / .T. - HE Intervalo ref Sumula 437
						};
				 )
		Next nX
		nMarcTab := 2
		Exit
	Else
		nMarcTab++
		//-- Obtem o tipo da marcacao 1E/1S.. para armazenar em oAponta:aTabClone
		IF ( oAponta:aTabClone[ nPos , CALEND_POS_TIPO_MARC ] == "1E" )
			cTip := "EJ"
		ElseIF ( SubStr( oAponta:aTabClone[ nPos , CALEND_POS_TIPO_MARC ] , -1 ) == "E" )
			nPosSub1 := ( nPos - 1 )
			cTip := IF( oAponta:aTabClone[ Max( nPosSub1 , 1 ) , CALEND_POS_HRS_INTER ] > 0, "EI" , "EJ" )
		ElseIF ( oAponta:aTabClone[ nPos , CALEND_POS_HRS_INTER ] > 0 )
			cTip := "SI"
		Else
			cTip := "SJ"
		EndIF
		cFlagMarc	 := oAponta:aTabClone[ nPos , CALEND_POS_TIPO_MARC ]
		nIndiceaApo  := aScan( oAponta:aSiglaMarc , { |x| ( x == cFlagMarc ) } )
		nSub1IndaApo := ( nIndiceaApo - 1 )
		aAdd( oAponta:aHoras											,;
					  {	                    	 			 		 	 ;
					  	oAponta:aTabClone[ nPos , CALEND_POS_DATA	]	,; // 01 - Data da Marcacao
					  	oAponta:aTabClone[ nPos , CALEND_POS_HORA	]	,; // 02 - Hora da Marcacao
					  	cFlagMarc										,; // 03 - Tipo de Marcacao
						0												,; // 04 - Total de Horas Trabalhadas Conf. Tabela ( Normal + Noturna )
						oAponta:aTabClone[ nPos , CALEND_POS_TIPO_DIA ]	,; // 05 - Tipo do Dia
						.F.												,; // 06 - Se ja Apontou a Marcacao
						{}												,; // 07 - Data/Hora da Ultima Marcacao Anterior
						""												,; // 08 - Atualiza Marcacao Qdo. Ja Passou Pela Tabela (Tipo de Marcacao)
						oAponta:aTabClone[ nPos ,CALEND_POS_HRS_INTER ]	,; // 09 - Horas de Intervalo da Tabela
						cTip											,; // 10 - Tipo de Marcacao (Jornada)
						nIndiceaApo										,; // 11 - Indice Para oAponta:aApo
						.F.												,; // 12 - Ja Alterou Horario Movel Entrada/Saida
						.F.					 							,; // 13 - Ja Alterou Horario Movel Intervalo
						SRA->RA_CC										,; // 14 - Centro de Custo do Cadastro
						oAponta:aTabClone[ nPos , CALEND_POS_EXCECAO ]	,; // 15 - Flag Indicador de Excecao <=> "E"
						0				 	 							,; // 16 - Horas Trabalhadas sem Adicional
						""										 		,; // 17 - String de Data e Hora ( DataHora2Str() ) para aSort()
					   	/*SRA->RA_PROCES*/									,; // 18 - Processo do funcionario
						/*oAponta:aTabClone[ nPos , CALEND_POS_PERIODO ] */	,; // 19 - Periodo
						/*oAponta:aTabClone[ nPos , CALEND_POS_ROTEIRO ] */	,; // 20 - Roteiro
						/*oAponta:aTabClone[ nPos , CALEND_POS_NUM_PAGTO]*/	,; // 21 - Numero de Pagamento
						/*SRA->RA_POSTO									 */	,; // 22 - Posto
						/*SRA->RA_DEPTO									 */	,; // 23 - Depto
						/*SRA->RA_CODFUNC								 */	,; // 24 - Cod. Funcao
						oAponta:aTabClone[ nPos , CALEND_POS_TURNO]			,; // 25 - Semana/Sequencia Turno
						oAponta:aTabClone[ nPos , CALEND_POS_SEQ_TURNO]		,; // 26 - Semana/Sequencia Turno
						.F.													,; // 27 - .F. - HE Intervalo Normal / .T. - HE Intervalo ref Sumula 437
						oAponta:aTabClone[ nPos , CALEND_POS_DATA_APO]		;  // 28 - Data de apontamento
					   };
			 )

		//-- Retorna Posicao em oAponta:aTabClone Referente a 1a Entrada para a Data do Adicional Noturno
		If oAponta:lApoSaida
			nPosTab := aScan( oAponta:aTabClone , { |x| x[CALEND_POS_DATA_APO] == oAponta:dData .and. x[CALEND_POS_TIPO_MARC] == "1E" } )
		Else
			nPosTab := aScan( oAponta:aTabClone , { |x| x[CALEND_POS_DATA] == oAponta:dData .and. x[CALEND_POS_TIPO_MARC] == "1E" } )
		EndIf

		If cTip == "SJ"
			nPos1Marc := aScan(oAponta:aHoras,{|x| x[3] == "1E"})
			
			If nPos1Marc > 0 .And. oAponta:lPerpadn .And. oAponta:lAdNtPro
				cDtHrInNot	:= DataHora2Str(oAponta:dPerNotIni,oAponta:nIniHnot)
				cDtHrFmNot	:= DataHora2Str(oAponta:dPerNotIni+1,oAponta:nFimHnot)
				c1EMarc		:= DataHora2Str(oAponta:aHoras[nPos1Marc,1],oAponta:aHoras[nPos1Marc,2])
				
				If c1EMarc >= cDtHrInNot .And. c1EMarc <= cDtHrFmNot
					cDataHrTab	:= DataHora2Str(oAponta:aHoras[nMarcTab,1],oAponta:aHoras[nMarcTab,2])
					
					If cDataHrTab > cDtHrFmNot
						nfimHrNot := oAponta:aHoras[nMarcTab,2]
					Else
						nfimHrNot := oAponta:nFimHnot
					EndIf
				Else
					nfimHrNot := oAponta:nFimHnot
				EndIf
			Else
				nfimHrNot := oAponta:nFimHnot
			EndIf
		EndIf

		//-- Quando for uma marcacao de saida.
		IF ( SubStr( cFlagMarc , - 1 ) == "S" )
			//-- Calcula as horas trabalhadas.
			nHrsNor		:= nHrsNot := 0
			aPerNot		:= {}
			aPerDia		:= {}
			nMarcTSub1	:= ( nMarcTab - 1 )
			//-- Aponta Falta Meio periodo
			oAponta:AddPerHr(	oaApo:HrTrbTabel								,;	//01 -> Identificador do Elemento Diurno no Apo
								oaApo:HrTrbNotTb								,;	//02 -> Identificador do Elemento Noturno no Apo
								nSub1IndaApo									,;	//03 -> Posicao no Elemento do Identificador
								oAponta:aApoHr									,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
								oAponta:aHoras[nMarcTSub1,1]					,;	//05 -> Data 1
								oAponta:aHoras[nMarcTSub1,2]					,;	//06 -> Hora 1
								oAponta:aHoras[nMarcTab,1]						,;	//07 -> Data 2
								oAponta:aHoras[nMarcTab,2]						,;	//08 -> Hora 2
								@nHrsNor										,;	//09 -> <@>Horas Normais Apontadas
								@nHrsNot										,;	//10 -> <@>Horas Noturnas Apontadas
								oAponta:lHnotTab								,;	//11 -> Apontar Horas Noturnas lx
								oAponta:dPerNotIni								,;	//12 -> Data Inicial Para a Hora Noturna
								NIL												,;	//13 -> <@>Horas de Acrescimo Noturno
								oAponta:nIniHnot								,;	//14 -> Inicio do Horario Noturno
								If(cTip == "SJ",nfimHrNot,oAponta:nFimHnot)		,;	//15 -> Final do Horario Noturno
								oAponta:nMinHnot								,;	//16 -> Minutos do Horario Noturno
								oAponta:lAcreNot								 ;	//17 -> Apenas Acrescimo Noturno
						 )
						 
			//-- Alimenta a matriz de apontamento com as horas trabalhadas
			nHrsNor					:= SomaHoras(oAponta:aApo[oaApo:HrTrbTabel,nSub1IndaApo],oAponta:aApo[oaApo:HrTrbNotTb,nSub1IndaApo])
			oAponta:aHoras[01,04]	:= __TimeSum(__TimeSum(SomaHoras( oAponta:aHoras[01,04] , nHrsNor ), 0 ), 0 )

			nHrsNor					:= 0
			//Calcula as Horas Sem Considerar o Adicional Noturno
			fCalHoras(	oAponta:aHoras[nMarcTSub1,1]	,;	//01 -> Data 1
						oAponta:aHoras[nMarcTSub1,2]	,;	//02 -> Hora 1
						oAponta:aHoras[nMarcTab,1]		,;	//03 -> Data 2
						oAponta:aHoras[nMarcTab,2]		,;	//04 -> Hora 2
						@nHrsNor						,;	//05 -> <@>Horas Normais Apontadas
						NIL								,;	//06 -> <@>Horas Noturnas Apontadas
						.F.								,;	//07 -> Apontar Horas Noturnas
						NIL								,;	//08 -> Data Inicial Para a Hora Noturna
						NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
						NIL		 						 ;	//14 -> Periodo da Hora Noturna
					  )
			oAponta:aHoras[01,16]	:= SomaHoras( oAponta:aHoras[01,16] , nHrsNor )
			IF !( oAponta:lHnotFal ) //Se Nao Considerar o Horario Noturno Para Desconto das Faltas
				oAponta:aApo[oaApo:HrTrabTbNN,nSub1IndaApo]	:= SomaHoras(oAponta:aApo[oaApo:HrTrabTbNN,nSub1IndaApo], nHrsNor )
IF ( oAponta:lRF0ChkTable )
					oAponta:PutPer(		oaApo:HrTrabTbNN,;						//01 -> Identificador do Elemento no Apo
					                 	nMarcTSub1,;							//02 -> Posicao no Elemento do Identificador
					                 	{;										//04 -> Array de Periodos Diurno e/ou Noturno
					                 		{;
					                 			oAponta:aHoras[nMarcTSub1,1],;
												oAponta:aHoras[nMarcTSub1,2],;
												oAponta:aHoras[nMarcTab,1],;
												oAponta:aHoras[nMarcTab,2],;
											};
										},;
										.T.;  
	                )
                EndIF
			EndIF
		EndIF
		//-- Quando a saida se referir a fim de jornada, encerra loop
		IF (;
				( SubStr( cFlagMarc , -1 ) == "S" );
				.and.;
				( oAponta:aTabClone[ nPos , CALEND_POS_HRS_INTER ] == 0 );
			)
			nPos++
			nPosSub1 := ( nPos - 1 )
			//-- Quando existir uma proxima marcacao de entrada
			IF ( ( nPos <= nLenTab ) .and. ( oAponta:cOrdem == oAponta:aTabClone[ nPos , CALEND_POS_ORDEM ] ) )
				nLimite := DataHora2Val(	oAponta:aTabClone[ nPos     , CALEND_POS_DATA ]	,;
											oAponta:aTabClone[ nPos     , CALEND_POS_HORA ]	,;
											oAponta:aTabClone[ nPosSub1 , CALEND_POS_DATA ]	,;
											oAponta:aTabClone[ nPosSub1 , CALEND_POS_HORA ]	,;
											"H";
										)
				//-- Obtem o horario de entrada para limite das marcacoes reais
				nLimite := ( __Hrs2Min( nLimite ) / 2 )  
				nLimite := Round( __Min2Hrs( Round( nLimite , 2 ) ) , 2 )
				If oAponta:lApoSaida
					aLimite := RetIniTab( oAponta:aTabClone[nPos,CALEND_POS_DATA_APO] , oAponta:aTabClone[nPos,CALEND_POS_HORA] , nLimite )
				Else
					aLimite := RetIniTab( oAponta:aTabClone[nPos,CALEND_POS_DATA] , oAponta:aTabClone[nPos,CALEND_POS_HORA] , nLimite )
				EndIf
				cLimite	:= DataHora2Str( aLimite[1] , aLimite[2] )
			EndIF
			Exit
			//-- Quando a saida se referir a intervalo
		ElseIF (;
					( SubStr( cFlagMarc , -1 ) == "S" );
					.and.;
					( oAponta:aTabClone[nPos,CALEND_POS_HRS_INTER] != 0 );
				 )
			//-- Calcula as horas de intervalo e alimenta a matriz de apontamento.
			nHrsNor		:= nHrsNot := 0
			aPerNot		:= {}
			aPerDia		:= {}
			nIndice		:= Min( nLenTab , nPos + 1 )
			oAponta:AddPerHr(	oaApo:HrIntTabel								,;	//01 -> Identificador do Elemento Diurno no Apo
								oaApo:HrIntNotTb								,;	//02 -> Identificador do Elemento Noturno no Apo
								nIndiceaApo										,;	//03 -> Posicao no Elemento do Identificador
								oAponta:aApoHr									,;	//04 -> (NAO ELIMINAR) -Array de Horarios do Apontamento (NAO ELIMINAR)
								oAponta:aTabClone[ nPos    , CALEND_POS_DATA ]	,;	//05 -> Data 1
								oAponta:aTabClone[ nPos    , CALEND_POS_HORA ]	,;	//06 -> Hora 1
								oAponta:aTabClone[ nIndice , CALEND_POS_DATA ]	,;	//07 -> Data 2
								oAponta:aTabClone[ nIndice , CALEND_POS_HORA ]	,;	//08 -> Hora 2
								@nHrsNor										,;	//09 -> <@>Horas Normais Apontadas
								@nHrsNot										,;	//10 -> <@>Horas Noturnas Apontadas
								oAponta:lHnotTbI								,;	//11 -> Apontar Horas Noturnas
								oAponta:dPerNotIni									,;	//12 -> Data Inicial Para a Hora Noturna
								NIL												,;	//13 -> <@>Horas de Acrescimo Noturno
								oAponta:nIniHnot								,;	//14 -> Inicio do Horario Noturno
								oAponta:nFimHnot								,;	//15 -> Final do Horario Noturno
								oAponta:nMinHnot								,;	//16 -> Minutos do Horario Noturno
								oAponta:lAcreNot								,;	//17 -> Apenas Acrescimo Noturno
								@aPerNot										,;	//18 -> Periodo Horario Noturno
								@aPerDia										,;	//19 -> Periodo Horario Diurno
								.T.												,;	//20 -> Acrescenta as Horas Calculadas (Noturnas e Diurnas) no Identificador Passado
								.T.												 ; 	//21 -> Adiciona Periodo como Novo Elemento
						  	 )

			nHrsNor := 0
			//Calcula as Horas Sem Considerar o Adicional Noturno
			fCalHoras(	oAponta:aTabClone[ nPos    , CALEND_POS_DATA ]	,;	//01 -> Data 1
						oAponta:aTabClone[ nPos    , CALEND_POS_HORA ]	,;	//02 -> Hora 1
						oAponta:aTabClone[ nIndice , CALEND_POS_DATA ]	,;	//03 -> Data 2
						oAponta:aTabClone[ nIndice , CALEND_POS_HORA ]	,;	//04 -> Hora 2
						@nHrsNor										,;	//05 -> <@>Horas Normais Apontadas
						NIL												,;	//06 -> <@>Horas Noturnas Apontadas
						.F.												,;	//07 -> Apontar Horas Noturnas
						NIL												,;	//08 -> Data Inicial Para a Hora Noturna
						NIL												,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot								,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot								,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot								,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot								,;	//13 -> Apenas Acrescimo Noturno
						NIL		 									 	 ;	//14 -> Periodo da Hora Noturna
					  )
			oAponta:aApo[oaApo:HrIntTbNNt,nIndiceaApo]	:= SomaHoras( oAponta:aApo[oaApo:HrIntTbNNt,nIndiceaApo] , nHrsNor )
			IF ( oAponta:lRF0ChkTable )
				oAponta:PutPer(	    oaApo:HrIntTbNNt							     	,;  //01 -> Identificador do Elemento no Apo
				                 	nMarcTab											,;  //02 -> Posicao no Elemento do Identificador
				                 	{;														//04 -> Array de Periodos Diurno e/ou Noturno
				                 		{;
				                 			oAponta:aTabClone[ nPos    , CALEND_POS_DATA ],;
											oAponta:aTabClone[ nPos    , CALEND_POS_HORA ],;
											oAponta:aTabClone[ nIndice , CALEND_POS_DATA ],;
											oAponta:aTabClone[ nIndice , CALEND_POS_HORA ],;
										};
									};
                )
			EndIF
		EndIF
		nPos++
	EndIF
End While

If !( lIgnora )
	//-- Nao monta oAponta:aHoras novamente para esta ordem eliminando os ele-
	//-- mentos de oAponta:aTabClone cuja ordem seja igual a oAponta:cOrdem.
	nPos --
	For nX := nPosIni To nPos
		oAponta:aTabClone[ nX , CALEND_POS_ORDEM ] := "ZZ"
	Next nX
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica numero de marcacoes do dia                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF ( ( nPos := aScan( oAponta:aMarClone,{ |x| x[AMARC_ORDEM] == oAponta:cOrdem } ) ) > 0 )
	nPosIni := nPos
	nCtPos	:= 0
	nLenMar := Len( oAponta:aMarClone )
	While (;
				( nPos <= nLenMar );
				.and.;
				( oAponta:cOrdem == oAponta:aMarClone[ nPos,AMARC_ORDEM ] );
		 )
		//-- Quando a marcacao for maior ou igual a entrada da proxima
		//-- jornada a marcacao faz parte da jornada atual.
		IF !Empty( cLimite )
			cMarca := DataHora2Str( oAponta:aMarClone[ nPos  , AMARC_DATA ] , oAponta:aMarClone[ nPos , AMARC_HORA ] )
			IF ( cMarca >= cLimite )
	   		   	IF ( cMarca = cLimite .and. nPos > 1)
			   		++nCtPos
			   	Endif
				Exit
			EndIF
		EndIF
		++nCtPos
		++nPos
	End While

	//-- Se o numero de marcacoes forem impares, nao aponta.
	IF (;
			!( lMarcImpar );
			.or.;
			( nCtPos == 1 );
		) //Tratamento para Marcacoes Impares
		IF ( ( nCtPos % 2 ) > 0 )
			--nCtPos
		EndIF
    EndIF

	//-- So carrega as marcacoes se for >= 2 marcacoes
	IF ( nCtPos >= 2 )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega as marca‡”es do dia.                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nMarcReal	:= nCtPos
		nCtPos		:= 0
		nPos   		:= nPosIni
		While (;
					( nPos <= nLenMar );
					.and.;
					( oAponta:cOrdem == oAponta:aMarClone[ nPos , AMARC_ORDEM ] );
					.and.;
					( ( ++nCtPos ) <= nMarcReal );
				)
			aAdd(oAponta:aHoras									,;
						{	oAponta:aMarClone[nPos,AMARC_DATA]	,; // 01 - Data da Marcacao
							oAponta:aMarClone[nPos,AMARC_HORA]	,; // 02 - Hora da Marcacao
							"M"									,; // 03 - Tipo de Marcacao
							0									,; // 04 - Total de Horas Trabalhadas Conf. Tabela Normal + Noturna
							""									,; // 05 - Tipo do Dia
							.F.									,; // 06 - Se ja Apontou a Marcacao
							{}									,; // 07 - Data/Hora da Ultima Marcacao Anterior
							""									,; // 08 - Atualiza Marcacao Qdo. Ja Passou Pela Tabela (Tipo de Marcacao)
							0									,; // 09 - Horas de Intervalo da Tabela (Normal + Noturna )
							""									,; // 10 - Tipo de Marcacao (Jornada)
							0									,; // 11 - Indice Para oAponta:aApo ( Apenas para Tabela. Marcacoes nao Tem Indice )
							.F.									,; // 12 - Ja Alterou Horario Movel Entrada/Saida
							.F.									,; // 13 - Ja Alterou Horario Movel Intervalo
							oAponta:aMarClone[nPos,AMARC_CC]	,; // 14 - Centro de Custo da Marcacao
							""									,; // 15 - Flag Indicador de Excecao <=> "E"
							0 									,; // 16 - Horas Trabalhadas sem Adicional
						  	""									,; // 17 - String de Data e Hora ( DataHora2Str() ) para aSort()
					   		/*SRA->RA_PROCES*/									,; // 18 - Processo do funcionario
							/*oAponta:aTabClone[ nPos , CALEND_POS_PERIODO ] */	,; // 19 - Periodo
							/*oAponta:aTabClone[ nPos , CALEND_POS_ROTEIRO ] */	,; // 20 - Roteiro
							/*oAponta:aTabClone[ nPos , CALEND_POS_NUM_PAGTO]*/	,; // 21 - Numero de Pagamento
							/*SRA->RA_POSTO									 */	,; // 22 - Posto
							/*SRA->RA_DEPTO									 */	,; // 23 - Depto
							/*SRA->RA_CODFUNC								 */	,; // 24 - Cod. Funcao
							oAponta:aMarClone[ nPos , CALEND_POS_TURNO]			,; // 25 - Semana/Sequencia Turno
							oAponta:aMarClone[ nPos , CALEND_POS_SEQ_TURNO]		,; // 26 - Semana/Sequencia Turno
							.F.													,; // 27 - .F. - HE Intervalo Normal / .T. - HE Intervalo ref Sumula 437
							oAponta:aMarClone[ nPos , AMARC_DATAAPO]			;  // 28 - Data de apontamento
						  };
				 )
			nPos++
		End While
		If !( lIgnora )

			//-- Elimina as marcacoes utilizadas evitando reuso na mesma ordem
			nPos --

			For nX := nPosIni To nPos
				oAponta:aMarClone[nX,AMARC_ORDEM] := "ZZ"
			Next nX

		EndIf
	EndIF
EndIF

//Carrega a String de Horas Para o aSort.
For nX := 1 To Len( oAponta:aHoras )
	oAponta:aHoras[ nX , 17 ] := DataHora2Str( oAponta:aHoras[ nX , 01 ] , oAponta:aHoras[ nX , 02 ] )
Next nX

//-- Ordena as Marcacoes do Dia com as Marcacoes da Tabela
oAponta:SortaHoras()

//Verifica e Modifica as Marcacoes Duplicadas
//Deve ser Feito Apos a Ordenacao do oAponta:aHoras
IF ( lMarcIgual )
	oAponta:ChkMarcDup()
EndIF

//Quando nao for Horario Movel Livre.
IF !( oAponta:lMovelFree )
	//-- Tratamento para Marcacoes Impares
	IF ( ( lMarcImpar ) .and. !Empty( oAponta:aHoras ) )
		oAponta:ChkMarcImpar()
	EndIF
EndIF

//Verifica se Devera ou Nao Apontar as Marcacoes
If !( lIgnora )
	nMarcTab := IF(;
						(;
							( lJaProc );	//Se ja Tiver Apontada
							.and.;
							!( lApHeDtm );	//E as Horas Extras nao forem pela Data de Marcacao
							.and.;
							!( lHeInJor );	//E nao for Apontar Inter-Jornada
						),;
						0,;					//Nao Reaponta as Marcacoes uma vez que ja foram apontadas
							IF(;
								(;
									( lJaProc  );	//Se ja Tiver Apontada
									.and.;
									( lHeInJor );	//E for Apontar Inter-Jornada
									.and.;
									!( lApHeDtm );	//E as Horas Extras nao forem pela Data de Marcacao
								),;
								0,;					//Nao Reaponta as Marcacoes uma vez que ja foram apontadas
								nMarcTab;			//Caso contario, passa o numero de Marcacoes a serem apontadas
							   );
					)
EndIf

Return( nMarcTab )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fHrsInter   ³ Autor ³Marinaldo de Jesus   	  ³ Data ³28/09/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Aponta Horas Extras Inter Jornada                           	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<vide parametros formais>										³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>										³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                   	    	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      			³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                		³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fHrsInter( cFil, lGrava )

Local dDiaAtu		:= dDateEmpty						//-- Data da Marcacao do dia Atual
Local dDiaAnt		:= dDateEmpty						//-- Data da Marcacao do Dia Anterior

Local lUltMarc		:= .F.								//-- Encontrou a ultima marcacao do dia anterior
Local lHeAutoriza	:= .F.								//-- Verifica se Horas Extras Sao Autorizadas
Local lPriMarc		:= .F.								//-- Encontrou a primeira marcacao do dia atual
Local lFeriado		:= .F.								//-- Verifica se o Dia em Questao e" um Feriado

Local nUltMarc		:= 0								//-- Ultima Marcacao do Dia Anterior
Local nPriMarc		:= 0								//-- Primeira Marcacao do Dia Atual
Local nHrsInter		:= 0								//-- Diferenca de Horas Entre uma Jornada e Outra
Local nIndAtu		:= 0								//-- Indice Auxiliar para Retorno da Marcacao Anterior
Local nIndAnt		:= 0								//-- Indice Auxiliar para Retorno da Marcacao Atual
Local nTipoDia		:= 0								//-- Verifica o Tipo do Dia para pagamento da Inter Jornada
Local nLenaHrs		:= 0								//-- Tamanho de oAponta:aHoras
Local nHeInterAutFx := 0								//-- Horas Interjornada Autorizadas segundo faixa de HE autorizadas
Local nPos			:= 0
Local nInterJorAnt	:= oAponta:nHrInterJd
Local nI			:= 0
//Variáveis para controle do saldo de horas de atraso abonado para inter-jornada
Local nSldParaAtraso         := 0
Local dIntDiaAtu             := 0

Local lIntFeriado            := 0
Local lPriEntrNormal         := .F.
//no caso de haver atraso extrapolando o período de interjornada
Local nTamAtraso     := 0
Local nTamNaoAbonado := 0

nIntPriEntradPadrao := 0

// Aponta Hora Extra Inter-Jornada
IF !Empty( oAponta:aHorasAnt )
	nLenaHrs	:= Len( oAponta:aHorasAnt )
	For nI := nLenaHrs To 1 Step -1 // For para buscar a ultima marcação do dia anterior
		If oAponta:aHorasAnt[nI,3] == "M"
			nIndAnt := nI
			Exit
		EndIf
	Next
	
	nTipoDia	:= aScan( oAponta:aHorasAnt , { |x| x[ 3 ] == "1E" } )
	If nIndAnt > 0
		If oAponta:nCountOrd == 1 // Primeiro dia do período
			oAponta:dDataGravar	:= oAponta:aHorasAnt[ 1, 1 ]	//Dia da 1a. Marcacao Anterior
			
			dDiaAnt := oAponta:aHorasAnt[ nIndAnt, 1 ]			//Data da Efetiva Marcacao Anterior
			nUltMarc := oAponta:aHorasAnt[ nIndAnt, 2 ]			//Ultima Marcacao do Dia Anterior
			lFeriado := fFeriado(cFil, dDiaAnt)
			oAponta:cCustoGrv := oAponta:aHorasAnt[ nIndAnt, 14 ]
			If ( nTipoDia > 0 .and. IF( lFeriado, "F", oAponta:aHorasAnt[ nTipoDia, 5 ] ) $ oAponta:cInterNt )
				lUltMarc := .T.
			EndIf
		Else
			While ( nIndAnt > 0 )
				// Retorna última marcacao do dia anterior
				If ( oAponta:aHorasAnt[ nIndAnt, 3 ] == "M" )
					
					oAponta:dDataGravar	:= oAponta:aHorasAnt[ 1, 1 ]	//Dia da 1a. Marcacao Anterior
					
					dDiaAnt := oAponta:aHorasAnt[ nIndAnt, 1 ]			//Data da Efetiva Marcacao Anterior
					nUltMarc := oAponta:aHorasAnt[ nIndAnt, 2 ]			//Ultima Marcacao do Dia Anterior
					lFeriado := fFeriado(cFil, dDiaAnt)
					oAponta:cCustoGrv := oAponta:aHorasAnt[ nIndAnt, 14 ]
					If ( nTipoDia > 0 .and. IF( lFeriado, "F", oAponta:aHorasAnt[ nTipoDia, 5 ] ) $ oAponta:cInterNt )
						lUltMarc := .T.
					EndIf
					Exit
				EndIf
				nIndAnt--
			End While
		EndIf
	
		nIndAtu		:= 1
		nLenaHrs	:= Len( oAponta:aHoras )
		nTipoDia	:= aScan( oAponta:aHoras , { |x| x[ 3 ] == "1E" } )
		While ( nIndAtu <= nLenaHrs )
			If oAponta:nHrInterJd > 0
				//Retorna primeira entrada (da Tabela padrão de horario)
				IF ( oAponta:aHoras[ nIndAtu , 3 ] == "1E" )
					dIntDiaAtu		:= oAponta:aHoras[ nIndAtu , 1 ]								//Data da Marcacao Atual
					nIntPriEntradPadrao  := oAponta:aHoras[ nIndAtu , 2 ]							//Primeira Marcacao do Dia Atual
					lIntFeriado	    := fFeriado(cFil,dIntDiaAtu)
					IF ( nTipoDia > 0 .and. lIntFeriado == .F. )
						lPriEntrNormal := .T.
					EndIF
				EndIF
			EndIf
			
			//Retorna primeira marcacao do dia atual
			IF ( oAponta:aHoras[ nIndAtu , 3 ] == "M" ) .And. If( !Empty(dDiaAnt), oAponta:dDataGravar # oAponta:aHoras[ nIndAtu , 1 ], .T. )
				dDiaAtu		:= oAponta:aHoras[ nIndAtu , 1 ]							//Data da Marcacao Atual
				nPriMarc	:= oAponta:aHoras[ nIndAtu , 2 ]							//Primeira Marcacao do Dia Atual
				lFeriado	:= fFeriado(cFil,dDiaAtu)
				IF ( nTipoDia > 0 .and. IF( lFeriado , "F" , oAponta:aHoras[ nTipoDia , 5 ] ) $ oAponta:cInterNt )
					lPriMarc := .T.
				EndIF
				Exit
			EndIf
			nIndAtu++
		End While
		//Se não encontrou marcação e dia é DSR, verifica primeira marcação do dia posterior
		If lUltMarc .And. !lPriMarc .And. nTipoDia > 0 .And. oAponta:aHoras[ nTipoDia , 5 ] == "D" .And. oAponta:aHoras[ nTipoDia , 5 ] $ oAponta:cInterNt .And. oAponta:cTpJorn <> "02"
			//Procura a primeira marcação do primeiro dia trabalhado após o DSR
			If (nPos := aScan( oAponta:aMarClone , { |x| x[AMARC_DATAAPO] >= dDiaAnt + 1})) > 0
				dDiaAtu := oAponta:aMarClone[nPos,AMARC_DATA]
				nPriMarc:= oAponta:aMarClone[nPos,AMARC_HORA]
				oAponta:nHrInterJd += 24 //Soma 24 horas do DSR para verificação da inter-jornada
				lPriMarc := .T.
			EndIf
		EndIf
		//Calcula Hora Extra Inter Jornada
		IF ( ( lUltMarc ) .and. ( lPriMarc ) .and. ( oAponta:nHrInterJd > 0 ) )	//Parametro Configurador
			IF ( ( nHrsInter := DataHora2Val( dDiaAnt , nUltMarc , dDiaAtu , nPriMarc , "H" ) ) < oAponta:nHrInterJd )
				lGrava	:= .T.
				IF ( ( dDiaAnt == dDiaAtu ) .and. ( nPriMarc < nUltMarc ) )
					oAponta:nHeInterA := oAponta:nHrInterJd
				Else
					oAponta:nHeInterA := Abs( SubHoras( oAponta:nHrInterJd , nHrsInter ) )
				EndIF
				If lPriEntrNormal //apura o saldo total de horas que funcionario podera atrasar no dia seguinte,inter-jornada
					
					nFzXdias := DataHora2Val( dDiaAnt , nUltMarc , dIntDiaAtu , nIntPriEntradPadrao , "H" )//(03-02-17, 2,  03-02-17, 8, "H")
					
					If oAponta:nHrInterJd >= nFzXdias
						nSldParaAtraso :=   SubHoras(oAponta:nHrInterJd, nFzXdias)
					EndIf
					
					nCredInterJ := nSldParaAtraso
					
				EndIf
				
				//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
				IF ( oAponta:lFaixaHE )
					nHeInterAutFx:=	fHeAutoriz(	dDiaAnt		,;	//01 -> Data 1
												nUltMarc	,;	//02 -> Hora 1
												dDiaAtu 	,;	//03 -> Data 2
												nPriMarc	,;	//04 -> Hora 2
												NIL			,;	//05 -> <@>Horas Normais Apontadas
												NIL			,;	//06 -> <@>Horas Noturnas Apontadas
												.F.			,;	//07 -> Apontar Horas Noturnas
												dDiaAtu		,;	//08 -> Data Inicial Para a Hora Noturna
												NIL			 ;	//09 -> <@>Horas de Acrescimo Noturno
											)
					oAponta:nHeInterN :=  SubHoras( oAponta:nHeInterA , nHeInterAutFx )
					oAponta:nHeInterA := nHeInterAutFx
				Else
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Verifica se as Horas Extras sao Autorizadas           ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF ( aScan( oAponta:aHorasAnt, { |x| x[ 3 ] == "4S" } ) == 0 )
						IF ( aScan( oAponta:aHorasAnt, { |x| x[ 3 ] == "3S" } ) == 0 )
							IF ( aScan( oAponta:aHorasAnt, { |x| x[ 3 ] == "2S" } ) == 0 )
								lHeAutoriza := ( "1S" $ oAponta:cPagHext )
							Else
								lHeAutoriza := ( "2S" $ oAponta:cPagHext )
							Endif
						Else
							lHeAutoriza := ( "3S" $ oAponta:cPagHext )
						Endif
					Else
						lHeAutoriza := ( "4S" $ oAponta:cPagHext )
					EndIF
					IF !( lHeAutoriza )
						oAponta:nHeInterN := oAponta:nHeInterA
						oAponta:nHeInterA := 0
					EndIF
				EndIF
			Else
				If lPriEntrNormal //apura o saldo total de horas que funcionario podera atrasar no dia seguinte,inter-jornada
					nTamAtraso     := DataHora2Val( dDiaAtu , nPriMarc , dDiaAtu , nIntPriEntradPadrao , "H" )
					nTamNaoAbonado := (nHrsInter - oAponta:nHrInterJd)
					nCredInterJ    := SubHoras(nTamAtraso, nTamNaoAbonado)
				EndIf
			EndIF
		EndIF
	EndIF
EndIF

oAponta:nHrInterJd := nInterJorAnt

// Se for o primeiro dia do período grava no dia atual 
If oAponta:nCountOrd == 1
	oAponta:dDataGravar	:= oAponta:dData
EndIf

// Se nao Achou Centro de Custo Assume o do Cadastro
IF Empty( oAponta:cCustoGrv )
	oAponta:cCustoGrv := SRA->RA_CC
EndIF

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fHrsExDia	³ Autor ³Marinaldo de Jesus    ³ Data ³28/09/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Aponta e Gera Horas Extras de Acordo com o Dia				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fHrsExDia()

Local lUltMarc		:= .F.	//Encontrou a ultima marcacao do dia anterior
Local lPriMarc		:= .F.	//Encontrou a primeira marcacao do dia atual
Local lPrimeiro		:= .F.	//Se a Hora Extra Corresponde ao Primeiro Dia
Local lNextDay		:= .F.	//Flag sinalizando que Marcacao Passa de Um Dia a Outro
Local lAponFer		:= .F.	//Se Executa o Apontamento Quando Afastamento em Ferias
Local lTemSubArray	:= .F. //Se Tem o 7 elemento na aHoras para calcular HE pela data da marcacao

Local bExtras

Local cTpoExtra				//Tipo de Hora Extra para a Data
Local cTipoMarc				//Tipo da Marcacao para Hora Extra

Local dDiaAnt				//Data da Primeira Marcacao do Dia Anterior
Local dDiaAtu				//Data da Ultima   Marcacao do dia Anterior
Local dSvDiaAnt				//Salva a Data Data da Primeira Marcacao do Dia Anterior

Local nUltMarc				//Ultima Marcacao do Dia Anterior
Local nPriMarc				//Primeira Marcacao do Dia Atual
Local nExtraAnt		:= 0	//Quantidade de HE gerada na primeira marcacao (Somente quando HE eh calcula pela data de marcacao)
Local nIndAtu				//Indice Auxiliar para Retorno da Marcacao Anterior
Local nIndAnt				//Indice Auxiliar para Retorno da Marcacao Atual
Local nIndApo				//Indice para o Array oAponta:aApo
Local nPos					//Variavel Temporaria para aScan
Local nPosInt				//Variavel Temporaria para aScan
Local nPosInt3				//Variavel Temporaria para aScan
Local nX					//Variavel Temporaria para Loop For/Next
Local nXPlus1				//Variavel Temporaria para Loop For/Next
Local nXPlus2				//Variavel Temporaria para Loop For/Next
Local nLenaHoras			//Tamanho de aHoras
Local nUltSaida				//Indice Ultima Saida da Tabela

Local cTpHeIntNr 			//Tipo de H Extra Intervalo Normal
Local cTpHeIntNt 			//Tipo de H Extra Intervalo Noturna

//Nao Calcular Quando For Horario Movel Livre.
IF ( oAponta:lMovelFree )
	Return( NIL )
EndIF

bExtras := { |lintervalo| fExtras(;
									dDiaAnt			,;	//01 -> Data da 1a Marcacao
									nPriMarc 		,;	//02 -> Hora da 1a Marcacao
									dDiaAtu			,;	//03 -> Data da 2a Marcacao
									nUltMarc		,;  //04 -> Hora da 2a Marcacao
									"S"				,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
									nIndApo			,;	//06 -> Indice de aApo
									lPrimeiro		,;	//07 -> 1o Dia do Apontamento
									lIntervalo		,;	//08 -> Apuracao Corresponde a Intervalo
									NIL			 	,;  //09 -> Forca o Dia Como Trabalhado
									.F.				,;  //10 -> Calcula Adicionais Especiais (Prima Dominical, etc...)
									nExtraAnt		;   //11 -> Soma extra anteriormente calculada para para verificacao de tolerancia. (Somente quando calculo de HE for por data de marcacao)
							 	);
           }

oAponta:ZeraApo()

IF !Empty( oAponta:aHorasAnt )
	nLenaHoras  := Len( oAponta:aHorasAnt )
	nIndAtu 	:= ( nLenaHoras + 1 )
	nPos 	:= aScan( oAponta:aHorasAnt ,{ |x| x[3] == "1E" })
	cTipoDia:= oAponta:aHorasAnt[nPos,5]
	dData1E	:= oAponta:aHorasAnt[nPos,1]
    cTipoMarc:=oAponta:aHorasAnt[nPos,3]
	
	While ( ( --nIndAtu ) > 0 )
		IF (( oAponta:aHorasAnt[ nIndAtu , 3 ] == "M" ) .and. !( lUltMarc ))
			dDiaAtu				:= oAponta:aHorasAnt[ nIndAtu , 01 ]	//Data da Marcacao Anterior
			nUltMarc			:= oAponta:aHorasAnt[ nIndAtu , 02 ]	//Ultima Marcacao do Dia Anterior
			lUltMarc			:= .T.								//Achou a Ultima Marcacao do Dia Anterior
			oAponta:cCustoGrv	:= oAponta:aHorasAnt[ nIndAtu , 14 ]	//Retorna Centro de Custo Para a Gravacao do Apontamento
		EndIF
		IF (( oAponta:aHorasAnt[ nIndAtu , 3 ] != "M" ) .and. Empty( nIndApo ))
			nIndApo		:= oAponta:aHorasAnt[ nIndAtu , 11 ]			//Indice para oAponta:aApo
			cTipoMarc	:= oAponta:aHorasAnt[ nIndAtu , 03 ]			//Tipo de Marcacao para Hora Extra
			IF Empty( oAponta:cCustoGrv )
				oAponta:cCustoGrv := oAponta:aHorasAnt[ nIndAtu , 14 ]	//-- Retorna Centro de Custo Para a Gravacao do Apontamento
			EndIF
			If oAponta:lApoSaida
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA_APO] == dDiaAtu } ) ) > 0 )
					IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC ) )
						oAponta:cCustoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			Else
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA] == dDiaAtu } ) ) > 0 )
					IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC ) )
						oAponta:cCustoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			EndIf
		EndIF
		IF (!Empty( nIndApo ) .and. ( lUltMarc ))
			Exit
		EndIF
	EndDo
	
	nIndAnt := 0
	
	While ( ( ++nIndAnt ) <= nLenaHoras )
		IF ( oAponta:aHorasAnt[ nIndAnt , 03 ] == "M" )
			nPriMarc	:= 23.59               							//Limite de Marcacao do Dia Anterior
			lPriMarc	:= .T.                                          //Achous a 1a. Marcacao do Dia Anterior
		ElseIF ( oAponta:aHorasAnt[ nIndAnt , 10 ] == "EJ" )
			dDiaAnt		:= oAponta:aHorasAnt[ nIndAnt , 1 ]				//Data da Marcacao Atual
		EndIF
		IF (( lPriMarc ) .and. !Empty( dDiaAnt ))
			Exit
		EndIF
	EndDo
	
	IF (( lUltMarc ) .and. ( lPriMarc ))
		IF !( oAponta:lIntNtrab )
			IF ( ( nPos := aScan( oAponta:aHorasAnt , { |x| x[ 1 ] == dDiaAtu .and. x[10] == "SJ" } ) ) == 0 )
				 nPos := aScan( oAponta:aHorasAnt ,{ |x| x[ 1 ] == dDiaAnt .and. x[10] == "SJ" } )
	    	EndIF
	   		IF ( nPos > 0 )
	   			IF ( oAponta:aHorasAnt[ nPos , 17 ] > DataHora2Str( dDiaAnt , nPriMarc ) )
		       		dSvDiaAnt	:= dDiaAnt						//Salva data Anterior
		       		dDiaAnt		:= oAponta:aHorasAnt[ nPos , 1 ]	//Altera a Data Anterior
	        		nPriMarc	:= oAponta:aHorasAnt[ nPos , 2 ]	//Altera o Limite Anterior
	    		EndIF
	    	EndIF
	    	lNextDay := ( DataHora2Str( dDiaAnt , nPriMarc ) < DataHora2Str( dDiaAtu , nUltMarc ) )
	    Else
        	dSvDiaAnt		:= dDiaAnt	//Salva data Anterior
			aHoras			:= aClone(oAponta:aHorasAnt)
			nLenaHoras  := Len( oAponta:aHorasAnt )
			nUltSaida	:= IF( nLenaHoras %2 >= 1 , ( nLenaHoras - 1 ) , nLenaHoras )
			IF ( nPos := aScan( oAponta:aHorasAnt , { |x| !x[6] } ) ) > 0
			   	IF !Empty( oAponta:aHorasAnt[ nPos , 7 ] )
			    	IF ( Len(oAponta:aHorasAnt[nPos,7]) == 1  )
			    		dDiaAnt 	:= oAponta:aHorasAnt[ nPos , 07, 01, 01 ]
						nPriMarc	:= oAponta:aHorasAnt[ nPos , 07, 01, 02 ]
					EndIF
				Else
					dDiaAnt		:= oAponta:aHorasAnt[ nPos , 1 ]
					nPriMarc	:= oAponta:aHorasAnt[ nPos , 2 ]
				EndIF
			EndIF
			lNextDay := ( DataHora2Str( dData1E , 23.5959 ) < DataHora2Str( dDiaAtu , nUltMarc ) )
	    EndIF
		IF ( lNextDay )

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se as Horas Extras sao Autorizadas           ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			IF !( lHeAutoriza := ( cTipoMarc $ oAponta:cPagHext ) )
				IF ( ( nPos := aScan( oAponta:aHorasAnt , { |x| x[ 10 ] == "SJ" } ) ) > 0 )
					lHeAutoriza := ( oAponta:aHorasAnt[ nPos , 03 ] $ oAponta:cPagHext )
				EndIF
			EndIF
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Carrega o tipo de hora extra a ser apontada para o dia³
			³conforme tabela de horario padrao.					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			cTpoExtra := fTpoExtra( dDiaAtu , aClone( oAponta:aTabCalend ) )
			oAponta:dDataGravar :=  IF( lApHeDtM , IF( dDiaAtu <= oAponta:dUltDia , dDiaAtu , oAponta:dUltDia ) , oAponta:dData )
			If !oAponta:lApoSaida
				IF ( lJtHeDtm ) //Grava H.E. No Dia da 1a. Marcacao Se o Tipo do Dia Seguinte for igual
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Compara o Tipo de Horas Extras para Saber em que   dia³
					³devera Gravar as Horas Extras.    					   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					IF ( cTpoExtra == fTpoExtra( dDiaAnt , aClone( oAponta:aTabCalend ) ) )
						oAponta:dDataGravar := IF( !Empty( dSvDiaAnt ) , dSvDiaAnt , dDiaAnt )
						dSvDiaAnt	:= dDateEmpty
					Else
						cTipoMarc := "1E"
					EndIF
				Else
					cTipoMarc := "1E"
				EndIF
			EndIf
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Tipo de Hora Extra para Intervalo					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			cTpHeIntNr := GetTpExInt( SubStr( cTpoExtra , 3 , 1 ) , .F. )	//Normal
			cTpHeIntNt := GetTpExInt( SubStr( cTpoExtra , 1 , 1 ) , .T. ) 	//Noturna


		    /*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Verifica se Deve Gravar o Tipo da Marcacao			   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			cTipoMarc := IF( oAponta:lApTpMar , cTipoMarc , NIL )

			//Retorna a Posicao da Ultima Marcacao nao Apontada
			IF ( ( nPos := aScan( oAponta:aHorasAnt , { |x| x[ 3 ] == "M" .and. !x[6] } ) ) > 0 )			
				// Posiciona no horário da tabela
				If ( oAponta:lIntNtrab )
					If(nPos > 1, nPos--, nPos) 
				EndIf
				//Aponta Todas as Horas Extras para o Dia Seguinte
				For nX := nPos To nLenaHoras Step 2
				 	IF ( oAponta:lIntNtrab )
		               	nXPlus1 := Min( nX + 1 , nLenaHoras )
	                   	IF !Empty( oAponta:aHorasAnt[ nX , 7 ] ) .and. ValType(oAponta:aHorasAnt[ nX , 7, 1 ]) == "A"
				    		IF ( Len(oAponta:aHorasAnt[ nX , 7 ] ) == 1.00 )
				    			dDiaAnt 	:= oAponta:aHorasAnt[ nX , 07, 01, 01 ]

								If (oAponta:aHorasAnt[ nX , 07, 01, 02 ] == 23.5959)
									dDiaAnt 	:= dDiaAnt + 1
									nPriMarc	:= 0
								Else
									nPriMarc	:= oAponta:aHorasAnt[ nX , 07, 01, 02 ]
								Endif

								dDiaAtu		:= oAponta:aHorasAnt[ nX ,01 ]
								nUltMarc	:= oAponta:aHorasAnt[ nX ,02 ]
  								Eval(bExtras,oAponta:aHorasAnt[ nX , 07, 01,03 ])
							Else
								dDiaAnt 	:= oAponta:aHorasAnt[ nX , 07, 01, 01 ]

								If (oAponta:aHorasAnt[ nX , 07, 01, 02 ] == 23.5959)
									dDiaAnt 	:= dDiaAnt + 1
									nPriMarc	:= 0
								Else
									nPriMarc	:= oAponta:aHorasAnt[ nX , 07, 01, 02 ]
								Endif

								dDiaAtu		:= oAponta:aHorasAnt[ nX , 07, 02, 01 ]
								nUltMarc	:= oAponta:aHorasAnt[ nX , 07, 02, 02 ]
								Eval(bExtras, oAponta:aHorasAnt[ nX , 07, 03 ])
							EndIF
						Else
							IF ( nX == nXPlus1 )
						   		--nX
							EndIF
						EndIF
						/*/
				   		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Quando Pagar Horas Extras No Intervalo em Dias Nao Tra³
						³balhados e funcionario Tiver Efetuado a marcacao de In³
						³Tervalo                                               ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						nLenMarc 	:= Len( oAponta:aHorasAnt )
						nElem 		:= IF( nLenMarc %2 >= 1 , ( nLenMarc - 1 ) , nLenMarc )
						nXPlus2		:= Min(nX,nElem)
						IF SubStr( oAponta:aHorasAnt[ nXPlus2 ,08 ]  , -1 ) == "S" .and. nX < nUltSaida

							IF ( ("I" + SubStr( oAponta:aHorasAnt[ nXPlus2 ,08 ]  , 01 , 01 ) $ oAponta:cPagInt ) )

					  		  	//-- Procuro pela Saida nas Horas de Intervalo Realizadas
								nPosInt		:= aScan( oAponta:aHorasAnt , { |x| x[08] == oAponta:aHorasAnt[ nXPlus2 ,08 ]  } )
								nPosInt1	:= nPosInt+1
								nPosInt3	:= aScan(aHoras,{|x| x[3] == oAponta:aHorasAnt[nPosInt,8] .and. x[10] == "SI" } )

								//-- Nao calcula Extras para a Mesma Data+hora
								IF (;
										( nPosInt > 0 );
										.and.;
										( nPosInt3 > 0 );
										.and.;
										( nPosInt <> nPosInt1 );
									 )

									 //-- Obtem a Hora de Retorno do Intervalo conforme a Saida do Funcionario + as as Horas de Intervalo
								 	 aHrIntTab	:= RetFimTab( oAponta:aHorasAnt[nPos,1] , oAponta:aHorasAnt[nPosInt,2] , aHoras[nPosInt3,09] )
		 							 dDiaAnt 	:= oAponta:aHorasAnt[nPosInt,1]
									 nPriMarc	:= oAponta:aHorasAnt[nPosInt,2]
									 dDiaAtu	:= aHrIntTab[1]
									 nUltMarc	:= aHrIntTab[2]
									 IF ( DataHora2Str( aHrIntTab[1] , aHrIntTab[2] ) > DataHora2Str( oAponta:aHorasAnt[nPosInt1,1] , oAponta:aHorasAnt[nPosInt1,2] ) )
									    dDiaAtu		:= oAponta:aHorasAnt[nPosInt1,1]
					   				    nUltMarc	:= oAponta:aHorasAnt[nPosInt1,2]
									 EndIF
									 nIndApoAux	:=	nIndApo
									 Eval(bExtras,.T.)
									 nIndApo	:=	nIndApoAux
								EndIF
							EndIF
						Else
							dDiaAnt		:= oAponta:aHorasAnt[ nX ,01 ]
							nPriMarc	:= oAponta:aHorasAnt[ nX ,02 ]
							dDiaAtu		:= oAponta:aHorasAnt[ nXPlus1  ,01 ]
							nUltMarc	:= oAponta:aHorasAnt[ nXPlus1  ,02 ]
							If !("I" $ oAponta:aHorasAnt[nXPlus1, 10] .And. oAponta:lPAPgInTot)
								Eval(bExtras)
							EndIf
						EndIF
		            Else
						lTemSubArray := If( !Empty( oAponta:aHorasAnt[ nX , 7] ), ( Valtype(oAponta:aHorasAnt[ nX , 7, 1 ] ) == "D" ), .F. )
						nPos := aScan(oAponta:aHorasAnt, {|x| x[ 3 ] == "M" .And. !x[6]}, nX)
						nXPlus1 := (nX + 1)
						
						IF !lTemSubArray
							If nX == nLenaHoras
								nXPlus1	:= nX
								nX		:= nX-1
							EndIf

							dDiaAnt 	:= oAponta:aHorasAnt[ nX , 01 ]
							nPriMarc	:= oAponta:aHorasAnt[ nX , 02 ]
							dDiaAtu		:= oAponta:aHorasAnt[ Min( nXPlus1 , nLenaHoras ) , 01 ]
							nUltMarc	:= oAponta:aHorasAnt[ Min( nXPlus1 , nLenaHoras ) , 02 ]
	                    Else
							If nPos > 0
								dDiaAtu		:= oAponta:aHorasAnt[ nX , 01 ]
								nUltMarc	:= oAponta:aHorasAnt[ nX , 02 ]
								dDiaAnt 	:= oAponta:aHorasAnt[ nPos , 07, 01 ]
								nPriMarc	:= oAponta:aHorasAnt[ nPos , 07, 02 ]
								
								//Guarda a qtd de HE q ja foi apurada para correta utilizacao na comp
								nExtraAnt   := SubHoras(oAponta:aHorasAnt[ nPos , 02 ], nPriMarc)
							EndIf
						EndIF
						
						Eval(bExtras)
			  			//Zera variavel para evitar que seja utilizada indevidamente no proximo looping
			  			nExtraAnt := 0
					EndIF
				Next nX

			EndIF

			//-- Verifica se para funcionario em ferias as horas extras sao autorizadas
			IF ( (lAponFer :=  GetInfoPosTab(CALEND_POS_APON_FERIAS,"1E",oAponta:dDataGravar,oAponta:aTabCalend) ) )
			   lHeAutoriza:= ( GetInfoPosTab(CALEND_POS_HE_AUTO_FER,"1E",oAponta:dDataGravar,oAponta:aTabCalend) )
			Endif

			IF ( oAponta:cAdNot == "N" ) //Verifica se o Adicional Noturno e Autorizado
				oAponta:aApo[oaApo:AdicNotNau,nIndApo]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotNau,nIndApo],oAponta:aApo[oaApo:AdicNotAut,nIndApo] )
				oAponta:aApo[oaApo:AdicNotAut,nIndApo]	:= 0
			EndIF
			
			//Verifica se o Adicional Sobre Horas Extras e Autorizado
			If oAponta:cAdNotEx == "N" .Or. oAponta:lFaixaHE 
			    // Calcula e soma total de adic sob He not em adic sobre He not nao
				fSomaApoHE(	@oAponta:aApo[oaApo:AdicHeNotN,nIndApo]	,; //Valor Acumulado com HE nao autorizadas
					       	@oAponta:aApo[oaApo:AdicHeNotA,nIndApo]	,; //Valor Integral (Nao zera mas contera o valor autorizado)
					       	@oAponta:aApo[oaApo:AdicHeNotF,nIndApo]	 ; //Valor Autorizado (sera zerado)
					       )

			EndIF

			AvalAponta(lNextDay)
			
			// Adic.Not.Normal Autorizado
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotAut,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 004 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						oAponta:nTolNotu						,; 	//09 -> Tolerancia					
						"N"										,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/							,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/							,; //12 -> Funcao
		  				/*cDepto	*/							,; //13 -> Depto para gravacao
						/*cPosto	*/							,; //14 -> Posto para gravacao
						/*cProcesso	*/							,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/							,; //16 -> Processo para Gravacao
						/*cPerApo	*/							,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 							,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    	,; //19 -> Turno de Trabalho
						oAponta:cSeqTno							;  //20 -> Semana/Sequencia do Turno
					)

			// Adic.Not.H.Extra Autorizado
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotA,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 028 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						0           							,;	//09 -> Tolerancia
						"N"										,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/							,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/							,; //12 -> Funcao
		  				/*cDepto	*/							,; //13 -> Depto para gravacao
						/*cPosto	*/							,; //14 -> Posto para gravacao
						/*cProcesso	*/							,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/							,; //16 -> Processo para Gravacao
						/*cPerApo	*/							,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 							,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    	,; //19 -> Turno de Trabalho
						oAponta:cSeqTno							;  //20 -> Semana/Sequencia do Turno
					)

			// Adic.Not.Normal Nao Autorizado
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicNotNau,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 003 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						0           							,;	//09 -> Tolerancia
						"N"										,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/							,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/							,; //12 -> Funcao
		  				/*cDepto	*/							,; //13 -> Depto para gravacao
						/*cPosto	*/							,; //14 -> Posto para gravacao
						/*cProcesso	*/							,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/							,; //16 -> Processo para Gravacao
						/*cPerApo	*/							,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 							,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    	,; //19 -> Turno de Trabalho
						oAponta:cSeqTno							;  //20 -> Semana/Sequencia do Turno
					)

			//-- Gera Adicional Noturno Nao Autorizado para Horas Extras
			fGeraRes(	oAponta:aResult							,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar						,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:AdicHeNotN,nIndApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 027 , 02 ]					,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv						,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.										,;	//07 -> True para Acumular as Horas
						""             							,;	//08 -> Periodo de Apuracao
						0           							,;	//09 -> Tolerancia
						"N"										,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/							,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/							,; //12 -> Funcao
		  				/*cDepto	*/							,; //13 -> Depto para gravacao
						/*cPosto	*/							,; //14 -> Posto para gravacao
						/*cProcesso	*/							,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/							,; //16 -> Processo para Gravacao
						/*cPerApo	*/							,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 							,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend				    	,; //19 -> Turno de Trabalho
						oAponta:cSeqTno							;  //20 -> Semana/Sequencia do Turno
					)
           //-- Aloca os valores de HE conforme Autorizadas/Nao autorizadas
			IF ( oAponta:lFaixaHE )
				//-- Recalcula os valores de HE
		        // Normal
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNorNAut,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNormal,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNormalFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
				// Noturna
				fSomaApoHE(	@oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeNotAutor,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeNoturnFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
	   		    // Intervalo
	   			fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNorNa,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNorAu,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNorFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
				// Intervalo Noturno
				fSomaApoHE(	@oAponta:aApo[oaApo:HeIntNotNa,nIndApo]	,; // Valor acumulador
				           	@oAponta:aApo[oaApo:HeIntNotAu,nIndApo]	,; // Valor integral (que passara a ter o valor autorizado)
						   	@oAponta:aApo[oaApo:HeIntNotFx,nIndApo]	 ; // Valor autorizado (que sera zerado)
						   )
			EndIF

			//-- Verifica se Pagou Nona Hora na Data
			IF ( ( nPos := aScan( oAponta:aResult , { |x| x[ 1 ] == dData1E .and. x[ 2 ] == aEvesIds[ 025 , 02 ] } ) ) > 0 )
				IF ( ( nPos := aScan( oAponta:aNona , { |x| x[ 1 ] == dData1E .and. x[ 3 ] == 0 } ) ) > 0 )
					oAponta:nNonaHor		:= oAponta:aNona[ nPos , 2 ]
					oAponta:nNonaHorAut	:= oAponta:aNona[ nPos , 5 ]
					oAponta:aNona[ nPos , 3 ]++
					IF !( oAponta:lFaixaHE )
						//Subtrai a Nona Hora das Horas Extras Noturna ap¢s Expediente
						IF ( ( oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] > 0 ) .and. ( oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] >= oAponta:nNonaHor ) )
							oAponta:aApo[ oaApo:HeNotAutor , nIndApo ]	:= SubHoras( oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] , oAponta:nNonaHor )
							oAponta:nNonaHor							:= 0
						Else
							oAponta:nNonaHor							:= SubHoras( oAponta:nNonaHor , oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] )
							oAponta:aApo[ oaApo:HeNotAutor , nIndApo ]	:= 0
						EndIF
						//Subtrai a Nona Hora das Horas Extras ap¢s Expediente
						IF ( ( oAponta:aApo[ oaApo:HeNormal , nIndApo ] > 0 ) .and. ( oAponta:aApo[ oaApo:HeNormal , nIndApo ] >= oAponta:nNonaHor ) )
							oAponta:aApo[ oaApo:HeNormal , nIndApo ]	:= SubHoras( oAponta:aApo[ oaApo:HeNormal , nIndApo ] , oAponta:nNonaHor )
							oAponta:nNonaHor							:= 0
						Else
							oAponta:aApo[ oaApo:HeNormal , nIndApo ]	:= 0
						EndIF
					Else
						//Subtrai a Nona Hora das Horas Extras Noturna ap¢s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNotAutor,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotAutor,nIndApo] >= oAponta:nNonaHorAut ) )
							//-- Subtrai das Horas Noturnas a Nona Hora Autorizada (Pois so devo pagar a diferenca)
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	:= SubHoras( oAponta:aApo[oaApo:HeNotAutor,nIndApo] , oAponta:nNonaHorAut )
							//-- Subtrai da Nona Hora a Nona Hora Autorizada
							oAponta:nNonaHor	:= SubHoras( nNonaHor, oAponta:nNonaHorAut )
							oAponta:nNonaHorAut	:= 0
						Else
							oAponta:nNonaHorAut						:= SubHoras( oAponta:nNonaHorAut , oAponta:aApo[oaApo:HeNotAutor,nIndApo] )
							oAponta:nNonaHor   						:= SubHoras( oAponta:nNonaHor    , oAponta:aApo[oaApo:HeNotAutor,nIndApo] )
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	:= 0
						EndIF

						//Subtrai a Nona Hora das Horas Extras ap¢s Expediente
						IF ( ( oAponta:aApo[oaApo:HeNormal,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNormal,nIndApo] >= oAponta:nNonaHorAut ) )
							oAponta:aApo[oaApo:HeNormal,nIndApo] 	:= SubHoras( oAponta:aApo[oaApo:HeNormal,nIndApo] , oAponta:nNonaHorAut )
							oAponta:nNonaHor						:=  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut )
							oAponta:nNonaHorAut						:= 0
						Else
							oAponta:nNonaHorAut						:= SubHoras( oAponta:nNonaHorAut , oAponta:aApo[oaApo:HeNormal,nIndApo] )
							oAponta:nNonaHor  						:= SubHoras( oAponta:nNonaHor    , oAponta:aApo[oaApo:HeNormal,nIndApo] )
							oAponta:aApo[oaApo:HeNormal,nIndApo]	:= 0
						EndIF
					EndIF
               	EndIF
            EndIF


			IF ( !( lHeAutoriza )  .and. !( oAponta:lFaixaHE ) )
				oAponta:aApo[ oaApo:HeNorNAut	, nIndApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNorNAut , nIndApo ] , oAponta:aApo[ oaApo:HeNormal , nIndApo ]  )
				oAponta:aApo[ oaApo:HeNormal	, nIndApo ]	:= 0
				oAponta:aApo[ oaApo:HeNotNaoAu	, nIndApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNotNaoAu , nIndApo ] , oAponta:aApo[ oaApo:HeNotAutor , nIndApo ] )
				oAponta:aApo[ oaApo:HeNotAutor	, nIndApo ]	:= 0
			Else
				IF ( oAponta:lFaixaHE )
					//Subtrai a Nona Hora das Horas Extras Noturna ap¢s Expediente
					IF ( ( oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) ) )
						oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	:= SubHoras( oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] , SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
						oAponta:nNonaHor	:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
					Else
						oAponta:nNonaHor	:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNotNaoAu,nIndApo] )
						oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	:= 0
					EndIF
					//Subtrai a Nona Hora das Horas Extras ap¢s Expediente
					IF ( ( oAponta:aApo[oaApo:HeNorNAut,nIndApo] > 0 ) .and. ( oAponta:aApo[oaApo:HeNorNAut,nIndApo] >= SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) ) )
						oAponta:aApo[oaApo:HeNorNAut,nIndApo]	:= SubHoras( oAponta:aApo[oaApo:HeNorNAut,nIndApo] ,  SubHoras( oAponta:nNonaHor , oAponta:nNonaHorAut ) )
						oAponta:nNonaHor						:= oAponta:nNonaHorAut // Subtraindo do Total de Horas as horas Nao autorizadas sobra as autorizadas
					Else
						oAponta:nNonaHor						:= SubHoras( oAponta:nNonaHor , oAponta:aApo[oaApo:HeNorNAut,nIndApo] )
						oAponta:aApo[oaApo:HeNorNAut,nIndApo]	:= 0
					EndIF
				EndIF
			EndIF

			IF SubStr( cTpoExtra , 1 , 1 ) == SubStr( cTpoExtra , 3 , 1 )
				oAponta:aApo[oaApo:HeNormal,nIndApo]  	:= SomaHoras(oAponta:aApo[oaApo:HeNormal,nIndApo],oAponta:aApo[oaApo:HeNotAutor,nIndApo])
				oAponta:aApo[oaApo:HeNotAutor,nIndApo]	:= 0
				oAponta:aApo[oaApo:HeNorNAut,nIndApo] 	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nIndApo],oAponta:aApo[oaApo:HeNotNaoAu,nIndApo])
				oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	:= 0
			EndIF

			IF ( oAponta:aApo[oaApo:PriorityHe,nIndApo] == Priority_Nocturnal_Overtime ) //Verifica Prioridade
				//-- Gera horas extras noturnas
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 1 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.					 					,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )


				//-- Gera Horas Extras Noturnas Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNt								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNotAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNotNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"			   						,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )


				//-- Gera Horas Extras Normais
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 3 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNormal,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNorNAut,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )

				//-- Gera Horas Extras do Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNr								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNorAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNorNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							NIL										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )

			Else
				//-- Gera Horas Extras Normais
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 3 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNormal,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNorNAut,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        	   							,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )

					//-- Gera Horas Extras do Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNr								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNorAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNorNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							NIL										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )

				//-- Gera horas extras noturnas
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							SubStr( cTpoExtra , 1 , 1 )				,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeNotAutor,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeNotNaoAu,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"									,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.					 					,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv				 		,;	//11 -> Centro de Custo Para Gravacaoc
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )

				//-- Gera Horas Extras Noturnas Intervalo
				fGeraExtra(	oAponta:aTabExtra						,;	//01 -> Array contendo os Tipos de Horas Extras
							cTpHeIntNt								,;	//02 -> Tipo de Hora Extra a ser Gerado
							oAponta:aApo[oaApo:HeIntNotAu,nIndApo]	,;	//03 -> Numero de Horas Extras Autorizadas
							oAponta:aApo[oaApo:HeIntNotNa,nIndApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
							oAponta:aResult							,;	//05 -> Array com os Resultados do Apontamento do Dia
							NIL        								,;	//06 -> Array com os Totais Apontados por Evento do Dia
							oAponta:dDataGravar						,;	//07 -> Data da Gravacao
							"APO"			   						,;	//08 -> Rotina Chamadora da Funcao
							""										,;	//09 -> Periodo de Apuracao
							.T.										,;	//10 -> Soma ao Valor Existente
							oAponta:cCustoGrv						,;	//11 -> Centro de Custo Para Gravacao
							cTipoMarc								,;	//12 -> Tipo de Marcacao
							lMvAcmHExt								,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
								/*lSubstitui		 */				,;	//14 -> Se Substitui as Horas Existentes
								/*oAponta:cFuncaoGrv */				,;  //15 -> Funcao a ser Gravada
								/*oAponta:cDepto	 */				,;  //16 -> Depto para gravacao
								/*oAponta:cPosto	 */				,;  //17 -> Posto para gravacao
								/*oAponta:cProcesso	 */				,;  //18 -> Processo para Gravacao
								/*oAponta:cRoteiro	 */				,;  //19 -> Roteiro para Gravacao
								/*oAponta:cPeriodo	 */				,;  //20 -> Periodo para Gravacao
								/*oAponta:cNumPagto	 */				,;  //21 -> NumPagto para Gravacao
							oAponta:cTnoCalend		   		    	,;  //22 -> Turno de Trabalho
							oAponta:cSeqTno							;   //23 -> Semana/Sequencia do Turno
					      )
			EndIF
		EndIF
		//-- Retorna ao conteudo anterior
		If 	( oAponta:lIntNtrab )
			oAponta:aHorasAnt	:=aClone(aHoras)
		Endif
	EndIF
EndIF

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fHrsNona    ³ Autor ³Marinaldo de Jesus	   ³ Data ³28/09/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Aponta e Gera Nona Hora                             		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nNonaHor -> Quantidade de Nona Hora Calculada 	   		  	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fHrsNona()

Local lUltHTab	:= .F.	//Encontrou Ultima Marcacao da Tabela
Local lUltMarc	:= .F.	//Encontrou Ultima Marcacao Efetiva

Local nMaxNona	:= 1	//Numero Maximo de Horas correspondente a Nona-Hora
Local nUltHTab	:= 0	//Ultima Marcacao da Tabela
Local nUltMarc	:= 0	//Ultima Marcacao Efetiva

Local dDataTab			//Data da Marcacao Correspondente a Tabela
Local dDataMar			//Data da Efetiva Marcacao

Local cCusto			//Centro de Custo para Gravacao
Local cTipoMarc			//Tipo de Marcacao

Local lElemImp			//aHoras possui Elementos Impares

Local nIndMarc   		//Indice para pesquisa em aHoras
Local nPos  			//Variavel Temporario para Indice de Array
Local nTolHExt			//Numero de Horas Correspondente a Tolerancia de H.E. na Saida
Local nPosTole			//Posicionamento da Toleracia

//Verifica o Numero de Elementos do oAponta:aHoras
//Se oAponta:aHoras Contiver Elementos Impares, Decrementa
IF ( lElemImp := ( ( ( nIndMarc := Len( oAponta:aHoras ) ) % 2 ) > 0 ) )
	--nIndMarc
EndIF

IF ( nIndMarc > 0 )
	While ( nIndMarc > 0 )
		//Retorna Horario da Tabela
		IF (;
				( nUltHTab == 0 );
				.and.;
				( oAponta:aHoras[ nIndMarc , 3 ] != "M" );
				.and.;
				!Empty( oAponta:aHoras[ nIndMarc , 03 ] );
			)
			dDataTab	:=	oAponta:aHoras[ nIndMarc , 01 ]	//Data da Tabela
			nUltHTab	:=	oAponta:aHoras[ nIndMarc , 02 ]	//Ultimo Horario da Tabela
			cTipoMarc	:=	oAponta:aHoras[ nIndMarc , 03 ]	//Tipo de Marcacao
			lUltHTab	:=	.T.								//Achou Ultimo Horario Tabela
			IF Empty( cCusto )
				cCusto	:=	oAponta:aHoras[ nIndMarc , 14 ]	//Se nao Achou Centro de Custo na Marcacao
			EndIF
			If oAponta:lApoSaida
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA_APO] == dDataTab } ) ) > 0 )
					IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( cCusto == SRA->RA_CC ) )
						cCusto	:= oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			ELse
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == cTipoMarc .and. x[CALEND_POS_DATA] == dDataTab } ) ) > 0 )
					IF ( !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( cCusto == SRA->RA_CC ) )
						cCusto	:= oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			EndIf
		EndIF
		//Retorna ultima marcacao do dia anterior
		IF (;
				( nUltMarc == 0 );
				.and.;
				( oAponta:aHoras[ nIndMarc , 3 ] == "M" );
			)
			dDataMar	:=	oAponta:aHoras[ nIndMarc , 01 ]	//Data da Marcacao
			nUltMarc	:=	oAponta:aHoras[ nIndMarc , 02 ]	//Ultima Marcacao Efetuada
			cCusto		:=	oAponta:aHoras[ nIndMarc , 14 ]	//Centro de Custo Onde foi Efetuada a Nona Hora
			lUltMarc	:=	.T.								//Achou ultima Marcacao Efetiva
		EndIF
		//Sai do While Quando Encontrar Marcacao e Tabela
		IF (;
				( lUltHTab );
				.and.;
				( lUltMarc );
			)
			Exit
		EndIF
		--nIndMarc
	End While
	IF (;
			( lUltHTab );
			.and.;
			( lUltMarc );
		)
		//Se Marcacao for Maior que Horario da Tabela
		IF (;
				DataHora2Str( dDataTab , nUltHTab );
				<;
				DataHora2Str( dDataMar , nUltMarc );
			)
			//Apura a Quantidade de Horas correspondente a Nona Hora ( Considerando a Hora Reduzida )
			oAponta:nNonaHor := Min(;
							   			 fCalHoras(	dDataTab							,;	//01 -> Data 1
								 					nUltHTab							,;	//02 -> Hora 1
										 			dDataMar							,;	//03 -> Data 2
										 			nUltMarc							,;	//04 -> Hora 2
										 			NIL									,;	//05 -> <@>Horas Normais Apontadas
										 			NIL									,;	//06 -> <@>Horas Noturnas Apontadas
										 			.T.									,;	//07 -> Apontar Horas Noturnas
										 			oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
													NIL									,;	//09 -> <@>Horas de Acrescimo Noturno
													oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
													oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
													oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
													oAponta:lAcreNot					,;	//13 -> Apenas Acrescimo Noturno
													NIL		 	 						 ;	//14 -> Periodo da Hora Noturna
										 		  ),;
										 nMaxNona;
									)
			//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
			IF ( oAponta:lFaixaHE )
				oAponta:nNonaHorAut	:=Min( fHeAutoriz( 	dDataTab							,;	//01 -> Data 1
															nUltHTab						,;	//02 -> Hora 1
															dDataMar						,; 	//03 -> Data 2
															nUltMarc						,;	//04 -> Hora 2
															NIL								,;	//05 -> <@>Horas Normais Apontadas
															NIL								,;	//06 -> <@>Horas Noturnas Apontadas
															.T.								,;	//07 -> Apontar Horas Noturnas
															oAponta:dData					,;	//08 -> Data Inicial Para a Hora Noturna
															NIL								 ;	//09 -> <@>Horas de Acrescimo Noturno
													 	),;
												nMaxNona;
										 )
            EndIF

            IF ( ( nPosTole := aScan( oAponta:aSiglaMarc , { |x| x == cTipoMarc } ) ) > 0 )
	            //Submete a Nona Hora a Tolerƒncia de H.E. Saida
				nTolHExt := fTolerancia( oAponta:cTolHex , nPosTole , 2, oAponta:dData )
			EndIF
			//Gera a Nona Hora so" Qdo. Existir o Identificador
			oAponta:dDataGravar := oAponta:dData
			fGeraRes(	oAponta:aResult															,; //01 -> Array com os Resultados do Dia
					 	oAponta:dDataGravar														,; //02 -> Data da Geracao
					 	oAponta:nNonaHor														,; //03 -> Numero de Horas Resultantes
					 	aEvesIds[ 025 , 02 ]													,; //04 -> Codigo do Evento
						cCusto                   												,; //05 -> Centro de Custo a ser Gravado
						IF( oAponta:lApTpMar , cTipoMarc , NIL )								,; //06 -> Tipo de Marcacao
					 	IF( lApHeDtM , IF( dDataMar > oAponta:dDataGravar , .T. , .F. ) , .F. )	,; //07 -> True para Acumular as Horas
						oAponta:cPerHext														,; //08 -> Periodo de Apuracao
						nTolHExt							 									,; //09 -> Tolerancia
						"9"																		,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/		 													,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/							  								,; //12 -> Funcao
		  				/*cDepto	*/															,; //13 -> Depto para gravacao
						/*cPosto	*/															,; //14 -> Posto para gravacao
						/*cProcesso	*/															,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/															,; //16 -> Processo para Gravacao
						/*cPerApo	*/															,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 															,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend										    			,; //19 -> Turno de Trabalho
						oAponta:cSeqTno															;  //20 -> Semana/Sequencia do Turno
					)
			//Carrega o Array aNona
			IF ( aScan( oAponta:aNona , { |x| x[ 1 ] == oAponta:dDataGravar } ) == 0 )
				aAdd( oAponta:aNona , { oAponta:dDataGravar , oAponta:nNonaHor , 0 , cCusto , oAponta:nNonaHorAut } )
			EndIF
		EndIF
	EndIF
EndIF

Return( oAponta:nNonaHor )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fHeMovel	³ Autor ³Marinaldo de Jesus    ³ Data ³20/10/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Apura He para Horario Movel Livre							 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fHeMovel(	lHTrab	 		,;	//02 -> Considera Horas Trabahadas
						  	lFeriado		 ;	//03 -> Dia Corresponde a um Feriado
						 )

Local aPerNot		:= {}
Local aHorasNew		:= {}
Local aHorasAdic	:= {}
Local aOnlyMarkings	:= {}
Local aMarcIdeal	:= {}
Local aMarcTipoS	:= {"1S","2S","3S","4S"}

Local cTipoMarc		:= ""

Local lAponFer		:= .F.
Local lHeAutoriza	:= .F.
Local lGeroHeMv		:= .F.

Local nHorasCalc	:= 0
Local nHorasSalv 	:= 0
Local nHorasTrab	:= 0
Local nPosHrsTab	:= 0
Local nX			:= 0
Local nI			:= 0
Local nXPlus1		:= 0
Local nFornX		:= 0
Local nY			:= 0
Local nEx    	    := 0
Local nExNot    	:= 0
Local nExTot   	    := 0
Local nExAdnTot   	:= 0
Local nExTotAdnAut	:= 0
Local nExNotTot    	:= 0
Local nTolHExt  	:= 0

Local nExAdn		:= 0
Local nExAut       	:= 0
Local nExNotAut    	:= 0
Local nExAdnAut		:= 0
Local nExDiaAdn		:= 0
Local nExDiaAutAdn	:= 0
Local nIndiceaApo	:= Max( oAponta:nTotMarcTab , 1 )
Local cTpHeIntNr 	:= GetTpExInt( SubStr( oAponta:cCodHe , 3 , 1 ) , .F. )	//Normal
Local cTpHeIntNt 	:= GetTpExInt( SubStr( oAponta:cCodHe , 1 , 1 ) , .T. ) //Noturna
Local nPosHext		:= 2
Local nPosEJ		:= aScan(oAponta:aHoras, {|x| x[10] == "EJ"})
Local nPosSJ		:= aScan(oAponta:aHoras, {|x| x[10] == "SJ"})
Local nPosAcrHeN	:= aScan(aEvesIds, {|x| x[1] == "045A"})

//-- Para HE nao destaca Acrescimo quando existir identificador para tal e solicitado
//-- o destaque do acrescimo noturno.
Local lAcreNot		:= If( (oAponta:lIdAcreNot  .AND. oAponta:lAcreNot), .F., oAponta:lAcreNot )

// Considera Horas da Tabela Apenas Para Dias Trabalhados
DEFAULT	lHTrab		:= .F.
DEFAULT lFeriado	:= .F.

// Verifica o Total de Horas Que deveriam ser Trabahadas no Dia em Questao
IF ( ( nPosHrsTab := aScan( oAponta:aHoras, { |x| !Empty( x[ 04 ] ) } ) ) > 0 )
	IF !( lFeriado )
		If oAponta:lHnotTab
			aEval( oAponta:aHoras , { |x| nHorasTrab := SomaHoras( nHorasTrab , x[ 04 ] ) } , nPosHrsTab )
		Else
	    	aEval( oAponta:aHoras , { |x| nHorasTrab := SomaHoras( nHorasTrab , x[ 16 ] ) } , nPosHrsTab )
	 	EndIf
	EndIF
Else
	IF !( lHTrab )
		Return( NIL )
	EndIF
EndIF

// Carrega apenas as Marcacoes
nFornX := Len( oAponta:aHoras )
For nX := 1 To nFornX
	IF ( oAponta:aHoras[ nX , 3 ] == "M" )
		aAdd( aOnlyMarkings , aClone( oAponta:aHoras[ nX ] ) )
	EndIF
Next nX

// Verificar se o turno é totalmente noturno
// para calcular corretamente a hora de saída da jornada
If nPosEJ > 0 .And. nPosSJ > 0
	If oAponta:aHoras[nPosEJ,2] >= oAponta:nIniHnot .And. oAponta:aHoras[nPosSJ,2] <= oAponta:nFimHnot
		lPadrao := .F.
	Else
		lPadrao := .T.
	EndIf
EndIf

// Se as Marcacoes forem Impar, duplica a utima Marcacao
IF ( ( nX := Len( aOnlyMarkings ) ) % 2 != 0 )
	aAdd( aOnlyMarkings , aClone( aOnlyMarkings[ nX ] ) )
EndIF

//-- Ponto de entrada criado para CSU. Nao deve ser divulgado.
If lPonaPo9Block
	aHorasNew := ExecBlock( "PONAPO9", .F., .F., {aOnlyMarkings, nHorasTrab, @oAponta} )
ElseIf !oAponta:lAtestMed
	// Monta aHorasNew apenas com as Horas que serao Consideradas para H.E.
	nFornX := Len( aOnlyMarkings )
	For nX := 1 To nFornX  Step 2
		nXPlus1 := ( nX + 1 )
		IF ( nHorasCalc < nHorasTrab )
			IF ( nHorasCalc := __TimeSum(SomaHoras( nHorasCalc									,;
		 	  	  						 fCalHoras(	aOnlyMarkings[ nX		, 1 ]		,;	//01 -> Data da 1a Marcacao
										 			aOnlyMarkings[ nX		, 2 ]		,;	//02 -> 1a Marcacao
													aOnlyMarkings[ nXPlus1	, 1 ]		,;	//03 -> Data da 2a Marcacao
													aOnlyMarkings[ nXPlus1	, 2 ]		,;	//04 -> Segunda Marcacao
													0								    ,;	//05 -> Horas Normais
													0								    ,;	//06 -> Horas Noturnas
													.T.									,;	//07 -> Considera Hora Noturna
													oAponta:dPerNotIni					,;	//08 -> Data do Inicio do Horario Noturno
													NIL									,;	//09 -> <@>Horas de Acrescimo Noturno
													oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
													oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
													oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
													lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
													NIL		 					 		 ;	//14 -> Periodo da Hora Noturna
												   )							 		 ;
									     ),0)									 		 ;
			   ) <= nHorasTrab
				nHorasSalv := nHorasCalc
				IF ( nHorasCalc == nHorasTrab )
					Loop
				EndIF
			EndIF
		EndIF
		IF ( ( nHorasSalv > 0 ) .and. ( nHorasSalv  < nHorasTrab ) .and. ( nHorasCalc > nHorasTrab ) )
			IF Empty( aHorasNew )			
				aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]				  ,;	//Data da Marcacao
										 aOnlyMarkings[ nX , 2 ]   				  ,;	//Marcacao
										 SubHoras( nHorasTrab, nHorasSalv )	      ,;    //Horas Faltantes
										 0										  ,;	//Horas de Intervalo
										 .T.                                      ,;	//Considera Hora Noturna
										 oAponta:dPerNotIni						  ,;	//Data Para Inicio de Apuracao da Hora Noturna
									  	 oAponta:nIniHnot						  ,;	//Inicio do Horario Noturno
									 	 oAponta:nFimHnot						  ,;	//Final do Horario Noturno
									 	 oAponta:nMinHnot						  ,;	//Minutos do Horario Noturno
									 	 .F.									  ,;	//Se separa acrescimo noturno
									 	 NIL									  ,;	//Periodo da Hora Noturna
									 	 lPadrao								   ;	//Validacao padrao para verificar saida projetada
									   )

				// Validação da Sumula 437
				//Se estiver calculando intervalo, existir diferença entre as marcações e o campo PA_PGINTOT estiver ativo,
				//iguala a segunda marcação com o fim do intervalo para que a hora extra obtida no intervalo seja paga integralmente.
				If oAponta:lPAPgInTot
					fGeraSumul(@aHorasNew,@lGeroHeMv,aOnlyMarkings,nHorasCalc,nHorasTrab,aMarcIdeal,nX,nXPlus1)
				Else
					aAdd( aHorasNew , aClone( aOnlyMarkings[nX] ) )				
					aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]										//Altera Data da 1a Marcacao
					aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]										//Altera 1a Marcacao
					aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aMarcIdeal[ 01 ] , aMarcIdeal[ 02 ] )	//Altera a String de Data/Hora
					aHorasNew[ Len( aHorasNew ) , 27 ] := .F.													// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
					aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )										//Adiciona Proxima Marcacao
					aHorasNew[ Len( aHorasNew ) , 27 ] := .F.													// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
				EndIf										
			ElseIf lGeroHeMv .And. nHorasCalc > nHorasTrab 
				aAdd( aHorasNew , aClone( aOnlyMarkings[nXPlus1] ) )
				aHorasNew[ Len( aHorasNew ) , 02 ] := SubHoras(aOnlyMarkings[nXPlus1][2],SubHoras(nHorasCalc,nHorasTrab))					//Altera 1a Marcacao
				aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aHorasNew[ Len( aHorasNew ),01 ] , aHorasNew[ Len( aHorasNew ),02 ] )	//Altera a String de Data/Hora
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.																					// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
				aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )																		//Adiciona Proxima Marcacao
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.																					// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
			Else
				aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )				//Adiciona 1a Marcacao
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.							// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
				aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )				//Adiciona 2a Marcacao
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.							// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
			EndIF
		ElseIF ( nHorasCalc > nHorasTrab )
			IF Empty( aHorasNew )
				aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]		,;		//Data da Marcacao
										 aOnlyMarkings[ nX , 2 ]   		,;		//Marcacao
										 nHorasTrab						,;  	//Horas Faltantes
										 0								,;		//Horas de Intervalo
										 .T.							,;		//Considera Hora Noturna
										 oAponta:dPerNotIni				,;		//Data Para Inicio de Apuracao da Hora Noturna
										 oAponta:nIniHnot				,;		//Inicio do Horario Noturno
									 	 oAponta:nFimHnot				,;		//Final do Horario Noturno
									 	 oAponta:nMinHnot				 ;		//Minutos do Horario Noturno
									   )
				aAdd( aHorasNew , aClone( aOnlyMarkings[ nX     ] ) )										//Adiciona 1a Marcacao
				aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]										//Altera Data da 1a Marcacao
				aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]										//Altera 1a Marcacao
				aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aMarcIdeal[ 01 ] , aMarcIdeal[ 02 ] )	//Altera a String de Data/Hora
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.													// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
				aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )										//Adiciona 2a Marcacao
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.													// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
			Else
				aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )			//Adiciona 1a Marcacao
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.						// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
				aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )			//Adiciona 2a Marcacao
				aHorasNew[ Len( aHorasNew ) , 27 ] := .F.						// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
			EndIF
		ElseIF ( nHorasCalc == nHorasTrab )
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )				//Adiciona 1a Marcacao
			aHorasNew[ Len( aHorasNew ) , 27 ] := .F.							// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
			aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )				//Adiciona 2a Marcacao
			aHorasNew[ Len( aHorasNew ) , 27 ] := .F.							// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
			
			If oAponta:lPAPgInTot .And. nXPlus1 == nFornX .And. nHorasTrab == 0 .And. nHorasCalc == 0
				aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]		,;	//Data da Marcacao
								aOnlyMarkings[ nX , 2 ]					,;	//Marcacao
								SubHoras( nHorasTrab, nHorasSalv )		,;	//Horas Faltantes
								0										,;	//Horas de Intervalo
								.T.										,;	//Considera Hora Noturna
								oAponta:dPerNotIni						,;	//Data Para Inicio de Apuracao da Hora Noturna
								oAponta:nIniHnot						,;	//Inicio do Horario Noturno
								oAponta:nFimHnot						,;	//Final do Horario Noturno
								oAponta:nMinHnot						,;	//Minutos do Horario Noturno
								.F.										,;	//Se separa acrescimo noturno
								NIL										,;	//Periodo da Hora Noturna
								lPadrao									 ;	//Validacao padrao para verificar saida projetada
							)
				fGeraSumul(@aHorasNew,@lGeroHeMv,aOnlyMarkings,nHorasCalc,nHorasTrab,aMarcIdeal,nX,nXPlus1)
			EndIf
		EndIF
	Next nX
Else
	aHorasNew := aClone(oAponta:aHrTrab)
EndIf

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Preserva Horas Originais para calculo dos adicio- ³
³nais especiais.								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
aHorasAdic:=aClone(aHorasNew)

// Separa as Marcacoes Por Data
IF ( lApHeDtM )
	nFornX := Len( aHorasNew )
	For nX := 1 To nFornX Step 2
		nXPlus1 := ( nX + 1 )
		IF ( DataHora2Str(aHorasNew[nX,1],23.59) < aHorasNew[nXPlus1,17] )
			For nY := 1 To 2
				aAdd( aHorasNew , aClone( aHorasNew[ nX ] ) )
				aHorasNew[ Len( aHorasNew ) , 02 ] := 23.59
				aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aHorasNew[ Len( aHorasNew ) , 01 ] , 23.59 )
			Next nY
			oAponta:SortaHoras( NIL , @aHorasNew )
			Exit
		EndIF
	Next nX
EndIF

// Aponta e Grava Horas Extras e Adicionais
nFornX := Len( aHorasNew )
For nX := 1 To nFornX Step 2
	
	nXPlus1 := ( nX + 1 )
	
	//-- Zera a Matriz de Apontamento
	oAponta:ZeraApo()
	
	//-- Define qual a tolerância de hora extra a ser utilizada. 
	//-- Sempre será referente a ultima marcação cadastrada na tabela de horário padrão Ex: 1S, 2S e etc.
	If ( oAponta:cTipoDia == "S" )
		For nI:=1 To Len(aMarcTipoS)
			If aScan(oAPonta:aHoras, {|x| x[3] == aMarcTipoS[nI]}) > 0
				nTolHExt := fTolerancia( oAponta:cTolHex, nPosHext , 2,  oAponta:dData )
			EndIf
			nPosHext += 2
		Next
	EndIF
	
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verifica se as Horas Extras sao Autorizadas           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF ( aScan( oAponta:aHoras, { |x| x[ 3 ] == "2S" } ) == 0 )
		IF ( oAponta:cTipoDia == "S" )
			lHeAutoriza := ( "1S" $ oAponta:cPagHext )
		Else
			lHeAutoriza := ( oAponta:cTipoDia $ oAponta:cPgHeDnt )
		EndIf
		cTipoMarc := IF( oAponta:lApTpMar , "1S" , NIL )
	Else
		IF ( oAponta:cTipoDia == "S" )
			lHeAutoriza := ( "2S" $ oAponta:cPagHext )
		Else
			lHeAutoriza := ( oAponta:cTipoDia $ oAponta:cPgHeDnt )
		EndIf
		cTipoMarc := IF( oAponta:lApTpMar , "2S" , NIL )
	EndIF
	
	//-- Reinicializa Variaveis
	aPerNot	:= {}
	nEx		:= 0
	nExNot	:= 0
	nExAdn	:= 0
	
	//-- Calcula Horas
	fCalHoras(	aHorasNew[ nX		, 1 ]								,;	//01 -> Data 1
				aHorasNew[ nX		, 2 ]								,;	//02 -> Hora 1
				aHorasNew[ nXPlus1	, 1 ]								,;	//03 -> Data 2
				aHorasNew[ nXPlus1	, 2 ]								,;	//04 -> Hora 2
				@nEx													,;	//05 -> <@>Horas Normais Apontadas
				@nExNot													,;	//06 -> <@>Horas Noturnas Apontadas
				.T.														,;	//07 -> Apontar Horas Noturnas
				oAponta:dPerNotIni										,;	//08 -> Data Inicial Para a Hora Noturna
				@nExAdn													,;	//09 -> <@>Horas de Acrescimo Noturno
				oAponta:nIniHnot										,;	//10 -> Inicio do Horario Noturno
				oAponta:nFimHnot										,;	//11 -> Final do Horario Noturno
				oAponta:nMinHnot										,;	//12 -> Minutos do Horario Noturno
				Iif(oAponta:lSepAcrNot,oAponta:lSepAcrNot,lAcreNot)		,;	//13 -> Apenas Acrescimo Noturno
				@aPerNot					 							 ;	//14 -> Periodo da Hora Noturna
			 )
	
	//-- Reinicializa Variaveis
	nExDiaAdn	:= 0
   	//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
	If ( oAponta:lAdHeDia )  .and. 	( oAponta:cTipoDia == "S" )
		
		fAdnDiurno(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data 1
					aHorasNew[ nX		, 2 ]	,;	//02 -> Hora 1
					aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
					aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
			  		@nExDiaAdn			,;	//05 -> <@>Horas Normais Apontadas
					0					,;	//06 -> <@>Horas Noturnas Apontadas
			  		.T.					,;	//07 -> Apontar Horas Noturnas
					oAponta:dPerNotIni	,;	//08 -> Data Inicial Para a Hora Noturna
					0					,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
					oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
					lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
					aHorasNew			;   //14 -> aHoras modificado
		  		  )
	Endif

	//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
	nExAut		:= 0
	nExNotAut	:= 0
	nExAdnAut	:= 0
	nExDiaAutAdn:= 0
	IF ( oAponta:lFaixaHE )
		fHeAutoriz(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data 1
					aHorasNew[ nX		, 2 ]	,;	//02 -> Hora 1
					aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
					aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
					@nExAut						,;	//05 -> <@>Horas Normais Apontadas
					@nExNotAut					,;	//06 -> <@>Horas Noturnas Apontadas
					.T.							,;	//07 -> Apontar Horas Noturnas
					oAponta:dPerNotIni			,;	//08 -> Data Inicial Para a Hora Noturna
					@nExAdnAut					,;  //09 -> <@>Horas de Acrescimo Noturno
					oAponta:nMinHnot			,;	//10 -> Minutos do Horario Noturno
					lAcreNot					,;	//11 -> Se Destaca Acrescimo das Horas Noturnas
			  		@nExDiaAutAdn				;	//12 -> <@>Horas Normais Apontadas
	  			 )
	EndIF

	//--Verifica de Deve Pagar Extra Not. a 52.50 e Calcula sem Adic. Noturno
	IF ( !( oAponta:lExtNot ) )
		IF ( nExAdn == 0 )
			nExAdn	:= nExNot
		EndIF
		nEx		:= 0
		nExNot	:= 0
		fCalHoras(	aHorasNew[ nX 		, 1 ]	,;	//01 -> Data 1
					aHorasNew[ nX 		, 2 ]	,;	//02 -> Hora 1
					aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
					aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
					@nEx						,;	//05 -> <@>Horas Normais Apontadas
					@nExNot						,;	//06 -> <@>Horas Noturnas Apontadas
					.T.							,;	//07 -> Apontar Horas Noturnas
					oAponta:dPerNotIni			,;	//08 -> Data Inicial Para a Hora Noturna
					NIL							,;	//09 -> <@>Horas de Acrescimo Noturno
					oAponta:nIniHnot			,;	//10 -> Inicio do Horario Noturno
					oAponta:nFimHnot			,;	//11 -> Final do Horario Noturno
					60							,;	//12 -> Minutos do Horario Noturno ( Aqui For‡ado como 60 )
					NIL							,;	//13 -> Apenas Acrescimo Noturno
					NIL			 				 ;	//14 -> Periodo da Hora Noturna
				  )

		//-- Identifica a Qtde de Horas Extras Autorizadas conforme Faixas de He
	    nExAut		:= 0
	    nExNotAut	:= 0
		IF ( oAponta:lFaixaHE )
		   fHeAutoriz(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data 1
						aHorasNew[ nX		, 2 ]	,;	//02 -> Hora 1
						aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data 2
						aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Hora 2
						@nExAut						,;	//05 -> <@>Horas Normais Apontadas
						@nExNotAut					,;	//06 -> <@>Horas Noturnas Apontadas
						.T.							,;	//07 -> Apontar Horas Noturnas
						oAponta:dPerNotIni			,;	//08 -> Data Inicial Para a Hora Noturna
						NIL							,;  //09 -> <@>Horas de Acrescimo Noturno
						60							 ;	//10 -> Minutos do Horario Noturno ( Aqui For‡ado como 60 )
					 )
		EndIF

	Else
		IF ( nExAdn == 0 )
			nExAdn := nExNot
			//-- HE autorizadas conforme faixas
			nExAdnAut := nExNotAut
		EndIF
	EndIF
	
	IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
		nExAdnAut:= SomaHoras( nExAdnAut, nExDiaAutAdn )
		nExTotAdnAut:= SomaHoras( nExTotAdnAut, nExAdnAut )
	Endif
	
	//-- Verifico se a HE gerada é refente a sumula, se não for
	//-- e existir mais um apontamento a ser realizado, somo os
	//-- minutos realizados de HE para lançar apenas uma vez
	If !aHorasNew[nX][27]
		If aHorasNew[1][1] <> aHorasNew[nFornX][1] .And. lFeriado .And. lApHeDtM
			nExTot := nEx
			nExNotTot := nExNot
		Else
			nExTot := SomaHoras(nExTot,nEx)
			nExNotTot := SomaHoras(nExNotTot,nExNot)
			
			//-- Acrescenta o Adicional Noturno sobre horas extras diurnas realizadas em continuacao a jornada noturna
			nExAdn:= SomaHoras( nExAdn, nExDiaAdn )
			nExAdnTot := SomaHoras( nExAdnTot, nExAdn )
			
			nExAdn := nExAdnTot
			nExAdnAut := nExTotAdnAut
			
			If nXPlus1 <> nFornX
				Loop
			EndIf		
		EndIf
	EndIf
	
	//-- Hora Extra - Somar se For Maior que Tolerƒncia de Hora Extra
	IF SomaHoras(nEx , Iif(oAponta:lSepAcrNot,SomaHoras(nExNot,nExAdn),nExNot)) > nTolHExt
		If oAponta:lPAPgInTot .And. aHorasNew[nX][27]
			oAponta:aApo[oaApo:HeIntNorAu, nIndiceaApo] := SomaHoras(oAponta:aApo[oaApo:HeIntNorAu, nIndiceaApo], nEx)
			oAponta:aApo[oaApo:HeIntNotAu, nIndiceaApo] := SomaHoras(oAponta:aApo[oaApo:HeIntNotAu, nIndiceaApo], nExNot)
			If nExTot > 0 .Or. nExNotTot > 0
				oAponta:aApo[ oaApo:HeNormal	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNormal 	, nIndiceaApo ] , nExTot		)
				oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ] , nExNotTot	)
			EndIf
			IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
				oAponta:aApo[oaApo:HeIntNorFx, nIndiceaApo] := SomaHoras(oAponta:aApo[oaApo:HeIntNorFx, nIndiceaApo], nExAut)
				oAponta:aApo[oaApo:HeIntNotFx, nIndiceaApo] := SomaHoras(oAponta:aApo[oaApo:HeIntNotFx, nIndiceaApo], nExNotAut)
			EndIF
		Else
			oAponta:aApo[ oaApo:HeNormal	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNormal 	, nIndiceaApo ] , nExTot		)
			oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ] , nExNotTot	)
		EndIf
		IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
			oAponta:aApo[ oaApo:HeNormalFx  , nIndiceaApo]	:= SomaHoras( oAponta:aApo[ oaApo:HeNormalFx , nIndiceaApo ] , nExAut	)
			oAponta:aApo[ oaApo:HeNoturnFx	, nIndiceaApo]	:= SomaHoras( oAponta:aApo[ oaApo:HeNoturnFx	, nIndiceaApo ] , nExNotAut	)
		EndIF
		//-- Verifica a Prioridade Para a Geracao das Horas Extras
		oAponta:aApo[ oaApo:PriorityHe , nIndiceaApo ]	:= PriorityOverTime( aHorasNew[nX,1] , aHorasNew[nX,2] , aPerNot )
	EndIF
	
	//-- Adicional Noturno Sobre Horas Extras
	IF ((oAponta:cPerAnot # "D") .Or. (oAponta:cPerAnot == "D") .And. ((nExAdn > oAponta:nTolNtHe) .Or. (oAponta:lSepAcrNot .And. nExNotTot > oAponta:nTolNtHe)))
		If oAponta:lSepAcrNot
			oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo]	:= SomaHoras(oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo],nExNotTot)
			oAponta:aApo[oaApo:HrAcrNotHe,nIndiceaApo]	:= SomaHoras(oAponta:aApo[oaApo:HrAcrNotHe,nIndiceaApo],nExAdn)
			oAponta:aApo[oaApo:AcreAuto,nIndiceaApo]	:= SomaHoras(oAponta:aApo[oaApo:AcreAuto,nIndiceaApo],nExAdn)
		Else
			oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo]	:= SomaHoras(oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo],nExAdn)
		EndIf
		IF ( oAponta:lFaixaHE )//-- HE autorizadas conforme faixas
			
			oAponta:aApo[oaApo:AdicHeNotF,nIndiceaApo]	:= SomaHoras(oAponta:aApo[oaApo:AdicHeNotF,nIndiceaApo], nExAdnAut )
			
		EndIF
	EndIF
	
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Retorna Data Para a Gravacao das Horas Extras e  Carre³
	³ga o Tipo de Hora Extra a Ser Considerado para o   Dia³
	³Conforme Tabela de Horario Padrao.					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:dDataGravar := IF( lApHeDtM , IF( aHorasNew[ nXPlus1 , 1 ] <= oAponta:dUltDia , aHorasNew[ nXPlus1 , 1 ] , oAponta:dUltDia ) , oAponta:dData )
	cTpoExtra	:= fTpoExtra( oAponta:dDataGravar , aClone(oAponta:aTabCalend) )
	
	//-- Data Para a Gravacao das Horas Extras
	IF ( lJtHeDtM ) //Grava a Hora Extra na Data da 1a. Marcacao se Tipo for Equivalente
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Compara o Tipo de Horas Extras para Saber em que   dia³
		³devera Gravar as Horas Extras.    					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		IF ( cTpoExtra == fTpoExtra( oAponta:dData , aClone( oAponta:aTabCalend ) ) )
			oAponta:dDataGravar	:= oAponta:dData
		EndIF
	EndIF
	
	//-- Verifica se para funcionario em ferias as horas extras sao autorizadas
	IF ( (lAponFer :=  GetInfoPosTab(CALEND_POS_APON_FERIAS,"1E",oAponta:dDataGravar,oAponta:aTabCalend) ) )
		lHeAutoriza:= ( GetInfoPosTab(CALEND_POS_HE_AUTO_FER,"1E",oAponta:dDataGravar,oAponta:aTabCalend) )
	Endif
	
	IF ( oAponta:cAdNot == "N" )
		oAponta:aApo[ oaApo:AdicNotNau , nIndiceaApo ] := SomaHoras(oAponta:aApo[oaApo:AdicNotNau,nIndiceaApo],oAponta:aApo[oaApo:AdicNotAut,nIndiceaApo])
		oAponta:aApo[ oaApo:AdicNotAut , nIndiceaApo ] := 0
	EndIF
	
	If oAponta:cAdNotEx == "N" .Or. oAponta:lFaixaHE
		// Calcula e soma total de adic sob He not em adic sobre He not nao
		fSomaApoHE(	@oAponta:aApo[oaApo:AdicHeNotN,nIndiceaApo]	,; //Valor Acumulado com HE nao autorizadas
		           	@oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo]	,; //Valor Integral (Nao zera mas contera o valor autorizado)
		           	@oAponta:aApo[oaApo:AdicHeNotF,nIndiceaApo]	 ; //Valor Autorizado (sera zerado)
				)
		
	EndIF
	
	If oAponta:lSepAcrNot
		fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
					oAponta:dDataGravar								,;	//02 -> Data da Geracao
					oAponta:aApo[oaApo:AcreAuto,nIndiceaApo]		,;	//03 -> Numero de Horas Resultantes
					aEvesIds[ 037 , 02 ]							,;	//04 -> Codigo do Evento
					aHorasNew[nX ,14 ]								,;	//05 -> Centro de Custo a ser Gravado
					cTipoMarc										,;	//06 -> Tipo de Marcacao
					.T.												,;	//07 -> True para Acumular as Horas
					""             									,;	//08 -> Periodo de Apuracao
					0												,;	//09 -> Tolerancia
					"N"												,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					/*lSubstitui*/									,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
					/*cFuncao	*/									,; //12 -> Funcao
					/*cDepto	*/									,; //13 -> Depto para gravacao
					/*cPosto	*/									,; //14 -> Posto para gravacao
					/*cProcesso	*/									,; //15 -> Periodo para Gravacao
					/*cRoteiro	*/									,; //16 -> Processo para Gravacao
					/*cPerApo	*/									,; //17 -> Periodo para Gravacao
					/*cNumPagto	*/ 									,; //18 -> NumPagto para Gravacao
					oAponta:cTnoCalend							    ,; //19 -> Turno de Trabalho
					oAponta:cSeqTno									 ;  //20 -> Semana/Sequencia do Turno
		)
		If nPosAcrHeN > 0
			// Acresc.Noturno Sobre Hora Extra
			fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
						oAponta:dDataGravar							,;	//02 -> Data da Geracao
						oAponta:aApo[oaApo:HrAcrNotHe,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ nPosAcrHeN , 02 ]					,;	//04 -> Codigo do Evento
						aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
						cTipoMarc									,;	//06 -> Tipo de Marcacao
						.T.											,;	//07 -> True para Acumular as Horas
						""             								,;	//08 -> Periodo de Apuracao
						0											,;	//09 -> Tolerancia
						"N"											,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/								,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/								,; //12 -> Funcao
						/*cDepto	*/								,; //13 -> Depto para gravacao
						/*cPosto	*/								,; //14 -> Posto para gravacao
						/*cProcesso	*/								,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/								,; //16 -> Processo para Gravacao
						/*cPerApo	*/								,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 								,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend						    ,; //19 -> Turno de Trabalho
						oAponta:cSeqTno								 ;  //20 -> Semana/Sequencia do Turno
					)
		EndIf
	EndIf
	
	// Adic.Not.Normal Autorizado
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dDataGravar							,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicNotAut,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 004 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				oAponta:nTolNotu							,; 	//09 -> Tolerancia					
				"N"											,;	//10 -> Tipo de Arredondamento a Ser Utilizado
				/*lSubstitui*/								,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
				/*cFuncao	*/								,; //12 -> Funcao
				/*cDepto	*/								,; //13 -> Depto para gravacao
				/*cPosto	*/								,; //14 -> Posto para gravacao
				/*cProcesso	*/								,; //15 -> Periodo para Gravacao
				/*cRoteiro	*/								,; //16 -> Processo para Gravacao
				/*cPerApo	*/								,; //17 -> Periodo para Gravacao
				/*cNumPagto	*/ 								,; //18 -> NumPagto para Gravacao
				oAponta:cTnoCalend					    	,; //19 -> Turno de Trabalho
				oAponta:cSeqTno								;  //20 -> Semana/Sequencia do Turno
			)
	
	// Adic.Not.H.Extra Autorizado
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dDataGravar							,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicHeNotA,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 028 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				0           								,;	//09 -> Tolerancia
				"N"											,;	//10 -> Tipo de Arredondamento a Ser Utilizado
				/*lSubstitui*/								,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
				/*cFuncao	*/								,; //12 -> Funcao
				/*cDepto	*/								,; //13 -> Depto para gravacao
				/*cPosto	*/								,; //14 -> Posto para gravacao
				/*cProcesso	*/								,; //15 -> Periodo para Gravacao
				/*cRoteiro	*/								,; //16 -> Processo para Gravacao
				/*cPerApo	*/								,; //17 -> Periodo para Gravacao
				/*cNumPagto	*/ 								,; //18 -> NumPagto para Gravacao
				oAponta:cTnoCalend					    	,; //19 -> Turno de Trabalho
				oAponta:cSeqTno								;  //20 -> Semana/Sequencia do Turno
			)
	
	// Adic.Not.Normal Nao Autorizado
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dData								,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicNotNau,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 003 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				0           								,;	//09 -> Tolerancia
				"N"											,;	//10 -> Tipo de Arredondamento a Ser Utilizado
				/*lSubstitui*/								,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
				/*cFuncao	*/								,; //12 -> Funcao
				/*cDepto	*/								,; //13 -> Depto para gravacao
				/*cPosto	*/								,; //14 -> Posto para gravacao
				/*cProcesso	*/								,; //15 -> Periodo para Gravacao
				/*cRoteiro	*/								,; //16 -> Processo para Gravacao
				/*cPerApo	*/								,; //17 -> Periodo para Gravacao
				/*cNumPagto	*/ 								,; //18 -> NumPagto para Gravacao
				oAponta:cTnoCalend					    	,; //19 -> Turno de Trabalho
				oAponta:cSeqTno								;  //20 -> Semana/Sequencia do Turno
			)

	//-- Gera Adicional Noturno Nao Autorizado para Horas Extras
	fGeraRes(	oAponta:aResult								,;	//01 -> Array com os Resultados do Dia
				oAponta:dData								,;	//02 -> Data da Geracao
				oAponta:aApo[oaApo:AdicHeNotN,nIndiceaApo]	,;	//03 -> Numero de Horas Resultantes
				aEvesIds[ 027 , 02 ]						,;	//04 -> Codigo do Evento
				aHorasNew[nX ,14 ]							,;	//05 -> Centro de Custo a ser Gravado
				cTipoMarc									,;	//06 -> Tipo de Marcacao
				.T.											,;	//07 -> True para Acumular as Horas
				""             								,;	//08 -> Periodo de Apuracao
				0           								,;	//09 -> Tolerancia
				"N"											,;	//10 -> Tipo de Arredondamento a Ser Utilizado
				/*lSubstitui*/								,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
				/*cFuncao	*/								,; //12 -> Funcao
  				/*cDepto	*/								,; //13 -> Depto para gravacao
				/*cPosto	*/								,; //14 -> Posto para gravacao
				/*cProcesso	*/								,; //15 -> Periodo para Gravacao
				/*cRoteiro	*/								,; //16 -> Processo para Gravacao
				/*cPerApo	*/								,; //17 -> Periodo para Gravacao
				/*cNumPagto	*/ 								,; //18 -> NumPagto para Gravacao
				oAponta:cTnoCalend					    	,; //19 -> Turno de Trabalho
				oAponta:cSeqTno								;  //20 -> Semana/Sequencia do Turno
			)
	IF ( oAponta:lFaixaHE )
		//-- Recalcula os valores de HE
        // Normal
		fSomaApoHE(	@oAponta:aApo[ oaApo:HeNorNAut	,	nIndiceaApo ]	,; // Valor acumulador
		           	@oAponta:aApo[ oaApo:HeNormal	,	nIndiceaApo ]	,; // Valor integral (que passara a ter o valor autorizado)
				   	@oAponta:aApo[ oaApo:HeNormalFx	,	nIndiceaApo ]	 ; // Valor autorizado (que sera zerado)
				   )
		// Noturna
		fSomaApoHE(	@oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	,; // Valor acumulador
		           	@oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	,; // Valor integral (que passara a ter o valor autorizado)
				   	@oAponta:aApo[oaApo:HeNoturnFx,nIndiceaApo]	 ; // Valor autorizado (que sera zerado)
				   )
	EndIF

	//Verifica se Hora Extra e" ou nao autorizada
	IF ( !( lHeAutoriza ).and. !( oAponta:lFaixaHE ) )
		oAponta:aApo[ oaApo:HeNorNAut	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNorNAut , nIndiceaApo ] , oAponta:aApo[ oaApo:HeNormal , nIndiceaApo ] )
		oAponta:aApo[ oaApo:HeNormal	, nIndiceaApo ]	:= 0
		oAponta:aApo[ oaApo:HeNotNaoAu	, nIndiceaApo ]	:= SomaHoras( oAponta:aApo[ oaApo:HeNotNaoAu , nIndiceaApo ] ,oAponta:aApo[ oaApo:HeNotAutor , nIndiceaApo ] )
		oAponta:aApo[ oaApo:HeNotAutor	, nIndiceaApo ]	:= 0
	EndIF

	IF SubStr( cTpoExtra , 1 , 1 ) == SubStr( cTpoExtra , 3 , 1 )
		oAponta:aApo[oaApo:HeNormal,nIndiceaApo]  	:= SomaHoras(oAponta:aApo[oaApo:HeNormal,nIndiceaApo],oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo])
		oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	:= 0
		oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo] 	:= SomaHoras(oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo],oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo])
		oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	:= 0
	EndIF

	IF ( oAponta:aApo[oaApo:PriorityHe,nIndiceaApo] == Priority_Nocturnal_Overtime ) //Verifica Prioridade
		//-- Gera horas extras noturnas
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 1 , 1 )					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL         								,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.					 						,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend			   		    	,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno				   				;   //23 -> Semana/Sequencia do Turno
			      )
		//-- Gera Horas Extras Normais
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 3 , 1)					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNormal,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend		   		    		,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno								;   //23 -> Semana/Sequencia do Turno
		      	)					
      	 //-- Gera Horas Extras do Intervalo
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					cTpHeIntNr									,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeIntNorAu,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeIntNorNa,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					NIL											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend				   		    ,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno								;   //23 -> Semana/Sequencia do Turno
		           )					
      	 //-- Gera Horas Extras do Intervalo Noturno
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					cTpHeIntNt									,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeIntNorAu,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeIntNotNa,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					NIL											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend				   		    ,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno								;   //23 -> Semana/Sequencia do Turno
		           )
	Else
		//-- Gera Horas Extras Normais
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 3 , 1)					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNormal,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNorNAut,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult						   		,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend		   		    		,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno								;   //23 -> Semana/Sequencia do Turno
		      	  )
		//-- Gera horas extras noturnas
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					SubStr( cTpoExtra , 1 , 1 )					,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeNotAutor,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeNotNaoAu,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					""											,;	//09 -> Periodo de Apuracao
					.T.					 						,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14 ]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend		   		    		,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno								;   //23 -> Semana/Sequencia do Turno
		      	 )					
      	 //-- Gera Horas Extras do Intervalo
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					cTpHeIntNr									,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeIntNorAu,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeIntNorNa,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					NIL											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend				   		    ,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno								;   //23 -> Semana/Sequencia do Turno
		           )					
      	 //-- Gera Horas Extras do Intervalo Noturno
		fGeraExtra(	oAponta:aTabExtra							,;	//01 -> Array contendo os Tipos de Horas Extras
					cTpHeIntNt									,;	//02 -> Tipo de Hora Extra a ser Gerado
					oAponta:aApo[oaApo:HeIntNotAu,nIndiceaApo]	,;	//03 -> Numero de Horas Extras Autorizadas
					oAponta:aApo[oaApo:HeIntNotNa,nIndiceaApo]	,;	//04 -> Numero de Horas Extras Nao Autorizadas
					oAponta:aResult								,;	//05 -> Array com os Resultados do Apontamento do Dia
					NIL        									,;	//06 -> Array com os Totais Apontados por Evento do Dia
					oAponta:dDataGravar							,;	//07 -> Data da Gravacao
					"APO"										,;	//08 -> Rotina Chamadora da Funcao
					NIL											,;	//09 -> Periodo de Apuracao
					.T.											,;	//10 -> Soma ao Valor Existente
					aHorasNew[nX ,14]							,;	//11 -> Centro de Custo Para Gravacao
					cTipoMarc									,;	//12 -> Tipo de Marcacao
					lMvAcmHExt									,;	//13 -> Considerar Todas as Horas Extras do Dia Para o Escalonamento
					/*lSubstitui		 */						,;	//14 -> Se Substitui as Horas Existentes
					/*oAponta:cFuncaoGrv */						,;  //15 -> Funcao a ser Gravada
					/*oAponta:cDepto	 */						,;  //16 -> Depto para gravacao
					/*oAponta:cPosto	 */						,;  //17 -> Posto para gravacao
					/*oAponta:cProcesso	 */						,;  //18 -> Processo para Gravacao
					/*oAponta:cRoteiro	 */						,;  //19 -> Roteiro para Gravacao
					/*oAponta:cPeriodo	 */						,;  //20 -> Periodo para Gravacao
					/*oAponta:cNumPagto	 */						,;  //21 -> NumPagto para Gravacao
					oAponta:cTnoCalend				   		    ,;  //22 -> Turno de Trabalho
					oAponta:cSeqTno								;   //23 -> Semana/Sequencia do Turno
		           )
	EndIF

Next nX

//-- Zera a Matriz de Apontamento
oAponta:ZeraApo()


/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Calcula Adicionais Especiais					   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
//-- Se for domingo e se a regra determina o calculo da Prima Dominical
//-- ou se calcula o Descanso Laborado ou Festivo Laborado
//-- Transfere as horas efetivamente trabalhadas para o calculo dos adicionais.
IF oAponta:lPrimDom .OR. oAponta:lDescLab .OR. oAponta:lFestLab

	// Aponta e Grava Horas Extras e Adicionais
	nFornX := Len( aHorasAdic )
	For nX := 1 To nFornX Step 2

		nXPlus1 := ( nX + 1 )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Calcula Prima Dominical, Descanso Laborado,	   ³
		³Festivo Laborado.								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

		fAdicionais(	aHorasAdic[nX		,	1] 		,;	//01 -> Data 1
		  				aHorasAdic[nX		,	2]		,;	//02 -> Hora 1
						aHorasAdic[nXPlus1	,	1]		,;	//03 -> Data 2
						aHorasAdic[nXPlus1	,	2]		,;	//04 -> Hora 2
						Nil								,;	//05 -> <@>Horas Normais Apontadas
						Nil								,;	//06 -> <@>Horas Noturnas Apontadas
						Nil								,;	//07 -> Apontar Horas Noturnas
						oAponta:dPerNotIni				,;	//08 -> Data Inicial Para a Hora Noturna
						Nil								,;	//09 -> <@>Horas de Acrescimo Noturno
						oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
						oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
						oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
						oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
						nIndiceaApo						,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
						oAponta:lPrimDom				,;  //15 -> Determina o calculo da Prima Dominical
			  			oAponta:lDescLab				,;  //16 -> Determina o calculo da Descanso Laborado
			  			oAponta:lFestLab				;   //17 -> Determina o calculo da Festivo Laborado
				   )


	Next nFonX
EndIF

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fAdnMovel   ³ Autor ³Marinaldo de Jesus    ³ Data ³24/10/2000³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula Adicional Noturno para Horario Movel	             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nHrNoturna  ( Horas Normais Noturnas )                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Apontamento                                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fAdnMovel()	//01 -> Array com as Marcacoes x Tabela

Local aHorasNew		:= {}
Local aOnlyMarkings	:= {}
Local aMarcIdeal	:= {}

Local nHorasSalv 	:= 0
Local nHrNoturna	:= 0
Local nHrAcresc		:= 0
Local nHorasCalc	:= 0

Local nHorasTrab	:= 0
Local nPosHrsTab	:= 0
Local nHrNotCalc	:= 0
Local nHrAcreCalc	:= 0
Local nX			:= 0
Local nXPlus1		:= 0
Local nFornX		:= 0
Local cDrHrMarc		:= ""
Local cDrHrIdeal	:= ""
Local lPadrao		:= ""
Local nPosEJ		:= aScan(oAponta:aHoras, {|x| x[10] == "EJ"})
Local nPosSJ		:= aScan(oAponta:aHoras, {|x| x[10] == "SJ"})

// Verifica o Total de Horas Que deveriam ser Trabahadas no Dia em Questao
IF ( ( nPosHrsTab := aScan( oAponta:aHoras, { |x| !Empty( x[ 04 ] ) } ) ) > 0 )
    nHorasTrab	:= If (oAponta:lHnotTab , oAponta:aHoras[ nPosHrsTab , 4 ] , oAponta:aHoras[ nPosHrsTab , 16 ] )
Else
	Return( {0,0} )
EndIF

// Carrega Apenas as Marcacoes
nFornX := Len( oAponta:aHoras )
For nX := 1 To nFornX
	IF oAponta:aHoras[ nX , 3 ] == "M"
		aAdd( aOnlyMarkings , aClone( oAponta:aHoras[ nX ] ) )
	EndIF
Next nX

// Se as Marcacoes forem Impar, duplica a utima Marcacao
IF ( nX := Len( aOnlyMarkings ) ) % 2 != 0
	aAdd( aOnlyMarkings , aClone( aOnlyMarkings[ nX ] ) )
EndIF

// Verificar se o turno é totalmente noturno
// para calcular corretamente a hora de saída da jornada
If nPosEJ > 0 .And. nPosSJ > 0
	If oAponta:aHoras[nPosEJ,2] >= oAponta:nIniHnot .And. oAponta:aHoras[nPosSJ,2] <= oAponta:nFimHnot
		lPadrao := .F.
	Else
		lPadrao := .T.
	EndIf
EndIf

// Monta aHorasNew apenas com as Horas que serao Consideradas para Adicional Noturno
nFornX := Len( aOnlyMarkings )
For nX := 1 To nFornX Step 2
	nXPlus1 := ( nX + 1 )
	IF ( nHorasCalc := __TimeSum(SomaHoras( nHorasCalc								,;
 	  	  						 fCalHoras(	aOnlyMarkings[ nX		, 1 ]	,;	//01 -> Data da 1a Marcacao
								 			aOnlyMarkings[ nX		, 2 ]	,;	//02 -> 1a Marcacao
											aOnlyMarkings[ nXPlus1	, 1 ]	,;	//03 -> Data da 2a Marcacao
											aOnlyMarkings[ nXPlus1	, 2 ]	,;	//04 -> Segunda Marcacao
											0								,;	//05 -> Horas Normais
											0								,;	//06 -> Horas Noturnas
											.T.								,;	//07 -> Considera Hora Noturna
											oAponta:dPerNotIni				,;	//08 -> Data do Inicio do Adicional Noturno
											NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
											oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
											oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
											oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
											oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
											NIL		 						 ;	//14 -> Periodo da Hora Noturna
										   )								 ;
							     ),0)										 ;
	   ) <= nHorasTrab
   		aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )					//Adiciona 1a Marcacao
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )					//Adiciona Proxima Marcacao
		nHorasSalv := nHorasCalc
	ElseIF ( ( nHorasSalv > 0 ) .and. ( nHorasSalv < nHorasCalc ) )
		aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]				,;		//Data da Marcacao
								 aOnlyMarkings[ nX , 2 ]   				,;		//Marcacao
								 SubHoras( nHorasTrab, nHorasSalv)		,;		//Horas Faltantes
								 0										,;		//Horas de Intervalo
								 .T.									,;		//Considera Hora Noturna
								 oAponta:dPerNotIni						,;		//Data do Inicio do Adicional Noturno
 								 oAponta:nIniHnot						,;		//Inicio do Horario Noturno
								 oAponta:nFimHnot						,;		//Final do Horario Noturno
								 oAponta:nMinHnot						,;		//Minutos do Horario Noturno
								 NIL									,;      //Apenas Acrescimo Noturno
								 NIL									,;      //Periodo da Hora Noturna
								 lPadrao								 ;     	//Validacao padrao para verificar saida projetada
							   )
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )					//Adiciona 1a Marcacao
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )					//Adiciona Proxima Marcacao
		
		cDrHrMarc  := DataHora2Str(aOnlyMarkings[nXPlus1,1],aOnlyMarkings[nXPlus1,2])
		cDrHrIdeal := DataHora2Str(aMarcIdeal[1],aMarcIdeal[2])

		If lGeraSuml
			If cDrHrIdeal > cDrHrMarc
				aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]				//Altera Data da 2a Marcacao
				aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]				//Altera 2a Marcacao
			EndIf
		Else
			aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]					//Altera Data da 2a Marcacao
			aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]					//Altera 2a Marcacao
		EndIf
		Exit
	Else
		aMarcIdeal := RetFimTab( aOnlyMarkings[ nX , 1 ]			,;		//Data da Marcacao
								 aOnlyMarkings[ nX , 2 ]			,;		//Marcacao
								 nHorasTrab                        	,;		//Horas Faltantes
								 0									,;		//Horas de Intervalo
								 .T.								,;		//Considera Hora Noturna
								 oAponta:dPerNotIni					,;		//Data do Inicio do Adicional Noturno
								 oAponta:nIniHnot					,;		//Inicio do Horario Noturno
								 oAponta:nFimHnot					,;		//Final do Horario Noturno
								 oAponta:nMinHnot					 ;		//Minutos do Horario Noturno
							   )
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nX      ] ) )				//Adiciona 1a Marcacao
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nXPlus1 ] ) )				//Adiciona Proxima Marcacao
		aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]				//Altera Data da 2a Marcacao
		aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]				//Altera 2a Marcacao
		Exit
	EndIF

Next nX

// Calcula o Adicional Noturno
nFornX := Len( aHorasNew )
For nX := 1 To nFornX  Step 2
	nXPlus1 := ( nX + 1 )
	fCalHoras(	aHorasNew[ nX		, 1 ]	,;	//01 -> Data da 1a Marcacao
	 			aHorasNew[ nX		, 2 ]	,;	//02 -> 1a Marcacao
				aHorasNew[ nXPlus1	, 1 ]	,;	//03 -> Data da 2a Marcacao
				aHorasNew[ nXPlus1	, 2 ]	,;	//04 -> Segunda Marcacao
				0							,;	//05 -> Horas Normais
				@nHrNotCalc					,;	//06 -> Horas Noturnas
				.T.							,;	//07 -> Considera Hora Noturna
				oAponta:dPerNotIni			,;	//08 -> Data do Inicio do Adicional Noturno
				@nHrAcreCalc				,;	//09 -> <@>Horas de Acrescimo Noturno
				oAponta:nIniHnot			,;	//10 -> Inicio do Horario Noturno
				oAponta:nFimHnot			,;	//11 -> Final do Horario Noturno
				oAponta:nMinHnot			,;	//12 -> Minutos do Horario Noturno
				oAponta:lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
				NIL		 					 ;	//14 -> Periodo da Hora Noturna
			   )

	nHrNoturna := SomaHoras( nHrNoturna , nHrNotCalc )	//Soma as Horas Noturnas
	nHrNotCalc := 0										//Reinicializa Variavel

	nHrAcresc  := SomaHoras( nHrAcresc , nHrAcreCalc )	//Soma as Horas de Acrescimo Noturno
    nHrAcreCalc:= 0

Next nX

Return( { nHrNoturna, nHrAcresc } )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fExtrasNtrab³ Autor ³Mauricio MR           ³ Data ³03/10/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula Horas Extras inclusive Intervalo, para dias nao traba³
³          ³lhados desde que se tenha horario de intervalo na tabela e   ³
³          ³paga-se intervalo em dias nao trabalhados.					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >								 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL        								               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fExtrasNtrab()

Local aHrTrab 	:= 	{} //Aqui aHrTrab tem a Mesma Estrutura de aHoras
Local aHrIntTab :=	{}

Local nLenHoras
Local nElem
Local nP
Local nPlus1
Local nPos
Local nPos1
Local nIndice

aEval(oAponta:aHoras,{ |y| IF( ( y[3] == "M" ), aAdd( aHrTrab, aClone( y ) ) , NIL ) } )
nLenHoras 	:= Len( aHrTrab )
nElem 		:= IF( nLenHoras % 2 >= 1, ( nLenHoras - 1 ), nLenHoras )

For nP := 1 To nElem Step 2
	//-- Indice para a matriz de apontamento aApo.
	nIndice := Min( nP , oAponta:nTotMarcTab )

	nP += fExtras(	aHrTrab[nP,1]					,;	//01 -> Data da 1a Marcacao
		  			aHrTrab[nP,2]					,;	//02 -> Hora da 1a Marcacao
					aHrTrab[nP+1,1]					,;	//03 -> Data da 2a Marcacao
					aHrTrab[nP+1,2]					,;  //04 -> Hora da 2a Marcacao
					oAponta:aSiglaMarc[ nIndice ]	,;	//05 -> (A)-Antes Extrada,(E)-Entrada,(I)-Intervalo,(S)-Na Saida ,(D)-Apos Expediente
					nIndice							,;	//06 -> Indice de aApo
					.T.								,;	//07 -> Horas Extras do Primeiro Dia
					.F.								,;	//08 -> Apuracao Corresponde a Intervalo
					NIL								,;	//09 -> Forca o Tipo do Dia como Trabalhado
					.T.								;	//10 -> Calcula Adicionais Especiais (Prima Dominical, etc)
				)

	nPlus1 := Min(nP + 1, oAponta:nSiglaMarc)

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Quando Pagar Horas Extras No Intervalo em Dias Nao Tra³
	³balhados e funcionario Tiver Efetuado a marcacao de In³
	³Tervalo                                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
IF (( SubStr( oAponta:aSiglaMarc[ nPlus1 ] , -1 ) == "S" ) .And. oAponta:lIntNtrab .And. ( nPlus1 < nElem ))

		IF ( ( "I" + SubStr( oAponta:aSiglaMarc[nPlus1] , 01 , 01 ) ) $ oAponta:cPagInt )

  		  	//-- Procuro pela Saida nas Horas de Intervalo Realizadas
			nPos	:= aScan( aHrTrab , { |x| x[08] == aHrTrab[nPlus1,8] } )
			nPos1	:= nPos+1

			//-- Obtem a Posicao da Marcacao na Tabela correspondente a Saida de Intervalo
			//-- Analisada
			nPosInt	:= aScan(oAponta:aHoras,{|x| x[3] == aHrTrab[nPos,8] .and. x[10] == "SI" } )

			//-- Nao calcula Extras para a Mesma Data+hora
			IF (( nPos > 0 ) .And. ( nPosInt > 0 ) .And. ( nPos <> nPos1 ))

				 //-- Obtem a Hora de Retorno do Intervalo conforme a Saida do Funcionario +  as
				 //-- as Horas de Intervalo
			 	 aHrIntTab	:= RetFimTab( aHrTrab[nPos,1] , aHrTrab[nPos,2] , oAponta:aHoras[nPosInt,09] )

				 //-- Se a Hora de Retorno de Intervalo baseada na Tabela for maior que
				 //-- a Hora de Retorno Efetivamente Realizada, entao assume retorno realizado
				 //-- caso contrario assume da tabela
				 IF (DataHora2Str( aHrIntTab[ 1 ], aHrIntTab[ 2 ] ) > DataHora2Str( aHrTrab[ nPos1 , 1 ] , aHrTrab[ nPos1 , 2 ] ))

				    aHrIntTab[1] := aHrTrab[ nPos1 , 1 ]

   				    aHrIntTab[2] := aHrTrab[ nPos1 , 2 ]

				 EndIF

				 fExtras(	aHrTrab[nPos,1]					,;	//01 -> Data da 1a Marcacao
				  			aHrTrab[nPos,2]					,;	//02 -> Hora da 1a Marcacao
							aHrIntTab[1]					,;	//03 -> Data da Entrada da Marcacao Prevista conforme Horas de Intervalo
							aHrIntTab[2]					,;  //04 -> Hora da Entrada da Marcacao Prevista conforme Horas de Intervalo
							oAponta:aSiglaMarc[ nPlus1 ]	,;	//05 -> Tipo de Marcacao (Ent.,Int.,Saida...)
							nPlus1							,;	//06 -> Indice de aApo
							.T.								,;	//07 -> Horas Extras do Primeiro Dia
				   			.T.								,;	//08 -> Apuracao Corresponde a Intervalo
				   			NIL								,;  //09 -> Forca o Tipo do Dia como Trabalhado
				   			.F.								;   //10 -> Calcula Adicionais Especiais (Prima Dominical, etc...)
				)

			EndIF

		EndIF

	EndIF

Next nP

aHrTrab := {}

Return NIL

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fHeAutoriz  ³ Autor ³Mauricio MR           ³ Data ³03/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna a Qtde de HE autorizadas conforme Horarios definidos ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais> 									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nHorTot (Total de Horas Autorizadas                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fHeAutoriz(	dDataHI		,;	//01 -> Data da Hora Inicial
							nHI			,;	//02 -> Hora Inicial
					  		dDataHF		,;	//03 -> Data da Hora Final
					  		nHF			,;	//04 -> Hora Final
					  		nHoras		,;	//05 -> <@>Horas Extras Diurnas Autorizadas
					  		nHorasNot	,;	//06 -> <@>Horas Extras Noturnas Autorizadas
					  		lNoturno	,;	//07 -> Apontar Horas Noturnas
					  		dData		,;	//08 -> Data do Apontamento
					  		nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno
					  		nMinHNot	,;	//10 -> Minutos para a Hora Noturna
					  		lAcreNot	,;  //11 -> Se destaca o Acrescimo noturno das Horas Noturnas
					  		nExDiaAdn	;   //12 -> Calculo do Adicional Noturno para Horas diurnas extras em continuidade da jornada noturna
				  		  )

Local cLimIni	:= 0
Local cLimFim	:= 0
Local cHorIni	:= 0
Local cHorFim	:= 0
//-- Variaveis para calculo
Local nHorTot	:= 0
//-- Variaveis de retorno por referencia
Local nEx       := 0
Local nExNot    := 0
Local nExAdn	:= 0
//-- Controle de Loop
Local nFaixas	:= 0
Local nX		:= 0

DEFAULT dDataHI		:= Ctod("//")
DEFAULT nHI			:= 0
DEFAULT dDataHF		:= Ctod("//")
DEFAULT nHF			:= 0
DEFAULT lAcreNot	:= oAponta:lAcreNot

IF !( dDataHI == dDataHF .and. nHI == nHF )

	DEFAULT nHoras		:= 0
	DEFAULT nHorasNot	:= 0
	DEFAULT lNoturno	:= .T.
	DEFAULT dData		:= dDataHI
	DEFAULT nHrAcNot	:= 0
	DEFAULT nMinHNot	:= oAponta:nMinHnot

	//-- Converte Datas e Horas das Marcacoes para String
	cHorIni := DataHora2Str( dDataHI , nHI )
	cHorFim := DataHora2Str( dDataHF , nHF )

	nFaixas := Len( oAponta:aFaixasHE )
	//-- Corre todas as Faixas de HE autorizadas
	For nX := 1 To nFaixas
	    //-- Zera Variaveis auxiliares de HE diurnas/noturnas e adicional noturno
		nEx       	:= 0
		nExNot    	:= 0
		nExAdn		:= 0
		//-- Converte Limites da Faixa para String
		cLimIni := DataHora2Str( oAponta:aFaixasHE[ nX , DATA_INICIAL	] , oAponta:aFaixasHE[ nX , HORA_INICIAL	] )
		cLimFim := DataHora2Str( oAponta:aFaixasHE[ nX , DATA_FINAL		] , oAponta:aFaixasHE[ nX , HORA_FINAL		] )

		// 1)   Desconsidera Horarios que:
		//	 a) Terminam antes da faixa de HE autorizadas
		//   b) Iniciam depois da faixa de HE autorizadas
		IF !( (cHorFim <= cLimIni) .or. (cHorIni >= cLimFim) )

				// 2) Se o Hora Inicial da Marcacao ocorrer no inicio ou apos o inicio da faixa de horarios
				// Calcula a qtde de horas entre a Hora inicial da Marcacao e a hora final da marcacao ou
				// o fim da faixa de horarios
				IF ( cHorIni >= cLimIni )
				    // 2.1) Se a Hora Final da Marcacao ocorre  antes do fim ou no fim da faixa de horarios
				    IF ( cHorFim <= cLimFim )
				    	// Calcula a Qtde de Horas entre a Hora inicial e Final da Marcacao
				        fCalHoras(	dDataHI								,;	//01 -> Data 1
									nHI									,;	//02 -> Hora 1
									dDataHF								,;	//03 -> Data 2
									nHF									,;	//04 -> Hora 2
									@nEx								,;	//05 -> <@>Horas Normais Apontadas
									@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
									lNoturno							,;	//07 -> Apontar Horas Noturnas
									dData								,;	//08 -> Data Inicial Para a Hora Noturna
									@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
									oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
									oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
									nMinHNot							,;	//12 -> Minutos do Horario Noturno
									lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
								 )

						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno(	dDataHI				,;	//01 -> Data 1
										nHI					,;	//02 -> Hora 1
										dDataHF				,;	//03 -> Data 2
										nHF	   				,;	//04 -> Hora 2
								  		@nExDiaAdn			,;	//05 -> <@>Horas Normais Apontadas
										0					,;	//06 -> <@>Horas Noturnas Apontadas
								  		.T.					,;	//07 -> Apontar Horas Noturnas
										oAponta:dData		,;	//08 -> Data Inicial Para a Hora Noturna
										0					,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot	,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot	,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot	,;	//12 -> Minutos do Horario Noturno
										lAcreNot			,;	//13 -> Apenas Acrescimo Noturno
							  		  )
						Endif

					Else
					// 2.2) Se a Hora Final da Marcacao ocorre apos o fim da faixa de horarios
						// Calcula a Qtde de Horas entre aHora Inicial da Marcacao e o fim da Faixa
					    fCalHoras(	dDataHI								,; 	//01 -> Data 1
					     			nHI									,;	//02 -> Hora 1
					     			oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
					       			oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
					              	@nEx								,;	//05 -> <@>Horas Normais Apontadas
					              	@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
					              	lNoturno							,;	//07 -> Apontar Horas Noturnas
					              	dData								,;	//08 -> Data Inicial Para a Hora Noturna
					              	@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
					              	oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
									oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
									nMinHNot							,;	//12 -> Minutos do Horario Noturno
									lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
					             )
						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno(	dDataHI								,;	//01 -> Data 1
										nHI									,;	//02 -> Hora 1
										oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
										oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
									  	@nExDiaAdn							,;	//05 -> <@>Horas Normais Apontadas
										0									,;	//06 -> <@>Horas Noturnas Apontadas
									  	.T.									,;	//07 -> Apontar Horas Noturnas
										oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
										0									,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
										lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
								  	  )
						Endif
					EndIF
				// 3) Se a Hora Inicial da Marcacao ocorre antes do Inicio da faixa de horarios
				// Calcula a Qtde de horas entre o inicio da Faixa e a hora final da marcacao ou
				// o fim da faixa de horarios
				ElseIF ( cHorIni < cLimIni )
				    // 3.1) Se a Hora Final da Marcacao ocorre  antes do fim da faixa de horarios
				    IF ( cHorFim <= cLimFim )
				       // Calcula a Qtde de Horas entre o inicio da Faixa e a Hora Final da Marcacao
				       fCalHoras(oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
				       			 oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
				                 dDataHF			 				,;	//03 -> Data 2
				                 nHF				 				,;	//04 -> Hora 2
				                 @nEx								,;	//05 -> <@>Horas Normais Apontadas
					             @nExNot							,;	//06 -> <@>Horas Noturnas Apontadas
					             lNoturno							,;	//07 -> Apontar Horas Noturnas
					             dData								,;	//08 -> Data Inicial Para a Hora Noturna
					             @nExAdn							,;	//09 -> <@>Horas de Acrescimo Noturno
			                 	 oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
								 oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
								 nMinHNot							,;	//12 -> Minutos do Horario Noturno
								 lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
				                 )
						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno( oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
						       			oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
						                dDataHF			 					,;	//03 -> Data 2
						                nHF				 					,;	//04 -> Hora 2
									  	@nExDiaAdn							,;	//05 -> <@>Horas Normais Apontadas
										0									,;	//06 -> <@>Horas Noturnas Apontadas
									  	.T.									,;	//07 -> Apontar Horas Noturnas
										oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
										0									,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
										lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
								  	  )
						Endif
					Else
						// 3.2) Se a Hora Final da Marcacao ocorre no fim ou apos o fim da faixa de horarios
						//  Calcula a Qtde de Horas entre o inicio da Faixa e o Fim da Faixa
					    fCalHoras(	oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
					      			oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
					              	oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
					              	oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
									@nEx								,;	//05 -> <@>Horas Normais Apontadas
					             	@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
					             	lNoturno							,;	//07 -> Apontar Horas Noturnas
					             	dData								,;	//08 -> Data Inicial Para a Hora Noturna
					             	@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
					             	oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
								 	oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
								 	nMinHNot							,;	//12 -> Minutos do Horario Noturno
								 	lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
					              	)
						//-- Calcula o Adicional Noturno para Horas Extras Diurnas realizadas em continuacao a jornada noturna.
						If ( oAponta:lAdHeDia ) .and. 	( oAponta:cTipoDia == "S" )
							fAdnDiurno(	oAponta:aFaixasHE[nX,DATA_INICIAL]	,;	//01 -> Data 1
					      				oAponta:aFaixasHE[nX,HORA_INICIAL]	,;	//02 -> Hora 1
					              		oAponta:aFaixasHE[nX,DATA_FINAL]	,;	//03 -> Data 2
					              		oAponta:aFaixasHE[nX,HORA_FINAL]	,;	//04 -> Hora 2
									  	@nExDiaAdn							,;	//05 -> <@>Horas Normais Apontadas
										0									,;	//06 -> <@>Horas Noturnas Apontadas
									  	.T.									,;	//07 -> Apontar Horas Noturnas
										oAponta:dData						,;	//08 -> Data Inicial Para a Hora Noturna
										0									,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot					,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot					,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot					,;	//12 -> Minutos do Horario Noturno
										lAcreNot							,;	//13 -> Apenas Acrescimo Noturno
								  	  )
						Endif
					EndIF
				EndIF
		EndIF
		//-- Acumula as Horas Extras diurnas/noturnas e adicional
        nHoras		:= SomaHoras( nHoras	,	nEx		)
        nHorasNot	:= SomaHoras( nHorasNot	,	nExNot	)
        nHrAcNot	:= SomaHoras( nHrAcNot	,   nExAdn 	)
	Next nX
	nHorTot	:= SomaHoras( nHorTot , SomaHoras( SomaHoras( nHoras , nHorasNot ) , nHrAcNot  ) )
EndIF

Return( nHorTot )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fSomaApoHE  ³ Autor ³Mauricio MR           ³ Data ³03/10/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³fSoma Valores de Eventos de HE e zera o valor a somar        ³
³          ³Recebe os valores supostamente autorizados (nValorIntegral)  ³
³          ³Subtrai os valores autorizados pelas faixas de autorizacao de³
³          ³HE (nValorAut). O resultado atualiza os valores nao autoriza ³
³          ³dos (nEveAcum). Os valores autorizados pela faixa de HE sao  ³
³          ³transferidos para os valores autorizados correspondentes.    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nEveAcum/nValor (Por referencia)                	     	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fSomaApoHE(	nEveAcum			,;
							nValorIntegral		,;
							nValorAut			,;
							lSomaNaoAutorizados	 ;
						   )

Local nValor	:= 0

DEFAULT nValorAut     		:= 0
DEFAULT lSomaNaoAutorizados	:= .T.

//-- Se utiliza faixa de horas extras para identificar HE autorizadas
IF ( oAponta:lFaixaHE )
    //-- Calcula valor nao autorizado (padrao) ou considera o valor autorizado de HE informado
    nValor			:= IF( lSomaNaoAutorizados , SubHoras( nValorIntegral , nValorAut	) , nValorAut )
    nEveAcum		:= SomaHoras( nEveAcum , nValor )
    nValorIntegral	:= IF( lSomaNaoAutorizados , nValorAut , nValorIntegral )
    nValorAut		:= 0
Else
	nEveAcum		:= SomaHoras( nEveAcum , nValorIntegral )
	nValorIntegral	:= 0
EndIF

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³AppendaResAbo³Autor ³Mauricio MR          ³ Data ³04/05/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Adiciona Abonos em aResult	 							    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >								  	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function AppendaResAbo( aResult , aResAbo )
Local bAsc
Local nRes
Local nLoop
Local nLoops
Local nI

bAsc   := { |x|;
					x[ ARESABO_DATA ]		== aResult[ nLoop	, ARESULT_DATA		];
					.and.;
					x[ ARESABO_CODIGO ]		== aResult[ nLoop	, ARESULT_EVENTO	];
					.and.;
					x[ ARESABO_CUSTO ]		== aResult[ nLoop	, ARESULT_CC		];
					.and.;
					x[ ARESABO_TPMARCA ]	== aResult[ nLoop	, ARESULT_TPMARCA	];
		  }

nLoops := Len( aResult )
For nLoop := 1 To nLoops
	IF ( ( nRes := aScan( aResAbo, bAsc ) ) > 0 )
		If Len(aResAbo[ nRes, ARESABO_ABONOS] ) > 0 .And. aResAbo[ nRes][ARESABO_ABONOS][1][AABONOS_FLAG] != "I"
				aResAbo[ nRes, ARESABO_HORAS_TOTAIS]  := Min(aResult[ nLoop, ARESULT_HORAS ], aResAbo[ nRes, ARESABO_HORAS_TOTAIS ])
			For nI := 1 To Len(aResAbo[nRes, ARESABO_ABONOS])
				aResAbo[nRes, ARESABO_ABONOS, nI, AABONOS_HORAS_ABO] := Min(aResult[nLoop, ARESULT_HORAS], aResAbo[nRes, ARESABO_ABONOS, nI, AABONOS_HORAS_ABO])
			Next
		EndIf
		aResult[ nLoop, ARESULT_RESULT_APO  ]	:= aClone( aResAbo[ nRes, ARESABO_ABONOS ] )
		aResult[ nLoop, ARESULT_NUM_ABO_HRS ]	:= aResAbo[ nRes, ARESABO_HORAS_TOTAIS ]
	EndIF
Next nLoop

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³fAcreNot     ³Autor ³Mauricio MR          ³ Data ³23/03/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Apura Acrescimo Noturno para os Intervalos Pagos		    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >								  	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >								  	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fAcreNot()
Local aPerNot		:= {}
Local aPerDia		:= {}

Local nO
Local nOPlus1
Local nHr1
Local nHr2
Local nHr3
Local nIndice
Local nPosInterv	:= 0


/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Inicio do Calculo das Horas Trabalhadas        ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

For nO := 2 To oAponta:nElem Step 2
        If ((nOPlus1 := ( nO + 1 ))) >= oAponta:nElem
         	Exit
        Endif

		nHr1 := nHr2 := nHr3 := 0
		oAponta:CalcPerHr(  oAponta:aHrTrab[nO		,	1]	,;	//01 -> Data 1
							oAponta:aHrTrab[nO		,	2]	,;	//02 -> Hora 1
							oAponta:aHrTrab[nOPlus1	,	1]	,;	//03 -> Data 2
							oAponta:aHrTrab[nOPlus1	,	2]	,;	//04 -> Hora 2
							@nHr1							,;	//05 -> <@>Horas Normais Apontadas
							@nHr2							,;	//06 -> <@>Horas Noturnas Apontadas
							NIL								,;	//07 -> Apontar Horas Noturnas
							oAponta:aHrTrab[nO,10]			,;	//08 -> Data Inicial Para a Hora Noturna
							@nHr3							,;	//09 -> <@>Horas de Acrescimo Noturno
							oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
							oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
							oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
							oAponta:lAcreNot				,;	//13 -> Apenas Acrescimo Noturno
							@aPerNot						,;	//14 -> Periodo Horario Noturno
							@aPerDia						;	//15 -> Periodo Horario Diurno
						   )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Para as Horas Trabalhadas Deve-se Sempre  Procurar³
		³pela Entrada									   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nIndice := aScan( oAponta:aSiglaMarc ,;
							IF(;
									( "S" $ oAponta:aHrTrab[ nO , 3 ] ) ,;
									( SubStr( oAponta:aHrTrab[ nO , 3 ] , 1 , 1 ) + "E" ),;
									oAponta:aHrTrab[ nO , 3 ];
							   );
						 )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Se Nao Encontrou Flag Correspondente, assume     a³
		³Entrada      								       ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nIndice := Max( nIndice , 1 )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Apura Acrescimo Noturno para Intervalos Pagos	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	     IF ( nHr3 > 0 )   .AND. ( Substr(oAponta:aHrTrab[ nO , 3 ],1,1) $ oAponta:cPagNotInt )
			//-- Se Existe o Identificador de Acrescimo Noturno
			//-- Se Destaca o Acrescimo Noturno
			//-- Entao o Adicional Noturno contera o valor integral
			//-- e destacamos o acrescimo no identificador correspondente
			If oAponta:lIdAcreNot  .AND. oAponta:lAcreNot
				If oAponta:lSepAcrNot
					oAponta:aApo[oaApo:AcrAdiNot,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AcrAdiNot,nIndice],nHr3)
					oAponta:aApo[oaApo:AdicNotAut,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AdicNotAut,nIndice],nHr2)
					If (nPosInterv := aScan(oAponta:aApo[oaApo:HrIntNotEf],{|x| x > 0},++nPosInterv)) > 0
						oAponta:aApo[oaApo:HrIntNotEf,nPosInterv] := nHr2
					EndIf
				EndIf
				oAponta:aApo[oaApo:AcreAuto,nIndice]	:= SomaHoras(oAponta:aApo[oaApo:AcreAuto,nIndice],nHr3)
			Else
				oAponta:aApo[ oaApo:AdicNotAut , nIndice ]	:= SomaHoras( oAponta:aApo[ oaApo:AdicNotAut 	, nIndice ] , nHr3 )
			EndIF

		 Endif

	Next nO
Return (Nil)



/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fAdnDiurno  ³ Autor ³Mauricio MR           ³ Data ³30/05/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula as Horas para Adicional s/ H.Extras Diurnas  		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais> 									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³nHorTot (Total de Horas para o Adicional Diurno 	   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fAdnDiurno(	dDataHI		,;	//01 -> Data da Hora Inicial
							nHI			,;	//02 -> Hora Inicial
					  		dDataHF		,;	//03 -> Data da Hora Final
					  		nHF			,;	//04 -> Hora Final
					  		nHoras		,;	//05 -> <@>Horas Extras Diurnas Autorizadas
					  		nHorasNot	,;	//06 -> <@>Horas Extras Noturnas Autorizadas
					  		lNoturno	,;	//07 -> Apontar Horas Noturnas
					  		dData		,;	//08 -> Data do Apontamento
					  		nHrAcNot	,;	//09 -> <@>Horas de Acrescimo Noturno
				  			nIniHnot	,;	//10 -> Inicio do Horario Noturno
							nFimHnot	,;	//11 -> Final do Horario Noturno
							nMinHnot	,;	//12 -> Minutos do Horario Notur
					  		lAcreNot	,;  //13 -> Se destaca o Acrescimo noturno das Horas Noturnas
					  		aHorasTemp	;   //14 -> aHoras a ser utilizado
				  		  )
Local aNoturno	:= {}
Local aPerNot	:= {}

//-- Variaveis para calculo
Local nHorTot	:= 0
Local nPos		:= 0
Local dDataEJ
Local nHoraEJ
Local dDataSJ
Local nHoraSJ
Local dDtAuxHI
Local nHAuxI

Local cEJ		:= ""
Local cSJ		:= ""
Local cHI		:= ""
Local cHF    	:= ""

//-- Variaveis de retorno por referencia
Local nEx       := 0
Local nExNot    := 0
Local nExAdn	:= 0

DEFAULT dDataHI		:= Ctod("//")
DEFAULT nHI			:= 0
DEFAULT dDataHF		:= Ctod("//")
DEFAULT nHF			:= 0
DEFAULT lAcreNot	:= oAponta:lAcreNot

aHorasTemp	:=If(aHorasTemp == Nil, oAponta:aHoras, aHorasTemp)

Begin Sequence

	IF ( dDataHI == dDataHF .and. nHI == nHF )
	   Break
	Endif

	DEFAULT nHoras		:= 0
	DEFAULT nHorasNot	:= 0
	DEFAULT lNoturno	:= .T.
	DEFAULT dData		:= dDataHI
	DEFAULT nHrAcNot	:= 0
	DEFAULT	nIniHnot	:= oAponta:nIniHnot
	DEFAULT	nFimHnot	:= oAponta:nFimHnot
	DEFAULT nMinHNot	:= oAponta:nMinHnot

    nPos		:= Ascan(oAponta:aHoras 	,{ |x| x[10] == "EJ" } )
    If nPos == 0
    	oAponta:lErroApon := .T.
    	Break
    EndIf
    cEJ			:= DataHora2Str( oAponta:aHoras[nPos,1], oAponta:aHoras[nPos,2] )
    nPos		:= Ascan(oAponta:aHoras 	,{ |x| x[10] == "SJ" } )
    If nPos == 0
    	oAponta:lErroApon := .T.
    	Break
    EndIf
    cSJ			:= DataHora2Str( oAponta:aHoras[nPos,1], oAponta:aHoras[nPos,2] )
    cHI			:= DataHora2Str( dDataHI, nHI )
    cHF    		:= DataHora2Str( dDataHF, nHF )

	//-- Obtem a data e hora da entrada/saida de jornada

	//-- Marcacoes antes da SJ
    If  ( cHI <=cSJ .and. cHF <= cSJ )
        Break
    Endif

	nPos 		:= aScan( oAponta:aHoras ,{ |x|  x[10] == "EJ"  } )
    If nPos == 0
    	oAponta:lErroApon := .T.
    	Break
    EndIf
	dDataEJ		:= oAponta:aHoras[ nPos , 1 ]
	nHoraEJ		:= oAponta:aHoras[ nPos , 2 ]
	nPos 		:= aScan( oAponta:aHoras ,{ |x|  x[10] == "SJ" } )
    If nPos == 0
    	oAponta:lErroApon := .T.
    	Break
    EndIf
 	dDataSJ		:= oAponta:aHoras[ nPos , 1 ]
	nHoraSJ		:= oAponta:aHoras[ nPos , 2 ]

	//-- Verifica se a jornada ocorre durante o horario noturno
	aNoturno 		:= DataHora2Not( dDataEJ , nHoraEJ  , dDataSJ, nHoraSJ, dDataEJ , nIniHnot , nFimHnot , nMinHnot , @aPerNot )
	lTemHorNoturno	:= !Empty( Somahoras( aNoturno[1], aNoturno[2] ) )

	IF lTemHorNoturno

		If DataHora2Str( dDataSJ , nHoraSJ ) >= DataHora2Str( dDataSJ , nFimHnot )
		   dDtAuxHI	:= 	dDataSJ
		   nHAuxI	:=	nHoraSJ
		Else
		   dDtAuxHI	:= 	dDataSJ
		   nHAuxI	:=	nFimHnot
		Endif

		If DataHora2Str( dDtAuxHI , nHAuxI ) >= DataHora2Str( dDataHI , nHI )
		   dDataHI	:= 	dDtAuxHI
		   nHI		:=	nHAuxI
		Endif

		// Calcula a Qtde de Horas entre Fim do Horario Padrao e a ultima Marcacao
        fCalHoras(	dDataHI								,;	//01 -> Data 1
					nHI									,;	//02 -> Hora 1
					dDataHF								,;	//03 -> Data 2
					nHF									,;	//04 -> Hora 2
					@nEx								,;	//05 -> <@>Horas Normais Apontadas
					@nExNot								,;	//06 -> <@>Horas Noturnas Apontadas
					lNoturno							,;	//07 -> Apontar Horas Noturnas
					dData								,;	//08 -> Data Inicial Para a Hora Noturna
					@nExAdn								,;	//09 -> <@>Horas de Acrescimo Noturno
					nIniHNot							,;	//10 -> Inicio do Horario Noturno
					nFimHNot							,;	//11 -> Final do Horario Noturno
					nMinHNot							,;	//12 -> Minutos do Horario Noturno
					lAcreNot							 ;	//13 -> Apenas Acrescimo Noturno
				 )
	EndIF

	//-- Acumula as Horas Extras diurnas/noturnas e adicional
    nHoras		:= SomaHoras( nHoras	,	nEx		)
    nHorasNot	:= SomaHoras( nHorasNot	,	nExNot	)
    nHrAcNot	:= SomaHoras( nHrAcNot	,   nExAdn 	)

	nHorTot		:= SomaHoras( nHorTot , SomaHoras( SomaHoras( nHoras , nHorasNot ) , nHrAcNot  ) )

End Sequence

Return( nHorTot )



/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fAdicionais ³ Autor ³Mauricio MR       	     ³ Data ³13/12/2006³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Calcula Adicionais para Dias Especiais (DSR, Feriado e Domingo ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais> 						 			   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                  	   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                	   	       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														   ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fAdicionais(	dDt1				,;	//01 -> Data 1
								nHr1				,;	//02 -> Hora 1
								dDt2				,;	//03 -> Data 2
								nHr2				,;	//04 -> Hora 2
								nHoras				,;	//05 -> <@>Horas Extras Diurnas Autorizadas
					  			nHorasNot			,;	//06 -> <@>Horas Extras Noturnas Autorizadas
					  			lNoturno			,;	//07 -> Apontar Horas Noturnas
					  			dData				,;	//08 -> Data do Apontamento
					  			nHrAcNot			,;	//09 -> <@>Horas de Acrescimo Noturno
				  				nIniHnot			,;	//10 -> Inicio do Horario Noturno
								nFimHnot			,;	//11 -> Final do Horario Noturno
								nMinHnot			,;	//12 -> Minutos do Horario Notur
					  			lAcreNot			,;  //13 -> Se destaca o Acrescimo noturno das Horas Noturnas
					  			nIndice				,;	//14 -> Indice da matriz aAPO (resultados do Apontamento) para apuracao das horas
					  			lPrima				,;  //15 -> Determina o calculo da Prima Dominical
					  			lDescLab			,;  //16 -> Determina o calculo da Descanso Laborado
					  			lFestLab			;   //17 -> Determina o calculo da Festivo Laborado
						   )


DEFAULT nHoras		:= 0
DEFAULT nHorasNot	:= 0
DEFAULT lNoturno	:= .T.
DEFAULT dData		:= oAponta:dData
DEFAULT nHrAcNot	:= 0
DEFAULT	nIniHnot	:= oAponta:nIniHnot
DEFAULT	nFimHnot	:= oAponta:nFimHnot
DEFAULT nMinHNot	:= oAponta:nMinHnot

DEFAULT lPrima		:= ( oAponta:lPrimDom )
DEFAULT lDescLab	:= ( oAponta:lDescLab )
DEFAULT lFestLab	:= ( oAponta:lFestLab )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Calcula Prima Dominical, Descanso Laborado,	   ³
³Festivo Laborado.								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
//-- Transfere as horas efetivamente trabalhadas para o calculo da Prima Dominical, Descanso Laborado e
//-- Festivo Laborado.
IF 	lPrima  .OR. lDescLab .OR. lFestLab

	nHoras 	:= fCalHoras(	dDt1							,;	//01 -> 1a. Data
							nHr1							,;	//02 -> 1o. Horario
							dDt2							,;	//03 -> 2a. Data
							nHr2							,;	//04 -> 2o. Hora
							Nil								,;	//05 -> <@>Horas Normais Apontadas
							Nil								,;	//06 -> <@>Horas Noturnas Apontadas
							Nil								,;	//07 -> Apontar Horas Noturnas
							dData							,;	//08 -> Data Inicial Para a Hora Noturna
							Nil								,;	//09 -> <@>Horas de Acrescimo Noturno
							nIniHnot						,;	//10 -> Inicio do Horario Noturno
							nFimHnot						,;	//11 -> Final do Horario Noturno
							nMinHnot						,;	//12 -> Minutos do Horario Noturno
							lAcreNot						;	//13 -> Apenas Acrescimo Noturno
						)

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Calcula Prima Dominical						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	//-- Se for domingo e se a regra determina o calculo da Prima Dominical
	IF 	lPrima
		oAponta:aApo[ oaApo:PrimDom , nIndice ]	:= SomaHoras(oAponta:aApo[ oaApo:PrimDom , nIndice ], nHoras )
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Calcula Descanso Laborado						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF lDescLab
		oAponta:aApo[ oaApo:DescLab , nIndice ]	:= SomaHoras(oAponta:aApo[ oaApo:DescLab , nIndice ], nHoras )
	EndIF

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Calcula Festivo Laborado						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	IF 	lFestLab
		oAponta:aApo[ oaApo:FestLab , nIndice ]	:= SomaHoras(oAponta:aApo[ oaApo:FestLab , nIndice ], nHoras )
	EndIF

EndIF

Return (Nil)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fHrsIntAntºAutor  ³Luis Artuso         º Data ³  06/08/14   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ 									                          º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function fHrsIntAnt( cFilSRA, cMatSRA, dData, lExecutou, lSoCarga)

	Local dIniPer			:= CTOD('')
	Local dFimPer			:= CTOD('')
	Local nX				:= 0
	Local cSeek				:= ""
	Local cOrdem			:= ""
	Local lGrava			:= .F.
	Local nLenMarc			:= 0
	Local nLenTab			:= 0
	
	Default lSoCarga := .F.

	dIniPer	:= dData - 1	//Retrocede a data em um dia, para pegar as marcacoes do ultimo dia do periodo anterior
	dFimPer	:= dData

	oAponta:aMarClone	:= {}
	oAponta:aTabClone	:= {}
	oAponta:aHorasAnt	:= {}
	oAponta:aHoras		:= {}

	GetMarcacoes(	@oAponta:aMarClone	,;	//01 -> Marcacoes dos Funcionarios
					@oAponta:aTabClone	,;	//02 -> Calendario de Marcacoes
					NIL					,;	//03 -> Tabela Padrao
					NIL					,;	//04 -> Turnos de Trabalho
					dIniPer 			,;	//05 -> Periodo Inicial
					dFimPer				,;	//06 -> Periodo Final
					cFilSRA				,;	//07 -> Filial
					cMatSRA				,;	//08 -> Matricula
					NIL					,;	//09 -> Turno
					NIL					,;	//10 -> Sequencia de Turno
					NIL					,;	//11 -> Centro de Custo
					NIL					,;	//12 -> Alias para Carga das Marcacoes
					NIL					,;	//13 -> Se carrega Recno em aMarcacoes
					NIL					,;	//14 -> Se considera Apenas Ordenadas
					NIL					,;  //15 -> Verifica as Folgas Automaticas
					NIL 		 		,;  //16 -> Se Grava Evento de Folga Mes Anterior
					NIL					,;	//17 -> Se Carrega as Marcacoes Automaticas
					NIL				    ,;	//18 -> Registros de Marcacoes Automaticas que deverao ser Desprezadas
					NIL					,;	//19 -> Bloco para avaliar as Marcacoes Automaticas que deverao ser Desprezadas
					.F.					,;	//20 -> Se Considera o Periodo de Apontamento das Marcacoes
					NIL					,;	//21 -> Se Efetua o Sincronismo dos Horarios na Criacao do Calendario
					NIL					,;  //22 -> Se carrega as marcacoes desconsideradas (Uso com lPort1510)
					lSoCarga			 ;  //23 -> Se carrega as marcacoes das duas tabelas SP8 e SPG
				)

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Aponta Hora Extra Inter-Jornada							  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nLenMarc	:= LEN(oAponta:aMarClone)
	nLenTab		:= LEN(oAponta:aTabClone)
	nX 			:= 0

	// Força o reapontamento das marcações encontradas
	If nLenMarc > 0
		aEval(oAponta:aMarClone,{|x| x[AMARC_APONTA] := "N"})
	EndIf
	
	lGravou	:= .F.

	/*BEGINDOC
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Devido a necessidade de montagem do aTabCalend com datas de períodos diferentes (ex.: Período de apontamento: 15/07 a 16/08
	 e ha interjornada nas datas: 15/08 a 16/08), na montagem do aTabCalend, nao eh possivel recuperar a ordem original da marcacao
	 do dia 15/08, que eh a ultima data do periodo.  Esta rotina ajusta a ordem da seguinte maneira:
	 - Calendario de marcacoes gerado: 15/08 a 16/08
	 - Ordens geradas: 15/08 -> "01" e 16/08->"02"
	 - Ordem das marcacoes: 15/08 -> "31" e 16/08 -> "01"
	 - O ajuste efetuado: Atualizar as ordens do calendario de marcacoes com as ordens classificadas, permitindo que o array
	 'oAponta:aHoras'na funcao fMtaTabAp possa intercalar corretamente os horarios, que serao verificados atraves da funcao
	 fHrsInter
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ENDDOC*/

	For nX := 1 TO 2
		
		// Por haver somente (no maximo) 2 dias com marcacoes no array 'aMarClone', a geracao das horas sera efetuada 2 vezes.
		If ( nX < 3 )
			lGravou	:= .F.
		EndIf
		
		If ( nX == 1 )
			cSeek := dToS(dIniPer)
		Else
			cSeek := dToS(dFimPer)
		EndIf
		
		//-Localiza no array de marcacoes a data de apontamento.
		nPosXY	:= ASCAN( oAponta:aMarClone, {|X|  dToS(X[AMARC_DATAAPO]) == cSeek  } )
		
		If ( nPosXY > 0 )
			
			cOrdem	:= oAponta:aMarClone[nPosXY, AMARC_ORDEM]
			
			nPosXY	:= ASCAN( oAponta:aTabClone, {|X|  dToS(X[CALEND_POS_DATA_APO]) == cSeek  } )
			
			If ( nPosXY	> 0 )

				//-Ajusta o calendario com a ordem original das marcações
				aEval(oAponta:aTabClone,{|x| If( dToS(X[CALEND_POS_DATA_APO]) == cSeek, x[CALEND_POS_ORDEM] := cOrdem,Nil)})

				Do While ( nPosXY <= nLenTab ) .AND. ( dToS(oAponta:aTabClone[nPosXY, CALEND_POS_DATA_APO]) == cSeek )		
					/*
						O atributo 'cOrdem' eh alterado aqui, para permitir a verificacao da ordem na rotina fMtaTabAp, que alterna
						as horas do calendario com as horas de marcacao.
					*/
					oAponta:cOrdem	:= cOrdem
					
					If !( lGravou )
						
						lHrInter	:= .T.
						
						oAponta:aHoras	:= {}
						If ( fMtaTabAp ( lMarcImpar, oAponta:nHrInterJd > 0, lMarcIgual, .F. ) > 0 )
							/*	01 lMarcImpar				-> Tratamento de Marcacoes Impares na Montagem de aHoras
								02 oAponta:nHrInterJd > 0	-> Apontar Extras Inter Jornada
								03 lMarcIgual				-> Tratamento para Maracoes Duplicadas
								04 .T.						-> Ignorar marcacoes ja processadas
							*/
							If ( dToS(dIniPer) == dToS( oAponta:aTabClone[nPosXY , CALEND_POS_DATA_APO]) )
								//Preenche o array 'aHorasAnt' com as horas do periodo anterior
								oAponta:aHorasAnt := aClone(oAponta:aHoras)
								oAponta:aHoras := {}
							EndIf
							lGravou	:= .T.
						EndIf
					EndIf
					nPosXY++
				EndDo
			EndIf
		EndIf
	Next

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Aponta Hora Extra Inter-Jornada							  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:nHeInterA	:= 0
	oAponta:nHeInterN	:= 0
	
	If ! lSoCarga
		//Apura as Horas Extras Inter-Jornada
		fHrsInter(	cFilSRA , @lGrava )
		
		If ( lGrava )
			
			//Gera Hora Extra Inter-Jornada Autorizada
			fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
						dData											,;	//02 -> Data da Geracao
						oAponta:nHeInterA								,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 029 , 02 ]							,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.												,;	//07 -> True para Acumular as Horas
						""												,;	//08 -> Periodo de Apuracao
						0   											,;	//09 -> Tolerancia
						"H"							     				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/									,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/									,; //12 -> Funcao
						/*cDepto	*/									,; //13 -> Depto para gravacao
						/*cPosto	*/									,; //14 -> Posto para gravacao
						/*cProcesso	*/									,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/									,; //16 -> Processo para Gravacao
						/*cPerApo	*/									,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 									,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend							    ,; //19 -> Turno de Trabalho
						oAponta:cSeqTno									;  //20 -> Semana/Sequencia do Turno
					)
			
			//Gera Hora Extra Inter-Jornada Nao Autorizada
			fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
						dData											,;	//02 -> Data da Geracao
						oAponta:nHeInterN								,;	//03 -> Numero de Horas Resultantes
						aEvesIds[ 038 , 02 ]							,;	//04 -> Codigo do Evento
						oAponta:cCustoGrv								,;	//05 -> Centro de Custo a ser Gravado
						oAponta:cTipoMarc								,;	//06 -> Tipo de Marcacao
						.T.												,;	//07 -> True para Acumular as Horas
						""												,;	//08 -> Periodo de Apuracao
						0   											,;	//09 -> Tolerancia
						"H"							     				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
						/*lSubstitui*/									,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
						/*cFuncao	*/									,; //12 -> Funcao
						/*cDepto	*/									,; //13 -> Depto para gravacao
						/*cPosto	*/									,; //14 -> Posto para gravacao
						/*cProcesso	*/									,; //15 -> Periodo para Gravacao
						/*cRoteiro	*/									,; //16 -> Processo para Gravacao
						/*cPerApo	*/									,; //17 -> Periodo para Gravacao
						/*cNumPagto	*/ 									,; //18 -> NumPagto para Gravacao
						oAponta:cTnoCalend							    ,; //19 -> Turno de Trabalho
						oAponta:cSeqTno									;  //20 -> Semana/Sequencia do Turno
					)
				
			// Aponta Hora Extra Inter-Jornada
			If ( ( lApHeDtm ) .OR. ( oAponta:nHrInterJd > 0 ) )  .and. ( oAponta:nCountOrd <> 1 )
				
				// Salva o Conteudo do aHoras do Dia Antertior
				oAponta:aHorasAnt := aClone( oAponta:aHoras )
			EndIf
		EndIf
	EndIf
	
	lExecutou	:= .T.
	
Return

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³TratIntProAbo ³Autor ³Oswaldo Leite   ³     Data ³15/02/2017³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executar Funcoes para apurar o que abonar                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³                                    						 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³uRet                                                 	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico 													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static function TratIntProAbo()

//campos para tratar o novo horario de pre-anbono resultante da combinacao entre o abono ja existente e o interjornada
Local nHrInic      := 0
Local nHrFim       := 0
Local nIndx1       := 0
Local nNovaHrFim   := 0
Local lCriaNovoReg := .T.

/*
    oAponta:apreabo[1]
	oAponta:apreabo[1][1] = 12
	oAponta:apreabo[1][1] = 03-06-14
	oAponta:apreabo[1][1] = 8
	oAponta:apreabo[1][1] = 03-06-14
	oAponta:apreabo[1][1] = 8,15
	oAponta:apreabo[1][1] = 29
*/

nNovaHrFim := SomaHoras(nIntPriEntradPadrao , nCredInterJ)

For nIndx1 := 1 to Len(oAponta:apreabodia)

	nHrInic := oAponta:apreabodia[nIndx1][3]
   	nHrFim  := oAponta:apreabodia[nIndx1][5]

   	//Na tela de pre-abono o sistema nao permite criar intervalos cujas datas ou horarios sejam coincidentes.
   	//entao, sempre havera um unico intervalo que contenha a nossa data
   	If oAponta:apreabodia[nIndx1][2] <= oAPonta:achktolarr[oAponta:nChkTolArr][1] .and. oAponta:apreabodia[nIndx1][4] >= oAPonta:achktolarr[oAponta:nChkTolArr][1]

		If nIntPriEntradPadrao >= nHrInic .and.  nNovaHrFim <= nHrFim

			   	nIntPriEntradPadrao := nHrInic
			   	nNovaHrFim          := nHrFim

		    	oAponta:apreabodia[nIndx1][1] := SR6->R6_ABINTJ
		   		oAponta:apreabodia[nIndx1][3] := nIntPriEntradPadrao
		   		oAponta:apreabodia[nIndx1][5] := nNovaHrFim
				If nIndx1 <= Len(oAponta:apreabo)//observamos que apreabo é sempre uma copia fiel do apreabodia
					oAponta:apreabo[nIndx1][3] := nIntPriEntradPadrao
					oAponta:apreabo[nIndx1][5] := nNovaHrFim
					oAponta:apreabo[nIndx1][1] := SR6->R6_ABINTJ
				EndIf
		   		lCriaNovoReg := .F.
		   		exit

		EndIf

		If nIntPriEntradPadrao >= nHrInic .and.  nNovaHrFim > nHrFim
		    	nIntPriEntradPadrao := nHrInic
		    	oAponta:apreabodia[nIndx1][1] := SR6->R6_ABINTJ
		  		oAponta:apreabodia[nIndx1][3] := nIntPriEntradPadrao
		   		oAponta:apreabodia[nIndx1][5] := nNovaHrFim
				If nIndx1 <= Len(oAponta:apreabo)//observamos que apreabo é sempre uma copia fiel do apreabodia
					oAponta:apreabo[nIndx1][3] := nIntPriEntradPadrao
					oAponta:apreabo[nIndx1][5] := nNovaHrFim
					oAponta:apreabo[nIndx1][1] := SR6->R6_ABINTJ
				EndIf
		   		lCriaNovoReg := .F.
		   		exit
		EndIf

		If nIntPriEntradPadrao < nHrInic .and.  nNovaHrFim <= nHrFim
		    	nNovaHrFim          := nHrFim
		    	oAponta:apreabodia[nIndx1][1] := SR6->R6_ABINTJ
		   		oAponta:apreabodia[nIndx1][3] := nIntPriEntradPadrao
		   		oAponta:apreabodia[nIndx1][5] := nNovaHrFim
				If nIndx1 <= Len(oAponta:apreabo)//observamos que apreabo é sempre uma copia fiel do apreabodia
					oAponta:apreabo[nIndx1][3] := nIntPriEntradPadrao
					oAponta:apreabo[nIndx1][5] := nNovaHrFim
					oAponta:apreabo[nIndx1][1] := SR6->R6_ABINTJ
				EndIf

		   		lCriaNovoReg := .F.
		  		exit
		EndIf

		oAponta:apreabodia[nIndx1][3] := nIntPriEntradPadrao
		oAponta:apreabodia[nIndx1][5] := nNovaHrFim
		oAponta:apreabodia[nIndx1][1] := SR6->R6_ABINTJ

		If nIndx1 <= Len(oAponta:apreabo)//observamos que apreabo é sempre uma copia fiel do apreabodia
			oAponta:apreabo[nIndx1][3] := nIntPriEntradPadrao
			oAponta:apreabo[nIndx1][5] := nNovaHrFim
			oAponta:apreabo[nIndx1][1] := SR6->R6_ABINTJ
		EndIf

		lCriaNovoReg := .F.

	EndIf
Next

If lCriaNovoReg

   	Aadd( oAponta:apreabodia, {SR6->R6_ABINTJ, oAPonta:achktolarr[oAponta:nChkTolArr][1], nIntPriEntradPadrao/*8*/, oAPonta:achktolarr[oAponta:nChkTolArr][1], nNovaHrFim/*10*/, 0/*obrigatorio deixar recno zerado*/} )
   	//observamos que apreabo é sempre uma copia fiel do apreabodia
   	Aadd( oAponta:apreabo,    {SR6->R6_ABINTJ, oAPonta:achktolarr[oAponta:nChkTolArr][1], nIntPriEntradPadrao/*8*/, oAPonta:achktolarr[oAponta:nChkTolArr][1], nNovaHrFim/*10*/, 0/*obrigatorio deixar recno zerado*/} )
EndIf

Return

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Put2ApontaRes³ Autor ³Marinaldo de Jesus    ³ Data ³13/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carregar os Apontamentos de  falta e atraso em aResult                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>                                	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL															 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³PonxApo														 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Put2ApontaRes( aEvesIds ) //01 -> Array com os Eventos que possuem Identificadores

Local nTotHrTrab := Len(oAponta:aHrTrab)
Local nW
Local nPos


/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Inicio da Geracao das Horas Apontadas    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
For nW := 1 To oAponta:nTotMarcTab
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Verificacao do Centro de Custo de  Acordo³
	³com o Tipo de Marcacao					  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If oAponta:lMovelFree
		If nTotHrTrab > 0
			If nW == 1
				oAponta:cCustoGrv := oAponta:aHrTrab[nW, 4]
			ElseIf nW == oAponta:nTotMarcTab
				oAponta:cCustoGrv := oAponta:aHrTrab[nTotHrTrab, 4]
			Else
				If nW%2 == 0 .AND. nTotHrTrab > 1
					oAponta:cCustoGrv := oAponta:aHrTrab[ (nTotHrTrab/2), 4]
				Else
					oAponta:cCustoGrv := oAponta:aHrTrab[ (nTotHrTrab/2)+1, 4]
				EndIf
			EndIf
		Else
			oAponta:cCustoGrv := SRA->RA_CC
		EndIf
	Else
		IF (;
				( ( nPos := aScan( oAponta:aHoras , { |x| x[8] == oAponta:aSiglaMarc[ nW ] .and. x[3] == "M" } ) ) == 0 );
				.or.;
				Empty( oAponta:aHoras[ nPos , 14 ] );
			)
			If ( oAponta:cTipoDia == "S" )
				nPos := aScan( oAponta:aHoras , { |x| x[3] == oAponta:aSiglaMarc[ nW ] } )
			Else
				nPos := aScan( oAponta:aHoras , { |x| x[3] == "M" } )
			EndiF
		EndIF
		//-- Retorna Centro de Custo Para a Gravacao do Apontamento
		IF ( nPos > 0 )
			oAponta:cCustoGrv := oAponta:aHoras[ nPos , 14 ]
			If oAponta:lApoSaida
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == oAponta:aSiglaMarc[ nW ] .and. x[CALEND_POS_DATA] == oAponta:aHoras[ nPos , 1 ] } ) ) > 0 )
					IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC )
						oAponta:cCustoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			Else
				IF ( ( nPos := aScan( oAponta:aTabCalend, { |x| x[CALEND_POS_TIPO_MARC] == oAponta:aSiglaMarc[ nW ] .and. x[CALEND_POS_DATA] == oAponta:aHoras[ nPos , 1 ] } ) ) > 0 )
					IF !Empty( oAponta:aTabCalend[ nPos , CALEND_POS_CC ] ) .and. ( oAponta:cCustoGrv == SRA->RA_CC )
						oAponta:cCustoGrv := oAponta:aTabCalend[ nPos , CALEND_POS_CC ]
					EndIF
				EndIF
			EndIf
		Else
			oAponta:cCustoGrv := SRA->RA_CC
		EndIF
	EndIF
	
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Obtem o Tipo de Marcacao a ser Gravado   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oAponta:cTipoMarc := IF( oAponta:lApTpMar , oAponta:aSiglaMarc[ nW ] , NIL )
	
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final da Geracao dos Adicionais Noturnos ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	
    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Inicio da Geracao de Faltas, Atrasos, Sai³
	³das Antecipadas/Expediente e Horas Trab. ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nPos := IF( oAponta:cFaltas == "N" , 007 , 008 )
			//-- Gera Meia Falta com Arredondamento
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:MeiaFalta						,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.F.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
								/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
								/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
								/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
								/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
								/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
								/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
					 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
								oAponta:cSeqTno						,;  //19 -> Semana/Sequencia do Turno
								__lTolHrNReal						;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							)
			
			//-- Saida antecipada
			nPos := IF( oAponta:cSaiAnt == "N" , 013 , 014 )
			oAponta:IdPreAbo( 	oAponta:dData											,;	//01 -> Data da Geracao
								oaApo:SaidaAnte											,;  //02 -> Elemento do Apontamento
								nW														,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]									,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv										,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc										,;	//06 -> Tipo de Marcacao
								.T.														,;	//07 -> True para Acumular as Horas
								oAponta:cPerSaiA										,;	//08 -> Periodo de Apuracao
								fTolerancia(oAponta:cTolaSai,nW )						,;	//09 -> Tolerancia
								"S"						 								,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	/*oAponta:cFuncaoGrv*/									,;  //11 -> Funcao a ser Gravada
								/*oAponta:cDepto	*/									,;  //12 -> Depto a ser gravado
								/*oAponta:cPosto	*/									,;  //13 -> Posto a ser gravado
								/*oAponta:cProcesso	*/									,;  //14 -> Processo a ser gravado
								/*oAponta:cPeriodo	*/									,;  //15 -> Periodo  a ser gravado
								/*oAponta:cRoteiro 	*/									,;  //16 -> Roteiro  a ser gravado
								/*oAponta:cNumPagto	*/				   					,;  //17 -> NumPagto a ser gravado
					 			oAponta:cTnoCalend				       					,;  //18 -> Turno de Trabalho
								oAponta:cSeqTno											,;  //19 -> Semana/Sequencia do Turno
								__lTolHrNReal											,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
								@oAponta:aHrNReal                                        ;  //21 -> Array com as horas nao realizadas
							)

			//-- Gera Faltas Intervalo Noturna com Arredondamento
			nPos := IF( oAponta:cFaltas == "N" , 033 , 032 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:FaltaInter					,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.F.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
								/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
								/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
								/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
								/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
								/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
								/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
					 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
								oAponta:cSeqTno						,;  //19 -> Semana/Sequencia do Turno
								.T.									;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							)

			//-- Gera Faltas Intervalo Noturna com Arredondamento
			nPos := IF( oAponta:cFaltas == "N", 035 , 034 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:FaltaIntNt					,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.F.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
								/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
								/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
								/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
								/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
								/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
								/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
					 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
								oAponta:cSeqTno						,;  //19 -> Semana/Sequencia do Turno
								.T.									;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							)

			//-- Gera Faltas com Arredondamento
			nPos := IF( oAponta:cFaltas == "N", 009 , 010 )
			oAponta:IdPreAbo( 	oAponta:dData						,;	//01 -> Data da Geracao
								oaApo:Falta							,;  //02 -> Elemento do Apontamento
								nW									,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					,;	//06 -> Tipo de Marcacao
								.F.									,;	//07 -> True para Acumular as Horas
								""									,;	//08 -> Periodo de Apuracao
								0									,;	//09 -> Tolerancia
								"F"						 			,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	/*oAponta:cFuncaoGrv*/				,;  //11 -> Funcao a ser Gravada
								/*oAponta:cDepto	*/				,;  //12 -> Depto a ser gravado
								/*oAponta:cPosto	*/				,;  //13 -> Posto a ser gravado
								/*oAponta:cProcesso	*/				,;  //14 -> Processo a ser gravado
								/*oAponta:cPeriodo	*/				,;  //15 -> Periodo  a ser gravado
								/*oAponta:cRoteiro 	*/				,;  //16 -> Roteiro  a ser gravado
								/*oAponta:cNumPagto	*/				,;  //17 -> NumPagto a ser gravado
					 			oAponta:cTnoCalend				    ,;  //18 -> Turno de Trabalho
								oAponta:cSeqTno						,;   //19 -> Semana/Sequencia do Turno
								.T.									;	//20 -> Horas nao realizadas (atraso/saida antecipada)
							)

			//-- Atrasos
			nPos := If( oAponta:cAtrasos == "N", 011 , 012 )
			oAponta:IdPreAbo( 	oAponta:dData											,;	//01 -> Data da Geracao
								oaApo:Atrasos						  					,;  //02 -> Elemento do Apontamento
								nW									   					,;  //03 -> Item do Elemento
								aEvesIds[ nPos , 02 ]				   					,;	//04 -> Codigo do Evento
								oAponta:cCustoGrv					   					,;	//05 -> Centro de Custo a ser Gravado
								oAponta:cTipoMarc					   					,;	//06 -> Tipo de Marcacao
								.T.									   					,;	//07 -> True para Acumular as Horas
								oAponta:cPerAtra										,;	//08 -> Periodo de Apuracao
								fTolerancia(oAponta:cTolaSai,nW )						,;	//09 -> Tolerancia
								"A"						 			   					,;	//10 -> Tipo de Arredondamento a Ser Utilizado
							  	/*oAponta:cFuncaoGrv*/				   					,;  //11 -> Funcao a ser Gravada
								/*oAponta:cDepto	*/				   					,;  //12 -> Depto a ser gravado
								/*oAponta:cPosto	*/				  					,;  //13 -> Posto a ser gravado
								/*oAponta:cProcesso	*/				  					,;  //14 -> Processo a ser gravado
								/*oAponta:cPeriodo	*/				  					,;  //15 -> Periodo  a ser gravado
								/*oAponta:cRoteiro 	*/				   					,;  //16 -> Roteiro  a ser gravado
								/*oAponta:cNumPagto	*/				   					,;  //17 -> NumPagto a ser gravado
					 			oAponta:cTnoCalend				      					,;  //18 -> Turno de Trabalho
								oAponta:cSeqTno											,;  //19 -> Semana/Sequencia do Turno
								__lTolHrNReal											,;	//20 -> Horas nao realizadas (atraso/saida antecipada)
								@oAponta:aHrNReal                                        ;  //21 -> Array com as horas nao realizadas
							)

    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final  da Geracao de Faltas, Atrasos, Sai³
	³das Antecipadas/Expediente e Horas Trab. ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/


    /*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Final da Geracao das Horas Extras        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Next nW

Return( NIL )

/*/{Protheus.doc} GetHrsSAvi
@author		Leandro Drumond
@since		03/11/2020
@version	1.0
@return		NIL
@obs		Função para buscar as horas de sobreaviso cadastradas para o funcionário na RRS
/*/
Static Function GetHrsSAvi(dDataIni, dDataFim, aTabCalend)
Local aArea			:= {}
Local aRet 			:= {}
Local cDow			:= ""
Local dDataAux		:= CtoD("")
Local nPos			:= 0
Local nCont			:= 0

If ChkFile("RRS") //Verifica se a tabela existe
	aArea := GetArea()
	
	DbSelectArea("RRS")
	
	If DbSeek(SRA->RA_FILIAL + SRA->RA_MAT)
		While RRS->(!Eof() .and. RRS_FILIAL + RRS_MAT == SRA->RA_FILIAL + SRA->RA_MAT)
			If RRS->RRS_DTINI > dDataFim
				Exit
			EndIf 
			If RRS->RRS_DTFIM < dDataIni
				RRS->(DbSkip())
				Loop
			EndIf
			dDataAux := Max(RRS->RRS_DTINI,dDataIni)

			While dDataAux <= RRS->RRS_DTFIM .and. dDataAux <= dDataFim
				cDow := StrZero(Dow(dDataAux),1)
				nPos := aScan(aTabCalend, {|x| x[CALEND_POS_DATA_APO] == dDataAux}) //Primeira entrada
				cCusto := If(!Empty(aTabCalend[nPos,CALEND_POS_CC]),aTabCalend[nPos,CALEND_POS_CC],SRA->RA_CC)

				//--Não gera sobreaviso para horário móvel
				If cDow $ RRS->RRS_DIAS .and. PosSPA( aTabCalend[ nPos , CALEND_POS_REGRA ] , xFilial("SPA") , "PA_HRMOVEL" , 01 ) != "S"
					If aTabCalend[nPos, CALEND_POS_TIPO_DIA] <> "S" .or. ( aTabCalend[nPos, CALEND_POS_FERIADO] .and. !aTabCalend[nPos, CALEND_POS_TRAB_FERIADO] )//Se dia não é trabalhado, define o dia inteiro como sobreaviso
						aAdd(aRet, {dDataAux, RRS->RRS_HRINI, RRS->RRS_HRFIM, "A", cCusto, aTabCalend[nPos,CALEND_POS_TURNO], aTabCalend[nPos,CALEND_POS_SEQ_TURNO]})
					ElseIf(RRS->RRS_HRINI < aTabCalend[nPos,CALEND_POS_HORA]) //Sobreaviso antes do inicio da jornada
						If (RRS->RRS_HRFIM <= aTabCalend[nPos,CALEND_POS_HORA] .And. RRS->RRS_HRFIM > 0)
							aAdd(aRet, {dDataAux, RRS->RRS_HRINI, RRS->RRS_HRFIM, "A", cCusto, aTabCalend[nPos,CALEND_POS_TURNO], aTabCalend[nPos,CALEND_POS_SEQ_TURNO]})
						Else
							aAdd(aRet, {dDataAux, RRS->RRS_HRINI, aTabCalend[nPos,CALEND_POS_HORA], "A", cCusto, aTabCalend[nPos,CALEND_POS_TURNO], aTabCalend[nPos,CALEND_POS_SEQ_TURNO]})
							nCont := 0
							aEval(aTabCalend, {|x| If(x[CALEND_POS_DATA_APO] == dDataAux, nCont++,Nil)})
							nPos += ( nCont - 1 ) //Última saída do dia

							If RRS->RRS_HRFIM > aTabCalend[nPos, CALEND_POS_HORA] .Or. RRS->RRS_HRFIM == 0
								aAdd(aRet, {dDataAux, aTabCalend[nPos, CALEND_POS_HORA], RRS->RRS_HRFIM, "D", cCusto, aTabCalend[nPos,CALEND_POS_TURNO], aTabCalend[nPos,CALEND_POS_SEQ_TURNO]})
							EndIf
						EndIf
					Else //Sobreaviso após o inicio da jornada
						nCont := 0
						aEval(aTabCalend, {|x| If(x[CALEND_POS_DATA_APO] == dDataAux, nCont++,Nil)})
						nPos += ( nCont - 1 ) //Última saída do dia
						If RRS->RRS_HRINI >= aTabCalend[nPos, CALEND_POS_HORA]
							aAdd(aRet, {dDataAux, RRS->RRS_HRINI, RRS->RRS_HRFIM, "D", cCusto, aTabCalend[nPos,CALEND_POS_TURNO], aTabCalend[nPos,CALEND_POS_SEQ_TURNO]})
						ElseIf RRS->RRS_HRFIM > aTabCalend[nPos, CALEND_POS_HORA]
							aAdd(aRet, {dDataAux, aTabCalend[nPos, CALEND_POS_HORA], RRS->RRS_HRFIM, "D", cCusto, aTabCalend[nPos,CALEND_POS_TURNO], aTabCalend[nPos,CALEND_POS_SEQ_TURNO]})
						EndIf
					EndIf
				EndIf

				dDataAux++
			EndDo
			RRS->(DbSkip())
		EndDo

		If !Empty(aRet)
			aSort(aRet,,,{| x,y | x[1] < y[1]})
		EndIf
	EndIf

	RestArea(aArea)
EndIf

Return aRet

/*/{Protheus.doc} fGeraSobreAviso
Função utilizada para calcular as horas de sobreaviso que devem ser geradas para o funcionário, abatendo eventuais horas extras realizadas.
@author		Leandro Drumond
@since		04/11/2020
@version	1.0
@return		NIL
/*/
Static Function fGeraSobreAviso(aSobreAviso,aMarcacoes)

Local cAvisIni	:= ""
Local cAvisFim	:= ""
Local dDataAux	:= cToD("//")
Local nPos1    	:= 0
Local nPos2	    := 0
Local nHoras	:= 0
Local aHoras1	:= {}
Local aHoras2	:= {}
Local nHrsTot   := 0
Local nX		:= 0
Local nY		:= 0

If ( nPos1 := aScan(aSobreAviso, {|x| x[1] == oAponta:dData}) ) > 0

	For nY := nPos1 to Len(aSobreAviso)
		
		If aSobreAviso[nY,1] > oAponta:dData
			Exit
		EndIf
		
		nPos2 := aScan(aMarcacoes, {|x| x[ AMARC_DATAAPO ] == oAponta:dData})
		
		dDataAux	:= aSobreAviso[nY,1]
		If aSobreAviso[nY,3] < aSobreAviso[nY,2] .Or. (aSobreAviso[nY,2] == 0 .And. aSobreAviso[nY,3] == 0)
			dDataAux	+= 1
		EndIf
		nHoras 		:= fCalHoras( aSobreAviso[nY,1], aSobreAviso[nY,2], dDataAux, aSobreAviso[nY,3] )
		cAvisIni	:= DataHora2Str( aSobreAviso[nY,1], aSobreAviso[nY,2] )
		cAvisFim	:= DataHora2Str( dDataAux, aSobreAviso[nY,3] )
		
		If nPos2 > 0
			For nX := nPos2 to Len(aMarcacoes)
				If aMarcacoes[nX, AMARC_DATAAPO] > oAponta:dData + 1
					Exit
				EndIf
				If "S" $ aMarcacoes[nX, AMARC_TIPOMARC] //Marcacão de saída
					If aSobreAviso[nY,4] == "A" //Sobreaviso antes do horário
						If aMarcacoes[nX-1, AMARC_DTHR2STR] >= cAvisFim .or. aMarcacoes[nX, AMARC_DTHR2STR] <= cAvisIni
							Loop
						EndIf
					Else
						If aMarcacoes[nX, AMARC_DTHR2STR] <= cAvisIni .or. aMarcacoes[nX-1, AMARC_DTHR2STR] >= cAvisFim
							Loop
						EndIf
					EndIf
					If aMarcacoes[nX, AMARC_DTHR2STR] < cAvisFim
						aHoras1 := Str2DataHora( aMarcacoes[nX, AMARC_DTHR2STR] )
					Else
						aHoras1 := Str2DataHora( cAvisFim )
					EndIf
					If aMarcacoes[nX-1, AMARC_DTHR2STR] > cAvisIni
						aHoras2 := Str2DataHora( aMarcacoes[nX-1, AMARC_DTHR2STR] )
					Else
						aHoras2 := Str2DataHora( cAvisIni )
					EndIf
					
					nHoras := SubHoras(nHoras, DataHora2Val( aHoras1[1], aHoras1[2], aHoras2[1], aHoras2[2], "H" ))
					
				EndIf
			Next nX
		EndIf

		nHrsTot := SomaHoras(nHrsTot,nHoras)

	Next nY

	If nHrsTot > 0
		
		//Gera Horas de sobreaviso
		fGeraRes(	oAponta:aResult									,;	//01 -> Array com os Resultados do Dia
					oAponta:dData									,;	//02 -> Data da Geracao
					nHrsTot											,;	//03 -> Numero de Horas Resultantes
					aEvesIds[ 044 , 02 ]							,;	//04 -> Codigo do Evento
					aSobreAviso[nPos1,5]							,;	//05 -> Centro de Custo a ser Gravado
					oAponta:cTipoMarc								,;	//06 -> Tipo de Marcacao
					.F.												,;	//07 -> True para Acumular as Horas
					""												,;	//08 -> Periodo de Apuracao
					0   											,;	//09 -> Tolerancia
					"H"							     				,;	//10 -> Tipo de Arredondamento a Ser Utilizado
					/*lSubstitui*/									,; //11 -> Substitui a(s) Hora(s) Existente(s) ( Garanto Apenas 1 DSR por Data )
					/*cFuncao	*/									,; //12 -> Funcao
					/*cDepto	*/									,; //13 -> Depto para gravacao
					/*cPosto	*/									,; //14 -> Posto para gravacao
					/*cProcesso	*/									,; //15 -> Periodo para Gravacao
					/*cRoteiro	*/									,; //16 -> Processo para Gravacao
					/*cPerApo	*/									,; //17 -> Periodo para Gravacao
					/*cNumPagto	*/ 									,; //18 -> NumPagto para Gravacao
					aSobreAviso[nPos1,6]						    ,; //19 -> Turno de Trabalho
					aSobreAviso[nPos1,7]							;  //20 -> Semana/Sequencia do Turno
				)
	EndIf
EndIf

Return Nil

/*/{Protheus.doc} fGeraSumul
@author		Marco Nakazawa
@since		17/03/2021
@version	1.0
@return		NIL
@obs		Função para gerar horas extras de intervalo 
/*/
Static Function fGeraSumul(aHorasNew,lGeroHeMv,aOnlyMarkings,nHorasCalc,nHorasTrab,aMarcIdeal,nPosLoop,nPlusLoop)
Local nIniMarc		:= 0
Local nMarcFim		:= 0
Local nMinHe		:= 0
Local nMinInt		:= 0
Local nIndceInt		:= 0
Local nTolHExt		:= 0
Local nInterPos		:= 1
Local nTolHEInt  	:= 0
Local nI			:= 0
Local nW			:= 0
Local aInterHors	:= {}

Default lGeroHeMv		:= .F.
Default aMarcIdeal		:= {}
Default aHorasNew		:= {}
Default aOnlyMarkings	:= {}
Default nHorasCalc		:= 0
Default nHorasTrab		:= 0
Default nPosLoop		:= 0
Default nPlusLoop		:= 0

lGeraSuml := .F.

// Monto um array com os horários de todos os intervalos
For nW := 1 To Len(oAponta:aHoras)
	If nInterPos > 0
		If (nInterPos := aScan(oAponta:aHoras , { |x| x[9] > 0},nInterPos)) > nIndceInt
			If nInterPos > 0
				aAdd(aInterHors,{oAponta:aHoras[nInterPos,2],SomaHoras(oAponta:aHoras[nInterPos,2],oAponta:aHoras[nInterPos,9])})
				nIndceInt := nInterPos
				nInterPos++
			EndIf
		EndIf
	EndIf
Next					

For nW := 1 To Len(aInterHors)
	nIniMarc := aInterHors[nW,1]
	nMarcFim := aInterHors[nW,2]
	For nI := 2 To Len(aOnlyMarkings) Step 2
		nPosIJ := nI + 1
		If nW == 1
			nTolHExt := fTolerancia( oAponta:cTolHex, 3 , 2,  oAponta:dData )
		ElseIf nW == 2
			nI := 4
			nTolHExt := fTolerancia( oAponta:cTolHex, 5 , 2,  oAponta:dData )
		ElseIf nW == 3
			nI := 6
			nTolHExt := fTolerancia( oAponta:cTolHex, 7 , 2,  oAponta:dData )
		EndIf
		
		// Se estiver na ultima marcação, saio do for
		If nI >= Len(aOnlyMarkings) 
			Exit
		EndIf
		
		If aOnlyMarkings[nI+1,2] > aOnlyMarkings[nI,2]
			nMinInt := SubHoras(aOnlyMarkings[nI+1,2],aOnlyMarkings[nI,2])
		Else
			nMinInt := SubHoras(aOnlyMarkings[nI,2],aOnlyMarkings[nI+1,2])
		EndIf
		
		//-- Verifico qual tolerância devo verificar para gerar a Sumula
		//-- se é por tolerância por marcação ou por perído.
		//-- Caso ambas as tolerâncias estejam cadastradas,
		//-- será utilizada a de marcação.
		If oAponta:nTolHePe == 0 .And. nTolHExt == 0
			nTolHEInt := 0
		ElseIf oAponta:nTolHePe > 0 .And. nTolHExt == 0
			nTolHEInt := oAponta:nTolHePe
		ElseIf oAponta:nTolHePe == 0 .And. nTolHExt > 0
			nTolHEInt := nTolHExt
		Else
			nTolHEInt := nTolHExt
		EndIf
		
		//-- Verifico se existe alguma HE no intervalo
		If nMinInt < SubHoras(nMarcFim,nIniMarc)
			nMinHe := SubHoras(SubHoras(nMarcFim,nIniMarc),nMinInt)
			
			//-- Validação para ver se a HE passou da tolerância, caso ultrapassou, 
			//-- altero os valores das marcações do aHorasNew para ser gerada a  
			//-- quantidade correta de acordo com a Sumula 437							
			If nMinHe > nTolHEInt 
				aAdd( aHorasNew , aClone( aOnlyMarkings[nI] ) )			//Adiciona 1a Marcacao
				aHorasNew[ Len(aHorasNew) , 02 ] := nIniMarc
				aHorasNew[ Len( aHorasNew ) , 27 ] := .T.				// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal 
				aAdd( aHorasNew , aClone( aOnlyMarkings[nI+1] ) )
				aHorasNew[ Len( aHorasNew ) , 02 ] := nMarcFim
				aHorasNew[ Len( aHorasNew ) , 27 ] := .T.				// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
				nHorasCalc := SubHoras(nHorasCalc,nMinHe)
				aMarcIdeal[ 02 ] := SomaHoras(aMarcIdeal[ 02 ],nMinHe)
				lGeroHeMv := .T.
				lGeraSuml := .T.
				Exit
			Else
				Exit
			EndIf
		Else
			Exit
		EndIf
	Next
Next

If nPosLoop > 0 .And. nPlusLoop > 0 .And. !Empty(aOnlyMarkings)
// Se ainda existir minutos a serem lançandos, crio novas posições no aHorasNew
	If nHorasCalc > 0 .And. nHorasCalc > nHorasTrab .And. SubHoras(nHorasCalc,nHorasTrab) > nTolHEInt

		// Validação para saber se preciso criar uma nova posição no aHorasNew
		If (Len(aHorasNew) % 2) == 0 
			aAdd( aHorasNew , aClone( aOnlyMarkings[nPosLoop] ) )										//Adiciona 1a Marcacao
		EndIf
		aHorasNew[ Len( aHorasNew ) , 01 ] := aMarcIdeal[ 01 ]										//Altera Data da 1a Marcacao
		aHorasNew[ Len( aHorasNew ) , 02 ] := aMarcIdeal[ 02 ]										//Altera 1a Marcacao Adicionando o nMinHe, pois já foi gerado o evento de HR no intervalo 
		aHorasNew[ Len( aHorasNew ) , 17 ] := DataHora2Str( aMarcIdeal[ 01 ] , aMarcIdeal[ 02 ] )	//Altera a String de Data/Hora
		aAdd( aHorasNew[Len(aHorasNew)] , .F.)														// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal
		aAdd( aHorasNew , aClone( aOnlyMarkings[ nPlusLoop ] ) )										
		aHorasNew[ Len( aHorasNew ) , 27 ] := .F.													// Crio uma nova posição para informar se a He é de intervalo .T. = HE Intervalo .F. = HE normal			
		If nPlusLoop < Len(aOnlyMarkings)
			nHorasCalc := nHorasTrab
		Endif
	EndIf
EndIf

Return Nil

/*/{Protheus.doc} fGeraApoAf
@author		Marco Nakazawa
@since		19/03/2021
@version	1.0
@return		NIL
@obs		Função para verificar se deve gerar horas extras ou trabalhadas quando o funcionário possui atestado medico
/*/
Static Function fGeraApoAf(nTipApoAfa)
Local lRet			:= .F.
Local nQtdHrTab		:= 0
Local nQtdHrTrab	:= 0
Local nSomaHoras	:= 0
Local nI			:= 0
Local nIPlus1		:= 0
Local nPosCalend	:= 0
Local nLenaHoras	:= 0
Local nHoraMarc		:= 0
Local aHorasTrab	:= {}
Local aTabTrab		:= {}
Local cDtHrMarc		:= ""
Local cDtHrTab		:= ""

DEFAULT nTipApoAfa	:= 0	// Tipos de apontamentos que devem ser gerados 0 = Nenhum; 1 = Horas Trabalhadas e 2 = Hora Extra

If (oAponta:lAponHeAfa .Or. oAponta:lAponHrafa) .And. nTipApoAfa == 0
	Return .T.
ElseIf !oAponta:lAponHeAfa .And. !oAponta:lAponHrafa .And. nTipApoAfa == 0
	Return .F.
EndIf

aEval( oAponta:aHoras , { |x| IF( ( x[3] != "M" ) , aAdd( aTabTrab , aClone( x ) ) , NIL ) } )
aEval( oAponta:aHoras , { |x| IF( ( x[3] == "M" ) , aAdd( aHorasTrab , aClone( x ) ) , NIL ) } )

If !Empty(aHorasTrab)
	nLenaHoras := Len(aHorasTrab)
	For nI := 1 To nLenaHoras Step 2
		nIPlus1 := nI + 1
		If nIPlus1 <= nLenaHoras
			nQtdHrTrab := __TimeSum(SomaHoras( nQtdHrTrab				,;
							fCalHoras(	aHorasTrab[ nI		, 1 ]		,;	//01 -> Data da 1a Marcacao
										aHorasTrab[ nI		, 2 ]		,;	//02 -> 1a Marcacao
										aHorasTrab[ nIPlus1	, 1 ]		,;	//03 -> Data da 2a Marcacao
										aHorasTrab[ nIPlus1	, 2 ]		,;	//04 -> Segunda Marcacao
										0								,;	//05 -> Horas Normais
										0								,;	//06 -> Horas Noturnas
										.F.								,;	//07 -> Considera Hora Noturna
										oAponta:dPerNotIni				,;	//08 -> Data do Inicio do Horario Noturno
										NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
										.F.								,;	//13 -> Apenas Acrescimo Noturno
										NIL								;	//14 -> Periodo da Hora Noturna
										)								;
								),0)
		EndIf
	Next
Else
	Return .F.	
EndIf

If !Empty(aTabTrab)	
	nLenaHoras := Len(aTabTrab)
	For nI := 1 To nLenaHoras Step 2
		nIPlus1 := nI + 1
		If nIPlus1 <= nLenaHoras
			nQtdHrTab := __TimeSum(SomaHoras( nQtdHrTab				,;
							fCalHoras(	aTabTrab[ nI		, 1 ]		,;	//01 -> Data da 1a Marcacao
										aTabTrab[ nI		, 2 ]		,;	//02 -> 1a Marcacao
										aTabTrab[ nIPlus1	, 1 ]		,;	//03 -> Data da 2a Marcacao
										aTabTrab[ nIPlus1	, 2 ]		,;	//04 -> Segunda Marcacao
										0								,;	//05 -> Horas Normais
										0								,;	//06 -> Horas Noturnas
										.F.								,;	//07 -> Considera Hora Noturna
										oAponta:dPerNotIni				,;	//08 -> Data do Inicio do Horario Noturno
										NIL								,;	//09 -> <@>Horas de Acrescimo Noturno
										oAponta:nIniHnot				,;	//10 -> Inicio do Horario Noturno
										oAponta:nFimHnot				,;	//11 -> Final do Horario Noturno
										oAponta:nMinHnot				,;	//12 -> Minutos do Horario Noturno
										.F.								,;	//13 -> Apenas Acrescimo Noturno
										NIL								;	//14 -> Periodo da Hora Noturna
										)								;
								),0)
		EndIf
	Next
Else
	Return .F.	
EndIf

nLenaHoras := Len(aHorasTrab)

nPosCalend := If(nLenaHoras > 0, aScan(oAponta:aTabcalend, {|x| x[CALEND_POS_DATA_APO] == aHorasTrab[nLenaHoras,28]}),0)

If nPosCalend > 0 .And. (oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_TIPO_ORIG_DIA] $ "C*D" .Or. oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_FERIADO])
	If oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_FERIADO]
		oAponta:cTipoDia := "F"
	Else
		oAponta:cTipoDia := oAponta:aTabcalend[oAponta:nPosCalend,CALEND_POS_TIPO_ORIG_DIA]
	EndIf
Else
	oAponta:cTipoDia := "S"
EndIf

If nTipApoAfa == 1 .And. oAponta:lAponHrafa .And. oAponta:cTipoDia == "S" 
	oAponta:aHrTrab := {}
	oAponta:aHrTrab := aClone(aHorasTrab)
	oAponta:nHrsPgs := nQtdHrTrab
	oAponta:cTipoDia := "S"

	nLenaHoras := Len(aHorasTrab)

	If (nPosCalend := aScan(oAponta:aTabcalend, {|x| x[CALEND_POS_DATA_APO] == aHorasTrab[nLenaHoras,28] + 1})) > 0
		cDtHrMarc	:= DataHora2Str( oAponta:aHrTrab[nLenaHoras,1] , oAponta:aHrTrab[nLenaHoras,2] )
		
		If nPosCalend > 1
			cDtHrTab	:= DataHora2Str( oAponta:aTabcalend[nPosCalend-1,CALEND_POS_DATA] , oAponta:aTabcalend[nPosCalend-1,CALEND_POS_HORA] )
			If cDtHrMarc >= cDtHrTab
				oAponta:aHrTrab[nLenaHoras,1]	:= oAponta:aTabcalend[nPosCalend-1,CALEND_POS_DATA]
				oAponta:aHrTrab[nLenaHoras,2]	:= oAponta:aTabcalend[nPosCalend-1,CALEND_POS_HORA]
				oAponta:aHrTrab[nLenaHoras,17]	:= DataHora2Str(oAponta:aTabcalend[nPosCalend-1,CALEND_POS_DATA],oAponta:aTabcalend[nPosCalend-1,CALEND_POS_HORA])
				oAponta:aHrTrab[nLenaHoras,25]	:= oAponta:aHrTrab[1,17]
			EndIf
		Else
			cDtHrTab	:= DataHora2Str( oAponta:aTabcalend[nPosCalend,CALEND_POS_DATA] , oAponta:aTabcalend[nPosCalend,CALEND_POS_HORA] )
			If cDtHrMarc >= cDtHrTab
				oAponta:aHrTrab[nLenaHoras,1]	:= oAponta:aTabcalend[nPosCalend,CALEND_POS_DATA]
				oAponta:aHrTrab[nLenaHoras,2]	:= oAponta:aTabcalend[nPosCalend,CALEND_POS_HORA]
				oAponta:aHrTrab[nLenaHoras,17]	:= DataHora2Str(oAponta:aTabcalend[nPosCalend,CALEND_POS_DATA],oAponta:aTabcalend[nPosCalend,CALEND_POS_HORA])
				oAponta:aHrTrab[nLenaHoras,25]	:= oAponta:aHrTrab[1,17]
			EndIf
		EndIf
		lRet := .T.
	Else
		lRet := .F.
	EndIf
ElseIf nTipApoAfa == 2 .And. oAponta:lAponHeAfa
	
	If oAponta:cTipoDia <> "S"
		nQtdHrTab := 0
	EndIf
	
	If nQtdHrTrab > nQtdHrTab
		oAponta:aHrTrab := {}

		nLenaHoras := Len(aHorasTrab)

		If (nPosCalend := aScan(oAponta:aTabcalend, {|x| x[CALEND_POS_DATA_APO] == aHorasTrab[nLenaHoras,28] + 1})) > 0
			aAdd(oAponta:aHrTrab , aClone(aHorasTrab[nLenaHoras]))
			aAdd(oAponta:aHrTrab , aClone(aHorasTrab[nLenaHoras]))

			If nPosCalend > 1
				nSomaHoras				:= fHtoNS(SubHoras(nQtdHrTrab,nQtdHrTab))
				nHoraMarc				:= fDHtoNS(oAponta:aHrTrab[1,1],oAponta:aHrTrab[1,2])
				
				oAponta:aHrTrab[1,1]	:= fNStoDH(nHoraMarc - nSomaHoras,"D")
				oAponta:aHrTrab[1,2]	:= fNStoDH(nHoraMarc - nSomaHoras,"H")
				oAponta:aHrTrab[1,17]	:= DataHora2Str(oAponta:aHrTrab[1,1],oAponta:aHrTrab[1,2])
				oAponta:aHrTrab[1,25]	:= oAponta:aHrTrab[1,17]

				oAponta:aHrTrab[2,17]	:= DataHora2Str(oAponta:aHrTrab[1,1],oAponta:aHrTrab[1,2])
				oAponta:aHrTrab[2,25]	:= oAponta:aHrTrab[2,17]
			Else
				nSomaHoras				:= fHtoNS(SubHoras(nQtdHrTrab,nQtdHrTab))
				nHoraMarc				:= fDHtoNS(oAponta:aTabcalend[nPosCalend,CALEND_POS_DATA],oAponta:aTabcalend[nPosCalend,CALEND_POS_HORA])
				
				oAponta:aHrTrab[1,1]	:= fNStoDH(nHoraMarc - nSomaHoras,"D")
				oAponta:aHrTrab[1,2]	:= fNStoDH(nHoraMarc - nSomaHoras,"H")
				oAponta:aHrTrab[1,17]	:= DataHora2Str(oAponta:aHrTrab[1,1],oAponta:aHrTrab[1,2])
				oAponta:aHrTrab[1,25]	:= oAponta:aHrTrab[1,17]

				oAponta:aHrTrab[2,1]	:= oAponta:aTabcalend[nPosCalend,CALEND_POS_DATA]
				oAponta:aHrTrab[2,2]	:= oAponta:aTabcalend[nPosCalend,CALEND_POS_HORA]
				oAponta:aHrTrab[2,17]	:= DataHora2Str(oAponta:aTabcalend[nPosCalend,CALEND_POS_DATA],oAponta:aTabcalend[nPosCalend,CALEND_POS_HORA])
				oAponta:aHrTrab[2,25]	:= oAponta:aHrTrab[1,17]
			EndIf
			lRet := .T.
		EndIf
	Else
		lRet := .F.
	EndIf
ElseIf nTipApoAfa == 3 .And. oAponta:lAponHeAfa .And. oAponta:lAponHrafa
	oAponta:aHrTrab := {}
	oAponta:aHrTrab := aClone(aHorasTrab)
	lRet := .T.
Else
	lRet := .F.
EndIf

If !Empty(oAponta:aHrTrab)
	aEval(oAponta:aHrTrab, {|x| x[4] := x[14]})
EndIf

Return lRet

/*/{Protheus.doc} AjustaHNot
@author		Emerson Grassi
@since		27/05/2021
@version	1.0
@return		NIL
@obs		Função para ajustar diferença no Adicional Noturno intervalo 
/*/
Static Function AjustaHNot(aResult)
Local nRes 		:= 0
Local nResults 	:= 0
Local nAux1		:= 0
Local nAux2		:= 0

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Ajusta hora quando tem diferença no arredondamento no calculo do Adicional Noturno ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
IF ( ( nResults := Len( aResult ) ) > 0 )
	For nRes := 1 To nResults
		If aResult[ nRes, 2] == aEvesIds[ 004 , 02 ]
			nAux1 := NoRound(aResult[ nRes , ARESULT_HORAS ], 2)
			nAux2 := Int(aResult[ nRes, ARESULT_HORAS])
			If  ( nAux1 - nAux2 )  <= 0.01
				aResult[ nRes , ARESULT_HORAS ] := nAux2
			EndIf
		EndIf
	Next nRes
EndIF	
Return( NIL )

/*/{Protheus.doc} GetCodCCT
Retornar o código da Convenção Coletiva vinculado as marcações do dia
@type  Function
@author Cícero Alves
@since 15/08/2022
@return cCodCCT, caractere, Código da CCT
/*/
Function GetCodCCT()
	DEFAULT cCodCCT := ""
Return cCodCCT

/*/{Protheus.doc} GetFilCCT
Retornar a filial da Convenção Coletiva vinculado as marcações do dia
@type  Function
@author Cícero Alves
@since 15/08/2022
@return cFilCCT, caractere, Código da CCT
/*/
Function GetFilCCT()
	DEFAULT cFilCCT := ""
Return cFilCCT
