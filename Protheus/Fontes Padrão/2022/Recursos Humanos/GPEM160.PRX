#INCLUDE "PROTHEUS.CH"
#INCLUDE "GPEM160.CH"

Static lAutomato := IsBlind()	//	-- Variável para controlar se a execução é via Robô
Static lCtrlTit		:= !Empty(GetNewPar("MV_BTITFOL", "" )) .And. !Empty(GetNewPar("MV_BTITADT", "" )) .And. RJ1->(ColumnPos( "RJ1_ROTEIR")) > 0 .And. RJ1->(ColumnPos( "RJ1_PROCES")) > 0 .And. RJ1->(ColumnPos( "RJ1_TIPO")) > 0 

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ GPEM160  ³ Autor ³ Equipe Advanced RH          ³ Data ³ 03/05/2013 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Cancelamento de Calculos                                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ GPEM160                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ FNC          ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Cecilia     ³03/05/13³RQ0119        ³M12RH01-Unificação da Folha de Pagamento  ³±±
±±³            ³        ³              ³Cancelamento de Calculo                   ³±± 
±±³Raquel Hager³04/11/13³M12RH01 RQ4502³Liberacao da funcao fPeriodo em funcao de ³±±
±±³            ³        ³              ³uso no grupo de perguntas GP570F4.        ³±±
±±³Mariana M.  ³23/10/15³TTR536        ³Ajuste na função Gpm160Processa para que  ³±±
±±³            ³        ³              ³quando a função Gpm160SRC for chamada, irá³±±
±±³            ³        ³              ³buscar a verba informada nos parâmetros.  ³±±
±±³            ³        ³              ³Declarada a variável cModFol para verifi- ³±±
±±³            ³        ³              ³cação do parâmetro MV_MODFOL e alterado o ³±±
±±³            ³        ³              ³conteúdo da variável lCanTod para .F.	  ³±±
±±³Renan Borges³28/12/15³TUCILV        ³Ajuste para filtrar o roteiro no cancela- ³±±
±±³            ³        ³              ³mento de calculo dos valores gerados.     ³±±
±±³Raquel Hager³14/01/16³TUFXQ2        ³Ajuste para exclusao de dados da SRK.     ³±±
±±³P. Pompeu   ³17/06/16³TVKQ43        ³Exclusão em Lote utilizando o campo DTREF ³±±
±±³Gabriel A.  ³25/05/16³TVDGYO        ³Ajuste para cancelar o cálculo de         ³±±
±±³            ³        ³              ³benefícios corretamente.                  ³±±
±±|Esther V.   |17/08/16|    TVVHM2    |Criacao das variaveis cNOTCanRGB, cNOTCanSRC e cNOTCanSRK |±±
±±|            |        |              |para uso no PE GPROXFUN a fim de determinar verbas que nao|±±
±±|            |        |              |poderao ser deletadas durante cancelamento.               |±±
±±|            |        |              |Ajustado validacao de roteiro pelo tipo em vez de utilizar|±±
±±|            |        |              |nome padrao.                                              |±±
±±|WinstonCosta|06/11/18|              |Preparação do fonte para funcionar com o Robô             |±±
±±|WinstonCosta|03/01/19|              |Retirada do trecho AS/400                                 |±±
±±ÈÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function GPEM160

Local aSays			:= {}
Local aButtons		:= {}
Local cPerg			:= "GPEM160A"
Local nOpcA			:= 0.00

Private aArea		:= GetArea()
Private aAreaSRA	:= SRA->( GetArea() )
Private cTabela		:= "" 
Private cCadastro	:= OemToAnsi(STR0001) //"Cancelamentos de Calculos"
Private cCanPro    	:= ""
Private cCanRot    	:= ""
Private cCanPer    	:= ""
Private cCanNpg    	:= ""
Private cCanVrb    	:= ""
Private cNOTCanRGB 	:= ""
Private cNOTCanSRC 	:= ""
Private cNOTCanSRK 	:= ""
Private cCanFil    	:= ""
Private cCanMat    	:= ""
Private cCanTip2   	:= ""
Private cProcesso  	:= ""
Private lCanTod    	:= .F.
Private nTipCanc   	:= 0 
Private cModFol		:= SuperGetMv( "MV_MODFOL", .F., "1" )

private cFilRCJ 	:= ""

aAdd(aSays,OemToAnsi(STR0002) )  //"Este programa exclui as verbas na movimenta‡Æo mensal."
aAdd(aSays,OemToAnsi(STR0003) )  //"Informe o tipo de calculo e as verbas para exclusÆo ou digite [*] ( Asterisco ) "
aAdd(aSays,OemToAnsi(STR0004) )  //"para excluir todas as verbas do tipo de calculo escolhido."
aAdd(aButtons, { 5,.T.,{|| Pergunte(cPerg,.T. ) } } )
aAdd(aButtons, { 1,.T.,{|o| nOpcA := 1,IF(gpconfOK(),FechaBatch(),nOpcA:=0) }} )
aAdd(aButtons, { 2,.T.,{|o| FechaBatch() }} )

//	-- Testando se a execução é via Robô
IF !lAutomato
	FormBatch( cCadastro, aSays, aButtons )
Else
	nOpcA := 1
Endif

IF nOpcA == 1
	Processa({|lEnd| GPM160Processa( cPerg ),STR0001})  //"Cancelamentos de Calculos"
Endif

//Restaura os Dados de Entrada						   	        
RestArea( aAreaSRA ) 
RestArea( aArea )
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpm160Processa	³Autor³Equipe Advanced RH ³ Data ³27/02/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Processar o Cancelamento de Calculo no SIGAGPE    		   	   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpm160Processa()											         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM160                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL															             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpm160Processa( cPerg )
Local aVincs	 := {}
Local aAviso	 := {}
Local aPerAux 	 := {}
Local cFilDe     := ""
Local cFilAte    := ""
Local cCcDe      := ""
Local cCcAte     := ""
Local cMatDe     := ""
Local cMatAte    := ""
Local cCategoria := ""
Local cSituacao  := ""
Local cCpfAux 	 := ""
Local cSeqIni	 := ""
Local nX		 := 0.00
Local nPos	     := 0
Local cCodigo    := ""
Local cSitQuery	 := ""
Local cCatQuery	 := ""
Local cMatDel	 := ""
Local lAvisoBlq  := .T.
Local lAvisoPON  := .T.
Local lBloqPON	 := ("3" $ SuperGetMv( "MV_BLOQPON",,"" ))
Local cAcessaSRA := &( " { || " + IF( Empty( cAcessaSRA := ChkRH( "GPEM160" , "SRA" , "2" ) ) , ".T." , cAcessaSRA ) + " } " )
Local cFilAnter	 := "_cFilAnter"
Local lFilValid  := .T.
Local lValidar	 := .T.
Local lBloqPer   := .F.
Local lGpRoxFun  := ExistBlock("GPROXFUN")
Local cRotOrd	 := fGetCalcRot('1') +"/"+ fGetCalcRot('9') +"/"+ fGetCalcRot('K')
Local cRotBen	 := (fGetCalcRot('8') +"/"+fGetCalcRot('D')+"/"+fGetCalcRot('E')+"/"+fGetCalcRot('C')+"/"+fGetCalcRot('I'))
Local nQtdMat	 := 0
Local aOfusca		:= If(FindFunction('ChkOfusca'), ChkOfusca(), { .T., .F. })//[2]Ofuscamento
Local aFldRel		:= Iif( aOfusca[2], FwProtectedDataUtil():UsrNoAccessFieldsInList( {"RA_NOME"} ), {} )
Local lOfusca		:= Len(aFldRel) > 0
Local aProcessoLog	:= {}
Local nPosLog		:= 0

Private aMatSRC	 	:= {}
Private cInicio 	:= 'RA_FILIAL + RA_PROCES + RA_MAT'
Private dDtRefDe	:= Nil
Private dDtRefAte	:= Nil
Private lDataRef	:= Nil
Private lDtRefSRK	:= (aScan(SRK->(DbStruct()),{|x|AllTrim(x[1]) == "RK_DTREF"}) > 0) 
Private lVerMultv   := .F.

SetMnemonicos(,,.T.)

If !lAutomato
	lVerMultv := If ( Type("P_MULTV") == "U",.F.,P_MULTV)
EndIf

// VerIFica as perguntas selecionadas                           
Pergunte( cPerg , .F. )

// Carregando as Perguntas                                      
cCanPro	  	:= 	mv_par01	//Processo
cCanRot	  	:= 	mv_par02	//Roteiro
cCanPer	  	:= 	mv_par03	//Periodo
cCanNpg	  	:=	mv_par04	//Numero de Pagamento
nTipCanc    := 	mv_par05	//Tipo de Cancelamento - Informado/Gerado/Calculado/Ponto Eletronico/Valroes Futuros
cCodigo     :=  mv_par06	//Informe as verbas
cFilDe      :=  mv_par07	//Filial De
cFilAte     :=  mv_par08	//Filial Ate
cCcDe       :=  mv_par09	//Centro de Custo De
cCcAte      :=  mv_par10	//Centro de Custo Ate
cMatDe      :=  mv_par11	//Matricula De
cMatAte     :=  mv_par12	//Matricula Ate
cSituacao   :=  mv_par13 	//Situacoes	
cCategoria  :=  mv_par14 	//Categorias
dDtRefDe	:=	mv_par15	// Data de referencia inicial
dDtRefAte	:=	mv_par16	// Data de referencia final
lDataRef	:=  IIF(! Empty(dDtRefAte), .T., .F.)

// Ponto de Entrada para checar as perguntas de calculo.        
If ExistBlock("GPCHKPER")
	If !ExecBlock("GPCHKPER",.F.,.F.)
		Return
	EndIf
EndIf

//Não exclui férias e rescisão através dessa rotina
If fGetTipoRot( cCanRot ) $ "3*4"
	//"Atenção" ### "Não é permitida a exclusão desse roteiro através dessa rotina." ### "Usar as rotinas de cálculo para efetuar o cancelamento"
	Help( ,, OemToAnsi(STR0006),, OemToAnsi(STR0019), 1, 0, NIL, NIL, NIL, NIL, NIL, {OemToAnsi(STR0020)}) 
	Return
EndIf

// Monta String para Testar as Verbas                           
cCanVrb := AllTrim( cCanVrb )
For nX = 1 To 30 Step 3 
	cCanVrb += SubStr(cCodigo,nX,3) 
	cCanVrb += "/"
Next nX

If "*" $ cCanVrb
	lCanTod := .T.
EndIF 

cCanVrb := STRTRAN(cCanVrb, "   /", NIL) 
cCanVrb := Substr(cCanVrb, 1, Len(cCanVrb) -1 )
cCanVrb := STRTRAN(cCanVrb, "/", "','")

// Retorna os Tipos para o Cancelamento de Calculo	            
cCanTip2 := RetTipo2(nTipCanc) 

//Para o tipo calculado, sempre referenciar a tabela SRC
//desde que nao tenha filtro de verbas, se tiver
//cancelara o processamento
If cCanTip2 == "C" .And. cModFol == "2" .And. !lCanTod
	If !gpConfOk(OemToAnsi(STR0005)) //"Para o tipo calculado as verbas selecionadas devem ser [*] ( Asterisco )"
		GPEM160() 
		Return( NIL )
	Else
		lCanTod := .T.
	EndIf
EndIf  

//O Tipo calculado fica sempre no SRC
If nTipCanc == 3 //calculados
	//If cCanRot $ "VTR/VRF/VAL/PLA/BEN" //para excluir os valores integrados para folha
    If cCanRot $ (fGetCalcRot('8') +"/"+fGetCalcRot('D')+"/"+fGetCalcRot('E')+"/"+fGetCalcRot('C')+"/"+fGetCalcRot('I'))
		cTabela  := "RGB"
    Else
        cTabela  := "SRC"
	 EndIf  
ElseIf nTipCanc == 5 //valores futuros
	cTabela  := "SRK"
Else //informados/gerados/ponto eletronico
	cTabela  := "RGB"
EndIf

// Valida existência de Detalhes de Títulos por Roteiro (RJ1)
If  lCtrlTit .And. cTabela == "SRC" 
	If  fExisTitFA(cCanPro,cCanPer,cCanRot,cCanNpg,@aProcessoLog) 
		If Len( aProcessoLog ) > 0	
			// "Atenção"###"Ação cancelada - título(s) encontrado(s) sobre esse cálculo."###"Consulte os Títulos listados no log." 
			Help( ,, OemToAnsi(STR0006),, OemToAnsi(STR0016), 1, 0, NIL, NIL, NIL, NIL, NIL, {OemToAnsi(STR0017)}) 			
			// Imprime Log
			fCtrTitLg(aProcessoLog)
			Return (.F.)
		EndIf
	EndIf
EndIf

cSitQuery	:= ""
For nX:=1 to Len(cSituacao)
	cSitQuery += "'"+Subs(cSituacao,nX,1)+"'"
	If ( nX+1 ) <= Len(cSituacao)
		cSitQuery += "," 
	Endif
Next nX     

cCatQuery	:= ""
For nX:=1 to Len(cCategoria)
	cCatQuery += "'"+Subs(cCategoria,nX,1)+"'"
	If ( nX+1 ) <= Len(cCategoria)
		cCatQuery += "," 
	Endif
Next nX

cSitQuery	:= "%" + cSitQuery + "%"
cCatQuery	:= "%" + cCatQuery + "%"

cFilAux := "% "
cFilAux += " SRA.RA_PROCES = '" + cCanPro + "' AND "
cFilAux += " SRA.RA_FILIAL >= '" + cFilDe + "' AND "
cFilAux += " SRA.RA_FILIAL <= '" + cFilAte + "' AND "
cFilAux += " SRA.RA_CC >= '" + cCcDe + "' AND "
cFilAux += " SRA.RA_CC <= '" + cCcAte + "' AND "
cFilAux += " SRA.RA_MAT >= '" + cMatDe + "' AND "
cFilAux += " SRA.RA_MAT <= '" + cMatAte + "' %"

DbSelectArea("SRA")
DbSetOrder(1)

BeginSql alias "CNTSRA"
	SELECT COUNT(*) AS CONTADOR
	FROM %table:SRA% SRA
	WHERE %exp:cFilAux% AND 
			SRA.RA_SITFOLH IN (%exp:Upper(cSitQuery)%) AND
			SRA.RA_CATFUNC IN (%exp:Upper(cCatQuery)%) AND
			SRA.%NotDel%
EndSql

// Carrega Regua Processamento	                                  
ProcRegua( CNTSRA->(CONTADOR) )

CNTSRA->( dbCloseArea() )

BeginSql alias "SRAAUX"
	SELECT RA_FILIAL, RA_MAT
	FROM %table:SRA% SRA
	WHERE %exp:cFilAux% AND 
			SRA.RA_SITFOLH IN (%exp:Upper(cSitQuery)%) AND
			SRA.RA_CATFUNC IN (%exp:Upper(cCatQuery)%) AND
			SRA.%NotDel%
	ORDER BY SRA.RA_FILIAL, SRA.RA_MAT
EndSql

While SRAAUX->( !Eof() )

	SRA->(DbSeek(SRAAUX->(RA_FILIAL+RA_MAT)))

	If Empty(aPerAux)
		DbSelectArea("SRY")
		SRY->(DbSetOrder(1))

		//Se roteiro deve ser integrado, verifica se houve integração e, em caso positivo, não efetua o a exclusão.
		If SRY->(DbSeek(xFilial("SRY",SRA->RA_FILIAL) + cCanRot)) .and. SRY->RY_INTEGRA == "1"
			fGetPerAtual( @aPerAux, xFilial("RCH"), cCanPro, cCanRot )
			If !Empty(aPerAux) .and. !Empty(aPerAux[1,10])
				//"Atenção" ### "O período selecionado já foi integrado." ###"Efetue o cancelamento da integração antes de excluir o cálculo"
				Help(,,OemToAnsi(STR0006),,OemToAnsi(STR0021),1,0, Nil, Nil, Nil, Nil, Nil, { OemToAnsi(STR0022) } )
				Return
			EndIf
		Else 
			aPerAux := {"X"}
		EndIf
	EndIf

	// PE para desprezar funcionario, caso retorne .t.   
	If lGpRoxFun
		If Execblock("GPROXFUN",.F.,.F.)
			SRAAUX->( dbSkip() )
			IncProc()
			Loop      	
		EndIf
	EndIf               

    If cFilAnter != SRA->RA_FILIAL
		If !Empty(cMatDel)
			cMatDel := STRTRAN(cMatDel, "/", "','")
			cCanMat := cMatDel
			Gpm160SRC()
			cMatDel := ""
			nQtdMat := 0
		EndIf
		cFilAnter := SRA->RA_FILIAL
		lValidar  := .T.
		lFilValid := .T.			
	EndIf
	
	//Tratamento para evitar estouro de string na query oracle so aceita ate 1000 no IN
	If nQtdMat > 900
		cMatDel := STRTRAN(cMatDel, "/", "','")
		cCanMat := cMatDel
		Gpm160SRC()
		cMatDel := ""
		nQtdMat := 0
	EndIf

	If lValidar
		lValidar  := .F.
		If !( SRA->RA_FILIAL $ fValidFil() ) .or. !Eval( cAcessaSRA )
			lFilValid := .F.
			SRAAUX->( dbSkip() )
			IncProc()
			Loop
		EndIf	
	    //Verifica se o calculo esta Liberado
		If !( lFilValid := fVldAccess( SRA->RA_FILIAL, Stod( cCanPer + "01" ), cCanNpg, lAvisoBlq, cCanRot, "2" ) )
		    lAvisoBlq := .F.
		    SRAAUX->( dbSkip() )
			IncProc()
			Loop
		EndIf
	ElseIf !lFilValid
		 lAvisoBlq := .F.
		 SRAAUX->( dbSkip() )
		 IncProc()
		 Loop
	EndIf
		
	// Incrementa Regua Processamento	                          
	IncProc(SRA->RA_FILIAL+" - "+SRA->RA_MAT+ If(lOfusca, "", " - "+SRA->RA_NOME))

	cCanFil := SRA->(RA_FILIAL) 
	cCanMat := SRA->(RA_MAT)
	lBloqPer := .F. //se tiver algum tipo de bloqueio, não exclui

	//?-Bloqueia Verbas vindas do SIGAPON
	If lBloqPON .And. Upper(cCanTip2) == "E"
	    Iif( lAvisoPON, fVldAltPon( "2" ), Nil )	//?-Apresenta Mensagem
	    lAvisoPON := .F.
	    lBloqPer  := .T.
	EndIf
	
	If !lBloqPer
	    If nTipCanc == 3 //calculados
	        //If cCanRot $ "VTR/VRF/VAL/PLA/BEN" //para excluir os valores integrados para folha
	        If cCanRot $ cRotBen
	            If cCanRot == fGetCalcRot('C')//se roteiro for de PLA - plano de saude, excluir tabela RHR    
	                Gpm160Plas()
	            ElseIf cCanRot == fGetCalcRot('I') // se BEN - Outros Beneficios
	            	Gpm160Out()
	            Else //se roteiro for de Vale Transporte/Vale Refeicao/Vale Alimentacao limpar a tabela SR0 
	                Gpm160Bene()
	            EndIf   
	            //limpar tambem a tabela RGB
	            Gpm160RGB()
		     Else
		     	cMatDel += If(Empty(cMatDel),SRA->(RA_MAT),'/' + SRA->(RA_MAT))
		     	nQtdMat++
				If lVerMultv
					cTipoRot := fGetTipoRot(cCanRot)
					cRoteiro := cCanRot
					cPeriodo := cCanPer
					cNumPag  := cCanNpg
					If Empty(aVincs) .or. ( nPos := aScan( aVincs, {|x| x[1] + x[2] == SRA->RA_FILIAL + SRA->RA_MAT }) ) == 0
						fLoadMultv(.F., .T., @aVincs)
					Else
						aVincs[nPos,4] := "S"
					EndIf
				EndIf
           EndIf  
	    ElseIf nTipCanc == 5 //valores futuros
	        Gpm160Futr()
	    Else //informados/gerados/ponto eletronico
			Gpm160SRC()
	    	If !(cCanRot $ cRotOrd) //Se não for folha nem autonomo, excluir lançamentos da RGB
	    		Gpm160RGB()
	    	EndIf
	    EndIf
   EndIf

	// Proximo Funcionario				 					     
	SRAAUX->( dbSkip() )
	
End While

If !Empty(cMatDel)
	cMatDel := STRTRAN(cMatDel, "/", "','")
	cCanMat := cMatDel
	Gpm160SRC()
EndIf

SRAAUX->( dbCloseArea() )

If cTabela == "RGB"
	 DbSelectArea("RCH")
	 DbSetOrder(1) //RCH_FILIAL+RCH_PROCES+RCH_PER+RCH_NUMPAG+RCH_ROTEIR
	 If DbSeek(xFilial("RCH")+cCanPro+cCanPer+cCanNpg+cCanRot)
	     RecLock("RCH",.F.)
		  RCH->RCH_DTINTE  := Ctod("  /  /    ")
		  RCH->( MsUnlock() )
	 EndIf
EndIf

If Len(aVincs) > 0 .Or. Len(aMatSRC) > 0
	aSort( aVincs ,,, { |x,y| x[5] + x[1] + x[2] + x[3] < y[5] + y[1] + y[2] + y[3] } )
	For nX := 1 to Len(aVincs)
		If cCpfAux <> aVincs[nX,5]
			cCpfAux := aVincs[nX,5]
			cSeqIni := ""
		EndIf
		If aVincs[nX,4] == "S" .and. ( Empty(cSeqIni) .or. Soma1(cSeqIni) == aVincs[nX,3] )
			cSeqIni := aVincs[nX,3]
		ElseIf !Empty(cSeqIni) 
			If aVincs[nX,3] > cSeqIni
				aAdd(aAviso, {aVincs[nX,1] + " - " + aVincs[nX,2]})
			EndIf
		EndIf 
	Next nX
	If Len(aAviso) > 0 .Or. Len(aMatSRC) > 0

		If lCtrlTit .And. Len( aProcessoLog ) > 0
			aAdd(aAviso, "")
		
			nPosLog := Len( aAviso )
			For nX := 1 To Len( aProcessoLog )
				aAdd( aAviso[ nPosLog ], aProcessoLog[ nX ] )
			Next nX
		
		EndIf

		MsAguarde( { || fMakeLog( {aAviso, aMatSRC}, {STR0014, STR0018}, NIL, NIL, FunName(), STR0015 ) } , STR0015 ) //"Log de ocorrências do cancelamento de cálculo"|"Os seguintes funcionários possuem múltiplos vínculos e precisam ser recalculados pois podem ter utilizado os dados excluídos quando foram calculados."|"Os seguintes funcionários precisam ser recalculados pois houve exclusão de todas as verbas do cálculo."
	EndIf 
ElseIf lCtrlTit .And. Len( aProcessoLog ) > 0		
	// Imprime Log
	fCtrTitLg(aProcessoLog)
EndIf 

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³RetTipo2		³Autor³Marinaldo de Jesu  ³ Data ³27/02/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna os Tipos Para Cancelamento de Calculo     		   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³RetTipo2(nTipCanc)                           				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM160                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³cTipo2														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function RetTipo2(nTipCanc)
Local cTipo2 := ""

// Verifica os Tipos para Exclusa						     
IF nTipCanc == 1			//Informados
	cTipo2 := "I"				
ElseIF nTipCanc == 2		//Gerados
	cTipo2 := "G"				
ElseIF nTipCanc == 3		//Calculados
	cTipo2 := "C"			
ElseIF nTipCanc == 4		//Integracao do Ponto Eletronico
	cTipo2 := "E"
ElseIF nTipCanc == 5		//Valores Futuros
	cTipo2 := " "
EndIF
Return( cTipo2 )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fProcesso		   ³Autor³                   ³ Data ³          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Atualiza a variavel cProcesso.                    		     	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fProcesso(Variavel com Processo)		       				   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM160                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³.t.   														             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fProcesso(cVar)
	cProcesso := cVar
	Gpm020SetVar()
Return (.T.)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fPeriodo		   ³Autor³                   ³ Data ³          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Atualiza a variavel cPeriodo                      		   	   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fPeriodo(Variavel com Periodo)               				   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM160                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³.t.   														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fPeriodo(cVar)
	cPeriodo := cVar           
Return (.T.)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpem160Rot³Autor³Equipe Inovacao RH         ³Data³30/08/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Validar o Roteiro digitado na Consulta Padrao			    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM160			                  	                       	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpem160Rot( cRtPro, cRtPer, cRtNpg, cRtVarRet, lPergRot, lTelaCalc )
Local aPerAtual	:= {}
Local cFilRCH
Local lRet     	:= .T.
Local lFound 	:= .F.
Local cTipoRot 	:= fGetTipoRot( &cRtVarRet )

DEFAULT lPergRot  := .T.
DEFAULT lTelaCalc := .F.

// Variavel pertence aos mnemonicos. Para evitar erros no sistema para os paises que nao possuem esse mnemonico cadastrado
If Type( "lDissidio" ) == "U"
	lDissidio := .F.
EndIf

If lTelaCalc
	If !fGetPerAtual( @aPerAtual, cFilRCJ, cRtPro, &cRtVarRet )
		MsgInfo( OemToAnsi(STR0007) , OemToAnsi(STR0006) ) // "Nenhum Periodo Ativo para este Roteiro!" ## "Atencao"
		Return(.F.)
	Else
		mv_par03 := aPerAtual[1,1]
		mv_par04 := aPerAtual[1,2]
		Return(.T.)
	EndIf
EndIf

Begin Sequence

 	If Empty( cRtPro ) .Or. !( lRet := ExistCpo( "SRY" ) )
		lRet := .F.
		Break
	EndIf

	cFilRCH	:= xFilial("RCH")

	DbSelectArea("RCH")
	RCH->( dbsetOrder( Retorder( "RCH" , "RCH_FILIAL+RCH_PROCES+RCH_PER+RCH_NUMPAG+RCH_ROTEIR" ) ) )
	If cTipoRot <> "9"   //Roteiro Diferente de Autonomos
		RCH->( dbSeek( cFilRCH + cRtPro + cRtPer + cRtNpg, .F. ) )
		While RCH->(!Eof() .And. ((RCH_FILIAL + RCH_PROCES + RCH_PER + RCH_NUMPAG)	==	(cFilRCH + cRtPro + cRtPer + cRtNpg)))	
			If RCH->((	RCH_ROTEIR == &cVarRet .And. Empty( RCH_DTFECH)) .Or. (Empty( RCH_ROTEIR )	.And. Empty( RCH_DTFECH )))
				lFound := .T.
				Exit
			EndIf
			RCH->( dbSkip() )
		EndDo
	Else	
		RCH->( dbSeek( cFilRCH + cRtPro + cRtPer , .F. ) )
		While RCH->(!Eof() .And. ((RCH_FILIAL + RCH_PROCES + RCH_PER) ==	(cFilRCH + cRtPro + cRtPer)))	
			If RCH->((	RCH_ROTEIR == &cVarRet .And. Empty(RCH_DTFECH))	.Or. (Empty(RCH_ROTEIR)	.And. Empty(RCH_DTFECH)))
				lFound := .T.
				Exit
			EndIf
			RCH->( dbSkip() )
		EndDo
   	EndIf
	If ( lFound )
		lFound := ExistCpo( "SRY" )
	EndIf

	If !( lFound ) .And. !lDissidio
		If lPergRot
			If MsgNoYes( OemToAnsi(STR0008) ) //"Utiliza Periodo para a Execucao do Roteiro"
				lRet := .F.
				MsgInfo( OemToAnsi(STR0009) , OemToAnsi(STR0006) ) // "Nenhum Roteiro Cadastrado com este Periodo!" ## "Atencao"
			EndIf
		Else
			lRet := .F.
			MsgInfo( OemToAnsi(STR0009) , OemToAnsi(STR0006) ) // "Nenhum Roteiro Cadastrado com este Periodo!" ## "Atencao"
		EndIf
	EndIf

End Sequence

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o   ³Gpm160Bene³Autor³Equipe Inovacao RH       ³Data³02/09/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³Limpar os valores calculados dos itens de beneficios SR0			³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM160			                  	   	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpm160Bene()
Local lRet    := .T.
Local cTpVale := ""
Local cFilSR0 := xFilial("SR0",cCanFil)
Local lNovoCal:= NovoCalcBEN()

If cCanRot == fGetCalcRot('8')	//"VTR"
    cTpVale := "0" 
ElseIf cCanRot == fGetCalcRot('D')	//"VRF"
    cTpVale := "1" 
Else
    cTpVale := "2" 
EndIf

DbSelectArea("SR0")
DbSetOrder(RetOrder("SR0", "R0_FILIAL+R0_MAT+R0_TPVALE+R0_CODIGO+R0_PEDIDO"))
If (SR0->(DbSeek(cFilSR0 + cCanMat + cTpVale)))
	 While SR0->(!Eof() .and. R0_FILIAL+R0_MAT+R0_TPVALE == cFilSR0 + cCanMat + cTpVale)
		If lNovoCal
			If SR0->R0_PEDIDO == "1"
				SR0->( RecLock( "SR0" , .F. ) )
					SR0->(dbDelete())				
				SR0->(MsUnLock())
			EndIf
		Else
			SR0->( RecLock( "SR0" , .F. ) )
			SR0->R0_DIASPRO	:= 0
			SR0->R0_DUTILM	:= 0
			SR0->R0_DNUTIM	:= 0
			SR0->R0_SALBASE	:= 0
			SR0->R0_CC		:= ""
			SR0->R0_FALTAS 	:= 0
			SR0->R0_FERIAS 	:= 0
			SR0->R0_AFAST 	:= 0
			SR0->R0_QDIADIF	:= 0
			SR0->R0_VALDIF 	:= 0
			SR0->R0_CUNIDF 	:= 0
			SR0->R0_CFUNDF	:= 0
			SR0->R0_CEMPDF	:= 0
			SR0->R0_QDIACAL	:= 0
			SR0->R0_VALCAL 	:= 0
			SR0->R0_VLRVALE	:= 0
			SR0->R0_VLRFUNC	:= 0
			SR0->R0_VLREMP 	:= 0					
			SR0->( MsUnLock() )
		EndIf
		SR0->(DbSkip())
	 EndDo
EndIf
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpm160Plas³Autor³Equipe Inovacao RH       ³Data³02/09/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³Deleta os valores calculados de plano de saude		      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>								  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>								  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM160				                  	   				  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpm160Plas()

Local lRet     := .T.
Local aArea    := GetArea()
Local cQuery
Local cNameDB
Local cDelet
Local cSqlName := InitSqlName( "RHR" )
	
	//O banco DB2 nao aceita o nome da tabela apos o comando DELETE			 
  	cNameDB	:= Upper(TcGetDb())
  		
	cQuery	:= "DELETE " 
	cDelet	:= "RHR.D_E_L_E_T_ = ' ' "
	
	If ( cNameDB $ "INFORMIX" )
   		cDelet	:= cSqlName +  ".D_E_L_E_T_ = ' ' "
   	EndIf
              	   		
	If !( cNameDB $ "DB2_ORACLE_INFORMIX_POSTGRES" )
		cQuery += cSqlName
	EndIf
	
	//O Informix precisa do nome da tabela ao inves do Alias no comando DELETE
	If ( cNameDB $ "INFORMIX" )
		cQuery += " FROM " + cSqlName
	Else
		cQuery += " FROM " + cSqlName + " RHR"
		cSqlName := "RHR"
	EndIf

	cQuery += " WHERE " + cSqlName + ".RHR_FILIAL = '" + cCanFil + "'"
	cQuery += " AND " + cSqlName + ".RHR_MAT = '" + cCanMat + "'"
	cQuery += " AND " + cSqlName + ".RHR_COMPPG = '" + cCanPer + "'" 
	cQuery += " AND " + cDelet 
	
	TcSqlExec( cQuery )
	RestArea( aArea )

Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpm160Out ³Autor³Leandro Drumond          ³Data³25/02/2014³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³Deleta os valores calculados de outros beneficios	      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>								  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>								  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM160				                  	   				  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpm160Out()
Local lRet     := .T.
Local aArea    := GetArea()
Local cQuery
Local cNameDB
Local cDelet
Local cSqlName := InitSqlName( "RIQ" )
	
	//O banco DB2 nao aceita o nome da tabela apos o comando DELETE			 
  	cNameDB	:= Upper(TcGetDb())
  		
	cQuery	:= "DELETE " 
	cDelet	:= "RIQ.D_E_L_E_T_ = ' ' "
	
	If ( cNameDB $ "INFORMIX" )
   		cDelet	:= cSqlName +  ".D_E_L_E_T_ = ' ' "
	EndIf
              	   		
	If !( cNameDB $ "DB2_ORACLE_INFORMIX_POSTGRES" )
		cQuery += cSqlName
	EndIf
	
	//O Informix precisa do nome da tabela ao inves do Alias no comando DELETE
	If ( cNameDB $ "INFORMIX" )
		cQuery += " FROM " + cSqlName
	Else
		cQuery += " FROM " + cSqlName + " RIQ"
		cSqlName := "RIQ"
	EndIf

	cQuery += " WHERE " + cSqlName + ".RIQ_FILIAL = '" + cCanFil + "'"
	cQuery += " AND " + cSqlName + ".RIQ_MAT = '" + cCanMat + "'"
	cQuery += " AND " + cSqlName + ".RIQ_PROCES = '" + cCanPro + "'"
	cQuery += " AND " + cSqlName + ".RIQ_ROTEIR = '" + cCanRot + "'"
	cQuery += " AND " + cSqlName + ".RIQ_PERIOD = '" + cCanPer + "'"
	cQuery += " AND " + cSqlName + ".RIQ_NUMPAG = '" + cCanNpg + "'"
	cQuery += " AND " + cDelet 
	
	TcSqlExec( cQuery )
	RestArea( aArea )
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o   ³Gpm160Futr³Autor³Equipe Inovacao RH       ³Data³02/09/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³Deleta os valores futuros 			³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM160				                  	   	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpm160Futr( cFtFil, cFtMat, cFtPer, cFtNpg, cFtVer, lFtTod )
Local lRet     := .T.
Local aArea    := GetArea()
Local cQuery
Local cNameDB
Local cDelet
Local cSqlName := InitSqlName( "SRK" )

//O banco DB2 nao aceita o nome da tabela apos o comando DELETE			 
cNameDB	:= Upper(TcGetDb())
  		
cQuery	:= "DELETE " 
cDelet	:= "SRK.D_E_L_E_T_ = ' ' "

If ( cNameDB $ "INFORMIX" )
	cDelet	:= cSqlName +  ".D_E_L_E_T_ = ' ' "
EndIf
              	   		
If !( cNameDB $ "DB2_ORACLE_INFORMIX_POSTGRES" )
	cQuery += cSqlName
EndIf
	
//O Informix precisa do nome da tabela ao inves do Alias no comando DELETE
If ( cNameDB $ "INFORMIX" )
	cQuery += " FROM " + cSqlName
Else
	cQuery += " FROM " + cSqlName + " SRK"
	cSqlName := "SRK"
EndIf

cQuery += " WHERE " + cSqlName + ".RK_FILIAL = '" + cCanFil + "'"
cQuery += " AND " + cSqlName + ".RK_MAT = '" + cCanMat + "'"
cQuery += " AND " + cSqlName + ".RK_PROCES = '" + cCanPro + "'"
cQuery += " AND " + cSqlName + ".RK_PERINI = '" + cCanPer + "'"
cQuery += " AND " + cSqlName + ".RK_NUMPAGO = '" + cCanNpg + "'"
If !lCanTod 
	cQuery += " AND " + cSqlName + ".RK_PD IN ('" + cCanVrb + "')"
EndIf
If !Empty(cNOTCanSRK) 
	cQuery += " AND " + cSqlName + ".RK_PD NOT IN ('" + cNOTCanSRK + "')"
EndIf
If lDataRef .And. lDtRefSRK
	cQuery += " AND " + cSqlName + ".RK_DTREF BETWEEN '" + dTOs(dDtRefDe) + "' AND '" + dTOs(dDtRefAte) + "' "
EndIf
cQuery += " AND " + cDelet 
	
TcSqlExec( cQuery )
RestArea( aArea )	
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o   ³Gpm160RGB³Autor³Equipe Inovacao RH       ³Data³03/09/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³Deleta os valores da tabela RGB 		   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM160				                  	   	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpm160RGB()
Local lRet     := .T.
Local aArea    := GetArea()
Local cQuery
Local cNameDB
Local cDelet
Local cSqlName := InitSqlName( "RGB" )

//O banco DB2 nao aceita o nome da tabela apos o comando DELETE			 
cNameDB	:= Upper(TcGetDb())
  		
cQuery	:= "DELETE " 
cDelet	:= "RGB.D_E_L_E_T_ = ' ' "

If ( cNameDB $ "INFORMIX" )
	cDelet	:= cSqlName +  ".D_E_L_E_T_ = ' ' "
EndIf
              	   		
If !( cNameDB $ "DB2_ORACLE_INFORMIX_POSTGRES" )
	cQuery += cSqlName
EndIf
	
//O Informix precisa do nome da tabela ao inves do Alias no comando DELETE
If ( cNameDB $ "INFORMIX" )
	cQuery += " FROM " + cSqlName
Else
	cQuery += " FROM " + cSqlName + " RGB"
	cSqlName := "RGB"
EndIf

cQuery += " WHERE " + cSqlName + ".RGB_FILIAL = '" + cCanFil + "'"
cQuery += " AND " + cSqlName + ".RGB_MAT = '" + cCanMat + "'"
cQuery += " AND " + cSqlName + ".RGB_PROCES = '" + cCanPro + "'"
cQuery += " AND " + cSqlName + ".RGB_ROTEIR = '" + cCanRot + "'"
cQuery += " AND " + cSqlName + ".RGB_PERIOD = '" + cCanPer + "'"
cQuery += " AND " + cSqlName + ".RGB_SEMANA = '" + cCanNpg + "'"

If cCanTip2 == "C" 
    cQuery += " AND " + cSqlName +".RGB_TIPO2 NOT IN ('I','G','E','V','F')"
ElseIf cCanTip2 <> "C"
    cQuery += " AND " + cSqlName +".RGB_TIPO2 = '" + cCanTip2 + "'"
EndIf

If !lCanTod 
	cQuery += " AND " + cSqlName +".RGB_PD IN ('" + cCanVrb + "')"
EndIf
If !Empty(cNOTCanRGB)
	cQuery += " AND " + cSqlName +".RGB_PD NOT IN ('" + cNOTCanRGB + "')"
EndIf
If lDataRef
	cQuery += " AND " + cSqlName + ".RGB_DTREF BETWEEN '" + dTOs(dDtRefDe) + "' AND '" + dTOs(dDtRefAte) + "' "
EndIf
cQuery += " AND " + cDelet 
	
TcSqlExec( cQuery )
RestArea( aArea )	
Return( lRet )

/*
ÚÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o   ³Gpm160SRC³Autor³Equipe Inovacao RH       ³Data³03/09/2013³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³Deleta os valores da tabela SRC 		   	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM160				                  	   	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpm160SRC()

Local lRet     	:= .T.
Local aArea    	:= GetArea()
Local aAux		:= {}
Local cQuery
Local cNameDB
Local cDelet
Local cSqlName 	:= InitSqlName( "SRC" )
Local nCont		:= 0

aAux := StrTokArr(cCanMat, "','")
For nCont := 1 To Len(aAux)
	aAdd( aMatSRC, cCanFil+aAux[nCont] )
Next nCont

//O banco DB2 nao aceita o nome da tabela apos o comando DELETE			 
cNameDB	:= Upper(TcGetDb())
  		
cQuery	:= "DELETE " 
cDelet 	:= "SRC.D_E_L_E_T_ = ' ' "

If ( cNameDB $ "INFORMIX" )
	cDelet	:= cSqlName +  ".D_E_L_E_T_ = ' ' "
EndIf
              	   		
If !( cNameDB $ "DB2_ORACLE_INFORMIX_POSTGRES" )
	cQuery += cSqlName
EndIf
	
//O Informix precisa do nome da tabela ao inves do Alias no comando DELETE
If ( cNameDB $ "INFORMIX" )
	cQuery += " FROM " + cSqlName
Else
	cQuery += " FROM " + cSqlName + " SRC"
	cSqlName := "SRC"
EndIf

cQuery += " WHERE " + cSqlName + ".RC_FILIAL = '" + cCanFil + "'"
cQuery += " AND " + cSqlName + ".RC_MAT IN ('" + cCanMat + "')"
cQuery += " AND " + cSqlName + ".RC_PROCES = '" + cCanPro + "'"
cQuery += " AND " + cSqlName + ".RC_ROTEIR = '" + cCanRot + "'" 
cQuery += " AND " + cSqlName + ".RC_PERIODO = '" + cCanPer + "'"
cQuery += " AND " + cSqlName + ".RC_SEMANA = '" + cCanNpg + "'"
cQuery += " AND " + cDelet 

TcSqlExec( cQuery )

RestArea( aArea )
	
Return( lRet )

/*/{Protheus.doc} fCtrTitLg
Imprime log com títulos existentes do funcionário (quando existe controle de títulos na base MV_BTITFOL/MV_BTITADT igual a 1 ou 2)
@author		raquel.anrade
@since		07/08/2020
@version 1.0
/*/
Static Function fCtrTitLg(aLogErros)
Local aLog			:= {}
Local aTitleLog		:= {}
Local nX			:= 0
Local nPosLog		:= 0
Local lRet			:= .T.

Default aLogErros 	:= {}

	If !IsBlind()	
		If Empty( aLog )
			aAdd( aTitleLog, STR0015 )	//"Log de Ocorrencias de Cancelamento de Cálculo"
			aAdd( aLog, {} )
		EndIf

		nPosLog := Len( aLog )
		For nX := 1 To Len( aLogErros )
			aAdd( aLog[ nPosLog ], aLogErros[ nX ] )
		Next nX
		
		MsAguarde( { || fMakeLog( aLog , aTitleLog , "GPEM160A" , NIL , FunName() , STR0015 ) } ,  STR0015 ) 	
		aLogErros	:= {}	
	
	EndIf	

Return lRet
