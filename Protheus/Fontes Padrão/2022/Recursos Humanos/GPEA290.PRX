#INCLUDE "GPEA1290.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "DBTREE.CH"
#INCLUDE "APDTREEN.CH"
#INCLUDE "HEADERGD.CH"

Static __IniFormPad__			//Controle das Formulas Padroes

#DEFINE __MaxRowForm__ 1000
#DEFINE __MaxSeqForm__ 9999
#DEFINE FORM_CONST		06		//Na janela do Tipo de Edicao da Formula, o Valor para CONSTANTE e 6. Esta constante esta
								//utilizada para validar o valor do campo Formula e Resultado
#DEFINE __Convert_Apostrofe__ ( Chr(39) + "+" + Chr(34) + Chr(39) + Chr(34) + "+" + Chr(39) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GPEA290   ³Autor³Marinaldo de Jesus       			 ³ Data ³17/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Cadastro de Formulas para uso em Roteiro de Calculo  			       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico                                                    		   ³
ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.            			   ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Programador ³ Data   ³ FNC / Chamado  ³  Motivo da Alteracao                      ³
ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Leandro Dr. ³27/09/12³         M12RH01³Requisito RHU210 - Unificação das folhas.  ³
³Leandro Dr. ³08/01/15³         TUAGB7 ³Ajjuste na montagem da tela quando existir ³
³            ³        ³                ³os campos _USERGI e USERGA e o usuario     ³
³            ³        ³                ³possuir nível menor que 9.                 ³
³Raquel Hager³18/05/16³         TVFNDH ³Remoção de alteração indevida.             ³
³Esther V.   ³02/06/16³TVFY37          ³Melhoria em tela segundaria de formulas.   ³
³Flavio C    ³05/07/16³TVO417          ³Ajustado tamanho da tela de formulas       ³
³Raquel Hager³26/01/16³MRH-5214        ³Realizado ajuste para simular a compilação ³
³            ³        ³                ³de fórmula e validar se ela está em uso    ³
³            ³        ³                ³por roteiro de cálculo.                    ³
³Raquel Hager³21/02/17³MRH-7288        ³Ajuste para salvar formula corretamente    ³
³            ³        ³                ³quando não estiver em uso.                 ³
³Cícero Alves³24/05/17³DRHPAG-1861	   ³Limpeza dos fontes - retiradas as altera-  ³
³            ³        ³                ³ções na SX3								   ³
³Jaqueline L.³20/12/17³DRHPAG-1861	   ³Correção na Picture do código da fórmula   ³
³            ³        ³                ³para funcionar independente da chamada     ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
/*/
Function Gpea290()

Private aRotina   := MenuDef() // ajuste para versao 9.12 - chamada da funcao MenuDef() que contem aRotina

//Verifica a versao que esta executando (1=versao Padrao ou 2=versao Mexico)
If !(MV_MODFOL == "2")
	SetMnemonicos(xFilial("RCA"),NIL,.T.,"P_LMEMCALC")
	RstStMem()
	gpea290Pad()
Else
	gpea291()
EndIf
	
Return Nil

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GPEA290   ³Autor³Marinaldo de Jesus       ³ Data ³17/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Cadastro de Formulas para uso em Roteiro de Calculo         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico                                                    ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290Pad()
Local aArea			:= GetArea()
Local aAreaRC2		:= RC2->( GetArea() )
Local aAreaRC3		:= RC3->( GetArea() )
Local aRc2Index		:= {}
Local cRc2Filtra	:= ""
Local lSetDebbug
Local nTamSeq		:= TamSx3( "RC3_SEQFOR" )[1]

Private bFiltraBrw	:= { || NIL }
Private cCadastro   := OemToAnsi( STR0001 ) //"Cadastro de Formulas para Roteiro"

Private lManutence

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Adiciona Opcao para a Geracao de Formulas                              ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
lManutence := ( FunName() == "GPEA290M" )
If lManutence
	aAdd( aRotina , { STR0138 , "Gpea290Ger" , 0 , 9 } ) //"Gerar Formula"
Else
	Private lImpForm		:= .T.
EndIf

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Variavel para Definir se Esta em "Modo de Edicao" Copiar Formula       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Private lGpea290Cpy		:= .F.

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica o Modo de Acesso do RC2 e RC3. Ambos Tem que ser Iguais e  Com³
	³ partilhados															 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( Gpea290ModComp() )
		If cPaisLoc == "BRA" .And. (nTamSeq != 6 .Or. Len(RC3->RC3_SEQFOR) != 6 )
			//"O tamanho do campo RC3_SEQFOR está incorreto; o correto é possuir tamanho 6."
			//"Solicite o ajuste ao administrador do sistema."
			MsgInfo( oEmToAnsi( STR0179 ) + CRLF + CRLF + oEmToAnsi( STR0180 ) )
			Break
		EndIf	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Start do processo de Debbug											 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		lSetDebbug	:= SetDebbug( .T. )
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se Deve Adicionar as Formulas Padroes                         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If lImpForm
			If !GpeGerFrm()
				Break
			EndIf
			RpoFormInit( NIL, .T. )
		EndIf
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inicializa o filtro utilizando a funcao FilBrowse                      ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		cRc2Filtra	:= ChkRh( FunName() , "RC2" , "1" )
		cRc2Filtra  += IF(!Empty(cRc2Filtra),".and. RC2_MODELO == '" + MV_MODFOL + "'", "RC2_MODELO == '" + MV_MODFOL + "'" ) 
		bFiltraBrw	:= { || FilBrowse( "RC2" , @aRc2Index , @cRc2Filtra ) }
		Eval( bFiltraBrw )
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Chama a Funcao de Montagem do Browse                                   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		RC2->( dbGotop() )
		mBrowse( 6 , 1 , 22 , 75 , "RC2" , NIL , NIL , NIL , NIL , NIL , Gpea290Marks(),,,,,,,,,,,MV_MODFOL )
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Deleta o filtro utilizando a funcao FilBrowse                     	 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		EndFilBrw( "RC2" , @aRc2Index )
	
	EndIf

End Sequence
	
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o SetDebbug()												 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
SetDebbug( lSetDebbug )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura os Dados de Entrada 											 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestArea( aAreaRC2 )
RestArea( aAreaRC3 )
RestArea( aArea )

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Mnt³ Autor ³Marinaldo de Jesus     ³ Data ³17/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Mnt( cAlias , nReg , nOpcX )							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cAlias = Alias do arquivo                                   ³
³          ³nReg   = Numero do registro                                 ³
³          ³nOpc   = Numero da opcao selecionada                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290Mnt( cAlias , nReg , nOpc )

Local aArea				:= GetArea()
Local aAreaRCA			:= RCA->( GetArea() )
Local aAreaRC3			:= RC3->( GetArea() )

Local aSvKeys			:= GetKeys()

Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjCoords		:= {}
Local aRc2Enchoice		:= {}
Local aRc2Fields		:= {}
Local aRc2Altera		:= {}
Local aRc2NaoAltera		:= {}
Local aRc2VirtChoice	:= {}
Local aRc2Visual		:= {}

Local aSvRc3Cols		:= {}
Local aRC3Recnos		:= {}
Local aRC3Fields		:= {}
Local aRC3Altera		:= {}
Local aRC3Virtual		:= {}
Local aRC3Visual		:= {}
Local aRC3NotFields		:= {}
Local aRC3NaoAltera		:= {}

Local aTreeCoords		:= {}
Local aSvTreeNodes		:= {}
Local aTreeSvKeys		:= {}
Local aEchoSvKeys		:= {}
Local aFolders			:= Array( 02 )
Local aPages			:= Array( 02 )
Local aObjFolder		:= Array( 02 )
Local aButtons			:= {{ "TK_FIND", { || fLocaliza( If(ValType((&(ReadVar()))) == "U", "", &(ReadVar()) ), "RC3", {"RC3_RESULT","RC3_FORM01","RC3_FORM02" } ) }, STR0174 , STR0174 }} //"Localizar Referencia Cruzada"
Local aFilAux			:= {}

Local bDialogInit		:= { || NIL }
Local bSet15			:= { || NIL }
Local bSet24			:= { || NIL }
Local bGpea290GvTudOk	:= { || NIL }
Local bEnchoiceOk 		:= { || NIL }
Local bRc3ColsOk		:= { || NIL }
Local bFolderVld		:= { || NIL }
Local bGravaFormula		:= { || NIL }

Local cSvRC2_Desc		:= ""
Local cSvCodigo			:= ""
Local cSvOrigem			:= ""
Local cRC3Key			:= ""
Local cTreeCopyPar		:= ""
Local cTreeCopy 		:= ""
Local cTreeUnCpPar		:= ""
Local cTreeUnCopy		:= ""
Local cTreePstCpFun		:= ""
Local cTreePstCpPar		:= ""
Local cTreePstCopy 		:= ""
Local cTreeCutPar		:= ""
Local cTreeCut			:= ""
Local cTreeUnCutPar		:= ""
Local cTreeUnCut		:= ""
Local cTreePstCPar		:= ""
Local cTreePstCut		:= ""
Local cBmp_Condicao 	:= "PMSTASK1"
Local cBmp_Execucao 	:= "PMSTASK4"
Local cBmp_Enquanto 	:= "PMSTASK3"
Local cBmp_Mensagem 	:= "PMSTASK2"	//# Botao de Mensagem
Local cFilAux			:= ""
Local cMsgYesNo			:= ""

Local nX				:= 0
Local nXs				:= 0
Local nOpcAlt			:= 0
Local nSvOpcTree		:= 0

Local oDlg				:= NIL
Local oRc2Enchoice		:= NIL
Local oBar1				:= NIL
Local oBar2				:= NIL

Local lFilRPO     		:= SuperGetMv('MV_RPOFIL',, .F.) .and. xFilial("SRY") == xFilial("RC2")
Local lCompAux     		:= .F.
                    	
Private __aFormulas		:= {}
Private __aFuncoes		:= {}
Private __aMnemonicos	:= {}
Private __aLastMnemon	:= {}
Private __aParseVar		:= {}

Private aSvFKeys		:= GetKeys()
Private aRc3Header		:= {}
Private aRc3Cols		:= {}
Private aObjSize		:= {}
Private aMenuPopUp		:= {}
Private aTpResu 		:= { "" , .F. , "" }
Private aTpFm01			:= { "" , .F. , "" }
Private aTpFm02			:= { "" , .F. , "" }

Private cFilRCA			:= xFilial( "RCA" )
Private cNroNode		:= Replicate( "0" , GetSx3Cache( "RC3_SEQFOR" , "X3_TAMANHO" ) )
Private cTipoItem		:= ""
Private cLastItemNum	:= ""

Private lFolderOk		:= .T.
Private lEnRc3IsHide	:= .F.

Private nOpcTree		:= 0
Private nIncOption		:= 0

Private oRc3Tree
Private oRc3Enchoice
Private oBtn_Cond
Private oBtn_Exec
Private oBtn_Msg
Private oBtn_Enq
Private oBtn_Edit
Private oBtn_Del
Private oBtn_Find
Private oBtn_Form
Private oBtn_Opera
Private oBtn_Ok
Private oBtn_Cancel

Private aAdv1Size		:= MsAdvSize()
Private aInfo1AdvSize	:= { aAdv1Size[1] , 0 , aAdv1Size[3] , aAdv1Size[4] , 0 , 0 }
Private aObj1Size       := {}
Private aObj2Size       := {}
Private aObj1Coords     := {} 
Private aObj2Coords     := {} 

aAdd( aObj1Coords , { 100 , 12 , .T. , .F. } )
aAdd( aObj1Coords , { 100 , 100 , .T. , .T. } )
aObj1Size		:= MsObjSize( aInfo1AdvSize , aObj1Coords )  // Posições dos objetos da 2a folder

aAdd( aObj2Coords , { 100 , 100 , .T. , .T. } )
aObj2Size		:= MsObjSize( aInfo1AdvSize , aObj2Coords )// Posições dos objetos da 1a folder
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Limpa o Cache do Tree       								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
ApdTreeCacheClear()

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Cursor em Estado de Espera								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
CursorWait()

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa os Mneumonicos Para uso em Formulas			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	SetMnemonicos( cFilRCA , @__aMnemonicos , .T. , NIL , .T. )	//__aMnemonicos eh Private em Gpea290 aa Partir de Gpea290Mnt()

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa as Verbas Para uso em Formulas			           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	fCarPD()

	If ( nOpc == 8  )	//Consultar Codigo

		Gpea290SwCod( nReg , .F. )
		Break

	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializa a Static em Gpea290AliasGet()					    ³
	| Carregar Opcao de Acordo com o Tree Selecionado 				|
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Gpea290AliasGet()

	If ( nOpc == 3  ) //Inclusao

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Quando For Inclusao Posiciona o RC2 No Final do Arquivo	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aRotSetOpc( cAlias , @nReg , nOpc , .T. )

	Else

		If (;
					!( lGpea290Cpy );
					.and.;
					( RC2->RC2_ORIGEM == "S_" );
					.and.;
					( !lManutence );
			) //Sempre Visualizacao
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Se for uma Formula Definida Pelo Sistema Altera a Opcao  para³
			³ Visualizacao											       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If !( nOpc == 2  )	//Visualizacao
				MsgInfo( STR0067 + CRLF + STR0068 ) //"As Formulas do Sistema nao Podem Ser Alteradas Pelo Usuario."###"Estao Disponiveis apenas para Visualizacao"
				nOpc := 2
				aRotSetOpc( cAlias , nReg , nOpc )
			EndIf
		ElseIf ( lGpea290Cpy )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Altera opcao para Inclusao                                   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nOpc := 3	//Inclusao
			aRotSetOpc( cAlias , nReg , nOpc , .F. )
		Else
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Quando For Exclusao Verifica se a Formula esta sendo  utiliza³
			³ da Antes de Efetuar a Exclusao							   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	 		If ( nOpc == 5 )
				If (;
						!( WhileExecRot() );
						.or.;
						!( Gpea290ExcluChk( cAlias , nReg , nOpc ) );
					)
					Break
				EndIf
				aRotSetOpc( cAlias , nReg , nOpc )
			EndIf
		EndIf

		If (;
				( nOpc <> 2 );	//Visualizacao
				.and.;
				( nOpc <> 3 );	//Inclusao
			)
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Valida se fórmula não está em uso por roteiro de cálculo     ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If !(Gpea290SwCod( nReg , .T. , .T. ))
				MsgInfo( OemToAnsi( STR0178 ) , OemToAnsi( STR0087 ) ) //"Fórmula encontra-se em uso por roteiro de cálculo - Deverá ser editada em modo exclusivo."###"Atençäo"
				Break
			EndIf
			
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Lock do Registro do RC2                                      ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If !( Gpea290Lck( nReg ) )
				Break
			EndIf
		EndIf	
	
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta os Dados para a Enchoice de RC2						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	RC2->( MsGoto( nReg ) )
	aRc2Cols := RC2->( GdBuildCols( @aRc2Enchoice , NIL , @aRc2VirtChoice , @aRc2Visual , "RC2" , { "RC2_FILIAL" , "RC2_ORIGEM", "RC2_VERSAO" } , NIL , "RC2" ) )
	RC2->( MsGoto( nReg ) )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Cria as Variaveis de Memoria e Carrega os Dados Conforme o ar³
	³ quivo														   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nXs := Len( aRc2Enchoice )
	For nX := 1 To nXs
		aAdd( aRc2Fields , aRc2Enchoice[ nX , 02 ] )
		SetMemVar( aRc2Enchoice[ nX , 02 ] , aRc2Cols[ 1 , nX ] , .T. , .T. )
	Next nX

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Salva o Conteudo para Comparacao na Saida                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aSvRc2Cols := aClone( aRc2Cols )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Define os Campos Editaveis na Enchoice Apenas na Inclusao( 3 )³
	³ou Alteracao(4)											   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If (;
			( nOpc == 3 );	//Inclusao
			.or.;
			( nOpc == 4 );	//Alteracao
		)

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Inicializa RC2_ORIGEM										   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If lManutence
			SetMemVar( "RC2_ORIGEM" , "S_" , .T. )
		Else
			SetMemVar( "RC2_ORIGEM" , "U_" , .T. )
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Reinicializa RC2_CODIGO/RC2_ORIGEM Qdo. Copia de Formula	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ( lGpea290Cpy )
			cSvCodigo	:= RC2->RC2_CODIGO
			cSvOrigem	:= RC2->RC2_ORIGEM
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Nao permitir que se For Copia de Formula do Sistema Mantenha o  Mes³
			³mo Codigo													                    ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			SetMemVar( "RC2_CODIGO" , Space( GetSx3Cache( "RC2_CODIGO" , "X3_TAMANHO" ) ) )
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Define os Campos Editaveis								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nXs := Len( aRc2Visual )
		For nX := 1 To nXs
			aAdd( aRc2NaoAltera , aRc2Visual[ nX ] )
		Next nX
		If ( nOpc == 4 )
			aAdd( aRc2NaoAltera , "RC2_CODIGO" )
		EndIf
		nXs := Len( aRc2Fields )
		For nX := 1 To nXs
			If ( aScan( aRc2NaoAltera , { |cNaoA| cNaoA == aRc2Fields[ nX ] } ) == 0 )
				aAdd( aRc2Altera , aRc2Fields[ nX ] )
			EndIf
		Next nX

		If ( nOpc == 4 )
			cSvRC2_Desc := GetMemVar( "RC2_DESC" )
		EndIf
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Montagem do Acols e Aheader da RC3							  |
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cRC3Key 	:= RC2->(RC2_FILIAL + RC2_ORIGEM + RC2_CODIGO)
	lNumGhost	:= !( lGpea290Cpy )
	aRc3Cols	:= RC3->( GdMontaCols(	@aRc3Header 								,;	// 01 -> Array com os Campos do Cabecalho
										NIL											,;	// 02 -> Numero de campos em uso
										@aRC3Virtual								,;	// 03 -> Array com os campos virtuais
								 		@aRC3Visual									,;	// 04 -> Array com os campos visuais
								 		"RC3" 										,;	// 05 -> Opcional, Alias do Arquivo Carga dos itens do aCols
								 		NIL											,;	// 06 -> Opcional, campos que nao deverao constar do aHedder (NotFields)
								 		IF( !( lGpea290Cpy ) , @aRC3Recnos , NIL )	,;  // 07 -> [@]Array unidimensional contendo os Recnos
								 		"RC2"										,;	// 08 -> Alias do Arquivo Pai
								 		cRC3Key										,;	// 09 -> Chave para o Posicionamento no Alias Filho
								 		NIL											,;	// 10 -> Bloco para condicao de Loop While
								 		NIL											,;	// 11 -> Bloco para Skip no Loop While
								 		NIL											,;	// 12 -> Se Havera o Elemento de Delecao no aCols
								 		NIL											,;	// 13 -> Se cria variaveis Publicas
								 		NIL											,;	// 14 -> Se Sera considerado o Inicializador Padrao
								 		NIL											,;	// 15 -> Lado para o inicializador Padrao
								 		.T.											,;	// 16 -> Opcional, Carregar Todos os Campos
								 		NIL											,;	// 17 -> Opcional, Nao Carregar os Campos Virtuais
								 		NIL											,;	// 18 -> Opcional, Utilizacao de Query para Selecao de Dados
								 		NIL											,;	// 19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP ) - utilizado com o parametro 10
								 		NIL											,;	// 20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP ) - utilizado com o parametro 11
								 		.T.											,;	// 21 -> Carregar Coluna Fantasma e/ou BitMap ( Logico ou Array )
	 							 		NIL											,;	// 22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
	 							 		NIL											,;	// 23 -> Verifica se Deve Checar se o campo eh usado
								 		NIL											,;	// 24 -> Verifica se Deve Checar o nivel do usuario
								 		NIL											,;	// 25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
								 		NIL											,;	// 26 -> [@]Array que contera as chaves conforme recnos
								 		NIL											,;	// 27 -> [@]Se devera efetuar o Lock dos Registros
								 		NIL											,;	// 28 -> [@]Se devera obter a Exclusividade nas chaves dos registros
						         		NIL											,;	// 29 -> Numero maximo de Locks a ser efetuado
								 		lNumGhost		 							 ;	// 30 -> Utiliza Numeracao na GhostCol
						);
				  )

	//Deixa RC3 posicionada para utilizacao na impressao do cadastro
	RC3->(DbSeek(cRC3Key))
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Salva aRc3Cols para Comparacao na Saida                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If !( lGpea290Cpy )
		aSvRc3Cols := aClone( aRc3Cols )
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Campos que nao constarao na Enchoice de Edicao da Formula    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aAdd( aRC3NotFields , "RC3_FILIAL" )
	aAdd( aRC3NotFields , "RC3_ORIGEM" )
	aAdd( aRC3NotFields , "RC3_CODIGO" )
	aAdd( aRC3NotFields , "RC3_SEQFOR" )
	aAdd( aRC3NotFields , "RC3_TIPO"   )
	aAdd( aRC3NotFields , "RC3_TPRESU" )
	aAdd( aRC3NotFields , "RC3_TPFM01" )
	aAdd( aRC3NotFields , "RC3_TPFM02" )
	aAdd( aRC3NotFields , "RC3_SEQPAI" )	
	aAdd( aRC3NotFields , "RC3_RESOU1" )
	aAdd( aRC3NotFields , "RC3_RESOU2" )
	aAdd( aRC3NotFields , "RC3_RESULT" )
	aAdd( aRC3NotFields , "RC3_FORM01" )
	aAdd( aRC3NotFields , "RC3_FORM02" )
	aAdd( aRC3NotFields , "RC3_VERSAO" )
	aAdd( aRC3NotFields , "RC3_ALI_WT" )	
	aAdd( aRC3NotFields , "RC3_REC_WT" )	

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Cria as Variaveis de Memoria e Carrega os Dados Conforme o ar³
	³ quivo														   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nXs := Len( aRc3Header )
	For nX := 1 To nXs
		
		If ( aRc3Header[ nX , 02 ] == "GHOSTCOL" )
		   Loop
		EndIf
		
		If ( aScan( aRC3NotFields , { |cVirt| cVirt ==  aRc3Header[ nX , 02 ] } ) > 0 )
		   Loop
		EndIf

		aAdd( aRC3Fields , aRc3Header[ nX , 02 ] )
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Neste Ponto Carrega os Inicializadores Padroes para campos  vi³
		³suais														   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ( aScan( aRC3Visual , { |cVisu| cVisu ==  aRc3Header[ nX , 02 ] } ) > 0 )
			SetMemVar( aRc3Header[ nX , 02 ] , CriaVar( aRc3Header[ nX , 02 ] ) , .T. , .F. )
		Else
			SetMemVar( aRc3Header[ nX , 02 ] , GetValType(aRc3Header[ nX , 08 ], aRc3Header[ nX , 04 ]) , .T. , .T. ) 
		EndIf
	
	Next nX
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define os Campos Editaveis								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nXs := Len( aRC3Visual )
	For nX := 1 To nXs
		aAdd( aRC3NaoAltera , aRC3Visual[ nX ] )
	Next nX
	nXs := Len( aRC3Fields )
	For nX := 1 To nXs
		If ( aScan( aRC3NaoAltera , { |cNaoA| cNaoA == aRC3Fields[ nX ] } ) == 0 )
			aAdd( aRC3Altera , aRC3Fields[ nX ] )
		EndIf
	Next nX

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ordenar o aCols pela Sequencia da Formula					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Gpea290Sort( @aRc3Cols , aRc3Header )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos - Possui mais itens atualiza- ³
	³ dos na funcao Gpe290Window                                   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4],1,1 }
	aAdd( aObjCoords , { 000 , 100 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
	aAdd( aObjSize , aClone( aObjSize[1] ) )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define Bloco para o Valid do Folder 						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bFolderVld	:= { |lVldFolder| IF(;
										(;
											( nOpc == 3 );
											.or.;
											( nOpc == 4 );
										),;
										(;
											CursorWait(),;
											( lVldFolder := Eval( oFolders:bSetOption , oFolders:nOption ) ),;
											CursorArrow(),;
											lVldFolder;
										),;
										.T.;
										);
					}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para a Gravacao das Informacoes			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bGpea290GvTudOk := { |lGrvTudOk|;
										CursorWait(),;
										lGrvTudOk := Gpea290GvTudOk(	@nOpcAlt			,;	//Opcao Retornada Pelos Blocos bSet15 ou bSet24 ( Confirma ou Cancela )
															 			cAlias				,;	//Alias do Arquivo Pai ( RC2 )
															 			@nOpc				,;	//Opcao de Acordo com aRotina
						 									 			@nReg				,;	//Numero do Registro do Arquivo Pai ( RC2 )
						 									 			aRc2Enchoice		,;	//Campos do Arquivo Pai ( RC2 ) Mesma Estrutrua do aHeader
						 												aRc2Cols			,;	//Array com o Conteudo Atual do RC2
						 												aSvRc2Cols			,;	//Conteudo Anterior do RC2
						 												aRc2VirtChoice 		,;	//Campos Virtuais do Arquivo Pai ( RC2 )
						 												aRC3Virtual			,;	//Campos Virtuais do Arquivo Filho ( RC3 )
						 												@aRC3Recnos			,;	//Recnos do Arquivo Filho ( RC3 )
						 												aRc3Cols			,;	//aCols
						 												aSvRc3Cols			 ;	//Copia do aCols antes das alteracoes
						 											),;
										CursorArrow(),;
										lGrvTudOk; //Este eh o Retorno do Bloco e devera ser sempre a ultima expressao
						}
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para o Botao Confirma           			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bSet15		:= { ||;
							nSvOpcTree	:= nOpcTree ,;
							nOpcTree	:= 3,;						// para nao incluir ou alterar um item na arvore
						 	IF(;
						 			Eval( bFolderVld );				//Validar o Objeto Corrente do Folder
						 			.and.;
						 			(;
						 				nOpcAlt := 1,;				//Altero nOpcAlt para Uso na Funcao de Gravacao
						 				Eval( bGpea290GvTudOk );	//Grava as Informacoes da Formula
						 			),;	
						 			(;
						 				GetKeys(),;
						 				oDlg:End(),;
						 				.T.;
						 			),;
						 			(;
						 				nOpcTree	:= nSvOpcTree,;	// restaurar o ultimo valor da variavel
						 				nOpcAlt		:= 0,;
						 				.F.;
						 			);
						 	 );
				  }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para o Botao Cancela            			   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bSet24				:= { || ( nOpcAlt := 0 , Getkeys() , oDlg:End() ) }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Conteudo do aPages								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aPages[ 01 ]   		:= OemToAnsi( "&" + STR0131 )	//"Definicoes"
	aPages[ 02 ]		:= OemToAnsi( "&" + STR0132 )	//"Montagem"

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Conteudo do aFolders								   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aFolders[ 01 ] 		:= OemToAnsi( "&" + STR0131 )	//"Definicoes"
	aFolders[ 02 ] 		:= OemToAnsi( "&" + STR0132 )	//"Definicoes"

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define os Elementos para o Array do Objeto Folder        	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aObjFolder[ 01 ]	:= Array( 01 , 04 )
	aObjFolder[ 02 ]	:= Array( 02 , 04 )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para o Ok da Enchoice ( Valida apenas na Inclu³
	³clusao ou Alteracao )										   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bEnchoiceOk := { || IF( ( ( nOpc == 3 ) .or. ( nOpc == 4 ) ) , ( RstEnchoVlds() , EnchoTudOk( oRc2Enchoice ) ) , .T. ) }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para o Ok do aRc3Cols (Validacao das Formulas)³
	³( Valida apenas na Inclusao ou Alteracao )					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bRc3ColsOk	:= { ||;
							IF( ( ( nOpc == 3 ) .or. ( nOpc == 4 ) ),;
								(;
									Eval( bGravaFormula , .F. );
									.and.;
									Gpea290AtCol( @aRc3Cols );
									.and.;
									VldRc3Cols( aRc3Cols , aRc3Header );
								),;	
								.T.;
							  );
					}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para a Inicializacao do Dialog            	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bDialogInit		:= { ||;
								CursorWait()													,;
								oRc3Tree:Hide()	                                				,;
								oRc3Enchoice:Hide()												,;
								aObjFolder[01,01,01] := oRc2Enchoice							,;
								aObjFolder[01,01,02] := bEnchoiceOk								,;
								aObjFolder[01,01,03] := { || aEchoSvKeys := GetKeys() }			,;
								aObjFolder[01,01,04] := { || RestKeys( aEchoSvKeys , .T. ) }	,;
								aObjFolder[02,01,01] := oRc3Tree								,;
								aObjFolder[02,01,02] := { || .T. }								,;
								aObjFolder[02,01,03] := { || aTreeSvKeys := GetKeys() }			,;
								aObjFolder[02,01,04] := { || RestKeys( aTreeSvKeys , .T. ) }	,;
								aObjFolder[02,02,01] := oRc3Enchoice							,;
								aObjFolder[02,02,02] := bRc3ColsOk								,;
								aObjFolder[02,02,03] := { || Eval( oRc3Tree:bChange ) }			,;
								aObjFolder[02,02,04] := NIL										,;
								EnchoiceBar( oDlg , bSet15 , bSet24, NIL, aButtons )			,;
								Eval( oFolders:bSetOption , 1 , .F. )							,;
								oRc3Tree:TreeSeek("*-")											,;
								RestKeys( aEchoSvKeys , .T. )									,;
								CursorArrow()												 	 ;
					   }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Funcoes utilizada em diversas partes do programa. Passados como parametros³ 
	³     para as funcoes. Funcoes em APDXTREE.PRX:                       	    ³
	³     Funcoes em APDXTREE.PRX:                       	    				³
	³   		InApdxTreeExec - Executar funcoes estaticas de ApdxTree  		³
	³    		GetTreeNodes - Pegar o Array com a Tree Montada           		³
	³    		GetCutTreeNodes - Pegar o Array com os Itens Recortados  		³
	³    		GetCopyTreeNodes - Pegar o Array com os Itens Copiados	  		³
	³	 		NodeMaxItem - Pegar a Maior Numer. para utilizar nos itens copy ³
	³	 		Soma1 - Soma 1 na sequencia informada					   		³
	³	Funcoes em RHLIBLCK.PRX:                                  	   			³
	³    		GetNewCodigo - Pegar uma nova numeracao para o registro   		³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	// Marcar e desmarcar Copia //
	cTreeCopyPar	:= "{oRc3Tree , GetTreeNodes() , GetCopyTreeNodes() , aMenuPopUp , 6 , NIL , lTipo , NIL , NIL , GetCutTreeNodes()}"
	cTreeCopy 	 	:= "{ || CursorWait() , InApdxTreeExec("+'"ApdTreeCpy"'+"," + cTreeCopyPar + ") , oRc3Tree:SetFocus(), CursorArrow() }"
	cTreeUnCpPar 	:= "{oRc3Tree , GetTreeNodes() , GetCopyTreeNodes() , aMenuPopUp , 6 , NIL , .F. , NIL , NIL , GetCutTreeNodes()}"
	cTreeUnCopy  	:= "{ || CursorWait() , InApdxTreeExec("+'"ApdTreeCpy"'+"," + cTreeUnCpPar + ") , oRc3Tree:SetFocus(), CursorArrow() }"
	
	// Colar a Copia realizada //
	cTreePstCpFun	:= "{ || GetNewCodigo( cAliasChildren , cItemField , GetSx2Unico( cAliasChildren ) , { || cLastItemNum := __Soma1( cLastItemNum ) }, NIL , NIL , cCodRC2 ) }"
	cTreePstCpPar	:= "{ oRc3Tree , GetTreeNodes() , GetCopyTreeNodes() , aMenuPopUp , 	6 ," + cTreePstCpFun + ", GetCutTreeNodes(), nIncOption}"
	cTreePstCopy 	:= "{ || CursorWait() , If(Gpe290ValInsert(.F., GetCopyTreeNodes()), (InApdxTreeExec("+'"ApdPstCpyTree"'+"," +cTreePstCpPar + "), GpeNewOrderItem(GetTreeNodes(), .F.)), .F.), CursorArrow() }"
	
	// Marcar e desmarcar Recortar //
	cTreeCutPar	 	:= "{oRc3Tree , GetTreeNodes() , GetCutTreeNodes() , aMenuPopUp , 8 , {|| .T. } , lTipo , NIL, NIL, GetCopyTreeNodes()}"
	cTreeCut 	 	:= "{ || CursorWait() , InApdxTreeExec("+'"ApdCutTree"'+"," + cTreeCutPar + ") , oRc3Tree:SetFocus(), CursorArrow() }"
	cTreeUnCutPar	:= "{oRc3Tree , GetTreeNodes() , GetCutTreeNodes() , aMenuPopUp , 8 , {|| .T. } , .F., NIL, NIL, GetCopyTreeNodes() }"
	cTreeUnCut	 	:= "{ || CursorWait() , InApdxTreeExec("+'"ApdCutTree"'+", " + cTreeUnCutPar + ") , oRc3Tree:SetFocus(), CursorArrow() }"
	
	// Colar o Recorte realizado //
	cTreePstCPar 	:= "{oRc3Tree , GetTreeNodes() , GetCutTreeNodes() , aMenuPopUp , 8 , NIL , GetCopyTreeNodes(), nIncOption }"
	cTreePstCut  	:= "{|| CursorWait(), If(Gpe290ValInsert( .F., GetCutTreeNodes()), (InApdxTreeExec("+'"ApdPstRecTree"'+", "+ cTreePstCPar + "), GpeNewOrderItem(GetTreeNodes(), .T.)), .F.), CursorArrow() }"

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o Dialogo Principal para a Manutencao das Formulas	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nOpcAlt := 0
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( cCadastro ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Carrega o Objeto Folder               					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oFolders := TFolder():New(	aObjSize[ 1 , 1 ]		,;
									aObjSize[ 1 , 2 ]		,;
									aFolders				,;
									aPages					,;
									oDlg					,;
									NIL						,;
									NIL						,;
									NIL						,;
									.T.						,;
									.F.						,;
									aObjSize[ 1 , 4 ]		,;
									(oDlg:nBottom/2)-27      ;
								 )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Define o bSetOption do Folder ( Bloco a ser Executado na  Tro³
		³ ca de Folder )											   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oFolders:bSetOption := { |nNewFolder,lValidFolder| (nSvOpcTree	:= nOpcTree, nOpcTree	:= 3 ), ( lFolderOk := FolderSetOption( nNewFolder , oFolders:nOption , aObjFolder , NIL , NIL , lValidFolder ) ) }

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Foi necessario a inclusao da bChange porque mesmo retornando ³
		³ como .F. para o bSetOption ele mudanca o folder gerando perma³
		³ necendo errado a estrutura da formula.  Com esta  opcao  caso³
		³ exista inconsistencia permanece no folder.                   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oFolders:bChange := { || If( !lFolderOk, (oFolders:nOption := 2, lFolderOk := .T. ), .T.) }
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Enchoice de RC2 - Cabecalho                             	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		RC2->( MsGoto( nReg ) )
		oRc2Enchoice	:= MsmGet():New(	cAlias 					,;	//01 -> tabela a consultar
									 		nReg 					,;	//02 -> Nro do Recno do Registro
									 		nOpc 					,;	//03 -> Tipo de operacao
									 		NIL						,;	//04 ->
									 		NIL						,;	//05 ->
									 		NIL						,;	//06 ->
									 		aRc2Fields 				,;	//07 -> campos editaveis
									 		{aObj2Size[1][1],aObj2Size[1][2],(oDlg:nBottom/2)-41,oDlg:nRight/2-8}	,;	//08 -> posicao da Enchoice na tela
									 		aRc2Altera 				,;	//09 -> campos que permitem alteracao
									 		NIL						,;	//10 ->
									 		NIL						,;	//11 ->
									 		NIL						,;	//12 -> funcao para validacao da Enchoice
									 								,;
									 		oFolders:aDialogs[ 01 ]	,;	//13 -> objeto
									 		NIL 					,;	//14 ->
									 		.F.						 ;	//15 ->
								   )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Desenho das Janelas e Barras de Ferramentas              	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		Gpe290Window(	oFolders:aDialogs[ 02 ]	,;	// 01-objeto da janela
						@oBar2		 			,;	// 02-barra de Ferramentas da edicao de formulas
						@oBar1		 			,;	// 03-barra de ferramentas da estrutura da formula
						aRC3Fields	 			,;	// 04-campos da enchoice da formula
						aRC3Altera	 			,;	// 05-campo que poderao ser alterados
						cTreeCopy    			,;	// 06-string com bloco para copia de itens
						cTreePstCopy 			,;  // 07-string com bloco para colar copia
						cTreeCut	 			,;	// 08-string com bloco para recortar itens
						cTreePstCut	 			,;	// 09-string com bloco para colar recorte
						cFilRCA		 			,;	// 10-filial corrente
						cBmp_Condicao			,;	// 11-imagem da Condicao (If)
						cBmp_Execucao			,;	// 12-imagem da Execucao
						cBmp_Enquanto			,;	// 13-imagem de Enquanto (While)
						cBmp_Mensagem			,;	// 14-imagem de Mensagem
						nOpc		  			,;	// 15-opcao do Menu
						@bGravaFormula	 		 ;	// 16-Tudo Ok da Formula
					)
					
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Enchoice para edicao da formula - RC3                    	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/				
		oRc3Enchoice	:= MsmGet():New(	"RC3" 						,;	//01 -> tabela a consultar
									 		0 							,;	//02 -> Nro do Recno do Registro
									 		3							,;	//03 -> Tipo de operacao - Sempre em Mode de Inclusao
									 		NIL 						,;	//04 ->
									 		NIL 						,;	//05 ->
									 		NIL 						,;	//06 ->
									 		aRC3Fields 					,;	//07 -> campos editaveis
									 		{aObj1Size[2][1],aObj1Size[2][4]*0.55,(oDlg:nBottom/2)-68,aObj1Size[2][4]-5}	,;	//08 -> posicao da Enchoice na tela
									 		aRC3Altera 					,;	//09 -> campos que permitem alteracao
									 		NIL 						,;	//10 ->
									 		NIL 						,;	//11 ->
									 		NIL 						,;	//12 -> funcao para validacao da Enchoice
									 		,;
									 		oFolders:aDialogs[ 02 ]		,;	//13 -> objeto
									 		NIL 						,;  //14 ->
									 		.F.		 				 	 ;	//15 ->
								   )
   		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Desativar os campos da Enchoice RC3                          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		oRc3Enchoice:oBox:lActive:= .F.
		For nX := 1 To Len(oRc3Enchoice:aEntryCtrls)
			oRc3Enchoice:aEntryCtrls[nX]:lActive := .F.
		Next nX

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Montagem da Tree de RC3   		                      	   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aTreeCoords	:= {{aObj1Size[2][1],aObj1Size[2][2],(oDlg:nBottom/2)-68,aObj1Size[2][4]*.55}}
		oRc3Tree	:=	Gpea290tree(	oFolders:aDialogs[ 02 ]	,;	//01 -> objeto da janela onde sera inserida a tree
										aRc3Cols				,;	//02 -> Array com as Informacoes do RC3 
										oBar1					,;	//03 -> barra de Ferramentas da Estrutura da Formula
										oBar2					,;	//04 -> barra de Ferramentas da Edicao da Formula
										aTreeCoords				,;	//05 -> array com as coordenadas da janela
										aRC3Fields				,;	//06 -> campos da enchoice
										aRC3Altera				,;	//07 -> campo que poderao ser alterados
										@aSvTreeNodes			,;	//08 -> Copia do Array da Tree - Comparar na saida
										cTreeCopy				,;  //09 -> String com bloco para copiar itens
										cTreeUnCopy				,;	//10 -> String com bloco para desmarcar copia
										cTreePstCopy			,;	//11 -> String com bloco para colar copia
										cTreeCut				,;	//12 -> String com bloco para recortar itens
										cTreeUnCut				,;	//13 -> String com bloco para desmarcar recortar
										cTreePstCut				,;	//14 -> String com bloco para colar recorte
										cSvCodigo				,;	//15 -> variavel utilizada para burlar a tree quando for uma copia
										cSvOrigem				,;	//16 -> variavel utilizada para burlar a tree quando for uma copia
										@cSvRC2_Desc			,;	//17 -> Controle da alteracao da descricao do Item pai
										nOpc					,;	//18 -> opcao do Menu
										nReg	 				 ;	//19 -> posicao do recno da tabela pai - RC2
								   )
								   
	ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit ) CENTERED

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Compilando a Formula                              	   	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( nOpcAlt == 1 )
		If nOpc <> 2 //Visualizacao
			
			If nOpc <> 5 //Exclusao
				Gpea290SwCod( nReg , .T. )
			EndIf

			If lFilRPO .and. ExistBlock("GP290REPL")
				cMsgYesNo := If(nOpc == 5, STR0181 , STR0182) //"Deseja excluir a fórmula das demais filiais? " ## "Deseja replicar a fórmula para as demais filiais? "
				If MsgYesNo(cMsgYesNo, STR0087) //"Atenção"
					aFilAux := ExecBlock("GP290REPL",.F., .F.)

					If Len(aFilAux) > 0
						
						If nOpc <> 5 //Exclusao
							lCompAux := MsgYesNo(STR0183, STR0087) //"Deseja compilar a fórmula em todas as filiais selecionadas? "
						EndIf
						
						cFilAux := cFilAnt

						Gp290Replica(nOpc, lCompAux, aFilAux, aRc2Enchoice, aRc2Cols, aSvRc2Cols, aRc2VirtChoice, aRC3Virtual, aRC3Recnos, aRc3Cols, aSvRc3Cols)
			
						cFilAnt := cFilAux
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf
	
End Sequence

CursorWait()

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura os Dados de Entrada								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
lGpea290Cpy := .F.
RestArea( aAreaRCA )
RestArea( aArea )
RestArea( aAreaRC3 )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Libera o Lock do RC2        								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
( cAlias )->( MsGoto( nReg ) )
FreeLocks( cAlias )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Restaura as Teclas de Atalho								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
RestKeys( aSvKeys , .T. )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Restaura o Estado do Cursor								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
CursorArrow()

Return( nOpcAlt )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeGerFrm     ³Autor³Marinaldo de Jesus   ³ Data ³19/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Gerar e Compilar as Formulas Padroes                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GpeGerFrm()   											    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GENERICO 	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function GpeGerFrm(lForca)

Local lGpeGerFrm	:= .T.
Local lMayIUseCode	:= .F.
DEFAULT lForca		:= .F.

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Verifica se Deve Adicionar as Formulas Padroes                         ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
DEFAULT __IniFormPad__ := .T.
If ( __IniFormPad__ ) .Or. IsInCallStack("GPEA160")
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Adicionamento as Formulas Padroes										 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	MsAguarde( { || GpIniForm() } , OemToAnsi( STR0153 ) )	//"Inicializando as Fórmulas Padrões..."
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Compilar Todas as Formulas Existentes									 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	MsAguarde( { || GetTreeFrm( NIL , xFilial( "RC2" ) , NIL , NIL , .F., , , , lForca ) } , OemToAnsi( STR0154 ) )	//"Compilando Nova(s) Fórmula(s)..."
	__IniFormPad__	:= .F.
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Libera o Programa para Uso   											 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( lMayIUseCode )
		LeaveExecRot()
	EndIf
EndIf

Return( lGpeGerFrm )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290FrmInit³Autor³Marinaldo de Jesus   ³ Data ³17/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Inicializar a Variavel __IniFormPad__						³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290FrmInit()											³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GENERICO 	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290FrmInit( lInit )

DEFAULT __IniFormPad__	:= .T.
If ( ValType( lInit ) == "L" )
	__IniFormPad__ := lInit
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeSetFrm 	  ³Autor³Marinaldo de Jesus   ³ Data ³19/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Alterar o Conteudo da variavel Static __IniFormPad__		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GpeSetFrm( lSet )											³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³GpeSetFrm( lSet )											³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Forcar a Recarga das Formulas	                            ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function GpeSetFrm( lSet )

Local lLstIniFormPad

DEFAULT lSet 			:= .T.
DEFAULT __IniFormPad__	:= .T.
lLstIniFormPad			:= __IniFormPad__
__IniFormPad__			:= lSet

Return( lLstIniFormPad )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Lck  ³Autor³Marinaldo de Jesus     ³ Data ³16/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Lock de Registro do RC2        	                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Marks()											    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290Lck( nReg )

Local cMayIUseCode

RC2->( MsGoto( nReg ) )
If (;
		IsMemVar("RC2_ORIGEM");
		.and.;
		IsMemVar("RC2_CODIGO");
	)
	cMayIUseCode := GetMemVar( "RC2_ORIGEM" ) + GetMemVar( "RC2_CODIGO" )
Else
	cMayIUseCode := RC2->( RC2_ORIGEM + RC2_CODIGO )
EndIf	

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Lock do Registro do RC2                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Return( WhileNoLock( "RC2" , { nReg } , { cMayIUseCode} , 10 , 2 , .T. , 1 , 10 , NIL , .T. ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Marks³Autor³Marinaldo de Jesus     ³ Data ³17/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Controle das imagens da legenda                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Marks()											    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290Marks()

Local aMarks := {}

aMarks	:=	{;
				{ "RC2->RC2_ORIGEM=='U_'" , "BR_VERDE"	},;
				{ "RC2->RC2_ORIGEM=='S_'" , "BR_AZUL"	};
			 }

Return( aClone( aMarks ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Leg   ³Autor³Marinaldo de Jesus    ³ Data ³17/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Criacao da Legenda                                         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Leg()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290Leg()

Local aLegenda	:= {}
Local aSvKeys	:= GetKeys()

aLegenda := {;
				{ "BR_AZUL"  , OemToAnsi( STR0003 ) } ,; //"Formula Definida Pelo Sistema"
				{ "BR_VERDE" , OemToAnsi( STR0002 ) }  ; //"Formula Definida Pelo Usuario" 
			}

BrwLegenda(	cCadastro ,	STR0004 , aLegenda )			 //"Legenda do Cadastro de Formulas"

RestKeys( aSvKeys )

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290AtCol³Autor³Mauricio T. Takakura   ³ Data ³13/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡ao ³ Transferir o aCols da Tree para a aRc3Cols                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290AtCol()	  										    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290AtCol( aRc3Cols )

Local aAllCols 		:= {}		// variavel com todos os registros
Local aTreeNodes	:= {}		// vetor com a arvore do Tree

Local cRc2Codigo	:= ""		// codigo de RC2

Local nX			:= 0 		// variavel utilizado em while/for
Local nPosRC2_Codigo:= 0		// posicao do campo RC2_Codigo no aHeader
Local nPosRC2_Origem:= 0		// posicao do campo RC2_Origem no aHeader

CursorWait()

	aTreeNodes	:= GetTreeNodes()
	aAllCols	:= NodeRetCol( aTreeNodes )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Atualizar o Codigo do Item no aCols    					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If !Empty(aAllCols)
		nPosRC2_Codigo := GdFieldPos ( "RC3_CODIGO" , aRc3Header )
		nPosRC2_Origem := GdFieldPos ( "RC3_ORIGEM" , aRc3Header )
		cRc2Codigo := aAllCols[1, nPosRC2_Codigo]
		If ( GetMemVar( "RC2_CODIGO" ) <> cRc2Codigo )
			For nX := 1 To Len(aAllCols)
				aAllCols[nX, nPosRC2_Codigo] := GetMemVar( "RC2_CODIGO" )
				aAllCols[nX, nPosRC2_Origem] := GetMemVar( "RC2_ORIGEM" )
			Next nX
		EndIf
	Else
		aAllCols := GdRmkaCols(aRc3Header, .F., .T., .T.)
	EndIf
	aRc3Cols := aClone(aAllCols)

CursorArrow()

Return( .T. )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³VldRc3Cols  ³Autor³Marinaldo de Jesus     ³ Data ³17/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡ao ³Validacao do aRc3Cols                                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function VldRc3Cols( aRc3Cols , aRc3Header )

Local aColsNoDel	:= {}
Local aSvRc3Cols	:= {}
Local aAtribui		:= { ":=" , "+=" , "-=" , "--" , "*=" , "/=" ,  "=" , "++" }
Local aOpIncDec		:= { "++" , "--" }
Local aRecursao		:= {}
Local aOpera		:= {}
Local aLocal		:= {}
Local aAllLocal		:= {}

Local cFormula		:= ( GetMemVar( "RC2_ORIGEM" ) + GetMemVar( "RC2_CODIGO" ) )
Local cItem 		:= ""
Local cParOp		:= ""
Local cParVar		:= ""
Local cOpera		:= ""
Local cMsgInfo		:= ""
Local cNameVar		:= ""
Local cValForm		:= ""

Local nJ			:= 0
Local nP			:= 0
Local nForm1		:= 0
Local nForms1		:= 0
Local nPosIni		:= 0
Local nSvnAux		:= 0
Local nPosSeqFor	:= 0

Local lTudOk		:= .T.
Local lValidTree	:= .T.

Private aCols		:= aRc3Cols
Private aHeader		:= aRc3Header
Private n			:= 1

CursorWait()

	nPosSeqFor := GdFieldPos ( "RC3_SEQFOR" , aRc3Header )
	Begin Sequence

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Validar a estrutura da tree								   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If !( Gpe290ValStruc( @lValidTree ) )
			lTudOk 		:= lValidTree
			n 			:= aScan( aCols , { |x| x[ nPosSeqFor ] == SubStr( oRc3Tree:GetCargo() , 3 ) } )
			cMsgInfo	:= STR0122	// Existe um erro na estrutura da formula
		    Break
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Operadores de Atribuicao. Validacao das variaveis locais.     ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		fOperadores( 6,,.T., "+=", @aOpera )
		For nP := 1 To Len( aOpera )-1
			cOpera += Substr( aOpera[ nP ], 1, 2 ) + "*"
		Next nP
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Percorre todas as Linhas do aCols em busca de Inconsistencia  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nForms1 := Len( aCols )
		For nForm1 := 1 To nForms1
			n := nForm1
 			If !aCols[ n , Len( aCols[ n ] ) ]

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Validacao das variaveis locais - Permirtir criar variaveis lo-³
				³apenas quando for uma atribuicao. Caso contrario gerar log de ³
				³erro. Isso prq o sistema permitia gravar a formula e estourava³
				³"variable does not exist" na execucao do calculo. 			   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				aLocal := {}
				cValForm := Upper( AllTrim( GdFieldGet( "RC3_RESULT" ) ) + Alltrim( GdFieldGet( "RC3_OPERA1" ) ) + AllTrim( GdFieldGet( "RC3_FORM01" ) ) + Alltrim( GdFieldGet( "RC3_OPERA2" ) ) + AllTrim( GdFieldGet( "RC3_FORM02" ) ) )
				AddLocal( cValForm, @aLocal )

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Excluir o Alias M-> declarado como variavel local.            ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				If aScan( aLocal, { |x| x[1] == "M" } ) > 0
					nPosIni := At( "M->", cValForm )
					
					// Verificar se existe alguma variavel com o nome M //
					If nPosIni > 0
						nPosIni := aScan( aLocal, { |x| x[1] == "M" } )
						aDel( aLocal, nPosIni )
						aSize( aLocal, Len( aLocal ) -1 )
					EndIf
				EndIf
	
				For nP := 1 To Len( aLocal )
				 	cNameVar := aLocal[ nP, 1]
					nPosIni	 := aScan( __aMnemonicos , { |x| x[1] == cNameVar } ) // mnemonicos locais tb sao declarados na funcao.
					If nPosIni == 0
				 	
						nPosIni := At( cNameVar, cValForm )
						cParVar := ""
						cParOp 	:= ""
						lTudOk := .F.
						For nJ := nPosIni To Len( cValForm )
							If cParVar == cNameVar
								cParOp := AllTrim( cParOp ) + Substr( cValForm, nJ, 1)
								If cParOp $ cOpera
									aAdd( aAllLocal, aClone( aLocal[ nP ] ) ) 
									lTudOk := .T.
								   	nJ := Len( cValForm )
								EndIf
							Else 						
								cParVar += Substr( cValForm, nJ, 1)
							EndIf
						Next nJ
						If !lTudOk
							If aScan( aAllLocal, { |x| x[1] == cParVar } ) == 0
								cMsgInfo := STR0172	//"A variavel"
								cMsgInfo += " " + cNameVar + " " 
								cMsgInfo += STR0173	//"nao pode ser declarada como Local. Variaveis Locais devem possuir alguma atribuição!"
								Break
							EndIf
						EndIf
					EndIf
				Next nP
			
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Validacao para o Tipo EXE 									   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				If ( GdFieldGet( "RC3_TIPO" ) == ".EXE." )
				
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Operador 3                  								   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					If !( lTudOk := ( GdFieldGet( "RC3_OPERA3" ) $ ".CNT./.END." ) )
						cMsgInfo := STR0109	//"O campo 
						cMsgInfo += aRc3Header[ GdFieldPos( "RC3_OPERA3" ) , 01 ]
						cMsgInfo += STR0110	//da sequencia "
						cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
						cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
						Break
					EndIf
					If !( lTudOk := !( Empty( GdFieldGet( "RC3_RESULT" ) ) ) )
						cMsgInfo := STR0109	//"O campo "
						cMsgInfo += aRc3Header[ GdFieldPos( "RC3_RESULT" ) , 01 ]
						cMsgInfo += STR0110	//" da sequencia "###" esta com o Conteudo Invalido."
						cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
						cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
						Break
					EndIf
					
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Operador 1                									   ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					If !Empty( GdFieldGet( "RC3_OPERA1" ) )
						If ( "->" $ GdFieldGet( "RC3_RESULT" ) )
			            	If !( lTudOk := !( aScan( aAtribui , { |x| x == AllTrim( GdFieldGet( "RC3_OPERA1" ) ) } ) > 0 ) )
			                	cMsgInfo := STR0063 //"Nao e permitido Atribuir Valor a Campo do Dicionario de Dados"
								Break
							EndIf
		                EndIf
	
		                // se o operador for ++ ou -- nao tera formula 1, pois somara um ao valor do resultado //
						If !( aScan( aOpIncDec , { |x| x == AllTrim( GdFieldGet( "RC3_OPERA1" ) ) } ) > 0 )
							If !( lTudOk := !( Empty( GdFieldGet( "RC3_FORM01" ) ) ) )
								cMsgInfo := STR0109	//"O campo "
								cMsgInfo += aRc3Header[ GdFieldPos( "RC3_FORM01" ) , 01 ]
								cMsgInfo += STR0110	//" da sequencia "
								cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
								cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
								Break
							EndIf
						EndIf
					
					ElseIf Empty( GdFieldGet( "RC3_OPERA1" ) )
					
						// se possui operador 1, obrigatoriamente tera que ter valor em formula 1 //
						If !( lTudOk := !( !Empty( GdFieldGet( "RC3_FORM01" ) ) ) )
							cMsgInfo := STR0109	//"O campo "
							cMsgInfo += aRc3Header[ GdFieldPos( "RC3_FORM01" ) , 01 ]
							cMsgInfo += STR0110	//" da sequencia "
							cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
							cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
							Break
						EndIf
					
					EndIf
					
					If ( aScan( aOpIncDec , { |x| x == AllTrim( GdFieldGet( "RC3_OPERA1" ) ) } ) > 0 ) 
						
						If !( lTudOk := ( Empty( GdFieldGet( "RC3_FORM01" ) ) ) )
							cMsgInfo := STR0109	//"O campo "
							cMsgInfo += aRc3Header[ GdFieldPos( "RC3_FORM01" ) , 01 ]
							cMsgInfo += STR0110	//" da sequencia "
							cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
							cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
							Break
						EndIf
						
						If !( lTudOk := ( Empty( GdFieldGet( "RC3_FORM02" ) ) ) )
							cMsgInfo := STR0109	//"O campo "
							cMsgInfo += aRc3Header[ GdFieldPos( "RC3_FORM02" ) , 01 ]
							cMsgInfo += STR0110	//" da sequencia "
							cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
							cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
							Break
						EndIf
						
						If !( lTudOk := ( Empty( GdFieldGet( "RC3_OPERA2" ) ) ) )
							cMsgInfo := STR0109	//"O campo "
							cMsgInfo += aRc3Header[ GdFieldPos( "RC3_OPERA2" ) , 01 ]
							cMsgInfo += STR0110	//" da sequencia "
							cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
							cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
							Break
						EndIf

					EndIf
					
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Validacao para o Tipo CON 									   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				ElseIf !(GdFieldGet( "RC3_TIPO" ) == ".MSG." )	//# Despreza as Mensagens
					
					nSvnAux := n
					
					If !( GdFieldGet( "RC3_OPERA3" ) == ".END." )
						
						While ( ++n <= nForms1 )
							
							If !aCols[ n , Len( aCols[ n ] ) ]
								
								If !( lTudOk := !( GdFieldGet( "RC3_TIPO" ) == ".EXE." ) )
									n := nSvnAux
									cMsgInfo := STR0109	//"O campo "
									cMsgInfo += aRc3Header[ GdFieldPos( "RC3_OPERA3" ) , 01 ]
									cMsgInfo += STR0110	//" da sequencia "
									cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
									cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
									Break
								EndIf
							
								Exit
							
							EndIf 
						
						End While	
					
					EndIf	
				
					n := nSvnAux
				
				EndIf

				If !( lTudOk := !( Empty( GdFieldGet( "RC3_OPERA3" ) ) ) )

					cMsgInfo := STR0109	//"O campo "
					cMsgInfo += aRc3Header[ GdFieldPos( "RC3_OPERA3" ) , 01 ]
					cMsgInfo += STR0110 //" da sequencia "
					cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
					cMsgInfo += STR0071 //" esta com o Conteudo Invalido."
					cMsgInfo += CRLF
					cMsgInfo += STR0072	//"Este Campo e de Preenchimento Obrigatorio."
					Break
				
				EndIf
				
				If !Empty( GdFieldGet( "RC3_OPERA2" ) )
				
					If !( lTudOk := !( Empty( GdFieldGet( "RC3_FORM02" ) ) ) )
						cMsgInfo := STR0109	//"O campo "
						cMsgInfo += aRc3Header[ GdFieldPos( "RC3_FORM02" ) , 01 ]
						cMsgInfo += STR0110	//" da sequencia "
						cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
						cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
						Break
					EndIf
				
				ElseIf Empty( GdFieldGet( "RC3_OPERA2" ) )
	
					If !( lTudOk := !( !Empty( GdFieldGet( "RC3_FORM02" ) ) ) )
						cMsgInfo := STR0109 //"O campo "
						cMsgInfo += aRc3Header[ GdFieldPos( "RC3_FORM02" ) , 01 ]
						cMsgInfo += STR0110	//" da sequencia "
						cMsgInfo += GdFieldGet( "RC3_SEQFOR" )
						cMsgInfo += STR0071	//" esta com o Conteudo Invalido."
						Break
					EndIf
	
				EndIf

				//Observacao, nao invalidar a resursividade, permitir e dar aviso ao usuario
				If ( Upper( AllTrim( cFormula ) ) $ Upper( AllTrim( GdFieldGet( "RC3_RESULT" ) ) ) )
					aAdd( aRecursao , { "RC3_RESULT" , n } )
				EndIf

				//Observacao, nao invalidar a resursividade, permitir e dar aviso ao usuario
				If ( Upper( AllTrim( cFormula ) ) $ Upper( AllTrim( GdFieldGet( "RC3_FORM01" ) ) ) )
					aAdd( aRecursao , { "RC3_FORM01" , n } )
				EndIf
				
				//Observacao, nao invalidar a resursividade, permitir e dar aviso ao usuario
				If ( Upper( AllTrim( cFormula ) ) $ Upper( AllTrim( GdFieldGet( "RC3_FORM02" ) ) ) )
					aAdd( aRecursao , { "RC3_FORM02" , n } )
				EndIf

			EndIf
		
		Next nForm1
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se Todas as Linhas das Formulas foram Finalizadas    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nForms1 := Len( aCols )
		For nForm1 := 1 To nForms1
			If !aCols[ nForm1 , Len( aCols[ nForm1 ] ) ]
				aAdd( aColsNoDel , aClone( aCols [ nForm1 ] ) )
			EndIf
		Next nForm1
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se Finalizou Corretamente a Formula                  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If !Empty( aColsNoDel )
			aSvRc3Cols	:= aClone( aCols )
			aCols		:= aClone( aColsNoDel )
			n := Len( aCols )
			If !( lTudOk := ( GdFieldGet( "RC3_OPERA3" ) == ".END." ) )
				cMsgInfo	:= STR0075	//"Existe um Erro na Formula. "
				cMsgInfo	+= STR0088	//"Esta Faltando a Finalizacao da Formula"
				aCols		:= aClone( aSvRc3Cols )
				Break
			EndIf
			aCols := aClone( aSvRc3Cols )
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se Existe Chamada Recursiva na Formula               ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nForms1  := Len( aRecursao )
		If ( nForms1 > 0 )
			nForms1		:= Len( aRecursao )
			cMsgInfo	:= STR0133	//"O(s) Campo(s):"
			cMsgInfo 	+= CRLF
			cMsgLinha	:= STR0134	//"Sequencia(s):"
			cMsgLinha	+= CRLF
			For nForm1 := 1 To nForms1
				If !( aRc3Header[ GdFieldPos( aRecursao[ nForm1 , 01 ] ) , 01 ] $ cMsgInfo )
					cMsgInfo 	+= aRc3Header[ GdFieldPos( aRecursao[ nForm1 , 01 ] ) , 01 ]
					cMsgInfo 	+= CRLF
				EndIf	
				cMsgLinha	+= aCols[ aRecursao[ nForm1 , 02 ] , nPosSeqFor ]
				cMsgLinha	+= CRLF
			Next nForm1
			cMsgInfo += CRLF
			cMsgInfo += STR0135	//"Possue(m) Chamada(s) Recursiva(s)"
			cMsgInfo += CRLF
			cMsgInfo += cMsgLinha
			cMsgInfo += CRLF
			cMsgInfo += CRLF
			cMsgInfo += STR0136	//"Isso podera degradar a performance do sistema ou gerar uma situação de Loop Infinito." 
			cMsgInfo += CRLF
			cMsgInfo += CRLF		
			cMsgInfo += STR0137	//"Verifique se vocÊ colocou condição para que isso não ocorra."
			cMsgLinha := ""
		EndIf

	End Sequence

CursorArrow()

If !( lTudOk )
	If !Empty( cMsgInfo )
		MsgInfo( OemToAnsi( cMsgInfo ) , OemToAnsi( STR0066  ) ) //"Aviso de Inconsistencia"
	EndIf
	If ( n > 0 )
		cItem := "+-" + aCols[ n , nPosSeqFor ]
		oRc3Tree:TreeSeek( cItem )	//Erro na formula ( posicionar no item )
		Eval( oRc3Tree:bChange )
		oRc3Tree:Refresh()
	EndIf	
ElseIf !Empty( cMsgInfo )
	MsgInfo( OemToAnsi( cMsgInfo ) , STR0087 ) //"Atençäo"
EndIf

Return( lTudOk )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpe290ValStruc³Autor³Mauricio T. Takakura ³ Data ³23/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Validacao da Estrutura da Tree - Funcao Recursiva          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpe290ValStruc( lValidTree	,;	//Variavel de Retorno de TreeOk
								aNodes		,;	//array com os itens a serem processados
								aCond		,;	//sera adicionado todos os itens de uma condicao para ser validado. Zerar qdo a condicao for satisfeita
								aFamilyNode	,;	//utilizado para armazenar condicoes anteriores a um determinado Node. Zerar qdo o Node for finalizado.
								nLastNivel	 ;	//ultimo nivel da arvore que foi validado
							  )

Local aAuxCol				// array com o aCols
Local aChildNodes			// subitens

Local cFatherNode			// Codigo Pai do Item Selecionado
Local cGrandFather			// Avo do Item Selecionado

Local lItemActive			// Se o item esta ativo

Local nNivelAnt				// Nivel Anterior
Local nBrotherNodes			// variavel que informa se o item selecionado possui irmaos
Local nUncleDel		:= 0	// numero de elementos deletados
Local nPosFind		:= 0	// Posicao de array localizado
Local nX
Local nLoop
Local nLoops
Local nPosSeqFor			// posicao do campo no aHeader
Local nPosSeqPai
Local nPosTipo
Local nPosOpera3

DEFAULT aNodes 		:= GetTreeNodes()
DEFAULT aCond		:= {}
DEFAULT aFamilyNode := {}
DEFAULT nLastNivel	:= 0

Begin Sequence

	nNivelAnt := nLastNivel
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³O array aCond possui os itens de um bloco de condicoes. Quando a valida-³
	³cao esta em SubItens (Nodes), podera ocorrer a necessidade de recuperar ³
	³condicoes de niveis superiores. Para isso foi criado o array aFamilyNode³
	³que contem estas informacoes. Quando aCond esta vazio, inicia-se um novo³
	³bloco de condicoes.                                                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If Empty(aCond)
		For nX := 1 To Len(aFamilyNode)
			If aFamilyNode[nX, 3] == ""
				Loop
			EndIf
			aAdd(aCond, aClone(aFamilyNode[nX]) )
		Next nX
	EndIf
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Posicao dos campos no aHeader                                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nPosSeqFor 	:= GdFieldPos("RC3_SEQFOR"	, aRc3Header)
	nPosSeqPai	:= GdFieldPos("RC3_SEQPAI"	, aRc3Header)
	nPosTipo	:= GdFieldPos("RC3_TIPO"	, aRc3Header)
	nPosOpera3  := GdFieldPos("RC3_OPERA3"	, aRc3Header)
	
	nLoops := Len( aNodes )
	For nLoop := 1 To nLoops
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Quando houver alguma inconsistencia, desmontar a pilha da recursiva    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If !( lValidTree )
			nLoop := nLoops
			Break
	    EndIf
	    
	   	nNivel 			:= nLastNivel
		nBrotherNodes 	:= 0								// variavel com o total de irmaos do item selecionado
		lItemActive 	:= aNodes[nLoop, NODE_ACTIVE]		// item da tree ativo ou excluido
	    aAuxCol 		:= aNodes[nLoop, NODE_ACOLS]		// aCols do Item selecionado
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Quando o item estiver excluido, considerar os subitens como vazio para ³
		³nao realizar a recursiva para itens deletados.                         ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	    If lItemActive
		    aChildNodes := aNodes[nLoop, NODE_TREE]
		Else 
			aChildNodes := {}
		EndIf
		
		If !Empty(aAuxCol)
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Adicionar a condicao em aCond e aFamilyNode para as proximas chamadas  ³
			³da funcao.                                                             ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	        If lItemActive
		    	aAdd(aCond		  , { aAuxCol[nPosTipo], aAuxCol[nPosOpera3], aAuxCol[nPosSeqFor], aAuxCol[nPosSeqPai] })
		    	aAdd(aFamilyNode  , { aAuxCol[nPosTipo], aAuxCol[nPosOpera3], aAuxCol[nPosSeqFor], aAuxCol[nPosSeqPai] })
		    EndIf
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Caso tenha uma finalizacao de CONDICAO .END. e nao exista a finalizacao³
			³com uma EXECUCAO .END., existe uma inconsistencia no bloco de condicao.³
			³Ou tenha uma finalizacao de ENQUANTO .END. e nao exista nada dentro  do³
			³laco para execucao.                                                    ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		    If (;
		    		(;
		    			( aAuxCol[nPosTipo] == ".CON." );
		    			.or.;
		    			( aAuxCol[nPosTipo] == ".ENQ." );
		    		);
		    		.and.;
		    		(;
		    			( aAuxCol[nPosOpera3] == ".END." );
		    			.and.;
		    			( Len(aChildNodes) == 0 );
		    			.and.;
		    			( lValidTree );
		    			.and.;
		    			( lItemActive );
		    		);
		    	)	
			    lValidTree := .F.
		    	oRc3Tree:TreeSeek( "+-" + aAuxCol[nPosSeqFor] )
		       	Break
		    EndIf
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Finalizacao de uma EXECUCAO e validacao de um bloco de condicao.       ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If (;
					( aAuxCol[nPosTipo] == ".EXE." );
					.and.;
					( aAuxCol[nPosOpera3] == ".END." );
					.and.;
					( lValidTree );
					.and.;
					( lItemActive );
				)	
		    	If Gpe290ValCond( aCond )	// validacao do bloco de condicao contido em aCond
		    	 	If nNivel > 0
				       nNivel-- 			// sobe um nivel da posicao atual
				   	EndIf			   
		           	aCond   := {}			// zerar o array com as condicoes para iniciar um novo bloco
	
				   	/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Se o Nivel nao retornar ao inicial (0), preparar o ambiente de aFamily-³
					³Node para a proxima condicao.                                          ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		           	If nNivel > 0
	
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Pegar o Pai e o Avo do Item selecionado para limpar o array aFamilyNode³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		 	            cFatherNode  := aAuxCol[nPosSeqPai]
		           		nPosFind := aScan( aFamilyNode, { |x| x[3] = cFatherNode } )
		           		If nPosFind > 0
			           		cGrandFather := aFamilyNode[nPosFind, 4]
			           	EndIf
		           
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Excluir de aFamilyNode os itens que nao farao parte dos proximos blocos³
						³de condicao. O irmaos, o pai e os tios anteriores a proxima condicao.  ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			           	For nX := 1 To Len(aFamilyNode)
			           		If aFamilyNode[nX, 4] == cFatherNode
				           		aFamilyNode[nX, 3] := ""
		    	       			aFamilyNode[nX, 4] := ""
		        	   		EndIf
			           		If aFamilyNode[nX, 3] == cFatherNode .or. aFamilyNode[nX, 4] == cGrandFather
				           		aFamilyNode[nX,3] := ""
				           		aFamilyNode[nX,4] := ""
		    	       		EndIf
		        	    Next nX
	
	   					/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³Verifica se tera mais itens a serem validados na tree					³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						If cGrandFather != NIL
		   	    	    	aSubItens := NodeGetTree( GetTreeNodes() , cGrandFather )
					    	For nX := 1 To Len(aSubItens)
					    		If aSubItens[nX, NODE_ACTIVE]
					    			nBrotherNodes++
					    		EndIf
					    		If aSubItens[nX, NODE_INFERIOR] == cFatherNode
					    			nUncleDel := nBrotherNodes
					    		EndIf
					    	Next nX
	    					nBrotherNodes := Len(aSubItens) - nUncleDel
	 				 	EndIf
						If nBrotherNode == 0
							nNivel := 0
							aFamilyNode := {}
						EndIf
		           	Else
			           aFamilyNode := {}
		           	EndIf
				Else
	
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Erro na validao do bloco de condicao.                                  ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					lValidTree := .F.
			    	oRc3Tree:TreeSeek( "+-" + aAuxCol[nPosSeqFor] )
			       	Break				
			   	EndIf
		    
		    Else
	
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Valida o item para montar o bloco de condicao.                         ³
				³Verifica quantos irmaos existem abaixo do item selecionado             ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		    	aSubItens := NodeGetTree( GetTreeNodes() , aAuxCol[nPosSeqPai] )
		   		nBrotherNodes := 0
		    	If !Empty( aSubItens )
		    		For nX := nLoop+1 To Len(aSubItens)
		    			If aSubItens[nX, NODE_ACTIVE]
	    					nBrotherNodes++
	    				EndIf
		    		Next nX
		    	EndIf	
	    	    If Len(aChildNodes) > 0 .and. lValidTree
					nNivel++
			    EndIf
	
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Bloco nao possui uma execucao com finalizacao.                         ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				If (nNivelAnt <= nNivel) .and. Len(aChildNodes) == 0 .and. nBrotherNodes <= 0 .and. lItemActive
					lValidTree := .F.
		    		oRc3Tree:TreeSeek( "+-" + aAuxCol[nPosSeqFor] )
			        Break
			    EndIf
			EndIf
		 EndIf
	     Gpe290ValStruc( @lValidTree , aChildNodes, aCond, aFamilyNode, nNivel )
	Next nLoop
	
End Sequence

Return( lValidTree )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpe290ValCond ³Autor³Mauricio T. Takakura ³ Data ³23/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Validao de um bloco da formula                             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpe290ValCond( aCon )

Local lRet 		:= .T.
Local lCondOpen := .F.
Local lExecOpen	:= .F.

Local nLoop
Local nLoops

nLoops := Len(aCon)
For nLoop := 1 To nLoops
	If aCon[nLoop, 1] == ".CON." .and. aCon[nLoop, 2] != ".END."
		lCondOpen := .T.
	ElseIf aCon[nLoop, 1] == ".CON." .and. aCon[nLoop, 2] == ".END."
	   lCondOpen := .F.
	EndIf
	
	If aCon[nLoop, 1] == ".EXE." .and. aCon[nLoop, 2] == ".CNT." .and. lCondOpen 
		lRet := .F.
		Exit
	EndIf
	If aCon[nLoop, 1] == ".EXE." .and. aCon[nLoop, 2] == ".END." .and. lCondOpen
		lRet := .F.
		Exit
	EndIf
	If aCon[nLoop, 1] == ".EXE." .and. aCon[nLoop, 2] == ".END."
		lExecOpen := .T.
	EndIf
Next nLoop
If !lExecOpen
   lRet := .F.
EndIf

Return ( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290FindFunc ³ Autor ³Marinaldo de Jesus³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se a Funcao Existe no Repositorio					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290FindFunc()
         
Local lRet	:= .T.
Local cFind := AllTrim( GetMemVar( "RC2_ORIGEM" ) + GetMemVar( "RC2_CODIGO" ) )

If ( Type( "Inclui" ) <> "L" )
	Private Inclui := .F.
EndIf

If ( Inclui )
	If !( lRet := !IsFunction( cFind ) )
		MsgInfo( STR0076 + cFind , STR0066 ) //"Este nome de Formula nao pode ser utilizado pois existe funcao de usuario com o mesmo nome no Repositorio "
	EndIf
EndIf

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290SwCod ³Autor³Marinaldo de Jesus    ³ Data ³14/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Mostra Codigo Fonte da Formula para o Usuario               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290SwCod( nReg , lMsgNoYes, lSimula, lNoFile)

Local aSvKeys		:= GetKeys()
Local aAdvSize		:= MsAdvSize( .T. , .F. )
Local aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
Local aObjCoords	:= { { 000 , 095 , .T. , .F. } , { 000 , 000 , .T. , .T. } }
Local aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
Local aSource		:= {}
Local aGetTreeFrm	:= {}
Local aListbox		:= {}
Local aFilAux       := {}

Local bSet15		:= { || RestKeys() , oDlg:End() }
Local bSet24		:= { || RestKeys() , oDlg:End() }
Local bDialogInit	:= { || EnchoiceBar( oDlg , bSet15 , bSet24 ) }

Local cPrg
Local cMsgInfo
Local cFilAux		:= ""

Local lCompileOk
Local lFilRPO     	:= SuperGetMv('MV_RPOFIL',, .F.) .and. xFilial("SRY") <> xFilial("RC2") //Se o compartilhamento for diferente, compila em todas as filiais

Local nHandle
Local nOpenOk
Local nLoop
Local nLoops

Local oGroup
Local oLbxSource
Local oFont
Local oDlg
Local lRet			:= .T.

Static aFilSRY		:= {}

DEFAULT lSimula := .F.
DEFAULT lNoFile := .F.

Begin Sequence

	RC2->( MsGoto( nReg ) )
	If RC2->( Eof() )
		Break
	EndIf

	cPrg := ( RC2->( RC2_ORIGEM + AllTrim( RC2_CODIGO ) ) + ".PRG" )
	cPrg := Lower( GetRpoForm( .F. , .T. ) + cPrg )
	If (;
			( RC2->RC2_RECOMP <> "2" );
			.or.;
			!File( cPrg, 1 );
			.or.;
			lSimula;
		)
		If !Gpea290Lck( nReg )
			Break
		EndIf
		RC2->RC2_RECOMP := "1"
		If !lSimula
			Rc2RecSry() //Forcar a Recompilacao do Roteiro
		EndIf
		RC2->( MsUnLock() )
		
		If lFilRPO .and. !lSimula
			If Empty(aFilSRY)
				aFilAux := FWAllFilial(,,,.F.)
				cFilAux := ""
				aEval( aFilAux , { |x| If( xFilial("SRY", x) $ cFilAux , Nil , ( cFilAux += xFilial("SRY", x) + "/", aAdd(aFilSRY, x))) } )
			EndIf
			cFilAux := cFilAnt
			For nLoop := 1 to Len(aFilSRY)
				If aFilSRY[nLoop] <> cFilAux //Não compila a filial atual, ela será a última.
					cFilAnt := aFilSRY[nLoop]
					
					If RC2->RC2_RECOMP <> "1" 
						Gpea290Lck( nReg )
						RC2->RC2_RECOMP := "1"
						Rc2RecSry() //Forcar a Recompilacao do Roteiro
						RC2->( MsUnLock() )
					EndIf

					MsAguarde( { || lCompileOk := RC2->( GetTreeFrm( @aGetTreeFrm , RC2_FILIAL , RC2_ORIGEM , RC2_CODIGO , .F., , , lSimula ) ) } , OemToAnsi( STR0154 ) )	//"Compilando Novas Fórmulas..."
					RpoFormInit( NIL, .T. )		
				EndIf 
			Next nLoop

			cFilAnt := cFilAux

			If RC2->RC2_RECOMP <> "1" 
				Gpea290Lck( nReg )
				RC2->RC2_RECOMP := "1"
				Rc2RecSry() //Forcar a Recompilacao do Roteiro
				RC2->( MsUnLock() )
			EndIf
		EndIf

		MsAguarde( { || lCompileOk := RC2->( GetTreeFrm( @aGetTreeFrm , RC2_FILIAL , RC2_ORIGEM , RC2_CODIGO , .F., , , lSimula ) ) } , OemToAnsi( STR0154 ) )	//"Compilando Novas Fórmulas..."
		RpoFormInit( NIL, .T. )

		// Se simulação de tentativa de compilação da fórmula falhar e nao houver erros
		// Retornar e impedir edição - fórmula em  uso por roteiro de cálculo
		If !lCompileOk .Or. lSimula //Retorna o Status caso a recompilacao resultar em erro ou em caso de simulação
			If !Gpea290Lck( nReg )
				Break
			EndIf
			RC2->RC2_RECOMP := "2"
			RC2->( MsUnLock() )
			If !lSimula
				fSryRec()
			EndIf
			/*DbSelectArea("SRY")
			RecLock ( "SRY", .F.)
			SRY->RY_RECOMP := "2"
			SRY->(MsUnLock()) */
		EndIf
		If lSimula
			Return( lCompileOk .or. !Empty(aGetTreeFrm))
		EndIf
		If !( lCompileOk )
			If Empty( aGetTreeFrm )
				cMsgInfo := STR0158	//"Nao foi possivel compilar o Programa"
			Else
				Gpea290SwErr( aGetTreeFrm[1,7,4] , aGetTreeFrm[1,7,3] , aGetTreeFrm[1,7,2] , aGetTreeFrm[1,7,1] )
			EndIf
			Break
		Else 
			// Efetua compilação dos roteiros que possuem esta formula, para que não fiquem pendente de compilação, pois pode ocasionar em erro caso posteriormente sejam realizados cálculos simultâneos.
			GPCallCmpAll("SRY",.T.,.F.,,.T.)
		EndIf
		DEFAULT lMsgNoYes := .T.
		If ( (;
				( lMsgNoYes );
				.and.;
				!MsgNoYes( STR0161 ); //"Deseja Consultar o Código Compilado?"
			) .or. lNoFile )
			Break
		EndIf		
	EndIf

	If !File( cPrg, 1 )
		cMsgInfo := STR0156	//"Nao foi possivel encontrar o arquivo:"
		cMsgInfo += CRLF
		cMsgInfo += cPrg
		cMsgInfo += CRLF
		Break
	EndIf

	If ( ( nHandle := fOpen( cPrg,,1 ) ) < 0 )
		nOpenOk := 0
		While (;
				!( fError() == 0 );
				.and.;
				( ++nOpenOk <= 50 );
			  )
			Sleep( 1000 )
			If ( ( nHandle := fOpen( cPrg,,1 ) ) > 0 )
				Exit
			EndIf
		End While
	EndIf

	If ( nHandle < 0 )
		cMsgInfo := STR0157 //"Nao foi possivel abrir o arquivo:"
		cMsgInfo += CRLF
		cMsgInfo += cPrg
		cMsgInfo += CRLF
		Break
	EndIf
	fClose( nHandle )

	aSource := FileSrvToArr( cPrg, 1 )
	If ( Empty( aSource ) )
		cMsgInfo := STR0157 //"Nao foi possivel abrir o arquivo:"
		cMsgInfo += CRLF
		cMsgInfo += cPrg
		cMsgInfo += CRLF
		Break
	EndIf

	nLoops	:= Len( aSource )
	For nLoop := 1 To nLoops
		aAdd( aListbox , { nLoop , aSource[ nLoop ] } )
	Next nLoop

	DEFINE FONT oFont NAME "Courier New" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE cCadastro From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL 
	
		@ aObjSize[1,1] , aObjSize[1,2] GROUP oGroup TO aObjSize[1,3] * 0.45,aObjSize[1,4] LABEL OemToAnsi( STR0149 ) OF oDlg PIXEL						//"Programa:"
		oGroup:oFont:= oFont
	
		@ aObjSize[1,1] + 10 , aObjSize[1,2] + 5	SAY OemToAnsi( cPrg )	SIZE 500,10 OF oGroup PIXEL FONT oFont

		oLbxSource				:= TWBrowse():New( aObjSize[2,1]/2,aObjSize[2,2]/2,aObjSize[2,4],aObjSize[2,3]/1.27,NIL,{ OemToAnsi( STR0150 ) , OemtoAnsi( STR0149 ) },NIL,oDlg,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,.F.,NIL,.T.,NIL,.F.,NIL,NIL,NIL)
		oLbxSource:SetArray( aListbox )
		oLbxSource:bLine 		:= { || LineLstBox( oLbxSource , .F. ) }
		oLbxSource:bLdblClick	:= { || Gpea290EdSource( oLbxSource , cCadastro ) }

	ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit ) CENTERED
	RestKeys( aSvKeys , .T. )

End Sequence

RC2->( MsGoto( nReg ) )

If !Empty( cMsgInfo )
	MsgInfo( cMsgInfo )
EndIf

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290SwErr ³Autor³Marinaldo de Jesus    ³ Data ³10/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Mostra o Erro de Compilacao para o Usuario                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290SwErr( cPrg , nLine , nCol , cErrStr )

Local aSource		:= FileSrvToArr( cPrg, 1 )

Local aSvKeys
Local aListbox
Local aOkNo

Local bSet15
Local bSet24
Local bDialogInit

Local cMsgInfo
Local cStrErr
Local cString
Local cNumCol
Local cMulCol

Local nLoop
Local nLoops

Local oLbxSource
Local oSource
Local oLine
Local oCol
Local oExpr
Local oNumCol
Local oMulCol
Local oErrStr
Local oErrLine
Local oGroup1
Local oGroup2
Local oGroup3
Local oGroup4
Local oFont
Local oDlg

/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Monta as Dimensoes dos Objetos                                ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Local aAdv2Size        := MsAdvSize()
Local aObj2Coords      := {} 
Local aObj2Size        := {}
Local aObj3Size        := {}
Local aInfo2AdvSize    := {}

aInfo2AdvSize    := { aAdv2Size[1] , aAdv2Size[2] , aAdv2Size[3] , aAdv2Size[4] , 1 , 1 }
aAdd( aObj2Coords , { 000 , 030 , .T. , .F. } )        
aAdd( aObj2Coords , { 000 , 030 , .T. , .F. } )			
aAdd( aObj2Coords , { 000 , 030 , .T. , .F. } )             
aAdd( aObj2Coords , { 000 , 100 , .T. , .T. , .T. } )
aObj2Size    := MsObjSize( aInfo2AdvSize , aObj2Coords )

aObj2Coords := {}
aAdd( aObj2Coords , { 000 , 030 , .T. , .F. } )        
aAdd( aObj2Coords , { 000 , 030 , .T. , .F. } )			
aAdd( aObj2Coords , { 000 , 030 , .T. , .F. } )             
aAdd( aObj2Coords , { 000 , 100 , .T. , .T. } )
aObj3Size    := MsObjSize( aInfo2AdvSize , aObj2Coords )

Begin Sequence

	If Empty( aSource )
		cMsgInfo := STR0157 //"Nao foi possivel abrir o arquivo:"
		cMsgInfo += CRLF
		cMsgInfo += cPrg
		cMsgInfo += CRLF
		Break
	EndIf

	aListbox	:= {}
	nLoops		:= Len( aSource )
	For nLoop := 1 To nLoops
		aAdd( aListbox , { ( nLoop <> nLine ) , nLoop , aSource[ nLoop ] } )
	Next nLoop

	If (;
			( nLine > 0 );
			.and.;
			( nLine <= nLoops );
		)
		cString	:= aSource[ nLine ]
		If ( nCol > 0 )
			nCol 	:= Min( nCol , Len( cString ) )
			cStrErr	:= SubStr( cString , nCol )
		Else
			cStrErr	:= cString
		EndIf
	Else
		cStrErr		:= ""
		cString		:= ""
	EndIf

	cNumCol	:= GetStrSeq( cString	, .T. )
	cMulCol := GetStrSeq( cNumCol	, .F. )

	aOkNo			:= Array( 02 )
	aOkNo[1]		:= LoadBitmap( GetResources() , "BR_VERDE"		)
	aOkNo[2]		:= LoadBitmap( GetResources() , "BR_VERMELHO"	)

	bSet15			:= { || RestKeys() , oDlg:End() }
	bSet24			:= { || RestKeys() , oDlg:End() }
	bDialogInit		:= { || EnchoiceBar( oDlg , bSet15 , bSet24 )  }

	DEFINE FONT oFont NAME "Courier New" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE cCadastro + OemToAnsi( " - " + cPrg ) From aAdv2Size[7],0 TO aAdv2Size[6],aAdv2Size[5] OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL 
	
		@ aObj2Size[1,1] , aObj2Size[1,2] GROUP oGroup1 TO aObj2Size[1,3],aObj2Size[1,4] LABEL OemToAnsi(STR0152) OF oDlg PIXEL										//"Erro de Compilação"
		oGroup1:oFont:= oFont

		@ aObj2Size[1,1] + 06 , aObj2Size[1,2] + 5	SAY oSource VAR OemToAnsi( STR0149 + " " + cPrg ) 						SIZE 500,10	OF oGroup1 PIXEL FONT oFont	//"Programa:	"
		@ aObj2Size[1,1] + 12 , aObj2Size[1,2] + 5	SAY oLine	VAR OemToAnsi( STR0150 + " " + AllTrim( Str( nLine ) ) )	SIZE 500,10	OF oGroup1 PIXEL FONT oFont	//"Linha:		"
		@ aObj2Size[1,1] + 18 , aObj2Size[1,2] + 5	SAY oCol	VAR OemToAnsi( STR0151 + " " + AllTrim( Str( nCol ) ) )		SIZE 500,10	OF oGroup1 PIXEL FONT oFont	//"Coluna:		"

		@ aObj2Size[2,1] , aObj2Size[2,2] GROUP oGroup2 TO aObj2Size[2,3],aObj2Size[2,4] LABEL OemToAnsi(STR0169) OF oDlg PIXEL										//"Expressao:"
		oGroup2:oFont:= oFont
		@ aObj2Size[2,1] + 06 , aObj2Size[2,2] + 5	SAY oExpr VAR OemToAnsi( cString )				 						SIZE 500,10	OF oGroup2 PIXEL FONT oFont	
		@ aObj2Size[2,1] + 12 , aObj2Size[2,2] + 5	SAY oNumCol VAR OemToAnsi( cNumCol )				 					SIZE 500,10	OF oGroup2 PIXEL FONT oFont	
		@ aObj2Size[2,1] + 18 , aObj2Size[2,2] + 5	SAY oMulCol VAR OemToAnsi( cMulCol ) COLOR CLR_RED	 					SIZE 500,10	OF oGroup2 PIXEL FONT oFont

		@ aObj2Size[3,1] , aObj2Size[3,2] GROUP oGroup3 TO aObj2Size[3,3],aObj2Size[3,4] LABEL OemToAnsi(STR0170) OF oDlg PIXEL										//"Erro:"
		oGroup3:oFont:= oFont
		@ aObj2Size[3,1] + 06 , aObj2Size[3,2] + 5	SAY oErrStr VAR OemToAnsi( cErrStr ) COLOR CLR_RED							SIZE 500,10	OF oGroup3 PIXEL FONT oFont	

		@ aObj3Size[4,1] , aObj3Size[4,2] GROUP oGroup4 TO aObj3Size[4,3],aObj3Size[4,4] LABEL OemToAnsi(STR0171) OF oDlg PIXEL										//"Conteudo do Erro:"
		oGroup4:oFont:= oFont
		@ aObj3Size[4,1] + 06 , aObj3Size[4,2] + 5	SAY oErrLine VAR OemToAnsi( cStrErr ) COLOR CLR_RED							SIZE 500,10	OF oGroup4 PIXEL FONT oFont	
		
	   	oLbxSource				:= TWBrowse():New( aObj2Size[4,1]+16,aObj2Size[4,2]+5,aObj2Size[4,3]-10,aObj2Size[4,4]-26,NIL,{ "" , OemToAnsi( STR0150 )  , OemToAnsi( STR0149 ) },NIL,oGroup4,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,.F.,NIL,.T.,NIL,.F.,NIL,NIL,NIL)
		oLbxSource:SetArray( aListbox )
	 	oLbxSource:bLine 		:= { || LineLstBox( oLbxSource , .T. , aOkNo , 1 ) }
	  	oLbxSource:bLdblClick	:= { || Gpea290EdSource( oLbxSource , cCadastro ) }
   	
   		If (;
				( nLine > 0 );
				.and.;
				( nLine <= nLoops );
			)	
			oLbxSource:nAt		:= nLine
		EndIf
  
	ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit ) CENTERED
	RestKeys( aSvKeys , .T. )

End Sequence

If !Empty( cMsgInfo )
	MsgInfo( cMsgInfo )
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290EdSource  ³Autor³Marinaldo de Jesus³ Data ³01/12/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Editar a Coluna do Codigo Fonte			 					³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³oListBox:blDblClick							   				³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290EdSource( oListBox , cTitulo )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Variaveis que serao inicializadas no Corpo da Funcao		  ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Local aSvKeys
Local aAdvSize
Local aInfoAdvSize
Local aObjSize
Local aObjCoords

Local bSet15
Local bSet24

Local cMemoEdit
Local oMemoEdit

Local oFont
Local oDlg

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Apenas se o ListBox nao Estiver Vazio      				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If Empty( oListBox:aArray )
		Break
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Obtem o Memo                               				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cMemoEdit := oListBox:aArray[ oListBox:nAt , oListBox:nColPos ]
	If ( ValType( cMemoEdit ) <> "C" )
		Break
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta as Dimensoes dos Objetos             				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aAdvSize		:= MsAdvSize( .T. , .T. )
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aObjCoords		:= { { 0 , 0 , .T. , .T. } }
	aObjSize := MsObjSize( aInfoAdvSize , aObjCoords )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Salva as Teclas de Atalho                  				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aSvKeys := GetKeys()

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para a Tecla <CTRL-O>						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bSet15	:= { || GetKeys() , oDlg:End() }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para a Tecla <CTRL-X>     	   				   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bSet24	:= { || GetKeys() , oDlg:End() }

	DEFINE FONT oFont NAME "Arial" SIZE 0,-15 //BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( cTitulo ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL 
			
		@ aObjSize[1,1],aObjSize[1,2] GET oMemoEdit VAR cMemoEdit MEMO SIZE aObjSize[1,4],(aObjSize[1,3]-15) FONT oFont HSCROLL CENTERED DESIGN NO VSCROLL OF oDlg PIXEL WHEN ( .T. )
		oMemoEdit:lReadOnly := .F.

		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 ) CENTERED
	RestKeys( aSvKeys , .T. )

End Sequence

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290GvTudOk³Autor³Marinaldo de Jesus   ³ Data ³08/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Gravacao das Informacoes no banco                           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290GvTudOk(	nOpcAlt			,;	//01 -> Opcao Retornada Pelos Blocos bSet15 ou bSet24 ( Confirma ou Cancela )
								cAlias			,;	//02 -> Alias do Arquivo Pai ( RC2 )
								nOpc			,;	//03 -> Opcao de Acordo com aRotina
							 	nReg			,;	//04 -> Numero do Registro do Arquivo Pai ( RC2 )
							 	aRc2Enchoice	,;	//05 -> Campos do Arquivo Pai ( RC2 ) Mesma Estrutrua do aHeader
							 	aRc2Cols		,;	//06 -> Array com o conteudo Atual do RC2
							 	aSvRc2Cols		,;	//07 -> Array com o conteudo Anterior do RC2
							 	aRc2VirtChoice 	,;	//08 -> Campos Virtuais do Arquivo Pai ( RC2 )
							 	aRC3Virtual		,;	//09 -> Campos Virtuais do Arquivo Filho ( RC3 )
							 	aRC3Recnos		,;	//10 -> Recnos do Arquivo Filho ( RC3 )
							 	aRc3Cols		,;	//11 -> aRc3Cols
							 	aSvRc3Cols		 ;	//12 -> Copia do aRc3Cols antes das alteracoes
							  )

Local lGrvTudOk := .T.

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Quando Confirmada a Opcao e Nao for Visualizacao Grava ou   Ex³
³clui as Informacoes do RC2 e RC3							   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If (;
		( nOpcAlt == 1 );	//Confirmou
		.and.;
		( nOpc != 2 );		//Nao eh Visualizacao
	)
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Quando For Copia Posiciona o RC2 No Final do Arquivo 	       ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( lGpea290Cpy  )
		nOpc := 3 //Inclusao
		aRotSetOpc( cAlias , @nReg , nOpc , .T. )
		aRC3Recnos := {}
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Removendo a Formula do Repositorio                           ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( nOpc == 5 )	//Exclusao
		RC2->( MsGoto( nReg ) )
		RC2->( GetTreeFrm( NIL , RC2_FILIAL , RC2_ORIGEM , RC2_CODIGO , .F. , NIL , .F. ) )
	EndIf
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Valida se fórmula não está em uso por roteiro de cálculo     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If !(Gpea290SwCod( nReg , .T. , .T. ))
		MsgInfo( OemToAnsi( STR0178 ) , OemToAnsi( STR0087 ) ) //"Fórmula encontra-se em uso por roteiro de cálculo - Deverá ser editada em modo exclusivo."###"Atençäo"
		Return( .F. )
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gravando/Incluido ou Excluindo Informacoes do RC2/RC3        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Gpea290Grava( 	@nOpcAlt		,;
					nOpc 			,;
				 	@nReg 			,;
				 	aRc2Enchoice 	,;
				 	aRc2Cols		,;
				 	aSvRc2Cols		,;
				 	aRc2VirtChoice 	,;
				 	aRC3Virtual 	,;
				 	@aRC3Recnos 	,;
				 	aRc3Cols		,;
				 	aSvRc3Cols		 ;
				 )

EndIf

Return( lGrvTudOk )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Grava ³Autor³Marinaldo de Jesus    ³ Data ³21/05/2002³
³          ³             ³     ³Marinaldo de Jesus    ³ Data ³12/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Gravacao das Informacoes									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290Grava(	nOpcAlt			,;	//01 -> Verifica se Teve Alguma Alteracao para Recompilar
								nOpc			,;	//02 -> Opcao de Acordo com aRotina
							 	nReg			,;	//03 -> Numero do Registro do Arquivo Pai ( RC2 )
							 	aRc2Enchoice	,;	//04 -> Campos do Arquivo Pai ( RC2 ) Mesma Estrutrua do aHeader
							 	aRc2Cols		,;	//05 -> Array com o Conteudo Atual do RC2
							 	aSvRc2Cols		,;	//06 -> Conteudo Anterior RC2
							 	aRc2VirtChoice 	,;	//07 -> Campos Virtuais do Arquivo Pai ( RC2 )
							 	aRC3Virtual		,;	//08 -> Campos Virtuais do Arquivo Filho ( RC3 )
							 	aRC3Recnos		,;	//09 -> Recnos do Arquivo Filho ( RC3 )
							 	aRC3Cols		,;	//10 -> aRc3Cols
							 	aSvRc3Cols		 ;	//11 -> Copia do aRc3Cols antes das alteracoes
							  )

Local aIndaCols			:= {}
Local aRc3NewRec		:= {}
Local aRecnos			:= {}

Local cVersao			:= ""
Local cLastRc3SeqFor	:= ""
Local cRc3SeqFor		:= ""
Local cRc3SeqPai		:= Space( GetSx3Cache( "RC3_SEQPAI" , "X3_TAMANHO" ) )
Local cRc2Filial		:= ""
Local cRc2Origem		:= ""
Local cRc2Codigo		:= ""

Local lAlter			:= .F.
Local lRc2Alter			:= .F.
Local lRc3Alter			:= .F.

Local nChoice			:= 0
Local nChoices			:= Len(	aRc2Enchoice  )
Local nHeader			:= 0
Local nHeaders			:= Len(	aRc3Header )
Local nCol				:= 0
Local nCols				:= Len(	aRC3Cols   )
Local nRecno			:= 0
Local nRecnos			:= Len(	aRC3Recnos )
Local nDeleted			:= GdFieldPos( "GDDELETED" 	, aRc3Header )
Local nRc3SeqFor		:= GdFieldPos( "RC3_SEQFOR"	, aRc3Header )
Local nRc3SeqPai		:= GdFieldPos( "RC3_SEQPAI"	, aRc3Header )
Local nRc2Modelo		:= RC2->( FieldPos( "RC2_MODELO" ) )
Local nSeqPaiFld		:= RC3->( FieldPos( "RC3_SEQPAI" ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Se for Exclusao ( nOpc == 5 )								   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If ( nOpc == 5 )

	If !Empty( nReg )
		Begin Transaction
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Elimino Primeiro o Pai para Garantir a Integridade Referencial³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			For nRecno := 1 To nRecnos
				RC3->( MsGoto( aRC3Recnos[ nRecno ] ) )
				If (;
						RC3->(;
								!Eof();
								.and.;
								RecLock( "RC3" , .F. , .F. );
							 );
					)
					RC3->( FieldPut( nSeqPaiFld , cRc3SeqPai ) )
				EndIf
			Next nRecno
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Deleto os Registros do RC3									   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			DelRecnos( "RC3" , @aRC3Recnos )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Deleto os Registros do RC2									   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			aAdd( aRecnos , nReg )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Se Excluir Formula do Sistema forca a Recarga				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If ( RC2->RC2_ORIGEM == "S_" )
				Gpea290FrmInit( .T. )
			EndIf
			DelRecnos( "RC2" , aRecnos , NIL , NIL , { { "RC2_DESOBS" , "RC2_CODOBS" } } , "SYP" )
		End Transaction
	EndIf
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se for Inclusao/Alteracao ( nOpc == 3 .or. nOpc == 4 )	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
ElseIf (;
			( nOpc == 3 );
			.or.;
			( nOpc == 4 );
		)	

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Atualizo os Valores para Verificar se Houveram Alteracoes	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nChoice := 1 To nChoices
		aRc2Cols[ 1 , nChoice ] := GetMemVar( aRc2Enchoice[ nChoice , 02 ] )
	Next nChoice

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se Houveram Alteracoes na Enchoice do RC2    	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	lRc2Alter := ( ( nReg == 0 ) .or. !ArrayCompare( aSvRc2Cols , aRc2Cols ) )

	Begin Transaction
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Grava as Informacoes da Enchoide do RC2					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ( lRc2Alter )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Gravacao de RC2                                       	   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If !Empty( nReg )
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Garanto o Posicionamento do Registro                  	   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				RC2->( MsGoto( nReg ) )
				Gpea290Lck( nReg )
			Else
				RecLock( "RC2" , .T. , .F. )
				RC2->RC2_FILIAL := xFilial("RC2")
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Grava a Origem da Formula									   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				RC2->RC2_ORIGEM := GetMemVar( "RC2_ORIGEM" )
			EndIf
			
			
			If nRc2Modelo > 0
				RC2->RC2_MODELO = MV_MODFOL
			EndIf
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Grava os Demais Campos da Enchoide do RC2					   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			For nChoice := 1 To nChoices
				If ( aScan( aRc2VirtChoice , { |cCpo| ( cCpo == aRc2Enchoice[ nChoice , 02 ] ) } ) == 0 )
					RC2->( FieldPut( FieldPos( aRc2Enchoice[ nChoice , 02 ] ) , aRc2Cols[ 1 , nChoice ] ) )
				ElseIf ( aRc2Enchoice[ nChoice , 02 ] == "RC2_DESOBS" )
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Grava o Campo Memo                                            ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					MsMm(RC2->RC2_CODOBS,NIL,NIL,aRc2Cols[ 1 , nChoice ],1,NIL,NIL,"RC2","RC2_CODOBS")
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³Garanto Lock para o RC2 que pode ter sido Liberado pela MsMm()³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					nReg := RC2->( Recno() )
					Gpea290Lck( nReg )
				EndIf
			Next nChoice
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³UnLock para Garantir o Commit								   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			RC2->( MsUnLock() )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Obtenho o Recno											   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nReg := RC2->( Recno() )
		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Garanto o Lock que so sera Liberado na Saida da Gpea290Mnt()  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		Gpea290Lck( nReg )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Gravacao de RC3 ( Apenas se Houver Diferenca Entre o RC3Cols e³
		³o aSvRc3Cols )												   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ( lRc3Alter := !ArrayCompare( aRC3Cols , aSvRc3Cols ) )

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Renumera a Sequencia do campo RC3_SEQFOR e RC3_SEQPAI		   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			cRc3SeqFor	:= Replicate( "0" , GetSx3Cache( "RC3_SEQFOR" , "X3_TAMANHO" ) )
			aIndaCols	:= {}
			nCols := Len( aRC3Cols )
			For nCol := 1 To nCols
				If !( aRC3Cols[ nCol , nDeleted ] )
					cRc3SeqFor 		:= __Soma1( cRc3SeqFor )
					cLastRc3SeqFor	:= aRC3Cols[ nCol , nRc3SeqFor ]
					aRC3Cols[ nCol , nRc3SeqFor ] := cRc3SeqFor
					nRecno := 0
					While ( ( nRecno := aScan( aRC3Cols , { |x| ( !( x[nDeleted] ) .and. ( x[nRc3SeqPai] == cLastRc3SeqFor ) ) } , ++nRecno ) ) > 0 )
						If ( aScan( aIndaCols , { |nInd| ( nInd == nRecno ) } ) == 0 )
							aRC3Cols[ nRecno , nRc3SeqPai ] := cRc3SeqFor
							aAdd( aIndaCols , nRecno )
						EndIf	
					End While
				EndIf
			Next nCol

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Elimino Primeiro o Pai para Garantir a Integridade Referencial³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			For nRecno := 1 To nRecnos
				RC3->( MsGoto( aRC3Recnos[ nRecno ] ) )
				If (;
						RC3->(;
								!Eof();
								.and.;
								RecLock( "RC3" , .F. , .F. );
							 );
					)
					RC3->( FieldPut( nSeqPaiFld , cRc3SeqPai ) )
				EndIf
			Next nRecno

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Exclui os Registros do RC3                            	   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			RC3->( DelRecnos( "RC3" , @aRC3Recnos ) )

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Obtem as Informacoes do RC2                           	   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			cRc2Filial	:= RC2->RC2_FILIAL
			cRc2Origem	:= RC2->RC2_ORIGEM
			cRc2Codigo	:= RC2->RC2_CODIGO

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Grava os Novos Registros no RC3                       	   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nRc3SeqPai	:= GdFieldPos( "RC3_SEQPAI" , aRc3Header )
			aIndaCols	:= {}
			For nCol := 1 To nCols
				If !( aRC3Cols[ nCol , nDeleted ] )
					If RC3->( RecLock( "RC3" , .T. , .F. ) )
						For nHeader := 1 To nHeaders
							If ( aScan( aRC3Virtual , { |cCpo| ( cCpo == aRc3Header[ nHeader , 02 ] ) } ) == 0 )
								If ( nHeader == nRc3SeqPai )
									Loop
								EndIf
								If !( aRc3Header[ nHeader , 02 ] $ "RC3_FILIAL/RC3_ORIGEM/RC3_CODIGO" )
									RC3->( FieldPut( FieldPos( aRc3Header[ nHeader , 02 ] ) , aRC3Cols[ nCol , nHeader ] ) )
								ElseIf ( aRc3Header[ nHeader , 02 ] == "RC3_FILIAL" )
									RC3->( FieldPut( FieldPos( "RC3_FILIAL" ) , cRc2Filial ) )
								ElseIf ( aRc3Header[ nHeader , 02 ] == "RC3_ORIGEM" )
									RC3->( FieldPut( FieldPos( "RC3_ORIGEM" ) , cRc2Origem ) )
								ElseIf ( aRc3Header[ nHeader , 02 ] == "RC3_CODIGO" )
									RC3->( FieldPut( FieldPos( "RC3_CODIGO" ) , cRc2Codigo ) )
								EndIf	
							EndIf
						Next nHeader
						RC3->( MsUnlock() )
						/*/
						ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						³ Adiciono Informacoes para Gravacao do RC3_SEQPAI			   ³
						ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
						aAdd( aIndaCols		, nCol )
						aAdd( aRc3NewRec	, RC3->( Recno() ) )
					EndIf
				EndIf
			Next nRecno

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Grava o RC3_SEQPAI										   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nRecnos := Len( aRc3NewRec )
			For nRecno := 1 To nRecnos
				RC3->( MsGoto( aRc3NewRec[ nRecno ] ) )
				If (;
						RC3->(;
								!Eof();
								.and.;
								RecLock( "RC3" , .F. , .F. );
							 );
					)		 
					cRc3SeqPai := aRC3Cols[ aIndaCols[ nREcno ] , nRc3SeqPai ] 
					RC3->( FieldPut( nSeqPaiFld , cRc3SeqPai ) )
					RC3->( MsUnlock() )
				EndIf
			Next nRecno

			aRC3Recnos := aClone( aRc3NewRec )

		EndIf

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se Houveram Alteracoes        					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		lAlter := ( ( lRc2Alter ) .or. ( lRc3Alter ) )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Verifica se Houveram Alteracoes        					   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ( lAlter )
			If Gpea290Lck( nReg )
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Grava o Status para Recompilacao ("1")						   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				RC2->RC2_RECOMP := "1"
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Grava a Nova Versao do Roteiro							   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	            If ( lManutence )
					cVersao	:= Replicate( "0" , GetSx3Cache( "RC2_VERSAO" , "X3_TAMANHO" ) )
					If ( nOpc == 3 )
						RC2->RC2_VERSAO := __Soma1( cVersao )
					ElseIf ( nOpc == 4 )
						cVersao		:= RC2->RC2_VERSAO
						If Empty( cVersao )
							cVersao	:= Replicate( "0" , GetSx3Cache( "RC2_VERSAO" , "X3_TAMANHO" ) )
						EndIf
						RC2->RC2_VERSAO	:= __Soma1( cVersao )
					EndIf
				EndIf
				RC2->( MsUnLock() )
				Rc2RecSry() //Forcar a Recompilacao do Roteiro
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³Garanto o Lock que so sera Liberado na Saida da Gpea290Mnt()  ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				Gpea290Lck( nReg )
			EndIf
		Else
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³Altero Status para Evitar passar pela Rotina de Compilacao uma³
			³vez que não foram feitas modificacoes						   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nOpcAlt := 0
		EndIf

	End Transaction

EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290ExcluChk ³ Autor ³Marinaldo de Jesus³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se a Formula Pode Ser Excluida   					 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290ExcluChk( cAlias , nReg , nOpc )

Local aArea			:= GetArea()
Local aAreas		:= {}

Local cRc2Fil
Local cFormula
Local cMsgYesNo
Local cTitLog

Local nAreas

Local lDelOk

//RC3
aAdd( aAreas , Array( 04 ) )
nAreas := Len( aAreas )
aAreas[nAreas,01] := RC3->( GetArea() )
aAreas[nAreas,02] := {}
aAreas[nAreas,03] := NIL
aAreas[nAreas,04] := { |aLog,aLogTitle| Gpea290ChkDel( "RC3" , cFormula , { "RC3_RESULT" , "RC3_FORM01" , "RC3_FORM02" } , @aLog , @aLogTitle , { |cFormula| ( Upper( AllTrim( RC3_ORIGEM + RC3_CODIGO ) ) <> cFormula ) } ) } 

//SRM
aAdd( aAreas , Array( 04 ) )
nAreas := Len( aAreas )
aAreas[nAreas,01] := SRM->( GetArea() )
aAreas[nAreas,02] := {}
aAreas[nAreas,03] := NIL
aAreas[nAreas,04] := { |aLog,aLogTitle| Gpea290ChkDel( "SRM" , cFormula , { "RM_FORMULA" } , @aLog , @aLogTitle ) }

cMsgYesNo := STR0080	//""O Sistema Agora Ira efetuar a Verificacao para ver se a Formula selecionada para"
cMsgYesNo += CRLF
cMsgYesNo += STR0081	//"Exclusao esta sendo utilizada. A verifica‡„o pode ser demorada !!"
cMsgYesNo += CRLF
cMsgYesNo += CRLF
cMsgYesNo += STR0082	//"Confirma a exclus„o da Formula?"

cTitLog := STR0084		//"Log de Ocorrencias na Exclusao de Formulas"

( cAlias )->( MsGoto( nReg ) )
cRc2Fil	    := xFilial( "RC2" )
cFormula	:= Upper( AllTrim( RC2->( RC2_ORIGEM + RC2_CODIGO ) ) )

lDelOk		:= ChkDelRegs(	cAlias			,;	//01 -> Alias de Dominio
							nReg			,;	//02 -> Registro do Dominio
							nOpc			,;	//03 -> Opcao para a AxDeleta
							cRc2Fil			,;	//04 -> Filial do do Dominio
							cFormula		,;	//05 -> Chave do do Dominio
							aAreas			,;	//06 -> Array contendo informacoes dos arquivos a serem pesquisados
							cMsgYesNo		,;	//07 -> Mensagem para MsgYesNo
							cTitLog			,;	//08 -> Titulo do Log de Delecao
							NIL				,;	//09 -> Mensagem para o corpo do Log
							.F.				,;	//10 -> Se executa AxDeleta
							.T.				,;	//11 -> Se deve Mostrar o Log
							NIL				,;	//12 -> Array com o Log de Exclusao
							NIL				,;	//13 -> Array com o Titulo do Log
							NIL				,;	//14 -> Bloco para Posicionamento no Arquivo
							NIL				,;	//15 -> Bloco para a Condicao While
							NIL				,;	//16 -> Bloco para Skip/Loop no While
							.T.				,;	//17 -> Verifica os Relacionamentos no SX9
							{ "RC3" }		,;	//18 -> Alias que nao deverao ser Verificados no SX9
							NIL				 ;	//19 -> Se faz uma checagem soft
					 	 )

RestArea( aArea )

Return( lDelOk )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290ChkDel	³ Autor ³Marinaldo de Jesus³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Tratamento Especial para verificacao de Delecao para as  Tabe³
³          ³las SR3 e SRM                                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290ChkDel( cAlias , cFormula , aCampos , aLog , aLogTitle , bCondChk , bExec )

Local cFilArea		:= xFilial( cAlias )
Local cFieldFil		:= ( PrefixoCpo( cAlias ) + "_FILIAL" )
Local cConteudo		:= ""

Local lDelOk		:= .T. 

Local nOrder		:= RetOrder( cAlias , cFieldFil )
Local nCampo		:= 0
Local nCampos		:= 0

DEFAULT aLog		:= {}
DEFAULT aLogTitle	:= {}
DEFAULT bCondChk	:= { |cFormula| .T. }

Begin Sequence

	( cAlias )->( dbSetOrder( nOrder ) )
	If ( cAlias )->( dbSeek( cFilArea , .F. ) )
		While ( cAlias )->(;
								!Eof();
								.and.;
								( FieldGet( FieldPos( cFieldFil ) ) == cFilArea );
						  )
			nCampos := Len( aCampos )
			For nCampo := 1 To nCampos
			
				If ( cAlias )->( !Eval( bCondChk , cFormula ) )
					Loop
				EndIf
				cConteudo := ( cAlias )->( Upper( AllTrim( FieldGet( FieldPos( aCampos[ nCampo ] ) ) ) ) )
				cConteudo := StrTran( cConteudo ,'()','')
				
				If ( cFormula == cConteudo )
					If ( ValType( bExec ) == "B" )
						( cAlias )->( Eval( bExec ) )
					Else
						If Empty( aLog )
							aAdd( aLog , STR0085 + cFormula + STR0086 ) //"A Formula "###" nao pode ser Excluida pois esta sendo utilizada nos arquivos abaixo"
							aAdd( aLog , "" )
							aAdd( aLog , "" )
						EndIf
						aAdd( aLog , cAlias + Space( 05 ) + ( cAlias )->( StrZero( Recno() , 10 )  + Space( 01 ) + AllTrim( __ExecMacro( IndexKey() ) ) + "/" + cConteudo ) )
					EndIf	
				EndIf
			Next nCampo
			( cAlias )->( dbSkip() )
		End While
	EndIf

End Sequence

If !( lDelOk := ( Len( aLog ) == 0 ) )
	If Empty( aLogTitle )
		aAdd( aLogTitle , STR0083 )	//"Arquivo Registro   Chave/Conteudo"
	EndIf	
EndIf

Return( lDelOk )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡ao    ³Rc2RecSry	 ³Autor³Marinaldo de Jesus    ³ Data ³23/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Forca a Recompilacao do Roteiro                             ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Generico 	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Rc2RecSry()

Local bExec := { |aSryArea,aArea|;
					aArea		:= GetArea(),;
					aSryArea	:= SRY->( GetArea( "SRY" ) ) ,;
					SRY->( dbSetOrder( RetOrder( "SRY" , "RY_FILIAL+RY_CALCULO" ) ) ),;
					IF(;
							SRY->( MsSeek( SRM->( RM_FILIAL + RM_CALCULO ) , .F. ) );
							.and.;
							RecLock( "SRY" , .F. ),;
							(;
								SRY->RY_RECOMP := "1",;
								SRY->( MsUnLock() ),;
								RestArea( aSryArea ),;
								RestArea( aArea ),;
								.T.;
							),;
							(;
								RestArea( aSryArea ),;
								RestArea( aArea ),;
								.F.;
							);	
						);
				}

Return( Gpea290ChkDel( "SRM" , Upper( AllTrim( RC2->( RC2_ORIGEM + RC2_CODIGO ) ) ) , { "RM_FORMULA" } , NIL , NIL , NIL , bExec ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡ao    ³Gpea290Sort	 ³Autor³Marinaldo de Jesus    ³ Data ³21/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Ordernar o Vetor do aCols                                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Sort( @aCols , aHeader ) 							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³aCols		-> Array a Ser Sorteado							³
³          ³aHeader		-> Array com os Campos							³
³          ³cCpo   		-> Campo para o Sorter   						³
³          ³lDescending	-> Ordem Decrescente							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290Sort( aCols , aHeader , cCpo , lDescending )

Local nPosSort	:= 0

DEFAULT aCols		:= {}
DEFAULT aHeader		:= {}
DEFAULT cCpo		:= "RC3_SEQFOR"
DEFAULT lDescending	:= .F.

nPosSort := GdFieldPos ( cCpo , aHeader )

If !( lDescending )
	aSort( aCols , NIL , NIL , { |x,y| x[ nPosSort ] < y[ nPosSort ] } )
Else
	aSort( aCols , NIL , NIL , { |x,y| x[ nPosSort ] > y[ nPosSort ] } )
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpe290Window³ Autor ³Mauricio T. Takakura  ³ Data ³27/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Desenho das Janelas e Barra de Ferramentas                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpe290Window()      								    	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                             ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpe290Window(	oDlg			,;		// 01-objeto da Janela
								oBar2			,;		// 02-varra de Ferramentas da Edicao de Formula
								oBar1			,;		// 03-varra de Ferramentas da tree da formula
								aRC3Fields		,;		// 04-campo da enchoice da formula
								aRC3Altera		,;		// 05-campo que poderao ser alterados
							   	cTreeCopy		,;		// 06-string com o bloco para Copiar Itens
							   	cTreePstCopy	,;		// 07-string com o bloco para colar copia
							   	cTreeCut		,;		// 08-string com o bloco para recortar itens
							   	cTreePstCut		,;		// 09-string com o bloco para colar recorte
							   	cFilRCA			,;		// 10-filial corrente
							   	cBmp_Condicao	,;		// 11-imagem da Condicao (If)
							   	cBmp_Execucao	,;		// 12-imagem da Execucao
							   	cBmp_Enquanto	,;		// 13-imagem de Enquanto (While)
							   	cBmp_Mensagem	,;		// 14-imagem de Mensagem
								nOpc			,;		// 15-opcao do Menu
								bGravaFormula	 ;		// 16-Tudo Ok da Formula
							)

Local bIncExe						// bloco para inclusao de novo item Execucao 
Local bIncCon						// bloco para inclusao de novo item Condicao
Local bIncEnq						// bloco para inclusao de novo item Enquanto
Local bIncMsg						// bloco para inclusao de novo item Mensagem

Local bTreeDel 						// bloco para exclusao de itens
Local bTreeFind 					// bloco de pesquisa na tree
Local bEditForm						// bloco para executar edicao da formula
Local bCamposForm					// bloco para janela de campos
Local bOperadores					// bloco para janela de operadores
Local bCancelForm					// bloco para cancelar a edicao da formula

Local cTipoInit						// variavel com tipo de campo a ser selecionado na janela
Local cBmp_Del	  	:= "BMPDEL"		// Delecao
Local cBmp_Cut	  	:= "S4WB006N"	// Recortar
Local cBmp_Copy	  	:= "S4WB005N"	// Copiar
Local cBmp_Paste	:= "S4WB007N"	// Colar
Local cBmp_Form		:= "PMSTOOLS" 	// Edicao da formula
Local cBmp_OK		:= "OK"			// OK
Local cBmp_Cancel	:= "CANCEL"		// Cancelar
Local cBmp_Find		:= "PMSPESQ"	// Pesquisar
Local cBmp_Edit		:= "NOTE"		// Editar Formula 
Local cBmp_Opera	:= "BUDGETY"	// Operadores

Local oFont1						// Objeto da Fonte
Local o2Panel						// Painel da Barra de Ferramentas da Estrutura da Formula
Local o3Panel						// Painel da Barra de Ferramentas da Edicao da Formula
Local oGroup2						// Grupo para mensagens
Local oBtn_Cut						// Botao para Recortar item
Local oBtn_Copy						// Botao para Copiar item
Local oBtn_Paste					// Botao para Colar item
Local oBtn_Sep1
Local oBtn_Sep2
Local oBtn_Sep3

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Group de mensagens                                       	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
@ aObj1Size[2][1],aObj1Size[2][4]*0.55 GROUP oGroup2 TO (oDlg:nBottom/2)-41,aObj1Size[2][4]-5 OF oDlg; //Edicao da Formula
     PIXEL COLOR CLR_BLUE
oGroup2:SetFont(oFont1)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Barra de Ferramentas da Estrutura da Formula                 ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

o2Panel:= TPanel():New(	aObj1Size[1,1],;
						aObj1Size[1,2],;
						NIL,;
						oDlg,;
						,;
						,;
						,;
						,;
						,;
						aObj1Size[1,4]*0.55,;
						aObj1Size[1,3],;
						.F.,;
						.F.;
					  )

bIncCon   		:= { || Eval(oRc3Tree:bLostFocus), cTipoItem := ".CON.", nOpcTree := 1, GpeEditForm( nOpc , oBar1, oBar2, aRC3Fields, .T., NIL, oDlg ) }
bIncExe   		:= { || Eval(oRc3Tree:bLostFocus), cTipoItem := ".EXE.", nOpcTree := 1, GpeEditForm( nOpc , oBar1, oBar2, aRC3Fields, .T., NIL, oDlg ) }
bIncEnq   		:= { || Eval(oRc3Tree:bLostFocus), cTipoItem := ".ENQ.", nOpcTree := 1, GpeEditForm( nOpc , oBar1, oBar2, aRC3Fields, .T., NIL, oDlg ) }
bIncMsg   		:= { || Eval(oRc3Tree:bLostFocus), cTipoItem := ".MSG.", nOpcTree := 1, GpeEditForm( nOpc , oBar1, oBar2, aRC3Fields, .T., NIL, oDlg ) }

bTreeDel  		:= { || CursorWait() , IF( MsgNoYes( STR0148 , STR0087 ) , Gpea290DelItem() , NIL ) , CursorArrow() } //"Deseja Excluir o Item?"###"Atençäo"
bTreeFind 		:= { || InApdxTreeExec( "ApdTreeSeek", {oRc3Tree , "+-", NIL, GetSx3Cache( "RC3_SEQFOR" , "X3_TAMANHO" ) } ), Eval(oRc3Tree:bChange)} 		// pesquisar na arvore
bEditForm 		:= { || Eval(oRc3Tree:bLostFocus), nOpcTree := 2, GpeEditForm( nOpc , oBar1, oBar2, aRC3Fields, .T., NIL, oDlg )}

bCamposForm 	:= { || CursorWait() , cTipoInit := Gpe290Tipo(), fCamposForm( IF( cTipoInit == "1" , Val(cTipoInit) , ( Val(cTipoInit) + 1 ) ) , @cTipoInit, SubStr(ReadVar(),4) ) , CursorArrow() }
bOperadores 	:= { || Gpea290Opera() }
bGravaFormula	:= { |lNodeSetCol| IF(;
										GpeGravaaCols( cFilRCA, cBmp_Condicao, cBmp_Execucao, cBmp_Enquanto, cBmp_Mensagem, lNodeSetCol ),;
					    				(;
					    					GpeEditForm( nOpc , oBar1, oBar2, aRC3Fields, .F., NIL, oDlg ),;
					    					Eval(oRc3Tree:bGotFocus),;
					    					.T.;
					    				),;
					    				.F.;
					    			  );
					  }
bCancelForm		:= { || GpeEditForm( nOpc , oBar1, oBar2, aRC3Fields ,	.F., .T., oDlg ),  Eval(oRc3Tree:bGotFocus) }

// blocos declarados em Gpea290Mnt //
DEFINE BUTTONBAR oBar1 SIZE 25,25 3D TOP OF o2Panel NOAUTOADJUST
@ 000,001 BTNBMP oBtn_Cond RESOURCE cBmp_Condicao SIZE 20,20 OF oBar1 ACTION Eval(bIncCon) OF oDlg PIXEL
oBtn_Cond:CTOOLTIP := STR0115 // "Incluir uma [Condicao] na formula - <F5>"

@ 000,001 BTNBMP oBtn_Exec RESOURCE cBmp_Execucao SIZE 20,20 OF oBar1 ACTION Eval(bIncExe) OF oDlg PIXEL
oBtn_Exec:CTOOLTIP := STR0116 // "Incluir uma [Execucao] na formula - <F6>"

@ 000,001 BTNBMP oBtn_Enq RESOURCE cBmp_Enquanto SIZE 20,20 OF oBar1 ACTION Eval(bIncEnq) OF oDlg PIXEL
oBtn_Enq:CTOOLTIP := STR0130 // "Incluir um [Enquanto] na formula - <F7>"

@ 000,001 BTNBMP oBtn_Msg RESOURCE cBmp_Mensagem SIZE 20,20 OF oBar1 ACTION Eval(bIncMsg) OF oDlg PIXEL
oBtn_Msg:CTOOLTIP := STR0176 // "Incluir uma [Mensagem] na formula - <F12>"

@ 000,001 BTNBMP oBtn_Sep1 RESOURCE "SEPARADOR2"  SIZE 20,20 OF oBar1 ACTION .F. OF oDlg PIXEL

@ 000,001 BTNBMP oBtn_Edit RESOURCE cBmp_Edit SIZE 20,20 OF oBar1 ACTION Eval(bEditForm) OF oDlg PIXEL
oBtn_Edit:CTOOLTIP := STR0104 // "Editar Formula - <F8>"

@ 000,001 BTNBMP oBtn_Sep2 RESOURCE "SEPARADOR2" SIZE 20,20 OF oBar1 ACTION .F. OF oDlg PIXEL

@ 000,001 BTNBMP oBtn_Find RESOURCE cBmp_Find SIZE 20,20 OF oBar1 ACTION Eval(bTreeFind) OF oDlg PIXEL
oBtn_Find:CTOOLTIP := STR0005 // "Pesquisar "

@ 000,001 BTNBMP oBtn_Cut RESOURCE cBmp_Cut SIZE 20,20 OF oBar1 ACTION fOpcTBar(oDlg,1, cTreeCut) OF oDlg PIXEL
oBtn_Cut:CTOOLTIP := STR0118 // "Recortar"

@ 000,001 BTNBMP oBtn_Copy RESOURCE cBmp_Copy SIZE 20,20 OF oBar1 ACTION fOpcTBar(oDlg,2,cTreeCopy) OF oDlg PIXEL
oBtn_Copy:CTOOLTIP := STR0089 // "Copiar"

@ 000,001 BTNBMP oBtn_Paste RESOURCE cBmp_Paste SIZE 20,20 OF oBar1 ACTION fOpcTBar(oDlg,3,cTreePstCopy, cTreePstCut) OF oDlg PIXEL
oBtn_Paste:CTOOLTIP := STR0124 // "Colar"

@ 000,001 BTNBMP oBtn_Sep3 RESOURCE "SEPARADOR2" SIZE 20,20 OF oBar1 ACTION .F. OF oDlg PIXEL

@ 000,001 BTNBMP oBtn_Del RESOURCE cBmp_Del SIZE 20,20 OF oBar1 ACTION Eval(bTreeDel) OF oDlg PIXEL
oBtn_Del:CTOOLTIP := STR0117 // "Excluir a sequencia atual da formula"

// barra de ferramentas de edicao //
o3Panel:= TPanel():New(	aObj1Size[1,1],;
						aObj1Size[1,4]*0.55,;
						NIL,;
						oDlg,;
						,;
						,;
						,;
						,;
						,;
						aObj1Size[1,4],;
						aObj1Size[1,3],;
						.F.,;
						.F.;
					  )
					  
DEFINE BUTTONBAR oBar2 SIZE 25,25 3D TOP OF o3Panel NOAUTOADJUST

@ 000,001 BTNBMP oBtn_Form RESOURCE cBmp_Form 	SIZE 20,20 	OF oBar2 ACTION Eval(bCamposForm)
oBtn_Form:CTOOLTIP := STR0125 // "Janela de Edicao da Formula - <F3>"
oBar2:lActive := .F.

@ 000,001 BTNBMP oBtn_Opera RESOURCE cBmp_Opera	SIZE 20,20 	OF oBar2 ACTION Eval(bOperadores)
oBtn_Opera:CTOOLTIP := STR0105 // "Janela de Operadores - <F3>"
 
@ 000,001 BTNBMP oBtn_OK RESOURCE cBmp_OK 	SIZE 20,20 	OF oBar2 ACTION Eval( bGravaFormula , .T. )
oBtn_OK:CTOOLTIP := STR0078 // "OK - <F9>"

@ 000,001 BTNBMP oBtn_Cancel RESOURCE cBmp_Cancel 	SIZE 20,20 	OF oBar2 ACTION Eval(bCancelForm)
oBtn_Cancel:CTOOLTIP := STR0079 // "Cancelar - <F10>"

If !(;
		( nOpc == 3 );
		.or.;
		( nOpc == 4 );
	)
	oBtn_Cond:lActive 	:= .F.
	oBtn_Exec:lActive 	:= .F.
	oBtn_Msg:lActive 	:= .F.
	oBtn_Del:lActive 	:= .F.
	oBtn_Cut:lActive 	:= .F.
	oBtn_Copy:lActive  	:= .F.
	oBtn_Paste:lActive 	:= .F.
	oBtn_Edit:lActive  	:= .F.
	oBtn_Enq:lActive	:= .F.
EndIf

oBtn_Sep1:lActive	:= .t.
oBtn_Sep2:lActive	:= .t.
oBtn_Sep3:lActive	:= .t.

Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³ Gpea290F3Key ³Autor³Mauricio Takakura    ³ Data ³18/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Chamada para as opcoes dos botoes de Campos e Operadores    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290F3Key()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³Generico      												³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpea290F3Key( nOpc )

Local cVar		:= ""
Local nPosCtrl 	:= oRc3Enchoice:nCtrl

If (;
		( nOpc <> 2 );
		.and.;
		( nOpc <> 5 );
	)	

	nPosCtrl 	:= oRc3Enchoice:nCtrl
	
	cVar :=	SubStr( ReadVar() , 4 )

	If (;
			( Upper( cVar ) == "RC3_RESM" );
			.or.;
			( Upper( cVar ) == "RC3_FOR01M" );
			.or.;
			( Upper( cVar ) == "RC3_FOR02M" );
		)	
		Eval( oBtn_Form:bAction )
	ElseIf (;
				( Upper( cVar )  == "RC3_OPERA1" );
				.or.;
				( Upper( cVar ) == "RC3_OPERA2" );
				.or.;
				( Upper( cVar ) == "RC3_OPERA3" );
			)	
		Eval( oBtn_Opera:bAction )
	EndIf
	oRc3Enchoice:aEntryCtrls[ nPosCtrl ]:SetFocus()
EndIf	

Return ( .T. )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³GpValCutCpy   ³Autor³ Emerson Rosa        ³ Data ³24/07/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Processa as opcoes dos botoes                               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fOpcTBar()													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³Generico      												³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function GpValCutCpy(lCopy)

Local cGrpItem 	:= "" 
Local cMsgInfo	:= ""

Local lRet 		:= .T.

cGrpItem := SubStr(oRc3Tree:GetCargo(),1,2)

If cGrpItem == "*-"
	cMsgInfo := STR0143	//'Nao e possivel '
	cMsgInfo += If(lCopy, STR0089, STR0118)  // Copiar / Colar
	cMsgInfo += STR0144 // " o Item Selecionado"
	MsgInfo( cMsgInfo ) // "Nao e possivel " #Copiar ou Colar" 
	lRet := .F.
EndIf

Return(lRet)

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³fOpcTBar()    ³Autor³ Emerson Rosa        ³ Data ³24/07/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Processa as opcoes dos botoes                               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fOpcTBar()													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³Generico      												³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fOpcTBar(	oDlg		,;		// objeto do janela
							nOpcTBar	,;		// opcao do botao 1-condicao/2-execucao/3-Excluir/4-Recortar/5-Copiar/6-Colar
							cTreeCode	,;		// string com os blocos de codigo
							cTreeCode2   ;		// string com os blocos de codigo
						)
Local aTreeNodes 	:= {}			// array com os itens recortados

Local bIncOption	:= { || NIL }	// code block da opcao de colar - recorte ou copia
Local bTreeCode		:= { || NIL }   // Bloco para Copia

Local cCodRC2		:= "" 			// chave da tabela

Local lTipo			:= .T.			// tipo do retorno do Recortar

Local nOption		:= 0			// Opcao selecionada para colar

If ( nOpcTBar == 1 ) // Recortar
	aTreeNodes := GetCutTreeNodes()
	If Len(aTreeNodes) > 0
		lTipo := (GpeaSeekItem( aTreeNodes ) = NIL)	// retorna verdade se encontrar item 
	EndIf
	bTreeCode := __ExecMacro( cTreeCode )
	Eval(bTreeCode)
	oRc3Tree:SetFocus()
ElseIf ( nOpcTBar == 2 ) // Copiar
	aTreeNodes := GetCopyTreeNodes()
	If Len(aTreeNodes) > 0
		lTipo := (GpeaSeekItem( aTreeNodes ) = NIL)	// retorna verdade se encontrar item 
	EndIf
	bTreeCode := __ExecMacro( cTreeCode )
	Eval(bTreeCode)
	oRc3Tree:SetFocus()	
ElseIf ( nOpcTBar == 3 ) // Colar
	If ( Len(GetCopyTreeNodes()) > 0 ) .And. ( Len(GetCutTreeNodes()) > 0 )
		bIncOption	:= { || Aviso( OemToAnsi( STR0087 ) /*/'Atencao'*/, OemToAnsi( STR0074 ) /*/'Selecione a opcao'*/ , { OemToAnsi( "&"+STR0123 ) /*/'Colar Copia'*/ , OemToAnsi( "&"+STR0119 ) /*/'Colar Recorte'*/, OemToAnsi( "&"+STR0112 ) /*/'Cancelar'*/  } ) }
	ElseIf ( Len(GetCopyTreeNodes()) > 0 )
		bIncOption	:= { || Aviso( OemToAnsi( STR0087 ) /*/'Atencao'*/, OemToAnsi( STR0074 ) /*/'Selecione a opcao'*/ , { OemToAnsi( "&"+STR0123 ) /*/'Colar Copia'*/ , OemToAnsi( "&"+STR0112 ) /*/'Cancelar'*/  } ) }
	ElseIf ( Len(GetCutTreeNodes()) > 0 )
		bIncOption	:= { || Aviso( OemToAnsi( STR0087 ) /*/'Atencao'*/, OemToAnsi( STR0074 ) /*/'Selecione a opcao'*/ , { OemToAnsi( "&"+STR0119 ) /*/'Colar Recorte'*/, OemToAnsi( "&"+STR0112 ) /*/'Cancelar'*/  } ) }
	EndIf
	nOption	:= Eval( bIncOption )

	If 	( Len(GetCopyTreeNodes()) > 0 .And. Len(GetCutTreeNodes()) > 0 .And. nOption == 1) .Or.;
		( Len(GetCopyTreeNodes()) > 0 .And. nOption == 1)
		cCodRC2			:= GetMemVar( "RC2_ORIGEM" ) + GetMemVar( "RC2_CODIGO" )
		cLastItemNum 	:= NodeMaxItem( GetTreeNodes())
		cAliasChildren 	:= "RC3"
		cItemField		:= "RC3_SEQFOR"
		bTreeCode := __ExecMacro( cTreeCode )
		Eval(bTreeCode)
	ElseIf ( Len(GetCopyTreeNodes()) > 0 .And. Len(GetCutTreeNodes()) > 0 .And. nOption == 2) .Or.;
		( Len(GetCutTreeNodes()) > 0 .And. nOption == 1)
		bTreeCode := __ExecMacro( cTreeCode2 )
		Eval(bTreeCode)
	EndIf
EndIf

Return ( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpe290Tipo   ³Autor³Mauricio T. Takakura  ³ Data ³30/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Retorna o Tipo do Campo Selecionado                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpe290Tipo()  												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ Gpe290Tipo	             									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpe290Tipo()

Local cMemVar	:= ReadVar()
Local cCpoMem	:= SubStr( cMemVar , 4 )
Local cUpper	:= Upper( AllTrim( cCpoMem ) )
Local cRet		:= ""

Do Case
	Case ( cUpper == "RC3_RESM" )
		cRet := aTpResu[ 1 ]
	Case ( cUpper == "RC3_FOR01M" )
		cRet := aTpFm01[ 1 ]
	Case ( cUpper == "RC3_FOR02M" )
		cRet := aTpFm02[ 1 ]
EndCase	

Return( cRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Opera ³Autor³Mauricio T. Takakura  ³ Data ³13/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Execucao dos itens dos operadores                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Opera()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ListBox com os operadores  									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290Opera()

Local aOpera	:= {}
Local cMemoCpo	:= Upper( AllTrim( ReadVar() ) )
Local cCpo		:= SubStr( cMemoCpo , 4 )
Local cSpcOpe1	:= Space( GetSx3Cache( "RC3_OPERA1" , "X3_TAMANHO" ) )
Local cSpcOpe2	:= Space( GetSx3Cache( "RC3_OPERA2" , "X3_TAMANHO" ) )
Local cSpcOpe3	:= Space( GetSx3Cache( "RC3_OPERA3" , "X3_TAMANHO" ) )
Local cLastVal	:= __ExecMacro( cMemoCpo )

Local lRet		:= .F.
Local lCondicao	:= .F.

Local n			:= 1

Begin Sequence

	If !(lRet := !(( cCpo != "RC3_OPERA1" ) .and. ( cCpo != "RC3_OPERA2" ) .and. ( cCpo != "RC3_OPERA3" )))
	  Break
	EndIf

	lCondicao := ( Upper( AllTrim( cTipoItem ) ) == ".CON." .or. Upper( AllTrim( cTipoItem ) ) == ".ENQ." )

	Do Case
		Case ( cCpo == "RC3_OPERA1" )
			fOperadores( 6 )
		Case ( cCpo == "RC3_OPERA2" )
			If ( lCondicao )
				fOperadores( 1 )
			Else
				fOperadores( 4 )
			EndIf
		Case ( cCpo == "RC3_OPERA3" )
			If ( lCondicao )
				fOperadores( 2 )
			Else
				fOperadores( 5 )
			EndIf
		OtherWise
			Break
	EndCase
	
	If ( "*" $ __ExecMacro( cMemoCpo ) ) .and. Len( AllTrim( __ExecMacro( cMemoCpo ) ) ) > 2 .and. Empty( StrTran( __ExecMacro( cMemoCpo ) , "*" , "" ) )
		&( cMemoCpo ) := cLastVal
	EndIf
	
	If ( lCondicao := ( Upper( AllTrim( cTipoItem ) ) == ".CON." .or. Upper( AllTrim( cTipoItem ) ) == ".ENQ." ) )
		SetMemVar( "RC3_OPERA1" , cSpcOpe1 )
	EndIf
	If !fOperadores( IF( lCondicao , 1 , 4 ) , @aOpera , .T. , GetMemVar( "RC3_OPERA2" ) )
		SetMemVar( "RC3_OPERA2" , cSpcOpe2 )
	EndIf
	If !fOperadores( IF( lCondicao , 2 , 5 ) , @aOpera , .T. , GetMemVar( "RC3_OPERA3" ) )
		SetMemVar( "RC3_OPERA3" , cSpcOpe3 )
	EndIf
	
End Sequence
	
Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fOperadores³ Autor ³ Marinaldo de Jesus   ³ Data ³21/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³ListBox com a Selecao dos Operadores para Formula           ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fOperadores( nTipo , aOpera , lValidOpera , cValidOpera )	³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³lRet														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ nTipo -> Tipo de Operador                                  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fOperadores( nTipo 			,;	//01 -> Opcao selecionada para os itens
							 aOpera 		,;	//02 -> vetor com os itens - opcional 
							 lValidOpera	,;	//03 -> .T. - apenas valida o item / .F. - visualiza a caixa com os itens
							 cValidOpera	,;	//04 -> String a ser validada
							 aOperaRet 		 ;  //05 -> Retornar os operadores para um array passando por referencia
							)

Local aSvKeys		:= GetKeys()
Local aOperadores	:= {}

Local cTitulo		:= STR0039	//Operadores
Local cOpera		:= ""
Local cOperadores	:= ""
Local cMemVar		:= ReadVar()

Local lRet			:= .T.
Local nOperador		:= 0
Local nOperadores	:= 0

Local uMemVar		:= __ExecMacro( cMemVar )

DEFAULT nTipo		:= 1
DEFAULT aOpera		:= {}
DEFAULT aOperaRet 	:= {}
DEFAULT lValidOpera	:= .F.
DEFAULT cValidOpera	:= ""

#DEFINE __Size_Operator__ 05

If ( nTipo == 1 )
	aAdd( aOperadores ,	( Padr( "="		, __Size_Operator__ ) + " <=> " + STR0011 ) )	//Igual
	aAdd( aOperadores , ( Padr( "=="	, __Size_Operator__ ) + " <=> " + STR0012 ) )	//Exatamente Igual
	aAdd( aOperadores , ( Padr( "<"		, __Size_Operator__ ) + " <=> " + STR0013 ) )	//Menor
	aAdd( aOperadores , ( Padr( "<="	, __Size_Operator__ ) + " <=> " + STR0014 ) )	//Menor ou Igual
	aAdd( aOperadores , ( Padr( ">"		, __Size_Operator__ ) + " <=> " + STR0015 ) )	//Maior
	aAdd( aOperadores , ( Padr( ">="	, __Size_Operator__ ) + " <=> " + STR0016 ) )	//Maior ou Igual
	aAdd( aOperadores , ( Padr( "!="	, __Size_Operator__ ) + " <=> " + STR0017 ) )	//Nao Igual
	aAdd( aOperadores , ( Padr( "<>"	, __Size_Operator__ ) + " <=> " + STR0018 ) )	//Diferente
	aAdd( aOperadores , ( Padr( "#"		, __Size_Operator__ ) + " <=> " + STR0018 ) )	//Diferente
	aAdd( aOperadores , ( Padr( "$"		, __Size_Operator__ ) + " <=> " + STR0019 ) )	//Esta Contido
	aAdd( aOperadores , ( Padr( ".NOT."	, __Size_Operator__ ) + " <=> " + STR0020 ) )	//Negacao
	aAdd( aOperadores , ( Padr( "!"		, __Size_Operator__ ) + " <=> " + STR0020 ) )	//Negacao
ElseIf ( nTipo == 2 )
	aAdd( aOperadores ,	( Padr( ".OR."	, __Size_Operator__ ) + " <=> " + STR0021 ) )	//Ou
	aAdd( aOperadores , ( Padr( ".AND." , __Size_Operator__ ) + " <=> " + STR0022 ) )	//E
	aAdd( aOperadores , ( Padr( ".END." , __Size_Operator__ ) + " <=> " + STR0023 ) )	//Fim
ElseIf ( nTipo == 4 )
	aAdd( aOperadores , ( Padr( "+"		, __Size_Operator__ ) + " <=> " + STR0026 ) )	//Soma
	aAdd( aOperadores , ( Padr( "+=" 	, __Size_Operator__ ) + " <=> " + STR0027 ) )	//Soma e Atribui
	aAdd( aOperadores , ( Padr( "++" 	, __Size_Operator__ ) + " <=> " + STR0028 ) )	//Soma Um
	aAdd( aOperadores , ( Padr( "-"		, __Size_Operator__ ) + " <=> " + STR0029 ) )	//Subtrai
	aAdd( aOperadores , ( Padr( "-=" 	, __Size_Operator__ ) + " <=> " + STR0030 ) )	//Subtrai e Atribui
	aAdd( aOperadores , ( Padr( "--" 	, __Size_Operator__ ) + " <=> " + STR0031 ) )	//Subtrai Um
	aAdd( aOperadores , ( Padr( "*"		, __Size_Operator__ ) + " <=> " + STR0032 ) )	//Multiplica
	aAdd( aOperadores , ( Padr( "*="	, __Size_Operator__ ) + " <=> " + STR0033 ) )	//Multiplica e Atribui
	aAdd( aOperadores , ( Padr( "/"		, __Size_Operator__ ) + " <=> " + STR0034 ) )	//Divide
	aAdd( aOperadores , ( Padr( "/=" 	, __Size_Operator__ ) + " <=> " + STR0035 ) )	//Divide e Atribui
	aAdd( aOperadores , ( Padr( "**" 	, __Size_Operator__ ) + " <=> " + STR0036 ) )	//Exponencial
	aAdd( aOperadores , ( Padr( "^"		, __Size_Operator__ ) + " <=> " + STR0036 ) )	//Exponencial
	aAdd( aOperadores , ( Padr( ":="	, __Size_Operator__ ) + " <=> " + STR0037 ) )	//Atribui
	aAdd( aOperadores , ( Padr( "%"		, __Size_Operator__ ) + " <=> " + STR0038 ) )	//Modulo
ElseIf ( nTipo == 5 )
	aAdd( aOperadores , ( Padr( ".CNT." , __Size_Operator__ ) + " <=> " + STR0077 ) )	//Continua
	aAdd( aOperadores , ( Padr( ".END." , __Size_Operator__ ) + " <=> " + STR0023 ) )	//Fim
ElseIf ( nTipo == 6 )
	aAdd( aOperadores , ( Padr( "+=" 	, __Size_Operator__ ) + " <=> " + STR0027 ) )	//Soma e Atribui
	aAdd( aOperadores , ( Padr( "++" 	, __Size_Operator__ ) + " <=> " + STR0028 ) )	//Soma Um
	aAdd( aOperadores , ( Padr( "-=" 	, __Size_Operator__ ) + " <=> " + STR0030 ) )	//Subtrai e Atribui
	aAdd( aOperadores , ( Padr( "--" 	, __Size_Operator__ ) + " <=> " + STR0031 ) )	//Subtrai Um
	aAdd( aOperadores , ( Padr( "*="	, __Size_Operator__ ) + " <=> " + STR0033 ) )	//Multiplica e Atribui
	aAdd( aOperadores , ( Padr( "/=" 	, __Size_Operator__ ) + " <=> " + STR0035 ) )	//Divide e Atribui
	aAdd( aOperadores , ( Padr( ":="	, __Size_Operator__ ) + " <=> " + STR0037 ) )	//Atribui
EndIf
aAdd( aOperadores ,	Space( __Size_Operator__ ) + " <=> " + STR0040 )					//Limpa
aOperaRet := aClone(aOperadores)

aOpera		:= {}
nOperadores	:= Len( aOperadores )
For nOperador := 1 To nOperadores
	cOpera := SubStr( aOperadores[ nOperador ] , 1 , __Size_Operator__ )
	cOperadores+= cOpera
	aAdd( aOpera , Upper( AllTrim( cOpera ) ) )
Next nOperador

If !lValidOpera
	f_Opcoes( @uMemVar , cTitulo , aOperadores , cOperadores , 12 , 49 , .T. , __Size_Operator__ )
Else
	cValidOpera := Upper( AllTrim( cValidOpera ) )
	lRet := !( ( nPosOpera := aScan( aOpera , { |x| x == cValidOpera } ) ) == 0 )
EndIf

RestKeys( aSvKeys )

Return( IF( !lValidOpera , &cMemVar := uMemVar , lRet ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Cpy³ Autor ³Marinaldo de Jesus     ³ Data ³11/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Menu para copiar uma formula                               ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Cpy( cAlias , nReg , nOpc )							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³cAlias = Alias do arquivo                                   ³
³          ³nReg   = Numero do registro                                 ³
³          ³nOpc   = Numero da opcao selecionada                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290Cpy( cAlias , nReg , nOpc )

lGpea290Cpy := .T.

Return( Gpea290Mnt( cAlias , nReg , 4 ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290ModComp³Autor³Marinaldo de Jesus   ³ Data ³08/09/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Verifica se o Modo de Acesso do Arquivo de Formulas esta  ou³
³          ³Nao Compartilhado - RC2 e RC3								³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290ModComp()											³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ 															³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290ModComp()
Local cModeRC2 := FWModeAccess("RC2", 1) + FWModeAccess("RC2", 2) + FWModeAccess("RC2", 3)
Local cModeSRY := FWModeAccess("SRY", 1) + FWModeAccess("SRY", 2) + FWModeAccess("SRY", 3)
Local lFilRPO  := SuperGetMv('MV_RPOFIL',, .F.) .and. cModeRC2 == cModeSRY
Local lComp    := cModeRC2 == "CCC" .or. lFilRPO

If lComp .and. !lFilRPO
	lComp := (FWModeAccess("RC3", 1) == "C") .and. (FWModeAccess("RC3", 2) == "C") .and. (FWModeAccess("RC3", 3) == "C")
EndIf

If !lComp
	//"O Modo de Acesso do Cadastro de Formulas deve ser OBRIGATORIAMENTE Compartilhado."
	//"Altere o Modo de Acesso Atraves do Configurador. Arquivos RC2 e RC3"
	MsgInfo( oEmToAnsi( STR0099 ) + CRLF + CRLF + oEmToAnsi( STR0100 ) )
EndIf

Return( lComp )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290Tree    	 ³Autor³Mauricio T. Takakura³ Data ³05/08/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Monta o Tree  												  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>								   	  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³   													  		  ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290tree(oDlg			,;	//01 -> objeto principal da janela
							aRc3Cols		,;	//02 -> Array contendo Informacoes do aCols para o RC3
							oBar1			,;	//03 -> barra de Ferramentas da Estrutura da Formula
							oBar2			,;	//04 -> barra de Ferramentas da Edicao da Formula
	   						aTreeCoords 	,;	//05 -> coordenadas da tree na janela
	   						aRC3Fields		,;	//06 -> campo da enchoice da formula
							aRC3Altera		,;	//07 -> campo que poderao ser alterados
							aSvTreeNodes	,;	//08 -> Copia do Array da Tree - Comparar na saida
	   						cTreeCopy		,;	//09 -> String com bloco para Copiar Itens
	   						cTreeUnCopy		,;	//10 -> String com bloco para desmarcar copia
	   						cTreePstCopy	,;	//11 -> String com bloco para colar copia
	   						cTreeCut		,;	//12 -> String com bloco para recortar itens
	   						cTreeUnCut		,;	//13 -> String com bloco para desmarcar itens recortados
	   						cTreePstCut		,;	//14 -> String com bloco para colar recorte
							cSvCodigo		,;	//15 -> variavel utilizada para burlar a tree quando for uma copia
							cSvOrigem		,;	//16 -> variavel utilizada para burlar a tree quando for uma copia
	   						cSvRC2_Desc		,;	//17 -> Controle da alteracao da descricao do Item pai
							nOpc			,;	//18 -> opcao do Menu							
							nRC2Recno		 ;	//19 -> posicao do registro no arquivo pai - RC2
	   					)

Local aDbTreeInfo						// contem informacoes do banco para montagem da tree
Local aTreeNodes		:= NIL	        // vetor com os itens da tree
Local aDesabPopUp		:= {}			// array com os itens a serem desabilitados no popmenu

Local bTreeChange		:= { || .T. }	// codeblock com o evento da mudanca de itens
Local bTreeCopy			:= { || NIL }	// bloco para copiar 
Local bTreeUnCopy		:= { || NIL }   // bloco para desmarcar copia
Local bTreePstCopy 		:= { || NIL }  	// bloco para executar colar copia
Local bTreeCut			:= { || NIL } 	// bloco para executar recortar
Local bTreeUnCut		:= { || NIL } 	// bloco para executar desmarcar recortar
Local bTreePstCut		:= { || NIL }  	// bloco para executar colar recorte

Local cFilRC2			:= ""			// filial da tabela pai
Local cCodRC2			:= ""			// codigo chave do pai
Local cSeqAnt			:= ""			// codigo do item em que estava posicionado
Local cAliasChildren	:= ""			// alias do Filho
Local cAliasFather		:= ""			// alias do Pai
Local cItemField		:= ""			// campo dos Items

Local lTipo				:= .T.  		// variavel utilizada no bloco da copia do menu

Local nX				:= 0			// variavel auxiliar para while/for
Local nPosSeqFor		:= 0 			// posicao do item no acols
Local nLoop
Local nLoops
Local nRc3Result
Local nRc3Form01
Local nRc3Form02
Local nRc3Ord

Begin Sequence

	cFilRC2			:= xFilial( "RC2" )   // filial da tabela pai
    If !( lGpea290Cpy )
		RC2->( MsGoto( nRC2Recno ) )
		cCodRC2	:= RC2->( RC2_ORIGEM + RC2->RC2_CODIGO )	// codigo chave do pai
	Else
		cCodRC2 :=  ( cSvOrigem + cSvCodigo )
	EndIf
	nRc3Ord := 	RetOrder( "RC3" , "RC3_FILIAL+RC3_ORIGEM+RC3_CODIGO+RC3_SEQPAI+RC3_SEQFOR" )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ aDbTreeInfo - Informacoes para montagem da Tree com busca na ³
	³ 				tabelas   									   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cAliasChildren 	:= "RC3"
	cAliasFather	:= "RC2"
	cItemField		:= "RC3_SEQFOR"
	aDbTreeInfo :=	{;
				    	{;
				    		cAliasFather,;	// 01 -> alias do pai
	 			    		nRC2Recno	,;	// 02 -> recno do registro
	 		    			cFilRC2		,;	// 03 -> filial corrente de Rc2
	 		    			cCodRC2		,;	// 04 -> codigo chave de busca
		 		    		"RC2_DESC"	,;	// 05 -> campo de descricao que tera a descricao no tree
		 		    		NIL			,;	// 06 -> imagem 1 do pai
		 		    		NIL			 ;	// 07 -> imagem 2 do pai
		 		    	},;
		 		    	{;
		 		    		cAliasChildren	,;	// 01 -> alias do filho
		 		    		cItemField		,;	// 02 -> campo com o codigo no filho
		 		    		nRc3Ord			,; 	// 03 -> indice com a ordem do Item
		 		    		"RC3_SEQPAI"	,;	// 04 -> campo pai
		 		    		nRc3Ord			,;	// 05 -> indice com a ordem do Tree
		 		    		"RC3_DESCR"		,;  // 06 -> Campo para descricao
		 		    		NIL				,;	// 07 -> Bloco para o DelOk
						 	NIL		  		,;	// 08 -> Funcao Para Setar o Filtro
						 	NIL	    		,;	// 09 -> Bloco para Validar o Cut
						 	NIL	    		,;	// 10 -> Bloco para Get das Informacoes
		 		    		"RC3_RESOU1"	,;	// 11 -> Bloco para Get do Resource1
		 		    		"RC3_RESOU2"	 ;	// 12 -> Bloco para Get do Resource1
		 		    	};
		 		    }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco para o Change do Tree                     	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bTreeChange := { || GpeTreeChg( aRC3Fields ) }
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Monta o Tree de Competencias                             	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

	// blocos e/ou string definidas em Gpea290Mnt //
	bTreeCopy 	:= __ExecMacro( cTreeCopy )
	bTreeUnCopy := __ExecMacro( cTreeUnCopy )
	bTreePstCopy:= __ExecMacro( cTreePstCopy )
	bTreeCut	:= __ExecMacro( cTreeCut )
	bTreeUnCut	:= __ExecMacro( cTreeUnCut )
	bTreePstCut	:= __ExecMacro( cTreePstCut )
	
	aMenuPopUp			:= {;
								{;
									OemToAnsi( STR0005 ),;	//'Pesquisar'
									oBtn_Find:bAction,; // bloco declarado em Gpea290Mnt
									.T.;
								},;
								{;   
									OemToAnsi( STR0007 ),;	//'Incluir'
									NIL,;
									.T.,;
									{;
										{;
											OemToAnsi( STR0024 ),;	//'Condicao'
											oBtn_Cond:bAction,;
											.T.;
										},;
										{;
											OemToAnsi( STR0025 ),;	//'Execucao'
											oBtn_Exec:bAction,;
											.T.;
										},;
										{;
											OemToAnsi( STR0114 ),;	//'Enquanto'
											oBtn_Enq:bAction,;
											.T.;
										},;
										{;
											OemToAnsi( STR0177 ),;	//'Mensagem'
											oBtn_Msg:bAction,;
											.T.;
										};
									};
								},;
								{;
									OemToAnsi( STR0104 ),;	//'Editar Formula'
									oBtn_Edit:bAction,; // bloco declarado em Gpea290Mnt
									.T.;								
								},;
								{;
									OemToAnsi( STR0009 ),;	//'Excluir'
									oBtn_Del:bAction,;  // bloco declarado em Gpea290Mnt
									.T.;
								},;
								{;
									OemToAnsi( STR0089 ),;	//'Copiar'
									NIL,;
									.T.,;
									{;  
										{;
											OemToAnsi( STR0120 ),;	//'Marcar'
											bTreeCopy ,;
											.T.;
								   		},;
										{;
											OemToAnsi( STR0121 ),;	//'Desmarcar'
											bTreeUnCopy ,;											
											.T.;
										};
									};
								},;
								{;
									OemToAnsi( STR0123 ),;	//'Colar Copia'
									bTreePstCopy,;
									.T.;								
								},;
								{;
									OemToAnsi( STR0118 ),;	//'Recortar'
									NIL,;
									.T.,;
									{;
										{;
											OemToAnsi( STR0120 ),;	//'Marcar'
											bTreeCut,;
											.T.;
										},;
										{;
											OemToAnsi( STR0121 ),;	//'Desmarcar'
											bTreeUnCut,;
											.T.;
										};
									};
								},;
								{;
									OemToAnsi( STR0119 ),;	//'Colar Recorte'
									bTreePstCut,;
									.F.;
								};								
							}

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Menus a Desabilitar apenas visualizacao					   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
    If !(;
    		( nOpc == 3 );
    		.or.;
    		( nOpc == 4 );
    	)	 
		aDesabPopUp	:= {2,3,4,5,6,7,8}
	Else
		aDesabPopUp	:= {6,8}
	EndIf

	oRc3Tree := ApdBldTree(	aDbTreeInfo	,;	//01 -> array com informacoes do banco para montagem da arvore
							NIL			,;	//02 -> titulo da janela quando for criada pela biblioteca
							NIL			,; 	//03 -> validacao do botao ok quando for criada a janela pela biblioteca
							bTreeChange	,;	//04 -> bloco com as validacoes para o Change do objeto tree
							NIL			,;	//05 -> bloco para inicializacao do objeto tree
							.F.			,;	//06 -> informa se a gravacao sera feita pela biblioteca
							aTreeCoords	,;	//07 -> coordenadas da janela para montagem da tree
							NIL			,;	//08 -> valor da proporcao do final da janela - nWidthTree Ex. aObjSize[01,01] , aObjSize[01,02] , aObjSize[01,03] , ( aObjSize[01,04] / 100 * nWidthTree )
							oDlg		,;	//09 -> objeto da janela onde sera montado a tree
							.T.			,;	//10 -> se possui o menu popup
							aDesabPopUp	,; 	//11 -> items do popmenu a desabilitar
							aMenuPopUp	 ;	//12 -> Menu PopUps
						)			

	oRc3Tree:bGotFocus :=  { || RestKeys(aSvFKeys , .T.), GpeTreeGotFocus(  oDlg		,;	// objeto da dialog
														   					oBar1		,;	// barra de Ferramentas da Estrutura da Formula
																			oBar2		,;	// barra de Ferramentas da Edicao da Formula
																			aRC3Fields	,;	// campos para enchoice da formula
																			aRC3Altera	,;	// campo que poderao ser alterados
																			@cSvRC2_Desc,;  // variavel de controle da descricao do item pai da arvore
																			nOpc		 ;	// opcao do Menu
																		   );
							}
								
	oRc3Tree:bLostFocus :=  { || RestKeys( aSvFKeys , .T. ) }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Incluir a Coluna aCols de cada Item de acordo com o Header   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nPosSeqFor	:= GdFieldPos( "RC3_SEQFOR"	, aRc3Header ) // posicao do item no aCols
	cSeqAnt		:= oRc3Tree:GetCargo()
	For nX := 1 To Len( aRc3Cols )
		cCampo	:= aRc3Cols[ nX , nPosSeqFor ]
		oRc3Tree:TreeSeek( "+-" + cCampo )
		aTreeNodes	:= GetTreeNodes()
		NodeSetSeq( aTreeNodes , cCampo , cCampo )
		NodeSetCol( aTreeNodes , cCampo , cCampo , aClone( aRc3Cols[ nX ] ) )
	Next nX
	oRc3Tree:TreeSeek( cSeqAnt )
	aSvTreeNodes := GetTreeNodes()
	cLastItemNum := NodeMaxItem( GetTreeNodes() )
    ApdTSetSeq( Val( cLastItemNum ) )	// atualizar a variavel sequencial

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inicializar as variaveis locais para gravacao em array e val.³
	³ idacao na edicao das formulas.                               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	nRc3Result	:= GdFieldPos( "RC3_RESULT" , aRc3Header )
	nRc3Form01	:= GdFieldPos( "RC3_FORM01" , aRc3Header )
	nRc3Form02	:= GdFieldPos( "RC3_FORM02" , aRc3Header )

	nLoops		:= Len( aRc3Cols )
	For nLoop := 1 To nLoops
		If nRc3Result > 0
			Gpea290VarInit( AllTrim( aRc3Cols[ nLoop , nRc3Result ] ) )
		EndIf
		If nRc3Form01 > 0
			Gpea290VarInit( AllTrim( aRc3Cols[ nLoop , nRc3Form01 ] ) )
		EndIf
		If nRc3Form02 > 0
			Gpea290VarInit( AllTrim( aRc3Cols[ nLoop , nRc3Form02 ] ) )
		EndIf
	Next nLoop

End Sequence
	
Return( oRc3Tree )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeaTreeChg    ³Autor³Mauricio T. Takakura  ³ Data ³30/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Movimentacao entre os elementos da Tree                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GpeTreeChg( aRC3Fields )

Local aTreeNodes	:= NIL 			//item selecionado
Local aSelCols		:= NIL			//acols selecionado

Local bAtuaVar		:= { || NIL }	//atualizar as variaveis virtuais 

Local cCampo		:= ""			//campos Editaveis de RC3 

Local nX			:= 0			//utilizado em while/for
Local nPosCampo		:= 0			//posicao do Campo no AHeader
Local nPosResult	:= 0			//posicao do campo RC3_RESULT
Local nPosForm01	:= 0			//posicao do campo RC3_FORM01
Local nPosForm02	:= 0			//posicao do campo RC3_FORM02

Begin Sequence

	cNroNode	:= SubStr(oRc3Tree:GetCargo(),3)	// pegar o codigo do item selecionado
	If ( Val( cNroNode ) == 0 )
		oRc3Enchoice:Hide()
		lEnRc3IsHide	:= .T.
		Break
	ElseIf ( lEnRc3IsHide )
		oRc3Enchoice:Show()
		lEnRc3IsHide	:= .F.
	EndIf

	aTreeNodes 	:= GetTreeNodes()					// pegar o item selecionado
	aSelCols := NodeGetCol( aTreeNodes	,;			// 01 -> Item selecionado
							cNroNode	,;			// 02 -> Codigo do Item selecionado
							NIL			 ;			// 03 -> Sequencia - Opcional
						   ) 
	
	If !Empty(aSelCols)
		// atualizar as variaveis virtuais do tipo memo //
		nPosResult	:= GdFieldPos( "RC3_RESULT"	, aRc3Header )
		nPosForm01	:= GdFieldPos( "RC3_FORM01"	, aRc3Header )
		nPosForm02	:= GdFieldPos( "RC3_FORM02"	, aRc3Header )
		nPosTipo	:= GdFieldPos( "RC3_TIPO"  	, aRc3Header )
		bAtuaVar 	:= { ||;
							If(nPosResult > 0 , SetMemVar( "RC3_RESM"	, aSelCols[ nPosResult ] ),),;
							If(nPosForm01 > 0 , SetMemVar( "RC3_FOR01M" , aSelCols[ nPosForm01 ] ),),;
							If(nPosForm02 > 0 , SetMemVar( "RC3_FOR02M" , aSelCols[ nPosForm02 ] ),);
					   }
	
		// variaveis Private //
		cTipoItem 	:= aSelCols[nPosTipo]   // Tipo - EXE ou CON ou ENQ
	Else
		cTipoItem 	:= ""
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³Setar o conteudo das Variaveis de Memoria de Edicao de Formula³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nX := 1 To Len( aRC3Fields )
		cCampo		:= aRC3Fields[ nX ]
		nPosCampo	:= GdFieldPos( cCampo , aRc3Header )
		SetMemVar( aRc3Header[ nPosCampo , 02 ] , GetValType( aRc3Header[ nX , 08 ] , aRc3Header[ nX , 04 ] ) )
		If !Empty( aSelCols )
			SetMemVar( aRc3Header[ nPosCampo , 02 ] , aSelCols[ nPosCampo ] )
		EndIf
	Next nX	

	If !Empty( aSelCols )
		Eval( bAtuaVar )
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ -Ocultar o Campo de Edicao de Resultado Quando Condicao (If) ³
	³ ou Enquanto (While).                                         ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Rc3EncHide( cTipoItem , @oRc3Enchoice , .T. )

	/*??
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ocultar os Campos de Expresao quando Menagem                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	*/
	Rc3Enc2Hid( cTipoItem , @oRc3Enchoice , .T. )

End Sequence

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeaSeekItem  ³Autor³Mauricio T. Takakura ³ Data ³31/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Localiza em uma Arvore um determinado Item                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³APDXTREE 	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GpeaSeekItem( 	aTreeNodes ,;	// vetor em que sera realizado a busca
					   			cSeq 		;	// caso tenha sequencial
					 		)

Local cRet			:= ""			// variavel de retorno

Local lSeq			:= ( cSeq <> NIL )

Local nLoop							// utilizado em while/for
Local nLoops						// utilizado em while/for

nLoops := Len( aTreeNodes )
For nLoop := 1 To nLoops
	If (;
			( aTreeNodes[ nLoop , NODE_INFERIOR ] == cNroNode );
			.and.;
			IF( lSeq , ( aTreeNodes[ nLoop , NODE_SEQ ] == cSeq ) , aTreeNodes[ nLoop , NODE_ACTIVE ] );
		)	
			cRet := aTreeNodes[ nLoop , NODE_INFERIOR ]
			Exit
	Else
		cRet := NodeGetTree( aTreeNodes[ nLoop , NODE_TREE ] , cNroNode , cSeq )
		If (cRet <> NIL)
			Exit
		EndIf
	EndIf
Next nLoop

Return( cRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpea290DelItem   ³Autor³Mauricio T. Takakura  ³ Data ³20/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Excluir Itens da Tree e atualizar o aCols                       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>	   								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290DelItem()

Local cCargo := ""		// Item Selecionado

cCargo := oRc3Tree:GetCargo()
If SubStr(cCargo,1,2) != "*-"
	If InApdxTreeExec("ApdTreeExc", {oRc3Tree , GetTreeNodes() , {|| .T.}} )
		GpeDelaCols()
	EndIf
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeDelaCols      ³Autor³Mauricio T. Takakura  ³ Data ³16/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Marcar como registro excluido no aCols                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>	   								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function GpeDelaCols(cItemDel, aNodesItem)

Local aCols
Local aAuxCol

Local cSeq

Local nLoops
Local nLoop

aTreeNodes 	:= GetTreeNodes()

DEFAULT aNodesItem 	:= GetTreeNodes()
DEFAULT cItemDel	:= cNroNode

nLoops := Len( aNodesItem )
For nLoop := 1 To nLoops
	cSeq 	:= NodeGetSeq( aTreeNodes , cItemDel, {} ) // Retorna a sequencia do item - APDXTREE.PRX
	aCols	:= NodeGetCol( aTreeNodes , cItemDel, cSeq ) // Retorna a aCols do item - APDXTREE.PRX	
	aCols[Len(aRc3Header)+1] := .T.
	NodeSetCol( aTreeNodes , cItemDel , cSeq , aCols )

	aAuxCol := NodeGetTree( aTreeNodes , cItemDel , cSeq ) 
	If Empty(aAuxCol) .OR. Len(aAuxCol)<nLoop
		Exit
	EndIf
	cItemDel := aAuxCol[ nLoop, NODE_INFERIOR ]
	GpeDelaCols(cItemDel, aAuxCol)
Next nLoop

Return( .T. )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeNewOrderItem  ³Autor³Mauricio T. Takakura  ³ Data ³10/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Alterar a nova order dos codigos dos itens                      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>	   								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GpeNewOrderItem(aTreeNodes	,; 	// array da matriz principal
								lCut		 ;	// se .T. pertence a recorte senao a Copy
								)

Local aAuxCol				// array com o aCols para alterar

Local cCodigoNode			// codigo do Item

Local nPosSeqFor			// posicao do campo no aHeader
Local nPosSeqPai			// posicao do campo no aHeader
Local nLoop
Local nLoops

DEFAULT nPosSeqFor := GdFieldPos("RC3_SEQFOR", aRc3Header)
DEFAULT nPosSeqPai := GdFieldPos("RC3_SEQPAI", aRc3Header)

nLoops := Len( aTreeNodes )
For nLoop := 1 To nLoops
    aAuxCol := aTreeNodes[nLoop, NODE_ACOLS]
   	If !Empty(aAuxCol) .and. (aTreeNodes[nLoop, NODE_INFERIOR] != aAuxCol[nPosSeqFor] .Or. aTreeNodes[nLoop, NODE_SUPERIOR] != aAuxCol[nPosSeqPai])
		aAuxCol[nPosSeqFor] := aTreeNodes[nLoop, NODE_INFERIOR]
		aAuxCol[nPosSeqPai] := aTreeNodes[nLoop, NODE_SUPERIOR]
		cCodigoNode := aTreeNodes[nLoop, NODE_INFERIOR]
		NodeSetCol( aTreeNodes , cCodigoNode , NIL , aAuxCol )
    EndIf
    GpeNewOrderItem(aTreeNodes[nLoop, NODE_TREE], lCut)
Next nLoop   

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeaTreeGotFocus ³Autor³Mauricio T. Takakura  ³ Data ³30/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Entrada da Tree - Validar se houve alteracao na descricao       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>	   								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GpeTreeGotFocus(	oDlg			,;	// objeto da dialog
									oBar1			,;	// barra de Ferramentas da Estrutura da Formula
									oBar2			,;	// barra de Ferramentas da Edicao da Formula
									aRC3Fields		,;	// campos para enchoice da formula
									aRC3Altera		,;	// campo que poderao ser alterados
									cSvRC2_Desc 	,;  // variavel de controle da descricao do item pai da arvore
									nOpc			 ;	// opcao do Menu
								)

Local aTreeNodes := {}				// array com a estrutura principal da tree

Local cCampo	 := ""				// codigo do item

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Tecla para editar a formula selecionada				       ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If (;
		( nOpc == 3 );
		.or.;
		( nOpc == 4 );
	)	
	SetKey( VK_F5 , oBtn_Cond:bAction )
	SetKey( VK_F6 , oBtn_Exec:bAction )
	SetKey( VK_F7 , oBtn_Enq:bAction )
	SetKey( VK_F8 , oBtn_Edit:bAction )
	SetKey( VK_F12 ,oBtn_Msg:bAction )
EndIf

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Alteracao do Titulo do Item Pai					           ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If cSvRC2_Desc != GetMemVar( "RC2_DESC" )

	aTreeNodes	:= GetTreeNodes()
	cCampo		:= aTreeNodes[1,2]
	oRc3Tree:TreeSeek( "*-" + cCampo )
	oRc3Tree:ChangePrompt( GetMemVar( "RC2_DESC" ) )
	NodeSetPrompt( aTreeNodes , cCampo , NIL , GetMemVar( "RC2_DESC" ) )
	cSvRC2_Desc := GetMemVar( "RC2_DESC" )

	oRc3Tree:SetFocus()
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeEditForm      ³Autor³Mauricio T. Takakura  ³ Data ³03/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Editar a Formula Selecionada                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>	   								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GpeEditForm( nOpc		,;  //Opcao conforme aRotina
							 oBar1		,;	//barra da estrutura da formula
							 oBar2		,;	//barra de Ferramentas
							 aRC3Fields ,;	//campos da Enchoice da formula
							 lAtiva		,;	//se ativa janela de edicao da Formula
							 lRefresh	,;  //forcar o refresh da enchoice
							 oDlg		 ;	//objeto da janela
							)

Local aTreeNodes 	:= {} 	// array com a tree
Local aSelCols		:= {}	// vetor com aCols

Local bKeyF3		:= { || NIL } 

Local cCampo		:= ""	// nome dos campos
Local cGrpCargo		:= ""	// grupo do cargo
Local cTipo			:= ""	// tipo do item selecionado
Local cSvNode		:= "" 	// copia do codigo do item selecionado
Local cSeqPai		:= ""	// pai do Item
Local cDescTipo		:= ""	// descricao do tipo de edicao

Local nX			:= 0	// variavel para while/for
Local nPosCampo		:= 0	// posicao do campo no aHeader
Local nPosTipo		:= 0 	// posicao do campo no aHeader
Local nPosTpResu	:= 0	// posicao do campo RC3_TPRESU
Local nPosTpfm01	:= 0	// posicao do campo RC3_TPFM01
Local nPosTpfm02	:= 0	// posicao do campo RC3_TPFM02

DEFAULT lAtiva 	:= .T.
DEFAULT lRefresh:= .F. 

Begin Sequence

	If (;
			( Val( cNroNode ) == 0 );
			.and.;
			( nOpcTree == 2 );
		)	
		Break
	EndIf
	
	cGrpCargo	:= SubStr(oRc3Tree:GetCargo(),1,2)
	aTreeNodes 	:= GetTreeNodes()
	aSelCols 	:= NodeGetCol( 	aTreeNodes	,;		// 01 -> Item selecionado
								cNroNode	,;		// 02 -> Codigo do Item selecionado (private em Gpea290Mnt()
								NIL			 ;		// 03 -> Sequencia - Opcional
							 )
	If ( lAtiva )

		If (;
				!Empty(aSelCols);
				.or.;
				( Val(cNroNode) == 0 );
			)
				
			If ( nOpcTree == 1 )
				
				// funcao para validar a inclusao do item //
				If !Gpe290ValInsert(.T.)
					Break
				EndIf
				
				cTipo := cTipoItem

				//			 "Novo Item"							 " Condicao "								"Execucao"			"Enquanto"
				cDescTipo := STR0128 + ": " + If(cTipoItem==".CON.", AllTrim(STR0024), If(cTipoItem==".EXE.", AllTrim(STR0025), If(cTipoItem==".MSG.", AllTrim(STR0177), AllTrim(STR0114))))

				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Carregar os Inicializadores Padrao do Sx3					   ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
				For nX := 1 To Len( aRC3Fields )
					cCampo		:= aRC3Fields[ nX ]
					nPosCampo	:= GdFieldPos( cCampo , aRc3Header )
					SetMemVar( aRc3Header[ nPosCampo , 02 ] , GetValType( aRc3Header[ nPosCampo , 08 ] , aRc3Header[ nPosCampo , 04 ] ) )
					If ExistIni( cCampo )
						SetMemVar( aRc3Header[ nPosCampo , 02 ] , InitPad( GetSx3Cache( cCampo , "X3_RELACAO" ) ) )
						If ( ValType( GetMemVar( cCampo ) ) == "C" )
							SetMemVar( cCampo , Padr( GetMemVar( cCampo ) , GetSx3Cache( cCampo , "X3_TAMANHO" ) ) )
						EndIf
					EndIf
				Next nX
				aTpResu[1] 	:= "5"
				aTpResu[2] 	:= .F.
				aTpFm01[1]	:= "5"
				aTpFm01[2]  := .F.
				aTpFm02[1]  := "5"
				aTpFm02[2] 	:= .F.
			
			Else             
			
				nPosTipo := GdFieldPos("RC3_TIPO", aRc3Header)
				cTipo := aSelCols[nPosTipo]
				//			"Alteracao"								  "Condicao"							  "Execucao"		"Enquanto"
				cDescTipo := STR0111 + ": " + If(cTipoItem==".CON.", AllTrim(STR0024), If(cTipoItem==".EXE.", AllTrim(STR0025), If(cTipoItem==".MSG.", AllTrim(STR0177), AllTrim(STR0114))))

		      	// controle do tipo dos campos - variaveis private em Gpea290Atu //
      			nPosTpResu	:= GdFieldPos("RC3_TPRESU", aRc3Header)
				nPosTpfm01	:= GdFieldPos("RC3_TPFM01", aRc3Header)
				nPosTpfm02	:= GdFieldPos("RC3_TPFM02", aRc3Header)

				aTpResu[1] 	:= aSelCols[nPosTpResu]				// Identificar qual o tipo do campo Resultado - (1) Arquivos/Campos (2) Mnemonicos (3) Funcoes.....
				aTpResu[2]  := .F.								// o usuario esta no modo digitacao. Qdo chamar a janela de campos passara para .T.
				aTpResu[3]  := AllTrim(GetMemVar("RC3_RESM"))	// valor do campo para comparar na gravacao
				aTpFm01[1]	:= aSelCols[nPosTpfm01] 			// Identificar qual o tipo da formula 01
				aTpFm01[2] 	:= .F.
				aTpFm01[3]	:= AllTrim(GetMemVar("RC3_FOR01M"))
				aTpFm02[1]	:= aSelCols[nPosTpfm02]				// Identificar qual o tipo da formula 02
				aTpFm02[2] 	:= .F.
				aTpFm02[3] 	:= AllTrim(GetMemVar("RC3_FOR02M"))

			EndIf

			oBar2:lActive 				:= .T.
			oBar1:lActive 				:= .F.
			oRc3Tree:lActive 			:= .F.
			oRc3Enchoice:oBox:lActive	:= .T.

			For nX := 1 To Len(oRc3Enchoice:aEntryCtrls) 
				If (;
						(;
							( cTipo == '.CON.' );
							.or.;
							( cTipo == ".ENQ." );
						);	
						.and.;
						(;
							( aRC3Fields[nX] == "RC3_RESM" );
							.or.;
							( aRC3Fields[nX] == "RC3_OPERA1");
						);	
					)
					oRc3Enchoice:aEntryCtrls[nX]:lActive := .F.
				Else
					oRc3Enchoice:aEntryCtrls[nX]:lActive := .T.
				EndIf
			Next nX

			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Ocultar o Campo de Edicao de Resultado Quando Condicao ou  En³
			³ quanto													   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			Rc3EncHide( cTipo , @oRc3Enchoice , .F. )
			
			/*??
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Ocultar os Campos de Expresao quando Menagem                 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			*/
			Rc3Enc2Hid( cTipoItem , @oRc3Enchoice , .T. )
			
			If (;
					( nOpc <> 2 );
					.and.;
					( nOpc <> 5 );
				)
				bKeyF3 := { || CursorWait() , Gpea290F3Key( nOpc ) , CursorArrow() }
				SetKey( VK_F3  , bKeyF3 )				// tecla F3 para edicao da formula e operadores 
				SetKey( VK_F9  , oBtn_OK:bAction ) 		// tecla F9 para gravar as informacoes no aCols
				SetKey( VK_F10 , oBtn_Cancel:bAction ) 	// tecla F10 para Cancela a edicao/inclusao
			EndIf
			
		EndIf

	Else
		//# Coloca o Operador3 caso este esteja em branco
		If Empty(GetMemVar("RC3_OPERA3")) .And. cTipoItem != ".MSG."
			SetMemVar("RC3_OPERA3" , ".END." )
			oRc3Enchoice:Refresh()
		EndIf
		If cTipoItem == ".MSG."
			SetMemVar("RC3_OPERA3" , ".CNT." )
			oRc3Enchoice:Refresh()
		EndIf
		oBar2:lActive 			 := .F.
		oBar1:lActive 			 := .T.
		oRc3Tree:lActive 		 := .T.
		oRc3Tree:SetFocus()

		For nX := 1 To Len(oRc3Enchoice:aEntryCtrls)
			oRc3Enchoice:aEntryCtrls[nX]:lActive := .F.
		Next nX
		oRc3Enchoice:oBox:lActive:= .F.
		oRc3Enchoice:Refresh()

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Quando cancela a edicao da formula, o Refresh da Enchoice nao³
		³ funciona. Para retornar os valores anteriores, foi necessario³
		³ mover entre os itens da tree e atualizacoes atraves do change³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/	
		If (;
				( lRefresh );
				.and.;
				!Empty( aSelCols );
			)	
		
			cSvNode := cNroNode

			// Posicionar no item Pai //
			cSeqPai := aSelCols[ GdFieldPos ( "RC3_SEQPAI" , aRc3Header ) ]
			If ( Val( cSeqPai ) == 0 )
				cSeqPai := "*-" + cSeqPai
			Else
				cSeqPai := "+-" + cSeqPai
			EndIf
			oRc3Tree:TreeSeek( cSeqPai )

			Eval( oRc3Tree:bChange )

			// retornar ao item selecionado //
			oRc3Tree:TreeSeek( cGrpCargo + cSvNode )
			cNroNode := cSvNode
		EndIf

		Eval(oRc3Tree:bChange)

		SetKey( VK_F3 )
		SetKey( VK_F9 )
		SetKey( VK_F10 )

		cDescTipo := ""
		
	EndIf

	oDlg:cToolTip := cDescTipo

End Sequence

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Rc3EncHide³ Autor ³Marinaldo de Jesus     ³ Data ³17/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Rc3EncHide( cTipoItem , oRc3Enchoice , lChgTree )

Local nRc3ResM		:= aScan( oRc3Enchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == "M->RC3_RESM" 	) } )
Local nRc3Opera1	:= aScan( oRc3Enchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == "M->RC3_OPERA1"	) } )

If ( cTipoItem $ ".CON./.ENQ." )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ocultar o Campo de Edicao de Resultado Quando Condicao ou  En³
	³ quanto													   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oRc3Enchoice:aTela[ nRc3ResM , 1	 ]	:= ""
	oRc3Enchoice:aEntryCtrls[ nRc3ResM	 ]:Hide()
	oRc3Enchoice:aTela[ nRc3Opera1 , 1	 ]	:= ""
	oRc3Enchoice:aEntryCtrls[ nRc3Opera1 ]:Hide()
Else
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Mostrar o Campo de Edicao de Resultado Quando Execucao	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oRc3Enchoice:aTela[ nRc3ResM , 1	 ]	:= GetCache( "SX3" , "RC3_RESM" 	, NIL , "X3TITULO()" , 2 , .F. )
	oRc3Enchoice:aEntryCtrls[ nRc3ResM	 ]:Show()
	oRc3Enchoice:aTela[ nRc3Opera1 , 1	 ]	:= GetCache( "SX3" , "RC3_OPERA1"	, NIL , "X3TITULO()" , 2 , .F. )
	oRc3Enchoice:aEntryCtrls[ nRc3Opera1 ]:Show()
EndIf

DEFAULT lChgTree := .T.

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Forco o :SetFocus() Na Enchoice para Atualizar a Tela  	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If ( lChgTree )
	oRc3Enchoice:Refresh()
	oRc3Enchoice:SetFocus()
	oRc3Tree:SetFocus()
Else
	oRc3Enchoice:Refresh()
	If ( lEnRc3IsHide )
		oRc3Enchoice:Show()
		lEnRc3IsHide := .F.
	EndIf
	oRc3Enchoice:SetFocus()
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Rc3Enc2Hid³ Autor ³ Ademar Fernandes      ³ Data ³11/11/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<vide parametros formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEA290()	                                                ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Rc3Enc2Hid( cTipoItem , oRc3Enchoice , lChgTree )

Local nRc3Opera1	:= aScan( oRc3Enchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == "M->RC3_OPERA1"	) } )
Local nRc3For01M	:= aScan( oRc3Enchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == "M->RC3_FOR01M" 	) } )
Local nRc3Opera2	:= aScan( oRc3Enchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == "M->RC3_OPERA2"	) } )
Local nRc3For02M	:= aScan( oRc3Enchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == "M->RC3_FOR02M" 	) } )
Local nRc3Opera3	:= aScan( oRc3Enchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == "M->RC3_OPERA3"	) } )

If ( cTipoItem $ ".MSG." )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Ocultar os Campos de Edicao                                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oRc3Enchoice:aTela[ nRc3Opera1 , 1	 ]	:= ""
	oRc3Enchoice:aEntryCtrls[ nRc3Opera1 ]:Hide()
	oRc3Enchoice:aTela[ nRc3For01M , 1	 ]	:= ""
	oRc3Enchoice:aEntryCtrls[ nRc3For01M ]:Hide()
	oRc3Enchoice:aTela[ nRc3Opera2 , 1	 ]	:= ""
	oRc3Enchoice:aEntryCtrls[ nRc3Opera2 ]:Hide()
	
	oRc3Enchoice:aTela[ nRc3For02M , 1	 ]	:= ""
	oRc3Enchoice:aEntryCtrls[ nRc3For02M ]:Hide()
	oRc3Enchoice:aTela[ nRc3Opera3 , 1	 ]	:= ""
	oRc3Enchoice:aEntryCtrls[ nRc3Opera3 ]:Hide()
Else
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Mostrar o Campo de Edicao de Resultado Quando Execucao	   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	oRc3Enchoice:aTela[ nRc3Opera1 , 1	 ]	:= GetCache( "SX3" , "RC3_OPERA1"	, NIL , "X3TITULO()" , 2 , .F. )
	oRc3Enchoice:aEntryCtrls[ nRc3Opera1 ]:Show()
	oRc3Enchoice:aTela[ nRc3For01M , 1	 ]	:= GetCache( "SX3" , "RC3_FOR01M" 	, NIL , "X3TITULO()" , 2 , .F. )
	oRc3Enchoice:aEntryCtrls[ nRc3For01M ]:Show()
	oRc3Enchoice:aTela[ nRc3Opera2 , 1	 ]	:= GetCache( "SX3" , "RC3_OPERA2"	, NIL , "X3TITULO()" , 2 , .F. )
	oRc3Enchoice:aEntryCtrls[ nRc3Opera2 ]:Show()
	
	oRc3Enchoice:aTela[ nRc3For02M , 1	 ]	:= GetCache( "SX3" , "RC3_FOR02M" 	, NIL , "X3TITULO()" , 2 , .F. )
	oRc3Enchoice:aEntryCtrls[ nRc3For02M ]:Show()
	oRc3Enchoice:aTela[ nRc3Opera3 , 1	 ]	:= GetCache( "SX3" , "RC3_OPERA3"	, NIL , "X3TITULO()" , 2 , .F. )
	oRc3Enchoice:aEntryCtrls[ nRc3Opera3 ]:Show()
EndIf

DEFAULT lChgTree := .T.

/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Forco o :SetFocus() Na Enchoice para Atualizar a Tela  	   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
If ( lChgTree )
	oRc3Enchoice:Refresh()
	oRc3Enchoice:SetFocus()
	oRc3Tree:SetFocus()
Else
	oRc3Enchoice:Refresh()
	If ( lEnRc3IsHide )
		oRc3Enchoice:Show()
		lEnRc3IsHide := .F.
	EndIf
	oRc3Enchoice:SetFocus()
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpe290ValInsert  ³Autor³Mauricio T. Takakura  ³ Data ³21/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Valida a inclusao ou o recorte dos itens                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>	   								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpe290ValInsert( lNewItem	 ,;	// .T. Inclusao de um Novo Item na Arvore / .F. Colando Itens
								 aPstItens	  ; // Array com os Itens a Colar
							   )

Local aAuxCols		:= {}	// aCols do Item Selecionado
Local aChildren		:= {}	// itens filhos da selecao
Local aTreeNodes	:= {}	// array da tree

Local bIncOption    := {} 	// item selecionado

Local cProxItem		:= ""	// proximo item a ser incluido

Local lRet			:= .T.	// variavel de retorno
Local lMaster 		:= .F.	// se pertence ao Item pai (principal)

Local nX			:= 0
Local nPosTipo		:= 0	
Local nPosOpera3	:= 0

DEFAULT aPstItens 	:= {}

nPosTipo 	:= GdFieldPos( "RC3_TIPO" 	, aRc3Header )
nPosOpera3 	:= GdFieldPos( "RC3_OPERA3" , aRc3Header )

lMaster		:= ( "*-" $ SubStr(oRc3Tree:GetCargo(),1,2) )
bIncOption	:= { || IF( ( lMaster ) , 2 /*/Sempre um Nivel Abaixo*/ , Aviso( OemToAnsi( STR0126 ) /*/'Inclus„o de novo ¡tem'*/, OemToAnsi( STR0127 ) /*/'Selecione o n¡vel'*/ , { OemToAnsi( "&"+STR0128 ) /*/'Novo Item'*/ , OemToAnsi( "&"+STR0129 ) /*/'Sub-Item'*/ } ) ) }
nIncOption 	:= Eval(bIncOption)	// variavel private em Gpea290Mnt()

aTreeNodes := GetTreeNodes()
aAuxCols := NodeGetCol( aTreeNodes , cNroNode ) // cNroNode - Private

If nIncOption == 2
    
	aChildren := NodeGetTree( aTreeNodes , cNroNode )
	
	If Empty(aChildren)
		If !Empty(aAuxCols)
			If (aAuxCols[nPosTipo] == ".EXE.") .or. ;
			   (aAuxCols[nPosTipo] == ".CON." .and. aAuxCols[nPosOpera3] != ".END.") .or.;
			   (aAuxCols[nPosTipo] == ".ENQ." .and. aAuxCols[nPosOpera3] != ".END.")
			    cTipoItem := aAuxCols[nPosTipo]
				lRet := .F.
			EndIf
		EndIf
	Else
		// verifica se ja nao possui um item com EXE e END dentro de uma sequencia //
		For nX := Len( aChildren) To 1 Step -1
			aAuxCols := aChildren[nX, NODE_ACOLS]

			If !(aAuxCols[Len(aAuxCols)])		// campo de delecao
				lRet := !(aAuxCols[nPosTipo] == ".EXE." .and. aAuxCols[nPosOpera3] == ".END.")
				Exit
			EndIf
		Next nX
	EndIf
ElseIf nIncOption == 1
	If lNewItem
	   	cProxItem := cTipoItem
	Else
		cProxItem := aPstItens[1, NODE_ACOLS, nPosTipo]
	EndIf

	If cProxItem == '.EXE.'
		If 	( aAuxCols[nPosTipo] == ".EXE." .and. aAuxCols[nPosOpera3] == ".END." ) .or.;
			( aAuxCols[nPosTipo] == ".CON." .and. aAuxCols[nPosOpera3] != ".END." ) .or.;
			( aAuxCols[nPosTipo] == ".ENQ." .and. aAuxCols[nPosOpera3] != ".END." )
			cTipoItem := aAuxCols[nPosTipo]
			lRet := .F.
		EndIf
	ElseIf cProxItem == '.CON.'
		If 	( aAuxCols[nPosTipo] == ".EXE." .and. aAuxCols[nPosOpera3] == ".END." ) .or.;
			( aAuxCols[nPosTipo] == ".ENQ." .and. aAuxCols[nPosOpera3] != ".END." )
			cTipoItem := aAuxCols[nPosTipo]
			lRet := .F.
		EndIf
	Else
		If 	( aAuxCols[nPosTipo] == ".EXE." .and. aAuxCols[nPosOpera3] == ".END." ) .or.;
			( aAuxCols[nPosTipo] == ".CON." .and. aAuxCols[nPosOpera3] != ".END." )
			cTipoItem := aAuxCols[nPosTipo]
			lRet := .F.
		EndIf
	EndIf
EndIf
If (!lRet .and. (nIncOption == 1 .or. nIncOption == 2))
	//"Nao e possivel incluir um item nesta posicao."
	MsgInfo( STR0097 , STR0066 )
ElseIf !(nIncOption == 1 .or. nIncOption == 2)
	lRet := .F.
EndIf
Eval(oRc3Tree:bGotFocus)
oRc3Tree:Refresh()

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpe290ValOpera³Autor³Mauricio T. Takakura  ³ Data ³13/09/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Validacao dos Operadores                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpe290ValOpera()					    			         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³														     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_VALID dos campos de formula do RC3 GPEA290()				 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpe290ValOpera()

Local lRet 		:= .T.								// variavel de retorno
Local lCondicao	:= .F.								// Controle do tipo do item da formula - CON ou EXE
Local nPos		:= 0								// posicao para retornar o false

lCondicao := ( Upper( AllTrim( cTipoItem ) ) == ".CON." .or. Upper( AllTrim( cTipoItem ) ) == ".ENQ." )

Begin Sequence
	// validar RC3_OPERA1
	If !( lRet := fOperadores( 4 , NIL , .T. , GetMemVar("RC3_OPERA1") ) )
		nPos := aScan(oRc3Enchoice:aGets,{|X| "RC3_OPERA1"$X})
		Break
	EndIf
	
	// validar RC3_OPERA2
	If ( lCondicao )
		lRet := ( Vazio() .or. fOperadores( 1 , NIL , .T. , GetMemVar("RC3_OPERA2") ) )
	Else
		lRet := ( Vazio() .or. fOperadores( 4 , NIL , .T. , GetMemVar("RC3_OPERA2") ) )
	EndIf
	If !( lRet )
		nPos := aScan(oRc3Enchoice:aGets,{|X| "RC3_OPERA2"$X})
		Break
	EndIf

	// validar RC3_OPERA3
	If Empty( GetMemVar( "RC3_OPERA3" ) )
		lRet := .F.
	Else
		If ( lCondicao )
			lRet := fOperadores( 2 , NIL , .T. , GetMemVar("RC3_OPERA3") )
		Else
			lRet := fOperadores( 5 , NIL , .T. , GetMemVar("RC3_OPERA3") )
		EndIf
	EndIf
	If !( lRet )
		nPos := aScan(oRc3Enchoice:aGets,{|x| "RC3_OPERA3" $ x })
		Break
	EndIf
End Sequence 
If !( lRet )
	oRc3Enchoice:aEntryCtrls[nPos]:SetFocus()
	oRc3Enchoice:Refresh()
	Help(" ",1,"NOPERADOR")  		// Selecione um dos Itens da Janela de Operadores
EndIf

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³GpeGravaaCols    ³Autor³Mauricio T. Takakura  ³ Data ³09/08/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Gravar as informacoes no aCols e depois no Array da Tree        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>		      						    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>	   								    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³ GPEA290                                                        ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GpeGravaaCols(	cFilRCA			,;	//filial Corrente
								cBmp_Condicao	,; 	//imagem da Condicao
								cBmp_Execucao	,;	//imagem da Execucao
								cBmp_Enquanto	,;	//imagem de Enquanto
								cBmp_Mensagem	,;	//imagem de Mensagem
								lNodeSetCol		 ;	//Se ira Transferir do Rc3Enchoide para o Tree
							 )

Local aTreeNodes 		:= {}
Local aSelCols			:= {}
Local aNewItem			:= {}
Local aSubItens			:= {}
Local aOperadores 		:= {}
Local aParseFun			:= {}

Local cAliasChildren	:= ""
Local cItemField		:= ""
Local cCodRC2			:= ""
Local cDescr			:= ""
Local cResource1		:= ""
Local cResource2		:= ""
Local cCpyNode			:= ""
Local cSuperior 		:= ""
Local cTpResu 			:= ""
Local cTpFm01			:= ""
Local cTpFm02			:= ""
Local cFindFunct		:= ""
Local cValidResM		:= ""

Local cRc3ResM			:= GetMemVar( "RC3_RESM" )
Local cRc3For01M		:= GetMemVar( "RC3_FOR01M" )
Local cRc3For02M		:= GetMemVar( "RC3_FOR02M" )
Local cRc3Opera1		:= GetMemVar( "RC3_OPERA1" )
Local cRc2Origem		:= GetMemVar( "RC2_ORIGEM" )
Local cRc2Codigo		:= GetMemVar( "RC2_CODIGO" )
Local cRc3Opera3		:= GetMemVar( "RC3_OPERA3" )

Local lRet				:= .T.
Local lIsFunction		:= .F.

Local nPosTipo			:= 0
Local nPosOpera3		:= 0
Local nX				:= 0
Local nNroItensAct		:= 0
Local nPosOpera			:= 0
Local nFunc				:= 0		
Local nFuncs			:= 0

aTreeNodes 	:= GetTreeNodes()
If ( nOpcTree == 2 )	// controle de inclusao / alteracao
	aSelCols := NodeGetCol( aTreeNodes,	cNroNode )
EndIf
Begin Sequence

	If (;
			( lEnRc3IsHide );
			.and.;
			( Val( SubStr( oRc3Tree:GetCargo() , 3 ) ) == 0 );
		)
		Break
	EndIf

	If !(lRet := !(;
						Empty( cRc3ResM );
						.and.;
						Empty( cRc3For01M );
						.and.;
						Empty( cRc3For02M );
				  );
		)
	   Break
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Validacao dos campos memos ## FORM_CONST = 06 (Tipo 5 Constan³
	³ te da Tree). As validacoes serao realizadas sempre como 5,   ³
	³ pois com os outros tipos ja foi validado pela janela. Qdo o  ³
	³ usuario alterar manualmente, o tipo volta a ser 5 - Constante³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If AllTrim( M->RC3_OPERA1 ) $ ":=S+=S-=S/=S*=S--S++S%=S<=S>=S,S(S)S[S]S==S=S+S"
		cValidResM := AllTrim( cRc3ResM ) + " " + AllTrim( M->RC3_OPERA1 ) + " " + AllTrim( cRc3For01M )
	Else
		//# Nao valida qdo for mensagem
		If cTipoItem != ".MSG."
			cValidResM := AllTrim( cRc3ResM )
		EndIf
	EndIf
	If AllTrim( M->RC3_OPERA2 ) $ ":=S+=S-=S/=S*=S--S++S%=S<=S>=S,S(S)S[S]S==S=S+S"
		If Empty( cValidResM )
			cValidResM := AllTrim( cRc3For01M )
		EndIf
 		cValidResM += AllTrim( M->RC3_OPERA2 ) + " " + AllTrim( cRc3For02M )
	EndIf
              
 	If !( lRet := (;
 						Gpea290Valid( @cValidResM, "RC3_RESULT", FORM_CONST,,.F. );
 				 		.and.;
 				  		Gpea290Valid( @cRc3For01M, "RC3_FORM01", FORM_CONST,,.F. );
 				  		.and.;
 				  		Gpea290Valid( @cRc3For02M, "RC3_FORM02" , FORM_CONST,,.F. );
 				  );
		 )
	   Break
	EndIf
	lRet := .t.

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Reatribuo os Valores aas Variaveis						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	SetMemVar( "RC3_RESULT" , @cRc3ResM		)
	SetMemVar( "RC3_FORM01" , @cRc3For01M	)
 	SetMemVar( "RC3_FORM02" , @cRc3For02M	)
	//# Atribui .CNT. qdo for mensagem
	If cTipoItem == ".MSG."
		SetMemVar( "RC3_FORM03" , ".CNT."	)
		cRc3Opera3 := ".CNT."
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Validacao dos operadores                                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If !(lRet := Gpe290ValOpera())
		Break
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Se for execucao, devera ser uma funcao sem atribuicao ou uma ³
	³ atribuicao a uma determinada variavel                        ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( cTipoItem == ".EXE." )

		cFindFunct	:= ExecFunRmv( AllTrim( Upper( cRc3ResM ) ) )
		aParseFun	:= ParseFun( cFindFunct )
		nFuncs		:= Len( aParseFun )
		For nFunc := 1 To nFuncs
			cFindFunct 	:= aParseFun[ nFunc ]
			lIsFunction	:= Gpea290IsFuncion( cFindFunct )
			If ( lIsFunction )
				Exit
			EndIf
		Next nFunc

		If !Empty( cRc3Opera1 )

			If !( lRet := !( lIsFunction ) )
				MsgInfo( STR0145 ) //"Nao e possivel atribuir valores a uma funcao!" 
				Break
			EndIf

			lRet := Gpea290Valid( @AllTrim( cRc3ResM ) + Alltrim(cRc3Opera1) + AllTrim(cRc3For01M) , "RC3_RESM" , FORM_CONST,,.F. )
			If !( lRet )
				MsgInfo( STR0075 ) //"Existe um Erro na Formula. "
				Break
			EndIf

		Else

			If !( lIsFunction )

				// carregar os operadores possiveis para a execucao //
				fOperadores( 6 , NIL , .T. , NIL, @aOperadores )

				For nX := 1 To ( Len( aOperadores ) - 1 )
					nPosOpera := At( SubStr( aOperadores[ nX ] , 1 , 2 ) , cRc3ResM )
					If ( lRet := ( nPosOpera > 0 ) )
						nX := Len( aOperadores )
					EndIf
				Next nX

				If !( lRet )
					MsgInfo( STR0146 ) //"Atribuia os valores a uma variavel de retorno" 
					Break
				EndIf

			EndIf

		EndIf

	EndIf

	If Empty( aSelCols )
		aSelCols := GdRmkaCols( aRc3Header , .F. , .T. , .F. )
		aSelCols := aClone(aSelCols[1])
	EndIf
	
	If !( lRet := EnchoTudOk( oRc3Enchoice ) ) // obrigatorio - verifica se todos os campos obrigatorios foram preenchidos
        Break
	EndIf

	// Tipos dos campos //
	cTpResu := aTpResu[1]
	cTpFm01 := aTpFm01[1]
	cTpFm02	:= aTpFm02[1]
	If AllTrim(aTpResu[3]) != AllTrim(cRc3ResM)
		cTpResu := "5"
	EndIf
	If AllTrim(aTpFm01[3]) != AllTrim(cRc3For01M)
		cTpFm01 := "5"
	EndIf
	If AllTrim(aTpFm02[3]) != AllTrim(cRc3For02M)
		cTpFm02	:= "5"
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Inclusao de Novo Item na Tree                                ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( nOpcTree == 1 )
		cSuperior := oRc3Tree:GetCargo()
		If nIncOption == 1
			cSuperior := NodeGetSup( aTreeNodes , SubStr(cSuperior,3))
		Else
			cSuperior := SubStr(cSuperior,3)
		EndIf
		aSelCols[GdFieldPos( "RC3_FILIAL" , aRc3Header )] := cFilRCA
		aSelCols[GdFieldPos( "RC3_ORIGEM" , aRc3Header )] := cRc2Origem
		aSelCols[GdFieldPos( "RC3_CODIGO" , aRc3Header )] := cRc2Codigo
		
		// pegar o ultimo codigo do item //
		cAliasChildren	:= "RC3"			// alias do Filho
		cItemField		:= "RC3_SEQFOR"		// campo dos Items
		cLastItemNum 	:= NodeMaxItem( aTreeNodes )
		cCodRC2			:= cRc2Origem + cRc2Codigo	// codigo chave do pai
		cInferior 		:= Eval({ || GetNewCodigo( cAliasChildren , cItemField , GetSx2Unico( cAliasChildren ) , { || cLastItemNum := __Soma1( cLastItemNum ) } , NIL , NIL , cCodRC2 ) })

		cNroNode		:= cInferior 	// atualizar a variavel de controle do node ativo
		aSelCols[GdFieldPos( "RC3_SEQFOR" , aRc3Header )] := cInferior
		aSelCols[GdFieldPos( "RC3_SEQPAI" , aRc3Header )] := cSuperior
		aSelCols[GdFieldPos( "RC3_TIPO"   , aRc3Header )] := cTipoItem		// variavel private com EXE ou CON ou ENQ
		// imagens da tree //
		If cTipoItem == ".EXE."
			cResource1	:= cBmp_Execucao
			cResource2	:= cBmp_Execucao
		ElseIf cTipoItem == ".CON."
			cResource1	:= cBmp_Condicao
			cResource2	:= cBmp_Condicao
		ElseIf cTipoItem == ".MSG."
			cResource1	:= cBmp_Mensagem
			cResource2	:= cBmp_Mensagem
		Else
			cResource1	:= cBmp_Enquanto
			cResource2	:= cBmp_Enquanto
		EndIf
		aSelCols[GdFieldPos( "RC3_RESOU1" , aRc3Header )] := cResource1
		aSelCols[GdFieldPos( "RC3_RESOU2" , aRc3Header )] := cResource2
		
		If cTipoItem == ".EXE." .and. ( cRc3Opera3 == ".END." )
			aSubItens 	:= NodeGetTree( aTreeNodes , cSuperior )
			nPosTipo 	:= GdFieldPos( "RC3_TIPO" , aRc3Header )
			nPosOpera3 	:= GdFieldPos( "RC3_OPERA3" , aRc3Header )
			For nX := 1 To Len(aSubItens)
				If aSubItens[nX, NODE_ACOLS, nPosTipo] == ".EXE." .and. aSubItens[nX, NODE_ACOLS, nPosOpera3] == ".END."
					lRet := .F.
					// Valor do Operador 3 e Invalido para a Estrutura da Formula", Aviso de Inconsistencia
					MsgInfo( STR0048  , STR0066  )
					Break
				EndIf
			Next nX
		EndIf
	ElseIf ( nOpcTree == 2 ) // alteracao
		If 	( cTipoItem == ".CON." .and. ( cRc3Opera3 != ".END." ) ) .or.;
			( cTipoItem == ".ENQ." .and. ( cRc3Opera3 != ".END." ) )	 // cTipoItem: Private em Gpea290Mnt()
			aSubItens := NodeGetTree( aTreeNodes , cNroNode )
			If !(lRet := !(Len(aSubItens) > 0))
				// Valor do Operador 3 e Invalido para a Estrutura da Formula", Aviso de Inconsistencia
				MsgInfo( STR0048  , STR0066  )
				Break
			EndIf
		EndIf
		If cTipoItem == ".EXE." .and. ( cRc3Opera3 == ".END." )
			aSubItens 	:= NodeGetTree( aTreeNodes , aSelCols[GdFieldPos( "RC3_SEQPAI" , aRc3Header )] )
			For nX := 1 To Len(aSubItens)
				If aSubItens[nX, NODE_ACTIVE]
					nNroItensAct++
				EndIf
			Next nX			
			If !(lRet := !(nNroItensAct > aScan( aSubItens, { |x| x[NODE_INFERIOR] == cNroNode } )))
				// Valor do Operador 3 e Invalido para a Estrutura da Formula", Aviso de Inconsistencia
				MsgInfo( STR0048  , STR0066  )
				Break
			EndIf
		EndIf
    EndIf
    
	If Empty(GetMemVar("RC3_DESCR"))
		cDescr := RTrim(cRc3ResM)
		cDescr += ' '
		cDescr += RTrim(cRc3Opera1)
		cDescr += ' '
		cDescr += RTrim(cRc3For01M)
		cDescr += ' '
		cDescr += RTrim(GetMemVar("RC3_OPERA2"))
		cDescr += ' '
		cDescr += RTrim(cRc3For02M)
		cDescr += ' '
		cDescr += RTrim(cRc3Opera3)
		SetMemVar( "RC3_DESCR" , cDescr )
	EndIf
	If ( nOpcTree == 1 )
		cDescr := ""
		cCpyNode := cInferior
	Else
		cDescr := cNroNode + ' - '  + NodeGetPrompt( aTreeNodes , cNroNode)
		cCpyNode := cNroNode
	EndIf

	aSelCols[GdFieldPos( "RC3_DESCR " , aRc3Header )] := GetMemVar("RC3_DESCR" )
	aSelCols[GdFieldPos( "RC3_TPRESU" , aRc3Header )] := cTpResu
	If !( AllTrim(aSelCols[GdFieldPos( "RC3_RESULT" , aRc3Header )]) == Alltrim(cRc3ResM) )
		aSelCols[GdFieldPos( "RC3_RESULT" , aRc3Header )] := AllTrim(cRc3ResM)
	EndIf
	aSelCols[GdFieldPos( "RC3_OPERA1" , aRc3Header )] := cRc3Opera1
	aSelCols[GdFieldPos( "RC3_TPFM01" , aRc3Header )] := cTpFm01
	aSelCols[GdFieldPos( "RC3_FORM01" , aRc3Header )] := cRc3For01M
	aSelCols[GdFieldPos( "RC3_OPERA2" , aRc3Header )] := GetMemVar("RC3_OPERA2")
	aSelCols[GdFieldPos( "RC3_TPFM02" , aRc3Header )] := cTpFm02
	aSelCols[GdFieldPos( "RC3_FORM02" , aRc3Header )] := cRc3For02M
	aSelCols[GdFieldPos( "RC3_OPERA3" , aRc3Header )] := cRc3Opera3

	If (;
			( nOpcTree == 2 );
			.and.;
			( cDescr <> cCpyNode + " - " + GetMemVar("RC3_DESCR") );
		)	
		NodeSetPrompt( aTreeNodes , cCpyNode , NIL , cCpyNode + ' - ' + GetMemVar("RC3_DESCR") )
		oRc3Tree:ChangePrompt(cCpyNode + " - " + GetMemVar("RC3_DESCR"))		
	EndIf
	
	If ( nOpcTree == 1 )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Recorta os Itens abaixo para incluir entre os itens          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aNewItem := aClone(aTreeNodes) 
		aNewItem[1, NODE_TREE] := {}
		aNewItem[1, NODE_INFERIOR] 	:= cCpyNode
		aNewItem[1, NODE_SUPERIOR] 	:= cSuperior
		aNewItem[1, NODE_PROMPT] 	:= cCpyNode + ' - ' + GetMemVar("RC3_DESCR")
		aNewItem[1, NODE_RESOURCE1]	:= cResource1
		aNewItem[1, NODE_RESOURCE2] := cResource2

		cPstCargo := InApdxTreeExec("CutSub2NextPst", {oRc3Tree , @aTreeNodes , @aNewItem , nIncOption} ) // APDXTREE.PRX
		InApdxTreeExec("ApdPstTree", { @oRc3Tree , @aTreeNodes , aNewItem , cSuperior , nIncOption , .F. })
		
		cAddItem := "+-" + cCpyNode
		oRc3Tree:TreeSeek( cAddItem )
		oRc3Tree:Refresh()
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Gravar o aCols no array da Tree                              ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( lNodeSetCol )
		NodeSetCol( aTreeNodes	,;			// item selecionado
					cCpyNode	,;			// Codigo do Item
					NIL 		,;     		// sequencia de controle interno
					aClone(aSelCols);		// aCols a gravar
				   )						// APDXTREE.PRX
	EndIf

End Sequence

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
F U N C O E S   D A   J A N E L A    D E    E D I C A O    D A    F O R M U L A
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fCamposForm³ Autor ³ Marinaldo de Jesus   ³ Data ³21/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³ListBox para a Selecao dos Campos para uso em Formula       ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fCamposForm()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Generico                                                    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³lRet														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³ nTipo -> Tipo do Campo                                     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function fCamposForm( nInit , cTipoInit , cCampo )

Local aArea			:= GetArea()
Local aSvKeys		:= GetKeys()
Local aButtons		:= {{ "TK_FIND", { || fLocaliza( If(ValType((&(ReadVar()))) == "U", "", &(ReadVar()) ), "RC3", {"RC3_RESULT","RC3_FORM01","RC3_FORM02" } ) }, STR0174 , STR0174 }} //"Localizar Referencia Cruzada"

Local bSet15		:= { || NIL }
Local bSet24		:= { || NIL }
Local bDialogInit	:= { || NIL }

Local cMemVar		:= ReadVar()
Local cCpoMem		:= SubStr( cMemVar , 4 , Len( cMemVar ) )
Local cSpace10		:= Space( 10 )
Local cDesc			:= ""

Local lValid		:= .T.

Local nOpcA			:= 0

Local nFieldPos		:= 0
Local nPosCtrl		:= 0

Local oDlg			:= NIL
Local oGroup		:= NIL

Local uMemVar		:= __ExecMacro( cMemVar )

Private aObjects	:= Array( 6 , 2 )
Private aListBox	:= Array( 6 )
Private aLBoxPesq	:= Gpea290ClearPesq()

Private cSelect		:= Space( GetSx3Cache( "RC3_RESULT" , "X3_TAMANHO" ) )
Private cPesquisa	:= Space( GetSx3Cache( "RC3_RESULT" , "X3_TAMANHO" ) )

Private lNotClear	:= .F.
Private lCheckBox	:= .F.
Private lPosSelect	:= .F.

Private nOpcSeek1	:= 1
Private nOpcSeek2	:= 1

Private oSelect		:= NIL
Private oPesquisa	:= NIL
Private oLBoxPesq	:= NIL
Private oTree		:= NIL
Private oRadio1		:= NIL
Private oRadio2		:= NIL
Private oCheckBox	:= NIL
Private oFont		:= NIL
Private aRetcoords  := RetCoords(2,4,120,{53,33,37})

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica se o campo permite edicao da formula                ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If (;
			( Upper( cCpoMem ) != "RC3_RESM" 	);
			.and.;
			( Upper( cCpoMem ) != "RC3_FOR01M"	);
			.and.;
			( Upper( cCpoMem ) != "RC3_FOR02M"	);
		)	
	  	Break
	EndIf

	nPosCtrl 	:= oRc3Enchoice:nCtrl
	cSelect 	:= uMemVar
	aFill( aListBox , {} )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Busca o nome do campo em aHeader para mostrar na janela      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( Type( "aRc3Header" ) == "A" )
		If ( ( nFieldPos := GdFieldPos( cCpoMem , aRc3Header ) ) > 0 )
			cDesc := aRc3Header[ nFieldPos , 01 ]
		EndIf
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco a ser Executado na Confirmacao                ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bSet15	:= { |nPosTree| ;
					IF( lValid := Gpea290Valid( @cSelect , cCpoMem,,,.T. ),;
						(;
							nPosTree := Val( oTree:GetCargo() ) ,;
							nOpcA := 1 ,;
							cTipoInit := IF( nPosTree > 1 , AllTrim( Str ( --nPosTree ) ) , AllTrim( Str( nPosTree ) ) ) ,;
							Gpea290CtrlAlt(cCampo, cTipoInit, cSelect),;
							oDlg:End();
						),;
						NIL;
					   );
				}
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco a ser Executado no Cancelamento               ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bSet24		:= { || nOpcA := 0 , oDlg:End() }

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Define o Bloco a ser Executado na Inicializacao do Dialog    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bDialogInit	:= { || EnchoiceBar( oDlg , bSet15 , bSet24, NIL, aButtons ),;
						oTree:TreeSeek( "1" )					       		,;
						oTree:TreeSeek( "3" )					       		,;
						oTree:TreeSeek( "4" )					       		,;
						oTree:TreeSeek( "5" )					       		,;
						oTree:TreeSeek( "6" )					       		,;
						oTree:TreeSeek( AllTrim( Str( nInit ) ) )      		,;
						oTree:SetFocus()						 	   		,;
						Gpea290Init( cSelect, @cTipoInit, @nInit, oDlg )	,;
						Gpea290PosSelect( cSelect , @nInit )				 ;
			   }

	DEFINE FONT oFont NAME "Arial" SIZE 000 , -011 BOLD
	DEFINE MSDIALOG oDlg TITLE ( cCadastro + If ( !Empty( cDesc ) , ( "/" + cDesc ) , "" ) ) From 100 , 042 TO 700 , 720  OF oMainWnd PIXEL

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Criacao da Tree                                              ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		
		DEFINE DBTREE oTree FROM aRetcoords[1][1] , aRetcoords[1][2] TO aRetcoords[1][1]+050 , 120 CARGO OF oDlg
		DBADDTREE oTree ;
			PROMPT ( OemToAnsi(STR0057) ) RESOURCE "FOLDER5" , "FOLDER6" CARGO "1"	//"(1) "Arquivos/Campos"
			Gpea290ShowOpc( oDlg , 1 )
		DBENDTREE oTree

		DBADDTREE oTree ;
			PROMPT ( OemToAnsi(STR0058) + cSpace10 ) RESOURCE "FOLDER5" , "FOLDER6" CARGO "3"	//"(2) Mnemonicos"
			Gpea290ShowOpc( oDlg , 3 )
		DBENDTREE oTree

		DBADDTREE oTree ;
			PROMPT ( OemToAnsi(STR0059) + cSpace10 ) RESOURCE "FOLDER5" , "FOLDER6" CARGO "4"	//"(3) Funcoes"
			Gpea290ShowOpc( oDlg , 4 )
		DBENDTREE oTree

		DBADDTREE oTree ;
			PROMPT ( OemToAnsi(STR0060) + cSpace10 ) RESOURCE "FOLDER5" , "FOLDER6" CARGO "5"	//"(4) Formulas"
			Gpea290ShowOpc( oDlg , 5 )
		DBENDTREE oTree

		DBADDTREE oTree ;
			PROMPT ( OemToAnsi(STR0093) + cSpace10 ) RESOURCE "FOLDER5" , "FOLDER6" CARGO "6"	//"(5) Constantes"
			Gpea290ShowOpc( oDlg , 6 )
		DBENDTREE oTree

		oTree:bChange:= { ||	Gpea290ShowOpc( oDlg ),;
								Gpea290RadioShow(),;
								Gpea290PosSelect( cSelect , nInit ),;
								(;
									IF( !( lPosSelect ),;
										aObjects[ Val( oTree:GetCargo() ) , 1 ]:nAt := 1,;
										NIL;
									   ),;
									   lPosSelect := .F.;
								 ),;
								aLBoxPesq := Gpea290ClearPesq(),;
								oLBoxPesq:SetFocus(),;
								(;
									If ( Val( oTree:GetCargo() ) == 6 ,;
											(;
												oLboxPesq:Disable(),;
												oPesquisa:Disable(),;
												oCheckBox:Disable(),;
												oRadio1:Disable(),;
												oRadio2:Disable();
											),;
											(;
												oLboxPesq:Enable(),;
												oPesquisa:Enable(),;
												oCheckBox:Enable(),;
												oRadio1:Enable(),;
												oRadio2:Enable();
											);
										);
								),;	
								oTree:SetFocus(),;
								oSelect:SetFocus(),;
								aObjects[Val( oTree:GetCargo() ),1]:SetFocus();
						 }

	Gpea290PsqLBox( oDlg )

	@ aRetcoords[7][1]+70 , aRetcoords[7][2] GROUP oGroup TO aRetcoords[7][1]+130 , 330 LABEL OemtoAnsi( STR0047 ) OF oDlg PIXEL	//"Selecionado/Expressao"
	oGroup:oFont:= oFont
	@ aRetcoords[7][1]+80 , aRetcoords[7][2]+10 GET oSelect VAR cSelect MEMO SIZE 300 , 45 FONT oFont OF oDlg PIXEL
                       
	ACTIVATE MSDIALOG oDlg ON INIT Eval( bDialogInit ) CENTERED VALID ( lValid := Gpea290Valid( @cSelect , cCpoMem,,,.T. ) )

	If ( Type( "oRc3Enchoice" ) == "O" )
		//Tratamento para o ReadVar caso seja chamado 2 x no mesmo campo//
		//By Mauricio T. Takakura
		oRc3Enchoice:Refresh()
		oRc3Enchoice:SetFocus()
		oRc3Enchoice:aEntryCtrls[ nPosCtrl ]:SetFocus()
	EndIf	
                                          
End Sequence

RestKeys( aSvKeys )
RestArea( aArea )

Return( IF( nOpcA == 0 , &( cMemVar ) := uMemVar ,  &( cMemVar ) := cSelect ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290CtrlAlt 	³Autor³Mauricio T. Takakura³ Data ³15/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Atualizar o Vetor de Controle de Alteracoes.                 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290CtrlAlt(	cCampo		,;	// campo em modo de alteracao
								cTipoInit	,;	// tipo do item posicionado
								cSelect		 ;	// valor do campo
							  )
If ( cCampo == "RC3_RESM" )
	aTpResu[1] := cTipoInit
	aTpResu[2] := .T.
	aTpResu[3] := AllTrim(cSelect)
ElseIf ( cCampo == "RC3_FOR01M" )
	aTpFm01[1] := cTipoInit
	aTpFm01[2] := .T.
	aTpFm01[3] := AllTrim(cSelect)
Else	
 	aTpFm02[1] := cTipoInit
 	aTpFm02[2] := .T.
 	aTpFm02[3] := AllTrim(cSelect)
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290Init 	³Autor³Mauricio T. Takakura³ Data ³04/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Posicionar no Item de acordo com o valor digitado no campo   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290Init(cSelect		,;	// valor do campo selecionado
							cTipoInit 	,;	// tipo que esta gravado no banco
							nInit		,;	// posicao na tree
							oDlg		 ;	// objeto da janela
						   )

Local aSeek := {}

Local bSeek := { || NIL }

Local cPesq := ""

Local nPosArq := 0
Local nY	:= 0

Local lVal4	:= .F.
Local lFind	:= .F.
Local lEmpty:= .F.

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Qdo estiver vazio sempre posicionar no item 5 - Constantes   ³
	³ ou qdo o campo ja possuir posicionamento                     ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	lEmpty := Empty(AllTrim( cSelect ))
	If lEmpty .Or. (nInit > 0 .and. nInit < 6)
		If lEmpty
			nInit 		:= 6
			cTipoInit 	:= 5
		EndIf

		Gpea290ShowOpc( oDlg , nInit )	// carregar os itens de acordo com o item selecionado
		Break
	EndIf
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Localizar o conteudo do campo no item Tipo gravado no banco  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bSeek := { |x| x[1] == Upper( AllTrim(cPesq)) }
	If nInit != 6
		Gpea290ShowOpc( oDlg , nInit )	// carregar os itens de acordo com o item selecionado

		If ( nInit == 1 )	// Arquivos
			aSeek := aClone( aObjects[ nInit , 1 ]:aArray )
			cPesq := SubStr( cSelect , 1 , 3 )		// variavel privada - campo para digitacao da pesquisa
			lFind := (aScan( aSeek, bSeek ) > 0)
            
			If lFind
				aSeek := aClone( aObjects[ nInit + 1 , 1 ]:aArray )
				cPesq := SubStr( cSelect , 6 , Len( cPesq ) ) // campos
				lFind := ( aScan(aSeek, bSeek) > 0 )
			EndIf
		Else
			aSeek := aClone( aObjects[ nInit , 1 ]:aArray )
			If ( nInit == 4 )	//Funcoes
				cPesq := SubStr( cSelect , 1 , At( "(" , cSelect ) - 1 )
			Else
				cPesq := cSelect
			EndIf
			lFind := aScan(aSeek, bSeek) > 0
		EndIf
		If lFind
			Break
		EndIf
	EndIf

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Procurar em cada item da tree para localizar o valor do campo³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nY := 1 To 6
		If (nY = nInit .and. nY != 6) .Or. nY == 2	// item 2 na arvore pertence a campos do item 1 Arquivos
			Loop
		EndIf
				
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ A opcao 4 devera ser validado apos a opcao 5, prq em FUNCOES ³
		³ variaveis sao validados como .T. Caso retorne falso em 5,    ³
		³ voltar ao 4, validar, e por ultimo o item 6                  ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If nY == 4 .and. !lVal4
			nY++
		ElseIf nY == 6
			nY := 4
			lVal4 := .T.
		ElseIf nY == 5 .and. lVal4
			nY++
		EndIf
	
		oTree:TreeSeek( Str(nY, 1) )
		Gpea290ShowOpc( oDlg , nY  )		// carregar os itens com a opcao do tree selecionado
		aSeek := aClone( aObjects[ nY , 1 ]:aArray )

		If ( nY == 1 )	// Arquivos
			If SubStr( cSelect , 4 , 2 ) == "->"
				cPesq := SubStr( cSelect , 1 , 3 )	// arquivos
				nPosArq := aScan(aSeek, bSeek)
				lFind := nPosArq > 0
				
				aObjects[ nY , 01 ]:nAt := nPosArq
				Eval(aObjects[ nY , 01 ]:bChange)

				aSeek := aClone( aObjects[ nY+1 , 1 ]:aArray )
				cPesq := SubStr( cSelect , 6 , Len( AllTrim(cSelect) ) )	// campos
				lFind := aScan(aSeek, bSeek) > 0
			Else 
				lFind := .F.
			EndIf
		Else
			If ( nY == 4 )	//Funcoes
				cPesq := SubStr( cSelect , 1 , At( "(" , cSelect ) - 1 )
			Else
				cPesq := cSelect
			EndIf
			lFind := aScan(aSeek, bSeek) > 0
		EndIf

		If lFind .or. nY == 6
			// inserido esta opcao para driblar a falha do objeto no treeseek que as vezes nao posiciona //
			oTree:TreeSeek( Str(nY, 1) )
			nInit := nY
			cTipoInit := Str(nY-1, 1)
			Break
		EndIf
	Next nY
	oTree:Refresh()
End Sequence

Gpea290RadioShow()	// habilitar e desabilitar os botoes de acordo com o item da tree

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290PosSelect³Autor³Marinaldo de Jesus  ³ Data ³07/09/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Posicionar no Item do ListBox Pre-Selecionado            	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290PosSelect( cSelect , nInit )

Local lSvCheckBox	:= lCheckBox
Local nSvoRadio1	:= oRadio1:nOption

lCheckBox		:= .T.	//Para Pesquisa Exata
oRadio1:nOption := 1	//Quando nao For Campos deve ser 1 c.c. 2
If ( nInit == 1 )		//Arquivos
	cPesquisa := SubStr( cSelect , 1 , 3 )
	lPosSelect := Gpea290Seek( .T. )
	aObjects[ nInit , 1 ]:Refresh()
	
	oRadio1:nOption := 2	//Campos
	cPesquisa	:= SubStr( cSelect , 6 , Len( cPesquisa ) )	
	lPosSelect	:= Gpea290Seek( .T. )
	aObjects[ nInit + 1 , 1 ]:Refresh()
Else
	If ( nInit == 4 )	//Funcoes
		cPesquisa := SubStr( cSelect , 1 , At( "(" , cSelect ) - 1 )
	Else
		cPesquisa := cSelect
	EndIf	
	lPosSelect := Gpea290Seek( .T. )
	aObjects[ nInit , 1 ]:Refresh()
EndIf

If ( nInit == 6 )	//Constantes
	lPosSelect := .F.
EndIf

lCheckBox		:= lSvCheckBox
oRadio1:nOption := nSvoRadio1

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290Seek		³Autor³Marinaldo de Jesus  ³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Pesquisar nos ListBox chave informada pelo usuario       	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290Seek( lClearPesq )

Local aSeek			:= {}
Local bSeek			:= { || NIL }
Local bSortPesq		:= { || NIL }

Local cSeek			:= Upper( AllTrim( cPesquisa ) )

Local lSeek			:= .F.

Local nPosTree		:= Val( oTree:GetCargo() )
Local nPosSeek		:= 1
Local nSizeSeek		:= Len( cSeek )
Local nInitSeek		:= 1

DEFAULT lClearPesq	:= .F.

If ( nPosTree == 1 )
	If ( oRadio1:nOption == 1 )
		aSeek := aClone( aObjects[ nPosTree , 1 ]:aArray )
	Else
		aSeek := aClone( aObjects[ nPosTree + 1 , 1 ]:aArray )
	EndIf
Else
	aSeek := aClone( aObjects[ nPosTree , 1 ]:aArray ) 
	If ( nPosTree == 3 )
		If ( oRadio2:nOption == 2 )
			nInitSeek := 5
		EndIf
	EndIf
EndIf

If !Empty( nSizeSeek )
	If ( oRadio2:nOption == 1 )
		If ( lCheckBox )
			bSeek := { |x| SubStr( Upper( AllTrim( x[1] ) ) , nInitSeek , nSizeSeek ) == cSeek }
		Else
			bSeek := { |x| SubStr( Upper( AllTrim( x[1] ) ) , nInitSeek , nSizeSeek ) == cSeek .or. cSeek $ Upper( AllTrim( x[1] ) ) }
		EndIf	
		bSortPesq := { |x,y| Upper( AllTrim( x[1] ) ) < Upper( AllTrim( y[1] ) ) }
	Else
		If ( lCheckBox )
			bSeek := { |x| SubStr( Upper( AllTrim( x[2] ) ) , nInitSeek , nSizeSeek ) == cSeek }
		Else
			bSeek := { |x| SubStr( Upper( AllTrim( x[2] ) ) , nInitSeek , nSizeSeek ) == cSeek .or. cSeek $ Upper( AllTrim( x[2] ) ) }
		EndIf
		bSortPesq := { |x,y| Upper( AllTrim( x[2] ) ) < Upper( AllTrim( y[2] ) ) }
	EndIf
	While ( nPosSeek := aScan( aSeek , bSeek , nPosSeek ) ) > 0
		If ( Len( aLBoxPesq ) == 01 .and. Empty( aLBoxPesq[ 01  , 01 ] ) )
			aLBoxPesq[ 01 , 01 ] := aSeek[ nPosSeek , 01 ]
			aLBoxPesq[ 01 , 02 ] := aSeek[ nPosSeek , 02 ]
			aLBoxPesq[ 01 , 03 ] := AllTrim( Str( nPosSeek ) )
		Else
			aAdd( aLBoxPesq , { aSeek[ nPosSeek , 01 ] , aSeek[ nPosSeek , 02 ] , AllTrim( Str( nPosSeek ) ) } )
		EndIf
		++nPosSeek
	End While
	If !Empty( aLBoxPesq )
		aSort( aLBoxPesq , NIL , NIL , bSortPesq )
		oLBoxPesq:aArray := aClone( aLBoxPesq )
		oLBoxPesq:nAt	 := 1
		oLBoxPesq:Refresh()
		If ( lSeek := !Empty( nPosSeek := Val( aLBoxPesq[ 01 , 03 ] ) ) )
			If ( nPosTree == 1 )
				If ( oRadio1:nOption == 1 )
					aObjects[ nPosTree , 1 ]:nAt := nPosSeek
					Gpea290FieldsGet( aObjects[ nPosTree , 1 ]:aArray[ aObjects[ nPosTree , 1 ]:nAt , 1 ] , aListBox[ nPosTree + 1 ] )
					aObjects[ nPosTree + 1 , 1 ]:aArray := aClone( aListBox[ nPosTree + 1 ] )
					aObjects[ nPosTree + 1 , 1 ]:nAt := 1
					aObjects[ nPosTree + 1 , 1 ]:SetFocus()
					aObjects[ nPosTree , 1 ]:SetFocus()
				Else
					aObjects[ nPosTree + 1 , 1 ]:nAt := nPosSeek
					aObjects[ nPosTree + 1 , 1 ]:SetFocus()
				EndIf
			Else
				aObjects[ nPosTree , 1 ]:nAt := nPosSeek
				aObjects[ nPosTree , 1 ]:SetFocus()
			EndIf
		EndIf
	EndIf	
EndIf

If Type( "cPesquisa" ) != "U"
	cPesquisa := Space( GetSx3Cache( "RC3_RESULT" , "X3_TAMANHO" ) )
EndIf	
If ( Type( "oPesquisa" ) == "O" )
	If ( lClearPesq )
		aLBoxPesq := Gpea290ClearPesq()
		oLBoxPesq:Refresh()		
	EndIf
	oPesquisa:Refresh()
EndIf

Return( lSeek )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290Valid	³Autor³Marinaldo de Jesus  ³ Data ³04/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Valida o Conteudo selecionado para a Formula          	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290Valid( cSelect , cCampo , nPosTree , lShowMsgInfo, lGravaFor )

Local cAux1				:= ""
Local cAux2				:= ""
Local cExecute			:= ""
Local cMsgInfo			:= ""

Local lValid			:= .T.

Local nPosAux
Local nLoop
Local nLoops
Local nRc3Result
Local nRc3Form01
Local nRc3Form02

DEFAULT nPosTree		:= Val( oTree:GetCargo() )
DEFAULT cSelect 		:= Space( GetSx3Cache( "RC3_RESULT" , "X3_TAMANHO" ) )
DEFAULT lShowMsgInfo	:= .T.
DEFAULT lGravaFor		:= .T.

CursorWait()

	Begin Sequence
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³Seto o Mnemonico de Retorno ( Se esse ainda nao tiver sido "Se³
		³tado"														   ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		SetMnemonicos( cFilRCA , @__aMnemonicos , .T. , GetMemVar( "RC2_RETURN" ) , .T. )	//__aMnemonicos eh Private em Gpea290 aa Partir de Gpea290Mnt()
 	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica se a Expressao digitada esta OK								 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If !( lValid := ValidRot( NIL , @cSelect , GetSx3Cache( "RC3_RESULT" , "X3_TAMANHO" ) ) )
			Break
		EndIf
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Se Estiver Vazio Abandona porque esta OK								 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If Empty( cSelect )
			Break
		EndIf
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ BEGIN SET VAR															 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If lGravaFor
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Seto as variaveis nao declaradas aqui apenas para validar a Expressao. ³
				³ Na Montagem das Funcoes de Formula as variaveis nao Criadas como  Mnemo³
				³ nicos Serao Todas Declaradas como Locais, ja os Mnemonicos serao inicia³
				³ lizados conforme campo RCA_ACUMUL										 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				nRc3Result	:= GdFieldPos( "RC3_RESULT" , aRc3Header )
				nRc3Form01	:= GdFieldPos( "RC3_FORM01" , aRc3Header )
				nRc3Form02	:= GdFieldPos( "RC3_FORM02" , aRc3Header )
				nLoops		:= Len( aRc3Cols )
				For nLoop := 1 To nLoops
					If nRc3Result > 0
						Gpea290VarInit( AllTrim( aRc3Cols[ nLoop , nRc3Result ] ) )
					EndIf
					If nRc3Form01 > 0
						Gpea290VarInit( AllTrim( aRc3Cols[ nLoop , nRc3Form01 ] ) )
					EndIf
					If nRc3Form02 > 0
						Gpea290VarInit( AllTrim( aRc3Cols[ nLoop , nRc3Form02 ] ) )
					EndIf
				Next nLoop
			EndIf
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifica a String Passada como Parametro								 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			Gpea290VarInit( cSelect )
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ END SET VAR															 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inicia a Validacao													 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If ( nPosTree == 1 ) //Arquivos/Campos
		
			If !( lValid := ( nPosAux := At( "->" , cSelect ) ) > 0 )
				cMsgInfo := STR0055	//"Os Campos de Arquivos Dever estar prefixados com o Alias"
				Break
			EndIf
			
			cAux1	:= SubStr( SubStr( cSelect , 1 ,  nPosAux - 1  ) , -3 )
			If !( lValid := ( CheckExecForm( { || dbSelectArea( cAux1 ) , ( Select( cAux1 ) > 0 ) } , lShowMsgInfo ) ) )
				cMsgInfo := STR0108	//"O Arquivo Selecionado nao Consta no Banco de Dados"
				Break
			EndIf

			cAux2	:= SubStr( cSelect , nPosAux + 2 , Len( cSelect ) )
			If !( lValid := CheckExecForm( cSelect , lShowMsgInfo ) )
				Break
			EndIf

			If !( lValid := !( ( cAux1 )->( FieldPos( cAux2 ) ) == 0 ) )
				cMsgInfo := STR0056	//"O campo Selecionado nao Consta no Dicionario/Base de Dados"
				Break
			EndIf
		
		EndIf
		
		If ( nPosTree == 3 )	//Mnemonicos
			cAux := Upper( AllTrim( cSelect ) )
			If !( lValid := !( aScan( aObjects[ nPosTree , 01 ]:aArray , { |x| Upper( AllTrim( x[1] ) ) == cAux } ) == 0 ) )
				cMsgInfo := STR0064	//"Nao Existe o Mnemonico Informado na Expressao"
				Break
			EndIf
		EndIf

		If (;
					( nPosTree == 4 );	//Funcoes
					.or.;
					( nPosTree == 6 );	//Constantes
				)
			cExecute := Upper( AllTrim( cSelect ) )
			If ( "EXECUTE_FUN_" $ cExecute )
			 	cExecute := ExecFunRmv( cExecute )
				If !( lValid := CheckExecForm( cExecute , lShowMsgInfo ) )
					Break
				EndIf
			ElseIf !( lValid := ChkNoExecute( cSelect , lShowMsgInfo ) )
				Break
			EndIf
		EndIf
		
		If ( nPosTree == 5 )	//Formulas
			cAux := Upper( AllTrim( cSelect ) )
			If !( lValid := !( aScan( aObjects[ nPosTree , 01 ]:aArray , { |x| Upper( AllTrim( x[1] ) ) == cAux } ) == 0 ) )
				cMsgInfo := STR0065	//"Nao Existe a Formula Informada na Expressao"
				Break
			EndIf
		EndIf
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Verifica o Retorno da CriaLocal()        							 	 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If !( lValid := CriaLocalOk() )
			Break
		EndIf
	
	End Sequence
	
CursorArrow()

If (;
		!( lValid );
		.and.;
		( lShowMsgInfo );
		.and.;
		!Empty( cMsgInfo );
	)
	MsgInfo( OemToAnsi( cMsgInfo ) , STR0066 )	//"Aviso de Inconsistencia"
EndIf		

Return( lValid )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290IsFuncion³Autor³Marinaldo de Jesus  ³ Data ³21/12/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se eh uma funcao                             	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290IsFuncion( cFunction )

Local lRet

lRet := ( IsFunction( cFunction ) .or. IsGpFormMethods( cFunction ) )

If !( lRet )
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³A funcao chamada eh uma outra formula. Abrir o repositorio pa-³
	³ra realizar a validacao.                                      ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cGetRpoForm := GetRpoForm( .T. )
	RpoFormInit( cGetRpoForm )
	lRet := ( IsFunction( cFunction ) .or. IsGpFormMethods( cFunction ) )
	RpoFormInit( cGetRpoForm, .T. )
EndIf

Return( lRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290VarInit	³Autor³Marinaldo de Jesus  ³ Data ³16/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializa Variaveis para Validacao da Formula        	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290VarInit( cExpr )

Local aParse
Local aGetLocal

Local cVar

Local nLoop
Local nLoops

Begin Sequence

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Abandona, caso esteja vazio           								 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If Empty( cExpr )
		Break
	EndIf
	cExpr := Upper( StrTran( cExpr , " " , "" ) )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Remove EXECUTE_FUN_ da Expressao										 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	cExpr := ExecFunRmv( cExpr )

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Carrego as Locais que Serao Inicializadas pela CriaLocal				 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	If ( "CRIALOCAL" $ cExpr )

		ChkCriaLocal( cExpr )
		aGetLocal := GetLocal()

		If !Empty( aGetLocal )
			aGetLocal := aClone( aGetLocal[ 2 ] )
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Inicializo para uso na Validacao     									 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			nLoops	:= Len( aGetLocal )
			For nLoop := 1 To nLoops
				cVar := aGetLocal[ nLoop , 1 ]
				If Empty( cVar )
					Loop
				EndIf
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Verifico se a Variavel eh um Mnemonico e Seto-o						 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				If !SetMnemonicos( cFilRCA , @__aMnemonicos , .T. , cVar , .T. )	//__aMnemonicos eh Private em Gpea290 aa Partir de Gpea290Mnt()
					/*/
					ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					³ Caso Contrario Variavel nao esta Definica e Seto-a					 ³
					ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
					If ChkAddVar( cVar )   
						If Empty( aGetLocal[ nLoop , 4 ] )
							_SetOwnerPrvt( cVar , GetValType( aGetLocal[ nLoop , 2 ] ) )
						Else
							_SetOwnerPrvt( cVar , aGetLocal[ nLoop , 4 ] )
						EndIf
					EndIf
				EndIf
			Next nLoop

		EndIf
	
	Else
		
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Efetuo Parse Para Obter as variaveis									 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		aParse	:= ParseVar( cExpr )
		nLoops	:= Len( aParse )
		For nLoop := 1 To nLoops
			cVar := AllTrim( aParse[ nLoop ] )
			If Empty( cVar )
				Loop
			EndIf
			If (;
					( aScan( __aParseVar , { |x| x == cVar } ) == 0 );
					.and.;
					ChkAddVar( cVar );
				)	
				aAdd( __aParseVar , cVar )
			EndIf
		Next nLoop
	
		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Inicializo para uso na Validacao     									 ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		nLoops	:= Len( __aParseVar )
		For nLoop := 1 To nLoops
			cVar := __aParseVar[ nLoop ]
			If Empty( cVar )
				Loop
			EndIf
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Verifico se a Variavel eh um Mnemonico e Seto-o						 ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If !SetMnemonicos( cFilRCA , @__aMnemonicos , .T. , cVar , .T. )	//__aMnemonicos eh Private em Gpea290 aa Partir de Gpea290Mnt()
				/*/
				ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				³ Caso Contrario Variavel nao esta Definica e Seto-a					 ³
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
				If ChkAddVar( cVar )
					_SetOwnerPrvt( cVar , GetValType( SubStr( cVar , 1 , 1 ) ) )
				EndIf
			EndIf
		Next nLoop

	EndIf
	
End Sequence

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ChkNoExecute	³Autor³Marinaldo de Jesus  ³ Data ³11/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³As Funcoes so serao Executadas se estiverem Prefixadas com  a³
³          ³String EXECUTE_FUN_, caso contrario sera feito Parse para  ve³
³          ³rificar se as Funcoes estao Declaradas e se as Variaveis   fo³
³          ³ram Inicializadas											 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function ChkNoExecute( cSelect , lShowHelp )

Local aParseFun	:= ParseFun( cSelect )
Local aParseVar	:= ParseVar( cSelect )

Local cX3Alias
Local cFunChk
Local cVarChk
Local cMsgHelp

Local lChkNoExecute := .T.

Local nLoop
Local nLoops

Begin Sequence

	nLoops	:= Len( aParseFun )
	For nLoop := 1 To nLoops
		cFunChk			:= aParseFun[ nLoop ]
		lChkNoExecute	:= ( Gpea290IsFuncion( cFunChk ) )
		If !( lChkNoExecute )
			If ( lShowHelp )
				cMsgHelp := STR0162 //"A Função: "
				cMsgHelp += ( cFunChk + "()" )
				cMsgHelp += CRLF
				cMsgHelp += STR0163	//"Não Existe No Repositório."
				cMsgHelp += CRLF
				cMsgHelp += STR0164	//"Informe uma Função válida."
				Help( "" , 1 , "NOEXISTFUN" , NIL , OemToAnsi( cMsgHelp ) , 1 , 0 )
			EndIf
			Break
		EndIf
	Next nLoop

	nLoops	:= Len( aParseVar )
	For nLoop := 1 To nLoops
		cVarChk		:= Upper( AllTrim( aParseVar[ nLoop ] ) )
		cX3Alias	:= GetCache( "SX3" , cVarChk , NIL , "X3_ALIAS" , 2 , .F. )
		If Empty( cX3Alias )
			If !( lChkNoExecute := CheckExecForm( cVarChk , lShowHelp ) )
				If ( lShowHelp )
					cMsgHelp := STR0159 //"A variável: "
					cMsgHelp += cVarChk
					cMsgHelp += CRLF
					cMsgHelp += STR0160	//"Nao Foi Declarada ou Inicializada"
					Help( "" , 1 , "NOEXISTVAR" , NIL ,	cMsgHelp , 1 , 0 )
				EndIf
				Break
			EndIf
		Else
			cVarChk := ( cX3Alias + "->" + cVarChk )
			If !( lChkNoExecute := CheckExecForm( cVarChk , lShowHelp ) )
				Break
			EndIf
		EndIf
	Next nLoop

	If Empty( aParseFun )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Tratamento para os arrays dinamicos - criados na execucao    ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If At( "[", cSelect ) == 0
			If !( lChkNoExecute := CheckExecForm( cSelect , lShowHelp ) )
				Break
			EndIf
		EndIf

	EndIf

End Sequence

Return( lChkNoExecute )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290PsqLBox³ Autor ³Marinaldo de Jesus  ³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Montar ListBox da Pesquisa									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290PsqLBox( oDlg )

Local bChange		:= { || .T. }
Local bDblClick		:= { || NIL }

Local oGroup1		:= NIL
Local oGroup2		:= NIL
Local oGroup3		:= NIL

bChange := { |nPosTree| ;
				nPosTree := Val( oTree:GetCargo() ) ,;
				IF( nPosTree == 1 .and. oRadio1:nOption == 2 ,;
					(;
						aObjects[ nPosTree + 1 , 01]:nAt := Val( oLBoxPesq:aArray[ oLBoxPesq:nAt , 3 ] ),;
						aObjects[ nPosTree + 1 , 01]:SetFocus(),;
						oLBoxPesq:SetFocus();
					),;
					(;
						aObjects[ nPosTree , 01]:nAt := Val( oLBoxPesq:aArray[ oLBoxPesq:nAt , 3 ] ),;
						aObjects[ nPosTree , 01]:SetFocus(),;
						IF( nPosTree == 1 ,;
						  	(;
						  		lNotClear := .T.,;
						  		Eval( aObjects[ nPosTree , 1 ]:bChange ),;
						  		lNotClear := .F.;
						  	),;	
						  	NIL;
						  ),;
						oLBoxPesq:SetFocus();
					);
				  );
			}

bDblClick := { |nPosTree| ;
				nPosTree := Val( oTree:GetCargo() ) ,;
				IF( nPosTree == 1 ,;
					IF( oRadio1:nOption == 2 ,;
						Eval( aObjects[ nPosTree + 1 , 01 ]:bLDblClick ),;
						NIL;
					  ),;
					Eval( aObjects[ nPosTree , 01 ]:bLDblClick );
				  );
			}

@ aRetCoords[3][1],aRetCoords[3][2] GROUP oGroup1 TO aRetCoords[3][1]+032 , 120 LABEL OemtoAnsi( STR0049 ) OF oDlg PIXEL	//"Opcoes da Pesquisa"
oGroup1:oFont:= oFont

@ aRetCoords[3][1]+10,aRetCoords[3][2]+5 RADIO oRadio1 VAR nOpcSeek1 ITEMS  OemToAnsi( "Radio1_1" )	, OemToAnsi( "Radio1_2" )	SIZE 045 , 010 OF oDlg PIXEL
oRadio1:bGotFocus := { || IF( Val( oTree:GetCargo() ) == 1 , aLBoxPesq := Gpea290ClearPesq() , NIL ) }
@ aRetCoords[3][1]+10,aRetCoords[3][2]+55 RADIO oRadio2 VAR nOpcSeek2 ITEMS  OemToAnsi( STR0050 )		, OemToAnsi( STR0051 )		SIZE 050 , 010 OF oDlg PIXEL //"Coluna 1"###"Coluna 2"

@ aRetCoords[5][1],aRetCoords[5][2] GROUP oGroup2 TO aRetCoords[5][1]+34 , 120 LABEL OemtoAnsi( STR0005 ) OF oDlg PIXEL	//"Pesquisar"
oGroup2:oFont:= oFont
@ aRetCoords[5][1]+10,aRetCoords[5][2]+10 MSGET oPesquisa VAR cPesquisa SIZE 088 , 008 FONT oFont OF oDlg PICTURE PesqPict("RC3","RC3_RESULT") PIXEL
oPesquisa:bGotFocus		:= { || aLBoxPesq := Gpea290ClearPesq() }
oPesquisa:bLostFocus	:= { || Gpea290Seek() }

@ aRetCoords[5][1]+25,aRetCoords[5][2]+10 CHECKBOX oCheckBox VAR lCheckBox PROMPT OemToAnsi( STR0054 ) SIZE 65,08 OF oDlg PIXEL FONT oFont //"Pesquisa Exata"

@ aRetCoords[7][1],aRetCoords[7][2] GROUP oGroup3 TO aRetCoords[7][1]+65 , 330 LABEL OemtoAnsi( STR0052 ) OF oDlg PIXEL	//"Resultado da Pesquisa"
oGroup3:oFont:= oFont
@ aRetCoords[7][1]+10,aRetCoords[7][2]+10 LISTBOX oLBoxPesq FIELDS HEADERS OemtoAnsi( STR0050 )							,; 	// "Coluna 1"
											 OemtoAnsi( STR0051 )								,;	// "Coluna 2"
											 OemtoAnsi( STR0053 )				 				 ;	// "Posicao"
							COLSIZES GetTextWidth(0,Replicate("A",aObjects[1,1]:aColSizes[1]))	,;
									 GetTextWidth(0,Replicate("I",aObjects[1,1]:aColSizes[2])) 	,;
									 GetTextWidth(0,Replicate("I",05))							 ;
							SIZE 300 , 50 OF oDlg PIXEL ON CHANGE Eval( bChange )
oLBoxPesq:SetArray( aLBoxPesq )
oLBoxPesq:bLine:= { || LineLstBox( oLBoxPesq ) }
oLBoxPesq:bLDblClick := bDblClick

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290ShowOpc³Autor ³Marinaldo de Jesus   ³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carregar Opcao de Acordo com o Tree Selecionado				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290ShowOpc( oDlg , nPosTree )

Local bChange	:= { || .T. }

DEFAULT nPosTree := Val( oTree:GetCargo() )

If ( nPosTree == 1 )		//Arquivos/Campos

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Grava em um array todos os arquivos - alias                  ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	Gpea290AliasGet( @aListBox[ nPosTree ] )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Conforme for alterado na ListBox de arquivo, busca os campos ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	bChange := { |nPosTree| nPosTree := Val( oTree:GetCargo() )				 ,;
							IF( ValType( oLBoxPesq ) == "O" .and. !lNotClear ,;
								aLBoxPesq := Gpea290ClearPesq() 			 ,;	// limpar o array de pesquisa
								NIL											  ;
							   )											 ,;
							Gpea290FieldsGet( aObjects[ nPosTree , 1 ]:aArray[ aObjects[ nPosTree , 1 ]:nAt , 1 ] ,;	// alias
											  aListBox[ nPosTree + 1 ] 		  ; 									  	// array que com os campos
											),;																			// realiza a carga com os campos do arquivo
							IF( ValType( aObjects[ nPosTree + 1 , 1 ] ) == "O" ,;
								(;
									aObjects[ nPosTree + 1 , 1 ]:aArray := aClone( aListBox[ nPosTree + 1 ] ) ,;		// grava no array aobject os campos da tabela
									(;
										IF( !( lPosSelect ) .or. ( aObjects[ nPosTree + 1 , 1 ]:nAt > Len( aObjects[ nPosTree + 1 , 1 ]:aArray ) ),;
											aObjects[ nPosTree + 1 , 1 ]:nAt := 1,;
											NIL;
										  );
									),;
									aObjects[ nPosTree + 1 , 1 ]:SetFocus(),;
									aObjects[ nPosTree , 1 ]:SetFocus();
						 		 ),;
						 		NIL;
					  		   );
				}
	//"Arquivos"
	Gpea290OpcLBox( {017,097,220,050} 	,; 		// Array contendo as Coordenadas da Janela
					oDlg 					,;	// Objeto de Dialogo onde sera criado o LisBox
					aListBox[ nPosTree ]	,; 	// Array com os Conteudos do ListBox
					nPosTree 				,; 	// Posicao do Objeto na tree
					bChange 				,; 	// Bloco a ser Executado na mudanca de arquivo
					STR0042+"/"+STR0043 	,;	// Titulo da 1a. Coluna do ListBox  ## Arquivos
					{ 012 , 095 , 070 , 320 };	// Array contendo as Coordenadas dos Grupos
				  )		

	Eval( bChange )

	//"Campos"
	Gpea290OpcLBox( {077,097,220,050} 		,;
					oDlg 					,;
					aListBox[ nPosTree + 1 ],;
					nPosTree + 1 			,;
					NIL 					,;
					space(40)	 				,;	// Campos
					{ 072 , 095 , 130 , 320 };
				   )

ElseIf ( nPosTree == 3 )	//Mnemonicos
	Gpea290MnemGet( @aListBox[ nPosTree ] )
	
	Gpea290OpcLBox( {017,097,220,110} 	, oDlg , aListBox[ nPosTree ], nPosTree , NIL ,	STR0044	, { 012 , 095 , 130 , 320 } )			//"Mnemonicos"

ElseIf ( nPosTree == 4 )	//Funcoes
	Gpea290FuncGet( @aListBox[ nPosTree ] )

	Gpea290OpcLBox( {017,097,220,110} , oDlg , aListBox[ nPosTree ] , nPosTree , NIL , STR0045 , { 012 , 095 , 130 , 320 } )			//"Funcoes

ElseIf  ( nPosTree == 5 )	//Formulas
	Gpea290FormGet( @aListBox[ nPosTree ] )

	Gpea290OpcLBox( {017,097,220,110} , oDlg , aListBox[ nPosTree ] , nPosTree , NIL , STR0046 , { 012 , 095 , 130 , 320 } )			//"Formulas"

ElseIf  ( nPosTree == 6 )	//Constantes
	aListBox[ nPosTree ] := { { Space(10) , Space(25) } }
	Gpea290OpcLBox( {017,097,220,110} , oDlg , aListBox[ nPosTree ] , nPosTree , NIL , STR0094 , { 012 , 095 , 130 , 320 } )			//"Constantes
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290ClearPesq³ Autor ³Marinaldo de Jesus³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Reinicializa o Array e o ListBox contendo as Pesquisas		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290ClearPesq( aLBoxPesq )

aLBoxPesq := Array( 1 , 3 )

aLBoxPesq[ 01 , 01 ] := ""
aLBoxPesq[ 01 , 02 ] := ""
aLBoxPesq[ 01 , 03 ] := "1"

If ( Type( "oLBoxPesq" ) == "O" )
	oLBoxPesq:aArray := aClone( aLBoxPesq )
	oLBoxPesq:nAt	 := 1
EndIf

If ( Type( "cPesquisa" ) != "U" )
	cPesquisa := Space( GetSx3Cache( "RC3_RESULT" , "X3_TAMANHO" ) )
EndIf

Return( aClone( aLBoxPesq ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290AliasGet ³Autor³Marinaldo de Jesus  ³ Data ³10/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retornar Array com os Alias disponiveis nas Diversas Areas de³
³          ³Trabalho 													 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290AliasGet( aAlias )

Static aWorks

If ( PCount() == 0 )
	
	aWorks := NIL
	
Else

	DEFAULT aAlias := {}
	DEFAULT aWorks := {}

	If Empty( aWorks )
		fSeleArq( NIL , NIL , @aWorks , .F. )
	EndIf

	aAlias := aClone( aWorks )

EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290FieldsGet³Autor³Marinaldo de Jesus  ³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retornar Array com os Campos do SX3 para Uso nas Formulas	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290FieldsGet( cAlias , aFields )

Local aVirtual
Local aHeader

Local nHeader
Local nHeaders
Local nPosAlias

Static aCposAlias
Static aFldsAlias

DEFAULT aFldsAlias	:= {}

cAlias	:= Upper( AllTrim( cAlias ) )

If ( ( nPosAlias := aScan( aFldsAlias , { |x| x[1] == cAlias } ) ) == 0 )

	DEFAULT aCposAlias	:= {}
	If ( ( nPosAlias := aScan( aCposAlias , { |x| x[1] == cAlias } ) ) == 0 )
		aHeader		:= ( cAlias )->( GdMontaHeader( NIL , @aVirtual , NIL , NIL , NIL , .T. ) )
		aAdd( aCposAlias , { cAlias , aClone( aHeader ) , aClone( aVirtual ) } )
	Else
		aHeader 	:= aClone( aCposAlias[ nPosAlias , 02 ] )
		aVirtual	:= aClone( aCposAlias[ nPosAlias , 03 ] )
	EndIf

	aFields	:= {}
	nHeaders	:= Len( aHeader )
	For nHeader := 1 To nHeaders
		If ( aScan( aVirtual , { |x| x == aHeader[ nHeader , 02 ] } ) == 0 )
			aAdd( aFields , { aHeader[ nHeader , 02 ] , aHeader[ nHeader , 01 ] } )
		EndIf
	Next nHeader

	aAdd( aFldsAlias , { cAlias , aClone( aFields ) } )

Else

	aFields := aClone( aFldsAlias[ nPosAlias , 02 ] )

EndIf	

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290OpcLBox³ Autor ³Marinaldo de Jesus  ³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Montar ListBox 												 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290OpcLBox(	aCords		,;	//01 - > Array contendo as Coordenadas da Janela
								oDlg		,;	//02 - > Objeto de Dialogo onde sera criado o LisBox
								aListBox	,;	//03 - > Array com os Conteudos do ListBox
								nPosObj   	,;	//04 - > Posicao do Objeto na tree
								bChange		,;	//05 - > Bloco a Ser Executado
								cTituloCpo	,;  //06 - > Titulo da 1a. Coluna do ListBox
								aCords2		 ;	//07 - > Array contendo as Coordenadas dos Grupos
							 )

Local bDblClick	:= { || NIL }

Local nObj		:= 0
Local nObjs		:= 0

DEFAULT bChange	:= { || .T. }

aEval( aObjects , { |x| IF( ValType(x[1])=="O" , x[1]:Hide() , NIL ) , IF( ValType(x[2])=="O" , x[2]:Hide() , NIL ) } )

nObjs := Len( aObjects )
For nObj := 1 To nObjs
	If ValType( aObjects[ nObj , 01 ] ) == "O" .and. ValType( aObjects[ nObj , 02 ] ) == "O"
		If ( nObj == nPosObj )
			aObjects[ nObj , 01 ]:Show()
			aObjects[ nObj , 02 ]:Show()
			If ( ( nPosObj == 1 ) .and. ( nObj == 1 ) )
				If ValType( aObjects[ nObj + 1 , 01 ] ) == "O" .and. ValType( aObjects[ nObj + 1 , 02 ] ) == "O"
					aObjects[ nObj + 1 , 01 ]:Show()
					aObjects[ nObj + 1 , 02 ]:Show()
				EndIf
			ElseIf ( ( nPosObj == 2 ) .and. ( nObj == 2 ) )
				If ValType( aObjects[ nObj - 1 , 01 ] ) == "O" .and. ValType( aObjects[ nObj - 1 , 02 ] ) == "O"
					aObjects[ nObj - 1 , 01 ]:Show()
					aObjects[ nObj - 1 , 02 ]:Show()
				EndIf
			EndIf
			Exit
		EndIf
	ElseIf ( nObj == nPosObj )
	   	@ aRetCoords[2][1],aRetCoords[2][2] GROUP aObjects[ nObj , 02 ] TO aRetCoords[2][1]+120,330 LABEL OemtoAnsi( cTituloCpo ) OF oDlg PIXEL
	  	aObjects[ nObj , 02 ]:oFont:= oFont
		@ aRetCoords[2][1]+10,aRetCoords[2][2]+10	LISTBOX aObjects[ nObj , 01 ] FIELDS HEADERS	OemToAnsi( cTituloCpo ),;	//01 - Titulo do Campo
											 					 				OemToAnsi( STR0041 );		//02 - "Descricao"
								COLSIZES GetTextWidth(0,Replicate("A",Len(aListBox[01,01]))),;
										 GetTextWidth(0,Replicate("I",Len(aListBox[01,02])));
								SIZE 180,102 OF oDlg PIXEL ON CHANGE Eval( bChange ) 
		aObjects[ nObj , 01 ]:SetArray( aListBox )
		aObjects[ nObj , 01 ]:bLine:= { || LineLstBox( aObjects[ nObj , 01 ] ) }
		aObjects[ nObj , 01 ]:bGotFocus := { || aObjects[ nObj , 01 ]:Refresh() }
		If !( nObj == 1 )
			bDblClick := { |nPosTree| ;
								cSelect := ;
									Padr( ; 
											IF( ( nPosTree := Val( oTree:GetCargo() ) ) == 1 ,;
												aObjects[ nPosTree , 1 ]:aArray[ aObjects[ nPosTree , 1 ]:nAt , 1 ] + ;
												"->" + ;
												aObjects[ nPosTree + 1 , 1 ]:aArray[ aObjects[ nPosTree + 1 , 1 ]:nAt , 1 ] ,;
								  			If ( ( nPosTree := Val( oTree:GetCargo() ) ) == 4 ,;
								  				GpeGetParam( aObjects[ nPosTree , 1 ]:aArray[ aObjects[ nPosTree , 1 ]:nAt , 1 ],aListBox,cSelect),;
												aObjects[ nPosTree , 1 ]:aArray[ aObjects[ nPosTree , 1 ]:nAt , 1 ];
								  			)),;
								  		GetSx3Cache( "RC3_RESULT" , "X3_TAMANHO" ) ),;	
								  oSelect:Refresh();
						  }
			aObjects[ nObj , 01 ]:bLDblClick := bDblClick
		EndIf
		Exit
	EndIf
Next nObj

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290MnemGet	³Autor³Marinaldo de Jesus  ³ Data ³04/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Array com os Mnemonicos para uso em Formula     	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290MnemGet( aMnemoListBox )

Local nMnemo
Local nMnemos

DEFAULT __aMnemonicos	:= {}	//__aMnemonicos eh Private em Gpea290 aa Partir de Gpea290Mnt()
DEFAULT __aLastMnemon	:= {}	//__aLastMnemon eh Private em Gpea290 aa Partir de Gpea290Mnt()

SetMnemonicos( cFilRCA , @__aMnemonicos , .F. , NIL , .F. )	//__aMnemonicos eh Private em Gpea290 aa Partir de Gpea290Mnt()
If (;
		Empty( aMnemoListBox );
		.or.;
		( !ArrayCompare( __aLastMnemon , __aMnemonicos ) );
	)	
	__aLastMnemon	:= aClone( __aMnemonicos )
	aMnemoListBox	:= {}
	nMnemos 		:= Len( __aMnemonicos )
	For nMnemo := 1 To nMnemos
		aAdd( aMnemoListBox , { __aMnemonicos[ nMnemo , 01 ] , __aMnemonicos[ nMnemo , 04 ] + " - " + __aMnemonicos[ nMnemo , 02 ] } )
	Next nMnemo
EndIf

If Empty( aMnemoListBox )
	DEFAULT aMnemoListBox := {}
	aAdd( aMnemoListBox , { Space( GetSx3Cache( "RCA_MNEMON" , "X3_TAMANHO" ) ) , Space( GetSx3Cache( "RCA_DESC" , "X3_TAMANHO" ) ) } )
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290FuncGet	³Autor³Mauro Sergio        ³ Data ³04/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Array com as Funcoes para uso em Formula     	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290FuncGet( aFuncoes )

Local cFilRC4

DEFAULT __aFuncoes	:= {}		//__aFuncoes eh Private em Gpea290 aa Partir de Gpea290Mnt()

If (;
		Empty( aFuncoes );
		.or.;
		Empty( __aFuncoes );
	)	

	If Empty( __aFuncoes )

		aFuncoes	:= {}
		cFilRC4		:= xFilial( "RC4" )
		SetFuncoes( cFilRC4 , @__aFuncoes )

	EndIf

	aFuncoes := aClone( __aFuncoes )

EndIf

If Empty( aFuncoes )
	DEFAULT aFuncoes := {}
	aAdd( aFuncoes , { Space( GetSx3Cache( "RC4_NOMFUN" , "X3_TAMANHO" ) ) , Space( GetSx3Cache( "RC4_DESC" , "X3_TAMANHO" ) ) } )
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290FormGet  ³Autor³Marinaldo de Jesus  ³ Data ³04/06/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Carrega Array com as Formulas para uso em Formula     	 	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290FormGet( aFormulas )

Local aArea
Local aAreaRC2

Local cFilRC2

DEFAULT __aFormulas	:= {}	//__aFormulas eh Private em Gpea290 aa Partir de Gpea290Mnt()

If (;
		Empty( aFormulas );
		.or.;
		Empty( __aFormulas );
	)	

	If Empty( __aFormulas )
		
		aArea		:= GetArea()
		aAreaRC2	:= RC2->( GetArea() )
		cFilRC2		:= xFilial( "RC2" )

		If RC2->( dbSeek( cFilRC2 , .F. ) )

			While RC2->(;
							!Eof();
							.and.;
							( RC2_FILIAL == cFilRC2 );
						 )
			
				RC2->( aAdd( __aFormulas , {;
												AllTrim( RC2_ORIGEM + RC2_CODIGO ) + "()" ,;
												RC2_DESC;
											};
							);
					  )

				RC2->( dbSkip() )
			
			End While

		EndIf

		RestArea( aAreaRC2 )
		RestArea( aArea )

	EndIf

	aFormulas := aClone( __aFormulas )

EndIf	

If Empty( aFormulas )
	aAdd( aFormulas , { Space( GetSx3Cache( "RC2_ORIGEM" , "X3_TAMANHO" ) ) + Space( GetSx3Cache( "RC2_CODIGO" , "X3_TAMANHO" ) )  , Space( GetSx3Cache( "RC2_DESC" , "X3_TAMANHO" ) ) } )
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290RadioShow³Autor³Marinaldo de Jesus  ³ Data ³29/05/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Habilitar os Botoes de Radio para a Selecao da Pesquisa   	 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function Gpea290RadioShow()

Local nPosTree := Val( oTree:GetCargo() )

Local b1LClicked		:= oRadio1:bLClicked
Local b2LClicked		:= oRadio2:bLClicked

Local c1Variable		:= oRadio1:cVariable
Local c2Variable		:= oRadio2:cVariable

Local nLeft1			:= oRadio1:nLeft
Local nLeft2			:= oRadio2:nLeft
Local nTop1				:= oRadio1:nTop
Local nTop2				:= oRadio2:nTop
Local nWidth1			:= oRadio1:nWidth
Local nWidth2			:= oRadio2:nWidth
Local nHeight1			:= oRadio1:nHeight
Local nHeight2			:= oRadio2:nHeight

Local nOption1			:= oRadio1:nOption
Local nOption2			:= oRadio2:nOption

Local Align1			:= oRadio1:Align
Local Align2			:= oRadio2:Align

Local l1ShowHint		:= oRadio1:lShowHint
Local l2ShowHint		:= oRadio2:lShowHint

Local l1VisibleControl	:= oRadio1:lVisibleControl
Local l2VisibleControl	:= oRadio2:lVisibleControl

If ( nPosTree == 1 )
	oRadio1:aItems		:= { aObjects[ nPosTree , 02 ]:cCaption , aObjects[ nPosTree + 1 , 02 ]:cCaption }
	oRadio1:lReadOnly	:= .F.
Else
	oRadio1:aItems 		:= { aObjects[ nPosTree , 02 ]:cCaption , "" }
	oRadio1:lReadOnly	:= .T.
EndIf

oRadio1:nLeft			:= nLeft1
oRadio1:nTop			:= nTop1
oRadio1:nWidth			:= nWidth1
oRadio1:nHeight			:= nHeight1
oRadio1:lShowHint		:= l1ShowHint
oRadio1:Align			:= Align1
oRadio1:cVariable		:= c1Variable
oRadio1:lVisibleControl	:= l1VisibleControl
oRadio1:nOption			:= nOpcSeek1 := nOption1
oRadio1:bLClicked		:= b1LClicked

oRadio2:nLeft			:= nLeft2
oRadio2:nTop			:= nTop2
oRadio2:nWidth			:= nWidth2
oRadio2:nHeight			:= nHeight2
oRadio2:lShowHint		:= l2ShowHint
oRadio2:Align			:= Align2
oRadio2:cVariable		:= c2Variable
oRadio2:lVisibleControl	:= l2VisibleControl
oRadio2:nOption			:= nOpcSeek2 := nOption2
oRadio2:bLClicked		:= b2LClicked

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³GpeGetParam 	³Autor³Mauro               ³ Data ³09/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Tela para digitacao de parametros apos sel.de funcao		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                  	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GpeGetParam( cNomeFun,aFuncoes,cSelect )

Local aRc5Header 	:= {}
Local aRc5Cols		:={}
Local aParam		:= {}
Local aAlter		:= {"RC5_CONTEM"}
Local aNotFields  	:= {"RC5_FILIAL","RC5_NOMFUN","RC5_SEQ"}
Local aSvKeys		:= GetKeys()

Local bSet15		:= { || NIL }
Local bSet24		:= { || NIL }

Local cRet 			:= If( cSelect # NIL .And. !Empty(cSelect) , cSelect , "" )
Local cFilRC5		:= xFilial("RC5")

Local nUsado  		:= 0
Local nPosF			:= 0
Local nPosCo		:= 0
Local nTSx3cT		:= GetSx3Cache( "RC5_CONTEM" , "X3_TAMANHO" )
Local nF			:= 0
Local nC			:= 0 

Local aAdv3Size     := {}
Local aInfo3AdvSize := {}
Local aObj3Coords   := {}

Private oRc5GedDados:= NIL


	aAdv3Size		:= MsAdvSize(,.T.,370)
	aInfo3AdvSize	:= { aAdv3Size[1] , aAdv3Size[2] , aAdv3Size[3] , aAdv3Size[4],1,1 }
	aAdd( aObj3Coords , { 000 , 020 , .T. , .F. } )
	aAdd( aObj3Coords , { 000 , 100 , .T. , .T. } )	
	aObj3Size		:= MsObjSize( aInfo3AdvSize , aObj3Coords )
	
//-- Se for um parametro ja selecionado reconstroi os parametros a partir de um conteudo texto.
If cSelect # NIL .And. ! Empty(cSelect) .And. cNomeFun$ cSelect
	aParam := fConstPar( cSelect )
EndIf

//-- Posiciao do array com a funcao selecionada
nPosF := aScan(aFuncoes,{ |x| x[1] = cNomeFun })
If nPosF > 0

	cNomeFun := Padr(cNomeFun,GetSx3Cache( "RC5_NOMFUN" , "X3_TAMANHO" ) )

	//--Montagem do aCols/aHeader 
	aRc5Cols :=RC5->( GdMontaCols( @aRc5Header , @nUsado , , , NIL ,aNotFields , , "RC5",cFilRC5+cNomeFun ) )
	nOpca := 0

	//--Preencher Conteudo dos Parametros com o digitado anteriormente
	If Len(aParam) > 0
		nPosCo 	:= GdFieldPos("RC5_CONTEM",aRc5Header)
		For nC:=1 to Len(aRc5Cols)
			If Len(aParam) >= nC
				aRc5Cols[nC,nPosCo] := aParam[nC]+Space(nTSx3Ct-Len(aParam[nC]))
			EndIf
		Next nC
	EndIf

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( STR0095 ) From aAdv3Size[7],0 TO aAdv3Size[6],aAdv3Size[5] OF oMainWnd PIXEL	//"Parametros da Funcao"

		@ aObj3Size[1][1] , aObj3Size[1][2] GROUP oGroup TO aObj3Size[1][3] , aObj3Size[1][4]*0.30 LABEL OemToAnsi(STR0096) OF oDlg PIXEL				// "Funcao:"
		oGroup:oFont:= oFont
		@ aObj3Size[1][1] , aObj3Size[1][4]*0.31 GROUP oGroup TO aObj3Size[1][3] , aObj3Size[1][4] LABEL OemToAnsi(STR0041) OF oDlg PIXEL				// "Descricao"
		oGroup:oFont:= oFont

		@ aObj3Size[1][1]+10 , aObj3Size[1][2]+10 SAY cNomeFun						 		SIZE 050,10 OF oDlg PIXEL FONT oFont
		@ aObj3Size[1][1]+10 , aObj3Size[1][4]*0.31+10 SAY OemToAnsi(aFuncoes[nPosF,2])	SIZE 250,10 OF oDlg PIXEL FONT oFont

		oRc5GedDados := MsNewGetDados():New(aObj3Size[2][1],aObj3Size[2][2],aObj3Size[2][3],aObj3Size[2][4],GD_UPDATE,"Gpea290LFunOk","Gpea290TFunOk","",aAlter,1,,,,,@oDlg,@aRc5Header,@aRc5Cols)
		
		If (aObjects[ Val( oTree:GetCargo() ) , 1 ]:aArray[ aObjects[ Val( oTree:GetCargo() ) , 1 ]:nAt , 1 ] == "FTABELA" .OR.;
		    aObjects[ Val( oTree:GetCargo() ) , 1 ]:aArray[ aObjects[ Val( oTree:GetCargo() ) , 1 ]:nAt , 1 ] == "FPOSTAB") 
				oRc5GedDados:oBrowse:bGotFocus := {|| gp290VerifF3() }
				oRc5GedDados:oBrowse:bChange := {|| gp290VerifF3() }
		EndIf
		
		bSet15	:= { || nOpca:=1,If(oRc5GedDados:TudoOk(),(aRc5Cols:=aClone(oRc5GedDados:aCols),oDlg:End()),Opca:=0)}
		bSet24	:= { || oDlg:End() }

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 )  CENTERED

	If ( nOpca == 1 )
		nPosCp	:= GdFieldPos( "RC5_CONTEM" , aRc5Header )
		cRet	:= AllTrim(cNomeFun)+"("
		For nF := 1 To Len(aRc5Cols)

			cRet += AllTrim(aRc5Cols[nF][nPosCp])
			cRet += ","

		Next nF
		cRet := SubStr(cRet, 1, Len(cRet) - 1) + ")"
	EndIf
EndIf

RestKeys( aSvKeys )

Return( cRet )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290LFunOk 	³Autor³Mauro               ³ Data ³09/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verificacao da linha digitada 								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T. iu .F.                                             	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290LFunOk( oBrowse )

Local cContem 	:= ""

Local lRet		:= .T.

Local nPosCo 	:= GdFieldPos( "RC5_CONTEM" )
Local nAtu 		:= oBrowse:nAt

cContem := aCols[nAtu,nPosCo]

//--Verifica se valido o parametro informado
If !( lValid := CheckExecForm( @cContem ) )
	lRet := .F.
EndIf

//--Verifica o tipo do campo digitado com o tipo do parametro.
If lRet .And. (GdFieldGet( "RC5_TPARAM" ) # "8") 
	If ( ( (cType:=ValType(cContem)) == "C" .And. GdFieldGet( "RC5_TPARAM" ) # "1") .Or.;
	   ( (cType:=ValType(cContem)) == "N" .And. GdFieldGet( "RC5_TPARAM" ) # "2") .Or.;
   	   ( (cType:=ValType(cContem)) == "D" .And. GdFieldGet( "RC5_TPARAM" ) # "3") .Or.;
	   ( (cType:=ValType(cContem)) == "L" .And. GdFieldGet( "RC5_TPARAM" ) # "4") .Or.;
	   ( (cType:=ValType(cContem)) == "A" .And. GdFieldGet( "RC5_TPARAM" ) # "5") .Or.;
	   ( (cType:=ValType(cContem)) == "B" .And. GdFieldGet( "RC5_TPARAM" ) # "6") .Or.;
	   ( (cType:=ValType(cContem)) == "O" .And. GdFieldGet( "RC5_TPARAM" ) # "7") )

		MsgInfo( STR0075 + " " + STR0102 + " " + cType + " " + STR0103, STR0066 ) //"Existe um Erro na Formula. "/"O Tipo de Retorno do parametro informado"/nao corresponde com o tipo solicitado
		lRet := .F.
	EndIf
EndIf

//--Verifica se Parametro e obrigatorio
If lRet .And. GdFieldGet( "RC5_OBRIG" ) == "1" .And. Empty(GdFieldGet("RC5_CONTEM"))
	MsgInfo( STR0075 + " " + STR0101 , STR0066 ) //"Existe um Erro na Formula. "###"Esse parametro e de preenchimento obrigatorio"		
	lRet := .F.
EndIf

Return(lRet)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290TFunOk 	³Autor³Mauro               ³ Data ³09/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Tudo OK                       								 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³.T. ou .F.                                             	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290TFunOk( oBrowse )
Return( .T. )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fConstPar	 	³Autor³Mauro               ³ Data ³09/07/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Construir os parametros da funcao a partir do texto			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³Array 	                                             	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Gpea290                                                      ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function fConstPar( cTexto )

Local aParam 	:= {}

Local cTexto1 	:= AllTrim(cTexto)
Local cPar		:= ""
Local cParAc	:= ""

Local nTamTxt	:= Len(cTexto1)
Local nPosIni 	:=  At("(",cTexto1)
Local nPosFim	:=  Rat(")",cTexto1)
Local nT		:= 0
Local nItensPar	:= 0

cTexto1	:= SubStr(cTexto1,nPosIni+1,nPosFim-nPosIni)

nTamTxt := Len(cTexto1)

For nT := 1 To nTamTxt

    //--Colocado para resolver o problema quando o ntamTxt está zerado e o nT está com 1
    //--continua no for.
	If nTamTxt == 0
		Exit
	EndIf

	cPar  	:= SubStr(cTexto1,nT,1)
	nPosF := 0
	If cPar == "(" 
		nPosF :=  At(")",SubStr(cTexto1,nT+1,nTamTxt))
	ElseIf cPar == ")"              
		// Se for o fechamento da funcao
		nPosF :=  At(")",cTexto1)
		If nPosF == Len( cTexto1 )
			cTexto1 := Substr( cTexto1, 1, Len(cTexto1) -1 ) 
		EndIf
	EndIf
	If nPosF > 0
		//--Somar Mais 1 na poscisao final devido a busca ser sem o 1o. elemento
		nPosF += 1
  		cParAc  += SubStr(cTexto1,nT,nPosF)
  		If SubStr(cTexto1,nPosF+1,1) == "," .Or. nposF + 1 >= nTamTxt
	  		Aadd(aParam,cParAc)
	  		cParAc 	:= ""
	  		nPosF += 1
	  	EndIf	
  		cTexto1 := AllTrim(SubStr(cTexto1,nPosF+1,nTamTxt)) 
 		nTamTxt := Len(cTexto1)
 		nT := 0
  	ElseIf cPar == "," .and. nItensPar == 0
  		Aadd(aParam,cParAc)
  		cParAc 	:= ""
  		cTexto1 := AllTrim(SubStr(cTexto1,nT+1,nTamTxt)) 
 		nTamTxt := Len(cTexto1)
 		nT := 0
	Else
		If cPar $ '{["' .and. nItensPar == 0
			nItensPar := 1
		ElseIf cPar $ '}]"' .and. nItensPar == 1
			nItensPar := 0
		EndIf
		cParAc += cPar
	EndIf	
Next nT	

Return( aParam )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
		F U N C O E S     U T I L I Z A D A S    E M     S X 3 
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³RC2CodigoVld  ³Autor³ Marinaldo de Jesus  ³ Data ³31/07/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Validar o Conteudo do campo RC2_CODIGO                      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³RC2CodigoVld()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso	   ³X3_VALID do campo RC2_CODIGO								³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function RC2CodigoVld()

Local lRc2CodigoOk := .T.

Local cKey
Local cMsgHelp

Begin Sequence

	If !( lRc2CodigoOk := NaoVazio(M->RC2_CODIGO) )
		Break
	EndIf
                           
	cKey := Rc2CodChkStr( GetMemVar( "RC2_CODIGO" ) )
	If ( cKey <> GetMemVar( "RC2_CODIGO" ) )
		If !( lRc2CodigoOk := !Empty( cKey ) )
			cMsgHelp := STR0165	//"Nao é possível incluir Fórmula pois o"
			cMsgHelp += CRLF
			cMsgHelp += STR0166	//"Primeiro Caracter da Fórmula é inváli"
			cMsgHelp += CRLF
			cMsgHelp += STR0167	//"do ou existem caracteres inválidos no"
			cMsgHelp += CRLF
			cMsgHelp += STR0168	//"Código da Fórmula."
			Help( "" , 1 , "NOADDFORM" , NIL , OemToAnsi( cMsgHelp ) , 1 , 0 )
			Break           
		EndIf
		SetMemVar( "RC2_CODIGO" , cKey )
	EndIf
    
	cKey := xFilial("RC2") + ( GetMemVar( "RC2_CODIGO" ) )
	DbSelectArea( "RC2" )
	DbSetOrder( RetOrder( "RC2" , "RC2_FILIAL+RC2_CODIGO+RC2_ORIGEM" ) )
	DbSeek( cKey, .F. )
	If !Eof()
		If Inclui
			lRc2CodigoOk := .F.
			Help("",1,"EXISTCHAV")		// Chave ja Existente 
		EndIf
		Break
	EndIf

	cKey := ( GetMemVar( "RC2_ORIGEM" ) + GetMemVar( "RC2_CODIGO" ) )
    
	If !(MV_MODFOL == "2")
		If !( lRc2CodigoOk := ChkAsc( AllTrim( cKey ) ) )
			cMsgHelp := STR0165	//"Nao é possível incluir Fórmula pois o"
			cMsgHelp += CRLF
			cMsgHelp += STR0166	//"Primeiro Caracter da Fórmula é inváli"
			cMsgHelp += CRLF
			cMsgHelp += STR0167	//"do ou existem caracteres inválidos no"
			cMsgHelp += CRLF
			cMsgHelp += STR0168	//"Código da Fórmula."
			Help( "" , 1 , "NOADDFORM" , NIL , OemToAnsi( cMsgHelp ) , 1 , 0 )
			Break           
		EndIf
	
		If !( lRc2CodigoOk := Gpea290FindFunc() )
			Break
		EndIf
	EndIf


	If !( lRc2CodigoOk := MayIUseCode( "RC2" + xFilial("RC2") + cKey ) )
		Break
	EndIf

End Sequence

Return( lRc2CodigoOk )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpe290Return  ³Autor³Mauricio T. Takakura  ³ Data ³25/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Retornar ao campo 1.                                        ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpe290Return()  					    			         ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³														     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³X3_VALID dos campos de formula do RC3 GPEA290()				 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290Return()

If ( Type( "oRc3Enchoice" ) == "O" )
	oRc3Enchoice:aEntryCtrls[1]:SetFocus()
EndIf	

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³RC2DescOrigem ³Autor³ Marinaldo de Jesus  ³ Data ³10/09/2002³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retornar a Descricao do RC2_ORIGEM							³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³RC2DescOrigem( cOrigem )									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso	   ³Generico      												³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function RC2DescOrigem( cOrigem )

Local cDescOrigem	:= ""

DEFAULT cOrigem		:= ""

If ( ValType( cOrigem ) == "C" )
	cOrigem := Upper( AllTrim( cOrigem ) )
	If ( cOrigem == "S_" )
		cDescOrigem := 	STR0106	//"Sistema"
	ElseIf ( cOrigem == "U_" )
		cDescOrigem := 	STR0107	//"Usuario"
	EndIf
EndIf

Return( cDescOrigem )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³Rc2CodigoPict ³Autor³ Marinaldo de Jesus  ³ Data ³09/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retornar a Picture para o campo RC2_CODIGO                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Rc2CodigoPict()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso	   ³X3_PICTVAR para o campo RC2_CODIGO							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Rc2CodigoPict()
Local cPict := ""
cPict := "@! NNNNNNNN" + "%C"
Return( cPict )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³Rc3CodigoPict ³Autor³ Marinaldo de Jesus  ³ Data ³09/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Retornar a Picture para o campo RC3_CODIGO                  ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Rc3CodigoPict()         									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso	   ³X3_PICTVAR para o campo RC3_CODIGO							³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Rc3CodigoPict()
Return( Rc2CodigoPict() )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
F U N C O E S   U T I L I Z A D A S   P A R A   G E R A C A O  D O  C O D I G O
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³Gpea290Ger	  ³Autor³ Marinaldo de Jesus  ³ Data ³18/11/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Chamar Programa Gerador de Programa de Formulas Padrao      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290Ger()	          									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso	   ³Generico      												³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290Ger()
Return( MsAguarde( { || GerGpexForm() } ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³GerGpexForm() ³Autor³Mauricio T. Takakura ³ Data ³27/10/2004³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Gerar o Programa de Formulas                                ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³GerGpexForm()	          									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³Generico      												³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Static Function GerGpexForm()

Local aFirstLines
Local aLinesProg 	:= {}
Local aLinesFunc 	:= {}

Local aIniHdrRC2
Local aRC2Virtual
Local aIniHdrRC3
Local aRC3Virtual
Local aIniHdrSYP
Local aSYPVirtual

Local cPath 		:= ""
Local cArquivo 		:= ""
Local cFormNum		:= "0000"
Local cMsgArq

Local cValueCampo
Local cProg
Local cNameFunc
Local cMsg

Local lSetCentury	:= __SetCentury("on")

Local nRecno := 0

Local nUsado
Local nArq
Local nLineMemo
Local nItem
Local nY
Local nSeqProg		:= 0
Local nFirstArq
Local nContForm		:= 0

cArquivo 	:= ( "GPFOR" + cPaisLoc + ".PRX" )

aIniHdrRC2	:= RC2->( GdMontaHeader( @nUsado , @aRC2Virtual , NIL , NIL , NIL , .T. ) )
aIniHdrRC3	:= RC3->( GdMontaHeader( @nUsado , @aRC3Virtual , NIL , NIL , NIL , .T. ) )
aIniHdrSYP	:= SYP->( GdMontaHeader( @nUsado , @aSYPVirtual , NIL , NIL , NIL , .T. ) )
Begin Sequence
			  								       				   //mostra drives    mostra hard disk retorna diretorio
	cPath := cGetFile( "" , OemToAnsi( STR0141 ) , 0 , NIL , .F. , GETF_LOCALHARD + GETF_RETDIRECTORY,, ) //"Selecione o Diretorio"

	If Empty( cPath )
		Break
	EndIf
	cArquivo := ( cPath + cArquivo )
	cMsgArq		:= cArquivo

	If File(cArquivo)
		If !(MsgYesNo( OemToAnsi( STR0142 ),;	// "O Arquivo ja Existe !! Deseja Sobrescrer?"
 		 			   OemToAnsi( STR0087 ) ;	//"Aten‡„o"
					))
			Break
		EndIf		
	EndIf

	nArq := MsFCreate( cArquivo , 0 )
	If (;
			( Ferror() # 0 );
			.and.;
			( nArq = -1  );
		)
		cMsg := STR0147 + Str( Ferror() , 3 ) //-- "Erro de Gravacao do Arquivo - Codigo DOS: "
		MsgInfo( OemToAnsi( cMsg ) )
		Break
	EndIf
	
	nFirstArq := nArq

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Cabecalho da funcao                                          ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	aAdd(aLinesProg, '#INCLUDE "PROTHEUS.CH"' + CRLF + CRLF)
	aAdd(aLinesProg, "/*/" + CRLF)
	aAdd(aLinesProg, "ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
	aAdd(aLinesProg, "³Fun‡…o    ³GpFor" + cPaisLoc + "      " + "³Autor³ Gerado pelo sistema ³ Data ³" + Dtoc( Msdate() ) + "³" + CRLF)
	aAdd(aLinesProg, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
	aAdd(aLinesProg, "³Descri‡…o ³Formulas padroes                                            ³" + CRLF)
	aAdd(aLinesProg, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
	aAdd(aLinesProg, "³Sintaxe   ³                                                            ³" + CRLF)
	aAdd(aLinesProg, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
	aAdd(aLinesProg, "³Parametros³<Vide Parametros Formais>                                   ³" + CRLF)
	aAdd(aLinesProg, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
	aAdd(aLinesProg, "³ Uso      ³Generico                                                    ³" + CRLF)
	aAdd(aLinesProg, "ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF)
	aAdd(aLinesProg, "Function GpFor" + cPaisLoc + "()" + CRLF)
	aAdd(aLinesProg,  CRLF )
	aAdd(aLinesProg, "Local aRC2Header  := {}"	+ CRLF)
	aAdd(aLinesProg, "Local aRC3Header  := {}"	+ CRLF )
	aAdd(aLinesProg, "Local aSYPHeader  := {}"	+ CRLF )
	aAdd(aLinesProg,  CRLF )
	aAdd(aLinesProg, "Local bForm	    := NIL" + CRLF)
	aAdd(aLinesProg,  CRLF )
	aAdd(aLinesProg, "Local cFormNum" + CRLF)
	aAdd(aLinesProg, "Local cForm" + CRLF)
	aAdd(aLinesProg,  CRLF )
	aAdd(aLinesProg, "Local lRet        := .T." + CRLF)
	aAdd(aLinesProg, "Local nItem       := 0"	+ CRLF) 

	aAdd(aLinesProg,  CRLF )

	aAdd(aLinesProg, "Private lFilRPO     := SuperGetMv('MV_RPOFIL',, .F.) .and. xFilial('SRY') <> xFilial('RC2')" + CRLF)

	aAdd(aLinesProg,  CRLF )
	
	aAdd(aLinesProg, "/*/" + CRLF)
	aAdd(aLinesProg, "ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
	aAdd(aLinesProg, "³ Cabecalho de RC2 e RC3 gerado pela formula padrao            ³" + CRLF)
	aAdd(aLinesProg, "ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF)
	For nItem := 1 To Len( aIniHdrRC2 )
		If aScan(aRC2Virtual, aIniHdrRC2[nItem,2]) > 0
			Loop
		EndIf
		cProg := ""
		For nY := 1 To Len( aIniHdrRC2[ nItem ] )   
			If "_FILIAL" $ aIniHdrRC2[nItem][2] .AND. nY == __AHEADER_WIDTH__    // Tratamento para Gestão Corporativa.
				cProg += ""	//"cFil"
			Else
				cProg += "'" + If(ValType(aIniHdrRC2[nItem,nY])=="N", AllTrim(Str(aIniHdrRC2[nItem,nY])),;
							   	If(ValType(aIniHdrRC2[nItem,nY])=="L", Transform(aIniHdrRC2[nItem, nY],"@!"),;
							   	   aIniHdrRC2[nItem, nY])) + "'" 
			EndIf                                        
			
			If ( nY < Len( aIniHdrRC2[ nItem ] ) )
				cProg += ","
			EndIf
		Next nY
		If !Empty(cProg)
			aAdd(aLinesProg, "aAdd(aRC2Header, " + '{ ' + cProg + ' })' + CRLF)
		EndIf
	Next nItem
	aAdd(aLinesProg, CRLF)

	For nItem := 1 To Len( aIniHdrRC3 )
		If aScan(aRC3Virtual, aIniHdrRC3[nItem,2]) > 0
			Loop
		EndIf

		cProg := ""
		For nY := 1 To Len( aIniHdrRC3[ nItem ] )           
			If "_FILIAL" $ aIniHdrRC3[nItem][2] .AND. nY == __AHEADER_WIDTH__    // Tratamento para Gestão Corporativa.
				cProg += ""	//"cFil"
			Else
				cProg += "'" + If(ValType(aIniHdrRC3[nItem,nY])=="N", AllTrim(Str(aIniHdrRC3[nItem,nY])),;
							   	If(ValType(aIniHdrRC3[nItem,nY])=="L", Transform(aIniHdrRC3[nItem, nY],"@!"),;
							   	   aIniHdrRC3[nItem, nY])) + "'"
			EndIf
			
			If ( nY < Len( aIniHdrRC3[ nItem ] ) )
				cProg += ","
			EndIf
		Next nY
		If !Empty(cProg)
			aAdd(aLinesProg, "aAdd(aRC3Header, " + '{ ' + cProg + ' })' + CRLF)
		EndIf
	Next nItem
	aAdd(aLinesProg, CRLF )
	
	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Cabecalho das Observacoes                                    ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	For nItem := 1 To Len(aIniHdrSYP)
		If aScan(aSYPVirtual, aIniHdrSYP[nItem,2]) > 0
			Loop
		EndIf
		cProg := ""
		For nY := 1 To Len(aIniHdrSYP[nItem])  
			If "_FILIAL" $ aIniHdrSYP[nItem][2] .AND. nY == __AHEADER_WIDTH__    // Tratamento para Gestão Corporativa.
				cProg += ""	//"cFil"
			Else
				cTexto := If(ValType(aIniHdrSYP[nItem,nY])=="N", AllTrim(Str(aIniHdrSYP[nItem,nY])),;
							   	If(ValType(aIniHdrSYP[nItem,nY])=="L", Transform(aIniHdrSYP[nItem, nY],"@!"),;
							   	   aIniHdrSYP[nItem, nY])) 
				cTexto := StrTran(cTexto, "'", '"')
				cProg += "'" + cTexto + "'"
			EndIf


			If nY < Len(aIniHdrSYP[nItem])
				cProg += ","
			EndIf
		Next nY
		If !Empty(cProg)
			aAdd(aLinesProg, "aAdd(aSYPHeader, " + '{ ' + cProg + ' })' + CRLF)
		EndIf
	Next nItem
	aAdd(aLinesProg, CRLF )
	
	aAdd(aLinesProg, "/*/" + CRLF)
	aAdd(aLinesProg, "ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
	aAdd(aLinesProg, "³ Só carrega se estiver utilizando modelo padrão do pais.       ³" + CRLF)
	aAdd(aLinesProg, "ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF)
	aAdd(aLinesProg, 'If !(MV_MODFOL == "' + MV_MODFOL + '")' + CRLF )
	aAdd(aLinesProg, '	Return' + CRLF )
	aAdd(aLinesProg, 'EndIf' + CRLF )
	aAdd(aLinesProg, CRLF )
	
	aAdd(aLinesProg, "/*/" + CRLF)
	aAdd(aLinesProg, "ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
	aAdd(aLinesProg, "³ Validar a Estrutura das Tabela RC2 e RC3 com a do Cliente     ³" + CRLF)
	aAdd(aLinesProg, "ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF)
	aAdd(aLinesProg, 'lRet := fNewOldSx3(aRC2Header, aRC3Header, "RC2", "RC3",.F.)' + CRLF )
	aAdd(aLinesProg, 'lRet := If( lRet , fNewOldSx3(aSYPHeader, NIL, "SYP") , lRet)' + CRLF)

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Itens da Formula                                             ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
	RC2->( dbSetOrder( RetOrder( "RC2" , "RC2_FILIAL+RC2_ORIGEM+RC2_CODIGO" ) ) )
	RC2->( dbGoTop() )

	While RC2->( !Eof() )

		dbSelectArea("RC2")
		If ( RC2->RC2_ORIGEM == "S_" ) // .Or. ( AllTrim( RC2->RC2_CODIGO ) == "SALINC" )

			nRecno++
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Adiciona os Itens da Formula - Tabela RC3, por funcao        ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			dbSelectArea("RC3")
			RC3->( dbSetOrder( RetOrder( "RC3", "RC3_FILIAL+RC3_ORIGEM+RC3_CODIGO+RC3_SEQFOR+RC3_SEQPAI" ) ) )
	        RC3->( dbSeek( RC2->( RC2_FILIAL + RC2_ORIGEM + RC2_CODIGO ) ) )
			If RC3->( !Eof() )
				cFormNum := __Soma1( cFormNum )
				nContForm++
				cNameFunc := "Add" + cPaisLoc + cFormNum
				aAdd(aLinesFunc, "/*/" + CRLF)
				aAdd(aLinesFunc, "ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
				aAdd(aLinesFunc, "³Fun‡…o    ³"+cNameFunc + "    ³Autor³ Gerado pelo sistema ³ Data ³" + "          " + "³" + CRLF)
				aAdd(aLinesFunc, "ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF)
				cNameFunc := "Function Add" + cPaisLoc + cFormNum + "( aRc2Header , aRc3Header , aSYPHeader )"
				aAdd(aLinesFunc, cNameFunc + CRLF)
				aAdd(aLinesFunc, CRLF )
				aAdd(aLinesFunc, "Local aRc2Cols    := {}" + CRLF)
				aAdd(aLinesFunc, "Local aRc3Cols    := {}" + CRLF)
				aAdd(aLinesFunc, "Local aItensSYP   := {}" + CRLF)
				aAdd(aLinesFunc, CRLF )
				aAdd(aLinesFunc, "Local cFilRC2     := xFilial('RC2')" + CRLF)
				aAdd(aLinesFunc, "Local cCliVersao  := ''" + CRLF)
				
				aAdd(aLinesFunc, CRLF )
				aAdd(aLinesFunc, "Local lFound      := .F." + CRLF)
				aAdd(aLinesFunc, CRLF )
				aAdd(aLinesFunc, "Local nRc2Origem	:=  GdFieldPos( 'RC2_ORIGEM' , aRC2Header )" + CRLF)
				aAdd(aLinesFunc, "Local nRc2Codigo	:=  GdFieldPos( 'RC2_CODIGO' , aRC2Header )" + CRLF)
				aAdd(aLinesFunc, "Local nRc2Versao	:=  GdFieldPos( 'RC2_VERSAO' , aRC2Header )" + CRLF)
				aAdd(aLinesFunc, CRLF)
			EndIf
	
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Adiciona o cabecalho - RC2                                   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			cProg := "aAdd(aRc2Cols, { "
	
			For nItem := 1 To Len( aIniHdrRC2 )
				cValueCampo := ""
				// campo memo normal //
				If (;
						( aIniHdrRC2[nItem,8] == "M" );
						.and.;
						( aScan(aRC2Virtual, aIniHdrRC2[nItem,2]) == 0 );
					)	
					nLineMemo := MlCount(aIniHdrRC2[nItem,2], 80)
					For nY := 1 To nLineMemo
						cValueCampo += AllTrim(MemoLine(aIniHdrRC2[nItem,2], 80, nY))
						If nY < nLineMemo
							cValueCampo += ' '
						EndIf
					Next nY
				// campo memo gravado em SYP - Virtual //
				ElseIf (;
							( aIniHdrRC2[nItem,8] == "M" );
							.and.;
							( aScan(aRC2Virtual, aIniHdrRC2[nItem,2]) > 0 );
						)
					Loop
				ElseIf ( aScan(aRC2Virtual, aIniHdrRC2[nItem,2]) > 0 )
					Loop
				ElseIf ( aIniHdrRC2[nItem,8] == "N" )
					cValueCampo += AllTrim(Str(RC2->(FieldGet(FieldPos(aIniHdrRC2[nItem,2])))))
				ElseIf "FILIAL" $ aIniHdrRC2[nItem,2]
					cValueCampo += ""
				Else
					cValueCampo += AllTrim(RC2->(FieldGet(FieldPos(aIniHdrRC2[nItem,2]))))
				EndIf
				cValueCampo := StrTran( cValueCampo , "'" , __Convert_Apostrofe__ )
				cValueCampo := "'" + cValueCampo
				cValueCampo += "'"
				cProg		+= cValueCampo
				If ( nItem < Len( aIniHdrRC2 ) )
					cProg += ","
				EndIf
			Next nItem
			cProg += "} )"
			aAdd(aLinesFunc, cProg + CRLF)
	
			aAdd(aLinesFunc, CRLF)
	
	        While RC3->(;
	        				!Eof();
	        				.and.;
	        				( RC3_ORIGEM == RC2->RC2_ORIGEM );
	        				.and.;
	        				( RC3_CODIGO == RC2->RC2_CODIGO );
	        			)
		        cProg := "aAdd(aRc3Cols, { "
				For nItem := 1 To Len( aIniHdrRC3 )
					cValueCampo := ""
					// campos memo normal //
					If (;
							( aIniHdrRC3[nItem,8] == "M" );
							.and.;
							( aScan(aRC3Virtual, aIniHdrRC3[nItem,2]) == 0 );
						)	
						nLineMemo := MlCount(aIniHdrRC3[nItem,2], 254)
						For nY := 1 To nLineMemo
							cValueCampo += AllTrim(MemoLine(aIniHdrRC3[nItem,2], 254, nY))
							If nY < nLineMemo
								cValueCampo += ' '
							EndIf
						Next nY
					// campo memo virtual - gravacao realizada em SYP //
					ElseIf (;
								( aIniHdrRC3[nItem,8] == "M" );
								.and.;
								( aScan(aRC3Virtual, aIniHdrRC3[nItem,2]) > 0 );
							)	
						Loop
					ElseIf ( aScan(aRC3Virtual, aIniHdrRC3[nItem,2]) > 0 )
						Loop
					ElseIf ( aIniHdrRC3[nItem,8] == "N" )
						cValueCampo += AllTrim(Str(RC3->(FieldGet(FieldPos(aIniHdrRC3[nItem,2])))))
					ElseIf "FILIAL" $ aIniHdrRC3[nItem,2]
						cValueCampo += ""
					Else
						cValueCampo += AllTrim(RC3->(FieldGet(FieldPos(aIniHdrRC3[nItem,2]))))
					EndIf
					cValueCampo := StrTran( cValueCampo , "'" , __Convert_Apostrofe__ )
					cValueCampo := "'" + cValueCampo
					cValueCampo += "'"
					cProg		+= cValueCampo
					If ( nItem < Len( aIniHdrRC3 ) )
						cProg += ","
					EndIf
				Next nItem
				cProg += "} )"
				aAdd(aLinesFunc, cProg + CRLF)
				RC3->( dbSkip() )
		    Enddo
		    
			/*/
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Incluir os Itens de Observacao                               ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
			If !Empty(RC2->(RC2_CODOBS))
				DbSelectArea("SYP")
				DbSetOrder( 1 ) // YP_FILIAL+YP_CHAVE+YP_SEQ
				DbSeek(xFilial( "SYP")+RC2->(RC2_CODOBS), .F.)
				aAdd(aLinesFunc, CRLF)			
				Do While !Eof() .and. SYP->(YP_FILIAL+YP_CHAVE) == (xFilial( "SYP")+RC2->(RC2_CODOBS))
					cProg := "aAdd(aItensSYP, { "
					For nItem := 1 To Len(aIniHdrSYP)
						cValueCampo := ""
						If ( aScan( aSYPVirtual , aIniHdrSYP[nItem,2]) > 0 )
							Loop
						ElseIf aIniHdrSYP[nItem,8] == "N"
							cValueCampo += AllTrim(Str(&(aIniHdrSYP[nItem,2])))
						ElseIf aIniHdrSYP[nItem,8] == "D"
							cValueCampo += 'Ctod("' + DtoC(&(aIniHdrSYP[nItem,2])) + '")'
						ElseIf aIniHdrSYP[nItem,8] == "L"
							If &(aIniHdrSYP[nItem,2])
								cValueCampo += ".T."
							Else
								cValueCampo += ".F."
							EndIf
						ElseIf "FILIAL" $ aIniHdrSYP[nItem,2]
							cValueCampo += ""
						Else
							cValueCampo += &(aIniHdrSYP[nItem,2])
						EndIf
	
						cValueCampo := StrTran(cValueCampo, "'", '"')
	
						If (aIniHdrSYP[nItem,8] != "N") .and. (aIniHdrSYP[nItem,8] != "D") .and. (aIniHdrSYP[nItem,8] != "L")
							cValueCampo := "'" + cValueCampo
							cValueCampo += "'"
						EndIf
		
						cProg += cValueCampo
						If nItem < Len(aIniHdrSYP)
							cProg += ","
						EndIf
					Next nItem
					cProg += "} )"
					aAdd(aLinesFunc, cProg + CRLF)
					SYP->( DbSkip() )
				EndDo
			EndIf
	
			aAdd(aLinesFunc, CRLF)
			aAdd(aLinesFunc, 'dbSelectArea("RC2")' + CRLF)
			aAdd(aLinesFunc, "RC2->( dbSetOrder( RetOrdem('RC2','RC2_FILIAL+RC2_ORIGEM+RC2_CODIGO') ) )" + CRLF)
			aAdd(aLinesFunc, "lFound := RC2->( dbSeek( cFilRC2 + aRc2Cols[ 1 , nRc2Origem ] + aRc2Cols[ 1 , nRc2Codigo ] ) )" + CRLF)
			aAdd(aLinesFunc, "If ( lFound )" + CRLF)
			aAdd(aLinesFunc, "	cCliVersao := RC2->RC2_VERSAO" + CRLF)
			aAdd(aLinesFunc, "Else" + CRLF)
			aAdd(aLinesFunc, "	cCliVersao := '__New_Version__' " + CRLF)
			aAdd(aLinesFunc, "EndIf" + CRLF)
			aAdd(aLinesFunc, "If ( Val(cCliVersao) < Val(aRc2Cols[ 1 , nRc2Versao ]) ) .Or. (cCliVersao == '__New_Version__') .Or. ( lFilRPO .and. Val(cCliVersao) == Val(aRc2Cols[ 1 , nRc2Versao ]) )" + CRLF)
		   	aAdd(aLinesFunc, "	fFormGrava( aRc2Cols , aRc3Cols , aRC2Header , aRC3Header , aSYPHeader, aItensSYP )" + CRLF )
		   	aAdd(aLinesFunc, "EndIf" + CRLF)
		   	aAdd(aLinesFunc, CRLF )
			aAdd(aLinesFunc, "Return( NIL )")
			aAdd(aLinesFunc, CRLF )
			aAdd(aLinesFunc, CRLF )
		EndIf

		RC2->( dbSkip() )

		/*/
		ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		³ Se estourar limite de funcoes, gerar outro arquivo.          ³
		ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
		If nContForm = 110 .Or. RC2->( Eof() )
			nContForm := 0
			If nSeqProg == 0
				nFirstArq := nArq
				aFirstLines := aClone( aLinesFunc )
			Else
			    For nItem := 1 To Len( aLinesFunc )
				    Fwrite( nArq , aLinesFunc[ nItem ] )
				Next nItem
				fClose( nArq )
			EndIf

			nSeqProg++

			aLinesFunc := {}

			If RC2->( !Eof() )
				cArquivo 	:= ( cPath + ( "GPFO" + StrZero( nSeqProg, 1) + cPaisLoc + ".PRX" ))				
				nArq := MsFCreate( cArquivo , 0 )
				If (;
					( Ferror() # 0 );
					.and.;
					( nArq = -1  );
					)
					cMsg := STR0147 + Str( Ferror() , 3 ) //-- "Erro de Gravacao do Arquivo - Codigo DOS: "
					MsgInfo( OemToAnsi( cMsg ) )
					Break
				EndIf
				cMsgArq += CRLF + cArquivo
				
				aAdd(aLinesFunc, "/*/" + CRLF)
				aAdd(aLinesFunc, "ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
				aAdd(aLinesFunc, "³Fun‡…o    ³GpFo" + StrZero( nSeqProg,1) + cPaisLoc + "      " + "³Autor³ Gerado pelo sistema ³ Data ³" + Dtoc( Msdate() ) + "³" + CRLF)
				aAdd(aLinesFunc, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
				aAdd(aLinesFunc, "³Descri‡…o ³Programa de Continuacao das formulas                        ³" + CRLF)
				aAdd(aLinesFunc, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
				aAdd(aLinesFunc, "³Sintaxe   ³                                                            ³" + CRLF)
				aAdd(aLinesFunc, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
				aAdd(aLinesFunc, "³Parametros³<Vide Parametros Formais>                                   ³" + CRLF)
				aAdd(aLinesFunc, "ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´" + CRLF)
				aAdd(aLinesFunc, "³ Uso      ³Generico                                                    ³" + CRLF)
				aAdd(aLinesFunc, "ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF + CRLF)

			EndIf
	    EndIf
	Enddo
	
	aAdd(aLinesProg, CRLF)
	aAdd(aLinesProg, "/*/" + CRLF)
	aAdd(aLinesProg, "ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
	aAdd(aLinesProg, "³ Executar gravacao da formula.                                 ³" + CRLF)
	aAdd(aLinesProg, "ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF)
	aAdd(aLinesProg, "If ( lRet )" + CRLF )
	aAdd(aLinesProg, CRLF)

	aAdd(aLinesProg, "	/*/" + CRLF)
	aAdd(aLinesProg, "	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿" + CRLF)
	aAdd(aLinesProg, "	³ Chamada da funcao de gravacao                                ³" + CRLF)
	aAdd(aLinesProg, "	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/" + CRLF)
	aAdd(aLinesProg, '	cFormNum := "0000"' + CRLF)
	aAdd(aLinesProg, "	For nItem := 1 To " + AllTrim( Str( nRecno ) ) + CRLF)
	aAdd(aLinesProg, "		cFormNum	:= __Soma1( cFormNum )" + CRLF)
	aAdd(aLinesProg, '		cForm		:= ( "Add" + cPaisLoc + cFormNum )' + CRLF)
	aAdd(aLinesProg, "		If IsFunction( cForm )" + CRLF)
	aAdd(aLinesProg, "			bForm := __ExecMacro( '{ ||' +  cForm + '( aRc2Header , aRc3Header, aSYPHeader ) }' )" + CRLF)
	aAdd(aLinesProg, "			CheckExecForm( bForm , .T. , 'ERRADDFRM' , cForm )" + CRLF)
	aAdd(aLinesProg, "		EndIf" + CRLF)
	aAdd(aLinesProg, "	Next nItem" + CRLF)

	aAdd(aLinesProg, CRLF)
	aAdd(aLinesProg, "EndIf" + CRLF )
	aAdd(aLinesProg, CRLF)

    aAdd(aLinesProg, "Return( NIL )" + CRLF)
    aAdd(aLinesProg, CRLF)
    aAdd(aLinesProg, CRLF)

	/*/
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Transferir as linhas para dentro do programa                 ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
    For nItem := 1 To Len( aLinesProg )
	    Fwrite( nFirstArq , aLinesProg[ nItem ] )
	Next nItem

	If Empty( aFirstLines ) 
		aFirstLines := aClone(aLinesFunc)
	EndIf
    For nItem := 1 To Len( aFirstLines )
	    Fwrite( nFirstArq , aFirstLines[ nItem ] )
	Next nItem

	fClose( nFirstArq )

	MsgInfo( STR0139 + CRLF + cMsgArq + CRLF + STR0140 ) // "O Programa " #### "para Cadastro de Formulas Padroes foi Gerado com Sucesso"

End Sequence

If !( lSetCentury )
	__SetCentury("off")
EndIf

Return( NIL )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³gp290VerifF3  ³Autor³Tatiane V. Matias    ³ Data ³09/08/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Funcao para mudar a Consulta Padrao F3 - RCA ou RCBFOR      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³gp290VerifF3()	          									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais> 									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³Generico      												³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function gp290VerifF3()
      
Local nPosContem 	:= GdFieldPos("RC5_CONTEM", oRc5GedDados:aHeader)
Local nPosTree		:= Val( oTree:GetCargo() )
	
	If (aObjects[ nPosTree , 1 ]:aArray[ aObjects[ nPosTree , 1 ]:nAt , 1 ] == "FTABELA" .OR.;
	    aObjects[ nPosTree , 1 ]:aArray[ aObjects[ nPosTree , 1 ]:nAt , 1 ] == "FPOSTAB") .AND.;
	   (oRc5GedDados:nAt == 1)
	   	oRc5GedDados:aHeader[nPosContem][9] := "RCBFOR"
	   	oRc5GedDados:aInfo[nPosContem][1] := "RCBFOR"
	Else
	   	oRc5GedDados:aHeader[nPosContem][9] := "RCA"
	   	oRc5GedDados:aInfo[nPosContem][1] := "RCA"
	EndIf

	oRc5GedDados:Refresh()

Return ( .T. )

/*                                	
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³ MenuDef		³Autor³  Luiz Gustavo     ³ Data ³03/01/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Isola opcoes de menu para que as opcoes da rotina possam    ³
³          ³ser lidas pelas bibliotecas Framework da Versao 9.12 .      ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³< Vide Parametros Formais >									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEA010                                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³aRotina														³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³< Vide Parametros Formais >									³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/   

Static Function MenuDef()
/*/
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³ Define Array contendo as Rotinas a executar do programa      ³
³ ----------- Elementos contidos por dimensao ------------     ³
³ 1. Nome a aparecer no cabecalho                              ³
³ 2. Nome da Rotina associada                                  ³
³ 3. Usado pela rotina                                         ³
³ 4. Tipo de Transa‡„o a ser efetuada                          ³
³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
³    2 - Simplesmente Mostra os Campos                         ³
³    3 - Inclui registros no Bancos de Dados                   ³
³    4 - Altera o registro corrente                            ³
³    5 - Remove o registro corrente do Banco de Dados          ³
³    6 - Copiar                                                ³
³    7 - Legenda                                               ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Local aRotina := {}
	If !(MV_MODFOL == "2")
		aAdd( aRotina , { STR0005 , "PesqBrw"	 , 0 , 1 } ) // "Pesquisar"
		aAdd( aRotina , { STR0006 , "Gpea290Mnt" , 0 , 2 } ) // "Visualizar"
		aAdd( aRotina , { STR0007 , "Gpea290Mnt" , 0 , 3 } ) // "Incluir"
		aAdd( aRotina , { STR0008 , "Gpea290Mnt" , 0 , 4 } ) // "Alterar"
		aAdd( aRotina , { STR0009 , "Gpea290Mnt" , 0 , 5 } ) // "Excluir"
		aAdd( aRotina , { STR0089 , "Gpea290Cpy" , 0 , 6 } ) // "Copiar"
		aAdd( aRotina , { STR0010 , "Gpea290Leg" , 0 , 7 } ) // "Legenda"
		aAdd( aRotina , { STR0155 , "Gpea290Mnt" , 0 , 8 } ) // "Ver Codigo"
	Else
		aAdd( aRotina , { STR0005 , "PesqBrw"	 , 0 , 1 } ) // "Pesquisar"
		aAdd( aRotina , { STR0006 , "Gpea291Mnt" , 0 , 2 } ) // "Visualizar"
		aAdd( aRotina , { STR0007 , "Gpea291Mnt" , 0 , 3 } ) // "Incluir"
		aAdd( aRotina , { STR0008 , "Gpea291Mnt" , 0 , 4 } ) // "Alterar"
		aAdd( aRotina , { STR0009 , "Gpea291Mnt" , 0 , 5 } ) // "Excluir"
		aAdd( aRotina , { STR0089 , "Gpea291Cpy" , 0 , 6 } ) // "Copiar"
		aAdd( aRotina , { STR0175 , "Gpea291Vld" , 0 , 6 } ) // "Val. Formulas"
	EndIf
	
Return aRotina

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpea290SeqFor ³Autor³Tatiane Vieira Matias³ Data ³10/10/2007³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Sequencia as Formulas de acordo com a Linha da GetDados		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³Gpea290SeqFor()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Inicializador Padrao do RC3_SEQFOR                          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³Sequencia da Formula										³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpea290SeqFor( lValid , nSeq )

Local cVar		:= ""
Local cSeq		:= ""
Local lRet		:= .T.
Local nPosSeq	:= 0 
Local nTamSx3	:= TamSx3( "RC3_SEQFOR" )[1]

DEFAULT lValid	:= .F.
DEFAULT nSeq	:= 0

If lValid
	cVar	:= &( ReadVar() )
	cSeq	:= StrZero( Val( cVar ) , nTamSX3 )
	nPosSeq	:= GdFieldPos( "RC3_SEQFOR" )
	If ( lRet := ( aScan( aCols , { |x,y| x[ nPosSeq ] == cSeq .and. y != n } ) == 0 ) )
		&( ReadVar() ) := cSeq
	Else
		MsgInfo( STR0061 , STR0062 ) //"Ja Existe a Sequencia Informada. Digite uma nova sequencia"###"Sequencia Invalida"
	EndIf                                                                                       
Else
	If ( Type("n") == "U" )
		n := 1
	EndIf
	If ( nSeq > 0 )
		n := nSeq
	EndIf
	If !(MV_MODFOL == "2")
		cSeq := StrZero( Min( ( ( ( n / __MaxRowForm__ ) * 10 ) * __MaxRowForm__ ) , __MaxSeqForm__ ) , nTamSX3 )
	Else
		cSeq := StrZero( Min( n , __MaxSeqForm__ ) , nTamSX3 )
	EndIf
EndIf

Return( If( lValid , lRet , cSeq ) )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fGetModFol    ³Autor³Leandro Drumond      ³ Data ³19/09/2012³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Inicializador padrao do campo RC2_MODELO.              		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fGetModFol()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Inicializador padrao do campo RC2_MODELO.                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³MV_MODFOL													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function fGetModFol()
Local cModelo

cModelo := SuperGetMv( "MV_MODFOL", .F., "1" )
	
Return(cModelo)

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³fSryRec    ³Autor³Fernando Guilherme      ³ Data ³10/11/2020³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Ajusta a SRY caso n?o tenha recompilado.              		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   fSryRec()												³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³Ajusta a SRY para regravar o campo recomp.                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Retorno  ³NIL													³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³															³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/

Static Function fSryRec ()
aAreaSRY := SRY->(GetArea())
DbSelectArea ("SRY")
dbSetOrder(1)
SRY->(dbGoTop())

While SRY->( !Eof() )
	If SRY->RY_RECOMP == "1"
		Reclock("SRY", .F.)
		SRY->RY_RECOMP := "2"
		MsUnLock()
	EndIf
	SRY->(DbSkip())
EndDo
RestArea(aAreaSry)
Return

/*/{Protheus.doc} Gp290Replica
Replica as fórmulas selecionadas
@author Leandro Drumond
@since 14/02/2022
@version P12.1.33
@Type     Function
/*/
Function Gp290Replica(nOpc, lCompAux, aFilAux, aRc2Enchoice, aRc2Cols, aSvRc2Cols, aRc2VirtChoice, aRC3Virtual, aRC3Recnos, aRc3Cols, aSvRc3Cols, lBarGauge, cFormName)

Local aRotBkp	:= {}
Local aSRYHBKP	:= {}
Local aSRMHBkp	:= {}
Local aSYPHBkp	:= {}
Local nX 		:= 0
Local nOpcAux   := nOpc
Local nReg      := 0

DEFAULT lBarGauge := .F.
DEFAULT lSRYPad   := .F.

For nX := 1 to Len(aFilAux)

	cFilAnt 	:= aFilAux[nX]

	If lCompAux
		//Verifica se o roteiro padrão da filial esta criado, do contrário, efetua a criação.
		If !(SRY->(DbSeek(xFilial("SRY"))))
			Gpea160RotGer( .F., Nil, .T., @aRotBkp, @aSRYHBKP, @aSRMHBkp, @aSYPHBkp )
			f160RstSt()
			GPCallCmpAll("SRY",.T.,.T.,,.T.)
		EndIf
	EndIf

	If lBarGauge
		IncPrcG1Time( STR0184 + cFilAnt + STR0185 + cFormName) //"Processando filial: " ##  " - Fórmula: "
	EndIf

	nReg 		:= 0
	aRC3Recnos 	:= {}
	nOpcAux     := nOpc
	
	If nOpc <> 3 //Não é inclusão
		If RC2->(DbSeek(xFilial("RC2") +  "U_" +  GetMemVar( "RC2_CODIGO" ) ))
			nReg := RC2->(Recno())
			If RC3->(Dbseek(RC2->(RC2_FILIAL + RC2_ORIGEM + RC2_CODIGO)))
				While RC3->(!Eof() .and. RC3_FILIAL + RC3_ORIGEM + RC3_CODIGO == RC2->(RC2_FILIAL + RC2_ORIGEM + RC2_CODIGO) )
					aAdd(aRC3Recnos, RC3->(Recno()))
					RC3->(DbSkip())
				EndDo
			EndIf
		ElseIf nOpc == 5 //Exclusão
			Loop
		ElseIf nOpc == 4 //Se o registro não existe. Cria na nova filial
			nOpcAux := 3
		EndIf								
	EndIf
	If Gpea290GvTudOk(	1					,;	//Opcao Retornada Pelos Blocos bSet15 ou bSet24 ( Confirma ou Cancela )
						"RC2"				,;	//Alias do Arquivo Pai ( RC2 )
						@nOpcAux			,;	//Opcao de Acordo com aRotina
						@nReg				,;	//Numero do Registro do Arquivo Pai ( RC2 )
						aRc2Enchoice		,;	//Campos do Arquivo Pai ( RC2 ) Mesma Estrutrua do aHeader
						aRc2Cols			,;	//Array com o Conteudo Atual do RC2
						aSvRc2Cols			,;	//Conteudo Anterior do RC2
						aRc2VirtChoice 		,;	//Campos Virtuais do Arquivo Pai ( RC2 )
						aRC3Virtual			,;	//Campos Virtuais do Arquivo Filho ( RC3 )
						@aRC3Recnos			,;	//Recnos do Arquivo Filho ( RC3 )
						aRc3Cols			,;	//aCols
						aSvRc3Cols			 ;	//Copia do aCols antes das alteracoes
						)
		If lCompAux
			Gpea290SwCod( nReg , .F., .F. , .T. )
		EndIf
	EndIf
Next nX

Return Nil
