#INCLUDE "PROTHEUS.CH"
#INCLUDE "APDXFUN.CH"
#INCLUDE "PONCALEN.CH"

/*/
зддддддддддбддддддддддбдддддбддддддддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁAPDXFUN   ЁAutorЁEquipe Advanced RH          Ё Data Ё16/07/2003Ё
цддддддддддеддддддддддадддддаддддддддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁBiblioteca de Funcoes para uso no SIGAAPD                      Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico                                                       Ё
цддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё            ATUALIZACOES SOFRIDAS DESDE A CONSTRU─AO INICIAL              Ё
цддддддддддддбддддддддддбдддддддддддбдддддддддддддддддддддддддддддддддддддд╢
ЁProgramador ЁData      ЁBOPS       ЁMotivo da Alteracao                   Ё
цддддддддддддеддддддддддедддддддддддедддддддддддддддддддддддддддддддддддддд╢
ЁCecilia Car.Ё04/07/2014ЁTPZWF1     ЁIncluido o fonte da 11 para a 12 e efeЁ
Ё            Ё          Ё           Ёtuada a limpeza.                      Ё  
юддддддддддддаддддддддддадддддддддддадддддддддддддддддддддддддддддддддддддды
*/

/*
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁApdRelationFileЁ Autor ЁMarinaldo de Jesus   Ё Data Ё18/12/2002Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁValida o Relacionamentos dos Arquivos do Modulo APD            Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁApdRelationFile( lShowHelp )								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ                                         					   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRetModo													   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerica                                                       Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdRelationFile( lShowHelp )
         
Local lRetModo		:= .T.

Static lApdChkRel
Static cLastEmpChk

DEFAULT lShowHelp	:= .T.

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Coloca o Ponteiro do Mouse em Estado de Espera               Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
IF ( lShowHelp )
	CursorWait()
EndIF	

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Consiste o Modo de Acesso dos Arquivos                       Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Begin Sequence
	DEFAULT lApdChkRel 	:= .T.
	DEFAULT cLastEmpChk	:= cEmpAnt
	IF ( cLastEmpChk <> cEmpAnt )
		lApdChkRel := .T.
	EndIF
	IF !( lApdChkRel )
		Break
	EndIF
	IF !( lRetModo := Rd0ChkModo( lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := RdZChkModo( lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD0" , "RDE" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD0" , "RDV" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD0" , "RDJ" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD5" , "RDH" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD3" , "RD8" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD3" , "RDO" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD6" , "RD7" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD6" , "RD9" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD6" , "RDA" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD6" , "RDB" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD6" , "RDC" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD6" , "RDD" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD6" , "RDP" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "SQO" , "SQP" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDM" , "RD2" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDK" , "RD4" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDL" , "RDR" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDL" , "RDF" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RBK" , "RBL" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDS" , "RDT" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDU" , "RDU" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RD1" , "RD1" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDG" , "RDG" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDI" , "RDI" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDN" , "RDN" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDQ" , "RDQ" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDY" , "RDY" , lShowHelp ) )
		Break
	EndIF
	IF !( lRetModo := xRetModo( "RDZ" , "RDZ" , lShowHelp ) )
		Break
	EndIF
End Sequence

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Restaura o Ponteiro do Mouse                                 Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
IF ( lShowHelp )
	CursorArrow()
EndIF	

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Se estiver Tudo Ok nao verifica Novamente					   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
lApdChkRel := !( lRetModo ) 

Return( lRetModo )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁRd0ChkModo	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё03/06/2004Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se o Modo de Acesso do RD0 eh Compartilhado           Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRd0ChkModo													   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGENERICO                                                       Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function Rd0ChkModo( lShowMsg )

Local lRd0ChkModo := Empty( xFilial( "RD0" ) )

DEFAULT lShowMsg := .T.

IF !( lRd0ChkModo )
	IF ( lShowMsg )
		//"O Modo de Acesso da Tabela"
		//deve ser, obrigatСriamente, Compartilhado."
		MsgInfo( STR0027 + " RD0 " + STR0028 )
	EndIF
EndIF		

Return( lRd0ChkModo )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁRdZChkModo	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё03/06/2004Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁVerifica se o Modo de Acesso do RDZ eh Compartilhado           Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁlRd0ChkModo													   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGENERICO                                                       Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function RdZChkModo( lShowMsg )

Local lRdZChkModo := Empty( xFilial( "RDZ" ) )

DEFAULT lShowMsg := .T.

IF !( lRdzChkModo )
	IF ( lShowMsg )
		//"O Modo de Acesso da Tabela"
		//deve ser, obrigatСriamente, Compartilhado."
		MsgInfo( STR0027 + " RDZ " + STR0028 )
	EndIF
EndIF

Return( lRdzChkModo )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxNivel	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё10/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box de Niveis             Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxNivel( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0001 + ";" )	//"Mesmo Nivel"
		cOpcBox += ( "2=" + STR0002 + ";" )	//"Nivel Acima" 
		cOpcBox += ( "3=" + STR0003 	  )	//"Nivel Abaixo"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0001 )	//"Mesmo Nivel"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0002 )	//"Nivel Acima" 
			Case ( cOpcDesc == "3" ) ; ( cOpcBox := STR0003 )	//"Nivel Abaixo"
		End Case

	EndIF	

Else

	cOpcBox := "123"

EndIF	
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxStatus 	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё10/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box de Status             Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxStatus( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0004  + ";"	)	//"Aberto"
		cOpcBox += ( "2=" + STR0005			)	//"Fechado"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0004 )	//"Aberto"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0005	)	//"Fechado"
		End Case

	EndIF

Else

	cOpcBox := "12"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxSimNao 	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё10/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box Sim;Nao               Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxSimNao( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0006 + ";"	)	//"Sim"
		cOpcBox += ( "2=" + STR0007			)	//"Nao"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0006 )	//"Sim"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0007	)	//"Nao"
		End Case

	EndIF

Else

	cOpcBox := "12"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxNaoSim 	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё10/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box Sim;Nao               Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxNaoSim( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0007 + ";"	)	//"Nao"
		cOpcBox += ( "2=" + STR0006			)	//"Sim"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0007 )	//"Nao"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0006	)	//"Sim"	
		End Case

	EndIF

Else

	cOpcBox := "12"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxIntExt 	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё10/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box Interno;Externo       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxIntExt( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0008 + ";"	)	//"Interno"
		cOpcBox += ( "2=" + STR0009			)	//"Externo"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0008 )	//"Interno"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0009	)	//"Externo"
		End Case

	EndIF

Else

	cOpcBox := "12"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxSexo   	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё10/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box Feminino;Masculino    Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxSexo( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "F=" + STR0010 + ";"	)	//"Feminino"
		cOpcBox += ( "M=" + STR0011			)	//"Masculino"

	Else

		Do Case
			Case ( cOpcDesc == "F" ) ; ( cOpcBox := STR0010 )	//"Feminino"
			Case ( cOpcDesc == "M" ) ; ( cOpcBox := STR0011	)	//"Masculino"
		End Case

	EndIF

Else

	cOpcBox := "FM"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxPdEnRt	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё10/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box Pendente;Enviado      Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxPdEnRt( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0012 + ";"	)	//"Pendente"
		cOpcBox += ( "2=" + STR0013	+ ";"	)	//"Enviado"
		cOpcBox += ( "3=" + STR0014       	)	//"Retornado"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0012 )	//"Pendente"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0013	)	//"Enviado"
			Case ( cOpcDesc == "3" ) ; ( cOpcBox := STR0014	)	//"Retornado"
		End Case

	EndIF

Else

	cOpcBox := "123"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxPeriod	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё13/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box Periodo               Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxPeriod( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0015 + ";"	)	//"Diario"
		cOpcBox += ( "2=" + STR0016	+ ";"	)	//"Semanal"
		cOpcBox += ( "3=" + STR0017	+ ";"  	)	//"Quinzenal"
		cOpcBox += ( "4=" + STR0018       	)	//"Mensal"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0015 )	//"Diario"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0016	)	//"Semanal"
			Case ( cOpcDesc == "3" ) ; ( cOpcBox := STR0017	)	//"Quinzenal"
			Case ( cOpcDesc == "4" ) ; ( cOpcBox := STR0018	)	//"Mensal"
		End Case

	EndIF

Else

	cOpcBox := "1234"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxTipCob	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё13/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente ao Box Tipo de Cobranca      Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxTipCob( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0019 + ";"	)	//"Mensagem"
		cOpcBox += ( "2=" + STR0020	+ ";"	)	//"Reenvio"
		cOpcBox += ( "3=" + STR0021        	)	//"Mensagem e Reenvio"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0019 )	//"Mensagem"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0020	)	//"Reenvio"
			Case ( cOpcDesc == "3" ) ; ( cOpcBox := STR0021	)	//"Mensagem e Reenvio"
		End Case

	EndIF

Else

	cOpcBox := "123"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxAtvInat	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё13/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente a Ativo/Inativo              Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxAtvInat( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0022 + ";"	)	//"Ativo"
		cOpcBox += ( "2=" + STR0023			)	//"Inativo"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0022 )	//"Ativo"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0023	)	//"Inativo"
		End Case

	EndIF

Else

	cOpcBox := "12"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxTipoAv	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё13/10/2003Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontente a Ativo/Inativo              Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxTipoAv( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0024 + ";" )	//"Avaliador"
		cOpcBox += ( "2=" + STR0025 + ";" )	//"Auto-Avaliador"
		cOpcBox += ( "3=" + STR0026		  )	//"Consenso"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0024 )	//"Avaliador"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0025	)	//"Auto-Avaliador"
			Case ( cOpcDesc == "3" ) ; ( cOpcBox := STR0026	)	//"Consenso"
		End Case

	EndIF

Else

	cOpcBox := "123"

EndIF
	
Return( cOpcBox )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁGetTpAvDor	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё08/06/2004Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetorna o Flag Referente a Avaliador                           Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetTpAvDor()
Return( SubStr( OpBxTipoAv( .T. ) , 1 , 1 ) )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁGetTpAvAdo	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё08/06/2004Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetorna o Flag Referente a Auto Avaliacao                      Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetTpAvAdo()
Return( SubStr( OpBxTipoAv( .T. ) , 2 , 1 ) )

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁGetTpAvCon	   Ё Autor ЁMarinaldo de Jesus   Ё Data Ё08/06/2004Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetorna o Flag Referente a Consenso                            Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetTpAvCon()
Return( SubStr( OpBxTipoAv( .T. ) , 3 , 1 ) )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApdMsMm			ЁAutorЁMarinaldo de Jesus Ё Data Ё21/03/2004Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁChamada a MsMm com o arquivo de Memo padrao para o SIGAAPD  Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD  	                                                Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdMsMm( cChave , nTam , nLin , cString , nOpc , nTabSize , lWrap , cAlias , cCpochave )
Return( MsMm( @cChave , @nTam , @nLin , @cString , @nOpc , @nTabSize , @lWrap , @cAlias , @cCpochave , "RDY" ) )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApdMsMmObtemRec ЁAutorЁMarinaldo de Jesus Ё Data Ё21/03/2004Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁChamada a MsMmObtemRec com o arquivo de Memo padrao para   oЁ
Ё          ЁSIGAAPD                                                     Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD  	                                                Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdMsMmObtemRec( cAlias , aAliasRecnos , aCposMemo , aSYPRecnos , aSYPRecKeys , lGetKeys , cAliasMsMm )
Return( MsMmObtemRec(	@cAlias 		,;	//Alias do Arquivo que contem o campo memo para Msmm
						@aAliasRecnos	,;	//Array com os Recnos 
						@aCposMemo		,;	//Array contendo os campos memo (1->Conteudo;2->Codigo)
						@aSYPRecnos		,;	//Array com os Recnos do SYP ( por referencia )
						@aSYPRecKeys	,;	//Array com as Chaves referente aos Recnos ( por referencia )
						@lGetKeys		,;	//Se carrega o Array com as Chaves
						"RDY"       	 ;	//Alias para a MsMm
					);
		)

/*/
зддддддддддбдддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApdMemRec	 ЁAutorЁMarinaldo de Jesus    Ё Data Ё10/04/2003Ё
цддддддддддедддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁObtem os Recnos e as Chaves do RDY conforme Alias           Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD  	                                                Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdMemRec( cAlias , aRecnos , aMemoEn , aRdyRecnos , aRdyKeys , lObtemKeys )

DEFAULT lObtemKeys := .F.

ApdMsMmObtemRec( cAlias , aRecnos , aMemoEn , @aRdyRecnos , @aRdyKeys , lObtemKeys )

Return( WhileNoLock( "RDY" , aRdyRecnos , aRdyKeys , 1 , 1 , .T. , NIL , 5 ) )

/*/
зддддддддддбдддддддддддддбдддддбддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApdChkDel	 ЁAutorЁMarinaldo de Jesus    Ё Data Ё08/04/2004Ё
цддддддддддедддддддддддддадддддаддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁVerifica se os Registros podem ser Deletados                Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 	                                                Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdChkDel(	cAlias		,;	//01 -> Alias de Dominio
					nReg		,;	//02 -> Registro do Dominio
					nOpc		,;	//03 -> Opcao para a AxDeleta
					cKeyDel		,;	//04 -> Chave para Exclusao (Sem a Filial)
					lShowLog	,;	//05 -> Se deve Mostrar o Log
					aLog		,;	//06 -> Array com os Logs
					aLogTitle	,;	//07 -> Array com os Titulos do Log
					aNotChkDel	,;	//08 -> Array com os arquivos Alias que nao deverao ser verificados
					lChkSx9		,;	//09 -> Verifica os Relacionamentos no SX9
					lChkSoft	,;	//10 -> Se faz uma checagem soft
					aAreas 		,;	//11 -> Array contendo informacoes dos arquivos a serem pesquisados
					cMsgYesNo	,;	//12 -> Mensagem para MsgYesNo
					cLogTitle	,;	//13 -> Titulo do Log de Delecao
					cMsgLog		,;	//14 -> Mensagem para o corpo do Log
					lAxDeleta	,;	//15 -> Se executa AxDeleta
					bPos		,;	//16 -> Bloco para Posicionamento no Arquivo
					bWhile		,;	//17 -> Bloco para a Condicao While
					bSkip		 ;	//18 -> Bloco para Skip/Loop no While
				 )

Local lChkDelOk	:= .T.
Local cAliasFil	:= ""
Local lRetBlock

Local cFieldFil
Local cContextFil

DEFAULT lChkSx9	:= .T.

Begin Sequence

	cFieldFil	:= ( PrefixoCpo( cAlias ) + "_FILIAL" )
	cContextFil	:= GetSx3Cache( cFieldFil , "X3_CONTEXT" )
	IF ( ( cContextFil <> NIL ) .and. !( cContextFil $ "Vv" ) )
		cAliasFil := xFilial( cAlias )
	EndIF

	IF Empty( nReg )
		IF ( ( cAlias )->( MsSeek( cAliasFil + cKeyDel , .F. ) ) )
			nReg := ( cAlias )->( Recno() )
		Else
			Break
		EndIF
	EndIF
	
	lChkDelOk  := ChkDelRegs(cAlias			,;	//01 -> Alias do Arquivo Principal
								nReg			,;	//02 -> Registro do Arquivo Principal
								nOpc			,;	//03 -> Opcao para a AxDeleta
								cAliasFil		,;	//04 -> Filial do Arquivo principal para Delecao
								cKeyDel		,;	//05 -> Chave do Arquivo Principal para Delecao
								aAreas 		,;	//06 -> Array contendo informacoes dos arquivos a serem pesquisados
								@cMsgYesNo		,;	//07 -> Mensagem para MsgYesNo
								@cLogTitle		,;	//08 -> Titulo do Log de Delecao
								@cMsgLog		,;	//09 -> Mensagem para o corpo do Log
								lAxDeleta	 	,;	//10 -> Se executa AxDeleta
								@lShowLog		,;	//11 -> Se deve Mostrar o Log
								@aLog			,;	//12 -> Array com o Log de Exclusao
								@aLogTitle	 	,;	//13 -> Array com o Titulo do Log
								bPos			,;	//14 -> Bloco para Posicionamento no Arquivo
								bWhile			,;	//15 -> Bloco para a Condicao While
								bSkip			,;	//16 -> Bloco para Skip/Loop no While
								lChkSx9		,;	//17 -> Verifica os Relacionamentos no SX9
								aNotChkDel		,;	//18 -> Alias que nao deverao ser Verificados no SX9
								lChkSoft		 ;	//19 -> Se faz uma checagem soft
						    )

	IF lChkDelOk == .T.
		If ExistBlock("APDPEXTREE")
			//** Parametros: 
			//nOpc: opГЦo do movimento, exemplo '6' exclusЦo da arvore
			//cAlias: Tabela Principal
			//cKeyDel: Chave Principal
			
			//** Variaveis de retorno via array para atualizaГЦo
			//aLogTitle: InformaГУes para o cabeГalho do relatorio de log
			//aLog: InformaГУes para serem impressas no relatorio de log

			aRetBlock := ExecBlock("APDPEXTREE", .F., .F., {nOpc,cAlias,RDK->RDK_FILIAL,cKeyDel})
			IF ValType(aRetBlock) == 'A' .and. len(aRetBlock) > 0
              //carrega o array com as mensagens de retorno para demonstrar ao usuario

				IF ValType(aRetBlock[1]) == 'A' .and. ValType(aRetBlock[2]) == 'A' .and. !empty(aRetBlock[1][1]) .and. !empty(aRetBlock[2][1])   
       	       aLogTitle := aRetBlock[1]
					aLog      := aRetBlock[2]
					lChkDelOk := .F.
				EndIf	
			Endif
		EndIf
    EndIf

End Sequence
	
Return( lChkDelOk  )

/*/
зддддддддддбдддддддддддддддддбдддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApdFreeLocks	 ЁAutorЁMarinaldo de JesusЁ Data Ё09/04/2004Ё
цддддддддддедддддддддддддддддадддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁLibera os Locks obtidos no sigaapd       					Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 	                                                Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdFreeLocks( aFreeLocks )

Local nLoop
Local nLoops

nLoops := Len( aFreeLocks )
For nLoop := 1 To nLoops
	FreeLocks( aFreeLocks[ nLoop , 1 ] , aFreeLocks[ nLoop , 2 ] , .T. , aFreeLocks[ nLoop , 3 ] )
Next nLoop

Return( NIL )

/*/
зддддддддддбдддддддддддддддддбдддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApdaDorNivel	 ЁAutorЁMarinaldo de JesusЁ Data Ё26/11/2002Ё
цддддддддддедддддддддддддддддадддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetornar Filtro de Acordo com o Nivel do Participante	    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerica													Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdaDorNivel(	cItemIni	,;	//01 -> Codigo do Item Inicial
						cRdeFil		,;	//02 -> Filial do RDE
						cCodVis		,;	//03 -> Cogido da Visao
						cNivel		,;	//04 -> Posicao no Nivel (1=Mesmo Nivel),(2=Superior), (3=Subordinado)	
						nNiveis		,;  //05 -> Numero de Niveis
						aRdeCodRd0	,;	//06 -> Array com os Participantes do Nivel
						cRdeStatus	,;	//07 -> Qual o Status para o RDE
					 	cResp		,;	//08 -> Condicao de Filtro de ResponsАvel		
						cTmpRDE    ,;   //09 -> Alias tempor?io RDE
						cTmpRD4		)   //10 -> Alias tempor?io RD4
					 	

Local aArea			:= GetArea()
Local aAreaRD4		:= RD4->( GetArea() )
Local aAreaRDE		:= RDE->( GetArea() )
Local aItem			:= {}
Local bAddItem		:= { |cNivel,nNivel| IF( aScan( aItem , { |x| x[2] == cItemAux } ) ==  0 , aAdd( aItem , { cNivel , cItemAux , nNivel } ) , NIL ) }
Local cItemAux		:= cItemIni
Local cSvItemIni	:= cItemIni
Local cRd4Fil		:= xFilial( "RD4" )
Local nOrderItem	:= If(!Empty(cTmpRD4), 1, RD4->( RetOrdem( "RD4" , "RD4_FILIAL+RD4_CODIGO+RD4_ITEM+RD4_TREE" ) ))
Local nOrderTree	:= If(!Empty(cTmpRD4), 2, RD4->( RetOrdem( "RD4" , "RD4_FILIAL+RD4_CODIGO+RD4_TREE+RD4_ITEM" ) ))
Local nNivel		:= 0

Local aItemTree 

Local bSortItem
Local bRdeaScan

Local cKeyFilter
Local cSvItemAux
Local cKeySeek
Local cItemSup
Local cRdeCodPar

Local nItem
Local nItens
Local nPosItem
Local nSvRecno
Local nStrZero
Local nOrderRde
Local nI

DEFAULT cItemIni	:= ""
DEFAULT cRdeFil		:= xFilial("RDE")
DEFAULT	cCodVis		:= ""
DEFAULT cNivel		:= ""
DEFAULT aRdeCodRd0	:= {}
DEFAULT cRdeStatus	:= RdeStatusInit()
DEFAULT cResp		:= ""
DEFAULT cTmpRDE		:= "RDE"
DEFAULT cTmpRD4		:= "RD4"

IF ( cNivel ==  "1" ) 			//Mesmo Nivel
	Eval( bAddItem , cNivel , 0 )
	(cTmpRD4)->( dbSetOrder( nOrderItem ) )
	IF (cTmpRD4)->( MsSeek( cRd4Fil + cCodVis + cItemAux , .F. ) )
		cSvItemAux := (cTmpRD4)->RD4_TREE
		(cTmpRD4)->( dbSetOrder( nOrderTree ) )
		(cTmpRD4)->( MsSeek( cRd4Fil + cCodVis + cSvItemAux , .F. ) )
		While (cTmpRD4)->( !Eof() .and. (cTmpRD4)->RD4_TREE == cSvItemAux )
			cItemAux := (cTmpRD4)->RD4_ITEM
			Eval( bAddItem , cNivel , 0 )
			(cTmpRD4)->( dbSkip() )
		End While
	EndIF
Else
	IF ( cNivel == "2" )	//Nivel Superior
		(cTmpRD4)->( dbSetOrder( nOrderItem ) )
		(cTmpRD4)->( MsSeek( ( cRd4Fil + cCodVis + cItemIni ) , .F. ) )
		nSvRecno	:= (cTmpRD4)->( Recno() )
		IF !Empty( StrTran( (cTmpRD4)->RD4_TREE , "0" , "" ) )
			cItemIni	:= (cTmpRD4)->RD4_TREE
			nSvRecno	:= (cTmpRD4)->( Recno() )
			++nNivel
		EndIF		
		cItemSup	:= RD4->RD4_TREE
		While ( (cTmpRD4)->( MsSeek( ( cRd4Fil + cCodVis + cItemSup ) , .F. ) ) )
			IF !Empty( StrTran( (cTmpRD4)->RD4_TREE , "0" , "" ) )
				cItemIni	:= (cTmpRD4)->RD4_TREE
				nSvRecno	:= (cTmpRD4)->( Recno() )
				++nNivel
			EndIF	
			cItemSup	:= (cTmpRD4)->RD4_TREE
		End While
		(cTmpRD4)->( MsGoto( nSvRecno ) )
	Else	//Nivel Inferior
		(cTmpRD4)->( dbSetOrder( nOrderTree ) )
		IF ( (cTmpRD4)->( MsSeek( ( cRd4Fil + cCodVis + cItemIni ) , .F. ) ) )
			++nNivel
		EndIF
	EndIF	
	ApdNivelGrid(	cItemIni						,;
					cTmpRD4							,;
					{|| RD4_ITEM }					,;
					{ |cFil| cFil + RD4_CODIGO }	,;
					nOrderItem						,;
					nOrderTree						,;
					{|| RD4_TREE }	 				,;
					@aItemTree						,;
					cSvItemIni						,;
					cNivel							,;
					nNivel							 ;
				 )
	IF !Empty( aItemTree )
		IF ( cNivel == "2" )		//Nivel Superior
			While !( ( nPosItem := aScan( aItemTree , { |x| ( x[ 01 ] == cItemAux ) } ) ) == 0 )
				cItemAux := aItemTree[ nPosItem , 02 ]
				Eval( bAddItem , cNivel , aItemTree[ nPosItem , 03 ] )
			End While
			IF ( ( nPosItem := Len( aItem ) ) > 0 )
				(cTmpRD4)->( dbSetOrder( nOrderItem ) )
				(cTmpRD4)->( dbSeek( ( xFilial( "RD4" ) + cCodVis + aItem[ nPosItem , 02 ] ) , .F. ) )
				cItemAux := (cTmpRD4)->RD4_TREE
				Eval( bAddItem , cNivel , aItem[ nPosItem , 03 ] )
			EndIF
		ElseIF ( cNivel == "3" )	//Nivel Inferior
			nItens := Len( aItemTree )
			cSvItemAux	:= cItemAux
			For nItem := 1 To nItens   // Procura de que o cItemAux eh superior e coloca no aItem
				IF ( aItemTree[ nItem , 02 ] == cItemAux )
					cItemAux := aItemTree[ nItem , 01 ]
					Eval( bAddItem , cNivel , aItemTree[ nItem , 03 ] )
				EndIF
				cItemAux := cSvItemAux
			Next nItem
			While !Empty(cItemAux)
				Begin Sequence
					If ( ( nPosItem := aScan( aItemTree , { |x| x[ 02 ] == cItemAux } ) ) == 0 )
						cItemAux:=""
						For nItem := 1 To nItens   // Procura de que o cItemAux eh superior e coloca no aItem
					        If ( aScan( aItem, { |x| x[ 02 ] == aItemTree[ nItem,01 ]} ) == 0 )
								cItemAux	:= aItemTree[ nItem, 02 ] 
								cNivelAux	:= aItemTree[ nItem, 03 ]-1
								nPosItem := aScan( aItemTree, { |x| x[ 01 ] == cItemAux .AND. x[ 03 ]==cNivelAux } ) 
								Break
							EndIF
						Next nI		
					Else
						cItemAux	:= aItemTree[ nPosItem , 01 ]
					EndIf           
				End Sequence
				If Empty(cItemAux)
				   Exit
				EndIf   
				cSvItemAux	:= cItemAux
				Eval( bAddItem , cNivel , aItemTree[ nPosItem , 03 ] )
				For nItem := 1 To nItens
					IF ( aItemTree[ nItem , 02 ] == cItemAux )
						cItemAux := aItemTree[ nItem , 01 ]
						Eval( bAddItem , cNivel , aItemTree[ nItem , 03 ] )
					EndIF
					cItemAux := cSvItemAux
				Next nItem
			End While
		EndIF
	EndIF
EndIF

If cTmpRDE == "RDE"
	nOrderRde	:= (cTmpRDE)->( RetOrdem( cTmpRDE , "RDE_FILIAL+RDE_CODVIS+RDE_ITEVIS+RDE_STATUS+RDE_CODPAR" ) )
	cResp		:= If (Empty(cResp), "(RDE->RDE_RESP $ '1/2/ ')",cResp) //1-Sim 2-Nao
Else
	nOrderRde	:= 2
	cResp		:= If (Empty(cResp), "((cTmpRDE)->RDE_RESP $ '1/2/ ')",cResp) //1-Sim 2-Nao
EndIf

(cTmpRDE)->( dbSetOrder( nOrderRde ) )

nStrZero	:= Len( AllTrim( Str( nNivel ) ) )
bSortItem	:= { |x,y| ( StrZero( x[ 3 ] , nStrZero ) + x[ 1 ] ) < ( StrZero(  y[ 3 ] , nStrZero ) + y[ 1 ] ) }
aSort( aItem , NIL , NIL , bSortItem )
cKeyFilter	:= ""
nNivel		:= 0

bRdeaScan	:= { |x|	( x[ 1 ] == cRdeCodPar );			//Codigo do Participante
						.and.;
						( x[ 2 ] == cCodVis );              //Codigo da Visao
						.and.;
						( x[ 3 ] == aItem[ nItem , 02 ] );	//Item de Visao
						}

nItens := Len( aItem )
For nItem := 1 To nItens
	IF (;
			!( aItem[ nItem , 01 ] == cNivel );									//Se Nao Estiver no Nivel Selecionado ou	
			.or.;							
			(;
				( nNiveis > 0 );												//Se Existir Limite de Niveis e 
				.and.;											
				(;                                                          
					( aItem[ nItem , 03 ] > nNiveis );							//Nivel for Maior que Numero de Niveis ou
					.or.;					
					( ( cNivel == "2" ) .and. ( aItem[ nItem , 03 ] <= 0 ) );	//Nivel Superior e Negativo
				);
			);
		)		
   		Loop																	//Despreza Item
   	EndIF
	cKeySeek := ( cRdeFil + cCodVis + aItem[ nItem , 02 ] + cRdeStatus )

	ApdRetSup	(	cKeySeek		,;	//Chave de pesquisa
					cCodVis 		,;	//Codigo da Visao
					@cKeyFilter		,;	//Chave de filtro
					@aRdeCodRd0		,;	//Codigo da pessoa no nivel encontrado
					bRdeaScan		,;	//Bloco de busca no RDE
					aItem			,;	//Array de itens retornado 
					nItem			,;	//Item atual
					@nNivel			,;	//Numero de Niveis
					cResp			,; 
					cTmpRDE		)   //Alias Temporario RDE
				
					
Next nItem

//---- Caso o nivel esteja vazio buscar o proximo nivel hierarquico
If cNivel == "2" .And. Len(aRdeCodRd0) == 0	//Nivel superior
	For nItem := 1 To nItens
		cKeySeek := ( cRdeFil + cCodVis + aItem[ nItem , 02 ] + cRdeStatus )

		ApdRetSup	(	cKeySeek		,;	//Chave de pesquisa
						cCodVis 		,;	//Codigo da Visao
						@cKeyFilter		,;	//Chave de filtro
						@aRdeCodRd0		,;	//Codigo da pessoa no nivel encontrado
						bRdeaScan		,;	//Bloco de busca no RDE
						aItem			,;	//Array de itens retornado 
						nItem			,;	//Item atual
						@nNivel			,;	//Numero de Niveis
						cResp			,; 
						cTmpRDE		)   //Alias Temporario RDE
					

		If Len(aRdeCodRd0) > 0
			Exit			
		EndIf
		
	Next nItem
EndIf

IF Empty( cKeyFilter )
	cKeyFilter := "__NoExistItem__"
EndIF

RestArea( aAreaRDE )
RestArea( aAreaRD4 )
RestArea( aArea )

Return( cKeyFilter )


/*/
зддддддддддбдддддддддддддддддбдддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    Ё ApdRetSup	 	 ЁAutorЁEmerson Grassi	  Ё Data Ё 14/02/06 Ё
цддддддддддедддддддддддддддддадддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna superior quando nao tiver ninguem alocado para o    Ё
Ё          Ёnivel superior.    									        Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁApdaDorNivel() em APDXFUN()								    Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function ApdRetSup	(	cKeySeek		,;	//Chave de pesquisa
								cCodVis 		,;	//Codigo da Visao
								cKeyFilter		,;	//Chave de filtro
								aRdeCodRd0		,;	//Codigo da pessoa no nivel encontrado
								bRdeaScan		,;	//Bloco de busca no RDE
								aItem			,;	//Array de itens retornado 
								nItem			,;	//Item atual
								nNivel			,;	//Numero de Niveis
								cResp			,;	//Condicao de Filtro de ResponsАvel
								cTmpRDE 		)	// Alias TemporАrio
							
Local cRdeCodPar	:= ""
Local cCompare		:= "((cTmpRDE)->RDE_RESP == '1')"

DEFAULT cKeySeek	:= ""
DEFAULT cCodVis 	:= ""
DEFAULT	cKeyFilter	:= ""
DEFAULT aRdeCodRd0	:= {}
DEFAULT bRdeaScan	:= {||}
DEFAULT aItem		:= {}
DEFAULT nItem		:= ""
DEFAULT nNivel		:= ""
DEFAULT cResp		:= "((cTmpRDE)->RDE_RESP $ '1/2/ ')" //1-Sim 2-Nao
DEFAULT cTmpRDE		:= ""

	IF (cTmpRDE)->( MsSeek( cKeySeek , .F. ) ) 
		While (cTmpRDE)->( !Eof() .and. ( ( RDE_FILIAL + RDE_CODVIS + RDE_ITEVIS + RDE_STATUS ) == cKeySeek ) )
			cRdeCodPar := (cTmpRDE)->RDE_CODPAR
			If cResp == cCompare //1-Sim
				cKeyFilter := ( cRdeCodPar)
			else
				cKeyFilter += ( cRdeCodPar + "/" )
			EndIf
			
			IF ( aScan( aRdeCodRd0 , bRdeaScan ) == 0 .And. &(cResp)) 
				aAdd( aRdeCodRd0 , {;
										cRdeCodPar			,;	//01 -> Codigo do Participante no RDE
										cCodVis				,;	//02 -> Codigo da Visao
										aItem[ nItem , 02 ] ,;	//03 -> Item de Visao
										aItem[ nItem , 01 ]	,;	//04 -> Nivel "1=Mesmo Nivel";"2=Superior";"3=Inferior"
										aItem[ nItem , 03 ]	,;	//05 -> Niveis do Tree
										++nNivel			,;	//06 -> Ordem de Inclusao
										(cTmpRDE)->( Recno() )	 ;	//07 -> Recno() no RDE
									 };
					 )
			EndIF
			(cTmpRDE)->( dbSkip() )
		End While
	EndIF

Return( .T. )
		
/*/
зддддддддддбдддддддддддддддддбдддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁApdNivelGrid	 ЁAutorЁMarinaldo de JesusЁ Data Ё26/11/2002Ё
цддддддддддедддддддддддддддддадддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMontar os Niveis de Acordo com o Participante para a   MontaЁ
Ё          Ёgem do Filtro      									        Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁApdaDorNivel() em APDXFUN()								    Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function ApdNivelGrid(	cItem			,;	//Item a Ser Pesquisado
								cAlias			,;	//Alias do Arquivo a Ser Pesquisado
								bItemField		,;	//Bloco contendo o Campo Referente ao Item para Pesquisa
								bItemSeekKey	,;	//Bloco contendo a Chave para Busca
								nOrderItem		,;	//Ordem de Pesquisa do Item
								nOrderTree		,;	//Ordem de Pesquisa do Tree
								bTreeField		,;	//Bloco Contendo o Campo Referenteo ao Tree para a Pesquisa
								aItemTree		,;	//Array que contera o Grid
								cItemAtu		,;	//Item Atual
								cNivel			,;	//Nivel
								nNivel			 ;	//Numero de Niveis
							 )
Local aRecno	:= {}
Local cSeek		:= ""
Local cFil		:= xFilial( cAlias )
Local nCntFor	:= 0
Local nTotFor	:= 0

DEFAULT aItemTree	:= {}

( cAlias )->( dbSetOrder( nOrderItem ) )
IF ( ( cAlias )->( MsSeek( Eval( bItemSeekKey , cFil ) + cItem ) ) )
	( cAlias )->( dbSetOrder( nOrderTree ) )
	IF ( ( cAlias )->( MsSeek( cSeek := Eval( bItemSeekKey , cFil ) + cItem ) ) )
		While ( ( cAlias )->( !Eof() .and. Eval( bItemSeekKey , cFil ) + Eval( bTreeField ) == cSeek ) )
			( cAlias )->( aAdd( aRecno, Recno() ) )
			IF ( ( cAlias )->( aScan( aItemTree , { |x| x[1] == Eval( bItemField ) } ) == 0 ) )
				( cAlias )->( aAdd( aItemTree , { Eval( bItemField ) , Eval( bTreeField ) , nNivel } ) )
			EndIF	
			( cAlias )->( dbSkip() )
		End While
	EndIF

	IF ( cNivel == "2" )
		--nNivel
	Else
		++nNivel
	EndIF
	
	nTotFor := Len( aRecno )
	For nCntFor := 1 To nTotFor
		( cAlias )->( dbGoTo( aRecno[ nCntFor ] ) )
		ApdNivelGrid(	( cAlias )->( Eval( bItemField ) )	,;
						cAlias								,;
						bItemField							,;
						bItemSeekKey						,;
						nOrderItem							,;
						nOrderTree							,;
						bTreeField							,;
						@aItemTree			 				,;
						cItemAtu							,;
						cNivel			 					,;
						nNivel                               ;
					 )
	Next nCntFor
	
EndIF

Return( .T. )

/*/
зддддддддддбддддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁInApdxFunExec ЁAutor ЁMarinaldo de Jesus   Ё Data Ё24/08/2004Ё
цддддддддддеддддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁExecutar Funcoes Dentro de APDXFUN                           Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁInApdxFunExec( cExecIn , aFormParam )						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                 	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 													 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function InApdxFunExec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= &( cExecIn )
EndIF

Return( uRet )

/*/
зддддддддддбддддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁApdCacheClear ЁAutor ЁMarinaldo de Jesus   Ё Data Ё31/08/2004Ё
цддддддддддеддддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁReinicializar as Funcoes com variaveis em Cache no SIGAAPD   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL		                                               	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 													 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ApdCacheClear()

IF FindFunction( "Sx2UnicoCacheClear" )
	Sx2UnicoCacheClear()
EndIF

IF FindFunction( "ArrUniqeCacheClear" )
	ArrUniqeCacheClear()
EndIF	

IF FindFunction("ApdTreeCacheClear")
	ApdTreeCacheClear()
EndIF

IF FindFunction( "Rd4ItemClear" )
	Rd4ItemClear()
EndIF

IF FindFunction( "Rd2ItemClear" )
	Rd2ItemClear()
EndIF

Return( NIL )
/*/
эээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
╠╠зддддддддддбддддддддддддбдддддддбдддддддддддддддддддддбддддддбддддддддддддд©╠╠
╠╠ЁFun┤┘o    ЁRD0GATSENHA Ё Autor Ё Marcos Alves        Ё Data Ё 28/01/05    Ё╠╠
╠╠цддддддддддеддддддддддддадддддддадддддддддддддддддддддаддддддаддддддддддддд╢╠╠
╠╠ЁDescri┤┘o Ё Funcao de gatilho para gravacao do campo RD0_SENHA,no cadastroЁ╠╠
╠╠Ё          Ё de participantes, acionado pelos campos:                      Ё╠╠
╠╠Ё          Ё RDO_CIC                                                       Ё╠╠
╠╠Ё          Ё RDO_DTNASC                                                    Ё╠╠
╠╠Ё          Ё RDO_DTADMI                                                    Ё╠╠
╠╠цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢╠╠
╠╠ЁSintaxe   Ё APDGRV01(ExpD1,ExpD2,ExpC1)                      		     Ё╠╠
╠╠цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢╠╠
╠╠ЁParametrosЁ ExpD1 = Data de Nascimento do participante                    Ё╠╠
╠╠Ё          Ё ExpD2 = Data de admissao do participante                      Ё╠╠
╠╠Ё          Ё ExpC1 = CPF do participante                                   Ё╠╠
╠╠цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢╠╠
╠╠Ё Uso      Ё APD - Rh microsiga                                            Ё╠╠
╠╠юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды╠╠
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ*/
Function RD0SX7PASS(dDatNasc,dDatAdm,cCIC,_cSenha)

//зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
//ЁVerifica se a senha esta em branco, pq o participante pode ter gravado uma Ё
//Ёsenha diferente do padrЦo.                                                 Ё
//юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды
If Empty(_cSenha)
   _cSenha:=EMBARALHA(Subs(Dtos(dDatNasc),3,2 )+right(Dtos(dDatAdm),2)+right(cCIC,2),0)
EndIf   
Return(_cSenha)

/*эээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
╠╠зддддддддддбдддддддддддддбдддддддбддддддддддддддддддддбддддддбдддддддддд©╠╠
╠╠ЁFun┤└o    ЁAPDAtvDesCritЁ Autor Ё Marcos Alves       Ё Data Ё 30/09/05 Ё╠╠
╠╠цддддддддддедддддддддддддадддддддаддддддддддддддддддддаддддддадддддддддд╢╠╠
╠╠ЁDescri┤└o Ё Ativa e desativa o filtro do catartro de CritИrios         Ё╠╠
╠╠цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢╠╠
╠╠ЁSintaxe   Ё ExpX1 := APDAtvDesCrit( ExpC1, ExpL1  )                    Ё╠╠
╠╠цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢╠╠
╠╠ЁParametrosЁ ExpC1 ->  Codigo da critica(RDS)                           Ё╠╠
╠╠Ё          Ё ExpL1 -> Flag, para defincao da acao, sendo:				  Ё╠╠
╠╠Ё          Ё 			 .T. - Ativa filtro da critica(Usar no inicio)    Ё╠╠
╠╠Ё          Ё 			 .F. - Desativa o filtro(Usar ao final do processoЁ╠╠
╠╠цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢╠╠
╠╠ЁRetorno   Ё ExpL1 -> Conteudo                                          Ё╠╠
╠╠Ё          Ё 			 .T. - Filtro aplicado com sucesso				  Ё╠╠
╠╠Ё          Ё 			 .F. - Erro na aplicaГЦo do Filtro				  Ё╠╠
╠╠цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢╠╠
╠╠ЁUso       Ё GENERICO                                                   Ё╠╠
╠╠юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды╠╠
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ*/
Function APDAtvDesCrit(cCodCrit,lAtiva)

Local aInfoCriter 		:= {}		//Array com dados de cadastro da Critica
Local lApda80BldAuto	:= .F.		// Flag de validaГЦo do cadastro da critica
Local aRdsHeader		:= {} 		// Array do header da tabela do cabecalho da Critica
Local aRdsCols			:= {}		// Array do acols da critica
Local aRdtHeader		:= {}		// Array do header da tabela de itens da Critica
Local aRdtCols			:= {}		// Array do acols dos itens da critica
Local aRelation			:= {}      // Array dos relacionamento com a tabela RDO
Local nRdtLoop			:= 0		// Contador do For...Next 
Local nRdtLoops			:= 0 		// Numero de itens da critica
Local cRdtAlias			:= ""		// Alias da Critica
Local nRelation			:= 0		// numero de relacionamento da tabela RD0
Local bRelation			:= {||}		// CodBlock, do relacionamento
Local nRdtAliasOrd		:= 0 		// Numero da ordem do relacionamento
Local cFieldFil			:= ""		// Variavel temporaria
Local nFieldFil			:=0			// Variavel temporaria
Local cRdtCriter		:= ""       // String com o critИrio
Local aIndex			:= {}       // Indices temporarios
Local bFilter			:= {||} 	// Codblock do filtro do    
/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁPosicionando da critica									   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
dbSelectarea("RDS")
dbSetOrder(1)
If !dbSeek(xFilial("RDS")+cCodCrit)
   Return .F.
EndIf   
aInfoCriter := Apda160( "RDS" , RDS->( Recno() ) , 4 , .F. , .T. )
IF !( lApda80BldAuto := !Empty( aInfoCriter ) )
	Return .F.
EndIF
IF !( lApda80BldAuto := !Empty( aRdsHeader	:= aInfoCriter[ 1 ] ) )
	Return .F.
EndIF

IF !( lApda80BldAuto := !Empty( aRdsCols	:= aInfoCriter[ 2 ] ) )
	Return .F.
EndIF

IF !( lApda80BldAuto := !Empty( aRdtHeader	:= aInfoCriter[ 3 ] ) )
	Return .F.
EndIF

IF !( lApda80BldAuto := !Empty( aRdtCols	:= aInfoCriter[ 4 ] ) )
	Return .F.
EndIF
BldArrRdZRel( @aRelation )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ёaplicando os relacionamento								   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
nRdtLoops := Len( aRdtCols )
For nRdtLoop := 1 To nRdtLoops
	cRdtAlias := GdFieldGet( "RDT_ALIAS" , nRdtLoop , .F. , aRdtHeader , aRdtCols )
	IF (;
			Empty( cRdtAlias );
			.or.;
			(;
				( cRdtAlias <> "RD0" );
				.and.;
				( ( nRelation := aScan( aRelation , { |x| x[1] == cRdtAlias } ) ) == 0 );
			);
		)	
		Loop
	EndIF
	IF ( cRdtAlias <> "RD0" )
	    Loop
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁImplementacao futura										   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		//bRelation		:= { || ( cRdtAlias )->( &( aRelation[ nRelation , 05 ] ) ) }
		//nRdtAliasOrd	:= ( cRdtAlias )->( RetOrdem( cRdtAlias , aRelation[ nRelation , 05 ] ) )
	Else
		nRdtAliasOrd	:= RD0->( RetOrdem( "RD0" , "RD0_FILIAL+RD0_CODIGO" ) )
	EndIF
	( cRdtAlias )->( dbSetOrder( nRdtAliasOrd ) )
	cFieldFil		:= ( PrefixoCpo( cRdtAlias ) + "_FILIAL" )
	nFieldFil		:= ( cRdtAlias )->( FieldPos( cFieldFil ) )
	cRdtCriter		:= GdFieldGet( "RDT_CRITER" , nRdtLoop , .F. , aRdtHeader , aRdtCols )
	DEFAULT cRdtCriter := ""
	aIndex			:= {}
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ёaplicando os relacionamento								   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bFilter			:= { || FilBrowse( cRdtAlias , @aIndex , cRdtCriter , .T. ) }
	Eval( bFilter )
	nRdtAliasOrd	:= ( cRdtAlias )->( IndexOrd() )
	( cRdtAlias )->( dbGotop() )    
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDesativando o filtro										   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	If !lAtiva
		EndFilBrw( cRdtAlias , aIndex )
	EndIf	
Next nRdtLoop
Return .T.

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁOpBxEdita	   Ё Autor ЁEduardo Ju           Ё Data Ё23/03/2006Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁRetornar as Opcoes correspontentes ao Box Edita                Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁcOpcBox														   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpBxEdita( lValid , lRetDesc , cOpcDesc )

Local cOpcBox

DEFAULT lValid		:= .F.
DEFAULT lRetDesc	:= .F.

IF !( lValid )

	IF !( lRetDesc )

		cOpcBox := ( "1=" + STR0029 + ";" )	//"Auto-Avaliador"
		cOpcBox += ( "2=" + STR0030 + ";" )	//"Avaliador" 
		cOpcBox += ( "3=" + STR0031       )	//"Ambos"

	Else

		Do Case
			Case ( cOpcDesc == "1" ) ; ( cOpcBox := STR0029 	)	//"Auto-Avaliador"
			Case ( cOpcDesc == "2" ) ; ( cOpcBox := STR0030	)	//"Avaliador" 
			Case ( cOpcDesc == "3" ) ; ( cOpcBox := STR0031    )	//"Ambos"
		End Case

	EndIF	

Else

	cOpcBox := "123"

EndIF	
	
Return( cOpcBox )

Static ;
Function SearchWriteItem(nHdl,bSeek,nTabs)
Local nStart := 1
Local nPos := 0
Local nEnd := Len(aNewMnu)
Local bBlock
Local cBuffer
Local aGroups := {}
Local nWrite := 0
Local lHasGroup := .F.
Local cStatus	:= ""
Local nJ

Local cTable

While ( nPos := Ascan(aNewMnu,bSeek,nStart)) > 0
	If ( aNewMnu[nPos][7] )
		
		FWrite( nHdl, Replicate(cTab, nTabs) + '<Menu Status="Enable">' + CRLF )
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Title lang="pt">' + Capital(AllTrim(aNewMnu [nPos][2][1])) + '</Title>' + CRLF )
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Title lang="es">' + Capital(AllTrim(aNewMnu [nPos][2][2])) + '</Title>' + CRLF )
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Title lang="en">' + Capital(AllTrim(aNewMnu [nPos][2][3])) + '</Title>' + CRLF )
		
		Aadd(aGroups,aNewMnu[nPos][8])
        bBlock := &("{|x| x[9] == '"+aNewMnu[nPos][8]+"'}")
		SearchWriteItem(nHdl,bBlock,nTabs+1)
		
		FWrite( nHdl, Replicate(cTab, nTabs) + '</Menu>' + CRLF )
		
    ElseIf ( Ascan(aGroups,{|x| x == aNewMnu[nPos][9]}) == 0 )
		
		cStatus := Subs(aNewMnu[nPos][4],1,1)
		FWrite( nHdl, Replicate(cTab, nTabs) + '<MenuItem Status="'+If(cStatus=="D",'Disable',If(cStatus=="H",'Hidden','Enable'))+'">' + CRLF )		
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Title lang="pt">' + Capital(AllTrim(aNewMnu [nPos][2][1])) + '</Title>' + CRLF )
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Title lang="es">' + Capital(AllTrim(aNewMnu [nPos][2][2])) + '</Title>' + CRLF )
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Title lang="en">' + Capital(AllTrim(aNewMnu [nPos][2][3])) + '</Title>' + CRLF )
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Function>' + AllTrim(aNewMnu [nPos][3]) + '</Function>' + CRLF )
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Type>' + AllTrim( Str(aNewMnu [nPos][11]) ) + '</Type>' + CRLF )
		
		For nJ := 2 To Len( aNewMnu [nPos][4] ) Step 3
		
			cTable := Subs( aNewMnu [nPos][4], nJ, 3 )
			
			If ( cTable == '...' )
                Exit
			Else
				FWrite( nHdl, Replicate(cTab, nTabs) + '	<Tables>' + cTable + '</Tables>' + CRLF )		
			EndIf
		
		Next
		
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Access>' + aNewMnu [nPos][5] + '</Access>' + CRLF )		
		FWrite( nHdl, Replicate(cTab, nTabs) + '	<Module>' + aNewMnu [nPos][6] + '</Module>' + CRLF )		
   		FWrite( nHdl, Replicate(cTab, nTabs) + '</MenuItem>' + CRLF )
		
	EndIf
	
	nStart := nPos+1
	If ( nStart > nEnd )
		Exit
	EndIf
End
Return nWrite

/*/
зддддддддддбдддддддддддддддбдддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁAPDParCrit     Ё Autor ЁMarcos Alves         Ё Data Ё29/07/2007Ё
цддддддддддедддддддддддддддадддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁSeleciona Participane do CritИrio							   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<vide parametros formais>   								   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   Ё															   Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	       Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁSIGAAPD                                                        Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function APDParCrit(cCodCrit, cCodVis,cRdtDescDet)

Local aRD0Crit		:={}
Local nRdtLoop	 	:=0
Local nRdtLoops 	:=0
Local aRdtCols		:={}
Local cRdsFil
Local aInfoCriter	:={}
Local aRdsHeader	:={}
Local aRdsCols		:={}
Local aRdtHeader	:={}
Local aRelation		:={}
Local aScopeCount
Local nRdsOrder
Local lApda80BldAuto
Local nRD0CLoop
Local lShowProc		:=.T.

Local aRdeHeader
Local aRdeCols
Local aRdeVisual
Local aRdeVirtual
Local aRdeQuery
Local aRdeKeys
Local aRdeCodRd0
Local bRdeGet
Local cRdeFil
Local cRdeKeySeek
Local cRdeStatus
Local lRdeLocks                                            
Local nRdeOrder
Local nRdeLocks
Local nRdeLoop
Local nRdeLoops
Local nLoopRdeRd0
Local nLoopsRdeRd0
Local nRdeIteVis
Local aLogCriterio	:={}
Static nApdxSeed	:= 1000

DEFAULT cCodVis 	:=""
/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁObtem o Array de Relacionamentos com o RD0        			   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
BldArrRdZRel( @aRelation )

dbSelectarea("RDS")
/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁObtem o Criterio para a Geracao Automatica        			   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
cRdsFil		:= xFilial("RDS")
nRdsOrder	:= RDS->( RetOrdem( "RDS" , "RDS_FILIAL+RDS_CODIGO" ) )
RDS->( dbSetOrder( nRdsOrder ) )
IF !( lApda80BldAuto := RDS->( dbSeek( cRdsFil + cCodCrit , .F. ) ) )
   Return aRD0Crit
EndIF

Begin Sequence
	aInfoCriter := Apda160( "RDS" , RDS->( Recno() ) , 4 , .F. , .T. )
	IF !( lApda80BldAuto := !Empty( aInfoCriter ) )
		Break
	EndIF
	
	IF !( lApda80BldAuto := !Empty( aRdsHeader	:= aInfoCriter[ 1 ] ) )
		Break
	EndIF
	
	IF !( lApda80BldAuto := !Empty( aRdsCols	:= aInfoCriter[ 2 ] ) )
		Break
	EndIF
	
	IF !( lApda80BldAuto := !Empty( aRdtHeader	:= aInfoCriter[ 3 ] ) )
		Break
	EndIF
	
	IF !( lApda80BldAuto := !Empty( aRdtCols	:= aInfoCriter[ 4 ] ) )
		Break
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁPercorrendo todos os Periodos                     			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	nRdtLoops := Len( aRdtCols )
	IF ( lShowProc )
		cTimeIni := Time()
	EndIF	
	
	For nRdtLoop := 1 To nRdtLoops
	
		cRdtAlias := GdFieldGet( "RDT_ALIAS" , nRdtLoop , .F. , aRdtHeader , aRdtCols )
	
		IF (;
				Empty( cRdtAlias );
				.or.;
				(;
					( cRdtAlias <> "RD0" );
					.and.;
					( ( nRelation := aScan( aRelation , { |x| x[1] == cRdtAlias } ) ) == 0 );
				);
			)	
			Loop
		EndIF
	
		IF ( cRdtAlias <> "RD0" )
			bRelation		:= { || ( cRdtAlias )->( &( aRelation[ nRelation , 05 ] ) ) }
			nRdtAliasOrd	:= ( cRdtAlias )->( RetOrdem( cRdtAlias , aRelation[ nRelation , 05 ] ) )
		Else
			nRdtAliasOrd	:= RD0->( RetOrdem( "RD0" , "RD0_FILIAL+RD0_CODIGO" ) )
		EndIF
		( cRdtAlias )->( dbSetOrder( nRdtAliasOrd ) )
		cFieldFil		:= ( PrefixoCpo( cRdtAlias ) + "_FILIAL" )
		nFieldFil		:= ( cRdtAlias )->( FieldPos( cFieldFil ) )
		cRdtCriter		:= GdFieldGet( "RDT_CRITER" , nRdtLoop , .F. , aRdtHeader , aRdtCols )			

		cRdtDescDet	+= cCodCrit+" "+If(!Empty(cRdtCriter),GpFltBldDesc( cRdtCriter , NIL , cRdtAlias )+" "+AllTrim(cRdtCriter)," ")

		DEFAULT cRdtCriter := ""
		aIndex			:= {}
		bFilter			:= { || FilBrowse( cRdtAlias , @aIndex , cRdtCriter , lShowProc ) }
		Eval( bFilter )
		nRdtAliasOrd	:= ( cRdtAlias )->( IndexOrd() )

		IF ( lShowProc )
	 		CREATE SCOPE aScopeCount FOR &( cRdtCriter )
			nProcRegua	:= ( cRdtAlias )->( ScopeCount( aScopeCount ) )
			BarGauge1Set( nProcRegua )
			nContPrc1	:= Aleatorio( 15000 , @nApdxSeed)
		EndIF

		aRD0Aux		:={}
		nNextRecno	:= NIL
		( cRdtAlias )->( dbGotop() )
		While ( cRdtAlias )->( !Eof() )
	        
			IF ( lShowProc )
				IncPrcG1Time( NIL , nProcRegua , cTimeIni , .F. , nContPrc1 , 1 )
				IF ( lAbortPrint )
					Break
				EndIF
			EndIF
			If cRdtAlias=="RDE"
				Eval( bFilter )
				GotoNextRecno( cRdtAlias , nNextRecno , nRdtAliasOrd )
			EndIf 
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁObtem o Proximo Registro                            		   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF !GetNextRecno( cRdtAlias , @nNextRecno , NIL , nRdtAliasOrd )
				Exit
			EndIF
	
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁSe nao for o RD0, verifica se Existe Relacionamento		   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF ( cRdtAlias <> "RD0" )
				cRelation	:= Eval( bRelation )
				IF ( nFieldFil > 0 )
					cFilRdtAlias	:= ( cRdtAlias )->( FieldGet( nFieldFil ) )
				EndIF
				IF Empty( cFilRdtAlias )
					cFilRdtAlias 	:= cFilAnt
				EndIF
				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁVerifica de tem campos com relacionamentos, se nao houver, fazЁ
				Ёtratamento atraves do SX9                                     Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				If Empty(aRelation[ nRelation , 02 ])
	                aAreas:={}
					CheckSx9( "RD0",@aAreas)  							// retorna no array aAreas, todas as tabelas que se relaciona com RD0 
					nPos:=aScan( aAreas , { |x| x[1,1]=cRdtAlias}) 
	                cKeyRdt:=""  												// 
	                aEval(aAreas[nPos,2],{|x|cKeyRdt+=cRdtAlias+"->"+x+"+"})	// Grava os campos de relacionamento com a tabela rd0
	                cKeyRdt:=&(Subs(cKeyRdt,1,Len(cKeyRdt)-1))
	                nRd0SvOrd:= RD0->( IndexOrd() )
					RD0->( dbSetOrder( RetOrdem( "RD0" , "RD0_FILIAL+RD0_CODIGO" ) ) )
					lFound:=RD0->( MsSeek( cKeyRdt , .F. ) )
					RD0->( dbSetOrder( nRd0SvOrd ) )
				Else
					lFound:=ExistePessoa( cRdtAlias , cRelation , cEmpAnt , cFilRdtAlias , .T. )
				EndIf
				If !lFound	
					IF !( GotoNextRecno( cRdtAlias , nNextRecno , nRdtAliasOrd ) )
						Exit
					EndIF
					Loop
				EndIF
			EndIF
		       
		
		
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁObtem as Informacoes do RD0            					   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			cRd0Fil		:= RD0->RD0_FILIAL
			cRd0Codigo	:= RD0->RD0_CODIGO
			cRd0Nome	:= RD0->RD0_NOME
			cRd0CodMen	:= RD0->RD0_CODMEN
			
			If !Empty(cCodVis)
				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁDefine a Ordem para obtencao das Visoes           			   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				nRdeOrder	:= RDE->( RetOrdem( "RDE" , "RDE_FILIAL+RDE_CODPAR+RDE_CODVIS+RDE_ITEVIS+DTOS(RDE_DATA)" ) )
				
				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁDefine Blocos para obtencao das Visoes            			   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				cRdeStatus	:= RdeStatusInit()
				bRdeSkip	:= { || ( ( RDE_STATUS <> cRdeStatus ) .or. ( RDE_CODVIS <> cCodVis ) ) }
				bRdeGet	:= { |lLock|		RDE->( dbSetOrder( nRdeOrder ) ),;
											aRdeCols := RDE->(;
															lLock := .T.,;
															GdBuildCols(	@aRdeHeader		,;	//01 -> Array com os Campos do Cabecalho da GetDados
																			NIL       		,;	//02 -> Numero de Campos em Uso
																			@aRdeVisual		,;	//03 -> [@]Array com os Campos Virtuais
																			@aRdeVirtual	,;	//04 -> [@]Array com os Campos Visuais
																			"RDE"			,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
																			NIL          	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
																			@aRdeRecnos		,;	//07 -> [@]Array unidimensional contendo os Recnos
																			"RDE"		   	,;	//08 -> Alias do Arquivo Pai
																			cRdeKeySeek		,;	//09 -> Chave para o Posicionamento no Alias Filho
																			NIL				,;	//10 -> Bloco para condicao de Loop While
																			bRdeSkip		,;	//11 -> Bloco para Skip no Loop While
																			.F.				,;	//12 -> Se Havera o Elemento de Delecao no aCols 
																			NIL				,;	//13 -> Se Sera considerado o Inicializador Padrao
																			.F.				,;	//14 -> Opcional, Carregar Todos os Campos
																			.T.				,;	//15 -> Opcional, Nao Carregar os Campos Virtuais
																			aRdeQuery		,;	//16 -> Opcional, Utilizacao de Query para Selecao de Dados
																			.F.				,;	//17 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
																			.F.				,;	//18 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
																			.F.				,;	//19 -> Carregar Coluna Fantasma e/ou BitMap ( Logico ou Array )
																			NIL				,;	//20 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
																			.F.				,;	//21 -> Verifica se Deve checar se o campo eh usado
																			.F.				,;	//22 -> Verifica se Deve checar o nivel do usuario
																			.F.				,;	//23 -> Verifica se Deve Carregar o Elemento Vazio no aCols
																			@aRdeKeys		,;	//24 -> [@]Array que contera as chaves conforme recnos
																			@lLock			,;	//25 -> [@]Se devera efetuar o Lock dos Registros
																			.T.				,;	//26 -> [@]Se devera obter a Exclusividade nas chaves dos registros
																			NIL				,;	//27 -> Numero maximo de Locks a ser efetuado
																			NIL				 ;	//28 -> Utiliza Numeracao na GhostCol
														    			);
												  					);
							}
			
			
			




				cRdeFil		:= xFilial( "RDE" , cRd0Fil )
				cRdeKeySeek := ( cRdeFil + cRd0Codigo + cCodVis )
				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁQuery para Carga das Informacoes do RDE					   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				aRdeQuery		:= Array( 09 )
				aRdeQuery[01]	:= "RDE_FILIAL='"+cRdeFil+"'"
				aRdeQuery[02]	:= " AND "
				aRdeQuery[03]	:= "RDE_CODPAR='"+cRd0Codigo+"'"
				aRdeQuery[04]	:= " AND "
				aRdeQuery[05]	:= "RDE_CODVIS='"+cCodVis+"'"
				aRdeQuery[06]	:= " AND "
				aRdeQuery[07]	:= "RDE_STATUS='"+cRdeStatus+"'"
				aRdeQuery[08]	:= " AND "
				aRdeQuery[09]	:= "D_E_L_E_T_=' ' "
			
				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁLock dos Registros do RDE									   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				aRdeRecnos	:= {}
				aRdeKeys	:= {}
				nRdeLocks	:= 0
				IF (;
						!ExeWhile(	NIL,;
									NIL,;
									{ |lLocks| Eval( bRdeGet , @lLocks ) , lRdeLocks := lLocks , !( lLocks ) },;
									NIL,;
									{ || ++nRdeLocks > 3 };
								);
						.or.;
						!( lRdeLocks );
						.or.;
						Empty( aRdeRecnos );
					)
					FreeLocks( "RDE" , aRdeRecnos , .T. , aRdeKeys )
					IF !( GotoNextRecno( cRdtAlias , nNextRecno , nRdtAliasOrd ) )
						Exit
					EndIF
					Loop
				EndIF
				nRdeLoops 	:= Len( aRdeCols )
				IF !( lApda80BldAuto := !Empty( nRdeIteVis := GdFieldPos( "RDE_ITEVIS"	, aRdeHeader ) ) )
					Break
				EndIF
				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁLibera os Locks do RDE                              		   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				FreeLocks( "RDE" , aRdeRecnos , .T. , aRdeKeys )
		  	EndIf
	        aadd(aRD0Aux, {cRd0Fil,cRd0Codigo,cRd0Nome,RD0->(RECNO()),cRd0CodMen})
			
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁProximo Registro                                    		   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF !( GotoNextRecno( cRdtAlias , nNextRecno , nRdtAliasOrd ) )
				Exit
			EndIF
	
		End While
		EndFilBrw( cRdtAlias , aIndex )
		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁArmazena o resultado do criterio processadO                   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		If nRdtLoop==1
			aRD0Crit:=aClone(aRD0Aux)
		Else
			// Pesquisa os codigos que sao comuns nos dois array, senao for deleta
			For nRD0CLoop :=1 to Len(aRD0Crit)
				If (Ascan(aRD0Aux,{|xC| xC[2]==aRD0Crit[nRD0CLoop,2]}))==0
					aRD0Crit[nRD0CLoop,2]:="" // Nao pode deletar pq ele reposiciona o array delera para o final e erra o Laco
				EndIf
			Next nRD0CLoop
		EndIf	
	Next nRdtLoop
End Sequence

Return aRD0Crit
/*
эээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээээ
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
╠╠иммммммммммяммммммммммкмммммммяммммммммммммммммммммкммммммяммммммммммммм╩╠╠
╠╠╨Programa  ЁRDZRetEnt ╨Autor  ЁMarcos S. Lobo      ╨ Data Ё  04/07/08   ╨╠╠
╠╠лммммммммммьммммммммммймммммммоммммммммммммммммммммйммммммоммммммммммммм╧╠╠
╠╠╨Desc.     ЁcEntOri=Alias da Tabela correspondente ao Cod.Origem        ╨╠╠
╠╠╨Desc.     ЁcCodOri=Codigo de Origem									  ╨╠╠
╠╠╨          ЁcEntRet=Alias da Tabela/Codigo desejado como retorno        ╨╠╠
╠╠╨          ЁcEmpENT=(opc) codigo da empresa de origem (default corrente)╨╠╠
╠╠╨          ЁcFilENT=(opc) codigo da filial de origem (default corrente) ╨╠╠
╠╠╨          ЁlPosicione=.T.(Mantem posiГЦo RDZ),.F.(NЦo mantИm pos.RDZ)  ╨╠╠
╠╠╨          ЁlRetComFil=(opc) Indica se deseja a Filial no cod. Retorno  ╨╠╠
╠╠╨          Ё           (.T.=Default) Traz a chave RDZ_CODRET com filial ╨╠╠
╠╠╨          Ё           (.F.) Traz o codigo RDZ_CODRET SEM filial 		  ╨╠╠
╠╠╨          ЁlParComFil=(opc) Indica se o parametro CodOri gem esta com  ╨╠╠
╠╠╨          Ё           ou sem a filial, se estiver sem, a RDZRetErt adi-╨╠╠
╠╠╨          Ё           ciona a filial para fazer a busca.               ╨╠╠
╠╠╨          Ё           (.T.=Default) cCodOri jА esta com filial(Я adic) ╨╠╠
╠╠╨          Ё           (.F.) cCodOri esta sem filial (RdZRetEnt adic.)  ╨╠╠
╠╠лммммммммммьмммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╧╠╠
╠╠╨Uso       Ё Retorna CHAVE(FIL+COD) ou codigo da entidade correspondente╨╠╠
╠╠╨Uso       Ё usando o RDZ como tabela de relacionamento para Pessoas    ╨╠╠
╠╠хммммммммммомммммммммммммммммммммммммммммммммммммммммммммммммммммммммммм╪╠╠
╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠╠
ъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъъ
*/
Function RDZRetEnt( cEntOri, cCodOri              , cEntRet, cEmpENT, cFilENT, lPosicione, lRetcomFil, lParcomFil )

Local cCodRet		:= ""
Local cCodRD0		:= ""
Local aAreaOri		:= GetArea()
Local aAreaRD0		:= {}

DEFAULT cEntOri		:= "RD0"
DEFAULT cCodOri		:= ""
DEFAULT cEntRet		:= "SRA"
DEFAULT cEmpENT		:= cEmpAnt
DEFAULT cFilENT		:= cFilAnt
DEFAULT lPosicione	:= .F.
DEFAULT lRetComFil	:= .T.
DEFAULT lParComFil	:= .T.

dbSelectArea("RDZ")
aAreaRD0	:= GetArea()
dbSetOrder(1)

If !Empty(cCodOri) .and. !Empty(cEntOri) .and. !Empty(cEntRet)
	If !lParcomFil
		cCodOri := xFilial(cEntOri,cFilENT)+cCodOri		
	EndIf
	If ! cEntOri $ "RDZ#RD0"
		If MsSeek(xFilial("RDZ")+cEmpENT+cFilENT+cEntOri+cCodOri,.F.)
			cCodRD0 := RDZ->RDZ_CODRD0
		EndIf
	Else
		cCodRD0 := cCodOri
	EndIf
	
	cCodRD0 := Padr(cCodRD0,len(RDZ->RDZ_CODRD0))
		
	dBSelectArea("RDZ")
	dbSetOrder(2)	
	If !Empty(cCodRD0)
		If MsSeek(xFilial("RDZ")+cCodRD0+cEmpENT+cFilENT+cEntRet,.F.)
			cCodRet := RDZ->RDZ_CODENT
		EndIf		
	EndIf    
EndIf

If !lPosicione
	RestArea(aAreaRD0)
EndIf

RestArea(aAreaOri)

If !lRetComFil
	///Alinhamento com funГЦo FUpdateEnt()/SIGAVLD.PRX (RDZ_CODENT contИm filial+codigo).
	cCodRet := Substr(cCodRet, FWGETTAMFILIAL+1, Len(cCodRet))
EndIf

Return(cCodRet)

/*                                	
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    Ё APDLoadExec	ЁAutorЁ  Igor Franzoi     Ё Data Ё29/06/2009Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁFuncao executada a cada rotina (menu) chamado pelo APD		Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁAPDLoadExec													Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Uso      ЁGenerico													Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё Retorno  Ё															Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ< Vide Parametros Formais >									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды*/
Function APDLoadExec()

If FindFunction("SPFLoadExec()")
	SPFLoadExec()
EndIf

Return (Nil)
