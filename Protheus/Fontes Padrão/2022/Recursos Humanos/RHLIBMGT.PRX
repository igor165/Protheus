#INCLUDE "PROTHEUS.CH"

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁStatic com as Validacoes do SX3 Utilizadas na  EnchoTudOk    Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static aEnchoVlds	:= {}
Static __cOperac__  := "_oper_"

/*/
зддддддддддбддддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁInRhLibMgtExecЁAutor ЁMarinaldo de Jesus   Ё Data Ё14/05/2003Ё
цддддддддддеддддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁExecutar Funcoes Dentro de RHLIBMGT                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁInRhLibMgtExec( cExecIn , aFormParam )						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                 	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 													 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function InRhLibMgtExec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= __ExecMacro( cExecIn )
EndIF

Return( uRet )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁEnchoTudOk		ЁAutorЁMarinaldo de Jesus Ё Data Ё23/07/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁTudo Ok para a Enchoice                           			Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                      									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerica      										    	Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function EnchoTudOk( oEnchoice , aValid , aNotValid, lHide )

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Foi inserido o parametro lHide porque no programa Gpea400	  Ё
Ё esta sendo utilizado o bgotfocus na getdados e qdo o hide   Ё
Ё esta sendo executado, e no momento que eh utilizado o activeЁ
Ё o programa passa para o proximo objeto, no caso a getdados. Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Variaveis de Inicializacao Obrigatoria					  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Local aArea			:= GetArea()
Local aAreaSX3		:= SX3->( GetArea("SX3") )

Local lTudoOk		:= .T.
Local lIsHide		:= .F.

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Variaveis que serao inicializadas no Corpo da Funcao		  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Local aClassData

Local bValid
Local bAscCpo

Local cReadVar
Local cSisValid
Local cUsrValid
Local cBlcValid
Local cCpoVld
Local cContext
Local cOperAux
Local cWhen

Local lModified
Local lActive
Local lExistTrigger
Local lAscanValid

Local nCtrl
Local nCtrls
Local nPosCpo

DEFAULT aValid		:= {}
DEFAULT aNotValid	:= {}
DEFAULT lHide		:= .T.

CursorWait()

	Begin Sequence
	
		Private Inclui := IF( Type( "Inclui" ) == "L" , Inclui , .F. )
		Private Altera := IF( Type( "Altera" ) == "L" , Altera , .F. )
		
		IF (;
				!( Inclui );
				.and.;
				!( Altera );
			)
			Break
		EndIF
		
		/*/
		зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁVerificar se mudou a operacao executada para reinicializar as variaveis estaticasЁ
		юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		cOperAux	:= If(INCLUI,"INCLUI",If(ALTERA,"ALTERA","_oper_"))
		If cOperAux <> __cOperac__
			RstEnchoVlds()
			__cOperac__	:= cOperAux
		Endif

		IF !( ValType( oEnchoice ) == "O" ) 
			Break
		EndIF
		
		aClassData := ClassDataArr( oEnchoice )
		IF ( aScan( aClassData , { |eData| ( Upper( AllTrim( eData[1] ) ) == "AENTRYCTRLS" ) } ) == 0 )
			Break
		EndIF
	
		IF !( lTudoOk := Obrigatorio( oEnchoice:aGets , oEnchoice:aTela ) )
			Break
		EndIF
	
		If lHide
			oEnchoice:Hide()
		EndIf
		lIsHide := .T.
	
		lAscanValid := !Empty( aValid )
		bAscCpo		:= { |x| ( x[1] == cEmpAnt ) .and. ( x[2] == cCpoVld ) }
	
		IF !Empty( cReadVar := ReadVar() )
	
			cReadVar	:= Upper( AllTrim( cReadVar ) )
			cCpoVld		:= StrTran( cReadVar , "M->" , "" )
			cContext	:= GetSx3Cache( cCpoVld , "X3_CONTEXT" )
	
			IF (;
					( cContext <> NIL );
					.And. ;
					!( cContext $ "Vv" );
				 );
				 .and.;
				 ( aScan( aNotValid , { |x| Upper( AllTrim( x ) ) == cCpoVld } ) == 0 );
				 .and.;
				 (;
				 	IF(;
				 			( lAscanValid ),;
				 			( aScan( aValid , { |x| Upper( AllTrim( x ) ) == cCpoVld } ) > 0 ),;
				 			.T.;
				 	   );
				 )
	
				nPosCpo := aScan( oEnchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == cReadVar ) } )
				
				IF ( nPosCpo > 0 )
	
					nCtrl	:= nPosCpo
	
					IF ( oEnchoice:aEntryCtrls[ nCtrl ]:lModified )
	
						lActive	:= oEnchoice:aEntryCtrls[ nCtrl ]:lActive
						oEnchoice:aEntryCtrls[ nCtrl ]:lActive  := .T.
	
						IF !( lExistTrigger := MyExistTrigger( cCpoVld ) )
							lTudoOk := Eval( oEnchoice:aEntryCtrls[ nCtrl ]:bValid )
						EndIF
	
						IF (;
								!( ValType( lTudoOk ) == "L" );
								.or.;
								( lExistTrigger );
							 )
	
							nPosCpo	:= aScan( aEnchoVlds , bAscCpo )
	
							IF ( nPosCpo == 0 )
							
								cSisValid	:= AllTrim( GetSx3Cache( cCpoVld , "X3_VALID"	) )
								cUsrValid	:= AllTrim( GetSx3Cache( cCpoVld , "X3_VLDUSER"	) )
								cBlcValid	:= ""
								
								IF ( !Empty( cSisValid ) .and. !Empty( cUsrValid ) )
									cBlcValid := ( cSisValid + " .and. " + cUsrValid )
								ElseIF !Empty( cSisValid )
									cBlcValid := cSisValid
								ElseIF !Empty( cUsrValid )
									cBlcValid := cUsrValid
								EndIF
								
								IF !Empty( cBlcValid )
									bValid  := &( "{ || " + cBlcValid + " } " )
								Else
									bValid  := { || .T. }
								EndIF	
								
								aAdd( aEnchoVlds , { cEmpAnt , cCpoVld , cSisValid , cUsrValid , bValid , NIL } )
							
							Else
							
								bValid := aEnchoVlds[ nPosCpo , 05 ]
							
							EndIF
							
							lTudoOk := Eval( bValid )
				        
						Else
						
							aAdd( aEnchoVlds , { cEmpAnt , cCpoVld , "" , "" , oEnchoice:aEntryCtrls[ nCtrl ]:bValid , NIL } )
	
						EndIF
	
						DEFAULT lTudoOk := .T.
						cWhen 	:= AllTrim( GetSx3Cache( cCpoVld , "X3_WHEN" ) )
						nPosCpo	:= aScan( aEnchoVlds , bAscCpo )
						IF !( lTudoOk )
							IF (;
									!Empty( cWhen );
									.and.;
									!Empty( nPosCpo );
									.and.;
									!Empty( nCtrl );
									.and.;
									( aEnchoVlds[ nPosCpo , 06 ] == NIL );
								)	
								aEnchoVlds[ nPosCpo , 06 ]				:= oEnchoice:aEntryCtrls[ nCtrl ]:bWhen
								oEnchoice:aEntryCtrls[ nCtrl ]:bWhen	:= { || .T. }
							EndIF
							oEnchoice:nCtrl := nCtrl
							oEnchoice:aEntryCtrls[ nCtrl ]:SetFocus()
							Break
						ElseIF !Empty( cWhen )
							IF Empty( nCtrl )
								nCtrl := aScan( oEnchoice:aEntryCtrls , { |x| ( Upper( AllTrim( x:cReadVar ) ) == cReadVar ) } )
							EndIF
							IF ( nCtrl > 0 )
								IF (;
										( nPosCpo > 0 );
										.and.;
										( aEnchoVlds[ nPosCpo , 06 ] <> NIL );
									)	
									oEnchoice:aEntryCtrls[ nCtrl ]:bWhen	:= aEnchoVlds[ nPosCpo , 06 ]
								EndIF	
								oEnchoice:aEntryCtrls[ nCtrl ]:lActive		:= lActive
							EndIF	
						EndIF
					
					EndIF
				
				EndIF
		
			EndIF	
		
		EndIF
	
		nCtrls := Len( oEnchoice:aEntryCtrls )
		For nCtrl := 1 To nCtrls
	
			IF Empty( cReadVar := oEnchoice:aEntryCtrls[ nCtrl ]:cReadVar )
				Loop
			EndIF
	
			cCpoVld		:= Upper( AllTrim( StrTran( cReadVar , "M->" , "" ) ) )
			cContext	:= GetSx3Cache( cCpoVld , "X3_CONTEXT" )
			IF (;
					( cContext == NIL );
					.or.;
					( cContext $ "Vv" );
				 )
				Loop
			EndIF
	
			IF ( aScan( aNotValid , { |x| Upper( AllTrim( x ) ) == cCpoVld } ) > 0 )
				Loop
			EndIF
	
			IF ( lAscanValid )
				IF ( aScan( aValid , { |x| Upper( AllTrim( x ) ) == cCpoVld } ) == 0 )
					Loop
				EndIF
			EndIF
	
			lModified	:= oEnchoice:aEntryCtrls[ nCtrl ]:lModified
			oEnchoice:aEntryCtrls[ nCtrl ]:lModified	:= .T.
			lActive		:= oEnchoice:aEntryCtrls[ nCtrl ]:lActive
			oEnchoice:aEntryCtrls[ nCtrl ]:lActive		:= .T.
			oEnchoice:aEntryCtrls[ nCtrl ]:SetFocus()
	
			IF !( lExistTrigger := MyExistTrigger( cCpoVld ) )
				lTudoOk := Eval( oEnchoice:aEntryCtrls[ nCtrl ]:bValid )
			EndIF
	
			nPosCpo := aScan( aEnchoVlds , bAscCpo )
	
			IF (;
					!( ValType( lTudoOk ) == "L" );
					.or.;
					( lExistTrigger );
				 )
				
				IF ( nPosCpo == 0 )
				
					cSisValid	:= AllTrim( GetSx3Cache( cCpoVld , "X3_VALID"	) )
					cUsrValid	:= AllTrim( GetSx3Cache( cCpoVld , "X3_VLDUSER"	) )
					cBlcValid	:= ""
				
					IF ( !Empty( cSisValid ) .and. !Empty( cUsrValid ) )
						cBlcValid := ( cSisValid + " .and. " + cUsrValid )
					ElseIF !Empty( cSisValid )
						cBlcValid := cSisValid
					ElseIF !Empty( cUsrValid )
						cBlcValid := cUsrValid
					EndIF
					IF !Empty( cBlcValid )
						bValid  := __ExecMacro( "{ || " + cBlcValid + " } " )
					Else
						bValid  := { || .T. }
					EndIF
					aAdd( aEnchoVlds , { cEmpAnt , cCpoVld , cSisValid , cUsrValid , bValid , NIL } )
	
				Else
				
					bValid := aEnchoVlds[ nPosCpo , 05 ]
				
				EndIF
				
				lTudoOk := Eval( bValid )
			
			Else
	
				aAdd( aEnchoVlds , { cEmpAnt , cCpoVld , "" , "" , oEnchoice:aEntryCtrls[ nCtrl ]:bValid , NIL } )
	
			EndIF
	
			bValid := { || .T. }
			DEFAULT lTudoOk := .T.
			cWhen 	:= AllTrim( GetSx3Cache( cCpoVld , "X3_WHEN" ) )
			nPosCpo	:= aScan( aEnchoVlds , bAscCpo )
			IF !( lTudoOk )
				IF (;
						!Empty( cWhen );
						.and.;
						!Empty( nPosCpo );
						.and.;
						!Empty( nCtrl );
						.and.;
						( aEnchoVlds[ nPosCpo , 06 ] == NIL );
					)
					aEnchoVlds[ nPosCpo , 06 ]				:= oEnchoice:aEntryCtrls[ nCtrl ]:bWhen
					oEnchoice:aEntryCtrls[ nCtrl ]:bWhen	:= { || .T. }
				EndIF
				oEnchoice:nCtrl := nCtrl
				oEnchoice:aEntryCtrls[ nCtrl ]:SetFocus()
				Break
			Else
				IF (;
						!Empty( cWhen );
						.and.;
						( nPosCpo > 0 );
						.and.;
						( aEnchoVlds[ nPosCpo , 06 ] <> NIL );
					)
					oEnchoice:aEntryCtrls[ nCtrl ]:bWhen	:= aEnchoVlds[ nPosCpo , 06 ]
				EndIF
				oEnchoice:aEntryCtrls[ nCtrl ]:lModified	:= lModified
				oEnchoice:aEntryCtrls[ nCtrl ]:lActive		:= lActive
			EndIF
	
		Next nCtrl
	
	End Sequence
	
	IF ( lIsHide )
		oEnchoice:Show()
	EndIF
	
	RestArea( aAreaSX3 )
	RestArea( aArea )
	
CursorArrow()

Return( lTudoOk )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁMyExistTrigger	ЁAutorЁMarinaldo de Jesus Ё Data Ё23/07/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁVerifica se Existe Trigger para o Campo           			Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                      									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁEnchoTudOk     										    	Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function MyExistTrigger( cCpoTrigger )

Local cExistTrigger
Local lExistTrigger

cCpoTrigger		:= Upper( Alltrim( cCpoTrigger ) )
cExistTrigger	:= GetSx3Cache( cCpoTrigger , "X3_TRIGGER" )
lExistTrigger	:= ( ( !Empty( cExistTrigger ) ) .and. ( cExistTrigger == "S" ) )

Return( lExistTrigger )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁRstEnchoVlds	ЁAutorЁMarinaldo de Jesus Ё Data Ё23/07/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁReinicializa aEnchoVlds                           			Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁNIL                      									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerica      										    	Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function RstEnchoVlds()

aEnchoVlds	:= {}
__cOperac__	:= "_oper_"

Return( NIL )
