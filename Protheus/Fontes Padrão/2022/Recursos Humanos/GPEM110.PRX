#INCLUDE "Protheus.ch"  
#INCLUDE "GPEM1110.CH"
#INCLUDE "TBICONN.CH"

#DEFINE __TiposValidos__ 			( "FL*PR*PF*PD*13*PP" )	// Fl-Folha, PR-Provisao, PF-Prov. Ferias, PD-Prov. Decimo terceiro
#DEFINE __Elementos_aSrvReturn__	09	

#DEFINE __aSrvReturn_TudoOK__		01
#DEFINE __aSrvReturn_aCols__ 		02
#DEFINE __aSrvReturn_aHeader__		03
#DEFINE __aSrvReturn_aRecnos__		04
#DEFINE __aSrvReturn_nPosFil__		05
#DEFINE __aSrvReturn_nPosPD__		06
#DEFINE __aSrvReturn_nPosLctop__ 	07  
#DEFINE __aSrvReturn_aRecLctop__	08
#DEFINE __aSrvReturn_cAliasLctop__	09

#DEFINE __Elementos_aSRZzs__		06

#DEFINE __aSzs_Pos_Fil__			01
#DEFINE __aSzs_Pos_Cc__				02
#DEFINE __aSzs_Pos_Mat__			03
#DEFINE __aSzs_Pos_Pd__				04      
#DEFINE __aSzs_Pos_It__				05
#DEFINE __aSzs_Pos_Cl__				06

#DEFINE __LCTO_PCO_FOLHA__ 			'000085'

Static lGpem110ExecInRemote
Static lMultSRZ
Static _aCodFol		:= {}
Static _BkpFilial	:= ""
Static _lBkpTraTrf	:= .F.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o     ³ GPEM110  ³ Autor ³ Marcos Stiefano      	       ³ Data ³ 07/06/95 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o  ³ Contabiliza‡ao da Folha                          		               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe    ³ GEPM110()                                                  	    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             	    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                    	    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Cecilia C.   ³22/11/13³RHU210_01_12   ³Unificacao da Folha de Pagamento-Contabili³±±
±±³            ³        ³                ³zacao.                                    ³±±
±±³Flavio Corre³23/04/14³RQ 002966   	 ³³Colocada a Funcaoo fGravaNTop que estava  ±±
±±³            ³        ³                ³na Fase 4 da versao 11                    ³±±
±±³Flavio Correa³07/05/14³TPKHR3         ³Replica V11 fContIdFat - Desoneração    . ³±±
±±³Cecilia C.   ³14/05/14³RHU210_01_12   ³Ajuste na funcao fGrvRateio para enviar a ³±±
±±³             ³        ³               ³data de referencia.                       ³±±
±±³Allyson M   ³02/07/14³TPU319		     ³Ajuste p/ nao carregar mais de uma vez o  ³±±
±±³            ³        ³                ³valor do rateio da provisao caso o fun-   ³±±
±±³            ³        ³                ³cionario possua transferencia no mes      ³±±
±±³Gustavo M   ³02/07/14³TPYCXG		     ³Ajuste na verificacao da existencia do    ³±±
±±³            ³        ³                ³campo para uso da funcao fGravArelin.	    ³±±
±±³Allyson M   ³25/07/14³TQCPCK		     ³Ajuste p/ contabilizacao da provisao por  ³±±
±±³            ³        ³                ³CC + Item + Classe.  						³±±
±±³Flavio C    ³17/07/15³TSWORN		     ³Buscar roteiros na SRY que devem ser conta³±±
±±³            ³        ³                ³bilizados RY_CONTAB=1						³±±
±±|Ricardo D.  |07/09/15|TTCXFW          |Tratamento do cPeriodo para considerar a  ³±±
±±|            |        |                |competencia quando executado da geracao do³±±
±±|            |        |                |relatorio de GPS (GPER240).               ³±±
±±³Allyson M   ³10/09/15³TTFWT3		     ³Ajuste p/ trazer roteiros padrao caso nao ³±±
±±³            ³        ³                ³haja roteiro com o campo RY_CONTAB = 1.	³±±
±±³Luis Artuso |18/09/15|TTBPR4		     |Ajuste para gerar o nome do arquivo em mai³±±
±±³            |        |                |usculo                                    ³±±
±±³Allyson M   |08/12/15|TTTOH3		     |Ajuste para que a falta do Item Contabil e³±±
±±³            |        |                |Classe Valor nao seja impeditivo quando o ³±±
±±³            |        |                |MV_ITMCLVL = 3 (usa, mas nao obrigatorio).³±±
±±³            |        |TTXVS0		     |Ajuste p/ deletar os registros da SRZ de  ³±±
±±³            |        |                |provisao corretamente antes de efetuar o	³±±
±±³            |        |                |processo de contabilizacao				³±±
±±³Flavio C    |24/02/16|TUOYBO 	     |Ajuste p/ contabilizacao com Logix p/  	³±±
±±³            |        |                |filtrar a geracao da CT2 de acordo com a  ³±±
±±³            |        |                |filial parametrizada nas perguntas 		³±±
±±³Renan Borges|21/06/16|TVIPFA 	     |Ajuste para ao gerar a Contabilização da  ³±±
±±³            |        |                |provisão seja gerada separadamente os valo³±±
±±³            |        |                |res para os tipos de contratos.           ³±±
±±³Raquel Hager|28/06/16|TVMPI1			 | Ajuste do tamanho dos campos Matricula.  ³±±
±±|Renan Borges|30/06/16|TVNRM8          |Ajuste p/ contabilizacao por matricula no ³±±
±±|            |        |                |momento de geracao dos registros que estao³±±
±±|            |        |      	         |no parametro 15: sera gerado um registro a³±±
±±|            |        |      	         |mais com matricula 'GPS' p/ que a contabi-³±±
±±|            |        |      	         |lizacao considere o registro (pois ela faz³±±
±±|            |        |      	         |filtro dos registros de matricula com ZZZ)³±±
±±|            |        |      	         |e p/ que seja possivel identificar a ori- ³±±
±±|            |        |      	         |gem do registro 					        ³±±
±±|Gabriel A.  |08/07/16|TVGTSB          |Ajuste na pesquisa da tabela S035.        ³±±
±±|Gabriel A.  |13/07/16|TVJZT9          |Ajustes na contabilização quando há       ³±±
±±|            |        |                |integração com o Logix e corrigido        ³±±
±±|            |        |                |error.log ao gerar contabilização quando  ³±±
±±|            |        |                |há dados na RHT.                          ³±±
±±|Raquel Hager|29/08/16|TVDPAH          |Ajustes na geração da SRZ durante impres- ³±±
±±|            |        |                |sao da GPS quando existem dados cadastra- ³±±
±±|            |        |                |dos na tabela S035 para mais de uma Filial³±±
±±³Allyson M   |04/11/16|TWFOJV		     |Ajuste p/ execução do robô				³±±
±±³P. Pompeu   |16/01/17|MRH-4920	     |Subindo alteração Contabilizacao EAI      ³±±
±±³Allyson M   |26/01/17|MRH-5274	     |Ajuste na contabilização da 2ª parc. do 13³±±
±±³Allyson M   |07/02/17|MRH-6209	     |Ajuste na contabilização p/ verificação do³±±
±±|            |        |                |do tipo do lançamento na gravação da SRZ e³±±
±±|            |        |                |p/ contabilização da tabela S035			³±±
±±³Renan Borges|22/03/17|MRH-7527	     |Ajuste para ao calcular a folha de pagamen³±±
±±|            |        |                |to FOL e depois for calculada o roteiro   ³±±
±±|            |        |                |AUT a GPS seja gerada corretamente.       ³±±
±±³Renan Borges|22/03/17|MRH-7527	     |Ajuste para ao calcular a folha de pagamen³±±
±±|            |        |                |to FOL e depois for calculada o roteiro   ³±±
±±|            |        |                |AUT a GPS seja gerada corretamente.       ³±±
±±³Cícero Alves|24/04/17|DRHPAG-94	     |Ajuste na fGeraSRZTop para melhoria de    ³±±
±±|            |        |                |performance na geração da GPS				³±±
±±³Eduardo K.  |03/05/17|MPRIMESP-9974   |Ajuste p/ não gerar error.log ao gravar   ³±±
±±|            |        |                |dados no parametro MV_GPMESCT.			³±±
±±³Cecília C.  |31/07/17|DRHPAG-3322     |Ajuste p/ não ocorrer error para outra lo-³±±
±±³            |        |                |lização ao acessar a tabela S033 na função³±±
±±³            |        |                |fContIdFat.                               ³±±
±±³Isabel N.   |23/08/17|DRHPAG-4991     |Ajuste em QryFunc p/usar order by na query³±±
±±³            |        |                |principal ao invés da subquery.           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
/*
Usar essa documentação quando inclui o fonte em alguma pasta de inovação, por exemplo
12.1.6, a cada merge com o fonte da sustentação atualizar as informações abaixo para 
que no merge final fique facil a atualização do fonte
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÑÍÍÍÍ³±±
±±³Data Fonte Sustentação³ ChangeSet ³±±
±±³ÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ³±±  
±±³    11/06/2015        ³  307904   ³±± 
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÑÍÍÍÍÍ±±
*/
Function GPEM110(cType, cMatDe, cMatAte)
Private cTipo

Default cType 	:= ""
Default cMatDe 	:= ""
Default cMatAte := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Funcao verifica se existe alguma restrição de acesso para o³
//³usuário que impeça a execução da rotina.                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !(fValidFun({"SRZ","CT5","SRV","SRC","SRD"}))
	Return
Endif  

If Select("TMP") > 0
	dbSelectArea("TMP")
	TMP->(dbCloseArea())
EndIf 

If IsBlind()
	If !Empty(cType)
		cTipo := cType
	Else
		cTipo := "F"
	EndIf
	GPEM110Tip(cTipo, cMatDe, cMatAte)
Else
	GPEM110Tip()
Endif

Return( NIL )   

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpem110Tip     ³Autor³Kelly Soares         ³ Data ³13/02/2008³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Processa a Contabilizacao considerando o tipo informado.     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM110  													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpem110Tip(cTipo, cMatDe, cMatAte)
Local aArea		:= GetArea()
Local aSays		:= {}
Local aButtons	:= {}
Local aTitle		:= {}
Local aLog		:= {}
Local aTimeLog	:= {}
Local cSvFilAnt  := cFilAnt
Local nOpca		:= 0.00
Local nTimeIni	:= nTimeFim		:= Seconds()

Private aRotina := {;
						{ STR0005 , "GPE110Par" , 0 , 1},; 	//"Parƒmetros"
                   { STR0006 , "GPE110Con" , 0 , 4} ;	//"Autom tica"
                  } 
Private cCadastro	:= OemToAnsi(STR0007) //"Contabiliza‡„o da Folha"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas na Pergunte                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private cTipoCont
Private cRoteiro
Private cRot		// variavel utilizada apenas no filtro
Private cProcesso
Private cPeriodo
Private lSchedule  := IsBlind()
Private lErpLogix	:= GetMvRH("MV_ERPLOGI",,"2") == "1"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Apura a existencia de pontos de entrada					         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private lGP110VLD	:= ExistBlock("GP110VLD") //-- Consistencias adicionais para a execucao da rotina

Private lGeraPMes := .F.

If GetMvRH("MV_RATPROV",,"N") == "S"
	lGeraPMes	  := fChkRHQBase()	// Verifica a existencia da tabela RHQ
Endif
	
Default cTipo 	:= "F"
Default cMatDe 	:= ""
Default cMatAte := ""

If lSchedule
	nOpca := 1	
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta Tela de Entrada para a Selecao dos Parametros          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAdd(aSays,OemToAnsi(STR0008) )  //"Este programa contabilizar  os lan‡amentos da folha de pagamento "
	aAdd(aSays,OemToAnsi(STR0009) )  //"para a contabilidade lendo o arquivo (SRZ) . Dever  ser utilizado"
	aAdd(aSays,OemToAnsi(STR0010) )  //"apos as emissäes da folha, GRPS e provisäes."
	
	aAdd(aButtons, { 5,.T.,{|| Gpem110Pergunte() } } )
	aAdd(aButtons, { 1,.T.,{|o| nOpca := 1,If(gpconfOK(),FechaBatch(),nOpca:=0) }} )
	aAdd(aButtons, { 2,.T.,{|o| FechaBatch() }} )
		
	FormBatch( cCadastro , aSays , aButtons )
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para parametros                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF ( nOpca == 1 )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Adiciona Informacoes no Log de Processamento 							      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAdd( aTitle 	, STR0061 ) // "Tempo de processamento da Contabilização"
	aAdd( aTimeLog	, STR0062 + Dtoc(MsDate()) + ', ' + STR0063 + ' ' + SecsToTime( nTimeIni ) + '.' ) // "Início do Processamento : "##"às"

	// Executa a contabilizacao
	Gpem110Processa( .T. , .T., cMatDe, cMatAte )

	aAdd( aTimeLog	, STR0064 + Dtoc(MsDate()) + ', ' + STR0063 + ' ' + SecsToTime( nTimeFim := Seconds() ) + '.' ) // "Fim do Processamento    : "##"às"
	aAdd( aTimeLog	, STR0065 + SecsToTime( nTimeFim - nTimeIni ) )//"Duração do processamento: "
	aAdd( aLog, aClone( aTimeLog ) )
EndIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a Filial de Entrada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cFilAnt := cSvFilAnt

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura os Ponteiros de Entrada                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea( aArea )
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpem110Processa³Autor³Equipe Advanced RH   ³ Data ³14/05/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Processa a Contabilizacao do Modulo SIGAGPE    			     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM110  													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function Gpem110Processa( lShowProc , lExecInRemote, cMatDe, cMatAte )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ As variaveis Locais de Ambiente devem Ser Declaradas e Inicia³
//³ lizadas Aqui                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aArea			:= GetArea()
Local aAreaSRZ		:= SRZ->( GetArea() )
Local aAreaSRA		:= SRA->( GetArea() )
Local aAreaSM0		:= SM0->( GetArea() )

Local aCT5
Local aSRZzs
Local aPadrao
Local aSrvLanc
Local aFiliais
Local aLogTitle		:= {}
Local aLogIncon		:= {}
Local aFilContab
Local aModuloReSet
Local aPerAberto	   := {}
Local aPerFechado	:= {}
Local aPerAtual		:= {}
Local aPerCalc		:= {}

Local bTotal
Local bSrvLancAsc

Local cMes
Local cAno
Local cSrvPds
Local cAliasCc
Local cArquivo
Local cFilContab
Local cInconsist
Local cFilReplace
Local cZzsInRZFil
Local cZzsInRZCc
Local cZzsInRZMat
Local cZzsInRZPd
Local cNumPgto	:= ""
Local cSvFilAnt	:= cFilAnt
Local cMvCPosSrv	:= ""
Local cFilRCH		:= ""
Local cZzsInRZIt
Local cZzsInRZCl
Local cPerg     := ""

Local dDataRef

Local nX
Local nFilial
Local nHdlPrv
Local nVerba
Local nVerbas
Local nFiliais
Local nLastRec
Local nContador
Local nPosPadrao
Local nTamNumPgto := GetSx3Cache("RCH_NUMPAG", "X3_TAMANHO")
Local nIniPagto
Local nFimPagto

Local lGerouFol
Local lCtbInUse
Local lMvCPosSrv
Local lMvCPosLcp
Local lMvCPosCtt
Local lSrvLancOk
Local lSrzCompart
Local lCt5Compart
Local lSrvCompart
Local lContFech   := GetMvRH("MV_GPCTAFM",,.F.)   //Parametro se deve contabilizar somente apos fechamento
Local lCtbInTran := .F.
Local lPLRPE	  	  := ExistBlock("GP070PLR")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ As variaveis Locais do corpo do programa devem ser Aqui Decla³
//³ radas mas  inicializa das Abaixo. GOTO :INIT LOCAL           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aSrvPCO
Local aLancPCO
Local bSrvPcoAsc
Local lSrvPCOOk
Local lPCOok
Local lCTBok
Local lIntePco

Local aSrzFields
Local cQuery
Local cQueryPds
Local cQueryOrd
Local cSrzQuery
Local cQueryTmp
Local cSrzFields
Local cRetSqlName	:= InitSqlName( "SRZ" )
Local cSRZIndexKey
Local lSelectPds
Local nSrzFields
Local nField

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis de Parametros                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lDigita
Local lAglut
Local cRotBlank := Space( GetSx3Cache( "RCH_ROTEIR", "X3_TAMANHO" ) )
Local cNumPgtoDe
Local cNumPgtoAte
Local cJoin	:= ""
Local cAliasTmp := GetNextAlias()
Local lCont		:= .F.
Local lIntegra	:= GetMvRH("MV_RHCONEX",,.F.)
Local cGPCTLOG 	:= GetMvRH("MV_GPCTLOG",," ")
Local lSPGP	    := GetMvRH("MV_SPGP110",,.F.)
Local cCodPadrao:= ""
Local cTbLog    := ""
Local aTpContr	:= {1}
Local cTpContr  := GetSx3Cache("RA_TPCONTR","X3_CBOXSPA")
Local nOpcion   := 2

Private lProvFer    := .F.
Private lProv13o    := .F.
Private lDrop		:= .F.
Private cMesCont 	:= GetMvRH("MV_GPMESCT",,"")  //Parametro que armazena o ultimo mes contabilizado, atualizado apos a contabilizacao.
Private Semana		:= ""
Private lCtabBxaFer
Private lCtabBxaRes
Private Inclui		:= .T.
Private cLote		:= ""
Private cPadrao		:= ""	
Private dDataLanc	:= dDataBase
Private nTotRegs 	:= 0.00
Private nTotal   	:= 0.00
Private cMesAnoCtab := ""
Private cMesAnoProv := ""
Private cAcessaSRA  := &("{ || " + ChkRH("GPEM110","SRA","2") + "}")
Private dDtPerIni	:= Ctod("  /  /  ")
Private dDtPerFim	:= Ctod("  /  /  ")
Private dDataBase1  := dDataBase
Private cItemClvl	:= GetMvRH( "MV_ITMCLVL", .F., "2" )  //Conteudo do parametro
Private lItemClvl	:= cItemClvl $ "1*3"  // Define se trabalha com item contábil e classe de valor
Private lContabCC	:= .F.
Private lGP110ANL	:= ExistBlock("GP110ANL")	//P.E. após carregar o Numero do Lote contabil
Private cFilConDe
Private cFilConAte
Private lFolPgto    := .T.
Private lFol13Sl    := .T.
Private lDicInter		:= FindFunction("fChkInterm") .And. fChkInterm()

Default lShowProc 	:= .F.
Default cMatDe 		:= ""
Default cMatAte 	:= ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o Processo de Contabilizacao esta sendo Executado³
//³ via Remote												               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Gpem110InRemote( @lExecInRemote )

If !lMultSRZ
	ReabSRZ()
Endif

//Tratamiento para opciones configurada en campo RA_TPCONTR
While At(";",cTpContr) > 0
	AADD(aTpContr,nOpcion)
	nOpcion++
	cTpContr := StrTran(cTpContr,";","",1,1)
End

Begin Sequence
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Chamada Recursiva com Barra de Processamento                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( ( lShowProc ) .and. ( lGpem110ExecInRemote ) )
		Processa( {|lEnd| Gpem110Processa( .F. , lGpem110ExecInRemote ) , STR0011 } )  //"Contabiliza‡„o da Folha"
		Break
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Criacao de semaforo para acesso exclusivo ao alias SRZ        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	GPM110MSRZ( @cRetSqlName)
	If !( WhileNoLock( "SRZ" , NIL , { cRetSqlName } , 1 , 1 , .T. , NIL , NIL , NIL , .F. ) )
		Help( " ",1,"NOPENSRZ", )	// Nao conseguiu exclusividade do arquivo
		aAdd( aLogIncon, STR0092)   //"Não foi encontrado período de contabilização aberto."
		Break
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ :INIT LOCAL												               ³
	//³ Aqui eh que as variaveis Locais que serao utilizadas no corpo³
	//³ do progama deverao ser Inicializadas						         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
   aSrvPco      := {}
   aLancPCO     := {}
   bSrvPcoAsc   := {||NIL}
   lSrvPCOOk    := .F.
   lPCOok       := .T.
   lIntePco 		:= GetMvRH("MV_PCOINTE",.F.,"2")=="1"

	aCT5			:= {}
	aPadrao		:= {}
	aSrvLanc		:= {}
	aFiliais		:= {}
	aLogIncon		:= {}
	aFilContab		:= {}
	aLogTitle		:= {}
	aSRZzs			:= SRZzs()			// efetua a carga dos sub-totais (zzz)
	
	bTotal			:= { || NIL }
	bSrvLancAsc	:= { || NIL }
	
	cSrvPds		:= ""
	cAliasCc    	:= ""
	cFilContab		:= ""
	cInconsist		:= ""
	cFilReplace	:= ""
	cArquivo		:= ""
	cZzsInRZFil	:= aSRZzs[__aSzs_Pos_Fil__]
	cZzsInRZCc		:= aSRZzs[__aSzs_Pos_Cc__ ]
	cZzsInRZMat	:= aSRZzs[__aSzs_Pos_Mat__]
	cZzsInRZPd		:= aSRZzs[__aSzs_Pos_Pd__ ]
	If lItemClvl
		cZzsInRZIt	:= aSRZzs[__aSzs_Pos_It__ ]
		cZzsInRZCl	:= aSRZzs[__aSzs_Pos_Cl__ ]
	EndIf	
		
	lCtbInUse		:= .T.
	lMvCPosSrv		:= .F.
	lMvCPosLcp		:= .F.
	lMvCPosCtt		:= .T.
	lSrvLancOk		:= .F.
	lSrzCompart		:= Empty( xFilial( "SRZ" ) )
	lCt5Compart		:= ( ( Select("CT5") > 0.00 ) .and. Empty( xFilial( "CT5" ) ) )
	lSrvCompart		:= Empty( xFilial( "SRV" ) )
	lGerouFol		:= .F. 
	lSPGP110 		:= GetMvRH("MV_SPGP110",,.F.)
	nVerba			:= 0.00
	nVerbas			:= 0.00
	nFiliais		:= 0.00
	nContador		:= 0.00
	nPosPadrao		:= 0.00
	nFilial			:= 0.00
	nLastRec		:= 0.00
	
	aSrzFields		:= SRZ->( dbStruct() )
	cQuery			:= ""
				
	cQueryPds		:= ""
	cQueryOrd    	:= ""
	cSrzQuery 		:= ""
	cQueryTmp		:= ""
	cSrzFields		:= ""
	cSRZIndexKey	:= ""
	lSelectPds		:= .T.
	nSrzFields		:= Len( aSrzFields	)
	nField			:= 0.00

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Algum Lugar Esta Zerando nModulo, Entao Aqui garantimos   que³
	//³ Tenha o Conteudo correspondente ao Modulo SIGAGPE            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( ( Type("nModulo") == "U" ) .or. ( ( Type("nModulo") == "N" ) .and. ( nModulo == 0.00 ) ) )
		aModuloReSet := SetModulo( "SIGAGPE" , "GPE" )
	EndIf
	
	If !lSchedule
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega as Perguntas										            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	 	Pergunte( "GPE110A", .F. )
	 	cPerg     := "GPE110A"
		cTipoCont 	:= mv_par01            // Tipo de Contabilizacao: 1-Folha Pagamento;2-Provisao;3-Ambas
		lDigita   := ( mv_par02 == 1 )		// Mostra Lancamentos:1-Sim;2-Nao
		lAglut    := ( mv_par03 == 1 )		// Aglutina Lancamentos:1-Sim;2-Nao
		cFilConDe	:= mv_par04				// Filial De
		cFilConAte	:= mv_par05				// Filial Ate
		lContabCC	:= (mv_par06 == 1 )
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Transfere as Perguntas para variaveis de Memoria			      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTipoCont == 1 .Or. cTipoCont == 3
			If cPaisloc == "BRA"
				Pergunte( "GPE110D" , .F. )
				cPerg     := "GPE110D"
				cMes := Substr(mv_par01,1,2)
				cAno := Substr(mv_par01,3,4)
				cPeriodo	 := cAno+cMes
			
				
					lFolPgto    := ( mv_par02 == 1 .or. mv_par02 == 3 ) // Contabilizar Folha:1-Folha de Pgto;2-Folha de 13o Sal;3-Ambas
					lFol13Sl    := ( mv_par02 == 2 .or. mv_par02 == 3 ) // 
				If cTipoCont == 1
					lProvFer    := .F.
					lProv13o    := .F.
				EndIf
			Else
				Pergunte( "GPE110B" , .F. )
				cPerg     := "GPE110B"
				cProcesso	 := mv_par01
				cRoteiro	 := mv_par02
				cPeriodo	 := mv_par03
				cNumPgtoDe	 := mv_par04
				cNumPgtoAte := mv_par05
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Localizar o Periodo Atual do Roteiro Selecionado.                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			 	DbSelectArea( "RCH" )
				DbSetOrder( 4 )		// rch_filial + rch_proces + rch_roteir + rch_per + rch_numpag
				cFilRCH := xFilial( "RCH" )
				DbSeek( cFilRCH + cProcesso + cRoteiro + cPeriodo, .F. )
				If Eof()
					DbSeek( cFilRCH + cProcesso + cRotBlank + cPeriodo, .F. )
				EndIf
				If Eof()
					MsgInfo( OemToAnsi(STR0053) )	// "Os parámetros da Contabilizacao nao foram informados corretamente!"
					Break
				EndIf
		
				If cTipoCont == 1
					lProvFer    := .F.
					lProv13o    := .F.
				EndIf
				cMes := RCH->RCH_MES
				cAno := RCH->RCH_ANO
				If Empty(cMes)
					cMes := Substr(cPeriodo,5,2)
					cAno := Substr(cPeriodo,1,4)
				EndIf
			EndIf
			dDataRef := Ctod("01/" + cMes + "/" + cAno)
			cMesAnoCtab := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
		EndIf
	
		If cTipoCont == 2 .Or. cTipoCont == 3
			Pergunte( "GPE110C" , .F. )
			cPerg       := "GPE110C"
			cMesAnoProv := mv_par01
			lProvFer    := ( mv_par02 == 1 .or. mv_par02 == 3 ) // Provisao de Ferias
			lProv13o    := ( mv_par02 == 2 .or. mv_par02 == 3 ) // Provisao de 13o
			lCtabBxaFer := ( mv_par03 == 1 )                   // Cont.Bx.Ferias.Prov:1-Sim;2-Nao
			lCtabBxaRes := ( mv_par04 == 1 )                   // Cont.Bx.Res.Prov:1-Sim;2-Nao
			If cTipoCont == 2 //quando selecionou so provisao
				 dDataRef := Ctod("01/" + Left(cMesAnoProv,2) + "/" + Right(cMesAnoProv,4))
				 cMesAnoCtab := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
		   EndIf
		EndIf
	Else 
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega as Perguntas										            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	   If cTipo == "F"
		 	If cPaisLoc == "BRA"
			 	Pergunte( "GPE110F", .F. )
			 	cPerg      := "GPE110F"
				cTipoCont 	 := 1                    // Tipo de Contabilizacao: 1-Folha Pagamento;2-Provisao;3-Ambas
				lDigita    := ( mv_par01 == 1 )		// Mostra Lancamentos:1-Sim;2-Nao
				lAglut     := ( mv_par02 == 1 )		// Aglutina Lancamentos:1-Sim;2-Nao
				cFilConDe	 := mv_par03					// Filial De
				cFilConAte	 := mv_par04					// Filial Ate
				cMes := Substr(mv_par05,1,2)
				cAno := Substr(mv_par05,3,4)
				cPeriodo	:= cAno+cMes
			Else
				Pergunte( "GP110F", .F. )
			 	cPerg      := "GP110F"
				cTipoCont 	 := 1                    // Tipo de Contabilizacao: 1-Folha Pagamento;2-Provisao;3-Ambas
				lDigita    := ( mv_par01 == 1 )		// Mostra Lancamentos:1-Sim;2-Nao
				lAglut     := ( mv_par02 == 1 )		// Aglutina Lancamentos:1-Sim;2-Nao
				cFilConDe	 := mv_par03					// Filial De
				cFilConAte	 := mv_par04					// Filial Ate
				cProcesso	 := mv_par05
				cRoteiro	 := mv_par06
				cPeriodo	 := mv_par07
				cNumPgtoDe	 := mv_par08
				cNumPgtoAte := mv_par09
				cMes := Substr(cPeriodo,5,2)
				cAno := Substr(cPeriodo,1,4)
			EndIf
			dDataRef := Ctod("01/" + cMes + "/" + cAno)
			cMesAnoCtab := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
		ElseIf cTipo == "P"
			Pergunte( "GP110P" , .F. )
			cPerg      := "GP110P"
			cTipoCont 	 := 2                    // Tipo de Contabilizacao: 1-Folha Pagamento;2-Provisao;3-Ambas
			lDigita    := ( mv_par01 == 1 )		// Mostra Lancamentos:1-Sim;2-Nao
			lAglut     := ( mv_par02 == 1 )		// Aglutina Lancamentos:1-Sim;2-Nao
			cFilConDe	 := mv_par03					// Filial De
			cFilConAte := mv_par04					// Filial Ate
			cMesAnoProv := mv_par05								// MM/AAAA da Contabilizacao
			lProvFer   := ( mv_par06 == 1 .or. mv_par06 == 3 ) // Provisao de Ferias
			lProv13o   := ( mv_par06 == 2 .or. mv_par06 == 3 )	// Provisao de 13o. Salario
			lCtabBxaFer := ( mv_par07 == 1 )                    // Cont.Bx.Ferias.Prov:1-Sim;2-Nao
			lCtabBxaRes := ( mv_par08 == 1 )                    // Cont.Bx.Res.Prov:1-Sim;2-Nao
			cMes := Substr(cMesAnoProv,1,2)
			cAno := Substr(cMesAnoProv,3,4)
			dDataRef := Ctod("01/" + cMes + "/" + cAno)
			cMesAnoCtab := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
		ElseIf cTipo == "M"
			If cPaisloc == "BRA"
				Pergunte( "GPE110M" , .F. )
				cPerg      	:= "GPE110M"
				cTipoCont 	:= 3                    // Tipo de Contabilizacao: 1-Folha Pagamento;2-Provisao;3-Ambas
				lDigita    	:= ( mv_par01 == 1 )		// Mostra Lancamentos:1-Sim;2-Nao
				lAglut     	:= ( mv_par02 == 1 )		// Aglutina Lancamentos:1-Sim;2-Nao
				cFilConDe	:= mv_par03					// Filial De
				cFilConAte	:= mv_par04					// Filial Ate
				cMesAnoProv	:= mv_par05
				cMes := Substr(mv_par05,1,2)
				cAno := Substr(mv_par05,3,4)
				cPeriodo	:= cAno+cMes
			
				lProvFer    := ( mv_par06 == 1 .or. mv_par06 == 3 ) // Provisao de Ferias
				lProv13o    := ( mv_par06 == 2 .or. mv_par06 == 3 )	// Provisao de 13o. Salario
				lCtabBxaFer := ( mv_par07 == 1 )                    // Cont.Bx.Ferias.Prov:1-Sim;2-Nao
				lCtabBxaRes := ( mv_par08 == 1 )                    // Cont.Bx.Res.Prov:1-Sim;2-Nao
			Else
				Pergunte( "GP110M" , .F. )
				cPerg      := "GP110M"
				cTipoCont 	 := 3                    // Tipo de Contabilizacao: 1-Folha Pagamento;2-Provisao;3-Ambas
				lDigita    := ( mv_par01 == 1 )		// Mostra Lancamentos:1-Sim;2-Nao
				lAglut     := ( mv_par02 == 1 )		// Aglutina Lancamentos:1-Sim;2-Nao
				cFilConDe	 := mv_par03					// Filial De
				cFilConAte	 := mv_par04					// Filial Ate
				cProcesso	 := mv_par05
				cRoteiro	 := mv_par06
				cPeriodo	 := mv_par07
				cNumPgtoDe	 := mv_par08
				cNumPgtoAte := mv_par09
				cMesAnoProv := mv_par10								// MM/AAAA da Contabilizacao
				lProvFer    := ( mv_par11 == 1 .or. mv_par11 == 3 ) // Provisao de Ferias
				lProv13o    := ( mv_par11 == 2 .or. mv_par11 == 3 )	// Provisao de 13o. Salario
				lCtabBxaFer := ( mv_par12 == 1 )                    // Cont.Bx.Ferias.Prov:1-Sim;2-Nao
				lCtabBxaRes := ( mv_par13 == 1 )                    // Cont.Bx.Res.Prov:1-Sim;2-Nao
				cMes := Substr(cPeriodo,5,2)
				cAno := Substr(cPeriodo,1,4)
			EndIf
			dDataRef := Ctod("01/" + cMes + "/" + cAno)
			cMesAnoCtab := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
		ElseIf cTipo == "R"
		 	Pergunte( "GPE110A", .F. )
		 	cPerg     := "GPE110A"
			cTipoCont 	:= mv_par01            // Tipo de Contabilizacao: 1-Folha Pagamento;2-Provisao;3-Ambas
			lDigita   := ( mv_par02 == 1 )		// Mostra Lancamentos:1-Sim;2-Nao
			lAglut    := ( mv_par03 == 1 )		// Aglutina Lancamentos:1-Sim;2-Nao
			cFilConDe	:= mv_par04				// Filial De
			cFilConAte	:= mv_par05				// Filial Ate
			lContabCC	:= (mv_par06 == 1 )
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Transfere as Perguntas para variaveis de Memoria			      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If cTipoCont == 1 .Or. cTipoCont == 3
				If cPaisLoc <> "MEX"
					Pergunte( "GPE110D" , .F. )
					cPerg		:= "GPE110D"
					cMes		:= Substr(mv_par01,1,2)
					cAno		:= Substr(mv_par01,3,4)
					cPeriodo	:= cAno+cMes
				
					If cTipoCont == 1
						lFolPgto    := ( mv_par02 == 1 .or. mv_par02 == 3 ) // Contabilizar Folha:1-Folha de Pgto;2-Folha de 13o Sal;3-Ambas
						lFol13Sl    := ( mv_par02 == 2 .or. mv_par02 == 3 ) // 
		
						lProvFer    := .F.
						lProv13o    := .F.
					EndIf
				Else
					Pergunte( "GPE110B" , .F. )
					cPerg		:= "GPE110B"
					cProcesso	:= mv_par01
					cRoteiro	:= mv_par02
					cPeriodo	:= mv_par03
					cNumPgtoDe	:= mv_par04
					cNumPgtoAte	:= mv_par05
					
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Localizar o Periodo Atual do Roteiro Selecionado.                ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				 	DbSelectArea( "RCH" )
					DbSetOrder( 4 ) // rch_filial + rch_proces + rch_roteir + rch_per + rch_numpag
					cFilRCH := xFilial( "RCH" )
					MsSeek( cFilRCH + cProcesso + cRoteiro + cPeriodo, .F. )
					If Eof()
						MsSeek( cFilRCH + cProcesso + cRotBlank + cPeriodo, .F. )
					EndIf
					If Eof()
						Conout( OemToAnsi(STR0053) )	// "Os parámetros da Contabilizacao nao foram informados corretamente!"
						Break
					EndIf
			
					If cTipoCont == 1
						lProvFer    := .F.
						lProv13o    := .F.
					EndIf
					cMes := RCH->RCH_MES
					cAno := RCH->RCH_ANO
					If Empty(cMes)
						cMes := Substr(cPeriodo,5,2)
						cAno := Substr(cPeriodo,1,4)
					EndIf
				EndIf
				
				dDataRef	:= Ctod("01/" + cMes + "/" + cAno)
				cMesAnoCtab	:= StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
			EndIf		
			If cTipoCont == 2 .Or. cTipoCont == 3
				Pergunte( "GPE110C" , .F. )
				cPerg       := "GPE110C"
				cMesAnoProv := mv_par01
				lProvFer    := ( mv_par02 == 1 .or. mv_par02 == 3 ) // Provisao de Ferias
				lProv13o    := ( mv_par02 == 2 .or. mv_par02 == 3 ) // Provisao de 13o
				lCtabBxaFer := ( mv_par03 == 1 )                   // Cont.Bx.Ferias.Prov:1-Sim;2-Nao
				lCtabBxaRes := ( mv_par04 == 1 )                   // Cont.Bx.Res.Prov:1-Sim;2-Nao
				If cTipoCont == 2 //quando selecionou so provisao
					 dDataRef := Ctod("01/" + Left(cMesAnoProv,2) + "/" + Right(cMesAnoProv,4))
					 cMesAnoCtab := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
			   EndIf
			EndIf
		Endif
		
		If cTipo $ "F|M"
			If cPaisLoc == "BRA"
				If cTipoCont == 1
					lProvFer    := .F.
					lProv13o    := .F.
				EndIf
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Localizar o Periodo Atual do Roteiro Selecionado.                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			 	DbSelectArea( "RCH" )
				DbSetOrder( 4 )		// rch_filial + rch_proces + rch_roteir + rch_per + rch_numpag
				cFilRCH := xFilial( "RCH" )
				DbSeek( cFilRCH + cProcesso + cRoteiro + cPeriodo, .F. )
				If Eof()
					DbSeek( cFilRCH + cProcesso + cRotBlank + cPeriodo, .F. )
				EndIf
				If Eof()
					MsgInfo( OemToAnsi(STR0053) )	// "Os parámetros da Contabilizacao nao foram informados corretamente!"
					Break
				EndIf
		
				If cTipoCont == 1
					lProvFer    := .F.
					lProv13o    := .F.
				EndIf
				
				cMes := RCH->RCH_MES
				cAno := RCH->RCH_ANO
				If Empty(cMes)
					cMes := Substr(cPeriodo,5,2)
					cAno := Substr(cPeriodo,1,4)
				EndIf
			EndIf
			dDataRef := Ctod("01/" + cMes + "/" + cAno)
			cMesAnoCtab := StrZero(Month(dDataRef),2) + StrZero(Year(dDataRef),4)
		Endif
	Endif  
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Validar o Intervalo de Nro. de Pagamentos para Processamento     ³
	//³ do Tipo Folha de Pagamento.                 					       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If cTipoCont != 2
    	If cPaisloc == "BRA"
			cFilRCH := xFilial( "RCH" )
			cJoin += "%"
			cJoin += FWJoinFilial( "SRY", "RCH" )
			cJoin += "%"
			BeginSQL Alias cAliasTmp
				SELECT * FROM  %table:RCH% RCH
				INNER JOIN  %table:SRY% SRY on %exp:cJoin% AND RY_CALCULO = RCH_ROTEIR AND SRY.%notDel%  and RY_CONTAB ='1'
				WHERE RCH.%notDel% 
				AND RCH_FILIAL= %exp:cFilRCH%
				AND RCH_PER =%exp:cPeriodo%	
			EndSQL
	
			While !(cAliasTmp)->(Eof())
				cProcesso := (cAliasTmp)->RCH_PROCES
			    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			    //³ Verifica o Periodo de Processamento da Folha com o Periodo de    ³
			    //³ Contabilizacao 												             ³
			    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	
			    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			    //³ Verifica se Deve Contabilizar Somente Apos Fechamento Conforme Parametro ³     
			    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			    If lContFech .And. Empty( (cAliasTmp)->RCH_DTFECH ) .And. (cAliasTmp)->RCH_ROTEIR == fGetCalcRot('1') .And. lFolPgto 
				    aAdd( aLogIncon, (cAliasTmp)->( RCH_PROCES + "  " + RCH_ROTEIR + "  " +  RCH_PER + "  " + RCH_NUMPAG ) + "  " + STR0043 )  //Fechamento do periodo nao foi processado
					(cAliasTmp)->(dbSkip())
		  	        Loop
			    EndIf
	
			    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			    //³ Verifica se o Periodo ja nao esta contabilizado.                         ³
			    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			    If !Empty( (cAliasTmp)->RCH_DTCONT )
	            	lCont := .T.
			    EndIf
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Array com os periodos a serem Processados.                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If Empty( (cAliasTmp)->RCH_DTFECH )
			 		If Ascan(aPerAberto , {|x| x[1]+x[2] == (cAliasTmp)->RCH_PER+(cAliasTmp)->RCH_NUMPAG}) <= 0
				 		aAdd(aPerAberto	, { (cAliasTmp)->RCH_PER, (cAliasTmp)->RCH_NUMPAG })
				 	EndIf
		 		Else
			 		If Ascan(aPerFechado, {|x| x[1]+x[2] == (cAliasTmp)->RCH_PER+(cAliasTmp)->RCH_NUMPAG}) <= 0
		 				aAdd(aPerFechado, { (cAliasTmp)->RCH_PER, (cAliasTmp)->RCH_NUMPAG })
					Endif
				EndIf
				aAdd(aPerCalc, { (cAliasTmp)->RCH_FILIAL, (cAliasTmp)->RCH_PER, (cAliasTmp)->RCH_NUMPAG, (cAliasTmp)->RCH_ROTEIR, (cAliasTmp)->RCH_PROCES })
				Semana += If( !Empty( Semana), "/" + (cAliasTmp)->RCH_NUMPAG, (cAliasTmp)->RCH_NUMPAG )
				If MesAno(dDataBase) <> MesAno(stod((cAliasTmp)->RCH_DTFIM))
					dDataBase := LastDay(stod((cAliasTmp)->RCH_DTFIM))
				EndIf
				
	
		  		(cAliasTmp)->(dbSkip())
		  	EndDo
		  	(cAliasTmp)->(dbCloseArea())
		  	If lCont .And. !( IsBlind() )
		  		If !MsgYesNo(OemToAnsi( STR0098), OemToAnsi(STR0044))	// "Este período já foi contabilizado. Deseja continuar ?" ### "Aten‡„o!"
		  			aAdd( aLogIncon, STR0049 ) //Periodo ja foi contabilizado
					Break
				EndIf
			EndIf
		  	
		Else
			  //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			  //³ Localizar o Periodo Atual do Roteiro Selecionado.                ³
			  //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			  fPerAtual( @aPerAtual , cRoteiro )
	
	    	  nIniPagto := Val( cNumPgtoDe )
	    	  nFimPagto := If( Val( cNumPgtoAte ) <= 0, 1, Val( cNumPgtoAte ) )
			  For nX := nIniPagto To nFimPagto
	  			   cNumPgto := If( nX > 0, StrZero( nX, nTamNumPgto ), Space( nTamNumPgto ) )
	
				   DbSetOrder( 1 )		// rch_filial + rch_proces + rch_per + rch_numpag + rch_roteir
				   DbSeek( cFilRCH + cProcesso + cPeriodo + cNumPgto + cRoteiro, .F. )
				   If RCH->( Eof() )
					    DbSeek( cFilRCH + cProcesso + cPeriodo + cNumPgto + cRotBlank, .F. )
				   EndIf
				
				   If RCH->( !Eof() )
					    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					    //³ Verifica o Periodo de Processamento da Folha com o Periodo de    ³
					    //³ Contabilizacao 												             ³
					    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				 	    If Empty(aPerAtual)
				 	        aAdd( aLogIncon, STR0060) //"Não foi encontrado período de contabilização aberto."
				 	    ElseIf ( cPeriodo + cNumPgto ) > ( aPerAtual[ 1, 1 ] + aPerAtual[ 1,2 ] )
					        aAdd( aLogIncon, RCH->( RCH_PER + "  " + RCH_NUMPAG ) + "  " + STR0047 ) //"Periodo de Contabilizacao maior que o Periodo Atual."
				  	        Loop
				  	    EndIf
	
					    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					    //³ Verifica se Deve Contabilizar Somente Apos Fechamento Conforme Parametro ³
					    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					    If lContFech .And. Empty( RCH->RCH_DTFECH )
						     aAdd( aLogIncon, RCH->( RCH_PER + "  " + RCH_NUMPAG ) + "  " + STR0043 )  //Fechamento do periodo nao foi processado
						     Loop
					    EndIf
	
					    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					    //³ Verifica se o Periodo ja nao esta contabilizado.                         ³
					    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					    If !Empty( RCH->RCH_DTCONT )
	                    	If !(cPaisLoc $ "MEX" .And. lSchedule) .And. !MsgYesNo(OemToAnsi( STR0098), OemToAnsi(STR0044))	// "Este período já foi contabilizado. Deseja continuar ?" ### "Aten‡„o!"     				    
						         aAdd( aLogIncon, RCH->( RCH_PER + "  " + RCH_NUMPAG ) + "  " + STR0049 ) //Periodo ja foi contabilizado
						         Loop
						     EndIf     
					    EndIf
					
						 If RCH->RCH_DTINI < dDtPerIni
					   		  dDtPerIni := RCH->RCH_DTINI
						 EndIf
						 If RCH->RCH_DTFIM < dDtPerFim
							  dDtPerFim := RCH->RCH_DTFIM
						 EndIf
		
						 //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						 //³ Array com os periodos a serem Processados.                               ³
						 //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						 If Empty( RCH->RCH_DTFECH )
					 		  aAdd(aPerAberto	, { RCH->RCH_PER, RCH->RCH_NUMPAG })
				 		 Else
			 				  aAdd(aPerFechado, { RCH->RCH_PER, RCH->RCH_NUMPAG })
		 				 EndIf
	 					 aAdd(aPerCalc, { RCH->RCH_FILIAL, RCH->RCH_PER, RCH->RCH_NUMPAG, RCH->RCH_ROTEIR, RCH->RCH_PROCES })
						 Semana += If( !Empty( Semana), "/" + RCH->RCH_NUMPAG, RCH->RCH_NUMPAG )
						 dDataBase := RCH->RCH_DTFIM
				  	EndIf
			Next nX
		EndIf
		  
	EndIf


	/*
	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	³ Verifica parametros contabilizacao						   ³
	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
	If FindFunction("CTBINTRAN")
		lCtbInTran := CtbInTran( 0, lDigita )
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada para consistencia adicionais de usuario     ³
	//³ antes da execucao da contabilizacao.						         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lGP110VLD
		If Execblock("GP110VLD",.F.,.F.)
			If !lMultSRZ
				ReabSRZ()
			EndIf		
		   	Break			 
		EndIf
    EndIf
    
    //-- Cria tabela de log para uso em procedure
	If lSPGP .And. "C" $ cGPCTLOG
		GP110TabLog( .T., @cTbLog)
	EndIf
   
   	//Efetua verificação na contabilidade se periodo esta aberto para contabilização
	If !CtbValiDt(,dDataRef ,,,,{"GPE001"},)
		Return 
	EndIf   

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Gerar arquivo SRZ com os lancamentos contabeis			      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cTipoCont != 2
		If lContFech .And. Empty(aLogIncon)
			If cPaisloc == "BRA" .And. lDicInter
				lGerouFol := fGeraFolSRZ(1, {1,2,3}	,cMesAnoCtab ,aPerAberto, aPerFechado, Nil, cRetSqlName, cTbLog)
			Else
				lGerouFol := fGeraFolSRZ(1,aTpContr,cMesAnoCtab, aPerAberto, aPerFechado, Nil, cRetSqlName, cTbLog)
			EndIf
		Elseif lContFech .And. !Empty(aLogIncon) 
			lGerouFol := .F.
		Else
			If cPaisloc == "BRA" .And. lDicInter
				lGerouFol := fGeraFolSRZ(1, {1,2,3}	,cMesAnoCtab, aPerAberto, aPerFechado, Nil, cRetSqlName, cTbLog)
			Else
				lGerouFol := fGeraFolSRZ(1, aTpContr,cMesAnoCtab, aPerAberto, aPerFechado, Nil, cRetSqlName, cTbLog)
			EndIf
		EndIf
		
		If !lGerouFol
			Break
		EndIf
	EndIf

	//-- Tabela de Log para Procedure 
	If lSPGP .And. "C" $ cGPCTLOG
		If Select((cTbLog)) > 0
			(cTbLog)->( dbCloseArea() )   
		Endif
	Endif  
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inicializa as constantes e chama a funcao fGeraProvSrz()	   |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lProvFer .Or. lProv13o .Or. (lPLRPE .And. (lProvFer .Or. lProv13o ) ) 
		If !Empty(cMesAnoProv)
			GpeProvisao(STR0023,cMesAnoProv,,,6,,,cRetSqlName, cMatDe, cMatAte) // "Geracao de Lancamentos - Provisao"
		Else
			Help( , , 'HELP', , OemToAnsi(STR0100), 1, 0 )//"Mês de contabilização não informado!"
			break
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona arquivos na Ordem 1 para a contabilizacao 		   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SRA->( dbSetOrder( 01 ) )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define o Alias do arquivo de Centro de Custo e Seleciona a or³
	//³ dem														         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cAliasCc := "CTT"
	(cAliasCc)->( dbSetOrder( 01 ) )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Seleciona a Ordem 1 para o arquivo de Lancamentos Padroes    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	CT5->( dbSetOrder( 01 ) )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta Bloco para o aScan no aSrvLanc                		   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	bSrvLancAsc	:= { |x|;
					  		(;
					  			( x[ aSrvLanc[ __aSrvReturn_nPosFil__ ] ] == xFilial("SRV",RZ_FILIAL) ) .or. ;
					  			( Empty( x[ aSrvLanc[ __aSrvReturn_nPosFil__ ] ] ) );
					  		) .and. ;
					  		( x[ aSrvLanc[ __aSrvReturn_nPosPD__ ] ] == RZ_PD );
					}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta Bloco para o aScan no aSrvPco                		      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	bSrvPcoAsc	:= { |x|;
					  		(;
					  			(x[ aSrvPco[ __aSrvReturn_nPosFil__ ] ] == xFilial("SRV", RZ_FILIAL) );
					  		) .and. ;
					  		( x[ aSrvPco[ __aSrvReturn_nPosPD__ ] ] == RZ_PD );
					}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Carrega as Filiais que serao utilizadas para a Contabilizacao³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aFiliais := Gpem110FilCar( cEmpAnt, cFilConDe , cFilConAte  )
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Redefine o Conteudo das variavels cFilConDe e cFilConAte quan³
	//³do modo de acesso do SRZ for compartilhado					      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( lSrzCompart )
		cFilConDe	:= xFilial( "SRZ" , cFilConDe 	)
		cFilConAte	:= xFilial( "SRZ" , cFilConAte	)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Acertar valores do SRZ antes da contabilizacao               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( ExistBlock( "GP110ACT" ) )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Existem Clientes que, para contabilizar Todas as filiais    em³
		//³uma, mesmo com o Modo de Acesso do SRZ igual a Exclusivo, alte³
		//³ram o conteudo do campo RZ_FILIAL para branco (Simulando um ar³
		//³quivo compartilhado). Para prever essas situacoes, e, se o pon³
		//³ponto de Entrada abaixo retornar conteudo correspondente a  fi³
		//³lial a ser pesquisada e Contabilizada Array com dois Elementos³
		//³Obs.: Recomendamos o uso da funcao SRZFilReplace, caso seja ne³
		//³cessario estar dando Replace no campo RZ_FILIAL. A funcao deve³
		//³ra ser chamada da seguinte forma:                             ³
		//³SRZFilReplace( cFilReplace , [ bCondReplace ] )               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aFilContab := ExecBlock( "GP110ACT" , .F. , .F. )
		If ( ( ValType( aFilContab ) == "A" ) .and. ( Len( aFilContab ) == 2 ) )
			cFilReplace := aFilContab[ 01 ]
			cFilContab	 := aFilContab[ 02 ]
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se o Retorno do ExecBlock for Caracter e o Tamanho for Equiva³
			//³ Lente ao Tamanho do RZ_FILIAL								         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ( ( ValType( cFilReplace ) == "C" ) .and. ( Len( cFilReplace ) == TamSx3("RZ_FILIAL")[1] ) ) .and.;
			   ( ( ValType( cFilContab  ) == "C" ) .and. ( Len( cFilContab  ) == TamSx3("RZ_FILIAL")[1] ) ) 
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se a Filial Onde sera Efetuada a Contabilizacao   eh³
				//³ Valida													               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ( aScan( aFiliais , { |x| x[1] == cFilContab } ) == 0.00 )
		 			cInconsist := ( STR0039 + cFilContab )	//"A Filial: " 
		 			cInconsist += STR0040					//",Retornada pelo Ponto de Entrada GP110ACT eh Invalida."
		 			aAdd( aLogIncon , cInconsist )
		 			cInconsist := STR0041					//"Informe uma Filial valida para que possa ocorrer a contabilizacao."
					aAdd( aLogIncon , cInconsist )
					If !lMultSRZ
						ReabSRZ()
					EndIf
					Break
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Assume a Filial Retornada pelo ExecBlock                     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				cFilConAte := ( cFilConDe := cFilReplace )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Simulando o SRZ compartilhado                                ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lSrzCompart	:= .T.
			EndIf
		EndIf
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Carrega Regua de Processamento                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( lGpem110ExecInRemote )
		ProcRegua( ( SRZ->( RecCount() ) + 1 ) )
	EndIf	

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define o Bloco para totalizacao                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	bTotal := { || ;
	  				RodaProva(nHdlPrv,nTotal) ,;
	  				cA100Incl(cArquivo,nHdlPrv,3,cLote,lDigita,lAglut);
	  		   }	

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Percorre Todas as Filiais Selecionadas nos Parametros De/Ate ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nFiliais := Len( aFiliais )
	For nFilial := 1 To nFiliais
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Altera o Conteudo de cFilAnt                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty( cFilContab )
			cFilAnt := cFilContab
		Else
			cFilAnt := aFiliais[ nFilial , 01 ]
		EndIf
		
		cItemClvl	:= GetMvRH( "MV_ITMCLVL", .F., "2" ,cFilAnt)  //Conteudo do parametro
		lItemClvl	:= cItemClvl $ "1*3"  // Define se trabalha com item contábil e classe de valor

		
		lCTBok := .T.
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega conteudo dos parametros                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cMvCPosSrv	:= GetMvRH("MV_CPOSSRV")
		cMvCPosSrv	:= If(Empty( cMvCPosSrv ), "S", cMvCPosSrv) 
		lMvCPosSrv	:= (cMvCPosSrv =="S")
		lMvCPosLcp	:= ( GetMvRH("MV_CPOSLCP",NIL,"S") == "S" )
		lMvCPosCtt	:= ( GetMvRH("MV_CPOSCC" ,NIL,"1" ) == "1" ) // 1-Posiciona no c.custo; 2-Nao posiciona no c.custo(utiliza PE)
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Reincializa aCT5 a Cada Filial                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !( lCt5Compart )
			aCT5 := {}
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Reincializa aPadrao a Cada Filial                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( !( lCt5Compart ) )
			aPadrao  := {}			
			aLancPCO := {}
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Posiciona o SM0 na Filial Corrente                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SM0->( MsGoto( aFiliais[ nFilial , 02 ] ) )
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega Regua de Processamento                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( Empty( aSrvLanc ) .or. !( lSrvCompart ) )
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Carrega as Verbas Vs Lancamentos Padroes. Se nao Existir,  Ge³
			//³ ra Log													               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !( lSrvLancOk := ( aSrvLanc := ( Gpem110SrvLanc( cFilAnt , cFilAnt , @aPadrao , lCtbInUse ) ) )[__aSrvReturn_TudoOK__] )
				cInconsist := ( STR0025 + cFilAnt )	//" - Nao Existem Verbas a serem contabilizadas na filial: "
				cInconsist += STR0026				   //" - Verifique se os Lancamentos Padroes estao definidos."
				aAdd( aLogIncon , cInconsist )				
				lCTBok	:=	.F.
			Else
			   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Reinicializa lSelectPds									            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lSelectPds := .T.

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Monta String Com as Verbas que serao Utilizadas na  Contabili³
				//³ zacao														               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				cSrvPds := ""
				nVerbas := Len( aSrvLanc[ __aSrvReturn_aCols__ ] )
				For nVerba := 1 To nVerbas
					cSrvPds += ( "'" + aSrvLanc[ __aSrvReturn_aCols__ , nVerba , aSrvLanc[ __aSrvReturn_nPosPD__ ] ] + "'," )
				Next nVerba

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Retira a Ultima Virgula									            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				cSrvPds := SubStr( cSrvPds , 1 , Len( cSrvPds ) - 1 )
			EndIf
		EndIf
	
		//Logica para carregar lancamentos do PCO
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega Regua de Processamento                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lIntePco 
			 If ( Empty( aSrvPCO ) .or. !( lSrvCompart ) ) 
				  //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				  //³ Carrega as Verbas Vs Lancamentos PCO. Se nao Existir,  Ge³
				  //³ ra Log							 					                ³
				  //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				  If !( lSrvPcoOk := ( aSrvPCO := ( Gpem110PCOSrv( cFilAnt , cFilAnt , @aLancPCO) ) )[__aSrvReturn_TudoOK__] )
					   cInconsist := ( STR0025 + cFilAnt )	//" - Nao Existem Verbas a serem contabilizadas na filial: "
					   cInconsist += STR0093               //" - Verifique se os Lancamentos Padroes do PCO estao definidos. 
					   aAdd( aLogIncon , cInconsist )				
					   lPCOok	:=	.F.
				  EndIF
			 EndIF
		Else
			lPCOok	:=	.F.
			lSrvPcoOk := .F.
		Endif
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Se nao Conseguiu Carregar as Verbas x Lancamentos Padroes para³
		//³a Filial pesquisa a proxima								            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !( lSrvLancOk )
			cInconsist := ( STR0025 + cFilAnt )	//" - Nao Existem Verbas a serem contabilizadas na filial: "
			cInconsist += STR0026				   //" - Verifique se os Lancamentos Padroes estao definidos."
			If ( aScan( aLogIncon , { |x| ( x == cInconsist ) } ) == 0.00 )
				aAdd( aLogIncon , cInconsist )
			EndIf
			lCTBok := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Se nao Conseguiu Carregar as Verbas x Lancamentos Padroes PCOpara ³
		//³a Filial pesquisa a proxima						     		             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !(lSrvPcoOK) .And. lIntePco
			cInconsist := ( STR0025 + cFilAnt )	//" - Nao Existem Verbas a serem contabilizadas na filial: "
			cInconsist += STR0093				   //" - Verifique se os Lancamentos Padroes do PCO estao definidos."
			IF ( aScan( aLogIncon , { |x| ( x == cInconsist ) } ) == 0.00 )
				aAdd( aLogIncon , cInconsist )
			EndIF
			lPCOok := .F.
		EndIF
		
		If !lCTBOk .AND. !lPCOok
			Loop
		Endif 
		
		If lCTBok	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Carrega o Numero do Lote Contabil                            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If Empty( cLote := Gpem110LoteCont( "GPE" , cFilAnt ) )
				cInconsist := ( STR0027 + cFilAnt )	//" - Nao Existe o Lote Contabil GPE para a Filial: "
				cInconsist += STR0028					//" - Verifique no SX5 (Tabelas:Tabela 09) a Existencia do Lote."
				aAdd( aLogIncon , cInconsist )				
				Loop
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ponto Entrada Apos carregar o Numero do Lote contabil        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
		If lGP110ANL
		   EXECBLOCK("GP110ANL",.F.,.F.)
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa Variaveis                                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nContador := 0
		nTotal    := 0
		nHdlPrv   := 0
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Percorre todos os Registros do SRZ para a Filial corrente	   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea( "SRZ" )
		SRZ->( dbSeek( IF( !( lSrzCompart ) , cFilAnt , cFilConDe ) , .T. ) )
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa a Mensagem da Regua de Processamento			      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( lGpem110ExecInRemote )
			IncProc( OemToAnsi( STR0018 + cFilAnt ) ) //"Processando a Contabilizacao para a Filial: "
		EndIf
	
		Begin Transaction

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Percorre todos os Registros do SRZ para a Filial corrente	   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		While SRZ->( !Eof() .and. ( RZ_FILIAL == IF( lSrzCompart , cFilConDe , cFilAnt ) ) )
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Movimentando Regua de Processamento                          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ( lGpem110ExecInRemote )
				IncProc()
			EndIf

			If ( lContabCC .and.  !( SRZ->RZ_MAT $ cZzsInRZMat ) ) .or.  ;  	//-- Despreza os RZ_MAT com 'zz..' quando cEncInss == "S"
			   (!lContabCC .and.  ( SRZ->RZ_MAT $ cZzsInRZMat ) ) 			//-- Despreza os RZ_MAT sem 'zz..' quando cEncInss == "S"
				SRZ->( dbskip() ) 
				Loop
			Endif
						
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Posicona SRA na Matricula que esta sendo processada		      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   SRA->( MsSeek( SRZ->( RZ_FILIAL + RZ_MAT ) ) )
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Nao Contabiliza para Filial, CC e PD iguais a zz... 		   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !lItemClvl				
				If SRZ->( ( RZ_FILIAL $ cZzsInRZFil ) .or. ( RZ_CC $ cZzsInRZCc ) .or. ( RZ_PD $ cZzsInRZPd ))
					SRZ->( dbskip() )
					Loop
				EndIf
			Else	
				If SRZ->( ( RZ_FILIAL $ cZzsInRZFil ) .or. ( RZ_CC $ cZzsInRZCc ) .or. ( RZ_PD $ cZzsInRZPd )  .or. (RZ_ITEM $ cZzsInRZIt) .or. (RZ_CLVL $ cZzsInRZCl))
					SRZ->( dbskip() )
					Loop
				EndIf
			EndIf	
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Se Nao Solicitou a Geracao da Folha, ou Se Solicitou e nao con³
			//³seguiu Gerar a Folha										            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ( cTipoCont != 1 .or. ( cTipoCont != 1 .and. !( lGerouFol ) ) )
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Despreza Todos os Lancamentos para o Tipo Folha "FL"          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ( SRZ->RZ_TIPO == "FL" )
					SRZ->( dbskip() )
					Loop
				EndIf
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se Gerou as Provisoes de Ferias               	      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !( lProvFer ) 
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Despreza Todos os Lancamentos para Provisao de Ferias "PD"    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ( SRZ->RZ_TIPO == "PF" )
					SRZ->( dbskip() )
					Loop
				EndIf
			EndIf
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se Gerou as Provisoes de 13o. Salario         	      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   If !( lProv13o )
				 //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				 //³Despreza Todos os Lancamentos para Provisao 13o.Salario "PD"  ³
				 //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		       If ( SRZ->RZ_TIPO == "PD" )
					  SRZ->( dbskip() )
					  Loop
		       EndIf
		   EndIf
	
		   If !( lPLRPE )
				If ( SRZ->RZ_TIPO == "PP" )
					  SRZ->( dbskip() )
					  Loop
				EndIf
			EndIf

	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Carrega o Lancamento Padrao da Verba						         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cCodPadrao	:= cPadrao :=  ""
			fChkPd(SRZ->RZ_FILIAL,SRZ->RZ_PD,@cCodPadrao)
			lCtbOk	 	:= !Empty(cCodPadrao)
			
			If lIntePco
				lPCOOk := ( ( nPosPCO := SRZ->( aScan( aSrvPCO[ __aSrvReturn_aCols__ ] , bSrvPcoAsc ) ) ) > 0.00 )
			Else
				lPCOOk := .F.
			EndIf
			
			If !lCTBok .And. !lPCOok 
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Nao Contabiliza Verbas sem Lancamento Padrao				      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				SRZ->( dbskip() )
			   Loop
			EndIF
			
			IF lCTBok
				cPadrao := cCodPadrao 

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se deve Posicionar o SRV. O posisionamento eh  desne³
				//³ cessario uma vez que ja se obteve o Lancamento Padrao para  a³
				//³ verba. Foi mantido apenas para compatibilidade               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			    If ( lMvCPosSrv )	
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Posiciona no SRV                    						         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					SRV->( MsSeek( xFilial("SRV",SRZ->RZ_FILIAL) + SRZ->RZ_PD ) )
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se Deve Posicionar o Lancamento Padrao. O  Posiciona³
				//³ mento no Lancamento Padrao eh Garantido pela Funcao DetProva.³
				//³ Sendo assim, aqui ele se torna descecessario. Foi mantido ape³
				//³ nas para compatibilidade.									         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ( lMvCPosLcp )	
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Posiciona no Lancamento Padrao      						         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					CT5->( MsSeek( xFilial("CT5",SRZ->RZ_FILIAL) + cPadrao ) )
				EndIf
			EndIf

			If lIntePco .And. lPCOok
				cLancPCO := aSrvPCO[ __aSrvReturn_aCols__ , nPosPCO , aSrvPco[ __aSrvReturn_nPosLctop__ ] ]
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se deve Posicionar o SRV. O posisionamento eh  desne³
				//³ cessario uma vez que ja se obteve o Lancamento Padrao para  a³
				//³ verba. Foi mantido apenas para compatibilidade               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			    If ( lMvCPosSrv )	
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Posiciona no SRV                    						         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				    SRV->( MsGoto( aSrvPCO[ __aSrvReturn_aRecnos__ , nPosPCO ] ) )
				EndIF
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se deve Posicionar o centro de custo (CTT ou SI3).  ³
			//³ Se for utilizado o ponto de entrada GP110QRY o posicionamento³
			//³ do centro de custo eh desnecessario                          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   If ( lMvCPosCtt )	
				  //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				  //³ Posicona Centro de Custo que esta sendo processado    	     ³
				  //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   	  	  If !( ( cAliasCc )->( MsSeek( SRZ->( xFilial( cAliasCc , RZ_FILIAL ) + RZ_CC ) , .F. ) ) )
					   cInconsist := STR0029 + SRZ->RZ_CC + STR0030 + cFilAnt + STR0031 + cAliasCc +"."	//" - O Centro de Custo: "###" da Filial: "###" nao foi encontrado no: "
					   cInconsist += STR0032 //" - Devera ser Cadastrado para que possa ocorrer a contabiliacao."
					   If ( aScan( aLogIncon , { |x| ( x == cInconsist ) } ) == 0.00 )
						   aAdd( aLogIncon , cInconsist )
					   EndIf
					   SRZ->( dbskip() )
					   Loop
		   	 	  EndIf
         EndIf
	   	  	
	   	  	If lItemClvl .And. cItemClvl $ "1"
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Posiciona Item Contabil que esta sendo processado    	      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   	  	If !( ( "CTD" )->( MsSeek( SRZ->( xFilial( "CTD"	 , RZ_FILIAL ) + RZ_ITEM ) , .F. ) ) )
					cInconsist := STR0054 + SRZ->RZ_ITEM + STR0030 + cFilAnt + STR0031 + "CTD" +"."	//" - O Item contabil : "###" da Filial: "###" nao foi encontrado no: "
					cInconsist += STR0032																//" - Devera ser Cadastrado para que possa ocorrer a contabiliacao."
					If ( aScan( aLogIncon , { |x| ( x == cInconsist ) } ) == 0.00 )
						aAdd( aLogIncon , cInconsist )
					EndIf
					SRZ->( dbskip() )
					Loop
		   	  	EndIf
	            
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Posiciona Classe de Valor que esta sendo processado    	      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   	  	If !( ( "CTH" )->( MsSeek( SRZ->( xFilial( "CTH"	 , RZ_FILIAL ) + RZ_CLVL ) , .F. ) ) )
					cInconsist := STR0055 + SRZ->RZ_CLVL + STR0030 + cFilAnt + STR0031 + "CTH" +"."	//" - A Classe de Valor: "###" da Filial: "###" nao foi encontrado no: "
					cInconsist += STR0032 //" - Devera ser Cadastrado para que possa ocorrer a contabiliacao."
					If ( aScan( aLogIncon , { |x| ( x == cInconsist ) } ) == 0.00 )
						aAdd( aLogIncon , cInconsist )
					EndIf
					SRZ->( dbskip() )
					Loop
		   	  	EndIf
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Incrementa o Contador de Lancamentos        				      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			
			If ( ( ++nContador ) == 1 )
				nHdlPrv := HeadProva(cLote,"GPEM110",Substr(cUsuario,7,6),@cArquivo)
			EndIf
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Chamada a DetProva                          				      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			dbSelectArea( "SRZ" )
			nTotal += DetProva(nHdlPrv, cPadrao, "GPEM110", cLote,,,,,, @aCT5)
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Proximo Lancamento                          				      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SRZ->( dbskip() )	
			
		EndDo
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gravar a data de Contabilizacao no Periodo  				      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nX := 1 To Len(aPerCalc)
			DbSelectArea( "RCH" )
			DbSetOrder( RetOrdem( "RCH", "RCH_FILIAL+RCH_PROCES+RCH_PER+RCH_NUMPAG+RCH_ROTEIR") )	// Ordem 1
			DbSeek( aPerCalc[nX,1] + aPerCalc[nX,5] + aPerCalc[nX,2] + aPerCalc[nX,3] + aPerCalc[nX,4] )
			If !Eof()
				RCH->( RecLock( "RCH" , .F. ) )
				RCH->RCH_DTCONT := dDataBase
				RCH->( MsUnLock() )
			EndIf
		Next nX

		If lCtbInTran // Contabiliza na Transacao (param.contabeis ok e perg. exibir tela = Nao)
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Totalizadores                               				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( nTotal > 0 )
		  		IF ( lGpem110ExecInRemote )
		  			MsAguarde( bTotal , STR0038 + cFilAnt ) // "Totalizando a Filial: "
				Else
					Eval( bTotal )
				EndIF
			EndIF
		EndIF
	
		End Transaction

		If ! lCtbInTran // Nao contabiliza na Transacao (param.contabeis nao configurados para Transacao e/ou perg. exibir tela = Sim)
			/*
			ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			³ Totalizadores                               				   ³
			ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
			IF ( nTotal > 0 )
		  		IF ( lGpem110ExecInRemote )
		  			MsAguarde( bTotal , STR0038 + cFilAnt ) // "Totalizando a Filial: "
				Else
					Eval( bTotal )
				EndIF
			EndIF
		EndIF
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Restaura o SRZ padrao										         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !lMultSRZ
			ReabSRZ()
		EndIf

		If !lSrzCompart
			//--GRAVA NO PARAMETRO O MES CONTABILIZADO
			//utilizado GETMV para checar se o parametro existe, por isso não utilizado o GETMVRH
			If GetMv("MV_GPMESCT",.T.) .And. cMesCont < Right(cMesAnoCtab,4)+Left(cMesAnoCtab,2) 
				PutMv("MV_GPMESCT", Right(cMesAnoCtab,4)+Left(cMesAnoCtab,2) )
			EndIf
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se o SRZ for compartilhado, ja processou tudo na 1a. Vez	   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( lSrzCompart )		// ja processou tudo na primeira vez
			Exit
		EndIf
	Next nFilial	
	
	If lMultSRZ
		ReabSRZ()
	EndIf
	
	//chama rotina de geracao de arquivos para sistemas externos apenas apos contabilizar todas as filiais. Carrega mes/Ano contabilizado
	If(FindFunction("GPEM114")) .AND. lIntegra
		/*Integração Logix(Se houver)*/
		GPEM114(cMesAnoCtab, cFilConDe, cFilConAte)
	endIf

End Sequence
	
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Gera o Log de Inconsistencias								         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty( aLogIncon ) .And. !lSchedule
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Foram Encontradas Inconsistencias na Contabilizacao          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aAdd( aLogTitle , STR0033 )
	fMakeLog( { aLogIncon } , aLogTitle , cPerg , lGpem110ExecInRemote )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a Filial de Entrada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cFilAnt := cSvFilAnt
dDataBase := dDataBase1
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura o Modulo de Entrada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !Empty( aModuloReSet )
	ReSetModulo( aModuloReSet )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Recupera a Integridade dos dados                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea( aAreaSRA )
RestArea( aAreaSRZ )
RestArea( aAreaSM0 )
RestArea( aArea    )
Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Gpem110LoteCont³Autor³Marinaldo de Jesus  ³ Data ³29/05/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna o Numero do Lote da Folha no SX5					     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Gpem110LoteCont( cChave , cFil )							         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	 	 ³GPEM110     												            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Gpem110LoteCont( cChave , cFil )

DEFAULT cChave	:= "GPE"
DEFAULT cFil	:= cFilAnt

Return( fDesc( "SX5" , "09"+AllTrim(cChave) , "X5Descri()" , 06 , cFil , 01 ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Gpem110SrvLanc ³Autor³Marinaldo de Jesus  ³ Data ³29/05/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Carrega Array das Verbas Vs Lancamentos Padroes			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³<Vide Parametros Formais>              				  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	     ³GPEM110     												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Gpem110SrvLanc( cSrvFilDe , cSrvFilAte , aPadrao , lCtbInUse )

Local aSrvReturn	  := Array( __Elementos_aSrvReturn__ )
Local aSrvCols	  := {}
Local aSrvHeader	  := {}
Local aSrvRecnos	  := {}
Local aSrvFields	  := { "RV_FILIAL", "RV_COD" , "RV_LCTOP" }
Local aSrvQuery 	  := {}
Local aRecLctop	  := {}
Local bSrvWhile	  := { |cKey,cFil| ( ( cFil := RV_FILIAL ) >= cSrvFilDe ) .and. ( cFil <= cSrvFilAte ) }
Local bSrvSkip	  := { || NIL }
Local cAliasLctop  := "CT5"
Local cCpoLctop	  := "CT5_LANPAD"
Local cFilLctop	  := xFilial( cAliasLctop )
Local cPrefixLctop := ( PrefixoCpo( cAliasLctop ) + "_" )
Local lTudoOk		  := .F.
Local nPosFil		  := 0.00
Local nPosPd		  := 0.00
Local nPosLctop	  := 0.00
Local nRecnoLctop  := 0.00
Local lEqualFil	  := .F.
Local cSpcLctop	  := Space( TamSx3("RV_LCTOP")[1] )

DEFAULT cSrvFilDe	:= cFilAnt
DEFAULT cSrvFilAte	:= cSrvFilDe
DEFAULT aPadrao		:= {}
DEFAULT lCtbInUse	:= .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine as Filiais De/Ate                   				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cSrvFilDe	:= xFilial( "SRV" , cSrvFilDe  )
cSrvFilAte	:= xFilial( "SRV" , cSrvFilAte )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Anula bSrvWhile caso as Filiais sejam Iguais				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( lEqualFil := ( cSrvFilDe == cSrvFilAte ) )
	bSrvWhile := NIL
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine bSrvSkip Quando TOP                 				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSrvSkip := { |lVerPadrao|	( lVerPadrao := ( MyVerPadrao( RV_LCTOP , @nRecnoLctop , @aPadrao , cAliasLctop , cFilLctop , cCpoLctop , cPrefixLctop ) ) ) ,;
							IF(;
								( lVerPadrao ) ,;
								aAdd( aRecLctop , nRecnoLctop ),;
								 NIL;
							   ),;
							 !( lVerPadrao );
			}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Condicao da Query Para Carga das Informacoes do SRV		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvQuery	  := Array( 09 )
aSrvQuery[01] := "("
aSrvQuery[02] := 	"RV_FILIAL>='"+cSrvFilDe+"'"
aSrvQuery[03] := 	" AND "
aSrvQuery[04] := 	"RV_FILIAL<='"+cSrvFilAte+"'"
aSrvQuery[05] := ")"
aSrvQuery[06] := " AND "
aSrvQuery[07] := "RV_LCTOP<>'"+cSpcLctop+"'"
aSrvQuery[08] := " AND "
aSrvQuery[09] := "D_E_L_E_T_=' ' "

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega as Informacoes do SRV                				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvCols := GdMontaCols(;
							@aSrvHeader	,;	//01 -> Array com os Campos do Cabecalho da GetDados
							NIL			,;	//02 -> Numero de Campos em Uso
							NIL			,;	//03 -> [@]Array com os Campos Virtuais
							NIL			,;	//04 -> [@]Array com os Campos Visuais
							"SRV"		,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
							aSrvFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
							@aSrvRecnos,;	//07 -> [@]Array unidimensional contendo os Recnos
							"SRV"   	,;	//08 -> Alias do Arquivo Pai
							cSrvFilDe	,;	//09 -> Chave para o Posicionamento no Alias Filho
							bSrvWhile	,;	//10 -> Bloco para condicao de Loop While
							bSrvSkip	,;	//11 -> Bloco para Skip no Loop While
							.F.			,;	//12 -> Se Havera o Elemento de Delecao no aCols 
							.F.			,;	//13 -> Se cria variaveis Publicas
							.F.			,;	//14 -> Se Sera considerado o Inicializador Padrao
							NIL			,;	//15 -> Lado para o inicializador padrao
							.F.			,;	//16 -> Opcional, Carregar Todos os Campos
							.T. 		,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
							aSrvQuery	,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
							.F.			,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
							.T.			,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
							.F.			,;	//21 -> Carregar Coluna Fantasma
							.T.			,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
							.F.			,;	//23 -> Verifica se Deve verificar se o campo eh usado
							.F.			,;	//24 -> Verifica se Deve verificar o nivel do usuario
							.F.	 		 ;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
					)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se carregou as Verbas Vs Lancamentos                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( lTudoOk := ( Len( aSrvRecnos ) > 0.00 ) )
	nPosFil	:= GdFieldPos( "RV_FILIAL"	, aSrvHeader )
	nPosPd		:= GdFieldPos( "RV_COD"		, aSrvHeader )
	nPosLctop	:= GdFieldPos( "RV_LCTOP"	, aSrvHeader )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Alimenta o aSrvReturn                        				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvReturn[ __aSrvReturn_TudoOK__ 		] := lTudoOk
aSrvReturn[ __aSrvReturn_aCols__		] := aClone( aSrvCols )
aSrvReturn[ __aSrvReturn_aHeader__		] := aClone( aSrvHeader )
aSrvReturn[ __aSrvReturn_aRecnos__		] := aClone( aSrvRecnos )
aSrvReturn[ __aSrvReturn_nPosFil__		] := nPosFil
aSrvReturn[ __aSrvReturn_nPosPD__		] := nPosPd
aSrvReturn[ __aSrvReturn_nPosLctop__	] := nPosLctop
aSrvReturn[ __aSrvReturn_aRecLctop__	] := aClone( aRecLctop )
aSrvReturn[ __aSrvReturn_cAliasLctop__	] := cAliasLctop
Return( aClone( aSrvReturn ) )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Gpem110FilCar  ³Autor³Marinaldo de Jesus  ³ Data ³29/05/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Carrega Array com as Filiais que serao contabilizadas		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³<Vide Parametros Formais>              				  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	     ³GPEM110     												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Gpem110FilCar( cEmp , cFilDe , cFilAte  )

Return( GetFilRecnos( cEmp , cFilDe , cFilAte ) )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fGeraFolSRZ³ Autor ³ Emerson Rosa de Souza³ Data ³ 18/08/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Gera o arquivo SRZ com os lancamentos da folha			  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ fGeraFolSRZ(nFol13S,aTpContr,cMesAnoRef)				      |±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aTpContr   - Tipo de Contrato DET/INDET ou AMBOS			  |±±
±±³          ³ cMesAnoRef - Mes e Ano de geracao dos lancamentos 	      |±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fGeraFolSRZ( nFol13S,aTpContr,cMesAnoRef,aPerAberto,aPerFechado, nParcela13, cRetSqlName, cTbLog )

Local aArea      := GetArea()
Local cMesArqRef  := If(nFol13S == 2,"13"+Right(cMesAnoRef,4),cMesAnoRef)
Local cTpc
Local cTpc1
Local cTipoLanc
Local cDescLanc
Local cStrGeracao
Local nNroContr
Local nTamCC	    := TamSx3("RZ_CC")[1]
Local lRet 		 	:= .T.

Private aInfo     	:= {}
Private lItemClVl 	:= GetMvRH( "MV_ITMCLVL", .F., "2" ) $ "1*3"
Private lSPGP110  	:= GetMvRH("MV_SPGP110",,.F.)

DEFAULT nParcela13 	:= 2
DEFAULT cRetSqlName	:= ""
DEFAULT cTbLog    	:= ""

If Type("cFilConDe") == "U" .And. !IsInCallStack("GPEM110")
	Private cFilConDe := MV_PAR01
	Private cFilConAte := MV_PAR02
EndIf

lDrop		:= If( Type( "lDrop" ) <> "U", lDrop, .F. )
cTipoCont	:= nFol13S

If Len(aPerAberto) = 0 .and. Len(aPerFechado) = 0
	Return .F.
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas na funcao GR040Imp() para gerar o SRZ   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cSit	  := " ADFT"
cCat     := "ACDEGHIJMPST"
Semana   := If(cPaisLoc <> "DOM","99",cSemana)
If nFol13S == 1  // 1-Folha  4-Decimo Terceiro 2a Parcela
	nRelat  := 2
Else 
	nRelat  := If( nParcela13 == 1, 3, 4)
EndIf	
lImpNiv   := lImpTot := .F.
nOrdem    := If(lItemClVl,7,4)                      // 4 - Ordem de Centro de Custo do Movimento / 7 - c.custo/item/classe
cFilDe	  := cFilConDe								//Filial De
cFilAte   := cFilConAte								//Filial Ate
cCcDe     := Space(9)
cCcAte    := Replicate("z",09)
cMatDe    := Space(TamSX3("RA_MAT")[1])
cMatAte   := Replicate("z",TamSX3("RA_MAT")[1])
cNomDe    := Space(30)
cNomAte   := Replicate("z",30)
lImpNiv   := .F.
lImpTot   := .F.
nOrdem    := 4                      // Ordem de Centro de Custo do Movimento

cTipoLanc := If(nFol13S == 2,"13","FL")
cDescLanc := Substr(cTipoLanc + Space(1) + cMesAnoRef + space(nTamCC),1,nTamCC)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Alterar parametros da geracao de lancamentos para o SRZ	      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("GP110APL")
   ExecBlock("GP110APL",.F.,.F.)
EndIf

//Cria multiplas tabelas SRZ, por usuário, para possibilitar a execução em paralelo para vários usuários.
If ! IsInCallStack("GPEM110")
	GPM110MSRZ( @cRetSqlName)
Endif

For nNroContr := 1 To Len(aTpContr)
	cTpc  := Str(aTpContr[nNroContr], 1)
	cTpc1 := If(cTpc == "1", " *1", cTpc)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define o texto para a geracao dos lancamentos                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nFol13S == 1 .and. cTpc == "1"
		cStrGeracao := STR0019  // "Geracao de Lancamentos - Folha/Indeterminado"
	ElseIf nFol13S == 1 .and. cTpc == "2"
		cStrGeracao := STR0020  // "Geracao de Lancamentos - Folha/Determinado"
	ElseIf nFol13S == 1 .and. cTpc == "3"
		cStrGeracao :=  STR0101 // "Geracao de Lancamentos - Folha/Intermitente"
	ElseIf nFol13S == 2 .and. cTpc == "1"
		cStrGeracao := STR0021  // "Geracao de Lancamentos - 13o Sal/Indeterminado"
	ElseIf nFol13S == 2 .and. cTpc == "2"
		cStrGeracao := STR0022  // "Geracao de Lancamentos - 13o Sal/Determinado"
	ElseIf nFol13S == 2 .and. cTpc == "3"
		cStrGeracao := STR0102  // "Geracao de Lancamentos - 13o Sal/Intermitente"
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Gerar SRZ caso nao tenha sido gerado ou a folha recalculada  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SRZ")
	dbSetOrder(1)
    
   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Deleta os Registros no SRZ para nova contabilizacao de Folha  |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DeleteSrzTop(	cTpc		,;	//Conteudo para comparar com RZ_TPC
				cTipoLanc	,;	//Tipo de Lancamento a comparar com RZ_TIPO
				.T.			,;	//Se Limpa Todos os Tipos do SRZ
				.F.			,;	//Se se refere a Provisoes
				.F.			,;	//Se mostra Dialogo dom barra de evolucao
				cRetSqlName	 ;
			)
	
	//Gera lancamentos no SRZ a partir da rotina de imp. da folha

	If IsBlind()
		lRet := GR040Imp(,,"SRZ",cMesArqRef,aTpContr[nNroContr],.T.,aPerAberto,aPerFechado, cRetSqlName)
	Else
		Processa({|| lRet := GR040Imp(,,"SRZ",cMesArqRef,aTpContr[nNroContr],.T.,aPerAberto,aPerFechado,cRetSqlName, cTbLog)}, cStrGeracao,,.F.)
	EndIf

   dbSelectArea("SRZ")
   If lItemClVl
    	dbSetOrder(3)
   Else
      dbSetOrder(1)
   EndIf   
   If !lRet
	    Exit
   Else
       //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	    //³ Gera um registro indicando mes e tipo de lancamento gerado.  ³
	    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		RecLock("SRZ",.T.)
		SRZ->RZ_FILIAL := Replicate("z", FWGETTAMFILIAL)
		SRZ->RZ_CC     := cDescLanc
		SRZ->RZ_PD     := Space(3)
		SRZ->RZ_TPC    := cTpc
		SRZ->RZ_TIPO   := cTipoLanc                                     
		If cPaisLoc == "DOM"
			SRZ->RZ_SEMANA := cSemana
		Endif		  
	   	If lItemClvl
	   		SRZ->RZ_ITEM:= Space(9)
	   		SRZ->RZ_CLVL:= Space(9)
	   	EndIf			   	
	   	SRZ->( MsUnlock() )
   EndIf
Next nNroContr

RestArea(aArea)
Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³fGeraProvS³ Autor ³ Emerson Rosa de Souza	³ Data ³ 18/08/00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Gera o arquivo SRZ com os lancamentos da provisao		  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³fGeraProvSRZ( cMesAnoRef , lExecInRemote )				  |±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ 															  |±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fGeraProvSRZ( cMesAnoRef, lExecInRemote, lPlr, cRetSqlName, cMatDe, cMatAte)

Local cAlias     := Alias()
Local cTipoLanc  := If(lProvFer,"PF",If(lProv13o,"PD","PR")) //"PR"
Local nTamCC	   := TamSx3("RZ_CC")[1]
Local cDescLanc  := Substr(cTipoLanc + Space(1) + cMesAnoRef + space(nTamCC),1,nTamCC)
Local cTiposDel	 := ""
Local dDataRef   := Ctod("")
Local nUltDia
Local nNroContr	 := 0
Local aTpContr	 := {1,2}

Default lPLR 	:= .F.
Default cMatDe 	:= ""
Default cMatAte := ""

lDrop := If( Type( "lDrop" ) <> "U", lDrop, .F. )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o Processo de Contabilizacao esta sendo Executado³
//³ via Remote												               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Gpem110InRemote( @lExecInRemote )

//Cria multiplas tabelas SRZ, por usuário, para possibilitar aexecução em paralelo para vários usuários.
If !IsInCallStack("GPEM110")
	GPM110MSRZ( @cRetSqlName)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Gerar SRZ caso nao tenha sido gerado ou provisao recalculada ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SRZ")
If lItemClVl
	dbSetOrder(3)
Else
   dbSetOrder(1)
EndIf
For nNroContr := 1 To Len(aTpContr)
	cTpc := Alltrim(STR(nNroContr))
   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Deleta os Registros no SRZ para nova contabilizacao de Proviso|
	//³es de Ferias e de 13o Salario								         |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cTiposDel := If(lProvFer,"'PF'","") + If(lProv13o,",'PD'","")+ If(lProv13o,",'PP'","")
   	If !lProvFer .And. lProv13o
		cTiposDel := "'PD'"
	Endif 

	If  cTipoCont != 1 
		DeleteSrzTop(	cTpc		,;	//Conteudo para comparar com RZ_TPC
						cTiposDel	,; 	//Tipo de Lancamento a comparar com RZ_TIPO
						.T.			,;	//Se Limpa Todos os Tipos do SRZ
						.T.			,;	//Se se refere a Provisoes
						.F.			,cRetSqlName;	//Se mostra Dialogo com barra de evolucao
					)
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta a data de referencia para geracao dos lancamentos    |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nUltDia  := f_UltDia( Ctod("01/" + Left(cMesAnoRef,2) + "/" + Right(cMesAnoRef,4), "DDMMYY") )
	dDataRef := Ctod( StrZero(nUltDia,2) + "/" + Left(cMesAnoRef,2) + "/" + Right(cMesAnoRef,4), "DDMMYY" )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Chama a rotina que gera lancamentos contabeis da provisao  |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	fGeraCtab( dDataRef, lGpem110ExecInRemote, cTpc, lPlr, cMatDe, cMatAte )

	dbSelectArea("SRZ")
   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Gera um registro indicando mes e tipo de lancamento gerado.  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	RecLock("SRZ",.T.)
	SRZ->RZ_FILIAL := Replicate("z", FWGETTAMFILIAL)
	SRZ->RZ_CC     := cDescLanc
	SRZ->RZ_PD     := Space(3)
	SRZ->RZ_TPC    := cTpc
	SRZ->RZ_TIPO   := cTipoLanc
	If cPaisLoc == "DOM"
		SRZ->RZ_SEMANA := cSemana
	EndIf	
	If lItemClvl
		SRZ->RZ_ITEM:= Space(9)
		SRZ->RZ_CLVL:= Space(9)
	EndIf	
  	SRZ->( MsUnlock() )
  	
	If lProvFer .and. lProv13o
		RecLock("SRZ",.T.)
		SRZ->RZ_FILIAL := Replicate("z", FWGETTAMFILIAL)
		SRZ->RZ_CC     := If(cTipoLanc=="PD","PF",If(cTipoLanc=="PF","PD",cTipoLanc))+Substr(cDescLanc,3)
		SRZ->RZ_PD     := Space(3)
		SRZ->RZ_TPC    := cTpc
		SRZ->RZ_TIPO   := If(cTipoLanc=="PD","PF",If(cTipoLanc=="PF","PD",cTipoLanc))
		If cPaisLoc == "DOM"
			SRZ->RZ_SEMANA := cSemana
		Endif	
		SRZ->( MsUnlock() )
	EndIf	
Next

dbSelectArea(cAlias)
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao	 ³fGeraCtab ³ Autor ³ Emerson Rosa de Souza ³ Data ³ 16.07.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³Gera os lancamentos contabeis de provisao    			  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³fGeraCtab( dDataRef , lExecInRemote )						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso	 	 ³Generico 												  	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fGeraCtab( dDataRef, lExecInRemote, cTpc, lPlr, cRoboDe, cRoboAt)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis Locais (Programa)						         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cItemAnt 	:= ""
Local cClvlAnt 	:= ""
Local aFilMat  	:= {}
Local aRateio  	:= {}
Local nX      	:= 0
Local nCnt1   	:= 0
Local nCnt2   	:= 0
Local cAuxtpc 	:= ""
Local lTemEstag := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis Private(Programa)					     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private aFerVenc     := Array(_Linhas,_Colunas)
Private aFerProp     := Array(_Linhas,_Colunas)
Private a13Salar     := Array(_Linhas,_Colunas)
Private a14Salar     := Array(_Linhas,_Colunas)
Private aPLRSalar    := Array(_Linhas,_Colunas)
Private aTotCcFer    := Array(_Linhas,_Colunas)
Private aTotFunFer   := Array(_Linhas,_Colunas)
Private aTotCc13s    := Array(_Linhas,_Colunas)
Private aTotCc14s    := Array(_Linhas,_Colunas)
Private aTotCcPLR    := Array(_Linhas,_Colunas)
Private aTotCcRec	 := Array(_Linhas,_Colunas)
Private aTotCcRAux	 := Array(_Linhas,_Colunas)
Private aTotAux  	 := {}
Private aVerba  	    := {}
Private aVerAux	 	 := {}
Private aTransf     := {}
Private aCodFol  	 := {}
Private lSalInc    	 := .F.
Private lTrataTrf    := .F.
Private lAbortPrint  := .F.
Private lGP110SRZ	:= ExistBlock("GP110SRZ")	// P.E. para tratamento do 13o salario
Private lEstag  	:= .F.

Default cTpc  	:= ""
Default lPlr  	:= .F.
Default cRoboDe	:= ""
Default cRoboAt := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o Processo de Contabilizacao esta sendo Executado³
//³ via Remote												               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Gpem110InRemote( @lExecInRemote )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para montagem do arquivo temporario.    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nOrdem		:= If(lItemClVl,6,2)						//	Centro de Custo
cFilDe    	:= cFilConDe								//	Filial De
cFilAte   	:= cFilConAte								//	Filial Ate
cCcDe	   	:= Space(9)							    	//	Centro de Custo De
cCcAte	   	:= Replicate("z",09)  						//	Centro de Custo Ate
If Empty(cRoboDe)
	cMatDe	   	:= Space(TamSX3("RA_MAT")[1])			//	Matricula De
	cMatAte     := Replicate("z",TamSX3("RA_MAT")[1])	//	Matricula Ate
Else
	cMatDe	   	:= cRoboDe								//	Matricula De
	cMatAte     := Iif( !Empty(cRoboAt), cRoboAt, cRoboDe )//Matricula Ate
EndIf
cNomeDe   	:= Space(30)							   	//	Nome De
cNomeAte  	:= Replicate("z",30)						//	Nome Ate
cCateg		:= "ACDEGHIJMPST"						   	//  Categorias

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Alterar parametros da geracao de lancamentos para o SRZ		   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("GP110APP")
   EXECBLOCK("GP110APP",.F.,.F.)
Endif

// Monta o arquivo temporario "TPR" a partir do SRA e SRE
fMonta_TPR("", "", nOrdem, dDataRef, @lSalInc, @lTrataTrf, @aTransf, Nil, Nil, Nil, Nil, cTpc)

If Empty(cTpc)
	cTpc := '1'
EndIf

dbSelectArea( "SRA" )
dbSetOrder(1)

dbSelectArea( cTBLXPROV )
dbGoTop()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega regua de processamento							          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( lGpem110ExecInRemote )
	ProcRegua( (cTBLXPROV)->( RecCount() ) )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Limpa o array com o conteudo especificado no 2§ parametro    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
fLimpaArray( @aTotCcFer, 0 )
fLimpaArray( @aTotFunFer, 0 )
fLimpaArray( @aTotCc13s, 0 )
fLimpaArray( @aTotCc14s, 0 )
fLimpaArray( @a13Salar, 0 )
fLimpaArray( @a14Salar, 0 )
fLimpaArray( @aTotCcPLR, 0 )
fLimpaArray( @aPLRSalar, 0 )
fLimpaArray( @aFerProp, 0 )
fLimpaArray( @aFerVenc, 0 )
fLimpaArray( @aTotCcRec, 0 )
fLimpaArray( @aTotCcRAux, 0 )

cFilialAnt := "__cFilialAnt__"
cCcAnt	    := (cTBLXPROV)->PR_CC
If lItemClvl
	cItemAnt := (cTBLXPROV)->PR_ITEM
	cClvlAnt := (cTBLXPROV)->PR_CLVL
Else
	cItemAnt := ""
	cClvlAnt := ""
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Percorre Todo o Arquivo Temporario						         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
While (cTBLXPROV)->( !Eof() )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Se cancalou o processamento     							         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    If ( lAbortPrint )
       Exit
    EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Garante o Posicionamento do Funcionario no SRA			      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SRA->( dbSeek( (cTBLXPROV)->PR_FILIAL + (cTBLXPROV)->PR_MAT ) )
	
	lEstag := (SRA->RA_CATFUNC $ "E*G")
	If lEstag
		lTemEstag := .T.
	EndIf
	
		
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Quebra de Filial											            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
	If ( (cTBLXPROV)->PR_FILIAL # cFilialAnt )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza a Vilial                       				         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cFilialAnt := (cTBLXPROV)->PR_FILIAL
				
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Encerra caso nao Tenha conseguido carregar as Verbas	      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !( Fp_CodFol( @aCodFol , cFilialAnt ) )
			Exit
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega os identificadores da Provisoes					         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		fIdentProv( @aVerba, aCodFol, .T., .T.)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza Mensagem na Regua de Processamento				      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( lGpem110ExecInRemote )
			IncProc( ( OemToAnsi( STR0034 ) + cFilialAnt )  )	//"Gerando os Lan‡amentos Cont beis para a Filial: "
		EndIf
    
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Movimenta Regua de Processamento							         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    	If ( lGpem110ExecInRemote )
    		IncProc()
    	EndIf
    EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Se nao houver informacoes do cabecalho despreza funcionario  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If fBusCabSRT(dDataRef)
		If lGeraPMes .And. aScan( aFilMat, { |aFilMat| aFilMat[1] == (cTBLXPROV)->PR_FILIAL + (cTBLXPROV)->PR_MAT + cValToChar((cTBLXPROV)->PR_TIPMOVI) } ) == 0
			aAdd( aFilMat, { (cTBLXPROV)->PR_FILIAL + (cTBLXPROV)->PR_MAT + cValToChar((cTBLXPROV)->PR_TIPMOVI) } )		
			fGrvRateio(dDataRef,lPLR)			
		Else
			nPlr := 0
			fQryDetSRT(aVerba,aTransf,dDataRef,lTrataTrf,.T.,lProvFer,lProv13o,,lPlr)
			
			//Atualiza Centro de Custo quando a Contabilização é por Matricula
			
			If Type('lContabCC') != "U" .And. !lContabCC
				cCcAnt := (cTBLXPROV)->PR_CC
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Totalizador -> Vencidas/Proporcionais/13§/14§				      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			For nCnt1 := 1 To _Linhas
				For nCnt2 := 1 To _Colunas
					aTotCcFer[nCnt1,nCnt2]  += aFerVenc[nCnt1,nCnt2]+aFerProp[nCnt1,nCnt2]
					aTotFunFer[nCnt1,nCnt2] += aFerVenc[nCnt1,nCnt2]+aFerProp[nCnt1,nCnt2]
					aTotCc13s[nCnt1,nCnt2] += a13Salar[nCnt1,nCnt2]
					aTotCc14s[nCnt1,nCnt2] += a14Salar[nCnt1,nCnt2]
					aTotCcPLR[nCnt1,nCnt2] += aPLRSalar[nCnt1,nCnt2]
				Next nCnt2
			Next nCnt1
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Grava no SRZ valores dos Funcionarios - Contabilizacao Analitica ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lCtabBxaRes
				fChkVBxa(@aTotFunFer, _FerVenc, _BxRes)
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//| Ponto de Entrada para devolver o conteudo dos arrays aTotFunFer|
			//| a13Salar e a14Sala rateado. O retorno deve ser um array        |
			//| tridimensional onde o 1o nivel representa a quantidade de      |
			//| rateios efetuada e os dois ultimos niveis tem a mesma estrutura|
			//| o array aTotFunFer com duas colunas a mais trazendo os codigos |
			//| de Item e Classe.                                              |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lGP110SRZ
				aRateio := EXECBLOCK("GP110SRZ",.F.,.F.,{"FER",dDataRef})
			Endif
			
			cAuxtpc := SRA->RA_TPCONTR
			If Empty(SRA->RA_TPCONTR)
			    cAuxtpc := "1"
			EndIf
			
			If Len(aRateio) > 0 .And. ( Len(aRateio[1,1]) == _Colunas + 2 )
				For nx := 1 to Len(aRateio)
					fGravaSrz(aClone(aRateio[nx]),_FerVenc,cFilialAnt,cCcAnt,SRA->RA_MAT,,,cAuxtpc)
				Next nx
				aRateio := {}
			Else		
			   fGravaSrz(aTotFunFer,if(lEstag,_RecVenc,_FerVenc),cFilialAnt,cCcAnt,SRA->RA_MAT,cItemAnt,cClvlAnt,cAuxtpc)	
			EndIF
			fLimpaArray( @aTotFunFer, 0 )
	
			If lCtabBxaRes
				fChkVBxa(@a13Salar,_13Salar,_BxRes)
				fChkVBxa(@a14Salar,_14Salar,_BxRes)
			EndIf
	
			//-- Repeticao do ponto de entrada para tratamento do 13o salario
			If lGP110SRZ
				aRateio		:= EXECBLOCK("GP110SRZ",.F.,.F.,{"13",dDataRef})
			EndIf
			If Len(aRateio) > 0 .And. ( Len(aRateio[1,1]) == _Colunas + 2 )
				For nx := 1 to Len(aRateio)
					fGravaSrz(aRateio[nx],_13Salar,cFilialAnt,cCcAnt,SRA->RA_MAT,,,cAuxtpc)
				Next nx
				aRateio		:= {}
			Else
			   fGravaSrz(a13Salar,_13Salar,cFilialAnt,cCcAnt,SRA->RA_MAT,cItemAnt,cClvlAnt,cAuxtpc)
			EndIf
			
			//-- Repeticao do ponto de entrada para tratamento do 14o salario
			If lGP110SRZ
				aRateio		:= EXECBLOCK("GP110SRZ",.F.,.F.,{"14",dDataRef})
			EndIf
			If Len(aRateio) > 0 .And. ( Len(aRateio[1,1]) == _Colunas + 2 )
				For nx := 1 to Len(aRateio)
					fGravaSrz(aRateio[nx],_14Salar,cFilialAnt,cCcAnt,SRA->RA_MAT,,,cAuxtpc)
				Next nx
				aRateio		:= {}
			Else	
			    fGravaSrz(a14Salar,_14Salar,cFilialAnt,cCcAnt,SRA->RA_MAT,cItemAnt,cClvlAnt,cAuxtpc)		
			EndIf
			
			If lCtabBxaRes
				fChkVBxa(@aPlrSalar,_PlrSalar,_BxRes)
			EndIf
			//-- Repeticao do ponto de entrada para tratamento do PLR
			If lGP110SRZ
				aRateio		:= EXECBLOCK("GP110SRZ",.F.,.F.,{"PLR",dDataRef})
			EndIf
			If Len(aRateio) > 0 .And. ( Len(aRateio[1,1]) == _Colunas + 2 )
				For nx := 1 to Len(aRateio)
					fGravaSrz(aRateio[nx],_PLRSalar,cFilialAnt,cCcAnt,SRA->RA_MAT,,,cAuxtpc)
				Next nx
				aRateio		:= {}
			Else
				fGravaSrz(aPLRSalar, _PLRSalar, cFilialAnt, cCcAnt, SRA->RA_MAT,cItemAnt,cClvlAnt,cAuxtpc)
			Endif 
	    EndIf
	EndIf

	If lEstag //Se for estagiário, soma para abater na montagem do total por centro de custo
		For nCnt1 := 1 To _Linhas
				For nCnt2 := 1 To _Colunas
					aTotCcRAux[nCnt1,nCnt2]  += aTotCcRec[nCnt1,nCnt2]					
				Next nCnt2
		Next nCnt1
	EndIf

	dbSelectArea( cTBLXPROV )
	dbSkip()

	If !lGeraPMes .And. ;
		( ( !lItemClVl .And. (cTBLXPROV)->PR_FILIAL + (cTBLXPROV)->PR_CC # cFilialAnt + cCcAnt ) .Or. ; 
		  ( lItemClVl .And. (cTBLXPROV)->PR_FILIAL + (cTBLXPROV)->PR_CC + (cTBLXPROV)->PR_ITEM + (cTBLXPROV)->PR_CLVL # cFilialAnt + cCcAnt + cItemAnt + cClvlAnt ) )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se existem as verbas de rescisao, se nao existirem  ³
		//³ subtrair os valores destas verbas dos lancamentos do mes.    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lCtabBxaRes
			fChkVBxa(@aTotCcFer,_FerVenc,_BxRes)
		EndIf
		
		If lTemEstag
			For nCnt1 := 1 To _Linhas
					For nCnt2 := 1 To _Colunas
						aTotCcFer[nCnt1,nCnt2]  -= aTotCcRAux[nCnt1,nCnt2]					
					Next nCnt2
			Next nCnt1
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grava o array aTotCCFer no arquivo SRZ.                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		fGravaSrz(aTotCcFer,_FerVenc,cFilialAnt,cCcAnt,"zzzzzz",cItemAnt,cClvlAnt,cTpc)
		fLimpaArray( @aTotCcFer, 0 )
		If lTemEstag
			fGravaSrz(aTotCcRAux,_RecVenc,cFilialAnt,cCcAnt,"zzzzzz",cItemAnt,cClvlAnt,cTpc)
			fLimpaArray( @aTotCcRec, 0 )
			fLimpaArray( @aTotCcRAux, 0 )
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se existem as verbas de rescisao, se nao existirem  ³
		//³ subtrair os valores destas verbas dos lancamentos do mes.    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lCtabBxaRes
			fChkVBxa(@aTotCc13s,_13Salar,_BxRes)
			fChkVBxa(@aTotCc14s,_14Salar,_BxRes)
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grava o array aTotCCFer no arquivo SRZ.                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		fGravaSrz(aTotCc13s, _13Salar, cFilialAnt, cCcAnt, "zzzzzz",cItemAnt,cClvlAnt,cTpc)
		fGravaSrz(aTotCc14s, _14Salar, cFilialAnt, cCcAnt, "zzzzzz",cItemAnt,cClvlAnt,cTpc)		
		fLimpaArray( @aTotCc13s, 0 )
		fLimpaArray( @aTotCc14s, 0 )
		
		If lCtabBxaRes
			fChkVBxa(@aTotCcPlr,_PlrSalar,_BxRes)
		EndIf

		fGravaSrz(aTotCcPlr, _PlrSALAR, cFilialAnt, cCcAnt, "zzzzzz",cItemAnt,cClvlAnt,cTpc)		
		fLimpaArray( @aTotCcPlr, 0 )

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza o centro de custo para uma nova totalizacao		   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cCcAnt := (cTBLXPROV)->PR_CC
		If lItemClVl
			cItemAnt := (cTBLXPROV)->PR_ITEM
			cClvlAnt := (cTBLXPROV)->PR_CLVL
		EndIf
	EndIf
EndDo

(cTBLXPROV)->(dbCloseArea())

//Elimina arquivo temporário de provisão
fDelTMPPRV()

//**********************************//
// Descarrega no SRZ os totais por  //
// Centro de Custo obtidos do SRT   //
//**********************************//
If Len(aTotAux) > 0
	SRZTotAux(aTotAux,cTpc)
Endif

Return( Nil )

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³fGeraSRZTop ³ Autor ³ Mauricio T. Takakura³ Data ³ 26/07/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Gerar Lancamentos na tabela SRZ para TOP                   ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fGeraSRZTop()									     		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³ Gper040  												    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGeraSRZTop( aPerAberto,;   // array dos periodos em aberto
					     aPerFechado,;  // array dos periodos fechados
					     lGPS ,;        // .F. -> por processo e roteiro, .T. -> para geracao da GPS
					     lSPGP110 ,;  //procedure
						 cRetSqlName ,; // nome da tabela temporária
						 cTbLog     ) // nome da tabela temporária de log

Local cAliasSRC
Local cAliasSRA
Local cAliasSRD
Local cPrPerAb		:= ""
Local cPrSemAb		:= ""
Local cPrPerFec		:= ""
Local cPrSemFec		:= ""  
Local cQryTipo		:= "FL"
Local cQuery1		:= ""
Local cQuery2		:= ""
Local cQuery3		:= ""
Local cQuery4		:= ""

Local nY, nX, nCont
Local nTamFilial	:= GetSx3Cache("RC_FILIAL", "X3_TAMANHO")
Local nTamCC		:= GetSx3Cache("RC_CC", "X3_TAMANHO")
Local nTamMat		:= GetSx3Cache("RC_MAT", "X3_TAMANHO")
Local nTamItem		:= GetSx3Cache("RC_ITEM", "X3_TAMANHO")
Local nTamClvl		:= GetSx3Cache("RC_CLVL", "X3_TAMANHO")

Local aGPSVal		:= {}
Local aGPSItem		:= {}
Local aFilAux		:= {}
Local aEmpAux		:= {}
Local aFiliais 		:= {}
Local cCalcRot		:= ""
Local cCalc13		:= ""
Local cRot131		:= ""
Local cRot 			:= ""
Local cRotGps		:= ""
Local cPerBusca		:= ""
Local cRotQry		:= ""
Local cProcedure	:= ""
Local lLogix 		:= cPaisLoc == "BRA" .And. SRZ->( FieldPos('RZ_ARELIN') ) > 0 .And. GetMvRH("MV_ERPLOGI",,"2") == "1"
Local cGPCTLOG 		:= GetMvRH("MV_GPCTLOG",," ")
Local nZ			:= 1
Local cbkpFilDe 	:= cFilDe 
Local cbkpFilAte	:= cFilAte
Local l131	 		:= GetMvRH("MV_131SEP",,.F.) .Or. FwIsInCallStack("GPER055") // se contabiliza roteiro de primeira parcela com 13 ou FL. O roteiro deve estar marcado na SRY para contabilizar.
Local lRatDes		:= .F.
Local uRatDes		:= GetMvRH( "MV_RAT0973", .F., .F. )

Local cProcName     := ""

DEFAULT lGPS 		:= .F.
DEFAULT lSPGP110  	:= .F.
Default cRetSqlName := ""
Default cTbLog      := ""

// Parametro era logico e mudou para caracter indevidamente no P12
If ValType( uRatDes ) == "L"
	lRatDes := uRatDes
ElseIf ValType( uRatDes ) == "C"
	uRatDes := GetMvRH( "MV_RAT0973", .F., ".F." )
	lRatDes	:= ( uRatDes == ".T." )
EndIf

//PREENCHIMENTO DAS VÁRIAVEIS DE ROTEIROS
aEval( fGetRotTipo('6') , { |X| cCalc13 	 += X+"/" } ) //132
cCalc13  := StrTran(StrTran(FormatIn(Substr(cCalc13	,1,Len(cCalc13)-1), "/"),')','' ),'(','' )

aEval( fGetRotTipo('1') , { |X| cCalcRot  += X+"/" } ) //FOL
cCalcRot := StrTran(StrTran(FormatIn(Substr(cCalcRot, 1, Len(cCalcRot)-1), "/"),')','' ),'(','' ) 

aEval( fGetRotTipo('5') , { |X| cRot131   += X+"/" } ) //131
cRot131 := StrTran(StrTran(FormatIn(Substr(cRot131, 1, Len(cRot131)-1), "/"),')','' ),'(','' )

If FunName() == "GPEM110"
	cFilDe 	:= cFilConDe
	cFilAte	:= cFilConAte
ElseIf Alltrim(FunName()) $ "GPEM240/GPER240"	
	cFilDe 	:= cFilIni 
	cFilAte	:= cFilFim
EndIf
aFiliais := Gpem110FilCar( cEmpAnt, cFilDe , cFilAte  )

GPM110MChk()

If cPaisLoc == "BRA"
	If Type("lFolPgto") == "L" .And. Type("lFol13Sl") == "L" //veio da contabilização
		If lFolPgto .And. lFol13Sl
			cRot	:= RotContab()
		ElseIf !lFolPgto .And. lFol13Sl
			cRot	:= cCalc13 + "," + cRot131
		ElseIf lFolPgto .And. !lFol13Sl
			cRot	:= RotContab( cCalc13 +"," + cRot131)
		EndIf
	Else
		cRot 	:= RotContab()
	EndIf
	cRotGps		:= RotContab(cCalc13,.T.)
Else
	cRot 		:= "'" + cRoteiro + "'"
	cRotGps		:= cRoteiro
EndIf

If lGps
	If Type("cTipo") == "N"
		If cTipo == 1 // GPS da Folha de Pagamento
			cQryTipo := "FL"
		Else
			cQryTipo := "13"
		EndIf
	EndIf
EndIf


DbSelectArea( "SRZ" )
cAliasSRC := RetSqlName( "SRC" )
cAliasSRA := RetSqlName( "SRA" )
cAliasSRD := RetSqlName( "SRD" )

//-- Cria tabela de log para uso em procedure
If ((!FwIsInCallStack("GPEM110")) .And. (lSPGP110) .And. ("C" $ cGPCTLOG))
	GP110TabLog( .T., @cTbLog)
EndIf

Begin Sequence
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Selecionar os periodos a serem Processados                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nX := 1 To Len( aPerAberto )
	    If !(aPerAberto[nX, 1] $ cPrPerAb)
			cPrPerAb += If(!Empty(cPrPerAb), ',', '') + "'" + aPerAberto[nX, 1] + "'"
		EndIf

	    If !(aPerAberto[nX, 2] $ cPrSemAb)
			cPrSemAb += If(!Empty(cPrSemAb), ',', '') + "'" + aPerAberto[nX, 2] + "'"
		EndIf
	Next nX
		
	For nX := 1 To Len(aPerFechado)
		If !(aPerFechado[nX, 1] $ cPrPerFec)
			cPrPerFec += If(!Empty( cPrPerFec), ',', '') + "'" + aPerFechado[nX, 1] + "'"
		EndIf

	    If !(aPerFechado[nX, 2] $ cPrSemFec)
			cPrSemFec += If(!Empty( cPrSemFec), ',', '') + "'" + aPerFechado[nX, 2] + "'"
		EndIf
	Next nX
	
	
	If !lGPS
		//If cPaisLoc <> "PER" //CBP
			cRotQry := cRot 
		//Endif 
	Else
		If Type("cTipo") == "N"
			If cTipo == 1 // GPS da Folha de Pagamento
				cRotQry :=  cRotGps 
			Else
				cRotQry :=  "" + cCalc13 + "," + "'NAT'"
			EndIf
		EndIf
	EndIf
	
	//processa funcionario e cc de filial por filial por que o parametro lItemCLVL pode estar diferente por filial
	For nZ := 1 To Len(aFiliais)
		cFilDe := aFiliais[nZ][1]
		cFilAte := aFiliais[nZ][1]
		cProcedure := ""
		
		lItemClvl	:= GetMvRH( "MV_ITMCLVL", .F., "2", cFilDe ) $ "1*3"  // Define se trabalha com item contábil e classe de valor
		
		If cPaisLoc <> "PTG" .And. ( !Empty( cPrPerAb ) .Or. !Empty( cPrPerFec ) )
			If lSPGP110
				cProcedure += IniProc(lItemClVl,lLogix,@cProcName)
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inserir a Totalizacao por Funcionario                        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cQuery1 := ""
			cQuery1 := QryFunc(1,lItemClvl,cPrPerAb,cTpc,cAliasSRA,cFilDe,cFilAte,cPrSemAb,cCalc13,cTpc1,cPrPerFec,cPrSemFec,NTAMFILIAL,NTAMMAT,nTamItem,nTamClvl,nTamCC,cRotQry,cRot131,l131)
			
			
			If !lSPGP110
				fGravaSRZTop( cQuery1 )
			Else
				cProcedure += MntProc("curfun",cQuery1,lItemClVl,lLogix,cGPCTLOG,cRetSqlName,cTbLog)
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inserir a Totalizacao por Filial                             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cQuery3 := ""
			cQuery3 := QryFunc(3,lItemClvl,cPrPerAb,cTpc,cAliasSRA,cFilDe,cFilAte,cPrSemAb,cCalc13,cTpc1,cPrPerFec,cPrSemFec,NTAMFILIAL,NTAMMAT,nTamItem,nTamClvl,nTamCC,cRotQry,cRot131,l131)
	
			
			If !lSPGP110
				fGravaSRZTop( cQuery3 )
			Else
				cProcedure += MntProc("curfil",cQuery3,lItemClVl,lLogix,cGPCTLOG,cRetSqlName,cTbLog)
			EndIf
			
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inserir a Totalizacao por Centro de Custo                    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cQuery4 := ""
			cQuery4 := QryFunc(4,lItemClvl,cPrPerAb,cTpc,cAliasSRA,cFilDe,cFilAte,cPrSemAb,cCalc13,cTpc1,cPrPerFec,cPrSemFec,NTAMFILIAL,NTAMMAT,nTamItem,nTamClvl,nTamCC,cRotQry,cRot131,l131)

		
			If !lSPGP110
				fGravaSRZTop( cQuery4 )
			Else
				cProcedure += MntProc("curcc",cQuery4,lItemClVl,lLogix,cGPCTLOG,cRetSqlName,cTbLog)
				ExecProc(cProcedure,cQuery1,cQuery2,cQuery3,cQuery4,cProcName,cRetSqlName,cTbLog)
			EndIf
		Endif
	Next nZ	
	
	cFilDe := cbkpFilDe   
	cFilAte := cbkpFilAte
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inserir a Totalizacao por Empresa                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cQuery2 := ""
	cQuery2 := QryFunc(2,.T.,cPrPerAb,cTpc,cAliasSRA,cFilDe,cFilAte,cPrSemAb,cCalc13,cTpc1,cPrPerFec,cPrSemFec,NTAMFILIAL,NTAMMAT,nTamItem,nTamClvl,nTamCC,cRotQry,cRot131,l131)

	If !lSPGP110
		fGravaSRZTop( cQuery2 )
	Else
		cProcedure := IniProc(.T.,lLogix,@cProcName)
		cProcedure += MntProc("curemp",cQuery2,.T.,lLogix,cGPCTLOG,cRetSqlName,cTbLog)
		ExecProc(cProcedure,"",cQuery2,"","",cProcName,cRetSqlName,cTbLog)
	EndIf
	
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Trata os valores de complemento de GPS (tab S035)            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cPaisLoc == "BRA" .And. (lGPS .Or. IsInCallStack("GPEM110"))

		cPerBusca := IIf(Empty( cPrPerAb ), aPerFechado[1][1], aPerAberto[1][1])
	
		cAliasTMP := GetNextAlias()
		
		BeginSQL Alias cAliasTMP

			SELECT DISTINCT RCC_FIL FROM %table:RCC% RCC
			WHERE RCC_CODIGO='S035' AND RCC_CHAVE = %exp:cPerBusca% AND RCC_FIL BETWEEN %exp:cFilDe% AND %exp:cFilAte%

		EndSQL 			
	
		dbSelectArea(cAliasTMP)
		(cAliasTMP)->(dBGoTop())
					
		Do While (cAliasTMP)->(!EOF())

			aGPSItem := {}
			fGPSVal((cAliasTMP)->(RCC_FIL), cPerBusca, @aGPSItem, cTpC)
			If !Empty(aGPSItem)
				AADD(aGPSVal, {(cAliasTMP)->(RCC_FIL), aGPSItem})
			EndIf

			(cAliasTMP)->(DbSkip())

		EndDo

		(cAliasTMP)->(dbCloseArea())
	
		For nX := 1 to Len(aGPSVal)
			For nY := 1 to Len(aGPSVal[nX, 2])
				If ( nPos := aScan( aFilAux, { |aFilAux|  aFilAux[1] == aGPSVal[nX, 2, nY, 2] .And. aFilAux[4] == aGPSVal[nX, 1] } ) ) == 0
					aAdd( aFilAux, {  aGPSVal[nX, 2, nY, 2], If(aGpsVal[nX, 2, nY, 5] != 0, aGpsVal[nX, 2, nY, 5], Round(aGpsVal[nX, 2, nY, 3]*aGpsVal[nX, 2, nY, 4]/100,2)), 1 , aGPSVal[nX, 1] } )						
				Else
					aFilAux[nPos, 2] += If(aGpsVal[nX, 2, nY, 5] != 0, aGpsVal[nX, 2, nY, 5], Round(aGpsVal[nX, 2, nY, 3]*aGpsVal[nX, 2, nY, 4]/100,2))
					aFilAux[nPos, 3] += 1
				EndIf
				
				If IsInCallStack("GPEM110") .And. !lContabCC
				
					If Reclock ("SRZ",.T.)
						SRZ->RZ_FILIAL	:= 	aGPSVal[nX, 1]
						SRZ->RZ_CC		:= 	aGPSVal[nX, 2, nY, 1]
						SRZ->RZ_MAT		:= 	"GPS"
						SRZ->RZ_PD		:= 	aGPSVal[nX, 2, nY, 2]
						SRZ->RZ_HRS		:= 	0
						SRZ->RZ_VAL		:= 	If(aGpsVal[nX, 2, nY, 5] != 0, aGpsVal[nX, 2, nY, 5], Round(aGpsVal[nX, 2, nY, 3]*aGpsVal[nX, 2, nY, 4]/100,2))
						SRZ->RZ_OCORREN	:= 	1
						SRZ->RZ_TIPO    := 	cQryTipo
						SRZ->RZ_TPC		:= 	cTpC
						SRZ-> (msUnlock())
					EndIf
				EndIf
				
				If Reclock ("SRZ",.T.)
					SRZ->RZ_FILIAL	:= 	aGPSVal[nX, 1]
					SRZ->RZ_CC		:= 	aGPSVal[nX, 2, nY, 1]
					SRZ->RZ_MAT		:= 	Replicate("z", nTamMat)
					SRZ->RZ_PD		:= 	aGPSVal[nX, 2, nY, 2]
					SRZ->RZ_HRS		:= 	0
					SRZ->RZ_VAL		:= 	If(aGpsVal[nX, 2, nY, 5] != 0, aGpsVal[nX, 2, nY, 5], Round(aGpsVal[nX, 2, nY, 3]*aGpsVal[nX, 2, nY, 4]/100,2))
					SRZ->RZ_OCORREN	:= 	1
					SRZ->RZ_TIPO    := 	cQryTipo
					SRZ->RZ_TPC		:= 	cTpC
					SRZ-> (msUnlock())
				EndIf
			Next nY
			For nCont := 1 To Len(aFilAux)
				If ( nPos := aScan( aEmpAux, { |aEmpAux| aEmpAux[1] == aFilAux[nCont, 1] } ) ) == 0
					aAdd( aEmpAux, { aFilAux[nCont, 1], aFilAux[nCont, 2], aFilAux[nCont, 3] } )						
				Else
					aEmpAux[nPos, 2] += aFilAux[nCont, 2]
					aEmpAux[nPos, 3] += aFilAux[nCont, 3]
				EndIf
				If aFilAux[nCont, 4] == aGPSVal[nX, 1]
					If 	Reclock ("SRZ",.T.)
						SRZ->RZ_FILIAL	:= 	aGPSVal[nX, 1]
						SRZ->RZ_CC		:= 	Replicate("z", nTamCC)
						SRZ->RZ_MAT		:= 	Replicate("z", nTamMat)
						SRZ->RZ_PD		:= 	aFilAux[nCont, 1]
						SRZ->RZ_HRS		:= 	0
						SRZ->RZ_VAL		:= 	aFilAux[nCont, 2]
						SRZ->RZ_OCORREN	:= 	aFilAux[nCont, 3]
						SRZ->RZ_TIPO    := 	cQryTipo
						SRZ->RZ_TPC		:= 	cTpC
						SRZ->(MsUnlock())
					EndIf	
				EndIf					
			Next nCont
		Next nx
			
		lGpsVal := Len(aGPSVal) > 0
		
		If lGpsVal
			For nCont := 1 To Len(aEmpAux)
				If Reclock ("SRZ",.T.)
					SRZ->RZ_FILIAL	:= 	Replicate("z", FwGetTamFilial)
					SRZ->RZ_CC		:= 	Replicate("z", nTamCC)
					SRZ->RZ_MAT		:= 	Replicate("z", nTamMat)
					SRZ->RZ_PD		:= 	aEmpAux[nCont, 1]
					SRZ->RZ_HRS		:= 	0
					SRZ->RZ_VAL		:= 	aEmpAux[nCont, 2]
					SRZ->RZ_OCORREN	:= 	aEmpAux[nCont, 3]
					SRZ->RZ_TIPO    := 	cQryTipo
					SRZ->RZ_TPC		:= 	cTpC
					SRZ->(MsUnlock())
				EndIf						
			Next nCont					
		EndIf			

	Endif		
	
End Sequence
// Gera os lancamentos na SRZ da verba refente Id 973 (INSS Empresa s/ Faturamento) de acordo
// com os registros existentes na tabela auxiliar S033 para contabilizacao
// quando for Brasil e for ocntabilizacao da Folha
If ( IsInCallStack("GPEM110") .Or. IsInCallStack("GPEM240") .Or. IsInCallStack("GPER240") ) .And. !lRatDes.And. cQryTipo == "FL" .And. cTpc == "1" .And. cPaisLoc == "BRA"
	fContIdFat()
EndIf

Return

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³fGravaSRZTop³ Autor ³ Mauricio T. Takakura³ Data ³ 26/07/05 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Gravar os lancamentos na tabela SRZ - Somente para TOP     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fGravaSRZTop()   								     		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³ Gper040  												    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function fGravaSRZTop( cQuery )
Local lQryOpened 	:= .T.

Begin Sequence
	lQryOpened := MsOpenDbf(.T., "TOPCONN", TcGenQry(NIL,NIL,cQuery), "QSRZ", .T., .T., .F., .F.)
	
	If lQryOpened					
		While QSRZ->( !Eof() )
			RecLock("SRZ",.T.)
			SRZ->RZ_FILIAL  := QSRZ->RZ_FILIAL
			SRZ->RZ_CC	    := QSRZ->RZ_CC
			SRZ->RZ_MAT	 	:= QSRZ->RZ_MAT
			SRZ->RZ_PD		:= QSRZ->RZ_PD
			SRZ->RZ_HRS	  	:= QSRZ->RZ_HRS
			SRZ->RZ_VAL  	:= QSRZ->RZ_VAL
			SRZ->RZ_OCORREN := QSRZ->RZ_OCORREN
			SRZ->RZ_TIPO	:= QSRZ->RZ_TIPO
			SRZ->RZ_TPC	  	:= QSRZ->RZ_TPC
			If lItemClvl
				SRZ->RZ_ITEM := QSRZ->RZ_ITEM
				SRZ->RZ_CLVL := QSRZ->RZ_CLVL
			EndIf
			
			//Tratamento de Integração Logix x Rh Protheus
		   	If cPaisLoc == "BRA" .And. SRZ->( FieldPos('RZ_ARELIN') ) > 0
		   		fGravArelin( QSRZ->RZ_MAT )
		   	EndIf
		   	SRZ->(MsUnlock())    

		   	QSRZ->( DbSkip() )
		EndDo
	EndIf
	QSRZ->( dbCloseArea() )                                 
	
End Sequence

Return( .T. )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao	 ³fGravaSRZ ³ Autor ³ Emerson Rosa de Souza ³ Data ³ 25.08.00     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Grava os totais de centro de custo no SRZ			 	      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³fGravaSRZ(aProvisao,nTipoProv,cFilialAnt,cCCProv,cItemAnt,cClvlAnt)
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso	 	 ³ Generico 											    	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fGravaSRZ(aProvisao,nTipoProv,cFilProv,cCCProv,cMat,cItemProv,cClvlProv,cTpc)
Local cAlias  := Alias()
Local cCodVerba

Local nTipo2
Local nTipo3
Local nPosVerba
Local lProvResc     := (GetMvRH("MV_PROVRES",,"N") == "S") 	//-- Indica se devera provisionar no mes da rescisao

Default cItemProv := ""
Default cClvlProv := ""
Default cTpc	  := "1"


If nTipoProv == 7 
	aTotCcRec := Aclone(aProvisao)
EndIf

dbSelectArea( "SRZ" )
nordem := indexord()
if !lItemClvl
  dbsetorder(5)
else
  dbsetorder(4)
endif  
For nTipo2 := 1 To _Linhas
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Linhas que nao deverao ser gravadas no arquivo			      |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nTipo2 == _Anter .Or. nTipo2 == _Atual .Or. nTipo2 == _BxTot
		Loop
	EndIf

    If (nTipo2 == _BxFer .and. !lCtabBxaFer) .or. (nTipo2 == _BxRes .and. !lCtabBxaRes )
		Loop
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grava as colunas de valores no arquivo detalhe               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nTipo3 := 1 To _Colunas
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Busca a verba e grava os lancamentos no SRZ				      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	  nPosLinha := If(nTipo2 == _NoMes, _Atual, nTipo2)
	  nPosLinha := If(lProvResc .And. nTipo2 == _BxRes .And. nTipo3 == _1Par .And. nTipoProv==_13Salar, _Bx13O, nPosLinha)
      nPosVerba := aScan(aVerba, { |X| X[1] == nTipoProv .and. X[2] == nPosLinha .and. X[3] == nTipo3 })
      cCodVerba := If( nPosVerba > 0, aVerba[nPosVerba,4], Space(3) )
      If !Empty(cCodVerba) .and. aProvisao[nTipo2,nTipo3] # 0 
           IF !lItemClvl
              mchave := cFilprov+cCCProv+cMAT+cCodVerba+cTpc+If(nTipoProv == _FerVenc, "PF", "PD")
           Else
              mchave := cFilprov+cCCProv+cItemProv+cClvlProv+cMAT+cCodVerba+cTpc+If(nTipoProv == _FerVenc, "PF", "PD")
           Endif
           dbseek(mchave)
           if eof()	
				RecLock( "SRZ", .T. )
				SRZ->RZ_FILIAL  := cFilProv
				SRZ->RZ_CC      := cCCProv
				SRZ->RZ_PD      := cCodVerba
				SRZ->RZ_HRS     := 0
				SRZ->RZ_VAL     := aProvisao[nTipo2,nTipo3]
				SRZ->RZ_OCORREN := 0
				If nTipoProv == _FerVenc .OR. nTipoProv == _RecVenc
					SRZ->RZ_TIPO    := "PF"
				ElseIf nTipoProv == _PlrSalar
					SRZ->RZ_TIPO    := "PP"
				Else
					SRZ->RZ_TIPO    :=  "PD"
				EndIf
				SRZ->RZ_TPC     := cTpc           
				SRZ->RZ_MAT  := cMat
				
				If cPaisLoc == "DOM"
					SRZ->RZ_SEMANA := cSemana
				EndIf	
				If lErpLogix
				    fGravArelin( cMat )
	         	EndIf  
				If lItemClvl
					SRZ->RZ_ITEM := cItemProv
					SRZ->RZ_CLVL := cClvlProv
				EndIf
			Else
				RecLock( "SRZ", .F. )
				SRZ->RZ_VAL     += aProvisao[nTipo2,nTipo3]
			Endif		
			SRZ->( MsUnlock() )
	   EndIf
	Next nTipo3
Next nTipo2
dbsetorder(nOrdem)
dbSelectArea( cAlias )
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao	 ³fDelRegSRZ³ Autor ³ Emerson Rosa de Souza ³ Data ³ 28.08.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Delete registro indicando que devera ser gerado um novo SRZ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fDelRegSRZ(nFol13s,cTpCFol,dDtRefBus)   					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso	 	 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fDelRegSRZ(nFl13Pr,cTpCFol,dDtRefBus)
Local cAlias    := Alias()
Local cDescLanc := ""

dbSelectArea("SRZ")
dbSetOrder(1)

cTpCFol   := If(Empty(cTpCFol), "1", cTpCFol)
dDtRefBus := If(dDtRefBus == Nil, dDataBase, dDtRefBus)
cDescLanc := If(nFl13Pr == 1, "FL", If(nFl13Pr == 2,"13", "PR")) + Space(1) +;
				 StrZero(Month(dDtRefBus),2)+StrZero(Year(dDtRefBus),4)

If SRZ->( dbSeek( Replicate("z",FWGETTAMFILIAL) + cDescLanc + Space(3) + cTpCFol ) )
	RecLock("SRZ",.F.)
	SRZ->( dbDelete() )
   	SRZ->( MsUnlock() )
EndIf
dbSelectArea(cAlias)
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao	 ³ fChkVBxa ³ Autor ³ Emerson Rosa de Souza ³ Data ³ 12.02.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Verifica se existe codigo de verba para baixa de rescisao  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fChkVBxa(aProvisao,nTipProv,nTipBxa)						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso	 	 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function fChkVBxa(aProvisao, nTipProv, nTipBxa)

Local nPosVBxa
Local cCodVBxa
Local nCntBx

nTipProv := If(nTipProv == _FerProp, _FerVenc, nTipProv)
nPosVBxa := aScan(aVerba, { |X| X[1] == nTipProv .and. X[2] == nTipBxa .and. X[3] == _Prov })
cCodVBxa := If( nPosVBxa > 0, aVerba[nPosVBxa,4], Space(3) )
If Empty( cCodVBxa )
	For nCntBx := 1 To _Colunas
		aProvisao[_NoMes,nCntBx]  -= aProvisao[nTipBxa,nCntBx]
		aProvisao[nTipBxa,nCntBx] := 0
	Next nCntBx
EndIf
Return

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³DeleteSrzTop ³ Autor ³Marinaldo de Jesus   ³ Data ³14/05/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Deletar Registros no SRZ para ambientes em TOP				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                   	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM110  													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function DeleteSrzTop(	cTpc			,;	//Conteudo para comparar com RZ_TPC
								cTipoLanc		,;	//Tipo de Lancamento a comparar com RZ_TIPO
								lLimpaSRZ		,;	//Se Limpa Todos os Tipos do SRZ
								lProvisoes		,;	//Se se refere a Provisoes
								lShowDele		,;	//Se mostra Dialogo dom barra de evolucao
								cTabela			 ;
							 )
	Local cTiposVld  	:= __TiposValidos__
	Local cRetSqlName	:= InitSqlName( "SRZ" )
	Local cNameDB      := "" 
	Local cQueryExec		:= ""
	Local cQueryCond		:= ""
	Local cQueryRecno	:= ""
	Local cQueryDelet	:= "DELETE"
	Local cSpaceRZTPC   := Space( TamSx3("RZ_TPC")[1] )
	Local cCpoRecno		:= ""
	Local cCpoDeleted	:= ""
	Local nMinRec			:= 0.00
	Local nMaxRec			:= 0.00
	Local nProcRegua		:= 0.00

	DEFAULT cTpc			:= cSpaceRZTPC
	DEFAULT cTipoLanc	:= ""
	DEFAULT lLimpaSRZ	:= .F.
	DEFAULT lProvisoes	:= .F.
	DEFAULT lShowDele	:= .F.
	
	If !Empty(cTabela)
		cRetSqlName	:= cTabela
	Endif
	
	IF ( !( lShowDele ) .and. ( lGpem110ExecInRemote ) )
		//"Preparando SRZ para a Contabilizacao"
		Processa( { || DeleteSrzTop(cTpc			,;	//Conteudo para comparar com RZ_TPC
									cTipoLanc		,;	//Tipo de Lancamento a comparar com RZ_TIPO
									lLimpaSRZ		,;	//Se Limpa Todos os Tipos do SRZ
									lProvisoes		,;	//Se se refere a Provisoes
									.T.				,;	//Se mostra Dialogo dom barra de evolucao
							 		cRetSqlName      ;
							 		);
				  },;
			   	  OemToAnsi( STR0037 );
			    )
		Return( NIL )
	EndIF
	

 	//	ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//	³O banco DB2 nao aceita o nome da tabela apos o comando DELETE			     ³
	//	ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
 	cNameDB	:= Upper(TcGetDb())
 	
	cCpoRecno 	:= "R_E_C_N_O_"

	cCpoDeleted := "SRZ.D_E_L_E_T_ "

	If ( cNameDB $ "INFORMIX" )
	  	 cCpoDeleted := cRetSqlName +  ".D_E_L_E_T_ "
	EndIf

	GPM110MRec( @nMinRec, @nMaxRec, cRetSqlName )

	IF ( lGpem110ExecInRemote )
		nProcRegua := ( ( nMaxRec - nMinRec ) + 1 )
		IF ( nProcRegua >= 1024 )
			nProcRegua := Round( ( nProcRegua / 1024 ) , 0 )
			nProcRegua := Int( nProcRegua )
		EndIF
		ProcRegua( nProcRegua )
	EndIF	
 
	IF ( nMaxRec > 0.00 )	

	   If !( cNameDB $ "DB2_ORACLE_INFORMIX_POSTGRES" )
			cQueryCond += " " + cRetSqlName
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³O Informix precisa do nome da tabela ao inves do Alias no comando DELETE³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( cNameDB $ "INFORMIX" )
			cQueryCond += " FROM " + cRetSqlName
		Else
			cQueryCond += " FROM " + cRetSqlName + " SRZ"
			cRetSqlName := "SRZ"
		EndIf

		cQueryCond	+= " WHERE "
		cQueryCond	+= "("
		cQueryCond	+=	"("
		IF !( lProvisoes )
			cQueryCond	+=		"("
			cQueryCond	+=			cRetSqlName + ".RZ_TPC='" + cTpc + "'"
			cQueryCond	+=			" OR "
			cQueryCond	+=			cRetSqlName + ".RZ_TPC='" + cSpaceRZTPC + "'"
			cQueryCond	+=		 ")"

			IF !( lLimpaSRZ )
				cQueryCond	+= " AND "
				cQueryCond	+= "("
				cQueryCond	+=		cRetSqlName + ".RZ_TIPO IN('" + cTipoLanc + "')"
				cQueryCond	+=		" OR "
				cQueryCond	+=		cRetSqlName + ".RZ_TIPO NOT IN('" + cTiposVld + "')"
				cQueryCond	+= ")"
			EndIF
		Else
			cQueryCond	+=		"("
			cQueryCond	+=			cRetSqlName + ".RZ_TPC='" + cTpc + "'"
			cQueryCond	+=			" OR "
			cQueryCond	+=			cRetSqlName + ".RZ_TPC='" + cSpaceRZTPC + "'"
			cQueryCond	+=		 ")"
			If !( lLimpaSRZ )
				cQueryCond	+= " AND "
				cQueryCond	+= "("
				cQueryCond	+= cRetSqlName + ".RZ_TIPO IN(" + cTipoLanc + ")"
				cQueryCond	+= ")"
			EndIf
		EndIF	
		cQueryCond	+=	")"
		cQueryCond	+= 	" OR "
		cQueryCond	+= 	cCpoDeleted + "='*'"
		cQueryCond	+= ")"
		
		cQueryDelet += cQueryCond
		cQueryDelet += " AND "
		
		While ( nMinRec <= nMaxRec )
			IF ( lGpem110ExecInRemote )
				IncProc()
			EndIF	
			cQueryRecno := "("
			cQueryRecno +=		cCpoRecno + " >= " + Str( nMinRec , 10 , 0 )
			cQueryRecno += 		" AND "
			cQueryRecno += 		cCpoRecno + " <= " + Str( ( nMinRec += 1024 ) , 10 , 0 )
			cQueryRecno += ")"
			cQueryExec	:= ( cQueryDelet + cQueryRecno )
			TcSqlExec( cQueryExec )
			SRZ->( dbGotop() )
		EndDo
	EndIF
Return( Nil )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³MyVerPadrao  ³ Autor ³Marinaldo de Jesus   ³ Data ³05/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verificar a Existencia do Lancamento Padrao   				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lLctopOk                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM110  													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MyVerPadrao(	cPadrao 		,;	//Codigo do Lancamento Padrao
								   nRecnoLctop	,;	//Recno do Lancamento Padrao ( Por Referencia)
								   aPadrao 		,;	//Array com os Codigos vs Recnos ( Por Referencia )
								   cAliasLctop	,;	//Alias do arquivo para pesquisa 
								   cFilLctop		,;	//Filial do arquivo para pesquisa ( Apenas Quando TOP )
								   cCpoLctop		,;	//Campo do arquivo para pesquisa ( Apenas Quando TOP )
								   cPrefixLctop	 ;	//Prefixo do campo do arquivo para pesquisa ( Apenas Quando TOP )
							    )
Local cSvAlias		:= Alias()
Local cQuery		   := ""
Local lLctopOk		:= .T.
Local nPosLctop		:= 0.00

nRecnoLctop := 0.00
IF !( lLctopOk := !( ( nPosLctop := aScan( aPadrao , { |x| x[1] == cPadrao } ) ) == 0.00 ) )

	  cQuery	:= "SELECT "
	  cQuery	+= ( cPrefixLctop+"FILIAL" )
	  cQuery	+= ", "
	  cQuery	+= cCpoLctop
	  cQuery	+= ", "
	  cQuery	+= "R_E_C_N_O_ RECNO"
	  cQuery	+= " FROM "
	  cQuery	+= InitSqlName( cAliasLctop )
	  cQuery	+= " "
	  cQuery	+= cAliasLctop
	  cQuery	+= " WHERE "
	  cQuery	+= ( ( cAliasLctop+"."+cPrefixLctop+"FILIAL='" ) + cFilLctop + "'" )
	  cQuery	+= " AND "
	  cQuery	+= ( ( cAliasLctop+"."+cCpoLctop+"='" ) + cPadrao + "'" )
	  cQuery	+= " AND "
	  cQuery	+= ( cAliasLctop + ".D_E_L_E_T_=' ' " )
	  cQuery	+= "ORDER BY " + SqlOrder( (cAliasLctop)->( IndexKey() ) )
	  cQuery  := ChangeQuery( cQuery )

	  IF MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),"MyVerLctop",.T.,.T.)
	  	IF ( lLctopOk := ( MyVerLctop->( !Eof() ) ) )
	  		nRecnoLctop := MyVerLctop->RECNO
		EndIF
		MyVerLctop->( dbCloseArea() )
	  EndIF
	
	  aAdd( aPadrao , { cPadrao , nRecnoLctop } )
Else
	nRecnoLctop := aPadrao[ nPosLctop , 02 ]
EndIF

dbSelectArea( cSvAlias )
lLctopOk := ( nRecnoLctop > 0.00 )
Return( lLctopOk  )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SRZFilReplace³ Autor ³Marinaldo de Jesus   ³ Data ³05/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Executar Replace no Campo RZ_FILIAL           				 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Ponto de Entrada GP110ACT									 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function SRZFilReplace( cFilReplace , bCondReplace )
         
Local aArea			:= GetArea()
Local aAreaSRZ		:= SRZ->( GetArea() )
Local aSrzRecnos		:= {}
Local aSrzFields		:= { "RZ_FILIAL" }
Local aSrzQuery		:= {}
Local bSrzWhile		:= { || NIL }
Local bSrzSkip		:= { || NIL }
Local cZzsInRZFil	:= ( SRZzs()[__aSzs_Pos_Fil__] )
Local nMinRec	 		:= 0.00
Local nMaxRec			:= 0.00

DEFAULT bCondReplace	:= { || .T. }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Condicao da Query Para Carga das Informacoes do SRZ		    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrzQuery	  := Array( 05 )
aSrzQuery[01] := "("
aSrzQuery[02] :=	"RZ_FILIAL NOT IN("+ cZzsInRZFil + ")"
aSrzQuery[03] := ")"
aSrzQuery[04] := " AND "
aSrzQuery[05] := "D_E_L_E_T_=' ' "

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona no Inicio do Arquivo                     		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SRZ->( dbGotop() )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carregando os Recnos                               		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
GdMontaCols(;
				NIL			,;	//01 -> Array com os Campos do Cabecalho da GetDados
				NIL			,;	//02 -> Numero de Campos em Uso
				NIL			,;	//03 -> [@]Array com os Campos Virtuais
				NIL			,;	//04 -> [@]Array com os Campos Visuais
				"SRZ"		,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
				aSrzFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
				@aSrzRecnos,;	//07 -> [@]Array unidimensional contendo os Recnos
				"SRZ"   	,;	//08 -> Alias do Arquivo Pai
				NIL			,;	//09 -> Chave para o Posicionamento no Alias Filho
				bSrzWhile	,;	//10 -> Bloco para condicao de Loop While
				NIL			,;	//11 -> Bloco para Skip no Loop While
				.F.			,;	//12 -> Se Havera o Elemento de Delecao no aCols 
				.F.			,;	//13 -> Se cria variaveis Publicas
				.F.			,;	//14 -> Se Sera considerado o Inicializador Padrao
				NIL			,;	//15 -> Lado para o inicializador padrao
				.F.			,;	//16 -> Opcional, Carregar Todos os Campos
				.T. 		,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
				aSrzQuery	,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
				.F.			,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
				.F.			,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
				.F.			,;	//21 -> Carregar Coluna Fantasma
				.T.			,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
				.F.			,;	//23 -> Verifica se Deve verificar se o campo eh usado
				.F.			,;	//24 -> Verifica se Deve verificar o nivel do usuario
				.F.	 		 ;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
			)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Substituindo o Conteudo do RZ_FILIAL               		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nMaxRec := Len( aSrzRecnos )
For nMinRec := 1 To nMaxRec
	SRZ->( dbGoto( aSrzRecnos[ nMinRec ] ) )
	IF SRZ->( !( RZ_FILIAL $ cZzsInRZFil ) .and. Eval( bCondReplace ) )
		SRZ->( RecLock( "SRZ" , .F. ) )
		SRZ->RZ_FILIAL := cFilReplace
		SRZ->( MsUnLock() )
	EndIF	
Next nMinRec

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaurando os Ponteiros de Entrada                		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RestArea( aAreaSRZ )
RestArea( aArea )
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³SRZzs()      ³ Autor ³Marinaldo de Jesus   ³ Data ³05/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Retorna Array com os zz..s. possiveis para o SRZ			 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM110                   								     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function SRZzs()

Local aSRZzs		  := Array( __Elementos_aSRZzs__ )
Local cZzsInRZFil  := ""
Local cZzsInRZCc	  := ""
Local cZzsInRZMat  := ""
Local cZzsInRZPd	  := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_FILIAL		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZFil	:= ( "'" + Replicate( "z" , FWGETTAMFILIAL ) + "'," )
cZzsInRZFil	+= ( "'" + Padr( Replicate( "z" , FWGETTAMFILIAL ) , TamSx3( "RZ_FILIAL")[1] ) + "'," )
cZzsInRZFil	+= ( "'" + Replicate( "z" , TamSx3( "RZ_FILIAL" )[1] ) + "'," )
cZzsInRZFil	+= ( "'" + Replicate( "Z" , FWGETTAMFILIAL ) + "'," )
cZzsInRZFil	+= ( "'" + Padr( Replicate( "Z" , FWGETTAMFILIAL ) , TamSx3( "RZ_FILIAL")[1] ) + "'," )
cZzsInRZFil	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_FILIAL" )[1] ) + "'" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_CC			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZCc	:= ( "'" + Replicate( "z" , 9 ) + "'," )
cZzsInRZCc	+= ( "'" + Padr( Replicate( "z" , 9 ) , TamSx3( "RZ_CC" )[1] ) + "'," )
cZzsInRZCc	+= ( "'" + Replicate( "z" , TamSx3( "RZ_CC" )[1] ) + "'" )
cZzsInRZCc	+= ( "'" + Replicate( "Z" , 9 ) + "'," )
cZzsInRZCc	+= ( "'" + Padr( Replicate( "Z" , 9 ) , TamSx3( "RZ_CC" )[1] ) + "'," )
cZzsInRZCc	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_CC" )[1] ) + "'" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_PD			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZPd	:= ( "'" + Replicate( "z" , 3 ) + "'," )
cZzsInRZPd	+= ( "'" + Padr( Replicate( "z" , 3 ) , TamSx3( "RZ_PD" )[1] ) + "'," )
cZzsInRZPd	+= ( "'" + Replicate( "z" , TamSx3( "RZ_PD" )[1] ) + "'" )
cZzsInRZPd	+= ( "'" + Replicate( "Z" , 3 ) + "'," )
cZzsInRZPd	+= ( "'" + Padr( Replicate( "Z" , 3 ) , TamSx3( "RZ_PD" )[1] ) + "'," )
cZzsInRZPd	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_PD" )[1] ) + "'" )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_MAT			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cZzsInRZMat	:= ( "'" + Replicate( "z" , 6 ) + "'," )
cZzsInRZMat	+= ( "'" + Padr( Replicate( "z" , 6 ) , TamSx3( "RZ_MAT" )[1] ) + "'," )
cZzsInRZMat	+= ( "'" + Replicate( "z" , TamSx3( "RZ_MAT" )[1] ) + "'" )
cZzsInRZMat	+= ( "'" + Replicate( "Z" , 6 ) + "'," )
cZzsInRZMat	+= ( "'" + Padr( Replicate( "Z" , 6 ) , TamSx3( "RZ_MAT" )[1] ) + "'," )
cZzsInRZMat	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_MAT" )[1] ) + "'" )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_ITEM			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lItemClvl
	cZzsInRZIt	:= ( "'" + Replicate( "z" , 9 ) + "'," )
	cZzsInRZIt	+= ( "'" + Padr( Replicate( "z" , 9 ) , TamSx3( "RZ_ITEM" )[1] ) + "'," )
	cZzsInRZIt	+= ( "'" + Replicate( "z" , TamSx3( "RZ_ITEM" )[1] ) + "'" )
	cZzsInRZIt	+= ( "'" + Replicate( "Z" , 9 ) + "'," )
	cZzsInRZIt	+= ( "'" + Padr( Replicate( "Z" , 9 ) , TamSx3( "RZ_ITEM" )[1] ) + "'," )
	cZzsInRZIt	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_ITEM" )[1] ) + "'" )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define os "zz..." possiveis para o campo RZ_CLVL			      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cZzsInRZCl	:= ( "'" + Replicate( "z" , 9 ) + "'," )
	cZzsInRZCl	+= ( "'" + Padr( Replicate( "z" , 9 ) , TamSx3( "RZ_CLVL" )[1] ) + "'," )
	cZzsInRZCl	+= ( "'" + Replicate( "z" , TamSx3( "RZ_CLVL" )[1] ) + "'" )
	cZzsInRZCl	+= ( "'" + Replicate( "Z" , 9 ) + "'," )
	cZzsInRZCl	+= ( "'" + Padr( Replicate( "Z" , 9 ) , TamSx3( "RZ_CLVL" )[1] ) + "'," )
	cZzsInRZCl	+= ( "'" + Replicate( "Z" , TamSx3( "RZ_CLVL" )[1] ) + "'" )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega o Array                                 		         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSRZzs[__aSzs_Pos_Fil__] := cZzsInRZFil
aSRZzs[__aSzs_Pos_Cc__ ] := cZzsInRZCc
aSRZzs[__aSzs_Pos_Mat__] := cZzsInRZMat
aSRZzs[__aSzs_Pos_Pd__ ] := cZzsInRZPd
If lItemClvl
	aSRZzs[__aSzs_Pos_It__ ] := cZzsInRZIt	 
	aSRZzs[__aSzs_Pos_Cl__ ] := cZzsInRZCl	 
EndIf
Return( aClone( aSRZzs ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpem110InRemote³Autor³Marinaldo de Jesus   ³ Data ³24/06/2003³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Verifica se o Processo de Contabilizacao esta sendo Executado³
³          ³via Remote													 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM110                   								     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpem110InRemote( lExecInRemote )

DEFAULT lExecInRemote := .T.

lGpem110ExecInRemote := lExecInRemote
IF ( ( Type("__cInternet") <> "U" ) .and. ( __cInternet == "AUTOMATICO" ) )
	lGpem110ExecInRemote := .F.
EndIF
Return( NIL )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡„o    ³Gpem110Pergunte³Autor³Mauricio T. Takakura ³ Data ³22/07/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡„o ³Tratamento das Perguntes                                     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³NIL                                                    	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observa‡„o³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³GPEM110                   								     ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function Gpem110Pergunte()

Local lOk

lOk := Pergunte("GPE110A",.T. )

If lOk 
	cTipoCont := MV_PAR01
	If cTipoCont == 1
		If cPaisLoc == "BRA"
			Pergunte("GPE110D",.T. )
		Else
			Pergunte("GPE110B",.T. )
		EndIf
	ElseIf cTipoCont == 2
		Pergunte("GPE110C",.T. )
	ElseIf cTipoCont == 3
		If cPaisLoc == "BRA"
			Pergunte("GPE110D",.T. )
		Else
			Pergunte("GPE110B",.T. )
		EndIf
		Pergunte("GPE110C",.T. )
	EndIf
EndIf
Return( .T. )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
					F U N C O E S     U T I L I Z A D A S    E M     S X B 
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ/*/

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o    ³Gpem110Per³Autor³Mauricio T. Takakura       ³Data³04/08/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³Validar o Periodo digitado na Consulta Padrao				³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Uso       ³Consulta Padrao (SXB)				                  	   	³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ/*/
Function Gpm110ValPer( cProc, cRoteir, cPer )

Local cOldAlias := Alias()
Local cFilRCH	:= xFilial("RCH")
Local cRotBlank := Space( GetSx3Cache( "RCH_ROTEIR", "X3_TAMANHO" ) )
Local cMsg
Local lRet 		:= .T.

DEFAULT cProc 	:= Space( GetSx3Cache("RCH_PROCES", "X3_TAMANHO") )
DEFAULT cRoteir	:= Space( GetSx3Cache("RCH_ROTEIR", "X3_TAMANHO") )

Begin Sequence

	If !( lRet := NaoVazio() )
		Break
	EndIf

	DbSelectArea( "RCH" )
	RCH->( dbsetOrder( 4 ) )
	If !Empty( cPer )
		RCH->( dbSeek( cFilRCH + cProc + cRoteir + cPer , .F. ) )
		If Eof() 
			RCH->( dbSeek( cFilRCH + cProc + cRotBlank + cPer , .F. ) )
		EndIf
		cMsg := STR0051 // "Periodo nao Cadastrado!"
	Else
		RCH->( dbSeek( cFilRCH + cProc + cRoteir, .F. ) )
		If Eof()
			RCH->( dbSeek( cFilRCH + cProc + cRotBlank, .F. ) )
		EndIf
		cMsg := STR0051 // "Roteiro nao Cadastrado!"
	EndIf

	If RCH->( Eof() )
		lRet := .F.
		MsgInfo( cMsg )
	Else
		cPeriodo  := cPer
		cProcesso := cProc
		cRoteiro  := cRoteir
		If !Empty( RCH->RCH_ROTEIR )
			cRot := cRoteiro
		Else
			cRot := cRotBlank	 
		EndIf
	EndIf

End Sequence

DbSelectArea(cOldAlias)
Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM111   ºAutor  ³Silvia Taguti       º Data ³  03/15/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Contabilizacao Provisao - Schedulle                         º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
                                                 
Function GPEM111()

Private cTipo := "P"

GPEM110Tip(cTipo)

Return (Nil)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM112   ºAutor  ³Silvia Taguti       º Data ³  03/15/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Contabilizacao Provisao/Folha - Schedulle                   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GPEM112()

Private cTipo := "M"

GPEM110Tip(cTipo)

Return(Nil)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³GPEM113   ºAutor  ³Kelly Soares        º Data ³  12/02/08   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Contabilizacao Folha - Schedule                  			  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³Mexico                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function GPEM113()

Private cTipo := "F"

GPEM110Tip(cTipo)

Return(Nil)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fGravArelin  ºAutor  ³Tiago Malta      º Data ³  10/09/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Integração Logix X Rh Protheus.                  			  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function fGravArelin( cMat )

Local cDepto  := space(10)
Local cArelin := space(10) 

If cMat <> nil .AND. !EMPTY(cMat) .AND. GetMvRH("MV_ERPLOGI",,"2") == "1"
	SRA->( dbSetOrder(1) )
	SRA->( dbSeek( xFilial('SRA') + cMat ) )
	cDepto := SRA->RA_DEPTO
	If !Empty(cDepto)
		SQB->( dbSetOrder(1) )
		SQB->( dbSeek( xFilial('SQB') + cDepto ) )
		cArelin := SQB->QB_ARELIN 
		
		IF !EMPTY(cArelin)
			SRZ->RZ_ARELIN := cArelin
		ENDIF 
	EndIf
ENDIF
Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³fValidDataºAutor  ³Luciana Silveira    º Data ³  02/02/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function fValidData() 
Local lRet:= .T. 
Private cMesAnoCtab := mv_par01
Private aMesValid:= { "01","02","03","04","05","06","07","08","09","10","11","12" }

//Verifica se a competencia informada e invalida e exibe uma mensagem de alerta
If aScan( aMesValid, Subst( cMesAnoCtab, 1 , 2 ) ) == 0 
	lRet := .F.
	Aviso(STR0056,STR0057 + cMesAnoCtab + STR0058 + CHR(13)+CHR(10) + STR0059,{"Ok"}) //Formato Invalido  
Endif 
Return (lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³fGrvRateio³ Autor ³ Kelly Soares          ³ Data ³ 20.06.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Grava verbas rateadas no SRZ.                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ fGrvRateio()                            					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso	 	 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function fGrvRateio(dDataBus,lPLR)

Local aArea		:= GetArea()
Local cChave	:= (cTBLXPROV)->PR_FILIAL+(cTBLXPROV)->PR_MAT+DTOS(dDataBus)
Local nInd		:= If(lItemClVl,4,5)
Local cInd		:= "" 
Local nTipoPr	:= ""
Local cTipo		:= ""

DEFAULT lPLR		:= .F. 

DbSelectArea("RHT")
DbSetOrder(RetOrdem("RHT","RHT_FILIAL+RHT_MAT+DTOS(RHT_DTCALC)+RHT_TPPROV"))

If RHT->(DbSeek(cChave))
	While RHT->(!Eof()) .And. RHT->(RHT_FILIAL+RHT_MAT+DTOS(RHT_DTCALC)) == cChave
		If RHT->RHT_TPPROV $ "1-2"
			nTipoPr := "PF"
		ElseIf RHT->RHT_TPPROV $ "3"
			nTipoPr := "PD"
		ElseIf RHT->RHT_TPPROV $ "4"
			nTipoPr := "PP"
		Else
			nTipoPr := "PR"
		EndIf
		
		If !lProvFer .And. (RHT->RHT_TPPROV $ "1-2") 
			RHT->(dbSkip())
			Loop
		Endif
		
		If !lProv13o .And. (RHT->RHT_TPPROV $ "3") 
			RHT->(dbSkip())
			Loop
		Endif
		
		If !lPlr .And. (RHT->RHT_TPPROV $ "4")
			RHT->(dbSkip())
			Loop
		Endif
		
		If ( (cTBLXPROV)->PR_TIPMOVI == 5 .And. !(RetValSrv(RHT->RHT_VERBA, (cTBLXPROV)->PR_FILIAL, "RV_CODFOL") $ "0239/0240/0241/0260/0261/0419/0270/0271/0272/0273/0424") ) .Or.;
			( (cTBLXPROV)->PR_TIPMOVI == 6 .And. RetValSrv(RHT->RHT_VERBA, (cTBLXPROV)->PR_FILIAL, "RV_CODFOL") $ "0239/0240/0241/0260/0261/0419/0270/0271/0272/0273/0424") 
			RHT->(dbSkip())
			Loop
		Endif

		If lItemClVl
		  	cInd := RHT->RHT_FILIAL+RHT->RHT_CC+RHT->RHT_ITEM+RHT->RHT_CLVL+RHT->RHT_MAT+RHT->RHT_VERBA+"1"+nTipoPr
		Else
			cInd := RHT->RHT_FILIAL+RHT->RHT_CC+RHT->RHT_MAT+RHT->RHT_VERBA+"1"+nTipoPr
		Endif	


		If !RHT->RHT_VALOR == 0.00
	        SRZ->(dbSetOrder(nInd)) 
			If SRZ->(DbSeek(cInd))
				RecLock( "SRZ", .F. )
		       	SRZ->RZ_VAL += RHT->RHT_VALOR
		       	If SRZ->RZ_VAL == 0.00
		       		dbDelete() //O registro é excluído pois não pode haver contabilização de valor zerado.
		       	Endif
	    	   	SRZ->( MsUnlock() )
			Else
		      RecLock( "SRZ", .T. )
				SRZ->RZ_FILIAL  := RHT->RHT_FILIAL
				SRZ->RZ_CC      := RHT->RHT_CC
				SRZ->RZ_PD      := RHT->RHT_VERBA
				SRZ->RZ_HRS     := 0
				SRZ->RZ_VAL     := RHT->RHT_VALOR
				SRZ->RZ_OCORREN := 0
				SRZ->RZ_TIPO    := nTipoPr
				SRZ->RZ_TPC     := "1"           
				SRZ->RZ_MAT  := RHT->RHT_MAT
				If lItemClVl
					SRZ->RZ_ITEM := RHT->RHT_ITEM
					SRZ->RZ_CLVL := RHT->RHT_CLVL
				Endif			
				SRZ->( MsUnlock() )
			Endif
				
			//Acumula valor no array de totais
			If lItemClVl
				If (nPos := aScan(aTotAux, { |X| X[1] == RHT->RHT_FILIAL .and. X[2] == RHT->RHT_CC .and. X[3] == RHT->RHT_VERBA .and. ;
				    X[6] == RHT->RHT_ITEM .and. X[7] == RHT->RHT_CLVL })) > 0
					aTotAux[nPos,4] += RHT->RHT_VALOR
				Else
					aAdd(aTotAux,{RHT->RHT_FILIAL,RHT->RHT_CC,RHT->RHT_VERBA,RHT->RHT_VALOR,nTipoPr,RHT->RHT_ITEM,RHT->RHT_CLVL})
	     		Endif
			Else
				If (nPos := aScan(aTotAux, { |X| X[1] == RHT->RHT_FILIAL .and. X[2] == RHT->RHT_CC .and. X[3] == RHT->RHT_VERBA })) > 0
					aTotAux[nPos,4] += RHT->RHT_VALOR
				Else
					aAdd(aTotAux,{RHT->RHT_FILIAL,RHT->RHT_CC,RHT->RHT_VERBA,RHT->RHT_VALOR,nTipoPr})
				Endif  
			Endif
		Endif
		RHT->(DbSkip())
	Enddo
Endif

RestArea(aArea)
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³ SRZTotAux³ Autor ³ Kelly Soares          ³ Data ³ 27.04.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Adiciona totais de provisao no SRZ.         			 	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ SRZTotAux(aTot)                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso	 	 ³ Generico 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function SRZTotAux(aTot,cTpc)
Local nCont		:= 1

Default cTpc		:= "1"

aSort(aTot,,,{|x,y| x[1]+x[2]+x[3] < y[1]+y[2]+y[3] })

While nCont <= Len(aTot)            
	If aTot[nCont,4] # 0
		RecLock( "SRZ", .T. )
		SRZ->RZ_FILIAL  := aTot[nCont,1]
		SRZ->RZ_CC      := aTot[nCont,2]
		SRZ->RZ_PD      := aTot[nCont,3]
		SRZ->RZ_HRS     := 0
		SRZ->RZ_VAL     := aTot[nCont,4]
		SRZ->RZ_OCORREN := 0
		SRZ->RZ_MAT     := Replicate('z',TamSX3("RA_MAT")[1])
		SRZ->RZ_TIPO    := aTot[nCont,5]
		SRZ->RZ_TPC     := cTpc
		If lItemClVl
			SRZ->RZ_ITEM	:= aTot[nCont,6]
			SRZ->RZ_CLVL	:= aTot[nCont,7]
		Endif
		SRZ->( MsUnlock() )      
	Endif
	nCont++
Enddo
Return nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Gpem110PCOSrv  ³Autor³Marinaldo de Jesus  ³ Data ³31/10/2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Carrega Array das Verbas Vs Lancamentos Padroes do PCO	  ³±±
±±³          ³Baseado na funcao Gpem110SrvLanc() para manter a mesma      ³±±
±±³          ³estrutura do array com relacao a lanctos padroes CTB        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³<Vide Parametros Formais>              				  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso 	     ³GPEM110     												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function Gpem110PCOSrv( cSrvFilDe , cSrvFilAte , aLancPCO )
Local aSrvReturn	   := Array( __Elementos_aSrvReturn__ )
Local aSrvCols		:= {}
Local aSrvHeader	   := {}
Local aSrvRecnos	   := {}
Local aSrvFields	   := { "RV_FILIAL", "RV_COD" , "RV_LANCPCO" }
Local aSrvQuery 	   := {}
Local aRecLcPco		:= {}
Local bSrvWhile		:= { |cKey,cFil| ( ( cFil := RV_FILIAL ) >= cSrvFilDe ) .and. ( cFil <= cSrvFilAte ) }
Local bSrvSkip		:= { || NIL }
Local cAliasLcPco	:= "AKC"
Local cCpoLcPco		:= "AKC_SEQ"
Local cFilLcPco		:= xFilial( cAliasLcPco )
Local cPrefixLcPco  := ( PrefixoCpo( cAliasLcPco ) + "_" )
Local lTudoOk		   := .F.
Local nPosFil		   := 0.00
Local nPosPd		   := 0.00
Local nPosLcPco	   := 0.00
Local nRecnoLcPco   := 0.00
Local lEqualFil	   := .F.
Local cSpcLcPco	   := Space( TamSx3("RV_LANCPCO")[1] )

DEFAULT cSrvFilDe	:= cFilAnt
DEFAULT cSrvFilAte	:= cSrvFilDe
DEFAULT aLancPCO	   := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine as Filiais De/Ate                   				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cSrvFilDe	:= xFilial( "SRV" , cSrvFilDe  )
cSrvFilAte	:= xFilial( "SRV" , cSrvFilAte )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Anula bSrvWhile caso as Filiais sejam Iguais				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF ( lEqualFil := ( cSrvFilDe == cSrvFilAte ) )
	bSrvWhile := NIL
EndIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine bSrvSkip Quando TOP                 				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bSrvSkip := { |lVerPadrao|	( lVerPadrao := ( MyVerLancPCO( RV_LANCPCO , @nRecnoLcPco , @aLancPCO , cAliasLcPco , cFilLcPco , cCpoLcPco , cPrefixLcPco ) ) ) ,;
							IF(;
								( lVerPadrao ) ,;
								aAdd( aRecLcPco , nRecnoLcPco ),;
								 NIL;
							   ),;
							 !( lVerPadrao );
			}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Condicao da Query Para Carga das Informacoes do SRV		      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvQuery	   := Array( 09 )
aSrvQuery[01] := "("
aSrvQuery[02] := 	"RV_FILIAL>='"+cSrvFilDe+"'"
aSrvQuery[03] := 	" AND "
aSrvQuery[04] := 	"RV_FILIAL<='"+cSrvFilAte+"'"
aSrvQuery[05] := ")"
aSrvQuery[06] := " AND "
aSrvQuery[07] := "RV_LANCPCO<>'"+cSpcLcPco+"'"
aSrvQuery[08] := " AND "
aSrvQuery[09] := "D_E_L_E_T_=' ' "

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega as Informacoes do SRV                				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvCols := GdMontaCols(;
							@aSrvHeader	,;	//01 -> Array com os Campos do Cabecalho da GetDados
							NIL			,;	//02 -> Numero de Campos em Uso
							NIL			,;	//03 -> [@]Array com os Campos Virtuais
							NIL			,;	//04 -> [@]Array com os Campos Visuais
							"SRV"		,;	//05 -> Opcional, Alias do Arquivo Carga dos Itens do aCols
							aSrvFields	,;	//06 -> Opcional, Campos que nao Deverao constar no aHeader
							@aSrvRecnos	,;	//07 -> [@]Array unidimensional contendo os Recnos
							"SRV"   	,;	//08 -> Alias do Arquivo Pai
							cSrvFilDe	,;	//09 -> Chave para o Posicionamento no Alias Filho
							bSrvWhile	,;	//10 -> Bloco para condicao de Loop While
							bSrvSkip	,;	//11 -> Bloco para Skip no Loop While
							.F.			,;	//12 -> Se Havera o Elemento de Delecao no aCols 
							.F.			,;	//13 -> Se cria variaveis Publicas
							.F.			,;	//14 -> Se Sera considerado o Inicializador Padrao
							NIL			,;	//15 -> Lado para o inicializador padrao
							.F.			,;	//16 -> Opcional, Carregar Todos os Campos
							.T. 		,;	//17 -> Opcional, Nao Carregar os Campos Virtuais
							aSrvQuery	,;	//18 -> Opcional, Utilizacao de Query para Selecao de Dados
							.F.			,;	//19 -> Opcional, Se deve Executar bKey  ( Apenas Quando TOP )
							.T.			,;	//20 -> Opcional, Se deve Executar bSkip ( Apenas Quando TOP )
							.F.			,;	//21 -> Carregar Coluna Fantasma
							.T.			,;	//22 -> Inverte a Condicao de aNotFields carregando apenas os campos ai definidos
							.F.			,;	//23 -> Verifica se Deve verificar se o campo eh usado
							.F.			,;	//24 -> Verifica se Deve verificar o nivel do usuario
							.F.	 		 ;	//25 -> Verifica se Deve Carregar o Elemento Vazio no aCols
					)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se carregou as Verbas Vs Lancamentos                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF ( lTudoOk := ( Len( aSrvRecnos ) > 0.00 ) )
	nPosFil	:= GdFieldPos( "RV_FILIAL"	, aSrvHeader )
	nPosPd		:= GdFieldPos( "RV_COD"		, aSrvHeader )
	nPosLcPco	:= GdFieldPos( "RV_LANCPCO"	, aSrvHeader )
EndIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Alimenta o aSrvReturn                        				      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aSrvReturn[ __aSrvReturn_TudoOK__ 		] := lTudoOk
aSrvReturn[ __aSrvReturn_aCols__		] := aClone( aSrvCols )
aSrvReturn[ __aSrvReturn_aHeader__		] := aClone( aSrvHeader )
aSrvReturn[ __aSrvReturn_aRecnos__		] := aClone( aSrvRecnos )
aSrvReturn[ __aSrvReturn_nPosFil__		] := nPosFil
aSrvReturn[ __aSrvReturn_nPosPD__		] := nPosPd
aSrvReturn[ __aSrvReturn_nPosLctop__	] := nPosLcPco
aSrvReturn[ __aSrvReturn_aRecLctop__	] := aClone( aRecLcPco )
aSrvReturn[ __aSrvReturn_cAliasLctop__	] := cAliasLcPco
Return( aClone( aSrvReturn ) )

/*
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Funcao    ³MyVerLancPCO ³ Autor ³Marinaldo de Jesus   ³ Data ³31/10/2005³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descricao ³Verificar a Existencia do Lancamento Padrao do PCO   		 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³<Vide Parametros Formais>									 ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Retorno   ³lLcPcoOk                                               	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Observacao³                                                      	     ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso      ³GPEM110  													 ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Static Function MyVerLancPCO(	cSeqLancPCO	,;	//SequenciaLancamento Padrao PCO
								   nRecnoLcPCO	,;	//Recno da Seq Lancamento Padrao PCO( Por Referencia)
								   aLancPCO 		,;	//Array com os Codigos vs Recnos ( Por Referencia )
								   cAliasLcPCO	,;	//Alias do arquivo para pesquisa 
								   cFilLcPCO		,;	//Filial do arquivo para pesquisa ( Apenas Quando TOP )
								   cCpoLcPCO		,;	//Campo do arquivo para pesquisa ( Apenas Quando TOP )
								    cPrefixLcPCO	 ;	//Prefixo do campo do arquivo para pesquisa ( Apenas Quando TOP )
							     )
Local cSvAlias		:= Alias()
Local cQuery		   := ""
Local lLcPCOOk		:= .T.
Local nPosLcPCO		:= 0.00

nRecnoLcPCO := 0.00

IF !( lLcPCOOk := !( ( nPosLcPCO := aScan( aLancPCO , { |x| x[1] == cSeqLancPCO } ) ) == 0.00 ) )
	 cQuery	:= "SELECT "
	 cQuery	+= ( cPrefixLcPCO+"FILIAL" )
	 cQuery	+= ", "
	 cQuery	+= cCpoLcPCO
	 cQuery	+= ", "
	 cQuery	+= "R_E_C_N_O_ RECNO"
	 cQuery	+= " FROM "
	 cQuery	+= InitSqlName( cAliasLcPCO )
	 cQuery	+= " "
	 cQuery	+= cAliasLcPCO
	 cQuery	+= " WHERE "
	 cQuery	+= ( ( cAliasLcPCO+"."+cPrefixLcPCO+"FILIAL='" ) + cFilLcPCO + "'" )
	 cQuery	+= " AND "
	 cQuery	+= ( cAliasLcPCO+".AKC_PROCES='"+__LCTO_PCO_FOLHA__+"'" )
	 cQuery	+= " AND "
	 cQuery	+= ( ( cAliasLcPCO+"."+cCpoLcPCO+"='" ) + cSeqLancPCO + "'" )
	 cQuery	+= " AND "
	 cQuery	+= ( cAliasLcPCO + ".D_E_L_E_T_=' ' " )
	 cQuery	+= " ORDER BY " + SqlOrder( (cAliasLcPCO)->( IndexKey() ) )
	 cQuery  := ChangeQuery( cQuery )
	 If MsOpenDbf(.T.,"TOPCONN",TcGenQry(NIL,NIL,cQuery),"MyVerLcPCO",.T.,.T.)
		  If ( lLcPCOOk := ( MyVerLcPCO->( !Eof() ) ) )
		 	   nRecnoLcPCO := MyVerLcPCO->RECNO
		  EndIF
		  MyVerLcPCO->( dbCloseArea() )
	 EndIF
    aAdd( aLancPCO , { cSeqLancPCO , nRecnoLcPCO } )
Else
	nRecnoLcPCO := aLancPCO[ nPosLcPCO , 02 ]
EndIF

dbSelectArea( cSvAlias )
lLcPCOOk := ( nRecnoLcPCO > 0.00 )
Return( lLcPCOOk  )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ReabSRZ   ºAutor  ³Ricardo Berti       º Data ³  01/11/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Reabre compart SRZ                                          º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function ReabSRZ()

Local aArea

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Reabre SRZ padrao											            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aArea := GetArea()

If (Select("SRZ") > 0.00 )
	SRZ->( dbCloseArea() )
	ChkFile( "SRZ" )
EndIf

RestArea( aArea )

Return Nil

/*/
ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿
³Fun‡…o	   ³fGravaNTop   ³ Autor ³ Equipe de RH       ³ Data ³          ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´
³Descri‡…o ³ Grava Guia de INSS				                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Sintaxe   ³fGrava()										     		³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³Parametros³                                                            ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ Uso	   ³ Gper040  												    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
Function fGravaNTop(aProv,aDesc,aBase,nTipo,cMat)

Local nCon
Local nConta
Local nMaximo

Private aArray:={aProv,aDesc,aBase}  // Controlador de Arrays

nMaximo := Max(Max(Len(aProv),Len(aDesc)),Len(aBase))

For nConta :=1 TO nMaximo
	dbSelectArea( "SRZ" )
	
	If nTipo == 1  			// gravacao por funcionario
		M->RZ_FILIAL := cFilAnterior
		M->RZ_CC     := cCcto
	ElseIf nTipo == 2		// gravacao por CC
		M->RZ_FILIAL := cFilAnterior
		M->RZ_CC     := cCcAnt
	ElseIf nTipo == 3		// gravacao por Filial 
		M->RZ_FILIAL := cFilAnterior
		M->RZ_CC     := "zzzzzzzzz"
	ElseIf nTipo == 4		// gravacao por Empresa
		M->RZ_FILIAL := Replicate("z",FWGETTAMFILIAL)
		M->RZ_CC     := "zzzzzzzzz"
	EndIf
	
	For nCon := 1 To 3
		If nConta <= Len(aArray[nCon]) .and. ( aArray[nCon,nConta,2] > 0 .or. aArray[nCon,nConta,3] > 0 )
		
			If IsInCallStack("fImpCc") .And. IsInCallStack("GPEM110") .And. !lContabCC .And.;
				aScan( aGpsVal, { |x| x[2] == aArray[nCon,nConta,1] } ) > 0
				RecLock("SRZ",.T.)
				SRZ->RZ_FILIAL  := M->RZ_FILIAL
				If cPaisLoc == "URU" .And. aArray[nCon,nConta,1]== aCodFol[312,1]
					SRZ->RZ_CC		:= cCCCuota
				Else
					SRZ->RZ_CC      := M->RZ_CC
				Endif
				SRZ->RZ_PD      := aArray[nCon,nConta,1] // usa o Controlador
				SRZ->RZ_HRS     := aArray[nCon,nConta,2]
				SRZ->RZ_VAL     := aArray[nCon,nConta,3]
				SRZ->RZ_OCORREN := aArray[nCon,nConta,5]
				SRZ->RZ_TPC     := cTpC
				SRZ->RZ_TIPO    := "FL"
				If Type("SRZ->RZ_MAT") # "U"
					SRZ->RZ_MAT     := "GPS"
				Endif
				If cPaisLoc == "DOM"
					SRZ->RZ_SEMANA := cSemana
				Endif			
				MsUnlock()
			EndIf			
		
			RecLock("SRZ",.T.)
			SRZ->RZ_FILIAL  := M->RZ_FILIAL
         	If cPaisLoc == "URU" .And. aArray[nCon,nConta,1]== aCodFol[312,1]
         		SRZ->RZ_CC		:= cCCCuota
         	Else
				SRZ->RZ_CC      := M->RZ_CC
			EndIf
			SRZ->RZ_PD      := aArray[nCon,nConta,1] // usa o Controlador
			SRZ->RZ_HRS     := aArray[nCon,nConta,2]
			SRZ->RZ_VAL     := aArray[nCon,nConta,3]
			SRZ->RZ_OCORREN := aArray[nCon,nConta,6]
			SRZ->RZ_TPC     := cTpC
			SRZ->RZ_TIPO    := "FL"
			If Type("SRZ->RZ_MAT") # "U"
				SRZ->RZ_MAT     := cMat
			EndIf
			If cPaisLoc == "DOM"
				SRZ->RZ_SEMANA := Semana
			EndIf 
			
			//Tratamento de Integração Logix x Rh Protheus
			IF SRZ->( FieldPos('RZ_ARELIN') ) > 0 
				fGravArelin( cMat )
			ENDIF
			
			MsUnlock()
		EndIf
	Next nCon
Next nConta

If nTipo <> 1
	RecLock("SRZ",.T.)
	If nTipo == 2
		SRZ->RZ_FILIAL  := cFilAnterior
		SRZ->RZ_CC      := cCcAnt
		SRZ->RZ_OCORREN := nCinss
	ElseIf nTipo == 3
		SRZ->RZ_FILIAL  := cFilAnterior
		SRZ->RZ_CC      := "zzzzzzzzz"
		SRZ->RZ_OCORREN := nFinss 
	ElseIf nTipo == 4
		SRZ->RZ_FILIAL  := Replicate("z",FWGETTAMFILIAL)
		SRZ->RZ_CC      := "zzzzzzzzz"
		SRZ->RZ_OCORREN := nEinss 
	EndIf
	SRZ->RZ_PD   := "zzz"
	SRZ->RZ_TPC  := cTpC					  // grava tipo de contrato
	SRZ->RZ_TIPO := "FL"					 // grava tipo de lacto contabil
	SRZ->RZ_HRS  := nTipo
	If TYPE("SRZ->RZ_MAT") # "U"
		SRZ->RZ_MAT  := cMat
	EndIf
	If cPaisLoc == "DOM"	   
		SRZ->RZ_SEMANA := Semana
	EndIf
	
	//Tratamento de Integração Logix x Rh Protheus
	IF SRZ->( FieldPos('RZ_ARELIN') ) > 0
		fGravArelin( cMat )
	ENDIF
	
	MsUnlock()
EndIf
dbSelectArea( "SRA" )

Return Nil


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³ fContIdFat  ³ Autor ³ Allyson M          ³ Data ³ 16.04.12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Gera no SRZ os registros ref. verba de id 973              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GPEM110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Function fContIdFat()
Local aArea			:= GetArea()
Local aAreaSM0		:= SM0->( GetArea() )
Local aAreaSRZ		:= SRZ->( GetArea() )
Local aCodFolha	 	:= {}
Local aFilProc		:= {}
Local aInssEmp		:= {}
Local aRegSRZ		:= {}
Local aRegSRZAux	:= {}
Local aTabS033 		:= {}
Local cCCusto		:= ""
Local cCodEmp		:= SM0->M0_CODIGO
//Local cFilDe		:= mv_par08//Filial de
//Local cFilAte		:= mv_par09//Filial ate
Local cMat			:= ""
Local cMesAno		:= ""
Local cRecFatEmp	:= "N"
Local cVb318		:= ""
Local cVb973		:= ""
Local lGera		    := .F.
Local lRecDesTot    := .F.
Local lSRVComp	    := Empty( xFilial( "SRV" ) )
Local nCont			:= 0
Local nContFil		:= 0
Local nFatDes		:= 0
Local nFatFol		:= 0
Local nEmpFatTot	:= 0
Local nEmpFatDes	:= 0
Local nEmpFatFol	:= 0
Local nQtdFat		:= 0
Local nLenSRZ		:= 0
Local nProp			:= 0
Local nTamCC        := TamSx3( "RZ_CC" )[1]
Local nTamMat		:= TamSx3( "RZ_MAT" )[1]
Local nTotFat		:= 0
Local nTpc			:= 0

If IsInCallStack("GPEM240") .Or. IsInCallStack("GPER240")
	cMesAno := If( Type("cMesAnoCtab") != "U", cMesAnoCtab, mv_par07 )
Else
	cMesAno	:= substr(cPeriodo,5,2)+substr(cPeriodo,1,4)
EndIf 

cCCusto		:= Replicate( "0", nTamCC - 1 ) + "1"
cMat		:= Replicate( "0", nTamMat - 1 ) + "1"

//Monta o array das filiais a processar.
dbSelectArea("SM0")
dbSeek( cCodEmp, .T. )
While !EoF() .And. cCodEmp == SM0->M0_CODIGO
	aAdd( aFilProc, { FWGETCODFILIAL, 0.0, 0.0 } )
	SM0->( dbSkip() )
EndDo

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega Parametro Inss Empresa                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If fInssEmp(cFilAnt,@aInssEmp,,SubStr( cMesAno, 3, 4 ) + SubStr( cMesAno, 1, 2 ))
	//Verifica se a empresa efetua recolhimento da contribuicao patronal s/ o faturamento
	For nTpc := 1 To Len( aInssEmp[27] )
		cRecFatEmp	:= aInssEmp[27, nTpc]//X14_RECFAT
		If cRecFatEmp $ "S*M*C"
			Exit
		EndIf
	Next nTpc
Endif

//Monta variavel dDataRef da data de competencia em aberto p/ busca do fCarrTab
dDataRef := cToD( "01/" + SubStr( cMesAno, 1, 2 ) + "/" + SubStr( cMesAno, 3, 4 ) )
//Chama fCarrTab para carregar tabela auxiliar S033
fCarrTab( @aTabS033, "S033", dDataRef ,.T.)

//Apura a receita bruta total da empresa para verificar se havera ou nao o calculo sobre o faturamento
aEval(aTabS033, {|aTabS033| nEmpFatTot += aTabS033[7] } )
//Apura a receita bruta que nao e' sobre as atividades beneficiadas da Lei no. 12.546/2011
aEval(aTabS033, {|aTabS033| If( aTabS033[6] == "2", nEmpFatFol += aTabS033[7], ) } )	
//Apura a receita bruta que nao e' sobre as atividades beneficiadas da Lei no. 12.546/2011
aEval(aTabS033, {|aTabS033| If( aTabS033[6] == "1", nEmpFatDes += aTabS033[7], ) } )	
//Verifica se a receita desonerada da empresa e' superior a 95% do total
lRecDesTot := ( nEmpFatDes / nEmpFatTot >= 0.95 )
/*
ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³Somente havera recolhimento sobre o Faturamento se o total nao³
³desonerado da empresa for MENOR que 95% do total geral        ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ*/
lGera := ( cRecFatEmp == "M" .And. ( nEmpFatFol / nEmpFatTot ) < 0.95 )

If lGera .Or. cRecFatEmp $ "S*C"

	//Verifica todas filiais selecionadas para a contabilizacao em busca da valor da contribuicao previdenciaria
	For nContFil := 1 To Len( aFilProc )
        //Verifica se a receita desonerada da empresa e' superior a 95% do total
		If cRecFatEmp != "S" .And. lRecDesTot
			nFatFol	:= 0
			//Apura o total da contribuicao previdenciaria da filial processada sobre as atividades desonerdas
			aEval(aTabS033, {|aTabS033| If( aTabS033[2] + aTabS033[6] == aFilProc[nContFil, 1] + "1", aFilProc[nContFil, 2] += aTabS033[9], Nil ) } )
			aEval(aTabS033, {|aTabS033| If( aTabS033[2] + aTabS033[6] == aFilProc[nContFil, 1] + "1", aFilProc[nContFil, 3]++, Nil ) } )
			//Apura a receita bruta que nao e' sobre as atividades desoneradas
			aEval(aTabS033, {|aTabS033| If( aTabS033[2] == aFilProc[nContFil, 1] .And. aTabS033[6] == "2", nFatFol += aTabS033[7], ) } )
		    //Se a receita bruta da atividade desonerada for maior do que 95% do total devera ser
		    //considerado a receita bruta da atividade nao desonerada.Sera aplicado a proporcionalidade
		    //das aliquotas das atividades desoneradas conforme correspondencia do percentual da receita
		    //desonerada em relacao ao total desonerado
		    //Ex: Cod de atividade X possui receita bruta de 45.000 com aliquota de 1%. A receita bruta
		    //    total de atividade desonerada e' igual a 98.000 e ha 2.000 de atividade nao desonerada.
		    //	  Sera feito a regra de 3 para saber quanto da receita bruta da atividade corresponde
		    //    ao total desonerado. Percentual = 45.000 * 100 / 98.000 = 45,91%. O percentual sera
		    //    aplicado sobre os 2.000 da receita nao desonerada. Sobre o valorencontrado sera
		    //	  aplicado a aliquota correspondente ao codigo da atividade. Esse valor sera somado ao
		    //    que a empresa ja recolhe de contribuicao sobre a atividade desonerada.
			aFilProc[nContFil, 3]++
			For nCont := 1 To Len(aTabS033)
				If aTabS033[nCont, 6] == "1"
					nProp := ( aTabS033[nCont, 7] * 100 / nEmpFatDes ) / 100
					aFilProc[nContFil, 2] += ( nProp * nFatFol ) * ( aTabS033[nCont, 8] / 100 )
				EndIf
			Next nCont
		Else
			//Apura o total da contribuicao previdenciaria da filial processada sobre as atividades desoneradas
			aEval(aTabS033, {|aTabS033| If( aTabS033[2] + aTabS033[6] == aFilProc[nContFil, 1] + "1", aFilProc[nContFil, 2] += aTabS033[9], Nil ) } )
			aEval(aTabS033, {|aTabS033| If( aTabS033[2] + aTabS033[6] == aFilProc[nContFil, 1] + "1", aFilProc[nContFil, 3]++, Nil ) } )
		EndIf
	Next nContFil
	
	//Gera o valor da contribuicao no SRZ
	For nContFil := 1 To Len( aFilProc )
		If aFilProc[nContFil, 2] > 0
			//Verifica se a tabela SRV e' compartilhada p/ buscar a verba de Id 973
			If lSRVComp
				FP_CODFOL( @aCodFol, aFilProc[nContFil, 1] )
				cVb318	:= aCodFol[318,1]//Salario do Mes
				cVb973	:= aCodFol[973,1]//INSS Empresa s/ Faturamento
			Else
				aCodFolha := {}
				FP_CODFOL( @aCodFolha, aFilProc[nContFil, 1] )
				cVb318 := aCodFolha[318,1]//Salario do Mes
				cVb973 := aCodFolha[973,1]//INSS Empresa s/ Faturamento
			EndIf
			//Busca o primeiro registro gravado para a verba de Id 318 p/ utilizar o CC e a Matricula
			SRZ->( dbSetOrder(2) )
			If SRZ->( dbSeek( xFilial( "SRZ", aFilProc[nContFil, 1] ) + cVb318 ) )
				cCCusto		:= SRZ->RZ_CC
				cMat		:= SRZ->RZ_MAT
			EndIf

			//                Filial,                 CC,        				MAT,                     PD,   HORAS,  VALOR,                 OCORRENCIAS,           TIPO,TPC
			aAdd( aRegSRZ, { aFilProc[nContFil, 1], cCCusto				   , Replicate("Z", nTamMat), cVb973, 0.00, aFilProc[nContFil, 2], aFilProc[nContFil, 3], "FL", "1" }  )
			aAdd( aRegSRZ, { aFilProc[nContFil, 1], Replicate("Z", nTamCC), Replicate("Z", nTamMat), cVb973, 0.00, aFilProc[nContFil, 2], aFilProc[nContFil, 3], "FL", "1" }  )

			//Totaliza valores
			nTotFat += aFilProc[nContFil, 2]
			nQtdFat ++
		EndIf
	Next nContFil
	
	//Realiza a totalizacao das verbas de ID 973 das filiais
	//Se o SRV for compartilhado, faz o totalizacao da contribuicao diretamente
	If lSRVComp
		//                Filial,                          CC,                       MAT,                     PD,   HORAS, VALOR, OCORRENCIAS,TIPO, TPC
		aAdd( aRegSRZ, { Replicate("z", FWGETTAMFILIAL), Replicate( "z", nTamCC), Replicate("z", nTamMat), cVb973, 0.00, nTotFat, nQtdFat, "FL", "1" }  )
	//Se o SRV for exclusivo, faz a totalizacao conforme codigo da verba de Id 973
	Else
	  	For nCont := 1 To Len( aRegSRZ )
			If aRegSRZ[nCont, 2] == Replicate( "Z", nTamCC ) .And. aRegSRZ[nCont, 3] == Replicate("Z", nTamMat)
				If ( nPos := aScan( aRegSRZAux, {|X| x[4] == aRegSRZ[nCont, 4] } ) ) == 0
					//                   Filial,                          CC,                       MAT,                     PD,              HORAS,  VALOR,            CORRENCIAS,         TIPO, TPC
					aAdd( aRegSRZAux, { Replicate("Z", FWGETTAMFILIAL), Replicate( "Z", nTamCC), Replicate("Z", nTamMat), aRegSRZ[nCont, 4], 0.00, aRegSRZ[nCont, 6], aRegSRZ[nCont, 7], "FL", "1" }  )
				Else
					aRegSRZAux[nPos, 6] += aRegSRZ[nCont, 6]
					aRegSRZAux[nPos, 7] += aRegSRZ[nCont, 7]
				EndIf
			EndIf
	   	Next nCont
	
	   	For nCont := 1 To Len( aRegSRZAux )
	   		aAdd( aRegSRZ, aClone( aRegSRZAux[nCont] ) )
	   	Next nCont
	
	EndIf
	
	DbSelectArea("SRZ")
	SRZ->(DbSetOrder(5))
	//DbGotop()
	
	//Realiza a gravacao dos registros de totalizacao no SRZ
	For nCont := 1 To Len( aRegSRZ )
		//X2_UNICO SRZ: RZ_FILIAL+RZ_CC+RZ_MAT+RZ_PD+RZ_TPC+RZ_TIPO
		If !( SRZ->( DbSeek(aRegSRZ[nCont, 01]+aRegSRZ[nCont, 02]+aRegSRZ[nCont, 03]+aRegSRZ[nCont, 04]+aRegSRZ[nCont, 09]+aRegSRZ[nCont, 08]) ) ) ;
			.AND. !( SRZ->( DbSeek(aRegSRZ[nCont, 01]+LOWER(aRegSRZ[nCont, 02])+LOWER(aRegSRZ[nCont, 03])+aRegSRZ[nCont, 04]+aRegSRZ[nCont, 09]+aRegSRZ[nCont, 08]) ) ) ;
			.AND. !( SRZ->( DbSeek(aRegSRZ[nCont, 01]+UPPER(aRegSRZ[nCont, 02])+UPPER(aRegSRZ[nCont, 03])+aRegSRZ[nCont, 04]+aRegSRZ[nCont, 09]+aRegSRZ[nCont, 08]) ) )
			SRZ->( RecLock("SRZ", .T., .T.) )
		Else
			SRZ->( RecLock("SRZ", .F.) )
		EndIf
	 	SRZ->RZ_FILIAL		:= aRegSRZ[nCont, 01]
		SRZ->RZ_CC    		:= aRegSRZ[nCont, 02]
		SRZ->RZ_MAT    		:= aRegSRZ[nCont, 03]
		SRZ->RZ_PD   		:= aRegSRZ[nCont, 04]
		SRZ->RZ_HRS    		:= aRegSRZ[nCont, 05]
		SRZ->RZ_VAL    		:= aRegSRZ[nCont, 06]
		SRZ->RZ_OCORREN		:= aRegSRZ[nCont, 07]
		SRZ->RZ_TIPO   		:= aRegSRZ[nCont, 08]
		SRZ->RZ_TPC    		:= aRegSRZ[nCont, 09]
	 	SRZ->( MsUnlock() )
	Next nCont

EndIf

RestArea( aArea )
RestArea( aAreaSM0 )
RestArea( aAreaSRZ )

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³ RotContab   ³ Autor ³ Flavio Correa      ³ Data ³ 17.07.15 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Busca roteiros que devem ser contabilizados                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ GPEM110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function RotContab(cNaoRot,lGPS)
Local aArea		:= GetArea()
Local cRot		:= ""
Local cTmp 		:= GetNextAlias()
Local cWhere	:= ""
Local lBuscaSRY	:= .T.

DEFAULT lGps	:= .F.

If lGps 
	If Type("P_ROTGPS") == "U"
		If SetMnemonicos(xFilial("RCA"),NIL,.T.,"P_ROTGPS") .And. !Empty(P_ROTGPS)
			cRot := P_ROTGPS
			lBuscaSRY := .F.
		EndIf
	EndIf
EndIf

If lBuscaSRY
	cWhere := "%"
	cWhere += "	RY_CONTAB='1' "
	
	If !Empty(cNaoRot)
		cWhere += " AND RY_CALCULO NOT IN ("+cNaoRot+") "
	EndIf
	cWhere += "%"
	BeginSQL Alias cTmp
		SELECT RY_CALCULO FROM %table:SRY%  SRY
		WHERE %exp:cWhere% 
		AND SRY.%notDel% 
		AND RY_FILIAL=  %exp:xFilial("SRY")%
	EndSQL 			
	
	While !(cTmp)->(Eof())
		cRot += "'" + (cTMP)->RY_CALCULO + "'," 
		(cTmp)->(dbSkip())
	EndDo
	(cTmp)->(dbCloseArea())
	
	If !Empty(cRot)
		cRot := subStr(cRot,1,Len(cRot)-1)
	Else
		cRot := "'AUT','FOL','PLR','131','132'"
	EndIf
EndIf

RestArea(aArea)
Return cRot


/*/{Protheus.doc} ExecProc
//Função que executa a procedure
@author Flavio S. Correa
@since 21/06/2017
/*/
Static Function ExecProc(cQueryExec,cQuery1,cQuery2,cQuery3,cQuery4,cProcName,cRetSqlName,cTbLog)
Local cRetProc		:= ""
Local aResult   	:= {}
Local cProcErr		:= ""
Local cDescErr		:= ""
Local nSbsErr		:= 0
Local nCnt			:= 0
Local nPos			:= 0
Local aErrProc 		:= Array(3,0)
Local nFrom			:= 0
Local cAliasSRZ     := InitSqlName( "SRZ" )

Default cProcName   := ""
Default cRetSqlName := ""
Default cTbLog      := ""

If !(Empty(cRetSqlName))
	cQueryExec := StrTran(cQueryExec, cRetSqlName, cAliasSRZ)
Endif

If !(Empty(cTbLog))
	cQueryExec := StrTran(cQueryExec, cTbLog, "TBLOG")
Endif

cQueryExec := MsParse(cQueryExec,Alltrim(TcGetDB()))

If !(Empty(cRetSqlName))
	cQueryExec := StrTran(cQueryExec, cAliasSRZ, cRetSqlName)
Endif

If !(Empty(cTbLog))
	cQueryExec := StrTran(cQueryExec, "TBLOG", cTbLog)
Endif

If ( AllTrim( Upper( TcGetDb() ) ) == 'INFORMIX' )
	cQueryExec := StrTran(cQueryExec, "LET viTranCount  = 0 ;" , "LET viTranCount  = 0 ;" +CRLF+ "	COMMIT WORK ;")
	
	If Empty(cQuery1)
		cQuery1 := cQuery2
	EndIf
	
	nFrom := at(" FROM",cQuery1)
	cQueryExec := Replace(cQueryExec,"SELECT        *",substr(cQuery1,1,nFrom))
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curfun",substr(cQuery1,nFrom))
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curemp",substr(cQuery2,nFrom))
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curfil",substr(cQuery3,nFrom))
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curcc",substr(cQuery4,nFrom))
Else
	cQueryExec := Replace(cQueryExec,"SELECT *","")
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curfun",cQuery1)
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curemp",cQuery2)
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curfil",cQuery3)
	cQueryExec := Replace(cQueryExec,"FROM TESTE_curcc",cQuery4)
Endif

//Verifica se a procedure existe no Banco
If TCSPExist(cProcName)
	TcSqlExec("DROP PROCEDURE " + cProcName)
EndIf

cRetProc := TcSqlExec(cQueryExec)

//Executa a procedure
If cRetProc <> 0
	
	cProcErr := TCSQLError()
	If !IsBlind()
		MsgStop("TCSQLError() " + cProcErr)
	EndIf
	nSbsErr := 1
	For nCnt := 1 To ( nPos := MlCount(cProcErr,100) )
		If nCnt < nPos
			cDescErr += Substr( cProcErr, nSbsErr, 100 ) + CRLF
		Else
			cDescErr += Substr( cProcErr, nSbsErr, Len(cProcErr) - nSbsErr + 1 )
		EndIf
		
		nSbsErr += 100
	Next nCnt
	
	aAdd( aErrProc[1], "TCSQLError() " + cDescErr )
Else
	aResult := TCSPExec(cProcName)
	If Empty(aResult)
		cProcErr := TCSQLError()
		If !IsBlind()
			MsgStop("TCSQLError() " + cProcErr)
		EndIf
		nSbsErr := 1
		For nCnt := 1 To ( nPos := MlCount(cProcErr,100) )
			If nCnt < nPos
				cDescErr += Substr( cProcErr, nSbsErr, 100 ) + CRLF
			Else
				cDescErr += Substr( cProcErr, nSbsErr, Len(cProcErr) - nSbsErr + 1 )
			EndIf
			
			nSbsErr += 100
		Next nCnt
		
		aAdd( aErrProc[2], "TCSQLError() " + cDescErr )
	EndIf

	//Verifica se a procedure existe no Banco
	If TCSPExist(cProcName)
		TcSqlExec("DROP PROCEDURE " + cProcName)
	EndIf
Endif

Return( .T. )


/*/{Protheus.doc} QryFunc
//Função que monta as querys para gerar a tabela SRZ
@author Flavio S. Correa
@since 21/06/2017
/*/
Static Function QryFunc(nTipoSum,lItemClvl,cPrPerAb,cTpc,cAliasSRA,cFilDe,cFilAte,cPrSemAb,cCalc13,cTpc1,cPrPerFec,cPrSemFec,NTAMFILIAL,NTAMMAT,nTamItem,nTamClvl,nTamCC,cRotQry,cRot131,l131)
Local cQuery 	:= ""
Local cCateg	:= ""
Local nI	 	:= 1
Local nCto13	:= 1
Local nVezes 	:= 1
Local nX		:= 1
Local cPrefixo	:= "RC_"
Local cAliasSRC	:= RetSqlName( "SRC" )
Local cTab		:= "'SRC'"
Local lPostgres	:= "POSTGRES" $ tcGetDB()
Local aRot131   := STRTOKARR(cRot131,',')
Local aCalc13   := STRTOKARR(cCalc13,',')

//nTipoSum 1=Funcionario;2=Empresa;3= Filial;4= Centro custo
cCateg := "("
For nX := 1 To Len( cCat )
	cCateg += "'" + Substr( cCat, nX, 1) + "',"
Next nX
cCateg 	:= Substr( cCateg, 1, Len(cCateg)-1) + ")"

If !Empty( cPrPerAb ) .and. !Empty( cPrPerFec )
	nVezes := 2
EndIf

cQuery += " SELECT "
cQuery += "  RZ_FILIAL,"
cQuery += "  RZ_MAT,"
cQuery += "  RZ_CC,"
cQuery += "  RZ_PD,"
cQuery += "   SUM(RZ_HRS) AS RZ_HRS,"
cQuery += "   SUM(RZ_VAL) AS RZ_VAL,"
cQuery += "   SUM(RZ_OCORREN) AS RZ_OCORREN,"
cQuery += "   RZ_TIPO,"
cQuery += "   RZ_TPC"
If lItemClvl
	cQuery +=  ",RZ_ITEM ,  RZ_CLVL"					
EndIf	
cQuery += "  FROM ( "

For nI := 1 To nVezes
	
	If nI == 1
		If !Empty( cPrPerAb )
			cPrefixo 	:= "RC_"
			cAliasSRC	:= RetSqlName( "SRC" )
			cTab		:= "'SRC'"
		Else
			cPrefixo := "RD_"
			cAliasSRC	:= RetSqlName( "SRD" )
			cTab		:= "'SRD'"
		EndIf
	ElseIf nI == 2 
		cPrefixo := "RD_"
		cAliasSRC	:= RetSqlName( "SRD" )
		cTab		:= "'SRD'"
		cQuery += 'UNION '
	EndIf
	
	If nTipoSum == 1
		cQuery += "SELECT "+cPrefixo+"FILIAL as RZ_FILIAL,  "+cPrefixo+"MAT as RZ_MAT, "     
		If lItemClvl
			cQuery +=  " "+cPrefixo+"ITEM as RZ_ITEM,  "+cPrefixo+"CLVL as RZ_CLVL,"					
		EndIf					
		cQuery += cPrefixo+"CC as RZ_CC,  "
	ElseIf nTipoSum == 2 
		If lPostgres
			cQuery += "SELECT '" + Replicate( 'z', nTamFilial ) + "' ::TEXT as RZ_FILIAL, '" + Replicate( 'z', nTamMat) + "' ::TEXT as RZ_MAT, "
		Else
			cQuery += "SELECT '" + Replicate( 'z', nTamFilial ) + "' as RZ_FILIAL, '" + Replicate( 'z', nTamMat) + "' as RZ_MAT, "
		EndIf
		If lItemClvl
			If lPostgres
				cQuery += "'" + Replicate ('z', nTamItem)+"' ::TEXT as RZ_ITEM, " +"'" + Replicate('z',nTamClvl)+ "' ::TEXT as RZ_CLVL, "
			Else
				cQuery += "'" + Replicate ('z', nTamItem)+"' as RZ_ITEM, " +"'" + Replicate('z',nTamClvl)+ "' as RZ_CLVL, "
			EndIf
		EndIf					
		If lPostgres
			cQuery += "'" + Replicate( 'z', nTamCC ) + "' ::TEXT as RZ_CC, "		
		Else
			cQuery += "'" + Replicate( 'z', nTamCC ) + "' as RZ_CC, "
		EndIf
	ElseIf nTipoSum == 3
		If lPostgres
			cQuery += "SELECT "+cPrefixo+"FILIAL AS RZ_FILIAL, '" + Replicate( 'z', nTamMat) + "' ::TEXT as RZ_MAT, " 
		Else
			cQuery += "SELECT "+cPrefixo+"FILIAL AS RZ_FILIAL, '" + Replicate( 'z', nTamMat) + "' as RZ_MAT, "
		EndIf
		If lItemClvl
			If lPostgres
				cQuery += "'"+ Replicate( 'z', nTamItem) +"' ::TEXT as RZ_ITEM," +"'"+ Replicate( 'z', nTamClvl) + "' ::TEXT as RZ_CLVL, "
			Else
				cQuery += "'"+ Replicate( 'z', nTamItem) +"' as RZ_ITEM," +"'"+ Replicate( 'z', nTamClvl) + "' as RZ_CLVL, "
			EndIf
		EndIf		
		If lPostgres			
			cQuery += "'" + Replicate( 'z', nTamCC ) + "' ::TEXT as RZ_CC, "
		Else
			cQuery += "'" + Replicate( 'z', nTamCC ) + "' as RZ_CC, "
		EndIf
	ElseIf nTipoSum == 4
		If lPostgres
			cQuery += "SELECT "+cPrefixo+"FILIAL as RZ_FILIAL,  '" + Replicate( 'z', nTamMat) + "' ::TEXT as RZ_MAT, "   
		Else
			cQuery += "SELECT "+cPrefixo+"FILIAL as RZ_FILIAL,  '" + Replicate( 'z', nTamMat) + "' as RZ_MAT, "
		EndIf
		If lItemClvl
			cQuery +=  " "+cPrefixo+"ITEM as RZ_ITEM,  "+cPrefixo+"CLVL as RZ_CLVL,"					
		EndIf					
		cQuery += cPrefixo+"CC as RZ_CC,  "
	EndIf
		
	cQuery += cPrefixo+"PD as RZ_PD, SUM( "+cPrefixo+"HORAS) as RZ_HRS, "
	cQuery += "SUM( "+cPrefixo+"VALOR) as RZ_VAL, COUNT(  "+cPrefixo+"PD ) RZ_OCORREN, " 
	
	cQuery += " CASE " + cPrefixo + "ROTEIR "
	
	For nCto13:= 1 To Len(aCalc13)
			cQuery += " WHEN " + aCalc13[nCto13] + " then '13' "
	Next nCto13

	If l131
		For nCto13:= 1 To Len(aRot131)
			cQuery += " WHEN " + aRot131[nCto13] + " then '13' "
		Next nCto13
	EndIf

	cQuery += " ELSE 'FL' "
	cQuery += " END AS RZ_TIPO , "
	
	If lPostgres
		cQuery += "'" + cTpc + "' ::TEXT as RZ_TPC, "
		cQuery += cTab +" ::TEXT as Tabela, "		// este campo foi criado para gerar todos os registros atraves do UNION
	Else
		cQuery += "'" + cTpc + "' as RZ_TPC, "
		cQuery += cTab +" as Tabela, "		// este campo foi criado para gerar todos os registros atraves do UNION
	EndIf
	
	cQuery +=  cPrefixo+"ROTEIR as RZ_ROTEIR "
	
	cQuery += 'FROM ' + cAliasSRC + ', ' + cAliasSRA + ' WHERE '
	cQuery += cPrefixo+"FILIAL" + " >= '" + cFilDe + "' AND "
	cQuery += cPrefixo+"FILIAL" + " <= '" + cFilAte + "' AND "
	cQuery += cPrefixo+"MAT" + " >= '" + cMatDe + "' AND "
	cQuery += cPrefixo+"MAT" + " <= '" + cMatAte + "' AND "
	cQuery += cPrefixo+"CC" + " >= '" + cCCDe + "' AND "
	cQuery += cPrefixo+"CC" + " <= '" + cCCAte + "' AND "
	If cPrefixo == "RC_"
		cQuery += cPrefixo+'PERIODO IN ( ' + cPrPerAb + ' ) AND '
		If !Empty( cPrSemAb )
			cQuery += cPrefixo+'SEMANA  IN ( ' + cPrSemAb  + ' ) AND '
		EndIf
	Else
		cQuery += cPrefixo+'PERIODO IN ( ' + cPrPerFec + ' ) AND '
		If !Empty( cPrSemFec )
			cQuery += cPrefixo+'SEMANA  IN ( ' + cPrSemFec  + ' ) AND '
		EndIf
	EndIf
	
	If cPaisloc <> "BRA"
		cQuery += cPrefixo+"PROCES  = '" + cProcesso  + "' AND "
	EndIf
	
	if cPrefixo = "RD_"
		cQuery  += " (" + cPrefixo + "EMPRESA = '" + cEmpAnt +"' OR " + cPrefixo + "EMPRESA = '  ') AND "
	endIf 
	
	cQuery +=  cPrefixo+"ROTEIR IN ( " + cRotQry + " ) AND "
	
	cQuery += cAliasSRA + ".D_E_L_E_T_ = ' ' AND "
	cQuery += cAliasSRC + ".D_E_L_E_T_ = ' ' AND " 
	cQuery += cPrefixo+"FILIAL = RA_FILIAL AND " + cPrefixo+"MAT = RA_MAT AND "
	cQuery += "RA_TPCONTR IN " + cTpc1 + " "
	cQuery += "AND RA_CATFUNC IN " + cCateg+ " "
	
	If nTipoSum == 1
		cQuery += 'GROUP BY ' + cPrefixo+"FILIAL, " + cPrefixo+"MAT,"
		If lItemClvl	
			cQuery += cPrefixo+"ITEM," + cPrefixo+"CLVL, "
		EndIf	 
		cQuery +=cPrefixo+"CC, " + cPrefixo+"PD, " + cPrefixo+"ROTEIR "
	ElseIf nTipoSum == 2
		cQuery += 'GROUP BY ' + cPrefixo+"PD, " + cPrefixo+"ROTEIR "
	ElseIf nTipoSum == 3
		cQuery += 'GROUP BY ' + cPrefixo+"FILIAL," + cPrefixo+"PD, " + cPrefixo+"ROTEIR "
	ElseIf nTipoSum == 4
		cQuery += 'GROUP BY ' + cPrefixo+"FILIAL, "
		If lItemClvl
			cQuery += cPrefixo+"ITEM," + cPrefixo+"CLVL, "
		EndIf
		cQuery += cPrefixo+"CC, " + cPrefixo+"PD, " + cPrefixo+"ROTEIR "
	EndIf

Next nI

cQuery += ') A '
cQuery += ' GROUP BY A.RZ_FILIAL, A.RZ_MAT, A.RZ_CC, A.RZ_PD, A.RZ_TIPO,A.RZ_TPC'
If lItemClvl
	cQuery +=  ",RZ_ITEM ,  RZ_CLVL"					
EndIf
If !Empty( cPrPerAb ) .and. Empty( cPrPerFec )
	If nTipoSum == 1
		cQuery += ' ORDER BY RZ_FILIAL, RZ_MAT, RZ_CC, RZ_PD '
	ElseIf nTipoSum == 2
		cQuery += ' ORDER BY RZ_PD '
	ElseIf nTipoSum == 3
		cQuery += ' ORDER BY RZ_FILIAL, RZ_PD '
	ElseIf nTipoSum == 4
		cQuery += ' ORDER BY RZ_FILIAL, RZ_CC, RZ_PD '
	EndIf
EndIf
	
Return cQuery

/*/{Protheus.doc} MntProc
//Função que monta a procedure para gerar a tabela SRZ
@author Flavio S. Correa
@since 21/06/2017
/*/
Static Function MntProc(cCursor,cQuery,lItemClVl,lLogix,cGPCTLOG,cRetSqlName,cTbLog)
Local cAliasSRZ	:= InitSqlName( "SRZ" )
Local cAliasSRA	:= InitSqlName( "SRA" )
Local cAliasSQB	:= InitSqlName( "SQB" )
Local cRecno	:= ""
Local cDel		:= ""
Local cProc		:= ""
Local lSQL		:= ("MSSQL"$tcGetDB())
Local lInformix	:= ("INFORMIX"$tcGetDB())
Local cJoin		:= FwJoinFilial("SRA","SQB")
Local cIsnull	:= " COALESCE"
Local lSRZ 		:= .T.

DEFAULT lLogix := .F.
Default cRetSqlName := ""
Default cTbLog := ""

If !(Empty(cRetSqlName)) .And. !(cRetSqlName == cAliasSRZ)
	cAliasSRZ := cRetSqlName
	lSRZ := .F.
Endif

If lInformix
	cIsnull	:= " NVL"
EndIf

cRecno	:= "R_E_C_N_O_"
cDel	:= "D_E_L_E_T_ = ' '"

cProc	:= "begin "  +CRLF
cProc	+= "	SELECT @OUT_RESULTADO = '0'" +CRLF
cProc	+= "	Select @iNroRegs = 0"+CRLF

cProc += "declare " + cCursor + " insensitive cursor for"  + CRLF
cProc += "SELECT * FROM TESTE_" + cCursor + CRLF //tratativa para enganar a MSPARSER
cProc += " for read only"  + CRLF
cProc += " open " + cCursor  + CRLF

If lItemClVl
	cProc += " fetch " + cCursor + " into @RZ_FILIAL,@RZ_MAT,@RZ_CC,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC, @lTemItemRZ, @lTemClVlRZ" +CRLF
Else
	cProc += " fetch " + cCursor + " into @RZ_FILIAL,@RZ_MAT,@RZ_CC,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC" +CRLF
Endif

cProc += " while (@@fetch_Status = 0) begin "  +CRLF

/* ------------- Tratamento para executar Commit a cada  registros --------------- */
cProc += "      select @iNroRegs = @iNroRegs + 1"+CRLF
If cPaisLoc == "BRA"
    cProc += "      select @cArelin = ''"+CRLF
EndIf
cProc += "		If @iNroRegs = 1"+CRLF
cProc += "			begin"+CRLF
If !lSQL
	cProc += "         Begin Transaction"+CRLF
Endif
cProc += "         	Select @iNroRegs = @iNroRegs"+CRLF
cProc += "			End"+CRLF
cProc += "					select @MaxRecno = "+cIsnull+"( max( R_E_C_N_O_ ), 1) from " + cAliasSRZ +CRLF
cProc += "					Select  @MaxRecno =  @MaxRecno + 1" +CRLF

If lLogix
	cProc += " SELECT @cArelin = SQB.QB_ARELIN " + CRLF
	cProc += "	FROM "+cAliasSRA+" SRA " + CRLF
	cProc += "	INNER JOIN "+cAliasSQB+" SQB ON "+cJoin+" AND SQB.QB_DEPTO = SRA.RA_DEPTO AND SQB.D_E_L_E_T_ = ' '" + CRLF
	cProc += "	WHERE SRA.RA_FILIAL=@RZ_FILIAL" + CRLF
	cProc += "	AND SRA.RA_MAT=@RZ_MAT" + CRLF
	cProc += "	AND SRA.D_E_L_E_T_=''" + CRLF
	cProc += "	select @cArelin = "+cIsnull+"(@cArelin, ' ')"  + CRLF
EndIf

If cPaisLoc == "BRA"
	If lItemClVl
		cProc += "		insert into " + cAliasSRZ + " (RZ_FILIAL, RZ_CC, RZ_MAT, RZ_PD, RZ_HRS, RZ_VAL, RZ_OCORREN, RZ_TIPO, RZ_TPC, RZ_ITEM,RZ_CLVL,RZ_ARELIN" + If(lSRZ, ", " + cRecno, "") + ")" + CRLF
		cProc += "		values(	@RZ_FILIAL,@RZ_CC,@RZ_MAT,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC, @lTemItemRZ, @lTemClVlRZ,@cArelin" + If(lSRZ, ", @MaxRecno )", ")" ) + CRLF
	Else
		cProc += "		insert into " + cAliasSRZ + " (RZ_FILIAL, RZ_CC, RZ_MAT, RZ_PD, RZ_HRS, RZ_VAL, RZ_OCORREN, RZ_TIPO, RZ_TPC,RZ_ARELIN " + If(lSRZ, ", " + cRecno, "") + ")" + CRLF
		cProc += "		values(	@RZ_FILIAL,@RZ_CC,@RZ_MAT,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC,@cArelin" + If(lSRZ, ", @MaxRecno )", ")" ) + CRLF
	Endif
Else
	If lItemClVl
		cProc += "		insert into " + cAliasSRZ + " (RZ_FILIAL, RZ_CC, RZ_MAT, RZ_PD, RZ_HRS, RZ_VAL, RZ_OCORREN, RZ_TIPO, RZ_TPC, RZ_ITEM,RZ_CLVL" + If(lSRZ, ", " + cRecno, "") + ")" + CRLF
		cProc += "		values(	@RZ_FILIAL,@RZ_CC,@RZ_MAT,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC, @lTemItemRZ, @lTemClVlRZ" + If(lSRZ, ", @MaxRecno )", ")" ) + CRLF
	Else
		cProc += "		insert into " + cAliasSRZ + " (RZ_FILIAL, RZ_CC, RZ_MAT, RZ_PD, RZ_HRS, RZ_VAL, RZ_OCORREN, RZ_TIPO, RZ_TPC" + If(lSRZ, ", " + cRecno, "") + ")" + CRLF
		cProc += "		values(	@RZ_FILIAL,@RZ_CC,@RZ_MAT,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC" + If(lSRZ, ", @MaxRecno )", ")" ) + CRLF
	Endif
EndIf

If "C" $ cGPCTLOG
	If lItemClVl
	    cProc += "           If @@Error <> 0  begin"
		cProc += "					insert into " + cTbLog + " (RZ_FILIAL, RZ_CC, RZ_MAT, RZ_PD, RZ_HRS, RZ_VAL, RZ_OCORREN, RZ_TIPO, RZ_TPC, RZ_ITEM, RZ_CLVL)" +CRLF
		cProc += "					values(	@RZ_FILIAL,@RZ_CC,@RZ_MAT,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC, @lTemItemRZ, @lTemClVlRZ )" +CRLF
	    cProc += "           End"
	Else                             
		cProc += "           If @@Error <> 0  begin"
		cProc += "					insert into " + cTbLog + " (RZ_FILIAL, RZ_CC, RZ_MAT, RZ_PD, RZ_HRS, RZ_VAL, RZ_OCORREN, RZ_TIPO, RZ_TPC)" +CRLF
		cProc += "					values(	@RZ_FILIAL,@RZ_CC,@RZ_MAT,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC )" +CRLF
	    cProc += "           End"
	EndIf
EndIf

//Commit a cada 1024 linhas

cProc += "			If @iNroRegs = 1024 "+CRLF
cProc += "				begin"+CRLF
If !lSQL
	cProc += "         	Commit Transaction "+CRLF
Endif
cProc += "					Select @iNroRegs = 0"+CRLF

cProc += "				End"+CRLF
If lItemClVl
	cProc += " fetch " + cCursor + " into @RZ_FILIAL,@RZ_MAT,@RZ_CC,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC, @lTemItemRZ, @lTemClVlRZ" +CRLF
Else
	cProc += " fetch " + cCursor + " into @RZ_FILIAL,@RZ_MAT,@RZ_CC,@RZ_PD,@RZ_HRS, @RZ_VAL, @RZ_OCORREN ,@RZ_TIPO,@RZ_TPC" +CRLF
Endif
cProc += " end"  +CRLF
cProc += "	If @iNroRegs > 0 "+CRLF
cProc += "		begin"+CRLF
cProc += "			select @iNroRegs = 0"+CRLF
cProc += "			Select @iTranCount  = 0"+CRLF
If !lSQL
	cProc += "		Commit Transaction" + CRLF
Endif
cProc += "     End" +CRLF
cProc += " close " + cCursor +  CRLF
cProc += " deallocate " + cCursor + CRLF
	
cProc += " End "  + CRLF

Return cProc

/*/{Protheus.doc} IniProc
//Função que monta a procedure para gerar a tabela SRZ
@author Flavio S. Correa
@since 21/06/2017
/*/
Static Function IniProc(lItemClVl,lLogix,cProcName)
Local cDeclare	:= ""
Local nTamSX3		:= Alltrim(str(TamSx3( "RZ_CC" )[1]))
Local nTamMat		:= TamSx3( "RZ_MAT")[1]
Local nTamPD		:= TamSx3( "RZ_PD" )[1]
Local nTamCC		:= TamSx3( "RZ_CC" )[1]
Local nTamRZItem	:= Alltrim(str(TamSx3( "RZ_ITEM     " )[1]))
Local nTamRZClas	:= Alltrim(str(TamSx3( "RZ_CLVL     " )[1]))
Local nTamArelin	:= 10
Local cNameDB		:= Upper(TcGetDb())

cProcName := CriaTrab(, .F.) + "_" + cEmpAnt
 	
If lLogix
	nTamArelin := TamSx3( "QB_ARELIN")[1]
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis da procedure                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cDeclare := "CREATE PROCEDURE " + cProcName + " ("+CRLF
cDeclare += " @OUT_RESULTADO CHAR(01) OutPut " +CRLF
cDeclare += " )"+CRLF
cDeclare += " AS "+CRLF
cDeclare += "Declare @RZ_FILIAL char(" + Alltrim(str(FWGETTAMFILIAL)) + ")" +CRLF
cDeclare += "Declare @RZ_CC char(" + nTamSx3 + ")"  +CRLF
cDeclare += "Declare @RZ_MAT char("+ cValToChar(nTamMat)+")"  +CRLF
cDeclare += "Declare @RZ_PD char(3)" +CRLF
cDeclare += "Declare @RZ_HRS float" +CRLF
cDeclare += "Declare @RZ_VAL float" +CRLF
cDeclare += "Declare @RZ_OCORREN float" +CRLF
cDeclare += "Declare @RZ_TIPO char(2)" +CRLF
cDeclare += "Declare @RZ_TPC char(1)" +CRLF
cDeclare += "Declare @MaxRecno integer "  +CRLF
cDeclare += "Declare @Desc15 varchar(100)"  +CRLF
cDeclare += "Declare @RxCod varchar(20)"  +CRLF
cDeclare += "Declare @vcCC char(" +  nTamSx3 + ")"  +CRLF
cDeclare += "Declare @vcFil char(" + Alltrim(str(FWGETTAMFILIAL)) + ")"  +CRLF
cDeclare += "Declare @vcPD char(3)"  +CRLF
cDeclare += "Declare @vcTPC char(1)"  +CRLF
cDeclare += "Declare @vvVal Float"  +CRLF
cDeclare += "Declare @vcPerc Float"  +CRLF
cDeclare += "Declare @vvValFim Float"  +CRLF
cDeclare += "Declare @Recno15 integer "  +CRLF
cDeclare += "Declare @Compr integer "  +CRLF
cDeclare += "Declare @iNroRegs integer "  +CRLF
cDeclare += "Declare @iTranCount Integer"+CRLF
If cPaisLoc == "BRA"
    cDeclare += "Declare @cArelin char("+ Alltrim(str(nTamArelin))+")"+CRLF
EndIf

If lItemClVl
	cDeclare += "Declare @lTemItemRC char(" + nTamRZItem + ")"  +CRLF
	cDeclare += "Declare @lTemClVlRC char(" + nTamRZClas + ")"  +CRLF
	cDeclare += "Declare @lTemItemRZ char(" + nTamRZItem + ")"  +CRLF
	cDeclare += "Declare @lTemClVlRZ char(" + nTamRZClas + ")"  +CRLF
Endif

Return cDeclare

/*/{Protheus.doc} GP110TabLog
//Função que cria tabela de log para gravar registros q geraram erro
@author Flavio S. Correa
@since 21/06/2017
/*/
Static Function GP110TabLog(lItemClVl, cTbLog )

Local aCampos	:= {} 
Local nTamSx3	:= Alltrim(str(TamSx3( "RZ_CC     " )[1]))
Local nTamRZItem
Local nTamRZClas
Local cAlias := CriaTrab(, .F.)
Local cTableTmp	:= RetArq(__cRDD,cAlias+cEmpAnt,.T.)

Default cTbLog := ""

cTbLog := cTableTmp

If lItemClVl
	DEFAULT nTamRZItem	:= Alltrim(str(TamSx3( "RA_ITEM     " )[1]))
	DEFAULT nTamRZClas	:= Alltrim(str(TamSx3( "RA_CLVL     " )[1]))
Endif

If TCCanOpen(cTableTmp)
	TCDelFile(cTableTmp)
EndIf
	
AAdd( aCampos, { "RZ_FILIAL"	, "C",	FWGETTAMFILIAL, 0 } )
AAdd( aCampos, { "RZ_CC"		, "C",	val(nTamSx3), 0 } )
AAdd( aCampos, { "RZ_MAT"		, "C",	06, 0 } )
AAdd( aCampos, { "RZ_PD" 		, "C",  03, 0 } )
AAdd( aCampos, { "RZ_HRS"		, "N",  17, 2 } )
AAdd( aCampos, { "RZ_VAL"		, "N",  17, 2 } )
AAdd( aCampos, { "RZ_OCORREN"	, "N",  17, 2 } )
AAdd( aCampos, { "RZ_TIPO"		, "C",  02, 0 } )
AAdd( aCampos, { "RZ_TPC"		, "C",  01, 0 } )
If lItemClVl
	AAdd( aCampos, { "RZ_ITEM"		, "C",val(nTamRZItem), 0 } )
	AAdd( aCampos, { "RZ_CLVL"		, "C",val(nTamRZClas), 0 } )
Endif

MsCreate(cTableTmp,aCampos,"TOPCONN")

MsOpenDbf( .T. , __cRdd , cTableTmp , cAlias , .F. )  

Return(.T.)

/*/{Protheus.doc}GPM110MSRZ()
- Gera tabela SRZ por usuário para possibilitar contabilização simultânea.
@author:	V11.8-Leandro D./V12.1.7-Jônatas Alves	
@since:		17/07/2017
/*/
Static Function GPM110MSRZ( cRetSqlName )

GPM110MChk()

If !lMultSRZ
	Return
EndIf 

aFields := SRZ->(dbStruct())
SRZ->(dbCloseArea())

//-------------------
//Criação do objeto
//-------------------
oTempTable := FWTemporaryTable():New( "SRZ" )
		
//--------------------------
//Monta os campos da tabela
//--------------------------
oTemptable:SetFields( aFields )
oTempTable:AddIndex("1", {"RZ_FILIAL","RZ_CC","RZ_PD","RZ_TPC"} )
oTempTable:AddIndex("2", {"RZ_FILIAL","RZ_PD","RZ_CC"} )
oTempTable:AddIndex("3", {"RZ_FILIAL","RZ_CC","RZ_ITEM","RZ_CLVL","RZ_PD","RZ_TPC"} )
oTempTable:AddIndex("4", {"RZ_FILIAL","RZ_CC","RZ_ITEM","RZ_CLVL","RZ_MAT","RZ_PD","RZ_TPC","RZ_TIPO"} )
oTempTable:AddIndex("5", {"RZ_FILIAL","RZ_CC","RZ_MAT","RZ_PD","RZ_TPC","RZ_TIPO"} )						
	
//------------------
//Criação da tabela
//------------------
oTempTable:Create()
		
cRetSqlName := oTempTable:GetRealName()

Return (cRetSqlName)

/*/{Protheus.doc}GPM110MRec( @nMinRec, @nMaxRec, cRetSqlName )
- Retorna recnos mínimo e máximo da SRZ
@author:	V11.8-Leandro D./V12.1.7-Jônatas Alves	
@since:		17/07/2017
/*/
Static Function GPM110MRec( nMinRec, nMaxRec, cRetSqlName )

	Local cAliasAux		:= ""
	
	DEFAULT nMinRec		:= 0.00
	DEFAULT nMaxRec		:= 0.00
	
	GPM110MChk()

	If lMultSRZ
		cAliasAux := GetNextAlias()
		cNameAux := "%" + cRetSqlName + "%" 
		
		BeginSql alias cAliasAux
			SELECT MIN( R_E_C_N_O_ ) MINREC, MAX( R_E_C_N_O_ ) MAXREC
			FROM %exp:cNameAux% SRZ
		EndSql
		
		If ( cAliasAux )->( !Eof() )
			nMinRec := ( cAliasAux )->( MINREC )
			nMaxRec := ( cAliasAux )->( MAXREC )
		EndIf
		
		( cAliasAux )->( dbCloseArea() )
	Else	
		MsMinMaxRec( "SRZ" , @nMinRec , @nMaxRec )
	EndIf 

Return

/*/{Protheus.doc}GPM110MChk()
- Atribui valor à static lMultSRZ
@author:	V11.8-Leandro D./V12.1.7-Jônatas Alves	
@since:		17/07/2017
/*/
Static Function GPM110MChk()
	If ValType( lMultSRZ ) == "U"
		lMultSRZ   := GetMvRH( "MV_MULTSRZ", .F., "2" ) == "1"
	EndIf
Return

/*/{Protheus.doc} fChkPd()
- Atribui valor à static lMultSRZ
@author: raquel.andrade	
@since:	13/08/2020
/*/
Static Function fChkPd(cFilSRV, cPDSRV,cCodPadrao)
DEFAULT cFilSRV	    := ""
DEFAULT cPDSRV	    := ""
DEFAULT cCodPadrao	:= ""

	dbSelectArea("SRV")
	dbSetOrder(1)
	If SRV->(MsSeek(xFilial("SRV",cFilSRV) + cPDSRV))   
		If !Empty(SRV->RV_LCTOP)
			cCodPadrao := SRV->RV_LCTOP
		EndIf
	EndIf

Return

/*/{Protheus.doc} fMontaTPR
 Monta Arquivo de Trabalho para contabilização da provisão
@type  Static Function
@author Cícero Alves
@since 05/04/2021
/*/
Function fMontaTPR(nOrdem, dDataRef, lSalInc, lTrataTrf, aTransf, cTpc, cAcessaArq, cFiltroRel )
	
	Local aVerbaProv	:= {}
	Local aCodFol 		:= {}
	Local aStruSRA 		:= {}
	Local aSRASRT		:= {}
	Local aVerbasTPR	:= {}
	Local aIndAux		:= {}
	Local bChkSRA
	Local bChkSRE
	Local cInicio
	Local cFim
	Local cSitFolh
	Local cTipAfas
	Local cCposQuery
	Local cCusto
	Local cCustoAtu
	Local cClvl 		:= ""
	Local cClvlAtu 		:= ""
	Local cItem 		:= ""
	Local cItemAtu 		:= ""
	Local cAliasSRA		:= "SRA"
	Local cOrdem		:= ""
	Local cAnoMesAtu
	Local cDtIQryAtu
	Local cDtFQryAtu
	Local cLisVerbas
	Local cCposGroup
	Local cCposnOrd5
	Local cVerbaRPF 	:= ""
	Local cVerbaRP13	:= ""
	Local cJnSRACTT		:= "% " + FWJoinFilial( "SRA", "CTT" ) + " %"
	Local cExpTpc		:= ""
	Local dAfaIni		:= CtoD("")
	Local dAfaFim		:= CtoD("")
	Local lTransfEmp	:= .F.
	Local nK1, nPosUltima
	Local nTpMv
	Local nReg			:= 0
	Local cCatefd		:= "% '' = '' %"
	Local cWhereCC		:= ""
	Local lNextFunc		:= .F.
	Local aTransFunc	:= {}
	Local nLenTransf	:= 0
	Local lGeraBaixa	:= .T.
	
	DEFAULT nOrdem		:= 2
	DEFAULT dDataRef	:= CToD("  /  /    ")
	DEFAULT lSalInc	    := .F.
	DEFAULT lTrataTrf   := .F.
	DEFAULT aTransf     := {}
	DEFAULT cTpc		:= ""
	DEFAULT cFiltroRel	:= ""
	
	Private lINSSAut := .F.
	
	If Type("cFilConDe") != "U"
		cFilDe	:= If( !Empty(cFilDe), cFilDe, cFilConDe)
		cFilAte	:= If( !Empty(cFilAte), cFilAte, cFilConAte)
	EndIf
	
	// VERIFICA SE FOI PASSADO BLOCO, STRING OU NIL
	If cAcessaArq == Nil .Or. Empty(cAcessaArq)
		bChkSRA := &("{ || .T.}")
		bChkSRE := &("{ || .T.}")
	ElseIf ValType(cAcessaArq) == "B"
		cAcessaArq	:= StrTran(cAcessaArq, "SRA->","(cAliasSRA)->")
		bChkSRA 	:= cAcessaArq
		bChkSRE 	:= &("{ || .T.}")
	ElseIf ValType(cAcessaArq) == "C"
		cAccessaAux	:= cAcessaArq
		cAcessaArq	:= StrTran(cAcessaArq, "SRA->","(cAliasSRA)->")
		bChkSRA 	:= &(cAcessaArq)
		// SE HOUVE C.CUSTO NO FILTRO TROCAR PELO ARRAY ATRANSF
		If AT("RA_CC", cAccessaAux) > 0
			cAccessaAux := STRTRAN( cAccessaAux, "SRA->RA_CC", "aTransf[nK1,nTrfProc,_TCC]")
		EndIf
		bChkSRE := &(cAccessaAux)
	EndIf
	
	// VERIFICA A EXISTENCIA DOS IDENTIFICADORES DE TRANSFERENCIA
	If _BkpFilial != cFilAnt .Or. Empty(_aCodFol)
		If Fp_CodFol(@aCodFol, cFilAnt)
			// CARREGA OS IDENTIFICADORES DA PROVISAO E TESTA SE EXISTEM
			fIdentProv(@aVerbaProv,aCodFol)
			// VERIFICA A EXISTENCIA DOS IDENTIFICADORES DE TRANSFERENCIA
			lTrataTrf := (fChkIdent(aVerbaProv,_FerVenc,{_BxTrf},.F.) .And. fChkIdent(aVerbaProv,_13Salar,{_BxTrf},.F.))
			// VERIFICA A EXISTENCIA DOS IDENTIFICADORES DA PROVISAO MES
			If lGeraPMes .And. lTrataTrf
				lTrataTrf := (	fChkIdent(aVerba,_FerVMes,{_Atual},.F.) .And. fChkIdent(aVerba,_13SVMes,{_Atual},.F.))
			Endif
		Endif
		_aCodFol	:= aClone(aCodFol)
		_BkpFilial	:= cFilAnt
		_lBkpTraTrf	:= lTrataTrf
	EndIf
	
	aCodFol		:= aClone(_aCodFol)
	lTrataTrf	:= _lBkpTraTrf
	
	// ATUALIZA VARIAVEIS COM OS CODIGOS DAS VERBAS DE RATEIO PROVISAO MES
	If !Empty(cTpRtProv)
		cVerbaRPF 	:= "'" + aCodFol[960,1] + "','" + aCodFol[961,1] + "','" + aCodFol[962,1] + "','" + aCodFol[963,1] + "','" + aCodFol[964,1] + "','" + aCodFol[965,1] + "','" + aCodFol[233,1] + "','" + aCodFol[239,1] + "'"
		cVerbaRP13	:= "'" + aCodFol[966,1] + "','" + aCodFol[967,1] + "','" + aCodFol[968,1] + "','" + aCodFol[969,1] + "','" + aCodFol[970,1] + "','" + aCodFol[971,1] + "','" + aCodFol[332,1] + "','" + aCodFol[270,1] + "'"
	Endif
	
	// VERIFICAR SE EXISTE CAMPO SAL.INCORPORADO NO CADASTRO
	dbSelectArea("SRA")
	If ColumnPos("RA_SALINCO") > 0
		lSalInc := .T.	
	EndIf
	If ColumnPos("RA_INSSAUT") > 0
		lINSSAut := .T.	
	EndIf
	
	cCposQuery	:=	"RA_FILIAL, RA_MAT, RA_NOME, RA_CC, RA_CATFUNC, RA_ADMISSA, RA_SITFOLH, RA_AFASFGT, "+;
					"RA_DEMISSA, RA_TPCONTR, RA_HRSMES, RA_PERICUL, RA_ADTPOSE, RA_INSMAX"
	cCposQuery	+= If(lSalInc,", RA_SALINCO","")
	cCposQuery	+= If(lItemClVl,", RA_ITEM, RA_CLVL","")
	If !Empty(cTpRtProv) .And. lItemClVl
		cCposQuery	+= ", RHT_CC, RHT_ITEM, RHT_CLVL, RHT_DTCALC"
	ElseIf !Empty(cTpRtProv) .And. !lItemClVl
		cCposQuery	+= ", RHT_CC, RHT_DTCALC"
	EndIf
	cCposQuery	+= If(lINSSAut, ", RA_INSSAUT", "")
	cCposQuery  += ", SRA.R_E_C_N_O_"
	If !Empty(cTpRtProv)
		cCposnOrd5 := If(nOrdem == 5 .AND. lItemClVl, ", RHT_FILIAL, RHT_ITEM, RHT_CLVL, RHT_MAT, RHT_DTCALC", If(nOrdem == 5 .AND. !lItemClVl, ", RHT_FILIAL, RHT_MAT, RHT_DTCALC", ""))
	Else
		cCposnOrd5 := If(nOrdem == 5 .AND. lItemClVl, ", RT_FILIAL, RT_ITEM, RT_CLVL, RT_MAT", If(nOrdem == 5 .AND. !lItemClVl, ", RT_FILIAL, RT_MAT", ""))
	Endif
	cCposGroup	:=	"% " + cCposQuery + cCposnOrd5 + " %"
	cCposQuery	:=	"% " + cCposQuery + " %"
	
	cAliasSRA	:= "QSRA"
	
	If (Select(cAliasSRA) > 0)
		(cAliasSRA)->(dbCloseArea())
	EndIf
	
	aStruSRA := SRA->(dbStruct())
	If !Empty(cTpRtProv)
		cOrdem		:= sqlorder(;
			If(nOrdem == 5 .AND. lItemClVl, "RHT_FILIAL, RHT_CC, RHT_ITEM, RHT_CLVL, RHT_MAT, RHT_DTCALC";
			, If(nOrdem == 5 .AND. !lItemClVl, "RHT_FILIAL, RHT_CC, RHT_MAT, RHT_DTCALC";
			, SRA->(IndexKey(If(nOrdem==4,8,nOrdem))))))
	Else
		cOrdem := sqlorder(;
			If(nOrdem == 5 .AND. lItemClVl, "RT_FILIAL, RT_CC, RT_ITEM, RT_CLVL, RT_MAT";
			, If(nOrdem == 5 .AND. !lItemClVl, "RT_FILIAL, RT_CC, RT_MAT";
			, SRA->(IndexKey(If(nOrdem==4,8,nOrdem))))))
	EndIf
	
	cOrdem		:= "% "+cOrdem+" %"
	cCatQuery := ""
	
	For nReg:=1 to Len(cCateg)
		cCatQuery += "'" + Subs(cCateg, nReg, 1) + "'"
		If (nReg + 1) <= Len(cCateg)
			cCatQuery += ","
		EndIf
	Next nReg
	
	cCatQuery	:= "%" + cCatQuery + "%"
	cDemissa	:= "(SRA.RA_DEMISSA = '        ' OR SRA.RA_DEMISSA > '" + DTOS(dDataRef - day(dDataRef)) + "')"
	cDemissa	:= "% " + cDemissa + " %"
	
	If cPaisloc == "BRA"
		cCatefd := "% SRA.RA_CATEFD NOT IN ('107','108') %"
	EndIf
	
	If cTpc == "1"
		cExpTpc := "% ' ', '1' %"
	Else
		cExpTpc := "% '" + cTpc + "' %"
	EndIf
	
	If nOrdem == 5
		cWhereCC := "%RHT.RHT_CC >= '" + cCCDe + "' AND RHT.RHT_CC <= '" + cCCAte + "' AND%"
	Else
		cWhereCC := "%SRA.RA_CC >= '" + cCCDe + "' AND SRA.RA_CC <= '" + cCCAte + "' AND%"
	EndIf
	
	If !Empty(cTpRtProv)
		cAnoMesAtu := MesAno(dDataRef)
		cDtIQryAtu := cAnoMesAtu + "01"
		cDtFQryAtu := cAnoMesAtu + strzero(f_Ultdia(dDataRef),2)
		If cTpRtProv == 'RPF'
			cLisVerbas := "%" + cVerbaRPF + "%"
		ElseIf cTpRtProv == 'RP13'
			cLisVerbas	:= "%" + cVerbaRP13 + "%"
		EndIf
		
		BeginSql alias cAliasSRA
			SELECT %exp:cCposQuery%
			FROM %table:SRA% SRA
			INNER JOIN %table:RHT% RHT
				ON RHT.RHT_FILIAL = SRA.RA_FILIAL
				AND RHT.RHT_MAT = SRA.RA_MAT
			INNER JOIN %table:CTT% CTT
				ON %exp:cJnSRACTT%
				AND CTT.CTT_CUSTO = SRA.RA_CC
			WHERE SRA.RA_FILIAL >= %exp:cFilDe% AND SRA.RA_FILIAL <= %exp:cFilAte% AND
				SRA.RA_MAT >= %exp:cMatDe% AND SRA.RA_MAT <= %exp:cMatAte% AND
				%Exp:cWhereCC%
				SRA.RA_NOME >= %exp:cNomeDe% AND SRA.RA_NOME <= %exp:cNomeAte% AND
				SRA.RA_CATFUNC IN (%exp:Upper(cCatQuery)%) AND
				SRA.RA_ADMISSA <= %exp:dtos(dDataRef)% AND
				%exp:cDemissa% AND
				RHT.RHT_VERBA IN (%exp:cLisVerbas%) AND
				RHT.RHT_DTCALC = ( 
					SELECT MAX(RHT01.RHT_DTCALC) 
					FROM %table:RHT% RHT01
					WHERE RHT01.RHT_FILIAL = SRA.RA_FILIAL AND
						RHT01.RHT_MAT = SRA.RA_MAT AND
						RHT01.RHT_VERBA IN (%exp:cLisVerbas%) AND
						RHT01.RHT_DTCALC <= %exp:cDtFQryAtu% AND
						RHT01.%notDel%  ) AND
				SRA.RA_TPCONTR <> '3' AND
				%exp:cCatefd% AND
				SRA.%notDel% AND
				RHT.%notDel% AND
				CTT.%notDel%
			GROUP BY %exp:cCposGroup%
			ORDER BY %exp:cOrdem%
		EndSql
	Else
		If Empty(cTpc)
			BeginSql alias cAliasSRA
				SELECT %exp:cCposQuery%
				FROM %table:SRA% SRA
				INNER JOIN %table:CTT% CTT
					ON %exp:cJnSRACTT%
					AND CTT.CTT_CUSTO = SRA.RA_CC
				WHERE  SRA.RA_FILIAL >= %exp:cFilDe% AND SRA.RA_FILIAL <= %exp:cFilAte% AND
					SRA.RA_MAT >= %exp:cMatDe% AND SRA.RA_MAT <= %exp:cMatAte% AND
					SRA.RA_CC >= %exp:cCCDe% AND SRA.RA_CC <= %exp:cCCAte% AND
					SRA.RA_NOME >= %exp:cNomeDe% AND SRA.RA_NOME <= %exp:cNomeAte% AND
					SRA.RA_CATFUNC IN (%exp:Upper(cCatQuery)%) AND
					SRA.RA_ADMISSA <= %exp:dtos(dDataRef)% AND
					%exp:cDemissa% AND
					SRA.RA_TPCONTR <> '3' AND
					%exp:cCatefd% AND
					SRA.%notDel% AND
					CTT.%notDel%
				ORDER BY %exp:cOrdem%
			EndSql
		Else
			BeginSql alias cAliasSRA
				SELECT %exp:cCposQuery%
				FROM %table:SRA% SRA
				INNER JOIN %table:CTT% CTT
					ON %exp:cJnSRACTT%
					AND CTT.CTT_CUSTO = SRA.RA_CC
				WHERE  SRA.RA_FILIAL >= %exp:cFilDe% AND SRA.RA_FILIAL <= %exp:cFilAte% AND
					SRA.RA_MAT >= %exp:cMatDe% AND SRA.RA_MAT <= %exp:cMatAte% AND
					SRA.RA_CC >= %exp:cCCDe% AND SRA.RA_CC <= %exp:cCCAte% AND
					SRA.RA_NOME >= %exp:cNomeDe% AND SRA.RA_NOME <= %exp:cNomeAte% AND
					SRA.RA_CATFUNC IN (%exp:Upper(cCatQuery)%) AND
					SRA.RA_ADMISSA <= %exp:dtos(dDataRef)% AND SRA.RA_TPCONTR IN (%exp:(cExpTpc)%) AND
					SRA.RA_TPCONTR <> '3' AND
					%exp:cCatefd% AND
					%exp:cDemissa% AND
					SRA.%notDel% AND
					CTT.%notDel%
				ORDER BY %exp:cOrdem%
			EndSql
		EndIf
	EndIf
	
	//AJUSTA A ESTRUTURA DOS CAMPOS
	For nReg := 1 To Len(aStruSRA)
		If (aStruSRA[nReg][2] <> "C") .And. aStruSRA[nReg][1] $ cCposQuery
			TcSetField(cAliasSRA, aStruSRA[nReg][1], aStruSRA[nReg][2], aStruSRA[nReg][3], aStruSRA[nReg][4])
		EndIf
	Next nReg
	
	//ORDEM DO ARQUIVO TEMPORARIO
	If nOrdem == 1
		cInicio  := (cAliasSRA) + "->RA_FILIAL+" + (cAliasSRA) + "->RA_MAT"
		cFim	 := cFilAte + cMatAte
		aIndice  := {"PR_FILIAL", "PR_MAT"}
	ElseIf nOrdem == 2
		cInicio  := (cAliasSRA) + "->RA_FILIAL+" + (cAliasSRA) + "->RA_CC+" + (cAliasSRA) + "->RA_MAT"
		cFim	 := cFilAte + cCcAte + cMatAte
		aIndice  := {"PR_FILIAL", "PR_CC", "PR_MAT"}
	ElseIf nOrdem == 3
		cInicio  := (cAliasSRA) + "->RA_FILIAL+" + (cAliasSRA) + "->RA_NOME+" + (cAliasSRA) + "->RA_MAT"
		cFim	 := cFilAte + cNomeAte + cMatAte
		aIndice  := {"PR_FILIAL","PR_NOME","PR_MAT"}
	ElseIf nOrdem == 4
		cInicio  := (cAliasSRA) + "->RA_FILIAL+" + (cAliasSRA) + "->RA_CC+" + (cAliasSRA) + "->RA_NOME"
		cFim	 := cFilAte + cCcAte + cNomeAte
		aIndice  := {"PR_FILIAL","PR_CC","PR_NOME"}
	ElseIf nOrdem == 5
		If !Empty(cTpRtProv)
			cInicio  :=  (cAliasSRA) + "->RA_FILIAL+" + (cAliasSRA) + "->RHT_CC+" + (cAliasSRA) + "->RA_MAT"
		Else
			cInicio  :=  (cAliasSRA) + "->RA_FILIAL+" + (cAliasSRA) + "->RT_CC+" + (cAliasSRA) + "->RA_MAT"
		Endif
		cFim	 :=  cFilAte + cCcAte + cMatAte
		aIndice  :=	 {"PR_FILIAL","PR_CCMVTO","PR_MAT"}
	ElseIf nOrdem == 6//"C.Custo + Item + Classe"
		cInicio  := (cAliasSRA) + "->RA_FILIAL+" + (cAliasSRA) + "->RA_CC+" + (cAliasSRA) + "->RA_MAT"
		cFim	 := cFilAte + cCcAte + cMatAte
		aIndice  := {"PR_FILIAL","PR_CC","PR_ITEM","PR_CLVL","PR_MAT"}
	Endif
	
	If !Empty(cTpRtProv)
		If lItemClVl
			aIndAux 	 := {"PR_FILIAL", "PR_MAT", "PR_CCMVTO", "PR_ITMMVTO", "PR_CLVMVTO", "PR_TIPMOVI"}
		Else
			aIndAux 	 := {"PR_FILIAL", "PR_MAT", "PR_CCMVTO", "PR_TIPMOVI"}
		EndIf
	Else
		If lItemClVl
			aIndAux 	 := {"PR_FILIAL", "PR_MAT", "PR_CC", "PR_ITEM", "PR_CLVL", "PR_TIPMOVI"}
		Else
			aIndAux 	 := {"PR_FILIAL", "PR_MAT", "PR_CC", "PR_TIPMOVI"}
		EndIf
	EndIf
	// MONTA MATRIZ COM OS FUNCIONARIOS TRANSFERIDOS NO MES CONTEUDO DA MATRIZ - EMPRESA + FILIAL + CC + MATRICULA
	aTransf := {}
	fSeleTransf(@aTransf, dDataRef,cTpc)
	
	aTransAux := aClone(aTransf)
	AjustArray(@aTransAux)
	
	// CRIA O ARQUIVO TEMPORARIO "TPR" PARA IMPRESSAO DA PROVISAO
	Cria_TPR(aIndice, aIndAux)
	
	// SELECIONA O SRA PARA A MONTAGEM DO ARQUIVO TPR
	dbSelectArea(cAliasSRA)
	
	// CARREGA REGUA DE PROCESSAMENTO
	ProcRegua(LastRec())
	
	While (cAliasSRA)->(!Eof()) .And. &cInicio <= cFim
		
		// MOVIMENTA REGUA DE PROCESSAMENTO
		IncProc(STR0014) // "Selecionando Registros..."
		
		// INDICA O TIPO DE MOVIMENTO DO FUNCIONARIO
		nTpMv := 0
		lTransfEmp := .F.
		aSRASRT := {}
		aVerbasTPR := {}
		
		//Posiciona o SRA para a correta leitura dos afastamentos
		SRA->(DbGoTo((cAliasSRA)->R_E_C_N_O_))
		
		If ! Empty(cFiltroRel) .And. ! SRA->(&(cFiltroRel))
			(cAliasSRA)->(dbSkip())
			Loop
		EndIf
		
		If !Empty(cTpRtProv)
			// VERIFICA SE ESTA AFASTADO NA DATA DE REFERENCIA DO CALCULO
			cSitFolh := cTipAfas := ""
			dAfaIni  := dAfaFim	 := CtoD("")
			fChkAfas((cAliasSRA)->RA_FILIAL,(cAliasSRA)->RA_MAT,dDataRef,@dAfaIni,@dAfaFim,@cTipAfas)
			cSitFolh := If(!Empty(cTipAfas) .And. cTipAfas # "F" .and. ( Empty(dAfaFim) .or. dAfaFim >= dDataRef) , "A", cSitFolh)
			
			If lItemClVl
				aAdd(aSRASRT,{(cAliasSra)->RA_FILIAL,(cAliasSra)->RA_MAT,(cAliasSra)->RA_CC,(cAliasSra)->RA_NOME,;
				(cAliasSra)->RA_ADMISSA,(cAliasSra)->RA_DEMISSA,cSitFolh,cTipAfas,If( Empty( (cAliasSRA)->RA_TPCONTR ), "1", (cAliasSRA)->RA_TPCONTR ),;
				(cAliasSra)->RA_HRSMES,(cAliasSra)->RA_PERICUL,If (lSalInc,(cAliasSra)->RA_SALINCO,""),(cAliasSra)->RHT_CC,;
				(cAliasSra)->RA_INSMAX,(cAliasSra)->RA_ADTPOSE,(cAliasSra)->RHT_ITEM,(cAliasSra)->RHT_CLVL})
			Else
				aAdd(aSRASRT,{(cAliasSra)->RA_FILIAL,(cAliasSra)->RA_MAT,(cAliasSra)->RA_CC,(cAliasSra)->RA_NOME,;
				(cAliasSra)->RA_ADMISSA,(cAliasSra)->RA_DEMISSA,cSitFolh,cTipAfas,If( Empty( (cAliasSRA)->RA_TPCONTR ), "1", (cAliasSRA)->RA_TPCONTR ),;
				(cAliasSra)->RA_HRSMES,(cAliasSra)->RA_PERICUL,If (lSalInc,(cAliasSra)->RA_SALINCO,""),(cAliasSra)->RHT_CC,;
				(cAliasSra)->RA_INSMAX,(cAliasSra)->RA_ADTPOSE})
			EndIf
		EndIf
		
		cCusto 		:=  ""
		cCustoAtu	:=  ""
		cClvl 		:=  ""
		cClvlAtu 	:=  ""
		cItem 		:=  ""
		cItemAtu 	:=  ""
		
		// CONSISTE CONTROLE DE ACESSOS E FILIAIS VALIDAS
		If !((cAliasSRA)->RA_FILIAL $ fValidFil()) .Or. !Eval(bChkSRA)
			(cAliasSRA)->(dbSkip())
			LOOP
		EndIf
		
		lGeraBaixa := .T.
		aTransFunc := {}
		If (nPos := aScan(aTransAux, {|x| x[1] == cEmpAnt + (cAliasSRA)->(RA_FILIAL + RA_MAT) })) > 0
			aTransFunc := aClone(aTransAux[nPos, 2]	)
		EndIf
		
		nLenTransf := Len(aTransFunc)
		nK1 := 1
		// Desconsidera as transferências onde não houve alteração de Empresa, filial, matricula ou centro de custo
		While nK1 <= nLenTransf
			
			If (( lItemClVl .And. aTransFunc[nK1][01] + aTransFunc[nK1][02] + aTransFunc[nK1][03] + aTransFunc[nK1][12] + aTransFunc[nK1][14] == aTransFunc[nK1][04] + aTransFunc[nK1][05] + aTransFunc[nK1][06] + aTransFunc[nK1][13] + aTransFunc[nK1][15]) ;
				.Or.( !lItemClVl .And. aTransFunc[nK1][01] + aTransFunc[nK1][02] + aTransFunc[nK1][03] == aTransFunc[nK1][04] + aTransFunc[nK1][05] + aTransFunc[nK1][06]) )
				
				aDel(aTransFunc, nK1)
				aSize(aTransFunc, --nLenTransf)
			Else
				nK1++
			EndIF
			
		EndDO
		
		For nK1 := 1 To Len(aTransFunc)
			
			If aTransFunc[nK1][11] < MesAno(dDataRef)
				LOOP
			ElseIf aTransFunc[nK1][11] == MesAno(dDataRef)
				
				// Tratamento para quando houver mais de uma transferência no mesmo mês
				If Empty(cTpRtProv) .And. Len(aTransFunc) > nK1 .And. aTransFunc[nK1 + 1 ][11] == MesAno(dDataRef)
					
					// Obtém a última transferência dentro do período
					aEval( aTransFunc, {|x, y| If( x[11] == MesAno(dDataRef), nPosUltima := y, )}, nK1 )
					
					// Só gera a baixa se o destino da última transferência dentro do período for diferente da origem da primeira transferência
					If !(( lItemClVl .And. aTransFunc[nK1][01] + aTransFunc[nK1][02] + aTransFunc[nK1][03] + aTransFunc[nK1][12] + aTransFunc[nK1][14] == aTransFunc[nPosUltima][04] + aTransFunc[nPosUltima][05] + aTransFunc[nPosUltima][06] + aTransFunc[nPosUltima][13] + aTransFunc[nPosUltima][15] ) ;
						.Or.( !lItemClVl .And. aTransFunc[nK1][01] + aTransFunc[nK1][02] + aTransFunc[nK1][03] == aTransFunc[nPosUltima][04] + aTransFunc[nPosUltima][05] + aTransFunc[nPosUltima][06]) )
						
						If aTransFunc[nK1][01] == cEmpAnt .And. aTransFunc[nK1][02] == (cAliasSRA)->(RA_FILIAL + RA_MAT)
							// Gera baixa com as informações anteriores
							GravaTemp(dDataRef, aTransFunc[nK1][07], aTransFunc[nK1][08], aTransFunc[nK1][03], aTransFunc[nK1][12], aTransFunc[nK1][14], _Trfe_Sai, cSitFolh, cTipAfas)
						EndIf
					EndIf
					
					lGeraBaixa := .F.
					
					// Garante que na próxima iteração será tratada a última transferência do período
					nK1 := --nPosUltima
					
					LOOP
				EndIf 
				
				If aTransFunc[nK1][01] + aTransFunc[nK1][02] == aTransFunc[nK1][04] + aTransFunc[nK1][05] // Mesma Empresa, Filial e matrícula
					
					// Gera com as informações atuais
					GravaTemp(dDataRef, aTransFunc[nK1][09], aTransFunc[nK1][10], aTransFunc[nK1][06], aTransFunc[nK1][13], aTransFunc[nK1][15], _Trfe_Ent, cSitFolh, cTipAfas)
					
					If Empty(cTpRtProv) .And. lGeraBaixa
						// Gera baixa com as informações anteriores
						GravaTemp(dDataRef, aTransFunc[nK1][07], aTransFunc[nK1][08], aTransFunc[nK1][03], aTransFunc[nK1][12], aTransFunc[nK1][14], _Trfe_Sai, cSitFolh, cTipAfas)
					EndIf
					
				ElseIf aTransFunc[nK1][04] == cEmpAnt .And. aTransFunc[nK1][05] == (cAliasSRA)->(RA_FILIAL + RA_MAT) // Entrada
					// Gera com as informações atuais
					GravaTemp(dDataRef, aTransFunc[nK1][09], aTransFunc[nK1][10], aTransFunc[nK1][06], aTransFunc[nK1][13], aTransFunc[nK1][15], _Trfe_Ent, cSitFolh, cTipAfas)
					
				ElseIf lGeraBaixa .And. aTransFunc[nK1][01] == cEmpAnt .And. aTransFunc[nK1][02] == (cAliasSRA)->(RA_FILIAL + RA_MAT) // Saída
					// Gera baixa com as informações anteriores
					GravaTemp(dDataRef, aTransFunc[nK1][07], aTransFunc[nK1][08], aTransFunc[nK1][03], aTransFunc[nK1][12], aTransFunc[nK1][14], _Trfe_Sai, cSitFolh, cTipAfas)
				EndIf
				
				lNextFunc := .T.
				EXIT
			Else
				If aTransFunc[nK1][01] == cEmpAnt .And. aTransFunc[nK1][02] == (cAliasSRA)->(RA_FILIAL + RA_MAT)
					// Gera com as informações anteriores
					GravaTemp(dDataRef, aTransFunc[nK1][07], aTransFunc[nK1][08], aTransFunc[nK1][03], aTransFunc[nK1][12], aTransFunc[nK1][14], 0, cSitFolh, cTipAfas)
				EndIf
				lNextFunc := .T.
				EXIT
			EndIf
			
		Next nK1
		
		If lNextFunc
			lNextFunc := .F.
			(cAliasSRA)->(dbSkip())
			LOOP
		EndIf
		
		// Funcionário Demitido
		If (cAliasSRA)->RA_SITFOLH == "D" .And. MesAno((cAliasSRA)->RA_DEMISSA) == MesAno(dDataRef) .And. !(AllTrim((cAliasSRA)->RA_AFASFGT) $ "5*N*N1*N2")
			nTpMv := _Demitido
		EndIf
		
		// Grava com as informações da SRA
		GravaTemp(dDataRef,,,,,, nTpMv, cSitFolh, cTipAfas)
		
		dbSelectArea(cAliasSRA)
		(cAliasSRA)->(dbSkip())
		
	EndDo
	
	// GARANTE ORDEM 1 PARA BUSCA DOS FUNCIONARIOS
	(cAliasSRA)->( DbCloseArea() )
	SRA->( DbCloseArea() )
	DbSelectArea("SRA")
	SRA->( DbSetOrder(1) )
	
	If !Empty(cTpRtProv)
		aSRASRT := {}
	EndIf
	
Return 

/*/{Protheus.doc} GravaTemp
Grava os registros na tabela temporária para contabilização da provisão
@type  Static Function
@author Cícero Alves
@since 06/04/2021
/*/
Static Function GravaTemp(dDataRef, cFilFunc, cMatFunc, cCentro, cItemCon, cClasse, nTpMovi, cSitFunc, cTipoA)
	
	Local aArea			:= (cTBLXPROV)->( GetArea() )
	Local cAliasSRA		:= "QSRA"
	Local cChave		:= ""
	
	Default dDataRef	:= CToD("  /  /    ")
	Default cFilFunc 	:= SRA->RA_FILIAL
	Default cMatFunc 	:= SRA->RA_MAT
	Default cCentro  	:= SRA->RA_CC 
	Default cItemCon 	:= SRA->RA_ITEM
	Default	cClasse 	:= SRA->RA_CLVL
	Default nTpMovi		:= 0
	Default cSitFunc 	:= SRA->RA_SITFOLH
	Default cTipoA		:= ""
	
	(cTBLXPROV)->( dbSetOrder(2) )
	
	If lItemClVl
		cChave := cFilFunc + cMatFunc + cCentro + cItemCon + cClasse + cValToChar(nTpMovi)
	Else
		cChave := cFilFunc + cMatFunc + cCentro + cValToChar(nTpMovi)
	EndIf
	
	If !(cTBLXPROV)->( dbSeek(cChave) )
		If RecLock(cTBLXPROV, .T.)
			(cTBLXPROV)->PR_FILIAL  := cFilFunc
			(cTBLXPROV)->PR_MAT     := cMatFunc
			(cTBLXPROV)->PR_CC      := cCentro 
			(cTBLXPROV)->PR_NOME    := SRA->RA_NOME
			(cTBLXPROV)->PR_ADMISSA := SRA->RA_ADMISSA
			(cTBLXPROV)->PR_DEMISSA := If(MesAno(SRA->RA_DEMISSA) <= MesAno(dDataRef), SRA->RA_DEMISSA, cTod(" / / "))
			(cTBLXPROV)->PR_SITFOLH := cSitFunc
			(cTBLXPROV)->PR_AFASFGT := cTipoA
			(cTBLXPROV)->PR_TPCONTR := If( Empty( SRA->RA_TPCONTR), "1", SRA->RA_TPCONTR )
			(cTBLXPROV)->PR_HRSMES  := SRA->RA_HRSMES
			(cTBLXPROV)->PR_PERICUL := SRA->RA_PERICUL
			(cTBLXPROV)->PR_INSMAX	:= SRA->RA_INSMAX
			(cTBLXPROV)->PR_ADTPOSE	:= SRA->RA_ADTPOSE
			(cTBLXPROV)->PR_TIPMOVI := nTpMovi
			(cTBLXPROV)->PR_CATFUNC := SRA->RA_CATFUNC
			If lSalInc
				(cTBLXPROV)->PR_SALINCO := SRA->RA_SALINCO
			EndIf
			If lItemClVl
				(cTBLXPROV)->PR_ITEM    := cItemCon
				(cTBLXPROV)->PR_CLVL    := cClasse
			EndIf
			If !Empty(cTpRtProv)
				If nTpMovi != 5
					(cTBLXPROV)->PR_CCMVTO := (cAliasSRA)->RHT_CC
					If lItemClVl
						(cTBLXPROV)->PR_ITMMVTO := (cAliasSRA)->RHT_ITEM
						(cTBLXPROV)->PR_CLVMVTO := (cAliasSRA)->RHT_CLVL
					EndIf
				Else
					(cTBLXPROV)->PR_CCMVTO := cCentro
					If lItemClVl
						(cTBLXPROV)->PR_ITMMVTO := cItemCon
						(cTBLXPROV)->PR_CLVMVTO := cClasse
					EndIf				
				EndIf
			EndIf
			If lINSSAut
				(cTBLXPROV)->PR_INSSAUT := SRA->RA_INSSAUT
			EndIf
			
			MsUnlock()
		EndIf
	EndIf
	
	RestArea(aArea)
	
Return

/*/{Protheus.doc} AjustArray
Agrupa as transferências por funcionário
@type  Static Function
@author Cícero Alves
@since 06/07/2021
/*/
static Function AjustArray(aTransFunc)
	
	Local nI			:= 1
	Local cLastKey 		:= "*******"
	Local aAux 			:= {}
	Local aAux2			:= {}

	Default aTransFunc := {}
	
	ASort( aTransAux,,, {|x, y| x[2][1] + x[2][2] + x[2][4] + x[2][5] <= y[2][1] + y[2][2] + y[2][4] + y[2][5]})
	
	For nI := 1 To Len(aTransFunc)
		If aTransFunc[nI][2][1] + aTransFunc[nI][2][2] + aTransFunc[nI][2][4] != cLastKey
			Aadd(aAux2,{cLastKey, aAux})
			aAux := {}
			cLastKey := aTransFunc[nI][2][1] + aTransFunc[nI][2][2] + aTransFunc[nI][2][4]
		EndIf
		
		Aadd(aAux, { ;
			aTransFunc[nI][1][1]   						,; // 01 - Empresa De
			aTransFunc[nI][1][2] + aTransFunc[nI][1][4] ,; // 02 - Filial  De + Matricula De
			aTransFunc[nI][1][3]               			,; // 03 - Centro de Custo De
			aTransFunc[nI][3][1]              			,; // 04 - Empresa Para
			aTransFunc[nI][3][2] + aTransFunc[nI][2][4]	,; // 05 - Filial  Para + Matricula Para
			aTransFunc[nI][3][3]               			,; // 06 - Centro de Custo Para
			aTransFunc[nI][1][2]						,; // 07 - Filial de Origem
			aTransFunc[nI][1][4]				 		,; // 08 - Matricula de Origem
			aTransFunc[nI][3][2]			 			,; // 09 - Filial de Destino
			aTransFunc[nI][3][4]				 		,; // 10 - Matricula de Destino
			aTransFunc[nI][1][5] 						,; // 11 - Mes/Ano ( Ano/Mes ) da Transferencia 	
			If(lItemClVl, aTransFunc[nI][1][7], "")		,; // 12 - Item De
			If(lItemClVl, aTransFunc[nI][3][7], "")		,; // 13 - Item Para
			If(lItemClVl, aTransFunc[nI][1][8], "")		,; // 14 - Classe de Valor De
			If(lItemClVl, aTransFunc[nI][3][8], "")		,; // 15 - Classe de Valor Para
		} )
	Next
	
	aTransFunc := aAux2
	
Return
