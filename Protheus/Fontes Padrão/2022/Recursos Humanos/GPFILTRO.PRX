#INCLUDE "GPFILTRO.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PONCALEN.CH"
#INCLUDE "DBSTRUCT.CH"

Static lGpFltBtnOk := .F.
Static aSx3Struct	:= {}
     
/*
зддддддддддбддддддддддбдддддддбдддддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁGPFILTRO  Ё Autor Ё Marinaldo de Jesus    Ё Data Ё14/01/2003Ё
цддддддддддеддддддддддадддддддадддддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁBiblioteca de Fun┤■es Utilizadas para Filtro                Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁVoid                                                        Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGen┌rico                                                    Ё
цддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
Ё            ATUALIZACOES SOFRIDAS DESDE A CONSTRU─AO INICIAL  			Ё
цддддддддддддбддддддддбддддддбдддддддддддддддддддддддддддддддддддддддддд╢
ЁProgramador Ё Data   ЁFNC   Ё  Motivo da Alteracao                     Ё
цддддддддддддеддддддддеддддддедддддддддддддддддддддддддддддддддддддддддд╢
ЁMOHANAD ODEHЁ15/04/13ЁM12RH0ЁAdaptacao da funcao GpFltExpGet(), para   Ё
Ё            Ё        Ё RQ002Ёretornar o codigo da expressao            Ё
ЁSidney O.   Ё15/09/14ЁAjuste na pesquisa do Filtro                     Ё
ЁRaquel HagerЁ10/02/16ЁTUJQLJЁAjuste no filtro com clausula NOT IN.     Ё
ЁRaquel HagerЁ15/02/16ЁTUJQLJЁAjuste no filtro com clausula NOT IN.     Ё
ЁGabriel A.  Ё02/03/17ЁMRH-  ЁAjuste para construГЦo de filtro com      Ё
Ё            Ё        Ё6961  Ёcampos de tipo numИrico.                  Ё
ЁOswaldo L   Ё21/12/17ЁDRHPAGЁTratar acessos diretos na SX2, pontuados  Ё
Ё            Ё        Ё9991  Ёpelo sonarqube                            Ё
юддддддддддддаддддддддаддддддадддддддддддддддддддддддддддддддддддддддддды*/
Function GpFiltro( aFilterBldExp , lBuildExp , lDialogAjust )
Return( FilterBuildExpr( aFilterBldExp , lBuildExp , lDialogAjust ) )

/*/
зддддддддддбддддддддддддддбддддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤└o    ЁInGpFiltroExecЁAutor ЁMarinaldo de Jesus   Ё Data Ё14/05/2003Ё
цддддддддддеддддддддддддддаддддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤└o ЁExecutar Funcoes Dentro de GPFILTRO                          Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   ЁInGpFiltroExec( cExecIn , aFormParam )						 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									 Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁRetorno   ЁuRet                                                 	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁObserva┤└oЁ                                                      	     Ё
цддддддддддеддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁGenerico 													 Ё
юддддддддддаддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function InGpFiltroExec( cExecIn , aFormParam )
         
Local uRet

DEFAULT cExecIn		:= ""
DEFAULT aFormParam	:= {}

IF !Empty( cExecIn )
	cExecIn	:= BldcExecInFun( cExecIn , aFormParam )
	uRet	:= __ExecMacro( cExecIn )
EndIF

Return( uRet )

/*/
зддддддддддбдддддддддддддддбдддддбддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁFilterBuildExprЁAutorЁ Marinaldo de Jesus Ё Data Ё06/01/2003Ё
цддддддддддедддддддддддддддадддддаддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁCria uma Nova Expressao de Filtro                           Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function FilterBuildExpr( aFilterBldExp , lBuildExp , lDialogAjust )

Local aSvKeys			:= GetKeys()
Local aAdvSize			:= {}
Local aInfoAdvSize		:= {}
Local aObjCoords		:= {}
Local aObjSize			:= {}
Local aButtons			:= {}
Local aFields			:= {}
Local aFilterItens		:= {}
Local aFilterHeader		:= {}
Local aReturn			:= { {} , {} , {} }
Local aScopeCount		:= {}
Local aFilterRecnos		:= {}
Local aFiltroCpos		:= {}

Local bSet15 			:= { || NIL }
Local bSet24			:= { || NIL }
Local bPesqui			:= { || NIL }
Local bVisual			:= { || NIL }
Local bInclui			:= { || NIL }
Local bAltera			:= { || NIL }
Local bExclui			:= { || NIL }
Local bInitDlg			:= { || NIL }
Local bGpFilterMnt		:= { || NIL }
Local bReverse			:= { || NIL }
Local bLDblClick		:= { || GpFltbLDblClick( cAliasFilter ) }

Local cAlias 			:= Alias()
Local cAliasFilter		:= ""
Local cMark				:= "1"
Local cPrefix			:= "FILTRO_"

Local lAllSelect		:= ( !( ValType( aFilterBldExp ) == "A" ) .or. Empty( aFilterBldExp ) )
Local lSetCentury		:= __SetCentury( "on" )
Local lTemRE7 			:= AliasInDic("RE7")

Local nCont				:= 0
Local nLoop				:= 0
Local nLoops			:= 0
Local nFilterHeader		:= 0
Local nFilterItens		:= 0
Local nField			:= 0
Local nPosAls			:= 0
Local nPosExp			:= 0

Local oDlg
Local oMsSelect

DEFAULT lBuildExp		:= .T.
DEFAULT lDialogAjust	:= ( Upper( AllTrim( FunName() ) ) <> "GPFILTRO" )

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

CursorWait()

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁAbre o Arquivo de Filtros                              	   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
OpenFileFilter( @cAliasFilter , NIL , .F. )
aFilterHeader := ( cAliasFilter )->( dbStruct() )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁFiltra as Informacoes do Arquivo CRIT_SEL	             	   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
If lTemRE7
	For nCont := 1 To Len(aFilterBldExp)
		aFilterBldExp[nCont, 1] := StrTran( aFilterBldExp[nCont, 1], "FILTRO_", cPrefix )
	Next nCont
EndIf
GpFltSetFilt( cAliasFilter , aFilterBldExp , @aFiltroCpos )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁDefine o Alias Inicial                                 	   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
IF !( lAllSelect )
	IF ( ( nPosAls := aScan( aFilterBldExp , { |x| ( Upper( AllTrim( x[1] ) ) == cPrefix+"ALS" ) } ) ) > 0 )
		cAlias		:= Upper( AllTrim( aFilterBldExp[ nPosAls , 02 ] ) )
		lAllSelect	:= IF( "ALL_ALS" $ cAlias , .T. , lAllSelect )
	EndIF
EndIF	

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁInicializa a Confirmacao do Button OK <CTRL-O> como .F.	   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
lGpFltBtnOk := .F.

IF ( lBuildExp )
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine o Bloco para a Escolha da Opcao                 	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bGpFilterMnt	:= { |nOpc,cTitulo|	GpFilterMnt(;
						 								oMsSelect 			,;	//Objero MsSelect3
						 								cAliasFilter		,;	//Alias do Arquivo de Filtro
						 								aFiltroCpos			,;	//Array com os Filtros dos campos
						 								cAlias				,;	//Alias Inicial
						 								lAllSelect			,;	//Se todos os alias abertos serao disponibilizados
						 								nOpc				,;  //Opcao
						 								cTitulo				 ;	//Titulo do Dialog
						 							 ); 
						}					 							 
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Pesquisa <F4>            	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bPesqui	:= { || (;
						 CursorWait() ,;
						 PesFilter(;
						 				oMsSelect				,;
						 				cAliasFilter			,;
						 				cAlias					,;
						 				aFiltroCpos[ 01 , 02 ]	,;
										lAllSelect				 ;
						 		 ),;
						 CursorArrow(),;
						 SetKey( VK_F4 , bPesqui );
					);
				}
	aAdd( aButtons ,	{;
							"sduprop"							,;
	       					bPesqui								,;
	    					OemToAnsi( STR0030 + "...<F4>" )	,;			//"Pesquisar"
	    					OemToAnsi( STR0030 )				 ;			//"Pesquisar"
	       				};
		)
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Visualizacao <F5>        	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bVisual	:= { |nRow,nCol,nFlags|	CursorWait() ,;
									Eval( bGpFilterMnt , 01 , STR0040 ),;	//"Visualizar"
									CursorArrow(),;
						 			SetKey( VK_F5 , bVisual );
				}
	aAdd( aButtons ,	{;
							"BMPVISUAL"							,;
	       					bVisual								,;
	    					OemToAnsi( STR0040 + "...<F5>" )	,;			//"Visualizar"
	    					OemToAnsi( STR0040 )				,;			//"Visualizar"
	       				};
		)
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Inclusao <F6>            	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bInclui	:= { || CursorWait() ,;
					Eval( bGpFilterMnt , 02 , STR0031 ),;					//"Incluir"
					CursorArrow(),;
					SetKey( VK_F6 , bInclui );
				}
	aAdd( aButtons ,	{;	
							"BMPINCLUIR"								,;
	       					bInclui								,;
	    					OemToAnsi( STR0031 + "...<F6>"  )	,;			//"Incluir"
	    					OemToAnsi( STR0031 )	 			 ;			//"Incluir"
	       				};
		)
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Altera <F7>            	   	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bAltera	:= { || CursorWait() ,;
					Eval( bGpFilterMnt , 03 , STR0032 ),;					//"Alterar"
					CursorArrow(),;
					SetKey( VK_F7 , bAltera );
				}
	aAdd( aButtons ,	{;
							"ALTERA"							,;
	       					bAltera								,;
	    					OemToAnsi( STR0032 + "...<F7>" ) 	,;			//"Alterar"
	    					OemToAnsi( STR0032			   ) 	 ;			//"Alterar"
	       				};
		)
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Exclusao <F8>           	   	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bExclui	:= { || CursorWait() ,;
					Eval( bGpFilterMnt , 04 , STR0033 ),;					//"Excluir"
					CursorArrow(),;
					SetKey( VK_F8 , bExclui );
				}
	aAdd( aButtons ,	{;
							"EXCLUIR"							,;
	       					bExclui								,;
	    					OemToAnsi( STR0033 + "...<F8>" )	,;			//"Excluir"
	    					OemToAnsi( STR0033 )				 ;			//"Excluir"
	       				};
		)
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Marcar Todos <F9>       	   	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bMarkAll	:= { || CursorWait() ,;
						GpFltMarkAll( cAliasFilter , oMsSelect ),;
						CursorArrow(),;
						SetKey( VK_F9 , bMarkAll );
					}
	aAdd( aButtons ,	{;
							"CHECKED"							,;
	       					bMarkAll							,;
	    					OemToAnsi( STR0068 + "...<F9>" )	,;			//"Marca Todos"
	    					OemToAnsi( STR0075 )				 ;			//"Mc.Todos"
	       				};
		)
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Desmarcar Todos <F10>   	   	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bUnMarkAll	:= { || CursorWait() ,;
						GpFltUnMarkAll( cAliasFilter , oMsSelect ),;		//"Desmarca Todos"
						CursorArrow(),;
						SetKey( VK_F10 , bUnMarkAll );
					}
	aAdd( aButtons ,	{;
							"UNCHECKED"							,;
	       					bUnMarkAll							,;
	    					OemToAnsi( STR0069 + "...<F10>" )	,;			//"Desmarca Todos"
	    					OemToAnsi( STR0076 )				 ;			//"Dm.Todos"
	       				};
		)
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine a Tecla de Atalho para Desmarcar Todos <F11>   	   	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bReverse	:= { || CursorWait() ,;
						GpFltReverse( cAliasFilter , oMsSelect ),;			//"Inverte Sele┤└o"
						CursorArrow(),;
						SetKey( VK_F11 , bReverse );
					}
	aAdd( aButtons ,	{;
							"S4WB014B"							,;
	       					bReverse							,;
	    					OemToAnsi( STR0070 + "...<F11>" )	,;			//"Inverte Sele┤└o"
	    					OemToAnsi( STR0077 )				 ;			//"Inverte"
	       				};
		)
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define os Blocos para as Teclas <CTRL-O>					   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet15 	:= { || lGpFltBtnOk := .T. , GetKeys() , oDlg:End() }
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define os Blocos para as Teclas <CTRL-X>     	   			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet24	:= { || lGpFltBtnOk := .F. , GetKeys() , oDlg:End() }
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define o Bloco para o Init do Dialog         	   			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bInitDlg := { ||	Eval( oMsSelect:oBrowse:bGotop )	,;
						oMsSelect:oBrowse:Refresh()			,;
						SetKey( VK_F4 	, bPesqui	 	) 	,;
						SetKey( VK_F6 	, bVisual	 	) 	,;
						SetKey( VK_F6 	, bInclui		) 	,;  	
						SetKey( VK_F7 	, bAltera		) 	,;
						SetKey( VK_F8 	, bExclui		) 	,;
						SetKey( VK_F9 	, bMarkAll		) 	,;
						SetKey( VK_F10	, bUnMarkAll	) 	,;
						SetKey( VK_F11	, bReverse		) 	,;
						EnchoiceBar( oDlg , bSet15 , bSet24 , NIL , aButtons );
			 	}
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁDefine o Array com os Campos                           	   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aAdd( aFields	,	{ cPrefix+"CHK"	,	NIL	,	""						,	""   } )
	aAdd( aFields	,	{ cPrefix+"COD"	,	NIL	,	OemToAnsi( STR0024 )	,	"@!" } ) //"Codigo"
	aAdd( aFields	,	{ cPrefix+"DES"	,	NIL	,	OemToAnsi( STR0025 )	,	"@!" } ) //"Descricao"
	aAdd( aFields	,	{ cPrefix+"ALS"	,	NIL	,	OemToAnsi( STR0027 )	,	"@!" } ) //"Alias"
	aAdd( aFields	,	{ cPrefix+"PRG"	,	NIL	,	OemToAnsi( STR0028 )	,	"@!" } ) //"Programa"
	aAdd( aFields	,	{ cPrefix+"USR"	,	NIL	,	OemToAnsi( STR0026 )	,	"@!" } ) //"Usuario"
	aAdd( aFields	,	{ cPrefix+"GRP"	,	NIL	,	OemToAnsi( STR0060 )	,	"@!" } ) //"Grupo"
	aAdd( aFields	,	{ cPrefix+"EXP"	,	NIL	,	OemToAnsi( STR0029 )	,	"@!" } ) //"Expressao"
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes para o Dialogo Principal				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aAdvSize	:= MsAdvSize()
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes dos Objetos                               Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
	aMsSltCoords	:= { aObjSize[1,1] , aObjSize[1,2] , aObjSize[1,3] , aObjSize[1,4]   }
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta Dialogo para Montagem do Filtro                        Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( STR0034 ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF GetWndDefault() PIXEL	//"Construtor de Filtros"

		oMsSelect := MsSelect():New(;
										cAliasFilter	,;	//Alias	do Arquivo de Filtro
										cPrefix+"CHK"	,;	//Campo para controle do mark
										NIL				,;	//Condicao para o Mark
										aFields			,;	//Array com os Campos para o Browse
										NIL				,;	//?
										cMark			,;	//Conteudo a Ser Gravado no campo de controle do Mark
										aMsSltCoords	,;	//Coordenadas do Objeto
										NIL				,;  //?
										NIL				,;	//?	
										oDlg			 ;	//Objeto Dialog
									)
		
		oMsSelect:oBrowse:bLDblClick := bLDblClick
	
	ACTIVATE MSDIALOG oDlg CENTERED ON INIT Eval( bInitDlg )

Else

	lGpFltBtnOk := .T.

EndIF

IF ( lGpFltBtnOk )
	If !lTemRE7
		CREATE SCOPE aScopeCount FOR (;
											IF( ( lBuildExp ) , IsMark( "FILTRO_CHK" , cMark ) , FILTRO_CHK == cMark );
											.and.;
											IF( !( "ALL_ALS" $ aFiltroCpos[ 01 , 02 ] ) , FILTRO_ALS $ aFiltroCpos[ 01 , 02 ] , .T. );
											.and.;
											IF( !( "ALL_PRG" $ aFiltroCpos[ 02 , 02 ] ) , FILTRO_PRG $ aFiltroCpos[ 02 , 02 ] , .T. );
											.and.;
											IF( !( "ALL_USR" $ aFiltroCpos[ 03 , 02 ] ) , FILTRO_USR $ aFiltroCpos[ 03 , 02 ] , .T. );
											.and.;
											IF( !( "ALL_GRP" $ aFiltroCpos[ 04 , 02 ] ) , FILTRO_GRP $ aFiltroCpos[ 04 , 02 ] , .T. );
									)	
	Else
		CREATE SCOPE aScopeCount FOR (;
											IF( ( lBuildExp ) , IsMark( "RE7_CHK" , cMark ) , RE7_CHK == cMark );
											.and.;
											IF( !( "ALL_ALS" $ aFiltroCpos[ 01 , 02 ] ) , RE7_ALS $ aFiltroCpos[ 01 , 02 ] , .T. );
											.and.;
											IF( !( "ALL_PRG" $ aFiltroCpos[ 02 , 02 ] ) , RE7_PRG $ aFiltroCpos[ 02 , 02 ] , .T. );
											.and.;
											IF( !( "ALL_USR" $ aFiltroCpos[ 03 , 02 ] ) , RE7_USR $ aFiltroCpos[ 03 , 02 ] , .T. );
											.and.;
											IF( !( "ALL_GRP" $ aFiltroCpos[ 04 , 02 ] ) , RE7_GRP $ aFiltroCpos[ 04 , 02 ] , .T. );
									)
	EndIf

	( cAliasFilter )->( dbGotop() )
	IF ( ( nLoops := ( cAliasFilter )->( ScopeCount( aScopeCount , cAliasFilter , @aFilterRecnos ) ) ) > 0 )

		nFilterHeader := Len( aFilterHeader )
		For nLoop := 1 To nLoops
			( cAliasFilter )->( dbGoto( aFilterRecnos[ nLoop ] ) )
			aAdd( aFilterItens , Array( nFilterHeader ) )
			nFilterItens := Len( aFilterItens )
			For nField := 1 To nFilterHeader
				aFilterItens[ nFilterItens , nField ] := ( cAliasFilter )->( FieldGet( nField ) )
			Next nField
		Next nLoop

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		ЁCarrega o Retorno da Funcao                             	   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF (;
				 ( ( nPosAls := GpFltFldPos( cPrefix+"ALS" , aFilterHeader ) ) > 0 );
				 .and.;
				 ( ( nPosExp := GpFltFldPos( cPrefix+"EXP" , aFilterHeader ) ) > 0 );
			)

			aReturn[ 01 ]	:= aClone( aFilterHeader )
			aReturn[ 02 ]	:= aClone( aFilterItens  )
			aReturn[ 03 ]	:= aClone( aFilterRecnos )

		EndIF
	
	EndIF	

EndIF

IF !( lSetCentury )
	__SetCentury( "off" )
EndIF

FreeLocks( cAliasFilter , NIL , .T. , NIL )
RestKeys( aSvKeys , .T. )

CursorArrow()

Return( GpFltExpGet( cAliasFilter , aReturn[ 01 ] , aReturn[ 02 ] , aReturn[ 03 ] , aFilterBldExp , lBuildExp ) )

/*/
зддддддддддбдддддддддддддддбдддддбддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltBtnOk	   ЁAutorЁ Marinaldo de Jesus Ё Data Ё10/08/2004Ё
цддддддддддедддддддддддддддадддддаддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna o Ultimo Status do Botao de Confirmacao da  MontagemЁ
Ё          Ёdo Filtro													Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGPFILTRO      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GpFltBtnOk()
Return( lGpFltBtnOk )

/*/
зддддддддддбдддддддддддддддбдддддбддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltbLDblClickЁAutorЁ Marinaldo de Jesus Ё Data Ё04/03/2004Ё
цддддддддддедддддддддддддддадддддаддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁEfetua o Mark                                               Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGPFILTRO      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltbLDblClick( cAliasFilter )

Local cKey			:= ""
Local cPrefix		:= "FILTRO_"

Local lTemRE7 		:= AliasInDic("RE7")

Local nRecno		:= ( cAliasFilter )->( Recno() )

If lTemRE7
	cPrefix			:= "RE7_"
EndIf
cKey				:= ( cAliasFilter )->&(cPrefix+"COD")

//Se nЦo existir nenhum registro, sai da tela.
If ( cAliasFilter )->( Eof() ) .and. ( cAliasFilter )->( Bof() )
	Return Nil
EndIf

IF ( GpFltLockReg(	cAliasFilter	,;
					nRecno			,;
					cKey			,;
					NIL				,;
					NIL				,;
					.T.				 ;
				  );
	)			
	IF ( IsMark( cPrefix+"CHK" , "1" ) )
		( cAliasFilter )->&( cPrefix+"CHK" ) := ""
	Else
		( cAliasFilter )->&( cPrefix+"CHK" ):= "1"
	EndIF
EndIF

IF ( !IsMark( cPrefix+"CHK" , "1" ) )
	FreeLocks( cAliasFilter , nRecno , .T. , cKey )
EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltMarkAll  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMarca Todos                                                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltMarkAll( cAliasFilter , oMsSelect )

Local nSvRecno 		:= ( cAliasFilter )->( Recno() )
Local nRegsTot		:= 0
Local nRegsNoLock	:= 0
Local nRecno

Local cKey
Local cMsgInfo
Local cPrefix		:= "FILTRO_"

Local lTemRE7 		:= AliasInDic("RE7")

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

( cAliasFilter )->( dbGotop() )
While ( ( cAliasFilter )->( !Eof() ) )
	nRecno	:= ( cAliasFilter )->( Recno() )
	cKey	:= ( cAliasFilter )->( &(cPrefix+"COD") )
	++nRegsTot
	IF GpFltLockReg( cAliasFilter )
		IF ( IsLocked( cAliasFilter , nRecno ) )
			( cAliasFilter )->( &(cPrefix+"CHK") ) := "1"
		Else
			++nRegsNoLock
			FreeLocks( cAliasFilter , nRecno , .T. , cKey )
		EndIF
	Else
		++nRegsNoLock
	EndIF
	( cAliasFilter )->( dbSkip() )
End While

IF ( nRegsNoLock > 0 )
	IF ( nRegsNoLock == nRegsTot )
		cMsgInfo := STR0082	//"NЦo foi possМvel marcar o(s) Registro(s)."
	Else
		cMsgInfo := STR0083	//"NЦo foi possМvel marcar algum(ns) Registro(s)."
	EndIF
	cMsgInfo += CRLF
	cMsgInfo += STR0084		//"O(s) registro(s) estА(Цo) em uso por outro usuАrio."
	MsgInfo( OemToAnsi( cMsgInfo ) )
EndIF

( cAliasFilter )->( MsGoto( nSvRecno ) )

oMsSelect:oBrowse:Refresh()

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltUnMarkAllЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁDesmarca Todos                                              Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltUnMarkAll( cAliasFilter , oMsSelect )

Local nSvRecno		:= ( cAliasFilter )->( Recno() )
Local nRegsTot		:= 0
Local nRegsNoLock	:= 0
Local nRecno

Local cKey
Local cMsgInfo
Local cPrefix		:= "FILTRO_"

Local lTemRE7 		:= AliasInDic("RE7")

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

( cAliasFilter )->( dbGotop() )
While ( ( cAliasFilter )->( !Eof() ) )
	nRecno	:= ( cAliasFilter )->( Recno() )
	cKey	:= ( cAliasFilter )->( &(cPrefix+"COD") )
	++nRegsTot
	IF GpFltLockReg( cAliasFilter )
		IF ( IsLocked( cAliasFilter , nRecno ) )
			( cAliasFilter )->( &(cPrefix+"CHK") ) := ""
		Else
			++nRegsNoLock
		EndIF
		FreeLocks( cAliasFilter , nRecno , .T. , cKey )
	Else
		FreeLocks( cAliasFilter , nRecno , .T. , cKey )
		++nRegsNoLock
	EndIF
	( cAliasFilter )->( dbSkip() )
End While

IF ( nRegsNoLock > 0 )
	IF ( nRegsNoLock == nRegsTot )
		cMsgInfo := STR0083	//"NЦo foi possМvel desmarcar algum(ns) Registro(s)."
	Else
		cMsgInfo := STR0085	//"NЦo foi possМvel desmarcar algum(ns) Registro(s)."
	EndIF
	cMsgInfo += CRLF
	cMsgInfo += STR0084		//"O(s) registro(s) estА(Цo) em uso por outro usuАrio."
	MsgInfo( OemToAnsi( cMsgInfo ) )
EndIF

( cAliasFilter )->( MsGoto( nSvRecno ) )

oMsSelect:oBrowse:Refresh()

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltReverse  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁInverte Selecao                                             Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltReverse( cAliasFilter , oMsSelect )

Local nSvRecno		:= ( cAliasFilter )->( Recno() )
Local nRegsTot		:= 0
Local nRegsNoLock	:= 0
Local nRecno

Local cKey
Local cMsgInfo
Local cPrefix		:= "FILTRO_"

Local lIsMark
Local lTemRE7 		:= AliasInDic("RE7")

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

( cAliasFilter )->( dbGotop() )
While ( ( cAliasFilter )->( !Eof() ) )
	nRecno	:= ( cAliasFilter )->( Recno() )
	cKey	:= ( cAliasFilter )->( &(cPrefix+"COD") )
	++nRegsTot
	IF GpFltLockReg( cAliasFilter )
		lIsMark := !Empty( ( cAliasFilter )->( &(cPrefix+"CHK") ) )
		IF ( IsLocked( cAliasFilter , nRecno ) )
			IF ( lIsMark )
				( cAliasFilter )->( &(cPrefix+"CHK") ) := ""
			Else
				( cAliasFilter )->( &(cPrefix+"CHK") ) := "1"
			EndIF
		Else
			++nRegsNoLock
		EndIF
		IF ( lIsMark )
			FreeLocks( cAliasFilter , nRecno , .T. , cKey )
		EndIF
	Else
		++nRegsNoLock
	EndIF
	( cAliasFilter )->( dbSkip() )
End While

IF ( nRegsNoLock > 0 )
	IF ( nRegsNoLock == nRegsTot )
		cMsgInfo := STR0086	//"NЦo foi possМvel inverter a(s) marcaГЦo(Уes) do(s) Registro(s)."
	Else
		cMsgInfo := STR0087	//"NЦo foi possМvel inverter a(s) marcaГЦo(Уes) de algum(ns) Registro(s)."
	EndIF
	cMsgInfo += CRLF
	cMsgInfo += STR0084		//"O(s) registro(s) estА(Цo) em uso por outro usuАrio."
	MsgInfo( OemToAnsi( cMsgInfo ) )
EndIF

( cAliasFilter )->( MsGoto( nSvRecno ) )

oMsSelect:oBrowse:Refresh()

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltReverse  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁLock dos Registros                                          Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltLockReg(	cAliasFilter	,;
								nRecno			,;
								cKey			,;
								nTentaLocks		,;
								nSecondsWait	,;
								lYesNoWait		 ;
							)

Local bLockReg	:= { || LockRegsCode( cAliasFilter , { nRecno } , { cKey } , nTentaLocks , nSecondsWait , .T. , NIL ) }

Local lIsLock	:= .F.

Local cMsgInfo
Local cTitle
Local cMsgYesNo
Local cProcWaiting
Local cPrefix			:= "FILTRO_"

Local lTemRE7 			:= AliasInDic("RE7")

DEFAULT nRecno			:= ( cAliasFilter )->( Recno() )
DEFAULT nTentaLocks		:= 1
DEFAULT nSecondsWait	:= 0
DEFAULT lYesNoWait		:= .F.

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

If ValType(cKey) == "U"
	cKey	:= ( cAliasFilter )->( &(cPrefix+"COD") )
EndIf

IF ( lYesNoWait )

	cMsgInfo		:= OemToAnsi( STR0080 + AllTrim( Str( nRecno ) ) + STR0081 )//"O Registro "###" est═ reservado para outro usu═rio."
	cTitle			:= OemToAnsi( STR0034 )	//"Construtor de Filtros"
	cMsgYesNo		:= OemToAnsi( STR0078 ) //"Tentar novamente?"
	cProcWaiting	:= OemToAnsi( STR0079 )	//"Tentando reservar o registro."

	lIsLock := WhileYesNoWait(;
								bLockReg	,;	//Bloco a Ser Executando Enquando ( Devera Retornar Valor Logico )
								100				,;	//Numero de Tentativas
								.T.				,;	//Se podera Encerrar as as Tentativas ( Button Cancel Enabled )
								cMsgInfo		,;	//Mensagem de Corpo para a MsgInfo
								cTitle			,;	//Titulo para a MsgInfo 
								cMsgYesNo		,;	//Mensagem de Corpo para a MsgYesNo
								cTitle			,;	//Titulo para a MsgYesNo
								cProcWaiting	,;	//Mensagem de corpo para a ProcWaiting
								cTitle			 ;	//Titulo para a ProcWaiting
					  		)

Else

	lIsLock := Eval( bLockReg )

EndIF

Return( lIsLock )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltFldPos	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna o Posicionamento do Campo                           Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GpFltFldPos( cField , aFilterHeader )

Local nPos

DEFAULT cField	:= ""
DEFAULT aFilterHeader	:= {}

cField := Upper( AllTrim( cField ) )
nPos := aScan( aFilterHeader , { |x| Upper( Alltrim( x[1] ) ) == cField } )

Return( nPos )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁGpFltExpGet   ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna as Expressoes de Filtro Selecionada                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltExpGet(	cAliasFilter	,;
								aFilterHeader	,;
	   							aFilterItens	,;
								aFilterRecnos	,;
								aCndFltGetFld	,;
								lBuildNewExp	 ;
							)

Local aMarcRecnos	:= {}
Local aSource		:= {}
Local aFiltroExp	:= {}

Local cFiltroExp	:= ""
Local cKeyExp		:= ""
Local cCodExp		:= ""
Local cPrefix		:= "FILTRO_"

Local lMultSelExp	:= .F.
Local lSetCentury	:= __SetCentury( "on" )
Local lTemRE7 		:= AliasInDic("RE7")

Local nRecnoExp		:= 0
Local nPosFieldCod	:= 0
Local nPosFieldAls	:= 0
Local nPosFieldExt	:= 0

Local bBlock

Local nPosSource
Local nItem
Local nItens
Local nLoop
Local nLoops

DEFAULT aFilterItens	:= {}
DEFAULT aCndFltGetFld	:= {}
DEFAULT lBuildNewExp	:= .T.						    

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

nPosFieldCod	:= GpFltFldPos( cPrefix+"COD", aFilterHeader )
nPosFieldAls	:= GpFltFldPos( cPrefix+"ALS", aFilterHeader )
nPosFieldExt	:= GpFltFldPos( cPrefix+"EXP", aFilterHeader )
If ValType(aCndFltGetFld) == "U"
	aCndFltGetFld	:= {;
									{ cPrefix+"COD", "ALL_COD" , .T. , .F. },;
									{ cPrefix+"ALS", "ALL_ALS" , .T. , .F. },;
									{ cPrefix+"PRG", "ALL_PRG" , .T. , .F. },;
									{ cPrefix+"USR", "ALL_USR" , .T. , .F. },;
									{ cPrefix+"GRP", "ALL_GRP" , .T. , .F. } ;
								}
EndIf

CursorWait()

Begin Sequence

	IF ( nPosFieldExt == 0 )
		Break
	EndIF
		
	bBlock := GpFltBlkExpGet( aFilterHeader , aCndFltGetFld )
	
	IF ( ValType( bBlock ) == "B" )
	
		nItens := Len( aFilterItens )
		For nItem := 1 To nItens
	
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Verifica se Atende ao Criterio                               Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF ( aScan( aFilterItens , bBlock , nItem , 1 ) == 0 )
				Loop
			EndIF
	            
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Obtem a Expressao                                            Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF Empty( ( cFiltroExp := AllTrim( aFilterItens[ nItem  , nPosFieldExt ] ) ) )
				Loop
			EndIF

			//OBTEM O ALIAS
			cAlias		:= AllTrim(aFilterItens[nItem, nPosFieldAls])
			//OBTEM O CODIGO
			cCodExp	:= AllTrim(aFilterItens[nItem, nPosFieldCod])
			//RETORNA O DESCRITIVO DA EXPRESSAO
			cExpDesc	:= GpFltBldDesc( cFiltroExp , NIL , cAlias )

			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			Ё Adiciona Informacoes Referente ao Alias                      Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			IF ( ( nPosSource := aScan( aSource , { |x| x[1] == cAlias } ) ) == 0 )
				aAdd( aSource , { cAlias , {} } )
				nPosSource	:= Len( aSource )
			EndIF
			aAdd( aSource[ nPosSource , 02 ] , { cExpDesc , cFiltroExp , nItem , aFilterRecnos[ nItem ] } )

		Next nItem

		nItens := Len( aSource )
		For nItem := 1 To nItens
			IF Empty( aSource[ nItem , 02 ] )
				Loop
			EndIF
			cAlias 		:= aSource[ nItem , 01 ]
			nRecnoExp	:= aSource[ nItem , 02 , 01 , 04 ]
			nLoops		:= Len( aSource[ nItem , 02 ] )
			IF !( lMultSelExp := !( nLoops == 1 ) )
				cFiltroExp := aSource[ nItem , 02 , 01 , 02 ]
			Else
				IF ( lBuildNewExp )
					cFiltroExp := GpFltShwGet( aSource[ nItem , 01 ] , aClone( aSource[ nItem , 02 ] ) , aCndFltGetFld , @nRecnoExp )
				Else
					For nLoop := 1 To nLoops
						cFiltroExp := aSource[ nItem , 02 , nLoop , 02 ]
						IF !Empty( cFiltroExp )
							aAdd( aFiltroExp , { cAlias , cFiltroExp,cCodExp } )
							aAdd( aMarcRecnos , nRecnoExp )
						EndIF
					Next nLoop
					Loop
				EndIF
			EndIF
			IF !Empty( cFiltroExp )
				aAdd( aFiltroExp , { cAlias , cFiltroExp,cCodExp } )
				aAdd( aMarcRecnos , nRecnoExp )
			EndIF
		Next nItem

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Garante que os Filtros Selecionados Estarao Marcados para posЁ
		Ё terior Selecao											   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		nItens := Len( aMarcRecnos )
		For nItem := 1 To nItens
			IF !Empty( nRecnoExp := aMarcRecnos[ nItem ] )
				( cAliasFilter )->( dbGoto( nRecnoExp ) )
				cKeyExp := ( cAliasFilter )->( &(cPrefix+"COD") )
				IF GpFltLockReg( cAliasFilter , nRecnoExp , cKeyExp , 5 , 1 )
					IF ( IsLocked( cAliasFilter , nRecnoExp ) )
						( cAliasFilter )->( &(cPrefix+"CHK") ) := "1"
					EndIF
					FreeLocks( cAliasFilter , nRecnoExp , .T. , cKeyExp )
				EndIF
			EndIF
		Next nItem

	EndIF
	
End Sequence

IF !( lSetCentury )
	__SetCentury( "off" )
EndIF

CursorArrow()

Return( aClone( aFiltroExp ) )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltShwGet	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁDisponibiliza Dialog para Escolha dos Filtros para retorno  Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltShwGet( cAlias , aSource , aCndFltGetFld , nRecnoExp )

Local cFiltroExp	:= ""

Local lbOk			:= .F.

Local aFiltroCpos
Local aTarget
Local aSvKeys
Local aAdvSize
Local aInfoAdvSize
Local aObjCoords
Local aObjSize
Local aLboxSrcCoords
Local aLboxTrgCoords
Local aBitMaps
Local aScopeCount
Local aRecnos

Local bSet15
Local bSet24

Local cTitDlg
Local cAliasFilter
Local cKeyExp
Local cPrefix		:= "FILTRO_"
Local cX2Nome

Local lTemRE7 		:= AliasInDic("RE7")

Local nLoop
Local nLoops
Local nFatLstBox

Local oLBoxSource
Local oLineSource
Local oLBoxTarget
Local oLineTarget
Local oDlg
Local oFont
Local oOk
Local oNo
Local oBntNext
Local oBtnPrev
Local oBtnPgNext
Local oBtnPgPrev
Local oBtnPlsAnd
Local oBtnPlsOr
Local oBtnMinAnd
Local oBtnMinOr
Local oBtnPlsLft

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

nRecnoExp := 0

CursorWait()

Begin Sequence

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Se Estiver Vazio ou com apenas um Filtro Selecionado abandonaЁ
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF (;
			Empty( aSource );
			.or.;
			( Len( aSource ) == 1 );
		)
		Break
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta o Titulo do Dialogo                                    Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	cTitDlg := STR0064	//"Sele┤└o de Filtros"
	cTitDlg += " -> "
	cTitDlg += cAlias
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Obtem o Nome da Tabela no SX2                                Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	cX2Nome := GetCache( "SX2" , cAlias , NIL , "Capital( AllTrim( X2Nome() ) )" , 1 , .F. )
	IF !Empty( cX2Nome )
		cTitDlg += " - "
		cTitDlg += cX2Nome
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Salva as Teclas de Atalho                    	   			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aSvKeys := GetKeys()

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define os Blocos para as Teclas <CTRL-O>					   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet15 	:= { || IF( ;
							GpFilVldExp( cAlias , oLBoxTarget , .T. , @cFiltroExp ) ,;
							(;
									lbOk := .T. ,;
									GetKeys(),;
									oDlg:End();
							 ),;
							 .F.;
						);
				}		

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define os Blocos para as Teclas <CTRL-X>     	   			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet24	:= { || lbOk := .F. , cFiltroExp := "" , GetKeys() , oDlg:End() }

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes para o Dialogo Principal				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aAdvSize	:= MsAdvSize(.T.,.F.)

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes dos Objetos                               Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aObjCoords		:= {}
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )
	nFatLstBox		:= RetFatListBox( aObjSize[1,4] )
	aLboxSrcCoords	:= { aObjSize[1,1]+10,aObjSize[1,2]+2,aObjSize[1,4]/100*46.2,(aObjSize[1,3])/100*nFatLstBox}
	aLboxTrgCoords	:= { aObjSize[1,1]+10,aObjSize[1,4]/100*46.2+25,aLboxSrcCoords[3],aLboxSrcCoords[4]}

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Objtem os BitMaps                          				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aBitMaps := Array( 02 )
	aBitMaps[1] := LoadBitmap( GetResources() , "BR_VERDE"		)
	aBitMaps[2] := LoadBitmap( GetResources() , "BR_VERMELHO"	)

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Inicializa aTarget                         				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aTarget				:= Array( 01 , 05 )
	aTarget[ 01 , 01 ]	:= .F.	//Status da Expressao
	aTarget[ 01 , 02 ] 	:= ""	//Expressao Descritiva
	aTarget[ 01 , 03 ]	:= ""	//Expressao Real		
	aTarget[ 01 , 04 ]	:= ""	//Indice da Expressao

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( cTitDlg ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define o ListBox para Selecao da Expressao 				   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		oLBoxSource := TwBrowse():New( aLboxSrcCoords[1],aLboxSrcCoords[2],aLboxSrcCoords[3],aLboxSrcCoords[4],,{OemToAnsi(STR0065)/*/"Express└o"*/},,oDlg,,,,,,,,,,,,.F.,,.T.,,.F.,,,)
		oLBoxSource:SetArray( aSource )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define o Objeto Contador de Linas do ListBox Source      	   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		@ aLboxSrcCoords[1]-08,aLboxSrcCoords[2] SAY oLineSource VAR StrZero(oLBoxSource:nAt,6)+"/"+StrZero(Len(oLBoxSource:aArray),6) SIZE 146,10 OF oDlg PIXEL FONT oFont

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define bLine, bChange e bLdblClick do Souce                  Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		oLBoxSource:bLine		:= { || LineLstBox( oLBoxSource , .F. , {} , NIL , NIL ) }
		oLBoxSource:bChange 	:= { || oLineSource:Refresh() }
		oLBoxSource:bLdblClick	:= { || GpFldEdtMem( oLBoxSource , cTitDlg ) }

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define o ListBox das Expressoes Selecionadas				   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		oLBoxTarget := TwBrowse():New( aLboxTrgCorrds[1],aLboxTrgCorrds[2],aLboxTrgCorrds[3],aLboxTrgCorrds[4],,{"",OemToAnsi(STR0065)/*/"Express└o"*/},,oDlg,,,,,,,,,,,,.F.,,.T.,,.F.,,,)
		oLBoxTarget:SetArray( aTarget )

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define o Objeto Contador de Linas do ListBox Target          Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		@ aLboxTrgCoords[1]-08,aLboxTrgCoords[2] SAY oLineTarget VAR StrZero(oLBoxTarget:nAt,6)+"/"+StrZero(Len(oLBoxTarget:aArray),6) SIZE 146,10 OF oDlg PIXEL FONT oFont

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define bLine, bChange e bLdblClick do Target                 Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		oLBoxTarget:bLine		:= { || LineLstBox( oLBoxTarget , .T. , aBitMaps , 1 , .T. ) }
		oLBoxTarget:bChange 	:= { || oLineTarget:Refresh() }
		oLboxTarget:bLdblClick	:= { || GpFldEdtMem( oLboxTarget , cTitDlg ) }

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define os Botoes para Selecao                            	   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		@ aLboxTrgCoords[1]+013,aLboxSrcCoords[3]+003 BUTTON oBntNext 		PROMPT OemToAnsi(">")				SIZE 021.5,009 DESIGN ACTION GpAddExp(cAlias,"ONE",oLBoxSource,oLBoxTarget) 	OF oDlg PIXEL
		@ aLboxTrgCoords[1]+021,aLboxSrcCoords[3]+003 BUTTON oBtnPrev		PROMPT OemToAnsi("<")				SIZE 021.5,009 DESIGN ACTION GpRmvExp(cAlias,"ONE",oLBoxSource,oLBoxTarget) 	OF oDlg PIXEL
		@ aLboxTrgCoords[1]+031,aLboxSrcCoords[3]+003 BUTTON oBtnPgNext 	PROMPT OemToAnsi(">>")				SIZE 021.5,009 DESIGN ACTION GpAddExp(cAlias,"ALL",oLBoxSource,oLBoxTarget) 	OF oDlg PIXEL
		@ aLboxTrgCoords[1]+038,aLboxSrcCoords[3]+003 BUTTON oBtnPgPrev		PROMPT OemToAnsi("<<")				SIZE 021.5,009 DESIGN ACTION GpRmvExp(cAlias,"ALL",oLBoxSource,oLBoxTarget) 	OF oDlg PIXEL

		@ aLboxTrgCoords[1]+057,aLboxSrcCoords[3]+003 BUTTON oBtnPlsAnd 	PROMPT OemToAnsi("+ "+STR0019)		SIZE 021.5,009 DESIGN ACTION GpAddAndOr(cAlias,"AND",oLBoxTarget,oLBoxSource)	OF oDlg PIXEL //"e"
		@ aLboxTrgCoords[1]+065,aLboxSrcCoords[3]+003 BUTTON oBtnMinAnd 	PROMPT OemToAnsi("- "+STR0019)		SIZE 021.5,009 DESIGN ACTION GpRmvAndOr(cAlias,"AND",oLBoxTarget,oLBoxSource)	OF oDlg PIXEL //"e"
		@ aLboxTrgCoords[1]+075,aLboxSrcCoords[3]+003 BUTTON oBtnPlsOr		PROMPT OemToAnsi("+ "+STR0020)		SIZE 021.5,009 DESIGN ACTION GpAddAndOr(cAlias,"OR",oLBoxTarget,oLBoxSource)	OF oDlg PIXEL //"ou"
		@ aLboxTrgCoords[1]+082,aLboxSrcCoords[3]+003 BUTTON oBtnMinOr		PROMPT OemToAnsi("- "+STR0020)		SIZE 021.5,009 DESIGN ACTION GpRmvAndOr(cAlias,"OR",oLBoxTarget,oLBoxSource)	OF oDlg PIXEL //"ou"

		@ aLboxTrgCoords[1]+101,aLboxSrcCoords[3]+003 BUTTON oBtnPlsRgt		PROMPT OemToAnsi("+ (" )			SIZE 021.5,009 DESIGN ACTION GpAddPar(cAlias,"R",oLBoxTarget,oLBoxSource) 		OF oDlg PIXEL 
		@ aLboxTrgCoords[1]+109,aLboxSrcCoords[3]+003 BUTTON oBtnPlsLft		PROMPT OemToAnsi("- (" )			SIZE 021.5,009 DESIGN ACTION GpRmvPar(cAlias,"R",oLBoxTarget,oLBoxSource) 		OF oDlg PIXEL
		@ aLboxTrgCoords[1]+119,aLboxSrcCoords[3]+003 BUTTON oBtnMinRgt		PROMPT OemToAnsi("+ )" )			SIZE 021.5,009 DESIGN ACTION GpAddPar(cAlias,"L",oLBoxTarget,oLBoxSource) 		OF oDlg PIXEL 
		@ aLboxTrgCoords[1]+126,aLboxSrcCoords[3]+003 BUTTON oBtnMinLft		PROMPT OemToAnsi("- )" )			SIZE 021.5,009 DESIGN ACTION GpRmvPar(cAlias,"L",oLBoxTarget,oLBoxSource) 		OF oDlg PIXEL

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Define os BitMaps com as Legendas							   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		@ aLboxTrgCoords[4]+25,aLboxTrgCoords[2] 		BITMAP oOk NAME "BR_VERDE" 								SIZE 008,008 OF oDlg PIXEL
		@ aLboxTrgCoords[4]+28,aLboxTrgCoords[2]+010	SAY OemToAnsi( STR0062 )								SIZE 150,010 OF oDlg PIXEL FONT oFont //"Express└o Correta"
		                                                                                                	
		@ aLboxTrgCoords[4]+25,aLboxTrgCoords[2]+100 	BITMAP oNo NAME "BR_VERMELHO"							SIZE 008,008 OF oDlg PIXEL
		@ aLboxTrgCoords[4]+28,aLboxTrgCoords[2]+110	SAY OemToAnsi( STR0063 )								SIZE 150,010 OF oDlg PIXEL FONT oFont //"Express└o Incorreta"

		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.
		
	ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 )
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Restaura as Teclas de Atalho                    	   		   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	RestKeys( aSvKeys , .T. )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Verifica se Deseja Gravar Novo Filtro           	   		   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF (;
			( lbOk );
			.and.;
			!Empty( cFiltroExp );
		 )
		CursorArrow()
		IF ( MsgYesNo( OemToAnsi( STR0067 ) , OemToAnsi( cTitDlg ) ) )	//"Deseja Gravar o Novo Filtro"
			CursorWait()
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁAbre o Arquivo de Filtros                              	   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			OpenFileFilter( @cAliasFilter , NIL , .F. )
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁFiltra as Informacoes do Arquivo CRIT_SEL	             	   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			GpFltSetFilt( cAliasFilter , aCndFltGetFld , @aFiltroCpos )
			aScopeCount := {}
			If !lTemRE7
				CREATE SCOPE aScopeCount FOR (;
												IsMark( "FILTRO_CHK" , "1" );
												.and.;
												IF( !( "ALL_ALS" $ aFiltroCpos[ 01 , 02 ] ) , FILTRO_ALS $ aFiltroCpos[ 01 , 02 ] , .T. );
												.and.;
												IF( !( "ALL_PRG" $ aFiltroCpos[ 02 , 02 ] ) , FILTRO_PRG $ aFiltroCpos[ 02 , 02 ] , .T. );
												.and.;
												IF( !( "ALL_USR" $ aFiltroCpos[ 03 , 02 ] ) , FILTRO_USR $ aFiltroCpos[ 03 , 02 ] , .T. );
												.and.;
												IF( !( "ALL_GRP" $ aFiltroCpos[ 04 , 02 ] ) , FILTRO_GRP $ aFiltroCpos[ 04 , 02 ] , .T. );
											)	
			Else
				CREATE SCOPE aScopeCount FOR (;
												IsMark( "RE7_CHK" , "1" );
												.and.;
												IF( !( "ALL_ALS" $ aFiltroCpos[ 01 , 02 ] ) , RE7_ALS $ aFiltroCpos[ 01 , 02 ] , .T. );
												.and.;
												IF( !( "ALL_PRG" $ aFiltroCpos[ 02 , 02 ] ) , RE7_PRG $ aFiltroCpos[ 02 , 02 ] , .T. );
												.and.;
												IF( !( "ALL_USR" $ aFiltroCpos[ 03 , 02 ] ) , RE7_USR $ aFiltroCpos[ 03 , 02 ] , .T. );
												.and.;
												IF( !( "ALL_GRP" $ aFiltroCpos[ 04 , 02 ] ) , RE7_GRP $ aFiltroCpos[ 04 , 02 ] , .T. );
											)	
			EndIf
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
			ЁRetira as Marcas anteriores              	             	   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			( cAliasFilter )->( dbGotop() )
			aRecnos := {}
			IF ( ( nLoops := ( cAliasFilter )->( ScopeCount( aScopeCount , cAliasFilter , @aRecnos ) ) ) > 0 )
				For nLoop := 1 To nLoops
					nRecnoExp := aRecnos[ nLoop ]
					( cAliasFilter )->( dbGoto( nRecnoExp ) )
					cKeyExp := ( cAliasFilter )->( &(cPrefix+"COD") )
					IF GpFltLockReg( cAliasFilter , nRecnoExp , cKeyExp , 5 , 1 )
						IF ( IsLocked( cAliasFilter , nRecnoExp ) )
							( cAliasFilter )->( &(cPrefix+"CHK") ) := ""
						EndIF
						FreeLocks( cAliasFilter , nRecnoExp , .T. , cKeyExp )
					EndIF	
				Next nLoop
			EndIF
			/*/
			здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
 			ЁInclui a Nova Expressao                                	   Ё
			юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
			aFiltroCpos[ 01 , 02 ] := Padr( cAlias , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) )
			IF GpFilterMnt(;
			   					NIL					,;	//Objeto MsSelect
			   					cAliasFilter		,;	//Alias do Arquivo de Filtro
			   					aFiltroCpos			,;	//Array com os Filtros dos campos
			   					cAlias				,;	//Alias Inicial
			   					.F.					,;	//Se todos os alias abertos serao disponibilizados
			   					2					,;	//Opcao
			   					STR0066 			,;	//Titulo do Dialog ###"Incluir novo Filtro"
			   					cFiltroExp			 ;	//Expressao de Filtro
			   				)
				/*/
				здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
				ЁArmazena o Recno                                        	   Ё
				юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
				nRecnoExp	:= ( cAliasFilter )->( Recno() )
			EndIF
		EndIF
	EndIF

End Sequence

CursorArrow()

Return( cFiltroExp )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltAlsGet	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё13/11/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Expressao de Filtro Conforme Alias                  Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GpFltAlsGet( aFilterBuildExpr , cAlias )

Local cExpFltAls			:= ""

Local nExpFltAls			:= 0

DEFAULT aFilterBuildExpr	:= {}
DEFAULT cAlias 				:= Alias()

cAlias := Upper( Alltrim( cAlias ) )

IF (;
		(;
			nExpFltAls := aScan( aFilterBuildExpr , { |x| ( Upper( AllTrim( x[ 01 ] ) ) == cAlias ) } );
		) > 0;
	 )
	cExpFltAls := aFilterBuildExpr[ nExpFltAls , 02 ]
EndIF

Return( cExpFltAls )

/*/
зддддддддддбдддддддддддддддддбдддддбддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o    ЁGpFldEdtMem		 ЁAutorЁMarinaldo de JesusЁ Data Ё15/10/2003Ё
цддддддддддедддддддддддддддддадддддаддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁEdit de Campo Memo                       					Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso       ЁoListBox:blDblClick										    Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFldEdtMem( oListBox , cTitulo )

/*/
зддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Variaveis que serao inicializadas no Corpo da Funcao		  Ё
юддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Local aSvKeys
Local aAdvSize
Local aInfoAdvSize
Local aObjSize
Local aObjCoords

Local bSet15
Local bSet24

Local cMemoEdit
Local oMemoEdit

Local oFont
Local oDlg

Begin Sequence

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Apenas se o ListBox nao Estiver Vazio      				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	IF Empty( oListBox:aArray )
		Break
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Obtem o Memo                               				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	cMemoEdit := oListBox:aArray[ oListBox:nAt , oListBox:nColPos ]

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes dos Objetos             				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aAdvSize		:= MsAdvSize( .T. , .T. )
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aObjCoords		:= { { 0 , 0 , .T. , .T. } }
	aObjSize := MsObjSize( aInfoAdvSize , aObjCoords )

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Salva as Teclas de Atalho                  				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aSvKeys := GetKeys()

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define o Bloco para a Tecla <CTRL-O>						   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet15	:= { || GetKeys() , oDlg:End() }

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define o Bloco para a Tecla <CTRL-X>     	   				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet24	:= { || GetKeys() , oDlg:End() }

	DEFINE FONT oFont NAME "Arial" SIZE 0,-15 //BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( cTitulo ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL 
			
		@ aObjSize[1,1],aObjSize[1,2] GET oMemoEdit VAR cMemoEdit MEMO SIZE aObjSize[1,4],(aObjSize[1,3]-15) FONT oFont HSCROLL CENTERED DESIGN NO VSCROLL OF oDlg PIXEL WHEN ( .T. )
		oMemoEdit:lReadOnly := .F.

		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 ) CENTERED
	RestKeys( aSvKeys , .T. )

End Sequence

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltBlkExpGetЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Block para Busca das Expressoes					    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltBlkExpGet( aFilterHeader , aCndFltGetFld )

Local cAnd			:= ".AND."
Local cOr			:= ".OR."

Local bBlock

Local cBlock
Local cWhere
Local cPos
Local cAddAndOr

Local lAddCond
Local lAddCondOr

Local nPos
Local nLoop
Local nLoops

IF ( ( nLoops := Len( aCndFltGetFld ) ) > 0 )

	cBlock := "{ |x| "
	For nLoop := 1 To nLoops
	
		IF ( Len( aCndFltGetFld[ nLoop ] ) >= 03 )
			lAddCond 	:= aCndFltGetFld[ nLoop , 03 ]
		Else
			lAddCond	:= .T.
		EndIF
		IF ( Len( aCndFltGetFld[ nLoop ] ) >= 04 )
			cAddAndOr	:= aCndFltGetFld[ nLoop , 04 ]
		Else
			cAddAndOr	:= cOr
		EndIF	
	
		DEFAULT lAddCond 	:= .T.
		DEFAULT cAddAndOr	:= cOr

		lAddCondOr := ( ( cOr $ Upper( AllTrim( cAddAndOr ) ) ) .or. ( Upper( AllTrim( cAddAndOr ) ) $ cOr ) )

		IF ( ( nPos := GpFltFldPos( aCndFltGetFld[ nLoop , 01 ] , aFilterHeader ) ) == 0 )
			Loop
		EndIF
		
		cPos	:= AllTrim( Str( nPos ) )
		cWhere	:= Upper( AllTrim( aCndFltGetFld[ nLoop , 02 ] ) )

		cBlock	+= "Upper("
		cBlock	+= 			"AllTrim("
		cBlock	+=  						"x["
		cBlock	+= 								cPos
		cBlock	+= 						"]"
		cBlock	+= 					")"
		cBlock	+= 		")"
		IF !( "ALL_" $ cWhere )
			cBlock	+= " == "
		Else
			cBlock	+= " <> "
		EndIF
		cBlock	+= " '"
		cBlock	+= cWhere
		cBlock	+= "' "
		
		IF ( nLoops > 1 )
			IF ( lAddCond )
				IF ( nLoop < nLoops	 )
					IF ( lAddCondOr )
						cBlock += cOr
					Else
						cBlock += cAnd
					EndIF
				EndIF
			Else
				Exit
			EndIF
		EndIF
	
	Next nLoop
	
	IF ( SubStr( cBlock , - Len( cAnd ) ) == cAnd )
		cBlock := SubStr( cBlock , 1 , ( Len( cBlock ) - Len( cAnd ) ) )
	ElseIF ( SubStr( cBlock , Len( cOr ) ) == cOr )
		cBlock := SubStr( cBlock , 1 , ( Len( cBlock ) - Len( cOr ) ) )
	EndIF
	
	cBlock += " } "
	bBlock := __ExecMacro( cBlock )

EndIF

Return( bBlock )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpAddExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMove Expressao de aSource para aTarget					    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpAddExp( cAlias , cOneAll , oLBoxSource , oLBoxTarget )

Local aAdel
Local aConcat

Local cConcat
Local cAndOr

Local nPosEmpty
Local nStart
Local nLoop
Local nLoops
Local nSizeSource
Local nSizeTarget
Local nConcat

Begin Sequence

	IF ( oLBoxSource:nAt > 0 )
		aAdel		:= {}
		cOneAll		:= Upper( AllTrim( cOneAll ) )
		nStart		:= IF( ( cOneAll == "ONE" ) , oLBoxSource:nAt , 1 )
		nSizeSource	:= Len( oLBoxSource:aArray )
		nSizeTarget	:= Len( oLBoxTarget:aArray )
		IF (;
				( nSizeSource == 1 );
				.and.;
				( Empty( oLBoxSource:aArray[ nSizeSource , 03 ] ) );
			)	
			Break
		EndIF
		IF ( ( nLoops := IF( ( cOneAll == "ONE" ) , oLBoxSource:nAt , nSizeSource ) ) > 0 )
			IF ( cOneAll == "ALL" )
				aConcat		:= { "&"+STR0019 /*/"e"*/ , "&"+STR0020 /*/"ou"*/ }
				IF ( ( nConcat := Aviso( OemToAnsi( STR0072 ) /*/"Adicionar Todos"*/ , OemToAnsi( STR0071 ) /*/"Concatenar as Express■es com:"*/  , aConcat ) ) == 2 )
					cConcat := ".OR."
					cAndOr	:= "OR"
				Else
					cConcat := ".AND."
					cAndOr	:= "AND"
				EndIF
				IF (;
						( nSizeTarget >= 1 );
						.and.;
						!Empty( oLBoxTarget:aArray[ nSizeTarget , 04 ] );
					 )
					aAdd( oLBoxTarget:aArray , Array( 04 ) )
					nPosEmpty := Len( oLBoxTarget:aArray )
					oLBoxTarget:aArray[ nPosEmpty , 01 ]	:= .F.												//Status da Expressao
					oLBoxTarget:aArray[ nPosEmpty , 02 ] 	:= IF( ( cAndOr == "AND" ) , STR0019 , STR0020  )	//Expressao Descritiva
					oLBoxTarget:aArray[ nPosEmpty , 03 ]	:= cConcat											//Expressao Real		
					oLBoxTarget:aArray[ nPosEmpty , 04 ]	:= ( AllTrim(Str(nPosEmpty))+"-"+cAndOr )			//Indice da Expressao
				EndIF
			EndIF
		EndIF
		For nLoop := nStart To nLoops
			aAdd( aAdel , nLoop )
			IF ( ( nPosEmpty := aScan( oLBoxTarget:aArray , { |x| Empty(x[4]) } ) ) == 0 )
				aAdd( oLBoxTarget:aArray , Array( 04 ) )
				nPosEmpty := Len( oLBoxTarget:aArray )
			EndIF
			oLBoxTarget:aArray[ nPosEmpty , 01 ]	:= .F.								//Status da Expressao
			oLBoxTarget:aArray[ nPosEmpty , 02 ] 	:= oLBoxSource:aArray[ nLoop , 01 ]	//Expressao Descritiva
			oLBoxTarget:aArray[ nPosEmpty , 03 ]	:= oLBoxSource:aArray[ nLoop , 02 ]	//Expressao Real		
			oLBoxTarget:aArray[ nPosEmpty , 04 ]	:= oLBoxSource:aArray[ nLoop , 03 ]	//Indice da Expressao
			IF ( cOneAll == "ALL" )
				IF (;
						( nLoops > 1 );
						.and.;
						( nLoop < nLoops );
					)	
					IF ( ( nPosEmpty := aScan( oLBoxTarget:aArray , { |x| Empty(x[4]) } ) ) == 0 )
						aAdd( oLBoxTarget:aArray , Array( 04 ) )
						nPosEmpty := Len( oLBoxTarget:aArray )
					EndIF
					oLBoxTarget:aArray[ nPosEmpty , 01 ]	:= .F.												//Status da Expressao
					oLBoxTarget:aArray[ nPosEmpty , 02 ] 	:= IF( ( cAndOr == "AND" ) , STR0019 , STR0020  )	//Expressao Descritiva
					oLBoxTarget:aArray[ nPosEmpty , 03 ]	:= cConcat											//Expressao Real		
					oLBoxTarget:aArray[ nPosEmpty , 04 ]	:= ( AllTrim(Str(nPosEmpty))+"-"+cAndOr )			//Indice da Expressao
				EndIF
			EndIF
		Next nLoop
		nLoops := Len( aADel )
		For nLoop := 1 To nLoops
			aDel( oLBoxSource:aArray , aADel[ nLoop ] )
			--nSizeSource
		Next nLoop
		aSize( oLBoxSource:aArray , nSizeSource )
		oLBoxSource:nAt := Min( nSizeSource , 1 )
		GpFilVldExp( cAlias , oLBoxTarget , .F. )
		oLBoxTarget:nColPos := 1
		oLBoxTarget:Refresh()
	EndIF

End Sequence
	
Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpRmvExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMove Expressao de aTarget para aSource					    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpRmvExp( cAlias , cOneAll , oLBoxSource , oLBoxTarget )

Local aAdel

Local cIndice

Local nPosEmpty
Local nStart
Local nLoop
Local nLoops
Local nSizeTarget

Begin Sequence

	IF ( oLBoxTarget:nAt > 0 )
		aAdel		:= {}
		cOneAll		:= Upper( AllTrim( cOneAll ) )
		nStart		:= IF( ( cOneAll == "ONE" ) , oLBoxTarget:nAt , 1 )
		nSizeTarget	:= Len( oLBoxTarget:aArray )
		IF (;
				( nSizeTarget == 1 );
				.and.;
				( Empty( oLBoxTarget:aArray[ nSizeTarget , 04 ] ) );
			)	
			Break
		EndIF
		nLoops		:= IF( ( cOneAll == "ONE" ) , oLBoxTarget:nAt , nSizeTarget )
		For nLoop := nStart To nLoops
			aAdd( aAdel , nLoop )
			cIndice := Upper( AllTrim( oLBoxTarget:aArray[ nLoop , 04 ] ) )
			IF (;
					( "AND" $ cIndice );
					.or.;
					( "OR"  $ cIndice );
					.or.;
					( "("   $ cIndice );
					.or.;
					( ")"   $ cIndice );
			   )
				Loop
			EndIF
			IF ( ( nPosEmpty := aScan( oLBoxSource:aArray , { |x| Empty(x[3]) } ) ) == 0 )
				aAdd( oLBoxSource:aArray , Array( 03 ) )
				nPosEmpty := Len( oLBoxSource:aArray )
			EndIF
			oLBoxSource:aArray[ nPosEmpty , 01 ] 	:= oLBoxTarget:aArray[ nLoop , 02 ]	//Expressao Descritiva
			oLBoxSource:aArray[ nPosEmpty , 02 ]	:= oLBoxTarget:aArray[ nLoop , 03 ]	//Expressao Real		
			oLBoxSource:aArray[ nPosEmpty , 03 ]	:= oLBoxTarget:aArray[ nLoop , 04 ]	//Indice da Expressao
		Next nLoop
		nLoops := Len( aADel )
		For nLoop := 1 To nLoops
			aDel( oLBoxTarget:aArray , aADel[ nLoop ] )
			--nSizeTarget
		Next nLoop
		aSize( oLBoxTarget:aArray , nSizeTarget )
		oLBoxTarget:nAt := Min( nSizeTarget , 1 )
		GpFilVldExp( cAlias , oLBoxTarget , .F. )
		oLBoxTarget:nColPos := 1
		oLBoxTarget:Refresh()
		oLBoxSource:Refresh()
	EndIF

End Sequence
	
Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpAddAndOr	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAdiciona .and. ou .or. para concatenar os Filtros em aTargetЁ
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpAddAndOr( cAlias , cAndOr , oLBoxTarget , oLBoxSource )

Local cOption

Local nPosEmpty
Local nSizeTarget

Begin Sequence

	IF Empty( oLBoxSource:aArray )
		Break
	EndIF

	IF ( oLBoxTarget:nAt > 0 )
		cAndOr		:= Upper( AllTrim( cAndOr ) )
		cOption		:= IF( ( cAndOr == "AND" ) , " .and. " , " .or. "  )
		nSizeTarget	:= Len( oLBoxTarget:aArray )
		IF (;
				( nSizeTarget == 1 );
				.and.;
				( Empty( oLBoxTarget:aArray[ nSizeTarget , 03 ] ) );
			)	
			Break
		EndIF
		IF ( ( nPosEmpty := aScan( oLBoxTarget:aArray , { |x| Empty(x[4]) } ) ) == 0 )
			aAdd( oLBoxTarget:aArray , Array( 04 ) )
			nPosEmpty := Len( oLBoxTarget:aArray )
		EndIF
		oLBoxTarget:aArray[ nPosEmpty , 01 ]	:= .F.												//Status da Expressao
		oLBoxTarget:aArray[ nPosEmpty , 02 ] 	:= IF( ( cAndOr == "AND" ) , STR0019 , STR0020  )	//Expressao Descritiva
		oLBoxTarget:aArray[ nPosEmpty , 03 ]	:= cOption											//Expressao Real		
		oLBoxTarget:aArray[ nPosEmpty , 04 ]	:= ( AllTrim(Str(nPosEmpty))+"-"+cAndOr )			//Indice da Expressao
		oLBoxTarget:nAt := 1
		GpFilVldExp( cAlias , oLBoxTarget , .F. )
		oLBoxTarget:nColPos := 1
		oLBoxTarget:Refresh()
	EndIF

End Sequence
	
Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpRmvAndOr	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRemove .and. ou .or. de	aTarget								Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpRmvAndOr( cAlias , cAndOr , oLBoxTarget )

Local cCnt
Local cOption

Begin Sequence

	IF Empty( oLBoxTarget:aArray )
		Break
	EndIF

	cAndOr		:= Upper( AllTrim( cAndor ) )
	cCnt		:= Upper( AllTrim( oLBoxTarget:aArray[ oLBoxTarget:nAt , 04 ] ) )
	cOption		:= IF( ( cAndOr == "AND" ) , " .and. " , " .or. "  )

	IF !(;
			( "AND" 	$ cCnt );
			.or.;
	   		( "OR"  	$ cCnt );
	   		.or. ;
	   		( cOption	$ cCnt );
	   	)	
		Break
	EndIF

	IF ( ( nSizeTarget := Len( oLBoxTarget:aArray ) ) == 0 )
		Break
	EndIF
	
	aDel( oLBoxTarget:aArray , oLBoxTarget:nAt )
	aSize( oLBoxTarget:aArray , ( --nSizeTarget ) )
	GpFilVldExp( cAlias , oLBoxTarget , .F. )
	oLBoxTarget:nColPos := 1
	oLBoxTarget:Refresh()

End Sequence

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpAddPar	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAdiciona "("  ou ")" para Separar/priorizar os Filtros 	  emЁ
Ё          ЁaTarget                                                     Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpAddPar( cAlias , cDirection , oLBoxTarget , oLBoxSource )

Local cOption

Local nPosEmpty
Local nSizeTarget

Begin Sequence

	cDirection	:= Upper( AllTrim( cDirection ) )
	cOption		:= IF( ( cDirection == "R" ) , "(" , ")"  )
	nSizeTarget	:= Len( oLBoxTarget:aArray )
	IF ( ( nPosEmpty := aScan( oLBoxTarget:aArray , { |x| Empty(x[4]) } ) ) == 0 )
		aAdd( oLBoxTarget:aArray , Array( 04 ) )
		nPosEmpty := Len( oLBoxTarget:aArray )
	EndIF
	oLBoxTarget:aArray[ nPosEmpty , 01 ]	:= .F.												//Status da Expressao
	oLBoxTarget:aArray[ nPosEmpty , 02 ] 	:= cOption											//Expressao Descritiva
	oLBoxTarget:aArray[ nPosEmpty , 03 ]	:= cOption											//Expressao Real		
	oLBoxTarget:aArray[ nPosEmpty , 04 ]	:= (AllTrim(Str(nPosEmpty))+"-"+cDirection+cOption)	//Indice da Expressao
	oLBoxTarget:nAt := 1
	GpFilVldExp( cAlias , oLBoxTarget , .F. )
	oLBoxTarget:nColPos := 1
	oLBoxTarget:Refresh()

End Sequence
	
Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpRmvPar	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRemove ( ou ) de aTarget									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpRmvPar( cAlias , cDirection , oLBoxTarget )

Local cCnt
Local cOption

Begin Sequence

	IF Empty( oLBoxTarget:aArray )
		Break
	EndIF

	cDirection	:= Upper( AllTrim( cDirection ) )
	cCnt		:= Upper( AllTrim( oLBoxTarget:aArray[ oLBoxTarget:nAt , 04 ] ) )
	cOption		:= IF( ( cDirection == "R" ) , "(" , ")"  )

	IF !(;
			( "("		$ cCnt );
			.or.;
	   		( ")"		$ cCnt );
	   		.or.;
	   		( cOption	$ cCnt );
	   	)	
		Break
	EndIF

	IF ( ( nSizeTarget := Len( oLBoxTarget:aArray ) ) == 0 )
		Break
	EndIF
	
	aDel( oLBoxTarget:aArray , oLBoxTarget:nAt )
	aSize( oLBoxTarget:aArray , ( --nSizeTarget ) )
	GpFilVldExp( cAlias , oLBoxTarget , .F. )
	oLBoxTarget:nColPos := 1
	oLBoxTarget:Refresh()

End Sequence

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFilVldExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁValida o conteudo das Expressoes							Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFilVldExp( cAlias , oLBoxTarget , lShowHelp , cExp )

Local lExpOk	:= .F.

Local nBytes	:= 0

Local nLoop
Local nLoops

Begin Sequence

	IF ( ( nLoops := Len( oLBoxTarget:aArray ) ) == 0 )
		Break
	EndIF

	IF Empty( cAlias )
		Break
	EndIF

	cExp := ""
	For nLoop := 1 To nLoops
		nBytes += Len( oLBoxTarget:aArray[ nLoop , 03 ] )
		#IFDEF TOP
			IF !( lExpOk := ( nBytes <= 2000 ) ) //Filter greater than 2000 bytes
				oLBoxTarget:aArray[ nLoop , 01 ] := .F.
				IF ( lShowHelp )
					Help( "" , 1 , "TOOCOMPLEX" , , OemToAnsi( "Filter greater than 2000 bytes" ) , 1 , 0 )
				EndIF
				Break
			EndIF
		#ENDIF
		IF !( lExpOk := ( nBytes <= 1048575 ) ) //( 1048575 + 1 ) String size overflow!
			oLBoxTarget:aArray[ nLoop , 01 ] := .F.
			IF ( lShowHelp )
				Help( "" , 1 , "TOOCOMPLEX" , , OemToAnsi( "String size overflow!" ) , 1 , 0 )
			EndIF
			Break
		EndIF
		cExp += oLBoxTarget:aArray[ nLoop , 03 ]
	Next nLoop

	IF !( lExpOk := ( cAlias )->( CheckExecForm( cExp , lShowHelp ) ) )
		For nLoop := 1 To nLoops
			oLBoxTarget:aArray[ nLoop , 01 ] := .F.
		Next nLoop
	Else
		For nLoop := 1 To nLoops
			oLBoxTarget:aArray[ nLoop , 01 ] := .T.
		Next nLoop
	EndIF

End Sequence

Return( lExpOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltSetFilt  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё22/10/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁFiltra o Arquivo CRIT_SEL.USR                               Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltSetFilt( cAliasFilter , aFilterBldExp , aFiltroCpos )

Local bSetFilter

Local cField
Local cAlias
Local cFunName
Local cCodUsr
Local cCodGrp
Local cPrefix			:= "FILTRO_"

Local lSetFilter
Local lTemRE7 			:= AliasInDic("RE7")

Local nLoop
Local nLoops

Local cSetFilter		:= ""
Local cAliasdbFilter	:= ""
Local cFunNamedbFilter	:= ""
Local cCodUsrdbFilter	:= ""
Local cCodGrpdbFilter	:= space(6) + "/"

DEFAULT aFilterBldExp := {}

If lTemRE7
	cAliasFilter	:= "RE7"
	cPrefix			:= "RE7_"
EndIf

aFiltroCpos 			:= Array( 04 , 02  )
aFiltroCpos[ 01 , 01 ]	:= cPrefix+"ALS"; aFiltroCpos[ 01 , 02 ] := ""
aFiltroCpos[ 02 , 01 ]	:= cPrefix+"PRG"; aFiltroCpos[ 02 , 02 ] := ""
aFiltroCpos[ 03 , 01 ]	:= cPrefix+"USR"; aFiltroCpos[ 03 , 02 ] := ""
aFiltroCpos[ 04 , 01 ]	:= cPrefix+"GRP"; aFiltroCpos[ 04 , 02 ] := ""

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁFitra o Arquivo Por Alias e Programa						   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
nLoops := Len( aFilterBldExp )
For nLoop := 1 To nLoops

	IF !( ValType( aFilterBldExp[ nLoop ] ) == "A" )
		Loop
	EndIF

	cField	:= Upper( AllTrim( aFilterBldExp[ nLoop , 01 ] ) )

	Do Case
		Case ( cField == cPrefix+"ALS" )
			cAlias			:= aFilterBldExp[ nLoop , 02 ]
			DEFAULT cAlias	:= ""
			IF !Empty( cAlias )
				cAlias			:= Upper( cAlias )
				IF ( "ALL_ALS" $ cAlias )
					aFiltroCpos[ 01 , 02 ] := "ALL_ALS"
				Else	
					cAlias			:= Padr( cAlias , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) )
					cAliasdbFilter	+= ( cAlias + "/" )
				EndIF	
			EndIF
		Case ( cField == cPrefix+"PRG" )
			cFunName			:= aFilterBldExp[ nLoop , 02 ]
			DEFAULT cFunName	:= ""
			IF !Empty( cFunName )
				cFunName			:= Upper( cFunName )
				IF ( "ALL_PRG" $ cFunName )
					aFiltroCpos[ 02 , 02 ] := "ALL_PRG"
				Else
					cFunName			:= Padr( cFunName , Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )
					cFunNamedbFilter	+= ( cFunName + "/" )
				EndIF	
			EndIF
		Case ( cField == cPrefix+"USR" )
			cCodUsr		:= aFilterBldExp[ nLoop , 02 ]
			DEFAULT cCodUsr	:= ""
			IF !Empty( cCodUsr )
				cCodUsr			:= Upper( cCodUsr )
				IF ( "ALL_USR" $ cCodUsr )
					aFiltroCpos[ 03 , 02 ] := "ALL_USR"
				Else
					cCodUsr			:= Padr( cCodUsr , Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
					cCodUsrdbFilter	+= ( cCodUsr + "/" )
				EndIF	
			EndIF
		Case ( cField == cPrefix+"GRP" )
			cCodGrp		:= aFilterBldExp[ nLoop , 02 ]
			DEFAULT cCodGrp	:= ""
			IF !Empty( cCodGrp )
				cCodGrp			:= Upper( cCodGrp )
				IF ( "ALL_GRP" $ cCodGrp )
					aFiltroCpos[ 04 , 02 ] := "ALL_GRP"
				Else
					cCodGrp := Padr( cCodGrp , Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )
					cCodGrpdbFilter	+= ( cCodGrp + "/" )
				EndIF	
			EndIF
	End Case

Next nLoop

aFiltroCpos[ 01 , 02 ] += cAliasdbFilter
aFiltroCpos[ 02 , 02 ] += cFunNamedbFilter
aFiltroCpos[ 03 , 02 ] += cCodUsrdbFilter
aFiltroCpos[ 04 , 02 ] += cCodGrpdbFilter

aFiltroCpos[ 01 , 02 ] += IF( Empty( aFiltroCpos[ 01 , 02 ] ) , "ALL_ALS"	, "" )
aFiltroCpos[ 02 , 02 ] += IF( Empty( aFiltroCpos[ 02 , 02 ] ) , "ALL_PRG"	, "" )
aFiltroCpos[ 03 , 02 ] += IF( Empty( aFiltroCpos[ 03 , 02 ] ) , "ALL_USR"	, "" )
aFiltroCpos[ 04 , 02 ] += IF( Empty( aFiltroCpos[ 04 , 02 ] ) , "ALL_GRP"	, "" )

Do Case
	Case ( lSetFilter := (;
							!Empty( cAliasdbFilter	 );
							.and.;
							!Empty( cFunNamedbFilter );
							.and.;
							!Empty( cCodUsrdbFilter	 );
							.and.;
							!Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+"ALS" + " $ cAliasdbFilter ) .and. ( " + cPrefix+ "PRG $ cFunNamedbFilter ) .and. ( " + cPrefix+ "USR $ cCodUsrdbFilter ) .and. ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"ALS" + " $ '" + cAliasdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"PRG" + " $ '" + cFunNamedbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"USR" + " $ '" + cCodUsrdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	Case ( lSetFilter := (;
							!Empty( cAliasdbFilter	 );
							.and.;
							!Empty( cFunNamedbFilter );
							.and.;
							!Empty( cCodUsrdbFilter	 );
							.and.;
							 Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+"ALS" + " $ cAliasdbFilter ) .and. ( " + cPrefix+ "PRG $ cFunNamedbFilter ) .and. ( " + cPrefix+ "USR $ cCodUsrdbFilter ) } ")
		cSetFilter += cPrefix+"ALS" + " $ '" + cAliasdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"PRG" + " $ '" + cFunNamedbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"USR" + " $ '" + cCodUsrdbFilter + "'"
	Case ( lSetFilter := (;
							!Empty( cAliasdbFilter	 );
							.and.;
							!Empty( cFunNamedbFilter );
							.and.;
							 Empty( cCodUsrdbFilter	 );
							 .and.;
							!Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+"ALS" + " $ cAliasdbFilter ) .and. ( " + cPrefix+ "PRG $ cFunNamedbFilter ) .and. ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"ALS" + " $ '" + cAliasdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"PRG" + " $ '" + cFunNamedbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	Case ( lSetFilter := (;
							!Empty( cAliasdbFilter	 );
							.and.;
							 Empty( cFunNamedbFilter );
							 .and.;
							!Empty( cCodUsrdbFilter	 );
							.and.;
							!Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+"ALS" + " $ cAliasdbFilter ) .and. ( " + cPrefix+ "USR $ cCodUsrdbFilter ) .and. ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"ALS" + " $ '" + cAliasdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"USR" + " $ '" + cCodUsrdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	Case ( lSetFilter := (;
							 Empty( cAliasdbFilter	 );
							 .and.;
							!Empty( cFunNamedbFilter );
							.and.;
							!Empty( cCodUsrdbFilter	 );
							.and.;
							!Empty( cCodGrpdbFilter	 )		 ;
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+ "PRG $ cFunNamedbFilter ) .and. ( " + cPrefix+ "USR $ cCodUsrdbFilter ) .and. ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"PRG" + " $ '" + cFunNamedbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"USR" + " $ '" + cCodUsrdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	Case ( lSetFilter := (;
							!Empty( cAliasdbFilter	 );
							.and.;
							!Empty( cFunNamedbFilter );
							.and.;
							 Empty( cCodUsrdbFilter	 );
							 .and.;
							 Empty( cCodGrpdbFilter	 )		 ;
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+"ALS" + " $ cAliasdbFilter ) .and. ( " + cPrefix+ "PRG $ cFunNamedbFilter ) } ")
		cSetFilter += cPrefix+"ALS" + " $ '" + cAliasdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"PRG" + " $ '" + cFunNamedbFilter + "'"
	Case ( lSetFilter := (;
							!Empty( cAliasdbFilter	 );
							.and.;
							 Empty( cFunNamedbFilter );
							 .and.;
							 Empty( cCodUsrdbFilter	 );
							 .and.;
							!Empty( cCodGrpdbFilter	 )		 ;
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+"ALS" + " $ cAliasdbFilter ) .and. ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"ALS" + " $ '" + cAliasdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	Case ( lSetFilter := (;
							 Empty( cAliasdbFilter	 );
							 .and.;
							 Empty( cFunNamedbFilter );
							 .and.;
							!Empty( cCodUsrdbFilter	 );
							.and.;
							!Empty( cCodGrpdbFilter	 )		 ;
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+ "USR $ cCodUsrdbFilter ) .and. ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"USR" + " $ '" + cCodUsrdbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	Case ( lSetFilter := (;
							 Empty( cAliasdbFilter	 );
							 .and.;
							!Empty( cFunNamedbFilter );
							.and.;
							 Empty( cCodUsrdbFilter	 );
							 .and.;
							!Empty( cCodGrpdbFilter	 )		 ;
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+ "PRG $ cFunNamedbFilter ) .and. ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"PRG" + " $ '" + cFunNamedbFilter + "'"
		cSetFilter += " .and. "
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	Case ( lSetFilter := (;
							!Empty( cAliasdbFilter	 );
							.and.;
							 Empty( cFunNamedbFilter );
							 .and.;
							 Empty( cCodUsrdbFilter	 );
							 .and.;
							 Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+"ALS" + " $ cAliasdbFilter ) } ")
		cSetFilter += cPrefix+"ALS" + " $ '" + cAliasdbFilter + "'"
	Case ( lSetFilter := (;
							 Empty( cAliasdbFilter	 );
							 .and.;
							!Empty( cFunNamedbFilter );
							.and.;
							 Empty( cCodUsrdbFilter	 );
							 .and.;
							 Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+ "PRG $ cFunNamedbFilter ) } ")
		cSetFilter += cPrefix+"PRG" + " $ '" + cFunNamedbFilter + "'"
	Case ( lSetFilter := (;
							 Empty( cAliasdbFilter	 );
							 .and.;
							 Empty( cFunNamedbFilter );
							 .and.;
							!Empty( cCodUsrdbFilter	 );
							.and.;
							 Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+ "USR $ cCodUsrdbFilter ) } ")
		cSetFilter += cPrefix+"USR" + " $ '" + cCodUsrdbFilter + "'"
	Case ( lSetFilter := (;
							 Empty( cAliasdbFilter	 );
							 .and.;
							 Empty( cFunNamedbFilter );
							 .and.;
							 Empty( cCodUsrdbFilter	 );
							 .and.;
							!Empty( cCodGrpdbFilter	 );
						 );
		 )
		bSetFilter := &( "{ || ( " + cPrefix+ "GRP $ cCodGrpdbFilter ) } ")
		cSetFilter += cPrefix+"GRP" + " $ '" + cCodGrpdbFilter + "'"
	OtherWise
		lSetFilter := .F.
End Case

IF ( lSetFilter )
	( cAliasFilter )->( dbSetFilter( bSetFilter , cSetFilter ) )
EndIF

Return( lSetFilter )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁPesFilter	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁEfetua a Pesquisa no Arquivo de Filtros                     Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function PesFilter(	oMsSelect				,;
							cAliasFilter			,;
							cAlias					,;
							cAliasdbFilter			,;
							lAllSelect				 ;
						)

Local aSvKeys		:= GetKeys()
Local aAdvSize		:= MsAdvSize( .T. , .T. )
Local aOrdensFilter	:= {}
Local aRetcoords

Local bSet15 		:= { || NIL }
Local bSet24		:= { || NIL }

Local cCodFilter	:= ""
Local cDesFilter	:= ""
Local cAlsFilter	:= ""
Local cPrgFilter	:= ""
Local cUsrFilter	:= ""
Local cGrpFilter	:= ""
Local cOrdem		:= ""
Local cKeySeek		:= ""
Local cVarObjMemo	:= ""
Local cPrefix		:= "FILTRO_"

Local lbOk			:= .F.
Local lFirstAlias	:= .T.
Local lTemRE7 		:= AliasInDic("RE7")

Local nOrdem		:= 0
Local nOrdens		:= 0

Local oCodFilter
Local oDesFilter
Local oAlsFilter
Local oPrgFilter
Local oUsrFilter
Local oGrpFilter
Local oDlg
Local oOrdens

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

cCodFilter	:= Space( Len( ( cAliasFilter )->( &(cPrefix+"COD") ) ) )
cDesFilter	:= Space( Len( ( cAliasFilter )->( &(cPrefix+"DES") ) ) )
cAlsFilter	:= Padr( cAlias , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) )
cPrgFilter	:= Space( Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )
cUsrFilter	:= Space( Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
cGrpFilter	:= Space( Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Retorna as Ordens do Arquivo de Filtros                      Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
RetOrdFileFilter( NIL , @aOrdensFilter )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Monta o Array para a Selecao das Ordens                      Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
IF ( ( nOrdens := Len( aOrdensFilter ) ) > 0 )
	aOrdens := Array( nOrdens )
	For nOrdem := 1 To nOrdens
		aOrdens[ nOrdem ] := aOrdensFilter[ nOrdem , 04 ]
	Next nOrdem
	cOrdem := aOrdens[ 01 ]
	nOrdem := 01
EndIF	

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Define os Blocos para as Teclas <CTRL-O>					   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
bSet15 	:= { || lbOk := .T. , GetKeys() , oDlg:End() }

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Define os Blocos para as Teclas <CTRL-X>     	   			   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
bSet24	:= { || lbOk := .F. , GetKeys() , oDlg:End() }

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Monta as Dimensoes dos Objetos             				   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
oSize := FwDefSize():New(.F.)             
oSize:AddObject( "CABECALHO",(oSize:aWindSize[3]*1.1),(oSize:aWindSize[3]*0.4) , .F., .F. ) // NЦo dimensionavel
oSize:AddObject( "ENCHOICE", 100, 050, .T., .T. ) // Nao dimensiona Y 
oSize:aMargins 	:= { 0, 0, 0, 0 } // Espaco ao lado dos objetos 0, entre eles 3		
oSize:lProp 	:= .F. // Proporcional             
oSize:Process() 	   // Dispara os calculos

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
Ё Monta Dialogo para Montagem do Filtro                        Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
DEFINE MSDIALOG oDlg TITLE OemToAnsi( STR0030 ) From oSize:aWindSize[1],0 TO (oSize:aWindSize[3]*0.35),(oSize:aWindSize[3]*0.63) OF GetWndDefault() STYLE DS_MODALFRAME STATUS  PIXEL	//"Pesquisar...<F4>"
	
	oDlg:lEscClose := .F. // NЦo permite sair ao se pressionar a tecla ESC.

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Funcoes em GpFiltro  - Blocos de Execucao dos filtros                    Ё
	Ё GpFiltro - Chama a janela principal do cadastro de filtros               Ё
	Ё GpFltAlsGet - Retorna a expressao para elaborar o filtro                 Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды*/
	@ oSize:GetDimension("CABECALHO","LININI")+40 , oSize:GetDimension("CABECALHO","COLINI")+13 SAY OemToAnsi( STR0048 ) SIZE 050,010 Of oDlg Pixel	//"bmpord1" 
	@ oSize:GetDimension("CABECALHO","LININI")+40 , oSize:GetDimension("CABECALHO","COLINI")+53 COMBOBOX oOrdens VAR cOrdem ITEMS aOrdens SIZE 200,010 Of oDlg Pixel
	oOrdens:bChange := { || ( nOrdem := oOrdens:nAt ) }
	
	@ oSize:GetDimension("CABECALHO","LININI")+55 , oSize:GetDimension("CABECALHO","COLINI")+13 SAY OemToAnsi( STR0024 ) SIZE 050,010 Of oDlg Pixel	//"Codigo" 
	@ oSize:GetDimension("CABECALHO","LININI")+55 , oSize:GetDimension("CABECALHO","COLINI")+53 MSGET oCodFilter VAR cCodFilter SIZE 060,010 Of oDlg Pixel PICTURE "@!"
	
	@ oSize:GetDimension("CABECALHO","LININI")+70 , oSize:GetDimension("CABECALHO","COLINI")+13 SAY OemToAnsi( STR0025 ) SIZE 050,010 Of oDlg Pixel	//"Descricao" 
	@ oSize:GetDimension("CABECALHO","LININI")+70 , oSize:GetDimension("CABECALHO","COLINI")+53 MSGET oDesFilter VAR cDesFilter SIZE 185,010 OF oDlg Pixel PICTURE "@!"

	@ oSize:GetDimension("CABECALHO","LININI")+85 , oSize:GetDimension("CABECALHO","COLINI")+13 SAY OemToAnsi( STR0027 ) SIZE 050,010 Of oDlg Pixel	//"Alias" 
	@ oSize:GetDimension("CABECALHO","LININI")+85 , oSize:GetDimension("CABECALHO","COLINI")+53 MSGET oAlsFilter VAR cAlsFilter SIZE 030,010 Of oDlg Pixel PICTURE "@!" WHEN RetCodAlias( @cAlsFilter , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) , @lFirstAlias , cAliasdbFilter , lAllSelect )
	                                                                                                                                                              
	@ oSize:GetDimension("CABECALHO","LININI")+100 , oSize:GetDimension("CABECALHO","COLINI")+13 SAY OemToAnsi( STR0028 ) SIZE 050,010 Of oDlg Pixel	//"Programa" 
	@ oSize:GetDimension("CABECALHO","LININI")+100 , oSize:GetDimension("CABECALHO","COLINI")+53 MSGET oPrgFilter VAR cPrgFilter SIZE 060,010 Of oDlg Pixel PICTURE "@!" 

	@ oSize:GetDimension("CABECALHO","LININI")+115 , oSize:GetDimension("CABECALHO","COLINI")+13 SAY OemToAnsi( STR0026 ) SIZE 050,010 Of oDlg Pixel	//"Usuario" 
	@ oSize:GetDimension("CABECALHO","LININI")+115 , oSize:GetDimension("CABECALHO","COLINI")+53 MSGET oUsrFilter VAR cUsrFilter SIZE 045,010 Of oDlg Pixel PICTURE Replicate("9",Len( ( cAliasFilter )->( &(cPrefix+"USR") ) )) F3 "USR"

	@ oSize:GetDimension("CABECALHO","LININI")+130 , oSize:GetDimension("CABECALHO","COLINI")+13 SAY OemToAnsi( STR0060 ) SIZE 050,010 Of oDlg Pixel	//"Grupo" 
	@ oSize:GetDimension("CABECALHO","LININI")+130 , oSize:GetDimension("CABECALHO","COLINI")+53 MSGET oGrpFilter VAR cUsrFilter SIZE 045,010 Of oDlg Pixel PICTURE Replicate("9",Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) )) F3 "GRP"

	//Eval( bDialogInit )
ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 )

/*/
здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
ЁRestaura as Teclas de Atalho								   Ё
юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
RestKeys( aSvKeys , .T. )

IF ( lbOk )
	nOrdem := Max( 01 , nOrdem )
	nOrdem := Min( Len( aOrdens ) , nOrdem )
	( cAliasFilter )->( dbSetOrder( nOrdem ) )
	cCodFilter	:= Padr( cCodFilter , Len( ( cAliasFilter )->( &(cPrefix+"COD") ) ) )
	cDesFilter	:= Padr( cDesFilter , Len( ( cAliasFilter )->( &(cPrefix+"DES") ) ) )
	cAlsFilter	:= Padr( cAlsFilter , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) )
	cPrgFilter	:= Padr( cPrgFilter , Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )
	cUsrFilter	:= Padr( cUsrFilter , Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
	cGrpFilter	:= Padr( cGrpFilter , Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )
	IF ( nOrdem == 1 )
		cKeySeek := ( cCodFilter + cAlsFilter + cPrgFilter + cUsrFilter + cGrpFilter + cDesFilter )
	ElseIF ( nOrdem == 2 )
		cKeySeek := ( cDesFilter + cCodFilter + cAlsFilter + cPrgFilter + cUsrFilter + cGrpFilter )
	ElseIF ( nOrdem == 3 )
		cKeySeek := ( cUsrFilter + cCodFilter + cAlsFilter + cPrgFilter + cGrpFilter + cDesFilter )
	ElseIF ( nOrdem == 4 )
		cKeySeek := ( cAlsFilter + cPrgFilter + cCodFilter + cUsrFilter + cGrpFilter + cDesFilter )
	ElseIF ( nOrdem == 5 )
		cKeySeek := ( cPrgFilter + cAlsFilter + cCodFilter + cUsrFilter + cGrpFilter + cDesFilter )
	ElseIF ( nOrdem == 6 )
		cKeySeek := ( cGrpFilter + cCodFilter + cAlsFilter + cPrgFilter + cUsrFilter + cDesFilter )
	EndIF
	IF !( cAliasFilter )->( MsSeek( cKeySeek , .F. ) )
		( cAliasFilter )->( MsSeek( cKeySeek , .T. ) )
		IF ( cAliasFilter )->( Eof() )
			MsgInfo( OemToAnsi( STR0049 ) ) //"N└o foi encontrado o Filtro informado"
			Eval( oMsSelect:oBrowse:bGotop )
		EndIF
	EndIF
	oMsSelect:oBrowse:Refresh()
EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFilterMnt   ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁManutencao no Cadastro de Filtros                           Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFilterMnt(;
								oMsSelect 		,;	//Objero MsSelect
								cAliasFilter	,;	//Alias do Arquivo de Filtro
								aFiltroCpos		,;	//Array com os Filtros dos campos
								cAlias			,;	//Alias Inicial
								lAllSelect		,;	//Se todos os alias abertos serao disponibilizados
								nOpc			,;	//Opcao
								cTitle			,;	//Titulo do Dialog
								cExpFilter		 ;	//Expressao de Filtro
							)

Local aSvKeys		:= GetKeys()
Local aAdvSize		:= MsAdvSize(.T.,.T.)
Local aGrpUser		:= {}
Local aRetcoords

Local bSet15 		:= { || NIL }
Local bSet24		:= { || NIL }
Local bCodFiltVld	:= { || CodFiltVld( cAliasFilter , cCodFilter ) }
Local bRetUsrCod	:= { || }
Local bVldUsrCod	:= { || UsrFiltVld( cUsrFilter , aFiltroCpos[ 03 , 02 ] , cAliasFilter ) }
Local bWhenGrpCod	:= { || WhenGrpCod( nOpc , cGrpFilter , @lFirstGrp ) }
Local bVldGrpCod	:= { || VldGrpCod( cGrpFilter , aFiltroCpos[ 04 , 02 ] , cAliasFilter ) }
Local bRetCodAlias	:= { || }
Local bAlsFiltVld	:= { || AlsFiltVld( cAlsFilter , aFiltroCpos[ 01 , 02 ] , lAllSelect ) }
Local bRetCodPrg 	:= { || }
Local bPrgFiltVld	:= { || PrgFiltVld( @cPrgFilter , aFiltroCpos[ 02 , 02 ] , cAliasFilter ) }
Local bDesFiltVld	:= { || DesFiltVld( cDesFilter ) }
Local boButtonExp	:= { || IF( GpFltBldExp( cAlsFilter , GetWndDefault() , @cExpFilter  ) , cExpFilExt := GpFltBldDesc( cExpFilter , NIL , cAlsFilter ) , .F. ) }
Local boButtonRst	:= { || cExpFilter:= '(SRA->RA_FILIAL >= "        ").AND.(SRA->RA_FILIAL <= "ZZZZZZZZ").AND.(SRA->RA_CC >= "         ").AND.(SRA->RA_CC <= "ZZZZZZZZZ").AND.(SRA->RA_MAT >= "      ").AND.(SRA->RA_MAT <= "999999").AND.(SRA->RA_CATFUNC $ ( "A*/C*/D*/E*/G*/H*/I*/J*/M*/P*/S*/T" ))' , cExpFilExt := GpFltBldDesc( cExpFilter , NIL , cAlsFilter ) }

Local cCodFilter	:= ""
Local cDesFilter	:= ""
Local cAlsFilter	:= ""
Local cPrgFilter	:= ""
Local cUsrFilter	:= ""
Local cGrpFilter	:= ""
Local cExpFilExt	:= ""
Local cVarObjMemo	:= ""
Local cLstAlsFilter	:= ""
Local cKey			:= ""
Local cFunName		:= ""
Local cUserCode		:= ""
Local cCodeUser		:= ""
Local cUserGrp		:= ""
Local cPrefix		:= "FILTRO_"

Local lbOk			:= .F.
Local lAlsVld		:= .F.
Local lFirstUsr		:= .F.
Local lFirstGrp		:= .F.
Local lFirstAlias	:= .F.
Local lFirstPrg		:= .F.
Local lTemRE7 		:= AliasInDic("RE7")

Local nRecno		:= 0

Local oCodFilter
Local oDesFilter
Local oAlsFilter
Local oPrgFilter
Local oUsrFilter
Local oGrpFilter
Local oExpFilExt
Local oDlg
Local oButtonExp
Local oButtonRst

DEFAULT nOpc 		:= 1
DEFAULT cExpFilter	:= ""

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

bRetUsrCod		:= { || RetUsrCod( nOpc , @cUsrFilter , Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) , @lFirstUsr ) }
bRetCodAlias	:= { || RetCodAlias( @cAlsFilter , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) , @lFirstAlias , aFiltroCpos[ 01 , 02 ] , lAllSelect ) }
bRetCodPrg 		:= { || RetCodPrg( cAliasFilter , nOpc , @cPrgFilter , aFiltroCpos[ 02 , 02 ] , Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) , @lFirstPrg , cUsrFilter , cGrpFilter ) }
cCodFilter		:= Space( Len( ( cAliasFilter )->( &(cPrefix+"COD") ) ) )
cDesFilter		:= Space( Len( ( cAliasFilter )->( &(cPrefix+"DES") ) ) )
cAlsFilter		:= Padr( Upper( AllTrim( cAlias ) ) , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) )
cPrgFilter		:= Space( Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )
cUsrFilter		:= Space( Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
cGrpFilter		:= Space( Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )

Begin Sequence

	IF !( nOpc == 2 )  //Se nao for Inclusao

		nRecno	:= ( cAliasFilter )->( Recno() )
		cKey	:= ( cAliasFilter )->(&(cPrefix+"COD"))
		IF !( GpFltLockReg(	cAliasFilter , nRecno , cKey , NIL , NIL , .T. ) )
			Break
		EndIF
		IF ( cAliasFilter )->( !Eof() .and. !Bof() )
			cCodFilter	:= cKey
			cDesFilter	:= ( cAliasFilter )->( &(cPrefix+"DES") )
			cAlsFilter	:= ( cAliasFilter )->( &(cPrefix+"ALS") )
			cPrgFilter	:= ( cAliasFilter )->( &(cPrefix+"PRG") )
			cUsrFilter	:= ( cAliasFilter )->( &(cPrefix+"USR") )
			cGrpFilter	:= ( cAliasFilter )->( &(cPrefix+"GRP") )
			cExpFilter	:= ( cAliasFilter )->( &(cPrefix+"EXP") )
		Else
			PutFileInEof( cAliasFilter )
			nOpc	:= 2
			cTitle	:= STR0031	//"Incluir...<F6>"
			MsgInfo(;
						OemToAnsi( STR0052 ) ,;	//"Apenas a op┤└o de Inclus└o deve ser utilizada com o arquivo vazio"
						OemToAnsi( STR0036 )  ; //"Aviso de Inconsistencia"
					)
		EndIF	
		IF (;
				( nOpc == 3 );	//Alteracao
				.or.;
				( nOpc == 4 );	//Exclusao
			 ) 
			IF !( cAliasFilter )->( ChkUsrGrp( &(cPrefix+"USR"), &(cPrefix+"GRP"), NIL, .T. ) )
				IF ( nOpc == 3 )
					nOpc	:= 1
					cTitle	:= STR0040 //"Visualizar...<F5>"
					MsgInfo(;
							OemToAnsi( STR0042 ) ,;	//"Usuario nao Autorizado a Alterar este Filtro. Ser═ disponibilizada a visualiza┤└o"
							OemToAnsi( STR0036 )  ; //"Aviso de Inconsistencia"
							)
				ElseIF ( nOpc == 4 )
					nOpc	:= 1
					cTitle	:= STR0040 //"Visualizar...<F5>"
					MsgInfo(;
							OemToAnsi( STR0041 ) ,;	//"Usuario nao Autorizado a Excluir este Filtro. Ser═ disponibilizada a visualiza┤└o"
							OemToAnsi( STR0036 )  ; //"Aviso de Inconsistencia"
							)
				EndIF								
			EndIF
		EndIF
	
	ElseIF ( nOpc == 2 ) //Inclusao

		cFunName	:= Upper( AllTrim( StrTran( aFiltroCpos[ 02 , 02 ] , "/" , "" ) ) )
		IF ( cFunName == Upper( AllTrim( FunName() ) ) )
			cPrgFilter	:= Padr( cFunName , Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )
		EndIF
		cUserCode	:= Upper( AllTrim( StrTran( aFiltroCpos[ 03 , 02 ] , "/" , "" ) ) )
		cCodeUser	:= RetCodUsr()
		IF ( cUserCode == Upper( AllTrim( cCodeUser ) ) )
			cUsrFilter	:= Padr( cCodeUser , Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
		EndIF
		cUserGrp	:= Upper( AllTrim( StrTran( aFiltroCpos[ 04 , 02 ] , "/" , "" ) ) )
		aGrpUser	:= UsrRetGrp( cUserName )
		IF ( aScan( aGrpUser , { |x| ( Upper( AllTrim( x ) ) == Upper( AllTrim( cUserGrp ) ) ) } ) > 0 )
			cGrpFilter	:= Padr( cUserGrp , Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )
		EndIF

	EndIF
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define o Bloco para a Tecla <CTRL-O> 						   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet15 	:= { || IF(;
							(;
								( nOpc == 2 );
								.and.;
								Eval( bCodFiltVld );
								.and.;
								Eval( bAlsFiltVld );
								.and.;
								Eval( bPrgFiltVld );
								.and.;
								Eval( bDesFiltVld );
								.and.;
								Eval( bVldUsrCod  );
								.and.;
								Eval( bVldGrpCod  );
							),;
							(;
								lbOk := .T. ,;
								GetKeys(),;
								oDlg:End();
							),;
							IF(;
									!( nOpc == 2 ) ,;
									(;
										lbOk := .T. ,;
										GetKeys(),;
										oDlg:End();
									),;
									NIL;
								);
						);
				}
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define o Bloco para a Teclas <CTRL-X>     	   			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet24	:= { || lbOk := .F. , GetKeys() , oDlg:End() }
	                                                                       
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes dos Objetos             				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aAdvSize		:= MsAdvSize()
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aObjCoords		:= { { 0 , 0 , .T. , .T. } }
	aObjSize        := MsObjSize( aInfoAdvSize , aObjCoords )
	aRetcoords := RetCoords(4,5,40,20,2,30)

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta Dialogo para Montagem do Filtro                        Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( cTitle ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL
	
		@ aRetcoords[1,1],aRetcoords[1,2] SAY OemToAnsi( STR0024 ) 				SIZE 050,010 OF oDlg PIXEL COLOR CLR_HBLUE //"Codigo"
		IF ( nOpc == 2 ) //Inclusao
			@ aRetcoords[2,1],aRetcoords[2,2] MSGET oCodFilter VAR cCodFilter	SIZE 050,010 OF oDlg PIXEL PICTURE "@!" VALID Eval( bCodFiltVld ) 
		Else
			@ aRetcoords[2,1],aRetcoords[2,2] MSGET oCodFilter VAR cCodFilter	SIZE 050,010 OF oDlg PIXEL PICTURE "@!" READONLY
		EndIF	    
	
		@ aRetcoords[3,1],aRetcoords[3,2] SAY OemToAnsi( STR0025 ) 		  		SIZE 050,010 OF oDlg PIXEL COLOR CLR_HBLUE	//"Descricao"	
		IF (;
				!( nOpc == 1 );	//Visualizacao
				.and.;
				!( nOpc == 4 );	//Exclusao
			) 
			@ aRetcoords[4,1],aRetcoords[4,2] MSGET oDesFilter VAR cDesFilter	SIZE 185,010 OF oDlg PIXEL PICTURE "@!" VALID Eval( bDesFiltVld )
		Else
			@ aRetcoords[4,1],aRetcoords[4,2] MSGET oDesFilter VAR cDesFilter	SIZE 185,010 OF oDlg PIXEL PICTURE "@!" READONLY
		EndIF
	
		@ aRetcoords[5,1],aRetcoords[5,2] SAY OemToAnsi( STR0027 ) 		  		SIZE 050,010 OF oDlg PIXEL COLOR CLR_HBLUE //"Alias"
		IF ( nOpc == 2 ) //Inclusao
			@ aRetcoords[6,1],aRetcoords[6,2] MSGET oAlsFilter VAR cAlsFilter 	SIZE 030,010 OF oDlg PIXEL PICTURE "@!" WHEN (;
																											cLstAlsFilter := cAlsFilter,;
																											Eval( bRetCodAlias );
																									  );
																								 VALID (;
																								 			lAlsVld := Eval( bAlsFiltVld ),;
																								 			IF( lAlsVld,;
																								 				ClearExp(	cLstAlsFilter	,;
																								 							cAlsFilter		,;
																								 							@cExpFilter		,;
																								 							@cExpFilExt		,;
																								 							oExpFilExt		 ;
																								 						  ),;
																												(;
																													cLstAlsFilter := cAlsFilter,;
																													Eval( bRetCodAlias ),;
																													oAlsFilter:Refresh();
																												);	
																								 				),; 		  
																								 			lAlsVld;
																								 		)	
		Else  
			@ aRetcoords[6,1],aRetcoords[6,2] MSGET oAlsFilter VAR cAlsFilter 	SIZE 030,010 OF oDlg PIXEL PICTURE "@!" READONLY
		EndIF
		                                                                                                                                                              
		@ aRetcoords[7,1],aRetcoords[7,2] SAY OemToAnsi( STR0028 ) 		  		SIZE 050,010 OF oDlg PIXEL //"Programa"
		IF (;
				( nOpc == 2 );	//Inclusao
				.or.;
				( nOpc == 3 );	//Alteracao
			) 
			@ aRetcoords[8,1],aRetcoords[8,2] MSGET oPrgFilter VAR cPrgFilter 	SIZE 060,010 OF oDlg PIXEL PICTURE "@!" WHEN Eval( bRetCodPrg ) VALID Eval( bPrgFiltVld )
		Else
			@ aRetcoords[8,1],aRetcoords[8,2] MSGET oPrgFilter VAR cPrgFilter 	SIZE 060,010 OF oDlg PIXEL PICTURE "@!" READONLY
		EndIF
	
		@ aRetcoords[9,1],aRetcoords[9,2] SAY OemToAnsi( STR0026 ) 		  		SIZE 050,010 OF oDlg PIXEL //"Usuario"
		IF (;
				( nOpc == 2 );	//Inclusao
				.or.;
				( nOpc == 3 );	//Alteracao
			) 
			@ aRetcoords[10,1],aRetcoords[10,2] MSGET oUsrFilter VAR cUsrFilter	SIZE 045,010 OF oDlg PIXEL PICTURE Replicate("9",Len( ( cAliasFilter )->( &(cPrefix+"USR") ) )) F3 "USR" WHEN Eval( bRetUsrCod ) VALID Eval( bVldUsrCod )
		Else
			@ aRetcoords[10,1],aRetcoords[10,2] MSGET oUsrFilter VAR cUsrFilter	SIZE 045,010 OF oDlg PIXEL PICTURE Replicate("9",Len( ( cAliasFilter )->( &(cPrefix+"USR") ) )) F3 "USR" READONLY
		EndIF
	
		@ aRetcoords[11,1],aRetcoords[11,2] SAY OemToAnsi( STR0060 ) 		  		SIZE 050,010 OF oDlg PIXEL //"Grupo"
		IF (;
				( nOpc == 2 );	//Inclusao
				.or.;
				( nOpc == 3 );	//Alteracao
			) 
			@ aRetcoords[12,1],aRetcoords[12,2] MSGET oGrpFilter VAR cGrpFilter	SIZE 045,010 OF oDlg PIXEL PICTURE Replicate("9",Len( ( cAliasFilter )->( &(cPrefix+"USR") ) )) F3 "GRP" WHEN Eval( bWhenGrpCod ) VALID Eval( bVldGrpCod )
		Else
			@ aRetcoords[12,1],aRetcoords[12,2] MSGET oGrpFilter VAR cGrpFilter	SIZE 045,010 OF oDlg PIXEL PICTURE Replicate("9",Len( ( cAliasFilter )->( &(cPrefix+"USR") ) )) F3 "GRP" READONLY
		EndIF
	
		cExpFilExt := GpFltBldDesc( cExpFilter , NIL , cAlsFilter )
	
		oButtonExp := TButton():New(aRetcoords[13,1],aRetcoords[1,2],OemToAnsi(STR0001),oDlg,boButtonExp,130,15,NIL,NIL,.F.,.T.,.T.,NIL,.F.,NIL,NIL,.F.) //"Express└o de Filtro"
		IF (;
				( nOpc == 1 );	//Visualizacao
				.or.;
				( nOpc == 4 );	//Exclusao
			) 
	    	oButtonExp:Disable()
	    EndIF

		oButtonRst := TButton():New(aRetcoords[14,1],aRetcoords[12,2],OemToAnsi(STR0099),oDlg,boButtonRst,130,15,NIL,NIL,.F.,.T.,.T.,NIL,.F.,NIL,NIL,.F.) //"Restaurar filtro"
	
		@ aRetcoords[17,1],aRetcoords[17,2] GET oExpFilExt VAR cExpFilExt MEMO SIZE 310,060 OF oDlg HSCROLL CENTERED DESIGN NO VSCROLL PIXEL COLOR CLR_BLACK,CLR_HGRAY READONLY
		oExpFilExt:bRClicked := { || AllwaysTrue() }

		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.
	
	ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar( oDlg , bSet15 , bSet24 )
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁRestaura as Teclas de Atalho								   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	RestKeys( aSvKeys , .T. )
	
	IF ( lbOk )
		IF (;
				( nOpc == 2 );	//Inclusao
				.or.;
				( nOpc == 3 );	//Alteracao
			) 
			PutFilterFile(	cCodFilter	,;
							cDesFilter	,;
							cExpFilter	,;
							cUsrFilter	,;
							cAlsFilter	,;
							cPrgFilter	,;
							cGrpFilter	 ;
						)
		ElseIF ( nOpc == 4 )	//Exclusao
			IF ( MsgNoYes( OemToAnsi( STR0050 ) , OemToAnsi( STR0051 ) ) ) //"Confirma a Exclus└o do Filtro?"###"Aten┤└o"
				IF ( IsLocked( cAliasFilter , nRecno ) )
					( cAliasFilter )->( dbDelete() )
					FreeLocks( cAliasFilter , nRecno , .T. , cKey )
				EndIF
			EndIF
		EndIF
		IF ( ValType( oMsSelect ) == "O" )
			oMsSelect:oBrowse:Refresh()
		EndIF	
	EndIF
	
End Sequence

IF ( ( cAliasFilter )->( !IsMark( &(cPrefix+"CHK"), "1" ) ) )
	FreeLocks( cAliasFilter , nRecno , .T. , cKey )
EndIF	

Return( lbOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁChkUsrGrp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁVerificar se Usuario e Grupo sao Validos                    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function ChkUsrGrp( cUsr , cGrp , cChk , lAdm)

Local aGrupos		:= UsrRetGrp( cUsr )

Local bAscGrp		:= { |x| ( Upper( AllTrim( x ) ) == Upper( AllTrim( cGrp ) ) ) }

Local cUserId		:= RetCodUsr()

Local lUserOk		:= .T.
Local lGrupOk		:= .T.
Local lChkUsrGrp	:= .T.

DEFAULT cChk		:= "ALL"
DEFAULT  lAdm		:= .F.

Begin Sequence
   /*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	ЁPara o usuario pertencente ao Grupo Administrador permite 	   Ё
	Ёeliminacao/alteracao de informacoes de qualquer grupo/usuario Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
    If lAdm 
    	If !Empty(Ascan(aGrupos,{|x| X $ '000000' }) ) 
       		Break
     	EndIf
    Endif

	IF (;
		( cChk == "ALL" );
		.or.;
		( SubStr( cChk , 1 , 1 ) $ "gG" );
		)
			lGrupOk 	:= IF( !Empty( cGrp ) , !( aScan( aGrupos , bAscGrp ) == 0 ) , lGrupOk )	
	EndIF	
	
	IF (;
		( cChk == "ALL" );
		.or.;
		( SubStr( cChk , 1 , 1 ) $ "uU" );
		)
			lUserOk 	:= IF( !Empty( cUsr ) , Upper( AllTrim( cUsr ) ) == Upper( AllTrim( cUserId ) ) , lUserOk )	
	EndIF

End

lChkUsrGrp	:= ( lGrupOk .and. lUserOk )

Return( lChkUsrGrp )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁCodFiltVld	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁValida o Codigo do Filtro                                   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function CodFiltVld( cAliasFilter , cCodFilter )

Local aArea	 		:= GetArea()
Local aAreaFilter 	:= ( cAliasFilter )->( GetArea() )

Local cSvFilter		:= ( cAliasFilter )->( dbFilter() )
Local cMsgInfo		:= ""
Local cPrefix		:= "FILTRO_"

Local lVldCodFilter := .T.
Local lTemRE7 		:= AliasInDic("RE7")

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

If !lTemRE7
	( cAliasFilter )->( dbClearFilter() )
EndIf
( cAliasFilter )->( dbSetOrder( RetOrdFileFilter( "CRIT_SEL0" ) ) )

IF !(;
		lVldCodFilter := (;
							!Empty( cCodFilter );
							.and.;
							( cAliasFilter )->( !MsSeek( cCodFilter , .F. ) );
							.and.;
							MayIUseCode(cAliasFilter+cCodFilter);
						 );
	 )
	IF Empty( cCodFilter )
		cMsgInfo :=	STR0035																//"Codigo de Filtro em Branco." 
	Else
		cMsgInfo := STR0054																//"Codigo de Filtro j═ Cadastrado."
		cMsgInfo += ( CRLF + CRLF )
		cMsgInfo += STR0024 + ": " + AllTrim( ( cAliasFilter )->( &(cPrefix+"COD") ) )		//"Codigo"
		cMsgInfo += ( CRLF + CRLF )
		cMsgInfo += STR0025 + ": " + AllTrim( ( cAliasFilter )->( &(cPrefix+"DES") ) )		//"Descricao"
		cMsgInfo += ( CRLF + CRLF )
		cMsgInfo += STR0027 + ": " + AllTrim( ( cAliasFilter )->( &(cPrefix+"ALS") ) )		//"Alias"
		cMsgInfo += ( CRLF + CRLF )                                                 	
		cMsgInfo += STR0028 + ": " + AllTrim( ( cAliasFilter )->( &(cPrefix+"PRG") ) )		//"Programa"
		cMsgInfo += ( CRLF + CRLF )
		cMsgInfo += STR0026 + ": " + AllTrim( ( cAliasFilter )->( &(cPrefix+"USR") ) )		//"Usuario"
		cMsgInfo += ( CRLF + CRLF )
		cMsgInfo += STR0060 + ": " + AllTrim( ( cAliasFilter )->( &(cPrefix+"GRP") ) )		//"Grupo"
		cMsgInfo += ( CRLF + CRLF )
		cMsgInfo += STR0055 + ": " + AllTrim( Str( ( cAliasFilter )->( Recno() ) ) )	//"Registro"
	EndIF
	MsgInfo( OemToAnsi( cMsgInfo ) , OemToAnsi( STR0036 ) )								//"Aviso de Inconsistencia"
EndIF

IF !Empty( cSvFilter )
	( cAliasFilter )->( dbSetFilter( { || __ExecMacro( cSvFilter ) } , cSvFilter ) )
EndIF	

( RestArea( aAreaFilter ) , RestArea( aArea ) )

Return( lVldCodFilter )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁDesFiltVld	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁValida a Descricao do Filtro                                Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function DesFiltVld( cDesFilter )

Local lVldDesFilter := .T.

IF !( lVldDesFilter := !Empty( cDesFilter ) )
	MsgInfo(;
			STR0037 ,;	//"Codigo de Filtro em Branco ou ja Existente" 
		 	STR0036  ;	//"Aviso de Inconsistencia"
		 )
EndIF

Return( lVldDesFilter )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁAlsFiltVld    ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁValida o Alias para o Filtro                                Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function AlsFiltVld( cAlsFilter , cAliasdbFilter	, lAllSelect )

Local cSvAlias

Local lVldAlsFilter := .T.

Begin Sequence

	IF !( lVldAlsFilter := !Empty( cAlsFilter ) )
		Break
	EndIF

	IF !( lAllSelect )
		IF !( lVldAlsFilter := ( cAlsFilter $ cAliasdbFilter ) )
			Break
		EndIF
	EndIF

	cSvAlias := Alias()
	IF !( lVldAlsFilter := ( CheckExecForm( { || dbSelectArea( AllTrim( cAlsFilter ) ) } , .T. ) ) )
		Break	
	ElseIF !Empty(cSvAlias)
		dbSelectArea( cSvAlias )
	EndIF

End Sequence

IF !( lVldAlsFilter )
	MsgInfo(;
			STR0038 ,;	//"O Alias selecionado nao se encontra disponivel para filtro"
		 	STR0036  ;	//"Aviso de Inconsistencia"
		 )
EndIF

IF !Empty(cSvAlias)
	dbSelectArea( cSvAlias )
Endif

Return( lVldAlsFilter )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁClearExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё29/11/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRefresh da Expressao quando alteracao de alias              Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function ClearExp(	cLstAlsFilter	,;
							cAlsFilter		,;
							cExpFilter		,;
							cExpFilExt		,;
							oExpFilExt		 ;
		 				)

IF !( cLstAlsFilter == cAlsFilter )
	cExpFilter := ""
	cExpFilExt := ""
	oExpFilExt:Refresh()
EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁPrgFiltVld    ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁValida o Programa para o Filtro                             Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function PrgFiltVld( cPrgFilter , cPrgChkOk , cAliasFilter )

Local cPrefix		:= "FILTRO_"
Local lVldPrgFilter := .T.
Local lTemRE7 		:= AliasInDic("RE7")

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

Begin Sequence

	cPrgFilter	:= Padr( Upper( cPrgFilter ) , Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )
	cPrgChkOk	:= Upper( AllTrim( cPrgChkOk ) )

	IF ( "ALL_PRG" $ cPrgChkOk )
		Break
	EndIF

	IF !( lVldPrgFilter := ( cPrgFilter $ cPrgChkOk ) )
		Break
	EndIF
	
	IF !Empty( cPrgFilter )
		IF !( lVldPrgFilter := IsFunction( AllTrim( cPrgFilter ) ) )
    		Break
		EndIF
	EndIF	
	
End Sequence

IF !( lVldPrgFilter )
	cMsgInfo := STR0039			//"O Programa selecionado nao se encontra disponivel para filtro"
	IF ( !( "ALL_PRG" $ cPrgChkOk ) )
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0089	//"Escolha um dos Programas abaixo:"
		cMsgInfo	+= CRLF
		cMsgInfo	+= cPrgChkOk
	EndIF	
	MsgInfo( OemToAnsi( cMsgInfo ) , OemToAnsi( STR0036 ) )	//"Aviso de Inconsistencia"
EndIF

Return( lVldPrgFilter )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁUsrFiltVld    ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/03/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁValida o Usuario para o Filtro                              Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function UsrFiltVld( cUsrFilter , cUsrChkOk , cAliasFilter )

Local lVldUser := .T.
Local lTemRE7 		:= AliasInDic("RE7")

Local cMsgInfo
Local cPrefix		:= "FILTRO_"

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

Begin Sequence

	cUsrFilter	:= Padr( Upper( cUsrFilter ) , Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
	cUsrChkOk	:= Upper( AllTrim( cUsrChkOk ) )

	IF ( "ALL_USR" $ cUsrChkOk )
    	Break
	EndIF
	
	IF !( lVldUser := ( cUsrFilter $ cUsrChkOk ) )
		Break
	EndIF

	IF !( Empty( cUsrFilter ) )
		lVldUser := UsrExist( cUsrFilter )
	EndIF
	
End Sequence	

IF !( lVldUser )
	cMsgInfo := STR0088			//"O usuАrio selecionado nao se encontra disponМvel para filtro"
	IF ( !( "ALL_USR" $ cUsrChkOk ) )
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0090	//"Escolha um dos usuАrios abaixo:"
		cMsgInfo	+= CRLF
		cMsgInfo	+= cUsrChkOk
	EndIF	
	MsgInfo( OemToAnsi( cMsgInfo ) , OemToAnsi( STR0036 ) )	//"Aviso de Inconsistencia"
EndIF

Return( lVldUser )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁRetCodAlias	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁDisponibiliza os Alias para Selecao                         Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function RetCodAlias(	cAlias			,;
						nSize			,;
						lFirst			,;
						cAliasdbFilter	,;
						lAllSelect		 ;
					)

Local cAliasSelect := AllTrim( cAlias )

DEFAULT lFirst := .T.

IF !( lFirst )
	IF ( Upper( AllTrim( ReadVar() ) ) == "CALSFILTER" )
		IF RetAlias( @cAliasSelect , .F. , NIL , NIL , cAliasdbFilter , lAllSelect )
			cAlias := Padr( Upper( cAliasSelect ) , nSize )
		Else
			cAlias := Padr( Upper( cAlias ) , nSize )
		EndIF
	EndIF
Else
	lFirst := .F.
EndIF

Return( .T. )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁRetAlias	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё16/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Opcao de Alias                                      Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function RetAlias(	cNomeAlias		,;
					lBranco			,;
					aListBox		,;
					lShowDialog		,;
					cAliasdbFilter	,;
					lAllSelect		 ;
				)

Local aArea			:= {}
Local aAreaSX2		:= {}
Local aSvKeys		:= GetKeys()

Local cPesq   		:= IF( !Empty( cNomeAlias ) , Padr( cNomeAlias , 20 ) , Space( 20 ) )
Local cAtuKeyAls	:= ( cEmpAnt + cFilAnt )
Local cFilter		:= ""

Local lFilter		:= .F.
Local lOK     		:= .F.

Local nPosListBox	:= 0
Local nLoop			:= 0
Local nLoops		:= 0

Local oPesq
Local oDlg
Local oListBox

Static __aLstAlias	:= {}
Static __cLstKeyAls := "__cLstKeyAls"

DEFAULT lBranco		:= .F.
DEFAULT aListBox		:= {}
DEFAULT lShowDialog	:= .T.

aListBox := {}

IF ( lBranco )
	aAdd( aListBox , { Space( 3 ) , Space( 30 ) } )
EndIF

IF ( ;
		Empty( __aLstAlias );
		.or.;
		!( __cLstKeyAls == cAtuKeyAls );
		.or.;
		( aScan( __aLstAlias , { |x| Upper( Alltrim( cNomeAlias ) ) == Upper( Alltrim( x[1] ) ) } ) == 0 );
	)	
	__cLstKeyAls := cAtuKeyAls
	aArea		:= GetArea()
	aAreaSX2	:= SX2->( GetArea() )
	IF ( lFilter := !Empty( cFilter := SX2->( dbFilter() ) ) )
		SX2->( dbClearFilter() )
	EndIF	
	SX2->( dbGoTop() )
	__aLstAlias := {}
	While ( SX2->( !Eof() ) )
		SX2->( aAdd( __aLstAlias , { FWX2CHAVE() , AllTrim( X2Nome() ) } ) )
		SX2->( dbSkip() )
	End While
	IF ( lFilter )
		SX2->( dbSetFilter( { || __ExecMacro( cFilter ) } , cFilter ) )
	EndIF	
	RestArea( aAreaSX2 )
	RestArea( aArea )
EndIF

IF !Empty( __aLstAlias )
	nLoops := Len( __aLstAlias )
	For nLoop := 1 To nLoops
		IF (;
				( lAllSelect );
				.or.;
				( __aLstAlias[ nLoop , 01 ] $ cAliasdbFilter );
			 )
			aAdd( aListBox , aClone( __aLstAlias[ nLoop ] ) )
		EndIF
	Next nLoop
EndIF

IF ( lShowDialog )
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes dos Objetos             				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	DEFINE MSDIALOG oDlg FROM 150,005 TO 350,395  TITLE OemToAnsi(STR0056) STYLE DS_MODALFRAME STATUS PIXEL		// "Selecione o Arquivo"
	
		@ 6,7 LISTBOX oListBox FIELDS HEADER "" , OemToAnsi(STR0057) SIZE 183,063 ;	// "Bases de Dados"
		      OF oDlg PIXEL ON DBLCLICK ( lOk := .T., nPosListBox := oListBox:nAt , GetKeys() , oDlg:End() )
		
		oListBox:SetArray(aListBox)
		oListBox:bLine := { || LineLstBox( oListBox , .F. ) }
		
		@ 75,10 SAY OemToAnsi(STR0058) SIZE 28, 7 OF oDlg PIXEL //"Pesquisar:"
		@ 75,45 MSGET oPesq VAR cPesq  SIZE 83,10 OF oDlg PIXEL PICTURE "@!" VALID VldPosArq( oListBox , aListBox , cPesq )
		DEFINE SBUTTON FROM 75, 135 TYPE 1 ENABLE OF oDlg ACTION ( lOk := .T., nPosListBox := oListBox:nAt , RestKeys( aSvKeys , .T. ) , oDlg:End() )
		DEFINE SBUTTON FROM 75, 165 TYPE 2 ENABLE OF oDlg ACTION ( lOk := .F., RestKeys( aSvKeys , .T. ) , oDlg:End() )

		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.
		
	ACTIVATE MSDIALOG oDlg CENTERED ON INIT VldPosArq( oListBox , aListBox , cNomeAlias )
	RestKeys( aSvKeys , .T. )
		
	IF ( lOk )
		cNomeAlias := aListBox[ nPosListBox , 01 ]
	EndIF

EndIF

Return( lOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁVldPosArq	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё16/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁEfetua a Pesquisa do Alias                                  Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁRetAlias()    												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function VldPosArq( oListBox , aListBox , cAliasPesq  )

Local bAscan	:= { || NIL }

Local lValidArq := .T.

Local nPosArq	:= 0

DEFAULT aListBox	:= {}	
DEFAULT cAliasPesq	:= ""

IF ( ValType( oListBox ) == "O" )
	IF !Empty( cAliasPesq )
		bAscan := { |z| AllTrim( cAliasPesq ) $ z[1] .or. AllTrim( cAliasPesq ) $ z[2] }
		IF ( lValidArq := ( nPosArq := aScan( aListBox , bAscan ) ) > 0 )
			oListBox:nAt := nPosArq
		Else
			MsgStop( OemToAnsi( STR0059 ) ) //"Arquivo nao encontrado"
		EndIF
		oListBox:Refresh()
	EndIF	
EndIF
	
Return( lValidArq )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁRetCodPrg	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna o Codigo do Programa                                Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function RetCodPrg(	cAliasFilter,;
							nOpc		,;
							cFunName	,;
							cPrgChkOk	,;
							nSize		,;
							lFirst		,;
							cUsr		,;
							cGrp		 ;
						)

Local lWhenOk := .T.

DEFAULT lFirst := .T.

IF !( lFirst )
	IF ( Upper( AllTrim( ReadVar() ) ) == "CPRGFILTER" )
		IF ( nOpc == 2 )
			IF (;
					Empty( cFunName );
					.or.;
					!PrgFiltVld( cFunName , cPrgChkOk , cAliasFilter );
				)	
				IF ( Upper( AllTrim( FunName() ) ) <> "GPFILTRO" )
					cFunName := Padr( Upper( FunName() ) , nSize )
				EndIF
			Else
				cFunName := Padr( Upper( cFunName  ) , nSize )
			EndIF
		Else
			lWhenOk := ChkUsrGrp( cUsr , cGrp )
		EndIF
	EndIF
Else
	lFirst := .F.
EndIF

Return( lWhenOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁRetUsrCod	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna o Codigo do Usuario                                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function RetUsrCod( nOpc , cUsr , nSize , lFirst )

Local lWhenOk	:= .T.

DEFAULT lFirst := .T.

IF !( lFirst )
	IF ( Upper( AllTrim( ReadVar() ) ) == "CUSRFILTER" )
		IF ( nOpc == 2 )
			IF Empty( cUsr )
				cUsr := Padr( Upper( RetCodUsr() ) , nSize )
			Else
				cUsr := Padr( Upper( cUsr  	  ) , nSize )
			EndIF
		Else
			lWhenOk := ChkUsrGrp( cUsr , NIL , "U" )
		EndIF	
	EndIF
Else
	lFirst := .F.
EndIF

Return( lWhenOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁWhenGrpCod	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna o Codigo do Grupo de usuarios                       Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function WhenGrpCod( nOpc , cGrp , lFirst )

Local lWhenOk	:= .T.

DEFAULT lFirst := .T.

IF !( lFirst )
	IF ( Upper( AllTrim( ReadVar() ) ) == "CGRPFILTER" )
		lWhen := ChkUsrGrp( NIL , cGrp , "G" )
	EndIF
Else
	lFirst := .F.
EndIF

Return( lWhenOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁVldGrpCod	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁVerifica se o Grupo de Usuarios e valido                    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function VldGrpCod( cGrpFilter , cGrpChkOk , cAliasFilter )

Local lVldGrpUser := .T.
Local lTemRE7 		:= AliasInDic("RE7")

Local cMsgInfo
Local cPrefix		:= "FILTRO_"

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

Begin Sequence

	cGrpFilter	:= Padr( Upper( cGrpFilter ) , Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )
	cGrpChkOk	:= Upper( ( cGrpChkOk ) )

	IF ( "ALL_GRP" $ cGrpChkOk )
		Break
	EndIF

	IF !( lVldGrpUser := ( cGrpFilter $ cGrpChkOk ) )
		Break
	EndIF

	IF Empty( cGrpFilter )
		Break
	EndIF

	PswOrder( 01 )
	IF !( lVldGrpUser := PswSeek( cGrpFilter , .F. ) )
		Break
	EndIF
	
End Sequence

IF !( lVldGrpUser )
	cMsgInfo := STR0039			//"Grupo de Usu═rios inv═lido"
	IF ( !( "ALL_PRG" $ cGrpChkOk ) )
		cMsgInfo	+= CRLF
		cMsgInfo	+= STR0091	//"Escolha um dos Grupos abaixo:"
		cMsgInfo	+= CRLF
		cMsgInfo	+= cGrpChkOk
	EndIF
	MsgInfo( OemToAnsi( cMsgInfo ) , OemToAnsi( STR0036 ) )	//"Aviso de Inconsistencia"
EndIF

Return( lVldGrpUser )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltBldExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMonta a Expressao de Filtro                                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GpFltBldExp( cAlias , oWnd , cFilter , cTitle, lEnableExp, nMaxSize )

Local aSvKeys		:= GetKeys()
Local aOperTit		:= GetOper()[2]
Local aFields		:= {}
Local aHeader		:= {}
Local aTitles		:= {}
Local aUndo			:= {}

Local bChgFieldGet	:= { || CursorWait() , ChgFieldGet( oDlg , @oExpr , @uExpr , @aHeader[ oFieldDesc:nAt ] , oOper:nAt , cAlias ) , CursorArrow() }
Local bBtnOp		:= { || CursorWait() , IF(nMatch==0,oBtnMatch:Enable(),NIL),++nMatch,cTxtFil+= " ( ",cExpFil+="(",oTxtFil:Refresh(),UndoAddExp( @aUndo , cExpFil , @oBtnUndo ) , CursorArrow() }
Local bBtnMatch		:= { || CursorWait() , --nMatch,cTxtFil+= " ) ",cExpFil+=")",UndoAddExp( @aUndo , cExpFil , @oBtnUndo ),IF(nMatch==0,oBtnMatch:Disable(),NIL),oTxtFil:Refresh(), CursorArrow() }
Local bBtnE			:= { || CursorWait() , cTxtFil+=" e ",cExpFil += ".AND.",UndoAddExp( @aUndo , cExpFil , @oBtnUndo ),oTxtFil:Refresh(),oBtnE:Disable(),oBtnOu:Disable(), If( lEnableExp, oBtnExp:Enable(),oBtnExp:Disable() ),oBtnAdd:Enable(),oBtnE:Refresh(),oBtnOu:Refresh(),oBtnAdd:Refresh(),oBtnOp:Enable() , CursorArrow() }
Local bBtnOu		:= { || CursorWait() , cTxtFil+=" ou ",cExpFil += ".OR.",UndoAddExp( @aUndo , cExpFil , @oBtnUndo ),oTxtFil:Refresh(),oBtnE:Disable(),oBtnOu:Disable(),If( lEnableExp, oBtnExp:Enable(),oBtnExp:Disable() ),oBtnAdd:Enable(),oBtnE:Refresh(),oBtnOu:Refresh(),oBtnAdd:Refresh(),oBtnOp:Enable() , CursorArrow() }
Local bBtnExp		:= { || CursorWait() , lRet := MyFilterExp(@cTxtFil,@cExpFil,cAlias,nMaxSize),UndoAddExp( @aUndo , cExpFil , @oBtnUndo ),oTxtFil:Refresh(),IF(lRet,oBtnOp:Disable(),oBtnOp:Enable()),IF(lRet,oBtnExp:Disable(),If( lEnableExp, oBtnExp:Enable(),oBtnExp:Disable() )) ,IF(lRet,oBtnAdd:Disable(),oBtnAdd:Enable()),IF(lRet,oBtnE:Enable(),oBtnE:Disable()),IF(lRet,oBtnOu:Enable(),oBtnOu:Disable()) , CursorArrow() , lRet }
Local bBtnAdd		:= { || CursorWait() , cTxtFil := MyBuildTxt(cAlias,uExpr,@cExpFil,aHeader,oFieldDesc:nAt,oOper:nAt,nMaxSize),UndoAddExp( @aUndo , cExpFil , @oBtnUndo ),Eval( bChgFieldGet ),oTxtFil:Refresh(),oBtnE:Enable(),oBtnOp:Disable(),oBtnOu:Enable(),oBtnAlt:Enable(),oBtnE:Refresh(),oBtnOu:Refresh(),oBtnExp:Disable(),oBtnAdd:Disable(),oBtnAdd:Refresh() , CursorArrow() }
Local bBtnClr		:= { || CursorWait() , cFilExp := "",cTxtFil := "",cExpFil := "",aUndo:={},nMatch := 0,oTxtFil:Refresh(),If( lEnableExp, oBtnExp:Enable(),oBtnExp:Disable() ),oBtnAdd:Enable(),oBtnE:Disable(),oBtnOu:Disable(),oBtnMatch:Disable(),oBtnOp:Enable(),oBtnUndo:Disable(),oBtnAlt:Disable(),CursorArrow() }
Local bBtnUndo		:= { || CursorWait() , UndoRmvExp( @aUndo , @oBtnUndo , @cTxtFil , @cExpFil , @oTxtFil , aHeader , cAlias , cFilExp , @oBtnOp , @nMatch , @oBtnMatch ) , oBtnAdd:Disable() , IF( !Empty( cExpFil ) , ( oBtnE:Enable() , oBtnOu:Enable() , oBtnExp:Disable() ) , ( oBtnE:Disable(), oBtnOu:Disable() , If( lEnableExp, oBtnExp:Enable(),oBtnExp:Disable() ) , oBtnAdd:Enable() , oBtnAlt:Disable() ) ) , CursorArrow() }
Local bBtnAlt		:= { || CursorWait() , IF( Eval( bBtnOk , .F. ) , AltValExp( cAlias , @cExpFil , @cTxtFil , @oTxtFil , aHeader , @aUndo , @oBtnUndo , aOperTit,nMaxSize ) , NIL ) , CursorArrow() }
Local bBtnOk		:= { |lEnd| CursorWait() , IF( ( lEnd == NIL ) , lEnd := .T. , lEnd ) , ( IF( lOk := ( nMatch == 0 ) , .T. , Help("",1,"NOMATCH") ) , IF( lOk , lOk := GpVldFilter(@cExpFil,cAlias,nMaxSize) , .F. ) , IF( lOk , IF( lEnd , lConfirma := .T. , lConfirma := .F. ) , lConfirma := .F. ) , IF( lOk , IF( lEnd , ( GetKeys() , CursorArrow() , oDlg:End() ) , .F. ) , .F. ) ) , IF( lEnd , lConfirma , lOk ) }
Local bBtnNo		:= { || CursorWait() , GetKeys() , CursorArrow() , oDlg:End() , .F. }

Local cDesc			:= ""
Local cRet 			:= ""
Local cFieldDesc	:= ""
Local cOper			:= ""
Local cFilExp		:= ""
Local cTxtFil		:= ""
Local cExpFil		:= ""

Local lOk			:= .F.
Local lConfirma 	:= .F.
Local nMatch		:= 0

Local oBtnOk
Local oBtnNo
Local oBtnE
Local oBtnOu
Local oBtnAdd
Local oBtnExp
Local oBtnClr
Local oBtnUndo
Local oBtnAlt
Local oExpr
Local oFieldDesc
Local oBtnOp
Local oTxtFil
Local oOper
Local oBtnMatch
Local oDlg

Local uExpr

DEFAULT	lEnableExp	:= .T.
DEFAULT cAlias 		:= Alias()
DEFAULT cFilter		:= ""
DEFAULT oWnd		:= GetWndDefault()
DEFAULT nMaxSize	:= 2000

cAlias := Upper( AllTrim( cAlias ) )

CursorWait()

aFields		:= RetCposSX3( cAlias )
aHeader		:= aFields[1]
aTitles		:= aFields[2]

cFilExp	:= IF( Empty( cFilter ) , (cAlias)->( dbFilter() ) , cFilter )
IF !Empty( cFilExp )
	cRet	:= cFilExp
	cTxtFil := GpFltBldDesc( cFilExp , @aHeader , cAlias )
EndIF

cDesc  		:= OemToAnsi( STR0001 ) //"Express└o de Filtro"
cFieldDesc	:= aTitles[1]

DEFAULT cTitle	:= cDesc     
DEFINE MSDIALOG oDlg FROM 30,30 TO 255,500 TITLE cTitle OF oWnd STYLE DS_MODALFRAME STATUS PIXEL 

	@ 006,002.5 SAY OemToAnsi(STR0012)						SIZE 050,010 OF oDlg PIXEL								//"Campos:"
	@ 014,002.5 COMBOBOX oFieldDesc VAR cFieldDesc ITEMS aTitles	SIZE 080,050 OF oDlg PIXEL ON CHANGE Eval( bChgFieldGet )

	@ 006,082.0	SAY OemToAnsi(STR0013)		SIZE 050,010 OF oDlg PIXEL												//"Operadores:"
	cOper	:= aOperTit[1]
	@ 014,082.0	COMBOBOX oOper VAR cOper	SIZE 080,050 OF oDlg PIXEL ITEMS aOperTit ON CHANGE Eval( bChgFieldGet )
    
	@ 006,164.0	SAY OemToAnsi(STR0014)		SIZE 100,010 OF oDlg PIXEL												//"Express└o:"
	Eval( bChgFieldGet )

	@ 030,002.5 BUTTON oBtnOp 		PROMPT "("  SIZE 020,012 OF oDlg PIXEL ACTION Eval( bBtnOp )
	@ 030,024.5 BUTTON oBtnMatch	PROMPT ")"  SIZE 020,012 OF oDlg PIXEL ACTION Eval( bBtnMatch )
	oBtnMatch:Disable()

	@ 030,064.5 BUTTON oBtnE	PROMPT OemToAnsi("&"+STR0019)	SIZE 020,012 OF oDlg PIXEL ACTION Eval( bBtnE )		//"e"
	@ 030,086.5 BUTTON oBtnOu	PROMPT OemToAnsi("&"+STR0020)	SIZE 020,012 OF oDlg PIXEL ACTION Eval( bBtnOu )	//"ou"

   	@ 030,126.5 BUTTON oBtnExp	PROMPT OemToAnsi(STR0018)	SIZE 050,012 OF oDlg PIXEL ACTION Eval( bBtnExp ) 		//"&Express└o"
	
	@ 030,180.5 BUTTON oBtnAdd	PROMPT OemToAnsi(STR0016)	SIZE 050,012 OF oDlg PIXEL ACTION Eval( bBtnAdd )		//"&Adiciona"

	@ 046,002.5	SAY OemToAnsi(STR0015)	SIZE 053,007 OF oDlg PIXEL													// "Filtro:"
	@ 053,002.5	GET oTxtFil VAR cTxtFil	SIZE 229,045 OF oDlg PIXEL MEMO COLOR CLR_BLACK,CLR_HGRAY READONLY HSCROLL CENTERED DESIGN NO VSCROLL
	oTxtFil:bRClicked := { || AllwaysTrue() }

	@ 099,002.5 BUTTON oBtnClr	PROMPT OemToAnsi(STR0017)	SIZE 045,013 OF oDlg PIXEL ACTION Eval( bBtnClr  )		//"&Limpa Filtro"
	@ 099,049.5 BUTTON oBtnUndo	PROMPT OemToAnsi(STR0074)	SIZE 045,013 OF oDlg PIXEL ACTION Eval( bBtnUndo )		//"&Desfazer"
	@ 099,096.5 BUTTON oBtnAlt	PROMPT OemToAnsi(STR0093)	SIZE 045,013 OF oDlg PIXEL ACTION Eval( bBtnAlt  )		//"Al&terar Valores"
	oBtnUndo:Disable()

	DEFINE SBUTTON oBtnOk FROM 099,170 TYPE 1 ENABLE OF oDlg ACTION Eval( bBtnOk )
	DEFINE SBUTTON oBtnNo FROM 099,202 TYPE 2 ENABLE OF oDlg ACTION Eval( bBtnNo )

	IF Empty( cFilExp )
		oBtnE:Disable()
		oBtnOu:Disable()
		oBtnAlt:Disable()
		If!(lEnableExp)
			oBtnExp:Disable()
		end if
	Else
		oBtnAdd:Disable()
		oBtnOp:Disable()
	   	oBtnExp:Disable()
		oBtnAlt:Enable()
		cExpFil := cFilExp
	EndIF

	oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.

ACTIVATE MSDIALOG oDlg CENTERED ON INIT ( SetKey( 15 , bBtnOk ) , SetKey( 24 , bBtnNo ) )
RestKeys( aSvKeys , .T. )

IF ( lConfirma )
	IF !( cExpFil == NIL )
		cRet 	:= cExpFil
		cFilter	:= cRet
	EndIF
EndIF

Return( lConfirma )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁChgFieldGet	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё31/01/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMontar Get para digitacao das informacoes para filtro       Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFltBldExp() em GpFiltro      								Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function ChgFieldGet(	oDlg			,;
								oGet			,;
								cGet			,;
								aHeaderField	,;
								nOpr			,;
								cAlias	 		,;
								nLin			,;
								nCol			,;
								lCalcField		,;
								cPicture		,;
								lReadOnly		,;
								bAction			 ;
							)

Local aOper		:= GetOper()[1]

Local aCombo

Local cF3
Local cSxbRet

Local lOpcoes
Local lComboBox

Begin Sequence

	IF ( ValType( oGet ) == "O" )
		oGet:Disable()
		oGet:Hide()
		oGet:End()
		oGet := NIL
		oDlg:Refresh()
	EndIF

	DEFAULT lCalcField := .T.
	IF ( lCalcField )
		cGet := MyCalcField( aHeaderField )
	EndIF	

	cF3 := GetF3Cpo( cAlias , aHeaderField , @aCombo )

	DEFAULT cPicture := AllTrim( aHeaderField[  __AHEADER_PICTURE__ ] )
	IF ( Empty( cPicture ) )
		IF ( aHeaderField[  __AHEADER_TYPE__ ] == "N" )
			cPicture := "@E "+Replicate( "9" , aHeaderField[ __AHEADER_WIDTH__ ] )
			IF ( aHeaderField[  __AHEADER_DEC__ ] > 0 )
				cPicture := SubStr( cPicture , 1 , Len( cPicture ) - ( aHeaderField[ __AHEADER_DEC__ ] + 1 ) )
				cPicture += ( "." + Replicate( "9" , aHeaderField[  __AHEADER_DEC__ ] ) )
			EndIF
		ElseIF ( aHeaderField[ __AHEADER_TYPE__ ] == "C" )
			cPicture := "@K"
		ElseIF ( aHeaderField[  __AHEADER_TYPE__ ] == "D" )
			cPicture := "@D"
		EndIF
	ElseIF ( aHeaderField[  __AHEADER_TYPE__ ] == "D" )
		cPicture := "@D"
	ElseIF ( aHeaderField[  __AHEADER_TYPE__ ] == "C" .And."@R" $ aHeaderField[ __AHEADER_PICTURE__ ] )
		cPicture := ""
	EndIF

	IF ( lOpcoes := !( nOpr == NIL ) )
		lOpcoes := aOper[nOpr] $ "$|!x.."
	EndIF

	lComboBox := !Empty( aCombo )

	DEFAULT nLin	:= 014
	DEFAULT nCol	:= 164

	IF ( lOpcoes )
		DEFAULT bAction := { ||;
									CursorWait(),;
									cGet := GpFltOpcoes(;
															cAlias ,;
															aHeaderField,;
															lComboBox,;
															cPicture,;
															cGet;
														),;
									CursorArrow();
							}
		@ nLin,nCol BUTTON oGet PROMPT OemToAnsi( "&" + STR0092 ) ACTION MsAguarde( bAction ) SIZE 070,010 OF oDlg PIXEL FONT oDlg:oFont //"Selecione as OpГУes"
	Else
		DEFAULT lReadOnly := .F.
		IF ( lComboBox )
			IF ( lReadOnly )
				@ nLin,nCol COMBOBOX oGet VAR cGet ITEMS aCombo SIZE 073,010 OF oDlg PIXEL FONT oDlg:oFont WHEN .F.
			Else
				@ nLin,nCol COMBOBOX oGet VAR cGet ITEMS aCombo SIZE 073,010 OF oDlg PIXEL FONT oDlg:oFont 
			EndIF
		Else
			IF ( lReadOnly )
				@ nLin,nCol MSGET oGet VAR cGet SIZE 072,010 PICTURE cPicture OF oDlg PIXEL FONT oDlg:oFont WHEN .F.
			Else
				@ nLin,nCol MSGET oGet VAR cGet SIZE 072,010 PICTURE cPicture OF oDlg PIXEL FONT oDlg:oFont
			EndIF	
			IF !Empty( cF3 )
				oGet:cF3 := cF3
				IF Empty( aHeaderField[  __AHEADER_F3__ ] )
					aHeaderField[  __AHEADER_F3__ ] := cF3
				EndIF
			EndIF
		EndIF
		oGet:Refresh()
	EndIF
	oGet:SetFocus()
	oDlg:Refresh()

End Sequence
	
Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGetF3Cpo	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё31/01/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁObtem a Consulta para a Tecla F3 do Campo                   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFltBldExp() em GpFiltro      								Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetF3Cpo( cAlias , aHeaderField , aCombo  )

Local cF3
Local cSxbRet

IF ( Empty( cF3 := aHeaderField[  __AHEADER_F3__ ] ) )
	IF ( !Empty( aHeaderField[  __AHEADER_CBOX__ ] ) )
		aCombo := Sx3Box2Arr( aHeaderField[ __AHEADER_FIELD__ ] )
	ElseIF ( SXB->( dbSeek( cAlias , .F. ) ) )
		cAlias := Upper( AllTrim( cAlias ) )
		While SXB->(;
						!Eof();
						.and.;
						( Upper( SubStr( AllTrim( XB_ALIAS ) , 1 , 3 ) ) == cAlias );
					)
			IF ( SXB->XB_TIPO == "5" )
				cSxbRet := Upper( AllTrim( SXB->XB_CONTEM ) )
				Exit
			EndIF
			SXB->( dbSkip() )
		End While
		IF ( Upper( AllTrim( aHeaderField[  __AHEADER_FIELD__ ] ) ) $ cSxbRet )
			cF3 := SXB->XB_ALIAS
		EndIF
	ElseIF ( "_FILIAL" $ Upper( AllTrim( aHeaderField[  __AHEADER_FIELD__ ] ) ) )
		IF ( SXB->( dbSeek( "XM0" , .F. ) ) )
			cF3 := "XM0"
		EndIF
	EndIF
EndIF

Return( cF3 )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltOpcoes	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё01/09/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁfOpcoes para Selecao de Multiplos Itens                     Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁChgFieldGet() em GpFiltro      								Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltOpcoes(	cAlias			,;
								aHeaderField	,;
								lComboBox		,;
								cPicture		,;
								cGet			 ;
							)

Local aOpcoes		:= {}
Local aSvKeys		:= GetKeys()

Local bSvF3			:= SetKey( VK_F3  , NIL )

Local cOpcRet		:= ""
Local cCampo		:= aHeaderField[ __AHEADER_FIELD__ ]
Local cTypeCpo		:= aHeaderField[ __AHEADER_TYPE__  ]
Local cTitulo		:= aHeaderField[ __AHEADER_TITLE__ ]
Local cAliasQuery	:= cAlias
Local cAuxPicture	:= GetSx3Cache( cCampo , "X3_PICTURE" )
Local cF3			:= ""

Local lSetCentury	:= __SetCentury( "on" )
Local lQueryOpened	:= .F.

Local nTamCpo		:= aHeaderField[ __AHEADER_WIDTH__ ]

Local bf_Opcoes

Local lf_Opcoes
Local lCheckExecForm
Local lGestPubl		:= If(ExistFunc("fUsaGFP"), fUsaGFP(), .F.) //Verifica se utiliza o modulo de Gestao de Folha Publica - SIGAGFP

Local MvParDef		:= Nil

Local nNewTam
Local nSvRecno
Local nFieldPos
Local nElemRet

Local uVarRet
Local uCntVar

Local cQuery := ""

IF (;
		Empty( cPicture );
		.and.;
		!Empty( cAuxPicture );
	)	
	cPicture := cAuxPicture
EndIF

IF !( lComboBox )

	DEFAULT cTypeCpo := ( cAlias )->( Type( cCampo ) )

	If cCampo == "RA_CATFUNC"
		MvParDef := ""
	    If SX5->( dbSeek(cFilial+"28") )
            While SX5->( !Eof() ) .AND. SX5->X5_Tabela == "28"
                If lGestPubl .or. (!lGestPubl .and. Left(SX5->X5_Chave,1) >= 'A')
                    Aadd(aOpcoes, Left(SX5->X5_Chave,1) + " - " + Alltrim(X5Descri()))
                    MvParDef += Left(SX5->X5_Chave,1)
                EndIf
                SX5->( dbSkip() )
            Enddo
		EndIf
	Else
		IF ( cAuxPicture <> NIL )

			nFieldPos	:= ( cAlias )->( FieldPos( cCampo ) )
			( cAlias )->( dbGoto( 0 ) )
			uCntVar		:= ( cAlias )->( FieldGet( nFieldPos ) )

			cQuery 		+= "SELECT "
			cQuery 		+= cCampo
			cQuery 		+= " FROM "
			cQuery 		+= InitSqlName( cAlias )
			cQuery 		+= " WHERE "
			IF !( cTypeCpo == "N" )
				cQuery 	+= ( cCampo + "<>'" + AllToChar( uCntVar , cAuxPicture , .T. ) + "'" )
			Else
				cQuery 	+= ( cCampo + "<>" + AllToChar( uCntVar , cAuxPicture , .T. ) )
			EndIF
			cQuery 		+= " AND D_E_L_E_T_ = ' ' "
			cQuery 		+= ( "ORDER BY " + cCampo )
			cQuery 		:= ChangeQuery( cQuery )
			cAliasQuery := GetNextAlias()
			IF ( lQueryOpened := MsOpenDbf( .T. , "TOPCONN" , TcGenQry( NIL , NIL , cQuery ) , cAliasQuery , .F. , .T. ) )
				IF !( cTypeCpo == "C" )
					TcSetField( cAliasQuery , cCampo , cTypeCpo , GetSx3Cache( cCampo , "X3_TAMANHO" ) , GetSx3Cache( cCampo , "X3_DECIMAL" ) )
				EndIF
			EndIF
		
		EndIF	 

		IF !( lQueryOpened )
	
			cAliasQuery	:= cAlias
			nSvRecno := ( cAlias )->( Recno() )
			( cAlias )->( dbGotop() )
		
		EndIF	
	
		UniqueKey()
		nFieldPos := ( cAliasQuery )->( FieldPos( cCampo ) )
		While ( cAliasQuery )->( !Eof() )
	  		IF UniqueKey( { cCampo } , cAliasQuery , .F. , 50 )
	  			uCntVar	:= ( cAliasQuery )->( FieldGet( nFieldPos ) )
	  			uCntVar	:= AllToChar( uCntVar , cPicture , .F. )
	  			DEFAULT nNewTam := Len( uCntVar )
	  			aAdd( aOpcoes , uCntVar )
			EndIF
			( cAliasQuery )->( dbSkip() )	
		End While
	
		IF ( lQueryOpened )
			( cAliasQuery )->( dbCloseArea() )
			dbSelectArea( cAlias )
		EndIF
	
		IF ( nSvRecno <> NIL )
			( cAlias )->( MsGoto( nSvRecno ) )
		EndIF
	
		IF ( nNewTam <> NIL )
			nTamCpo := nNewTam
		EndIF
	EndIf

	nElemRet := Len( aOpcoes )
	IF ( ( nElemRet * ( nTamCpo + 1 ) ) >= 1048575 ) //( 1048575 + 1 ) String size overflow!
		nElemRet := Int( 1048575 / ( nTamCpo + 1 ) )
	EndIF
 
Else

	nElemRet := Len( Sx3Box2Arr( cCampo ) )

EndIF

cF3 := GetF3Cpo( cAlias , aHeaderField )

bf_Opcoes := { ||;
					uVarRet := cGet,;
					lf_Opcoes := f_Opcoes(	@uVarRet	,;	//Variavel de Retorno
											cTitulo		,;	//Titulo da Coluna com as opcoes
											aOpcoes		,;	//Opcoes de Escolha (Array de Opcoes)
											MvParDef     	,;	//String de Opcoes para Retorno
											NIL  		,;	//Nao Utilizado
											NIL   		,;	//Nao Utilizado
											.F.			,;	//Se a Selecao sera de apenas 1 Elemento por vez
											nTamCpo		,;	//Tamanho da Chave
											nElemRet	,;	//No maximo de elementos na variavel de retorno
											.T.			,;	//Inclui Botoes para Selecao de Multiplos Itens
											lComboBox	,;	//Se as opcoes serao montadas a partir de ComboBox de Campo ( X3_CBOX )
											cCampo		,;	//Qual o Campo para a Montagem do aOpcoes
											.F.       	,;	//Nao Permite a Ordenacao
											.F.     	,;	//Nao Permite a Pesquisa	
											.T.		    ,;	//Forca o Retorno Como Array
											cF3			 ;	//Consulta F3 para o Campo
		  								);
			}

IF (;
		( lCheckExecForm := CheckExecForm( bf_Opcoes , .T. ) );
		.and.;
		( lf_Opcoes );
	)	
	CursorWait()
		lCheckExecForm := CheckExecForm( { || cOpcRet := GpFltStrOpcoes( uVarRet , cTypeCpo ) } , .T. )
	CursorArrow()
EndIF
IF (;
		!( lCheckExecForm );
		.or.;
		!( lf_Opcoes );
	)	
	IF ( cGet <> NIL )
		cOpcRet := cGet
	EndIF	
EndIF		

IF !( lSetCentury )
	__SetCentury( "off" )
EndIF

RestKeys( aSvKeys , .T. )
SetKey( VK_F3 , bSvF3 )

Return( cOpcRet )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltStrOpcoesЁAutorЁ Marinaldo de Jesus  Ё Data Ё02/09/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna a String com as Opcoes Selecionadas                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFltOpcoes() em GpFiltro      								Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function GpFltStrOpcoes( aVarRet , cTypeCpo )

Local cOpcRet	:= ""

Local nBytes	:= 0

Local nLoop
Local nLoops

Local uCntVar

Local lGPEM020  := FunName() $ "GPEM020A/GP131CALC/GPEM016" //Vale para GPEM020 e GPEM020A
Local lGPM23_34  := FunName() $ "GPEM023|GPEM034" //Carga Inicial ou Eventos PeriСdicos eSocial

nLoops := Len( aVarRet )
For nLoop := 1 To nLoops
	uCntVar := aVarRet[ nLoop ]
	IF ( cTypeCpo == "D" )
		uCntVar := Dtos( Ctod( uCntVar , "DDMMYYYY" ) )
	EndIF
	nBytes  += ( Len( uCntVar ) + 1 )
	IF ( nBytes >= 1048575 ) 
		Exit //( 1048575 + 1 ) String size overflow!
	EndIF
	cOpcRet += uCntVar
	IF ( nLoop < nLoops )
		If lGPEM020 .Or. lGPM23_34
			cOpcRet += "*/"
		Else
			cOpcRet += "/"
		EndIf
	EndIF
Next nLoop
IF ( SubStr( cOpcRet , If(lGPEM020 .Or. lGPM23_34,-2,-1) ) == If(lGPEM020 .Or. lGPM23_34,"*/","/") )
	cOpcRet := SubStr( cOpcRet , 1 , ( Len( cOpcRet ) - If(lGPEM020 .Or. lGPM23_34,2,1) ) )
EndIF

Return( cOpcRet )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁUndoRmvExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё02/02/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁDesfaz Expressao                                            Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFltBldExp() em GpFiltro									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function UndoRmvExp(		aUndo		,;
								oBtnUndo	,;
								cTxtFil 	,;
								cExpFil		,;
								oTxtFil		,;
								aHeader 	,;
								cAlias		,;
								cFirstExp	,;
								oBtnOp		,;
								nMatch		,;
								oBtnMatch	 ;
						  )

Local nSize := Len( aUndo )

IF ( nSize > 0 )
	IF ( ( nSize - 1 ) > 0 )
		cExpFil := aUndo[ nSize - 1 ]
	Else
		cExpFil := cFirstExp
	EndIF
	IF (;
			( AllTrim( aUndo[ nSize ] ) == ")" );
			.or.;
			(;
				( cExpFil == cFirstExp );
				.and.;
				( AllTrim( cExpFil ) == "(" );
			);
		)
		++nMatch
		oBtnOp:Disable()
		oBtnMatch:Enable()
	ElseIF ( AllTrim( aUndo[ nSize ] ) == "(" )
		--nMatch
		oBtnOp:Enable()
		oBtnMatch:Disable()
	EndIF
	aDel( aUndo , nSize )
	aSize( aUndo , --nSize )
	cTxtFil := GpFltBldDesc( cExpFil , @aHeader , cAlias )
	oTxtFil:Refresh()
EndIF
IF ( nSize == 0 )
	oBtnUndo:Disable()
EndIF

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁUndoAddExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё02/02/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAdiciona Expressao para que possa ser Desfeita				Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFltBldExp() em GpFiltro									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function UndoAddExp( aUndo , cExp , oBtnUndo )
aAdd( aUndo , cExp )
oBtnUndo:Enable()
Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁAltValExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё26/10/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAltera os Valores de uma Expressao de Filtro  				Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFltBldExp() em GpFiltro									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function AltValExp( cAlias , cExpFil , cTxtFil , oTxtFil , aHeader , aUndo , oBtnUndo , aOperTit, nMaxSize )

Local lbOk			:= .F.

Local aSvKeys
Local aAdvSize
Local aInfoAdvSize
Local aObjCoords
Local aObjSize
Local aParseExpr
Local aParseDesc
Local aExprGet

Local bSet15
Local bSet24

Local cTitDlg
Local cX2Nome
Local cLastExpFil
Local cStrRetType

Local lStrModType

Local nLoop
Local nLoops
Local nExpr
Local nExprGet
Local nPosOper

Local oDlg
Local oFont
Local oScroll

DEFAULT nMaxSize := 2000
CursorWait()

Begin Sequence

	IF Empty( StrTran( cExpFil , " " , "" ) )
		Break
	EndIF

	cLastExpFil	:= cExpFil
	aParseExpr	:= ParseExpr( @cExpFil , cAlias , @aHeader , NIL , NIL , .T. )
	aParseDesc	:= aClone( aParseExpr )
	GpFltBldDesc( cExpFil , aHeader , cAlias , @aParseDesc )
	aExprGet	:= {}
	nLoops		:= Len( aParseExpr )
	While ( ( nLoop := aScan( aParseExpr , { |x| x[5] == "__Field__" } , ++nLoop ) ) > 0 )
		aAdd( aExprGet ,;
							{;
								aParseExpr[ nLoop , 01 ],;	//01 - Campos
								aParseDesc[ nLoop , 01 ],;	//02 - DescriГЦo
								nLoop,;						//03 - Indice dos Campos no aParseExpr
								NIL,;						//04 - Reservado para o Objeto TSay()
								NIL,;						//05 - Reservado para os Conectores
								NIL,;						//06 - Indice dos Conectores no aParseExpr
								NIL,;						//07 - Reservado para o Objeto TComboBox()
								NIL,;						//08 - Reservado para as Constantes da Expressao
								NIL,;						//09 - Indice das Constantes no aParseExpr
								NIL,;						//10 - Objeto Get para alteraГЦo das Constantes da Expressao
								NIL,;						//11 - Objeto Get com o conteudo anterior das Constantes da Expressao ( Hide )
								NIL,;						//12 - Reservado para armazenar o valor anterior das constantes da Expressao
								NIL,;						//13 - Reservado para o Bloco se sera utilizado para GetSet das informacoes quando MultSelect
								NIL,;						//14 - Reservado para o Bloco se sera utilizado para GetSet das informacoes quando MultSelect
								.F.,;						//15 - Reservado para Verificar a Conversao de Tipos das Constantes da Expressao ( .T. Houve Conversao, .F. Nao Houve )
								"";							//16 - Reservado para Verificar o Retorno na Re-Conversao de Tipos das Constantes da Expressao
							};
			 )
		nExprGet := Len( aExprGet )
		For nExpr := nLoop + 1 To nLoops
			IF ( aParseExpr[ nExpr , 05 ] == "__Field__" )
				nLoop := --nExpr
				Exit
			EndIF
			IF ( aParseExpr[ nExpr , 5 ] $ "__ExprNot__/__Oper__/__UndefinedStr__" )
				IF ( aParseExpr[ nExpr , 05 ] $ "__ExprNot__/__Oper__" )
					aExprGet[ nExprGet , 05 ] := If ( aExprGet[ nExprGet , 05 ] == Nil, aParseDesc[ nExpr , 01 ], aExprGet[ nExprGet , 05 ] )
					aExprGet[ nExprGet , 06 ] := nExpr
				ElseIF ( aParseExpr[ nExpr , 05 ] == "__UndefinedStr__" )
					cStrRetType := NIL
					lStrModType := .F.
					aExprGet[ nExprGet , 08 ] := Str2CpoType( aParseExpr[ nLoop , 01 ] , aParseExpr[ nExpr , 01 ] , aHeader , @lStrModType , @cStrRetType )
					aExprGet[ nExprGet , 09 ] := nExpr
					aExprGet[ nExprGet , 12 ] := aExprGet[ nExprGet , 08  ]
					aExprGet[ nExprGet , 15 ] := lStrModType
					aExprGet[ nExprGet , 16 ] := cStrRetType
				EndIF
			EndIF
		Next nExpr
	End While

	IF Empty( aExprGet )
		Break
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta o Titulo do Dialogo                                    Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	cTitDlg := STR0094	//"Altera┤└o dos Valores do Filtro"
	cTitDlg += " -> "
	cTitDlg += cAlias
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Obtem o Nome da Tabela no SX2                                Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	cX2Nome := GetCache( "SX2" , cAlias , NIL , "Capital( AllTrim( X2Nome() ) )" , 1 , .F. )
	IF !Empty( cX2Nome )
		cTitDlg += " - "
		cTitDlg += cX2Nome
	EndIF

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Salva as Teclas de Atalho                    	   			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aSvKeys := GetKeys()

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define os Blocos para as Teclas <CTRL-O>					   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet15 		:= { || GetKeys() , lbOk := ChgParsExpr( @aParseExpr , aExprGet , aHeader , .F. ) , oDlg:End() }

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Define os Blocos para as Teclas <CTRL-X>     	   			   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	bSet24		:= { || lbOk := .F. , GetKeys() , oDlg:End() }

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes para o Dialogo Principal				   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aAdvSize	:= MsAdvSize(.T.,.T.)
	aAdvSize[3] -= 074.25	//Ajusta a Largura do Objeto
	aAdvSize[5] -= 150.00	//Ajusta a Largura do Dialogo
	aAdvSize[6] += 80.00

	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Monta as Dimensoes dos Objetos                               Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	aInfoAdvSize	:= { aAdvSize[1] , aAdvSize[2] , aAdvSize[3] , aAdvSize[4] , 0 , 0 }
	aObjCoords		:= {}
	aAdd( aObjCoords , { 000 , 000 , .T. , .T. } )
	aObjSize		:= MsObjSize( aInfoAdvSize , aObjCoords )

	DEFINE FONT oFont NAME "Arial" SIZE 0,-11 BOLD
	DEFINE MSDIALOG oDlg TITLE OemToAnsi( cTitDlg ) From aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL

		@ aObjSize[1,1],000 SCROLLBOX oScroll VERTICAL SIZE aObjSize[1,3]-5,aObjSize[1,4] OF oDlg BORDER
        
		nExpr := ( aObjSize[1,1] - 27 )

		DEFAULT aOperTit := GetOper()[2]
		nLoops := Len( aExprGet )
		For nLoop := 1 To nLoops
			nPosOper := aScan( aOperTit , { |x| Upper( AllTrim( x ) ) == Upper( AllTrim( aExprGet[ nLoop , 5 ] ) ) } )
			IF ( nPosOper == 0 )
				Loop
			EndIF
			nExpr += 15
			aExprGet[ nLoop , 04 ]			:= TSay():New( nExpr + 5 , aObjSize[1,2] + 5 , __ExecMacro( "{ || aExprGet["+ AllTrim(Str(nLoop)) +" , 2 ] }" ) , oScroll , NIL , oFont , .F. , .F. , .F. , .T. , NIL , NIL , 50 , 10 , .T. , .F. , .T. , .F. , NIL , NIL )
			aExprGet[ nLoop , 07 ]			:= TComboBox():New( nExpr , aObjSize[1,2] + 50 , __ExecMacro( "{ |u| IF( PCount() == 0 , aExprGet[ "+ AllTrim( Str(nLoop) ) + " , 5 ] , aExprGet[ "+ Str(nLoop) + " , 5 ] := u ) }" ) , aOperTit , 80 , 10 , oScroll , NIL , NIL , NIL , NIL , NIL , .T. , oFont, NIL , .T. , NIL,.T., NIL, NIL , NIL , @aExprGet[ nLoop , 5 ] )
			aExprGet[ nLoop , 07 ]:nAt		:= nPosOper
			aExprGet[ nLoop , 13 ]			:= __ExecMacro( "{ || CursorWait() , aExprGet[ " + AllTrim(Str(nLoop)) + ", 8 ] := GpFltOpcoes(cAlias,aHeader[ GdFieldPos( aExprGet[ " + AllTrim(Str(nLoop)) + " , 1 ] , aHeader ) ],NIL,NIL,aExprGet[ " + AllTrim(Str(nLoop)) + ", 8 ]),CursorArrow() }" )
			aExprGet[ nLoop , 07 ]:bChange	:= __ExecMacro( "{ || ChgFieldGet( @oScroll , @aExprGet[" + AllTrim(Str(nLoop)) + " , 10 ] , @aExprGet[ " + AllTrim(Str(nLoop)) + ", 8 ] , aHeader[ GdFieldPos( aExprGet[ " + AllTrim(Str(nLoop)) + " , 1 ] , aHeader ) ] , aExprGet[ " + AllTrim(Str(nLoop)) + " , 7 ]:nAt , cAlias , " + AllTrim( Str( nExpr ) ) + " , " +  AllTrim( Str( aObjSize[1,2] + 140 ) ) + " , !aExprGet[ " + AllTrim( Str( nLoop ) ) + " , 15 ] , IF( aExprGet[ " + AllTrim( Str( nLoop ) ) + " , 15 ] , '@K' , NIL ) , .F. , aExprGet[ " + AllTrim( Str( nLoop ) ) + " , 13 ] ) } " ) 
			Eval( aExprGet[ nLoop , 07 ]:bChange )
			aExprGet[ nLoop , 08 ] 			:= aExprGet[ nLoop , 12 ]
			aExprGet[ nLoop , 10 ]:Refresh()
			aExprGet[ nLoop , 07 ]:bWhen 	:= { || .F. }
			aExprGet[ nLoop , 14 ]			:= __ExecMacro( "{ || CursorWait() , GpFltOpcoes(cAlias,aHeader[ GdFieldPos( aExprGet[ " + AllTrim(Str(nLoop)) + " , 1 ] , aHeader ) ],NIL,NIL,aExprGet[ " + AllTrim(Str(nLoop)) + ", 12 ]),CursorArrow() }" )
			Eval( __ExecMacro( "{ || ChgFieldGet( @oScroll , @aExprGet[" + AllTrim(Str(nLoop)) + " , 11 ] , aExprGet[ " + AllTrim(Str(nLoop)) + ", 12 ] , aHeader[ GdFieldPos( aExprGet[ " + AllTrim(Str(nLoop)) + " , 1 ] , aHeader ) ] , aExprGet[ " + AllTrim(Str(nLoop)) + " , 7 ]:nAt , cAlias , " + AllTrim( Str( nExpr ) ) + " , " +  AllTrim( Str( aObjSize[1,2] + 140 ) ) + " , .F. , '@K' , .T. , aExprGet[ " + AllTrim( Str( nLoop ) ) + " , 14 ] ) } " ) )
			aExprGet[ nLoop , 11 ]:Hide()
		Next nLoop

		oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.
		
	ACTIVATE MSDIALOG oDlg CENTERED ON INIT ( EnchoiceBar( oDlg , bSet15 , bSet24 ) , aExprGet[ 1 , 10 ]:SetFocus() )

	GetKeys()

		/*/
		здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
		Ё Verifica se foi confirmada a Alteracao          	   		   Ё
		юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
		IF ( lbOk )
			CursorWait()
				cExpFil		:= ""
				nLoops		:= Len( aParseExpr )
				For nLoop := 1 To nLoops
					IF ( aParseExpr[ nLoop , 05 ] == "__Field__" )
						cExpFil += ( cAlias + "->" )
					EndIF
					IF ( aParseExpr[ nLoop , 05 ] == "__UndefinedStr__" )
						cExpFil += ( '"' + aParseExpr[ nLoop , 01 ] + '"' )
					Else
						cExpFil += aParseExpr[ nLoop , 01 ]
					EndIF
				Next nLoop
				IF (;
						(;
							Upper( AllTrim( cExpFil ) );
							<>;
							Upper( AllTrim( cLastExpFil ) );
						);
						.and.;
						GpVldFilter(@cExpFil,cAlias,nMaxSize);
					)
					IF ( ValType( oBtnUndo ) == "O" )
						UndoAddExp( @aUndo , cExpFil , @oBtnUndo )
					EndIF	
					cTxtFil := GpFltBldDesc( cExpFil , @aHeader , cAlias )
					IF ( ValType( oTxtFil ) == "O" )
						oTxtFil:Refresh()
					EndIF	
				EndIF	
			CursorArrow()
		Else
			cExpFil := cLastExpFil
		EndIF
	
	/*/
	здддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд©
	Ё Restaura as Teclas de Atalho                    	   		   Ё
	юдддддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
	RestKeys( aSvKeys , .T. )

End Sequence

CursorArrow()

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁStr2CpoType   ЁAutorЁ Marinaldo de Jesus  Ё Data Ё28/10/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Conteudo do Campo                                   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁAltValExp                 									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function Str2CpoType( cField , cStr , aHeader , lStrModType , cStrRetType )

Local nField
Local uStr2CpoType
Local uVarAux

Begin Sequence

	uStr2CpoType	:= AllTrim( StrTran( cStr , '"' , '' ) )

	IF ( ( nField := GdFieldPos( cField , aHeader ) ) == 0 )
		lStrModType := .F.
		Break
	EndIF
	
	IF ( aHeader[ nField , __AHEADER_TYPE__ ] == "D" )
		IF ( lStrModType := (;
								!( "/" $ uStr2CpoType );
								.and.;
								( ( Len( uStr2CpoType ) ) == 8 );
							);
			)					
			uStr2CpoType := StoD( uStr2CpoType )
			cStrRetType	 := "DTOS"
			Break
		EndIF
		uVarAux := Ctod( uStr2CpoType , "DDMMYYYY" )
		IF ( lStrModType := !Empty( uVarAux ) )
			uStr2CpoType := uVarAux
			cStrRetType	 := "DTOC"
			Break
		Else
			lStrModType  := .T.
			cStrRetType	 := "__NOCONVERT__"
		EndIF
	EndIF	

	IF ( aHeader[ nField , __AHEADER_TYPE__ ] == "N" )
		IF ( lStrModType := !( "/" $ uStr2CpoType ) )
			uStr2CpoType := Val( uStr2CpoType )
			cStrRetType	 := "STR"
		Else
			lStrModType  := .T.
			cStrRetType	 := "__NOCONVERT__"
		EndIF
		Break
	EndIF

	IF ( aHeader[ nField , __AHEADER_TYPE__ ] == "C" )
		IF ( Len( uStr2CpoType ) <= aHeader[ nField , __AHEADER_WIDTH__ ] )
			uStr2CpoType := AllToChar( uStr2CpoType , aHeader[ nField , __AHEADER_PICTURE__ ] )
			uStr2CpoType := Padr( uStr2CpoType , aHeader[ nField , __AHEADER_WIDTH__ ] )
		Else
			lStrModType := .T.
			cStrRetType	 := "__NOCONVERT__"
		EndIF
	EndIF

End Sequence

Return( uStr2CpoType )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁChgParsExpr	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё27/10/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAtualiza as Informacoes alteradas no aParseExpr	            Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁAltValExp                 									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function ChgParsExpr( aParseExpr , aExprGet , aHeader , lChgOper )

Local aOper := GetOper()[1]

Local bChgParsExpr
Local lDtos

Local nField
Local nLoop
Local nLoops

DEFAULT lChgOper := .F. //Por Enquanto, Sempre .F., talvez, futuramente, implementemos tratamento para .T.

nLoops := Len( aExprGet )
For nLoop := 1 To nLoops

	IF ( lChgOper )
		aParseExpr[ aExprGet[ nLoop , 06 ] , 01 ]	:= aOper[ aExprGet[ nLoop , 07 ]:nAt ]
	EndIF

	nField := GdFieldPos( aExprGet[ nLoop , 01 ] , aHeader )
	IF ( nField > 0 )
		IF (;
				( aExprGet[ nLoop , 15 ] );
				.or.;
				Empty( aExprGet[ nLoop , 08 ] );
			)
			lDtos := ( aExprGet[ nLoop , 16 ] == "DTOS" )
			IF ( aExprGet[ nLoop , 16 ] == "__NOCONVERT__" )
				bChgParsExpr := { || aExprGet[ nLoop , 08 ] }
			Else
				bChgParsExpr := { || AllToChar( aExprGet[ nLoop , 08 ] , aHeader[ nField , __AHEADER_PICTURE__ ] , lDtos ) }
			EndIF
		Else
			IF (;
					( aExprGet[ nLoop , 16 ] <> "__NOCONVERT__" );
					.and.;
					Len( AllTrim( aExprGet[ nLoop , 08 ] ) );
					<=;
					aHeader[ nField , __AHEADER_WIDTH__ ];
				)
				bChgParsExpr := { || AllToChar( aExprGet[ nLoop , 08 ] ) }
			Else
				bChgParsExpr := { || aExprGet[ nLoop , 08 ] }
			EndIF
		EndIF
	Else
		bChgParsExpr := { || AllToChar( aExprGet[ nLoop , 08 ] ) }
	EndIF

	aParseExpr[ aExprGet[ nLoop , 09 ] , 01 ] := Eval( bChgParsExpr )

	IF (;
			Empty( aParseExpr[ aExprGet[ nLoop , 09 ] , 01 ] );
			.and.;
			( nField > 0 );
		)	
		aParseExpr[ aExprGet[ nLoop , 09 ] , 01 ] := Padr( aParseExpr[ aExprGet[ nLoop , 09 ] , 01 ] , aHeader[ nField , __AHEADER_WIDTH__ ] )
	EndIF	
	
Next nLoop

Return( .T. )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁParseExpr	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё26/10/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁParseia uma Expressao de Filtro e Retorna Array	com a ExpresЁ
Ё          Ёsao Parseada												Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico                 									Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/   
Function ParseExpr( cExpr , cAlias , aHeader , aOper , aConc , lNoEmpty )

Local aStrParse			:= {}
Local aParseExpr		:= {}
Local aParseAux			:= {}

Local bAddParse			:= { || NIL }
Local bSrtParse			:= { |x,y| x[2] < y[2] }

Local cExprAux			:= ""
Local cParseStr			:= ""
Local cParseAux			:= ""
Local cLowerConc		:= ""

Local nLenExp			:= 0
Local nIniPar			:= 0
Local nParIni			:= 0
Local nParEnd			:= 0
Local nEndPar			:= 0
Local nParSize			:= 0
Local nParIniPP			:= 0

cExpr 		:= StrTran( cExpr , cAlias + "->" , "" )
cExprAux	:= Upper( cExpr )

IF ( "!(" $ cExpr )
	aAdd( aStrParse , { "!(" , "__ExprNot__" } )
EndIF
aAdd( aStrParse , { "(" , "__ParEsc__" } )
aAdd( aStrParse , { ")" , "__ParDir__" } )

DEFAULT aConc := GetConcat()
nParEnd := Len( aConc )
For nParIni := 1 To nParEnd
	cParseAux := Upper( aConc[ nParIni , 1 ] )
	IF (;
			( cParseAux $ cExprAux );
			.and.;
			( aScan( aStrParse , { |x| x[1] == cParseAux } ) == 0 );
		)	
		aAdd( aStrParse , { cParseAux , "__Conc__" } )
		cExprAux	:= StrTran( cExprAux , cParseAux , "" )
		cLowerConc	:= Lower( cParseAux )
		While ( At( cLowerConc , cExpr ) > 0 )
			cExpr := StrTran( cExpr	, cLowerConc , cParseAux )
		End While
	EndIF
Next nParIni

DEFAULT aOper := GetOper( .T. )
nParEnd := Len( aOper[ 1 ] )
For nParIni := 1 To nParEnd
	IF ( aOper[ 1 , nParIni ] $ cExprAux )
		aAdd( aStrParse , { aOper[ 1 , nParIni ] , "__Oper__" } )
		cExprAux := StrTran( cExprAux , aOper[ 1 , nParIni ] , "" )
	EndIF	
Next nParIni

DEFAULT aHeader := RetCposSX3( cAlias )[1]
nParEnd := Len( aHeader )
For nParIni := 1 To nParEnd
	IF ( aHeader[ nParIni , __AHEADER_FIELD__ ] $ cExprAux )
		aAdd( aStrParse , { aHeader[ nParIni , __AHEADER_FIELD__ ] , "__Field__" } )
		cExprAux := StrTran( cExprAux , aHeader[ nParIni , __AHEADER_FIELD__ ] , "" )
	EndIF
Next nParIni

cExprAux := NIL

bAddParse := { |aParseExpr,cParseTyp| aAdd( aParseExpr,;
															{;
																cParseStr	,;	//01
																nIniPar		,;	//02
																nEndPar		,;	//03
																nParSize	,;	//04
																cParseTyp	 ;	//05
									 						};
				 							);
			  }

nParEnd := Len( aStrParse )
For nParIni := 1 To nParEnd
	cParseStr	:= aStrParse[ nParIni , 1 ]
	cParseTyp	:= aStrParse[ nParIni , 2 ]
	nParSize	:= Len( cParseStr )
	nIniPar		:= ( At( cParseStr , cExpr ) - 1 )
	nIniPar		:= Max( 0 , nIniPar )
	nLenExp		:= Len( cExpr )
	While ( ( ++nIniPar ) <= nLenExp )
		IF ( aScan( aParseExpr , { |x| ( ( x[2] == nIniPar ) .or. ( x[3] == nIniPar ) ) } ) > 0 )
			Loop
		EndIF
		cParseAux := SubStr( cExpr , nIniPar , nParSize )
		IF ( cParseStr == Upper( cParseAux ) )
			IF (;
					( cParseTyp == "__Field__" );
					.and.;
					( cParseStr <> cParseAux );
				)	
				cExpr := StrTran( cExpr , cParseAux , cParseStr )
			EndIF
			nEndPar := ( ( nIniPar + nParSize ) - 1 )
			Eval( bAddParse , @aParseExpr , cParseTyp )
			nIniPar := nEndPar
		EndIF
	End While
Next nParIni
aSort( aParseExpr , NIL , NIL , bSrtParse )

nParEnd := Len( aParseExpr )
IF ( nParEnd > 0 )
	For nParIni := 1 To nParEnd
		nParIniPP := ( nParIni + 1 )
		IF ( nParIniPP > nParEnd )
			Exit
		EndIF
		IF ( ( aParseExpr[ nParIni , 3 ] + 1 ) <> aParseExpr[ nParIniPP , 2 ] )
			nIniPar 	:= ( aParseExpr[ nParIni , 3 ] + 1 )
			nEndPar	 	:= ( aParseExpr[ nParIniPP , 2 ] - 1 )
			nParSize 	:= ( ( nEndPar - nIniPar ) + 1 )
			cParseStr  := SubStr( cExpr , nIniPar , nParSize )
			cParseTyp	:= IF( IsFunction( cParseStr ) , "__Function__" , "__UndefinedStr__" )
			Eval( bAddParse , @aParseAux , cParseTyp )
		EndIF
	Next nParIni
	nEndPar := ( aParseExpr[ 1 , 2 ] - 1 )
	IF ( aScan( aParseExpr , { |x| ( nEndPar == x[ 3 ] ) } ) == 0 )
		nIniPar 	:= 1
		nParSize 	:= ( ( nEndPar - nIniPar ) + 1 )
		cParseStr  := SubStr( cExpr , nIniPar , nParSize )
		cParseTyp	:= IF( IsFunction( cParseStr ) , "__Function__" , "__UndefinedStr__" )
		Eval( bAddParse , @aParseAux , cParseTyp )
	EndIF
	nIniPar := ( aParseExpr[ Len( aParseExpr ) , 3 ] + 1 )
	IF ( aScan( aParseExpr , { |x| ( nIniPar == x[ 2 ] ) } ) == 0 )
		cParseStr  := SubStr( cExpr , nIniPar )
		IF !Empty( cParseStr )
			nEndPar		:= Len( cParseStr )
			nParSize 	:= ( ( nEndPar - nIniPar ) + 1 )
			cParseTyp	:= IF( IsFunction( cParseStr ) , "__Function__" , "__UndefinedStr__" )
			Eval( bAddParse , @aParseAux , cParseTyp )
		EndIF
	EndIF
	aEval( aParseAux , { |x| aAdd( aParseExpr , aClone( x ) ) } )
	aSort( aParseExpr , NIL , NIL , bSrtParse )
EndIF
	
DEFAULT lNoEmpty := .F.
IF ( lNoEmpty )
	nParEnd := Len( aParseExpr )
	While ( ( nParIni := aScan( aParseExpr , { |arr| Empty( arr[1] ) } ) ) > 0 )
		aDel( aParseExpr , nParIni )
		aSize( aParseExpr , --nParEnd )
	End While
EndIF

Return( aParseExpr )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpFltBldDesc  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMonta a Expressao de Filtro                                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GpFltBldDesc( cFiltro , aHeader , cAlias , aParseExpr )

Local lStringOk 	:= .T.
Local lSetCentury	:= __SetCentury( "on" )

Local aOper
Local aConc
Local aFunction

Local cVarAux
Local cExpDesc

Local nContem
Local nAt1
Local nAt2
Local nLoop
Local nLoopPP1
Local nLoopPP2
Local nLoops
Local nBytes

Begin Sequence

	IF Empty( cFiltro )
		Break
	EndIF
	
	cExpDesc := cFiltro

	cAlias	:= Upper( StrTran( cAlias , " " , "" ) )

	cExpDesc := StrTran( Upper( cExpDesc )	, ( cAlias+"->" ) , "" )
	nBytes	 := Len( cExpDesc )

	DEFAULT aParseExpr := ParseExpr( cExpDesc , cAlias , @aHeader , @aOper , @aConc , .T. )
	DEFAULT aHeader		:= RetCposSX3( cAlias )[1]
	DEFAULT aOper		:= GetOper( .T. )
	DEFAULT aConc		:= GetConcat()

	cExpDesc	:= ""
	nLoops		:= Len( aParseExpr )
	For nLoop := 1 To nLoops
		IF ( aParseExpr[ nLoop , 5 ] == "__ExprNot__" )
			IF ( ( nContem := aScan( aParseExpr , { |x| x[1] == "$" } , nLoop ) ) > 0 )
				IF ( ( nAt1 := aScan( aParseExpr , { |x| x[5] == "__Field__" } , nLoop ) ) > 0 )
					IF ( nAt1 > nContem )
						cVarAux := OemToAnsi( AllTrim( STR0009 ) )	//"N└o cont┌m"
					Else
						cVarAux := OemToAnsi( AllTrim( STR0011 ) )	//"N└o Est═ Contido em"
					EndIF
					cVarAux += " "
					IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - 2 ) ) <= 1048575 ) )
						//( 1048575 + 1 ) String size overflow!
						Break
					EndIF
					aParseExpr[ nContem  , 1 ] := cVarAux
				EndIF
			EndIF
		ElseIF ( aParseExpr[ nLoop , 5 ] == "__Field__" )
			nAt1 := aScan( aHeader , { |x| ( x[ __AHEADER_FIELD__ ] == aParseExpr[ nLoop , 1 ] ) } )
			IF ( nAt1 > 0 )
				nLoopPP1 := Min( nLoop + 1 , nLoops )
				IF (;
						( aParseExpr[ nLoopPP1 , 5 ] == "__Oper__" );
						.and.;
						( AllTrim( aParseExpr[ nLoopPP1 , 1 ] ) == "$" );
					)	
					nLoopPP2 := Min( nLoopPP1 + 1 , nLoops )
					IF ( Len( aParseExpr[ nLoopPP2 , 1 ] ) > aHeader[ nAt1 , __AHEADER_WIDTH__ ] )
						cVarAux := OemToAnsi( AllTrim( STR0010 ) )	//"Est═ contido em"
						cVarAux += " "
						IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - Len( aParseExpr[ nLoopPP1 , 1 ] ) ) ) <= 1048575 ) )
							//( 1048575 + 1 ) String size overflow!
							Break
						EndIF
						aParseExpr[ nLoopPP1 , 1 ] := cVarAux
					Else
						cVarAux := OemToAnsi( AllTrim( STR0008 ) )	//"Cont┌m a express└o	"
						cVarAux += " "
						IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - Len( aParseExpr[ nLoopPP1 , 1 ] ) ) ) <= 1048575 ) )
							//( 1048575 + 1 ) String size overflow!
							Break
						EndIF
						aParseExpr[ nLoopPP1 , 1 ] := cVarAux
					EndIF
				EndIF
				cVarAux := AllTrim( aHeader[ nAt1 , __AHEADER_TITLE__ ] )
				cVarAux += " "
				IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - Len( aParseExpr[ nLoop , 1 ] ) ) ) <= 1048575 ) )
					//( 1048575 + 1 ) String size overflow!
					Break
				EndIF
				aParseExpr[ nLoop , 1 ] := cVarAux
			EndIF
		ElseIF ( aParseExpr[ nLoop , 5 ] == "__UndefinedStr__" )
			nLoopPP1 := Min( nLoop + 1 , nLoops )
			IF (;
					( aParseExpr[ nLoopPP1 , 5 ] == "__Oper__" );
					.and.;
					( AllTrim( aParseExpr[ nLoopPP1 , 1 ] ) == "$" );
				)	
				nLoopPP2 := Min( nLoopPP1 + 1 , nLoops )
				nAt1 := aScan( aHeader , { |x| ( x[ __AHEADER_FIELD__ ] == aParseExpr[ nLoop , nLoopPP2 ] ) } )
				IF ( nAt1 > 0 )
					IF ( Len( AllTrim( aParseExpr[ nLoop , 1 ] ) ) == aHeader[ nAt1 , __AHEADER_WIDTH__ ] )
						cVarAux := OemToAnsi( AllTrim( STR0010 ) )	//"Est═ contido em"
						cVarAux += " "
						IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - Len( aParseExpr[ nLoopPP1 , 1 ] ) ) ) <= 1048575 ) )
							//( 1048575 + 1 ) String size overflow!
							Break
						EndIF
						aParseExpr[ nLoopPP1 , 1 ] := cVarAux
					Else
						cVarAux := OemToAnsi( AllTrim( STR0008 ) )	//"Cont┌m a express└o	"
						cVarAux += " "
						IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - Len( aParseExpr[ nLoopPP1 , 1 ] ) ) ) <= 1048575 ) )
							//( 1048575 + 1 ) String size overflow!
							Break
						EndIF
						aParseExpr[ nLoopPP1 , 1 ] := cVarAux
					EndIF
				EndIF	
			EndIF
		ElseIF ( aParseExpr[ nLoop , 5 ] == "__Conc__" )
			nAt1 := aScan( aConc , { |x| ( x[ 1 ] == aParseExpr[ nLoop , 1 ] ) } )
			IF ( nAt1 > 0 )
				cVarAux := " "
				cVarAux += AllTrim( aConc[ nAt1 , 2 ] )
				cVarAux += " "
				IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - Len( aConc[ nAt1 , 1 ] ) ) ) <= 1048575 ) )
					//( 1048575 + 1 ) String size overflow!
					Break
				EndIF
				aParseExpr[ nLoop , 1 ] := cVarAux
			EndIF	
		ElseIF ( aParseExpr[ nLoop , 5 ] == "__Oper__" )
			nAt1 := aScan( aOper[ 1 ] , { |x| ( x == aParseExpr[ nLoop , 1 ] ) } )
			IF ( nAt1 > 0 )
				cVarAux := AllTrim( aOper[ 2 , nAt1 ] )
				cVarAux += " "
				IF !( lStringOk := ( ( nBytes += ( Len( cVarAux ) - Len( aOper[ 1 , nAt1 ] ) ) ) <= 1048575 ) )
					//( 1048575 + 1 ) String size overflow!
					Break
				EndIF
				aParseExpr[ nLoop , 1 ] := cVarAux
			EndIF
		ElseIF (;
					( aParseExpr[ nLoop , 5 ] == "__Function__" );
					.and.;
					(;
						( "DTOS" $ Upper( aParseExpr[ nLoop , 1 ] ) );
						.or.;
						( "CTOD" $ Upper( aParseExpr[ nLoop , 1 ] ) );
					);	
				)	
			nLoopPP1 := aScan( aParseExpr , { |x| x[5] == "__Field__" } , nLoop )
			IF (;
					( nLoopPP1 > 0 );
					.and.;
					( nLoopPP1 == ( nLoop + 2 ) );
				)	
				IF ( aParseExpr[ nLoopPP1 , 5 ] == "__Field__" )
					nLoopPP2 := aScan( aParseExpr , { |x| x[5] == "__UndefinedStr__" } , nLoopPP1 )
					IF (;
							( nLoopPP2 > 0 );
							.and.;
							( nLoopPP2 == ( nLoopPP1 + 3 ) );
						)	
						cVarAux := AllTrim( StrTran( aParseExpr[ nLoopPP2 , 1 ] , '"' , "" ) )
						IF ( "DTOS" $ Upper( aParseExpr[ nLoop , 1 ] ) )
							aParseExpr[ nLoopPP2 , 1 ] := Dtoc( Stod( StrTran(cVarAux, "'") ) )
						ElseIF ( "/" $ cVarAux )
							aParseExpr[ nLoopPP2 , 1 ] := cVarAux
						EndIF	
					EndIF	
				EndIF
			EndIF
		EndIF
		cExpDesc += aParseExpr[ nLoop , 1 ]
	Next nLoop

	aFunction	:= {}
	aAdd( aFunction , "ALLTRIM(" )
	aAdd( aFunction , "DTOS("	 )
	aAdd( aFunction , "CTOD("	 )
	aAdd( aFunction , "DTOC("	 )
	
	cVarAux	:= Upper( cExpDesc )
	nLoops	:= Len( aFunction )
	For nLoop := 1 To nLoops
		While ( aFunction[ nLoop ] $ cVarAux )
			nAt1 := At( aFunction[ nLoop ] , cVarAux )
			nAt2 := At( ")" , SubStr( cVarAux , nAt1 ) )
			nAt2 := ( ( nAt1 + nAt2 ) - 1 )
			cExpDesc := Stuff( cExpDesc , nAt2 , 1 , "" )
			cExpDesc := Stuff( cExpDesc , nAt1 , Len( aFunction[ nLoop ] ) , "" )
			cVarAux	 := Upper( cExpDesc )
		End While
    Next nLoop
    cExpDesc := StrTran( cExpDesc , "!(" , "(" )

End Sequence

IF !( lSetCentury )
	__SetCentury( "off" )
EndIF

IF !( lStringOk )
	cExpDesc := cFiltro
EndIF

Return( cExpDesc )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁMyCalcField	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Conteudo Padrao                                     Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function MyCalcField( aHeaderField )
Return( GetValType( aHeaderField[ __AHEADER_TYPE__ ] , aHeaderField[ __AHEADER_WIDTH__ ] ) )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁMyBuildTxt    ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMonta a Expressao de Filtro                                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function MyBuildTxt(	cAlias			,;
							uExpFil			,;
							cExpFil			,;
							aHeader			,;
							nPosHeader		,;
							nOper	 		,;
							nMaxSize		;
						  )

Local aOper 	:= GetOper()[1]

Local lStringOk		:= .T.
DEFAULT nMaxSize	:= 2000
cTxtFil := ""

Begin Sequence

	IF !( lStringOk := MyBuildExp(	cAlias					,;
									uExpFil					,;
									@cExpFil				,;
									aHeader[ nPosHeader ]	,;
									aOper			 		,;
									nOper	 		 		,;
									nMaxSize				;
						  		 );
		)							  		 
		Break
	EndIF

	cTxtFil := GpFltBldDesc( cExpFil , aHeader , cAlias )

End Sequence

Return( cTxtFil )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁMyBuildExp    ЁAutorЁ Marinaldo de Jesus  Ё Data Ё03/09/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMonta a Expressao de Filtro                                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function MyBuildExp(	cAlias			,;
							uExpFil			,;
							cExpFil			,;
							aHeaderField	,;
							aOper			,;
							nOper	 		,;
						    nMaxSize		;
						  )

Local cSvExpFil		:= cExpFil
Local cType 		:= ValType( uExpFil )
Local cHelp			:= "String size overflow!"
Local cVarAux		:= ""

Local lExpFilOk		:= .T.
Local lCharOrDate   := .F.

Local nBytes    	:= Len( cExpFil )
Local cTamSpace   	:= Len(Space( GetSx3Cache( aHeaderField[__AHEADER_FIELD__], "X3_TAMANHO" ) )) 
Local cEspaco		:= 0
DEFAULT nMaxSize	:= 2000
Begin Sequence

	lCharOrDate 	:= ( ( aHeaderField[ __AHEADER_TYPE__ ] + cType ) $ "CD/DC" )
	lIsDate			:= ( aHeaderField[ __AHEADER_TYPE__ ] == "D" )
	IF ( ( cType <> "C" ) .or. ( ( cType == "C" ) .and. ( Len( uExpFil ) == aHeaderField[ __AHEADER_WIDTH__ ] ) ) )
 	 	If !( cType == "C" .And. "@R" $ aHeaderField[ __AHEADER_PICTURE__ ] )
	 	 	If !(cType == "N")
	 	 		uExpFil 	:= AllToChar( uExpFil , aHeaderField[ __AHEADER_PICTURE__ ] , lIsDate ) 
	 	 	Else
	 	 		uExpFil := Alltrim(Str(uExpFil))
	 	 	EndIf
 	 	EndIf
 	 	cEspaco		:= cTamSpace -= Len( uExpFil )         
 	ElseIf ( cType == "C" .And. "@R" $ aHeaderField[ __AHEADER_PICTURE__ ] )
 		uExpFil := StrTran(uExpFil, ".", "")
 		uExpFil := StrTran(uExpFil, ",", "")
 		uExpFil := StrTran(uExpFil, "-", "")
 	EndIF 

	IF ( aOper[nOper] == "!." )		//"N└o cont┌m"
		cVarAux		:= "!("
		cVarAux 	+=			'"'
		cVarAux		+=				uExpFil 						+ Space(cEspaco)
		cVarAux 	+=			'"'
		cVarAux 	+= 		" "
		cVarAux 	+=			"$"
		cVarAux 	+= 		" "
		IF ( lIsDate )
			cVarAux += 		"DTOS("
		EndIF
		cVarAux 	+=				( cAlias + "->" + aHeaderField[__AHEADER_FIELD__] )
		IF ( lIsDate )
			cVarAux += 		")"
		EndIF
		cVarAux 	+= ")"
		IF !( lExpFilOk := ( ( nBytes += Len( cVarAux ) ) <= 1048575 ) )
			//( 1048575 + 1 ) String size overflow!
			Break
		EndIF
		If IsInCallStack("GPEM020")
			cFterAux		:= "("
			cFterAux 	+=			'"'
			cFterAux		+=				uExpFil 						+ Space(cEspaco)
			cFterAux 	+=			'"'
			cFterAux 	+= 		" "
			cFterAux 	+=			"!$"
			cFterAux 	+= 		" "
			IF ( lIsDate )
				cFterAux += 		"DTOS("
			EndIF
			cFterAux 	+=				( cAlias + "->" + aHeaderField[__AHEADER_FIELD__] )
			IF ( lIsDate )
				cFterAux += 		")"
			EndIF
			cFterAux 	+= ")"			
		EndIf
		cExpFil		+= cVarAux
	ElseIF ( aOper[nOper] == "!x" )	//"N└o est═ contido em"
		cVarAux := "!("
		IF ( lIsDate )
			cVarAux += 		"DTOS("
		EndIF
		cVarAux 	+=				( cAlias + "->" + aHeaderField[__AHEADER_FIELD__] )
		IF ( lIsDate )
			cVarAux += 		")"
		EndIF
		cVarAux 	+= 		" "
		cVarAux 	+= 			"$"
		cVarAux 	+= 		" "
		cVarAux 	+= 			'"'
		cVarAux 	+= 				uExpFil + Space(cEspaco)
		cVarAux		+= 			'"'
		cVarAux		+= ")"
		IF !( lExpFilOk := ( ( nBytes += Len( cVarAux ) ) <= 1048575 ) )
			//( 1048575 + 1 ) String size overflow!
			Break
		EndIF
		If IsInCallStack("GPEM020")
			cFterAux := "("
			IF ( lIsDate )
				cFterAux += 		"DTOS("
			EndIF
			cFterAux 	+=				( cAlias + "->" + aHeaderField[__AHEADER_FIELD__] )
			IF ( lIsDate )
				cFterAux += 		")"
			EndIF
			cFterAux 	+= 		" "
			cFterAux 	+= 			"!$"
			cFterAux 	+= 		" "
			cFterAux 	+= 			'"'
			cFterAux 	+= 				uExpFil + Space(cEspaco)
			cFterAux		+= 			'"'
			cFterAux		+= ")"		
		EndIf
		cExpFil += cVarAux
	ElseIF ( aOper[nOper] == ".." )	//"Cont┌m a express└o"
		cVarAux := "("
		IF ( lIsDate )
			cVarAux += 		"DTOS("
		EndIF
		cVarAux 	+= 		( cAlias + "->" + aHeaderField[__AHEADER_FIELD__] )
		IF ( lIsDate )
			cVarAux	+= 		")"
		EndIF
		cVarAux 	+= 		" "
		cVarAux 	+= 			"$"
		cVarAux 	+= 		" "
		cVarAux 	+= 			'"'
		cVarAux 	+= 				uExpFil + Space(cEspaco)
		cVarAux 	+= 			'"'
		cVarAux 	+= ")"
		IF !( lExpFilOk := ( ( nBytes += Len( cVarAux ) ) <= 1048575 ) )
			//( 1048575 + 1 ) String size overflow!
			Break
		EndIF
		cExpFil += cVarAux
	Else
		cVarAux := "("
		IF ( lIsDate )
			cVarAux += 		"DTOS("
		EndIF
		cVarAux 	+= 		( cAlias + "->" + aHeaderField[__AHEADER_FIELD__] )
		IF ( lIsDate )
			cVarAux += 		")"
		EndIF
		cVarAux 	+= 		" "
		cVarAux 	+= 			aOper[nOper]
		cVarAux 	+= 		" "

		If cType <> "N"
			cVarAux 	+= '"' + uExpFil + Space(cEspaco) + '"'
		Else
			cVarAux 	+= uExpFil + Space(cEspaco)
		EndIf

		cVarAux 	+= ")"
		IF !( lExpFilOk := ( ( nBytes += Len( cVarAux ) ) <= 1048575 ) )
			//( 1048575 + 1 ) String size overflow!
			Break
		EndIF
		cExpFil += cVarAux
	EndIF

	If Len( cExpFil ) > nMaxSize   //Filter greater than 2000 bytes
		cHelp := "Filter greater than " + Alltrim(str(nMaxSize))+ " bytes"
		lExpFilOk := .F.
		Break
	EndIF

End Sequence

IF !( lExpFilOk )
	cExpFil	:= cSvExpFil
	Help( "" , 1 , "TOOCOMPLEX" , , OemToAnsi( cHelp ) , 1 , 0 )
EndIF

Return( lExpFilOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGetOper		  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё02/09/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Array com os Operadores                             Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetOper( lReal )

Local aOper
Local aOperTit
Local aOperRet

DEFAULT lReal := .F.
IF ( lReal )
	aOperRet := Array( 2 , 10 )
	aOperRet[ 01 , 01 ] := "==" ; aOperRet[ 02 , 01 ] := " " + OemToAnsi( STR0002 ) + " "	// "Igual a"
	aOperRet[ 01 , 02 ] := "!=" ; aOperRet[ 02 , 02 ] := " " + OemToAnsi( STR0003 ) + " "	// "Diferente de"
	aOperRet[ 01 , 03 ] := "<>" ; aOperRet[ 02 , 03 ] := " " + OemToAnsi( STR0003 ) + " "	// "Diferente de"
	aOperRet[ 01 , 04 ] := "#"  ; aOperRet[ 02 , 04 ] := " " + OemToAnsi( STR0003 ) + " "	// "Diferente de"
	aOperRet[ 01 , 05 ] := "<=" ; aOperRet[ 02 , 05 ] := " " + OemToAnsi( STR0005 ) + " "	// "Menor ou Igual a"
	aOperRet[ 01 , 06 ] := ">=" ; aOperRet[ 02 , 06 ] := " " + OemToAnsi( STR0007 ) + " "	// "Maior ou igual a"
	aOperRet[ 01 , 07 ] := "<"  ; aOperRet[ 02 , 07 ] := " " + OemToAnsi( STR0004 ) + " "	// "Menor que"
	aOperRet[ 01 , 08 ] := ">"  ; aOperRet[ 02 , 08 ] := " " + OemToAnsi( STR0006 ) + " "	// "Maior que"
	aOperRet[ 01 , 09 ] := "$"  ; aOperRet[ 02 , 09 ] := " " + OemToAnsi( STR0010 ) + " "	// "Est═ contido em"
	aOperRet[ 01 , 10 ] := "="  ; aOperRet[ 02 , 10 ] := " " + OemToAnsi( STR0002 ) + " "	// "Igual a"
Else
	aOper 		:= Array( 10 )
	aOperTit	:= Array( 10 )
	aOper[ 01 ] := "==" ; aOperTit[ 01 ] := OemToAnsi( STR0002 )	//"Igual a				"
	aOper[ 02 ] := "!=" ; aOperTit[ 02 ] := OemToAnsi( STR0003 )	//"DIferente de			"
	aOper[ 03 ] := "<=" ; aOperTit[ 03 ] := OemToAnsi( STR0005 )	//"Menor ou igual a		"
	aOper[ 04 ] := ">=" ; aOperTit[ 04 ] := OemToAnsi( STR0007 )	//"Maior ou igual a		"
	aOper[ 05 ] := "<"  ; aOperTit[ 05 ] := OemToAnsi( STR0004 )	//"Menor que			"
	aOper[ 06 ] := ">"  ; aOperTit[ 06 ] := OemToAnsi( STR0006 )	//"Maior que			"
	aOper[ 07 ] := ".." ; aOperTit[ 07 ] := OemToAnsi( STR0008 )	//"Cont┌m a express└o	"
	aOper[ 08 ] := "!." ; aOperTit[ 08 ] := OemToAnsi( STR0009 )   	//"N└o cont┌m			"
	aOper[ 09 ] := "$"	; aOperTit[ 09 ] := OemToAnsi( STR0010 )	//"Est═ contido em		"
	aOper[ 10 ] := "!x" ; aOperTit[ 10 ] := OemToAnsi( STR0011 )	//"N└o est═ contido em	"
	aOperRet := Array( 2 )
	aOperRet[1] := aOper
	aOperRet[2] := aOperTit
EndIF

Return( aOperRet )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGetConcat	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё25/10/2004Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Array com os Concatenadores						    Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetConcat()
Return(;
			{;
				{	".AND."	, OemToAnsi( STR0021 )	},;	//"  e  "
				{	".OR."	, OemToAnsi( STR0022 )	},;	//"  ou  "
				{	".and."	, OemToAnsi( STR0021 )	},;	//"  e  "
				{	".or."	, OemToAnsi( STR0022 )	} ;	//"  ou  "
			};
		)	

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁFilterExp	  ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁMonta a Expressao de Filtro                                 Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function MyFilterExp( cTxtFil , cExpFil , cAlias ,nMaxSize)

Local aSvKeys	:= GetKeys()

Local bOk		:= { || IF( GpVldFilter( @cExpr , cAlias ,nMaxSize) , ( lProcess := .T. , GetKeys() , oDlg:End() ) , .F. ) }
Local bCancel	:= { || GetKeys() , oDlg:End() }

Local cExpr		:= ""

Local lProcess	:= .F.

Local oDlg
Local oBtn

DEFAULT nMaxSize := 0

DEFINE MSDIALOG oDlg TITLE OemToAnsi( STR0001 ) FROM 0,0 TO 255,500 OF GetWndDefault() STYLE DS_MODALFRAME STATUS PIXEL	//"Express└o de Filtro"

	@ 005,005 GET oExpr VAR cExpr MEMO SIZE 245,100 HSCROLL CENTERED DESIGN NO VSCROLL OF oDlg PIXEL 
	@ 110,002.5 BUTTON oBtn PROMPT OemToAnsi(STR0016) SIZE 045,013 OF oDlg PIXEL ACTION Eval( bOk )		// "&Adiciona"
	@ 110,049.5 BUTTON oBtn PROMPT OemToAnsi(STR0023) SIZE 045,013 OF oDlg PIXEL ACTION Eval( bCancel )	// "&Cancela"
	oDlg:lEscClose := .F. //Nao permite sair ao se pressionar a tecla ESC.

ACTIVATE MSDIALOG oDlg CENTERED
RestKeys( aSvKeys , .T. )

IF ( lProcess )
	lProcess := CheckExecForm( { || cTxtFil += AllTrim( cExpr ) } )
	IF ( lProcess )
		lProcess := CheckExecForm( { || cExpFil += AllTrim( cExpr ) } )
		// Retorno correto para o Enable/Disable dos botoes.
		IF ( lProcess )
			lProcess := !Empty( cExpr )
		EndIF	
	EndIF	
EndIF

Return( lProcess )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGpVldFilter   ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁValidar a Expressao de Filtro                               Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GpVldFilter( uExpFil , cAlias ,nMaxCpo)

Local lFilterOk  := .T.

Local cAlsExp
Local nAt
Local nMaxSize
DEFAULT nMaxCpo 	:= 0

Begin Sequence
    
	#IFDEF TOP
		If nMaxCpo > 0
			nMaxSize := nMaxCpo
		Else
			nMaxSize := 2000		//Filter greater than 2000 bytes
		EndIf
	#ELSE
		nMaxSize := 1048575		//( 1048575 + 1 ) String size overflow!
	#ENDIF

	If !ValidRot( ReadVar() , @uExpFil , nMaxSize )
		lFilterOk  := .F.
		Break
	EndIf
	
	IF !( lFilterOk  := CheckExecForm( uExpFil , .T. ) )
		Break
	EndIF

	IF Empty( cAlias )
		Break
	EndIF

	IF ( ( nAt := At( "->" , uExpFil ) ) > 0 )
		cAlsExp := SubStr( uExpFil , nAt - 3 , 3 ) 
		uExpFil	:= StrTran( uExpFil , cAlsExp+"->" , cAlias+"->" )
		IF !( lFilterOk  := CheckExecForm( uExpFil , .T. ) )
			Break
		EndIF
	EndIF
	
	lFilterOk := VldSintaxe(uExpFil)
	
End Sequence

Return( lFilterOk )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁRetCposSX3    ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna Campos conforme Alias                               Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais>									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGpFiltro      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Static Function RetCposSX3( cAlias )

Local aHeader
Local aTitles
Local adbStruct

Local nField
Local nFields
Local nPos	:= 0

If Len(aSx3Struct) > 0 .And. ((nPos := aScan(aSx3Struct,{|x| x[1]==cAlias})) > 0)
	aHeader := aSx3Struct[nPos][2]
	aTitles := aSx3Struct[nPos][3]
Else
	aHeader := GdMontaHeader(NIL,NIL,NIL,cAlias,NIL,.T.,.T.,.F.,.F.,.F.,.F.,.F.)
	IF Empty( aHeader )
		adbStruct := ( cAlias )->( dbStruct() )	
		aHeader	  := {}
		nFields	  := Len( adbStruct )
		For nField := 1 To nFields
			aAdd( aHeader , Array( __ELEMENTOS_AHEADER__ ) )
			aHeader[ nField , __AHEADER_TITLE__		]	:= adbStruct[ nField , DBS_NAME ]
			aHeader[ nField , __AHEADER_FIELD__		]	:= adbStruct[ nField , DBS_NAME ]
			aHeader[ nField , __AHEADER_PICTURE__	]	:= ""
			aHeader[ nField , __AHEADER_WIDTH__		]	:= adbStruct[ nField , DBS_LEN	]
			aHeader[ nField , __AHEADER_DEC__		]	:= adbStruct[ nField , DBS_DEC 	]
			aHeader[ nField , __AHEADER_VALID__		]	:= ""
			aHeader[ nField , __AHEADER_USE__		]	:= Chr(251)
			aHeader[ nField , __AHEADER_TYPE__		]	:= adbStruct[ nField , DBS_TYPE	]
			aHeader[ nField , __AHEADER_F3__		]	:= ""
			aHeader[ nField , __AHEADER_CONTEXT__	]	:= ""
			aHeader[ nField , __AHEADER_CBOX__		]	:= ""
			aHeader[ nField , __AHEADER_INITPAD__	]	:= ""
			aHeader[ nField , __AHEADER_WHEN__		]	:= ""
			aHeader[ nField , __AHEADER_VISUAL__	]	:= "V"
			aHeader[ nField , __AHEADER_VLDUSR__	]	:= ""
			aHeader[ nField , __AHEADER_RESERV16__	]	:= ""
			aHeader[ nField , __AHEADER_RESERV17__	]	:= .F.
		Next nField
	EndIF
	
	aTitles := {}
	nFields := Len( aHeader )
	For nField := 1 To nFields
		aAdd( aTitles , aHeader[ nField , __AHEADER_TITLE__ ] )
	Next nFields
	aadd(aSx3Struct,{cAlias,aHeader,aTitles})
EndIf
Return( { aHeader , aTitles } )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁPutFilterFile ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁSalva o Filtro em Arquivo                                   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function PutFilterFile(	cCodigo		,;
						cDescri 	,;
						cFiltro 	,;
						cUsr		,;
						cAlias		,;
						cFunName	,;
						cGrp		,;
						cFiltroCHK   ;
					  )

Local cKeyFilter	:= ""
Local cAliasFilter	:= ""
Local cPrefix		:= "FILTRO_"

Local lAppend		:= .F.
Local lTemRE7 		:= AliasInDic("RE7")

DEFAULT cCodigo 	:= "_UNDEFINED"
DEFAULT cDescri 	:= "_UNDEFINED"
DEFAULT cFiltro 	:= ""
DEFAULT cUsr		:= ""
DEFAULT cAlias		:= ""
DEFAULT cFunName	:= ""
DEFAULT cFiltroCHK	:= "1"

If lTemRE7
	cAliasFilter	:= "RE7"
	cPrefix			:= "RE7_"
EndIf

Begin Sequence

	IF ( !OpenFileFilter( @cAliasFilter ) )
		Break
	EndIF

	( cAliasFilter )->( dbSetOrder( RetOrdFileFilter( "CRIT_SEL0" ) ) )

	cCodigo		:= Padr( cCodigo  , Len( ( cAliasFilter )->( &(cPrefix+"COD") ) ) )
	cUsr		:= Padr( cUsr	  , Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
	cGrp		:= Padr( cGrp	  , Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )
	cAlias		:= Padr( cAlias   , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) )
	cFunName	:= Padr( cFunName , Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )

	cKeyFilter	:= ( cCodigo )

	lAppend := !( ( cAliasFilter )->( MsSeek( cKeyFilter , .F. ) ) )
	IF ( cAliasFilter )->( RecLock( cAliasFilter , lAppend , .F. ) )
		( cAliasFilter )->( &(cPrefix+"CHK") ) := cFiltroCHK
		( cAliasFilter )->( &(cPrefix+"COD") ) := cCodigo
		( cAliasFilter )->( &(cPrefix+"USR") ) := cUsr
		( cAliasFilter )->( &(cPrefix+"GRP") ) := cGrp
		( cAliasFilter )->( &(cPrefix+"ALS") ) := cAlias
		( cAliasFilter )->( &(cPrefix+"PRG") ) := cFunName
		( cAliasFilter )->( &(cPrefix+"DES") ) := cDescri
		( cAliasFilter )->( &(cPrefix+"EXP") ) := AllTrim( cFiltro )
		( cAliasFilter )->( MsUnLock() )
	EndIF

End Sequence

Return( NIL )

/*/
зддддддддддбддддддддддддддбдддддбдддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁGetFilterFile ЁAutorЁ Marinaldo de Jesus  Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддадддддадддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna o Filtro salvo em Arquivo                           Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function GetFilterFile( cCodigo , cDescri , cFiltro , cUsr , cAlias , cFunName , cGrp )

Local cExpFilter	:= ""
Local cAliasFilter	:= ""
Local cKeyFilter	:= ""
Local cPrefix		:= "FILTRO_"

Local lTemRE7 		:= AliasInDic("RE7")

DEFAULT cCodigo 	:= "_UNDEFINED"
DEFAULT cDescri 	:= "_UNDEFINED"
DEFAULT cFiltro 	:= ""
DEFAULT cUsr		:= ""
DEFAULT cAlias		:= ""
DEFAULT cFunName	:= ""
DEFAULT cGrp		:= ""  

If lTemRE7
	cPrefix			:= "RE7_"
EndIf

Begin Sequence

	IF !OpenFileFilter( @cAliasFilter )
		Break
	EndIF

	( cAliasFilter )->( dbSetOrder( RetOrdFileFilter( "CRIT_SEL0" ) ) )

	cCodigo		:= Padr( cCodigo  , Len( ( cAliasFilter )->( &(cPrefix+"COD") ) ) )
	cUsr		:= Padr( cUsr	  , Len( ( cAliasFilter )->( &(cPrefix+"USR") ) ) )
	cGrp		:= Padr( cGrp	  , Len( ( cAliasFilter )->( &(cPrefix+"GRP") ) ) )
	cAlias		:= Padr( cAlias   , Len( ( cAliasFilter )->( &(cPrefix+"ALS") ) ) )
	cFunName	:= Padr( cFunName , Len( ( cAliasFilter )->( &(cPrefix+"PRG") ) ) )
    
	cKeyFilter	:= ( cCodigo +  cAlias + cFunName + cUser + cGrp )
	
	IF ( cAliasFilter )->( MsSeek( cKeyFilter , .F. ) )
		cDescri		:= ( cAliasFilter )->( &(cPrefix+"DES") )
		cUser		:= ( cAliasFilter )->( &(cPrefix+"USR") )
		cGrp		:= ( cAliasFilter )->( &(cPrefix+"GRP") )
		cAlias		:= ( cAliasFilter )->( &(cPrefix+"ALS") )
		cFunName	:= ( cAliasFilter )->( &(cPrefix+"PRG") )
		cExpFilter	:= ( cAliasFilter )->( AllTrim( &(cPrefix+"EXP") ) )
	EndIF

End Sequence

Return( cExpFilter )

/*/
зддддддддддбдддддддддддддддбдддддбддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁBuildFileFilterЁAutorЁ Marinaldo de Jesus Ё Data Ё06/01/2003Ё
цддддддддддедддддддддддддддадддддаддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁCria o Arquivo de Filtros                                   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function BuildFileFilter( cFileFilter , cRdd )

Local aFields	:= Array( 8 , 4 )

DEFAULT cFileFilter	:= "USRCRITSEL"
DEFAULT cRdd 		:= "TOPCONN"

aFields[ 01 , 01 ] := "FILTRO_CHK"
aFields[ 01 , 02 ] := "C"
aFields[ 01 , 03 ] := 1
aFields[ 01 , 04 ] := 0

aFields[ 02 , 01 ] := "FILTRO_COD"
aFields[ 02 , 02 ] := "C"
aFields[ 02 , 03 ] := 10
aFields[ 02 , 04 ] := 0

aFields[ 03 , 01 ] := "FILTRO_DES"
aFields[ 03 , 02 ] := "C"
aFields[ 03 , 03 ] := 60
aFields[ 03 , 04 ] := 0

aFields[ 04 , 01 ] := "FILTRO_ALS"
aFields[ 04 , 02 ] := "C"
aFields[ 04 , 03 ] := 10
aFields[ 04 , 04 ] := 0

aFields[ 05 , 01 ] := "FILTRO_PRG"
aFields[ 05 , 02 ] := "C"
aFields[ 05 , 03 ] := 10
aFields[ 05 , 04 ] := 0

aFields[ 06 , 01 ] := "FILTRO_USR"
aFields[ 06 , 02 ] := "C"
aFields[ 06 , 03 ] := 06
aFields[ 06 , 04 ] := 0

aFields[ 07 , 01 ] := "FILTRO_GRP"
aFields[ 07 , 02 ] := "C"
aFields[ 07 , 03 ] := 06
aFields[ 07 , 04 ] := 0

aFields[ 08 , 01 ] := "FILTRO_EXP"
aFields[ 08 , 02 ] := "M"
aFields[ 08 , 03 ] := 10
aFields[ 08 , 04 ] := 0

Return( MsCreate( cFileFilter , aFields , cRdd ) )

/*/
зддддддддддбдддддддддддддддбдддддбддддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁOpenFileFilter ЁAutorЁ Marinaldo de Jesus Ё Data Ё06/01/2003Ё
цддддддддддедддддддддддддддадддддаддддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁAbre o Arquivo de Filtros                                   Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function OpenFileFilter( cAliasFilter , aOrdensFilter , lClose )

Local aArea			:= GetArea()
Local cFileFilter 	:= "USRCRITSEL"
Local cIndexFilter	:= "CDXCRITSEL"
Local cRdd			:= "TOPCONN"
Local cAuxAlias		:= "CRITSELAUX"
Local cPrefix		:= "FILTRO_"

Local lMigraSQL		:= .F.
Local lOpened		:= .T.
Local lTemRE7 		:= AliasInDic("RE7")

Local nOrdem		:= 0
Local nOrdens		:= 0

DEFAULT lClose		:= .F.

cAliasFilter 	:= "USRCRITSEL"
aOrdensFilter	:= {}
           
Begin Sequence

	If !lTemRE7
		IF ( Select( cAliasFilter ) > 0 )
			IF ( lClose )
				( cAliasFilter )->( dbCloseArea() )
			EndIF
			Break
		ElseIF !( lOpened := !( lClose ) )
			Break
		EndIF

		IF !TCCanOpen(cFileFilter)
			IF !( lOpened := BuildFileFilter( cFileFilter , cRdd ) )
				Break
			EndIF
		EndIF
		
		IF !( lOpened := MsOpenDbf( .T. , cRdd , cFileFilter , cAliasFilter , .T. , .F. ) )
			Break
		EndIF

		RetOrdFileFilter( NIL , @aOrdensFilter )
		nOrdens := Len( aOrdensFilter )

		IF !TCCanOpen( cIndexFilter )
			For nOrdem := 1 To nOrdens
				if !TCCanOpen(cFileFilter ,aOrdensFilter[ nOrdem , 01 ])
					( cAliasFilter )->( OrdCreate( aOrdensFilter[ nOrdem , 01 ] , aOrdensFilter[ nOrdem , 01 ] , aOrdensFilter[ nOrdem , 02 ] , aOrdensFilter[ nOrdem , 03 ] , IF( .F. , .T. , NIL ) ) )
				endIf
			Next nOrdem
		EndIF

		( cAliasFilter )->( dbClearIndex() )
		For nOrdem := 1 To nOrdens
			( cAliasFilter )->( OrdListAdd( aOrdensFilter[ nOrdem , 01 ] , aOrdensFilter[ nOrdem , 01 ] ) )
		Next nOrdem

		( cAliasFilter )->( dbSetOrder( RetOrdFileFilter( "CRIT_SEL0" ) ) )
	Else
		IF lClose
			RE7->( dbCloseArea() )
			Break
		EndIF		
		cAliasFilter	:= "RE7"
		cPrefix			:= "RE7_"
		If TCCanOpen(cFileFilter)
			lMigraSQL	:= .T.
			cAuxAlias	:= "USRCRITSEL"
			IF !( lOpened := MsOpenDbf( .T. , cRdd , cAuxAlias , cAuxAlias , .T. , .F. ) )
				Break
			EndIF
		EndIf
	EndIf

	//Tratamento para transferir filtros salvos antigamente em arquivo fМsico para tabela do TOP
	IF lMigraSQL .Or. File( "\PROFILE\CRIT_SEL.USR" )
		If lMigraSQL .Or. ( MsOpenDbf( .T. , "CTREECDX", "\PROFILE\CRIT_SEL.USR", cAuxAlias , .T., .F. ) )
			(cAuxAlias)->(DbGoTop())
			While !(cAuxAlias)->(Eof())
				RecLock(cAliasFilter, .T.)
					(cAliasFilter)->( &(cPrefix+"CHK") ) := (cAuxAlias)->(FILTRO_CHK)
					(cAliasFilter)->( &(cPrefix+"COD") ) := (cAuxAlias)->(FILTRO_COD)
					(cAliasFilter)->( &(cPrefix+"DES") ) := (cAuxAlias)->(FILTRO_DES)
					(cAliasFilter)->( &(cPrefix+"ALS") ) := (cAuxAlias)->(FILTRO_ALS)
					(cAliasFilter)->( &(cPrefix+"PRG") ) := (cAuxAlias)->(FILTRO_PRG)
					(cAliasFilter)->( &(cPrefix+"USR") ) := (cAuxAlias)->(FILTRO_USR)
					(cAliasFilter)->( &(cPrefix+"GRP") ) := (cAuxAlias)->(FILTRO_GRP)
					(cAliasFilter)->( &(cPrefix+"EXP") ) := (cAuxAlias)->(FILTRO_EXP)
				MsUnLock()
				(cAuxAlias)->(DbSkip())
			End While

			( cAuxAlias )->( dbCloseArea() )

			If !lMigraSQL
				If ( FErase( "\PROFILE\CRIT_SEL.USR" ) == -1 )
					MsgInfo( STR0095 + "\PROFILE\CRIT_SEL.USR" ) //##Erro ao apagar arquivo \PROFILE\CRIT_SEL.USR
				Else
					FErase( "\PROFILE\CRIT_SEL.CDX" )
				Endif
			Else
				TCSQLExec("DROP TABLE USRCRITSEL")
			EndIf			
		Endif
	Endif

End Sequence

RestArea( aArea )

Return( lOpened )

/*/
зддддддддддбддддддддддддддддбдддддбдддддддддддддддддддбддддддбдддддддддд©
ЁFun┤┘o	   ЁRetOrdFileFilterЁAutorЁMarinaldo de Jesus Ё Data Ё06/01/2003Ё
цддддддддддеддддддддддддддддадддддадддддддддддддддддддаддддддадддддддддд╢
ЁDescri┤┘o ЁRetorna a Ordem do Arquivo de Filtros                       Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁSintaxe   Ё<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁParametrosЁ<Vide Parametros Formais> 									Ё
цддддддддддедддддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╢
ЁUso	   ЁGenerico      												Ё
юддддддддддадддддддддддддддддддддддддддддддддддддддддддддддддддддддддддды/*/
Function RetOrdFileFilter( cOrdemFilter , aOrdensFilter )
         
Local nOrdemFileFilter := 1

DEFAULT cOrdemFilter := "CRIT_SEL0"

aOrdensFilter := Array( 06 , 04 )

aOrdensFilter[ 01 , 01 ]	:= "CRIT_SEL0"
aOrdensFilter[ 01 , 02 ]	:= "FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_USR+FILTRO_GRP+FILTRO_DES"
aOrdensFilter[ 01 , 03 ]	:= { || FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_USR+FILTRO_GRP+FILTRO_DES }
aOrdensFilter[ 01 , 04 ]	:= OemToAnsi( STR0043 )	//"C╒digo + Alias + Programa + Usu═rio + Grupo + Descri┤└o"

aOrdensFilter[ 02 , 01 ]	:= "CRIT_SEL1"
aOrdensFilter[ 02 , 02 ]	:= "FILTRO_DES+FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_USR+FILTRO_GRP"
aOrdensFilter[ 02 , 03 ]	:= { || FILTRO_DES+FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_USR+FILTRO_GRP }
aOrdensFilter[ 02 , 04 ]	:= OemToAnsi( STR0044 )	//"Descri┤└o + C╒digo + Alias + Programa + Usu═rio + Grupo"

aOrdensFilter[ 03 , 01 ]	:= "CRIT_SEL2"
aOrdensFilter[ 03 , 02 ]	:= "FILTRO_USR+FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_GRP+FILTRO_DES"
aOrdensFilter[ 03 , 03 ]	:= { || FILTRO_USR+FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_GRP+FILTRO_DES }
aOrdensFilter[ 03 , 04 ]	:= OemToAnsi( STR0045 )	//"Usu═rio + C╒digo + Alias + Programa + Grupo + Descri┤└o"

aOrdensFilter[ 04 , 01 ]	:= "CRIT_SEL3"
aOrdensFilter[ 04 , 02 ]	:= "FILTRO_ALS+FILTRO_PRG+FILTRO_COD+FILTRO_USR+FILTRO_GRP+FILTRO_DES"
aOrdensFilter[ 04 , 03 ]	:= { || FILTRO_ALS+FILTRO_PRG+FILTRO_COD+FILTRO_USR+FILTRO_GRP+FILTRO_DES }
aOrdensFilter[ 04 , 04 ]	:= OemToAnsi( STR0046 )	//"Alias + Programa + C╒digo + Usu═rio + Grupo + Descri┤└o"

aOrdensFilter[ 05 , 01 ]	:= "CRIT_SEL4"
aOrdensFilter[ 05 , 02 ]	:= "FILTRO_PRG+FILTRO_ALS+FILTRO_COD+FILTRO_USR+FILTRO_GRP+FILTRO_DES"
aOrdensFilter[ 05 , 03 ]	:= { || FILTRO_PRG+FILTRO_ALS+FILTRO_COD+FILTRO_USR+FILTRO_GRP+FILTRO_DES }
aOrdensFilter[ 05 , 04 ]	:= OemToAnsi( STR0047 )	//"Programa + Alias + C╒digo + Usu═rio + Grupo + Descri┤└o"

aOrdensFilter[ 06 , 01 ]	:= "CRIT_SEL5"
aOrdensFilter[ 06 , 02 ]	:= "FILTRO_GRP+FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_USR+FILTRO_DES"
aOrdensFilter[ 06 , 03 ]	:= { || FILTRO_GRP+FILTRO_COD+FILTRO_ALS+FILTRO_PRG+FILTRO_USR+FILTRO_DES }
aOrdensFilter[ 06 , 04 ]	:= OemToAnsi( STR0061 )	//"Grupo + C╒digo + Alias + Programa + Usu═rio + Descri┤└o"

cOrdemFilter		:= Upper( AllTrim( cOrdemFilter ) )
nOrdemFileFilter	:= aScan( aOrdensFilter , { |x| Upper( AllTrim( x[1] ) ) == cOrdemFilter } )

nOrdemFileFilter	:= Max( 01 , nOrdemFileFilter )

Return( nOrdemFileFilter )

/*/{Protheus.doc} VldSintaxe
Valida a sintaxe da expressЦo de filtro informada
@type  Static Function
@author CМcero Alves
@since 16/12/2019
@param cExpr, Caractere, ExpressЦo de filtro informada
@return lRet, LСgico, Indica se a sintaxe estА correta
/*/
Static Function VldSintaxe(cExpr)
	
	Local lRet := .T.
	Local lAchou := .F.
	Local aExpr := {}
	Local aExprAux := {}
	Local nI, nJ, nk
	Local aOperadores := GetOper()[1]
	
	Aadd(aOperadores, "#")
	Aadd(aOperadores, "<>")
	
	Default cExpr := ""
	
	If ! Empty(cExpr)
		cExpr := Strtran(cExpr, "->", " ")
		
		aExpr := StrTokArr2( Upper(cExpr), ".AND." )
		
		For nI := 1 To Len(aExpr)
			aExprAux := StrTokArr2( aExpr[nI], ".OR." )
			For nJ := 1 To Len(aExprAux)
				For nK := 1 To Len(aOperadores)
					If aOperadores[nK] $ aExprAux[nJ]
						lAchou := .T.
						Exit
					EndIf
				Next
				If ! lAchou 
					MsgAlert( STR0096 + CRLF + ; // "Todas as clАusulas das expressУes de filtro devem seguir o padrЦo:"
						STR0097 + CRLF + ; // "[Operando] [Operador Relacional] [Operando]. unidas por um Operador lСgico."
						STR0098 ) // "Exemplo: SRA->RA_FILIAL == '0101' .And. SRA->RA_MAT >= '900000' "
					Return .F.
				EndIf
				lAchou := .F.
			Next
		Next
	EndIf
	
Return lRet
