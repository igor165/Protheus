#INCLUDE "TOTVS.CH"
#INCLUDE "FWMVCDEF.CH"

//------------------------------------------------------------
/*/{Protheus.doc} PLSABF8V
Tabela de Honorarios

@author    Lucas Nonato
@version   V12
@since     23/03/2020
/*/
function PLSABF8V() 
local oBF8 		:= FWmBrowse():New()
private __tpProc	:= ""
private lAuto		:= .f.

oBF8:setProfileID('0')
oBF8:setAlias('BF8') 
oBF8:setDescription('Selecione a Tabela de Honorarios')
oBF8:setMenuDef('PLSABF8V')
oBF8:disableDetails()  
oBF8:forceQuitButton()
oBF8:setFilterDefault("BF8_FILIAL = '" + xFilial('BF8') + "' ")
oBF8:Activate()
                                           
return NIL

/*/{Protheus.doc} MenuDef
MenuDef

@author Alexander Santos
@since 11/02/2014
@version P11
/*/

static function MenuDef()
local aRotina	:= {}              

//O Selecionar foi alterado para que mais de um usuário possa acessar a mesma TDE Simultaneamente. 
Add Option aRotina Title "Selecionar" Action 'PLSABA8V' Operation 2 Access 0

aadd( aRotina, { "Visualizar"	,	"VIEWDEF.PLSABF8V" , 0, MODEL_OPERATION_VIEW	} )
aadd( aRotina, { "Excluir"		, 	"VIEWDEF.PLSABF8V" , 0, MODEL_OPERATION_DELETE	} )
aadd( aRotina, { "Incluir"		, 	"VIEWDEF.PLSABF8V" , 0, MODEL_OPERATION_INSERT	} )
aadd( aRotina, { "Alterar"		,	"VIEWDEF.PLSABF8V" , 0, MODEL_OPERATION_UPDATE	} )

return aRotina

/*/{Protheus.doc} ViewDef
ViewDef

@author Alexander Santos
@since 11/02/2014
@version P11
/*/
static function ViewDef()
local oModel 	:= FWLoadModel('PLSABF8V')
local oStrCab 	:= FWFormStruct(2, 'BF8')
local oStrBW4 := FWFormStruct(2, 'BW4', 	{ |cCampo| PLSABF8FT(cCampo, 'BW4' ) })
local oStrBKF := FWFormStruct(2, 'BKF', 	{ |cCampo| PLSABF8FT(cCampo, 'BKF' ) })
local oStrBP1 := FWFormStruct(2, 'BP1', 	{ |cCampo| PLSABF8FT(cCampo, 'BP1' ) })
local oView  := FWFormView():New()

oView:EnableControlBar(.T.)
oView:SetModel(oModel)

oView:AddField('ViewCab' , oStrCab,'MasterCab' ) 
oView:AddGrid( 'ViewBW4' , oStrBW4,'BW4Detail' )
oView:AddGrid( 'ViewBKF' , oStrBKF,'BKFDetail' )
oView:AddGrid( 'ViewBP1' , oStrBP1,'BP1Detail' )  

oView:SetViewProperty("ViewBW4","ENABLENEWGRID")
oView:SetViewProperty("ViewBW4","GRIDFILTER",{.T.})
oView:SetViewProperty("ViewBW4","GRIDSEEK",{.T.})

oView:SetViewProperty("ViewBKF","ENABLENEWGRID")
oView:SetViewProperty("ViewBKF","GRIDFILTER",{.T.})
oView:SetViewProperty("ViewBKF","GRIDSEEK",{.T.})

oView:SetViewProperty("ViewBP1","ENABLENEWGRID")
oView:SetViewProperty("ViewBP1","GRIDFILTER",{.T.})
oView:SetViewProperty("ViewBP1","GRIDSEEK",{.T.})

oView:CreateHorizontalBox( 'CABECALHO'  , 40 )
oView:CreateHorizontalBox( 'ITENS'      , 60 )

oView:CreateFolder( 'PASTA' ,'ITENS' )
oView:AddSheet( 'PASTA'    , 'SHTBW4'    , "Portes" )
oView:AddSheet( 'PASTA'    , 'SHTBKF'    , "Porte Anestésico" )
oView:AddSheet( 'PASTA'    , 'SHTBP1'    , "Auxiliares" )

oView:CreateVerticalBox( 'BOXBW4', 100,,, 'PASTA', 'SHTBW4' )
oView:CreateVerticalBox( 'BOXBKF', 100,,, 'PASTA', 'SHTBKF' )
oView:CreateVerticalBox( 'BOXBP1', 100,,, 'PASTA', 'SHTBP1' )

oView:SetOwnerView('MasterCab','CABECALHO')
oView:SetOwnerView('ViewBW4','BOXBW4')
oView:SetOwnerView('ViewBKF','BOXBKF')
oView:SetOwnerView('ViewBP1','BOXBP1')

//oView:SetAfterViewActivate({|oView| setFilter(oView) })

return oView

/*/{Protheus.doc} ModelDef
ModelDef

@author Alexander Santos
@since 11/02/2014
@version P11
/*/
static function ModelDef()
local oModel	:= MPFormModel():New('PLSABF8V',/*bPreValidacao*/,{|oModel| PLSABF8POS(oModel)},{|oModel| PLSABF8CMT(oModel) })  
local oStrCab := FWFormStruct(1, 'BF8' )
local oStrBW4 := FWFormStruct(1, 'BW4' 	)
local oStrBKF := FWFormStruct(1, 'BKF' 	)
local oStrBP1 := FWFormStruct(1, 'BP1' 	)

oModel:addFields('MasterCab',/*cOwner*/, oStrCab)
oModel:AddGrid('BW4Detail', 'MasterCab', oStrBW4 ,,{ |oStrBW4| vldGrid("BW4",'BW4Detail',.t.) })
oModel:AddGrid('BKFDetail', 'MasterCab', oStrBKF ,,{ |oStrBKF| vldGrid("BKF",'BKFDetail',.t.) })
oModel:AddGrid('BP1Detail', 'MasterCab', oStrBP1 ,,{ |oStrBP1| vldAux('BP1Detail')     })

oModel:GetModel( 'BW4Detail' ):SetOptional( .t. )
oModel:GetModel( 'BKFDetail' ):SetOptional( .t. )
oModel:GetModel( 'BP1Detail' ):SetOptional( .t. )

oStrBW4:setProperty( "BW4_CODTAB" , MODEL_FIELD_INIT , 	{ || M->BF8_CODIGO })
oStrBKF:setProperty( "BKF_CODTAB" , MODEL_FIELD_INIT , 	{ || M->BF8_CODIGO })
oStrBP1:setProperty( "BP1_CODTAB" , MODEL_FIELD_INIT , 	{ || M->BF8_CODIGO })

oStrBW4:setProperty( "BW4_FILIAL" , MODEL_FIELD_INIT , 	{ || xfilial("BW4") })
oStrBKF:setProperty( "BKF_FILIAL" , MODEL_FIELD_INIT , 	{ || xfilial("BKF") })
oStrBP1:setProperty( "BP1_FILIAL" , MODEL_FIELD_INIT , 	{ || xfilial("BP1") })

oStrBW4:setProperty( "BW4_DESTAB" , MODEL_FIELD_OBRIGAT , 	.f. )
oStrBW4:setProperty( "BW4_PORTE"  , MODEL_FIELD_OBRIGAT , 	.t. )
oStrBW4:setProperty( "BW4_VLRREA" , MODEL_FIELD_OBRIGAT , 	.t. )
oStrBW4:setProperty( "BW4_VIGINI" , MODEL_FIELD_OBRIGAT , 	.t. )

oStrBP1:setProperty( "BP1_DESTAB" , MODEL_FIELD_OBRIGAT , 	.f. )
oStrBP1:setProperty( "BP1_NUMAUX" , MODEL_FIELD_OBRIGAT , 	.t. )
oStrBP1:setProperty( "BP1_PERCAX" , MODEL_FIELD_OBRIGAT , 	.t. )
oStrBP1:setProperty( "BP1_CODFUN" , MODEL_FIELD_OBRIGAT , 	.t. )

oStrBKF:setProperty( "BKF_DESTAB" , MODEL_FIELD_OBRIGAT , 	.f. )
oStrBKF:setProperty( "BKF_SEQPOR" , MODEL_FIELD_OBRIGAT , 	.t. )
oStrBKF:setProperty( "BKF_VIGINI" , MODEL_FIELD_OBRIGAT , 	.t. )

oStrBP1:setProperty( "BP1_NUMAUX" , MODEL_FIELD_WHEN , 	{ || .T. } )

oStrBKF:setProperty( "BKF_VLRREA" , MODEL_FIELD_WHEN , 	{ || oModel:GetValue('BKFDetail', "BKF_COEFIC") == 0 } )
oStrBKF:setProperty( "BKF_COEFIC" , MODEL_FIELD_WHEN , 	{ || oModel:GetValue('BKFDetail', "BKF_VLRREA") == 0 } )

oStrBW4:setProperty( "*" , MODEL_FIELD_VALID , 	{ || .T. } )
oStrBKF:setProperty( "*" , MODEL_FIELD_VALID , 	{ || .T. } )
oStrBP1:setProperty( "*" , MODEL_FIELD_VALID , 	{ || .T. } )
							
oModel:SetRelation( 'BW4Detail', { 	{ 	'BW4_FILIAL', "xfilial('BW4')"},;
									{ 	'BW4_CODOPE', 'BF8_CODINT' 	},;
									{ 	'BW4_CODTAB', 'BF8_CODIGO'  }},;
										BW4->( IndexKey( 1 ) ))

oModel:SetRelation( 'BKFDetail', { 	{ 	'BKF_FILIAL', "xfilial('BKF')"},;
									{ 	'BKF_CODINT', 'BF8_CODINT' 	},;
									{ 	'BKF_CODTAB', 'BF8_CODIGO'  }},;  
										BKF->( IndexKey( 1 ) ))

oModel:SetRelation( 'BP1Detail', { 	{ 	'BP1_FILIAL', "xfilial('BP1')"},;
									{ 	'BP1_CODINT', 'BF8_CODINT' 	},;
									{ 	'BP1_CODTAB', 'BF8_CODIGO'  }},;  
										BP1->( IndexKey( 1 ) ))										

oModel:SetPrimaryKey( { 'BF8_FILIAL','BF8_CODINT','BF8_CODIGO' } )

oModel:GetModel('MasterCab'):SetDescription('Tabela de Honorarios') // Adiciona a descrição do Modelo de Dados

oModel:setDescription("Tabela de Honorarios")

return oModel


//-------------------------------------------------------------------
/*/{Protheus.doc} PLSABF8FT
Tratamento para ajustar os campos a ser utilizados da tabela.
@author Lucas Nonato
@since 01/04/2019
@version P12
/*/
function PLSABF8FT(cCampo, cAlias)
local lRet	:= .t.

do Case
case cAlias == "BW4"
	if allTrim(cCampo) == 'BW4_CODOPE' .or. allTrim(cCampo) == 'BW4_CODTAB' .or. allTrim(cCampo) == 'BW4_DESTAB' 
		lRet := .f.
	endif
case cAlias == "BKF" 
	if allTrim(cCampo) == 'BKF_CODINT' .or. allTrim(cCampo) == 'BKF_CODTAB' .or. allTrim(cCampo) == 'BKF_DESTAB' .or. (!isUnimed() .and. allTrim(cCampo) == 'BKF_CODEDI')
		lRet := .f.
	endif
case cAlias == "BP1" 
	if allTrim(cCampo) == 'BP1_CODINT' .or. allTrim(cCampo) == 'BP1_CODTAB' .or. allTrim(cCampo) == 'BP1_DESTAB' 
		lRet := .f.
	endif
endcase

return lRet

//------------------------------------------------------------
/*/{Protheus.doc} PLSABF8POS
Edita campos que serão exibidos em tela

@author    Lucas Nonato
@version   V12
@since     23/03/2020
/*/
function PLSABF8POS(oModel) 
local lRet 		:= .t.
local oModelD 	:= oModel:getModel(oModel:getModelIds()[1])
local nOperation	:= oModelD:getOperation()
local cCodTab		:= ''
local cCodInt		:= ''

if nOperation == MODEL_OPERATION_DELETE

	cCodTab := oModelD:getValue("BF8_CODIGO")	
	cCodInt := oModelD:getValue("BF8_CODINT")

	processa({|| lRet := vldExclusao(cCodInt,cCodTab)}, 'Validando...', '',.f.)	
	if !lRet .and. !lAuto
		Help( ,, 'HELP',,'A TDE está sendo utilizada em algum cadastro, não será possivel realizar a exclusão!', 1, 0)
	endif
endIf

return(lRet)

//------------------------------------------------------------
/*/{Protheus.doc} vldExclusao
Valida relacionamento com outras tabelas

@author    Lucas Nonato
@version   V12
@since     23/03/2020
/*/
static function vldExclusao(cCodInt, cCodTab)
local aChave 	:= {}
local lRet 		:= .t.
aadd(aChave,{"B45","B45_CODTAB",cCodTab})
aadd(aChave,{"B7T","B7T_TABREE",cCodTab})
aadd(aChave,{"BA0","BA0_CODTAB",cCodTab})
aadd(aChave,{"BA0","BA0_TBRFRE",cCodTab})
aadd(aChave,{"BB8","BB8_CODTAB",cCodTab})
aadd(aChave,{"BC0","BC0_CODTAB",cCodTab})
aadd(aChave,{"BD6","BD6_CDTBRC",cCodTab})
aadd(aChave,{"BD6","BD6_CODTAB",cCodTab})
aadd(aChave,{"BDN","BDN_CODTAB",cCodTab})
aadd(aChave,{"BE6","BE6_CODTAB",cCodTab})
aadd(aChave,{"BE9","BE9_CODTAB",cCodTab})
aadd(aChave,{"BH0","BH0_TABPAG",cCodTab})
aadd(aChave,{"BH0","BH0_TABREC",cCodTab})
aadd(aChave,{"BKF","BKF_CODTAB",cCodTab})
aadd(aChave,{"BMB","BMB_CODTAB",cCodTab})
aadd(aChave,{"BN1","BN1_CODTAB",cCodTab})
aadd(aChave,{"BP1","BP1_CODTAB",cCodTab})
aadd(aChave,{"BQM","BQM_CODTAB",cCodTab})
aadd(aChave,{"BTM","BTM_CODTAB",cCodTab})
aadd(aChave,{"BW4","BW4_CODTAB",cCodTab})
aadd(aChave,{"BY3","BY3_CODTAB",cCodTab})
aadd(aChave,{"BY5","BY5_CODHON",cCodTab})
aadd(aChave,{"BYO","BYO_TABCOM",cCodTab})
aadd(aChave,{"BYZ","BYZ_CODTDE",cCodTab})
aadd(aChave,{"BZB","BZB_CODTAB",cCodTab})
aadd(aChave,{"B12","B12_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"B13","B13_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"B30","B30_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"B86","B86_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BBI","BBI_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BCW","BCW_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BFD","BFD_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BFD","BFD_TABCOP",cCodInt+cCodTab})
aadd(aChave,{"BFD","BFD_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BFG","BFG_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BFG","BFG_TABCOP",cCodInt+cCodTab})
aadd(aChave,{"BFG","BFG_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BGD","BGD_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BGL","BGL_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BGS","BGS_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BGS","BGS_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BHC","BHC_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BHD","BHD_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BHE","BHE_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BHF","BHF_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BHF","BHF_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BHG","BHG_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BHI","BHI_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BHI","BHI_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BHJ","BHJ_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BHK","BHK_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BLW","BLW_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BLX","BLX_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BNZ","BNZ_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BOR","BOR_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BS9","BS9_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BSY","BSY_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BV2","BV2_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BV2","BV2_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BV4","BV4_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BV5","BV5_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BV5","BV5_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BV6","BV6_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BV7","BV7_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BV7","BV7_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BV8","BV8_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BV8","BV8_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BVA","BVA_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BVA","BVA_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BVC","BVC_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BVC","BVC_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BVE","BVE_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BVF","BVF_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BVH","BVH_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BVH","BVH_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BVJ","BVJ_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BVJ","BVJ_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BVM","BVM_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BWW","BWW_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BYK","BYK_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZ1","BZ1_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZ1","BZ1_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZL","BZL_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZL","BZL_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZM","BZM_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZM","BZM_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZP","BZP_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZP","BZP_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZR","BZR_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZS","BZS_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZS","BZS_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZT","BZT_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZU","BZU_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZU","BZU_TABREM",cCodInt+cCodTab})
aadd(aChave,{"BZV","BZV_CODTAB",cCodInt+cCodTab})
aadd(aChave,{"BZV","BZV_TABREM",cCodInt+cCodTab})

// checa se é possivel excluir                   
lRet := PLSCHKDEL(aChave,!lAuto)	

return lRet

/*/{Protheus.doc} PLSABF8CMT
Faz o commit necessario do modelo

@author Alexander Santos
@since 11/02/14
@version 1.0
/*/
function PLSABF8CMT(oModel) 
local aArea 		:= BF8->(getArea())
local oModelD 		:= oModel:getModel(oModel:getModelIds()[1])
local nOperation	:= oModelD:getOperation()
local nQtdLin		:= 0
local aChave		:= {}

if nOperation == MODEL_OPERATION_DELETE

   // deleta BA8, BD4 e BDY                   
	BA8->(dbSetOrder(1))//BA8_FILIAL+BA8_CODTAB+BA8_CDPADP+BA8_CODPRO
	if BA8->(msSeek(xFilial("BA8")+BF8->(BF8_CODINT+BF8_CODIGO)))

		aadd(aChave, {"BA8_CODTAB", '=', BA8->BA8_CODTAB} )
		
		oGEN	:= PLSREGIC():new()
		nQtdLin:= oGEN:getCountReg("BA8",aChave)
		
		BEGIN TRANSACTION
		
		processa({|| delRela(nQtdLin) }, "Aguarde...", "",.f.)
		
		END TRANSACTION

	endIf
endIf

FWFormCommit(oModel)

BF8->(restArea(aArea))                   

return(.t.)

/*/{Protheus.doc} delRela
Deleta registros relacionados BF8,BA8,BD4 e BDY

@author Alexander Santos
@since 11/02/14
@version 1.0
/*/
static function delRela(nQtdLin)
local oGEN 	:= nil
local aChave	:= {}
local nQtd	:= 0

procRegua(nQtdLin)

while !BA8->(eof()) .and. xFilial("BA8")+BA8->BA8_CODTAB == xFilial("BA8")+BF8->(BF8_CODINT+BF8_CODIGO)

	nQtd++
	incProc('Deletando ['+cValToChar(nQtd)+'] de ['+cValToChar(nQtdLin)+']')

	BD4->(dbSetOrder(1))//BD4_FILIAL+BD4_CODTAB+BD4_CDPADP+BD4_CODPRO+BD4_CODIGO+DTOS(BD4_VIGINI)
	if BD4->(msSeek(xFilial("BD4")+BA8->(BA8_CODTAB+BA8_CDPADP+BA8_CODPRO)))

		while !BD4->(eof()) .and. xFilial("BD4")+BD4->(BD4_CODTAB+BD4_CDPADP+BD4_CODPRO) == xFilial("BA8")+BA8->(BA8_CODTAB+BA8_CDPADP+BA8_CODPRO)
			
			oGEN := PLSSTRUC():new("BD4",MODEL_OPERATION_DELETE,,BD4->(recno()))
			oGEN:crud()   
				
		BD4->(dbSkip())
		endDo
	endIf
   
	BDY->(dbSetOrder(1))//BDY_FILIAL+BDY_CODTAB+BDY_CDPADP+BDY_CODPRO+BDY_CDTBPD+BDY_CDPRO
	if BDY->(msSeek(xFilial("BDY")+BA8->(BA8_CODTAB+BA8_CDPADP+BA8_CODPRO)))

		while !BDY->(eof()) .and. xFilial("BDY")+BDY->(BDY_CODTAB+BDY_CDPADP+BDY_CODPRO) == xFilial("BA8")+BA8->(BA8_CODTAB+BA8_CDPADP+BA8_CODPRO)
			
			oGEN := PLSSTRUC():new("BDY",MODEL_OPERATION_DELETE,,BDY->(recno()))
			oGEN:crud()   
				
		BDY->(dbSkip())
		endDo
	endIf
   
	aChave := {}
	aadd(aChave, {"BA8_CODPAD", '=', BA8->BA8_CODPAD})
	aadd(aChave, {"BA8_CODPRO", '=', BA8->BA8_CODPRO})
	
	//verifica quantidade de registros e nao deixa excluir	
	oGEN := PLSREGIC():new()
   
   // Se existe mais de 1 na tab de eventos pode excluir...   
	if oGEN:getCountReg("BA8",aChave) == 1
			   
		BR8->(dbSetOrder(1))//BR8_FILIAL+BR8_CODPAD+BR8_CODPSA+BR8_ANASIN
		if BR8->(msSeek(xFilial("BR8")+BA8->(BA8_CODPAD+BA8_CODPRO)))
			oGEN := PLSSTRUC():new("BR8",MODEL_OPERATION_DELETE,,BR8->(recno()) )
			oGEN:crud()   
		endIf
		
	endIf
   
	oGEN := PLSSTRUC():new("BA8",MODEL_OPERATION_DELETE,,BA8->(recno()))
	oGEN:crud()   
		
BA8->(dbSkip())
endDo

oGEN:destroy()                                               

return

//------------------------------------------------------------
/*/{Protheus.doc} vldGrid
Valida grid de portes

@author    Lucas Nonato
@version   V12
@since     23/03/2020
/*/
static function vldGrid(cAlias,cModel,oObj)
local nFor		:= 0
local lRet 		:= .T.  
local oModel	:= Nil
local oGrid		:= Nil
local nLine		:= 0
local xChave	:= ""
local cField 	:= ""
local cDatIni 	:= ""
local cDatFim 	:= ""
local cDatIniF	:= ""
local cDatFimF	:= ""

// Obtem os dados do model
oModel 	:= FWModelActive()
oGrid 	:= oModel:GetModel(cModel)

if cAlias == 'BW4'
	cField	:= cAlias+"_PORTE"
elseif cAlias == 'BKF'
	cField	:= cAlias+"_SEQPOR"
	if oGrid:GetValue("BKF_COEFIC",oGrid:nLine) == 0 .and. oGrid:GetValue("BKF_VLRREA",oGrid:nLine) == 0
		Help(NIL, NIL, 	"Valor", NIL, "Não foi informado valor em nenhum dos campos.", 1, 0, NIL, NIL, NIL, NIL, NIL, ;
					{	"Informe um valor real ou CH."})	
		lRet := .f.
	endif
endif

xChave 	:= oGrid:GetValue(cField,oGrid:nLine)
cDatIni := oGrid:GetValue(cAlias+"_VIGINI",oGrid:nLine)
cDatFim	:= oGrid:GetValue(cAlias+"_VIGFIN",oGrid:nLine)
nLine 	:= oGrid:GetLine()

if cDatIni > cDatFim .and. !empty(cDatFim)
	Help(NIL, NIL, "Vigencia", NIL, "A data final deve ser maior que a data inicial.", 1, 0, NIL, NIL, NIL, NIL, NIL, ;
					{"Informe uma data final superior a inicial."})	
	lRet := .f.
endif

if !lRet
	return lRet
endif

For nFor := 1 To oGrid:GetQtdLine() 
	lRet := .t.
	// Valida primeira insercao de dados e linha atual
	if oGrid:GetQtdLine() > 1 .and. nFor != nLine 
		
		oGrid:GoLine( nFor )
		if !oGrid:IsDeleted()
			xChaveF 	:= oGrid:GetValue(cField,oGrid:nLine)	
			cDatIniF 	:= oGrid:GetValue(cAlias+"_VIGINI",oGrid:nLine)
			cDatFimF	:= oGrid:GetValue(cAlias+"_VIGFIN",oGrid:nLine)

			if xChaveF == xChave													
	 			// Data inicial no intervalo de uma data anterior nao deixa passar
   				if cDatIni >= cDatIniF .and. ( cDatIni <= cDatFimF .or. Empty(cDatFimF) ) 		   			   			
					Help(NIL, NIL, "Vigencia", NIL, "Já existe outro registro neste intervalo de vigência.", 1, 0, NIL, NIL, NIL, NIL, NIL, ;
					{"Verifique se há outro registro com o mesmo porte neste intervalo de datas."})			
					lRet := .F.	
					exit	
				endIf

	  			// Data final no intervalo de uma data anterior nao deixa passar
	   			if (cDatFim >= cDatIniF .Or. Empty(cDatFim)) .and. ( (!empty(cDatFimF) .and. !empty(cDatFim) .And. cDatFim <= cDatFimF) .or. (empty(cDatFim) .and. empty(cDatFimF)))		
			   		Help(NIL, NIL, "Vigencia", NIL, "Já existe outro registro neste intervalo de vigência.", 1, 0, NIL, NIL, NIL, NIL, NIL, ;
					{"Verifique se há outro registro com o mesmo porte neste intervalo de datas."})		
					lRet := .F.
					exit 			
				endIf
			endIf
		endIf
	endIf
next

return lRet

//------------------------------------------------------------
/*/{Protheus.doc} vldAux
Valida grid de auxiliares

@author    Lucas Nonato
@version   V12
@since     23/03/2020
/*/
static function vldAux(cModel)
local nFor		:= 0
local lRet 		:= .T.  
local oModel	:= Nil
local oGrid		:= Nil
local nLine		:= 0
local nNumAux	:= 0
local cCodFun	:= ""
local nNumAuxF	:= 0
local cCodFunF	:= ""

// Obtem os dados do model
oModel 	:= FWModelActive()
oGrid 	:= oModel:GetModel(cModel)

nNumAux 	:= oGrid:GetValue('BP1_NUMAUX',oGrid:nLine)
cCodFun 	:= oGrid:GetValue('BP1_CODFUN',oGrid:nLine)
nLine 	:= oGrid:GetLine()

For nFor := 1 To oGrid:GetQtdLine() 
	lRet := .t.

	// Valida primeira insercao de dados e linha atual
	if oGrid:GetQtdLine() > 1 .and. nFor != nLine		
		oGrid:goLine( nFor )
		if !oGrid:IsDeleted()
			nNumAuxF 	:= oGrid:GetValue('BP1_NUMAUX',oGrid:nLine)
			cCodFunF 	:= oGrid:GetValue('BP1_CODFUN',oGrid:nLine)

			if nNumAux == nNumAuxF .and. cCodFun == cCodFunF	 			   			   			
				Help(NIL, NIL, "Duplicado", NIL, "Já existe outro registro com este número de auxiliar.", 1, 0, NIL, NIL, NIL, NIL, NIL, ;
				{"Informe outro número de auxiliar."})			
				lRet := .F.	
				exit					  		
			endIf
		endIf
	endIf
next

return lRet