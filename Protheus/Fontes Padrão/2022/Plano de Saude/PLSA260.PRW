#INCLUDE "PLSMGER.CH"
#INCLUDE "COLORS.CH"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "PLSA260.CH"
#INCLUDE 'FWMVCDEF.CH'
#INCLUDE "TOPCONN.CH"
#INCLUDE "hat-actions.ch"
#INCLUDE 'FWMBROWSE.CH'
    
#DEFINE DATA_BLOQ 1
#DEFINE TIPO_BLOQ 2
#DEFINE MATRI_BLO 3
#DEFINE MOTIV_BLO 4
#DEFINE HORA_BLOQ 5

#DEFINE JOB_VALID		"1" // Job Validacao

Static cAliax 	   := ''
STATIC __AExcRec   := {} 
STATIC __cMatriBlo := {}
STATIC __lCPTBLO   := .F.
STATIC __lRetBlq   := NIL
STATIC _lRetAC8    := .F.
Static objCENFUNLGP := CENFUNLGP():New()

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³ PLSA260 ³ Autor ³ Tulio Cesar            ³ Data ³ 26.01.00 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Cadastro de Familias                                        ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/ 
Function PLSA260()

LOCAL cTipo
private cSenhaOrg := ""
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo de Coberturas Familia...                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabGruF  := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Historico de parcelamento...	                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabB78  := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo de Coberturas Usuarios ...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBFE := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coberturas Familia - Procedimentos                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE  aCabProF := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coberturas Usuario - Procedimentos                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBFG := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Usuarios...                                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabUsr  := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados com o historico financeiro...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabFin   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Historico de Cobranca de Carteirinha ...               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBED   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Bloqueios da Familia ...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBlo   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Bloqueios do Usuario ...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBUsu   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Doenca pre-existente do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabDoe    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados do Cancelamento Reajuste                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBYW    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados das faixas etarias dos usuarios                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBDK    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados Grupo do Rol de Procedimento								³
//³ Alexander 01/06/2005												³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabB1W    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Doenca pre-existente do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBHH    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Doenca pre-existente do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabBCP    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Opcionais da Familia                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabOpc   := {}

// ARRAY DOS ALIAS BZ
PRIVATE aCabBZN   := {}
PRIVATE aCabBZO   := {}
PRIVATE aCabBZP   := {}
PRIVATE aCabBZ0   := {}
PRIVATE aCabBZ1   := {}
PRIVATE aCabBZQ   := {}
PRIVATE aCabBZR   := {}
PRIVATE aCabBZS   := {}
PRIVATE aCabBVH   := {}
PRIVATE aCabBVC   := {}
PRIVATE aCabBVF   := {}

PRIVATE aCabBZU   := {}
PRIVATE aCabBZT   := {}
PRIVATE aCabBZV   := {}

// ARRAY DOS ALIAS BV
PRIVATE aCabBV0   := {}
PRIVATE aCabBV1   := {}
PRIVATE aCabBV2   := {}
PRIVATE aCabBV3   := {}
PRIVATE aCabBV4   := {}
PRIVATE aCabBV5   := {}
PRIVATE aCabBV6   := {}
PRIVATE aCabBV7   := {}
PRIVATE aCabBV8   := {}
PRIVATE aCabBV9   := {}
PRIVATE aCabBVA   := {}
PRIVATE aCabBVI := {}
PRIVATE aCabBVJ := {}
PRIVATE aCabBVM := {}
PRIVATE aCabQTD := {}
PRIVATE aCabCQtd:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de Cobranca da Familia...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabFor := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de Cobranca do Opcional...                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabFrOpc 	:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de Cobranca do Opcional (Usuario)                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabUFrOpc 	:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de CObranca da Taxa de Adesao...                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabAde := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados do Historico dos Opcionais da Familia                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabHOpc  	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Opcionais do Usuario                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabOUsu   	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados do Historico dos Opcionais do Usuario                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabHOUsu   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Gratuidade da Familia                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabGra   	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Protecao financeira...                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabB1V   	:= {}
PRIVATE aCabB1S   	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Gratuidade do Usuario                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCabGUsu   	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Detalhamento da Forma de Cobranca ...                               ³
PRIVATE aCabDet  	:= {}
PRIVATE aCabTxD  	:= {}

PRIVATE aCabBFJ 	:= {}
PRIVATE aCabBW9 	:= {}
PRIVATE aCabBFO 	:= {}
PRIVATE aCabBWA 	:= {}

PRIVATE	aStruBA1	:= BA1->(dbStruct())
PRIVATE	aStruBF1	:= BF1->(dbStruct())
PRIVATE	aStruSE1	:= SE1->(dbStruct())
PRIVATE	aStruBED	:= BED->(dbStruct())
PRIVATE	aStruBC3	:= BC3->(dbStruct())
PRIVATE	aStruBH5	:= BH5->(dbStruct())
PRIVATE aStruBFC	:= BFC->(dbStruct())
PRIVATE	aStruBFD	:= BFD->(dbStruct())
PRIVATE	aStruBW7	:= BW7->(dbStruct())
PRIVATE	aStruBF3	:= BF3->(dbStruct())
PRIVATE	aStruBFJ	:= BFJ->(dbStruct())
PRIVATE	aStruBDK	:= BDK->(dbStruct())
PRIVATE	aStruBHH	:= BHH->(dbStruct())
PRIVATE	aStruBCP	:= BCP->(dbStruct())
PRIVATE	aStruBF4	:= BF4->(dbStruct())
PRIVATE	aStruBYX	:= BYX->(dbStruct())
PRIVATE	aStruBGU	:= BGU->(dbStruct())
PRIVATE	aStruBCA	:= BCA->(dbStruct())
PRIVATE	aStruBH6	:= BH6->(dbStruct())
PRIVATE	aStruBFE	:= BFE->(dbStruct())
PRIVATE	aStruBVI	:= BVI->(dbStruct())
PRIVATE	aStruBVJ	:= BVJ->(dbStruct())
PRIVATE	aStruBVM	:= BVM->(dbStruct())
PRIVATE	aStruBFG	:= BFG->(dbStruct())
PRIVATE	aStruBW9	:= BW9->(dbStruct())
PRIVATE	aStruBFO	:= BFO->(dbStruct())
PRIVATE	aStruBWA	:= BWA->(dbStruct())
PRIVATE	aStruBK0	:= BK0->(dbStruct())
PRIVATE	aStruBJL	:= BJL->(dbStruct())

PRIVATE	aStruB1V	:= IiF(PLSALIASEX("B1V"),B1V->(dbStruct()),{})
PRIVATE	aStruB1S	:= IiF(PLSALIASEX("B1S"),B1S->(dbStruct()),{})
PRIVATE	aStruBYW	:= IiF(PLSALIASEX("BYW"),BYW->(dbStruct()),{})
PRIVATE	aStruB78	:= IiF(PLSALIASEX("B78"),B78->(dbStruct()),{})
PRIVATE	aStruB1W	:= IiF(PLSALIASEX("B1W"),B1W->(dbStruct()),{})

DEFAULT nAutoma		:=	0
DEFAULT lAutoma		:= .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas na rotina de bloqueio de grupo familiar				³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
STATIC		cCodFami
STATIC	   cMtBlo
STATIC		dBlqDat
STATIC		lDesFam	:= .F.
STATIC		lBlqConf	:= .F.
STATIC		_nOpc		:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Liga Set KEY F12...                                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SetKey(VK_F12,{|a,b| Pergunte("PLS260",.T.) })

If !lAutoma
	Pergunte("PLS260",.F.)
	cTipo := mv_par01		
Else
	cTipo := nAutoma
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega helps...                                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PL260CarCr()
//Substituido mBrowse pelo FWMBrowse, devido as inconsistencias apresentadas ao  configurar os privilégios do usuario no SIGACFG
oBrowse := FWMBrowse():New()

oBrowse:SetAlias('BA1')
oBrowse:SetMenuDef('PLSA260')		//Define que este é o Browse que será utilizado na chamada da função

If cTipo == 1
	PLSA260FAM(lAutoma)
Else
	PLS260Op2(lAutoma)
Endif


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Desliga Set Key...                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SET KEY VK_F12 TO

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³ PLSA260 ³ Autor ³ Tulio Cesar            ³ Data ³ 26.01.00 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Cadastro de Familias                                       ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Sintaxe   ³ PLSA260()                                                  ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±±
±±³ Uso      ³ Advanced Protheus 5.08                                     ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±±
±±³ Alteracoes desde sua construcao inicial.                              ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±±
±±³ Data     ³ BOPS ³ Programador ³ Breve Descricao                       ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±±
±±³ 04.12.01 ³V. 710³ Tulio Cesar ³ Novas implementacoes                  ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±±
±±³ 01.06.05 ³xxxxxx³ Alexander   ³ Nova tabela B1W Grupo do Rol de Proced³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260FAM()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define opcoes da rotina...                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL aCores 		:= {}
LOCAL lCent 		:= __SetCentury()
LOCAL cFil260 		:= ""
LOCAL aItens 		:= {}
LOCAL  nItem 		:= 0
LOCAL lUnimeds  	:= iIf( allTrim( getNewPar("MV_PLSUNI","1") )=="1", .t. , .f. )
LOCAL nX			:=0
PRIVATE aCdCores	:= {}
PRIVATE aCores		:= {}
PRIVATE aRotina 	:= {}
private lPrim260 	:= .f. // evitar erro ao abrir uma tela MVC.


aRotina := MenuDef()

If ExistBlock("PL260MNU")	//	P.E. para incluir itens no aRotina (Menu)
	aItens := ExecBlock("PL260MNU",.F.,.F.)
	If ValType(aItens) == "A"
		For nItem := 1 To Len(aItens)
			Aadd(aRotina, aItens[nItem])
		Next
	EndIf
Endif
If ExistBlock("PLS260INC")
	aadd(aRotina,{ OemtoAnsi(STR0008)	, 'PLSA260REM' , 0 , K_Alterar    	}) //"Reemissao"
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variavel que vai definir se a abrangencia pode ser editada ou nao        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE lPermAbr  := .T.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define o cabecalho da tela de atualizacoes                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE cAlias    := "BA3"
PRIVATE cCadastro := "Grupo Familiar / Beneficiários"
PRIVATE cFilBA1	  := ""

DEFAULT lAutoma	  := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o filtro dos usuarios de acondo com o contrato(PJ) ou Empresa(PF)  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lJuridico .and. !lAmbos
  	                
	cFil260 := "BA1_FILIAL = '" + xFilial("BA1") + "' AND BA1_CODINT = '"+Left(BQC->BQC_CODIGO,4)+"' AND BA1_CODEMP = '"+Substr(BQC->BQC_CODIGO,5,4)+"' "
	cFil260 += "AND BA1_CONEMP = '"+BQC->BQC_NUMCON+"' AND BA1_VERCON = '"+BQC->BQC_VERCON+"' "
	cFil260 += "AND BA1_CONEMP = '"+BQC->BQC_NUMCON+"' AND BA1_VERCON = '"+BQC->BQC_VERCON+"' "
	cFil260 += "AND BA1_SUBCON = '"+BQC->BQC_SUBCON+"' AND BA1_VERSUB = '"+BQC->BQC_VERSUB+"' "
	cFil260 += "AND D_E_L_E_T_ = ' '"
	
	cCadastro := Posicione("BG9",1,xFilial("BG9")+BQC->(BQC_CODIGO),"BG9_DESCRI")
	
	oBrowse:SetDescription(Posicione("BG9",1,xFilial("BG9")+BQC->(BQC_CODIGO),"BG9_DESCRI")) 
	
Elseif !lJuridico .and. !lAmbos
 
	cFil260 := "BA1_CODINT = '"+BG9->BG9_CODINT + "' AND BA1_CODEMP = '"+BG9->BG9_CODIGO+"' "

   	oBrowse:SetDescription(BG9->BG9_DESCRI)
    
Endif

cFilBA1:="@"+cFil260
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Chama mBrowse padrao...                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa 4 digitos para o cadastro de usuarios...                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
__SetCentury( "on" )

BA1->(DbSetOrder(1))

If lAmbos
	BA1->(MsSeek(xFilial("BA1")))
Else
	oBrowse:SetFilterDefault(cFilBA1) //Define o Filtro padrão
EndIF

Pl260Cores(@aCores,@aCdCores)

If !ExistBlock('PL260COR')
	oBrowse:AddLegend("PLLegBloq()=='BR_VERMELHO'", "RED"	, 'Beneficiario Bloqueado')//"Pendente com a Operadora"
	oBrowse:AddLegend("PLLegBloq()=='BR_VERDE'", "GREEN"	, 'Beneficiario ativo')//"Pendente com a Operadora"
	oBrowse:AddLegend("PLLegBloq()=='BR_AMARELO'", "YELLOW"	, 'Beneficiario com bloqueio futuro')//"Pendente com a Operadora"
	oBrowse:AddLegend("PLLegBloq()=='BR_BRANCO'", "WHITE"	, 'Inclusão futura')//"Pendente com a Operadora"
	oBrowse:setMainProc("PLSA260")
	Iif(!lAutoma,oBrowse:Activate(),"")
Else
	For nX:= 1 to Len(aCores)
		oBrowse:AddLegend(aCores[nx,1], aCores[nx,2]	, '')
	Next
	Iif(!lAutoma,oBrowse:Activate(),"")

Endif
//BA1->(mBrowse(006,001,022,075,'BA1',,,,,,aCores,,,,,,,,IIf(!lAmbos,cFil260,nil) ))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Retorna ao modo original...                                            	 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
__SetCentury(If(lCent,"on","off"))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina Principal...                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return

/*/{Protheus.doc} PLLegBloq
Retorna a cor da legenda correta para o browse

@author  Karine Riquena Limp
@version P12
@since   13/07/2017
/*/
function PLLegBloq(cAlias)
local cCor := "BR_VERDE"
local aVgDatBlo := {}
local lIsBloc := .F.
local lWillBloc := .F.
local aAreaBA1 := {}
Default cAlias := "BA1" //tem uma rotina que utiliza query

aAreaBA1:= BA1->(GetArea())

lIsBloc := PlChHiBlo('BCA',dDatabase,(cAlias)->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC),(cAlias)->BA1_TIPREG,nil,nil,nil,nil,@aVgDatBlo,.F.)

//verifica se tem bloqueio futuro
if ! lIsBloc 
    if len(aVgDatBlo) > 0
        if ValType(aVgDatBlo[1][1]) == "C"
            lWillBloc := aScan(aVgDatBlo,{|x| Alltrim(x[1]) > DTOS(dDatabase)}) > 0    
        else
            lWillBloc := aScan(aVgDatBlo,{|x| x[1] > dDatabase }) > 0
        endif
    endif
endIf

if lIsBloc .Or. (!lWillBloc .And. ! Empty((cAlias)->BA1_DATBLO))
	cCor := "BR_VERMELHO" 
elseif lWillBloc .And. ! Empty((cAlias)->BA1_DATBLO)
	cCor := "BR_AMARELO"
elseif (cAlias)->BA1_DATINC <= dDataBase
	cCor := "BR_VERDE"
else
	cCor := "BR_BRANCO"
endIf

RestArea(aAreaBA1)	
	
return cCor
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260Mov ³ Autor ³ Tulio Cesar        ³ Data ³ 08.03.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Modulo de Manutencao dos contratos                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PLSA260Mov(cAlias,nReg,nOpc)                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PLSA260                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PLSA260Mov(cAlias,nReg,nOpc,lAutoma)

Local nVetTrab := 0
Local aCabFam  	:= {}
Local aDadFam  	:= {}, nDadFam
Local aAltUsr  	:= {}, nDadUsr, nCols
Local nCntFor   := 0
Local aPosObj   := {}
Local aObjects  := {}
Local aSize     := {}
Local aInfo     := {}
Local aButUsr	:= {}
Local aTitles 	:= {}
Local aPages 	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variavel do para Ponto de Entrada - Familia Usuario em 04/11/05     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aPL260AGR	 := {}//Arry Retorna o GetArea do P.Entrada Antes da Gravacao

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis genericas...                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE lUsaBWA		 := .F.
PRIVATE nOpcx        := nOpc
PRIVATE nOpca        := 0
PRIVATE cChave       := Space(13)
PRIVATE nInd         := 0
PRIVATE cTipReg      := Space(Len(BA1->BA1_TIPREG))
PRIVATE aVetBlo      := {}
PRIVATE aVetBloUsu   := {}
PRIVATE bFilter
PRIVATE cCodPsa 	 := ""
PRIVATE cCodPad 	 := ""
PRIVATE lCriaB1W 	 := .T.
PRIVATE lCriaBYW 	 := .T.
PRIVATE lCriaB1S 	 := .T.
PRIVATE lCriaB1V 	 := .T.
PRIVATE lCriaB78 	 := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Checa se o B1W existe tabela de grupo do rol de procedimento 			 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !PLSALIASEX("B1W")
   lCriaB1W := .F.
EndIf
If !PLSALIASEX("BYW")
   lCriaBYW := .F.
EndIf
If !PLSALIASEX("B1S")
   lCriaB1S := .F.
EndIf
If !PLSALIASEX("B1V")
   lCriaB1V := .F.
EndIf
If !PLSALIASEX("B78")
   lCriaB78 := .F.
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inclusao de controle para tabela nova B1W							³
//³ Alexander 01/06/2005												³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE bVldGFoc     := { || Eval(oBrwGruF:bLostFocus), Eval(oBrwProF:bLostFocus), Eval(oBrwDoe:bLostFocus), Eval(oBrwBDK:bLostFocus),Iif(lCriaB1W,Eval(oBrwB1W:bLostFocus),),;
Eval(oBrwBHH:bLostFocus),IiF(lCriaBYW,Eval(oBrwBYW:bLostFocus),NIL), Iif(Type('oFldUsr')=='O',Iif(oFldUsr:nOption<>4,oBrwOUsu:ForceRefresh(oBrwUsr),NIL),NIL), Iif(Type('oFldUsr')=='O', Iif(oFldUsr:nOption == 3, oBrwOUsu:oBrowse:oBrowse:setFocus(),),), Eval(oBrwOUsu:bLostFocus), oBrwUsr:lAltered := .T. }
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis da enchoice...                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aTELA[0][0]
PRIVATE aGETS[0]
PRIVATE cAliasEnc    := "BA3"
PRIVATE nRegEnc
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Array para controle de inclusao automatica de opcionais do usuario |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aOpcControl := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis para controle de Forma de Cobranca                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aSTela  := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define folders...                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oFolder
PRIVATE oFldUsr

PRIVATE oFldFam
PRIVATE oFldCobUsr
PRIVATE oFldCobFam
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define aCols e a aHeader...                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aCols        := {}
PRIVATE aHeader      := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis do contrato selecionado...                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oEnchoice
PRIVATE lInterc      := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo de Coberturas Familia...                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwGruF
PRIVATE aDadGruF := {}
PRIVATE aTrbGruF := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo de Coberturas Usuarios ...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oGetBFE
PRIVATE aDadBFE := {}
PRIVATE aVetBFE := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coberturas Familia - Procedimentos                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwProF
PRIVATE aDadProF := {}
PRIVATE aTrbProF := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coberturas Usuario - Procedimentos                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oGetBFG
PRIVATE aDadBFG := {}
PRIVATE aVetBFG := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Usuarios...                                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwusr
PRIVATE aDadUsr  := {}
PRIVATE aTrbUsr  := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados com o historico financeiro...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwFin
PRIVATE aDadFin   := {}
PRIVATE aTrbFin   := {}
PRIVATE lDadFin
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Historico de Cobranca de Carteirinha ...               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwBED
PRIVATE aDadBED   := {}
PRIVATE aTrbBED   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Bloqueios da Familia ...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwBlo
PRIVATE aDadBlo   := {}
PRIVATE aTrbBlo   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Bloqueios do Usuario ...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwBUsu
PRIVATE aDadBUsu   := {}
PRIVATE aTrbBUsu   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Doenca pre-existente do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwDoe
PRIVATE aDadDoe    := {}
PRIVATE aTrbDoe    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados Cancelamento Reajuste                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwBYW
PRIVATE aDadBYW    := {}
PRIVATE aTrbBYW    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados das faixas etarias dos usuarios                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwBDK
PRIVATE aDadBDK    := {}
PRIVATE aTrbBDK    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados Grupo do Rol de Procedimento								³
//³ Alexander 01/06/2005												³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwB1W

PRIVATE aDadB1W    := {}
PRIVATE aTrbB1W    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Doenca pre-existente do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwBHH

PRIVATE aDadBHH    := {}
PRIVATE aTrbBHH    := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Doenca pre-existente do Usuario                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwBCP
PRIVATE aDadBCP    := {}
PRIVATE aTrbBCP    := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Opcionais da Familia                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwOpc
PRIVATE aDadOpc   := {}
PRIVATE aTrbOpc   := {}

// ARRAY DOS ALIAS BZ
PRIVATE aDadBZN   := {}
PRIVATE aVetBZN   := {}

PRIVATE aDadBZO   := {}
PRIVATE aVetBZO   := {}

PRIVATE aDadBZP   := {}
PRIVATE aVetBZP   := {}

PRIVATE aDadBZ0   := {}
PRIVATE aVetBZ0   := {}

PRIVATE aDadBZ1   := {}
PRIVATE aVetBZ1   := {}

PRIVATE aDadBZQ   := {}
PRIVATE aVetBZQ   := {}

PRIVATE aDadBZR   := {}
PRIVATE aVetBZR   := {}

PRIVATE aDadBZS   := {}
PRIVATE aVetBZS   := {}

PRIVATE aDadBVH   := {}
PRIVATE aVetBVH   := {}

PRIVATE aDadBZU   := {}
PRIVATE aVetBZU   := {}

PRIVATE aDadBZT   := {}
PRIVATE aVetBZT   := {}

PRIVATE aDadBZV   := {}
PRIVATE aVetBZV   := {}

// ARRAY DOS ALIAS BV
PRIVATE aDadBV0   := {}
PRIVATE aVetBV0   := {}

PRIVATE aDadBV1   := {}
PRIVATE aVetBV1   := {}

PRIVATE aDadBV2   := {}
PRIVATE aVetBV2   := {}

PRIVATE aDadBV3   := {}
PRIVATE aVetBV3   := {}

PRIVATE aDadBV4   := {}
PRIVATE aVetBV4   := {}

PRIVATE aDadBV5   := {}
PRIVATE aVetBV5   := {}

PRIVATE aDadBV6   := {}
PRIVATE aVetBV6   := {}

PRIVATE aDadBV7   := {}
PRIVATE aVetBV7   := {}

PRIVATE aDadBV8   := {}
PRIVATE aVetBV8   := {}

PRIVATE aDadBV9   := {}
PRIVATE aVetBV9   := {}

PRIVATE aDadBVA   := {}
PRIVATE aVetBVA   := {}


PRIVATE aDadBVI := {}
PRIVATE aVetBVI := {}

PRIVATE aDadBVJ := {}
PRIVATE aVetBVJ := {}

PRIVATE aDadBVM := {}
PRIVATE aVetBVM := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de Cobranca da Familia...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadFor := {}
PRIVATE aTrbFor := {}
PRIVATE oBrwFor

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de Cobranca do Opcional...                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadFrOpc 	:= {}
PRIVATE aTrbFrOpc 	:= {}
PRIVATE oBrwFrOpc
PRIVATE cVerOpc   	:= ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de Cobranca do Opcional (Usuario)                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadUFrOpc 	:= {}
PRIVATE aTrbUFrOpc 	:= {}
PRIVATE oBrwUFrOpc

PRIVATE cCodOpc    	:= ""
PRIVATE cCodGru    	:= ""
PRIVATE cCodPadOpc 	:= ""
PRIVATE cCodPSAOpc	:= ""
private cOpcCID    	:= ""
private cOpcESP    	:= ""
PRIVATE cCodGQuan  	:= ""

PRIVATE cU2CodPad := ""
PRIVATE cU2CodPsa := ""

private cFOpcCID    := ""

PRIVATE cUCodOpc    := ""
PRIVATE cUVerOpc	:= ""
PRIVATE cUCodGru    := ""
PRIVATE cU2CodGru   := ""
PRIVATE cUCodPadOpc := ""
PRIVATE cUCodPSAOpc := ""
private cUOpcCID    := ""
private cUOpcESP    := ""
PRIVATE cUCodGQuan  := ""

PRIVATE n := 1

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas de CObranca da Taxa de Adesao...                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadAde := {}
PRIVATE aTrbAde := {}
PRIVATE oBrwAde
PRIVATE nLimTXA := 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados do Historico dos Opcionais da Familia                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwHOpc
PRIVATE aDadHOpc  	:= {}
PRIVATE aTrbHOpc  	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados dos Opcionais do Usuario                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwOUsu
PRIVATE aDadOUsu   	:= {}
PRIVATE aTrbOUsu   	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados do Historico dos Opcionais do Usuario                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwHOUsu
PRIVATE aDadHOUsu   := {}
PRIVATE aTrbHOUsu   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Gratuidade da Familia                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwGra
PRIVATE aDadGra   	:= {}
PRIVATE aTrbGra   	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Gratuidade do Usuario                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwGUsu
PRIVATE aDadGUsu   	:= {}
PRIVATE aTrbGUsu   	:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Detalhamento da Forma de Cobranca ...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadDet  	:= {}

PRIVATE aDadTxD  	:= {}

PRIVATE aVetsFor   	:= {}
PRIVATE aVetsTxF   	:= {}
PRIVATE aVetsOpc 	:= {}

PRIVATE aVetsUOpc 	:= {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle de alteracoes das formas de cobranca da familia...         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aForAltFam 	:= {}
PRIVATE aTaxAltFam 	:= {}
PRIVATE aOpcAltFam 	:= {}

PRIVATE __cCodPla_  := ''
PRIVATE __cVersao_  := ''
PRIVATE __cForCob_	:= ''
PRIVATE __cForTax_	:= ''
PRIVATE __cForOpc_	:= ''

PRIVATE __cUsrPla_  := ''
PRIVATE __cUsrVer_  := ''
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle de alteracoes das formas de cobranca do usuario...         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aForAltUsr 	:= {}
PRIVATE __cCodUsr_  := ''
PRIVATE __cVerUsr_  := ''

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo de Quantidades... Geraldo Felix Junior 15/03/03 - Familia     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadQtd := {}
PRIVATE aTrbQtd := {}
PRIVATE oBrwQtd

PRIVATE cCodGruQtd 	:= ""
PRIVATE cDesGruQtd 	:= ""
PRIVATE cCodProQtd 	:= ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe de Carencia...   Geraldo Felix Junior 15/03/03 - Familia     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadBFJ := {}
PRIVATE aTrbBFJ := {}
PRIVATE oBrwBFJ

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Co-Participacao do Grupo de Quantidades... Geraldo Felix Junior 15/03/03-Familia|
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadCQtd := {}
PRIVATE aTrbCQtd := {}
PRIVATE oBrwCQtd
PRIVATE oBotQtd

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo de Quantidades... Geraldo Felix Junior 15/03/03 - Usuario     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadBW9 := {}
PRIVATE aTrbBW9 := {}
PRIVATE oGetBW9

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe Carencia Usuario Geraldo Felix Junior 15/03/03 - Usuario     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadBFO := {}
PRIVATE aTrbBFO := {}
PRIVATE oGetBFO

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Co-Participacao do Grupo de Quantidades... Geraldo Felix Junior 15/03/03-Usuario|
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aDadBWA := {}
PRIVATE aTrbBWA := {}
PRIVATE oGetBWA
PRIVATE oBotBWA

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados do historico de parcelamento                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwB78
PRIVATE aDadB78   	:= {}
PRIVATE aTrbB78   	:= {}

PRIVATE cFCodGru := ""
PRIVATE cFCodPad := ""
PRIVATE cFCodPsa := ""
PRIVATE cFCodEsp := ""

PRIVATE aDadBVC   := {}
PRIVATE aVetBVC   := {}
PRIVATE oGetBVC

PRIVATE oBotFCID
PRIVATE oBotFESP

PRIVATE aDadBVF   := {}
PRIVATE aVetBVF   := {}
PRIVATE oGetBVF

PRIVATE oBotCobUsr

PRIVATE oBotCPc
PRIVATE oGetBVI
PRIVATE oGetBVJ
PRIVATE oGetBVM

PRIVATE oGetBZ0
PRIVATE oGetBZ1
PRIVATE oGetBZR
PRIVATE oGetBZT
PRIVATE oGetBZV

PRIVATE oGetBV0
PRIVATE oGetBV1
PRIVATE oGetBV2
PRIVATE oGetBV9
PRIVATE oGetBVA
PRIVATE oGetBV3
PRIVATE oGetBV4
PRIVATE oGetBV5
PRIVATE oGetBV6
PRIVATE oGetBV7
PRIVATE oGetBV8

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GetDados da Protecao financeira                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE oBrwB1V
PRIVATE aDadB1V	:= {}
PRIVATE aTrbB1V	:= {}

PRIVATE oBrwB1S
PRIVATE aDadB1S	:= {}
PRIVATE aTrbB1S	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se o contrato estiver bloqueado nao sera possivel alterar nenhum dado do mesmo... |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE l260Mov := .T.

If Type("aCabGruF") == "U"

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grupo de Coberturas Familia...                                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabGruF  := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grupo de Coberturas Usuarios ...                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBFE := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Coberturas Familia - Procedimentos                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE  aCabProF := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Coberturas Usuario - Procedimentos                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBFG := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Usuarios...                                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabUsr  := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados com o historico financeiro...                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabFin   := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados dos Historico de Cobranca de Carteirinha ...               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBED   := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados dos Bloqueios da Familia ...                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBlo   := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados dos Bloqueios do Usuario ...                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBUsu   := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados da Doenca pre-existente do Usuario                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabDoe    := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados das faixas etarias dos usuarios                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBDK    := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados Grupo do Rol de Procedimento								³
	//³ Alexander 01/06/2005												³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabB1W    := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados da Doenca pre-existente do Usuario                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBHH    := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados da Doenca pre-existente do Usuario                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabBCP    := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados dos Opcionais da Familia                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabOpc   := {}

	// ARRAY DOS ALIAS BZ
	PRIVATE aCabBZN   := {}
	PRIVATE aCabBZO   := {}
	PRIVATE aCabBZP   := {}
	PRIVATE aCabBZ0   := {}
	PRIVATE aCabBZ1   := {}
	PRIVATE aCabBZQ   := {}
	PRIVATE aCabBZR   := {}
	PRIVATE aCabBZS   := {}
	PRIVATE aCabBVH   := {}
	PRIVATE aCabBVC   := {}
	PRIVATE aCabBVF   := {}

	PRIVATE aCabBZU   := {}
	PRIVATE aCabBZT   := {}
	PRIVATE aCabBZV   := {}

	// ARRAY DOS ALIAS BV
	PRIVATE aCabBV0   := {}
	PRIVATE aCabBV1   := {}
	PRIVATE aCabBV2   := {}
	PRIVATE aCabBV3   := {}
	PRIVATE aCabBV4   := {}
	PRIVATE aCabBV5   := {}
	PRIVATE aCabBV6   := {}
	PRIVATE aCabBV7   := {}
	PRIVATE aCabBV8   := {}
	PRIVATE aCabBV9   := {}
	PRIVATE aCabBVA   := {}
	PRIVATE aCabBVI := {}
	PRIVATE aCabBVJ := {}
	PRIVATE aCabBVM := {}
	PRIVATE aCabQTD := {}
	PRIVATE aCabCQtd:= {}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Formas de Cobranca da Familia...                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabFor := {}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Formas de Cobranca do Opcional...                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabFrOpc 	:= {}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Formas de Cobranca do Opcional (Usuario)                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabUFrOpc 	:= {}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Formas de CObranca da Taxa de Adesao...                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabAde := {}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados do Historico dos Opcionais da Familia                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabHOpc  	:= {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados dos Opcionais do Usuario                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabOUsu   	:= {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados do Historico dos Opcionais do Usuario                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabHOUsu   := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados da Gratuidade da Familia                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabGra   	:= {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Protecao financeira                                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabB1V   	:= {}
	PRIVATE aCabB1S   	:= {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ GetDados da Gratuidade do Usuario                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabGUsu   	:= {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Detalhamento da Forma de Cobranca ...                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE aCabDet  	:= {}
	PRIVATE aCabTxD  	:= {}

	PRIVATE aCabBFJ 	:= {}
	PRIVATE aCabBW9 	:= {}
	PRIVATE aCabBFO 	:= {}
	PRIVATE aCabBWA 	:= {}
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ GetDados do Cancelamento Reajuste                                   ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    PRIVATE aCabBYW    := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Cria cache de estrutura                                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PRIVATE	aStruBA1	:= BA1->(dbStruct())
	PRIVATE	aStruBF1	:= BF1->(dbStruct())
	PRIVATE	aStruSE1	:= SE1->(dbStruct())
	PRIVATE	aStruBED	:= BED->(dbStruct())
	PRIVATE	aStruBC3	:= BC3->(dbStruct())
	PRIVATE	aStruBH5	:= BH5->(dbStruct())
	PRIVATE aStruBFC	:= BFC->(dbStruct())
	PRIVATE	aStruBFD	:= BFD->(dbStruct())
	PRIVATE	aStruBW7	:= BW7->(dbStruct())
	PRIVATE	aStruBF3	:= BF3->(dbStruct())
	PRIVATE	aStruBFJ	:= BFJ->(dbStruct())
	PRIVATE	aStruBDK	:= BDK->(dbStruct())
	PRIVATE	aStruBHH	:= BHH->(dbStruct())
	PRIVATE	aStruBCP	:= BCP->(dbStruct())
	PRIVATE	aStruBF4	:= BF4->(dbStruct())
	PRIVATE	aStruBYX	:= BYX->(dbStruct())
	PRIVATE	aStruBGU	:= BGU->(dbStruct())
	PRIVATE	aStruBCA	:= BCA->(dbStruct())
	PRIVATE	aStruBH6	:= BH6->(dbStruct())
	PRIVATE	aStruBFE	:= BFE->(dbStruct())
	PRIVATE	aStruBVI	:= BVI->(dbStruct())
	PRIVATE	aStruBVJ	:= BVJ->(dbStruct())
	PRIVATE	aStruBVM	:= BVM->(dbStruct())
	PRIVATE	aStruBFG	:= BFG->(dbStruct())
	PRIVATE	aStruBW9	:= BW9->(dbStruct())
	PRIVATE	aStruBFO	:= BFO->(dbStruct())
	PRIVATE	aStruBWA	:= BWA->(dbStruct())
	PRIVATE	aStruBK0	:= BK0->(dbStruct())
	PRIVATE	aStruBJL	:= BJL->(dbStruct())

	PRIVATE	aStruBYW	:= Iif(lCriaBYW,BYW->(dbStruct()),{})
	PRIVATE	aStruB1V	:= IiF(lCriaB1V,B1V->(dbStruct()),{})
	PRIVATE	aStruB1S	:= IiF(lCriaB1S,B1S->(dbStruct()),{})
	PRIVATE aStruB78	:= IiF(lCriaB78,B78->(dbStruct()),{})
	PRIVATE	aStruB1W	:= IiF(lCriaB1W,B1W->(dbStruct()),{})
EndIf

DEFAULT lAutoma		 := .F.

If Existblock("PLS260MN")
	If !(Execblock("PLS260MN",.F.,.F.,{nOpc}))
		Return(.F.)
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Liga variavel lAmbos...                                                           |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type('lAmbos') <> "L"
   lAmbos := .F.
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Liga variavel lJuridico...                                                        |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type('lJuridico') <> "L" .Or. lAmbos
	lJuridico := !Empty(BA1->BA1_CONEMP)
Endif

//-------------------------------------------------------------------
//  LGPD
//-------------------------------------------------------------------
	objCENFUNLGP:useLogUser()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se o contrato estiver bloqueado nao sera possivel alterar nenhum dado do mesmo... |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se o subcontrato estiver bloqueado so sera possivel visualizar os registros...  	  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lJuridico
	If nOpc # K_Incluir
		If BQC->(BQC_FILIAL + BQC_CODIGO + BQC_NUMCON + BQC_VERCON + BQC_SUBCON + BQC_VERSUB) <> ;
   		   BA1->(BA1_FILIAL + BA1_CODINT + BA1_CODEMP + BA1_CONEMP + BA1_VERCON + BA1_SUBCON + BA1_VERSUB)
		   BQC->(DbSetOrder(1))
		   BQC->(DbSeek(xFilial("BQC")+BA1->(BA1_CODINT + BA1_CODEMP + BA1_CONEMP + BA1_VERCON + BA1_SUBCON+BA1_VERSUB)))
		Endif
	Endif

	If (!Empty(BQC->BQC_DATBLO) .and. !Empty(BQC->BQC_CODBLO)) .and. (nOpc # K_Visualizar)
		Aviso(OemtoAnsi(STR0011),OemtoAnsi(STR0012) ,;		//"Este subcontrato encontra-se bloqueado. So sera permitido a visualizacao dos registros ja existentes!"
		{OemtoAnsi(STR0015)})

		DbSelectArea("BA1")

		Return
	Endif
Endif

If nOpc # K_Incluir .and. nOpc # K_Visualizar
	BA3->( dbSetorder(01) )
	If BA3->( MsSeek(xFilial("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)))

		If !Empty(BA3->BA3_MOTBLO)

			Aviso(OemtoAnsi(STR0013),OemtoAnsi(STR0014) ,; //"Esta familia encontra-se bloqueada, o registro somente podera ser visualizado."
				{OemtoAnsi(STR0015)})

			DbSelectArea("BA1")

			Return
		Endif
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variavel statica que armazena o alias do MBROWSE.                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cAliax := cAlias

Return A260Mov(cAlias,nReg,nOpc,lAutoma)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260MOV   ºAutor  ³Microsiga           º Data ³  05/27/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP6                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function A260Mov(cAlias,nReg,nOpc, lAutoma)
Local I__f := 0
Local nCont
Local nCnt
Local nI
Local nInd
Local nDadFam
Local nDadUsr
Local nCols
Local nUsuarios	:=0
Local nCntFor	:= 0
Local nX		:= 0
Local nIx		:= 0
Local lRetQuest := .F.
Local oSubFol01
Local oSubFol02
LOCAL cTitulo
LOCAL aAdesoes	:= {}
Local aButUsr	:= {}
LOCAL aRecsBA1  := {}
LOCAL nRegBA1 	:= 0
LOCAL nXy		:= 0
LOCAL lIncLogin := GetNewPar("MV_PILOGAU",.F.)
LOCAL cMvPLTIT  := SuperGetMv("MV_PLCDTIT")
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variavel do para Ponto de Entrada - Familia Usuario em 04/11/05     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local aPL260AGR	:= {}							//Arry Retorna o GetArea do P.Entrada Antes da Gravacao
LOCAL oDlgFolder
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis da EnchoiceBar...                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL bOK      := {|| nOpca := 1,If( PLSA260OK(nOpc,M->BA3_CODINT+M->BA3_CODEMP,M->BA3_MATRIC),(PlsEndBrw(),oDlgFolder:End()),nOpca:=2),If(nOpca==1,oDlgFolder:End(),.F.) }
LOCAL bCancel  := NIL 

LOCAL bWhenVinc:= {|| Iif(Type('oBrwFrOpc')<>'U',Iif(BF1->(FieldPos("BF1_TIPVIN")) > 0, oBrwFrOpc:oBrowse:oBrowse:lReadOnly := oBrwOpc:FieldGet("BF1_TIPVIN")=='1',NIL), NIL) }
Local oBotCobOpc
Local oBotOCobOpc
Local aButtons  := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Salva dados do BA1...                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL nOrdBA1 := BA1->(IndexOrd())
LOCAL nRecBA1 := BA1->(Recno())
LOCAL nOrdBQC := BQC->(IndexOrd())
LOCAL nRecBQC := BQC->(Recno())

LOCAL bRest   	:= { || BA1->(DbSetOrder(nOrdBA1)), BA1->(DbGoTo(nRecBA1)) }
LOCAL bRestBQC	:= { || BQC->(dbSetorder(nOrdBQC)), BQC->(dbGoto(nRecBQC)) }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle de lock de registro...                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL lLock   		:= .F.
LOCAL _nH
LOCAL cKeySubCon 	:= BQC->BQC_CODIGO+BQC->BQC_NUMCON+BQC->BQC_VERCON+BQC->BQC_SUBCON+BQC->BQC_VERSUB
LOCAL nContProds 	:= 0
Local lPL260CAR	 	:= ExistBlock("PL260CAR")
Local aDigitos	 	:= {}
Local aUsButtons	:= {} //Array de botoes de usuario

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Parametro informa o tipo padrao indicador do titular...                   |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cTitular 	:= SuperGetMv("MV_PLCDTIT")
LOCAL dIncTit	:= cTod('')

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Parametro controla a criacao automatica de cliente na inclusao da familia |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cCriaCli	 	:= GetNewPar("MV_PLSFMCL","1")

Local cVlCod        := ''
LOCAL cVlLoj        := ''
LOCAL cCodSa1       := ''
LOCAL cLojSa1       := ''
LOCAL nPosTit       := 0
LOCAL nPos			:= 0 // Variaveis para geracao automatica do SA1
Local nIndCob := 0
Local nVlCob := 0
Local nTxAde := 0 // Array / Valor para apresentacao do valor de cobranca
Local lGatilho	 	:= .F.
LOCAL cConteudo
LOCAL AuxaVlCob		:= {}
Local aVlCob	 	:= {}
LOCAL aUsrCobAto	:= {}
LOCAL lMsgDepInc    := .T.
LOCAL lStrTPLS		:= FindFunction("StrTPLS")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Para ajudar na identificacao de usuarios de intercambio eventual... ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cOpeInt		:= GetNewPar("MV_PLSGEIN","0050")
LOCAL cIntPad		:= PlsIntPad()
LOCAL lObrig		:= .T.
LOCAL nLinButton	:= 0
LOCAL nLinGetDad	:= 0
LOCAL nColGetDad	:= 0
LOCAL _I
LOCAL cAnoFt		:= ''
LOCAL cMesFt		:= ''

LOCAL cNumAte 	    := ''
LOCAL cTpRg 	    := ''
LOCAL cDig		    := ''
LOCAL cMatEnt	    := ''

LOCAL lReturn       := .F.
LOCAL lForPag 	    := .F.
LOCAL lForCop       := .F.
LOCAL lForCtx       := .F.
LOCAL lFatura	    := .F.
LOCAL lRepUsu	    := .T.
LOCAL aAux		    := {}
LOCAL cChv		    := ""
LOCAL cNiv		    := ""
Local aR5           := {{015,022,032},{005,012,022}}
LOCAL cSqlFilial    := ""
Local aTrbBlo	    :={}
Local nIFor        := 0
Local nQtdFoCob    := 0
Local cCodFrCob    := ""

Local nLenBrw := 0


LOCAL lCentralObr := GetNewPar("MV_PLSEXCO",.F.)//Indica se o sistema utilizara a atualizacao automatica da central de obrigacoes sempre que um cadastro relevante for alterado no Protheus
Local lUsaSIP := "1" $ GetNewPar("MV_PLSTIPO","")
Local lUsaSIB := "2" $ GetNewPar("MV_PLSTIPO","")
LOCAL aCritSib := {}
LOCAL lCritSib := .F.
Local cCampos := ""

Local lSIPSincrono := "1" $ GetNewPar("MV_PLOBRSI","1,2")
Local lSIBSincrono := "2" $ GetNewPar("MV_PLOBRSI","1,2")

Local aDadNio := {}
Local aOpcSip := {}
Local aDadCob := {}
Local aDadNioAux := {}
Local aDadCobJob := {}
Local aDadCobAux := {}
Local aAlias	 := {"BA3","BA1"} 

Local lPLSXFILI := ExistBlock( "PLSXFILI" )
Local lPL260TPI := ExistBlock("PL260TPI")
local lPL260COR := ExistBlock('PL260COR')
Local Inclui	:= .F.
Local lCliFam	:= .F.
local cColor := ""
local nDiasBloq  := GetNewPar("MV_PLDIABL",0)

LOCAL lIncSU5   := GetNewPar("MV_PLSCONT",.F.)
Local cFunNa    := FunName()
LOCAL ba3Num := ""
LOCAL cSemaforo := ""

//Variaveis responsaveis pelos dados do endereço do titular/Responsavel da Familia
Local cEndSA1
Local cNumSA1
Local cCodMunSA1
Local cCepUsr 
Local cEndere 
Local cBairro 
Local cMunici 
Local cEstado 
Local cCodMun 
Local cNrEnd	
Local cComend 
Local cTipEnd 
Local cResExt

PRIVATE oBotPro
PRIVATE oBotRea
PRIVATE oBotFrOpc
PRIVATE oBotUFrOpc
PRIVATE oBotAde
PRIVATE lPrim260 	:= nOpc = K_Incluir
PRIVATE cCodFor		:= ''
PRIVATE aDadPla		:= {}
PRIVATE cCodEqp		:= ''
PRIVATE cCodVen1	:= ''
PRIVATE cCodVen2	:= ''
PRIVATE aCabBYW    	:= {}
PRIVATE aCabB78  	:= {}

PRIVATE nFldB1V		:= 0
PRIVATE nFldB1S		:= 0
PRIVATE nFldB78		:= 0
PRIVATE nFldB1W 	:= 0
PRIVATE nFldBYW 	:= 0

PRIVATE aBTSChave  := {}
PRIVATE aBTSHeader := {}
PRIVATE aBTSCols   := {}
PRIVATE aBTSTrab   := {}
PRIVATE aBTSBKP    := {}
PRIVATE lAltCli    := .F.

DEFAULT lAutoma	   := .F.

objCENFUNLGP:setAlias(aAlias)

/*quando chamado da rotina de análise de beneficiários
o cancelar deve exibir uma mensagem específica*/
If lCentralObr .AND. IsInCallStack("PLSA977AB")
	bCancel := {||PlBlcCanc(@nOpca, @oDlgFolder)}
Else
	bCancel := {|| If(MsgYesNo(__cMsgAban),(nOpca := 0, oDlgFolder:End()),.F.) }
EndIf

If !BED->(FieldPos("BED_USRDEL"))>0
	Aviso(OemtoAnsi(STR0071),OemtoAnsi(STR0184)+;//"O campo BED_USRDEL deve ser criado."
		CHR(10)+CHR(13)+OemtoAnsi(STR0185),{OemtoAnsi(STR0177)},1)//"Execute o compatibilizador UPDPLS9Q"
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta botoes                                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aadd(aButtons,{"poscli"  ,{|| PLS260ALC() },OemtoAnsi(STR0016),OemtoAnsi(STR0165)}) //"Alterar Cliente da Familia"

If  ! Inclui
		aadd(aButtons,{"SALARIOS",{|| PLPOSFIN(BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC,.T.,.T.) },OemtoAnsi(STR0017),OemtoAnsi(STR0030)})// "Posicao Financeira"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Para visualizacao do Historico da Transferencia³
		//³Alexander 22/03/2005                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If  FindFunction("PL169HIST")
			aadd(aButtons,{"historic",{|| A260HIST() },OemtoAnsi(STR0018),OemtoAnsi(STR0166)}) //"Historico Transferencia"
		Endif
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Para visualizacao do Historico de Desbloqueio  ³
	//³Alexander 17/05/2005                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If  FindFunction("PL310HDE") .and. ;
			ChkFile("BQY") .and. ;
			BQY->(FieldPos("BQY_MATRIC")) > 0
		aadd(aButtons,{"bmpincluir",{|| A260HIST(2) },OemtoAnsi(STR0019),OemtoAnsi(STR0167)}) //"Historico Usuario Reativado"
	Endif

	If  FindFunction("PLSC005")
		aadd(aButtons,{"S4WB016N",{|| PLSC005(oBrwUsr,oBrwDoe) },OemtoAnsi(STR0020),OemtoAnsi(STR0168)}) //"Consultar Cobertura/Carencia"
	Endif
EndIf

If ExistBlock( "PLS260BUT" )
	If ValType( aUsButtons := ExecBlock( "PLS260BUT", .F., .F. ) ) == "A"
		AEval( aUsButtons, { |x| AAdd( aButtons, x ) } )
	EndIf
EndIf

If  FindFunction("PLCONSREC")
	aadd(aButtons,{"RECEITAS",{|| PLCONSREC("BA1", oBrwUsr) },"Receitas"}) //"Historico Usuario Reativado"
Endif

aadd(aButtons,{STR0277/*"Bco Conhec."*/,{|| PL260CONHEC("BA1", oBrwUsr) },"Bco Conhec."}) //"Bco  Conhec"


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inicializa variaveis                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type('lAmbos') <> "L"
   lAmbos := .F.
Endif

If nOpc <> K_Incluir
	cChave  := BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)
	cTipReg := BA1->BA1_TIPREG
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona no contrato do usuario selecionado no browse...           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpcx <> K_Incluir
	BA3->(DbSetOrder(1))
	If ! BA3->(MsSeek(xFilial("BA3")+cChave))
		Help("",1,"PLSA260BA3")
		Eval(bRest)
		Eval(bRestBQC)

		Return
	Else
		nRegEnc := BA3->(Recno())

		BG9->(DbSetOrder(1))
		BG9->(MsSeek(xFilial("BG9")+BA3->(BA3_CODINT+BA3_CODEMP)))

		If BG9->BG9_TIPO == "2"
			BT5->(DbSetOrder(1))
			BT5->(MsSeek(xFilial("BT5")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_CONEMP+BA3_VERCON)))
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Posiciona o Subcontrato                                                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			BQC->(DbSetOrder(1))
			BQC->(MsSeek(xFilial("BQC")+BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_CONEMP+BA3->BA3_VERCON+BA3->BA3_SUBCON+BA3->BA3_VERSUB))
		Endif
	Endif
Else
	If BG9->BG9_TIPO == "2"
		BT5->(DbSetOrder(1))
		BT5->(MsSeek(xFilial("BT5")+BQC->(BQC_CODIGO+BQC_NUMCON+BQC_VERCON)))
	Endif
Endif

If nOpc <> K_Incluir
	cTitulo := BA1->BA1_TIPREG+" - "+BA1->BA1_NOMUSR
	lInterc := ( BT5->BT5_INTERC == "1" .And. Alltrim(BT5->BT5_TIPOIN) == GetNewPar("MV_PLSCDIE","1") )
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta ,M->??? para enchoice...                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpc == K_Incluir
	Copy cAliasEnc To Memory Blank
Else
	If !lAmbos
		If !Empty(BA3->BA3_CONEMP)
			lJuridico := .T.
		Else
			lJuridico := .F.
		Endif
	Endif
	RegToMemory(cAliasEnc, .F., .F. )
EndIf



//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a GetDados do Folder Usuarios                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cOrderBy := "ORDER BY BA1_FILIAL,BA1_CODINT,BA1_CODEMP,BA1_MATRIC,BA1_TIPREG"
PL260POPDAD("BA1",aCabUsr,aDadUsr,aTrbUsr,,,"(SX3->X3_CAMPO # 'BA1_CODEMP')",cOrderBy )


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³      Ajusta legenda Inclusão futuro                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

aCores	:={}
aCdCores:={}

Pl260Cores(@aCores,@aCdCores)

nLen := Len(aDadUsr)
nPosImage := PLRETPOS("BA1_IMAGE",aCabUsr)
nPosTipUso:= PLRETPOS("BA1_TIPUSU",aCabUsr)
nPosTipReg:= PLRETPOS("BA1_TIPREG",aCabUsr)
nPosDigito:= PLRETPOS("BA1_DIGITO",aCabUsr)

aAreaBA1     := BA1->(GetArea())
BA1->(DbSetOrder(1))
For nX := 1 to nLen

	If BA1->(MsSeek(xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+aDadUsr[nX,nPosTipUso]+aDadUsr[nX,nPosTipReg]+aDadUsr[nX,nPosDigito]))
		IF ExistBlock('PL260COR')
			// Irá percorrer todas as cores e verificar qual se encaixa
			For nIx := 1 To Len(aCores)
				If BA1->(&(aCores[nIx][1])) // Executa codição para cor da legenga
					aDadUsr[nX,nPosImage]	:= aCores[nIx][2] // atribui a cor da legenda
					Exit	
				EndIf 
			Next
		Else	
			aDadUsr[nX,nPosImage]  := PLLegBloq("BA1")
		Endif	
	Endif

Next nX

RestArea(aAreaBA1)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³      Ajusta legenda Inclusão futuro                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF !lPL260COR
	nLen := Len(aDadUsr)
	nPosDtInc := PLRETPOS("BA1_DATINC",aCabUsr)
	nPosImage := PLRETPOS("BA1_IMAGE",aCabUsr)
	nPosMotBlo:= PLRETPOS("BA1_MOTBLO",aCabUsr)
	
	oBmpBranco := LoadBitmap( GetResources(), "BR_BRANCO")
	For nX := 1 to nLen
	
		dDatInc := aDadUsr[nX,nPosDtInc]
		If !Empty(dDatInc) .AND. dDatInc > dDataBase .And. Empty(aDadUsr[nX,nPosMotBlo])
			aDadUsr[nX,nPosImage] := oBmpBranco:cName
		EndIf
		
	Next nI
EndIf



//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados dos Opcionais da Familia                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PL260POPDAD("BF1",aCabOpc,aDadOpc,aTrbOpc)

DadosBZ()
DadosBV()
DadosOut()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados do Historico Financeiro                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpcx <> K_Incluir
	lDadFin := .T.

	If Len( aCabFin ) == 0
		Store Header "SE1" TO aCabFin For .T.

		SX3->(DbSetOrder(2))
		SX3->(MsSeek("E1_SALDO"))
		aadd(aCabFin,{X3TITULO(),SX3->X3_CAMPO,SX3->X3_PICTURE,SX3->X3_TAMANHO,SX3->X3_DECIMAL,SX3->X3_VALID,SX3->X3_USADO,SX3->X3_TIPO,SX3->X3_ARQUIVO,SX3->X3_CONTEXT})
	Endif

	If BA3->BA3_COBNIV == "1"

		cQuery    := ""

		lQuery := .T.

		cAliasSE1 := "QRYSE1"

		If lPLSXFILI
			cSqlFilial := ExecBlock( "PLSXFILI", .F., .F., {"SE1"} )
		Else
			cSqlFilial := xFilial("SE1")
		EndIf

		PL260POPDAD("SE1",aCabFin,aDadFin,aTrbFin,cSqlFilial)

	Else
		Store COLS Blank "SE1" TO aDadFin FROM aCabFin
		lDadFin := .F.
	Endif
Else
	lDadFin := .F.
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classifica em ordem de data de vencimento...                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lDadFin
	nPosDat := PLRETPOS("E1_VENCREA",aCabFin)
	If nPosDat > 0
		aDadFin := aSort(aDadFin,,, { |x, y| x[nPosDat] > y[nPosDat] })
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a Getdados do Historico de Cobranca de Carteirinha            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBED ) == 0
	Store HEADER "BED" TO aCabBED For .T. .And. ! SX3->X3_CAMPO $ "BED_CODINT,BED_CODEMP,BED_MATRIC"
Endif

PL260POPDAD("BED",aCabBED,aDadBED,aTrbBED)


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a Getdados Cancelamento Reajuste                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaBYW
	If Len( aCabBYW ) == 0
		Store HEADER "BYW" TO aCabBYW For .T. .And. ! SX3->X3_CAMPO $ "BYW_CODINT,BYW_CODEMP,BYW_MATRIC"
	Endif

	PL260POPDAD("BYW",aCabBYW,aDadBYW,aTrbBYW)

Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a Getdados do Bloqueio da familia ...                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectarea("BC3")
If Len( aCabBlo ) == 0
	Store HEADER "BC3" TO aCabBlo For.T.  .And. SX3->X3_CAMPO <> "BC3_MATRIC" .And. SX3->X3_CAMPO <> "BC3_NOMUSR"
Endif

cQuery := " BC3_MATRIC = '"+cChave+"' AND "

cOrderBy := " ORDER BY R_E_C_N_O_ "

PL260POPDAD("BC3",aCabBlo,aDadBlo,aTrbBlo,,cQuery,,cOrderBy )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Historico de Gratuidade da Familia ...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabGra ) == 0
	Store HEADER "BH5" TO aCabGra For .T. .And. SX3->X3_CAMPO <> "BH5_USUARI" .And. SX3->X3_CAMPO <> "BH5_CODINT" .And. SX3->X3_CAMPO <> "BH5_CODEMP" .And.;
		SX3->X3_CAMPO <> "BH5_MATRIC" .And. SX3->X3_CAMPO <> "BH5_NOMRES"
Endif

PL260POPDAD("BH5",aCabGra,aDadGra,aTrbGra)


If lCriaB1V
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Historico de Gratuidade da Familia ...                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Len( aCabB1V ) == 0
		Store HEADER "B1V" TO aCabB1V For .T. .and. SX3->X3_CAMPO <> "B1V_CODINT" .And. SX3->X3_CAMPO <> "B1V_CODEMP" .And.;
		SX3->X3_CAMPO <> "B1V_MATRIC"
	Endif

	PL260POPDAD("B1V",aCabB1V,aDadB1V,aTrbB1V)
		
Endif

If lCriaB1S
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Historico de Gratuidade da Familia ...                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	PL260POPDAD("B1S",aCabB1S,aDadB1S,aTrbB1S)
		
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura da Familia  - Grupo de Cobertura                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

PL260POPDAD("BFC",aCabGruF,aDadGruF,aTrbGruF)


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura da Familia  - Procedimentos                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

PL260POPDAD("BFD",aCabProF,aDadProF,aTrbProF)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupos de Quantidades da Familia... - Geraldo Felix - 16/03/03 - Botucatu ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

PL260POPDAD("BW7",aCabQtd,aDadQtd,aTrbQtd)



//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Doenca pre-existente do Usuario ...                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

PL260POPDAD("BF3",aCabDoe,aDadDoe,aTrbDoe)


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe de carencia da familia... Geraldo Felix Junior - 13/12/03          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("BFJ")

	PL260POPDAD("BFJ",aCabBFJ,aDadBFJ,aTrbBFJ)

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Historico de parcelamento				                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaB78
	
	PL260POPDAD("B78",aCabB78,aDadB78,aTrbB78)
	
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Faixas etarias especificas do usuario...                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

cOrderBy := " ORDER BY BDK_IDAINI "

PL260POPDAD("BDK",aCabBDK,aDadBDK,aTrbBDK,,,,cOrderBy)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo do Rol de Procedimentos nao pertencentes ao Usuario			³
//³ Alexander 01/06/2005												³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaB1W

	PL260POPDAD("B1W",aCabB1W,aDadB1W,aTrbB1W)
	
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Situacoes adversas do usuario...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PL260POPDAD("BHH",aCabBHH,aDadBHH,aTrbBHH)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Documentos Obrigatorios do Usuario...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

cQuery := "BCP_CODOPE = '"+BA1->BA1_CODINT+"' AND "
	cQuery += "BCP_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
	cQuery += "BCP_MATRIC = '"+BA1->BA1_MATRIC+"' AND "

PL260POPDAD("BCP",aCabBCP,aDadBCP,aTrbBCP,,cQuery)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Opcionais do Usuario ...                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PL260POPDAD("BF4",aCabOUsu,aDadOUsu,aTrbOUsu)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Forma DE COBRANCA Opcional Usuario                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cQuery := "BYX_CODOPE = '"+BA1->BA1_CODINT+"' AND "
	cQuery += "BYX_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
	cQuery += "BYX_MATRIC = '"+BA1->BA1_MATRIC+"' AND "

PL260POPDAD("BYX",aCabUFrOpc,aDadUFrOpc,aTrbUFrOpc,,cQuery)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a Getdados do Historico dos Opcionais do Usuario...           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabHOUsu ) == 0
	Store HEADER "BGU" TO aCabHOUsu For .T.  .And. SX3->X3_CAMPO <> "BGU_MATRIC"  .And. SX3->X3_CAMPO <> "BGU_NOMUSR"
Endif

cQuery := "BGU_MATRIC = '"+cChave+"' AND "
cOrderBy := " ORDER BY R_E_C_N_O_ "

PL260POPDAD("BGU",aCabHOUsu,aDadHOUsu,aTrbHOUsu,,cQuery,,cOrderBy)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Historico de Bloqueio dos Usuarios ...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBUsu ) == 0
	Store Header "BCA" TO aCabBUsu For .T.  .And. SX3->X3_CAMPO <> "BCA_MATRIC" .And. SX3->X3_CAMPO <> "BCA_NOMUSR"
Endif

cQuery := "BCA_MATRIC = '"+cChave+"' AND "

cOrderBy := " ORDER BY R_E_C_N_O_ "
PL260POPDAD("BCA",aCabBUsu,aDadBUsu,aTrbBUsu,,cQuery,,cOrderBy )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Historico de Gratuidade da Familia ...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabGUsu ) == 0
	Store HEADER "BH6" TO aCabGUsu For .T. .And. SX3->X3_CAMPO <> "BH6_USUARI" .And. SX3->X3_CAMPO <> "BH6_CODINT" .And. SX3->X3_CAMPO <> "BH6_CODEMP" .And.;
		SX3->X3_CAMPO <> "BH6_MATRIC" .And. SX3->X3_CAMPO <> "BH6_NOMRES"
Endif

		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BH6",aCabGUsu,aDadGUsu,aTrbGUsu)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura do Usuario  - Grupo de Cobertura                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		   
		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BFE",aCabBFE,aDadBFE,aVetBFE)


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe carencia - Grupo determinados                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BVI",aCabBVI,aDadBVI,aVetBVI)


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe carencia - Grupo determinados                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BVJ",aCabBVJ,aDadBVJ,aVetBVJ)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe carencia - Grupo determinados                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BVM",aCabBVM,aDadBVM,aVetBVM)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura do Usuario  - Procedimentos                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BFG",aCabBFG,aDadBFG,aVetBFG)

//³ Grupos de Quantidades do usuario... - Geraldo Felix - 16/03/03 - Botucatu ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BW9",aCabBW9,aDadBW9,aTrbBW9)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupos de Quantidades do usuario... - Geraldo Felix - 16/03/03 - Botucatu ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("BFO")

			   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
	PL260POPDAD("BFO",aCabBFO,aDadBFO,aTrbBFO)
	
	Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a GetDados da Co-Participacao para Grupo de Quantidades do usuario  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		   //cAlias,AcabGen,aDadGen,aTrbGen,cFilialGen,cQuery
PL260POPDAD("BWA",aCabBWA,aDadBWA,aTrbBWA)


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle Forma de Cobranca ...                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aVetsFor := PL260CRCOB(nOpc, cAlias)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ para o controle de alteracao da forma de cobranca...                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpc <> K_Incluir
	Aadd(aForAltFam, aVetsFor)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle Forma de Cobranca de Opcional ...                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpc <> K_Incluir

	cOldAlias := cAlias

	cQuery := ""

	lQuery := .T.

	cAliasBK0 := "QRYBK0"

	cQuery := "SELECT BK0.* "
	cQuery += " FROM "
	cQuery += RetSqlName("BK0")+ " BK0 "
	cQuery += " WHERE "
	cQuery += "BK0_FILIAL = '"+xFilial("BK0")+"' AND "
	cQuery += "BK0_CODOPE = '"+BA1->BA1_CODINT+"' AND "
	cQuery += "BK0_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
	cQuery += "BK0_MATRIC = '"+BA1->BA1_MATRIC+"' AND "
	cQuery += "BK0.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBK0,.F.,.T.)

	For nCntFor := 1 To Len(aStruBK0)
		If ( aStruBK0[nCntFor,2]<>"C" )
			TcSetField(cAliasBK0,aStruBK0[nCntFor,1],aStruBK0[nCntFor,2],aStruBK0[nCntFor,3],aStruBK0[nCntFor,4])
		EndIf
	Next nCntFor

	While !(cAliasBK0)->(Eof())

		cCodFor  := (cAliasBK0)->BK0_CODFOR
		aOpcoes  := A260MOpc(cCodFor)
		aDados   := {}
		aCabec   := {}

		For nI := 1 To Len(aOpcoes)
			aRecTrab := {}
			cAlias   := aOpcoes[nI,2]
			cTipo    := aOpcoes[nI,3]
			cTit     := aOpcoes[nI,1]

			DbSelectArea(cAlias)
			DbSetOrder(1)
			If cTipo = "1" .Or. "_CODFOR" $ IndexKey()
				MsSeek(xFilial(cAlias)+BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC+(cAliasBK0)->BK0_CODOPC+(cAliasBK0)->BK0_VEROPC+cCodFor)
			Else
				MsSeek(xFilial(cAlias)+BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC+(cAliasBK0)->BK0_CODOPC+(cAliasBK0)->BK0_VEROPC)
			Endif

			If Found() .And. cTipo == "0" // Enchoice

				RegToMemory( cAlias, .F., .F. )

				aCpos   := {}
				aFields := DBSTRUCT()
				For nCont := 1 To Len(aFields)
					cTrab := "M->"+aFields[nCont,1]
					cDado := &cTrab
					aadd(aCpos,{cTrab,cDado})
				Next
				aadd(aVetsOpc,{cCodFor+(cAliasBK0)->BK0_CODOPC+(cAliasBK0)->BK0_VEROPC,cAlias,cTipo,aCpos,Recno()})
			ElseIf cTipo == "1" // GetDados
				_cChave := cAlias+"_FILIAL+"+;
					cAlias+"_CODOPE+"+;
					cAlias+"_CODEMP+"+;
					cAlias+"_MATRIC+"+;
					cAlias+"_CODOPC+"+;
					cAlias+"_VEROPC+"+;
					cAlias+"_CODFOR"
				STORE HEADER cAlias TO aCabec For .T.
				If Found()
					Store COLS cAlias TO aDados FROM aCabec VETTRAB aRecTrab While &_cChave == xFilial("BK0")+cChave+(cAliasBK0)->BK0_CODOPC+(cAliasBK0)->BK0_VEROPC+cCodFor
				Else
					Store COLS Blank cAlias TO aDados FROM aCabec
				Endif

				// Trata a matriz, para alimentar o codigo do produto corretamente.
				For nCnt := 1 To Len(aDados)
					aDados[n][PLRETPOS(cAlias+"_CODOPC",aCabec)] := (cAliasBK0)->BK0_CODOPC
					aDados[n][PLRETPOS(cAlias+"_VEROPC",aCabec)] := (cAliasBK0)->BK0_VEROPC
				Next

				aadd(aVetsOpc,{cCodFor+(cAliasBK0)->BK0_CODOPC+(cAliasBK0)->BK0_VEROPC,cAlias,cTipo,aDados,aRecTrab})
			Endif
		Next
		(cAliasBK0)->(DbSkip())
	Enddo

	(cAliasBK0)->(dbCloseArea())
	dbSelectArea("BK0")

	Aadd(aForAltFam, aVetsOpc)

	cAlias := cOldAlias
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle Forma de Cobranca da Taxa de Adesao...                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpc <> K_Incluir

	cOldAlias := cAlias

	cQuery := ""

	lQuery := .T.

	cAliasBJL := "QRYBJL"

	cQuery := "SELECT BJL.* "
	cQuery += " FROM "
	cQuery += RetSqlName("BJL")+ " BJL "
	cQuery += " WHERE "
	cQuery += "BJL_FILIAL = '"+xFilial("BJL")+"' AND "
	cQuery += "BJL_CODOPE = '"+BA1->BA1_CODINT+"' AND "
	cQuery += "BJL_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
	cQuery += "BJL_MATRIC = '"+BA1->BA1_MATRIC+"' AND "
	cQuery += "BJL.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBJL,.F.,.T.)

	For nCntFor := 1 To Len(aStruBJL)
		If ( aStruBJL[nCntFor,2]<>"C" )
			TcSetField(cAliasBJL,aStruBJL[nCntFor,1],aStruBJL[nCntFor,2],aStruBJL[nCntFor,3],aStruBJL[nCntFor,4])
		EndIf
	Next nCntFor

	While !(cAliasBJL)->(Eof())

		cCodFor  := (cAliasBJL)->BJL_CODFOR
		aOpcoes  := A260MOpc(cCodFor)
		aDados   := {}
		aCabec   := {}

		For nI := 1 To Len(aOpcoes)
			aRecTrab := {}
			cAlias   := aOpcoes[nI,2]
			cTipo    := aOpcoes[nI,3]
			cTit     := aOpcoes[nI,1]

			DbSelectArea(cAlias)
			DbSetOrder(1)
			If cTipo = "1" .Or. "_CODFOR" $ IndexKey()
				MsSeek(xFilial(cAlias)+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cCodFor)
			Else
				MsSeek(xFilial(cAlias)+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC))
			Endif

			If Found() .And. cTipo == "0" // Enchoice

				RegToMemory( cAlias, .F., .F. )

				aCpos   := {}
				aFields := DBSTRUCT()
				For nCont := 1 To Len(aFields)
					cTrab := "M->"+aFields[nCont,1]
					cDado := &cTrab
					aadd(aCpos,{cTrab,cDado})
				Next
				aadd(aVetsTxF,{cCodFor,cAlias,cTipo,aCpos,Recno()})
			ElseIf cTipo == "1" // GetDados
				_cChave := cAlias+"_FILIAL+"+;
					cAlias+"_CODOPE+"+;
					cAlias+"_CODEMP+"+;
					cAlias+"_MATRIC+"+;
					cAlias+"_CODFOR"
				STORE HEADER cAlias TO aCabec For .T.
				If Found()
					Store COLS cAlias TO aDados FROM aCabec VETTRAB aRecTrab While &_cChave == xFilial("BJL")+cChave+cCodFor
				Else
					Store COLS Blank cAlias TO aDados FROM aCabec
				Endif

				// Trata a matriz, para alimentar o codigo do produto corretamente.
				For nCnt := 1 To Len(aDados)
					aDados[n][PLRETPOS(cAlias+"_CODFOR",aCabec)] := cCodFor
				Next

				aadd(aVetsTxF,{cCodFor,cAlias,cTipo,aDados,aRecTrab})
			Endif
		Next
		(cAliasBJL)->(DbSkip())
	Enddo

	(cAliasBJL)->(dbCloseArea())
	dbSelectArea("BK0")

	Aadd(aForAltFam, aVetsTxF)

	cAlias := cOldAlias
Endif



//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle Forma de Cobranca de Opcional (Usuario)                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpc <> K_Incluir
	cOldAlias := cAlias
	BYX->(DbSetOrder(1))
	If BYX->(MsSeek(xFilial("BYX")+cChave))
		While ! BYX->(Eof()) .And. BYX->(BYX_FILIAL+BYX_CODOPE+BYX_CODEMP+BYX_MATRIC) == xFilial("BYX")+cChave

			cCodFor  := BYX->BYX_CODFOR
			aOpcoes  := A260MOpc(cCodFor,"4")
			aDados   := {}
			aCabec   := {}

			For nI := 1 To Len(aOpcoes)
				aRecTrab := {}
				cAlias   := aOpcoes[nI,2]
				cTipo    := aOpcoes[nI,3]
				cTit     := aOpcoes[nI,1]

				DbSelectArea(cAlias)
				DbSetOrder(1)

				If cTipo = "1" .Or. "_CODFOR" $ IndexKey()
					MsSeek(xFilial(cAlias)+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+BYX->BYX_TIPREG+BYX->BYX_CODOPC+BYX->BYX_VEROPC+cCodFor)
				Else
					MsSeek(xFilial(cAlias)+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+BYX->BYX_TIPREG+BYX->BYX_CODOPC+BYX->BYX_VEROPC)
				Endif

				If Found() .And. cTipo == "0" // Enchoice

					RegToMemory( cAlias, .F., .F. )

					aCpos   := {}
					aFields := DBSTRUCT()
					For nCont := 1 To Len(aFields)
						cTrab := "M->"+aFields[nCont,1]
						cDado := &cTrab
						aadd(aCpos,{cTrab,cDado})
					Next
					aadd(aVetsUOpc,{cCodFor+BYX->BYX_TIPREG+BYX->BYX_CODOPC+BYX->BYX_VEROPC,cAlias,cTipo,aCpos,Recno()})
				ElseIf cTipo == "1" // GetDados
					_cChave := cAlias+"_FILIAL+"+;
						cAlias+"_CODOPE+"+;
						cAlias+"_CODEMP+"+;
						cAlias+"_MATRIC+"+;
						cAlias+"_TIPREG+"+;
						cAlias+"_CODOPC+"+;
						cAlias+"_VEROPC+"+;
						cAlias+"_CODFOR"
					STORE HEADER cAlias TO aCabec For .T.
					If Found()
//					    cCondicao := (&_cChave)
						Store COLS cAlias TO aDados FROM aCabec VETTRAB aRecTrab While &_cChave == xFilial(cAlias)+cChave+BYX->BYX_TIPREG+BYX->BYX_CODOPC+BYX->BYX_VEROPC+cCodFor
					Else
						Store COLS Blank cAlias TO aDados FROM aCabec
					Endif

					// Trata a matriz, para alimentar o codigo do produto corretamente.
					For nCnt := 1 To Len(aDados)
						aDados[n][PLRETPOS(cAlias+"_TIPREG",aCabec)] := BYX->BYX_TIPREG
						aDados[n][PLRETPOS(cAlias+"_CODOPC",aCabec)] := BYX->BYX_CODOPC
						aDados[n][PLRETPOS(cAlias+"_VEROPC",aCabec)] := BYX->BYX_VEROPC
					Next

					aadd(aVetsUOpc,{cCodFor+BYX->BYX_TIPREG+BYX->BYX_CODOPC+BYX->BYX_VEROPC,cAlias,cTipo,aDados,aRecTrab})
				Endif
			Next
			BYX->(DbSkip())
		Enddo
	Endif
	cAlias := cOldAlias
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se o contrato so tiver um produto ele sera indicado na familia, aut.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpc == K_Incluir
	If lJuridico
		BT6->( dbSetorder(01) )
		If BT6->( MsSeek(xFilial("BT6")+cKeySubCon) )
			nRegBT6 := BT6->( Recno() )
			While !BT6->(Eof()) .and. BT6->BT6_CODINT+BT6->BT6_CODIGO+BT6->BT6_NUMCON+;
					BT6->BT6_VERCON+BT6->BT6_SUBCON+BT6->BT6_VERSUB == cKeySubCon
				nContProds++
				BT6->( dbSkip() )
			Enddo
			If nContProds == 1
				BT6->( dbGoto(nRegBT6) )
				M->BA3_CODPLA 	:= BT6->BT6_CODPRO
				M->BA3_VERSAO	:= BT6->BT6_VERSAO
				M->BA3_DESPLA	:= CriaVar("BA3_DESPLA")
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Carrega informacao sobre pro rata na saida...                       ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If	BA3->(FieldPos("BA3_RATSAI")) > 0 .and.;
						BT6->(FieldPos("BT6_RATSAI")) > 0
					M->BA3_RATSAI := BT6->BT6_RATSAI
				Endif
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Carrega informacao sobre desconto geral...                          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If	BA3->(FieldPos("BA3_DESMEN")) > 0 .and.;
						BT6->(FieldPos("BT6_DESMEN")) > 0
					M->BA3_DESMEN := BT6->BT6_DESMEN
				Endif

				Plsa260Gcf(.T.)
				lGatilho := .T.
			Endif	
		Endif
		// Atualiza campos de acordo com o subcontrato (Pessoa Juridica)
		M->BA3_COBRAT := BQC->BQC_COBRAT
		M->BA3_COBRET := BQC->BQC_COBRET
		M->BA3_DIARET := BQC->BQC_DIARET

	Endif

ElseIf nOpc == K_Alterar .And. lJuridico 
	If M->BA3_DIARET == 0 
		M->BA3_DIARET := BQC->BQC_DIARET
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dialogo...                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lJuridico
	cCadastro := OemtoAnsi(STR0021) //"Familias/Usuarios - Pessoa Juridica "
Else
	cCadastro := OemtoAnsi(STR0022) //"Familias/Usuarios - Pessoa Fisica "
Endif

SetEnch("")

aSize := MsAdvSize()
aObjects := {}
AAdd( aObjects, { 100, 20, .t., .f. } )
AAdd( aObjects, { 100, 100, .t., .t., .t. } )

aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 3, 3 }
aPosObj := MsObjSize( aInfo, aObjects )
nLinButton	:= aPosObj[2][4]-45
nLinGetDad	:= aPosObj[2][4]-50
nColGetDad	:= aPosObj[2][3]-10

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle de alteracao da forma de cobranca. Salvo o produto e a versao original.|
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
__cCodPla_ 	:= M->BA3_CODPLA
__cVersao_ 	:= M->BA3_VERSAO
__cForCob_	:= M->BA3_FORPAG
__cForTax_	:= M->BA3_FORCTX
__cForOpc_	:= M->BA3_FORCOP

If !lAutoma
	DEFINE MSDIALOG oDlgFolder TITLE cCadastro FROM aSize[7],0 To aSize[6],aSize[5] of oMainWnd PIXEL
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define Folder...                                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	@ aPosObj[2][1],aPosObj[2][2] FOLDER oFolder SIZE aPosObj[2][3],aPosObj[2][4] OF oDlgFolder           PIXEL	PROMPTS	OemtoAnsi(STR0023),OemtoAnsi(STR0024) //"Familia <F4>" "Usuario(s) <F5>"
Endif

SetKey( VK_F4 , { || Eval(oFolder:bChange, 1, nOpc, .T.,.F.) } )
SetKey( VK_F5 , { || Eval(oFolder:bChange, 2, nOpc, .T.,.F.) } )

aTitles := {}
aPages  := {}

aTitles := {	;
	OemtoAnsi(STR0025),; //"Dados do Contrato"
	OemtoAnsi(STR0026),; //"Opcional"
	OemtoAnsi(STR0027),; //"Forma de Cobranca"
	OemtoAnsi(STR0028),; //"Taxa de Adesão"
	OemtoAnsi(STR0029),; //"Historico Opcional"
	OemtoAnsi(STR0030),; //"Financeiro"
	OemtoAnsi(STR0031),; //"Historico Bloqueio da Familia"
	OemtoAnsi(STR0032),; //"Historico Cobranca Carteirinha"
	OemtoAnsi(STR0033),; //"Gratuidade"
	OemtoAnsi(STR0034) } //"Cobertura"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Controla a posição do folder "Cobertura"
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
If lCriaB78
	Aadd(aTitles, OemtoAnsi(STR0191))  //"Parcelamento"
	nFldB78 := Len(aTitles)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Cria folder de proteção financeira na familia se a tabela existir.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
If lCriaB1V
	Aadd(aTitles, OemtoAnsi(STR0211))  //"Proteção Financeira"
	nFldB1V := Len(aTitles)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Alinha aPages com o aTitles.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
For nI := 1 to Len(aTitles)
	Aadd(aPages,"")
Next

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Cria folder da familia.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
If !lAutoma
	oFldFam := TFolder():New(003,003,aTitles,aPages,oFolder:aDialogs[1],,,,.T.,.F.,aPosObj[2][3]-10,aPosObj[2][4]-25) 
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Reseta variaveis para serem re-utilizadas para montar folder de usuarios.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aTitles := {}
aPages  := {}
aTitles := {;
	OemtoAnsi(STR0035),; //"Doenças Pré-existentes"
	OemtoAnsi(STR0036),; //"Documentos Obrigatorios"
	OemtoAnsi(STR0037),; //"Opcional do Usuario"
	OemtoAnsi(STR0038),; //"Opcionais - Forma Cobranca"
	OemtoAnsi(STR0039),; //"Historico dos Opcionais do Usuario"
	OemtoAnsi(STR0040),; //"Historico Bloqueio do Usuario"
	OemtoAnsi(STR0041),; //"Gratuidade do Usuario"
	OemtoAnsi(STR0034),; //"Cobertura"
	OemtoAnsi(STR0043),; //"Situacoes Adversas"
	OemtoAnsi(STR0044) } //"Faixa Etaria Especifica Usuario"
If lCriaB1W
	Aadd(aTitles, OemtoAnsi(STR0045)) //"Grupo do Rol de Procedimentos"
	nFldB1W := Len(aTitles)
EndIf

If lCriaBYW
	Aadd(aTitles, OemtoAnsi(STR0189)) //"Cancelamento Reajuste"
	nFldBYW := Len(aTitles)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Cria folder de proteção financeira no usuario se a tabela existir.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
If lCriaB1S
	Aadd(aTitles, OemtoAnsi(STR0211)) //"Proteção Financeira"
	nFldB1S := Len(aTitles)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Alinha aPages com o aTitles.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
For nI := 1 to Len(aTitles)
	Aadd(aPages,"")
Next
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Cria folder da do usuario.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
If !lAutoma
	oFldUsr := TFolder():New(nLinGetDad/2+15,001,aTitles,aPages,oFolder:aDialogs[2],,,,.T.,.F.,nColGetDad,nLinGetDad)

	@ nLinGetDad/2+15,001 FOLDER oFldFrOpc SIZE aPosObj[2][3]-15,(aPosObj[2][4]/2)-37 OF oFldFam:aDialogs[2] PIXEL  PROMPTS OemtoAnsi(STR0027) //"Forma de Cobranca"		

	oFolder:bChange := { |nFolder| A260Chg(nFolder,nOpc,,.T.,oFolder)}   
	oFldFam:bChange := { || Eval(bVldGFoc) }
	oFldUsr:bChange := { || Eval(bVldGFoc) }
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³ Folder cobertura
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	@ 005,005 FOLDER oFldCobFam SIZE aPosObj[2][3]-10,aPosObj[2][4]-5 OF oFldFam:aDialogs[10] PIXEL PROMPTS	 ;
		OemtoAnsi(STR0046),; //"Grupos de cobertura"
		OemtoAnsi(STR0047),; //"Procedimentos"
		OemtoAnsi(STR0048),; //"Grupo de Quantidade"
		OemtoAnsi(STR0049)   //"Classe de Carência"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³ Monta Enchoice dos Dados Gerais ...
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	dbSelectArea("BA3")
	oEnchoice := BA3->(MsMGet():New(cAliasEnc,nRegEnc,nOpc,,,,,{003,005,aPosObj[2][4]-48,aPosObj[2][3]-16},,,,,,oFldFam:aDialogs[1],,,.F.)) 

	If GetRpoRelease("R5")
		aR5[1][1] := aR5[2][1]
		aR5[1][2] := aR5[2][2]
		aR5[1][3] := aR5[2][3]
	Endif

	@ 033, 006 GROUP oGrupoCon TO 051, 070  OF oDlgFolder LABEL OemtoAnsi(STR0050)  COLOR CLR_HBLUE PIXEL      //" Matricula "
	@ 039, 009 Say oSayCon PROMPT objCENFUNLGP:verCamNPR("BA3_MATRIC",TransForm(M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC,"@R !.!!!-!!!!-!!!!!!")) SIZE 060, 010 OF oDlgFolder PIXEL COLOR CLR_HBLUE

	@ 033, 076 GROUP oGrupoCon TO 051, 250 OF oDlgFolder LABEL OemtoAnsi(STR0051)  COLOR CLR_HBLUE PIXEL  //" Operadora "
	@ 039, 079 Say oSayCon PROMPT POSICIONE("BA0",1,XFILIAL("BA0")+M->BA3_CODINT,"BA0_NOMINT") SIZE 174, 010  OF oDlgFolder PIXEL COLOR CLR_HBLUE

	@ 033, 255 GROUP oGrupoCon TO 051, 565 OF oDlgFolder LABEL OemtoAnsi(STR0052)  COLOR CLR_HBLUE PIXEL //" Nome Usuarios "
	@ 039, 258 Say oSay01 PROMPT "" SIZE 332, 010 OF oDlgFolder PIXEL COLOR CLR_HBLUE

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define botoes para a enchoicebar do cadastro de usuarios...         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock( "A260USBT" )
		If ValType( aButUsr := ExecBlock( "A260USBT", .F., .F. ) ) <> "A"
			aButUsr := {}
		EndIf
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Armazenando as informacoes de vendedor                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cCodEqp  := M->BA3_EQUIPE
	cCodVen1 := M->BA3_CODVEN
	cCodVen2 := M->BA3_CODVE2
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Browse dos Usuarios                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oBrwUsr := TPLSBrw():New(005, 005, aPosObj[2][3]-3, (aPosObj[2][4]-20)/2,nil  ,oFolder:aDialogs[2],nil    ,;
		{ || Eval(oBrwUsr:bBeforeAdd), PLLoadBTS(oBrwUsr), oBrwUsr:EditRecord("BA1", If( oBrwUsr:oBrowse:oBrowse:nAt>oBrwUsr:nQtdLin .And.;
		nOpcX <> K_Incluir,K_Incluir,Pl260UBlq(nOpcX)), OemToAnsi(STR0053) + M->BA3_CODINT+M->BA3_CODINT+M->BA3_MATRIC+" ]",; //"Usuarios - [ "
		oBrwUsr:Linha(),oBrwUsr:oBrowse:aCols,oBrwUsr:oBrowse:aHeader,{ || .T. }), PLVLDBTS(oBrwUsr) },nil    ,nil  , nil, .T.  ,nil   ,.T.,;
		nil   ,aCabUsr ,aDadUsr ,.T. ,"BA1" ,nOpcx, OemToAnsi(STR0053) + M->BA3_CODINT+M->BA3_CODINT+M->BA3_MATRIC+" ]" ,;
		{{"BA1_MOTBLO","<>","''"}},nil,nil,aTrbuSR, 'PLSA260VLD',;
		'PLSA260Exc(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_MATRIC,.T.,.T.,oBrwUsr:FieldGet("BA1_TIPREG"),oBrwUsr:FieldGet("BA1_TIPUSU"),oBrwUsr:FieldGet("BA1_MOTBLO"))',;
		NIL,NIL,aButUsr)

	oBrwUsr:bLostFocus := { || cTipReg := oBrwUsr:FieldGet("BA1_TIPREG"),oSay01:cCaption := cTipReg+" - "+objCENFUNLGP:verCamNPR("BA1_NOMUSR",AllTrim(oBrwUsr:FieldGet("BA1_NOMUSR"))),;
		Iif(oBrwUFrOpc:IsDeleted(oBrwUFrOpc:Linha()),(oBrwFrOpc:OBROWSE:OBROWSE:LREADONLY := .F.,oBotUFrOpc:Disable()),(oBrwFrOpc:OBROWSE:OBROWSE:LREADONLY := .T.,oBotUFrOpc:Enable())),;
		oSay01:Refresh() }

	oBrwUsr:bBeforeAdd := { || 	__cUsrPla_ := If(Type("oBrwUsr:lInAddLine") <> "U" .and. oBrwUsr:lInAddLine, ' ',oBrwUsr:FieldGet("BA1_CODPLA")),;
		__cUsrVer_ := If(Type("oBrwUsr:lInAddLine") <> "U" .and. oBrwUsr:lInAddLine, ' ', oBrwUsr:FieldGet("BA1_VERSAO")),;
		lPrim260 := If(nOpc = K_Incluir .And. (oBrwUsr:oBrowse:oBrowse:nAt = 1 .And. ! oBrwUsr:lInAddLine), .T., .F.)}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclusao do controle para tabela nova B1W							³
	//³ Alexander 01/06/2005												³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oBrwUsr:bChange    := { || Eval(oBrwUsr:bLostFocus), Iif(Type('oFldUsr')=='O', Iif(oFldUsr:nOption == 3, oBrwOUsu:oBrowse:oBrowse:setFocus(),),), Eval(oBrwOUsu:bLostFocus),;
		oBrwUFrOpc:ForceRefresh(oBrwUsr),ChangeBRW(), oBrwBDK:oBrowse:oBrowse:SetFocus() , Iif(lCriaB1W,oBrwB1W:oBrowse:oBrowse:SetFocus(),) ,;
		oBrwUsr:oBrowse:oBrowse:SetFocus()}


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Browse dos Opcionais da Familia                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ??ÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oBrwOpc  := TPLSBrw():New(005, 005, aPosObj[2][3]-50, (aPosObj[2][4]-20)/2,NIL  ,oFldFam:aDialogs[2],nil   , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabOpc   ,aDadOpc ,.F.      ,"BF1" ,nOpcx,OemtoAnsi(STR0212)/*"Opcionais"*/,nil,nil,nil,aTrbOpc,'PLS260FAMO',"Pls260DRel")
	oBrwOpc:bLostFocus := {|| Eval(bWhenVinc), cCodOpc := oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_CODPRO")] ,cVerOpc := oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_VERSAO")]}
	oBrwOpc:bChange    := {|| Eval(oBrwOpc:bLostFocus),oBrwFrOpc:ForceRefresh(oBrwOpc)}

	@ 005, (aPosObj[2][3]-50)+5 BUTTON oBotCobOpc PROMPT STR0034 ACTION {|| OpcCob() } SIZE 25,11 OF  oFldFam:aDialogs[2] PIXEL //"Cobertura"
	oBotCobOpc:cTOOLTIP   := OemtoAnsi(STR0034) //"Cobertura"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Contrucao das getdados.                                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PLS260Cols(aPosObj)

	If lGatilho
		PL260Forma()	// Preenche as Formas de pagamentos
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Dispara refresh's nos folder filhos...                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ\
	Eval(oBrwUsr:bChange)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Preenche o campo relacionado ao portal do beneficiário             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ\

	If BA3->(FieldPos("BA3_TIPPGO")) > 0

		If M->BA3_REEWEB != "1"

			If EMPTY(M->BA3_TIPPGO)

				M->BA3_TIPPGO := "1"
			EndIf
		EndIf
	EndIf

	oBrwOpc:oBrowse:oBrowse:SetFocus()
	oBrwFrOpc:oBrowse:oBrowse:SetFocus()

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ativa o dialogo...                                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ\

		ACTIVATE MSDIALOG oDlgFolder ON INIT EnchoiceBar(oDlgFolder,bOK,bCancel,.F.,aButtons)

		__lRetBlq := NIL
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Trata atualizacao dos dados...
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == K_OK 

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Trata exclusao do contrato...                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nOpcx == K_Excluir
		If lAutoma .Or. MsgYesNo(OemtoAnsi(STR0054))	 //"Deseja realmente excluir o Usuario/Familia?"
			If ! PLSA260Exc(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_MATRIC,.T.)
				Eval(bRest)
				Eval(bRestBQC)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Refaz o filtro...                                                        ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				DbSelectArea("BA1")

				Return
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto de entrada para o momento da exclusao...                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ExistBlock("PLS260EXCL")
				nRecBA3 := BA3->( Recno() )
				IF !ExecBlock("PLS260EXCL",.F.,.F.)

					Return
				Endif

				BA3->( dbGoto(nRecBA3) )
			Endif
			//Exclui o BED
			If BED->(FieldPos("BED_USRDEL")) > 0
				BED->( dbSetorder(09) )
				If BED->( msSeek(xFilial("BED")+M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC) ))
					While !BED->( Eof() ) .and. BED->(BED_CODINT+BED_CODEMP+BED_MATRIC) == M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC) .And.	BED->BED_FILIAL == Xfilial("BED")
						BED->( Reclock("BED", .F.) )
						BED->BED_USRDEL := '*'
						BED->( MsUnlock() )
						BED->( dbSkip() )
					Enddo
				Endif
			Endif

		Else
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Chama mBrowse padrao...                                                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			Return(NIL)
		Endif
	Endif

	If nOpcx <> K_Visualizar
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicio da Transacao...                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if nOpcx == K_Incluir
			cSemaforo := Alltrim(M->(BA3_CODINT+BA3_CODEMP))
		else
			cSemaforo := Alltrim(M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC))
		endIf	

		_nH := PLSAbreSem(cSemaforo+".SMF")
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ponto de Entrada - Executa Antes da Gravacao familia usuario        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ExistBlock("PLS260AGR")
			aPL260AGR := Execblock("PLS260AGR",.F.,.F.)
		EndIf

		Begin Transaction

		If nOpc == K_Incluir .And. !IsNumeric(M->BA3_MATRIC)
			M->BA3_MATRIC := PLPROXMAT(M->BA3_CODINT,M->BA3_CODEMP, cFilBA1)
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se houve alteracoes no vendedor e na equipe da familia...		    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If GetNewPar("MV_PLSRVEN",.F.)
			lRepUsu := .F.
			If (cCodEqp <> M->BA3_EQUIPE .Or. cCodVen1 <> M->BA3_CODVEN .Or. cCodVen2 <> M->BA3_CODVE2) .And. nOpc == K_Incluir
				If MsgYesNo(STR0243,STR0242)//""Atenção"|"Foram identificadas alterações nos dados comerciais da família. Deseja replicar essas alterações para o nível do usuário?"
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Se sim, o vendedor e a equipe dos usuarios serao os mesmos da familia...    ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					A260REPVEN()
				Endif
			Endif
		Endif

		//Atualiza o endereço dos dependentes se necessário
		nPosTit := Ascan(oBrwUsr:aCols, { |x| x[oBrwUsr:PLRETPOS("BA1_TIPUSU")] = cTitular} )
		If nPosTit > 0
			BTS->(Dbsetorder(3))
			If BTS->(MsSeek(xFilial("BTS")+oBrwUsr:FieldGet("BA1_CPFUSR",nPosTit)))

				//Dados do endereço do titular
				cCepUsr := IIF(cFunNa == "PLSA174",BTS->BTS_CEPUSR,oBrwUsr:FieldGet("BA1_CEPUSR",nPosTit))
				cEndere := IIF(cFunNa == "PLSA174",BTS->BTS_ENDERE,oBrwUsr:FieldGet("BA1_ENDERE",nPosTit))
				cBairro := IIF(cFunNa == "PLSA174",BTS->BTS_BAIRRO,oBrwUsr:FieldGet("BA1_BAIRRO",nPosTit))
				cMunici := IIF(cFunNa == "PLSA174",BTS->BTS_MUNICI,oBrwUsr:FieldGet("BA1_MUNICI",nPosTit))
				cEstado := IIF(cFunNa == "PLSA174",BTS->BTS_ESTADO,oBrwUsr:FieldGet("BA1_ESTADO",nPosTit))
				cCodMun := IIF(cFunNa == "PLSA174",BTS->BTS_CODMUN,oBrwUsr:FieldGet("BA1_CODMUN",nPosTit))
				cNrEnd	:= IIF(cFunNa == "PLSA174",BTS->BTS_NR_END,oBrwUsr:FieldGet("BA1_NR_END",nPosTit))
				cComend := IIF(cFunNa == "PLSA174",BTS->BTS_COMEND,oBrwUsr:FieldGet("BA1_COMEND",nPosTit))
				cTipEnd := IIF(cFunNa == "PLSA174",BTS->BTS_TIPEND,oBrwUsr:FieldGet("BA1_TIPEND",nPosTit))
				cResExt := IIF(cFunNa == "PLSA174",BTS->BTS_RESEXT,oBrwUsr:FieldGet("BA1_RESEXT",nPosTit))

				//Atualiza o endereço dos dependentes se necessário
				AtuEndTit(cCepUsr,cEndere,cBairro,;
						cMunici,cEstado,cCodMun,cNrEnd,cComend,;
						cTipEnd,cResExt,"1")
			Endif	

		Endif
		If GetNewPar("MV_PLRESFA",.F.) .AND. BA1->( FieldPos("BA1_RESFAM") ) > 0

			nPosRes := Ascan(oBrwUsr:aCols, { |x| x[oBrwUsr:PLRETPOS("BA1_RESFAM")] = '1' .AND. Empty(x[oBrwUsr:PLRETPOS("BA1_DATBLO")]) } )
			If nPosRes == 0
				nPosRes := nPosTit
			EndIf			
			//Dados do endereço do responsável da família
			If nPosRes > 0
				cCepUsr := oBrwUsr:FieldGet("BA1_CEPUSR",nPosRes)
				cEndere := oBrwUsr:FieldGet("BA1_ENDERE",nPosRes)
				cBairro := oBrwUsr:FieldGet("BA1_BAIRRO",nPosRes)
				cMunici := oBrwUsr:FieldGet("BA1_MUNICI",nPosRes)
				cEstado := oBrwUsr:FieldGet("BA1_ESTADO",nPosRes)
				cCodMun := oBrwUsr:FieldGet("BA1_CODMUN",nPosRes)
				cNrEnd	 := oBrwUsr:FieldGet("BA1_NR_END",nPosRes)
				cComend := oBrwUsr:FieldGet("BA1_COMEND",nPosRes)
				cTipEnd := oBrwUsr:FieldGet("BA1_TIPEND",nPosRes)
				cResExt := oBrwUsr:FieldGet("BA1_RESEXT",nPosRes)
				
				//Atualiza o endereço dos dependentes se necessário
				AtuEndTit(cCepUsr,cEndere,cBairro,;
							cMunici,cEstado,cCodMun,cNrEnd,cComend,;
							cTipEnd,cResExt,"5")
			EndIf
		Endif
		
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza o campo Digito para cada dependente ...                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nLenBrw := Len(oBrwUsr:aCols)
		For nInd := 1 To nLenBrw
		 
			If !lStrTPLS
				oBrwUsr:aCols[nInd,PLRETPOS("BA1_DIGITO",oBrwUsr:aHeader)] := Modulo11(M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+oBrwUsr:aCols[nInd,PLRETPOS("BA1_TIPREG",oBrwUsr:aHeader)])
			Else
				oBrwUsr:aCols[nInd,PLRETPOS("BA1_DIGITO",oBrwUsr:aHeader)] := Modulo11(StrTPLS(M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+oBrwUsr:aCols[nInd,PLRETPOS("BA1_TIPREG",oBrwUsr:aHeader)]))
			EndIf

			If oBrwUsr:aVetTrab[nInd] = 0
				oBrwUsr:aCols[nInd,PLRETPOS("BA1_MATUSU",oBrwUsr:aHeader)] := M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+oBrwUsr:aCols[nInd,PLRETPOS("BA1_TIPREG",oBrwUsr:aHeader)]+;
					oBrwUsr:aCols[nInd,PLRETPOS("BA1_DIGITO",oBrwUsr:aHeader)]
			Endif

			If oBrwUsr:aVetTrab[nInd] = 0 .And. aDigitos # Nil		// Array com os digitos gerados
				Aadd(aDigitos, { Trans(M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+;
					oBrwUsr:aCols[nInd,PLRETPOS("BA1_TIPREG",oBrwUsr:aHeader)]+;
					oBrwUsr:aCols[nInd,PLRETPOS("BA1_DIGITO",oBrwUsr:aHeader)], __cPictUsr + ".!"),;
					oBrwUsr:aCols[nInd,PLRETPOS("BA1_NOMUSR",oBrwUsr:aHeader)], 0 })
			Endif

			If  oBrwUsr:aVetTrab[nInd] = 0 .And.;	// Usuario incluido posterior
				Left(Dtos(M->BA3_DATBAS), 6) =;
					Left(Dtos(oBrwUsr:aCols[nInd,PLRETPOS("BA1_DATINC",oBrwUsr:aHeader)]), 6)
				M->BA3_PERMOV := Left(Dtos(M->BA3_DATBAS), 6)
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ O vendedor e a equipe dos usuarios serao os mesmos da familia...    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nOpc = K_Incluir
				If lRepUsu
					If oBrwUsr:FieldPos("BA1_CODVE2") <> 0  .And. BA3->(FieldPos("BA3_CODVE2")) <> 0
						oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_CODVE2",oBrwUsr:aHeader)] := M->BA3_CODVE2
					EndIf
					oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_CODVEN",oBrwUsr:aHeader)] := M->BA3_CODVEN
					oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_EQUIPE",oBrwUsr:aHeader)] := M->BA3_EQUIPE
				Endif
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Trata o campo BA1_TIPINC( TIPO DE INCLUSAO)                         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If BA1->(FieldPos("BA1_TIPINC")) > 0
   				   If !lJuridico // Pessoa fisica!!
     					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					    //³ 1 - Novo plano...                                                   ³
					    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Ponto de Entrada - Trata o tipo de inclusao para gerar comissao     ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lPL260TPI
							oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := Execblock("PL260TPI",.F.,.F.,{'1',oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)]})
						Else
							oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := '1'
						EndIf
				    Else
					    If M->BA3_DATBAS == BQC->BQC_DATCON
						   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						   //³ 1 - Novo plano...                                                   ³
						   //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Ponto de Entrada - Trata o tipo de inclusao para gerar comissao     ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lPL260TPI
		 					   oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := Execblock("PL260TPI",.F.,.F.,{'1',oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)]})
							Else
		 					   oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := '1'
							EndIf
					    Elseif M->BA3_DATBAS > BQC->BQC_DATCON
					       //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					       //³ 2 - Adesao...                                                       ³
					       //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Ponto de Entrada - Trata o tipo de inclusao para gerar comissao     ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lPL260TPI
						       oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := Execblock("PL260TPI",.F.,.F.,{'2',oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)]})
							Else
						       oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := '2'
							EndIf
					    Endif
				    Endif
				 Endif
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Identifica o titular da familia e obtem sua data de inclusao...     ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			Elseif nOpc == K_Alterar

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Identifica se eh usuario de intercambio eventual...                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If M->BA3_CODEMP == cOpeInt .and.;
						oBrwUsr:aCols[nInd,PLRETPOS("BA1_OPEORI",oBrwUsr:aHeader)] <> cIntPad
					lObrig := .F.
				Endif

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Obtem a data de inclusao do titular da familia...                   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If (nPosTit := Ascan(oBrwUsr:aCols, { |x| x[oBrwUsr:PLRETPOS("BA1_TIPUSU")] = cMvPLTIT})) > 0
					dIncTit := oBrwUsr:FieldGet("BA1_DATINC", nPosTit)

				Endif

				If oBrwUsr:aCols[nInd,PLRETPOS("BA1_DATINC",oBrwUsr:aHeader)] > dIncTit .and. !Empty(dToc(dIncTit)) ;
				   .And. BA1->(FieldPos("BA1_TIPINC")) > 0
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ 3 - Depentente                                                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Ponto de Entrada - Trata o tipo de inclusao para gerar comissao     ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lPL260TPI
						oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := Execblock("PL260TPI",.F.,.F.,{'3',oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)]})
					Else
						oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := '3'
					EndIf

				Elseif oBrwUsr:aCols[nInd,PLRETPOS("BA1_DATINC",oBrwUsr:aHeader)] == dIncTit .And. BA1->(FieldPos("BA1_TIPINC")) > 0
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ 3 - Novo plano, por algum motivo o usuario abandonou o cadastro depois voltou como alterar! |
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lJuridico .and. M->BA3_DATBAS > BQC->BQC_DATCON
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Ponto de Entrada - Trata o tipo de inclusao para gerar comissao     ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lPL260TPI
								oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := Execblock("PL260TPI",.F.,.F.,{'2',oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)]})
							Else
								//BA1_TIPINC, so deve ser alterado se um novo beneficiário estiver sendo adicionado a familia, se BA1_DATINC == database, ou seja, adicionado no dia //20-12
								If oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_DATINC",oBrwUsr:aHeader)] == dDatabase
									oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := '2'
								EndIf	
							EndIf
					Else
						If BA1->(FieldPos("BA1_TIPINC")) > 0
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Ponto de Entrada - Trata o tipo de inclusao para gerar comissao     ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lPL260TPI
								oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] :=  Execblock("PL260TPI",.F.,.F.,{'1',oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)]})
							Else
								oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_TIPINC",oBrwUsr:aHeader)] := '1'
							EndIf
						Endif
					Endif
				Endif
			Endif			
			//Alterei o lugar da chamada da função pois só aqui temos os dados completos da matricula		
			If lIncSU5 == .T. .AND. _lRetAC8 == .T. .AND. (nOpc == K_Alterar .OR. nOpc = K_Incluir) .AND. !Empty(oBrwUsr:aCols[nInd,PLRETPOS("BA1_EMAIL",oBrwUsr:aHeader)])
				PLSINCLSU5(oBrwUsr:aCols[nInd,PLRETPOS("BA1_NOMUSR",oBrwUsr:aHeader)], oBrwUsr:aCols[nInd,PLRETPOS("BA1_EMAIL",oBrwUsr:aHeader)], M-> BA3_CODINT+ M-> BA3_CODEMP + M->BA3_MATRIC + oBrwUsr:aCols[nInd,PLRETPOS("BA1_TIPREG",oBrwUsr:aHeader)] + oBrwUsr:aCols[nInd,PLRETPOS("BA1_DIGITO",oBrwUsr:aHeader)])
			Endif 
		Next	
		
		If lPL260CAR
			Store Header "BA3" TO aCabFam For .T.
			aDadFam := Array(Len(aCabFam))
			For nDadFam := 1 To Len(aCabFam)
				If aCabFam[nDadFam][10] <> "V"
					aDadFam[nDadFam] := &("BA3->" + AllTrim(aCabFam[nDadFam][2]))
				Endif
			Next

			aAltUsr := AClone(oBrwUsr:aCols)
			For nDadUsr := 1 To Len(oBrwUsr:aCols)
				If Len(oBrwUsr:aVetTrab) >= nDadUsr .And. oBrwUsr:aVetTrab[nDadUsr] > 0
					BA1->(DbGoto(oBrwUsr:aVetTrab[nDadUsr]))
					For nCols := 1 To Len(oBrwUsr:aCols[nDadUsr]) - 1
						If oBrwUsr:aHeader[nCols][10] <> "V"
							aAltUsr[nDadUsr][nCols] := &("BA1->" + AllTrim(oBrwUsr:aHeader[nCols][2]))
						Endif
					Next
				Endif
			Next
		Endif //lPL260CAR

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grava as informacoes da familia...                                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PLUPTENC("BA3",nOpc)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Usuarios...                                                         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aChave := {}
		aadd(aChave,{"BA1_CODINT",M->BA3_CODINT})
		aadd(aChave,{"BA1_CODEMP",M->BA3_CODEMP})
		aadd(aChave,{"BA1_MATRIC",M->BA3_MATRIC})
		aadd(aChave,{"BA1_CONEMP",M->BA3_CONEMP})
		aadd(aChave,{"BA1_VERCON",M->BA3_VERCON})
		aadd(aChave,{"BA1_SUBCON",M->BA3_SUBCON})
		aadd(aChave,{"BA1_VERSUB",M->BA3_VERSUB})

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ O nome reduzido da empresa do usuario...                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		/*
		If lJuridico .and. !lAmbos
			aadd(aChave,{"BA1_NREDUZ",BQC->BQC_NREDUZ})
		Endif
		*/
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Chama integracao com o HAT                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If GetNewPar("MV_PLSHAT","0") == "1" //alterado para 0 o valor padrão        
			aBA1CabHat := aClone(oBrwUsr:aHeader)
			aBA1DadHat := aClone(oBrwUsr:aCols)
			aCabBFEHat := aClone(aCabBFE)
			aDadBFEHat := aClone(aDadBFE)
			aCabBF3Hat := aClone(oBrwDoe:aHeader)
			aDadBF3Hat := aClone(oBrwDoe:aCols)
			aCabBFGHat := aClone(aCabBFG)
			aDadBFGHat := aClone(aDadBFG)
			aCabBFDHat := aClone(oBrwProF:aHeader)
			aDadBFDHat := aClone(oBrwProF:aCols)
			aCabBFCHat := aClone(oBrwGruF:aHeader)
			aDadBFCHat := aClone(oBrwGruF:aCols)
		
			PLHAT260(nOpc,aBA1CabHat,aBA1DadHat,aCabBFEHat,aDadBFEHat,M->BA3_CODPLA,nil,nil,aCabBF3Hat,aDadBF3Hat,aCabBFGHat,aDadBFGHat,;
			         aCabBFDHat,aDadBFDHat,BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),aCabBFCHat,aDadBFCHat) 
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Quando for uma alteracao de usuarios de intercambio eventual, o paramentro  |
		//³ lObrigatorio da funcao deve ser .F., para nao considerar campos orbigatorios|
		//³ em branco. Quando eh considerado, a rotina de gravacao entende que esse     |
		//³ registro eh sugeira de base e deleta o registro.                            |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		TCRefresh(RetSqlName("BA1"))
		//Gravacao
		PLUPTCOLS("BA1",oBrwUsr:Acols,oBrwUsr:aHeader,oBrwUsr:aVetTrab,nOpc,aChave)
		
		If 	nOpc = K_Incluir .And.;
				Empty(M->BA3_CODCLI) .And. Empty(M->BA3_CODFOR) .And. cCriaCli == "1" .and. M->BA3_COBNIV = '1' .and.;
				(nPosTit := Ascan(oBrwUsr:aCols, { |x| x[oBrwUsr:PLRETPOS("BA1_TIPUSU")] = SuperGetMv("MV_PLCDTIT")})) > 0

			BBL->(DbSetOrder(2))
			If BBL->(MsSeek(xFilial("BBL")+"PLSA260   "+"BA1"+"SA1"))

				If !Empty(oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFUSR")])
					cCpf := oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFUSR")]

				Elseif !Empty(oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFPRE")])
					cCpf := oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFPRE")]

				Elseif !Empty(oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFMAE")])
					cCpf := oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFMAE")]

				Elseif !Empty(oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFPAI")])
					cCpf := oBrwUsr:aCols[nPosTit,oBrwUsr:PLRETPOS("BA1_CPFPAI")]

				Else
					cCpf := ""
				Endif

				SA1->( dbSetorder(03) )
				If !SA1->( MsSeek(xFilial("SA1")+cCpf) )
					SA1->(RecLock("SA1",.T.))
					SA1->A1_FILIAL := xFilial("SA1")
					cVlCod         := CriaVar("A1_COD")
					cVlLoj         := CriaVar("A1_LOJA")
					cCodSa1        := If(!Empty(cVlCod),cVlCod,GetSX8Num("SA1","A1_COD"))
					cLojSa1        := If(!Empty(cVlLoj),cVlLoj,StrZero(1,TamSx3("A1_LOJA")[1]))
					SA1->A1_COD    := cCodSA1
					SA1->A1_LOJA   := cLojSA1
					SA1->A1_TIPO   := "F"

					For nPos := 1 To Len(oBrwUsr:aHeader)
						&("M->" + AllTrim(oBrwUsr:aHeader[nPos][2])) := oBrwUsr:aCols[nPosTit][nPos]
					Next

					PlsSinc("PLSA260","BA1","SA1")
					SA1->(MsUnLock())
					ConfirmSX8()

					BA3->(RecLock("BA3", .F.))
					BA3->BA3_CODCLI  := cCodSA1
					BA3->BA3_LOJA    := cLojSA1
					BA3->(MsUnLock())
				Else
					BA3->(RecLock("BA3", .F.))
					BA3->BA3_CODCLI  := SA1->A1_COD
					BA3->BA3_LOJA    := SA1->A1_LOJA
					BA3->(MsUnLock())
				Endif
			Else
				If GetNewPar("MV_PLSMSGS","1") == "1"
					MsgAlert(OemtoAnsi(STR0055))
				Endif
			Endif
		Endif
		// Caso seja alterado via consulta padrão o cadastro de vidas
		nLenBrw := Len(oBrwUsr:aCols)
		For nInd := 1 To nLenBrw
			// Verifica se os beneficiarios tem cadastro no SA1, e se tem familias com esse cliente como endereço de cobrança
			// vinicius.queiros
			// 09/10/2019
			BTS->(Dbsetorder(3))
			If BTS->(MsSeek(xFilial("BTS")+oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_CPFUSR",oBrwUsr:aHeader)]))
				// Aloca os dados para memoria para ser utilizada na função PlsSinc
				RegToMemory("BTS",.F.,.T.,.F.)

				SA1->(DbSetOrder(3))
				If SA1->(DbSeek(xFilial("SA1")+oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_CPFUSR",oBrwUsr:aHeader)]))

				 	//Verifica se o Código e a loja do cliente da SA1 é igual ao da BA3 
					If SA1->A1_COD == BA3->BA3_CODCLI .And. SA1->A1_LOJA == BA3->BA3_LOJA
						lCliFam := .T.
					EndIf
					
					//Posiciona na tabela d municipios do PLS
					BID->(DbSetorder(1))
					BID->(MsSeek(xFilial("BID")+BTS->BTS_CODMUN))

					// Sincroniza os dados da BTS com a SA1
					SA1->(RecLock("SA1", .F.))
					    PlsSinc("PLSA955   ","BTS","SA1")
					SA1->(MsUnlock()) 				
					
					If !Empty(SA1->A1_COD) .AND. !Empty(SA1->A1_LOJA)						
						
						cEndSA1 := SA1->A1_END
						If AT( ",", SA1->A1_END)
							ba3Num := StrTokArr(SA1->A1_END, ",")
							
							If Len(ba3Num) > 1
								cEndSA1:= ba3Num[1]
								cNumSA1:= ba3Num[2]
							Else
								cEndSA1:= ba3Num[1]
								cNumSA1 := Space(TamSX3("BA3_NUMERO")[1])
							EndIf													
						Else
							cNumSA1 := Space(TamSX3("BA3_NUMERO")[1]) // Se não tiver numero deixa em branco	
						Endif	

						// Para os casos em que o usuario não usa o  PlsSinc
						BID->( dbSetorder(2) )
						If BID->( msSeek(xFilial("BID")+Alltrim(Upper(SA1->A1_MUN))) )
							cCodMunSA1 := BID->BID_CODMUN 
						Endif						
	
																			
					// Procura as famílias vinculadas a este cliente e nesta familia verifica os beneficiários com o BA1_ORIEND=2
						AtuEndFam(SA1->A1_COD,SA1->A1_LOJA,SA1->A1_CEP,cEndSA1,SA1->A1_BAIRRO,;
									SA1->A1_MUN,SA1->A1_EST,cCodMunSA1,cNumSA1,SA1->A1_COMPLEM)
					EndIf
						
				Endif			
			Endif
		Next

		// Atualiza o endereço da família caso o local Cobr. esteja igual 1, mesmo que o CPF do cliente não seja igual ao do titular 
		SA1->(DbSetOrder(1))
		If !lCliFam
						
			If SA1->(DbSeek(xFilial("SA1")+BA3->BA3_CODCLI+BA3->BA3_LOJA))
				
				If !Empty(SA1->A1_COD) .AND. !Empty(SA1->A1_LOJA)						
						
					cEndSA1 := SA1->A1_END
					If AT( ",", SA1->A1_END)
						ba3Num := StrTokArr(SA1->A1_END, ",")
						
						If Len(ba3Num) > 1
							cEndSA1:= ba3Num[1]
							cNumSA1:= ba3Num[2]
						Else
							cEndSA1:= ba3Num[1]
							cNumSA1 := Space(TamSX3("BA3_NUMERO")[1])
						EndIf							
					Else
						cNumSA1 := Space(TamSX3("BA3_NUMERO")[1]) // Se não tiver numero deixa em branco	
					Endif
				EndIf

				BID->( dbSetorder(02) )
				If BID->( msSeek(xFilial("BID")+Alltrim(Upper(SA1->A1_MUN))) )
					cCodMunSA1 := BID->BID_CODMUN 
				Endif
				
				AtuEndFam(SA1->A1_COD,SA1->A1_LOJA,SA1->A1_CEP,cEndSA1,SA1->A1_BAIRRO,;
							SA1->A1_MUN,SA1->A1_EST,cCodMunSA1,cNumSA1,SA1->A1_COMPLEM)
			EndIf
		EndIf	

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Verifica se houve alteracao cadastral e marca o usuario             ³
        //³ como alterado, para posterior emissao de cartao de identificacao    ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		/*If  nOpc = K_Alterar
            PLS260ACR()
        Endif*/

		If lPL260CAR
			ExecBlock("PL260CAR", .F., .F., { aCabFam, aDadFam, oBrwUsr:aHeader, aAltUsr, oBrwUsr:aVetTrab, nOpcX })
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se houve alteracao na forma de cobranca...                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If  nOpc = K_Alterar .and. ( M->BA3_CODPLA <> __cCodPla_ .or.;
				M->BA3_VERSAO <> __cVersao_ .or.;
				(lForPag := M->BA3_FORPAG <> __cForCob_ ) .or.;
				(lForCtx := M->BA3_FORCTX <> __cForTax_ ) .or.;
				(lForCop := M->BA3_FORCOP <> __cForOpc_ ) )

			For nI := 1 To Len(aForAltFam)
				For nInd := 1 To Len(aForAltFam[nI])
					cAlias := aForAltFam[nI][nInd][02]
					If (lForPag .And. cAlias $ "BBU,BFY") .Or.;
							(lForCop .And. cAlias $ "BBY,BG0") .Or.;
							(lForCtx .And. cAlias $ "BRX,BFZ")


						If ValType(aForAltFam[nI][nInd][5]) == "A"
							For _I := 1 To Len(aForAltFam[nI][nInd][5])
								(cAlias)->( dbGoto(aForAltFam[nI][nInd][5][_I]) )
								(cAlias)->( RecLock(cAlias, .F.) )
								(cAlias)->( dbDelete() )
								(cAlias)->( MsUnlock() )
							Next
						Else
							(cAlias)->( dbGoto(aForAltFam[nI][nInd][5]) )
							(cAlias)->( RecLock(cAlias, .F.) )
							(cAlias)->( dbDelete() )
							(cAlias)->( MsUnlock() )
						Endif
					Else
						Loop
					EndIF
				Next
			Next

		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gravacao das Formas de Cobranca da Familia...                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nInd := 1 To Len(aVetsFor)
			cAlias   := aVetsFor[nInd,2]
			cTipo    := aVetsFor[nInd,3]
			aVetTrab := aVetsFor[nInd,5]
			uTrbRec  := aVetsFor[nInd,4] // quando for enchoice e numero e
			cBrw     := "oBrw"+cAlias
			// getdados e array
			If     cTipo == "0" // Enchoice
				For nCont  := 1 To Len(uTrbRec)
					cDado  := uTrbRec[nCont,1]
					&cDado := uTrbRec[nCont,2]
				Next
				&("M->"+cAlias+"_CODOPE") := M->BA3_CODINT
				&("M->"+cAlias+"_CODEMP") := M->BA3_CODEMP
				&("M->"+cAlias+"_MATRIC") := M->BA3_MATRIC
				PLUPTENC(cAlias,If(aVetTrab==0,K_Incluir,nOpc))
			ElseIf cTipo == "1" // GetDados     5
				STORE HEADER cAlias TO aHeader For .T.
				aChave := {}
				aadd(aChave,{cAlias+"_CODOPE",M->BA3_CODINT})
				aadd(aChave,{cAlias+"_CODEMP",M->BA3_CODEMP})
				aadd(aChave,{cAlias+"_MATRIC",M->BA3_MATRIC})
				PLUPTCOLS(cAlias,uTrbRec,aHeader,aVetTrab,nOpc,aChave)
			Endif
		Next

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Formas de Cobranca da Taxa de Adesao....                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aChave := {}
		aadd(aChave,{"BJL_CODOPE",M->BA3_CODINT})
		aadd(aChave,{"BJL_CODEMP",M->BA3_CODEMP})
		aadd(aChave,{"BJL_MATRIC",M->BA3_MATRIC})
		oBrwAde:Grava(aChave,.F.)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gravacao das Formas de Cobranca (Taxa de adesao) da Familia...      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nInd := 1 To Len(aVetsTxF)
			cAlias   := aVetsTxF[nInd,2]
			cTipo    := aVetsTxF[nInd,3]
			aVetTrab := aVetsTxF[nInd,4]
			uTrbRec  := aVetsTxF[nInd,5] // quando for enchoice e numero e
			cBrw	 := "oBrw"+cAlias
			// getdados e array
			If     cTipo == "0" // Enchoice
				For nCont  := 1 To Len(aVetTrab)
					cDado  := aVetTrab[nCont,1]
					&cDado := aVetTrab[nCont,2]
				Next
				PLUPTENC(cAlias,If(uTrbRec==0,K_Incluir,nOpc))
			ElseIf cTipo == "1" // GetDados
				STORE HEADER cAlias TO aHeader For .T.
				aChave := {}
				aadd(aChave,{cAlias+"_CODOPE",M->BA3_CODINT})
				aadd(aChave,{cAlias+"_CODEMP",M->BA3_CODEMP})
				aadd(aChave,{cAlias+"_MATRIC",M->BA3_MATRIC})
				PLUPTCOLS(cAlias,aVetTrab,aHeader,uTrbRec,nOpc,aChave)
			Endif
		Next

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Formas dos Opcionais....                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aChave := {}
		aadd(aChave,{"BK0_CODOPE",M->BA3_CODINT})
		aadd(aChave,{"BK0_CODEMP",M->BA3_CODEMP})
		aadd(aChave,{"BK0_MATRIC",M->BA3_MATRIC})
		oBrwFrOpc:Grava(aChave,.F.)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gravacao das Formas de Cobranca dos Opcionais..                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nInd := 1 To Len(aVetsOpc)
			cAlias   := aVetsOpc[nInd,2]
			cTipo    := aVetsOpc[nInd,3]
			aVetTrab := aVetsOpc[nInd,4]
			uTrbRec  := aVetsOpc[nInd,5] // quando for enchoice e numero e
			cBrw	 := "oBrw"+cAlias
			// getdados e array
			If     cTipo == "0" // Enchoice
				For nCont  := 1 To Len(uTrbRec)
					cDado  := uTrbRec[nCont,1]
					&cDado := uTrbRec[nCont,2]
				Next
				PLUPTENC(cAlias,If(aVetTrab==0,K_Incluir,nOpc))
			ElseIf cTipo == "1" // GetDados
				STORE HEADER cAlias TO aHeader For .T.
				aChave := {}
				aadd(aChave,{cAlias+"_CODOPE",M->BA3_CODINT})
				aadd(aChave,{cAlias+"_CODEMP",M->BA3_CODEMP})
				aadd(aChave,{cAlias+"_MATRIC",M->BA3_MATRIC})
				PLUPTCOLS(cAlias,aVetTrab,aHeader,uTrbRec,nOpc,aChave)
			Endif
		Next
	
		BEGIN TRANSACTION 
			
			//o loop acontece a partir da primeira posição que atende ao condição
			For nI := ASCAN(oBrwOUsu:aCols, {|x| x[GdFieldPos("BF4_TIPVIN",oBrwOUsu:aHeader)] == "0" }) To LEN(oBrwOUsu:ACOLS)
				
				If nI > 0
					//Verifica se o item não foi deletado no grid.
					If !oBrwOUsu:aCols[nI][LEN(oBrwOUsu:aHeader) + 1]
			
						//Verifica se o campo "Vincula " do item está como não (0)
						If oBrwOUsu:aCols[nI][GdFieldPos("BF4_TIPVIN",oBrwOUsu:aHeader)] == "0"	
							BYX->(dbSetOrder(1))
							
							//Verifica se existe registro correspondente ao opcional corrente no nível da família
							If !BYX->(msSeek(xFilial("BYX") + BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC) + ;
											 oBrwOUsu:ACOLS[nI][GDFIELDPOS("BF4_TIPREG", oBrwOUsu:AHEADER)] +;
											 oBrwOUsu:ACOLS[nI][GDFIELDPOS("BF4_CODPRO", oBrwOUsu:AHEADER)] +;
											 oBrwOUsu:ACOLS[nI][GDFIELDPOS("BF4_VERSAO", oBrwOUsu:AHEADER)] ))
								
								BJW->(dbSetOrder(1))
										
								//Verifica se o opcional configurado no subcontrato possui registro na tabela de forma de cobrança no nível
								//do subcontrato para gravar a forma de cobrança no nível da família
								If BJW->(msSeek(xFilial("BJW") + BA3->(BA3_CODINT + BA3_CODEMP + BA3_CONEMP + BA3_VERCON + BA3_SUBCON) + ;
								 				BA3->(BA3_VERSUB + BA3_CODPLA + BA3_VERSAO) + ;
								 				oBrwOUsu:ACOLS[nI][GDFIELDPOS("BF4_CODPRO", oBrwOUsu:AHEADER)] + ;
								 				oBrwOUsu:ACOLS[nI][GDFIELDPOS("BF4_VERSAO", oBrwOUsu:AHEADER)] )) 
									  
									  //Verifica se existe mais de uma forma de cobrança configurado no opcional do subcontrato
									  While BJW->(BJW_FILIAL + BJW_CODIGO + BJW_NUMCON + BJW_VERCON + BJW_SUBCON + BJW_VERSUB + BJW_CODPRO + BJW_VERSAO +;
									  			  BJW_CODOPC + BJW_VEROPC) ==;
									  			  xFilial("BJW") + BA3->(BA3_CODINT + BA3_CODEMP + BA3_CONEMP + BA3_VERCON + BA3_SUBCON) + ;
									  			  BA3->(BA3_VERSUB + BA3_CODPLA + BA3_VERSAO) + ;
									  			  oBrwOUsu:ACOLS[nI][GDFIELDPOS("BF4_CODPRO", oBrwOUsu:AHEADER)] + ;
									  			  oBrwOUsu:ACOLS[nI][GDFIELDPOS("BF4_VERSAO", oBrwOUsu:AHEADER)] .AND. nQtdFoCob < 2
								  
										     	  nQtdFoCob += 1 
										     	  cCodFrCob := BJW->BJW_CODFOR
										     	  BJW->(DbSkip())
									  EndDo
								EndIf
								
								
								nQtdFoCob := 0
							EndIf
						EndIf
					EndIf	
				EndIf						
			Next
		END TRANSACTION
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Formas dos Opcionais Usuario                                        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aChave := {}
		aadd(aChave,{"BYX_CODOPE",M->BA3_CODINT})
		aadd(aChave,{"BYX_CODEMP",M->BA3_CODEMP})
		aadd(aChave,{"BYX_MATRIC",M->BA3_MATRIC})
		oBrwUFrOpc:Grava(aChave,.F., .T.)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gravacao das Formas de Cobranca dos Opcionais..                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nInd := 1 To Len(aVetsUOpc)
			cAlias   := aVetsUOpc[nInd,2]
			cTipo    := aVetsUOpc[nInd,3]
			aVetTrab := aVetsUOpc[nInd,4]
			uTrbRec  := aVetsUOpc[nInd,5] // quando for enchoice e numero e
			cBrw	 := "oBrw"+cAlias

			// getdados e array
			If     cTipo == "0" // Enchoice
				For nCont  := 1 To Len(uTrbRec)
					cDado  := uTrbRec[nCont,1]
					&cDado := uTrbRec[nCont,2]
				Next
				PLUPTENC(cAlias,If(aVetTrab==0,K_Incluir,nOpc))
			ElseIf cTipo == "1" // GetDados
				STORE HEADER cAlias TO aHeader For .T.
				aChave := {}
				aadd(aChave,{cAlias+"_CODOPE",M->BA3_CODINT})
				aadd(aChave,{cAlias+"_CODEMP",M->BA3_CODEMP})
				aadd(aChave,{cAlias+"_MATRIC",M->BA3_MATRIC})
				If cAlias == "BZX"
					PlsConsiste(oBrwUFrOpc:aCols,oBrwUFrOpc:aHeader,{"BYX_CODOPC","BYX_VEROPC","BYX_TIPREG"},aVetTrab,aHeader,{"BZX_CODOPC","BZX_VEROPC","BZX_TIPREG"})
				Endif

				PLUPTCOLS(cAlias,aVetTrab,aHeader,uTrbRec,nOpc,aChave,.T.)
			Endif
		Next

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Historico dos Opcionais do Contrato ...                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nInd := 1
		For nInd := 1 To Len(aVetBlo)
			If aVetBlo[nInd,7] == "I"
				BGT->(RecLock("BGT",.T.))
			Else
				BGT->(RecLock("BGT",.F.))
			Endif
			BGT->BGT_MATRIC := aVetBlo[nInd,1]
			BGT->BGT_CODPRO := aVetBlo[nInd,2]
			BGT->BGT_VERSAO := aVetBlo[nInd,3]
			BGT->BGT_MOTBLO := aVetBlo[nInd,4]
			BGT->BGT_DATA   := aVetBlo[nInd,5]
			BGT->BGT_TIPO   := aVetBlo[nInd,6]
			BGT->BGT_USUOPE := aVetBlo[nInd,8]
			BGT->(MsUnlock())
		Next

		For nIx := 1 To Len(oBrwUsr:aCols)
        	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    	    //³ Exclui a entrevista qualificada da familia inteira...               ³
	        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			cNumAte := oBrwUsr:FieldGet("BA1_NUMENT",nIx)
			cTpRg 	:= oBrwUsr:FieldGet("BA1_TIPREG",nIx)
			cDig	:= oBrwUsr:FieldGet("BA1_DIGITO",nIx)

			cMatEnt	:= M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC+cTpRg+cDig)
			If nOpc == K_Excluir

				SIX->( dbSetorder(01) )
				If SIX->( dbSeek("BXC3") ) // So executa se existir o indice 03.
					BXA->( dbSetorder(01) )
					If BXA->( MsSeek(xFilial("BXA")+cNumAte+cMatEnt) )
						BXA->( RecLock("BXA", .F.) )
						BXA->( dbDelete() )
						BXA->( MsUnlock() )
					Endif

					BXC->( dbSetorder(03) )
					If BXC->( MsSeek(xFilial("BXC")+cNumAte+cMatEnt) )
						While !BXC->( Eof() ) .and. BXC->BXC_NUMERO == cNumAte .and. BXC->BXC_USUARI == cMatEnt

							BXB->( dbSetorder(01) )
							If BXB->( MsSeek(xFilial("BXB")+cNumAte+BXC->BXC_TIPREG) )
								While !BXB->( Eof() ) .and. BXB->BXB_NUMERO == cNumAte .and. BXB->BXB_TIPREG == BXC->BXC_TIPREG
									BXB->( RecLock("BXB", .F.) )
									BXB->( dbDelete() )
									BXB->( MsUnlock() )

									BXB->( dbSkip() )
								Enddo
							Endif

							BXD->( dbSetorder(01) )
							If BXD->( MsSeek(xFilial("BXD")+cNumAte+BXD->BXD_TIPREG) )
								While !BXD->( Eof() ) .and. BXD->BXD_NUMERO == cNumAte .and. BXD->BXD_TIPREG == BXC->BXC_TIPREG
									BXD->( RecLock("BXD", .F.) )
									BXD->( dbDelete() )
									BXD->( MsUnlock() )

									BXD->( dbSkip() )
								Enddo
							Endif

							BXC->( RecLock("BXC", .F.) )
							BXC->( dbDelete() )
							BXC->( MsUnlock() )

							BXC->( dbSkip() )
						Enddo
					Endif
				Endif
			Else
			    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		        //³ Verifica se houve exclusao de usuarios diretamente da matriz via DEL³
    		    //³ Se encontrar, elimina todos os registros relacionados...            ³
        		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If oBrwUsr:aCols[nIx][(Len(oBrwUsr:aHeader)+1)]
					// O titular deve ser desconsiderado.
					PL260DLUSR( M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+oBrwUsr:FieldGet("BA1_TIPREG",nIx),cDig,cNumAte )
				Endif
			Endif
			IF nOpcX == K_Alterar
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ8¿
				//³Função para espelhar as Tabelas PLS com RDC ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ8Ù
				Plsa260Esp(oBrwUsr:FieldGet("BA1_MATVID",nIx))
			Endif
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Cria login no portal do beneficiario para o Titular	que tem permissão para reembolso  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lIncLogin .AND. (nOpc == 3 .OR. nOpc == 4) .AND. BA3->(FieldPos("BA3_REEWEB")) > 0 .AND. oBrwUsr:aCols[nIx,oBrwUsr:PLRETPOS("BA1_TIPUSU")] = "T" // Crio Login apenas para o Titular
			
				PIncLogin( M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+oBrwUsr:aCols[nIx,oBrwUsr:PLRETPOS("BA1_TIPREG")]+oBrwUsr:aCols[nIx,oBrwUsr:PLRETPOS("BA1_DIGITO")],,,,oBrwUsr:aCols[nIx,oBrwUsr:PLRETPOS("BA1_CPFUSR")], oBrwUsr:aCols[nIx,oBrwUsr:PLRETPOS("BA1_EMAIL")] )
			
			Endif
		
		Next
    
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        //³ Funcao GravaGets: Gravacao dos registros relacionados...            ³
        //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		GravaGets(nOpc)

		If nOpcX == K_Incluir .or. nOpcX == K_Alterar
			BA3->(RecLock("BA3",.F.))

			BFD->(DbSetOrder(1))
			If BFD->(MsSeek(xFilial("BFD")+cChave))
				BA3->BA3_INFCOB := "1"
			Else
				BA3->BA3_INFCOB := "0"
			EndIf

			BFC->(DbSetOrder(1))
			If BFC->(MsSeek(xFilial("BFC")+cChave))
				BA3->BA3_INFGCB := "1"
			Else
		      	BA3->BA3_INFGCB := "0"
	 		EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza o enderece de cobranca de acordo com com o tipo de endereco...|
			//| Neste ponto para aproveitar o RecLock no registo da familia.		   |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nOpcX == K_Alterar .OR. nOpcX == K_Incluir
			// Foi retirada a condição quando for EndCob == 1, por que já é feita a atualização na linha 2941 
				If M->BA3_ENDCOB == '2'
					// Encontra o usuario titular na matriz.
					nPosTit := Ascan(oBrwUsr:aCols, {|x| x[oBrwUsr:FieldPos("BA1_TIPUSU")] == cTitular})

					// Se econtrar o titular, atualiza o endereco da familia com o dele.
					If nPosTit > 0
						BA3->BA3_CEP 	:= oBrwUsr:FieldGet("BA1_CEPUSR",nPosTit)
						BA3->BA3_END 	:= oBrwUsr:FieldGet("BA1_ENDERE",nPosTit)
						BA3->BA3_NUMERO	:= oBrwUsr:FieldGet("BA1_NR_END",nPosTit)
						BA3->BA3_COMPLE := oBrwUsr:FieldGet("BA1_COMEND",nPosTit)
						BA3->BA3_BAIRRO := oBrwUsr:FieldGet("BA1_BAIRRO",nPosTit)
						BA3->BA3_CODMUN := oBrwUsr:FieldGet("BA1_CODMUN",nPosTit)
						BA3->BA3_MUN 	:= oBrwUsr:FieldGet("BA1_MUNICI",nPosTit)
						BA3->BA3_ESTADO	:= oBrwUsr:FieldGet("BA1_ESTADO",nPosTit)
					Endif
				ElseIf M->BA3_ENDCOB == '5' .AND. BA1->( FieldPos("BA1_RESFAM") ) > 0 // Responsável Familia
					
					nLen := Len(oBrwUsr:Acols)
					nFdDtBlo := oBrwUsr:FieldPos("BA1_DATBLO")
					nFdResFam := oBrwUsr:FieldPos("BA1_RESFAM")
					nFdTipUsu := oBrwUsr:FieldPos("BA1_TIPUSU")
					nPosResp := 0
					
					For nI := 1 To nLen
			
						If (oBrwUsr:aCols[nI,nFdResFam] == '1' .AND. Empty(oBrwUsr:aCols[nI,nFdDtBlo])  ) .OR.;
							( Empty(oBrwUsr:aCols[nI,nFdResFam]) .AND. oBrwUsr:aCols[nI,nFdTipUsu] == cTitular ) 
				
							nPosResp := nI
							
						EndIf

					Next
					
					// Atualiza o endereco do dependente utilizando o endereco do responsável.
					If nPosResp <> 0
						BA3->BA3_CEP := oBrwUsr:FieldGet("BA1_CEPUSR",nPosResp)
						BA3->BA3_END := oBrwUsr:FieldGet("BA1_ENDERE",nPosResp)
						BA3->BA3_NUMERO := oBrwUsr:FieldGet("BA1_NR_END",nPosResp)
						BA3->BA3_COMPLE := oBrwUsr:FieldGet("BA1_COMEND",nPosResp)
						BA3->BA3_BAIRRO := oBrwUsr:FieldGet("BA1_BAIRRO",nPosResp)
						BA3->BA3_CODMUN := oBrwUsr:FieldGet("BA1_CODMUN",nPosResp) //INCLUIDO POR PETERSON 27.08.07
						BA3->BA3_MUN := oBrwUsr:FieldGet("BA1_MUNICI",nPosResp)
						BA3->BA3_ESTADO := oBrwUsr:FieldGet("BA1_ESTADO",nPosResp)
						
					Else
						MsgAlert("Responsável nao encontrado na familia... Verifique!")
						lReturn := .T.
					Endif
				
				Endif
			Endif
			BA3->(MsUnLock())
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Fim da Transacao...                                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		End Transaction
		// Confirma todas as transações no banco.
		dbCommitAll()
		
		if !lReturn
			If  nOpc = K_Alterar
				PLS260ACR()
			Endif
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Ponto de Entrada - Executa apos a Gravacao do familia usuario       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ExistBlock("PLS260DGR")
				ExecBlock("PLS260DGR",.F.,.F.,{@aPL260AGR})
			EndIf
	
			PLSFechaSem(_nH,cSemaforo+".SMF")
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Implementacao do conceito de caso seja parametrizado no ato da      ³
	        //³ inclusao da familia que a cobranca do adesao seja no ato sera gerado³
	        //³ o respectivo titulo a receber e apontamentos (bm1 bbt)...           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nOpc == K_Incluir .And. AllTrim(BA3->BA3_TXUSU) == "1"
				aAdesoes := PLSCBADINC()
			Endif
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Os usuarios que foram incluidos na alteracao poderao ser cobrados no ato   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nOpc == K_Alterar
				aUsrCobAto := {}
				aRecsBA1	  := {}
				For nInd := 1 To Len(oBrwUsr:aVetTrab)
					If oBrwUsr:aVetTrab[nInd] == 0
						nRegBA1 := 0
						If BA1->(dbSeek(xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+oBrwUsr:FieldGet("BA1_TIPREG",nInd)+oBrwUsr:FieldGet("BA1_DIGITO",nInd)))
							nReg := BA1->( RecNo() )
						Endif
						aadd(aUsrCobAto,BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+oBrwUsr:FieldGet("BA1_TIPREG",nInd)+oBrwUsr:FieldGet("BA1_DIGITO",nInd))
						aadd(aRecsBA1, nRegBA1)
			          // Utiliza o mes/ano da data de inclusao do primeiro usuario incluido.
						If Empty(cAnoFt) .and. Empty(cMesFt)
							cAnoFt := StrZero(Year(oBrwUsr:FieldGet("BA1_DATINC",nInd)),4)
							cMesFt := StrZero(Month(oBrwUsr:FieldGet("BA1_DATINC",nInd)),2)
						Endif
					Endif
				Next
	
				If GetNewPar("MV_PLSCBND","0") == "1"
					If  FindFunction("PLS770NIV") // Procura o nível de cobranca
						aAux := PLS770NIV(BA3->BA3_CODINT,BA3->BA3_CODEMP,;
							BA3->BA3_MATRIC,If(BA3->BA3_TIPOUS=="1","F","J"),;
							BA3->BA3_CONEMP,BA3->BA3_VERCON,BA3->BA3_SUBCON,;
							BA3->BA3_VERSUB,1)
					EndIf
	
					If Len(aAux) > 0 .And. Len(aAux[1]) > 17
	
						cNiv := aAux[1][18]
						If cNiv == "1" // Empresa
							cChv := BA3->BA3_CODINT+BA3->BA3_CODEMP
						ElseIf cNiv == "2" //Nivel contrato
							cChv := BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_CONEMP+BA3->BA3_VERCON
						ElseIf cNiv == "3"  //Nivel subcontrato
							cChv := BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_CONEMP+BA3->BA3_VERCON+BA3->BA3_SUBCON+BA3->BA3_VERSUB
						ElseIf cNiv == "4" //Nivel familia
							cChv := BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC
						ElseIf cNiv == "5" //Usuario
							cChv := BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC
						EndIf
	
						BBT->(DbSetOrder(Val(cNiv)))
						If BBT->(MsSeek(xFilial("BBT")+cNiv+cChv+cAnoFt+cMesFt))
							lFatura := .T.
						EndIf
	
					Else
			            //Caso nao consiga pegar o nivel de cobranca, faz o tratamento fixo na Familia como ja existia...
						BBT->(dbSetOrder(4))
						If BBT->(MsSeek(xFilial("BBT")+"4"+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cAnoFt+cMesFt))
							lFatura := .T.
						EndIf
	
					EndIf
					If !lFatura .And. !(Empty(cAnoFt) .Or. Empty(cMesFt))
						Aviso(OemtoAnsi(STR0071),OemtoAnsI(STR0181)+cAnoFt+"/"+cMesFt+OemtoAnsi(STR0182)+CHR(10)+CHR(13)+;//Atenção###"Ainda não foi gerado o faturamento da competência "###" para esta família."
						OemtoAnsi(STR0183),{OemtoAnsi(STR0177)},2) //"A cobrança do(s) dependente(s) incluso(s) será processada ao gerar a cobrança da família na rotina de faturamento."###"Ok"
					ElseIf Len(aUsrCobAto) > 0 .And.;
							(BA3->BA3_TIPOUS == "1" .or. (BA3->BA3_TIPOUS <> '1' .AND. BA3->BA3_COBNIV == '1') ) .And.;
							lFatura .And.;
							(Aviso(OemtoAnsi(STR0071),OemtoAnsi(STR0056),{OemtoAnsi(STR0085),OemtoAnsi(STR0086)},1)==1) // "Deseja cobrar os novos dependentes incluidos neste momento ?"
	
						PLSCBMSINC(aUsrCobAto,.T.,BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),'4',cAnoFt,cMesFt,2)
						lMsgDepInc := .F.
					EndIf
				EndIf
			Endif
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ exibe os valores de adesao cobrados no ato, se for o caso...        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If Len(aAdesoes) > 0 .And. aAdesoes[1] .And. nOpc == K_Incluir .And. AllTrim(BA3->BA3_TXUSU) == "1"
				PLSCRIGEN(aAdesoes[2],{ {OemtoAnsi(STR0050),"@C",70} , {OemtoAnsi(STR0057),"@C",170 } , {OemtoAnsi(STR0058),"@E 999,999.99",50 } },"Valores de Taxa Adesao/Inscricao cobrados no Ato")
			Endif
	
			If aDigitos <> Nil .And. Len(aDigitos) > 0
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Avanca 1 mes para obter o valor integral da familia...              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If (nOpc <> K_Incluir)
		  			// Se for inclusao de usuario, utiliza a data de inclusao do novo dependente para
		  			// visualizar o valor de cobranca.
					nStart := At('-', aDigitos[1][1])
					cUsrTp := Substr(aDigitos[1][1], nStart+1, 2)
					If (nStart := Ascan(oBrwUsr:aCols, {|x| x[oBrwUsr:FieldPos("BA1_TIPREG")] == cUsrTp})) > 0
						dDtInc := oBrwUsr:FieldGet("BA1_DATINC", nStart)
	
						cAno := Str(Year(dDtInc), 4)
						cMes := StrZero(Month(dDtInc)+1, 2)
					Endif
				Endif
	
				If (nOpc == K_Incluir) .or. Empty(cMes) .or. Empty(cAno)
					cAno := Str(Year(M->BA3_DATBAS), 4)
					cMes := StrZero(Month(M->BA3_DATBAS)+1, 2)
				Endif
	
				If cMes > '12'
					cMes := '01'
					cAno := Str((Val(cAno) + 1), 4)
				Endif
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Garante que a familia e o usuario estarao posicionados ao calcular o valor de cobranca...	    |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If (BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)) <> (M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC))
	
					BA3->( dbSetorder(01) )
					BA3->( dbSeek(xFilial("BA3")+M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)) )
	
				Elseif BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) <> (M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC))
					BA1->( dbSetorder(01) )
					BA1->( dbSeek(xFilial("BA1")+M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC+cTitular)) )
	
				Endif
	
				PLSVLRCOB(cAno,cMes,.T.)
	
			Endif
	
			If (nOpc == K_Incluir) .And. (ExistBlock("PL260INC"))
				ExecBlock("PL260INC",.F.,.F.,oBrwUsr)
			Endif
	
			If (nOpc == K_Alterar) .And. (ExistBlock("PLS260ALT"))
				ExecBlock("PLS260ALT",.F.,.F.,oBrwUsr)
			Endif
	
			If (nOpc == K_Incluir .or. Len(aUsrCobAto) > 0)
				lRetQuest := .f.
	
	    	    // Limpa o filtro do BA1 pra chamar o questionario.
				BA1->( dbClearFilter() )
				If lJuridico
					If BQC->BQC_ABRQUE=="1"
						lRetQuest := PLSA530Mov("BXA",0,K_Incluir,.T.,BA3->(Recno()),aRecsBA1)
					EndIf
				Else
					If BA0->(FieldPos("BA0_QSTPAD")) > 0 //Proteção pois o campo ainda não foi incorporado na expedição contínua (DSAUBE-7015).
						If POSICIONE("BA0",1,XFILIAL("BA0")+M->BA3_CODINT,"BA0_QSTPAD") = "1"
							lRetQuest := PLSA530Mov("BXA",0,K_Incluir,.T.,BA3->(Recno()),aRecsBA1)
						EndIf
					ElseIf SuperGetMv("MV_PLSEQST", .F., "1") == "1"
						lRetQuest := PLSA530Mov("BXA",0,K_Incluir,.T.,BA3->(Recno()),aRecsBA1)
					EndIf
				EndIf
				If lRetQuest
					If nOpc == K_Incluir
	         	   	    
	                 If !IsNumeric(M->BA3_MATRIC) 
							M->BA3_MATRIC := PLPROXMAT(M->BA3_CODINT,M->BA3_CODEMP, cFilBA1)
	         	      EndIf
	         	       
						BXC->(DbSetOrder(2))
						BA1->(DbSetOrder(2))
						BA1->(MsSeek(xFilial()+BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC))
						While !BA1->(Eof()) .and. xFilial("BA1")+BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC==BA1->BA1_FILIAL+BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC
							If BXC->(MsSeek(xFilial()+BXA->BXA_NUMERO+BA1->BA1_MATVID))
								BA1->(RecLock("BA1",.F.))
								BA1->BA1_NUMENT := BXA->BXA_NUMERO
								BA1->(MsUnlock())
							EndIf
							BA1->(DbSkip())
						EndDo
					Else
						BA1->( dbSetorder(02) )
						For nXy := 1 To Len(aUsrCobAto)
							BA1->( dbGoto(aRecsBA1[nXy]) )
							If !BA1->( Eof() )
								If BXC->(MsSeek(xFilial()+BXA->BXA_NUMERO+BA1->BA1_MATVID))
									BA1->(RecLock("BA1",.F.))
									BA1->BA1_NUMENT := BXA->BXA_NUMERO
									BA1->(MsUnlock())
								EndIf
							Endif
						Next
					Endif
				EndIf
	
	         	// Restaura o filtro do ba1.
				dbSelectArea("BA1")
				SET FILTER TO &cFilBA1
	
			Endif
	
			If  ExistBlock("PLS260FIM")
				inclui := If(nOpc == K_Incluir,.T.,.F.)
				altera := If(nOpc == K_Alterar,.T.,.F.)
				exclui := If(nOpc == K_Excluir,.T.,.F.)
				ExecBlock("PLS260FIM",.F.,.F.)
			Endif
					
			//Rotina que trata e envia os dados dos beneficiários para a Central de Obrigações
			If lCentralObr .AND. (lUsaSIP .OR.  lUsaSIB)
				aAreaBA1 := BA1->(GetArea())
				aAreaBA3 := BA3->(GetArea())
				aAreaBTS := BTS->(GetArea())
				aAreaB3K := B3K->(GetArea())
				
				//Percorro os beneficiários da familia			
				nLenBrw := Len(oBrwUsr:aCols)
				For nInd := 1 To nLenBrw					
					
					If PlSibEnvANS(M->BA3_TIPOUS,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CONEMP,M->BA3_VERCON,;
									M->BA3_SUBCON,M->BA3_VERSUB,oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_INFANS",oBrwUsr:aHeader)])	
						
						//Verifico se a linha do beneficiário foi excluida para passar essa informação para o NIO
						nOpcCentral := IIf(oBrwUsr:aCols[nInd,len(oBrwUsr:aheader)+1],K_Excluir, nOpcx)

						//Verifico se esse ususario esta na base da central B3K, caso não exista eu altero nOpcCentral para inclusão na central
						//Quando estamos incluindo um dependente e esse beneficiario ja tem registro na BTS eu tenho que verificar se esse item ja se econtra na central.
						//Se esse item não estiver na central (B3K) eu tenho que alterar o nOpcCentral para 3 (Inclusão), para que esse beneficiario seja incluido na Central
						If nOpcx  = 4
							B3K->(DbSetOrder(5))
							If !B3K->(DbSeek(xFilial("B3K")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_TIPREG")]+oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_DIGITO")]))
								nOpcCentral := 3
							Endif
							RestArea(aAreaB3K)
						Endif

						oModel 	:= Pl260DadNio('3',oBrwUsr,nInd,"",aDadCob,;
									.F.,!Empty(oBrwUsr:aCols[nInd,oBrwUsr:FieldPos("BA1_DATBLO",oBrwUsr:aHeader)]),nOpcCentral, lUsaSIP)
						
						if nOpcCentral <> K_Excluir
							oModel:SetValue( "B3KMASTER", 'B3K_OPESIB','2')//Inclusão/Alteração*/
						endif
						
						//Chamo a rotina genérica que atualiza o Núcleo de Informações da Central de Obrigações
						If lSIPSincrono .OR. lSIBSincrono 
							
							cB3KMat	:= oModel:GetValue( "B3KMASTER", 'B3K_MATRIC')
							cNomBen	:= oModel:GetValue( "B3KMASTER", 'B3K_NOMBEN')
							aAdd(aCritSib,{cB3KMat,cNomBen,""})
							PLCGrvBen( oModel,.F.,aCritSib ) 
							DelClassInf()
						Else
							aAdd(aDadNioAux,oModel)
							aAdd(aOpcSip,nOpcCentral)
							aAdd(aDadCobJob,aDadCob)
						EndIf
	
					EndIf
				
				Next nInd
			

				If Len(aDadNioAux) > 0
					StartJob("PLJOBNIO",GetEnvServer(),.F.,cEmpAnt,cFilAnt,;
								"B3K",aDadNioAux,nOpcx,.T./*lMult*/,aOpcSip,;
								dDataBase,aDadCobJob)
				EndIf
				
				//Nesse ponto ja tenho as tabelas BA1/BA3 e B3K já populadas, como se trata de inclusão,  e já foi executado a função PLCGrvBen de inclusão e validação de beneficiario.
				// Só precisamos exibir as criticas de retono da Central atraves do retorno da função PLCGrvBen
				lCritSib := Len(aCritSib) > nLenBrw
				If lCritSib
					PLSCRIGEN(aCritSib,{ {"Codigo Crit.","@C",5} , {"Descrição","@C",200 } , {"Solução","@C",200 } }, "  Críticas de Beneficiários  ")
				EndIf
							
				RestArea(aAreaBA3)
				RestArea(aAreaBA1)
				RestArea(aAreaBTS)
				RestArea(aAreaB3K)
			EndIf
		Else
			PLSFechaSem(_nH,cSemaforo+".SMF")
		EndIf		
				
	Endif //If nOpcx <> K_Visualizar

Endif //If nOpca == K_OK

	


if !lReturn
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Restaura dados...                                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (nOpc <> K_Incluir)
		Eval(bRest)
	Endif
	Eval(bRestBQC)
	SetKey( VK_F4 , Nil)
	SetKey( VK_F5 , Nil)
EndIf

//confirma o sequencial do campo BA3_CODRAS
If BA3->(FieldPos("BA3_TIPVIN")) > 0 .AND. M->BA3_TIPVIN == '1' 
	ConfirmSX8()
EndIf

Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³ DAdosOut³ Autor ³ Tulio Cesar            ³ Data ³ 26.01.00 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Cadastro de Familias                                       ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function DadosOut()

Local nCntFor	:= 0
Local nX		:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados do Historico dos Opcionais da Familia              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabHOpc ) == 0
	Store Header "BGT" TO aCabHOpc For .T. .And. SX3->X3_CAMPO <> "BGT_MATRIC" .And. SX3->X3_CAMPO <> "BGT_NOMUSR"
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BGT" TO aDadHOpc FROM aCabHOpc
Else

	cQuery := ""

	lQuery := .T.

	aStruBGT	:= BGT->(dbStruct())
	cAliasBGT	:= "QRYBGT"

	cQuery := "SELECT BGT.* "
	cQuery += " FROM "
	cQuery += RetSqlName("BGT")+ " BGT "
	cQuery += " WHERE "
	cQuery += "BGT_FILIAL = '"+xFilial("BGT")+"' AND "
	cQuery += "BGT_MATRIC = '"+cChave+"' AND "
	cQuery += "BGT.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBGT,.F.,.T.)

	For nCntFor := 1 To Len(aStruBGT)
		If ( aStruBGT[nCntFor,2]<>"C" )
			TcSetField(cAliasBGT,aStruBGT[nCntFor,1],aStruBGT[nCntFor,2],aStruBGT[nCntFor,3],aStruBGT[nCntFor,4])
		EndIf
	Next nCntFor

	While !Eof()

		Aadd(aDadHOpc,Array(Len(aCabHOpc)+1))

		BGT->(MsGoto((cAliasBGT)->R_E_C_N_O_))

		For nX := 1 To Len(aCabHOpc)
			If ( aCabHOpc[nX,10] !=  "V" )
				aDadHOpc[Len(aDadHOpc)][nX] := (cAliasBGT)->(FieldGet(FieldPos(aCabHOpc[nX,2])))
			Else
				aDadHOpc[Len(aDadHOpc)][nX] := CriaVar(aCabHOpc[nX,2],.T.)
			EndIf
		Next nX
		aDadHOpc[Len(aDadHOpc)][Len(aCabHOpc)+1] := .F.

		Aadd(aTrbHOpc, (cAliasBGT)->R_E_C_N_O_ )

		dbSelectArea(cAliasBGT)
		dbSkip()

	EndDo

	If Empty(aDadHOpc)
		BGT->(MsGoto(0))
		Store COLS Blank "BGT" TO aDadHOpc FROM aCabHOpc
	EndIf

	(cAliasBGT)->(dbCloseArea())
	dbSelectArea("BGT")

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Forma DE COBRANCA ...                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabFor ) == 0
	Store Header "BJK" TO aCabFor For .T.
Endif
If nOpcx == K_Incluir
	Store COLS Blank "BJK" TO aDadFor FROM aCabFor
Else

	cQuery := ""

	lQuery := .T.

	aStruBJK	:= BJK->(dbStruct())
	cAliasBJK := "QRYBJK"

	cQuery := "SELECT BJK.* "
	cQuery += " FROM "
	cQuery += RetSqlName("BJK")+ " BJK "
	cQuery += " WHERE "
	cQuery += "BJK_FILIAL = '"+xFilial("BJK")+"' AND "
	cQuery += "BJK_CODOPE = '"+BA1->BA1_CODINT+"' AND "
	cQuery += "BJK_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
	cQuery += "BJK_MATRIC = '"+BA1->BA1_MATRIC+"' AND "
	cQuery += "BJK.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBJK,.F.,.T.)

	For nCntFor := 1 To Len(aStruBJK)
		If ( aStruBJK[nCntFor,2]<>"C" )
			TcSetField(cAliasBJK,aStruBJK[nCntFor,1],aStruBJK[nCntFor,2],aStruBJK[nCntFor,3],aStruBJK[nCntFor,4])
		EndIf
	Next nCntFor

	While !Eof()

		Aadd(aDadFor,Array(Len(aCabFor)+1))

		BJK->(MsGoto((cAliasBJK)->R_E_C_N_O_))

		For nX := 1 To Len(aCabFor)
			If ( aCabFor[nX,10] !=  "V" )
				aDadFor[Len(aDadFor)][nX] := (cAliasBJK)->(FieldGet(FieldPos(aCabFor[nX,2])))
			Else
				aDadFor[Len(aDadFor)][nX] := CriaVar(aCabFor[nX,2],.T.)
			EndIf
		Next nX
		aDadFor[Len(aDadFor)][Len(aCabFor)+1] := .F.

		Aadd(aTrbFor, (cAliasBJK)->R_E_C_N_O_ )

		dbSelectArea(cAliasBJK)
		dbSkip()

	EndDo

	If Empty(aDadFor)
		BJK->(MsGoto(0))
		Store COLS Blank "BJK" TO aDadFor FROM aCabFor
	EndIf

	(cAliasBJK)->(dbCloseArea())
	dbSelectArea("BJK")

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Forma DE COBRANCA do Opcional....                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabFrOpc ) == 0
	Store Header "BK0" TO aCabFrOpc For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BK0" TO aDadFrOpc FROM aCabFrOpc
Else

	cQuery := ""

	lQuery := .T.

	aStruBK0	:= BK0->(dbStruct())
	cAliasBK0 := "QRYBK0"

	cQuery := "SELECT BK0.* "
	cQuery += " FROM "
	cQuery += RetSqlName("BK0")+ " BK0 "
	cQuery += " WHERE "
	cQuery += "BK0_FILIAL = '"+xFilial("BK0")+"' AND "
	cQuery += "BK0_CODOPE = '"+BA1->BA1_CODINT+"' AND "
	cQuery += "BK0_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
	cQuery += "BK0_MATRIC = '"+BA1->BA1_MATRIC+"' AND "
	cQuery += "BK0.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBK0,.F.,.T.)

	For nCntFor := 1 To Len(aStruBK0)
		If ( aStruBK0[nCntFor,2]<>"C" )
			TcSetField(cAliasBK0,aStruBK0[nCntFor,1],aStruBK0[nCntFor,2],aStruBK0[nCntFor,3],aStruBK0[nCntFor,4])
		EndIf
	Next nCntFor

	While !Eof()

		Aadd(aDadFrOpc,Array(Len(aCabFrOpc)+1))

		BK0->(MsGoto((cAliasBK0)->R_E_C_N_O_))

		For nX := 1 To Len(aCabFrOpc)
			If ( aCabFrOpc[nX,10] !=  "V" )
				aDadFrOpc[Len(aDadFrOpc)][nX] := (cAliasBK0)->(FieldGet(FieldPos(aCabFrOpc[nX,2])))
			Else
				aDadFrOpc[Len(aDadFrOpc)][nX] := CriaVar(aCabFrOpc[nX,2],.T.)
			EndIf
		Next nX
		aDadFrOpc[Len(aDadFrOpc)][Len(aCabFrOpc)+1] := .F.

		Aadd(aTrbFrOpc, (cAliasBK0)->R_E_C_N_O_ )

		dbSelectArea(cAliasBK0)
		dbSkip()

	EndDo

	If Empty(aDadFrOpc)
		BK0->(MsGoto(0))
		Store COLS Blank "BK0" TO aDadFrOpc FROM aCabFrOpc
	EndIf

	(cAliasBK0)->(dbCloseArea())
	dbSelectArea("BK0")

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Forma de Cobranca da Taxa de Adesao...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabAde ) == 0
	Store Header "BJL" TO aCabAde For SX3->X3_CAMPO $ "BJL_CODFOR,BJL_DESFOR,BJL_AUTOMA"
Endif
If nOpcx == K_Incluir
	Store COLS Blank "BJL" TO aDadAde FROM aCabAde
Else

	cQuery := ""

	lQuery := .T.

	aStruBJL	:= BJL->(dbStruct())
	cAliasBJL := "QRYBJL"

	cQuery := "SELECT BJL.* "
	cQuery += " FROM "
	cQuery += RetSqlName("BJL")+ " BJL "
	cQuery += " WHERE "
	cQuery += "BJL_FILIAL = '"+xFilial("BJL")+"' AND "
	cQuery += "BJL_CODOPE = '"+BA1->BA1_CODINT+"' AND "
	cQuery += "BJL_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
	cQuery += "BJL_MATRIC = '"+BA1->BA1_MATRIC+"' AND "
	cQuery += "BJL.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBJL,.F.,.T.)

	For nCntFor := 1 To Len(aStruBJL)
		If ( aStruBJL[nCntFor,2]<>"C" )
			TcSetField(cAliasBJL,aStruBJL[nCntFor,1],aStruBJL[nCntFor,2],aStruBJL[nCntFor,3],aStruBJL[nCntFor,4])
		EndIf
	Next nCntFor

	While !Eof()

		Aadd(aDadAde,Array(Len(aCabAde)+1))

		BJL->(MsGoto((cAliasBJL)->R_E_C_N_O_))

		For nX := 1 To Len(aCabAde)
			If ( aCabAde[nX,10] !=  "V" )
				aDadAde[Len(aDadAde)][nX] := (cAliasBJL)->(FieldGet(FieldPos(aCabAde[nX,2])))
			Else
				aDadAde[Len(aDadAde)][nX] := CriaVar(aCabAde[nX,2],.T.)
			EndIf
		Next nX
		aDadAde[Len(aDadAde)][Len(aCabAde)+1] := .F.

		Aadd(aTrbAde, (cAliasBJL)->R_E_C_N_O_ )

		dbSelectArea(cAliasBJL)
		dbSkip()

	EndDo

	If Empty(aDadAde)
		BJL->(MsGoto(0))
		Store COLS Blank "BJL" TO aDadAde FROM aCabAde
	EndIf

	(cAliasBJL)->(dbCloseArea())
	dbSelectArea("BJL")

Endif

Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³ DAdosBZ ³ Autor ³ Tulio Cesar            ³ Data ³ 26.01.00 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Cadastro de Familias                                       ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function DadosBZ()

Local nCntFor	:= 0
Local nX		:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZN                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZN ) == 0
	Store Header "BZN" TO aCabBZN For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZN" TO aDadBZN FROM aCabBZN
Else

	cQuery := ""

    lQuery := .T.

	aStruBZN	:= BZN->(dbStruct())

    cAliasBZN := "QRYBZN"

    cQuery := "SELECT BZN.* "
    cQuery += " FROM "
    cQuery += RetSqlName("BZN")+ " BZN "
    cQuery += " WHERE "
    cQuery += "BZN_FILIAL = '"+xFilial("BZN")+"' AND "
    cQuery += "BZN_CODINT = '"+BA1->BA1_CODINT+"' AND "
    cQuery += "BZN_MATRIC = '"+cChave+"' AND "
    cQuery += "BZN.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBZN,.F.,.T.)

	For nCntFor := 1 To Len(aStruBZN)
		If ( aStruBZN[nCntFor,2]<>"C" )
			TcSetField(cAliasBZN,aStruBZN[nCntFor,1],aStruBZN[nCntFor,2],aStruBZN[nCntFor,3],aStruBZN[nCntFor,4])
		EndIf
	Next nCntFor

	While !Eof()

		Aadd(aDadBZN,Array(Len(aCabBZN)+1))

		BZN->(MsGoto((cAliasBZN)->R_E_C_N_O_))

		For nX := 1 To Len(aCabBZN)
			If ( aCabBZN[nX,10] !=  "V" )
				aDadBZN[Len(aDadBZN)][nX] := (cAliasBZN)->(FieldGet(FieldPos(aCabBZN[nX,2])))
			Else
				aDadBZN[Len(aDadBZN)][nX] := CriaVar(aCabBZN[nX,2],.T.)
			EndIf
		Next nX
		aDadBZN[Len(aDadBZN)][Len(aCabBZN)+1] := .F.

		Aadd(aVetBZN, (cAliasBZN)->R_E_C_N_O_ )

		dbSelectArea(cAliasBZN)
		dbSkip()

	EndDo

	If Empty(aDadBZN)
		BZN->(MsGoto(0))
		Store COLS Blank "BZN" TO aDadBZN FROM aCabBZN
	EndIf

	(cAliasBZN)->(dbCloseArea())
	dbSelectArea("BZN")

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZO                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZO ) == 0
	Store Header "BZO" TO aCabBZO For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZO" TO aDadBZO FROM aCabBZO
Else

	cQuery := ""

    lQuery := .T.

    cAliasBZO := "QRYBZO"
	aStruBZO	:= BZO->(dbStruct())

    cQuery := "SELECT BZO.* "
    cQuery += " FROM "
    cQuery += RetSqlName("BZO")+ " BZO "
    cQuery += " WHERE "
    cQuery += "BZO_FILIAL = '"+xFilial("BZO")+"' AND "
    cQuery += "BZO_CODINT = '"+BA1->BA1_CODINT+"' AND "
    cQuery += "BZO_MATRIC = '"+cChave+"' AND "
    cQuery += "BZO.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBZO,.F.,.T.)

	For nCntFor := 1 To Len(aStruBZO)
		If ( aStruBZO[nCntFor,2]<>"C" )
			TcSetField(cAliasBZO,aStruBZO[nCntFor,1],aStruBZO[nCntFor,2],aStruBZO[nCntFor,3],aStruBZO[nCntFor,4])
		EndIf
	Next nCntFor

	While !Eof()

		Aadd(aDadBZO,Array(Len(aCabBZO)+1))

		BZO->(MsGoto((cAliasBZO)->R_E_C_N_O_))

		For nX := 1 To Len(aCabBZO)
			If ( aCabBZO[nX,10] !=  "V" )
				aDadBZO[Len(aDadBZO)][nX] := (cAliasBZO)->(FieldGet(FieldPos(aCabBZO[nX,2])))
			Else
				aDadBZO[Len(aDadBZO)][nX] := CriaVar(aCabBZO[nX,2],.T.)
			EndIf
		Next nX
		aDadBZO[Len(aDadBZO)][Len(aCabBZO)+1] := .F.

		Aadd(aVetBZO, (cAliasBZO)->R_E_C_N_O_ )

		dbSelectArea(cAliasBZO)
		dbSkip()

	EndDo

	If Empty(aDadBZO)
		BZO->(MsGoto(0))
		Store COLS Blank "BZO" TO aDadBZO FROM aCabBZO
	EndIf

	(cAliasBZO)->(dbCloseArea())
	dbSelectArea("BZO")

Endif


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZP                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZP ) == 0
	Store Header "BZP" TO aCabBZP For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZP" TO aDadBZP FROM aCabBZP
Else

	cQuery := ""

    lQuery := .T.

	aStruBZP	:= BZP->(dbStruct())
    cAliasBZP := "QRYBZP"

    cQuery := "SELECT BZP.* "
    cQuery += " FROM "
    cQuery += RetSqlName("BZP")+ " BZP "
    cQuery += " WHERE "
    cQuery += "BZP_FILIAL = '"+xFilial("BZO")+"' AND "
    cQuery += "BZP_CODINT = '"+BA1->BA1_CODINT+"' AND "
    cQuery += "BZP_MATRIC = '"+cChave+"' AND "
    cQuery += "BZP.D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBZP,.F.,.T.)

	For nCntFor := 1 To Len(aStruBZP)
		If ( aStruBZP[nCntFor,2]<>"C" )
			TcSetField(cAliasBZP,aStruBZP[nCntFor,1],aStruBZP[nCntFor,2],aStruBZP[nCntFor,3],aStruBZP[nCntFor,4])
		EndIf
	Next nCntFor

	While !Eof()

		Aadd(aDadBZP,Array(Len(aCabBZP)+1))

		BZP->(MsGoto((cAliasBZP)->R_E_C_N_O_))

		For nX := 1 To Len(aCabBZP)
			If ( aCabBZP[nX,10] !=  "V" )
				aDadBZP[Len(aDadBZP)][nX] := (cAliasBZP)->(FieldGet(FieldPos(aCabBZP[nX,2])))
			Else
				aDadBZP[Len(aDadBZP)][nX] := CriaVar(aCabBZP[nX,2],.T.)
			EndIf
		Next nX
		aDadBZP[Len(aDadBZP)][Len(aCabBZP)+1] := .F.

		Aadd(aVetBZP, (cAliasBZP)->R_E_C_N_O_ )

		dbSelectArea(cAliasBZP)
		dbSkip()

	EndDo

	If Empty(aDadBZP)
		BZP->(MsGoto(0))
		Store COLS Blank "BZP" TO aDadBZP FROM aCabBZP
	EndIf

	(cAliasBZP)->(dbCloseArea())
	dbSelectArea("BZP")

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZ0                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZ0 ) == 0
	Store Header "BZ0" TO aCabBZ0 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZ0" TO aDadBZ0 FROM aCabBZ0
Else
	BZ0->(DbSetOrder(1))
	If ! BZ0->(MsSeek(xFilial("BZ0")+cChave))
		Store COLS Blank "BZ0" TO aDadBZ0 FROM aCabBZ0
	Else
		Store COLS "BZ0" TO aDadBZ0 FROM aCabBZ0 VETTRAB aVetBZ0 While xFilial("BZ0")+cChave == BZ0->(BZ0_FILIAL+BZ0_CODINT+BZ0_CODEMP+BZ0_MATRIC)
	Endif
Endif


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZ1                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZ1 ) == 0
	Store Header "BZ1" TO aCabBZ1 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZ1" TO aDadBZ1 FROM aCabBZ1
Else
	BZ1->(DbSetOrder(1))
	If ! BZ1->(MsSeek(xFilial("BZ1")+cChave))
		Store COLS Blank "BZ1" TO aDadBZ1 FROM aCabBZ1
	Else
		Store COLS "BZ1" TO aDadBZ1 FROM aCabBZ1 VETTRAB aVetBZ1 While xFilial("BZ1")+cChave == BZ1->(BZ1_FILIAL+BZ1_CODINT+BZ1_CODEMP+BZ1_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZQ                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZQ ) == 0
	Store Header "BZQ" TO aCabBZQ For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZQ" TO aDadBZQ FROM aCabBZQ
Else
	BZQ->(DbSetOrder(1))
	If ! BZQ->(MsSeek(xFilial("BZQ")+cChave))
		cCodPadOpc	:= BZQ->BZQ_CODPAD
		cCodPsaOpc	:= BZQ->BZQ_CODPSA
		Store COLS Blank "BZQ" TO aDadBZQ FROM aCabBZQ
	Else
		Store COLS "BZQ" TO aDadBZQ FROM aCabBZQ VETTRAB aVetBZQ While xFilial("BZQ")+cChave == BZQ->(BZQ_FILIAL+BZQ_CODINT+BZQ_CODEMP+BZQ_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZR                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZR ) == 0
	Store Header "BZR" TO aCabBZR For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZR" TO aDadBZR FROM aCabBZR
Else
	BZR->(DbSetOrder(1))
	If ! BZR->(MsSeek(xFilial("BZR")+cChave))
		cOpcCID	:= BZR->BZR_CID
		Store COLS Blank "BZR" TO aDadBZR FROM aCabBZR
	Else
		Store COLS "BZR" TO aDadBZR FROM aCabBZR VETTRAB aVetBZR While xFilial("BZR")+cChave == BZR->(BZR_FILIAL+BZR_CODINT+BZR_CODEMP+BZR_MATRIC)
	Endif
Endif


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZS                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZS ) == 0
	Store Header "BZS" TO aCabBZS For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZS" TO aDadBZS FROM aCabBZS
Else
	BZS->(DbSetOrder(1))
	If ! BZS->(MsSeek(xFilial("BZS")+cChave))
		Store COLS Blank "BZS" TO aDadBZS FROM aCabBZS
	Else
		Store COLS "BZS" TO aDadBZS FROM aCabBZS VETTRAB aVetBZS While xFilial("BZS")+cChave == BZS->(BZS_FILIAL+BZS_CODINT+BZS_CODEMP+BZS_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BVH                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBVH ) == 0
	Store Header "BVH" TO aCabBVH For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BVH" TO aDadBVH FROM aCabBVH
Else
	BVH->(DbSetOrder(1))
	If ! BVH->(MsSeek(xFilial("BVH")+cChave))
		Store COLS Blank "BVH" TO aDadBVH FROM aCabBVH
	Else
		Store COLS "BVH" TO aDadBVH FROM aCabBVH VETTRAB aVetBVH While xFilial("BVH")+cChave == BVH->(BVH_FILIAL+BVH_CODINT+BVH_CODEMP+BVH_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZU                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZU ) == 0
	Store Header "BZU" TO aCabBZU For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZU" TO aDadBZU FROM aCabBZU
Else
	BZU->(DbSetOrder(1))
	If ! BZU->(MsSeek(xFilial("BZU")+cChave))
		Store COLS Blank "BZU" TO aDadBZU FROM aCabBZU
	Else
		Store COLS "BZU" TO aDadBZU FROM aCabBZU VETTRAB aVetBZU While xFilial("BZU")+cChave == BZU->(BZU_FILIAL+BZU_CODINT+BZU_CODEMP+BZU_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZT                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZT ) == 0
	Store Header "BZT" TO aCabBZT For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZT" TO aDadBZT FROM aCabBZT
Else
	BZT->(DbSetOrder(1))
	If ! BZT->(MsSeek(xFilial("BZT")+cChave))
		cOpcESP	:= BZT->BZT_CODESP
		Store COLS Blank "BZT" TO aDadBZT FROM aCabBZT
	Else
		Store COLS "BZT" TO aDadBZT FROM aCabBZT VETTRAB aVetBZT While xFilial("BZT")+cChave == BZT->(BZT_FILIAL+BZT_CODINT+BZT_CODEMP+BZT_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BZV                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBZV ) == 0
	Store Header "BZV" TO aCabBZV For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BZV" TO aDadBZV FROM aCabBZV
Else
	BZV->(DbSetOrder(1))
	If ! BZV->(MsSeek(xFilial("BZV")+cChave))
		Store COLS Blank "BZV" TO aDadBZV FROM aCabBZV
	Else
		Store COLS "BZV" TO aDadBZV FROM aCabBZV VETTRAB aVetBZV While xFilial("BZV")+cChave == BZV->(BZV_FILIAL+BZV_CODINT+BZV_CODEMP+BZV_MATRIC)
	Endif
Endif

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³ GravaBZt³ Autor ³ Tulio Cesar            ³ Data ³ 26.01.00 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Cadastro de Familias                                       ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function GravaBZ(nOpc)
Local aChave
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GRUPOS DETERMINADOS DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZN") == "O"
   aChave := {}
   aadd(aChave,{"BZN_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZN_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZN_MATRIC",M->BA3_MATRIC})
   oGetBZN:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CLASSE CARENCIA GRUPOS DETERMINADOS DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZO") == "O"
   aChave := {}
   aadd(aChave,{"BZO_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZO_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZO_MATRIC",M->BA3_MATRIC})
   oGetBZO:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTICIPACAO GRUPOS DETERMINADOS DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZP") == "O"
   aChave := {}
   aadd(aChave,{"BZP_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZP_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZP_MATRIC",M->BA3_MATRIC})
   oGetBZP:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GRUPOS QUANTIDADES  DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZ0") == "O"
   aChave := {}
   aadd(aChave,{"BZ0_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZ0_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZ0_MATRIC",M->BA3_MATRIC})
   oGetBZ0:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ co-participacao GRUPOS QUANTIDADES  DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZ1") == "O"
   aChave := {}
   aadd(aChave,{"BZ1_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZ1_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZ1_MATRIC",M->BA3_MATRIC})
   oGetBZ1:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ PROCEDIMENTOS       DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZQ") == "O"
   aChave := {}
   aadd(aChave,{"BZQ_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZQ_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZQ_MATRIC",M->BA3_MATRIC})
   oGetBZQ:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CID                 DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZR") == "O"
   aChave := {}
   aadd(aChave,{"BZR_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZR_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZR_MATRIC",M->BA3_MATRIC})
   oGetBZR:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTIC. CID      DENTRO DE Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZS") == "O"
   aChave := {}
   aadd(aChave,{"BZS_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZS_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZS_MATRIC",M->BA3_MATRIC})
   oGetBZS:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTIC. ESPECIALIDADE                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBVH") == "O"
   aChave := {}
   aadd(aChave,{"BVH_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BVH_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BVH_MATRIC",M->BA3_MATRIC})
   oGetBVH:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTIC. ESPEC.   DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZU") == "O"
   aChave := {}
   aadd(aChave,{"BZU_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZU_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZU_MATRIC",M->BA3_MATRIC})
   oGetBZU:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ ESPECIALIDADE       DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZT") == "O"
   aChave := {}
   aadd(aChave,{"BZT_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZT_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZT_MATRIC",M->BA3_MATRIC})
   oGetBZT:Grava(aChave,.F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTICIPACAO     DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBZV") == "O"
   aChave := {}
   aadd(aChave,{"BZV_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BZV_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BZV_MATRIC",M->BA3_MATRIC})
   oGetBZV:Grava(aChave, .F.)
Endif

Return



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  08-09-03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function DadosBV()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV0                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV0 ) == 0
	Store Header "BV0" TO aCabBV0 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV0" TO aDadBV0 FROM aCabBV0
Else
	BV0->(DbSetOrder(1))
	If ! BV0->(MsSeek(xFilial("BV0")+cChave))
		Store COLS Blank "BV0" TO aDadBV0 FROM aCabBV0
	Else
		Store COLS "BV0" TO aDadBV0 FROM aCabBV0 VETTRAB aVetBV0 While xFilial("BV0")+cChave == BV0->(BV0_FILIAL+BV0_CODINT+BV0_CODEMP+BV0_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV1                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV1 ) == 0
	Store Header "BV1" TO aCabBV1 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV1" TO aDadBV1 FROM aCabBV1
Else
	BV1->(DbSetOrder(1))
	If ! BV1->(MsSeek(xFilial("BV1")+cChave))
		Store COLS Blank "BV1" TO aDadBV1 FROM aCabBV1
	Else
		Store COLS "BV1" TO aDadBV1 FROM aCabBV1 VETTRAB aVetBV1 While xFilial("BV1")+cChave == BV1->(BV1_FILIAL+BV1_CODINT+BV1_CODEMP+BV1_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV2                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV2 ) == 0
	Store Header "BV2" TO aCabBV2 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV2" TO aDadBV2 FROM aCabBV2
Else
	BV2->(DbSetOrder(1))
	If ! BV2->(MsSeek(xFilial("BV2")+cChave))
		Store COLS Blank "BV2" TO aDadBV2 FROM aCabBV2
	Else
		Store COLS "BV2" TO aDadBV2 FROM aCabBV2 VETTRAB aVetBV2 While xFilial("BV2")+cChave == BV2->(BV2_FILIAL+BV2_CODINT+BV2_CODEMP+BV2_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV9                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV9 ) == 0
	Store Header "BV9" TO aCabBV9 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV9" TO aDadBV9 FROM aCabBV9
Else
	BV9->(DbSetOrder(1))
	If ! BV9->(MsSeek(xFilial("BV9")+cChave))
		Store COLS Blank "BV9" TO aDadBV9 FROM aCabBV9
	Else
		Store COLS "BV9" TO aDadBV9 FROM aCabBV9 VETTRAB aVetBV9 While xFilial("BV9")+cChave == BV9->(BV9_FILIAL+BV9_CODINT+BV9_CODEMP+BV9_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BVA                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBVA ) == 0
	Store Header "BVA" TO aCabBVA For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BVA" TO aDadBVA FROM aCabBVA
Else
	BVA->(DbSetOrder(1))
	If ! BVA->(MsSeek(xFilial("BVA")+cChave))
		Store COLS Blank "BVA" TO aDadBVA FROM aCabBVA
	Else
		Store COLS "BVA" TO aDadBVA FROM aCabBVA VETTRAB aVetBVA While xFilial("BVA")+cChave == BVA->(BVA_FILIAL+BVA_CODINT+BVA_CODEMP+BVA_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BVC                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBVC ) == 0
	Store Header "BVC" TO aCabBVC For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BVC" TO aDadBVC FROM aCabBVC
	aDadBVC[1,2] := "0"	 // para nao trazer duas linhas na get apos passar pelo filtro como o acols em branco.
Else
	BVC->(DbSetOrder(1))
	If ! BVC->(MsSeek(xFilial("BVC")+cChave))
		Store COLS Blank "BVC" TO aDadBVC FROM aCabBVC
		aDadBVC[1,2] := "0"	 // para nao trazer duas linhas na get apos passar pelo filtro como o acols em branco.
	Else
		Store COLS "BVC" TO aDadBVC FROM aCabBVC VETTRAB aVetBVC While xFilial("BVC")+cChave == BVC->(BVC_FILIAL+BVC_CODINT+BVC_CODEMP+BVC_MATRIC)
	Endif
Endif



//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BVF                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBVF ) == 0
	Store Header "BVF" TO aCabBVF For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BVF" TO aDadBVF FROM aCabBVF
Else
	BVF->(DbSetOrder(1))
	If ! BVF->(MsSeek(xFilial("BVF")+cChave))
		Store COLS Blank "BVF" TO aDadBVF FROM aCabBVF
	Else
		Store COLS "BVF" TO aDadBVF FROM aCabBVF VETTRAB aVetBVF While xFilial("BVF")+cChave == BVF->(BVF_FILIAL+BVF_CODINT+BVF_CODEMP+BVF_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV3                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV3 ) == 0
	Store Header "BV3" TO aCabBV3 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV3" TO aDadBV3 FROM aCabBV3
Else
	BV3->(DbSetOrder(1))
	If ! BV3->(MsSeek(xFilial("BV3")+cChave))
		cOCodPadOpc	:= BV3->BV3_CODPAD
		cOCodPsaOpc	:= BV3->BV3_CODPSA
		Store COLS Blank "BV3" TO aDadBV3 FROM aCabBV3
	Else
		Store COLS "BV3" TO aDadBV3 FROM aCabBV3 VETTRAB aVetBV3 While xFilial("BV3")+cChave == BV3->(BV3_FILIAL+BV3_CODINT+BV3_CODEMP+BV3_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV4                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV4 ) == 0
	Store Header "BV4" TO aCabBV4 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV4" TO aDadBV4 FROM aCabBV4
Else
	BV4->(DbSetOrder(1))
	If ! BV4->(MsSeek(xFilial("BV4")+cChave))
		cOOpcCID	:= BV4->BV4_CID
		Store COLS Blank "BV4" TO aDadBV4 FROM aCabBV4
	Else
		Store COLS "BV4" TO aDadBV4 FROM aCabBV4 VETTRAB aVetBV4 While xFilial("BV4")+cChave == BV4->(BV4_FILIAL+BV4_CODINT+BV4_CODEMP+BV4_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV5                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV5 ) == 0
	Store Header "BV5" TO aCabBV5 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV5" TO aDadBV5 FROM aCabBV5
Else
	BV5->(DbSetOrder(1))
	If ! BV5->(MsSeek(xFilial("BV5")+cChave))
		Store COLS Blank "BV5" TO aDadBV5 FROM aCabBV5
	Else
		Store COLS "BV5" TO aDadBV5 FROM aCabBV5 VETTRAB aVetBV5 While xFilial("BV5")+cChave == BV5->(BV5_FILIAL+BV5_CODINT+BV5_CODEMP+BV5_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV7                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV7 ) == 0
	Store Header "BV7" TO aCabBV7 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV7" TO aDadBV7 FROM aCabBV7
Else
	BV7->(DbSetOrder(1))
	If ! BV7->(MsSeek(xFilial("BV7")+cChave))
		Store COLS Blank "BV7" TO aDadBV7 FROM aCabBV7
	Else
		Store COLS "BV7" TO aDadBV7 FROM aCabBV7 VETTRAB aVetBV7 While xFilial("BV7")+cChave == BV7->(BV7_FILIAL+BV7_CODINT+BV7_CODEMP+BV7_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV6                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV6 ) == 0
	Store Header "BV6" TO aCabBV6 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV6" TO aDadBV6 FROM aCabBV6
Else
	BV6->(DbSetOrder(1))
	If ! BV6->(MsSeek(xFilial("BV6")+cChave))
		cOOpcESP	:= BV6->BV6_CODESP
		Store COLS Blank "BV6" TO aDadBV6 FROM aCabBV6
	Else
		Store COLS "BV6" TO aDadBV6 FROM aCabBV6 VETTRAB aVetBV6 While xFilial("BV6")+cChave == BV6->(BV6_FILIAL+BV6_CODINT+BV6_CODEMP+BV6_MATRIC)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta a getdados BV8                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len( aCabBV8 ) == 0
	Store Header "BV8" TO aCabBV8 For .T.
Endif

If nOpcx == K_Incluir
	Store COLS Blank "BV8" TO aDadBV8 FROM aCabBV8
Else
	BV8->(DbSetOrder(1))
	If ! BV8->(MsSeek(xFilial("BV8")+cChave))
		Store COLS Blank "BV8" TO aDadBV8 FROM aCabBV8
	Else
		Store COLS "BV8" TO aDadBV8 FROM aCabBV8 VETTRAB aVetBV8 While xFilial("BV8")+cChave == BV8->(BV8_FILIAL+BV8_CODINT+BV8_CODEMP+BV8_MATRIC)
	Endif
Endif
Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  01/22/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function GravaBV(nOpc)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GRUPOS DETERMINADOS DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV0") == "O"
   aChave := {}
   aadd(aChave,{"BV0_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV0_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV0_MATRIC",M->BA3_MATRIC})
   oGetBV0:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CLASSE CARENCIA GRUPOS DETERMINADOS DENTRO DE Opcionais do Contrato ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV1") == "O"
   aChave := {}
   aadd(aChave,{"BV1_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV1_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV1_MATRIC",M->BA3_MATRIC})
   oGetBV1:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTICIPACAO GRUPOS DETERMINADOS DENTRO DE Opcionais do Contrato ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV2") == "O"
   aChave := {}
   aadd(aChave,{"BV2_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV2_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV2_MATRIC",M->BA3_MATRIC})
   oGetBV2:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ GRUPOS QUANTIDADES  DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV3") == "O"
   aChave := {}
   aadd(aChave,{"BV3_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV3_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV3_MATRIC",M->BA3_MATRIC})
   oGetBV3:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ co-participacao GRUPOS QUANTIDADES  DENTRO DE Opcionais do Contrato ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV4") == "O"
   aChave := {}
   aadd(aChave,{"BV4_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV4_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV4_MATRIC",M->BA3_MATRIC})
   oGetBV4:Grava(aChave, .T.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ PROCEDIMENTOS       DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV5") == "O"
   aChave := {}
   aadd(aChave,{"BV5_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV5_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV5_MATRIC",M->BA3_MATRIC})
   oGetBV5:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CID                 DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV6") == "O"
   aChave := {}
   aadd(aChave,{"BV6_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV6_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV6_MATRIC",M->BA3_MATRIC})
   oGetBV6:Grava(aChave,.F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTIC. CID      DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV7") == "O"
   aChave := {}
   aadd(aChave,{"BV7_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV7_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV7_MATRIC",M->BA3_MATRIC})
   oGetBV7:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTIC. ESPEC.   DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV8") == "O"
   aChave := {}
   aadd(aChave,{"BV8_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV8_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV8_MATRIC",M->BA3_MATRIC})
   oGetBV8:Grava(aChave, .T.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ ESPECIALIDADE       DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBV9") == "O"
   aChave := {}
   aadd(aChave,{"BV9_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BV9_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BV9_MATRIC",M->BA3_MATRIC})
   oGetBV9:Grava(aChave, .F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ CO-PARTICIPACAO     DENTRO DE Opcionais do Contrato ....            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBVA") == "O"
   aChave := {}
   aadd(aChave,{"BVA_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BVA_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BVA_MATRIC",M->BA3_MATRIC})
   oGetBVA:Grava(aChave, .F.)
Endif

Return()



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  01/22/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function GravaGets(nOpc)
LOCAL aChave	:= {}
LOCAL nInd		:= 0
LOCAL i
LOCAL j
LOCAL nOusu		:= 0
LOCAL bOusu		:= .F.
LOCAL nOpcao  := PLRETPOS("BF1_CODPRO", oBrwOpc:AHEADER)
LOCAL cOpcao	  := ""
LOCAL nVersao := PLRETPOS("BF1_VERSAO", oBrwOpc:AHEADER)
LOCAL cVersao := ""
LOCAL lUsaSIP	:= '1' $ GetNewPar('MV_PLSTIPO','')

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Opcionais do Contrato ....                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BF1_CODINT",M->BA3_CODINT})
aadd(aChave,{"BF1_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BF1_MATRIC",M->BA3_MATRIC})
//	Se Existir Opcional(BF1) Deletado, Excluir os Registros do Faixa Etária(BBY) e Desconto(BG0)
j := LEN(oBrwOpc:ACOLS[1])
BBY->(DBSETORDER(1))
BG0->(DBSETORDER(1))
FOR i := 1 TO LEN(oBrwOpc:ACOLS)
	IF oBrwOpc:ACOLS[i, j]
		cOpcao  := oBrwOpc:ACOLS[i, nOpcao]
		cVersao := oBrwOpc:ACOLS[i, nVersao]
		BBY->(DBSEEK(XFILIAL()+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+cOpcao+cVersao))
		WHILE XFILIAL("BBY")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+cOpcao+cVersao == BBY->(BBY_FILIAL+BBY_CODOPE+BBY_CODEMP+BBY_MATRIC+BBY_CODOPC+BBY_VEROPC);
				.AND. !BBY->(EOF())
			RECLOCK("BBY")
			DBDELETE()
			MSUNLOCK()
			BBY->(DBSKIP())
		ENDDO
		BG0->(DBSEEK(XFILIAL()+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+cOpcao+cVersao))
		WHILE XFILIAL("BG0")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+cOpcao+cVersao == BG0->(BG0_FILIAL+BG0_CODOPE+BG0_CODEMP+BG0_MATRIC+BG0_CODOPC+BG0_VEROPC);
				.AND. !BG0->(EOF())
			RECLOCK("BG0")
			DBDELETE()
			MSUNLOCK()
			BG0->(DBSKIP())
		ENDDO
	ENDIF
NEXT
oBrwOpc:Grava(aChave,.F.)

GravaBZ(nOpc)
GravaBV(nOpc)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ BVC                ....                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BVC_CODINT",M->BA3_CODINT})
aadd(aChave,{"BVC_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BVC_MATRIC",M->BA3_MATRIC})
oGetBVC:Grava(aChave,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ BVF                ....                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BVF_CODINT",M->BA3_CODINT})
aadd(aChave,{"BVF_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BVF_MATRIC",M->BA3_MATRIC})
oGetBVF:Grava(aChave,.F.)

If BVF->(FieldPos("BVF_NIVEL")) > 0 .And. oGetBVF:lAltered
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualizacao dos campo BVF_NIVEL e BVF_CDNV01.... BVF_CDNV04        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BVF->(DbSetOrder(1))
	If BVF->(MsSeek(xFilial("BVF")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC))
		While ! BVF->(Eof()) .And. BVF->(BVF_FILIAL+BVF_CODINT+BVF_CODEMP+BVF_MATRIC) == ;
			xFilial("BVF")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC

			BR8->(DbSetOrder(1))
			BR8->(MsSeek(xFilial("BR8")+BVF->BVF_CODPAD+BVF->BVF_CODPSA))

			M->BVF_CDNV01 := ""
			M->BVF_CDNV02 := ""
			M->BVF_CDNV03 := ""
			M->BVF_CDNV04 := ""

			PLSGatNiv(BVF->BVF_CODPAD,BVF->BVF_CODPSA,"BVF")
			BVF->(RecLock("BVF",.F.))
			BVF->BVF_NIVEL  := BR8->BR8_NIVEL
			BVF->BVF_CDNV01 := M->BVF_CDNV01
			BVF->BVF_CDNV02 := M->BVF_CDNV02
			BVF->BVF_CDNV03 := M->BVF_CDNV03
			BVF->BVF_CDNV04 := M->BVF_CDNV04
			BVF->(MsUnLock())
			BVF->(DbSkip())
		Enddo
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Formas do Contrato ....                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BJK_CODOPE",M->BA3_CODINT})
aadd(aChave,{"BJK_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BJK_MATRIC",M->BA3_MATRIC})
oBrwFor:Grava(aChave,.T.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Gratuidade do Contrato ...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BH5_CODINT",M->BA3_CODINT})
aadd(aChave,{"BH5_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BH5_MATRIC",M->BA3_MATRIC})
oBrwGra:Grava(aChave,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Protecao financeira...                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaB1V
	aChave := {}
	aadd(aChave,{"B1V_CODINT",M->BA3_CODINT})
	aadd(aChave,{"B1V_CODEMP",M->BA3_CODEMP})
	aadd(aChave,{"B1V_MATRIC",M->BA3_MATRIC})
	oBrwB1V:Grava(aChave,.F.)
Endif

If lCriaB1S
	aChave := {}
	aadd(aChave,{"B1S_CODINT",M->BA3_CODINT})
	aadd(aChave,{"B1S_CODEMP",M->BA3_CODEMP})
	aadd(aChave,{"B1S_MATRIC",M->BA3_MATRIC})
	oBrwB1S:Grava(aChave,.F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura Familia - Grupo de Cobertura                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BFC_CODINT",M->BA3_CODINT})
aadd(aChave,{"BFC_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BFC_MATRIC",M->BA3_MATRIC})
oBrwGruF:Grava(aChave,.F.)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura Familia - Procedimentos                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BFD_CODINT",M->BA3_CODINT})
aadd(aChave,{"BFD_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BFD_MATRIC",M->BA3_MATRIC})
oBrwProF:Grava(aChave,.F.)
lAtuNio := oBrwProF:lAltered .AND. (GetNewPar("MV_PLSEXCO",.F.) .And. FindFunction("PLSCENTOBR"))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Quantidades Familia - Grupo de Quantidades                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BW7_CODINT",M->BA3_CODINT})
aadd(aChave,{"BW7_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BW7_MATRIC",M->BA3_MATRIC})
oBrwQtd:Grava(aChave,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Opcionais do Usuario ...                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BF4_CODINT",M->BA3_CODINT})
aadd(aChave,{"BF4_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BF4_MATRIC",M->BA3_MATRIC})

For nOusu := 1 To Len(oBrwOUsu:aCols)
	If !Empty(oBrwOUsu:aCols[nOusu][1])
		bOusu := .T.
	Else
		oBrwOUsu:aCols[nOusu][Len(oBrwOUsu:aCols[nOusu])] := .T.
	EndIf
Next nOusu

If bOusu
	PLUPTCOLS("BF4",oBrwOUsu:Acols,oBrwOUsu:aHeader,oBrwOUsu:aVetTrab,nOpc,aChave)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe de carencia na familia...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("BFJ")
   aChave := {}
   aadd(aChave,{"BFJ_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BFJ_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BFJ_MATRIC",M->BA3_MATRIC})
   oBrwBFJ:Grava(aChave,.F.)
   lAtuNio := (GetNewPar("MV_PLSEXCO",.F.) .And. FindFunction("PLSCENTOBR")) .and. (lAtuNio .OR. oBrwBFJ:lAltered)
Endif


//Preparo atualização no NIO
If lAtuNio

	DbSelectArea("BA3")
	aAreaBA1 := BA1->(GetArea())

	BA1->(DbSetOrder(2))
	If BA1->(MsSeek(xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)))
		Do While !BA1->(Eof()) .AND. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC) == ;
										xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)
			CarAtuNIO(cAlias,"1",nOpc, lUsaSIP)
			BA1->(DbSkip())
		EndDo
	EndIf

	BA1->(RestArea(aAreaBA1))

EndIf


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Historico dos Opcionais do Contrato ...                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nInd := 1
For nInd := 1 To Len(aVetBloUsu)
	If aVetBloUsu[nInd,9] == "I"
		BGU->(RecLock("BGU",.T.))
	Else
		BGU->(RecLock("BGU",.F.))
	Endif
	BGU->BGU_MATRIC := aVetBloUsu[nInd,1]
	BGU->BGU_TIPREG := aVetBloUsu[nInd,2]
	BGU->BGU_CODPRO := aVetBloUsu[nInd,3]
	BGU->BGU_VERSAO := aVetBloUsu[nInd,4]
	BGU->BGU_MOTBLO := aVetBloUsu[nInd,5]
	BGU->BGU_DATA   := aVetBloUsu[nInd,6]
	BGU->BGU_TIPO   := aVetBloUsu[nInd,7]
	BGU->BGU_USUOPE := aVetBloUsu[nInd,8]
	BGU->(MsUnlock())
Next

aVetBloUsu := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Situacoes adversas...                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BHH_CODINT",M->BA3_CODINT})
aadd(aChave,{"BHH_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BHH_MATRIC",M->BA3_MATRIC})
oBrwBHH:Grava(aChave,.F.)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Doencas Pre-existentes do usuario ...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BF3_CODINT",M->BA3_CODINT})
aadd(aChave,{"BF3_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BF3_MATRIC",M->BA3_MATRIC})
oBrwDoe:Grava(aChave,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cancelamento Reajuste					                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaBYW
	aChave := {}
	aadd(aChave,{"BYW_CODINT",M->BA3_CODINT})
	aadd(aChave,{"BYW_CODEMP",M->BA3_CODEMP})
	aadd(aChave,{"BYW_MATRIC",M->BA3_MATRIC})
	oBrwBYW:Grava(aChave,.F.)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Tabela de precos especificas do usuario...                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For i := 1 To Len(aDadPla)
	For j := 1 To Len(aDadPla[i][4])
		BDK->( dbGoto(aDadPla[i][4][j]) )
		If !BDK->( Eof() )
			BDK->( RecLock("BDK", .F.) )
				BDK->( dbDelete() )
			BDK->( MsUnlock() )
		Endif
	Next
Next
aChave := {}
aadd(aChave,{"BDK_CODINT",M->BA3_CODINT})
aadd(aChave,{"BDK_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BDK_MATRIC",M->BA3_MATRIC})
oBrwBDK:Grava(aChave,.T.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Grupo do Rol de Procedimento										³
//³ Alexander 01/06/2005												³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if lCriaB1W
	aChave := {}
	aadd(aChave,{"B1W_CODINT",M->BA3_CODINT})
	aadd(aChave,{"B1W_CODEMP",M->BA3_CODEMP})
	aadd(aChave,{"B1W_MATRIC",M->BA3_MATRIC})
	oBrwB1W:Grava(aChave,.T.)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Documentos Obrigatorios do usuario ...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BCP_CODOPE",M->BA3_CODINT})
aadd(aChave,{"BCP_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BCP_MATRIC",M->BA3_MATRIC})
oBrwBCP:Grava(aChave,.T.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Gratuidade do Contrato ...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aChave := {}
aadd(aChave,{"BH6_CODINT",M->BA3_CODINT})
aadd(aChave,{"BH6_CODEMP",M->BA3_CODEMP})
aadd(aChave,{"BH6_MATRIC",M->BA3_MATRIC})
oBrwGUsu:Grava(aChave,.T.)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura Usuario - Grupo de Cobertura                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBFE") == "O"
   aChave := {}
   aadd(aChave,{"BFE_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BFE_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BFE_MATRIC",M->BA3_MATRIC})
	// Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
   	If Len(aDadBFE) > 0
		PLUPTCOLS("BFE",aDadBFE,aCabBFE,aVetBFE,nOpc,aChave,.T.)
	Else
		oGetBFE:Grava(aChave, .T.) 
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura Usuario - Grupo de Cobertura                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBVI") == "O"
   aChave := {}
   aadd(aChave,{"BVI_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BVI_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BVI_MATRIC",M->BA3_MATRIC})
   	// Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
	If Len(aDadBVI) > 0
		PLUPTCOLS("BVI",aDadBVI,aCabBVI,aVetBVI,nOpc,aChave,.T.)
	Else
		oGetBVI:Grava(aChave, .T.) 
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura Usuario - Grupo de Cobertura                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBVJ") == "O"
   aChave := {}
   aadd(aChave,{"BVJ_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BVJ_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BVJ_MATRIC",M->BA3_MATRIC}) 
    // Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
	If Len(aDadBVJ) > 0
		PLUPTCOLS("BVJ",aDadBVJ,aCabBVJ,aVetBVJ,nOpc,aChave,.T.)
	Else
		oGetBVJ:Grava(aChave, .T.)
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cobertura Usuario - Grupo de Cobertura                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oGetBVM") == "O"
   aChave := {}
   aadd(aChave,{"BVM_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BVM_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BVM_MATRIC",M->BA3_MATRIC})
    // Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
	If Len(aDadBVM) > 0
		PLUPTCOLS("BVM",aDadBVM,aCabBVM,aVetBVM,nOpc,aChave,.T.)
	Else
		oGetBVM:Grava(aChave, .T.)
	EndIf

   If BVM->(FieldPos("BVM_NIVEL")) > 0 .And. oGetBVM:lAltered
      //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
      //³ Atualizacao dos campo BVM_NIVEL e BVM_CDNV01.... BVM_CDNV02         ³
      //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
      BVM->(DbSetOrder(1))
      If BVM->(MsSeek(xFilial("BVM")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC))
         While ! BVM->(Eof()) .And. BVM->(BVM_FILIAL+BVM_CODINT+BVM_CODEMP+BVM_MATRIC) == ;
                                     xFilial("BVM")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC

               BR8->(DbSetOrder(1))
               BR8->(MsSeek(xFilial("BR8")+BVM->BVM_CODPAD+BVM->BVM_CODPSA))

               M->BVM_CDNV01 := ""
               M->BVM_CDNV02 := ""
               M->BVM_CDNV03 := ""
               M->BVM_CDNV04 := ""

               PLSGatNiv(BVM->BVM_CODPAD,BVM->BVM_CODPSA,"BVM")
               BVM->(RecLock("BVM",.F.))
               BVM->BVM_NIVEL  := BR8->BR8_NIVEL
               BVM->BVM_CDNV01 := M->BVM_CDNV01
               BVM->BVM_CDNV02 := M->BVM_CDNV02
               BVM->BVM_CDNV03 := M->BVM_CDNV03
               BVM->BVM_CDNV04 := M->BVM_CDNV04
               BVM->(MsUnLock())
         BVM->(DbSkip())
         Enddo
      Endif
   Endif
Endif

If Type("oGetBFG") == "O" 
   aChave := {}
   aadd(aChave,{"BFG_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BFG_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BFG_MATRIC",M->BA3_MATRIC})  
    // Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
	If Len(aDadBFG) > 0
		PLUPTCOLS("BFG",aDadBFG,aCabBFG,aVetBFG,nOpc,aChave,.T.)
	Else
		oGetBFG:Grava(aChave, .F.)
	EndIf
Endif

If Type("oGetBW9") == "O"
   aChave := {}
   aadd(aChave,{"BW9_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BW9_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BW9_MATRIC",M->BA3_MATRIC})  
    // Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
	If Len(aDadBW9) > 0
		PLUPTCOLS("BW9",aDadBW9,aCabBW9,aTrbBW9,nOpc,aChave,.T.)
	Else
		oGetBW9:Grava(aChave, .F.)
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Classe de carencia do usuario...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("BFO")
	aChave := {}
	aadd(aChave,{"BFO_CODINT",M->BA3_CODINT})
	aadd(aChave,{"BFO_CODEMP",M->BA3_CODEMP})
	aadd(aChave,{"BFO_MATRIC",M->BA3_MATRIC})
	// Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
	If Len(aDadBFO) > 0
		PLUPTCOLS("BFO",aDadBFO,aCabBFO,aTrbBFO,nOpc,aChave,.T.)
	ElseIf Type('oGetBFO') == "O"
   	    oGetBFO:Grava(aChave, .F.) 
	EndIf
Endif

If Type("oGetBWA") == "O"
   aChave := {}
   aadd(aChave,{"BWA_CODINT",M->BA3_CODINT})
   aadd(aChave,{"BWA_CODEMP",M->BA3_CODEMP})
   aadd(aChave,{"BWA_MATRIC",M->BA3_MATRIC})  
	// Alterado para ser feita a gravação pela função PLUPTCOLS, devido a função 'grava' esta se perdendo no RECNO(no array aVetTrab)
	// e com isso estava fazendo altereções em registros errado. Vinicius.Queiros 17/10/2019
	If Len(aDadBWA) > 0
		PLUPTCOLS("BWA",aDadBWA,aCabBWA,aTrbBWA,nOpc,aChave,.T.)
	Else
		oGetBWA:Grava(aChave, .F.)
	EndIf
Endif

If nOpc == K_Excluir
	BC3->( dbSetorder(1) )
	If BC3->( MsSeek(xFilial("BC3") + M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC) ) )
		While !BC3->( Eof() ) .and. BC3->BC3_MATRIC == M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)
			BC3->( RecLock("BC3", .F.) )
				BC3->( dbDelete() )
			BC3->( MsUnlock() )
			BC3->( dbSkip() )
		Enddo
	Endif

    For nInd := 1 to Len(oBrwUsr:aCols)
		cTipReg := oBrwUsr:FieldGet("BA1_TIPREG",nInd)
		BCA->( dbSetorder(1) )
		If BCA->( MsSeek(xFilial("BCA") + M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cTipReg ) )
			While !BCA->( Eof() ) .and. BCA->(BCA_MATRIC+BCA_TIPREG) == M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cTipReg
				BCA->( RecLock("BCA", .F.) )
					BCA->( dbDelete() )
				BCA->( MsUnlock() )
				BCA->( dbSkip() )
			Enddo
		Endif
	Next

EndIf



Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260OK  ³ Autor ³ Tulio Cesar         ³ Data ³ 16.10.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica processo de atualizacao...                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260OK(nOpc,cChave)

	LOCAL lRet := Eval( { || ( lInterc ) .Or. ( Obrigatorio(oEnchoice:aGets,oEnchoice:aTela) .And. oBrwUsr:TudoOK() ) })
	LOCAL nPosTit := 0
	LOCAL dIncTit := cTod('')
	LOCAL nPosOpc := 0
	LOCAL cTipReg := ''
	LOCAL cTipUsu := ''
	LOCAL nI := 0
	LOCAL nJ := 0
	LOCAL nX := 0
	LOCAL nOrdem := BA1->(INDEXORD())
	LOCAL lIncSU5 := GetNewPar("MV_PLSCONT",.F.)
	LOCAL lIncLogin := GetNewPar("MV_PILOGAU",.F.)
	LOCAL nName := aScan(oBrwUsr:aHeader,{|x| AllTrim(x[2])=="BA1_EMAIL"})
	LOCAL nEmail := aScan(oBrwUsr:aHeader,{|x| AllTrim(x[2])=="BA1_NOMUSR"})
	LOCAL lValidData := GetNewPar("MV_PLVADAT",.T.)
	
	//Variaveis do SIB - Central de Obrigações
	LOCAL lCentralObr := GetNewPar("MV_PLSEXCO",.F.)//Indica se o sistema utilizara a atualizacao automatica da central de obrigacoes sempre que um cadastro relevante for alterado no Protheus
	Local nLenBrw := 0
	Local lSIBSincrono := "2" $ GetNewPar("MV_PLOBRSI","1,2")
	Local lVldSibSin := "2" $ GetNewPar("MV_PLVLDSI","2") .AND. lSIBSincrono 
	Local lGrvCritic := GetNewPar("MV_PLGRCRI",.T.)
	Local lCritSib := .F.
	Local aDadCob := {}
	Local aCmpSib := {}
	Local aCritSib := {}
	Local cSeq := "00"
	Local cVarPLSTP	:= GetNewPar("MV_PLSTIPO","")
	Local lUsaSIB := "2" $ cVarPLSTP
	Local lUsaSIP := "1" $ cVarPLSTP
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Parametro controla a criacao automatica de cliente na inclusao da familia |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	LOCAL cCriaCli := GetNewPar("MV_PLSFMCL","1")
	Local aColsOpc := {}
	
	If lRet
		lRet := PLSA260VDC()
	Endif
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Valida a data de inclusao da familia com a data de inclusao do titular. |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	//Vamos replicar o variavel dos opcionais para uma variavel local
	If Len(oBrwOUsu:aColsNoFil) > 0 
		aColsOpc := aClone(oBrwOUsu:aColsNoFil)
	Else
		aColsOpc := aClone(oBrwOUsu:aCols)
	EndIf

	If lValidData
		For nX := 1 To Len(oBrwUsr:aCols)
			cTipReg := oBrwUsr:aCols[nX][oBrwUsr:PLRETPOS("BA1_TIPREG")]
			cTipUsu := oBrwUsr:aCols[nX][oBrwUsr:PLRETPOS("BA1_TIPUSU")]
			
			If cTipUsu == SuperGetMv("MV_PLCDTIT") //Titular
				dIncTit := oBrwUsr:aCols[nX][oBrwUsr:PLRETPOS("BA1_DATINC")]
				
				If dIncTit <> M->BA3_DATBAS
					MsgAlert(OemtoAnsi(STR0213)) //"A data de inclusão do titular não pode ser diferente da data de inclusão da família."
					lRet := .F.
					Exit
				Endif
				If (nPosOpc := Ascan(aColsOpc, { |x| ((x[oBrwOUsu:PLRETPOS("BF4_TIPREG")] == cTipReg) .And.;
					(!Empty(x[oBrwOUsu:PLRETPOS("BF4_DATBAS")])) .And. (x[oBrwOUsu:PLRETPOS("BF4_DATBAS")] < dIncTit))})) > 0
					MsgAlert(STR0281, STR0071) //STR0281, "A data base do Opcional deve ser maior ou igual a data de inclusão do beneficiário.##" ATENÇÃO
					lRet := .F.
					Exit
				EndIf

			else //Beneficiário
				dIncDep := oBrwUsr:aCols[nX][oBrwUsr:PLRETPOS("BA1_DATINC")]

				If dIncDep < M->BA3_DATBAS 
					MsgAlert(OemtoAnsi(STR0296)) //"A data de inclusão do dependente não pode ser menor que a data de inclusão da família."
					lRet := .F.
					Exit
				Endif

				If (nPosOpc := Ascan(aColsOpc, { |x| ((x[oBrwOUsu:PLRETPOS("BF4_TIPREG")] == cTipReg) .And.;
					(!Empty(x[oBrwOUsu:PLRETPOS("BF4_DATBAS")])) .And. (x[oBrwOUsu:PLRETPOS("BF4_DATBAS")] < dIncDep))})) > 0 
					MsgAlert(STR0281, STR0071) //STR0281, "A data base do Opcional deve ser maior ou igual a data de inclusão do beneficiário.##" ATENÇÃO
					lRet := .F.
					Exit
				EndIf
			EndIf
		Next nX
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica o Dia de Vencimento e Codcli de acordo com Nivel...        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet
		If M->BA3_COBNIV == "1"
			If ( M->BA3_VENCTO == 0 .And. Iif( BA3->( FieldPos("BA3_CONDPA") )>0, Empty(M->BA3_CONDPA), .T.) )
				lRet := .F.
				MsgStop(OemtoAnsi(STR0067)) //"Dia do Vencimento ou Condicao de pagamento obrigatorio para este contrato"
			ElseIf Empty(M->BA3_CODCLI) .AND. cCriaCli <> "1"
				MsgAlert(OemtoAnsi(STR0068)+;	//"A criacao automatica de clientes esta desabilitada no paramentro MV_PLSFMCL, "
				OemtoAnsi(STR0069))	//"e obrigatorio informa-lo manualmente juntamente com a data de vencimento"
				lRet := .F.
			EndIf
		EndIf
	EndIf
	
	If lRet
		Eval(bVldGFoc)
	EndIf
	
	If M->BA3_TIPOUS == "2" .and. lRet // pessoa juridica
		BQC->(DbSetOrder(1))
		If BQC->(MsSeek(xFilial("BQC")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB))
			BT5->(DbSetOrder(1))
			If BT5->(MsSeek(xFilial("BT5")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON))
				If BQC->BQC_OBRFAM == "1"
					If M->BA3_COBNIV # "1"
						ApMsgAlert(OemtoAnsi(STR0070) ,OemtoAnsi(STR0071)) //" O campo 'Cobranca neste nivel' deve ser preenchido com 1=Sim. "
						lRet := .F.
					EndIf
				ElseIf BQC->BQC_COBNIV <> "1" .And. BT5->BT5_COBNIV <> "1" .And. Empty(BG9->BG9_CODCLI)
					If M->BA3_COBNIV # "1"
						ApMsgAlert(OemtoAnsi(STR0070)+Chr(13)+OemtoAnsi(STR0171) ,OemtoAnsi(STR0071)) //" O campo 'Cobranca neste nivel' deve ser preenchido com 1=Sim. "###"A cobrança não foi definida em nenhum dos possíveis níveis (grupo/empresa, contrato ou subcontrato)."
						lRet := .F.
					EndIf
				EndIf
			EndIf
		EndIf
	Elseif M->BA3_TIPOUS == "1" .and. lRet // pessoa juridica
		If Empty(M->BA3_CODCLI) .AND. cCriaCli <> "1"
			MsgAlert(OemtoAnsi(STR0068)+; //"A criacao automatica de clientes esta desabilitada no paramentro MV_PLSFMCL, "
			OemtoAnsi(STR0069)) //"e obrigatorio informa-lo manualmente juntamente com a data de vencimento"
			Return(.F.)
		Endif
	EndIf
	
	// Ponto de entrada para validacao de usuario para inclusao da familia.
	If lRet .and. ExistBlock("PLS260VU")
		lRet := Execblock("PLS260VU",.F.,.F.,{nOpc})
		If !lRet
			Eval(oBrwUsr:bChange)
			oBrwOUsu:oBrowse:oBrowse:setFocus()
		EndIf
	EndIf
	
	// Valida se a versao do produto esta ativa
	If nOpc <> K_Excluir .And. lRet
		DbSelectArea("BIL")
		BIL->(DbSetOrder(1))
		If (BA3->BA3_CODPLA <> M->BA3_CODPLA .Or.;
				BA3->BA3_VERSAO <> M->BA3_VERSAO) .And.;
				BIL->(MsSeek(xFilial("BIL") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO))
			If !Empty(DtoS(BIL->BIL_DATFIN)) .AND. BIL->BIL_DATFIN < dDataBase .And.;
					Aviso(OemtoAnsi(STR0071),OemtoAnsi(STR0178)+CHR(10)+CHR(13)+; //"Atenção"###"A versão do produto informada na família está encerrada."
				OemtoAnsi(STR0179),{OemtoAnsi(STR0085),OemtoAnsi(STR0086)},1) <> 1 //"Deseja continuar?"###"Sim"###"Não"
				lRet := .F.
			EndIf
		EndIf
	
		If lRet
			BA1->(dbSetOrder(2))
			For nI := 1 to Len(oBrwUsr:aCols)
	
				If BA1->(dbSeek(xFilial("BA1")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+;
						oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_TIPREG")]+;
						oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_DIGITO")]))
	
					If (oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_CODPLA")] <> BA1->BA1_CODPLA .Or.;
							oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_VERSAO")] <> BA1->BA1_VERSAO) .And.;
							BIL->(MsSeek(xFilial("BIL")+BA1->BA1_CODINT+oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_CODPLA")]+oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_VERSAO")]))
	
						If !Empty(DtoS(BIL->BIL_DATFIN)) .AND. BIL->BIL_DATFIN < dDataBase .And.;
								Aviso(OemtoAnsi(STR0071),OemtoAnsi(STR0180)+CHR(10)+CHR(13)+;
								OemtoAnsi(STR0179),{OemtoAnsi(STR0085),OemtoAnsi(STR0086)},1) <> 1	//"Atenção"###"Informe uma versão do produto que esteja ativa."###"Ok"
							lRet := .F.
							Exit
						EndIf
					EndIf
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Esta funcao cria um contato na SU5, com informações da BA1               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
					
				_lRetAC8 := lRet
	
				
			//A chamada do PIncLogin foi alterada de lugar, devido ao REQ100
	
			Next nI
			BA1->(dbSetOrder(nOrdem))
		EndIf
	EndIf
	IF lRet .AND. altera .AND. M->BA3_COBNIV == "1"
		IF EMPTY(M->BA3_CODCLI)
			lRet := .F.
			MsgInfo(OemtoAnsi(STR0087))	//	"Informe um Cliente antes de confirmar a cobranca neste nivel"
		ELSEIF EMPTY(M->BA3_NATURE + SA1->A1_NATUREZ)
			lRet := .F.
			MsgInfo(OemtoAnsi(STR0267))	//	"Informe uma Natureza antes de confirmar a cobranca neste nivel"
		ENDIF
	ENDIF
	//Validações da Central de Obrigações
	If lRet .AND. lCentralObr .AND. lUsaSIB .AND. lVldSibSin
		aAreaBA1 := BA1->(GetArea())
		aAreaBA3 := BA3->(GetArea())
		aAreaBTS := BTS->(GetArea())
		
		nLenBrw := Len(oBrwUsr:aCols)
		For nI := 1 To nLenBrw
			
			// Nesse ponto só poderá ser validado pela função PLCGrvBen os itens que ja estão na tabela B3k
			// Na inclusão ainda não temos as informações populadas na tabela B3k, ocorrendo criticas desnecessarias pelo PLSMVCCRTICAS
			If BA1->(dbSeek(xFilial("BA1")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_MATRIC+oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_TIPUSU")]+oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_TIPREG")]+oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_DIGITO")]))

				If   PlSibEnvANS(M->BA3_TIPOUS,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CONEMP,M->BA3_VERCON,;
								M->BA3_SUBCON,M->BA3_VERSUB,oBrwUsr:aCols[nI,oBrwUsr:FieldPos("BA1_INFANS",oBrwUsr:aHeader)])
					//Verifico se a linha do beneficiário foi excluida para passar essa informação para o NIO
					nOpcCentral := IIf(oBrwUsr:aCols[nI,len(oBrwUsr:aheader)+1],K_Excluir, nOpcx)
					
					//Só valido quem não está excluido
					If nOpcCentral != K_Excluir 
						//Verifico se a linha do beneficiário foi excluida para passar essa informação para o NIO
						oModel 	:= Pl260DadNio('3',oBrwUsr,nI,"",aDadCob,;
									.F.,!Empty(oBrwUsr:aCols[nI,oBrwUsr:FieldPos("BA1_DATBLO",oBrwUsr:aHeader)]),nOpcCentral, lUsaSIP )
						
						oModel:SetValue( "B3KMASTER", 'B3K_OPESIB','2')//Inclusão/Alteração*/
						// antes de Gravar nas tabelas BA1,BA2 é preciso fazer a valiação, para não gravar itens errado no SIB 
						cB3KMat	:= oModel:GetValue( "B3KMASTER", 'B3K_MATRIC')
						cNomBen	:= oModel:GetValue( "B3KMASTER", 'B3K_NOMBEN')
						aAdd(aCritSib,{cB3KMat,cNomBen,""})
						PLCGrvBen( oModel,.T.,aCritSib )
						DelClassInf()
					EndIf
				
				EndIf
			Endif	
			
		Next nI
			
		lCritSib := Len(aCritSib) > nLenBrw
		If lCritSib
			PLSCRIGEN(aCritSib,{ {"Codigo Crit.","@C",5} , {"Descrição","@C",200 } , {"Solução","@C",200 } }, "  Críticas de Beneficiários  ")
		EndIf
		
		lRet := !lCritSib .OR. lGrvCritic
		
		RestArea(aAreaBA3)
		RestArea(aAreaBA1)
		RestArea(aAreaBTS)
		
	EndIf
	
	If lRet
		For nI := 1 to Len(oBrwUsr:aCols)
			For nJ := 1 to Len(oBrwUsr:aCols)
				If Empty(oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_DIGITO")]) .And. nJ <> nI ;
				   .AND. oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_TIPREG")] == oBrwUsr:aCols[nJ,oBrwUsr:PLRETPOS("BA1_TIPREG")]
					If aScan(oBrwUsr:aCols,{|x| cSeq == x[oBrwUsr:PLRETPOS("BA1_TIPREG")]}) > 0
						cSeq := strzero(val(cSeq)+1,2)
						While  aScan(oBrwUsr:aCols,{|x| cSeq == x[oBrwUsr:PLRETPOS("BA1_TIPREG")]}) > 0
							cSeq := strzero(val(cSeq)+1,2)
						Enddo
					Endif
					oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_TIPREG")] := cSeq
				EndIf
			Next nJ
		Next nI
	EndIf

Return(lRet)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260VLD ³ Autor ³ Michele Tatagiba    ³ Data ³ 18.09.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza cabecalho a partir da saida da get do usuario     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PLSA260Vld(lNewGrpFm )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica qual o codigo utilizado para indicar o titular.Ex: T       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cTipUsu 	:= GetNewPar("MV_PLCDTIT","T")
LOCAL nI      	:= 0
LOCAL nJ	  	:= 0
LOCAL nQtd    	:= 0
LOCAL nCount  	:= 0
LOCAL lRet    	:= .T.
LOCAL nSeq    	:= 0
local lFlag   	:= .F.
LOCAL lVldResp 	:= M->BA3_CODEMP $ SuperGetMv("MV_PLEMPVL",.F.,"0001") .AND. BA1->( FieldPos("BA1_RESFAM") ) > 0 //Empresas que podem ter um responsável pela família que não necessáriamente é o titular.
LOCAL nIdade  	:= M->BA1_IDADE // Pega a idade do  Titular
LOCAL nIncAutom := GetNewPar("MV_PLCAROP", 1)
Default lNewGrpFm :=.F. // Caso Ativado esta vindo da nova rotina de Grupo de usuarios.

If ExistBlock("PLS260US")
	lRet := Execblock("PLS260US",.F.,.F.)
	If !lRet
		Return(.F.)
	Endif
EndIf
If M->BA1_INFANS == '1' .And. Empty(M->BA1_CPFUSR) .And.;
   M->BA1_TIPUSU <> AllTrim(SuperGetMV("MV_PLCDTIT")) .And.;
   nIdade > 17
	ApMsgAlert(OemtoAnsi(STR0175)) //"E obrigatorio informar o CPF para dependentes maiores de 18 anos"
	Return(.F.)
EndIf
//Valida se possui mais de um responsável na família
If lVldResp .and. !lNewGrpFm
	lDeletado := .F.
	
	nPos  := Ascan(oBrwUsr:AHEADER,{|X|X[2] =="BA1_RESFAM"})
	nPos1 := Ascan(oBrwUsr:AHEADER,{|X|X[2] =="BA1_MOTBLO"})

	nCount := IIf(M->BA1_RESFAM=='1',1,0) 

	For nI:=1 to Len(oBrwUsr:acols)
		
		If nI <> oBrwUsr:oBrowse:nAt
			
			// Verifica quanto tem nao deletado e deletado
			If oBrwUsr:acols[nI][nPos] == "1"  
				If !Empty(Alltrim(oBrwUsr:acols[nI][nPos1])) // Deletado
					lDeletado := .T.
				Else
					// Nao deletado
					nCount ++
				Endif
			EndIf
		Else	
			If Empty(Alltrim(oBrwUsr:acols[nI][nPos1])) .and. nCount > 0 // Se nao estiver Bloqueado
				oBrwUsr:acols[nI][nPos] := "1"
			Endif	
		EndIf //nI <> oBrwUsr:oBrowse:nAt
		
	Next //For nI:=1 to Len(oBrwUsr:acols)
	
	If lDeletado .And. nCount > 0// Limpa os deletados
		For nI:=1 to Len(oBrwUsr:acols)

			// Limpa os deletados
			If oBrwUsr:acols[nI][nPos] == "1"  
				If !Empty(Alltrim(oBrwUsr:acols[nI][nPos1])) // Deletado
					oBrwUsr:acols[nI][nPos] := "0"
				Endif
			EndIf

		Next
		oBrwUsr:ForceRefresh(oBrwUsr)
	Endif	//If lDeletado .And. nCount > 0
	If nCount > 1
		MsgAlert("Não pode existir mais de um beneficiário na familia como responsável (BA1_RESFAM='1')")
		Return(.F.)
	EndIf
Endif

If BG9->BG9_TIPO == "2"
	BT6->(DbSetOrder(1))
	lRet := BT6->(MsSeek(xFilial("BT6")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+;
	M->BA3_SUBCON+M->BA3_VERSUB+M->BA3_CODPLA))
	If ! lRet
		ApMsgAlert(OemtoAnsi(STR0072),OemtoAnsi(STR0071))	 //"Nao foi possivel encontrar o produto informado nesta familia para o subcontrato informado!"
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Valida regras de preenchimento de cpf...                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If M->BA1_INFANS == '1' .AND. (Empty(M->BA1_CPFUSR) .and. Empty(M->BA1_CPFPRE)  .and.;
	                               Empty(M->BA1_CPFMAE) .and. Empty(M->BA1_CPFPAI)) .And.;
	   M->BA1_TIPUSU == AllTrim(GetMV("MV_PLCDTIT"))
		ApMsgAlert(OemtoAnsi(STR0073),OemtoAnsi(STR0071)) //"O CPF do usuario ou do preposto ou da mae ou do pai e obrigatorio para usuarios informados a ANS!"
		lRet := .F.
	Endif
	If lRet .and. !lNewGrpFm

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inclusao automatica das faixas especificas do usuario...            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		A260FaiEsp()

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inclusao automatica dos opcionais do usuario...                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !lNewGrpFm .and.  nIncAutom > 0  .AND. (((nOpcControl := Ascan(aOpcControl,  M->BA1_TIPREG )) == 0 .and. nOpcx == K_Incluir) .or. oBrwUsr:lInAddLine)
			Aadd(aOpcControl, M->BA1_TIPREG) // Adiciona o usuario na lista, para poder controlar pra quem ja foi adicionado os opcionais...
			PL260Opc(.F., nIncAutom == 2)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Trata regra de carencias para novos dependentes e adiciona          ³
			//³ as classes de carencia										        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			Pl260Clas(.T.)
			lFlag := .T.
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Trata novos dependentes...                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		lRet := PL260Regras()
	Endif
	If !lRet
		Return(.F.)
	Endif
ElseIf  !lNewGrpFm

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclusao automatica das faixas especificas do usuario...            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	A260FaiEsp()
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Usuarios permitidos...                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lNewGrpFm 
	nI := ASCAN(aCabUsr, {|x| x[2]  ==   "BA1_MATVID"})	//	Posição do campo BA1_MATVID
	nI := ASCAN(aDadUsr, {|x| x[nI] == M->BA1_MATVID })	//	Se o retorno for 0, é uma Inclusão de Beneficiário, senão será uma Alteração
Endif	

// Inclusão de Beneficiário na Família, irá verificar se tem permissão
// Ou se for uma alteração aonde foi feita alterações em determinados campos
IF nI == 0 .OR.;
	((BA1->BA1_TIPUSU <> M->BA1_TIPUSU .OR. BA1->BA1_GRAUPA <> M->BA1_GRAUPA .OR. BA1->BA1_ESTCIV <> M->BA1_ESTCIV .OR.;
	BA1->BA1_SEXO <> M->BA1_SEXO .OR. BA1->BA1_DATINC <> M->BA1_DATINC .OR. BA1->BA1_DATNAS <> M->BA1_DATNAS) .AND. nI <> 0)

	lRet := PLSPerm(M->BA1_TIPUSU,M->BA1_GRAUPA,M->BA1_ESTCIV,M->BA1_SEXO,iIf(!lNewGrpFm,oBrwUsr,Nil),M->BA3_CODINT,M->BA3_CODPLA,M->BA3_VERSAO,M->BA1_DATINC,M->BA1_DATNAS,M->BA3_CODEMP,M->BA3_CONEMP,M->BA3_VERCON,M->BA3_SUBCON,M->BA3_VERSUB)
EndIf

If !lRet
	Help("",1,"PLSA260VLD")
	Return(.F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Trata novos dependentes...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lNewGrpFm 
	lRet := PL260Regras()
Endif
If !lRet
	Return(.F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busco a quantidade permitida de usuarios para esse grau de parentesco  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BT2->(DBSetOrder(1))
If BT2->(MsSeek(xFilial("BT2")+M->BA1_GRAUPA))
	nSeq := Val(BT2->BT2_SEQATE) - Val(BT2->BT2_SEQDE) + 1
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Analiso se ja existe algum dado na acols do usuario                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lNewGrpFm
	While nJ <> Len(oBrwUsr:aCols)
		nJ++

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifico se o Tipo do Usuario do a acols e o titular atual sao iguais ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ! oBrwUsr:aCols[nJ,Len(oBrwUsr:aHeader)+1]
			If AllTrim(oBrwUsr:aCols[nJ,oBrwUsr:PLRETPOS("BA1_TIPUSU")]) == AllTrim(cTipUsu) .And. nJ <> n
				nQtd ++
			Endif
		Endif

	Enddo
Endif
If nQtd >= nSeq .And. M->BA1_TIPUSU == AllTrim(cTipUsu)
	lRet := .F.
	Help("",1,"PLSA260TPU")	//	Tipos de Titular ja esta cadastrado !!!!
Endif

If !lNewGrpFm
	PLSAVERDOCS(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_MATRIC,M->BA1_TIPREG,M->BA1_TIPUSU,M->BA1_GRAUPA,M->BA1_SEXO,Calc_Idade(dDataBase,M->BA1_DATNAS))
	If 	M->BA1_INFANS = "1" .And.; 	// Somente se informar para ANS
		M->BA1_TIPUSU == ALLTRIM(SuperGetMv("MV_PLCDTIT")) .And. Empty(M->BA1_CPFUSR) .And.;
		Empty(BTS->BTS_PISPAS) .And. Empty(M->BA1_CPFPRE) .And. BTS->BTS_NACION < "20"
		ApMsgAlert(OemtoAnsi(STR0074)) //"Preenchimento obrigatorio do CPF/PIS para usuario titular ou Cpf do Preposto. Preencha um dos campos !"
		return(.f.)
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclusao automatica dos opcionais do usuario...                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nIncAutom > 0 .AND. ( (((nOpcControl := Ascan(aOpcControl,  M->BA1_TIPREG )) == 0 .and. nOpcx == K_Incluir) .or. oBrwUsr:lInAddLine) .And. !lFlag )
		Aadd(aOpcControl, M->BA1_TIPREG) // Adiciona o usuario na lista, para poder controlar pra quem ja foi adicionado os opcionais...
		PL260Opc(.F.,nIncAutom == 2)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Trata regra de carencias para novos dependentes e adiciona          ³
		//³ as classes de carencia										        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Pl260Clas(.F.)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inclusao automatica CPT quando ja no plano bloqueado anterior       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If GetNewPar("MV_PLDTCAR",.F.) .and.  !lNewGrpFm
	If __lCPTBLO .And. !Empty(__cMatriBlo)
		cQuery := ""
		cAliasBF3 := "QUBLBF3"
		cQuery := "SELECT BF3.* "
		cQuery +=  " FROM " + RetSqlName("BF3") + " BF3 "
		cQuery += " WHERE "
		cQuery +=    "BF3_FILIAL = '" + xFilial("BF3") + "' AND "
		cQuery +=    "BF3_CODINT = '" + Substr(__cMatriBlo, 1, 4) + "' AND "
		cQuery +=    "BF3_CODEMP = '" + Substr(__cMatriBlo, 5, 4) + "' AND "
		cQuery +=    "BF3_MATRIC = '" + Substr(__cMatriBlo, 9, 6) + "' AND "
		cQuery +=    "BF3_TIPREG = '" + Substr(__cMatriBlo,15, 2) + "' AND "
		cQuery +=    "BF3.D_E_L_E_T_ = ' ' "
		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasBF3,.F.,.T.)
		For nI := 1 To Len(aStruBF3)
			If ( aStruBF3[nI,2]<>"C" )
				TcSetField(cAliasBF3,aStruBF3[nI,1],aStruBF3[nI,2],aStruBF3[nI,3],aStruBF3[nI,4])
			EndIf
		Next nI
		_nRBA1:= BA1->(Recno())
		BA1->( dbSetorder(02) )
		BA1->( MsSeek(xFilial("BA1")+__cMatriBlo))
		dDatBlo := BA1->BA1_DATBLO
		__cMatriBlo := ""
		BA1->(MsGoto(_nRBA1))
		While !Eof()
			// Regra CPT
			nDiasAgr  := 0
			nDiasCPT  := 0
			nDiasRCPT := (cAliasBF3)->BF3_MESAGR
			dDatCPT   := (cAliasBF3)->BF3_DATCPT
			cUnCPT    := (cAliasBF3)->BF3_UNAGR
			If !Empty((cAliasBF3)->BF3_MESAGR) .And. !Empty((cAliasBF3)->BF3_UNAGR)
				If     (cAliasBF3)->BF3_UNAGR == "2" // Dias
					nDiasAgr := (cAliasBF3)->BF3_MESAGR
				ElseIf (cAliasBF3)->BF3_UNAGR == "3" // Meses
					nDiasAgr := (cAliasBF3)->BF3_MESAGR * 30
				ElseIf (cAliasBF3)->BF3_UNAGR == "4" // Anos
					nDiasAgr := (cAliasBF3)->BF3_MESAGR * 360
				Endif
				nDiasCPT := dDatBlo - (cAliasBF3)->BF3_DATCPT
				If nDiasCPT < nDiasAgr
					nDiasRCPT := nDiasAgr-nDiasCPT
					cUnCPT    := "2"
					dDatCPT   := M->BA1_DATINC
				Endif
			Endif
			If (nI:= Ascan(aDadDoe, { |x| x[1] = (cAliasBF3)->BF3_CODDOE})) > 0
				aDadDoe[nI][PLRETPOS("BF3_MESAGR",aCabDoe)] := nDiasRCPT
				aDadDoe[nI][PLRETPOS("BF3_UNAGR",aCabDoe)]  := cUnCPT
				aDadDoe[nI][PLRETPOS("BF3_DATCPT",aCabDoe)] := dDatCPT
			Else
				Aadd(aDadDoe,Array(Len(aCabDoe)+1))
				For nI := 1 To Len(aCabDoe)
					If ( aCabDoe[nI,10] !=  "V" )
						If     Alltrim(aCabDoe[nI,2]) == "BF3_TIPREG"
							aDadDoe[Len(aDadDoe)][nI] := M->BA1_TIPREG
							// Regra de CPT
						ElseIf Alltrim(aCabDoe[nI,2]) == "BF3_MESAGR"
							aDadDoe[Len(aDadDoe)][nI] := nDiasRCPT
						ElseIf Alltrim(aCabDoe[nI,2]) == "BF3_UNAGR"
							aDadDoe[Len(aDadDoe)][nI] := cUnCPT
						ElseIf Alltrim(aCabDoe[nI,2]) == "BF3_DATCPT"
							aDadDoe[Len(aDadDoe)][nI] := dDatCPT
						Else
							aDadDoe[Len(aDadDoe)][nI] := (cAliasBF3)->(FieldGet(FieldPos(aCabDoe[nI,2])))
						Endif
					Else
						If aCabDoe[nI,2] == "BF3_DESDOE"
							aDadDoe[Len(aDadDoe)][nI] := Posicione("BA9",1,xFilial("BA9")+(cAliasBF3)->BF3_CODDOE,"BA9_DOENCA")
						Else
							aDadDoe[Len(aDadDoe)][nI] := CriaVar(aCabDoe[nI,2],.T.)
						Endif
					EndIf
				Next nI
				aDadDoe[Len(aDadDoe)][Len(aCabDoe)+1] := .F.
				Aadd(oBrwDoe:aVetTrab,0)
			Endif
			dbSkip()
		EndDo
		oBrwDoe:aCols:=aClone(aDadDoe)
		oBrwDoe:ForceRefresh(oBrwUsr)
		(cAliasBF3)->(DbCloseArea())
	Endif
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260VLDO ³ Autor ³ MIchele Tatagiba    ³ Data ³ 20.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza dados da getdados dos opcionais dos usuarios      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260Vldo()
Local lRet		:= .T.
Local cTipBlo	:= ""
Local cReg		:= oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_TIPREG")]
Local nPosOpc	:= 0
Local lResFam	:= GetNewPar("MV_PLRESFA",.F.) .AND. BA1->( FieldPos("BA1_RESFAM") ) > 0 //Habilita o uso do conceito de responsável pela família
Local cResFam	:= IIf(lResFam,oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_RESFAM")],"")
Local dDatBlo	:= oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_DATBLO")]

Local lHabOpc	:= GetNewPar("MV_PVLOPCT",.F.)//Habilita ou não a inclusão de opcionais para dependentes sem titular
Local cTitular 	:= SuperGetMv("MV_PLCDTIT")
Local nCont		:= 0

If lHabOpc

	For nCont := 1 To Len(oBrwUsr:aCols)
		
		lTitular := oBrwUsr:aCols[nCont,oBrwUsr:PLRETPOS("BA1_TIPUSU")] == cTitular
		lRespon := lResFam .AND. ( ( oBrwUsr:aCols[nCont,oBrwUsr:PLRETPOS("BA1_RESFAM")] == '1' .AND. Empty(oBrwUsr:aCols[nCont,oBrwUsr:PLRETPOS("BA1_DATBLO")]) ) .OR. ( Empty(oBrwUsr:aCols[nCont,oBrwUsr:PLRETPOS("BA1_RESFAM")]) .AND. lTitular ) )
			
		If lRespon .OR. lTitular

			cTipRegTit	:= oBrwUsr:aCols[nCont,oBrwUsr:PLRETPOS("BA1_TIPREG")]
		
			//Exit
		
		EndIf
	Next
	
	lTitular := cReg == cTipRegTit
	lRespon := lResFam .AND.;
					 ( ( cResFam == '1' .AND. Empty(dDatBlo) ) .OR. ;
					   ( Empty(cResFam) .AND. lTitular ) )
	
	If lTitular .OR. lRespon 
		PLSA260OPC(BF4->(BF4_CODINT+BF4_CODEMP+BF4_MATRIC),M->BF4_DATBLO, M->BF4_CODPRO,M->BF4_VERSAO,M->BF4_MOTBLO,;
					M->BF4_TIPBLO)
		lRet := .T.
	Else		
		For nCont := 1 To Len(oBrwOUsu:aColsNoFil)
			If M->BF4_CODPRO == oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_CODPRO")] .And. ;
				M->BF4_VERSAO == oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_VERSAO")] .And. ;
				oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_TIPREG")] == cTipRegTit .And. ;
				(EMPTY(oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_DATBLO")]) .OR. ;
				 oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_DATBLO")] > M->BF4_DATBAS )   .AND. ;
				M->BF4_DATBAS >= oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_DATBAS")]  

				lRet := .T.
				Exit
			Else
				lRet := .F.
			EndIf

		Next

		If !lRet
			MsgInfo(STR0273,STR0071) //"Não foi encontrado esse opcional para o titular, por favor verifique!"
		EndIf
	EndIf
EndIf

If lRet
	If ExistBlock('PLVlOpUs')
		ExecBlock('PLVlOpUs',.f.,.f.)
	EndIf

	If Empty(cTipReg)
		lRet := .F.
		Help("",1,"PLS260TPRE")
	Endif

	// Verifico se o produto estava bloqueado, e foi retirado o codigo do bloqueio.
	// É necessario que informe um codigo de desbloqueio, e nao somente deixar o campo de motivo em branco
	If !Empty(oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_MOTBLO")]) .And. Empty(M->BF4_MOTBLO) .And. oBrwOUsu:nOpcx == 4

		BF4->(dbSetOrder(1))
		If BF4->(dbSeek(xFilial("BF4") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_MATRIC + cReg + M->BF4_CODPRO))

			lRet := .F.
			Help("",1,"PLS260VL1")
		EndIf
	Endif

	If !Empty(M->BF4_MOTBLO)
		If BG3->(DbSeek(Xfilial("BG3")+M->BF4_MOTBLO))

			cTipBlo:=BG3->BG3_TIPBLO
		Endif
	Endif

	If !Empty(M->BF4_DATBLO) .And. Empty(M->BF4_MOTBLO)
		lRet := .F.
		Help("",1,"PLS260VL2")
	Endif

	If !Empty(M->BF4_MOTBLO) .And. Empty(M->BF4_DATBLO) .And. cTipBlo =='0'
		lRet := .F.
		Help("",1,"PLS260VL3")
	Endif


	If !Empty(M->BF4_DATBLO) .And. cTipBlo =="1"
		lRet := .F.
		Help("",1,"PLS260VL4")
	Endif

	For nCont := 1 To Len(oBrwOUsu:aCols)
		If  nCont != n .AND. M->BF4_CODPRO == oBrwOUsu:aCols[nCont,oBrwOUsu:PlRetPos("BF4_CODPRO")] .And. ;
			M->BF4_VERSAO == oBrwOUsu:aCols[nCont,oBrwOUsu:PlRetPos("BF4_VERSAO")] 
			
			lRet := .F.
			Help("",1,"Codigo opcional ja utilizado")
			Exit
		EndIf

	Next

	//Só desbloqueio o opcional se o beneficiário também estiver desbloqueado
	If Empty(oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:PlRetPos("BA1_MOTBLO")]) .AND.;
		Empty(oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:PlRetPos("BA1_DATBLO")])
		// Preciso gravar em um arquivo a ser criado esse historico
		If Empty(oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_MOTBLO")]) .And. !Empty(M->BF4_MOTBLO).and. M->BF4_TIPBLO =='0';
			.And. !Empty(M->BF4_DATBLO)
	
			nPosOpc := Ascan(aVetBloUsu,{ |x| x[10] == oBrwUsr:ACOLS[oBrwUsr:obrowse:nat][GdFieldPos("BA1_MATVID",oBrwUsr:AHEADER)] .AND. x[3] == M->BF4_CODPRO})
	
			If nPosOpc > 0
	
				aVetBloUsu[nPosOpc] := {M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC), cTipReg,M->BF4_CODPRO,M->BF4_VERSAO, M->BF4_MOTBLO,M->BF4_DATBLO,"0",cUserName,"I",oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] }
			Else
	
				aadd(aVetBloUsu,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
				cTipReg,M->BF4_CODPRO,M->BF4_VERSAO,;
				M->BF4_MOTBLO,M->BF4_DATBLO,"0",cUserName,"I",oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] })
			EndIf
	
		//Verifico se o motivo do bloqueio foi alterado
		ElseIf !Empty(oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_MOTBLO")]) .And. !Empty(M->BF4_MOTBLO) .And.;
			M->BF4_MOTBLO <> oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_MOTBLO")]// .And. !Empty(M->BF4_DATBLO)
	
			BG3->(DBSetOrder(1))
			If BG3->(MsSeek(xFilial("BG3")+M->BF4_MOTBLO))
	
				nPosOpc := Ascan(aVetBloUsu,{ |x| x[10] == oBrwUsr:ACOLS[oBrwUsr:obrowse:nat][GdFieldPos("BA1_MATVID",oBrwUsr:AHEADER)] .AND. x[3] == M->BF4_CODPRO})
	
				If nPosOpc > 0
	
					aVetBloUsu[nPosOpc] := {M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),cTipReg,M->BF4_CODPRO,M->BF4_VERSAO,M->BF4_MOTBLO,IIF(M->BF4_TIPBLO == '0' .And. !Empty(M->BF4_DATBLO),M->BF4_DATBLO,M->BF4_DATBAS),M->BF4_TIPBLO,cUserName,"I",oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] }
				Else
	
	
					aadd(aVetBloUsu,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
						cTipReg,M->BF4_CODPRO,M->BF4_VERSAO,;
						M->BF4_MOTBLO,IIF(M->BF4_TIPBLO == '0' .And. !Empty(M->BF4_DATBLO),M->BF4_DATBLO,M->BF4_DATBAS),M->BF4_TIPBLO,cUserName,"I",;
						oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] })
				EndIf
			Endif
	
		ElseIf !Empty(oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_DATBLO")]) .And. !Empty(M->BF4_DATBLO) .And.;
			M->BF4_DATBLO <> oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_DATBLO")] .And.;
			M->BF4_MOTBLO == oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_MOTBLO")]
	
			BGU->(DBSetOrder(1))
			If BGU->(MsSeek(xFilial("BGU")+M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+M->(BF4_CODPRO+BF4_VERSAO)+M->BF4_MOTBLO))
				BG3->(DBSetOrder(1))
				If BG3->(MsSeek(xFilial("BG3")+M->BF4_MOTBLO))
					If BG3->BG3_TIPBLO == "0"
	
						nPosOpc := Ascan(aVetBloUsu,{ |x| x[10] == oBrwUsr:ACOLS[oBrwUsr:obrowse:nat][GdFieldPos("BA1_MATVID",oBrwUsr:AHEADER)] .AND. x[3] == M->BF4_CODPRO})
	
						If nPosOpc > 0
	
							aVetBloUsu[nPosOpc] := {M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),cTipReg,M->BF4_CODPRO,M->BF4_VERSAO,M->BF4_MOTBLO,M->BF4_DATBLO,BG3->BG3_TIPBLO,cUserName,"A", oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] }
						Else
	
	
							aadd(aVetBloUsu,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
							cTipReg,M->BF4_CODPRO,M->BF4_VERSAO,;
							M->BF4_MOTBLO,M->BF4_DATBLO,BG3->BG3_TIPBLO,cUserName,"A", oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] })
						EndIf
					Else
	
						nPosOpc := Ascan(aVetBloUsu,{ |x| x[10] == oBrwUsr:ACOLS[oBrwUsr:obrowse:nat][GdFieldPos("BA1_MATVID",oBrwUsr:AHEADER)] .AND. x[3] == M->BF4_CODPRO})
	
						If nPosOpc > 0
	
							aVetBloUsu[nPosOpc] := {M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),cTipReg,M->BF4_CODPRO,M->BF4_VERSAO,M->BF4_MOTBLO,M->BF4_DATBLO,BG3->BG3_TIPBLO,cUserName,"A",oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] }
						Else
	
							aadd(aVetBloUsu,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
							cTipReg,M->BF4_CODPRO,M->BF4_VERSAO,;
							M->BF4_MOTBLO,M->BF4_DATBLO,BG3->BG3_TIPBLO,cUserName,"A",oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] })
						EndIf
					Endif
				Endif
			Endif
		Endif
	EndIf

	If lRet
		M->BF4_TIPREG := cTipReg
	Endif
	
	//Não encontrando vou preencher as tabelas BF4,BYX E BZX com baase nas tabelas do grupo empresa BHS,BJW,BBX,BGW
	If !BF4->(dbSeek(xFilial("BF4") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_MATRIC + cReg + M->BF4_CODPRO)) .And.   lRet
	
		BBX->(DbSelectArea("BBX"))
		BBX->(DbSetOrder(1))
		
		BJ1->(DbSelectArea("BJ1"))
		BJ1->(DbSetOrder(1))
		
	
		BJW->(DbSelectArea("BJW"))
		BJW->(DbSetOrder(1))
		
		
		If BJW->(dbSeek(xFilial("BJW") +M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB+M->BA3_CODPLA+M->BA3_VERSAO+ M->BF4_CODPRO+M->BF4_VERSAO))
		
			While !BJW->(Eof()) .and. BJW->(BJW_FILIAL+BJW_CODIGO+BJW_NUMCON+BJW_VERCON+BJW_SUBCON+BJW_VERSUB+BJW_CODPRO+BJW_VERSAO+BJW_CODOPC+BJW_VEROPC) == xFilial("BJW")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB+M->BA3_CODPLA+M->BA3_VERSAO+ M->BF4_CODPRO+M->BF4_VERSAO
				If Ascan(oBrwUFrOpc:aCols, { |x| x[oBrwUFrOpc:PLRETPOS("BYX_CODOPC")] ==  BJW->BJW_CODOPC  .AND.  x[oBrwUFrOpc:PLRETPOS("BYX_VEROPC")]  == BJW->BJW_VEROPC .AND.  x[oBrwUFrOpc:PLRETPOS("BYX_CODFOR")]  == BJW->BJW_CODFOR  .AND. x[oBrwUFrOpc:PLRETPOS("BYX_TIPREG")]  == cReg } ) = 0
				
				
					Aadd(oBrwUFrOpc:aCols, AClone(oBrwUFrOpc:aCols[1]))

					oBrwUFrOpc:FieldPut("BYX_CODOPC", BJW->BJW_CODOPC, Len(oBrwUFrOpc:aCols))
					oBrwUFrOpc:FieldPut("BYX_VEROPC", BJW->BJW_VEROPC, Len(oBrwUFrOpc:aCols))
					oBrwUFrOpc:FieldPut("BYX_CODFOR", BJW->BJW_CODFOR, Len(oBrwUFrOpc:aCols))
					
					If BJ1->(dbSeek(xFilial("BJ1") +BJW->BJW_CODFOR))
						oBrwUFrOpc:FieldPut("BYX_DESFOR", BJ1->BJ1_DESCRI, Len(oBrwUFrOpc:aCols))
					Endif
						
					oBrwUFrOpc:FieldPut("BYX_TIPREG", cReg				, Len(oBrwUFrOpc:aCols))
					Aadd(oBrwUFrOpc:AvetTrab,0)
				
				Endif 
				BJW->(Dbskip())
			Enddo
		Endif
	
	Endif
	
	

	//P.E executado na inclusao/alteracao do opcional do usuario. Utilizando para validacao dos opcionais
	If ExistBlock('PLVlOpUr')
		lRet := ExecBlock('PLVlOpUr',.f.,.f.)
	EndIf
EndIf
Return(lRet)

//-------------------------------------------------------------------
/*/{Protheus.doc} PLS260VLEX
Validação na exclusão da linha
@author Fábio Siqueira dos Santos
@since 26/07/2016
@version P12
/*/
//-------------------------------------------------------------------
Function PLS260VLEX()
Local lDelOpc	:= .F.
Local lHabOpc	:= GetNewPar("MV_PVLOPCT",.F.)//Habilita ou não a inclusão de opcionais para dependentes sem titular
Local cTitular 	:= SuperGetMv("MV_PLCDTIT")
Local cReg		:= oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_TIPREG")]
Local nCont		:= 0
Local lRet		:= .T.
If lHabOpc

	For nCont := 1 To Len(oBrwUsr:aCols)
		If oBrwUsr:aCols[nCont,oBrwUsr:PLRETPOS("BA1_TIPUSU")] == cTitular
			cTipRegTit	:= oBrwUsr:aCols[nCont][oBrwUsr:PLRETPOS("BA1_TIPREG")]
			Exit
		EndIf
	Next

	If cReg == cTipRegTit
		If !oBrwOUsu:aCols[oBrwOUsu:Linha()][Len(oBrwOUsu:aHeader)+1]
			lDelOpc := .T.
		Else
			lDelOpc := .F.
		EndIf

		For nCont := 1 To Len(oBrwOUsu:aColsNoFil)
			If oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_CODPRO")] == oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_CODPRO")] .And. ;
				oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_VERSAO")] == oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_VERSAO")] .And. ;
				oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_TIPREG")] <> cTipRegTit

				oBrwOUsu:aColsNoFil[nCont,Len(oBrwOUsu:aColsNoFil[nCont])] := lDelOpc
			EndIf

		Next
	Else
		If oBrwOUsu:aCols[oBrwOUsu:Linha()][Len(oBrwOUsu:aHeader)+1]
			MsgInfo(STR0274,STR0071)//"O registro não pode ser recuperado, pois o opcional encontra-se excluído no titular!"

			lRet := .F.
		EndIf
	EndIf
EndIf
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260DOE  ³ Autor ³ MIchele Tatagiba    ³ Data ³ 02.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza dados da getdados de doencas pre-existentes       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260Doe()

LOCAL lRet := .T.

If !Empty(cTipReg)
	M->BF3_TIPREG := cTipReg
	lRet := .T.
Else
	lRet := .F.
	Help("",1,"PLS260TPRE")
Endif

//Para tratar o valid quando passar pelo x3_valid
//luciano
If !Empty(M->BF3_CODDOE)
	If !ExistCpo("BA9",M->BF3_CODDOE,1)
		lRet := .F.
	Endif
Endif
Return(lRet)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260BDK  ³ Autor ³ Tulio Cesar         ³ Data ³ 15.04.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza dados da getdados das faixas etarias espec.       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260BDK()

LOCAL lRet := .T.

If !Empty(cTipReg)
	M->BDK_TIPREG := cTipReg
	lRet := .T.
Else
	lRet := .F.
	Help("",1,"PLS260TBDK")
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260BHH  ³ Autor ³ Tulio Cesar         ³ Data ³ 02.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza dados da getdados de doencas pre-existentes       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260BHH()

LOCAL lRet := .T.

If !Empty(cTipReg)
	M->BHH_TIPREG := cTipReg
	lRet := .T.
Else
	lRet := .F.
	Help("",1,"PLS260TPR2")
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260FAMO ³ Autor ³ MIchele Tatagiba    ³ Data ³ 03.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida se o produto opcional da familia                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260FAMO()
LOCAL lRet       := .T.
LOCAL nInd       := 1

If (AllTrim(M->BF1_CODPRO)+AllTrim(M->BF1_VERSAO)) <> (AllTrim(M->BA3_CODPLA)+AllTrim(M->BA3_VERSAO))
	For nInd := 1 To Len(oBrwOUsu:aCols)
		If AllTrim(M->BF1_CODPRO)+AllTrim(M->BF1_VERSAO) == AllTrim(oBrwOUsu:aCols[nInd,oBrwOUsu:PLRETPOS("BF4_CODPRO")])+oBrwOUsu:aCols[nInd,oBrwOUsu:PLRETPOS("BF4_VERSAO")] .And. oBrwOUsu:IsDeleted(oBrwOUsu:Linha())
			lRet := .F.
			Help("",1,"PLS260FAMO")
			Return(lRet)
		Endif
	Next
Else
	lRet := .F.
	Help("",1,"PLS260FAMO")
Endif

// Verifico se o produto estava bloqueado, e foi retirado o codigo do bloqueio.
// E necessario que informe um codigo de desbloqueio, e nao somente deixar o campo de motivo em branco
If !Empty(oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_MOTBLO")]) .And. Empty(M->BF1_MOTBLO) .And. oBrwOpc:nOpcx == 4
	lRet := .F.
	Help("",1,"PLS260FAB1")
Endif

If !Empty(M->BF1_DATBLO) .And. Empty(M->BF1_MOTBLO) .And. oBrwOpc:nOpcx == 4
	lRet := .F.
	Help("",1,"PLS260FAB2")
Endif

If !Empty(M->BF1_MOTBLO) .And. Empty(M->BF1_DATBLO) .And. oBrwOpc:nOpcx == 4
	lRet := .F.
	Help("",1,"PLS260FAB3")
Endif

// Preciso gravar em um arquivo a ser criado esse historico
If Empty(oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_MOTBLO")]) .And. !Empty(M->BF1_MOTBLO)
	If Empty(M->BF1_DATBLO)
		M->BF1_DATBLO := dDataBase
	Endif
	aadd(aVetBlo,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
	M->BF1_CODPRO,M->BF1_VERSAO,;
	M->BF1_MOTBLO,M->BF1_DATBLO,"0","I",cUserName })
Endif

//Verifico se o motivo do bloqueio foi alterado
If !Empty(oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_MOTBLO")]) .And. !Empty(M->BF1_MOTBLO) .And.;
	M->BF1_MOTBLO <> oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_MOTBLO")]

	BG1->(DBSetOrder(1))
	If BG1->(MsSeek(xFilial("BG1")+oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_MOTBLO")]))
		If Empty(M->BF1_DATBLO)
			M->BF1_DATBLO := dDataBase
		Endif

		If BG1->BG1_TIPBLO == "0"
			aadd(aVetBlo,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
			M->BF1_CODPRO,M->BF1_VERSAO,;
			M->BF1_MOTBLO,M->BF1_DATBLO,"1","I",cUserName })
		Else
			aadd(aVetBlo,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
			M->BF1_CODPRO,M->BF1_VERSAO,;
			M->BF1_MOTBLO,M->BF1_DATBLO,"0","I",cUserName })
		Endif

	Endif
Endif

If !Empty(oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_DATBLO")]) .And. !Empty(M->BF1_DATBLO) .And.;
	M->BF1_DATBLO <> oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_DATBLO")] .And.;
	M->BF1_MOTBLO == oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_MOTBLO")]

	BGT->(DBSetOrder(1))
	If BGT->(MsSeek(xFilial("BGT")+M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+M->(BF1_CODPRO+BF1_VERSAO)+M->BF1_MOTBLO))
		BG1->(DBSetOrder(1))
		If BG1->(MsSeek(xFilial("BG1")+M->BF1_MOTBLO))
			If BG1->BG1_TIPBLO == "0"
				aadd(aVetBlo,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
				M->BF1_CODPRO,M->BF1_VERSAO,;
				M->BF1_MOTBLO,M->BF1_DATBLO,"1","A",cUserName })
			Else
				aadd(aVetBlo,{M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
				M->BF1_CODPRO,M->BF1_VERSAO,;
				M->BF1_MOTBLO,M->BF1_DATBLO,"0","A",cUserName })
			Endif
		Endif
	Endif
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ A260CHG    ³ Autor ³ Tulio Cesar         ³ Data ³ 18.09.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Change do Folder...                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function A260Chg(nFolder, nOpc, lPF,lRepete,oFolder)
LOCAL nResult := 0

DEFAULT lPf := .F.

If ValType(oFolder) # "O"
	Return(.f.)
EndIf
If ! lInterc .And. IIf(nFolder = 1 .And. lPf, .T., ! Obrigatorio(oEnchoice:aGets,oEnchoice:aTela))
	oFolder:SetOption(1)
	Return(.F.)
Else
	oFolder:SetOption(nFolder)
	//oBrwOUsu:ForceRefresh(oBrwOUsu)
Endif
If nOpc == K_Incluir
	If oFolder:nOption == 2
		If     Len(oBrwUsr:aCols) == 0 //	> 1 .Or. oBrwUsr:TudoOk(.F.)
			oBrwUsr:AddLine()
		ElseIf EMPTY(oBrwUsr:aCols[oBrwUsr:Linha(), oBrwUsr:PlRetPos("BA1_MATVID")])
			oBrwUsr:EditRecord("BA1", IIf(oBrwUsr:oBrowse:oBrowse:nAt > oBrwUsr:nQtdLin .And. nOpcX <> K_Incluir, K_Incluir, Pl260UBlq(nOpcX)), ;
				"Beneficiarios - [ " + M->BA3_MATRIC+" ]", oBrwUsr:Linha(), oBrwUsr:oBrowse:aCols, oBrwUsr:oBrowse:aHeader,{|| .T.})
			oBrwUsr:Atualiza()
		Endif
	Endif
Endif

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260BLOCO ³ Autor ³ Michele Tatagiba    ³ Data ³ 29.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Bloquear/Desbloquear Contrato                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PL260BLOCO(cAlias,nReg,nOpc,lDireto,cMotivo,dData,cBloFat,nP20,aLog,lGrav,lblqAut, lMsg, lRn412, aAblf)
Local I__f := 0
Local cTitulo  	:= "Familia"
Local nOpca    	:= 0
Local nOrdBA1  	:= BA1->(IndexOrd())
Local nRecBA1  	:= BA1->(Recno())
Local nOrdBA3  	:= 0
Local nRecBA3  	:= 0
Local cTitular 	:= SuperGetMv("MV_PLCDTIT")
Local cNumSub		:= ''
Local cMotBloAnt:= ""
Local dDatBloAnt	:= ''
Local aButtons  := {}
Local bOK    	:= {|| nOpca := 1,If(Obrigatorio(oEncBlo:aGets,oEncBlo:aTela) .and. BlqConf(M->BC3_MOTBLO,M->BC3_DATA,BA3->BA3_MOTBLO," desta Familia ? ","BG1",'3',BA3->BA3_DATBAS,'2',M->BC3_DATPED),oDlgBlo:End(),nOpca:=2),If(nOpca==1,oDlgBlo:End(),.F.) }
Local bCancel   := {|| oDlgBlo:End() }
Local lPromo    := GETNEWPAR("MV_PROSAUD",.F.)
Local lConsMT		:= getNewPar("MV_PLCMTBL",.t.)
Local nCont
Local nTamt		:= 25
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variavel do para Ponto de Entrada - Bloqueiro Familia em 09/11/05   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lOKbloqFm  := .T. 							//Variavel Logica para retornar a validação do PE. Antes da Gravacao do Bloqueio / Desbloqueio Familia
Local aPL260ABLF := {}								//Arry Retorna o GetArea do P.Entrada Antes da Gravacao
Local _cMessage  := " " 							//Mensagem de Retorno para Usuario enviado pelo PE.
Local aButtAux	 := {}
Local aAuxLog    := {}
Local aFamBlo	 := {}  //array de familias bloqueadas
LOCAL aUsuBloq   := {} 
Local lAtuNio 	 := .F.
Local cRegAns := ""
Local cCodProd := ""
Local lCentralObr := GetNewPar("MV_PLSEXCO",.F.) .AND. FindFunction("PLSCENTOBR")  //Indica se o sistema utilizara a atualizacao automatica da central de obrigacoes sempre que um cadastro relevante for alterado no Protheus
Local lUsaSIP := "1" $ GetNewPar("MV_PLSTIPO","")
Local lUsaSIB := "2" $ GetNewPar("MV_PLSTIPO","")
Local nInd := 0
Local nLenBrw := 0
Local lImpBloFam := .F.

Local lSIPSincrono := "1" $ GetNewPar("MV_PLOBRSI","1,2")
Local lSIBSincrono := "2" $ GetNewPar("MV_PLOBRSI","1,2")
Local lBloRN412  := .F.
Local lCritSib := .F.
Local aCritSib := {}
Local aDadNio := {}
Local aCritSIB := {}
Local aOpcSip := {}
Local aDadCob := {}
Local aDadNioAux := {}
Local aDadCobJob := {}
Local aDadCobAux := {}	
Local aAreaBC3   := {}

Local lDocImpBlo := .F.
Local cTipRegAnt := ""
LOCAL nI := 0
LOCAL lPLS260BCA := Existblock("PLS260BCA")
LOCAL cChaveHAT  := ""
LOCAL NQTDBENEF  := 0
LOCAL lGerPL99B  := .F.
LOCAL dDataBC3   := nil
LOCAL lProRat	 := BG1->(Fieldpos("BG1_PRORAT")) > 0 // Verifica se campo existe

DEFAULT nP20	:= 2
DEFAULT aLog	:= {}
DEFAULT lGrav	:= .F.
DEFAULT lblqAut := .F.
DEFAULT lMsg 	:= .T.
DEFAULT lRn412 	:= .F.
DEFAULT aAblf	:= {}

PRIVATE oEncBlo
PRIVATE oDlgBlo
PRIVATE nOpcx   := nOpc
PRIVATE cTipo
PRIVATE aGets[0]
PRIVATE aTela[0][0]
PRIVATE cMatric := '' //BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)
PRIVATE cMotBlo := '' //BA3->BA3_MOTBLO
PRIVATE aCampos
PRIVATE nRecLastDesbloq := 0
PRIVATE dDtLastDesbloq 
PRIVATE aBCARecbloq := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variavel utilizada na rotina de bloqueio de grupo familiar		     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cCodFami := BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC

If Existblock("PLS260MN")
	If !(Execblock("PLS260MN",.F.,.F.,{nOpc}))
		Return(.F.)
	Endif
Endif

// Posiciona familia.
BA3->( dbSetorder(01) )
BA3->( dbSeek(xFilial("BA3")+BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC) )

// Salva os numeros dos registros...
nOrdBA3  	:= BA3->(IndexOrd())
nRecBA3  	:= BA3->(Recno())

//Verifica se sub-Contrato esta bloqueado
cNumSub := xFilial("BQC")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_CONEMP+BA3_VERCON+BA3_SUBCON+BA3_VERSUB)
If A260BloqSubCtr(cNumSub)
	If ! lDireto
		Aviso( OemtoAnsi(STR0075), OemtoAnsi(STR0076) , { "Ok" }, 2 ) //O Sub-Contrato deste usuário está bloqueado. Não permitido o (des)bloqueio da Familia!"
	Endif
	RETURN
Else
	BA3->(DBSetOrder(1))
	BA3->(MsSeek(xFilial("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)))
	cMotBloAnt 	:= BA3->BA3_MOTBLO   //utilizado no desbloqueio da Familia
	dDatBloAnt	:= BA3->BA3_DATBLO   //utilizado no desbloqueio da Familia
	cMatric 	:= BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)
	cMotBlo 	:= BA3->BA3_MOTBLO

	// Salva os numeros dos registros...
	nOrdBA3  	:= BA3->(IndexOrd())
	nRecBA3  	:= BA3->(Recno())
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao permite desbloqueio realizado pela RN412                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If BCA->(FieldPos("BCA_SOL412")) > 0 .And. !Empty(cMotBlo)
	BCA->(DbSetOrder(1))//BCA_FILIAL+BCA_MATRIC+BCA_TIPREG+BCA_DATA+BCA_TIPO
	If BCA->(MsSeek(xFilial("BCA")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) ))  
		While BCA->(BCA_FILIAL+BCA_MATRIC) == xFilial("BCA")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) .And. !BCA->(Eof())
			If BCA->BCA_TIPO == "0" .And. BCA->BCA_SOL412 == "1"
				lBloRN412 := .T.
				Exit
			EndIf
			BCA->(DbSkip())
		EndDo
	EndIf     
	
	BC3->(DbSetOrder(1))//BC3_FILIAL+BC3_MATRIC+BC3_DATA+BC3_TIPO
	If !lBloRN412 .And. BC3->(MsSeek(xFilial("BC3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) ))  
		While BC3->(BC3_FILIAL+BC3_MATRIC) == xFilial("BC3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) .And. !BC3->(Eof())
			If BC3->BC3_TIPO == "0" .And. BC3->BC3_SOL412 == "1"
				lBloRN412 := .T.
				Exit
			EndIf
			BC3->(DbSkip())
		EndDo
	EndIf 
	
	If lBloRN412 .And. !MsgYesNo("Bloqueio efetuado através de uma solicitação do processo RN 412, deseja continuar com o desbloqueio?")
		Return
	EndIf	
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define entrada de dados padrao...                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RegToMemory( "BC3", .T., .F. )

// Integridade entre transferencia e Desbloqueio.

If lMsg

	If Empty(cMotBlo) .AND. !ApMsgYesNo(OemtoAnsi(STR0278), OemtoAnsi(STR0279)) //'A rotina de bloqueio famíliar irá bloquear todos os beneficiários da família, não apenas o beneficiário selecionado. Caso queira bloquear o beneficiário, utilize a opção "(Des)Bloqu. Usu". Deseja continuar e bloquear todos os beneficiário da família?'##"Bloqueio famíliar" 
		Return .F.
	EndIf

	If !Empty(cMotBlo)
		If BA3->(FieldPos("BA3_TRADES")) > 0 .and. !Empty(BA3->BA3_TRADES)
			BA3->( dbSetorder(01) )
			If BA3->( msSeek(xFilial("BA3")+Alltrim(BA3->BA3_TRADES)) )
				MsgAlert(OemtoAnsi(STR0214) +; //"Esta familia foi bloqueada pela rotina de transferencia. Para desbloquar esta familia, primeiro exclua a "
						 OemtoAnsi((STR0215) +Alltrim(BA3->(BA3_CODINT+'.'+BA3_CODEMP+'.'+BA3_MATRIC)))) //"familia de destino gerada pela transferencia com a matricula "

			   BA3->(DbGoTo(nRecBA3))
			   BA3->(DbSetOrder(nOrdBA3))

			   Return()
			Endif
		Endif
	Endif
EndIf
BA3->(DbGoTo(nRecBA3))
BA3->(DbSetOrder(nOrdBA3))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada - Executa Antes da Gravacao do Bloqueio/Desbloqueio Familia           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If ExistBlock("PL260ABF")
	aAblf := ExecBlock("PL260ABF",.F.,.F.,{@lOKbloqFm,@aPL260ABLF,@_cMessage, @aAblf})
	If !aAblf[1]
		If !Empty(aAblf[3])
			MsgStop(aAblf[3])
		EndIf
		Return (aAblf[1])
	EndIf
EndIf

If Existblock("PLS260ABLF")
	Execblock("PLS260ABLF",.F.,.F.,{@lOKbloqFm,@aPL260ABLF,@_cMessage})
	If !lOKbloqFm
		If ! lDireto
			MsgStop(_cMessage)
		EndIf
		Return lOKbloqFm
	EndIf
EndIf


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define botao para consulta a posicao financeira do usuario...                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aadd(aButtons,{"SALARIOS",{|| PLPOSFIN(BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC,.T.,.T.) },OemtoAnsi(STR0017),OemtoAnsi(STR0030)})// "Posicao Financeira"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada para definicao de botos de usuario...                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PL260BUB")
	If ValType( aButtAux := ExecBlock("PL260BUB", .F., .F.,{"F"} ) ) == "A"
		AEval( aButtAux, { |x| AAdd( aButtons, x ) } )
	EndIf
Endif

If ! lDireto 
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define dialogo...                                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DEFINE MSDIALOG oDlgBlo TITLE cTitulo FROM 008.2,010.3 TO 034.4,100.3 OF GetWndDefault()

	oEncBlo := MSMGet():New("BC3",BC3->(Recno()),K_Alterar,,,,nil,{014+nTamt,001,197,355},nil,,,,,oDlgBlo,,,.F.)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Tenho que fazer esta checagem pq o usurio quando importado do PTU 100     ³
//³ fica bloqueado mais nao gera o BC3 sendo assim nao e possivel desbloquear ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(cMotBlo) .And. !Empty(BA1->(BA1_ARQEDI))
   Aviso(OemtoAnsi(STR0077),OemtoAnsi(STR0078), { "Ok" }, 2 ) //"(Des)Bloqueio!"
   Return
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define valores para os campos chave da familia...                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If Empty(cMotBlo)
	M->BC3_TIPO := "0"
	M->BC3_DESBLO := ""
Else
	M->BC3_TIPO := "1"
	M->BC3_DESBLO := ""
Endif
M->BC3_MATRIC := BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)
M->BC3_MATANT := BA1->BA1_MATANT
M->BC3_NOMUSR := AllTrim(BA1->BA1_NOMUSR)+"  -  ("+PLRETTPU(BA1->BA1_TIPUSU)+")"
M->BC3_NIVBLQ := "F"
M->BC3_USUOPE := cUserName
If lRn412
	M->BC3_SOL412 := "1"
EndIf
lRefresh := .T.

If ! lDireto
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa dialogo...                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ACTIVATE MSDIALOG oDlgBlo ON INIT EnchoiceBar(oDlgBlo, bOK, bCancel, .F., aButtons)
Else
	nOpcA := K_OK
	M->BC3_DATA := dData
	M->BC3_MOTBLO := cMotivo
	If BC3->(FieldPos("BC3_BLOFAT")) > 0
		M->BC3_BLOFAT := cBloFat
	Endif
	nOpca := K_OK
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Tratamento para gravacao caso houve confirmacao de bloqueio         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == K_OK

	lGrav := .T.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Variaveis utilizadas na rotina de bloquei de grupo familiar		     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	_nOpc 	  := nOpca
	cMtBlo   := M->BC3_MOTBLO
	dBlqDat  := M->BC3_DATA
	dbSelectArea("BG1")
	dbSetOrder(1)
	If dbSeek(xFilial("BG1")+cMtBlo)
		lBlqConf := BG1->BG1_BQGPFM == "1"
	Endif

	Begin Transaction

		If nP20 == 2 // Efetua o bloqueio

			If M->BC3_TIPO == "0"				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Bloqueio...                                                         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lImpBloFam := PLBD2IMPBL(cMatric) .And. lblqAut
				BA1->(DbSetOrder(2))
				If BA1->(MsSeek(xFilial("BA1")+cMatric))
					nQtdBenef := 0
					While ! BA1->(Eof()) .And. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC) = xFilial("BA1")+cMatric
						cMotBlo := BA1->BA1_MOTBLO
						If Empty(cMotBlo) .OR. (!Empty(BA1->BA1_DATBLO) .AND. BA1->BA1_DATBLO > M->BC3_DATA) // Verifica tambem se esta bloqueado com data futura, para realizar o bloqueio

							//--------------------------------------------------------------------
							//Verifica se o documento vinculado ao titular impede o bloqueio.
							//--------------------------------------------------------------------
							if lblqAut
								BCP->(DbSetOrder(1))
								lDocImpBlo := .F.
								cTipRegAnt := ""
								If BCP->(DbSeek(xFilial("BCP")+BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC+BA1->BA1_TIPREG))
	
									//Caso tenha encontrado o documento, busca em todos os documentos entregues para o mesmo beneficiario.
									BD2->(DbSetOrder(1))
									While (BCP->(!EOF()) 						.AND.;
											BCP->BCP_FILIAL == xFilial("BCP")	.AND.;
											BCP->BCP_CODOPE == BA1->BA1_CODINT	.AND.;
											BCP->BCP_CODEMP == BA1->BA1_CODEMP	.AND.;
											BCP->BCP_MATRIC == BA1->BA1_MATRIC .AND.;
											BCP->BCP_TIPREG == BA1->BA1_TIPREG)
	
										//Posiciona na BD2 (Documentos) o registro entregue e checa se o documento impede o bloqueio do usuario.
										if (BCP->BCP_ENTREG == "1" .and. BD2->(DbSeek(xFilial("BD2")+BCP->BCP_CODDOC)) .and. BD2->BD2_IMPBLO == "1")
										//Foi encontrado documento vinculado ao beneficiario que impede o bloqueio.
										//Verifica-se se já foi criado log para este beneficiário e, caso positivo, só inclui o documento na lista.
										//Caso contrário, inclui o nome do beneficiario e demais informações no log (registro inicial).
											if cTipRegAnt <> 	BCP->BCP_MATRIC+BCP->BCP_TIPREG
	
												//Armazena o registro atual para ser comparado na proxima iteração.
												cTipRegAnt :=	BCP->BCP_MATRIC+BCP->BCP_TIPREG
	
												Aadd( aLogGrp260, "")
												Aadd( aLogGrp260, STR0026) //" -----------> USUARIO POSSUI DOCUMENTO QUE IMPEDE BLOQUEIO"
												Aadd( aLogGrp260, STR0010 + BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO) ) //" Matricula--> "
												Aadd( aLogGrp260, STR0011 + BA1->BA1_NOMUSR ) //" Nome-------> "
												Aadd( aLogGrp260, STR0027 + BD2->BD2_DESCRI ) //" Documento--> "
											else
												Aadd( aLogGrp260, STR0027 + BD2->BD2_DESCRI ) //" Documento--> "
											endif
	
											lDocImpBlo := .T.
	
											BCP->(DbSkip())
										else
											BCP->(DbSkip())
										endif
									EndDo
	
									if lDocImpBlo
										BA1->( DbSkip() )
										Loop //Não é mais necessário fazer as verificações a partir desse ponto, visto que o beneficiario possui documento que impede o bloqueio.
									endif
								EndIf
								
								If (lImpBloFam) //Não bloqueia nenhum usuário caso haja documentos que impeçam o bloqueio - BD2_IMPBLO
									BA1->( DbSkip() )
									Loop //Precisa dar o Loop para registrar o log de todos os usuários com doc que impede bloqueio
								EndIf

							endif

							BA1->(RecLock("BA1",.F.))
							BA1->BA1_MOTBLO := M->BC3_MOTBLO
							BA1->BA1_DATBLO := M->BC3_DATA
							BA1->BA1_IMAGE  := "DISABLE"
							BA1->BA1_CONSID := "F"
							If BC3->(FieldPos("BC3_BLOFAT")) > 0 .and. BA1->(FieldPos("BA1_BLOFAT")) > 0
								BA1->BA1_BLOFAT	:= M->BC3_BLOFAT
							Endif
							If BC3->( FieldPos("BC3_OBTSIP") ) > 0 .and. BA1->(FieldPos("BA1_OBTSIP")) > 0
								BA1->BA1_OBTSIP := M->BC3_OBTSIP
							Endif
							/*Retirada gravação do RESFAM com valor 0 pois mesmo bloqueado precisamos manter o histórico do responsável familiar para um possível desbloqueio.*/
							BA1->(MsUnLock())

							//grava no historio do bloqueio do usuario
							BCA->(RecLock("BCA", .T.))
							BCA->BCA_FILIAL 	:= xFilial("BCA")
							BCA->BCA_MATRIC 	:= BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC)
							BCA->BCA_TIPREG		:= BA1->BA1_TIPREG
							BCA->BCA_TIPO		:= M->BC3_TIPO
							BCA->BCA_DATA		:= M->BC3_DATA
							BCA->BCA_MOTBLO		:= M->BC3_MOTBLO
							BCA->BCA_OBS		:= M->BC3_OBS
							BCA->BCA_USUOPE		:= cUserName
							BCA->BCA_NIVBLQ 	:= "F"
							BCA->BCA_DATPED     := M->BC3_DATPED
							BCA->BCA_DATLAN	    := M->BC3_DATLAN
							BCA->BCA_HORLAN		:= M->BC3_HORLAN
							If BC3->(FieldPos("BC3_BLOFAT")) > 0 .and. BCA->(FieldPos("BCA_BLOFAT")) > 0
								BCA->BCA_BLOFAT		:= M->BC3_BLOFAT
							Endif
							If BCA->( FieldPos("BCA_OBTSIP") ) > 0 .and. BC3->( FieldPos("BC3_OBTSIP") ) > 0
								BCA->BCA_OBTSIP := M->BC3_OBTSIP
							Endif

							BCA->BCA_MATANT   	:= BA1->BA1_MATANT

							BCA->(MsUnlock())
							
							Aadd(aUsuBloq,BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO))
							
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			              	//³ Ponto de entrada para manipulação da tabela BCA | PC 30/05/2011    ³
			             	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lPLS260BCA
								Execblock("PLS260BCA",.F.,.F.,{"B"})
							EndIf
						
							If  (GetNewPar("MV_PLSEXCO",.F.) .And. FindFunction("PLSCENTOBR")) .and. BG1->(MsSeek(xFilial("BG1")+M->BC3_MOTBLO))
								lAtuNio := ! empty(BG1->BG1_BLQANS)
							EndIf
							//Chamo a rotina genérica que atualiza o Núcleo de Informações da Central de Obrigações
							If lCentralObr .AND. lAtuNio .AND. (lUsaSIP .OR.  lUsaSIB)
								aAreaBA1 := BA1->(GetArea())
								aAreaBA3 := BA3->(GetArea())
								aAreaBTS := BTS->(GetArea())
								If PlSibEnvANS(Posicione("BA3",1,xFilial("BA1")+cMatric,"BA3_TIPOUS"),BA1->BA1_CODINT,BA1->BA1_CODEMP,;
												BA1->BA1_CONEMP,BA1->BA1_VERCON,BA1->BA1_SUBCON,BA1->BA1_VERSUB,BA1->BA1_INFANS)
									cMatricBkp := cMatric
									//Primeiro monto o array com os dados do beneficiário aDadNio
									oModel := Pl260DadNio('1',Nil,Nil,"",aDadCob,;
															.T.,.T., , lUsaSIP )
									oModel:SetValue( "B3KMASTER", 'B3K_OPESIB','4')//Envio um bloqueio

									oModel := PLGetHrCentral(oModel)

									//Chamo a rotina genérica que atualiza o Núcleo de Informações da Central de Obrigações
									If lSIPSincrono .OR. lSIBSincrono 
										
										cB3KMat	:= oModel:GetValue( "B3KMASTER",  'B3K_MATRIC')
										cNomBen	:= oModel:GetValue( "B3KMASTER",  'B3K_NOMBEN')
										aAdd(aCritSib,{cB3KMat,cNomBen,""})
										oModel:commitData()
									Else
										aAdd(aDadNioAux,oModel)
										aAdd(aOpcSip,nOpc)
										aAdd(aDadCobJob,aDadCob)
									EndIf
									nQtdBenef++
									cMatric := cMatricBkp 
								EndIf
								RestArea(aAreaBA3)
								RestArea(aAreaBA1)
								RestArea(aAreaBTS)
							EndIf
							
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					 		//³ Gera pedido de bloqueio para o HAT                                                        ³
					  		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
							If GetNewPar("MV_PLSHAT","0") == "1"
								cCodTra := _beneficiaryStatus_desblo
								BNV->(DbSetOrder(2))//BNV_FILIAL+BNV_CODTRA+BNV_ALIAS+BNV_CHAVE
								
								//Verifico se ja tem desbloqueio nao enviado, se tiver, excluo
				       	 		If BNV->(MsSeek(xFilial("BNV")+cCodTra+"BCA"+BCA->(BCA_MATRIC+BCA_TIPREG)+Dtos(BCA->BCA_DATA))) .And. BNV->BNV_STATUS == HAT_PENDENTE_ENVIO
									PLS274GRV( K_Excluir )
								Else
									cChaveHAT := BCA->(BCA_MATRIC+BCA_TIPREG)+Dtos(BCA->BCA_DATA)+BCA->BCA_TIPO
									PLHATPedPD(K_Incluir,_beneficiaryStatus_blo,"BCA",cChaveHAT,NIL,1)	
				        		EndIf	
							EndIf

						Endif

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ atualização da promoção da Saude para Pacientes bloqueados    	    ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

						If lPromo
							BOM->(DbSetOrder(3))
							If BOM->(MsSeek(xFilial("BOM")+BA1->BA1_MATVID))
								BOM->(RecLock("BOM", .F.))
								BOM->BOM_STATUS:='4'
								BOM->(MsUnlock())
							Endif
						Endif
						BA1->(DbSkip())
					Enddo
				Endif
				If !lImpBloFam 
					lCritSib := Len(aCritSib) > nQtdBenef
					If lCritSib .AND. lMsg
						PLSCRIGEN(aCritSib,{ {"Codigo Crit.","@C",5} , {"Descrição","@C",200 } , {"Solução","@C",200 } }, "  Críticas de Beneficiários  ")
					EndIf
				
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Gera credito para processo de pro-rata no bloqueio                                        ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
					If GetNewPar("MV_PL9BPRA","0") == "1" .And. !lRn412 .And. M->BC3_TIPO == "0" .And. M->BC3_BLOFAT == "1" .And. len (aUsuBloq ) > 0 .And.; 
						IIF(lProRat,IIF(Posicione("BG1",1,xFilial("BG1")+M->BC3_MOTBLO,"BG1_PRORAT") == "0",.F.,.T.),.T.) // Se o campo Pro Rata no motivo estiver com "0 = Não", não gera NCC

						lGerPL99B := .T.
						dDataBC3  := M->BC3_DATA
					EndIf			

					If Len(aDadNioAux) > 0
						StartJob("PLJOBNIO",GetEnvServer(),.F.,cEmpAnt,cFilAnt,;
									"B3K",aDadNioAux,nOpc,.T./*lMult*/,aOpcSip,;
									dBlqDat,aDadCobJob)
					EndIf

					BA3->(RecLock("BA3",.F.))
					BA3->BA3_MOTBLO := M->BC3_MOTBLO
					BA3->BA3_DATBLO := M->BC3_DATA
					BA3->BA3_CONSID := "F"

					If BC3->(FieldPos("BC3_BLOFAT")) > 0 .and. BA3->(FieldPos("BA3_BLOFAT")) > 0
						BA3->BA3_BLOFAT := M->BC3_BLOFAT
					Endif
					BA3->(MsUnLock())
				EndIf
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Desbloqueio...                                                      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				BA1->(DbSetOrder(2))
				If BA1->(MsSeek(xFilial("BA1")+cMatric))
					nQtdBenef := 0
					While ! BA1->(Eof()) .And. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC) = xFilial("BA1")+cMatric
						If !Empty(BA1->BA1_MOTBLO) .And. ( iif(lConsMT,(BA1->BA1_MOTBLO == cMotBloAnt .AND. BA1->BA1_DATBLO == dDatBloAnt),.t.) ) 

							BA1->(RecLock("BA1",.F.))
							BA1->BA1_MOTBLO := ""
							BA1->BA1_DATBLO := ctod("")
							BA1->BA1_IMAGE  := "ENABLE"
							BA1->BA1_CONSID := ""
							If BA1->(FieldPos("BA1_BLOFAT")) > 0
								BA1->BA1_BLOFAT	:= ""
							Endif
							If BA1->(FieldPos("BA1_TRADES")) > 0
								BA1->BA1_TRADES := ''
							Endif
							If BA1->(FieldPos("BA1_LOTTRA")) > 0
								BA1->BA1_LOTTRA := ''
							Endif
							If BA1->(FieldPos("BA1_OBTSIP")) > 0
								BA1->BA1_OBTSIP := ''
							Endif
							BA1->(MsUnLock())

							//grava no historio do bloqueio do usuario
							BCA->(RecLock("BCA", .T.))
							BCA->BCA_FILIAL 	:= xFilial("BCA")
							BCA->BCA_MATRIC 	:= BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC)
							BCA->BCA_TIPREG		:= BA1->BA1_TIPREG
							BCA->BCA_MATANT   	:= BA1->BA1_MATANT
							BCA->BCA_TIPO		:= M->BC3_TIPO
							BCA->BCA_DATA		:= M->BC3_DATA
							BCA->BCA_MOTBLO		:= M->BC3_MOTBLO
							BCA->BCA_OBS		:= M->BC3_OBS
							BCA->BCA_USUOPE		:= cUserName
							BCA->BCA_NIVBLQ 	:= "F"
							BCA->BCA_DATPED     := M->BC3_DATPED
							BCA->BCA_DATLAN	    := M->BC3_DATLAN
							BCA->BCA_HORLAN		:= M->BC3_HORLAN
							If BCA->(FieldPos("BCA_BLOFAT")) > 0
								BCA->BCA_BLOFAT		:= ""
							Endif
							BCA->(MsUnlock())
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			              	//³ Ponto de entrada para manipulação da tabela BCA | PC 30/05/2011     ³
	        		     	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If lPLS260BCA
								Execblock("PLS260BCA",.F.,.F.,{"D"})
							EndIf

							//Verifica o campo ENVANS, para fazer ou não a comunicação com a central.				
							lAtuNio := ENVBLOQANS("F",M->BC3_MOTBLO)
							
							//Chamo a rotina genérica que atualiza o Núcleo de Informações da Central de Obrigações
							If lCentralObr .AND. (lUsaSIP .OR.  lUsaSIB) .AND. lAtuNio
								aAreaBA1 := BA1->(GetArea())
								aAreaBA3 := BA3->(GetArea())
								aAreaBTS := BTS->(GetArea())
								If PlSibEnvANS(Posicione("BA3",1,xFilial("BA1")+cMatric,"BA3_TIPOUS"),BA1->BA1_CODINT,BA1->BA1_CODEMP,;
													BA1->BA1_CONEMP,BA1->BA1_VERCON,BA1->BA1_SUBCON,BA1->BA1_VERSUB,BA1->BA1_INFANS)
									cMatricBkp := cMatric
									//Primeiro monto o array com os dados do beneficiário aDadNio
									oModel := Pl260DadNio('1',Nil,Nil,"",aDadCob,;
															.T.,.F., , lUsaSIP )
									
									oModel:SetValue( "B3KMASTER", 'B3K_OPESIB','5')//Envio um desbloqueio
									oModel:SetValue( "B3KMASTER", "B3K_DATBLO", StoD(""))

									oModel := PLGetHrCentral(oModel)

									//Chamo a rotina genérica que atualiza o Núcleo de Informações da Central de Obrigações
									If lSIPSincrono .OR. lSIBSincrono 
										
										cB3KMat	:= oModel:GetValue( "B3KMASTER",  'B3K_MATRIC')
										cNomBen	:= oModel:GetValue( "B3KMASTER",  'B3K_NOMBEN')
										aAdd(aCritSib,{cB3KMat,cNomBen,""})
										oModel:commitData()
									Else
										aAdd(aDadNioAux,oModel)
										aAdd(aOpcSip,nOpc)
										aAdd(aDadCobJob,aDadCob)
									EndIf
									cMatric := cMatricBkp
									nQtdBenef++
								EndIf
								RestArea(aAreaBA3)
								RestArea(aAreaBA1)
								RestArea(aAreaBTS)
							EndIf
							
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					 		//³ Gera pedido de desbloqueio para o HAT                                                     ³
					  		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If GetNewPar("MV_PLSHAT","0") == "1"
								BNV->(DbSetOrder(2))//BNV_FILIAL+BNV_CODTRA+BNV_ALIAS+BNV_CHAVE
								cCodTra := _beneficiaryStatus_blo
								
								//Verifico se ja tem bloqueio nao enviado, se tiver, excluo
				       	 		If BNV->(MsSeek(xFilial("BNV")+cCodTra+"BCA"+BCA->(BCA_MATRIC+BCA_TIPREG)+Dtos(BCA->BCA_DATA))) .And. BNV->BNV_STATUS == HAT_PENDENTE_ENVIO
									PLS274GRV( K_Excluir )
								Else
									cChaveHAT := BCA->(BCA_MATRIC+BCA_TIPREG)+Dtos(BCA->BCA_DATA)+BCA->BCA_TIPO
									PLHATPedPD(K_Incluir,_beneficiaryStatus_desblo,"BCA",cChaveHAT,NIL,1)	
				        		EndIf		
							EndIf
						EndIf
						BA1->(DbSkip())
					Enddo
				Endif
				lCritSib := Len(aCritSib) > nQtdBenef
				If lCritSib .AND. lMsg
					PLSCRIGEN(aCritSib,{ {"Codigo Crit.","@C",5} , {"Descrição","@C",200 } , {"Solução","@C",200 } }, "  Críticas de Beneficiários  ")
				EndIf
				If Len(aDadNioAux) > 0
					StartJob("PLJOBNIO",GetEnvServer(),.F.,cEmpAnt,cFilAnt,;
								"B3K",aDadNioAux,nOpc,.T./*lMult*/,aOpcSip,;
								dBlqDat,aDadCobJob)
				EndIf
				BA3->(RecLock("BA3",.F.))
				BA3->BA3_MOTBLO := ""
				BA3->BA3_DATBLO := ctod("")
				If BA3->(FieldPos("BA3_BLOFAT")) > 0
					BA3->BA3_BLOFAT := ""
				Endif
				If BA3->(FieldPos("BA3_LOTTRA")) > 0
					BA3->BA3_LOTTRA := ''
				Endif
				If BA3->(FieldPos("BA3_TRADES")) > 0
					BA3->BA3_TRADES := ''
				Endif
				BA3->BA3_CONSID := " "
				BA3->(MsUnLock())
			Endif
		EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada apos a gravacao do bloqueio/desbloqueio da familia                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If  ExistBlock('PL260BFA')
			ExecBlock('PL260BFA',.f.,.f.,{cMatric})
		Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada apos a gravacao do bloqueio/desbloqueio do Familia                       ³
	//| Complemento de Dados utilizando o retorno do PE. Antes da Gravacao   - 09/11/05           |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Existblock("PLS260LF")
			aAuxLog := ExecBlock("PLS260LF",.F.,.F.,{aPL260ABLF,nP20,aLog})
			If ValType(aAuxLog) == "A"
				aLog := aClone(aAuxLog)
			Endif
		EndIf

		If nP20 == 2 .AND. !lImpBloFam// Efetua o bloqueio
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Trato os titulos gravando nos titulos que o Contrato esta Bloqueado ou Desbloqueado...    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PL260ALTE1(BA3->BA3_CODINT,BA3->BA3_CODEMP,BA3->BA3_MATRIC,M->BC3_TIPO)

			PLUPTENC("BC3",K_Incluir)

		EndIf

	End Transaction

	// Processo de geracao de titulo de Pro-Rata
	// Este trecho foi migrado para fora do Begin Transaction pois a PL99BProRt
	// chama o PLSE1NUM e o mesmo nao pode estar dentro de uma Transaction
	if lGerPL99B
		PL99BProRt(dDataBC3,aUsuBloq,lDireto) 
	endIf

	//------ Array com dados de bloqueados para a rotina PLSA 770, do envio de e-mails e cartas de bloqueio
	DbSelectArea("BA1")
	IF( BA1->(MsSeek(xFilial("BA1")+cMatric)) )
		aAdd(aFamBlo,{BA1->BA1_FILIAL, BA1->BA1_CODINT, BA1->BA1_CODEMP, BA1->BA1_MATRIC, BA1->BA1_TIPUSU, BA1->BA1_TIPREG, BA1->BA1_DIGITO})
	ENDIF
	//---------------------------------

	BA1->(DbSetOrder(nOrdBA1))
	BA1->(DbGoTo(nRecBA1))

	BA3->(DbSetOrder(nOrdBA3))
	BA3->(DbGoTo(nRecBA3))
	
ElseIf nOpca == 0 //SE CANCELOU
	//SE CAIU NA ROTINA QUANDO UM BLOQUEIO ENTRA NO OUTRO PLVLDPERBL PRECISO DESFAZER A ALTERAÇÃO
	if nRecLastDesbloq != 0 .and. !empty(dDtLastDesbloq)
		
		aAreaBC3 := BC3->(getArea())
		
		BC3->(dbGoto(nRecLastDesbloq))
		
		BC3->(recLock("BC3", .F.))
			BC3->BC3_DATA := dDtLastDesbloq
		BC3->(msUnlock())
				
		if !empty(aBCARecbloq)
			for nI := 1 to len(aBCARecbloq)
				BCA->(dbGoTo(aBCARecbloq[nI]))
				BCA->(recLock("BCA", .F.))
					BCA->BCA_DATA := dDtLastDesbloq
				BCA->(msUnlock())
			next nI
		endIf
		
		msgAlert("A alteração da data do desbloqueio foi desfeita", "Atenção")
		
		restArea(aAreaBC3)
		
	endIf
Endif

Return(aFamBlo)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLVERBLO ³ Autor ³ PLS    ³ Data ³ 17.01.19				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Verificar se o usuário se encontra em algum periodo de bloqueio       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLVERBLO(cChave, cTipReg, dData, cOp, cCpf)

Local lRet		 := .F.
Local cQuery	 := ""
Local (cTabTemp) := getNextAlias()
Local aVgDatBlo  := {}
Local nPosBloq	 := 0
Local nQtd		 := 0

Default cCpf 	 := ""


//fazendo select na BCA para se obter os bloqueios e desbloqueios do beneficiário
cQuery := "SELECT BCA_TIPO, BCA_DATA FROM "
cQuery += RetSQLName("BCA") + " BCA "
cQuery += " WHERE BCA_FILIAL = '"+xFilial("BCA")+"' "
cQuery += " AND BCA_MATRIC = '" +cChave + "' " 
cQuery += " AND BCA_TIPREG = '" +cTipReg+ "' "   
cQuery += " AND D_E_L_E_T_  = ' ' "
cQuery += " ORDER BY BCA.R_E_C_N_O_ " 

cQuery := ChangeQuery(cQuery)
dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cTabTemp,.F.,.T.) 

//se houver resultados na busca
While ! ((cTabTemp))->(eof())
//se for do tipo bloqueio, crio uma nova posição no array e adiciono a data
	If (cTabTemp)->BCA_TIPO == "0"
		aadd(aVgDatBlo, {STOD( (cTabTemp)->BCA_DATA),YEARSUM( dData, 10 )})
	Else//se for desbloqueio, eu adiciono numa posição já existente, assim criando o par blo-desbloq
		If Len(aVgDatBlo) > 0
			aVgDatBlo[ len(aVgDatBlo), 2 ] := stod( (cTabTemp)->BCA_DATA )
		Endif	
	EndIf

	(cTabTemp)->(dbSkip())
EndDo

If cOp == "0"// se for operação de bloqueio
	//Se encontrar o range de datas inferior e superior a data que consta no dData, o usuário está bloqueado.
	nPosBloq := aScan(aVgDatBlo,{ |x| dData > x[1] .and. (dData < x[2])})
	//se encontrou, retorna .t., ou seja, o benef está bloqueado
	If(nPosBloq > 0)
		Aviso(OemtoAnsi(" Atenção "),OemtoAnsi(" Não é possível realizar o bloqueio, pois a data solicitada está dentro de um período de bloqueio de: " +;
             convDataStr(aVgDatBlo[nPosBloq,1]) + " Até: " + convDataStr(aVgDatBlo[nPosBloq,2]) ), { "Ok" }, 2 ) //"Não é possível realizar o bloqueio pois a data solicitada está dentro de um período de bloqueio de"
		lRet := .T.
	EndIf
ElseIf cOp == "1" //verifica o desbloqueio
	//no desbloqueio a última posição do array vai ter a data de bloqueio mais 10 anos, logo, se a posição retornada for última
	//significa que o desbloqueio passou pela primeira verificação
	nPosBloq := aScan(aVgDatBlo,{ |x| dData > x[1] .and. (dData < x[2] .or. (dData == x[2]))})
	If (nPosBloq > 0) .and. nPosBloq == len(aVgDatBlo) // se for igual, faz a próxima verificação
		//será feito uma query para se verificar se existe algum registro de bloqueioou desbloqueio num range formado pela última data de bloqueio
		//inserida e a data desbloqueio preenchida
		(cTabTemp) := getNextAlias()
		cQuery := "SELECT BCA_TIPO, BCA_DATA FROM "
		cQuery += RetSQLName("BCA") + " BCA "
		cQuery += " WHERE BCA_FILIAL = '"+xFilial("BCA")+"' "
		cQuery += " AND BCA_DATA BETWEEN '" + DtoS(aVgDatBlo[len(aVgDatBlo),1]) + "' AND '" + DtoS(dData) + "'"
		cQuery += " AND BCA_MATRIC = '" +cChave + "' " 
		cQuery += " AND BCA_TIPO = '1' " 
		cQuery += " AND BCA_TIPREG = '" +cTipReg+ "' "
		cQuery += " AND D_E_L_E_T_  = ' ' "
		cQuery += " ORDER BY BCA.R_E_C_N_O_ ""

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cTabTemp,.F.,.T.) 

		Count To nQtd
		//se encontrou mais de um resultado, existem mais registros de bloqueio e desbloqueio, logo, não pode desbloquear
		If  nQTD > 1
			Aviso(OemtoAnsi(" Atenção: "),OemtoAnsi(STR0294), { "Ok" }, 2 ) //"Não é possível realizar o desbloqueio na data solicitada, pois existe um período de bloqueio já solicitado"
			lRet := .T.
			return lRet
		Else
			return lRet
		EndIf	

	ElseIf (nPosBloq > 0) //se não for igual, encontrou uma posição menor, logo não pode desbloquear        
			Aviso(OemtoAnsi(" Atenção "),OemtoAnsi("Não é possível realizar o desbloqueio, pois a data solicitada está dentro de um período de bloqueio de: " +;
         	convDataStr(aVgDatBlo[nPosBloq,1]) + " Até: " + " " +  convDataStr(aVgDatBlo[nPosBloq,2] )), { "Ok" }, 2 ) 
			lRet := .T.  
			return lRet
	Else

		If CheckCPFFamilia(cCpf, cChave)
			Aviso(OemtoAnsi(" Atenção "),OemtoAnsi("Não foi possível realizar o desbloqueio, pois existe outro Beneficiário Ativo da Família com o mesmo número de CPF"), { "Ok" }, 2 )
			lRet := .T.
			Return lRet
		EndIf

	EndIf
EndIf

return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260BLOUS ³ Autor ³ Michele Tatagiba    ³ Data ³ 29.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Bloquear/Desbloquear Usuario                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PL260BLOUS(cAlias,nReg,nOpc,lDireto,cMotivo,dData,cBloFat,lFiltro,nP20,aLog,lGrav,lMsg,lRn412)

Local I__f := 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis usadas na rotina...                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cTitulo  	:= "Beneficiario"
LOCAL nOpca    	:= 0
LOCAL nOrdBA1  	:= BA1->(IndexOrd())
LOCAL nRecBA1  	:= BA1->(Recno())
LOCAL nOrdBA3  	:= BA3->(IndexOrd())
LOCAL nRecBA3  	:= BA3->(Recno())
LOCAL cTitular 	:= SuperGetMv("MV_PLCDTIT")
LOCAL cNumSub, cCodFam
LOCAL aButtons  := {}
LOCAL aAblu		:= {}
LOCAL bOK := {|| nOpca := 1,If(Obrigatorio(oEncBlo:aGets,oEncBlo:aTela) .and. BlqConf(M->BCA_MOTBLO,M->BCA_DATA,BA1->BA1_MOTBLO, ;
							OemtoAnsi(STR0216)/*" deste Usuario ? "*/,"BG3",'3',BA1->BA1_DATINC,'3',M->BCA_DATPED).and. PL260REAT(),oDlgBlo:End(),nOpca:=2),If(nOpca==1,oDlgBlo:End(),.F.) }
LOCAL bCancel   := {|| oDlgBlo:End() }
LOCAL nRegSlv   := BA1->(Recno())
LOCAL nOrdSlv   := BA1->(IndexOrd())
LOCAL aTabBkp   := {}
LOCAL lGrvBkp   := .F.
LOCAL cNivelTxt	:= ''
LOCAL cMat	  := ""
LOCAL nRecn
Local nTamt := 25
Local cChaveB	:= ""
Local nContB	:= 0  //bloqueados
Local nContNB	:= 0  //não bloqueados

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variavel do para Ponto de Entrada - Bloqueiro Usuario em 09/11/05   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lOKbloqUs  := .t. 							//Variavel Logica para retornar a validação do PE. Antes da Gravacao do Bloqueio / Desbloqueio Usuario
Local lBloRN412	:= .F.
Local aPL260ABLU := {}								//Arry Retorna o GetArea do P.Entrada Antes da Gravacao
Local _cMessage  := " " 							//Mensagem de Retorno para Usuario enviado pelo PE.
LOCAL aButtAux	 := {}
Local lPromo 	 := GETNEWPAR("MV_PROSAUD",.F.)
Local aAuxLog	 := {}
Local aNomBen	 := {}

LOCAL lCentralObr := GetNewPar("MV_PLSEXCO",.F.) .AND. FindFunction("PLSCENTOBR")  //Indica se o sistema utilizara a atualizacao automatica da central de obrigacoes sempre que um cadastro relevante for alterado no Protheus
Local lUsaSIP := "1" $ GetNewPar("MV_PLSTIPO","")
Local lUsaSIB := "2" $ GetNewPar("MV_PLSTIPO","")
LOCAL aCritSib := {}
LOCAL lCritSib := .F.
Local lSIPSincrono := "1" $ GetNewPar("MV_PLOBRSI","1,2")
Local lSIBSincrono := "2" $ GetNewPar("MV_PLOBRSI","1,2")
Local aDadNio := {}
Local aOpcSip := {}
Local aDadCob := {}
Local aUsuBloq:= {}
LOCAL nNumUsr := 0
Local lAtuNio := .T.
LOCAL lDesBlqFam	:=	GetNewPar("MV_PLBQFAM",.F.)
LOCAL aAreaBCA	:= {}
LOCAL cChaveHAT := ""
LOCAL lProRat   := BG3->(Fieldpos("BG3_PRORAT")) > 0 // Verifica se o campo existe

DEFAULT lMsg    := .T.
DEFAULT lDireto := .F.
DEFAULT lFiltro := .T.
DEFAULT nP20	:= 2
DEFAULT aLog	:= {}
DEFAULT lGrav	:= .F.
DEFAULT lRn412  := .F.

PRIVATE oEncBlo
PRIVATE oDlgBlo
PRIVATE nOpcx   := nOpc
PRIVATE cTipo
PRIVATE aGets[0]
PRIVATE aTela[0][0]
PRIVATE cMatric := BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)
PRIVATE cTipReg := BA1->BA1_TIPREG
PRIVATE cMotBlo := BA1->BA1_MOTBLO
PRIVATE aCampos
PRIVATE dDtLastDesbloq //salvo a data do ultimo desbloqueio pois o usuario pode cancelar essa tela 
PRIVATE nRecLastDesbloq := 0

//	Se o Usuário estiver Bloqueado irá verificar a quantidade máxima permitida para seu Grau de Parentesco
IF !EMPTY(cMotBlo)
	aArea := BA1->(GetArea())
	BT1->(DBSETORDER(2))
	BT1->(DBSEEK(XFILIAL() + BA1->(BA1_CODINT + BA1_CODEMP + BA1_VERCON + BA1_GRAUPA)))
	IF BT1->BT1_NMAUSR > 0 .AND. BT1->BT1_ATIVO == "1"	//	Só irá considerar se o Número Máximo estiver definido
		BA1->(DBSETORDER(2))
		BA1->(DBSEEK(XFILIAL() + cMatric)) // Primeiro Membro da Família
		WHILE !BA1->(EOF()) .AND. cMatric == BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC)
			IF BA1->BA1_GRAUPA == BT1->BT1_GRAUPA .AND. EMPTY(BA1->BA1_MOTBLO)
				nNumUsr++
			ENDIF
			BA1->(DBSKIP())
		ENDDO
		IF nNumUsr >= BT1->BT1_NMAUSR
			AVISO(STR0071, STR0280 + ' "' + BT1->BT1_GRAUPA + '"', {"Ok"}, 2)//"Esse Desbloqueio Excede o Número Máximo de Usuários Permitidos no Grau de Parentesco"
			BA1->(DbGoTo(nRegSlv))
			RETURN
		ENDIF
	ENDIF
	RestArea(aArea)
ENDIF

If Existblock("PLS260MN")
	If !(Execblock("PLS260MN",.F.,.F.,{nOpc}))
		Return(.F.)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao permite desbloqueio realizado pela RN412                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If BCA->(FieldPos("BCA_SOL412")) > 0 .And. !Empty(cMotBlo)
	BCA->(DbSetOrder(1))//BCA_FILIAL+BCA_MATRIC+BCA_TIPREG+BCA_DATA+BCA_TIPO
	If BCA->(MsSeek(xFilial("BCA")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG) ))  
		While BCA->(BCA_FILIAL+BCA_MATRIC+BCA_TIPREG) == xFilial("BCA")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG) .And. !BCA->(Eof())
			If BCA->BCA_TIPO == "0" .And. BCA->BCA_SOL412 == "1"
				lBloRN412 := .T.
				Exit
			EndIf
			BCA->(DbSkip())
		EndDo
	EndIf     
	
	BC3->(DbSetOrder(1))//BC3_FILIAL+BC3_MATRIC+BC3_DATA+BC3_TIPO
	If !lBloRN412 .And. BC3->(MsSeek(xFilial("BC3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) ))  
		While BC3->(BC3_FILIAL+BC3_MATRIC) == xFilial("BC3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) .And. !BC3->(Eof())
			If BC3->BC3_TIPO == "0" .And. BC3->BC3_SOL412 == "1"
				lBloRN412 := .T.
				Exit
			EndIf
			BC3->(DbSkip())
		EndDo
	EndIf 
	
If lBloRN412 .And. !MsgYesNo("Bloqueio efetuado através de uma solicitação do processo RN 412, deseja continuar com o desbloqueio?") 
		Return
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Liga variavel lAmbos...                                                           |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type('lAmbos') <> "L"
	lAmbos := .F.
Endif

//Verifica se sub-Contrato esta bloqueado
cNumSub := xFilial("BQC")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_CONEMP+BA1_VERCON+BA1_SUBCON+BA1_VERSUB)
If A260BloqSubCtr(cNumSub)
	If ! lDireto
		Aviso( OemtoAnsi(STR0075), OemtoAnsi(STR0076), { "Ok" }, 2 ) //"Sub-Contrato Bloqueado"  "O Sub-Contrato deste usuário está bloqueado. Não permitido o (des)bloqueio do usuário!"
	Endif
	RETURN
EndIf

//Verifica se familia esta bloqueada
//Quando usuario for titular deve efetuar bloqueio da familia
cCodFam := xFilial("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)
If !lDesBlqFam
	If A260BloqFamilia(cCodFam)
	   If ! lDireto
	   	  Aviso( OemtoAnsi(STR0079), OemtoAnsi(STR0080), { "Ok" }, 2 ) //"A familia deste usuário está bloqueada. Não permitido o (des)bloqueio do usuário!"
		  RETURN
	   EndIf
	EndIf
Endif

BA1->(DbSetOrder(2))
BA1->(MsSeek(xFilial("BA1")+cMatric)) //paro no primeiro
BA1->(DbSkip()) //e pulo o Titular
If BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) <> cMatric //se for dif e porque so tem ele...
   If lMsg
	   BA1->(DbGoTo(nRegSlv))
	   BA1->(DbSetOrder(nOrdSlv))
	   Aviso( OemtoAnsi(STR0081) , OemtoAnsi(STR0082), { "Ok" }, 2 ) //"Unico Usuario" "Esse usuario e unico neste familia, portanto deve ser bloqueado a familia."
	   RETURN
   EndIf
Endif
BA1->(DbSetOrder(nOrdSlv)) //volto p o que ele selecionou no browse...
BA1->(DbGoTo(nRegSlv))

// Desfaz o filtro para pesquisar em outras subcontratos...
BA1->( dbClearFilter() )

// Integridade com a transferencia.
If BA1->(FieldPos("BA1_TRADES")) > 0 .and. !Empty(BA1->BA1_TRADES)
	If lMsg
		BA1->( dbSetorder(02) )
		If BA1->( msSeek(xFilial("BA1")+BA1->BA1_TRADES) )
			MsgAlert(OemtoAnsi(STR0217)+; //"Este usuario foi bloqueado pela rotina de transferencia. Para desbloquar este usuario, primeiro exclua o "
			OemtoAnsi(STR0218) +Alltrim(BA1->(BA1_CODINT+'.'+BA1_CODEMP+'.'+BA1_MATRIC+'-'+BA1_TIPREG+'.'+BA1_DIGITO))) //"usuario de destino gerado pela transferencia com a matricula "
			BA1->(DbGoTo(nRegSlv))
			BA1->(DbSetOrder(nOrdSlv))
			Return()
		Endif
	EndIf
Endif
BA1->(DbSetOrder(nOrdSlv)) //volto p o que ele selecionou no browse...
BA1->(DbGoTo(nRegSlv))
RegToMemory( "BCA", .T., .F. )

If ExistBlock("PL260ABU")
	aAblu := ExecBlock("PL260ABU",.F.,.F.,{@lOKbloqUs,@aPL260ABLU,@_cMessage})
	If !aAblu[1]
		If ! lDireto
			MsgStop(aAblu[3])
		EndIf
		Return (aAblu[1])
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada - Executa Antes da Gravacao do Bloqueio/Desbloqueio Usuario)          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PLS260ABLU")
	aAblu := ExecBlock("PLS260ABLU",.F.,.F.,{@lOKbloqUs,@aPL260ABLU,@_cMessage})
	If !aAblu[1]
		If ! lDireto
			MsgStop(aAblu[3])
		EndIf
		Return(aAblu[1])
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
// Ponto de Entrada executado antes do bloqueio automatico
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Existblock("PLS260BF") .And. FunName() == "PLSA770"
    lGrav := Execblock("PLS260BF",.F.,.F.,{nOpc,cMatric+cTipReg,dData,nAcao,aLog})
    If !lGrav
		Return(.F.)
    Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ O sistema permite que exista familias com titulares bloqueados. Caso a operadora nao   ³
//³ permita que esta pratica seja utilizada, o sistema avisa para utilizar o bloq. familia.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If BA1->BA1_TIPUSU == cTitular .and. Empty(BA1->BA1_MOTBLO)
	If lMsg
		If !ApMsgYesNo(OemtoAnsi(STR0220 + STR0221 + STR0222),STR0219) //"A rotina de bloqueio de usuários irá bloquear apenas o titular. "##"Caso queira bloquear toda a família, utilize a opção BLOQUEIO FAMÍLIA. Deseja continuar"##"e bloquear apenas o TITULAR ?"##"Bloqueio de titular"
			Return .F.
		EndIf
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define botao para consulta a posicao financeira do usuario...                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aadd(aButtons,{"SALARIOS",{|| PLPOSFIN(BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC,.T.,.T.) },OemtoAnsi(STR0017),OemtoAnsi(STR0030)})// "Posicao Financeira"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada para definicao de botoes de usuario...                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PL260BUB")
	If ValType( aButtAux := ExecBlock("PL260BUB", .F., .F.,{"U"} ) ) == "A"
		AEval( aButtAux, { |x| AAdd( aButtons, x ) } )
	EndIf
Endif

If ! lDireto
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define dialogo...                                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	If IsInCallStack("PLS977ABOK") .And. dData <> NIL
		M->BC3_DATA := dData
	EndIf
	
	DEFINE MSDIALOG oDlgBlo TITLE cTitulo FROM 008.2,010.3 TO 034.4,100.3 OF GetWndDefault()

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Define entrada de dados padrao...                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oEncBlo := MSMGet():New("BCA",BCA->(Recno()),K_Alterar,,,,nil,{014+nTamT,001,197,355},nil,,,,,oDlgBlo,,,.F.)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Tenho que fazer esta checagem pq o usuario quando importado do PTU 100     ³
//³ fica bloqueado mais nao gera o BCA sendo assim nao e possivel desbloquear ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(cMotBlo) .And. !Empty(BA1->(BA1_ARQEDI))
   Aviso(OemtoAnsi(STR0077),OemtoAnsi(STR0078), { "Ok" }, 2 ) //"Favor utilizar a rotina de DESBLOQUEIO do menu EDI!"
   Return
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define valores para os campos chave da familia...                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(cMotBlo)
	M->BCA_TIPO := "0"
Else
	M->BCA_TIPO := "1"
Endif
M->BCA_MATRIC := BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)
M->BCA_TIPREG := BA1->BA1_TIPREG
M->BCA_MATANT := BA1->BA1_MATANT
M->BCA_NOMUSR := AllTrim(BA1->BA1_NOMUSR)+"  -  ("+PLRETTPU(BA1->BA1_TIPUSU)+")"
M->BCA_NIVBLQ := "U"
M->BCA_USUOPE := cUserName
M->BCA_DESBLO := ""
If lRn412
	M->BCA_SOL412 := "1"
EndIf
lRefresh := .T.
BA3->(DBSetOrder(1))
BA3->(MsSeek(xFilial("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)))

If ! lDireto
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ativa dialogo...                                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ACTIVATE MSDIALOG oDlgBlo ON INIT EnchoiceBar(oDlgBlo, bOK, bCancel, .F., aButtons)

Else
	nOpcA 			:= K_OK
	M->BCA_DATA 	:= dData
	M->BCA_MOTBLO 	:= cMotivo
	If BCA->(FieldPos("BCA_BLOFAT")) > 0
		M->BCA_BLOFAT   := cBloFat
	Endif
	nOpca := K_OK
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Tratamento para gravacao caso houve confirmacao de bloqueio         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == K_OK

	//verificando se está se tentando bloquear o beneficiário em uma data que já existe um bloqueio para ele
	If M->BCA_TIPO == "0" .AND. PLVERBLO( BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC), BA1->BA1_TIPREG, M->BCA_DATA, M->BCA_TIPO, BA1->BA1_CPFUSR )
		return
	ElseIf M->BCA_TIPO == "1" .AND. PLVERBLO( BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC), BA1->BA1_TIPREG, M->BCA_DATA, M->BCA_TIPO, BA1->BA1_CPFUSR )
		return
	EndIf
	
	lGrav := .T.
	If nP20 == 2 // Efetua o bloqueio
		BA1->(DbGoto(nRecBA1))
		If M->BCA_TIPO == "0"
			BA1->(RecLock("BA1",.F.))
			BA1->BA1_MOTBLO := M->BCA_MOTBLO
			BA1->BA1_DATBLO := M->BCA_DATA
			BA1->BA1_IMAGE  := "DISABLE"
			BA1->BA1_CONSID := "U"
			BA1->BA1_BLOFAT := M->BCA_BLOFAT
			BA1->BA1_OBTSIP := M->BCA_OBTSIP
			/*Retirada gravação do RESFAM com valor 0 pois mesmo bloqueado precisamos manter o histórico do responsável familiar para um possível desbloqueio.*/
			BA1->(MsUnLock())

			lAtuNio := !Empty(Posicione("BG3",1,xFilial("BG3")+M->BCA_MOTBLO,"BG3_BLQANS"))

			//Cria array para pegar os dados dos beneficiários bloqueados, para a função de envio
			//de e-mail automático na PLSA770
			Aadd(aNomBen,{BA1->BA1_FILIAL, BA1->BA1_CODINT, BA1->BA1_CODEMP, BA1->BA1_MATRIC, BA1->BA1_TIPUSU, BA1->BA1_TIPREG, BA1->BA1_DIGITO, BA1->BA1_NOMUSR})

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	       	//³ atualização da promoção da Saude para Pacientes bloqueados    	    ³
	       	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			IF 	 lPromo
				BOM->(DbSetOrder(3))
				If BOM->(MsSeek(xFilial("BOM")+BA1->BA1_MATVID))
					BOM->(RecLock("BOM", .F.))
					BOM->BOM_STATUS:='4'
					BOM->(MsUnlock())
				Endif
			Endif
		Else
			// Verifica no motivo de desbloqueio se será enviado para ANS
			lAtuNio := ENVBLOQANS("U",M->BCA_MOTBLO)

			lGrvBkp := .F.
			If  M->BCA_MOTBLO == GetNewPar("MV_PLSREUS","")  // O parametro deve existir - nao tem como usar valor default

	            //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	            //³ Monta array com tabelas a serem salvas como historico da matricula  ³
	            //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aadd(aTabBkp,{"BA1","Usuario"                              ,2,"BA1_CODINT + BA1_CODEMP + BA1_MATRIC + BA1_TIPREG"})
				aadd(aTabBkp,{"BF3","DOENCAS PRE-EXISTENTES"               ,1,"BF3_CODINT + BF3_CODEMP + BF3_MATRIC + BF3_TIPREG"})
				aadd(aTabBkp,{"BYY","DIFERENCIACAO DE PROCEDIMENTO POR CID",1,"BYY_CODINT + BYY_CODEMP + BYY_MATRIC + BYY_TIPREG"})
				aadd(aTabBkp,{"BCP","DOCUMENTOS OBRIGATORIOS"              ,1,"BCP_CODOPE + BCP_CODEMP + BCP_MATRIC + BCP_TIPREG"})
				aadd(aTabBkp,{"BF4","OPCIONAIS DO USUARIO"                 ,1,"BF4_CODINT + BF4_CODEMP + BF4_MATRIC + BF4_TIPREG"})
				aadd(aTabBkp,{"BV0","GRUPOS DETERMINADOS"                  ,1,"BV0_CODINT + BV0_CODEMP + BV0_MATRIC + BV0_TIPREG"})
				aadd(aTabBkp,{"BV1","CLASSE DE CARENCIA"                   ,1,"BV1_CODINT + BV1_CODEMP + BV1_MATRIC + BV1_TIPREG"})
				aadd(aTabBkp,{"BV2","CO-PARTICIPACAO"                      ,1,"BV2_CODINT + BV2_CODEMP + BV2_MATRIC + BV2_TIPREG"})
				aadd(aTabBkp,{"BV3","PROCEDIMENTOS"                        ,1,"BV3_CODINT + BV3_CODEMP + BV3_MATRIC + BV3_TIPREG"})
				aadd(aTabBkp,{"BV4","CID"                                  ,1,"BV4_CODINT + BV4_CODEMP + BV4_MATRIC + BV4_TIPREG"})
				aadd(aTabBkp,{"BV6","ESPECIALIDADE"                        ,1,"BV6_CODINT + BV6_CODEMP + BV6_MATRIC + BV6_TIPREG"})
				aadd(aTabBkp,{"BV8","CO-PARTICIPACAO"                      ,1,"BV8_CODINT + BV8_CODEMP + BV8_MATRIC + BV8_TIPREG"})
				aadd(aTabBkp,{"BV9","GRUPOS DE QUANTIDADE"                 ,1,"BV9_CODINT + BV9_CODEMP + BV9_MATRIC + BV9_TIPREG"})
				aadd(aTabBkp,{"BVA","CO-PARTICIPACAO"                      ,1,"BVA_CODINT + BVA_CODEMP + BVA_MATRIC + BVA_TIPREG"})
				aadd(aTabBkp,{"BYX","FORMA DE COBRANCA OPCIONAIS"          ,1,"BYX_CODOPE + BYX_CODEMP + BYX_MATRIC + BYX_TIPREG"})
				aadd(aTabBkp,{"BZX","COBRANCA USUARIO/OPCIONAL"            ,1,"BZX_CODOPE + BZX_CODEMP + BZX_MATRIC + BZX_TIPREG"})
				aadd(aTabBkp,{"BYI","HISTORICO"                            ,1,"BYI_CODOPE + BYI_CODEMP + BYI_MATRIC + BYI_TIPREG"})
				aadd(aTabBkp,{"BGU","HISTORICO DOS OPCIONAIS DO USUARIO"   ,2,"BGU_MATRIC + BGU_TIPREG"})
				aadd(aTabBkp,{"BCA","HISTORICO BLOQUEIO DO USUARIO"        ,1,"BCA_MATRIC + BCA_TIPREG"})
				aadd(aTabBkp,{"BH6","GRATUIDADE"                           ,1,"BH6_CODINT + BH6_CODEMP + BH6_MATRIC + BH6_TIPREG"})
				aadd(aTabBkp,{"BFE","GRUPO COBERTURA"                      ,1,"BFE_CODINT + BFE_CODEMP + BFE_MATRIC + BFE_TIPREG"})
				aadd(aTabBkp,{"BVI","CLASSE DE CARENCIA"                   ,1,"BVI_CODINT + BVI_CODEMP + BVI_MATRIC + BVI_TIPREG"})
				aadd(aTabBkp,{"BVJ","CO-PARTICIPACAO"                      ,1,"BVJ_CODINT + BVJ_CODEMP + BVJ_MATRIC + BVJ_TIPREG"})
				aadd(aTabBkp,{"BFG","PROCEDIMENTOS"                        ,1,"BFG_CODINT + BFG_CODEMP + BFG_MATRIC + BFG_TIPREG"})
				aadd(aTabBkp,{"BVM","CO-PARTICIPACAO"                      ,1,"BVM_CODINT + BVM_CODEMP + BVM_MATRIC + BVM_TIPREG"})
				aadd(aTabBkp,{"BW9","GRUPOS DE QUANTIDADE"                 ,1,"BW9_CODINT + BW9_CODEMP + BW9_MATRIC + BW9_TIPREG"})
				aadd(aTabBkp,{"BWA","CO-PARTICIPACAO"                      ,1,"BWA_CODINT + BWA_CODEMP + BWA_MATRIC + BWA_TIPREG"})
				aadd(aTabBkp,{"BFO","CLASSE DE CARENCIA"                   ,1,"BFO_CODINT + BFO_CODEMP + BFO_MATRIC + BFO_TIPREG"})
				aadd(aTabBkp,{"BHH","SITUACOES ADVERSAS"                   ,1,"BHH_CODINT + BHH_CODEMP + BHH_MATRIC + BHH_TIPREG"})
				aadd(aTabBkp,{"BDK","FAIXA ETARIA ESPECIFICA DO USUARIO"   ,1,"BDK_CODINT + BDK_CODEMP + BDK_MATRIC + BDK_TIPREG"})
				aadd(aTabBkp,{"BDQ","DESCONTO PARA A FAIXA"                ,1,"BDQ_CODINT + BDQ_CODEMP + BDQ_MATRIC + BDQ_TIPREG"})
				aadd(aTabBkp,{"BYB","HISTORICO"                            ,1,"BYB_CODOPE + BYB_CODEMP + BYB_MATRIC + BYB_TIPREG"})

				Begin Transaction
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Salva historico da matricula                                        ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					PlsUsrBkp(BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG),M->BCA_DATA,aTabBkp)

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualiza campos do usuario                                          ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					BA1->(RecLock("BA1",.F.))
					BA1->BA1_DATINC := M->BCA_DATA
					BA1->BA1_DATCAR := M->BCA_DATA
					BA1->BA1_DATCPT := ctod("")
					BA1->(msUnLock())
				End Transaction

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Liga flag para indicar que gravou o historico                       ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				lGrvBkp := .T.
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Desbloqueia o usuario                                               ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If BA1->BA1_CONSID == 'S'
				cNivelTxt := "Subcontrato."
			Elseif BA1->BA1_CONSID == 'F'
				cNivelTxt := "Familia."
			Endif
			If lDesBlqFam
			
				BA3->(RecLock("BA3",.F.))
				BA3->BA3_MOTBLO := ""
				BA3->BA3_DATBLO := ctod("")
				BA3->BA3_BLOFAT := ""
				BA3->BA3_LOTTRA := ''
				BA3->BA3_TRADES := ''
				BA3->BA3_CONSID := " "
				BA3->(MsUnLock())
			Endif
			
			If BA1->BA1_CONSID <> 'U' .AND. !lDesBlqFam
				Aviso(OemtoAnsi(STR0223),OemtoAnsi(STR0224)+ cNivelTxt + OemtoAnsi(STR0225),{"Ok"})//"Desbloqueio de usuario." //"Usuario bloqueado em nivel de " //"Nao pode ser desbloqueado em nivel de usuario!"
				BA1->(DbSetOrder(nOrdBA1))
				BA1->(DbGoTo(nRecBA1))
				BA3->(DbSetOrder(nOrdBA3))
				BA3->(DbGoTo(nRecBA3))
			Endif
			BA1->(RecLock("BA1",.F.))
			BA1->BA1_MOTBLO := ""
			BA1->BA1_DATBLO := ctod("")
			BA1->BA1_IMAGE  := "ENABLE"
			BA1->BA1_CONSID := ""
			If BA1->(FieldPos("BA1_BLOFAT")) > 0
				BA1->BA1_BLOFAT	:= ""
			Endif
			If BA1->(FieldPos("BA1_OBTSIP")) > 0
				BA1->BA1_OBTSIP := ""
			Endif
			If BA1->(FieldPos("BA1_TRADES")) > 0
				BA1->BA1_TRADES := ''
			Endif
			If BA1->(FieldPos("BA1_LOTTRA")) > 0
				BA1->BA1_LOTTRA := ''
			Endif
			BA1->(MsUnLock())

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Emite mensagem caso tenha gravado historico                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If  lGrvBkp
				Aviso(OemtoAnsi(STR0226), ; //"Usuario Reativado"
				OemtoAnsi(STR0227) + ; //"O sistema salvou todas as informacoes atuais desta matricula, "
				OemtoAnsi(STR0228) + chr(13) + ; // "para efeito de historico."
				OemtoAnsi(STR0229) , ; //"Acesse o cadastro do usuario e efetue as atualizacoes necessarias."
				{ "Ok" }, 2 )
			Endif
		Endif		
		
		//Chamo a rotina genérica que atualiza o Núcleo de Informações da Central de Obrigações
		If lCentralObr .AND. (lUsaSIP .OR.  lUsaSIB) .AND. lAtuNio
			aAreaBA1 := BA1->(GetArea())
			aAreaBA3 := BA3->(GetArea())
			aAreaBTS := BTS->(GetArea())
			If PlSibEnvANS(Posicione("BA3",1,xFilial("BA1")+cMatric,"BA3_TIPOUS"),BA1->BA1_CODINT,BA1->BA1_CODEMP,;
												BA1->BA1_CONEMP,BA1->BA1_VERCON,BA1->BA1_SUBCON,BA1->BA1_VERSUB,BA1->BA1_INFANS)
				
				//Primeiro monto o array com os dados do beneficiário aDadNio
				oModel := Pl260DadNio('1',Nil,Nil,"",aDadCob,;
											.T.,M->BCA_TIPO == "0", , lUsaSIP )
				
				oModel:SetValue( "B3KMASTER", 'B3K_OPESIB',IIf(M->BCA_TIPO == "0",'4','5') )//BCA_TIPO == "0" -> Bloqueio

				oModel := PLGetHrCentral(oModel)

				If M->BCA_TIPO <> "0" // Reativar = 5
					oModel:SetValue( "B3KMASTER", "B3K_DATBLO", StoD(""))
				EndIf

				//Chamo a rotina genérica que atualiza o Núcleo de Informações da Central de Obrigações
				If lSIPSincrono .OR. lSIBSincrono 
					
					cB3KMat	:= oModel:GetValue( "B3KMASTER",  'B3K_MATRIC')
					cNomBen	:= oModel:GetValue( "B3KMASTER",  'B3K_NOMBEN')
					aAdd(aCritSib,{cB3KMat,cNomBen,""})
					oModel:commitData()
				Else
					StartJob("PLJOBNIO",GetEnvServer(),.F.,cEmpAnt,cFilAnt,;
							"B3K",oModel,nOpc,.F./*lMult*/,nOpc,;
							M->BCA_DATA,aDadCob)
				EndIf
				
			EndIf
			RestArea(aAreaBA3)
			RestArea(aAreaBA1)
			RestArea(aAreaBTS)
		EndIf

		lCritSib := Len(aCritSib) > 1
		If lCritSib .AND. lMsg
			PLSCRIGEN(aCritSib,{ {"Codigo Crit.","@C",5} , {"Descrição","@C",200 } , {"Solução","@C",200 } }, "  Críticas de Beneficiários  ")
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
 		//³ Gera credito para processo de pro-rata no bloqueio                                        ³
  		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
		If GetNewPar("MV_PL9BPRA","0") == "1" .And. !lRn412 .And. M->BCA_TIPO == "0" .And. M->BCA_BLOFAT == "1" .And.;
			IIF(lProRat,IIF(Posicione("BG3",1,xFilial("BG3")+M->BCA_MOTBLO,"BG3_PRORAT") == "0",.F.,.T.),.T.) // Se o campo Pro Rata no motivo estiver com "0 = Não", não gera NCC
			
			Aadd(aUsuBloq,BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO))
			PL99BProRt(M->BCA_DATA,aUsuBloq,lDireto)
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
 		//³ Gera pedido de bloqueio para o HAT                                                        ³
  		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
		If GetNewPar("MV_PLSHAT","0") == "1"
			BNV->(DbSetOrder(2))//BNV_FILIAL+BNV_CODTRA+BNV_ALIAS+BNV_CHAVE  
			
			If M->BCA_TIPO == "0"//Bloqueio 
				cCodTra := _beneficiaryStatus_desblo
				//Verifico se ja tem desbloqueio nao enviado, se tiver, excluo
       	 		If BNV->(MsSeek(xFilial("BNV")+cCodTra+"BCA"+M->(BCA_MATRIC+BCA_TIPREG)+Dtos(M->BCA_DATA))) .And. BNV->BNV_STATUS == HAT_PENDENTE_ENVIO
					PLS274GRV( K_Excluir )
				Else
					cChaveHAT := M->(BCA_MATRIC+BCA_TIPREG)+Dtos(M->BCA_DATA)+M->BCA_TIPO
					PLHATPedPD(K_Incluir,_beneficiaryStatus_blo,"BCA",cChaveHAT,NIL,1)	
        		EndIf	
        		
			ElseIf M->BCA_TIPO == "1"//Desbloqueio 
				cCodTra := _beneficiaryStatus_blo
				//Verifico se ja tem bloqueio nao enviado, se tiver, excluo
       	 		If BNV->(MsSeek(xFilial("BNV")+cCodTra+"BCA"+M->(BCA_MATRIC+BCA_TIPREG)+Dtos(M->BCA_DATA))) .And. BNV->BNV_STATUS == HAT_PENDENTE_ENVIO
					PLS274GRV( K_Excluir )
				Else
					cChaveHAT := M->(BCA_MATRIC+BCA_TIPREG)+Dtos(M->BCA_DATA)+M->BCA_TIPO
					PLHATPedPD(K_Incluir,_beneficiaryStatus_desblo,"BCA",cChaveHAT,NIL,1)	
        		EndIf		
			EndIf	
		EndIf
		
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada apos a gravacao do bloqueio/desbloqueio do usuario                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If  ExistBlock('PL260BUS')
		ExecBlock('PL260BUS',.f.,.f.)
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de entrada apos a gravacao do bloqueio/desbloqueio do usuario                       ³
	//| Complemento de Dados utilizando o retorno do PE. Antes da Gravacao   - 09/11/05           |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock("PLS260DB")
		aAuxLog:= ExecBlock("PLS260DB",.F.,.F.,{aPL260ABLU,nP20,aLog})
		If ValType(aAuxLog) == "A"
			aLog := aClone(aAuxLog)
		Endif
	EndIf

	If nP20 == 2 // Efetua o bloqueio
		PLUPTENC("BCA",K_Incluir)
		BA1->(DbCommitAll())
		//Se a família toda está bloqueada e desbloqueio um membro, devo colocar também o desbloqueio na família, para evitar problemas no atendimento e demais rotinas.
		//Verifico se a família está bloqueada ou não, pois caso desbloqueio mais de um usuário, para não gerar várias BC3.
		If M->BCA_TIPO == "1" .And. lDesBlqFam .And. PLQYULBFB("BC3",BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC))//PlChHiBlo("BC3",M->BCA_DATA,BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC),,,,)	//r7	
			BC3->(RecLock("BC3", .T.))
				BC3->BC3_FILIAL	:= xFilial("BC3")
				BC3->BC3_MATRIC 	:= BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)
				BC3->BC3_TIPO 	:= "1"
				BC3->BC3_DATA 	:= M->BCA_DATA
				BC3->BC3_MOTBLO 	:= M->BCA_MOTBLO
				BC3->BC3_OBS 		:= M->BCA_OBS
				BC3->BC3_USUOPE 	:= cUserName
				BC3->BC3_NIVBLQ 	:= "F"
				BC3->BC3_MATANT	:= BA1->BA1_MATANT
				BC3->BC3_BLOFAT	:= M->BCA_BLOFAT
				BC3->BC3_DATLAN	:= M->BCA_DATLAN
				BC3->BC3_HORLAN	:= M->BCA_HORLAN
			BC3->(MsUnlock())
		EndIf
	EndIf
	
	//Se bloqueio um a um da família, no último benefiicário é necessário bloquear a família também.
	if M->BCA_TIPO == "0" 
		
		cChaveB := BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)
		BA1->(dbsetOrder(1))
		BA1->(DbGoTop())
		BA1->( MsSeek(xFilial("BA1")+cChaveB))
		
		While !BA1->(eof()) .and. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC) == xFilial("BA1")+cChaveB
		   	//Verifico se o beneficiário posicionado está bloqueado. Se sim
           	If PlChHiBlo("BCA",M->BCA_DATA,BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC),BA1->BA1_TIPREG,,,,.F.,,.F.) 
           		nContB++
           	Else
           		nContNB++
           	EndIf           
           BA1->(DbSkip())
		EndDo
		
		If (nContNB == 0 .And. nContB > 0)  //Significa que todos estão bloqueados, logo, bloqueio a família
			BC3->(RecLock("BC3", .T.))
				BC3->BC3_FILIAL	:= xFilial("BC3")
				BC3->BC3_MATRIC 	:= cChaveB
				BC3->BC3_TIPO 	:= "0"
				BC3->BC3_DATA 	:= M->BCA_DATA
				BC3->BC3_MOTBLO 	:= M->BCA_MOTBLO
				BC3->BC3_OBS 		:= M->BCA_OBS
				BC3->BC3_USUOPE 	:= cUserName
				BC3->BC3_NIVBLQ 	:= "F"
				BC3->BC3_MATANT	:= BA1->BA1_MATANT
				BC3->BC3_BLOFAT	:= M->BCA_BLOFAT
				BC3->BC3_DATLAN	:= M->BCA_DATLAN
				BC3->BC3_HORLAN	:= M->BCA_HORLAN
			BC3->(MsUnlock())  
			
			BA3->(RecLock("BA3",.F.))
				BA3->BA3_MOTBLO := M->BCA_MOTBLO
				BA3->BA3_DATBLO := M->BCA_DATA
				BA3->BA3_CONSID := "F"
				BA3->BA3_BLOFAT := "1"
			BA3->(MsUnLock())
		EndIf
	EndIf
         	
	BA1->(DbSetOrder(nOrdBA1))
	BA1->(DbGoTo(nRecBA1))
	BA3->(DbSetOrder(nOrdBA3))
	BA3->(DbGoTo(nRecBA3))
	
ElseIf nOpca == 0 //SE CANCELOU
	//SE CAIU NA ROTINA QUANDO UM BLOQUEIO ENTRA NO OUTRO PLVLDPERBL PRECISO DESFAZER A ALTERAÇÃO
	if nRecLastDesbloq != 0 .and. !empty(dDtLastDesbloq)
		
		aAreaBCA := BCA->(getArea())
		
		BCA->(dbGoto(nRecLastDesbloq))
		
		BCA->(recLock("BCA", .F.))
			BCA->BCA_DATA := dDtLastDesbloq
		BCA->(msUnlock())
		
		
		msgAlert("A alteração da data do desbloqueio foi desfeita", "Atenção")
		
		restArea(aAreaBCA)
		
	endIf
Endif

Return(aNomBen)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260REAT  ³ Autor ³ Angelo Sperandio    ³ Data ³ 24.05.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Confirma reativacao do usuario                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PL260REAT()

Local lRet := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Solicita confirmacao, caso seja reativacao de usuario               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If  M->BCA_TIPO <> "0" .and. ;
		M->BCA_MOTBLO == GetNewPar("MV_PLSREUS","")  // O parametro deve existir - nao tem como usar valor default
	If  Aviso( OemtoAnsi(STR0083), OemtoAnsi(STR0084), { OemtoAnsi(STR0085), OemtoAnsi(STR0086)}, 2 ) == 1
		lRet := .T.
	Else
		lRet := .F.
	Endif
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSTRANSF  ³ Autor ³ Tulio Cesar         ³ Data ³ 15.06.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Transferencia de um contrato.                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Alteracao ³ Gerar comissao no caso da transferencia.                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSTransf(cAlias,nReg,nOpc)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Sugere a inclusao de um novo historico de transferencia...          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nOK := BI1->(AxInclui("BI1",0,K_Incluir))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso seja confirmado a inclusao atualiza no contrato e usuarios...  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOK == K_OK
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona no contrato...                                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BA3->(DbSetOrder(1))

	If BA3->(MsSeek(xFilial("BA3")+BI1->(BI1_CODINT+BI1_CODEMP+BI1_MATRIC)))
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza contrato (BA3)...                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		BA3->(RecLock("BA3",.F.))
		BA3->BA3_CODPLA := BI1->BI1_PRONOV
		BA3->BA3_VERSAO := BI1->BI1_VERNOV
		BA3->BA3_DATBAS := BI1->BI1_DATA
		BA3->BA3_NUMCON := BI1->BI1_CONNOV
		BA3->(MsUnLock())
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza todos os usuarios do contrato com o novo produto...        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		BA1->(DbSetOrder(2))
		If BA1->(MsSeek(xFilial("BA1")+BI1->(BI1_CODINT+BI1_CODEMP+BI1_MATRIC)))
			While ! BA1->(Eof()) .And. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC) == xFilial("BA1")+BI1->(BI1_CODINT+BI1_CODEMP+BI1_MATRIC)
				BA1->(RecLock("BA1",.F.))
				BA1->BA1_DATCAR := BI1->BI1_DATA
				BA1->BA1_NUMCON := BI1->BI1_CONNOV
				BA1->(MsUnLock())
				BA1->(DbSkip())
			Enddo
		Endif
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina...                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260DAT ³ Autor ³ Tulio Cesar         ³ Data ³ 25.04.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida a data do contrato...                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260DAT(cCodInt,cCodEmp,dData,cNumCon)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL lRet   := .F.
LOCAL cChave := cCodInt+cCodEmp

cNumCon := AllTrim(cNumCon)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar se a data base e maior que a data do servidor...          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BG9->(DbSetOrder(1))
If BG9->(MsSeek(xFilial("BG9")+cChave))

	If BG9->BG9_TIPO == "2"
		BT5->(DbSetOrder(1))
		If BT5->(MsSeek(xFilial("BT5")+cChave+cNumCon))
			BQB->(DBSetOrder(1))
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Pesquisa versao do contrato                                         ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If BQB->(MsSeek(xFilial("BQB")+cChave+cNumCon))
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se a data do contrato da Familia esta no intervalo de datas da versao  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If dtos(dData) < dtos(BQB->BQB_DATINI)
					Help("",1,"PLSA260DAT")
				Else
					If Empty(dtos(BQB->BQB_DATFIN))
						lRet := .T.
					Else
						If dtos(dData) > dtos(BQB->BQB_DATFIN)
							Help("",1,"PLSA260D01")
						Else
							lRet := .T.
						Endif
					Endif
				Endif
			Endif
		Else
			Help("",1,"PLSA260BT5")
		Endif
	Else
		lRet := .T.
	Endif
Else
	Help("",1,"RECNO")
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260PLA ³ Autor ³ Tulio Cesar         ³ Data ³ 25.04.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida a data analisando a versao do plano...              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260PLA(cCodPla,dData,cCodInt,cCodEmp,cNumCon,cVerCon,cSubCon,cVerSub,lAtuVar,cCodOpc,cVerPla)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL lRet   := .F.
LOCAL lBloq	 := .F.
LOCAL cChave := cCodInt+cCodPla
LOCAL lBT6Found
LOCAL lSitAns:= .T.
DEFAULT lAtuVar := .T.
DEFAULT cCodOpc	:= ""
DEFAULT cVerPla := ""

If Empty(cCodPla)
	Return({.T.,""})
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar so o plano esta disponivel para a empresa/contrato...     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If BG9->BG9_TIPO == "2"

	If !Empty(cCodOpc)

		DbSelectArea("BHS")
		BHS->(DbSetOrder(1))//BHS_FILIAL + BHS_CODINT + BHS_CODIGO + BHS_NUMCON + BHS_VERCON + BHS_SUBCON + BHS_VERSUB + BHS_CODPRO + BHS_VERPRO + BHS_CODPLA + BHS_VERPLA
		If BHS->(MsSeek(xFilial("BHS")+cCodInt+cCodEmp+cNumCon+cVercon+cSubCon+cVerSub+cCodPla+cVerPla+cCodOpc))
			Return({.T.,BHS->BHS_VERPLA})
		Else
			Return({.T.,M->BF1_VERSAO})
		EndIf

	EndIf

	BT6->(DBSetOrder(1))

    lBT6Found := BT6->(MsSeek(xFilial("BT6")+cCodInt+cCodEmp+cNumCon+cVercon+cSubCon+cVerSub+cCodPla+cVerPla))

	If ! lBT6Found
	   Help("",1,"PLS26003")
	   Return({lRet,""})
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verificar se a data base e maior que a data do servidor...          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		BI3->(DbSetOrder(1))
		If BI3->(MsSeek(xFilial("BI3")+cChave))
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Posiciona na primeira versao...                                     ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			BIL->(DbSetOrder(1))
			If BIL->(MsSeek(xFilial("BIL")+cChave))
				While ! BIL->(Eof()) .And. BIL->(BIL_FILIAL+BIL_CODIGO) == xFilial("BIL")+cChave
					If dtos(dData) >= dtos(BIL->BIL_DATINI) .And. dtos(dData) <= dtos(BIL->BIL_DATFIN)
						// Testa agora se a versao do produto disponivel esta ativa...
						If BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPla+BIL->BIL_VERSAO))
							If BI3->BI3_STATUS <> '2' .and.  !BI3->BI3_SITANS $ "2,3"
								lRet := .T.
								Exit
							Else
								If (nOpcx == K_Incluir)
									If !lJuridico
										lBloq := .T.
									Else
										lRet := .T.
										Exit
									EndIf
								Else
									If !lJuridico
										If PLS260IsTit()
											lBloq := .T.
										Else
											lRet := .T.
											Exit
										Endif
									Else
										lRet := .T.
										Exit
									EndIf
								Endif
							Endif
						Endif
					ElseIf Empty(BIL->BIL_DATFIN)
						If BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPla+BIL->BIL_VERSAO)) //BI3->(MsSeek(xFilial("BI3")+M->BA3_CODINT+M->BA3_CODPLA+BIL->BIL_VERSAO))
							If Dtos(dData) >= dtos(BIL->BIL_DATINI)
								If BI3->BI3_STATUS <> '2'.and.!BI3->BI3_SITANS $ "2,3"
									lRet := .T.
									Exit
								Else
									If (nOpcx == K_Incluir)
										If !lJuridico
											lBloq := .T.
										Else
											lRet := .T.
											Exit
										EndIf
									Else
										If !lJuridico
											If PLS260IsTit()
												lBloq := .T.
											Else
												lRet := .T.
												Exit
											Endif
										Else
											lRet := .T.
											Exit
										EndIf
									Endif
								Endif
							Else
								// Se a versao selecionada nao estiver na faixa de datas e nao estiver bloqueada
								// Deve apresentar o help sobre a faixa de datas, entao desligo o flag de mensagem
								// de versao bloqueada, caso ela esteja ligada.
								If BI3->BI3_STATUS <> '2' .and. lBloq
									lBloq := .F.
								Endif
							Endif
						Endif
					Endif
					BIL->(DbSkip())
				Enddo
			Endif

			If ! lRet
				If !lBloq
					Help("",1,"PLS26003")
				Else
					If BI3->(FieldPos("BI3_SITANS")) > 0 .And. BI3->BI3_SITANS $ "2,3"
						If (!INCLUI .and. Readvar()=='M->BA3_CODPLA' .and. M->BA3_CODPLA == BA3->BA3_CODPLA) .or.;
						   (!INCLUI .and. Readvar()=='M->BA1_CODPLA' .and. IIf(Empty(BA1->BA1_CODPLA), M->BA3_CODPLA == BA3->BA3_CODPLA, M->BA1_CODPLA == BA1->BA1_CODPLA) )
							lSitAns	:= .F.
							lRet	:= .T.
						EndIf
						If !PLS260IsTit() .and. lSitAns
							Help("",1,"PLSSITANS")
						EndIf
					Else
						Help("",1,"PLSA260002")
					Endif
				Endif
				Return({lRet,""})
			Else
				BI3->(DbSetOrder(1))
				BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPla+BIL->BIL_VERSAO))
				If lAtuVar
					M->BA3_SEGPLA := BT6->BT6_CODSEG
					M->BA3_MODPAG := BT6->BT6_MODPAG
					M->BA3_APLEI  := BT6->BT6_APOSRG
					M->BA3_ABRANG := BT6->BT6_ABRANG
				Endif
			Endif
	    Endif
	Endif

	lRet := .T.

Else

	If !Empty(cCodOpc)

		DbSelectArea("BT3")
		BT3->(DbSetOrder(1))//BT3_FILIAL + BT3_CODIGO + BT3_VERSAO + BT3_CODPLA + BT3_VERPLA
		If BT3->(MsSeek(xFilial("BTS")+cCodInt+cCodPla+cVerPla+cCodOpc))
			Return({.T.,BT3->BT3_VERPLA})
		Else
			Return({.T.,M->BF1_VERSAO})
		EndIf

	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verificar se a data base e maior que a data do servidor...          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BI3->(DbSetOrder(1))
	If BI3->(MsSeek(xFilial("BI3")+cChave))
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Posiciona na primeira versao...                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		BIL->(DbSetOrder(1))
		If BIL->(MsSeek(xFilial("BIL")+cChave))
			While ! BIL->(Eof()) .And. BIL->(BIL_FILIAL+BIL_CODIGO) == xFilial("BIL")+cChave
				If     dtos(dData) >= dtos(BIL->BIL_DATINI) .And. dtos(dData) <= dtos(BIL->BIL_DATFIN)
					// Testa agora se a versao do produto disponivel esta ativa...
					If BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPla+BIL->BIL_VERSAO))
						If BI3->BI3_STATUS <> '2'.and. !BI3->BI3_SITANS $ "2,3"
							lRet := .T.
							Exit
						Else
							If (nOpcx == K_Incluir)
								lBloq := .T.
							Else
								If !PLS260IsTit()
									lBloq := .T.
								Else
									lRet := .T.
									Exit
								Endif
							Endif
						Endif
					Endif
				ElseIf Empty(BIL->BIL_DATFIN)
					// Testa agora se a versao do produto disponivel esta ativa...
					If BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPla+BIL->BIL_VERSAO))		//BI3->(MsSeek(xFilial("BI3")+M->BA3_CODINT+M->BA3_CODPLA+BIL->BIL_VERSAO))
						If Dtos(dData) >= dtos(BIL->BIL_DATINI)
							If BI3->BI3_STATUS <> '2' .and. !BI3->BI3_SITANS $ "2,3"
								lRet := .T.
								Exit
							Else
								If (nOpcx == K_Incluir)
									lBloq := .T.
								Else
									If !PLS260IsTit()
										lBloq := .T.
									Else
										lRet := .T.
										Exit
									Endif
								Endif
							Endif
						Else
							// Se a versao selecionada nao estiver na faixa de datas e nao estiver bloqueada
							// Deve apresentar o help sobre a faixa de datas, entao desligo o flag de mensagem
							// de versao bloqueada, caso ela esteja ligada.
							If BI3->BI3_STATUS <> '2' .and. lBloq
								lBloq := .F.
							Endif
						Endif
					Endif
				Endif
				BIL->(DbSkip())
			Enddo
		Endif

		If ! lRet
			If !lBloq
				Help("",1,"PLS26003")
			Else
				If BI3->(FieldPos("BI3_SITANS")) > 0 .And. BI3->BI3_SITANS $ "2,3"
					If (!INCLUI .and. Readvar()=='M->BA3_CODPLA' .and. M->BA3_CODPLA == BA3->BA3_CODPLA) .or.;
   					   (!INCLUI .and. Readvar()=='M->BA1_CODPLA' .and. IIf(Empty(BA1->BA1_CODPLA), M->BA3_CODPLA == BA3->BA3_CODPLA, M->BA1_CODPLA == BA1->BA1_CODPLA) )
						lSitAns	:= .F.
						lRet	:= .T.
					EndIf
					If lSitAns
						Help("",1,"PLSSITANS")
					EndIf
				Else
					Help("",1,"PLSA260002")
				Endif
			Endif
			Return({lRet,""})
		Else
			BI3->(DbSetOrder(1))
			BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPla+BIL->BIL_VERSAO))
			If lAtuVar
				M->BA3_SEGPLA := BI3->BI3_CODSEG
				M->BA3_MODPAG := BI3->BI3_MODPAG
				M->BA3_APLEI  := BI3->BI3_APOSRG
				M->BA3_ABRANG := BI3->BI3_ABRANG
				// Atualiza campo de acordo com o produto (Pessoa Fisica)
				If (nOpcx == K_Incluir) 
					M->BA3_COBRAT := BI3->BI3_COBRAT
				EndIf

			Endif
		Endif
	Else
		Help("",1,"RECNO")
		Return({lRet,""})
	Endif
Endif

If lAtuVar
	If BG9->BG9_TIPO == "2"
		M->BA3_TIPCON := BT5->BT5_TIPCON
	Else
		M->BA3_TIPCON := GetNewPar("MV_PLSTIPC","1")
	Endif
Endif

Return({lRet,BIL->BIL_VERSAO})

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260BA3 ³ Autor ³ Michele Tatagiba    ³ Data ³ 03.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida a data analisando a versao do plano no contrato     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260BA3()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL lRet
LOCAL cNumCon := ""

If IsInCallStack("PLSA260MVC")
	PLSABA3MVC()
	Return(.t.)
EndIf

BG9->(DBSetOrder(1))
BG9->(MsSeek(xFilial("BG9")+M->BA3_CODINT+M->BA3_CODEMP))

If ReadVar() == "M->BA3_CODPLA"
	lRet    := Eval( {|a| a[1]},  PLSA260PLA(M->BA3_CODPLA,M->BA3_DATBAS,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CONEMP,M->BA3_VERCON,M->BA3_SUBCON,M->BA3_VERSUB, .T., , IIf(Empty(M->BA3_VERSAO) , '001', M->BA3_VERSAO)  ) )
Else
	If ReadVar() == "M->BA3_CODEMP"
		MsgAlert(OemtoAnsi(STR0261))
		Return(.F.)
	Else
		If Empty(M->BA1_CODPLA) .and. Empty(M->BA1_VERSAO)
			lRet    :=  .T.
		Else
			lRet    := Eval( {|a| a[1]},  PLSA260PLA(IIf(Empty(M->BA1_CODPLA), M->BA3_CODPLA, M->BA1_CODPLA),If(Empty(M->BA1_DATINC),M->BA3_DATBAS,M->BA1_DATINC),M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CONEMP,M->BA3_VERCON,M->BA3_SUBCON,M->BA3_VERSUB, .F., , IIf(Empty(M->BA1_VERSAO) , M->BA3_VERSAO, M->BA1_VERSAO) ) )
		Endif
	EndIf
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260BF1 ³ Autor ³ Michele Tatagiba    ³ Data ³ 03.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida a data analisando a versao do plano opcional da fami³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260BF1()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL lRet
LOCAL cNumCon := ""

BG9->(DBSetOrder(1))
BG9->(MsSeek(xFilial("BG9")+M->BA3_CODINT+M->BA3_CODEMP))

lRet    := Eval( {|a| a[1] } , PLSA260PLA(M->BA3_CODPLA,M->BF1_DATBAS,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CONEMP,M->BA3_VERCON,M->BA3_SUBCON,M->BA3_VERSUB) )
If lRet
	M->BF1_VERSAO :=  Eval( {|a| a[2] } , PLSA260PLA(M->BA3_CODPLA,M->BF1_DATBAS,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CONEMP,M->BA3_VERCON,M->BA3_SUBCON,M->BA3_VERSUB,NIL,M->BF1_CODPRO,M->BA3_VERSAO) )
Endif

Return(lRet)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260Cob ³ Autor ³ Tulio Cesar         ³ Data ³ 17.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica se para o tipo de cobranca e necessario se ter um ³±±
±±³          ³ cliente                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260Cob(cCodCli,cTipo)
LOCAL lRet := .F.

If cTipo == "1" .And. Empty(cCodCli)
	MsgInfo(OemtoAnsi(STR0087)) //"Informe um cliente antes de confirmar a cobranca neste nivel"
Else
	lRet := .T.
Endif

Return(lRet)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260Ven ³ Autor ³ Tulio Cesar         ³ Data ³ 17.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifico se o dia do vencimento podera ser alterado no     ³±±
±±³          ³ contrato da familia                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260Ven(cCodInt,cCodEmp,cContrato,cSubCon)
LOCAL lRet := .T.

BQC->(DbSetOrder(1))
If BQC->(MsSeek(xFilial("BQC")+cCodInt+cCodEmp+cContrato+cSubCon))
	If BQC->BQC_ALTVEN == "2"
		Help("",1,"PLSA260VEN")
		lRet := .F.
	Endif
Endif
Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260Ven ³ Autor ³ Tulio Cesar         ³ Data ³ 17.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifico se o dia do vencimento podera ser alterado no     ³±±
±±³          ³ contrato da familia                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLVldBF4Dat()
LOCAL lRet := (PLSVLDCOL({"BF4_CODPRO","BF4_VERSAO"}).AND.PL260ChkOpc(2).And.Iif(empty(M->BF4_CODPRO),.T.,PLSA260Val(M->BF4_CODPRO,"M->BF4_CODPRO")))
Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260Val ³ Autor ³ Michele Tatagiba    ³ Data ³ 18.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida   se o Grupo do Produto permite ser cadastrado      ³±±
±±³          ³ como um opcional                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260Val(cPlano,cCampo)
Local lRet		:= .T.
DEFAULT cCampo	:= READVAR()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
//³ Caso cliente não tenha intenção da validação de opcionias com subcontrato/grupo
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
if GetNewPar("MV_PLVCSGO",.F.)
	return(lRet)
endIf

cCodPla := BA3->BA3_CODPLA
If GetNewPar("MV_PLUSAIN",.F.)
	cCodPla := cPlano
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona no grupo/empresa...                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If BG9->(BG9_CODINT+BG9_CODIGO) <> M->BA3_CODINT+M->BA3_CODEMP
	BG9->(DbSetOrder(1))
	BG9->(MsSeek(xFilial("BG9")+M->BA3_CODINT+M->BA3_CODEMP))
Endif

BA1->(DBSetOrder(1))
BA3->(DBSetOrder(1))
BT3->(DBSetOrder(1))
BT6->(DBSetOrder(1))
BE5->(DBSetOrder(1))
BI3->(DBSetOrder(1))
BHS->(DBSetOrder(1))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar as informacoes do opcional no nivel do subcontrato caso for PJ  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If BA3->BA3_TIPOUS == '2'
	If BHS->(DbSeek(xFilial("BHS")+M->(BA3_CODINT+BA3_CODEMP+BA3_CONEMP+BA3_VERCON+BA3_SUBCON+BA3_VERSUB+BA3_CODPLA+BA3_VERSAO)+cPlano))
		If READVAR()=='M->BF1_CODPRO'
			lRet := PlsVldGd({"BF1_CODPRO"},.T.,oBrwOpc:aCols)
			M->BF1_TIPVIN:=BHS->BHS_TIPVIN
		ElseIf READVAR()=='M->BF4_CODPRO' .Or. READVAR() == 'M->BF4_DATBAS'

			nPos := oBrwUsr:OBROWSE:NAT

			IF lRet := PlsVldGd({"BF4_CODPRO", "BF4_MOTBLO"}, .T., oBrwOUsu:aCols)
				lRet := PLSPerm(oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_TIPUSU")],;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_GRAUPA")],;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_ESTCIV")],;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_SEXO")],;
					oBrwUsr,BA3->BA3_CODINT,cCodPla,;
					Iif (GetNewPar("MV_PLUSAIN",.F.), BHS->BHS_VERPLA,BA3->BA3_VERSAO),;
					Iif (!Empty(M->BF4_DATBAS),M->BF4_DATBAS, oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_DATINC")]),;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_DATNAS")],;
					BA3->BA3_CODEMP, BA3->BA3_CONEMP, BA3->BA3_VERCON, BA3->BA3_SUBCON, BA3->BA3_VERSUB)
			ENDIF
			If lRet
				BF1->(dbSetOrder(1))
				If BF1->(msSeek(xFilial("BF1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cPlano))
					M->BF4_TIPVIN := BF1->BF1_TIPVIN
				Else
					M->BF4_TIPVIN := BHS->BHS_TIPVIN
				EndIF
			EndIf
		EndIf
	Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar as informacoes do opcional no nivel do produto caso for PF      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Else
	If BT3->(DbSeek(xFilial("BT3")+M->(BA3_CODINT+BA3_CODPLA+BA3_VERSAO)+cPlano))
		If READVAR()=='M->BF1_CODPRO'
			lRet := PlsVldGd({"BF1_CODPRO"},.T.,oBrwOpc:aCols)
			M->BF1_TIPVIN := BT3->BT3_TIPVIN
		ElseIf READVAR()=='M->BF4_CODPRO' .Or. READVAR() == 'M->BF4_DATBAS'

			nPos := oBrwUsr:OBROWSE:NAT

			IF lRet := PlsVldGd({"BF4_CODPRO", "BF4_MOTBLO"}, .T., oBrwOUsu:aCols)
				lRet := PLSPerm(oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_TIPUSU")],;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_GRAUPA")],;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_ESTCIV")],;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_SEXO")],;
					oBrwUsr,BA3->BA3_CODINT,cCodPla,;
		    		Iif (GetNewPar("MV_PLUSAIN",.F.), BT3->BT3_VERPLA,BA3->BA3_VERSAO),;
		    		Iif (!Empty(M->BF4_DATBAS),M->BF4_DATBAS, oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_DATINC")]),;
					oBrwUsr:aCols[nPos,oBrwUsr:PLRETPOS("BA1_DATNAS")],;
					BA3->BA3_CODEMP, BA3->BA3_CONEMP, BA3->BA3_VERCON, BA3->BA3_SUBCON, BA3->BA3_VERSUB)

				M->BF4_TIPVIN := BT3->BT3_TIPVIN
			ENDIF
		EndIf
	Endif
Endif

If !lRet .AND. NOPCA==1
		ApMsgAlert(OemtoAnsi("Verifique as configurações destes cadastros!") ,;
		OemtoAnsi("O Opcional não está cadastrado para o Plano ou SubContrato
	Return(.F.)
Endif

If BG9->BG9_TIPO == "1"
	lRet := PLSAPPRDPq(NIL,NIL,NIL,M->BA3_CONEMP,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CODPLA,M->BA3_VERSAO,M->BA3_SUBCON,.T.,cCampo)
	If BI3->(MsSeek(xFilial("BI3")+M->BA3_CODINT+cPlano))
		If BT3->(MsSeek(xFilial("BT3")+M->(BA3_CODINT+BA3_CODPLA+BA3_VERSAO)+cPlano))
			If BT3->BT3_TIPVIN == "1" .Or. BT3->BT3_TIPVIN == "2"
				lRet := .T.
			Endif
		Else
			If BT6->(MsSeek(xFilial("BT6")+M->(BA3_CODINT+BA3_CODEMP+BA3_CONEMP+BA3_VERCON)+cPlano))
				If BE5->(MsSeek(xFilial("BE5")+BI3->BI3_GRUPO))
					If BE5->BE5_PEROPC == "1"
						lRet := .T.
					Endif
				Endif
			Endif
		Endif
	Endif
ElseIf BG9->BG9_TIPO == "2"
	lRet := PLSAPPRDPq(NIL,NIL,NIL,M->BA3_CONEMP,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CODPLA,M->BA3_VERSAO,M->BA3_SUBCON,.T.,cCampo)
Endif
If !lRet 
	ApMsgAlert(OemtoAnsi("Verifique as configurações destes cadastros!") ,OemtoAnsi("O Opcional não está cadastrado para o Plano ou SubContrato ")) // # 
	Return(.F.)
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260FPG ³ Autor ³ Tulio Cesar         ³ Data ³ 17.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica no cadastro do contrato, a Forma      de Cobranca ³±±
±±³          ³ definida no produto                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260FPG(cCodPla,cVersao,cCodInt,cCodEmp,cNumCon,cForPag,lHelp,nTipo,cVerCon,cSubCon,cVerSub,cCodPro,cVerPro)
LOCAL lRet
DEFAULT lHelp := .T.
DEFAULT nTipo := 1
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar a Forma de cobranca definida no produto ...               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if nTipo == 1
	BJ3->(DbSetOrder(1))
	lRet := BJ3->(MsSeek(xFilial("BJ3")+cCodInt+cCodPla+cVersao+cForPag))
Else
	BJ9->(DbSetOrder(1))
	lRet := BJ9->(MsSeek(xFilial("BJ9")+cCodInt+cCodPla+cVersao+cForPag))
Endif

If lRet
	Return(lRet)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar na forma de pagamento do grupo/empresa...                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if nTipo == 1
	BT9->(DbSetOrder(1))
	lRet := BT9->(MsSeek(xFilial("BT9")+cCodInt+cCodEmp+cNumCon+cVerCon+cSubCon+cVerSub+cCodPro+cVerPro+cForPag))
Else
	//BTK_FILIAL+BTK_CODIGO+BTK_NUMCON+BTK_VERCON+BTK_SUBCON+BTK_VERSUB+BTK_CODPRO+BTK_VERSAO+BTK_CODFOR
	BTK->(DbSetOrder(1))
	lRet := BTK->(MsSeek(xFilial("BTK")+cCodInt+cCodEmp+cNumCon+cVerCon+cSubCon+cVerSub+cCodPro+cVerPro+cForPag))
Endif

If ! lRet
	If lHelp
		Help("",1,"RECNO")
	Endif
Endif

Return(lRet)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSEndCob  ³ Autor ³ Michele Tatagiba    ³ Data ³ 17.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Preenche o endereco da familia, caso o endereco de cobranca³±±
±±³          ³ seja para o titular                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSEndCob(nOpc)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica qual o codigo utilizado para indicar o titular.Ex: T       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cTipUsu := SuperGetMv("MV_PLCDTIT")
LOCAL nI      := 0
LOCAL ba3Num  := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Analiso se ja existe algum dado na acols do usuario                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BA3_ENDCOB == "2" .And. Type("oBrwUsr") = "O"
	While nI <> Len(oBrwUsr:aCols)
		nI++
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifico se o Tipo do Usuario do a acols e o titular                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If AllTrim(oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_TIPUSU")]) == AllTrim(cTipUsu)
			SA1->(DBSetOrder(1))
			If SA1->(MsSeek(xFilial("SA1")+M->BA3_CODCLI+M->BA3_LOJA))

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Gravo na base o endereco do titular para a familia                  ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				M->BA3_CEP    := oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_CEPUSR")]
				M->BA3_END    := oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_ENDERE")]
				M->BA3_NUMERO := oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_NR_END")]
				M->BA3_COMPLE := oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_COMEND")]
				M->BA3_BAIRRO := oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_BAIRRO")]
				M->BA3_MUN    := oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_MUNICI")]
				M->BA3_ESTADO := oBrwUsr:aCols[nI,oBrwUsr:PLRETPOS("BA1_ESTADO")]
				Exit
			Endif
		Endif
	Enddo
Elseif M->BA3_ENDCOB == "5" .And. Type("oBrwUsr") = "O" .AND. BA1->( FieldPos("BA1_RESFAM") ) > 0 // Responsável Familia
					
	nLen := Len(oBrwUsr:Acols)
	nFdDtBlo := oBrwUsr:FieldPos("BA1_DATBLO")
	nFdResFam := oBrwUsr:FieldPos("BA1_RESFAM")
	nFdTipUsu := oBrwUsr:FieldPos("BA1_TIPUSU")
	nPosResp := 0
	
	For nI := 1 To nLen

		If (oBrwUsr:aCols[nI,nFdResFam] == '1' .AND. Empty(oBrwUsr:aCols[nI,nFdDtBlo])  ) .OR.;
			( Empty(oBrwUsr:aCols[nI,nFdResFam]) .AND. oBrwUsr:aCols[nI,nFdTipUsu] == AllTrim(cTipUsu) ) 

			nPosResp := nI
			
		EndIf

	Next
	
	// Atualiza o endereco do dependente utilizando o endereco do responsável.
	If nPosResp <> 0
		
		M->BA3_CEP := oBrwUsr:FieldGet("BA1_CEPUSR",nPosResp)
		M->BA3_END := oBrwUsr:FieldGet("BA1_ENDERE",nPosResp)
		M->BA3_NUMERO := oBrwUsr:FieldGet("BA1_NR_END",nPosResp)
		M->BA3_COMPLE := oBrwUsr:FieldGet("BA1_COMEND",nPosResp)
		M->BA3_BAIRRO := oBrwUsr:FieldGet("BA1_BAIRRO",nPosResp)
		M->BA3_CODMUN := oBrwUsr:FieldGet("BA1_CODMUN",nPosResp) //INCLUIDO POR PETERSON 27.08.07
		M->BA3_MUN := oBrwUsr:FieldGet("BA1_MUNICI",nPosResp)
		M->BA3_ESTADO := oBrwUsr:FieldGet("BA1_ESTADO",nPosResp)
	
	Endif
				
	
Elseif M->BA3_ENDCOB == "1"
	SA1->( dbSetorder(01) )
	If SA1->( msSeek(xFilial("SA1")+M->(BA3_CODCLI+BA3_LOJA)) )
		M->BA3_CEP 	:= SA1->A1_CEP
		M->BA3_END 	:= SA1->A1_END
		M->BA3_BAIRRO := SA1->A1_BAIRRO
		If AT( ",", SA1->A1_END)
			ba3Num := StrTokArr(SA1->A1_END, ",")
			
			If Len(ba3Num) > 1
				M->BA3_END := ba3Num[1]
				M->BA3_NUMERO := ba3Num[2]
			Else
				M->BA3_END := ba3Num[1]
				M->BA3_NUMERO := Space(TamSX3("BA3_NUMERO")[1])
			EndIf							
		Else
			M->BA3_NUMERO := Space(TamSX3("BA3_NUMERO")[1]) // Se não tiver numero deixa em branco	
		Endif
		M->BA3_COMPLE := SA1->A1_COMPLEM
		BID->( dbSetorder(02) )
		If BID->( msSeek(xFilial("BID")+Alltrim(Upper(SA1->A1_MUN))) )
			M->BA3_CODMUN := BID->BID_CODMUN 
		Endif
		M->BA3_MUN 	:= SA1->A1_MUN
		M->BA3_ESTADO	:= SA1->A1_EST
	Endif
Else
	M->BA3_CEP 		:= Criavar("BA3_CEP",.F.)
	M->BA3_END 		:= Criavar("BA3_END",.F.)
	M->BA3_BAIRRO 	:= Criavar("BA3_BAIRRO",.F.)
	M->BA3_NUMERO 	:= Criavar("BA3_NUMERO",.F.)
	M->BA3_COMPLE 	:= Criavar("BA3_COMPLE",.F.)
	M->BA3_CODMUN 	:= Criavar("BA3_CODMUN",.F.)
	M->BA3_MUN 		:= Criavar("BA3_MUN",.F.)
	M->BA3_ESTADO	:= Criavar("BA3_ESTADO",.F.)
Endif

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260Usr  ³ Autor ³ Michele Tatagiba    ³ Data ³ 18.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Calcula o proximo tipo de registro de cada usuario .       |±±
±±³          ³ Utilizado no gatilho do campo BA1_GRAUPA e BA1_TIPUSU      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Alteracoes desde sua construcao inicial.                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Data     ³ BOPS ³ Programador ³ Breve Descricao                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ 24.09.02 ³      ³ Tulio Cesar ³ Nao permitir duplicidade de TIPREG    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSTipReg(cGrauPa,cTipReg,cTipUsu,oBrwUsr, lConsiste)

LOCAL cSeqIni 	:= "00"
LOCAL cSeqFim 	:= "00"
LOCAL cSeq    	:= cTipReg
LOCAL lRet    	:= .T.
LOCAL lExitFor	:= .F.
LOCAL nInd    	:= 1
LOCAL aRetTpUsr := {}
LOCAL bBlock	:= {||cRetBlock := Iif(ExistBlock("PLSTPRG"),ExecBlock("PLSTPRG",.F.,.F.,{cSeq}),cSeq)}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Parametro que indica qual o modelo a ser utilizado pela Instituicao de saude  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cModelo := GetMv("MV_PLTITCD")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se a opcao nao for incluir, nao devo alterar o TipReg               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpcx <> K_Incluir
	If !Empty(M->BA1_DIGITO)
		cSeq := Eval(bBlock)
		Return({cSeq,lRet})
	Endif
Endif

If oBrwUsr == Nil
	cSeq := Eval(bBlock)
	Return({cSeq,lRet})
Endif

If cModelo == "1"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se o grau de parentesco pesquisado, possui sequencia inicial e final ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Empty(cGrauPa)
		cSeq := Eval(bBlock)
		Return({cSeq,lRet})
	Endif

	BT2->(DBSetOrder(1))
	lRet := BT2->(MsSeek(xFilial("BT2")+cGrauPa))
	If lRet
		cSeqIni := BT2->BT2_SEQDE
		cSeqFim := BT2->BT2_SEQATE
		cSeq    := cSeqIni

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pesquiso no aCols do usuario, algum usuario com o grau de parentesco que estou pesquisando³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nInd:=1 To Len(oBrwUsr:aCols)
			If ! oBrwUsr:aCols[nInd,Len(oBrwUsr:aHeader)+1]
				If cGrauPa == oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_GRAUPA")]
					If oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_TIPREG")] == cSeq
						cSeq := StrZero((Val(cSeq)+1),2)
					EndIf
					While .T.
						If Ascan(oBrwUsr:aCols,{ |x| x[oBrwUsr:PLRETPOS("BA1_TIPREG")] == cSeq }) > 0
							cSeq := StrZero((Val(cSeq)+1),2)
						Else
							lExitFor := .T.
							Exit
						Endif
					Enddo

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Mostro o assistente caso a quantidade de grau de parentesco ultrapasse a quantidade  |
					//³ permitida no cadastro                                                                |
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If cSeq > cSeqFim
						lRet := .T.
						If lConsiste
							lRet := .F.
							If Aviso(OemtoAnsi(STR0088),OemtoAnsi(STR0089),{OemtoAnsi(STR0085),OemtoAnsi(STR0086)}) == 1

								If !ParamBox({ {1,OemtoAnsi(STR0090),Space(02),'99','PL260VTP(oBrwUsr, mv_par01)','','',30,.T.}}, OemtoAnsi(STR0091),@aRetTpUsr ) //"Tipo de Registro"
									cSeq := Eval(bBlock)
									Return({cSeq,lRet})
								Endif
								lRet := .T.
								cSeq := aRetTpUsr[1]
							Endif
						Endif
						cSeq := Eval(bBlock)
						M->BA1_TIPREG := cSeq
						Return({cSeq,lRet})
					Endif
					If lExitFor
						Exit
					Endif
				Endif

			Endif
		Next
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se ja existe um tipreg igual ao que acabou de ser montado acima...   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet
		For nInd:=1 To Len(oBrwUsr:aCols)
			If cSeq == oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_TIPREG")] .And. ;
				( nInd <> oBrwUsr:Linha() .or. oBrwUsr:lInAddLine ) .And. ; //
				!Empty(oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_MATVID")])
				If lConsiste
					lRet := .F.
					If Aviso(OemtoAnsi(STR0088),OemtoAnsi(STR0092),{OemtoAnsi(STR0085),OemtoAnsi(STR0086)}) == 1
						If !ParamBox({ {1,OemtoAnsi(STR0090),Space(02),'99','PL260VTP(oBrwUsr, mv_par01)','','',30,.T.}}, OemtoAnsi(STR0091),@aRetTpUsr )
							cSeq := Eval(bBlock)
							Return({cSeq,lRet})
						Endif
						lRet := .T.
						cSeq := aRetTpUsr[1]
						M->BA1_TIPREG := cSeq
					Endif
				Endif
			Endif
		Next
	Endif

Else

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico as parametrizacoes para o cada tipo de usuario             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BF2->(DBSetOrder(1))
	lRet := BF2->(MsSeek(xFilial("BF2")))
	If lRet
		While !BF2->(EOF())

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifico se o tipo de usuario que procuro, possui uma sequencia inicial e final                  |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If AllTrim(cTipUsu) $ AllTrim(BF2->BF2_GRAUPA)
				cSeqIni := BF2->BF2_SEQDE
				cSeqFim := BF2->BF2_SEQATE
				cSeq    := cSeqIni

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Pesquiso no aCols do usuario, algum usuario com o tipo de usuario igual ao que estou pesquisando |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				For nInd := 1 To Len(oBrwUsr:aCols)
					If ! oBrwUsr:aCols[nInd,Len(oBrwUsr:aHeader)+1]
						If AllTrim(oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_TIPUSU")]) $ AllTrim(BF2->BF2_GRAUPA)
							cSeq := StrZero((Val(cSeq)+1),2)
						Elseif AllTrim(oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_TIPREG")]) $ Alltrim(cSeq)
							cSeq := StrZero((Val(cSeq)+1),2)
							nInd := 0
						Endif

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Mostro o assistente caso a quantidade de grau de parentesco ultrapasse a quantidade  |
						//³ permitida no cadastro                                                                |
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If cSeq > cSeqFim
							lRet := .F.
							Help("",1,"PLS260T2")
							cSeq := Eval(bBlock)
							Return({cSeq,lRet})
						Endif
					Endif
				Next
				If aScan(oBrwUsr:aCols,{|x| cSeq == x[oBrwUsr:PLRETPOS("BA1_TIPREG")]}) > 0
					cSeq := strzero(val(cSeq)+1,2)
					While  aScan(oBrwUsr:aCols,{|x| cSeq == x[oBrwUsr:PLRETPOS("BA1_TIPREG")]}) > 0
						cSeq := strzero(val(cSeq)+1,2)
					Enddo
				Endif
				Exit
			Endif
			BF2->(DBSkip())
		Enddo
	Endif
Endif
cSeq := Eval(bBlock)
If lRet
	M->BA1_TIPREG := cSeq
Endif

Return({cSeq,lRet})

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260Cha  ³ Autor ³ Michele Tatagiba    ³ Data ³ 19.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Chama a funcao PLSTIPREG no gatilho dos campos BA1_GRAUPA e|±±
±±³          ³ BA1_TIPUSU                                                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PLS260Cha(cTipo,cGrauPa,cTipReg,cTipUsu,oBrw)

LOCAL cRet
Local aArea := GetArea()
DEFAULT cGrauPa := M->BA1_GRAUPA
DEFAULT cTipReg := M->BA1_TIPREG
DEFAULT cTipUsu := M->BA1_TIPUSU
DEFAULT oBrw    := oBrwUsr

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Tipo = 1 -> Retorna o TipoReg do usuario                                             |
//³ Tipo = 2 -> Retorna True caso o Tipreg retorne correto                               |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cTipo == 1
	cRet := Eval( {|aEl| aEl[1]}, PLSTipReg(cGrauPa,cTipReg,cTipUsu,oBrw, .T.))
Else
	cRet := Eval( {|aEl| aEl[2]}, PLSTipReg(cGrauPa,cTipReg,cTipUsu,oBrw, .T.))
Endif
RestArea(aArea)

Return(cRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ ChangeBrw  ³ Autor ³ Eduardo Motta       ³ Data ³ 16.10.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza as GETDADOS de acordo com a localidade            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function ChangeBrw()

If Type('oBrwUsr') <> 'U'
	oBrwBUsu:ForceRefresh(oBrwUsr)
	oBrwGUsu:ForceRefresh(oBrwUsr)
	oBrwDoe:ForceRefresh(oBrwUsr)
	oBrwBDK:ForceRefresh(oBrwUsr)
	oBrwBHH:ForceRefresh(oBrwUsr)
	oBrwHOUsu:ForceRefresh(oBrwUsr)
	//oBrwOUsu:ForceRefresh(oBrwUsr)
	If lCriaBYW
		oBrwBYW:ForceRefresh(oBrwUsr)
	Endif
	oBrwBDK:oBrowse:oBrowse:Refresh()
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclusao do controle para tabela nova B1W							³
	//³ Alexander 01/06/2005												³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lCriaB1W
	   oBrwB1W:ForceRefresh(oBrwUsr)
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	//³ Proteção financeira
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
	If lCriaB1S
	   oBrwB1S:ForceRefresh(oBrwUsr)
	EndIf

	oBrwBCP:ForceRefresh(oBrwUsr)
Endif

Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLS260BLO1  ³ Autor ³ Michele Tatagiba    ³ Data ³ 17.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida inclusao de bloqueio/desbloqueio de um contrato     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260BLO1()

LOCAL nRecBA1 := BA1->(Recno())
LOCAL nOrdBA1 := BA1->(IndexOrd())
LOCAL lRet    := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao posso desbloquear um usuario que nao esta bloqueado             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BC3_TIPO == "1" .And. Empty(BA1->BA1_MOTBLO)
	// Esse usuario ja esta Bloqueado/Desbloqueado
	Help("",1,"PLSA260BLO")
	lRet := .F.
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao posso bloquear um usuario que ja esta bloqueado                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. M->BC3_TIPO == "0" .And. !Empty(BA1->BA1_MOTBLO)
	// Esse usuario ja esta Bloqueado/Desbloqueado
	Help("",1,"PLSA260BLO")
	lRet := .F.
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao posso desbloquear um usuario que foi bloqueado por usuario      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. M->BC3_TIPO == "1" .And. BA1->BA1_CONSID == "U"
	Help("",1,"PLSA260BLU")
	lRet := .F.
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se a data de bloqueio e menor do que a data de desbloqueio ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. M->BC3_TIPO == "1"
	If !Empty(BA1->BA1_DATBLO)
		If BA1->BA1_DATBLO > M->BC3_DATA
			//Existe um usuario bloqueado com uma data de bloqueio menor do que a desbloqueio
			Help("",1,"PLSA260BLD")
			lRet := .F.
		Endif
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura dados salvados...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BA1->(DbSetOrder(nOrdBA1))
BA1->(DbGoTo(nRecBA1))

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLS260BLO2  ³ Autor ³ Michele Tatagiba    ³ Data ³ 17.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida inclusao de bloqueio/desbloqueio de um usuario      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260BLO2()

LOCAL nRecBA1  := BA1->(Recno())
LOCAL nOrdBA1  := BA1->(IndexOrd())
LOCAL lRet     := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao posso desbloquear um usuario que nao esta bloqueado             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BCA_TIPO == "1" .And. Empty(BA1->BA1_MOTBLO)
	// Esse usuario ja esta Bloqueado/Desbloqueado
	Help("",1,"PLSA260BLO")
	lRet := .F.
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao posso bloquear um usuario que ja esta bloqueado                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. M->BCA_TIPO == "0" .And. !Empty(BA1->BA1_MOTBLO)
	// Esse usuario ja esta Bloqueado/Desbloqueado
	Help("",1,"PLSA260BLO")
	lRet := .F.
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao posso desbloquear um usuario que foi bloqueado por familia      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. M->BCA_TIPO == "1" .And. BA1->BA1_CONSID == "F"
	Help("",1,"PLSA260BLC")
	lRet := .F.
Endif

If lRet .And. M->BCA_TIPO == "1"
	If BA1->BA1_DATBLO > M->BCA_DATA
		//A data de bloqueio e menor do que a desbloqueio
		Help("",1,"PLSA260BLD")
		lRet := .F.
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura dados salvados...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BA1->(DbSetOrder(nOrdBA1))
BA1->(DbGoTo(nRecBA1))

Return(lRet)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLS260GRA   ³ Autor ³ Michele Tatagiba    ³ Data ³ 17.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida datas na Gratuidade da Familia                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260GRA(dDatLan,cAnoIni,cAnoFim,cMesIni,cMesFim)

LOCAL cMes := StrZero(Month(dDatLan),2)
LOCAL cAno := StrZero(Year(dDatLan),4)
LOCAL lRet := .T.

If cAnoIni < cAno
	MsgStop(OemtoAnsi(STR0230))//"Ano inicial não pode ser inferior ao ano da data de lançamento."
	lRet := .F.

Elseif cAnoIni >= cAno .And. cAnoIni <= cAnoFim
	If cAno == cAnoIni .And. cMes > cMesIni
		MsgStop(OemtoAnsi(STR0231))//"Mês e ano inicial nãoo podem ser inferior ao mês e ano da data de lançamento."
		lRet := .F.
	Endif
	If cAnoIni == cAnoFim .And. cMesIni > cMesFim
		MsgStop(OemtoAnsi(STR0232))//"O intervalo entre as datas é invalido! O mês e ano final não podem ser inferior ao mês e ano inicial."
		lRet := .F.
	Endif
Else
	MsgStop(OemtoAnsi(STR0233))//"Ano final não pode ser inferior ao ano inicial."
	lRet := .F.
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLS260VLG   ³ Autor ³ Michele Tatagiba    ³ Data ³ 17.01.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida se ja existe alguma gratuidade cadastrada           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260VLG()

LOCAL lRet := .T.
LOCAL nInd := 1

For nInd := 1 To Len(oBrwGra:aCols)
	If oBrwGra:aCols[nInd,oBrwGra:PLRETPOS("BH5_CODGRA")] == M->BH5_CODGRA
		lRet := .F.
		Exit
	Endif
Next

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260EMP  ³ Autor ³ Michele Tatagiba   ³ Data ³ 01.02.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Relaciona todos os contratos da empresa                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260EMP(cCodInt,cCodEmp)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL oDlgPesCon
//LOCAL oSayCon
LOCAL nOpca      := 0
LOCAL aBrowCon   := {}
LOCAL aVetPad    := { {"","","","","","","","","",""} }
LOCAL oBrowCon
LOCAL bRefresh   := { || PLS260PECO(aBrowCon,aVetPad,oBrowCon,cCodInt,cCodEmp), If( Empty(aBrowCon[1,1]),.F.,.T. )  }
LOCAL bOK        := { || DBSelectArea("BT5"),nLin := oBrowCon:nAt, nOpca := 1,oDlgPesCon:End() }
LOCAL bCanc      := { || DBSelectArea("BT5"),nOpca := 3,oDlgPesCon:End() }
LOCAL nReg
LOCAL nLin       := 1

aBrowCon         := aClone(aVetPad)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dialogo...                                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFINE MSDIALOG oDlgPesCon TITLE OemtoAnsi(STR0093) FROM 008.2,000 TO 025,ndColFin OF GetWndDefault() //"Pesquisa de Contratos"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta Browse...                                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oBrowCon := TcBrowse():New( 020, 008, 378, 093,,,, oDlgPesCon,,,,,,,,,,,, .F.,, .T.,, .F., )

oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0094),nil,; //"Num.Contrato"
nil,nil,nil,nil,045,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[1]:BDATA     := { || aBrowCon[oBrowCon:nAt,1] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0095),nil,; //"Data Contrato"
nil,nil,nil,nil,045,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[2]:BDATA     := { || aBrowCon[oBrowCon:nAt,2] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0096),nil,; //"Versao Contrato"
nil,nil,nil,nil,045,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[3]:BDATA     := { || aBrowCon[oBrowCon:nAt,3] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0097),nil,; //"Data Inicial Versao"
nil,nil,nil,nil,045,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[4]:BDATA     := { || aBrowCon[oBrowCon:nAt,4] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0098),nil,; //"Data Final da Versao"
nil,nil,nil,nil,045,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[5]:BDATA     := { || aBrowCon[oBrowCon:nAt,5] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0099),nil,;
nil,nil,nil,nil,040,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[6]:BDATA     := { || aBrowCon[oBrowCon:nAt,6] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0100),nil,; //"Nome Cliente"
nil,nil,nil,nil,090,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[7]:BDATA     := { || aBrowCon[oBrowCon:nAt,7] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0101),nil,; //"Cobranca"
nil,nil,nil,nil,060,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[8]:BDATA     := { || aBrowCon[oBrowCon:nAt,8] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0102),nil,; //"Tipo Contrato"
nil,nil,nil,nil,040,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[9]:BDATA     := { || aBrowCon[oBrowCon:nAt,9] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0103),nil,; //"End.Cobranca"
nil,nil,nil,nil,070,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[10]:BDATA     := { || aBrowCon[oBrowCon:nAt,10] }
oBrowCon:AddColumn(TcColumn():New(OemtoAnsi(STR0104),nil,; //"Vencimento"
nil,nil,nil,nil,070,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowCon:ACOLUMNS[11]:BDATA     := { || aBrowCon[oBrowCon:nAt,11] }

//-------------------------------------------------------------------
//  LGPD
//-------------------------------------------------------------------
	if objCENFUNLGP:isLGPDAt()
		aCampos := {"BT5_NUMCON",;
					"BT5_DATCON",;
					"BT5_VERSAO",;
					"BQB_DATINI",;
					"BQB_DATFIN",;
					"BT5_CODCLI+BT5_LOJA",;
					"SA1_NOME",;
					"BT5_COBNIV",;
					"BT5_TIPCON",;
					"BT5_VENCTO",;
					"BT5REG"}
		aBls := objCENFUNLGP:getTcBrw(aCampos)

		oBrowCon:aObfuscatedCols := aBls
	endif

oBrowCon:SetArray(aBrowCon)
oBrowCon:BLDBLCLICK := bOK
Eval(bRefresh)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa o Dialogo...                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ACTIVATE MSDIALOG oDlgPesCon ON INIT Eval({ || EnChoiceBar(oDlgPesCon,bOK,bCanc,.F.) })

If nOpca == K_OK
	If !Empty(aBrowCon[nLin,1])
		BT5->(DbGoTo(aBrowCon[nLin,11]))
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Retorno da Funcao...                                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DBSelectArea("BT5")
Return({nOpca==K_OK,BT5->BT5_NUMCON,BT5->BT5_VERSAO,'',BT5->BT5_COBNIV,BT5->BT5_CODCLI,BT5->BT5_LOJA})
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260PECO ³ Autor ³ Michele Tatagiba   ³ Data ³ 06.02.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Pesquisa contratos no Grupo de Beneficiarios...           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PLS260PECO(aBrowCon,aVetPad,oBrowCon,cCodInt,cCodEmp)
Local aArea   := GetArea()
LOCAL cSQL    := ""
LOCAL cRetBT5
LOCAL cRetBQB

cRetBT5 := BT5->(RetSQLName("BT5"))
cRetBQB := BQB->(RetSQLName("BQB"))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Limpa resultado...                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aBrowCon := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Efetua busca...                                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cSQL := "SELECT BT5_NUMCON, BT5_COBNIV, BT5_DATCON, BT5_CODCLI, BT5_LOJA, BT5_TIPCON, BT5_VENCTO, "
cSQL += "BT5_CODINT,BT5_VERSAO,BT5_CODIGO,BQB_DATINI,BQB_DATFIN,"+cRetBT5+".R_E_C_N_O_ AS BT5REG FROM "
cSQL += cRetBT5+" , "+cRetBQB
cSQL += " WHERE "

cSQL += "BT5_FILIAL = '"+xFilial("BT5")+"' AND "
cSQL += "BT5_CODINT = '"+cCodInt+"' AND BT5_CODIGO = '"+cCodEmp+"' AND BQB_NUMCON+BQB_VERSAO = BT5_NUMCON+BT5_VERSAO AND "
cSQL += "BQB_CODIGO = '"+cCodInt+cCodEmp+"' AND "
cSQL += cRetBT5+".D_E_L_E_T_ = ''  AND "+cRetBQB+".D_E_L_E_T_ = '' "

cSQL += "ORDER BY BT5_FILIAL,BT5_CODINT,BT5_CODIGO,BT5_NUMCON,BT5_VERSAO"

PLSQuery(cSQL,"TrbPes")

If TrbPes->(Eof())
    aadd(aBrowCon,{"",ctod(""),"",ctod(""),ctod(""),"",;
	               "","","",ctod(""),;
      	           0})
Endif
TrbPes->(DbGoTop())
While ! TrbPes->(Eof())

	SA1->(DbSetOrder(1))
	SA1->(MsSeek(xFilial("BT5")+TrbPes->(BT5_CODCLI+BT5_LOJA)))

	TrbPes->(aadd(aBrowCon,{BT5_NUMCON,BT5_DATCON,BT5_VERSAO,BQB_DATINI,BQB_DATFIN,BT5_CODCLI+"-"+BT5_LOJA,;
	SA1->A1_NOME,X3COMBO("BT5_COBNIV",BT5_COBNIV),BT5_TIPCON,BT5_VENCTO,;
	BT5REG}))
	TrbPes->(DbSkip())
Enddo

TrbPes->(DbCloseArea())
RestArea(aArea)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Testa resultado da pesquisa...                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aBrowCon) == 0
	aBrowCon := aClone(aVetPad)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza browse...                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oBrowCon:SetArray(aBrowCon)
oBrowCon:Refresh()
oBrowCon:SetFocus()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina...                                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSPESPROD ³ Autor ³ Michele Tatagiba   ³ Data ³ 26.03.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄ1ÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Pesquisa generica de Produtos Opcionais  ...              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Tulio Cesar ³15.04.03³ NC   ³  Acerto NC para casos de grp empresa PF ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSPESPROD(cNumCon,cCodInt,cCodEmp,cCodPla,cVersao,cSubCon)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cChave     := Space(40)
LOCAL oDlgPesPro
LOCAL oTipoPes
LOCAL oSayPro
LOCAL nOpca      := 0
LOCAL aBrowPro   := {}
LOCAL aVetPad    := { {"",""} }
LOCAL oBrowPro
LOCAL bRefresh   := { || PLSAPPRDPq(aBrowPro,aVetPad,oBrowPro,cNumCon,cCodInt,cCodEmp,cCodPla,cVersao,cSubCon), If( Empty(aBrowPro[1,1]),.F.,.T. ) }
LOCAL bOK        := { || nLin := oBrowPro:nAt, If(Empty(aBrowPro[1,1]),nOpca := 3,nOpca := 1),oDlgPesPro:End() }
LOCAL bCanc      := { || nOpca := 3,oDlgPesPro:End() }
LOCAL nReg
LOCAL oGetChave
LOCAL nLin       := 1
LOCAL cCadastAux := cCadastro

DEFAULT cNumCon  := Space(12)
DEFAULT cCodInt  := Space(04)
DEFAULT cCodEmp  := Space(04)
DEFAULT cCodPla  := Space(04)
DEFAULT cVersao  := Space(03)

aBrowPro         := aClone(aVetPad)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dialogo...                                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DEFINE MSDIALOG oDlgPesPro TITLE OemtoAnsi(STR0105) FROM 008.2,000 TO 025,ndColFin OF GetWndDefault() //"Pesquisa de Produtos Opcionais"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta Browse...                                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oBrowPro := TcBrowse():New( 033, 008, 378, 093,,,, oDlgPesPro,,,,,,,,,,,, .F.,, .T.,, .F., )

oBrowPro:AddColumn(TcColumn():New(OemtoAnsi(STR0106),nil,; //"Codigo"
nil,nil,nil,nil,040,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowPro:ACOLUMNS[1]:BDATA     := { || aBrowPro[oBrowPro:nAt,1] }
oBrowPro:AddColumn(TcColumn():New(Oemtoansi(STR0107),nil,; //"Nome"
nil,nil,nil,nil,120,.F.,.F.,nil,nil,nil,.F.,nil))
oBrowPro:ACOLUMNS[2]:BDATA     := { || aBrowPro[oBrowPro:nAt,2] }

//-------------------------------------------------------------------
//  LGPD
//-------------------------------------------------------------------
	if objCENFUNLGP:isLGPDAt()
		aCampos := {"BT3_CODPLA+BHS_CODPLA","BI3_DESCRI"}
		aBls := objCENFUNLGP:getTcBrw(aCampos)

		oBrowPro:aObfuscatedCols := aBls
	endif

oBrowPro:SetArray(aBrowPro)
oBrowPro:BLDBLCLICK := bOK
Eval(bRefresh)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa o Dialogo...                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cCadastro := "" // zerado a variável global porque pediram para não retornar o valor do título desse DIALOG pois vinha com título diferente.
ACTIVATE MSDIALOG oDlgPesPro ON INIT Eval({ || EnChoiceBar(oDlgPesPro,bOK,bCanc,.F.) })
cCadastro := cCadastAux

If nOpca == K_OK
	If !Empty(aBrowPro[1,1])
		BI3->(DBSetOrder(1))
		BI3->(MsSeek(xFilial("BI3")+cCodInt+aBrowPro[nLin,1]))
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Retorno da Funcao...                                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return(nOpca==K_OK)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSAPPRDPq ³ Autor ³ Michele Tatagiba   ³ Data ³ 26.03.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Pesquisa os Opcionais na base de dados ...                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Tulio Cesar ³06032003³ melho³  melhoria/otimizacao                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PLSAPPRDPq(aBrowPro,aVetPad,oBrowPro,cNumCon,cCodInt,cCodEmp,cCodPla,cVersao,cSubCon,lValid,cCampo)
Local aArea    := GetArea()
LOCAL cSQL
LOCAL dDt
LOCAL aOpcoes  	:= {}
LOCAL cRetBI3  	:= BI3->(RetSQLName("BI3"))
LOCAL cRetBHS  	:= BHS->(RetSQLName("BHS"))
LOCAL cRetBT3  	:= BT3->(RetSQLName("BT3"))
LOCAL cRetBE5  	:= BG9->(RetSQLName("BE5"))
LOCAL lRet 	   	:= .F.

									
DEFAULT lValid 	:= .F.
DEFAULT cCampo 	:= READVAR()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o usuario tem um plano especifico                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("M->BF4_CODPRO") <> 'U' .And. BG9->BG9_TIPO == "1" .And. !Empty(oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:PlRetPos("BA1_CODPLA")])
    cCodPla := oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:PlRetPos("BA1_CODPLA")]
    cVersao := oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:PlRetPos("BA1_VERSAO")]
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona no grupo/empresa...                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If BG9->(BG9_CODINT+BG9_CODIGO) <> cCodInt+cCodEmp
	BG9->(DbSetOrder(1))
	BG9->(MsSeek(xFilial("BG9")+cCodInt+cCodEmp))
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Limpa resultado...                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lValid
   aBrowPro := {}
EndIf

If BG9->BG9_TIPO == "1"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz uma pesquisa pelos produtos vinculados ao produto do contrato        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSQL := "SELECT DISTINCT BT3_FILIAL, BT3_CODIGO, BT3_CODPLA "
	cSQL += "  FROM "+cRetBT3
	cSQL += " WHERE BT3_FILIAL = '"+xFilial("BT3")+"'"
	cSQL += "   AND "+cRetBT3+".D_E_L_E_T_ = '' "
	cSQL += "   AND BT3_CODIGO = '"+cCodInt+cCodPla+"'"


	cSQL += "   AND BT3_VERSAO = '"+cVersao+"'"
	cSQL += "   AND BT3_CODPLA IN (SELECT BI3_CODIGO "
	cSQL +=                       "  FROM "+cRetBI3+","+cRetBE5
    cSQL +=                       " WHERE BI3_FILIAL = '"+xFilial("BI3")+"'"
    cSQL +=                       "   AND BE5_FILIAL = '"+xFilial("BE5")+"'"
    cSQL +=                       "   AND "+cRetBI3+".D_E_L_E_T_ = ''"
    cSQL +=                       "   AND "+cRetBE5+".D_E_L_E_T_ = ''"
    cSQL +=                       "   AND BE5_CODGRU = BI3_GRUPO "
    cSQL +=                       "   AND (BE5_PEROPC = '1' OR BE5_PERAGR = '1')"
    cSQL +=                       "   AND BI3_STATUS <> '2' ) "
    cSQL += " ORDER BY BT3_FILIAL, BT3_CODIGO, BT3_CODPLA "

    cSQL := ChangeQuery(cSQL)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cSQL),"TrbPes",.T.,.T.)

	TrbPes->(DbGoTop())
	While ! TrbPes->(Eof())
		If !lValid
		   If aScan(aBrowPro,{ |x| x[1] == TrbPes->BT3_CODIGO }) == 0
		     	TrbPes->(aadd(aBrowPro,{BT3_CODPLA,;
		    	Posicione("BI3",1,xFilial("BI3")+cCodInt+BT3_CODPLA,"BI3_DESCRI")}))
		   Endif
		Else
           If cCampo $ "M->BF1_CODPRO" .And. M->BF1_CODPRO == TrbPes->BT3_CODPLA
		      lRet := .T.
		   ElseIf cCampo $ "M->BF4_CODPRO" .And. M->BF4_CODPRO == TrbPes->BT3_CODPLA
		      lRet := .T.
		   EndIf
		EndIf
		TrbPes->(DbSkip())
	Enddo

	TrbPes->(DbCloseArea())
	RestArea(aArea)
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz uma pesquisa agora para os produtos opcionais do Grupo/Empresa       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSQL := "SELECT BI3_DESCRI, BHS_CODINT, BHS_CODIGO, BHS_NUMCON, BHS_CODPLA, BE5_PEROPC, BE5_CODGRU, "
	cSql += "       BI3_GRUPO,  BI3_CODINT  "
	cSQL += "  FROM "+cRetBHS+","+cRetBE5+","+cRetBI3
	cSQL += " WHERE BHS_FILIAL = '"+xFilial("BHS")+"'"
	cSQL += "   AND "+cRetBHS+".D_E_L_E_T_ = ' '"
	cSQL += "   AND BHS_CODINT = '"+cCodInt+"'"
	cSQL += "   AND BHS_CODIGO = '"+cCodEmp+"'"
	cSQL += "   AND BHS_NUMCON = '"+cNumCon+"'"
	cSQL += "   AND BHS_SUBCON = '"+cSubCon+"'"
	cSQL += "   AND BHS_CODPRO = '"+cCodPla+"'"
	cSQL += "   AND BE5_CODGRU = BI3_GRUPO "
	cSQL += "   AND BI3_CODINT = '"+cCodInt+"'"
	cSQL += "   AND BE5_PEROPC = '1' "
	cSQL += "   AND BI3_CODIGO = BHS_CODPLA "


	cSQL += " ORDER BY BHS_FILIAL, BHS_CODINT, BHS_CODPRO"

	PLSQuery(cSQL,"TrbPes")

	TrbPes->(DbGoTop())
	While ! TrbPes->(Eof())
		If !lValid
		   If aScan(aBrowPro,{ |x| x[1] == TrbPes->BHS_CODPLA }) == 0
		      TrbPes->(aadd(aBrowPro,{BHS_CODPLA,;
			  TrbPes->BI3_DESCRI}))
		   Endif
		Else
		   If cCampo $ "M->BF1_CODPRO" .And. M->BF1_CODPRO == TrbPes->BHS_CODPLA
		      lRet := .T.
		   ElseIf cCampo $ "M->BF4_CODPRO" .And. M->BF4_CODPRO == TrbPes->BHS_CODPLA
		      lRet := .T.
		   EndIf
		Endif
		TrbPes->(DbSkip())
	Enddo

	TrbPes->(DbCloseArea())
	RestArea(aArea)
Endif

If !lValid
   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
   //³ Testa resultado da pesquisa...                                           ³
   //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
   If Len(aBrowPro) == 0
      aBrowPro := aClone(aVetPad)
   Endif
   //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
   //³ Atualiza browse...                                                       ³
   //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
   oBrowPro:SetArray(aBrowPro)
   oBrowPro:Refresh()
   oBrowPro:SetFocus()
Else
   Return(lRet)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina...                                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260CONT ³ Autor ³ Michele Tatagiba   ³ Data ³ 06.02.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida qual o numero do contrato a ser utilizado ...      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260CONT()

LOCAL lRet    := .T.

BG9->(DBSetOrder(1))
BG9->(MsSeek(xFilial("BG9")+M->BA3_CODINT+M->BA3_CODEMP))

If BG9->BG9_TIPO == "2"
	lRet := PLSA260DAT(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_DATBAS,M->BA3_CONEMP+M->BA3_VERCON,M->BA3_VERCON)
Else
	lRet := PLSA260DAT(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_DATBAS,AllTrim(M->BA3_NUMCON))
Endif

DBSelectArea("BA3")
Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260COFP ³ Autor ³ Michele Tatagiba   ³ Data ³ 06.02.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida no XB a consulta B43 . Trata o num. contrato ...   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260COFP(lHelp,cCodFor,nTipo)

LOCAL lRet    := .T.
DEFAULT lHelp := .T.
DEFAULT cCodFor := M->BA3_FORPAG
DEFAULT nTipo   := 1

BG9->(DBSetOrder(1))
BG9->(MsSeek(xFilial("BG9")+M->BA3_CODINT+M->BA3_CODEMP))

If BG9->BG9_TIPO == "2"
	lRet := PLSA260FPG(M->BA3_CODPLA,M->BA3_VERSAO,M->BA3_CODINT,M->BA3_CODEMP,M->BA3_CONEMP,cCodFor,lHelp,nTipo,M->BA3_VERCON,M->BA3_SUBCON,M->BA3_VERSUB,M->BA3_CODPLA,M->BA3_VERSAO)
Else
	lRet := PLSA260FPG(M->BA3_CODPLA,M->BA3_VERSAO,M->BA3_CODINT,M->BA3_CODEMP,AllTrim(M->BA3_NUMCON),cCodFor,lHelp,nTipo,M->BA3_VERCON,M->BA3_SUBCON,M->BA3_VERSUB,M->BA3_CODPLA,M->BA3_VERSAO)
Endif

DBSelectArea("BJ1")
Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260EXCºAutor  ³Geraldo Felix Juniorº Data ³  01/16/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida a exclusao da familia.                               º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PLSA260Exc(cCodInt,cCodEmp,cMatric,lHelp,lUsuario,cTipReg,cTipUsu,cMotBlo)
LOCAL lRet := .T.
LOCAL cTitular 	:= SuperGetMv("MV_PLCDTIT")
DEFAULT lUsuario := .F.
DEFAULT cTipReg	 := ''
DEFAULT cTipUsu	 := ''
DEFAULT cMotBlo	 := ''

If !lUsuario
	//Valida se usuario tem movimentacao nas contas medicas
	BD5->(DbSetOrder(5))
	lRet := !BD5->(MsSeek(xFilial("BD5")+cCodInt+cCodEmp+cMatric))
	If ! lRet .And. lHelp
		MsgAlert(OemtoAnsi(STR0108)) //"Nao e possivel excluir a familia, pois ela possui movimentacao no contas medicas (BD5) !"
		Return(lRet)
	Endif

	//Valida se usuario tem movimentacao nos atendimentos
	BE4->(DbSetOrder(4))
	lRet := !BE4->(MsSeek(xFilial("BE4")+cCodInt+cCodEmp+cMatric))
	If ! lRet .And. lHelp
		MsgAlert(OemtoAnsi(STR0109)) //"Nao e possivel excluir a familia, pois ela possui movimentacao de atendimentos (BE4) !"
		Return(lRet)
	Endif

	// Verifica se usuario tem movimentacao no financeiro / BM1
	BM1->(DbSetOrder(1))
	lRet := !BM1->(MsSeek(xFilial("BM1")+cCodInt+cCodEmp+cMatric))
	If ! lRet .And. lHelp
		MsgAlert(OemtoAnsi(STR0110)) //"Nao e possivel excluir a familia, pois ela possui movimentacao financeira (BM1) !"
		Return(lRet)
	Endif

	// Verifica se usuario tem movimentacao no financeiro / SA1
	SE1->(DbSetOrder(14))
	lRet := !SE1->(MsSeek(xFilial("SE1")+cCodInt+cCodEmp+cMatric))
	If ! lRet .And. lHelp
		MsgAlert(OemtoAnsi(STR0110)) //"Nao e possivel excluir a familia, pois ela possui movimentacao financeira (SE1) !"
		Return(lRet)
	Endif
Else
	// Nao pode ser o titular.
	If cTipUsu == cTitular
		MsgAlert(OemtoAnsi(STR0234))//"Nao e possivel excluir o titular!"
		Return(.F.)
	Endif

	// Nao pode estar bloqueado.
	If !Empty(cMotBlo)
		MsgAlert(OemtoAnsi(STR0235))//"Nao e possivel excluir o usuario, pois ele encontra-se bloqueado!"
		Return(.F.)
	Endif

	// Valida se usuario tem movimentacao nas contas medicas
	dbSelectArea("BD5")
	lRet := !(BD5->(MsSeek(xFilial("BD5")+cCodInt+cCodEmp+cMatric+cTipReg)))
	If ! lRet .And. lHelp
		MsgAlert(OemtoAnsi(STR0108)) //"Nao e possivel excluir o usuario, pois ele possui movimentacao no contas medicas (BD5) !"
		Return(lRet)
	Endif

	// Valida se usuario tem movimentacao nos atendimentos
	BE4->(DbSetOrder(4))
	lRet := !BE4->(MsSeek(xFilial("BE4")+cCodInt+cCodEmp+cMatric+cTipReg))
	If ! lRet .And. lHelp
		MsgAlert(OemtoAnsi(STR0109)) //"Nao e possivel excluir o usuario, pois ele possui movimentacao de atendimentos (BE4) !"
		Return(lRet)
	Endif

	// Verifica se usuario tem movimentacao no financeiro / BM1
	BM1->(DbSetOrder(5))
	lRet := !BM1->(MsSeek(xFilial("BM1")+cCodInt+cCodEmp+cMatric+cTipReg))
	If ! lRet .And. lHelp
		MsgAlert(OemtoAnsi(STR0110)) //"Nao e possivel excluir o usuario, pois ele possui movimentacao financeira (BM1) !"
		Return(lRet)
	Endif

Endif

Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  11/21/06   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSA260BFA()

LOCAL lRet := .F.

If Empty(oBrwOpc:aCols[oBrwOpc:Linha(),oBrwOpc:PlRetPos("BF1_MOTBLO")])
	If BG1->BG1_TIPBLO == "0"
		lRet := .T.
	Endif
Else
	If BG1->BG1_TIPBLO == "1"
		lRet := .T.
	Endif
Endif


Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Objeto     ³ PLSA260BFB ³ Autor ³   ³ Data ³			 		     	   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descri??o  ³Função utilizada na consulta padrão do campo BF4_MOTBLO		   ³±±
			   para retornar os motivos de bloqueio e desbloqueio dos opcionais³±±
				no cadastro de beneficiários								   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260BFB()

LOCAL  lRet     := .F.
LOCAL  cTipReg  := NIL
STATIC __nLinha := 0

//Vamos zerar a variavel pois ao entrar em um Beneficiario com o opcional desbloqueado a variavel ficava na memoria
//e depois ao entrar em um opcional bloqueado, o F3 da lista de desbloqueio nao atualizava com as opcoes corretas.
__lRetBlq := nil

//inclusão de nova linha retorna os motivos de bloqueio
If oBrwOUsu:nOpcx == 3 .OR. oBrwOUsu:nOpcx == 4 .AND. EMPTY(oBrwOUsu:aCols[oBrwOUsu:OBROWSE:nAt][oBrwOUsu:PLRETPOS("BF4_TIPBLO")])
	If BG3->BG3_TIPBLO == "0"
		lRet := .T.
	Endif
Else

	//após a inclusão da nova linha no grid,o nOpcx fica com o mesmo valor de linhas que foram gravadas.
	//quando clicar na consulta padrão será gravado a posição da linha que está sendo chamada a consulta
	//padrão, se fechar a tela do opcional e clicar na mesma linha e chamar novamente a consulta padrão,
	//o __nLinha já estará preenchido e não precisará fazer novamente o seek na tabela.

	If __nLinha != oBrwOUsu:OBROWSE:nAt
		__nLinha  := oBrwOUsu:OBROWSE:nAt
		__lRetBlq := NIL
	EndIf

	//se a váriavel __lRetBlq for nula, o sistema verica se as informações da linha que esta chamando a
	//consulta padrão já foi gravada na base, desta forma ira controlar o retorno da consulta padrão para
	//trazer o motivos de desbloqueio caso exista na base.

	If __lRetBlq == NIL

		cTipReg := oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_TIPREG")]

		BF4->(dbSetOrder(1))
		If BF4->(MsSeek(xFilial("BF4") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_MATRIC + cTipReg + M->BF4_CODPRO))

			If EMPTY(BF4->BF4_DATBLO)

				__lRetBlq := .T.
			Else

				__lRetBlq := .F.
			EndIf
		Else

			__lRetBlq := .T.
		EndIf
	EndIf

	If BG3->BG3_TIPBLO == "0" .AND. __lRetBlq
		lRet := .T.

	ElseIf BG3->BG3_TIPBLO == "1" .AND. !__lRetBlq
			lRet := .T.
	Endif
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260JURI ³ Autor ³ Michele Tatagiba   ³ Data ³ 30.04.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica se a empresa e pessoa juridica ...               ³±±
±±³Descricao ³ Agora soh sera utilizada como filtro nas consultas SXB    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260JURI(cCodPro,cVersao,lPesquisa,cCodInt,cCodEmp,cConEmp,cVerCon,cSubCon,cVerSub)

LOCAL lRet 		:= .F.
LOCAL lTipDef 	:= !(Type('l260Mov') == 'U') .OR. Funname() =="PLSA124"

DEFAULT cCodInt := PlsIntPad()
DEFAULT cCodEmp := Iif(lTipDef, M->BA3_CODEMP, BA1->BA1_CODEMP)
DEFAULT cConEmp := Iif(lTipDef, M->BA3_CONEMP, BA1->BA1_CONEMP)
DEFAULT cVerCon := Iif(lTipDef, M->BA3_VERCON, BA1->BA1_VERCON)
DEFAULT cSubCon := Iif(lTipDef, M->BA3_SUBCON, BA1->BA1_SUBCON)
DEFAULT cVerSub := Iif(lTipDef, M->BA3_VERSUB, BA1->BA1_VERSUB)

BG9->(DBSetOrder(1))
BG9->(MsSeek(xFilial("BG9")+cCodInt+cCodEmp))

If BG9->BG9_TIPO == "2"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se o produto e permitido para pessoa juridica                     |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lPesquisa
		BI3->(DBSetOrder(1))
		BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPro+cVersao))
	Endif

	BE5->(DbSetOrder(1))
	If BE5->(MsSeek(xFilial("BE5")+BI3->BI3_GRUPO)) .And. BE5->BE5_TIPO == "1"
		BT6->(DbSetOrder(1))
		If BT6->(MsSeek(xFilial("BT6")+cCodInt+cCodEmp+cConEmp+cVerCon+cSubCon+;
			cVerSub+cCodPro+cVersao))
			lRet := .T.
		Endif
	Else
		lRet := .F.
	Endif
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se o produto e permitido para pessoa fisica                       |
	//ÀÄÄÄ??ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lPesquisa
		BI3->(DBSetOrder(1))
		BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPro+cVersao))
	Endif
	If (BI3->BI3_TIPO == "1" .Or. BI3->BI3_TIPO == "3") .and. BI3->BI3_STATUS <> '2' .and. BI3->BI3_GRUPO == '001'
		lRet := .T.
	Endif
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260PER ³ Autor ³ Michele Tatagiba   ³ Data ³ 10.05.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica se o Plano e anterior a lei para a digitacao da  ³±±
±±³          ³ abrangencia.                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260PER

If BI3->BI3_APOSRG == "1"
	lPermAbr := .F.
Else
	lPermAbr := .T.
Endif

Return(BI3->BI3_ABRANG)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260OP2 ³ Autor ³ Tulio Cesar        ³ Data ³ 13.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Monta Browses das operadoras....                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260Op2(lAutoma)
PRIVATE aRotina  :=    { { STRPL01         	, 'AxPesqui'   , 0 , K_Pesquisar  },;
						{ OemtoAnsi(STR0001), 'PL010MOV'    , 0 , K_Visualizar },;
						{ OemtoAnsi(STR0113), 'PLSA260EMP' , 0 , K_Incluir    } } //"Empresas"
PRIVATE cCadastro 	:= OemtoAnsi(STR0112) //"Operadora de Saude"
DEFAULT lAutoma := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Chama funcao de Browse...                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BA0->(DbSetOrder(2))
If !lAutoma
	BA0->(mBrowse(06,01,22,75,"BA0",,,,,,,,,,, .T. ))
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260EMP ³ Autor ³ Tulio Cesar        ³ Data ³ 13.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Monta Browses das Empresas da Operadora Atual...          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260EMP
PRIVATE aRotina  :=    { { STRPL01         , 'AxPesqui'   , 0 , K_Pesquisar  },;
						{ OemtoAnsi(STR0001)   , 'PLSA660Mov'  , 0 , K_Visualizar },; //"Visualizar"
						{ OemtoAnsi(STR0014) 	, 'PLSA260CON' , 0 , K_Incluir    } }
PRIVATE cOldCad  := cCadastro

cCadastro 	:= OemtoAnsi(STR0115)+AllTrim(BA0->BA0_NOMINT)+"]" //"Empresas da Operadora [

PRIVATE cFiltro := "BG9_FILIAL = '"+xFilial("BG9")+"' AND BG9_CODINT = '"+BA0->(BA0_CODIDE+BA0_CODINT)+"'"
cFiltro += " AND D_E_L_E_T_ = ' '"
BG9->(DbSetOrder(2))
DbSelectArea("BG9")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Chama funcao de Browse...                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BG9->(MsSeek(xFilial("BG9")))
BG9->(mBrowse(06,01,22,75,"BG9",,,,,,,,,,,,,,cFiltro ))
cCadastro := cOldCad
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260CON ³ Autor ³ Tulio Cesar        ³ Data ³ 13.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Monta Browses dos Contratos da Empresa Atual...           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260CON
PRIVATE aRotina  :=    { { STRPL01           , 'AxPesqui'   , 0 , K_Pesquisar  },;
						{ OemtoAnsi(STR0001) , 'PLSA660Con'  , 0 , K_Visualizar },; //"Visualizar"
						{ OemtoAnsi(STR0116) , 'PLSA260AUX' , 0 , K_Incluir    } } //"Familias/Usuarios"
PRIVATE cOldCad  := cCadastro

PRIVATE cFiltro := "BT5_FILIAL = '"+xFilial("BT5")+"' AND BT5_VERSAO = '001' AND BT5_CODINT = '"+BG9->BG9_CODINT+"'"
cFiltro += " AND BT5_CODIGO = '"+BG9->BG9_CODIGO+"' AND D_E_L_E_T_ = ' '"

cCadastro 	:= OemtoAnsi(STR0117) + AllTrim(BG9->BG9_DESCRI)+"]" //"Contratos da Empresa ["

If BG9->BG9_TIPO == "1"
	PLSA260AUX("1")
	Return
Endif

BT5->(DbSetOrder(1))
DbSelectArea("BT5")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Chama funcao de Browse...                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BT5->(MsSeek(xFilial("BT5")))
BT5->(mBrowse(06,01,22,75,"BT5",,,,,,,,,,,,,,cFiltro ))

DbSelectArea("BT5")

cCadastro := cOldCad
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina                                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260AUX ³ Autor ³ Tulio Cesar        ³ Data ³ 13.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Funcao auxiliar para chamada da funcao PLSA260FAM         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260AUX(cTipo)
PRIVATE cFiltro
PRIVATE cOldCad  := cCadastro

If cTipo <> "1"
	cCadastro  := OemtoAnsi(STR0118) + AllTrim(BG9->BG9_DESCRI) + OemtoAnsi(STR0119) + BT5->BT5_NUMCON+"]"
	cFiltro    := "@BA1_FILIAL = '"+xFilial("BA1")+"' AND BA1_CODINT = '"+BG9->BG9_CODINT+"'"
	cFiltro    += " AND BA1_CODEMP = '"+BG9->BG9_CODIGO+"' AND BA1_CONEMP = '"+BT5->BT5_NUMCON+"' AND D_E_L_E_T_ = ' '"
Else
	cCadastro  :=OemtoAnsi(STR0118) + AllTrim(BG9->BG9_DESCRI)+"]"
	cFiltro    := "@BA1_FILIAL = '"+xFilial("BA1")+"' AND BA1_CODINT = '"+BG9->BG9_CODINT+"'"
	cFiltro    += " AND BA1_CODEMP = '"+BG9->BG9_CODIGO+"' AND D_E_L_E_T_ = ' '"
Endif

DbSelectArea("BA1")
SET FILTER TO &cFiltro

PLSA260FAM()

DbSelectArea("BA1")
SET FILTER TO

cCadastro := cOldCad

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260VID ³ Autor ³ Tulio Cesar        ³ Data ³ 13.06.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Altera um registro do arquivo de vida                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ATUALIZACOES SOFRIDAS DESDE A CONSTRU?AO INICIAL          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Altera??o                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260VID
Local I__f := 0

LOCAL oDlg
LOCAL nOpca     := 0
LOCAL oEnc
LOCAL aRet
LOCAL bOK       := { || nOpca := 1,If( PLS955Obg() .And. Obrigatorio(oEnc:aGets,oEnc:aTela),oDlg:End(),nOpca:=2),If(nOpca==1,oDlg:End(),.F.) }
LOCAL bCancel   := { || oDlg:End() }
LOCAL cCadastro := OemtoAnsi(STR0120) //"Alteração Vida"
LOCAL aOldTela  := aTela
LOCAL aOldGets  := aGets
LOCAL nOrdBA1   := BA1->(IndexOrd())
LOCAL nRecBA1   := BA1->(Recno())
LOCAL aButVid	:= {}

PRIVATE aTela   := {}
PRIVATE aGets   :={}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define botoes para a enchoicebar do cadastro de usuarios...         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("A260VDBT")
	If ValType( aButVid := ExecBlock("A260VDBT", .F., .F. ) ) <> "A"
		aButVid := {}
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dialogo...                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFINE MSDIALOG oDlg TITLE cCadastro FROM 0,0 TO (aPosObj[1,3]-50),(aPosObj[1,4]-450) OF GetWndDefault()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Enchoice...                                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RegToMemory( "BTS", .F., .F. )

oEnc := BTS->(MsMGet():New("BTS",BTS->(Recno()),K_Alterar,,,,,{015,004,450,600},,,,,,oDlg,,,.F.))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa o dialogo...                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,bOK,bCancel,.F.,aButVid)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define tratamento de acordo com a opcao...                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == K_OK
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclui movimento...                                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BTS->(PLUPTENC("BTS",K_Alterar))

	BA1->(DbSetOrder(7))
	IF BA1->(MsSeek(xFilial("BA1")+BTS->BTS_MATVID))
		While ! BA1->(Eof()) .And. BA1->(BA1_FILIAL+BA1_MATVID) == xFilial("BA1")+BTS->BTS_MATVID
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Atualiza os dados alterados...                                      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PLSESPVid(BA1->(Recno()),BTS->(Recno()),.T.)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ8¿
			//³Função para espelhar as Tabelas PLS com RDC ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ8Ù
			Plsa260Esp(BTS->BTS_MATVID)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Proximo registro...                                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			BA1->(DbSkip())
		Enddo
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura aGets e aTela e Arquivo de Usuarios...                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aTela := aOldTela
aGets := aOldGets

BA1->(DbSetOrder(nOrdBA1))
BA1->(DbGoTo(nRecBA1))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina...                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return(.F.)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260CEM ³ Autor ³ Tulio Cesar         ³ Data ³ 25.04.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida a data analisando a versao do contrato empresa...   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260CEM(cCodInt,cCodEmp,cConEmp,dData)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL lRet   := .F.
LOCAL cChave := cCodInt+cCodEmp+cConEmp
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar se o registro e valido...                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
lRet := ExistCpo("BT5",cCodInt+cCodEmp+cConEmp,1)

If ! lRet
	Return({.F.,""})
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona na primeira versao...                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BQB->(DbSetOrder(1))
If BQB->(MsSeek(xFilial("BQB")+cChave))
	While ! BQB->(Eof()) .And. BQB->(BQB_FILIAL+BQB_CODIGO+BQB_NUMCON) == xFilial("BQB")+cChave
		If     dtos(dData) >= dtos(BQB->BQB_DATINI) .And. dtos(dData) <= dtos(BQB->BQB_DATFIN)
			lRet := .T.
			Exit
		ElseIf Empty(BQB->BQB_DATFIN)
			If Dtos(dData) >= dtos(BQB->BQB_DATINI)
				lRet := .T.
				Exit
			Endif
		Endif
		BQB->(DbSkip())
	Enddo
Endif

If ! lRet
	Help("",1,"PLS26003")
	Return({lRet,""})
Endif

Return({lRet,BQB->BQB_VERSAO})
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260SUB ³ Autor ³ Tulio Cesar         ³ Data ³ 25.04.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida o Sub-Contrato...                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260SUB()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL lRet    := .F.
LOCAL cCodInt := M->BA3_CODINT
LOCAL cCodEmp := M->BA3_CODEMP
LOCAL cConEmp := M->BA3_CONEMP
LOCAL cVerCon := M->BA3_VERCON
LOCAL cSubCon := M->BA3_SUBCON
LOCAL dData   := M->BA3_DATBAS
LOCAL cChave  := cCodInt+cCodEmp+cConEmp+cVerCon+cSubCon
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verificar se o registro e valido...                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
lRet := ExistCpo("BQC",cCodInt+cCodEmp+cConEmp+cVerCon+cSubCon,1)

If ! lRet
	Return({.F.,""})
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona na primeira versao...                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BQD->(DbSetOrder(1))
If BQD->(MsSeek(xFilial("BQD")+cChave))
	While ! BQD->(Eof()) .And. BQD->(BQD_FILIAL+BQD_CODIGO+BQD_NUMCON+BQD_VERCON+BQD_SUBCON) == xFilial("BQD")+cChave
		If     dtos(dData) >= dtos(BQD->BQD_DATINI) .And. dtos(dData) <= dtos(BQD->BQD_DATFIN)
			lRet := .T.
			Exit
		ElseIf Empty(BQD->BQD_DATFIN)
			If Dtos(dData) >= dtos(BQD->BQD_DATINI)
				lRet := .T.
				Exit
			Endif
		Endif
		BQD->(DbSkip())
	Enddo
Endif

If ! lRet
	Help("",1,"PLS26003")
	Return({lRet,""})
Endif

Return({lRet,BQD->BQD_VERSUB})

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSAVERDOCS³ Autor ³ Antonio de Padua    ³ Data ³ 22.08.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica Documentos Obrigatorios dos Ususrios...           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSAVERDOCS(cCodInt,cCodEmp,cMatric,cTpRg,cTipUsu,cGrauPar,cSexo,nIdade)

Local aArea   := GetArea()
LOCAL cSQL
LOCAL cNumCon := M->BA3_CONEMP
LOCAL cVerCon := M->BA3_VERCON
LOCAL cSubCon := M->BA3_SUBCON
LOCAL cVerSub := M->BA3_VERSUB
LOCAL cCodPla := M->BA3_CODPLA
LOCAL cVerPla := M->BA3_VERSAO
LOCAL nAcha   := 0
Local lFlag	  := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona nos documentos definidos no Sub Contrato...               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BCO->(DbSetOrder(1))
if BCO->(MsSeek(xFilial("BCO")+cCodInt+cCodEmp+cNumCon+cVerCon+cSubCon+cVerSub))
	nAcha := 1
endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao achou no Sub Contrato, que e o caso de ser Pessoa Fisica...     ³
//³ Pesquiso Novamente na Operadora...                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nAcha == 0
	BCN->(DbSetOrder(1))
	lFlag := (BCO->(MsSeek(xFilial("BCO")+cNumCon+cVerCon+cSubCon+cVerSub)))
	nAcha := 2
endif

If nAcha == 2
	BQP->(DbSetOrder(1))
	If BQP->(MsSeek(xFilial("BQP")+cCodInt+cCodPla+cVerPla))
		nAcha := 3
	EndIf
endif


If nAcha > 0 .and. lFlag
	PLS260LDC(cTpRg)
Endif

If nAcha == 1

	cSQL := "SELECT BCO_CODDOC, BCO_TIPUSR, BCO_GRAUPA, BCO_SEXO, BCO_IDAINI,BCO_IDAFIN,BCO_DOCOBR FROM "+RetSQLName("BCO")+" WHERE "
	cSQL += "BCO_FILIAL = '"+xFilial("BCO")+"' AND "
	cSQL += "BCO_CODOPE = '"+cCodInt+"' AND "
	cSQL += "BCO_CODEMP = '"+cCodEmp+"' AND "
	cSQL += "BCO_NUMCON = '"+cNumCon+"' AND "
	cSQL += "BCO_VERCON = '"+cVerCon+"' AND "
	cSQL += "BCO_SUBCON = '"+cSubCon+"' AND "
	cSQL += "BCO_VERSUB = '"+cVerSub+"' AND "
	cSQL += " D_E_L_E_T_= ''"

	PLSQuery(cSQL,"TrbBCO")
	TrbBCO->(DBGoTop())

	While !TrbBCO->(Eof())

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e tipos de usuarios e graus de parentescos... ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(TrbBCO->BCO_TIPUSR) .And. !Empty(TrbBCO->BCO_GRAUPA) .And. !Empty(TrbBCO->BCO_SEXO)
			If cTipUsu == TrbBCO->BCO_TIPUSR .And. ;
				cGrauPar == TrbBCO->BCO_GRAUPA .And.;
				(cSexo == TrbBCO->BCO_SEXO .Or. TrbBCO->BCO_SEXO == "3")
				If nIdade >= TrbBCO->BCO_IDAINI .And.;
					nIdade <= TrbBCO->BCO_IDAFIN
					PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCO->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e tipo de usuario...                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCO->BCO_TIPUSR) .And. Empty(TrbBCO->BCO_GRAUPA) .And. !Empty(TrbBCO->BCO_SEXO)
			if cTipUsu == TrbBCO->BCO_TIPUSR .And. ;
				(cSexo == TrbBCO->BCO_SEXO .Or. TrbBCO->BCO_SEXO == "3")
				if nIdade >= TrbBCO->BCO_IDAINI .And.;
					nIdade <= TrbBCO->BCO_IDAFIN
					PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCO->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e grau de parentesco...                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCO->BCO_TIPUSR) .And. !Empty(TrbBCO->BCO_GRAUPA) .And. !Empty(TrbBCO->BCO_SEXO)
			if  cGrauPar == TrbBCO->BCO_GRAUPA .And.;
				(cSexo == TrbBCO->BCO_SEXO .Or. TrbBCO->BCO_SEXO == "3")
				if nIdade >= TrbBCO->BCO_IDAINI .And.;
					nIdade <= TrbBCO->BCO_IDAFIN
					PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCO->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os tipos de usuarios e graus de parentescos...         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCO->BCO_TIPUSR) .And. !Empty(TrbBCO->BCO_GRAUPA) .And. Empty(TrbBCO->BCO_SEXO)
			if cTipUsu == TrbBCO->BCO_TIPUSR .And. ;
				cGrauPar == TrbBCO->BCO_GRAUPA
				if nIdade >= TrbBCO->BCO_IDAINI .And.;
					nIdade <= TrbBCO->BCO_IDAFIN
					PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCO->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os tipos de usuarios...                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCO->BCO_TIPUSR) .And. Empty(TrbBCO->BCO_GRAUPA) .And. Empty(TrbBCO->BCO_SEXO)
			if cTipUsu == TrbBCO->BCO_TIPUSR
				if nIdade >= TrbBCO->BCO_IDAINI .And.;
					nIdade <= TrbBCO->BCO_IDAFIN
					PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCO->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os graus de parentescos...                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCO->BCO_TIPUSR) .And. !Empty(TrbBCO->BCO_GRAUPA) .And. Empty(TrbBCO->BCO_SEXO)
			if cGrauPar == TrbBCO->BCO_GRAUPA
				if nIdade >= TrbBCO->BCO_IDAINI .And.;
					nIdade <= TrbBCO->BCO_IDAFIN
					PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCO->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos...                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCO->BCO_TIPUSR) .And. Empty(TrbBCO->BCO_GRAUPA) .And. !Empty(TrbBCO->BCO_SEXO)
			if (cSexo == TrbBCO->BCO_SEXO .Or. TrbBCO->BCO_SEXO == "3")
				if nIdade >= TrbBCO->BCO_IDAINI .And.;
					nIdade <= TrbBCO->BCO_IDAFIN
					PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCO->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para qualquer tipo de usuario...                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCO->BCO_TIPUSR) .And. Empty(TrbBCO->BCO_GRAUPA) .And. Empty(TrbBCO->BCO_SEXO)
			if nIdade >= TrbBCO->BCO_IDAINI .And.;
				nIdade <= TrbBCO->BCO_IDAFIN
				PLSA260IDC(TrbBCO->BCO_CODDOC,TrbBCO->BCO_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
				TrbBCO->(DbSkip())
				Loop
			Endif
		Endif

		TrbBCO->(DbSkip())
	Enddo
	TrbBCO->(DbCloseArea())
	RestArea(aArea)

Elseif nAcha == 2

	cSQL := "SELECT BCN_CODDOC, BCN_TIPUSR, BCN_GRAUPA, BCN_SEXO, BCN_IDAINI,BCN_IDAFIN,BCN_DOCOBR FROM "+RetSQLName("BCN")+" WHERE "
	cSQL += "BCN_FILIAL = '"+xFilial("BCN")+"' AND "
	cSQL += "BCN_CODOPE = '"+cCodInt+"' AND "
	cSQL += " D_E_L_E_T_= ''"

	PLSQuery(cSQL,"TrbBCN")

	While !TrbBCN->(Eof())

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e tipos de usuarios e graus de parentescos... ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BCN_TIPUSR) .And. !Empty(TrbBCN->BCN_GRAUPA) .And. !Empty(TrbBCN->BCN_SEXO)
			if cTipUsu == TrbBCN->BCN_TIPUSR .And. ;
				cGrauPar == TrbBCN->BCN_GRAUPA .And.;
				(cSexo == TrbBCN->BCN_SEXO .Or. TrbBCN->BCN_SEXO == "3")
				if nIdade >= TrbBCN->BCN_IDAINI .And.;
					nIdade <= TrbBCN->BCN_IDAFIN
					PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e tipo de usuario...                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BCN_TIPUSR) .And. Empty(TrbBCN->BCN_GRAUPA) .And. !Empty(TrbBCN->BCN_SEXO)
			if cTipUsu == TrbBCN->BCN_TIPUSR .And. ;
				(cSexo == TrbBCN->BCN_SEXO .Or. TrbBCN->BCN_SEXO == "3")
				if nIdade >= TrbBCN->BCN_IDAINI .And.;
					nIdade <= TrbBCN->BCN_IDAFIN
					PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e grau de parentesco...                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BCN_TIPUSR) .And. !Empty(TrbBCN->BCN_GRAUPA) .And. !Empty(TrbBCN->BCN_SEXO)
			if  cGrauPar == TrbBCN->BCN_GRAUPA .And.;
				(cSexo == TrbBCN->BCN_SEXO .Or. TrbBCN->BCN_SEXO == "3")
				if nIdade >= TrbBCN->BCN_IDAINI .And.;
					nIdade <= TrbBCN->BCN_IDAFIN
					PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os tipos de usuarios e graus de parentescos...         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BCN_TIPUSR) .And. !Empty(TrbBCN->BCN_GRAUPA) .And. Empty(TrbBCN->BCN_SEXO)
			if cTipUsu == TrbBCN->BCN_TIPUSR .And. ;
				cGrauPar == TrbBCN->BCN_GRAUPA
				if nIdade >= TrbBCN->BCN_IDAINI .And.;
					nIdade <= TrbBCN->BCN_IDAFIN
					PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os tipos de usuarios...                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BCN_TIPUSR) .And. Empty(TrbBCN->BCN_GRAUPA) .And. Empty(TrbBCN->BCN_SEXO)
			if cTipUsu == TrbBCN->BCN_TIPUSR
				if nIdade >= TrbBCN->BCN_IDAINI .And.;
					nIdade <= TrbBCN->BCN_IDAFIN
					PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os graus de parentescos...                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BCN_TIPUSR) .And. !Empty(TrbBCN->BCN_GRAUPA) .And. Empty(TrbBCN->BCN_SEXO)
			if cGrauPar == TrbBCN->BCN_GRAUPA
				if nIdade >= TrbBCN->BCN_IDAINI .And.;
					nIdade <= TrbBCN->BCN_IDAFIN
					PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos...                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BCN_TIPUSR) .And. Empty(TrbBCN->BCN_GRAUPA) .And. !Empty(TrbBCN->BCN_SEXO)
			if (cSexo == TrbBCN->BCN_SEXO .Or. TrbBCN->BCN_SEXO == "3")
				if nIdade >= TrbBCN->BCN_IDAINI .And.;
					nIdade <= TrbBCN->BCN_IDAFIN
					PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para qualquer tipo de usuario...                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BCN_TIPUSR) .And. Empty(TrbBCN->BCN_GRAUPA) .And. Empty(TrbBCN->BCN_SEXO)
			if nIdade >= TrbBCN->BCN_IDAINI .And.;
				nIdade <= TrbBCN->BCN_IDAFIN
				PLSA260IDC(TrbBCN->BCN_CODDOC,TrbBCN->BCN_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
				TrbBCN->(DbSkip())
				Loop
			Endif
		Endif

		TrbBCN->(DbSkip())
	Enddo
	TrbBCN->(DbCloseArea())
	RestArea(aArea)

Elseif nAcha == 3

	cSQL := "SELECT BQP_CODIGO, BQP_VERSAO, BQP_CODDOC, BQP_TIPUSR, BQP_GRAUPA, BQP_SEXO, BQP_IDAINI, BQP_IDAFIN, BQP_DOCOBR FROM "+RetSQLName("BQP")+" WHERE "
	cSQL += "BQP_FILIAL = '"+xFilial("BQP")+"' AND "
	cSQL += "BQP_CODIGO = '"+cCodInt+cCodPla+"' AND "
	cSQL += "BQP_VERSAO = '"+cVerPla+"' AND "
	cSQL += " D_E_L_E_T_= ''"

	PLSQuery(cSQL,"TrbBCN")

	While !TrbBCN->(Eof())

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e tipos de usuarios e graus de parentescos... ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BQP_TIPUSR) .And. !Empty(TrbBCN->BQP_GRAUPA) .And. !Empty(TrbBCN->BQP_SEXO)
			if cTipUsu == TrbBCN->BQP_TIPUSR .And. ;
				cGrauPar == TrbBCN->BQP_GRAUPA .And.;
				(cSexo == TrbBCN->BQP_SEXO .Or. TrbBCN->BQP_SEXO == "3")
				if nIdade >= TrbBCN->BQP_IDAINI .And.;
					nIdade <= TrbBCN->BQP_IDAFIN
					PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e tipo de usuario...                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BQP_TIPUSR) .And. Empty(TrbBCN->BQP_GRAUPA) .And. !Empty(TrbBCN->BQP_SEXO)
			if cTipUsu == TrbBCN->BQP_TIPUSR .And. ;
				(cSexo == TrbBCN->BQP_SEXO .Or. TrbBCN->BQP_SEXO == "3")
				if nIdade >= TrbBCN->BQP_IDAINI .And.;
					nIdade <= TrbBCN->BQP_IDAFIN
					PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos e grau de parentesco...                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BQP_TIPUSR) .And. !Empty(TrbBCN->BQP_GRAUPA) .And. !Empty(TrbBCN->BQP_SEXO)
			if  cGrauPar == TrbBCN->BQP_GRAUPA .And.;
				(cSexo == TrbBCN->BQP_SEXO .Or. TrbBCN->BQP_SEXO == "3")
				if nIdade >= TrbBCN->BQP_IDAINI .And.;
					nIdade <= TrbBCN->BQP_IDAFIN
					PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os tipos de usuarios e graus de parentescos...         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BQP_TIPUSR) .And. !Empty(TrbBCN->BQP_GRAUPA) .And. Empty(TrbBCN->BQP_SEXO)
			if cTipUsu == TrbBCN->BQP_TIPUSR .And. ;
				cGrauPar == TrbBCN->BQP_GRAUPA
				if nIdade >= TrbBCN->BQP_IDAINI .And.;
					nIdade <= TrbBCN->BQP_IDAFIN
					PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os tipos de usuarios...                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if !Empty(TrbBCN->BQP_TIPUSR) .And. Empty(TrbBCN->BQP_GRAUPA) .And. Empty(TrbBCN->BQP_SEXO)
			if cTipUsu == TrbBCN->BQP_TIPUSR
				if nIdade >= TrbBCN->BQP_IDAINI .And.;
					nIdade <= TrbBCN->BQP_IDAFIN
					PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os graus de parentescos...                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BQP_TIPUSR) .And. !Empty(TrbBCN->BQP_GRAUPA) .And. Empty(TrbBCN->BQP_SEXO)
			if cGrauPar == TrbBCN->BQP_GRAUPA
				if nIdade >= TrbBCN->BQP_IDAINI .And.;
					nIdade <= TrbBCN->BQP_IDAFIN
					PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para todos os sexos...                                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BQP_TIPUSR) .And. Empty(TrbBCN->BQP_GRAUPA) .And. !Empty(TrbBCN->BQP_SEXO)
			if (cSexo == TrbBCN->BQP_SEXO .Or. TrbBCN->BQP_SEXO == "3")
				if nIdade >= TrbBCN->BQP_IDAINI .And.;
					nIdade <= TrbBCN->BQP_IDAFIN
					PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
					TrbBCN->(DbSkip())
					Loop
				Endif
			Endif
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Procura para qualquer tipo de usuario...                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		if Empty(TrbBCN->BQP_TIPUSR) .And. Empty(TrbBCN->BQP_GRAUPA) .And. Empty(TrbBCN->BQP_SEXO)
			if nIdade >= TrbBCN->BQP_IDAINI .And.;
				nIdade <= TrbBCN->BQP_IDAFIN
				PLSA260IDC(TrbBCN->BQP_CODDOC,TrbBCN->BQP_DOCOBR,cTpRg,cCodInt+cCodEmp+cMatric+cTpRg)
				TrbBCN->(DbSkip())
				Loop
			Endif
		Endif

		TrbBCN->(DbSkip())
	Enddo
	TrbBCN->(DbCloseArea())
	RestArea(aArea)
Endif

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260IDC ³ Autor ³ Antonio de Padua    ³ Data ³ 23.08.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Inclui Documentos Obrigatorios dos Usuarios...             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260IDC(cCodDoc,cObrig,cTpRg,cChave)

LOCAL aVet := {}
LOCAL lFlag := .F.
LOCAL nColTR := PLRETPOS("BCP_TIPREG",oBrwBCP:aHeader,.F.)
LOCAL nColCD := PLRETPOS("BCP_CODDOC",oBrwBCP:aHeader,.F.)
LOCAL nColOb := PLRETPOS("BCP_DOCOBR",oBrwBCP:aHeader,.F.)
LOCAL nColDc := PLRETPOS("BCP_DESCRI",oBrwBCP:aHeader,.F.)
LOCAL nColEt := PLRETPOS("BCP_ENTREG",oBrwBCP:aHeader,.F.)
LOCAL nColDi := PLRETPOS("BCP_DATINC",oBrwBCP:aHeader,.F.)
LOCAL nColDv := PLRETPOS("BCP_DATVAL",oBrwBCP:aHeader,.F.)
LOCAL nColFl := Len(oBrwBCP:aHeader) + 1
LOCAL nOrdBCP := BCP->(IndexOrd())
LOCAL nRecBCP := BCP->(Recno())
aSize(aVet,nColFl)

BCP->(DbSetOrder(1))
if BCP->(MsSeek(xFilial("BCP")+cChave))
	aVet[nColEt] := BCP->BCP_ENTREG
Else
	aVet[nColEt] := CRIAVAR("BCP_ENTREG")
Endif
BCP->(DbSetOrder(nOrdBCP))
BCP->(DbGoto(nRecBCP))

aVet[nColTR] := cTpRg
aVet[nColCD] := cCodDoc
aVet[nColOb] := cObrig
aVet[nColDi] := STOD("")
aVet[nColDv] := STOD("")
aVet[nColDc] := Posicione("BD2",1,xFilial("BD2")+cCodDoc,"BD2_DESCRI")
aVet[nColFl] := .F.

nPos := aScan(oBrwBCP:aCols,{|x|x[nColTR]==cTpRg .And. Empty(x[nColCD])})

if nPos > 0
	oBrwBCP:aCols[nPos,nColTR] := aVet[nColTR]
	oBrwBCP:aCols[nPos,nColCD] := aVet[nColCD]
	oBrwBCP:aCols[nPos,nColOb] := aVet[nColOb]
	oBrwBCP:aCols[nPos,nColDc] := aVet[nColDc]
	oBrwBCP:aCols[nPos,nColEt] := aVet[nColEt]
	oBrwBCP:aCols[nPos,nColFl] := aVet[nColFl]
	lFlag := .T.
Endif

nPos := aScan(oBrwBCP:aCols,{|x|x[nColTR]==cTpRg .And. x[nColCD]==cCodDoc})

if nPos <= 0 .And. !lFlag
	AAdd(oBrwBCP:aCols,AClone(aVet))
	AAdd(oBrwBCP:aVetTrab,0)
Endif

aDadBCP := aClone(oBrwBCP:aCols)
aSize(oBrwBCP:aVetTrab,Len(oBrwBCP:aCols))
aSize(oBrwBCP:aVetnoFil,Len(oBrwBCP:aCols))

oBrwBCP:ForceRefresh(oBrwBCP)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260LDC  ³ Autor ³ Antonio de Padua    ³ Data ³ 23.08.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Limpa GetDados dos Documentos de um usuario..              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260LDC(cTpRg)

LOCAL I := 0
LOCAL aColsTemp := {}
LOCAL nColTR := PLRETPOS("BCP_TIPREG",oBrwBCP:aHeader,.F.)

For I := 1 to Len(oBrwBCP:aCols)
	if ValType(oBrwBCP:aCols[I,nColTR]) == "C"
		if oBrwBCP:aCols[I,nColTR] <> cTpRg
			aadd(aColsTemp,oBrwBCP:aCols[I])
		Endif
	Endif
Next

oBrwBCP:aCols := aClone(aColsTemp)
aDadBCP       := aClone(aColsTemp)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSA260VDC ³ Autor ³ Antonio de Padua    ³ Data ³ 27.08.02   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida Documentos dos usuarios verificando se foram entregues³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PLSA260VDC()
LOCAL lRet := .T.
LOCAL I := 0
LOCAL aColsTemp := {}
LOCAL nColEt := PLRETPOS("BCP_ENTREG",oBrwBCP:aHeader,.F.)
LOCAL nColOb := PLRETPOS("BCP_DOCOBR",oBrwBCP:aHeader,.F.)
LOCAL nColTr := PLRETPOS("BCP_TIPREG",oBrwBCP:aHeader,.F.)
LOCAL nColDoc:= PLRETPOS("BCP_CODDOC",oBrwBCP:aHeader,.F.)
LOCAL nColTp := PLRETPOS("BA1_TIPREG",oBrwUsr:aHeader,.F.)
LOCAL nColNm := PLRETPOS("BA1_NOMUSR",oBrwUsr:aHeader,.F.)
LOCAL nColFl := Len(oBrwBCP:aHeader) + 1
LOCAL nColFa := Len(oBrwUsr:aHeader) + 1
LOCAL nPosScan := 0

LOCAL aColsBCP

ChangeBrw() //Para atualizar os valores da aba

If Len(oBrwBCP:aColsNoFil) > 0 //Quando ha uma alteracao e confirmacao na sequencia, o acols chega aqui com filtro e como o tratamento deve ser feito sem filtro, utilizo o aColsNoFil
	aColsBCP := aClone(oBrwBCP:aColsNoFil)
	//Atualizando a ultima alteracao do array
	For I := 1 to Len(oBrwBCP:aCols)
		nPosScan := aScan(aColsBCP,{|x| x[1] == oBrwBCP:aCols[I,1] .And. x[4] == oBrwBCP:aCols[I,4]})
		If nPosScan <> 0
			aColsBCP[nPosScan][3] := oBrwBCP:aCols[I,3] //Documento Entregue?
			aColsBCP[nPosScan][6] := oBrwBCP:aCols[I,6] //Registro Deletado?
		EndIf
	Next
Else
	aColsBCP := aClone(oBrwBCP:aCols)
EndIf

If ExistBlock("P260VCPT")
	lRet := Execblock("P260VCPT",.F.,.F.,{oBrwBCP,oBrwUsr,aColsBCP})
Else
	For I := 1 to Len(aColsBCP)
		nPosScan := aScan(oBrwUsr:aCols,{|x| x[nColTp]== aColsBCP[I,nColTr]})
		If nPosScan <> 0
			if !Empty(aColsBCP[I,nColEt])
				if aColsBCP[I,nColEt] == "0"  .And. !aColsBCP[I,nColFl] .And. !oBrwUSR:aCols[nPosScan,nColFa]
					if aScan(oBrwUsr:aCols,{|x|x[nColTp]== aColsBCP[I,nColTr]}) > 0 .And. !Empty(aColsBCP[I,nColDoc]) .And. aColsBCP[I,nColOb] == "1"
						MsgStop(OemtoAnsi(STR0121) + oBrwUsr:aCols[aScan(oBrwUsr:aCols,{|x|x[nColTp]== aColsBCP[I,nColTr]}),nColNm]) //"Existem documentos obrigatorio nao entregues para o Usuario: "
						Return(.F.)
					Endif
				Endif
			Endif
		Endif
	Next
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260ALTE1 ³ Autor ³ Antonio de Padua    ³ Data ³ 19.09.02   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Altera Titulos do SE1 colocando Usu Bloq ou Nao              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
cTipo:-> 0 Bloqueio
cTipo:-> 1 Desbloqueio
/*/
Function PL260ALTE1(cCodInt,cCodEmp,cMatric,cTipo)
SX3->(DbSetOrder(2))
If SX3->(MsSeek("E1_PLUSBLO"))
	cSql := "UPDATE "+RETSQLNAME("SE1")+" SET E1_PLUSBLO = '"+cTipo+"' WHERE "
	cSQL += " E1_CODINT = '"+cCodint+"' AND E1_CODEMP = '"+cCodEmp+"' AND"
	cSQL += " E1_MATRIC = '"+cMatric+"'"
	TCSQLExec(cSQL)
Endif
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³ PL260CF    ³ Autor ³ Antonio de Padua  ³ Data ³ 10.10.2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri??o ³ When dos campos Cliente/Fornecedor...                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
cTipo := F - Fornecedor
C - Cliente

nNum  := 4 - Familia
5 - Usuario
/*/
Function PL260CF(nNum,cTipo)

if nNum == 4
	if M->BA3_COBNIV == "1"
		if cTipo == "F"
			lFlag := Empty(M->BA3_CODCLI)
		Else
			lFlag := Empty(M->BA3_CODFOR)
		Endif
	Else
		lFlag := .F.
	Endif
Elseif nNum == 5
    If M->BA1_COBNIV == "1"
	    lFlag := .T.
	Else
	    lFlag := .F.
	EndIf
Elseif nNum == 6
	if M->BA3_COBNIV == "1"
		if cTipo == "F"
			lFlag := .T. //Empty(M->BA1_CODCLI)
		Else
			lFlag := .T. //Empty(M->BA1_CODFOR)
		Endif
	Else
		lFlag := .F.
	Endif
Endif

Return(lFlag)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLSPerm    ³ Autor ³ Michele Tatagiba    ³ Data ³ 19.12.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Verifica se o usuario possui permissao para usar o plano   |±±
±±³          ³ que esta no contrato                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSPerm(cTipUsu,cGrauPa,cEstCiv,cSexo,oBrwUsr,cCodInt,cCodPro,cVersao,dDatInc,dDatNas,;
		cCodEmp,cNumcon,cVerCon,cSubCon,cVerSub,lJuridico)

Local nInd      := 1
Local aQtd      := {}
Local nQtd      := 0
Local aAreabkp  := GetArea()
Local lRet      := .F.
Local aRet      := {}

Default cTipUsu := ""
Default cGrauPa := ""
Default cEstCiv := ""
Default cSexo   := ""
Default cCodInt := ""
Default cCodPro := ""
Default cVersao := ""
Default dDatInc := CtoD("")
Default dDatNas := CtoD("")
Default cCodEmp := ""
Default cNumcon := ""
Default cVerCon := ""
Default cSubCon := ""
Default cVerSub := ""
Default lJuridico := !Empty(cSubCon)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Pesquiso no aCols do usuario, algum usuario com o tipo de usuario igual ao que estou pesquisando |
//| para verificar a quantidade minima e maxima de usuarios com esse tipo                            |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oBrwUsr") = "O"
	For nInd := 1 To Len(oBrwUsr:aCols)
		If n <> nInd .AND. EMPTY(oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_DATBLO")])	//	Não considera os Bloqueados
			aadd(aQtd,{ ;
				oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_TIPUSU")],;
				oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_GRAUPA")],;
				oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_SEXO")],;
				oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_ESTCIV")],;
				dDatInc - oBrwUsr:aCols[nInd,oBrwUsr:PLRETPOS("BA1_DATNAS")] })
			nQtd ++
		Endif
	Next
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coloco na quantidade de usuarios este que estou tentando inserir                                 |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aadd(aQtd,{cTipUsu,cGrauPa,cEstCiv,cSexo,dDatNas})

BT0->(DBSetOrder(1))
BT1->(DBSetOrder(1))
BQC->(DBSetOrder(1))
BT6->(DBSetOrder(1))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifico se o titular está ciente e de acordo com a RN 309. Se não estiver permito apenas   a    |
//³ inclusão de conjuge e filhos no contrato. Os graus de parentesco estarão definidos no MV_RN309GP |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Inclui .and.  BQC->( msSeek(xFilial("BQC")+cCodInt+cCodEmp+cNumCon+cVerCon+cSubCon+cVerSub))
	If BT5->( MsSeek(xFilial("BT5")+cCodInt+cCodEmp+cNumCon+cVerCon) )
		DbSelectArea("BQC")
		If AllTrim(BT5->BT5_TIPCON) $ "2,3" .AND. IIF(BQC->( FieldPos("BQC_CIE309") ) > 0 , AllTrim(BQC->BQC_CIE309) $ '2,3',.F.)
			If !(cGrauPa $ GetNewPar("MV_RN309GP","01,02,03,04,05,06"))
				Help("",1,"PLS260R309")
				RestArea(aAreabkp)
				Return(.F.)
			EndIf
		EndIf
	EndIf
EndIf

/*---------------------------------------------------------------------------
Verificações a serem feitas:
1 nivel a ser verificado: SubContrato 
2 nivel a ser verificado: Se o produto esta permitido para todos os usuarios 
3 nivel a ser verificado: Produto
Obs: Caso o usuario não seja encontrado no nivel e pulado a verificação
	 para o proximo nivel
-----------------------------------------------------------------------------*/

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se esta dentro dos padroes de permissao no subcontrato     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cSQL := "SELECT BT0_TIPUSR TIPUSR, BT0_GRAUPA GRAUPA, BT0_ESTCIV ESTCIV, BT0_SEXO SEXO, "
cSQL +=    "BT0_NMIUSR NMIUSR, BT0_NMAUSR NMAUSR, BT0_IDAMIN IDAMIN, BT0_UNIMIN UNIMIN, BT0_IDAMAX IDAMAX, BT0_UNIMAX UNIMAX, BT0_ATIVO ATIVUSR "
cSQL +=   "FROM "+RetSQLName("BT0")+" WHERE "
cSQL +=    "BT0_FILIAL = '"+xFilial("BT1")+"' AND "
cSQL +=    "BT0_CODIGO = '"+cCodInt+cCodEmp+"' AND "
cSQL +=    "BT0_NUMCON = '"+cNumCon+"' AND "
cSQL +=    "BT0_VERCON = '"+cVerCon+"' AND "
cSQL +=    "BT0_SUBCON = '"+cSubCon+"' AND "
cSQL +=    "BT0_VERSUB = '"+cVerSub+"' AND "
cSQL +=    "BT0_CODPRO = '"+cCodPro+"' AND "
cSQL +=    "BT0_VERSAO = '"+cVersao+"' AND "
cSQL +=    "D_E_L_E_T_ = ' ' "
cSQL +=  "ORDER BY BT0_TIPUSR DESC, BT0_GRAUPA DESC, BT0_ESTCIV DESC, BT0_SEXO DESC"

dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"TrbBT1",.F.,.T.)

aRet := ValidPerm("TrbBT1",cTipUsu,cGrauPa,cEstCiv,cSexo,dDatInc,dDatNas,aQtd)

If aRet[1] .AND. aRet[2] 		// Usuario encontrado e usuario ativo
	RestArea(aAreabkp)
	Return(.T.)					// Usuario valido
ElseIf aRet[1] .AND. !aRet[2] 	// Usuario encontrado porem inativo
	RestArea(aAreabkp)
	Return(.F.)					// Usuario invalido
EndIf

// Se o usuario não for encontrado, faz a verificação pelo produto

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifico se o produto e permitido para todos os usuario                    |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BI3->(DBSetOrder(1))
If BI3->(MsSeek(xFilial("BI3")+cCodInt+cCodPro+cVersao))
	If BI3->BI3_ALLUSR == "1"
		If !lJuridico .and. !PLS260IsTit() .and. BI3->(FieldPos("BI3_SITANS")) > 0 .And. BI3->BI3_SITANS $ "2,3"
			If !INCLUI .and. cCodPro == IIf(Empty(BA1->BA1_CODPLA), BA3->BA3_CODPLA, BA1->BA1_CODPLA)
				lSitAns	:= .F.
				lRet	:= .T.
			EndIf
			If !lRet
				Help("",1,"PLSSITANS")
			EndIf
			Return(lRet)
		Else
			//se ele é permitido para todos usuarios retorna .T.
			RestArea(aAreabkp)
			Return(.T.)
		Endif
	Endif
Endif

If BT1->(MsSeek(xFilial("BT1")+cCodInt+cCodPro+cVersao))
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se esta dentro dos padroes de permissao...                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSQL := "SELECT BT1_TIPUSR TIPUSR, BT1_GRAUPA GRAUPA, BT1_ESTCIV ESTCIV, BT1_SEXO SEXO, "
	cSQL +=    "BT1_NMIUSR NMIUSR, BT1_NMAUSR NMAUSR, BT1_IDAMIN IDAMIN, BT1_UNIMIN UNIMIN, BT1_IDAMAX IDAMAX, BT1_UNIMAX UNIMAX, BT1_ATIVO ATIVUSR "
	cSQL +=   "FROM "+RetSQLName("BT1")+" WHERE "
	cSQL +=    "BT1_FILIAL = '"+xFilial("BT1")+"' AND "
	cSQL +=    "BT1_CODIGO = '"+cCodInt+cCodPro+"' AND "
	cSQL +=    "BT1_VERSAO = '"+cVersao+"' AND "
	cSQL +=    "BT1_ATIVO  = '1' AND " // somente regras ativas
	cSQL +=    "D_E_L_E_T_ = ' ' "
	cSQL +=  "ORDER BY BT1_TIPUSR DESC, BT1_GRAUPA DESC, BT1_ESTCIV DESC, BT1_SEXO DESC"
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"TrbBT1",.F.,.T.)

	aRet := ValidPerm("TrbBT1",cTipUsu,cGrauPa,cEstCiv,cSexo,dDatInc,dDatNas,aQtd)

	If aRet[1] .AND. aRet[2] 
		RestArea(aAreabkp)
		Return(.T.)	// Usuario valido
	Else
		RestArea(aAreabkp)
		Return(.F.)	// Usuario invalido
	EndIf
Else
	RestArea(aAreabkp)
	Return(.F.)
EndIf

RestArea(aAreabkp)
Return(.F.) 

/*********************************************************************/
Static Function PL260QUsr(nTipo,aVet,cTIPUSR,cGRAUPA,cESTCIV,cSEXO)
//nTipo
//  1 - Tipo Usuario
//  2 - Grau Parentesco
//  3 - Estado Civil
//  4 - Sexo
LOCAL _I := 0
LOCAL nTemp   := 0
Local cTemp   := ""
LOCAL aQtdUsr := {}
For _I := 1 to Len(aVet)
	If 	aVet[_I,1] == cTipUSR .and.;
		(aVet[_I,2] == cGrauPa .Or. Empty(cGrauPa)) .and.;
		(aVet[_I,3] == cEstCiv .or. Empty(cEstCiv)) .and.;
		(aVet[_I,4] == cSexo .or. cSexo == "3" .or. Empty(cSexo))
		if !Empty(aVet[_I,1])
			cTemp := aVet[_I,nTipo]
			nTemp := aScan(aQtdUsr,{|x|x[1]==cTemp})
			if nTemp > 0
				aQtdUsr[nTemp,2] := aQtdUsr[nTemp,2] + 1
			Else
				aadd(aQtdUsr,{aVet[_I,nTipo],1})
			Endif
		Endif
	EndIf
Next
Return(aQtdUsr)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Funcao    ³ PLSA260For ³ Autor ³ Padua                 ³ Data ³ 03.05.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descricao ³ Edita uma Forma de Cobranca...                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso       ³ Edicao do browse Forma de Cobranca...                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
nTipo = 1 -> Forma de Cobranca do Produto
nTipo = 2 -> Forma de Cobranca da Taxa de Adesao
nTipo = 3 -> Forma de Cobranca do Opcional
/*/
Function PLSA260For(nOpcx,nTipo,lTabAnt)
Local I__f := 0
Local nInd
Local nCont,nFields
Local nTr
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

LOCAL cDescri 	:= ""

LOCAL oDlgFor
LOCAL aCampos  	:= {}
LOCAL oEnc
LOCAL cAlias
LOCAL oFld
LOCAL aOpcoes  	:= {}
LOCAL aTitles  	:= {}
LOCAL aVetTemp 	:= {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Salva dados...                                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cOldCad  	:= cCadastro
LOCAL aOldTela 	:= aTela
LOCAL aOldGets 	:= aGets
LOCAL nOldOpc  	:= nOpca
LOCAL nOpca    	:= 0
LOCAL cOldAlias	:= If(Empty(Alias()),"BA1",Alias())
LOCAL nI
LOCAL aTiles   	:= {}
LOCAL aPages   	:= {}
LOCAL nControl 	:= 0
LOCAL aSizeAut 	:= MsAdvSize()
Local nSizeAux
LOCAL cMala    	:= Space(01)
LOCAL cVar
LOCAL aOldCols	:= aClone(aCols)
LOCAL aOldHeader:= aClone(aHeader)
LOCAL nOld		:= n
LOCAL bFilter
Local lDelLin	:= .F.
Local aCpoObri	:= {}, lDigitou := .F.
Local nObrig 	:= nOk := 0
Local cChave	:= ""
Local lOlInclui := INCLUI

Local j:=0
Local i:=0
DEFAULT nTipo 	:= 1
DEFAULT lTabAnt := .F.

Private cCodFor := "" 	// Variavel utilizada no relacionamento com as propriedades de cobranca
Private oPriBro
Private lFiltro

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta Codigo e Descricao da Forma atual...                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if nTipo ==1
	aVetTemp := AClone(aVetsFor)
	cCodFor  := oBrwFor:aCols[oBrwFor:Linha(),oBrwFor:PLRETPOS("BJK_CODFOR")]
	cDescri  := oBrwFor:aCols[oBrwFor:Linha(),oBrwFor:PLRETPOS("BJK_DESFOR")]
Elseif nTipo ==2
	aVetTemp := AClone(aVetsTxF)
	cCodFor  := oBrwAde:aCols[oBrwAde:Linha(),oBrwAde:PLRETPOS("BJL_CODFOR")]
	cDescri  := oBrwAde:aCols[oBrwAde:Linha(),oBrwAde:PLRETPOS("BJL_DESFOR")]
Elseif nTipo ==3
	aVetTemp := AClone(aVetsOpc)
	cCodFor  := oBrwFrOpc:aCols[oBrwFrOpc:Linha(),oBrwFrOpc:PLRETPOS("BK0_CODFOR")]
	cDescri  := oBrwFrOpc:aCols[oBrwFrOpc:Linha(),oBrwFrOpc:PLRETPOS("BK0_DESFOR")]
	cChave	 := cCodOpc+cVerOpc
Elseif nTipo ==43

	aVetBkpOpc	:= AClone(aVetsUOpc)

	aVetBkp2	:={}
	For i:=1 To Len(aVetBkpOpc)
		If Len(aVetBkpOpc[i,4])> 1
			For j:=1 to Len(aVetBkpOpc[i,4])
				aadd(aVetBkp2,aVetBkpOpc[i,4,j])
			Next j
			aVetBkpOpc[i,4]:=aclone(aVetBkp2)
		Endif
		aadd(aVetTemp,aVetBkpOpc[i])
	Next i

	aVetTemp := AClone(aVetBkpOpc)
	cCodFor  := oBrwUFrOpc:aCols[oBrwUFrOpc:Linha(),oBrwUFrOpc:PLRETPOS("BYX_CODFOR")]
	cDescri  := oBrwUFrOpc:aCols[oBrwUFrOpc:Linha(),oBrwUFrOpc:PLRETPOS("BYX_DESFOR")]
	cChave	 := cTipReg + cUCodOpc + cUVerOpc
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Enchoice...                                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE aTELA[0][0]
PRIVATE aGETS[0]
PRIVATE aCols    := {}
PRIVATE aHeader  := {}
PRIVATE n        := 1
PRIVATE aSvaTela := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Testa preenchimento da linha...                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
if nTipo == 1 .And. ! oBrwFor:LinhaOK()
	Return
Elseif nTipo == 2 .And. ! oBrwAde:LinhaOK()
	Return
Elseif nTipo == 3 .And. ! oBrwFrOpc:LinhaOK()
	Return
Elseif nTipo == 43 .And. ! oBrwUFrOpc:LinhaOK()
	Return
Endif

BJ1->(MsSeek(xFilial("BJ1") + cCodFor))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dialogo...                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFINE MSDIALOG oDlgFor TITLE OemtoAnsi(STR0122) + cCodFor+" - "+AllTrim(cDescri)+OemtoAnsi(STR0123) FROM ndLinIni,ndColIni TO ndLinFin,ndColFin+2 OF GetWndDefault()
cMala := Space(01) // nao retirar. Consultar Tulio ou Eduardo
@ 10000,2000 GET cMala PICTURE "@!" PIXEL OF oDlgFor // nao retirar. Consultar Tulio ou Eduardo
//essas linhas foram incluidas a classe tplsbrw nunca podera ser o 1 objeto do dialogo...
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Cria o folder de acordo com a quantidade de objetos...              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aOpcoes := A260MOpc(cCodFor,If(nTipo > 40, "4", "3"))

If aSizeAut[3] == 480.5
	nSizeAux := 100
Else
	nSizeAux :=(aSizeAut[3]*40.26)/100
Endif

SetEnch("")
For nI := 1 to Len(aOpcoes)
	Aadd(aTitles,OemtoAnsi(aOpcoes[nI,1]))
	Aadd(aPages,"HEADER "+Trim(Str(nI,2)))
	nControl++
Next

If GetRpoRelease("R5")
	oFld := TFolder():New(35,01,aTitles,aPages,oDlgFor,,,,.T.,.F.,aSizeAut[3]-nSizeAux,aSizeAut[4],)
Else
	oFld := TFolder():New(12,01,aTitles,aPages,oDlgFor,,,,.T.,.F.,aSizeAut[3]-nSizeAux,aSizeAut[4],)
Endif

oFld:bChange := {|nFolder| PL260FORREFR(nFolder,,aOpcoes) }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta Objetos...                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nI := 1 To Len(aOpcoes)
	cAlias  := aOpcoes[nI,2]
	cTipo   := aOpcoes[nI,3]
	cTit    := aOpcoes[nI,1]
	lFiltro := IF(aOpcoes[nI,4]=="1",.T.,.F.)
	bFilter := AllTrim(aOpcoes[nI,5])

	aHeader := {}
	aCols   := {}
	DbSelectArea(cAlias)

	cBrw := "oBrw"+cAlias

	STORE HEADER cAlias TO aHeader For .T.

	lFlag := .F.
	For nInd := 1 To Len(aVetTemp)
		If  aVetTemp[nInd,1] == cCodFor + cChave .And. aVetTemp[nInd,2] == cAlias
			lFlag := .T.
			If cTipo == "0" // Enchoice
				aVetTrab := aVetTemp[nInd,4]
				For nCont  := 1 To Len(aVetTrab)
					cDado  := aVetTrab[nCont,1]
					&cDado := aVetTrab[nCont,2]
				Next
			ElseIf cTipo == "1" // GetDados
				aTrab := aVetTemp[nInd,4]
				For nTr := 1 To Len(aTrab)
					if nTipo == 3
						if 	aTrab[nTr,GdFieldPos(cAlias+"_CODOPC",aHeader)] == cCodOpc .And.;
							aTrab[nTr,GdFieldPos(cAlias+"_VEROPC",aHeader)] == cVerOpc .And.;
							aTrab[nTr,GdFieldPos(cAlias+"_CODFOR",aHeader)] == cCodFor
							aadd(aCols,AClone(aTrab[nTr]))
						Endif
					Else
						aadd(aCols,AClone(aTrab[nTr]))
					Endif
				Next
			Endif
		Endif
	Next

	If ! lFlag  .OR. (cTipo == "1" .And. Len(aCols) <= 0)
		INCLUI := .T.
		If cTipo == "0" // Enchoice
			cAlias := aOpcoes[nI,2]

			RegToMemory( cAlias, .T., .F. )

		ElseIf cTipo == "1" // GetDados
			STORE COLS Blank cAlias TO aCols FROM aHeader
		Endif
		INCLUI := lOlInclui
		/*/
		dbSelectArea("BBY")
		("BBY")->( dbSetorder(1))
		BBY->(DbSeek(xFilial("BBY")+BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC))

		aCols[1][7] := BBY->BBY_VALFAI
		/*/
	Endif

	If cTipo == "0" // Enchoice
		aTela := {}
		aGets := {}
		cVar  := "aSvaTela["+AllTrim(Str(Len(aSvaTela)+1))+"]"
		aadd(aSvaTela,{})
		&cBrw := MsMGet():New(cAlias,0,nOpcx,,,,,{005,005,156,343},,,,,,oFld:aDialogs[nI],,,.F.,cVar)
		aSvaTela[len(aSvaTela)] = aClone(aTela)
	ElseIf cTipo == "1" // GetDados
		lDelLin := aCols[1][Len(aCols[1])]
		aCols[1][Len(aCols[1])] := .F.
		&cBrw := TPLSBrw():New(005,005,360,162,nil  ,oFld:aDialogs[nI],nil , nil ,nil    ,nil   ,nil, .T.   ,nil  ,.T.   ,nil   ,aHeader,aCols,.F.,cAlias,nOpcx,cTit,nil,nil,nil,nil,If(cAlias<>"BG0","PL660VldLn('"+cAlias+"','"+cCodFor+"')","PLVldLnBG0(0)"),,IF(lFiltro,&bFilter,nil))
		If oPriBro = Nil .And. lDelLin .And. N = 1
			oPriBro := &cBrw
		Endif
		&cBrw:aCols[1][Len(aCols[1])] := lDelLin
		&cBrw:Cargo := lTabAnt
		If !lFiltro
			&cBrw:Atualiza()
		Endif
	Endif
Next
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa o dialogo...                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada pra validação da tela faixa etária individual³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ACTIVATE MSDIALOG oDlgFor ON INIT (If(oPriBro <> Nil, (oPriBro:oBrowse:oBrowse:SetFocus(), oPriBro:ForceRefresh(oPriBro)), .T.),;
									EnchoiceBar(oDlgFor,{|| Iif(ExistBlock("PLS260OCOB"),ExecBlock("PLS260OCOB",.F.,.F.,{oBrwBBU,oBrwBFY}),.T.),nOpca := 1,oDlgFor:End()},{|| nOpca := 2,oDlgFor:End()}) )


aCols     := aClone(aOldCols)
aHeader   := aClone(aOldHeader)
n         := nOld
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza dados dos vetores...                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == K_OK
	For nI := 1 To Len(aOpcoes)

		cAlias := aOpcoes[nI,2]
		DbSelectArea(cAlias)
		cTipo  := aOpcoes[nI,3]
		cTit   := aOpcoes[nI,1]

		nPos := Ascan(aVetTemp,{|x| x[1]+x[2] == cCodFor+cChave+cAlias})

		If     cTipo == "0" // Enchoice

		ElseIf cTipo == "1" // GetDados
			cBrw     := "oBrw"+cAlias
			aCols    := AClone(&(cBrw):aCols)
			aHeader  := AClone(&(cBrw):aHeader)
			lFiltro  := IF(aOpcoes[nI,4]=="1",.T.,.F.)
			If lFiltro
				A800EndFil(&(cBrw))
			Endif
			lDigitou := .F.

            If Len(aCols) = 1
				aCpoObri := {}
				SX3->(DbSetOrder(2))
				For nInd := 1 To Len(aHeader)
       				If SX3->(MsSeek(AllTrim(aHeader[nInd,2])))
         				If SX3->X3_CONTEXT <> "V"
       		     			If X3Obrigat(SX3->X3_CAMPO) 
				            	aadd(aCpoObri,AllTrim(aHeader[nInd,2]))
		        	    	Endif
				    	Endif
					EndIf
				Next
				For nCont := 1 To Len(aCols)
				    nObrig := nOk := 0
				    For nFields := 1 To Len(aHeader)
			    		If Ascan(aCpoObri, AllTrim(aHeader[nFields][2])) > 0
				    		nObrig ++
			   				If ! Empty(aCols[nCont,nFields])
		    					nOk ++
			    			Endif
			    		Endif
			    	Next
			    	lDigitou := nObrig = nOk
				Next
			Else
				lDigitou := .T.
			Endif
		Endif

		If cTipo == "0" // Enchoice
			aCpos   := {}
			aFields := DBSTRUCT()
			For nCont := 1 To Len(aFields)
				cTrab := "M->"+aFields[nCont,1]
				cDado := &cTrab
				aadd(aCpos,{cTrab,cDado})
			Next
			If nPos == 0
				aadd(aVetTemp,{cCodFor+cChave,cAlias,cTipo,aCpos,0})
			Else
				aVetTemp[nPos] := {cCodFor+cChave,cAlias,cTipo,aCpos,aVetTemp[nPos,5]}
			Endif
		ElseIf cTipo == "1" // GetDados
			If nPos == 0
				aadd(aVetTemp,{cCodFor+cChave,cAlias,cTipo,aCols,{},lDigitou})
			Else
				aVetTemp[nPos] := {cCodFor+cChave,cAlias,cTipo,aCols,aVetTemp[nPos,5],lDigitou}
			Endif
		Endif
	Next
Endif
if nTipo == 1
	aVetsFor := AClone(aVetTemp)
Elseif nTipo == 2
	aVetsTxF := AClone(aVetTemp)
Elseif nTipo == 3
	aVetsOpc := AClone(aVetTemp)
Elseif nTipo == 43
	aVetsUOpc := AClone(aVetTemp)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura dados gravados...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
cCadastro := cOldCad
aTela     := aOldTela
aGets     := aOldGets
nOpca     := nOldOpc
DbSelectArea(cOldAlias)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina...                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ A260MOPC ³ Autor ³ Antonio de Padua      ³ Data ³ 03.10.01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Monta as opcoes (alias) para uma Forma de Cobranca...      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function A260MOpc(cCodFor, cTipo)

DEFAULT cTipo := "3"

aOpcoes := {}
BJ2->(DbSetOrder(1))
If BJ2->(MsSeek(xFilial("BJ2")+cCodFor+cTipo))
	While ! BJ2->(Eof()) .And. BJ2->(BJ2_FILIAL+BJ2_CODIGO+BJ2_USO) == xFilial("BJ2")+cCodFor+cTipo
		If ! Empty(BJ2->BJ2_ALIAS)
			If BJ2->(FieldPos("BJ2_EXPREF")) > 0
				aadd(aOpcoes,{ AllTrim(BJ2->BJ2_DESCRI) , BJ2->BJ2_ALIAS, BJ2->BJ2_TIPO, BJ2->BJ2_BFILT, BJ2->BJ2_EXPF, BJ2->BJ2_EXPREF})
			Else
				aadd(aOpcoes,{ AllTrim(BJ2->BJ2_DESCRI) , BJ2->BJ2_ALIAS, BJ2->BJ2_TIPO, BJ2->BJ2_BFILT, BJ2->BJ2_EXPF, ''})
			Endif
			If Empty(aOpcoes[Len(aOpcoes),1])
				SX2->( dbSetorder(01) )
				If SX2->( MsSeek(BJ2->BJ2_ALIAS) )
					aOpcoes[Len(aOpcoes),1] := Alltrim(X2Nome())
				Endif
			Endif
		Endif
		BJ2->(DbSkip())
	Enddo
Endif
Return(aOpcoes)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260DCV³ Autor ³ Michele Tatagiba      ³ Data ³ 02.12.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Retorna a data civil com um ano a mais que a data do contr.³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260DCV()
LOCAL cDia    := str(day(M->BA3_DATBAS))
LOCAL cMes    := str(MONTH(M->BA3_DATBAS))
LOCAL cAno    := Subs(Alltrim(str(YEAR(M->BA3_DATBAS)+1)),3,2)
LOCAL dDatCiv := ctod(cDia+"/"+cMes+"/"+cAno)
Return(dDatCiv)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLS260DCO ³ Autor ³ Michele Tatagiba      ³ Data ³ 02.12.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Retorna a data civil com um ano a mais que a data do contr. ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260DCO()

LOCAL dDatCon := dDataBase
LOCAL lRet    := .F.

BT5->(DBSetOrder(1))
If BT5->(MsSeek(xFilial("BT5")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON))
	If BT5->BT5_COBNIV == "1"
		dDatCon := BT5->BT5_DATCON
		lRet    := .T.
	Endif
Endif

BQC->(DBSetOrder(1))
If !lRet .And. BQC->(MsSeek(xFilial("BQC")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB))
	If BQC->BQC_COBNIV == "1"
		dDatCon := BQC->BQC_DATCON
		lRet    := .T.
	Endif
Endif

Return(dDatCon)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³PLS260BWA³ Autor ³ Geraldo Felix Junior ³ Data ³ 16.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri??o ³ Monta a getdados da Co Part. para Grupo de Quant.do usuario³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLS260BWA(nOpc)

LOCAL oDlgCo
LOCAL nOpca       := 0

DEFINE MSDIALOG oDlgCo TITLE OemtoAnsi(STR0124)+ALLTRIM(cCodGruQtd)+" - "+ALLTRIM(cDesGruQtd)  FROM 009,000 TO 029,060 OF GetWndDefault() //"Co-participacao:  "
oDlgCo:lEscClose := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Procedimentos                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter:= {|nLine,aCols,aHeader|aCols[nLine,GdFieldPos("BWA_CODGRU",aHeader)] == cCodGruQtd .and. aCols[nLine,GdFieldPos("BWA_TIPREG",aHeader)] == cTipReg}
oGetBWA:= TPLSBrw():New(0013,001,237,150,nil  ,oDlgCo,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBWA ,aDadBWA ,.F. ,"BWA" ,nOpc,"Co-participacao:  "+ALLTRIM(cCodGruQtd)+" - "+ALLTRIM(cDesGruQtd),nil,nil,nil,aTrbBWA,nil,nil,bFilter)
oGetBWA:oPai     := oGetBW9
oGetBWA:aOrigem  := {"BW9_CODGRU"}
oGetBWA:aRelac   := {"BWA_CODGRU"}

lUsaBWA         := .T.

ACTIVATE DIALOG oDlgCo CENTERED ON INIT ( EnchoiceBar(oDlgCo, {|| nOpca:=1,PlsEndBrw(),oDlgCo:End()},{|| nOpca:= 0,oDlgCo:End()} ))

If nOpca == 1
	aCabQtd := aClone(oGetBWA:aHeader)
	aDadQtd := aClone(oGetBWA:aCols)
Endif

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260colsºAutor  ³Geraldo Felix Juniorº Data ³  16/03/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Contrucao das GetDados... motados separados por causa do   º±±
±±º          ³ erro de compilacao "memory overflow"                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP6                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PLS260Cols(aPosObj)

LOCAL oBotFPC
LOCAL oBotCon
LOCAL cNumTit		:= ""
LOCAL cParcela		:= ""
LOCAL cTipTit		:= ""
LOCAL cNumCob		:= ""
LOCAL cPrefix		:= ""
LOCAL bWhenVinc		:= {|| Iif(Type('oBrwUFrOpc')<>'U',Iif(BF4->(FieldPos("BF4_TIPVIN")) > 0,oBrwUFrOpc:oBrowse:oBrowse:lReadOnly := oBrwOUsu:FieldGet("BF4_TIPVIN")=='1',NIL),NIL) }
LOCAL nLinButton	:= aPosObj[2][4]-45
LOCAL nLinGetDad	:= aPosObj[2][4]-50
LOCAL nColGetDad	:= aPosObj[2][3]-10
LOCAL aButtBVC		:= {}
LOCAL aButtBVF		:= {}
LOCAL nPosBDK		:= 0
LOCAL nPosBF3 		:= 0
LOCAL nPosBYW 		:= 0
LOCAL bBakDelete
LOCAL nTam			:=30

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ TPLSBRW -> FORMA COBRANCA                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwFor := TPLSBrw():New(005,005,nColGetDad,nLinGetDad-30,nil  ,oFldFam:aDialogs[3],nil, nil, nil ,nil   ,nil, .T.   ,nil  ,.T.   ,nil   ,aCabFor,aDadFor,.F.,"BJK",nOpcx,"Forma de Cobranca",nil,nil,nil,aTrbFor,nil,"PLSM260Del(" + Str(nOpcx, 1) + ",1)")
	oBrwFor:bChange  := { || 	If(oBrwFor:IsDeleted(oBrwFor:Linha()),;
								oBotPro:Disable(), oBotPro:Enable()) }

	@ nLinGetDad-20, 010 BUTTON oBotPro PROMPT STR0169 ACTION {|| PLSA260For(nOpcx,1) };
	  SIZE 45,11 OF  oFldFam:aDialogs[3] PIXEL 	//"Propriedades"
	oBotPro:cTOOLTIP := OemtoAnsi(STR0126) 		//"Propriedades da Forma de Cobranca"

	@ nLinGetDad-20, 060 BUTTON oBotRea PROMPT STR0125 ACTION {|| PL269HSal()};
	  SIZE 45,11 OF  oFldFam:aDialogs[3] PIXEL 	//"Historico"
	oBotRea:cTOOLTIP := OemtoAnsi(STR0125) 		//"Historico"
Else
	oBrwFor := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil  ,oFldFam:aDialogs[3],nil, nil, nil ,nil   ,nil, .T.   ,nil  ,.T.   ,nil   ,aCabFor,aDadFor,.F.,"BJK",nOpcx,"Forma de Cobranca",nil,nil,nil,aTrbFor,nil,"PLSM260Del(" + Str(nOpcx, 1) + ",1)")
	oBrwFor:bChange  := { || 	If(oBrwFor:IsDeleted(oBrwFor:Linha()),;
								oBotPro:Disable(), oBotPro:Enable()) }

	@ nLinButton, 005 BUTTON oBotPro PROMPT STR0169 ACTION {|| PLSA260For(nOpcx,1) };
	  SIZE 45,11 OF  oFldFam:aDialogs[3] PIXEL 	//"Propriedades"
	oBotPro:cTOOLTIP := OemtoAnsi(STR0126) 		//"Propriedades da Forma de Cobranca"

	@ nLinButton, 055 BUTTON oBotRea PROMPT STR0125 ACTION {|| PL269HSal()};
	  SIZE 45,11 OF  oFldFam:aDialogs[3] PIXEL 	//"Historico"
	oBotRea:cTOOLTIP := OemtoAnsi(STR0125) 		//"Historico"

Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ TPLSBRW -> FORMA COBRANCA do Opcional                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BK0_CODOPC",aHeader)]==cCodOpc .And. aCols[nLine,GdFieldPos("BK0_VEROPC",aHeader)]==cVerOpc }
oBrwFrOpc          := TPLSBrw():New(001,001,aPosObj[2][3]-17,((aPosObj[2][4]/2)-37)-35,nil  ,oFldFrOpc:aDialogs[1],nil, nil, nil ,nil   ,nil, .T.   ,nil  ,.T.   ,nil   ,aCabFrOpc,aDadFrOpc,.F.,"BK0",nOpcx,"Forma de Cobranca do Opcional",nil,nil,nil,aTrbFrOpc,nil,"PLSM260Del(" + Str(nOpcx, 1) + ",3)",bFilter)
oBrwFrOpc:oPai     := oBrwOpc
oBrwFrOpc:aOrigem  := {"BF1_CODPRO","BF1_VERSAO"} 
oBrwFrOpc:aRelac   := {"BK0_CODOPC","BK0_VEROPC"}
oBrwFrOpc:bChange  := { || 	If(oBrwFrOpc:IsDeleted(oBrwFrOpc:Linha()),;
							oBotFrOpc:Disable(), oBotFrOpc:Enable()) }

@ ((aPosObj[2][4]/2)-37)-33, 010 BUTTON oBotFrOpc PROMPT STR0169 ACTION {|| PLSA260For(nOpcx,3) };
  SIZE 45,11 OF  oFldFrOpc:aDialogs[1] PIXEL //"Propriedades"
oBotFrOpc:cTOOLTIP := OemtoAnsi(STR0126) //"Propriedades da Forma de Cobranca"

@ ((aPosObj[2][4]/2)-37)-33, 060 BUTTON oBotOp1 PROMPT STR0125 ACTION {|| PLSHISFAI("BYH",(PlsIntPad()+M->(BA3_CODEMP+BA3_MATRIC)+;
                                                          cCodOpc+cVerOpc),;
                                                          "BYH->(BYH_FILIAL+BYH_CODOPE+BYH_CODEMP+BYH_MATRIC"+;
                                                          "BYH_CODOPC+BYH_VEROPC)",3) };
  SIZE 45,11 OF  oFldFrOpc:aDialogs[1] PIXEL //"Historico"
oBotOp1:cTOOLTIP := OemtoAnsi(STR0125) //"Historico"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ TPLSBRW -> FORMA COBRANCA TAXA DE ADESAO                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwAde := TPLSBrw():New(005,005,nColGetDad,nLinGetDad-30,nil  ,oFldFam:aDialogs[4],nil, nil, nil ,nil   ,nil, .T.   ,nil  ,.T.   ,nil   ,aCabAde,aDadAde,.F.,"BJL",nOpcx,"Forma de Cobranca da Taxa de Adesao",nil,nil,nil,aTrbAde,nil,"PLSM260Del(" + Str(nOpcx, 1) + ",2)")
	oBrwAde:bChange  := { || 	If(oBrwAde:IsDeleted(oBrwAde:Linha()),;
								oBotAde:Disable(), oBotAde:Enable()) }

	@ nLinGetDad-20, 010 BUTTON oBotAde PROMPT STR0169 ACTION {|| PLSA260For(nOpcx,2) };
	  SIZE 45,11 OF  oFldFam:aDialogs[4] PIXEL //"Propriedades"
	oBotAde:cTOOLTIP := OemtoAnsi(STR0127) //"Propriedades da Forma de Cobranca da Taxa de Adesao"

	@ nLinGetDad-20, 060 BUTTON oBotAd1 PROMPT STR0125 ACTION {|| PLSHISFAI("BYG",(PlsIntPad()+M->(BA3_CODEMP+BA3_MATRIC)),;
	                                                          "BYG->(BYG_FILIAL+BYG_CODOPE+BYG_CODEMP+BYG_MATRIC)",1) };
	  SIZE 45,11 OF  oFldFam:aDialogs[4] PIXEL //"Historico"
	oBotAd1:cTOOLTIP := OemtoAnsi(STR0125) //"Historico"
Else
	oBrwAde := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil  ,oFldFam:aDialogs[4],nil, nil, nil ,nil   ,nil, .T.   ,nil  ,.T.   ,nil   ,aCabAde,aDadAde,.F.,"BJL",nOpcx,"Forma de Cobranca da Taxa de Adesao",nil,nil,nil,aTrbAde,nil,"PLSM260Del(" + Str(nOpcx, 1) + ",2)")
	oBrwAde:bChange  := { || 	If(oBrwAde:IsDeleted(oBrwAde:Linha()),;
								oBotAde:Disable(), oBotAde:Enable()) }

	@ nLinButton, 005 BUTTON oBotAde PROMPT STR0169 ACTION {|| PLSA260For(nOpcx,2) };
	  SIZE 45,11 OF  oFldFam:aDialogs[4] PIXEL //"Propriedades"
	oBotAde:cTOOLTIP := OemtoAnsi(STR0127) //"Propriedades da Forma de Cobranca da Taxa de Adesao"

	@ nLinButton, 055 BUTTON oBotAd1 PROMPT STR0125 ACTION {|| PLSHISFAI("BYG",(PlsIntPad()+M->(BA3_CODEMP+BA3_MATRIC)),;
	                                                          "BYG->(BYG_FILIAL+BYG_CODOPE+BYG_CODEMP+BYG_MATRIC)",1) };
	  SIZE 45,11 OF  oFldFam:aDialogs[4] PIXEL //"Historico"
	oBotAd1:cTOOLTIP := OemtoAnsi(STR0125) //"Historico"
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Historico dos Opcionais da Familia                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwHOpc := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,NIL  ,oFldFam:aDialogs[5],nil   , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabHOpc   ,aDadHOpc ,.F.      ,"BGT" ,K_Visualizar,"Historico dos Opcionais",nil,nil,nil,aTrbHOpc,,,)
Else
	oBrwHOpc := TPLSBrw():New(005,005,nColGetDad,nLinGetDad+13,NIL  ,oFldFam:aDialogs[5],nil   , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabHOpc   ,aDadHOpc ,.F.      ,"BGT" ,K_Visualizar,"Historico dos Opcionais",nil,nil,nil,aTrbHOpc,,,)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Historico Financeiro                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lDadFin
	If Val(GetVersao(.F.)) >= 12 //Valida versão 12
		oBrwFin := TPLSBrw():New(005,005,nColGetDad,nLinGetDad-30,nil  ,oFldFam:aDialogs[6],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabFin   ,aDadFin ,.T.      ,"SE1" ,K_Visualizar,"Historico Financeiro",{{"E1_SALDO","<=",0}},nil,nil,aTrbFin,nil)
	Else
		oBrwFin := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil  ,oFldFam:aDialogs[6],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabFin   ,aDadFin ,.T.      ,"SE1" ,K_Visualizar,"Historico Financeiro",{{"E1_SALDO","<=",0}},nil,nil,aTrbFin,nil)
	Endif
	oBrwFin:bGotFocus  := {|| cPrefix  := oBrwFin:FieldGet("E1_PREFIXO"),;
		cNumTit  := oBrwFin:FieldGet("E1_NUM"),;
		cParcela := oBrwFin:FieldGet("E1_PARCELA"),;
		cTipTit  := oBrwFin:FieldGet("E1_TIPO"),;
		cNumCob  := oBrwFin:FieldGet("E1_PLNUCOB")}

		oBrwFin:bChange    := {||Eval(oBrwFin:bGotFocus)}
	If Val(GetVersao(.F.)) >= 12 //Valida versão 12
		@ nLinGetDad-20, 010 BUTTON oBotCon PROMPT STR0170 ACTION {|| PLSCOMPFIN(cPrefix,cNumTit,cParcela,cTipTit,cNumCob,.F.,.F.) };
       SIZE 45,11 OF oFldFam:aDialogs[6] PIXEL //"Composição"
	   oBotCon:cTOOLTIP := OemtoAnsi(STR0128) //"Composição do título"
	Else
		@ nLinButton, 005 BUTTON oBotCon PROMPT STR0170 ACTION {|| PLSCOMPFIN(cPrefix,cNumTit,cParcela,cTipTit,cNumCob,.F.,.F.) };
       SIZE 45,11 OF oFldFam:aDialogs[6] PIXEL //"Composição"
	    oBotCon:cTOOLTIP := OemtoAnsi(STR0128) //"Composição do título"
	Endif
Else
	@ 005, 006 Say oSayFin PROMPT OemtoAnsi(STR0129)  SIZE 150, 006 OF oFldFam:aDialogs[6] PIXEL COLOR CLR_HBLUE //"Nao ha titulos no financeiro para este contrato/familia"
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Bloqueio da familia ...                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwBlo   := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil  ,oFldFam:aDialogs[7],nil    , {|| nil }      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBlo   ,aDadBlo ,.F.     ,"BC3" ,K_Visualizar,"Historico Bloqueio da Familia",nil,nil,nil,aTrbBlo,,,)
Else
	oBrwBlo   := TPLSBrw():New(005,005,nColGetDad,nLinGetDad+13,nil  ,oFldFam:aDialogs[7],nil    , {|| nil }      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBlo   ,aDadBlo ,.F.     ,"BC3" ,K_Visualizar,"Historico Bloqueio da Familia",nil,nil,nil,aTrbBlo,,,)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse de Cobranca da carteirinha                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwBed   := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil  ,oFldFam:aDialogs[8],nil    , {|| nil }      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBED   ,aDadBED ,.F.     ,"BED" ,K_Visualizar,"Historico Cobranca Carteirinha",nil,nil,nil,aTrbBED,,,)
Else
	oBrwBed   := TPLSBrw():New(005,005,nColGetDad,nLinGetDad+13,nil  ,oFldFam:aDialogs[8],nil    , {|| nil }      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBED   ,aDadBED ,.F.     ,"BED" ,K_Visualizar,"Historico Cobranca Carteirinha",nil,nil,nil,aTrbBED,,,)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse da Gratuidade da familia ...                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwGra := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil  ,oFldFam:aDialogs[9],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabGra   ,aDadGra ,.F.      ,"BH5" ,nOpcx,"Historico Gratuidade",nil,nil,nil,aTrbGra,'PLS260GRA(M->BH5_DATLAN,M->BH5_ANOINI,M->BH5_ANOFIM,M->BH5_MESINI,M->BH5_MESFIM)')
Else
	oBrwGra := TPLSBrw():New(005,005,nColGetDad,nLinGetDad+13,nil  ,oFldFam:aDialogs[9],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabGra   ,aDadGra ,.F.      ,"BH5" ,nOpcx,"Historico Gratuidade",nil,nil,nil,aTrbGra,'PLS260GRA(M->BH5_DATLAN,M->BH5_ANOINI,M->BH5_ANOFIM,M->BH5_MESINI,M->BH5_MESFIM)')
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse da Proteção Financeira...                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaB1V
	If Val(GetVersao(.F.)) >= 12 //Valida versão 12
		oBrwB1V := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil  ,oFldFam:aDialogs[nFldB1V],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabB1V   ,aDadB1V ,.F.      ,"B1V" ,nOpcx,"Proteção Financeira",nil,nil,nil,aTrbB1V)
	Else
		oBrwB1V := TPLSBrw():New(005,005,nColGetDad,nLinGetDad+13,nil  ,oFldFam:aDialogs[nFldB1V],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabB1V   ,aDadB1V ,.F.      ,"B1V" ,nOpcx,"Proteção Financeira",nil,nil,nil,aTrbB1V)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Grupo de Cobertura da Familia ...                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
@ nLinGetDad/2+3,001 FOLDER oSubFol01 SIZE aPosObj[2][3]-5,aPosObj[2][4] - 5 OF oFldCobFam:aDialogs[1] PIXEL PROMPTS OemtoAnsi(STR0130) //"Co-Participacao"

oBrwGruF := TPLSBrw():New(000,000,nColGetDad-5	,nLinGetDad/2,nil  ,oFldCobFam:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabGruF   ,aDadGruF ,.F.      ,"BFC" ,nOpcx,"Grupo Cobertura",nil,nil,nil,aTrbGruF,nil)
oBrwGruF:bLostFocus := { || cFCodGru := oBrwGruF:aCols[oBrwGruF:Linha(),oBrwGruF:FieldPos("BFC_CODGRU")],;
							M->BA3_INFGCB := If(oBrwGruF:VerExiData(),"1","0"),;
							lRefresh := .T. ,oGetBVC:ForceRefresh(oBrwGruF)}
oBrwGruF:bGotFocus := {||oGetBVC:ForceRefresh(oBrwGruF)}
oBrwGruF:bChange := {||	Eval(oBrwGruF:bLostFocus),oGetBVC:ForceRefresh(oBrwGruF)}
bBakDelete := oBrwGruF:oBrowse:oBrowse:bDelete
oBrwGruF:oBrowse:oBrowse:bDelete := {||oBrwGruF:lAltered:=.T.,Eval(bBakDelete),oBrwGruF:ChkDel(),oBrwGruF:aCols := aClone(oBrwGruF:oBrowse:aCols),;
									IIf(oBrwGruF:aCols[oBrwGruF:Linha(),Len(oBrwGruF:aHeader)+1],;
										VldDCols(oGetBVC,2,cFCodGru,.T.),;
										VldDCols(oGetBVC,2,cFCodGru,.F.)),;
									Eval(oBrwGruF:bChange)}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta botao para visualizacao do historico de reajuste da franquia  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("B0B")
	Aadd(aButtBVC, {"BUDGET",{||PL660HTFRA('3',"BVC",  M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
														M->BA3_CODPLA,;
														M->BA3_VERSAO)},;
														STR0190,STR0125}) //"Historico de reajuste da franquia", "Historico"
Endif

// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BVC_CODGRU",aHeader,.T.)]== cFCodGru}
oGetBVC := TPLSBrw():New(000,000,aPosObj[2][3]-22,aPosObj[2][4]/3-10 ,nil  ,oSubFol01:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVC   ,aDadBVC ,.F.      ,"BVC" ,nOpcx,STR0130,nil,nil,nil,aVetBVC,'PlsVldBVC',,bFilter,,aButtBVC) //"Co-Participação"
oGetBVC:oPai    := oBrwGruF
oGetBVC:aOrigem := {"BFC_CODGRU"}
oGetBVC:aRelac  := {"BVC_CODGRU"}

If PLSALIASEXI("B1Y")
  aButEsp := {{OemtoAnsi(STR0259),{||PlVigDifId("BFD",'M->(BA3_FILIAL+BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+M->(BFD_CODPAD+BFD_CODPSA+BFD_NIVEL)',M->BFD_DIFIDA)},OemtoAnsi(STR0259),OemtoAnsi(STR0259)}}
Else
	aButEsp := {}
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse de Procedimentos da Familia ...                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwProF := TPLSBrw():New(000,000,nColGetDad-2,nLinGetDad/2,nil  ,oFldCobFam:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabProF   ,aDadProF ,.F.      ,"BFD" ,nOpcx,STR0047,nil,nil,nil,aTrbProF,nil,,,,aButEsp)//"Procedimentos"
	oBrwProF:bLostFocus :=	{|| cFCodPad:= oBrwProF:FieldGet("BFD_CODPAD"),cFCodPsa:= oBrwProF:FieldGet("BFD_CODPSA"),M->BA3_INFCOB := If(oBrwProF:VerExiData(),"1","0"), lRefresh := .T., oGetBVF:ForceRefresh(oBrwProF)}
	oBrwProF:bChange	:= 	{|| Eval(oBrwProF:bLostFocus),;
		oGetBVF:ForceRefresh(oBrwProF)}

	@ nLinGetDad/2 + 2,001 FOLDER oSubFol02 SIZE aPosObj[2][3]-6,aPosObj[2][4] OF oFldCobFam:aDialogs[2] PIXEL PROMPTS  OemtoAnsi(STR0130) //"Co-Participacao"

Else
	oBrwProF := TPLSBrw():New(000,000,nColGetDad-5,nLinGetDad/2,nil  ,oFldCobFam:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabProF   ,aDadProF ,.F.      ,"BFD" ,nOpcx,STR0047,nil,nil,nil,aTrbProF,nil,,,,aButEsp)//"Procedimentos"
	oBrwProF:bLostFocus :=	{|| cFCodPad:= oBrwProF:FieldGet("BFD_CODPAD"),cFCodPsa:= oBrwProF:FieldGet("BFD_CODPSA"),M->BA3_INFCOB := If(oBrwProF:VerExiData(),"1","0"), lRefresh := .T., oGetBVF:ForceRefresh(oBrwProF)}
	oBrwProF:bChange	:= 	{|| Eval(oBrwProF:bLostFocus),;
		oGetBVF:ForceRefresh(oBrwProF)}

	@ nLinGetDad/2+3,001 FOLDER oSubFol02 SIZE aPosObj[2][3] - 6,aPosObj[2][4] OF oFldCobFam:aDialogs[2] PIXEL PROMPTS  OemtoAnsi(STR0130) //"Co-Participacao"

Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta botao para visualizacao do historico de reajuste da franquia  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("B0B")
	Aadd(aButtBVF, {"BUDGET",{||PL660HTFRA('3',"BVF",  M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC),;
														M->BA3_CODPLA,;
														M->BA3_VERSAO)},;
														STR0190,STR0125}) //"Historico de reajuste da franquia", "Historico"
Endif
// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BVF_CODPAD",aHeader,.T.)]== cFCodPad .And. aCols[nLine,PLRETPOS("BVF_CODPSA",aHeader,.T.)]== cFCodPsa }
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
oGetBVF := TPLSBrw():New(000,000,aPosObj[2][3] - 17,aPosObj[2][4]/3 - 5,nil  ,oSubFol02:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVF   ,aDadBVF ,.F.      ,"BVF" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBVF,'PlsVldBVF',,bFilter,,aButtBVF)
Else
oGetBVF := TPLSBrw():New(000,000,aPosObj[2][3]-50,aPosObj[2][4]/3 ,nil  ,oSubFol02:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVF   ,aDadBVF ,.F.      ,"BVF" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBVF,'PlsVldBVF',,bFilter,,aButtBVF)
Endif
oGetBVF:oPai    := oBrwProF
oGetBVF:aOrigem := {"BFD_CODPAD","BFD_CODPSA"}
oGetBVF:aRelac  := {"BVF_CODPAD","BVF_CODPSA"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Grupo de Quantidades da Familia                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Val(GetVersao(.F.)) >= 12 //Valida versão 12
	oBrwQtd            := TPLSBrw():New(000,000,aPosObj[2][3]-25,aPosObj[2][4]-75 ,nil  ,oFldCobFam:aDialogs[3],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabQtd   ,aDadQtd ,.F.      ,"BW7" ,nOpcx,"Grupo de Quantidades",nil,nil,nil,aTrbQtd)
	oBrwQtd:bLostFocus := {|| cCodGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_CODGRU",aCabQtd)],cDesGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_DESGRU",aCabQtd)] }
	oBrwQtd:bChange    := {|| cCodGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_CODGRU",aCabQtd)],cDesGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_DESGRU",aCabQtd)] }
Else
	oBrwQtd            := TPLSBrw():New(000,000,aPosObj[2][3]-20,aPosObj[2][4]-70 ,nil  ,oFldCobFam:aDialogs[3],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabQtd   ,aDadQtd ,.F.      ,"BW7" ,nOpcx,"Grupo de Quantidades",nil,nil,nil,aTrbQtd)
	oBrwQtd:bLostFocus := {|| cCodGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_CODGRU",aCabQtd)],cDesGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_DESGRU",aCabQtd)] }
	oBrwQtd:bChange    := {|| cCodGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_CODGRU",aCabQtd)],cDesGruQtd := oBrwQtd:aCols[oBrwQtd:Linha(),oBrwQtd:FieldPos("BW7_DESGRU",aCabQtd)] }
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse da Classe de carencia na familia   .                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("BFJ")
	If Val(GetVersao(.F.)) >= 12 //Valida versão 12
		oBrwBFJ	:= TPLSBrw():New(000,000,aPosObj[2][3]-25,aPosObj[2][4]-75 ,nil  ,oFldCobFam:aDialogs[4],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBFJ   ,aDadBFJ ,.F.      ,"BFJ" ,nOpcx,"Classe de Carencia",nil,nil,nil,aTrbBFJ)
	Else
		oBrwBFJ	:= TPLSBrw():New(000,000,aPosObj[2][3]-20,aPosObj[2][4]-60 ,nil  ,oFldCobFam:aDialogs[4],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBFJ   ,aDadBFJ ,.F.      ,"BFJ" ,nOpcx,"Classe de Carencia",nil,nil,nil,aTrbBFJ)
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse das Doencas Pre-existentes do Usuario ...            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BF3_TIPREG",aHeader)]==cTipReg }
oBrwDoe            := TPLSBrw():New(003,003,aPosObj[2][3]-50,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[1],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabDoe   ,aDadDoe ,.F.      ,"BF3" ,nOpcx,"Doencas PreExistentes",nil,nil,nil,aTrbDoe,'PLS260DOE',,bFilter)
oBrwDoe:oPai       := oBrwUsr
oBrwDoe:aOrigem    := {"BA1_TIPREG"}
oBrwDoe:aRelac     := {"BF3_TIPREG"}
oBrwDoe:bLostFocus := { || oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:RetCol("BA1_INFPRE")] := If(oBrwDoe:VerExiData(),"1","0"), lRefresh := .T.,oBrwUsr:lAltered := .T. }


@ 003, aPosObj[2][3]-45 BUTTON oBotDoe PROMPT STR0168 ACTION {|| nPosBF3 := oBrwDoe:Linha(), PLSA260CDE(nOpcx),;
																	 		 oBrwDoe:oBrowse:oBrowse:SetFocus(),;
																		     oBrwDoe:SetPos(nPosBF3)  };
																		     SIZE 25,11 OF  oFldUsr:aDialogs[1] PIXEL // "Carência"
oBotDoe:cTOOLTIP   := OemtoAnsi(STR0133) //"Carencia Diferenciada para Procedimentos"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse Cancelamento Reajuste                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaBYW
	bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BYW_TIPREG",aHeader)]==cTipReg }
	oBrwBYW            := TPLSBrw():New(003,003,aPosObj[2][3]-50,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[nFldBYW],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBYW   ,aDadBYW ,.F.      ,"BYW" ,nOpcx,STR0189,nil,nil,nil,aTrbBYW,'PLSVLDBYW',,bFilter,,,,,) //"Cancelamento Reajuste"
	oBrwBYW:oPai       := oBrwUsr
	oBrwBYW:aOrigem    := {"BA1_TIPREG"}
	oBrwBYW:aRelac     := {"BYW_TIPREG"}
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse das Faixas etarias...                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BDK_TIPREG",aHeader)]==cTipReg }
oBrwBDK            := TPLSBrw():New(003,003,aPosObj[2][3]-50,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[10],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBDK   ,aDadBDK ,.F.      ,"BDK" ,nOpcx,"Faixa Etaria especifica do usuario",nil,nil,nil,aTrbBDK,'PLS260BDK',,bFilter)
oBrwBDK:oPai       := oBrwUsr
oBrwBDK:aOrigem    := {"BA1_TIPREG"}
oBrwBDK:aRelac     := {"BDK_TIPREG"}
oBrwBdk:cVldLine := 'Pl260AnFx()'

@ 003, aPosObj[2][3]-45 BUTTON oBotBDK PROMPT STR0134 ACTION {|| nPosBDK := oBrwBDK:Linha(),;
																	PLSA260BDK(nOpcx),;
																	Eval(oBrwUsr:bChange),;
																	oBrwBDK:oBrowse:oBrowse:SetFocus(),;
																	oBrwBDK:SetPos(nPosBDK) };
  SIZE 25,11 OF  oFldUsr:aDialogs[10] PIXEL //"Desconto"
oBotBDK:cTOOLTIP   := OemtoAnsi(STR0134) //"Desconto"

@ 020, aPosObj[2][3]-45 BUTTON oBotRea PROMPT STR0125 ACTION  {|| PLSHISFAI("BYB",(PlsIntPad()+M->(BA3_CODEMP+BA3_MATRIC)+;
                                                          cTipReg),;
                                                          "BYB->(BYB_FILIAL+BYB_CODOPE+BYB_CODEMP+BYB_MATRIC+"+;
                                                          "BYB_TIPREG)",1) };
  SIZE 25,11 OF  oFldUsr:aDialogs[10] PIXEL //"Historico"
     oBotRea:cTOOLTIP   := OemtoAnsi(STR0125)//"Historico"

If lCriaB1W
	bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("B1W_TIPREG",aHeader)]==cTipReg }
	oBrwB1W            := TPLSBrw():New(003,003,aPosObj[2][3]-15,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[nFldB1W],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabB1W   ,aDadB1W ,.F. ,"B1W" ,nOpcx,OemtoAnsi(STR0045),nil,nil,nil,aTrbB1W,,,bFilter)
	oBrwB1W:oPai       := oBrwUsr
	oBrwB1W:aOrigem    := {"BA1_TIPREG"}
	oBrwB1W:aRelac     := {"B1W_TIPREG"}
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse das Situacaoes Adversas do Usuario ...               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BHH_TIPREG",aHeader)]==cTipReg }
oBrwBHH            := TPLSBrw():New(003,003,aPosObj[2][3]-15,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[9],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBHH   ,aDadBHH ,.F.      ,"BHH" ,nOpcx,"Situacoes Adversas",nil,nil,nil,aTrbBHH,'PLS260BHH',,bFilter,nil,nil,nil,nil,nil,nil,nil,nil,nil,{nil,nil,nil,162.3,nil,nil,nil,600})
oBrwBHH:oPai       := oBrwUsr
oBrwBHH:aOrigem    := {"BA1_TIPREG"}
oBrwBHH:aRelac     := {"BHH_TIPREG"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Documentos Obrigatorios dos Usuario ...          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BCP_TIPREG",aHeader)]==cTipReg }
oBrwBCP            := TPLSBrw():New(003,003,aPosObj[2][3]-15,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[2],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBCP   ,aDadBCP ,.F.      ,"BCP" ,nOpcx,"Documentos Obrigatorios",nil,nil,nil,aTrbBCP,'PLS260VLDP',"ALLWAYSFALSE()",bFilter)
oBrwBCP:oPai       := oBrwUsr
oBrwBCP:aOrigem    := {"BA1_TIPREG"}
oBrwBCP:aRelac     := {"BCP_TIPREG"}
oBrwBCP:lAddLine   := .T.
oBrwBCP:bGotFocus :=  {|| oBrwBCP:oBrowse:oBrowse:nAt := 1, oBrwBCP:Refresh()}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Opcionais do Usuario ...                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter          := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BF4_TIPREG",aHeader)]==cTipReg }
oBrwOUsu         := TPLSBrw():New(003,003,aPosObj[2][3]-50,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[3],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabOUsu   ,aDadOUsu ,.F.      ,"BF4" ,nOpcx,"Opcionais do Usuario",nil,nil,nil,aTrbOUsu,'PLS260VLDO','PLS260VLEX',bFilter)
oBrwOUsu:oPai    := oBrwUsr
oBrwOUsu:bLostFocus := {|| cUCodOpc := oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_CODPRO")],cUVerOpc := oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_VERSAO")],oBrwUFrOpc:ForceRefresh(oBrwOUsu)}
oBrwOUsu:bChange := {|| Eval(bWhenVinc), PLSA260AP(), Eval(oBrwOUsu:bLostFocus) }
oBrwOUsu:bGotFocus :=  {|| oBrwOUsu:oBrowse:oBrowse:nAt := 1, oBrwOUsu:Refresh()}

oBrwOUsu:aOrigem := {"BA1_TIPREG"}
oBrwOUsu:aRelac  := {"BF4_TIPREG"}

@ 003, aPosObj[2][3]-40 BUTTON oBotOcobOpc PROMPT STR0034 ACTION {|| OpcCob2() };
  SIZE 25,11 OF  oFldUsr:aDialogs[3] PIXEL //"Cobertura"
oBotOCobOpc:cTOOLTIP   := OemtoAnsi(STR0034) //"Cobertura"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse da Forma de Cobranca dos Opcionais do Usuario ...    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BYX_TIPREG",aCabUFrOpc,.T.)]== cTipReg .And. aCols[nLine,PLRETPOS("BYX_CODOPC",aCabUFrOpc,.T.)]== cUCodOpc .And. aCols[nLine,PLRETPOS("BYX_VEROPC",aCabUFrOpc,.T.)]== cUVerOpc}
oBrwUFrOpc := TPLSBrw():New(003, 003, aPosObj[2][3]-20, (aPosObj[2][4]/2)-50 ,nil  ,oFldUsr:aDialogs[4],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabUFrOpc   ,aDadUFrOpc ,.F.      ,"BYX" ,nOpcx,"Forma de Cobranca Usuario",nil,nil,nil,aTrbUFrOpc,,"PLSM260Del(" + Str(nOpcx, 1) + ",43)",bFilter)
oBrwUFrOpc:oPai    := oBrwOUsu
oBrwUFrOpc:aOrigem := {"BF4_CODPRO","BF4_VERSAO","BF4_TIPREG"}
oBrwUFrOpc:aRelac  := {"BYX_CODOPC","BYX_VEROPC","BYX_TIPREG"}
oBrwUFrOpc:bChange  := { || 	Eval(oBrwOUsu:bLostFocus),;
								(If(oBrwOUsu:IsDeleted(oBrwOUsu:Linha()),oBrwFrOpc:OBROWSE:OBROWSE:LREADONLY := .F. ,oBrwFrOpc:OBROWSE:OBROWSE:LREADONLY := .T.),;
	 							 If(oBrwFrOpc:IsDeleted(oBrwFrOpc:Linha()),;
								 	oBotUFrOpc:Disable(), oBotUFrOpc:Enable()),;
								 If(oBrwUFrOpc:IsDeleted(oBrwUFrOpc:Linha()),;
								 	oBotUFrOpc:Disable(), oBotUFrOpc:Enable()))}

@ aPosObj[2][4]/2-50, 005 BUTTON oBotUFrOpc PROMPT STR0169 ACTION {|| PLSA260For(nOpcx,43) };
  SIZE 45,11 OF oFldUsr:aDialogs[4] PIXEL //"Propriedades"
oBotUFrOpc:cTOOLTIP := OemtoAnsi(STR0135) //"Propriedades da Forma de Cobranca (OPCIONAIS)"

@ aPosObj[2][4]/2-50, 055 BUTTON oBotRea PROMPT STR0125 ACTION {|| PLSHISFAI("BYI",(PlsIntPad()+M->(BA3_CODEMP+BA3_MATRIC)+;
                                                          cTipReg+cUCodOpc+cUVerOpc),;
                                                          "BYI->(BYI_FILIAL+BYI_CODOPE+BYI_CODEMP+BYI_MATRIC+"+;
                                                          "BYI_TIPREG+BYI_CODOPC+BYI_VEROPC)",3) };
  SIZE 45,11 OF  oFldUsr:aDialogs[4] PIXEL //"Historico"
oBotRea:cTOOLTIP := OemtoAnsi(STR0125) //"Historico"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Historico dos Opcionais do Usuario ...            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

bFilter           := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BGU_TIPREG",aHeader)]==cTipReg }
oBrwHOUsu         := TPLSBrw():New(003,003,aPosObj[2][3]-15,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[5],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabHOUsu   ,aDadHOUsu ,.F.      ,"BGU" ,K_Visualizar,"Historico dos Opcionais do Usuario",nil,nil,nil,aTrbHOUsu,,,bFilter)
oBrwHOUsu:oPai    := oBrwUsr
oBrwHOUsu:aOrigem := {"BA1_TIPREG"}
oBrwHOUsu:aRelac  := {"BGU_TIPREG"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Bloqueio dos Usuario ...                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter          := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BCA_TIPREG",aHeader)]==cTipReg }
oBrwBUsu         := TPLSBrw():New(003,003,aPosObj[2][3]-15,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[6],nil    , {|| nil }     ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBUsu   ,aDadBUsu ,.F.      ,"BCA" ,K_Visualizar,"Historico Bloqueio do Usuario",nil,nil,nil,aTrbBUsu,,,bFilter)
oBrwBUsu:oPai    := oBrwUsr
oBrwBUsu:aOrigem := {"BA1_TIPREG"}
oBrwBUsu:aRelac  := {"BCA_TIPREG"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse da Gratuidade da familia ...                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter          := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BH6_TIPREG",aHeader)]==cTipReg }
oBrwGUsu         := TPLSBrw():New(003,003,aPosObj[2][3]-15,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[7],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabGUsu   ,aDadGUsu ,.F.      ,"BH6" ,nOpcx,"Gratuidade do Usuario",nil,nil,nil,aTrbGUsu,'PLS260GRA(M->BH6_DATLAN,M->BH6_ANOINI,M->BH6_ANOFIM,M->BH6_MESINI,M->BH6_MESFIM)',,bFilter)
oBrwGUsu:oPai    := oBrwUsr
oBrwGUsu:aOrigem := {"BA1_TIPREG"}
oBrwGUsu:aRelac  := {"BH6_TIPREG"}

@ 003, 025 BUTTON oBotCobUsr PROMPT STR0034 ACTION {|| UsrOpcCob() } SIZE 35,11 OF  oFldUsr:aDialogs[8] PIXEL //"Cobertura"
oBotCobUsr:cTOOLTIP  := OemtoAnsi(STR0034) //"Cobertura"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse historico de saldo ...             		            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaB78
	If Val(GetVersao(.F.)) >= 12 //Valida versão 12
		oBrwB78 := TPLSBrw():New(005,005,nColGetDad,(nLinGetDad-10),nil,oFldFam:aDialogs[nFldB78],nil, nil,nil,nil, nil, .T.  ,nil,.T. ,nil ,aCabB78 ,aDadB78 ,.F.,"B78" ,K_Visualizar,STR0191,nil,nil,nil,aTrbB78) //"Parcelamento"
		@ (nLinGetDad-7), 010 BUTTON oBotAde PROMPT STR0194 ACTION {|| PL260SALD() } SIZE 45,11 OF  oFldFam:aDialogs[nFldB78] PIXEL //"Trans. Saldo"
		oBotAde:cTOOLTIP := STR0193 //"Transferência de saldo"

		@ (nLinGetDad-7), 060 BUTTON oBotAd1 PROMPT STR0239 ACTION {|| PL260ABASA()} SIZE 45,11 OF  oFldFam:aDialogs[nFldB78] PIXEL //"Abat. de saldo"
		oBotAd1:cTOOLTIP := STR0198 //"Abatimento de saldo"
	Else
		oBrwB78 := TPLSBrw():New(005,005,nColGetDad,nLinGetDad,nil,oFldFam:aDialogs[nFldB78],nil, nil,nil,nil, nil, .T.  ,nil,.T. ,nil ,aCabB78 ,aDadB78 ,.F.,"B78" ,K_Visualizar,STR0191,nil,nil,nil,aTrbB78) //"Parcelamento"
		@ nLinButton, 005 BUTTON oBotAde PROMPT STR0194 ACTION {|| PL260SALD() } SIZE 45,11 OF  oFldFam:aDialogs[nFldB78] PIXEL //"Trans. Saldo"
		oBotAde:cTOOLTIP := STR0193 //"Transferência de saldo"

		@ nLinButton, 055 BUTTON oBotAd1 PROMPT STR0239 ACTION {|| PL260ABASA()} SIZE 45,11 OF  oFldFam:aDialogs[nFldB78] PIXEL //"Abat. de saldo"
		oBotAd1:cTOOLTIP := STR0198 //"Abatimento de saldo"
	Endif

EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Proteção Financeira...                                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCriaB1S
	bFilter            := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("B1S_TIPREG",aHeader)]==cTipReg }
	oBrwB1S            := TPLSBrw():New(003,003,aPosObj[2][3]-15,aPosObj[2][4]/2-nTam,nil  ,oFldUsr:aDialogs[nFldB1S],nil    , nil       ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabB1S,aDadB1S ,.F. ,"B1S" ,nOpcx,"Proteção Financeira",nil,nil,nil,aTrbB1S,,,bFilter)
	oBrwB1S:oPai       := oBrwUsr
	oBrwB1S:aOrigem    := {"BA1_TIPREG"}
	oBrwB1S:aRelac     := {"B1S_TIPREG"}
EndIf

Return

function PLSA260AP()

BA1->( dbSetorder(3) )
BA1->(MsSeek(xFilial() + oBrwUsr:aCols[oBrwUsr:Linha()][oBrwUsr:PlRetPos("BA1_NOMUSR")]))

return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³ PLSA260CDE ³ Autor ³ Tulio Cesar      ³ Data ³ 16.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri??o ³                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260CDE(nOpc)
Local aPosObj   := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Salva dados...                                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dados do dialogo...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL oDlg
LOCAL nOpca      := 0
LOCAL bFilter
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dados do browse...                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL oBrwBYY    := {}
LOCAL aDadBYY    := {}
LOCAL aCabBYY    := {}
LOCAL aTrbBYY    := {}
LOCAL cCodInt    := M->BA3_CODINT
LOCAL cCodEmp    := M->BA3_CODEMP
LOCAL cMatric    := M->BA3_MATRIC
LOCAL cTipReg    := oBrwUsr:FieldGet("BA1_TIPREG",oBrwUsr:Linha(),oBrwUsr:aHeader)
LOCAL cNomUsr    := oBrwUsr:FieldGet("BA1_NOMUSR",oBrwUsr:Linha(),oBrwUsr:aHeader)
PRIVATE cCid     := oBrwDoe:FieldGet("BF3_CODDOE",oBrwDoe:Linha(),oBrwDoe:aHeader)

aSize := MsAdvSize()
aObjects := {}
AAdd( aObjects, { 100, 20, .t., .f. } )
AAdd( aObjects, { 100, 100, .t., .t., .t. } )

aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 3, 3 }
aPosObj := MsObjSize( aInfo, aObjects )
nLinButton	:= aPosObj[2][4]-45
nLinGetDad	:= aPosObj[2][4]-50
nColGetDad	:= aPosObj[2][3]-10

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Esta rotina so sera usada na alteracao...                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpc <> K_Alterar
	MsgInfo(OemtoAnsi(STR0136))  //"Este botao esta disponivel somente na opcao Alterar"
	Return
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta aCols e aHeader...                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Store Header "BYY" TO aCabBYY For .T.
If nOpc == K_Incluir
	Store COLS Blank "BYY" TO aDadBYY FROM aCabBYY
Else
	BYY->(DbSetOrder(2)) //BYY_FILIAL + BYY_CODINT + BYY_CODEMP + BYY_MATRIC + BYY_TIPREG + BYY_CODDOE
	If BYY->(MsSeek(xFilial("BYY")+cCodInt+cCodEmp+cMatric+cTipReg+cCid))
		Store COLS "BYY" TO aDadBYY FROM aCabBYY VETTRAB aTrbBYY While BYY->(BYY_FILIAL+BYY_CODINT+BYY_CODEMP+BYY_MATRIC+BYY_TIPREG+BYY_CODDOE) == xFilial("BYY")+cCodInt+cCodEmp+cMatric+cTipReg+cCid
	Else
		Store COLS Blank "BYY" TO aDadBYY FROM aCabBYY
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dialogo...                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0137)+ALLTRIM(cCid)+" - "+ALLTRIM(cNomUsr) FROM 009,000 TO 029,060 OF GetWndDefault() //"Diferenciacao de Procedimentos CID - "
oDlg:lEscClose := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Procedimentos                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If GetRpoRelease("R5")
	oBrwBYY   := TPLSBrw():New(aPosObj[1][1]+2,aPosObj[1][2]-2,aPosObj[2][4]-75,(aPosObj[2][4]/2)-5,nil  ,oDlg,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBYY ,aDadBYY ,.F. ,"BYY" ,nOpc,  "Diferenciacao de Procedimentos CID - "+ALLTRIM(cCid)+" - "+ALLTRIM(cNomUsr)   ,nil,nil,nil,aTrbBYY,,,)
Else
	oBrwBYY   := TPLSBrw():New(0013,001,237,150,nil  ,oDlg,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBYY ,aDadBYY ,.F. ,"BYY" ,nOpc,  "Diferenciacao de Procedimentos CID - "+ALLTRIM(cCid)+" - "+ALLTRIM(cNomUsr)   ,nil,nil,nil,aTrbBYY,,,)
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa o dialogo...                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ACTIVATE DIALOG oDlg CENTERED ON INIT ( EnchoiceBar(oDlg, {|| nOpca:=1,oDlg:End()},{|| nOpca:= 0,oDlg:End()} ))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso opcao seja confirmada atualiza os dados...                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == K_OK
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Coberturas x Especialidade                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Begin Transaction
		aChave := {}
		aadd(aChave,{"BYY_CODINT",cCodInt})
		aadd(aChave,{"BYY_CODEMP",cCodEmp})
		aadd(aChave,{"BYY_MATRIC",cMatric})
		aadd(aChave,{"BYY_TIPREG",cTipReg})
		oBrwBYY:Grava(aChave, .F.)
	End Transaction
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura dados salvados...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aCols   := aOldCols
aHeader := aOldHeader
n       := nOldN
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina...                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ OpcCob     ³ Autor ³ Eduardo Motta      ³ Data ³ 19.03.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Edicao e visualizacao da cobertura dos prod.opcionais     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ OpcCob()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PLSA660B                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function OpcCob(lOpcVinc)
Local oDlg
Local oFolder
Local oGetBZN
Local oGetBZO
Local oGetBZP
Local oGetBZ0
Local oGetBZ1
Local oGetBZQ
Local oGetBZR
Local oGetBZT
Local oGetBZV

Local bFilter
Local nOpcA := 0
Local oSubFol01
Local oSubFol02
Local oSubFol03
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n
Local oBotCCid
Local oBotCEsp
Local oBotBACA

Default lOpcVinc := .F.

/*
Grupos Determinados     =>  BZN (BT7)
Classe Carencia   	=>	BZO (BHR)
Co-Participacao  	=>	BZP (BHF)
Procedimentos			=>	BZQ (BT8)
CID					=>	BZR (BLU)
Co-Participacao	=>	BZL (BWI)
Especialidade		=>	BZH	(BLI)
Co-Participacao	=>	BZM	(BLX)
*/

If lOpcVinc
	MsgInfo(OemtoAnsi(STR0138)) //"Nao e permitido informar tabela de precos para opcional vinculados!"
	Return(.F.)
Endif

aHeader := {} //aClone(aCabBZN)
aCols   := {} //aClone(aDadBZN)
n := 1

DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0139) FROM ndLinIni,ndColIni TO ndLinFin,ndColFin OF GetWndDefault() //"Opcionais"
@ 020,003 FOLDER oFolder SIZE 350,175 OF oDlg PIXEL PROMPTS  OemtoAnsi(STR0140),;
OemtoAnsi(STR0047),OemtoAnsi(STR0048)

// INICIO
/*
este botao foi colocado porque quanto se editava a primeira linha da getdados oGetBZN nao era
colocado o valor inicial do campo BZN_CODPRO, o motivo eu nao sei, mas o problema aparentemente
ocorria somente no primeiro objeto criado na DLG. Por isso criei este botao que quando focado
executa o SETFOCUS no browse da BZN e aparentemente, para o usuario, nao muda nada e da certo
o programa
Eduardo Motta - 31/03/2003
*/
oBotBACA           := SButton():New(3000, 293, 11, {|| oGetBZN:SetFocus() }, oDlg, .T.)
oBotBACA:bGotFocus := {||oGetBZN:SetFocus()}
// FIM


@ 085,003 FOLDER oSubFol01 SIZE 330,070 OF oFolder:aDialogs[1] PIXEL PROMPTS  	OemtoAnsi(STR0049),; //"Classe Carencia"
OemtoAnsi(STR0130)


// GRUPOS DETERMINADOS
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZN_CODPRO",aHeader,.T.)]== cCodOpc}
oGetBZN := TPLSBrw():New(005,005,330,080 ,nil  ,oFolder:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZN   ,aDadBZN ,.F.      ,"BZN" ,nOpcx,"Grupos Determinados",nil,nil,nil,aVetBZN,,,bFilter)
oGetBZN:oPai    := oBrwOpc
oGetBZN:aOrigem := {"BF1_CODPRO"}
oGetBZN:aRelac  := {"BZN_CODPRO"}
oGetBZN:bLostFocus := {|| cCodGru:= oGetBZN:aCols[oGetBZN:Linha(),oGetBZN:PlRetPos("BZN_CODGRU")], lRefresh := .T. }
cCodGru:= oGetBZN:aCols[oGetBZN:Linha(),oGetBZN:PlRetPos("BZN_CODGRU")]


// CLASSE CARENCIA
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZO_CODPRO",aHeader,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BZO_CODGRU",aHeader,.T.)]== cCodGru}
oGetBZO := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol01:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZO   ,aDadBZO ,.F.      ,"BZO" ,nOpcx,"Classe de Carencia",nil,nil,nil,aVetBZO,,,bFilter)
oGetBZO:oPai    := oGetBZN
oGetBZO:aOrigem := {"BZN_CODPRO","BZN_CODGRU"}
oGetBZO:aRelac  := {"BZO_CODPRO","BZO_CODGRU"}

// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZP_CODPRO",aHeader,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BZP_CODGRU",aHeader,.T.)]== cCodGru}
oGetBZP := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol01:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZP   ,aDadBZP ,.F.      ,"BZP" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBZP,,,bFilter)
oGetBZP:oPai    := oGetBZN
oGetBZP:aOrigem := {"BZN_CODPRO","BZN_CODGRU"}
oGetBZP:aRelac  := {"BZP_CODPRO","BZP_CODGRU"}



// PROCEDIMENTOS
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZQ_CODPRO",aHeader,.T.)]== cCodOpc}
oGetBZQ := TPLSBrw():New(005,005,330,080 ,nil  ,oFolder:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZQ   ,aDadBZQ ,.F.      ,"BZQ" ,nOpcx,"Procedimentos",nil,nil,nil,aVetBZQ,,,bFilter)
oGetBZQ:oPai    := oBrwOpc
oGetBZQ:aOrigem := {"BHS_CODPRO","BHS_CODPLA"}
oGetBZQ:aRelac  := {"BZQ_CODIGO","BZQ_CODOPC"}
oGetBZQ:bLostFocus := {|| cCodPadOpc:= oGetBZQ:FieldGet("BZQ_CODPAD"),cCodPsaOpc:= oGetBZQ:FieldGet("BZQ_CODPSA"), lRefresh := .T. }
cCodPadOpc	:= oGetBZQ:FieldGet("BZQ_CODPAD")
cCodPsaOpc	:= oGetBZQ:FieldGet("BZQ_CODPSA")


@ 085,003 FOLDER oSubFol02 SIZE 330,070 OF oFolder:aDialogs[2] PIXEL PROMPTS  	"CID",;
OemtoAnsi(STR0131),OemtoAnsi(STR0130)
// CID
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZR_CODPRO",aHeader,.T.)]== cCodOpc .And. aCols[nLine,PLRETPOS("BZR_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BZR_CODPSA",aHeader,.T.)]== cCodPsaOpc }
oGetBZR := TPLSBrw():New(005,005,280,055 ,nil  ,oSubFol02:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZR   ,aDadBZR ,.F.      ,"BZR" ,nOpcx,"CID",nil,nil,nil,aVetBZR,,,bFilter)
oGetBZR:bLostFocus := {|| cOpcCID:= oGetBZR:FieldGet("BZR_CID"), lRefresh := .T. }
oGetBZR:oPai    := oGetBZQ
oGetBZR:aOrigem := {"BZQ_CODPRO","BZQ_CODPAD","BZQ_CODPSA"}
oGetBZR:aRelac  := {"BZR_CODPRO","BZR_CODPAD","BZR_CODPSA"}

@ 030, 285 BUTTON oBotCCid PROMPT STR0130 ACTION {|| BZRCoParCid(oGetBZR) };
  SIZE 40,11 OF  oSubFol02:aDialogs[1] PIXEL //"Co-Participacao"
oBotCCid:cTOOLTIP   := OemtoAnsi(STR0130) //"Co-Participacao"

// ESPECIALIDADE
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZT_CODPRO",aHeader,.T.)]== cCodOpc .And. aCols[nLine,PLRETPOS("BZT_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BZT_CODPSA",aHeader,.T.)]== cCodPsaOpc }
oGetBZT := TPLSBrw():New(005,005,280,055 ,nil  ,oSubFol02:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZT   ,aDadBZT ,.F.      ,"BZT" ,nOpcx,"Especialidade",nil,nil,nil,aVetBZT,,,bFilter)
oGetBZT:bLostFocus := {|| cOpcESP:= oGetBZT:FieldGet("BZT_CODESP"), lRefresh := .T. }
oGetBZT:oPai    := oGetBZQ
oGetBZT:aOrigem := {"BZQ_CODPRO","BZQ_CODPAD","BZQ_CODPSA"}
oGetBZT:aRelac  := {"BZT_CODPRO","BZT_CODPAD","BZT_CODPSA"}

@ 030, 285 BUTTON oBotCEsp PROMPT STR0130 ACTION {|| CoParEsp(oGetBZT) };
  SIZE 40,11 OF  oSubFol02:aDialogs[2] PIXEL //"Co-Participacao"
oBotCEsp:cTOOLTIP   := OemtoAnsi(STR0130) //"Co-Participacao"

// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZV_CODPRO",aHeader,.T.)]== cCodOpc .And. aCols[nLine,PLRETPOS("BZV_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BZV_CODPSA",aHeader,.T.)]== cCodPsaOpc }
oGetBZV := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol02:aDialogs[3],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZV   ,aDadBZV ,.F.      ,"BZV" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBZV,,,bFilter)
oGetBZV:oPai    := oGetBZQ
oGetBZV:aOrigem := {"BZQ_CODPRO","BZQ_CODPAD","BZQ_CODPSA"}
oGetBZV:aRelac  := {"BZV_CODPRO","BZV_CODPAD","BZV_CODPSA"}


// GRUPO DE QUANTIDADE

bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZ0_CODPRO",aCabBZ0,.T.)]== cCodOpc}
oGetBZ0 := TPLSBrw():New(005,005,330,080 ,nil  ,oFolder:aDialogs[3],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZ0   ,aDadBZ0 ,.F.      ,"BZ0" ,nOpcx,"Grupos de Quantidade",nil,nil,nil,aVetBZ0,,,bFilter)
oGetBZ0:oPai    := oBrwOpc
oGetBZ0:aOrigem := {"BHS_CODPRO","BHS_CODPLA"}
oGetBZ0:aRelac  := {"BZ0_CODIGO","BZ0_CODOPC"}
oGetBZ0:bLostFocus := {|| cCodGQuan:= oGetBZ0:aCols[oGetBZ0:Linha(),oGetBZ0:PlRetPos("BZ0_CODGRU")], lRefresh := .T. }
cCodGQuan:= oGetBZ0:aCols[oGetBZ0:Linha(),oGetBZ0:PlRetPos("BZ0_CODGRU")]

@ 085,003 FOLDER oSubFol03 SIZE 330,070 OF oFolder:aDialogs[3] PIXEL PROMPTS OemtoAnsi(STR0130) //"Co-Participacao"

// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZ1_CODPRO",aHeader,.T.)]== cCodOpc}
oGetBZ1 := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol03:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZ1   ,aDadBZ1 ,.F.      ,"BZ1" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBZ1,,,bFilter)
oGetBZ1:oPai    := oGetBZ0
oGetBZ1:aOrigem := {"BZ0_CODPRO","BZ0_CODPLA","BZ0_CODGRU"}
oGetBZ1:aRelac  := {"BZ1_CODIGO","BZ1_CODOPC","BZ1_CODGRU"}

aHeader := aCabBZN
aCols   := aDadBZN
n       := 1
ACTIVATE MSDIALOG oDlg CENTER ON INIT EnchoiceBar(oDlg,{|| nOpca := 1,PlsEndBrw(),oDlg:End()},{|| nOpca := 2,oDlg:End()})


If nOpca == 1
	aDadBZN := aClone(oGetBZN:aCols)
	aDadBZO := aClone(oGetBZO:aCols)
	aDadBZP := aClone(oGetBZP:aCols)
	aDadBZQ := aClone(oGetBZQ:aCols)
	aDadBZR := aClone(oGetBZR:aCols)
	aDadBZT := aClone(oGetBZT:aCols)
	aDadBZV := aClone(oGetBZV:aCols)

	aDadBZ0 := aClone(oGetBZ0:aCols)
	aDadBZ1 := aClone(oGetBZ1:aCols)
EndIf

aCols   := aClone(aOldCols)
aHeader := aClone(aOldHeader)
n       := nOldN
Return

Static Function BZRCoParCid(oGetBZR)
Local oDlg
LOCAL nOpca      := 0
LOCAL cDesCID 	 := Posicione("BA9",1,xFilial("BA9")+cOPCCID,"BA9_DOENCA")
Local oGetBZS
Local oBotBACA
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n

aHeader := {} //aClone(aCabBZN)
aCols   := {} //aClone(aDadBZN)
n := 1

DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0124)+ALLTRIM(cOPCCID)+" - "+ALLTRIM(cDesCID) FROM 009,000 TO 029,060 OF GetWndDefault()
oDlg:lEscClose := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Procedimentos                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
// INICIO
/*
Botao colocado porque nunca uma getdados pode ser o primeiro objeto de um dialogo.
Eduardo Motta - 31/03/2003
*/
oBotBACA           := SButton():New(3000, 293, 11, {|| oGetBZS:SetFocus() }, oDlg, .T.)
oBotBACA:bGotFocus := {||oGetBZS:SetFocus()}
// FIM

bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZS_CODPRO",aHeader,.T.)]== cCodOpc .And. aCols[nLine,PLRETPOS("BZS_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BZS_CODPSA",aHeader,.T.)]== cCodPsaOpc .And. aCols[nLine,PLRETPOS("BZS_CID",aHeader,.T.)]== cOPCCID}
oGetBZS := TPLSBrw():New(0013,001,237,150 ,nil  ,oDlg,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZS   ,aDadBZS ,.F.      ,"BZS" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBZS,,,bFilter)
oGetBZS:oPai    := oGetBZR
oGetBZR:aOrigem := {"BZR_CODPRO","BZR_CODPAD","BZR_CODPSA","BZR_CID"}
oGetBZR:aRelac  := {"BZS_CODPRO","BZS_CODPAD","BZS_CODPSA","BZS_CID"}

aHeader := aCabBZS
aCols   := aDadBZS
n       := 1

ACTIVATE DIALOG oDlg CENTERED ON INIT ( EnchoiceBar(oDlg, {|| nOpca:=1,PlsEndBrw(),oDlg:End()},{|| nOpca:= 0,oDlg:End()} ))

If nOpca == 1
	aDadBZS := aClone(oGetBZS:aCols)
Endif

aCols   := aOldCols
aHeader := aOldHeader
n       := nOldN

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  03/23/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function CoParEsp(oGetBZT)
Local oDlg
LOCAL nOpca      := 0
LOCAL cDesESP 	 := Posicione("BAQ",1,xFilial("BAQ")+M->BA3_CODINT+cOPCESP,"BAQ_DESCRI")
Local oGetBZU
Local oBotBACA
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n

aHeader := {} //aClone(aCabBZN)
aCols   := {} //aClone(aDadBZN)
n := 1

DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0124)+ALLTRIM(cOPCESP)+" - "+ALLTRIM(cDesESP) FROM 009,000 TO 029,060 OF GetWndDefault()
oDlg:lEscClose := .F.
// INICIO
/*
Botao colocado porque nunca uma getdados pode ser o primeiro objeto de um dialogo.
Eduardo Motta - 31/03/2003
*/

oBotBACA           := SButton():New(3000, 293, 11, {|| oGetBZU:SetFocus() }, oDlg, .T.)
oBotBACA:bGotFocus := {||oGetBZU:SetFocus()}
// FIM
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Procedimentos                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BZU_CODPRO",aHeader,.T.)]== cCodOpc .And. aCols[nLine,PLRETPOS("BZU_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BZU_CODPSA",aHeader,.T.)]== cCodPsaOpc .And. aCols[nLine,PLRETPOS("BZU_CODESP",aHeader,.T.)]== cOPCESP }
oGetBZU := TPLSBrw():New(0013,001,237,150 ,nil  ,oDlg,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBZU   ,aDadBZU ,.F.      ,"BZU" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBZU,,,bFilter)
oGetBZU:oPai    := oGetBZT
oGetBZU:aOrigem := {"BZT_CODPRO","BZT_CODPAD","BZT_CODPSA","BZT_CODESP"}
oGetBZU:aRelac  := {"BZU_CODPRO","BZU_CODPAD","BZU_CODPSA","BZU_CODESP"}

aHeader := aCabBZU
aCols   := aDadBZU
n       := 1

ACTIVATE DIALOG oDlg CENTERED ON INIT ( EnchoiceBar(oDlg, {|| nOpca:=1,PlsEndBrw(),oDlg:End()},{|| nOpca:= 0,oDlg:End()} ))

If nOpca == 1
	aDadBZU := aClone(oGetBZU:aCols)
Endif

aCols   := aOldCols
aHeader := aOldHeader
n       := nOldN

Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  03/23/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Plsa260V1()
Return PLSGATNIV(M->BZQ_CODPAD,M->BZQ_CODPSA,"BZQ")

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ OpcCob2    ³ Autor ³ Eduardo Motta      ³ Data ³ 19.03.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Edicao e visualizacao da cobertura dos prod.opcionais     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ OpcCob2()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PLSA260                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function OpcCob2()
Local oDlg
Local oFolder
Local bFilter
Local nOpcA := 0
Local oSubFol01
Local oSubFol02
Local oSubFol03
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n
Local oBotCCid
Local oBotCEsp
Local oBotBACA
PRIVATE cCodOpc     := cUCodOpc
PRIVATE cCodGru     := cUCodGru
PRIVATE cCodPadOpc  := cUCodPadOpc
PRIVATE cCodPSAOpc  := cUCodPSAOpc
PRIVATE cOpcCID     := cUOpcCID
PRIVATE cOpcEsp     := cUOpcEsp
PRIVATE cCodGQuan   := cUCodGQuan

/*
Grupos Determinados     =>  BV0 (BT7)
Classe Carencia   	=>	BV1 (BHR)
Co-Participacao  	=>	BV2 (BHF)
Procedimentos			=>	BV3 (BT8)
CID					=>	BV4 (BLU)
Co-Participacao	=>	BZL (BWI)
Especialidade		=>	BZH	(BLI)
Co-Participacao	=>	BZM	(BLX)
Grupos de Quantidades	=>	BV9	(BW6)
*/

aHeader := {} //aClone(aCabBV0)
aCols   := {} //aClone(aDadBV0)
n := 1

DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0139) FROM ndLinIni,ndColIni TO ndLinFin,ndColFin OF GetWndDefault() //"Opcionais"
@ 020,003 FOLDER oFolder SIZE 350,175 OF oDlg PIXEL PROMPTS  OemtoAnsi(STR0140),; //"Grupos Determinados
OemtoAnsi(STR0047),OemtoAnsi(STR0048)

// INICIO
/*
este botao foi colocado porque quanto se editava a primeira linha da getdados oGetBV0 nao era
colocado o valor inicial do campo BV0_CODPRO, o motivo eu nao sei, mas o problema aparentemente
ocorria somente no primeiro objeto criado na DLG. Por isso criei este botao que quando focado
executa o SETFOCUS no browse da BV0 e aparentemente, para o usuario, nao muda nada e da certo
o programa
Eduardo Motta - 31/03/2003
*/
oBotBACA           := SButton():New(3000, 293, 11, {|| oGetBV0:SetFocus() }, oDlg, .T.)
oBotBACA:bGotFocus := {||oGetBV0:SetFocus()}
// FIM


@ 085,003 FOLDER oSubFol01 SIZE 330,070 OF oFolder:aDialogs[1] PIXEL PROMPTS  	OemtoAnsi(STR0049),; //"Classe Carencia"
OemtoAnsi(STR0130) //"Co-Participacao"


// GRUPOS DETERMINADOS
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV0_CODPRO",aHeader,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BV0_TIPREG",aHeader,.T.)]== cTipReg}
oGetBV0 := TPLSBrw():New(005,005,330,080 ,nil  ,oFolder:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV0   ,aDadBV0 ,.F.      ,"BV0" ,nOpcx,"Grupos Determinados",nil,nil,nil,aVetBV0,,,bFilter)
oGetBV0:oPai    := oBrwOUsu
oGetBV0:aOrigem := {"BF4_CODPRO","BF4_TIPREG"}
oGetBV0:aRelac  := {"BV0_CODPRO","BV0_TIPREG"}
oGetBV0:bLostFocus := {|| cCodGru:= oGetBV0:aCols[oGetBV0:Linha(),oGetBV0:PlRetPos("BV0_CODGRU")], lRefresh := .T. }
cCodGru:= oGetBV0:aCols[oGetBV0:Linha(),oGetBV0:PlRetPos("BV0_CODGRU")]


// CLASSE CARENCIA
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV1_CODPRO",aHeader,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BV1_TIPREG",aHeader,.T.)]== cTipReg .AND. aCols[nLine,PLRETPOS("BV1_CODGRU",aHeader,.T.)]== cCodGru}
oGetBV1 := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol01:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV1   ,aDadBV1 ,.F.      ,"BV1" ,nOpcx,"Classe de Carencia",nil,nil,nil,aVetBV1,,,bFilter)
oGetBV1:oPai    := oGetBV0
oGetBV1:aOrigem := {"BV0_CODPRO","BV0_TIPREG","BV0_CODGRU"}
oGetBV1:aRelac  := {"BV1_CODPRO","BV1_TIPREG","BV1_CODGRU"}

// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV2_CODPRO",aHeader,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BV2_TIPREG",aHeader,.T.)]== cTipReg .AND. aCols[nLine,PLRETPOS("BV2_CODGRU",aHeader,.T.)]== cCodGru}
oGetBV2 := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol01:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV2   ,aDadBV2 ,.F.      ,"BV2" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBV2,,,bFilter)
oGetBV2:oPai    := oGetBV0
oGetBV2:aOrigem := {"BV0_CODPRO","BV0_TIPREG","BV0_CODGRU"}
oGetBV2:aRelac  := {"BV2_CODPRO","BV2_TIPREG","BV2_CODGRU"}



// PROCEDIMENTOS
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV3_CODPRO",aHeader,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BV3_TIPREG",aHeader,.T.)]== cTipReg}
oGetBV3 := TPLSBrw():New(005,005,330,080 ,nil  ,oFolder:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV3   ,aDadBV3 ,.F.      ,"BV3" ,nOpcx,"Procedimentos",nil,nil,nil,aVetBV3,,,bFilter)
oGetBV3:oPai    := oBrwOUsu
oGetBV3:aOrigem := {"BF4_CODPRO","BF4_TIPREG"}
oGetBV3:aRelac  := {"BV3_CODPRO","BV3_TIPREG"}
oGetBV3:bLostFocus := {|| cCodPadOpc:= oGetBV3:FieldGet("BV3_CODPAD"),cCodPsaOpc:= oGetBV3:FieldGet("BV3_CODPSA"), lRefresh := .T.,oGetBV4:ForceRefresh(oGetBV3) }
oGetBV3:bChange    := {||oGetBV4:ForceRefresh(oGetBV3) }



cCodPadOpc	:= oGetBV3:FieldGet("BV3_CODPAD")
cCodPsaOpc	:= oGetBV3:FieldGet("BV3_CODPSA")


@ 085,003 FOLDER oSubFol02 SIZE 330,070 OF oFolder:aDialogs[2] PIXEL PROMPTS  	"CID",;
OemtoAnsi(STR0131),OemtoAnsi(STR0130)
// CID

oGetBV4:=Nil


bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV4_CODPRO",aHeader,.T.)]== cCodOpc  .AND. aCols[nLine,PLRETPOS("BV4_TIPREG",aHeader,.T.)]== cTipReg .And. aCols[nLine,PLRETPOS("BV4_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BV4_CODPSA",aHeader,.T.)]== cCodPsaOpc }

oGetBV4 := TPLSBrw():New(005,005,280,055 ,nil  ,oSubFol02:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV4   ,aDadBV4 ,.F.      ,"BV4" ,nOpcx,"CID",nil,nil,nil,aVetBV4,,,bFilter)
oGetBV4:bLostFocus := {|| cOpcCID:= oGetBV4:FieldGet("BV4_CID"), lRefresh := .T.,oGetBV4:ForceRefresh(oGetBV3) }
oGetBV4:oPai    := oGetBV3
oGetBV4:aOrigem := {"BV3_CODPRO","BV3_TIPREG","BV3_CODPAD","BV3_CODPSA"}
oGetBV4:aRelac  := {"BV4_CODPRO","BV4_TIPREG","BV4_CODPAD","BV4_CODPSA"}


@ 030, 285 BUTTON oBotCCid PROMPT STR0130 ACTION {|| Co2ParCid(oGetBV4) };
  SIZE 40,11 OF  oSubFol02:aDialogs[1] PIXEL //"Co-Participacao"
oBotCCid:cTOOLTIP  := OemtoAnsi(STR0130) //"Co-Participacao"




// ESPECIALIDADE
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV6_CODPRO",aHeader,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BV6_TIPREG",aHeader,.T.)]== cTipReg .And. aCols[nLine,PLRETPOS("BV6_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BV6_CODPSA",aHeader,.T.)]== cCodPsaOpc }
oGetBV6 := TPLSBrw():New(005,005,280,055 ,nil  ,oSubFol02:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV6   ,aDadBV6 ,.F.      ,"BV6" ,nOpcx,"Especialidade",nil,nil,nil,aVetBV6,,,bFilter)
oGetBV6:bLostFocus := {|| cOpcESP:= oGetBV6:FieldGet("BV6_CODESP"), lRefresh := .T. }
oGetBV6:oPai    := oGetBV3
oGetBV6:aOrigem := {"BV3_CODPRO","BV3_TIPREG","BV3_CODPAD","BV3_CODPSA"}
oGetBV6:aRelac  := {"BV6_CODPRO","BV6_TIPREG","BV6_CODPAD","BV6_CODPSA"}

@ 030, 285 BUTTON oBotCEsp PROMPT STR0130 ACTION {|| Co2ParEsp(oGetBV6) };
  SIZE 40,11 OF  oSubFol02:aDialogs[2] PIXEL //"Co-Participacao"
oBotCEsp:cTOOLTIP  := OemtoAnsi(STR0130) //"Co-Participacao"


// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV8_CODPRO",aHeader,.T.)]== cCodOpc  .AND. aCols[nLine,PLRETPOS("BV8_TIPREG",aHeader,.T.)]== cTipReg .And. aCols[nLine,PLRETPOS("BV8_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BV8_CODPSA",aHeader,.T.)]== cCodPsaOpc }
oGetBV8 := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol02:aDialogs[3],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV8   ,aDadBV8 ,.F.      ,"BV8" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBV8,,,bFilter)
oGetBV8:oPai    := oGetBV3
oGetBV8:aOrigem := {"BV3_CODPRO","BV3_TIPREG","BV3_CODPAD","BV3_CODPSA"}
oGetBV8:aRelac  := {"BV8_CODPRO","BV8_TIPREG","BV8_CODPAD","BV8_CODPSA"}

// GRUPO DE QUANTIDADE
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV9_CODPRO",aCabBV9,.T.)]== cCodOpc .AND. aCols[nLine,PLRETPOS("BV9_TIPREG",aHeader,.T.)]== cTipReg}
oGetBV9 := TPLSBrw():New(005,005,330,080 ,nil  ,oFolder:aDialogs[3],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV9   ,aDadBV9 ,.F.      ,"BV9" ,nOpcx,"Grupos de Quantidade",nil,nil,nil,aVetBV9,,,bFilter)
oGetBV9:oPai    := oBrwOUsu
oGetBV9:aOrigem := {"BF4_CODPRO","BF4_TIPREG"}
oGetBV9:aRelac  := {"BV9_CODPRO","BV9_TIPREG"}
oGetBV9:bLostFocus := {|| cCodGQuan:= oGetBV9:aCols[oGetBV9:Linha(),oGetBV9:PlRetPos("BV9_CODGRU")], lRefresh := .T. }
cCodGQuan:= oGetBV9:aCols[oGetBV9:Linha(),oGetBV9:PlRetPos("BV9_CODGRU")]

@ 085,003 FOLDER oSubFol03 SIZE 330,070 OF oFolder:aDialogs[3] PIXEL PROMPTS  OemtoAnsi(STR0130)	//"Co-Participacao"

// CO-PARTICIPACAO
bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BVA_CODPRO",aHeader,.T.)]== cCodOpc  .AND. aCols[nLine,PLRETPOS("BVA_TIPREG",aHeader,.T.)]== cTipReg}
oGetBVA := TPLSBrw():New(005,005,330,055 ,nil  ,oSubFol03:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVA   ,aDadBVA ,.F.      ,"BVA" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBVA,,,bFilter)
oGetBVA:oPai    := oGetBV9
oGetBVA:aOrigem := {"BV9_CODPRO","BV9_TIPREG","BV9_CODGRU"}
oGetBVA:aRelac  := {"BVA_CODPRO","BVA_TIPREG","BVA_CODGRU"}

aHeader := aCabBV0
aCols   := aDadBV0
n       := 1
ACTIVATE MSDIALOG oDlg CENTER ON INIT EnchoiceBar(oDlg,{|| nOpca := 1,PlsEndBrw(),oDlg:End()},{|| nOpca := 2,oDlg:End()})


If nOpca == 1
	aDadBV0 := aClone(oGetBV0:aCols)
	aDadBV1 := aClone(oGetBV1:aCols)
	aDadBV2 := aClone(oGetBV2:aCols)
	aDadBV3 := aClone(oGetBV3:aCols)
	aDadBV4 := aClone(oGetBV4:aCols)
	aDadBV6 := aClone(oGetBV6:aCols)
	aDadBV8 := aClone(oGetBV8:aCols)

	aDadBV9 := aClone(oGetBV9:aCols)
	aDadBVA := aClone(oGetBVA:aCols)
EndIf

cUCodOpc     := cCodOpc
cUCodGru     := cCodGru
cUCodPadOpc  := cCodPadOpc
cUCodPSAOpc  := cCodPSAOpc
cUOpcCID     := cOpcCID
cUOpcEsp     := cOpcEsp
cUCodGQuan   := cCodGQuan

aCols   := aClone(aOldCols)
aHeader := aClone(aOldHeader)
n       := nOldN
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  03/23/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function Co2ParCid(oGetBV4)
Local oDlg
LOCAL nOpca      := 0
LOCAL cDesCID 	 := ''
Local oBotBACA
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n

cOPCCID:=oGetBV4:FieldGet("BV4_CID")

cDesCID := Posicione("BA9",1,xFilial("BA9")+cOPCCID,"BA9_DOENCA")

aHeader := {} //aClone(aCabBV0)
aCols   := {} //aClone(aDadBV0)
n := 1

DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0124) + ALLTRIM(cOPCCID)+" - "+ALLTRIM(cDesCID) FROM 009,000 TO 029,060 OF GetWndDefault()
oDlg:lEscClose := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Procedimentos                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
// INICIO
/*
Botao colocado porque nunca uma getdados pode ser o primeiro objeto de um dialogo.
Eduardo Motta - 31/03/2003
*/
oBotBACA           := SButton():New(3000, 293, 11, {|| oGetBV5:SetFocus() }, oDlg, .T.)
oBotBACA:bGotFocus := {||oGetBV5:SetFocus()}
// FIM


oGetBV5:=nil

bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV5_CODPRO",aHeader,.T.)]== cCodOpc  .AND. aCols[nLine,PLRETPOS("BV5_TIPREG",aHeader,.T.)]== cTipReg .And. aCols[nLine,PLRETPOS("BV5_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BV5_CODPSA",aHeader,.T.)]== cCodPsaOpc .And. aCols[nLine,PLRETPOS("BV5_CID",aHeader,.T.)]== cOPCCID}
oGetBV5 := TPLSBrw():New(0013,001,237,150 ,nil  ,oDlg,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV5   ,aDadBV5 ,.F.      ,"BV5" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBV5,,,bFilter)
oGetBV5:oPai    := oGetBV4
oGetBV4:aOrigem := {"BV4_CODPRO","BV4_TIPREG","BV4_CODPAD","BV4_CODPSA","BV4_CID"}
oGetBV4:aRelac  := {"BV5_CODPRO","BV5_TIPREG","BV5_CODPAD","BV5_CODPSA","BV5_CID"}

aHeader := aCabBV5
aCols   := aDadBV5
n       := 1

ACTIVATE DIALOG oDlg CENTERED ON INIT ( EnchoiceBar(oDlg, {|| nOpca:=1,PlsEndBrw(),oDlg:End()},{|| nOpca:= 0,oDlg:End()} ))

If nOpca == 1
	aDadBV5 := aClone(oGetBV5:aCols)
Endif

aCols   := aOldCols
aHeader := aOldHeader
n       := nOldN

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  03/23/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Co2ParEsp(oGetBV6)
Local oDlg
LOCAL nOpca      := 0
LOCAL cDesESP 	 := Posicione("BAQ",1,xFilial("BAQ")+M->BA3_CODINT+cOPCESP,"BAQ_DESCRI")
Local oBotBACA
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n

aHeader := {} //aClone(aCabBV0)
aCols   := {} //aClone(aDadBV0)
n := 1

DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0124)+ALLTRIM(cOPCESP)+" - "+ALLTRIM(cDesESP) FROM 009,000 TO 029,060 OF GetWndDefault()
oDlg:lEscClose := .F.
// INICIO
/*
Botao colocado porque nunca uma getdados pode ser o primeiro objeto de um dialogo.
Eduardo Motta - 31/03/2003
*/

oBotBACA           := SButton():New(3000, 293, 11, {|| oGetBV7:SetFocus() }, oDlg, .T.)
oBotBACA:bGotFocus := {||oGetBV7:SetFocus()}
// FIM
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Procedimentos                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

bFilter   := {|nLine,aCols,aHeader|aCols[nLine,PLRETPOS("BV7_CODPRO",aHeader,.T.)]== cCodOpc  .AND. aCols[nLine,PLRETPOS("BV7_TIPREG",aHeader,.T.)]== cTipReg .And. aCols[nLine,PLRETPOS("BV7_CODPAD",aHeader,.T.)]== cCodPadOpc .And. aCols[nLine,PLRETPOS("BV7_CODPSA",aHeader,.T.)]== cCodPsaOpc .And. aCols[nLine,PLRETPOS("BV7_CODESP",aHeader,.T.)]== cOPCESP }
oGetBV7 := TPLSBrw():New(0013,001,237,150 ,nil  ,oDlg,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBV7   ,aDadBV7 ,.F.      ,"BV7" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBV7,,,bFilter)
oGetBV7:oPai    := oGetBV6
oGetBV7:aOrigem := {"BV6_CODPRO","BV6_TIPREG","BV6_CODPAD","BV6_CODPSA","BV6_CODESP"}
oGetBV7:aRelac  := {"BV7_CODPRO","BV7_TIPREG","BV7_CODPAD","BV7_CODPSA","BV7_CODESP"}

aHeader := aCabBV7
aCols   := aDadBV7
n       := 1

ACTIVATE DIALOG oDlg CENTERED ON INIT ( EnchoiceBar(oDlg, {|| nOpca:=1,PlsEndBrw(),oDlg:End()},{|| nOpca:= 0,oDlg:End()} ))

If nOpca == 1
	aDadBV7 := aClone(oGetBV7:aCols)
Endif

aCols   := aOldCols
aHeader := aOldHeader
n       := nOldN

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  03/23/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function Plsa260V2()
Return PLSGATNIV(M->BV3_CODPAD,M->BV3_CODPSA,"BV3")



/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ UsrOpcCob  ³ Autor ³ Eduardo Motta      ³ Data ³ 11.04.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Edicao e visualizacao da cobertura dos prod.opcionais     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ OpcCob()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PLSA660B                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function UsrOpcCob()
Local oDlg
Local oFolder

Local bFilter
Local nOpcA := 0
Local oSubFol01
Local oSubFol02
Local oSubFol03
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n
Local oBotCCid
Local oBotCEsp
Local oBotBACA
LOCAL aButtBVJ	:= {}
LOCAL aButtBVM	:= {}

If Empty(aDadBFE) 
	PL260POPDAD("BFE",aCabBFE,aDadBFE,aVetBFE)
EndIf

If Empty(aDadBFG)
	PL260POPDAD("BFG",aCabBFG,aDadBFG,aVetBFG)
EndIf

If Empty(aDadBVI)
	PL260POPDAD("BVI",aCabBVI,aDadBVI,aVetBVI)
EndIf

If Empty(aDadBVJ)
	PL260POPDAD("BVJ",aCabBVJ,aDadBVJ,aVetBVJ)
EndIf

If Empty(aDadBVM)
	PL260POPDAD("BVM",aCabBVM,aDadBVM,aVetBVM)
EndIf

If Empty(aDadBW9)
	PL260POPDAD("BW9",aCabBW9,aDadBW9,aTrbBW9)
EndIf

If Empty(aDadBFO)
	PL260POPDAD("BFO",aCabBFO,aDadBFO,aTrbBFO)
EndIf

If Empty(aDadBWA)
	PL260POPDAD("BWA",aCabBWA,aDadBWA,aTrbBWA)
EndIf

/*
Grupos Determinados     =>  BZN (BFE)
Classe Carencia   		=>	BZO (BVI)
Co-Participacao  		=>	BZP (BVJ)
Procedimentos			=>	BZQ (BFG)
CID						=>	BZR (BLU)
Co-Participacao			=>	BZL (BWI)
Especialidade			=>	BZH	(BLI)
Co-Participacao			=>	BZM	(BLX)
Grupos de Quantidades	=>	BZ0	(BW9)
*/

aHeader := {} //aClone(aCabBZN)
aCols   := {} //aClone(aDadBZN)
n := 1

DEFINE MSDIALOG oDlg TITLE Oemtoansi(STR0034) FROM ndLinIni,ndColIni TO ndLinFin+4.5,ndColFin OF GetWndDefault()

@ 35,003 FOLDER oFolder SIZE 350,187 OF oDlg PIXEL PROMPTS  OemtoAnsi(STR0140),;
				Oemtoansi(STR0047),Oemtoansi(STR0048),Oemtoansi(STR0049)

// INICIO
/*
este botao foi colocado porque quanto se editava a primeira linha da getdados oGetBFE nao era
colocado o valor inicial do campo BFE_TIPREG, o motivo eu nao sei, mas o problema aparentemente
ocorria somente no primeiro objeto criado na DLG. Por isso criei este botao que quando focado
executa o SETFOCUS no browse da BFE e aparentemente, para o usuario, nao muda nada e da certo
o programa
Eduardo Motta - 31/03/2003
*/
oBotBACA           	:= SButton():New(3000, 293, 11, {|| oGetBFE:oBrowse:oBrowse:SetFocus() }, oDlg, .T.)
oBotBACA:bGotFocus 	:= {||oGetBFE:oBrowse:oBrowse:SetFocus()}
// FIM

// GRUPOS DETERMINADOS
bFilter            	:= {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BFE_TIPREG",aHeader)]==cTipReg }
oGetBFE            	:= TPLSBrw():New(003,003,345,085,nil  ,oFolder:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBFE   ,aDadBFE ,.F.      ,"BFE" ,nOpcx,"Grupo Cobertura",nil,nil,nil,aVetBFE,,,bFilter)
oGetBFE:oPai       	:= oBrwUsr
oGetBFE:aOrigem    	:= {"BA1_TIPREG"}
oGetBFE:aRelac     	:= {"BFE_TIPREG"}
oGetBFE:bLostFocus 	:= { || cU2CodGru:= oGetBFE:aCols[oGetBFE:Linha(),oGetBFE:PlRetPos("BFE_CODGRU")],;
                            oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:RetCol("BA1_INFGCB")] := If(oGetBFE:VerExiData(),"1","0"),;
                            lRefresh := .T.,oBrwUsr:lAltered := .T.,;
                            oGetBVI:ForceRefresh(oGetBFE), oGetBVJ:ForceRefresh(oGetBFE) }
oGetBFE:bChange 	:= {|| Eval(oGetBFE:bLostFocus) }


@ 085,003 FOLDER oSubFol01 SIZE 340,80 OF oFolder:aDialogs[1] PIXEL PROMPTS Oemtoansi(STR0049),Oemtoansi(STR0130)
	// CLASSE CARENCIA
	bFilter   			:= {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BVI_TIPREG",aHeader)]==cTipReg .AND. aCols[nLine,PLRETPOS("BVI_CODGRU",aHeader,.T.)]== cU2CodGru}
	oGetBVI 			:= TPLSBrw():New(005,005,335,055 ,nil  ,oSubFol01:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVI   ,aDadBVI ,.F.      ,"BVI" ,nOpcx,"Classe de Carencia",nil,nil,nil,aVetBVI,,,bFilter)
	oGetBVI:oPai    	:= oGetBFE
	oGetBVI:aOrigem 	:= {"BFE_TIPREG","BFE_CODGRU"}
	oGetBVI:aRelac  	:= {"BVI_TIPREG","BVI_CODGRU"}

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta botao para visualizacao do historico de reajuste da franquia  |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If PLSALIASEX("B0B")
		Aadd(aButtBVJ, {"BUDGET",{||PL660HTFRA('4',"BVJ",  M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+oGetBVJ:FieldGet("BVJ_TIPREG"),;
															Iif(!Empty(oBrwUsr:FieldGet("BA1_CODPLA")), oBrwUsr:FieldGet("BA1_CODPLA"), M->BA3_CODPLA),;
															Iif(!Empty(oBrwUsr:FieldGet("BA1_VERSAO")), oBrwUsr:FieldGet("BA1_VERSAO"), M->BA3_VERSAO) )},;
														"Historico de reajuste da franquia","Historico"})
	Endif
	// CO-PARTICIPACAO
	bFilter   			:= {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BVJ_TIPREG",aHeader)]==cTipReg .AND. aCols[nLine,PLRETPOS("BVJ_CODGRU",aHeader,.T.)]== cU2CodGru}
	//oGetBVJ 			:= TPLSBrw():New(005,005,325,055 ,nil  ,oSubFol01:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVJ   ,aDadBVJ ,.F.      ,"BVJ" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBVJ,,,bFilter,,aButtBVJ)
	oGetBVJ 			:= TPLSBrw():New(005,005,335,055 ,nil  ,oSubFol01:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVJ   ,aDadBVJ ,.F.      ,"BVJ" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBVJ,'PlsVldBVJ',,bFilter,,aButtBVJ)
	oGetBVJ:oPai    	:= oGetBFE
	oGetBVJ:aOrigem 	:= {"BFE_TIPREG","BFE_CODGRU"}
	oGetBVJ:aRelac  	:= {"BVJ_TIPREG","BVJ_CODGRU"}

// PROCEDIMENTOS
bFilter             := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BFG_TIPREG",aHeader)]==cTipReg }

aButEsp := {{OemtoAnsi(STR0259),{||PlVigDifId("BFG",'M->(BA3_FILIAL+BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+M->(BFG_TIPREG+BFG_CODPAD+BFG_CODPSA+BFG_NIVEL)',M->BFG_DIFIDA)},OemtoAnsi(STR0259),OemtoAnsi(STR0259)}} //#"Period. Dif. Idade"

oGetBFG            	:= TPLSBrw():New(003,003,345,085,nil  ,oFolder:aDialogs[2],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBFG   ,aDadBFG ,.F.      ,"BFG" ,nOpcx,"Procedimentos",nil,nil,nil,aVetBFG,,,bFilter,,aButEsp)
oGetBFG:oPai       	:= oBrwUsr
oGetBFG:aOrigem    	:= {"BA1_TIPREG"}
oGetBFG:aRelac     	:= {"BFG_TIPREG"}
oGetBFG:bChange		:= { || Eval(oGetBFG:bLostFocus), 	oGetBVM:ForceRefresh(oGetBFG)}

oGetBFG:bLostFocus 	:= {|| cCodPad:= oGetBFG:FieldGet("BFG_CODPAD"), cCodPsa:= oGetBFG:FieldGet("BFG_CODPSA"),;
                       oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:RetCol("BA1_INFCOB")] := If(oGetBFG:VerExiData(),"1","0"),oBrwUsr:lAltered := .T., ;
                       cU2CodPad:= oGetBFG:FieldGet("BFG_CODPAD"),cU2CodPsa:= oGetBFG:FieldGet("BFG_CODPSA"), lRefresh := .T. }


@ 085,003 FOLDER oSubFol02 SIZE 340,80 OF oFolder:aDialogs[2] PIXEL PROMPTS  Oemtoansi(STR0130)

	// CO-PARTICIPACAO
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta botao para visualizacao do historico de reajuste da franquia  |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If PLSALIASEX("B0B")
		Aadd(aButtBVM, {"budget",{||PL660HTFRA('4',"BVM",  M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+oGetBVM:FieldGet("BVM_TIPREG"),;
															Iif(!Empty(oBrwUsr:FieldGet("BA1_CODPLA")), oBrwUsr:FieldGet("BA1_CODPLA"), M->BA3_CODPLA),;
															Iif(!Empty(oBrwUsr:FieldGet("BA1_VERSAO")), oBrwUsr:FieldGet("BA1_VERSAO"), M->BA3_VERSAO) )},;
														"Historico de reajuste da franquia","Historico"})
	Endif

	bFilter   			:= {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BVM_TIPREG",aHeader)]==cTipReg .And. aCols[nLine,PLRETPOS("BVM_CODPAD",aHeader,.T.)]== cU2CodPad .And. aCols[nLine,PLRETPOS("BVM_CODPSA",aHeader,.T.)]== cU2CodPsa }
	oGetBVM 			:= TPLSBrw():New(005,005,335,055 ,nil  ,oSubFol02:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBVM   ,aDadBVM ,.F.      ,"BVM" ,nOpcx,"Co-Participacao",nil,nil,nil,aVetBVM,'PlsVldBVM',,bFilter,,aButtBVM)
	oGetBVM:oPai    	:= oGetBFG
	oGetBVM:aOrigem 	:= {"BFG_TIPREG","BFG_CODPAD","BFG_CODPSA"}
	oGetBVM:aRelac  	:= {"BVM_TIPREG","BVM_CODPAD","BVM_CODPSA"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse do Grupo de Quantidades do Usuario                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bFilter             := {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BW9_TIPREG",aHeader)]==cTipReg }
oGetBW9            	:= TPLSBrw():New(003,003,345,085 ,nil  ,oFolder:aDialogs[3],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBW9   ,aDadBW9 ,.F.      ,"BW9" ,nOpcx,"Grupo de Quantidades",nil,nil,nil,aTrbBW9,,,bFilter)
oGetBW9:bLostFocus 	:= {|| cCodGruQtd := oGetBW9:aCols[oGetBW9:Linha(),oGetBW9:FieldPos("BW9_CODGRU",aCabBW9)],cDesGruBW9 := oGetBW9:aCols[oGetBW9:Linha(),oGetBW9:FieldPos("BW9_DESGRU",aCabBW9)], oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:RetCol("BA1_INFCOB")] := If(oGetBW9:VerExiData(),"1","0"), lRefresh := .T.,oBrwUsr:lAltered := .T. }
oGetBW9:bChange    	:= {|| Eval(oGetBW9:bLostFocus)  }
oGetBW9:oPai       	:= oBrwUsr
oGetBW9:aOrigem    	:= {"BA1_TIPREG"}
oGetBW9:aRelac     	:= {"BW9_TIPREG"}

@ 085,003 FOLDER oSubFol03 SIZE 340,80 OF oFolder:aDialogs[3] PIXEL PROMPTS Oemtoansi(STR0130) //"Co-Participacao"

	bFilter				:= {|nLine,aCols,aHeader|aCols[nLine,GdFieldPos("BWA_CODGRU",aHeader)] == cCodGruQtd .and. aCols[nLine,GdFieldPos("BWA_TIPREG",aHeader)] == cTipReg}
	oGetBWA				:= TPLSBrw():New(005,005,335,055,nil  ,oSubFol03:aDialogs[1],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBWA ,aDadBWA ,.F. ,"BWA" ,nOpcx,"Co-participacao:  "+ALLTRIM(cCodGruQtd)+" - "+ALLTRIM(cDesGruQtd),nil,nil,nil,aTrbBWA,,nil,bFilter)
	oGetBWA:oPai     	:= oGetBW9
	oGetBWA:aOrigem  	:= {"BW9_CODGRU"}
	oGetBWA:aRelac   	:= {"BWA_CODGRU"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse da classe de carencia do usuario...                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If PLSALIASEX("BFO")
	bFilter       	:= {|nLine,aCols,aHeader| aCols[nLine,GdFieldPos("BFO_TIPREG",aHeader)]==cTipReg }
	oGetBFO         := TPLSBrw():New(003,003,345,160 ,nil  ,oFolder:aDialogs[4],nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBFO   ,aDadBFO ,.F.      ,"BFO" ,nOpcx,"Classe de Carencia",nil,nil,nil,aTrbBFO,,,bFilter)
	oGetBFO:oPai   	:= oBrwUsr
	oGetBFO:aOrigem	:= {"BA1_TIPREG"}
	oGetBFO:aRelac	:= {"BFO_TIPREG"}
Endif

aHeader := aCabBFE
aCols   := aDadBFE
n       := 1

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Dispara refresh nos sub fonders da rotina...                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Eval(oGetBFG:bChange)
Eval(oGetBFE:bChange)

ACTIVATE MSDIALOG oDlg CENTER ON INIT EnchoiceBar(oDlg,{|| nOpca := 1,PlsEndBrw(),oDlg:End()},{|| nOpca := 2,oDlg:End()})

If nOpca == 1

	aDadBFE := PL260LICOL(oGetBFE:aCols, "BFE")
	aDadBFG := PL260LICOL(oGetBFG:aCols, "BFG")
	aDadBW9 := PL260LICOL(oGetBW9:aCols, "BW9")
	aDadBWA := PL260LICOL(oGetBWA:aCols, "BWA")
	aDadBVI := PL260LICOL(oGetBVI:aCols, "BVI")
	aDadBVJ := PL260LICOL(oGetBVJ:aCols, "BVJ")
	aDadBVM := PL260LICOL(oGetBVM:aCols, "BVM")
	aDadBFO := PL260LICOL(oGetBFO:aCols, "BFO")

    If oGetBFE:VerExiData()
       oBrwUsr:FieldPut("BA1_INFGCB","1")
    Else
       oBrwUsr:FieldPut("BA1_INFGCB","0")
    EndIf

EndIf

aCols   := aClone(aOldCols)
aHeader := aClone(aOldHeader)
n       := nOldN
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³ PLSA260BDK ³ Autor ³ Tulio Cesar      ³ Data ³ 16.03.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri??o ³                                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260BDK(nOpc)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Salva dados...                                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL aOldHeader := aClone(aHeader)
LOCAL aOldCols   := aClone(aCols)
LOCAL nOldN      := n
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dados do dialogo...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL oDlg
LOCAL nOpca      := 0
LOCAL bFilter
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dados do browse...                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cCodInt    := M->BA3_CODINT
LOCAL cCodEmp    := M->BA3_CODEMP
LOCAL cMatric    := M->BA3_MATRIC
LOCAL cTipReg    := oBrwUsr:FieldGet("BA1_TIPREG",oBrwUsr:Linha(),oBrwUsr:aHeader)
LOCAL cNomUsr    := oBrwUsr:FieldGet("BA1_NOMUSR",oBrwUsr:Linha(),oBrwUsr:aHeader)
LOCAL oBrwBDQ    := {}
LOCAL aDadBDQ    := {}
LOCAL aCabBDQ    := {}
LOCAL aTrbBDQ    := {}
PRIVATE cCodFai     := oBrwBDK:FieldGet("BDK_CODFAI",oBrwBDK :Linha(),oBrwBDK :aHeader)

//Verificando se o usuário já possui faixa especifica cadastrada
BDQ->(DbSetOrder(1))

//Verificando se é PF ou PJ
If Empty(M->BA3_SUBCON)
	If ! BDQ->(MsSeek(xFilial("BDQ")+cCodInt+cCodEmp+cMatric+cTipReg))

		If !Empty(oBrwUsr:FieldGet("BA1_CODPLA",oBrwUsr:Linha(),oBrwUsr:aHeader)) .AND. !Empty(oBrwUsr:FieldGet("BA1_VERSAO",oBrwUsr:Linha(),oBrwUsr:aHeader))
			//Se existir faixa de desconto no produto, cadastro na BDQ
			BFS->(DbSetOrder(1))
			If	BFS->(MsSeek( xFilial("BFS") + cCodInt + oBrwUsr:FieldGet("BA1_CODPLA",oBrwUsr:Linha(),oBrwUsr:aHeader) +;
				oBrwUsr:FieldGet("BA1_VERSAO",oBrwUsr:Linha(),oBrwUsr:aHeader) + M->BA3_FORPAG  ))

				While !BFS->( Eof() ) .AND. BFS->(BFS_FILIAL+BFS_CODIGO+BFS_VERSAO+BFS_CODFOR) ==  xFilial("BFS") + cCodInt + oBrwUsr:FieldGet("BA1_CODPLA",oBrwUsr:Linha(),oBrwUsr:aHeader) + oBrwUsr:FieldGet("BA1_VERSAO",oBrwUsr:Linha(),oBrwUsr:aHeader) + M->BA3_FORPAG 
					BDQ->(RecLock("BDQ",.T.))
					BDQ->BDQ_FILIAL := xFilial("BDQ")
					BDQ->BDQ_CODINT := cCodInt
					BDQ->BDQ_CODEMP := cCodEmp
					BDQ->BDQ_MATRIC := cMatric
					BDQ->BDQ_TIPREG := cTipReg
					BDQ->BDQ_CODFAI := BFS->BFS_CODFAI
					BDQ->BDQ_PERCEN := BFS->BFS_PERCEN 
					BDQ->BDQ_VALOR := BFS->BFS_VALOR
					BDQ->BDQ_QTDMIN := BFS->BFS_QTDDE
					BDQ->BDQ_QTDMAX := BFS->BFS_QTDATE
					BDQ->BDQ_TIPO := BFS->BFS_TIPO
					BDQ->BDQ_DATDE := BFS->BFS_DATDE
					BDQ->BDQ_DATATE := BFS->BFS_DATATE
					BDQ->(MsUnLock())
					BFS->(DBSKIP())
				EndDo

			EndIf	
		EndIf

	EndIf
Else
	
	If ! BDQ->(MsSeek(xFilial("BDQ")+cCodInt+cCodEmp+cMatric+cTipReg))
		BFT->(DBSetOrder(1))
		If BFT->(MsSeek( xFilial("BFT") + cCodInt + cCodEmp + M->BA3_CONEMP + M->BA3_VERCON + M->BA3_SUBCON + M->BA3_VERSUB + oBrwUsr:FieldGet("BA1_CODPLA",oBrwUsr:Linha(),oBrwUsr:aHeader);
		+ oBrwUsr:FieldGet("BA1_VERSAO",oBrwUsr:Linha(),oBrwUsr:aHeader) +   M->BA3_FORPAG  ) )
			While !BFT->( Eof()) .AND. BFT->(BFT_FILIAL + BFT_CODIGO + BFT_NUMCON + BFT_VERCON + BFT_SUBCON + BFT_VERSUB + BFT_CODPRO + BFT_VERPRO + BFT_CODFOR) ==;
			xFilial("BFT") + cCodInt + cCodEmp + M->BA3_CONEMP + M->BA3_VERCON + M->BA3_SUBCON + M->BA3_VERSUB + oBrwUsr:FieldGet("BA1_CODPLA",oBrwUsr:Linha(),oBrwUsr:aHeader) +;
			oBrwUsr:FieldGet("BA1_VERSAO",oBrwUsr:Linha(),oBrwUsr:aHeader) +   M->BA3_FORPAG
				BDQ->(RecLock("BDQ",.T.))
				BDQ->BDQ_FILIAL := xFilial("BDQ")
				BDQ->BDQ_CODINT := cCodInt
				BDQ->BDQ_CODEMP := cCodEmp
				BDQ->BDQ_MATRIC := cMatric
				BDQ->BDQ_TIPREG := cTipReg
				BDQ->BDQ_CODFAI := BFT->BFT_CODFAI
				BDQ->BDQ_PERCEN := BFT->BFT_PERCEN 
				BDQ->BDQ_VALOR := BFT->BFT_VALOR
				BDQ->BDQ_QTDMIN := BFT->BFT_QTDDE
				BDQ->BDQ_QTDMAX := BFT->BFT_QTDATE
				BDQ->BDQ_TIPO := BFT->BFT_TIPO
				BDQ->BDQ_DATDE := BFT->BFT_DATDE
				BDQ->BDQ_DATATE := BFT->BFT_DATATE
				BDQ->(MsUnLock())
				BFT->(DBSKIP())
			EndDo
		EndIf
	EndIf
EndIf	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta aCols e aHeader...                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Store Header "BDQ" TO aCabBDQ For .T.
If nOpc == K_Incluir
	Store COLS Blank "BDQ" TO aDadBDQ FROM aCabBDQ
Else
	If BDQ->(MsSeek(xFilial("BDQ")+cCodInt+cCodEmp+cMatric+cTipReg+cCodFai))
		Store COLS "BDQ" TO aDadBDQ FROM aCabBDQ VETTRAB aTrbBDQ While BDQ->(BDQ_FILIAL+BDQ_CODINT+BDQ_CODEMP+BDQ_MATRIC+BDQ_TIPREG+BDQ_CODFAI) == xFilial("BDQ")+cCodInt+cCodEmp+cMatric+cTipReg+cCodFai
	Else
		Store COLS Blank "BDQ" TO aDadBDQ FROM aCabBDQ
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define dialogo...                                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFINE MSDIALOG oDlg TITLE OemtoAnsi(STR0142)+ALLTRIM(cCodFai) FROM 009,000 TO 030,060 OF GetWndDefault() //"Desconto para a faixa - "
oDlg:lEscClose := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Browse dos Procedimentos                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oBrwBDQ   := TPLSBrw():New(0030,001,237,150,nil  ,oDlg,nil    , nil      ,nil    ,nil  , nil, .T.  ,nil   ,.T.   ,nil   ,aCabBDQ ,aDadBDQ ,.F. ,"BDQ" ,nOpc,  "Desconto para a faixa - "+ALLTRIM(cCodFai) ,nil,nil,nil,aTrbBDQ,,,)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa o dialogo...                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ACTIVATE DIALOG oDlg CENTERED ON INIT ( EnchoiceBar(oDlg, {|| nOpca:=1,PlsEndBrw(),oDlg:End()},{|| nOpca:= 0,oDlg:End()} ))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso opcao seja confirmada atualiza os dados...                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == K_OK
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Coberturas x Especialidade                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Begin Transaction

	aChave := {}
	aadd(aChave,{"BDQ_CODINT",cCodInt})
	aadd(aChave,{"BDQ_CODEMP",cCodEmp})
	aadd(aChave,{"BDQ_MATRIC",cMatric})
	oBrwBDQ:Grava(aChave)
	End Transaction
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura dados salvados...                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aCols   := aOldCols
aHeader := aOldHeader
n       := nOldN
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da Rotina...                                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260VLD1ºAutor  ³Microsiga           º Data ³  12/22/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260VLD1
LOCAL lRet := .T.
Local aArea := GetArea()

BA1->(Dbsetorder(3))

If BA1->(MsSeek(xFilial("BA1")+AllTrim(M->BER_NOME)))
	lRet := MsgYesNo(OemtoAnsi(STR0143)) //"Ja existe um usuario com esse nome. Deseja incluir assim mesmo ?"
Endif
RestArea(aArea)

Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  12/22/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260VLD2
LOCAL lRet 		:= .T.
Local cArea 	:= Alias()
Local aAreaBA1 	:= BA1->(GetArea())
LOCAL lExistBA1 := .F.
Local lCPFBloqueado := .F.
Local cCPFBenef := ""

If ! Empty(M->BA1_MATVID)
	BTS->(Dbsetorder(1))
	If BTS->(MsSeek(xFilial("BTS")+AllTrim(M->BA1_MATVID)))
		cCPFBenef := BTS->BTS_CPFUSR
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Valida inclusao de novos dependentes na familia... retirado PLSVLDGD³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("oBrwUsr") == "O"

	lRet := PlsVldGd({"BA1_MATVID","BA1_MOTBLO"},.T.,oBrwUsr:aCols,,,,oBrwUsr:aHeader)
Endif

If lRet
	DbSelectArea("BA1")
	Set Filter To
	Dbsetorder(3)

	If BA1->(MsSeek(xFilial("BA1")+AllTrim(BTS->BTS_NOMUSR)))
		While !BA1->( Eof() ) .and. Alltrim(BA1->BA1_NOMUSR) == Alltrim(BTS->BTS_NOMUSR)  .AND. (BA1->BA1_CPFUSR == BTS->BTS_CPFUSR)
			If (BA1->BA1_CODINT <> M->BA3_CODINT .or.;
			   BA1->BA1_CODEMP <> M->BA3_CODEMP .or.;
			   BA1->BA1_MATRIC <> M->BA3_MATRIC) .and. Empty(BA1->BA1_DATBLO)
				lExistBA1 := .T.
				Exit
			Endif
			BA1->( dbSkip() )
		Enddo

		If lExistBA1
			lRet := MsgYesNo(OemtoAnsi(STR0143)) //"Ja existe um usuario com esse nome. Deseja incluir assim mesmo ?"
		Endif
	Endif

	If Type("oBrwUsr") == "O"
		lCPFBloqueado := CheckCPFFamilia(cCPFBenef,, oBrwUsr)

		If lCPFBloqueado .And. !MsgYesNo("CPF informado já está sendo utilizado na familia em um Beneficiário Bloqueado, deseja continuar?", STR0242)
			lRet := .F.
		EndIf
	EndIf

Endif

If lJuridico .and. !lAmbos
	cFiltro := "BA1_FILIAL = '" + xFilial("BA1") + "' AND BA1_CODINT = '"+Left(BQC->BQC_CODIGO,4)+"' AND BA1_CODEMP = '"+Substr(BQC->BQC_CODIGO,5,4)+"' "
	cFiltro += "AND BA1_CONEMP = '"+BQC->BQC_NUMCON+"' AND BA1_VERCON = '"+BQC->BQC_VERCON+"' "
	cFiltro += "AND BA1_SUBCON = '"+BQC->BQC_SUBCON+"' AND BA1_VERSUB = '"+BQC->BQC_VERSUB+"' "
	cFiltro += "AND D_E_L_E_T_ = ' '"
Elseif !lJuridico .and. !lAmbos
	cFiltro := "BA1_CODINT = '"+BG9->BG9_CODINT + "' AND BA1_CODEMP = '"+BG9->BG9_CODIGO+"' "
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Chama mBrowse padrao...                                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DbSelectArea("BA1")
BA1->(RestArea(aAreaBA1))
If ! Empty(cArea)
	DbSelectArea(cArea)
Endif

Return(lRet)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260VLD4ºAutor  ³Geraldo Felix Juniorº Data ³  12/22/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PLS260VLD4()
LOCAL lRet 		:= .T.

If !Empty(M->BA1_MATANT)
	// Verifica matricula antiga na base de dados pelo indice 2 da tabela BA1.
	lRet := BA1->(ExistChav("BA1",M->BA1_MATANT,2))

	// Depois verifica matricula antiga na base de dados pelo indice 5 da tabela BA1.
	If lRet
		lRet := BA1->(ExistChav("BA1",M->BA1_MATANT,5))
	Endif

	// Depois verifica matricula antiga no acols em digitação, em busca da informacao em memoria.
	If lRet
		lRet := PlsVldGd({"BA1_MATANT","BA1_MOTBLO"},.T.,oBrwUsr:aCols)
	Endif
Endif

Return( lRet )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260REL ºAutor  ³Geraldo Felix Juniorº Data ³  08/06/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ X3_RELACAO Dinamico para o BA3                             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260REL(cReadVar)
LOCAL cRotina 	:= Procname(11)
LOCAL cRetorno	:= ""
If cReadVar == "BA3_CODEMP"
	cReturno := Iif(cRotina=="PLSA260", Iif(Inclui,"",BA3->BA3_CODEMP),Right(BQC->BQC_CODIGO,LEN(BG9->BG9_CODIGO)))
Endif

Return( cRetorno )


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260NOIºAutor  ³Microsiga           º Data ³  06/12/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSA260NOI()
MsgInfo(OemtoAnsi(STR0144)) //'Opcao nao disponivel! Para incluir uma nova familia, va ao menu "Incluir Usuarios"'
Return(NIL)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260BloqSubCtrºAutor³Paulo Carnelossi  º Data ³  06/27/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Verifica se o sub-contrato esta bloqueado                   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A260BloqSubCtr(cNumSub)
Local lRet := .T.
Local aArea := GetArea()

dbSelectArea("BQC")
dbSetOrder(1)

If MsSeek(cNumSub)
	If Empty(BQC_CODBLO)
		lRet := .F.
	EndIf
Else
		lRet := .F.  // se nao tenho contrato nao esta bloqueado
EndIf

RestArea(aArea)

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260BloqFamilia ºAutor³Paulo Carnelossi  º Data ³ 27/06/03  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Verifica se familia esta bloqueada                          º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A260BloqFamilia(cCodFam)
Local lRet := .T.
Local aArea := BA3->(GetArea())

BA3->(dbSetOrder(1))

If BA3->(MsSeek(cCodFam))
	If Empty(BA3->BA3_MOTBLO)
		lRet := .F.
	EndIf
EndIf

RestArea(aArea)

Return(lRet)


/*

Regra de validacao para selecao dos DOCUMENTOS no retorno

ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³DOCUMENTO ³ TIPO ³ GRAU ³ SEXO³ IDADE INICIAL³ IDADE FINAL³ OBRIGATORIO    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 001      ³ IGUAL³ IGUAL³IGUAL³ >=           ³ <=         ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 001      ³ IGUAL³ IGUAL³IGUAL³ >=           ³            ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 001      ³ IGUAL³ IGUAL³IGUAL³              ³            ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 001      ³ IGUAL³ IGUAL³     ³              ³            ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 001      ³ IGUAL³      ³     ³              ³            ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 002      ³ IGUAL³ IGUAL³IGUAL³ >=           ³ <=         ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 002      ³ IGUAL³ IGUAL³IGUAL³ >=           ³            ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 002      ³ IGUAL³ IGUAL³IGUAL³              ³            ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 002      ³ IGUAL³ IGUAL³     ³              ³            ³ NAO IMPORTA    ³
ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
³ 002      ³ IGUAL³      ³     ³              ³            ³ NAO IMPORTA    ³
ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
*/

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSRETDOS ºAutor  ³Marcelo Kotaki      º Data ³  06/17/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao para retornar um array de 2 posicoes contendo        º±±
±±º          ³1 = Codigo do Documento 2 = Obrigatorio S/N                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³PLS                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/


Function PLSRETDOS(	cTpUsuario	,cGrau		,cSexo		,nIdade		,;
cProduto	,cVersao	,cTpGrupo	,cCodOpe 	,;
cCodEmp	,cNumCon 	,cVercon	,cSubCon 	,;
cVerSub	,cCodDoc)


Local aRetorno 	:= {}				// Array de 2 posicoes para retorno
Local aArea		:= GetArea()		// Salva a Area Atual
Local aDocumento:= {}				// Array com todos os documentos que precisam ser validados - BD2
Local nCont		:= 0 				// Contador

If !Empty(cTpGrupo)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Carrega os Documentos                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DbSelectarea("BD2")
	DbSetorder(1)
	MsSeek(xFilial("BD2"))
	While (!Eof()) .AND. xFilial("BD2") == BD2->BD2_FILIAL
		AAdd(aDocumento,BD2->BD2_CODDOC)
		DbSkip()
	End

	For nCont := 1 TO Len(aDocumento)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Executa a leitura do Produtos X DOC Obrigatorios³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectarea("BQP")
		DbSetorder(1)
		If MsSeek(xFilial("BQP")+cCodOpe+cProduto+cVersao)

			While (!BQP->(Eof())) .AND. (BQP->BQP_CODIGO == cCodOpe+cProduto) .AND. (BQP->BQP_VERSAO == cVersao)

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Valida o documento atual de acordo com os Documentos cadastrados no BD2³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				If BQP->BQP_CODDOC <> aDocumento[nCont]
					BQP->(DbSkip())
					Loop
				Endif

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Valida se os campos:                     ³
				//³-Tipo de beneficiario                    ³
				//³-Grau de parentesco                      ³
				//³-Sexo                                    ³
				//³-Idade Minima                            ³
				//³sao identicos aos parametros selecionados³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				lAchou := .F.
				If 	BQP->BQP_TIPUSR == cTpUsuario .AND. ;
					BQP->BQP_GRAUPA == cGrau	  .AND. ;
					BQP->BQP_SEXO	== cSexo	  .AND. ;
					BQP->BQP_IDAINI	>= nIdade	  .AND. ;
					BQP->BQP_IDAFIN	<= nIdade	  .AND. !lAchou

					AADD(aRetorno,{BQP->BQP_CODDOC,BQP->BQP_DOCOBR})
					lAchou := .T.
				Endif

				If 	BQP->BQP_TIPUSR == cTpUsuario .AND. ;
					BQP->BQP_GRAUPA == cGrau	  .AND. ;
					BQP->BQP_SEXO	== cSexo	  .AND. ;
					BQP->BQP_IDAINI	>= nIdade	  .AND. !lAchou

					AADD(aRetorno,{BQP->BQP_CODDOC,BQP->BQP_DOCOBR})
					lAchou := .T.
				Endif

				If 	BQP->BQP_TIPUSR == cTpUsuario .AND. ;
					BQP->BQP_GRAUPA == cGrau	  .AND. ;
					BQP->BQP_SEXO	== cSexo	  .AND. !lAchou

					AADD(aRetorno,{BQP->BQP_CODDOC,BQP->BQP_DOCOBR})
					lAchou := .T.
				Endif

				If 	BQP->BQP_TIPUSR == cTpUsuario .AND. ;
					BQP->BQP_GRAUPA == cGrau	  .AND. !lAchou

					AADD(aRetorno,{BQP->BQP_CODDOC,BQP->BQP_DOCOBR})
					lAchou := .T.
				Endif

				If 	BQP->BQP_TIPUSR == cTpUsuario .AND. !lAchou

					AADD(aRetorno,{BQP->BQP_CODDOC,BQP->BQP_DOCOBR})
					lAchou := .T.
				Endif

				BQP->(DbSkip())
			End
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Se for PESSOA JURIDICA executa a leitura do Docs/Usuarios X SubContratos³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTpGrupo == "002"
			DbSelectarea("BCO")
			DbSetorder(1)
			If MsSeek(xFilial("BCO")+cCodOpe+cCodEmp+cNumCon+cVercon+cSubCon+cVerSub+cCodDoc)

				While ! BCO->(Eof()) .AND. (BCO->BCO_CODOPE == cCodOpe) .AND. ;
					(BCO_CODEMP == cCodEmp) .AND. ;
					(BCO_NUMCON == cNumCon) .AND. ;
					(BCO_VERCON == cVercon) .AND. ;
					(BCO_SUBCON == cSubCon) .AND. ;
					(BCO_VERSUB == cVerSub) .AND. ;
					(BCO_CODDOC == cCodDoc)

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Valida o documento atual de acordo com os Documentos cadastrados no BD2³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

					If BCO->BCO_CODDOC <> aDocumento[nCont]
						BCO->(DbSkip())
						Loop
					Endif

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Valida se os campos:                     ³
					//³-Tipo de beneficiario                    ³
					//³-Grau de parentesco                      ³
					//³-Sexo                                    ³
					//³-Idade Minima                            ³
					//³-Idade Maxima                            ³
					//³sao identicos aos parametros selecionados³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					lAchou := .F.
					If  BCO->BCO_TIPUSR == cTpUsuario .AND. ;
						BCO->BCO_GRAUPA == cGrau	  .AND. ;
						BCO->BCO_SEXO	== cSexo	  .AND. ;
						BCO->BCO_IDAINI	>= nIdade     .AND. ;
						BCO->BCO_IDAINI	<= nIdade     .AND. !lAchou

						AADD(aRetorno,{BCO->BCO_CODDOC,BCO->BCO_DOCOBR})
						lAchou := .T.
					Endif


					If 	BCO->BCO_TIPUSR == cTpUsuario .AND. ;
						BCO->BCO_GRAUPA == cGrau	  .AND. ;
						BCO->BCO_SEXO	== cSexo	  .AND. ;
						BCO->BCO_IDAINI	>= nIdade     .AND. !lAchou

						AADD(aRetorno,{BCO->BCO_CODDOC,BCO->BCO_DOCOBR})
						lAchou := .T.
					Endif

					If 	BCO->BCO_TIPUSR == cTpUsuario .AND. ;
						BCO->BCO_GRAUPA == cGrau	  .AND. ;
						BCO->BCO_SEXO	== cSexo	  .AND. !lAchou

						AADD(aRetorno,{BCO->BCO_CODDOC,BCO->BCO_DOCOBR})
						lAchou := .T.
					Endif

					If 	BCO->BCO_TIPUSR == cTpUsuario .AND. ;
						BCO->BCO_GRAUPA == cGrau	  .AND. !lAchou

						AADD(aRetorno,{BCO->BCO_CODDOC,BCO->BCO_DOCOBR})
						lAchou := .T.
					Endif

					If 	BCO->BCO_TIPUSR == cTpUsuario .AND. !lAchou
						AADD(aRetorno,{BCO->BCO_CODDOC,BCO->BCO_DOCOBR})
						lAchou := .T.
					Endif

					BCO->(DbSkip())


				End

			Endif
		Endif
	Next nCont

Endif

Restarea(aArea)

Return(aRetorno)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  11/09/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSA260VCB

PLSVLRCOB(NIL,NIL,.T.)


Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³PLSM260Del³ Autor ³Wagner Mobile Costa  ³ Data ³ 21.07.2003  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri??o ³ Marca as propriedades da cobranca ao deletar a forma        ³±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºAlteracao ³Por algum motivo se o registro estiver duplicado da erro(imp)º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
/*/
Function PLSM260DEL(nOpc, nTipo)
Local nTr,nInd,nI
Local cCodFor, cChave, aVetsTmp, aTrab, aOpcoes
Local aSavCols := AClone(aCols), aSavHead := AClone(aHeader)

if nTipo ==1
    If oBrwFor:Linha() > Len(oBrwFor:aCols) .Or. oBrwFor:Linha() == 0
       MsgAlert(OemtoAnsi(STR0145))//"Problema na exclusao da tabela Familia X Formas de Cobranca !"
       Return .F.
    EndIf
	aVetsTmp := AClone(aVetsFor)
	cCodFor  := oBrwFor:aCols[oBrwFor:Linha(),oBrwFor:PLRETPOS("BJK_CODFOR")]
Elseif nTipo ==2
    If oBrwAde:Linha() > Len(oBrwAde:aCols) .Or. oBrwAde:Linha() == 0
       MsgAlert(OemtoAnsi(STR0146)) //"Problema na exclusao da tabela Familia x Formas de Cb Tx Ades !"
       Return .F.
    EndIf
	aVetsTmp := AClone(aVetsTxF)
	cCodFor  := oBrwAde:aCols[oBrwAde:Linha(),oBrwAde:PLRETPOS("BJL_CODFOR")]
	cDescri  := oBrwAde:aCols[oBrwAde:Linha(),oBrwAde:PLRETPOS("BJL_DESFOR")]
Elseif nTipo ==3
    If oBrwFrOpc:Linha() > Len(oBrwFrOpc:aCols) .Or. oBrwFrOpc:Linha() == 0
       MsgAlert(OemtoAnsi(STR0147))	 //"Problema na exclusao da tabela Forma x Opcionais x Familia !"
       Return .F.
    EndIf
	aVetsTmp := AClone(aVetsOpc)
	cCodFor  := oBrwFrOpc:aCols[oBrwFrOpc:Linha(),oBrwFrOpc:PLRETPOS("BK0_CODFOR")]
Elseif nTipo ==43
    If oBrwUFrOpc:Linha() > Len(oBrwUFrOpc:aCols) .Or. oBrwUFrOpc:Linha() == 0
       MsgAlert(OemtoAnsi(STR0148)) //"Problema na exclusao da tabela Usuarios X Cobranca Opcionais !"
       Return .F.
    EndIf
	aVetsTmp := AClone(aVetsUOpc)
	cCodFor  := oBrwUFrOpc:aCols[oBrwUFrOpc:Linha(),oBrwUFrOpc:PLRETPOS("BYX_CODFOR")]
Endif

aOpcoes := a260MOpc(cCodFor,If(nTipo > 40, "4", "3"))

For nI := 1 To Len(aOpcoes)
	cAlias  := aOpcoes[nI,2]
	cTipo   := aOpcoes[nI,3]
	aHeader := {}
	aCols   := {}
	DbSelectArea(cAlias)

	cBrw := "oBrw"+cAlias
	STORE HEADER cAlias TO aHeader For .T.

	For nInd := 1 To Len(aVetsTmp)
		If aVetsTmp[nInd,1] == cCodFor .And. aVetsTmp[nInd,2] == cAlias
			If cTipo == "1" // GetDados
				aTrab := aVetsTmp[nInd,4]
				For nTr := 1 To Len(aTrab)
					if nTipo == 3
						if 	aTrab[nTr,GdFieldPos(cAlias+"_CODOPC",aHeader)] == cCodOpc .And.;
							aTrab[nTr,GdFieldPos(cAlias+"_VEROPC",aHeader)] == cVerOpc .And.;
							aTrab[nTr,GdFieldPos(cAlias+"_CODFOR",aHeader)] == cCodFor
							aVetsTmp[nInd,4][nTr][Len(aVetsTmp[nInd,4][nTr])] := .T.
						Endif
					Else
						aVetsTmp[nInd,4][nTr][Len(aVetsTmp[nInd,4][nTr])] := .T.
					Endif
				Next
			Endif
		Endif
	Next
Next

if nTipo == 1
	aVetsFor := aClone(aVetsTmp)
	If oBrwFor:IsDeleted(oBrwFor:Linha())
		oBotPro:Disable()
	Else
		oBotPro:Enable()
	Endif
Elseif nTipo == 2
	aVetsTxF := aClone(aVetsTmp)
	If oBrwAde:IsDeleted(oBrwAde:Linha())
		oBotAde:Disable()
	Else
		oBotAde:Enable()
	Endif
Elseif nTipo == 3
	aVetsOpc := aClone(aVetsTmp)
	If oBrwFrOpc:IsDeleted(oBrwFrOpc:Linha())
		oBotFrOpc:Disable()
	Else
		oBotFrOpc:Enable()
	Endif
Elseif nTipo == 43
	aVetsUOpc := aClone(aVetsTmp)
	If oBrwUFrOpc:IsDeleted(oBrwUFrOpc:Linha())
		oBotUFrOpc:Enable()
		oBrwFrOpc:OBROWSE:OBROWSE:LREADONLY := .F.
	Else
		oBotUFrOpc:Disable()
		oBrwFrOpc:OBROWSE:OBROWSE:LREADONLY := .T.
	Endif
Endif

aCols := AClone(aSavCols)
aHeader := AClone(aSavHead)

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³Pls260DRel³ Autor ³Wagner Mobile Costa  ³ Data ³ 29.07.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri??o ³ Deleta o produto vinculado e as formas de cobranca rel.    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function Pls260DRel

Local nCols := 0
Local nLinhaSel := oBrwOpc:Linha()

//If oBrwOpc:aCols[nLinhaSel, 10] // Na primeira vez quando clica em delete fica .F.
	For nCols := 1 To Len(oBrwFrOpc:aCols)
		If oBrwFrOpc:FieldGet("BK0_CODOPC", nCols)+oBrwFrOpc:FieldGet("BK0_VEROPC",nCols) ==;
		   oBrwOpc:FieldGet("BF1_CODPRO")+oBrwOpc:FieldGet("BF1_VERSAO")

			//oBrwFrOpc:oBrowse:oBrowse:nAt := nCols
			If oBrwFrOpc:aCols[nCols, Len(oBrwFrOpc:aCols[1])]

					oBrwFrOpc:aCols[nCols, Len(oBrwFrOpc:aCols[1])] := .F.
					oBrwFrOpc:OBROWSE:OBROWSE:lReadOnly := .F.
					oBrwFrOpc:ForceRefresh(oBrwFrOpc)
					PLSM260Del(nOpcx, 3)
			Else
				oBrwFrOpc:aCols[nCols,Len(oBrwFrOpc:aCols[1]) ] := .T.
				oBrwFrOpc:OBROWSE:OBROWSE:lReadOnly := .T.
				oBrwFrOpc:ForceRefresh(oBrwFrOpc)
			Endif

		Endif
	Next
	oBrwFrOpc:oBrowse:oBrowse:nAt := 1

Return .T.


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³PLSM260NAl³ Autor ³Wagner Mobile Costa  ³ Data ³ 22.08.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri??o ³ Nao permite alteracao do codigo da cobranca caso  ja  tenha³±±
±±³          ³ propriedades                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PLSM260NAl(cAlias)

Local lEdita := .T., nFor
Local nRecTrab, aVetsTmp, cCodFor

if cAlias = "BJK"
	aVetsTmp := AClone(aVetsFor)
	cCodFor := M->BJK_CODFOR
Elseif cAlias = "BJL"
	aVetsTmp := AClone(aVetsTxF)
	cCodFor := M->BJL_CODFOR
Elseif cAlias = "BK0"
	aVetsTmp := AClone(aVetsOpc)
	cCodFor := M->BK0_CODFOR
Elseif cAlias = "BYX"
	aVetsTmp := AClone(aVetsUOpc)
	cCodFor := M->BYX_CODFOR
Endif

For nFor := 1 To Len(aVetsTmp)
	If 	aVetsTmp[nFor][1] = cCodFor
		If Len(aVetsTmp[nFor]) > 5 .And. aVetsTmp[nFor][6]
			lEdita := .F.
		Else
			For nRecTrab := 1 To Len(aVetsTmp[nFor][5])
				If aVetsTmp[nFor][5][nRecTrab] > 0
					lEdita := .F.
					Exit
				Endif
			Next
		Endif
		If ! lEdita
			Exit
		Endif
	Endif
Next

Return lEdita

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260VID ºAutor  ³Geraldo Felix Juniorº Data ³  08-09-03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Chama cadastro de vidas caso nao exista o CPF.             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260VID(ctipo)

Local lCPFBloqueado := .F.
LOCAL cCpf := M->BA1_CPFUSR

Default ctipo 	:= "I"

BTS->( dbSetorder(03) )
Do Case
Case ctipo == "I"

	lCPFBloqueado := CheckCPFFamilia(cCpf,, oBrwUsr)

	If !BTS->( MsSeek(xFilial("BTS")+M->BA1_CPFUSR) ) .Or. Empty(cCpf)
		FWExecView('Incluir','PLSA955', MODEL_OPERATION_INSERT,, { || .T. } )
	Else
		If Type("oBrwUsr") == "O"  //Verifica se o CPF ja foi utilizado no familia
			M->BA1_MATVID := BTS->BTS_MATVID

			If !lCPFBloqueado .And. ! (PlsVldGd({"BA1_MATVID"},.T.,oBrwUsr:aCols)) 
				M->BA1_MATVID := Space(TamSx3("BA1_MATVID")[1])
				Return (.F.)
			Else
				M->BA1_MATVID := Space(TamSx3("BA1_MATVID")[1])
				If lCPFBloqueado .And. !MsgYesNo("CPF informado já está sendo utilizado na familia em um Beneficiário Bloqueado, deseja continuar?", STR0242)
					Return (.F.)
				Else
					Return (.T.)
				EndIf
			EndIf
		Else
			Return(.T.)
		EndIf
	Endif
Case ctipo == "V"
	FWExecView('Vizualizar'	,'PLSA955', MODEL_OPERATION_VIEW	,, { || .T. } )
Case ctipo == "A"
	FWExecView('Alterar'	,'PLSA955', MODEL_OPERATION_UPDATE 	,, { || .T. } )
Case ctipo == "C"
	If !Empty(M->BTS_CPFUSR)
		M->BTS_CPFUSR := Space(TamSx3('BTS_CPFUSR')[1])
	Endif
	FWExecView('Incluir'	,'PLSA955', MODEL_OPERATION_INSERT	,, { || .T. } )
Endcase
M->BA1_MATVID := BTS->BTS_MATVID
M->BA1_CPFUSR := cCpf

Return(.F.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Pl260UBlq ºAutor  ³Wagner Mobile Costa º Data ³  27-08-03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Verifica se o usuario esta bloqueado e apresenta mensagem  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Plsa260                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Pl260UBlq(nOpc)

Local nPosBlq := PLRETPOS("BA1_MOTBLO",oBrwUsr:aHeader)

If nOpc # K_Visualizar .And. ! Empty(oBrwUsr:aCols[oBrwUsr:Linha(), nPosBlq])
	ApMsgAlert(OemtoAnsi(STR0149), OemtoAnsi(STR0010)) //"Este usuario encontra-se bloqueado, O registro somente podera ser visualizado."
	Return K_Visualizar
Else
	Return nOpc
Endif

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260Forma ³ Autor ³ Wagner Mobile Costa³ Data ³ 10.09.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Sugere as formas de cobranca de acordo com o Produto      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PL260Forma()                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PL260Forma                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PL260Forma()

Local cAno			:= Str(Year(M->BA3_DATBAS), 4)
Local cMes 			:= StrZero(Month(M->BA3_DATBAS), 2)
Local nIncAutom 	:= GetNewPar("MV_PLCAROP", 1)
Local lCobertFam	:= GetNewPar("MV_PLCOBFA",.F.) // Cobertura da Familia

Private cCodFor 	:= alltrim(M->BA3_FORPAG)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza os gatilhos do BA3_CODPLA																  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	RunTrigger(1,,,,"BA3_CODPLA")

	// Carrega a Cobertura da Familia
	If 	!Empty(M->BA3_CODPLA) .And. !Empty(M->BA3_VERSAO) .And. lCobertFam .And. nOpcx == K_Incluir
		PL260Cobert("1")
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Consiste dados nescessarios...                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If 	Empty(M->BA3_CODPLA) .Or. Empty(M->BA3_VERSAO) .Or. Empty(cCodFor)
		Return .T.
	Endif

	if cCodFor == "108"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega por faixa salarial...                                                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PL260FSal(cAno, cMes)
	else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Carrega por faixa etaria...                                                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PL260FEta(cAno, cMes)
	endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Carrega taxa de adesao...                                                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PL260Adesao()

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Chamada da rotina que atualiza os opcionais do produto/subcontratos no ato da inclusao da familia ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nIncAutom > 0
		PL260Opc(.T.,nIncAutom == 2)
	Endif

Return .T.
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL269HSal  ³ Autor ³ Victor Ferreira    ³ Data ³ 28.11.13 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Apresenta a dialog com informacoes de historicos de       ³±±
±±³          ³ reajuste de cobranca de acordo com a forma selecionada    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PL269HSal()                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PL269HSal()
LOCAL aArea			:= GetArea()
LOCAL nBJK_CODFOR	:= oBrwFor:FieldPos("BJK_CODFOR")
LOCAL cCodFor		:= oBrwFor:aCols[oBrwFor:Linha()][nBJK_CODFOR]

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Consiste dados nescessarios...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If 	Empty(cCodFor)
	MsgAlert("Preencha os dados da Forma de Cobrança antes de continuar")
	Return
Endif

If cCodFor <> "108"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Carrega por faixa etaria...                                                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PLSHISFAI("BP7",(PlsIntPad()+M->(BA3_CODEMP+BA3_MATRIC)),"BP7->(BP7_FILIAL+BP7_CODOPE+BP7_CODEMP+BP7_MATRIC)",1)
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Carrega por faixa salarial...                                                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea('SIX')
	SIX->(dbSetOrder(1))
	If !SIX->(dbSeek('BYP2'))
		MsgAlert("Antes de executar essa opção, é necessário executar o update de compatibilização dos dicionários de dados do chamado 'TIAMQP'")
		RestArea(aArea)
		Return
	Else
		RestArea(aArea)
		PLSHISFAI("BYP",(PlsIntPad()+M->(BA3_CODEMP+BA3_MATRIC)),"BYP->(BYP_FILIAL+BYP_CODOPE+BYP_CODEMP+BYP_MATRIC)",2)
	Endif
Endif

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260Adesao³ Autor ³ Wagner Mobile Costa³ Data ³ 11.11.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Sugere as formas de cobranca de adesao de acordo produto  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PL260Adesao()                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PL260Adesao                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PL260Adesao()
Local nCols := 1
Local nHeader := 0
Local nPos := 0
Local nLido := 0

Local nBJL_CODFOR := oBrwAde:FieldPos("BJL_CODFOR")
Local nBJL_DESFOR := oBrwAde:FieldPos("BJL_DESFOR")
Local nBJL_AUTOMA := oBrwAde:FieldPos("BJL_AUTOMA")

Local nCODFOR 	  := Ascan(oBrwAde:aCols, {|x| x[nBJL_CODFOR] = M->BA3_FORCTX })

If nOpcx # K_Incluir
	Return .T.
Endif

cCodFor := M->BA3_FORCTX
If 	Empty(M->BA3_CODPLA) .Or. Empty(M->BA3_VERSAO) .Or. Empty(cCodFor)
	Return .T.
Endif

If (nBJL_CODFOR == 0 .or. nBJL_DESFOR == 0 .or. nBJL_AUTOMA == 0 .or. Len(oBrwAde:aCols) < 1 )
	Return .T.
Endif

nPosVet := Ascan(aVetsTxF, {|x| x[1] = cCodFor .And. x[2] = "BRX" })
If nCODFOR = 0
	If Empty(oBrwAde:aCols[1][nBJL_CODFOR])
		oBrwAde:aCols[1][nBJL_CODFOR] := cCodFor
		BJ1->(MsSeek(xFilial("BJ1") + cCodFor))
		oBrwAde:aCols[1][nBJL_DESFOR] := BJ1->BJ1_DESCRI
		oBrwFor:aCols[Len(oBrwFor:aCols)][nBJL_AUTOMA] := "1"
		nCodFor := 1
	Else
		Aadd(oBrwAde:aCols, AClone(oBrwAde:aCols[1]))
		oBrwAde:aCols[Len(oBrwAde:aCols)][nBJL_CODFOR] := cCodFor
		BJ1->(MsSeek(xFilial("BJ1") + cCodFor))
		oBrwAde:aCols[Len(oBrwAde:aCols)][nBJL_DESFOR] := BJ1->BJ1_DESCRI
		oBrwFor:aCols[Len(oBrwFor:aCols)][nBJL_AUTOMA] := "1"
		nCodFor := Len(oBrwAde:aCols)
	Endif
	oBrwAde:ForceRefresh(oBrwAde)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Liga propriedade de objeto alterado...                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oBrwAde:lAltered := .T.
oBrwFor:lAltered := .T.

aDados 	 := {}
aCabec 	 := {}
nCols    := 1
nLido    := 0
STORE HEADER "BRX" TO aCabec For .T.
Store COLS Blank "BRX" TO aDados FROM aCabec

If M->BA3_TIPOUS = "1"	// Pessoa Fisica - Taxa de Adesao
	dbSelectarea("BRY")
	BRY->(DbSetOrder(1))
	BRY->(MsSeek(	xFilial("BRY") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO +;
					cCodFor))
	While 	BRY->BRY_FILIAL = xFilial("BRY") .And.;
			BRY->BRY_CODIGO = M->BA3_CODINT + M->BA3_CODPLA .And.;
			BRY->BRY_VERSAO = M->BA3_VERSAO .And. BRY->BRY_CODFOR = cCodFor .And.;
			! BRY->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If Alltrim(aCabec[nHeader][2]) == "BRX_VALFAI"
				aDados[nCols][nHeader] := BRY->BRY_VALFAI
			Elseif (nPos := BRY->(FieldPos(StrTran(aCabec[nHeader][2], "BRX", "BRY")))) > 0
				aDados[nCols][nHeader] := BRY->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BRX_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BRY->(DbSkip())
	EndDo
Else	// Pessoa Juridica - Taxa de Adesao
	dbSelectArea("BR6")
	BR6->(DbSetOrder(1))
	BR6->(MsSeek(	xFilial("BR6") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_CONEMP +;
					M->BA3_VERCON + M->BA3_SUBCON + M->BA3_VERSUB + M->BA3_CODPLA +;
					M->BA3_VERSAO + cCodFor))
	While 	BR6->BR6_FILIAL = xFilial("BR6") .And.;
			BR6->BR6_CODIGO = M->BA3_CODINT + M->BA3_CODEMP .And.;
			BR6->BR6_NUMCON = M->BA3_CONEMP .And. BR6->BR6_VERCON = M->BA3_VERCON .And.;
			BR6->BR6_SUBCON = M->BA3_SUBCON .And. BR6->BR6_VERSUB = M->BA3_VERSUB .And.;
			BR6->BR6_CODPRO = M->BA3_CODPLA .And. BR6->BR6_VERPRO = M->BA3_VERSAO .And.;
			BR6->BR6_CODFOR = cCodFor .And. ! BR6->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If Alltrim(aCabec[nHeader][2]) == "BRX_VALFAI"
				aDados[nCols][nHeader] := BR6->BR6_VALFAI
			Elseif (nPos := BR6->(FieldPos(StrTran(aCabec[nHeader][2], "BRX", "BR6")))) > 0
				aDados[nCols][nHeader] := BR6->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BRX_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)
		BR6->(DbSkip())
	EndDo
Endif

If nLido > 0
	If nPosVet = 0
		aadd(aVetsTxF,{cCodFor,"BRX","1",AClone(aDados),{}})
	Else
		aVetsTxF[nPosVet][4] := AClone(aDados)
	Endif
Endif

nPosVet := Ascan(aVetsTxF, {|x| x[1] = cCodFor .And. x[2] = "BFZ" })

aDados 	 := {}
aCabec   := {}
nCols    := 1
nLido    := 0
STORE HEADER "BFZ" TO aCabec For .T.
Store COLS Blank "BFZ" TO aDados FROM aCabec

If M->BA3_TIPOUS = "1"	// Pessoa Fisica - Descontos da Taxa de Adesao
	dbSelectArea("BFX")
	BFX->(DbSetOrder(1))
	BFX->(MsSeek(	xFilial("BFX") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO +;
					cCodFor))
	While 	BFX->BFX_FILIAL = xFilial("BFX") .And.;
			BFX->BFX_CODIGO = M->BA3_CODINT + M->BA3_CODPLA .And.;
			BFX->BFX_VERSAO = M->BA3_VERSAO .And. BFX->BFX_CODFOR = cCodFor .And.;
			! BFX->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If (nPos := BFX->(FieldPos(StrTran(aCabec[nHeader][2], "BFZ", "BFX")))) > 0
				aDados[nCols][nHeader] := BFX->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BFZ_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BFX->(DbSkip())
	EndDo
Else	// Pessoa Juridica - Descontos da Taxa de Adesao
	dbSelectArea("BFV")
	BFV->(DbSetOrder(1))
	BFV->(MsSeek(	xFilial("BFV") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_CONEMP +;
					M->BA3_VERCON + M->BA3_SUBCON + M->BA3_VERSUB + M->BA3_CODPLA +;
					M->BA3_VERSAO + cCodFor))
	While 	BFV->BFV_FILIAL = xFilial("BFV") .And.;
			BFV->BFV_CODIGO = M->BA3_CODINT + M->BA3_CODEMP .And.;
			BFV->BFV_NUMCON = M->BA3_CONEMP .And. BFV->BFV_VERCON = M->BA3_VERCON .And.;
			BFV->BFV_SUBCON = M->BA3_SUBCON .And. BFV->BFV_VERSUB = M->BA3_VERSUB .And.;
			BFV->BFV_CODPRO = M->BA3_CODPLA .And. BFV->BFV_VERPRO = M->BA3_VERSAO .And.;
			BFV->BFV_CODFOR = cCodFor .And. ! BFV->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If (nPos := BFV->(FieldPos(StrTran(aCabec[nHeader][2], "BFZ", "BFV")))) > 0
				aDados[nCols][nHeader] := BFV->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BFZ_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)
		BFV->(DbSkip())
	EndDo
Endif

If nLido > 0
	If nPosVet = 0
		aadd(aVetsTxF,{cCodFor,"BFZ","1",AClone(aDados),{}})
	Else
		aVetsTxF[nPosVet][4] := AClone(aDados)
	Endif
Endif

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260Opc   ³ Autor ³Geraldo Felix Jr.   ³ Data ³ 12.08.04 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza opcionais/formas de  cob. de acordo com o produto³±±
±±³          ³ ou sub contrato...                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PL260ForOpc()                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PL260ForOpc                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PL260Opc(lFamilia,lIncSoVinc)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Definicao das variaveis...                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL cKeyBHS	:= ''
LOCAL cKeyBJW	:= ''
LOCAL cKeyBJY	:= ''
LOCAL nPos		:= 0
LOCAL lAchou	:= .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coordenadas dos opcional da familia...                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL nBF1_CODPRO := oBrwOpc:FieldPos("BF1_CODPRO", aCabOpc)
LOCAL nBF1_VERPRO := oBrwOpc:FieldPos("BF1_VERSAO", aCabOpc)
LOCAL nBF1_DESPRO := oBrwOpc:FieldPos("BF1_DESPRO", aCabOpc)
LOCAL nBF1_DATBAS := oBrwOpc:FieldPos("BF1_DATBAS", aCabOpc)
LOCAL nBF1_TIPVIN := Iif(BF1->(FieldPos("BF1_TIPVIN")) > 0, oBrwOpc:FieldPos("BF1_TIPVIN", aCabOpc), 0)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coordenadas das formas de cobranca do opcional da familia...             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL nBK0_CODOPC := oBrwFrOpc:FieldPos("BK0_CODOPC", aCabFrOpc)
LOCAL nBK0_VEROPC := oBrwFrOpc:FieldPos("BK0_VEROPC", aCabFrOpc)
LOCAL nBK0_CODFOR := oBrwFrOpc:FieldPos("BK0_CODFOR", aCabFrOpc)
LOCAL nBK0_DESFOR := oBrwFrOpc:FieldPos("BK0_DESFOR", aCabFrOpc)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coordenadas dos opcional do usuario...                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL nBF4_CODPRO := oBrwOUsu:FieldPos("BF4_CODPRO", aCabOUsu)
LOCAL nBF4_VERPRO := oBrwOUsu:FieldPos("BF4_VERSAO", aCabOUsu)
LOCAL nBF4_DESPRO := oBrwOUsu:FieldPos("BF4_DESPRO", aCabOUsu)
LOCAL nBF4_DATBAS := oBrwOUsu:FieldPos("BF4_DATBAS", aCabOUsu)
LOCAL nBF4_TIPREG := oBrwOUsu:FieldPos("BF4_TIPREG", aCabOUsu)
LOCAL nBF4_TIPVIN := Iif(BF4->(FieldPos("BF4_TIPVIN")) > 0, oBrwOUsu:FieldPos("BF4_TIPVIN", aCabOUsu), 0)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Coordenadas das formas de cobranca do opcional do Usuario...             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL nBYX_CODOPC := oBrwUFrOpc:FieldPos("BYX_CODOPC", aCabUFrOpc)
LOCAL nBYX_VEROPC := oBrwUFrOpc:FieldPos("BYX_VEROPC", aCabUFrOpc)
LOCAL nBYX_CODFOR := oBrwUFrOpc:FieldPos("BYX_CODFOR", aCabUFrOpc)
LOCAL nBYX_DESFOR := oBrwUFrOpc:FieldPos("BYX_DESFOR", aCabUFrOpc)
LOCAL nBYX_TIPREG := oBrwUFrOpc:FieldPos("BYX_TIPREG", aCabUFrOpc)

Default lFamilia := .T.
Default lIncSoVinc := .F.

If M->BA3_TIPOUS = "1"	// Pessoa Fisica - Opcionais
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona os opcionais do produto...                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !BT3->( MsSeek(xFilial("BT3")+M->BA3_CODINT+M->BA3_CODPLA+M->BA3_VERSAO) )
		Return .T.
	Else
		If !lFamilia .And. !Empty(M->BA1_CODPLA) .And. !Empty(M->BA1_VERSAO)
			If BT3->( MsSeek(xFilial("BT3") + PlsIntPad() + M->BA1_CODPLA + M->BA1_VERSAO) )
				lAchou := .T.
			EndIf
		EndIf

		While !BT3->( Eof() ) .and. BT3->(BT3_CODIGO+BT3_VERSAO) == M->BA3_CODINT+Iif(!lAchou,M->BA3_CODPLA+M->BA3_VERSAO,M->BA1_CODPLA+M->BA1_VERSAO)
			
			//Quando o parâmetro MV_PLCAROP for igual a 2, só trago os opcionais vinculados
			If lIncSoVinc .AND. BT3->BT3_TIPVIN == '0'
				BT3->( dbSkip() )
				Loop
			EndIf

			If lFamilia
				If (nPos := Ascan(oBrwOpc:aCols, {|x| x[nBF1_CODPRO] == BT3->BT3_CODPLA .and. x[nBF1_VERPRO] == BT3->BT3_VERPLA})) == 0
					If Empty(oBrwOpc:aCols[1][nBF1_CODPRO])
						oBrwOpc:FieldPut("BF1_CODPRO", BT3->BT3_CODPLA, 1)
						oBrwOpc:FieldPut("BF1_VERSAO", BT3->BT3_VERPLA, 1)
						oBrwOpc:FieldPut("BF1_DESPRO", Posicione("BI3",1,xFilial("BI3")+BT3->(Substr(BT3_CODIGO,1,4)+BT3->BT3_CODPLA+BT3_VERPLA),"BI3_DESCRI"), 1)
						oBrwOpc:FieldPut("BF1_DATBAS", M->BA3_DATBAS  , 1)
						If BF1->( FieldPos("BF1_TIPVIN") ) > 0
							oBrwOpc:FieldPut("BF1_TIPVIN", BT3->BT3_TIPVIN, 1)
						Endif
					Else
						Aadd(oBrwOpc:aCols, AClone(oBrwOpc:aCols[1]))

						oBrwOpc:FieldPut("BF1_CODPRO", BT3->BT3_CODPLA, Len(oBrwOpc:aCols))
						oBrwOpc:FieldPut("BF1_VERSAO", BT3->BT3_VERPLA, Len(oBrwOpc:aCols))
						oBrwOpc:FieldPut("BF1_DESPRO", Posicione("BI3",1,xFilial("BI3")+BT3->(Substr(BT3_CODIGO,1,4)+BT3->BT3_CODPLA+BT3_VERPLA),"BI3_DESCRI"), Len(oBrwOpc:aCols))
						oBrwOpc:FieldPut("BF1_DATBAS", M->BA3_DATBAS  , Len(oBrwOpc:aCols))
						If BF1->( FieldPos("BF1_TIPVIN") ) > 0
							oBrwOpc:FieldPut("BF1_TIPVIN", BT3->BT3_TIPVIN, Len(oBrwOpc:aCols))
						Endif

						Aadd(oBrwOpc:AvetTrab,0)
					Endif
				Endif
			Else
				If PLSPerm(M->BA1_TIPUSU,M->BA1_GRAUPA,M->BA1_ESTCIV,M->BA1_SEXO,oBrwUsr,M->BA3_CODINT,BT3->BT3_CODPLA,BT3->BT3_VERPLA,M->BA1_DATINC,M->BA1_DATNAS)

	            	If (nPos := Ascan(oBrwOUsu:aCols, {|x| x[nBF4_CODPRO] == BT3->BT3_CODPLA .and.;
	            										   x[nBF4_VERPRO] == BT3->BT3_VERPLA .and.;
	            										   x[nBF4_TIPREG] == M->BA1_TIPREG })) == 0
	            		
	            		If Empty(oBrwOUsu:aCols[1][nBF4_CODPRO])
							oBrwOUsu:FieldPut("BF4_CODPRO", BT3->BT3_CODPLA, 1)
							oBrwOUsu:FieldPut("BF4_VERSAO", BT3->BT3_VERPLA, 1)
							oBrwOUsu:FieldPut("BF4_DESPRO", Posicione("BI3",1,xFilial("BI3")+BT3->(Substr(BT3_CODIGO,1,4)+BT3->BT3_CODPLA+BT3_VERPLA),"BI3_DESCRI"), 1)
							oBrwOUsu:FieldPut("BF4_DATBAS", iif(empty(M->BA1_DATINC),CTOD(""),M->BA1_DATINC), 1)
							oBrwOUsu:FieldPut("BF4_TIPREG", M->BA1_TIPREG  , 1)
							
							If BF4->( FieldPos("BF4_TIPVIN") ) > 0
								oBrwOUsu:FieldPut("BF4_TIPVIN", BT3->BT3_TIPVIN, 1)
							Endif							
						Else
						   	Aadd(oBrwOUsu:aCols, AClone(oBrwOUsu:aCols[1]))
							oBrwOUsu:FieldPut("BF4_CODPRO", BT3->BT3_CODPLA, Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_VERSAO", BT3->BT3_VERPLA, Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_DESPRO", Posicione("BI3",1,xFilial("BI3")+BT3->(Substr(BT3_CODIGO,1,4)+BT3->BT3_CODPLA+BT3_VERPLA),"BI3_DESCRI"), Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_DATBAS", iif(empty(M->BA1_DATINC),CTOD(""),M->BA1_DATINC), Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_TIPREG", M->BA1_TIPREG  , Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_MOTBLO", ""  , Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_DATBLO", cToD("")  , Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_DESBLO", ""  , Len(oBrwOUsu:aCols))
							oBrwOUsu:FieldPut("BF4_TIPBLO", ""  , Len(oBrwOUsu:aCols))
							If BF4->( FieldPos("BF4_TIPVIN") ) > 0
								oBrwOUsu:FieldPut("BF4_TIPVIN", BT3->BT3_TIPVIN, Len(oBrwOUsu:aCols))
							Endif
	
							Aadd(oBrwOUsu:AvetTrab,0)
						Endif
					Endif
				EndIf
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Para opcionais nao vinculados, levo tbm asformas de cobranca...          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If BT3->BT3_TIPVIN == '0'
				BJY->( dbSetorder(01) )

				cKeyBJY := BT3->(BT3_CODIGO+BT3_VERSAO+BT3_CODPLA+BT3_VERPLA)
				If BJY->( MsSeek(xFilial("BJW")+cKeyBJY) )

					While !BJY->( Eof() ) .and. BJY->(BJY_CODIGO+BJY_VERSAO+BJY_CODOPC+BJY_VEROPC) == cKeyBJY
						If lFamilia
							If (nPos := Ascan(oBrwFrOpc:aCols, {|x| x[nBK0_CODOPC] == BT3->BT3_CODPLA .and. x[nBK0_VEROPC] == BT3->BT3_VERPLA })) == 0
								If Empty(oBrwFrOpc:aCols[1][nBK0_CODOPC])
									oBrwFrOpc:FieldPut("BK0_CODOPC", BT3->BT3_CODPLA, 1)
									oBrwFrOpc:FieldPut("BK0_VEROPC", BT3->BT3_VERPLA, 1)
									oBrwFrOpc:FieldPut("BK0_CODFOR", BJY->BJY_CODFOR, 1)
									oBrwFrOpc:FieldPut("BK0_DESFOR", Posicione("BJ1",1,xFilial("BJ1")+BJY->BJY_CODFOR,"BJ1_DESCRI"), 1)
								Else
									Aadd(oBrwFrOpc:aCols, AClone(oBrwFrOpc:aCols[1]))

									oBrwFrOpc:FieldPut("BK0_CODOPC", BT3->BT3_CODPLA, Len(oBrwFrOpc:aCols))
									oBrwFrOpc:FieldPut("BK0_VEROPC", BT3->BT3_VERPLA, Len(oBrwFrOpc:aCols))
									oBrwFrOpc:FieldPut("BK0_CODFOR", BJY->BJY_CODFOR, Len(oBrwFrOpc:aCols))
									oBrwFrOpc:FieldPut("BK0_DESFOR", Posicione("BJ1",1,xFilial("BJ1")+BJW->BJW_CODFOR,"BJ1_DESCRI"), Len(oBrwFrOpc:aCols))

									Aadd(oBrwFrOpc:AvetTrab,0)
								Endif
							Endif
						Else
							If (nPos := Ascan(oBrwUFrOpc:aCols, {|x| x[nBYX_CODOPC] == BT3->BT3_CODPLA .and.;
									x[nBYX_VEROPC] == BT3->BT3_VERPLA .and.;
									x[nBYX_TIPREG] == M->BA1_TIPREG })) == 0

								If Empty(oBrwFrOpc:aCols[1][nBYX_CODOPC])
									oBrwUFrOpc:FieldPut("BYX_CODOPC", BT3->BT3_CODPLA, 1)
									oBrwUFrOpc:FieldPut("BYX_VEROPC", BT3->BT3_VERPLA, 1)
									oBrwUFrOpc:FieldPut("BYX_CODFOR", BJY->BJY_CODFOR, 1)
									oBrwUFrOpc:FieldPut("BYX_DESFOR", Posicione("BJ1", 1,xFilial("BJ1")+BJY->BJY_CODFOR,"BJ1_DESCRI"), 1)
									oBrwUFrOpc:FieldPut("BYX_TIPREG", M->BA1_TIPREG  , 1)
									oBrwUFrOpc:FieldPut("BYX_RGIMP" , '1'            , 1)

								Else
									Aadd(oBrwUFrOpc:aCols, AClone(oBrwUFrOpc:aCols[1]))

									oBrwUFrOpc:FieldPut("BYX_CODOPC", BT3->BT3_CODPLA, Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_VEROPC", BT3->BT3_VERPLA, Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_CODFOR", BJY->BJY_CODFOR, Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_DESFOR", Posicione("BJ1",1,xFilial("BJ1")+BJW->BJW_CODFOR,"BJ1_DESCRI"), Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_TIPREG", M->BA1_TIPREG  , Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_RGIMP" , '1'  			 , Len(oBrwUFrOpc:aCols))

									Aadd(oBrwUFrOpc:AvetTrab,0)
								Endif
							Endif
						Endif

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Carrega as faixas e seus valores...                                      ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lFamilia
							M->BK0_CODOPC := BT3->BT3_CODPLA
							M->BK0_VEROPC := BT3->BT3_VERPLA
							M->BK0_CODFOR := BJY->BJY_CODFOR
						Else
							M->BYX_CODOPC := BT3->BT3_CODPLA
							M->BYX_VEROPC := BT3->BT3_VERPLA
							M->BYX_CODFOR := BJY->BJY_CODFOR
						Endif

						PL260ForOpc(.T., lFamilia)

						BJY->( dbSkip() )
					Enddo
				Endif
			Endif

			BT3->( dbSkip() )
		Enddo
	Endif
Else

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Posiciona os opcionais do subcontrato...                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BHS->( dbSetorder(01) )
	cKeyBHS := 	M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB+;
		M->BA3_CODPLA+M->BA3_VERSAO

	If BHS->( MsSeek(xFilial("BHS")+cKeyBHS) )
		While !BHS->( Eof() ) .and. BHS->(BHS_CODINT+BHS_CODIGO+BHS_NUMCON+BHS_VERCON+BHS_SUBCON+BHS_VERSUB+;
				BHS_CODPRO+BHS_VERPRO) == cKeyBHS
			
			//Quando o parâmetro MV_PLCAROP for igual a 2, só trago os opcionais vinculados
			If lIncSoVinc .AND. BHS->BHS_TIPVIN == '0'
				BHS->( dbSkip() )
				Loop
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Adiciona o opcional... vinculados ou nao! A diferenca e que o vinculado vem com valor zerado!     |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lFamilia
				If (nPos := Ascan(oBrwOpc:aCols, {|x| x[nBF1_CODPRO] == BHS->BHS_CODPLA .and. x[nBF1_VERPRO] == BHS->BHS_VERPLA})) == 0

					If Empty(oBrwOpc:aCols[1][nBF1_CODPRO])
						oBrwOpc:FieldPut("BF1_CODPRO", BHS->BHS_CODPLA, 1)
						oBrwOpc:FieldPut("BF1_VERSAO", BHS->BHS_VERPLA, 1)
						oBrwOpc:FieldPut("BF1_DESPRO", Posicione("BI3",1,xFilial("BI3")+BHS->BHS_CODINT+BHS->BHS_CODPLA,"BI3_DESCRI"), 1)
						oBrwOpc:FieldPut("BF1_DATBAS", M->BA3_DATBAS  , 1)
						If BF1->(FieldPos("BF1_TIPVIN")) > 0
							oBrwOpc:FieldPut("BF1_TIPVIN", BHS->BHS_TIPVIN, 1)
						Endif
					Else
						Aadd(oBrwOpc:aCols, AClone(oBrwOpc:aCols[1]))

						oBrwOpc:FieldPut("BF1_CODPRO", BHS->BHS_CODPLA, Len(oBrwOpc:aCols))
						oBrwOpc:FieldPut("BF1_VERSAO", BHS->BHS_VERPLA, Len(oBrwOpc:aCols))
						oBrwOpc:FieldPut("BF1_DESPRO", Posicione("BI3",1,xFilial("BI3")+BHS->BHS_CODINT+BHS->BHS_CODPLA,"BI3_DESCRI"), Len(oBrwOpc:aCols))
						oBrwOpc:FieldPut("BF1_DATBAS", M->BA3_DATBAS  , Len(oBrwOpc:aCols))
						If BF1->( FieldPos("BF1_TIPVIN") ) > 0
							oBrwOpc:FieldPut("BF1_TIPVIN", BHS->BHS_TIPVIN, Len(oBrwOpc:aCols))
						Endif

						Aadd(oBrwOpc:AvetTrab,0)
					Endif
				Endif
			Else
				If PLSPerm(M->BA1_TIPUSU,M->BA1_GRAUPA,M->BA1_ESTCIV,M->BA1_SEXO,oBrwUsr,M->BA3_CODINT,BHS->BHS_CODPLA,BHS->BHS_VERPLA,M->BA1_DATINC,M->BA1_DATNAS)
	            	If (nPos := Ascan(oBrwOUsu:aCols, {|x| x[nBF4_CODPRO] == BHS->BHS_CODPLA .and.;
	            										   x[nBF4_VERPRO] == BHS->BHS_VERPLA .and.;
	            										   x[nBF4_TIPREG] == M->BA1_TIPREG })) == 0
						If Empty(oBrwOUsu:aCols[1][nBF4_CODPRO])
	
							oBrwOUsu:FieldPut("BF4_CODPRO", BHS->BHS_CODPLA, 1)
							oBrwOUsu:FieldPut("BF4_VERSAO", BHS->BHS_VERPLA, 1)
							oBrwOUsu:FieldPut("BF4_DESPRO", Posicione("BI3",1,xFilial("BI3")+BHS->BHS_CODINT+BHS->BHS_CODPLA,"BI3_DESCRI"), 1)
							oBrwOUsu:FieldPut("BF4_DATBAS", iif(empty(M->BA1_DATINC),CTOD(""),M->BA1_DATINC), 1)
							oBrwOUsu:FieldPut("BF4_TIPREG", M->BA1_TIPREG  , 1)
							
							If BF4->( FieldPos("BF4_TIPVIN") ) > 0
								oBrwOUsu:FieldPut("BF4_TIPVIN", BHS->BHS_TIPVIN, 1)
							Endif
						Else	
								If !Empty(oBrwOUsu:aCols[Len(oBrwOUsu:aCols)][nBF4_CODPRO])
									Aadd(oBrwOUsu:aCols, AClone(oBrwOUsu:aCols[1]))
								Endif
									
								oBrwOUsu:FieldPut("BF4_CODPRO", BHS->BHS_CODPLA, Len(oBrwOUsu:aCols))
								oBrwOUsu:FieldPut("BF4_VERSAO", BHS->BHS_VERPLA, Len(oBrwOUsu:aCols))
								oBrwOUsu:FieldPut("BF4_DESPRO", Posicione("BI3",1,xFilial("BI3")+BHS->BHS_CODINT+BHS->BHS_CODPLA,"BI3_DESCRI"), Len(oBrwOUsu:aCols))
								oBrwOUsu:FieldPut("BF4_DATBAS", iif(empty(M->BA1_DATINC),CTOD(""),M->BA1_DATINC), Len(oBrwOUsu:aCols))
								oBrwOUsu:FieldPut("BF4_TIPREG", M->BA1_TIPREG  , Len(oBrwOUsu:aCols))
								oBrwOUsu:FieldPut("BF4_MOTBLO", ""  , Len(oBrwOUsu:aCols))
								oBrwOUsu:FieldPut("BF4_DATBLO", cToD("")  , Len(oBrwOUsu:aCols))
							    oBrwOUsu:FieldPut("BF4_DESBLO", ""  , Len(oBrwOUsu:aCols))
								oBrwOUsu:FieldPut("BF4_TIPBLO", ""  , Len(oBrwOUsu:aCols))
								If BF4->( FieldPos("BF4_TIPVIN") ) > 0
									oBrwOUsu:FieldPut("BF4_TIPVIN", BHS->BHS_TIPVIN, Len(oBrwOUsu:aCols))
								Endif
								If Len(oBrwOUsu:AvetTrab) < Len(oBrwOUsu:aCols)
									Aadd(oBrwOUsu:AvetTrab,0)
								Endif								
						Endif
					Endif
				EndIf
			Endif

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Para opcionais nao vinculados, levo tbm asformas de cobranca...          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If BHS->BHS_TIPVIN == '0'
				BJW->( dbSetorder(01) )

				cKeyBJW := BHS->(BHS_CODINT+BHS_CODIGO+BHS_NUMCON+BHS_VERCON+BHS_SUBCON+BHS_VERSUB)+;
					BHS->(BHS_CODPRO+BHS_VERPRO+BHS_CODPLA+BHS_VERPLA)

				If BJW->( MsSeek(xFilial("BJW")+cKeyBJW) )
					While !BJW->( Eof() ) .and. BJW->(BJW_CODIGO+BJW_NUMCON+BJW_VERCON+BJW_SUBCON+BJW_VERSUB)+;
							BJW->(BJW_CODPRO+BJW_VERSAO+BJW_CODOPC+BJW_VEROPC) == cKeyBJW

						If lFamilia
							If (nPos := Ascan(oBrwFrOpc:aCols, {|x| x[nBK0_CODOPC] == BHS->BHS_CODPLA .and. x[nBK0_VEROPC] == BHS->BHS_VERPLA })) == 0
								If Empty(oBrwFrOpc:aCols[1][nBK0_CODOPC])
									oBrwFrOpc:FieldPut("BK0_CODOPC", BHS->BHS_CODPLA, 1)
									oBrwFrOpc:FieldPut("BK0_VEROPC", BHS->BHS_VERPLA, 1)
									oBrwFrOpc:FieldPut("BK0_CODFOR", BJW->BJW_CODFOR, 1)
									oBrwFrOpc:FieldPut("BK0_DESFOR", Posicione("BJ1",1,xFilial("BJ1")+BJW->BJW_CODFOR,"BJ1_DESCRI"), 1)
								Else
									Aadd(oBrwFrOpc:aCols, AClone(oBrwFrOpc:aCols[1]))

									oBrwFrOpc:FieldPut("BK0_CODOPC", BHS->BHS_CODPLA, Len(oBrwFrOpc:aCols))
									oBrwFrOpc:FieldPut("BK0_VEROPC", BHS->BHS_VERPLA, Len(oBrwFrOpc:aCols))
									oBrwFrOpc:FieldPut("BK0_CODFOR", BJW->BJW_CODFOR, Len(oBrwFrOpc:aCols))
									oBrwFrOpc:FieldPut("BK0_DESFOR", Posicione("BJ1",1,xFilial("BJ1")+BJW->BJW_CODFOR,"BJ1_DESCRI"), Len(oBrwFrOpc:aCols))

									Aadd(oBrwFrOpc:AvetTrab,0)
								Endif
							Endif
						Else
							If (nPos := Ascan(oBrwUFrOpc:aCols, {|x| x[nBYX_CODOPC] == BHS->BHS_CODPLA .and.;
									x[nBYX_VEROPC] == BHS->BHS_VERPLA .and.;
									x[nBYX_TIPREG] == M->BA1_TIPREG })) == 0

								If Empty(oBrwUFrOpc:aCols[1][nBYX_CODOPC])
									oBrwUFrOpc:FieldPut("BYX_CODOPC", BHS->BHS_CODPLA, 1)
									oBrwUFrOpc:FieldPut("BYX_VEROPC", BHS->BHS_VERPLA, 1)
									oBrwUFrOpc:FieldPut("BYX_CODFOR", BJW->BJW_CODFOR, 1)
									oBrwUFrOpc:FieldPut("BYX_DESFOR", Posicione("BJ1",1,xFilial("BJ1")+BJW->BJW_CODFOR,"BJ1_DESCRI"), 1)
									oBrwUFrOpc:FieldPut("BYX_TIPREG", M->BA1_TIPREG, 1)
								Else
									Aadd(oBrwUFrOpc:aCols, AClone(oBrwUFrOpc:aCols[1]))

									oBrwUFrOpc:FieldPut("BYX_CODOPC", BHS->BHS_CODPLA, Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_VEROPC", BHS->BHS_VERPLA, Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_CODFOR", BJW->BJW_CODFOR, Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_DESFOR", Posicione("BJ1",1,xFilial("BJ1")+BJW->BJW_CODFOR,"BJ1_DESCRI"), Len(oBrwUFrOpc:aCols))
									oBrwUFrOpc:FieldPut("BYX_TIPREG", M->BA1_TIPREG, Len(oBrwUFrOpc:aCols))

									Aadd(oBrwUFrOpc:AvetTrab,0)
								Endif
							Endif
						Endif

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Carrega as faixas e seus valores...                                      ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If lFamilia
							M->BK0_CODOPC := BHS->BHS_CODPLA
							M->BK0_VEROPC := BHS->BHS_VERPLA
							M->BK0_CODFOR := BJW->BJW_CODFOR
						Else
							M->BYX_CODOPC := BHS->BHS_CODPLA
							M->BYX_VEROPC := BHS->BHS_VERPLA
							M->BYX_CODFOR := BJW->BJW_CODFOR
						Endif

						PL260ForOpc(.T., lFamilia)

						BJW->( dbSkip() )
					Enddo
				Endif
			Endif

			BHS->( dbSkip() )
		Enddo
	Endif
Endif

If ExistBlock("PLSAIOPF")
    ExecBlock("PLSAIOPF",.F.,.F.,{oBrwOpc,oBrwOUsu,oBrwFrOpc,oBrwUFrOpc})
   //oBrwOpc   "BF1" - Opcional da familia
   //oBrwOUsu  "BF4" - Opcional do usuario
   //oBrwFrOpc "BK0" - Forma de cobranca familia
   //oBrwUFrOpc "BYX" - Forma de cobranca usuario
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Liga propriedade de alteracao do objeto...                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
// Relativos a familia
oBrwOpc:lAltered 	:= .T.	// Opcional da Familia...
oBrwFrOpc:lAltered 	:= .T.	// Forma de cobranca do opcional da familia...

//Relativos ao usuario
oBrwOUsu:lAltered   := .T.	// Opcional do usuario...
oBrwUFrOpc:lAltered := .T.  // Forma de cobranca do opcional do  usuario...

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Refresh neles!!                                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
// Relativos a familia
oBrwOpc:Atualiza()					// Atualiza opcional da familia...
oBrwFrOpc:ForceRefresh(oBrwOpc)		// Atualiza forma de cobranca do opcional da familia...

// Relativos ao usuario
oBrwOUsu:ForceRefresh(oBrwUsr)		// Atualiza opcinal do usuario
oBrwUFrOpc:ForceRefresh(oBrwOUsu)	// Atualiza forma de cobranca do opcional do usuario...

// Browse de usuarios
oBrwUsr:Atualiza()

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PL260ForOpc³ Autor ³ Wagner Mobile Costa³ Data ³ 11.11.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Sugere as formas de cobranca de opcional de acordo        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PL260ForOpc()                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ PL260ForOpc                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PL260ForOpc(lValid, lFamilia)
LOCAL nCols := 1, nHeader := 0
Local nPos := 0
Local nLido := 0
Local nPosVet := 0
LOCAL cCodQtd := ""
LOCAL cAno		  := Str(Year(M->BA3_DATBAS), 4)
LOCAL cMes 		  := StrZero(Month(M->BA3_DATBAS), 2)
LOCAL cKeyBBV	  := ''

Default lValid := .T.   // Caso seja chamada de um valid...
/*/
If nOpcx == K_Incluir .or. oBrwUsr:lInAddLine
Else
	Return .T.
Endif
/*/
cCodFor := M->BA3_FORCOP
If Empty(cCodFor)
	M->BA3_FORCOP := Iif(lFamilia, M->BK0_CODFOR, M->BYX_CODFOR)
	M->BA3_DEFOOP := BJ1->(Posicione("BJ1",1,xFilial("BJ1")+M->BA3_FORCOP,"BJ1_DESCRI"))
	cCodFor := M->BA3_FORCOP
Endif

If Empty(cCodFor)
	Return .T.
Endif

cCodOpc := Iif(lFamilia, M->BK0_CODOPC, M->BYX_CODOPC)
cVerOpc := Iif(lFamilia, M->BK0_VEROPC, M->BYX_VEROPC)

nPosVet := Ascan(aVetsOpc, {|x| x[1] = cCodFor+cCodOpc+cVerOpc .And. x[2] = Iif(lFamilia,"BBY","BZX") })

aDados 	 := {}
aCabec 	 := {}
nCols    := 1
nLido    := 0
If lFamilia
	STORE HEADER "BBY" TO aCabec For .T.
	Store COLS Blank "BBY" TO aDados FROM aCabec
Else
	STORE HEADER "BZX" TO aCabec For .T.
	Store COLS Blank "BZX" TO aDados FROM aCabec
Endif

If M->BA3_TIPOUS = "1"	// Pessoa Fisica - Opcionais
	BBV->(DbSetOrder(1))
	If lFamilia
		cKeyBBV := xFilial("BBV") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO +;
		           M->BK0_CODOPC + M->BK0_VEROPC + cCodFor
	Else
		cKeyBBV := xFilial("BBV") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO +;
		           M->BYX_CODOPC + M->BYX_VEROPC + cCodFor
	Endif

	dbSelectArea("BBV")
	BBV->(MsSeek(cKeyBBV))
	While 	!BBV->(Eof()) .and. xFilial("BBV")+BBV->BBV_CODIGO +BBV->BBV_VERSAO+;
					      		BBV->BBV_CODOPC+BBV->BBV_VEROPC+BBV->BBV_CODFOR == cKeyBBv
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Eu so levo pro usuario as formas de cobranca que lhe pertencem			 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If TYPE("M->BA1_TIPUSU") <> 'U' .And. TYPE("M->BA1_SEXO") <> 'U' .And. TYPE("M->BA1_GRAUPA") <> 'U'
			If (BBV->BBV_TIPUSR <> M->BA1_TIPUSU .And. !Empty(BBV->BBV_TIPUSR)).Or.;
			   (BBV->BBV_SEXO <> M->BA1_SEXO .And. !Empty(BBV->BBV_SEXO) .And. BBV->BBV_SEXO != '3' ) .Or.;
			   (BBV->BBV_GRAUPA <> M->BA1_GRAUPA .And. !Empty(BBV->BBV_GRAUPA))

			   BBV->(DbSkip())
			   Loop
			Endif
		Endif
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If Alltrim(aCabec[nHeader][2]) == "BBY_VALFAI" .or. Alltrim(aCabec[nHeader][2]) == "BZX_VALFAI"
				aDados[nCols][nHeader] := BBV->BBV_VALFAI

			Elseif Alltrim(aCabec[nHeader][2]) == "BZX_TIPREG"
				aDados[nCols][nHeader] := M->BA1_TIPREG

			Elseif (nPos := BBV->(FieldPos(StrTran(aCabec[nHeader][2], Iif(lFamilia,"BBY","BZX"), "BBV")))) > 0
				aDados[nCols][nHeader] := BBV->(FieldGet(nPos))

			ElseIf aCabec[nHeader][2] = "BBY_AUTOMA"
				aDados[nCols][nHeader] := "1"

			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BBV->(DbSkip())
	EndDo
Else	// Pessoa Juridica - Opcionais
	cCodQtd := '001'

	BBX->(DbSetOrder(1))
	If lFamilia
		cKeyBBX := xFilial("BBX") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_CONEMP + M->BA3_VERCON + M->BA3_SUBCON +;
					M->BA3_VERSUB + M->BA3_CODPLA + M->BA3_VERSAO + M->BK0_CODOPC + M->BK0_VEROPC + cCodFor + cCodQtd
	Else
		cKeyBBX := xFilial("BBX") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_CONEMP + M->BA3_VERCON + M->BA3_SUBCON +;
		            M->BA3_VERSUB + M->BA3_CODPLA + M->BA3_VERSAO + M->BYX_CODOPC + M->BYX_VEROPC + cCodFor + cCodQtd
	Endif

	dbSelectArea("BBX")
	BBX->(MsSeek(cKeyBBX))

	While ! BBX->(Eof()) .and. BBX->BBX_FILIAL+BBX->BBX_CODIGO+BBX->BBX_NUMCON+BBX->BBX_VERCON+BBX->BBX_SUBCON+;
							   BBX->BBX_VERSUB+BBX->BBX_CODPRO+BBX->BBX_VERPRO+BBX->BBX_CODOPC+BBX->BBX_VEROPC+;
							   BBX->BBX_CODFOR+BBX->BBX_CODQTD == cKeyBBX

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Eu so levo pro usuario as formas de cobranca que lhe pertencem			 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If TYPE("M->BA1_TIPUSU") <> 'U' .And. TYPE("M->BA1_SEXO") <> 'U' .And. TYPE("M->BA1_GRAUPA") <> 'U'
			If (BBX->BBX_TIPUSR <> M->BA1_TIPUSU .And. !Empty(BBX->BBX_TIPUSR)).Or.;
			   (BBX->BBX_SEXO <> M->BA1_SEXO .And. !Empty(BBX->BBX_SEXO) .And. BBX->BBX_SEXO != '3' ) .Or.;
			   (BBX->BBX_GRAUPA <> M->BA1_GRAUPA .And. !Empty(BBX->BBX_GRAUPA))

			   BBX->(DbSkip())
			   Loop
			Endif
		Endif

		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If Alltrim(aCabec[nHeader][2]) == "BBY_VALFAI" .or. Alltrim(aCabec[nHeader][2]) == "BZX_VALFAI"
				aDados[nCols][nHeader] := BBX->BBX_VALFAI

			Elseif Alltrim(aCabec[nHeader][2]) == "BZX_TIPREG"					
					If TYPE("M->BA1_TIPREG") <> 'U'
						aDados[nCols][nHeader] := M->BA1_TIPREG
					ElseIf (oBrwUsr:oBrowse:oBrowse:nAt <= Len(aDadUsr))
						aDados[nCols][nHeader] := aDadUsr[oBrwUsr:oBrowse:oBrowse:nAt,2]
					Else
						aDados[nCols][nHeader] := oBrwUsr:FieldGet("BA1_TIPREG",oBrwUsr:oBrowse:oBrowse:nAt)
					EndIf
			Elseif Alltrim(aCabec[nHeader][2]) == "BZX_RGIMP"
				aDados[nCols][nHeader] := '1'

			Elseif (nPos := BBX->(FieldPos(StrTran(aCabec[nHeader][2], Iif(lFamilia,"BBY","BZX"), "BBX")))) > 0
				aDados[nCols][nHeader] := BBX->(FieldGet(nPos))

			ElseIf aCabec[nHeader][2] = "BBY_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BBX->(DbSkip())
	EndDo
Endif

If nLido > 0
	If lFamilia
		If nPosVet = 0
			aadd(aVetsOpc,{cCodFor+cCodOpc+cVerOpc,"BBY","1",AClone(aDados),{}})
		Else
			aVetsOpc[nPosVet][4] := AClone(aDados)
		Endif
	Else
		If nPosVet = 0
			If Type("M->BA1_TIPREG") <> 'U'
				aadd(aVetsUOpc,{cCodFor+M->BA1_TIPREG+cCodOpc+cVerOpc,"BZX","1",AClone(aDados),{}})
			ElseIf (oBrwUsr:oBrowse:oBrowse:nAt < Len(aDadUsr))
				aadd(aVetsUOpc,{cCodFor+aDadUsr[oBrwUsr:oBrowse:oBrowse:nAt,2]+cCodOpc+cVerOpc,"BZX","1",AClone(aDados),{}})
			Else
				aadd(aVetsUOpc,{cCodFor+oBrwUsr:FieldGet("BA1_TIPREG",oBrwUsr:oBrowse:oBrowse:nAt)+cCodOpc+cVerOpc,"BZX","1",AClone(aDados),{}}) //revertendo ajuste aadd(aVetsUOpc,{cCodFor+M->BA1_TIPREG+cCodOpc+cVerOpc,"BZX","1",AClone(aDados),{}})
			EndIf

		Else
			aVetsUOpc[nPosVet][4] := AClone(aDados)
		Endif
	Endif
Endif

If ! lFamilia  // usuario nao possui folder de descontos... retorna deste ponto!
	Return()
Endif

nPosVet := Ascan(aVetsOpc, {|x| x[1] = cCodFor .And. x[2] = "BG0" })
aDados 	 := {}
aCabec   := {}
nCols    := 1
nLido    := 0
STORE HEADER "BG0" TO aCabec For .T.
Store COLS Blank "BG0" TO aDados FROM aCabec
If M->BA3_TIPOUS = "1"	// Pessoa Fisica - Desconto dos Opcionais
	dbSelectArea("BFW")
	BFW->(DbSetOrder(1))
	BFW->(MsSeek(	xFilial("BFW") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO +;
					M->BK0_CODOPC + M->BK0_VEROPC + cCodFor))
	While 	BFW->BFW_FILIAL = xFilial("BFW") .And.;
			BFW->BFW_CODIGO = M->BA3_CODINT + M->BA3_CODPLA .And.;
			BFW->BFW_VERSAO = M->BA3_VERSAO .And.;
			BFW->BFW_CODOPC = M->BK0_CODOPC .And. BFW->BFW_VEROPC = M->BK0_VEROPC .And.;
			BFW->BFW_CODFOR = cCodFor .And. ! BFW->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If (nPos := BFW->(FieldPos(StrTran(aCabec[nHeader][2], "BG0", "BFW")))) > 0
				aDados[nCols][nHeader] := BFW->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BG0_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BFW->(DbSkip())
	EndDo
Else	// Pessoa Juridica - Desconto dos Opcionais
	dbSelectArea("BGW")
	BGW->(DbSetOrder(1))
	BGW->(MsSeek(	xFilial("BGW") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_CONEMP +;
					M->BA3_VERCON + M->BA3_SUBCON + M->BA3_VERSUB + M->BA3_CODPLA +;
					M->BA3_VERSAO + M->BK0_CODOPC + M->BK0_VEROPC + cCodFor + cCodQtd))
	While 	BGW->BGW_FILIAL = xFilial("BGW") .And.;
			BGW->BGW_CODIGO = M->BA3_CODINT + M->BA3_CODEMP .And.;
			BGW->BGW_NUMCON = M->BA3_CONEMP .And. BGW->BGW_VERCON = M->BA3_VERCON .And.;
			BGW->BGW_SUBCON = M->BA3_SUBCON .And. BGW->BGW_VERSUB = M->BA3_VERSUB .And.;
			BGW->BGW_CODOPC = M->BK0_CODOPC .And. BGW->BGW_VEROPC = M->BK0_VEROPC .And.;
			BGW->BGW_CODFOR = cCodFor .And. BGW->BGW_CODQTD = cCodQtd .And. ! BGW->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If (nPos := BGW->(FieldPos(StrTran(aCabec[nHeader][2], "BG0", "BGW")))) > 0
				aDados[nCols][nHeader] := BGW->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BG0_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BGW->(DbSkip())
	EndDo
Endif

If nLido > 0
	If nPosVet = 0
		aadd(aVetsOpc,{cCodFor+cCodOpc+cVerOpc,"BG0","1",AClone(aDados),{}})
	Else
		aVetsOpc[nPosVet][4] := AClone(aDados)
	Endif
Endif

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260DEnd ³ Autor ³ Wagner Mobile Costa ³ Data ³ 22.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cCampo = Caso preenchido chamado por gatilho BA1_MATVID    ³±±
±±³          ³ Quando nao preenchido e chamado por X3_RELACAO dos campos  ³±±
±±³          ³ BA1_CEPUSR,BA1_ENDERE,BA1_NR_END,BA1_COMEND,BA1_BAIRRO     ³±±
±±³          ³ BA1_CODMUN,BA1_MUNICI,BA1_TELEFO                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Geraldo Felix - Funcao remodelada para tratar o campo de   ³±±
±±³          ³ origem do endereco(BA1_ORIEND). Esta funca agora sera usada³±±
±±³          ³ apenas pelo gatilho do campo BA1_MATVID.                   ³±±
±±³          ³ Ela nao ser mais utilizada como inicializador padrao.      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

*/
Function PLS260DEnd(cCampo,cCpoRel)

Local cTipUsu 	:= SuperGetMv("MV_PLCDTIT")
Local nPosTit 	:= nPosTipUsu := 0
Local lEndTit 	:= .F.
LOCAL lEndCli 	:= .F.
LOCAL lTitular 	:= .F.
LOCAL lUpd		:= .F.
Local uTipoDad
LOCAL nI			:= 0
LOCAL nSizeFld
LOCAL cRet 		:= ''
DEFAULT cCpoRel := ""

If BA1->( FieldPos("BA1_ORIEND") ) > 0
	If M->BA1_ORIEND == '1'  // Endereco do Titular.
		If Funname() = "PLSA124" // vindo da nova rotina de benificiarios por jornada
			If cCampo == "BTS_CEPUSR"
				cRet := BTS->BTS_CEPUSR
			Elseif cCampo == "BTS_ENDERE"
				cRet := BTS->BTS_ENDERE
			Elseif cCampo == "BTS_NR_END"
				cRet := BTS->BTS_NR_END
			Elseif cCampo == "BTS_COMEND"
				cRet := BTS->BTS_COMEND
			Elseif cCampo == "BTS_BAIRRO"
				cRet := BTS->BTS_BAIRRO
			Elseif cCampo == "BTS_MUNICI"
				cRet := BTS->BTS_MUNICI
			Elseif cCampo == "BTS_CODMUN"
				cRet := BTS->BTS_CODMUN
			Elseif cCampo == "BTS_ESTADO"
				cRet := BTS->BTS_ESTADO
			Elseif cCampo == "BTS_RESEXT"
				cRet := BTS->BTS_RESEXT
			Elseif cCampo == "BTS_TIPEND"
				cRet := BTS->BTS_TIPEND
			Endif
		Else
			// Encontra o titular no array de usuarios da familia.
			nPosTit := Ascan( oBrwUsr:Acols, {|x| x[oBrwUsr:FieldPos("BA1_TIPUSU")] == cTipUsu} )

			// Atualiza o endereco do dependente utilizando o endereco do titular.
			If nPosTit <> 0
				If cCampo == "BTS_CEPUSR"
					cRet := oBrwUsr:FieldGet("BA1_CEPUSR",nPosTit)
				Elseif cCampo == "BTS_ENDERE"
					cRet := oBrwUsr:FieldGet("BA1_ENDERE",nPosTit)
				Elseif cCampo == "BTS_NR_END"
					cRet := oBrwUsr:FieldGet("BA1_NR_END",nPosTit)
				Elseif cCampo == "BTS_COMEND"
					cRet := oBrwUsr:FieldGet("BA1_COMEND",nPosTit)
				Elseif cCampo == "BTS_BAIRRO"
					cRet := oBrwUsr:FieldGet("BA1_BAIRRO",nPosTit)
				Elseif cCampo == "BTS_MUNICI"
					cRet := oBrwUsr:FieldGet("BA1_MUNICI",nPosTit)
				Elseif cCampo == "BTS_CODMUN"
					cRet := oBrwUsr:FieldGet("BA1_CODMUN",nPosTit)
				Elseif cCampo == "BTS_ESTADO"
					cRet := oBrwUsr:FieldGet("BA1_ESTADO",nPosTit)
				Elseif cCampo == "BTS_RESEXT"
					cRet := oBrwUsr:FieldGet("BA1_RESEXT",nPosTit)
				Elseif cCampo == "BTS_TIPEND"
					cRet := oBrwUsr:FieldGet("BA1_TIPEND",nPosTit)
				Endif

				lUpd := .T.
			Endif
		Endif		

	Elseif M->BA1_ORIEND == '2' // Endereco do cliente.
		// Encontra o nivel de cobranca valido.
		aRet := PLSRETNCB(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_MATRIC,'')

		// Encontrou o nivel de cobranca... utiliza o cliente do nivel de cobranca.
		If aRet[1]
			SA1->( dbSetorder(01) )
			If SA1->( MsSeek(xFilial("SA1")+aRet[2]+aRet[3]) ) // Cliente + loja.
				If cCampo == "BTS_CEPUSR"
					cRet := SA1->A1_CEP
				Elseif cCampo == "BTS_ENDERE"
					cRet := SA1->A1_END
				Elseif cCampo == "BTS_BAIRRO"
					cRet := SA1->A1_BAIRRO
				Elseif cCampo == "BTS_MUNICI"
					cRet := SA1->A1_MUN
				Elseif cCampo == "BTS_ESTADO"
					cRet := SA1->A1_EST
				Elseif cCampo == "BTS_CODMUN"
					cRet := ''
				Elseif cCampo == "BTS_NR_END"
					cRet := ''
				Elseif cCampo == "BTS_COMEND"
					cRet := ''
				Endif
				lUpd := .T.
			Endif
		Endif

	Elseif M->BA1_ORIEND == '3' // Endereco do subcontrato...
		// Neste caso, o endereco utilizado sera o endereco de cobranca do subcontrato.
		BQC->( dbSetorder(01) )
		If BQC->( MsSeek(xFilial("BQC")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+;
										 M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB) )
			If cCampo == "BTS_CEPUSR"
				cRet := BQC->BQC_CEP
			Elseif cCampo == "BTS_ENDERE"
				cRet := BQC->BQC_LOGRAD
			Elseif cCampo == "BTS_NR_END"
				cRet := BQC->BQC_NUMERO
			Elseif cCampo == "BTS_COMEND"
				cRet := BQC->BQC_COMPLE
			Elseif cCampo == "BTS_BAIRRO"
				cRet := BQC->BQC_BAIRRO
			Elseif cCampo == "BTS_MUNICI"
				cRet := BQC->BQC_MUN
			Elseif cCampo == "BTS_CODMUN"
				cRet := BQC->BQC_CODMUN
			Elseif cCampo == "BTS_ESTADO"
				cRet := BQC->BQC_ESTADO
			Endif

			lUpd := .T.
		Endif

	Elseif M->BA1_ORIEND == '4'  .OR.  (M->BA1_ORIEND == ' ' .AND. M->BA1_TIPUSU == cTipUsu) // Endereco da vida...
		// Renomeia variavel para fazer a atualizacao do endereco. De usuario para vida.
		cCpoBTS := StrTran(cCampo,"BA1","BTS")

		// Testa se o campo existe na vida. Se nao existir, retorna com o contexto original da variavel no usuario.
		If BTS->( FieldPos(cCpoBTS) ) == 0
			cRet := CriaVar(cCampo)
		Endif

		// Transforma a variavem em macro do campo.
		cCpoBTS := "BTS->"+cCpoBTS

		// Atualiza variavel de retorno com conteudo do campo da vida.
		cRet := &cCpoBTS

		lUpd := .T.
	ElseIf BA1->( FieldPos("BA1_RESFAM") ) > 0 .AND. M->BA1_ORIEND == '5' // Responsável Familia
		
		nLen := Len(oBrwUsr:Acols)
		nFdDtBlo := oBrwUsr:FieldPos("BA1_DATBLO")
		nFdResFam := oBrwUsr:FieldPos("BA1_RESFAM")
		nFdTipUsu := oBrwUsr:FieldPos("BA1_TIPUSU")
		nPosResp := 0
		
		For nI := 1 To nLen

			If (oBrwUsr:aCols[nI,nFdResFam] == '1' .AND. Empty(oBrwUsr:aCols[nI,nFdDtBlo])  ) .OR.;
				( Empty(oBrwUsr:aCols[nI,nFdResFam]) .AND. oBrwUsr:aCols[nI,nFdTipUsu] == cCodTit ) 
	
				nPosResp := nI
				
			EndIf
		
		Next
		
		// Atualiza o endereco do dependente utilizando o endereco do titular.
		If nPosResp <> 0
			If cCampo == "BTS_CEPUSR"
				cRet := oBrwUsr:FieldGet("BA1_CEPUSR",nPosResp)
			Elseif cCampo == "BTS_ENDERE"
				cRet := oBrwUsr:FieldGet("BA1_ENDERE",nPosResp)
			Elseif cCampo == "BTS_NR_END"
				cRet := oBrwUsr:FieldGet("BA1_NR_END",nPosResp)
			Elseif cCampo == "BTS_COMEND"
				cRet := oBrwUsr:FieldGet("BA1_COMEND",nPosResp)
			Elseif cCampo == "BTS_BAIRRO"
				cRet := oBrwUsr:FieldGet("BA1_BAIRRO",nPosResp)
			Elseif cCampo == "BTS_MUNICI"
				cRet := oBrwUsr:FieldGet("BA1_MUNICI",nPosResp)
			Elseif cCampo == "BTS_CODMUN"
				cRet := oBrwUsr:FieldGet("BA1_CODMUN",nPosResp)
			Elseif cCampo == "BTS_ESTADO"
				cRet := oBrwUsr:FieldGet("BA1_ESTADO",nPosResp)
			Elseif cCampo == "BTS_RESEXT"
				cRet := oBrwUsr:FieldGet("BA1_RESEXT",nPosResp)
			Elseif cCampo == "BTS_TIPEND"
				cRet := oBrwUsr:FieldGet("BA1_TIPEND",nPosResp)
			Endif

			lUpd := .T.
		Endif
	Endif

	// Caso nao atualize o endereco, inicializa as variaveis em branco.

	If !lUpd .and. (Empty(M->BA1_CEPUSR) .and. Empty(M->BA1_ENDERE) .and.;
					  	Empty(M->BA1_NR_END) .and. Empty(M->BA1_COMEND) .and.;
					  	Empty(M->BA1_BAIRRO) .and. Empty(M->BA1_MUNICI) .and.;
						Empty(M->BA1_CODMUN) .and. Empty(M->BA1_ESTADO) .and.;
						Empty(M->BA1_CEPUSR) .and. Empty(M->BA1_ENDERE) .and.;
						Empty(M->BA1_NR_END) .and. Empty(M->BA1_COMEND) .and.;
						Empty(M->BA1_BAIRRO) .and. Empty(M->BA1_MUNICI) .and.;
						Empty(M->BA1_CODMUN) .and. Empty(M->BA1_ESTADO) )

		M->BA1_CEPUSR := CriaVar("BA1_CEPUSR")
		M->BA1_ENDERE := CriaVar("BA1_ENDERE")
		M->BA1_NR_END := CriaVar("BA1_NR_END")
		M->BA1_COMEND := CriaVar("BA1_COMEND")
		M->BA1_BAIRRO := CriaVar("BA1_BAIRRO")
		M->BA1_MUNICI := CriaVar("BA1_MUNICI")
		M->BA1_CODMUN := CriaVar("BA1_CODMUN")
		M->BA1_ESTADO := CriaVar("BA1_ESTADO")
	Endif

	Return(cRet)
Endif

Return("")

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLS260AtEnd ³ Autor ³ Wagner Mobile Costa ³ Data ³ 22.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza dados de endereco do usuario de acordo BA1_ENDCLI ³±±
±±³Descricao ³ ou BA1_ORIEND.                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260AtEnd(cAlias)
LOCAL nPosTit := 0
LOCAL nI := 0
LOCAL cCodTit := SuperGetMv("MV_PLCDTIT")

If cAlias == "BA1" .and. BA1->( FieldPos("BA1_ORIEND") ) > 0
	If M->BA1_ORIEND == '1'  // Endereco do Titular.
		// Esta opcao so eh valida para dependentes.
		If M->BA1_TIPUSU == cCodTit
			MsgAlert("Esta opcao so e valida para dependentes... Verifique!")
			Return(.F.)
		Endif

		// Encontra o titular no array de usuarios da familia.
		nPosTit := Ascan( oBrwUsr:Acols, {|x| x[oBrwUsr:FieldPos("BA1_TIPUSU")] == cCodTit} )

		// Atualiza o endereco do dependente utilizando o endereco do titular.
		If nPosTit <> 0
			M->BA1_CEPUSR := oBrwUsr:FieldGet("BA1_CEPUSR",nPosTit)
			M->BA1_ENDERE := oBrwUsr:FieldGet("BA1_ENDERE",nPosTit)
			M->BA1_NR_END := oBrwUsr:FieldGet("BA1_NR_END",nPosTit)
			M->BA1_COMEND := oBrwUsr:FieldGet("BA1_COMEND",nPosTit)
			M->BA1_BAIRRO := oBrwUsr:FieldGet("BA1_BAIRRO",nPosTit)
			M->BA1_MUNICI := oBrwUsr:FieldGet("BA1_MUNICI",nPosTit)
			M->BA1_ESTADO := oBrwUsr:FieldGet("BA1_ESTADO",nPosTit)
			M->BA1_CODMUN := oBrwUsr:FieldGet("BA1_CODMUN",nPosTit) //INCLUIDO POR PETERSON 27.08.07
		Else
			MsgAlert("Titular nao encontrado na familia... Verifique!")
			Return(.F.)
		Endif

	Elseif M->BA1_ORIEND == '2' // Endereco do cliente.
		// Encontra o nivel de cobranca valido.
		aRet := PLSRETNCB(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_MATRIC,'')

		// Encontrou o nivel de cobranca... utiliza o cliente do nivel de cobranca.
		If aRet[1]
			SA1->( dbSetorder(01) )
			If SA1->( MsSeek(xFilial("SA1")+aRet[2]+aRet[3]) ) // Cliente + loja.
				M->BA1_CEPUSR := SA1->A1_CEP
				M->BA1_ENDERE := SA1->A1_END
				M->BA1_BAIRRO := SA1->A1_BAIRRO
				M->BA1_MUNICI := SA1->A1_MUN
				M->BA1_ESTADO := SA1->A1_EST
				M->BA1_NR_END := Space(TamSx3('BA1_NR_END')[1])

				If SA1->(FieldPos("A1_COMPLEM")) > 0
					M->BA1_COMEND := SA1->A1_COMPLEM
				Else
					M->BA1_COMEND := Space(TamSx3('BA1_COMEND')[1])
				EndIf

				If SA1->(FieldPos("A1_COD_MUN")) > 0
					M->BA1_CODMUN := PlsEstBC(M->BA1_ESTADO) + Alltrim(SA1->A1_COD_MUN)
				Else
					M->BA1_CODMUN := Space(TamSx3('BA1_CODMUN')[1])
				EndIf

			Else
				MsgAlert("Cliente invalido no nivel de cobranca... Verifique!")
				Return(.F.)
			Endif
		Else
			MsgAlert("Nao foi encontrado um nivel de cobranca valido... Verifique!")
			Return(.F.)
		Endif

	Elseif M->BA1_ORIEND == '3' // Endereco do subcontrato...
		// Esta opcao so eh valida para pessoa Juridica.
		If M->BA3_TIPOUS <> '2'
			MsgAlert("Esta opcao so e valida para pessoa juridica!")
			Return(.F.)
		Endif

		// Neste caso, o endereco utilizado sera o endereco de cobranca do subcontrato.
		BQC->( dbSetorder(01) )
		If BQC->( MsSeek(xFilial("BQC")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+;
										 M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB) )
			M->BA1_CEPUSR := BQC->BQC_CEP
			M->BA1_ENDERE := BQC->BQC_LOGRAD
			M->BA1_BAIRRO := BQC->BQC_BAIRRO
			M->BA1_MUNICI := BQC->BQC_MUN
			M->BA1_ESTADO := BQC->BQC_ESTADO
			M->BA1_NR_END := BQC->BQC_NUMERO
			M->BA1_COMEND := BQC->BQC_COMPLE
			M->BA1_CODMUN := BQC->BQC_CODMUN
		Else
			MsgAlert("Subcontrato invalido... Verifique!")
			Return(.F.)
		Endif
	Elseif M->BA1_ORIEND == '4' // Endereco da vida...
		BTS->( dbSetorder(01) )
		If BTS->( MsSeek(xFilial("BTS")+M->BA1_MATVID) )
			M->BA1_CEPUSR := BTS->BTS_CEPUSR
			M->BA1_ENDERE := BTS->BTS_ENDERE
			M->BA1_NR_END := BTS->BTS_NR_END
			M->BA1_COMEND := BTS->BTS_COMEND
			M->BA1_BAIRRO := BTS->BTS_BAIRRO
			M->BA1_MUNICI := BTS->BTS_MUNICI
			M->BA1_ESTADO := BTS->BTS_ESTADO
			M->BA1_CODMUN := BTS->BTS_CODMUN  //INCLUIDO POR PETERSON 27.08.07
		Endif
	ElseIf BA1->( FieldPos("BA1_RESFAM") ) > 0 .AND. M->BA1_ORIEND == '5' // Responsável Familia
		
		// Esta opcao so eh valida para dependentes.
		If (M->BA1_RESFAM == '1' .AND. Empty(M->BA1_DATBLO) ) .OR.;
			( Empty(M->BA1_RESFAM) .AND. M->BA1_TIPUSU == cCodTit )
			MsgAlert("Esta opcao so e valida para dependentes... Verifique!")
			Return(.F.)
		Endif
		
		nLen := Len(oBrwUsr:Acols)
		nFdDtBlo := oBrwUsr:FieldPos("BA1_DATBLO")
		nFdResFam := oBrwUsr:FieldPos("BA1_RESFAM")
		nFdTipUsu := oBrwUsr:FieldPos("BA1_TIPUSU")
		nPosResp := 0
		
		For nI := 1 To nLen

			If (oBrwUsr:aCols[nI,nFdResFam] == '1' .AND. Empty(oBrwUsr:aCols[nI,nFdDtBlo])  ) .OR.;
				( Empty(oBrwUsr:aCols[nI,nFdResFam]) .AND. oBrwUsr:aCols[nI,nFdTipUsu] == cCodTit ) 
	
				nPosResp := nI
				
			EndIf
		Next
		
		// Atualiza o endereco do dependente utilizando o endereco do titular.
		If nPosResp <> 0
			M->BA1_CEPUSR := oBrwUsr:FieldGet("BA1_CEPUSR",nPosResp)
			M->BA1_ENDERE := oBrwUsr:FieldGet("BA1_ENDERE",nPosResp)
			M->BA1_NR_END := oBrwUsr:FieldGet("BA1_NR_END",nPosResp)
			M->BA1_COMEND := oBrwUsr:FieldGet("BA1_COMEND",nPosResp)
			M->BA1_BAIRRO := oBrwUsr:FieldGet("BA1_BAIRRO",nPosResp)
			M->BA1_MUNICI := oBrwUsr:FieldGet("BA1_MUNICI",nPosResp)
			M->BA1_ESTADO := oBrwUsr:FieldGet("BA1_ESTADO",nPosResp)
			M->BA1_CODMUN := oBrwUsr:FieldGet("BA1_CODMUN",nPosResp) //INCLUIDO POR PETERSON 27.08.07
		Else
			MsgAlert("Responsável nao encontrado na familia... Verifique!")
			Return(.F.)
		Endif
	Else
		M->BA1_CEPUSR := CriaVar("BA1_CEPUSR")
		M->BA1_ENDERE := CriaVar("BA1_ENDERE")
		M->BA1_NR_END := CriaVar("BA1_NR_END")
		M->BA1_COMEND := CriaVar("BA1_COMEND")
		M->BA1_BAIRRO := CriaVar("BA1_BAIRRO")
		M->BA1_MUNICI := CriaVar("BA1_MUNICI")
		M->BA1_ESTADO := CriaVar("BA1_ESTADO")
		M->BA1_CODMUN := CriaVar("BA1_CODMUN") //INCLUIDO POR PETERSON 27.08.07
	Endif
Elseif cAlias == "BTS" .and. BTS->( FieldPos("BTS_ORIEND") ) > 0

	// Disponivel apenas no cadastro de usuarios.
	If Type("M->BA1_TIPUSU") == "U"
		MsgAlert("Esta opcao so esta disponivel no cadastro de familia/beneficiarios!")
		Return(.F.)
	Endif

	If M->BTS_ORIEND == '1'  // Endereco do Titular.

		// Esta opcao so eh valida para dependentes.
		If M->BA1_TIPUSU == cCodTit
			MsgAlert("Esta opcao so e valida para dependentes... Verifique!")
			Return(.F.)
		Endif

		// Encontra o titular no array de usuarios da familia.
		nPosTit := Ascan( oBrwUsr:Acols, {|x| x[oBrwUsr:FieldPos("BA1_TIPUSU")] == cCodTit} )

		// Atualiza o endereco do dependente utilizando o endereco do titular.
		If nPosTit <> 0
			M->BTS_CEPUSR := oBrwUsr:FieldGet("BA1_CEPUSR",nPosTit)
			M->BTS_ENDERE := oBrwUsr:FieldGet("BA1_ENDERE",nPosTit)
			M->BTS_NR_END := oBrwUsr:FieldGet("BA1_NR_END",nPosTit)
			M->BTS_COMEND := oBrwUsr:FieldGet("BA1_COMEND",nPosTit)
			M->BTS_BAIRRO := oBrwUsr:FieldGet("BA1_BAIRRO",nPosTit)
			M->BTS_MUNICI := oBrwUsr:FieldGet("BA1_MUNICI",nPosTit)
			M->BTS_ESTADO := oBrwUsr:FieldGet("BA1_ESTADO",nPosTit)
			M->BTS_CODMUN := oBrwUsr:FieldGet("BA1_CODMUN",nPosTit) //INCLUIDO POR PETERSON 27.08.07
		Else
			MsgAlert("Titular nao encontrado na familia... Verifique!")
			Return(.F.)
		Endif

	Elseif M->BTS_ORIEND == '2' // Endereco do cliente.
		// Encontra o nivel de cobranca valido.
		aRet := PLSRETNCB(M->BA3_CODINT,M->BA3_CODEMP,M->BA3_MATRIC,'')

		// Encontrou o nivel de cobranca... utiliza o cliente do nivel de cobranca.
		If aRet[1]
			SA1->( dbSetorder(01) )
			If SA1->( MsSeek(xFilial("SA1")+aRet[2]+aRet[3]) ) // Cliente + loja.
				M->BTS_CEPUSR := SA1->A1_CEP
				M->BTS_ENDERE := SA1->A1_END
				M->BTS_BAIRRO := SA1->A1_BAIRRO
				M->BTS_MUNICI := SA1->A1_MUN
				M->BTS_ESTADO := SA1->A1_EST
				M->BTS_NR_END := Space(TamSx3('BTS_NR_END')[1])

				If SA1->(FieldPos("A1_COMPLEM")) > 0
					M->BTS_COMEND := SA1->A1_COMPLEM
				Else
					M->BTS_COMEND := Space(TamSx3('BTS_COMEND')[1])
				EndIf

				If SA1->(FieldPos("A1_COD_MUN")) > 0
					M->BTS_CODMUN := PlsEstBC(M->BTS_ESTADO)+Alltrim(SA1->A1_COD_MUN)
				Else
					M->BTS_CODMUN := Space(TamSx3('BTS_CODMUN')[1])
				EndIf
			Else
				MsgAlert("Cliente invalido no nivel de cobranca... Verifique!")
				Return(.F.)
			Endif
		Else
			MsgAlert("Nao foi encontrado um nivel de cobranca valido... Verifique!")
			Return(.F.)
		Endif

	Elseif M->BTS_ORIEND == '3' // Endereco do subcontrato...
		// Esta opcao so eh valida para pessoa Juridica.
		If M->BA3_TIPOUS <> '2'
			MsgAlert("Esta opcao so e valida para pessoa juridica!")
			Return(.F.)
		Endif

		// Neste caso, o endereco utilizado sera o endereco de cobranca do subcontrato.
		BQC->( dbSetorder(01) )
		If BQC->( MsSeek(xFilial("BQC")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+;
										 M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB) )
			M->BTS_CEPUSR := BQC->BQC_CEP
			M->BTS_ENDERE := BQC->BQC_LOGRAD
			M->BTS_BAIRRO := BQC->BQC_BAIRRO
			M->BTS_MUNICI := BQC->BQC_MUN
			M->BTS_ESTADO := BQC->BQC_ESTADO
			M->BTS_NR_END := BQC->BQC_NUMERO
			M->BTS_COMEND := BQC->BQC_COMPLE
			M->BTS_CODMUN := BQC->BQC_CODMUN
		Else
			MsgAlert("Subcontrato invalido... Verifique!")
			Return(.F.)
		Endif
	ElseIf BA1->( FieldPos("BA1_RESFAM") ) > 0 .AND. M->BA1_ORIEND == '5' // Responsável Familia
		
		// Esta opcao so eh valida para dependentes.
		If (M->BA1_RESFAM == '1' .AND. Empty(M->BA1_DATBLO)) .OR.;
			( Empty(M->BA1_RESFAM) .AND. M->BA1_TIPUSU == cCodTit )
			MsgAlert("Esta opcao so e valida para dependentes... Verifique!")
			Return(.F.)
		Endif
		
		nLen := Len(oBrwUsr:Acols)
		nFdDtBlo := oBrwUsr:FieldPos("BA1_DATBLO")
		nFdResFam := oBrwUsr:FieldPos("BA1_RESFAM")
		nFdTipUsu := oBrwUsr:FieldPos("BA1_TIPUSU")
		nPosResp := 0
		
		For nI := 1 To nLen

			If (oBrwUsr:aCols[nI,nFdResFam] == '1' .AND. Empty(oBrwUsr:aCols[nI,nFdDtBlo])  ) .OR.;
				( Empty(oBrwUsr:aCols[nI,nFdResFam]) .AND. oBrwUsr:aCols[nI,nFdTipUsu] == cCodTit ) 
	
				nPosResp := nI
				
			EndIf
		Next
		
		// Atualiza o endereco do dependente utilizando o endereco do titular.
		If nPosResp <> 0
			M->BTS_CEPUSR := oBrwUsr:FieldGet("BA1_CEPUSR",nPosResp)
			M->BTS_ENDERE := oBrwUsr:FieldGet("BA1_ENDERE",nPosResp)
			M->BTS_NR_END := oBrwUsr:FieldGet("BA1_NR_END",nPosResp)
			M->BTS_COMEND := oBrwUsr:FieldGet("BA1_COMEND",nPosResp)
			M->BTS_BAIRRO := oBrwUsr:FieldGet("BA1_BAIRRO",nPosResp)
			M->BTS_MUNICI := oBrwUsr:FieldGet("BA1_MUNICI",nPosResp)
			M->BTS_ESTADO := oBrwUsr:FieldGet("BA1_ESTADO",nPosResp)
			M->BTS_CODMUN := oBrwUsr:FieldGet("BA1_CODMUN",nPosResp) //INCLUIDO POR PETERSON 27.08.07
		Else
			MsgAlert("Responsável nao encontrado na familia... Verifique!")
			Return(.F.)
		Endif
	Else
		M->BTS_CEPUSR := Criavar("BTS_CEPUSR")
		M->BTS_ENDERE := Criavar("BTS_ENDERE")
		M->BTS_NR_END := Criavar("BTS_NR_END")
		M->BTS_COMEND := Criavar("BTS_COMEND")
		M->BTS_BAIRRO := Criavar("BTS_BAIRRO")
		M->BTS_MUNICI := Criavar("BTS_MUNICI")
		M->BTS_ESTADO := Criavar("BTS_ESTADO")
		M->BTS_CODMUN := Criavar("BA1_CODMUN") //INCLUIDO POR PETERSON 27.08.07
	Endif
Endif

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLS260IsTit ³ Autor ³ Wagner Mobile Costa ³ Data ³ 23.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Retorna se o usuario atual é titular                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260IsTit()

Local lRetIsTit := .F.

If ReadVar() =='M->BA3_CODPLA' .Or. Type("M->BA1_TIPUSU") == "U"
	lRetIsTit:= BA1->BA1_TIPUSU <> GetNewPar("MV_PLCDTIT","T")
ElseIf ReadVar() == 'M->BF4_CODPRO'
	lRetIsTit:= oBrwUsr:aCols[oBrwUsr:Linha(),PLRETPOS("BA1_TIPUSU",oBrwUsr:aHeader)] <> GetNewPar("MV_PLCDTIT","T")
Else
	lRetIsTit:= M->BA1_TIPUSU <> GetNewPar("MV_PLCDTIT","T")
EndIf

Return lRetIsTit

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ P260TIPUSU ³ Autor ³ Wagner Mobile Costa ³ Data ³ 23.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Inicializa o conteudo do campo BA1_TIPUSU                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß??ßßß
*/
Function P260TIPUSU()

Return If(inclui .And. lPrim260, GetNewPar("MV_PLCDTIT","T"), SuperGetMv("MV_PLCDDEP", .F., "D"))

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ P260DESUSU ³ Autor ³ Wagner Mobile Costa ³ Data ³ 23.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Inicializa o conteudo do campo BA1_DESUSU                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function P260DESUSU()

Local cTipUsu := ""

If INCLUI
	If lPrim260
		cTipUsu := SuperGetMv("MV_PLCDTIT")
	Else
		cTipUsu := SuperGetMv("MV_PLCDDEP", .F., "D")
	Endif
Else
	cTipUsu := BA1->BA1_TIPUSU
Endif

Return Posicione("BIH",1,xFilial("BIH")+cTipUsu,"BIH_DESCRI")

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ P260GRAUPA ³ Autor ³ Wagner Mobile Costa ³ Data ³ 23.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Inicializa o conteudo do campo BA1_GRAUPA                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function P260GRAUPA()

Return(IIf(inclui .And. lPrim260, GetMv("MV_PLCDTGP"), Space(Len(BA1->BA1_GRAUPA))))


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ P260DESGRA ³ Autor ³ Wagner Mobile Costa ³ Data ³ 23.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Inicializa o conteudo do campo BA1_DESGRA                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function P260DESGRA()

Local cGrauPa := ""

If INCLUI
	If lPrim260
		cGrauPa := SuperGetMv("MV_PLCDTGP")
	Else
		cGrauPa := ""
	Endif
Else
	cGrauPa := BA1->BA1_GRAUPA
Endif

Return If(Inclui .And. !lPrim260,"",Posicione("BRP",1,xFilial("BRP")+cGrauPa,"BRP_DESCRI"))

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ PLS260ALC  ³ Autor ³ Wagner Mobile Costa ³ Data ³ 25.10.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Efetua chamada para alteracao do cliente da familia        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PLS260ALC()

If Empty(M->BA3_CODCLI) .Or. Empty(M->BA3_LOJA)
	Help("",1,"PLS600ALC")
	Return
Endif

//-------------------------------------------------------------------
//  LGPD
//-------------------------------------------------------------------
	objCENFUNLGP:useLogUser()

SA1->(DbSetOrder(1))
If SA1->(MsSeek(xFilial("SA1")+M->BA3_CODCLI+M->BA3_LOJA))
	SA1->(AxAltera("SA1",SA1->(Recno()),nOpcx))
Endif
lAltcli := .T.
Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Pl260AtuVar ³ Autor ³ Wagner Mobile Costa ³ Data ³ 11.11.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Atualiza as variaveis dos campos virtual X3_CONTEXT = 'V'  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function Pl260AtuVar(aCabec, aDados, nCols)

Local nDados, lIncOld := INCLUI
Local nHeader
INCLUI := .F.

For nHeader := 1 To Len(aCabec)
	If aCabec[nHeader][10] = "V"		// Atualizo os campos virtuais
		&("M->" + aCabec[nHeader][2]) := Nil
	Endif
Next

// Carrego os dados para memoria
For nHeader := 1 To Len(aCabec)
	If aCabec[nHeader][10] <> "V"
		&("M->" + aCabec[nHeader][2]) := aDados[nCols][nHeader]
		RunTrigger(1,,,, aCabec[nHeader][2])
	Endif
Next

For nHeader := 1 To Len(aCabec)
	If aCabec[nHeader][10] = "V"		// Atualizo os campos virtuais
		aDados[nCols][nHeader] := &("M->" + aCabec[nHeader][2])
	Endif
Next

INCLUI := lIncOld

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Pl260FilBBU ³ Autor ³ Wagner Mobile Costa ³ Data ³ 27.11.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Filtra a tabela de cobranca da familia                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function Pl260FilBBU(aCols, aHeader, nLine)


If !lFiltro	// Indica que esta visualizando tabelas anteriores 
	Return aCols[nLine,GdFIELDPOS("BBU_TABVLD",AHEADER)] <> Ctod("") .or. Empty(aCols[nLine,GdFIELDPOS("BBU_TABVLD",AHEADER)])
Else
	If ValType(aCols[nLine,GdFIELDPOS("BBU_TABVLD",AHEADER)]) == "C"
		Return Stod(aCols[nLine,GdFIELDPOS("BBU_TABVLD",AHEADER)]) >=  dDataBase  .or. Empty(aCols[nLine,GdFIELDPOS("BBU_TABVLD",AHEADER)])
	Else
		Return aCols[nLine,GdFIELDPOS("BBU_TABVLD",AHEADER)] >=  dDataBase  .or. Empty(aCols[nLine,GdFIELDPOS("BBU_TABVLD",AHEADER)])
	EndIf	
Endif

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260CLI ºAutor  ³Geraldo Felix Juniorº Data ³  01/15/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Validacao do codigo do cliente da familia.                 º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260CLI()
LOCAL lRet := .T.

If !Empty(BA3->BA3_CODCLI)
	SA1->( dbSetorder(01) )
	If !SA1->( MsSeek(xFilial("SA1")+M->BA3_CODCLI+M->BA3_LOJA) )
		Help("",1,"REGNOIS")
		lRet := .F.
	Endif
Endif

If lRet

	lRet := PlsEndCob()
Endif

Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Geraldo Felix Juniorº Data ³  01/15/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Validacao da equipe de venda na familia                    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260EQP(cAlias)
LOCAL lRet := .T.
Local cEquipe := &("M->" + cAlias + "_EQUIPE")
Local cCodVen := &("M->" + cAlias + "_CODVEN")
Local cCodVe2 := &("M->" + cAlias + "_CODVE2")

If !Empty(cEquipe)
	BXL->( dbSetorder(01) )
	If BXL->( MsSeek(xFilial("BXL")+cEquipe) )
			BXM->( dbSetorder(01) )
			If !BXM->( MsSeek(xFilial("BXM")+BXL->BXL_SEQ) )
				Help("",1,"PLS260EQP1")
				lRet := .F.
			ElseIf !Empty(cCodVen)
				If !BXM->( MsSeek(xFilial("BXM")+BXL->BXL_SEQ+cCodVen) )
					Help("",1,"PLS260EQP2")
					lRet := .F.
				EndIf
			ElseIf !Empty(cCodVe2)
				If !BXM->( MsSeek(xFilial("BXM")+BXL->BXL_SEQ+cCodVe2) )
					Help("",1,"PLS260EQP3")
					lRet := .F.
				EndIf
			Endif
	Else
		Help("",1,"REGNOIS")
		lRet := .F.
	Endif
Endif

Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  01/20/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSIPCLI(cCampo)
LOCAL cReturn
Local cTipReg	:= GetNewPar("MV_PLTRTIT","00")
Local cMvPLTIT  := SuperGetMv("MV_PLCDTIT")
Local ba3Num   := ''
Local lQuebra := .F.
If Inclui
	If SX3->X3_TIPO == 'C'
		Return(Space(SX3->X3_TAMANHO))
	Elseif SX3->X3_TIPO == 'N'
		Return(0)
	Elseif SX3->X3_TIPO == 'D'
		Return(cTod(''))
	Endif
Endif

If BA3->BA3_ENDCOB == '1'
	SA1->(dbSetorder(01))
	SA1->( MsSeek(xFilial("SA1")+BA3->BA3_CODCLI) )
	If Alltrim(cCampo) == 'BA3_CEP'
		cReturn := SA1->A1_CEP
	Elseif Alltrim(cCampo) == 'BA3_END'
		cReturn := SA1->A1_END
	Elseif Alltrim(cCampo) == 'BA3_BAIRRO'
		cReturn := SA1->A1_BAIRRO
	Elseif Alltrim(cCampo) == 'BA3_MUN'
		cReturn := SA1->A1_MUN
	Elseif Alltrim(cCampo) == 'BA3_ESTADO'
		cReturn := SA1->A1_EST
	Endif
	lQuebra:= AT( ",", SA1->A1_END ) > 0 
	If lQuebra
		ba3Num := StrTokArr(SA1->A1_END, ",")
		If  Alltrim(cCampo) == 'BA3_END'
			BA3->BA3_END	  := ba3Num[1]
	 	Elseif 	Alltrim(cCampo) == 'BA3_NUMERO'								
	 		BA3->BA3_NUMERO  := ba3Num[2]
		Endif
	Endif
	

Elseif BA3->BA3_ENDCOB == '2'

	If Alltrim(BA1->BA1_TIPUSU) <> Alltrim(SuperGetMv("MV_PLCDTIT"))
		aArea := GetArea()
		BA1->( dbSetorder(01) )
		BA1->( MsSeek(xFilial("BA1")+BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC+cTipReg) )
	Endif

	If Alltrim(cCampo) == 'BA3_CEP'
		cReturn := BA1->BA1_CEPUSR
	Elseif Alltrim(cCampo) == 'BA3_END'
		cReturn := BA1->BA1_ENDERE
	Elseif Alltrim(cCampo) == 'BA3_BAIRRO'
		cReturn := BA1->BA1_BAIRRO
	Elseif Alltrim(cCampo) == 'BA3_CODMUN'
		cReturn := BA1->BA1_CODMUN
	Elseif Alltrim(cCampo) == 'BA3_MUN'
		cReturn := BA1->BA1_MUNICI
	Elseif Alltrim(cCampo) == 'BA3_ESTADO'
		cReturn := BA1->BA1_ESTADO
	Elseif Alltrim(cCampo) == 'BA3_NUMERO'
		cReturn := BA1->BA1_NR_END
	Elseif Alltrim(cCampo) == 'BA3_COMPLE'
		cReturn := BA1->BA1_COMEND
	Endif
ElseIf BA1->( FieldPos("BA1_RESFAM") ) > 0 .AND. BA3->BA3_ENDCOB == '5' // Responsável Familia
	nRecno := 0
	If Alltrim(BA1->BA1_TIPUSU) <> Alltrim(SuperGetMv("MV_PLCDTIT"))
		aArea := GetArea()
		BA1->( dbSetorder(12) ) //BA1_FILIAL + BA1_CODINT + BA1_CODEMP + BA1_MATRIC + BA1_RESFAM + BA1_TIPUSU + BA1_TIPREG + BA1_DIGITO
		If BA1->( MsSeek(xFilial("BA1")+BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC+"1") )
			Do While !BA1->(Eof()) .AND. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_RESFAM) == ;
											xFilial("BA1")+BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC+"1" .AND. ;
											!lResp
											
					If  (BA1->BA1_RESFAM == '1' .AND. Empty(BA1->BA1_DATBLO)  ) .OR.;
						( Empty(BA1->BA1_RESFAM) .AND. BA1->BA1_TIPUSU == Alltrim(cMvPLTIT)) 
						nRecno := BA1->(Recno())
					EndIf
				
				
				BA1->(DbSkip())
				
			EndDo
		EndIf
	Endif
	If nRecno > 0
		BA1->(DbGoto(nRecno))
		
		If Alltrim(cCampo) == 'BA3_CEP'
			cReturn := BA1->BA1_CEPUSR
		Elseif Alltrim(cCampo) == 'BA3_END'
			cReturn := BA1->BA1_ENDERE
		Elseif Alltrim(cCampo) == 'BA3_BAIRRO'
			cReturn := BA1->BA1_BAIRRO
		Elseif Alltrim(cCampo) == 'BA3_CODMUN'
			cReturn := BA1->BA1_CODMUN
		Elseif Alltrim(cCampo) == 'BA3_MUN'
			cReturn := BA1->BA1_MUNICI
		Elseif Alltrim(cCampo) == 'BA3_ESTADO'
			cReturn := BA1->BA1_ESTADO
		Elseif Alltrim(cCampo) == 'BA3_NUMERO'
			cReturn := BA1->BA1_NR_END
		Elseif Alltrim(cCampo) == 'BA3_COMPLE'
			cReturn := BA1->BA1_COMEND
		Endif
		
	Endif
Endif

Return(cReturn)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260VLD    ºAutor  ³Geraldo Felix Juniorº Data ³  17/02/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ inicializador padrao do campo validade da familia...         º±±
±±º          ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                           º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260VLD()
Local dRet 	:= cTod('')
LOCAL nCnt  := 0
LOCAL nMeses:= GetNewPar("MV_PLSPRPF",12)
LOCAL cDia 	:= SubStr(dtoc(dDataBase),1,2)
LOCAL nMes 	:= Val(SubStr(dtoc(dDataBase),4,2))
LOCAL nAno 	:= Val(StrZero(Year(dDataBase),4))

For nCnt := 1 To nMeses
	++nMes
	If nMes > 12
		nMes := 1
		++nAno
	Endif
Next

If lJuridico
	If !BQC->(Eof())
		dRet := BQC->BQC_VALID
	Endif
Else
	dRet := cTod( cDia+"/"+StrZero(nMes,2)+"/"+StrZero(nAno,4) )
Endif
If ExistBlock("PL260VLD")
   dRet := ExecBlock("PL260VLD",.F.,.F.,{lJuridico,dRet,dDataBase})
EndIf

Return(dRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260LIM ºAutor  ³Geraldo Felix Juniorº Data ³  03/25/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Regra de calculo para data de limite de permanencia de      º±±
±±º          ³usuarios demitidos ou aposentados...                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PLS260LIM()
LOCAL dDatIni 	:= M->BA3_DATBAS
LOCAL dDatDes 	:= M->BA3_DATDES
LOCAL nTempo	:= 0
LOCAL nLimite	:= GetNewPar("MV_PLIMATE",0)
LOCAL dLimite	:= cTod('')
LOCAL cTitular 	:= SuperGetMv("MV_PLCDTIT")
LOCAL aLog		:= {}
LOCAL cAno		:= Substr(dTos(M->BA3_DATDES),1,4)
LOCAL cMes		:= Substr(dTos(M->BA3_DATDES),5,2)
Local lShowMsg := !IsInCallStack("PLSSINCRO")

/*
§ 1o O período de manutenção da condição de beneficiario a que se refere o caput sera
de um terco do tempo de permanencia nos produtos de que tratam o inciso I e o § 1o do art. 1o, ou sucessores,
com um minimo assegurado de seis meses e um maximo de vinte e quatro meses.
*/
If M->BA3_DESLIG == '2'  // Usuarios demitidos...

	// Quando tiver parametrizado uma quantidade de dias em MV_PLIMATE
	If nLimite <> 0
		dLimite	:= (M->BA3_DATDES + nLimite)				// Monta data limite de utilizacao.
	Else

		nTempo 	:= (M->BA3_DATDES - M->BA3_DATBAS)		// Obtem a quantidade de dias que o usuario usou o plano na empresa.

		nLimite := NOROUND((nTempo / 3), 0)			// O usuario tem direito a 1 /3 deste periodo.

		If nLimite < 180								// O tempo minimo assegurado eh de 6 meses.
			nLimite := 180

		Elseif	nLimite > 720							// O tempo maximo assegurado eh de 24 meses.
			nLimite := 720

		Endif

		dLimite	:= (M->BA3_DATDES + nLimite)				// Monta data limite de utilizacao.
	Endif

/*
Aposentadoria:
Art. 31. Ao aposentado que contribuir para produtos de que tratam o inciso I e o § 1o do art. 1o desta Lei,
em decorrencia de vínculo empregaticio, pelo prazo minimo de dez anos, o assegurado o direito de manutencao
como beneficiario, nas mesmas condicoes de cobertura assistencial de que gozava quando da vigencia do contrato de trabalho,
desde que assuma o seu pagamento integral.

§ 1o Ao aposentado que contribuir para planos coletivos de assistencia à saúde por periodo inferior ao estabelecido
no caput o assegurado o direito de manutencao como beneficiário, no prazo de um ano para cada ano de contribuicao,
desde que assuma o pagamento integral do mesmo.
*/

Elseif M->BA3_DESLIG == '1'  // Usuarios aposentados...


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Pesquisa a primeira inclusao do usuario na empresa...               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BA1->( dbSetorder(01) )
	BA1->( MsSeek(xFilial("BA1")+BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC+cTitular) )	// Posiciona o titular

	aLog := PL169HIST(.T.)						// Pega hsitorico de transferencias

	If Len(aLog) == 0
		If lShowMsg
			MsgInfo(OemtoAnsi(STR0150)) //"Nao foi possivel calcular a data limite. Inconsistencia no historico do usuario!"
		EndIf
		Return(dLimite)
	Endif

	If ( nPos := Ascan( aLog, {|x| dTos(x[1]) = space(08)}) ) == 0 	// Pesquisa a primeira data de inclusao, na matriz!
		MsgInfo(OemtoAnsi(STR0151)) //"Nao foi possivel calcular a data limite. Nao encontrada a primeira inclusao do usuario titular!"
		Return(dLimite)
	Endif

	cMatric := StrTran(aLog[nPos, 2], '.','')	// Retira os pontos( . ) da string.
	cMatric := StrTran(cMatric		 , '-','')	// Depois retira os ifens( - ) da string.
	BA1->( dbSetorder(02) )
	BA1->( MsSeek(xFilial("BA1")+cMatric) )	// Re posiciona o titular, agora na primira inclusao do mesmo.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Calcula a sua idade em meses...                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	nIdadePla := PLSDIFANOS(PLSSTRANO(BA1->BA1_DATINC,.T.),PLSSTRMES(BA1->BA1_DATINC),cAno,cMes,"A")

	If nIdadePla >= 10   // Usuarios com mais de 10 anos de plano nao tem limites
		MsgInfo(OemtoAnsi(STR0152)) //"Este usuario tem 10 anos de plano ou mais, neste caso nao ha limite para sua permanencia."
		Return(dLimite)

	Elseif nIdadePla < 1 // O usuario tem direito a um ano a mais para cada ano de plano.
		MsgInfo(OemtoAnsi(STR0153)) //"O usuario esta se aposentando com menos de um ano de plano, isso nao da direito a continuar no mesmo."
		Return(M->BA3_DATDES)

	Else // Caso tenha mais de 1 ano e menos de 10.
		nLimite := noRound(nIdadePla, 0)			// 16 meses = 1,4 anos - Arredonda para 12 meses = 1 ano.

		dLimite := (M->BA3_DATDES-1)
		nAno := (Year(dLimite)+nLimite)
		nDia := Day(dLimite)
		nMes := Month(dLimite)

		If nMes = 2 .and. nDia > 28  // Despresa ano bisexto, sempre dia 28 para fevereiro.
			nDia := 28
		Endif

		dLimite := cTod(StrZero(nDia,2)+'/'+StrZero(nMes,2)+'/'+Alltrim(Str(nAno)))

	Endif

Endif

Return(dLimite)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PLSA260DIN  ³ Autor ³ Tulio Cesar         ³ Data ³ 13.04.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ BA1_DATINC - Gatilho da data de inclusao do usuario        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
 ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSA260DIN()
LOCAL lOK     := .T.
LOCAL dDataAna
LOCAL dDataCom
LOCAL nDiasDif
LOCAL nPos
LOCAL nPosTip := oBrwUsr:PLRETPOS("BA1_TIPUSU")
LOCAL nPosDat := oBrwUsr:PLRETPOS("BA1_DATADM")
LOCAL nPosDIN := oBrwUsr:PLRETPOS("BA1_DATINC")
LOCAL cCdTit  := AllTrim(GETMV("MV_PLCDTIT"))
LOCAL dDatADM
LOCAL dDatIncFun

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ O usuario deve informar o grau de parentesco e tipo de usuario...        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(M->BA1_TIPUSU)
   Help("",1,"PLS260DIN1")
   lOK := .F.
Endif

If Empty(M->BA1_GRAUPA)
   Help("",1,"PLS260DIN2")
   lOK := .F.
Endif

If M->BA1_DATINC < M->BA1_DATNAS
	Help("",1,"PLS260DIN7")
	lOk := .F.
Endif

nPos := Ascan(aCols,{|x| x[nPosTip] == cCdTit})
If lOk
	If nPos == 0
		If M->BA1_TIPUSU <> cCdTit
			Help("",1,"PLS260DIN5")
			Return(.F.)
		Endif
	Else
		If M->BA1_DATINC < aCols[nPos,nPosDin] .and. M->BA1_TIPUSU <> cCdTit
			Help("",1,"PLS260DIN8")
			Return(.F.)
		Endif
	Endif
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se existe uma vida bloqueada e retira os dias cumpridos para    ³
//³ gravar a data de carencia.												 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PLSDTCAR()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ A regra basica e que a data de carencia e a data de inclusao...          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Empty(M->BA1_DATCAR)
	M->BA1_DATCAR := M->BA1_DATINC
Endif

Return(lOK)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260Regras ºAutor  ³Microsiga           º Data ³  09/27/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Regras para novos dependentes...                              º±±
±±º          ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                           º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PL260Regras()
LOCAL nFor
LOCAL lOK     := .T.
LOCAL aRegras := {}
LOCAL dDataAna
LOCAL dDataCom
LOCAL nDiasDif
LOCAL nPos
LOCAL nPosTip := oBrwUsr:PLRETPOS("BA1_TIPUSU")
LOCAL nPosDat := oBrwUsr:PLRETPOS("BA1_DATADM")
LOCAL nPosDIN := oBrwUsr:PLRETPOS("BA1_DATINC")
LOCAL cCdTit  := AllTrim(GETMV("MV_PLCDTIT"))
LOCAL dDatADM
LOCAL dDatIncFun

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Novo dependente PF...  buscar regras no produto...                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BA3_TIPOUS == "1"
	BEK->(DbSetOrder(1))
	If BEK->(MsSeek(xFilial("BEK")+M->BA3_CODINT+M->BA3_CODPLA+M->BA3_VERSAO))
		While ! BEK->(Eof()) .And. BEK->(BEK_FILIAL+BEK_CODIGO+BEK_VERSAO) == xFilial("BEK")+M->BA3_CODINT+M->BA3_CODPLA+M->BA3_VERSAO
			aadd(aRegras,{BEK->BEK_TIPO,BEK->BEK_LIMITE})
			BEK->(DbSkip())
		Enddo
	Endif
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Novo dependente PJ...  buscar regras no subcontrato...                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	BEY->(DbSetOrder(1))
	If BEY->(MsSeek(xFilial("BEY")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+M->BA3_SUBCON+;
		M->BA3_VERSUB+M->BA3_CODPLA))
		While ! BEY->(Eof()) .And. BEY->(BEY_FILIAL+BEY_CODINT+BEY_CODIGO+BEY_NUMCON+BEY_VERCON+BEY_SUBCON+BEY_VERSUB+BEY_CODPRO) == ;
			xFilial("BEY")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+;
			M->BA3_SUBCON+M->BA3_VERSUB+M->BA3_CODPLA
			aadd(aRegras,{BEY->BEY_TIPO,BEY->BEY_LIMITE})
			BEY->(DbSkip())
		Enddo
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona no subcontrato se for PJ...                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BA3_TIPOUS == "2"
   BQC->(DbSetOrder(1))
   BQC->(MsSeek(xFilial("BQC")+M->BA3_CODINT+M->BA3_CODEMP+M->BA3_CONEMP+M->BA3_VERCON+M->BA3_SUBCON+M->BA3_VERSUB))
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso existam regras no aRegras analiso elas de acordo com a familia...   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aRegras) > 0
	For nFor := 1 To Len(aRegras)
		If aRegras[nFor,1] == "2" .And. M->BA1_RECNAS == "1"//Recem-nascido
			nPos := Ascan(aCols,{|x| x[nPosTip] == cCdTit})
			If nPos == 0
				Help("",1,"PLS260DIN5")
				Return(.F.)
			Endif

			dDatAdm  := aCols[nPos,nPosDat]
			If Empty(dDatAdm)
				dDatAdm := aCols[nPos,nPosDIN]
			Endif

			dDataAna := M->BA1_DATINC
			dDataCom := M->BA1_DATNAS
			nDiasDif := dDataAna - dDataCom

			If nDiasDif > aRegras[nFor,2]
				If Inclui
					M->BA1_DATCAR := M->BA1_DATINC
				Endif
			Else
				If Inclui
					M->BA1_DATCAR := dDatAdm
				Endif
			Endif
			Exit
		ElseIf aRegras[nFor,1] == "3" .And. ! Empty(M->BA1_DATCAS) //Casamento
			nPos := Ascan(aCols,{|x| x[nPosTip] == cCdTit})
			If nPos == 0
				Help("",1,"PLS260DIN6")
				Return(.F.)
			Endif

			dDatAdm  := aCols[nPos,nPosDat]
			If Empty(dDatAdm)
				dDatAdm := aCols[nPos,nPosDIN]
			Endif

			dDataAna := M->BA1_DATCAS
			dDataCom := M->BA1_DATINC
			nDiasDif := dDataAna - dDataCom

			If nDiasDif > aRegras[nFor,2]
				If Inclui
					M->BA1_DATCAR := M->BA1_DATINC
				Endif
			Else
				If Inclui
					M->BA1_DATCAR := dDatAdm
				Endif
			Endif
			Exit
		ElseIf 	aRegras[nFor,1] == "1" .And. M->BA3_TIPOUS == "2" .And.;
				Empty(M->BA1_DATCAS) .And. M->BA1_RECNAS <> "1" //Novo funcionario
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Tratamento para novo funcionario titular...                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If M->BA1_TIPUSU == cCdTit
				dDatAdm := M->BA1_DATADM
				If Empty(dDatAdm) .And. BQC->BQC_OBRDAD == "1"
					Help("",1,"PLS260DIN3")
					Return(.F.)
				Endif
				If Empty(dDatAdm)
					dDatAdm := M->BA1_DATINC
				Endif
			Else
				nPos := Ascan(aCols,{|x| x[nPosTip] == cCdTit})
				If nPos == 0
					Help("",1,"PLS260DIN4")
					Return(.F.)
				Endif

				dDatAdm := aCols[nPos,nPosDat]
				If Empty(dDatAdm)
					dDatAdm := aCols[nPos,nPosDIN]
				Endif
			Endif

			nDiasDif := M->BA1_DATINC - dDatAdm

			If nDiasDif > aRegras[nFor,2]
				If Inclui
					M->BA1_DATCAR := M->BA1_DATINC
				Endif
			Else
				If Inclui
					M->BA1_DATCAR := dDatAdm
				Endif
			Endif
			Exit
		Endif
	Next
Endif

Return(lOk)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260FORREFRºAutor  ³Geraldo Felix Juniorº Data ³  05/30/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Efetua o refresh nas GETDADOS relacionadas a forma de cobrancaº±±
±±º          ³                                                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                           º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260FORREFR(nFolder, nPos, aOpts)
LOCAL bForceRefresh
DEFAULT nPos 	:= 6
DEFAULT aOpts	:= {}

If Len(aOpts) <> 0
	aOpcoes := aClone(aOpts)
Endif
bForceRefresh := aOpcoes[nFolder][nPos]

If Valtype(&bForceRefresh) == 'B'
	Eval(&bForceRefresh)
Endif

Return(NIL)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260PUTVENºAutor  ³Geraldo Felix Jr.   º Data ³  09/01/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Validacao do campo BA3_CODVEN... Atualizara o campo         º±±
±±º          ³BA1_CODVEN na inclusao do primeiro usuario em PF.           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A260PUTVENC(nOpc)

Local cReadVarAnt := __ReadVar
Local nFocusAnt   := GetFocus()

// Somente na inclusao
If !inclui
	Return(.T.)
Endif

// Somente para pessoa fisica...
If lJuridico
	Return(.T.)
Endif

// Somente se o campo estiver em usu...
If oBrwUsr:FieldPos("BA1_CODVEN") == 0
	Return(.T.)
Endif

// Somente se a primeira linha do acols estiver em branco, ou seja, somente quando estiver incluindo o Titular...
If !Empty(oBrwUsr:FieldGet("BA1_MATVID",1)) .and. !Empty(oBrwUsr:FieldGet("BA1_NOMUSR",1))
	Return(.T.)
Endif

oBrwUsr:FieldPut("BA1_CODVEN",M->BA3_CODVEN,1)

If oBrwUsr:FieldPos("BA1_NOMVEN") <> 0
	oBrwUsr:FieldPut("BA1_NOMVEN",Posicione("SA3",1,xFilial("SA3")+M->BA3_CODVEN,"A3_NOME"),1)
Endif

// Somente se o campo estiver em uso...
If oBrwUsr:FieldPos("BA1_CODVE2") <> 0  .And. BA3->(FieldPos("BA3_CODVE2")) <> 0
	oBrwUsr:FieldPut("BA1_CODVE2",M->BA3_CODVE2,1)

	If oBrwUsr:FieldPos("BA1_NOMVE2") <> 0
		oBrwUsr:FieldPut("BA1_NOMVE2",Posicione("SA3",1,xFilial("SA3")+M->BA3_CODVE2,"A3_NOME"),1)
	Endif
EndIf

oBrwUsr:Atualiza()

__ReadVar := cReadVarAnt
SetFocus(nFocusAnt)

Return(.T.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260PUTVENºAutor  ³Geraldo Felix Jr.   º Data ³  09/01/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Validacao do campo BA3_CODVEN... Atualizara o campo         º±±
±±º          ³BA1_CODVEN na inclusao do primeiro usuario em PF.           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A260PUTEQU(nOpc)

Local cReadVarAnt := __ReadVar
Local nFocusAnt   := GetFocus()

// Somente na inclusao
If K_Incluir <> nOpc
	Return(.T.)
eNDIF

// Somente para pessoa fisica...
If lJuridico
	Return(.T.)
Endif

// Somente se o campo estiver em usu...
If oBrwUsr:FieldPos("BA1_EQUIPE") == 0
	Return(.T.)
Endif

// Somente se a primeira linha do acols estiver em branco, ou seja, somente quando estiver incluindo o Titular...
If !Empty(oBrwUsr:FieldGet("BA1_MATVID",1)) .and. !Empty(oBrwUsr:FieldGet("BA1_NOMUSR",1))
	Return(.T.)
Endif

oBrwUsr:FieldPut("BA1_EQUIPE",M->BA3_EQUIPE,1)

If oBrwUsr:FieldPos("BA1_NOMEQ") <> 0
	oBrwUsr:FieldPut("BA1_NOMEQ",Posicione("BXL",1,xFilial("BXL")+M->BA3_EQUIPE,"BXL_DESEQU"),1)
Endif

oBrwUsr:Atualiza()

__ReadVar := cReadVarAnt
SetFocus(nFocusAnt)

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³ PLSA260LEG ³ Autor ³Geraldo Felix Junior ³ Data ³ 04.10.03 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Exibe a legenda...                                         ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PLSA260Leg()

BrwLegenda(cCadastro,"Status" ,aCdCores)

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260   ºAutor  ³Microsiga           º Data ³  03/23/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSA260REM

BA3->(DbSetOrder(1))
BA3->(MsSeek(xFilial("BA3")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)))

ExecBlock("PLS260INC",.F.,.F.)

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  Pls260Blq  ºAutor  ³Thiago Machado      º Data ³  10/25/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna descricao do bloqueio de acordo com o nivel do mesmoº±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function Pls260Blq()

Local cDescri := ""

If ! Inclui
	If BA1->BA1_DATBLO <> ctod("")
		If BA1->BA1_CONSID == "U"
			cDescri := Posicione("BG3",1,xFilial("BG3")+BA1->BA1_MOTBLO,"BG3_DESBLO")
		Elseif BA1->BA1_CONSID == "F"
			cDescri := Posicione("BG1",1,xFilial("BG1")+BA1->BA1_MOTBLO,"BG1_DESBLO")
		Elseif BA1->BA1_CONSID == "S"
			cDescri := Posicione("BQU",1,xFilial("BQU")+BA1->BA1_MOTBLO,"BQU_DESBLO")
		Endif
	Endif
Endif

Return(cDescri)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260IPAD ºAutor  ³Geraldo felix juniorº Data ³  12/21/04   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Inidicializadores padroes para campos complexos, 		  º±±
±±º          ³ nao sendo possivel ficar no X3_RELACAO mpo                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260IPAD(cVar, cTipo)
Local cRet
Local cAliasPesq := "BG1"

If cTipo == 'N'
	cRet := 0
Elseif cTipo == 'C'
	cRet := ''
Elseif cTipo == 'D'
	cRet := cTod('')
Elseif cTipo == 'L'
	cRet := .T.
Elseif cTipo == 'M'
	cRet := ''
Endif

If !Inclui
	If cVar == "BF3_DESDOE"
		If Type('oBrwDoe') == 'U'
		   cRet := Posicione("BA9",1,xFilial("BA9")+BF3->BF3_CODDOE,"BA9_ABREVI")
		Else
			If !Empty(oBrwDoe:FieldGet("BF3_CODDOE",1))
				cRet := Posicione("BA9",1,xFilial("BA9")+oBrwDoe:FieldGet("BF3_CODDOE",1),"BA9_ABREVI")
			Else
				cRet := ''
			Endif
		Endif
	Elseif cVar == "BFD_DESCRI"
		If Type('oBrwProF') == 'U'
			cRet := Posicione("BR8",1,xFilial("BR8")+BFD->(BFD_CODPAD+BFD_CODPSA),"BR8_DESCRI")
		Else
			If !Empty(oBrwProF:FieldGet("BFD_CODPSA",1))
				cRet := Posicione("BR8",1,xFilial("BR8")+oBrwProF:FieldGet("BFD_CODPAD",1)+oBrwProF:FieldGet("BFD_CODPSA",1),"BR8_DESCRI")
			Else
				cRet := ''
			Endif
		Endif
	Elseif cVar == "BF4_DESPRO"
		If Type('oBrwOUsu') == 'U'
			cRet := Posicione("BI3",1,xFilial("BI3")+BF4->BF4_CODINT+BF4->BF4_CODPRO,"BI3_DESCRI")
		Else
			If !Empty(oBrwOUsu:FieldGet("BF4_CODPRO",1))
				cRet := Posicione("BI3",1,xFilial("BI3")+M->BA3_CODINT+oBrwOUsu:FieldGet("BF4_CODPRO",1)+oBrwOUsu:FieldGet("BF4_VERSAO",1),"BI3_DESCRI")
			Else
				cRet := ''
			Endif
		Endif
	Elseif cVar == "BF4_DESBLO"
		If Type('oBrwOUsu') == 'U'
			cRet := Posicione("BG3",1,xFilial("BG3")+BF4->BF4_MOTBLO,"BG3_DESBLO")
		Else
			If !Empty(oBrwOUsu:FieldGet("BF4_MOTBLO",1))
				cRet := Posicione("BG3",1,xFilial("BG3")+oBrwOUsu:FieldGet("BF4_MOTBLO",1),"BG3_DESBLO") 
			Else
				cRet := ''
			Endif
		Endif
	Elseif cVar == "BF4_TIPBLO"
		If Type('oBrwOUsu') == 'U'
			cRet := Posicione("BG3",1,xFilial("BG3")+BF4->BF4_MOTBLO,"BG3_TIPBLO")
		Else 
			If !Empty(oBrwOUsu:FieldGet("BF4_MOTBLO",1))
				cRet := Posicione("BG3",1,xFilial("BG3")+oBrwOUsu:FieldGet("BF4_MOTBLO",1),"BG3_TIPBLO") 
			Else
				cRet := ''
			Endif
		Endif
	Elseif cVar == "BGU_DESBLO"
		If Type('oBrwOUsu') == 'U'
			cRet := Posicione("BG3",1,xFilial("BG3")+BGU->BGU_MOTBLO,"BG3_DESBLO")
		Else
			If !Empty(oBrwOUsu:FieldGet("BGU_MOTBLO",1))
				cRet := Posicione("BG3",1,xFilial("BG3")+oBrwOUsu:FieldGet("BGU_MOTBLO",1),"BG3_DESBLO") 
			Else
				cRet := ''
			Endif
		Endif
	Elseif cVar == "BCA_DESBLO"
		If Type('oBrwBUsu') == 'U'
			If !Empty(M->BCA_MOTBLO)
				If     M->BCA_NIVBLQ == "S"	//Bloqueio por SubContrato
					cAliasPesq := "BQU"
				ElseIf M->BCA_NIVBLQ == "F"	//Bloqueio por Familia
					cAliasPesq := "BG1"
				ElseIf M->BCA_NIVBLQ == "U"	//Bloqueio por Usuario
					cAliasPesq := "BG3"
				EndIf
				cRet := Posicione(cAliasPesq,1,xFilial(cAliasPesq)+M->BCA_MOTBLO,cAliasPesq+"_DESBLO")
			ElseIf !Empty(BCA->BCA_MOTBLO)
				If BCA->BCA_NIVBLQ == "S"	//Bloqueio por SubContrato
					cAliasPesq := "BQU"
				ElseIf BCA->BCA_NIVBLQ == "F"	//Bloqueio por Familia
					cAliasPesq := "BG1"
				ElseIf BCA->BCA_NIVBLQ == "U"	//Bloqueio por Usuario
					cAliasPesq := "BG3"
				EndIf
				cRet := Posicione(cAliasPesq,1,xFilial(cAliasPesq)+BCA->BCA_MOTBLO,cAliasPesq+"_DESBLO")
		 	Else
				cRet := ''
            Endif
		Else
			If !Empty(oBrwBUsu:FieldGet("BCA_MOTBLO",1))
				If 	oBrwBUsu:FieldGet("BCA_NIVBLQ",1) == "S"		//Bloqueio por SubContrato
					cAliasPesq := "BQU"
				ElseIf oBrwBUsu:FieldGet("BCA_NIVBLQ",1) == "F"	//Bloqueio por Familia
					cAliasPesq := "BG1"
				ElseIf oBrwBUsu:FieldGet("BCA_NIVBLQ",1) == "U"	//Bloqueio por Usuario
					cAliasPesq := "BG3"
				EndIf
				cRet := Posicione(cAliasPesq,1,xFilial(cAliasPesq)+oBrwBUsu:FieldGet("BCA_MOTBLO",1),cAliasPesq+"_DESBLO")
			Else
				cRet := ''
			Endif
		Endif

	Elseif cVar == "BCA_USUOPE"
		If Type('oBrwBUsu') == 'U'
			cRet := cUserName
		Else//chamado pela tela do grupo familiar
			If !Empty(oBrwBUsu:FieldGet("BCA_USUOPE",1))
				cRet := oBrwBUsu:FieldGet("BCA_USUOPE",1)
			Else
				cRet := ''
			Endif
		Endif
	Endif
Else
	cRet:=""
Endif

Return(cRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260MREA ºAutor  ³Geraldo Felix Juniorº Data ³  01/03/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260MREA()

LOCAL lRet := .F.

If inclui
	lRet := StrZero(Month(M->BA3_DATCIV),2)
Else
	lRet := BA3->BA3_MESREA
Endif

return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLVerFSal ºAutor  ³Daher				 º Data ³  12/02/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica Confiabilidaade da Faixa Salarial      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Programa de Faixas Salarial (No Valid dos Campos)          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLVerFSal(cCampoI,cCampoF,nTipo,aHeader,aCols)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ tipo 1 - campo inicial                                                   |
//| tipo 2 - campo final 													 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL i      := 1
LOCAL nTmpF  := 0
LOCAL nTmpI  := 0
LOCAL nContF := 0
LOCAL nContI := 0
LOCAL lAcabou:= .F.

if nTipo == 1
	// nao verifico se eh maior ou menor
	// vou checar somente se o intervalo eh valido
	nContI := &(alltrim("M->"+cCampoI))
	while i < Len(aCols) .AND. !lAcabou
		nTmpI := aCols[i,GdFieldPos(cCampoI,aHeader)]
		nTmpF := aCols[i,GdFieldPos(cCampoF,aHeader)]
		if (nTmpI <= nContI .AND. nContI <= nTmpF)
			lAcabou := .T.
			Help(" ",1,"PLVFSAL")
		endif
		i++
	enddo
else
	// verifico se eh maior ou menor
	nContI := &(alltrim("M->"+cCampoI))
	nContF := &(alltrim("M->"+cCampoF))
	if nContF > 0 .and. nContI > nContF
		lAcabou := .T.
		Help(" ",1,"PLVFSAL")
	endif
	// vou checar se o intervalo eh valido
	while i < Len(aCols) .AND. !lAcabou
		nTmpI := aCols[i,GdFieldPos(cCampoI,aHeader)]
		nTmpF := aCols[i,GdFieldPos(cCampoF,aHeader)]
		if (nTmpI <= nContF .AND. nContF <= nTmpF)
			lAcabou := .T.
			Help(" ",1,"PLVFSAL")
		endif
		i++
	enddo
endif

Return(!lAcabou)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260FSal ºAutor  ³Daher				 º Data ³  16/02/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica carrega as faixas salarias p familia   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Programa de Faixas Salarial (No Valid dos Campos)          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260FSal()
Local aArea     := GetArea()
LOCAL aCabAux 	:= {}
LOCAL aDados   	:= {}
LOCAL aCabec   	:= {}
LOCAL nCols    	:= 1
LOCAL nLido    	:= 0
LOCAL nPos		:= 0
Local nHeader
LOCAL nBJK_CODFOR := oBrwFor:FieldPos("BJK_CODFOR")
LOCAL nBJK_DESFOR := oBrwFor:FieldPos("BJK_DESFOR")
LOCAL nBJK_AUTOMA := oBrwFor:FieldPos("BJK_AUTOMA")

BJ1->(MsSeek(xFilial("BJ1") + cCodFor))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Reinicia o acols do browse de formas de cobranca...                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
STORE HEADER "BJK" TO aCabec For .T.
Store COLS Blank "BJK" TO aDados FROM aCabec
oBrwFor:aCols := aClone(aDados)

oBrwFor:aCols[1][nBJK_CODFOR] := cCodFor
oBrwFor:aCols[1][nBJK_DESFOR] := BJ1->BJ1_DESCRI
oBrwFor:aCols[1][nBJK_AUTOMA] := "1"
nCodFor := 1

oBrwFor:ForceRefresh(oBrwFor)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine a matriz de lay-out da forma de cobranca...                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aVetsFor := PL260CRCOB(nOpcx, cAliax)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine as variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aDados   := {}
aCabec   := {}
nCols    := 1
nLido    := 0

STORE HEADER "B1C" TO aCabec For .T.
Store COLS Blank "B1C" TO aDados FROM aCabec

If M->BA3_TIPOUS = "1"	// Pessoa Fisica - Valores da Mensalidade
	// pego as faixas do produto
	cSQL := "SELECT * FROM " + RetSQLName("B1A")+" WHERE B1A_FILIAL = '"+xFilial("B1A")+"' AND "
	cSQL += "B1A_CODIGO = '"+M->BA3_CODINT + M->BA3_CODPLA+"' AND "
	cSQL += "B1A_VERSAO = '"+M->BA3_VERSAO+"' AND "
	cSQL += "B1A_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' AND "
	cSQL += "B1A_CODFOR = '" + cCodFor + "' AND "
	cSQL += "D_E_L_E_T_= '' "
	cSQL += "ORDER BY B1A_VLSLIN, B1A_VLSLFN"

	PLSQuery(cSQL,"TrbB1A")

	// Atualiza array auxiliar.
	While ! TrbB1A->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If  (nPos := TrbB1A->(FieldPos(strtran(aCabec[nHeader][2],"B1C","B1A")))) > 0
				aDados[nCols][nHeader] := TrbB1A->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "B1C_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next
		Pl260AtuVar(aCabec, aDados, nCols)
		TrbB1A->(DbSkip())
	EndDo

	// Adiciona os dados na matriz dinamica de formas de cobranca.
	If nLido > 0
		aadd(aVetsFor,{cCodFor,"B1C","1",AClone(aDados),{}})
	Endif

	// Fecha a area de trabalho.
	TrbB1A->(DbCloseArea())

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Realiza a carga das quantidades...                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If PLSALIASEXI("B1H") .AND. PLSALIASEXI("B1F")
		aDados   := {}
		aCabec   := {}
		nCols    := 1
		nLido    := 0

		STORE HEADER "B1H" TO aCabec For .T.
		Store COLS Blank "B1H" TO aDados FROM aCabec

	 	// pego as faixas do produto
		cSQL := "SELECT * FROM " + RetSQLName("B1F")+" WHERE B1F_FILIAL = '"+xFilial("B1F")+"' AND "
		cSQL += "B1F_CODIGO = '"+M->BA3_CODINT + M->BA3_CODPLA+"' AND "
		cSQL += "B1F_VERSAO = '"+M->BA3_VERSAO+"' AND "
		cSQL += "B1F_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' AND "
		cSQL += "B1F_CODFOR = '" + cCodFor + "' AND "
		cSQL += "D_E_L_E_T_= '' "

		If B1F->(FieldPos("B1F_VLSLIN")) > 0 .AND. B1F->(FieldPos("B1F_VLSLFN")) > 0 //Campos nao existem no AtuSx (visto em 31/10/12)
			cSQL += "ORDER BY B1F_VLSLIN, B1F_VLSLFN"
	    EndIf

		PLSQuery(cSQL,"TrbB1F")

		// Atualiza array auxiliar.
		While ! TrbB1F->(Eof())
			nLido ++
			If nLido > nCols
				Aadd(aDados, AClone(aDados[1]))
				nCols ++
			Endif
			For nHeader := 1 To Len(aCabec)
				If  (nPos := TrbB1F->(FieldPos(strtran(aCabec[nHeader][2],"B1H","B1F")))) > 0
					aDados[nCols][nHeader] := TrbB1F->(FieldGet(nPos))
				ElseIf aCabec[nHeader][2] = "B1H_AUTOMA"
					aDados[nCols][nHeader] := "1"
				Endif
			Next
			Pl260AtuVar(aCabec, aDados, nCols)
			TrbB1F->(DbSkip())
		EndDo

		// Adiciona os dados na matriz dinamica de formas de cobranca.
		If nLido > 0
			aadd(aVetsFor,{cCodFor,"B1H","1",AClone(aDados),{}})
		Endif

		// Fecha area de trabalho.
		TrbB1F->( dbCloseArea() )
    Endif

    RestArea(aArea)

elseif M->BA3_TIPOUS = "2"	// Pessoa Juridica - Valores da Mensalidade
	// pego as faixas do subcontrato
	cSQL := "SELECT * FROM " + RetSQLName("B1B")+" WHERE B1B_FILIAL = '"+xFilial("B1B")+"' AND "
	cSQL += "B1B_CODIGO = '"+M->BA3_CODINT + M->BA3_CODEMP+"' AND "
	cSQL += "B1B_NUMCON = '"+M->BA3_CONEMP+"' AND "
	cSQL += "B1B_VERCON = '"+M->BA3_VERCON+"' AND "
	cSQL += "B1B_SUBCON = '"+M->BA3_SUBCON+"' AND "
	cSQL += "B1B_VERSUB = '"+M->BA3_VERSUB+"' AND "
	cSQL += "B1B_CODPRO = '"+M->BA3_CODPLA+"' AND "
	cSQL += "B1B_VERPRO = '"+M->BA3_VERSAO+"' AND "
	cSQL += "B1B_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' AND B1B_CODFOR = '" + cCodFor + "' AND "
	cSQL += "D_E_L_E_T_= '' "

	PLSQuery(cSQL,"TrbB1B")

	While ! TrbB1B->(Eof())
		If TrbB1B->B1B_VLSLIN == 0 .AND. TrbB1B->B1B_VLSLFN == 0
			TrbB1B->( dbSkip() )
			Loop
		Endif

		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If  (nPos := TrbB1B->(FieldPos(strtran(aCabec[nHeader][2],"B1C","B1B")))) > 0
				aDados[nCols][nHeader] := TrbB1B->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "B1C_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next
		Pl260AtuVar(aCabec, aDados, nCols)
		TrbB1B->(DbSkip())
	EndDo

	// Adiciona os dados na matriz dinamica de formas de cobranca.
	If nLido > 0
		aadd(aVetsFor,{cCodFor,"B1C","1",AClone(aDados),{}})
	Endif

	// Fecha area de trabalho.
	TrbB1B->(DbCloseArea())

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Realiza a carga das quantidades...                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If PLSALIASEXI("B1H") .AND. PLSALIASEXI("B1G")
		aDados   := {}
		aCabec   := {}
		nCols    := 1
		nLido    := 0

		STORE HEADER "B1H" TO aCabec For .T.
		Store COLS Blank "B1H" TO aDados FROM aCabec

		cSQL := "SELECT * FROM " + RetSQLName("B1G")+" WHERE B1G_FILIAL = '"+xFilial("B1G")+"' AND "
		cSQL += "B1G_CODIGO = '"+M->BA3_CODINT + M->BA3_CODEMP+"' AND "
		cSQL += "B1G_NUMCON = '"+M->BA3_CONEMP+"' AND "
		cSQL += "B1G_VERCON = '"+M->BA3_VERCON+"' AND "
		cSQL += "B1G_SUBCON = '"+M->BA3_SUBCON+"' AND "
		cSQL += "B1G_VERSUB = '"+M->BA3_VERSUB+"' AND "
		cSQL += "B1G_CODPRO = '"+M->BA3_CODPLA+"' AND "
		cSQL += "B1G_VERPRO = '"+M->BA3_VERSAO+"' AND "
		cSQL += "B1G_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' AND B1G_CODFOR = '" + cCodFor + "' AND "
		cSQL += "D_E_L_E_T_= '' "

		PLSQuery(cSQL,"TrbB1G")

		While ! TrbB1G->(Eof())
			If TrbB1G->B1G_QTDINI == 0 .and. TrbB1G->B1G_QTDFIN == 0
				TrbB1G->( dbSkip() )
				Loop
			Endif

			nLido ++
			If nLido > nCols
				Aadd(aDados, AClone(aDados[1]))
				nCols ++
			Endif
			For nHeader := 1 To Len(aCabec)
				If  (nPos := TrbB1G->(FieldPos(strtran(aCabec[nHeader][2],"B1H","B1G")))) > 0
					aDados[nCols][nHeader] := TrbB1G->(FieldGet(nPos))
				ElseIf aCabec[nHeader][2] = "B1H_AUTOMA"
					aDados[nCols][nHeader] := "1"
				Endif
			Next
			Pl260AtuVar(aCabec, aDados, nCols)
			TrbB1G->(DbSkip())
		EndDo

		// Adiciona os dados na matriz dinamica de formas de cobranca.
		If nLido > 0
			aadd(aVetsFor,{cCodFor,"B1H","1",AClone(aDados),{}})
		Endif

		// Fecha area de trabalho.
		TrbB1G->( dbCloseArea() )
    Endif

    RestArea(aArea)

endif

If M->BA3_TIPOUS = "1"
	BI3->(MsSeek(xFilial("BI3") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO))
Endif


return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260FEta ºAutor  ³Wagner Mobile  	 º Data ³  10.09.03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica carrega as faixas etarias p familia    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Programa de Faixas Etaria (No Valid dos Campos)            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260FEta(cAno, cMes)
Local aArea     := GetArea()
LOCAL aCabAux 	:= {}
LOCAL aDados   	:= {}
LOCAL aCabec   	:= {}
LOCAL nCols    	:= 1
LOCAL nLido    	:= 0
LOCAL nPos		:= 0
Local nHeader
LOCAL nBJK_CODFOR := oBrwFor:FieldPos("BJK_CODFOR")
LOCAL nBJK_DESFOR := oBrwFor:FieldPos("BJK_DESFOR")
LOCAL nBJK_AUTOMA := oBrwFor:FieldPos("BJK_AUTOMA")
LOCAL nI := 0
LOCAL nInd := 0
LOCAL nCnt := 0
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona cadastro de formas de cobranca...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BJ1->(MsSeek(xFilial("BJ1") + cCodFor))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Reinicia o acols do browse de formas de cobranca...                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
STORE HEADER "BJK" TO aCabec For .T.
Store COLS Blank "BJK" TO aDados FROM aCabec
oBrwFor:aCols := aClone(aDados)

oBrwFor:aCols[1][nBJK_CODFOR] := cCodFor
oBrwFor:aCols[1][nBJK_DESFOR] := BJ1->BJ1_DESCRI
oBrwFor:aCols[1][nBJK_AUTOMA] := "1"
nCodFor := 1

oBrwFor:ForceRefresh(oBrwFor)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Controle de alteracao da forma de cobranca da familia...                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If  nOpcx == K_Alterar
	If  ( M->BA3_CODPLA <> __cCodPla_ .or.;
			 M->BA3_VERSAO <> __cVersao_ .or.;
			 M->BA3_FORPAG <> __cForCob_ .or.;
			 M->BA3_FORCTX <> __cForTax_ .or.;
			 M->BA3_FORCOP <> __cForOpc_)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Redefine a matriz caso tenha trocado de plano ou forma de cobranca...    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aVetsFor := PL260CRCOB(nOpcx, cAliax)

		For nInd := 1 To Len(aVetsFor)
			cAlias := aVetsFor[nInd][02]
			If ValType(aVetsFor[nInd][5]) == "A"
				For nI := 1 To Len(aVetsFor[nInd][5])
					(cAlias)->( dbGoto(aVetsFor[nInd][5][nI]) )
					(cAlias)->( RecLock(cAlias, .F.) )
					(cAlias)->( dbDelete() )
					(cAlias)->( MsUnlock() )
				Next
			Else
				(cAlias)->( dbGoto(aVetsFor[nInd][5]) )
				(cAlias)->( RecLock(cAlias, .F.) )
				(cAlias)->( dbDelete() )
				(cAlias)->( MsUnlock() )
			Endif
		Next

		aVetsFor := {}

		__cCodPla_ := ''
		__cVersao_ := ''
		__cForCob_ := ''
		__cForTax_ := ''
		__cForOpc_ := ''

	Else
		If !MsgYesNo(STR0186)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ O usuario trocou o produto original e depois voltou atraz, preferindo    |
			//³ manter os valores originais...                                           |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aVetsFor := PL260CRCOB(nOpcx, cAliax)

			Return()
		Else
		    aVetsFor := PL260CRCOB(nOpcx, cAliax)

			For nInd := 1 To Len(aVetsFor)
				cAlias := aVetsFor[nInd][02]
				If ValType(aVetsFor[nInd][5]) == "A"
					For nI := 1 To Len(aVetsFor[nInd][5])
						(cAlias)->( dbGoto(aVetsFor[nInd][5][nI]) )
						(cAlias)->( RecLock(cAlias, .F.) )
							(cAlias)->( dbDelete() )
						(cAlias)->( MsUnlock() )
					Next
				Else
					(cAlias)->( dbGoto(aVetsFor[nInd][5]) )
					(cAlias)->( RecLock(cAlias, .F.) )
						(cAlias)->( dbDelete() )
					(cAlias)->( MsUnlock() )
				Endif
			Next

		    aVetsFor := {}

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Usuario preferiu reimportar precos, entao zero as varivais de valores    ³
			//| Originais para que a rotiva delete os valores existentes na base de dados|
			//| e gere a nova tabela... Se chegou a esse ponto, pode ser que o usuario   |
			//| ja experimentou varias combinacoes de tabela de precos e eh inviavel     |
			//| manter o controle, o melhor a fazer eh excluir a tabela existente e criar|
			//| uma nova a partir do conteudo do acols.
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			__cCodPla_ := ''
			__cVersao_ := ''
			__cForCob_ := ''
			__cForTax_ := ''
			__cForOpc_ := ''

		Endif
	Endif
Endif


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine a matriz de lay-out da forma de cobranca...                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aVetsFor := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Redefine as variaveis...                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aDados   := {}
aCabec   := {}
nCols    := 1
nLido    := 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Reinicia a matriz de valores da forma de cobranca...                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
STORE HEADER "BBU" TO aCabec For .T.
Store COLS Blank "BBU" TO aDados FROM aCabec

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busca valores do subcontrato... Pessoa Juridica...                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BA3_TIPOUS = "2"	// Pessoa Juridica - Valores da Mensalidade

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Seleciona as faixas etarias...                                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cCodQtd:= '001'
	cSQL := "SELECT * FROM " + RetSQLName("BTN")+" WHERE "
	cSQL += "BTN_FILIAL = '"+xFilial("BTN")+"' AND "
	cSQL += "BTN_CODIGO = '"+M->BA3_CODINT + M->BA3_CODEMP+"' AND "
	cSQL += "BTN_NUMCON = '"+M->BA3_CONEMP+"' AND "
	cSQL += "BTN_VERCON = '"+M->BA3_VERCON+"' AND "
	cSQL += "BTN_SUBCON = '"+M->BA3_SUBCON+"' AND "
	cSQL += "BTN_VERSUB = '"+M->BA3_VERSUB+"' AND "
	cSQL += "BTN_CODPRO = '"+M->BA3_CODPLA+"' AND "
	cSQL += "BTN_VERPRO = '"+M->BA3_VERSAO+"' AND "
	cSQL += "BTN_CODQTD = '"+cCodQtd+"' AND " // Nao sera tratado pela rotina na versao 811
	cSQL += "BTN_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' AND BTN_CODFOR = '"+cCodFor + "' AND "
	cSQL += "(BTN_TABVLD >= '"+Dtos(dDatabase)+"' OR "
	cSQL += "BTN_TABVLD ='"+Space(TamSX3("BTN_TABVLD")[1])+ "')  AND "
	cSQL += "D_E_L_E_T_ = '' "
	cSQL += "ORDER BY BTN_CODFOR, BTN_TIPUSR DESC,BTN_GRAUPA DESC ,BTN_SEXO DESC"
	//PLSQuery(cSQL,"TrbBTN")
	dbUseArea(.t.,"TOPCONN",tcGenQry(,,changeQuery(cSQL)),"TrbBTN",.f.,.t.)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Alimenta matriz de valores de mensalidade da familia...                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	While ! TrbBTN->(Eof())
		nCnt ++
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If Alltrim(aCabec[nHeader][2]) == "BBU_VALFAI"
				aDados[nCols][nHeader] := TRBBTN->BTN_VALFAI
			Elseif (nPos := TRBBTN->(FieldPos(StrTran(aCabec[nHeader][2], "BBU", "BTN")))) > 0
				If aCabec[nHeader][8] == "D"
					aDados[nCols][nHeader] := STOD(TRBBTN->(FieldGet(nPos)))
				Else
					aDados[nCols][nHeader] := TRBBTN->(FieldGet(nPos))
				EndIf
			ElseIf aCabec[nHeader][2] = "BBU_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa as variaveis da matriz de valores... executa gatilhos e I.P.  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Pl260AtuVar(aCabec, aDados, nCols)

		TrbBTN->(DbSkip())
	EndDo
	TrbBTN->(DbCloseArea())
	RestArea(aArea)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busca valores no produto... Pessoa fisica ou se nao encontrar no subcontrato...  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BA3_TIPOUS = "1" //.Or. nLido = 0	// Pessoa Fisica - Valores da Mensalidade
	cSQL := "SELECT * FROM " + RetSQLName("BB3")+" WHERE BB3_FILIAL = '"+xFilial("BB3")+"' AND "
	cSQL += "BB3_CODIGO = '"+M->BA3_CODINT + M->BA3_CODPLA+"' AND "
	cSQL += "BB3_VERSAO = '"+M->BA3_VERSAO+"' AND "
	cSQL += "BB3_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' AND BB3_CODFOR = '" + cCodFor + "' AND "
	cSQL += "(BB3_TABVLD  >= '"+Dtos(dDatabase)+"' OR "
	cSQL += "BB3_TABVLD  >= '"+Space(TamSX3("BB3_TABVLD")[1])+ "')  AND "
	cSQL += "D_E_L_E_T_= ''"
	cSQL += "ORDER BY BB3_TIPUSR DESC ,BB3_GRAUPA DESC ,BB3_SEXO DESC "
	PLSQuery(cSQL,"TrbBB3")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Alimenta matriz de valores de mensalidade da familia...                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	While ! TrbBB3->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If Alltrim(aCabec[nHeader][2]) == "BBU_VALFAI"
				aDados[nCols][nHeader] := TRBBB3->BB3_VALFAI
			Elseif (nPos := TrbBB3->(FieldPos(StrTran(aCabec[nHeader][2], "BBU", "BB3")))) > 0
				aDados[nCols][nHeader] := TrbBB3->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BBU_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa as variaveis da matriz de valores... executa gatilhos e I.P.  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Pl260AtuVar(aCabec, aDados, nCols)
		TrbBB3->(DbSkip())
	EndDo
	TrbBB3->(DbCloseArea())
	RestArea(aArea)
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Alimenta a coluna de valores dentro da matriz de lay out da forma de cob..³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nLido > 0
	aadd(aVetsFor,{cCodFor,"BBU","1",AClone(aDados),{}})
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Agora processa a carga dos descontos...                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nPosVet := Ascan(aVetsFor, {|x| x[1] = cCodFor .And. x[2] = "BFY" })
aDados   := {}
aCabec   := {}
nCols    := 1
nLido    := 0

STORE HEADER "BFY" TO aCabec For .T.
Store COLS Blank "BFY" TO aDados FROM aCabec

If M->BA3_TIPOUS = "2"	// Pessoa Juridica - Valores da Mensalidade
	dbSelectArea("BFY")
	BFT->(DbSetOrder(1))
	BFT->(MsSeek(	xFilial("BFT") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_CONEMP +;
					M->BA3_VERCON + M->BA3_SUBCON + M->BA3_VERSUB + M->BA3_CODPLA +;
					M->BA3_VERSAO + cCodFor + cCodQtd))
	While 	BFT->BFT_FILIAL = xFilial("BFT") .And.;
			BFT->BFT_CODIGO = M->BA3_CODINT + M->BA3_CODEMP .And.;
			BFT->BFT_NUMCON = M->BA3_CONEMP .And. BFT->BFT_VERCON = M->BA3_VERCON .And.;
			BFT->BFT_SUBCON = M->BA3_SUBCON .And. BFT->BFT_VERSUB = M->BA3_VERSUB .And.;
			BFT->BFT_CODPRO = M->BA3_CODPLA .And. BFT->BFT_VERPRO = M->BA3_VERSAO .And.;
			BFT->BFT_CODFOR = cCodFor .And. BFT->BFT_CODQTD = cCodQtd  .And. ! BFT->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If (nPos := BFT->(FieldPos(StrTran(aCabec[nHeader][2], "BFY", "BFT")))) > 0
				aDados[nCols][nHeader] := BFT->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BFY_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BFT->(DbSkip())
	EndDo
Endif

If M->BA3_TIPOUS = "1" .Or. nLido = 0	// Pessoa Fisica - Descontos da Mensalidade
	dbSelectArea("BFS")
	BFS->(DbSetOrder(1))
	BFS->(MsSeek(	xFilial("BFS") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO +;
					cCodFor))
	While 	BFS->BFS_FILIAL = xFilial("BFS") .And.;
			BFS->BFS_CODIGO = M->BA3_CODINT + M->BA3_CODPLA .And.;
			BFS->BFS_VERSAO = M->BA3_VERSAO .And. BFS->BFS_CODFOR = cCodFor .And.;
			! BFS->(Eof())
		nLido ++
		If nLido > nCols
			Aadd(aDados, AClone(aDados[1]))
			nCols ++
		Endif
		For nHeader := 1 To Len(aCabec)
			If (nPos := BFS->(FieldPos(StrTran(aCabec[nHeader][2], "BFY", "BFS")))) > 0
				aDados[nCols][nHeader] := BFS->(FieldGet(nPos))
			ElseIf aCabec[nHeader][2] = "BFY_AUTOMA"
				aDados[nCols][nHeader] := "1"
			Endif
		Next

		Pl260AtuVar(aCabec, aDados, nCols)

		BFS->(DbSkip())
	EndDo
Endif

If nLido > 0
	If nPosVet = 0
		aadd(aVetsFor,{cCodFor,"BFY","1",AClone(aDados),{}})
	Else
		aVetsFor[nPosVet][4] := AClone(aDados)
	Endif
Endif

If M->BA3_TIPOUS = "1"
	BI3->(MsSeek(xFilial("BI3") + M->BA3_CODINT + M->BA3_CODPLA + M->BA3_VERSAO))
Endif

return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260VLD3ºAutor  ³Geraldo Felix Jr.	 º Data ³  03/22/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Validacao do campo BA3_DATDES.                             º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260VLD3()
MsgInfo(OemtoAnsi(STR0154)) //"Lembre-se de alterar o nivel de cobranca, o cliente e o dia de vencimento desta familia."
Return(.T.)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260HIST  ºAutor  ³Alexander Santos    º Data ³  22.03.05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que posiciona o registro no BA1 e faz a chamada paraº±±
±±º          ³ a funcao PL169HIST() 									  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MOSTRAR O HISTORICO DE TRANSFERENCIA                       º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

STATIC Function A260HIST(cTipoHis)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Define variaveis para composicao da Matricula    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cCODINT 		:= M->BA3_CODINT
Local cCODEMP		:= M->BA3_CODEMP
Local cMATRIC       := M->BA3_MATRIC
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Foi usado o FieldGet pq os outros campos da chave nao se encontram na MATRIZ aHeader               |
//³Pega o conteudo do campo informado na linha corrente 											  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cTIPREG       := oBrwUsr:FieldGet('BA1_TIPREG',oBrwUsr:Linha())
Local cDIGITO       := oBrwUsr:FieldGet('BA1_DIGITO',oBrwUsr:Linha())
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Esta variavel e para verificar qual tipo de historico³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DEFAULT cTipoHis := 1

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Seta a ordem de procura	                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BA1->(DbSetOrder(2)) // BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO
if BA1->(DbSeek(xFilial('BA1')+cCODINT+cCODEMP+cMATRIC+cTIPREG+cDIGITO))
	
	//-------------------------------------------------------------------
	//  LGPD
	//-------------------------------------------------------------------
	objCENFUNLGP:useLogUser()

   If cTipoHis == 1
	  //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	  //³Chama o Historico de Transferencia										   ³
	  //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
      PL169HIST()
   Else
	  //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	  //³Chama o Historico de Desbloqueio											  ³
	  //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
      PL310HDE(xFilial('BA1')+cCODINT+cCODEMP+cMATRIC+cTIPREG)
   EndIf

Else
   MsgInfo(OemtoAnsi(STR0155)) //'Usuário não ENCONTRADO')
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da funcao                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Pl260Clas ºAutor  ³Geraldo Felix Juniorº Data ³  25/04/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Analiza a regra de carencia para novos dependentes e leva  º±±
±±º          ³ as classes de carencia do subcontrato/produto para o usuario±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Pl260Clas(lTipo)
LOCAL dDatAux := 	cTod('')
LOCAL cChave  :=	BQC->BQC_CODIGO+BQC->BQC_NUMCON+;
				 	BQC->BQC_VERCON+BQC->BQC_SUBCON+;
					BQC->BQC_VERCON+M->BA3_CODPLA
Local i
Local nCnt
LOCAL cCodCla := 	''
LOCAL lLimite := .F.
LOCAL lExist  := .F.
LOCAL lRecnas := .F.
Local nPos := 0
LOCAL nPosMae := 0
LOCAL cMatric := ''
LOCAL nClaCar := GdFieldPos("BFO_CLACAR",aCabBFO)
LOCAL nDesCla := GdFieldPos("BFO_DESCLA",aCabBFO)
LOCAL nCarenc := GdFieldPos("BFO_CARENC",aCabBFO)
LOCAL nUnicar := GdFieldPos("BFO_UNICAR",aCabBFO)
LOCAL nDatCar := GdFieldPos("BFO_DATCAR",aCabBFO)
LOCAL nTipReg := GdFieldPos("BFO_TIPREG",aCabBFO)
LOCAL nCodInt := GdFieldPos("BFO_CODINT",aCabBFO)
LOCAL nDelete := ( Len(aCabBFO)+1 )
LOCAL aRet	  := {}
LOCAL aProcs  := {}
LOCAL cProObst:= GetNewPar("MV_PLSOBST","0145080100,0145080186,0145080003,0145080194,0145080038")
LOCAL cCodPad := ''
LOCAL cCodPro := ''
LOCAL cClaCar := ''
LOCAL cDesCla := ''
LOCAL nQtdCar := 0
LOCAL cUniCar := ''
Local cCodInt := ""
LOCAL dDatCar := cTod('')
LOCAL nTprPro := GdFieldPos("BFG_TIPREG",aCabBFG)
LOCAL nTprCO1 := GdFieldPos("BVM_TIPREG",aCabBVM)
LOCAL nTprGRU := GdFieldPos("BFE_TIPREG",aCabBFE)
LOCAL nTprCGR := GdFieldPos("BVI_TIPREG",aCabBVI)
LOCAL nTprCO2 := GdFieldPos("BVJ_TIPREG",aCabBVJ)
LOCAL lP260CADM := ExistBlock("P260CADM")
Local aDadUsrMae := {}
Local aNivCarencia := {} 
Local lRet := .F.

If lTipo
	BEY->( dbSetorder(01) )
	If BEY->( msSeek(xFilial("BEY")+cChave) )
		While !BEY->( Eof() ) .and. cChave ==	BQC->BQC_CODIGO+BQC->BQC_NUMCON+;
			BQC->BQC_VERCON+BQC->BQC_SUBCON+;
			BQC->BQC_VERCON+M->BA3_CODPLA

			If !Empty(M->BA1_DATADM) .and. BEY->BEY_TIPO == '1' // Recem admitido.
				dDatAux := M->BA1_DATADM
				cCodCla := BEY->BEY_SEQUEN

				lLimite := ((M->BA1_DATINC - M->BA1_DATADM) <= BEY->BEY_LIMITE)
				If lP260CADM
					 aLimite := Execblock("P260CADM",.F.,.F.,{lTipo})
					 If Len(aLimite) > 0
					 	lLimite := aLimite[1]
					 Endif
				Endif
				lExist  := .T.

			Elseif M->BA1_RECNAS == '1' .and. BEY->BEY_TIPO == '2' // Recem Nascido.
				dDatAux := M->BA1_DATNAS
				cCodCla := BEY->BEY_SEQUEN

				lLimite := ((M->BA1_DATINC - M->BA1_DATNAS) <= BEY->BEY_LIMITE)
				lExist  := .T.
				lRecNas := .T.

			Elseif !Empty(M->BA1_DATCAS) .and. BEY->BEY_TIPO == '3' // Recem Casado.
				dDatAux := M->BA1_DATCAS
				cCodCla := BEY->BEY_SEQUEN

				lLimite := ((M->BA1_DATINC - M->BA1_DATCAS) <= BEY->BEY_LIMITE)
				lExist  := .T.

			Elseif BEY->( FieldPos("BEY_TIPUSU") ) > 0 .and. M->BA1_TIPUSU == BEY->BEY_TIPUSU
				cCodCla := BEY->BEY_SEQUEN
				lExist  := .T.
				lLimite := .T.

			Elseif BEY->( FieldPos("BEY_GRAUPA") ) > 0 .and. M->BA1_GRAUPA == BEY->BEY_GRAUPA
				cCodCla := BEY->BEY_SEQUEN
				lExist  := .T.
				lLimite := .T.

			Endif
			If lExist
				Exit
			Endif

			BEY->( dbSKip() )
		Enddo

		If lExist .and. lLimite

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se for recem nascido, verifica se ele nasceu pelo plano. |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lRecNas
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Retorna caso nao seja apontada a mae.                    |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nPosMae := Pl260RtMae()
				If nPosMae == 0
					Return(0)
				Endif
				cMatric := M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+;
							oBrwUsr:FieldGet("BA1_TIPREG",nPosMae)+;
							oBrwUsr:FieldGet("BA1_DIGITO",nPosMae)

				aDadUsrMae := PLSA090USR(cMatric,M->BA1_DATNAS,Time(),,.F.,.T.,.F.)
				aDadUsrMae := PLSGETUsr()

				aProcs := StrToKarr(cProObst, ",")

				For nCnt := 1 To Len(aProcs)
					cCodPad := Substr(aProcs[nCnt],1,2)
					cCodPro := Substr(aProcs[nCnt],3,8)

					aRet := PLSAUTP(M->BA1_DATNAS,Time(),cCodPad,cCodPro,1,aDadUsrMae,0,{},"1",.F.,'',,NIL)
					lRet := aRet[1]

					If lRet
						Exit
					Endif
				Next
			Else
				lRet := .T.
			Endif

			If lRet
				BWV->( dbSetorder(01) )
				If BWV->( msSeek(xFilial("BWV")+cChave+cCodCla) )
					While !BWV->( Eof() ) .and. 	BWV->BWV_CODINT+BWV->BWV_CODIGO+BWV->BWV_NUMCON+;
													BWV->BWV_VERCON+BWV->BWV_SUBCON+BWV->BWV_VERSUB+;
													BWV->BWV_CODPRO+BWV->BWV_CODGRU == cChave+cCodCla

						// Adiciona uma linha em branco no final da matriz.
						Aadd(aDadBFO, Array(Len(aCabBFO)+1))

						// Obtem o numero da linha adicionada.
						nPos := Len(aDadBFO)

						cCodInt := BWV->BWV_CODINT
						cClaCar := BWV->BWV_CLACAR
						cDesCla := Posicione("BDL",1,xFilial("BDL")+BWV->(BWV_CODINT+BWV_CLACAR), "BDL_DESCRI")
						nQtdCar := BWV->BWV_QTDCAR
						cUniCar := BWV->BWV_UNCAR
						dDatCar := M->BA1_DATCAR

						If lRecNas
							// Verifica se a mae tem a mesma classe de carencia, se tiver, vale a dela
							If PLSVERCAR({BWV->BWV_UNCAR, BWV->BWV_QTDCAR, "1", BWV->BWV_CLACAR, BWV->BWV_CODINT,aDadUsrMae[28]},;
										  aDadUsrMae, M->BA1_CODINT, M->BA3_CODPLA, M->BA3_VERSAO)
																
								aNivCarencia := PlsClasCar({BWV->BWV_UNCAR, BWV->BWV_QTDCAR, "1", BWV->BWV_CLACAR, BWV->BWV_CODINT, aDadUsrMae[28]},;
													        aDadUsrMae, "", "", M->BA1_CODINT, M->BA3_CODPLA, M->BA3_VERSAO)

								nQtdCar := aNivCarencia[2]
								cUniCar := aNivCarencia[1]
								dDatCar := aNivCarencia[6] // Data de Carência da Mãe							
							EndIf
						EndIf

						// Adiciona a classe de carencia na matriz.
						aDadBFO[nPos][nCodInt] := cCodInt
						aDadBFO[nPos][nClaCar] := cClaCar
						aDadBFO[nPos][nDesCla] := cDesCla
						aDadBFO[nPos][nCarenc] := nQtdCar
						aDadBFO[nPos][nUnicar] := cUniCar
						aDadBFO[nPos][nDatCar] := dDatCar
						aDadBFO[nPos][nTipReg] := M->BA1_TIPREG
						aDadBFO[nPos][nDelete] := .F.

						// Adiciona controle de inclusao no avettrab...
						Aadd(aTrbBFO, 0)

						BWV->( dbSkip() )
					Enddo
				Endif

				If lRecNas
					// Leva os procedimento da mae.
					For nCnt := 1 To Len(aDadBFG)
						If aDadBFG[nCnt, nTprPro] == oBrwUsr:FieldGet("BA1_TIPREG",nPosMae)
							// Adiciona uma linha em branco no final da matriz.
							Aadd(aDadBFG, Array(Len(aCabBFG)+1) )

							// Obtem o numero da linha adicionada.
							nPos := Len(aDadBFG)

							For i := 1 To Len(aCabBFG)
								If aCabBFG[i][2] == "BFG_TIPREG"
									aDadBFG[nPos, i] := M->BA1_TIPREG
								Else
									aDadBFG[nPos, i] := aDadBFG[nCnt, i]
								Endif
							Next

							aDadBFG[nPos, (Len(aCabBFG)+1)] := .F.
							// Adiciona controle de inclusao no avettrab...
							Aadd(aVetBFG, 0)
						Endif
					Next

					// Leva a parametrizacao da co participacao do procedimento
					For nCnt := 1 To Len(aDadBVM)
						If aDadBVM[nCnt, nTprCO1] == oBrwUsr:FieldGet("BA1_TIPREG",nPosMae)
							// Adiciona uma linha em branco no final da matriz.
							Aadd(aDadBVM, Array(Len(aCabBVM)+1) )

							// Obtem o numero da linha adicionada.
							nPos := Len(aDadBVM)
							For i := 1 To Len(aCabBVM)
								If aCabBVM[i][2] == "BVM_TIPREG"
									aDadBVM[nPos, i] := M->BA1_TIPREG
								Else
									aDadBVM[nPos, i] := aDadBVM[nCnt, i]
								Endif
							Next

							aDadBVM[nPos, (Len(aCabBVM)+1)] := .F.
							// Adiciona controle de inclusao no avettrab...
							Aadd(aVetBVM, 0)
						Endif
					Next

					// Leva os grupos de cobertura.
					For nCnt := 1 To Len(aDadBFE)
						If aDadBFE[nCnt, nTprGRU] == oBrwUsr:FieldGet("BA1_TIPREG",nPosMae)
							// Adiciona uma linha em branco no final da matriz.
							Aadd(aDadBFE, Array(Len(aCabBFE)+1) )

							// Obtem o numero da linha adicionada.
							nPos := Len(aDadBFE)
							For i := 1 To Len(aCabBFE)
								If aCabBFE[i][2] == "BFE_TIPREG"
									aDadBFE[nPos, i] := M->BA1_TIPREG
								Else
									aDadBFE[nPos, i] := aDadBFE[nCnt, i]
								Endif
							Next

							aDadBFE[nPos, (Len(aCabBFE)+1)] := .F.
							// Adiciona controle de inclusao no avettrab...
							Aadd(aVetBFE, 0)
						Endif
					Next

					// Leva as classes de carencia dos grupos de cobertura.
					For nCnt := 1 To Len(aDadBVI)
						If aDadBVI[nCnt, nTprCGR] == oBrwUsr:FieldGet("BA1_TIPREG",nPosMae)
							// Adiciona uma linha em branco no final da matriz.
							Aadd(aDadBVI, Array(Len(aCabBVI)+1) )

							// Obtem o numero da linha adicionada.
							nPos := Len(aDadBVI)
							For i := 1 To Len(aCabBVI)
								If aCabBVI[i][2] == "BVI_TIPREG"
									aDadBVI[nPos, i] := M->BA1_TIPREG
								Else
									aDadBVI[nPos, i] := aDadBVI[nCnt, i]
								Endif
							Next

							aDadBVI[nPos, (Len(aCabBVI)+1)] := .F.
							// Adiciona controle de inclusao no avettrab...
							Aadd(aVetBVI, 0)
						Endif
					Next

					// Leva as classes de carencia dos grupos de cobertura.
					For nCnt := 1 To Len(aDadBVJ)
						If aDadBVJ[nCnt, nTprCO2] == oBrwUsr:FieldGet("BA1_TIPREG",nPosMae)
							// Adiciona uma linha em branco no final da matriz.
							Aadd(aDadBVJ, Array(Len(aCabBVJ)+1) )

							// Obtem o numero da linha adicionada.
							nPos := Len(aDadBVJ)
							For i := 1 To Len(aCabBVJ)
								If aCabBVJ[i][2] == "BVJ_TIPREG"
									aDadBVJ[nPos, i] := M->BA1_TIPREG
								Else
									aDadBVJ[nPos, i] := aDadBVJ[nCnt, i]
								Endif
							Next

							aDadBVJ[nPos, (Len(aCabBVJ)+1)] := .F.
							// Adiciona controle de inclusao no avettrab...
							Aadd(aVetBVJ, 0)
						Endif
					Next
				Endif
			Endif
		Endif
	Endif
Else
	BEK->( dbSetorder(01) )
	If BEK->( msSeek(xFilial("BEK")+M->BA3_CODINT+M->BA3_CODPLA+M->BA3_VERSAO) )
		While !BEK->( Eof() ) .and. M->BA3_CODINT+M->BA3_CODPLA+M->BA3_VERSAO == BEK->(BEK_CODIGO+BEK_VERSAO)

			If !Empty(M->BA1_DATADM) .and. BEK->BEK_TIPO == '1'
				dDatAux := M->BA1_DATADM
				cCodCla := BEK->BEK_SEQUEN

				lLimite := ((M->BA1_DATINC - M->BA1_DATADM) <= BEK->BEK_LIMITE)
				If lP260CADM
					 aLimite := Execblock("P260CADM",.F.,.F.,{lTipo})
					 If Len(aLimite) > 0
					 	lLimite := aLimite[1]
					 Endif
				Endif
				lExist  := .T.

			Elseif !Empty(M->BA1_DATCAS) .and. BEK->BEK_TIPO == '3'
				dDatAux := M->BA1_DATCAS
				cCodCla := BEK->BEK_SEQUEN

				lLimite := ((M->BA1_DATINC - M->BA1_DATCAS) <= BEK->BEK_LIMITE)
				lExist  := .T.

			Elseif M->BA1_RECNAS == "1" .and. BEK->BEK_TIPO == '2' // Recem Nascido.
				dDatAux := M->BA1_DATNAS
				cCodCla := BEK->BEK_SEQUEN

				lLimite := ((M->BA1_DATINC - M->BA1_DATNAS) <= BEK->BEK_LIMITE)
				lExist  := .T.
				lRecNas := .T.

			Elseif BEK->( FieldPos("BEK_TIPUSU") ) > 0 .and. M->BA1_TIPUSU == BEK->BEK_TIPUSU
				cCodCla := BEK->BEK_SEQUEN
				lExist  := .T.
				lLimite := .T.

			Elseif BEK->( FieldPos("BEK_GRAUPA") ) > 0 .and. M->BA1_GRAUPA == BEK->BEK_GRAUPA
				cCodCla := BEK->BEK_SEQUEN
				lExist  := .T.
				lLimite := .T.

			Endif
			If lExist
				Exit
			Endif

			BEK->( dbSKip() )
		Enddo

		If lExist .and. lLimite

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se for recem nascido, verifica se ele nasceu pelo plano. |
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lRecNas
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Retorna caso nao seja apontada a mae.                    |
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nPosMae := Pl260RtMae()
				If nPosMae == 0
					Return(0)
				Endif

				cMatric := M->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+;
							oBrwUsr:FieldGet("BA1_TIPREG",nPosMae)+;
							oBrwUsr:FieldGet("BA1_DIGITO",nPosMae)

				aDadUsrMae := PLSA090USR(cMatric,M->BA1_DATNAS,Time(),,.F.,.T.,.F.)
				aDadUsrMae := PLSGETUsr()

				aProcs := StrToKarr(cProObst, ",")

				For nCnt := 1 To Len(aProcs)
					cCodPad := Substr(aProcs[nCnt],1,2)
					cCodPro := Substr(aProcs[nCnt],3,8)

					aRet := PLSAUTP(M->BA1_DATNAS,Time(),cCodPad,cCodPro,1,aDadUsrMae,0,{},"1",.F.,'',,NIL)
					lRet := aRet[1]

					If lRet
						Exit
					Endif
				Next
			Else
				lRet := .T.
			Endif

			If lRet
				BWX->( dbSetorder(01) )
				If BWX->( msSeek(xFilial("BWX")+M->BA3_CODINT+M->BA3_CODPLA+M->BA3_VERSAO+cCodCla) )
					While !BWX->( Eof() ) .and. BWX->(BWX_CODINT+BWX_CODPRO+BWX_VERSAO+BWX_SEQUEN) ==;
												 M->BA3_CODINT+M->BA3_CODPLA+M->BA3_VERSAO+cCodCla

						// Adiciona uma linha em branco no final da matriz.
						Aadd(aDadBFO, Array(Len(aCabBFO)+1) )

						// Obtem o numero da linha adicionada.
						nPos := Len(aDadBFO)

						cCodInt := BWX->BWX_CODINT
						cClaCar := BWX->BWX_CLACAR
						cDesCla := Posicione("BDL",1,xFilial("BDL")+BWX->(BWX_CODINT+BWX_CLACAR), "BDL_DESCRI")
						nQtdCar := BWX->BWX_QTDCAR
						cUniCar := BWX->BWX_UNCAR
						dDatCar := M->BA1_DATCAR

						If lRecNas
							// Verifica se a mae tem a mesma classe de carencia, se tiver, vale a dela
							If PLSVERCAR({BWX->BWX_UNCAR, BWX->BWX_QTDCAR, "1", BWX->BWX_CLACAR, BWX->BWX_CODINT,aDadUsrMae[28]},;
										  aDadUsrMae, M->BA1_CODINT, M->BA3_CODPLA, M->BA3_VERSAO)
																
								aNivCarencia := PlsClasCar({BWX->BWX_UNCAR, BWX->BWX_QTDCAR, "1", BWX->BWX_CLACAR, BWX->BWX_CODINT, aDadUsrMae[28]},;
													        aDadUsrMae, "", "", M->BA1_CODINT, M->BA3_CODPLA, M->BA3_VERSAO)

								nQtdCar := aNivCarencia[2]
								cUniCar := aNivCarencia[1]
								dDatCar := aNivCarencia[6] // Data de Carência da Mãe							
							EndIf
						EndIf

						aDadBFO[nPos][nCodInt] := cCodInt
						aDadBFO[nPos][nClaCar] := cClaCar
						aDadBFO[nPos][nDesCla] := cDesCla
						aDadBFO[nPos][nCarenc] := nQtdCar
						aDadBFO[nPos][nUnicar] := cUniCar
						aDadBFO[nPos][nDatCar] := dDatCar
						aDadBFO[nPos][nTipReg] := M->BA1_TIPREG
						aDadBFO[nPos][nDelete] := .F.

						// Adiciona controle de inclusao no avettrab...
						Aadd(aTrbBFO, 0)

						BWX->( dbSkip() )
					Enddo
				Endif
			Endif

		Endif
	Endif
Endif

Return()



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260RtMaeºAutor  ³Geraldo Felix Juniorº Data ³  06/05/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Mostra janela com os membros da familia, para o operador    º±±
±±º          ³informar quem eh a mae, no caso de cadastro de recem nascidoº±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PL260RtMae()
LOCAL oDlgMae
LOCAL oListMae
LOCAL cTitulo	:= OemtoAnsi(STR0156) //"Cadastro de recem nascidos."
LOCAL nOpcx	    := 2
LOCAL bOk 		:= {|| nOpcx := 1, nPos := oListMae:nAt, oDlgMae:End() }
LOCAL bCancel 	:= {|| nOpcx := 2, oDlgMae:End() }
LOCAL aDados 	:= {}
LOCAL nCnt		:= 0
LOCAL nRet 		:= 0
LOCAL nPos		:= 0

LOCAL bAddDad	:= {|| Aadd(aDados, {oBrwUsr:FieldGet("BA1_TIPREG", nCnt),;
									  oBrwUsr:FieldGet("BA1_NOMUSR", nCnt),;
									  oBrwUsr:FieldGet("BA1_GRAUPA", nCnt),;
									  oBrwUsr:FieldGet("BA1_DESGRA", nCnt),;
									  oBrwUsr:FieldGet("BA1_IDADE", nCnt)}) }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega usuarios femininos para a lista...               |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nCnt := 1 To Len(oBrwUsr:aCols)
	If oBrwUsr:FieldGet("BA1_SEXO", nCnt) == '2'
		Eval(bAddDad)
	Endif
Next

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso nao encontre nenhuma mulher na familia.             |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aDados) == 0
	Return(nRet)
Endif

DEFINE MSDIALOG oDlgMae TITLE cTitulo FROM 016,015 TO 033,090

@ 038,004 GROUP oGrpLoc TO 120, 290 PIXEL OF oDlgMae LABEL OemtoAnsi(STR0157) COLOR CLR_HBLUE, CLR_HRED //"Selecione a mae do recem nascido."
oListMae := TcBrowse():New( 050, 007, 280, 067,,,, oDlgMae,,,,,,,,,,,, .F.,, .T.,, .F., )

oListMae:AddColumn(TcColumn():New(Oemtoansi(STR0158),nil,; //"Dependencia"
		 nil,nil,nil,nil,020,.F.,.F.,nil,nil,nil,.F.,nil))
		 oListMae:ACOLUMNS[1]:BDATA     := { || aDados[oListMae:nAt,1] }

oListMae:AddColumn(TcColumn():New(OemtoAnsi(STR0107),nil,;  //"Nome"
         nil,nil,nil,nil,120,.F.,.F.,nil,nil,nil,.F.,nil))
         oListMae:ACOLUMNS[2]:BDATA     := { || aDados[oListMae:nAt,2] }

oListMae:AddColumn(TcColumn():New(OemtoAnsi(STR0159),nil,; //"Grau de Parentesco"
         nil,nil,nil,nil,020,.F.,.F.,nil,nil,nil,.F.,nil))
         oListMae:ACOLUMNS[3]:BDATA     := { || Alltrim(aDados[oListMae:nAt,3])}

oListMae:AddColumn(TcColumn():New(OemtoAnsi(STR0160),nil,; //"Descricao"
         nil,nil,nil,nil,120,.F.,.F.,nil,nil,nil,.F.,nil))
         oListMae:ACOLUMNS[4]:BDATA     := { || Alltrim(aDados[oListMae:nAt,4]) }

oListMae:AddColumn(TcColumn():New(OemtoAnsi(STR0161),nil,;  //"Idade"
         nil,nil,nil,nil,35,.F.,.F.,nil,nil,nil,.F.,nil))
         oListMae:ACOLUMNS[5]:BDATA     := { || Alltrim(aDados[oListMae:nAt,5])}

//-------------------------------------------------------------------
//  LGPD
//-------------------------------------------------------------------
	if objCENFUNLGP:isLGPDAt()
		aCampos := {"BA1_TIPREG","BA1_NOMUSR","BA1_GRAUPA","BA1_DESGRA","BA1_IDADE"}
		aBls := objCENFUNLGP:getTcBrw(aCampos)

		oListMae:aObfuscatedCols := aBls
	endif

oListMae:BLDBLCLICK := {|| Eval(bOk)}
oListMae:SetArray(aDados)

ACTIVATE MSDIALOG oDlgMae ON INIT EnchoiceBar(oDlgMae,bOK,bCancel,.F.,{})

If nOpcx == 1
	nRet := Ascan(oBrwUsr:aCols, {|x| x[oBrwUsr:FieldPos("BA1_TIPREG")] ==;
									   aDados[nPos,1]} )
Else
	nRet := 0
Endif

Return(nRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260CRCOBºAutor  ³Geraldo Felix Juniorº Data ³  05/17/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PL260CRCOB(nOpc, cAlias)
Local I__f := 0
Local nCont
LOCAL cOldAlias := ''
LOCAL aOpcoes  	:= A260MOpc(cCodFor)
LOCAL aDados   	:= {}
LOCAL aCabec   	:= {}
LOCAL aRecTrab 	:= {}
LOCAL aCpos    	:= {}
LOCAL aFields  	:= {}
LOCAL cTipo    	:= ''
LOCAL cTit     	:= ''
LOCAL cTrab		:= ''
LOCAL cDado 	:= ''
LOCAL _cChave	:= ''
LOCAL aVetMaster:= {}
Local nI

If nOpc <> K_Incluir
	cOldAlias := cAlias
	BJK->(DbSetOrder(1))
	If BJK->(MsSeek(xFilial("BJK")+cChave))
		While ! BJK->(Eof()) .And. BJK->(BJK_FILIAL+BJK_CODOPE+BJK_CODEMP+BJK_MATRIC) == xFilial("BJK")+cChave

			cCodFor  := BJK->BJK_CODFOR
			aOpcoes  := A260MOpc(cCodFor)
			aDados   := {}
			aCabec   := {}

			For nI := 1 To Len(aOpcoes)
				aRecTrab := {}
				cAlias   := aOpcoes[nI,2]
				cTipo    := aOpcoes[nI,3]
				cTit     := aOpcoes[nI,1]

				DbSelectArea(cAlias)
				DbSetOrder(1)
				If cTipo = "1" .Or. "_CODFOR" $ IndexKey()
					MsSeek(xFilial(cAlias)+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cCodFor)
				Else
					MsSeek(xFilial(cAlias)+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC))
				Endif

				If Found() .And. cTipo == "0" // Enchoice

					RegToMemory( cAlias, .F., .F. )

					aCpos   := {}
					aFields := DBSTRUCT()
					For nCont := 1 To Len(aFields)
						cTrab := "M->"+aFields[nCont,1]
						cDado := &cTrab
						aadd(aCpos,{cTrab,cDado})
					Next
					aadd(aVetMaster,{cCodFor,cAlias,cTipo,aCpos,IF(Found(),Recno(),0)})
				ElseIf cTipo == "1" // GetDados
					_cChave := cAlias+"_FILIAL+"+;
					cAlias+"_CODOPE+"+;
					cAlias+"_CODEMP+"+;
					cAlias+"_MATRIC+"+;
					cAlias+"_CODFOR"
					STORE HEADER cAlias TO aCabec For .T.
					If Found()
						Store COLS cAlias TO aDados FROM aCabec VETTRAB aRecTrab While &_cChave == xFilial("BJK")+cChave+cCodFor
					Else
						Store COLS Blank cAlias TO aDados FROM aCabec
					Endif
					aadd(aVetMaster,{cCodFor,cAlias,cTipo,aDados,aRecTrab})
				Endif
			Next
			BJK->(DbSkip())
		Enddo
	Endif
	cAlias := cOldAlias
Endif

Return(aVetMaster)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSA260DVLºAutor  ³Geraldo Felix Juniorº Data ³  05/27/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260DVL()
Local nCnt
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Garante que o objeto ja existe, para evitar error log...            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type('oBrwUSR') == 'U'
	Return()
Endif

If nOpcx == K_Incluir
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza todos os usuarios da familia com a validade da familia...  ³
	//³ Agora faz apenas no primeiro usuario...                             ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nCnt := 1 To Len(oBrwUSR:Acols)
		oBrwUsr:FieldPut("BA1_DTVLCR",M->BA3_VALID,nCnt)
	Next
	If Len(oBrwUsr:aCols) > 1 .and. oBrwUsr:lAltered
		MsgInfo(OemtoAnsi(STR0162)) //"A data de validade dos usuarios foram ajustadas com a validade da familia."
	Endif
Endif

Return(M->BA3_VALID)



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260when ºAutor  ³Geraldo Felix Juniorº Data ³  30/05/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260When(cTipo)
LOCAL lRet := .F.

If cTipo == '1'
	lRet := (lJuridico .and. !Empty(M->BA3_DATDES))
Endif

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³ PLS260ACR  ³ Autor ³ Angelo Sperandio    ³ Data ³ 17.07.05 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Verifica se houve alteracao cadastral e marca o usuario    ³±±±
±±³          ³ como alterado, para posterior emissao de cartao de identif.³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PLS260ACR()

Local aArea         := GetArea()
Local cNameBX1      := RetSQLName("BX1")
Local cNameBX2      := RetSQLName("BX2")
Local cTmp
Local cIn
Local nI
Local cQryBlq
Local cDat
Local cHor
Local cMin
Local cDatHor

If  BA1->(FieldPos("BA1_EMICAR")) > 0 .and. ;
    BA1->BA1_EMICAR <> "0"
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Monta variavel com campos para verificar se houve alteracao         ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    cTmp := GetNewPar("MV_PLALTCR","BA1_DATNAS;BA1_NOMUSR;BA1_DTVLCR;BTS_NOMUSR;BTS_NOMCAR;BTS_DATNAS")
    nTmp := len(cTmp)
    cIn  := "('"
    For nI := 1 to nTmp
        If  substr(cTmp,nI,1) == ";"
            cIn += "','"
        Else
            cIn += substr(cTmp,nI,1)
        Endif
    Next
    cIn += "')"
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Considera alteracao dentro dos ultimos 5 minutos                    ³
    //³ Calcula data/hora com 3 minutos a menos                             ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    cDat := date()
    cHor := val(substr(time(),1,2))
    cMin := val(substr(time(),4,2)) - 5
    If  cMin < 0
        cMin := 60 + cMin
        cHor := cHor - 1
        If  cHor < 0
            cHor := 23
            cDat := date() - 1
        Endif
    Endif
    cDatHor := dtos(cDat) + strzero(cHor,2) + ":" + strzero(cMin,2) + ":" + "00"
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    //³ Processa todos os usuarios da familia                               ³
    //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
    BTS->(dbSetOrder(1))
    BA1->(dbsetOrder(1))
    BA1->(msSeek(xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)))
    While ! BA1->(eof()) .and. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC) == ;
                                xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)
       //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
       //³ Posiciona BTS                                                       ³
       //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
       BTS->(msSeek(xFilial("BTS")+BA1->BA1_MATVID))
       //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
       //³ Verifica se houve alteracao dentro dos ultimos 5 minutos, atraves   ³
       //³ do log, e marca o usuario com alterado, para posterior emissao do   ³
       //³ cartao de identificacao                                             ³
       //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
       cQryBlq  := " SELECT COUNT(*) QTD FROM " + cNameBX1 + " X1, " + cNameBX2 + " X2 "
       cQryBlq  += " WHERE ((X1.BX1_ALIAS = 'BA1' AND X1.BX1_RECNO = '" + strzero(BA1->(RecNo()),10) + "') OR "
       cQryBlq  += "        (X1.BX1_ALIAS = 'BTS' AND X1.BX1_RECNO = '" + strzero(BTS->(RecNo()),10) + "')) "
       cQryBlq  += "   AND X1.BX1_TIPO = 'A' "
       cQryBlq  += "   AND X1.BX1_DATA||X1.BX1_HORA >= '" + cdatHor + "' "
       cQryBlq  += "   AND X2.BX2_CAMPO IN " + cIn
       cQryBlq  += "   AND X1.BX1_FILIAL = '" + xFilial("BX1") + "' "
       cQryBlq  += "   AND X2.BX2_FILIAL = '" + xFilial("BX2") + "' "
       cQryBlq  += "   AND X1.BX1_SEQUEN = X2.BX2_SEQUEN "
       cQryBlq  += "   AND X1.D_E_L_E_T_ <> '*' "
       cQryBlq  += "   AND X2.D_E_L_E_T_ <> '*' "
       PLSQuery(cQryBlq,"LOGQRY")
       If  LOGQRY->QTD > 0
           If  BA1->(RecLock("BA1",.F.))
               BA1->BA1_EMICAR := "1" // alterado
               BA1->(msUnLock())
           Endif
       Endif
       LOGQRY->(DbCloseArea())
       RestArea(aArea)
       //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
       //³ Acessa proximo registro                                             ³
       //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
       BA1->(dbSkip())
    Enddo
Endif

Return()


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260VTP  ºAutor  ³Geraldo Felix Juniorº Data ³  07/26/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que valida o tipo de registro digitado pelo usuario.º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±	
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260VTP(oBrwUsr, cTipReg)
LOCAL nCnt	:= 0
LOCAL lRet 	:= .T.

If  len(alltrim(cTipreg)) < 2
    MsgAlert(OemtoAnsi(STR0163)) //"Tipo de registro invalido - deve ser entre 01 e 99"
	lRet := .F.
Else
    For nCnt := 1 To Len(oBrwUsr:aCols)
	    If  cTipReg == oBrwUsr:FieldGet("BA1_TIPREG", nCnt)
		    MsgAlert(Oemtoansi(STR0164)) //"Ja existe usuario com este tipo de registro nesta familia. Informe um tipo de registro valido!"
  		    lRet := .F.
		    Exit
	    Endif
    Next
Endif

Return(lRet)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260MPAG ºAutor  ³Alexander			 º Data ³  21/09/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Retorna a Modalidade de cobranca conforme o tipo de pessoa º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260MPAG(cCampo)
    LOCAL cRet

	If M->BA3_TIPOUS == "1"
		BI3->( MsSeek(xFilial("BI3")+M->(BA3_CODINT+BA3_CODPLA+BA3_VERSAO) ) )
		cRet := BI3->&("BI3"+cCampo)
	Else
		BT6->( MsSeek(xFilial("BT6")+M->(BA3_CODINT+BA3_CODEMP+BA3_CONEMP+BA3_VERCON+BA3_SUBCON+BA3_VERSUB+BA3_CODPLA+BA3_VERSAO) ) )
		cRet := BT6->&("BT6"+cCampo)
	EndIf

Return cRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260DELREGºAutor  ³Alexander			 º Data ³  23/06/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Deleta registro da getdados que obj e indefinido 		  º±±
±±º     	 ³ Usa a matriz avet (recnos) para fazer a deleção 			  º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A260DELREG(cTab,aMat)
   LOCAL nI
   For nI := 1 to Len(aMat)
	   &( cTab+'->( DbGoTo('+AllTrim(Str(aMat[nI]))+') ) ' )
	   &( cTab+'->( RecLock("'+cTab+'",.F.) )' )
       &( cTab+'->( DbDelete() )' )
	   &( cTab+'->( MsUnLock() )' )
   Next

Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260DSMNºAutor  ³Geraldo Felix Jr.   º Data ³  11/18/05   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Inicializados padrao para o campo de desconto.              º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260DSMN()
LOCAL nRet := 0

If BA3->(FieldPos("BA3_DESMEN")) > 0 .AND. BQC->(FieldPos("BQC_DESMEN")) > 0
	If lJuridico .and. BQC->BQC_DESMEN > 0
		nRet := BQC->BQC_DESMEN
	Endif
Endif

Return(nRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260FaiEspºAutor  ³Geraldo Felix Juniorº Data ³  10.09.03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica carrega as faixas etarias especificas  º±±
±±º          ³para o usuario...                                           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Ao confirmar o usuario.                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A260FaiEsp()
Local aArea     	:= GetArea()
LOCAL aCabAux 		:= {}
LOCAL aCabec   		:= {}
LOCAL nCols    		:= 1
LOCAL nLido    		:= 0
LOCAL nPos			:= 0
LOCAL nPosUsr		:= 0
Local nHeader
LOCAL aDados		:= aClone(oBrwBDK:aCols)
LOCAL aHeader		:= aClone(oBrwBDK:aHeader)
LOCAL aVetTrb		:= aClone(oBrwBDK:aVetTrab)
LOCAL nBDKCodFai    := oBrwBDK:FieldPos("BDK_CODFAI")
LOCAL nBDKTipReg    := oBrwBDK:FieldPos("BDK_TIPREG")
LOCAL nBDKValor    	:= oBrwBDK:FieldPos("BDK_VALOR")
LOCAL nPosPla		:= 0
LOCAL nCnt			:=0
LOCAL lMudPla		:= .F.
LOCAL lRet			:= .F.
LOCAL lBDKTabVld	:= BDK->(FieldPos("BDK_TABVLD")) > 0

PRIVATE cCodFai := ''

// So executa rotina se o usuario trocar de plano.
If M->BA1_CODPLA == __cUsrPla_  .and. M->BA1_VERSAO ==__cUsrVer_
	Return()
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona cadastro de formas de cobranca...                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BJ1->(MsSeek(xFilial("BJ1") + M->BA3_FORPAG))

// Verifica se usuario ja possui faixas de valores dentro da matriz...
If (nPosUsr := Ascan(aDados, {|x| x[nBDKTipReg] == M->BA1_TIPREG})) <> 0 .and.;
	oBrwBDK:aCols[nPosUsr][nBDKValor] <> 0

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Redefine a matriz de lay-out da forma de cobranca...                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aDadBDK := {}
	aTrbBDK	:= {}
	For nCnt := 1 To Len(aDados)
		// Mantem os demais usuarios na matriz...
		If aDados[nCnt][nBDKTipReg] <> M->BA1_TIPREG
			Aadd(aDadBDK, aClone(aDados[nCnt]))
			Aadd(aTrbBDK, aVetTrb[nCnt])

		Else
			// Verifica se o item da matriz ja esta gravado na base de dados pelo nomero
			// do recno() contido no avettrab... se no avettrab estiver zero, eh porque
			// o item so existe na matriz e ainda nao foi gravado na base de dados.
			// Se o item nao existe na base de dados, nao vou precisar excluir, entao ignoro.
			If aVetTrb[nCnt] > 0
				// Pesquisa usuario na matriz de usuarios originais...
				If (nPosPla := Ascan(aDadPla, {|x| x[1] == M->BA1_TIPREG})) > 0 .and.;
					aDadPla[nPosPla][2]+aDadPla[nPosPla][3] <> M->BA1_CODPLA+M->BA1_VERSAO

					// Armazena os numeros de registros refentes a faixa especifica que deverao
					// ser excluidos da base pra que os novos sera incluidos...
					Aadd(aDadPla[nPosPla][4], aVetTrb[nCnt])

					lMudPla := .T.
				Else
					Aadd(aDadBDK, aClone(aDados[nCnt]))
					Aadd(aTrbBDK, aVetTrb[nCnt])
					lRet := .T.

				Endif
			Endif
		Endif
	Next

	// Retorna deste ponto porque o usuario nao trocou de plano...
	If lRet
		// Atualiza o brwose de faixas especificas do usuario.
		oBrwBDK:ForceRefresh(oBrwUsr)
		return
	Endif

	// Atualiza o plano na matriz de planos originais do usuario...
	If lMudPla
		If (nPosPla := Ascan(aDadPla, {|x| x[1] == M->BA1_TIPREG})) > 0
			aDadPla[nPosPla][2] := M->BA1_CODPLA
			aDadPla[nPosPla][3] := M->BA1_VERSAO
		Endif
	Endif

	// Atualiza propriedades do objeto com as novas informacoes...
	oBrwBDK:aCols 	:= aClone(aDadBDK)
	oBrwBDK:aVetTrab:= aClone(aTrbBDK)

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Busca valores do subcontrato... Pessoa Juridica...                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If M->BA3_TIPOUS = "2"	// Pessoa Juridica - Valores da Mensalidade

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Seleciona as faixas etarias...                                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cCodQtd:= '001'
	cSQL := "SELECT * FROM " + RetSQLName("BTN")+" WHERE "
	cSQL += "BTN_FILIAL = '"+xFilial("BTN")+"' AND "
	cSQL += "BTN_CODIGO = '"+M->BA3_CODINT + M->BA3_CODEMP+"' AND "
	cSQL += "BTN_NUMCON = '"+M->BA3_CONEMP+"' AND "
	cSQL += "BTN_VERCON = '"+M->BA3_VERCON+"' AND "
	cSQL += "BTN_SUBCON = '"+M->BA3_SUBCON+"' AND "
	cSQL += "BTN_VERSUB = '"+M->BA3_VERSUB+"' AND "
	cSQL += "BTN_CODPRO = '"+M->BA1_CODPLA+"' AND "
	cSQL += "BTN_VERPRO = '"+M->BA1_VERSAO+"' AND "
	cSQL += "BTN_CODQTD = '"+cCodQtd+"' AND " // Nao sera tratado pela rotina na versao 811
	cSQL += "BTN_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' AND BTN_CODFOR = '"+M->BA3_FORPAG+ "' AND "
	If lBDKTabVld
		cSQL += "(BTN_TABVLD >= '"+Dtos(dDatabase)+"' OR "
		cSQL += "BTN_TABVLD ='"+Space(TamSX3("BTN_TABVLD")[1])+ "')  AND "
	EndIf
	cSQL += "D_E_L_E_T_ = '' "
	PLSQuery(cSQL,"TRBBTN")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Alimenta matriz de valores de mensalidade da familia...                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	While ! TRBBTN->(Eof())

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Transfere o valor de cobranca para a faixa especifica do usuario... ³
		//³ Analiza faixas po tipo de usuario...                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(TRBBTN->BTN_TIPUSR) .and. TRBBTN->BTN_TIPUSR <> M->BA1_TIPUSU
			TRBBTN->( dbSkip() )
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analiza faixas por grau de parentesco...                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(TRBBTN->BTN_GRAUPA) .and. TRBBTN->BTN_GRAUPA <> M->BA1_GRAUPA
			TRBBTN->( dbSkip() )
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analiza faixas por sexo...                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !(TRBBTN->BTN_SEXO $ '3, ') .and. TRBBTN->BTN_SEXO <> M->BA1_SEXO
			TRBBTN->( dbSkip() )
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ignora lixo de base de dados...                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (TRBBTN->BTN_IDAINI == 0 .and. TRBBTN->BTN_IDAFIN == 0) .or. TRBBTN->BTN_VALFAI == 0
			TRBBTN->( dbSkip() )
			Loop
		Endif

		// Caso encontre na matriz...
		If (nPosUsr := Ascan(oBrwBDK:aCols, {|x| x[nBDKTipReg] == M->BA1_TIPREG})) <> 0 .and.;
			oBrwBDK:aCols[nPosUsr][nBDKValor] = 0

		// A matriz ja contem dados porem nao contem dados do usuario em questao... adiciona o usuario na matriz.
		Else
			// Cria linha em branco na matriz
			If Len(oBrwBDK:aCols) = 0
				Store COLS Blank "BDK" TO oBrwBDK:aCols FROM oBrwBDK:aHeader
			Else
				Aadd(oBrwBDK:aCols, AClone(oBrwBDK:aCols[1]))
			EndIf

			// Calcula o tamanho da matriz.
			nPosUsr := Len(oBrwBDK:aCols)

			// Nivela o avettrab em relacao a matriz de dados...
			Aadd(oBrwBDK:AvetTrab, 0)
		Endif

		// Garante a integridade da operacao...
		If nPosUsr > 0
			oBrwBDK:FieldPut("BDK_CODFAI", TRBBTN->BTN_CODFAI, nPosUsr)
			oBrwBDK:FieldPut("BDK_IDAINI", TRBBTN->BTN_IDAINI, nPosUsr)
			oBrwBDK:FieldPut("BDK_IDAFIN", TRBBTN->BTN_IDAFIN, nPosUsr)
			oBrwBDK:FieldPut("BDK_VALOR",  TRBBTN->BTN_VALFAI, nPosUsr)
			oBrwBDK:FieldPut("BDK_ANOMES", TRBBTN->BTN_ANOMES, nPosUsr)
			oBrwBDK:FieldPut("BDK_VLRANT", TRBBTN->BTN_VLRANT, nPosUsr)
			oBrwBDK:FieldPut("BDK_TIPREG", M->BA1_TIPREG, nPosUsr)
	   		If lBDKTabVld
				oBrwBDK:FieldPut("BDK_TABVLD", TRBBTN->BTN_TABVLD, nPosUsr)
			EndIf
   		Endif
		//Atualizo apenas se encontrar a informação
		AtualizaBDQ(nPosUsr,TRBBTN->BTN_CODPRO,TRBBTN->BTN_VERPRO)
				
		TRBBTN->(DbSkip())
	EndDo
	TRBBTN->(DbCloseArea())
	RestArea(aArea)

	

Else // Pessoa fisica...

	cSQL := "SELECT * FROM " + RetSQLName("BB3")+" WHERE BB3_FILIAL = '"+xFilial("BB3")+"' "
	cSQL += "AND BB3_CODIGO = '"+M->BA3_CODINT + M->BA1_CODPLA+"' "
	cSQL += "AND BB3_VERSAO = '"+M->BA1_VERSAO+"' "
	cSql += "AND BB3_TABVLD = '' "
	cSQL += "AND BB3_FAIFAM = '" + BJ1->BJ1_FAIFAM + "' "
	cSQL += "AND BB3_CODFOR = '" + M->BA3_FORPAG + "' "
	cSQL += "AND D_E_L_E_T_= ''"

	PLSQuery(cSQL,"TrbBB3")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Alimenta matriz de valores de mensalidade da familia...                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	While ! TrbBB3->(Eof())
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Transfere o valor de cobranca para a faixa especifica do usuario... ³
		//³ Analiza faixas po tipo de usuario...                                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(TRBBB3->BB3_TIPUSR) .and. TRBBB3->BB3_TIPUSR <> M->BA1_TIPUSU
			TRBBB3->( dbSkip() )
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analiza faixas por grau de parentesco...                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(TRBBB3->BB3_GRAUPA) .and. TRBBB3->BB3_GRAUPA <> M->BA1_GRAUPA
			TRBBB3->( dbSkip() )
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analiza faixas por sexo...                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !(TRBBB3->BB3_SEXO $ '3, ') .and. TRBBB3->BB3_SEXO <> M->BA1_SEXO
			TRBBB3->( dbSkip() )
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ignora lixo de base de dados...  '                                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If (TRBBB3->BB3_IDAINI == 0 .and. TRBBB3->BB3_IDAFIN == 0) .or. TRBBB3->BB3_VALFAI == 0
			TRBBB3->( dbSkip() )
			Loop
		Endif

		// Caso encontre na matriz...
		If (nPosUsr := Ascan(oBrwBDK:aCols, {|x| x[nBDKTipReg] == M->BA1_TIPREG})) <> 0 .and.;
			oBrwBDK:aCols[nPosUsr][nBDKValor] = 0

		// A matriz ja contem dados porem nao contem dados do usuario em questao... adiciona o usuario na matriz.
		Else
			// Cria linha em branco na matriz
			If Len(oBrwBDK:aCols) = 0
				Store COLS Blank "BDK" TO oBrwBDK:aCols FROM oBrwBDK:aHeader
			Else
				Aadd(oBrwBDK:aCols, AClone(oBrwBDK:aCols[1]))
			EndIf

			// Calcula o tamanho da matriz.
			nPosUsr := Len(oBrwBDK:aCols)

			// Nivela o avettrab em relacao a matriz de dados...
			Aadd(oBrwBDK:AvetTrab, 0)
		Endif

		// Garante a integridade da operacao...
		If nPosUsr > 0
			oBrwBDK:FieldPut("BDK_CODFAI", TRBBB3->BB3_CODFAI, nPosUsr)
			oBrwBDK:FieldPut("BDK_IDAINI", TRBBB3->BB3_IDAINI, nPosUsr)
			oBrwBDK:FieldPut("BDK_IDAFIN", TRBBB3->BB3_IDAFIN, nPosUsr)
			oBrwBDK:FieldPut("BDK_VALOR",  TRBBB3->BB3_VALFAI, nPosUsr)
			oBrwBDK:FieldPut("BDK_ANOMES", TRBBB3->BB3_ANOMES, nPosUsr)
			oBrwBDK:FieldPut("BDK_VLRANT", TRBBB3->BB3_VLRANT, nPosUsr)
			oBrwBDK:FieldPut("BDK_TIPREG", M->BA1_TIPREG, nPosUsr)
   		Endif
		//Atualizo apenas se encontrar a informação.
		AtualizaBDQ(nPosUsr,M->BA3_CODPLA,+ M->BA3_VERSAO)
		
		TRBBB3->(DbSkip())
	EndDo
	TRBBB3->(DbCloseArea())
	RestArea(aArea)
	
	

Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Sobre o desconto: Nao carrega os descontos porque nao existe faixa de    ³
//³ desconto para carregar. O desconto da faixa especifica deve ser informado³
//³ manualmente no cadastro de usuarios.                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

// Atualiza o brwose de faixas especificas do usuario.
If Len(oBrwBDK:aCols) > 0
	oBrwBDK:oBrowse:oBrowse:nAt := 1
Else
	Store COLS Blank "BDK" TO aDadBDK FROM aCabBDK

	oBrwBDK:aCols := aClone(aDadBDK)
	oBrwBDK:oBrowse:oBrowse:nAt := 1
Endif
oBrwBDK:ForceRefresh(oBrwUsr)

return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260WEND ºAutor  ³Geraldo Felix Juniorº Data ³  09/11/06   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Utilizada no when dos campos de endereco do usuario e da    º±±
±±º          ³vida.                                                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260WEND(cAlias)

If BA1->( FieldPos("BA1_ORIEND") ) == 0
	Return(.T.)
Endif

Return(Iif(cAlias == "BA1", Empty(M->BA1_ORIEND), Empty(M->BTS_ORIEND)))

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260WENC ºAutor  ³Diogo Ximenes       º Data ³  01/01/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Utilizada no when dos campos de parcelamento de co-part.    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260WENC(nTipo)
LOCAL lRet		:= .F.
LOCAL lRegra	:= .F.
LOCAL cChave	:= BA3->BA3_CODINT+BA3->BA3_CODEMP+BA3->BA3_MATRIC
LOCAL aAreaBA1 	:= {}
Local cTipReg	:= GetNewPar("MV_PLTRTIT","00")

Default nTipo := 0

If nTipo != 1
	If  M->BA1_TIPREG != cTipReg
		aAreaBA1 := BA1->(GetArea())
		BA1->(DbSetOrder(2))// BA1_FILIAL, BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, BA1_DIGITO
		If BA1->(MsSeek(xFilial("BA1")+cChave+cTipReg))
		 	lRegra := (BA1->BA1_TREGRA == '0')
		EndIf
		RestArea(aAreaBA1)
	Else
		lRegra := .T.
	EndIf

	If lRegra
		Do case
		    // Se o titular permite mudar as configuracoes
			case nTipo == 1
			 	lRet := .T.
			// Pode parcelar, mantido o retorno .T., pois pode alterar mesmo quando nao se pode parcelar
			case nTipo == 2
			 	lRet := .T.
			// Se pode alterar os campos fora do segue regra (Prazo)
			case nTipo == 3
				lRet := M->BA1_TREGRA == '1'
			// Se pode alterar os campos fora do segue regra(Valor fixo)
			case nTipo == 4
				lRet := M->BA1_TREGRA == '2'
		EndCase
	EndIf
Else
	lRet := .T.
EndIf

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260TREG ºAutor  ³Diogo Ximenes       º Data ³  01/01/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Limpa os campso da regra.    								  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260TREG()

Do case
	case M->BA1_TREGRA == '0'
		M->BA1_MESLIQ 	:= "  "
		M->BA1_ANOLIQ	:= "    "
		M->BA1_VLRFIX	:= 0
	case M->BA1_TREGRA == '1'
		M->BA1_VLRFIX	:= 0
	case M->BA1_TREGRA == '2'
		M->BA1_MESLIQ 	:= "  "
		M->BA1_ANOLIQ	:= "    "
EndCase

Return(.T.)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260DLUSRºAutor  ³Geraldo Felix Juniorº Data ³  13/11/06   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Deleta os arquivos relacionados ao usuario quando este for º±±
±±º          ³deletado diretamente pelo acols por meio da tecla DEL       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
/* Tabelas envolvidas...
BF3 - Pre existencias...
BYY - Carencias da pre-existencia
BCP - Documentos obrigatorios...
BF4 - Opcionais do usuario
BV0 - Grupo de cobertura do opcional
BV1 - Classes de carencia do opcional
BV2 - Co-Participacao do opcional
BV3 - Procedimentos
BV4 - CID x Precedimento
BV6 - Especialidade x Procedimento
BV7 - Especialidade x Procedimento x Co-participacao
BV8 - Co-Participacao x Procedimento
BV9 - Grupo de quantidade do opcional
BVA - Co-Participacao x Grupo de quantidade x Opcional
BYX - Forma de cobranca do opcional
BGU - Historico do opcional do usuario
BCA - Historico do bloqueio do usuario
BH6 - Gratuidade
BFE - Grupo de cobertura
BVI - Classe de carencia x Grupo de cobertura
BVJ - Co-participacao x Grupo de cobertura
BFG - Procedimentos
BVM - Co-Participacao x Procedimento
BW9 - Grupo de quantidade
BWA - Co-Participacao x Grupo de quantidade
BFO - Classe de carencia
BHH - Situacoes adversas
BDK - Faixa especifica do usuario
BDQ - Descontos da faixa especifica do usuario
B1W - Grupo de rol de procedimentos
BED - Histórico de emissão e carterinha
*/

Static Function PL260DLUSR( cMatric, cDig, cNumAte )
LOCAL lAllUsr := .F.
// BF3 - Pre existencias...
BF3->( dbSetorder(01) )
If BF3->( msSeek(xFilial("BF3")+cMatric) )
	While !BF3->( Eof() ) .and. BF3->(BF3_CODINT+BF3_CODEMP+BF3_MATRIC+BF3_TIPREG) == cMatric
		BF3->( Reclock("BF3", .F.) )
			BF3->( dbDelete() )
		BF3->( MsUnlock() )

		BF3->( dbSkip() )
	Enddo
Endif

// BYY - Carencias POR CID.
BYY->( dbSetorder(01) )
If BYY->( msSeek(xFilial("BYY")+cMatric) )
	While !BYY->( Eof() ) .and. BYY->(BYY_CODINT+BYY_CODEMP+BYY_MATRIC+BYY_TIPREG) == cMatric
		BYY->( Reclock("BYY", .F.) )
			BYY->( dbDelete() )
		BYY->( MsUnlock() )

		BYY->( dbSkip() )
	Enddo
Endif

// BCP - Documentos obrigatorios...
BCP->( dbSetorder(01) )
If BCP->( msSeek(xFilial("BCP")+cMatric) )
	While !BCP->( Eof() ) .and. BCP->(BCP_CODOPE+BCP_CODEMP+BCP_MATRIC+BCP_TIPREG) == cMatric
		BCP->( Reclock("BCP", .F.) )
			BCP->( dbDelete() )
		BCP->( MsUnlock() )

		BCP->( dbSkip() )
	Enddo
Endif

// BF4 - Opcionais do usuario
BF4->( dbSetorder(01) )
If BF4->( msSeek(xFilial("BF4")+cMatric) )
	While !BF4->( Eof() ) .and. BF4->(BF4_CODINT+BF4_CODEMP+BF4_MATRIC+BF4_TIPREG) == cMatric
		BF4->( Reclock("BF4", .F.) )
			BF4->( dbDelete() )
		BF4->( MsUnlock() )

		BF4->( dbSkip() )
	Enddo
Endif

// BV0 - Grupo de cobertura do opcional
BV0->( dbSetorder(01) )
If BV0->( msSeek(xFilial("BV0")+cMatric) )
	While !BV0->( Eof() ) .and. BV0->(BV0_CODINT+BV0_CODEMP+BV0_MATRIC+BV0_TIPREG) == cMatric
		BV0->( Reclock("BV0", .F.) )
			BV0->( dbDelete() )
		BV0->( MsUnlock() )

		BV0->( dbSkip() )
	Enddo
Endif

// BV1 - Classes de carencia do opcional
BV1->( dbSetorder(01) )
If BV1->( msSeek(xFilial("BV1")+cMatric) )
	While !BV1->( Eof() ) .and. BV1->(BV1_CODINT+BV1_CODEMP+BV1_MATRIC+BV1_TIPREG) == cMatric
		BV1->( Reclock("BV1", .F.) )
			BV1->( dbDelete() )
		BV1->( MsUnlock() )

		BV1->( dbSkip() )
	Enddo
Endif

// BV2 - Co-Participacao do opcional
BV2->( dbSetorder(01) )
If BV2->( msSeek(xFilial("BV2")+cMatric) )
	While !BV2->( Eof() ) .and. BV2->(BV2_CODINT+BV2_CODEMP+BV2_MATRIC+BV2_TIPREG) == cMatric
		BV2->( Reclock("BV2", .F.) )
			BV2->( dbDelete() )
		BV2->( MsUnlock() )

		BV2->( dbSkip() )
	Enddo
Endif

// BV3 - Procedimentos
BV3->( dbSetorder(01) )
If BV3->( msSeek(xFilial("BV3")+cMatric) )
	While !BV3->( Eof() ) .and. BV3->(BV3_CODINT+BV3_CODEMP+BV3_MATRIC+BV3_TIPREG) == cMatric
		BV3->( Reclock("BV3", .F.) )
			BV3->( dbDelete() )
		BV3->( MsUnlock() )

		BV3->( dbSkip() )
	Enddo
Endif

// BV4 - CID x Precedimento
BV4->( dbSetorder(01) )
If BV4->( msSeek(xFilial("BV4")+cMatric) )
	While !BV4->( Eof() ) .and. BV4->(BV4_CODINT+BV4_CODEMP+BV4_MATRIC+BV4_TIPREG) == cMatric
		BV4->( Reclock("BV4", .F.) )
			BV4->( dbDelete() )
		BV4->( MsUnlock() )

		BV4->( dbSkip() )
	Enddo
Endif

// BV6 - Especialidade x Procedimento
BV6->( dbSetorder(01) )
If BV6->( msSeek(xFilial("BV6")+cMatric) )
	While !BV6->( Eof() ) .and. BV6->(BV6_CODINT+BV6_CODEMP+BV6_MATRIC+BV6_TIPREG) == cMatric
		BV6->( Reclock("BV6", .F.) )
			BV6->( dbDelete() )
		BV6->( MsUnlock() )

		BV6->( dbSkip() )
	Enddo
Endif

// BV7 - Especialidade x Procedimento x Co-participacao
BV7->( dbSetorder(01) )
If BV7->( msSeek(xFilial("BV7")+cMatric) )
	While !BV7->( Eof() ) .and. BV7->(BV7_CODINT+BV7_CODEMP+BV7_MATRIC+BV7_TIPREG) == cMatric
		BV7->( Reclock("BV7", .F.) )
			BV7->( dbDelete() )
		BV7->( MsUnlock() )

		BV7->( dbSkip() )
	Enddo
Endif

// BV8 - Co-Participacao x Procedimento
BV8->( dbSetorder(01) )
If BV8->( msSeek(xFilial("BV8")+cMatric) )
	While !BV8->( Eof() ) .and. BV8->(BV8_CODINT+BV8_CODEMP+BV8_MATRIC+BV8_TIPREG) == cMatric
		BV8->( Reclock("BV8", .F.) )
			BV8->( dbDelete() )
		BV8->( MsUnlock() )

		BV8->( dbSkip() )
	Enddo
Endif

// BV9 - Grupo de quantidade do opcional
BV9->( dbSetorder(01) )
If BV9->( msSeek(xFilial("BV8")+cMatric) )
	While !BV8->( Eof() ) .and. BV8->(BV8_CODINT+BV8_CODEMP+BV8_MATRIC+BV8_TIPREG) == cMatric
		BV8->( Reclock("BV8", .F.) )
			BV8->( dbDelete() )
		BV8->( MsUnlock() )

		BV8->( dbSkip() )
	Enddo
Endif

// BVA - Co-Participacao x Grupo de quantidade x Opcional
BVA->( dbSetorder(01) )
If BVA->( msSeek(xFilial("BVA")+cMatric) )
	While !BVA->( Eof() ) .and. BVA->(BVA_CODINT+BVA_CODEMP+BVA_MATRIC+BVA_TIPREG) == cMatric
		BVA->( Reclock("BVA", .F.) )
			BVA->( dbDelete() )
		BVA->( MsUnlock() )

		BVA->( dbSkip() )
	Enddo
Endif

// BYX - Forma de cobranca do opcional
BYX->( dbSetorder(01) )
If BYX->( msSeek(xFilial("BVA")+cMatric) )
	While !BYX->( Eof() ) .and. BYX->(BYX_CODOPE+BYX_CODEMP+BYX_MATRIC+BYX_TIPREG) == cMatric
		BYX->( Reclock("BYX", .F.) )
			BYX->( dbDelete() )
		BYX->( MsUnlock() )

		BYX->( dbSkip() )
	Enddo
Endif

// BZX - Tabela de precos dos Opcionais do usuario
BZX->( dbSetorder(01) )
If BZX->( msSeek(xFilial("BZX")+cMatric) )
	While !BZX->( Eof() ) .and. BZX->(BZX_CODOPE+BZX_CODEMP+BZX_MATRIC+BZX_TIPREG) == cMatric
		BZX->( Reclock("BZX", .F.) )
			BZX->( dbDelete() )
		BZX->( MsUnlock() )

		BZX->( dbSkip() )
	Enddo
Endif

// BGU - Historico do opcional do usuario
BGU->( dbSetorder(01) )
If BGU->( msSeek(xFilial("BGU")+cMatric) )
	While !BGU->( Eof() ) .and. BGU->(BGU_CODINT+BGU_CODEMP+BGU_MATRIC+BGU_TIPREG) == cMatric
		BGU->( Reclock("BGU", .F.) )
			BGU->( dbDelete() )
		BGU->( MsUnlock() )

		BGU->( dbSkip() )
	Enddo
Endif

//BCA - Historico do bloqueio do usuario
BCA->( dbSetorder(01) )
If BCA->( msSeek(xFilial("BCA")+cMatric) )
	While !BCA->( Eof() ) .and. BCA->(BCA_MATRIC+BCA_TIPREG) == cMatric
		BCA->( Reclock("BCA", .F.) )
			BCA->( dbDelete() )
		BCA->( MsUnlock() )

		BCA->( dbSkip() )
	Enddo
Endif

// BH6 - Gratuidade
BH6->( dbSetorder(01) )
If BH6->( msSeek(xFilial("BH6")+cMatric) )
	While !BH6->( Eof() ) .and. BH6->(BH6_CODINT+BH6_CODEMP+BH6_MATRIC+BH6_TIPREG) == cMatric
		BH6->( Reclock("BH6", .F.) )
			BH6->( dbDelete() )
		BH6->( MsUnlock() )

		BH6->( dbSkip() )
	Enddo
Endif

//BFE - Grupo de cobertura
BFE->( dbSetorder(01) )
If BFE->( msSeek(xFilial("BFE")+cMatric) )
	While !BFE->( Eof() ) .and. BFE->(BFE_CODINT+BFE_CODEMP+BFE_MATRIC+BFE_TIPREG) == cMatric
		BFE->( Reclock("BFE", .F.) )
			BFE->( dbDelete() )
		BFE->( MsUnlock() )

		BFE->( dbSkip() )
	Enddo
Endif

// BVI - Classe de carencia x Grupo de cobertura
BVI->( dbSetorder(01) )
If BVI->( msSeek(xFilial("BVI")+cMatric) )
	While !BVI->( Eof() ) .and. BVI->(BVI_CODINT+BVI_CODEMP+BVI_MATRIC+BVI_TIPREG) == cMatric
		BVI->( Reclock("BVI", .F.) )
			BVI->( dbDelete() )
		BVI->( MsUnlock() )

		BVI->( dbSkip() )
	Enddo
Endif

// BVJ - Co-participacao x Grupo de cobertura
BVJ->( dbSetorder(01) )
If BVJ->( msSeek(xFilial("BVJ")+cMatric) )
	While !BVJ->( Eof() ) .and. BVJ->(BVJ_CODINT+BVJ_CODEMP+BVJ_MATRIC+BVJ_TIPREG) == cMatric
		BVJ->( Reclock("BVJ", .F.) )
			BVJ->( dbDelete() )
		BVJ->( MsUnlock() )

		BVJ->( dbSkip() )
	Enddo
Endif

// BFG - Procedimentos
BFG->( dbSetorder(01) )
If BFG->( msSeek(xFilial("BFG")+cMatric) )
	While !BFG->( Eof() ) .and. BFG->(BFG_CODINT+BFG_CODEMP+BFG_MATRIC+BFG_TIPREG) == cMatric
		BFG->( Reclock("BFG", .F.) )
			BFG->( dbDelete() )
		BFG->( MsUnlock() )

		BFG->( dbSkip() )
	Enddo
Endif

// BVM - Co-Participacao x Procedimento
BVM->( dbSetorder(01) )
If BVM->( msSeek(xFilial("BVM")+cMatric) )
	While !BVM->( Eof() ) .and. BVM->(BVM_CODINT+BVM_CODEMP+BVM_MATRIC+BVM_TIPREG) == cMatric
		BVM->( Reclock("BVM", .F.) )
			BVM->( dbDelete() )
		BVM->( MsUnlock() )

		BVM->( dbSkip() )
	Enddo
Endif

// BW9 - Grupo de quantidade
BW9->( dbSetorder(01) )
If BW9->( msSeek(xFilial("BW9")+cMatric) )
	While !BW9->( Eof() ) .and. BW9->(BW9_CODINT+BW9_CODEMP+BW9_MATRIC+BW9_TIPREG) == cMatric
		BW9->( Reclock("BW9", .F.) )
			BW9->( dbDelete() )
		BW9->( MsUnlock() )

		BW9->( dbSkip() )
	Enddo
Endif

// BWA - Co-Participacao x Grupo de quantidade
BWA->( dbSetorder(01) )
If BWA->( msSeek(xFilial("BWA")+cMatric) )
	While !BWA->( Eof() ) .and. BWA->(BWA_CODINT+BWA_CODEMP+BWA_MATRIC+BWA_TIPREG) == cMatric
		BWA->( Reclock("BWA", .F.) )
			BWA->( dbDelete() )
		BWA->( MsUnlock() )

		BWA->( dbSkip() )
	Enddo
Endif

// BFO - Classe de carencia
BFO->( dbSetorder(01) )
If BFO->( msSeek(xFilial("BFO")+cMatric) )
	While !BFO->( Eof() ) .and. BFO->(BFO_CODINT+BFO_CODEMP+BFO_MATRIC+BFO_TIPREG) == cMatric
		BFO->( Reclock("BFO", .F.) )
			BFO->( dbDelete() )
		BFO->( MsUnlock() )

		BFO->( dbSkip() )
	Enddo
Endif

// BHH - Situacoes adversas
BHH->( dbSetorder(01) )
If BHH->( msSeek(xFilial("BHH")+cMatric) )
	While !BHH->( Eof() ) .and. BHH->(BHH_CODINT+BHH_CODEMP+BHH_MATRIC+BHH_TIPREG) == cMatric
		BHH->( Reclock("BHH", .F.) )
			BHH->( dbDelete() )
		BHH->( MsUnlock() )

		BHH->( dbSkip() )
	Enddo
Endif

// BDK - Faixa especifica do usuario
BDK->( dbSetorder(01) )
If BDK->( msSeek(xFilial("BDK")+cMatric) )
	While !BDK->( Eof() ) .and. BDK->(BDK_CODINT+BDK_CODEMP+BDK_MATRIC+BDK_TIPREG) == cMatric
		BDK->( Reclock("BDK", .F.) )
			BDK->( dbDelete() )
		BDK->( MsUnlock() )

		BDK->( dbSkip() )
	Enddo
Endif

// BDQ - Descontos da faixa especifica do usuario
BDQ->( dbSetorder(01) )
If BDQ->( msSeek(xFilial("BDQ")+cMatric) )
	While !BDQ->( Eof() ) .and. BDQ->(BDQ_CODINT+BDQ_CODEMP+BDQ_MATRIC+BDQ_TIPREG) == cMatric
		BDQ->( Reclock("BDQ", .F.) )
			BDQ->( dbDelete() )
		BDQ->( MsUnlock() )

		BDQ->( dbSkip() )
	Enddo
Endif

// B1W - Grupo de rol de procedimentos
B1W->( dbSetorder(01) )
If B1W->( msSeek(xFilial("B1W")+cMatric) )
	While !B1W->( Eof() ) .and. B1W->(B1W_CODINT+B1W_CODEMP+B1W_MATRIC+B1W_TIPREG) == cMatric
		B1W->( Reclock("B1W", .F.) )
			B1W->( dbDelete() )
		B1W->( MsUnlock() )

		B1W->( dbSkip() )
	Enddo
Endif

// B1S - Proteção Financeira
If lCriaB1S
	B1S->( dbSetorder(01) )
	If B1S->( msSeek(xFilial("B1S")+cMatric) )
		While !B1S->( Eof() ) .and. B1S->(B1S_CODINT+B1S_CODEMP+B1S_MATRIC+B1S_TIPREG) == cMatric
			B1S->( Reclock("B1S", .F.) )
				B1S->( dbDelete() )
			B1S->( MsUnlock() )

			B1S->( dbSkip() )
		Enddo
	Endif
Endif

SIX->( dbSetorder(01) )
If SIX->( dbSeek("BXC3") ) // So executa se existir o indice 03.
	If SIX->( dbSeek("BXA2") ) // So executa se existir o indice 03.
		// Se a entrevista do dependente estiver desvinculada do restante da familia.
		BXA->( dbSetorder(02) )
		If BXA->( MsSeek(xFilial("BXA")+cNumAte+cMatric+cDig) )
			BXA->( RecLock("BXA", .F.) )
				BXA->( dbDelete() )
			BXA->( MsUnlock() )

			lAllUsr := .T.
		Endif
	Endif

	BXC->( dbSetorder(03) )
	If BXC->( MsSeek(xFilial("BXC")+cNumAte+Iif(lAllUsr,'',cMatric+cDig)) )
		While !BXC->( Eof() ) .and. BXC->BXC_NUMERO == cNumAte .and. (BXC->BXC_USUARI == (cMatric+cDig) .or. lAllUsr)

			BXB->( dbSetorder(01) )
			If BXB->( MsSeek(xFilial("BXB")+cNumAte+BXC->BXC_TIPREG) )
				While !BXB->( Eof() ) .and. BXB->BXB_NUMERO == cNumAte .and. BXB->BXB_TIPREG == BXC->BXC_TIPREG
					BXB->( RecLock("BXB", .F.) )
						BXB->( dbDelete() )
					BXB->( MsUnlock() )

					BXB->( dbSkip() )
				Enddo
			Endif

			BXD->( dbSetorder(01) )
			If BXD->( MsSeek(xFilial("BXD")+cNumAte+BXD->BXD_TIPREG) )
				While !BXD->( Eof() ) .and. BXD->BXD_NUMERO == cNumAte .and. BXD->BXD_TIPREG == BXC->BXC_TIPREG
					BXD->( RecLock("BXD", .F.) )
						BXD->( dbDelete() )
					BXD->( MsUnlock() )

					BXD->( dbSkip() )
				Enddo
			Endif

			BXC->( RecLock("BXC", .F.) )
				BXC->( dbDelete() )
			BXC->( MsUnlock() )

			BXC->( dbSkip() )
		Enddo
	Endif
Endif
//BED - Histório de emissão de carterinhas

If BED->(FieldPos("BED_USRDEL")) > 0
	BED->( dbSetorder(09) )
	If BED->( msSeek(xFilial("BED")+cMatric) )
		While !BED->( Eof() ) .and. BED->(BED_CODINT+BED_CODEMP+BED_MATRIC+BED_TIPREG) == cMatric .And.	BED->BED_FILIAL == Xfilial("BED")
			BED->( Reclock("BED", .F.) )
				BED->BED_USRDEL := '*'
			BED->( MsUnlock() )

			BED->( dbSkip() )
		Enddo
	Endif
Endif

Return()

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³PL260CarCr ³ Autor ³ Geraldo Felix Junior | Data ³ 08.12.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Carrega as criticas    									  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
/*/
Static Function PL260CarCr()

PutHelp("PPLSA260002",{"O produto selecionado encontra-se ","com o cadastro bloqueado."},{},{},.f.)
PutHelp("SPLSA260002",{"Selecione um produto com o cadastro ","ativo."},{},{},.f.)

PutHelp("PPLSA260003",{"A versão do produto selecionada ","encontra-se com o cadastro ","bloqueado."},{},{},.f.)
PutHelp("SPLSA260003",{"Selecione uma versão do produto ","com o cadastro ativo."},{},{},.f.)

PutHelp("PPLSSITANS",{"O produto selecionado encontra-se ","com o cadastro bloqueado pela ANS."},,,.T.)
PutHelp("SPLSSITANS",{"Selecione um produto com o cadastro ","ativo."},,,.T.)


PutHelp("PPLS260VL3",{"Nao foi possivel localizar o ","preenchimento do campo BF4_DATBLO."},,,.T.)
PutHelp("SPLS260VL3",{"É obrigadório o preenchimento ","quando informado o campo BF4_MOTBLO."},,,.T.)

PutHelp("PPLS260VL4",{"Por se tratar de desbloqueio o campo ","BF4_DATBLO não deve ser preenchido."},,,.T.)
PutHelp("SPLS260VL4",{"Limpar o conteudo do campo ","BF4_DATBLO."},,,.T.)

PutHelp("PPLS260FAB3",{"Nao foi possivel localizar o ","preenchimento do campo BF1_DATBLO."},,,.T.)
PutHelp("SPLS260FAB3",{"É obrigadório o preenchimento ","quando informado o campo BF1_MOTBLO."},,,.T.)

PutHelp("PPLS260R309",{"A RN 309 não foi aditada no  ","Contrato do beneficiário (BQC_CIE309) ","ou o beneficiário não está de ","acordo com a RN 309."},,,.T.)
PutHelp("SPLS260R309",{"Sera permitido apenas a ","inclusão de conjugês e filhos.      "},,,.T.)

Return()

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³VldDCols 	 ³ Autor ³ Diego Silva			| Data ³ 22.10.08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³			 ³Deleta ou habilita as linhas do Browse filho passado como   ³±±
±±³			 ³parametro considerando a chave de amarracao passada.		  ³±±
±±³			 | 															  ³±±
±±³Descricao ³Parametros:												  ³±±
±±³			 ³1. oBrw 	- Browse filho									  ³±±
±±³			 ³2. nPosic - Posicao do aCols para comparar com cChave		  ³±±
±±³			 |3. cChave - Chave de amarracao entre Browse pai e filho 	  ³±±
±±³			 |4. lVal 	- Define se deve deletar ou habilitar a linha     ³±±
±±³          |															  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
/*/


Static Function VldDCols(oBrw,nPosic,cChave,lVal)

LOCAL 	nI 		:= 0

If ValType(oBrw) == "O"
	For nI := 1 to Len(oBrw:aCols)
		If oBrw:aCols[nI,nPosic] == cChave
			oBrw:aCols[nI,Len(oBrw:aHeader)+1] := lVal
		EndIf
	Next nI
EndIf

Return

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlsVldBVJ ºAutor  ³Microsiga           º Data ³  17/09/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funca de validacao das datas de vigencia, chamada no       º±±
±±º          ³ botao de OK da Rotina Cobertura / Co-Participacao.         º±±
±±º          ³ Tabela - BVJ - Usr x Grp Cob x Co-Particip. 				  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PLS                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PlsVldBVJ()
Local lRet     := .f.

If BVJ->( FieldPos("BVJ_VIGDE") ) > 0 .And. BVJ->( FieldPos("BVJ_VIGATE") ) > 0
	if ! Empty(M->BVJ_VIGATE) .And. M->BVJ_VIGDE > M->BVJ_VIGATE
	MsgAlert("Vigência final menor que a inicial!")
   else
	lRet := .t.
   endif
EndIf

Return(lRet)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlsVldBVM ºAutor  ³Microsiga           º Data ³  17/09/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funca de validacao das datas de vigencia, chamada no       º±±
±±º          ³ botao de OK da Rotina Cobertura / Co-Participacao.         º±±
±±º          ³ Tabela - BVM - Procedimento x Co-Participacao.   		  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PLS                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PlsVldBVM()
Local lRet     := .f.

If BVM->( FieldPos("BVM_VIGDE") ) > 0 .And. BVM->( FieldPos("BVM_VIGATE") ) > 0
	if ! Empty(M->BVM_VIGATE) .And. M->BVM_VIGDE > M->BVM_VIGATE
	MsgAlert("Vigência final menor que a inicial!")
   else
	lRet := .t.
   endif
EndIf

Return(lRet)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlsVldBVC ºAutor  ³Microsiga           º Data ³  17/09/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funca de validacao das datas de vigencia, chamada no       º±±
±±º          ³ botao de OK da Rotina Cobertura / Co-Participacao.         º±±
±±º          ³ Tabela - BVC - Grupos x Co-Participacao. 				  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PLS                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PlsVldBVC()
Local lRet     := .f.

If BVC->( FieldPos("BVC_VIGINI") ) > 0 .And. BVC->( FieldPos("BVC_VIGFIN") ) > 0
	if ! Empty(M->BVC_VIGFIN) .And. M->BVC_VIGINI > M->BVC_VIGFIN
	MsgAlert("Vigência final menor que a inicial!")
   else
	lRet := .t.
   endif
EndIf

Return(lRet)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlsVldBVF ºAutor  ³Microsiga           º Data ³  17/09/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funca de validacao das datas de vigencia, chamada no       º±±
±±º          ³ botao de OK da Rotina Cobertura / Co-Participacao.         º±±
±±º          ³ Tabela - BVF - Familia x Proced x Co-Part  				  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PLS                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PlsVldBVF()
Local lRet     := .f.

If BVF->( FieldPos("BVF_VIGINI") ) > 0 .And. BVF->( FieldPos("BVF_VIGFIN") ) > 0
	if ! Empty(M->BVF_VIGFIN) .And. M->BVF_VIGINI > M->BVF_VIGFIN
	MsgAlert("Vigência final menor que a inicial!")
   else
	lRet := .t.
   endif
EndIf

Return(lRet)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSQTDBVJ ºAutor  ³Microsiga           º Data ³  05/11/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Valida a quantidade quando nao existe data de vigencia     º±±
±±º          ³ Informada e nao permite quantidade duplicada.              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PLS                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PLSQTDBVJ()
Local lRet := .F.
Local nX   := 0
Local nPosIni := ""
Local nPosFin := ""
Local nQTD    := ""
Local aArea	  := GetArea()
Local nUsado  := Len(oGetBVJ:aHeader)

nPosIni := Ascan(oGetBVJ:aHeader,{|x| Alltrim(x[2])=="BVJ_VIGDE"})
nPosFin := Ascan(oGetBVJ:aHeader,{|x| Alltrim(x[2])=="BVJ_VIGATE"})
nQTD    := Ascan(oGetBVJ:aHeader,{|x| Alltrim(x[2])=="BVJ_QTD"})

For nX := 1 To Len(oGetBVJ:aCols)
	If !oGetBVJ:aCols[nX][nUsado+1]
		If nX < n
			If M->BVJ_VIGDE == CTOD(" / / ") .And. M->BVJ_VIGATE == CTOD(" / / ")
				If M->BVJ_QTD == oGetBVJ:aCols[nX][nQTD] .And. Empty(oGetBVJ:aCols[nX][nPosIni]) .And. Empty(oGetBVJ:aCols[nX][nPosFin])
					PLSVLDCOL({"BVJ_QTD"})
					Return lRet := .T.
				Endif
			Endif
		Endif
	Endif
Next nX

RestArea(aArea)

Return lRet

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSQTDBVC ºAutor  ³Microsiga           º Data ³  05/11/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Valida a quantidade quando nao existe data de vigencia     º±±
±±º          ³ Informada e nao permite quantidade duplicada.              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PLS                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PLSQTDBVC()
Local lRet := .F.
Local nX   := 0
Local nPosIni := ""
Local nPosFin := ""
Local nQTD    := ""
Local aArea	  := GetArea()
Local nUsado  := Len(oGetBVC:aHeader)

nQTD    := Ascan(oGetBVC:aHeader,{|x| Alltrim(x[2])=="BVC_QTD"})

If BVC->( FieldPos("BVC_VIGINI") ) > 0 .And. BVC->( FieldPos("BVC_VIGFIN") ) > 0
	nPosIni := Ascan(oGetBVC:aHeader,{|x| Alltrim(x[2])=="BVC_VIGINI"})
	nPosFin := Ascan(oGetBVC:aHeader,{|x| Alltrim(x[2])=="BVC_VIGFIN"})

	For nX := 1 To Len(oGetBVC:aCols)
		If !oGetBVC:aCols[nX][nUsado+1]
			If nX < n
				If M->BVC_VIGINI == CTOD(" / / ") .And. M->BVC_VIGFIN == CTOD(" / / ")
					If M->BVC_QTD == oGetBVC:aCols[nX][nQTD] .And. Empty(oGetBVC:aCols[nX][nPosIni]) .And. Empty(oGetBVC:aCols[nX][nPosFin])
						PLSVLDCOL({"BVC_QTD"})
						Return lRet := .T.
					Endif
				Endif
			Endif
		Endif
	Next nX
Else
	oGetBVC:cVldLine := 'PLSVLDCOL({"BVC_QTD"})'
	Return lRet := .T.
EndIf

RestArea(aArea)

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Pl260AnFx ºAutor  ³Microsiga           º Data ³  10/28/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Validacao da integridada das faixas etarias                º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ SIGAPLS                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Pl260AnFx()

Local lRet      := .T.
Local nIdaIni  	:= M->BDK_IDAINI // Idade Inicial que esta sendo incluida/alterada
Local nIdaFin  	:= M->BDK_IDAFIN // Idade Final que esta sendo incluida/alterada
Local dDtValid 	:= M->BDK_TABVLD // Data de validade que esta sendo incluida/alterada
Local nAcols	:= Len(oBrwBDK:aCols) // Tamanho do GetDados
Local nFor	

// A idade final da faixa nao deve ser menor que a inicial
If nIdaIni > nIdaFin
   Help("",1,"PLSANAFAI2")
   Return(.F.)
Endif

// Verifico se já existe entre a idade inicial a idade final e a data de validade
If nAcols > 1 // validação so quando tiver mais de uma faixa
    For nFor := 1 To nAcols
		// Não verificar o registro posicionado, faz a verificação com as demais linhas
		If Inclui .and. oBrwBDK:aCols[nFor,GdFieldPos('BDK_VALOR',oBrwBDK:aHeader)] == 0 // Inclusão, Se estiver zerado o valor da linha do Acols
			Loop
		ElseIf !Inclui .and. oBrwBDK:oBrowse:nat == nFor // Alteração nao verificar a linha que esta sendo alterada 
			Loop
		EndIf

		If (nIdaIni >= oBrwBDK:aCols[nFor,GdFieldPos('BDK_IDAINI',oBrwBDK:aHeader)] .and. ; 
			nIdaIni <= oBrwBDK:aCols[nFor,GdFieldPos('BDK_IDAFIN',oBrwBDK:aHeader)]) .and. ; // Idade inicial estiver no intervalo (BDK_IDAINI e BDK_IDAFIN)
			!oBrwBDK:aCols[nFor,Len(oBrwBDK:aHeader)+1] // Não Deletado
			
			If Empty(oBrwBDK:aCols[nFor,GdFieldPos('BDK_TABVLD',oBrwBDK:aHeader)]) .or. ; // Não permite se a validade do intervalo estiver em branco
				dDtValid <= oBrwBDK:aCols[nFor,GdFieldPos('BDK_TABVLD',oBrwBDK:aHeader)]  // ou se a digitada for menor ou igual
					Help("",1,"PLSANAFAI5")
					lRet := .F.
					Exit
			EndIf
		Endif

		If (nIdaFin >= oBrwBDK:aCols[nFor,GdFieldPos('BDK_IDAINI',oBrwBDK:aHeader)] .and. ;
			nIdaFin <= oBrwBDK:aCols[nFor,GdFieldPos('BDK_IDAFIN',oBrwBDK:aHeader)]).and. ; // Idade Final estiver no intervalo (BDK_IDAINI e BDK_IDAFIN)
			!oBrwBDK:aCols[nFor,Len(oBrwBDK:aHeader)+1] // Não Deletado
			
			If Empty(oBrwBDK:aCols[nFor,GdFieldPos('BDK_TABVLD',oBrwBDK:aHeader)]) .or. ; // Não permite se a validade do intervalo estiver em branco
				dDtValid <= oBrwBDK:aCols[nFor,GdFieldPos('BDK_TABVLD',oBrwBDK:aHeader)]  // ou se a digitada for menor ou igual 	
					Help("",1,"PLSANAFAI5")
					lRet := .F.
					Exit
			EndIf
		Endif	 
    Next nFor
else
   lRet := .T.
EndIf

Return (lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSINCLSU5º Autor ³Bruno Lazarini      º Data ³  17.12.10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Funcao para incluir contato (SU5).                         º±±
±±º          ³ Funcao generica, podendo ser executada em vários pontos.   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ MV_PLSCONT = .T. (Inclui o contato), .F. (Não inclui).     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºRetorno   ³ Nao ha                                                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºAplicacao ³ PLS                                                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ PLS                                                        º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºAnalista  ³Data    ³Bops  ³Manutencao Efetuada                         º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍØÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º          ³        ³      ³                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSINCLSU5( cContat, cU5Email, cMatUsu )

Processa({|| INCLSU5( cContat, cU5Email, cMatUsu ) }, 'Gravando Contatos')

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³INCLSU5   ³ Autor ³ Bruno Lazarini        ³ Data ³17.12.10  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Função de Gravação.                                        ³±±
±± Grava na tabela SU5 e AC8                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function INCLSU5( cContat, cU5Email, cMatUsu )

Local cNextCod	 := SPACE(6)
Local cAtivo	 := '1' // 1=Ativo, 2=Inativo
Local nVarPadrao := 0   // Conteudo padrão para Inclusão
Local cSQL			:= 	""

cSQL := "SELECT AC8_CODENT "
cSQL += "FROM "+RetSqlName("AC8")+" WHERE "
cSQL += "AC8_FILIAL = 	'" + xFilial("AC8") + "' AND "
cSQL += "AC8_CODENT	= 	'" + cMatUsu + "' AND "
cSQL += RetSqlName("AC8") + ".D_E_L_E_T_ = ' '"

dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"PLSAC8",.F.,.T.)

cSQL := ChangeQuery(cSQL)


If PLSAC8->(EoF())
	SU5-> (DbSetOrder(1))
	SU5-> (DBGOBOTTOM())
	cNextCod := SU5->U5_CODCONT //GetSxENum("SU5","U5_CODCONT")
	cNextCod := SOMA1(cNextCod)

	RECLOCK('AC8',.T.)
		AC8->AC8_FILIAL		:= xFilial("AC8")
		AC8->AC8_FILENT		:= xFilial("AC8")
		AC8->AC8_ENTIDAD	:= "BA1"
		AC8->AC8_CODENT		:= cMatUsu
		AC8->AC8_CODCON		:= cNextCod
	MSUNLOCK()	
	
	
	RECLOCK('SU5',.T.)
		SU5->U5_FILIAL		:= xFilial()
		SU5->U5_CODCONT		:= cNextCod
		SU5->U5_CONTAT		:= cContat
		SU5->U5_EMAIL		:= cU5Email
		SU5->U5_RENDA		:= nVarPadrao
		SU5->U5_FILHOS		:= nVarPadrao
		SU5->U5_ATIVO		:= cAtivo
		SU5->U5_PERIOD		:= nVarPadrao
		//SU5->CPF
	MSUNLOCK()

EndIf

PLSAC8->(DbCloseArea())

Return()


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³PLSVLDBYW ³ Autor ³ Microsiga             ³ Data ³10.02.11  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Validacao BYW	                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSVLDBYW()
Local lRet     := .T.
Local cDatDe   := "BYW_DATINI"
Local cDatAte  := "BYW_DATFIN"
Local aChave   := {'01',M->BYW_TIPREG,'BYW_TIPREG'}
Local aArea	   := GetArea()

If !Empty(M->BYW_DATINI) .Or. !Empty(M->BYW_DATFIN)
	lRet := PLSVLDVIG("BYW",0,oBrwBYW,cDatDe,cDatAte,aChave)
EndIf

If (lRet == .T.)
	If MsgYesNo(STR0248)//"O Cancelamento do Reajuste será contemplado para o período de competência informado na vigência cadastrada entre a Data Inicial e Data Final. Deseja confirmar?"
		lRet := .T.
	Else
		lRet := .F.
	Endif
Endif
RestArea(aArea)

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlFaixaBBYºAutor  ³Microsiga           º Data ³  09/22/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Verifica a faiza etaria da tabela BBY                      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PlFaixaBBY(nOrdem)

Local lRet:=.T.

If BBY->(FieldPos("BBY_TABVLD")) > 0
	If !PlVerFai("BBY_IDAINI","BBY_IDAFIN",nOrdem,oBrwBBY:aHeader,oBrwBBY:aCols,{"BBY_TIPUSR","BBY_GRAUPA","BBY_SEXO","BBY_TABVLD"})
		lRet:=.F.
	Endif
Endif


Return lRet




/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlFaixaBBYºAutor  ³Microsiga           º Data ³  09/22/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Verifica a faiza etaria da tabela BBY                      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PLVldLnBG0(nOrdem)

Local lRet:=.T.
Local i := 0
Local j	:=0
Local nPosQtdIni	:=aScan(oBrwBG0:aHeader,{|x| AllTrim(x[2])=="BG0_QTDDE"})
Local nPosQtdFim	:=aScan(oBrwBG0:aHeader,{|x| AllTrim(x[2])=="BG0_QTDATE"})
Local nLinhaRef		:=oBrwBG0:OBROWSE:NAT
Local nQtdeIni		:=0
Local nQtdeFim		:=999
Local nlinhaNova	:=0
Local lHaNewReg		:=.F.


If funname()='PLSA174'
	If nPosQtdIni >0
		nLinhaRef:=i
 		nQtdeIni:=M->BG0_QTDDE
		nQtdeFim:=M->BG0_QTDATE
		For j:=1 To len(oBrwBG0:aCols)
			If oBrwBG0:aCols[j,nPosQtdIni]=0 .And. oBrwBG0:aCols[j,nPosQtdFim]=999
				 If oBrwBG0:aCols[j,nPosQtdIni] =  nQtdeIni .And.  oBrwBG0:aCols[j,nPosQtdFim] = nQtdeFim
					nlinhaNova=j
					lHaNewReg:=.F.
				 Else
					nlinhaNova=j
					lHaNewReg:=.T.
				 Endif
				 exit
			ElseIf oBrwBG0:aCols[j,nPosQtdIni] =  nQtdeIni .And.  oBrwBG0:aCols[j,nPosQtdFim] = nQtdeFim
				nlinhaNova=j
				lHaNewReg:=.F.
				exit
			Else
				nlinhaNova=0
				lHaNewReg:=.T.
				exit
			Endif
		Next j


		For j:=1 To len(oBrwBG0:aCols)
			If oBrwBG0:aCols[j,nPosQtdIni]<= nQtdeIni .And. nQtdeFim <=oBrwBG0:aCols[j,nPosQtdFim]  .And. j<>nlinhaNova .And. !oBrwBG0:aCols[j,len(oBrwBG0:aCols[j])] .And. !lHaNewReg //entre
				MsgStop("Quantidade já existe")
			  	lRet:=.F.
			ElseIf oBrwBG0:aCols[j,nPosQtdIni]>= nQtdeIni .And. nQtdeFim >=oBrwBG0:aCols[j,nPosQtdFim]  .And. j<>nlinhaNova .And.!oBrwBG0:aCols[j,len(oBrwBG0:aCols[j])] .And. !lHaNewReg //qtd Ini Dig e menor que a qtde Inicial do acols Ini e qtd Fim Dig  maior que a do acols Fim
				MsgStop("Quantidade já existe")
			  	lRet:=.F.
			ElseIf oBrwBG0:aCols[j,nPosQtdIni]>= nQtdeIni .And. nQtdeFim <= oBrwBG0:aCols[j,nPosQtdFim] .And. nQtdeFim>=oBrwBG0:aCols[j,nPosQtdIni]  .And. j<>nlinhaNova .And. !oBrwBG0:aCols[j,len(oBrwBG0:aCols[j])] .And. !lHaNewReg //antes qtde ini e antes qte fim
				MsgStop("Quantidade já existe")
			  	lRet:=.F.
			ElseIf oBrwBG0:aCols[j,nPosQtdIni]>= nQtdeIni .And. nQtdeFim >= oBrwBG0:aCols[j,nPosQtdFim] .And. j<>nlinhaNova .And. !oBrwBG0:aCols[j,len(oBrwBG0:aCols[j])].And. !lHaNewReg
				MsgStop("Quantidade já existe")
			  	lRet:=.F.
			ElseIf oBrwBG0:aCols[j,nPosQtdFim]>= nQtdeIni	.And. j<>nlinhaNova .And. !oBrwBG0:aCols[j,len(oBrwBG0:aCols[j])].And. lHaNewReg
				MsgStop("Quantidade já existe")
			  	lRet:=.F.
			Endif
		Next j
	Endif
Endif


Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260SALD ºAutor  ³Diogo Ximenes       º Data ³  01/01/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Realiza a transferencia de saldo entre os beneficiarios.    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260SALD()

Local aArea 	:= BA1->(GetArea())
Local nValAnt	:= 0
Local cDepois	:= ""
Local cAnt		:= ""
Local lAlt		:= .T.
Local cMesFat	:= ""
Local cAnoFat	:= ""
Local cMes		:= StrZero(Month(dDataBase),2)
Local cAno		:= StrZero(Year(dDataBase),4)

Local aParam1		:= {}
Local aDvFunc		:= {}
Local aDvFuncPara	:= {}
Local aDvFuncDe	:= {}
Local aDvFuncAux	:= {}
Local aAreaBA3	:= BA3->(GetArea())

cChaveBA3 := BA3->(BA3_CODCLI+BA3_LOJA)
BA3->(DbCloseArea())
DbSelectArea("BA3")
BA3->(DbSetOrder(3))//BA3_FILIAL, BA3_CODCLI, BA3_LOJA, BA3_CODINT, BA3_CODEMP, BA3_MATRIC, BA3_CONEMP, BA3_VERCON, BA3_SUBCON, BA3_VERSUB, R_E_C_N_O_, D_E_L_E_T_
BA3->(MsSeek(xFilial("BA3")+cChaveBA3))
//verifica se pode parcelar
While	BA3->( !Eof() )						.AND.;
		BA3->BA3_FILIAL == xFilial("BA3")	.AND.;
  		BA3->(BA3_CODCLI+BA3_LOJA)	== cChaveBA3
	DbSelectArea("BK2")
    BK2->(DbSetOrder(2))
    // Verifico se ha registro de bk2 nao parcelado para ver qual o mes/ano
    If 	BK2->(MsSeek(xFilial("BK2")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)))
	    While	BK2->( !Eof() )						.AND.;
				BK2->BK2_FILIAL == xFilial("BA3")	.AND.;
	   			BK2->BK2_CODINT == BA3->BA3_CODINT	.AND.;
	   	   		BK2->BK2_CODEMP == BA3->BA3_CODEMP	.AND.;
	  	   		BK2->BK2_MATRIC == BA3->BA3_MATRIC

			If BK2->BK2_PARCEL	<> 	'S' .And. AllTrim(BK2->BK2_PLNUCO) == ''
				cAnoFat := BK2->BK2_ANO
				cMesFat := BK2->BK2_MES
				Exit
			EndIf
			BK2->(DBSkip())
		EndDo
	EndIf
	If !Empty(cAnoFat) .And. !Empty(cMesFat)
		Exit
	EndIf
	BA3->(DBSkip())
EndDo

RestArea(aAreaBA3)
DbSelectArea("BA3")
BA3->(DbSetOrder(3))//BA3_FILIAL, BA3_CODCLI, BA3_LOJA, BA3_CODINT, BA3_CODEMP, BA3_MATRIC, BA3_CONEMP, BA3_VERCON, BA3_SUBCON, BA3_VERSUB, R_E_C_N_O_, D_E_L_E_T_
BA3->(MsSeek(xFilial("BA3")+cChaveBA3))
While	BA3->( !Eof() )						.AND.;
		BA3->BA3_FILIAL == xFilial("BA3")	.AND.;
  		BA3->(BA3_CODCLI+BA3_LOJA)	== cChaveBA3
	// Seleciona o usuario para transferir o saldo
	DbSelectArea("BA1")
	BA1->(DbSetOrder(2))
	If BA1->( MsSeek(xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)) )
		// Caso tenha mes/ano em aberto, permito o parcelamento
		If !Empty(cAnoFat) .And. !Empty(cMesFat)
			While	BA1->( !Eof() )						.AND.;
					BA1->BA1_FILIAL == xFilial("BA1")	.AND.;
					BA1->BA1_CODINT == BA3->BA3_CODINT	.AND.;
			   		BA1->BA1_CODEMP == BA3->BA3_CODEMP	.AND.;
			  		BA1->BA1_MATRIC == BA3->BA3_MATRIC
		            // Somente pessoas juridicas
		            If !Empty(BA1->BA1_CONEMP)
			            DbSelectArea("BK2")
						cValor := TransForm(Posicione("BK2",6,xFilial("BK2")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+BA1->BA1_TIPREG+cAnoFat+cMesFat,"BK2->BK2_SALDO"),"@E 99,999.99")
						If Val(cValor) > 0
							AaDd(aDvFunc,"R$ "+cValor +" - "+"("+BA1->BA1_CODEMP+"/"+BA1->BA1_MATRIC+"/"+BA1->BA1_TIPREG+")"+Capital(AllTrim(BA1->BA1_NOMUSR)))
							AaDd(aDvFuncDe,{BA1->(BA1_MATRIC+BA1_TIPREG),BK2->BK2_SALDO})
						EndIf
						AaDd(aDvFuncPara,"R$ "+cValor +" - "+"("+BA1->BA1_CODEMP+"/"+BA1->BA1_MATRIC+"/"+BA1->BA1_TIPREG+")"+Capital(AllTrim(BA1->BA1_NOMUSR)))
						AaDd(aDvFuncAux,{BA1->(BA1_MATRIC+BA1_TIPREG),BK2->BK2_SALDO})
					EndIf
					BA1->(DBSkip())
			EndDo
		EndIf
	EndIf
	BA3->(DBSkip())
EndDo
RestArea(aAreaBA3)

If Len(aDvFunc) == 0
	MsgAlert(STR0207) // Não há dados para selecionar
	RestArea(aArea)
	Return(.T.)
Else
	If	ParamBox( {	{ 3 , "Origem" , 1 , aDvFunc ,120,"",.F.}} ,OemtoAnsi(STR0236),@aParam1,,,.T.,,)   //"Rotina" //"Trânsferir do usuário: "
		cAnt 	:= aDvFuncDe[aParam1[01],01]
		nValAnt	:= aDvFuncDe[aParam1[01],02]
	Else
		RestArea(aArea)
		Return(.T.)
	EndIf
EndIf

If	ParamBox( {	{ 3 , "Destino" , 1 , aDvFuncPara ,120,"",.F.}} ,OemtoAnsi(STR0237),@aParam1,,,.T.,,) //"Rotina" //"Trânsferir para o usuário: "
	cDepois := aDvFuncAux[aParam1[01],01]
Else
	RestArea(aArea)
	Return(.T.)
EndIf

Begin Transaction
	// Deixo o saldo anterior com o valor zerado
	BK2->(DbSetOrder(6))
	If BK2->(MsSeek(xFilial("BK2")+BA3->(BA3_CODINT+BA3_CODEMP)+cAnt+cAnoFat+cMesFat))
		B78->(RecLock("B78",.T.))
	    	// Gero o historico deste lancamento
	    	B78->B78_FILIAL	:= 	xFilial("B78")
	    	B78->B78_CODINT	:=	BK2->BK2_CODINT
	    	B78->B78_CODEMP	:=	BK2->BK2_CODEMP
	    	B78->B78_MATRIC	:=	BK2->BK2_MATRIC
	    	B78->B78_TIPREG	:=	BK2->BK2_TIPREG
	    	B78->B78_MESBAS	:=	cMes
			B78->B78_ANOBAS	:=	cAno
			B78->B78_TIPOPE	:= 	"3"
			B78->B78_STATUS	:= 	"1"
			B78->B78_VLRTSA	:= 	nValAnt
			B78->B78_VALACU	:= 	0
		B78->(MsUnlock())
		BK2->(RecLock("BK2"),.F.)
			BK2->BK2_SALDO := 0
		BK2->(MsUnlock())
	Else
		lAlt := .F.
	EndIf

	// Contabilizo no usuario selecionado
	BK2->(DbSetOrder(6))
	If BK2->(MsSeek(xFilial("BK2")+BA3->(BA3_CODINT+BA3_CODEMP)+cDepois+cAnoFat+cMesFat)) .And. lAlt
		B78->(RecLock("B78",.T.))
	    	// Gero o historico deste lancamento
	    	B78->B78_FILIAL	:= 	xFilial("B78")
	    	B78->B78_CODINT	:=	BK2->BK2_CODINT
	    	B78->B78_CODEMP	:=	BK2->BK2_CODEMP
	    	B78->B78_MATRIC	:=	BK2->BK2_MATRIC
	    	B78->B78_TIPREG	:=	BK2->BK2_TIPREG
	    	B78->B78_MESBAS	:=	cMes
			B78->B78_ANOBAS	:=	cAno
			B78->B78_TIPOPE	:= 	"3"
			B78->B78_STATUS	:= 	"2"
			B78->B78_VLRTSA	:= 	nValAnt
			B78->B78_VALACU	:= 	BK2->BK2_SALDO+nValAnt
		B78->(MsUnlock())
		BK2->(RecLock("BK2"),.F.)
			BK2->BK2_SALDO := BK2->BK2_SALDO+nValAnt
		BK2->(MsUnlock())
	ElseIf lAlt
		BA1->(DbSetOrder(2))// BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO
		If( BA1->(MsSeek(xFilial("BA1")+BA3->(BA3_CODINT+BA3_CODEMP)+cDepois)) )
			B78->(RecLock("B78",.T.))
	    		// Gero o historico deste lancamento
	    		B78->B78_FILIAL	:= 	xFilial("B78")
		    	B78->B78_CODINT	:=	BA1->BA1_CODINT
		    	B78->B78_CODEMP	:=	BA1->BA1_CODEMP
		    	B78->B78_MATRIC	:=	BA1->BA1_MATRIC
		    	B78->B78_TIPREG	:=	BA1->BA1_TIPREG
		    	B78->B78_MESBAS	:=	cMes
				B78->B78_ANOBAS	:=	cAno
				B78->B78_TIPOPE	:= 	"3"
				B78->B78_STATUS	:= 	"2"
				B78->B78_VLRTSA	:= 	nValAnt
				B78->B78_VALACU	:= 	nValAnt
			B78->(MsUnlock())
			BK2->(RecLock("BK2",.T.))
				BK2->BK2_FILIAL := xFilial("BK2")
				BK2->BK2_CODINT := BA1->BA1_CODINT
				BK2->BK2_CODEMP := BA1->BA1_CODEMP
				BK2->BK2_MATRIC := BA1->BA1_MATRIC
				BK2->BK2_TIPREG := BA1->BA1_TIPREG
				BK2->BK2_DIGITO := BA1->BA1_DIGITO
				BK2->BK2_ANO    := cAnoFat
				BK2->BK2_MES    := cMesFat
				BK2->BK2_SALDO  := nValAnt
				BK2->BK2_SALDO2 := 0
				BK2->BK2_PROPRI := "1"
				BK2->BK2_CODLAN := "01"
				BK2->BK2_DATREA	:= dDataBase
			BK2->(MsUnlock())
		Else
			lAlt := .F.
		EndIf
	EndIf

	If !lAlt
		DisarmTransaction()
	EndIf

End Transaction

If !lAlt
	MsgAlert(STR0192) // Houve um problema para realizar a alteração!
Else
	MsgAlert(STR0195) // Alterado com sucesso!
EndIf

RefB78()

RestArea(aArea)
Return(.T.)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260ABASAºAutor  ³Diogo Ximenes       º Data ³  01/01/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Emite titulo de abatimento sobre o saldo					  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PL260ABASA()
Local cNumero
Local cPrefixo		:= 	GetNewPar("MV_PLPREE1","PLS")
Local cTipTit 		:= 	SuperGetMv("MV_PLSTIP", .F., "DP ")
Local cNatureza		:= 	SuperGetMv("MV_PLSNAT", .F., "PLS")

Local aBK2			:= {}
Local aCpoSE1 		:= {}
Local aDadB78 		:= {}
Local aBases  		:= {0,0,0,0,0,0}

Local lRet      	:= 	.f.
Local lContabiliza 	:= 	.F.
Local lNcc			:=	.F.
local lErro         := .f.

Local oSaldo   		:= 	Nil
Local oVlrRea		:=	Nil
Local oVlrTot		:=	Nil
Local oMesRef		:= 	Nil
Local oAnoRef		:= 	Nil
Local oValor		:= 	Nil

Local nCntFor		:= 0
Local nSaldo   		:= 	0
Local nValSal   	:= 	0
Local nVlrRea		:= 	0
Local nVlrTot		:= 	0
Local nValTot		:= 	0
Local nFor			:= 	0
Local nValor		:= 	0
Local nVlrReaAux	:=	0
Local nTotVal		:= 	0

Local cMesBK2		:= 	""
Local cAnoBK2		:= 	""
Local cTipo			:= 	""
Local cSQL			:= 	""
Local cAno			:= StrZero(Year(dDataBase),4)
Local cMes			:= StrZero(Month(dDataBase),2)
Local nSalario		:= RetSalPar( cAno, cMes )

Local MV_PAR05Aux	:= MV_PAR05
Local MV_PAR06Aux	:= MV_PAR06

Private MV_PAR05	:= ""
Private MV_PAR06	:= ""

cSQL := "SELECT BK2_CODINT,   BK2_CODEMP,   BK2_MATRIC,   BK2_TIPREG,   BK2_DIGITO,   BK2_MES, BK2_ANO,   BK2_DATREA,   BK2_SALDO"
cSQL += "FROM "+RetSqlName("BK2")+" WHERE "
cSQL += "BK2_FILIAL = 	'"+xFilial("BK2")+"' AND "
cSQL += "BK2_CODINT = 	'"+BA3->BA3_CODINT+"' AND "
cSQL += "BK2_CODEMP = 	'"+BA3->BA3_CODEMP+"' AND "
cSQL += "BK2_MATRIC = 	'"+BA3->BA3_MATRIC+"' AND "
cSQL += "BK2_PARCEL	<> 	'S' AND " // Diferente de parcelado
cSQL += "BK2_NUMTIT	<> 	' ' AND " // Diferente de parcelado
cSQL += "(BK2_SALDO	> 0 OR BK2_SALDO2	> 0) AND "
cSQL += "D_E_L_E_T_ = ' '"

cSQL := ChangeQuery(cSQL)
dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"PLSBUSBK2",.F.,.T.)

PLSBUSBK2->(DBEval({ | | nTotVal += PLSBUSBK2->BK2_SALDO , cMesBK2	:= 	PLSBUSBK2->BK2_MES, cAnoBK2:= 	PLSBUSBK2->BK2_ANO} ))//Busco o valor total da familia
PLSBUSBK2->(DbGoTop())

If nTotVal <= 0
	MsgAlert(STR0207) // Não há dadso para selecionar
	PLSBUSBK2->(DbCloseArea())
	Return(.T.)
EndIf


dDataAux	:= StoD(cAnoBK2+cMesBK2+"01") - 1
cMesAmo		:= StrZero(Month(dDataAux),2)
cAnoAmo     := StrZero(Year(dDataAux),4)

DbSelectArea("BA1")

While !PLSBUSBK2->(EoF())

	BA1->(DbSetOrder(2))//BA1_FILIAL, BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, BA1_DIGITO
	If BA1->(MsSeek(xFilial("BA1")+PLSBUSBK2->(BK2_CODINT+BK2_CODEMP+BK2_MATRIC+BK2_TIPREG+BK2_DIGITO)))

		nPerPar := 0
		nVlrPar := 0
		nQtsMes := 0

		DbSelectArea("B81")
 		If B81->(MsSeek(xFilial("B81")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_CONEMP+BA1_VERCON+BA1_SUBCON+BA1_VERSUB)))
        	While 	!B81->(EoF()) .And.;
        			xFilial("B81")+BA1->(BA1_CODINT+BA1_CODEMP+BA1_CONEMP+BA1_VERCON+BA1_SUBCON+BA1_VERSUB) ==;
        			B81->(B81_FILIAL+B81_CODINT+B81_CODEMP+B81_CONEMP+B81_VERCON+B81_SUBCON+B81_VERSUB)

  		    	If dDataBase >= B81->B81_VIGPA .And. (dDataBase <= B81_VIGFIM .Or. Empty(B81_VIGFIM))
  		        	nPerPar := B81->B81_PERPAR
  		        	nVlrPar := B81->B81_VLRPAR
  		        	nQtsMes := B81->B81_QTSMES
  		        	Exit
  		    	EndIf
  				B81->(DbSkip())
  			EndDo
  		EndIf

		nSaldo 		+= 	PLSBUSBK2->BK2_SALDO
		dDataAnt	:=	StoD(PLSBUSBK2->BK2_DATREA)
		// Caso nao tenha data do ultimo reajuste considero 30 dias atras
		dDataAnt 	:= Iif( EmPty(dDataAnt), DaySub(dDataBase,30), dDataAnt )

		MV_PAR05	:= StrZero(Month(dDataBase),2)
		MV_PAR06	:= StrZero(Year(dDataBase),4)

		// Calculo o valor do reajuste
		CalJurSa(	0,		   			PLSBUSBK2->BK2_SALDO,  		PLSBUSBK2->BK2_SALDO,		@nVlrReaAux,;
					nTotVal,			nSalario,  					nPerPar,					nVlrPar,;
					B81->B81_QTSMES,	dDataAnt,	   				BA1->BA1_TREGRA,   			0,;
					BA1->BA1_VLRFIX,	BA1->BA1_ANOLIQ,			BA1->BA1_MESLIQ)


		nVlrRea		+= 	nVlrReaAux
		nVlrReaAux	:= 	0

		MV_PAR05	:= MV_PAR05Aux
		MV_PAR06	:= MV_PAR06Aux

	EndIf

	PLSBUSBK2->(DbSkip())

EndDo

PLSBUSBK2->(DbCloseArea())

nVlrTot	:= 	nSaldo+nVlrRea

DEFINE MSDIALOG oDlg FROM 0,0 To 260,500 TITLE STR0198 PIXEL  //"Abatimento de saldo"

@ 015,015		SAY 	STR0199 	   					SIZE 060,009 OF oDlg PIXEL // "Saldo"
@ 015,060		MSGET 	oSaldo 							Var nSaldo SIZE  050,010 OF oDlg PIXEL;
				PICTURE "@E 99,999,999.99"				WHEN 	.F. ;

@ 015,140		SAY 	STR0200							SIZE 060,009 OF oDlg PIXEL // "Vlr. Reajuste"
@ 015,185		MSGET 	oVlrRea 							Var nVlrRea SIZE  050,010 OF oDlg PIXEL;
				PICTURE "@E 99,999,999.99"				WHEN 	.T. ;
				Valid 	nVlrRea>=0 .AND. (nVlrTot := nSaldo + nVlrRea)// Atualizo o saldo

@ 035,015		SAY 	STR0201		 					SIZE 060,009 OF oDlg PIXEL // "Valor total"
@ 035,060		MSGET 	oVlrTot  	   					Var nVlrTot SIZE  050,010 OF oDlg PIXEL;
				PICTURE "@E 99,999,999.99"				WHEN 	.F. ;

@ 052,015		SAY 	STR0202			 				SIZE 060,009 OF oDlg PIXEL // "Mês referência"
@ 052,060		MSGET 	oMesRef  	   					Var cMesBK2 SIZE  010,010 OF oDlg PIXEL;
				WHEN 	.F. ;

@ 052,140		SAY 	STR0208			 				SIZE 060,009 OF oDlg PIXEL // "Ano referência"
@ 052,185		MSGET 	oAnoRef  						Var cAnoBK2 SIZE  015,010 OF oDlg PIXEL;
				WHEN 	.F. ;

@ 072,015		SAY 	STR0203 						SIZE 060,009 OF oDlg PIXEL // "Valor"
@ 072,060		MSGET 	oValor  						Var nValor SIZE  050,010 OF oDlg PIXEL;
				PICTURE "@E 99,999,999.99" 				WHEN 	.T. ;
				Valid 	nValor>=0 .AND. nValor <= nVlrTot

@ 072,140		SAY 	STR0204	 	   					SIZE 060,009 OF oDlg PIXEL // "Tipo"
@ 072,185 	COMBOBOX cTipo 	ITEMS 	{STR0205,STR0206}	WHEN .T.	SIZE 050,010 PIXEL OF oDlg // "Pagar" // "Receber"

DEFINE SBUTTON FROM 102,065 TYPE 1 ACTION (nOpcA := 1,oDlg:End()) ENABLE OF oDlg
DEFINE SBUTTON FROM 102,165 TYPE 2 ACTION (nOpcA := 0,oDlg:End()) ENABLE OF oDlg

ACTIVATE MSDIALOG oDlg CENTERED

If nOpcA == 0
	Return(.T.)
EndIf

If nValor == 0
    MsgAlert(STR0209) // "Preencha o valor!"
	Return(.F.)
EndIf

lNCC := ( cTipo == STR0206 )

//Posiciona na operadora origem para pegar o cliente...               
aRet := PLSRETNCB(BA3->BA3_CODINT,BA3->BA3_CODEMP,BA3->BA3_MATRIC,BA3->BA3_CODINT)

If Len(aRet) > 0 .and. aRet[1]

   	cNumero := PLSE1NUM(cPrefixo)

   	aadd(aCpoSE1, {"E1_PREFIXO", cPrefixo, nil } )
   	aadd(aCpoSE1, {'E1_SERIE', cPrefixo, nil } )
   	aadd(aCpoSE1, {"E1_NUM", cNumero, nil } )
   	aadd(aCpoSE1, {'E1_PARCELA', '', nil } )
   	aadd(aCpoSE1, {"E1_TIPO", Iif( lNCC, "NCC", cTipTit), nil } )
   	aadd(aCpoSE1, {"E1_NATUREZ", cNatureza, nil } )
   	aadd(aCpoSE1, {"E1_CLIENTE", aRet[2], nil } )
   	aadd(aCpoSE1, {"E1_LOJA", aRet[3], nil } )
   	aadd(aCpoSE1, {'E1_NUMBCO', "", nil } )
   	aadd(aCpoSE1, {'E1_PLNUCOB', "", nil } )
   	aadd(aCpoSE1, {'E1_ORIGEM', "PLSA260", nil } )
   	aadd(aCpoSE1, {"E1_VENCTO", dDataBase, nil } )
   	aadd(aCpoSE1, {"E1_VENCREA", DataValida(dDataBase), nil } )
   	aadd(aCpoSE1, {"E1_EMISSAO", dDataBase, nil } )
   	aadd(aCpoSE1, {"E1_VALOR", nValor, nil } )
   	aadd(aCpoSE1, {"E1_SALDO", nValor, nil } )
   	aadd(aCpoSE1, {'E1_ROTINA', "FINA040", nil } )
   	aadd(aCpoSE1, {"E1_MULTNAT", "2", nil } )

	aadd(aCpoSE1, {'E1_CODINT', BA3->BA3_CODINT, nil } )
   	aadd(aCpoSE1, {'E1_CODEMP', BA3->BA3_CODEMP, nil } )
	aadd(aCpoSE1, {'E1_MATRIC', BA3->BA3_MATRIC, nil} )
   	aadd(aCpoSE1, {'E1_CODCOR', BA3->BA3_CODVEN, nil } )

   	aadd(aCpoSE1, {"E1_ANOBASE"  , cAno, nil } )
   	aadd(aCpoSE1, {"E1_MESBASE"  , cMes, nil } )
   
    // Incia a geracao do titulo e baixa do saldo
   	Begin Transaction

   		// Gera o titulo
   		lErro := PLStoSe1(aCpoSE1, aBases, cMes, cAno, "PLSMPAG", lContabiliza,,, cPrefixo, cNumero,, lNCC)

        if ! lErro
            // Abatimento de saldo
            DbSelectArea("BK2")
            BK2->(DbSetOrder(2))
            
            If 	BK2->(MsSeek(xFilial("BK2")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cAnoBK2+cMesBK2))

                While !BK2->(EoF()) .And. 	BK2->(BK2_FILIAL+BK2_CODINT+BK2_CODEMP+BK2_MATRIC+BK2_ANO+BK2_MES) ==;
                                            xFilial("BK2")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)+cAnoBK2+cMesBK2

                    AaDd(aBK2,{BK2->(BK2_FILIAL+BK2_CODINT+BK2_CODEMP+BK2_MATRIC+BK2_TIPREG+BK2_DIGITO+BK2_TIPLAN+BK2_CODLAN+BK2_ANO+BK2_MES),BK2->BK2_SALDO})
                    nValTot += BK2->BK2_SALDO

                    BK2->(DbSkip())

                EndDo

            EndIf

            nValTotAcu := 0
            DbSelectArea("B78")
            BK2->(DbSetOrder(1))//BK2_FILIAL, BK2_CODINT, BK2_CODEMP, BK2_MATRIC, BK2_TIPREG, BK2_DIGITO, BK2_TIPLAN, BK2_CODLAN, BK2_ANO, BK2_MES
            
            For nFor := 1 To Len(aBK2)

                If 	BK2->(MsSeek(aBK2[nFor,01]))
            
                    // Reduzo o saldo aplicando a proporcionalidade e adicionando o reajuste
                    If lNcc
                        nValSal	:= NOROUND(BK2->BK2_SALDO + (nValor * (aBK2[nFor,02]/nValTot)) + (nVlrRea * (aBK2[nFor,02]/nValTot)),2)
                    Else
                        nValSal	:= NOROUND(BK2->BK2_SALDO - (nValor * (aBK2[nFor,02]/nValTot)) + (nVlrRea * (aBK2[nFor,02]/nValTot)),2)
                    EndIf

                    nValTotAcu+=nValSal
                    
                    BK2->(RecLock("BK2",.F.))
                        BK2->BK2_SALDO 	:= If(nValSal >= BK2->BK2_SALDO,0,nValSal)//If(nValor >= BK2->BK2_SALDO,0,nValTotAcu)
                        BK2->BK2_DATREA	:= dDataBase
                    BK2->(MsUnlock())
                    
                    If  nFor == Len(aBK2)
                        
                        nArred := (nValTot-nValor) - nValTotAcu
                        If nArred >= 0
                            BK2->(RecLock("BK2",.F.))
                            BK2->BK2_SALDO 	+=  nArred
                            BK2->(MsUnlock())
                        Endif 
                        
                        nValTotAcu += nArred

                        B78->(RecLock("B78",.T.))
                        
                            // Gero o historico deste lancamento
                            B78->B78_FILIAL	:= 	xFilial("B78")
                            B78->B78_CODINT	:=	BK2->BK2_CODINT
                            B78->B78_CODEMP	:=	BK2->BK2_CODEMP
                            B78->B78_MATRIC	:=	BK2->BK2_MATRIC
                            B78->B78_TIPREG	:=	BK2->BK2_TIPREG
                            B78->B78_MESBAS	:=	cMesBK2
                            B78->B78_ANOBAS	:=	cAnoBK2
                            B78->B78_TIPOPE	:= 	Iif(lNcc,"4","2")
                            B78->B78_PREFIX	:= 	cPrefixo
                            B78->B78_NUM 	:= 	cNumero
                            B78->B78_PARCEL	:= 	''
                            B78->B78_TIPO 	:= 	Iif(lNcc,"NCC",cTipTit)
                            B78->B78_VALOR 	:= 	nValor //* (aBK2[nFor,02]/nValTot)
                            B78->B78_VALACU	:= 	nValTotAcu 
                            B78->B78_VALREA	:=	nVlrRea
                            
                            B78->(MsUnlock())

                    Endif

                EndIf

            Next nFor

        endIf

    End Transaction
    
    if ! lErro
        lRet := .T.
        MsgAlert(STR0196) //"Processamento realizado com sucesso!"
    endIf

	oBrwB78:Refresh()

Else
	MsgAlert(STR0197) //"Não encaontrado o nível de cobrança da família!"
	lRet := .F.
Endif

RefB78()

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³RefB78    ºAutor  ³Diogo Ximenes       º Data ³ 01/01/11    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Atualiza o browser de historico..							  º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function RefB78()

Local nX 		:= 0
Local nCntFor 	:= 0

cQuery 		:= ""

lQuery := .T.
cAliasB78 := "QRYB78"

cQuery := "SELECT B78.* "
cQuery += " FROM "
cQuery += RetSqlName("B78")+ " B78 "
cQuery += " WHERE "
cQuery += "B78_FILIAL = '"+xFilial("B78")+"' AND "
cQuery += "B78_CODINT = '"+BA3->BA3_CODINT+"' AND "
cQuery += "B78_CODEMP = '"+BA3->BA3_CODEMP+"' AND "
cQuery += "B78_MATRIC = '"+BA3->BA3_MATRIC+"' AND "
cQuery += "B78.D_E_L_E_T_ = ' ' "

cQuery := ChangeQuery(cQuery)
dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasB78,.F.,.T.)

For nCntFor := 1 To Len(aStruB78)
	If ( aStruB78[nCntFor,2]<>"C" )
		TcSetField(cAliasB78,aStruB78[nCntFor,1],aStruB78[nCntFor,2],aStruB78[nCntFor,3],aStruB78[nCntFor,4])
	EndIf
Next nCntFor

aDadB78 := {}

While !Eof()

	Aadd(aDadB78,Array(Len(aCabB78)+1))

	B78->(MsGoto((cAliasB78)->R_E_C_N_O_))

	For nX := 1 To Len(aCabB78)
		If ( aCabB78[nX,10] !=  "V" )
			aDadB78[Len(aDadB78)][nX] := (cAliasB78)->(FieldGet(FieldPos(aCabB78[nX,2])))
		Else
			aDadB78[Len(aDadB78)][nX] := CriaVar(aCabB78[nX,2],.T.)
		EndIf
	Next nX
	aDadB78[Len(aDadB78)][Len(aCabB78)+1] := .F.

	Aadd(aTrbB78, (cAliasB78)->R_E_C_N_O_ )

	dbSelectArea(cAliasB78)
	dbSkip()
EndDo

B78->(MsGoto(0))

oBrwB78:aCols := aClone(aDadB78)
oBrwB78:oBrowse:oBrowse:nAt := 1

(cAliasB78)->(dbCloseArea())
dbSelectArea("B78")

oBrwB78:ForceRefresh()

Return(.T.)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A260REPVEN³ Autor ³ Victor Ferreira    º Data ³ 18/01/2013  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica se as informacoes do vendedor devem    º±±
±±º          ³ ser replicadas para o nivel do usuario                     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Familia/Usuario                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A260REPVEN()
Local nX

For nX := 1 To Len(oBrwUsr:aCols)
	If oBrwUsr:FieldPos("BA1_CODVE2") <> 0  .And. BA3->(FieldPos("BA3_CODVE2")) <> 0
		oBrwUsr:aCols[nX,oBrwUsr:FieldPos("BA1_CODVE2",oBrwUsr:aHeader)] := M->BA3_CODVE2
	EndIf
	oBrwUsr:aCols[nX,oBrwUsr:FieldPos("BA1_CODVEN",oBrwUsr:aHeader)] := M->BA3_CODVEN
	oBrwUsr:aCols[nX,oBrwUsr:FieldPos("BA1_EQUIPE",oBrwUsr:aHeader)] := M->BA3_EQUIPE
Next nX

Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLS260NvDt³ Autor ³ Totvs				 º Data ³ 18/03/2013  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica a data base do BF4 em duplicidade	  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Familia/Usuario                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLS260NvDt

Local lRet		:= .T.
Local dDatNov	:= ReadVar()
Local nX		:= 0
Local nPos		:= 0
Local nPosCod	:= 0
Local nPosDat	:= 0

If Type("oBrwOUsu:aHeader") == "A"
	nPosDat := AScan(oBrwOUsu:aHeader,{|x| x[2] == "BF4_DATBLO"})
	nPosCod := AScan(oBrwOUsu:aHeader,{|x| x[2] == "BF4_CODPRO"})
	If Type("oBrwOUsu:aCols") == "A"
		For nX := 1 To Len(oBrwOUsu:aCols)
			If (!oBrwOUsu:aCols[nX][Len(oBrwOUsu:aCols[nX])]) .And. oBrwOUsu:aCols[nX][nPosCod] == M->BF4_CODPRO .And. (nPos == 0 .Or. oBrwOUsu:aCols[nX][nPosDat] >= oBrwOUsu:aCols[nPos][nPosDat])
				nPos := nX
			EndIf
		Next
	EndIF
EndIf

If oBrwOUsu:aCols[nPos][nPosDat] >= &dDatNov
	MsgAlert(OemtoAnsi(STR0246))//"A nova data base deve ser maior que a antiga data de bloqueio!"
	lRet := .F.
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260CKSeq³ Autor ³ Totvs				 º Data ³ 19/03/2013  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica a sequencia do itens do aCols		  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Familia/Usuario                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260CKSeq(xaCols, aCamp, aValores, nPos)

Local lRet := .F.
Local nX

For nX := nPos+1 To Len(xaCols)

	If CompCols(xaCols[nX],aCamp,aValores) .And. Empty(xaCols[nX][AScan(oBrwOUsu:aHeader,{|x| x[2] == "BF4_DATBLO"})])
		lRet := .T.
    EndIf
Next

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Plsa260Esp ºAutor  ³Saude          º Data ³  02/26/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Realiza o espelhamento entre as tabela GBH e BTS           º±±
±±º          ³ em qualquer uma das tabelas que for dada manutençao        º±±
±±º          ³ a informação será replicada para outra tabela.	          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ SEGMENTO SAUDE                                             º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Plsa260Esp(cMatvid)
Local lEspelhar:=GetNewPar("MV_INTBTGB",.F.)
Local aArea    := GetArea()
Local cEmpTrab	:= GetNewPar("MV_EMPRPLS", " ")	// Pega a empresa de trabalho do PLS

If lEspelhar
	DbSelectarea ("BA1")
	BA1->(DbSetOrder(7))
	If BA1->(MsSeek(xFilial("BA1")+cMatvid))

		DbSelectarea ("GBH")
		GBH->(DbSetOrder(8))
		If  GBH->(MsSeek(xFilial("GBH")+cMatvid))
			REGTOMEMORY("BA1")

			DbSelectarea ("BBL")
			BBL->(DbSetOrder(2))
			If 	BBL->(MsSeek(xFilial("BBL")+"PLSA260   "+"BA1"+"GBH"))

				GBH->(RecLock("GBH", .F.))

				Do Case
					Case BA1->BA1_SEXO  == "1"
						GBH->GBH_SEXO:="0"
					Case BA1->BA1_SEXO == "2"
						GBH->GBH_SEXO:= "1"
				EndCase

				Do Case
					Case BA1->BA1_ESTCIV  == "C"
						GBH->GBH_ESTCIV :="0"
					Case BA1->BA1_ESTCIV == "S"
						GBH->GBH_ESTCIV:= "1"
					Case  BA1->BA1_ESTCIV== "D"
						GBH->GBh_ESTCIV:= "2"
					Case  BA1->BA1_ESTCIV== "M"
						GBH->GBH_ESTCIV:= "3"
					Case  BA1->BA1_ESTCIV== "V"
						GBH->GBH_ESTCIV:= "4"

				EndCase
				aRetCli :=PLSAVERNIV(BA3->BA3_CODINT, BA3->BA3_CODEMP, BA3->BA3_MATRIC, BA3->BA3_TIPOUS   ,;
									BA3->BA3_CONEMP   ,BA3->BA3_VERCON   ,BA3->BA3_SUBCON   ,BA3->BA3_VERSUB   ,;
					   				nil,BA1->BA1_TIPREG   ,nil,cEmpTrab)
				If Len(aRetCli) > 0
					Replace GBH->GBH_CODCLI	With aRetCli[1][1]
					Replace GBH->GBH_LOJA	 With aRetCli[1][2]
				Endif


				Replace GBH->GBH_USRCAD	With cUserName
				Replace GBH->GBH_LOGARQ	With HS_LOGARQ()

				PlsSinc("PLSA260   ","BA1","GBH",.T.)
				GBH->(MsUnlock())


			Else
				If GetNewPar("MV_PLSMSGS","1") == "1"
					MsgAlert(OemtoAnsi(STR0244)) //"Arquivo de sincronismo entre BA1 x GBH nao esta integro. Verifique!"
				Endif

			Endif
			DbSelectarea ("BTS")
			BTS->(DbSetOrder(1))
			IF BTS->(MsSeek(xFilial("BTS")+BA1->BA1_MATVID))
				If 	BBL->(MsSeek(xFilial("BBL")+"PLSA260   "+"GBH"+"BTS"))
					BTS->(RecLock("BTS", .F.))
					REGTOMEMORY("GBH")
					PlsSinc("PLSA260   ","GBH","BTS",.T.)
					BTS->(MsUnlock())
				Else
					If GetNewPar("MV_PLSMSGS","1") == "1"
						MsgAlert(OemtoAnsi(STR0245)) //"Arquivo de sincronismo entre GBH x BTS nao esta integro. Verifique!"
					Endif
				Endif
			Endif
		Endif
	Endif
Endif
RestArea(aArea)
Return()

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PL260ChkOpc³ Autor ³ Totvs	         º Data ³ 18/03/2013    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que verifica a data base 	no BF4 BIL_DATINI         º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Familia/Usuario                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260ChkOpc(nTipo)

Local lRet		:= .T.
Local dDatNov	:= ReadVar()
Local nPos		:= 0
Local nPosCod	:= 0
Local nPosVer	:= 0
LOCAL nPosDTB   := 0
LOCAL cTipReg   := oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_TIPREG")] 

If nTipo = 1 // opcional na familia
	If Type("oBrwOpc:aHeader") == "A"
		//nPosVer := AScan(oBrwOpc:aHeader,{|x| x[2] == "BF1_VERSAO"})
		nPosCod := AScan(oBrwOpc:aHeader,{|x| x[2] == "BF1_CODPRO"})
		IF BIL->(DbSeek(xFilial("BIL")+BI3->BI3_CODINT+BI3->BI3_CODIGO+BI3->BI3_VERSAO)) .and. nPosCod > 0
			If BIL->BIL_DATINI > &dDatNov
				MsgAlert(OemtoAnsi(STR0247))//"A data base deve ser maior ou igual a data inicial da versão do produto"
				lRet := .F.
			Endif
		Endif
	EndIf
Else
	// opcional no Usuario
	If Type("oBrwOUsu:aHeader") == "A"
		nPosVer := AScan(oBrwOUsu:aHeader,{|x| x[2] == "BF4_VERSAO"})
		nPosCod := AScan(oBrwOUsu:aHeader,{|x| x[2] == "BF4_CODPRO"})
		nPosDTB := AScan(oBrwOUsu:aHeader,{|x| x[2] == "BF4_DATBLO"})
		IF BIL->(DbSeek(xFilial("BIL")+BI3->BI3_CODINT+BI3->BI3_CODIGO+BI3->BI3_VERSAO)) .and. nPosCod > 0
			If BIL->BIL_DATINI > &dDatNov
				MsgAlert(OemtoAnsi(STR0247))//"A data base deve ser maior ou igual a data inicial da versão do produto"
				lRet := .F.
			Endif
		Endif
		
		IF lRet 
				
			If oBrwOUsu:aVetTrab[oBrwOUsu:OBROWSE:nAt] > 0 
				
				If BF4->BF4_DATBAS <> M->BF4_DATBAS
					
					If M->BF4_TIPBLO == "0" .AND. !EMPTY(BF4->BF4_DATBLO) 
					
						MsgAlert(OemtoAnsi(STR0265))//"A alteração da data base será permitida após o debloqueio do opcional."
						M->BF4_DATBAS := BF4->BF4_DATBAS 
						lRet := .F.
					
					ElseIf M->BF4_TIPBLO == "1" .And. oBrwOUsu:aCols[oBrwOUsu:Linha(),oBrwOUsu:PlRetPos("BF4_TIPBLO")] =="1"
					
						MsgAlert(OemtoAnsi(STR0266)) //"Opcional já Desbloqueado. Realize o Bloqueio para alterar a data base!"
						M->BF4_DATBAS := BF4->BF4_DATBAS 
						lRet := .F.
					Endif
				EndIf
			EndIf 
		ENDIF 
	EndIf
EndIf

If M->BF4_DATBAS > M->BF4_DATBLO .AND. !EMPTY(M->BF4_DATBLO) .AND. lRet

	msgAlert(STR0262,STR0242) //STR0262,"A ve ser menor ou igual a data de bloqueio.##"Atenção"
	lRet := .F.
EndIf

If nTipo = 1
	    dDataBas :=  M->BF1_DATBAS    
   Else
	    dDataBas :=  M->BF4_DATBAS
Endif 

If (oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_DATINC")] > dDataBas) 
   MsgAlert(STR0281,STR0071) //STR0281,"A data base do Opcional deve ser maior ou igual a data de Inclusão do Beneficiário.##"Atenção"
   lRet := .F.
EndIf 

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlsGrpFam ºAutor  ³Thiago Guilherme    º Data ³  21/11/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Efetua o bloqueio e desbloqueio de familias que fazem parte º±±
±±ºDesc.     ³de grupo familiar												    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Plano de Saude	                                          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PlsGrpFam(lDesb,lblqAut,cFam)
LOCAL nCont

If lBlqConf .AND. !EMPTY(cFam)

	If BG1->(FieldPos("BG1_BQGPFM")) > 0

		dbSelectArea("BG1")
		dbSetOrder(1)
		If dbSeek(xFilial("BG1")+cMtBlo)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica quais familias fazem parte do grupo familiar              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If BA3->(FieldPos("BA3_GRPFAM")) > 0
				cSQL := "SELECT BA3_CODINT,BA3_CODEMP, BA3_MATRIC, BA3_GRPFAM, BA3_BLOFAT,BA3_MOTBLO, R_E_C_N_O_ FROM " + RetSQLName("BA3")

				If AllTrim( TCGetDB() ) == "ORACLE"
					cSQL  += " WHERE SUBSTR(BA3_GRPFAM,1,14) = '" + cFam + "' AND D_E_L_E_T_ = ''"
				Else
					cSQL  += "  WHERE SUBSTRING(BA3_GRPFAM,1,14) = '" + cFam + "' AND D_E_L_E_T_ = ''"
				Endif

				cSQL := ChangeQuery(cSQL)
				dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"TrbDesb",.F.,.T.)

				Count To nQuant

				If nQuant > 0

					TrbDesb->(dbGoTop())

					dbSelectArea("BA1")
					dbSetOrder(1)

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//Verifica se o tipo do motivo é bloqueio e se este motivo de bloqueio permite bloquear
					//o grupo familiar
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If BG1->BG1_BQGPFM == "1" .AND. BG1->BG1_TIPBLO == "0"

						While !TrbDesb->(EOF())

							If dbSeek(xFilial("BA1")+TrbDesb->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC))

								If EMPTY(TrbDesb->BA3_MOTBLO)
									//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
									//³ faz o bloqueio do grupo familiar
									//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
									PL260BLOCO("BA3",TrbDesb->R_E_C_N_O_,4,.T.,cMtBlo,dBlqDat,"1",2,,,lblqAut,.F.)
								EndIf

								TrbDesb->(dbSkip())
							EndIf
						 EndDo

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Verifica se o tipo do motivo é desbloqueio
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					ElseIf  BG1->BG1_TIPBLO == "1"

					 	 //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						 //³ No caso de desbloqueio da familia principal, Verifica se o grupo familiar tambem esta
						 //  bloqueado para efetuar o desbloqueio.
						 //ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						 	 While !TrbDesb->(EOF())

								If dbSeek(xFilial("BA1")+TrbDesb->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC))
									If !EMPTY(TrbDesb->BA3_BLOFAT)
										//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
										//³ faz o desbloqueio do grupo familiar
										//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
										PL260BLOCO("BA3",TrbDesb->R_E_C_N_O_,4,.T.,cMtBlo,dBlqDat,"1",2,,,lblqAut, .F.)
									EndIf
									TrbDesb->(dbSkip())
								 EndIf
							 EndDo

					EndIf
				EndIf

				TrbDesb->(dbCloseArea())
			EndIf
		EndIf
	EndIf
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSVLDGPF ºAutor  ³Thiago Guilherme    º Data ³  21/11/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Efetua o bloqueio e desbloqueio de familias que fazem parte º±±
±±ºDesc.     ³de grupo familiar												    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Plano de Saude	                                          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function PLSVLDGPF(nVal)

LOCAL cCdEmp := M->BA3_CODEMP
LOCAL cMtr	  := BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)

If nVal == 1
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Retorna os titulares das famílias do mesmo grupo/empresa para a
//  consulta padrão PLSGPF, mas não retorna o titular da família que
//  esta sendo alterada.
//  Foi necessário efetuar o filtro nesta função, pois o tamanho do campo
//  filtro da consuta padrão é insuficiente.
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If BA1->BA1_CODEMP == cCdEmp .AND. BA1->BA1_TIPUSU == "T"  .AND. If(EMPTY(BA1->BA1_DATBLO) .OR. BA1->BA1_DATBLO >= dDataBase, .T., .F.) ;
	   .AND. BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) <> cMtr
		Return .T.
	Else
		Return .F.
	EndIf
EndIf

If nVal == 2
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se a família que esta sendo inclusa em um grupo familiar
//  não é uma familia principal de um grupo familiar nao permitindo
//  alterar o campo BA3_GRPFAM
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cSQL := "SELECT BA3_CODINT,BA3_CODEMP, BA3_MATRIC, BA3_GRPFAM, BA3_BLOFAT,R_E_C_N_O_ FROM " + RetSQLName("BA3")

	If AllTrim( TCGetDB() ) $ "ORACLE|POSTGRES"
		cSQL  += " WHERE SUBSTR(BA3_GRPFAM,1,14) = '" + BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC) + "' AND D_E_L_E_T_ = ''"
	Else
		cSQL  += "  WHERE SUBSTRING(BA3_GRPFAM,1,14) = '" + BA3->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC) + "' AND D_E_L_E_T_ = ''"
	Endif

	cSQL := ChangeQuery(cSQL)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"TrbDesb",.F.,.T.)

	If !TrbDesb->(EOF())
		Alert(STR0251)
		M->BA3_GRPFAM := ""

		TrbDesb->(dbCloseArea())
		Return .T.
	EndIf

	TrbDesb->(dbCloseArea())

	cSQL := "SELECT BA3_CODINT,BA3_CODEMP, BA3_MATRIC, BA3_GRPFAM, BA3_BLOFAT,R_E_C_N_O_ FROM " + RetSQLName("BA3")

	If AllTrim( TCGetDB() ) $ "ORACLE|POSTGRES"
		cSQL  += " WHERE BA3_CODINT||BA3_CODEMP||BA3_MATRIC = '" + BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) + "' AND D_E_L_E_T_ = ''"
	Else
		cSQL  += " WHERE BA3_CODINT+BA3_CODEMP+BA3_MATRIC = '" + BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) + "' AND D_E_L_E_T_ = ''"
	Endif

	cSQL := ChangeQuery(cSQL)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cSQL),"TrbDe",.F.,.T.)

	If !TrbDe->(EOF())
		If !EMPTY(TrbDe->BA3_GRPFAM)
			Alert(STR0252)

			TrbDe->(dbCloseArea())
			Return .F.
		EndIf
	EndIf

	TrbDe->(dbCloseArea())


EndIf
Return .T.

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³Pl090PSSXBºAutor  ³                    º Data ³  23/05/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Executa a consulta padrao (especifica)                      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function Pl260PSSXB()

Local cSql 	:= ""
Local aIndices 	:= {}
Local aHeader 	:= {}
Local lRet		:= .F.
Local oConsulta	:= Nil

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta a query da consulta padrao																		³
//³Converte primeiro campo para string pois o mesmo eh chave na consulta padrao e na pesquisa do mesmo	³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

//cSQL := "SELECT BA1_CODINT,BA1_CODEMP, BA1_MATRIC,BA1_TIPREG,BA1_DIGITO,BA1_NOMUSR,BA1_CONEMP,BA1_SUBCON,R_E_C_N_O_ FROM " + RetSQLName("BA1")
If AllTrim( TCGetDB() ) == "ORACLE"
	cSQL := "SELECT (BA1_CODINT||BA1_CODEMP||BA1_MATRIC||BA1_TIPREG||BA1_DIGITO) AS MATRIC,BA1_NOMUSR ,BA1_CONEMP,BA1_SUBCON,R_E_C_N_O_ FROM " + RetSQLName("BA1")
   //	cSQL  += " WHERE BA1_CODINT||BA1_CODEMP||BA1_MATRIC = '" + BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC) + "' AND D_E_L_E_T_ = ''"
	cSQL  += " WHERE BA1_CODINT||BA1_CODEMP = '" + BA1->(BA1_CODINT+BA1_CODEMP) + "' AND BA1_TIPUSU = 'T' AND BA1_MOTBLO = ' ' AND D_E_L_E_T_ = ''"
Else
	cSQL := "SELECT (BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO) AS MATRIC,BA1_NOMUSR ,BA1_CONEMP,BA1_SUBCON,R_E_C_N_O_ FROM " + RetSQLName("BA1")
	cSQL  += " WHERE BA1_CODINT = '" + BA1->(BA1_CODINT) + "' AND BA1_MOTBLO = ' ' AND BA1_TIPUSU = 'T' AND D_E_L_E_T_ = ''"
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta a aHeader da consulta³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


SX3->( dbSetOrder( 2 ) )
SX3->( dbGotop(  ) )
If SX3->( dbSeek( "BA1_MATRIC", .F. ) )
	Aadd(aHeader,{SX3->X3_TITULO,'BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO',SX3->X3_PICTURE,SX3->X3_TAMANHO	,SX3->X3_DECIMAL,"AlwaysTrue()"	,SX3->X3_USADO,"C","","V"})
Endif

If SX3->( dbSeek( "BA1_NOMUSR", .F. ) )
	Aadd(aHeader,{SX3->X3_TITULO,SX3->X3_CAMPO,SX3->X3_PICTURE,SX3->X3_TAMANHO	,SX3->X3_DECIMAL,"AlwaysTrue()"	,SX3->X3_USADO,"C","","V"})
	aAdd( aIndices, {"BA1_NOMUSR",SX3->X3_TITULO})
Endif

If SX3->( dbSeek( "BA1_CONEMP", .F. ) )
	Aadd(aHeader,{SX3->X3_TITULO,SX3->X3_CAMPO,SX3->X3_PICTURE,SX3->X3_TAMANHO	,SX3->X3_DECIMAL,"AlwaysTrue()"	,SX3->X3_USADO,"C","","V"})
Endif

If SX3->( dbSeek( "BA1_SUBCON", .F. ) )
	Aadd(aHeader,{SX3->X3_TITULO,SX3->X3_CAMPO,SX3->X3_PICTURE,SX3->X3_TAMANHO	,SX3->X3_DECIMAL,"AlwaysTrue()"	,SX3->X3_USADO,"C","","V"})
Endif


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta a consulta padrao³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oConsulta:=PlsIntSxb():New()
oConsulta:cTitle 		:= "CONSULTA" 					    								//Titulo da Consulta
oConsulta:cQuery 		:= cSql															//Query dos dados a serem apresentados
oConsulta:aIndex 		:= aIndices														//Indices disponiveis (deve usar os mesmos campos da query)
oConsulta:aHeader 		:= aHeader                      								//Header da grid presente consulta (deve usar os mesmos campos da query)
oConsulta:aReturn		:= {'BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO'}	//Campos de retorno da consulta (deve usar os mesmos campos da query)
oConsulta:lDataBaseRM 	:= .T.															//Indica se a query eh executada na base do protheus ou da RM
oConsulta:Show()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Coleta o retorno³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(oConsulta:aRetSXB) > 0
	cCodLocSxb := oConsulta:aRetSXB[1]
	lRet:=.t.
EndIf

Return lRet

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLGDIAGB7D  ³          		          º Data ³  23/05/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Chamada da tela de edição da B7D Receitas Medicas           º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PLGDIAGB7D(cAlias)
LOCAL aArea := GetArea()
Local cMatric 	:= ""
DEFAULT cAlias	:= "BA1"
Private cCodTab	:= ""

If cAlias == "BA1"
	cMatric := BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC)
ElseIf cAlias == "BOW"
	cMatric := BOW->BOW_USUARI
ElseIf cAlias == "B44"
	cMatric := B44->(B44_OPEUSR+B44_CODEMP+B44_MATRIC)
EndIf

DbSelectArea("B7D")
PLGRVDIAG("B7D",STR0255 /*"	Cadastro de Receitas"*/," B7D.B7D_FAMILI == '" + SUBSTR(BOW->BOW_USUARI,1,14) + "' ", "B7D_BENEFI", cMatric, 1, "B7D_FILIAL+B7D_SEQUEN", , ,"ExcRece(nOpca)", ,,,,,"PLSMOTEXC(oGDPri)",,,,.T.)

RestArea(aArea)
Return

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PlVldB7D  ³          		          º Data ³  23/05/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Validação dos campos da tabela de receitas		           º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function PlVldB7D()
Local cCpo    := ReadVar()
Local lRet 	:= .T.


If "B7D_CODPAD" $ cCpo
	If (lRet := Vazio() .OR. BR4->(ExistCpo('BR4',M->B7D_CODPAD,1)))
		cCodTab := &(cCpo)
	EndIf

ElseIf "B7D_CODMED" $ cCpo
	If (lRet := Vazio() .OR. BR8->(ExistCpo('BR8',cCodTab+M->B7D_CODMED,1)))
		cCodTab := &(cCpo)
	EndIf
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PINCLOGIN ºAutor  ³Rogerio Tabosa      º Data ³  21/11/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Cria automaticamente login no portal do beneficiario para   º±±
±±ºDesc.     ³beneficiarios com permissão de solicitação de reembolso     º±±
±±º          ³ através do portal  com a seguinte regra inicial:           º±±
±±º          ³ O usuário devera ser o numero da carteirinha e a senha     º±±
±±º          ³ devera ser o CPF													º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ Plano de Saude	                                          º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PIncLogin( cMatric , lIncDep , cTpPor, lMsg, cCpf, cEmail, lPortal)

LOCAL aArea 		:= GetArea()
LOCAL aItens		:= {}
LOCAL cCodAcPad	:= GetNewPar("MV_CDPBEN","")
LOCAL cTpLogin    := GetNewPar("MV_LOGIN","1") // 1 - Matricula 2 - CPF  3 - E-mail
LOCAL nI			:= 0
LOCAL aItensAux	:= {}
LOCAL cTit			:= ""
LOCAL cLogin      := ""
Local cPath			:= GetSrvProfString( "RootPath" , "" ) + "\LOGS\"
Local cNomArq		:= "log_inc_usr" + DtoS(dDataBase) + "_" + StrTran(SubStr(Time(),1,5),":","")
Local cPerAcePri	:= GetNewPar("MV_TPPERA","1")
Local lInc	:=.T.
Local lRet := .T.

DEFAULT lIncDep	:= .T. // Inclui os dependentes na B49
DEFAULT cTpPor	:= "3"
DEFAULT lMsg		:= .F.
Default lPortal		:= .F.

If PLSALIASEX("B49")
	B49->(DbSetOrder(2))
	If B49->(MsSeek(xFilial("B49") + cMatric)) // Se ja tem usuario criado sai da funçao
		
		If lPortal 
			Return "Beneficiário já existe, caso tenha esquecido a senha, solicite uma nova no link 'Esqueceu sua senha'"
		Else
			Return
		EndIf 
	EndIf

	If Empty(cCodAcPad)
		If lMsg
			MsgInfo(OemtoAnsi(STR0254)) //"Não foi possivel criar o acesso ao portal (Necessário definir o parametro MV_CDPBEN com o código de acesso padrão) "
		Endif
		Return()
	EndIf

	If !lPortal
		BA1->(DbSetOrder(2))
		BA1->(MsSeek(xFilial("BA1")+SubStr(cMatric,1,16)))
		BA3->(DbSetOrder(1))
		BA3->(MsSeek(xFilial("BA3")+SubStr(cMatric,1,14)))

		cCodUsr := A226USRCOD(.T.) //O cadastro de usuários do portal não usa o SXE pra gerar o sequencial

		While BA1->(! Eof() .AND. BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC == xFilial("BA1")+Left(cMatric, 14) )

			If bA1->BA1_TIPUSU == "T"
				cTit := BA1->BA1_NOMUSR
			Endif
			aItensAux	:= {}

			aAdd(aItensAux, {"B49_CODUSR" , cCodUsr , Nil}) // Codigo do usuario BSW
			aAdd(aItensAux, {"B49_BENEF" , BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO) , Nil}) // Matricula

			aAdd(aItens, AClone(aItensAux))
			BA1->(DbSkip())
		End
	Else

		cCodUsr := A226USRCOD(.T.) //O cadastro de usuários do portal não usa o SXE pra gerar o sequencial

		BTS->(DbSetOrder(3))
		BTS->(DbSeek(xFilial("BTS")+cCpf))

		While !BTS->(Eof()) .AND. BTS->BTS_FILIAL == xFilial("BTS") .And. AllTrim(BTS->BTS_CPFUSR) == cCpf
			cTit := BTS->BTS_NOMUSR

			aItensAux	:= {}

			aAdd(aItensAux, {"B49_CODUSR" , cCodUsr , Nil}) // Codigo do usuario BSW
			aAdd(aItensAux, {"B49_BENEF" , BTS->BTS_CPFUSR , Nil}) // Matricula

			aAdd(aItens, AClone(aItensAux))
			BTS->(DbSkip())
		End

	EndIf
	lMsErroAuto := .F.
	lMsHelpAuto := .T.

	/*Preenchendo a Senha para Resgatar um Número randômico de 8 Posições*/
	cSenhaOrg := alltrim(str(Randomize( 10, 100))) + alltrim(str(Randomize( 10, 100))) + alltrim(str(Randomize( 10, 100))) + alltrim(str(Randomize( 10, 100)))


	cLogin := cMatric

	if cTpLogin = "3" .and. alltrim(cEmail) <> ""
		cLogin := cEmail
	else
		if cTpLogin = "2" .and. alltrim(cCpf) <> ""
			cLogin := cCpf
		endif
	endif

	//Verifica se o Login que irá ser utilizado já esta cadastrado. Caso esteja, gravar a matrícula.
	BSW->(DbSetOrder(1))
	if BSW->(dbSeek(xFilial("BSW")+ cLogin + (Space(TamSx3("BSW_LOGUSR")[1] - len(cLogin)))))
		cLogin := cMatric
	endif
	//Verificando por CPF cadastrado na BSW, pois pelo portal o CPF é cadastrado Primeiro que a matricula
	//Não permitindo a duplicação de usuarios iguais
	if BSW->(dbSeek(xFilial("BSW")+ cCpf + (Space(TamSx3("BSW_LOGUSR")[1] - len(cLogin)))))
	 	lInc:=.F.
	Endif
	BSW->(RecLock("BSW",lInc))
	BSW->(BSW_FILIAL) := xFilial("BSW")
	BSW->(BSW_CODUSR) := cCodUsr
	BSW->(BSW_LOGUSR) := cLogin//cMatric
	BSW->(BSW_NOMUSR) := cTit
	BSW->(BSW_DTSEN)  := DATE()
	BSW->(BSW_SENHA)  := PLSCRIDEC(1,cSenhaOrg/*AllTrim("123456")*/)
	BSW->(BSW_CODACE) := cCodAcPad
	BSW->(BSW_TIPCAR) := "0"
	BSW->(BSW_TPPOR)  := cTpPor
	BSW->(BSW_EMAIL)  := IIF(lPortal, cEmail, BA1->BA1_EMAIL)
	BSW->(BSW_PRIACE) := .T.
	BSW->(BSW_PERACE) := cPerAcePri
	BSW->(MsUnlock())

	B49->(dbSetOrder(2))
	For nI := 1 To Len(aItens)

		If !B49->(dbSeek(xFilial("B49") + aItens[nI][2][2]))
			B49->(RecLock("B49",.T.))
			B49->(B49_FILIAL) := xFilial("B49")
			B49->(B49_CODUSR) := aItens[nI][1][2]
			B49->(B49_BENEFI) := cMatric
			B49->(MsUnlock())

			lMsg := .T.
		EndIf
	Next

	If ! lMsErroAuto

		If lMsg

			BOJ->(DbSelectArea("BOJ"))
			BOJ->(DbSetOrder(3))
			BOJ->(MsSeek(xFilial("BOJ") + "PLSA260" + (Space(TamSx3("BOJ_ROTINA")[1] - 7))  + "1" + (Space(TamSx3("BOJ_VERSAO")[1] - 1 ))))

			PLSinaliza(BOJ->BOJ_CODSIN,nil,nil, alltrim(cEmail)/*"roberto.arruda@totvs.com"/*cEmailEnviar*/, "Envio email de anexo - Junta medica",,,,,, .F.,"",,,)
			If !lPortal //se rotina foi chamada pelo portal, não deve ter alerta, portal já possui os alertas próprios
				MsgAlert(STR0253) //"Login no portal do beneficiário criado com sucesso!"
			Else
				lRet := .T.
			EndIf
		EndIf
	Else
		If lMsg .And. !lPortal
			MostraErro()
		Else
			MostraErro(cPath, cNomArq)
			lRet := .F.
		EndIf
	EndIf

EndIf
RestArea(aArea)
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSMOTEXC  ºAutor  ³Thiago Guilherme   º Data ³  25/06/2014 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Exibe o motivo da exclusão da receita no reembolso
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSMOTEXC(oGDPri)
LOCAL AConfMot := {}
LOCAL cSequen  := oGDPri:acols[oGDPri:obrowse:nAt][GdFieldPos("B7D_SEQUEN",oGDPri:aHeader)]
LOCAL nPosRec  := oGDPri:obrowse:nAt
LOCAL nArray	 := If(EMPTY(__AExcRec), 1, LEN(__AExcRec) + 1)
LOCAL aRece	 := {}

//retorna o motivo da exclusão a partir de um campo memo.
If !oGDPri:Acols[oGDPri:obrowse:nAt][16]
	aRece := PLSEXITRE(.T.)
	If valtype(aRece) != "L"
		AADD(__AExcRec, aRece)
		If __AExcRec[nArray][1][2]
			AADD(__AExcRec[nArray][1],cSequen)
			AADD(__AExcRec[nArray][1],nPosRec)
			AADD(__AExcRec[nArray][1],B7D->B7D_BENEFI)
		EndIf
	Else
		Return __AExcRec
	EndIf
EndIf

// Se retornar .T. a linha é excluida.
Return IIf( oGDPri:Acols[oGDPri:obrowse:nAt][16],.T., __AExcRec[nArray][1][2])

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ExcRece  ºAutor  ³Thiago Guilherme   º Data ³  12/06/2014 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Grava exclusao da receita
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
function ExcRece(nOpca)
LOCAL nI

If nOpca == 1

	If PLSALIASEX("B7D")
		For nI := 1 To Len(__AExcRec)

			If oGDPri:Acols[__AExcRec[nI][1][4]][16]

				If __AExcRec[nI][1][2]
					B7D->(dbSetOrder(1))
					If B7D->(dbSeek(xFilial("B7D")+__AExcRec[nI][1][3]+ __AExcRec[nI][1][5]))

						B7D->(RecLock("B7D",.F.))
						B7D->B7D_OBS 	  := __AExcRec[nI][1][1]
						B7D->B7D_CODUSR := PLSRtCdUsr()
						B7D->B7D_NOMUSR := usrRetName(PLSRtCdUsr())
						B7D->(MsUnlock())
					EndIf
				EndIf
			EndIf
		 Next
	 EndIf
EndIf

__AExcRec := {}

Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSDTCAR  ºAutor  ³Totvs			     º Data ³  12/09/2014 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Atualiza Data de Carencia Usuario na Inclusao               º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PLSDTCAR()
Local aArea   := GetArea()
Local lAtivo  := GetNewPar("MV_PLDTCAR",.F.) //Verifica se existe uma vida bloqueada e retira os dias cumpridos da data de carencia?
Local ldiasBlo:= .F.
Local cQuery  := ""
Local nDias   := 0
Local nDiasMax:= GetNewPar("MV_PLMMCAR",10) * 30 // Quantidade em meses maximo de carencia pela ANS - 10 meses, verifico em dias.

If lAtivo
	// Pega o usuario com data de bloqueio mais recente
	cQuery := "SELECT BA1_CODINT, BA1_CODEMP, BA1_MATRIC, BA1_TIPREG, "
	cQuery += "BA1_MATVID, BA1_DATBLO, BA1_DATCAR, BA1_DATINC "
	If BI3->(FieldPos("BI3_CONCAR")) > 0
		cQuery += ",BI3_CONCAR "
	EndIf
	cQuery += "FROM "+ RetSqlName("BA1")+ " BA1 "
	cQuery += "INNER JOIN "+ RetSqlName("BI3")+ " BI3 "
	cQuery += "ON BI3_FILIAL = BA1_FILIAL AND "
	cQuery += "BI3_CODINT = BA1_CODINT AND "
	cQuery += "BI3_CODIGO = BA1_CODPLA AND "
	cQuery += "BI3_VERSAO = BA1_VERSAO "
	cQuery += "WHERE "
	cQuery += "BA1_FILIAL = '"+xFilial("BA1")+"' AND "
	cQuery += "BA1_MATVID = '"+M->BA1_MATVID+"' AND "
	cQuery += "BA1_DATBLO <> ' ' AND "

	If BI3->(FieldPos("BI3_CONCAR")) > 0
		cQuery += "BI3_CONCAR = '1' AND "
	EndIf
	cQuery += "BA1.D_E_L_E_T_ = ' ' AND "
	cQuery += "BI3.D_E_L_E_T_ = ' ' "
	cQuery += "ORDER BY BA1_DATBLO DESC"

	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),"TRBBLO",.F.,.T.)

	If ! TRBBLO->(EOF())
		// Por lei somente contar a carencia quando a nova inclusao for em até 30 dias após bloqueio
		ldiasBlo := (M->BA1_DATINC- stod(TRBBLO->BA1_DATBLO)) <= 30
		If ldiasBlo
			// Verifica a quantidade de dias ja cumprido
			nDias:= stod(TRBBLO->BA1_DATBLO) - IIF(!EMPTY(TRBBLO->BA1_DATCAR),stod(TRBBLO->BA1_DATCAR),stod(TRBBLO->BA1_DATINC))
			If nDias > 0
				// Retira a quantidade de dias da data carencia da nova inclusao
				M->BA1_DATCAR := M->BA1_DATINC - IIF(nDias > nDiasMax,nDiasMax,nDias)
			Endif
			// Verifica CPT BF3
			// BF3 - Pre existencias...
			__cMatriBlo := TRBBLO->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG)
			BF3->( dbSetorder(01) )
			If BF3->( msSeek(xFilial("BF3")+__cMatriBlo) )
				__lCPTBLO := .T.
			Endif
		Endif
	Endif
	TRBBLO->(DbCloseArea())
Endif
RestArea(aArea)

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLSVLDB7DºAutor  ³Totvs			     º Data ³  12/09/2014 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³retorna o CODTAB para a consulta padrão PLSMDI               º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLSVLDB7D()

Local cCpo    := ReadVar()
private cCodTab := &(cCpo)

If EMPTY(cCodTab)
	Return .F.
EndIf

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLWHENBF4  ³Totvs			     º Data ³  14/04/2016  		  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³função utilizada na propriedade WHEN do campo BF4_CODPRO 	  º±±
			  para que permita a edição do campo caso o opcional não tenhaº±±
			  sido gravado na tabela para que no momento do desbloqueio doº±±
			  mesmo registro, o usuário não possa alterar o opcional      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLWHENBF4()

LOCAL lRet    := .T.
LOCAL cTipReg := oBrwUsr:aCols[oBrwUsr:OBROWSE:nAt][oBrwUsr:PLRETPOS("BA1_TIPREG")]

BF4->(dbSetOrder(1))
If BF4->(dbSeek(xFilial("BF4") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_MATRIC + cTipReg + M->BF4_CODPRO))

	lRet := .F.
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PLCONSREC ºAutor  ³Karine Riquena Limp º Data ³  25.04.16   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Funcao que abre a rotina de receitas com o browse filtrado º±±
±±º          ³ para o beneficiario selecionado  							    º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MOSTRAR AS RECEITAS DO BENEFICIÁRIO                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PLCONSREC(cAlias, oBrwPro)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Define variaveis para composicao da Matricula    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local oModelRec
Local cCODINT := ""
Local cCODEMP := ""
Local cMATRIC := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Foi usado o FieldGet pq os outros campos da chave nao se encontram na MATRIZ aHeader               |
//³Pega o conteudo do campo informado na linha corrente 											  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cTIPREG := ""
Local cDIGITO := ""

private aRotina := {}

//Desativa o atalho de teclado para não permitir abrir a rotina varias vezes enquanto ela esta aberta
//pela rotina de reembolso
SET KEY VK_F8 TO 
SET KEY VK_F2 TO
SET KEY K_ALT_Z TO 
SET KEY VK_F4 TO 
SET KEY VK_F9 TO 
SET KEY VK_F10 TO 



if cAlias == "BA1"
	cCODINT := M->BA3_CODINT
	cCODEMP := M->BA3_CODEMP
	cMATRIC := M->BA3_MATRIC
	cTIPREG := oBrwUsr:FieldGet('BA1_TIPREG',oBrwUsr:Linha())
	cDIGITO := oBrwUsr:FieldGet('BA1_DIGITO',oBrwUsr:Linha())
	//ENVIA O CÓDIGO DA FAMILIA PARA O FILTRO
	cMatric := cCODINT+cCODEMP+cMATRIC
elseIf cAlias == "BOW"
	//ENVIA O CÓDIGO DA FAMILIA PARA O FILTRO
	cMatric := SubStr(oBrwPro:acols[oBrwPro:obrowse:nAt][GdFieldPos("B1N_MATRIC",oBrwPro:aHeader)],1,14)
endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Seta a ordem de procura	                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
BA1->(DbSetOrder(2)) // BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG+BA1_DIGITO
if BA1->(msSeek(xFilial('BA1')+cMatric))
	aAdd( aRotina, { 'Pesquisar' , 				'PesqBrw'         , 0, 1, 0, .T. } )
	aAdd( aRotina, { 'Visualizar', 				'VIEWDEF.PLSCADREC', 0, 2, 0, NIL } )
	PLSCADREC(cMatric)
Else
	MsgInfo(OemtoAnsi(STR0155)) //'Usuário não ENCONTRADO')
EndIf

//reativa a tecla de atalho
SetKey(VK_F8,  {|| PLCONSREC("BOW", oBrwPro)}) //Receitas
SetKey(VK_F2,{|| PLBOWHIS("BOW",BOW->BOW_PROTOC)}) // Historico do reembolso 
SetKey(K_ALT_Z,{|| PLGRVBK6("MOA")}) // Verifica cadastro rede 
SetKey(VK_F4,{|| PLBrwRmbCan()}) // Protocolos cancelados   
SetKey(VK_F9   , {|| PLSEXITRE()}) // Glosar itens 
SetKey(VK_F10  , {|| VisMotExc()}) // Mot. Glosa 
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Fim da funcao                                   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Return

/*--------------------------------------------------------------------------
Programa  PLVLDTBLQ  								     	º Data ³ 04/2016

Descrição
Função que faz a verificação para permitir a alteração da data de bloqueio.
-----------------------------------------------------------------------------
*/
Function PLVLDTBLQ()

LOCAL lRet := .T.

If M->BF4_DATBLO < M->BF4_DATBAS .And. !Empty(M->BF4_DATBLO)

	MsgAlert(STR0263,STR0242) //"A data de bloqueio deve ser superior a data base."##Atenção
	lRet := .F.

ElseIf !EMPTY(BF4->BF4_DATBLO)

	MsgAlert(STR0264,STR0242) //"Necessário efetuar o desbloqueio para incluir uma nova data de bloqueio."##Atenção
	M->BF4_DATBLO := BF4->BF4_DATBLO
	lRet := .F.
EndIf
Return lRet

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} PLVLBLOPC
Função utilizada para controlar o tipo de bloqueio digitado no campo BF4_MOTBLO

@since		06/2016
@version	P12
/*/
//------------------------------------------------------------------------------------
Function PLVLBLOPC()

LOCAL cTipoBloq := Posicione("BG3",1,xFilial("BR8") + M->BF4_MOTBLO,"BG3_TIPBLO")
LOCAL lRet		:= .T.
LOCAL cMotBlo   := M->BF4_MOTBLO

If !EMPTY(BF4->BF4_DATBLO) .AND. cTipoBloq == "0" //Bloqueado

	M->BF4_MOTBLO := BF4->BF4_MOTBLO
	M->BF4_DATBLO := BF4->BF4_DATBLO
 	lRet := .F.

	MsgAlert(STR0268, STR0242) //"Este opcional já está bloqueado."##"Atenção"

ElseIf EMPTY(BF4->BF4_DATBLO) .AND. cTipoBloq == "1" //Desbloqueado

	MsgAlert(STR0269, STR0242) //"Este opcional já está desbloqueado.""##"Atenção"

	M->BF4_MOTBLO := BF4->BF4_MOTBLO
	M->BF4_DATBLO := BF4->BF4_DATBLO
 	lRet := .F.
EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} PLS260DBLU
Valida a data de desbloqueio do beneficiário
@author Oscar Zanin
@since 20/06/2016
@version P12
/*/
//-------------------------------------------------------------------
function PLS260DBLU()

Local lRet := .T.

IF ( !(EmpTy(BA1->BA1_DATBLO)) .AND. !(EmpTy(M->BCA_DATA)) )
	If (M->BCA_DATA < BA1->BA1_DATBLO)
		Msgalert( STR0270/*"A data de desbloqueio informada é anterior à data de bloqueio!"*/ + CRLF + STR0271 /*"Data de bloqueio: "*/ + DtoC(BA1->BA1_DATBLO) )
		lRet := .F.
	EndIf	
EndIf

return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} PLS260DBLF()
Valida a data de desbloqueio do beneficiário
@author Oscar Zanin
@since 20/06/2016
@version P12
/*/
//-------------------------------------------------------------------
function PLS260DBLF()

Local lRet := .T.

IF ( !(EmpTy(BA3->BA3_DATBLO)) .AND. !(EmpTy(M->BC3_DATA)) )
	If (M->BC3_DATA < BA3->BA3_DATBLO)
		Msgalert( STR0270/*"A data de desbloqueio informada é anterior à data de bloqueio!"*/ + CRLF + STR0271 /*"Data de bloqueio: "*/ + DtoC(BA1->BA1_DATBLO) )
		lRet := .F.
	EndIf
EndIf

return lRet

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} PLSCOBANS
Função utilizada para inicializar o campo BA1_LOCANS com 2 (Destino) para os contratos
de pessoa jurídica de intercambio no momento da inclusão de um beneficiário.

@since		06/2016
@version	P12
/*/
//------------------------------------------------------------------------------------
Function PLSCOBANS()

lInterc := Posicione("BT5",1,xFilial("BT5")+BA3->(BA3_CODINT+BA3_CODEMP+BA3_CONEMP+BA3_VERCON),"BT5_INTERC") == "1"
cRet    := ""

If BA3->BA3_TIPOUS == "2" .AND. lInterc
	cRet := "2"
Else
	cRet := "1"
EndIf

Return cRet

//-------------------------------------------------------------------------------------
/*/{Protheus.doc} PLVLDDOC
Valida se o documento digitado no campo BD2_CODDOC pode ser incluido para o beneficiário
posicionado

@since		08/2016
@version	P12
/*/
//------------------------------------------------------------------------------------
Function PLVLDDOC(cCodDoc, cGrParent)

LOCAL lRet := .T.

DEFAULT cCodDoc   := ""
DEFAULT cGrParent := ""

BD2->(DbSetOrder(1))
If BD2->(MsSeek(xFilial("BD2") + cCodDoc))

	If !EMPTY(BD2->BD2_PARENT)

		If !cGrParent $ BD2->BD2_PARENT

			MsgInfo(STR0275,STR0071) //"Documento indisponível para o beneficiário selecionado."##"Atenção"
			lRet := .F.
		EndIf
	EndIf
Else
	MsgInfo(STR0276,STR0071) //"Não existe registro relacionado a este código."##"Atenção"
	lRet := .F.
EndIf

Return lRet


//--------------------------------------------------------------------------------------------------
/*/{Protheus.doc} Pl260DadNio

Recupera e formata os dados do beneficiário para serem enviados ao NIO

@param cOrigem			Origem do dado: 1-Banco, 2-Tela (M->), 3-Browse ou 4-Alias de trabalho
@param oBrwUsr			Objeto browse com informacoes do usuario
@param nInd			Indice da linha do browse
@param cAlias			Alias de trabalho ativo
@param aDadCob			Dados de cobertura do beneficiário
@param lRotBlo			Indica que a chamada vem da rotina de bloqueio
@param lBloq			Indica que se é um bloqueio .T. ou desbloqueio .F.

@return aDadNio		Dados do Beneficiário

@author everton.mateus
@since 16/05/2016
/*/
//--------------------------------------------------------------------------------------------------
Function Pl260DadNio(cOrigem,oBrwUsr,nInd,cAlias,aDadCob,lRotBlo,lBloq,nOpc,lUsaSIP,lNovoCCO,lOriTran)

Local aDadNio    := {}
Local cCodProd := ""
Local cRegAns := ""
Local cDatCar := ""
Local cCodInt := ""
Local cContrato := ""
Local cForCon := ""
Local cCodSeg := ""
Local cMatric	:= ""
Local lAtenOdon := .F.
Local lPodeBR8 := .F.

Default cAlias := ""
Default cOrigem := "1" //1 - Banco, 2 - Memória, 3 - Browse, 4 - Alias
Default lRotBlo := .F.
Default lBloq := .F.
Default aDadCob := {}
Default nOpc := K_Alterar
Default lUsaSIP	:= .T.
Default lNovoCCO	:= NIL
Default lOriTran	:= NIL

If cOrigem == "1" //Banco
	oModel := PL260CarDad("BA1","BA3",nil,0,@cContrato,;
								@cCodProd,@cDatCar,@cCodInt,@cRegAns,lRotBlo,;
								lBloq,nOpc,lNovoCCO,lOriTran, cOrigem)

ElseIf cOrigem == "2" //Memoria
	oModel := PL260CarDad("M","M",nil,0,@cContrato,;
								@cCodProd,@cDatCar,@cCodInt,@cRegAns,lRotBlo,;
								lBloq,nOpc, nil, nil, cOrigem)

ElseIf cOrigem == "3" //Browse
	oModel := PL260CarDad("","M",oBrwUsr,nInd,@cContrato,;
							@cCodProd,@cDatCar,@cCodInt,@cRegAns,lRotBlo,;
							lBloq,nOpc, nil, nil, cOrigem)
ElseIf cOrigem == "4" //Alias
	oModel := PL260CarDad(cAlias,cAlias,nil,0,@cContrato,;
								@cCodProd,@cDatCar,@cCodInt,@cRegAns,lRotBlo,;
								lBloq,nOpc, nil, nil, cOrigem)
EndIf

Return oModel

//--------------------------------------------------------------------------------------------------
/*/{Protheus.doc} PL260CarDad

Recupera e formata os dados do beneficiário para serem enviados ao NIO

@param cAlias			Alias principal com os dados do beneficiário
@param cAliasAux		Alias com os dados da família
@param oBrwUsr			Objeto browse com informacoes do usuario
@param nInd				Indice da linha do browse
@param cContrato		Código do contrato do beneficiário
@param cCodProd			Código do produto
@param cDatCar			Data de Carência
@param cCodInt			Código da operadora
@param cRegAns			Registro da operadora
@param lRotBlo			Indica que a chamada vem da rotina de bloqueio
@param lBloq			Indica que se é um bloqueio .T. ou desbloqueio .F.

@return aDadNio		Dados do Beneficiário

@author everton.mateus
@since 16/05/2016
/*/
//--------------------------------------------------------------------------------------------------
Function PL260CarDad(cAlias,cAliasAux,oBrwUsr,nInd,cContrato,;
							cCodProd,cDatCar,cCodInt,cRegAns,lRotBlo,;
							lBloq,nOpc,lNovoCCO,lOriTran,cOrigem)

Local aAreaBA1 := BA1->(GetArea())
Local aAreaBA3 := BA3->(GetArea())
Local aAreaBTS := BTS->(GetArea())
Local aDadNio := {}

Local cUF 			:= ""
Local cSexoSip 		:= ""
Local cSexo			:= ""
Local cPlaPor		:= ""
Local cGrauPa		:= ""
Local cCEI			:= ""
Local cCNPJ			:= ""
Local cMatTit		:= ""
Local cDN			:= ""
Local cCodTit   	:= GetNewPar("MV_PLCDTIT","T")
Local cGrauTit		:= GetNewPar("MV_PLTRTIT",'00') //Codigo do Grau de Parentesco do Titular.
Local cSUSEP 		:= ""
Local cSCPA  		:= ""
Local cTipEnd		:= ""
Local cMunRes		:= ""
Local cResExt		:= ""
Local cMotBlo 		:= ""
Local cSitAns 		:= ""
Local cMatric		:= ""
Local cCriNom		:= "" 
Local cCriMae		:= ""

Local lCodPla		:= .T.

Local dDatBlo		:= StoD("")
Local dDatRea		:= StoD("")

Local lPLSA260DAD 	:= ExistBlock("PLSA260DAD")
Local aRetDad		:= {}
Local aRetAUX		:= {}
Local cCeicon		:= ""
Local cCaepf		:= ""
Local cCns			

Default cAlias 		:= ""
Default cAliasAux 	:= ""
Default cContrato 	:= ""
Default cCodProd 	:= ""
Default cDatCar 	:= ""
Default cCodInt 	:= ""
Default cRegAns 	:= ""
Default lRotBlo 	:= .F.
Default lBloq		:= .F.
Default oBrwUsr	 	:= Nil
Default nInd		:= 0
Default nOpc		:= K_Alterar
Default lNovoCCO	:= .F.
Default lOriTran	:= .T.
		
		

	//Posiciono na vida
	BTS->(Dbsetorder(1))	//BTS_FILIAL+BTS_MATVID
	BTS->(MsSeek(xFilial("BTS")+RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_MATVID")))

	cCodCCO := IIf(lNovoCCO,"",RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CODCCO"))
	cNomBen := AllTrim(SubStr(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_NOMUSR")+Space(70),1,70))
	cNomMae := AllTrim(SubStr(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_MAE")+Space(70),1,70))
	//Quando estamos gravando pelo cadastro de vidas ainda não temos o registro BTS definido na base, temos que pegar o valor de memoria. 
	cCns := If(IsInCallStack("PLSA955"),M->BTS_NRCRNA,AllTrim(BTS->BTS_NRCRNA))
	cCpf := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CPFUSR"))
	cCpfMae := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CPFMAE"))
	cCpfPre := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CPFPRE"))
	cCriNom := Iif(BA1->(FieldPos("BA1_CRINOM")) > 0, AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CRINOM")), "1" )//07-12
	cCriMae := Iif(BA1->(FieldPos("BA1_CRIMAE")) > 0, AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CRIMAE")), "1" )

	cMatAnt := RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_MATANT")
	cMatric := &(cAliasAux + "->BA3_CODINT")+;
					&(cAliasAux + "->BA3_CODEMP")+;
					&(cAliasAux + "->BA3_MATRIC")+;
					RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TIPREG")+;
					RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_DIGITO")
	
	//Na inclusão, o digito ainda não foi calculado. Preciso calcular...
	If Len(Alltrim(cMatric)) < 17 
		cMatric := IIF(FindFunction("StrTPLS"),Alltrim(cMatric)+Modulo11(StrTPLS(cMatric)),Alltrim(cMatric)+Modulo11(cMatric))
	EndIf	
		
	//Matricula Titular
	cMatFam := &(cAliasAux + "->(BA3_CODINT+BA3_CODEMP+BA3_MATRIC)")
	If Empty(&(cAliasAux + "->BA3_GRPFAM")) .AND. RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TIPUSU") == cCodTit
		cMatTit := ""
	Else
		cMatTit := PLSMatTit( cMatFam,cCodTit, AllTrim(&(cAliasAux + "->BA3_GRPFAM")) )
		
		If !(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TIPUSU") == cCodTit) .and. cMatTit == ""
			cMatTit := "AUTO"
		EndIf
	EndIf
			
			
	cRegAns := POSICIONE("BA0",1,xFilial("BA0")+&(cAliasAux + "->BA3_CODINT"),"BA0_SUSEP")

	If !Empty(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CODPLA")+;
				RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_VERSAO"))
		cCodProd := RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CODPLA")+;
					RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_VERSAO")
	ElseIf !Empty(&(cAliasAux + "->(BA3_CODPLA+BA3_VERSAO)"))
		cCodProd := &(cAliasAux + "->(BA3_CODPLA+BA3_VERSAO)")
	EndIf

	cSexo := RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_SEXO")
	If !Empty(cSexo)
		If RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_SEXO") == "1"
			cSexoSip := "1"
		ElseIf RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_SEXO") == "2"
			cSexoSip := "3"
		EndIf
	EndIf

	cTraOri := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TRAORI"))
	cTraDes := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TRADES"))
	
	dDatNasc := AjusData(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_DATNAS"))
	
	dDatInc := AjusData(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_DATINC"))
	
	cContrato :=	&(cAliasAux + "->BA3_CODEMP")+;
					&(cAliasAux + "->BA3_CONEMP")+;
					&(cAliasAux + "->BA3_VERCON")+;
					&(cAliasAux + "->BA3_SUBCON")+;
					&(cAliasAux + "->BA3_VERSUB")
	cDatCar := AjusData(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_DATCAR"))
	cCodInt := &(cAliasAux + "->BA3_CODINT")


	//Plano origem (Portabilidade)
	If !Empty(&(cAliasAux + "->BA3_PLPOR")) .Or. !Empty(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_PLPOR"))
		If !Empty(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_PLPOR"))
			cPlaPor := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_PLPOR"))
		Else
			cPlaPor := AllTrim(&(cAliasAux + "->BA3_PLPOR"))
		EndIf
	Else
		cPlaPor := ''
	EndIf

	// Numero do CNPJ da pessoa juridica contratante do plano coletivo
 	If &(cAliasAux + "->BA3_TIPOUS") <> "1" //Beneficiario PJ
		BQC->(dbSetOrder(1))
		If BQC->(MsSeek(xFilial("BQC")+cCodInt+cContrato ))
			If Empty(BQC->BQC_CNPJ) .AND. Empty(BQC->BQC_CEINSS) .AND. Empty(BQC->BQC_CAEPF)
				If SA1->(MsSeek(xFilial("SA1")+BQC->(BQC_CODCLI+BQC_LOJA)))
					cCNPJ := IIf (CNPJ(SA1->A1_CGC),SA1->A1_CGC,"")
					cCEI := SA1->A1_CEINSS
				Else
					aRetCli := PLSRETNCB(cCodInt,RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CODEMP"),;
										 RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_MATRIC"),RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_OPEORI"))
					If aRetCli[1]
						If SA1->(msSeek(xFilial("SA1")+&(cAliasAux + "->(BA3_CODCLI+BA3_LOJA)")))
							cCNPJ := IIf (CNPJ(SA1->A1_CGC),SA1->A1_CGC,"") 
							cCEI := SA1->A1_CEINSS
						EndIf
					EndIf
				EndIf
			Else
				cCNPJ := IIf (CNPJ(BQC->BQC_CNPJ),BQC->BQC_CNPJ,"") 
				cCEI := BQC->BQC_CEINSS
				If BQC->(FieldPos('BQC_CAEPF')) > 0
					cCaepf := BQC->BQC_CAEPF
				EndIf
			EndIf
		EndIf
	EndIf
	cCaepf := Alltrim(IIf(Empty(cCNPJ),cCaepf,""))
	cCeicon := Alltrim(IIf(Empty(cCaepf),cCEI,""))
	//Declaração Nascido Vivo
	If dDatNasc >= STOD("20070101") .AND. Len(alltrim(BTS->BTS_DENAVI)) == 11
		cDN := AllTrim(BTS->BTS_DENAVI)
	Else
		cDN := ""
	EndIf

	// Relacao de dependencia
	//Grau de parentesco
	cGrauPa := PLSGrauPa(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_GRAUPA"),AllTrim(&(cAliasAux + "->BA3_GRPFAM")),cMatric)
	
	//Registro do Plano
	lAchouProd := BI3->(MsSeek(xFilial("BI3")+cCodInt+RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CODPLA")+RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_VERSAO"))) // Produto no usuario
	If !lAchouProd
		lAchouProd := BI3->(MsSeek(xFilial("BI3")+&(cAliasAux + "->(BA3_CODINT+BA3_CODPLA+BA3_VERSAO)"))) // Produto na familia
		If !lAchouProd
			If &(cAliasAux + "->BA3_TIPOUS") <> "1" // Beneficiario PJ -- 1 = Fisico | 2 Juridico 
				If BQC->(MsSeek(cCodInt+cContrato)) // Posicona o BQC
					If BT6->(MsSeek(xFilial("BT6")+cCodInt+cContrato)) // Produto no Sub-contrato
						lAchouProd := BI3->(MsSeek(xFilial("BI3")+BT6->(BT6_CODINT+BT6_CODPRO+BT6_VERSAO)))
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf
	

	If lAchouProd
		If BI3->BI3_APOSRG == "0"
			cSCPA  := AllTrim(BI3->BI3_SCPA)
		ElseIf BI3->BI3_APOSRG == "1"
			cSUSEP := AllTrim(BI3->BI3_SUSEP)
		ElseIf BI3->BI3_APOSRG == "2" .OR. Empty(BI3->BI3_APOSRG)
			If !Empty(AllTrim(BI3->BI3_SUSEP))
				cSUSEP := AllTrim(BI3->BI3_SUSEP)
			Else
				cSCPA  := AllTrim(BI3->BI3_SCPA)
			EndIf
		EndIf
	Else
		cSUSEP := StrZero(0,9,0)		
		cSCPA := StrZero(0,20,0)
	EndIF

	//Tipo endereço
	If BA1->(FieldPos('BA1_TIPEND')) > 0
		cTipEnd := RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TIPEND")
	Else
		cTipEnd := "2"
	EndIf

	// Indicacao se a residencia do beneficiario e no Brasil (0) ou no exterior(1)
	If BA1->(FieldPos('BA1_RESEXT')) > 0
		cResExt := RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_RESEXT")
	Else
		cResExt := "0"
	EndIf

	
	If !Empty(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_ESTADO"))
		cUF := RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_ESTADO")
	ElseIf !Empty(&(cAliasAux + "->BA3_ESTADO"))
		cUF := &(cAliasAux + "->BA3_ESTADO")
	EndIf
	
	If cResExt != "1" 
		
		cEndere := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_ENDERE"))
		cNumEnd := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_NR_END"))
		cComple := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_COMEND"))
		cBairro := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_BAIRRO"))
		cCodMun := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CODMUN"))
		cCepUsr := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_CEPUSR"))
		// Codigo do municipio de residencia do beneficiario, caso o endereco informado seja indicado como endereco profissional
		If BA1->(FieldPos('BA1_RESEXT')) > 0
			cMunRes := A782TamCmp(6,AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_MUNRES")))
		Else
			cMunRes := ""
		EndIf
	
	Else		
		cEndere := ""
		cNumEnd := ""
		cComple := ""
		cBairro := ""
		cCodMun := ""
		cCepUsr := ""
		cMunRes := ""
	EndIf

	If !Empty(AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_PISPAS")))
		cPispas := AllTrim(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_PISPAS"))
	Else
		cPispas := AllTrim(BTS->BTS_PISPAS)
	EndIf

	If lRotBlo
	
		If lBloq
			If M->BCA_DATA <> Nil
				dDatBlo := M->BCA_DATA
			ElseIf M->BC3_DATA <> Nil
				dDatBlo := M->BC3_DATA
			Else
				dDatBlo := CTOD("")
			EndIf
			cSitAns := "I"
		Else
			If M->BCA_DATA <> Nil
				dDatRea := M->BCA_DATA
			ElseIf M->BC3_DATA <> Nil
				dDatRea := M->BC3_DATA
			Else
				dDatRea := CTOD("") 
			EndIf
			cSitAns := "A"
			dDatBlo := UltDtBlo(&(cAliasAux+"->BA3_CODINT")+&(cAliasAux+"->BA3_CODEMP")+&(cAliasAux+"->BA3_MATRIC"),;
							RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TIPREG"))
		EndIf
		
		If !Empty(M->BCA_MOTBLO)
			
			cMotBlo := PlMotBloANS(M->BCA_NIVBLQ,M->BCA_MOTBLO)
		ElseIf !Empty(M->BC3_MOTBLO)
			cMotBlo := PlMotBloANS(M->BC3_NIVBLQ,M->BC3_MOTBLO)
		EndIf
	Else
		
	
		aDadBlo := PlDadBlo(&(cAliasAux+"->BA3_CODINT")+&(cAliasAux+"->BA3_CODEMP")+&(cAliasAux+"->BA3_MATRIC"),;
							RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_TIPREG"),@dDatBlo,@cMotBlo,@dDatRea)
		
		If Empty(dDatBlo)
			dDatBlo := AjusData(RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_DATBLO"))
		EndIf	
		If Empty(cMotBlo)
			cMotBlo := PlMotBloANS("U",RetVlrBrw(oBrwUsr,nInd,cAlias,"BA1_MOTBLO"))
		EndIf
		nLen := Len(aDadBlo)
		If (nLen == 0 .AND. Empty(dDatBlo) ) .OR.  (nLen > 0 .AND. aDadBlo[nLen,TIPO_BLOQ] == "1")
			cSitAns := "A"
		Else
			cSitAns := "I"
		EndIf
	EndIf
	
	If ExistBlock("PLRETMAT")
   		cMatAux := ""
   		cMatAux := ExecBlock("PLRETMAT",.F.,.F.,{ cAlias } )
   		If !Empty(cMatAux)
   			cMatAnt := cMatAux
   		EndIf
   	EndIf
	
	oModel := CenLoadModel():New()

	//Posiciono no beneficiario da Central (no destino do desmembramento eu uso a matrícula de origem)
	B3K->(DbSetOrder(1)) //B3K_FILIAL+B3K_CODOPE+B3K_MATRIC

	If nOpc == K_Excluir 
		B3K->(MsSeek(xFilial("B3K")+cRegAns+cMatric ) )
		nOpcMVC := MODEL_OPERATION_DELETE
	ElseIf B3K->(MsSeek(xFilial("B3K")+cRegAns+IIf(!lNovoCCO .AND. !lOriTran,cTraOri,cMatric) ) )
		nOpcMVC := MODEL_OPERATION_UPDATE		
	Else
		nOpcMVC := MODEL_OPERATION_INSERT
	EndIf 
		
	oModel:SetOperation( nOpcMVC )
	oModel:Activate()
		
	aRetDad := {cRegAns,cCodCCO,cMatric,dDatNasc,dDatInc,cUF,cCodProd,cSexoSip,cNomBen,cMatAnt,cPispas,cNomMae,cDN,cCns,cEndere,;
	     		cNumEnd,cComple,cBairro,cCodMun,cMunRes,cCepUsr,cTipEnd,cResExt,cGrauPa,cMatTit,cSUSEP,cSCPA,cPlaPor,PLSIBCPT(dDataBase,cMatric),;
				cCNPJ,cTraOri,cTraDes,cCpf,cCpfMae,cCpfPre,SubStr(cMotBlo,1,2),dDatBlo,cCriNom,cCriMae, lRotBlo,lBloq,cCaepf	}				
					   	
	
	If lPLSA260DAD	 			  
	   
	   If cOrigem $ '3,4' //Caso os dados estejam sendo pegos da tela, preciso posicionar a tabela para o PE
	     BA1->(DbSetOrder(2))
	     BA1->(MsSeek(xFilial("BA1")+cMatric))	   	  	
	   EndIf 	
	   
	   aRetAUX := ExecBlock("PLSA260DAD",.F.,.F.,aRetDad) 	
	   aRetDad := aClone(aRetAUX)
	   		   		   	
	EndIf
			
	If nOpc <> K_Excluir 					
		oModel:SetValue( "B3KMASTER", 'B3K_FILIAL'	, xFilial('B3K') )
		oModel:SetValue( "B3KMASTER",  'B3K_CODOPE'	, aRetDad[1] )
		oModel:SetValue( "B3KMASTER",  'B3K_CODCCO'	, aRetDad[2] )
		oModel:SetValue( "B3KMASTER",  'B3K_MATRIC'	, aRetDad[3] )
		oModel:SetValue( "B3KMASTER",  'B3K_DATNAS'	, aRetDad[4] )
		oModel:SetValue( "B3KMASTER",  'B3K_DATINC'	, aRetDad[5] )
		oModel:SetValue( "B3KMASTER",  'B3K_UF'		, aRetDad[6] )
		oModel:SetValue( "B3KMASTER",  'B3K_CODPRO'	, aRetDad[7] )
		oModel:SetValue( "B3KMASTER",  'B3K_ATUCAR'	, "1")
		oModel:SetValue( "B3KMASTER",  'B3K_STATUS'	, "1")
		oModel:SetValue( "B3KMASTER",  'B3K_STASIB'	, "1")
		oModel:SetValue( "B3KMASTER",  'B3K_STAESP'	, "1")
		oModel:SetValue( "B3KMASTER",  'B3K_SEXO'	, aRetDad[8] )
	
		//Campos inseridos a partir da implementação do SIB
		oModel:SetValue( "B3KMASTER",  'B3K_NOMBEN', aRetDad[9] )
		oModel:SetValue( "B3KMASTER",  'B3K_MATANT', aRetDad[10] )
		oModel:SetValue( "B3KMASTER",  'B3K_PISPAS', aRetDad[11] )
		oModel:SetValue( "B3KMASTER",  'B3K_NOMMAE', aRetDad[12] )
		oModel:SetValue( "B3KMASTER",  'B3K_DN'    , aRetDad[13] ) // Numero da Declaracao de Nascido Vivo
		oModel:SetValue( "B3KMASTER",  'B3K_CNS'   , aRetDad[14] )
		oModel:SetValue( "B3KMASTER",  'B3K_ENDERE', aRetDad[15] )
		oModel:SetValue( "B3KMASTER",  'B3K_NR_END', aRetDad[16] )
		oModel:SetValue( "B3KMASTER",  'B3K_COMEND', aRetDad[17] )
		oModel:SetValue( "B3KMASTER",  'B3K_BAIRRO', aRetDad[18] )
		oModel:SetValue( "B3KMASTER",  'B3K_CODMUN', aRetDad[19] )
		oModel:SetValue( "B3KMASTER",  'B3K_MUNICI', aRetDad[20] )
		oModel:SetValue( "B3KMASTER",  'B3K_CEPUSR', aRetDad[21] )
		oModel:SetValue( "B3KMASTER",  'B3K_TIPEND', aRetDad[22] )
		oModel:SetValue( "B3KMASTER",  'B3K_RESEXT', aRetDad[23] )
		oModel:SetValue( "B3KMASTER",  'B3K_TIPDEP', aRetDad[24] )
		oModel:SetValue( "B3KMASTER",  'B3K_CODTIT', aRetDad[25] )
		oModel:SetValue( "B3KMASTER",  'B3K_SUSEP' , Regex(aRetDad[26], {"-","/","\","."}))
		oModel:SetValue( "B3KMASTER",  'B3K_SCPA'  , Regex(aRetDad[27], {"-","/","\","."}))
		oModel:SetValue( "B3KMASTER",  'B3K_PLAORI', aRetDad[28] )
		oModel:SetValue( "B3KMASTER",  'B3K_COBPAR', aRetDad[29] )
		oModel:SetValue( "B3KMASTER",  'B3K_ITEEXC', "0" )
		oModel:SetValue( "B3KMASTER",  'B3K_CNPJCO', Regex(aRetDad[30], {"-","/","\","."}))
		oModel:SetValue( "B3KMASTER",  'B3K_CEICON', Regex(cCeicon, {"-","/","\","."}))
		If B3K->(FieldPos("B3K_CAEPF")) > 0
			oModel:SetValue( "B3KMASTER",  'B3K_CAEPF'	, Regex(aRetDad[42], {"-","/","\","."}) )
		EndIf	
		oModel:SetValue( "B3KMASTER",  'B3K_TRAORI', aRetDad[31] )
		oModel:SetValue( "B3KMASTER",  'B3K_TRADES', aRetDad[32] )
		oModel:SetValue( "B3KMASTER",  'B3K_CPF'   , aRetDad[33] )
		oModel:SetValue( "B3KMASTER",  'B3K_CPFMAE', aRetDad[34] )
		oModel:SetValue( "B3KMASTER",  'B3K_CPFPRE', aRetDad[35] )
		If !Empty(cSitAns)
			oModel:SetValue( "B3KMASTER",  'B3K_SITANS', cSitAns )
		EndIf
		If lBloq
			oModel:SetValue( "B3KMASTER",  'B3K_MOTBLO', aRetDad[36] )
		EndIF	
		oModel:SetValue( "B3KMASTER",  'B3K_DATBLO'	, aRetDad[37] )
		If B3K->(FieldPos("B3K_CRINOM")) > 0
			oModel:SetValue( "B3KMASTER",  'B3K_CRINOM', aRetDad[38] )
		EndIf	
		If B3K->(FieldPos("B3K_CRIMAE")) > 0
			oModel:SetValue( "B3KMASTER",  'B3K_CRIMAE'	, aRetDad[39] )
		EndIf	
		If !Empty(dDatRea)
			oModel:SetValue( "B3KMASTER",  'B3K_DATREA' , dDatRea )
		EndIf
		If !Empty(cSitAns)
			oModel:SetValue( "B3KMASTER",  'B3K_SITANS', cSitAns )
		EndIf
	EndIf
	
RestArea(aAreaBTS)
RestArea(aAreaBA1)
RestArea(aAreaBA3)

Return oModel

//-----------------------------------------------------------------------------
/*/{Protheus.doc} UltDtDesBlo
Retorna data do inicio do bloqueio 

@author PLS TEAM
@version P12
@since   09.16
/*/
//-----------------------------------------------------------------------------
Static Function UltDtBlo(cChave, cTipReg)
Local cAliIni		:= GetNextAlias()

Local dDatIniBlo	:= dDataBase

Local cTipo := "0"

	BeginSql  Alias cAliIni
		SELECT BCA_DATA FROM %table:BCA% BCA
			WHERE 	BCA_FILIAL = %xFilial:BCA%
				AND BCA_MATRIC 		= %exp:cChave%
				AND BCA_TIPREG 	= %exp:cTipReg%
				AND BCA_TIPO 	= %exp:cTipo%
				//AND BCA_DATA 	<= %exp:dData%
				AND BCA.%notDel%
		ORDER BY BCA_DATA DESC , BCA.R_E_C_N_O_ 

	EndSql
	
	// Armazenando a data de bloqueio gravada no historico (se houver) 
	If !(cAliIni)->(Eof())
		dDatIniBlo 	:= StoD((cAliIni)->BCA_DATA)
    EndIf
	
	(cAliIni)->(DbCloseArea())

Return dDatIniBlo 

//--------------------------------------------------------------------------------------------------
/*/{Protheus.doc} AjusData

Recupera valor do browse ou do Alias informado

@param xData		Data a ser ajustada

@return dData		Valor de retorno

@author everton.mateus
@since 16/05/2016
/*/
//--------------------------------------------------------------------------------------------------
Static Function AjusData(xData)
Local dData := STOD("")

If ValType( xData ) == "C"
	dData := STOD(xData)
Else
	dData := xData
EndIf

Return dData

//--------------------------------------------------------------------------------------------------
/*/{Protheus.doc} AjusData

Recupera valor do browse ou do Alias informado

@param xData		Data a ser ajustada

@return dData		Valor de retorno

@author everton.mateus
@since 16/05/2016
/*/
//--------------------------------------------------------------------------------------------------
Static Function PlDadBlo(cMatric,cTipReg,dDatBlo,cMotBlo,dDatRea)
Local aDadBlo := {}

Default dDatBlo := STOD("")
Default cMotBlo := ""
Default dDatRea := STOD("")

If !Empty(cMatric+cTipReg)

	BCA->( dbSetorder(1) )
	If BCA->( MsSeek(xFilial("BCA") + cMatric+cTipReg ) )

		While !BCA->( Eof() ) .and. BCA->(BCA_MATRIC+BCA_TIPREG) == cMatric+cTipReg
			
			cMotivo := PlMotBloANS("U",BCA->BCA_MOTBLO)
			aAdd(aDadBlo,{BCA->BCA_DATA,BCA->BCA_TIPO,BCA->BCA_MATRIC,cMotivo,BCA->BCA_HORLAN})
			
			If BCA->BCA_TIPO == "0"
				If BCA->BCA_DATA >= dDatBlo
					dDatBlo := BCA->BCA_DATA
					cMotBlo := cMotivo
				EndIf 
			Else
				If BCA->BCA_DATA >= dDatRea
					dDatRea := BCA->BCA_DATA
				EndIf 
			EndIf
			
			BCA->( dbSkip() )
		Enddo
		//Ordem decrescente por data
		ASort(aDadBlo, , , { | x,y | x[DATA_BLOQ] < y[DATA_BLOQ] } )
	Endif

EndIf
Return aDadBlo
//--------------------------------------------------------------------------------------------------
/*/{Protheus.doc} PLSGrauPa

Recupera valor do browse ou do Alias informado

@param cAlias			Alias principal com os dados do beneficiário
@param oBrwUsr			Objeto browse com informacoes do usuario
@param nInd			Indice da linha do browse
@param cCampo			Campo para o 

@return xRet		Valor de retorno

@author everton.mateus
@since 16/05/2016
/*/
//--------------------------------------------------------------------------------------------------
Function PLSGrauPa(cGrauPa,cGrpFam,cMatric)

Local aAreaBA1 := BA1->(GetArea())
Local aArea := BA3->(GetArea())

Default cGrauPa := "10"

BA1->(DbSetOrder(2))
BRP->(dbSetOrder(1))
If BA1->(MsSeek(xFilial("BA1")+cMatric)) 
	cTraOri := BA1->BA1_TRAORI
	//A familia não é desmembrada (grpfam está vazio) ou o beneficiário foi incluído direto nessa família
	If Empty(cGrpFam) .OR. Empty(cTraOri) 
		BRP->(dbSetOrder(1))
		If BRP->(MsSeek(xFilial("BRP")+cGraupa)) .AND. !Empty(BRP->BRP_CODSIB)
			cGrauPa := BRP->BRP_CODSIB
		EndIf
	Else //A familia é desmembrada e o beneficiário veio transferido
		BA3->(DbSetOrder(1))
		If BA3->(MsSeek(xFilial("BA3")+cGrpFam)) .AND. BA1->(MsSeek(xFilial("BA1")+cTraOri)) 
			cGrauPa := PLSGrauPa(BA1->BA1_GRAUPA,AllTrim(BA3->BA3_GRPFAM),cTraOri)
		EndIf
	EndIf
Else
	If BRP->(MsSeek(xFilial("BRP")+cGraupa)) .AND. !Empty(BRP->BRP_CODSIB)
		cGrauPa := BRP->BRP_CODSIB
	EndIf
EndIf

RestArea(aArea)
RestArea(aAreaBA1)

Return cGrauPa


//--------------------------------------------------------------------------------------------------
/*/{Protheus.doc} RetVlrBrw

Recupera valor do browse ou do Alias informado

@param cAlias			Alias principal com os dados do beneficiário
@param oBrwUsr			Objeto browse com informacoes do usuario
@param nInd			Indice da linha do browse
@param cCampo			Campo para o 

@return xRet		Valor de retorno

@author everton.mateus
@since 16/05/2016
/*/
//--------------------------------------------------------------------------------------------------
Static Function RetVlrBrw(oBrwUsr,nInd,cAlias,cCampo)
Local xRet := ""
Local nHeader := 0

Default oBrwUsr 	:= Nil
Default nInd 		:= 0
Default cAlias 	:= ""

	If oBrwUsr != Nil

		nHeader := oBrwUsr:FieldPos(cCampo,oBrwUsr:aHeader)
		If nHeader > 0
			xRet := oBrwUsr:aCols[nInd,nHeader]
		EndIf
	ElseIf !Empty(cAlias)
		xRet := &(cAlias + "->" + cCampo)
	EndIf
Return xRet


Static Function RetValor(aValores,cCampo)
Local xValor 	:= ""

Local nPos 	:= 0

Default cCampo := ""
Default aValores := {}

If Len(aValores) > 0
	nPos := aScan(aValores,{|x|x[1] == cCampo })
	If nPos > 0
		xValor := aValores[nPos][2]
	EndIf
EndIf

Return xValor
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A782TamCmpºAutor  ³Microsiga           º Data ³  27/05/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Ajusta o tamanho da string retornada para o tamanho que de-º±±
±±º          ³ ve ser enviado no arquivo                                  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ SIGAPLS                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A782TamCmp(nTam,cVal,lZero)

Local cRet := ""
Default lZero = .F.

If Len(cVal) > nTam
	cRet := SubStr(cVal,1,nTam)
Else
	cRet := cVal
EndIf

If lZero // vou completar com zeros
	If ValType(cRet) == "N"
		cRet := StrZero(cRet,nTam)
	Else
		cRet := StrZero(Val(cRet),nTam)
	EndIf
EndIf

Return cRet

//-----------------------------------------------------------------------------
/*/{Protheus.doc} PlMotBloANS
Motivo de bloqueio ANS

@author PLS TEAM
@version P12
@since   09.16
/*/
//-----------------------------------------------------------------------------
Function PlMotBloANS(cNivel,cMot)
Local cMotBlo := ""

Default cNivel := "U"
Default cMot := ""

If !Empty(Alltrim(cMot))

	Do Case
	
		Case cNivel == "U" // Nivel de Usuario
			
			BG3->(dbSetOrder(1))
			
			If  BG3->(msSeek(xFilial("BG3")+cMot))
				cMotBlo := Substr(BG3->BG3_BLQANS,1,2)
			EndIf
			
		Case cNivel == "F" // Nivel de Familia
	
			BG1->(dbSetOrder(1))
	
			If  BG1->(MsSeek(xFilial("BG1")+cMot))
				cMotBlo := Substr(BG1->BG1_BLQANS,1,2)
			EndIf
			
		Case cNivel == "S" // Nivel de Sub-Contrato
	
			BQU->(dbSetOrder(1))
	
			If  BQU->(MsSeek(xFilial("BQU")+cMot))
				cMotBlo := Substr(BQU->BQU_BLQANS,1,2)
			EndIf
	
	EndCase

EndIf

Return cMotBlo

//--------------------------------------------------------------------------------------------------
/*/{Protheus.doc} PlAtuEndTi

Replica a informação para os dependentes que usam o endereço do titular

@param cMatFam		Matrícula da Família
@param cCepUsr		Cep
@param cEndere		Logradouro
@param cBairro		Bairro
@param cMunici		Municipio
@param cEstado		Estado
@param cCodMun		Município de Residência. Preenchido quando o tipo de endereço é profissional
@param cNrEnd		Número
@param cComend		Complemento
@param cTipEnd 	Tipo de Endereço (Comercial/Residencial)
@param cResExt		Reside no exterior (Sim / Não)

@author everton.mateus
@since 16/05/2016
/*/
//--------------------------------------------------------------------------------------------------
Static Function AtuEndTit(cCepUsr,cEndere,cBairro,;
						cMunici,cEstado,cCodMun,cNrEnd,cComend,;
						cTipEnd,cResExt,cOriEnd)
Local lRet := .T.

Local cTipTit := SuperGetMv("MV_PLCDTIT")

Local nInd := 0

Default cCepUsr	:= ""
Default cEndere	:= ""
Default cBairro	:= ""
Default cMunici	:= ""
Default cEstado	:= ""
Default cCodMun	:= ""
Default cNrEnd	:= ""
Default cComend	:= ""
Default cTipEnd 	:= ""
Default cResExt	:= ""
Default cOriEnd	:= "1" //1=Titular;5=Res. fam.

nLenBrw := Len(oBrwUsr:aCols)
For nInd := 1 To nLenBrw 

	If oBrwUsr:FieldGet("BA1_TIPUSU",nInd) != cTipTit .AND. oBrwUsr:FieldGet("BA1_ORIEND",nInd) $ '1|5' //1=Titular
		
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_CEPUSR",oBrwUsr:aHeader)] := cCepUsr 
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_ENDERE",oBrwUsr:aHeader)] := cEndere 
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_BAIRRO",oBrwUsr:aHeader)] := cBairro 
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_MUNICI",oBrwUsr:aHeader)] := cMunici 
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_ESTADO",oBrwUsr:aHeader)] := cEstado 
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_CODMUN",oBrwUsr:aHeader)] := cCodMun 
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_NR_END",oBrwUsr:aHeader)] := cNrEnd 
		oBrwUsr:aCols[nInd,PLRETPOS("BA1_COMEND",oBrwUsr:aHeader)] := cComend 
		If !Empty(cTipEnd)
			oBrwUsr:aCols[nInd,PLRETPOS("BA1_TIPEND",oBrwUsr:aHeader)] := cTipEnd 
		EndIf
		If !Empty(cResExt)
			oBrwUsr:aCols[nInd,PLRETPOS("BA1_RESEXT",oBrwUsr:aHeader)] := cResExt
		EndIf 

	EndIf
		
Next nInd

Return lRet

//-----------------------------------------------------------------------------
/*/{Protheus.doc} PLVALVIDC
Valida a vigência dos documentos

@version P12
@since    09.16
/*/
//-----------------------------------------------------------------------------
FUNCTION PLVALVIDC()

LOCAL lVigente := .T.

If !EMPTY(M->BCP_DATINC)
	lVigente :=  PLSVLDVIG("BCP",0,oBrwBCP,"BCP_DATINC","BCP_DATVAL",{"01",M->BCP_CODDOC, "BCP_CODDOC"},,,,.T.,!EMPTY(M->BCP_DATVAL))
EndIf

Return lVigente

//-----------------------------------------------------------------------------
/*/{Protheus.doc} PLSA260OPC
Ajusta opcional dos dependentes

@version P12
@since    09.16
/*/
//-----------------------------------------------------------------------------

Static function PLSA260OPC(cMatric,ddatblo,cCodop,cVersao,cMotivo,;
								cTipo)
Local aArea := GetArea()
local nCont:=0
local cOpcional := GetNextAlias()
local cQuery := ''
Default cTipo := "0"

// BF4 - Opcionais do usuario
//Vamos validar se a data digitada no bloqueio é menor que a data de inclusao do dependente
//Se for menor, nao vamos inserir o bloqueio no dependente, apenas nos dados do titular.
cQuery := "SELECT * FROM "+ RetSqlName("BF4") + " BF4 WHERE BF4_FILIAL = '"+xFilial("BF4")+"'
cQuery += "AND BF4_CODINT+BF4_CODEMP+BF4_MATRIC = '"+cMatric+"' AND D_E_L_E_T_ = ''"
cQuery := ChangeQuery(cQuery)
dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cOpcional,.F.,.T.)
While !(cOpcional)->(Eof()) 
	If 	(cOpcional)->(BF4_CODINT+BF4_CODEMP+BF4_MATRIC) == cMatric .AND.;
		(cOpcional)->BF4_CODPRO == cCodop .AND. (cOpcional)->BF4_VERSAO ==cVersao 
		For nCont := 1 To Len(oBrwOUsu:aColsNoFil)//2709
			If ((cOpcional)->BF4_CODPRO == oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_CODPRO")] .AND. ;
				(cOpcional)->BF4_VERSAO == oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_VERSAO")]) 
				// .AND. oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_TIPREG")] == (cOpcional)->BF4_TIPREG
				
				nPosUsr := Ascan(oBrwUsr:aCols, {|x| x[oBrwUsr:FieldPos("BA1_TIPREG")] == oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_TIPREG")]  })
									
				If nPosUsr > 0 .AND. ;
					Empty(oBrwUsr:aCols[nPosUsr,oBrwUsr:PlRetPos("BA1_MOTBLO")]) .AND.;
					Empty(oBrwUsr:aCols[nPosUsr,oBrwUsr:PlRetPos("BA1_DATBLO")]) .AND.;
					(oBrwUsr:aCols[nPosUsr,oBrwUsr:PlRetPos("BA1_DATINC")] <= M->BF4_DATBLO .OR. cTipo == '1')

					//oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_DATBAS")] := M->BF4_DATBAS
					oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_DATBLO")] := M->BF4_DATBLO
					oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_DESBLO")] := M->BF4_DESBLO
					oBrwOUsu:aColsNoFil[nCont,oBrwOUsu:PlRetPos("BF4_MOTBLO")] := M->BF4_MOTBLO
					aadd(aVetBloUsu,{(cOpcional)->(BF4_CODINT+BF4_CODEMP+BF4_MATRIC),;
										(cOpcional)->BF4_TIPREG,;
										(cOpcional)->BF4_CODPRO,;
										(cOpcional)->BF4_VERSAO,;
										M->BF4_MOTBLO,;
										IIF(M->BF4_TIPBLO == '0' .And. !Empty(M->BF4_DATBLO),M->BF4_DATBLO,M->BF4_DATBAS),;
										cTipo,;
										cUserName,;
										"I",;
										oBrwUsr:ACOLS[oBrwUsr:obrowse:nAt][GdFieldPos("BA1_MATVID",oBrwUsr:aHeader)] })
				EndIf
			Endif
		NEXT
	EndIf
	(cOpcional)->( dbSkip() )
Enddo

(cOpcional)->(DBCloseArea())

BF4->(RestArea(aArea))

Return()

//-----------------------------------------------------------------------------
/*/{Protheus.doc} AtualizaBDQ
@description Atualização da Tabela BDQ
@author Caio Cesar Lucas Maciente
@version P12
@since   17/10/2016
/*/
//-----------------------------------------------------------------------------
Function AtualizaBDQ(nPosUsr,cCodprodut,cVersaoPro)
Local nX,nY,nJ 	:= 0
Local aDadDes		:= {}
Local aChvBA1		:= {}
Default cCodprodut	:= M->BA3_CODPLA
Default cVersaoPro	:= M->BA3_VERSAO

If M->BA3_FORPAG == __cForCob_ .And. Empty(M->BA3_DATBLO) .And. Empty(M->BA3_MOTBLO)

	aAdd( aChvBA1 , {( BA1->BA1_CODINT + BA1->BA1_CODEMP + BA1->BA1_MATRIC + M->BA1_TIPREG ) , BA1->BA1_MATRIC , M->BA1_TIPREG , BA1->(Recno()) } )

EndIf

	//ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
	//º Recupera as Informacoes referentes aos descontos do Sub-Contrato.		 º
	//ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼

BFT->( DBSetOrder(1) ) //BFT_FILIAL+BFT_CODIGO+BFT_NUMCON+BFT_VERCON+BFT_SUBCON+BFT_VERSUB+BFT_CODPRO+BFT_VERPRO+BFT_CODFOR+BFT_CODQTD+BFT_CODFAI
cChvBFT := xFilial("BFT") + M->BA3_CODINT + M->BA3_CODEMP + M->BA3_CONEMP + M->BA3_VERCON + M->BA3_SUBCON + M->BA3_VERSUB + cCodproduto +cVersaoPro + __cForCob_
If BFT->( DBSeek( cChvBFT ) )

	While BFT->(!Eof()) .And. BFT->(BFT_FILIAL+BFT_CODIGO+BFT_NUMCON+BFT_VERCON+BFT_SUBCON+BFT_VERSUB+BFT_CODPRO+BFT_VERPRO+BFT_CODFOR) == cChvBFT

		aAdd( aDadDes ,	{ ;
			BFT->BFT_CODFAI	,;
			BFT->BFT_TIPUSR	,;
			BFT->BFT_GRAUPA,;
			BFT->BFT_TIPO		,;
			BFT->BFT_PERCEN,;
			BFT->BFT_VALOR	,;
			BFT->BFT_QTDDE	,;
			BFT->BFT_QTDATE	,;
			BFT->BFT_DATDE	,;
			BFT->BFT_DATATE	 ,;
			BFT->BFT_CODFOR,;
			BFT->BFT_AUTOMA,;
			} )
		BFT->(DBSkip())

	EndDo

EndIf

Begin Transaction

	//ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
		//º Verifica para apagar Faixas que Nao existem mais no Sub-Contrato.		 º
		//ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
		If len(aDadDes) > 0
			For nX := 1 To Len( aChvBA1 )
				
				BDQ->(DBSetOrder(1))//BDQ_FILIAL+BDQ_CODINT+BDQ_CODEMP+BDQ_MATRIC+BDQ_TIPREG+BDQ_CODFAI
				cChvBDQ := xFilial("BDQ") + aChvBA1[nX][01] // CodInt + CodEmp + Matric + TipReg
				If BDQ->( DBSeek( cChvBDQ ) )
					While BDQ->(!Eof()) .And. BDQ->( BDQ_FILIAL + BDQ_CODINT + BDQ_CODEMP + BDQ_MATRIC + BDQ_TIPREG ) == cChvBDQ
						RecLock( "BDQ" , .F. )
						BDQ->( DBDelete() )
						BDQ->( MSUnlock() )
						BDQ->(DBSkip())
					EndDo
				EndIf
			Next nX
		EndIf	

		//ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
		//º Atualiza/Cria as Faixas no Cadastro de Descontos em nivel de Usuario.	 º
		//ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
	If !Empty(oBrwBDK:aCols) //aCols das Faixa Etaria
		For nX := 1 To Len( aChvBA1 )
			For nY := 1 To Len( oBrwBDK:aCols )
				For nJ:= 1 to Len(ADaddES)
					
					If nY <> nPosUsr
						loop
					Endif

					BDQ->( RecLock( "BDQ" , .T. ) )
					BDQ->BDQ_FILIAL	:= xFilial("BDQ")
					BDQ->BDQ_CODINT	:= M->BA3_CODINT
					BDQ->BDQ_CODEMP	:= M->BA3_CODEMP
					BDQ->BDQ_MATRIC	:= aChvBA1[nX][02]
					BDQ->BDQ_TIPREG	:= aChvBA1[nX][03]
					BDQ->BDQ_CODFAI	:= aDadDes[nJ][01]
					BDQ->BDQ_TIPO		:= aDadDes[nJ][04]
					BDQ->BDQ_PERCEN	:= aDadDes[nJ][05]
					BDQ->BDQ_VALOR	:= aDadDes[nJ][06]
					BDQ->BDQ_QTDMIN	:= aDadDes[nJ][07]
					BDQ->BDQ_QTDMAX	:= aDadDes[nJ][08]
					BDQ->BDQ_DATDE	:= aDadDes[nJ][09]
					BDQ->BDQ_DATATE	:= aDadDes[nJ][10]
					BDQ->( MSUnlock() )

				Next J
			Next nY
		Next nX
	EndIf
	End Transaction
Return
//-----------------------------------------------------------------------------
/*/{Protheus.doc} PL260CONHEC
@description Banco de conhecimento para o usuário da família
@author Karine Riquena Limp
@version P12
@since   03/10/2016
/*/
//-----------------------------------------------------------------------------
Function PL260CONHEC()
Local   cCODINT := M->BA3_CODINT
Local   cCODEMP := M->BA3_CODEMP
Local   cMATRIC := M->BA3_MATRIC
Local 	 cTIPREG := oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:PlRetPos("BA1_TIPREG")]
Local   cDIGITO := oBrwUsr:aCols[oBrwUsr:Linha(),oBrwUsr:PlRetPos("BA1_DIGITO")]
Local 	 aBkCols	:= aClone(aCols)
Local   aBkRotina := iif(type("aRotina") <> "U", aRotina, {})
PRIVATE cCadastro   	:= FunDesc()
PRIVATE aRotina := aClone(aBkRotina)

if funname() == "PLSA977AB"

	aRotina := menudef()

endif

cMatric := cCODINT+cCODEMP+cMATRIC+cTIPREG+cDIGITO

n := 1

BA1->(DbSetOrder(2))

//-------------------------------------------------------------------
//  LGPD
//-------------------------------------------------------------------
	objCENFUNLGP:useLogUser()

If BA1->(MsSeek(xFilial("BA1") + cMatric )) //Posiciona no registro do usuário
	MsDocument( "BA1", BA1->( RecNo() ), 3 )
Else
	MsgAlert( "Opção não disponível na inclusão.", "Atenção")
Endif

BA1->(DbCloseArea())

aRotina := aClone(aBkRotina)

return(.T.)


//-----------------------------------------------------------------------------
/*/{Protheus.doc} PLS260VLDP
Valida Opcional ao Fechar a tela

@version P12
@since    10.16
/*/
//-----------------------------------------------------------------------------

Function PLS260VLDP()

LOCAL lVigente:=.T.
Local aArea := GetArea()

lVigente := PLSVLDVIG("BCP",0,oBrwBCP,"BCP_DATINC","BCP_DATVAL",{"01",M->BCP_CODDOC, "BCP_CODDOC"},,,,.T.,.T.,M->BCP_ENTREG)
// Se o retorno for falso não atualiza o browser
If lVigente 
	oBrwBCP:Refresh()
EndIf
RestArea(aArea)

RETURN(lVigente)

/*/{Protheus.doc} PL260POPDAD

Atualiza os dados de forma genérica de várias tabelas 

@param cAlias			Alias de trabalho ativo
@param aCabGen			Array de cabeçalho 
@param aDadosGen		Array de Dados
@param aTrbGen			Array de Fields 
@param cFilialGen		Caso necessário alterar a Filial Genérica.  
@param cWhere			Caso necessário alterar o Where padrão da Query

@author caio.maciente
@since 05/12/2016
/*/

Function PL260POPDAD(cAlias,aCabGen,aDadosGen,aTrbGen,cFilialGen,;
						cWhere,cNaoMostra,cOrderBy)
Local cQuery := ""
Local nX := 0
Local cAliField := ""
Default aCabGen := {}
Default aDadosGen := {}
Default cFilialGen :=  xFilial(cAlias)
Default cWhere	:= ""
Default cOrderBy	:= ""
Default cNaoMostra := "" 

	If SubStr(cAlias,1,1) == "S"
		cAliField := SubStr(cAlias,2,2)
	Else
		cAliField := cAlias
	EndIf 
	
	If Len(aCabGen) == 0
		Store Header cAlias TO aCabGen For Iif(!Empty(cNaoMostra),&cNaoMostra,.T.)
	Endif

	If nOpcx == K_Incluir
		Store COLS Blank cAlias TO aDadosGen FROM aCabGen
	Else

		If Empty(cWhere)
			cWhere += cAliField+"_CODINT = '"+BA1->BA1_CODINT+"' AND "
			cWhere += cAliField+"_CODEMP = '"+BA1->BA1_CODEMP+"' AND "
			cWhere += cAliField+"_MATRIC = '"+BA1->BA1_MATRIC+"' AND "
		EndIf

		cQuery := ""

	    lQuery := .T.

	    cAliasGen := "QRYGEN"

	    cQuery := "SELECT R_E_C_N_O_ "
	    cQuery += " FROM " + RetSqlName(cAlias)
	    cQuery += " WHERE "
	    cQuery += cAliField+"_FILIAL = '"+cFilialGen+"' AND "
	    cQuery += cWhere
	    cQuery += "D_E_L_E_T_ = ' ' "
		cQuery += cOrderBy

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasGen,.F.,.T.)

		While !(cAliasGen)->(Eof())

			Aadd(aDadosGen,Array(Len(aCabGen)+1))

			(cAlias)->(MsGoto((cAliasGen)->R_E_C_N_O_))

			For nX := 1 To Len(aCabGen)
				If ( aCabGen[nX,10] !=  "V" )
					aDadosGen[Len(aDadosGen)][nX] := (cAlias)->(FieldGet(FieldPos(aCabGen[nX,2])))
				Else
					If Alltrim(aCabGen[nX,2]) ==  "BHH_DESSAD"
						aDadosGen[Len(aDadosGen)][nX] := Eval( { || BGX->(DbSetOrder(1)),BGX->(DbSeek(xFilial("BGX")+BHH->(BHH_CODINT+BHH_CODSAD))),BGX->BGX_DESCRI })
					Else
						aDadosGen[Len(aDadosGen)][nX] := CriaVar(aCabGen[nX,2],.T.)						
					Endif
				EndIf
			Next nX
			aDadosGen[Len(aDadosGen)][Len(aCabGen)+1] := .F.

			Aadd(aTrbGen, (cAliasGen)->R_E_C_N_O_ )

			(cAliasGen)->(dbSkip())
		EndDo

		If Empty(aDadosGen)
			(cAlias)->(MsGoto(0))
			Store COLS Blank cAlias TO aDadosGen FROM aCabGen
		EndIf

		(cAliasGen)->(dbCloseArea())
		
	Endif
Return


/*/{Protheus.doc} PLQYULBFB
Verifica se ultimo registro da família é bloqueio ou não, para histórico.
@author renan.martins
@since 04/2017
/*/
Function PLQYULBFB(cAlias,cChave)
Local cSql := ""
Local lRet := .F.
Local nRecno := ""
Local cAlsB := RetSqlName("BC3")

cSql := " SELECT MAX( " + cAlsB + ".R_E_C_N_O_) RECT FROM " + RetSqlName("BC3")  
cSql += " WHERE 	BC3_FILIAL = '" + xFilial("BC3") + "' "
cSql += " AND BC3_MATRIC = '" + cChave + "' "
cSql += " AND " + cAlsB + ".D_E_L_E_T_ = '' "

cSql := ChangeQuery(cSql)


If Select("PlsBBFF") > 0
	PlsBBFF->(DbCloseArea())
EndIf

TCQUERY cSql New Alias "PlsBBFF"			
DbSelectArea( "PlsBBFF" )
PlsBBFF->(DbGoTop())

nRecno := Iif(ValType(PlsBBFF->(RECT)) == "C", Val(PlsBBFF->(RECT)), (PlsBBFF->(RECT)))

BC3->(DbGoTo(nRecno))

lRet := Iif (BC3->BC3_TIPO == '0', .T., .F.)

PlsBBFF->(DbCloseArea())
Return (lRet)

/*/{Protheus.doc} PLBD2IMPBL
Verifica se há documentos que impedem o bloqueio da família
@author Francisco Edcarlo
@since 06/2017
/*/
Function PLBD2IMPBL(cMatric)
Local lRet := .F.
	BA1->(DbSetOrder(2))
	If BA1->(MsSeek(xFilial("BA1")+cMatric))
		While ! BA1->(Eof()) .And. BA1->(BA1_FILIAL+BA1_CODINT+BA1_CODEMP+BA1_MATRIC) = xFilial("BA1")+cMatric
			BCP->(DbSetOrder(1))
			If BCP->(DbSeek(xFilial("BCP")+BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC+BA1->BA1_TIPREG))
				//Caso tenha encontrado o documento, busca em todos os documentos entregues para o mesmo beneficiario.
				BD2->(DbSetOrder(1))
				While (BCP->(!EOF()) 						.AND.;
						BCP->BCP_FILIAL == xFilial("BCP")	.AND.;
						BCP->BCP_CODOPE == BA1->BA1_CODINT	.AND.;
						BCP->BCP_CODEMP == BA1->BA1_CODEMP	.AND.;
						BCP->BCP_MATRIC == BA1->BA1_MATRIC .AND.;
						BCP->BCP_TIPREG == BA1->BA1_TIPREG)
	
					if (BCP->BCP_ENTREG == "1" .and. BD2->(DbSeek(xFilial("BD2")+BCP->BCP_CODDOC)) .and. BD2->BD2_IMPBLO == "1")
						lRet := .T.
						Exit
					EndIf
					
					BCP->(DbSkip())
				EndDo
			EndIf
			BA1->(DbSkip())
		EndDo
	EndIf
Return (lRet)

/*/{Protheus.doc} Pl260Cores
Carrega o array com as cores para criação da tela.
@author Totvs
@since 12/2017
/*/
Function Pl260Cores(aCores,aCdCores)

Default aCdCores:= {}
Default aCores:= {}

If  ExistBlock('PL260COR')
	aAuxCor		:= ExecBlock('PL260COR',.f.,.f.)
	aCores 		:= aAuxCor[1]
	aCdCores  	:= aAuxCor[2]
Else
	aCores := 	{;
		{ "PLLegBloq() == 'BR_VERMELHO'", 'BR_VERMELHO' },; //BLOQUEADO
		{ "PLLegBloq() == 'BR_VERDE'" ,   'BR_VERDE' },; //DESBLOQUEADO
		{ "PLLegBloq() == 'BR_AMARELO'" , 'BR_AMARELO' },; //BLOQUEIO FUTURO
		{ "PLLegBloq() == 'BR_BRANCO'" ,  'BR_BRANCO' }} //INCLUSÃO FUTURA

	aCdCores := { ;
		{ 'BR_VERDE'    ,OemtoAnsi(STR0009)},; //'Beneficiario ativo'
		{ 'BR_VERMELHO' ,OemtoAnsi(STR0010)},; //'Beneficiario Bloqueado'
		{ 'BR_AMARELO'  ,OemtoAnsi('Beneficiario com bloqueio futuro')},; //'Beneficiario com bloqueio futuro'
		{ 'BR_BRANCO'   ,OemtoAnsi('Inclusão futura')} } //'Inclusão futura'
Endif


Return

////////////////////////////////////////////////////////
/*/{Protheus.doc} PLCodRas
Gera o código de rastreio da família utilizado para 
retornar os beneficiários no reembolso
@author Thiago Ribas
@since 08/2018
/*/
///////////////////////////////////////////////////////
Function PLCodRas(cTipVinc)

LOCAL cNovoCod   := ""

DEFAULT cTipVinc := ""

If cTipVinc == "1"

	cNovoCod := GetSXENum("BA3","BA3_CODRAS")
Else
	RollBackSx8()
EndIf

Return cNovoCod


/*/{Protheus.doc} PLLoadBTS
Carrega dados do BTS antes da alteração
@author Guilherme Carvalho
@since 09/2018
/*/
Function PLLoadBTS(oBrwUsr)
Local nFor 		 := 0
Local nPosMatVid := 0
Local cMatVid	 := ""

nPosMatVid 	:= oBrwUsr:FieldPos("BA1_MATVID")
cMatVid		:= oBrwUsr:aCols[oBrwUsr:oBrowse:oBrowse:nAt][nPosMatVid]

If nOpcX == K_Alterar .And. !Empty(cMatVid)
	
	BTS->(DbSetOrder(1))
	If BTS->(MsSeek(xFilial("BTS")+cMatVid))
		
		RegToMemory("BTS")
			   
		Store Header "BTS" TO aBTSHeader For .T.
		
		aBTSBKP := {}
		AADD(aBTSBKP, Array(Len(aBTSHeader)+1) )
		   
		For nFor := 1 To Len(aBTSHeader)               	
			If aBTSHeader[nFor][10] <> "V"
				aBTSBKP[1,nFor] := &("M->" + AllTrim(aBTSHeader[nFor][2]))
			Endif
		Next
	
	EndIf
	
EndIf

Return

/*/{Protheus.doc} PLVLDBTS
Chama a função PLUPTCOLS para gravação do LOG da BTS.
@author Guilherme Carvalho
@since 09/2018
/*/
Function PLVLDBTS(oBrwUsr)

Local nFor 		 := 0
Local nPosMatVid := 0
Local cMatVid	 := ""
Local nPosBKP	 := AScan(aBTSHeader,{|x| x[2] == "BTS_MATVID"})

nPosMatVid 	:= oBrwUsr:FieldPos("BA1_MATVID")
cMatVid		:= oBrwUsr:aCols[oBrwUsr:oBrowse:oBrowse:nAt][nPosMatVid]

If nOpcX == K_Alterar .And. !Empty(cMatVid) .And. Len(aBTSBKP) > 0 .And. cMatVid == aBTSBKP[1][nPosBKP]
	
	BTS->(DbSetOrder(1))
	If BTS->(MsSeek(xFilial("BTS")+cMatVid))
		
		RegToMemory("BTS")
		
		aadd(aBTSChave,{"BTS_MATVID",BTS->BTS_MATVID})
		
		aBTSCols := {}
		AADD(aBTSCols, Array(Len(aBTSHeader)+1) )
		   
		For nFor := 1 To Len(aBTSHeader)               	
			If aBTSHeader[nFor][10] <> "V"
				aBTSCols[1,nFor] := &("M->" + AllTrim(aBTSHeader[nFor][2]))
			Endif
		Next
		
		aBTSTrab := {BTS->(RECNO())}
		
		BTS->(Reclock("BTS",.F.))			
			For nFor := 1 To Len(aBTSHeader)               	
				If aBTSHeader[nFor][10] <> "V"
					&("BTS->" + AllTrim(aBTSHeader[nFor][2])) := aBTSBKP[1,nFor]
				Endif
			Next
		BTS->(MsUnlock())
		
		PLUPTCOLS("BTS",aBTSCols,aBTSHeader,aBTSTrab,nOpcX,aBTSChave)
		
	EndIf
	
EndIf

aBTSCols 	:= {}
aBTSHeader	:= {}
aBTSTrab	:= {}
aBTSChave	:= {}
aBTSBKP 	:= {}

Return

/*/{Protheus.doc} bHistBlq
Chama tela para edição de histórico de Bloqueio
@author Roberto Barbosa
@since 07/2018
/*/
Function PLHistBlq()

BCA->(dbSetorder(1))

If BCA->( MsSeek(xFilial("BCA") + BA1->(BA1_CODINT+BA1_CODEMP+BA1_MATRIC+BA1_TIPREG) ) )
	//-------------------------------------------------------------------
	//  LGPD
	//-------------------------------------------------------------------
	objCENFUNLGP:useLogUser()
   FWExecView('Visualização','PLSA259', MODEL_OPERATION_UPDATE,, { || .T. } )
Else
  MsgAlert("Não há dados para Visualização")
EndIf

Return

/*/{Protheus.doc} Regex
Remove caracteres especiais passados no array.
cValue - String a ser modificada
aRegex - Array com os valores a serem removidos
@author lima.everton
@since 19/2019
/*/
Function Regex(cValue, aRegex)

	Local aPosicao := 0
	Default cValue := ""
	Default aRegex := {}

	if !Empty(cValue)
		For aPosicao:= 1 to Len(aRegex)
			If aRegex[aPosicao] $ cValue 
				cValue := StrTran(cValue, aRegex[aPosicao], "")
			EndIf
		Next
	EndIf
		
Return cValue

/*/

{Protheus.doc}
convDataStr
Formatador de datas

@author PLS TEAM
@version 1.xx
@since 01/03/2019
@param cDataAnt	= Data nao formatada
@return cNovaData = Data formatada para o XML

/*/
//------------------------------------------------------------------------------------------
Function convDataStr( cDataAnt )
local cNovaData := ""

if( cDataAnt <> nil )
	if( valType( cDataAnt ) == "D" )
		cDataAnt := DtoS( cDataAnt )
	else
		cDataAnt := allTrim( cDataAnt )
	endIf

	if(! empty( cDataAnt ))
		cNovaData := subStr( cDataAnt,7,2 ) + "/"
		cNovaData += subStr( cDataAnt,5,2 ) + "/"
		cNovaData += subStr( cDataAnt,1,4 )
	endIf
endIf
return cNovaData

/*/                                                      
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    ³MENUDEF³ Autor ³ Roberto Barbosa          ³ Data ³ 09.04.19 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ MENU PLSA260         									  ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
/*/
Static Function MenuDef()
	local lUnimeds  := iIf( allTrim( getNewPar("MV_PLSUNI","1") )=="1", .t. , .f. )
	local aCores 	:= {}
	local aCdCores	:= {}
	Private aRotina := {}

	If IsInCallStack("PLSA260FAM")
		
        If lAmbos
			aRotina := { ;
			{ STRPL01           , 'AxPesqui'  , 0, K_Pesquisar  							},; //Pesquisar
			{ OemtoAnsi(STR0001), 'PLSA260MOV', 0, K_Visualizar 							},; //Visualizar
			{ OemtoAnsi(STR0002), 'NAODISP'   , 0, K_Incluir   								},; //Incluir"
			{ OemtoAnsi(STR0003), 'PLSA260MOV', 0, K_Alterar    							},; //Alterar"
			{ OemtoAnsi(STR0004), 'PLSA260MOV', 0, K_Excluir    							},; //Excluir Familia
			{ OemtoAnsi(STR0005), 'PLBlqUMenu' , 0 , K_Alterar  	},; //(Des)Bloqu. &Usu
			{ OemtoAnsi(STR0006), 'PLBlqFMenu'    , 0, K_Alterar  								},; //(Des)Bloqu. &Fam
			{ OemtoAnsi('Hist.Bloqueio'),  'PLHistBlq', 0, K_Alterar  							},; //(Des)Bloqu. &Fam
			{ OemtoAnsi(STR0007), 'PLSA260VCB', 0, 0          								}}	//Valor &Cobranca

			if lUnimeds 
				aAdd(aRotina, {OemtoAnsi("Interc Hab."), 'VIEWDEF.PLSA272', 0, K_Alterar}      )	//Intercambio Habitual
			endif

			aAdd(aRotina, {OemtoAnsi(STR0288), 'PLHISTCSB( BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC) )', 0, K_Visualizar}      )	//'Hist. Transf. Cont. e Subcon.' 
			
			If FindFunction("PLTermConsBenef") .And. FindFunction("PLTermoBenef")
				aAdd(aRotina, {OemtoAnsi("Termo de Consentimento de Dados Pessoais"), "PLTermoBenef", 0, K_Visualizar}      ) 
			EndIf
			
		Else
			aRotina := { ;
			{ STRPL01           , 'AxPesqui'  , 0, K_Pesquisar  							},;
			{ OemtoAnsi(STR0001), 'PLSA260MOV', 0, K_Visualizar 							},;
			{ OemtoAnsi(STR0002), 'PLSA260MOV', 0, K_Incluir   								},;
			{ OemtoAnsi(STR0003), 'PLSA260MOV', 0, K_Alterar    							},;
			{ OemtoAnsi(STR0004), 'PLSA260MOV', 0, K_Excluir    							},;
			{ OemtoAnsi(STR0005), 'PLBlqUMenu' , 0 , K_Alterar  	},; //(Des)Bloqu. &Usu
			{ OemtoAnsi(STR0006), 'PLBlqFMenu'    , 0, K_Alterar  								},; //(Des)Bloqu. &Fam
			{ OemtoAnsi('Hist.Bloqueio'),  'PLHistBlq', 0, K_Alterar  							},; //(Des)Bloqu. &Fam
			{ OemtoAnsi(STR0007), 'PLSA260VCB', 0, 0            							}}

			if lUnimeds
				aAdd(aRotina, {OemtoAnsi("Interc Hab."), 'VIEWDEF.PLSA272', 0, K_Alterar}      )	//Intercambio Habitual
			endif

			aAdd(aRotina, {OemtoAnsi(STR0288), 'PLHISTCSB( BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC) )', 0, K_Visualizar}      )	//'Hist. Transf. Cont. e Subcon.' 
			
			If FindFunction("PLTermConsBenef") .And. FindFunction("PLTermoBenef")
				aAdd(aRotina, {OemtoAnsi("Termo de Consentimento de Dados Pessoais"), "PLTermoBenef", 0, K_Visualizar}      )
			EndIf
		EndIF
	Else
		aRotina := { ;
		{ STRPL01           , 'AxPesqui'  , 0, K_Pesquisar  							},; //Pesquisar
		{ OemtoAnsi(STR0001), 'PLSA260MOV', 0, K_Visualizar 							},; //Visualizar
		{ OemtoAnsi(STR0002), 'NAODISP'   , 0, K_Incluir   								},; //Incluir"
		{ OemtoAnsi(STR0002), 'PLSA260MOV', 0, K_Incluir   								},;
		{ OemtoAnsi(STR0003), 'PLSA260MOV', 0, K_Alterar    							},; //Alterar"
		{ OemtoAnsi(STR0004), 'PLSA260MOV', 0, K_Excluir    							},; //Excluir Familia
		{ OemtoAnsi(STR0005), 'PLBlqUMenu' , 0 , K_Alterar  	},; //(Des)Bloqu. &Usu
		{ OemtoAnsi(STR0006), 'PLBlqFMenu'    , 0, K_Alterar  								},; //(Des)Bloqu. &Fam
		{ OemtoAnsi('Hist.Bloqueio'),  'PLHistBlq', 0, K_Alterar  							},; //(Des)Bloqu. &Fam
		{ OemtoAnsi(STR0007), 'PLSA260VCB', 0, 0          								}}	//Valor &Cobranca

		if lUnimeds 
			aAdd(aRotina, {OemtoAnsi("Interc Hab."), 'VIEWDEF.PLSA272', 0, K_Alterar}      )	//Intercambio Habitual
		endif

		aAdd(aRotina, {OemtoAnsi(STR0288), 'PLHISTCSB( BA1->(BA1_CODINT + BA1_CODEMP + BA1_MATRIC) )', 0, K_Visualizar}      )	//'Hist. Transf. Cont. e Subcon.'    

		If FindFunction("PLTermConsBenef") .And. FindFunction("PLTermoBenef")
			aAdd(aRotina, {OemtoAnsi("Termo de Consentimento de Dados Pessoais"), "PLTermoBenef", 0, K_Visualizar}      )
		EndIf
	EndIF

	Pl260Cores(@aCores,@aCdCores)

	If Len(aCdCores)  > 0
		Aadd(aRotina, { "Legenda"    	 , "PL260BrLeg"		, 0 , K_Incluir     })
	Endif

Return aClone(aRotina)

/*/                                                      
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    PL260BrLeg Autor ³ Roberto Barbosa          ³ Data ³ 09.04.19 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Monta a legenda                  						  ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
/*/
Function PL260BrLeg
local aCores 	:= {}
	Pl260Cores(@aCores,@aCdCores)
	PLSA260LEG()
Return

/*/                                                      
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    PLBlqFMenu Autor ³ Roberto Barbosa          ³ Data ³ 09.04.19 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Chama rotina de bloqueio da familia						  ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
/*/

Function PLBlqFMenu()
	//-------------------------------------------------------------------
	//  LGPD
	//-------------------------------------------------------------------
	objCENFUNLGP:useLogUser()

	PL260BLOCO("BA1", BA1->(Recno()),4,,,,,,,,.F.)
	PlsGrpFam(.F.,.T.,BA1->BA1_CODINT+BA1->BA1_CODEMP+BA1->BA1_MATRIC)
Return

/*/                                                      
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±±
±±³Funcao    PLBlqUMenu Autor ³ Roberto Barbosa          ³ Data ³ 09.04.19 ³±±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±±
±±³Descricao ³ Chama rotina de bloqueio do Beneficiario 				  ³±±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±±
/*/

Function PLBlqUMenu()
	//-------------------------------------------------------------------
	//  LGPD
	//-------------------------------------------------------------------
	objCENFUNLGP:useLogUser()

	PL260BLOUS("BA1", BA1->(Recno()), 4)
Return

//------------------------------------------------------------
/*/{Protheus.doc} PlBlcCanc
função que será utilizada no bloco de código do cancelar da EnchoiceBar
da função A260MOV (tela do cadastro de familia) quando chamada da rotina
de análise de beneficiários
/*/
//-------------------------------------------------------------------
Function PlBlcCanc(nOpca, oDlgFolder) 

If MsgYesNo(STR0295, STR0242) //"Clicando em cancelar, a integração com a Central de Obrigações não será concretizada, para que isso aconteça clique no botão Salvar, deseja realmente fechar esta tela?", Atenção 

	nOpca := 0
	oDlgFolder:End()
EndIf

Return 


//------------------------------------------------------------
/*/{Protheus.doc} PlBlcCanc
função que atualizara os campos na BA3 ao slecionar o cliente (SA1)
da função A260MOV (tela do cadastro de familia) quando chamada da rotina
de análise de beneficiários
/*/
//-------------------------------------------------------------------
Function Pl260CodMun(cCodMun,cBa3CodCli,nCamp)

Local cEndCli	:= SA1->A1_END
Local cEstCli	:= SA1->A1_EST
Local cResulta	:= ''	

Default nCamp:= 0


If nCamp = 1 // BA3_NUMERO
	iF AT( ",", cEndCli ) > 0

			ba3Num := StrTokArr(cEndCli, ",")
			//M->BA3_END 	  := ba3Num[1]
			cResulta := ba3Num[2]
		
	Else
		cResulta:= " "
	EndIF
Endif


If nCamp = 2 // BA3_CODMUN
	DbSelectArea("BID")
	BID->(DbSetOrder(3))

	If BID->(DbSeek(xFilial("BID")+cEstCli))
		cEstRef:= Substr(BID->BID_CODMUN,1,2)
		BID->(DbSetOrder(1))
		If BID->(DbSeek(xFilial("BID")+cEstRef+cCodMun))
			cResulta := BID->BID_CODMUN
		Endif	

	Endif
Endif	

If nCamp = 3 // BA3_END
	
		If AT( ",", cEndCli)
			ba3Num := StrTokArr(cEndCli, ",")
			//M->BA3_END 	  := ba3Num[1]
			cResulta := ba3Num[1]
		Else
			cResulta:=cEndCli
		Endif
	
Endif

Return (cResulta) 

/*/
{Protheus.doc}
ValidPerm
	Valida todas as permições a ser liberada a inclusão do beneficiario 
@author vinicius.queiros
@version v12
@since 11/10/2019
@param  TrbBT1  : Tabela Temporario
		cTipUsu : Tipo de Usuario
		cGrauPa : Grau de parentesco 
		cEstCiv : Estado Civil
		cSexo   : Sexo
		dDatInc : Data Inclusão
		dDatNas : Data Nascimento
		aQtd    : Qtd. Usuarios 
@return Array:
				1 posição: Se existe o usuario [.T. ou .F.]
				2 posição: Se o usuario está ativo [.T. ou .F.]
/*/

Static Function ValidPerm(TrbBT1,cTipUsu,cGrauPa,cEstCiv,cSexo,dDatInc,dDatNas,aQtd)

Local I
Local nPos      := {0,0,0}
Local _aQtdUsr  := {,,,}
Local bClose    := {|| TrbBT1->(dbCloseArea())}
Local aArea		 := GetArea()

While !TrbBT1->(Eof())
	_aQtdUsr := {,,,}
	For I := 1 to 4
		_aQtdUsr[I] := PL260QUsr(I,aQtd,TrbBT1->TIPUSR,TrbBT1->GRAUPA,TrbBT1->ESTCIV,TrbBT1->SEXO)
	Next

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau e o Tipo do Usuario, Estado Civil e Sexo...³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if cTipUsu == TrbBT1->TIPUSR .And. cGrauPa == TrbBT1->GRAUPA .And. cEstCiv   == TrbBT1->ESTCIV .And.;
				(TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==cTipUsu})
			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==cGrauPa})
			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==cEstCiv})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0 .And. nPos[2] > 0 .And. nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario					
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau e o Tipo do Usuario, Estado Civil...       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. (Empty(TrbBT1->SEXO) .or. TrbBT1->SEXO == "3")
		if cTipUsu == TrbBT1->TIPUSR .And. cGrauPa == TrbBT1->GRAUPA .And. cEstCiv == TrbBT1->ESTCIV

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==TrbBT1->TIPUSR})
			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==TrbBT1->GRAUPA})
			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==TrbBT1->ESTCIV})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0 .And. nPos[2] > 0 .And. nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario					
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})
				
			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau e o Tipo do Usuario e Sexo...              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if cTipUsu == TrbBT1->TIPUSR .And. cGrauPa == TrbBT1->GRAUPA .And. (TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==TrbBT1->TIPUSR})
			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==TrbBT1->GRAUPA})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0 .And. nPos[2] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario					
					EndIf
				Endif
				
				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})
				
			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau e o Estado Civil e Sexo..                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if cGrauPa == TrbBT1->GRAUPA .And. cEstCiv   == TrbBT1->ESTCIV .And. (TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")

			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==TrbBT1->GRAUPA})
			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==TrbBT1->ESTCIV})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[2] > 0 .And. nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario					
					EndIf
				Endif
				
				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})
				
			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Tipo do Usuario, Estado Civil e Sexo...         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if cTipUsu == TrbBT1->TIPUSR .And. cEstCiv   == TrbBT1->ESTCIV .And. (TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==TrbBT1->TIPUSR})
			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==TrbBT1->ESTCIV})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0 .And. nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario					
					EndIf
				Endif
				
				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})
				
			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau e o Tipo do Usuario...                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. Empty(TrbBT1->ESTCIV) .And. (Empty(TrbBT1->SEXO) .or. TrbBT1->SEXO == "3")
		if cTipUsu == TrbBT1->TIPUSR .And. cGrauPa== TrbBT1->GRAUPA

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==TrbBT1->TIPUSR})
			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==TrbBT1->GRAUPA})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0 .And. nPos[2] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Estado Civil e Sexo...                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if Empty(TrbBT1->TIPUSR) .And. Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if cEstCiv   == TrbBT1->ESTCIV .And. (TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")

			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==TrbBT1->ESTCIV})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario				
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau e o Sexo...								  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if cGrauPa== TrbBT1->GRAUPA .And. (TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")

			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==TrbBT1->GRAUPA})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[2] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau Estado Civil...							  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. (Empty(TrbBT1->SEXO) .or. TrbBT1->SEXO == "3")
		if cGrauPa== TrbBT1->GRAUPA .And. cEstCiv   == TrbBT1->ESTCIV

			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==TrbBT1->GRAUPA})
			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==TrbBT1->ESTCIV})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[2] > 0 .And. nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Tipo do Usuario, Estado Civil..                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. (Empty(TrbBT1->SEXO) .or. TrbBT1->SEXO == "3")
		if cTipUsu == TrbBT1->TIPUSR .And. cEstCiv   == TrbBT1->ESTCIV

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==TrbBT1->TIPUSR})
			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==TrbBT1->ESTCIV})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0 .And. nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Tipo do Usuario, Sexo...                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. Empty(TrbBT1->GRAUPA) .And. Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if cTipUsu == TrbBT1->TIPUSR .And. (TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==TrbBT1->TIPUSR})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Tipo do Usuario...                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if !Empty(TrbBT1->TIPUSR) .And. Empty(TrbBT1->GRAUPA) .And. Empty(TrbBT1->ESTCIV) .And. (Empty(TrbBT1->SEXO) .or. TrbBT1->SEXO == "3")
		if cTipUsu == TrbBT1->TIPUSR

			nPos[1] := aScan(_aQtdUsr[1],{|x|x[1]==TrbBT1->TIPUSR})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[1] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[1,nPos[1],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[1,nPos[1],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Sexo...                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if Empty(TrbBT1->TIPUSR) .And. Empty(TrbBT1->GRAUPA) .And. Empty(TrbBT1->ESTCIV) .And. !Empty(TrbBT1->SEXO)
		if (TrbBT1->SEXO == cSexo .Or. TrbBT1->SEXO == "3")
			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF// .And.;
				// Retorna o usuario encontrado e se está ativo ou inativo 
				If TrbBT1->ATIVUSR == "1"
					Eval(bClose)
					RestArea(aArea) 
					Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
				EndIf

			Endif

			Eval(bClose)
			RestArea(aArea)
			Return({.T.,.F.})

		Endif
	Endif

	lFlag := .F.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Estado Civil..                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if Empty(TrbBT1->TIPUSR) .And. Empty(TrbBT1->GRAUPA) .And. !Empty(TrbBT1->ESTCIV) .And. (Empty(TrbBT1->SEXO) .or. TrbBT1->SEXO == "3")
		if cEstCiv   == TrbBT1->ESTCIV
			nPos[3] := aScan(_aQtdUsr[3],{|x|x[1]==TrbBT1->ESTCIV})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[3] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[3,nPos[3],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[3,nPos[3],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif

				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	lFlag := .F.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se esta preenchido o Grau...	            						  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	if Empty(TrbBT1->TIPUSR) .And. !Empty(TrbBT1->GRAUPA) .And. Empty(TrbBT1->ESTCIV) .And. (Empty(TrbBT1->SEXO) .or. TrbBT1->SEXO == "3")
		if cGrauPa== TrbBT1->GRAUPA
			nPos[2] := aScan(_aQtdUsr[2],{|x|x[1]==TrbBT1->GRAUPA})

			If (TrbBT1->UNIMIN == "1")
				nDataPadMin := DateDiffMonth(dDatInc,dDatNas)
			ElseIf (TrbBT1->UNIMIN == "0" .Or. TrbBT1->UNIMIN == " " )
					nDataPadMin := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMin := DateDiffYear(dDatInc,dDatNas)
			EndIf

			If (TrbBT1->UNIMAX == "1")
				nDataPadMax := DateDiffMonth(dDatInc,dDatNas)
				ElseIf (TrbBT1->UNIMAX == "0" .Or. TrbBT1->UNIMAX == " ")
					nDataPadMax := DateDiffDay(dDatInc,dDatNas)
				Else
				 	nDataPadMax := DateDiffYear(dDatInc,dDatNas)
			EndIf

			nDataI := TrbBT1->IDAMIN *(if(TrbBT1->UNIMIN=="0" .or. TrbBT1->UNIMIN==" " ,365.25,if(TrbBT1->UNIMIN=="1",12,1)))
			nDataF := TrbBT1->IDAMAX *(if(TrbBT1->UNIMAX=="0" .or. TrbBT1->UNIMAX==" " ,365.25,if(TrbBT1->UNIMAX=="1",12,1)))

			if nPos[2] > 0
				if nDataPadMin >= nDataI  .And.;
					nDataPadMax <= nDataF .And.;
						_aQtdUsr[2,nPos[2],2] >= TrbBT1->NMIUSR .And.;
						_aQtdUsr[2,nPos[2],2] <= TrbBT1->NMAUSR
					// Retorna o usuario encontrado e se está ativo ou inativo 
					If TrbBT1->ATIVUSR == "1"
						Eval(bClose)
						RestArea(aArea) 
						Return({.T.,.T.}) // {x,y} X: se o usuario existe naquele nivel; o Y: se é validado o inclusão do usuario
					EndIf
				Endif
				
				Eval(bClose)
				RestArea(aArea)
				Return({.T.,.F.})

			Endif
		Endif
	Endif

	TRBBT1->(DbSkip())
Enddo

Eval(bClose)
RestArea(aArea)

Return{.F.,.F.} // O usuario não existe e não esta validado a inclusão, pula para proximo nivel de verificação

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ENVBLOQANSºAutor  ³Victor Alves dos S. º Data ³  13/04/20   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Função verifica se o campo ENVANS existe, para enviar ou não±±
±±º          ³ para a ANS.                                                º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ENVBLOQANS(cConsid, cMotivo)

Local lRet := .T.

Default cConsid := ""
Default cMotivo := ""

If cConsid == "U" .And. BG3->(Fieldpos("BG3_ENVANS")) > 0
	If Posicione("BG3",1,xFilial("BG3")+cMotivo,"BG3_ENVANS") == "0"
	   lRet := .F.
	EndIf
ElseIf cConsid == "F" .And. BG1->(Fieldpos("BG1_ENVANS")) > 0
	If Posicione("BG1",1,xFilial("BG1")+cMotivo,"BG1_ENVANS") == "0"
		lRet := .F.
	EndIf
ElseIf cConsid == "S" .And. BG1->(Fieldpos("BQU_ENVANS")) > 0
	If Posicione("BQU",1,xFilial("BQU")+cMotivo,"BQU_ENVANS") == "0"
		lRet := .F.
	EndIf
EndIf	

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  PL260LICOL  ³Rafael Soares r.soares     º Data ³  31/07/20   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Limpa aCols vazios dos dados de Cobertura.				   ±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                     	                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PL260LICOL(aCol, cAlias)
Local nX		:= 1
Local nGetCols	:= 0

Default cAlias 	:= ""
Default aCol 	:= {}

Do Case 
	Case cAlias == "BFE"
		nPos := aScan(aHeader,{|x| AllTrim(x[2]) == "BFE_CODGRU"} )
	Case cAlias == "BFG"
		nPos := aScan(aCabBFG,{|x| AllTrim(x[2]) == "BFG_CODPSA"} )
	Case cAlias == "BW9"
		nPos := aScan(aCabBW9,{|x| AllTrim(x[2]) == "BW9_CODGRU"} )
	Case cAlias == "BWA"
		nPos := aScan(aCabBWA,{|x| AllTrim(x[2]) == "BWA_TIPO"} )
	Case cAlias == "BVI"
		nPos := aScan(aCabBVI,{|x| AllTrim(x[2]) == "BVI_CLACAR"} )
	Case cAlias == "BVJ"
		nPos := aScan(aCabBVJ,{|x| AllTrim(x[2]) == "BVJ_TIPO"} )
	Case cAlias == "BVM"
		nPos := aScan(aCabBVM,{|x| AllTrim(x[2]) == "BVM_CODPSA"} )
	Case cAlias == "BFO"
		nPos := aScan(aCabBFO,{|x| AllTrim(x[2]) == "BFO_CLACAR"} )
EndCase

For nX := 1 to Len(aCol)
	If valType(aCol[nX]) != "U" .And. Empty(AllTrim(aCol[nX][nPos]))
		aDel(aCol,nX)
		nX--
		nGetCols++
	ElseIf valType(aCol[nX]) == "U"
		Exit
	EndIf
Next nX

If Len(aCol) == nGetCols
	aCol := {}
EndIf

If Len(aCol) > nGetCols
 	Do While .T.
		If nGetCols > 0
			aSize(aCol, Len(aCol) - 1)
			nGetCols--
		Else
			Exit
		EndIf
 	EndDo
EndIf


Return aCol

//-------------------------------------------------------------------
/*/{Protheus.doc} PLRetCobFam

Consulta determinada cobertura do Produto no nível de Sub-contrato ou
Produto Saúde

@author  Vinicius.Queiros
@version P12
@since   26/10/2020
@Param   cTipo			1 = Grupos Determinados
						2 = Procedimentos
						3 = Grupo de Quantidade
						4 = Classe de Carência

		 cTipoGrupo	    1 = Pessoa Física
						2 = Pessoa Jurídica

		 cCodProd		Codigo do Produto Saúde
		 cVerProd		Versão do Produto Saúde	
		 cCodOpera 		Codigo da Operadora	
		 cCodEmpre		Codigo da Empresa (Somente para PJ)
		 cNumContr		Numero do Contrato (Somente para PJ)	
		 cVerContr		Versão do Contrato (Somente para PJ)
		 cSubContr		Numero do Sub-Contrato (Somente para PJ)
		 cVerSubCt		Versão do Sub-Contrato (Somente para PJ)
		 

@Return Array - Dados da consulta 
/*/
//------------------------------------------------------------------- 

Function PLRetCobPro(cTipo,cTipoGrupo,cCodProd,cVerProd,cCodOpera,cCodEmpre,cNumContr,cVerContr,cSubContr,cVerSubCt)

Local cAlias
Local cAliasCopart
Local cTabRefere
Local cTabCopart
Local aCabTabRef
Local aCabCopart
Local cSql
Local aDadosTab
Local aCopart
Local aCopartAux
Local nNx
Local aRetorno		:= {}
Local cProdPsa		:= ""
Local cProdPad		:= ""

Default cCodProd	:= ""
Default cVerProd	:= ""
Default cTipo 		:= ""
Default cTipoGrupo  := ""
Default cCodOpera	:= ""
Default cCodEmpre	:= ""
Default cNumContr	:= ""
Default cVerContr	:= ""
Default cSubContr	:= ""
Default cVerSubCt	:= ""

	Do Case
		Case cTipo == "1" // Grupos Determinados
			cAlias 			:= "BFC"
			cTabRefere 		:= IIF(cTipoGrupo == "1","BRV","BT7")
			cAliasCopart	:= "BVC" 		
			cTabCopart		:= IIF(cTipoGrupo == "1","BHI","BHF")

		Case cTipo == "2" // Procedimentos
			cAlias 			:= "BFD"
			cTabRefere 		:= IIF(cTipoGrupo == "1","BB2","BT8")
			cAliasCopart	:= "BVF" 			
			cTabCopart		:= IIF(cTipoGrupo == "1","BHD","BHE")
		
		Case cTipo == "3" // Grupo de Quantidade
			If cTipoGrupo == "2"
				cAlias 			:= "BW7"
				cTabRefere 		:= "BW5"
				cAliasCopart	:= "" 			
				cTabCopart		:= ""

			Else // Pessoa Fisica não tem Grupo de Quantidade
				Return aRetorno
			EndIf
		
		Case cTipo == "4" // Classe de Carência
			cAlias 			:= "BFJ"
			cTabRefere 		:= IIF(cTipoGrupo == "1","BAN","BA6")
			cAliasCopart	:= "" 			
			cTabCopart		:= ""
		
		Otherwise
			Return aRetorno

	EndCase

	// Os campos que serão retornados
	If !Empty(cAlias)
		Store Header cAlias TO aCabTabRef For .T.
	EndIf

	If !Empty(cAliasCopart)
		Store Header cAliasCopart TO aCabCopart For .T.
	EndIf

	If cTipoGrupo == "1" // Pessoa Fisica

		cSQL := "SELECT R_E_C_N_O_ Recno FROM " + RetSQLName(cTabRefere)
		cSql += " WHERE " + cTabRefere + "_FILIAL = '" + xFilial(cTabRefere) + "' AND "
		If cTipo == "1" // Grupos Determinados
			cSQL += cTabRefere + "_CODPLA = '" + cCodOpera + cCodProd + "' AND "
		Else
			cSQL += cTabRefere + "_CODIGO = '" + cCodOpera + cCodProd + "' AND "
		EndIf
		cSQL += cTabRefere + "_VERSAO = '" + cVerProd + "' AND "		

	Else // Pessoa Juridica
		
		cSQL := "SELECT R_E_C_N_O_ Recno FROM " + RetSQLName(cTabRefere)
		cSql += " WHERE " + cTabRefere + "_FILIAL = '" + xFilial(cTabRefere) + "' AND "
		cSQL += cTabRefere + "_CODINT = '" + cCodOpera + "' AND "
		cSQL += cTabRefere + "_CODIGO = '" + cCodEmpre + "' AND "
		cSQL += cTabRefere + "_NUMCON = '" + cNumContr + "' AND "
		cSQL += cTabRefere + "_VERCON = '" + cVerContr + "' AND "
		cSQL += cTabRefere + "_SUBCON = '" + cSubContr + "' AND "
		cSQL += cTabRefere + "_VERSUB = '" + cVerSubCt + "' AND "
		cSQL += cTabRefere + "_CODPRO = '" + cCodProd  + "' AND "
		cSQL += cTabRefere + "_VERPRO = '" + cVerProd  + "' AND "

	EndIf
	cSQL += " D_E_L_E_T_= ' ' "

	dbUseArea(.T.,"TOPCONN",tcGenQry(,,cSql),"TrbTab",.f.,.t.)

	If !TrbTab->(Eof())            
		While !TrbTab->(Eof())

			(cTabRefere)->(DbGoTo(TrbTab->Recno))

			aDadosTab		:= {}
			aCopart			:= {}

			For nNx := 1 To Len(aCabTabRef)

				nPos := (cTabRefere)->(FieldPos(StrTran(aCabTabRef[nNx][2], cAlias, cTabRefere)))
				If nPos > 0
					aAdd(aDadosTab,{ Alltrim(aCabTabRef[nNx][2]), (cTabRefere)->(FieldGet(nPos)) })

					// Campos de Memoria
					Do Case
						Case Alltrim(aCabTabRef[nNx][2]) == "BFC_CODGRU"
							aAdd(aDadosTab, { "BFC_DESGRU", Posicione("BG7",1,xFilial("BG7") + cCodOpera + (cTabRefere)->(FieldGet(nPos)) ,"BG7_DESCRI") })

						Case Alltrim(aCabTabRef[nNx][2]) == "BW7_CODGRU"
							aAdd(aDadosTab, { "BW7_DESGRU", Posicione("BW2",1,xFilial("BW2") + cCodOpera + (cTabRefere)->(FieldGet(nPos)) ,"BW2_DESCRI") })

						Case Alltrim(aCabTabRef[nNx][2]) == "BFJ_CLACAR"
							aAdd(aDadosTab, { "BFJ_DESCLA", Posicione("BDL",1,xFilial("BDL") + cCodOpera + (cTabRefere)->(FieldGet(nPos)) ,"BDL_DESCRI") })

						Case Alltrim(aCabTabRef[nNx][2]) == "BFD_CLACAR"
							aAdd(aDadosTab, { "BFD_DESCAR", Posicione("BDL",1,xFilial("BDL") + cCodOpera + (cTabRefere)->(FieldGet(nPos)) ,"BDL_DESCRI") })

						Case Alltrim(aCabTabRef[nNx][2]) == "BFD_CODPAD"
							cProdPad := (cTabRefere)->(FieldGet(nPos))
							aAdd(aDadosTab, { "BFD_DESPAD", Posicione("BR4",1,xFilial("BR4") + cProdPad ,"BR4_DESCRI") })

						Case Alltrim(aCabTabRef[nNx][2]) == "BFD_CODPSA"
							cProdPsa := (cTabRefere)->(FieldGet(nPos))						
					EndCase
				Else
					// Campos com o nome diferente entre as Tabelas
					If cTabRefere == "BAN"
						Do Case
							Case Alltrim(aCabTabRef[nNx][2]) == "BFJ_CARENC"
								aAdd( aDadosTab,{ Alltrim(aCabTabRef[nNx][2]), BAN->BAN_QTDCAR })
							
							Case Alltrim(aCabTabRef[nNx][2]) == "BFJ_UNICAR"
								aAdd( aDadosTab,{ Alltrim(aCabTabRef[nNx][2]), BAN->BAN_UNCAR })
										
						EndCase
					EndIf
				Endif

			Next nNx

			// Campo de Memoria
			If !Empty(cProdPad) .And. !Empty(cProdPsa)
				aAdd(aDadosTab, { "BFD_DESCRI", Posicione("BR8", 1, xFilial("BR8") + cProdPad + cProdPsa , "BR8_DESCRI") })
			EndIf
				
			If cTipo $ "1/2" // Co-participação

				If cTipoGrupo == "1" // Pessoa Fisica

					cSQL := "SELECT R_E_C_N_O_ Recno FROM " + RetSQLName(cTabCopart)
					cSql += " WHERE " + cTabCopart + "_FILIAL = '" + xFilial(cTabCopart) + "' AND "

					If cTipo == "1"
						cSQL += cTabCopart + "_CODINT = '" + cCodOpera + "' AND "
						cSQL += cTabCopart + "_CODPLA = '" + cCodProd  + "' AND "
						cSQL += cTabCopart + "_VERSAO = '" + cVerProd  + "' AND "
						cSQL += cTabCopart + "_CODGRU = '" + BRV->BRV_CODGRU + "' AND "
					Else
						cSQL += cTabCopart + "_CODIGO = '" + cCodOpera + cCodProd + "' AND "
						cSQL += cTabCopart + "_VERSAO = '" + cVerProd + "' AND "
						cSQL += cTabCopart + "_CODPAD = '" + BB2->BB2_CODPAD + "' AND "
						cSQL += cTabCopart + "_CODPSA = '" + BB2->BB2_CODPSA + "' AND "

					EndIf

				Else // Pessoa Juridica

					cSQL := "SELECT R_E_C_N_O_ Recno FROM " + RetSQLName(cTabCopart)
					cSql += " WHERE " + cTabCopart + "_FILIAL = '" + xFilial(cTabCopart) + "' AND "
					cSQL += cTabCopart + "_CODINT = '" + cCodOpera + "' AND "
					cSQL += cTabCopart + "_CODIGO = '" + cCodEmpre + "' AND "
					cSQL += cTabCopart + "_NUMCON = '" + cNumContr + "' AND "
					cSQL += cTabCopart + "_VERCON = '" + cVerContr + "' AND "
					cSQL += cTabCopart + "_SUBCON = '" + cSubContr + "' AND "
					cSQL += cTabCopart + "_VERSUB = '" + cVerSubCt + "' AND "
					cSQL += cTabCopart + "_CODPRO = '" + cCodProd  + "' AND "
					cSQL += cTabCopart + "_VERPRO = '" + cVerProd  + "' AND "

					If cTipo == "1" // Grupos Determinados
						cSQL += "  BHF_CODGRU = '" + BT7->BT7_CODGRU + "' AND "
						
					Else // Procedimentos
						cSQL += "  BHE_CODPAD = '" + BT8->BT8_CODPAD + "' AND "
						cSQL += "  BHE_CODPSA = '" + BT8->BT8_CODPSA + "' AND "

					EndIf

				EndIf

				cSQL += " D_E_L_E_T_= ' ' " 
					
				dbUseArea(.T.,"TOPCONN",tcGenQry(,,cSql),"TrbCop",.f.,.t.)

				If !TrbCop->(Eof()) 		
					While !TrbCop->(Eof())

						(cTabCopart)->(DbGoTo(TrbCop->Recno))

						aCopartAux := {}

						For nNx := 1 To Len(aCabCopart)

							nPos := (cTabCopart)->(FieldPos(StrTran(aCabCopart[nNx][2], cAliasCopart, cTabCopart)))
							If nPos > 0
								aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), (cTabCopart)->(FieldGet(nPos)) })

								// Campos de Memoria
								Do Case
									Case Alltrim(aCabCopart[nNx][2]) == "BVC_FINATE"
										aAdd(aCopartAux, { "BVC_DESFIN", Posicione("BGY",1,xFilial("BGY") + cCodOpera + (cTabCopart)->(FieldGet(nPos)) ,"BGY_DESCRI") })

									Case Alltrim(aCabCopart[nNx][2]) == "BVF_TIPUSR"
										aAdd(aCopartAux, { "BVF_DESTIP", Posicione("BIH",1,xFilial("BIH") + (cTabCopart)->(FieldGet(nPos)) ,"BIH_DESCRI") })

									Case Alltrim(aCabCopart[nNx][2]) == "BVF_GRAUPA"
										aAdd(aCopartAux, { "BVF_DESGRA", Posicione("BRP",1,xFilial("BRP") + (cTabCopart)->(FieldGet(nPos)) ,"BRP_DESCRI") })

									Case Alltrim(aCabCopart[nNx][2]) == "BVF_FINATE"
										aAdd(aCopartAux, { "BVF_DESFIN", Posicione("BGY",1,xFilial("BGY") + cCodOpera + (cTabCopart)->(FieldGet(nPos)) ,"BGY_DESCRI") })
								EndCase
							Else
								// Campos com o nome diferente entre as Tabelas
								Do Case
									Case cTabCopart == "BHI"
										Do Case
											Case Alltrim(aCabCopart[nNx][2]) == "BVC_VALCOP"
												aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), BHI->BHI_VLRCOP })
											
											Case Alltrim(aCabCopart[nNx][2]) == "BVC_VIGINI"
												aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), BHI->BHI_VIGDE })

											Case Alltrim(aCabCopart[nNx][2]) == "BVC_VIGFIN"
												aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), BHI->BHI_VIGATE })
										EndCase

									Case cTabCopart == "BHD"
										Do Case
											Case Alltrim(aCabCopart[nNx][2]) == "BVF_VALCOP"
												aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), BHD->BHD_VLRCOP })

											Case Alltrim(aCabCopart[nNx][2]) == "BVF_VIGINI"
												aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), BHD->BHD_VIGDE })

											Case Alltrim(aCabCopart[nNx][2]) == "BVF_VIGFIN"
												aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), BHD->BHD_VIGATE })								
										EndCase

									Case cTabCopart == "BHE"
										If Alltrim(aCabCopart[nNx][2]) == "BVF_VALCOP"
											aAdd(aCopartAux,{ Alltrim(aCabCopart[nNx][2]), BHE->BHE_VLRCOP })										
										EndIf						
								EndCase

							Endif

						Next nNx

						aAdd(aCopart,aCopartAux)

						TrbCop->(DbSkip())
					EndDo
				EndIf
				TrbCop->(DbCloseArea())
					
			EndIf

			aAdd(aRetorno,{aDadosTab,aCopart})
				
			TrbTab->(DbSkip())		
		EndDo
	EndIf

	TrbTab->(DbCloseArea())
	
Return aRetorno

//-------------------------------------------------------------------
/*/{Protheus.doc} GrvCobFamG

Grava no Browse os dados correspondente a cobrança passada por parâmetro

@author  Vinicius.Queiros
@version P12
@since   27/10/2020
@Param   aDadosCob		Dados a serem gravados no Browser
		 oBrowser	    Browser que receberá os dados
		 cCampo1Brw		Campo principal do Browser para consulta
		 cCampo2Brw		Segundo Campo principal do Browser para consulta
		 oBrwCopart		Browser de coparticipação quando houver	
		 cCampoCop 		Campo principal do Browser de coparticipação
		 				para consulta

@Return Nil
/*/
//------------------------------------------------------------------- 

Function GrvCobFamG(aDadosCob,oBrowser,cCampo1Brw,cCampo2Brw,oBrwCopart,cCampoCop)

	Local nNx
	Local nNz
	Local nNy
	Local cCampo
	Local xConteudo
	Local nPos1Camp 	
	Local nPos2Camp		
	Local nPosCopCam	
	Local nPos1Dados
	Local nPos2Dados
	Local nPosBrowser
	Local nLinha

	Default cCampoCop 	:= ""
	Default cCampo2Brw 	:= ""

	// Posições dos Campos no Browser
	nPos1Camp := oBrowser:FieldPos(cCampo1Brw)
	nPos2Camp := oBrowser:FieldPos(cCampo2Brw)

	If ValType(oBrwCopart) == "O" .And. !Empty(cCampoCop)
		nPosCopCam := oBrwCopart:FieldPos(cCampoCop)		
	EndIf 
		
	For nNx := 1 To Len(aDadosCob)

		// Gravação da Cobertura: Grupos Determinados, Procedimentos, Grupo de Quantidade ou Classe de Carência
		If Len(aDadosCob[nNx][1]) > 0

			// Verifica se já foi incluido no Browser
			nPos1Dados := Ascan(aDadosCob[nNx][1], {|x| x[1] == cCampo1Brw})
			nPos2Dados := Ascan(aDadosCob[nNx][1], {|x| x[1] == cCampo2Brw})

			If nPos1Dados > 0

				If nPos2Dados > 0
					nPosBrowser := Ascan(oBrowser:aCols, {|x| x[nPos1Camp] == aDadosCob[nNx][1][nPos1Dados][2] .And. x[nPos2Camp] == aDadosCob[nNx][1][nPos2Dados][2] })
				Else
					nPosBrowser := Ascan(oBrowser:aCols, {|x| x[nPos1Camp] == aDadosCob[nNx][1][nPos1Dados][2] })
				EndIf

				If nPosBrowser > 0
					Loop // Já incluso, pula para proximo
				EndIf

			EndIf

			If !Empty(oBrowser:aCols[1][nPos1Camp]) // Verifica se o campo esta preenchido
				oBrowser:AddBlank()
			EndIf

			For nNz := 1 To Len(aDadosCob[nNx][1])

				cCampo 		:= aDadosCob[nNx][1][nNz][1] 
				xConteudo	:= aDadosCob[nNx][1][nNz][2] 
				
				oBrowser:FieldPut(Alltrim(cCampo), xConteudo , Len(oBrowser:aCols))

			Next nNz

		EndIf

		// Gravação da Co-participação da Cobertura
		If Len(aDadosCob[nNx][2]) > 0

			For nNz := 1 To Len(aDadosCob[nNx][2])

				If Empty(oBrwCopart:aCols[nNx][nPosCopCam]) // Verifica se o campo esta preenchido
					nLinha := nNx
				Else
					oBrwCopart:AddBlank()
					nLinha := Len(oBrwCopart:aCols)
				EndIf

				For nNy := 1 To Len(aDadosCob[nNx][2][nNz])

					cCampo 		:= aDadosCob[nNx][2][nNz][nNy][1] 
					xConteudo	:= aDadosCob[nNx][2][nNz][nNy][2] 
					
					oBrwCopart:FieldPut(Alltrim(cCampo), xConteudo , nLinha)

				Next nNy 

			Next nNz

		EndIf
	Next nNx

	oBrowser:ForceRefresh(oBrowser)
	oBrowser:oBrowse:oBrowse:lDisablePaint := .F.
	oBrowser:oBrowse:oBrowse:Refresh()
	oBrowser:oBrowse:oBrowse:lDisablePaint := .T.

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} PL260Cobert

Função responsavel por carregar os dados da cobertura (Grupos de Cobertura,
Procedimentos,Grupo de Quantidade e Classe de Carência) na familia, vindo
do produto do Sub-contrato quando for pessoa juridica ou do cadastro do 
produto saúde quando for pessoa fisica

@author  Vinicius.Queiros
@version P12
@since   27/10/2020
@Param   cTipo		1 = Browser (Grupo Familiar Antigo)
					2 = MVC (Grupo Familiar Novo)
@Return Nil
/*/
//------------------------------------------------------------------- 

Function PL260Cobert(cTipo)

	Local aDadosCob
	Local cCodProd		:= ""
	Local cVerProd		:= ""
	Local cTipoGrupo  	:= ""
	Local cCodOpera		:= ""
	Local cCodEmpre		:= ""
	Local cNumContr		:= ""
	Local cVerContr		:= ""
	Local cSubContr		:= ""
	Local cVerSubCt		:= ""

	If cTipo == "1" // Browser

		cTipoGrupo	:= M->BA3_TIPOUS
		cCodProd 	:= M->BA3_CODPLA
		cVerProd 	:= M->BA3_VERSAO	
		cCodOpera	:= M->BA3_CODINT
		cCodEmpre	:= M->BA3_CODEMP
		cNumContr	:= M->BA3_CONEMP
		cVerContr	:= M->BA3_VERCON
		cSubContr	:= M->BA3_SUBCON
		cVerSubCt	:= M->BA3_VERSUB

		// Grupos de Cobertura
		aDadosCob := PLRetCobPro("1",cTipoGrupo,cCodProd,cVerProd,cCodOpera,cCodEmpre,cNumContr,cVerContr,cSubContr,cVerSubCt)
		If Len(aDadosCob) > 0
			GrvCobFamG(aDadosCob,@oBrwGruF,"BFC_CODGRU","",@oGetBVC,"BVC_CODGRU") // Carrega os Grupos Determinados no Browser
		EndIf

		// Procedimentos
		aDadosCob := PLRetCobPro("2",cTipoGrupo,cCodProd,cVerProd,cCodOpera,cCodEmpre,cNumContr,cVerContr,cSubContr,cVerSubCt)			
		If Len(aDadosCob) > 0
			GrvCobFamG(aDadosCob,@oBrwProF,"BFD_CODPSA","BFD_CODPAD",@oGetBVF,"BVF_CODPSA") // Carrega os Procedimentos no Browser
		EndIf

		// Grupo de Quantidade
		aDadosCob := PLRetCobPro("3",cTipoGrupo,cCodProd,cVerProd,cCodOpera,cCodEmpre,cNumContr,cVerContr,cSubContr,cVerSubCt)			
		If Len(aDadosCob) > 0
			GrvCobFamG(aDadosCob,@oBrwQtd,"BW7_CODGRU") // Carrega o Grupo de Quantidade no Browser
		EndIf

		// Classe de Carência
		aDadosCob := PLRetCobPro("4",cTipoGrupo,cCodProd,cVerProd,cCodOpera,cCodEmpre,cNumContr,cVerContr,cSubContr,cVerSubCt)			
		If Len(aDadosCob) > 0
			GrvCobFamG(aDadosCob,@oBrwBFJ,"BFJ_CLACAR") // Carrega as Classe de Carência no Browser
		EndIf

	EndIf

Return


//-------------------------------------------------------------------
/*/{Protheus.doc} CheckCPFFamilia
Verifica se a familia possui um beneficiário ativo com o CPF informado

@author Vinicius Queiros Teixeira
@version Protheus 12
@since 16/06/2021
/*/
//------------------------------------------------------------------- 
Static Function CheckCPFFamilia(cCpf, cMatricFam, oBrwUsr)

	Local lRetorno := .F.
	Local cQuery := ""
	Local nQuantidade := 0
	Local nPosCPF := 0
	Local nPosDtBloq := 0
	Local nX := 0
	Local nBenefAtivo := 0
	Local nBenefBloq := 0

	Default cMatricFam := ""
	Default cCpf := ""
	Default oBrwUsr := Nil

	If ValType(oBrwUsr) == "O"
		nPosCPF := ascan(oBrwUsr:aHeader,{|x| x[2] == "BA1_CPFUSR"}) 

		For nX := 1 To Len(oBrwUsr:aCols)
			If AllTrim(oBrwUsr:aCols[nX][nPosCPF]) == AllTrim(cCpf)
				nPosDtBloq := aScan(oBrwUsr:aHeader,{|x| x[2] == "BA1_DATBLO"})

				If Empty(oBrwUsr:aCols[nX][nPosDtBloq])
					nBenefAtivo++
				Else
					nBenefBloq++
				EndIf
			EndIf
		Next nX

		If nBenefAtivo == 0 .And. nBenefBloq > 0
			lRetorno := .T.
		EndIf
	Else
		cQuery := " SELECT COUNT(BA1_CPFUSR) CONTADOR FROM " + RetSQLName("BA1") + " BA1 "
		cQuery += " WHERE BA1.BA1_FILIAL = '"+xFilial("BA1")+"' "
		cQuery += "   AND BA1.BA1_CODINT = '"+Substr(cMatricFam, 1, 4)+"' "
		cQuery += "   AND BA1.BA1_CODEMP = '"+Substr(cMatricFam, 5, 4)+"' "
		cQuery += "   AND BA1.BA1_MATRIC = '"+Substr(cMatricFam, 9, 6)+"' "
		cQuery += "   AND BA1.BA1_CPFUSR = '"+cCpf+"' "
		cQuery += "   AND BA1.BA1_MOTBLO = ' ' "
		cQuery += "   AND BA1.D_E_L_E_T_ = ' ' "

		nQuantidade := MPSysExecScalar(cQuery, "CONTADOR")

		lRetorno := IIF(nQuantidade > 0, .T., .F.)
		
	EndIf

Return lRetorno

//-------------------------------------------------------------------
/*/{Protheus.doc} GetHoraMov
Seta a hora no Model(B3KMASTER) com o ultimo horário de movimentação 
da Data.

@author Vinicius Queiros Teixeira
@since 27/10/2021
@version Protheus 12
/*/
//-------------------------------------------------------------------
Function PLGetHrCentral(oModel, nQtdAdd)

	Local cTimeRet := ""
	Local cQuery := ""
	Local cRetHora:= ""
	Local cHoraMax := ""
	Local cMinMax := ""
	Local cSegMax := ""
	Local dDataMov := CToD(" / / ")
	Local cOperacao := oModel:GetValue("B3KMASTER", "B3K_OPESIB")
	Local cMatricBenef := oModel:GetValue("B3KMASTER", "B3K_MATRIC")

	Default nQtdAdd := 1
	
	If cOperacao == "4" .Or. cOperacao == "5"

		dDataMov := IIf(cOperacao == "4", oModel:GetValue("B3KMASTER", "B3K_DATBLO"), oModel:GetValue("B3KMASTER", "B3K_DATREA"))

		cQuery := "SELECT MAX(B3X_HORA) HORA FROM "+RetSQLName("B3X")+" B3X "
		cQuery += " WHERE B3X.B3X_FILIAL = '"+xFilial("B3X")+"'"
		cQuery += "	  AND B3X.B3X_IDEORI = '"+cMatricBenef+"' "
		cQuery += "	  AND B3X.B3X_DATA = '"+DtoS(dDataMov)+"' "
		cQuery += "	  AND (B3X.B3X_OPERA = '4' OR B3X.B3X_OPERA = '5')"
		cQuery += "   AND B3X.D_E_L_E_T_ = ' ' "

		cRetHora := MPSysExecScalar(cQuery, "HORA")

		If !Empty(cRetHora) .And. ChckTimeAtual(cRetHora)
			cHoraMax := Substr(cRetHora, 1, 2)
			cMinMax := Substr(cRetHora, 4, 2)
			cSegMax := Substr(cRetHora, 7, 2)
			
			Do Case
				Case Val(cSegMax) < (60 - nQtdAdd)
					cTimeRet := cHoraMax+":"+cMinMax+":"+StrZero(Val(cSegMax)+nQtdAdd, 2)
				
				Case  Val(cMinMax) < (60 - nQtdAdd)
					cTimeRet := cHoraMax+":"+StrZero(Val(cMinMax)+nQtdAdd, 2)+":"+cSegMax
					
				Case  Val(cHoraMax) < (24 - nQtdAdd)
					cTimeRet := StrZero(Val(cHoraMax)+nQtdAdd, 2)+":"+cMinMax+":"+cSegMax

			EndCase

			If !Empty(cTimeRet)
				oModel:SetValue("B3KMASTER", "B3K_HORMOV", cTimeRet)
			EndIf			
		EndIf

	EndIf

Return oModel


//-------------------------------------------------------------------
/*/{Protheus.doc} ChckTimeAtual
Verifica se o Time informado é maior que o Time Atual - Função Time()

@author Vinicius Queiros Teixeira
@since 27/10/2021
@version Protheus 12
/*/
//-------------------------------------------------------------------
Static Function ChckTimeAtual(cTimeMov)

	Local lRetorno := .F.
	Local cTimeAtual := Time()
	Local nHoraMov := Val(Substr(cTimeMov, 1, 2))
	Local nMinuMov := Val(Substr(cTimeMov, 4, 2))
	Local nSeguMov := Val(Substr(cTimeMov, 7, 2))
	Local nHoraAtu := Val(Substr(cTimeAtual, 1, 2))
	Local nMinuAtu := Val(Substr(cTimeAtual, 4, 2))
	Local nSeguAtu := Val(Substr(cTimeAtual, 7, 2))

	Do Case
		Case nHoraMov > nHoraAtu
			lRetorno := .T.
		Case nHoraMov == nHoraAtu .And. nMinuMov > nMinuAtu
			lRetorno := .T.
		Case nHoraMov == nHoraAtu .And. nMinuMov == nMinuAtu .And. nSeguMov > nSeguAtu
			lRetorno := .T.
	EndCase

Return lRetorno


//--------------------------------------------------------------------
/*/ {Protheus.doc} RelDesUsr()
Inicializador padrão do campo BA1_DESUSU

@author Gabriela Cattin
@since 06/06/2022
@version Protheus 12
/*/
//--------------------------------------------------------------------

Function RelDesUsr()

Local cReturn
Local cFunRel := FunName()

If cFunRel == 'PLSA124'
	cReturn := PLMVCDesUsu()
Else
    cReturn := P260DESUSU()
EndIf

return cReturn


//--------------------------------------------------------------------
/*/ {Protheus.doc} PLMVCDesGra
Inicializador padrão do campo BA1_DESGRA

@author Gabriela Cattin
@since 06/06/2022
@version Protheus 12
/*/
//--------------------------------------------------------------------

Function RelDesGra()

Local cReturn2
Local cFunRel := FunName()

If cFunRel == 'PLSA124'
    cReturn2 := PLMVCDesGra()
Else
    cReturn2 := P260DESGRA()
EndIf

return cReturn2