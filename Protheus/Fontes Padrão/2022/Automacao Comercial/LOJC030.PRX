#INCLUDE "PROTHEUS.CH" 
#INCLUDE "LOJC030.CH"
#INCLUDE "REPORT.CH"
#INCLUDE "DEFMOVCAIXA.CH"

Static oSaldFinal
Static oTrocoSaida
Static oTotCre
Static oTotDeb
Static oTroco

Static lLjcFid		:= SuperGetMv("MV_LJCFID",,.F.) .AND. CrdxInt()  //Indica se a recarga de cartao fidelidade esta ativa
Static nQuadro  	:= 1
Static aArraySE5	:= {}
Static cTxtRecCel   := "RECARGA DE CELULAR"

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³ LOJC030	³ Autor ³ Vendas Clientes       ³ Data ³ 28/01/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Resumo do Caixa                      					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ LOJC030()									              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ SIGALOJA 												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/      
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Conforme conversa com o Fernando Machima e Julio, foi retirado todo o   ³
//³ tratamento de Localizacoes, pois o LOJC031 substitui o LOJC030.         ³
//³ Cesar Valadao - 28/01/03                                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Function LOJC030()
Local oDlg											// Objeto
Local oFnt											// Fonte
Local oFnt2											// Fonte 2
Local oFnt3											// Fonte 3
Local oGroup										// Grupo de impressao
Local lMV_LJTROCO   := SuperGetMv("MV_LJTROCO") 	// Determina se utiliza troco para diferentes formas de Pagamento												
Local lMV_LJREST 	:= SuperGetMV( "MV_LJREST" )	// Determina se utiliza em restaurante 
Local nTrocoSaida   := 0							// Somatoria dos trocos de saida						

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Substituicao de variaveis³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³De:Variavel³Tipo    ³Programa    ³Para:Variavel³Tipo  ³Programa    ³Data      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄ´±±
±±³aCaixa     |Private |LOJC030.PRX |aCaixa       |Local |LOJC030.PRX |24/05/2006³±± 
±±³nTroco     |Private |LOJC030.PRX |nTroco       |Local |LOJC030.PRX |24/05/2006³±± 
±±³nTotCredito|Private |LOJC030.PRX |nTotCredito  |Local |LOJC030.PRX |24/05/2006³±± 
±±³aTotDebito |Private |LOJC030.PRX |nTotDebito   |Local |LOJC030.PRX |24/05/2006³±± 
±±³nSaldFinal |Private |LOJC030.PRX |nSaldFinal   |Local |LOJC030.PRX |24/05/2006³±± 
±±³nEstac     |Private |LOJC030.PRX |nEstac       |Local |LOJC030.PRX |24/05/2006³±± 
±±³nGorjeta   |Private |LOJC030.PRX |nGorjeta     |Local |LOJC030.PRX |24/05/2006³±± 
±±³oMovVen    |Private |LOJC030.PRX |oMovVen      |Local |LOJC030.PRX |24/05/2006³±± 
±±³oMovSan    |Private |LOJC030.PRX |oMovSan      |Local |LOJC030.PRX |24/05/2006³±± 
±±³aDadosVen  |Private |LOJC030.PRX |aDadosVen    |Local |LOJC030.PRX |24/05/2006³±± 
±±³aSinal     |Private |LOJC030.PRX |aSinal       |Local |LOJC030.PRX |24/05/2006³±± 
±±³aDDown     |Private |LOJC030.PRX |aDDown       |Local |LOJC030.PRX |24/05/2006³±± 
±±³aContFina  |Private |LOJC030.PRX |aContFina    |Local |LOJC030.PRX |24/05/2006³±± 
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/

Local aCaixa													// Array com os valores do caixa
Local nTroco                                 					// Valor da entrada de troco
Local nTotCredito                            					// Total de creditos
Local nTotDebito                             					// Total de debitos
Local nSaldFinal                             					// Saldo final do Caixa
Local nEstac                                 					// Valor referente ao estacionamento (restaurante)
Local nGorjeta                               					// Valor referente a gorjeta (restaurante)
Local nVlrCred  := 0                         					// Valor do credito utilizado na compensacao da NCC
Local oMovVen	:= Nil											// Movimento da venda
Local oMovSan	:= Nil											// Movimento
Local aDadosVen := {{"",0}}, aDadosSan := {{"",0}}				// Arrays - 1)Descricao 2)Valor 3)Qtde Finalizações
Local aSinal  	:= { "+", "+", "+", "+", "+", "", "+", "+", "+", "+", "+" , "+" }	// Array com as sinais realizados
Local aDDown  	:= Array( 12 )  	 							// Contem o 2o. nivel das opcoes: Cartao de Credito, Vales, Convenio, Financiado, Cartao de Debito e Devolucao , Estorno
Local aContFina := { 0 , 0 , 0 , 0 , ;
                     0 , 0 , 0 , 0 , ;
                     0 , 0 , 0 , 0	}        					// Contadores utilizados nos tipos de finalizações
Local cPerg     := "LJC030"        								// Codigo da pergunta
Local aLacAnalitico := {}										// Array com todos os lancamentos processados gerados de valores

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Se lSomaCred igual a .T. deve somar o credito de venda no totalizador de³
//³ credito do Resumo de Caixa 												³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local lSomaCred := .T.             								// Controla se considera o credito de venda, valor da NCC gerada e o utilizado na compensacao da NCC, no totalizador
Local lUsaNMov  := .F.											// Verifica se foi criado MV_PAR09

Local aArrayPagto	:= {}										// Guarda as Formas de Pagtos originais
Local aAreaSM0 		:= {}										// Guarda o Alias da tabela SM0
Local lLj030Val  	:= ExistBlock("LJ030VALPER")				// PE para validação das informações dos parametros do relatorio.
Local lRetLj030Val	:= .F.										// Retorno do ponto de entrada LJ030VALPER
Local n030Report	:= SuperGetMv("MV_TREPORT",.F.,2)			// Parâmetro para indicar se utiliza TREPORT
Local bReport030	:= Nil										// Bloco de código para rotina de impressão de acordo com o conteúdo do parâmetro MV_TREPORT
Local nLjResCx		:= SuperGetMV( "MV_LJRESCX",,1)
Local lHtml			:= .F.										// Verifica se está utilizando Smartclient HTML

/*
// Estrutura do array aContFina
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³1 - CC - CARTAO DE CREDITO   ³
//³2 - VA - VALES               ³
//³3 - CO - CONVENIO            ³
//³4 - FI - FINANCIADO          ³
//³5 - CD - CARTAO DE DEBITO    ³
//³6 - CH - CHEQUE              ³
//³7 - OU - OUTROS              ³
//³8 - RC - RECEBIMENTO         ³
//³9 - RC - RECEB. DIVERSOS     ³
//³10- FID- CARTAO FIDELIDADE  	³
//³11- PD - Pagamento Digital  	³
//³12- PX - Pagamento PIX	  	³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
*/
If nLjResCx == 2 //Habilita Resumo de Caixa 2.0
	LOJC130()
	Return()
Endif

If ExistBlock("LJ030DEV")
	aSinal 	:= { "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+", "+" }	// Array com as sinais realizados
EndIf

// Protege rotina para que seja usada apenas pelos módulos: 12=SIGALOJA, 23=Front Loja, 51=Gestão Hospitalar, 5=Faturamento
If !AmIIn(12,23,51,5)
	Return(NIL)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Pergunta que define o numero do movimento - (Somente se houver a tabela SLW)																  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If AliasIndic("SLW")
	lUsaNMov := .T.
Endif	
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega as perguntas selecionadas                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ mv_par01 - De Data            ?                              ³
//³ mv_par02 - Ate Data           ?                              ³
//³ mv_par03 - De Caixa           ?                              ³
//³ mv_par04 - Ate Caixa          ?                              ³
//³ mv_par05 - De Filial          ?                              ³
//³ mv_par06 - Ate Filial         ?                              ³
//³ mv_par07 - Gerar em Crystal Report?                          ³
//³ mv_par08 - Cons. cred. venda no total?                       ³
//| mv_par09 - Numero do Movimento ?
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

// Quando usa um range de Filiais esta disposicionando da Filial atual
aAreaSM0 := SM0->(GetArea())
If !Pergunte(cPerg,.T.)
	Return(NIL)
EndIf
RestArea(aAreaSM0)

If lLj030Val
	lRetLj030Val := ExecBlock("LJ030VALPER", .F., .F.)
	If !lRetLj030Val
		Return Nil
	EndIf
EndIf

// SmartClient HTML
If LjChkHtml()
	lHtml := .T.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//|	A mensagem abaixo so sera apresentada caso o sistema nao	|
//|	esteja utilizando o troco para qualquer numerario           |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lMV_LJREST .and. lMV_LJTROCO
	nWidth 	:= 800
	nHeight := 480
ElseIf lMV_LJREST  .and. lMV_LJTROCO
	nWidth 	:= 800
	nHeight := 540
ElseIf lMV_LJREST  .and. !lMV_LJTROCO
	nWidth 	:= 800 
	nHeight := 480
Else
	nWidth 	:= 800 
	nHeight := 425
EndIf

////////////////////////////////////////
//Tratamento para impressão em TREPORT//
////////////////////////////////////////
If n030Report == 1
	bReport030 := {||	Lj030Imp(lMV_LJTROCO	,nTrocoSaida	, aCaixa		,nTroco		,;
									nTotCredito	,nTotDebito		, nSaldFinal 	,aDadosVen	,;
									aDadosSan   ,oMovVen		, aSinal		,ADDOWN     ,;
									aContFina   ,nVlrCred		, oMovSan		,nEstac		,;
								  nGorjeta)}
ElseIf n030Report == 2
	bReport030 := {||	Lj030Report(lMV_LJTROCO	,nTrocoSaida	, aCaixa		,nTroco		,;
								  nTotCredito	,nTotDebito		, nSaldFinal 	,aDadosVen	,;
								  aDadosSan   	,oMovVen		, aSinal		,ADDOWN    	,;
								  aContFina   	,nVlrCred		, oMovSan		,nEstac		,;
								  nGorjeta)}
ElseIf n030Report == 3
	If !FindFunction("TRepInUse") .OR. TRepInUse()
		bReport030 := {||	Lj030Report(lMV_LJTROCO	,nTrocoSaida	, aCaixa		,nTroco		,;
									  nTotCredito	,nTotDebito		, nSaldFinal 	,aDadosVen	,;
									  aDadosSan   	,oMovVen		, aSinal		,ADDOWN     ,;
									  aContFina   	,nVlrCred		, oMovSan		,nEstac		,;
								  nGorjeta)}
	Else
		bReport030 := {||	Lj030Imp(lMV_LJTROCO	,nTrocoSaida	, aCaixa		,nTroco		,;
										nTotCredito	,nTotDebito		, nSaldFinal 	,aDadosVen	,;
										aDadosSan   ,oMovVen		, aSinal		,ADDOWN     ,;
										aContFina   ,nVlrCred		, oMovSan		,nEstac		,;
								  nGorjeta)}
	EndIf
EndIf

lSomaCred  := (mv_par08 == 1)

// Resumo de Caixa
DEFINE MSDIALOG oDlg FROM 0.1,0.1 TO nHeight, nWidth TITLE STR0001 PIXEL OF oMainWnd  

// Largura x Altura
DEFINE FONT oFnt	NAME "TIMES NEW ROMAN" SIZE 9,13 BOLD  
DEFINE FONT oFnt2	NAME "Arial" BOLD
DEFINE FONT oFnt3	NAME "Courier New" 
	
@ 001 , 004 TO 037, 290 LABEL "" OF oDlg  PIXEL

@ 005, 007 SAY STR0052  SIZE 60,10 OF oDlg PIXEL		// "De Data   :"
@ 005, 070 SAY MV_PAR01 SIZE 42,10 OF oDlg PIXEL RIGHT
@ 015, 007 SAY STR0053  SIZE 60,10 OF oDlg PIXEL		// "De Caixa  :"
@ 015, 070 SAY MV_PAR03 SIZE 42,10 OF oDlg PIXEL RIGHT
@ 025, 007 SAY STR0054  SIZE 60,10 OF oDlg PIXEL		// "De Filial :"
@ 025, 070 SAY MV_PAR05 SIZE 42,10 OF oDlg PIXEL RIGHT
@ 005, 170 SAY STR0055  SIZE 60,10 OF oDlg PIXEL		// "Ate Data   :"
@ 005, 240 SAY MV_PAR02 SIZE 42,10 OF oDlg PIXEL RIGHT
@ 015, 170 SAY STR0056  SIZE 60,10 OF oDlg PIXEL		// "Ate Caixa  :"
@ 015, 240 SAY MV_PAR04 SIZE 42,10 OF oDlg PIXEL RIGHT
@ 025, 170 SAY STR0057  SIZE 60,10 OF oDlg PIXEL		// "Ate Filial :"
@ 025, 240 SAY MV_PAR06 SIZE 42,10 OF oDlg PIXEL RIGHT
	                                                             
// Creditos (Vendas)
@ 040, 004 GROUP oGroup TO 157, 200 LABEL  STR0002  OF oDlg PIXEL  
oGroup:SetFont(oFnt2)

@ 046, 009 LISTBOX oMovVen FIELDS HEADER STR0060 SIZE 188, 108 ; //"Finalizadora - Vlr.Total - Qtd.Documentos" 
    ON DBLCLICK	LJ030DDown(	oMovVen:nAt		, 1				, @nTrocoSaida	, @nTroco		,;
    						@nTotCredito	, @nTotDebito	, @nSaldFinal	, @nEstac  		,;
    						@nGorjeta		, @oMovVen		, @oMovSan		, @aDadosVen	,;
    						@aSinal			, @aDDown		, @aContFina	, @aCaixa		,;
    						@aDadosSan		, @nVlrCred     );
    OF oDlg PIXEL FONT oFnt3
     
// Dbitos (Sangrias)
@ 040, 202 GROUP oGroup TO 157, 398 LABEL  STR0003  OF oDlg PIXEL 
oGroup:SetFont(oFnt2)

@ 046, 207 LISTBOX oMovSan FIELDS HEADER STR0061 SIZE 188, 108 ; //"Finalizadora - Vlr.Total" // 
    ON DBLCLICK	LJ030DDown(	oMovSan:nAt		, 2				, @nTrocoSaida	, @nTroco		,;
    						@nTotCredito	, @nTotDebito	, @nSaldFinal 	, @nEstac		,;
    						@nGorjeta		, @oMovVen		, @oMovSan		, @aDadosVen	,;
    						@aSinal			, @aDDown		, @aContFina	, @aCaixa		,;
    						@aDadosSan		, @nVlrCred     );
    OF oDlg PIXEL FONT oFnt3

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Seta Vetores de Dados de Credito / Debito para ListBox     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oMovVen:SetArray(aDadosVen)
oMovSan:SetArray(aDadosSan)
oMovVen:bLine := {|| {	aDadosVen[oMovVen:nAt][1] } }
oMovSan:bLine := {|| {	aDadosSan[oMovSan:nAt][1] } }
                                             
oMovVen:BLOSTFOCUS  	:= {|| nQuadro := 1 }                                                    
oMovSan:BLOSTFOCUS  	:= {|| nQuadro := 2 }

// Total de Créditos
@ 158, 004 GROUP oGroup TO 183, 200 LABEL STR0014 OF oDlg PIXEL  
oGroup:SetFont(oFnt2)

@ 169, 132 SAY oTotCre PROMPT nTotCredito SIZE 64, 10 OF oDlg;
	PIXEL RIGHT FONT Iif(lHtml, oFnt2, oFnt) COLOR CLR_HRED PICTURE "@E 9,999,999,999,999.99"

// Total de Débitos
@ 158, 202 GROUP oGroup TO 183, 398 LABEL STR0017 OF oDlg PIXEL
oGroup:SetFont(oFnt2)

@ 169, 330 SAY oTotDeb PROMPT nTotDebito SIZE 64, 10 OF oDlg;
	PIXEL RIGHT FONT Iif(lHtml, oFnt2, oFnt) COLOR CLR_HRED PICTURE "@E 9,999,999,999,999.99"

// Saldo Inicial
@ 185, 004 GROUP oGroup TO 210, 200 LABEL STR0005 OF oDlg PIXEL  
oGroup:SetFont(oFnt2)

@ 195, 132 SAY oTroco VAR nTroco SIZE 64, 10 OF oDlg PIXEL RIGHT FONT Iif(lHtml, oFnt2, oFnt);
	COLOR CLR_HRED PICTURE "@E 9,999,999,999,999.99"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Caso o parametro MV_LJTROCO esteja como TRUE, mostra na tela os Trocos de Saida³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lMV_LJTROCO
	// Troco Saida
	@ 185, 202 GROUP oGroup TO 210, 398 LABEL STR0069 OF oDlg PIXEL //Troco Saida
	oGroup:SetFont(oFnt2)
	
	@ 195, 330 SAY oTrocoSaida PROMPT nTrocoSaida SIZE 64, 12 OF oDlg;
	PIXEL RIGHT FONT oFnt COLOR CLR_HRED PICTURE "@E 9,999,999,999,999.99"

	// Saldo Final
	@ 212, 202 GROUP oGroup TO 237, 398 LABEL STR0018 OF oDlg PIXEL
	oGroup:SetFont(oFnt2)
	
	@ 221, 330 SAY oSaldFinal PROMPT nSaldFinal SIZE 64, 12 OF oDlg;
	PIXEL RIGHT FONT Iif(lHtml, oFnt2, oFnt) COLOR CLR_HRED PICTURE "@E 9,999,999,999,999.99"    
Else
	// Saldo Final
	@ 185, 202 GROUP oGroup TO 210, 398 LABEL STR0018 OF oDlg PIXEL
	oGroup:SetFont(oFnt2)
	
	@ 195, 330 SAY oSaldFinal PROMPT nSaldFinal SIZE 64, 12 OF oDlg;
	PIXEL RIGHT FONT Iif(lHtml, oFnt2, oFnt) COLOR CLR_HRED PICTURE "@E 9,999,999,999,999.99"
Endif

If SuperGetMV( "MV_LJREST", , .F. )
	IF !lMV_LJTROCO
		// Estacionamento
		@ 210, 004 GROUP oGroup TO 237, 200 LABEL STR0063 OF oDlg PIXEL //"Estacionamento"
		oGroup:SetFont( oFnt2 )
		
		@ 221, 132 SAY oEstac VAR nEstac SIZE 64, 10 OF oDlg PIXEL RIGHT FONT oFnt;
			COLOR CLR_HRED PICTURE "@E 999,999,999.99"
		
		// Gorjeta
		@ 210, 202 GROUP oGroup TO 237, 398 LABEL STR0064 OF oDlg PIXEL //"Gorjeta"
		oGroup:SetFont( oFnt2 )
		
		@ 221, 330 SAY oGorjeta VAR nGorjeta SIZE 64, 12 OF oDlg PIXEL RIGHT FONT oFnt ;
			COLOR CLR_HRED PICTURE "@E 999,999,999.99" 
	Else
		// Estacionamento
		@ 238, 004 GROUP oGroup TO 265, 200 LABEL STR0063 OF oDlg PIXEL //"Estacionamento"
		oGroup:SetFont( oFnt2 )
		
		@ 250, 132 SAY oEstac VAR nEstac SIZE 64, 10 OF oDlg PIXEL RIGHT FONT oFnt;
			COLOR CLR_HRED PICTURE "@E 999,999,999.99"
		
		// Gorjeta
		@ 238, 202 GROUP oGroup TO 265, 398 LABEL STR0064 OF oDlg PIXEL //"Gorjeta"
		oGroup:SetFont( oFnt2 )
		
		@ 250, 330 SAY oGorjeta VAR nGorjeta SIZE 64, 12 OF oDlg PIXEL RIGHT FONT oFnt ;
			COLOR CLR_HRED PICTURE "@E 999,999,999.99" 
	Endif
EndIf

@ 0.0, 73 BUTTON STR0019 SIZE 50,15 FONT oDlg:oFont ;
		  ACTION Eval(bReport030) OF oDlg 	// Botão de Imprimir

@ 2.0, 73 BUTTON STR0046 SIZE 50,15 FONT oDlg:oFont ;
          ACTION ExecBlock("LJ030ECF",.F., .F.,{lMV_LJTROCO	,nTrocoSaida	, aCaixa		,nTroco		,;
          										nTotCredito	,nTotDebito		, nSaldFinal 	,aDadosVen	,;
          										aDadosSan   ,oMovVen		, aSinal		,ADDOWN     ,;
          										aContFina   ,nVlrCred		, oMovSan  });
          										WHEN (ExistBlock("LJ030ECF")) OF oDlg 	// Botão de Imprimir ECF

// Botão de Detalhes do lancemento de venda
                                                          
@ 0.0, 87 BUTTON STR0071 SIZE 50,15 FONT oDlg:oFont ACTION (LJ030Refresh( Nil		, @oTrocoSaida	, @nTrocoSaida	, lMV_LJTROCO	,;
					 @aCaixa	, @nTroco		, @nTotCredito	, @nTotDebito	,;
					 @nSaldFinal, @nEstac 		, @nGorjeta		, @oMovVen		,;
					 @oMovSan	, @aDadosVen	, @aSinal		, @aDDown		,;
					 @aContFina	, @aDadosSan    , @nVlrCred     , lSomaCred    	,;
					 lUsaNmov   , @aLacAnalitico, @aArrayPagto)					,;    
					 Lj030PosPag(aDadosVen[oMovVen:nAt][1],aArrayPagto,oMovVen)	,;
					 Lj030Lto(aLacAnalitico,aDadosVen,oMovVen,aArrayPagto,aDadosSan,oMovSan)) OF oDlg 


@ 2.0, 87 BUTTON STR0020 SIZE 50,15 FONT oDlg:oFont ACTION oDlg:End() OF oDlg CANCEL		// Botão Sair	

// "Aguarde... Montando o Resumo de Caixa"
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Variaveis 'oTrocoSaida' e 'nTrocoSaida' passadas como referencia, pois, serao alteradas no decorrer do programa.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ACTIVATE MSDIALOG oDlg ON INIT LJMsgRun(STR0058,,;
	{||LJ030Refresh( Nil		, @oTrocoSaida	, @nTrocoSaida	, lMV_LJTROCO	,;
					 @aCaixa	, @nTroco		, @nTotCredito	, @nTotDebito	,;
					 @nSaldFinal, @nEstac 		, @nGorjeta		, @oMovVen		,;
					 @oMovSan	, @aDadosVen	, @aSinal		, @aDDown		,;
					 @aContFina	, @aDadosSan    , @nVlrCred     , lSomaCred    	,;
					 lUsaNmov   , @aLacAnalitico, @aArrayPagto)})

DbSelectArea("SL1")
DbSetOrder(1)

Return(NIL)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³ LJ030Imp ³ Autor ³ Vendas Clientes	    ³ Data ³ 26/06/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Impressao do Fechamento do Caixa        					  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ LJ030Imp()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = String que define a impressao do troco de saida    ³±±
±±³          ³ ExpN2 = Valor do troco de saida                            ³±±
±±³          ³ ExpA3 = Array com os valores do caixa                      ³±±
±±³          ³ ExpN4 = Valor do saldo inicial                             ³±±
±±³          ³ ExpN5 = Valor com o total de credito                       ³±±
±±³          ³ ExpN6 = Valor com o total de debito          			  ³±±
±±³          ³ ExpN7 = Valor do saldo final                               ³±±
±±³          ³ ExpA8 = Array com os dados da venda                        ³±±
±±³          ³ ExpA9 = Array com os dados da sangria                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ SIGALOJA 									              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function LJ030Imp(	lMV_LJTROCO	,nTrocoSaida	,aCaixa			,nTroco		,;
					nTotCredito	,nTotDebito		,nSaldFinal		,aDadosVen	,;
					aDadosSan   ,oMovVen		,aSinal 		,ADDOWN		,;
					aContFina  	,nVlrCred		,oMovSan		,nEstac		,;
					nGorjeta )

Local nColFim	:= 0								//Coluna final
Local nColIni	:= 0                                //Coluna inicial
Local nLin		:= 0                                //Controle de linha
Local nI		:= 0								//Variavel auxiliar de loop	
Local lAberto	:= .F.                              //Variavel auxiliar
Local lAbre		:= .F.                              //Variavel auxiliar
Local cPicture	:= ""                               //Picture do campo L1_VLRTOT
Local oPrint										//Objeto de impressora
Local oFont											//Objeto de fonte
Local nEscolha	:= SuperGetMV("MV_LJC030I",,0)		//Forma de Impressao do Resumo de Caixa. 1 Analitico (Aberto) ,0(zero) - pega a forma que estiver na tela    
Local cTexto 	:= ""								//Variavel que armazena os dados das linhas que compõem o  "Creditos / Vendas"
Local cTxtAux 	:= ""								//Variavel auxiliar para a variavel cTexto, cValor e cQuant
Local cValor	:= ""								//Varialvel que armazena o Valor extraido da variavel cTexto
Local cQuant	:= ""								//Varialvel que armazena a Quantidade extraido da variavel cTexto	
Local nEspaco 	:= 0								//Varialvel onde é armazenado a quantidade de espaços do texto ao valor
Local nPosic	:= 0 								//Varialvel que controla se devera apresentar a quantidade ou apendas espaços em branco

If nEscolha == 1  // Sempre Analitico  
	nI := 1
	Do While nI <= len(oMovVen:aArray)
		lAbre := (Left(oMovVen:aArray[nI][1],1) == "+" .AND. oMovVen:aArray[nI][2] <> 0)
		If lAbre
	    	LJ030DDown(	nI				, 1 				, @nTrocoSaida	 , @nTroco		,;
	    				@nTotCredito	, @nTotDebito		, @nSaldFinal	 , @nEstac		,;
	    				@nGorjeta		, @oMovVen			, @oMovSan		 , @aDadosVen	,;
	    				@aSinal			, @aDDown			, @aContFina	 , @aCaixa	   	,;
	    				@aDadosSan		, @nVlrCred     )
		EndIf
	nI++
	EndDo  
EndIf    

oFont  := TFont():New("Courier New",10,10,,.F.,,,,.T.,.F.)

oPrint := TMSPrinter():New( STR0023 ) //Fechamento de Caixa

If !oPrint:IsPrinterActive()
	oPrint:Setup()	// Escolhe a impressora
Endif

If !oPrint:IsPrinterActive()
	// "Resumo de Caixa" , "Não foi possível imprimir o Resumo de Caixa, pois não há nenhuma impressora conectada."
	Aviso(STR0001, STR0059, {"Ok"})
	Return(NIL)
EndIf
oPrint:SetPortrait()

nColIni  := 50		// Coluna inicial                      
nColFim  := 1750	// Coluna final
nSalto   := 40		// Salto de uma linha a outra

cPicture := PesqPict("SL1","L1_VLRTOT",18)

// Inicia a impressao da pagina
oPrint:StartPage()

// Imprime o cabecalho
oPrint:Say( 110, 100, PadC( Upper(STR0023), 65 ), oFont )

oPrint:Line( 150, nColIni, 150, nColFim )

oPrint:Say( 170, 100, STR0052 + PadR(DToC(MV_PAR01),20) + " "  + STR0055 + DToC(MV_PAR02))		// "De Data   : " ### "Ate Data   : "
oPrint:Say( 210, 100, STR0053 + PadR(MV_PAR03,20) +       " "  + STR0056 + MV_PAR04)				// "De Caixa  : " ### "Ate Caixa  : "
oPrint:Say( 250, 100, STR0054 + PadR(MV_PAR05,20) +       " "  + STR0057 + MV_PAR06)				// "De Filial : " ### "Ate Filial : "

oPrint:Line( 300, nColIni, 300, nColFim )
oPrint:Say( 320, 100, STR0030 + Transform( nTroco, cPicture ) ) //"Saldo Inicial .................................."

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Imprime Valores do Troco Saida           ³
//³Verifica se o parametro lMV_LJTROCO = .T.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lMV_LJTROCO
	oPrint:Line( 300, nColIni, 300, nColFim )
	oPrint:Say( 360, 100, STR0070 + Transform( nTrocoSaida , cPicture ) ) //"Troco Saída   .................................."	
Endif              

// Imprime os dados de venda
oPrint:Line( 400, nColIni, 400, nColFim )
oPrint:Say( 420, 100, STR0031 + Transform( nTotCredito, cPicture ) ) //"C R E D I T O S / V E N D A S .................."

nLin := 470

For nI :=1 to len(aDadosVen)
	lAberto := (Left(aDadosVen[nI][1],1)=="-" .AND. aDadosVen[nI][2] <> 0)
	cTxtAux := aDadosVen[nI][1]
	cTexto 	:= Left(cTxtAux,30)
	cTxtAux := AllTrim(SubStr(cTxtAux,Len(cTexto)+1))
	nPosic 	:= At(" ",cTxtAux)
	cQuant 	:= Space(4)
	If nPosic > 0
		cQuant 	:= PadL(SubStr(cTxtAux,nPosic+1),4)
		cTxtAux := Left(cTxtAux,nPosic-1)
	EndIf
	cValor 	:= cTxtAux
	nEspaco := 48-Len(cTexto + cValor + cQuant + " ")
	cTexto := cTexto + " " + Space(nEspaco) + cValor + cQuant + " "
	cTexto := padr(cTexto, 48,	IIf(lAberto,"","."))
	oPrint:Say( nLin, 100, cTexto + IIf(lAberto, "", Transform(aDadosVen[nI][2], cPicture)))
	nLin += nSalto
Next nI      

// Imprime os dados de Sangria
nLin += nSalto
oPrint:Line( nLin, nColIni, nLin, nColFim )
nLin += nSalto
oPrint:Say( nLin, 100, STR0033 + Transform( nTotDebito, cPicture ) ) //"D E B I T O S / S A N G R I A S ................"
nLin += (nSalto + 10)

For nI :=1 to len(aDadosSan)
	oPrint:Say( nLin, 100, padr(Left(aDadosSan[nI][1],23)+" "+;
	Space(06)+" ",48,".")+Transform(aDadosSan[nI][2], cPicture))
	nLin += nSalto
Next nI

//Estacionamento e Gorjeta
If SuperGetMV( "MV_LJREST", , .F. )
	nLin += nSalto
	oPrint:Line( nLin, nColIni, nLin, nColFim )
	nLin += nSalto
	oPrint:Say( nLin, 100, STR0065 + Transform( nEstac, cPicture ) ) //"Estacionamento ................................."
	nLin += (nSalto + 10)
	oPrint:Say( nLin, 100, STR0066 + Transform( nGorjeta, cPicture ) ) //"Gorjeta ........................................"
	nLin += (nSalto + 10)
EndIf

nLin += nSalto
oPrint:Line( nLin, nColIni, nLin, nColFim )
nLin += nSalto
oPrint:Say( nLin, 100, STR0034 + Transform( nSaldFinal, cPicture ) ) //"Saldo Final ...................................."
nLin += (nSalto + 10)

// Monta a borda de fora pois neste momento sabemos qual a linha final
oPrint:Line( 100, nColIni, 100, nColFim )
oPrint:Line( nLin, nColIni, nLin, nColFim )
oPrint:Line( 100, nColIni, nLin, nColIni )
oPrint:Line( 100, nColFim, nLin, nColFim )

oPrint:EndPage()

oPrint:Preview()

//////////////////////////////////////////////////////////////////////////////
//Efetuo novamente a atualização dos objetos para não ocorrer inconsistência//
//////////////////////////////////////////////////////////////////////////////
oMovVen:SetArray(aDadosVen)
oMovVen:bLine := {|| { aDadosVen[oMovVen:nAt][1] }}
oMovVen:Refresh()
oMovSan:SetArray(aDadosSan)
oMovSan:bLine := {|| { aDadosSan[oMovSan:nAt][1] }}
oMovSan:Refresh()

Return(Nil)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Funcao	 ³MovimCaixa³ Autor ³ Vendas Clientes       ³ Data ³ 28/01/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descricao³Carrega array com valores totais do caixa em uma data       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Sintaxe  ³MovimCaixa(ExpC1,ExpD1,ExpC2,ExpA1,ExpA2)                   ³±±
±±³          ³Caixa,Data Desejada,Opcao de troco,Drill Down e Cont.Financ.³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Numero do caixa    								  ³±±
±±³          ³ ExpD2 = Data do movimento								  ³±±
±±³          ³ ExpC3 = Determina se utiliza troco p/ diferentes formas    ³±±
±±³          ³ ExpA4 = Array com o segundo nivel das opcoes               ³±±
±±³          ³ ExpA5 = Array utilizado nos tipos de finalizadores         ³±±
±±³          ³ ExpN6 = Valor do credito utilizado na compensacao do NCC	  ³±±
±±³          ³ ExpL7 = Verifica se considera o credito da venda no tota-  ³±±
±±³          ³         lizador de credito   						      ³±±
±±³          ³ ExpL8 = Verifica se foi criado MV_PAR09              	  ³±±	
±±³          ³ ExpA9 = Array com os laçamentos analiticos              	  ³±±	
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ SIGALOJA                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MovimCaixa( cCaixa	  , dDataMovto, lMV_LJTROCO, aDDown	 ,;
					 aContFina, nVlrCred  , lSomaCred  , lUsaNmov,;
					 aLacAnalitico )

Local nPos  		:= 0						// Posicao no array
Local bTab			:= {|| }					// Codeblock para alinhar os valores a direita
Local nI, nJ  		:= 0						// Variavel para auxiliar o FOR
Local aCaixa    	:= Array( P_MAXDEFINE )		// Array com os valores do caixa
Local aValForma 	:= {}						// Array que armazena os subitens dos itens do ListBox de Vendas
Local nSe5Valor 	:= 0						// Variavel que soma com o E5_VALOR
Local nForma		:= 0						// Numero da forma de pagamento: 1) Cartao de Credito, 2) Vales, 3) Convenio
												// 4) Financiado, 5) Cartao de Debito. Varia de acordo com o L4_FORMA
Local cDeFilSE5	    := ""						// Armazena a "filial De" que sera considerada no filtro do SE5
Local cAteFilSE5	:= ""						// Armazena a "filial Ate" que sera considerada no filtro do SE5
Local cDeFilSL1   	:= ""						// Armazena a "filial De" que sera considerada no filtro do SL1
Local cAteFilSL1 	:= ""						// Armazena a "filial Ate" que sera considerada no filtro do SL1
Local cDeFilSE1  	:= ""						// Armazena a "filial De" que sera considerada no filtro do SE1
Local cAteFilSE1   	:= ""						// Armazena a "filial Ate" que sera considerada no filtro do SE1
Local cDeFilSD1    	:= ""						// Armazena a "filial De" que sera considerada no filtro do SD1
Local cAteFilSD1    := ""						// Armazena a "filial Ate" que sera considerada no filtro do SD1
Local cDeFilSLT     := ""						// Armazena a "filial De" que sera considerada no filtro do SLT
Local cAtFilSLT     := ""						// Armazena a "filial Ate" que sera considerada no filtro do SLT
Local lLjVerTudo	:= SuperGetMv("MV_LJVERCX",,.F.) //Indica se o resumo de caixa vera todas as filiais e caixas , mesmo exclusivas
Local lUsaParam  	:= Empty(cCaixa) 			// Valida se a variavel veio preenchida
Local aDev										// Array contendo as devolucoes
Local aEstorno          						// array contendo os estornos.
Local lLj030Dev  	:= ExistBlock("LJ030DEV")	// Variavel que verifica se existe ponto de entrada
Local lLJ030TES  	:= ExistBlock("LJ030TES")	// Variavel que verifica se existe ponto de entrada
Local lNivel     	:= .F.						// Verifica se explode nivel
Local aRet		 	:= {} 						// Recebe o retorno do ponto de entrada "LJ030TES"
Local aAux		 	:= {} 						// Array auxiliar com os valores por cada tipo de pagamento
Local cAlias     	:= Alias()					// Variavel que guarda o alias que esta aberto
Local nDinheiro  	:= 0						// Valor recebido em dinheiro   
Local aAuxRecebs    := {}						// Array auxiliar com o numero e parcela do SE5
Local nIndice   	:= 5						// Define qual indice sera utilizado
Local cPgtoAux		:= ""						// Variavel auxiliar para montar a descricao do pagamento.
Local cForPagto		:= ""						// Variavel auxiliar para a distribuicao das formas de pagto.
Local cSimb1		:= SuperGetMv("MV_SIMB1")	// Simbolo da moeda 1.
Local nBkValCred	:= 0						// Armazena o Valor do Credito que foi utilizado na venda
Local aAreaSD1      := nil                      // Area de Trabalho do SD1
Local lE5_Estor     := .F.                      // Lancamento E5 Estornado?
Local lDevDinhei    := .F.                      // Lancamento E5 Dinheiro Devolvido ao cliente?
Local cEmpAtual		:= FWCodFil()   			// Retorna Empresa + Unidade Negocio + Filial
Local nTamanhoFil	:= FWSizeFilial()			// Retorna o tamanho do campo filial
Local nICMSRET      := 0
Local aArea         := {}
Local lTabExclusive := .T.
Local lCliRecIss	:= .F.						// Cliente recolhe ISS ?
Local lMvLjTroco	:= SuperGetMV("MV_LJTROCO",,.F.)
Local nVlrAux		:= 0						//E5_VALOR somado ao registro de troco (somente se lMvLjTroco = .T.)
Local lCondicao		:= .T.						// Controla condição do parametro MV_CRNEG quando o E5_TIPO for 'CC'
Local lSangDin   	:= SuperGetMV("MV_LJ350MV",,2) == 1				//Habilitada opcao de sangria somente para 'dinhei'ro
Local lContinua		:= .T.
Local cChave		:= "" 						// Armazena dados do título para procura no SE5
Local cFilSE5Tmp	:= ""						// Armazena Filial da tabela temporária SE5TMP
Local aChave		:= {}						// Armazena as chaves que já foram verificadas
Local nPosChave  	:= 0						// Posição da chave no array aChave 	
Local lRecOutraFil	:= .F.						// Guarda se o registro foi pago em outra filial
Local lPgMaisFil	:= .F.						// Guarda se irá filtrar por mais de uma filial	
Local lLj350Conf	:= IsInCallStack("LJ350CONF") .OR. IsInCallStack("LJ350RELCF")  // Verifica se veio do Fechamento de Caixa (LOJA350)
Local cSQL          := ""
Local cCmpE5Key     := Space( TamSx3("E5_KEY")[1] )
Local lL1ABTOPCC 	:= SL1->(FieldPos( "L1_ABTOPCC" )) > 0
Local nVlrAbtPCC	:= 0
Local nVlrISS		:= 0
Local nVImpostos 	:= 0
Local lRestauran	:= SuperGetMV("MV_LJREST", , .F.) .And. SL1->( FieldPos ( "L1_ESTACIO" ) ) > 0  .And. SL1->( FieldPos ( "L1_SERVICO" ) ) > 0  //Caso seja utilizado o sistema de Gestão de Restaurantes
Local nVlrEstaci	:= 0
Local nVlrServic 	:= 0
Local nVlrCarFid	:= 0
Local lMvDescIss 	:= SuperGetMV("MV_DESCISS", , .F.)
Local lMvLJRECIS 	:= SuperGetMV("MV_LJRECIS", , .F.)
Local lL1RECISS 	:= SL1->(FieldPos("L1_RECISS")) > 0
Local nVlrPagDig	:= 0
Local lL1VLRPGDG 	:= SL1->(FieldPos( "L1_VLRPGDG" )) > 0
Local nVlrPagPIX	:= 0
Local lL1VLRPGPX 	:= SL1->(FieldPos( "L1_VLRPGPX" )) > 0
Local nSE5Troco		:= 0						// Guarda Valor do Troco 

#IFDEF TOP
	Local cQuery								// Variavel que ira armazenar a query
#ELSE
	Local cNumero    := ""						// Numero do titulo
#ENDIF

DEFAULT aDDown        := Array(9)
DEFAULT nVlrCred      := 0
DEFAULT lSomaCred     := .T.
DEFAULT dDataMovto    := dDataBase
DEFAULT aLacAnalitico := {}
DEFAULT lUsaNMov	  := .F.

If lLjVerTudo .AND. !lLj350Conf .AND. MV_PAR05 <> "" .AND. MV_PAR06 <> ""
	lUsaParam := .T. //Pegara as filiais indicadas nos parametos   
EndIf

If Type("aContFina") <> "A"
	aContFina := {0,0,0,0,0,0,0,0,0,0,0,0} 	// Contadores utilizados nos tipos de finalizacoes
Endif

If lUsaParam 
	cDeFilSE5  := FWxFilial("SE5",MV_PAR05)	// Calcula a "De Filial" do SE5
	cAteFilSE5 := FWxFilial("SE5",MV_PAR06)	// Calcula a "Ate Filial" do SE5
	cDeFilSL1  := FWxFilial("SL1",MV_PAR05)	// Calcula a "De Filial" do SL1
	cAteFilSL1 := FWxFilial("SL1",MV_PAR06)	// Calcula a "Ate Filial" do SL1
	cDeFilSE1  := FWxFilial("SE1",MV_PAR05)	// Calcula a "De Filial" do SE1
	cAteFilSE1 := FWxFilial("SE1",MV_PAR06)	// Calcula a "Ate Filial" do SE1
	cDeFilSD1  := FWxFilial("SD1",MV_PAR05)	// Calcula a "De Filial" do SD1
	cAteFilSD1 := FWxFilial("SD1",MV_PAR06)	// Calcula a "Ate Filial" do SD1
	cDeFilSLT  := FWxFilial("SLT",MV_PAR05)	// Calcula a "De Filial" do SLT
	cAtFilSLT  := FWxFilial("SLT",MV_PAR06)	// Calcula a "Ate Filial" do SLT
Else
	cDeFilSE5  := xFilial("SE5")
	cAteFilSE5 := xFilial("SE5")
	cDeFilSL1  := xFilial("SL1")
	cAteFilSL1 := xFilial("SL1")
	cDeFilSE1  := xFilial("SE1")
	cAteFilSE1 := xFilial("SE1")
	cDeFilSD1  := xFilial("SD1")
	cAteFilSD1 := xFilial("SD1")
	cDeFilSLT  := xFilial("SLT")
	cAtFilSLT  := xFilial("SLT") 
EndIf

//Adicionamos zero a esquerda, pois antes o parametro "Numero do Movimento" 
// era do tipo Numerico, ou seja, se fosse uma unidade, so possuia um digito
If lUsaNMov .AND. Len( AllTrim(MV_PAR09) ) == 1
	MV_PAR09 := PadL(AllTrim(MV_PAR09), Len(MV_PAR09), "0")
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Espacos para alinhar o valor a direita.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bTab := { |x| Space( 26 - Len(x) ) }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Inicializa vetor que armazena os subitens dos itens do ListBox de Vendas³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aDDown) > 0
	aValForma	:= Array( Len(aDDown) )
Else
	aValForma	:= Array(8)
Endif
		
For nI := 1 to Len( aDDown )
	aDDown[nI]    := {}
	aValForma[nI] := {}
Next nI	

For nI := 1 to Len( aCaixa )
	aCaixa[nI] := 0
Next nI
                 
cCaixa := SubStr( cCaixa, 1, 3 )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Leitura do SE5 para considerar: Sangria, Troco e Movimenta-³
//³ coes bancarias.                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
#IFDEF TOP
	cQuery := "SELECT SE5.E5_DATA   , SE5.E5_VALOR  , SE5.E5_BANCO  , SE5.E5_AGENCIA, "
	cQuery +=       " SE5.E5_CONTA  , SE5.E5_PREFIXO, SE5.E5_NUMERO , SE5.E5_PARCELA, "
	cQuery +=       " SE5.E5_TIPO   , SE5.E5_TIPODOC, SE5.E5_CLIFOR , SE5.E5_LOJA, "
	cQuery +=       " SE5.E5_SEQ    , SE5.E5_VENCTO , SE5.E5_MOEDA  , SE5.E5_RECPAG, "
	cQuery +=       " SE5.E5_MOTBX  , SE5.E5_FILIAL , SE5.E5_FILORIG, SE5.E5_SITUACA, "
	cQuery +=       " SE5.E5_NATUREZ, SE5.E5_ORIGEM , SE5.E5_HISTOR , SE5.E5_KEY "

	If lMvLjTroco 
		cQuery += "		,E5.E5_VALOR E5_VLRTRC"
    EndIF

	cQuery += " FROM " + RetSQLName("SE5") + " SE5"
	if lMvLjTroco 
		cQuery += " LEFT JOIN "
		cQuery += RetSQLName("SE5") + " E5"
		cQuery += "	ON SE5.D_E_L_E_T_ = E5.D_E_L_E_T_"
		cQuery +=   " AND SE5.E5_FILIAL = E5.E5_FILIAL"
		cQuery +=   " AND SE5.E5_BANCO = E5.E5_BANCO"
		cQuery +=   " AND SE5.E5_AGENCIA = E5.E5_AGENCIA"
		cQuery +=   " AND SE5.E5_CONTA = E5.E5_CONTA"
		cQuery +=   " AND SE5.E5_PREFIXO = E5.E5_PREFIXO"
		cQuery +=   " AND SE5.E5_NUMERO = E5.E5_NUMERO"
		cQuery +=   " AND SE5.E5_PARCELA = E5.E5_PARCELA"
		cQuery +=   " AND SE5.E5_CLIFOR = E5.E5_CLIFOR"
		cQuery +=   " AND SE5.E5_LOJA = E5.E5_LOJA"
		cQuery +=   " AND SE5.E5_SEQ = E5.E5_SEQ"
		cQuery +=   " AND E5.E5_TIPODOC = 'VL'"
		cQuery +=   " AND E5.E5_MOEDA = 'TC'"
		cQuery +=   " AND E5.E5_RECPAG = 'P'"
        cQuery +=   " AND E5.E5_PREFIXO <> '" + Space( TamSx3("E5_PREFIXO")[1] ) + "'"  //Tratamento para pegar troco só da venda
        cQuery +=   " AND E5.E5_NUMERO <> '" + Space( TamSx3("E5_NUMERO")[1] ) + "'"    //Tratamento para pegar troco só da venda
    EndIF
    
	If lUsaParam
		cQuery += " WHERE (SE5.E5_FILORIG BETWEEN '" + MV_PAR05 + "' AND '" + MV_PAR06 + "')"
		cQuery += " AND SE5.E5_DATA BETWEEN '" + DToS(MV_PAR01) + "' AND '" + DToS(MV_PAR02) + "'"
		cQuery += " AND SE5.E5_BANCO BETWEEN '" + MV_PAR03 + "' AND '" + MV_PAR04 + "'"
	Else
		If lLj350Conf				//Se veio do Fechamento de Caixa - nenhum pergunte LJC030 é lido
			cQuery += " WHERE (SE5.E5_FILORIG = '" + cDeFilSE5 + "')"		//Seu conteúdo é o xFilial("SE5")
		Else
			cQuery += " WHERE (SE5.E5_FILORIG = '" + MV_PAR05 + "')"
		EndIf
		cQuery += " AND SE5.E5_DATA = '" + DToS(dDataMovto) + "'"
		cQuery += " AND SE5.E5_BANCO = '" + cCaixa + "'"
	EndIf
	If lUsaNMov .AND. SE5->(FieldPos("E5_NUMMOV")) > 0 .AND. MV_PAR09 > "00"
		cQuery += " AND SE5.E5_NUMMOV = '" + MV_PAR09 + "'"
	Endif			
	cQuery += " AND ( SE5.E5_SITUACA <> 'C' OR SE5.E5_ORIGEM = 'LOJXREC ')"
	cQuery += " AND SE5.E5_MOEDA <> 'ES'" 
    cQuery += " AND SE5.E5_TIPODOC NOT IN ('LJ','DC','JR','MT','CM','D2','J2','M2','C2','V2','CP','TL')"
	cQuery += " AND NOT (SE5.E5_ORIGEM = 'LOJXREC ' AND SE5.E5_MOEDA = 'TC') "
	cQuery += " AND SE5.D_E_L_E_T_ = ' ' "
	
	MemoWrite("LOJC030_SE5.SQL",cQuery)
	cQuery := ChangeQuery(cQuery)

	dbUseArea( .T., "TOPCONN", TCGenQry(,,cQuery), 'SE5TMP', .F., .T.)
	TCSetField("SE5TMP", "E5_DATA", "D")
	TCSetField("SE5TMP", "E5_VENCTO", "D")

	//Verifica se a tabela é exclusiva = "E"
	lTabExclusive := FWModeAccess("SE5")=="E"
	
	//Alimenta no array                                    
	aArraySE5 := {}
	
	While !SE5TMP->(EOF())
		nOpDeb := 0

        //Tamanho do campo Filial maior que 2, esta configurado para Gestao de Empresas
		If !lLjVerTudo 
			If nTamanhoFil > 2 .And. lTabExclusive
				// Verifica se o registro da tabela SE5 e da empresa corrrente    			
				If Alltrim(SE5TMP->E5_Filial) <> Alltrim(cEmpAtual) // Empresa + Unidade Negocio + Filial
		           	DbSelectArea("SE5TMP") 
					SE5TMP->(DbSkip())                                                                        
					Loop                                                       				
				Endif		
				DbSelectArea("SE5TMP")
			Endif
		EndIf		
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se tem cancelamento para este titulo.³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ljChkKeyCanc(Alias())
			SE5TMP->(dbSkip())
			Loop
		EndIf

        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Considera os titulos em NCC que foram utilizados para baixar titulos ³
		//³ na rotina de recebimento de titulos (LOJXREC), verificando se a      ³
		//³ moeda de baixa eh igual a "CR"                                       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
        If "NCC" $ MV_CRNEG .And. AllTrim(E5_TIPO) == "CC"
            lCondicao := .F.
        Else
            lCondicao := AllTrim(E5_TIPO) $ MV_CRNEG + "/PA"
        EndIf

        //Quando data igual database,nao entra aqui
        If (AllTrim(E5_TIPO)<>"NCC" .OR. AllTrim(E5_MOEDA)<>"CR") .AND. ( lCondicao .OR. Iif("FINA" $ E5_ORIGEM, .F., E5_VENCTO > E5_DATA) )
            
            //Pagamento por compensacao
            If AllTrim(E5_TIPO) <> "PA" .OR. AllTrim(E5_MOTBX) <> "NOR"	
                SE5TMP->(dbSkip())
                Loop
            EndIf
        Endif

		//------------------------------------------------------------------------------------------------------
		// Se o lançamento for referente a uma venda estornada ou Dinheiro Devolvido, então ignora o lançamento
		//------------------------------------------------------------------------------------------------------
		If E5_TIPODOC $ "TR|DH" .and. !Empty(E5_NUMERO) .and. !Empty(E5_PREFIXO)

			aAreaSD1 := SD1->(GetArea())
			DbSelectArea("SD1")
			DbSetOrder(1)

			If SD1->(DbSeek(xFilial("SD1") + SE5TMP->E5_NUMERO + SE5TMP->E5_PREFIXO + SE5TMP->E5_CLIFOR + SE5TMP->E5_LOJA ))
				lE5_Estor := !Empty(SD1->D1_OPERADO)
				lDevDinhei:= AllTrim(SD1->D1_ORIGLAN) == "LO" //Origem LOJA
			Else
				lE5_Estor := .F.
				lDevDinhei:= .F.
			EndIf

			RestArea(aAreaSD1)

			DbSelectArea("SE5TMP")
			
			If lE5_Estor .Or. lDevDinhei
           		SE5TMP->(DbSkip())
				Loop
			EndIf

		EndIf

		nSe5Valor := E5_VALOR

		If lMvLjTroco
			nSE5Troco := SE5TMP->E5_VLRTRC
		EndIf	

		//Verifica se é uma Recarga de Celular
		If cTxtRecCel $ UPPER(E5_HISTOR) .And. Alltrim(E5_TIPO) == "R$"
			aCaixa[P_VEND_DINHEIRO]	+= nSe5Valor

		//Considera Entrada de Troco estornada, pois o Financeiro nao marca o campo E5_SITUACA como estornado
        //Considera Troco lançando diretamente no FINA100 - E5_TIPODOC == "VL"
        ElseIf (E5_TIPODOC == "TR" .OR. E5_TIPODOC == "TE" .OR. E5_TIPODOC == "VL") .AND. E5_MOEDA == "TC" .AND. E5_RECPAG == "R"	// => Saldo inicial
			aCaixa[P_TROCO] += nSe5Valor

		ElseIf	(E5_TIPODOC == "VL" .AND. E5_MOEDA <> "TC" );
				.OR. Empty(E5_TIPODOC);
				.OR. E5_TIPODOC == "BL";
				.OR. E5_TIPODOC == "DH";				
				.OR. (Alltrim(E5_TIPO) == "NCC" .AND. Alltrim(E5_MOEDA) == "CR" );
				.OR. (E5_TIPODOC $ MVRECANT .AND. AllTrim(E5_TIPO) $ MVRECANT);
				.OR. (E5_TIPODOC == "BA" .AND. E5_MOEDA <> "TC"  .AND. E5_MOTBX == "LOJ" .AND. !IsMoney(E5_MOEDA));
				.OR. (AllTrim(E5_ORIGEM) == "LOJXREC" .AND. E5_TIPODOC == "ES" .AND. E5_MOTBX == "LOJ") //Estorno de Recebimento de Titulo
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Pagamento -> Tipo de doc VL com moeda diferente de TC e recebimentos de titulos com NCC³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If E5_RECPAG == "P"
				If AllTrim(E5_ORIGEM) == "LOJXREC" .And. E5_TIPODOC == "ES"
					// Devido Result Set ter sido ajustado, e agora no Left Join retornar, a informação E5_VLRTRC correta,
					// está sendo atribuído aqui, o valor total do título recebido.
					// Ajuste necessário para não dar diferença no Saldo Final
					aCaixa[P_ESTORNO_REC] += (nSe5Valor + nSE5Troco)  
					nOpDeb := P_ESTORNO_REC
				Else
					aCaixa[P_PAGAMENTOS] += nSe5Valor
					nOpDeb := P_PAGAMENTOS
				EndIf
			ElseIf E5_RECPAG == "R" .AND. !(Alltrim(E5_TIPO) $ "CH/R$/CC")
				
				/*/
				Se foi feito um Recebimento com o parametro MV_LJTROCO habilitado,
				sera criado um registro referente ao troco na SE5. Se a forma de pagamento
				foi dinheiro, o troco já está somado ao E5_VALOR, senao, 
				somamos ao valor do recebimento o seu respectivo valor de troco (nVlrAux).
				/*/
				If lMvLjTroco .AND. E5_MOEDA <> "R$"
					nVlrAux := nSe5Valor + nSE5Troco

				Else
					lPgMaisFil		:= Iif(lLj350Conf, .F., MV_PAR05 <> MV_PAR06)
					lRecOutraFil	:= .F. 
					cFilSE5Tmp 		:= SE5TMP->E5_FILORIG
					cChave 			:= SE5TMP->E5_FILIAL+SE5TMP->E5_PREFIXO+SE5TMP->E5_NUMERO+SE5TMP->E5_PARCELA+SE5TMP->E5_TIPO+SE5TMP->E5_CLIFOR+SE5TMP->E5_LOJA+SE5TMP->E5_SEQ					
					nPosChave 		:= aScan(aChave, {|x| x == cChave})

					If nPosChave == 0

                        cSQL := " SELECT E5_KEY"
                        cSQL += " FROM " + RetSQLName("SE5")
                        cSQL += " WHERE D_E_L_E_T_ = ' '"
                        cSQL +=   " AND E5_FILIAL = '"   + SE5TMP->E5_FILIAL + "'"
                        cSQL +=   " AND E5_PREFIXO = '"  + SE5TMP->E5_PREFIXO + "'"
                        cSQL +=   " AND E5_NUMERO = '"   + SE5TMP->E5_NUMERO + "'"
                        cSQL +=   " AND E5_PARCELA = '"  + SE5TMP->E5_PARCELA + "'"
                        cSQL +=   " AND E5_TIPO = '"     + SE5TMP->E5_TIPO + "'"
                        cSQL +=   " AND E5_CLIFOR = '"   + SE5TMP->E5_CLIFOR + "'"
                        cSQL +=   " AND E5_LOJA = '"     + SE5TMP->E5_LOJA + "'"
                        cSQL +=   " AND E5_SEQ = '"      + SE5TMP->E5_SEQ + "'"
                        cSQL +=   " AND E5_KEY <> '"     + cCmpE5Key + "'"
                        cSQL +=   " AND E5_FILORIG <> '" + cFilSE5Tmp + "'"

                        If Len( RmiXSql(cSQL, "*", /*lCommit*/, /*aReplace*/) ) > 0 
                            lRecOutraFil := .T.
                            Aadd(aChave, cChave)
                        EndIf

						DbSelectArea("SE5TMP")
					Else

						DbSelectArea("SE5TMP")											
						SE5TMP->(DbSkip())
						Loop
					EndIf										

					If !lRecOutraFil .OR. (nPosChave == 0 .AND. lPgMaisFil)
						nVlrAux := nSe5Valor	
					EndIf

				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Distribui os recebimentos por forma de pagamento, para fazer o DDown na tela. ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If AllTrim( E5_MOEDA ) <> ""
					cForPagto := E5_MOEDA
					If cPaisLoc == "BRA" .AND. Val(cForPagto) == 1 
						cForPagto := "R$"
					EndIf
					
					cPgtoAux := AllTrim(Tabela("06", cForPagto, .F.))
					
					If Empty(cPgtoAux) .And. AllTrim(cForPagto) == "CR"
                       cPgtoAux := STR0045 //"Credito de Venda"
                    EndIf
				Else
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Caso o pagamento tenha sido feito antes dessa melhoria e não tenha³
					//³forma de pagamento no SE5 sera incluido como "OUTROS"             ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cForPagto := "OU"
					cPgtoAux  := "OUTROS"
				Endif

				nPos := aScan(aDDown[8], {|x| x[3] == cForPagto})
				If nPos <> 0
					aDDown[8][nPos][2] += nVlrAux
					aDDown[8][nPos][4] ++
				Else
					aAdd(aDDown[8], {nil, nVlrAux, cForPagto, 1})
					nPos := len(aDDown[8])
				Endif
				aDDown[8][nPos][1] := "  " + cPgtoAux + Space( 31 - Len( cPgtoAux ) ) + Transform(aDDown[8][nPos][2], "@E 99,999,999.99") + Space(2) + AllTrim(Str(aDDown[8][nPos][4]))

				If aScan(aAuxRecebs, {|x| x == E5_NUMERO + E5_PARCELA}) == 0
					AAdd(aAuxRecebs, E5_NUMERO + E5_PARCELA)
					aContFina[9]		+= 1
				EndIf

				aCaixa[P_RECEBIMENTOS] 	+= nVlrAux
				nOpDeb:= P_RECEBIMENTOS
			
			ElseIf E5_RECPAG == "R" .And. E5_TIPODOC == "VL" .And. !(cTxtRecCel $ UPPER(E5_HISTOR) .and. Alltrim(E5_TIPO) == "R$")
				aCaixa[P_VEND_OUTROS] += nSe5Valor
			Endif

		ElseIf E5_TIPODOC $ "SG/TR/TE" .AND. E5_RECPAG == "P"
			
			If E5_MOEDA == cSimb1 .Or. E5_MOEDA == "01"
				aCaixa[P_SANG_DINHEIRO]		+=	nSe5Valor
				nOpDeb:= P_SANG_DINHEIRO
			ElseIf E5_MOEDA $ "C1,C2,C3,C4,C5,CH"
				aCaixa[P_SANG_CHEQUE]		+=	nSe5Valor
				nOpDeb:= P_SANG_CHEQUE
			ElseIf E5_MOEDA == "CC"
				aCaixa[P_SANG_CARTAO]		+=	nSe5Valor	
				nOpDeb:= P_SANG_CARTAO		
			ElseIf E5_MOEDA == "VA"
				aCaixa[P_SANG_VALE]			+=	nSe5Valor
				nOpDeb:= P_SANG_VALE
			ElseIf E5_MOEDA == "CO"
				aCaixa[P_SANG_CONVENIO]		+=	nSe5Valor
				nOpDeb:= P_SANG_CONVENIO
			ElseIf E5_MOEDA == "FI"
				aCaixa[P_SANG_FINANCIADO]	+=	nSe5Valor
				nOpDeb:= P_SANG_FINANCIADO
			ElseIf E5_MOEDA == "CD"
				aCaixa[P_SANG_DEBAUTO]		+=	nSe5Valor
				nOpDeb:= P_SANG_DEBAUTO
			ElseIf E5_MOEDA == "PD"
				aCaixa[P_SANG_PAGDIG]		+=	nSe5Valor	
				nOpDeb:= P_SANG_PAGDIG
			ElseIf E5_MOEDA == "PX"
				aCaixa[P_SANG_PAGPIX]		+=	nSe5Valor	
				nOpDeb:= P_SANG_PAGPIX	
			Else
				aCaixa[P_SANG_OUTROS]		+=	nSe5Valor
				nOpDeb:= P_SANG_OUTROS			
			EndIf

		ElseIf E5_TIPODOC $ "TR/TE"
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³O troco entrou como saldo inicial³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If E5_RECPAG == "R"	.AND.	E5_MOEDA <> "TC"
				aCaixa[P_TRANSF_DESTINO] += nSe5Valor
				nOpDeb := P_TRANSF_DESTINO
			Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Carrega o valor do Troco Final                                                              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Elseif (E5_TIPODOC == "VL" .AND. E5_MOEDA == "TC" .AND. E5_RECPAG == "P" .AND. lMV_LJTROCO )
			aCaixa[P_TROCO_SAIDA]	+=	nSe5Valor
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Valor do pagamento tipo PA geralmente usado para compensar a NCC 		³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Elseif AllTrim(E5_TIPO) == "PA" .AND. E5_TIPODOC == "PA" .AND. E5_RECPAG == "P" .AND.;
			   AllTrim(E5_MOTBX) == "NOR" .AND. Empty(E5_SITUACA)
			aCaixa[P_PAGAMENTOS] 	+= nSe5Valor
			 nOpDeb:= P_PAGAMENTOS
		EndIf 
		If nOpDeb <> 0
			aAdd(aArraySE5, {nOpDeb		, RTrim(E5_TIPO), E5_BANCO	,E5_DATA ,;
						E5_VALOR	, E5_BANCO		, E5_AGENCIA	,E5_CONTA,;
						E5_NATUREZ	, E5_MOEDA 		, E5_RECPAG})
		EndIf
		SE5TMP->(DbSkip())
	End

	SE5TMP->( dbCloseArea() )

#ELSE
	DbSelectArea( "SE5" )
	DbSetOrder( 1 )

	If lUsaParam
		DbSeek(cDeFilSE5 + DToS( MV_PAR01 ), .T. )			// Filial + Data
	Else
		DbSeek(xFilial() + DToS( dDataMovto ) + cCaixa )	// Filial + Data + Caixa
	EndIf

	While !EOF() .AND. ;
		E5_FILIAL >= cDeFilSE5	.AND.;
		E5_FILIAL <= cAteFilSE5	.AND.;
		IIf( lUsaParam, .T., DToS( E5_DATA ) + E5_BANCO == DToS( dDataMovto ) + cCaixa ) ; 
		.AND. LJVldMov(lUsaNMov, "SE5")
		If lUsaParam .AND. !(E5_DATA >= MV_PAR01 .AND.;
			 E5_DATA   <= MV_PAR02 .AND.;
			 E5_BANCO  >= MV_PAR03 .AND.;
			 E5_BANCO  <= MV_PAR04)
			dbSkip()
			Loop
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Estorno ou cancelado³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF E5_SITUACA == "C" .OR.  E5_MOEDA == "ES"
			dbSkip()
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se tem cancelamento para este titulo.³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ljChkKeyCanc(Alias())
			dbSkip()
			Loop
		EndIf  

		If AllTrim(E5_TIPO) $ (MV_CRNEG /*NCC*/+ "/PA") .OR.  E5_VENCTO > E5_DATA
			dbSkip()
			Loop
		Endif	

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Vendas a Vista, est  contido em L1_DINHEIRO³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If E5_TIPODOC == "LJ"
			dbSkip()
			Loop
		Endif

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Valores de Baixas³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		IF E5_TIPODOC $ "DC/JR/MT/CM/D2/J2/M2/C2/V2/CP/TL"
			dbSkip()
			Loop
		Endif
		
		//------------------------------------------------------------------------------------------------------
		// Se o lançamento for referente a uma venda estornada ou Dinheiro Devolvido, então ignora o lançamento
		//------------------------------------------------------------------------------------------------------
		If E5_TIPODOC $ "TR|DH" .and. !Empty(E5_NUMERO) .and. !Empty(E5_PREFIXO)
			aAreaSD1 := SD1->(GetArea())
			DbSelectArea("SD1")
			DbSetOrder(1)

			If SD1->(DbSeek(xFilial("SD1") + SE5->E5_NUMERO + SE5->E5_PREFIXO + SE5->E5_CLIFOR + SE5->E5_LOJA ))
				lE5_Estor := !Empty(SD1->D1_OPERADO)
				lDevDinhei:= AllTrim(SD1->D1_ORIGLAN) == "LO" //Origem LOJA
			Else
				lE5_Estor := .F.
				lDevDinhei:= .F.
			EndIf
			
			RestArea(aAreaSD1)

			DbSelectArea("SE5")
			
			If lE5_Estor .Or. lDevDinhei
				dbSkip()
				Loop 
			EndIf

		EndIf

		nSe5Valor := E5_VALOR

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Considerar Entrada de Troco estornada, pois o Financeiro³
		//³não marca o campo E5_SITUACA como estornado.            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		If (E5_TIPODOC == "TR" .OR. E5_TIPODOC == "TE") .AND. E5_MOEDA == "TC"	.AND.	E5_RECPAG == "R"	// => Saldo inicial
			aCaixa[P_TROCO]	+= nSe5Valor

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Pagamento -> Tipo de doc VL com moeda diferente de TC³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ElseIf ( E5_TIPODOC == "VL" .AND. E5_MOEDA <> "TC" );
				.OR. Empty( E5_TIPODOC );
				.OR. E5_TIPODOC == "BL";
				.OR. E5_TIPODOC == "DH";
				.OR. ( Alltrim(E5_TIPO) == "NCC" .AND. Alltrim(E5_MOEDA) == "CR" );
				.OR. (E5_TIPODOC $ MVRECANT .AND. AllTrim(E5_TIPO) $ MVRECANT);
				.OR. (E5_TIPODOC == "BA" .AND. E5_MOEDA <> "TC" .AND. E5_MOTBX == "LOJ" .AND. !IsMoney(E5_MOEDA));
				.OR. (AllTrim(E5_ORIGEM) == "LOJXREC" .AND. E5_TIPODOC == "ES" .AND. E5_MOTBX == "LOJ") //Estorno de Recebimento de Titulo

			If E5_RECPAG == "P"
				If AllTrim(E5_ORIGEM) == "LOJXREC" .And. E5_TIPODOC == "ES"
					aCaixa[P_ESTORNO_REC] += nSe5Valor
				Else
					aCaixa[P_PAGAMENTOS] += nSe5Valor
				EndIf

			ElseIf E5_RECPAG == "R" .AND. !( Alltrim( E5_TIPO )$"CH/R$/CC" )
				aCaixa[P_RECEBIMENTOS] 	+= nSe5Valor    

				If aScan(aAuxRecebs, {|x| x == E5_NUMERO + E5_PARCELA}) == 0
					AAdd(aAuxRecebs, E5_NUMERO + E5_PARCELA)				
					aContFina[9] += 1
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Distribui os recebimentos por forma de pagamento, para fazer o DDown na tela. ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If AllTrim( E5_MOEDA ) <> ""
					cForPagto := E5_MOEDA
					cPgtoAux  := AllTrim(Tabela("06", E5_MOEDA, .F.))
				Else
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Caso o pagamento tenha sido feito antes dessa melhoria e não tenha³
					//³forma de pagamento no SE5 sera incluido como "OUTROS"             ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cForPagto := "OU"
					cPgtoAux  := "OUTROS"
				Endif

				nPos := aScan(aDDown[8], {|x| x[3] == cForPagto})
				If nPos <> 0
					aDDown[8][nPos][2] += E5_VALOR
					aDDown[8][nPos][4] ++
				Else
					aAdd(aDDown[8], {nil, E5_VALOR, cForPagto, 1})
					nPos := len(aDDown[8])
				Endif
				aDDown[8][nPos][1] := "  " + cPgtoAux + Space( 31 - Len( cPgtoAux ) ) + Transform(aDDown[8][nPos][2], "@E 99,999,999.99") + Space(2) + AllTrim(Str(aDDown[8][nPos][4]))
			Endif                                                
		ElseIf E5_TIPODOC $ "SG/TR/TE" .AND. E5_RECPAG == "P"
			If E5_MOEDA == cSimb1
				aCaixa[P_SANG_DINHEIRO]		+=	nSe5Valor
			ElseIf E5_MOEDA $ "C1,C2,C3,C4,C5,CH"
				aCaixa[P_SANG_CHEQUE]		+=	nSe5Valor
			ElseIf E5_MOEDA == "CC"
				aCaixa[P_SANG_CARTAO]		+=	nSe5Valor			
			ElseIf E5_MOEDA == "VA"
				aCaixa[P_SANG_VALE]			+=	nSe5Valor
			ElseIf E5_MOEDA == "CO"
				aCaixa[P_SANG_CONVENIO]		+=	nSe5Valor
			ElseIf E5_MOEDA == "FI"
				aCaixa[P_SANG_FINANCIADO]	+=	nSe5Valor
			ElseIf E5_MOEDA == "CD"
				aCaixa[P_SANG_DEBAUTO]		+=	nSe5Valor
			ElseIf E5_MOEDA == "PD"
				aCaixa[P_SANG_PAGDIG]		+=	nSe5Valor
			ElseIf E5_MOEDA == "PX"
				aCaixa[P_SANG_PAGPIX]		+=	nSe5Valor	
			Else
				aCaixa[P_SANG_OUTROS]		+=	nSe5Valor
			EndIf

		ElseIf E5_TIPODOC $ "TR/TE"
			If E5_RECPAG == "R"	.AND. E5_MOEDA <> "TC"	// O troco entrou como saldo inicial
				aCaixa[P_TRANSF_DESTINO]	+=	nSe5Valor
			Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Carrega o valor do Troco de Saida                                                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Elseif (E5_TIPODOC == "VL" .AND. E5_MOEDA == "TC" .AND. E5_RECPAG == "P" .AND. lMV_LJTROCO )
			aCaixa[P_TROCO_SAIDA]	+=	nSe5Valor
		EndIf
		
		dbSkip()

	End
#ENDIF

DbSelectArea("SL2")
DbSetOrder(1)

#IFDEF TOP

	cQuery := "SELECT SL1.L1_FILIAL ,SL1.L1_NUM    , SL1.L1_MOEDA  , SL1.L1_CONDPG , SL1.L1_FORMPG ,"  // Acrescido o campo par ser utilizado na busca do SE4 Abaixo
	cQuery +=        "SL1.L1_TXMOEDA, SL1.L1_DINHEIR, SL1.L1_CHEQUES, SL1.L1_CARTAO ,"
	cQuery +=        "SL1.L1_VALES  , SL1.L1_CONVENI, SL1.L1_FINANC , SL1.L1_VLRDEBI," 
	cQuery +=        "SL1.L1_CREDITO, SL1.L1_OUTROS , SL1.L1_VLRLIQ , SL1.L1_VALISS ,"
	cQuery +=        "SL1.L1_ORCRES, SL1.L1_NUMORIG ,"	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÿ¿
	//³Caso Seja Cartão Fidelidade e Versão 11.5                   ³
	//³Adiciona o Campo SL1.L1_CartFid para que seja               ³
	//³contabilizada as informações de vendas com Cartão Fidelidade³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÿÙ
	If lLjcFid
		cQuery +=        "SL1.L1_CLIENTE, SL1.L1_LOJA	, SL1.L1_EMISNF , SL1.L1_CARTFID"
    Else
		cQuery +=        "SL1.L1_CLIENTE, SL1.L1_LOJA	, SL1.L1_EMISNF"
    EndIf

	If lL1ABTOPCC
		cQuery += ", L1_ABTOPCC"
	EndIf
	
	If lL1RECISS
		cQuery += ", L1_RECISS  "
	Endif

	If lRestauran
		cQuery += ", L1_ESTACIO, L1_SERVICO"
	EndIf

	If lL1VLRPGDG
		cQuery += ", L1_VLRPGDG, L1_VLRPGPX"
	EndIf

	cQuery += " FROM " + RetSQLName("SL1") + " SL1"

	If lUsaParam
		cQuery += " WHERE SL1.L1_FILIAL BETWEEN '" + cDeFilSL1 + "' AND '" + cAteFilSL1 + "'"
		cQuery += " AND SL1.L1_EMISNF BETWEEN '" + DToS(MV_PAR01) + "' AND '" + DToS(MV_PAR02) + "'"
		cQuery += " AND SL1.L1_OPERADO BETWEEN '" + MV_PAR03 + "' AND '" + MV_PAR04 + "'"
	Else
		cQuery += " WHERE SL1.L1_FILIAL = '" + xFilial("SL1") + "'"
		cQuery += " AND SL1.L1_EMISNF = '" + DToS(dDataMovto) + "'"
		cQuery += " AND SL1.L1_OPERADO = '" + cCaixa + "'"
	EndIf
	
	If lUsaNMov .AND. SL1->(FieldPos("L1_NUMMOV")) > 0 .AND. MV_PAR09 > "00"
		cQuery += " AND SL1.L1_NUMMOV = '" + MV_PAR09 + "'"
	Endif

	cQuery += " AND ((SL1.L1_TIPO = 'P' AND SL1.L1_DOCPED <> '') "
	cQuery += " OR  (SL1.L1_TIPO = 'V' AND SL1.L1_DOC = '' AND SL1.L1_DOCPED <> '' AND SL1.L1_SERPED <> '') " 
	cQuery += " OR  (SL1.L1_TIPO = 'V' AND SL1.L1_DOC <> '')) "
	cQuery += " AND SL1.L1_STORC <> 'C' "
	cQuery += " AND SL1.D_E_L_E_T_ = ' ' "
 	cQuery += " ORDER BY SL1.L1_FILIAL " // Acrescido o order by para ser utilizado na busca do SE4

	MemoWrite("LOJC030_SL1.SQL",cQuery)

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGenQry(,,cQuery), 'SL1TMP', .F., .T.)
	aLacAnalitico := {}               
	
	lTabExclusive := FWModeAccess("SL1")=="E"
	
	While !SL1TMP->(EOF())

        // Tamanho do campo Filial maior que 2, esta configurado para Gestao de Empresas
		If !lLjVerTudo 
			If nTamanhoFil > 2  .And. lTabExclusive
				// Verifica se o registro da tabela SL1 e da empresa corrrente    					
				If Alltrim(SL1TMP->L1_Filial) <> Alltrim(cEmpAtual)   // Empresa + Unidade Negocio + Filial
		           	DbSelectArea("SL1TMP") 
					SL1TMP->(DbSkip())                                                                        
					Loop
				Endif			
			Endif			
		Endif

		// Verifica se eh orcamento filho e nao inclui nos calculos
		If !Empty(SL1TMP->L1_ORCRES)
           	DbSelectArea("SL1TMP") 
			SL1TMP->(DbSkip())                                                                        
			Loop
		Endif					
		 
		DbSelectArea( "SL2" )
		DbSeek( xFilial("SL2") + SL1TMP->L1_NUM )
		
		DbSelectArea( "SL1TMP" )

		aAux := { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

		nDinheiro 	:= SL1TMP->L1_DINHEIR
		nVlrAbtPCC	:= Iif( lL1ABTOPCC, SL1TMP->L1_ABTOPCC, 0 )
		nVlrEstaci 	:= Iif( lRestauran, SL1TMP->L1_ESTACIO, 0 )
		nVlrServic 	:= Iif( lRestauran, SL1TMP->L1_SERVICO, 0 )
		nVlrCarFid 	:= Iif( lLjcFid	  , SL1TMP->L1_CARTFID, 0 )
		nVlrPagDig 	:= Iif( lL1VLRPGDG, SL1TMP->L1_VLRPGDG, 0 )
		nVlrPagPIX 	:= Iif( lL1VLRPGPX, SL1TMP->L1_VLRPGPX, 0 )

		// Verifica se esta usando a nova configuracao para confirmar se o cliente recolhera o iss.
		If lMvDescIss
			If lMvLJRECIS .AND. lL1RECISS
				lCliRecIss := SL1TMP->L1_RECISS == "1"
			Else
				lCliRecIss := Posicione("SA1",1,xFilial("SA1")+SL1TMP->L1_CLIENTE+SL1TMP->L1_LOJA,"SA1->A1_RECISS") == "1"
			EndIf
			If lCliRecIss
				nVlrISS  := SL1TMP->L1_VALISS
			Else
				nVlrISS  := 0
			EndIf
		EndIf

		nVImpostos	:= nVlrAbtPCC + nVlrISS

		If nVlrAbtPCC > 0
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Se o valor de pagamentos for zero (abatimento de PIS/COFINS/CSLL    ³
			//³no valor total da venda) é somado o valor do abatimento no dinheiro.³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If (nDinheiro + SL1TMP->(L1_CHEQUES + L1_CARTAO + L1_VALES + L1_CONVENI + L1_FINANC + L1_VLRDEBI + L1_CREDITO + L1_OUTROS) ) == 0
				nDinheiro += nVlrAbtPCC
			EndIf
		EndIf

		aAux[01] := nDinheiro			//01-Dinheiro
		aAux[02] := SL1TMP->L1_CHEQUES	//02-Cheque
		aAux[03] := SL1TMP->L1_CARTAO	//03-Cartão de Crédito
		aAux[04] := SL1TMP->L1_VALES  	//04-Vale
		aAux[05] := SL1TMP->L1_CONVENI	//05-Convênio
		aAux[06] := SL1TMP->L1_FINANC 	//06-Financiado
		aAux[07] := SL1TMP->L1_VLRDEBI	//07-Cartão de Débito
		aAux[08] := SL1TMP->L1_CREDITO	//08-Crédito (NCC)
		aAux[09] := SL1TMP->L1_OUTROS 	//09-Outros
		aAux[10] := nVImpostos			//10-Impostos
		aAux[11] := nVlrEstaci			//11-Estacionamento
		aAux[12] := nVlrServic			//12-Serviço
		aAux[13] := nVlrCarFid			//13-Cartão Fidelidade
		aAux[14] := nVlrPagDig 			//14-Pagamento Digital
		aAux[15] := nVlrPagPIX 			//14-Pagamento PIX

		If lLJ030TES
			aRet := ExecBlock("LJ030TES", .F., .F., {aAux, 1})
			If ValType(aRet) == "A"
				While Len(aRet) < 14
					aAdd( aRet, 0 )
				End
				aAux := aRet
			EndIf
		EndIf
			
		aCaixa[P_VEND_DINHEIRO]		+= aAux[01]
		aCaixa[P_VEND_CHEQUE]		+= aAux[02]
		aCaixa[P_VEND_CARTAO]		+= aAux[03]
		aCaixa[P_VEND_VALE]			+= aAux[04]
		aCaixa[P_VEND_CONVENIO]		+= aAux[05]
		aCaixa[P_VEND_FINANCIADO]	+= aAux[06]
		aCaixa[P_VEND_DEBAUTO]		+= aAux[07]
		aCaixa[P_VEND_CREDITO]		+= aAux[08]
		aCaixa[P_VEND_OUTROS]		+= aAux[09]
		aCaixa[P_SANG_IMPOSTOS]		+= aAux[10]
		aCaixa[P_VEND_ESTACIO]		+= aAux[11]
		aCaixa[P_VEND_SERVICO]		+= aAux[12]
		aCaixa[P_VEND_CARTFID]		+= aAux[13]
		aCaixa[P_VEND_PAGDIG]		+= aAux[14]
		aCaixa[P_VEND_PAGPIX]		+= aAux[15]

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se lSomaCred igual a .F. deve adicionar na variavel nVlrCred para que   ³
		//³ seja subtraida do totalizador de credito, uma vez que nao soma o credito³
		//³ de venda no totalizador 												³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
		If !lSomaCred
           nVlrCred                 += aAux[8]
		Endif
		
		lNivel := .F.
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Soh busca a administradora para as formas que podem ter administradora relacionada.³
		//³L1_CARTAO, L1_VALES, L1_CONVENI, L1_FINANC, L1_VLRDEBI                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
		If	aAux[3]<>0 .OR.  aAux[4]<>0 .OR.  aAux[5]<>0 .OR.  aAux[6]<>0 .OR.  aAux[7]<>0 .OR.  ;
			aAux[2]<>0 .OR.  aAux[9]<>0 .OR.  aAux[1]<>0 .OR. aAux[13]<>0 .OR. aAux[14]<>0 // Foi adicionada mais esta linha em função da inclusao de contadores
			
			lNivel 		:= .T.
			nBkValCred	:= aAux[8] 						//Guarda o Valor do credito utilizado na venda caso houver
			
			DbSelectArea("SL4")
			DbSetOrder(1)

			SL4->( DbSeek(  SL1TMP->L1_FILIAL + SL1TMP->L1_NUM ) )  // Busca pela filial do select e não por xfilial corrente

			aAux := {{},{},{},{},{},{},{},{},{},{},{},{}}

			While SL4->( ! EoF() .AND. L4_NUM == SL1TMP->L1_NUM .AND. L4_FILIAL == SL1TMP->L1_FILIAL ) .AND. Empty(SL4->L4_ORIGEM)  

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atribui a numeracao de acordo com a forma registrada no SL4³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		    	Do Case			    
					Case RTrim( SL4->L4_FORMA ) == "CC"		// Cartao de credito: 1a. opcao do array aDDown/aValForma
						nForma := 1
        				aContFina[1] += 1               	// Acumulando contador de cartão de crédito
						aAdd(aLacAnalitico,{P_VEND_CARTAO,; 		// Tipo da Venda Conforme Define
											RTrim( SL4->L4_FORMA ),;// Forma 
											SL4->L4_NUM,; 			// Numero do Orcmento
											SL4->L4_DATA,;			// Data do orcamento
											SL4->L4_VALOR,;			// Valor do orcamento
											SL4->L4_ADMINIS,;		// Administradora
											SL4->L4_AGENCIA,;		// Agencia
											SL4->L4_CONTA,;			// Conta 
											SL4->L4_FORMPG})		// Forma de Pagamento
					Case RTrim( SL4->L4_FORMA ) == "VA"		// Vales: 2a. opcao do array aDDown/aValForma
						nForma := 2	  
						aContFina[2] += 1					// Acumulando contador de vales                
						aAdd(aLacAnalitico, {P_VEND_VALE,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CO"		// Convenio: 3a. opcao do array aDDown/aValForma
						nForma := 3					
						aContFina[3] += 1 			   	// Acumulando contador de convenios
						aAdd(aLacAnalitico, {P_VEND_CONVENIO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "FI"		// Financiado: 4a. opcao do array aDDown/aValForma
						nForma := 4	  
						aContFina[4] += 1 								
						aAdd(aLacAnalitico, {P_VEND_FINANCIADO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CD"		// Cartao de Debito: 5a. array opcao do aDDown/aValForma
						nForma := 5	  
						aContFina[5] += 1               	// Acumulando contador de cartão de debito
						aAdd(aLacAnalitico, {P_VEND_DEBAUTO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CH"		// Cheque
						nForma := 0	
						aContFina[6] += 1 				// Acumulando contador de cheques
						aAdd(aLacAnalitico, {P_VEND_CHEQUE,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CR"		// Credito
						nForma := 0	
						aAdd(aLacAnalitico, {P_VEND_CREDITO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "R$"		// Dinheiro
						nForma := 0							
						aAdd(aLacAnalitico, {P_VEND_DINHEIRO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Cartão Fidelidade Versão 11.5 e L4_Forma = FID            ³
					//³Realiza a Adição de operações com Cartão Fidelidade no    ³
					//³Array aLacAnalitico para manipulação e exibição posterior.³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					Case lLjcFid .AND. RTrim( SL4->L4_FORMA ) == "FID"		// Fidelidade
						nForma := 0							
						aContFina[10] += 1 				// Acumulando contador Cartao fidelidade
						aAdd(aLacAnalitico, {P_VEND_CARTFID,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "PD"		// Pagamento Digital: 11a. opcao do array aDDown/aValForma
						nForma := 11
        				aContFina[11] += 1               	// Acumulando contador de Pagamento Digital
						aAdd(aLacAnalitico,{P_VEND_PAGDIG,; 		// Tipo da Venda Conforme Define
											RTrim( SL4->L4_FORMA ),;// Forma 
											SL4->L4_NUM,; 			// Numero do Orcmento
											SL4->L4_DATA,;			// Data do orcamento
											SL4->L4_VALOR,;			// Valor do orcamento
											SL4->L4_ADMINIS,;		// Administradora
											SL4->L4_AGENCIA,;		// Agencia
											SL4->L4_CONTA,;			// Conta 
											SL4->L4_FORMPG})		// Forma de Pagamento
					Case RTrim( SL4->L4_FORMA ) == "PX"		// Pagamento PIX: 11a. opcao do array aDDown/aValForma
						nForma := 12
        				aContFina[12] += 1               	// Acumulando contador de Pagamento PIX
						aAdd(aLacAnalitico,{P_VEND_PAGPIX,; 		// Tipo da Venda Conforme Define
											RTrim( SL4->L4_FORMA ),;// Forma 
											SL4->L4_NUM,; 			// Numero do Orcmento
											SL4->L4_DATA,;			// Data do orcamento
											SL4->L4_VALOR,;			// Valor do orcamento
											SL4->L4_ADMINIS,;		// Administradora
											SL4->L4_AGENCIA,;		// Agencia
											SL4->L4_CONTA,;			// Conta 
											SL4->L4_FORMPG})		// Forma de Pagamento	
					OtherWise       						// Nao eh nenhuma das foram de pagamento que tem administradora
						nForma := 0	
						aContFina[7] += 1					// Acumulando contador de outras condições
						aAdd(aLacAnalitico, {P_VEND_OUTROS,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
				EndCase            

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Se pertence a alguma forma de pagamento relacionada a administradora³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If nForma <> 0
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Seleciona o codigo da administradora³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cCodAdm  := Left( SL4->L4_ADMINIS, 3 )

					SAE->( DbSetOrder( 1 ) )
					If SAE->( DbSeek( xFilial( "SAE" ) + cCodAdm ) )

				    	cAdmCart := RTrim( Left( SAE->AE_DESC, 30 ) )
	
						nPos := aScan( aAux[ nForma ], { |x| x[1] == cCodAdm } )
					
						If nPos <> 0
							aAux[nForma,nPos,3] += SL4->L4_VALOR
							aAux[nForma,nPos,4] += 1
						Else
							AAdd( aAux[ nForma ], { cCodAdm, cAdmCart, SL4->L4_VALOR, 1 } )
						EndIf			                      
					EndIf
	            EndIf

		        SL4->( dbSkip() )

			End 
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se existe alguma Venda paga parte dela com uma³
			//³NCC , pois nao existe nenhum registro de NCC no SL4    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nBkValCred <> 0
				aContFina[8] += 1
				AAdd( aAux[7], { "001",  STR0067 , nBkValCred, 1 } ) //"Venda"
				aAdd(aLacAnalitico,{P_VEND_CREDITO			,SL1TMP->L1_FORMPG	,SL1TMP->L1_NUM	, SL1TMP->L1_EMISNF	,;
									nBkValCred		,""					,""				,""					,;
								   	SL1TMP->L1_FORMPG })
			Endif
		
			If lLJ030TES
				aRet := ExecBlock("LJ030TES", .F., .F., {aAux, 2})
				If ValType(aRet) == "A"
					aAux := aRet
				EndIf
			EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se existe vendas com NCC ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ElseIf aAux[8] <> 0
			aAux 	:= {{},{},{},{},{},{},{}}
			lNivel 	:= .T.
			aContFina[8] += 1
			AAdd( aAux[7], { "001",  STR0067 , SL1TMP->L1_CREDITO, 1 } ) //"Venda"
			aAdd(aLacAnalitico, {P_VEND_CREDITO				,RTrim( SL1TMP->L1_FORMPG)	,SL1TMP->L1_NUM ,SL1TMP->L1_EMISNF 	,;
								 SL1TMP->L1_CREDITO	,""							,""				,""					,;
								 SL1TMP->L1_FORMPG})

		Endif
		  
		If lNivel
			IncAvalForma(@aAux, @aValForma)
		EndIf

		DbSelectArea( "SL1TMP" )
		dbSkip()

	End

	SL1TMP->( dbCloseArea() )
#ELSE
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Valida se foi criado o indice pela data limite³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SIX->( DbSetOrder( 1 ) )
	If SIX->( DbSeek( "SL1A" ) )
		If Upper(Alltrim( SIX->CHAVE )) == "L1_FILIAL+L1_OPERADO+DTOS(L1_EMISNF)"
			nIndice	:= 10           
		Else
			nIndice := 5
		Endif
	Endif

	DbSelectArea( "SL1" )
	DbSetOrder( nIndice )
	If lUsaParam
		DbSeek( cDeFilSL1, .T.)	// Filial
	Else
		DbSeek( xFilial() + cCaixa + DToS( dDataMovto ) )	// Filial + Caixa + Data
	EndIf
	While !EOF() .AND. ;
		L1_FILIAL  >= cDeFilSL1 .AND.;
		L1_FILIAL  <= cAteFilSL1 .AND.;
		IIf(lUsaParam, .T., If(nIndice == 10,DToS(L1_EMISNF)+L1_OPERADO == DToS(dDataMovto)+cCaixa,DToS(L1_EMISSAO)+L1_OPERADO == DToS(dDataMovto)+cCaixa)) ;
		.AND. LJVldMov(lUsaNMov, "SL1")
		If lUsaParam .AND. !(L1_OPERADO >= MV_PAR03 .AND.;
			 L1_OPERADO <= MV_PAR04 .AND.;
			 If(nIndice == 10, L1_EMISNF >= MV_PAR01, L1_EMISSAO >= MV_PAR01) .AND.;
			 If(nIndice == 10, L1_EMISNF <= MV_PAR02, L1_EMISSAO <= MV_PAR02))
			dbSkip()
			Loop
		EndIf

		If Empty(L1_TIPO) .OR.  (L1_TIPO == "P" .AND. Empty(L1_DOCPED)) .OR. ( L1_TIPO=="V" .AND. IIF( Empty(L1_DOC),Empty(L1_DOCPED) .AND. Empty(L1_SERPED),Empty(L1_DOC) )   ) .OR. L1_STORC == "C" 
			dbSkip()
			Loop
		EndIf

		DbSelectArea( "SL2" )
		DbSeek( xFilial("SL2") + SL1->L1_NUM )
		DbSelectArea( "SL1" )

		aAux := { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

		nDinheiro 	:= SL1->L1_DINHEIR
		nVlrAbtPCC	:= Iif( lL1ABTOPCC, SL1->L1_ABTOPCC, 0 )
		nVlrEstaci 	:= Iif( lRestauran, SL1->L1_ESTACIO, 0 )
		nVlrServic 	:= Iif( lRestauran, SL1->L1_SERVICO, 0 )
		nVlrCarFid 	:= Iif( lLjcFid	  , SL1->L1_CARTFID, 0 )
		nVlrPagDig 	:= Iif( lL1VLRPGDG, SL1->L1_VLRPGDG, 0 )
		nVlrPagPIX 	:= Iif( lL1VLRPGPX, SL1->L1_VLRPGPX, 0 )

		// Verifica se esta usando a nova configuracao para confirmar se o cliente recolhera o iss.
		If lMvDescIss
			If lMvLJRECIS .AND. lL1RECISS 
				lCliRecIss := SL1->L1_RECISS == "1" 					
			Else
				lCliRecIss := Posicione("SA1",1,xFilial("SA1")+SL1->L1_CLIENTE+SL1->L1_LOJA,"SA1->A1_RECISS") == "1"  					
			EndIf
			If lCliRecIss
				nVlrISS  := SL1->L1_VALISS
			Else
				nVlrISS  := 0
			EndIf
		EndIf

		nVImpostos	:= nVlrAbtPCC + nVlrISS

		If nVlrAbtPCC > 0
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Se o valor de pagamentos for zero (abatimento de PIS/COFINS/CSLL    ³
			//³no valor total da venda) é somado o valor do abatimento no dinheiro.³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If (nDinheiro + SL1->(L1_CHEQUES + L1_CARTAO + L1_VALES + L1_CONVENI + L1_FINANC + L1_VLRDEBI + L1_CREDITO + L1_OUTROS) ) == 0
				nDinheiro += nVlrAbtPCC
			EndIf
		EndIf

		aAux[01] := nDinheiro			//01-Dinheiro
		aAux[02] := SL1TMP->L1_CHEQUES	//02-Cheque
		aAux[03] := SL1TMP->L1_CARTAO	//03-Cartão de Crédito
		aAux[04] := SL1TMP->L1_VALES  	//04-Vale
		aAux[05] := SL1TMP->L1_CONVENI	//05-Convênio
		aAux[06] := SL1TMP->L1_FINANC 	//06-Financiado
		aAux[07] := SL1TMP->L1_VLRDEBI	//07-Cartão de Débito
		aAux[08] := SL1TMP->L1_CREDITO	//08-Crédito (NCC)
		aAux[09] := SL1TMP->L1_OUTROS 	//09-Outros
		aAux[10] := nVImpostos			//10-Impostos
		aAux[11] := nVlrEstaci			//11-Estacionamento
		aAux[12] := nVlrServic			//12-Serviço
		aAux[13] := nVlrCarFid			//13-Cartão Fidelidade
		aAux[14] := nVlrPagDig 			//14-Pagamento Digital		
		aAux[15] := nVlrPagPIX 			//15-Pagamento PIX

		If lLJ030TES
			aRet := ExecBlock("LJ030TES", .F., .F., {aAux, 1})
			If ValType(aRet) == "A"
				While Len(aRet) < 14
					aAdd( aRet, 0 )
				End
				aAux := aRet
			EndIf
		EndIf
			
		aCaixa[P_VEND_DINHEIRO]		+= aAux[01]
		aCaixa[P_VEND_CHEQUE]		+= aAux[02]
		aCaixa[P_VEND_CARTAO]		+= aAux[03]
		aCaixa[P_VEND_VALE]			+= aAux[04]
		aCaixa[P_VEND_CONVENIO]		+= aAux[05]
		aCaixa[P_VEND_FINANCIADO]	+= aAux[06]
		aCaixa[P_VEND_DEBAUTO]		+= aAux[07]
		aCaixa[P_VEND_CREDITO]		+= aAux[08]
		aCaixa[P_VEND_OUTROS]		+= aAux[09]
		aCaixa[P_SANG_IMPOSTOS]		+= aAux[10]
		aCaixa[P_VEND_ESTACIO]		+= aAux[11]
		aCaixa[P_VEND_SERVICO]		+= aAux[12]
		aCaixa[P_VEND_CARTFID]		+= aAux[13]
		aCaixa[P_VEND_PAGDIG]		+= aAux[14]
		aCaixa[P_VEND_PAGPIX]		+= aAux[15]

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se lSomaCred igual a .F. deve adicionar na variavel nVlrCred para que   ³
		//³ seja subtraida do totalizador de credito, uma vez que nao soma o credito³
		//³ de venda no totalizador 												³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ				
		If !lSomaCred
           nVlrCred               += aAux[8]
		Endif
		
		lNivel := .F.
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Soh busca a administradora para as formas que podem ter administradora relacionada.³
		//³L1_CARTAO, L1_VALES, L1_CONVENI, L1_FINANC, L1_VLRDEBI                             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If	aAux[3] <> 0 .OR.  aAux[4] <> 0	.OR.  aAux[5] <> 0	.OR. aAux[6] <> 0 .OR. ; 
			aAux[7] <> 0 .OR.  aAux[2] <> 0 .OR.  aAux[9] <> 0  .OR. aAux[1] <> 0 .OR. aAux[13]<>0 .OR. aAux[14]<>0 // Foi adicionada mais esta linha em função da inclusao de contadores

			lNivel 	:= .T.
			nBkValCred	:= aAux[8] 						//Guarda o Valor do credito utilizado na venda caso houver
			
			DbSelectArea( "SL4" )
			DbSetOrder( 1 )
			SL4->( DbSeek( xFilial("SL4") + SL1->L1_NUM ) )

			aAux := {{},{},{},{},{},{},{},{},{},{},{},{}}

			While SL4->( ! EoF() .AND. L4_NUM == SL1->L1_NUM ) .AND. Empty( SL4->L4_ORIGEM )

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atribui a numeracao de acordo com a forma registrada no SL4³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		    	Do Case			    
					Case RTrim( SL4->L4_FORMA ) == "CC"		// Cartao de credito: 1a. opcao do array aDDown/aValForma
						nForma := 1
        				aContFina[1] += 1               	// Acumulando contador de cartão de crédito
						aAdd(aLacAnalitico,{P_VEND_CARTAO,; 		// Tipo da Venda Conforme Define
											RTrim( SL4->L4_FORMA ),;// Forma 
											SL4->L4_NUM,; 			// Numero do Orcmento
											SL4->L4_DATA,;			// Data do orcamento
											SL4->L4_VALOR,;			// Valor do orcamento
											SL4->L4_ADMINIS,;		// Administradora
											SL4->L4_AGENCIA,;		// Agencia
											SL4->L4_CONTA,;			// Conta 
											SL4->L4_FORMPG})		// Forma de Pagamento
					Case RTrim( SL4->L4_FORMA ) == "VA"		// Vales: 2a. opcao do array aDDown/aValForma
						nForma := 2	  
						aContFina[2] += 1					// Acumulando contador de vales                
						aAdd(aLacAnalitico, {P_VEND_VALE,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CO"		// Convenio: 3a. opcao do array aDDown/aValForma
						nForma := 3					
						aContFina[3] += 1 			   	// Acumulando contador de convenios
						aAdd(aLacAnalitico, {P_VEND_CONVENIO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "FI"		// Financiado: 4a. opcao do array aDDown/aValForma
						nForma := 4	  
						aContFina[4] += 1 								
						aAdd(aLacAnalitico, {P_VEND_FINANCIADO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CD"		// Cartao de Debito: 5a. array opcao do aDDown/aValForma
						nForma := 5	  
						aContFina[5] += 1               	// Acumulando contador de cartão de debito
						aAdd(aLacAnalitico, {P_VEND_DEBAUTO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CH"		// Cheque
						nForma := 0	
						aContFina[6] += 1 				// Acumulando contador de cheques
						aAdd(aLacAnalitico, {P_VEND_CHEQUE,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "CR"		// Credito
						nForma := 0	
						aAdd(aLacAnalitico, {P_VEND_CREDITO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "R$"		// Dinheiro
						nForma := 0							
						aAdd(aLacAnalitico, {P_VEND_DINHEIRO,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Cartão Fidelidade Versão 11.5 e L4_Forma = FID            ³
					//³Realiza a Adição de operações com Cartão Fidelidade no    ³
					//³Array aLacAnalitico para manipulação e exibição posterior.³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					Case lLjcFid .AND. RTrim( SL4->L4_FORMA ) == "FID"		// Cartao Fidelidade
						nForma := 0							
						aContFina[10] += 1 				 
						aAdd(aLacAnalitico, {P_VEND_CARTFID,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
					Case RTrim( SL4->L4_FORMA ) == "PD"		// Pagamento Digital: 11a. opcao do array aDDown/aValForma
						nForma := 11
        				aContFina[11] += 1               	// Acumulando contador de Pagamento Digital
						aAdd(aLacAnalitico,{P_VEND_PAGDIG,; 		// Tipo da Venda Conforme Define
											RTrim( SL4->L4_FORMA ),;// Forma 
											SL4->L4_NUM,; 			// Numero do Orcmento
											SL4->L4_DATA,;			// Data do orcamento
											SL4->L4_VALOR,;			// Valor do orcamento
											SL4->L4_ADMINIS,;		// Administradora
											SL4->L4_AGENCIA,;		// Agencia
											SL4->L4_CONTA,;			// Conta 
											SL4->L4_FORMPG})		// Forma de Pagamento
					Case RTrim( SL4->L4_FORMA ) == "PX"		// Pagamento PIX: 12a. opcao do array aDDown/aValForma
						nForma := 12
        				aContFina[12] += 1               	// Acumulando contador de Pagamento Digital
						aAdd(aLacAnalitico,{P_VEND_PAGPIX,; 		// Tipo da Venda Conforme Define
											RTrim( SL4->L4_FORMA ),;// Forma 
											SL4->L4_NUM,; 			// Numero do Orcmento
											SL4->L4_DATA,;			// Data do orcamento
											SL4->L4_VALOR,;			// Valor do orcamento
											SL4->L4_ADMINIS,;		// Administradora
											SL4->L4_AGENCIA,;		// Agencia
											SL4->L4_CONTA,;			// Conta 
											SL4->L4_FORMPG})		// Forma de Pagamento
					OtherWise       						// Nao eh nenhuma das foram de pagamento que tem administradora
						nForma := 0	
						aContFina[7] += 1					// Acumulando contador de outras condições
						aAdd(aLacAnalitico, {P_VEND_OUTROS,RTrim( SL4->L4_FORMA ),SL4->L4_NUM    ,SL4->L4_DATA ,;
											 SL4->L4_VALOR,SL4->L4_ADMINIS       ,SL4->L4_AGENCIA,SL4->L4_CONTA,;
											 SL4->L4_FORMPG})
				EndCase            
			
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Se pertence a alguma forma de pagamento relacionada a administradora³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If nForma <> 0

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Seleciona o codigo da administradora³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					cCodAdm  := Left( SL4->L4_ADMINIS, 3 )
				
					SAE->( DbSetOrder( 1 ) )
					If SAE->( DbSeek( xFilial( "SAE" ) + cCodAdm ) )
				
			    		cAdmCart := RTrim( Left( SAE->AE_DESC, 30 ) )
		        
						nPos := aScan( aAux[ nForma ], { |x| x[1] == cCodAdm } )
				
						If nPos <> 0
							aAux[nForma,nPos,3] += SL4->L4_VALOR
							aAux[nForma,nPos,4] += 1
						Else
							AAdd( aAux[ nForma ], { cCodAdm, cAdmCart, SL4->L4_VALOR, 1 } )
						EndIf
					EndIf	
	            EndIf

		        SL4->( dbSkip() )

			End
    		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se existe alguma Venda paga parte dela com uma³
			//³NCC , pois nao existe nenhum registro de NCC no SL4    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nBkValCred <> 0
				aContFina[8] += 1
				AAdd( aAux[7], { "001",  STR0067 , nBkValCred, 1 } ) //"Venda"
				aAdd(aLacAnalitico,{P_VEND_CREDITO			,SL1->L1_FORMPG	,SL1->L1_NUM, SL1->L1_EMISNF	,;
									nBkValCred		,""				,""			,""					,;
								   	SL1->L1_FORMPG })
			Endif
	
			If lLJ030TES
				aRet := ExecBlock("LJ030TES", .F., .F., {aAux, 2})
				If ValType(aRet) == "A"
					aAux := aRet
				EndIf
			EndIf
        //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se existe vendas com NCC ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		ElseIf aAux[8] <> 0
			aAux 	:= {{},{},{},{},{},{},{}}
			lNivel 	:= .T.
			aContFina[8] += 1
			AAdd( aAux[7], { "001",  STR0067 , SL1->L1_CREDITO, 1 } ) //"Venda"
			aAdd(aLacAnalitico, {P_VEND_CREDITO				,RTrim( SL1->L1_FORMPG)	,SL1->L1_NUM,SL1->L1_EMISNF 	,;
								 SL1->L1_CREDITO	,""						,""			,""					,;
								 SL1->L1_FORMPG})
		Endif
		
		If lNivel
			IncAvalForma(@aAux, @aValForma)
		EndIf

		DbSelectArea( "SL1" )
		dbSkip()

	End
#ENDIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Tratamento das notas de credito (NCC)³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
#IFDEF TOP

	cQuery := "SELECT E1_TIPO, SUM( CASE WHEN SUBSTRING(SE1.E1_HIST,1,18) = 'RECARGA DE CELULAR' THEN SE1.E1_VLRREAL ELSE SE1.E1_SALDO END ) SUM_SALDO,"
	cQuery += " Count(*) QTDE"
	cQuery += " FROM " + RetSQLName("SE1") + " SE1"

	If lUsaParam
		cQuery += " WHERE SE1.E1_FILIAL BETWEEN '"	+ cDeFilSE1 		+ "' AND '" + cAteFilSE1 		+ "'"
		cQuery += " AND SE1.E1_EMISSAO BETWEEN '"	+ DToS(MV_PAR01) 	+ "' AND '" + DToS(MV_PAR02) 	+ "'"
		cQuery += " AND SE1.E1_PORTADO BETWEEN '"	+ MV_PAR03 			+ "' AND '" + MV_PAR04 			+ "'"

		If lUsaNMov .AND. SE1->(FieldPos("E1_NUMMOV")) > 0 .AND. MV_PAR09 > "00"
			cQuery += " AND SE1.E1_NUMMOV = '" + MV_PAR09 + "'"
		Endif
	Else
		cQuery += " WHERE SE1.E1_FILIAL = '"	+ xFilial("SE1")	+ "'"
		cQuery += " AND SE1.E1_EMISSAO = '" 	+ DToS(dDataMovto)	+ "'"
		cQuery += " AND SE1.E1_PORTADO = '" 	+ cCaixa 			+ "'"
	EndIf
 
	cQuery += " AND SE1.E1_SALDO > 0"
	cQuery += " AND (SE1.E1_TIPO = '" + MV_CRNEG + "' OR SUBSTRING(SE1.E1_HIST,1,18) = 'RECARGA DE CELULAR') "
	cQuery += " AND SE1.D_E_L_E_T_ = ' '"
	cQuery += " GROUP BY SE1.E1_TIPO,SE1.E1_HIST"

	MemoWrite("LOJC030_SE1.SQL",cQuery)
	
	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGenQry(,,cQuery), 'SE1TMP', .F., .T.)

	aAux := {{},{},{},{},{},{},{}}

	While !SE1TMP->( EOF() )

		If SE1TMP->SUM_SALDO > 0
			IF Alltrim(SE1TMP->E1_TIPO) == MV_CRNEG
				aCaixa[P_VEND_CREDITO] 	+= SE1TMP->SUM_SALDO

				If !lSomaCred
					nVlrCred             += SE1TMP->SUM_SALDO
				Endif				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Adiciona o saldo das NCCs na visualizacao dos Creditos de Vendas³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
				aContFina[8] += SE1TMP->QTDE
				AAdd( aAux[7], { "002",  STR0068 , SE1TMP->SUM_SALDO, SE1TMP->QTDE} ) //"NCC"
				IncAvalForma(@aAux, @aValForma)

			ElseIf Alltrim(SE1TMP->E1_TIPO) == "CC"
				aCaixa[P_VEND_CARTAO]	+= SE1TMP->SUM_SALDO
				aContFina[1] += SE1TMP->QTDE

			ElseIf Alltrim(SE1TMP->E1_TIPO) == "CD"
				aCaixa[P_VEND_DEBAUTO]	+= SE1TMP->SUM_SALDO
				aContFina[5] += SE1TMP->QTDE

			EndIf	
		EndIf

		SE1TMP->(dbSkip())

	End

	SE1TMP->( dbCloseArea() )
#ELSE
	DbSelectArea( "SE1" )
	DbSetOrder( 6 )

	If lUsaParam
		DbSeek(cDeFilSE1, .T. )	// Filial
	Else
		DbSeek(xFilial() + Dtos(dDataMovto))	// Filial + Data
	EndIf

	While !EOF() .AND. ;
		E1_FILIAL  >= cDeFilSE1 .AND.;
		E1_FILIAL  <= cAteFilSE1 .AND.;
		IIf(lUsaParam, .T., E1_EMISSAO == dDataMovto) ; 
		.AND. LJVldMov(lUsaNMov, "SE1")
	
		If lUsaParam .AND. !(E1_EMISSAO >= MV_PAR01 .AND.;
			 E1_EMISSAO <= MV_PAR02)
			dbSkip()
			Loop
		EndIf

		If lUsaParam
			If (SE1->E1_PORTADOR >= MV_PAR03	.AND.;
				SE1->E1_PORTADOR <= MV_PAR04	.AND.;
				SE1->E1_SALDO > 0 .AND. E1_TIPO == MV_CRNEG )
				
				aCaixa[P_VEND_CREDITO] += SE1->E1_SALDO
				If !lSomaCred
		           nVlrCred            += SE1->E1_SALDO
				Endif								
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Adiciona o saldo das NCCs na visualizacao dos Creditos de Vendas³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ				
				aAux := {{},{},{},{},{},{},{}}
				aContFina[8] += 1
				AAdd( aAux[7], { "002",  STR0068 , E1_SALDO, 1 } ) //"NCC"
				IncAvalForma(@aAux, @aValForma)			
			EndIf
		Else
			If SE1->E1_PORTADOR == cCaixa .AND. SE1->E1_SALDO > 0 .AND. E1_TIPO == MV_CRNEG
				aCaixa[P_VEND_CREDITO] += SE1->E1_SALDO
				If !lSomaCred
		           nVlrCred            += SE1->E1_SALDO
				Endif												
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Adiciona o saldo das NCCs na visualizacao dos Creditos de Vendas³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
				aAux := {{},{},{},{},{},{},{}}
				aContFina[8] += 1
				AAdd( aAux[7], { "002",  STR0068 , E1_SALDO, 1 } ) //"NCC"
				IncAvalForma(@aAux, @aValForma)
			EndIf
		EndIf
		dbSkip()
	End
#ENDIF    

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Monta array de subitens para o ListBox de vendas a partir do array ³
//³de valores por administradora e forma de pagamento.                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nJ := 1 to Len( aValForma ) 

	If nJ > Len(aDDown)
		AAdd(aDDown,{})
	EndIf 
	
	For nI := 1 to Len( aValForma[ nJ ] )
		AAdd( aDDown[ nJ ], { "  " + ;
		                      aValForma[ nJ, nI, 2 ] + Eval( bTab, aValForma[ nJ, nI, 2 ] ) + ;
		                      Transform( aValForma[ nJ, nI, 3 ], "@E 99,999,999.99" ) + ;
		                      " " + ;
		                      Str(aValForma[ nJ, nI, 4 ] ,7) ,;
		                      aValForma[ nJ, nI, 3 ] } )
	Next nI
Next nJ

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada LJ030DEV                                                    ³
//³Parametros:  Nenhum                                                          ³
//³Retorno:  Array contendo as linhas que deverao ser mostradas no drilldown    ³
//³do itens devolucoes.                                                         ³
//³                                                                             ³
//³Exemplo:  aDev := {{"   DINHEIRO                 1.000,00 ",1000},;          ³
//³                   {"   CHEQUE                     300,00 ", 300}}           ³
//³                                                                             ³
//³Observacoes:  Utilizado para retornar as formas de pagamento e valores       ³
//³das devolucoes, para que sejam impressos no Resumo de Caixa.                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lLj030Dev
	aDev := ExecBlock ("LJ030DEV",.F.,.F.)
	If ValType(aDev) == "A"
		nJ := 1
		For nJ := 1 to Len (aDev)
			AAdd(aDDown[ 6 ] , aClone(aDev[ nJ ]))
		Next nJ
		aCaixa[P_DEVOLUCAO] := 0
		aEval( aDev, {|x| aCaixa[P_DEVOLUCAO] += x[2] } )
	Endif
EndIf
   
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada LJ030EST  *** ESTORNO*****                                                    ³
//³Parametros:  Nenhum                                                          ³
//³Retorno:  Array contendo as linhas que deverao ser mostradas no drilldown    ³
//³do itens devolucoes.                                                         ³
//³                                                                             ³
//³Exemplo:  aEstorno := {{"   DINHEIRO                 1.000,00 ",1000},;      ³
//³                   {"   CHEQUE                     300,00 ", 300}}           ³
//³                                                                             ³
//³Observacoes:  Utilizado para retornar as formas de pagamento e valores       ³
//³das devolucoes, para que sejam impressos no Resumo de Caixa.                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

   				aEstorno := LJ030EST(lUsaParam, dDataMovto, cCaixa)
	
				If ValType(aEstorno) == "A" .and. Len(aDDown) > 8
					nJ := 1
					For nJ := 1 to Len (aEstorno)
						AAdd(aDDown[ 9 ] , aClone(aEstorno[ nJ ]))
					Next nJ
					aCaixa[P_ESTORNO] := 0
					aCaixa[P_QTD_ESTORNO] := 0 
					aEval( aEstorno, {|x| aCaixa[P_ESTORNO] += x[2] } )
					aEval( aEstorno, {|x| aCaixa[P_QTD_ESTORNO] += x[3] } )
				Endif   
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Le o SD1 para determinar as devolucoes somente se não existir o ponto de entrada      ³
//³LJ030DEV. Se existir,o valor da devolucao sera a soma dos valores retornados pelo P.E.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lLj030Dev
#IFDEF TOP
	cQuery := "SELECT (SD1.D1_TOTAL + SD1.D1_VALIPI  - SD1.D1_VALDESC) DEVOLUCAO, "   
	cQuery += " (SELECT SUM(SD1_2.D1_ICMSRET)
	cQuery += "  FROM " + RetSQLName("SD1") + " SD1_2 "
	cQuery += "  LEFT JOIN " + RetSQLName("SF4") +" SF4 ON SF4.F4_CODIGO = SD1_2.D1_TES "
	  
	cQuery += " WHERE 	SD1_2.D1_FILIAL = SD1.D1_FILIAL AND "   
	cQuery += " 		SD1_2.D1_DOC 	= SD1.D1_DOC 	AND "   
	cQuery += " 		SD1_2.D1_SERIE 	= SD1.D1_SERIE 	AND "   
	cQuery += " 		SD1_2.D1_ITEM 	= SD1.D1_ITEM 	AND "
	cQuery += "   		SF4.F4_INCSOL = 'S'  			AND "
	cQuery += "   		SD1_2.D1_TIPO = 'D') AS ICMRET  "
	
	cQuery += " FROM " + RetSQLName("SD1") + " SD1"
	If lUsaParam
		cQuery += " WHERE SD1.D1_FILIAL BETWEEN '" + cDeFilSD1 + "' AND '" + cAteFilSD1 + "'"
		cQuery += " AND SD1.D1_EMISSAO BETWEEN '" + DToS(MV_PAR01) + "' AND '" + DToS(MV_PAR02) + "'"
		If ! (AllTrim(Upper(TCGetDB())) $ "ORACLE_INFORMIX")
			cQuery += "  AND SUBSTRING(SD1.D1_NUMCQ,1,3) BETWEEN '" + MV_PAR03 + "' AND '" + MV_PAR04 + "'"
		Else
			cQuery += "  AND SUBSTR(SD1.D1_NUMCQ,1,3) BETWEEN '" + MV_PAR03 + "' AND '" + MV_PAR04 + "'"
		EndIf
	Else
		cQuery += " WHERE SD1.D1_FILIAL = '" + xFilial("SD1") + "'"
		cQuery += " AND SD1.D1_EMISSAO = '" + DToS(dDataMovto) + "'"
		If ! (AllTrim(Upper(TCGetDB())) $ "ORACLE_INFORMIX")
			cQuery += "  AND SUBSTRING(SD1.D1_NUMCQ,1,3) = '" + cCaixa + "'"
		Else
			cQuery += "  AND SUBSTR(SD1.D1_NUMCQ,1,3) = '" + cCaixa + "'"
		EndIf
	EndIf
	cQuery += " AND SD1.D1_TIPO = 'D'"
	cQuery += " AND SD1.D1_ORIGLAN = 'LO'"
	cQuery += " AND SD1.D_E_L_E_T_ = ' '"
    
	//Alteração para não trazer vendas estornadas, pois já estao discriminadas logo abaixo na linha Estorno
    cQuery += " AND SD1.D1_OPERADO = ' '"

	MemoWrite("LOJC030_SD1.SQL",cQuery)

	cQuery := ChangeQuery(cQuery)
	dbUseArea( .T., "TOPCONN", TCGenQry(,,cQuery), 'SD1TMP', .F., .T.)

    While !SD1TMP->( Eof() )
		aCaixa[P_DEVOLUCAO] += DEVOLUCAO  + ICMRET
		SD1TMP->( dbSkip() )
	End	
	
	SD1TMP->( dbCloseArea() )
#ELSE
	DbSelectArea( "SD1" )
	DbSetOrder( 3 )

	If lUsaParam
		DbSeek(cDeFilSD1, .T. )	// Filial
	Else
		DbSeek(xFilial()+DToS(dDataMovto))
	EndIf

	While SD1->(!EOF()) .AND. ;
		D1_FILIAL  >= cDeFilSD1		.AND.;
		D1_FILIAL  <= cAteFilSD1	.AND.;
		If(lUsaParam, .T., D1_EMISSAO == dDataMovto)
	
		If	lUsaParam .AND. !(D1_EMISSAO >= MV_PAR01 .AND.;
			D1_EMISSAO <= MV_PAR02)
			SD1->(dbSkip())
			Loop
		EndIf

		If SD1->D1_TIPO == "D" .AND. SD1->D1_ORIGLAN == "LO"
			If If(lUsaParam, Left(SD1->D1_NUMCQ,3) >= MV_PAR03 .AND. Left(SD1->D1_NUMCQ,3) <= MV_PAR04,;
							Substr(SD1->D1_NUMCQ,1,3) == cCaixa)
							
				aArea := GetArea()
				dbSelectArea("SF4") 
				dbSetOrder(1)			
				nICMSRET := 0 
				If SF4->(MsSeek(xFilial("SF4")+SD1->D1_TES))
					If SF4->F4_INCSOL == "S"
						nICMSRET :=  SD1->D1_ICMSRET 
					EndIf	
				EndIf	
                RestArea(aArea)
                
				aCaixa[P_DEVOLUCAO] += (SD1->D1_TOTAL + SD1->D1_VALIPI + nICMSRET - SD1->D1_VALDESC)

			EndIf
			SD1->(dbSkip())
			Loop
		EndIf

		DbSelectArea( "SD1" )
		SD1->(dbSkip())

		While !Empty( cNumero ) .AND. cNumero == SD1->D1_SERIORI + SD1->D1_NFORI
			SD1->(dbSkip())
		End
	End
#ENDIF
Endif

//Se sangria utilizando apenas dinheiro estiver habilitada, adiciona os valores para o array de sangria
//Tratamento necessario para evitar divergencia no Resumo de Caixa pois nao 
If lSangDin
	#IFDEF TOP			
		cQuery := "SELECT SUM(LT_VLRDIG) VALOR, LT_FORMPG"  
		cQuery += " FROM " + RetSQLName("SLT")
		
		If lUsaParam
			cQuery += " WHERE LT_FILIAL BETWEEN '" + cDeFilSLT + "' AND '" + cAtFilSLT + "'"
			cQuery += " AND LT_DTMOV BETWEEN '" + DToS(MV_PAR01) + "' AND '" + DToS(MV_PAR02) + "'"
			cQuery += " AND LT_OPERADO BETWEEN '" + MV_PAR03 + "' AND '" + MV_PAR04 + "'"
			
			If lUsaNMov .AND. MV_PAR09 > "00" //Filtro de numero movimento
				cQuery += " AND LT_NUMMOV = '" + MV_PAR09 + "'"
			EndIf
		Else
			cQuery += " WHERE LT_FILIAL = '" + cDeFilSLT + "'"
			cQuery += " AND LT_DTMOV = '" + DToS(dDataMovto) + "'"
			cQuery += " AND LT_OPERADO = '" + cCaixa + "'"
		EndIf
		
		cQuery += " AND D_E_L_E_T_ = ''"
		cQuery += " GROUP BY LT_FORMPG"
		
		cQuery := ChangeQuery(cQuery)
		dbUseArea( .T., "TOPCONN", TCGenQry(,,cQuery), "SLTTMP", .F., .T.)
		
		//Alimenta array de sangrias diferentes de dinheiro
		While SLTTMP->(!EOF())
			If SLTTMP->VALOR > 0						
				Do Case
					Case RTrim(SLTTMP->LT_FORMPG) == "CH"
						aCaixa[P_SANG_CHEQUE] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "CC"
						aCaixa[P_SANG_CARTAO] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "VA"
						aCaixa[P_SANG_VALE] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "CO"
						aCaixa[P_SANG_CONVENIO] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "FI"
						aCaixa[P_SANG_FINANCIADO] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "CD"
						aCaixa[P_SANG_DEBAUTO] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "PD"
						aCaixa[P_SANG_PAGDIG] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "PX"
						aCaixa[P_SANG_PAGPIX] += SLTTMP->VALOR
					Case RTrim(SLTTMP->LT_FORMPG) == "OU"
						aCaixa[P_SANG_OUTROS] += SLTTMP->VALOR
				EndCase
			EndIf
			
			SLTTMP->(dbSkip())
		EndDo
		
		SLTTMP->( dbCloseArea() )
	#ELSE		
		SLT->(dbSetOrder(1)) //LT_FILIAL+LT_OPERADO+DTOS(LT_DTFECHA)+LT_FORMPG

		If lUsaParam
			If !Empty(cDeFilSLT) //Se filial diferente de vazia posiciona nos registros da filial			
				SLT->(dbSeek(cDeFilSLT + Padr(MV_PAR03, TamSx3("LT_OPERADO")[1]) + DToS(MV_PAR01)))
			Else
				SLT->(dbSeek(cDeFilSLT, .T.))				    
			EndIf
		Else
			SLT->(dbSeek(cDeFilSLT + Padr(cCaixa, TamSx3("LT_OPERADO")[1]) + DToS(dDataMovto)))			
		EndIf
		
		
		While SLT->(!EOF()) .And. ;
			SLT->LT_FILIAL >= cDeFilSLT .And. ;
			SLT->LT_FILIAL <= cAtFilSLT .And. ;	
			IIf(lUsaParam, .T., SLT->LT_OPERADO == cCaixa) .And. ;								
			IIf(lUsaParam, .T., SLT->LT_DTFECHA == dDataMovto)
			
			If lUsaParam
				lContinua := .F.
							
				If SLT->LT_OPERADO >= Padr(MV_PAR03, TamSx3("LT_OPERADO")[1]) .And. ; 
				   SLT->LT_OPERADO <= Padr(MV_PAR04, TamSx3("LT_OPERADO")[1]) .And. ;												
				   SLT->LT_DTFECHA >= MV_PAR01 .And. SLT->LT_DTFECHA <= MV_PAR02 
											
					If	lUsaNMov .And. MV_PAR09 > "00" //Filtro de numero movimento				
						If SLT->LT_NUMMOV == AllTrim(MV_PAR09)
							lContinua := .T.
						EndIf
					Else
						lContinua := .T.	
					EndIf										
				EndIf
			Else
				lContinua := .T.
			EndIf
			
			//Alimenta array de sangrias diferentes de dinheiro
			If lContinua .And. SLT->LT_VLRDIG > 0						
				Do Case
					Case RTrim(SLT->LT_FORMPG) == "CH"
						aCaixa[P_SANG_CHEQUE] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "CC"
						aCaixa[P_SANG_CARTAO] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "VA"
						aCaixa[P_SANG_VALE] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "CO"
						aCaixa[P_SANG_CONVENIO] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "FI"
						aCaixa[P_SANG_FINANCIADO] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "CD"
						aCaixa[P_SANG_DEBAUTO] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "PD"
						aCaixa[P_SANG_PAGDIG] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "PX"
						aCaixa[P_SANG_PAGPIX] += SLT->LT_VLRDIG
					Case RTrim(SLT->LT_FORMPG) == "OU"
						aCaixa[P_SANG_OUTROS] += SLT->LT_VLRDIG
				EndCase
			EndIf
			
			SLT->(dbSkip())
		EndDo	
	#ENDIF	
EndIf

DbSelectArea( cAlias )

Return aCaixa
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Funcao	  ³LJ030Refresh³ Autor ³ Vendas Clientes     ³ Data ³ 28/01/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descrio ³Executa refresh nos listbox								   ³±±	
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros ³ ExpN1 = Define qual elemento do ListBox recebeu o DbClick  ³±±
±±³           ³ ExpO2 = Objeto que ira exibir o troco de saida             ³±±
±±³           ³ ExpN3 = Somatoria dos trocos de saida                      ³±±
±±³		      ³ ExpC4 = Determina se utiliza troco p/ diferentes formas    ³±±
±±³           ³ ExpA5 = Array com os valores do caixa                      ³±±
±±³           ³ ExpN6 = Valor da entrada de troco                          ³±±
±±³           ³ ExpN7 = Valor total de credito                             ³±±
±±³           ³ ExpN8 = Valor total de debito                              ³±±
±±³           ³ ExpN9 = Saldo final do caixa                               ³±±
±±³           ³ ExpN10 = Valor referente ao estacionamento (restaurante)   ³±±
±±³           ³ ExpN11 = Valor referente a gorjeta (restaurante)           ³±±
±±³           ³ ExpO12 = Objeto com movimento da venda                     ³±±
±±³           ³ ExpO13 = Objeto com movimento da sangria      			   ³±±
±±³           ³ ExpA14 = Array com os dados das vendas                     ³±±
±±³           ³ ExpA15 = Array com os sinais realizados                    ³±±
±±³           ³ ExpA16 = Array com o segundo nivel das opcoes              ³±±
±±³           ³ ExpA17 = Array utilizado nos tipos de finalizadores  	   ³±±
±±³           ³ ExpA18 = Array com os dados da sangria      			   ³±±
±±³           ³ ExpN19 = Valor do credito utilizado na compensacao do NCC  ³±±
±±³           ³ ExpL20 = Verifica se considera o credito da venda no tota- ³±±
±±³           ³          lizador de credito   						       ³±±
±±³           ³ ExpL21 = Verifica se foi criado MV_PAR09                   ³±±	
±±³           ³ ExpL22 = Array com os laçamentos analiticos                ³±±	
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		  ³SIGALOJA                                                    ³±±  
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/                       
Function LJ030Refresh(	nOpc		, oTrocoSaida	, nTrocoSaida	, lMV_LJTROCO	,;
					 	aCaixa		, nTroco 		, nTotCredito	, nTotDebito	,;
					 	nSaldFinal 	, nEstac 		, nGorjeta 		, oMovVen		,;
					 	oMovSan		, aDadosVen		, aSinal		, aDDown		,;
					 	aContFina	, aDadosSan     , nVlrCred      , lSomaCred     ,;
					 	lUsaNMov    , aLacAnalitico, aArrayPagto)
Local cCaixa 	 := "   "                                           //Numero do caixa
Local dDataMovto := dDataBase										//Data do sistema
Local dDeData    := dDataBase                                       //De Data (MV_PAR01)
Local dAteData   := dDataBase                                       //Ate Data (MV_PAR02)
Local lLj7C030rc := ExistBlock("LJ7C030RC")                         //Verifica se existe o ponto de entrada LJ7C030RC

DEFAULT aLacAnalitico := {}

//Limpa Variavel que esta vindo como Referencia para evitar duplicacao
aLacAnalitico := {} 

// Caso os parâmetros de filiais estejam em branco atribui a filial corrente
If Empty(MV_PAR05) .AND. Empty(MV_PAR06)
	MV_PAR05 := cFilAnt
	MV_PAR06 := cFilAnt
EndIf

#IFDEF TOP
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Se a data, caixa e filial forem a mesma, faz uma pesquisa mais rapida. ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (MV_PAR01 == MV_PAR02) .AND. (MV_PAR03 == MV_PAR04) .AND. (MV_PAR05 == MV_PAR06)
		cCaixa     := MV_PAR03
		dDataMovto := MV_PAR01
	EndIf
#ENDIF

If !lSomaCred 	   //Limpa a variavel de NCC, pois toda vez que dava Refresh (botao detalhes)
	nVlrCred := 0  //Somente acontecia isso se coloca NAO no parametro que considera NCCs
Endif
aCaixa := MovimCaixa( cCaixa	 , dDataMovto	, lMV_LJTROCO	, @aDDown ,;
					  @aContFina , @nVlrCred    , lSomaCred    , lUsaNmov ,;
					  @aLacAnalitico )
					  
dDeData    := MV_PAR01
dAteData   := MV_PAR02
                        
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada que permite verificacoes apos a confirmacao dos parametros do resumo de caixa ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lLj7C030rc 
	ExecBlock("LJ7C030RC", .F., .F., { aCaixa ,dDeData ,dAteData })
EndIf

// Alimenta Totalizadores / Arrays aDados...
Lj030Dados(	aCaixa	, nOpc			, Nil			, @nTrocoSaida	,;
		    @nTroco	, @nTotCredito	, @nTotDebito	, @nSaldFinal	,;
		    @nEstac	, @nGorjeta		, @aDadosVen	, @aSinal		,;
		    @aDDown	, @aContFina	, @aDadosSan	, nVlrCred		  )

If Len(aArrayPagto) == 0
	aArrayPagto := aDadosVen
Endif
	
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Seta Vetores de Dados de Credito / Debito para ListBox     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oMovVen:SetArray(aDadosVen)
oMovVen:bLine := {|| {	aDadosVen[oMovVen:nAt][1] } }
oMovVen:Refresh()
oMovSan:SetArray(aDadosSan)
oMovSan:bLine := {|| {	aDadosSan[oMovSan:nAt][1] } }
oMovSan:Refresh()

oTotCre:Refresh()
oTotDeb:Refresh()
oSaldFinal:Refresh()
oTroco:Refresh()    
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Caso o parametro MV_LJTROCO esteja como TRUE, atualiza o objeto oTrocoSaida³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lMV_LJTROCO
	oTrocoSaida:Refresh()    
Endif

If SuperGetMV( "MV_LJREST", , .F. )
	oEstac:Refresh()
	oGorjeta:Refresh()
Endif

Return(NIL)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Funo	  ³ LJ030DDown ³ Autor ³ Vendas Clientes     ³ Data ³ 23/01/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descrio ³ Aumenta ou Diminui o nivel de detalhes nas formas de pagto ³±±	
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros ³ ExpN1 = Define qual elemento do ListBox recebeu o DbClick  ³±±
±±³           ³ ExpN2 = Define qual ListBox recebeu o DbClick              ³±±
±±³           ³ ExpN3 = Somatoria dos trocos de saida                      ³±±
±±³           ³ ExpN4 = Valor da entrada de troco                          ³±±
±±³           ³ ExpN5 = Valor total de credito                             ³±±
±±³           ³ ExpN6 = Valor total de debito                              ³±±
±±³           ³ ExpN7 = Saldo final do caixa                               ³±±
±±³           ³ ExpN8 = Valor referente ao estacionamento (restaurante)    ³±±
±±³           ³ ExpN9 = Valor referente a gorjeta (restaurante)            ³±±
±±³           ³ ExpO10 = Objeto com movimento da venda                     ³±±
±±³           ³ ExpO11 = Objeto com movimento da sangria      			   ³±±
±±³           ³ ExpA12 = Array com os dados das vendas                     ³±±
±±³           ³ ExpA13 = Array com os sinais realizados                    ³±±
±±³           ³ ExpA14 = Array com o segundo nivel das opcoes              ³±±
±±³           ³ ExpA15 = Array utilizado nos tipos de finalizadores  	   ³±±
±±³           ³ ExpN16 = Array com os valores do caixa                     ³±±
±±³           ³ ExpA17 = Array com os dados da sangria      			   ³±±
±±³           ³ ExpN18 = Valor do credito utilizado na compensacao do NCC  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		  ³SIGALOJA                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function LJ030DDown( nOpc		, nDados		, nTrocoSaida 	, nTroco	,;
					 nTotCredito, nTotDebito	, nSaldFinal 	, nEstac	,;
					 nGorjeta	, oMovVen		, oMovSan		, aDadosVen	,;
					 aSinal		, aDDown		, aContFina		, aCaixa	,;
					 aDadosSan	, nVlrCred      )
					  
// Alimenta Totalizadores / Arrays aDados...
Lj030Dados(	@aCaixa		, nOpc			, nDados		, @nTrocoSaida	,;
			@nTroco		, @nTotCredito	, @nTotDebito	, @nSaldFinal	,;
			@nEstac		, @nGorjeta		, @aDadosVen	, @aSinal		,;
			@aDDown		, @aContFina	, @aDadosSan	, nVlrCred      )


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Seta Vetores de Dados de Credito / Debito para ListBox     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
oMovVen:SetArray(aDadosVen)
oMovVen:bLine := {|| { aDadosVen[oMovVen:nAt][1] }}
oMovVen:Refresh()
oMovSan:SetArray(aDadosSan)
oMovSan:bLine := {|| { aDadosSan[oMovSan:nAt][1] }}
oMovSan:Refresh()

Return(NIL)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³ Funcao	  ³LJ030Dados³ Autor ³ Vendas Clientes       ³ Data ³ 28/01/03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Descricao ³Funo que alimenta totalizadores por referncia e          ³±±
±±³           ³vetores de Dados aDadosVen e aDadosSan a partir de 		   ³±±
±±³           ³aCaixa recebido como parmetro.							   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros ³ ExpN1 = Array com os valores do caixa                      ³±±
±±³           ³ ExpN2 = Define qual elemento do ListBox recebeu o DbClick  ³±±
±±³           ³ ExpN3 = Define qual ListBox recebeu o DbClick              ³±±
±±³           ³ ExpN4 = Somatoria dos trocos de saida                      ³±±
±±³           ³ ExpN5 = Valor da entrada de troco                          ³±±
±±³           ³ ExpN6 = Valor total de credito                             ³±±
±±³           ³ ExpN7 = Valor total de debito                              ³±±
±±³           ³ ExpN8 = Saldo final do caixa                               ³±±
±±³           ³ ExpN9 = Valor referente ao estacionamento (restaurante)    ³±±
±±³           ³ ExpN10 = Valor referente a gorjeta (restaurante)           ³±±
±±³           ³ ExpA11 = Array com os dados das vendas                     ³±±
±±³           ³ ExpA12 = Array com os sinais realizados                    ³±±
±±³           ³ ExpA13 = Array com o segundo nivel das opcoes              ³±±
±±³           ³ ExpA14 = Array utilizado nos tipos de finalizadores  	   ³±±
±±³           ³ ExpA15 = Array com os dados da sangria      			   ³±±
±±³           ³ ExpN16 = Valor do credito utilizado na compensacao do NCC  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		  ³SIGALOJA                                                    ³±± 
±±ÀÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Lj030Dados(aCaixa		, nOpcao		, nDados		, nTrocoSaida 	,;
					nTroco		, nTotCredito	, nTotDebito	, nSaldFinal	,;
					nEstac 		, nGorjeta		, aDadosVen		, aSinal		,;
					aDDown		, aContFina		, aDadosSan     , nVlrCred      )

Local aCaixaStr := {}     					                    //Array auxiliar de aCaixa com o s valores da venda
Local nI        := 0 											//variavel de LOOP
Local bTab                                                      //Bloco para definir espacos
Local cOpcao    := ""                                           //Opcao que foi selecionada com DblClick no ListBox
Local cOpcaoVen := ""	                                        //Opcao que foi selecionada com DblClick no ListBox

nTrocoSaida := aCaixa[P_TROCO_SAIDA]
                  
bTab      := { |x| Space( 25 - Len(x) ) }
nTroco    := aCaixa[P_TROCO]			// Saldo Inicial
nEstac	  := aCaixa[P_VEND_ESTACIO]
nGorjeta  := aCaixa[P_VEND_SERVICO]

If nOpcao == NIL
	nOpcao    := 0
EndIf

If nOpcao <> 0                     
	If nDados = 1 
		cOpcao := aDadosVen[ nOpcao, 1 ]
	Else
		cOpcaoVen := aDadosSan[ nOpcao, 1 ]        
	EndIf
Else
	cOpcao := ""
	cOpcaoVen := ""	
EndIf	


aDadosSan := {} 
aDadosVen := {}       

// Cria vetor com os valores em string para formar a unica coluna
For nI := 1 to Len( aCaixa )
	AAdd( aCaixaStr, Transform( aCaixa[ nI ], "@E 99,999,999.99" ) )
Next nI

aadd(aDadosSan,{ "  " + STR0007 + Eval(bTab, STR0007) + aCaixaStr[P_SANG_DINHEIRO  ], aCaixa[P_SANG_DINHEIRO  ]}) //"Dinheiro"
aadd(aDadosSan,{ "  " + STR0008 + Eval(bTab, STR0008) + aCaixaStr[P_SANG_CHEQUE    ], aCaixa[P_SANG_CHEQUE    ]}) //"Cheques"
aadd(aDadosSan,{ "  " + STR0009 + Eval(bTab, STR0009) + aCaixaStr[P_SANG_CARTAO    ], aCaixa[P_SANG_CARTAO    ]}) //"Cartöes de Crédito"
aadd(aDadosSan,{ "  " + STR0015 + Eval(bTab, STR0015) + aCaixaStr[P_SANG_VALE      ], aCaixa[P_SANG_VALE      ]}) //"Vales/Despesas"
aadd(aDadosSan,{ "  " + STR0010 + Eval(bTab, STR0010) + aCaixaStr[P_SANG_CONVENIO  ], aCaixa[P_SANG_CONVENIO  ]}) //"Convênios"
aadd(aDadosSan,{ "  " + STR0012 + Eval(bTab, STR0012) + aCaixaStr[P_SANG_FINANCIADO], aCaixa[P_SANG_FINANCIADO]}) //"Financiado"
aadd(aDadosSan,{ "  " + STR0041 + Eval(bTab, STR0041) + aCaixaStr[P_SANG_DEBAUTO   ], aCaixa[P_SANG_DEBAUTO   ]}) //"Cartöes de Débito"
aadd(aDadosSan,{ "  " + STR0013 + Eval(bTab, STR0013) + aCaixaStr[P_SANG_OUTROS    ], aCaixa[P_SANG_OUTROS    ]}) //"Outros"
aadd(aDadosSan,{ "  " + STR0042 + Eval(bTab, STR0042) + aCaixaStr[P_PAGAMENTOS     ], aCaixa[P_PAGAMENTOS     ]}) //"Pagamentos"
aadd(aDadosSan,{ "  " + STR0043 + Eval(bTab, STR0043) + aCaixaStr[P_TRANSF_ORIGEM  ], aCaixa[P_TRANSF_ORIGEM  ]}) //"Transferências"	

If ExistBlock("LJ030DEV")  
	TrataNivel( @aDadosSan				, STR0016				, cOpcaoVen	, 6			,; //"Devoluçöes"
				aCaixaStr[P_DEVOLUCAO]	, aCaixa[P_DEVOLUCAO]	, 0 		, @aSinal	,;
				@aDDown )
Else
	aadd(aDadosSan,{ "  " + STR0016 + aCaixaStr[P_DEVOLUCAO      ], aCaixa[P_DEVOLUCAO      ]}) //"Devoluçöes"
EndIf
//////////  TRATA NIVEL ESTORNO      ////////////////////////////////////////////////////////////                                                                        
TrataNivel( @aDadosSan				, STR0075			, cOpcaoVen				, 9			,; //"Estorno"
			aCaixaStr[P_ESTORNO]	, aCaixa[P_ESTORNO]	, aCaixa[P_QTD_ESTORNO]	, @aSinal	,;
			@aDDown )                     

If SL1->(FieldPos("L1_ABTOPCC")) > 0
	AAdd( aDadosSan,{"  " + STR0062 + Eval(bTab, STR0062) + aCaixaStr[P_SANG_IMPOSTOS], aCaixa[P_SANG_IMPOSTOS]})	//"Retenção de Impostos"		
EndIf

AAdd( aDadosSan,{"  " + STR0079 + Eval(bTab, STR0079) + aCaixaStr[P_ESTORNO_REC], aCaixa[P_ESTORNO_REC]})	//"Recebimentos Estornados"

If SL1->(ColumnPos("L1_VLRPGDG")) > 0 //Verifica se existe o campo onde é gravado o valor da venda paga em Pagamento Digital
	AAdd( aDadosSan,{"  " + STR0080 + Eval(bTab, STR0080) + aCaixaStr[P_SANG_PAGDIG], aCaixa[P_SANG_PAGDIG]}) //"Pagamento Digital"
EndIf

If SL1->(ColumnPos("L1_VLRPGPX")) > 0 //Verifica se existe o campo onde é gravado o valor da venda paga em Pagamento PIX
	AAdd( aDadosSan,{"  " + STR0081 + Eval(bTab, STR0081) + aCaixaStr[P_SANG_PAGPIX], aCaixa[P_SANG_PAGPIX]}) //"Pagamento PIX"
EndIf

nTotDebito := 	aCaixa[P_SANG_DINHEIRO ] + aCaixa[P_SANG_CHEQUE     ] + ;
				aCaixa[P_SANG_CARTAO   ] + aCaixa[P_SANG_VALE       ] + ;
				aCaixa[P_SANG_CONVENIO ] + aCaixa[P_SANG_FINANCIADO ] + ;
				aCaixa[P_SANG_DEBAUTO  ] + aCaixa[P_PAGAMENTOS      ] + ;
				aCaixa[P_TRANSF_ORIGEM ] + aCaixa[P_DEVOLUCAO       ] + ;
				aCaixa[P_SANG_OUTROS   ] + aCaixa[P_SANG_IMPOSTOS   ] + ;
				aCaixa[P_ESTORNO	   ] + aCaixa[P_ESTORNO_REC		] + ;
				aCaixa[P_SANG_PAGDIG   ] + aCaixa[P_SANG_PAGPIX		]

aadd(aDadosVen,{ "  " + STR0007 + Eval( bTab, STR0007 ) + aCaixaStr[P_VEND_DINHEIRO ] + " " + Space(05) 	   		, aCaixa[P_VEND_DINHEIRO] }) //"Dinheiro"
aadd(aDadosVen,{ "  " + STR0008 + Eval( bTab, STR0008 ) + aCaixaStr[P_VEND_CHEQUE   ] + " " + Str(aContFina[6],4)	, aCaixa[P_VEND_CHEQUE]   }) //"Cheques"	

TrataNivel(	 @aDadosVen					, STR0009				, cOpcao		, 1		 ,; //"Cartöes de Crédito"
			 aCaixaStr[P_VEND_CARTAO]	, aCaixa[P_VEND_CARTAO]	, aContFina[1]	, @aSinal,;                               
			 @aDDown )

TrataNivel( @aDadosVen					, STR0011				, cOpcao		, 2		 ,; //"Vales/Receitas"
			 aCaixaStr[P_VEND_VALE]		, aCaixa[P_VEND_VALE]  	, aContFina[2]	, @aSinal,;
			 @aDDown )
			 
TrataNivel( @aDadosVen					, STR0010				 	, cOpcao		, 3		 ,; //"Convênios"
			aCaixaStr[P_VEND_CONVENIO]	, aCaixa[P_VEND_CONVENIO]	, aContFina[3]	, @aSinal,;
			@aDDown ) 

TrataNivel( @aDadosVen					, STR0012					, cOpcao		, 4		 ,; //"Financiado"
			aCaixaStr[P_VEND_FINANCIADO], aCaixa[P_VEND_FINANCIADO]	, aContFina[4]	, @aSinal,;
			@aDDown )

TrataNivel( @aDadosVen					, STR0041				, cOpcao		, 5		 ,; //"Cartöes de Débito"
			aCaixaStr[P_VEND_DEBAUTO]	, aCaixa[P_VEND_DEBAUTO], aContFina[5]	, @aSinal,;
			@aDDown )
                                                                               
aadd(aDadosVen,{ "  " + STR0013 + Eval( bTab, STR0013 ) + aCaixaStr[P_VEND_OUTROS   ] + " " + Str(aContFina[7],4)	, aCaixa[P_VEND_OUTROS]   }) //"Outros"	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Adicionado a visualizacao  total de creditos aos clientes gerados pelas devolucoes e tambem pelas vendas ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
TrataNivel( @aDadosVen					, STR0045					, cOpcao		, 7		 ,; //"Crédito de Venda"
			aCaixaStr[P_VEND_CREDITO]	, aCaixa[P_VEND_CREDITO]	, aContFina[8]	, @aSinal,;
			@aDDown)

aadd(aDadosVen,{ "  " + STR0043 + Eval( bTab, STR0043 ) + aCaixaStr[P_TRANSF_DESTINO] + " " + Space(05)	, aCaixa[P_TRANSF_DESTINO]}) //"Transferências"	
                                                                      
TrataNivel( @aDadosVen					, STR0044					, cOpcao		, 8		,; //"Recebimentos"
			aCaixaStr[P_RECEBIMENTOS]	, aCaixa[P_RECEBIMENTOS]	, aContFina[9]	, @aSinal,;
			@aDDown	)


If SL1->(FieldPos("L1_ABTOPCC")) > 0
	aadd( aDadosVen,{"  " + STR0062 + Eval(bTab, STR0062) + aCaixaStr[P_SANG_IMPOSTOS ] + " " + Space(05) 	   		, aCaixa[P_SANG_IMPOSTOS] }) //"Retenção de Impostos"
EndIf


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Caso Seja Versão 11.5 e Cartão Fidelidade Ativo.      ³
//³Incluido campo que exibe as Vendas também relacionadas³
//³com Cartão Fidelidade na Tela.                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lLjcFid
	TrataNivel( @aDadosVen					, STR0076				, cOpcao		, 10	,; //"Cartao Fidelidade"
				aCaixaStr[P_VEND_CARTFID]	, aCaixa[P_VEND_CARTFID], aContFina[10]	, @aSinal,;        
				@aDDown )
EndIf

If SL1->(ColumnPos("L1_VLRPGDG")) > 0 //Verifica se existe o campo onde é gravado o valor da venda paga em Pagamento Digital
	TrataNivel( @aDadosVen					, STR0080	, cOpcao		, 11	,; //"Pagamento Digital"
				aCaixaStr[P_VEND_PAGDIG]	, aCaixa[P_VEND_PAGDIG] , aContFina[11]	, @aSinal,;        
				@aDDown )
EndIf

If SL1->(ColumnPos("L1_VLRPGPX")) > 0 //Verifica se existe o campo onde é gravado o valor da venda paga em Pagamento PIX
	TrataNivel( @aDadosVen					, STR0081	, cOpcao		, 12	,; //"Pagamento PIX"
				aCaixaStr[P_VEND_PAGPIX]	, aCaixa[P_VEND_PAGPIX] , aContFina[12]	, @aSinal,;        
				@aDDown )
EndIf

nTotCredito :=	aCaixa[P_VEND_DINHEIRO ] + aCaixa[P_VEND_CHEQUE     ] + ;
				aCaixa[P_VEND_CARTAO   	] + aCaixa[P_VEND_VALE      ] + ;
				aCaixa[P_VEND_CONVENIO 	] + aCaixa[P_VEND_FINANCIADO] + ;
				aCaixa[P_VEND_DEBAUTO  	] + aCaixa[P_VEND_CREDITO   ] + ;
				aCaixa[P_VEND_OUTROS   	] + aCaixa[P_TRANSF_DESTINO ] + ;
				aCaixa[P_RECEBIMENTOS  	] + aCaixa[P_VEND_CARTFID   ] + ; 
				aCaixa[P_VEND_PAGDIG	] + aCaixa[P_VEND_PAGPIX	] - ;
				nVlrCred                  + aCaixa[P_SANG_IMPOSTOS  ]

nSaldFinal := nTroco + nTotCredito - nTotDebito - nTrocoSaida

Return(NIL)

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³TrataNivel³ Autor ³ Vendas Clientes       ³ Data ³ 26/06/01 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para tratar opcoes disponiveis para Drill-Down      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ TrataNivel(ExpC0, ExpC1,ExpC2,ExpN3,ExpC4)                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = Array que irá receber valores                      ³±±
±±³          ³ ExpC2 = String a ser exibida no ListBox                    ³±±
±±³          ³ ExpC3 = Opcao selecionada com clique duplo                 ³±±
±±³          ³ ExpN4 = Opcao do drill down a ser tratada                  ³±±
±±³          ³ ExpC5 = String com o Valor atualizado da linha do listbox  ³±±
±±³          ³ ExpN6 = Valor atualizado da linha do listbox 			  ³±±
±±³          ³ ExpN7 = Opcao do drill down a ser tratada                  ³±±
±±³          ³ ExpA8 = Array com os sinais realizados                     ³±±
±±³          ³ ExpA9 = Array com o segundo nivel das opcoes               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³ Vetores:                                                   ³±±
±±³          ³ aSinal - Vetor declarado na funcao principal que           ³±±
±±³          ³          armazena os sinais de "+" e "-" dos itens que     ³±±
±±³          ³          podem ter subitens. Este varia de acordo com o    ³±±
±±³          ³          estado do item: aberto ou fechado.                ³±±
±±³          ³ aDDown - Vetor declarado na funcao principal que           ³±±
±±³          ³          armazenao os subitens dos itens do LisBox que     ³±±
±±³          ³          podem ter variacao de estado: aberto ou fechado.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ LOJC030                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function TrataNivel(	aArr	, cString	, cDblClick	, nOpDrill	,;
							cValor	, nValor 	, nQtde		, aSinal 	,;
							aDDown	)

Local nI		:= 0											//Controle de loop
Local bTab       												//Bloco para alinhar a direita o valor no ListBox
Local cQtde		:= ""											//Quantidade nos tipos de finalizações  

DEFAULT nQtde := 0   

cQtde := Str(nQtde,4)

// Espacos para alinhar a direita o valor no ListBox
bTab := { |x| Space( 30 - Len(x) ) }                                        
                                                    
// Se a string passada estiver contida na opcao que foi selecionada com DblClick no ListBox
If cString $ cDblClick
	// Abre os subitens do item do ListBox se houverem
	If aSinal[nOpDrill] == "+" .AND. Len( aDDown[nOpDrill] ) > 0
		aSinal[nOpDrill] := "-"
		AAdd( aArr, { aSinal[nOpDrill] + " " + cString + Eval( bTab, cString ), nValor } )
		For nI := 1 to Len( aDDown[nOpDrill] )
			AAdd( aArr, aDDown[nOpDrill, nI] )
		Next nI	                                               
	Else                                              
		// Se nao houverem subitens, reapresenta o item e muda apenas o sinal.
		If  aSinal[nOpDrill] == "+"
			aSinal[nOpDrill] := "-"
		Else                                                             
			aSinal[nOpDrill] := "+" 
		EndIf                       
		AAdd( aArr, { aSinal[nOpDrill] + " " + cString + Eval( bTab, cString ) + cValor + " " + cQtde , nValor } )		
	EndIf
Else                                               
	// Se estiver aberto, reimprime os subitens
	If aSinal[nOpDrill] == "-" .AND. Len( aDDown[nOpDrill] ) > 0
		// Apenas mantem o que estava anteriormente no ListBox
		AAdd( aArr, { aSinal[nOpDrill] + " " + cString + Eval( bTab, cString ), nValor  } )
		For nI := 1 to Len( aDDown[nOpDrill] )
			AAdd( aArr, aDDown[nOpDrill, nI] )
		Next nI	
	Else	
		// Apenas mantem o que estava anteriormente no ListBox 
		AAdd( aArr, { aSinal[nOpDrill] + " " + cString + Eval( bTab, cString ) + cValor + " " + cQtde , nValor } )
	EndIf
EndIf

Return( NIL )       

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³IncAvalFor³ Autor ³ Vendas Clientes       ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Funcao para ajustar o nivel								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ IncAvalForma(ExpA1, ExpA2)								  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ LOJC030                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function IncAvalForma(aAux, aValForma)
Local nI 	:= 0 // variavel de loop
Local nJ 	:= 0 // variavel de loop
Local nPos	:= 0 // Variavel auxiliar
    
For nI := 1 To Len(aAux)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Compatibilizacao de tamanhos³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nI > Len(aValForma)
		AAdd(aValForma,{})		
	EndIf
	If Len(aAux[nI])>0
		For nJ := 1 To Len(aAux[nI])
			nPos := aScan( aValForma[nI], { |x| x[1] == aAux[nI][nJ][1] } )
			If nPos<>0
				aValForma[nI,nPos,3] += aAux[nI][nJ][3]
				aValForma[nI,nPos,4] += aAux[nI][nJ][4]
			Else
				AAdd( aValForma[nI], AClone(aAux[nI][nJ]) )
			EndIf						
		Next nJ
	EndIf
Next nI
	
Return .T.
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFUNCAO    ³LJVldMov  ºAutor  ³Vendas Clientes     º Data ³  17/10/06   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Valida se Numero do Movimento foi criado e se foi          º±±
±±º          ³ informado em MV_PAR09                                      º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                                            º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function LJVldMov(lUsaNmov, cAliasMov)

Local lRet		:= .T.
Local cCampo	:= ""
Local cFieldPos := ""

DEFAULT lUsaNmov := .F.
DEFAULT cAliasMov:= "SE5"

cCampo		:= cAliasMov +"->"+SubSTR(cAliasMov,2,3)+"_NUMMOV"
cFieldPos 	:= cAliasMov +"->(FieldPos('"+SubSTR(cAliasMov,2,3)+"_NUMMOV'))"

If &(cFieldPos) > 0
	If lUsaNmov .AND. MV_PAR09 > "00" .AND. &(cCampo) <> MV_PAR09
		lRet := .F.
	EndIf
EndIf

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFUNCAO    ³Lj030Lto  ºAutor  ³Vendas Clientes     º Data ³  07/12/2007 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Rotina para permitir que se visualize os lancamento que    º±±
±±º          ³ geraram o respectivo valor                                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³LOJC030                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±³Parametros³ ExpA1 = Array com os lancamentos analiticos 				  ³±±
±±³          ³ ExpD2 = Array com os dados de venda						  ³±±
±±³          ³ ExpO3 = Objeto da tela que temos a posição do cursor.	  ³±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Lj030Lto( aLacAnalitico, aDadosVen, oMovVen, aArrayPagto, aDadosSan, oMovSan )
Local nContador := 1				  		//Controle de loop	   
Local nTotReg 	:= 0 //Tamanho do array aLacAnalitico
Local aLacBkp   := {}	  //Backup do array aLacAnalitico
Local aAdvSize  := MsAdvSize()           	//Dimensionamento da tela     	
Local aHeader 	:= {} 				   		//Cabecalho da tela
Local nUsado 	:= 0                     	//Verifica se o campo e usado ou nao
Local cCadastro := STR0072					//Titulo da tela
Local bSet15	:= {|| oDlg:End()} 	   		//Botoes da EnchoiceBar
Local bSet24	:= {|| oDlg:End()} 	   		//Botoes EnchoiceBar

DEFAULT aDadosSan := {}
DEFAULT oMovSan   := Nil
DEFAULT oMovVen   := Nil

aLacBkp   := aClone(Iif(nQuadro==1 .AND. oMovVen:NAT <> 10 .AND. oMovVen:NAT <> 11 ,aLacAnalitico, aArraySE5)) ////Backup do array aLacAnalitico
nTotReg 	:= Len(aLacBkp) //Tamanho do array aLacAnalitico
	  

                               	
aLacAnalitico	:= {}
                 
If nTotReg > 0 
    // Filtra os registros do Array - Conforme posicionamento do Cursos na ListBox de Venda.
	aLacBkp := aSort(aLacBkp,,,{|x,y| x[1] < y[1] }) // Ordganiza o Array pela primeira coluna
	For nContador := 1 to nTotReg       
		IF nQuadro == 1
			IF oMovVen:NAT = 1  .and. aLacBkp[nContador][1] = P_VEND_DINHEIRO 
		         // Alimenta o array para a GetDados so com a movimentação de dinheiro
				aAdd(aLacAnalitico,{aLacBkp[nContador][3],; // Numero da Venda 
									aLacBkp[nContador][4],; // Data da Venda 
									aLacBkp[nContador][5],; // Valor da Venda
									aLacBkp[nContador][2],; // Forma de Pagamento
									aLacBkp[nContador][6],; // Administradora / Banco
									aLacBkp[nContador][7],; // Agencia
									aLacBkp[nContador][8],; // Conta
									 ,.F.})
		    ElseIF oMovVen:NAT = 2  .and. aLacBkp[nContador][1] = P_VEND_CHEQUE
		         // Alimenta o array para a GetDados so com a movimentação de Cheques
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 3  .and. aLacBkp[nContador][1] = P_VEND_CARTAO
		         // Alimenta o array para a GetDados so com a movimentação de Cheques
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 4  .and. aLacBkp[nContador][1] = P_VEND_VALE
		         // Alimenta o array para a GetDados so com a movimentação de Vale
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 5  .and. aLacBkp[nContador][1] = P_VEND_CONVENIO
		         // Alimenta o array para a GetDados so com a movimentação de Convenio
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 6  .and. aLacBkp[nContador][1] = P_VEND_FINANCIADO
		         // Alimenta o array para a GetDados so com a movimentação de Finaciado
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 7  .and. aLacBkp[nContador][1] = P_VEND_DEBAUTO
		         // Alimenta o array para a GetDados so com a movimentação de Debito Automatico
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 8  .and. aLacBkp[nContador][1] = P_VEND_OUTROS
		         // Alimenta o array para a GetDados so com a movimentação de Outros
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 9  .and. aLacBkp[nContador][1] = P_VEND_CREDITO
		         // Alimenta o array para a GetDados so com a movimentação de Credito
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})		    	 		    
		    ElseIF oMovVen:NAT = 10 .and. aLacBkp[nContador][1] = P_TRANSF_DESTINO	
		    
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
		    ElseIF oMovVen:NAT = 11 .and. aLacBkp[nContador][1] = P_RECEBIMENTOS	

				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
									 
		    ElseIF oMovVen:NAT = 12 .and. aLacBkp[nContador][1] = P_SANG_IMPOSTOS
		         // Alimenta o array para a GetDados so com a movimentação de Servico
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
			 ElseIF oMovVen:NAT = 13 .and. aLacBkp[nContador][1] = P_VEND_PAGDIG
		         // Alimenta o array para a GetDados so com a movimentação de Pagamento Digital
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
			ElseIF oMovVen:NAT = 14 .and. aLacBkp[nContador][1] = P_VEND_PAGPIX
		         // Alimenta o array para a GetDados so com a movimentação de Pagamento PIX
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})
			EndIf
			     
		Else
			    IF  aLacBkp[nContador][1] == P_PAGAMENTOS
		         // Alimenta o array para a GetDados so com a movimentação de Pagamentos
				aAdd(aLacAnalitico, {aLacBkp[nContador][3],aLacBkp[nContador][4],aLacBkp[nContador][5],aLacBkp[nContador][2],;
									 aLacBkp[nContador][6],aLacBkp[nContador][7],aLacBkp[nContador][8],.F.})			
			Endif		 
		Endif									 
	Next                                                                                                      
Endif


// Valida se arquivo vazio.
IF Len(aLacAnalitico) = 0 
	MsgAlert(STR0078)  //"Nao ha registros a serem exibidos ou a linha selecionada não possui visualização analítica"
	aLacAnalitico := aClone(aLacBkp) // Restaura o conteudo do Array de lancamento detalhados
	Return()
Endif
// Criar o aHeader da GetDados
DbSelectArea("SX3")
DbSetOrder(1)
DbSeek("SL4")
While ( !EOF() .And. SX3->X3_ARQUIVO == "SL4" )
   	If Alltrim(SX3->X3_CAMPO) $ "L4_FORMA - L4_NUM - L4_DATA - L4_VALOR - L4_ADMINIS - L4_AGENCIA - L4_CONTA" 
    	nUsado:=nUsado+1
   	    Aadd(aHeader,{ IIf(oMovVen:NAT <> 1 .and. Alltrim(x3_campo)="L4_ADMINIS",STR0074,TRIM(x3_titulo)), x3_campo, x3_picture,;
    	     x3_tamanho, x3_decimal,"AllwaysTrue()",;
   	    	 x3_usado, x3_tipo, x3_arquivo, x3_context } )
   	 Endif   	 
	DbSelectArea("SX3")
	dbSkip()
EndDo

// Tela da Get Dados  ( Somente para Visualização dos titulos)
DEFINE MSDIALOG oDlg TITLE cCadastro FROM aAdvSize[7],0 TO aAdvSize[6],aAdvSize[5] OF oMainWnd PIXEL // "Calendario de Obrigacoes"

oGetDados := MsNewGetDados():New(	aAdvSize[2],; 		// Linha Inicial
									aAdvSize[1],; 		// Coluna Inicial
									aAdvSize[4],; 		// Linha Final
									aAdvSize[3],; 		// Coluna Final
									0,;					// Permissão de Inserir / Alterar / Deletar o Conteudo da Linha
									"Allwaystrue()",; 	// Valdiação na mudança de Linha 
									"AllwaysTrue()",; 	// Validação na Confirmação da Tela
									NIL,;				// Inicpos
									NIL,;				// InicHead
									NIL,;				// Congelamento de Colunas
									Len(aLacAnalitico),;// Quantidade de linhas da GetDados
									NIL,;				// Validação do OK
									NIL,;				// Super deleção
									NIL,; 				// Validacao p/ delecao
									oDlg,;          	// Nome do Objeto da Tela
									aHeader,;			// Array com os campos do aHeader
									aLacAnalitico;  	// Array com o conteudo a ser exibido na GetDados
									)
									
ACTIVATE MSDIALOG oDlg CENTERED ON INIT ( EnchoiceBar( oDlg , bSet15 , bSet24 )  )

aLacAnalitico := aClone(aLacBkp) // Restaura o conteudo do Array de lancamento detalhados

Return()
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LJ030EST  ºAutor  ³Jose Carlos A. Dias º Data ³  21/12/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Ponto de Entrada para Obter o Numerario em que foi efetuado º±±
±±º          ³nO   *** ESTORNO***  para o resumo de Caixa.                º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±± 
±±ºParametros³ ExpL1 = Usa parametro    								  º±± 
±±ºParametros³ ExpD1 = Data de movimento   								  º±±
±±ºParametros³ ExpL1 = Caixa       								          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±± 
±±ºObser     ³Retorno um Array com os Seguintes campos:                   º±±
±±º          |aEstorno:={ {"     Dinheiro               1.000,00",1000},; º±±
±±º          ³        {"     Cheque                   300,00", 300},;     º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³                                              			  º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß  
*/
Function LJ030EST(lUsaParam, dDataMovto, cCaixa)
       
Local cFormaDescr   	:= ""
Local cDeFilSL4         := ""
Local cAteFilSL4        := ""
Local aTmpEst		    := {}
Local nPosEst           := 0   
Local nQuant            := 0 
Private aEstorno		:={}
Private _cSql			:=""   

If lUsaParam
	cDeFilSL4  := FWxFilial("SL4",MV_PAR05)	// Calcula a "De Filial" do SL4
	cAteFilSL4 := FWxFilial("SL4",MV_PAR06)	// Calcula a "Ate Filial" do SL4
Else
	cDeFilSL4  := xFilial("SL4")
	cAteFilSL4 := xFilial("SL4")
EndIf



#IFDEF TOP                               



	If SL1->(FieldPos("L1_STATUES")) > 0  .And. SL4->(FieldPos( "L4_ESTORN" )) > 0 .And.  SL4->(FieldPos( "L4_OPERAES" ))  > 0  

		        ////// QUERY PARA AS FORMAS DIFERENTES DE CHEQUES
		_cSql:=       "SELECT SL4.L4_FORMA, SL4.L4_ADMINIS,  SUM(L4_VALOR) AS L4_VALOR , COUNT(*) AS L4_QUANT  FROM " +;
					 	RetSQLName("SL1") + " SL1 , " + RetSQLName("SL4") + " SL4 "
		If lUsaParam
   			_cSql+=  "  WHERE SL4.L4_FILIAL BETWEEN '" + cDeFilSL4 + "' AND '" + cAteFilSL4 + "'"+;
			         " AND SL1.L1_EMISSAO BETWEEN '" + DToS(MV_PAR01) + "' AND '" + DToS(MV_PAR02) + "'" +;
			         " AND SL4.L4_OPERAES BETWEEN '" + MV_PAR03 + "' AND '" + MV_PAR04 + "'"
		Else
			_cSql += " WHERE SL4.L4_FILIAL = '" + xFilial("SL4") + "'"+;
                     " AND SL1.L1_EMISSAO = '" + DToS(dDataMovto) + "'"+;
   			         " AND SL4.L4_OPERAES = '" + cCaixa + "'"
		EndIf
		_cSql:=_cSql+" AND SL4.L4_ESTORN = 'S' "+;
					 " AND SL1.L1_FILIAL = SL4.L4_FILIAL AND SL1.L1_NUM = SL4.L4_NUM "+;
					 " AND SL1.D_E_L_E_T_  <> '*' AND SL4.D_E_L_E_T_  <> '*' "
					 

		_cSql:=_cSql+" AND L4_FORMA <> 'CH'  "+;
		             " GROUP BY L4_FORMA, L4_ADMINIS ORDER BY L4_FORMA, L4_ADMINIS"
		
		cQuery := ChangeQuery(_cSql)
		dbUseArea( .T., "TOPCONN", TCGenQry(,,cQuery), 'T40', .F., .T.)
		
		While !T40->( Eof() )
		
			SX5->(DbSetOrder(1))
			SX5->(DbSeek(xFilial("SX5")+'24'+ T40->L4_FORMA))
			cFormaDescr := SX5->X5_DESCRI
			
			aAdd(aEstorno ,{"   " + substr(cFormaDescr,1,13) + " " + substr(T40->L4_ADMINIS,5,19) + Transform(T40->L4_VALOR, "@e 99,999.99" ), T40->L4_VALOR , T40->L4_QUANT } )
			T40->(DBSKIP())
			cFormaDescr:=""
		Enddo 
			             
		T40->( dbCloseArea() )
				
		        ////// QUERY PARA A FORMA CHEQUE
		_cSql:=       "SELECT SL4.L4_FORMA, SUM(L4_VALOR) AS L4_VALOR , COUNT(*) AS L4_QUANT  FROM " +;
					 	RetSQLName("SL1") + " SL1 , " + RetSQLName("SL4") + " SL4 "
		If lUsaParam
   			_cSql+=  "  WHERE SL4.L4_FILIAL BETWEEN '" + cDeFilSL4 + "' AND '" + cAteFilSL4 + "'"+;
			         " AND SL1.L1_EMISSAO BETWEEN '" + DToS(MV_PAR01) + "' AND '" + DToS(MV_PAR02) + "'" +;
			         " AND SL4.L4_OPERAES BETWEEN '" + MV_PAR03 + "' AND '" + MV_PAR04 + "'"
		Else
			_cSql += " WHERE SL4.L4_FILIAL = '" + xFilial("SL4") + "'"+;
                     " AND SL1.L1_EMISSAO = '" + DToS(dDataMovto) + "'"+;
   			         " AND SL4.L4_OPERAES = '" + cCaixa + "'"
		EndIf
		_cSql:=_cSql+" AND SL4.L4_ESTORN ='S' "+;
					 " AND  SL1.L1_STATUES <> ' ' " +;
					 " AND SL1.L1_FILIAL = SL4.L4_FILIAL AND SL1.L1_NUM = SL4.L4_NUM "+;
					 " AND SL1.D_E_l_E_T_  <> '*' AND SL4.D_E_l_E_T_  <> '*' "
					 

		_cSql:=_cSql+" AND L4_FORMA = 'CH'  "+;
		             " GROUP BY L4_FORMA ORDER BY L4_FORMA"
		   
		cQuery := ChangeQuery(_cSql)
		dbUseArea( .T., "TOPCONN", TCGenQry(,,cQuery), 'T40', .F., .T.)
		
		While !T40->( Eof() )
			SX5->(DbSetOrder(1))
			SX5->(DbSeek(xFilial("SX5")+'24'+ T40->L4_FORMA))
			cFormaDescr := SX5->X5_DESCRI
			
			aAdd(aEstorno ,{"   " + substr(cFormaDescr,1,30) + Transform(T40->L4_VALOR, "@e 99,999.99" ), T40->L4_VALOR , T40->L4_QUANT } )
			T40->(DBSKIP())
			cFormaDescr:=""
		Enddo

		T40->( dbCloseArea() )
	Endif				
	
#ELSE 


		DbSelectArea("SL4") 
		DbSetOrder(1)   
		DbSelectArea("SL1")  
		DbSetOrder(4)
		If lUsaParam
			SL1->(DbSeek(cDeFilSL4 + Dtos(MV_PAR01), .T.))
		Else 
			SL1->(DbSeek(cDeFilSL4 + Dtos(dDataMovto), .T.))
		EndIf
		
		Do While SL1->(!Eof() .and. ;
						L1_FILIAL >=  cDeFilSL4  .And. L1_FILIAL <= cAteFilSL4)   
		    
									
			If  ( ( lUsaParam .and. SL1->(L1_EMISSAO >= MV_PAR01 .AND. L1_EMISSAO <= MV_PAR02) )  .or. ( SL1->(L1_EMISSAO  = dDataMovto) ) );
			    .And. !Empty(SL1->L1_STATUES) .And. SL4->(DbSeek(SL1->L1_FILIAL +SL1->L1_NUM)) ;
				
				
				Do While SL4->(!Eof() .and. (L4_FILIAL + L4_NUM == SL1->L1_FILIAL + SL1->L1_NUM))
					
					If SL4->L4_ESTORN == "S" .and. ;
					    (	( lUsaParam .and. SL4->L4_OPERAES >= MV_PAR03 .AND. SL4->L4_OPERAES <= MV_PAR04 ) .or. (SL4->L4_OPERAES = cCaixa)) 
						
						If RTrim(SL4->L4_FORMA) <> "CH"
							nPosEst := aScan(aTmpEst, { |t| t[1] ==  SL4->L4_FORMA .and. t[2] == SL4->L4_ADMINIS} )
						Else
							nPosEst := aScan(aTmpEst, { |t| t[1] ==  SL4->L4_FORMA } )
						EndIf
						
						If nPosEst = 0
							aAdd(aTmpEst, { SL4->L4_FORMA,  SL4->L4_ADMINIS, 0})
							nPosEst := Len(aTmpEst)
						EndIf  
						
						aTmpEst[nPosEst, 3] += SL4->L4_VALOR
						nQuant ++
						
					EndIf
					SL4->(DbSkip(1))
				EndDo
			EndIf
			SL1->(Dbskip(1))
		EndDo  
		
		For nPosEst := 1 to Len(aTmpEst) 
		
			SX5->(DbSetOrder(1))
			SX5->(DbSeek(xFilial("SX5")+'24'+ aTmpEst[nPosEst, 1]))
				 
			If aTmpEst[nPosEst, 1] <> "CH"	
				aAdd(aEstorno ,{"   " + substr(SX5->X5_DESCRI,1,13) + " " + substr(aTmpEst[nPosEst, 2],5,19) + Transform(aTmpEst[nPosEst, 3], "@e 99,999.99" ), aTmpEst[nPosEst, 3], nQuant } )
	        Else 
	        	aAdd(aEstorno ,{"   " + substr(SX5->X5_DESCRI,1,30)  + Transform(aTmpEst[nPosEst, 3], "@e 99,999.99" ), aTmpEst[nPosEst, 3], nQuant } )
	        EndIf
	 
		Next

	
#ENDIF 
Return aEstorno

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³LOJC030   ºAutor  ³Vendas Clientes     º Data ³  02/07/2013 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Retorna a posicao original da forma de pagamento           º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ LOJC030                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Lj030PosPag(pTipoVen,aArrayPagto,oMovVen)
Local nPosPag := 0		// Posicao no original de pagamentos
	
	nPosPag:= Ascan(aArrayPagto,{|x| Alltrim(Upper(Substr(x[1],3,20))) == Alltrim(Upper(Substr(pTipoVen,3,20))) } )

	// Reposiciona a partir do array original
	oMovVen:nAt := nPosPag
	
Return(Nil)                                                      

//--------------------------------------------------------
/*/{Protheus.doc} ljChkKeyCanc()
Função responsável por verificar se a chave da tabela SE5
esta preechida para verificação de cancelamento de baixa.
Existe uma situação em que os registros nao possuem
os campos da chave preenchido, assim no momento da query na função
TemBxCanc o retorno fica errado pois se baseia na chave para identificação

@author	Varejo
@version	P11.8
@since		23/07/2016
@return	lRet
/*/
//--------------------------------------------------------
Static Function LjChkKeyCanc(cParamAlias)
Local lRet		:= .F.
Local cInfo		:= ""

Default cParamAlias	:= ""

If !Empty(cParamAlias) .And. AllTrim((cParamAlias)->E5_ORIGEM) <> "LOJXREC"

	cInfo := (cParamAlias)->(E5_PREFIXO + E5_NUMERO + E5_PARCELA + E5_TIPO + E5_CLIFOR + E5_LOJA + E5_SEQ)

	If Empty(cInfo)
		lRet := AllTrim((cParamAlias)->(E5_SITUACA)) == "C"  .Or.;
				 AllTrim((cParamAlias)->(E5_TIPODOC)) == 'ES' .Or.;
				 AllTrim((cParamAlias)->(E5_SITUACA)) $ 'C/E/X' 
	Else
		#IFDEF TOP
			lRet := TemBxCanc(cInfo)  // funcao padrao no MATXFUNB trata apenas por query
		#ELSE	
			lRet := LjBxCanc(cInfo)   // funcao varejo para tratamento codebase
		#ENDIF
	EndIf
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    LjBxCanc ³ Autor ³ Vendas Clientes     ³ Data ³ 17/10/201798 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Verifica se a baixa do titulo foi cancelada                 ³±±
±±³          ³Caso nao seja passada a Chave, o SE5 deve estar posicionado ³±±
±±³          ³para a montagem da Chave. Tratamento especifico em Codebase ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ LOJC030                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function LjBxCanc(cChave, lBxFut, cFil)
Local aArea    := GetArea()
Local aAreaSE5 := SE5->(GetArea())
Local lRet 	   := .F.

DEFAULT lBxFut := .F.
DEFAULT cFil := xFilial("SE5")

dbSelectArea("SE5")
cChave := If(cChave==Nil,SE5->(E5_PREFIXO+E5_NUMERO+E5_PARCELA+E5_TIPO+E5_CLIFOR+E5_LOJA+E5_SEQ),cChave)
If !Empty(cChave)
	// Se o SE5 nao estiver posicionado, posiciona para encontrar os estornos
	// do titulo correto
	If !(IsInCallStack("FVeDatIr") .and. IsInCallStack("FINA091") .and. !Empty(SE5->E5_FILIAL))
		If SE5->&(IndexKey()) != xFilial("SE5")+cChave .And. !Empty(IndexKey(7))
			dbSetOrder(7)
			dbSeek(cFil+cChave)
		Endif	    
	EndIf
Endif

If !Empty(cChave) .and. SE5->(!Eof()) 
	While !Eof() .and. cChave == SE5->E5_PREFIXO + SE5->E5_NUMERO+;
		SE5->E5_PARCELA + SE5->E5_TIPO + SE5->E5_CLIFOR + SE5->E5_LOJA + SE5->E5_SEQ
		If (SE5->E5_TIPODOC == 'ES' .OR. SE5->E5_SITUACA == 'C' .OR. SE5->E5_SITUACA == 'E' .OR. SE5->E5_SITUACA == 'X') .and. Iif (!lBxFut, SE5->E5_DATA <= dDataBase, .T.)
			lRet := .T.
			Exit
		EndIf
		dbSkip()
	EndDo
EndIf

RestArea(aAreaSE5)
RestArea(aArea)

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo Lj030Report ³ Autor ³ Varejo        s     ³ Data ³ 21/03/2018   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina para impressão do Resumo de caixa pelo objeto tReport´±±
±±³																		  ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ LOJC030                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Lj030Report(	lMV_LJTROCO	,nTrocoSaida	, aCaixa		,nTroco		,;
						nTotCredito	,nTotDebito		, nSaldFinal 	,aDadosVen	,;
						aDadosSan   ,oMovVen		, aSinal		,ADDOWN     ,;
						aContFina   ,nVlrCred		, oMovSan		,nEstac		,;
						nGorjeta)

Local oReport	:= Nil
Local oSection	:= Nil
Local nEscolha	:= SuperGetMV("MV_LJC030I",,0)	//Forma de Impressao do Resumo de Caixa. 1 Analitico (Aberto) ,0(zero) - pega a forma que estiver na tela
Local cTitulo	:= Upper(STR0023)				//Fechamento de caixa

If nEscolha == 1  // Sempre Analítico  
	nI := 1
	Do While nI <= Len(oMovVen:aArray)
		lAbre := (Left(oMovVen:aArray[nI][1],1) == "+" .AND. oMovVen:aArray[nI][2] <> 0)
		If lAbre
	    	LJ030DDown(	nI				, 1 				, @nTrocoSaida	 , @nTroco		,;
	    				@nTotCredito	, @nTotDebito		, @nSaldFinal	 , @nEstac		,;
	    				@nGorjeta		, @oMovVen			, @oMovSan		 , @aDadosVen	,;
	    				@aSinal			, @aDDown			, @aContFina	 , @aCaixa	   	,;
	    				@aDadosSan		, @nVlrCred     )
		EndIf
	nI++
	EndDo  
EndIf  

oReport := TReport():New( "LOJC030",cTitulo,,{|oReport| LJREPORT030(oReport,aDadosVen,nTroco,lMV_LJTROCO,;
																	nTrocoSaida,nTotCredito,nTotDebito,aDadosSan,;
																	nSaldFinal,nEstac,nGorjeta)},cTitulo)	

DEFINE SECTION oSection OF oReport TITLE cTitulo TOTAL IN COLUMN//Fechamento de caixa

DEFINE CELL NAME "CEL0" OF oSection SIZE 155 TITLE ""

//Define o espaçamento entre as colunas
oSection:SetColSpace(0)

//Define que a impressão poderá ocorrer em uma ou mais linhas no caso das colunas exederem o tamanho da página
oSection:SetLineBreak(.T.)

oReport:PrintDialog()

Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo LJREPORT030 ³ Autor ³ Varejo        s     ³ Data ³ 21/03/2018   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina para impressão do Resumo de caixa pelo objeto tReport´±±
±±³																		  ´±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ LOJC030                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function LJREPORT030(oReport,aDadosVen,nTroco,lMV_LJTROCO,;
							nTrocoSaida,nTotCredito,nTotDebito,aDadosSan,;
							nSaldFinal,nEstac,nGorjeta) 

Local cPicture	:= PesqPict("SL1","L1_VLRTOT",18)
Local cTexto 	:= ""				  //Variável que armazena os dados das linhas que compõem o  "Creditos / Vendas"
Local cTxtAux 	:= ""				  //Variável auxiliar para a variavel cTexto, cValor e cQuant
Local cValor	:= ""				  //Variável que armazena o Valor extraido da variavel cTexto
Local cQuant	:= ""				  //Variável que armazena a Quantidade extraido da variavel cTexto	
Local oSection	:= oReport:Section(1) //Retorna objeto da classe TRSection (secao).
Local lAberto	:= .F.
Local lEstGor	:= SuperGetMV( "MV_LJREST",.F.,.F.) //Caso tenha estacionamento e gorjeta
Local nS		:= 0				  //Controle do laço de repetição
Local nPosic	:= 0 				  //Variável que controla se devera apresentar a quantidade ou apendas espaços em branco
Local nEspaco 	:= 0				  //Variável onde é armazenado a quantidade de espaços do texto ao valor
Local nValMult	:= 62				  //Tamanho do espaçamento entre cada linha
Local nLin1		:= 0				  //Linha 1 para controle do tamanho do box
Local nLin2		:= 0				  //Linha 2 para controle do tamanho do box
Local nLinSLTR	:= 0				  //Variável para controle do tamanho do box do saldo inicial e troco
Local nTotOpe	:= 0				  //Controle para operação do tamanho do box
Local nTotDBS	:= 0				  //Controle para operação do tamanho do box de débitos e sangrias
Local nLenDadVen:= 12				  //Tamanho padrão do array a ser verificado
Local nDadosVen	:= Len(aDadosVen) 

//////////////////////////////////////////////////////////////////////
//Setando variável para o tamanho do do box do saldo inicial / troco//
//////////////////////////////////////////////////////////////////////
If lMV_LJTROCO
	nLinSLTR	:= 610
	nLin1		:= 1440 
	nTotDBS		:= 2320
Else
	nLinSLTR	:= 550
	nLin1		:= 1380 
	nTotDBS		:= 2260
EndIf

oReport:lEmptyLineExcel := .F. //Suprimir linhas em branco para impressao no Excel	

//Define o limite da regua de progressão do relatorio
oReport:SetMeter( Len( aDadosVen ) )	

//////////////////////////////////////////////////////////
//Calculo para controle do tamanho do box a ser impresso//
//////////////////////////////////////////////////////////
If nDadosVen - nLenDadVen > 0
	nTotOpe	:= nValMult * ((nDadosVen - nLenDadVen))// + Iif(lMV_LJTROCO,1,0))  
	nLin1 += nTotOpe
	nLin2 := nTotOpe
EndIf

oSection:Init()

oSection:Cell("CEL0"):SetBlock( &("{ || '" + Upper(STR0023) + "'}") )//Fechamento de caixa
oSection:PrintLine()

oReport:FatLine()
oReport:SkipLine()

// Incrementa a regua de progressao do relatório
oReport:IncMeter()

///////////////////////////////////////////////////////
//Impressão do cabeçalho com os parâmetros informados//
///////////////////////////////////////////////////////
oSection:Cell("CEL0"):SetBlock( &("{ || '" + AllTrim(STR0052) + PadR(DtoC(MV_PAR01),20) + " "  + AllTrim(STR0055) + DtoC(MV_PAR02) + "'}") )// "De Data   : " ### "Ate Data   : "
oSection:PrintLine()

oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0053 + PadR(MV_PAR03,20) + " " + STR0056 + MV_PAR04 + "'}") )// "De Caixa  : " ### "Ate Caixa  : "
oSection:PrintLine()

oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0054 + PadR(MV_PAR05,20) + " " + STR0057 + MV_PAR06 + "'}") )// "De Filial : " ### "Ate Filial : "
oSection:PrintLine()

//Linha
oReport:FatLine()
oReport:SkipLine()

oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0030 + Transform(nTroco,cPicture) + "'}" ))//"Saldo Inicial .................................."
oSection:PrintLine()

//Linha
oReport:FatLine()
oReport:SkipLine()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Imprime Valores do Troco Saida           ³
//³Verifica se o parametro lMV_LJTROCO = .T.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lMV_LJTROCO
	oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0070 + Transform(nTrocoSaida,cPicture) + "'}" ))//"Troco  .................................."
	oSection:PrintLine()
EndIf   

oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0031 + Transform(nTotCredito,cPicture) + "'}" ))//"C R E D I T O S / V E N D A S .................."
oSection:PrintLine()

/////////////////////////////////////////////////////////
//Efetuando impressão as demais condições de pagamentos//
/////////////////////////////////////////////////////////
For nS := 1 To nDadosVen
	lAberto := (Left(aDadosVen[nS][1],1) == "-" .And. aDadosVen[nS][2] <> 0)
	cTxtAux := aDadosVen[nS][1]
	cTexto 	:= Left(cTxtAux,30)
	cTxtAux := AllTrim(SubStr(cTxtAux,Len(cTexto) + 1))
	nPosic 	:= At(" ",cTxtAux)
	cQuant 	:= Space(04)

	If nPosic > 0
		cQuant 	:= PadL(SubStr(cTxtAux,nPosic + 1),4)
		cTxtAux := Left(cTxtAux,nPosic - 1)
	EndIf

	cValor 	:= cTxtAux
	nEspaco := 48 - Len(cTexto + cValor + cQuant + " ")
	cTexto := cTexto + " " + Space(nEspaco) + cValor + cQuant + " "
	cTexto := Padr(cTexto, 48,	Iif(lAberto,"","."))
	
	oSection:Cell("CEL0"):SetBlock( &("{ || '" + cTexto + Iif(lAberto, "", Transform(aDadosVen[nS][2],cPicture)) + "'}" ))
	oSection:PrintLine()
Next nS      

oReport:FatLine()
oReport:SkipLine()

oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0033 + Transform( nTotDebito, cPicture ) + "'}" ))//"D E B I T O S / S A N G R I A S ................"
oSection:PrintLine()

///////////////////////////////
//Itens do Débitos e sangrias//
///////////////////////////////
For nS := 1 To Len(aDadosSan)

	oSection:Cell("CEL0"):SetBlock( &("{ || '" + Padr(Left(aDadosSan[nS][1],23)+" " + Space(06) + " ",48,".") + Transform(aDadosSan[nS][2],cPicture) + "'}" ))
	oSection:PrintLine()

Next nS

////////////////////////////
//Estacionamento e Gorjeta//
////////////////////////////
If lEstGor

	oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0065 + Transform(nEstac,cPicture) +; 
												 STR0066 + Transform( nGorjeta,cPicture) + "'}" ))//Estacionamento e Gorjeta
	oSection:PrintLine()

EndIf

///////////////
//Saldo Final//
///////////////
oReport:FatLine()
oReport:SkipLine() 

oSection:Cell("CEL0"):SetBlock( &("{ || '" + STR0034 + Transform(nSaldFinal,cPicture) + "'}" ))
oSection:PrintLine()

oReport:FatLine()
oReport:SkipLine()

//////////////////////////////////////////
//Finaliza a impressão do relatório   ////
//////////////////////////////////////////
oSection:Finish()

Return
