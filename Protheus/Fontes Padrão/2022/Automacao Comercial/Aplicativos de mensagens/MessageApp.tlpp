#Include "TOTVS.ch"
#include "tlpp-core.th"
#include "msobject.ch"
#include "MessageApp.ch"

/*/{Protheus.doc} MessageApp
    Classe de referencia para integração com aplicativos de mensagens
    @author Lucas Novais (lnovais)
    @since 26/06/2020
    @version 1.0
/*/

Class MessageApp
    PROTECTED DATA aData            as Array
    PRIVATE   DATA cFunctionality   as Character
    PRIVATE   DATA cIdUser          as Character
    PROTECTED DATA aPositions       as Array
    PUBLIC    DATA oGroupsInterface as Object
    PUBLIC    DATA aBranches        as Array
    PUBLIC    DATA oLog             as Object

    PUBLIC  METHOD NEW(cfunctionality,cIdUser) CONSTRUCTOR
    PRIVATE METHOD LoadData()
    PRIVATE METHOD GetaData()
    PUBLIC  METHOD AdjustGroups()
    PRIVATE METHOD GroupsInterface() 
EndClass

/*/{Protheus.doc} New
    Metodo construtor da classe
    @author Lucas Novais (lnovais)
    @since 26/06/2020
    @version 1.0
    @param cfunctionality, character, Funcionalidade (MHT_FUNC)
    @param cIdUser       , character, Id do Usuarios (MHV_IDUSER)
    @return Self         , Object   , Objeto da classes
/*/

Method New(cfunctionality,cIdUser) Class MessageApp
    DEFAULT cfunctionality := ""
    DEFAULT cIdUser        := ""

    Self:oLog              := MessageLog():New()

    Self:cfunctionality    := PADR(UPPER(cfunctionality), TamSX3("MHT_FUNC")    [1])
    Self:cIdUser           := PADR(UPPER(cIdUser)       , TamSX3("MHV_IDUSER")  [1])
    Self:aBranches         := {}

    Self:LoadData(Self:cfunctionality,Self:cIdUser)

    // -- Se enviar o Id do usuario  aprensenta para selecionar os grupos
    If !EMPTY(Self:cIdUser)
        Self:GroupsInterface():Activate(,,,.T.,{||.T.},,{||} )
        Self:AdjustGroups()
    EndIF 
    
return Self

/*/{Protheus.doc} LoadData
    Metodo responsavel por alimentar as pripiedades aData e aPositions
    @author Lucas Novais (lnovais)
    @since 26/06/2020
    @version 1.0
/*/
Method LoadData() Class MessageApp
    Local oMessageData := MessageData():New(Self:cfunctionality,Self:cIdUser) as Object
    Self:aData         := oMessageData:GetaData()                             
    Self:aPositions    := oMessageData:GetPositions()                        
Return  

/*/{Protheus.doc} GroupsInterface()
    Monta tela para sele
    @author Lucas Novais (lnovais)
    @since 29/06/2020
    @version 1.0
    @return Self:oGroupsInterface, Object, Objeto de tela
/*/
Method GroupsInterface() Class MessageApp
    Local oTCBrowse := NIL as Object
    Local nX        := 0   as Numeric

    Self:oGroupsInterface := TDialog():New(000,000,000,000,STR0001,,,,,0,16777215,,,.T.,,,,550,260)                                                 // -- "Selecione Chat's disponiveis"
    oTCBrowse := TCBrowse():New( 005 , 001, 275, 100,, {" ",STR0002,STR0003},{20,40,120}, Self:oGroupsInterface,,,,,{||},,,,,,,.F.,,.T.,,.F.,,, )   // -- "Chat" // -- "Descrição"

    For nX := 1 To Len(Self:aData[2][1]) 
        aAdd(Self:aBranches,{.F.,Self:aData[2][1][nX][Self:aPositions[1]][2],Self:aData[2][1][nX][Self:aPositions[2]][2]})  
    Next

    oTCBrowse:SetArray( Self:aBranches )
    oTCBrowse:bLine := {||	{	If( Self:aBranches[oTCBrowse:nAt][1], LoadBitmap( GetResources(), "LBOK" ), LoadBitmap( GetResources(), "LBNO" ) ),;
									Self:aBranches[oTCBrowse:nAt][2],;
									Self:aBranches[oTCBrowse:nAt][3]}}

    oTCBrowse:bLDblClick := {|| oTCBrowse:aArray[oTCBrowse:nAt][1] := !oTCBrowse:aArray[oTCBrowse:nAt][1], oTCBrowse:Refresh(),}	

    TButton():New( 110, 195, STR0004 ,Self:oGroupsInterface,{|| Self:oGroupsInterface:End()},80,15,,,,.T.)                                         // -- "Confirmar"
    TButton():New( 110, 002, STR0005 ,Self:oGroupsInterface,{|| AEval(Self:aBranches,{|x| x[1] := !x[1], oTCBrowse:Refresh()}) }, 80,15,,,,.T.)    // -- "Marcar / Desmarcar"

Return Self:oGroupsInterface

/*/{Protheus.doc} GroupsInterface()
    Metodo responsavel por reorganizar a tabela MHU conforme selecionado na tela
    @author Lucas Novais (lnovais)
    @since 29/06/2020
    @version 1.0
/*/

Method AdjustGroups() Class MessageApp
    Local nX := 0 as Numeric

    For nX := 1 To Len(Self:aBranches)
        If !Self:aBranches[nX][1]
           aDel(Self:aData[2][1],aScan(Self:aData[2][1],{|x| x[2][2] == Self:aBranches[nX][2]}))
           ASize(Self:aData[2][1],len(Self:aData[2][1]) -1 )
        EndIf 
    Next

Return

