#INCLUDE "LOJA920X.CH"
//aDifCalc
#DEFINE _DIFCALC1	06  
#DEFINE _DIFCALC2	07  
#DEFINE _DIFCALC3	03  
#DEFINE _DIFCALC4	01  

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³LJ920Grava³ Autor ³ Vendas Clientes		³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a grava‡Æo da NF de sa¡da                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ LJ920Grava(ExpC1,ExpA2,ExpA3,ExpC4,ExpA5,ExpN6)            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpA2 = Array de dados de livro                            ³±±
±±³          ³ ExpA3 = Array de dados da nota fiscal                      ³±±
±±³          ³ ExpC4 = dado de loja para NF                               ³±±
±±³          ³ ExpA5 = Array de posicoes na tela                          ³±±
±±³          ³ ExpN6 = variavel de controle da posicao atual na tela      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ LOJA920                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function LJ920Grava( cAlias, aLivro, aNotas, cLojaNF, nPosLocal ) 
Local nX          := 1                              // Auxiliar
Local nY                                          	// Auxiliar
Local nMaxArray                                   	// Tamanho do Array
Local cProduto                                    	// Produto
Local cLocal                                      	// Local
Local bMoeda                                      	// Bloco para definir custo
Local bVlMoeda                                    	// Valor 
Local aCm         := {}                          	// Array com o dados SD2
Local aCusto      := {}                          	// Calculo do Custo
Local aEnvCus     := {}                          	// Custo Medio
Local lNotaTxt    := ExistBlock("NOTATXT")       	// Verifica se existe o Ponto de Entrada 
Local lLJCP920    := ExistBlock("LJCP920")       	// Verifica se existe o Ponto de Entrada
Local nMaxItens   := 0                           	// Numero maximo de itens conforme parametro MV_NUMITEN
Local lFirst      := .T.                         	// Verifica se e a primeira Nota Fiscal
Local lEntrou     := .F.                     		// Para multiplas Notas
Local nItens      := 0                           	// Numero de Itens
Local cIteNF      := "00"                        	// Grava o numero do Item
Local nBsIcmRetF2 := 0                           	// Retenção do ICMS
Local nVlIcmRetF2 := 0                           	// Valor Retido do ICMS
Local nSmIcmRetF2 := 0                           	// Valor solidario
Local nNotaAtu 	  := 0                           	// Numero de NFs
Local cNfOri      := ""                          	// Nota Original 
Local cSeriOri    := ""                          	// Serie Original
Local cItemOri    := ""                          	// Item Original
Local nAliqISS    := 0                              // Aliguota do ISS
Local nBaseISS    := 0                              // Base do ISS
Local nValISS     := 0                              // Valor do ISS
Local aAreaSB1	  := {}								// Salva a Area
Local cMV_TPNRNFS := LjTpNrNFS()					// Retorno do parametro MV_TPNRNFS, utilizado pela Sx5NumNota() de onde serah controlado o numero da NF  1=SX5  2=SXE/SXF  3=SD9
Local nRecnoSF2   := 0						   		// Nr. de registro atual do SF2
Local nPosBRICMS  := 0								// Posicao do campo BRICMS na Acols
Local nPosICMSRet := 0								// Posicao do campo BRICMS na Acols
Local nTamA1_COD  := TamSx3("A1_COD")[1]   			// Tamanho do campo A1_COD
Local nTamF2_DOC  := TamSx3("F2_DOC")[1]			// Tamanho do campo do F2_DOC
Local cCodCli     := LEFT( ca920cli, nTamA1_COD )  // Codigo do Cliente  
Local lFisLivro   := (SuperGetMV("MV_LJLVFIS",,1) == 2)

Private oDlgLoja

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Funcao utilizada para verificar a ultima versao dos fontes      ³
//³ SIGACUS.PRW, SIGACUSA.PRX e SIGACUSB.PRX, aplicados no rpo do   |
//| cliente, assim verificando a necessidade de uma atualizacao     |
//| nestes fontes. NAO REMOVER !!!							        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF !(FindFunction("SIGACUS_V") .AND. SIGACUS_V() >= 20050512)
    Final("Atualizar SIGACUS.PRW !!!")
Endif
IF !(FindFunction("SIGACUSA_V") .AND. SIGACUSA_V() >= 20050512)
    Final("Atualizar SIGACUSA.PRX !!!")
Endif
IF !(FindFunction("SIGACUSB_V") .AND. SIGACUSB_V() >= 20050512)
    Final("Atualizar SIGACUSB.PRX !!!")
Endif

nPosTes		:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_TES" })
nPosLocal	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_LOCAL" })
nPosProd 	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_COD" })
nPosBRICMS  := aScan(aHeader, { |x| AllTrim(x[02]) == "D2_BRICMS" })
nPosICMSRet := aScan(aHeader, { |x| AllTrim(x[02]) == "D2_ICMSRET" })

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Defini‡Æo de blocos de c¢digos para atualizacao do custo     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
bMoeda	:= {|x| "SM2->M2_MOEDA"+Str(x,1) }
bVlMoeda := {|x| IIF(cTipo$"DB","E1","E2")+"_VLMOED"+Str(x,1) }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona no Cliente escolhido ou Fornecedor                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cTipo $ "DB"
	DBSelectArea("SA2")
	SA2->( DbSetOrder(1) )
	SA2->( DbSeek( xFilial("SA2") + cCodCli + cLoja) )   
Else
	DBSelectArea("SA1")
	SA1->( DbSetOrder(1) )
	SA1->( DbSeek( xFilial("SA1") + cCodCli + cLoja) )   
EndIf	

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza dados padräes do cabe‡alho da nota fiscal de saida ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If cPaisLoc == "BRA"
	aSolid := A100TotRet()
EndIf

If cFormul == "N"
	cNumNota := cNFiscal
Endif

If lFiscal .AND. lLjCp920
	cNumNota := ExecBlock("LJCP920",.f.,.f.,{aCols} )
	cSerie   := xNumCaixa()
Endif

nMaxItens := SuperGetMV("MV_SER"+cSerie,.F.,SuperGetMV("MV_NUMITEN"))

DBSelectArea("SF2")
SF2->( DbSetOrder(1) )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o £ltimo elemento do array est  em branco		     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nMaxArray := LEN( aCols )

For ny := 1 to LEN( aHeader )
	If EMPTY( aCols[ nMaxArray ][ ny ] )
		If TRIM( aHeader[ ny ][2]) == "D2_COD"   .OR.;
			TRIM( aHeader[ ny ][2]) == "D2_TOTAL" .OR.;
			TRIM( aHeader[ ny ][2]) == "D2_TES"   .OR.;
			TRIM( aHeader[ ny ][2]) == "D2_CF"
			nMaxArray--
			Exit
		EndIf
	EndIf
Next nY

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Zera vari veis                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nValDesc    := 0
nTotMerc    := 0
nTotIcm     := 0
nTotIpi     := 0
nTotNot     := 0
nBaseIpi    := 0
nBaseIcm    := 0
nTotBaseIss := 0
nTotValIss  := 0
nSmIcmRetF2 := 0
nBsIcmRetF2	:= 0
nVlIcmRetF2 := 0


While nX <= nMaxArray
	
	// Verifica itens deletados e reajusta o tamanho do array aCols
	If VALTYPE( ATAIL( aCols[ nX ] ) ) == "L" 
		If ATAIL( aCols[ nX ] ) .OR. EMPTY( aCols[ nX ][ nPosProd ] ) 
			aDel( aCols, nX )
			aSize( aCols, (Len(aCols)-1) )
			nMaxArray := Len(aCols) 
			Loop
		EndIf
	Endif

	nItens ++
	If nItens > nMaxItens
		nNotaAtu ++
		If cFormul == "S"
			cSerie   := aNotas[ nNotaAtu ][1]
			cNumNota := aNotas[ nNotaAtu ][2]
			cNumNota := PadR( cNumNota , nTamF2_DOC )			
		Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Chama a fun‡ao de gravacao do SF2 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		FechaSF2(	lFirst, 		cTipo,		 	@cSerie,	 	dDEmissao,;
					cLoja,			ca920Cli,	 	nValDesc,	 	dDataBase,;
					nTotMerc, 		nTotIcm,	 	nTotIpi, 		nTotNot,;
					nValFrete,		nBaseIpi,	 	nBaseIcm, 		nValDesp,;
					aSolid,			nTotBaseIss, 	nTotValIss,		cEspecie,;
					@lEntrou, 		@cNumNota,	 	Nil,			nSmIcmRetF2,;
					nVlIcmRetF2,	nBsIcmRetF2, 	aNotas, 		nNotaAtu )
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Zera vari veis                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nValDesc    := 0
		nTotMerc    := 0
		nTotIcm     := 0
		nTotIpi     := 0
		nTotNot     := 0
		nValFrete   := 0
		nBaseIpi    := 0
		nBaseIcm    := 0
		nValDesp    := 0
		nTotBaseIss := 0
		nTotValIss  := 0
		nItens      := 1
		cIteNf      := "00"
		lFirst      := .F.
		nSmIcmRetF2 := 0
		nBsIcmRetF2	:= 0
		nVlIcmRetF2 := 0
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Checa a numeracao da nota fiscal ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cFormul == "S"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se precisa fazer o controle de notas pelo SD9               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If Len( aNotas ) < nNotaAtu + 1
			If cMV_TPNRNFS == "3"
				aAdd( aNotas, { cLojaNF,  MA461NumNf( .T., cLojaNF ) } )
			Endif
		Endif		
		cSerie := aNotas[nNotaAtu+1][1]
		cNumNota := aNotas[nNotaAtu+1][2]
	Endif

	cNumNota     := PadR(cNumNota,nTamF2_DOC)

	SF2->(DbSetOrder( 1 ))
	If ! SF2->( DbSeek( xFilial( "SF2" )+ cNumNota + cSerie + LEFT( ca920cli, nTamA1_COD ) + cLoja  ) )
		RecLock( "SF2", .T. )
		SF2->F2_FILIAL  := xFilial( "SF2" )
		SF2->F2_DOC     := cNumNota
		SF2->F2_SERIE   := cSerie
		SF2->F2_CLIENTE := LEFT( ca920cli, nTamA1_COD )
		SF2->F2_LOJA    := cLoja
		MsUnlock() 
 		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Adicionado o comando FKCommit(), pois estava ocorrendo        ³
		//³problema com a integridade referencial ligada.				 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SF2->(FKCommit())
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se deve adicionar ou regravar						 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	RecLock(cAlias,.T.)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza dados do corpo da nota selecionados pelo cliente    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For ny := 1 to LEN( aHeader )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Verifica se ‚ o c¢digo para dar seek no SB1 e pegar grupo ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If TRIM( aHeader[ ny ][2] ) == "D2_COD"

			cProduto := aCols[ nX ][ nY ]
			DBSelectArea("SB1")
			SB1->( DbSetOrder(1) )
			SB1->( DbSeek( xFilial("SB1") + cProduto) )
			RecLock( cAlias,.F.)
			SD2->D2_GRUPO	:= SB1->B1_GRUPO
			SD2->D2_TP	 	:= SB1->B1_TIPO

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se incide Iss no produto	                    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !EMPTY( RTRIM( SB1->B1_CODISS ) )
				SD2->D2_CODISS := SB1->B1_CODISS
			Endif

		ElseIf TRIM( aHeader[ ny ][2] ) == "D2_VUNIT" .AND. cTipo == "N"

			DBSelectArea("SB1")
			SB1->( DbSetOrder(1) )
			IF SB1->( DbSeek( xFilial("SB1") + cProduto ) )
				If RetArqProd(SB1->B1_COD)
					RecLock("SB1",.F.)
					Replace B1_UCOM With dDEmissao,B1_UPRC With aCols[nX][nY]
					MsUnlock()
				Else 
					aAreaSB1 := GetArea()
					RecLock("SBZ",.F.)
					Replace BZ_UCOM With dDEmissao,BZ_UPRC With aCols[nX][nY]
					MsUnlock()
					RestArea(aAreaSB1)
				Endif	
			EndIf
			RecLock(cAlias,.F.)

		ElseIf TRIM( aHeader[ ny ][2] ) == "D2_LOCAL"

			cLocal := aCols[ nX ][ nY ]

		ElseIf TRIM( aHeader[ ny ][2] ) == "D2_TES"

			DBSelectArea("SF4")
			SF4->(	DbSetOrder(1) )
			SF4->( DbSeek(xFilial("SF4") + aCols[ nX ][ nY ]) )
			DBSelectArea(cAlias)

		EndIf

		Var := TRIM( aHeader[ ny ][2] )

		If aHeader[ ny ][10] <> "V" .AND.(Var <> "D2_ALI_WT" .AND. Var <> "D2_REC_WT")
			Replace &Var. With aCols[nX][nY]
		EndIf

	Next nY

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Grava o numero do item³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cIteNf := SomaIt(cIteNF)
	SD2->D2_ITEM := cItenf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Atualiza dados padroes do corpo da nota fiscal de SAIDA	     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SD2->D2_LOJA   	:= cLoja
	SD2->D2_CLIENTE	:= LEFT( ca920cli, nTamA1_COD )
	SD2->D2_DOC    	:= cNumNota
	SD2->D2_EMISSAO	:= dDEmissao
	SD2->D2_SERIE  	:= cSerie
	SD2->D2_FILIAL 	:= xFilial("SD2")
	SD2->D2_NUMSEQ 	:= ProxNum()
	SD2->D2_TIPO	:= cTipo
	SD2->D2_ORIGLAN	:= "LO"
	SD2->D2_TOTAL 	:= SD2->D2_TOTAL - SD2->D2_DESCON
	SD2->D2_EST  	:= if(cTipo $ "DB",SA2->A2_EST, SA1->A1_EST)    
	If(SD2->D2_VALIPI > 0 , SD2->D2_BASEIPI := SD2->D2_BASEICM ,"" )
	
	If SD2->D2_DESCON > 0
		SD2->D2_PRCVEN := (SD2->D2_TOTAL / SD2->D2_QUANT)
	Endif
	SD2->D2_PRUNIT := SD2->D2_PRCVEN + (SD2->D2_DESCON/SD2->D2_QUANT)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Calculo de ICM Solidario                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aIcmsSol := {aCols[nX][nPosBRICMS],aCols[nX][nPosICMSRet],0}
	
	If SF4->F4_ESTOQUE == "S"
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Pega os 5 custos medios finais             ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Estrutura de aEnvCus:                                                 ³
		//³                                                                      ³
		//³ aEnvCus[n][01] := Valor total da Nota                                ³
		//³ aEnvCus[n][02] := Array com impostos variaveis.                      ³
		//³   Onde : aEnvCus[n][2][1] := C¢digo do Imposto                       ³
		//³          aEnvCus[n][2][2] := Al¡quota do Imposto                     ³
		//³          aEnvCus[n][2][3] := Base de C lculo do Imposto              ³
		//³          aEnvCus[n][2][4] := Valor Calculado do Imposto              ³
		//³          aEnvCus[n][2][6] := "SSS"                                   ³
		//³                               ÀÅÅÄ> Inclui no Valor da Duplicata     ³
		//³                                ÀÅÄ> Inclui no Total da Nota Fiscal   ³
		//³                                 ÀÄ> Credita se para c lculo do Custo ³
		//³ aEnvCus[n][2][6] := Valor do Frete (Rateado)                         ³
		//³ aEnvCus[n][2][7] := Imposto sobre o Frete                            ³
		//³ aEnvCus[n][03] := 0.00                                               ³
		//³ aEnvCus[n][04] := " "                                                ³
		//³ aEnvCus[n][05] := " "                                                ³
		//³ aEnvCus[n][06] := Nota Fiscal Original                               ³
		//³ aEnvCus[n][07] := Serie da Nota Fiscal Original                      ³
		//³ aEnvCus[n][08] := Codigo do Produto                                  ³
		//³ aEnvCus[n][09] := Array com impostos variaveis.                      ³
		//³ aEnvCus[n][10] := Quantidade do item da Nota Fiscal                  ³
		//³ aEnvCus[n][11] := 0.00                                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		
		If SD2->D2_TIPO == "D"
			aEnvCus := {SD2->D2_TOTAL + nValDesp + nValFrete,;
			SD2->D2_VALIPI,;
			SD2->D2_VALICM,;
			SF4->F4_CREDIPI,;
			SF4->F4_CREDICM,;
			GDFieldGet( "D2_NFORI"   ,nX),;
			GDFieldGet( "D2_SERIORI" ,nX),;
			SD2->D2_COD,;
			SD2->D2_LOCAL,;
			SD2->D2_QUANT,;
			IIf(SF4->F4_IPI=='R',SD1->D1_IPI,0),;
			SF4->F4_CREDST,;
			SD1->D1_ICMSRET,;
			SF4->F4_PISCOF,;
			SF4->F4_PISCRED,;
			0 }
		Else
			aEnvCus:={nTotNot + nValFrete,;
			SD2->D2_VALIPI,;
			SD2->D2_VALICM,;
			SF4->F4_CREDIPI,;
			SF4->F4_CREDICM,;
			SD2->D2_NFORI,;
			SD2->D2_SERIORI,;
			SD2->D2_COD,;
			SD2->D2_LOCAL,;
			SD2->D2_QUANT,;
			IIf(SF4->F4_IPI =='R', SD1->D1_IPI, 0),;
			SF4->F4_CREDST,;
			aIcmsSol[2],;
			SF4->F4_PISCOF,;
			SF4->F4_PISCRED,;
			0 }
		EndIf
		
		aCM := PegaCMAtu(SD2->D2_COD,SD2->D2_LOCAL,SD2->D2_TIPO,aEnvCus,(SD2->D2_TIPO=="D"))
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Grava o custo da nota fiscal de entrada	  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aCusto := GravaCusD2(aCM,SD2->D2_TIPO)
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza o saldo final (VFIM) com os dados do SD2 	 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		B2AtuComD2(aCusto,,,.F.)
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Efetua totaliza‡äes do cabe‡alho da NF                	     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	nValDesc := nValDesc + SD2->D2_DESCON
	nTotMerc := nTotMerc + SD2->D2_TOTAL
	nTotIcm  := nTotIcm  + SD2->D2_VALICM
	nTotIpi  := nTotIpi  + SD2->D2_VALIPI
	nTotNot  := nTotNot  + SD2->D2_TOTAL

	Reclock("SD2", .F.)	                     
		                     
	SD2->D2_BRICMS  := aIcmsSol[1]
	SD2->D2_ICMSRET := aIcmsSol[2]

	If SD2->( FieldPos( "D2_VALBRUT" ) ) > 0	
		SD2->D2_VALBRUT := SD2->D2_TOTAL + SD2->D2_ICMSRET + SD2->D2_VALIPI
	EndIf
	
	MSUnlock()
	//
	nBsIcmRetF2 += SD2->D2_BRICMS
	nVlIcmRetF2 += SD2->D2_ICMSRET
	If ! SF4->F4_INCSOL == "N"
		nSmIcmRetF2     +=  SD2->D2_ICMSRET
	EndIf
	If SD2->D2_IPI > 0
		If SuperGetMv("MV_IPIBRUT") == "S"
			nBaseIpi += ( SD2->D2_TOTAL + SD2->D2_DESCON - SD2->D2_VALIPI )
		Else
			nBaseIpi += SD2->D2_TOTAL
		EndIf
	EndIf
	nBaseIcm := nBaseIcm + SD2->D2_BASEICM
	If SF4->F4_ISS == "S"
	                      
		If SB1->B1_ALIQISS > 0
			nAliqISS    := SB1->B1_ALIQISS
		Else                                                                                     
			nAliqISS    := SuperGetMv("MV_ALIQISS")
		EndIf                                      
		
		nBaseISS    := SD2->D2_TOTAL
		nValISS     := nBaseISS * IIf( nAliqISS > 0, ( nAliqISS / 100 ), 0 )
	
		nTotBaseIss += nBaseISS
		nTotValIss  += nValISS
		
		If nAliqISS > 0

			RecLock("SD2", .F.)
			SD2->D2_ALIQISS	:= nAliqISS
			SD2->D2_BASEISS	:= nBaseISS
			SD2->D2_VALISS 	:= nValISS
			MsUnLock()

		EndIf
		
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se o item foi gerado a partir de um documento de entrada original³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	cNfOri   := GDFieldGet( "D2_NFORI"   ,nX)
	cSeriOri := GDFieldGet( "D2_SERIORI" ,nX)
	cItemOri := GDFieldGet( "D2_ITEMORI" ,nX)
	
	If !EMPTY( cNfOri ) .AND. cTipo == "D" //Documento de Devolucao
		SD1->( DbSetOrder(1) )
		If SD1->( DbSeek( xFilial( "SD1" ) + cNfOri + cSeriOri + LEFT( ca920cli, nTamA1_COD ) + cLoja + cProduto + cItemOri ) )
			SD1->( RecLock( "SD1", .F. ) )
			SD1->D1_QTDEDEV := SD1->D1_QTDEDEV + GDFieldGet( "D2_QUANT" ,nX)
			SD1->D1_VALDEV  := SD1->D1_VALDEV  + (GDFieldGet( "D2_TOTAL" ,nX) - GDFieldGet( "D2_DESCON" ,nX))
			SD1->( MsUnlock() )
		EndIf
	EndIf
	If lFisLivro
		If !MaFisFound("NF")
				MaFisIni(	cCodCli     	,;				//01 Codigo do cliente
							cLoja	    	,;				//02 Loja 
							IIf(cTipo $'DB',"F","C"),;		//03 C:Cliente , F:Fornecedor 
							cTipo			,;				//04 Tipo da Nota Fiscal 
							Nil				,;				//05 Tipo de Cliente/Fornecedor 
							Nil				,;				//06 Relacao de Impostos que suportados no arquivo 
							Nil				,;				//07 Tipo de complemento
							.F.				,;				//08 Permite Incluir Impostos no Rodape .T./.F.
							"SB1"			,;				//09 Alias do Cadastro de Produtos - ("SBI" P/ Front Loja) 
							"LOJR130" ) 					//10 Nome da rotina que esta utilizando a funcao
		EndIf
		If MaFisFound("NF")
			MaFisIniLoad(	nX				,;
							{SD2->D2_COD	,;	//IT_PRODUTO
							SD2->D2_TES		,;	//IT_TES
							SB1->B1_CODISS	,; 	//IT_CODISS
							SD2->D2_QUANT	,;	//IT_QUANT
							SD2->D2_DOC		,;	//IT_NFORI
							SD2->D2_SERIE  	,;	//IT_SERIORI
							SB1->(RecNo())	,;	//IT_RECNOSB1
							SF4->(RecNo())	,;	//IT_RECNOSF4
							0  }) 				//IT_RECORI
			MaFisRecal("",nX)                          
						
			MaFisLoad("IT_ALIQICM"	,SD2->D2_PICM	,nX)
			MaFisLoad("IT_BASEICM"	,SD2->D2_BASEICM,nX) 
			MaFisLoad("IT_VALICM"	,SD2->D2_VALICM,nX)
			MaFisLoad("IT_BASEIPI"	,SD2->D2_BASEIPI,nX)
			MaFisLoad("IT_VALIPI"	,SD2->D2_VALIPI,nX) 		
			MaFisLoad("IT_VALMERC"	,SD2->D2_PRUNIT * SD2->D2_QUANT	,nX) 
			MaFisLoad("IT_PRCUNI"	,SD2->D2_PRCVEN	,nX)        
			MaFisLoad("IT_DESCONTO"	,SD2->D2_DESC	,nX)
			MaFisLoad("IT_FRETE"	,SD2->D2_VALFRE	,nX)			
			MaFisLoad("IT_SEGURO"	,SD2->D2_SEGURO ,nX)
			MaFisLoad("IT_DESPESA"	,SD2->D2_DESPESA,nX)			
			
			MaFisEndLoad(nX,2)	 					
		EndIf  
	EndIf						
	nX++
End

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Chama a fun‡Æo de grava‡Æo do SF2 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nItens > 0 
	nNotaAtu ++
	If cFormul == "S"
		cSerie   := aNotas[nNotaAtu][1]
		cNumNota := aNotas[nNotaAtu][2]
		cNumNota := PadR( cNumNota , nTamF2_DOC )		
	Endif
	FechaSF2(	lFirst, 		cTipo, 			@cSerie, 		dDEmissao,;
				cLoja,			ca920Cli,		nValDesc,		dDataBase,;
				nTotMerc, 		nTotIcm,		nTotIpi,		nTotNot,;
				nValFrete,		nBaseIpi,		nBaseIcm, 		nValDesp,;
				aSolid,			nTotBaseIss,	nTotValIss, 	cEspecie,;
				@lEntrou, 		@cNumNota, 		.T., 			nSmIcmRetF2,;
				nVlIcmRetF2, 	nBsIcmRetF2, 	aNotas, 		nNotaAtu )
				
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz a gravacao do F2_NEXTDOC quando o parametro MV_TPNRNFS == "3"    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cMV_TPNRNFS == "3" .AND. Len( aNotas ) > 1
		nRecnoSF2 := SF2->( Recno() )
		SF2->( DbSetOrder( 1 ) )
	    For nX := 1 to Len( aNotas ) - 1
			If DbSeek( xFilial("SF2") + aNotas[nX][2] + aNotas[nX][1] )
				RecLock( "SF2", .F. )
				SF2->F2_NEXTDOC := aNotas[ nX + 1 ][2]
				SF2->( MsUnlock() )
			Endif
		Next nX 
		SF2->( dbGoTo ( nRecnoSF2 ) )
	Endif
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Chama a fun‡Æo de grava‡ao do SF3 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lFisLivro 
		MaFisAtuSF3(1,"S",SF2->(Recno()),"SF2",NIL,NIL,"LOJA920")
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Chama a funcao fiscal de finalização de Calculo ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If MaFisFound()
		MaFisEnd()
	EndIf
EndIf

If lNotaTxt
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Este Ponto vai transmitir o Numero da Nota Fiscal Ativa para³
	//³ RdMake KEXA090 (Transf. Auto Export. - KRMS).               ³
	//³ Nao eh necessario tratar o retorno no ponto de entrada pois ³
	//³ neste ponto a rotina jah gravou NFE e ela nao sera deletada.³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ExecBlock( "NOTATXT", .F., .F., { cNumNota } )
EndIf

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³LJ920cTipo³ Autor ³ Vendas Clientes		³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Critica os tipos de notas fiscais de Saida                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ LJ920cTipo(ExpC1,ExpO2,ExpO3,ExpC4)                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Tipo valido de documento                           ³±±
±±³          ³ ExpO2 = Objeto fornecedor                                  ³±±
±±³          ³ ExpO3 = Objeto Cliente                                     ³±±
±±³          ³ ExpC4 = Tipo valido de documento anterior                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MatA920                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

FUNCTION LJ920cTipo(cTipo,oCliFor,oCliente,cTipAnt)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica os tipos validos (<N>ota fiscal / Ticket / Beneficiamento / 	³
//³			<C>omplememto de preco/i<P>i/<I>cm./ <D>evolucao de Compras 	³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If !(cTipo $ "NCPIDB")
	HELP(" ",1,"F2_TIPO")
	Return .F.
Endif

If cTipo $ "DB"
	cF3:='SA2'
	cCliente:=STR0001 //"Fornec."
Else
	cF3:='SA1'
	cCliente:=STR0002 //"Cliente"
Endif
If cTipAnt <> cTipo
	cA920Cli:=Space(TamSx3("A1_COD")[1])
	cLoja:=Space(2)
Endif
oCliente:SetText(cCliente)           

If cF3=="SA1"                           
	oCliFor:cF3:="CLI"
Else                                         
	oCliFor:cF3:="FOR"
Endif                 

oCliFor:Refresh()
Sysrefresh()

Return .T.


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³lj920Valid³ Autor ³ Vendas Clientes		³ Data ³ 11/12/93 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Valida a Digitacao do numero da Nota Fiscal                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³LOJA920    												  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function FechaSF2(	lFirst, 		cTipo, 			cSerie, 	dDEmissao,;
							cLoja, 			ca920Cli,   	nValDesc, 	dDataBase,;
							nTotMerc, 		nTotIcm, 		nTotIpi, 	nTotNot,;
                         	nValFrete, 		nBaseIpi, 		nBaseIcm, 	nValDesp,;
                         	aSolid, 		nTotBaseIss, 	nTotValIss, cEspecie,;
                         	lEntrou,   		cNumNota, 		lFim,		nSmIcmRetF2,; 
                         	nVlIcmRetF2,	nBsIcmRetF2, 	aNotas, 	nNotaAtu )


Local nRegSF2 		:= 0	                   	 	// Recno
Local nC      		:= 0                        	// Auxiliar
Local cMV_TPNRNFS 	:= LjTpNrNFS()					// Retorno do parametro MV_TPNRNFS, utilizado pela Sx5NumNota() de onde serah controlado o numero da NF  1=SX5  2=SXE/SXF  3=SD9
Local nTotReduIcm	:= 0							// Abatimento da reducao de ICMS no total da NF 
Local nTamA1_COD	:= TAMSX3("A1_COD")[1]     		// Tamanho do campo A1_COD
Local nValIpiF2     := 0                            // Recebe valor do campo F2_VALIPI

lEntrou := .T.

If lFim == Nil
	lFim    := .F.
EndIf

            
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se existe reducao de ICMS para fazer abatimento do total da nota³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nTotReduIcm := Lj920Deduc()

Reclock( "SF2", .F.)
Replace F2_TIPO    With cTipo                                    ,;
        F2_DOC	   With cNumNota                                 ,;
        F2_SERIE   With cSerie                                   ,;
        F2_EMISSAO With dDEmissao                                ,;
        F2_LOJA    With cLoja                                    ,;
        F2_CLIENTE With LEFT( ca920cli, nTamA1_COD )             ,;
        F2_EST     With IIF(cTipo$"DB",SA2->A2_EST,SA1->A1_EST)  ,;
        F2_TIPOCLI With IIF(cTipo$"DB",SA2->A2_TIPO,SA1->A1_TIPO),;
        F2_DESCONT With nValDesc                                 ,;
        F2_VALMERC With nTotMerc + nValDesc 		             ,;
        F2_VALICM  With nTotIcm                                  ,;
        F2_VALIPI  With nTotIpi                                  ,;
        F2_FRETE   With nValFrete                                ,;
        F2_FILIAL  With xFilial("SF2")                           ,;
        F2_NFORI   With ""                                       ,;
        F2_ESPECIE With cEspecie                                 ,;
	    F2_HORA    With LEFT(Time(), 5)							 ,;
	    F2_TRANSP  With cTransp

If cTipo != "P"
	nValIpiF2  := SF2->F2_VALIPI 
EndIf

If cPaisLoc == "BRA"
	Replace	F2_BASEIPI With nBaseIpi   ,;
            F2_BASEICM With nBaseIcm   ,;
            F2_DESPESA With nValDesp   ,;
            F2_VALBRUT With SF2->F2_VALMERC - nValDesc + SF2->F2_FRETE + nValDesp + nValIpiF2 + IIf(lIcmsRet,nSmIcmRetF2,0) - nTotReduIcm,; 
			F2_VALFAT  With SF2->F2_VALMERC - nValDesc + nValIpiF2 + IIf(lIcmsRet,nSmIcmRetF2,0) - nTotReduIcm,;
            F2_ICMSRET With nVlIcmRetF2 ,;      
		    F2_BRICMS  With nBsIcmRetF2 ,;      
			F2_BASEISS With nTotBaseISS,;
            F2_VALISS  With nTotValISS
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Grava os Impostos Gerados Atrav‚s da Amarra‡Æo TesXImpostos ³
	//³ em SF2                                                      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Replace F2_VALBRUT With nTotNot+nValFrete+nValDesp+aSolid[2]+nTotIPI,;
			F2_VALFAT  With nTotMerc+nTotIpi+aSolid[2]
	For nC := 1 To Len( aImpVarSF2 )

		If aImpVarSF2[ nC ][3] > 0.00
     		SF2->( FieldPut( FieldPos( aImpVarSF2[ nC ][2] ),aImpVarSF2[ nC ][3] ) )
		End

	Next nC
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Nao grava o F2_NEXTDOC quando o MV_TPNRNSF for igual a "3" porque o  ³
//³ numero da nota so' existe no meio da transacao, isto e', so' qdo o   ³
//³ proximo SF2 for gravado.                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !lFim .AND. cMV_TPNRNFS <> "3"

	nRegSF2 := RecNo()
 	If cFormul == "S"
		cNumNota := aNotas[nNotaAtu+1][2]
	Else
      	cNumNota := StrZero(Val(cNumNota)+1, Len(AllTrim(cNumNota)),0)
	EndIf
	cNumNota := PadR( cNumNota , TamSx3("F2_DOC")[1] )

	DBSelectArea("SF2")
	dbGoTo(nRegSf2)
	SF2->F2_NEXTDOC := cNumNota

EndIf
MSUnlock()             
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Adicionado o comando FKCommit(), pois estava ocorrendo        ³
//³problema com a integridade referencial ligada.				 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SF2->(FKCommit())

Return Nil      



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³Lj920Deduc³ Autor ³ Vendas Clientes		³ Data ³ 06/03/06 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Calcula o valor da deducao do icms para abater no Tot da NF³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Lj920Deduc(ExpA1)							              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = Array de posicoes na tela                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³LOJA920X                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Lj920Deduc()
Local aArea       	:= GetArea() 			//Salva area de trabalho
Local nPosTes     	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_TES" })		//Posicao da TES
Local nPosTotal   	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_TOTAL" })		//Posicao do Total
Local nPosValIpi  	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_VALIPI" })  	//Posicao do valor do IPI
Local nPosPicm    	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_PICM" })		//Posicao do % de ICMS
Local nPosValIcm  	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_VALICM" })   	//Posicao do Valor do ICMS
Local nPosValDes	:= aScan(aHeader, { |x| AllTrim(x[02]) == "D2_DESCON" })  	//Posicao do Valor do Desconto
Local nTotIcmsRed	:= 0					//Total de ICMS com Reducao de Aliquota
Local nTotIcms		:= 0					//Total de ICMS sem Reducao de aliquota
Local nValIcms 		:= 0					//Valor do ICMS sem reducao de aliquota
Local nX			:= 0 					//Contador			
Local nPerIcm    	:= 0					//% do ICMS
Local nBase       	:= 0					//Base de Calculo sem Reducao de ICMS
Local nDif		  	:= 0	              	//Arredondamento
Local nTotDif		:= 0					//Diferenca de ICMS que deve ser abatido do total da nota
            
If cPaisLoc == "BRA"
	
	For nX :=1 to Len(aCols)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se o item nao esta deletado no aCols.³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !aCols[nX][Len(aCols[nX])]
	                                           
			nTotIcms	:= 0
			nTotIcmsRed := 0
			nBase		:= 0
			nPerIcm		:= 0
			
			DBSelectArea( "SF4" )    
			DbSetOrder(1)
			DbSeek( xFilial()+aCols[nX][nPosTes])
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se a TES calcula reducao de icms                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If SF4->F4_AGREG = "D" .AND. SF4->F4_BASEICM > 0
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Base sem reducao de ICMS                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nBase := aCols[nX][nPosTotal] - aCols[nX][nPosValDes]
				
				If SF4->F4_INCIDE == "S"
				
					If nPosValIpi >0
						nBase += aCOLS[nX][nPosValIpi]
					EndIf                                                   
					
				Endif
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Aplica o % de ICMS sobre a base sem a reducao³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nPerIcm := aCols[n][nPosPicm] 
				
				If nPerIcm > 0
					nValIcms := NoRound(nBase * nPerRet / 100,2	,@nDif)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Tratamento para o arredondamento do valor do ICMS Bops 120282
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If Abs(nDif) >= 0.005
						nValIcms += Round(nDif,2)
					EndIf
				Else
					nValIcms := 0
				EndIf
				nTotIcms	= 	nValIcms
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Total de ICMS com reducao        ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nTotIcmsRed =  aCols[n][nPosValIcm]
	
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Diferencao que devera ser abatida do total da Nota³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				nTotDif		+= nTotIcms - nTotIcmsRed	          
					
			EndIf	
		EndIf
	Next nX
EndIf

RestArea( aArea )

Return (nTotDif)


