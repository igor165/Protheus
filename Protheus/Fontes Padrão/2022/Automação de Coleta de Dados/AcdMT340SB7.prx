#include "rwmake.ch" 
#include "Protheus.ch"
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Descri‡…o ³ PLANO DE MELHORIA CONTINUA                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ITEM PMC  ³ Responsavel              ³ Data         |BOPS:             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³      01  ³Flavio Luiz Vicco         ³01/08/2006    |00000102392       ³±±
±±³      02  ³Erike Yuri da Silva       ³11/01/2006    |00000090712       ³±±
±±³      03  ³                          ³              |                  ³±±
±±³      04  ³Erike Yuri da Silva       ³11/01/2006    |00000090712       ³±±
±±³      05  ³                          ³              |                  ³±±
±±³      06  ³                          ³              |                  ³±±
±±³      07  ³                          ³              |                  ³±±
±±³      08  ³                          ³              |                  ³±±
±±³      09  ³                          ³              |                  ³±±
±±³      10  ³Flavio Luiz Vicco         ³01/08/2006    |00000102392       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ CBMT340SB7 ³ Autor ³ Erike Yuri da Silva                 ³ Data ³ 10/02/05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Valida se executa ou nao a rotina de acerto, quando nao existir            ³±±
±±³          ³ divergencias dos produtos do mestre de inventario.          				  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ SIGAACD                                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function CBMT340SB7(lTodosEmp,lCtrWMS,dDtEnv,lAltCBA,nTotQuant,cDocIni,cDocFim,lPosSB7)
Local nSaldo 	:= 0
Local lRet	 	:= .T.
Local aArea	 	:= GetArea()
Local aSB2	 	:= SB2->(GetArea())
Local lWmsNew   := SuperGetMv("MV_WMSNEW",.F.,.F.)
Local lUniCPO   := SB7->(ColumnPos("B7_IDUNIT")) > 0
Local oSaldoWMS := IIF(lWmsNew,WMSDTCEstoqueEndereco():New(),Nil)
Local cNumLote  := SB7->B7_NUMLOTE
Local cLoteCtl  := SB7->B7_LOTECTL
Local cProduto  := SB7->B7_COD
Local cLocal    := SB7->B7_LOCAL
Local cLocaliz  := SB7->B7_LOCALIZ
Local cNumSeri  := SB7->B7_NUMSERI
Local dDtEmiss  := SB7->B7_DATA
Local cCodUnit  := SB7->B7_IDUNIT
Local nRecSB7   := SB7->(Recno())
Local bSeek     := Nil

DEFAULT lTodosEmp	:= .F.
DEFAULT lCtrWMS		:= .F.
DEFAULT lAltCBA		:= .T.
DEFAULT nTotQuant   := SB7->B7_QUANT	// Caso passe pela funcao A340INVPRO, esta variavel ira guardar a quantidade total (B7_QUANT agrupada) dos registros de inventario retornados pela query da A340INVPRO (MATA340)
										// para ser utilizada na comparacao com o saldo em estoque, pois a comparacao deve ser feita com a quantidade agrupada e nao com um registro SB7 isolado
DEFAULT cDocIni     := ""
DEFAULT cDocFim     := Replicate("Z",TamSx3("B7_DOC")[1])
DEFAULT lPosSB7     := .T.

If SuperGetMV("MV_CBPE012",.F.,.F.)
	// Nao faz nada se este documento ja foi processado
	If SB7->B7_STATUS=="2"
		lRet := .F.
	EndIf

	If lRet
		If Localiza(SB7->B7_COD,.T.,,.F.)
			If !(lWmsNew .And. lCtrWMS)

				If FindFunction("A340SldSBF")
					nSaldo := SB7->(A340SldSBF(SB7->B7_LOCAL,SB7->B7_LOCALIZ,SB7->B7_COD,SB7->B7_NUMSERI,SB7->B7_LOTECTL,SB7->B7_NUMLOTE))
				Else
					nSaldo := SB7->(SaldoSBF(SB7->B7_LOCAL,SB7->B7_LOCALIZ,SB7->B7_COD,SB7->B7_NUMSERI,SB7->B7_LOTECTL,SB7->B7_NUMLOTE))
				EndIf

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Verifica se deve considerar somente os empenhos de todos ³
				//³os empenhos da tabela de "Requisicoes empenhadas" (SD4). ³
				//³Mesmo tratamento do MATA340                              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lTodosEmp
					nSaldo += SB7->(SaldoSBF(SB7->B7_LOCAL,"",SB7->B7_COD,NIL,NIL,NIL,.T.))
					nSaldo -= SB7->(SldEmpSD4(SB7->B7_COD,SB7->B7_LOCAL))
				EndIf
			ElseIf lCtrWMS
				// Consulta o saldo pelo WMS
				If lUniCPO
					nSaldo := SB7->(oSaldoWMS:CalcEstWms(B7_LOCAL,B7_COD,dDtEnv,B7_LOCALIZ,B7_LOTECTL,B7_NUMLOTE,B7_NUMSERI,2,,B7_IDUNIT))
				Else
					nSaldo := SB7->(oSaldoWMS:CalcEstWms(B7_LOCAL,B7_COD,dDtEnv,B7_LOCALIZ,B7_LOTECTL,B7_NUMLOTE,B7_NUMSERI,2))
				EndIf
			EndIf
		ElseIf Rastro(SB7->B7_COD)
			lRastroSub := Rastro(SB7->B7_COD,"S")
			If FindFunction("A340SldSB8")
				nSaldo := SB7->(A340SldSB8(SB7->B7_COD,SB7->B7_LOCAL,SB7->B7_LOTECTL,IIf(lRastroSub, SB7->B7_NUMLOTE, "")))
			Else
				nSaldo := SB7->(SaldoLote(SB7->B7_COD,SB7->B7_LOCAL,SB7->B7_LOTECTL,IIf(lRastroSub, SB7->B7_NUMLOTE, "")))
			EndIf
		Else
			SB2->(DbSetOrder(1))
			SB2->(DbSeek(xFilial("SB2")+SB7->(SB7->B7_COD+SB7->B7_LOCAL)))
			nSaldo := SaldoSB2(,.F.)
		EndIf
	EndIf 
	
	SB2->(DbSetOrder(1))
	If !SB2->(dbSeek(xFilial("SB2")+SB7->(SB7->B7_COD+SB7->B7_LOCAL)))
		CriaSB2(SB7->B7_COD,SB7->B7_LOCAL)
	EndIf
	SB2->(DbSeek(xFilial("SB2")+SB7->(SB7->B7_COD+SB7->B7_LOCAL)))
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Se o saldo inventario for diferente do saldo em estoque         ³
	//³ permite a continuar a execucao do acerto.                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet .And. QtdComp(nTotQuant) == QtdComp(nSaldo)

		If !lWmsNew
			If Localiza(SB7->B7_COD)
				SBF->(dbSetOrder(1))
				If SBF->(dbSeek(xFilial("SBF")+SB7->(B7_LOCAL+B7_LOCALIZ+B7_COD+B7_NUMSERI)))
					RecLock("SBF",.F.)
					Replace BF_DINVENT With dDtEnv
					MsUnlockAll()
				EndIf
				If SB2->B2_DINVENT < dDtEnv 
					dbSelectArea("SB2")
					RecLock("SB2",.F.)
					Replace B2_DINVENT With dDtEnv
					MsUnlockAll()
				EndIf
			Else
				dbSelectArea("SB2")
				RecLock("SB2",.F.)
				Replace B2_DINVENT With dDtEnv
				MsUnlockAll()
			EndIf
		EndIf 

		IF SB5->(DbSeek(xFilial("SB5")+SB7->B7_COD))
			RecLock('SB5',.F.)
			SB5->B5_DTINV := dDataBase
			SB5->(MsUnLock())
		EndIF

		lRet := .F.

		// O laco abaixo foi feito para atualizar o status de todos os registros de inventario tratados que foram agrupados pela query da funcao A340INVPRO (MATA340) e nao somente do registro posicionado
		// pois caso fique registros em aberto, ao executar novamente o MATA340 este registro que ja foi processado sera considerado novamente e ira distorcer o saldo em estoque
		If !lPosSB7
			bSeek := {||SB7->(Recno()) == nRecSB7}
		ElseIf lUniCPO .And. lWmsNew
			SB7->(DbSetOrder(2))//B7_FILIAL+B7_NUMLOTE+B7_LOTECTL+B7_COD+B7_LOCAL+B7_LOCALIZ+B7_NUMSERI+B7_IDUNIT
			SB7->(DbSeek(xFilial("SB7")+cNumLote+cLoteCtl+cProduto+cLocal+cLocaliz+cNumSeri+cCodUnit+Dtos(dDtEmiss)))
			bSeek := {||SB7->(xFilial('SB7')+B7_NUMLOTE+B7_LOTECTL+B7_COD+B7_LOCAL+B7_LOCALIZ+B7_NUMSERI+B7_IDUNIT+Dtos(B7_DATA)) == xFilial('SB7')+cNumLote+cLoteCtl+cProduto+cLocal+cLocaliz+cNumSeri+cCodUnit+Dtos(dDtEmiss)}
		Else
			SB7->(DbSetOrder(1))
			SB7->(DbSeek(xFilial("SB7")+Dtos(dDtEmiss)+cProduto+cLocal+cLocaliz+cNumSeri+cLoteCtl+cNumLote))
			bSeek := {||SB7->(xFilial('SB7')+Dtos(B7_DATA)+B7_COD+B7_LOCAL+B7_LOCALIZ+B7_NUMSERI+B7_LOTECTL+B7_NUMLOTE) == xFilial('SB7')+Dtos(dDtEmiss)+cProduto+cLocal+cLocaliz+cNumSeri+cLoteCtl+cNumLote}
		EndIf

		While Eval(bSeek)

			If !(SB7->B7_DOC >= cDocIni .AND. SB7->B7_DOC <= cDocFim)
			   SB7->(DbSkip())
			   Loop
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Atualizacao de status e desbloqueios                          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			//Gravar o Status no SB7
			RecLock('SB7',.f.)
			SB7->B7_STATUS := '2'
			SB7->(MsUnlock())

			If lAltCBA
				//Gravar o Status no Mestre
				dbSelectArea("CBA")
				CBA->(dbSetOrder(1))
				If CBA->(dbSeek(xFilial("CBA")+SB7->B7_DOC)) .and. CBA->CBA_STATUS # '5'
					RecLock('CBA',.f.)
					CBA->CBA_STATUS := '5'
					CBA->(MsUnlock())
				EndIf
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Verifica se as etiquetas devem ser atualizadas ou nao.       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If	UsaCB0("01") .And. CBA->(Found())
				CBAtuCB0()
			EndIf

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Esta funcao ira desbloquer o produto ou endereco              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			CBUnBlqInv(SB7->B7_DOC,SB7->B7_COD)

			SB7->(DbSkip())
		EndDo

	EndIf
EndIf
RestArea(aSB2)
RestArea(aArea)
Return lRet
