#INCLUDE "loca018.ch" 
/*/{PROTHEUS.DOC} LOCA018.PRW 
ITUP BUSINESS - TOTVS RENTAL
IDENTIFICA SE O PROCESSO DE MEDICAO SERÁ PADRÃO, OU ESPECÍFICO DE LOCAÇÃO.
SE O RETORNO FOR L = LOCAÇÃO, EXISTE UMA SÉRIE DE TRATATIVAS ESPECÍFICAS
SE O RETORNO FOR P = PADRÃO, MANTEMOS O PADRÃO DO PROCESSO DE MEDIÇÃO.
@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

FUNCTION LOCA018()
LOCAL _APERGS	:= {}
LOCAL _ARET		:= {}
LOCAL _CTIPOX	:= "" 
LOCAL LINCLUI	:= PARAMIXB[1]

IF LINCLUI
	AADD( _APERGS ,{2,STR0001,1 ,{STR0002 , STR0003 },80,"",.T.}) //"TIPO DA MEDIÇÃO : "###"LOCAÇÃO"###"SERVIÇO"
	_ARET   := {}       
	
	WHILE PARAMBOX(_APERGS ,STR0004,_ARET,,,,,,,,.F.)  //"TIPO DA MEDIÇÃO"
		IF LEN(_ARET) == 0
			LOOP
		ENDIF        
		IF !EMPTY(_ARET[1])
			_CTIPOX := IF(VALTYPE(_ARET[1])=="N","L",IF(_ARET[1]==STR0002,"L","P")) //"LOCAÇÃO"
		ENDIF 
		EXIT
	ENDDO
	IF EMPTY(_CTIPOX)
		RETURN ""
	ENDIF
ELSE
	FQ5->(DBORDERNICKNAME("ITUPDTQ00L"))
	IF FQ5->(DBSEEK(XFILIAL("FQ5")+FPN->FPN_AS))
		FP0->(DBSETORDER(1))
		IF FP0->(DBSEEK(XFILIAL("FP0")+FQ5->FQ5_SOT))
			IF FP0->FP0_TIPOSE == "L"
				_CTIPOX := "L"
			ELSE
				_CTIPOX := "P"
			ENDIF
		ELSE
			_CTIPOX := ""
		ENDIF
	ELSE
		_CTIPOX := ""
	ENDIF
ENDIF
RETURN _CTIPOX

//--------------------------------------------------------------------------------------
/*/{PROTHEUS.DOC} ITVALOS() 
ROTINA UTILIZADA NA VALIDACAO DO CAMPO FPN_XOS
A OS DEVE PERTENCER À AS EM QUESTÃO E DEVE SER DO TIPO DEFINIDO NO PARAMETRO MV_LOCX027 MV_LOCX026 
@AUTHOR FRANK ZWARG FUGA
@SINCE 08/08/2019
@VERSION P12
/*/
//--------------------------------------------------------------------------------------

FUNCTION LOCA01801(_COS, CAS, _CTIPO)
LOCAL _LRETORNO := .T.
LOCAL _CERRO	:= ""
LOCAL _AAREA	:= GETAREA()
LOCAL _NCONTAX	:= 0

// _CTIPO == "S" SAÍDA
// _CTIPO == "E" ENTRADA

IF !EMPTY(_COSENTRA) //.OR. !EMPTY(_COSSAIDA)
	_LAUTOMA := .T.
ELSE
	_LAUTOMA := .F.
ENDIF

IF EMPTY(_COS)
	RESTAREA(_AAREA)
	RETURN .T.
ENDIF

STJ->(DBSETORDER(1))
IF STJ->(DBSEEK(XFILIAL("STJ")+_COS))
	IF STJ->TJ_XAS <> CAS
		_LRETORNO := .F.
		_CERRO := STR0005 //"A (AS) DA ORDEM DE SERVIÇO NÃO PERTENCE À MEDIÇÃO."
	ELSE
		IF !ALLTRIM(STJ->TJ_SERVICO) $ GETMV("MV_LOCX027") .AND. _CTIPO == "S" //!ALLTRIM(STJ->TJ_SERVICO) $ GETMV("MV_LOCX026")
			_LRETORNO := .F.
			_CERRO    := STR0006 //"O TIPO DO SERVIÇO NÃO PERTENCE A UMA INSTALAÇÃO."
		ENDIF
		IF !ALLTRIM(STJ->TJ_SERVICO) $ GETMV("MV_LOCX026") .AND. _CTIPO == "E" 
			_LRETORNO := .F.
			_CERRO    := STR0007 //"O TIPO DO SERVIÇO NÃO PERTENCE A UMA DESINSTALAÇÃO."
		ENDIF
		IF _LRETORNO
			IF STJ->TJ_SITUACA <> "L"
				_LRETORNO := .F.
				_CERRO	  := STR0008 //"A SITUAÇÃO DA OS DEVE ESTAR COMO LIBERADA."
			ENDIF
		ENDIF
	ENDIF
ELSE
	_LRETORNO := .F.
	_CERRO := STR0009 //"OS NÃO LOCALIZADA."
ENDIF


IF !_LRETORNO
	MSGALERT(_CERRO,STR0010) //"ATENÇÃO !"
ELSE

	// ATUALIZAR O HORIMETRO ANTERIOR COM A OS DE INSTALACAO
	IF ALLTRIM(STJ->TJ_SERVICO) $ GETMV("MV_LOCX027")
		_NCONANT := STJ->TJ_POSCONT
	ENDIF 
	// ATUALIZAR O HORIMETRO ATUAL COM A OS DE DESINSTALACAO
	IF ALLTRIM(STJ->TJ_SERVICO) $ GETMV("MV_LOCX026")
		_NPOSCONT := STJ->TJ_POSCONT
		_NINFORMA := _NPOSCONT
	ENDIF
ENDIF

RESTAREA(_AAREA)
RETURN _LRETORNO



