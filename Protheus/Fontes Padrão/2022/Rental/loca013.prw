#INCLUDE "loca013.ch" 
/*/{PROTHEUS.DOC} LOCA013.PRW
ITUP BUSINESS - TOTVS RENTAL
GERACAO DE CONTRATOS
@TYPE FUNCTION
@AUTHOR FRANK ZWARG FUGA
@SINCE 03/12/2020
@VERSION P12
@HISTORY 03/12/2020, FRANK ZWARG FUGA, FONTE PRODUTIZADO.
/*/

#INCLUDE "TOTVS.CH"
#INCLUDE "TOPCONN.CH"
#INCLUDE "TBICONN.CH"

FUNCTION LOCA013(_lAviso)
LOCAL   AAREAOCR  := GETAREA()
LOCAL   _LCONVSUS := SUPERGETMV("MV_LOCX205",.F.,.T.)		// CONVERSAO DE PROSPECT PARA CLIENTE
Local   _lPassa 

PRIVATE LVERZBX   := GETMV("MV_LOCX097",,.f.) 					// HABILITA CONTROLE DE MINUTA
PRIVATE AASNOVA   := {}
PRIVATE AASREV	  := {}
PRIVATE ALINALT   := {}
PRIVATE _AREGS	  := {}

PUBLIC  _LGERAR   := .T.

Default _lAviso   := .T.

Private _lMens    := _lAviso

MV_LOCX020 := GETMV("MV_LOCX020")

If Type("lLocAuto") == "L" .And. ValType(cLocErro) == "C"
	If lLocAuto 
		_lPassa := .T.
	Else
		_lPassa := .F.
	EndIF
Else
	_lPassa := .F.
EndIF

IF !_LCONVSUS
	IF EMPTY(FP0->FP0_CLI) .AND. !EMPTY(FP0->FP0_PROSPE)
		//Ferramenta Migrador de Contratos
		If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
			cLocErro := STR0001 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0003+CRLF
		Else
			MSGALERT(STR0001 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0003 , STR0004) //"É NECESSÁRIO CONVERTER O PROSPECT EM CLIENTE E ATUALIZAR O "###"PROJETO"###", PARA A GERAÇÃO DO CONTRATO!"###"GPO - GRCONTR.PRW"
		EndIf
		RESTAREA(AAREAOCR)
		RETURN NIL
	ENDIF
ENDIF


IF EXISTBLOCK("CLIBLOQ") .AND. (EMPTY(FP0->FP0_PROSPE) .OR. !EMPTY(FP0->FP0_CLI))
	//IF U_CLIBLOQ( FP0->FP0_CLI, FP0->FP0_LOJA, .T. /*EXIBE MSG?*/)
	If EXECBLOCK("CLIBLOQ" , .T. , .T. , {FP0->FP0_CLI, FP0->FP0_LOJA, .T.}) 
		RESTAREA(AAREAOCR)
		RETURN NIL
	ENDIF
ENDIF

PROCESSA({|| LOCA01301()})

RESTAREA(AAREAOCR)

_LGERAR := .F.

RETURN



// ======================================================================= \\
FUNCTION LOCA01301() 		// --> GERA CONTRATO
// ======================================================================= \\

LOCAL NVERZBX , AVERZBX , AERROSZBX := {}
LOCAL NALIISS 	:= 0
LOCAL LOK 	    := .F.
LOCAL NALGUMA  	:= 3
LOCAL NRET 		:= 3
LOCAL CREVISA   := ""
LOCAL CNUMSC5   := ""
LOCAL CNATUREZ  := "" 
LOCAL _NDESCVEN := 0
LOCAL CQUERY	:= ""
LOCAL N         := 0 
LOCAL _NU       := 0 
LOCAL _NX       := 0 
LOCAL _NT       := 0 
LOCAL _NI       := 0 
LOCAL _lBloq
Local _GRCANVLD := EXISTBLOCK("GRCANVLD")
Local _MV_LOC207 := SUPERGETMV("MV_LOCX207",,.F.)
Local _MV_LOC278 := supergetmv("MV_LOCX278",,.F.)
Local _MV_LOC154 := GETMV("MV_LOCX154",,"")
Local _MV_LOC155 := GETMV("MV_LOCX155",,"")
Local _MV_LOC250 := GETMV("MV_LOCX250",,"")
Local _lPassa    := .F.
Local _lPassa2   := .F.
Local lLOCX305	:= SuperGetMV("MV_LOCX305",.F.,.T.) //Define se aceita geração de contrato sem equipamento

PRIVATE ODLGOP
PRIVATE _CPRODUTO    := SPACE(15)
PRIVATE _NPRCEQU     := 0
PRIVATE LCLIENTE     := .F.
PRIVATE CCONTATO     := ""
PRIVATE CCONTRATO    := ""
PRIVATE CCRITICA     := ""
PRIVATE	LMSERROAUTO  := .F.
//PRIVATE	LMSHELPAUTO  := .T. - nao pode habilitar do contrário o help() deixa de funcionar
PRIVATE	LMSHELPAUTO  := .F.
PRIVATE LINCBKP      := INCLUI
PRIVATE LALTBKP      := ALTERA
PRIVATE AROTBKP      := AROTINA
PRIVATE CANEXO       := "" 						// AS EM PDF P/ ANEXAR AO E-MAIL.
PRIVATE NQUANT       := 0 						// QUANT. HORAS
PRIVATE NVALOR       := 0 						// VLR TOTAL
PRIVATE CPRODUTO     := GETMV("MV_PRODHOR") 	// VLR TOTAL
PRIVATE CTES         := GETMV("MV_LOCX186") 		// VLR TOTAL
PRIVATE ACAMPOSSC5   := {}
PRIVATE ACAMPOSSC6   := {}
PRIVATE AITPED       := {} 						// ITENS PARA GERACAO DO PEDIDO
PRIVATE NVLRDES      := 0 						// VALOR DO DESCONTO
PRIVATE NQTDHORAS    := 0 						// QTIDADE DE HORAS
PRIVATE NVLRTOTAL    := 0 						// VALOR TOTAL
PRIVATE NVLRHORU     := 0 						// VALOR POR HORA
PRIVATE NHORASDES    := 0 						// HORAS DESCONTADAS
PRIVATE NVALMO       := 0
PRIVATE ADESCON      := {} 						// ARRAY DE DESCONTO
PRIVATE CPRODM       := GETMV("MV_LOCX173")
PRIVATE CPRODD       := GETMV("MV_LOCX170")
PRIVATE CPRODMONT    := GETMV("MV_LOCX174")
PRIVATE CPRODDESMONT := GETMV("MV_LOCX171")
PRIVATE CPRODTELE    := GETMV("MV_LOCX175")
PRIVATE CPRODANC     := GETMV("MV_LOCX169")
PRIVATE CGRPAND		 := SUPERGETMV("MV_LOCX014",.F.,"" ) 
PRIVATE LGERCLI		 := SUPERGETMV("MV_LOCX211",.F.,.F.) 
PRIVATE CPRODT		 := "999900009" 			// GETMV("MV_LOCX265")
PRIVATE CPRODS       := "999900009" 			// AADD(AITPED,{CPRODS,1,NVALMO,NVALMO,FP4->FP4_GUINDA})
PRIVATE LRESENTEML	 := .F. 					// ADICIONA AS PARA IMPRESSÃO EM PDF
PRIVATE _LERRO       := .T.
PRIVATE ALOG         := {}
Private cCadastro    := STR0005 //"Cadastro"

CNATUREZ := GETMV("MV_LOCX117",,"E010201") 

If Type("lLocAuto") == "L" .And. ValType(cLocErro) == "C"
	If lLocAuto 
		_lPassa := .T.
	EndIf
EndIF
If !( Type("lLocAuto") == "L" )
	_lPassa2 := .T.
Else
	If !lLocAuto
		_lPassa2 := .T.
	Else
		_lPassa2 := .F.
	EndIF
EndIF

IF SBM->(FIELDPOS("BM_XACESS")) > 0
	CGRPAND := LOCA00189()
ELSE
	CGRPAND := SUPERGETMV("MV_LOCX014",.F.,"")
ENDIF

// Frank Fuga - converte prospect em cliente 16/02/21
IF EMPTY( FP0->FP0_CLI ) .and. !empty(FP0->FP0_PROSPE)
	If lGerCli .and. msgYesNo(STR0006,STR0007) //"Confirma a conversão do prospect para cliente?"###"Atenção!"
		ACLIENTE := DADOSCLI()           
		LMSHELPAUTO  := .T.
		LJMSGRUN(STR0008,,{||  MSEXECAUTO({|X,Y|MATA030(X,Y)},ACLIENTE,3) } ) //"AGUARDE...INCLUINDO CLIENTE VERIFIQUE DADOS POSTERIORMENTE"
		LMSHELPAUTO  := .F.
		IF LMSERROAUTO
			ROLLBACKSX8()
			MOSTRAERRO()
		ELSE
			CONFIRMSX8()
			RECLOCK("FP0",.F.)
			FP0->FP0_CLI := SA1->A1_COD
			FP0->FP0_LOJA:= SA1->A1_LOJA
			FP0->(MSUNLOCK())
			LCLIENTE := .T.
			WHILE .T.
				NRET := AXALTERA("SA1",SA1->(RECNO()),4,,,,,)
				IF NRET == 1
					EXIT
				ELSE
					MSGINFO(STR0009 , STR0010) //"FAVOR CONFIRMAR A OPERAÇÃO."###"Confirme os dados do cliente."
				ENDIF
			ENDDO
		ENDIF
	EndIF
EndIf


IF EMPTY( FP0->FP0_CLI )
	//Ferramenta Migrador de Contratos
	If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
		cLocErro := STR0011+CRLF
	Else
		MSGALERT(STR0011 , STR0004) //"FAVOR INFORMAR O CLIENTE NA PROPOSTA!"###"GPO - GRCONTR.PRW"
	EndIf
	RETURN .F.
ENDIF 

SA1->(dbSetOrder(1))
IF ! SA1->(MSSEEK(XFILIAL("SA1")+FP0->FP0_CLI+FP0->FP0_LOJA))
	//Ferramenta Migrador de Contratos
	If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
		cLocErro := STR0012+FP0->FP0_CLI+"/"+FP0->FP0_LOJA+STR0013 + CRLF
	Else
		MSGALERT(STR0012+FP0->FP0_CLI+"/"+FP0->FP0_LOJA+STR0013, STR0004) //"CLIENTE "###" NÃO ENCONTRADO, VERIFIQUE!"###"GPO - GRCONTR.PRW"	
	EndIf
	RETURN .F.
ELSE
	LCLIENTE := .T.
ENDIF

IF SA1->A1_MSBLQL == "1"
	//Ferramenta Migrador de Contratos
	If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
		cLocErro := STR0014 + CRLF
	Else
		MSGALERT(STR0014 , STR0004) //"CLIENTE BLOQUEADO"###"GPO - GRCONTR.PRW"
	EndIf
	RETURN .F.
ENDIF

IF MV_LOCX020
	DO CASE
	CASE FP0->FP0_STATUS == "2"
		//Ferramenta Migrador de Contratos
		If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
			cLocErro := STR0015 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0016 + CRLF
		Else
			MSGALERT(STR0015 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0016 , STR0004) //"AGUARDE A APROVAÇÃO DO "###"PROJETO"###" PARA A GERAÇÃO DO CONTRATO!"###"GPO - GRCONTR.PRW"
		EndIf
		RETURN .F.
	CASE FP0->FP0_STATUS == "4"
		//Ferramenta Migrador de Contratos
		If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
			cLocErro := "O " + SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0017 + CRLF
		Else
			MSGALERT("O " + SUPERGETMV("MV_LOCX248",.F.,STR0002) + STR0017 , "GPO - GRCONTR.PRW") //"PROJETO"###" NÃO ESTÁ APROVADO!"	
		EndIf
		RETURN .F.
	ENDCASE
ENDIF

DBSELECTAREA("SU5")
DBSETORDER(1)
DBSEEK(XFILIAL("SU5")+FP0->FP0_CLICON)

IF EXISTBLOCK("GRCTVLD") 											// --> PONTO DE ENTRADA PARA VALIDAR SE PERMITE A GERAÇÃO DE CONTRATO.
	_LGERAR := EXECBLOCK("GRCTVLD",.T.,.T.,{})
	IF !_LGERAR
		RETURN .F.
	ENDIF
ENDIF



PROCREGUA(10)
INCPROC(STR0018  ) //"VERIFICANDO ALOCACAO DOS EQUIPAMENTOS"

// --> CONSULTA A DISPONIBILIDADE DE FROTA
DO CASE
CASE _LGERAR .AND. FP0->FP0_TIPOSE == "E"							// GUINDASTES - EQUIPAMENTOS
	DBSELECTAREA("FP4")
	FP4->(DBSETORDER(1))
	FP4->(DBSEEK(XFILIAL("FP4") + FP0->FP0_PROJET))
	CTPISS := FP4->FP4_TPISS
	WHILE _LGERAR .AND. FP4->(!EOF()) .AND. FP4->FP4_PROJET == FP0->FP0_PROJET
		IF !CHEKOBRA(FP4->FP4_PROJET+FP4->FP4_OBRA) 				// VERIFICAR SE EXISTE OBRA PRA ESSE ZA5, POIS ESTÁ ACONTECE DE DELETAR ZA1 E NÃO ZA5
			FP4->(DBSKIP())
			LOOP
		ENDIF
		
		IF FP4->FP4_TIPOSE $ "M;O" .OR. !EMPTY(FP4->FP4_AS)
			_LGERAR := .T.
		ELSE
			CCONDPAG := FP4->FP4_CONPAG 							// CONDICAO PAGAMENTO
			NPOS := ASCAN(AITPED, {|X| ALLTRIM(X[1]) == FP4->FP4_PRODUT } )
			IF NPOS == 0
				AADD(AITPED , {FP4->FP4_PRODUT , 100 , 1 , 100 , FP4->FP4_GUINDA }) //FP4->FP4_THORAS
			ELSE
				AITPED[NPOS][2] += 1
				AITPED[NPOS][3] := 100
				AITPED[NPOS][4] := 100  * AITPED[NPOS][2]
				AITPED[NPOS][5] := FP4->FP4_GUINDA
			ENDIF
			IF FP4->FP4_VRMOB <> 0 									// PRODUTO MOB
				AADD(AITPED,{CPRODM,1,FP4->FP4_VRMOB,FP4->FP4_VRMOB,FP4->FP4_GUINDA })
			ENDIF
			IF FP4->FP4_VRDES <> 0 									// PRODUTO DESMOB
				AADD(AITPED,{CPRODD,1,FP4->FP4_VRDES,FP4->FP4_VRDES,FP4->FP4_GUINDA})
			ENDIF
			IF FP4->FP4_DESCON == 'S'
				NVLRDES   := FP4->FP4_VALDES 						// DESCONTO QUE VOU LIBERAR TENHO QUE DESCOBRIR ESSE VALOR EM HORAS
				NQTDHORAS := FP4->FP4_THORAS 						// TOTAL QUE VAI PARA O PEDIDO
				NVLRTOTAL := FP4->FP4_VRHOR*FP4->FP4_THORAS 		// TOTAL QUE VAI PARA O PEDIDO
				NVLRHORU  := FP4->FP4_VRHOR 						// VALOR DE UMA HORA
				NHORASDES := NVLRDES/NVLRHORU 						// HORAS DESCONTADAS QUE VOU LIBERAR
				AADD(ADESCON,{FP4->FP4_PRODUT,NVLRDES,NQTDHORAS,NVLRTOTAL,NVLRHORU,NHORASDES,FP4->FP4_GUINDA})
				//LIBERAR O PEDIDO DE ACORDO COM O VALOR DO DESCONTO
			ENDIF
			NALIISS := FP4->FP4_PERISS 								// ALIQUOTA DO ISS
		ENDIF
		
		DBSELECTAREA("FQ5")
		DBSETORDER(9)
		DBSEEK(XFILIAL("FQ5") + FP4->FP4_AS + FP4->FP4_VIAGEM) 		// SE POSICIONA NA DTQ PARA VALIDAR SE A AS ESTÁ CANCELADA. 
		IF FQ5->FQ5_STATUS != "9" 									// VALIDA SE A AS ESTÁ CANCELADA.
			IF LVERZBX .AND. FP0->FP0_TIPOSE=="E" .AND. !EMPTY(FP4->FP4_GUINDA)  //HABILITA CONTROLE DE MINUTA
				AERROSZBX := {}										// GUARDA INCONSISTENCIAS PARA EXIBIR
				FOR _NU := FP4->FP4_DTINI TO FP4->FP4_DTFIM
					AVERZBX := FP4->(LOCA00514("LOCA013",FP4_GUINDA,FP4_GUINDA,/*FP4_DTINI*/ _NU ,/*FP4_DTFIM*/ _NU ,FP4_AS, FP4_HRINI, FP4_HRFIM))  //VERIFICA SE EXISTE ZBX
					IF LEN(AVERZBX) > 0
						FOR NVERZBX:=1 TO LEN(AVERZBX)
							FP4->(AADD(AERROSZBX,{FP4_GUINDA,FP4_AS,FP4_DTINI,FP4_DTFIM,AVERZBX[NVERZBX,2],AVERZBX[NVERZBX,4],AVERZBX[NVERZBX,5],STR0019})) //"MINUTA COM STATUS DIFERENTE DE 1=PREVISTA"
						NEXT
						_LGERAR := .F.
					ENDIF
				NEXT _NU
			ELSE
				IF ! LOCA05917(FP4->FP4_GUINDA, FP4->FP4_AS, DTOS(FP4->FP4_DTINI), DTOS(FP4->FP4_DTFIM),,,FP4->FP4_HRINI, FP4->FP4_HRFIM)	// FUNÇÃO PARA VERIFICAR SE TEM CONFLITO DE DATAS
					_LGERAR := .F.
					IF AVISO(STR0020,STR0021,{STR0022,STR0023}) == 1 //"CONFLITOS ENCONTRADOS"###"DESEJA CONTINUAR ASSIM MESMO?"###"SIM"###"NAO"
						_LGERAR := .T.
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		
		FP4->(DBSKIP())
	ENDDO
		
CASE _LGERAR .AND. FP0->FP0_TIPOSE == "L"							// LOCAÇÃO
	FQ5->(DBSETORDER(1))
	FPA->(DBSETORDER(1))
	ST9->(DBSETORDER(1))
	
	IF FPA->(DBSEEK(XFILIAL("FPA") + FP0->FP0_PROJET))
		WHILE FPA->(!EOF()) .AND. FPA->FPA_PROJET == FP0->FP0_PROJET
			IF ! FQ5->(DBSEEK(XFILIAL("FQ5") + FPA->FPA_VIAGEM)) .OR. EMPTY(ALLTRIM(FPA->FPA_AS))
				If SB1->( MSSEEK(XFILIAL("SB1")+FPA->FPA_PRODUT) )
					IF FPA->FPA_TIPOSE == "L" .AND. ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND)		// !(ALLTRIM(GETADVFVAL("SB1", "B1_GRUPO",XFILIAL("SB1")+FPA->FPA_PRODUT,1,"")) $ ALLTRIM(SUPERGETMV("MV_LOCX014",.F.,"")))
						IF !EMPTY(ALLTRIM(FPA->FPA_NFREM))
							FPA->(DBSKIP())
							LOOP
						ENDIF
						If Empty(FPA->FPA_GRUA)
							If !lLOCX305 // Se não estiver permitido contrato sem equipamento
								//Ferramenta Migrador de Contratos
								If Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
									cLocErro := STR0024 + ALLTRIM(ST9->T9_NOME) + STR0031+CRLF
								Else
									MSGALERT(STR0024 + " não foi informado! " + STR0026 + FPA->FPA_OBRA , STR0004) //"O EQUIPAMENTO NÃO FOI INFORMADO!" OBRA ###"GPO - GRCONTR.PRW"				
								EndIf
								RETURN
							EndIf
						Else
							IF _GRCANVLD 						// --> PONTO DE ENTRADA ANTES DA ALTERAÇÃO DE STATUS DO BEM.
								IF !EXECBLOCK("GRCANVLD",.T.,.T.,{ST9->T9_STATUS,TQY->TQY_STATUS,FPA->FPA_PROJET,"",""})
									FPA->(DBSKIP())
									LOOP
								ENDIF
							ENDIF
							
							DBSELECTAREA("ST9")
							ST9->(DBSETORDER(1))
							ST9->(DBGOTOP())
					IF ST9->(MSSEEK(XFILIAL("ST9") + FPA->FPA_GRUA))
						DBSELECTAREA("TQY")
						TQY->(DBSETORDER(1))
						TQY->(DBGOTOP())
						TQY->(DBSEEK(XFILIAL("TQY") + ST9->T9_STATUS))
						DO CASE
						CASE ALLTRIM(ST9->T9_SITBEM) == "I"
							//Ferramenta Migrador de Contratos
							If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
								cLocErro := STR0024 + alltrim(ST9->T9_CODBEM) + " - " + Alltrim(ST9->T9_NOME) + STR0025 + CRLF + CRLF + STR0026 + FPA->FPA_OBRA+CRLF
							Else
								MSGALERT(STR0024 + ALLTRIM(ST9->T9_CODBEM) + " - " + ALLTRIM(ST9->T9_NOME) + STR0025 + CRLF + CRLF + ; //"O EQUIPAMENTO "###" ESTÁ INATIVO!"
								STR0026 + FPA->FPA_OBRA) //"OBRA:"
							EndIf
							RETURN
						CASE EMPTY(ALLTRIM(ST9->T9_STATUS))
							//Ferramenta Migrador de Contratos
							If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
								cLocErro := STR0024 + alltrim(ST9->T9_NOME) + STR0027+CRLF
							Else
								MSGALERT(STR0024 + ALLTRIM(ST9->T9_NOME) + STR0027 , STR0004) //"O EQUIPAMENTO "###" ESTÁ COM STATUS VAZIO!"###"GPO - GRCONTR.PRW"
							EndIf
							RETURN
						CASE TQY->TQY_STTCTR $ "10#20#30#40#50" .AND. EMPTY(ALLTRIM(FPA->FPA_AS))
							_CQUERY := " SELECT COUNT(*) QTDLOC" + CRLF
							_CQUERY += " FROM " + RETSQLNAME("FPA") + " ZAG "
							_CQUERY +=        " INNER JOIN " + RETSQLNAME("FQ5") + " DTQ" + CRLF
							_CQUERY +=                   " ON  FQ5_FILORI = FPA_FILIAL"   + CRLF
							_CQUERY +=                   " AND FQ5_AS     = FPA_AS"       + CRLF
							_CQUERY +=                   " AND FQ5_STATUS <> '9'"         + CRLF
							_CQUERY +=                   " AND DTQ.D_E_L_E_T_ = ''"       + CRLF
							_CQUERY +=        " INNER JOIN " + RETSQLNAME("ST9") + " ST9" + CRLF
							_CQUERY +=                   " ON  T9_CODBEM = FPA_GRUA"      + CRLF
							_CQUERY +=                   " AND ST9.D_E_L_E_T_ = ''"       + CRLF
							_CQUERY +=        " INNER JOIN " + RETSQLNAME("TQY") + " TQY" + CRLF
							_CQUERY +=                   " ON  TQY_STATUS = T9_STATUS"    + CRLF
							_CQUERY +=                   " AND TQY_STTCTR IN ('10','20','30','40','50')" + CRLF
							_CQUERY +=                   " AND TQY.D_E_L_E_T_ = ''" + CRLF
							_CQUERY += " WHERE FPA_GRUA <> ''" + CRLF
							_CQUERY +=   " AND FPA_GRUA = '" + ST9->T9_CODBEM + "'" + CRLF
							_CQUERY +=   " AND FPA_FILIAL + FPA_PROJET <> '" + FPA->FPA_FILIAL + FPA->FPA_PROJET + "'" + CRLF
							_CQUERY +=   " AND FPA_NFRET = ''" + CRLF
							_CQUERY +=   " AND ZAG.D_E_L_E_T_ = ''"
							IF SELECT("TRBVLD") > 0
								TRBVLD->(DBCLOSEAREA())
							ENDIF
							TCQUERY _CQUERY NEW ALIAS "TRBVLD"
							
							IF TRBVLD->(EOF())
								TRBVLD->(DBCLOSEAREA())
								FPA->(DBSKIP())
								LOOP
							ELSE
								_lBloq := .F.
								If TRBVLD->QTDLOC > 0
									_lBloq := .T.
								EndIf
								TRBVLD->(DBCLOSEAREA())
								If _lBloq
									//Ferramenta Migrador de Contratos
									If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
										cLocErro := STR0024 + alltrim(ST9->T9_CODBEM) + " - " + alltrim(ST9->T9_NOME) + STR0028 + alltrim(TQY->TQY_DESTAT) + "!"+CRLF
									Else
										MSGALERT(STR0024 + ALLTRIM(ST9->T9_CODBEM) + " - " + ALLTRIM(ST9->T9_NOME) + STR0028 + ALLTRIM(TQY->TQY_DESTAT) + "!" , STR0004) //"O EQUIPAMENTO "###" ESTÁ "###"GPO - GRCONTR.PRW"
									EndIf
									RETURN
								EndIf
							ENDIF
						CASE TQY->TQY_STTCTR <> "00"
							//Ferramenta Migrador de Contratos
							If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
								cLocErro := STR0024 + ALLTRIM(ST9->T9_CODBEM) + STR0029 + ALLTRIM(FPA->FPA_OBRA) + STR0030 + ALLTRIM(TQY->TQY_DESTAT) + "!"+CRLF
							Else
								MSGALERT(STR0024 + ALLTRIM(ST9->T9_CODBEM) + STR0029 + ALLTRIM(FPA->FPA_OBRA) + STR0030 + ALLTRIM(TQY->TQY_DESTAT) + "!" , STR0004) //"O EQUIPAMENTO "###" LOCALIZADO NA OBRA "###" ESTÁ COM O STATUS "###"GPO - GRCONTR.PRW"
							EndIf
							RETURN
						ENDCASE
					ELSE
						// FRANK 12/08/2020
						// ACEITAR A GERACAO DE CONTRATOS COM O EQUIPAMENTO SEM SER INFORMADO.
						//Ferramenta Migrador de Contratos
						If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
							cLocErro := STR0024 + ALLTRIM(ST9->T9_NOME) + STR0031+CRLF
						Else
							MSGALERT(STR0024 + ALLTRIM(ST9->T9_NOME) + STR0031 , STR0004) //"O EQUIPAMENTO "###" NÃO FOI ENCONTRADO!"###"GPO - GRCONTR.PRW"				
						EndIf
								RETURN
							ENDIF
						ENDIF
					ENDIF
				ELSE
					//Ferramenta Migrador de Contratos
					If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
						cLocErro := "O produto" + ALLTRIM(FPA->FPA_PRODUT) + STR0031 + CRLF
					Else
						MSGALERT("O produto" + ALLTRIM(FPA->FPA_PRODUT) + STR0031 , STR0004) //"O EQUIPAMENTO "###" NÃO FOI ENCONTRADO!"###"GPO - GRCONTR.PRW"				
					EndIf
					//retirar esse return
					RETURN
				ENDIF
			ENDIF
			FPA->(DBSKIP())
		ENDDO
	ENDIF
	
	WHILE _LGERAR .AND. FPA->(!EOF()) .AND. FPA->FPA_FILIAL == FP0->FP0_FILIAL .AND. FPA->FPA_PROJET == FP0->FP0_PROJET
		IF !EMPTY(ALLTRIM(FPA->FPA_NFRET))
			FPA->(DBSKIP())
			LOOP
		ENDIF
		
		IF FPA->FPA_TIPOSE $ "MO" .OR. !EMPTY(FPA->FPA_AS)
			_LGERAR := .T.
		ELSE
			CCONDPAG := FPA->FPA_CONPAG							// CONDICAO PAGAMENTO
			NPOS := ASCAN(AITPED, {|X| ALLTRIM(X[1]) == FPA->FPA_PRODUT } )
			NPOS := ASCAN(AITPED, {|X| ALLTRIM(X[1]) == FPA->FPA_PRODUT } )
			IF FPA->FPA_TIPOSE <> 'M' 							// SE FOR MÃO OBRA NÃO GERAR ITEM NO PEDIDO DE VENDA
				IF NPOS == 0
					AADD(AITPED , {FPA->FPA_PRODUT,IIF(FP0->FP0_TIPOSE == 'L',FPA->FPA_PREDIA,FPA->FPA_THORAS),FPA->FPA_VRHOR,IIF(FP0->FP0_TIPOSE == 'P',(FPA->FPA_VRHOR*FPA->FPA_PREDIA),(FPA->FPA_VRHOR*FPA->FPA_THORAS)),FPA->FPA_GRUA, FPA->FPA_OBRA, FPA->FPA_SEQGRU, FPA->FPA_AS, FPA->FPA_CACAMB}) //FPA->FPA_THORAS
				ELSE
					AITPED[NPOS][2] += IIF(FP0->FP0_TIPOSE == 'L',FPA->FPA_PREDIA,FPA->FPA_THORAS)
					AITPED[NPOS][3] := FPA->FPA_VRHOR
					AITPED[NPOS][4] := FPA->FPA_VRHOR * AITPED[NPOS][2]
					AITPED[NPOS][5] := FPA->FPA_GRUA
				ENDIF
				
				// --> PROJETO LIFT
				IF FP0->FP0_TIPFAT != "L"
					IF FPA->FPA_VRMOB <> 0 						// PRODUTO MOB
						AADD(AITPED , {CPRODM,1,FPA_VRMOB,FPA_VRMOB,FPA->FPA_GRUA, FPA_OBRA, FPA_SEQGRU })
					ENDIF
					IF FPA->FPA_VRDES <> 0 						// PRODUTO DESMOB
						AADD(AITPED , {CPRODD,1,FPA->FPA_VRDES,FPA->FPA_VRDES,FPA->FPA_GRUA, FPA_OBRA, FPA_SEQGRU})
					ENDIF
					IF FPA->FPA_MONTAGE <> 0 					// PRODUTO MONTAGEM
						AADD(AITPED , {CPRODMONT,1,FPA->FPA_MONTAGE,FPA->FPA_MONTAGE,FPA->FPA_GRUA, FPA_OBRA, FPA_SEQGRU})
					ENDIF
					IF FPA->FPA_DESMON <> 0 					// PRODUTO DESMONTAGEM
						AADD(AITPED , {CPRODDESMONT,1,FPA->FPA_DESMON,FPA->FPA_DESMON,FPA->FPA_GRUA, FPA_OBRA, FPA_SEQGRU})
					ENDIF
					IF FPA->FPA_TELESC <> 0 					// PRODUTO TELESC
						AADD(AITPED , {CPRODTELE,1,FPA->FPA_TELESC,FPA->FPA_TELESC,FPA->FPA_GRUA, FPA_OBRA, FPA_SEQGRU})
					ENDIF
					IF FPA->FPA_ANCORA <> 0 					// PRODUTO ANCORAGEM
						AADD(AITPED , {CPRODANC,1,FPA->FPA_ANCORA,FPA->FPA_ANCORA,FPA->FPA_GRUA, FPA_OBRA, FPA_SEQGRU})
					ENDIF
					IF FPA->FPA_DESCON == "S"
						NVLRDES   := FPA->FPA_VALDES 			// DESCONTO QUE VOU LIBERAR TENHO QUE DESCOBRIR ESSE VALOR EM HORAS
						NQTDHORAS := FPA->FPA_THORAS 			// TOTAL QUE VAI PARA O PEDIDO
						NVLRTOTAL := FPA->FPA_VRHOR*FPA->FPA_THORAS //TOTAL QUE VAI PARA O PEDIDO
						NVLRHORU  := FPA->FPA_VRHOR 			// VALOR DE UMA HORA
						NHORASDES := NVLRDES/NVLRHORU 			// HORAS DESCONTADAS QUE VOU LIBERAR
						AADD(ADESCON,{FPA->FPA_PRODUT,NVLRDES,NQTDHORAS,NVLRTOTAL,NVLRHORU,NHORASDES,FPA->FPA_GRUA, FPA_OBRA, FPA_SEQGRU})
						// LIBERAR O PEDIDO DE ACORDO COM O VALOR DO DESCONTO
					ENDIF
				ENDIF
			ENDIF
			NALIISS := FPA->FPA_PERISS 							// ALIQUOTA DO ISS
		ENDIF
		
		IF ! LOCA05917(FPA->FPA_GRUA , FPA->FPA_AS , DTOS(FPA->FPA_DTINI) , DTOS(FPA->FPA_DTENRE) , , , FPA->FPA_HRINI , FPA->FPA_HRFIM)	// FUNÇÃO DO MAICKON QUE VERIFICA SE TEM CONFLITO DE DATAS
			_LGERAR := .F.
			IF AVISO(STR0020,STR0021,{STR0022,STR0023}) == 1 //"CONFLITOS ENCONTRADOS"###"DESEJA CONTINUAR ASSIM MESMO?"###"SIM"###"NAO"
				_LGERAR := .T.
			ENDIF
		ENDIF
		CTPISS := FPA->FPA_TPISS
		FPA->(DBSKIP())
	ENDDO
	
	/*
	DBSELECTAREA("ZA6")
	ZA6->(DBSETORDER(1))
	ZA6->(DBSEEK(XFILIAL("ZA6") + FP0->FP0_PROJET))
	*/
		
CASE _LGERAR .AND. FP0->FP0_TIPOSE == "T" .AND. .F. //ZA6->ZA6_INTMUN == "S"
	ZA6->(DBSEEK(XFILIAL("ZA6")+FP0->FP0_PROJET))
	
	ZA7->(DBSETORDER(1))    									// CARGAS ZA7
	ZA7->(DBGOTOP())
	ZA7->(DBSEEK(XFILIAL("ZA7") + FP0->FP0_PROJET))
	
	FQ5->(DBSETORDER(6))
	FQ5->(DBSEEK(XFILIAL("FQ5")+ FP0->FP0_PROJET))
	
	WHILE _LGERAR .AND. ZA7->(!EOF()) .AND. ZA7->ZA7_PROJET == FP0->FP0_PROJET
		DBSELECTAREA("FQ8")
		DBSETORDER(2)
		IF MSSEEK(XFILIAL("FQ8") +  FQ5->FQ5_SOT + FQ5->FQ5_OBRA + ZA6->ZA6_SEQTRA+ FQ5->FQ5_SEQCAR )
			NCREDEN := FQ8->FQ8_VALESC
			NTUV    := FQ8->FQ8_VALTUV
			NPRF    := FQ8->FQ8_VALPRF
			NPRE    := FQ8->FQ8_VALPRE
			NPED    := FQ8->FQ8_VALPED
			NEXTRA  := FQ8->FQ8_VALADI 
			NALIQ   := ZA7->ZA7_VALADV
			NSEG    := ROUND(ZA7->ZA7_VRCARG*ZA7->ZA7_VALADV/100,2)
			NTRAV   := FQ8->FQ8_VALTRA
			NIPT    := FQ8->FQ8_VALIPT
			NICM    := ZA7->ZA7_VALICM
			NACOMP  := FQ8->FQ8_VALACO
			NOUT    := FQ8->FQ8_VALOUT
			NFRETE  := FQ8->FQ8_VRFRET
			NCONCESS:= FQ8->FQ8_VALCON
			NSEMAFOR:= FQ8->FQ8_VALSEM
			NVALTVA := FQ8->FQ8_VALTVA
			NVALTEL := FQ8->FQ8_VALTEL
			NVALTUR := FQ8->FQ8_VALTUR
			NCET    := FQ8->FQ8_VALCET
			NVALAUX := FQ8->FQ8_VALAUX
			NVALINV := FQ8->FQ8_VALINV  	// BLOQUEIO: BLOQUEIO + ALEMOA
			NVALTAP	:= FQ8->FQ8_VALTAP
			CTPISS  := "X"
		ENDIF
			
		CCONDPAG := ZA6->ZA6_CONPAG  		// CONDICAO PAGAMENTO
		NPOS := ASCAN(AITPED, {|X| ALLTRIM(X[1]) == CPRODT } )
		IF NPOS == 0
			AADD(AITPED , {CPRODT,VAL(ZA7->ZA7_QUANT),(VAL(ZA7->ZA7_QUANT)/NFRETE),NFRETE,ZA6->ZA6_PROJET }) //FP4->FP4_THORAS
		ELSE
			AITPED[NPOS][2] += VAL(ZA7->ZA7_QUANT)
			AITPED[NPOS][3] := (VAL(ZA7->ZA7_QUANT)/NFRETE)
			AITPED[NPOS][4] := NFRETE
			AITPED[NPOS][5] := ZA6->ZA6_PROJET
		ENDIF
		
		NALIISS := FP4->FP4_PERISS 			// ALIQUOTA DO ISS
		ZA7->(DBSKIP())
	ENDDO

ENDCASE

IF _LGERAR .AND. FP0->FP0_TIPOSE == "L" .AND. FP0->FP0_STATUS == "1" .AND. MV_LOCX020
	
	DBSELECTAREA("SA3")
	SA3->(DBSETORDER(1))
	SA3->(DBSEEK(XFILIAL("SA3") + FP0->FP0_VENDED))
	
	DBSELECTAREA("FPA")
	FPA->(DBSETORDER(1))
	IF FPA->(DBSEEK(XFILIAL("FPA") + FP0->FP0_PROJET))
		WHILE FPA->(!EOF()) .AND. FPA->FPA_FILIAL == FP0->FP0_FILIAL .AND. FPA->FPA_PROJET == FP0->FP0_PROJET
			IF !EMPTY(ALLTRIM(FPA->FPA_AS))
				DBSELECTAREA("FQ5")
				//FQ5->(DBSETORDER(1))
				FQ5->(dbOrderNickName("ITUPFQ500L")) // pelo número da AS
				IF FQ5->(DBSEEK(XFILIAL("FQ5") + FPA->FPA_AS))
					IF FQ5->FQ5_STATUS <> "9"
						FPA->(DBSKIP())
						LOOP
					ENDIF
				ENDIF
			ENDIF
			
			_NDESCVEN := 0 //SA3->A3_XPDESC
			
			DBSELECTAREA("SB1")
			SB1->(DBSETORDER(1))
			IF SB1->(DBSEEK(XFILIAL("SB1") + FPA->FPA_PRODUT))
				/*
				IF SB1->B1_XPDESC  > _NDESCVEN
					_NDESCVEN := SB1->B1_XPDESC 
				ENDIF
				
				DO CASE
				CASE SB1->B1_XPDESC < FPA->FPA_PDESC
					MSGALERT("DESCONTO INFORMADO É MAIOR QUE O PERMITIDO PARA O ITEM "+ALLTRIM(FPA->FPA_SEQGRU)+" DA OBRA "+ALLTRIM(FPA->FPA_OBRA)+"." , "GPO - GRCONTR.PRW")
					RETURN .F.
				CASE _NDESCVEN < FPA->FPA_PDESC
					MSGALERT("DESCONTO INFORMADO É MAIOR QUE O PERMITIDO PARA O ITEM "+ALLTRIM(FPA->FPA_SEQGRU)+" DA OBRA "+ALLTRIM(FPA->FPA_OBRA)+"." , "GPO - GRCONTR.PRW")
					IF MV_LOCX020
						MSGINFO("O " + SUPERGETMV("MV_LOCX248",.F.,"PROJETO") + " SERÁ ENVIADO PARA APROVAÇÃO!" , "GPO - GRCONTR.PRW")
						LOCA00161()
					ENDIF
					RETURN .F.
				ENDCASE
				*/
			ENDIF
			
			FPA->(DBSKIP())
		ENDDO
	ENDIF
	
	IF RECLOCK("FP0",.F.)
		FP0->FP0_STATUS := "3" 		// APROVADO 
		FP0->(MSUNLOCK())
	ENDIF
ENDIF

IF MV_LOCX020 .AND. FP0->FP0_STATUS $ "1#2#4#7#B#C"
	//Ferramenta Migrador de Contratos
	if _lPassa //If Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
		cLocErro := STR0032+CRLF
	Else
		MSGALERT(STR0032 , STR0004) //"GERAÇÃO DO CONTRATO, SOMENTE COM A PROPOSTA COM STATUS APROVADO"###"GPO - GRCONTR.PRW"	
	EndIf
	RETURN .F.
ENDIF

LOK := _LGERAR

IF _LGERAR 
	/*
	//Ferramenta Migrador de Contratos
	If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto
			lYesContin := .T.
		Else
			lYesContin := IF(_lMens,MSGYESNO(STR0033 + SUPERGETMV("MV_LOCX248",.F.,STR0002) + " "+ALLTRIM(FP0->FP0_PROJET)+" ?"),.T.) //"Confirma a geração de contrato do "###"PROJETO"
			//lYesContin := MsgYesNo("Confirma a geração de contrato do " + SuperGetMv("LC_NOMPROJ",.f.,"Projeto") + " "+Alltrim(ZA0->ZA0_PROJET)+" ?")
		EndIf
	IF lYesContin .And. LGERCLI 						// LGERCLI := SUPERGETMV("MV_LOCX211",.F.,.F.)
		INCPROC(STR0034) //"VERIFICANDO CLIENTE"
		// --> CONVERTE CLIENTE PARA PROSPECT ... SE NECESSÁRIO
		IF FP0->FP0_CLIENT
			IF  !EMPTY(FP0->FP0_CLICGC)
				DBSELECTAREA("SA1")
				DBSETORDER(NALGUMA)
				IF !MSSEEK(XFILIAL("SA1") + FP0->FP0_CLICGC )
					//Ferramenta Migrador de Contratos
					If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
						cLocErro := STR0035+ALLTRIM(FP0->FP0_CLICGC)+STR0036+CRLF
						RETURN
					EndIf
					IF !MSGNOYES(STR0035+ALLTRIM(FP0->FP0_CLICGC)+STR0036 ) //"NAO FOI ENCONTRADO NENHUM CLIENTE COM O CNPJ/CPF "###", DESEJA INCLUI-LO COMO CLIENTE"
						RETURN
					ELSE
						ACLIENTE := DADOSCLI()
						LMSHELPAUTO  := .T.
						LJMSGRUN(STR0008,,{||  MSEXECAUTO({|X,Y|MATA030(X,Y)},ACLIENTE,3) } ) //"AGUARDE...INCLUINDO CLIENTE VERIFIQUE DADOS POSTERIORMENTE"
						LMSHELPAUTO  := .F.
						IF LMSERROAUTO
							ROLLBACKSX8()
							MOSTRAERRO()
						ELSE
							CONFIRMSX8()
							RECLOCK("FP0",.F.)
							FP0->FP0_CLI := SA1->A1_COD
							FP0->FP0_LOJA:= SA1->A1_LOJA
							FP0->(MSUNLOCK())
							LCLIENTE := .T.
							WHILE .T.
								NRET := AXALTERA("SA1",SA1->(RECNO()),4,,,,,)
								IF NRET == 1
									EXIT
								ELSE
									MSGINFO(STR0009 , STR0004) //"FAVOR CONFIRMAR A OPERAÇÃO."###"GPO - GRCONTR.PRW"
								ENDIF
							ENDDO
						ENDIF
					ENDIF
				ELSE
					LCLIENTE := .T.
					RECLOCK("FP0",.F.)
					FP0->FP0_CLI  := SA1->A1_COD
					FP0->FP0_LOJA := SA1->A1_LOJA
					FP0->(MSUNLOCK())
				ENDIF
			ELSE
				//Ferramenta Migrador de Contratos
				If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
					cLocErro := STR0037+CRLF
				Else
					MSGALERT(STR0037 , STR0004) //"O CNPJ/CPF PARA ESTA PROPOSTA NÃO FOI INFORMADO.POR FAVOR INFORMAR O CNPJ/CPF GERAR O CONTRATO!"###"GPO - GRCONTR.PRW"
				EndIf
				RETURN
			ENDIF
		ELSE 						// --> SE O CAMPO FP0->FP0_CLIENT FOR FALSO
			IF !EMPTY(FP0->FP0_CLICGC)
				AAREASA1:=SA1->(GETAREA())
				DBSELECTAREA("SA1")
				DBSETORDER(NALGUMA)
				DBGOTOP()
				IF !MSSEEK(XFILIAL("SA1") + FP0->FP0_CLICGC )
					ACLIENTE := DADOSCLI()                
					LMSHELPAUTO  := .T.
					//LJMSGRUN(STR0038,,{||  MSEXECAUTO({|X,Y|MATA030(X,Y)},ACLIENTE,3) } ) //"AGUARDE... INCLUINDO CLIENTE VERIFIQUE DADOS POSTERIORMENTE"
					LJMSGRUN(STR0038,,{||  MSExecAuto({|a,b,c| CRMA980(a,b,c)}, ACLIENTE, 3, ) } ) //"AGUARDE... INCLUINDO CLIENTE VERIFIQUE DADOS POSTERIORMENTE"
					LMSHELPAUTO  := .F.
					IF LMSERROAUTO
						ROLLBACKSX8()
						MOSTRAERRO()
					ELSE
						CONFIRMSX8()
						RECLOCK("FP0",.F.)
						FP0->FP0_CLI := SA1->A1_COD
						FP0->FP0_LOJA:= SA1->A1_LOJA
						FP0->(MSUNLOCK())
						LCLIENTE := .T.
						AAREAGRC := GETAREA()
						WHILE .T.
							NRET := AXALTERA("SA1",SA1->(RECNO()),4,,,,,)
							IF NRET == 1
								EXIT
							ELSE
								MSGINFO(STR0039 , STR0004) //"FAVOR CONFIRMAR A OPERAÇÃO!"###"GPO - GRCONTR.PRW"
							ENDIF
						ENDDO
						RESTAREA(AAREAGRC)
					ENDIF
				ELSE
					LCLIENTE := .T.
					RECLOCK("FP0",.F.)
					FP0->FP0_CLI := SA1->A1_COD
					FP0->FP0_LOJA:= SA1->A1_LOJA
					FP0->(MSUNLOCK())
				ENDIF
			ELSE
				MSGALERT(STR0040 , STR0004) //"O CNPJ/CPF PARA ESTA PROPOSTA NÃO FOI INFORMADO. POR FAVOR INFORMAR O CNPJ/CPF GERAR O CONTRATO!"###"GPO - GRCONTR.PRW"
			ENDIF
		ENDIF
	ENDIF
	*/
	IF LCLIENTE														// PROCESSO DE LIFT 
		CCODCLI := FP0->FP0_CLI		//ACLI[1]
		CLOJCLI := FP0->FP0_LOJA	//ACLI[2]
		CREVISA := FP0->FP0_REVISA

		// --> ATUALIZA O STATUS DO PROJETO NO COMERCIAL
		IF FP0->FP0_TIPFAT == "L" .AND. LEN(_AREGS) == 0
			//Ferramenta Migrador de Contratos
			If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
				cLocErro := STR0041+CRLF
			Else
				MSGSTOP(STR0041 , STR0004) //"NAO EXISTEM REGISTROS PARA GERAÇÃO DO CONTRATO!"###"GPO - GRCONTR.PRW"
			EndIf
			RETURN(.F.)
		ENDIF

		INCPROC(STR0042) //"ATUALIZANDO STATUS DA PROPOSTA."
		RECLOCK("FP0",.F.)
		FP0->FP0_STATUS := "5" 										// MUDA STATUS PARA FINALIZADO
		FP0->(MSUNLOCK())
		
		ST9->(DBSETORDER(1))										// --> INDICE 01: T9_FILIAL  + T9_CODBEM 
		FPA->(DBSETORDER(1))										// --> INDICE 01: FPA_FILIAL + FPA_PROJET + FPA_OBRA + FPA_SEQGRU + FPA_CNJ
		FQ5->(DBSETORDER(1))										// --> INDICE 01: FQ5_FILIAL + FQ5_VIAGEM
		TQY->(DBSETORDER(1)) 										// --> INDICE 01: TQY_FILIAL + TQY_STATUS 

		IF FPA->(DBSEEK(XFILIAL("FPA") + FP0->FP0_PROJET)) 
			WHILE FPA->(!EOF()) .AND. FPA->FPA_PROJET == FP0->FP0_PROJET 
				SB1->( MSSEEK(XFILIAL("SB1")+FPA->FPA_PRODUT) ) 
				IF FPA->FPA_TIPOSE == "L"  .AND.  ! ALLTRIM(SB1->B1_GRUPO) $ ALLTRIM(CGRPAND) 		// !(ALLTRIM(GETADVFVAL("SB1", "B1_GRUPO",XFILIAL("SB1")+FPA->FPA_PRODUT,1,"")) $ ALLTRIM(SUPERGETMV("MV_LOCX014",.F.,"")))
					IF ST9->(DBSEEK(XFILIAL("ST9") + FPA->FPA_GRUA)) .AND. EMPTY(ALLTRIM(FPA->FPA_NFREM))
						IF TQY->(DBSEEK(XFILIAL("TQY")+ST9->T9_STATUS))
							IF TQY->TQY_STTCTR == "00" 
								TQY->(DBGOTOP()) 
								WHILE TQY->(!EOF())  .AND.  TQY->TQY_STTCTR <> "10" 				// STATUS DE GERAR CONTRATO 
									TQY->(DBSKIP()) 
								ENDDO 
								IF TQY->TQY_STTCTR == "10"
									//IF EXISTBLOCK("T9STSALT") 		// --> PONTO DE ENTRADA ANTES DA ALTERAÇÃO DE STATUS DO BEM.
										//EXECBLOCK("T9STSALT",.T.,.T.,{ST9->T9_STATUS,TQY->TQY_STATUS,FPA->FPA_PROJET,"",""})
										LOCXITU21(ST9->T9_STATUS,TQY->TQY_STATUS,FPA->FPA_PROJET,"","")
									//ENDIF 
									RECLOCK("ST9",.F.) 
									ST9->T9_STATUS := TQY->TQY_STATUS 
									ST9->(MSUNLOCK()) 
								ELSE
									MSGALERT(STR0043, STR0004)  //"NÃO FOI ENCONTRADO O STATUS 10 NO CADASTRO. FAVOR REALIZAR O REGISTRO DO MESMO PARA PROSSEGUIR."###"GPO - GRCONTR.PRW"
								ENDIF
							ENDIF
						ENDIF
					ENDIF
					
					IF !EMPTY(ALLTRIM(FPA->FPA_AS))  .AND.  EMPTY(ALLTRIM(FPA->FPA_NFREM))
						DBSELECTAREA("FQ5")
						FQ5->(DBSETORDER(9))
						IF FQ5->(DBSEEK(XFILIAL("FQ5") + FPA->FPA_AS + FPA->FPA_VIAGEM))
							IF ALLTRIM(FQ5->FQ5_GUINDA) <> ALLTRIM(FPA->FPA_GRUA) .AND. !EMPTY(ALLTRIM(FQ5->FQ5_GUINDA))
								DBSELECTAREA("ST9")
								ST9->(DBSETORDER(1))
								IF ST9->(DBSEEK(XFILIAL("ST9") + FQ5->FQ5_GUINDA))
									IF SELECT("TRBTQY") > 0
										TRBTQY->(DBCLOSEAREA())
									ENDIF
									CQUERY := " SELECT TQY_STATUS "                  + CRLF
									CQUERY += " FROM " + RETSQLNAME("TQY") + " TQY " + CRLF
									CQUERY += " WHERE  TQY.TQY_STTCTR = '00' "       + CRLF
									CQUERY +=   " AND  TQY.D_E_L_E_T_ = '' "
									TCQUERY CQUERY NEW ALIAS "TRBTQY"
									
									IF ! TRBTQY->(EOF())
										//IF EXISTBLOCK("T9STSALT") 	// --> PONTO DE ENTRADA ANTES DA ALTERAÇÃO DE STATUS DO BEM.
											//EXECBLOCK("T9STSALT",.T.,.T.,{ST9->T9_STATUS,TRBTQY->TQY_STATUS,FPA->FPA_PROJET,"","",.T.}) 
											LOCXITU21(ST9->T9_STATUS,TRBTQY->TQY_STATUS,FPA->FPA_PROJET,"","",.T.)
										//ENDIF
										IF RECLOCK("ST9",.F.)
											ST9->T9_STATUS := TRBTQY->TQY_STATUS 
											ST9->(MSUNLOCK()) 
										ENDIF
										IF RECLOCK("FQ5",.F.)
											FQ5->FQ5_GUINDA := FPA->FPA_GRUA
											IF !_MV_LOC207 //SUPERGETMV("MV_LOCX207",,.F.)
												FQ5->FQ5_STATUS := "1" 
											ELSE
												FQ5->FQ5_STATUS := "6" 
											ENDIF
											FQ5->(MSUNLOCK())
										ENDIF
									ENDIF
									
									TRBTQY->(DBCLOSEAREA())
									
								ENDIF
							ENDIF
						ENDIF
					ENDIF
					
				ENDIF
				FPA->(DBSKIP())
			ENDDO
		ENDIF
		
		//	--> LIBERAR VALOR DO DESCONTO 
		IF LEN(ADESCON) > 0
			FOR _NX := 1 TO LEN(ADESCON)
				LOCA042(ADESCON[_NX][1] , CNUMSC5 , ADESCON[_NX][6] , CCODCLI , CLOJCLI , ADESCON[_NX][2] , ADESCON[_NX][7] , "S") 
			NEXT _NX
		ENDIF
		
		CCONTRATO := ALLTRIM(STRTRAN(FP0->FP0_PROJET,"/",""))
		
		// --> CRIA UM CONTRATO NO TMS PARA ESSA PROPOSTA
		INCPROC(STR0047) //"CRIANDO CLASSE DE VALOR.."
		LOCA01307( ALLTRIM(CODCLVAL(CCONTRATO))+"T" , "1" , SUBSTR(FP0->FP0_CLINOM,1,25) , "" ) 
		LOCA01307( ALLTRIM(CODCLVAL(CCONTRATO))     , "2" , SUBSTR(FP0->FP0_CLINOM,1,25) , CODCLVAL(ALLTRIM(CCONTRATO))+"T" ) 
		
		// --> CRIA UMA AS / VIAGEM NO TMS PARA ESSA PROPOSTA
		INCPROC(STR0048) //"CRIANDO AS A.S. E VIAGENS "
		LOCA01302( CCONTRATO , CCODCLI , CLOJCLI , FP0->FP0_PROJET )

		// Geracao dos titulos provisorios - Frank 17/03/2021
		If _MV_LOC278 //supergetmv("MV_LOCX278",,.F.)
			If !GerPRx()
				Return .f.
			EndIF
		EndIf	
		
		FOR _NI := 1 TO LEN(_AREGS)
			_CUPDC5 := " UPDATE "+RETSQLNAME("SC5")
			_CUPDC5 += " SET C5_AS = FPA_AS "
			_CUPDC5 += " FROM "+RETSQLNAME("SC5")+" SC5 "
			_CUPDC5 +=        " INNER JOIN "+RETSQLNAME("FPA")+" ZAG "
			_CUPDC5 +=                   " ON  FPA_FILIAL = C5_FILIAL "
			_CUPDC5 +=                   " AND FPA_PROJET = '"+_AREGS[_NI,1]+"' "
			_CUPDC5 +=                   " AND FPA_OBRA = '"+_AREGS[_NI,2]+"' "
			_CUPDC5 +=                   " AND FPA_SEQGRU = '"+_AREGS[_NI,3]+"' "
			_CUPDC5 +=                   " AND ZAG.D_E_L_E_T_ = '' "
			_CUPDC5 += " WHERE "
			_CUPDC5 +=        " C5_FILIAL = '"+XFILIAL("SC5")+"' "
			_CUPDC5 +=    " AND C5_NUM = '"+_AREGS[_NI,4]+"' "
			_CUPDC5 +=    " AND SC5.D_E_L_E_T_ = '' "
			TCSQLEXEC( _CUPDC5 )
			
			_CUPDC6 := " UPDATE "+RETSQLNAME("SC6")
			_CUPDC6 += " SET C6_XAS = C5_AS "
			_CUPDC6 += " FROM "+RETSQLNAME("SC6")+" SC6 "
			_CUPDC6 +=        " INNER JOIN "+RETSQLNAME("SC5")+" SC5 "
			_CUPDC6 +=                   " ON  C5_FILIAL = C6_FILIAL AND C5_NUM = C6_NUM AND SC5.D_E_L_E_T_ = '' "
			_CUPDC6 += " WHERE "
			_CUPDC6 +=        " C6_FILIAL = '"+XFILIAL("SC5")+"' "
			_CUPDC6 +=    " AND C6_NUM = '"+_AREGS[_NI,4]+"' "
			_CUPDC6 +=    " AND C6_PRODUTO <> '"+ALLTRIM(_MV_LOC250)+"' "
			_CUPDC6 +=    " AND SC6.D_E_L_E_T_ = '' "
			TCSQLEXEC( _CUPDC6 )
		NEXT _NI
		
		IF LEN(_AREGS) > 0
			ENVMLIFT(_AREGS)
		ENDIF
		
		If supergetmv("MV_LOCX278",,.F.)
			INCPROC(STR0123) //"Alocando equipamentos e gerando os titulos provisorios."
		Else
			INCPROC(STR0124) //"Alocando equipamentos."
		EndIf
		
		// --> GERA A OCORRENCIA  E A CAMPANHA
		LIMPRI     := .T.	// VAI IMPRIMIR MAIS DE UMA VEZ QUANDO O PROJETO NÃO FOR UNIFICADO
		LUNIFICADO := .T.	// PARA NÃO TRAZER A PERGUNTA DE PESQUISA POR PROJETO NOVAMENTE
		
		IF FP0->FP0_TIPOSE == "L" // LOCAÇÃO
			
			DBSELECTAREA("FP1")
			DBSETORDER(3)
			DBSEEK(XFILIAL("FP1")+FP0->FP0_PROJET)
			
			DBSELECTAREA("FPA")
			DBSETORDER(4)
			DBSEEK(XFILIAL("FPA")+FP0->FP0_PROJET)
			
			WHILE !FPA->(EOF()) .AND. FP0->FP0_PROJET = FPA->FPA_PROJET
				IF ALLTRIM(FP1->FP1_TEMVIS) $ "S" .AND. ALLTRIM(FPA->FPA_TIPOSE) <> "Z"
					//ATUALIZA SUO//
					CTIPO:="9"
				ELSEIF ALLTRIM(FPA->FPA_TIPOSE) <> "Z"
					CTIPO:="3"
				ELSE
					CTIPO:="6"
				ENDIF
				
				// GRAVA AS NO CHECKLIST 
				DBSELECTAREA("TTF") 
				IF FIELDPOS("TTF_XAS") > 0 
					DBSETORDER(3) 
					TTF->(DBCLEARFILTER())
					TTF->(DBSETFILTER({|| ALLTRIM(FPA->FPA_GRUA) == ALLTRIM(TTF->TTF_CODBEM) .AND. EMPTY(TTF->TTF_XAS) },"ALLTRIM(FPA->FPA_GRUA) == ALLTRIM(TTF->TTF_CODBEM) .AND. EMPTY(TTF->TTF_XAS) "))
					TTF->(DBGOTOP())
					
					IF EMPTY(TTF_XAS) .AND. !EMPTY(TTF_CODBEM)
						RECLOCK("TTF",.F.)
						TTF->TTF_XAS := FPA->FPA_AS
						TTF->(MSUNLOCK())
					ENDIF
					
					// ATUALIZA A TTG 
					CSQL := " UPDATE "+RETSQLNAME("TTG")
					CSQL += " SET   TTG_XAS    = '"+FPA->FPA_AS+"' "
					CSQL += " WHERE TTG_CHECK  = '"+TTF->TTF_CHECK+"' "
					CSQL += "   AND TTG_XAS    = '' "
					CSQL += "   AND D_E_L_E_T_ = ' ' "
					TCSQLEXEC(CSQL) 
				ENDIF 
				
				LIMPRI := .F.
				
				LUNIFICADO := .F. 
				
				FPA->(DBSKIP())
			ENDDO
		
			
		ELSEIF FP0->FP0_TIPOSE == "E"
			DBSELECTAREA("FP1")
			DBSETORDER(3)
			DBSEEK(XFILIAL("FP1")+FP0->FP0_PROJET)
			
			DBSELECTAREA("FP4")
			DBSETORDER(4)
			DBSEEK(XFILIAL("FP4")+FP0->FP0_PROJET)
			
			WHILE !FP4->(EOF()) .AND. FP0->FP0_PROJET = FP4->FP4_PROJET
				IF FP4->FP4_TIPOSE == "M"  .AND. FP0->FP0_PROJET = FP4->FP4_PROJET
					FP4->(DBSKIP())
				ENDIF
				
				IF FIELDPOS("TTF_XAS") > 0 
					// GRAVA AS NO CHECKLIST
					DBSELECTAREA("TTF") 
					DBSETORDER(3) 
					TTF->(DBCLEARFILTER())
					TTF->(DBSETFILTER({|| ALLTRIM(FP4->FP4_GUINDA) == ALLTRIM(TTF->TTF_CODBEM) .AND. EMPTY(TTF->TTF_XAS) },"ALLTRIM(FP4->FP4_GUINDA) == ALLTRIM(TTF->TTF_CODBEM) .AND. EMPTY(TTF->TTF_XAS) ")) 
					TTF->(DBGOTOP()) 
					
					IF EMPTY(TTF_XAS) .AND. !EMPTY(TTF_CODBEM)
						RECLOCK("TTF",.F.)
						TTF->TTF_XAS := FP4->FP4_AS 
						TTF->(MSUNLOCK())
					ENDIF
					
					// --> ATUALIZA A TTG
					CSQL := " UPDATE "+RETSQLNAME("TTG")
					CSQL += " SET   TTG_XAS    = '"+FP4->FP4_AS+"' "
					CSQL += " WHERE TTG_CHECK  = '"+TTF->TTF_CHECK+"' "
					CSQL +=   " AND TTG_XAS    = '' "
					CSQL +=   " AND D_E_L_E_T_ = ' ' "
					TCSQLEXEC(CSQL)
				ENDIF 
				
				LUNIFICADO := .F.
				FP4->(DBSKIP())
			ENDDO
			
		ELSE
			DBSELECTAREA("ZA6")
			DBSETORDER(3)
			DBSEEK(XFILIAL("ZA6")+FP0->FP0_PROJET)
		ENDIF
		// FIM GERA OCORRENCIA
		
		CQUERY := " SELECT * " + CRLF
		CQUERY += " FROM " + RETSQLNAME("FQ5") + " DTQ" + CRLF
		CQUERY += " WHERE FQ5_SOT = '" + FP0->FP0_PROJET + "'" + CRLF
		CQUERY += "    AND DTQ.D_E_L_E_T_ = ''"
		IF SELECT("TRBFQ5") > 0
			TRBFQ5->(DBCLOSEAREA())
		ENDIF
		TCQUERY CQUERY NEW ALIAS "TRBFQ5"
		
		IF ! TRBFQ5->(EOF())
			RECLOCK("FP0",.F.)
			FP0->FP0_DATAS  := DDATABASE		// GRAVO A DATA DA GERAÇÃO DA AS
			FP0->(MSUNLOCK())
			If _lMens
				//Ferramenta Migrador de Contratos
				If _lPassa2 //!( Type("lLocAuto") == "L" .And. lLocAuto) 
					MSGINFO(STR0049 , STR0004) //"CONTRATO GERADO COM SUCESSO!"###"GPO - GRCONTR.PRW"
				EndIf
			EndIF
		ELSE
			If _lMens
				//Ferramenta Migrador de Contratos
				If _lPassa //Type("lLocAuto") == "L" .And. lLocAuto .And. ValType(cLocErro) == "C"
					cLocErro := STR0050 + CRLF
				Else
					MSGINFO(STR0050 , STR0004) //"NÃO EXISTEM A.S A SEREM GERADAS PARA ESSE CONTRATO"###"GPO - GRCONTR.PRW"
				EndIf
			EndIF
			RECLOCK("FP0",.F.)
			FP0->FP0_STATUS  := '1'
			FP0->(MSUNLOCK())
		ENDIF
		
		// --> DISPARA UM EMAIL PARA O COMERCIAL PARA AVISAR A GERAÇÃO DA AS NO SISTEMA
		CCC	 	:= SPACE(100)
		CCCO 	:= SPACE(100)
		CMSG1   := ""
		CPARA 	:= SPACE(100)
		CTITULO	:= SPACE(100)
		EFROM 	:= ALLTRIM(GETMV("MV_RELFROM")) //ALLTRIM(USRRETNAME(RETCODUSR())) + "<" + ALLTRIM(USRRETMAIL(RETCODUSR())) + ">"
		_CFIL	:= RIGHT(ALLTRIM(FQ5->FQ5_AS),2)
		
		DO CASE
			CASE FP0->FP0_TIPOSE == "G"; _CTIPOAS := "AS"  ; CPARA := GETMV("MV_LOCX141",,"")//SUPERGETMV("MV_LOCX141",NIL,NIL,_CFIL)
			CASE FP0->FP0_TIPOSE == "R"; _CTIPOAS := "ASG" ; CPARA := GETMV("MV_LOCX261",,"")//SUPERGETMV("MV_LOCX261",NIL,NIL,_CFIL)
			CASE FP0->FP0_TIPOSE == "U"; _CTIPOAS := "ASG" ; CPARA := GETMV("MV_LOCX147",,"")//SUPERGETMV("MV_LOCX147",NIL,NIL,_CFIL)
			CASE FP0->FP0_TIPOSE == "P"; _CTIPOAS := "ASG" ; CPARA := GETMV("MV_LOCX145",,"")//SUPERGETMV("MV_LOCX145",NIL,NIL,_CFIL)
			CASE FP0->FP0_TIPOSE == "T"; _CTIPOAS := "AST" ; CPARA := GETMV("MV_LOCX146",,"")//SUPERGETMV("MV_LOCX146",NIL,NIL,_CFIL)
			CASE FP0->FP0_TIPOSE == "I"; _CTIPOAS := "AST" ; CPARA := GETMV("MV_LOCX142",,"")//SUPERGETMV("MV_LOCX142",NIL,NIL,_CFIL)
			CASE FP0->FP0_TIPOSE == "O"; _CTIPOAS := "AST" ; CPARA := GETMV("MV_LOCX144",,"")//SUPERGETMV("MV_LOCX144",NIL,NIL,_CFIL)
			OTHERWISE                  ; _CTIPOAS := "AS " ; CPARA := ""
		ENDCASE
		
		IF LEN(AASNOVA) > 0 // SE NAO É REVISÃO //.F. // TRATAMENTO ANTERIOR
			FOR N:=1 TO LEN(AASNOVA)
				CANEXO   := ""
				CASFRETES:= ""
				
				FQ5->(DBGOTO(AASNOVA[N]))
				IF FQ5->FQ5_TPAS <> 'F'
					CMSG    := STR0051 + CHR(13)+CHR(10) //"ESTE EMAIL É PARA INFORMAR QUE FOI GERADA NO SISTEMA A AS:"
					CTITULO := STR0052 + FQ5->FQ5_AS //"GERACAO AS: "
					CMSG    += CTITULO + CRLF
				ELSEIF FQ5->FQ5_TPAS == 'F'
					CMSG    := STR0053 + CHR(13)+CHR(10) //"ESTE EMAIL É PARA INFORMAR QUE FOI GERADA NO SISTEMA A ASF:"
					CTITULO := STR0054 + FQ5->FQ5_AS //"GERACAO ASF: "
					CMSG    += CTITULO + CHR(13) + CHR(10)
					CMSG    += STR0055 + GETASORI(FQ5->FQ5_VIAGEM) + CHR(13) + CHR(10) //"NRO. AS: "
					CASFRETES := FQ5->FQ5_AS
				ENDIF
				
				DO CASE
					CASE FP0->FP0_TIPOSE == "G"		// AS DE EQUIPAMENTO
						// --> POSICIONO NA ZA1-OBRAS
						FP1->(DBSETORDER(1))
						FP1->(DBSEEK(XFILIAL("FP1") + FQ5->FQ5_SOT + FQ5->FQ5_OBRA))
						
						// --> POSICIONA NA ZA5-GUINDASTES X PROJETO
						FP4->(DBSETORDER(2))
						FP4->(DBSEEK(XFILIAL("FP4") +  FQ5->FQ5_SOT + FQ5->FQ5_OBRA + FQ5->FQ5_AS +FQ5->FQ5_VIAGEM))
						IF FQ5->FQ5_TPAS <> 'F'
							CMSG	+= CHR(13) + CHR(10)
							CMSG	+= STR0056 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"LOCAL DO SERVIÇO"
							CMSG	+= STR0057 + FQ5->FQ5_NOMCLI + CHR(13) + CHR(10) //"CLIENTE: "
							CMSG	+= STR0058 + FP1->FP1_NOMORI 												+ CHR(13) + CHR(10) //"OBRA:   "
							CMSG	+= STR0059 + ALLTRIM(FP0->FP0_CLICON) + STR0060 + ALLTRIM(FP0->FP0_CLIDDD) + ") " + ALLTRIM(FP0->FP0_CLITEL)	+ CHR(13) + CHR(10) //"CONTATO: "###" - FONE: ("
							CMSG	+= STR0061 + IIF(FP0->FP0_TIPOSE == "L",ZA6->ZA6_MUNDES,FP1->FP1_MUNORI)	+ CHR(13) + CHR(10) //"CIDADE: "
							CMSG	+= STR0062 + IIF(FP0->FP0_TIPOSE == "L",ZA6->ZA6_ESTDES,FP1->FP1_ESTORI)	+ CHR(13) + CHR(10) //"ESTADO: "
							CMSG	+= STR0063 + DTOC(FQ5->FQ5_DATINI) + " / " + DTOC(FQ5->FQ5_DATFIM) + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"DATA INI/FIM: "
							CMSG	+= STR0064 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"EQUIPAMENTO"
							CMSG	+=  ALLTRIM(FP4->FP4_GUINDA) + " - " + ALLTRIM(FP4->FP4_DESGUI) + " (" + ALLTRIM(FP4->FP4_CONFIG) + ")"
							
							CANEXO := FQ5->FQ5_AS + ".PDF"
							// removido por Frank em 05/04/2022 - debitos tecnicos
							//IF __COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
							//	CANEXO := GETSRVPROFSTRING("STARTPATH","")+CANEXO
							//ELSE
								CANEXO := ""
							//ENDIF
							
						ELSEIF FQ5->FQ5_TPAS == 'F'
							CPARA  := _MV_LOC154 //GETMV("MV_LOCX154",,"")
							CANEXO := CASFRETES + ".PDF"
							// removido por Frank em 05/04/2022 - debitos tecnicos
							//IF __COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
							//	CANEXO := GETSRVPROFSTRING("STARTPATH","")+CANEXO
							//ELSE
								CANEXO := ""
							//ENDIF
						ENDIF
						
					CASE FP0->FP0_TIPOSE == "L"		// AS DE LOCAÇÃO
						// --> POSICIONO NA ZA1-OBRAS
						DBSELECTAREA("FP1")
						DBSETORDER(1)
						DBSEEK(XFILIAL("FP1") + FQ5->FQ5_SOT + FQ5->FQ5_OBRA)
						
						// --> POSICIONA NA ZAG-GRUAS X PROJETO
						DBSELECTAREA("FPA")
						DBSETORDER(2)
						DBSEEK(XFILIAL("FPA") +  FQ5->FQ5_SOT + FQ5->FQ5_OBRA + FQ5->FQ5_AS +FQ5->FQ5_VIAGEM)
						IF     FQ5->FQ5_TPAS <> 'F'
							CMSG += CHR(13) + CHR(10)
							CMSG += STR0056 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"LOCAL DO SERVIÇO"
							CMSG += STR0012 + FQ5->FQ5_NOMCLI + CHR(13) + CHR(10) //"CLIENTE "
							CMSG += STR0065 + FP1->FP1_NOMORI 	+ CHR(13) + CHR(10) //"OBRA   "
							CMSG += STR0066 + FP1->FP1_MUNORI	+ CHR(13) + CHR(10) //"CIDADE "
							CMSG += STR0067 + FP1->FP1_ESTORI	+ CHR(13) + CHR(10) + CHR(13) + CHR(10) //"ESTADO "
							CMSG += STR0064 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"EQUIPAMENTO"
							CMSG +=  ALLTRIM(FPA->FPA_GRUA) + " - " + ALLTRIM(FPA->FPA_DESGRU)
						ELSEIF FQ5->FQ5_TPAS == "F"
							CPARA  := _MV_LOC155 //GETMV("MV_LOCX155",,"")
							CANEXO := CASFRETES + ".PDF"
							// removido por Frank Fuga em 05/04/2022 débitos técnicos
							//IF __COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
							//	CANEXO := GETSRVPROFSTRING("STARTPATH","")+CANEXO
							//ELSE
								CANEXO := ""
							//ENDIF
						ENDIF
						
					CASE FP0->FP0_TIPOSE $ "T"	// AS DE TRANSPORTE (AST)
						ZA6->(DBSETORDER(1))
						ZA6->(DBSEEK(XFILIAL("ZA6") +  FQ5->FQ5_SOT + FQ5->FQ5_OBRA))
						
						ZA7->(DBSETORDER(2))
						ZA7->(DBSEEK(XFILIAL("ZA7") +  FQ5->FQ5_SOT + FQ5->FQ5_OBRA + FQ5->FQ5_VIAGEM))
						
						CMSG += CHR(13) + CHR(10)
						CMSG += STR0068 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"SERVIÇO:"
						CMSG += STR0059 + ALLTRIM(FP0->FP0_CLICON) + STR0060 + ALLTRIM(FP0->FP0_CLIDDD) + ") " + ALLTRIM(FP0->FP0_CLITEL)	+ CHR(13) + CHR(10) //"CONTATO: "###" - FONE: ("
						CMSG += STR0057 + FQ5->FQ5_NOMCLI + CHR(13) + CHR(10) //"CLIENTE: "
						CMSG += STR0061 + ZA6->ZA6_MUNDES	+ CHR(13) + CHR(10) //"CIDADE: "
						CMSG += STR0062 + ZA6->ZA6_ESTDES	+ CHR(13) + CHR(10) //"ESTADO: "
						CMSG += STR0063 + DTOC(FQ5->FQ5_DATINI) + " / " + DTOC(FQ5->FQ5_DATFIM) + CHR(13) + CHR(10)  + CHR(13) + CHR(10) //"DATA INI/FIM: "
						CMSG += STR0069 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"EQUIPAMENTO:"
						
						DBSELECTAREA("FP8")
						DBSETORDER(1)
						DBSEEK(XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA)
						WHILE !FP8->(EOF()) .AND. FP8->(FP8_FILIAL+FP8_PROJET+FP8_OBRA+FP8_SEQTRA) == XFILIAL("FP8")+ZA6->(ZA6_PROJET+ZA6_OBRA+ZA6_SEQTRA)
							DBSELECTAREA("ST9")
							DBSETORDER(1)
							IF DBSEEK(XFILIAL("ST9")+FP8->FP8_TRANSP)
								CMSG += " - " + ALLTRIM(ST9->T9_PLACA) + " - " + FP8->FP8_TRANSP + " - " + FP8->FP8_DESTRA + CHR(13) + CHR(10)
							ENDIF
							FP8->(DBSKIP())
						ENDDO
						
				ENDCASE
				
				IF EMPTY(EFROM) .OR. EMPTY(CPARA)
					//	MSGINFO("EMAIL NÃO CADASTRADO, FAVOR VERIFICAR." , "GPO - GRCONTR.PRW")
				ELSE
					IF LEN(CMSG) > 0
						LOCA01313( EFROM, CPARA , CCC, CTITULO, CMSG, CANEXO, CCCO)
					ENDIF
					IF !EMPTY(CANEXO)
						FERASE(CANEXO)
					ENDIF
				ENDIF
			NEXT N
		ELSE
			DBSELECTAREA("FP1")
			DBSETORDER(1)
			DBSEEK(XFILIAL("FP1")+FP0->FP0_PROJET)
			CAUX := ""
			FOR _NT := 1 TO LEN(AASREV)
				CAUX += IIF(!EMPTY(CAUX),', ','') + ALLTRIM(STR(AASREV[_NT],12,0)) 
			NEXT _NT
			
			F_ASEMAIL(FP0->FP0_PROJET,FP0->FP0_TIPOSE,CAUX)
			CMSG := CMSG1
			
			IF (EMPTY(EFROM) .OR. EMPTY(CPARA))
				if _lMens
					//MSGINFO(STR0070 , STR0004) //"EMAIL NÃO CADASTRADO, FAVOR VERIFICAR."###"GPO - GRCONTR.PRW"
					//conout(STR0070)
				EndIF
			ELSE
				CMSG    := STR0051 + CHR(13)+CHR(10) //"ESTE EMAIL É PARA INFORMAR QUE FOI GERADA NO SISTEMA A AS:"
				CTITULO := STR0052 + FQ5->FQ5_AS //"GERACAO AS: "
				CMSG    += CTITULO + CHR(13) + CHR(10)
				IF LEN(CMSG) > 0
					LOCA01313(EFROM, CPARA, CCC, CTITULO, CMSG, CANEXO, CCCO)
				ENDIF
				IF !EMPTY(CANEXO)
					FERASE(CANEXO)
				ENDIF
			ENDIF
		ENDIF
	ELSE
		MSGINFO(STR0071 , STR0004) //"VERIFICAR CNPJ/CPF DO CLIENTE"###"GPO - GRCONTR.PRW"
	ENDIF
	
ELSE
	
	IF LEN(AERROSZBX)>0
		IF MSGYESNO(STR0072) //"PROPOSTA NÃO PODE SER CONFIRMADA. DESEJA VISUALIZAR OS ERROS ??"
			LOCA00516(AERROSZBX,STR0073)  //VISUALIZA OS ERROS //"ERROS"
		ENDIF
	ELSE
		MSGSTOP(STR0074 , STR0004) //"PROPOSTA NÃO PODE SER CONFIRMADA !"###"GPO - GRCONTR.PRW"
	ENDIF
	
ENDIF

DBSELECTAREA("FP0")

INCLUI  := LINCBKP
ALTERA  := LALTBKP
AROTINA := AROTBKP

RETURN .T.



// ======================================================================= \\
FUNCTION LOCA01302( CCONTRATO , CCODCLI , CLOJCLI , CPROJETO )
// ======================================================================= \\

LOCAL   AAREA      := GETAREA()
LOCAL   NSEQGUI	   := 1
LOCAL   ASEQCAR	   := {}
LOCAL   CSEG   	   := ""		// A ROTINA PRECISA PASSAR CORRETAMENTE PARA TRATARMOS 
LOCAL   CVIAGEM	   := ""
LOCAL   CNRAS	   := ""
LOCAL   LNUMCTR    := .F.
LOCAL   _LNOFROTA  := .F.
LOCAL   _LVLDEQUIP := SUPERGETMV("MV_LOCX257",.F.,.T.)
LOCAL   NX         := 0 
LOCAL   NZ         := 0 
LOCAL   XIT        := 0 
Local _GRCONTR_ := EXISTBLOCK( "GRCONTR_" )
Local _MV_LOC207 := SUPERGETMV("MV_LOCX207",,.F.)


PRIVATE CORIGEM , CDESTINO , CCONDPAG , CDESCCON , NPERADV 
PRIVATE AREGSDTQ   := {}
PRIVATE NVIAGEM    := 0

FP1->(DBSETORDER(1))
FP1->(DBSEEK(XFILIAL("FP1")+CPROJETO))

WHILE FP1->(!EOF()) .AND. FP1->FP1_FILIAL+FP1->FP1_PROJET == XFILIAL("FP1")+CPROJETO
	
	// --> APURA OS SERVICOS DE LOCACAO QUE DEVERAO SER CRIADOS COMO VIAGENS NO DTQ
	NSEQGUI	:= 1
	
	LOCA01307( ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA+"T" , "1" , SUBSTR(FP1->FP1_NOMORI,1,25) , CODCLVAL(ALLTRIM(CCONTRATO)) ) 
	LOCA01307( ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA     , "1" , SUBSTR(FP1->FP1_NOMORI,1,25) , CODCLVAL(ALLTRIM(CCONTRATO))+FP1->FP1_OBRA+"T" )
	
	FP4->(DBSETORDER(1))
	FP4->(DBSEEK(XFILIAL("FP4")+CPROJETO+FP1->FP1_OBRA))
	
	WHILE FP4->(!EOF()) .AND. FP4->FP4_FILIAL+FP4->FP4_PROJET+FP4->FP4_OBRA == XFILIAL("FP4")+CPROJETO+FP1->FP1_OBRA
		
		// --> ATUALIZA A AGENDA DA FROTA.
		DO CASE
		CASE !EMPTY( FP4->FP4_GUIALO )
			CFROTA := FP4->FP4_GUIALO
		CASE !EMPTY( FP4->FP4_GUINDA )
			CFROTA := FP4->FP4_GUINDA
		OTHERWISE
			CFROTA := FP4->FP4_GUINDA
		ENDCASE
		
		DO CASE
		CASE  FP4->FP4_TIPOSE == "E"
			CSEG := "20"				// "02"
		CASE  FP4->FP4_TIPOSE $ "M;T"
			CSEG := "22"				// "06"
		CASE FP4->FP4_TIPOSE  == "O"
			CSEG := "29"				// "07"
		ENDCASE
		
		IF _LVLDEQUIP .AND. FP4->FP4_TIPOSE != "O" .AND. FP4->FP4_TIPOSE != "M" .AND. EMPTY(CFROTA) 
			IF EMPTY(FP4->FP4_AS) .OR. LEFT(FP4->FP4_AS, 2) != CSEG
				_LNOFROTA := .T.
			ENDIF
			FP4->(DBSKIP())
			LOOP
		ENDIF
		
		IF EMPTY(FP4->FP4_AS) .OR. LEFT(FP4->FP4_AS, 2) != CSEG
			CNRAS := GERANUMAS( CSEG , CPROJETO, FP4->FP4_OBRA, NSEQGUI, FP4->FP4_FILIAL  )
		ELSE
			CNRAS := FP4->FP4_AS
		ENDIF
		
		CEQANT  := FP4->FP4_GUINDA
		NSEQGUI	+= 1
		CTIPOAS := GETTIPOAS(FP4->FP4_GUINDA) //"G"  // LOCACAO GUINDASTE
		
		CCONDPAG:=FP4->FP4_CONPAG
		CDESCCON:=POSICIONE("SE4",1,XFILIAL("SE4")+CCONDPAG,"E4_DESCRI")
		NPERADV :=0
		CINCADV :=0
		NPERICM :=0
		CINCICM :=0
		CSERVICO:= "2" //GUINDASTE
		NVLRINF := 0
		
		ADTQ := {}
		
		DBSELECTAREA("FQ5")
		DBSETORDER(8)
		IF DBSEEK(XFILIAL("FQ5") + CPROJETO + FP1->FP1_OBRA +CNRAS )
			RECLOCK("FQ5",.F.)
			CVIAGEM := FQ5->FQ5_VIAGEM
			
			AADD(ADTQ , {"FQ5_FILIAL" , FQ5->FQ5_FILIAL})
			AADD(ADTQ , {"FQ5_FILORI" , FQ5->FQ5_FILORI})
			AADD(ADTQ , {"FQ5_VIAGEM" , FQ5->FQ5_VIAGEM})
			AADD(ADTQ , {"FQ5_CONTRA" , FQ5->FQ5_CONTRA})
			AADD(ADTQ , {"FQ5_DATGER" , FQ5->FQ5_DATGER})
			AADD(ADTQ , {"FQ5_HORGER" , FQ5->FQ5_HORGER})

			IF FQ5->FQ5_STATUS == "7" 
				AADD(ADTQ, {"FQ5_STATUS","1"})
			ENDIF
		ELSE
			RECLOCK("FQ5",.T.)
			CVIAGEM := GETSX8NUM("FQ5", "FQ5_VIAGEM" )
			CONFIRMSX8()
			
			AADD(AASNOVA, FQ5->(RECNO()))		// ADICIONA AS PARA IMPRESSÃO EM PDF 
			
			AADD(ADTQ , {"FQ5_FILIAL" , RETFILGRV("FQ5_FILIAL")}) 
			AADD(ADTQ , {"FQ5_FILORI" , RETFILGRV("FQ5_FILORI")}) 
			AADD(ADTQ , {"FQ5_VIAGEM" , CVIAGEM})
			AADD(ADTQ , {"FQ5_CONTRA" , CPROJETO})
			AADD(ADTQ , {"FQ5_DATGER" , DDATABASE})
			AADD(ADTQ , {"FQ5_HORGER" , SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)})
			AADD(ADTQ , {"FQ5_STATUS" , "1"})
		ENDIF
		
		AADD(ADTQ , {"FQ5_ROTA"   , "000001"})
		AADD(ADTQ , {"FQ5_TIPVIA" , "1"})
		AADD(ADTQ , {"FQ5_DATINI" , FP4->FP4_DTINI})
		AADD(ADTQ , {"FQ5_HORINI" , FP4->FP4_HRINI})
		AADD(ADTQ , {"FQ5_DATFIM" , FP4->FP4_DTFIM})
		AADD(ADTQ , {"FQ5_HORFIM" , FP4->FP4_HRFIM})
		AADD(ADTQ , {"FQ5_SERTMS" , "2"})
		AADD(ADTQ , {"FQ5_TIPTRA" , "1"  })
		AADD(ADTQ , {"FQ5_ENCERR" , "1"})
		AADD(ADTQ , {"FQ5_NOMCLI" , FP0->FP0_CLINOM})
		AADD(ADTQ , {"FQ5_ORIGEM" , "EMPRESA"})
		AADD(ADTQ , {"FQ5_DESTIN" , FP1->FP1_MUNORI+FP1->FP1_ESTORI})
		AADD(ADTQ , {"FQ5_CONDPG" , CCONDPAG})
		AADD(ADTQ , {"FQ5_DCOND"  , CDESCCON})
		AADD(ADTQ , {"FQ5_VLRINF" , NVLRINF})
		IF ! FQ5->( FOUND() )					// SE FOR NOVO REGISTRO, INICIA COM STATUS "1" 
			IF !_MV_LOC207 //SUPERGETMV("MV_LOCX207",,.F.)
				AADD(ADTQ , {"FQ5_STATUS","1"})
			ELSE
				AADD(ADTQ , {"FQ5_STATUS","6"})
			ENDIF
		ENDIF
		AADD(ADTQ , {"FQ5_SOT"    , CPROJETO})
		AADD(ADTQ , {"FQ5_OBRA"   , FP1->FP1_OBRA})
		AADD(ADTQ , {"FQ5_TPAS"   , CTIPOAS})
		AADD(ADTQ , {"FQ5_AS"     , CNRAS})
		AADD(ADTQ , {"FQ5_GUINDA" , FP4->FP4_GUINDA})
		AADD(ADTQ , {"FQ5_SEQVIA" , FP4->FP4_SEQGUI})
		AADD(ADTQ , {"FQ5_CODCLI" , FP0->FP0_CLI})
		AADD(ADTQ , {"FQ5_LOJA"   , FP0->FP0_LOJA})

		IF _GRCONTR_ //EXISTBLOCK( "GRCONTR_" )
			XRET := EXECBLOCK( "GRCONTR_", .T., .T., { "ANTESDTQ", @ADTQ, "FP4" } )
			IF VALTYPE( XRET ) == "A"
				ADTQ := XRET
			ENDIF
		ENDIF
		
		IF (LRESENTEML := LOCA01310(ADTQ , FP4->FP4_VIAGEM , , IIF(FQ5->FQ5_STATUS=="7" .OR. FQ5->FQ5_STATUS=="6" , .F. , .T.)) ) // INSERIDO O PARAMETRO 4 (.F.) PARA FORÇAR A ALTERAÇÃO DO STATUS 
			IF LRESENTEML
				AADD(AASREV, FQ5->( RECNO() )) 	// ADICIONA AS PARA IMPRESSÃO EM PDF 
			ENDIF
			FOR XIT := 1 TO LEN(ADTQ)
				FQ5->( FIELDPUT(FIELDPOS(ADTQ[XIT][1]), ADTQ[XIT][2]) )
			NEXT XIT
		ENDIF
		
		FQ5->(MSUNLOCK())
		
		RECLOCK("FP4",.F.)
		REPLACE FP4_VIAGEM WITH CVIAGEM
		REPLACE FP4_AS     WITH CNRAS
		REPLACE FP4_DTAS   WITH IIF(EMPTY(FP4_DTAS),DDATABASE,FP4_DTAS)
		FP4->(MSUNLOCK()) 
		
		DBSELECTAREA("FP4")
		
		LOCA01307( ALLTRIM(CNRAS) , "2" , SUBSTR(FP1->FP1_NOMORI,1,20) , CODCLVAL(ALLTRIM(CCONTRATO))+FP1->FP1_OBRA ) 
		
		// ATUALIZA APONTADOR DE VIAGEM (CONTROLE DE OCORRÊNCIAS / DIÁRIO DE BORDO)
		LOCA00522( CPROJETO, CVIAGEM, FP0->FP0_DATINC, FP0->FP0_CLI, FP0->FP0_LOJA, FP0->FP0_CLINOM, FP4->FP4_PEDCLI, FP4->FP4_SOLICT, FP4->FP4_GUINDA )
		
		FP4->(DBSKIP())
	ENDDO
	
	// --> APURA TRANSPORTES QUE DEVERÃO SER INCLUIDOS NO DTQ
	/*
	ZA6->(DBSETORDER(1))
	ZA6->(DBSEEK(XFILIAL("ZA6")+CPROJETO+FP1->FP1_OBRA))
	
	NQTEQ     := 1
	LPRIMEIRA := .T.
	NSEQTRANS := 1
	
	WHILE ZA6->(!EOF()) .AND. ZA6->ZA6_FILIAL+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA == XFILIAL("ZA6")+CPROJETO+FP1->FP1_OBRA
		
		CFROTA     := ZA6->ZA6_TRANSP
		NOBRA      := VAL(ZA6->ZA6_OBRA)
		CEQANT     := ZA6->ZA6_TRANSP
		NSEQTRANS  += 1
		CTIPOAS    := "T"  // TRANSPORTE
		CCONDPAG   := ZA6->ZA6_CONPAG
		CDESCCON   := POSICIONE("SE4",1,XFILIAL("SE4")+CCONDPAG,"E4_DESCRI")
		NPERADV    := 0
		CINCADV    := 0
		NPERICM    := 0
		CINCICM    := 0
		CSERVICO   := "T" 	// 1=TRANSPORTE
		NVLRINF    := 0
		NTOTVRCARG := 0
		AAREAZA7   := ZA7->(GETAREA())
		
		DBSELECTAREA("ZA7")
		DBSETORDER(1)
		IF MSSEEK(XFILIAL("ZA7") + ZA6->ZA6_PROJET + ZA6->ZA6_OBRA + ZA6->ZA6_SEQTRA)
			NVIAGEM := 0
			ASEQCAR := {}
			WHILE !EOF() .AND. ZA7->ZA7_PROJET + ZA7->ZA7_OBRA + ZA7->ZA7_SEQTRA == ZA6->ZA6_PROJET + ZA6->ZA6_OBRA + ZA6->ZA6_SEQTRA
				NVIAGEM += VAL(ZA7->ZA7_QUANT)
				NTOTVRCARG += ZA7->ZA7_VRCARG
				FOR NX:=1 TO VAL(ZA7->ZA7_QUANT)
					AADD( ASEQCAR, {ZA7->ZA7_SEQTRA , ZA7->ZA7_SEQCAR , ZA7->ZA7_JUNTO , ZA7->ZA7_AS , ZA7->ZA7_FILIAL}) 
				NEXT NX 
				DBSELECTAREA("ZA7")
				DBSKIP()
				NSEQTRANS++
			ENDDO
		ENDIF
		RESTAREA(AAREAZA7)
		
		FOR NZ := 1 TO NVIAGEM
			IF EMPTY(ASEQCAR[NZ,4])
				CNRAS := GERANUMAS(  "10" , CPROJETO, STRZERO(NOBRA,3) , NZ, ASEQCAR[NZ,5])
			ELSE
				CNRAS := ASEQCAR[NZ,4]
			ENDIF
			
			DBSELECTAREA("FQ8")
			DBSETORDER(1)
			MSSEEK(XFILIAL("FQ8") + ZA6->ZA6_PROJET+ZA6->ZA6_OBRA + ASEQCAR[NZ,1] + SPACE(3) + SPACE(3) + ASEQCAR[NZ,2] ) 		// OS SPACE(3) SÃO RESPECTIVAMENTE OS CAMPOS DE SEQGUI E SEQGRU QUE NÃO EXISTEM NA ZA7
			
			DBSELECTAREA("FP8")
			DBSETORDER(1)
			MSSEEK(XFILIAL("FP8") + ZA6->ZA6_PROJET +ZA6->ZA6_OBRA + ZA6->ZA6_SEQTRA ) 
			
			LNUMCTR := .F.
			ADTQ := {}
			
			DBSELECTAREA("FQ5")
			DBSETORDER(8)
			IF DBSEEK(XFILIAL("FQ5") + CPROJETO + ZA6->ZA6_OBRA + CNRAS )
				RECLOCK("FQ5",.F.)
				CVIAGEM:=FQ5->FQ5_VIAGEM
				
				// VERIFICA SE A AS JÁ TEM NUMERO DE CT-E
				IF ! EMPTY(FQ5->FQ5_NUMCTR)
					LNUMCTR := .T.
				ENDIF
				
				AADD(ADTQ , {"FQ5_FILIAL" , FQ5->FQ5_FILIAL})
				AADD(ADTQ , {"FQ5_FILORI" , FQ5->FQ5_FILORI})
				AADD(ADTQ , {"FQ5_VIAGEM" , FQ5->FQ5_VIAGEM})
				AADD(ADTQ , {"FQ5_CONTRA" , FQ5->FQ5_CONTRA})
				AADD(ADTQ , {"FQ5_ORCA"   , FQ5->FQ5_ORCA})
				AADD(ADTQ , {"FQ5_DATGER" , FQ5->FQ5_DATGER})
				AADD(ADTQ , {"FQ5_HORGER" , FQ5->FQ5_HORGER})
			ELSE
				RECLOCK("FQ5",.T.)
				CVIAGEM := GETSX8NUM("FQ5", "FQ5_VIAGEM" )
				CONFIRMSX8()
				
				AADD(AASNOVA, FQ5->(RECNO()))	// ADICIONA AS PARA IMPRESSÃO EM PDF 
				
				AADD(ADTQ , {"FQ5_FILIAL" , RETFILGRV("FQ5_FILIAL")}) 
				AADD(ADTQ , {"FQ5_FILORI" , RETFILGRV("FQ5_FILORI")}) 
				AADD(ADTQ , {"FQ5_VIAGEM" , CVIAGEM})
				AADD(ADTQ , {"FQ5_CONTRA" , AAM->AAM_CONTRT})
				AADD(ADTQ , {"FQ5_ORCA"   , SUBSTR(FP1->FP1_PROJET,5,22)})
				AADD(ADTQ , {"FQ5_DATGER" , DDATABASE})
				AADD(ADTQ , {"FQ5_HORGER" , SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)})
			ENDIF
			
			AADD(ADTQ , {"FQ5_ROTA"   , "000001"})
			AADD(ADTQ , {"FQ5_TIPVIA" , "1"})
			AADD(ADTQ , {"FQ5_DATINI" , ZA6->ZA6_DTINI})
			AADD(ADTQ , {"FQ5_HORINI" , ZA6->ZA6_HRINI})
			AADD(ADTQ , {"FQ5_DATFIM" , ZA6->ZA6_DTFIM})
			AADD(ADTQ , {"FQ5_HORFIM" , ZA6->ZA6_HRFIM})
			AADD(ADTQ , {"FQ5_SERTMS" , "2"})
			AADD(ADTQ , {"FQ5_TIPTRA" , "1"})
			AADD(ADTQ , {"FQ5_NOMCLI" , FP0->FP0_CLINOM})						// NOME DO CLIENTE
			AADD(ADTQ , {"FQ5_CODCLI" , FP0->FP0_CLI}) 							// NOME DO CLIENTE
			AADD(ADTQ , {"FQ5_LOJA"   , FP0->FP0_LOJA}) 						// NOME DO CLIENTE
			AADD(ADTQ , {"FQ5_ORIGEM" , ZA6->ZA6_MUNORI+"/"+ZA6->ZA6_ESTORI}) 	// CIDADE+"/"+ESTADO
			AADD(ADTQ , {"FQ5_DESTIN" , ZA6->ZA6_MUNDES+"/"+ZA6->ZA6_ESTDES}) 	
			AADD(ADTQ , {"FQ5_CONDPG" , CCONDPAG}) 								// CONDIÇÃO DE PAGAMENTO
			AADD(ADTQ , {"FQ5_DCOND"  , CDESCCON}) 								// DESCRICAO DA CONDIÇÃO DE PAGAMENTO
			
			IF !LNUMCTR 														// --> SE A AS NÃO TEM NUMERO DE CT-E
				AADD(ADTQ , {"FQ5_PERADV", 0})     	  											//% AD-VALOREM
				AADD(ADTQ , {"FQ5_TOTFRE", FQ8->FQ8_VRFRET})									// VALOR TOTAL DO FRETE
				AADD(ADTQ , {"FQ5_PERICM", LOCA01306( ZA6->ZA6_ESTORI , ZA6->ZA6_ESTDES )	}) 	// PERCENTUAL DE ICMS
				AADD(ADTQ , {"FQ5_VLRINF", FQ8->FQ8_VRFRET})  	 								// FRETE PESO
				AADD(ADTQ , {"FQ5_BASICM", FQ8->FQ8_VRFRET})									// BASE ICMS
				AADD(ADTQ , {"FQ5_VALADV", FQ5->FQ5_BASADV * FQ5->FQ5_PERADV/100})				// FRETE VALOR
				AADD(ADTQ , {"FQ5_BASADV", NTOTVRCARG})		    								// BASE FRETE VALOR     - VALOR DA CARGA
				AADD(ADTQ , {"FQ5_VALICM", FQ8->FQ8_VRFRET * FQ5->FQ5_PERICM /100})				// VAL	OR DO ICM
				IF ! FQ5->( FOUND() )											// --> SE FOR NOVO REGISTRO, INICIA COM STATUS "1"
					IF !SUPERGETMV("MV_LOCX207",,.F.)
						AADD(ADTQ , {"FQ5_STATUS","1"})
					ELSE
						AADD(ADTQ , {"FQ5_STATUS","6"})
					ENDIF
				ENDIF
			ENDIF
			AADD(ADTQ , {"FQ5_PERADV", LOCA01305( ZA6->ZA6_ESTORI , ZA6->ZA6_ESTDES )	}) // PERCENTUAL FRETE VALOR
			AADD(ADTQ , {"FQ5_SOT"   , CPROJETO})
			AADD(ADTQ , {"FQ5_OBRA"  , ZA6->ZA6_OBRA})
			AADD(ADTQ , {"FQ5_TPAS"  , CTIPOAS})
			AADD(ADTQ , {"FQ5_AS"    , CNRAS})
			AADD(ADTQ , {"FQ5_SEQCAR", ASEQCAR[NZ,2]})
			AADD(ADTQ , {"FQ5_SEQVIA", ZA6->ZA6_SEQTRA})
			AADD(ADTQ , {"FQ5_EQUIP" , FP8->FP8_TRANSP})
			AADD(ADTQ , {"FQ5_JUNTO" , ASEQCAR[NZ,3]})

			IF EXISTBLOCK( "GRCONTR_" )
				XRET := EXECBLOCK( "GRCONTR_", .T., .T., { "ANTESDTQ", @ADTQ, "ZA6" } )
				IF VALTYPE( XRET ) == "A"
					ADTQ := XRET
				ENDIF
			ENDIF
			
			IF LOCA01310(ADTQ , CVIAGEM)
				FOR XIT := 1 TO LEN(ADTQ)
					FQ5->( FIELDPUT(FIELDPOS(ADTQ[XIT][1]), ADTQ[XIT][2]) )
				NEXT
			ENDIF
			
			FQ5->(MSUNLOCK())
			
			IF EMPTY(ASEQCAR[NZ,3])
				LOCA01307( ALLTRIM(CNRAS) , "2" , SUBSTR(FP1->FP1_NOMORI,1,20)+" - TRANSPORTES" , CODCLVAL(ALLTRIM(CCONTRATO))+FP1->FP1_OBRA+"T" ) 
			ENDIF
			
			AAREAZA7 := ZA7->(GETAREA())
			DBSELECTAREA("ZA7")
			DBSETORDER(1)
			IF MSSEEK(XFILIAL("ZA7") + ZA6->ZA6_PROJET + ZA6->ZA6_OBRA + ZA6->ZA6_SEQTRA + ASEQCAR[NZ,2])
				RECLOCK("ZA7",.F.)
				ZA7->ZA7_VIAGEM := CVIAGEM
				ZA7->ZA7_AS		:= CNRAS
				ZA7->(MSUNLOCK())
			ENDIF
			RESTAREA(AAREAZA7)
		NEXT NZ 
		
		DBSELECTAREA("ZA6")
		RECLOCK("ZA6",.F.)
		REPLACE ZA6_VIAGEM WITH CVIAGEM
		REPLACE ZA6_AS     WITH CNRAS
		ZA6->(MSUNLOCK())
		
		FP8->(DBSETORDER(1))
		FP8->(DBSEEK( XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA, .F. ))
		
		// --> ATUALIZA APONTADOR DE VIAGEM (CONTROLE DE OCORRÊNCIAS / DIÁRIO DE BORDO)
		LOCA00522( CPROJETO, CVIAGEM, FP0->FP0_DATINC, FP0->FP0_CLI, FP0->FP0_LOJA, FP0->FP0_CLINOM, ZA6->ZA6_PEDCLI, ZA6->ZA6_SOLICT, FP8->FP8_TRANSP )
		
		// --> ATUALIZA A AGENDA DA FROTA.
		FP8->(DBSETORDER(1))
		FP8->(DBSEEK( XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA, .F. ))
		WHILE !FP8->(EOF()) .AND. ( FP8->FP8_FILIAL+FP8->FP8_PROJET +FP8->FP8_OBRA +FP8->FP8_SEQTRA == XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA )
			IF !EMPTY( FP8->FP8_TRALOC )
				CFROTA := FP8->FP8_TRALOC
			ELSE
				CFROTA := FP8->FP8_TRANSP
			ENDIF
			FP8->(DBSKIP())
		ENDDO
		
		DBSELECTAREA("ZA6")
		ZA6->(DBSKIP())
		NOBRA++
	ENDDO
	*/
	
	// APURA OS SERVICOS DE LOCACAO QUE DEVERAO SER CRIADOS COMO VIAGENS NO DTQ
	// ========================================================================
	NSEQGRUA := 1
	
/*	// --> P.E. DESCONTINUADO !!! 
	IF EXISTBLOCK("U_LOCC001_")
		U_LOCC001_("GRV_PROJETO", {FP0->FP0_FILIAL, FP0->FP0_PROJET} )  // TRATATIVA GRAVAÇAO LOG: ZA0, ZA1 E ZAG 
	ENDIF
*/	// --> P.E. DESCONTINUADO !!! 
	
	FPA->(DBSETORDER(1))
	FPA->(DBSEEK(XFILIAL("FPA")+CPROJETO+FP1->FP1_OBRA))
	
	WHILE FPA->(!EOF()) .AND. FPA->FPA_FILIAL+FPA->FPA_PROJET+FPA->FPA_OBRA == XFILIAL("FPA")+CPROJETO+FP1->FP1_OBRA
		
		IF !EMPTY(ALLTRIM(FPA->FPA_NFREM))
			FPA->(DBSKIP())
			LOOP
		ENDIF
		
		CFROTA := FPA->FPA_GRUA
		
		DO CASE
		CASE  FPA->FPA_TIPOSE $ "L;S"
			CSEG := "30"				// "04"
		CASE  FPA->FPA_TIPOSE $ "M;T"
			CSEG := "32"				// "04"
		CASE  FPA->FPA_TIPOSE == "Z"
			CSEG := "33"				// "04"
		CASE FPA->FPA_TIPOSE  == "O"
			CSEG := "39"				// "04"
		ENDCASE
		
		// comentado por frank em 14/07/21 para sempre sobrepor a numeração da AS e nao gerar uma nova
		IF EMPTY(FPA->FPA_AS) //.OR. ALLTRIM(GETADVFVAL("FQ5", "FQ5_STATUS",XFILIAL("FQ5")+CPROJETO + FPA->FPA_OBRA + FPA->FPA_AS,8,"")) == "9"
			CNRAS := GERANUMAS( /*"04"*/ CSEG , CPROJETO, FPA->FPA_OBRA, NSEQGRUA, FPA->FPA_FILIAL  )
		ELSE
			CNRAS := FPA->FPA_AS
		ENDIF
		
		CEQANT  := FPA->FPA_GRUA
		NSEQGRUA+= 1
		CTIPOAS := FP0->FP0_TIPOSE //28.06.2011 MAICKON - INCLUIDA POIS NÃO ESTAVA GERANDO VIAGEM PARA PLATAFORMA
		
		CCONDPAG:=FPA->FPA_CONPAG
		CDESCCON:=POSICIONE("SE4",1,XFILIAL("SE4")+CCONDPAG,"E4_DESCRI")
		
		AAM->(DBSETORDER(1))
		AAM->(DBSEEK(XFILIAL("AAM")+CCONTRATO))
		
		CSERVICO:= "3"//3=GRUA
		
		ADTQ := {}
		
		DBSELECTAREA("FQ5")
		DBSETORDER(8)
		IF DBSEEK(XFILIAL("FQ5") + CPROJETO + FPA->FPA_OBRA + CNRAS )
			RECLOCK("FQ5",.F.)
			CVIAGEM:=FQ5->FQ5_VIAGEM
			
			AADD(ADTQ , {"FQ5_FILIAL" , FQ5->FQ5_FILIAL})
			AADD(ADTQ , {"FQ5_FILORI" , FQ5->FQ5_FILORI})
			AADD(ADTQ , {"FQ5_VIAGEM" , FQ5->FQ5_VIAGEM})
			AADD(ADTQ , {"FQ5_CONTRA" , FQ5->FQ5_CONTRA})
			AADD(ADTQ , {"FQ5_DATGER" , FQ5->FQ5_DATGER})
			AADD(ADTQ , {"FQ5_HORGER" , FQ5->FQ5_HORGER})

			IF FQ5->FQ5_STATUS == "7" .or. FQ5->FQ5_STATUS == "9" // ajustado por Frank em 14/07/21
				AADD(ADTQ, {"FQ5_STATUS","1"})
			ENDIF
		ELSE
			RECLOCK("FQ5",.T.)
			CVIAGEM := GETSX8NUM("FQ5", "FQ5_VIAGEM" )
			CONFIRMSX8()
			
			AADD(AASNOVA, FQ5->(RECNO()))		// ADICIONA AS PARA IMPRESSÃO EM PDF 
			
			AADD(ADTQ , {"FQ5_FILIAL" , RETFILGRV("FQ5_FILIAL")}) 
			AADD(ADTQ , {"FQ5_FILORI" , RETFILGRV("FQ5_FILORI")}) 
			AADD(ADTQ , {"FQ5_VIAGEM" , CVIAGEM})
			AADD(ADTQ , {"FQ5_CONTRA" , CPROJETO})
			AADD(ADTQ , {"FQ5_DATGER" , DDATABASE})
			AADD(ADTQ , {"FQ5_HORGER" , SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)})
			AADD(ADTQ , {"FQ5_STATUS" , "1"})
		ENDIF
		
		AADD(ADTQ , {"FQ5_ROTA"   , "000001"})
		AADD(ADTQ , {"FQ5_TIPVIA" , "1"})
		AADD(ADTQ , {"FQ5_DATINI" , FPA->FPA_DTINI})
		AADD(ADTQ , {"FQ5_HORINI" , FPA->FPA_HRINI})
		AADD(ADTQ , {"FQ5_DATFIM" , FPA->FPA_DTENRE})
		AADD(ADTQ , {"FQ5_HORFIM" , FPA->FPA_HRFIM})
		AADD(ADTQ , {"FQ5_SERTMS" , "2"})
		AADD(ADTQ , {"FQ5_TIPTRA" , "1"})
		AADD(ADTQ , {"FQ5_NOMCLI" , FP0->FP0_CLINOM})
		AADD(ADTQ , {"FQ5_ORIGEM" , "EMPRESA"})
		AADD(ADTQ , {"FQ5_DESTIN" , FP1->FP1_MUNORI+FP1->FP1_ESTORI})
		AADD(ADTQ , {"FQ5_CONDPG" , CCONDPAG})
		AADD(ADTQ , {"FQ5_DCOND"  , CDESCCON})
		IF ! FQ5->( FOUND() )					// SE FOR NOVO REGISTRO, INICIA COM STATUS "1" 
			IF !_MV_LOC207 //SUPERGETMV("MV_LOCX207",,.F.)
				AADD(ADTQ , {"FQ5_STATUS","1"})
			ELSE
				AADD(ADTQ , {"FQ5_STATUS","6"})
			ENDIF
		ENDIF
		AADD(ADTQ , {"FQ5_SOT"   , CPROJETO})
		AADD(ADTQ , {"FQ5_OBRA"  , FP1->FP1_OBRA})
		AADD(ADTQ , {"FQ5_TPAS"  , CTIPOAS})
		AADD(ADTQ , {"FQ5_AS"    , CNRAS})
		AADD(ADTQ , {"FQ5_GUINDA", FPA->FPA_GRUA})
		AADD(ADTQ , {"FQ5_SEQVIA", FPA->FPA_SEQGRU})
		AADD(ADTQ , {"FQ5_CODCLI", FP0->FP0_CLI})	//NOME DO CLIENTE
		AADD(ADTQ , {"FQ5_LOJA"  , FP0->FP0_LOJA})	//NOME DO CLIENTE
		AADD(ADTQ , {"FQ5_XQTD"  , FPA->FPA_QUANT}) // FRANK ZWARG FUGA - 13/08/2020
		AADD(ADTQ , {"FQ5_XPROD" , FPA->FPA_PRODUT}) // FRANK ZWARG FUGA - 13/08/2020
		IF _GRCONTR_ //EXISTBLOCK( "GRCONTR_" )
			XRET := EXECBLOCK( "GRCONTR_", .T., .T., { "ANTESDTQ", @ADTQ, "FPA" } )
			IF VALTYPE( XRET ) == "A"
				ADTQ := XRET
			ENDIF
		ENDIF
		
		IF (LRESENTEML := LOCA01310(ADTQ , CVIAGEM)) 
			IF LRESENTEML
				AADD(AASREV, FQ5->( RECNO() )) 	// ADICIONA AS PARA IMPRESSÃO EM PDF 
			ENDIF
			FOR XIT := 1 TO LEN(ADTQ)
				FQ5->&(ADTQ[XIT][1]) := ADTQ[XIT][2]
			NEXT
		ENDIF
		
		FQ5->(MSUNLOCK())
		
		LOCA01307( ALLTRIM(CNRAS) , "2" , ALLTRIM(SUBSTR(FP1->FP1_NOMORI,1,20))+STR0075 , CODCLVAL(ALLTRIM(CCONTRATO))+FP1->FP1_OBRA+"T" )  //" - LOCACAO"
		
		RECLOCK("FPA",.F.)
		REPLACE FPA_VIAGEM WITH CVIAGEM 
		REPLACE FPA_AS     WITH CNRAS 
		FPA->(MSUNLOCK()) 
		
		DBSELECTAREA("FPA")
		
		FPA->(DBSKIP())
	ENDDO
	
	FP1->(DBSKIP())
	
ENDDO 

IF _LNOFROTA
	MSGALERT(STR0076+CRLF+CRLF+STR0077) //"A AS NÃO FOI GERADA."###"PREENCHA O BEM!"
ELSE
	IF EXISTBLOCK("GRCTLFIM") 										// --> PONTO DE ENTRADA PARA AJUSTES NO FINAL DA GERAÇÃO DE CONTRATO/AS DE LOCAÇÃO.
		EXECBLOCK("GRCTLFIM",.T.,.T.,{AASNOVA})
	ENDIF
ENDIF

IF TYPE("_XAAREAZA0") == "U"
	_XAAREAZA0 := FP0->( GETAREA() )
ENDIF

FZLWDTQ(CPROJETO) 					// GERAR ASF (AS FILHA) PARA FRETE/TRANSPORTE DE EQUIPAMENTO POR MEIO DA ZLW 
FZUCDTQ(CPROJETO)					// GERAR ASF (AS FILHA) PARA FRETE/TRANSPORTE DE LOCAÇÃO     POR MEIO DA ZUC

FP0->( RESTAREA( _XAAREAZA0 ) )

RESTAREA( AAREA )

RETURN



// ======================================================================= \\
STATIC FUNCTION FZLWDTQ(CPROJETO)
// ======================================================================= \\

LOCAL CLSTANEXOS := ""
LOCAL CFROTA
LOCAL CNRAS
LOCAL CVIAGEM
LOCAL _ZLWREC
LOCAL XIT := 0 
Local _MV_LOC207 := SUPERGETMV("MV_LOCX207",,.F.)
Local _MV_RELFROM := GETMV("MV_RELFROM")
Local _MV_LOC154 := GETMV("MV_LOCX154",,"")

DBSELECTAREA("FP0")
DBSETORDER(1)
DBSEEK(XFILIAL("FP0")+CPROJETO)

IF FP0->FP0_TIPOSE != "E"		// SE PROJETO NÃO FOR EQUIPAMENTO SAI DA ROTINA
	RETURN NIL
ENDIF

FP4->(DBSETORDER(1))			// FILIAL+PROJET+OBRA_SEQGUI

DBSELECTAREA("FP1")
DBSETORDER(1)
DBSEEK(XFILIAL("FP1")+CPROJETO)

DBSELECTAREA("FPS")
DBSETORDER(2)
DBSEEK(XFILIAL("FPS")+CPROJETO, .T.)

WHILE ! FPS->(EOF()) .AND. FPS->FPS_FILIAL+FPS->FPS_PROJET == XFILIAL("FPS")+CPROJETO
	
	_ZLWREC := FPS->(RECNO())
	
	IF FP0->FP0_TIPOSE == "E"	// EQUIPAMENTO
		FP4->(DBSEEK(XFILIAL("FP4")+CPROJETO+FPS->FPS_OBRA+FPS->FPS_SEQGUI))
		CFROTA := FP4->FP4_GUINDA
	ENDIF
	
	IF EMPTY(FPS->FPS_X5COD)	// SE O CAMPO CÓDIGO CONJUNTO TRANSPORTADOR EM BRANCO, IGNORA
		FPS->(DBSKIP())
		LOOP
	ENDIF
	
	IF EMPTY(FPS->FPS_VIAGEM)
		CNRAS := GERANUMAS( /*"03"*/ "21", CPROJETO, FPS->FPS_OBRA, FPS->FPS_SEQGUI, FPS->FPS_FILIAL)
	ELSE
		DBSELECTAREA("FQ5")
		DBSETORDER(1)
		IF DBSEEK( XFILIAL("FQ5") + FPS->FPS_VIAGEM)
			CNRAS   := FQ5->FQ5_AS
		ENDIF
	ENDIF
	
	ADTQ := {}
	
	FQ5->(DBSETORDER(9))	// FQ5_FILIAL + FQ5_AS + FQ5_VIAGEM
	IF FQ5->(DBSEEK(XFILIAL("FQ5")+CNRAS, .T.))
		RECLOCK("FQ5", .F. )
		CVIAGEM := FQ5->FQ5_VIAGEM
		
		AADD(ADTQ , {"FQ5_FILORI" , FQ5->FQ5_FILORI})
		AADD(ADTQ , {"FQ5_CONTRA" , FQ5->FQ5_CONTRA})
		AADD(ADTQ , {"FQ5_DATGER" , FQ5->FQ5_DATGER})
		AADD(ADTQ , {"FQ5_HORGER" , FQ5->FQ5_HORGER})
			
		IF FQ5->FQ5_STATUS == "7"
			AADD(ADTQ, {"FQ5_STATUS","1"})
		ENDIF
	ELSE
		RECLOCK("FQ5",.T.)
		CVIAGEM := GETSX8NUM("FQ5", "FQ5_VIAGEM" )
		AADD(AASNOVA, FQ5->(RECNO()))			// ADICIONA AS PARA IMPRESSÃO EM PDF 
		
		AADD(ADTQ , {"FQ5_FILORI" , RETFILGRV("FQ5_FILORI")}) 
		AADD(ADTQ , {"FQ5_CONTRA" , PADR(FP0->FP0_PROJET,LEN(FQ5->FQ5_CONTRA))})
		AADD(ADTQ , {"FQ5_DATGER" , DDATABASE})
		AADD(ADTQ , {"FQ5_HORGER" , SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)})
		AADD(ADTQ , {"FQ5_STATUS" , "1"})
	ENDIF
	
	AADD(ADTQ , {"FQ5_FILIAL" , RETFILGRV("FQ5_FILIAL")}) 
	AADD(ADTQ , {"FQ5_TPAS"   , "F"})
	AADD(ADTQ , {"FQ5_AS"     , CNRAS})
	AADD(ADTQ , {"FQ5_VIAGEM" , CVIAGEM})
	AADD(ADTQ , {"FQ5_SOT"    , PADR(CPROJETO,LEN(FQ5->FQ5_SOT)) })
	AADD(ADTQ , {"FQ5_OBRA"   , FPS->FPS_OBRA})
	AADD(ADTQ , {"FQ5_NOMCLI" , FP0->FP0_CLINOM})
	AADD(ADTQ , {"FQ5_ORIGEM" , FPS->FPS_CIDORI+" "+FPS->FPS_UFORI})
	AADD(ADTQ , {"FQ5_DESTIN" , FPS->FPS_CIDEST+" "+FPS->FPS_UFDEST})
	IF ! FQ5->( FOUND() )					   		// SE FOR NOVO REGISTRO, INICIA COM STATUS "1" 
		IF !_MV_LOC207 //SUPERGETMV("MV_LOCX207",,.F.)
			AADD(ADTQ , {"FQ5_STATUS","1"})
		ELSE
			AADD(ADTQ , {"FQ5_STATUS","6"})
		ENDIF
	ENDIF
	AADD(ADTQ , {"FQ5_ROTA"  ,"000001"})
	AADD(ADTQ , {"FQ5_TIPVIA","1"})
	AADD(ADTQ , {"FQ5_SERTMS","2"})
	AADD(ADTQ , {"FQ5_TIPTRA","1"})
	AADD(ADTQ , {"FQ5_OBSCTB",FPS->FPS_OBS})
	AADD(ADTQ , {"FQ5_CODCLI", FP0->FP0_CLI})		// NOME DO CLIENTE
	AADD(ADTQ , {"FQ5_LOJA", FP0->FP0_LOJA})		// NOME DO CLIENTE
	AADD(ADTQ , {"FQ5_GUINDA", FPS->FPS_X5COD})
	AADD(ADTQ , {"FQ5_DATINI", FP4->FP4_DTINI})
	AADD(ADTQ , {"FQ5_DATFIM", FP4->FP4_DTFIM})
	AADD(ADTQ , {"FQ5_HORINI", FP4->FP4_HRINI})
	AADD(ADTQ , {"FQ5_HORFIM", FP4->FP4_HRFIM})
	
	IF LOCA01310(ADTQ , CVIAGEM) 					// VERIFICA SE EXISTE DIFERENÇA NA DTQ COM A ZLW - ESSE PROCESSO É REFERENTE A ASF.
		FOR XIT := 1 TO LEN(ADTQ)
			FQ5->( FIELDPUT(FIELDPOS(ADTQ[XIT][1]), ADTQ[XIT][2]) )
		NEXT XIT 
	ENDIF
	
	// --> MANDA E-MAIL REFERENTE A ALTERACAO DO ASF
	IF EMPTY(FPS->FPS_ALTERR) .and. .f. //Removido por Frank em 05/04/2022 por questão dos débitos técnicos
		CANEXO := CNRAS+".PDF"
		
		// Removido por Frank em 05/04/2022 por questão dos débitos técnicos
		IF .F. //__COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
		//	CANEXO     := GETSRVPROFSTRING("STARTPATH","")+CANEXO	// PEGA O ENDEREÇO COMPLETO DO ARQUIVO NO MICRO DO CLIENTE
		//	CLSTANEXOS += CANEXO + ";"
		ENDIF
		
		CTITULO	:= STR0078 + CPROJETO //"REVISÃO DE ASF - PROJETO "
		
		DBSELECTAREA("FP0")
		DBSETORDER(1)
		DBSEEK(XFILIAL("FP0")+FQ5->FQ5_SOT)
		
		EFROM := ALLTRIM(_MV_RELFROM) //ALLTRIM(USRRETNAME(RETCODUSR())) + "<" + ALLTRIM(USRRETMAIL(RETCODUSR())) + ">"
		CPARA := _MV_LOC154 //GETMV("MV_LOCX154",,"")
		CCC	  := ""
		CCCO  := ""
		// MENSAGEM
		CMSG  := STR0079+CNRAS+ CHR(13)+CHR(10) //"ESTE EMAIL É PARA INFORMAR QUE NO SISTEMA FOI REVISADA A ASF DE NUMERO: "
		CMSG  += STR0080+PADR(CPROJETO,LEN(FQ5->FQ5_SOT))+ CHR(13) + CHR(10) //"PROJETO: "
		
		IF LEN(CMSG) > 0
			LOCA01313( EFROM, CPARA, CCC, CTITULO, CMSG, CLSTANEXOS, CCCO)	// ROTINA DE ENVIO DE E-MAIL PADRÃO
		ENDIF
		
		FERASE(CANEXO)		// REMOVE ARQUIVO TEMPORÁRIO DO SERVIDOR
	ENDIF
	
	FQ5->(MSUNLOCK())
	
	FPS->(DBGOTO(_ZLWREC))
	
	FPS->(RECLOCK("FPS",.F.))
	FPS->FPS_VIAGEM	:= CVIAGEM
	FPS->FPS_VIAORI	:= IF(FP0->FP0_TIPOSE=="G", FP4->FP4_VIAGEM, FPA->FPA_VIAGEM)
	FPS->FPS_ALTERR := DTOS(DDATABASE)
	FPS->(MSUNLOCK())
	
	CONFIRMSX8()
	
	CHECKASG()
	
	FPS->(DBSKIP())
END

RETURN NIL



// ======================================================================= \\
STATIC FUNCTION FZUCDTQ(CPROJETO)
// ======================================================================= \\

LOCAL CLSTANEXOS := ""
LOCAL CFROTA     := ""
LOCAL CNRAS
LOCAL CVIAGEM
LOCAL _ZUCREC
LOCAL XIT 
Local _MV_LOC207  := SUPERGETMV("MV_LOCX207",,.F.)
Local _MV_LOC154  := GETMV("MV_LOCX154",,"")
Local _MV_LOC155  := GETMV("MV_LOCX155",,"")
Local _MV_RELFROM := GETMV("MV_RELFROM")

DBSELECTAREA("FP0")
DBSETORDER(1)
DBSEEK(XFILIAL("FP0")+CPROJETO)

IF FP0->FP0_TIPOSE != "L"		// SE PROJETO NÃO FOR LOCAÇÃO SAI DA ROTINA - 05/08/2016
	RETURN NIL
ENDIF

FPA->(DBSETORDER(1))			// FILIAL+PROJET+OBRA+SEQGRU

DBSELECTAREA("FP1")
DBSETORDER(1)
DBSEEK(XFILIAL("FP1")+CPROJETO)

DBSELECTAREA("FQ7")
DBSETORDER(2)
DBSEEK(XFILIAL("FQ7")+CPROJETO , .T.)

WHILE ! FQ7->(EOF()) .AND. FQ7->FQ7_FILIAL+FQ7->FQ7_PROJET == XFILIAL("FQ7")+CPROJETO
	
	_ZUCREC := FQ7->(RECNO())
	
	IF FPA->(DBSEEK(XFILIAL("FPA")+CPROJETO+FQ7->FQ7_OBRA+FQ7->FQ7_SEQGUI))
		CFROTA := FPA->FPA_GRUA
	ENDIF
	
	IF EMPTY(FQ7->FQ7_X5COD)	// SE O CAMPO CÓDIGO CONJUNTO TRANSPORTADOR EM BRANCO, IGNORA
		FQ7->(DBSKIP())
		LOOP
	ENDIF
	
	IF EMPTY(FQ7->FQ7_VIAGEM)
		CNRAS := GERANUMAS( /*"05"*/ "31", CPROJETO, FQ7->FQ7_OBRA, FQ7->FQ7_SEQGUI, FQ7->FQ7_FILIAL)
	ELSE
		DBSELECTAREA("FQ5")
		DBSETORDER(1)
		IF DBSEEK( XFILIAL("FQ5") + FQ7->FQ7_VIAGEM)
			CNRAS   := FQ5->FQ5_AS
		ELSE
			MSGSTOP(STR0081+FQ7->FQ7_VIAGEM , STR0004) //"VIAGEM: "###"GPO - GRCONTR.PRW"
			RETURN .F.
		ENDIF
	ENDIF
	
	ADTQ := {}
	
	FQ5->(DBSETORDER(9))	// FQ5_FILIAL + FQ5_AS + FQ5_VIAGEM
	IF FQ5->(DBSEEK(XFILIAL("FQ5")+CNRAS , .T.))
		RECLOCK("FQ5",.F.)
		CVIAGEM := FQ5->FQ5_VIAGEM
		AADD(ADTQ , {"FQ5_FILORI" , FQ5->FQ5_FILORI})
		AADD(ADTQ , {"FQ5_CONTRA" , FQ5->FQ5_CONTRA})
		AADD(ADTQ , {"FQ5_DATGER" , FQ5->FQ5_DATGER})
		AADD(ADTQ , {"FQ5_HORGER" , FQ5->FQ5_HORGER})
		IF FQ5->FQ5_STATUS == "7" .or. FQ5->FQ5_STATUS == "9" // Frank se precisar liberar ao dar manutenção basta colocar o status 9 também 14/07/21
			AADD(ADTQ, {"FQ5_STATUS","1"})
		ENDIF
	ELSE
		RECLOCK("FQ5",.T.)
		CVIAGEM := GETSX8NUM("FQ5", "FQ5_VIAGEM" )
		AADD(AASNOVA, FQ5->(RECNO()))			// ADICIONA AS PARA IMPRESSÃO EM PDF 
		AADD(ADTQ , {"FQ5_FILORI" , RETFILGRV("FQ5_FILORI")}) 
		AADD(ADTQ , {"FQ5_CONTRA" , PADR(FP0->FP0_PROJET,LEN(FQ5->FQ5_CONTRA))})
		AADD(ADTQ , {"FQ5_DATGER" , DDATABASE})
		AADD(ADTQ , {"FQ5_HORGER" , SUBSTR(TIME(),1,2)+SUBSTR(TIME(),4,2)})
		AADD(ADTQ , {"FQ5_STATUS" , "1"})
	ENDIF
	
	AADD(ADTQ , {"FQ5_FILIAL" , RETFILGRV("FQ5_FILIAL")}) 
	AADD(ADTQ , {"FQ5_TPAS"   , "F"})
	AADD(ADTQ , {"FQ5_AS"     , CNRAS})
	AADD(ADTQ , {"FQ5_VIAGEM" , CVIAGEM})
	AADD(ADTQ , {"FQ5_SOT"    , PADR(CPROJETO,LEN(FQ5->FQ5_SOT)) })
	AADD(ADTQ , {"FQ5_OBRA"   , FQ7->FQ7_OBRA})
	AADD(ADTQ , {"FQ5_NOMCLI" , FP0->FP0_CLINOM})
	AADD(ADTQ , {"FQ5_ORIGEM" , FQ7->FQ7_CIDORI+" "+FQ7->FQ7_UFORI})
	AADD(ADTQ , {"FQ5_DESTIN" , FQ7->FQ7_CIDEST+" "+FQ7->FQ7_UFDEST})
	IF ! FQ5->( FOUND() )						// SE FOR NOVO REGISTRO, INICIA COM STATUS "1" 
		IF !_MV_LOC207 //SUPERGETMV("MV_LOCX207",,.F.)
			AADD(ADTQ , {"FQ5_STATUS","1"})
		ELSE
			AADD(ADTQ , {"FQ5_STATUS","6"})
		ENDIF
	ENDIF
	AADD(ADTQ , {"FQ5_ROTA"  ,"000001"})
	AADD(ADTQ , {"FQ5_TIPVIA","1"})
	AADD(ADTQ , {"FQ5_SERTMS","2"})
	AADD(ADTQ , {"FQ5_TIPTRA","1"})
	AADD(ADTQ , {"FQ5_OBSCTB",FQ7->FQ7_OBS})
	AADD(ADTQ , {"FQ5_CODCLI", FP0->FP0_CLI})		// NOME DO CLIENTE
	AADD(ADTQ , {"FQ5_LOJA"  , FP0->FP0_LOJA})		// NOME DO CLIENTE
	AADD(ADTQ , {"FQ5_GUINDA", FQ7->FQ7_X5COD})
	AADD(ADTQ , {"FQ5_DATINI", FPA->FPA_DTINI})
	AADD(ADTQ , {"FQ5_DATFIM", FPA->FPA_DTENRE})
	AADD(ADTQ , {"FQ5_HORINI", FPA->FPA_HRINI})
	AADD(ADTQ , {"FQ5_HORFIM", FPA->FPA_HRFIM})
	//AADD(ADTQ , {"FQ5_XQTD"  , FPA->FPA_QUANT}) // FRANK ZWARG FUGA 13/08/2020
	//AADD(ADTQ , {"FQ5_XPROD" , FPA->FPA_PRODUT})
	
	IF LOCA01311(ADTQ , CVIAGEM) 					// VERIFICA SE EXISTE DIFERENÇA NA DTQ COM A ZUC - ESSE PROCESSO É REFERENTE A ASF.
		FOR XIT := 1 TO LEN(ADTQ)
			FQ5->( FIELDPUT(FIELDPOS(ADTQ[XIT][1]), ADTQ[XIT][2]) )
		NEXT
	ENDIF
	
	FQ5->(MSUNLOCK())
	
	LOCA01307( ALLTRIM(CNRAS) , "2" , ALLTRIM(SUBSTR(FP1->FP1_NOMORI,1,20))+STR0082 , CODCLVAL(ALLTRIM(CCONTRATO))+FP1->FP1_OBRA+"T" )  //" - FRETE"
	
	FQ7->(DBGOTO(_ZUCREC))

	FQ7->(RECLOCK("FQ7",.F.))
	IF EMPTY(FQ7->FQ7_VIAGEM)
		FQ7->FQ7_VIAGEM	:= CVIAGEM
	ENDIF
	IF EMPTY(FQ7->FQ7_VIAORI)
		FQ7->FQ7_VIAORI	:= IIF(FP0->FP0_TIPOSE=="E" , FP4->FP4_VIAGEM , FPA->FPA_VIAGEM) 
	ENDIF
	FQ7->FQ7_ALTERR := DTOS(DDATABASE)
	FQ7->(MSUNLOCK())
	
	CONFIRMSX8()
	
	CHECKASG2()
	// --> MANDA E-MAIL REFERENTE A ALTERACAO DO ASF
	//Removido por Frank em 05/04/2022 por questão dos débitos técnicos
	IF EMPTY(FQ7->FQ7_ALTERR) .and. .f. 
		CANEXO := CNRAS+".PDF"
		
		//Removido por Frank em 05/04/2022 por questão dos débitos técnicos
		IF .F. //__COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
		//	CANEXO     := GETSRVPROFSTRING("STARTPATH","")+CANEXO	// PEGA O ENDEREÇO COMPLETO DO ARQUIVO NO MICRO DO CLIENTE
		//	CLSTANEXOS += CANEXO + ";"
		ENDIF
		
		CTITULO	:= STR0078 + CPROJETO //"REVISÃO DE ASF - PROJETO "
		
		DBSELECTAREA("FP0")
		DBSETORDER(1)
		DBSEEK(XFILIAL("FP0")+FQ5->FQ5_SOT)
		
		EFROM 	:= ALLTRIM(_MV_RELFROM) //ALLTRIM(USRRETNAME(RETCODUSR())) + "<" + ALLTRIM(USRRETMAIL(RETCODUSR())) + ">"
		IF FP0->FP0_TIPOSE == "E"
			CPARA 	:= _MV_LOC154 //GETMV("MV_LOCX154",,"")
		ELSEIF FP0->FP0_TIPOSE == "U"
			CPARA 	:= _MV_LOC155 //GETMV("MV_LOCX155",,"")
		ENDIF
		
		CCC	 	:= ""
		CCCO 	:= ""
		CMSG 	:= STR0079+CNRAS+ CHR(13)+CHR(10) //"ESTE EMAIL É PARA INFORMAR QUE NO SISTEMA FOI REVISADA A ASF DE NUMERO: "
		CMSG 	+= STR0080+PADR(CPROJETO,LEN(FQ5->FQ5_SOT))+ CHR(13) + CHR(10) //"PROJETO: "
		
		IF LEN(CMSG) > 0
			LOCA01313( EFROM, CPARA, CCC, CTITULO, CMSG, CLSTANEXOS, CCCO)	// ROTINA DE ENVIO DE E-MAIL PADRÃO
		ENDIF
		
		FERASE(CANEXO)		// REMOVE ARQUIVO TEMPORÁRIO DO SERVIDOR
	ENDIF
	FQ7->(DBSKIP())
ENDDO 

RETURN NIL



// ======================================================================= \\
STATIC FUNCTION GERANUMAS( PSRV , PPROJETO, POBRA, PSEQ, PFILIAL)
// ======================================================================= \\

LOCAL AAREA     := GETAREA()
LOCAL AAREADTQ  := FQ5->(GETAREA())
LOCAL LCONTINUA := .T.
LOCAL CSERVICO  := ALLTRIM( PSRV )
LOCAL CPROJETO  := SUBSTR( ALLTRIM( PPROJETO ), 5, 5 )
LOCAL COBRA     := ALLTRIM( POBRA )
LOCAL CNEWSEQ   := ALLTRIM( IIF( VALTYPE(PSEQ) == "N", STRZERO(PSEQ, 3), PSEQ ) )
LOCAL _CFILIAL  := ALLTRIM( PFILIAL )

IF LEN( CSERVICO ) != 2
	FINAL(STR0083+CSERVICO+STR0084, STR0085) //"SERVICO INFORMADO ["###"] INVALIDO"###"GERANUMAS - GERACAO DE AS"
ENDIF

IF LEN( CPROJETO ) != 5
	FINAL(STR0086+CPROJETO+STR0084, STR0085) //"PROJETO INFORMADO ["###"] INVALIDO"###"GERANUMAS - GERACAO DE AS"
ENDIF

IF LEN( COBRA ) != 3
	FINAL(STR0087+COBRA+STR0088, STR0085) //"OBRA/VIAGEM INFORMADA ["###"] INVALIDA"###"GERANUMAS - GERACAO DE AS"
ENDIF

IF LEN( CNEWSEQ ) != 3
	CNEWSEQ := RIGHT( "000" + CNEWSEQ, 3 )
ENDIF

IF EMPTY( _CFILIAL )					 			// CASO NÃO TENHA CONTEÚDO
	_CFILIAL := REPLICATE("0", LEN( CFILANT ) )		// PREENCHE O TAMANHO DO XFILIAL() COM ZEROS
ENDIF

FQ5->(DBSETORDER(9))								// FQ5_FILIAL + FQ5_AS + FQ5_VIAGEM
WHILE LCONTINUA
	CNRAS     := CSERVICO + CPROJETO + COBRA + CNEWSEQ + _CFILIAL
	LCONTINUA := FQ5->(DBSEEK( XFILIAL("FQ5") + CNRAS, .T.))
	CNEWSEQ   := SOMA1(CNEWSEQ)
ENDDO

FQ5->(RESTAREA(AAREADTQ))
RESTAREA( AAREA )

RETURN CNRAS



/*
// ======================================================================= \\
STATIC FUNCTION FHEAD_EQUIP()
// ======================================================================= \\
// --> CHAMADA: COMENTADA - DESCONTINUADA 
// --> TRATAMENTO DA ALOCACAO DE EQUIPAMENTOS
LOCAL AHEAD := {}

DBSELECTAREA("SX3")
DBSETORDER(2)

DBSEEK("FP4_OBRA"	)
AADD(AHEAD, {ALLTRIM(X3TITULO()), SX3->X3_CAMPO, SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT ,SX3->X3_CBOX ,SX3->X3_RELACAO, SX3->X3_WHEN, SX3->X3_VISUAL, SX3->X3_VLDUSER, SX3->X3_PICTVAR, SX3->X3_OBRIGAT})
DBSEEK("FP4_GUINDA"	)
AADD(AHEAD, {"EQUIP PREVISTO", SX3->X3_CAMPO, SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT ,SX3->X3_CBOX ,SX3->X3_RELACAO, SX3->X3_WHEN, SX3->X3_VISUAL, SX3->X3_VLDUSER, SX3->X3_PICTVAR, SX3->X3_OBRIGAT})
DBSEEK("FP4_DTINI"	)
AADD(AHEAD, {ALLTRIM(X3TITULO()), SX3->X3_CAMPO, SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT ,SX3->X3_CBOX ,SX3->X3_RELACAO, SX3->X3_WHEN, SX3->X3_VISUAL, SX3->X3_VLDUSER, SX3->X3_PICTVAR, SX3->X3_OBRIGAT})
DBSEEK("FP4_DTFIM"	)
AADD(AHEAD, {ALLTRIM(X3TITULO()), SX3->X3_CAMPO, SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT ,SX3->X3_CBOX ,SX3->X3_RELACAO, SX3->X3_WHEN, SX3->X3_VISUAL, SX3->X3_VLDUSER, SX3->X3_PICTVAR, SX3->X3_OBRIGAT})
DBSEEK("FP4_GUIALO"	)
AADD(AHEAD, {"EQUIP ALOCADO", SX3->X3_CAMPO, SX3->X3_PICTURE, SX3->X3_TAMANHO, SX3->X3_DECIMAL, SX3->X3_VALID, SX3->X3_USADO, SX3->X3_TIPO, SX3->X3_F3, SX3->X3_CONTEXT ,SX3->X3_CBOX ,SX3->X3_RELACAO, SX3->X3_WHEN, SX3->X3_VISUAL, SX3->X3_VLDUSER, SX3->X3_PICTVAR, SX3->X3_OBRIGAT})

RETURN AHEAD
*/



/*
// ======================================================================= \\
STATIC FUNCTION FCOLS_EQUIP(CPROJETO)
// ======================================================================= \\
// --> CHAMADA: COMENTADA - DESCONTINUADA  
LOCAL AEQUIPS := {}

_LGERAR := .T.
ARECNOS := {}

FP1->(DBSETORDER(1))
FP1->(DBSEEK(XFILIAL("FP1")+CPROJETO))

WHILE FP1->(!EOF()) .AND. FP1->FP1_FILIAL+FP1->FP1_PROJET == XFILIAL("FP1")+CPROJETO
	
	// --> TRATAMENTO PARA GUINDASTE
	// ======================================================================
	FP4->(DBSETORDER(1))
	FP4->(DBSEEK(XFILIAL("FP4")+CPROJETO+FP1->FP1_OBRA))
	
	WHILE FP4->(!EOF()) .AND. FP4->FP4_FILIAL+FP4->FP4_PROJET+FP4->FP4_OBRA == XFILIAL("FP4")+CPROJETO+FP1->FP1_OBRA
		DO CASE
		CASE !EMPTY( FP4->FP4_GUIALO )
			CFROTA := FP4->FP4_GUIALO
		CASE !EMPTY( FP4->FP4_GUINDA )
			CFROTA := FP4->FP4_GUINDA
		OTHERWISE
			CFROTA := FP4->FP4_GUINDA
		ENDCASE
		
		IF EMPTY(CFROTA)
			FP4->(DBSKIP())
			LOOP
		ENDIF
		
		AADD( AEQUIPS , { FP4->FP4_OBRA   , ;   		// 1 - OBRA
		                  FP4->FP4_GUINDA , ;			// 2 - TRANSP - FROTA PREVISTA
		                  FP4->FP4_DTINI  , ;   		// 3 - DATA INICIO
		                  FP4->FP4_DTFIM  , ;   		// 4 - DATA FINAL
		                  CFROTA          , ;          	// 5 - FROTA ALOCADA
		                  FP4->FP4_GUIALO , ;         	// 5 - FROTA ALOCADA
		                  FP4->FP4_QTMONT , ;         	// 6 - QTDE DE DIAS DE MONTAGEM - CANDISANI
		                  FP4->FP4_QTDESM , ;         	// 7 - QTDE DE DIAS DE DESMONTAGEM - CANDISANI
		                  .F. })
		AADD( ARECNOS , { "FP4" , FP4->(RECNO()) })
		
		FP4->(DBSKIP())
	ENDDO
	
	// --> TRATAMENTO PARA TRANSPORTE
	// ======================================================================
	ZA6->(DBSETORDER(1))
	ZA6->(DBSEEK(XFILIAL("ZA6")+CPROJETO+FP1->FP1_OBRA))
	
	WHILE ZA6->(!EOF()) .AND. ZA6->ZA6_FILIAL+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA == XFILIAL("ZA6")+CPROJETO+FP1->FP1_OBRA
		CEQUIP := FP8->FP8_TRANSP
		FP8->(DBSETORDER(1))
		FP8->(DBSEEK( XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA, .F. ))
		WHILE !FP8->(EOF()) .AND. ( FP8->FP8_FILIAL+FP8->FP8_PROJET +FP8->FP8_OBRA +FP8->FP8_SEQTRA == XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA )
			AADD( AEQUIPS , { ZA6->ZA6_OBRA   , ;   											// 1 - OBRA
                              FP8->FP8_TRANSP , ;												// 2 - TRANSP - FROTA PREVISTA
                              ZA6->ZA6_DTINI  , ;   											// 3 - DATA INICIO
                              ZA6->ZA6_DTFIM  , ;   											// 4 - DATA FINAL
                              IIF(EMPTY(FP8->FP8_TRALOC),FP8->FP8_TRANSP,FP8->FP8_TRALOC),;    	// 5 - FROTA ALOCADA
			                  .F. } )
			AADD( ARECNOS , { "FP8" , FP8->(RECNO()) })
			FP8->(DBSKIP())
		ENDDO 
		ZA6->(DBSKIP())
	ENDDO
	
	// --> TRATAMENTO PARA GRUA
	// ======================================================================
	FPA->(DBSETORDER(1))
	FPA->(DBSEEK(XFILIAL("FPA")+CPROJETO+FP1->FP1_OBRA))
	
	WHILE FPA->(!EOF()) .AND. FPA->FPA_FILIAL+FPA->FPA_PROJET+FPA->FPA_OBRA == XFILIAL("FPA")+CPROJETO+FP1->FP1_OBRA
		
		AADD( AEQUIPS , { FPA->FPA_OBRA  ,;  				// 1 - OBRA
		FPA->FPA_GRUA  ,;					// 2 - GUINDASTE PREVISTO
		FPA->FPA_DTINI ,;   				// 3 - DATA INICIO
		FPA->FPA_DTFIM ,;    				// 4 - DATA FINAL
		FPA->FPA_GRUA  ,;					// 2 - GUINDASTE REALIZADO
		.F. })
		AADD( ARECNOS , { "FPA" , FPA->(RECNO()) })
		
		FPA->(DBSKIP())
		
	ENDDO
	
	FP1->(DBSKIP())
ENDDO

RETURN AEQUIPS
*/


// ======================================================================= \\
FUNCTION LOCA01303( CFROTA , DINICIO, DFINAL , CVIAGEM , CTIPOAS , LACE)
// ======================================================================= \\

RETURN 			// --> FUNÇÃO DESCONTINUADA - A CRIAÇÃO DA PROGRAMAÇÃO SERÁ NO ACEITE DA AS. FONTE: LOCT111-APONTADOR AS 

/*
LOCAL NY := 0 
LOCAL LOK  := .T.
LOCAL AACE := {}

FQ5->(DBSETORDER(1))
IF !FQ5->(DBSEEK(XFILIAL("FQ5")+CVIAGEM , .F. ))
	MSGSTOP("VIAGEM ["+ALLTRIM(CVIAGEM)+"] NAO ENCONTRADA!" , "GPO - GRCONTR.PRW") 
	LOK := .F.
ENDIF
ST9->(DBSETORDER(1))
IF !ST9->(DBSEEK(XFILIAL("ST9")+CFROTA , .F. ))
	MSGSTOP("FROTA ["+ALLTRIM(CFROTA)+"] NAO ENCONTRADA!" , "GPO - GRCONTR.PRW")
	LOK := .F.
ENDIF
AADD(AACE , {CFROTA , ST9->T9_NOME} ) 			// ADICIONO O EQPTO ALOCADO NO VETOR
IF LOK
	FOR NY := 1 TO LEN(AACE)
		DDIA := DINICIO
		FOR DDIA := DINICIO TO DFINAL
			DBSELECTAREA("FPM")
			DBSETORDER(1) 						// FPM_FILIAL+ ANOMES + FPM_FROTA+ FPM_DTPROG
			IF MSSEEK(XFILIAL("FPM")+SUBSTR(DTOS(DDIA),1,6) + AACE[NY][1] + DTOS(DDIA) )
				RECLOCK("FPM",.F.)
			ELSE
				RECLOCK("FPM",.T.)
			ENDIF
			FPM->FPM_FILIAL	:= XFILIAL("FPM")
			FPM->FPM_ANOMES := LEFT( DTOS(DDIA) , 6 )
			FPM->FPM_DTPROG := DDIA
			FPM->FPM_DIASEM := DIASEMANA(DDIA)
			FPM->FPM_FROTA  := AACE[NY][1]
			FPM->FPM_CODBEM := ""
			FPM->FPM_DESCRI := AACE[NY][2]
			FPM->FPM_AS     := FQ5->FQ5_AS
			FPM->FPM_PROJET := FQ5->FQ5_SOT  	// NUMERO DO PROJETO
			FPM->FPM_OBRA   := FQ5->FQ5_OBRA
			FPM->FPM_VIAGEM := FQ5->FQ5_VIAGEM
			FPM->FPM_TIPO   := CTIPOAS
			FPM->FPM_STATUS := "0"
			MSUNLOCK()
		NEXT DDIA
	NEXT NY
ENDIF

RETURN
*/



// ======================================================================= \\
FUNCTION LOCA01304( CFROTA , DINICIO, DFINAL , CVIAGEM , CTIPOAS , LACE) 
// ======================================================================= \\

RETURN 			// --> FUNÇÃO DESCONTINUADA - A CRIAÇÃO DA PROGRAMAÇÃO SERÁ NO ACEITE DA AS. FONTE: LOCT111-APONTADOR AS 

/*
LOCAL NXX   := 0 
LOCAL LOK     := .T.
LOCAL AACE    := {}
LOCAL CCODCLI := ""
LOCAL CLOJCLI := ""

FQ5->(DBSETORDER(1))
IF !FQ5->(DBSEEK(XFILIAL("FQ5")+CVIAGEM , .F. ))
	MSGSTOP("VIAGEM ["+ALLTRIM(CVIAGEM)+"] NAO ENCONTRADA." , "GPO - GRCONTR.PRW")
	LOK := .F.
ENDIF
ST9->(DBSETORDER(1))
IF !ST9->(DBSEEK(XFILIAL("ST9")+CFROTA , .F. ))
	MSGSTOP("FROTA ["+ALLTRIM(CFROTA)+"] NAO ENCONTRADA!" , "GPO - GRCONTR.PRW")
	LOK := .F.
ENDIF
AADD(AACE , {CFROTA , ST9->T9_NOME} ) 		// ADICIONO O EQPTO ALOCADO NO VETOR
IF LOK
	FOR NXX := 1 TO LEN(AACE)
		DBSELECTAREA("FPO")
		DBSETORDER(1) 						// FPM_FILIAL+ FPM_FROTA+ FPM_DTPROG
		IF MSSEEK(XFILIAL("FPO")+ AACE[NXX][1] )
			RECLOCK("FPO",.F.)
		ELSE
			RECLOCK("FPO",.T.)
		ENDIF
		CCODCLI := POSICIONE("AAM",1,XFILIAL("AAM")+FQ5->FQ5_CONTRA,"AAM_CODCLI")
		CLOJCLI := POSICIONE("AAM",1,XFILIAL("AAM")+FQ5->FQ5_CONTRA,"AAM_LOJA")
		FPO->FPO_FILIAL	:= XFILIAL("FPO")
		FPO->FPO_FROTA  := AACE[NXX][1]
		FPO->FPO_CODCLI	:= CCODCLI
		FPO->FPO_LOJA	:= CLOJCLI
		FPO->FPO_NOMCLI	:= POSICIONE("SA1",1,XFILIAL("SA1")+CCODCLI+CLOJCLI,"A1_NOME")
		FPO->FPO_DTINI	:= DINICIO
		FPO->FPO_DTFIM	:= DFINAL
		FPO->FPO_NRAS   := FQ5->FQ5_AS
		FPO->FPO_PROJET := FQ5->FQ5_SOT 	// NUMERO DO PROJETO
		FPO->FPO_OBRA   := FQ5->FQ5_OBRA
		FPO->FPO_VIAGEM := FQ5->FQ5_VIAGEM
		FPO->FPO_STATUS := "R"
		MSUNLOCK()
	NEXT NXX
ENDIF

RETURN
*/



// ======================================================================= \\
FUNCTION LOCA01305( CORIG , CDEST )
// ======================================================================= \\
// --> TABELA DE SEGURO / ADVALOREM POR ESTADO  - PRECISA SER REVISADA / VALIDADA
NALIQ := 0.20

RETURN NALIQ



// ======================================================================= \\
FUNCTION LOCA01306( CORIG , CDEST )
// ======================================================================= \\
// --> TABELA DE ICM POR ESTADO    - PRECISA SER REVISADA / VALIDADA
LOCAL NALIQ    := 0 
LOCAL AAREAZLN := GETAREA() 

DBSELECTAREA("ZLN")
DBSETORDER(1)  // XFILIAL ORIGEM + DESTINO
IF DBSEEK(XFILIAL("ZLN")+CORIG+CDEST)
	NALIQ := ZLN->ZLN_ALIQ
ELSE
	NALIQ := 12
ENDIF

RESTAREA(AAREAZLN)

RETURN NALIQ



// ======================================================================= \\
STATIC FUNCTION DADOSCLI() 
// ======================================================================= \\

LOCAL AAREA    := GETAREA()
LOCAL ACLIENTE := {}
LOCAL CNUMCLI  := GETSXENUM("SA1","A1_COD")
LOCAL CQRY     := ""
LOCAL _nX
LOCAL _lTem
LOCAL _lTem2
LOCAL _aDePara := {}
LOCAL _cTemp1
LOCAL _cTemp2
Local _nCampo
LOCAL _cDe
LOCAL _cPara
LOCAL _xTemp
LOCAL _cCamposX := ""

CQRY += " SELECT US_NOME , US_NREDUZ , US_COD_MUN , US_MUN  , US_END , US_EST   , US_BAIRRO , US_CEP , " + CRLF
CQRY +=        " US_TEL  , US_CGC    , US_INSCR   , US_VEND , US_FAX , US_EMAIL , US_DDD    , US_DDI, US_PAIS, US.R_E_C_N_O_ AS REG "
CQRY += " FROM " + RETSQLNAME("SUS") + " US " + CRLF
CQRY +=        " JOIN " + RETSQLNAME("FP0") + " A0 ON FP0_PROSPE = US_COD " + CRLF
//CQRY +=        " JOIN " + RETSQLNAME("CC2") + " C2 ON CC2_MUN = US_MUN " + CRLF
CQRY += " WHERE FP0_PROSPE = '" + FP0->FP0_PROSPE + "' AND FP0_PROJET = '" + FP0->FP0_PROJET + "' " + CRLF
CQRY +=   " AND A0.D_E_L_E_T_ = '' AND US.D_E_L_E_T_ = '' " //AND C2.D_E_L_E_T_ = '' "
DBUSEAREA(.T., "TOPCONN",TCGENQRY(,,CQRY),"TRB",.F.,.T.)

SUS->(dbGoto(TRB->REG))

AADD(ACLIENTE,{"A1_FILIAL"  , XFILIAL("SA1")		 , NIL})
AADD(ACLIENTE,{"A1_COD"     , CNUMCLI                , NIL})
AADD(ACLIENTE,{"A1_LOJA"    , "01"   		         , NIL})
AADD(ACLIENTE,{"A1_NOME"    , TRB->US_NOME		   	 , NIL})
AADD(ACLIENTE,{"A1_NREDUZ"  , TRB->US_NREDUZ		 , NIL})
AADD(ACLIENTE,{"A1_END"     , TRB->US_END		     , NIL})
AADD(ACLIENTE,{"A1_TIPO"    , "F" 					 , NIL})
AADD(ACLIENTE,{"A1_EST"     , TRB->US_EST		     , NIL})
//AADD(ACLIENTE,{"A1_COD_MUN" , TRB->CC2_CODMUN		 , NIL})
AADD(ACLIENTE,{"A1_COD_MUN" , TRB->US_COD_MUN		 , NIL})
AADD(ACLIENTE,{"A1_MUN"     , TRB->US_MUN			 , NIL})
AADD(ACLIENTE,{"A1_BAIRRO"  , TRB->US_BAIRRO    	 , NIL})
AADD(ACLIENTE,{"A1_CEP"     , TRB->US_CEP    		 , NIL})
AADD(ACLIENTE,{"A1_TEL"     , TRB->US_TEL	         , NIL})
AADD(ACLIENTE,{"A1_DDD"     , TRB->US_DDD	         , NIL})
AADD(ACLIENTE,{"A1_DDI"     , TRB->US_DDI            , NIL})
AADD(ACLIENTE,{"A1_CGC"     , TRB->US_CGC	         , NIL})
AADD(ACLIENTE,{"A1_MSBLQL"  , "2"		             , NIL})
AADD(ACLIENTE,{"A1_CONTATO" , FP0->FP0_CLICON     	 , NIL})
AADD(ACLIENTE,{"A1_VEND"    , FP0->FP0_VENDED  	 	 , NIL})
AADD(ACLIENTE,{"A1_PESSOA"  , "J"          		     , NIL})
AADD(ACLIENTE,{"A1_FAX"     , TRB->US_FAX   	     , NIL})
AADD(ACLIENTE,{"A1_EMAIL"   , TRB->US_EMAIL  	     , NIL})
AADD(ACLIENTE,{"A1_PAIS"    , TRB->US_PAIS  	     , NIL})
If SA1->(FIELDPOS("A1_ESTATAL")) > 0
	AADD(ACLIENTE,{"A1_ESTATAL" , 'N'                    , NIL})
EndIF
//AADD(ACLIENTE,{"A1_SINTEGR" , 'S'                    , NIL})
If SA1->(FIELDPOS("A1_FICHA")) > 0
	AADD(ACLIENTE,{"A1_FICHA"   , 'N'                    , NIL})
EndIF
If SA1->(FIELDPOS("A1_RECEITA")) > 0
	AADD(ACLIENTE,{"A1_RECEITA" , 'N'                    , NIL})
EndIf
If SA1->(FIELDPOS("A1_CONTSOC")) > 0
	AADD(ACLIENTE,{"A1_CONTSOC" , 'N'                    , NIL})
EndIF
If SA1->(FIELDPOS("A1_ENDCOB")) > 0
	AADD(ACLIENTE,{"A1_ENDCOB"  , substr(TRB->US_END,1,tamsx3("A1_ENDCOB")[1])  , NIL})
EndIF
If SA1->(FIELDPOS("A1_BAIRROC")) > 0
	AADD(ACLIENTE,{"A1_BAIRROC" , substr(TRB->US_BAIRRO,1,tamsx3("A1_BAIRROC")[1])         , NIL})
EndIF
If SA1->(FIELDPOS("A1_ESTC")) > 0
	AADD(ACLIENTE,{"A1_ESTC"    , TRB->US_EST            , NIL})
EndIF
If SA1->(FIELDPOS("A1_MUNC")) > 0
	AADD(ACLIENTE,{"A1_MUNC"    , substr(TRB->US_MUN,1,tamsx3("A1_MUNC")[1])            , NIL})
EndIF
If SA1->(FIELDPOS("A1_CEPC")) > 0
	AADD(ACLIENTE,{"A1_CEPC"    , TRB->US_CEP            , NIL})
EndIF
If SA1->(FIELDPOS("A1_SEGMENT")) > 0
	AADD(ACLIENTE,{"A1_SEGMENT" , "02"                   , NIL})
EndIF
If SA1->(FIELDPOS("A1_MAILCOB")) > 0
	AADD(ACLIENTE,{"A1_MAILCOB" , substr(TRB->US_EMAIL,1,tamsx3("A1_MAILCOB")[1])          , NIL})
EndIF
//AADD(ACLIENTE,{"A1_CDRDES" ,  '000001'               , NIL})

TRB->(DBCLOSEAREA())

// Encontrar os campos obrigatórios customizados
// Neste caso é possível fazer a associacao dos campos obrigatórios da SUS com SA1 via parâmetro
// -----------------------------------------------------------------------------------------------
_aDePara := {}
// US_DDD/A1_DDD;US_TEL/A1_TEL; Não pode conter espaços entre os campos
_cDePara := alltrim(GetMV("MV_LOCX303",.F.,""))
_cTemp1  := ""
_cTemp2  := ""
_nCampo  := 1
If !empty(_cDePara)
	For _nX:=1 to len(_cDePara)
		If substr(_cDePara,_nX,1) == "/"
			_nCampo ++
		ElseIf substr(_cDePara,_nX,1) == ";" .or. substr(_cDePara,_nX,1) == " "
			_nCampo := 1
			aadd(_aDePara,{_cTemp1,_cTemp2})
			_cTemp1 := ""
			_cTemp2 := ""
		Else
			If _nCampo == 1
				_cTemp1 += substr(_cDePara,_nX,1)
			Else
				_cTemp2 += substr(_cDePara,_nX,1)
			EndIf
		EndIF
	Next
	If !empty(_cTemp1)
		aadd(_aDePara,{_cTemp1,_cTemp2})
	EndIF
	(LOCXCONV(1))->(dbSetOrder(1))
	(LOCXCONV(1))->(dbSeek("SA1"))
	While !(LOCXCONV(1))->(Eof()) .and. GetSx3Cache(&(LOCXCONV(2)),"X3_ARQUIVO") == "SA1"      
		_lTem := .F.
		If x3Obrigat(&(LOCXCONV(2)))
			For _nX := 1 to len(aCliente)
				If alltrim(aCliente[_nX][01]) == alltrim(&(LOCXCONV(2)))
					_lTem := .T.
					Exit
				EndIF
			Next
			If !_lTem
				_lTem2 := .F.
				_cDe := ""
				_cPara := ""
				For _nX:=1 to len(_aDePara)
					If alltrim(_aDePara[_nX][02]) == alltrim(&(LOCXCONV(2)))
						_lTem2 := .T.
						_cDe   := alltrim(_aDePara[_nX,01]) // SUS
						_cPara := alltrim(_aDePara[_nX,02]) // SA1
						Exit
					EndIF
				Next

				If _lTem2
					AADD(ACLIENTE,{alltrim(&(LOCXCONV(2))) , &("SUS->"+_cDe), NIL})
				EndIF
			EndIF
		EndIF
		(LOCXCONV(1))->(dbSkip())
	EnDDo
EndIF
// -----------------------------------------------------------------------------------------------
// No caso de não usar o processo de associar os campos obrigatórios via parâmetro, neste caso
// vamos preencher da seguinte forma os campos que não tem associação com a SUS:
// Tipo Caracter ".", se for com x3_cbox pegar o substr(x3_cbox,1,1)
// Tipo numérico 0.01, se for com x3_cbox pegar o substr(x3_cbox,1,1)
// Tipo lógico .T.
// Tipo Memo "."
If empty(_cDePara)
	_cCamposX := ""
	(LOCXCONV(1))->(dbSetOrder(1))
	(LOCXCONV(1))->(dbSeek("SA1"))
	While !(LOCXCONV(1))->(Eof()) .and. GetSx3Cache(&(LOCXCONV(2)),"X3_ARQUIVO") == "SA1"
		_lTem   := .F.
		_lVazio := .F.
		_nPonteiro := 0
		If x3Obrigat(&(LOCXCONV(2)))
			For _nX := 1 to len(aCliente)
				If alltrim(aCliente[_nX][01]) == alltrim(&(LOCXCONV(2)))
					_nPonteiro := _nX
					_lTem := .T.
					 If empty(aCliente[_nX][02])
					 	_lVazio := .T.
					 EndIF
					 Exit
				EndIF
			Next
			If _lVazio .or. !_lTem
				If !empty(_cCamposX)
					_cCamposX += ", "
				EndIF
				_cCamposX += alltrim(GetSx3Cache(&(LOCXCONV(2)),"X3_TITULO"))    
				If GetSx3Cache(&(LOCXCONV(2)),"X3_TIPO") == "C"      
					_xTipo := "."
				ElseIf GetSx3Cache(&(LOCXCONV(2)),"X3_TIPO") == "N"
					_xTipo := 1
				ElseIf GetSx3Cache(&(LOCXCONV(2)),"X3_TIPO") == "L"
					_xTipo := .T.
				ElseIf GetSx3Cache(&(LOCXCONV(2)),"X3_TIPO") == "D"
					_xTipo := dDataBase
				ElSe
					_xTipo := "."
				EndIF
				If !empty(GetSx3Cache(&(LOCXCONV(2)),"X3_CBOX")) .and. At("=",GetSx3Cache(&(LOCXCONV(2)),"X3_CBOX")) > 0         
					_xTipo := substr(GetSx3Cache(&(LOCXCONV(2)),"X3_CBOX"),1,At("=",GetSx3Cache(&(LOCXCONV(2)),"X3_CBOX"))-1)
				EndIF
				If !_lTem
					AADD(ACLIENTE,{alltrim(&(LOCXCONV(2))) , _xTemp, NIL})       
				Else
					If _nPonteiro > 0
						aCliente[_nPonteiro][2] := _xTipo
					EndIF
				EndIF
			EndIF
		EndIF
		(LOCXCONV(1))->(dbSkip())
	EndDo
EndIF

RESTAREA( AAREA )

If !empty(_cCamposX)
	Help(Nil,	Nil,STR0004+alltrim(upper(Procname())),; //"RENTAL: "
		Nil,STR0127,1,0,Nil,Nil,Nil,Nil,Nil,; //"Os campos descritos aqui precisam ser preenchidos com as informações corretas. Anote e preencha com um conteúdo válido na próxima tela."
		{_cCamposX}) 
EndIF

RETURN ACLIENTE



// ======================================================================= \\
FUNCTION LOCA01307(CNPROJET , TP , DESCRI , CCLSUP) 
// ======================================================================= \\
// --> GERAR CLASSE DE VALOR POR PROJETO E OBRA

LOCAL AAREA  := GETAREA() 
LOCAL DTAEX  := CTOD(SPACE(08))
LOCAL _LCVAL := SUPERGETMV("MV_LOCX051",.F.,.T.)

IF !_LCVAL
	RETURN
ENDIF

CNPROJET := ALLTRIM(STRTRAN(CNPROJET,"-",""))
CCLSUP   := ALLTRIM(STRTRAN(CCLSUP  ,"-",""))

DBSELECTAREA("CTH") 
DBSETORDER(1) 								// FILIAL + CTH_CLVL  -->  (CODIGO DA CLASSE DE VALOR )
IF DBSEEK(XFILIAL("CTH")+CNPROJET)
	IF ALLTRIM(SUBSTR(CTH->CTH_CLVL,1,GETSX3CACHE("CTH_CLVL","X3_TAMANHO"))) == ALLTRIM(SUBSTR(CNPROJET,1,GETSX3CACHE("CTH_CLVL","X3_TAMANHO")))
		DTAEX := CTH_DTEXIS
		RECLOCK("CTH",.F.)
	ELSE
		DTAEX := DDATABASE
		RECLOCK("CTH",.T.)
	ENDIF
ELSE
	DTAEX := DDATABASE
	RECLOCK("CTH",.T.)
ENDIF

REPLACE CTH_FILIAL WITH XFILIAL("CTH")
REPLACE CTH_CLVL   WITH CNPROJET
REPLACE CTH_CLASSE WITH TP
REPLACE CTH_NORMAL WITH "0"
REPLACE CTH_DESC01 WITH DESCRI
REPLACE CTH_BLOQ   WITH "2"
REPLACE CTH_DTEXIS WITH DTAEX
REPLACE CTH_CLSUP  WITH CCLSUP
CTH->(MSUNLOCK())

RESTAREA( AAREA )

RETURN() 



// ----------------------------------------------------------------------- \\
STATIC FUNCTION CODCLVAL(CVAR)
// ----------------------------------------------------------------------- \\

LOCAL CRET := SPACE(20)

IF LEN(ALLTRIM(CVAR)) >11
	IF SUBSTR(ALLTRIM(CVAR),12,1) == "/"
		CRET := SUBSTR(ALLTRIM(CVAR),1,11)
	ELSE
		CRET := SUBSTR(ALLTRIM(CVAR),1,12)
	ENDIF
ELSE
	CRET := CVAR
ENDIF

RETURN(CRET)



// ----------------------------------------------------------------------- \\
FUNCTION LOCA01308()
// ----------------------------------------------------------------------- \\

LOCAL CCONTRATO := ""
LOCAL NPRJ      := 0
LOCAL NOBR      := 0
LOCAL NGUI      := 0
LOCAL NTRA      := 0
LOCAL NGRU      := 0

DBSELECTAREA("FP0")
DBSETORDER(1)
DBGOTOP()
WHILE !EOF()
	IF FP0->FP0_STATUS == "5"
		CCONTRATO := FP0->FP0_PROJET
		LOCA01307(ALLTRIM(CODCLVAL(CCONTRATO))+"T" , "1" , SUBSTR(FP0->FP0_CLINOM,1,25) , "") 
		NPRJ      := NPRJ+1 
		LOCA01307(ALLTRIM(CODCLVAL(CCONTRATO))     , "2" , SUBSTR(FP0->FP0_CLINOM,1,25) , ALLTRIM(CODCLVAL(CCONTRATO))+"T")
		NPRJ      := NPRJ+1 
		
		DBSELECTAREA("FP1")
		DBSETORDER(1)
		IF DBSEEK(XFILIAL("FP1")+CCONTRATO)
			WHILE !EOF() .AND. XFILIAL("FP1")+CCONTRATO == XFILIAL("FP1")+FP1->FP1_PROJET
				LOCA01307(ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA+"T", "1", SUBSTR(FP1->FP1_NOMORI,1,25),ALLTRIM(CODCLVAL(CCONTRATO))+"T")
				NOBR := NOBR+1
				LOCA01307(ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA    , "2", SUBSTR(FP1->FP1_NOMORI,1,25),ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA+"T")
				NOBR := NOBR+1
				DBSELECTAREA("FP4")
				DBSETORDER(1)
				IF DBSEEK(XFILIAL("FP4")+CCONTRATO+FP1->FP1_OBRA)
					WHILE !EOF() .AND. XFILIAL("FP4")+CCONTRATO+FP1->FP1_OBRA == XFILIAL("FP4")+FP4->FP4_PROJET+FP4->FP4_OBRA
						LOCA01307(ALLTRIM(FP4->FP4_AS),"2",SUBSTR(FP1->FP1_NOMORI,1,20)+" - GUINDASTE",ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA+"T" )
						NGUI := NGUI+1
						DBSELECTAREA("FP4")
						FP4->(DBSKIP())
					ENDDO
				ENDIF
				/*
				DBSELECTAREA("ZA6")
				DBSETORDER(1)
				IF DBSEEK(XFILIAL("ZA6")+CCONTRATO+FP1->FP1_OBRA)
					WHILE !EOF() .AND. XFILIAL("ZA6")+CCONTRATO+FP1->FP1_OBRA == XFILIAL("ZA6")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA
						LOCA01307(ALLTRIM(ZA6->ZA6_AS),"2",SUBSTR(FP1->FP1_NOMORI,1,20)+" - TRANSPORTES",ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA+"T")
						NTRA := NTRA+1
						DBSELECTAREA("ZA6")
						ZA6->(DBSKIP())
					ENDDO
				ENDIF
				*/
				DBSELECTAREA("FPA")
				DBSETORDER(1)
				IF DBSEEK(XFILIAL("FPA")+CCONTRATO+FP1->FP1_OBRA)
					WHILE !EOF() .AND. XFILIAL("FPA")+CCONTRATO+FP1->FP1_OBRA == XFILIAL("FPA")+FPA->FPA_PROJET+FPA->FPA_OBRA
						LOCA01307(ALLTRIM(FPA->FPA_AS),"2",ALLTRIM(SUBSTR(FP1->FP1_NOMORI,1,20))+" - LOCACAO",ALLTRIM(CODCLVAL(CCONTRATO))+FP1->FP1_OBRA+"T" )
						NGRU := NGRU+1
						DBSELECTAREA("FPA")
						FPA->(DBSKIP())
					ENDDO
				ENDIF
				DBSELECTAREA("FP1")
				FP1->(DBSKIP())
			ENDDO
		ENDIF
	ENDIF
	DBSELECTAREA("FP0")
	FP0->(DBSKIP())
ENDDO

MSGALERT(STR0089        + CHR(13)+CHR(10) + ;  //"FINALIZADO COM SUCESSO! "
         STR0090+STRZERO(NPRJ,3) + CHR(13)+CHR(10) + ;  //" ==> PROJETOS: "
         STR0091+STRZERO(NOBR,3) + CHR(13)+CHR(10) + ;  //" ==> OBRAS...: "
         STR0092+STRZERO(NGUI,3) + CHR(13)+CHR(10) + ;  //" ==> EQUIPAM.: "
         STR0093+STRZERO(NTRA,3) + CHR(13)+CHR(10) + ;  //" ==> TRANSP..: "
         STR0094+STRZERO(NGRU,3) , STR0004)  //" ==> LOCACAO.: "###"GPO - GRCONTR.PRW"

RETURN NIL



// ----------------------------------------------------------------------- \\
FUNCTION LOCA01309( CCODBEM )	// TESTA O CAMPOS T9_SITMAN
// ----------------------------------------------------------------------- \\
// --> CONTIDA NA VALIDAÇÃO DE USUÁRIO DOS CAMPOS: FPO_FROTA / FPO_CODBEM 
LOCAL AAREA := GETAREA()
LOCAL LRET  := .T.

LRET := (POSICIONE("ST9",1,XFILIAL("ST9")+CCODBEM,"T9_SITMAN") == "A")
IF ! LRET
	MSGALERT(STR0095 , STR0004)  //"STATUS DE MANUTENÇÃO: O CÓDIGO DO BEM [CCODBEM] ESTÁ INATIVO NO SISTEMA!"###"GPO - GRCONTR.PRW"
ENDIF

RESTAREA(AAREA)

RETURN LRET



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPROGRAMA  ³ F_ASEMAIL º AUTOR ³ IT UP BUSINESS     º DATA ³ 30/06/2007 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDESCRICAO ³ DISPARA O E-MAIL QUANDO APRESENTADO ALTERAÇÃO NA AS.       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUSO       ³ ESPECIFICO GPO                                             º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
STATIC FUNCTION F_ASEMAIL(CVEJAPROJ,CVEJATPSE,CRECNO)

LOCAL 	AAREA   := GETAREA()
LOCAL 	CQUERY  := ""
LOCAL 	AANEXOS := {}
LOCAL   CREVAS	:= 0
LOCAL   NI      := 0 

DEFAULT CRECNO	:=	""

IF SELECT("TRAB") > 0
	TRAB->(DBCLOSEAREA())
ENDIF

IF EMPTY(CRECNO)
	RETURN
ENDIF

CQUERY := "	SELECT FQ5_AS, FQ5_SOT, FQ5_OBRA, FQ5_VIAGEM, FQ5_DATGER, R_E_C_N_O_ FROM " + RETSQLNAME('FQ5')+ " AS DTQ"
CQUERY += " WHERE D_E_L_E_T_ = '' "
CQUERY += " AND R_E_C_N_O_ IN (" + CRECNO + ")"

DBUSEAREA(.T.,"TOPCONN", TCGENQRY(,,CQUERY),"TRAB", .F., .T.)
TCSETFIELD("TRAB","FPO_DATGER",   "D",8,0)

IF FP0->FP0_TIPOSE = 'G'
	CREVAS:= POSICIONE("FP4",3,XFILIAL("FP4")+TRAB->FQ5_AS+TRAB->FQ5_VIAGEM,"FP4_REVNAS")
ENDIF

CTITULO		:= STR0096 + CVEJAPROJ //" REVISÃO DAS AS´S DO PROJETO/OBRA "
CMSG1        := ""
CMSG		:= ""

WHILE .NOT. TRAB->(EOF())
	
	// PARA ENVIAR E-MAIL NA REVISÃO 
	// PARA SÓ ENVIAR E-MAIL QUANDO FOR NOVA AS 
	// VOLTAR A ENVIAR E-MAIL QUANDO FOR REVISÃO 
	IF ASCAN(AASNOVA, TRAB->R_E_C_N_O_) == 0 .AND. ASCAN(AASREV, TRAB->R_E_C_N_O_) == 0
		TRAB->(DBSKIP())
		LOOP
	ENDIF
	
	FQ5->(DBGOTO( TRAB->R_E_C_N_O_ ))
	CANEXO := FQ5->FQ5_AS+".PDF"
	
	CTITULO		:= STR0097 + ALLTRIM(TRAB->FQ5_SOT) + STR0098 + FP0->FP0_REVISA //"REVISÃO PROJETO "###", REVISÃO "
	CTIT2		:= _CTIPOAS + STR0099 + TRAB->FQ5_AS +STR0100+ STRZERO(CREVAS,3) +STR0101 +  STR0102 + ALLTRIM(TRAB->FQ5_SOT) + STR0100 + FP0->FP0_REVISA + STR0103+FQ5->FQ5_OBRA + SPACE(100) //" NÚMERO "###" REVISÃO "###" DO "###" PROJETO "###" REVISÃO "###" PARA OBRA "
	CMSG1 		+= IIF( LEN(CMSG1) = 0 , STR0104 + CHR(13)+CHR(10) , CHR(13)+CHR(10) ) + CTIT2 + CHR(13) + CHR(10) //"ESTE EMAIL É PARA INFORMAR QUE NO SISTEMA FOI REVISADA AS:"
	
	DO CASE
	CASE CVEJATPSE $ "E"	// AS DE EQUIPAMENTO
		IF CVEJATPSE == "L"
			// POSICIONO NA ZA6-TRANSPORTES X PROJETO
			/*
			ZA6->(DBSETORDER(1))
			ZA6->(DBSEEK(XFILIAL("ZA6") +  TRAB->FQ5_SOT + TRAB->FQ5_OBRA))
			*/
		ENDIF
		//POSICIONO NA ZA1-OBRAS
		FP1->(DBSETORDER(1))
		FP1->(DBSEEK(XFILIAL("FP1") + TRAB->FQ5_SOT + TRAB->FQ5_OBRA))
		
		//POSICIONA NA ZA5-GUINDASTES X PROJETO
		FP4->(DBSETORDER(2))
		FP4->(DBSEEK(XFILIAL("FP4") +  TRAB->FQ5_SOT + TRAB->FQ5_OBRA + TRAB->FQ5_AS +TRAB->FQ5_VIAGEM))
		
		CMSG1	+= CHR(13) + CHR(10)
		CMSG1	+= STR0056 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"LOCAL DO SERVIÇO"
		CMSG	+= STR0012 + FQ5->FQ5_NOMCLI + CHR(13) + CHR(10) //"CLIENTE "
		CMSG1	+= STR0065 + FP1->FP1_NOMORI 												+ CHR(13) + CHR(10) //"OBRA   "
		//CMSG1	+= "CIDADE " + IIF(FP0->FP0_TIPOSE == "L",ZA6->ZA6_MUNDES,FP1->FP1_MUNORI)	+ CHR(13) + CHR(10)
		//CMSG1	+= "ESTADO " + IIF(FP0->FP0_TIPOSE == "L",ZA6->ZA6_ESTDES,FP1->FP1_ESTORI)	+ CHR(13) + CHR(10) + CHR(13) + CHR(10)
		CMSG1	+= STR0064 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"EQUIPAMENTO"
		CMSG1	+=  ALLTRIM(FP4->FP4_GUINDA) + " - " + ALLTRIM(FP4->FP4_DESGUI) + " (" + ALLTRIM(FP4->FP4_CONFIG) + ")" + CHR(13) + CHR(10)
		
		IF FQ5->FQ5_TPAS == "F"
			CHECKASG()
		ENDIF
		//Removido por Frank em 05/04/2022 por questão dos débitos técnicos
		IF .F.//__COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
		//	CANEXO := GETSRVPROFSTRING("STARTPATH","")+CANEXO
		//	AADD(AANEXOS, CANEXO)
		ENDIF
			
	CASE CVEJATPSE $ "L"		// AS DE LOCAÇÃO
		// --> POSICIONO NA ZA1-OBRAS
		FP1->(DBSETORDER(1))
		FP1->(DBSEEK(XFILIAL("FP1") + TRAB->FQ5_SOT + TRAB->FQ5_OBRA))
		
		// --> POSICIONA NA ZAG-GRUAS X PROJETO
		FPA->(DBSETORDER(2))
		FPA->(DBSEEK(XFILIAL("FPA") +  TRAB->FQ5_SOT + TRAB->FQ5_OBRA + TRAB->FQ5_AS +TRAB->FQ5_VIAGEM))
		
		CMSG1	+= CHR(13) + CHR(10)
		CMSG1	+= STR0056 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"LOCAL DO SERVIÇO"
		CMSG	+= STR0012 + FQ5->FQ5_NOMCLI + CHR(13) + CHR(10) //"CLIENTE "
		CMSG1	+= STR0065 + FP1->FP1_NOMORI 	+ CHR(13) + CHR(10) //"OBRA   "
		CMSG1	+= STR0066 + FP1->FP1_MUNORI	+ CHR(13) + CHR(10) //"CIDADE "
		CMSG1	+= STR0067 + FP1->FP1_ESTORI	+ CHR(13) + CHR(10) + CHR(13) + CHR(10) //"ESTADO "
		CMSG1	+= STR0064 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"EQUIPAMENTO"
		CMSG1	+=  ALLTRIM(FPA->FPA_GRUA) + " - " + ALLTRIM(FPA->FPA_DESGRU)+ CHR(13) + CHR(10)
		
		IF FQ5->FQ5_TPAS != "F"
			//U_LOCI045(FQ5->FQ5_AS, CANEXO)
			// FRANK ZWARG FUGA - 08/09/2020 - DESCONTINUADO CONFORME DOCUMENTAÇÃO DO LAVOR
		ELSE
			LOCA030(FQ5->FQ5_AS, CANEXO)
			CHECKASG()
		ENDIF
		
		//Removido por Frank em 05/04/2022 por questão dos débitos técnicos
		IF .F. //__COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
			//CANEXO := GETSRVPROFSTRING("STARTPATH","")+CANEXO
			//AADD(AANEXOS, CANEXO)
		ENDIF
			
	CASE CVEJATPSE $ "F"	//AS DE FRETE    (ASF)
		FP1->(DBSETORDER(1))
		FP1->(DBSEEK(XFILIAL("FP1") + TRAB->FQ5_SOT + TRAB->FQ5_OBRA))
		
		CMSG1	+= CHR(13) + CHR(10)
		CMSG1	+= STR0056 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"LOCAL DO SERVIÇO"
		CMSG	+= STR0012 + FQ5->FQ5_NOMCLI + CHR(13) + CHR(10) //"CLIENTE "
		CMSG1	+= STR0065 + FP1->FP1_NOMORI 												+ CHR(13) + CHR(10) //"OBRA   "
		CMSG1	+= STR0066 + FP1->FP1_MUNORI	+ CHR(13) + CHR(10) //"CIDADE "
		CMSG1	+= STR0067 + FP1->FP1_ESTORI	+ CHR(13) + CHR(10) + CHR(13) + CHR(10) //"ESTADO "
		CMSG1	+= STR0064 + CHR(13) + CHR(10) + CHR(13) + CHR(10) //"EQUIPAMENTO"
		
		LOCA030(FQ5->FQ5_AS, CANEXO)
		
		// Removido por Frank em 05/04/2022 por questão dos débitos técnicos
		IF .F. //__COPYFILE(ALLTRIM(GETTEMPPATH())+CANEXO, GETSRVPROFSTRING("STARTPATH","")+CANEXO)
			//CANEXO := GETSRVPROFSTRING("STARTPATH","")+CANEXO
			//AADD(AANEXOS, CANEXO)
		ENDIF
	ENDCASE
	
	DBSELECTAREA("TRAB")
	DBSKIP()
	
ENDDO

IF SELECT("TRAB") > 0
	TRAB->(DBCLOSEAREA())
ENDIF

RESTAREA(AAREA)

CANEXO := ""

FOR NI := 1 TO LEN(AANEXOS)
	//CANEXO += AANEXOS[NI] + IF(NI < LEN(AANEXOS), ", ", "")
NEXT NI

RETURN NIL



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPROGRAMA  ³ FALTDTQ   º AUTOR ³ IT UP BUSINESS     º DATA ³ 30/06/2007 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDESCRICAO ³ RETORNA .T. SE EXISTIR DIFERENÇA ENTRE AS VARIÁVEIS DE ME- º±±
±±º          ³ MÓRIA E OS DADOS DA AS (TABELA: DTQ)                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUSO       ³ ESPECIFICO GPO                                             º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
FUNCTION LOCA01310(ACPOS , XVIAGEM , XALIAS) 

LOCAL NIT
LOCAL XEXCLUSAO := "FQ5_STATUS;FQ5_DATGER;FQ5_HORGER"

DEFAULT XALIAS  := "FQ5"

If FQ5->FQ5_STATUS == "9" .and. XALIAS  == "FQ5"
	XEXCLUSAO := "FQ5_DATGER;FQ5_HORGER" // Frank em 14/07/21
EndIF
IF EMPTY(XVIAGEM)			// SE NÃO TEM VIAGEM, RETORNA QUE EXISTE ALTERAÇÃO E DEVE SER REGRAVADO
	RETURN .T.
ENDIF

IF XALIAS == "FPS"			// É ASF - FRETE
	XEXCLUSAO := "FPS_VALOR"
ENDIF

FOR NIT := 1 TO LEN(ACPOS)
	IF ! ALLTRIM(ACPOS[NIT][1]) $ XEXCLUSAO
		IF &(XALIAS)->( FIELDGET(FIELDPOS(ACPOS[NIT][1])) ) != ACPOS[NIT][2]	// VALOR DO CAMPO É DIFERENTE DO VALOR A SER GRAVADO
			RETURN .T.
		ENDIF
	ENDIF
NEXT NIT

RETURN .F.



/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPROGRAMA  ³ FALTDTQ2  º AUTOR ³ IT UP BUSINESS     º DATA ³ 30/06/2007 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDESCRICAO ³ RETORNA .T. SE EXISTIR DIFERENÇA ENTRE AS VARIÁVEIS DE ME- º±±
±±º          ³ MÓRIA E OS DADOS DA AS (TABELA: DTQ)                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUSO       ³ ESPECIFICO GPO                                             º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
FUNCTION LOCA01311(ACPOS, XVIAGEM, XALIAS)

LOCAL NIT
LOCAL XEXCLUSAO := "FQ5_STATUS;FQ5_DATGER;FQ5_HORGER"

DEFAULT XALIAS  := "FQ5"

If FQ5->FQ5_STATUS == "9" .and. XALIAS  == "FQ5"
	XEXCLUSAO := "FQ5_DATGER;FQ5_HORGER" // Frank 14/07/21
EndIF
IF EMPTY(XVIAGEM)	// SE NÃO TEM VIAGEM, RETORNA QUE EXISTE ALTERAÇÃO E DEVE SER REGRAVADO
	RETURN .T.
ENDIF

IF XALIAS == "FQ7"	// É ASF - FRETE
	XEXCLUSAO := "FQ7_VALOR"
ENDIF

FOR NIT := 1 TO LEN(ACPOS)
	IF ! ALLTRIM(ACPOS[NIT][1]) $ XEXCLUSAO
		IF &(XALIAS)->( FIELDGET(FIELDPOS(ACPOS[NIT][1])) ) != ACPOS[NIT][2]	// VALOR DO CAMPO É DIFERENTE DO VALOR A SER GRAVADO
			RETURN .T.
		ENDIF
	ENDIF
NEXT NIT

RETURN .F.



// ======================================================================= \\
STATIC FUNCTION CHECKASG
// ======================================================================= \\
LOCAL AAREA		:= GETAREA()
LOCAL ASAVDTQ	:= FQ5->( GETAREA() )
LOCAL LRET		:= .T.
LOCAL NDIAS		:= 0
LOCAL EFROM, CPARA , CCC, CTITULO, CMSG, CCCO 	/*, CLSTANEXOS*/
LOCAL CASF		:= FQ5->FQ5_AS 					// NUMERO DA ASF
LOCAL DDTASF	:= FQ5->FQ5_DATGER 				// DATA DA ASF

DEFAULT ALINALT := {}

IF FQ5->FQ5_TPAS # 'F' .OR. !(ASCAN(ALINALT, {|LINHA| FQ5->FQ5_VIAGEM==LINHA[2]}) > 0 )
	RETURN 										// NAO EH ASF OU NAO FOI LINHA ALTERADA SAI DA ROTINA
ENDIF

DBSELECTAREA("FQ5")
DBSETORDER(1) 									// FQ5_FILIAL + FQ5_VIAGEM
MSSEEK(XFILIAL('FQ5')+FPS->FPS_VIAORI) 			// POSICIONA ASG
IF DDTASF < (FQ5->FQ5_DATINI-30) .OR. DDTASF > (FQ5->FQ5_DATFIM+30)
	LRET := .F.
	IF DDTASF < (FQ5->FQ5_DATINI-30)
		NDIAS := DDTASF - FQ5->FQ5_DATINI
	ELSEIF DDTASF > (FQ5->FQ5_DATFIM+30)
		NDIAS := DDTASF - FQ5->FQ5_DATFIM
	ENDIF
ELSE
	RETURN 										// SE NÃO FEZ A CONTAGEM DE DIAS FORA DO PERÍODO SAI DA ROTINA, POIS
ENDIF

// ENVIA E-MAIL DE AVISO QUE A ASF ESTÁ FORA DO PERÍODO DA ASG (FQ5_DATINI -30 DIAS E FQ5_DATFIM +30 DIAS)
CCC	 	:= ""
CCCO 	:= ""
CMSG 	:= STR0105 + CASF + STR0106 + STR(ABS(NDIAS),5,0) + IIF(NDIAS<0,STR0107,STR0108) + CHR(13)+CHR(10) //'ESTE E-MAIL É PARA INFORMAR QUE A ASF "'###'" ESTÁ '###' DIAS ABAIXO DA DATA INICIAL.'###' DIAS ACIMA DA DATA FINAL.'
CMSG	+= CHR(13)+CHR(10) + STR0109 + FQ5->FQ5_AS + '" :' + CHR(13)+CHR(10) //'DATAS LIMITES DA AS Nº "'
CMSG	+= STR0110 + DTOC(FQ5->FQ5_DATINI) + CHR(13)+CHR(10) //"DATA INICIAL "
CMSG	+= STR0111 + DTOC(FQ5->FQ5_DATFIM) + CHR(13)+CHR(10) + CHR(13)+CHR(10) //"DATA FINAL "
CMSG	+= STR0112 + DTOC(DDTASF) + CHR(13)+CHR(10) //"DATA ASF "
EFROM 	:= ALLTRIM(GETMV("MV_RELFROM"))//ALLTRIM(USRRETNAME(RETCODUSR())) + "<" + ALLTRIM(USRRETMAIL(RETCODUSR())) + ">"
CPARA 	:= GETMV("MV_LOCX058",,"")
CTITULO	:= STR0113 //"ASF COM PERÍODO DIVERGENTE"

IF LEN(CMSG) > 0
	LOCA01313( EFROM, CPARA, CCC, CTITULO, CMSG, /*CLSTANEXOS*/, CCCO)	// ROTINA DE ENVIO DE E-MAIL PADRÃO
ENDIF

FQ5->( RESTAREA(ASAVDTQ) )
RESTAREA(AAREA)

RETURN LRET



// ======================================================================= \\
STATIC FUNCTION CHECKASG2
// ======================================================================= \\

LOCAL AAREA		:= GETAREA()
LOCAL ASAVDTQ	:= FQ5->( GETAREA() )
LOCAL LRET		:= .T.
LOCAL NDIAS		:= 0
LOCAL EFROM, CPARA , CCC, CTITULO, CMSG, CCCO 	/*, CLSTANEXOS*/
LOCAL CASF		:= FQ5->FQ5_AS 					// NUMERO DA ASF
LOCAL DDTASF	:= FQ5->FQ5_DATGER 				// DATA DA ASF

DEFAULT ALINALT := {}

IF FQ5->FQ5_TPAS # 'F' .OR. !(ASCAN(ALINALT, {|LINHA| FQ5->FQ5_VIAGEM==LINHA[2]}) > 0 )
	RETURN 										// NAO EH ASF OU NAO FOI LINHA ALTERADA SAI DA ROTINA
ENDIF

DBSELECTAREA("FQ5")
DBSETORDER(1) 									// FQ5_FILIAL + FQ5_VIAGEM
MSSEEK(XFILIAL('FQ5')+FQ7->FQ7_VIAORI) 			// POSICIONA ASG
IF DDTASF < (FQ5->FQ5_DATINI-30) .OR. DDTASF > (FQ5->FQ5_DATFIM+30)
	LRET := .F.
	IF DDTASF < (FQ5->FQ5_DATINI-30)
		NDIAS := DDTASF - FQ5->FQ5_DATINI
	ELSEIF DDTASF > (FQ5->FQ5_DATFIM+30)
		NDIAS := DDTASF - FQ5->FQ5_DATFIM
	ENDIF
ELSE
	RETURN 										// SE NÃO FEZ A CONTAGEM DE DIAS FORA DO PERÍODO SAI DA ROTINA, POIS
ENDIF

// ENVIA E-MAIL DE AVISO QUE A ASF ESTÁ FORA DO PERÍODO DA ASG (FQ5_DATINI -30 DIAS E FQ5_DATFIM +30 DIAS)
CCC	 	:= ""
CCCO 	:= ""
CMSG 	:= STR0105 + CASF + STR0106 + STR(ABS(NDIAS),5,0) + IIF(NDIAS<0,STR0107,STR0108) + CHR(13)+CHR(10) //'ESTE E-MAIL É PARA INFORMAR QUE A ASF "'###'" ESTÁ '###' DIAS ABAIXO DA DATA INICIAL.'###' DIAS ACIMA DA DATA FINAL.'
CMSG	+= CHR(13)+CHR(10) + STR0109 + FQ5->FQ5_AS + " :" + CHR(13)+CHR(10) //'DATAS LIMITES DA AS Nº "'
CMSG	+= STR0110 + DTOC(FQ5->FQ5_DATINI) + CHR(13)+CHR(10) //"DATA INICIAL "
CMSG	+= STR0111 + DTOC(FQ5->FQ5_DATFIM) + CHR(13)+CHR(10) + CHR(13)+CHR(10) //"DATA FINAL "
CMSG	+= STR0112 + DTOC(DDTASF) + CHR(13)+CHR(10) //"DATA ASF "
EFROM 	:= ALLTRIM(GETMV("MV_RELFROM"))//ALLTRIM(USRRETNAME(RETCODUSR())) + "<" + ALLTRIM(USRRETMAIL(RETCODUSR())) + ">"
CPARA 	:= GETMV("MV_LOCX058",,"")
CTITULO	:= STR0113 //"ASF COM PERÍODO DIVERGENTE"

IF LEN(CMSG) > 0
	LOCA01313( EFROM, CPARA, CCC, CTITULO, CMSG, /*CLSTANEXOS*/, CCCO)	// ROTINA DE ENVIO DE E-MAIL PADRÃO
ENDIF

FQ5->( RESTAREA(ASAVDTQ) )
RESTAREA(AAREA)

RETURN LRET



// ======================================================================= \\
FUNCTION LOCA01312()
// ======================================================================= \\

RPCSETTYPE(3)
PREPARE ENVIRONMENT EMPRESA "01" FILIAL "01" MODULO ""
DBSELECTAREA('FQ5')
DBSELECTAREA('FPS')
DBSELECTAREA('FQ7')
CHECKASG()
RESET ENVIRONMENT

RETURN



/*
// ======================================================================= \\
STATIC FUNCTION AVALTEML(CTABELA, NREG, ACOL)
// ======================================================================= \\
// --> CHAMADA: NÃO EXISTE - DESCONTINUADO 
LOCAL AAREA   := GETAREA()
LOCAL ASAVX3  := SX3->( GETAREA() )
LOCAL I, CCC, CCCO, CMSG, EFROM, CPARA, CTITULO, CLSTANEXOS, CAUX, CAUX2
LOCAL CTXT    := ""

DEFAULT CTABELA	:= ""
DEFAULT NREG	:= 0
DEFAULT ACOL	:= {}

IF EMPTY(CTABELA) .OR. NREG == 0 .OR. ACOL == {}
	RETURN
ENDIF

DBSELECTAREA("SX3")
DBSETORDER(2)

FOR I := 1 TO LEN(ACOL)
	IF ACOL[I][2] # ACOL[I][3]
		DBSEEK(ACOL[I][1])
		CAUX := IF(VALTYPE(ACOL[I][2])=='D', DTOC(ACOL[I][2]), ACOL[I][2])
		CAUX2:= IF(VALTYPE(ACOL[I][3])=='D', DTOC(ACOL[I][3]), ACOL[I][3])
		CTXT += IF(EMPTY(X3TITULO()),ACOL[I][1],X3TITULO()) + ' ERA "' + CAUX + ' FICOU "' + CAUX2 + '"' + CHR(13)+CHR(10)
	ENDIF
NEXT I

IF EMPTY(CTXT)
	RESTAREA(AAREA)
	SX3->( RESTAREA(ASAVX3) )
	RETURN
ENDIF

// ENVIA E-MAIL DE AVISO QUE A ASF ESTÁ FORA DO PERÍODO DA ASG (FQ5_DATINI -30 DIAS E FQ5_DATFIM +30 DIAS)
CCC	 	:= ""
CCCO 	:= ""
CMSG 	:= 'ESTE E-MAIL É PARA INFORMAR QUE A OCORRERAM ALTERAÇÕES NO REGISTRO Nº ' + ALLTRIM(STR(NREG,5,0)) + ' DA TABELA "' + CTABELA + '.' + CHR(13)+CHR(10)
CMSG	+= CHR(13)+CHR(10) + 'DADOS ALTERADOS:' + CHR(13)+CHR(10)
CMSG	+= CTXT
EFROM 	:= ALLTRIM(GETMV("MV_RELFROM"))//ALLTRIM(USRRETNAME(RETCODUSR())) + "<" + ALLTRIM(USRRETMAIL(RETCODUSR())) + ">"
CPARA 	:= GETMV("MV_LOCX058")
CTITULO	:= "ASF COM PERÍODO DIVERGENTE"

IF LEN(CMSG) > 0
	LOCA01313( EFROM, CPARA, CCC, CTITULO, CMSG, , CCCO)	// ROTINA DE ENVIO DE E-MAIL PADRÃO
ENDIF

RESTAREA(AAREA)
SX3->( RESTAREA(ASAVX3) )

RETURN NIL
*/



// ======================================================================= \\
STATIC FUNCTION ENVMLIFT(_AREGI)
// ======================================================================= \\

LOCAL _CHTMP := ""
LOCAL _NI    := 0 

_CHTMP += "<HTML>"
_CHTMP +=     "<TABLE BORDER=0 WIDTH=800>"
_CHTMP +=     "    <TR>"
_CHTMP +=     "    </TR>"
_CHTMP +=     "</TABLE>"
_CHTMP +=     "<BR>"
_CHTMP +=     "<P1>"+STR0114+"</P1>" //"<P1>REMESSA PARA LOCAÇÃO </P1>"
_CHTMP +=     "<BR>"
_CHTMP +=     "<BR>"
_CHTMP +=     "<TABLE BORDER=1 >"
_CHTMP +=         "<TR>"
_CHTMP +=             "<TH>"+STR0115+"</TH>" //"<TH>PEDIDO</TH>"
_CHTMP +=             "<TH>"+STR0116+"</TH>" //"<TH>CLIENTE/LOJA</TH>"
_CHTMP +=             "<TH>"+STR0117+"</TH>" //"<TH>NOME</TH>"
_CHTMP +=             "<TH>"+STR0118+"</TH>" //"<TH>DATA</TH>"
_CHTMP +=             "<TH>"+STR0119+"</TH>" //"<TH>A.S.</TH>"
FOR _NI := 1 TO LEN(_AREGI)
	DBSELECTAREA("FP0")
	FP0->( DBSETORDER(1) )
	FP0->( DBSEEK( XFILIAL("FP0")+_AREGI[_NI,1] ) )
	DBSELECTAREA("SC5")
	SC5->( DBSETORDER(1) )
	SC5->( DBSEEK( XFILIAL("SC5")+_AREGI[_NI,4] ) )
	_CHTMP +=     "<TR>"
	_CHTMP +=         "<TD>"+SC5->C5_NUM+"</TD>"
	_CHTMP +=         "<TD>"+FP0->FP0_CLI+"-"+FP0->FP0_LOJA+"</TD>"
	_CHTMP +=         "<TD>"+FP0->FP0_CLINOM+"</TD>"
	_CHTMP +=         "<TD>"+DTOC(SC5->C5_EMISSAO)+"</TD>"
	_CHTMP +=         "<TD>"+SC5->C5_AS+"</TD>"
	_CHTMP +=     "</TR>"
NEXT _NI
_CHTMP +=     "</TABLE>"
_CHTMP += "</HTML>"

EFROM	:= ""
CCC		:= ""
CANEXO	:= ""
CCCO	:= ""
CTITULO	:= STR0120 //"LIFT - REMESSA PARA LOCAÇÃO"
CPARA	:= ALLTRIM(GETMV("MV_LOCX233"))

LOCA05909( EFROM, CPARA , CCC, CTITULO, _CHTMP, CANEXO, CCCO)

RETURN NIL



/*
// ======================================================================= \\
STATIC FUNCTION VALLIFT()
// ======================================================================= \\
// --> CHAMADA: NÃO EXISTE - DESCONTINUADA 
IF EMPTY(_CPRODUTO) .OR. _NPRCEQU <= 0
	MSGSTOP("PREENCHA OS CAMPOS CORRETAMENTE!" , "GPO - GRCONTR.PRW") 
	RETURN(.F.)
ELSE
	ODLGOP:END()
	_LCONT := .T.
ENDIF

RETURN NIL
*/



/*
// ======================================================================= \\
STATIC FUNCTION GETNUMAS(CPROJET , COBRA , CSEQCAR) 
// ======================================================================= \\
// --> CHAMADA: NÃO EXISTE - DESCONTINUADA 

LOCAL AAREA    := GETAREA()
LOCAL AAREADTQ := FQ5->(GETAREA())
LOCAL CRET     := ""

DBSELECTAREA("FQ5")
DBSETORDER(8)
DBSEEK(XFILIAL("FQ5")+CPROJET+COBRA)
WHILE !FQ5->(EOF()) .AND. ALLTRIM(FQ5->FQ5_SOT+FQ5->FQ5_OBRA) == ALLTRIM(CPROJET+COBRA)
	IF ALLTRIM(FQ5->FQ5_SEQCAR) != ALLTRIM(CSEQCAR)
		FQ5->(DBSKIP())
		LOOP
	ENDIF
	CRET := FQ5->FQ5_AS
	FQ5->(DBSKIP())
ENDDO

RESTAREA(AAREADTQ)
RESTAREA(AAREA)

RETURN(CRET)
*/


// ======================================================================= \\
STATIC FUNCTION GETASORI(CVIAGEM)
// ======================================================================= \\

LOCAL AAREA		:= GETAREA()
LOCAL AAREADTQ	:= FQ5->(GETAREA())
LOCAL CRET		:= ""
LOCAL CQUERY	:= ""

DBSELECTAREA("FQ5")
DBSETORDER(1)

// --> POSICIONA CONJUNTO TRANSPORTADORES
IF SELECT("TRAB_VIAORI") > 0
	TRAB_VIAORI->(DBCLOSEAREA())
ENDIF

CQUERY := " SELECT DTQ.R_E_C_N_O_ FQ5_RECNO "
CQUERY += " FROM " + RETSQLNAME('FPS') + " ZLW"
CQUERY +=        " JOIN " + RETSQLNAME('FQ5') + " DTQ ON FPS_VIAORI = FQ5_VIAGEM"
CQUERY += " WHERE ZLW.D_E_L_E_T_ = '' AND DTQ.D_E_L_E_T_ = ''"
CQUERY +=   " AND FPS_VIAGEM = '"+ CVIAGEM +"'"
DBUSEAREA(.T.,"TOPCONN", TCGENQRY(,,CQUERY),"TRAB_VIAORI", .F., .T.)

FQ5->(DBGOTO( TRAB_VIAORI->FQ5_RECNO ))
CRET := FQ5->FQ5_AS

IF SELECT("TRAB_VIAORI") > 0
	TRAB_VIAORI->(DBCLOSEAREA())
ENDIF

// --> POSICIONA CONJUNTO TRANSPORTADORES
IF SELECT("TRAB_VIAORI") > 0
	TRAB_VIAORI->(DBCLOSEAREA())
ENDIF

CQUERY := " SELECT DTQ.R_E_C_N_O_ FQ5_RECNO "
CQUERY += " FROM " + RETSQLNAME('FQ7') + " ZUC"
CQUERY +=        " JOIN " + RETSQLNAME('FQ5') + " DTQ ON FQ7_VIAORI = FQ5_VIAGEM"
CQUERY += " WHERE ZUC.D_E_L_E_T_ = '' AND DTQ.D_E_L_E_T_ = ''"
CQUERY +=   " AND FQ7_VIAGEM = '"+ CVIAGEM +"'"
DBUSEAREA(.T.,"TOPCONN", TCGENQRY(,,CQUERY),"TRAB_VIAORI", .F., .T.)

FQ5->(DBGOTO( TRAB_VIAORI->FQ5_RECNO ))
CRET := FQ5->FQ5_AS

IF SELECT("TRAB_VIAORI") > 0
	TRAB_VIAORI->(DBCLOSEAREA())
ENDIF

RESTAREA(AAREADTQ)
RESTAREA(AAREA)

RETURN(CRET)



// ======================================================================= \\
STATIC FUNCTION GETTIPOAS(CFROTA)
// ======================================================================= \\

LOCAL CRET		:= "E"
LOCAL AAREA		:= GETAREA()
LOCAL AAREAST9	:= ST9->(GETAREA())

DBSELECTAREA("ST9")
DBSETORDER(1)
IF DBSEEK(XFILIAL("ST9")+CFROTA)
	IF ST9->T9_TIPOSE == "T"
		CRET := "T"
	ENDIF
ENDIF

RESTAREA(AAREAST9)
RESTAREA(AAREA)

RETURN(CRET)



// ======================================================================= \\
STATIC FUNCTION CHEKOBRA(CINDICE)
// ======================================================================= \\

LOCAL LRET		:= .T.
LOCAL AAREA		:= GETAREA()
LOCAL AAREAZA1	:= FP1->(GETAREA())

DBSELECTAREA("FP1")
DBSETORDER(1)
IF !DBSEEK(XFILIAL("FP1")+CINDICE)
	LRET := .F.
ENDIF

RESTAREA(AAREAZA1)
RESTAREA(AAREA)

RETURN(LRET)



// ======================================================================= \\
FUNCTION LOCA01313(_CREMET , _CDEST , _CCC , _CASSUNTO , CBODY , _CANEXO , _CCCO , _LMSG) 
// ======================================================================= \\

LOCAL CSERVER    := ALLTRIM(GETMV("MV_RELSERV"))      	// SERVIDOR PARA ENVIO DE EMAIL
LOCAL CACCOUNT   := ALLTRIM(GETMV("MV_RELACNT")) 		// NOME DA CONTA A SER UTILIZADA  
LOCAL CENVIA     := ALLTRIM(GETMV("MV_RELFROM"))    	// EMAIL DE ENVIO
LOCAL CRECEBE    := _CDEST              			  	// EMAIL DO DESTINATÁRIO
LOCAL CPASSWORD  := ALLTRIM(GETMV("MV_RELPSW"))   		// DEFINE A SENHA DA CONTA A SER USADA PARA AUTENTICAÇÃO     
LOCAL AFILES     := {}
LOCAL CMENSAGEM  := ""
LOCAL LCONECTOU  := .F.
LOCAL LDISCONECT := .F.

CMENSAGEM := CBODY

CONNECT SMTP SERVER CSERVER ACCOUNT CACCOUNT PASSWORD CPASSWORD RESULT LCONECTOU// EFETUA AUTENTICAÇÃO

MAILAUTH(CACCOUNT, CPASSWORD)
IF LCONECTOU
	//CONOUT("##GRCONTR.PRW## CONECTADO COM SERVIDOR DE E-MAIL - " + CSERVER) 
ENDIF

// ARQUIVOS A SEREM ATACHADOS
AFILES := { _CANEXO }

SEND MAIL FROM CENVIA ;
TO CRECEBE ;
SUBJECT _CASSUNTO ;
BODY CMENSAGEM ;
RESULT LENVIADO

IF LENVIADO
	//CONOUT("##GRCONTR.PRW## ENVIADO E-MAIL - ASSUNTO: ["+ALLTRIM(_CASSUNTO)+"] - PARA: ["+ALLTRIM(_CDEST)+"]")
ELSE
	CMENSAGEM := ""
	GET MAIL ERROR CMENSAGEM
	//ALERT(CMENSAGEM)
	//conout(CMENSAGEM)
ENDIF

DISCONNECT SMTP SERVER RESULT LDISCONECT 

IF LDISCONECT 
	//CONOUT("##GRCONTR.PRW## DESCONECTOU DO ENVIO DO ORCAMENTO") 
ENDIF 

RETURN 



// --------------------------------------------------------------------------
/*/{PROTHEUS.DOC} RETFILGRV
RETORNA A FILIAL QUE VAI SER GRAVADA NO REGISTRO.
@AUTHOR  IT UP BUSINESS
@SINCE   21/04/2019
/*/
// --------------------------------------------------------------------------
STATIC FUNCTION RETFILGRV(CCAMPO) 

LOCAL CINFRET  := "" 
LOCAL LVLDFIL  := SUPERGETMV("MV_LOCX085",.F.,.T.)			// GETMV("MV_LOCX085" , , .F.)
LOCAL CFILPROJ := FP0->FP0_FILIAL 

DEFAULT CCAMPO := "" 

DO CASE
CASE ALLTRIM(CCAMPO) == "FQ5_FILIAL"
	IF LVLDFIL
		IF EMPTY(XFILIAL("FQ5")) 
			CINFRET := XFILIAL("FQ5") 
		ELSE 
			CINFRET := CFILPROJ 
		ENDIF 
	ELSE 
		CINFRET     := XFILIAL("FQ5") 
	ENDIF 
CASE ALLTRIM(CCAMPO) == "FQ5_FILORI" 
	IF LVLDFIL 
		CINFRET     := CFILPROJ 
	ELSE 
		CINFRET     := CFILANT 
	ENDIF 
ENDCASE 

RETURN CINFRET 



/*
// ======================================================================= \\
STATIC FUNCTION SAVELIN() 
// ======================================================================= \\
// --> FUNÇÃO DESCONTINUADA - A ÚNICA CHAMADA ESTÁ COMENTADA.
LOCAL NPOSVIAGEM := ASCAN(AHEADEQUIPS,{|ACOL| ALLTRIM(ACOL[2]) == 'FP4_VIAGEM'})

IF NPOSVIAGEM > 0
	AADD(ALINALT, {ODLGEQUIPS:OBROWSE:NROWPOS,GDFIELDGET('FP4_VIAGEM')})
ENDIF

RETURN .T.
*/



/*
// ======================================================================= \\
FUNCTION LOCA01314(CCODPROSP, CLOJAPROSP, CCONTATO)
// ======================================================================= \\
// --> ROTINA QUE CONVERTE UM PROSPECT EM CLIENTE.
// --> NÃO EXISTE NENHUMA CHAMADA DESTA FUNÇÃO - DESCONTINUADA.
LOCAL LOK := .T.
LOCAL ARET := {}

DBSELECTAREA("SA1")
SA1->(DBSETORDER(1))
IF !SA1->(DBSEEK(XFILIAL("SA1")+ CCODPROSP + CLOJAPROSP , .F. ))
	MSGSTOP("CLIENTE/PROSPECT "+CCODPROSP+ CLOJAPROSP + "  NAO ENCONTRADO !!!" , "GPO - GRCONTR.PRW") 
	LOK := .F.
ENDIF

IF LOK .AND. EMPTY(SA1->A1_PROSP)
	DBSELECTAREA("SA1")
	RECLOCK("SA1",.F.)
	REPLACE A1_PROSP WITH "C"
	MSUNLOCK()
	ARET := { SA1->A1_COD , SA1->A1_LOJA } 
ELSEIF LOK
	ARET := { SA1->A1_COD , SA1->A1_LOJA } 
ELSE
	ARET := {}
ENDIF

RETURN ARET
*/

/*
// ======================================================================= \\
FUNCTION LOCA01315(DINICIO , DFINAL)
// ======================================================================= \\
// --> NÃO EXISTE NENHUMA CHAMADA DESTA FUNÇÃO - DESCONTINUADA.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ FORMATO DO VETOR AGANTT                                                 ³
//ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
//³ AGANTT[1] = ARRAY - VEICULOS ALOCADOS                                   ³
//³ 	AGANTT[1,1] = VEICULO/1O REBOQUE OU 2O REBOQUE + MODELO             ³
//³ 	AGANTT[1,2] = TEXTO PARA EXIBIR AO LADO ESQUEDO DA TAREFA(VIAGEM)   ³
//³ 	AGANTT[1,3] = FILIAL ORIGEM DA VIAGEM                               ³
//³ 	AGANTT[1,4] = NUMERO DA VIAGEM                                      ³
//³ AGANTT[2] = INTERVALOS DAS TAREFAS        (VIAGEM)                      ³
//³ 	AGANTT[2,1] = DATA INICIO DA TAREFA   (VIAGEM)                      ³
//³ 	AGANTT[2,2] = HORA INICIO DA TAREFA   (VIAGEM)                      ³
//³ 	AGANTT[2,3] = DATA FIM DA TAREFA      (VIAGEM)                      ³
//³ 	AGANTT[2,4] = HORA FIM DA TAREFA      (VIAGEM)                      ³
//³ 	AGANTT[2,5] = TEXTO PARA EXIBIR SOBRE A TAREFA( VIAGEM )            ³
//³ 	AGANTT[2,6] = COR DA TAREFA           (VIAGEM)                      ³
//³ 	AGANTT[2,7] = AÇÃO AO CLICAR NA TAREFA(VIAGEM)                      ³
//³ 	AGANTT[2,8] = INDICA ONDE O TEXTO DO 5O ELEMENTO SERA EXIBIDO       ³
//³ 		1 = AO LADO DA TAREFA( VIAGEM ) OU 2 = SOBRE A TAREFA(VIAGEM).  ³
//³ 	AGANTT[2,9] = COR DO CABECALHO DO GRAFICO                           ³
//³ AGANTT[3] = ELEMENTO NAO UTILIZADO                                      ³
//³ AGANTT[4] = TIPO DA FONT UTILIZADA                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
AGANTT := {}

AADD( AGANTT , { { CDESCR, "", CCHAVE },;
               { {DDATINI,CHORINI,DDATFIM,CHORFIM,CRINT,TMSA143COR( CSTATUS ),"TMSA143MNU(" + STR( ( CALIASQRY )->RECNO ) + ",AGANTT)",3,CLR_GRAY, ( CALIASQRY )->FQ5_FILORI, ( CALIASQRY )->FQ5_VIAGEM } },, OBOLD } )

RETURN
*/


/*
// ======================================================================= \\
FUNCTION LOCA01316()
// ======================================================================= \\
// --> NÃO EXISTE NENHUMA CHAMADA DESTA FUNÇÃO - DESCONTINUADA.

AEQUIPS := {}
ARECNOS := {}

FP1->(DBSETORDER(1))
FP1->(DBSEEK(XFILIAL("FP1")+CPROJETO))

WHILE FP1->(!EOF()) .AND. FP1->FP1_FILIAL+FP1->FP1_PROJET == XFILIAL("FP1")+CPROJETO
	
	// --> TRATAMENTO PARA GUINDASTE
	// ======================================================================
	FP4->(DBSETORDER(1))
	FP4->(DBSEEK(XFILIAL("FP4")+CPROJETO+FP1->FP1_OBRA))
	WHILE FP4->(!EOF()) .AND. FP4->FP4_FILIAL+FP4->FP4_PROJET+FP4->FP4_OBRA == XFILIAL("FP4")+CPROJETO+FP1->FP1_OBRA
		AADD( AEQUIPS , { FP4->FP4_OBRA    , ; 			// 1 - OBRA
		                  FP4->FP4_GUINDA  , ;			// 2 - TRANSP - FROTA PREVISTA
		                  FP4->FP4_DTINI   , ; 			// 3 - DATA INICIO
		                  FP4->FP4_DTFIM   , ;  		// 4 - DATA FINAL
		                  FP4->FP4_GUIALO  , ;   		// 5 - FROTA ALOCADA
		                  FP4->FP4_QTMONT  , ;   		// 6 - QTDE DE DIAS DE MONTAGEM - CANDISANI
		                  FP4->FP4_QTDESM  , ;   		// 7 - QTDE DE DIAS DE DESMONTAGEM - CANDISANI
		                  .F. } ) 
		AADD( ARECNOS , { "FP4" , FP4->(RECNO()) })
		FP4->(DBSKIP())
	ENDDO
	
	// --> TRATAMENTO PARA TRANSPOETE
	// ======================================================================
	ZA6->(DBSETORDER(1))
	ZA6->(DBSEEK(XFILIAL("ZA6")+CPROJETO+FP1->FP1_OBRA))
	WHILE ZA6->(!EOF()) .AND. ZA6->ZA6_FILIAL+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA == XFILIAL("ZA6")+CPROJETO+FP1->FP1_OBRA
		CEQUIP:=FP8->FP8_TRANSP
		FP8->(DBSETORDER(1))
		FP8->(DBSEEK( XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA, .F. ))
		WHILE !FP8->(EOF()) .AND. ( FP8->FP8_FILIAL+FP8->FP8_PROJET +FP8->FP8_OBRA +FP8->FP8_SEQTRA == XFILIAL("FP8")+ZA6->ZA6_PROJET+ZA6->ZA6_OBRA+ZA6->ZA6_SEQTRA )
			AADD( AEQUIPS , { ZA6->ZA6_OBRA   , ;   	// 1 - OBRA
			                  FP8->FP8_TRANSP , ;		// 2 - TRANSP - FROTA PREVISTA
			                  ZA6->ZA6_DTINI  , ;   	// 3 - DATA INICIO
			                  ZA6->ZA6_DTFIM  , ;    	// 4 - DATA FINAL
			                  FP8->FP8_TRALOC , ;  		// 5 - FROTA ALOCADA
			                  .F. } )
			AADD( ARECNOS , { "FP8" , FP8->(RECNO()) })
			FP8->(DBSKIP())
		ENDDO
		ZA6->(DBSKIP())
	ENDDO
	FP1->(DBSKIP())
	
ENDDO

RETURN
*/


/*
// ======================================================================= \\
FUNCTION LOCA01317()
// ======================================================================= \\
// --> LEVANTA QUAIS OS EQUIPAMENTOS ENVOLVIDOS.
// --> NÃO EXISTE NENHUMA CHAMADA DESTA FUNÇÃO - DESCONTINUADA.

LOCAL CTITJAN := "ALOCACAO EQUIPAMENTOS"
LOCAL NSTYLE  := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL NPOS , LRET:=.F.

PRIVATE ODLG
PRIVATE OPROJET
PRIVATE OOBRA
PRIVATE XPROJET
PRIVATE XOBRA
PRIVATE ODLGEQUIPS
PRIVATE OFOLDER
PRIVATE ARECNOS := {}
PRIVATE OARIAL12N1:=TFONT():NEW("ARIAL",12,16,,.T.,,,,.T.,.F.)
PRIVATE OARIAL12N2:=TFONT():NEW("ARIAL",12,16,,.T.,,,,.T.,.F.)

OFONT1 := OARIAL12N1  //SAY
OFONT2 := OARIAL12N2  //GET

PRIVATE AOBJECTS  := {}
PRIVATE AINFO     := {}
PRIVATE APOSGET   := {}
PRIVATE APOSOBJ   := {}
PRIVATE ALINALT	  := {{,}}

ASIZEAUT 	 := MSADVSIZE()

IF OMAINWND:NCLIENTWIDTH > 800
	AADD( AOBJECTS, {  100, 008, .T., .T. } )  //ENCHOICE
	AADD( AOBJECTS, {  100, 092, .T., .T. } )  //MSGETDADOS
ELSE
	AADD( AOBJECTS, {  100, 010, .T., .T. } )  //ENCHOICE
	AADD( AOBJECTS, {  100, 090, .T., .T. } )  //MSGETDADOS
ENDIF

AINFO 	:= {ASIZEAUT[1],ASIZEAUT[2],ASIZEAUT[3],ASIZEAUT[4],3,3}
APOSOBJ := MSOBJSIZE( AINFO, AOBJECTS, .T. , .F. )
APOSGET := MSOBJGETPOS((ASIZEAUT[3]-ASIZEAUT[1]),315,{{004,024,240,270}} )

DEFINE MSDIALOG ODLG FROM ASIZEAUT[7],0           TO ASIZEAUT[6],ASIZEAUT[5] TITLE OEMTOANSI(CTITJAN) OF OMAINWND PIXEL

APAGES :={}
ATITLES:={}

AADD(ATITLES,"EQUIPAMENTOS NECESSARIOS" ) 
NFOLDERPRO := LEN(ATITLES) 

NLIN1 := APOSOBJ[2,1]
NCOL1 := APOSOBJ[2,2]
NLIN2 := APOSOBJ[2,4]-APOSOBJ[2,2]  //LARGURA
NCOL2 := APOSOBJ[2,3]-APOSOBJ[2,1]  //ALTURA

//   	       TFOLDER():NEW(<NROW>,<NCOL>,<CPROMPT>,<CDLGNAMEN>,<OWND> ,<NOPTION>,<NCLRFORE>,<NCLRBACK>,<.LPIXEL.>,<.LDESIGN.>,<NWIDTH>,<NHEIGHT>,<CMSG>)
OFOLDER := TFOLDER():NEW(NLIN1 ,NCOL1 ,ATITLES  ,APAGES     ,ODLG   ,         ,          ,          ,.T.       ,.F.        ,NLIN2   ,NCOL2    ,      )

FOR NPOS:=1 TO LEN(ATITLES)
	OFOLDER:ADIALOGS[NPOS]:OFONT:=ODLG:OFONT
NEXT

CPROJET := FP0->FP0_PROJET

// DADOS DO PROJETO
NLIN1 := APOSOBJ[1,1]
NCOL1 := APOSOBJ[1,2]
NLIN2 := APOSOBJ[1,3]
NCOL2 := APOSOBJ[1,4]
@ NLIN1,NCOL1 TO NLIN2,NCOL2 OF ODLG PIXEL
@ NLIN1+06,NCOL1+005 SAY OEMTOANSI("PROJETO:") SIZE 050,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT1
@ NLIN1+05,NCOL1+055 MSGET OPROJET VAR CPROJET SIZE 150,8 OF ODLG PIXEL COLOR CLR_BLUE FONT OFONT2 WHEN .F.

NLIN1 := 002
NCOL1 := 003
NLIN2 := APOSOBJ[2,3]-55
NCOL2 := APOSOBJ[2,4]-07

FFOLDEREQUIPS(NFOLDERPRO , NLIN1 , NCOL1 , NLIN2 , NCOL2) 

ACTIVATE MSDIALOG ODLG CENTERED ON INIT ENCHOICEBAR(ODLG,{||FSALVAR(ODLG)},{||FSAIR(ODLG)})

RETURN NIL
*/


/*
// ======================================================================= \\
STATIC FUNCTION FSALVAR(ODLG)
// ======================================================================= \\
// --> CHAMADA: FUNCTION LOCA01317() - DESCONTINUADA 
FOR F := 1 TO LEN( ARECNOS )
	IF     ARECNOS[F][1] = "FP4"  // GUINDANTE
		DBSELECTAREA("FP4")
		DBGOTO( ARECNOS[F][2] )
		RECLOCK("FP4",.F.)
		REPLACE FP4_GUIALO WITH ODLGEQUIPS:ACOLS[F][ASCAN(ODLGEQUIPS:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUIALO"})]
		MSUNLOCK()
	ELSEIF ARECNOS[F][1] = "FP8"
		DBSELECTAREA("FP8")
		DBGOTO( ARECNOS[F][2] )
		RECLOCK("FP8",.F.)
		REPLACE FP8_TRALOC WITH ODLGEQUIPS:ACOLS[F][ASCAN(ODLGEQUIPS:AHEADER,{|X|ALLTRIM(X[2])=="FP4_GUIALO"})]
		MSUNLOCK()
	ENDIF
NEXT F

ODLG:END()

RETURN NIL
*/


/*
// ======================================================================= \\
STATIC FUNCTION FSAIR( ODLG )
// ======================================================================= \\
// --> CHAMADA: FUNCTION LOCA01317() - DESCONTINUADA 

ODLG:END()

RETURN NIL
*/


/*
// ======================================================================= \\
STATIC FUNCTION FFOLDEREQUIPS(NFOLDER , NLIN1 , NCOL1 , NLIN2 , NCOL2) 
// ======================================================================= \\
// --> CHAMADA: FUNCTION LOCA01317() - DESCONTINUADA 

LOCAL ACAMPOSNAO := {}
LOCAL ACAMPOSSIM := {}
LOCAL NSTYLE     := GD_INSERT + GD_UPDATE + GD_DELETE
LOCAL CALIAS,CCHAVE,CCONDICAO,NINDICE,CFILTRO

AHEADEQUIPS := FHEAD_EQUIP()
ACOLSEQUIPS := FCOLS_EQUIP(FP0->FP0_PROJET)
CFIELDOK	:= 'ALWAYSTRUE' 	// 'SAVELIN'
//                              NTOP ,NLEFT,NBOTTOM,NRIGHT,NSTYLE,CLINHAOK,CTUDOOK,CINICPOS,AALTER,NFREEZE,NMAX , CFIELDOK , CSUPERDEL,CDELOK,OWND                     ,AHEADER    ,ACOLS      }
ODLGEQUIPS := MSNEWGETDADOS():NEW(NLIN1,NCOL1,NLIN2  ,NCOL2 ,NSTYLE,        ,       ,        ,      ,       ,110  , CFIELDOK ,          ,.T.   ,OFOLDER:ADIALOGS[NFOLDER],AHEADEQUIPS,ACOLSEQUIPS)

RETURN NIL
*/
// Rotina para geracao dos titulos provisorios
// Frank Zwarg Fuga em 17/03/2021
Static Function GerPRx
Local _lRet 	:= .t.
Local _aArea 	:= GetArea()
Local _cProj    := FP0->FP0_PROJET
Local _aTitulos := {}
Local _dIni
Local _dFim
Local _dFat
Local _cFil
Local _nX
Local _dTemp
Local _cMes
Local _aPeriodos := {}
Local _cTesFat	 := SUPERGETMV("MV_LOCX080" ,.T.,"" )
Local _cQuery
Local _aVetSE1
Local _cNumTit
Local _cNatureza := SUPERGETMV("MV_LOCX065" ,.T.,"" )  // antes era o mv_locx279
Local _dVenc
Local _dNewData
Local _dOld
Local _lGeraNum
Local _cAsX
Local _nParc
Local _nRegx
Local _MV_MOEDA := SuperGetMV("MV_MOEDA",,1)
Local cCliFat := ""
Local cLojFat := ""

FPA->(dbSetOrder(1))
FPA->(dbSeek(xFilial("FPA")+_cProj))

FP0->(dbSetOrder(1))
FP0->(dbSeek(xFilial("FP0")+_cProj))
FP1->(dbSetOrder(1))
FP1->(dbSeek(xFilial("FP0") + _cProj + FPA->FPA_OBRA))

While !FPA->(eof()) .and. FPA->FPA_PROJET == _cProj
	If FPA->FPA_QUANT > 0 .and. !empty(FPA->FPA_AS) .and. FPA->FPA_VRHOR > 0 .and. empty(FPA->FPA_NFRET)
		_dIni  := FPA->FPA_DTINI
		_dFim  := FPA->FPA_DTENRE
		_dFat  := FPA->FPA_DTFIM
		_cFil  := FPA->FPA_FILEMI
		_dTemp := FPA->FPA_DTINI
		_nMes  := 0

		// Passo 1 - Verificar os ciclos de faturamento que podem existir neste período
		While _dTemp <= _dFim
			if month(_dTemp) <> _nMes
				_nMes := month(_dTemp)
				//Seleciona Cliente de acordo MULTPLUS FATURAMENTO NO CONTRATO - SIGALOC94-282
				If FPA->(ColumnPos("FPA_CLIFAT")) > 0 .And. !Empty(FPA->FPA_CLIFAT)
					cCliFat := FPA->FPA_CLIFAT
					cLojFat := FPA->FPA_LOJFAT
				ElseIf !Empty(FP1->FP1_CLIDES)
					cCliFat := FP1->FP1_CLIDES
					cLojFat := FP1->FP1_LOJDES
				Else
					cCliFat := FP0->FP0_CLI
					cLojFat := FP0->FP0_LOJA
				EndIf
				//               1       2    3             4              5            6               7               8              9
				//aadd(_aPeriodos,{_dTemp, .T., FP0->FP0_CLI, FP0->FP0_LOJA, FPA->FPA_AS, FPA->FPA_VRHOR, FPA->(Recno()), FPA->FPA_OBRA, FPA->FPA_SEQGRU })
				aadd(_aPeriodos,{_dTemp, .T., cCliFat, cLojFat, FPA->FPA_AS, FPA->FPA_VRHOR, FPA->(Recno()), FPA->FPA_OBRA, FPA->FPA_SEQGRU })
			endif
			_dTemp ++
		EndDo
		For _nX:=1 to len(_aPeriodos) // deixar todos os registros com o dia do próximo faturamento
			If day(lastday(ctod("01/"+str(month(_aPeriodos[_nX,1]))+"/"+str(year(_aPeriodos[_nX,1]))))) < day(_dFat)
				_aPeriodos[_nX,1] := lastday(ctod("01/"+str(month(_aPeriodos[_nX,1]))+"/"+str(year(_aPeriodos[_nX,1]))))
			Else
				_aPeriodos[_nX,1] := ctod(str(day(_dFat))+"/"+str(month(_aPeriodos[_nX,1]))+"/"+str(year(_aPeriodos[_nX,1])))
			EndIF
		Next

		// Passo 2 - Verificar para cada ciclo se já foram emitidos faturamento
		_cQuery := " SELECT C6_NUM " 
		_cQuery += " FROM " + RETSQLNAME("SC6") + " SC6 "
		_cQuery += " WHERE SC6.C6_FILIAL = '"+_cFil+"' "
		_cQuery += " AND SC6.C6_XAS = '"+FPA->FPA_AS+"' "
		_cQuery += " AND SC6.C6_TES = '"+_cTesFat+"' "
		_cQuery += " AND SC6.D_E_L_E_T_ = '' "
		IF SELECT("TRBVLD") > 0
			TRBVLD->(DBCLOSEAREA())
		ENDIF
		TCQUERY _CQUERY NEW ALIAS "TRBVLD"
		If !TRBVLD->(Eof())			
			For _nX:=1 to len(_aPeriodos)		
				If _aPeriodos[_nX,5] == FPA->FPA_AS .and. _aPeriodos[_nX,1] >= FPA->FPA_DTINI .and. _aPeriodos[_nX,1] <= FPA->FPA_DTENRE
					_aPeriodos[_nX,2] := .F.
				EndIF
			Next
		EndIF
		TRBVLD->(DBCLOSEAREA())

	EndIF
	FPA->(dbSkip())
EndDo

If len(_aPeriodos) > 0

	// Excluir os provisorios
	For _nX := 1 to len(_aPeriodos)
		If !_aPeriodos[_nX,2]
			Loop
		EndIf

		// Verificar se existem outras moedas envolvidas.
		// Frank - 26/08/21
		_dVenc := _aPeriodos[_nX,1]
		_dNewData := DataValida(_dVenc, .T.) 
		_lBloqx := .F.
		If FP0->FP0_MOEDA <> _MV_MOEDA //SuperGetMV("MV_MOEDA",,1)
			SM2->(dbSetOrder(1))
			If SM2->(dbSeek(dtos(_dNewData)))
				_cMoedaX := "SM2->M2_MOEDA"+alltrim(str(FP0->FP0_MOEDA))
				If &(_cMoedaX) == 0
					_lBloqX := .T.
				EndIF
			Else
				_lBloqX := .T.
			EndIF
		EndIF		

		If _lBloqX
			MsgAlert(STR0121+dtoc(_dNewData),STR0122) //"Atenção não foi localizado no cadastro de moeda a cotação do dia: "###"Título provisório não criado."
			//DisarmTransaction()
			RestArea(_aArea)
			Return .F.
		EndIF

		FQB->(dbSetOrder(1))
		FQB->(dbSeek(xFilial("FQB")+FP0->FP0_PROJET+_aPeriodos[_nX,5]))
		If !FQB->(Eof()) .and. FQB->FQB_FILIAL == xFilial("FQB") .and. FQB->(FQB_PROJET+FQB_AS) == FP0->FP0_PROJET+_aPeriodos[_nX,5]
			SE1->(dbSetOrder(1))
			SE1->(dbSeek(xFilial("SE1")+FQB->FQB_PREF+FQB->FQB_PR)) 
			While !SE1->(Eof()) .and. SE1->(E1_FILIAL+E1_PREFIXO+E1_NUM) == xFilial("SE1")+FQB->FQB_PREF+FQB->FQB_PR
				SE1->(RecLock("SE1",.F.))
				SE1->(dbDelete())
				SE1->(MsUnlock())
				SE1->(dbSkip())
			EndDo
			While !FQB->(Eof()) .and. FQB->FQB_FILIAL == xFilial("FQB") .and. FQB->(FQB_PROJET+FQB_AS) == FP0->FP0_PROJET+_aPeriodos[_nX,5]
				FQB->(RecLock("FQB",.F.))
				FQB->(dbDelete())
				FQB->(MsUnlock())
				FQB->(dbSkip())
			EndDo
		EndIf
	Next

	// Incluir os provisorios
	_lGeraNum := .T.
	_cAsX     := ""
	_nParc    := 0
	For _nX := 1 to len(_aPeriodos)
		_nParc ++
		
		If !_aPeriodos[_nX,2] .or. _aPeriodos[_nX,6] == 0
			Loop
		EndIf

		//_nParc ++

		// Geracao da numeracao do titulo provisorio
		If _lGeraNum .or. _cAsx <> _aPeriodos[_nX,5]
			_cQuery := " SELECT MAX(E1_NUM) AS REG " 
			_cQuery += " FROM " + RETSQLNAME("SE1") + " SE1 "
			_cQuery += " WHERE SE1.E1_FILIAL = '"+_cFil+"' "
			_cQuery += " AND SE1.E1_PREFIXO = 'REN' "
			_cQuery += " AND SE1.D_E_L_E_T_ = '' "
			IF SELECT("TRBVLD") > 0
				TRBVLD->(DBCLOSEAREA())
			ENDIF
			TCQUERY _CQUERY NEW ALIAS "TRBVLD"
			_cNumTit := TRBVLD->REG
			If empty(_cNumTit)
				_cNumTit := "000000001"
			Else
				_cNumTit := soma1(_cNumTit)
			EndIF
			TRBVLD->(DBCLOSEAREA())
			_lGeraNum := .F.
			_cAsx := _aPeriodos[_nX,5]
			_nParc := 1
		EndIf

		SA1->(dbSetOrder(1))
		SA1->(dbSeek(xFilial("SA1")+_aPeriodos[_nX,3]+_aPeriodos[_nX,4]))

		_aVetSE1 := {}
		aAdd(_aVetSE1, {"E1_FILIAL",  _cFil,  				Nil})
		aAdd(_aVetSE1, {"E1_NUM",     _cNumTit,         	Nil})	
		aAdd(_aVetSE1, {"E1_PREFIXO", "REN",            	Nil})
		aAdd(_aVetSE1, {"E1_PARCELA", strzero(_nParc,2,0), 	Nil})
		aAdd(_aVetSE1, {"E1_TIPO",    "PR",             	Nil})
		aAdd(_aVetSE1, {"E1_NATUREZ", _cNatureza,       	Nil})
		aAdd(_aVetSE1, {"E1_CLIENTE", _aPeriodos[_nX,3],    Nil})
		aAdd(_aVetSE1, {"E1_LOJA",    _aPeriodos[_nX,4],    Nil})
		aAdd(_aVetSE1, {"E1_NOMCLI",  SA1->A1_NREDUZ,     	Nil})

		_dVenc := _aPeriodos[_nX,1]
		// Tentar encontrar a data valida dentro do mês levando dias a mais
		_dNewData := DataValida(_dVenc, .T.) 

		// Tentar encontrar a data valida dentro do mês levando dias a menos
		If _dVenc <> _dNewData .and. month(_dNewData) <> month(_dVenc)
			_dNewData := DataValida(_dVenc, .F.)
		EndIF

		aAdd(_aVetSE1, {"E1_EMISSAO", _dNewData, 	        Nil})
		aAdd(_aVetSE1, {"E1_VENCTO",  _dNewData,        	Nil})
		aAdd(_aVetSE1, {"E1_VENCREA", _dNewData,        	Nil})
		aAdd(_aVetSE1, {"E1_VALOR",   _aPeriodos[_nX,6],    Nil})
		aAdd(_aVetSE1, {"E1_HIST",    "RENTAL: "+_aPeriodos[_nX,5],   Nil})
		aAdd(_aVetSE1, {"E1_MOEDA",   FP0->FP0_MOEDA,   Nil})

		If FP0->FP0_MOEDA <> _MV_MOEDA //SuperGetMV("MV_MOEDA",,1)
			SM2->(dbSetOrder(1))
			SM2->(dbSeek(dtos(_dNewData)))
			_cCampo := "SM2->M2_TXMOED"+alltrim(str(FP0->FP0_MOEDA))
			aAdd(_aVetSE1, {"E1_TXMOEDA",   &(_Ccampo),   Nil})
		EndIF

		_dOld     := dDataBase
		dDataBase := _dNewData

		SED->(dbSetOrder(1))
		SED->(dbSeek(xFilial("SED")+_cNatureza))

		lMsErroAuto := .F.
		MSExecAuto({|x,y| FINA040(x,y)}, _aVetSE1, 3)
		
		If lMsErroAuto
			MostraErro()
			DisarmTransaction()
		Else
			FQB->(RecLock("FQB",.T.))
			FQB->FQB_FILIAL := _cFil
			FQB->FQB_PROJET := FP0->FP0_PROJET
			FQB->FQB_OBRA   := _aPeriodos[_nX,8]
			FQB->FQB_SEQGRU := _aPeriodos[_nX,9]
			FQB->FQB_AS     := _aPeriodos[_nX,5]
			FQB->FQB_PR     := SE1->E1_NUM
			FQB->FQB_PREF   := SE1->E1_PREFIXO
			FQB->FQB_PARC   := SE1->E1_PARCELA
			FQB->FQB_PERIOD := _aPeriodos[_nX,1]
			FQB->(MsUnlock())
		EndIf
		
		dDataBase := _dOld
	Next
EndIF


RestArea(_aArea)
Return _lRet


// Recuperar a delecao do titulo provisorio quando excluir o faturamento
// Frank em 19/03/21
// Esta posicionada na SC5 e na SC6
Function RECPROV
Local _cAs := SC6->C6_XAS
Local _cQuery
Local _nReg
Local _aArea := GetArea()
Local _lTem  := .F.
Local _cNumero := ""

_cQuery := " SELECT FPA.R_E_C_N_O_ AS REG " 
_cQuery += " FROM " + RETSQLNAME("FPA") + " FPA "
_cQuery += " WHERE FPA.FPA_FILEMI = '"+xFilial("FPA")+"' "
_cQuery += " AND FPA.FPA_AS = '"+_cAs+"' "
_cQuery += " AND FPA.D_E_L_E_T_ = '' "
IF SELECT("TRBVLD") > 0
	TRBVLD->(DBCLOSEAREA())
ENDIF
TCQUERY _CQUERY NEW ALIAS "TRBVLD"
If !TRBVLD->(Eof())
	_nReg := TRBVLD->REG
EndIF
TRBVLD->(DBCLOSEAREA())

If _nReg > 0 
	FPA->(dbGoto(_nReg))
	FP0->(dbSeek(xFilial("FP0")+FPA->FPA_PROJET))

	// Passo 1 - deletar todos os provisorios da AS
	FQB->(dbSetOrder(1))
	FQB->(dbSeek(xFilial("FQB")+FPA->FPA_PROJET+FPA->FPA_AS))
	While !FQB->(Eof()) .and. FQB->(FQB_FILIAL+FQB_PROJET+FQB_AS) == xFilial("FQB")+FPA->FPA_PROJET+FPA->FPA_AS
		SE1->(dbSetOrder(1))
		SE1->(dbSeek(xFilial("SE1")+FQB->FQB_PREF+FQB->FQB_PR)) 
		While !SE1->(Eof()) .and. SE1->(E1_FILIAL+E1_PREFIXO+E1_NUM) == xFilial("SE1")+FQB->FQB_PREF+FQB->FQB_PR
			SE1->(RecLock("SE1",.F.))
			SE1->(dbDelete())
			SE1->(MsUnlock())
			SE1->(dbSkip())
		EndDo
		FQB->(RecLock("FQB",.F.))
		FQB->(dbDelete())
		FQB->(MsUnlock())
		FQB->(dbSkip())
	EndDo

	// Passo 2 - refazer os provisorios
	GerPRx()
EndIF
RestArea(_aArea)
Return .T.



// Rotina de geração do contrato e aprovação automática
// Frank Zwarg Fuga
Function LOCA013AUT(_cFilial, _cProjeto, _cObra, _cSeqGru, _lIncl, _lAlt, _aRot, _lAviso)
Local _aArea 	:= GetArea()
Local _aAreaFPA := FPA->(GetArea())
Local _lRet 	:= .T.
Local _cRet 	:= ""
Local cFilOld   := cFilAnt
Local cProjet

Default _cProjeto := ""
Default _cObra := ""
Default _cSeqGru := ""
Default _lIncl := ""
Default _lAlt := ""
Default _aRot := {}
Default _lAviso := .T.

If empty(_cProjeto) .or. empty(_cObra) .or. empty(_cSeqGru)
	_lRet := .F.
	_cRet += STR0125 //"Falha no envio dos parâmetros."
EndIf

// Compatibilizacao com a rotina LOCA013 para geracao do contrato
// --------------------------------------------------------------
Private INCLUI	:= _lIncl
Private ALTERA	:= _lAlt
Private AROTINA := _aRot
// --------------------------------------------------------------
// Compatibilizacao com a rotina LOCA059 para aprovacao da AS
// ----------------------------------------------------------
Private _LTEMVINC := SUPERGETMV("MV_LOCX029",.F.,.T.)
PRIVATE LVERZBX
PRIVATE AROTINA   := {}
PRIVATE CCADASTRO := STR0001 //"Apontador AS"
PRIVATE CPERG     := "LOCP010"
PRIVATE CSERV	  := ""
PRIVATE ACORES
PRIVATE LMINUTA	  := SUPERGETMV("MV_LOCX097",.F.,.T.) //SUPERGETMV("MV_LOCX052",.F.,.T.) trocado a pedido do Lui em 19/08/21 Frank.
PRIVATE LROMANEIO := SUPERGETMV("MV_LOCX071",.F.,.T.)
PRIVATE LFUNCAS   := SUPERGETMV("MV_LOCX237" ,.F.,.F.)
PRIVATE LFILTFIL  := SUPERGETMV("MV_LOCX236",.F.,.T.)
PUBLIC  DDT1      := CTOD("")
PUBLIC  DDT2      := CTOD("")
PUBLIC  CTP1      := ""
PUBLIC  CFIL1     := ""
PUBLIC  CFIL2     := "" 

LVERZBX := GETMV("MV_LOCX097",,.f.) 							// --> HABILITA CONTROLE DE MINUTA

//VALIDPERG()

// FRANK 23/09/2020 - SE FOREM CRIADAS NOVAS PERGUNTAS PRECISAM SER TRATADAS NO FILTRO DO ACEITE EM LOTE
//IF ! PERGUNTE(CPERG,.T.)
//	RETURN NIL
//ENDIF 

//If MV_PAR03 == 1
//	MV_PAR03 := "L"
//Else
//	MV_PAR03 := "F"
//EndIf

//DDT1  := MV_PAR01
//DDT2  := MV_PAR02
//CTP1  := MV_PAR03
//CFIL1 := MV_PAR04
//CFIL2 := MV_PAR05

//CSERV := IIF( CTP1 $ "TELF" , CTP1 , " " )						  							// INCLUSO O TIPO "F" PARA ASF. 
// ----------------------------------------------------------------------------------

If _lRet
	FPA->(dbSetOrder(8))
	If FPA->(dbSeek(_cFilial+_cProjeto+_cObra+_cSeqGru))

		FP0->(dbSetOrder(1))
		FP0->(dbSeek(xFilial("FP0")+_cProjeto))
		FP1->(dbSetOrder(1))
		FP1->(dbSeek(xFilial("FP0")+_cProjeto+_cObra))
		_nRegFPA := FPA->(Recno())
		_nRegFP0 := FP0->(Recno())
		_nRegFP1 := FP1->(Recno())
		IF LOCA00174( FPA->FPA_PROJET )
			FPA->(dbGoto(_nRegFPA))
			FP0->(dbGoto(_nRegFP0))
			FP1->(dbGoto(_nRegFP1))
			LOCA013(_lAviso)
			FPA->(dbGoto(_nRegFPA))
			FP0->(dbGoto(_nRegFP0))
			FP1->(dbGoto(_nRegFP1))
			DBSELECTAREA("FQ5")
			DBSETORDER(8)//PROJETO
			IF DBSEEK(XFILIAL("FQ5")+SUBSTR( _cProjeto, 1, 9))//SE GEROU O CONTRATO
				FP0->(RECLOCK("FP0",.F.))
				FP0->FP0_POSSIB := "100"
				FP0->(MSUNLOCK()) 
			
				cTempAS1 := "31"
				cTempAS1 += substr(FPA->FPA_AS,3,8)
				cTempAS2 := substr(FPA->FPA_AS,14,len(FPA->FPA_AS))

				//FQ5->(dbOrderNickName("ITUPFQ5008"))
				//FQ5->(dbSeek(xFilial("FQ5")+FPA->FPA_PROJET+FPA->FPA_OBRA))
				While !FQ5->(Eof()) .and. FQ5->(FQ5_FILIAL+substr(FQ5_SOT,1,9)) == xFilial("FQ5")+SUBSTR( _cProjeto, 1, 9)
					If FQ5->FQ5_AS == FPA->FPA_AS 
						// Aprovação da locação
						_nRegFQ5 := FQ5->(Recno())
						LOCA05908(,,.F.)
						DBSETORDER(8)
						FQ5->(dbGoto(_nRegFQ5))
					EndIF
					If substr(FQ5->FQ5_AS,1,10) == cTempAS1 .and. substr(FQ5->FQ5_AS,14,len(FPA->FPA_AS)) == cTempAS2
						// Aprovação das linhas de frete

						FQ5->(RecLock("FQ5",.F.))
						FQ5->FQ5_DTINI	:= dDataBase //DDTINI
						FQ5->FQ5_DTFIM	:= dDataBase //DDTFIM
						FQ5->FQ5_HRINI	:= time() //CHRINI
						FQ5->FQ5_HRFIM	:= time() //CHRFIM
						FQ5->FQ5_TIPAMA	:= "" //CTPAMA
						FQ5->FQ5_PACLIS	:= "" //CPACLIS
						FQ5->FQ5_DTPROG	:= DDATABASE
						FQ5->FQ5_STATUS := "1" 
						FQ5->(MsUnlock())

						_nRegFQ5 := FQ5->(Recno())
						LOCA05908(,,.f.)
						DBSETORDER(8)
						FQ5->(dbGoto(_nRegFQ5))

					EndIF
					FQ5->(dbSkip())
				EndDo

			EndIF

		ENDIF

	Else
		_lRet := .F.
		_cRet += STR0126 //"Registro não localizado na tabela de locação. "
	EndIF
EndIF

CFILANT := CFILOLD 

FPA->(RestArea(_aAreaFPA))
RestArea(_aArea)
Return {_lRet, _cRet}


//User Function TESTE1
// parametros:
// filial da FPA
// numero do contrato
// obra
// sequencia
// conteudo da variavel inclui no loca001
// conteudo da variavel altera no loca001
// conteudo do arotina do loca001
// se deseja apresentar as mensagens da rotina padrão da aprovação do contrato
//aRet := LOCA013AUT(xFilial("FPA"), "202100109             ", "001", "001", .F., .F., {}, .F.)
//Return


// Rotina para geração do titulo provisorio
// Frank Zwarg Fuga
// Criado por questão de não funcionar mais em pe a chamada das static function
function loca01318
GerPRx()
Return 

