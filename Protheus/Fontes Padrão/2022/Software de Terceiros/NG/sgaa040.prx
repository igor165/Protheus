#INCLUDE "SGAA040.ch"
#include "Protheus.ch"

//---------------------------------------------------------------------
/*/{Protheus.doc} SGAA040
Programa para cadastrar Impactos.

@type Function
@author Rafael Diogo Richter / Jackson M.  ³08/03/12³014417³ Rotina Refeita
@since 22/09/2003
@return Lógico Sempre verdadeiro
/*/
//---------------------------------------------------------------------
Function SGAA040()

Local aNGBEGINPRM := NGBEGINPRM()

Private aRotina   := MenuDef()
Private aChkDel   := { { "TAE->TAE_CODIMP", "TAB", 5} }
Private cCadastro := OemtoAnsi( STR0006 )  //"Impactos"
Private bNgGrava  := {|| .T. }
Private aChoice   := {}
Private aVarNao   := {}
Private cTudoOk   := "AllwaysTrue"
Private cLinOk    := "SGA040LIOK('TAI')"
Private aGetNao   := { { "TAI_CODIMP" , "M->TAE_CODIMP" } }
Private cGetWhile := "TAI->TAI_FILIAL == xFilial('TAI') .and. TAI->TAI_CODIMP == M->TAE_CODIMP"
Private cGetMake  := "TAE->TAE_CODIMP"
Private cGetKey   := "M->TAE_CODIMP+M->TAI_CODLEG"
Private cGetAlias := "TAI"

If Amiin( 56 ) //Verifica se o usuário possui licença para acessar a rotina.

	dbSelectArea( "TAE" )
	dbSetOrder( 1 )
	mBrowse( 6, 1, 22, 75, "TAE" )

EndIf

NGRETURNPRM( aNGBEGINPRM )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} SGA040LIOK

Valida a linha digitada no GetDados.

@type Function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  SGA040LIOK("TAI")
@param   cAlias, caracter, apresenta a alias passada
@return Lógico Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function SGA040LIOK( cAlias )

Local F
Local aColsOk := {}
Local aHeadOk := {}
Local nPosCod := 1
Local nAt     := N

If cAlias == "TAI"
	aColsOk := aClone( aCols )
	aHeadOk := aClone( aHeader )
	nPosCod := aScan( aHeader, { | x | Trim( Upper( x[ 2 ] ) ) == "TAI_CODLEG" } )
Endif

//Percorre aCols
For F := 1 To Len( aColsOk )
	If !aColsOk[ F ][ Len( aColsOk[ F ] ) ]
		//Verifica se é somente LinhaOk
		If F <> nAt .And. !aColsOk[ nAt ][ Len( aColsOk[ nAt ] ) ]
			If aColsOk[ F ][ nPosCod ] == aColsOk[ nAt ][ nPosCod ]
				Help(" ", 1, "JAEXISTINF", , aHeadOk[ nPosCod]  [ 1 ] )
				Return .F.
			Endif
		Endif
	Endif
Next F

PutFileInEof( "TAI" )

Return .T.
//---------------------------------------------------------------------
/*/{Protheus.doc} MenuDef
Utilizacao de Menu Funcional.

@return aRotina  - 	Array com as opções de menu.
					Parametros do array a Rotina:
					1. Nome a aparecer no cabecalho
					2. Nome da Rotina associada
					3. Reservado
					4. Tipo de Transa‡„o a ser efetuada:
						1 - Pesquisa e Posiciona em um Banco de Dados
						2 - Simplesmente Mostra os Campos
						3 - Inclui registros no Bancos de Dados
						4 - Altera o registro corrente
						5 - Remove o registro corrente do Banco de Dados
					5. Nivel de acesso
					6. Habilita Menu Funcional

@sample MenuDef()

@author Rafael Diogo Richter
@since 29/11/2006
/*/
//---------------------------------------------------------------------
Static Function MenuDef()
Local aRotina :=	{;
					{ STR0001, "AxPesqui", 0, 1 },;  //"Pesquisar"
                    { STR0002, "NGCAD02", 0, 2 },; //"Visualizar"
                    { STR0003, "NGCAD02", 0, 3 },; //"Incluir"
                    { STR0004, "NGCAD02", 0, 4 },; //"Alterar"
                    { STR0005, "NGCAD02", 0, 5, 3 } } //"Excluir"

Return aRotina

//-------------------------------------------------------------------
/*/{Protheus.doc} SG040PRO

Programa para cadastrar Impactos/Legislações relacionadas.

@type Function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  Sg040Pro("TAI", )
@param   cAlias, caracter, apresenta a alias passada
@param   nRecno, numérico, apresenta o recno do registro
@param   nOpcx, numérico, apresenta a opção
@return Lógico Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg040Pro( cAlias, nRecno, nOpcx )

	Local aPages    := {}
	Local aTitles   := {}
	Local aNoFields := {}
	Local cTitulo  := cCadastro  // Titulo da janela
	Local lGetd    := .T.
	Local nControl := 0
	Local nOK      := 0
	Local oMainWnd	 // Objeto para montar a janela de cadastro
	Local oDlg
	Local oMenu
	Local oPnlDlg
	Local oPnlAll

	Private aSvATela := {}
	Private aSvAGets := {}
	Private aTela    := {}
	Private N := 1
	Private oEnc01
	Private oGet
	Private aHeader


	Aadd( aTitles, OemToAnsi( STR0006 ) ) //"Impactos"
	Aadd( aPages, "Header 1" )

	nControl++

	Aadd( aTitles, OemToAnsi( "Requisitos" ) )
	Aadd( aPages, "Header 2" )

	nControl++

	Define MsDialog oDlg Title cTitulo From 9, 0 To 29, 80 Of oMainWnd

	oPnlDlg := TPanel():New( 00, 00, , oDlg, , , , , , 100, 20, .F., .F. )
	oPnlDlg:Align := CONTROL_ALIGN_ALLCLIENT

	oPnlAll := TPanel():New( 00, 00, , oPnlDlg, , , , , , 100, 17, .F., .F. )
	oPnlAll:Align := CONTROL_ALIGN_ALLCLIENT

	oFolder := TFolder():New( 0, 0, aTitles, aPages, oPnlAll, , , , .F., .F., 320, 200, )
	oFolder:Align := CONTROL_ALIGN_ALLCLIENT
	oFolder:aDialogs[ 1 ]:oFont := oDlg:oFont
	oFolder:aDialogs[ 2 ]:oFont := oDlg:oFont

	//Folder 01
	aTela := {}
	aGets := {}

	dbSelectArea( "TAE" )
	RegToMemory( "TAE", nOpcx == 3 )

	oEnc01:= MsMGet():New( "TAE", nRecno, nOpcx, , , , , { 0, 0, 125, 315 }, , , , , , oFolder:aDialogs[ 1 ], , , .F., "aSvATela" )
	oEnc01:oBox:bGotFocus := { | | NgEntraEnc( "TAE" ) }
	oEnc01:oBox:Align := CONTROL_ALIGN_ALLCLIENT

	aSvATela := aClone( aTela )
	aSvAGets := aClone( aGets )


	//Folder 02

	aAdd( aNoFields, 'TAI_CODIMP' )
	cQuery := "SELECT * FROM " + RetSqlName( "TAI" ) + " TAI WHERE TAI.TAI_FILIAL = ' " + xFilial( "TAI" ) +;
	" ' AND TAI.TAI_CODIMP = ' " + M->TAE_CODIMP + " ' AND TAI.D_E_L_E_T_ = ' '"

	FillGetDados( nOpcx, "TAI", 1, xFilial( "TAI" ) + M->TAE_CODIMP, { | | "TAI->TAI_FILIAL + TAI->TAI_CODIMP" } , ;
	{ | | .T. }, aNoFields, , , cQuery )


	N   := Len( aCols )

	oGet:= MsGetDados():New( 0, 0, 125, 315, nOpcx, "Sg040Lin1()", "Sg040Lin2()", , lGetd, , 1, , , , , , , oFolder:aDialogs[ 2 ] )
	oGet:oBrowse:Default()
	oGet:oBrowse:Refresh()
	oGet:oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

	NGPOPUP( aSMenu, @oMenu )
	oDlg:bRClicked:= { | o, x, y | oMenu:Activate( x, y, oDlg ) }
	oEnc01:oBox:bRClicked:= { |o,x,y| oMenu:Activate(x,y,oDlg)}
	Activate Dialog oDlg On Init (EnchoiceBar( oDlg, { | | lOk :=.T.,;
	IIf( Sg040Obrig( nOpcx ), oDlg:End(), lOk := .F. ) }, { | | nOk:= 0, oDlg:End() } ) ) Centered

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg040Obrig

Validação pré gravação

@type Function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  Sg040Obrig(3)
@param   nOpcx, numérico, apresenta a opção
@return Lógico Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg040Obrig(nOpcx)

	Local aOldArea := GetArea() // Guarda variaveis de alias e indice

	If !Obrigatorio(aGets,aTela)
		Return .F.
	Endif

	Sg040Grava(nOpcx)

	RestArea(aOldArea)

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg040Grava

Grava as informacoes

@type Function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  Sg040Obrig(3)
@param   nOpcx, numérico, apresenta a opção
@return Lógico Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg040Grava(nOpcx)

	Local j,i
	Local lDelete := .f.
	Local nQtd := 0

	//Valida arquivos relacionados na exclusao
	If nOpcx == 5
		aArea := GetArea()
		lDEL := .t.
		For i := 1 to Len(aCHKDEL)
			dbSelectArea(aCHKDEL[i][2])
			OldInd := INDEXORD()
			dbSetOrder(aCHKDEL[i][3])
			cKEY := aCHKDEL[i][1]
			lDEL := !( dbSeek(xFilial() + &cKEY.) )
			dbSetOrder(OldInd)
			If !lDEL
				SX2->(dbSeek(aCHKDEL[i][2]))
				cError := AllTrim(sx2->x2_nome) + " (" + sx2->x2_chave + ")"
				HELP(" ",1,"MA10SC",,cError,5,1)
				RestArea(aArea)
				Return
			Endif
		Next
		RestArea(aArea)   
	Endif

	//Manipula a tabela TAE
	dbSelectArea('TAE')
	dbSetOrder(1)
		If dbSeek(xFilial('TAE')+M->TAE_CODIMP)
	RecLock('TAE',.f.)
	Else
		RecLock('TAE',.t.)
	EndIf

	If nOpcx <> 5
		TAE->TAE_FILIAL := xFilial('TAE')
		TAE->TAE_CODIMP := M->TAE_CODIMP
		TAE->TAE_DESCRI := M->TAE_DESCRI
		TAE->TAE_OBSERV := M->TAE_OBSERV
	Else
		DbDelete()
	EndIf

	MsUnLock('TAE')

	//Manipula a tabela TAI
	If nOpcx == 5
		TAI->(dbSetOrder(1))	
		If TAI->(dbSeek(xFilial('TAI')+M->TAE_CODIMP))
			While !TAI->(Eof()) .and. xFilial('TAI') == TAI->TAI_FILIAL .and.;
										TAI->TAI_CODIMP == M->TAE_CODIMP
					RecLock('TAI',.f.)
					DbDelete()
					MsUnLock('TAI')
					TAI->(dbSkip())
			End
		EndIf
	Else
		For j:= 1 To Len( aCols )

			If !Empty(aCols[j][1])
				dbSelectArea('TAI')
					dbSetOrder(1)
				If dbSeek( xFilial('TAI')+M->TAE_CODIMP + aCols[j][1])
					RecLock('TAI',.f.)
					lDelete := .t.
				Else
					RecLock('TAI',.t.)
				EndIf

				If !aCols[j][Len(aCols[j])]
					TAI->TAI_FILIAL := xFilial('TAI')
					TAI->TAI_CODIMP := M->TAE_CODIMP
					TAI->TAI_CODLEG := aCols[j][1]
				Else
					If lDelete
					aEval(aCols, {|x| If(x[1] == aCols[j][1],nQtd++,Nil)})
					If nQtd <= 1
						DbDelete()
					EndIf
					EndIf
				Endif
					MsUnLock('TAI')
			EndIf
		Next
	Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Sg040Lin1

Validação de linha da getdados

@type Function
@author  Thiago Olis Machado
@since   15/03/2004
@sample  Sg040Lin1()
@return Lógico Sempre verdadeiro
/*/
//-------------------------------------------------------------------
Function Sg040Lin1()
	
	Local nx
	Local nQtd := 0
	Local cCodLeg := ''

	nPos    := aScan( aHeader, { |x| Trim( Upper(x[2]) ) == 'TAI_CODLEG'})
	cCodLeg := aCols[n][nPos]

	If Empty(aCols[1][1])
		Return .t.
	Endif

	For nx:=1 To Len(aCols)
		If !aCols[nx][Len(aCols[nx])]
			If Empty(aCols[nx][1])
				Help(" ",1,"OBRIGAT")
				Return .f.
			Endif
		Endif
	Next

	If nPos > 0
		aEval( aCols, { |x| nQtd += iif( ! x[Len(aHeader)+1] .And. x[nPos] == cCodLeg, 1, 0 ) } )
	EndIf   

	If nQtd > 1                                                             
		Help(" ",1,"ATENÇÃO",,STR0008,3,1) //"Campo Legislacao Duplicado"
		Return .f.                                                          
	EndIf                                                                    

Return .t.
